from dataclasses import dataclass
from collections import deque
from typing import Sequence, Tuple, Optional
from enum import Enum, auto
from pprint import pp


class Special(Enum):
    SPLIT = auto()
    MATCH = auto()


@dataclass
class State:
    c: str | Special
    out: Optional["State"] | None = None
    out1: Optional["State"] | None = None

    def to_tuple(self, attrname) -> Sequence[Tuple["State", str]]:
        return [(self, attrname)]


@dataclass
class Frag:
    start: State
    outs: Sequence[Tuple[State, str]]


@dataclass
class Scope:
    atom_cnt: int = 0
    alt_cnt: int = 0

@dataclass
class StateWalker:
    state: State
    _queue: deque = None

    def __post_init__(self):
        if self._queue is None:
            self._queue = deque([(self.state, 0)])

    @classmethod
    def from_state(cls, state: State) -> "StateWalker":
        return StateWalker(state)

    def state_generator(self, maxlevel: int | None = None):
        self._queue = deque([(self.state, 0)])
        while self._queue:
            st, step_level = self._queue.popleft()

            if maxlevel is not None and step_level > maxlevel:
                continue

            yield st, step_level
            if st.c == Special.SPLIT:
                self._queue.append((st.out, step_level,))
                self._queue.append((st.out1, step_level,))
            elif st.out:
                self._queue.append((st.out, step_level + 1,))

    # def __iter__(self, maxlevel=None):
    #     return self.state_generator(maxlevel)

    def gen_filter(self, string: str):
        print("=== gen filter ===")
        for idx, char in enumerate(string):
            # print(f"idx: {idx}, char: {char}")
            # breakpoint()
            # yield from (
            #     (st, step_level) for st, step_level in self
            #     if idx == step_level
            #     and st.c == char
            # )
            for st, step_level in self.state_generator(idx):
                if idx == step_level and st.c == char:
                    yield (st, step_level)

    def ismatch(self, string) -> bool:
        target = len(string) - 1
        return any(st.out.c == Special.MATCH
        for st, step_level in self.gen_filter(string)
        if step_level == target)

        # for st, step_level in self.gen_filter(string):
        #     print(st)
        #     print(step_level)
        # a = list(self.gen_filter(string))
        # print(len(a))
        # print(a)
        # print("asdf")



def patch(outs: Sequence[Tuple[State, str]], target: State):
    for state, attr in outs:
        setattr(state, attr, target)


def append(
    s1: Sequence[Tuple[State, str]], s2: Sequence[Tuple[State, str]]
) -> Sequence[Tuple[State, str]]:
    return s1 + s2


def zero_or_more(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    patch(e.outs, s)
    stack.append(Frag(s, s.to_tuple("out1")))


def one_or_more(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    patch(e.outs, s)
    stack.append(Frag(e.start, s.to_tuple("out1")))


def zero_or_one(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    stack.append(Frag(s, append(e.outs, s.to_tuple("out1"))))


def concat(stack):
    e1 = stack.pop()
    e2 = stack.pop()
    patch(e2.outs, e1.start)
    stack.append(Frag(e2.start, e1.outs))


def alternate(stack):
    e1 = stack.pop()
    e2 = stack.pop()
    s = State(Special.SPLIT, e1.start, e2.start)
    stack.append(Frag(s, append(e1.outs, e2.outs)))


def character(stack, tok: str):
    s = State(tok)
    stack.append(Frag(s, s.to_tuple("out")))


def post2nfa(postfix) -> State | None:

    stack: Sequence[Frag] = []

    for tok in postfix:
        match tok:
            case "*":
                zero_or_more(stack)
            case "+":
                one_or_more(stack)
            case "?":
                zero_or_one(stack)
            case ".":
                concat(stack)
            case "|":
                alternate(stack)
            case _:
                character(stack, tok)

    assert len(stack) == 1, "invalid postfix"
    e = stack.pop()
    matchstate = State(Special.MATCH)
    patch(e.outs, matchstate)
    return e.start


def flush_atom(scope, postfix_buffer):
    if scope.atom_cnt > 0:
        postfix_buffer += ["."] * (scope.atom_cnt - 1)
    scope.atom_cnt = 0
    return postfix_buffer


def flush_scope(scope, postfix_buffer):
    postfix_buffer = flush_atom(scope, postfix_buffer)
    postfix_buffer += ["|"] * scope.alt_cnt
    scope.alt_cnt = 0
    return postfix_buffer


def re2post(regex: str) -> str:
    """
    a(bb)+a -> abb.+.a.
    """

    postfix_buffer = []
    stack = [Scope()]
    scope_level = 0
    scope = stack[scope_level]
    for re in regex:
        match re:
            case "*" | "+" | "?":
                postfix_buffer.append(re)
            case "(":
                if scope.atom_cnt > 1:
                    scope.atom_cnt -= 1
                    postfix_buffer.append(".")
                scope_level += 1
                stack.append(Scope())
                scope = stack[scope_level]
            case ")":
                assert scope_level != 0, "closing paren - can not close unopened paren"
                assert scope.atom_cnt != 0, "closing paren - atom is empty"
                postfix_buffer = flush_scope(scope, postfix_buffer)
                scope_level -= 1
                scope = stack[scope_level]
                scope.atom_cnt += 1
            case "|":
                assert scope.atom_cnt != 0, "alternate - atom is empty"
                postfix_buffer = flush_atom(scope, postfix_buffer)
                scope.alt_cnt += 1
            case _:
                if scope.atom_cnt > 1:
                    scope.atom_cnt -= 1
                    postfix_buffer.append(".")
                postfix_buffer.append(re)
                scope.atom_cnt += 1
    assert scope_level == 0, "invalid paren - unclosed paren"
    postfix_buffer = flush_scope(scope, postfix_buffer)

    return "".join(postfix_buffer)

# def from_nfa(nfa: State):
#     states = []
#     add_state(states, nfa)
#     return states
# 
# def add_state(states: Sequence[State], s: State):
#     if s.c == Special.SPLIT:
#         add_state(states, s.out)
#         add_state(states, s.out1)
#         return
#     states.append(s)
# 
# def step(states: Sequence[State], char: str):
# 
#     next_states = []
# 
#     for state in states:
#         if state.c == char:
#             add_state(next_states, state)
# 
#     return next_states
# 
# def is_match(states: Sequence[State]):
#     for state in states:
#         if state.c == Special.MATCH:
#             return True
#     else:
#         return False
# 
# def nfa_match(nfa: State, string: str):
#     states = from_nfa(nfa)
#     for char in string:
#         print(f"current char: {char}")
#         pp(states)
#         next_states = step(states, char)
#         pp(next_states)
#         states, next_states = next_states, states
# 
#     return is_match(states)


# main
if __name__ == "__main__":
    regex = "a(bb)+a"
    # regex = "a*(ab|ba)+bbaba"
    postfix = re2post(regex)
    # pp(regex)
    # pp(postfix)
    nfa = post2nfa("abb.+.a.")  # (=  a (bb+). a .)
    sw = StateWalker.from_state(nfa)

    # print(sw.ismatch("abba"))
    # print(sw.ismatch("abbbba"))
    print(sw.ismatch("abbba"))
    # for st in sw:
    #     print(st)
    # pp(nfa)
    # print(nfa_match(nfa, "abbba"))
    # print(nfa_match(nfa, "abbbba"))
