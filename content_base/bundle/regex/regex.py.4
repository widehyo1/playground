from dataclasses import dataclass
from typing import Sequence, Tuple, Optional
from enum import Enum, auto
from pprint import pp


class Special(Enum):
    SPLIT = auto()
    MATCH = auto()


@dataclass
class State:
    c: str | Special
    out: Optional["State"] | None = None
    out1: Optional["State"] | None = None

    def to_tuple(self, attrname) -> Sequence[Tuple["State", str]]:
        return [(self, attrname)]


@dataclass
class Frag:
    start: State
    outs: Sequence[Tuple[State, str]]


@dataclass
class Scope:
    atom_cnt: int = 0
    alt_cnt: int = 0


def patch(outs: Sequence[Tuple[State, str]], target: State):
    for state, attr in outs:
        setattr(state, attr, target)


def append(
    s1: Sequence[Tuple[State, str]], s2: Sequence[Tuple[State, str]]
) -> Sequence[Tuple[State, str]]:
    return s1 + s2


def zero_or_more(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    patch(e.outs, s)
    stack.append(Frag(s, s.to_tuple("out1")))


def one_or_more(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    patch(e.outs, s)
    stack.append(Frag(e.start, s.to_tuple("out1")))


def zero_or_one(stack):
    e = stack.pop()
    s = State(Special.SPLIT, e.start, None)
    stack.append(Frag(s, append(e.outs, s.to_tuple("out1"))))


def concat(stack):
    e1 = stack.pop()
    e2 = stack.pop()
    patch(e2.outs, e1.start)
    stack.append(Frag(e2.start, e1.outs))


def alternate(stack):
    e1 = stack.pop()
    e2 = stack.pop()
    s = State(Special.SPLIT, e1.start, e2.start)
    stack.append(Frag(s, append(e1.outs, e2.outs)))


def character(stack, tok: str):
    s = State(tok)
    stack.append(Frag(s, s.to_tuple("out")))


def post2nfa(postfix) -> State | None:

    stack: Sequence[Frag] = []

    for tok in postfix:
        print(f"current tok: {tok}")
        match tok:
            case "*":
                zero_or_more(stack)
            case "+":
                one_or_more(stack)
            case "?":
                zero_or_one(stack)
            case ".":
                concat(stack)
            case "|":
                alternate(stack)
            case _:
                character(stack, tok)
        pp(stack)

    assert len(stack) == 1, "invalid postfix"
    e = stack.pop()
    matchstate = State(Special.MATCH)
    patch(e.outs, matchstate)
    return e.start


def re2post(regex: str) -> str:
    """
    a(bb)+a -> abb.+.a.
    """
    postfix_buffer = []
    stack = [Scope()]
    scope_level = 0
    scope = stack[scope_level]
    for re in regex:
        print(f"re: {re}")
        match re:
            case "*" | "+" | "?":
                postfix_buffer.append(re)
            case "(":
                if scope.atom_cnt > 1:
                    scope.atom_cnt -= 1
                    postfix_buffer.append(".")
                scope_level += 1
                stack.append(Scope())
                scope = stack[scope_level]
            case ")":
                assert scope_level != 0, "closing paren - can not close unopened paren"
                assert scope.atom_cnt != 0, "closing paren - atom is empty"
                if scope.atom_cnt > 0:
                    postfix_buffer += ["."] * (scope.atom_cnt - 1)
                postfix_buffer += ["|"] * scope.alt_cnt
                scope.atom_cnt = 0
                scope.alt_cnt = 0
                scope_level -= 1
                scope = stack[scope_level]
                scope.atom_cnt += 1
            case "|":
                assert scope.atom_cnt != 0, "alternate - atom is empty"
                if scope.atom_cnt:
                    postfix_buffer += ["."] * (scope.atom_cnt - 1)
                scope.atom_cnt = 0
                scope.alt_cnt += 1
            case _:
                if scope.atom_cnt > 1:
                    scope.atom_cnt -= 1
                    postfix_buffer.append(".")
                postfix_buffer.append(re)
                scope.atom_cnt += 1
        pp(postfix_buffer)
        pp(stack)
    assert scope_level == 0, "invalid paren - unclosed paren"
    if scope.atom_cnt > 0:
        postfix_buffer += ["."] * (scope.atom_cnt - 1)
    postfix_buffer += ["|"] * scope.alt_cnt

    scope.atom_cnt = 0
    scope.alt_cnt = 0

    pp(postfix_buffer)
    pp(stack)
    return "".join(postfix_buffer)


# main
if __name__ == "__main__":
    postfix = re2post("a(bb)+a")
    # postfix = re2post("a(bb)+")
    pp(postfix)
    # nfa = post2nfa("abb.+.a.")  # (=  a (bb+). a .)
    # pp(nfa)
