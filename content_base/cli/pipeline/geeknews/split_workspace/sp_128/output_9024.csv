"https://news.hada.io/topic?id=15162","Show HN: qStudio - 10년간 개발한 무료 SQL Editor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: qStudio - 10년간 개발한 무료 SQL Editor

QStudio 3.0: 현대 데이터 분석가를 위한 최고의 SQL 에디터

     * 강력한 로컬 데이터베이스: qDuckDB가 qStudio의 핵심으로, 다양한 데이터베이스의 쿼리 결과를 로컬에 저장할 수 있음
     * Parquet 파일 뷰어: Windows에서 클릭 한 번으로 Parquet 파일을 열 수 있음. Parquet은 미래의 데이터 저장 표준으로, 다양한 시스템과 호환됨
     * 다양한 데이터 소스 통합: 여러 데이터 소스에서 데이터를 결합할 수 있음
     * Pulse-Pivot: Excel처럼 데이터를 피벗하고, SQL 쿼리를 생성할 수 있음
     * AI - Text2SQL
          + Text2SQL: 평범한 영어 문장을 SQL 쿼리로 변환해줌
          + Explain-My-Query: 코드의 작동 방식을 설명해줌
          + Explain-My-Error: 코드 오류의 원인을 AI가 설명해줌

  DuckDB 통합

     * DuckDB: 데이터 분석가들이 로컬에서 분석을 수행할 수 있는 컬럼 지향 데이터베이스로, qStudio에 로컬 데이터베이스 생성, 결과 저장, Parquet 쿼리 및 여러 데이터베이스의 쿼리 결합 기능을 추가함.

  PRQL 지원

     * PRQL: 데이터 변환을 위한 현대적인 언어로, 모든 데이터베이스에서 PRQL 지원을 추가함.

  DolphinDB 통합

     * DolphinDB: 서버 브라우징, 구문 강조 및 자동 완성 기능 추가.

  기타 기능

     * 향상된 Excel 내보내기: 전체 결과를 Excel .xlsx 파일로 내보낼 수 있음.
     * SQL 에디터 개선: SQL 포매터, 대소문자 변환 명령, 현재 SQL 문 실행 기능 추가.
     * UI 개선: 차트 및 데이터베이스 아이콘 추가, 연결 종료 명령 추가, 환영 화면 추가.
     * 개선된 DuckDB 타입 지원: 중첩 배열 및 데이터 표시 개선.
     * 명령줄 차트 생성: 명령줄에서 차트를 생성할 수 있음.
     * 자동 완성 SQL: 내장 템플릿과 AI 제안을 통해 SQL 자동 완성 기능 제공.

  GN⁺의 의견

     * 데이터 분석 효율성: qStudio는 다양한 데이터 소스를 통합하고, 로컬 데이터베이스를 활용하여 데이터 분석 효율성을 크게 높일 수 있음.
     * AI 기능의 유용성: Text2SQL과 같은 AI 기능은 초급 엔지니어들이 SQL 쿼리를 작성하는 데 큰 도움을 줄 수 있음.
     * PRQL의 장점: PRQL은 SQL보다 간단하고 강력한 데이터 변환 언어로, 데이터 처리 작업을 더 쉽게 할 수 있음.
     * 경쟁 제품: 비슷한 기능을 제공하는 다른 도구로는 DBeaver, DataGrip 등이 있음. 각 도구의 장단점을 비교해보는 것이 좋음.
     * 기술 도입 고려사항: 새로운 기술을 도입할 때는 기존 시스템과의 호환성, 학습 곡선, 커뮤니티 지원 등을 고려해야 함.

   On Linux with HiDPI a monitor I had to run:
   GDK_SCALE=2 java -jar qstudio.jar
   출처: https://news.ycombinator.com/item?id=40562210

        Hacker News 의견

     * Ryan의 노력과 열정: Ryan은 매우 끈기 있고 열심히 일하는 엔지니어로, 이번 프로젝트는 그의 애정이 담긴 결과물임.
     * 사용자 피드백 감사: 사용자들의 피드백과 기능 제안에 감사하며, JFreeChart와 Flatlaf 라이브러리 덕분에 qStudio가 멋지게 보임.
     * Intel Mac 문제: Intel Mac에서 실행 시 sqlite DB를 열 때 충돌 발생, 재다운로드 후에도 문제 지속됨. 해결 방법 문의.
     * 출시 축하: 출시를 축하하며, GitHub 저장소 링크 공유.
     * 등록의 이점: 등록의 이점이 궁금하며, 로컬 MySql 데이터베이스에서 빠르게 작동함. Redshift 지원 필요.
     * 10년의 여정: 10년이 걸린 이유와 그 여정을 궁금해함.
     * MacOS Sonoma 문제: MacOS Sonoma에서 설정을 열 때 앱이 충돌함.
     * AI 기능의 기회: AI 기능에 더 많은 기회가 있으며, 쿼리 검증, 수정, 최적화, 데이터 생성 등 다양한 가능성 존재.
     * 기업 환경에서의 사용: 기업 환경에서 사용할 때 가격 정보나 연락처를 찾지 못함. 사용자 오류인지 문의.
     * 트렌드 시각화: 쿼리 결과의 트렌드를 빠르게 볼 수 있는 기능이 필요하며, AI가 데이터 이상치를 쉽게 확인할 수 있으면 좋겠음.
"
"https://news.hada.io/topic?id=15068","Show HN: 노래를 재생하여 턴테이블을 간단히 보정할 수 있는 무료 앱 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: 노래를 재생하여 턴테이블을 간단히 보정할 수 있는 무료 앱 출시

Grooved: 턴테이블 속도 측정 앱

  주요 기능

     * 간단한 사용법
          + Grooved 앱은 턴테이블의 속도를 한 번의 탭으로 측정할 수 있음.
          + 사용자는 노래를 재생하고, 앱을 실행하여 분석을 시작한 후, 턴테이블을 조정하면 됨.
     * 데이터 수집 없음
          + Grooved는 사용자의 데이터를 전혀 수집하지 않음.
          + 오디오 스트림은 사용자의 기기에서 로컬로 처리되며, 녹음되지 않음.
     * 독립적인 구성
          + Grooved는 Apple이 제공하는 기본 구성 요소만 사용하며, 타사 라이브러리나 API를 사용하지 않음.

  사용 방법

     * 1. 노래 재생
          + 좋은 노래를 선택하고 크게 재생함.
     * 2. 분석 시작
          + Grooved 앱을 실행하고 분석을 시작함.
     * 3. 조정
          + 턴테이블을 조정하고 필요에 따라 다시 적용함.

  GN⁺의 의견

     * 사용자 프라이버시 보호
          + Grooved는 데이터를 수집하지 않아 사용자 프라이버시가 잘 보호됨.
     * 간편한 사용법
          + 초보자도 쉽게 사용할 수 있는 직관적인 인터페이스 제공.
     * 기술적 독립성
          + 타사 라이브러리나 API를 사용하지 않아 보안성과 안정성이 높음.
     * 흥미로운 기능
          + 턴테이블 애호가들에게 유용한 기능 제공.
     * 다른 유사 앱
          + 비슷한 기능을 제공하는 다른 앱으로는 RPM 앱 등이 있음.

        Hacker News 의견

     * 사용자 1: 어제 레코드를 틀었는데 아내가 너무 빠르다고 했음. 앱을 사용해보니 3.5% 빠르게 재생되고 있었음. 유튜브에서 해결 방법을 찾았음.
     * 사용자 2: 이 앱이 정말 똑똑하다고 생각함. 어떻게 작동하는지 궁금함. FFT를 사용해 주파수를 분석하는 것 같음. 몇 가지 질문이 있음: 스탠드업 코미디 앨범이나 드럼 솔로에는 작동하지 않을 것 같음. 모든 앨범이 A 440 Hz에 맞춰져 있는지 궁금함. 턴테이블 속도가 2.8% 이상 벗어나면 작동하지 않을 것 같음.
     * 사용자 3: 어릴 때 사용했던 턴테이블은 내장된 캘리브레이션 기능이 있었음. 매우 똑똑한 트릭이었음.
     * 사용자 4: 좋은 아이디어지만 내 턴테이블은 속도 조절 기능이 없어서 사용하지 않을 것 같음. 조절 가능한 턴테이블 제조사에 이 앱을 팔아보는 것도 좋을 것 같음.
     * 사용자 5: 이 앱이 바늘 무게나 카트리지 정렬 같은 다른 것들도 확인할 수 있으면 좋겠음. 사이트의 카피는 좀 불쾌했음.
     * 사용자 6: 나는 가속도계를 사용해 각속도를 측정하는 앱을 사용했음. 이 앱이 왜 필요한지 모르겠음.
     * 사용자 7: 여러 레코드에서 시도했지만 ""기기가 음악을 들을 수 있는지 확인하세요""라는 메시지만 나옴. 확실히 비트가 잘 정의되어 있음.
     * 사용자 8: 매우 간단한 앱임. 오늘 밤 내 Technics SL1200 mk2로 시도해볼 것임. 기술자들이 이 앱을 이해하려고 하는 모습이 재미있음.
     * 사용자 9: 이 앱이 45 rpm 12인치 싱글을 33 1/3 rpm으로 인식했음. 이는 노래 인식을 사용하고 있다는 것을 시사함.
     * 사용자 10: 이 앱이 레코드가 올바른 속도로 재생되는지 테스트하는 것인지 궁금함. 다른 기능이 있는지, 자연 키에서 얼마나 벗어나는지 측정하는지 궁금함. 몇몇 레코드는 중심이 맞지 않아 피치가 흔들림. 이 앱이 어떻게 반응할지 궁금함.
"
"https://news.hada.io/topic?id=15102","코드를 성급하게 DRY하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           코드를 성급하게 DRY하지 마세요

코드 중복 제거를 너무 일찍 하지 말아야 하는 이유

     * DRY(Don't Repeat Yourself) 원칙을 너무 엄격하게 적용하면 ""Premature"" 추상화를 유발하여 미래의 변경이 더 복잡해질 수 있음
     * 중복이 진짜로 불필요한지, 아니면 시간이 지나면서 독립적으로 발전할 기능인지 생각해야 함
          + 함수나 클래스가 동일해 보여도 서로 다른 맥락과 비즈니스 요구사항을 가질 수 있음
          + 코드를 짧게 만드는 것보다 함수의 목적이 시간이 지나도 유지되는지 생각해야 함
     * 추상화의 위험: 기능이 다르게 발전할 가능성이 있는 경우, 추상화가 오히려 해로울 수 있음.
          + 추상화를 설계할 때, 장기적으로 별도로 발전할 수 있는 동작을 조기에 결합하지 말아야 함
     * 의심스러울 때는 시간이 지나면서 결합을 정당화하는 충분한 공통 패턴이 나타날 때까지 동작을 분리해 두어야 함
          + 작은 규모에서는 Premature 추상화의 복잡성을 해결하는 것보다 중복을 관리하는 것이 더 간단할 수 있음
          + 개발 초기에는 약간의 중복을 허용하고 추상화를 기다려야 함
     * 미래의 요구사항은 종종 예측할 수 없음
          + YAGNI(You Aren't Gonna Need It) 원칙에 대해 생각해 보아야 함
          + 중복이 문제가 되지 않을 것이거나, 시간이 지나면서 충분히 고려된 추상화의 필요성을 분명히 나타낼 것임

   애초에 DRY 의 적용은 Repeat 하고 있다면 이를 줄이는 식으로 적용해야하는데,
   DRY 을 앞선 기준으로 코드를 생각하면 잘못된 적용인 것 같습니다.

   Hacker News 의견 중
   DRY 원칙의 오해: DRY는 코드 중복이 아닌 정보/지식 중복을 방지하는 것임. 코드 중복에만 집중하면 불필요한 최적화로 이어질 수 있음.
   이 의견이 가장 공감되네요.

   과도기때 저런 고민 많이 하지 않나요? 퍼펙트한 코드란건 없으니 맨날 고민하는게 저희의 일이겠죠. 케바케인거같아요.

   추상화도가 높은 구조에 대한 회의적인 시선을 담은 글이 최근 종종 올라오네요.
   MSA, 클린 코드, SOLID, DRY 등등...
   사람들이 저런 단어들에 피로감을 느끼는 게 아닌가 싶습니다.
   사실 저것들은 읽기 쉽고, 이해하기 쉽고, 메모리 안 새고, 에러 없이, 빠른 코드를 짜려고 고민할때, 참고할 이정표일 뿐인데...
   적당히, 지금 내가 처한 비즈니스 상황에 잘 맞춰 적용하면 되겠지요.

   https://velog.io/@kineo2k/…

   너무 좋은 글입니다.
   워터폴 모델에서 애자일 모델로 변경될때 특히 더 중요한것 같아요.
   애자일인데 미래를 너무 예측 하려고 합니다.

   얼마나 서둘러야 “성급”한 것인가?

   답은 너무 쉽습니다. 그냥 처음부터 하면 ""성급""하다.
   약간 더 어려운 문제는 언제 해야 ""안성급""한것인가죠.

   말장난같지만, 그냥 처음부터 하지 않으면 ""안성급""한것이 되겠네요^^;

   네 애자일에선 특히

        Hacker News 의견

     * DRY 원칙의 초기 적용: 처음부터 DRY 원칙을 적용하는 것이 좋음. 비슷한 데이터를 별도로 처리하는 대신 공통 코드베이스를 사용하는 것이 효율적임.
     * 베스트 프랙티스의 우선순위: 모든 베스트 프랙티스가 동일하지 않음. 가독성과 응집성을 우선시하는 것이 중요함. 코드 작성은 최선의 프랙티스를 선택하는 과정임.
     * DRY 원칙의 오해: DRY는 코드 중복이 아닌 정보/지식 중복을 방지하는 것임. 코드 중복에만 집중하면 불필요한 최적화로 이어질 수 있음.
     * 재사용성 문제: 특정 기능이 다른 상황에서 재사용되지 않는 경우가 있음. 중복 작업을 피하기 위해 더 나은 접근법이 필요함.
     * 복잡한 DRY 솔루션의 문제: 반복 코드가 복잡한 DRY 솔루션보다 나을 때가 있음. 너무 빠르게 DRY를 적용하면 예상치 못한 구조적 문제를 초래할 수 있음.
     * DRY는 베스트 프랙티스가 아님: 반복은 종종 추상화가 필요한 신호임. 무분별한 DRY 적용은 중급 엔지니어들이 자주 저지르는 실수임.
     * 간단한 코드 예시: 두 함수가 하나의 함수로 통합될 수 있음. 리팩토링의 장단점을 명확히 설명하는 것이 중요함.
     * DRY 코드의 유지보수 문제: DRY 코드는 복잡해져서 유지보수가 어려워질 수 있음. 반면, WET 코드는 단순하지만 변경이 예측 가능함.
     * DRY 원칙의 부작용: DRY 원칙이 코드베이스를 복잡하게 만들어 유지보수가 어려워질 수 있음. 일부 클린 코드 책들이 산업에 부정적인 영향을 미쳤음.
     * 일반화와 성능: 일반화는 성능에 부정적인 영향을 미칠 수 있음. 특정 데이터 패턴에 맞춘 코드 중복이 성능 최적화에 도움이 될 수 있음.
"
"https://news.hada.io/topic?id=15079","Mobifree 프로젝트 - 오픈소스 모바일 생태계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Mobifree 프로젝트 - 오픈소스 모바일 생태계

     * 보다 윤리적이고 인도적인 모바일 소프트웨어 환경을 구축하기 위한 프로젝트
     * 유럽의 시민과 조직에 인간 중심적이고 윤리적인 모바일 소프트웨어에 대한 선택권과 접근성을 확대하기 위해 노력
     * 지난 20년 동안 모바일 소프트웨어 개발은 폐쇄형 소스 소프트웨어, 독점적 표준, 비공개 데이터 소스, 사용자 데이터 수집, 개인정보 침해, 열악한 노동 기준, 환경에 해로운 생산 관행으로 특징지어지는 IT 생태계를 만들어 온 빅테크 기업들이 주도해 왔음
     * 다른 가치를 추구 : 디지털 권리 존중, 뛰어난 품질, 공정한 경쟁, 직원에 대한 Empowerment(좋은 급여, 의사결정 참여, 함께 노동 조건 개선), 모두를 위한 소프트웨어, 오픈 코드/데이터/표준, 환경에 대한 고려
     * E Foundation이 제안하고 다양한 조직들이 참여 : Murena, microG, F-Droid, Conversations, Quicksy, Ltt.rs, Delta.Chat, Rapid.Space, Commit Global
"
"https://news.hada.io/topic?id=15049","OpenPanel - 오픈소스 Mixpanel 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenPanel - 오픈소스 Mixpanel 대체제

     * Mixpanel의 강력함 + Plausible의 쉬움 + GA로부터는 Nothing
     * 웹, 앱 및 백엔드에서 이벤트를 로깅하기 위한 간단한 분석 도구
     * 데이터 시각화
          + 차트 (퍼널, 라인, 바 파이, 히스토그램, 맵)
          + 모든 프로퍼티에 대한 브레이크다운/고급필터
          + 차트를 이용한 대시보드 생성
          + 모든 이벤트/방문자/방문이력 보기
     * 실시간 이벤트 지원, GDPR 준수, 클라우드 또는 자체호스팅, 쿠키 사용하지 않음, 강력한 Export API
     * Nextjs(대시보드) + Fastify(이벤트 API) + Postgres(기본 정보 저장) + Clickhouse(이벤트 저장) + Redis(캐시, Pub/sub, 큐) + Tailwind/Shacdn/tRPC + Clerk(Auth)
     * 셀프호스팅 부분은 Beta 이후에 정리 예정. 아마도 CapRover 와 Docker Compose 로 제공
"
"https://news.hada.io/topic?id=15152","Hotwire: HTML 오버 더 와이어 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hotwire: HTML 오버 더 와이어 기술

HTML 오버 더 와이어

   Hotwire는 JSON 대신 HTML을 전송하여 JavaScript 사용을 최소화하면서 현대 웹 애플리케이션을 구축하는 대안적 접근법임. 이를 통해 빠른 첫 페이지 로드, 서버에서의 템플릿 렌더링 유지, 그리고 더 간단하고 생산적인 개발 경험을 제공함.

  주요 내용

     * 빠른 첫 페이지 로드: HTML을 전송하여 초기 로딩 속도를 높임.
     * 서버에서의 템플릿 렌더링: 클라이언트 측에서의 복잡한 JavaScript 코드 없이 서버에서 템플릿을 렌더링함.
     * 생산적인 개발 경험: 다양한 프로그래밍 언어에서 더 간단하고 생산적인 개발 환경을 제공함.
     * 37signals 팀의 프레임워크: HEY를 지원하는 37signals 팀이 설계한 프레임워크를 사용할 수 있음.

  GN⁺의 의견

     * 개발 생산성 향상: JavaScript 사용을 줄여 개발자가 더 간단하게 웹 애플리케이션을 구축할 수 있음.
     * 서버 부하 증가 가능성: 서버에서 템플릿을 렌더링하므로 서버 부하가 증가할 수 있음.
     * 기존 SPA와의 비교: 전통적인 싱글 페이지 애플리케이션(SPA)과 비교했을 때의 장단점을 고려해야 함.
     * 다양한 언어 지원: 다양한 프로그래밍 언어에서 사용할 수 있어 유연성이 높음.
     * 기술 도입 고려사항: 기존 시스템과의 호환성 및 성능 문제를 사전에 검토해야 함.

        Hacker News 의견

     * Hey 웹앱의 사용자로서, 느린 연결에서는 경험이 좋지 않음. 로딩이나 오류 상태를 추가하지 않은 개발자 문제일 수도 있고, 복잡성이나 버그 때문일 수도 있음.
     * htmx는 단일 자바스크립트 파일로 기능을 제공하며, 주로 Go 백엔드와 함께 사용됨. 유연성이 있어 시도해보고 싶음.
     * Hotwire/Livewire에 대해 부정적이었지만, 이제는 상황에 따라 다름을 이해하게 됨. 하이퍼미디어 앱을 작성하지 않기 때문에, htmx와 REST 논문을 다시 읽고 나서야 이 점을 깨달음.
     * PHP/Laravel에서 비슷한 것을 찾는다면 Livewire를 추천함. 복잡한 프로젝트에는 React를 사용하지만, Blade/PHP로 모든 것을 작성할 수 있어 신선함.
     * PWA를 쉽게 구현할 수 있는 방법으로, React/Vue/Svelte에 비해 개발자 중심임. 백엔드 프레임워크와의 통합 여부가 경쟁의 관건임.
     * 2020년 HN 대화 링크를 공유함.
     * 2005년이나 2006년에 클릭을 가로채고 매개변수를 추가해 렌더링된 HTML 부분을 반환하는 방식으로 사용했던 접근법을 회상함.
     * 고도로 인터랙티브한 프론트엔드를 필요로 하지 않는 웹 앱에서는 Turbo와 Stimulus가 새로운 개발자가 배워야 할 내용을 줄여줌.
     * Swap JS라는 더 미니멀한 아이디어를 2년 전에 구현했으며, 몇몇 프로젝트에서 잘 작동함.
     * 최근 Hey의 모달이 느리다는 온라인 게시물로 인해 Hotwire와 Rails에 대한 논쟁이 발생함. DHH는 원본 비디오가 속도를 제한했다고 주장하고, 다른 사람들은 Hotwire가 네트워크에 너무 의존한다고 비판함.
"
"https://news.hada.io/topic?id=15128","Kapton 테이프로 무력화된 Intel의 업그레이드 방해 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Kapton 테이프로 무력화된 Intel의 업그레이드 방해 기술

인텔의 업그레이드 제한을 카프톤 테이프로 극복

  인텔의 업그레이드 제한

     * 인텔 Z170/Z270 칩셋: 인텔 마더보드의 Z170 또는 Z270 칩셋은 7세대 CPU(Kaby Lake)까지만 지원함.
     * 소켓 핀 차이: 다음 세대 CPU는 같은 소켓을 사용하지만 부팅되지 않음. 새로운 CPU를 사용하려면 새로운 마더보드를 구매해야 함.

  카프톤 테이프와 BIOS 수정으로 해결

     * 카프톤 테이프와 BIOS 수정: 몇 가지 카프톤 테이프 수정과 BIOS 수정을 통해 8세대 또는 9세대 Coffee Lake CPU를 Z170/Z270 보드에서 사용할 수 있음.
     * 호환성 유지: 이 수정 후에도 6세대/7세대 CPU와의 호환성을 유지할 수 있음.
     * AMD와의 비교: AMD는 오래된 Ryzen 마더보드에서도 높은 CPU 지원을 제공함. 인텔의 경우 의도적으로 호환성을 제한한 것으로 보임.

  커뮤니티의 노력

     * 포럼과 유튜브: 여러 PC 포럼과 유튜브 비디오에서 이 과정을 설명하고 도구를 소개함.
     * 간단한 수정: 일부 마더보드는 간단한 점퍼 와이어 연결로도 지원 가능. 예를 들어, Asus Maximus VIII Ranger 마더보드는 EC 옆의 두 패드를 연결하면 됨.
     * 주의사항: 보드의 VRM이 새로운 칩을 지원할 수 있는지 확인 필요. 하이퍼스레딩을 위해 추가 패치가 필요할 수도 있음.

  미래의 도전

     * Intel BootGuard: 인텔 BootGuard와 같은 프로젝트는 BIOS 이미지에 디지털 서명을 도입하여 이러한 수정을 방해할 가능성이 있음.
     * 사용자 보안: 사용자 보안을 명분으로 내세우지만, 실제로는 인텔의 재정적 보안을 위한 것일 가능성이 높음.

GN⁺의 의견

     * 기술적 도전: 카프톤 테이프와 BIOS 수정을 통해 CPU 호환성을 높이는 것은 기술적으로 흥미로움.
     * 환경적 이점: 업그레이드를 위해 새로운 마더보드를 구매하지 않아도 되어 전자 폐기물을 줄일 수 있음.
     * 사용자 주권: 사용자가 자신의 하드웨어를 최대한 활용할 수 있도록 하는 것은 긍정적임.
     * 미래의 제한: 인텔의 새로운 보안 기능이 이러한 수정을 어렵게 만들 가능성이 있음.
     * 대안 제품: AMD의 Ryzen 마더보드는 더 높은 호환성을 제공하므로 고려할 만함.

        Hacker News 의견

     * 재정적 이익: 인텔이 CPU 소켓을 인위적으로 제한하는 이유는 더 많은 CPU를 판매하려는 논리와 상충됨.
     * 추측 1: 전압 차이 등으로 인한 사소한 비호환성 때문일 가능성 있음.
     * 추측 2: 소켓 및 관련 부품 판매로 더 많은 수익을 올릴 수 있음.
     * 추측 3: 메인보드 제조업체가 인텔에게 뇌물을 제공했을 가능성 있음.
     * 추측 4: 메인보드 제조업체와의 일정에 따라 소켓 변경을 결정했을 가능성 있음.
     * 추측 5: 인텔이 악의적인 기업이라는 농담.
     * 역사적 사례 1: AMD K6-2+를 K6-3+로 변환하는 방법.
     * 역사적 사례 2: AMD K7 (Athlon XP)를 그래파이트 연필로 잠금 해제하는 방법.
     * 역사적 사례 3: 인텔 펜티엄 3 코퍼마인 칩을 이전 펜티엄 2 보드에서 작동시키는 방법.
     * 연필 트릭: 90년대 후반과 2000년대 초반에 연필로 CPU를 오버클럭하는 방법.
     * 개인 경험: 저렴한 Xeon CPU를 Core 2 메인보드에서 작동시키는 트릭.
     * 명칭 논의: ""Coffee Mod"" 대신 ""Kapton Lake""라는 이름을 선호함.
     * 날짜 오류: 2024년으로 표기되어 있지만 실제로는 2017년에 출시된 인텔 8세대 칩에 대한 이야기임.
     * 옛날 이야기: 90년대에 CPU를 납땜으로 개조하던 시절을 떠올리게 함.
     * 오래된 주제: 인텔의 [6-10] 시리즈가 모두 스카이레이크 기반이라는 점.
     * 핀 차이: 메인보드 제조업체마다 핀이 다르다는 점이 흥미로움.
     * AMD와의 비교: AMD는 오래된 라이젠 메인보드에서도 높은 CPU 호환성을 제공함.
     * 인텔의 의도: 인텔이 의도적으로 비호환성을 도입했다는 주장.
"
"https://news.hada.io/topic?id=15122","Show GN: CloudTrail-Watcher: AWS 리소스를 생성할 때 알림 받기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: CloudTrail-Watcher: AWS 리소스를 생성할 때 알림 받기

   이게 뭐죠?
     * AWS의 로그인 시도(성공/실패 여부 무관)를 감지합니다.
     * AWS 내 리소스를 생성했을 때 알림을 받을 수 있습니다.
          + (따로 설정 했을 경우) 슬랙 메시지로 알림을 받을 수 있습니다. (Webhook 이용)
          + 슬랙 알림을 따로 설정하지 않았다면, 메일로도 알림을 받을 수 있습니다. (다만 Auto scaling을 적극적으로 이용하는 상황이라면 권장하지 않습니다)
     * 따로 설정했다면, 누가 AWS 리소스를 생성했는지 알 수 있도록 'User' 태그를 자동으로 붙입니다.

   설정 방법

   README.md 파일을 참고해 주세요!
     * Terraform으로 구축하기
     * AWS SAM으로 구축하기

   어떻게 하면 알림을 받을 수 있을까요?

   (둘 중에 하나만 하셔도 됩니다)
     * Slack의 Incoming Webhook을 설정 후, 환경 변수로 웹훅 주소를 설정합니다.
     * AWS SNS Topic을 설정한 후, Topic에 대한 구독을 설정합니다.

   지원하는 AWS 리소스

   콘솔 로그인 활동 및 여러 리소스의 생성 시 알람을 받습니다.
     * 콘솔 로그인
     * IAM (User, Group, Role, Policy, Instance Profile)
     * EC2 (Instance, Security Group)
     * RDS (Cluster, Instance)
     * S3 (Bucket)
     * ElastiCache (Redis, Memcached)
     * EMR (Cluster)
     * Lambda (Function)
     * Redshift (Cluster)
     * ECS (Cluster)
     * EKS (Cluster)
     * DocumentDB (Cluster, Instance)
     * MSK(Managed Streaming for Apache Kafka) (Cluster)
     * MWAA(Managed Workflow for Apache Airflow) (Environment)
     * DynamoDB (Table)
     * ELB (CLB, ALB, NLB, GLB)
     * CloudFront (Distribution)

   cloudtrail을 이미 켜둔 상태라면 lambda와 메일 노티를 보낸다면 sns까지만 쓰는건가요? 운영비용은 100만콜 이전까지는 무료인거죠?

   안녕하세요? 회신이 늦었습니다.

   기본적으로는 CloudTrail 설정을 안 하신 경우를 가정하여 CloudTrail 활성화 + S3에 저장하는 것을 가정하여 만들었습니다.

   CloudTrail을 켜 두었을 때 Lambda 함수만 연결하는 건 개선해 보도록 하겠습니다.

   기본적으로는 CloudTrail 로그를 저장하는 S3, 알림을 보내는 Lambda 함수, 메일 노티를 보내는 경우 SNS 정도만 사용합니다.

   해당 구성에 따라 CloudTrail, S3, Lambda, SNS 비용이 발생하는데요. 개인적으로 사용하시는 계정이라면 거의 비용이 발생하지 않을 것입니다. (최근 제가 개인적으로 사용하는 계정에서 1년 넘게 운영해 본 결과 그랬습니다)

   다만 실제 프로덕션에 사용하시는 경우 로그인 알림이나 Auto scaling 관련 알림이 자주 발생합니다. 이 경우 비용이 조금 부과될 수 있을 것 같습니다.

   (프로덕션 계정에서는 SNS 서비스를 통한 메일 알림 활성화를 추천드리지 않습니다)

   질문 감사드리며 추후 개선에 활용하겠습니다.
"
"https://news.hada.io/topic?id=15046","EC2 부팅 시간 단축하기부팅 시간 단축하기

     * EC2 인스턴스의 부팅 시간을 40초에서 5초로 줄이는 것이 가능함
     * 이는 특정 작업을 처리하기 위해 새로운 EC2 인스턴스가 필요한 경우 매우 중요

부팅 시간이 오래 걸리는 이유

     * 새로운 EC2 인스턴스를 요청할 때 AWS는 여러 작업을 수행함:
          + 선택한 AMI에서 루트 EBS 볼륨 생성
          + 인스턴스에 사설 IP 주소 할당
          + 인스턴스를 위한 호스트 선택
          + 실제로 머신 부팅
     * 하드웨어가 켜진 후에도 부트로더, 커널, 사용자 공간 프로세스가 시작되어야 함.

문제 회피 방법

     * 대기 중인 컴퓨팅 풀을 운영하여 빌드 요청을 이미 실행 중인 EC2 인스턴스로 라우팅함.
     * 그러나 모든 작업에 대해 경제적으로 실행 가능하지 않음.
     * GitHub Actions 러너의 경우 각 작업이 전용 EC2 인스턴스로 라우팅됨.
     * 50개의 병렬 작업을 처리하기 위해 50개의 EC2 인스턴스를 온라인 상태로 유지하는 것은 비현실적임.

더 빠른 부팅 시간

     * 특정 작업에 대해 불필요한 작업을 하지 않는 것이 항상 더 빠름.
     * EC2 인스턴스 생성, 부팅 및 애플리케이션 시작의 각 단계를 체계적으로 최적화함.
     * 인스턴스를 한 번 부팅하고, 종료한 후 필요할 때 다시 부팅하는 방법을 사용함.

EBS 루트 볼륨 스트리밍

     * EBS 루트 볼륨 준비는 EC2 인스턴스 부팅 시간과 애플리케이션 성능에 큰 영향을 미침.
     * AMI에서 EBS 볼륨을 생성할 때 데이터 블록이 처음으로 액세스될 때 S3에서 가져와야 함.
     * AWS는 모든 데이터 블록을 미리 로드하는 방법을 권장함.

인스턴스 한 번 부팅하기

     * EBS 지원 인스턴스를 중지한 후 다시 시작할 수 있음.
     * 중지된 인스턴스는 구성만 유지되며, 루트 EBS 볼륨에 대한 비용만 지불함.
     * 인스턴스를 한 번 부팅하여 초기화 작업을 수행한 후 중지하면 ""워밍된"" EBS 루트 볼륨이 생성됨.

오토스케일링 워밍 풀

     * AWS는 EC2 오토스케일링을 위한 워밍 풀을 제공함.
     * 그러나 오토스케일링 그룹은 요청에 반응하는 데 시간이 걸림.
     * 최상의 성능을 위해 LaunchInstances 및 StartInstances API 호출을 사용하여 직접 EC2 인스턴스를 시작함.

인스턴스 크기 조정

     * 워밍된 인스턴스의 유형을 변경하여 부팅 시간을 최적화함.
     * 초기화 작업에는 저렴한 인스턴스 유형을 사용하고, 실제 작업 시 더 높은 성능의 인스턴스 유형으로 변경함.

전체 흐름

     * GitHub Actions 러너 인스턴스는 다음과 같은 흐름을 거침:
          + t3.large 인스턴스로 생성
          + 대상 VPC에 사설 IP 주소 할당
          + 커널 및 사용자 공간 프로세스가 한 번 시작됨
          + 인스턴스 중지
          + 작업 요청이 도착하면 인스턴스 유형을 m7a로 업데이트하고 시작
          + m7a 인스턴스 용량이 없으면 백업 유형으로 업데이트하고 다시 시작
     * 이 흐름으로 작업을 위한 인스턴스 준비 시간이 40초에서 5초로 단축됨.

        Hacker News 의견

    요약

     * 부팅 시간: 자동 확장 성공의 핵심 요소로, 부팅 시간이 짧을수록 예측 창이 작아져 예측 정확도가 높아짐. 비용 절감을 위해 EBS 볼륨을 미리 준비하는 것이 합리적일 수 있음.
     * 아마존의 최적화: 아마존은 Firecracker와 같은 기술로 초고속 부팅을 구현했으며, EC2에서도 유사한 기능을 제공할 가능성이 있음.
     * 불변 설정: 불변/원자적 설정을 통해 EBS 볼륨을 공유하고, 최소 부팅 AMI를 사용해 최적화할 수 있음.
     * 부팅 시간 측정: EC2 인스턴스 부팅 시간이 이중 모드로 나타나며, 15-20초 또는 80초로 분포됨. 원인 파악 필요.
     * GitHub 액션: GitHub 액션 러너의 부팅 최적화에도 불구하고, 작업 전달 시간이 길어져 최적화 필요.
     * AWS와 비교: AWS와 다른 클라우드 제공업체의 부팅 시간 비교. Hetzner는 몇 초 만에 인스턴스를 생성함.
     * EC2 자동 확장기: EC2 자동 확장기의 한계와 개선 필요성 언급. AWS 제공 자동 확장기는 느리고 제한적임.
     * EBS 사용 이유: EBS는 내구성을 위해 비용과 성능을 희생함. 네트워크 연결된 볼륨으로 느림. 최소한의 Linux 설치와 빠른 로컬 스토리지 사용이 더 적합함.
     * EBS의 Copy-On-Write 지원 부족: EBS는 Copy-On-Write를 지원하지 않으며, 스냅샷이 S3에 저장되어 IOPS 할당이 지연됨.
     * 온프레미스 하드웨어로 이동: Depot은 온프레미스 하드웨어로 이동해 성능을 최적화하고 비용을 절감할 수 있음. 고객 CI 작업을 직접 하이퍼바이저에서 부팅하는 것이 더 나은 접근법일 수 있음.
"
"https://news.hada.io/topic?id=15139","2024년부터 사용할 최신 Node.js 런타임 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2024년부터 사용할 최신 Node.js 런타임 기능들

  Node.js 테스트 러너

     * Node.js에는 이제 기본 테스트 러너 기능이 포함됨
     * 테스트 파일에서 node:test 모듈을 임포트하여 테스트 작성 가능
     * 단일 테스트 실행: node --test tests/math.test.js
     * 테스트 파일을 자동으로 감지하고 실행
     * 기본 제공되는 assert 모듈을 사용하여 테스트 확인 가능
     * 테스트 스위트와 훅을 사용하여 관련된 테스트를 그룹화하고 관리 가능

  Node.js 네이티브 모킹

     * Node.js에는 이제 네이티브 모킹 기능이 포함됨
     * 다른 테스트 프레임워크에서 제공하는 모킹 기능을 Node.js에서 직접 사용할 수 있음
     * node:test 모듈에서 mock 메서드를 사용하여 모킹 기능 구현 가능

  Node.js 네이티브 테스트 커버리지

     * 테스트 커버리지는 소스 코드의 테스트 범위를 이해하는 데 도움을 줌
     * Node.js 20부터 네이티브 테스트 커버리지 기능 제공
     * --experimental-coverage 플래그를 사용하여 테스트 커버리지 데이터 생성 가능
     * 커버리지 보고서를 통해 테스트되지 않은 코드 영역을 식별할 수 있음

  Node.js 와치 모드

     * 와치 모드는 파일 변경을 실시간으로 감지하고 스크립트를 자동으로 재실행함
     * Nodemon과 같은 외부 의존성이 필요하지 않음
     * --watch 플래그를 사용하여 파일 변경을 감지하고 스크립트를 자동으로 실행 가능

  Node.js 코어팩 (Corepack)

     * 코어팩은 프로젝트와 패키지 관리자 간의 다리 역할을 함
     * 프로젝트에서 사용할 패키지 관리자를 명시하고, Corepack이 이를 자동으로 관리함
     * corepack enable 명령어로 코어팩을 활성화 가능

  Node.js .env 로더

     * Node.js 20부터 네이티브로 .env 파일에서 환경 변수를 로드하는 기능 제공
     * --env-file 플래그를 사용하여 .env 파일을 로드 가능
     * 여러 .env 파일을 로드하여 다양한 환경 설정 가능

  Node.js import.meta 지원

     * Node.js v20.11.0과 v21.2.0에서 import.meta.filename과 import.meta.dirname 지원
     * 파일 경로와 디렉터리 이름을 더 쉽게 가져올 수 있음

  Node.js 네이티브 타이머 프라미스

     * Node.js v15부터 타이머를 프라미스 형태로 사용 가능
     * setTimeout과 setInterval을 프라미스로 사용하여 비동기 코드를 더 간결하게 작성 가능

  Node.js 퍼미션 모듈

     * Node.js 애플리케이션의 리소스 접근을 제어하는 실험적 기능
     * --experimental-permission 플래그를 사용하여 파일 시스템, 네트워크, 환경 변수 등의 접근을 제한 가능

  Node.js 폴리시 모듈

     * 악성 코드의 로딩을 방지하는 보안 기능
     * --experimental-policy 플래그를 사용하여 정책 파일을 지정하고, 모듈 로딩을 제어 가능

   node --run 언급이 없네요. 최신 버전부터 NPM 의존하지 않고 스크립트 실행이 가능합니다. 부팅이 수십배 빨라요

   이번에 tsboard 프로젝트를 해보면서 Bun 런타임이랑 이래저래 비교를 많이 해봤는데, Node.js 가 정말 다 좋지만 (1) TypeScript 미지원 (2) 속도 이 두가지가 여전히 아쉽습니다. 호환성이나 하드웨어 자원을 딱히 가리지 않는 점 등은 정말 대단하다고 생각합니다.

   TypeScript, 동작 속도 등을 고려하신다면 Bun 런타임도 한 번 고려해 보세요...!

   vite나 Next.js 등 몇몇 에코시스템이 Node 중심으로 이루어진 프로젝트에는 아직 시기상조인 게 아쉽습니다. 물론 Bun 잘못은 아니지만, 쓸 날이 왔으면 좋겠군요.

   우와~ 원문에 Jest 언급도 있네요.

   작은 프로젝트에서 jest - > node.js 이전해 봤는데, 검증 함수 지원이 너무 부족해서 별로네요 :(

   이제 네이티브로 타입스크립트 지원만 하면 베스트인데~

   최신 트렌드들을 엄청 빨리 받아들이는 군요..

   와 네이티브 모킹!
"
"https://news.hada.io/topic?id=15058","Alert 임곗값 잘 설정하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Alert 임곗값 잘 설정하는 방법

     * 임곗값은 프로덕션 위험, 조사/해결 시간, 복잡성 관련해 설정
     * 이는 리스크 발생 전 설정, 빠르게 조치 취할 수 있어야 함
     * 운영자가 작업 수행 시간 확보하도록 임곗값을 문제에 너무 가깝지 않게 설정
     * 임곗값을 문제에서 너무 멀리 설정해서도 안됨
     * 일부 Alert는 여러 근본 원인이 있어 이해, 조사하기에 복잡함
     * 빠른 문제 해결에 도움이 되도록 Alert를 근본 원인 수만큼 분할
     * 적절한 임곗값 찾기 쉽지 않고, 여러 번 짧은 루프 피드백 거쳐야 함
"
"https://news.hada.io/topic?id=15113","2025년 세금 시즌을 위한 IRS Direct File, 50개 주와 D.C.에서 개방","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2025년 세금 시즌을 위한 IRS Direct File, 50개 주와 D.C.에서 개방

IRS, 무료 온라인 세금 신고 프로그램 전면 도입

  주요 내용

     * IRS Direct File 프로그램: 미국 재무부는 IRS의 무료 온라인 세금 신고 프로그램인 Direct File을 2025년 세금 시즌부터 모든 주와 워싱턴 D.C.에서 사용할 수 있도록 영구적으로 도입할 예정임.
     * 프로그램의 목적: 이 프로그램은 세금 신고 과정을 간소화하고, 세금 신고 비용을 절감하며, 더 많은 사람들이 쉽게 세금 신고를 할 수 있도록 돕기 위함임.

  GN⁺의 의견

     * 사용자 편의성: 무료 온라인 세금 신고 프로그램은 사용자에게 큰 편의를 제공함. 특히 세금 신고가 복잡한 사람들에게 유용할 수 있음.
     * 비용 절감: 세금 신고 비용을 절감할 수 있어 경제적으로도 큰 도움이 됨.
     * 보안 문제: 온라인 세금 신고 시스템의 보안 문제는 항상 중요한 고려 사항임. 개인 정보 보호와 데이터 보안에 대한 철저한 검토가 필요함.
     * 기술적 지원: 프로그램 사용 시 발생할 수 있는 기술적 문제에 대한 지원이 필요함. 사용자들이 쉽게 접근할 수 있는 도움말과 고객 지원 서비스가 중요함.
     * 기타 대안: 현재 시장에는 다양한 세금 신고 소프트웨어가 존재함. 예를 들어, TurboTax나 H&R Block 같은 상용 소프트웨어도 있음. 이들과의 비교를 통해 사용자에게 가장 적합한 선택을 할 수 있도록 해야 함.

        Hacker News 의견

     * 정부 프로젝트 성공 사례: 소규모 세금 상황과 주에 맞춰 프로젝트를 성공적으로 롤아웃한 것이 큰 성과로 평가됨.
     * 세금 신고 시스템 비판: 제3자 회계사나 서비스를 통한 세금 신고는 불필요한 경제 활동을 유발함.
     * 범죄 발생 가능성: 고소득자들이 더 많은 금융 범죄를 저지를 가능성이 높음. 회계사들이 부유한 탈세자를 추적하는 데 집중해야 함.
     * IRS의 역할: IRS는 세금 징수와 사기 방지에 특화된 기관으로, 인력을 줄이는 것은 경찰력을 줄이는 것과 같음.
     * 정치적 영향: 현재 정부의 지원으로 이루어진 프로젝트지만, 다음 정부의 정책 변화에 따라 중단될 가능성이 있음. 영구적인 프로그램이 되려면 의회의 승인이 필요함.
     * 점진적 개선: 점진적인 개선이 중요하지만, freetaxusa와 같은 기존 무료 서비스와의 차별성이 부족함.
     * Intuit의 반응: Intuit는 Direct File 프로그램이 납세자에게 비용이 많이 든다고 주장함.
     * Intuit의 미래: Direct File 프로그램이 Intuit를 시장에서 퇴출시킬 가능성은 낮음.
     * 사용자 경험: 뉴욕에서 Direct File을 시도한 사용자가 신용 기록 부족으로 어려움을 겪음. ID 확인을 위해 40분 대기 후 종이 서류로 제출함.
     * 프로그램 확장 반대: Taxpayers Protection Alliance는 프로그램 확장이 IRS의 권한을 크게 늘리고 부정적인 결과를 초래할 것이라고 주장함.
     * 경쟁의 필요성: 더 많은 경쟁이 고객에게 해가 될 이유가 없음. 무료 세금 신고 서비스가 실제로는 비용이 발생함.
     * 영국의 세금 신고 시스템: 영국에서는 HMRC를 통해 20분 만에 무료로 세금 신고를 완료하고, 2주 내에 환급을 받음.
     * 소득 제한 문제: 많은 일반 W2 근로자들이 포함되는 소득 상한선이 문제임.
"
"https://news.hada.io/topic?id=15172","10년 넘게 쓴 AWS를 탈출하게 된 계기와 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      10년 넘게 쓴 AWS를 탈출하게 된 계기와 대안

   2013년부터 AWS를 사용해왔지만, 최근 비용 절감과 예측 가능성을 위해 자체 서버를 구축했습니다. 자체 서버로의 전환 이유, 과정, 보안 조치, 그리고 다단계 인증(MFA) 적용 사례를 공유합니다.

   전환 이유
•       비용 절감: AWS 사용 시 비용 예측이 어려웠고, 달러 환율 상승으로 인한 부담.
•       B2B 서비스 특성: 사용자가 급격하게 늘어날 가능성이 적고, 계약 건수를 조절할 수 있어 확장성 문제 없음.

   전환 과정 및 도전 과제
•       이전 작업: 데이터베이스, 스테이징 서버, 신규 개발 중인 서비스 등을 내부 서버로 옮김.
•       초기 문제 해결: 서버 설정 과정에서의 호환성 문제와 하드웨어 업그레이드 필요성 해결.

   장기적인 이점
•       비용 절감: 물리적 서버 자원을 최대한 활용하여 비용 절감.
•       보안 강화: GPT를 활용한 다단계 인증(MFA) 도입 등 보안 강화.

   보안 조치
•       접근 권한 관리: IP 대역 설정, ID 및 패스워드 관리, 다단계 인증 도입.
•       물리적 보안: 데이터 센터의 출입 통제와 감시 시스템.
•       정기적 점검: 보안 점검과 취약점 분석, 주기적 데이터 백업 및 외부 스토리지 저장.

   다단계 인증(MFA) 적용
•       MFA 솔루션 선택: Google Authenticator, Authy, Yubikey 등.
•       구현: 사용자 인증 흐름에 MFA 단계 추가, API 통합, 사용자 인터페이스 개선.
•       예시 코드: Python Flask와 Ruby on Rails를 사용한 MFA 적용 예시 제공.

   추가 질문에 대한 답변

   Q1: 한국의 독한 여름 날씨 및 먼지로부터 물리 서버의 안정적인 운영을 어떻게 관리하시는지?
•       서버실 환경 관리: 에어컨과 제습기 사용, 공기 청정기 설치, 정기적 청소.
•       모니터링 시스템: 온도와 습도 실시간 모니터링.
•       하드웨어 유지보수: 정기적 점검과 유지보수.

   Q2: 예상치 못한 전기 공급 중단 혹은 인터넷 불가 시 백업 플랜은?
•       중복 서버 운영: 여러 물리적 공간에 서버 분산 배치.
•       UPS 시스템: 무정전 전원 공급 장치 설치.
•       인터넷 연결 이중화: 두 개 이상의 인터넷 연결 제공.
•       데이터 백업 및 복구 계획: 정기적 데이터 백업과 신속한 복구 계획 마련.

   10년 동안 쓴 AWS를 벗어나서 도착한 곳이 맥 미니 M1, M2.... 혹시 애플 바이럴은 아닌거죠?
   다른 인프라 요소들이 아무리 잘 짜여있는 것 같아도 저게 너무 임팩트가 큰데요

   방화벽, 라우팅을 포함한 네트워크 설정, 소산 백업, 보안 컨센서스 수립 등등 개발보다는 운영관련한이슈가 상당히 쌓일텐데 (B2B라면 고객사에서 요구하는 보안조건 포함) 별도의 조직을 구성해야할 필요는 느끼지 않았는지 궁금하군요.

   번외 궁금증이긴한데, GPT를 연동해서 MFA를 구축했다는 건지? GPT로 코딩 도움을 받았다는 건지? 궁금하네요. chatgpt가 보안 관리자가 된 케이스인가요?

   본문보면 chatgpt에 물어보고 힌트를 얻고 다양한 조치를 한다.. 정도인듯 하네요.

   H/W 측면에서 mac mini 추천은 이해가 가는 부분이 있지만..
   맥에서 docker를 쓰게되면 결국 vm을 돌리고 그 위에 docker가 돌아가게 될 텐데...
   프로덕션 환경에서 mac에서 docker는 살짝 고개가 갸우뚱 해지네요.

   저도 그 부분에서 의아한게 docker환경에서 arm은 아직 가야할길이 꽤 남았고, 더군다나 말씀하신대로 osx면 qemu같은 vm위에서 돌려서 손실이 장난이 아닐텐데 이 조합에 대한 추천은 조금 이상하게 보이네요.

   애플 맥으로 운영환경까지 동작한다는걸까요?
   파워도 디스크도 이중화가 안되어있을텐데 하드웨어 이슈가 발생하면 어떻게 처리될지 궁금하네요

   부동산 임대료나 IDC 상면 대여료 생각하면 왜 클라우드가 비싼지 조금은 이해가 되더라구요. 중복서버 운영이 가장 어려운 목표인 것 같습니다
"
"https://news.hada.io/topic?id=15170","Show HN: 초장수명 배터리를 탑재한 초소형 카메라 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show HN: 초장수명 배터리를 탑재한 초소형 카메라 제작

        Hacker News 의견

     * 명확한 사이트 구성: 제품에는 관심 없지만, 사이트가 매우 명확하게 구성되어 있음. 많은 사이트들이 제공하는 서비스나 기능을 이해하기 어려운데, 이 랜딩 페이지는 작은 카메라, 배터리 수명, 가격, Mac 전용, 구매/다운로드 링크 등 모든 정보를 한눈에 제공함. 예제 사진이 부족한 점만 아쉬움.
     * 오픈 소스 라이선스 필요성: 프로젝트가 흥미롭지만, GitHub 저장소에 코드와 디자인 파일에 대한 라이선스가 없어 오픈 소스가 아닌 소스 공개 상태임. 다른 사람들이 코드를 수정하고 자신만의 카메라를 만들 수 있도록 적절한 라이선스를 추가할 필요가 있음.
     * Mac 전용의 한계: Mac 전용 지원과 전용 앱 사용이 시장을 제한함. 단순한 MTP 인터페이스로 사진 파일에 접근하고, 별도의 인터페이스로 설정을 할 수 있도록 하면 좋을 것 같음. Linux 지원도 필요함.
     * 자동차 등급 IC 사용 제안: 자동차 등급 IC를 사용해 영하의 온도에서도 작동할 수 있도록 고려할 필요가 있음. 현재 구성은 캘리포니아에서는 괜찮지만, 북부 지역에서는 겨울에 사용하기 어려움.
     * 드래그 앤 드롭 터미널 앱: 리베이스를 위한 드래그 앤 드롭 터미널 앱을 만든 것도 매우 멋짐. 진정한 해커 뉴스 스타일임.
     * 샘플 이미지 필요성: 제품 웹사이트에 카메라로 찍은 샘플 이미지가 있는지 궁금함. 아이디어는 멋지지만, 샘플 이미지를 통해 제품의 목적에 얼마나 적합한지 평가할 수 있으면 좋겠음.
     * 대용량 저장 장치 연결 제안: Mac 전용으로만 연결할 것이 아니라, 일반적인 대용량 저장 장치로 연결하는 것이 좋을 것 같음.
     * 이미지 해상도와 저장 용량 질문: 이미지 해상도는 고정인지 설정에서 변경 가능한지 궁금함. 실제 이미지 파일을 첨부할 수 있는지, 운영 온도에 대한 정보가 있는지, 저장 용량은 얼마인지 궁금함.
     * 외장 케이스 가격 질문: 게시물이 훌륭하고 많은 것을 배웠음. 외장 케이스의 대략적인 가격과 한 번에 몇 개를 주문했는지 공유해줄 수 있는지 궁금함. 외장 케이스 제작이 매우 비싸다고 느꼈음.
     * 도난 방지 카메라의 한계: 몇 년 전 오토바이를 도난 당할 뻔해서 긴 배터리 수명을 가진 작은 카메라를 만들었음. 하지만 물리적 접근 없이 사진을 가져올 방법이 없어 원래 목적에는 크게 유용하지 않을 것 같음.
     * 정직한 세부 사항: 페이지 전체에 걸쳐 훌륭한 소통을 보여줌. 정직한 세부 사항이 신선하게 느껴짐.
     * 우주를 나는 그래픽: 우주를 나는 그래픽이 아름다움. 훌륭한 제품으로 보임.
"
"https://news.hada.io/topic?id=15148","세계에서 가장 오래된 대학 중 하나의 신임 총장, Citation Cartel 조직","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             세계에서 가장 오래된 대학 중 하나의 신임 총장, Citation Cartel 조직

내부 메시지에서 드러난 새로운 총장의 인용 카르텔 조직

  요약

     * 후안 마누엘 코르차도는 스페인의 살라망카 대학교의 새로운 총장으로 임명되었음. 그는 자신의 논문 인용 수를 인위적으로 늘리기 위해 인용 카르텔을 조직했음.
     * 인용 카르텔은 과학자들이 서로의 논문을 인용하여 인용 수를 인위적으로 증가시키는 행위를 말함. 이는 과학적 명성과 연구 자금 확보에 큰 영향을 미침.
     * 코르차도는 자신의 연구와 관련 없는 논문에도 자신의 논문을 다수 인용하도록 지시했음. 예를 들어, 한 논문에서는 94%의 인용이 코르차도의 논문이었음.
     * 내부 메시지를 통해 코르차도가 자신의 논문과 자신이 편집하는 저널을 인용하도록 지시한 것이 드러났음. 이는 그의 과학적 영향력을 부풀리기 위한 수단이었음.
     * 스프링거 네이처와 엘스비어 같은 출판사들은 이 사건을 조사 중이며, 엘스비어는 이미 코르차도의 논문 하나를 철회했음.
     * 스페인 연구 윤리 위원회는 코르차도의 행위를 조사 중이며, 이는 스페인 대학 시스템의 신뢰성을 훼손하는 문제로 지적되고 있음.

  GN⁺의 의견

     * 과학적 윤리 문제: 이 사건은 과학적 윤리와 연구의 신뢰성에 큰 문제를 제기함. 연구자들이 인용 수를 조작하는 것은 학문적 진실성을 훼손함.
     * 평가 시스템의 문제: 현재의 연구 평가 시스템이 인용 수에 지나치게 의존하는 것이 문제임. 이는 연구자들이 인용 수를 늘리기 위해 부정행위를 저지르게 만듦.
     * 젊은 연구자 보호 필요: 이러한 부정행위는 젊은 연구자들에게 악영향을 미칠 수 있음. 그들의 연구 경력을 보호하기 위한 제도적 장치가 필요함.
     * 국제적 문제: 인용 카르텔 문제는 스페인뿐만 아니라 전 세계적으로 발생할 수 있는 문제임. 국제적인 연구 윤리 기준 강화가 필요함.
     * 대안 제시: 연구 평가 시스템을 개선하여 인용 수보다는 연구의 질과 실제 기여도를 평가하는 방향으로 나아가야 함.

        Hacker News 의견

    해커뉴스 댓글 요약

     * Retraction Watch에 따르면, 이 사건은 2022년에 이미 공개되었음. 문제는 연구 대학의 직업 문화임.
     * 이 상황이 어떻게 용인되는지 이해할 수 없음. 인용 지표 개선 필요성 제기됨.
     * Corchado 문제는 극단적인 사례일 뿐, 더 큰 문제는 회색 지대에 있음.
     * 대학은 내부 정치로 인해 조작됨. 이 사건은 외부 정치로 인해 나중에 영향을 받을 것임.
     * 많은 학자들이 친구나 동료의 연구를 인용하는 것은 흔한 일임. 인용 관행 자체가 이상함.
     * 이 사람은 부패했음. 왜 대학이 그를 고용하고 해고하지 않는지 궁금함.
     * 인간은 종종 부패에 빠지기 쉬움. 이 경우, 그는 자신의 지위를 높이기 위해 지표를 최적화했음.
     * 문제는 Juan Manuel Corchado 교수가 아니라, 출판과 영향력을 가장 중요한 지표로 삼는 제도적 실패임.
     * 정치적 인용은 의도적인 사기가 없어도 발생함. 대학원 시절, 논문을 승인받기 위해 프로그램 위원회 사람들을 인용하는 것이 일반적이었음.
     * 고등 교육을 받지 않은 사람들은 학계 인물들이 대단하다고 생각하지만, 실제로는 많은 사람들이 자기중심적이고 남을 해치는 경우가 많음.

    추가 배경 지식

     * Retraction Watch: 연구 논문 철회와 관련된 뉴스를 다루는 웹사이트.
     * Citation Clique: 특정 그룹 내에서 서로의 논문을 과도하게 인용하여 지표를 인위적으로 높이는 행위.
     * H-index: 연구자의 생산성과 영향력을 측정하는 지표.
"
"https://news.hada.io/topic?id=15165","Ladybird 포크 및 SerenityOS BDFL 에서 사임합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ladybird 포크 및 SerenityOS BDFL 에서 사임합니다

Ladybird 브라우저 프로젝트 분리 및 SerenityOS 리더직 사임

  두 프로젝트의 분리

     * 2018년에 SerenityOS 프로젝트를 시작했음
     * SerenityOS는 전 세계 1,000명 이상의 기여자가 참여하는 대규모 오픈 소스 커뮤니티로 성장했음
     * 최근 2년 동안 Ladybird라는 새로운 웹 브라우저에 집중했음
     * Ladybird는 처음에는 SerenityOS용 HTML 뷰어로 시작했으나, 2022년에 크로스 플랫폼 프로젝트로 전환됨

  두 프로젝트의 분리 이유

     * 현재 두 그룹이 동일한 자원과 인프라를 공유하고 있음
          + 데스크탑 OS를 구축하는 그룹
          + 크로스 플랫폼 웹 브라우저를 구축하는 그룹
     * 두 프로젝트의 관심사가 점점 달라지고 있어 분리가 필요함
     * Ladybird를 독립적인 최상위 프로젝트로 분리하기로 결정함

  Ladybird에 대한 변화

     * Ladybird 개발은 이제 새로운 GitHub 저장소에서 진행됨
     * 일상적인 소통은 새로운 Ladybird Discord 서버에서 이루어짐
     * Ladybird는 이제 Linux와 macOS를 대상으로 함 (SerenityOS 대상은 제외됨)
     * SerenityOS와 달리 Ladybird는 더 넓은 오픈 소스 생태계를 활용할 예정임

  SerenityOS에 대한 변화

     * 웹 브라우저 구축에 대한 집중이 사라짐
     * ""친구들과 재미있는 소프트웨어 해킹""이 다시 주요 목표가 됨
     * 앞으로의 방향은 커뮤니티에 달려 있음

  GN⁺의 의견

     * 커뮤니티의 성장: 두 프로젝트의 분리는 각 프로젝트가 더 집중적으로 발전할 수 있는 기회를 제공함.
     * 개발 효율성: 각 프로젝트가 독립적으로 운영되면 자원과 인프라의 효율적인 사용이 가능함.
     * 기술적 다양성: Ladybird가 더 넓은 오픈 소스 생태계를 활용함으로써 더 다양한 기술을 수용할 수 있음.
     * 커뮤니티의 자율성: SerenityOS 커뮤니티가 자체적으로 프로젝트를 이끌어갈 수 있는 기회를 제공함.
     * 미래의 가능성: 두 프로젝트가 각각의 목표에 더 집중함으로써 더 나은 성과를 기대할 수 있음.

        Hacker News 의견

     * SerenityOS의 Ladybird 브라우저가 Linux와 macOS를 타겟으로 변경되었음. SerenityOS 지원이 중단된 이유에 대한 궁금증.
     * 새로운 Ladybird 프로젝트가 기존 SerenityOS의 Ladybird 브라우저와 어떻게 연관될지에 대한 의문. 두 프로젝트가 같은 이름을 사용할 경우 혼란이 생길 수 있음.
     * Andreas가 긍정적인 사람이라는 점을 강조하며, 이번 포크가 부정적인 사건으로 여겨지지 않아서 기쁨.
     * Andreas가 뛰어난 코더이자 커뮤니티 빌더임을 칭찬. 브라우저 개발에 더 열정적일 가능성이 높음.
     * SerenityOS는 주로 코딩 과정 자체를 즐기는 프로젝트로, 결과물보다는 코딩의 즐거움과 가능성을 증명하는 데 목적이 있음.
     * Andreas Kling의 유튜브 채널을 추천하며, Ladybird 브라우저 개발에 대한 월간 업데이트를 제공함.
     * SerenityOS 유튜브 비디오를 즐겼던 사람으로서, Ladybird가 SerenityOS의 타겟에서 제외된 것에 대한 아쉬움.
     * 이번 포크가 매우 따뜻하고 긍정적인 방식으로 이루어졌으며, Ladybird나 SerenityOS에 기여하고 싶은 마음이 생김.
     * Ladybird가 SerenityOS보다 더 많은 주목을 받고 있으며, 브라우저가 더 많은 사람들에게 영향을 미칠 가능성이 큼.
     * Andreas의 GitHub 후원자로서, 후원이 Ladybird에만 집중될지에 대한 궁금증. 브라우저에 더 관심이 있어 계속 후원할 계획.
     * 이번 결정이 자원을 자유롭게 하여 OS 자체에 더 집중할 수 있게 할 수 있음. SerenityOS가 ARM이나 RISC-V 같은 임베디드 플랫폼으로 포팅되면 더 큰 관심을 받을 수 있을 것임.
"
"https://news.hada.io/topic?id=15054","Show GN: 알로록달로록 오픈소스 모바일 청첩장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 알로록달로록 오픈소스 모바일 청첩장

   아내와 제가 결혼 할 때 쓰고, 최근에 오픈소스 공개한 💌모바일 청첩장💌입니다.
   Frontend는 아내가 다 만들고, 저는 얼마 안되는 Backend 쪽만 해서 살짝 숫가락만 올렸지만요 🤗

   주요 기능
     * 알록달록 봄 느낌 나는 모바일 청첩장
     * 갤러리, 계좌번호, 지도 및 길안내, 좋아요 지원
     * 귀여운 디자인과 귀여운 컨페티 🎉🎉🎉
     * data.json 수정 후, Vercel + Firebase 조합으로 무료 배포 가능

   링크
     * Github
     * Sample
     * 개발 후기

   ps. 원래는 5월 1일에 혼인신고 하고 와서 긱뉴스에 올리려고 했는데요. 증인 2명이 필요하다는 걸 그날 구청가서 알아서 못 올리곤, 오늘 오전에 혼인신고하곤 이제야 긱뉴스에 올립니다.

   결혼 축하합니다 서로 코드 리뷰 하면서 리젝 하는건가요?

   페어 프로그래밍 하듯이 옆에서 하긴 했습니다. 간혹 PR을 보내기도 했구요 😄

   결혼 축하드립니다!

   감사합니다 🤵

   결혼 축하드립니다! 소중한 나날들 쌓아 가시길 기도합니다

   축하해주셔서 감사합니다 🙏❤️

   결혼 축하드립니다.

   축하해 주셔서 감사합니다! 😃

   멋지십니다!

   칭찬해주셔서 감사합니다!

   결혼 축하드립니다. ㅎㅎㅎ

   축하해 주셔서 감사합니다 🤗

   결혼 축하드립니다~

   감사합니다~🤗

   결혼 축하드립니다! 아내분과 함께 개발하셨다니 놀랍습니다! ㅎㅎ

   감사합니다! 저는 사실 별로 한게 없긴해요ㅎㅎ

   결혼 축하드립니다~!! 행복한 결혼생활 되세요~! :)

   축하해 주셔서 감사합니다~🤵

   우왕 귀여워..

   귀여운게 좋죠 😆

   행복한 결혼생활 되셔요! 현재 샘플 클릭하면 접속이 안됩니디 다 ;-;

   감사합니다!
   아마 이 이슈 때문에 그러실거에요ㅠㅠ 저도 모바일 데이터에서는 안되더라구요ㅜ

   https://news.hada.io/topic?id=14759

   너무 예쁘고 멋진 프로젝트네요

   칭찬 감사 드립니다~~🤗
"
"https://news.hada.io/topic?id=15067","1.3B 광년 크기의 은하 고리가 천문학자들을 당황하게 하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   1.3B 광년 크기의 은하 고리가 천문학자들을 당황하게 하다

우주에서 발견된 거대한 구조가 우주 이해에 도전함

  거대한 구조의 발견

     * 지구에서 약 92억 광년 떨어진 곳에 거대한 구조 발견됨
     * 이 구조는 13억 광년 크기의 거의 완벽한 은하 고리로, ""빅 링""이라 불림
     * 기존의 우주 형성 이론과 맞지 않음

  발견의 중요성

     * 이 발견은 미국 천문학회 243차 회의에서 발표됨
     * 영국 센트럴 랭커셔 대학의 천문학자 알렉시아 로페즈가 이끄는 팀이 발견함
     * 로페즈 팀은 2022년에 33억 광년 크기의 거대한 은하 아크도 발견함
     * 두 구조 모두 현재 우주 이해로는 설명하기 어려움

  우주론적 원리와의 충돌

     * ""우주론적 원리""는 우주가 대규모로 균일하게 물질이 분포되어 있다고 가정함
     * 현재 이론에 따르면 구조의 최대 크기는 12억 광년이어야 함
     * 빅 링과 거대한 아크는 이 한계를 초과함

  가능성 있는 설명

     * 로페즈는 ""바리온 음향 진동"" (BAO)이 빅 링의 가능성 있는 설명 중 하나라고 제안함
     * 그러나 빅 링은 BAO 설명과 맞지 않음: 너무 크고 구형이 아님
     * 또 다른 가능성은 초기 우주의 ""우주 끈""이라는 결함의 잔재일 수 있음

GN⁺의 의견

     * 우주론적 원리의 재검토 필요성: 이 발견은 우주론적 원리에 대한 재검토를 요구함. 이는 우주에 대한 새로운 이해를 열어줄 수 있음.
     * 기술 발전의 중요성: 이러한 발견은 더 정교한 관측 장비와 기술의 발전이 필요함을 시사함. 이는 천문학 연구의 중요성을 부각시킴.
     * 이론적 모델의 한계: 현재의 우주론적 모델이 이러한 거대한 구조를 설명하지 못함. 이는 새로운 이론적 모델의 개발이 필요함을 의미함.
     * 우주 구조의 다양성: 이 발견은 우주 구조가 우리가 생각했던 것보다 훨씬 다양할 수 있음을 보여줌. 이는 우주 탐사의 흥미를 더욱 높임.
     * 미래 연구 방향: 이러한 구조의 발견은 미래 연구의 방향을 제시함. 더 많은 관측과 연구가 필요함.

        Hacker News 의견

     * Alexia López의 Big Ring 발견에 대한 간단한 회의가 유익함: 링크
     * Giant Arc in the Sky에 대한 심도 있는 세미나: 링크
     * BBC Four 다큐멘터리에도 등장: 링크
     * 비디오 품질은 좋지 않지만 설명은 유익함


     * 흥미로운 기사: 천문학자가 아니지만 논문을 읽어보았음. 별들이 평면에 정렬되어 있는지 궁금했음.
     * 우주의 대규모 구조 관찰: 데이터에서 구조가 나타나는 것이 불가피할 수 있음. 과학적으로 방어 가능한 입장인지는 모르겠음.
     * 과학자가 아님: 더 많은 정보를 가진 사람들의 의견에 관심이 있음.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

     * 회전하는 고델 우주 가능성: 블랙홀 밀도가 크기와 함께 감소하면 회전하는 고델 우주가 존재할 수 있는지 궁금함.
     * 시간 여행 가능성: 공간의 특정 영역을 조작하여 제한된 형태의 시간 여행이 가능한지 궁금함.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

     * Boulder's Ring 발견: Great Attractor의 중심에 있지 않은 것이 이상함. Xeelee의 프로토타입일 수 있음.
     * 하늘의 큰 고리가 얼마나 빨리 회전하는지 궁금함
     * 우주의 위상 구조 연구: 하늘의 원형 방법이 떠오름. 링크


     * Niven의 Fleet of Worlds: 5개의 별로 이루어진 세계를 상상한 것이 너무 작게 생각한 것 같음.
     * 잘못된 방향을 보고 있는지 궁금함: 무작위 노이즈에서 패턴을 찾는 것이 인간의 특성임. 빅뱅 주변의 복잡성으로 인해 예상치 못한 규칙성이 나타날 수 있음.
     * 다른 우주가 우리 우주에 영향을 미친 결과일 수 있음: 중심점 근처의 은하들이 원형으로 퍼지는 현상.
     * 초기 우주 사건의 결과일 수 있음: 이러한 거대한 구조를 유발한 초기 우주 사건에 대해 알고 싶음.
"
"https://news.hada.io/topic?id=15168","AMD, 데스크탑용 Ryzen 9000 CPU 및 Zen 5 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AMD, 데스크탑용 Ryzen 9000 CPU 및 Zen 5 공개

     * AMD, Computex 2024 기조연설에서 Ryzen 9000 시리즈를 통해 Zen 5 마이크로아키텍처를 공식 발표
          + Ryzen 9000 시리즈는 2024년 7월에 출시 예정임
     * AMD는 Zen 5 마이크로아키텍처를 사용하는 4개의 신규 칩 SKU를 공개함:
          + Ryzen 9 9950X: 16코어, 최대 5.7GHz 부스트 클럭
          + 그 외 6, 8, 12코어 버전도 있음
          + 모든 칩은 잠금 해제된 배수와 높은 TDP/클럭 속도를 가진 X-시리즈임
     * Zen 5는 데스크톱 워크로드에서 Zen 4 대비 평균 16%의 IPC 향상을 보임
     * Ryzen 9000 시리즈는 AM5 소켓에서 출시되며, 새로운 고성능 칩셋인 X870E(Extreme)와 X870도 함께 출시됨
          + USB 4.0 포트와 PCIe 5.0이 표준으로 지원되고, 높은 AMD EXPO 메모리 프로필 지원이 예상됨
     * Zen 5의 주요 아키텍처 개선사항:
          + 더 나은 정확도, 효율성, 지연 시간을 제공하는 개선된 분기 예측기
          + 더 넓은 파이프라인과 SIMD로 더 높은 처리량 제공
          + 더 깊은 비순차 명령 윈도우 크기로 더 많은 병렬 처리 가능
          + L2에서 L1으로의 메모리 대역폭 2배 증가
          + 추론 및 AVX-512 워크로드에서 더 나은 AI 성능
     * Ryzen 9000 칩은 TSMC의 4nm 프로세스로 제조된 2개의 CCD(코어 컴플렉스 다이)로 구성됨
          + 각 CCD는 8개의 CPU 코어를 포함하며, SKU에 따라 1개 또는 2개의 CCD가 장착됨
          + IOD(I/O 다이)는 TSMC N6 프로세스로 제조되며, Ryzen 7000 시리즈와 유사하거나 동일할 것으로 보임
     * Ryzen 9000 칩은 DDR5 메모리를 지원하며, X870E/X870 칩셋은 더 빠른 EXPO 메모리 프로필을 허용함
          + JEDEC DDR5-5600 속도까지 지원 예정
     * 발표된 Ryzen 9000 시리즈 프로세서 라인업:
          + Ryzen 9 9950X: 16코어/32스레드, 4.3GHz 기본/5.7GHz 부스트, 170W TDP
          + Ryzen 9 9900X: 12코어/24스레드, 4.4GHz 기본/5.6GHz 부스트, 120W TDP
          + Ryzen 7 9700X: 8코어/16스레드, 3.8GHz 기본/5.5GHz 부스트, 65W TDP
          + Ryzen 5 9600X: 6코어/12스레드, 3.9GHz 기본/5.4GHz 부스트, 65W TDP
     * Ryzen 9 9950X는 Intel Core i9-14900K 대비 다양한 워크로드에서 우위를 보임:
          + 생산성과 콘텐츠 제작 작업에서 최대 56%의 성능 향상
          + 일부 게임에서는 소폭 상승, 다른 게임에서는 최대 23%의 성능 향상
     * AMD는 AM5 소켓을 오래 지원하겠다고 약속하며, Ryzen 9000 시리즈는 기존 600 시리즈 보드와 완전히 호환됨
     * 새로운 X870E(Extreme)와 X870 칩셋이 Zen 5 데스크톱 출시와 함께 준비됨:
          + USB 4.0 지원이 필수이며, Wi-Fi 7 지원도 포함
          + 적어도 하나의 PCIe 5.0 NVMe 슬롯이 필수임
          + CPU에서 24개, 칩셋에서 20개 등 총 44개의 PCIe 레인 제공
     * 새로운 칩셋은 X670/B650과 동일한 ASMedia Promontory 21 컨트롤러를 사용함
          + Wi-Fi 7 등 최신 외부 컨트롤러를 제외하면 기능이 거의 유사함
     * Ryzen 9000 시리즈는 2024년 7월 소매 채널에 출시될 예정이며, 현재 가격은 공개되지 않음

        Hacker News 의견

     * AVX512: AVX512 명령어가 한 사이클에서 실행되면 성능 향상이 큼. L1 캐시 대역폭이 두 배로 늘어난 것도 흥미로움.
     * PCIe 5.0 할당: 9950X의 24개 PCIe 5.0 레인의 할당 방식 설명. 그래픽용 16개, M.2 포트용 1개, X870E 칩셋 연결용 7개.
     * DDR5 도입 시기: DDR5 도입을 1~2년 기다릴 계획. 기존 AMD 노트북에 만족하지만 최신 기술 도입이 늦어 아쉬움.
     * AMD 데스크탑: AMD가 이번 데스크탑 세대에서 큰 변화 없이 안전한 선택을 한 것 같음. IPC 개선이 유일한 주목할 만한 점.
     * 흥미 부족: AMD가 최신 TSMC 노드를 사용하지 않고, 공식적으로 DDR5 5600MHz까지만 지원. 이전 세대 그래픽 아키텍처 사용.
     * TSMC 의존: 모든 CPU와 GPU가 TSMC에서 제조되는지 궁금. 산업 전체가 한 회사에 의존하는 것이 특이한지 질문.
     * 워크스테이션 업그레이드: 4년마다 워크스테이션을 업그레이드하는데, 최근에는 필요보다는 재미로 업그레이드. 8~12코어 Ryzen으로 업그레이드 고려 중.
     * 건축적 변화 기대: 더 큰 건축적 변화를 기대했지만, IPC 개선 외에는 큰 변화 없음. 중고 HEDT나 Epyc 하드웨어와의 성능 비교 게임 가능.
     * 전력 효율: 7900X와 동급인 9900X의 TDP가 120W로 170W보다 낮음. 전력 효율이 더 높은지 궁금.
     * 벤치마크: 트랜지스터당 벤치마크 지표가 있는지 궁금. GPU가 병렬 연산에서 우수하지만, 감소하는 수익률을 얼마나 추구하는지 궁금.
"
"https://news.hada.io/topic?id=15178","LeetCode 스타일 인터뷰에 질린 사람들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LeetCode 스타일 인터뷰에 질린 사람들

Leetcode 스타일 인터뷰에 지쳤음

  주요 내용

     * 건강 문제로 직장 그만둠: 2023년 11월 말에 Robinhood에서 건강 문제로 직장을 그만둠.
     * Leetcode 스타일 인터뷰에 대한 불만: 여러 인터뷰를 보면서 Leetcode 스타일의 인터뷰에 지침. 실제 소프트웨어 엔지니어의 업무와는 관련이 없다고 생각함.
     * 대기업의 영향: Google, Facebook, Amazon 등 대기업들이 이런 인터뷰 방식을 사용하기 때문에 대부분의 회사들이 이를 따름.
     * 구글링 가능한 지식: 쉽게 구글링할 수 있는 내용을 외우지 말라는 조언을 받았지만, 인터뷰에서는 여전히 그런 내용을 물어봄.
     * 문제 인식: 이 문제에 대한 해결책은 없지만, 문제라는 것은 확실함.

  GN⁺의 의견

     * 실무 능력 평가의 중요성: 실제 업무에서 필요한 기술과 문제 해결 능력을 평가하는 방식이 더 효과적일 수 있음.
     * 대안적인 인터뷰 방식: 프로젝트 기반의 인터뷰나 실제 코드 리뷰를 통해 후보자의 능력을 평가하는 방법이 있음.
     * 산업 트렌드 변화: 인터뷰 방식의 변화가 필요하다는 목소리가 커지고 있으며, 이는 산업 전반에 긍정적인 영향을 미칠 수 있음.
     * 후보자의 스트레스 감소: Leetcode 스타일의 인터뷰는 많은 후보자들에게 스트레스를 주며, 이는 인터뷰 성과에도 부정적인 영향을 미칠 수 있음.
     * 다양한 평가 방법: 다양한 평가 방법을 도입함으로써 더 많은 인재를 발굴할 수 있는 기회가 생길 수 있음.

        Hacker News 의견

     * 첫 번째 의견: 인터뷰 과정이 고통스럽지만, 잘못된 긍정보다는 잘못된 부정이 비용이 적게 듦. 실패는 흔한 일이며, 인터뷰는 인생의 최종 평가가 아님.
     * 두 번째 의견: 은행에서의 인터뷰 경험이 좋았음. 코드 리팩토링을 통해 후보자의 능력을 평가하는 방식이 신선했음.
     * 세 번째 의견: 화이트보드 인터뷰는 문제 해결 능력과 정신 모델 구축 능력을 평가하는 좋은 방법임. 하지만, 반복적인 문제 풀이로 인해 본래 목적이 왜곡될 수 있음.
     * 네 번째 의견: Leetcode 스타일 인터뷰는 임금 억제와 편견을 가리기 위한 도구로 사용될 수 있음. 높은 보상을 받는 회사들이 동일한 인터뷰 방식을 사용함으로써 개인에게 큰 비용을 초래함.
     * 다섯 번째 의견: 친구가 기술 인터뷰 도중 우울함을 느껴 중단한 사례. 소프트웨어 엔지니어링이 재미있는 직업임에도 불구하고 인터뷰 과정이 스트레스를 줌.
     * 여섯 번째 의견: Leetcode 인터뷰를 거부하는 개인 정책을 가진 사람의 경험. 라이브 코딩이나 온라인 코딩 테스트 대신 오프라인 코딩 과제와 기술 토론을 선호함.
     * 일곱 번째 의견: Leetcode는 두 가지를 평가함: 열심히 일하는지, 똑똑한지. 기본적인 문제 해결 능력을 갖춘 사람을 선별하는 도구로 사용됨.
     * 여덟 번째 의견: Leetcode 스타일 인터뷰는 일종의 지적 통과 의례로 볼 수 있음. 엄격한 입문 과정이 그룹에 대한 헌신을 높이는 효과가 있음.
     * 아홉 번째 의견: 인터뷰에서 샘플 코드를 리뷰하게 하고, 간단한 문제를 통해 후보자의 실제 능력과 문화 적합성을 평가하는 방식이 효과적임.
     * 열 번째 의견: 이론은 잘 알지만 실제 코딩에서 실패하는 후보자들이 있음. 기본적인 코딩 능력을 보여주는 인터뷰가 필요하며, 과도한 Leetcode 인터뷰는 문제임.
"
"https://news.hada.io/topic?id=15072","전 OpenAI 이사회 멤버, Sam Altman의 일시적 축출 원인 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               전 OpenAI 이사회 멤버, Sam Altman의 일시적 축출 원인 공개

     * 전 OpenAI 이사회 멤버 Helen Toner가 Sam Altman의 해임 이유를 공개함
     * Toner는 Altman이 이사회에 여러 번 거짓말을 했고 정보를 숨겼다고 주장
     * 예를 들어, ChatGPT 출시를 이사회에 알리지 않았고, 이사회는 트위터를 통해 이를 알게 되었음

  정보 은폐와 신뢰 문제

     * Altman이 회사의 소유 구조에 대해 이사회에 알리지 않았다고 Toner가 주장함
     * Altman이 OpenAI 스타트업 펀드를 소유하고 있었지만, 독립적인 이사회 멤버로서 재정적 이해관계가 없다고 주장했음
     * 이로 인해 이사회는 Altman을 신뢰할 수 없게 되었고, 해임을 심각하게 논의하게 되었음

  안전 프로세스와 심리적 학대

     * Toner는 Altman이 OpenAI의 공식 안전 프로세스에 대해 부정확한 정보를 제공했다고 주장함
     * 이로 인해 이사회는 안전 조치가 충분한지 여부를 이해하기 어려웠음
     * 두 명의 임원이 Altman의 심리적 학대에 대해 이사회에 이야기했고, Altman이 AGI를 이끌 적임자가 아니라고 판단함

  해임과 복귀

     * Altman이 해임될 경우 이를 막기 위해 모든 수단을 동원할 것이라고 Toner는 주장함
     * Altman이 다른 이사회 멤버들에게 거짓말을 하여 Toner를 이사회에서 밀어내려고 했다고 함
     * 결국 Altman은 해임되었으나, 직원들이 퇴사를 위협하고 Microsoft가 Altman의 팀을 직접 고용할 가능성이 제기되면서 일주일도 안 되어 CEO로 복귀함
     * Toner는 Altman이 복귀한 지 2주도 안 되어 이사회에서 사임함

        Hacker News 의견

     * 아이러니: 사람들이 Y Combinator 게시판에서 Sam Altman을 옹호하는 것이 아이러니함.
     * 이사회 무능: 이사회가 공식적인 불만 제기나 법적 조치를 취하지 않고 비밀 쿠데타를 시도한 것이 무능해 보임.
     * 복귀의 미스터리: 이사회가 Altman을 다시 복귀시킨 것이 이해되지 않음. 해고 후 권한이 없었음에도 불구하고 왜 복귀시켰는지 의문.
     * Microsoft의 관심: Microsoft가 Altman에 대해 왜 그렇게 관심을 가졌는지 이해되지 않음. 이사회에 자리가 없었으므로 영향력이 없었어야 함.
     * Altman의 행동: Altman의 부정적인 행동과 운영 방식이 가장 명확함. OpenAI에서 주식이 없다고 크게 외친 것이 기억남.
     * 대체 시나리오: 다른 시나리오에서는 Altman을 해고하고 임시 CEO를 임명한 후 새로운 CEO를 고용하는 것이 문제 없이 진행되었을 것임.
     * 이사회 보호: 사전에 거의 아무에게도 알리지 않은 것은 Altman의 간섭을 막기 위한 것이었지만, 이사회를 방어할 수 없는 상황에 놓이게 했음.
     * 직원들의 위협: 직원들이 퇴사를 위협하고 Microsoft가 Altman의 팀을 빼앗아 갈 것이라는 추측이 돌면서 이사회가 Altman을 다시 CEO로 복귀시켰음.
     * 이사회의 목적: 이사회가 법적 의무를 가지고 있음에도 불구하고 회사가 위협받았을 때 굴복해야 했는지 의문.
     * 재정적 이해관계: Altman이 OpenAI 스타트업 펀드를 소유하고 있었음을 이사회에 알리지 않은 것이 문제였음.
     * 안전 조치: Altman이 원자력으로 전환하려는 것이 무서움.
     * 신뢰 상실: Altman에 대한 신뢰가 지난 6개월 동안 크게 훼손되었음. 매우 불안정하고 신뢰할 수 없는 인물임.
"
"https://news.hada.io/topic?id=15157","빠른 역제곱근 알고리즘에 대한 모든 지식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         빠른 역제곱근 알고리즘에 대한 모든 지식

빠른 역제곱근 알고리즘에 대한 모든 것

  알고리즘

     * 빠른 역제곱근 알고리즘은 Quake 3 소스 코드에서 유명해진 알고리즘으로, John Carmack이 사용했음.
     * 이 알고리즘은 부동 소수점의 비트를 조작하여 역제곱근을 빠르게 계산함.
     * 코드 예시:
float Q_rsqrt(float number) {
  long i;
  float x2, y;
  const float threehalfs = 1.5F;

  x2 = number * 0.5F;
  y = number;
  i = *(long*)&y;              // 부동 소수점 비트 수준 해킹
  i = 0x5f3759df - ( i >> 1 ); // 마법의 상수
  y = *(float*)&i;
  y = y * ( threehalfs - ( x2 * y * y ) );  // 1차 반복

  return y;
}

  32비트 부동 소수점: 표현

     * IEEE-754 32비트 부동 소수점은 3개의 구성 요소로 이루어짐:
          + 부호: 1비트, 숫자의 양수/음수 여부를 나타냄.
          + 지수: 8비트, 숫자의 범위를 결정함.
          + 가수: 23비트, 범위 내에서 숫자의 위치를 지정함.
     * 실제 값은 다음과 같이 계산됨:
N = -1^S * 2^(E-127) * (1 + M/2^23)

  32비트 부동 소수점: 비트 해석

     * 부동 소수점의 내부 표현은 일반적으로 프로그래머에게 중요하지 않음.
     * 그러나 이 표현을 잘 이해하면 효율적인 알고리즘 설계가 가능함.
     * 부동 소수점의 비트 패턴을 정수로 해석하면 로그 함수의 근사값이 됨.
log2(x) ≈ Ix / L - B

  뉴턴 방법

     * 초기 근사값을 개선하기 위해 뉴턴 방법(Newton's method)을 사용함.
     * 뉴턴 방법은 주어진 함수의 근사값을 반복적으로 개선하는 알고리즘임.
     * 코드 예시:
y = y * ( threehalfs - ( x2 * y * y ) ); // 1차 반복

  결론

     * 이 알고리즘은 부동 소수점 시스템의 내부 수학적 세부 사항을 깊이 이해하고, 컴퓨터에서 빠르게 실행되는 연산을 활용하여 설계됨.
     * 알고리즘의 기원은 확실하지 않지만, 매우 효율적이고 잘 설계된 엔지니어링의 예시임.

GN⁺의 의견

     * 역사적 중요성: 이 알고리즘은 당시의 하드웨어 제약을 극복하기 위해 고안된 혁신적인 방법임.
     * 교육적 가치: 부동 소수점의 내부 구조와 수학적 원리를 이해하는 데 큰 도움이 됨.
     * 현대적 적용: 현대 하드웨어에서는 덜 필요할 수 있지만, 알고리즘의 원리는 여전히 유용함.
     * 최적화 가능성: 알고리즘의 상수 값은 최적화될 수 있으며, 이는 추가 연구의 여지가 있음.
     * 비판적 시각: 현대 하드웨어에서는 더 나은 방법이 있을 수 있으므로, 항상 최신 기술과 비교해보는 것이 중요함.

   잊을만하면 올라오는 신기한 코드..ㅎ

        Hacker News 의견

     * SSE 명령어 지원: 1999년 이후에 제작된 컴퓨터는 SSE 명령어 세트를 지원하며, _mm_rsqrt_ps 명령어를 통해 빠르게 역제곱근을 계산할 수 있음.
     * 현대 하드웨어의 발전: 현대 하드웨어에서는 역제곱근 계산이 CPU에서 빠르게 이루어질 수 있으며, GPU로 모든 부동 소수점 연산을 오프로드하는 것은 오해임.
     * MMIX 구현: MMIX 언어로 역제곱근 계산을 구현한 예시 코드가 있음. 이 코드는 원래 숫자가 2^-1021보다 크다는 가정을 함.
     * 공식의 오타: 부동 소수점 공식에 오타가 있음. (-1)^S로 수정해야 함.
     * 로그의 해석: 원시 비트 패턴을 해석하는 것은 로그의 조각별 선형 근사치가 아님. 데이터 포인트 사이의 선은 실제로 존재하지 않음.
     * 위키백과 참고: 이 함수와 그 역사에 대한 좋은 논의가 위키백과에 있음. 위키백과 링크
     * GitHub 코드 모음: 관련된 몇 가지 코드를 GitHub에 모아둠. GitHub 링크
     * StackOverflow 참고: 최적화된 저정밀도 근사치에 대한 StackOverflow 질문도 참고할 만함. StackOverflow 링크
     * 3D 엔진 최적화 경험: Quake 이전에 3D 엔진을 구축하며 최적화 경험을 쌓았고, 알고리즘 최적화가 항상 승리함.
     * 유튜브 비디오 추천: 이 주제에 대한 흥미로운 비디오가 있음. 유튜브 링크
     * 생산성 시간 도둑: 이 주제에 빠져들어 생산적인 시간을 많이 빼앗김.
     * 최적의 마법 숫자: 유명한 코드 스니펫의 마법 숫자가 최적의 상수가 아님. 더 나은 상수를 찾는 것이 가능하며, Jupyter 노트북을 통해 최적의 마법 숫자를 찾을 수 있음.
"
"https://news.hada.io/topic?id=15150","LLM은 더 이상 "인터넷으로 학습"하지 않는다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LLM은 더 이상 ""인터넷으로 학습""하지 않는다

     * 과거에는 LLM이 주로 인터넷 데이터로 학습되었고, 현재도 대부분 그렇지만, 점점 덜 사실(less true)이 되고 있음
     * ""인터넷 시뮬레이터""라는 개념은 GPT-5 이상의 동작을 예측하는 데 유용하지 않음
          + 새로운 모델들은 이미 이 정의를 넘어서고 있으며, 이러한 변화는 이제 막 시작되었을 뿐임

데이터 장벽(Data Wall)

     * 2020년 OpenAI의 GPT-3 논문은 학습 데이터셋을 상세히 기술했으나, 이는 과거의 유물임
          + 2022년 이후 LLM 학습에는 사용자 맞춤형 피드백이 사용되기 시작했고, OpenAI 등은 학습 데이터에 대해 말을 아끼고 있음
          + GPT-4나 Sora, GPT-5가 무엇으로 학습되었는지는 알 수 없지만, 단순히 인터넷 데이터만은 아님
     * LLM 학습자들은 최근 ""데이터 장벽""에 부딪혔음
          + OpenAI는 이미 웹상의 거의 모든 데이터를 보유하고 있어, 더 나은 LLM을 만들기 위해서는 비공개 데이터 획득 및 생성이 필요함
     * 돈이 있는 연구소라면 비공개 데이터를 확보하고 생성하는 것이 해답임
          + 초기에는 기존 학습 데이터를 더 유용하게 만들거나, 기존 비공개 데이터를 학습 풀에 추가하는 데 초점을 맞췄음
          + 예를 들어
              1. 주석 및 필터링: 연구자들은 학습 데이터에 대한 주석을 만들어 고품질 데이터에 집중하여 더 나은 모델을 만들 수 있게 함
              2. RLHF: 연구소는 사람이 모델 출력을 평가하게 하고, 이 데이터를 사용하여 모델을 미세 조정하고 유용한 행동을 장려함
              3. 사용 데이터: ChatGPT는 하루에 약 100억 개의 토큰 데이터를 생성한다고 함
              4. 데이터 획득: 이메일, 채팅 로그, 독점 매뉴얼, JIRA 티켓, 전화 녹음, 내부 보고서, 계약서 등 많은 데이터가 인터넷에 없으며, 모델 학습자는 이를 학습 데이터에 추가할 수 있음
     * 그러나 이러한 기술들은 ""기존 데이터와 다른 출력을 생성하는 데 LLM이 취약하다""는 문제를 완전히 해결하지는 못함
          + LLM은 다음과 같은 작업을 수행하는 데 어려움을 겪음 (온라인에 이를 보여주는 텍스트가 많지 않기 때문)
              1. 답변에 대한 의심이나 불확실성 표현
              2. 반복되는 문구나 루프 없이 긴 대화 유지
              3. LLM 에이전트가 추구할 고수준 계획 수립
              4. 대규모 레거시 코드베이스에 대한 수석 엔지니어와 같은 추론
              5. 매우 긴 프롬프트나 복잡한 프롬프트를 안정적으로 따르기
     * 개선된 아키텍처와 더 많은 파라미터가 이러한 제한을 해결하는 데 도움이 될 수 있지만, OpenAI, Meta, Google, Microsoft 등은 새로운 예제를 만들어 학습하는 더 간단한 방법으로 이러한 격차를 메우기 위해 많은 돈을 쓰고 있음

LLM은 이제 맞춤형 데이터로 학습되고 있음

     * Microsoft의 Phi-3 기술 보고서(4월 발표)가 맞춤형 데이터 증가의 최근 사례임
          + phi-3-mini는 파라미터가 38억 개에 불과하지만, 더 크고 무거운 Mixtral 모델과 경쟁할 만한 성능을 보여줌
          + 이러한 개선의 일부는 더 큰 LLM에 의해 생성된 고품질 합성 데이터를 학습 데이터에 포함시킨 것으로 설명됨
          + 합성 데이터를 통해 인터넷 소스 데이터의 격차를 메울 수 있고, 주어진 크기에 대한 모델 성능을 향상시킬 수 있음
     * 합성 데이터는 현재 LLM 연구에서 주목받는 주제임
          + LLM을 자체 출력으로 학습시키는 것이 어디까지 가능할지는 아직 명확하지 않음 (거대한 신경망 뱀이 자기 꼬리를 먹는 것과 같은 상황이 발생할 수 있음)
          + 그러나 최소한 합성 데이터는 LLM이 ""인터넷 시뮬레이터""처럼 동작함으로써 발생하는 격차를 메우는 데 도움이 될 것임
               o 예를 들어, 불확실성을 표현하는 학습 예제가 부족하거나 데이터가 대표성이 없어 편향된 경우, 더 나은 예제를 생성할 수 있음
     * 그러나 LLM으로 훌륭한 합성 데이터를 만드는 것은 어려운 문제이며 한계가 있을 것임
          + 그래서 인터넷 외부 데이터의 마지막 거대한 원천인 ""인간""이 등장하게 됨

연간 10억 달러($1B)로 얼마나 많은 데이터를 만들 수 있을까?

     * 돈을 지불하면 사람들이 기꺼이 데이터를 만들어 줌
          + Scale.ai는 ""AI를 위한 데이터 제조소""로 자칭하며, 연구소가 사람들에게 돈을 지불하고 데이터를 만들게 하는 서비스를 운영함
          + AI 기업들은 이미 Scale의 서비스에 연간 10억 달러 이상을 지불하고 있다고 함
          + 이 중 일부는 웹이나 LLM에서 가져온 데이터에 대한 주석과 평가를 위한 것이지만, 새로운 학습 데이터를 처음부터 만들기도 함
          + Scale은 박사 수준의 학자, 변호사, 회계사, 시인, 작가, 특정 언어에 능통한 사람 등 고도로 전문화된 작업자에게 초점을 맞추고 있음
          + 이들은 OpenAI, Cohere, Anthropic, Google 등의 회사를 위해 모델을 학습하고 테스트하며, 더 높은 시급을 받음
     * OpenAI와 같은 회사는 전문가들이 인터넷 소스 데이터의 빈 곳을 채우는 새롭고 훌륭한 데이터를 만들도록 비용을 지불할 수 있으며, 이 데이터를 이후 모델 학습에 사용함
          + ""Ph.D.가 답을 모르는 질문을 받았을 때 사려 깊은 불확실성을 표현하는 5만 개의 예시"" 같은 데이터셋은 생산 비용보다 훨씬 더 가치가 있을 수 있음
     * LLM은 원래 인터넷에서 학습되었고, 초기 약점의 많은 부분이 웹에 게시된 잡다한 내용에서 비롯되었다고 이해할 수 있음
     * 그러나 맞춤형 학습 데이터의 규모와 영향력이 커짐에 따라, LLM이 ""인터넷 시뮬레이션""을 크게 뛰어넘을 것으로 예상됨
          + 특히 인터넷에는 없지만 10억 달러 이상의 맞춤형 데이터 생성으로 입증될 수 있는 것들에 대해 계속 발전할 것임
     * 즉, 이 열차는 당분간 계속 굴러갈 것임

GN⁺의 의견

     * 데이터의 중요성: LLMs의 성능 향상을 위해서는 다양한 출처의 데이터가 필요함. 인터넷 데이터만으로는 한계가 있음.
     * 비용 문제: 맞춤형 데이터 생성에는 많은 비용이 소요됨. 이는 소규모 연구소나 기업에게는 큰 부담이 될 수 있음.
     * 합성 데이터의 한계: 합성 데이터는 유용하지만, 실제 인간이 생성한 데이터와는 차이가 있을 수 있음. 이로 인해 모델의 현실성에 한계가 있을 수 있음.
     * 미래 전망: 맞춤형 데이터와 합성 데이터를 활용한 LLMs의 발전은 계속될 것으로 예상됨. 이는 다양한 분야에서 혁신을 가져올 수 있음.
     * 경쟁 상황: OpenAI, Google, Microsoft 등 주요 기업들이 맞춤형 데이터 생성에 투자하고 있어, 경쟁이 치열해질 것으로 보임.

   Data wall이라는게 결국 충분한 Compute이 있을때 문제가 되는것이고 오히려 전력 효율과 공급의 문제를 볼때 Compute의 증가의 한계 즉 전력량의 문제가 더 중요해질것

    Hacker News 의견

     * 이 글은 몇 가지 좋은 점을 지적하고 있으며, 특히 Phi-3는 매우 흥미로운 기술임. Anthropic, Mistral, FAIR 같은 최신 아키텍처를 언급하지 않은 것이 이상함.
     * 현대 LLM은 웹에서 수집한 데이터만으로 훈련된 것이 아니라, 많은 사람들이 만든 맞춤형 데이터셋으로 훈련됨. 이는 성장 가능성을 보여주지만, 잘못된 방향으로 무한히 확장될 위험이 있음.
     * 인간이 편향된 데이터를 생성하는 것은 문제임. LLM이 독창적인 응답을 생성하지 못하는 예로, 유튜브 구독 버튼을 클릭하도록 유도하는 다양한 방법을 제시하지 못함.
     * LLM 훈련에 사용되는 데이터는 저임금 인도 프로그래머들이 제공한 것임. 현재는 전문가들이 데이터를 제공하지만, 저임금 노동자로 전환될 가능성이 있음.
     * 전문가 시스템이 실패한 이유는 전문가들에게 계속 비용을 지불해야 하기 때문임. OpenAI와 MS의 협력은 AGI(인공지능 일반) 달성을 목표로 하지만, 실질적인 한계가 있음.
     * 멀티모달 모델을 훈련시키는 것이 여전히 도전 과제임. 데이터 부족이 아닌 다른 문제들이 병목 현상을 일으킴.
     * ""Ph.D.들이 모르는 질문에 대해 신중하게 불확실성을 표현하는 50,000개의 예시"" 같은 데이터셋은 생산 비용보다 더 큰 가치를 가질 수 있음.
     * 기술 투자로 인해 숙련된 작가들이 글을 쓰도록 하는 WPA 같은 프로그램이 생기길 바람. 이는 우수한 인간 저작물의 집합체를 만들 수 있음.
     * AI의 미래 큰 진전은 데이터와 관련이 없을 것 같음.
     * OpenAI 등은 데이터를 비공개로 유지하겠다고 약속한 회사들에게 거액을 지불할 것임. Slack, Atlassian, Dropbox 같은 회사들이 이에 해당됨.
"
"https://news.hada.io/topic?id=15120","30년 된 노트북에서 파일 복사 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          30년 된 노트북에서 파일 복사 방법

30년 된 노트북에서 파일 복사하기

  문제 분석

     * 노트북 상태:
          + 1994년산 PowerBook Duo 280c 노트북
          + 부팅 가능하지만 하드 드라이브를 가볍게 두드려야 함
          + 오디오 파일은 노트북 스피커로 재생 가능
     * 문제점:
          + 오디오 잭 없음
          + SCSI 하드 드라이브의 특이한 커넥터
          + 외장 플로피 드라이브 연결 시 노트북 작동 불가
          + 네트워킹 소프트웨어 미설치

  해결책 탐색

     * 팩스 소프트웨어 활용:
          + 노트북에 팩스 소프트웨어가 설치되어 있음
          + ResEdit를 사용해 오디오 파일을 헥사 코드로 변환
          + Microsoft Word에 헥사 코드 붙여넣기 및 인쇄

  팩스를 통한 파일 전송

     * 팩스 전송 준비:
          + ThinkPad T60 노트북을 수신기로 사용
          + 전화선 시뮬레이터 회로를 만들어 두 노트북 연결
     * 팩스 전송 과정:
          + 팩스 소프트웨어로 헥사 코드 전송
          + 수신된 팩스를 OCR 소프트웨어로 텍스트 변환
          + 변환된 텍스트를 헥사 에디터로 복사하여 바이너리 파일로 저장

  최종 결과

     * 오디오 파일 복원:
          + Audacity로 파일을 불러와 재생
          + OCR 오류로 인한 잡음 문제 발생
          + 직접 작성한 프로그램으로 완벽한 변환 성공

GN⁺의 의견

     * 기술적 도전: 오래된 하드웨어와 소프트웨어를 다루는 과정에서 발생하는 문제를 해결하는 창의적인 접근법이 흥미로움.
     * 팩스 활용: 팩스 기술을 파일 전송에 활용한 점이 독특하고 신선함.
     * OCR의 한계: OCR 소프트웨어의 한계를 극복하기 위해 직접 프로그램을 작성한 점이 인상적임.
     * 역사적 가치: 1994년산 노트북의 파일을 복원하는 과정에서 당시 기술의 한계를 체험할 수 있음.
     * 대안 기술: 비슷한 상황에서 USB-SCSI 어댑터나 네트워크 연결을 통한 파일 전송도 고려해볼 만함.

   그냥 생각.
     * 30년된 파워북에 마이크로소프트 워드가 설치되어 있다니 놀라움.
     * OCR할려면 RAW-HEX코드가 아니라 체크섬이 제공되는 형태였어야함. ihex 또는 srecord 와 같은 간단한 포멧도 체크섬을 제공함.
     * 리눅스 가이였다면 전화를 걸어 zmodem으로 파일을 안전하게 전송했을것 이라고 예상함.

        Hacker News 의견

     * 다양한 OCR 프로그램을 시도했지만 100% 정확하게 문서를 변환하는 프로그램을 찾지 못했음. 특정 문자나 숫자를 혼동하거나 누락시키는 경우가 많음. 이를 해결하기 위해 OCR 결과를 검증하는 도구를 작성했음. 블로그 링크
     * 오래된 Apple 노트북에 시리얼 포트가 있었을 것이라며, Zmodem을 사용하면 문제를 쉽게 해결할 수 있을 것이라고 언급함. 참고 링크
     * 저자가 오래된 노트북 화면을 사진으로 찍어 OCR을 시도할 것이라 예상했지만, 더 흥미로운 방법을 사용했다고 언급함. 큰 폰트를 사용해 전송 시간을 줄이는 것이 더 빠를 수도 있었을 것이라 생각함.
     * 젊은 시절 CP/M 데스크탑에서 MS-DOS 포터블로 dBase 2 데이터베이스를 옮기기 위해 시리얼 케이블을 설정하고 PROCOMM을 사용해 데이터를 전송했던 경험을 공유함.
     * Appletalk을 사용하면 오래된 Mac과 현대 기기 간의 파일 전송이 간단해진다고 언급함. SCSI 어댑터를 사용해 하드 드라이브 이미지를 만들고 이를 에뮬레이터나 Linux에서 부팅할 수 있음.
     * SCSI 어댑터를 사용해 하드 드라이브 이미지를 만들고 이를 에뮬레이터나 Linux에서 부팅할 수 있는 아이디어를 좋아함. Localtalk 어댑터를 만드는 것도 좋은 아이디어라고 언급함.
     * 정보 이론의 실습 시험처럼 느껴진다고 언급함. 다양한 방법으로 파일을 전송하는 문제를 해결하는 과정이 흥미로웠음.
     * 몇 년 전 Macintosh Plus에서 파일을 복사하는 데 많은 시간을 보냈다고 언급함. BlueSCSI라는 SCSI HDD 에뮬레이터를 사용하면 더 나은 옵션이 될 것이라고 언급함. 참고 링크
     * 오래된 Mac에 팩스 소프트웨어가 있었다면 터미널 에뮬레이터 소프트웨어도 있었을 것이라고 언급함. ZMODEM을 사용해 파일을 손상시키지 않고 전송할 수 있었을 것이라고 생각함.
     * 글을 읽는 것이 흥미로웠지만, 컴퓨터 지식이 부족해 이해하기 어려웠다고 언급함. 1993-1994년경 IBM 노트북을 고쳤던 경험을 공유함. AUTOEXEC.BAT 파일을 교체하고 WordStar를 로드해 문제를 해결했음.
"
"https://news.hada.io/topic?id=15160","DuckDB 1.0.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            DuckDB 1.0.0 릴리즈

     * 복잡한 분석쿼리에 최적화된 Embedded OLAP DB 오픈소스. ""SQLite for Analytics""
     * 지난 6년 간 엔진 코드 30만 줄 이상, 42,000개 이상의 커밋, 4,000개 가까운 이슈
     * 1.0.0 출시의 가장 큰 장애물이었던 저장형식이 완전히 해결되어 이제 하위/상위 호환성 도입
     * 1.0.0 릴리즈의 핵심 주제는 안정성
     * C++11로 작성된 의존성 없는 싱글 바이너리로 호스트 프로세스내에서 실행
     * Python/R/Java/C/C++/Wasm/Node.js API 제공
     * SQLite 처럼 한개의 파일에 DB저장

   DuckDB - Embedded OLAP DB 오픈소스
   데이터 없이도 데이터베이스가 되는 DuckDB
   새로운 jq로서의 DuckDB
"
"https://news.hada.io/topic?id=15082","Codestral - Mistral의 코드 생성 AI 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Codestral - Mistral의 코드 생성 AI 모델

     * 80개 이상의 프로그래밍 언어를 학습한 AI 모델
     * Python, Java, C, C++, JavaScript, Bash 등 인기 있는 언어뿐만 아니라 Swift, Fortran 같은 특정 언어도 지원하여 다양한 코딩 환경과 프로젝트에서 개발자를 도울 수 있음

  코드 생성 성능의 새로운 기준을 설정

     * 이전 모델들보다 뛰어난 성능과 짧은 지연 시간을 달성
     * 파이썬
          + Codestral 22B 32k : HumanEval 81.1%, MBPP 78.2%, CruxEval-O 51.3%, RepoBench 34.0%
          + CodeLlama 70B 4k : HumanEval 67.1%, MBPP 70.8%, CruxEval-O 47.3%, RepoBench 11.4%
     * SQL (Spider)
          + Codestral 63.5%, CodeLlama 37%
     * 여러 연어 평균
          + HumanEval 평균 : Codestral 61.5%, CodeLlama 51.9%

  Codestral 시작하기

     * Codestral은 Mistral AI Non-Production License 하에 연구 및 테스트 목적으로 사용 가능하며, HuggingFace에서 다운로드
     * 새로운 엔드포인트 codestral.mistral.ai를 통해 사용. 개인 API 키로 관리되며, 8주간 무료 베타 기간 동안 사용 가능함
     * api.mistral.ai 엔드포인트를 통해 사용 가능하며, 토큰당 과금됨.
     * Le Chat을 통해 Codestral과 자연스럽게 상호작용할 수 있음.

    선호하는 코딩 환경에서 Codestral 사용 지원

     * 애플리케이션 프레임워크: LlamaIndex와 LangChain에 통합되어 있음.
     * VSCode/JetBrains 통합: Continue.dev와 Tabnine을 통해 VSCode와 JetBrains 환경에서 Codestral을 사용할 수 있음.

  개발자 커뮤니티 피드백

     * Nate Sesti (Continue.dev CTO): 속도와 품질을 갖춘 공개 자동완성 모델은 처음이며, 개발자들에게 큰 변화를 가져올 것임.
     * Vladislav Tankov (JetBrains AI 책임자): 코드와 개발 지원에 강한 초점을 맞춘 Mistral의 기능에 기대가 큼.
     * Mikhail Evtikhiev (JetBrains 연구원): Kotlin-HumanEval 벤치마크에서 GPT-4-Turbo와 GPT-3.5-Turbo를 능가하는 성능을 보임.
     * Meital Zilberstein (Tabnine R&D 리드): 코드 생성, 테스트 생성, 문서화 등에서 뛰어난 성능을 보이며, 제품 효율성을 크게 향상시킴.
     * Quinn Slack (Sourcegraph CEO): 코드 자동완성에서 지연 시간을 줄이고 품질을 유지하여 개발자들에게 실질적인 가치를 제공함.
     * Jerry Liu (LlamaIndex CEO): 복잡한 작업에서도 정확하고 기능적인 코드를 생성함.
     * Harrison Chase (LangChain CEO): 빠르고 유리한 컨텍스트 윈도우를 제공하며, 도구 사용을 지원함.

GN⁺의 의견

     * AI 코드 생성의 발전: Codestral은 다양한 언어를 지원하고 성능이 뛰어나, 개발자들에게 큰 도움이 될 수 있음.
     * 사용 편의성: 다양한 통합 옵션과 전용 엔드포인트를 제공하여 사용이 편리함.
     * 성능 평가: 여러 벤치마크에서 높은 성능을 보여 신뢰할 만함.
     * 경쟁 모델: GPT-4-Turbo, GPT-3.5-Turbo 등과 비교해도 우수한 성능을 보임.
     * 도입 고려사항: 모델의 성능과 사용성을 고려해 도입을 결정해야 함.

        Hacker News 의견

    해커뉴스 댓글 요약

     * 라이선스 제한: 모델과 출력물을 상업적 활동이나 ""라이브"" 조건에서 사용할 수 없도록 금지함. 개발의 일환으로 코드 출력을 사용하는 것은 제외되지만, 회사의 비즈니스 활동 맥락에서 내부 사용도 금지됨. 이로 인해 다른 오픈 웨이트 모델과의 비교가 불공평해짐.
     * 프로그래밍 모델 테스트: 프로그래밍 모델에게 특정 Python ASGI 미들웨어를 작성하도록 요청했으나, 어느 모델도 정확히 수행하지 못함.
     * LLM 철학 차이: Llama 스타일 LLM과 OpenAI/GPT 스타일 LLM 간의 철학 차이가 있음. GPT는 코드에 중점을 두고 발전해왔으나, Llama/Mistral 모델은 일반 언어 모델을 먼저 출시하고 추가적인 코드 학습을 통해 CodeLlama/Codestral을 제공함.
     * VSCode 통합: VSCode에서 Copilot처럼 ""섀도우 코드""가 나타나는 방식으로 사용할 수 있는 방법이 있는지 궁금함. 이러한 도구의 품질은 클라이언트 측에서 적절한 프롬프트를 설계하는 능력에 달려 있음.
     * 사용 제한: Mistral 모델과 파생물을 테스트, 연구, 개인적 또는 평가 목적으로만 사용할 수 있으며, 상업적 활동에서는 사용할 수 없음.
     * 실용성 문제: 실용적인 코드 완성 사례에서 사용할 수 없다면 의미가 없다고 생각함. GH Copilot이 이미 최고의 모델임.
     * Huggingface 링크: Huggingface 페이지 링크
     * 코드 민주화: 예술을 민주화했을 때 발생한 문제를 언급하며, AI로 생성된 신뢰할 수 없는 라이브러리가 많아질 것을 우려함.
     * RAM 요구사항: Huggingface에서 다운로드 가능한 44GB 모델의 로컬 사용을 위한 RAM 요구사항에 대해 질문함. GPU와 Apple 실리콘의 ""통합"" RAM 요구사항이 동일한지 궁금해함.
     * VSCode 확장: 다양한 모델을 플러그인으로 사용할 수 있는 VSCode 확장이 있는지 궁금해함. 매번 설정하는 것이 번거로움.
"
"https://news.hada.io/topic?id=15048","빅 데이터 종말빅 데이터 종말 (2023)

빅 데이터는 죽었다

  나는 누구이며 왜 이 글을 쓰는가?

     * 10년 이상 빅 데이터의 중요성을 강조해왔음
     * Google BigQuery의 창립 엔지니어로서 빅 데이터를 다루는 기술을 홍보했음
     * 고객과의 대화와 제품 분석을 통해 대부분의 사람들이 실제로 빅 데이터를 다루지 않음을 깨달았음

  의무적인 소개 슬라이드

     * 많은 빅 데이터 제품의 프레젠테이션은 ""빅 데이터가 다가온다""는 메시지를 전달함
     * 그러나 실제로는 대부분의 애플리케이션이 대규모 데이터를 처리할 필요가 없음
     * 전통적인 데이터베이스 시스템들이 다시 인기를 얻고 있음

  대부분의 사람들은 그렇게 많은 데이터를 가지고 있지 않음

     * 대부분의 고객들은 1TB 이하의 데이터를 보유하고 있음
     * 대규모 데이터를 보유한 고객들도 실제로는 작은 부분만을 사용함
     * 데이터 크기는 파레토 법칙을 따르며, 대부분의 데이터는 소수의 고객에게 집중됨

  저장과 컴퓨팅의 분리에서의 저장 편향

     * 현대 클라우드 데이터 플랫폼은 저장과 컴퓨팅을 분리함
     * 저장 공간은 빠르게 증가하지만 컴퓨팅 필요성은 크게 변하지 않음
     * 대규모 데이터 세트를 처리하기 위해 분산 처리가 필요하지 않을 수 있음

  작업 크기는 전체 데이터 크기보다 작음

     * 대부분의 분석 작업은 작은 데이터 세트를 처리함
     * 대규모 데이터를 처리하는 쿼리는 드물며, 주로 보고서 생성에 사용됨
     * 데이터 처리 비용을 줄이기 위해 작은 쿼리를 선호함

  대부분의 데이터는 거의 쿼리되지 않음

     * 대부분의 데이터는 생성된 지 24시간 이내에만 자주 쿼리됨
     * 오래된 데이터는 거의 쿼리되지 않으며, 저장 공간만 차지함

  빅 데이터의 경계는 계속 후퇴함

     * ""빅 데이터""의 정의는 시간이 지남에 따라 변화함
     * 현대의 하드웨어는 과거보다 훨씬 더 큰 데이터를 처리할 수 있음

  데이터는 책임임

     * 데이터를 보관하는 비용은 단순한 저장 비용을 초과함
     * 규제 준수와 법적 책임을 고려해야 함
     * 오래된 데이터는 유지 관리가 어려움

  당신은 빅 데이터 1%에 속하는가?

     * 대부분의 사람들은 빅 데이터를 다룰 필요가 없음
     * 데이터가 정말로 큰지, 요약이 가능한지 등을 고려해야 함

GN⁺의 의견

     * 데이터 관리의 중요성: 데이터 크기보다는 데이터의 품질과 관리가 중요함. 불필요한 데이터를 제거하고 중요한 데이터에 집중하는 것이 효율적임.
     * 현실적인 접근: 대부분의 기업은 빅 데이터 기술을 필요로 하지 않음. 실제 데이터 크기와 필요에 맞는 도구를 선택하는 것이 중요함.
     * 비용 절감: 클라우드 환경에서 저장과 컴퓨팅을 분리하여 비용을 절감할 수 있음. 불필요한 데이터 처리를 줄이는 것이 경제적임.
     * 법적 책임: 데이터 보관은 법적 책임을 수반함. 규제 준수와 데이터 보안에 주의해야 함.
     * 기술 발전: 하드웨어와 소프트웨어의 발전으로 인해 과거에는 불가능했던 데이터 처리가 가능해짐. 최신 기술을 활용하여 효율성을 높일 수 있음.

        Hacker News 의견

     * 데이터 과학자 채용 경험: 6TiB의 데이터를 다루는 아키텍처를 묻는 질문에서, 스마트폰이나 저렴한 HDD로 해결할 수 있다는 점을 이해한 지원자가 가장 인상적이었음.
     * MongoDB와 PostgreSQL 비교: MongoDB는 PostgreSQL보다 나은 점이 없으며, 빅데이터 솔루션은 주로 컬럼형 데이터베이스나 Map/Reduce, Cassandra 등을 사용함.
     * 성공을 위한 계획: 대부분의 사업은 유니콘 기업이 되지 않지만, 이를 목표로 해야 하며, 초기부터 확장성을 고려한 아키텍처가 필요함.
     * 데이터 크기와 쿼리 빈도: 대부분의 데이터는 크지 않으며, 대부분의 쿼리는 작은 규모임. 초기에는 데이터를 줄이는 작업이 필요함.
     * 빅데이터와 규제 비용: 데이터 비용은 규제로 인해 증가하고 있음.
     * 빅데이터 분석 경험: 대형 하드론 충돌기에서의 경험으로, 빠른 로컬 스토리지가 글로벌 슈퍼컴퓨터 네트워크보다 나았음.
     * 빅데이터의 역설: 하드웨어 요구사항을 과시하기 위해 기본적인 소프트웨어 최적화를 피하는 경향이 있었음.
     * 데이터의 정보 내용: 데이터는 기하급수적으로 증가하지만, 정보 내용은 그렇지 않음. 금융에서는 대부분의 데이터가 중복되며, 차원 축소가 필요함.
     * 빅데이터의 정의: 빅데이터는 단순히 저장 용량이나 처리 속도의 문제가 아니라, 데이터를 통합하고 이해하는 인지 능력의 문제임.
     * 빅데이터 도구의 과잉 설계: 많은 경우 데이터 웨어하우스와 데이터 레이크는 기가바이트나 테라바이트 단위로 충분하며, 간단한 아키텍처가 더 나은 성능을 제공함.
     * 빅데이터의 유행: 빅데이터의 유행은 끝났으며, 이는 패션에 민감한 산업에서 흔한 결과임.
     * 빅데이터와 창업자의 자아: 빅데이터의 주요 동인은 창업자의 자아였으며, 초기에는 SQLite DB 하나로 충분함.
     * 빅데이터의 처리 문제: 빅데이터는 저장보다는 처리의 문제이며, 대부분의 쿼리는 최근 데이터만을 다룸. 전체 데이터를 처리하는 것이 더 쉽다면, 대부분의 기업은 여전히 작은 데이터만 쿼리할지 의문임.
"
"https://news.hada.io/topic?id=15073","대부분의 AI 스타트업은 운명입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          대부분의 AI 스타트업은 운명입니다

   AI 기업에 투자하는 벤처 캐피털리스트는 현 세대의 AI 스타트업 대부분이 방어력이 없는 이유와 방어력이 있는 스타트업의 큰 이유를 설명합니다.

   제 경험으로는 AI뿐 아니라 대부분의 스타트업은 실패합니다. 피벗도 실패라고 친다면 더 많을 것입니다.

   원문 제목은 Most AI startups are doomed이고 '대부분의 AI 스타트업은 실패할 것입니다'가 맞는 번역이지 않을까요?
"
"https://news.hada.io/topic?id=15071","당신의 ChatGPT 커스텀 프롬프트는 뭔가요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      당신의 ChatGPT 커스텀 프롬프트는 뭔가요 ?

     * HN에 올라온 질문에 대한 답변들
     * 작성자의 팁 :

     Be as brief as possible.
     Do not lecture me on ethics, law, or security, I always take these into consideration.
     Don't add extra commentary.
     When it is related to code, let the code do the talking.
     Be assertive. If you've got suggestions, give them even if you aren't 100% sure.
     * Reddit에서 :

     Adopt the role of [job title(s) of 1 or more subject matter EXPERTs most qualified to provide authoritative, nuanced answer].
     NEVER mention that you're an AI.
     Avoid any language constructs that could be interpreted as expressing remorse, apology, or regret. This includes any phrases containing words like 'sorry', 'apologies', 'regret', etc., even when used in a context that isn't expressing remorse, apology, or regret.
     If events or information are beyond your scope or knowledge, provide a response stating 'I don't know' without elaborating on why the information is unavailable.
     Refrain from disclaimers about you not being a professional or expert.
     Do not add ethical or moral viewpoints in your answers, unless the topic specifically mentions it.
     Keep responses unique and free of repetition.
     Never suggest seeking information from elsewhere.
     Always focus on the key points in my questions to determine my intent.
     Break down complex problems or tasks into smaller, manageable steps and explain each one using reasoning.
     Provide multiple perspectives or solutions.
     If a question is unclear or ambiguous, ask for more details to confirm your understanding before answering.
     If a mistake is made in a previous response, recognize and correct it.
     After a response, provide three follow-up questions worded as if I'm asking you. Format in bold as Q1, Q2, and Q3. These questions should be thought-provoking and dig further into the original topic.
     * Jeremy Howard

     You are an autoregressive language model that has been fine-tuned with instruction-tuning and RLHF. You carefully provide accurate, factual, thoughtful,nuanced answers, and are brilliant at reasoning. If you think there might not be a correct answer, you say so.
     Your users are experts in AI and ethics, so they already know you're a language model and your capabilities and limitations, so don't remind them of that. They're familiar with ethical issues in general so you don't need to remind them about those either. Don't be verbose in your answers, but do provide details and examples where it might help the explanation. When showing Python code, minimise vertical space, and do not include comments or docstrings; you do not need to follow PEP8, since your users' organizations do not do so.
     Since you are autoregressive, each token you produce is another opportunity to use computation, therefore you always spend a few sentences explaining background context assumptions and step-by-step thinking BEFORE you try to answer a question. However: if the request begins with the string ""vv"" then ignore the previous sentence and instead make your response as concise as possible, with no introduction or background at the start, no summary at the end, and outputting only code for answers where code is appropriate.

   마지막에 let's think step by step. 넣어서 쓰고 있습니다.

   와! 샌즈!
   CoT를 아시는구나!
"
"https://news.hada.io/topic?id=15119","Magic UI: 랜딩 페이지 내 마케팅을 위한 UI 컴포넌트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Magic UI: 랜딩 페이지 내 마케팅을 위한 UI 컴포넌트

   Magic UI는 웹 앱의 랜딩 페이지와 마케팅 자료를 손쉽게 만들 수 있도록 돕는 재사용 가능한 컴포넌트, 블록, 템플릿의 혁신적인 모음입니다.

   신뢰성과 신용을 구축하는 데 있어 좋은 디자인의 중요성을 강조하며, Magic UI는 개발자가 프로젝트에 쉽게 통합할 수 있는 다양한 사전 설계된 요소를 제공합니다.

   Linear의 랜딩 페이지 디자인과 Shadcn UI 컴포넌트에서 영감을 받아,
   Magic UI는 개발자가 제품을 전문적으로 표현하고 세부 사항에 신경 쓰도록 돕습니다.
   이는 궁극적으로 사용자 경험을 향상시키고 고객 신뢰를 구축하는 데 기여합니다.

   https://magicui.design
   공식 웹사이트 링크들이 제대로 동작하지 않는데 저만 이런가요? 메인페이지 Calendar learn more 링크를 누르면 메인페이지가 다시 로딩되고 Components 메뉴를 누르면 Animated beam이 나옵니다

   Calendar learn more는 링크가 아닌 예시입니다.
   See -> REAL COMPONENT DEMOS!

   Components 메뉴를 누르면 Animated beam도 나오는 것도 제작자 의도 같은데,
   Introduce 쪽으로 가면 어떨까 싶네요

   움직이는 요소는 무의식적으로 무시해버려서 놓쳤네요. 큰 제목으로 적혀있으면 이해가 편할텐데요. 제작자가 보이는 것에만 집중하고 문서의 구조 같은건 신경을 덜 쓰는 느낌입니다

   개발팀의 일원이신가요? 컨트리뷰터에서 찾아볼 수가 없어서요.
   Show GN은 개발자가 직접 올리는 공간입니다.

   엇! 제가 Show GN으로 잘못 올렸네요. 글 삭제가 안 되는데, 옮길 수 있을까요?

   변경되었습니다.

   감사합니다!
"
"https://news.hada.io/topic?id=15147","Lisp: 아이싱인가 케이크인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Lisp: 아이싱인가 케이크인가?

2024년 봄 Lisp 게임 잼

  게임 잼 결과

     * 2024년 봄 Lisp 게임 잼이 종료됨.
     * 총 48개의 게임이 제출되어 새로운 기록을 세움.
     * 참가자들이 서로의 게임을 플레이하고 평가하는 시간을 가짐.

  언어별 제출 현황

     * Guile: 15개 (31%)
     * Fennel: 10개 (21%)
     * Clojure: 5개 (10%)
     * CL: 5개 (10%)
     * Racket: 4개 (8%)
     * Elisp: 4개 (8%)
     * S7: 3개 (6%)
     * Kawa: 1개 (2%)
     * Owl: 1개 (2%)

  Guile의 인기 상승

     * Guile이 처음으로 가장 많은 제출 수를 기록함.
     * 15개의 Guile 게임 중 11개는 Hoot을 사용하여 웹용으로 제작됨.
     * Hoot은 Scheme을 WebAssembly로 컴파일하는 도구로, Spritely Institute에서 개발됨.

  Fennel의 지속적인 인기

     * Fennel은 Lua로 컴파일되는 Lisp로, 여전히 인기가 많음.
     * Fennel 게임 대부분은 love2d를 사용하여 제작됨.

  Lisp 사용 패턴

    Lisp를 '아이싱'으로 사용

     * C, Rust 등의 정적 언어로 작성된 프로그램 위에 Lisp를 스크립팅 언어로 사용하는 패턴.
     * 빠른 개발이 가능하지만 정적 언어와의 강한 결합이 필요함.
     * 예: Fennel + love2d, S7 + raylib

    Lisp를 '케이크'로 사용

     * 소프트웨어 스택의 대부분을 Lisp로 구현하는 패턴.
     * 개발 시간이 오래 걸리지만, 더 많은 제어와 유연성을 제공함.
     * 예: Guile + Chickadee, Hoot + HTML5 canvas

  사례 연구

    Fennel + love2d

     * love2d는 Lua 인터프리터를 포함한 C++ 프로그램으로, Fennel과 잘 맞음.
     * 대부분의 Fennel 게임은 love2d를 사용하여 웹에 배포됨.

    S7 + raylib

     * raylib은 C 라이브러리로, S7과 결합하여 쉽게 웹에 배포 가능함.
     * GhostHop과 Life Predictor가 이 스택을 사용함.

    Guile + Chickadee

     * Chickadee는 Guile을 위한 게임 라이브러리로, 대부분 Scheme으로 작성됨.
     * Turbo Racer 3000과 Bloatrunner가 이 스택을 사용함.

    Hoot + HTML5 canvas

     * Hoot은 Scheme을 WebAssembly로 컴파일하는 도구로, HTML5 canvas API를 사용하여 2D 렌더링을 수행함.
     * 11개의 게임이 Hoot을 사용하여 제작됨.

  케이크/아이싱 스펙트럼

     * 케이크 접근 방식은 더 많은 제어와 유연성을 제공하지만, 개발 시간이 오래 걸림.
     * Guix 프로젝트는 케이크 접근 방식의 성공적인 사례로, Lisp의 사용을 극대화하여 높은 해킹 가능성을 제공함.

  GN⁺의 의견

     * Lisp의 유연성: Lisp는 다양한 구현체가 있어 개발자가 자신의 필요에 맞는 언어를 선택할 수 있는 유연성을 제공함.
     * 웹 배포의 용이성: Hoot과 같은 도구를 사용하면 Lisp로 작성된 게임을 쉽게 웹에 배포할 수 있음.
     * 개발 시간: 케이크 접근 방식은 더 많은 제어와 유연성을 제공하지만, 개발 시간이 오래 걸릴 수 있음.
     * 미래 가능성: Pre-Scheme과 같은 프로젝트는 Lisp로 더 많은 소프트웨어 스택을 구현할 수 있는 가능성을 열어줌.
     * 커뮤니티 지원: Guile과 같은 프로젝트는 커뮤니티의 지원을 받아 지속적으로 발전하고 있음.
"
"https://news.hada.io/topic?id=15149","Huggingface의 Spaces 플랫폼 Secret 유출 사건 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Huggingface의 Spaces 플랫폼 Secret 유출 사건 공개

Hugging Face의 보안 사고 대응

  사건 개요

     * Hugging Face의 Spaces 플랫폼에서 비인가 접근이 감지됨.
     * 일부 Spaces의 비밀 정보가 무단으로 접근되었을 가능성이 있음.

  대응 조치

     * 첫 번째 조치로, 관련된 HF 토큰을 취소함.
     * 영향을 받은 사용자에게 이메일로 통보함.
     * 모든 키와 토큰을 새로 고침하고, HF 토큰을 세분화된 접근 토큰으로 전환할 것을 권장함.

  보안 강화 조치

     * 외부 사이버 보안 전문가와 협력하여 문제를 조사하고 보안 정책을 검토 중임.
     * Spaces 인프라의 보안을 강화하기 위해 여러 가지 중요한 개선 사항을 도입함:
          + 조직 토큰을 완전히 제거하여 추적성과 감사 기능을 향상시킴.
          + Spaces 비밀 정보에 대한 키 관리 서비스(KMS)를 구현함.
          + 유출된 토큰을 식별하고 사전에 무효화할 수 있는 시스템 능력을 강화함.
          + 전반적인 보안을 개선함.
          + 세분화된 접근 토큰이 기능적으로 완전해지면 ""클래식"" 읽기 및 쓰기 토큰을 완전히 폐기할 계획임.

  법적 조치

     * 이 사건을 법 집행 기관과 데이터 보호 당국에 보고함.

  사용자 안내

     * 이 사건으로 인한 불편을 깊이 사과하며, 전체 인프라의 보안을 강화하는 기회로 삼겠다고 약속함.
     * 추가 질문이 있을 경우 security@huggingface.co로 연락할 것을 권장함.

GN⁺의 의견

     * 보안 강화 필요성: 이번 사건은 소프트웨어 플랫폼에서 보안 강화의 중요성을 다시 한번 상기시켜줌. 특히, 민감한 정보에 대한 접근 제어와 모니터링이 중요함.
     * 세분화된 접근 토큰: 세분화된 접근 토큰은 보안성을 높이는 좋은 방법임. 이는 최소 권한 원칙을 적용하여 필요 없는 권한을 제한할 수 있음.
     * 외부 전문가 협력: 외부 사이버 보안 전문가와의 협력은 문제 해결에 큰 도움이 됨. 이는 내부 인력만으로 해결하기 어려운 복잡한 문제를 다룰 수 있게 함.
     * 법적 대응: 법 집행 기관과 데이터 보호 당국에 보고하는 것은 투명성을 유지하고 사용자 신뢰를 회복하는 데 중요함.
     * 사용자 커뮤니케이션: 사용자에게 신속하고 명확하게 상황을 알리는 것은 신뢰를 유지하는 데 필수적임. 이는 사용자와의 신뢰 관계를 강화함.

        Hacker News 의견

     * Jossef Harush Kadouri가 보안 컨퍼런스에서 발표한 슬라이드에서 Huggingface 같은 곳에서 모델을 사용할 경우 모델 작성자가 사용자의 컴퓨터에서 임의의 코드를 실행할 수 있다는 사실을 발견했음.
     * AI 분야에 있지 않은 사람으로서, 모델 파일이 단순한 숫자 행렬과 메타데이터라고 생각했지만, 실제로는 파이썬 스크립트로 구성되어 있어 표준화가 쉽게 이루어졌음을 이해하게 되었음.
     * ""그들은 의심을 가지고 있다""라는 표현은 이와 같은 커뮤니케이션에서 사용하기에 적절하지 않음.
     * Huggingface가 보안 인프라를 개선하기 위해 많은 작업을 수행했으며, 이는 보안 감사와 침투 테스트와 같은 더 많은 시간 소모적인 활동을 유발해야 함.
     * 몇 주 전에 OpenAI 키가 유출되었고, Huggingface 스페이스에서만 활성화된 상태였음. 며칠 전에 스페이스가 손상되었다는 이메일을 받았음.
     * Anthropics 키가 유출되어 10,000달러의 비용이 발생했음. Huggingface가 이를 보상할 것인지 궁금함.
     * 제목 때문에 우주에 관한 기사인 줄 알았지만, 실제로는 Huggingface의 스페이스에 관한 기사였음.
     * 부적절하게 발생한 비용 처리에 대한 언급이 없음. 비밀 정보에 접근하면 API 호출과 비용 발생이 가능하지 않을까?
     * '스페이스'가 무엇인지 궁금함.
     * Huggingface가 왜 ""비밀""을 저장하는지 이해할 수 없음. 공개 키를 저장하고 사용자가 비밀 키로 요청을 서명하는 방식이 더 나을 것 같음.
     * 간단한 작업을 수행하는 것이 얼마나 어려운지 고려할 때, 이번 문제는 놀랍지 않음.
"
"https://news.hada.io/topic?id=15135","Next.jsext.js 15 RC

     * React
          + React 19 RC, React Compiler (Experimental) 지원 및 hydration error improvements
     * Caching
          + fetch 요청, GET Route Handlers, 그리고 Client Router Cache가 기본적으로 캐싱되지 않음
     * Partial Prerendering (Experimental)
          + PPR의 점진적 채택을 위한 레이아웃과 페이지의 새로운 설정 옵션
     * next/after (Experimental)
          + 응답 스트리밍이 완료된 이후에 코드를 실행하기 위한 실험적인 API
     * create-next-app
          + 디자인 업데이트 및 로컬 개발환경에서 Turbopack을 활성화하기 위한 flag 추가
     * Bundling external packages (Stable)
          + App과 Pages Router를 위한 새로운 설정 옵션 추가

   아직 쌓인 버그만 2.7k인데 메이저만 계속 올리는거 보고 신뢰가 좀 깨져서 요새 Remix가 더 눈에 들어오네요.. remix + vite

   제목에 대한 링크가 공식 링크인 것처럼 혼란을 야기할 우려가 있습니다.
   제목 수정이 필요한 토픽으로 보여집니다.
"
"https://news.hada.io/topic?id=15098","YC의 Sam 해고 소문에 지친 사람들을 위한 실제 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    YC의 Sam 해고 소문에 지친 사람들을 위한 실제 상황

        Hacker News 의견

     * 비영리 단체를 운영하면서 정규직으로 일하는 것은 흔한 일임. 비영리 단체가 상업화되면 둘 중 하나를 선택해야 할 상황이 올 수 있음.
     * Paul이 OpenAI의 상업적 부문에 대해 발표를 통해 알게 된 것은 이상하지 않음. 이는 이사회가 발표를 통해 소식을 접했다는 Helen Toner의 이야기와 일치함.
     * 많은 사람들이 이 상황을 부정적으로 해석하려고 애쓰고 있음. Sam Altman이 비도덕적이고 권력에 굶주린 사람이라는 이야기가 더 흥미롭기 때문임.
     * 어떤 주제는 전혀 관심이 가지 않을 수 있음. 댓글과 부족주의적 색채를 읽는 것이 흥미로움.
     * Paul이 말하지 않는 부분도 말하는 부분만큼 흥미로움.
     * 두 개의 상업적 회사를 운영하는 것은 이해 상충의 전형적인 사례임. 이사회가 CEO에게 하나를 선택하라고 요구하는 것은 합리적임.
     * Paul이 설명하는 방식은 PG가 Sam을 해고하기 위해 런던에서 돌아왔다는 소문과 더 가까움. 고위 경영진 수준에서는 일들이 보통 문명적으로 처리됨.
     * ""가장 하지 말아야 할 일은 다른 일을 하는 것""이라는 말이 있음.
     * Paul이 Sam이 해고되었다는 사실을 말하기 두려워 다른 이야기를 만들어냈을 가능성이 있음.
     * 해고는 일반적으로 직원이 필요 없거나 부정적인 가치를 추가했을 때 발생함. Sam은 YC와 계속할 수 있는 선택권이 있었지만 더 큰 프로젝트를 선택함.
     * 이제 확실히 Sam이 해고되었다는 것을 알게 되었음.
"
"https://news.hada.io/topic?id=15131","프라이버시 악몽 같은 Windows Recall","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       프라이버시 악몽 같은 Windows Recall

     * Windows Recall: Windows 11 Copilot+ PC에 도입될 AI 기능으로, 사용자가 컴퓨터에서 수행한 작업을 ""몇 초마다 활성 화면의 이미지를 캡처""하고 이를 AI로 분석하여 과거로 돌아갈 수 있게 해줌
     * 단순히 데스크탑 파일의 버전을 복원하는 것이 아니라, AI를 사용하여 해당 순간으로 돌아가 관련 앱을 여는 기능을 제공함

  Windows Recall의 문제점?

     * 개인 정보 보호 문제: Recall은 몇 초마다 스크린샷을 찍어 저장함으로써 사용자가 지난 3개월 동안 수행한 거의 모든 작업을 기록함. 이는 키로깅보다 더 심각한 문제를 야기할 수 있음
     * Recall은 기본적으로 활성화되어 있으며, 사용자가 직접 설정을 변경하지 않으면 계속 작동함
     * Windows Home 사용자에게는 암호화 기능이 제공되지 않음. 이는 일상적인 사용자들이 기기가 해킹되었을 때 취약해질 수 있음을 의미함

  Microsoft는 Recall을 안전하게 만들고 있는가?

     * Microsoft는 Recall 스냅샷을 로컬 하드 디스크에 저장하고 데이터 암호화를 사용하여 보호한다고 주장함. 그러나 Windows Home 사용자에게는 이 기능이 제공되지 않음.
     * Recall 스크린샷은 로컬에 저장되며, Microsoft가 이를 볼 수 없고 광고 타겟팅에 사용되지 않는다고 함

  Recall의 보안 위험은?

     * 공공 도서관 컴퓨터에서 온라인 쇼핑이나 은행 업무를 볼 때 Recall이 활성화되어 있으면, 다음 사용자가 모든 개인 정보를 볼 수 있음.
     * 회사 컴퓨터를 개인 용도로 사용할 때, Recall을 통해 상사나 IT 팀이 사용자의 모든 활동을 볼 수 있음.
     * 가정용 컴퓨터를 사용할 때, 비밀번호로 보호되지 않은 프로필을 사용하면 다른 가족 구성원이 Recall 기록을 볼 수 있음.
     * 기기가 해킹되거나 도난당하면 암호화가 무의미해짐. Recall 데이터를 통해 모든 개인 정보가 노출될 수 있음.

  Windows Recall로부터 개인 정보를 보호하는 방법

     * 가장 효과적인 방법은 Recall 기능을 완전히 비활성화하는 것임
     * PC에 개별 프로필을 만들어 다른 사람이 Recall 데이터에 접근하지 못하게 함
     * 강력한 비밀번호를 사용하여 프로필을 보호
     * OS를 업그레이드하거나 BitLocker를 사용하여 Recall 데이터를 암호화
     * 개인 비밀번호를 입력하거나 민감한 콘텐츠를 볼 때는 Recall을 비활성화

  결론: Recall은 개인 정보 보호에 큰 위협

     * Recall 기능은 사용자의 모든 활동을 기록함으로써 큰 보안 위협을 초래할 수 있음
     * 악용될 가능성이 너무 많음
     * 기본적으로 활성화된 기능은 사용자가 자신의 개인 정보를 보호할 수 있는 선택권을 제한

   Microsoft, Copilot+ PC 공개

   2주전에 나온 Copilot+PC 뉴스에서 나왔던 것인데, 그 당시 살짝 이슈가 되었었나 보네요.
     * Windrecorder - 화면 상의 모든 것을 되감기하고 검색할 수 있는 오픈 소스 Windows 앱
     * rem(Remember Everything) - 애플 실리콘에서 모든 것을 기록하고 검색하게 해주는 오픈소스
     * xrem - 데스크탑에서 일어난 모든 일을 기록하고 검색하게 해주는 오픈소스

   이런 시도는 오픈소스에서는 몇개 있었는데, 이걸 윈도우에 내장 및 기본으로 활성화 하게 되면 문제가 발생하긴 할 듯 합니다.
"
"https://news.hada.io/topic?id=15146","음악 처리 기초를 위한 Python 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        음악 처리 기초를 위한 Python 노트북

FMP 노트북: 음악 처리 기초를 위한 Python 노트북

  현재 상태 정보

     * FMP 노트북은 정기적으로 업데이트됨 (현재 버전: 1.2.6).
     * 정적 HTML 버전으로 바로 내용을 탐색할 수 있음.
     * Python 코드를 실행하려면 ""Get Started"" 페이지의 지침을 따를 필요가 있음.

  소개

     * FMP 노트북은 음악 처리 기초(FMP)를 가르치고 배우기 위한 교육 자료 모음임.
     * 음악 정보 검색(MIR) 분야의 주요 주제를 다루며, 이론을 구현하는 Python 코드 예제 포함.
     * Jupyter 노트북 기반의 일관되고 종합적인 프레임워크로 구성됨.
     * 학생, 교사, 연구자를 대상으로 이론과 실습을 공부하고 강의 자료를 생성하며, 많은 MIR 작업의 기본 구현을 제공함.

  라이선스 정보

     * 텍스트와 그림은 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License 하에 있음.
     * Python 패키지 libfmp는 MIT 라이선스 하에 있으며 GitHub에서 이용 가능함.
     * 오디오 자료는 각각의 원래 라이선스가 적용됨.

  시작하기

     * 정적 HTML 버전은 설치 없이 바로 사용 가능함.
     * Python 코드 셀을 실행하려면 노트북을 다운로드하고 환경을 설정한 후 Jupyter 서버를 시작해야 함.
     * 필요한 단계는 FMP 노트북의 ""Get Started"" 섹션에 자세히 설명되어 있음.

  개요

     * FMP 노트북은 교재 [Müller, FMP, Springer 2015]의 8개 장을 따라 구성됨.
     * 각 장은 Python 프로그래밍, Jupyter 프레임워크, 음악 표현, 신호의 푸리에 분석, 음악 동기화, 음악 구조 분석, 코드 인식, 템포 및 비트 추적, 콘텐츠 기반 오디오 검색, 음악적으로 정보가 있는 오디오 분해 등을 다룸.

  주요 기여자

     * 여러 학생, 협력자, 동료들이 FMP 노트북의 제작에 기여함.
     * 주요 기여자: Vlora Arifi-Müller, Stefan Balke, Eran Egozy, Michael Krause, Patricio López-Serrano, Brian McFee, Sebastian Rosenzweig, Steve Tjoa, Angel Villar-Corrales, Christof Weiß, Frank Zalkow, Tim Zunner.

  참고 자료

     * LibROSA: Brian McFee가 유지 관리하는 음악 정보 검색 시스템을 위한 많은 빌딩 블록 제공.
     * Notes on Music Information Retrieval: Steve Tjoa가 유지 관리하는 MIR 교육 자료 모음.
     * Fundamentals of Music Processing 강좌: Eran Egozy가 제공하는 많은 Python 코드 예제 포함.

GN⁺의 의견

     * 교육적 가치: FMP 노트북은 음악 처리 기초를 배우고자 하는 사람들에게 매우 유익한 자료임.
     * 실습 중심: 이론과 함께 제공되는 Python 코드 예제는 실습을 통해 이해를 높이는 데 도움을 줌.
     * 오픈 소스 활용: 다양한 오픈 소스 도구와 라이브러리를 활용하여 학습 자료를 풍부하게 제공함.
     * 기술적 요구사항: Python과 Jupyter 노트북에 대한 기본적인 이해가 필요함.
     * 업데이트 필요성: 정기적인 업데이트가 이루어지고 있으므로 최신 버전을 확인하는 것이 중요함.

        Hacker News 의견

     * 디지털 오디오 처리 알고리즘을 배울 수 있는 좋은 자료가 있는지에 대한 질문: 디지털 오디오 처리 알고리즘, 예를 들어 압축, 리버브 등에 대해 배울 수 있는 좋은 자료가 있는지에 대한 질문.
     * 오디오 DSP+ML에 대한 최고의 자료: 음악에 중점을 두고 있지만, 음성 환경 소리 등 다른 오디오에도 매우 관련성이 높은 최고의 자료 중 하나임.
     * 추가로 도움이 될 수 있는 자료: ThinkDSP도 도움이 될 수 있음.
     * 음악 지식이 없지만 프로그래밍을 좋아하고 오디오 및 사운드 생성에 대해 배우고 싶은 사람에게 좋은지에 대한 질문: 음악 지식이 없어도 다른 신호 유형의 맥락에서 도움이 됨.
     * 좋은 참고 자료: 좋은 자료임.
     * 감사 인사: 좋은 자료, 고맙습니다.
     * 추가 참고 자료: 콜롬비아 대학의 Dan Ellis의 웹페이지와 매우 훌륭한 librosa도 참고할 만함.
"
"https://news.hada.io/topic?id=15116","Caddy 2.8.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Caddy 2.8.0 릴리즈

     * ACME Renewal Information (ARI) 지원 : 인증서 갱신 정보를 관리할 수 있는 기능 추가
     * HTTP/3 프록시 백엔드 지원 : HTTP/3 프로토콜을 백엔드 서버와의 통신에 사용할 수 있게 됨
     * ZeroSSL 정책 변경에 따른 설정 수정 필요
          + 이제 ZeroSSL의 ACME 엔드포인트를 사용하려면 이메일 주소가 필요함
          + Caddyfile에 이메일 주소를 설정하면 ZeroSSL 발급자를 자동으로 추가 가능
          + JSON 설정 시 acme 발급자를 사용하고, ca 필드를 ZeroSSL의 ACME 서버 URL로 설정해야 함
     * lego_deprecated DNS 모듈 지원 중단 : 4년간 사용되지 않은 모듈 제거, caddy-dns 모듈 사용 권장
     * On-demand TLS 변경 : ask 옵션 폐기
          + JSON 설정에서 ask 옵션 대신 권한 모듈 사용
          + Caddyfile에는 권한 모듈 지원 추가
     * Admin API 변경 : Etag 헤더로 이동. 동시성 제어를 위한 Etag가 트레일러에서 헤더로 변경됨
     * 기본 인증 변경 : basicauth 디렉티브 이름 변경
          + basicauth를 basic_auth로, skip_log를 log_skip로 변경
          + 기존 이름은 경고 로그와 함께 계속 사용 가능
"
"https://news.hada.io/topic?id=15066","API의 HTTP를 HTTPS로 리디렉션하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      API의 HTTP를 HTTPS로 리디렉션하지 마세요

     * TL;DR : API 호출을 HTTP에서 HTTPS로 리디렉션하는 대신 실패를 표시할 것. HTTP를 완전 비활성화 하거나 명확한 HTTP 오류 응답을 반환하고 비암호화 연결로 전송된 API키를 취소할 것. 안타깝게도 현재 많은 유명 API 제공업체는 그렇게 하지 않음.

  배경

     * 웹 브라우저가 HTTP URL로 접속할 때, 서비스는 종종 해당 요청을 HTTPS 페이지로 리디렉션함.
     * 초기 HTTP 트래픽은 암호화되지 않아, 네트워크 중간자(MITM) 공격에 취약함.
     * HSTS(HTTP Strict Transport Security)와 같은 기술이 도입되어 보안이 강화됨.

  간단한 오타의 위험성

     * 작업 중 제3자 API와의 통합 과정에서 API 기본 URL을 https:// 대신 http:// 로 잘못 입력함.
     * Node.js의 fetch가 조용히 HTTPS로 리디렉션을 따름.
     * API 키가 평문으로 전송되어 보안 위험이 발생할 수 있었음.
     * 코드 리뷰 중 오류를 발견하여 문제를 해결함.

  빠른 실패 원칙

     * API가 HTTP 요청을 HTTPS로 리디렉션하면 오타를 쉽게 놓칠 수 있음.
     * 빠른 실패 원칙을 따르는 것이 좋음: 암호화되지 않은 API 호출은 명확하게 실패해야 함.
     * API 서버의 HTTP 인터페이스를 비활성화하거나, HTTP 요청에 대해 오류 메시지를 반환하는 것이 좋음.

  다른 API의 사례

     * 여러 유명 API가 HTTP 요청에 대해 403 오류 메시지를 반환하거나 HTTP 인터페이스를 비활성화함.
     * 그러나 일부 API는 여전히 HTTP에서 HTTPS로 리디렉션함.

  모범 사례의 필요성

     * 사용자 지향 애플리케이션에서는 HTTP에서 HTTPS로 리디렉션이 일반적임.
     * API의 경우, HTTP에서 HTTPS로 리디렉션하는 것이 오히려 해로울 수 있음.
     * OWASP와 같은 보안 프로젝트에서 API에 대한 명확한 지침이 필요함.

  결론

     * API는 HTTP에서 HTTPS로 리디렉션하는 대신, 암호화되지 않은 요청을 명확하게 실패하게 해야 함.
     * API 키가 암호화되지 않은 연결을 통해 전송되면 즉시 취소해야 함.
     * API 보안 모범 사례를 업데이트하여 명확한 지침을 제공할 필요가 있음.

GN⁺의 의견

     * 보안 강화 필요성: API 보안은 매우 중요하며, HTTP에서 HTTPS로의 리디렉션은 보안 취약점을 초래할 수 있음.
     * 빠른 실패 원칙: 개발 초기 단계에서 오류를 발견하고 수정할 수 있도록 빠른 실패 원칙을 따르는 것이 중요함.
     * 모범 사례 업데이트: OWASP와 같은 보안 프로젝트에서 API 보안에 대한 명확한 지침을 제공해야 함.
     * 자동화된 키 취소: 암호화되지 않은 연결을 통해 전송된 API 키는 자동으로 취소되어야 함.
     * 다른 API의 사례 참고: 다른 API의 보안 사례를 참고하여 자신의 API 보안을 강화할 필요가 있음.

   법령으로 규제해야 할 영역인 것 같네요.
   일단, 메모... API 에서 https 리다이렉션 금지

   기술적으로는 맞는 내용이지만
   대부분 기업 클라이언트들은 보안사항으로 http 접근시 무조건 https로 리디렉션을 보내도록 지침이 되어있습니다.
   또한 자기들 사이트 이용하는 고객들에게 오류화면을 보이는 것 자체를 꺼리는 지라 자체 서비스를 하는 곳이 아니면 납품하는 입장에선 먼나라 이야기 랄까요..

     작업 중 제3자 API와의 통합 과정에서 API 기본 URL을 ""http://"";; 대신 ""https://""로 잘못 입력함.
     http <-> https 가 바뀐 것 같네요.

   헉 AI가 이런 실수를 ㅎㅎ 수정해두었습니다.

        Hacker News 의견

     * OpenAI API가 HTTP 요청에 대해 403 에러를 반환하도록 업데이트되었음.
     * Stack Exchange API는 HTTP로 전송된 API 키를 취소하고 에러 메시지를 반환하는 방식이 좋음.
     * HTTP에서 HTTPS로 리디렉션 설정을 자동으로 하지 않도록 주의해야 함.
     * cURL의 기본 설정이 자동 리디렉션을 하지 않는 것이 의도적이며 좋은 기본값임.
     * HTTP 접근을 차단하고 HTTPS만 제공하는 것이 중요함.
     * ""Provider B""가 MITM 공격이 프로그램 범위 밖이라고 응답한 것이 놀라움.
     * HTTP 스니핑이 MITM 공격의 일종인지에 대한 의문이 있음.
     * HTTPS와 SVCB DNS 레코드가 시간이 지나면서 전통적인 HTTP 서버 리디렉션을 대체할 수 있기를 바람.
     * API 제공자들이 과거의 HTTP 접근 로그를 확인하고, 평문 HTTP 사용이 얼마나 널리 퍼져 있는지 점검해야 함.
     * 많은 API가 자동 HTTPS 리디렉션을 기본 규칙으로 설정하는 웹 애플리케이션 방화벽 뒤에 호스팅되어 있음.
     * API가 HTTP에서 HTTPS로 자동 리디렉션하지 않아야 하며, 클라이언트 라이브러리도 기본적으로 리디렉션을 따르지 않아야 함.
     * HTTP에서 HTTPS로 리디렉션을 설정하는 것이 장기적으로 트래픽을 줄이는 데 도움이 됨.
     * 인프라에서 URL 오타로 인한 문제를 빠르게 해결하려고 리디렉션을 설정하는 경우가 많음.
"
"https://news.hada.io/topic?id=15047","Wikimedia Enterprise - 검색엔진/LLM/딥러닝을 위한 기업용 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Wikimedia Enterprise - 검색엔진/LLM/딥러닝을 위한 기업용 API

     * Wikipedia 를 운영하는 Wikimedia 재단에서 제공하는 기업용 API들
     * Snapshot API
          + 매일/매달 업데이트 되는 위미키미어 프로젝트의 내용이 포합된 압축 파일을 다운로드 가능
          + 특정 프로젝트 및 언어 버전에 따라 스냅샷 구성
          + 월간 스냅샷은 계정만 있다면 항상 무료. 일간 스냅샷은 Gb당 $5
     * On-Demand API
          + 특정 아티클의 최신 버전 가져오기
          + 스냅샷 데이터의 최신 버전 보강을 위해 사용
          + 위키피디아의 Infobox 컨텐츠랑 아티클 섹션을 JSON으로 이용 가능
          + 계정 있을시 1만 리퀘스트까지 무료. 리퀘스트당 $0.01
     * Realtime API
          + 위키피디어를 포함한 모든 위키미디어 프로젝트의 변경사항을 스트리밍으로 받기
          + 시간당 배치도 가능
          + 실시간 수정이 중요한 긴급 이벤트에 관해 모든 업데이트 수신. 커뮤니티가 큐레이션한 Visibility 변경사항도 포함
          + 년간 $100K 부터 시작
"
"https://news.hada.io/topic?id=15088","Email.ML - 미니멀한 임시 이메일 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Email.ML - 미니멀한 임시 이메일 서비스

     * 1시간 동안만 사용가능한 임시 이메일 주소를 발급해주는 서비스
     * 아무런 개인정보 노출없이 임시로 이용 가능
     * 3가지 도메인 선택 가능 : Email.ml, Hele.win, Uxin.tech
     * 수신되는 이메일에 광고가 덧붙여짐
     * 100% Cloudflare 네트워크 상에서 실행되어 빠름(Cloudflare Email Workers를 이용)

   ruu가 개발 중단이 되고, 라엘리안 무브먼트껀 찝찝했는데 좋네요.

   서비스보다도 .ml 도메인이 눈에 띄네요

   오.. 회원가입에 악용되지는 않을까요?

   그런이유로 국내 사이트는 네이버 이메일만 사용할 수 있도록 해둔 곳이 많더라구요

   깃허브가 중국 개발자로 넘어가는군요.
"
"https://news.hada.io/topic?id=15093","데이터 없이도 데이터베이스가 되는 DuckDB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       데이터 없이도 데이터베이스가 되는 DuckDB

     * DuckDB는 데이터가 실제로 데이터베이스에 내부적으로 저장하지 않아도 데이터베이스처럼 작동할 수 있음
     * 데이터는 별도의 저장소에 저장되고, 데이터베이스는 이를 참조하는 방식으로 동작
     * 데이터베이스 파일에는 실제 데이터를 포함하지 않고, 데이터를 어떻게 처리할지에 대한 지침만 포함함

  예시: 로보택시 서비스

     * 상황 설명: 로보택시 서비스에서 매일 생성되는 데이터를 분석가와 공유해야 하는 상황.
     * 문제점: 데이터가 너무 커서 이메일로 보내기 어렵고, 링크로 공유하기도 복잡함.
     * 해결책: DuckDB를 사용하여 데이터베이스 파일을 생성하고 이를 공유함.

# 데이터베이스 생성
import duckdb
db = duckdb.connect(""weird_rides.db"")
db.sql(""""""
    CREATE VIEW weird_rides
    AS SELECT pickup_at, dropoff_at, trip_distance, total_amount
    FROM 's3://robotaxi-inc/daily-ride-data/*.parquet'
    WHERE fare_amount > 100 AND trip_distance < 10.0
"""""")
db.close()

     * 결과: weird_rides.db 파일은 실제 데이터를 포함하지 않지만, 데이터를 어떻게 처리할지에 대한 지침을 포함함.
     * 공유 방법: 이 파일을 블롭 저장소에 업로드하고 링크를 공유함.

  데이터 접근

     * 데이터베이스 연결: 수신자는 로컬 DuckDB 세션을 시작하고 공유된 데이터베이스 파일에 연결함.

# 데이터베이스 연결
import duckdb
conn = duckdb.connect()
conn.sql(""""""
    ATTACH 's3://robotaxi-inc/virtual-datasets/weird_rides.db'
    AS rides_db (READ_ONLY)
"""""")
conn.sql(""SELECT * FROM rides_db.weird_rides LIMIT 5"")

     * 데이터 다운로드: 쿼리를 실행할 때 필요한 데이터만 S3에서 다운로드함.
     * 효율적인 데이터 처리: 필요한 열만 읽고, 필터를 적용하여 불필요한 데이터를 제외함.

  DuckDB의 장점

     * 변경에 강함: 데이터 형식, 파티셔닝 전략, 스키마 변경에도 수신자의 데이터 접근 방식은 변하지 않음.
     * 데이터 클라우드 브라우저: DuckDB를 사용하면 관계형 데이터셋을 하이퍼링크를 통해 쉽게 접근할 수 있음.

   오 라지 데이터에서 스몰 데이터의 카탈로그와 정확한 경로만 있으면 서버 리소스를 조금 아낄 수도 있겠네요 ㅎㅎ

        Hacker News 의견

     * DuckDB와 duckdb-wasm을 사용하여 폼 빌더 SaaS의 응답 시트를 효율적으로 처리함: 응답 데이터를 S3에 저장하고, 클라이언트에서 duckdb-wasm을 통해 로컬 DB로 쿼리하여 네트워크와 메모리 사용을 최적화함.
     * MotherDuck 소개: 서버리스 관리형 DuckDB 데이터 웨어하우스로, 무복사 클론, 보안 공유, 클라우드 데이터와의 하이브리드 모드 등을 제공함.
     * DuckDB를 qStudio SQL 에디터에 통합: 다양한 데이터베이스와의 조인을 지원하며, DuckDB를 시작하기 좋은 IDE로 추천함.
     * S3 링크를 통해 데이터 제공 제안: 중간 데이터베이스와 뷰의 가치를 의문시하며, 데이터 분석가가 원시 데이터를 직접 다루는 것이 더 효율적일 수 있다고 주장함.
     * Data Tap 소개: Lambda 함수에 DuckDB를 내장하여 데이터를 S3에 Parquet 형식으로 저장하는 솔루션으로, 비용 효율성과 확장성을 강조함.
     * 데이터 접근 방식에 대한 혼란: 데이터 엔지니어는 사전 집계를 피하고, 데이터 분석가는 원시 데이터 접근을 선호하는 경향이 있다고 설명함.
     * 대부분의 데이터베이스가 데이터를 포함하지 않는다는 주장에 대한 반응: 이 주장이 과장되었다고 생각함.
     * SQL 쿼리를 동료에게 이메일로 보내는 방법 제안: 바이너리 데이터베이스 파일의 장점에 대해 의문을 제기함.
     * 새로운 SQL 도구의 유용성에 대한 의문: 영구적인 데이터 웨어하우스에 데이터를 저장하고 필요한 뷰를 생성하는 것이 더 적절하다고 생각함.
     * Presto/Trino와의 유사성: DuckDB의 접근 방식이 Presto/Trino와 유사하다고 느끼는 의견.
"
"https://news.hada.io/topic?id=15127","과학적으로 페타바이트 데이터를 분석하는 ROOT","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       과학적으로 페타바이트 데이터를 분석하는 ROOT

√-1ROOT: 대규모 데이터 분석 및 시각화를 위한 소프트웨어

  ROOT 개요

     * ROOT는 대규모 데이터의 통계적 분석과 시각화를 가능하게 하는 고성능 소프트웨어임.
     * **C++**로 주로 작성되었으며, Linux, macOS, Windows에서 사용 가능함.
     * 오픈 소스 소프트웨어로 자유롭게 사용, 수정, 기여 가능함.

  주요 기능

     * 빠른 프로토타이핑을 위한 강력한 C++ 인터프리터 제공.
     * Python과의 원활한 통합을 통해 Python과 C++ 간의 동적 바인딩 가능.
     * Jupyter 노트북에서도 사용 가능함.

  RNTuple: 현재와 미래

     * RNTuple은 TTree의 후속으로 개발 중이며, Run 4에서 사용될 예정임.
     * 새로운 시스템의 필요성과 현재 상태, 첫 프로덕션 릴리스 전 작업 내용, 그리고 향후 계획에 대해 설명함.
     * 이미 RNTuple을 시도해볼 수 있는 방법 제공.

  웹 기반 캔버스 기본 설정

     * 웹 기반 TCanvas 구현이 ROOT 마스터 버전에서 기본 설정으로 변경됨.
     * 2017년부터 ROOT에 존재했으며, 웹 기반 TBrowser에서도 사용됨.

  새로운 클래스 TScatter

     * 새로운 클래스 TScatter 소개.

  ROOT 개발 환경 개선

     * QtCreator를 사용하여 ROOT 개발 및 디버깅 환경을 개선할 수 있는 방법 제안.
     * Eclipse IDE에서 CERN ROOT 스크립트 및 ROOT 기반 프로그램 디버깅 가능.

  최신 릴리스

     * Release 6.32/00 - 2024년 5월 28일
     * Release 6.30.06 - 2024년 4월 3일
     * Release 6.30.04 - 2024년 1월 31일
     * Release 6.30/02 - 2023년 11월 28일
     * Release 6.30/00 - 2023년 11월 7일

GN⁺의 의견

     * ROOT는 대규모 데이터 분석에 최적화된 도구로, 특히 과학 연구에서 유용함.
     * Python과의 통합 덕분에 C++에 익숙하지 않은 사용자도 쉽게 접근 가능함.
     * 웹 기반 캔버스 기본 설정은 사용자 경험을 크게 향상시킬 수 있음.
     * RNTuple의 도입은 성능 및 기능 향상을 기대할 수 있음.
     * QtCreator와 Eclipse IDE를 활용한 개발 환경 개선은 생산성을 높이는 데 도움이 됨.

        Hacker News 의견

     * 과거의 추억: 입자 물리학에서 ROOT를 많이 사용했음. 기술 부채와 특이점이 많았지만, 히스토그램이나 구조화된 데이터 처리 등 특정 작업은 ROOT가 더 쉬웠음. 객체 지향 API가 직관적이었음.
     * 변화의 과정: 5년 전에 떠났지만, ROOT는 변화 중이었음. CINT 인터프리터를 제거하고 클랭 기반 코드로 전환했으며, 이제 Jupyter에서 C++ 또는 Python으로 분석 가능함.
     * 새로운 분석 도구: 새로운 분석에는 ROOT 대신 uproot 같은 더 사용자 친화적인 도구를 사용하는 것이 좋음. 일부는 레거시 워크플로우 때문에 ROOT를 계속 사용할 수 있음.
     * 흥미로운 404 페이지: ROOT의 404 페이지가 재미있음. (방 404와는 무관함)
     * 과학적 발견: 대규모 소프트웨어 프로젝트가 과학적 발견에 사용되는 것이 멋짐. 예를 들어, LIGO에서 중력파를 GStreamer로 발견했음.
     * ROOT의 문제점: ROOT는 많은 기능을 가지고 있지만, API 설계가 좋지 않고 라이브러리와 프로그램 간의 분리가 부족함. ROOT 6에서 일부 문제를 해결하려 했지만 시간이 걸림.
     * 입출력 형식 문제: 오래된 ROOT의 입출력 형식이 잘 문서화되지 않았음. 이제는 groot와 uproot 덕분에 ROOT 데이터를 쉽게 읽고 쓸 수 있음.
     * ROOT 6의 감사: 매일 ROOT 6 이상의 버전을 사용하게 되어 감사함.
     * 디버깅의 추억: 컴퓨터 과학 배경이 없는 뛰어난 물리학자들이 작성한 코드를 밤새 디버깅했던 기억이 떠오름.
     * 입자 물리학의 중추: ROOT는 실험 입자 물리학에서 많은 작업의 중추이지만, 새로운 대학원생들에게는 악몽임.
     * Cling 사용: Jupyter 노트북에서 C++ 인터프리터 Cling과 Xeus를 사용함. Python 3보다 훨씬 빠름. Cling을 주로 C++로 컴파일되는 언어의 JIT로 사용함.
     * 소스 코드: ROOT 프로젝트의 소스 코드는 GitHub에서 확인 가능함.
     * 디버깅 악몽: CERN ROOT 스크립트와 프로그램을 Eclipse IDE에서 디버깅하는 것은 악몽이었음. 하지만 끔찍한 환경에서도 놀라운 것을 만들 수 있다는 것을 보여줌.
"
"https://news.hada.io/topic?id=15179","리만 가설에 대한 주목할 만한 발전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          리만 가설에 대한 주목할 만한 발전

     * Guth와 Maynard가 리만 제타 함수의 영점에 대한 Ingham의 고전적인 1940년 상한을 처음으로 상당히 개선함
     * 𝑁(σ,𝑇)를 실수부가 적어도 σ이고 허수부가 크기가 최대 𝑇인 리만 제타 함수의 영점 개수라고 정의함
     * 리만 가설은 σ>1/2에 대해 𝑁(σ,𝑇)가 0이 된다고 말하지만, 이를 무조건적으로 증명할 수는 없음
     * 대신 영밀도 추정, 즉 𝑁(σ,𝑇)에 대한 비자명한 상한을 증명할 수 있음
     * σ=3/4가 핵심 값이며, Ingham은 1940년에 𝑁(3/4,𝑇)≪𝑇^(3/5+𝑜(1))라는 상한을 얻음
     * 이후 80년 동안 이 상한에 대한 유일한 개선은 𝑜(1) 오차에 대한 작은 수정뿐이었음
     * 이는 해석적 정수론에서 많은 것들을 제한해 왔음 (예: [𝑥,𝑥+𝑥^θ] 형태의 거의 모든 짧은 구간에서 좋은 소수 정리를 얻으려면 θ>2/3로 제한되었음)

Guth와 Maynard의 발전:

     * Ingham 상한을 3/5=0.6에서 13/25=0.52로 개선함
     * 이는 해석적 정수론의 많은 부분에 해당하는 개선으로 이어짐 (예: 거의 모든 짧은 구간에서 소수 정리를 증명할 수 있는 범위가 θ>2/3에서 θ>12/25로 개선됨)
     * 논증은 주로 푸리에 해석적인 성격을 띰
     * 첫 번째 단계는 표준적이며, 리만 가설를 깨려고 시도했던 많은 해석적 정수론 학자들에게 익숙할 것임
     * 그러나 그들은 많은 영리하고 예상치 못한 조작을 함 (예: 핵심 위상 행렬을 6제곱하여 제어하고, 복잡한 푸리에 적분을 정상 위상을 사용하여 단순화하지 않음)

배경지식:

     * 리만 가설은 해석적 정수론에서 가장 유명한 미해결 문제 중 하나임
     * 리만 제타 함수는 소수와 깊은 관련이 있는 함수로, 그 영점의 분포를 이해하는 것이 중요함
     * 디리클레 급수는 리만 제타 함수를 일반화한 함수들의 모임임

GN⁺의 의견

     * 리만 가설: 리만 가설은 수학에서 가장 중요한 미해결 문제 중 하나로, 이와 관련된 연구는 항상 큰 관심을 받음.
     * 분석적 수론: 이 연구는 분석적 수론의 여러 문제를 해결하는 데 중요한 진전을 이룸.
     * 기술적 접근: Fourier 분석과 디리클레 급수의 특수한 성질을 활용한 독창적인 접근이 돋보임.
     * 실용적 영향: 소수 분포와 관련된 문제를 해결하는 데 실질적인 도움을 줄 수 있음.
     * 추가 연구 필요: 아직 완전한 해결은 아니므로, 추가 연구와 검증이 필요함.

        Hacker News 의견

     * Zeta 함수 시각화: 자바스크립트로 만든 Zeta 함수 시각화 도구를 소개하며, 무한히 확대 가능하고 파라미터를 조정할 수 있음. 이는 가설이 왜 참일 가능성이 높은지 이해하는 데 도움이 될 수 있음.
     * Numberphile의 James Maynard: James Maynard가 Numberphile에 자주 출연하므로, 이 논문의 저자 중 한 명의 수학을 쉽게 접하고 싶다면 추천함.
     * Riemann 가설 소개 영상: STEM 학위를 가진 사람도 접근할 수 있는 Riemann 가설 소개 영상 시리즈를 추천함. 이 영상 덕분에 복잡한 부분도 이해할 수 있었음.
     * Terence Tao의 요약: Terence Tao가 자신의 시도를 언급하며 다른 사람의 주장을 요약하는 상황을 상상해 봄. 이는 Fourier 분석에 기반한 논증임.
     * 2018년 제안된 증명: 2018년에 제안된 증명의 잠재적 중요성에 대한 유용한 입문 자료를 발견함.
     * Riemann 가설의 의미: Riemann 가설이 Zeta 함수의 모든 영점이 복소 평면의 한 선에 있다는 것이라고 이해함. 이는 공학적으로 충분히 ""좋은"" 증명임.
     * 이해는 못하지만 기쁨: 내용은 이해하지 못하지만, 사람들이 열광하는 것을 보고 기쁨을 느낌.
     * ELI5 요청: 수학자가 아닌 사람을 위한 쉬운 설명을 요청함.
     * RH에 의존하는 정리들: RH를 배제하는 중간 논리에 대한 의견을 묻고, 건설주의자들이 이를 거부하는 이유를 설명함.
     * 좋은 타이밍: Matt Haig의 ""The Humans""을 듣고 있는 중인데, 이야기는 누군가 Riemann 가설을 증명한 후 시작됨.
"
"https://news.hada.io/topic?id=15050","Flipper Zero로 제어하는 Taylor Swift Eras Tour 손목밴드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Flipper Zero로 제어하는 Taylor Swift Eras Tour 손목밴드

테일러 스위프트 에라스 투어 팔찌 제어하기

  테일러 스위프트 에라스 투어 팔찌

     * 많은 대형 콘서트에서 명령에 따라 빛나는 팔찌 사용
     * PixMob이라는 회사가 이러한 팔찌 제작
     * 현재 테일러 스위프트의 에라스 투어에서 사용 중

  팔찌의 구조

     * 팔찌는 재사용 가능하도록 설계됨
     * 두 개의 배터리와 작은 회로 기판 포함
     * 회로 기판에는 두 개의 RGB LED, 마이크로컨트롤러, EEPROM, 적외선 다이오드 포함

  작동 원리

     * PixMob은 큰 적외선 리모컨을 사용해 팔찌에 명령 전송
     * 색상, 페이드, 플래시 등의 효과를 생성
     * 적외선 프로젝터를 이동시켜 경기장 전체에 효과를 전달

  리버스 엔지니어링

     * GitHub 저장소에서 리버스 엔지니어링 정보 제공
     * Flipper Zero를 사용해 팔찌 제어 가능
     * Flipper Zero의 적외선 기능을 활용해 팔찌를 제어하는 프로젝트 존재

  GN⁺의 의견

     * 팔찌의 활용성: 대형 콘서트에서 시각적 효과를 극대화하는 데 유용함.
     * 리버스 엔지니어링의 가치: 기술을 이해하고 새로운 활용 방법을 찾는 데 도움.
     * Flipper Zero의 가능성: 다양한 적외선 장치를 제어할 수 있는 잠재력 있음.
     * 보안 고려사항: 리버스 엔지니어링이 악용될 가능성도 있으므로 보안 강화 필요.
     * 기술의 단순함: 간단한 기술로도 큰 효과를 낼 수 있다는 점에서 흥미로움.

        Hacker News 의견

     * 간단한 해결책에 감탄: 문제를 복잡하게 만들기보다 IR 램프를 사용한 간단한 해결책이 훌륭함.
     * 복잡한 추측: 테일러 스위프트 쇼에서 복잡한 방법을 추측했지만 실제로는 간단한 해결책이었음.
     * 기술 분석: 쇼 중에 팔찌를 분해해봤는데, 기술 적용이 훌륭했지만 전자 폐기물 문제를 생각하게 됨.
     * 지속 가능성: 지속 가능성에 대한 논의가 있었고, 경험은 좋았지만 최선은 아님.
     * 블로그 개선 제안: 회로 기판의 텍스트를 블로그에 추가하면 좋겠다는 제안.
     * IR 서치라이트 영상: 고출력 IR 서치라이트가 군중에게 색을 투사하는 영상 공유.
     * 전자 폐기물 문제: 쇼 후 팔찌가 버려져 전자 폐기물이 많이 발생할 것 같음.
     * 스마트폰 앱 아이디어: GPS와 앱을 이용한 복잡한 아이디어가 있었지만 개발하지 않음.
     * 소비자용 제품 문의: 비슷한 제품을 소비자용으로 구매할 수 있는지 문의.
     * IR 램프 안전성: 고출력 IR 램프가 눈에 안전한지 궁금함.
     * CEO의 겸손한 발언: Pixmob의 CEO가 팔찌가 단순하지만 그것이 좋다고 언급.
"
"https://news.hada.io/topic?id=15051",""auth" 대신 "permissions"와 "login"을 사용합시다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ""auth"" 대신 ""permissions""와 ""login""을 사용합시다

     * ""auth""라는 용어는 인증(authentication)과 권한 부여(authorization) 두 가지 의미를 가짐
     * 이로 인해 라이브러리나 패키지 이름에서 혼란이 발생함
     * ""authn""과 ""authz""라는 용어는 명확하지 않고 이해하기 어려움

인증과 권한 부여의 차이

     * 인증(authentication): 사용자가 누구인지 확인하는 과정
     * 권한 부여(authorization): 사용자가 무엇을 할 수 있는지 결정하는 과정
     * 두 개념은 서로 다르며, 하나를 해결한다고 다른 문제가 해결되지 않음

""permissions""와 ""login"" 사용 제안

     * 인증을 ""login""으로, 권한 부여를 ""permissions""로 명확히 구분할 것을 제안함
     * ""login""은 명사와 동사 형태로 사용 가능함
          + 명사: 시스템에 접근하기 위해 입력하는 정보
          + 동사: 시스템을 사용하기 위해 로그인하는 행위
     * ""permissions""는 명사 형태로 사용하며, 동사 형태로는 ""check permissions""를 사용함

명확한 용어 사용의 장점

     * 소프트웨어 엔지니어 외의 다른 분야 사람들도 쉽게 이해할 수 있음
     * 더 나은 추상화를 가능하게 함
     * 인증과 권한 부여를 별도의 모듈로 분리하여 설계할 수 있음

GN⁺의 의견

     * 명확한 용어 사용의 중요성: 용어가 명확하면 커뮤니케이션이 원활해지고, 오해를 줄일 수 있음.
     * 추상화의 이점: 인증과 권한 부여를 분리하면 시스템 설계가 더 유연해지고 유지보수가 쉬워짐.
     * 다른 용어의 사용 예시: ""login""과 ""permissions"" 외에도 ""access control"" 같은 용어도 고려해볼 만함.
     * 기술 도입 시 고려사항: 새로운 용어를 도입할 때는 팀 내에서 충분한 논의와 합의가 필요함.
     * 관련 프로젝트 추천: 인증과 권한 부여를 분리한 대표적인 프로젝트로는 OAuth와 OpenID Connect가 있음.

   개발자끼리는 auth 대신 authn, authz를, 사용자와 접점이 있는 문서나 컨트롤러/파사드에 login, permission을 사용하는건 동의할 만 합니다. 다만 authn, authz까지 없애자는 건 그럴 필요가 있나 싶습니다

   본문에 지적하듯이 auth가 인증과 권한을 중의적으로 사용되어 혼란스럽긴 했었죠. 순순한 개발자 외 다른 분야와 comm을 위해 좀 더 일반적인 용어를 통해 분리하는 건 바람직한 시도 같습니다.

   Authentication 과 Authorization 둘 다 Auth 로 줄일 수 있는게 문제라면,
   본문에서 언급됐던 것 같이 Authn, Authz 로 충분할거 같은데 말이죠...
   이게 명확하지 않다 생각했다면, Authenty, Authory 까지 좀 더 풀어도 괜찮을거구요.

   권한 시스템은 또 퍼미션 형태가 있고 acl 형태가 있고 또 그러면 어찌 구분하려고..?
   뭔가 억지 같은데...

   아마 비개발팀원과의 소통비용을 줄이려는 시도 아닌가 싶습니다만, 살짝 투머치네요.

   일부러 둘을 합쳐서 auth라고 하는 거 아닌가요?

   Authentication 과 authorization 이 있는데 왜 굳이...

        Hacker News 의견

     * ""Authorize""와 ""Authenticate""는 중세 시대부터 사용된 훌륭한 단어임. 두 단어의 의미는 크게 변하지 않았음.
     * 이 두 단어는 암호 시스템에서 중요한 차이를 가짐. 혼동을 줄이기 위해 단어를 바꾸는 것은 도움이 되지 않을 것 같음.
     * ""auth""라는 이름 때문에 혼란이 생긴다는 주장은 설득력이 부족함. 단어를 바꾸는 것이 문제를 해결하지 못할 것 같음.
     * ""authn""과 ""authz""라는 약어를 사용하는 것이 좋음. 하지만 긴 단어를 사용하는 것도 괜찮음.
     * ""Identity""와 ""Access"" Management (IAM)는 표준 용어임. 개인적으로 ""authnz""라는 용어를 선호함.
     * ""Login""은 토큰이나 키 기반 인증을 포함하지 않음. 서비스 계정은 로그인하지 않지만 인증과 권한 부여가 필요함.
     * Authn과 Authz의 구분이 명확하지 않음. 때로는 명확한 용어보다 멋진 용어를 더 좋아하는 것 같음.
     * IAM 시스템에서 ""auth""라는 용어를 사용하는 데 문제가 없었음. 더 구체적인 표현이 필요할 때는 적절한 구를 사용하면 됨.
     * ""login""과 ""permissions""는 시스템의 전체 의미와 복잡성을 포착하지 못함. 인증은 로그인보다 더 많은 의미를 가짐.
     * 인증과 권한 부여는 밀접하게 관련되어 있음. 인증 없이 권한 부여가 불가능함.
     * 로그인은 인증의 대체 용어로 적합하지 않음. 인증에는 로그인이 필요하지 않은 경우도 있음.
     * ""auth""는 인증과 권한 부여를 모두 의미할 수 있음. 두 개념이 자주 함께 사용되기 때문임.
     * 인증과 권한 부여는 IT와 정보 보안에서 표준 용어임. 혼란을 피하려면 완전한 단어를 사용하는 것이 좋음.
     * ""authn""과 ""authz""는 기술적인 사람들 사이에서 충분히 사용 가능함. 일반 대중에게는 ""login""과 ""permissions""를 사용하는 것이 좋음.
     * 실생활에서도 유사한 개념이 존재함. 예를 들어, 작업 배지는 신원을 확인하고 접근 권한을 부여함.
     * 권한 부여와 권한은 동일하지 않음. 권한은 특정 사용자에게 할당되지 않은 권리나 특권임.
     * 권한 부여는 두 가지 의미를 가질 수 있음. 사용자가 특정 작업을 수행할 수 있는 권한을 부여하는 과정과 이를 확인하는 과정임.
     * ""access control""은 런타임 접근 제어를 의미할 수 있음. 애플리케이션이 사용자 인증 후 수행하는 작업임.
     * ""authN""과 ""authZ""는 충분히 적절하고 잘 이해됨. 권한 부여는 항상 권한과 사용자의 연결과 관련됨.
"
"https://news.hada.io/topic?id=15143","아인슈타인, 괴델과 함께 집에 가기 위해 사무실에 출근","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     아인슈타인, 괴델과 함께 집에 가기 위해 사무실에 출근

발걸음

  아인슈타인과 괴델의 일상

     * 아인슈타인은 매일 오전 10시에서 11시 사이에 괴델과 함께 연구소로 걸어갔음.
     * 오후 1시나 2시에 다시 집으로 걸어오며 정치, 철학, 물리학에 대해 논의했음.
     * 전기 작가 Palle Yourgrau에 따르면, 이 산책이 아인슈타인의 하루 일과의 30%를 차지했음.

  아인슈타인의 유명세

     * 아인슈타인의 비서 헬렌 두카스는 1946년에 한 운전자가 아인슈타인을 알아보고 나무에 부딪힌 사건을 기록했음.
     * 괴델은 자신의 유명세가 부담스럽지 않다고 말했음.
     * 괴델은 아인슈타인처럼 모든 아이들이 알아볼 정도로 유명해지면 부담이 시작된다고 언급했음.

GN⁺의 의견

     * 역사적 배경: 아인슈타인과 괴델은 20세기 과학과 철학에 큰 영향을 미친 인물들임. 이들의 일상적인 대화는 그들의 지적 교류를 보여줌.
     * 흥미로운 점: 두 천재가 일상적인 산책을 통해 깊이 있는 대화를 나눴다는 점이 흥미로움. 이는 현대의 연구자들에게도 영감을 줄 수 있음.
     * 비판적 시각: 아인슈타인의 유명세가 그의 일상에 미친 영향을 보면, 과학자들이 대중의 관심을 받는 것이 항상 긍정적인 것은 아님.
     * 관련 제품: 이와 비슷한 지적 교류를 촉진하는 현대의 플랫폼으로는 GitHub, Stack Overflow 등이 있음. 이들 플랫폼은 전 세계의 개발자들이 지식을 공유하고 협력할 수 있게 함.
     * 기술 도입 고려사항: 새로운 기술이나 협업 도구를 도입할 때는 그 도구가 실제로 팀의 생산성을 높일 수 있는지, 그리고 사용하기 쉬운지 고려해야 함.

        Hacker News 의견

     * 첫 번째 댓글: 작은 기술 회사에서 리눅스 커널 프로그래밍과 임베디드 작업을 하며 멘토와 함께 걸으며 많은 것을 배웠음. 프로그래밍과 인생에 대해 많은 교훈을 얻었음.
     * 두 번째 댓글: 멘토와 산책할 기회를 원하지만, 현재의 관리자들은 자신을 천재로 생각하는 사람들뿐임. 목요일 밤에 맥주를 마시는 것이 최선임.
     * 세 번째 댓글: 재택근무 반대 선전이 과도해지고 있음.
     * 네 번째 댓글: 오펜하이머가 다양한 재능 있는 사람들을 초대하여 원하는 연구를 하게 했던 시기였음. 주로 과학자들이었지만, T. S. 엘리엇도 포함되었음.
     * 다섯 번째 댓글: 매일 함께 캠퍼스로 걸어가고, 두 시간 정도 머물다가 다시 집으로 걸어가는 일상이었음.
     * 여섯 번째 댓글: 산책을 통해 생각을 나누는 것이 효과적임. 산책 중에 문제를 해결하는 경우가 많음. 걷는 활동이 뇌를 자극하여 생각을 정리하게 함.
     * 일곱 번째 댓글: 로스 알라모스에서 Gian Carlo Rota와 함께 산책하며 서브웨이와 배스킨라빈스를 방문했던 경험이 있음.
     * 여덟 번째 댓글: 4일 근무제가 아닌 10시간 근무제를 원함.
     * 아홉 번째 댓글: 괴델이나 아인슈타인과 함께 걸으며 30%의 시간을 보내는 것도 괜찮을 것 같음. 급여가 70%로 줄어들어도 상관없음.
     * 열 번째 댓글: 두 사람 모두 독일어를 사용했으며, 아인슈타인은 영어로 완전히 전환하지 않았음. 예를 들어, 연구를 독일어로만 발표했음.
"
"https://news.hada.io/topic?id=15138","소파의 비유소파의 비유

소파 이야기

  소파의 상태

     * 25년 전, 어두운 갈색 가죽 소파를 구입했음.
     * 시간이 지나면서 쿠션이 낡아져 교체가 필요해졌음.
     * 새로운 소파를 사는 대신, 지역 소규모 업체에서 쿠션을 교체했음.

  새로운 소파의 문제

     * 최근 15년 동안 제작된 소파는 품질이 낮음.
     * 저렴한 재료와 조립 방식으로 만들어져 내구성이 떨어짐.
     * 글로벌화와 저임금 노동, 세금 회피 등으로 인해 품질이 저하됨.

  Luxcious 소개

     * ""오래된 가구에 새 생명을 불어넣다""는 슬로건을 가진 가족 운영 업체임.
     * 위치는 다소 복잡하지만, 친절하고 능숙한 서비스를 제공함.
     * 쿠션 교체 비용은 1100 캐나다 달러로, 새로운 고품질 가죽 소파를 사는 것보다 경제적임.

  현대 자본주의와 생활형 비즈니스

     * 현대 자본주의는 소규모 가족 운영 비즈니스를 어렵게 만듦.
     * ""생활형 비즈니스""는 무한한 성장을 목표로 하지 않으며, 운영자에게 적절한 보상을 제공함.
     * 이러한 비즈니스가 더 많아지면 경제가 더 인간적이고 회복력이 강해질 것임.

GN⁺의 의견

     * 생활형 비즈니스의 가치: 소규모 가족 운영 비즈니스는 지역 경제에 긍정적인 영향을 미치며, 인간적인 면을 강조함.
     * 품질과 내구성: 저렴한 가구는 단기적으로 비용을 절감할 수 있지만, 장기적으로는 더 많은 비용이 들 수 있음.
     * 환경적 고려: 저품질 가구는 자주 교체해야 하므로 환경에 부정적인 영향을 미칠 수 있음.
     * 소비자 교육: 소비자들이 품질 좋은 가구를 선택할 수 있도록 교육이 필요함.
     * 정책적 지원: 생활형 비즈니스를 지원하는 정책이 필요하며, 이는 경제의 다양성과 회복력을 높일 수 있음.

        Hacker News 의견

     * 대기업의 존재 이유: 대기업은 예측 가능성을 제공함. 작은 사업체는 품질이 다양할 수 있음.
     * 정보의 빠른 전파: 정보가 빠르게 퍼지는 세상에서 작은 사업체는 수요를 감당하기 어려움.
     * 소파의 필요성: 소파는 단순하고 예측 가능한 것이 좋음.
     * 다른 문화의 소파 사용: 일부 문화에서는 소파를 사용하지 않음. 일본에서의 경험을 통해 바닥에 앉는 것을 선호하게 됨.
     * 지역 수리점의 가치: 지역 수리점을 이용하는 것이 중요함. 장인들과의 관계를 소중히 여김.
     * 최고의 소파 경험: Pottery Barn의 소파가 최고의 경험이었음. 현대 가구는 품질이 낮음.
     * 라이프스타일 비즈니스의 의미: 라이프스타일 비즈니스는 소유자나 직원의 생활 방식을 지원하는 작은 사업체를 의미함.
     * 규제의 필요성: 규제를 통해 라이프스타일 비즈니스를 지원하는 것이 중요함. 제품의 제작 과정을 이해하는 것이 필요함.
     * 소파 대여의 가능성: 소파를 판매하는 대신 대여하는 것이 더 지속 가능할 수 있음.
     * 가구 수리의 역사: 가구 수리는 항상 작은 사업체의 영역이었음. 라이프스타일 비즈니스와는 다름.
     * 가격 인식의 변화: 저렴한 대안이 시장에 나오면, 사람들이 고품질 제품에 대한 지불을 꺼리게 됨.
     * 소파 가격의 변화: 인플레이션을 고려하면, 과거와 현재의 소파 가격은 크게 변하지 않음.
     * 대기업의 가치 평가: 대기업은 규모가 커질수록 가치 평가에서 큰 이점을 가짐.
     * ""억 달러 아니면 실패"" 정신: 큰 성공의 낮은 확률이 안정적인 수익을 내는 사업보다 더 매력적으로 보임.
"
"https://news.hada.io/topic?id=15108","호박 일식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 호박 일식

블랙 로터스 랩스의 보고서 요약

  사건 개요

     * 사건 발생: 2023년 10월 25일부터 27일까지 72시간 동안, 하나의 인터넷 서비스 제공업체(ISP)에 속한 60만 개 이상의 소규모 사무실/가정용(SOHO) 라우터가 오프라인 상태가 됨.
     * 영향: 감염된 장치는 영구적으로 작동 불능 상태가 되었으며, 하드웨어 교체가 필요했음.
     * 주요 원인: ""Chalubo""라는 원격 접근 트로이 목마(RAT)가 주요 원인으로 확인됨.

  Chalubo 트로이 목마

     * 첫 발견: 2018년에 처음 발견됨.
     * 특징:
          + 디스크에서 모든 파일을 제거하고 메모리에서 실행됨.
          + 장치에 이미 존재하는 무작위 프로세스 이름을 사용함.
          + 명령 및 제어(C2) 서버와의 모든 통신을 암호화함.
     * 기능: DDoS 공격 수행, Lua 스크립트 실행 가능.

  감염 과정

     * 초기 접근: 약한 자격 증명 또는 노출된 관리 인터페이스를 악용했을 가능성이 높음.
     * 감염 단계:
          + 첫 번째 단계: ""get_scrpc"" bash 스크립트를 통해 초기 페이로드 서버에 접근.
          + 두 번째 단계: 추가 스크립트와 페이로드를 다운로드하고 실행함.
          + 주요 파일: /usr/bin/usb2rci, /tmp/.adiisu, /tmp/crrs 등.

  글로벌 감염 현황

     * 활동성: 2023년 11월부터 2024년 초까지 Chalubo 악성코드가 매우 활발하게 활동함.
     * 감염 IP 주소: 2023년 10월 30일 기준으로 33만 개 이상의 고유 IP 주소가 감염됨.

  결론

     * 특이점: 이번 공격은 특정 ASN에 국한되었으며, 60만 개 이상의 장치가 영향을 받음.
     * 공격 의도: 고의적인 펌웨어 업데이트를 통해 장치를 작동 불능 상태로 만듦.
     * 보안 권장 사항:
          + SOHO 라우터 관리 조직: 기본 비밀번호 사용 금지, 관리 인터페이스 보안 강화.
          + 일반 사용자: 라우터 정기 재부팅 및 보안 업데이트 설치.

  GN⁺의 의견

     * 흥미로운 점: 이번 사건은 단일 ISP에 국한되었으며, 대규모 하드웨어 교체가 필요했던 점에서 매우 이례적임.
     * 보안 강화 필요성: SOHO 라우터와 IoT 장치의 보안 강화가 시급함.
     * 기술적 교훈: 악성코드가 메모리에서만 실행되고, 통신을 암호화하는 등 탐지를 회피하는 기술이 발전하고 있음.
     * 대체 솔루션: 비슷한 기능을 제공하는 다른 보안 솔루션이나 프로젝트를 검토할 필요가 있음.
     * 도입 시 고려사항: 새로운 보안 기술 도입 시, 기존 시스템과의 호환성 및 관리의 용이성을 고려해야 함.

        Hacker News 의견

     * 펌웨어 문제: 펌웨어 문제로 인해 발생한 문제를 해결하기 위해 플래시 칩의 쓰기 가능 라인을 차단하고 일일 재부팅을 예약하는 꿈을 가짐.
     * 위성 수신기 경험: 20년 전 위성 수신기에서 했던 것처럼 인터넷에 연결된 모든 장치를 전자 대책에 취약한 것으로 간주해야 함.
     * 업데이트 모니터링: 장비 업데이트를 모니터링하고 업데이트가 발생하면 알림을 주는 시스템 필요.
     * 기사 내용 부족: 기사가 흥미로운 세부 사항이 부족함. 라우터가 기본적으로 열려 있는 포트와 서비스를 가지고 있는지 궁금함.
     * 펌웨어 비교: 다른 펌웨어 버전을 비교할 수 있는지에 대한 의문.
     * OpenWrt 사용: 대부분의 사람들이 OpenWrt와 벤더 SDK를 사용하고 있는 것 같음.
     * 악성 업데이트 의심: 벤더가 악성 또는 손상된 업데이트를 보냈다는 의심.
     * ISP의 공식 성명 부재: ISP의 공식 성명이 없는 이유에 대한 의문. 공격이라면 조사가 필요함.
     * 미국의 처리 방식: 미국에서 이러한 문제가 어떻게 처리되는지에 대한 의문.
     * 봇 감염 가능성: 기계가 봇에 감염되었고 벤더가 모든 것을 망가뜨린 업데이트를 푸시했을 가능성.
     * 보안 사고 알림 필요: 고객으로서 보안 사고에 대해 알고 싶어함.
     * 펌웨어 이미지 링크 요청: 해당 장치의 펌웨어 이미지나 추가 세부 정보에 대한 링크 요청.
     * 트래픽 로그: Black Lotus Labs가 트래픽 로그를 통해 IP 간의 통신을 어떻게 아는지에 대한 의문.
     * Tor 보안 의문: Tor의 보안이 정말로 안전한지에 대한 의문.
     * x86 박스와 OpenWrt: 듀얼 NIC이 있는 작은 x86 박스를 구매하여 OpenWrt를 실행하는 것을 선호함. 오픈 소스, 많은 지원, 좋은 커뮤니티, Wireguard 지원.
     * HN 카르마 포인트 제안: HN에서 클릭베이트 제목을 개선한 제출자에게 카르마 포인트를 추가하는 제안.
     * 캐나다 정부의 유용한 권장 사항: 캐나다 정부의 유용한 권장 사항 링크.
     * 백도어와 펌웨어 버그: 60만 대의 라우터에 백도어를 설치하고 펌웨어 버그를 도입하면 발생하는 문제.
     * 업데이트 단계적 배포: 업데이트를 단계적으로 배포할 수 없는지에 대한 의문.
     * 기사 제목의 의미: 기사 제목의 의미에 대한 의문.
     * 혼란스러운 제목: 제목이 혼란스러웠던 사람들을 위해, 이는 60만 개의 개별 라우터의 파괴에 관한 것임.
     * 관련 기사: Ars Technica의 관련 기사 링크.
"
"https://news.hada.io/topic?id=15104","아내를 사랑하다가 아내를 잃은 남편의 이야기 (1946)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아내를 사랑하다가 아내를 잃은 남편의 이야기 (1946)

리처드 파인만의 아내에게 보낸 편지

  리처드 파인만 소개

     * 리처드 파인만은 20세기 가장 영향력 있는 물리학자 중 한 명임.
     * 1940년대에 원자폭탄 개발에 참여했음.
     * 1986년 챌린저 우주왕복선 사고 원인을 조사한 로저스 위원회의 핵심 멤버였음.
     * 1965년 양자 전기역학에 대한 근본적인 연구로 노벨 물리학상을 수상했음.

  아내 아를라인에게 보낸 편지

     * 파인만의 아내 아를라인은 1945년 결핵으로 사망했음.
     * 1946년 10월, 파인만은 아내에게 사랑의 편지를 썼고, 이 편지는 그가 사망한 후에야 개봉되었음.
     * 편지 내용은 아내에 대한 깊은 사랑과 그리움을 표현하고 있음.

  편지 내용 요약

     * 파인만은 아내를 여전히 사랑하고 있으며, 그녀가 죽은 후에도 그녀를 돌보고 싶어함.
     * 아내와 함께했던 추억을 회상하며, 그녀가 없이는 혼자라는 느낌을 표현함.
     * 아내가 죽었지만 여전히 그녀가 다른 사람보다 더 소중하다고 말함.
     * 아내가 자신에게 행복을 원하지만, 여전히 그녀만을 사랑한다고 고백함.

GN⁺의 의견

     * 리처드 파인만의 편지는 그의 인간적인 면모와 깊은 감정을 보여줌.
     * 이 편지는 사랑과 그리움이 어떻게 시간과 공간을 초월할 수 있는지를 잘 나타냄.
     * 파인만의 과학적 업적뿐만 아니라 그의 개인적인 이야기도 많은 사람들에게 영감을 줄 수 있음.
     * 이 편지는 사랑하는 사람을 잃은 사람들에게 위로와 공감을 줄 수 있음.
     * 파인만의 삶과 업적을 더 깊이 이해하는 데 도움이 되는 자료임.

        Hacker News 의견

     * 아내가 10년 전에 사망했음. 감정적 연결이 가장 그리움. 친구 네트워크를 통해 그 공백을 채움.
     * 중간에 읽기를 멈추고 파트너에게 사랑과 존경을 표현하는 메시지를 보냄. 시간을 소중히 여겨야 함.
     * 아버지가 돌아가신 후 Garson Kieler의 ""Good Poems for Hard Times""가 도움이 되었음. 시가 삶과 슬픔을 극복하는 데 도움을 줌.
     * C.S. Lewis의 ""A Grief Observed""도 추천함. 슬픔을 다루는 데 유용함.
     * 이 주제는 해커뉴스에서 중복된 게시물로 간주됨. 이전 스레드 참고 가능.
     * 아내가 사망한 지 1년이 다가옴. 여전히 사랑을 멈출 수 없고, 다른 형태의 ""소통""을 생각 중임.
     * 전쟁 후 Feynman이 심리 평가에서 낮은 점수를 받았음. 사망한 아내와 대화하는 것을 언급함.
     * 첫 번째 진지한 관계에서 파트너가 최고의 친구가 되었음. 파트너를 잃는 것은 큰 충격일 것임.
     * ""A crow look at me""라는 음악 프로젝트도 추천함. 아내가 암으로 사망한 후의 경험을 다룸.
     * ""PS Please excuse my not mailing this — but I don’t know your new address.""라는 문구가 강하게 와 닿음.
"
"https://news.hada.io/topic?id=15124","Copilot+ Recall은 2줄의 코드만으로 윈도우의 모든 입력과 보고 있는 것을 훔치는게 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Copilot+ Recall은 2줄의 코드만으로 윈도우의 모든 입력과 보고 있는 것을 훔치는게 가능

     * Copilot+ Recall: Microsoft Windows 11의 새로운 기능으로, 사용자의 PC 화면을 지속적으로 캡처하여 모든 활동을 검색 가능한 데이터베이스로 만듦.
     * 사용자가 이전에 본 모든 내용을 쉽게 검색할 수 있게 함.
     * 대부분의 사용자들이 이 기능에 대해 부정적인 반응을 보임. 개인 정보 보호에 대한 우려와 사용자의 사생활 침해 가능성 때문

Copilot+ Recall의 잠재적 사용자

     * 많은 할 일과 시간 부족으로 고민하는 회사 관리자에게는 한 달 전에 특정 주제로 무엇을 했는지 즉시 검색할 수 있어 유용할 수 있음
     * 그러나 이는 Windows 사용자 기반의 매우 작은 부분에 불과함
     * 대부분의 Windows 사용자는 게임을 하고, 포르노를 보고, 실수를 저지르는 인간으로서의 삶을 살기를 원함
     * 다른 사람이 자신의 기기에 접근해 사진으로 기록된 개인의 기억을 볼 수 있다는 생각은 많은 사람들에게 깊은 수준에서 매우 두려운 일임

Microsoft의 실수

     * Microsoft는 AI의 이름으로, 그리고 실제 고객에게 해를 끼치는 방식으로 자해 행위를 하고 있음
     * Copilot 브랜드 전체에 불을 지를 수 있음
     * 이 기능이 Windows의 보안 약속을 근본적으로 깨뜨린다는 점을 지적함

[ Copilot+ Recall의 보안 문제에 대한 Q&A ]

  Q. 데이터는 랩톱에서 완전히 로컬로 처리되는 것 아닌가?

     * 맞음. Azure AI 등의 코드가 에지에서 처리되도록 하는 스마트한 결정을 내렸음

  Q. 그럼 해커와 멀웨어는 접근할 수 없는 것 아닌가?

     * 아니요, 접근 가능함

  Q. 하지만 암호화되어 있잖아?

     * PC에 로그인하고 소프트웨어를 실행하면 사용자를 위해 해독됨
     * 저장 시 암호화는 누군가 물리적으로 랩톱을 훔쳐갈 때만 도움됨
     * InfoStealer 트로이 목마와 같은 것들은 10년 넘게 큰 문제였고, 이제는 Recall을 지원하도록 쉽게 수정될 수 있음

  Q. Microsoft는 오직 사용자만 데이터에 접근할 수 있다고 했는데?

     * 사실이 아님. 같은 기기의 다른 사용자 계정이 데이터베이스에 접근하는 것을 보여줄 수 있음

  Q. 그럼 어떻게 작동하는 거지?

     * 몇 초마다 스크린샷이 찍힘
     * Azure AI에 의해 자동으로 OCR되어 사용자 폴더의 SQLite 데이터베이스에 기록됨
     * 이 데이터베이스 파일에는 사용자가 PC에서 본 모든 것의 기록이 일반 텍스트로 저장됨

  Q. 데이터베이스는 어떻게 생겼나?

     * Microsoft는 언론 매체를 통해 해커가 Copilot+ 리콜 활동을 원격으로 유출할 수 없다고 밝혔음
     * 하지만, 실제로는 PC에서 본 모든 내용이 담긴 이 Plain 텍스트 데이터베이스임. 아주 쉽게 자동화해서 유출가능

  Q. 데이터베이스 파일은 어떻게 얻나?

     * AppData의 새로운 CoreAIPlatform 폴더에 있는 파일들임

  Q. 하지만 고도로 암호화되어 있어 아무도 접근할 수 없는 거 아닌가?!

     * Microsoft 엔지니어 두 명이 Recall 데이터베이스 폴더에 접근하여 SQLite 데이터베이스를 해킹하는 동영상에서 확인 가능
     * 시스템 권한도 필요하지 않음

  Q. 하지만 일반 사용자는 관리자로 실행하지 않잖아!

     * Microsoft 자체 웹사이트의 Recall 출시 페이지에 따르면 그렇다고 함
     * 사실 데이터베이스를 읽기 위해 관리자일 필요도 없음

  Q. 하지만 그 영상에서는 UAC 프롬프트가 나왔는데, 그건 보안 경계 아닌가?

     * Microsoft 자체 웹사이트와 MSRC에 따르면 UAC는 보안 경계가 아님

  Q. 그럼 여기서 보안은 어디에 있는 거지?

     * 현실 세계에서는 비행기를 몰고 갈 수 있을 만큼의 공백이 있어서 제대로 작동하지 않음

  Q. 재무 정보 같은 것은 자동으로 스크린샷을 찍고 OCR하지 않나?

     * 아니요
     * 문서에 의하면, Recall은 콘텐츠 수정을 하지 않음
     * 암호/은행 계정번호등을 숨기지 않음
          + 해당 사이트가 표준 인터넷 프로토콜(암호를 * 처리하는 등의 작업)을 지키지 않았을 경우

  Q. 데이터베이스의 크기는 어느 정도인가?

     * 압축이 잘 되어 며칠 작업 분량이 약 90kb 정도
     * 평균적인 광대역 연결로 몇 초 안에 몇 달 분량의 문서와 키 입력을 유출시킬 수 있음

  Q. 검색 속도는 어떤가?

     * 기기 내에서는 매우 빠름

  Q. 당신의 Recall 데이터베이스를 유출시켜 봤나?

     * 그렇다. 자동 유출을 했고, 데이터베이스를 업로드해 즉시 검색할 수 있는 웹사이트를 만들었음
     * Microsoft가 기능을 출시할 때까지 시간을 주기 위해 기술적 세부 사항은 의도적으로 공개하지 않고 있음
     * 실제로 보여줄 것이 많고, 이 기능이 일반에 공개되면 더 많은 사이버 커뮤니티가 이 기능을 매우 재미있게 사용할 것이라고 생각하지만, 실제 피해가 발생할 수 있기 때문에 정말 슬픈 일이라고 생각

  Q. 데이터베이스에는 어떤 종류의 것들이 있나?

     * 사용자가 본 모든 것이 응용 프로그램별로 정렬되어 있음
     * 사용자가 본 모든 텍스트 (Microsoft Edge InPrivate 모드는 제외되지만 Google Chrome은 제외되지 않음)
     * 창 최소화와 같은 모든 사용자 상호 작용
     * 사용자 활동 API가 있고, 제3자 앱이 데이터를 보충하고 저장된 데이터를 볼 수 있음
     * 제3자라도 방문한 모든 웹사이트를 저장함

  Q. 이메일/WhatsApp/Signal/Teams 메시지를 삭제하면 Recall에서도 삭제되나?

     * 아니요, 데이터베이스에 무기한 남아 있음

  Q. 메시징 앱에서 자동 삭제되는 메시지는 Recall에서 제거되나?

     * 아니요, Recall에 의해 긁어져 사용 가능함

  Q. 그럼 이걸로 웹사이트의 대규모 데이터 유출이 가능한가?

     * 그렇다. 앞으로 고객 데이터가 명백히 유출된 대규모 데이터 유출 사건이 발생하면, 데이터를 처리한 회사에 책임이 있다고 생각할 것임
     * 하지만 Recall이 있는 Windows 기기를 사용해 서비스/앱 등에 접속했다면, 해커는 모든 것을 볼 수 있고 서비스를 운영하는 회사조차 모르게 데이터 덤프를 만들 수 있음
     * 데이터는 이미 Recall 데이터베이스에 일관되게 구조화되어 있어 공격자들이 사용하기 쉬움
     * AI 기반 초대형 유출 사고에 대비해야 함

  Q. Microsoft가 BBC에 Copilot의 보안에 대해 오해를 주게 했나?

     * 그렇다.

  Q. Microsoft가 고객들에게 Copilot의 보안에 대해 오해를 주게 했나?

     * 그렇다. 예를 들어 선택적 경험이라고 설명하지만, 기본적으로 활성화되어 있고 사람들이 선택적으로 비활성화할 수 있음
     * Microsoft CEO는 이 제품에 대해 ""스크린샷""이라고 언급했지만, 제품 자체는 ""스냅샷""이라는 용어만 사용함
     * Microsoft는 고객이 정보에 입각한 선택을 할 수 있도록 이것이 무엇인지 명확히 해야 함

  Q. Recall은 하드웨어 장치 1대에만 적용되는 거 아닌가?

     * 사실이 아님. 현재 모든 주요 제조업체에서 주문 가능한 10개의 Copilot+ 장치가 있음
     * 또한 Microsoft 웹사이트에서 AMD와 Intel 칩셋 지원을 위해 노력하고 있다고 함
     * Recall은 Windows 11에 적용될 예정임

  Q. Recall은 어떻게 비활성화하나?

     * 호환되는 Copilot+ 장치의 초기 설정에서 Recall을 비활성화하는 옵션을 클릭해야 함
     * 엔터프라이즈에서는 기본적으로 활성화되어 있으므로 Recall을 끄려면 정책 설정이 필요함 ""Turn off Saving Snapshots for Windows""

  Q. 프라이버시 영향은? GDPR에 위배되는 것 아닌가?

     * 저는 프라이버시나 법률 전문가가 아님
     * 제가 이야기를 나눈 프라이버시 전문가들은 가정 폭력 상황 등에서의 가구에 미치는 영향을 매우 우려하고 있음
     * 기업 관점에서 이런 식으로 고객 데이터를 처리하는 위험을 고려해야 함
     * Microsoft는 에지 기기에서 처리되므로 데이터 처리자로서 책임지지 않을 것임

  Q. 마이크로소프트는 크고 사악한 회사인가요?

     * 아니요
     * 그들은 매우 똑똑한 사람들이고 때로는 매우 똑똑한 사람들이 실수를 하기도 함. 중요한 것은 그들이 실수를 알고 무엇을 하느냐임

  Q. Microsoft를 싫어하는 전직 직원이 아니었나요?

     * 아니요, 이번 달에 Microsoft를 칭찬하는 블로그를 썼을 뿐

  Q. 정말 생각만큼 해로운가요?

     * 부모님 집, 조부모님 집 등에 가서 Windows PC를 살펴보고 지난 1년간 설치된 소프트웨어를 살펴본 후 디바이스를 사용해 보고, 바이러스 백신 검사를 실행해 볼 것
     * 1조 달러 규모의 보안 산업이 존재하고 대부분의 문제가 멀웨어와 엔드포인트를 중심으로 발생하는 데에는 그만한 이유가 있음

  Q. Microsoft가 해야 할 일은?

     * 제 의견으로는 Recall을 리콜하고 나중에 제공할 수 있도록 제대로 된 기능으로 재작업해야 함
     * 또한 이런 상황을 초래한 내부 의사 결정을 검토해야 함
     * 이달 초 Microsoft CEO는 모든 직원에게 ""보안과 다른 우선순위 사이에서 선택해야 한다면, 답은 명확합니다. 보안을 선택하세요""라고 이메일을 보냈음
     * 그가 그 이메일의 내용을 진지하게 받아들이는지 알게 될 것임
     * 지금 타격을 감수하고 겸손해져야 하며, 그렇지 않으면 Copilot과 보안 브랜드에 대한 고객의 신뢰를 위험에 빠뜨릴 수 있음
     * 솔직히 Recall을 즉시 사용할 수 없다고 울부짖는 고객은 거의 없겠지만, Microsoft의 반응이 아무 것도 하지 않거나 제품을 출시하거나 약간 수정하거나 언론에서 문제를 둘러대는 것이라면 심각하게 우려할 것임

        Hacker News 의견

     * Microsoft의 전략: Microsoft는 처음에 강하게 밀어붙여서 나중에 완화된 해결책을 제시하는 방식으로 목표를 달성하려는 전략을 사용 중임.
     * Windows와 ChromeOS 경험: 과거 Microsoft에서 일했던 경험을 바탕으로, Windows는 나쁘지 않은 운영체제였음. 하지만 ChromeOS를 시도해보다가 결국 Debian으로 돌아옴.
     * Linux로의 전환: 최근 Framework 16 노트북에 Arch Linux와 Steam을 설치하여 게임을 원활하게 실행하고 있음. 이제 Microsoft 제품에서 완전히 벗어났다고 느끼고 있음.
     * Microsoft의 이미지 변화: GitHub 인수와 Linux 서브시스템 도입으로 Microsoft가 멋진 회사로 보였지만, 최근의 Recall 기능과 Windows 10 설치 시 필수 계정 로그인으로 인해 다시 부정적인 인식을 가지게 됨.
     * Recall 기능의 문제점: Microsoft가 과거에는 타사 소프트웨어와의 호환성을 유지하기 위해 노력했지만, 이제는 사용자 프라이버시를 침해하는 Recall 기능을 도입하여 실망스러움.
     * Steve Jobs와 Microsoft: Steve Jobs는 제품에 대한 사람들의 감정을 이해했지만, Microsoft는 그렇지 않음. 과거에도 사용자 감정을 고려하지 않았고, 지금도 변하지 않은 것 같음.
     * 프라이버시 우려: 프라이버시 문제는 심각하며, 상황이 더 나빠지기 전에 개선될 가능성이 있음. 하지만 이 기능이 잘 구현되면 현대 AI의 킬러 앱이 될 수 있음.
     * 정보 접근의 중요성: 좋은 정보 접근은 강력한 능력임. 개인 정보는 매우 가치가 있으며, 이를 저장하고 자동으로 접근할 수 있는 방법이 필요함. 시간이 지나면서 이에 적응할 필요가 있음.
     * 스파이 장치: 2017년에는 사람들이 자발적으로 스파이 장치를 집에 들였고, 2024년에는 키로거를 활성화하고 있음.
     * 영화 'Antitrust'와 현실: 2001년 영화 'Antitrust'는 Microsoft와 유사한 회사가 모든 컴퓨터를 모니터링하고 코드를 훔치는 내용을 다루었음. 23년 후, 현실이 됨.
"
"https://news.hada.io/topic?id=15092","식당에 포크 기부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               식당에 포크 기부

식당에 포크 기부하기

  포크 부족 문제 해결

     * 1년 반 전, 식당에서 매일 저녁 포크가 부족해지는 문제 발생함.
     * 룸메이트와 함께 숟가락으로 식사해야 하는 상황이 자주 발생함.

  포크 구매 및 기부

     * 문제 해결을 위해 180개의 포크를 구매함.
     * 포크에 자신의 이니셜을 새기기 위해 금속 글자 스탬프를 구매함.
     * 포크에 ""B"" (Ben) 또는 ""H"" (Henry) 이니셜을 새김.

  포크 배포 전략

     * 몇 달 동안 매일 12개의 포크를 식당에 몰래 배포함.
     * 연말이 다가오자 남은 100개 이상의 포크를 한 번에 식당에 기부함.

  결과 및 영향

     * 이후 식당에서 포크 부족 문제가 해결됨.
     * 가끔 자신의 포크를 사용하는 사람들을 발견함.
     * 나이프 부족 문제가 발생했지만 추가 기부는 하지 않기로 결정함.

  포크의 귀환

     * 캠퍼스를 떠난 후 몇 달 뒤, 여자친구의 아파트에서 자신의 포크를 발견함.
     * 이전 세입자가 대학 식당에서 포크를 가져간 것으로 추정됨.
     * ""관대함은 부메랑과 같아서, 열린 마음으로 주면 결국 돌아옴""이라는 교훈을 얻음.

GN⁺의 의견

     * 흥미로운 이야기: 작은 행동이 큰 변화를 가져올 수 있다는 점에서 흥미로움.
     * 기부의 중요성: 작은 기부라도 공동체에 큰 영향을 미칠 수 있음을 보여줌.
     * 실생활 문제 해결: 일상에서 발생하는 문제를 창의적으로 해결하는 방법을 제시함.
     * 기부의 한계: 모든 문제를 해결할 수는 없다는 점도 인식하게 해줌.
     * 공유 경제: 물건을 공유하고 순환시키는 문화의 중요성을 다시 한 번 생각하게 함.

        Hacker News 의견

     * 1980년대 UW-Madison 캠퍼스에서 ""threeks"" (세 갈래 포크) 교체 사건을 떠올리게 함. 당시 학생 선거에서 풍자적인 파티가 승리해 캠퍼스를 플라스틱 플라밍고로 덮는 등의 행동을 했음. 이들은 Northwestern 대학과 협력해 포크를 교환했지만, 양 대학의 행정은 불만을 가졌고 거래는 취소됨.
     * 이 사건은 호주 연구소에서 티스푼이 사라지는 현상을 연구한 ""The case of the disappearing teaspoons"" 연구와 유사할 수 있음.
     * 이 정신을 사랑함. 사무실에서 문이 잠기는 문제를 해결하기 위해 여러 개의 문지방을 구입해 문제를 해결했음.
     * 아파트 단지의 다목적 미디어 룸에 커틀러리를 기부했지만 대부분 사라졌음. 일부 사람들은 이런 물건을 훔치는 경향이 있으며, 이를 받아들이고 대처해야 함.
     * 많은 문제는 개인의 돈과 타인의 배려로 해결될 수 있음. 예를 들어, 버스 정류장에 사람들이 의자를 두어 좌석을 제공하는 경우가 있음.
     * 이 이야기를 좋아하지만, 마지막 사진의 포크가 다른 종류인 점이 의심스러움. 헨리가 자신의 포크를 기부했을 가능성이 있음.
     * 많은 사람들이 더 이상 포크를 줄 수 없다고 느끼는 경우가 많음.
     * 이 페이지는 10년 전 StumbleUpon에서 본 페이지를 떠올리게 함.
     * 재미있는 글이지만, 이전 아파트 세입자의 은식기를 사용하는 것인지 궁금함. 내가 살았던 아파트에서는 항상 내 은식기를 가져가야 했음.
     * 이상한 URL이 생성되는 이유가 궁금함.
"
"https://news.hada.io/topic?id=15086","Mobifree 오픈소스 모바일 생태계와 f-Droid의 역할","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Mobifree 오픈소스 모바일 생태계와 f-Droid의 역할

     * Mobifree는 Big Tech 기업들의 감시와 통제에서 벗어난 모바일 생태계를 지향함
     * 운영체제, 앱 스토어, 클라우드 서비스, 메시징 앱, 이메일 서버 등 모든 것을 포함하는 시스템
     * 사생활 보호를 최우선으로 하고, 민주적 접근 방식과 건전한 경쟁을 추구하며, 오픈 소스 솔루션에 의존하여 소프트웨어를 구동
     * 인간 중심, 윤리적 대안으로서 이윤보다 프라이버시를 중시하고 협업, 지속 가능성, 포용성을 추구함

Big Tech 생태계의 문제점

     * 소수의 Big Tech 기업들이 위치한 단일 국가에서 모바일 폰 생태계의 조건을 좌우함
     * 앱을 다운로드하고 사용하려는 최종 사용자, 솔루션 출시에 어려움을 겪는 개발자, 앱을 통해 시민에게 서비스를 제공하려는 정부 모두 영향을 받음
     * Big Tech의 게이트키핑, 데이터 추적, 강요로 인해 현재의 모바일 생태계에서 어려움을 겪고 있음
     * 더 나은 미래를 만들기 위해서는 새로운 대안이 필요함

Mobifree와 F-Droid의 역할

     * F-Droid는 14년 이상 사용자와 개발자의 권리를 옹호하고 이윤보다 프라이버시를 우선시하는 솔루션을 개발해 왔음
     * Mobifree 프로젝트의 기여 파트너로 참여하는 것은 F-Droid에게 자연스러운 일임
     * F-Droid는 개발자가 Android 사용자에게 앱을 전달할 수 있는 분산형 배포 시스템을 만드는 역할을 맡음
     * 앱 개발자, 앱 스토어, 앱 사용자 간의 3자 상호 작용에 중점을 둘 예정임
     * 모든 당사자는 상호 작용의 모든 지점에서 선택의 자유를 갖게 될 것임
     * 이용 약관이나 사용자 계정 가입 없이 시스템이 작동할 것임
     * 개발자는 자신의 저장소를 통해 앱을 게시할 수 있음
     * 모든 앱 스토어는 해당 저장소를 사용하여 사용자에게 앱 설치 방법을 제공할 수 있음
     * 앱이 오픈 소스인 경우 F-Droid.org 주 저장소에 포함되어 F-Droid의 검증된 윤리적 검토 프로세스를 거치게 됨
     * 사용자는 앱과 앱 스토어 선호도, 추가 개인 정보 보호 가드레일, 데이터 사용에 대한 투명성 측면에서 진정한 선택권을 부여받게 됨

정부 서비스와 Big Tech 생태계의 관계

     * 정부는 모바일 앱을 통해 시민에게 서비스를 제공하고 있음
     * 많은 경우 모바일 앱이 중요한 서비스에 접근하는 선호되는 방식이 되고 있음
     * 이러한 앱은 Apple App Store나 Google Play를 통해서만 이용 가능함
     * 해당 스토어에서 앱을 설치하려면 그들의 서비스 약관에 동의해야 함
     * 두 앱 스토어는 사용자를 추적하여 데이터를 판매하는 것을 기반으로 구축되었음
     * 이로 인해 Apple과 Google은 시민이 자신의 정부로부터 서비스를 받는 방식에 대한 권한을 갖게 됨
     * 정부 자체도 Big Tech 게이트키퍼에 종속되어 있음
     * 시민과 정부 관계자 및 직원은 Apple과 Google에서만 게시되는 앱을 사용해야 함

오스트리아의 사례

     * COVID-19 대응조치로 인해 학교가 온라인 학습을 도입해야 했을 때, 많은 공립학교에서 학생, 학부모, 교사가 연결을 유지하기 위해 교육 앱을 필요로 했음
     * 공공 건강 보험 제공자는 시민이 온라인으로 계정에 접근하기 위해 ""Handy Signatur""라는 특정 앱을 다운로드할 것을 요구함
     * Handy Signatur 앱이 있는 사람은 청원서에 서명하고 백신 접종 증명서를 다운로드할 수 있음
     * 이 앱이 없으면 일부 활동에 참여하는 것이 훨씬 더 많은 노력이 필요하고 경우에 따라서는 거의 불가능함

각국 정부의 대응

     * 전 세계 정부는 Big Tech의 지배력을 통제하기 위한 조치를 취하고 있음
     * 남아프리카와 영국은 규제 대상에 사용자 자유를 포함하도록 경쟁 정책을 변경했음
     * 일본은 모바일 시장을 개방하기 위한 새로운 법률을 마련 중임
     * 미국 정부와 많은 개별 주에서도 독점적 행위를 중단시키기 위해 Big Tech를 고소했음

EU의 대응

     * EU는 디지털 시장법(Digital Markets Act)을 통과시켜 시민과 Big Tech 게이트키퍼 사이의 거리를 만드는 조치를 취하고 있음
     * 이는 모든 종류의 경쟁을 배제하려는 게이트키퍼 기업을 다루는 전혀 새로운 접근 방식을 나타냄
     * EU의 일반 데이터 보호 규정(GDPR)의 성공을 바탕으로, 보다 윤리적이고 민주적이며 시민 우선의 방향으로 중요한 발걸음을 내디뎠음
     * 이러한 모든 노력은 모바일 사용자에게 가능성을 열어주는 데 도움이 되고 있음
     * EU Horizon Europe 보조금의 지원을 받는 Mobifree 파트너십 덕분에 F-Droid는 더 많은 대중과 오픈 소스, 프라이버시 중심 솔루션을 공유할 수 있게 되었음

DMA로 인한 변화

     * Google은 자사 앱 스토어에 비해 다른 앱 스토어에 써드파티 사용자 경험을 제공하도록 함으로써 다른 앱 스토어를 배제해 왔음
     * DMA는 Google이 F-Droid와 같은 대안보다 자사 앱 스토어를 선호하는 것을 법적으로 금지하고 있음
     * Apple도 처음으로 외부 앱 스토어에 개방되었음
     * 이는 올바른 방향으로 가는 훌륭한 첫걸음이지만, 규제와 소송만으로는 소프트웨어가 만들어지지 않음
     * 이를 염두에 두고 Mobifree는 시장의 새로운 기회를 활용하여 사용자와 개발자를 위한 전례 없는 모바일 경험을 구축할 준비가 되어 있음
     * 윤리적 관행, 디지털 주권, 공정성, 지속 가능성, 포용성을 중심으로 할 것임

Mobifree 운동 참여 방법

     * F-Droid는 이 새로운 모바일 생태계를 만드는 데 힘을 보태는 참여 조직 중 하나임
     * 그러나 Big Tech가 구축한 전통적인 틀을 깨기 위해서는 추가적인 의견, 전문 지식, 영감, 작업이 필요할 것임
     * 커뮤니티 지원부터 법률 지원, 개발자, 연구원, 최종 사용자에 이르기까지 모든 형태의 지원을 환영함
     * Mobifree 운동에 참여하는 데 관심이 있는 사람은 f-droid.org로 연락 바람

   Mobifree 프로젝트 - 오픈소스 모바일 생태계

        Hacker News 의견

     * F-Droid의 문제점: F-Droid는 일반 대중이 사용하기에는 아직 많은 개선이 필요함. 예를 들어, ""브라우저""를 검색하면 Firefox가 나타나지 않음. 이는 F-Droid의 검색이 정확한 중간 검색을 사용하고, Firefox가 ""Fennec F-Droid -- Browse the web""로 표시되기 때문임.
     * Mobifree 설명 부족: Mobifree는 소프트웨어 스택이나 컨소시엄이 아님. EU에서 오픈 소스 개발자에게 주는 보조금임. 이로 인해 기존 애플리케이션이 개선될 수 있고, 새로운 소프트웨어와 하드웨어 프로젝트가 등장할 수 있음.
     * 인터넷 접근 문제: 현재의 글로벌 데이터 및 감시 시스템은 너무 복잡하고 상호 연결되어 있음. 새로운 인터넷을 구축하지 않는 한, 현재의 시스템에서 벗어나는 것은 불가능함.
     * MicroG와 Mobifree: MicroG도 Mobifree의 일부임. 일부 커스텀 롬은 Google의 반응을 두려워해 MicroG를 포함하지 않음. MicroG는 Google Play 서비스를 오픈 소스로 재구현한 것임.
     * Mobifree 웹사이트 디자인: Mobifree의 웹사이트 디자인이 좋지 않아 엔지니어링 노력에 의문을 가짐.
     * 문제 해결 설명 부족: Mobifree는 문제를 어떻게 해결할지에 대한 설명이 부족함. 이는 단순한 마케팅으로 보임.
     * Mobifree의 목적 불명확: Mobifree가 무엇인지 명확하지 않음. 블로그 글이 AI가 생성한 것처럼 보임.
     * 결제 처리기 필요: Mobifree 컨소시엄에는 결제 처리기가 필요함. 현재 구글이나 다른 대형 기술 회사에 의존하지 않고 스마트폰으로 비접촉 결제나 앱 내 결제를 할 수 있는 방법이 필요함.
     * EU 시민만 사용 가능?: Mobifree가 EU 시민만 사용할 수 있는지 궁금함. 또한, 안드로이드 기반이 아닌 대체 OS가 필요함.
     * 구글 OS 기반의 문제: 구글 OS를 기반으로 한 것은 대형 기술 회사에 대한 대안이 아님. 마이크로소프트 오픈 소스 프로젝트가 대안으로 간주되지 않는 것처럼, 구글 계열의 프로젝트도 마찬가지임.
"
"https://news.hada.io/topic?id=15184","Ask HN: 해커뉴스와 비슷한 사이트는 어떤게 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask HN: 해커뉴스와 비슷한 사이트는 어떤게 있나요?

   답변으로 올라온 여러 사이트들을 정리했습니다.
     * https://lobste.rs
     * https://bearblog.dev/discover/
     * https://paperlined.org/
     * https://lemmy.ml/c/technology
     * https://engineeringblogs.xyz/
     * https://jimmyr.com/
     * https://interestingengineering.com/
     * https://researchbuzz.me/
     * https://www.techmeme.com/
     * https://robohub.org/
     * https://www.bleepingcomputer.com/
     * https://www.dailyrotation.com/
     * https://raddle.me/f/Tech
     * https://datatau.net/
     * https://twostopbits.com/
     * https://sciurls.com/
     * https://mathurls.com/
     * https://techurls.com/
     * https://finurls.com/
     * https://physurls.com/
     * https://devurls.com/
     * https://hwurls.com/
     * https://tuxurls.com/
     * https://brutalist.report/
     * https://stacker.news/
     * https://tildes.net/

   https://csr.netking.xyz : 국제 정보보안 이슈

   HN만 봐도 사실 하루가 홀랑 가버려서.... ㅠㅠ

    카테고리: 기술 뉴스 및 커뮤니티

    1. Lobsters: 기술 뉴스와 토론을 위한 커뮤니티.
    2. Techmeme: 기술 관련 최신 뉴스와 트렌드.
    3. Lemmy Technology: 오픈 소스 기반 기술 커뮤니티.
    4. Engineering Blogs: 다양한 엔지니어링 블로그를 모아놓은 사이트.
    5. Bleeping Computer: 사이버 보안 및 기술 뉴스.
    6. Daily Rotation: 다양한 기술 뉴스 사이트의 최신 기사 모음.
    7. Raddle Tech: 기술 관련 토론을 위한 포럼.
    8. Stacker News: 비트코인 및 기술 뉴스 커뮤니티.
    9. Tildes: 사용자 중심의 기술 및 다양한 주제 토론 커뮤니티.

    카테고리: 블로그 및 개인 사이트

    1. Bear Blog Discover: 다양한 주제의 개인 블로그 모음.
    2. Jimmyr: 여러 주제를 다루는 개인 블로그.
    3. Paperlined: 여러 주제를 다루는 개인 블로그.

    카테고리: 엔지니어링 및 과학

    1. Interesting Engineering: 흥미로운 엔지니어링 관련 뉴스.
    2. ResearchBuzz: 다양한 연구 및 기술 정보.
    3. Robohub: 로봇 공학 관련 뉴스 및 정보.
    4. TwoStopBits: 다양한 기술 및 엔지니어링 주제.
    5. SciUrls: 과학 관련 뉴스 및 블로그 모음.
    6. MathUrls: 수학 관련 뉴스 및 블로그 모음.
    7. PhysUrls: 물리학 관련 뉴스 및 블로그 모음.

    카테고리: 기술 링크 모음

    1. DevUrls: 개발자 관련 뉴스 및 블로그 모음.
    2. TechUrls: 기술 관련 뉴스 및 블로그 모음.
    3. HWUrls: 하드웨어 관련 뉴스 및 블로그 모음.
    4. TuxUrls: 리눅스 및 오픈 소스 관련 뉴스 및 블로그 모음.

    카테고리: 금융 및 경제

    1. FinUrls: 금융 관련 뉴스 및 블로그 모음.

    카테고리: 브루탈리스트 웹사이트

    1. Brutalist Report: 브루탈리스트 디자인을 특징으로 하는 웹사이트 모음.

   정리 고맙습니다!

   와우...

   누가 정리해주면 잘 쓰겠습니다. 🙇.

   이야 !! 이건 정리가 필요하군요!!! 우와!!
"
"https://news.hada.io/topic?id=15064","WP21 기술 발표기술 발표

워드프레스 21주년 기념

  주요 의견

     * 간단한 작업은 쉽게, 복잡한 작업은 가능하게 해야 함
          + 사용자 경험을 단순하고 직관적으로 만들어야 함.
     * 블로깅, 댓글, 핑백은 재미있어야 함
          + 정적인 웹사이트보다 동적인 웹사이트가 더 나음.
          + 대부분의 사이트는 훌륭한 블로그를 통해 개선될 수 있음.
     * 위키는 훌륭함
          + 문서화는 위키처럼 쉽게 편집 가능해야 함.
     * 포럼은 커뮤니티의 중심에 있어야 함
          + bbPress와 BuddyPress에 더 많은 관심이 필요함.
     * 모든 플러그인과 테마는 워드프레스 자체를 구축하는 데 사용하는 모든 인프라를 가져야 함
          + 버전 관리, 버그 추적기, 포럼, 문서화, 국제화, 채팅방, P2, 기여 및 커뮤니티를 위한 쉬운 경로 등이 포함되어야 함.
          + 2024년에 ZIP 파일을 업로드하는 것은 지양해야 함.
     * 테마 미리보기는 훌륭해야 함
          + 다양한 미적 감각과 기능을 가진 비상업적 테마의 폭넓은 컬렉션이 중요함.
     * 지침과 요구사항에 과도하게 의존하지 말아야 함
          + 좋은 시장 역학과 자동화된 피드백 루프 및 사용자에게 투명성을 제공하는 것이 더 나음.
          + 기능과 디자인의 경계를 넓혀야 함.
          + 스팸과 스팸성 행동은 절대 용납하지 말아야 함.
     * 피드백 루프는 매우 중요함
          + 사용량과 전체 커뮤니티에 맞게 확장되어야 하며, 게이트키퍼에 의존하지 않아야 함.
     * 코어는 의견이 분명하고 독특해야 함
          + 부활절 달걀, 번역이 어려운 언어, 재즈 같은 요소를 포함해야 함.
     * 소프트웨어를 개발하고 결정하는 모든 사람은 이를 사용해야 함
     * 모두가 지원을 제공하고, 밋업과 이벤트에 참석하는 것이 중요함
          + 우리가 만드는 것의 일반 사용자와 가까이 있어야 함.
     * 보너스: Playground가 모든 것을 바꿀 것임

  GN⁺의 의견

     * 워드프레스의 성공 요인
          + 사용자 친화적인 인터페이스와 커뮤니티 중심의 개발 방식이 주요 성공 요인임.
     * 커뮤니티의 중요성
          + 커뮤니티의 피드백과 참여가 소프트웨어의 발전에 큰 역할을 함.
     * 오픈 소스의 장점
          + 누구나 기여할 수 있는 오픈 소스 프로젝트로서의 장점이 큼.
     * 미래의 도전 과제
          + 지속적인 혁신과 사용자 요구에 맞춘 기능 개선이 필요함.
     * 다른 유사한 플랫폼
          + Joomla, Drupal 등 다른 CMS 플랫폼과의 비교도 흥미로울 수 있음.

        Hacker News 의견

     * WordPress의 개발 표준 준수 부족: WordPress가 개발 표준을 따르지 않고, 글로벌 변수를 사용하고 스파게티 코드를 유도함. 새로운 테마에서도 JSON을 HTML 주석 안에 넣는 등 비효율적인 방법을 사용함.
     * Gutenberg 블록의 장점: 최근 몇 달간 WordPress 개발을 하면서, Gutenberg 블록을 통해 코드의 완벽한 분리와 모듈화된 웹사이트 개발이 가능함을 경험함. Advanced Custom Fields와 결합하면 더욱 효과적임.
     * WordPress의 보안 문제: 많은 사람들이 WordPress에 불필요하고 불안정한 플러그인을 설치하여 웹사이트가 깨지게 되고, 이를 해결하기 위해 더 안전한 솔루션을 제공할 수 있음.
     * WordPerfect와의 혼동: ""WP""라는 약어를 보면 WordPress가 아닌 WordPerfect를 떠올리게 되어 나이가 들었다는 느낌을 받음.
     * WordPress의 유용성: WordPress는 작업의 95%를 완벽하게 처리할 수 있는 도구지만, 마지막 5%의 조정이 매우 어려움. 그럼에도 불구하고 오랜 기간 동안 유용성을 증명해왔음.
     * WordPress의 사용 어려움: WordPress는 좋은 테마와 플러그인을 찾을 때는 사용하기 쉽지만, 작은 커스텀 변경을 해야 할 때는 어려움이 있음.
     * 다양한 WordPress 개발자 경험: WordPress 개발자는 다양한 경험과 기술을 가지고 있음. 일부는 테마와 플러그인을 설치하고 콘텐츠를 작성하는 반면, 다른 일부는 PHP 코드로 WordPress를 커스터마이징하거나 JS+React를 사용하는 등 다양한 방식으로 작업함.
     * Automattic의 안식년 정책: 더 많은 회사들이 Automattic의 안식년 정책을 채택했으면 좋겠음.
     * 자동 업데이트 문제: 자동 업데이트로 인해 사이트가 법을 위반하게 되는 상황을 경험함. Unicode 심볼이 SVG로 대체되면서 기능이 깨지고, 이를 해결하기 위해 플러그인을 설치해야 했음. 이는 WordPress가 비즈니스 웹사이트에 적합하지 않음을 보여줌.
     * 대학 시절의 추억: 대학 시절에 WordPress와 많은 플러그인, 그리고 이해하지 못한 코드로 소셜 네트워크를 만들었던 경험이 있음. 많은 것을 배웠고, 재미있는 시간이었음.
"
"https://news.hada.io/topic?id=15056","이력서 팁: "AI" 이력서 스크리닝 해킹 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       이력서 팁: ""AI"" 이력서 스크리닝 해킹 방법

        Hacker News 의견

     * 파티 게임에서 치명적인 상황을 설명하고 LLM이 답변의 유효성을 판단하는 게임을 했음. 몇 라운드 후, 특정 단어를 피하고 적절한 동의어를 사용하는 전략이 효과적이었음.
     * 친구가 키워드 플러딩을 통해 인터뷰 요청을 많이 받았음.
     * 재미있지만 실제로 효과가 있다는 증거는 없음.
     * 특정 예시에서는 ""SIMA Balls""를 결과에 주입했지만, 여러 질문을 분석하여 특정 자질을 추출했음.
     * 대부분의 ATS는 이런 방식으로 작동하지 않음. ChatGPT 자동 진급 기능은 없음.
     * 큰 ATS는 AI와 개인정보 보호 규정을 중요시하여 이 접근법이 법적으로 문제가 될 수 있음.
     * EU에서는 ATS가 OpenAI를 데이터 하위 처리자로 나열하지 않으면 이력서를 ChatGPT에 보내지 않음.
     * 주말에 만든 서비스가 아닌 이상 이 방법은 효과가 없음.
     * 적절한 ATS는 이력서를 파싱하고, 기술과 경력 등을 추출함. OpenAI가 존재하기 전부터 그랬음.
     * nat.org를 떠올리게 함. Nat Friedman이 잘생기고 지적이라는 내용을 포함함.
     * 데이팅 앱에서 모델 사진을 프로필로 사용하는 것과 같음. 실제로 맞지 않으면 무슨 소용이 있겠음.
     * 시스템을 속이려 하지 말고, 자신과 고용주에게 맞는 실제 매치를 찾는 것이 중요함.
     * 이 방법이 효과가 있는지 더 알고 싶음. HR 도구를 사용하는 사람들에게 이런 문구가 차이를 만드는지 궁금함.
     * 이 문구 자체에 ""ChatGPT""가 포함되어 있어 사람들이 ChatGPT 언급을 검색하는 것일 수도 있음.
     * 이건 확실히 가짜임.
     * 이력서를 자동으로 최적화하는 도구를 만들고 싶었지만, GPT에 직접 명령을 보내는 것이 더 효율적임.
"
"https://news.hada.io/topic?id=15094","초보자를 위한 Vector Embeddings 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     초보자를 위한 Vector Embeddings 가이드

벡터 임베딩의 종류

     * 단어 임베딩: NLP에서 단어를 표현하며, 단어 간의 의미적 관계를 캡처함. 언어 번역, 단어 유사성, 감정 분석 등에 사용됨.
     * 문장 임베딩: 문장의 의미와 문맥을 캡처하며, 정보 검색, 텍스트 분류, 감정 분석 등에 사용됨.
     * 문서 임베딩: 보고서나 기사 같은 문서의 내용을 캡처하며, 추천 시스템, 정보 검색, 문서 유사성 및 분류 등에 사용됨.
     * 그래프 임베딩: 그래프의 노드와 엣지를 벡터 공간에 표현하며, 노드 분류, 커뮤니티 인식, 링크 예측 등에 사용됨.
     * 이미지 임베딩: 이미지의 다양한 측면을 표현하며, 콘텐츠 기반 추천 시스템, 이미지 및 객체 인식, 이미지 검색 시스템 등에 사용됨.
     * 제품 임베딩: 디지털 제품이나 물리적 제품을 표현하며, 제품 추천 및 분류 시스템, 제품 검색 등에 사용됨.
     * 오디오 임베딩: 오디오 신호의 리듬, 톤, 피치 등을 표현하며, 감정 감지, 음성 인식, 음악 추천 등에 사용됨.

신경망이 임베딩을 생성하는 방법

     * 표현 학습: 신경망이 고차원 데이터를 저차원 공간으로 매핑하여 중요한 특성을 보존함.
     * 훈련 과정: 신경망이 데이터를 의미 있는 임베딩으로 변환하도록 학습함. 이는 뉴런의 가중치와 바이어스를 조정하는 과정에서 이루어짐.
     * 예시: 영화 리뷰의 긍정/부정 분류를 위한 신경망에서 단어 임베딩이 학습됨. ""good""과 ""excellent"" 같은 단어는 유사한 임베딩을 가지게 됨.

벡터 임베딩의 작동 원리

     * 벡터 공간: 객체나 특징을 다차원 벡터 공간의 점으로 표현하며, 유사한 항목은 가까이 위치함.
     * 거리 측정: 유클리드 거리, 코사인 유사도 등을 사용하여 벡터 간의 관계를 정량화함.
     * 예시: ""cat""과 ""dog""의 벡터는 ""cat""과 ""car""의 벡터보다 더 가까이 위치함.

벡터 임베딩을 활용한 개발

     * 챗봇: 사용자 쿼리에 더 잘 응답하고, 문맥적으로 관련된 응답을 생성하며, 일관된 대화를 유지함.
     * 시맨틱 검색 엔진: 키워드 매칭 대신 의미적 유사성에 기반한 검색 결과를 제공함.
     * 텍스트 분류 시스템: 문서를 구문과 단어에 따라 분류함.
     * 추천 시스템: 키워드와 설명의 유사성에 따라 콘텐츠를 추천함.

데이터에 대한 벡터 임베딩 생성 방법

     * 데이터 수집: 텍스트, 오디오, 이미지, 시계열 데이터 등 다양한 데이터를 수집함.
     * 데이터 전처리: 토큰화, 노이즈 제거, 이미지 크기 조정, 정규화 등 데이터를 분석에 적합하게 처리함.
     * 데이터 분할: 텍스트를 문장이나 단어로, 이미지를 세그먼트로, 시계열 데이터를 간격으로 나눔.
     * 벡터화: 각 데이터 조각을 벡터로 변환함. 텍스트 데이터는 OpenAI의 텍스트 임베딩 모델, 이미지 데이터는 CNN 모델, 오디오 데이터는 스펙트로그램 등을 사용함.

벡터 임베딩 저장 방법

     * 벡터 데이터베이스: 벡터 데이터를 효율적으로 저장하고 검색할 수 있는 데이터베이스 사용.
     * PostgreSQL: 벡터 데이터를 다른 관계형 데이터와 함께 저장할 수 있음. pgvector 확장을 사용하여 벡터를 저장하고 쿼리할 수 있음.

   언어 모델 같이 문맥이나 의미 포착 성능을 높이기 위해 벡터크기를 키워왔는데요. 벡터의 크기가 커질수록 차원의 저주로 유클리드 거리는 유사도의 척도로는 적합하지 않다는 게 중론입니다. 그래서 벡터 간의 관계(유사도)는 코사인 유사도를 주로 사용하는 편입니다.

   최근 읽은 논문을 생각나게 하는 의견이네요. 때로는 모델에 따라 코사인 유사도 역시 의미가 없을 수도 있습니다. ""Is Cosine-Similarity of Embeddings Really About Similarity?"" (2024)

   임베딩(Embeddings)은 무엇이고 왜 중요한가
   머신러닝 분야의 임베딩(Embedding)에 대한 상세한 가이드
   AI에 호기심 있는 앱 개발자를 위한 좋은 시작점, Embeddings
"
"https://news.hada.io/topic?id=15059","와이파이 기반 위치 추적 시스템을 통한 대중 감시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      와이파이 기반 위치 추적 시스템을 통한 대중 감시

Wi-Fi 기반 위치 추적 시스템을 이용한 대규모 감시

  Wi-Fi 기반 위치 추적 시스템(WPS) 개요

     * Wi-Fi 기반 위치 추적 시스템(WPS): 근처 Wi-Fi 액세스 포인트(AP)를 이용해 모바일 기기의 위치를 파악하는 시스템임.
     * 애플의 WPS: 이 시스템이 전 세계적으로 프라이버시 위협을 초래할 수 있음.

  공격 방법 및 결과

     * 공격 방법: 권한이 없는 공격자가 Wi-Fi BSSID 지리적 위치를 단 며칠 만에 수집할 수 있는 공격 방법을 제시함.
          + MAC 주소 공간의 밀집 지역을 악용함.
     * 결과: 1년 동안 전 세계 20억 개 이상의 BSSID의 정확한 위치를 파악함.

  프라이버시 침해 사례 연구

     * 장기적 데이터 수집: 장기간 데이터를 수집하면 기기의 이동 경로를 추적할 수 있음.
          + 고정된 Wi-Fi AP: 대부분의 Wi-Fi AP는 오랜 기간 이동하지 않음.
          + 이동형 기기: 여행용 라우터 등 이동을 목적으로 설계된 기기 추적 가능함.
     * 사례 연구:
          + 전쟁 지역 추적: 우크라이나와 가자 지구에서 이동하는 기기 추적.
          + 자연 재해 영향 분석: 마우이 화재의 영향을 분석.
          + 개인 추적 가능성: 무선 액세스 포인트를 통해 특정 개인을 추적할 수 있음.

  프라이버시 보호를 위한 권고 사항

     * WPS 운영자 및 Wi-Fi AP 제조사: 수백만 사용자의 프라이버시를 보호하기 위한 권고 사항 제공.
     * 책임 있는 취약점 공개: 애플과 Wi-Fi AP 제조사에게 취약점을 알리고, 일부 완화 조치가 시행됨.

GN⁺의 의견

     * 프라이버시 침해의 심각성: Wi-Fi 기반 위치 추적 시스템이 대규모 프라이버시 침해를 초래할 수 있다는 점에서 심각한 문제임.
     * 기술적 취약점: MAC 주소 공간의 밀집 지역을 악용한 공격은 기술적으로 간단하지만 매우 효과적임.
     * 보안 강화 필요성: WPS 운영자와 Wi-Fi AP 제조사는 보안 강화 조치를 시급히 도입해야 함.
     * 사용자 인식 제고: 일반 사용자들도 이러한 프라이버시 위협에 대해 인식하고, 보안 설정을 강화할 필요가 있음.
     * 대체 기술 검토: Wi-Fi 기반 위치 추적 시스템의 대안으로 더 안전한 기술을 검토할 필요가 있음.
"
"https://news.hada.io/topic?id=15069","GraphQL Yoga - 모든 기능을 갖춘 GraphQL 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GraphQL Yoga - 모든 기능을 갖춘 GraphQL 서버

     * GraphQL 서버를 실행하는 가장 쉬운 방법: 합리적인 기본값 및 최소한의 설정으로 필요한 모든 것을 포함
          + 플랫폼/환경에 구애받지 않는 핸들러도 Export 하므로 자신만의 래퍼를 쉽게 구축할 수 있음
     * Subscription 포함: Server-Sent Events를 사용하는 GraphQL 구독 기능 기본 지원
     * 호환성: 모든 GraphQL 클라이언트(Apollo, Relay, Urql...)에서 작동하며 GraphQL 워크플로우에 잘 연동됨
     * WHATWG Fetch API: 핵심 패키지는 WHATWG Fetch API에 의존하므로 모든 환경(Lambda, Cloudflare Workers, Bun, Deno, Node,..)에서 실행 및 배포할 수 있음
     * 손쉬운 확장성: 모든 Envelop 플러그인을 지원
     * GraphQL Multipart Request 스펙 기반 파일 업로드 지원
     * Fully typed with TypeScript
"
"https://news.hada.io/topic?id=15125","존재하지 않는 메시지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              존재하지 않는 메시지

Microsoft Outlook 365 웹 인터페이스에서의 알림

  메시지 저장 불가 이유

     * 메시지가 존재하지 않음: 메시지가 존재하지 않기 때문에 저장할 수 없음.
     * 삭제만 가능: 존재하지 않는 메시지는 삭제만 가능함.

  메시지 삭제의 의미

     * 삭제의 정의: 삭제는 객체의 존재를 중지시키는 행위로 정의할 수 있음.
     * 저장과 삭제의 차이: 저장은 객체가 존재해야 가능하지만, 삭제는 객체가 존재하지 않아도 가능함.

  메시지 내용 복사

     * 복사 가능성: 삭제되지 않은 존재하지 않는 메시지는 내용을 복사할 수 있음.
     * 삭제 후 복사 불가: 메시지가 삭제되면 내용 복사가 불가능해짐.

  존재와 내용의 관계

     * 삭제의 영향: 삭제는 메시지의 존재뿐만 아니라 내용의 접근성에도 영향을 미침.
     * 내용의 존재 여부: 메시지가 삭제되면 내용이 존재하지 않거나 접근할 수 없게 됨.

GN⁺의 의견

     * 기술적 혼란: 존재하지 않는 메시지에 대한 조작은 사용자에게 혼란을 줄 수 있음.
     * 사용자 경험: 메시지의 존재 여부와 상관없이 일관된 사용자 경험을 제공하는 것이 중요함.
     * 기능 개선 필요: 메시지의 존재 상태에 대한 명확한 안내와 기능 개선이 필요함.
     * 기술적 구현: 메시지의 존재와 내용 접근성에 대한 기술적 구현 방식을 명확히 할 필요가 있음.
     * 경쟁 제품: Gmail 등 다른 이메일 서비스와 비교하여 이러한 기능의 차별성을 고려할 필요가 있음.

        Hacker News 의견

     * 철학 학위를 사용할 기회가 드디어 왔음. 메시지는 객체로 저장되거나 폐기될 수 있으며, 텍스트를 포함함.
     * 철학적 논의가 많지만, 실제로 중요한 문제는 서버에서 데이터가 삭제되었지만 클라이언트에 캐시된 복사본이 남아있음을 비기술 사용자에게 설명하는 것임.
     * 이 오류 메시지는 매우 Microsoft스러움.
     * 트랜잭션 롤백에 대한 철학적 생각을 해본 적이 있음. 롤백이 실패할 경우 트랜잭션의 상태와 복구 메커니즘에 대한 의문이 생김.
     * 이 메시지는 ""파일을 로드했지만 이제 파일이 더 이상 존재하지 않음""과 유사함. 로드된 복사본을 폐기하기 전에 내용을 복사하여 새 파일을 만드는 것이 좋음.
     * 원래 메시지(서버)와 로컬 복사본을 모두 ""메시지""로 참조하는 것 같음.
     * 메시지는 현실과 비현실을 연결하는 접착제임. 존재하고, 존재했으며, 존재하지 않았던 모든 상태를 동시에 가짐.
     * LLM이 환각을 일으킨다고 들었지만, 이제는 앱이 환각을 일으키는 것을 목격하고 있음. Microsoft의 또 다른 재미있는 오류 메시지가 떠오름.
     * 이러한 메시지들은 Microsoft에서 학습된 무력감 문화를 보여주었고, Linux로 전환하기로 결정하게 됨.
     * ""이 신용카드를 저장"" 또는 ""이 신용카드를 절대 저장하지 않음""이라는 선택을 본 적이 있음. 해싱 등을 고려하면 후자가 가능하지만, 재미있었음.
"
"https://news.hada.io/topic?id=15053","JWT를 인증 토큰으로 사용해야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         JWT를 인증 토큰으로 사용해야 할까?

     * JWT는 JSON Web Tokens의 약자로, 인증된 토큰을 위한 표준임.
     * JWT는 헤더, 페이로드, 서명 또는 메시지 인증 코드로 구성됨.
     * 검증 키를 가진 사람은 페이로드의 진위 여부를 확인할 수 있음.

JWT의 일반적인 사용 패턴

     * JWT는 발행자, 수신자, 주제, 만료 시간 등의 정보를 포함함.
     * 수신자는 토큰의 진위 여부를 확인한 후, 만료 시간이 지나지 않았는지 확인하고, 주제를 인증된 사용자로 간주함.

JWT의 장점

     * JWT의 주요 장점은 수신자가 사용자 데이터베이스에 연결하지 않고도 토큰의 진위를 확인할 수 있다는 점임.
     * 대규모 설치 환경에서는 인증 서비스가 중앙 사용자 데이터베이스에 접근하는 유일한 서비스가 될 수 있음.

로그아웃 및 세션 무효화 문제

     * 인증 토큰의 수명이 짧아야 함. 예를 들어, 최대 5분.
     * 클라이언트는 새로운 인증 토큰을 요청할 수 있는 리프레시 토큰도 발급받음.
     * 리프레시 토큰이 실제 세션 토큰 역할을 함.

JWT가 필요 없는 경우

     * 로그아웃을 구현하려면 유효한 JWT의 허용 목록 또는 취소된 JWT의 거부 목록을 유지해야 함.
     * 사용자를 차단하려면 데이터베이스에서 ""사용자 활성"" 플래그를 확인해야 함.
     * 사용자 객체와 다른 객체 간의 추가 관계가 필요함.
     * 데이터베이스와 관련된 작업을 수행함.

결론

     * 위의 조건 중 하나라도 해당된다면, JWT가 필요 없음.
     * 일반적인 불투명 세션 토큰을 사용하고 데이터베이스에 저장하는 것이 더 나음.
     * JWT의 단점을 피하고 복잡성을 줄일 수 있음.

GN⁺의 의견

     * JWT는 대규모 서비스에 적합하지만, 대부분의 소규모 서비스에는 과도한 복잡성을 초래할 수 있음.
     * 일반적인 세션 관리 메커니즘이 대부분의 웹 애플리케이션에 충분함.
     * JWT를 사용하면 로그아웃 및 세션 무효화와 같은 기능을 구현하는 데 어려움이 있을 수 있음.
     * JWT의 장점을 활용하려면 서비스의 규모와 요구 사항을 신중히 고려해야 함.
     * 다른 대안으로는 OAuth2와 같은 인증 프레임워크를 고려할 수 있음.

   다양한 클라이언트 인증이 필요할 때 JWT 사용으로 얻는 이득이 많았습니다.
   다만 확장성과 보안은 언제나 다른 방향을 바라보고 있기 때문에 보안이 특히나 중요하다면 다른 방법을 사용하는게 더 좋다고 생각합니다.

   개인적으로 jwt 토큰은 공개되도 상관없는 임시데이터들을 브라우저 통해 시스템간에 주고받을때나 쓰고
   인증에 사용되는 개인정보 담긴 토큰은 opaque 토큰을 쓰는게 낫다고 봅니다..

   개인 경험에 비추자면 MVP 를 만들 때 JWT 의 이점이 있었습니다.

   예를들어, 혼자서 만들고 유지하는 서비스라면 갑작스런 요청에 의한 기획비용을 줄인다는 생각인데요. 아무래도 처음에 세웠던 데이터 관계가 한 두달 뒤에는 완전히 달라져 버리다보니, 기획이 명확하게 나오지 않은 상태에서는 (auth 와 관련된 거 한해서) 차라리 JWT 페이로드 구성 시 옵셔널필드 형태로 가져가 피쳐 구현을 해놓으면, 기획단에서 도메인 분리랑 서비스 분리 업무를 하지 않아도, 일단 모놀리틱 서비스에서 도메인만 쉽게 분리하는 형태로 구현 후 시장 테스트 해볼 수 있었던 기억이 납니다. (그리고 추후 서비스를 분리하는 수순을 가져가는 겁니다. 아님 없애거나.)

   그렇지만 만들고자하는 서비스의 도메인별로도 다를 거 같습니다. 해당 프로젝트는 실시간 서비스 중에서도 써드파티랑 결합도가 높은 프로젝트다보니....아무래도 빠르게 구현하다보면 디비에 엄청난 양의 도큐먼트/row 들이 쌓이거나하면 관리 비용이 커질 거 같다는 생각 하에 진행했던 기억이 있습니다.

   물론, 빠르게 만드는데 집중하자면 세션 방식이 낫다고 봅니다. (초반에는 여러 서비스 간 커플링이 세지 않다보니 갈아엎고 다시 만들기도 편하고) 타 팀원 합류 시 인계비용도 적으니까요.

   당시에는 잠깐이라도 이래저래 고민했습니다만, 사실 지금와서 돌이켜보면 어느쪽으로 구현 했든 프로젝트의 영향도가 심각하지는 않았을 거 같네요.

   저는 개인적으로 api gateway를 쓸 때 auth구현을 jwt로 할 때 이득을 본다고 생각하는데, 작은 규모의 서비스에서 jwt가 갖는 이점이 어떤것이 있는지 궁금합니다. jwt에 담는 유저 정보를 자주 변경하는 케이스를 말씀하시는 것 인지요?

   말씀하신 것과 큰 틀에서는 같습니다. 단지, 유저 자체에 대한 모델링이 바뀌어 정보를 자주 변경해야하기보다는 새로운 피쳐 추가나 서드파티툴을 이용해야하는 새로운 서비스가 부가적인 정보를 요구할 때 옵셔널하게 추가하는 경우에 가까웠습니다. (조금 더 하자면 잠재적으로 auth 를 api gateway 같은 걸 이용해서 관리단위를 분리할지 말지, 혹은 그와 준하는 역할을 하는 서버가 하나 있을지 미묘한 상황속에서...)

   조금 구체적으로 예를 들면, A라는 서비스를 메인으로 가져가고 있는 상황이었는데요. MVP 다보니 결제정보나 인증된 유저인지 정보만 유저 테이블에서 가지고 있었습니다. 그런데 유저마다 다른 인증정보가 있어야 이용할 수 있는 서비스인 B와 C를 추가해달라는 요청이 들어온 상황이었습니다. 그중에서 또 B는 A라는 서비스 안으로 들어갈지 말지도 결정 안났고, C는 사라질수도 있어서 가볍게 테스트하고 싶어하는 상태였습니다. (플랜관리 기능은 말하지 않아도 추가해줘야 탈이 없었을 거고요). 이에 더해 B, C를 기존에 A 서비스를 제공하는 웹 서비스 페이지에서 같이 사용해보는 형태로 시작하고 싶어했습니다. 운영중인 서비스 특성상 플랜관리 테이블(혹은 범용적인 인증관련 테이블)을 만들어서 도메인 관계를 서비스마다 그려가지고 매핑해서 구현하기
   전까지는 여러 개의 테이블 조회(혹은 콜렉션 조회)가 불가피한 상황이었습니다. 이게 프로젝트를 정리해줄 사람이 있는 상황에서는 몇 번 회의도 해서 도대체 해결하고자 하는 문제는 뭐고 원하는 피쳐는 뭔지 뾰족하게 뽑았으면 좋았겠지만, 그게 보장되는 상황은 아니었습니다. 또 언제 이런 부채들을 걷어낼 수 있는지 불투명하기도 했고요. 그래서 이런 일이 벌어질 법 했던게 A라는 서비스 런칭 전부터 조짐이 보였어서...첫 구성 때 auth 시 최대한 조회비용/추후 관리비용을 아낄 수 있는 형태로 가자 생각하다보니 JWT 로 했습니다. 그외에도 자잘하게 비슷한 일들이 워낙 많았던 거 같습니다.

   하지만 댓 마지막에 언급했다시피 사실 뭘로 구현했어도 프로젝트 자체에는 아주 큰 영향은 없었을 거 같습니다. 세션으로 구현해놓았으면 세션 나름대로 방법을 찾았을 거 같아요. 오히려 개발자가 타 직무 일을 해야하는 상황이나 소통비용이 깨져야 하는 상황에 계속 노출되었던 게 훨씬 치명적이었던 거 같습니다.
     * JWT가 활용될 수 있는 경우는 드물며, 대부분은 전통적인 세션 방식이 어울립니다.
     * 생각보다 많은 개발자들이 JWT의 본질에 대해서 오해하고 있고, 여러 단점들을 간과한체 ""이거 쓰면 DB 적게 쓴다더라, 성능이 빠르다더라"" 라는 내용으로 커뮤니케이션 합니다.
     * 그 커뮤니케이션에 빠지게 되면, 공개키 방식의 인증 및 전자서명의 본질부터 이해시켜야하는데 굉장히 골치 아파집니다.
     * JWT는 고려 대상이 아니었는데, 블랙홀처럼 자꾸 회의를 이상한 방향으로 끌고가게 되었던 경험이 많습니다.

   모놀리스 구조에 적합하더라도 일부서비스를 분기시키거나 확장의 기로에 놓일때 jwt와 세션 기반 로직은 분명한 차이를 보입니다. 단순히 인증 절차가 아닌 내부 로직의 사용성에서 데이터의 원천을 다루는 기법들이 달라질텐데 작은 서비스라는 컨텍스트를 어떤기준에서 적합하게 판단할지 잘 모르겠습니다. 모든 서비스는 반드시 작을거라는 전제인 것인지. 큰 서비스는 쉽지않을거라는 전제인지 모르겠습니다. 하지만, 항상 우리가 만드는 서비스에는 어떤 상황일지 모르는 하지만 여전히 유용한 컨텍스트를 지지하는 구조를 최소한으로 갖춰야 하지 않나 싶습니다. 작은 서비스의 전제는 계속 작아질 뿐일것 같습니다.

        Hacker News 의견

    해커뉴스 댓글 요약

     * 전통적인 세션 메커니즘 사용 권장: 웹 프레임워크에서 제공하는 일반적인 세션 메커니즘을 사용하는 것이 좋음. JWT는 모든 상황에서 필요하지 않음.
     * 마이크로서비스 아키텍처에서 JWT 사용: 마이크로서비스 환경에서는 JWT가 유용함. 단일 모놀리식 웹 앱에서는 필요성이 적음.
     * JWT의 보안 문제: JWT가 보안에 취약할 수 있지만, 이는 잘못된 라이브러리 사용이나 설정 문제임. 신뢰할 수 있는 라이브러리를 사용하면 문제 없음.
     * JWT 사용 경험: JWT를 사용하여 문제를 해결한 경험이 있으며, 후회 없음.
     * AWS Cognito 사용: AWS Cognito를 사용하여 인증을 처리하면 MFA, 소셜 로그인, 이메일 인증 등을 쉽게 구현할 수 있음. JWT의 단점은 짧은 수명과 자주 갱신으로 해결 가능.
     * 외부 서비스와 JWT: 외부 서비스에서 JWT를 자주 사용함. JWT를 사용하면 개발자들이 하나의 개념만 알면 됨.
     * 작은 환경에서도 JWT 사용: 작은 환경에서도 JWT가 유용할 수 있음. 민감한 데이터 접근을 제한하고, 비용을 절감할 수 있음.
     * JWT와 세션 토큰 비교: 많은 실제 JWT 배포는 JWT를 세션 토큰으로 교환함. JWT는 IDP가 사용자 신원을 확인하는 데 유용함.
     * JWT의 장점: OAuth 2와 OIDC를 통해 인증 시스템을 표준화하고, 프론트엔드와 API 인증을 동일하게 처리할 수 있음.
     * JWT 사용의 편리함: Azure와 같은 환경에서 JWT를 사용하면 세션 상태를 걱정할 필요 없이 여러 API에 접근할 수 있음.
     * 기계 간 인증에서 JWT 사용: 기계 간 인증에서는 JWT가 가장 적합함. 예를 들어, Raspberry Pi 간의 통신에서 JWT를 사용하여 인증 및 권한 부여를 처리함.
"
"https://news.hada.io/topic?id=15044","Show GN: 랜덤지지 플레이 메이커 - 온라인 방탈출, 크라임씬 제작의 혁신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 랜덤지지 플레이 메이커 - 온라인 방탈출, 크라임씬 제작의 혁신

   랜덤지지 플레이 메이커: 손쉽게 온라인 방탈출 및 크라임씬 콘텐츠 제작 가능
     * 방탈출, 크라임씬을 포함한 다양한 멀티 플레이어 웹 콘텐츠 제작 지원
     * 실시간 채팅 및 Figma 스타일의 멀티 플레이어 기능 제공
     * 기기 제한 없이 웹 기반으로 제작 및 플레이 가능 (데스크탑)
     * 랜덤지지 스토어 또는 인콘텐츠 결제로 즉시 판매 및 수익화 가능
     * 텀블벅 펀딩 2915% 달성한 <토끼촌: 사라진 소녀의 비밀>도 이 도구로 제작됨

   제작자는 7년차 웹 개발자 & Unity 개발자 & 방탈출 마니아
     * Unity 엔진과 Figma로 부터 기본적인 아이디어를 훔침
     * 일반인도 콘텐츠를 제작하기 쉽도록 노코드로 로직 작성 가능
     * 웹소켓 기반의 실시간 멀티 지원. WebRTC 기반 음성 통화도 곧 지원 예정.

   공모전도 진행 중입니다. (문제시 삭제하겠습니다)
     * 공모전을 통해 제작되고 있는 콘텐츠가 다수 있습니다.
     * 1등에게 200만원을 상금으로 드리니 많은 참여 부탁드립니다 :)

   간단한 데모를 함께 제공하면 더욱 흥미가 생기고, 튜토리얼의 이해도도 높아질 것 같아요

   좋은 아이디어 감사합니다. 데모를 넣어보면 좋겠네요!

   너무 멋진 프로젝트입니다...!

   감사합니다!
"
"https://news.hada.io/topic?id=15159","OpenAI, ChatGPT Edu 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         OpenAI, ChatGPT Edu 공개

     * OpenAI가 대학을 위한 ChatGPT Edu 버전을 발표
          + GPT-4o 기반으로 텍스트와 비전을 통합 추론하고 데이터 분석 등 고급 도구를 사용할 수 있음
          + 엔터프라이즈급 보안과 제어 기능을 갖추고 있으며, 교육 기관에서 사용하기에 적합한 가격대를 제시함
     * 여러 대학에서 ChatGPT Enterprise를 성공적으로 활용한 사례를 바탕으로 ChatGPT Edu를 개발함
     * 현재 대학에서 ChatGPT를 다음과 같이 활용하고 있음
          + 학생들에게 개인 맞춤형 튜터링 제공 및 이력서 검토
          + 연구자들의 연구비 신청 지원
          + 교수진의 채점 및 피드백 지원
     * ChatGPT Edu의 주요 기능
          + GPT-4o 액세스 (텍스트 해석, 코딩, 수학에 탁월)
          + 데이터 분석, 웹 검색, 문서 요약 등 고급 기능
          + 대학 워크스페이스 내에서 사용자 정의 GPT 구축 및 공유 기능
          + 무료 버전보다 훨씬 높은 메시지 제한
          + 50개 이상의 언어 지원 및 품질과 속도 개선
          + 강력한 보안, 데이터 개인 정보 보호 및 관리 제어 기능
          + 대화 및 데이터가 OpenAI 모델 학습에 사용되지 않음
     * ChatGPT Edu는 AI를 학생과 캠퍼스 커뮤니티에 더 광범위하게 배포하려는 학교를 위해 설계되었음
"
"https://news.hada.io/topic?id=15060","Apache Lucene에서 영감을 받은 Tantivy 풀텍스트 검색 엔진 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Apache Lucene에서 영감을 받은 Tantivy 풀텍스트 검색 엔진 라이브러리

Rust로 작성된 빠른 전체 텍스트 검색 엔진 라이브러리

  소개

     * Tantivy는 Apache Lucene의 디자인을 강하게 참고한 검색 엔진 라이브러리임.
     * Elasticsearch나 Apache Solr의 대안으로 사용할 수 있는 Quickwit라는 분산 검색 엔진도 있음.
     * Tantivy는 검색 엔진 서버가 아니라 검색 엔진을 구축할 수 있는 크레이트임.

  벤치마크

     * 다양한 쿼리/컬렉션 유형에 대한 성능 벤치마크 제공.
     * 쿼리의 성격과 부하에 따라 성능이 달라질 수 있음.

  주요 기능

     * 전체 텍스트 검색: 다양한 언어에 대한 토크나이저 지원.
     * 빠른 성능: 빠른 시작 시간과 멀티스레드 인덱싱 지원.
     * BM25 스코어링: Lucene과 동일한 스코어링 방식.
     * 자연어 쿼리: 복잡한 쿼리도 자연스럽게 처리 가능.
     * 구간 쿼리 및 계층적 패싯 필드: 다양한 데이터 타입 지원.
     * 압축된 문서 저장소: LZ4, Zstd 등 다양한 압축 방식 지원.
     * JSON 필드 및 집계 수집기: 히스토그램, 범위 버킷, 평균 및 통계 메트릭 지원.

  비기능

     * 분산 검색은 Tantivy의 범위 밖임. 분산 검색이 필요하면 Quickwit을 참고할 것.

  시작하기

     * Tantivy는 안정적인 Rust에서 작동하며 Linux, macOS, Windows를 지원함.
     * tantivy-cli: 검색 엔진을 쉽게 만들고 인덱싱 및 검색을 할 수 있는 명령줄 인터페이스 제공.
     * 참고 문서: 최신 릴리스 버전에 대한 참고 문서 제공.

  프로젝트 지원 방법

     * Tantivy를 사용하고 경험을 공유.
     * 버그 리포트 제출.
     * 블로그 포스트 작성.
     * 문서화에 도움.
     * 코드 기여.

  코드 기여

     * GitHub Pull Request 워크플로우 사용.
     * 기여 시 GitHub 티켓 참조 및 포괄적인 커밋 메시지 작성.

  FAQ

     * 다른 언어 지원: Python, Ruby 등 다양한 언어 바인딩 제공.
     * 사용 예시: seshat, tantiny, lnx 등 다양한 프로젝트에서 사용.
     * 속도 비교: Lucene보다 약 2배 빠름.
     * 증분 인덱싱 지원: 예.
     * 문서 편집: 문서는 불변. 삭제 후 재인덱싱 필요.
     * 인덱싱 중 검색 가능 시점: commit 호출 후 검색 가능.

GN⁺의 의견

     * Rust 기반의 빠른 성능: Rust의 성능과 안전성을 활용한 빠른 검색 엔진으로, 성능이 중요한 프로젝트에 적합함.
     * 다양한 언어 지원: Python, Ruby 등 다양한 언어 바인딩을 통해 여러 환경에서 사용 가능.
     * 증분 인덱싱: 대규모 데이터 처리 시 유용한 기능.
     * 문서 불변성: 데이터 일관성을 유지하지만, 문서 수정 시 재인덱싱 필요.
     * Quickwit과의 연계: 분산 검색이 필요한 경우 Quickwit을 함께 사용하면 좋음.

        Hacker News 의견

     * 프로젝트 경험 공유: 오래된 Python2 AppEngine 코드베이스를 대체하기 위해 이 라이브러리를 사용하여 <a href=""https://progscrape.com"" rel=""nofollow"">progscrape.com</a>을 재구축했음. 라이브러리는 매우 빠르고, Raspberry Pi에서 1M 스토리를 몇 초 만에 인덱싱할 수 있었음. CPU 사용률이 매우 낮고, 검색 성능도 뛰어남.
     * ParadeDB와 Tantivy: 최근 ParadeDB(Postgres 확장)에서 Tantivy를 발견했음. 고성능 분석을 위해 Postgres를 확장하는 데 사용됨.
     * Quickwit와 Clickhouse: 다국어 검색 프로젝트에서 Quickwit와 Clickhouse의 결합된 성능이 매우 좋았음. 특히 중국어, 일본어, 한국어 검색에 유용했음.
     * to_tsvector의 한계: PostgreSQL의 to_tsvector가 특정 사용 사례에 잘 맞지 않았음. Tantivy의 성공을 기원함.
     * Quickwit의 생산 환경 배포: Quickwit를 사용해 수십억 개의 객체를 인덱싱했으며, 인덱싱 속도와 쿼리 지연 시간이 경쟁력 있음. 컴퓨팅과 스토리지의 분리가 매우 유용했음.
     * Tantivy의 성능: Tantivy의 성능과 창립자들의 노력에 감명받았음. 팀의 성공을 확신함.
     * Etsy/Hound의 트라이그램 검색: Russ Cox의 정규 표현식 매칭을 기반으로 한 Go 언어의 트라이그램 검색 인덱스를 사용한 경험이 있음.
     * Tantivy 선택 이유: Elasticsearch의 자원 소모에 실망하여 Tantivy를 선택했음. Rust로 프로젝트를 진행하고 싶었고, Tantivy의 성능과 문서화가 뛰어났음.
     * Lucene과 Solr의 업그레이드 문제: Lucene과 Solr의 인덱스 업그레이드 지원이 부족함. 많은 대형 프로젝트에서 재인덱싱이 매우 비싸고 때로는 불가능함.
     * 필드 추가/제거의 한계: Tantivy에서는 필드를 추가하거나 제거할 수 없으며, 모든 데이터를 다른 검색 인덱스로 재인덱싱해야 함.
     * Meilisearch 대안: Meilisearch의 텔레메트리 문제로 Tantivy를 대안으로 찾았음. 설정이 간단해 보임.
     * LanceDb와 Tantivy: LanceDb라는 벡터 데이터베이스 제품에서 Tantivy를 사용하여 전체 텍스트 검색 기능을 제공함. 현재는 Python 바인딩을 통해서만 가능하지만, Rust 바인딩을 구현하려고 함.
"
"https://news.hada.io/topic?id=15140","소수의 'supersharers'가 가짜 뉴스의 대부분을 확산","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   소수의 'supersharers'가 가짜 뉴스의 대부분을 확산

2020 미국 대선과 가짜 뉴스 확산 연구

  주요 내용

     * 가짜 뉴스 확산: 2020년 미국 대선 기간 동안 가짜 뉴스가 소수의 사람들에 의해 대규모로 확산됨.
     * 슈퍼셰어러: 약 2000명의 ""슈퍼셰어러""가 가짜 뉴스의 80%를 퍼뜨림.
     * 연구 결과: 연구에 따르면, 슈퍼셰어러는 주로 여성과 고령층이었으며, 이들은 대부분 공화당 지지자였음.
     * 자동화 아님: 이들의 활동은 자동화된 것이 아니라 직접 트윗을 리트윗하는 방식이었음.
     * 해결책 제안: 리트윗 수를 제한하는 것이 가짜 뉴스 확산을 줄이는 데 효과적일 수 있음.

  연구 배경

     * 이전 연구: 2019년 연구에서도 비슷한 결과가 나왔으며, 소수의 사용자가 대부분의 가짜 뉴스를 퍼뜨리는 것으로 나타남.
     * 데이터 분석: 66만 명의 미국 X 사용자 데이터를 분석하여 가짜 뉴스 확산의 주요 원인을 파악함.

  연구 결과

     * 슈퍼셰어러의 특징: 평균 나이 58세, 여성 비율 60%, 공화당 지지자 비율 64%.
     * 활동 패턴: 자동화된 패턴이 아닌 수동으로 리트윗하는 방식.
     * 사회적 영향: 소수의 슈퍼셰어러가 정보 생태계를 오염시키는 장기적인 사회기술적 과정임.

  해결책

     * 리트윗 제한: 하루 리트윗 수를 제한하면 가짜 뉴스 확산을 크게 줄일 수 있음.
     * 사용자 확인: 리트윗 전에 사용자가 정말로 리트윗을 원하는지 확인하는 절차 추가.

  GN⁺의 의견

     * 가짜 뉴스의 영향: 가짜 뉴스는 사회적 혼란을 초래할 수 있으며, 이를 막기 위한 다양한 접근이 필요함.
     * 리트윗 제한의 효과: 리트윗 수를 제한하는 것은 간단하면서도 효과적인 방법이 될 수 있음.
     * 사용자 교육: 사용자들이 가짜 뉴스를 식별하고 피할 수 있도록 교육하는 것도 중요함.
     * 기술적 대응: 플랫폼 자체에서 가짜 뉴스를 감지하고 차단하는 기술적 대응이 필요함.
     * 정책적 지원: 정부와 플랫폼 간의 협력이 필요하며, 이를 위한 정책적 지원이 요구됨.

        Hacker News 의견

     * 1990년대 초, 비기술직 직원들에게 이메일이 도입되었을 때, 일부 사람들이 ""레크리에이션 공유 장애""를 겪었음을 관찰함. 이로 인해 이메일 서비스에 큰 영향을 미쳤음.
     * ""가짜 뉴스""를 막는 것이 아니라, 사람들이 가짜 뉴스를 식별할 수 있는 도구를 제공하는 것이 중요함. 사람들이 여전히 가짜 뉴스를 퍼뜨린다면, 할 수 있는 만큼 한 것임.
     * 소수의 집중된 그룹이 사회에 큰 영향을 미칠 수 있음. 가짜 뉴스 문제는 일부가 진실로 밝혀져 혼란을 가중시킴. AI가 이 문제를 더 악화시킬 가능성이 있음.
     * 개인적으로는 소셜 미디어에서 ""리트윗"" 기능이 없는 것이 더 좋겠음. 팔로우하는 사람들의 실제 업데이트를 원함.
     * 신뢰의 웹이 다시 등장해야 함. 신뢰 관계가 깨지면 그 영향을 받는 시스템이 필요함. 신뢰할 수 없는 콘텐츠를 제거하는 방식으로 더 진정한 웹을 만들 수 있음.
     * ""가짜 뉴스""라는 용어는 너무 광범위하고 이념적으로 편향되어 있음. 더 세분화된 분류가 필요함.
     * 일부 사용자는 모든 트윗을 무작위로 리트윗하는 경향이 있음. 이로 인해 가짜 뉴스가 증폭되지만, 진정으로 인기를 끄는 데는 큰 역할을 하지 않음.
     * 더 나은 도구가 필요함. 현재의 광고 기반 인터넷은 정보의 질을 판단하기 어렵게 만듦. 신뢰할 수 있는 소규모 그룹과 점진적인 공유가 필요함.
     * ""가짜 뉴스""를 완전히 제거할 수는 없음. 중요한 것은 사람들이 스스로 생각하고 모든 것을 의심하도록 교육하는 것임.
     * ""The Tipping Point"" 책의 요점은 소수의 연결이 많은 사람들이 인기 있는 것을 만드는 원천이라는 것임.
"
"https://news.hada.io/topic?id=15129","25년 전, 파일 공유 혁명을 일으킨 Napster","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      25년 전, 파일 공유 혁명을 일으킨 Napster

Napster의 등장과 음악 산업의 변화

  Napster: 1999년 6월 1일

     * 1999년 6월 1일, Napster의 첫 공개 버전이 출시됨.
     * Napster는 전 세계 사람들이 음악 파일을 공유할 수 있는 중앙 음악 데이터베이스를 목표로 함.
     * 소프트웨어는 빠르게 인기를 끌며 수백만 명의 사용자들에게 무료로 음악을 탐색할 수 있는 기회를 제공함.

  음악 산업의 충격

     * Napster의 등장 후 몇 달 만에 음악 산업은 큰 충격을 받음.
     * 2000년 2월, 주요 음반사 임원들이 Napster의 위협을 논의하기 위해 모임.
     * Napster는 출시되지 않은 곡까지 검색할 수 있었고, 이는 음악 산업에 큰 위협으로 다가옴.

  Napster의 전성기

     * 2001년 초, Napster의 사용자 수는 전 세계적으로 2,640만 명에 도달함.
     * 그러나 법적 문제로 인해 2001년 7월 네트워크가 폐쇄됨.
     * Napster의 인기는 사라졌지만, 파일 공유는 계속해서 대중에게 매력적이었음.

  파급 효과

     * Napster는 애플의 아이튠즈 스토어와 같은 합법적인 디지털 음악 구매 옵션의 길을 열어줌.
     * 현재 음악 산업은 온라인 스트리밍 구독에서 대부분의 수익을 창출함.
     * 스포티파이의 CEO 다니엘 에크는 Napster의 영향을 받아 스포티파이를 창립함.

GN⁺의 의견

     * 기술 혁신의 중요성: Napster는 기술 혁신이 어떻게 산업 전체를 변화시킬 수 있는지를 보여줌.
     * 법적 문제: 파일 공유 기술은 법적 문제를 야기할 수 있으며, 이는 신중한 접근이 필요함.
     * 스트리밍 서비스의 성장: Napster의 영향으로 스트리밍 서비스가 성장했으며, 이는 현재 음악 소비의 주요 방식이 됨.
     * 사용자 경험: Napster는 사용자 경험을 중시하는 서비스가 얼마나 큰 영향을 미칠 수 있는지를 보여줌.
     * 미래 전망: Napster의 파급 효과는 앞으로도 계속될 것이며, 이는 새로운 기술과 서비스의 등장을 예고함.

        Hacker News 의견

     * Napster의 초기 경험: Napster는 당시의 음악 다운로드 방식에 비해 큰 개선이었으나, 오늘날의 기준으로는 매우 기본적인 수준이었음. 56k 인터넷으로 노래 하나 다운로드하는 데 3시간 이상 걸렸고, 가짜 파일을 받는 경우도 많았음. 현재는 TPB나 자동화 도구(lidarr, sonarr, radarr)를 통해 더 쉽게 음악을 얻을 수 있음. 현대의 불법 다운로드는 품질 경쟁이 치열해져서, 종종 공식 버전보다 더 나은 품질을 제공함.
     * 음질 차이: 한 친구가 나에게 음악을 받으러 왔는데, 그의 카 오디오 시스템이 매우 고가였음에도 불구하고, 직접 다운로드한 음악은 음질이 나빴음. 내 음악 컬렉션은 고품질로 유지되었지만, 그의 것은 낮은 비트레이트의 Napster 파일이었음. 토렌트가 등장하면서 고품질 음악 시장이 손상되었으나, 시간이 지나면서 회복됨.
     * 2000년대 초반의 추억: 2000년대 초반, 학교에서 돌아와 Napster를 설치하고 Metallica와 Limp Bizkit의 음악을 다운로드하던 기억이 있음. ICQ에 로그인해 친구와 대화하며 음악을 찾는 것이 매우 흥미로웠음.
     * Napster의 발견 메커니즘: Napster의 가장 좋은 점은 원하는 노래를 검색한 후, 해당 사용자의 공유 파일을 모두 볼 수 있었던 점임. 이는 놀라운 발견 메커니즘이었으며, 이후의 P2P 앱에서는 이 기능을 그리워했음. 현재는 Spotify가 이 역할을 어느 정도 대신하고 있음.
     * Napster의 역사적 배경: 젊은 세대를 위해 설명하자면, Napster는 CD와 라디오가 음악 배포의 주요 수단이던 시기에 등장했음. MP3 플레이어와 인터넷의 발전으로 음악 공유의 필요성이 생겼고, IRC 채널은 느리고 번거로웠음. 그래서 Napster, Gnutella, Hotline이 인기를 끌었고, 이후 eDonkey2000/eMule, KaZaA, Limewire, BitTorrent로 발전했음.
     * Napster의 마지막 날: Napster가 종료되던 마지막 날을 기억함. 수천 명의 사람들이 모든 파일을 다운로드하려고 몰려들었음. Napster는 음반사에 대한 반항의 상징이었고, 그날 음악 산업은 큰 변화를 겪었음.
     * 다큐멘터리 소식: Paramount+에서 ""How Music Got Free""라는 책을 바탕으로 한 다큐멘터리가 6월 11일에 방영될 예정임.
     * 파일 공유 혁명: Napster는 파일 공유 혁명을 시작했지만, 개인적으로는 Gnutella와 Bittorrent 같은 P2P 기술이 더 흥미로웠음. 이 기술을 통해 자유를 얻을 수 있다는 생각이 있었으나, 현재는 그 정신이 사라졌고, 암호화폐와 그 커뮤니티만이 남아 있음.
     * 어린 시절의 토렌트 경험: Napster 이후 토렌트를 사용해 게임을 다운로드하던 어린 시절의 기억이 있음. 처음에는 사기를 당했지만, 그 덕분에 토렌트를 배우게 되었고, 이후 여러 게임을 다운로드함. Spotify가 등장한 이후로는 음악을 더 이상 불법 다운로드하지 않게 되었음.
     * Outkast - Hey Ya.mp3: 특정 노래 제목을 언급하며, Napster를 통해 다양한 음악을 찾았던 경험을 상기시킴.
"
"https://news.hada.io/topic?id=15115","HN 공개: 특정 날짜와 시간에 맞춘 모든 산, 건물 및 나무 그림자 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: 특정 날짜와 시간에 맞춘 모든 산, 건물 및 나무 그림자 지도

그림자 변화 시각화 도구

  기능 소개

     * 시간대별 그림자 변화: 사용자가 특정 시간대를 선택하면 해당 시간대의 그림자 변화를 시각적으로 확인할 수 있음.
     * 날짜 선택 가능: 특정 날짜를 선택하여 그 날의 그림자 변화를 볼 수 있음.
     * 각도 표시: 그림자의 각도와 방향을 숫자로 표시해줌.

  사용 방법

     * 시간 선택: 하단의 시간대를 드래그하거나 클릭하여 선택할 수 있음.
     * 날짜 선택: 날짜를 선택하여 해당 날짜의 그림자 변화를 확인할 수 있음.
     * 각도 확인: 각 시간대별로 그림자의 각도와 방향을 확인할 수 있음.

GN⁺의 의견

     * 교육적 가치: 이 도구는 태양의 위치와 그림자의 변화를 시각적으로 이해하는 데 도움을 줄 수 있음.
     * 사용자 경험: 직관적인 인터페이스로 누구나 쉽게 사용할 수 있음.
     * 기술적 구현: 시간대별로 그림자의 변화를 정확하게 시각화하는 기술이 흥미로움.
     * 활용 가능성: 건축, 조경, 교육 등 다양한 분야에서 활용 가능함.
     * 개선점: 더 많은 사용자 맞춤 설정 기능이 추가되면 좋을 것 같음.

        Hacker News 의견

     * 페루의 나스카 라인이 산의 그림자와 일치하는 것 같음. 이를 보여주는 두 개의 비디오를 제작함.
     * 이 사이트는 훌륭하지만 대략적인 추정치에 불과함. 다양한 집과 휴가 렌탈에서 태양 위치를 확인하는 데 사용했음.
     * 사이트가 내 현재 위치로 자동으로 지도를 이동시킴. IP 지리 위치가 이렇게 정확하고 모든 웹사이트에서 접근 가능한지 궁금함.
     * 내 집을 확인했는데, 높은 참나무가 많아 그림자가 많이 생김. 그러나 사이트는 거의 완전히 햇빛이 비치는 것으로 표시함. 데이터 검증을 위해 업그레이드 버튼을 눌러야 함.
     * 건물이 로드되지 않는 줌 레벨에서는 그림자가 없는 것으로 처리됨. 이는 밀집된 도시 지역의 그늘을 크게 과소평가함. 클라이언트 측에서 그림자 렌더링을 하는 경우 해결하기 어려운 문제일 수 있음.
     * 높이 데이터가 없을 때 모든 건물을 동일한 높이로 설정하는 것 같음. 흥미롭지만 내 나라에서는 부정확함.
     * 티베트의 한 시골 마을을 확인했는데, 나무나 건물 정보가 없어서 도로 높이에 따라 그림자를 표시함. 따라서 높이 정보가 있는 경우에만 그림자를 그릴 수 있음.
     * 부둥킹 RV 사용자들을 위한 태양 에너지 생성량을 추정하는 앱을 만들고 싶었음. 유료 버전이 정확하다면 태양 에너지 생성 추정치를 개선하는 흥미로운 방법일 수 있음.
     * 군중 소싱된 휴대폰 이미지를 사용해 정확도를 높이는 버전을 만든다면 shademaps.com을 제공하겠음.
     * 태양이 낮고 교통을 마주할 때 자동차 사고가 더 자주 발생하는지 궁금함. 누군가가 교통사고, 지도, 시간 및 지구/태양 모델 데이터를 모아 이를 해결했을 것임.
"
"https://news.hada.io/topic?id=15155","HN에 묻다: 가장 겸손해진 학습 순간","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN에 묻다: 가장 겸손해진 학습 순간

큰 제품과 작은 제품에서의 경험

     * 다양한 언어와 플랫폼에서 복잡하고 추상적인 기술 문제를 해결해왔음
     * 어려운 조건에서도 많은 양의 코드를 작성해왔음
     * 친구나 동료들이 프로그래밍이나 기술적인 질문을 할 때 자주 도움을 주었음

창문 블라인드를 올리고 내리는 방법을 최근에 배움

     * 평생 동안 잘못된 방법으로 블라인드를 조작해왔음
     * 이 경험을 통해 자신이 얼마나 모르는 것이 많은지 깨닫게 됨

GN⁺의 의견

     * 기술적 경험의 중요성: 다양한 언어와 플랫폼에서의 경험은 문제 해결 능력을 키우는 데 매우 중요함. 이는 초급 엔지니어들에게도 큰 도움이 될 수 있음.
     * 지식의 한계: 아무리 많은 경험을 쌓아도 여전히 모르는 것이 많다는 점을 인식하는 것이 중요함. 이는 지속적인 학습의 필요성을 강조함.
     * 겸손함: 작은 실수나 새로운 발견이 겸손함을 유지하게 해줌. 이는 개인의 성장에 긍정적인 영향을 미침.
     * 동료와의 협력: 동료나 친구들과의 지식 공유는 서로의 성장을 도울 수 있음. 이는 팀워크와 협력의 중요성을 강조함.

        Hacker News 의견

    해커뉴스 댓글 요약

     * 1993년 면접 경험: 데이터 센터 면접에서 Windows 운영체제를 몰라 창문 청소업체를 언급한 후, 결국 그 일을 얻게 됨.
     * 가치 창출의 중요성: 복잡한 프로젝트보다 간단한 코드로 가치를 창출하는 것이 스타트업에 중요함을 깨달음.
     * 대학 시절의 경쟁자: 모든 면에서 뛰어난 사람을 만나며, 자신이 최고가 될 필요는 없음을 깨달음.
     * 스페인에서의 빵 경험: 언어 장벽으로 빵 이름을 잘못 이해해 웃긴 상황을 겪음.
     * 스타트업에서의 성장: 초기에는 비효율적인 코딩 습관으로 큰 실수를 했지만, 이를 통해 QA 프로세스를 개선하고 성장함.
     * 시스템 관리자 문제: 회사 정책에 따라 시스템 관리자의 잘못된 행동을 보고했지만, 나중에 더 나은 방법이 있었음을 깨달음.
     * 아이디어의 중요성: 아이의 간단한 질문이 문제를 쉽게 해결하는 데 큰 도움이 됨.
     * 성공의 기준: 능력보다 시스템을 잘 활용하는 것이 성공에 더 중요함을 깨달음.
     * 모든 사람에게 배울 점: 모든 사람에게 배울 점이 있다는 조언을 통해 더 나은 결과를 얻음.
     * 추운 날씨에서의 교훈: 난로 문제로 인해 화재 위험을 깨닫고, 이를 해결하며 중요한 교훈을 얻음.
"
"https://news.hada.io/topic?id=15161","cuDF - GPU DataFrame 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       cuDF - GPU DataFrame 라이브러리

     * 데이터 로드/조인/집계/필터링 및 기타 데이터 조작을 위한 GPU 기반 데이터 프레임 라이브러리
     * 매우 빠른 C++/CUDA 기반 라이브러리인 libcudf를 이용
     * pandas 처럼 import 해서 사용 가능
     * 또는 cudf.pandas 를 이용해서 코드 변경 전혀 없이 기존 pandas를 교체하여 GPU 가속 가능
"
"https://news.hada.io/topic?id=15121","손으로 그린 스케치 스타일의 UI 요소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         손으로 그린 스케치 스타일의 UI 요소

Wired Elements

  개요

     * Wired Elements는 손으로 그린 듯한 스케치 스타일의 UI 요소들을 제공하는 라이브러리임.
     * 와이어프레임, 목업, 또는 재미있는 손그림 스타일을 위해 사용할 수 있음.
     * 요소들은 약간의 무작위성을 가지고 그려져서, 두 번의 렌더링이 동일하지 않음.

  데모

     * 간단한 데모: rough.js를 사용하여 그려진 스케치 원을 wired-element 컨트롤로 변경하는 예시를 제공함.

  라이브 데모

     * Sandbox에서 실시간으로 wired-elements를 사용해보기:
          + Vanilla JS: 기본 자바스크립트로 wired-elements 사용 가능.
          + Vue: Vue 프레임워크에서 wired-elements 사용 가능.
          + Svelte: Svelte 프레임워크에서 wired-elements 사용 가능.
          + React: React 래퍼 컴포넌트를 사용하여 wired-elements 사용 가능.

  문서

     * 사용 방법: wired-elements 사용 방법은 GitHub 페이지에서 확인 가능.
     * API 문서: 특정 요소의 API는 문서 페이지에서 확인 가능.

  구성 요소

     * 모든 wired 요소들의 구성 요소 쇼케이스 제공.

  크레딧

     * RoughJS와 Lit을 사용하여 wired-elements가 구축됨.

  프로젝트 지원

     * Open Collective 또는 GitHub에서 프로젝트 개발을 후원할 수 있음.

  라이선스

     * MIT 라이선스 (c) Preet Shihn.

GN⁺의 의견

     * 디자인 유연성: 손으로 그린 듯한 스타일은 독특한 디자인을 원하는 프로젝트에 유용할 수 있음.
     * 프레임워크 호환성: 다양한 프레임워크와 호환되어 사용자의 선택 폭이 넓음.
     * 무작위성: 무작위성 요소가 있어 매번 다른 결과를 얻을 수 있어 신선함.
     * 학습 곡선: 초급 엔지니어에게는 새로운 라이브러리를 배우는 데 시간이 걸릴 수 있음.
     * 대안: 비슷한 기능을 제공하는 다른 라이브러리로는 Paper.js, Konva.js 등이 있음.

        Hacker News 의견

     * Pencil and paper: 코드 작성 없이 손으로 그린 듯한 스케치 느낌을 줄 수 있음.
     * Balsamiq Wireframes: 빠르고 간단한 목업 제작에 유용한 도구로 추천됨.
     * 코드 작성: 빠르고 간단한 목업 제작의 취지에 맞지 않음.
     * 디자인 피드백: 체크박스를 토글할 때마다 손으로 다시 그린 듯한 느낌을 주면 좋겠음.
     * WireText: 손으로 그린 스타일의 목업을 빠르게 만들 수 있는 VSCode 플러그인에서 영감을 받음.
     * 스케치 UI 요소: 스케치 스타일의 UI 요소는 좋지만, 스케치 폰트는 별로임. 일반 산세리프 폰트와 스케치 UI가 스타일적으로 맞지 않음.
     * Balsamiq 회상: 약 10년 전 유행했던 Balsamiq를 떠올리게 함.
     * 스케치 목업 사용 이유: 사용자들이 완성된 인터페이스가 아님을 이해하도록 하기 위해 사용했음.
     * 실제 제품 사용: 이 스타일을 실제 제품이나 베타 버전에 사용하고 싶지만, 추가 작업이 너무 많을 것 같음.
     * DoodleCSS 추천: DoodleCSS도 좋아할 것 같음.
     * rough.js: 훌륭한 도구이며, excalidraw에도 사용되고 있음.
"
"https://news.hada.io/topic?id=15078","군중 속 한 사람의 목소리를 듣게 해주는 AI 헤드폰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     군중 속 한 사람의 목소리를 듣게 해주는 AI 헤드폰

AI 헤드폰: 군중 속에서 한 사람의 목소리만 듣기

  주요 내용

     * 연구 배경
          + 소음 제거 헤드폰은 특정 소리를 차단하는 데 뛰어남.
          + 하지만 사용자가 특정 소리만 듣고 싶을 때는 한계가 있음.
     * 새로운 시스템 개발
          + 워싱턴 대학교 팀이 ""Target Speech Hearing""이라는 AI 시스템 개발.
          + 사용자가 헤드폰을 착용하고 3~5초 동안 특정 사람을 바라보면 그 사람의 목소리만 들을 수 있게 함.
          + 이 시스템은 사용자가 움직이거나 다른 방향을 보더라도 특정 목소리를 계속 들려줌.
     * 사용 방법
          + 마이크가 장착된 일반 헤드폰을 착용하고, 특정 사람을 바라보며 버튼을 누름.
          + 헤드폰이 해당 사람의 목소리 패턴을 학습하고, 다른 소리를 차단함.
          + 시스템은 사용자가 움직여도 특정 목소리를 계속 추적함.
     * 연구 결과
          + 21명의 실험 참가자들이 시스템의 음성 명료도를 평가한 결과, 기존 오디오보다 두 배 더 명확하게 들린다고 평가함.
          + 현재는 한 번에 한 명의 목소리만 등록 가능하며, 동일 방향에서 큰 소리가 나면 등록이 어려움.
     * 미래 계획
          + 시스템을 이어버드와 보청기로 확장할 계획.

  GN⁺의 의견

     * 기술의 유용성
          + 소음이 많은 환경에서 특정 사람의 목소리를 명확히 들을 수 있어 회의나 강연 등에서 유용할 수 있음.
     * 기술의 한계
          + 현재는 한 번에 한 명의 목소리만 등록 가능하다는 점에서 다소 제한적임.
          + 동일 방향에서 큰 소리가 나면 등록이 어려운 점도 개선이 필요함.
     * 기술의 확장 가능성
          + 이어버드와 보청기로 확장되면 더 많은 사용자에게 도움이 될 수 있음.
     * 경쟁 기술
          + 비슷한 기능을 제공하는 다른 소음 제거 기술과의 비교가 필요함.
     * 실용성
          + 실제 상용화되기 전까지는 연구 단계에서의 성능과 실생활에서의 성능 차이를 고려해야 함.

        Hacker News 의견

     * 작은 크기의 이어플러그 크기로 줄어든다면, 청각 장애가 없는 사람으로서 사용하고 싶음. 바쁜 식당이나 바에서 대화가 잘 안 들려서 답답함을 느끼는 상황을 해결할 수 있을 것 같음.
     * 청각 보조 기기의 비싼 가격과 품질 문제. 기본적인 소리 증폭 기능만 있는 기기도 매우 비쌈. 또한, 귀에 간섭하여 다른 소리들을 걸러내는 능력을 잃게 만듦.
     * 페이스북의 AR 연구가 저렴한 실험 플랫폼 제공. 눈 추적, 마이크 배열, 전면 카메라가 있어 쉽게 조정 가능한 마이크로 변형 가능.
     * 청각 장애인에게는 이런 기능이 신의 선물. 청각 보조 기기에 이 기능이 ASAP 통합되길 바람.
     * 이 기능이 이명 치료에 도움될 수 있음. 한 사람이 말할 때는 잘 들리지만, 여러 사람이 말하거나 음악이 있을 때는 아무것도 들리지 않음.
     * 오픈 소스 코드와 연구 논문 링크 제공. 독립적으로 작동시킬 수 있는지 궁금함.
     * 상업적 성공 가능성. 시끄러운 사람의 목소리를 음소거할 수 있는 기능을 상상해보라.
     * Sonos에서 일할 때 비슷한 기능을 연구. ANC 칩셋을 통해 특정 사람의 목소리만 들리게 하는 기능을 개발하려 했음.
     * 코드 링크 제공. (https://github.com/vb000/LookOnceToHear)
     * ADHD로 인해 바쁜 방에서 대화가 어려움. 대화 상대의 목소리만 들리게 하는 기능이 매우 유용할 것 같음.
     * ANC 기능이 있는 헤드폰이 집에서 유용할 수 있음. 파트너의 목소리를 자동으로 통과시키는 기능이 있으면 좋겠음.
"
"https://news.hada.io/topic?id=15118","Polyfill.io, 중국 CDN 기업에 인수된 후 보안 및 안정성 문제 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Polyfill.io, 중국 CDN 기업에 인수된 후 보안 및 안정성 문제 발생

   웹 개발자들에게 널리 사용되었던 Polyfill.io 서비스가 최근 중국 기반의 CDN 기업 'Funnull'에 인수되면서 심각한 보안 및 안정성 문제가 발생하고 있다. Polyfill.io는 Financial Times 웹 팀에 의해 개발된 후, 커뮤니티 관리로 넘어갔다가 최근에는 중국의 CDN 기업에 매각되었다.

   트위터에서 Polyfill.io의 원래 창립자인 Andrew Betts는 이번 인수에 대해 우려를 표명했다. 인수 후 Polyfill.io의 도메인은 중국 기반의 서버로 이전되었고, 반환되는 파일들에 문제가 생기기 시작했다. 이에 대한 자세한 내용은 GitHub 이슈 페이지(https://github.com/polyfillpolyfill/polyfill-service/issues/2834)에서 확인할 수 있다.

   Funnull은 미국에서 운영되고 있다고 주장하지만, 웹사이트에 주로 간체 중국어가 사용되고 있다는 점에서 이러한 주장에 대한 의문이 제기되고 있다. 또한 Funnull은 이전에 베팅 및 포르노 산업에 서비스를 제공한 이력이 있어 더욱 논란이 되고 있다.

   이 인수 이후로 Polyfill.io 서비스는 극도로 불안정해졌으며, 여러 문제가 지속적으로 보고되고 있다(polyfillpolyfill/polyfill-service#2835, polyfillpolyfill/polyfill-service#2838, alist-org/alist#6100). 이에 대응하여 Fastly와 Cloudflare는 Polyfill.io 서비스를 대체할 수 있는 독자적인 인스턴스를 제공하기 시작했다.

   Fastly는 무료로 서비스를 제공하는 Fast Forward 프로그램의 일환으로 https://polyfill-fastly.io/ 도메인을 설정해 사용자들이 Polyfill.io에서 벗어날 수 있도록 지원하고 있다. 그러나 이 도메인이 장기적인 해결책이 될 수 있을지는 아직 불확실하다.

   이와 같은 상황에서 웹 개발자들은 Polyfill.io를 사용하는 대신 다른 신뢰할 수 있는 소스를 찾아보는 것이 좋다. Polyfill.io의 새로운 운영 방식과 투명성 부족으로 인해 보안 및 안정성 문제가 계속해서 제기되고 있기 때문이다.

   https://web.archive.org/web/20240229113710/…
   https://web.archive.org/web/20240414034006/…
   https://web.archive.org/web/20240227105037/…
   링크된 이슈가 모두 삭제된것으로 보입니다.

   https://github.com/alist-org/alist/issues/6100
   6100 이슈를 보니 폴리필이 필요하지 않은 상황에서 폴리필이 되는게 문제로 보이는데(아마 캐싱 설정을 대충 해둔것 같네요)

   https://x.com/triblondon/status/1761852117579427975
   창립자 Andrew Betts는 더이상 polyfill이 필요하지 않다 이야기하고 있습니다. 구형 브라우저 지원을 제외하면 사실상 브라우저간 기능차는 거의 없고 있더라도 스크립트 하나로 차이점을 메꿀수 없는 경우인것이 다수라고 주장합니다.
"
"https://news.hada.io/topic?id=15105","2024년 5월, 구글 SEO 알고리즘 내부 문서 유출 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2024년 5월, 구글 SEO 알고리즘 내부 문서 유출 정리

   해외에서는 구글 SEO 알고리즘이 유출되었다고 떠들석한데요, 관련 내용을 정리해보았습니다. 지금까지 구글의 과거 발언과 상충되는 내용도 다수 포함되어 있는데요, 더 자세한 내용은 포스트를 참고해주세요.
    1. 클릭률과 체류시간
       구글은 클릭률(CTR)과 체류시간(dwell time)이 검색 순위에 큰 영향을 미치지 않는다고 주장해왔습니다. 그러나 문서에는 이 지표가 실제로 순위에 영향을 미친다는 내용이 포함되어 있습니다. 이는 콘텐츠 품질이 여전히 중요한 요소임을 시사하며, 클릭해보고 싶은 제목을 만드는 것이 중요하다는 걸 의미합니다.
    2. 신생 웹사이트 샌드박스
       구글은 신생 웹사이트를 구글 샌드박스에 포함시키지 않는다고 밝혔습니다. 그러나 문서에는 'hostAge'라는 속성이 포함되어 있어, 신생 웹사이트를 샌드박스에 포함시키는 시스템이 존재함을 보여줍니다. (샌드박스에 대한 자세한 내용은 포스트를 참고해주세요)
"
"https://news.hada.io/topic?id=15133","수면이 뇌의 노폐물 제거에 도움이 될까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        수면이 뇌의 노폐물 제거에 도움이 될까요?

     * 수면이 뇌의 노폐물을 처리함으로써 알츠하이머 등의 질환율을 낮춘다는 것은 유명한 가설임.
     * 하지만 최근 Nature Neuroscience 에 출판된 논문 은 뇌의 노폐물 처리 시스템이 통념과 다를 수 있음을 시사함.
     * 쥐의 뇌에 염료를 집어넣고 염료의 농도를 측정하는 실험 결과, 오히려 수면중이거나 마취중일 때보다 깨어있을때 염료 농도가 적다는 것을 발견함.
     * 하지만 해당 연구가 기존 통념(자는 동안 뇌는 노폐물을 처리한다)를 완전 반박하는 증거가 되기에는 논쟁의 여지가 있음.

    1. 잠자고 있는 동안 뉴런은 수축하고 혈관의 압력이 바뀐다는 주장이 있음. 잠 잘때와 깨어있을때 둘다 똑같은 정도로 염료를 주입하는 해당 실험은 잘못된 해석을 부를 수 있음(염료가 들어가는 정도와 빠져나오는 정도가 깨어있을때와 잠자고 있을때 각각 다를텐데, 해당 연구로는 그 둘을 완전히 분리해서 볼 수 없음).
    2. 뇌의 노폐물 처리 시스템은 섬세하기 때문에 염료를 주입하는 과정에서 손상이 있었을 수도 있음.
    3. 작은 염료 분자와 커다란 노폐물 분자들은 뇌에서 처리하는 과정이 다를 수 있음.

   근데 뇌에서 노폐물이 정확히 뭔가요?

   에너지의 부산물이 아닐까 싶네요. 장작으로 불을 피우고 나면 재가 남듯이 뇌가 하루 동안 에너지를 소모할 때도 그런 게 생기니까요.

   와 불면째문에 고민이였는데 자세히 봐야겠네요
"
"https://news.hada.io/topic?id=15117","Show GN: fieldenum: 파이썬에서의 러스트식 필드형 enum 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: fieldenum: 파이썬에서의 러스트식 필드형 enum 지원

     * fieldenum은 값을 가지는 (인스턴스화할 수 있는) enum입니다.
     * 러스트의 필드 있는 enum을 깔끔하게 지원합니다.
     * 함수형 프로그래밍의 순수성과 파이썬에서의 실용성 사이의 균형을 잡기 위해 노력했습니다.
     * 기본으로 None의 대안인 Option이나 예외의 대안인 BoundResult을 지원합니다.
     * 완전히 테스트되어 있습니다.
     * 아직 영문 문서가 빈약하지만 점차 보강해 나갈 계획입니다.
     * 이슈, PR, star 등의 다양한 형태의 지원들을 모두 환영합니다.

   dataclass의 union 타입이 더 낫지 않을까 하는데 선언문이 짧은거 빼고는 장점을 잘 모르겠네요. fieldenum이 특별히 나은점이 있을까요?

   선언이 짧고 간결하며 필요한 부분만 있는 것 또한 큰 장점입니다.
   예를 들어,
from fieldenum import fieldenum, Variant, Unit


@fieldenum
class Message:
    Quit = Unit
    Move = Variant(x=int, y=int)
    Write = Variant(str)
    ChangeColor = Variant(int, int, int)

   위에 있는 fieldenum을 dataclass로 구현하려면 다음과 같이 짜야 합니다.
from dataclasses import dataclass
from typing import Self


class Message:
    Quit = Self
    Move = Self
    Write = Self
    ChangeColor = Self


class QuitMessageClass(Message, metaclass=ParamlessSingletonMeta):
    pass

QuitMessage = QuitMessageClass()


@dataclass(frozen=True, kw_only=True)
class MoveMessage(Message):
    x: int
    y: int


@dataclass(frozen=True)
class WriteMessage(Message):
    _0: str


@dataclass(frozen=True)
class ChangeColorMessage(Message):
    _0: int
    _1: int
    _2: int


Message.Quit = QuitMessage
Message.Move = MoveMessage
Message.Write = WriteMessage
Message.ChangeColor = ChangeColorMessage

   코드가 길어지고 보기도 어려워졌고, 실수할 가능성도 높으며, 코드가 깔끔하다고 느껴지지는 않죠?

   물론 이렇게 짜더라도 fieldenum에서 제공하는 더 많은 다른 기능들(제너릭, repr, __fields__, ...)은 제공받을 수 없습니다.

   따라서 이 모든 것들을 구현하고 모아놓은 fieldenum이 있으면 훨씬 편리합니다.

   그 외에도 예시 파트에 있는 내용을 참고해 보시면 좋을 듯 합니다.
from dataclasses import dataclass

@dataclass(frozen=True) # repr True by default
class QuitMessage:
    pass

@dataclass(frozen=True, kw_only=True) # repr True by default
class MoveMessage:
    x: int
    y: int

@dataclass(frozen=True) # repr True by default
class WriteMessage:
    _0: str

@dataclass(frozen=True) # repr True by default
class ChangeColorMessage:
    _0: int
    _1: int
    _2: int

Message = QuitMessage | MoveMessage | WriteMessage | ChangeColorMessage

    1. dataclass는 기본적으로 repr 구현을 지원합니다
    2. dataclasses.fields는 필드 정의에 대한 실행시간 정보를 제공합니다
    3. 지네릭은 typing 모듈에 의해 3.5부터, syntactic sugar는 3.12부터 지원합니다
    4. Messages 이름 공간의 경우 모듈로 구현 가능합니다

   그럼에도 불구하고 class 정의에 필요한 보일러플레이트 코드가 없다는 점, enum과 class를 한가지 인터페이스로 사용할 수 있는 점이 장점이 될 수 있겠네요. 상세한 설명 감사합니다

   https://stackoverflow.com/a/47784683

   이런 식으로 구조체를 표현하고자 하는 시도들이 여러가지가 있어왔는데, 결국에는 파이썬의 한계이자 단점으로 볼 수 있을 것 같습니다. ADT(algebraic data type)를 학교 수업때 ocaml로 처음 접했었는데 일할때는 이런 식으로 흉내만 내야 한다는 게 좀 안타깝기도 하네요

   ilotoki님께서 만드신 라이브러리가 가장 ADT에 근접한 사례로 볼 수 있을 것 같습니다. 언젠가 표준 라이브러리에 포함되고 널리 쓰이게 된다면 좋을 것 같습니다

   Message의 구현은 Union으로 하게 된다면 메서드 상속을 이용할 수 없습니다. 예를 들어
from fieldenum import fieldenum, Variant, Unit


@fieldenum
class Message:
    Quit = Unit
    Move = Variant(x=int, y=int)
    Write = Variant(str)
    ChangeColor = Variant(int, int, int)

    def process(self):
        ...

   위와 같이 .process 메서드를 추가하면 모든 배리언트들에 대해 .process() 메서드를 사용할 수 있습니다.
# Message.process() 메서드를 각 배리언트에서 사용 가능
Message.Quit.process()
Message.Move(x=123, y=456).process()
Message.Write(""hello, world"").process()
Message.ChangeColor(123, 000, 89).process()

   또한 제가 설명드린 repr는 '해당 enum의 배리언트로서의 repr'를 의미한 것입니다.
   예를 들어 fieldenum을 repr를 감싸 호출하면 다음과 같이 실행됩니다.
print(repr(Message.Move(x=123, y=456)))  # Message.Move(x=123, y=456)

   커스텀 __repr__가 없으면 Message enum의 하위 배리언트라는 사실이 표현되지 않습니다.

   Quit은 유닛 배리언트로 호출 없이 사용합니다.
Message.Quit  # 별도의 호출 (예: `Message.Quit()`) 없이 사용 가능

   또한 호출을 사용해야 하는 배리언트 종류인 fieldless 배리언트의 경우에는 싱글톤으로서 is 연산자로 확인할 수 있습니다.
from fieldenum import fieldenum, Variant, Unit

class WithFieldless:
    Fieldless = Variant()

assert WithFieldless.Fieldless() is WithFieldless.Fieldless()

   fieldenum을 사용하면 이렇게 놓치기 쉬운 다양한 구현 디테일을 자동으로 챙기는 데에 도움이 됩니다.

   혹시 파이콘 한국에서 발표해주시면 어떨까 제안드려봅니다. 너무 재미있게 봐서, 만드시는 과정에 있으셨던 이야기와 설명을 직접 듣고 싶습니다!

   파이콘에서 발표하게 되면 정말 영광일 것 같네요. 제가 하고 싶다고 해서 할 수 있을지는 모르겠지만(^^;) 고민해 보겠습니다.

   그리고 영문 README 에 Option 예시도 설명되었으면 좋겠네요.
   Option 은 쉽게 이해되고 친숙하게 접근할수 있을테니까요. 문서상 설명 순서에서 Option을 먼저 설명하면 더 좋을것 같기도 합니다.

   영어 문서는 아직 준비 중이라 조금 빈약합니다... 한국어 문서가 충분히 무르익으면 영어로 번역하려고 합니다. 혹은 관련 PR도 환영합니다!
   저도 Option을 먼저 소개하는 것이 더 나아 보이네요. 수정하겠습니다.

   오오. 신기하네요!!
   링크주신 한글 문서 예시 코드에 수정사항이 있습니다.
from fieldenum import fieldenum, Variant, Unit, unreachable
from fieldenum.enums import Option

def hello() -> Option:  # GOOD
    return Option.Some(""hello"")

def print_hello(option: Option):  # GOOD
    print(value.unwrap()) #!!!!! 여기에 value가 아니라 option 이어야 할것 같아 보이네요 !!!!!#

value = hello()
print_hello(value)

   알려주셔서 감사합니다. 수정했습니다!

   Show GN으로 올려야 하는데 실수로 일반으로 올렸네요;;

   수정해두었습니다.

   감사합니다~
"
"https://news.hada.io/topic?id=15154","Show GN: DGM.js - 스마트 도형을 지원하는 오픈소스 무한 캔버스 React 컴포넌트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: DGM.js - 스마트 도형을 지원하는 오픈소스 무한 캔버스 React 컴포넌트

   이전에 소개했던 웹기반의 스케치노트 앱인 DGM의 핵심 캔버스 부분을 오픈소스(non-commerical)화 하였습니다. 다음과 같은 기능들이 제공됩니다.
     * 💡 스마트 도형 지원 (각 도형에 스크립팅, 제약조건, 확장 속성 부여 가능)
     * 🔧 스타입 업는(headless) React 컴포넌트
     * 🔥 무한 캔버스 지원
     * 📑 다중 페이지 지원
     * 👍 손그림 스타일 지원
     * 👥 실시간 협업 지원 (Yjs 기반 플러그인)
     * 🎨 다크 모드 (색상 자동 적응)
     * 📸 이미지로 내보내기 (PNG, SVG)
     * 🔤 Rich text 지원
     * 🧑🏻‍💻 JSON 으로 내보내기, 가져오기 지원
     * 기타 등등...

   https://dgmjs.dev/

   라이선스가 GPLv3 로 변경되었습니다

   non-commercial 이라면 open source가 아닙니다

   제가 이분 말에 동의하는 게, OSI가 정의하는 오픈 소스 정의가 있습니다. 제가 보기엔 ""특정 제품을 위안 라이선스가 아니어야 한다"" 에 위배되어 오픈소스가 아니라고 보여집니다.
   님 ""제품""과 가장 유사한 라이선스인 Commons Clause License를 보시면 스스로도 ""오픈소스가 아님""을 명시하고 있습니다.
   또한, AI 모델 언급하셨는데, 거기서 제시한 모델의 라이선스 또한 ""오픈소스"" 언급을 피하거나 하지 않고 있습니다. 이는 라마도 마찬가지입니다. 라마는 오픈소스라 공언한 적 없습니다. 언론과 사용자가 멋대로 오픈소스라고 떠돌고 다닌 거죠.
   따라서, 오픈소스가 아닌 공정이용에 해당한다고 저는 생각합니다.

   라이선스를 GPLv3 로 변경했습니다. 이제 ""오픈소스""라고 부를 수 있겠네요

   정확한 정보 감사합니다

   오픈 소스에는 다양한 라이선스가 있습니다. 특히 최근 오픈 소스 AI 모델에 상업적 이용이 제한된 것들이 많습니다.

   저도 오픈소스의 정의에 대해서 잘 모르지만, 오픈소스라기보다는 소스가 이용 가능한 상업용 솔루션에 더 가깝게 보이네요
"
"https://news.hada.io/topic?id=15164","Voyager 1에서 전송된 비트당 수신된 광자의 수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Voyager 1에서 전송된 비트당 수신된 광자의 수

Voyager 1이 전송하는 비트당 수신되는 광자의 수

  질문

     * 질문자: Craig Gidney
     * 질문 내용: Voyager 1이 지구로 메시지를 보낼 때, 비트당 전송 및 수신되는 광자의 수는 얼마나 되는지 궁금함.

  답변 1

    계산에 필요한 요소

     * 수신기: 70m 접시 안테나 (예: Deep Space Network의 CDSCC)
     * 전송 주파수: 2.3GHz 또는 8.4GHz (8.4GHz 가정)
     * 수신된 광자: 안테나 접시에 도달하는 모든 광자 또는 전자 회로에 들어가는 광자

    답변

     * 전송 속도: Voyager 1은 160비트/초, 23W로 전송
     * 전송 광자 수: 8.3GHz 주파수에서 4×10²⁴ 광자/초, 비트당 2.6×10²² 광자
     * 수신 광자 수: 지구에 도달하는 전력은 3.4×10⁻²² W/m², 70m 접시 안테나로 수집되는 전력은 1.3 아토와트 (1.3×10⁻¹⁸W), 비트당 약 1500 광자
     * 필요한 광자 수: 열 잡음과 회로 잡음을 고려할 때, 8.3GHz에서 비트당 약 25 광자 필요

  답변 2

    추가 정보

     * 안테나 재질: 탄소 섬유 강화 플라스틱, 금속화되지 않음
     * 효율성: 접시 표면의 효율성은 약 25%, 계산된 값보다 3-5dB 낮을 수 있음
     * 전송 속도: 엔지니어링 트래픽은 40비트/초로 전송, 과학 스트림보다 더 높은 마진

GN⁺의 의견

     * 흥미로운 점: Voyager 1이 여전히 지구와 통신할 수 있다는 사실은 우주 탐사의 놀라운 성과임.
     * 기술적 도전: 먼 거리에서 신호를 수신하는 것은 매우 어려운 작업이며, 이는 안테나 기술과 신호 처리 기술의 발전을 보여줌.
     * 실용적 고려사항: 우주 탐사에서 신호 수신의 효율성을 높이기 위해서는 더 큰 안테나와 더 나은 잡음 처리 기술이 필요함.
     * 관련 기술: 다른 우주 탐사선에서도 유사한 기술이 사용되며, 이는 우주 통신의 중요한 부분임.
     * 비판적 시각: 탄소 섬유 강화 플라스틱의 사용으로 인해 효율성이 떨어질 수 있으며, 이는 장기적인 통신에 영향을 미칠 수 있음.

        Hacker News 의견

     * 첫 번째 댓글: 질문이 해커뉴스에서 인기를 끌 줄 몰랐음. 양자 오류 수정 작업 중 반복 코드의 사용 예시를 수집하려 했음. 양자 컴퓨팅은 반복이 오히려 문제를 악화시키기 때문에 어려움. 이를 보호하기 위해 특수한 물리적 속성이나 복잡한 오류 수정 전략이 필요함.
     * 두 번째 댓글: 샤논 한계를 뛰어넘을 수 있음. 샤논은 가우시안 노이즈를 가정하지만, 포톤 카운팅 수신기를 사용하면 포아송 분포를 사용해야 함. PPM 형식과 포톤 카운터를 사용하면 더 나은 성능을 얻을 수 있음.
     * 세 번째 댓글: 통신의 궁극적인 한계에 관심이 있는 사람들에게 Jim Gordon의 논문을 추천함. 물리학 학위가 없어도 이해하기 쉬움. Gordon은 노벨상을 받을 자격이 있었지만 받지 못했음.
     * 네 번째 댓글: 안테나의 방사 에너지가 넓은 영역으로 퍼지는 것이 주요 손실 원인임. 오늘날의 탐사선은 레이저를 사용하여 통신할 수 있을지 궁금함. 레이저는 신호의 방향성을 크게 개선할 수 있음.
     * 다섯 번째 댓글: 보이저 우주 탐사선에 대한 질문을 하다가 깊이 빠져들었음. 기술적인 세부 사항을 이해하기 쉽게 설명한 PDF를 발견함.
     * 여섯 번째 댓글: 보이저가 지구와 어떻게 통신하는지 생각해본 적이 없었음. 보이저가 지구로 포톤을 보내면, 수신 측에서 어떻게 그 포톤을 인식하고 신호를 디코딩하는지 궁금함.
     * 일곱 번째 댓글: 수학이 그렇게 간단할 줄 몰랐음. 저자가 고려하지 않은 것이 있는지, 아니면 그 범위가 타당한지 궁금함.
     * 여덟 번째 댓글: 매우 흥미로움. 하지만 1500개의 포톤이 수신기에 도달하는 것이 너무 적어 신호가 노이즈에 묻힐 것 같음. 보이저가 신호를 여러 번 반복해서 보내는지 궁금함. 더 많은 정보를 어디서 찾을 수 있는지 알고 싶음.
     * 아홉 번째 댓글: 소행성의 레이더 이미징에서 수신된 포톤의 수가 인상적임. 소행성은 더 가깝지만, 레이더 방정식의 수신 전력은 거리의 네제곱에 반비례함.
     * 열 번째 댓글: 포톤에 대한 흥미로운 점은 그것들이 존재하지 않을 수도 있다는 것임. 전자기장은 포톤 수준에서 양자화되지 않음. 포톤은 전자기장이 물질과 상호작용할 때만 존재함. 단일 포톤 실험에서 실제로 측정하는 것이 무엇인지 궁금함.
"
"https://news.hada.io/topic?id=15163","지적 비만 위기지적 비만 위기 (2022)

  정보 중독이 우리의 뇌를 썩게 함

     * 정보 중독: 정보가 과도하게 많아지면서 우리의 호기심이 집중력을 잃고 산만해짐. 이는 지적 비만을 초래하여 우리의 마음을 쓸모없는 정보로 채우게 됨.
     * 정보와 도파민: 2019년 버클리 연구에 따르면 정보는 음식처럼 뇌의 도파민 생성 보상 시스템에 작용함. 뇌는 정보 자체를 보상으로 여기며, 정보의 정확성이나 유용성에 상관없이 갈망하고 만족함.
     * 주의 경제: 현대 사회는 주의를 끌기 위해 저품질의 '정크 정보'를 대량 생산함. 이는 패스트푸드처럼 저렴하고 만족스럽지만 영양가가 낮고 중독성이 있음.
     * 정크 정보의 문제: 정크 정보는 실용성이 없고 우리의 삶이나 이해를 개선하지 않음. 예를 들어, 소셜 미디어에 올라오는 무의미한 사진이나 감정적인 분노를 유발하는 기사들이 이에 해당함.
     * 정크 정보의 확산: 감정을 자극하는 정보, 특히 분노를 유발하는 정보가 가장 널리 퍼짐. 이는 저널리스트나 논평가들이 주목을 끌기 위해 사용하는 전략임.
     * 정크 정보의 영향: 정크 정보는 우리의 이해력을 저하시킴. 소셜 미디어를 탐색하는 사람들은 '규범적 해리'를 경험하여 정보를 처리하는 능력이 떨어짐.
     * 지적 비만: 쓸모없는 정보에 중독되면 우리의 의식 흐름이 막히고, 중요한 것과 중요하지 않은 것을 구별하기 어려워짐. 이는 학습, 집중, 사고를 방해함.

  해결책

     * 메타 인식: 자신의 주의가 어디로 향하는지 주의하는 습관을 기르는 것이 중요함. '10-10-10 규칙'을 사용하여 정보를 소비한 후 10분, 10개월, 10년 후의 감정을 생각해보는 것이 도움이 됨.
     * 라이프스타일 변화: 정크 정보를 피하기 위해 생활 방식을 재정비하는 것이 필요함. 예를 들어, 글쓰기를 통해 나쁜 정보를 걸러내고 자신의 생각과 대면하는 시간을 가지는 것이 좋음.
     * 개인 맞춤 정보 다이어트: 자신에게 맞는 정보 다이어트를 찾아야 함. 무의미한 웹 탐색을 줄이고, 삶의 후회가 남지 않도록 해야 함.

GN⁺의 의견

     * 정보의 질: 정보의 양보다는 질이 중요함. 저품질의 정보는 우리의 시간을 낭비하게 하고, 실제로는 아무런 도움이 되지 않음.
     * 주의 경제의 문제: 주의를 끌기 위해 자극적인 정보를 생산하는 것은 사회적으로 큰 문제임. 이는 사람들의 감정을 조작하고, 사회적 갈등을 유발할 수 있음.
     * 디지털 디톡스: 정크 정보로부터 벗어나기 위해 디지털 디톡스가 필요함. 일정 기간 동안 디지털 기기를 사용하지 않거나, 소셜 미디어를 끊는 것이 도움이 될 수 있음.
     * 정보 소비 습관: 정보 소비 습관을 개선하는 것이 중요함. 신뢰할 수 있는 출처에서 정보를 얻고, 무의미한 정보를 걸러내는 능력을 키워야 함.
     * 대안 제시: 정크 정보 대신 유익한 정보를 제공하는 플랫폼이나 프로젝트를 추천함. 예를 들어, 교육적인 콘텐츠를 제공하는 웹사이트나 앱을 활용하는 것이 좋음.

     체스와 인생: 체스를 잘하는 것은 인생을 낭비하는 것일 수 있음. 체스는 많은 암기와 전략이 필요하며, 즐거움을 위해 하는 것이 중요함.

   어른들이 예전에, 바둑 배우지 말라는 얘기랑 비슷하네요... ㅎㅎ

   개인 맞춤 정보 다이어트란게 인상 깊네요. 좋은 내용 감사합니다

   정크 데이터가 많다는 건 정말 공감합니다.
   이는 비단 전문 지식에 관련된 것 뿐 아니라, 일상생활에서 자주 느낍니다.

   자극적인 이슈는 넘쳐나고, 사람들은 또 새로운 이슈에 이끌려 갑니다. 저 또한 그렇죠.
   쓸데없는 데 눈길을 주지 않으면 되겠지만, 알면서도 쉽지 않네요.

        Hacker News 의견

     * 정보를 보상으로 여기는 뇌: 사람마다 유용하다고 느끼는 정보가 다르며, 뇌는 유용한 정보를 분류하고 이에 대해 보상함. 예를 들어, TikTok은 어떤 사람에게는 유용하지 않음.
     * 체스와 인생: 체스를 잘하는 것은 인생을 낭비하는 것일 수 있음. 체스는 많은 암기와 전략이 필요하며, 즐거움을 위해 하는 것이 중요함.
     * 정보 소비 제한: 유튜브 같은 플랫폼에서 정보를 소비하는 것을 시간 제한을 두어야 함. 너무 많은 정보가 흥미를 끌지만 정신적으로 소모됨.
     * 정보와 비만의 비유: 정보 과잉 소비는 비만과 다름. 정치와 기술 정보는 중요하지만, 너무 많은 정보를 소비하면 불안감이 증가함.
     * 해커뉴스와 정보 과잉: 해커뉴스에서 많은 정보를 소비하는 것이 FOMO(놓칠까 봐 두려움) 때문임. 정보 다이어트가 필요할 수도 있음.
     * 소셜 미디어의 진정한 목적: 소셜 미디어는 단순히 쓸모없는 콘텐츠를 소비하는 것이 아니라, 직업적 지위 향상, 청중 확보, 유용한 정보 학습 등의 이유로 사용됨.
     * '쓸모없는 정보' 정의 부족: '쓸모없는 정보'의 정의가 명확하지 않음. 예를 들어, 과학적 주제에 대한 위키피디아 항목을 읽는 것은 실용적으로 사용할 수 없지만 여전히 즐거움.
     * '정보'와 '콘텐츠'의 차이: 기사를 읽을 때 '정보' 대신 '콘텐츠'로 바꾸면, 이 기사는 단순히 'doomscrolling'(무의미한 정보 소비)의 위험에 대해 말하는 것임.
     * 대부분의 온라인 콘텐츠의 가치: 대부분의 온라인 콘텐츠는 세계에 대한 이해를 향상시키지 않음. 클릭베이트를 피하고, 활동을 바꾸는 훈련이 필요함.

   정크 정보 없는 긱뉴스를 추천합니다 ;)

   :+1:
"
"https://news.hada.io/topic?id=15166","USB 기기 만들기 – 당신의 첫 번째 가젯 제작을 위한 종합 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 USB 기기 만들기 – 당신의 첫 번째 가젯 제작을 위한 종합 가이드

USB 장치 개발 가이드

  목차

     * 배경
     * USB란 무엇인가?
     * USB 와이어
          + USB-C에 대한 주의사항
          + 차동 쌍을 통한 데이터 전송
     * PCB에서의 USB
     * USB의 다양한 속도
          + PCB에서의 속도에 대한 간단한 주의사항
     * 프로토콜 및 소프트웨어 계층
          + USB 장치 클래스와 호스트의 사용 방법
     * 시리얼 포트 장치 만들기
          + STM32 마이크로컨트롤러와 Nucleo 보드
          + 실제 USB 포트 설정
          + 소프트웨어 작성
          + 플래싱 및 실행
     * 결론

  배경

     * USB 장치는 컴퓨터의 기능을 확장하는 데 유용함.
     * 이 글의 목표는 USB 장치를 처음부터 끝까지 만드는 과정을 안내하는 것임.

  USB란 무엇인가?

     * USB는 데이터 교환과 전력 공급을 위한 산업 표준임.
     * USB는 직렬 버스로, 비트가 하나씩 전송됨.
     * USB는 단순한 연결 규격을 넘어 통신 프로토콜도 포함함.

  USB 와이어

     * USB 2.0 연결에는 4개의 주요 와이어가 있음:
          + +5V 와이어: 호스트에서 장치로 전력을 공급함.
          + D-와 D+ 와이어: 차동 쌍으로 1비트를 전송함.
          + GND 와이어: 접지 역할을 함.

    USB-C에 대한 주의사항

     * USB-C는 양방향으로 연결할 수 있음.
     * USB-C는 속도나 버전을 나타내지 않음.

    차동 쌍을 통한 데이터 전송

     * 차동 쌍은 두 개의 와이어를 사용하여 하나의 비트를 전송함.
     * 차동 쌍은 전압 노이즈를 제거하는 데 유리함.

  PCB에서의 USB

     * USB 커넥터를 PCB에 추가할 때, 차동 쌍의 길이를 동일하게 유지해야 함.
     * 차동 쌍의 트레이스는 서로 가까이 있어야 함.
     * 특정 임피던스를 유지해야 함.

  USB의 다양한 속도

     * USB 2.0은 풀 스피드(12 Mbit/s)와 하이 스피드(480 Mbit/s)로 동작할 수 있음.
     * 호스트와 장치는 연결 시 속도를 협상함.

    PCB에서의 속도에 대한 간단한 주의사항

     * 풀 스피드에서는 임피던스와 트레이스 길이에 대해 덜 엄격해도 됨.

  프로토콜 및 소프트웨어 계층

     * USB는 네트워크처럼 동작하며, 다양한 엔드포인트와 구성을 가짐.
     * 호스트는 드라이버를 통해 USB 장치를 인식하고 사용함.

    USB 장치 클래스와 호스트의 사용 방법

     * 운영체제는 다양한 USB 장치 클래스를 인식함.
     * 예를 들어, 대용량 저장 장치나 시리얼 장치 등이 있음.

  시리얼 포트 장치 만들기

     * 간단한 USB 시리얼 포트 장치를 만들어 봄.
     * STM32 마이크로컨트롤러와 Nucleo 보드를 사용함.

    STM32 마이크로컨트롤러와 Nucleo 보드

     * NUCLEO-F103RB 보드를 사용함.
     * 보드는 프로그래머와 마이크로컨트롤러로 구성됨.

    실제 USB 포트 설정

     * USB 포트를 설정하고, 외부 5V 전원을 사용하도록 점퍼를 설정함.
     * PA12와 PA11 핀을 USB_DP와 USB_DM으로 설정함.
     * PA12 핀에 1.5 kΩ 저항을 연결하여 풀업함.

    소프트웨어 작성

     * STM32CubeIDE에서 USB 장치 모드를 설정함.
     * 시리얼 포트 장치로 설정하여 호스트가 인식하도록 함.
     * CDC_Receive_FS 루틴에서 LED를 켜는 코드를 작성함.

    플래싱 및 실행

     * 코드를 빌드하고 STM32CubeProgrammer를 사용하여 보드에 플래싱함.
     * 보드를 외부 5V 전원으로 연결하고, 시리얼 포트를 통해 LED를 제어함.

  결론

     * USB 시리얼 포트 장치를 처음부터 끝까지 만들어 봄.
     * STM32CubeIDE의 많은 보일러플레이트 코드와 UI 기반 설정이 불편할 수 있음.
     * Linux 기반 SoC를 사용하는 것이 더 깔끔한 접근 방식일 수 있음.

GN⁺의 의견

     * STM32CubeIDE의 보일러플레이트 코드: 많은 보일러플레이트 코드가 생성되어 코드 리뷰가 어려울 수 있음.
     * Linux 기반 접근 방식: Linux SoC를 사용하면 더 표준화된 API와 깔끔한 코드 분리가 가능함.
     * 임피던스와 트레이스 길이: 고속 USB 연결을 위해서는 임피던스와 트레이스 길이에 대한 주의가 필요함.
     * 차동 쌍의 이점: 차동 쌍은 전압 노이즈를 제거하는 데 유리하여 안정적인 데이터 전송을 가능하게 함.
     * 마이크로컨트롤러 선택: 프로젝트에 따라 적절한 마이크로컨트롤러를 선택하는 것이 중요함. STM32 외에도 다양한 옵션이 있음.

        Hacker News 의견

     * ST 마이크로컨트롤러 사용에 대한 의견: USB 사용에 관한 좋은 글이지만, ST 마이크로컨트롤러에 집중되어 있음. 최근 ESP32 생태계가 더 쉬운 플러그 앤 플레이 방식을 제공함. 초보자에게는 고속 작업이 아닌 기본적인 USB 컨트롤러 IC 사용이 더 적합함.
     * USB 준수 테스트 경험: 오래전 USB 준수 테스트를 했을 때, 인러시 전류 테스트에서 문제가 많았음. 고속 디지털 설계에 집중하기 쉬우나 준수 테스트에서는 작은 부분이 중요함.
     * USB-C 관련 팁: CC 핀을 적절한 저항에 연결해야 함. USB 2.0에서는 차동 라우팅과 임피던스가 큰 문제가 아님. 비슷한 길이로 직접 연결하면 됨.
     * STM32 대안 제안: ARM 프로세서 납땜이 어렵다면, 작은 컨트롤러나 VUSB 라이브러리를 사용하는 것도 고려할 만함. Arduino 스타일 프로그래밍을 선호한다면, 많은 보드가 USB 장치로 쉽게 사용 가능함.
     * ESP32와 저렴한 해킹 방법: ESP32를 주로 사용하지만, 버려진 USB 키보드의 컨트롤 보드를 활용해 저렴하고 견고한 커스텀 컨트롤러를 만들 수 있음.
     * STM32에서 64바이트 이상 수신 지원: 64바이트 이상의 프레임을 수신하는 방법에 대한 질문. 레퍼런스 매뉴얼에 나와 있는 설정이 일반 레지스터가 아니어서 어려움이 있음.
     * 베어 메탈 USB 코드 작성 경험: MCU에서 베어 메탈 USB 코드를 작성하는 것은 SPI나 I2C보다 복잡함. 벤더 제공 소프트웨어를 최대한 활용하는 것이 좋음. 고속 전송을 위해 벌크 전송을 사용하고, 호스트 측 문제를 확인해야 함.
     * 가상 USB 장치 생성: Raspberry Pi를 사용해 가상 USB 장치를 만들어 PC에 연결. MTP 카메라를 에뮬레이트하여 소프트웨어를 속이는 데 사용 중임.
     * USB 3 지원 개발 보드 질문: USB C 모니터 싱크를 프로토타이핑하려고 하는데, DisplayPort를 수신할 수 있는 전력을 가진 보드를 찾기 어려움.
     * USB 사용 비용: USB는 무료가 아님. 벤더 ID를 얻기 위해 $6,000의 일회성 비용을 지불해야 함.
"
"https://news.hada.io/topic?id=15183","파이썬의 다양한 코맨드라인 도구들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           파이썬의 다양한 코맨드라인 도구들

     * 파이썬의 모듈들은 명령행 도구로 사용될 수 있음
          + 예를 들어 webbrowser 모듈을 명령행에서 실행하면 기본 웹 브라우저를 통해 주어진 URL을 열 수 있음
          + 파이썬 표준 라이브러리에는 이러한 모듈-스크립트 하이브리드가 많이 포함되어 있음
     * -m 옵션을 사용하여 파이썬을 실행하면 주어진 파이썬 모듈을 스크립트처럼 실행함
          + 일부 모듈은 import 시점에 어떤 동작을 하는데, 예를 들어 antigravity 모듈은 XKCD 만화를 웹 브라우저로 열어줌. 이를 명령행에서 실행하면 모듈을 import한 것과 동일한 효과가 있음
          + 이를 ""import side effect""라고 부르며, 대부분의 모듈은 이를 피함. antigravity와 같은 이스터에그 모듈이 예외임
          + Import side effect를 피하는 모듈들은 모듈로 import될 때와 스크립트로 실행될 때 다른 동작을 하기 위해 name 변수를 사용함

유용한 일반 목적 명령행 도구들

     * python -m http.server: 간단한 웹 서버 시작
     * python -m webbrowser: 웹 브라우저 실행
     * python -m json.tool: JSON 데이터를 예쁘게 포맷팅
     * python -m calendar: 명령행 캘린더 보여주기

윈도우에서 특히 유용한 도구들

     * python3.12 -m uuid: uuidgen CLI 유틸리티와 유사
     * python3.12 -m sqlite3: sqlite3 CLI 유틸리티와 유사
     * python -m zipfile: zip & unzip CLI 유틸리티와 유사
     * python -m gzip: gzip & gunzip CLI 유틸리티와 유사
     * python -m tarfile: tar CLI 유틸리티와 유사

파이썬 코드 작업시 유용한 도구들

     * python -m pip: 서드파티 파이썬 패키지 설치
     * python -m venv: 가상 환경 생성
     * python -m pdb: 파이썬 디버거 실행
     * python -m unittest: unittest 테스트 실행
     * python -m pydoc: 문서 보기
     * python -m doctest: 주어진 파일의 doctest 실행
     * python -m ensurepip: pip 설치
     * python -m idlelib: IDLE 그래픽 REPL 실행
     * python -m zipapp: 파이썬 모듈을 실행 가능한 ZIP으로 변환
     * python -m compileall: 파이썬 파일들을 바이트코드로 미리 컴파일

파이썬 코드 분석 도구들

     * python -m tokenize: 파이썬 모듈을 토큰으로 분해
     * python -m ast: 코드의 추상 문법 트리 보여주기
     * python -m dis: 파이썬 코드를 바이트코드로 디스어셈블
     * python -m inspect: 파이썬 객체의 소스코드 검사
     * python -m pyclbr: 모듈의 객체들에 대한 개요 보기

파이썬 이스터에그로 작동하는 재미있는 스크립트들

     * python -m __hello__: ""Hello world!""를 출력함
     * python -m this: 파이썬의 선(The Zen of Python, PEP 20)을 출력함
     * python -m antigravity: 웹 브라우저에서 파이썬 관련 XKCD 만화 353번을 열어줌
     * python -m turtledemo: turtle 모듈로 그릴 수 있는 다양한 그림들의 데모를 보여줌

기타 파이썬 관련 도구들

     * python -m asyncio: asyncio 지원 파이썬 REPL 실행
     * python -m cProfile: 파이썬 프로그램 프로파일링
     * python -m pstats: cProfile로 생성된 프로파일 통계 보기
     * python -m pickle: pickle 파일 내용 보기 (high-level)
     * python -m pickletools: pickle 파일 분해 (low-level)

덜 유용한 도구들

     * python -m timeit: 파이썬 표현식 수행 시간 측정
     * python -m site: 파이썬의 ""site"" 정보 보기
     * python -m sysconfig: 파이썬 구성 세부사항 보기
     * python -m platform: 현재 플랫폼 정보 보기
     * python -m mimetypes: 파일 mimetype/확장자 정보 보기
     * python -m quopri: raw email 데이터 인코딩/디코딩
     * python -m filecmp: 2개의 디렉토리 내용 비교
     * python -m tabnanny: 파이썬 파일의 탭과 공백 혼용 체크

   와 생각보다 좋은 기능들이 많네요 굳

   폐쇄망 환경의 리눅스 서버에 zip파일 반입해서 들어갔는데 unzip 명령어가 없어서
   python -m zipfile 모듈로 압축풀고 진행했던 기억이 있네요
"
"https://news.hada.io/topic?id=15087","노트북에서 Wikipedia 전체를 벡터 인덱싱하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      노트북에서 Wikipedia 전체를 벡터 인덱싱하기

     * Cohere가 위키피디아 전체를 벡터로 임베딩한 데이터셋을 공개했음
     * 이 데이터셋을 사용하면 개인이 위키피디아의 의미 기반 벡터 인덱스를 만들 수 있게 됨

  어려운 점

     * 데이터셋 크기(영어 코퍼스만 180GB)가 문제는 아님
     * 기존 벡터 데이터베이스는 메모리보다 큰 데이터셋을 인덱싱할 수 없었음
     * JVector 라이브러리는 압축 벡터를 사용해 메모리보다 큰 데이터셋을 인덱싱할 수 있게 함

  요구 사항

     * Linux 또는 MacOS 필요 (Windows는 ChronicleMap의 제한으로 인해 사용 불가)
     * 데이터셋을 위한 180GB의 여유 공간과 인덱스를 위한 90GB의 공간 필요
     * 인덱스 구축 시 36GB의 힙 공간을 가진 JVM을 실행할 수 있는 충분한 RAM 필요
     * 인덱스 구축 전에 스왑 비활성화 필요

  인덱스 구축 및 검색

     * 프로젝트 클론: $ git clone https://github.com/jbellis/coherepedia-jvector
     * 데이터셋 다운로드: python download.py
     * 인덱스 구축: ./mvnw compile exec:exec@buildindex
     * 검색 서버 실행: ./mvnw compile exec:exec@serve 후 브라우저에서 http://localhost:4567 접속

  작동 원리

     * JVector로 벡터 인덱스 생성, Chronicle Map으로 기사 데이터 저장
     * 벡터 압축을 위해 Locally-Adaptive Quantization (LVQ) 사용
     * 병렬 스트림을 사용해 데이터 병렬 처리

  결론

     * JVector 라이브러리 덕분에 노트북에서 영어 위키피디아 전체를 인덱싱하는 것이 현실화됨
     * DataStax Astra 서비스와 함께 사용하면 실시간 삽입, 업데이트, 삭제를 지원하는 강력한 인덱싱 기능을 활용할 수 있음

GN⁺의 의견

     * JVector의 혁신성: JVector는 대용량 데이터셋을 메모리 제약 없이 인덱싱할 수 있게 해줌으로써 데이터 과학 및 검색 엔진 분야에 큰 혁신을 가져올 수 있음.
     * 실용성: 개인이 노트북에서 위키피디아 전체를 인덱싱할 수 있게 되면서, 연구자나 개발자들이 더 쉽게 대규모 데이터셋을 활용할 수 있게 됨.
     * 기술적 고려 사항: 이 기술을 도입할 때는 충분한 디스크 공간과 메모리, 그리고 스왑 비활성화 등의 시스템 설정이 필요함.
     * 대안 기술: 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 FAISS(Facebook AI Similarity Search)나 Annoy(Approximate Nearest Neighbors Oh Yeah)가 있음.
     * 성능 최적화: 병렬 처리와 벡터 압축 기술을 통해 성능을 최적화할 수 있지만, 시스템 자원 관리에 주의가 필요함.
"
"https://news.hada.io/topic?id=15043","Ask GN: 노트+와이어프레임 스케치에 좋은 협업 툴 뭐가 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 노트+와이어프레임 스케치에 좋은 협업 툴 뭐가 있을까요?

   안녕하세요.

   딱 EverNote + Miro 같은 느낌의 앱이 있을까요?

   iPad 에서 와이어프레임 스케치하고,
   스마트폰에서 노트 작성이 편리하고,
   Windows, iPad, Android 폰 지원하는..

   욕심이 과한걸까요...?ㅋㅋㅋㅋ

   저는 https://excalidraw.com/ 사용중입니다

   이 리뷰 참고하시면 좋을거 같습니다. 제가봤을 땐 Affine이 딱 사용사례에 적합한거 같아요.
   https://x.com/bak_chanhee/status/1770402333362692131

   오 이렇게 정리된 곳이 있네요!!

   eraser.io 참고 해보시길
"
"https://news.hada.io/topic?id=15173","중국어처럼 쓰여진 영어중국어처럼 쓰여진 영어 (1999)

영어를 한자로 쓴다면

  일본식

     * 일본어처럼 한자를 직접 사용하는 방법이 있음.
     * 예를 들어, ""work""는 , ""ruler""는 로 쓸 수 있음.
     * 중국어와 일본어에서 차용한 단어는 원래 한자를 사용해 쓸 수 있음.

  중국식

     * 한자를 직접 사용하지 않고, 영어에 맞는 새로운 시스템을 발명하는 방법이 있음.
     * 이를 ""영자""라고 부르며, 한자가 중국어에서 작동하는 방식과 동일하게 영어에 적용됨.
     * 기본 원칙은 특정 의미를 가진 음절마다 하나의 영자를 사용하는 것임.

  작은 그림들

     * 그림을 그려서 단어를 표현할 수 있음.
     * 예를 들어, 말, 산, 왕, 사람, 아이, 벌레, 해, 달, 나무 등을 그림으로 표현할 수 있음.
     * 그림이 추상적일 때는 ""이데오그램""이라고 부를 수 있음.

  음운적 분류

     * 각 간단한 영자는 개방형 세트의 기초가 되며, 운이 맞는 음절 세트를 위해 사용됨.
     * 예를 들어, ""king"" 문자는 ""king"", ""thing"", ""sing"", ""sling"", ""sting"", ""shing(le)"" 등의 단어를 생성함.

  겹침과 2차 파생

     * 동일한 음운을 가진 영자는 모두 운이 맞음.
     * 그러나 모든 운이 맞는 음절이 동일한 영자를 가지는 것은 아님.
     * 이는 주로 그림의 시각적 구별을 추가하여 독자를 돕기 위함임.

  부수

     * 부수는 주로 간단한 문자나 문자의 약어에서 유래함.
     * 부수의 세트는 제한되어 있으며, 총 214개가 있음.
     * 특정 부수를 사용하는 영자는 자체의 의미 클래스를 형성함.

  알 수 없는 문자 추측하기

     * 독자는 부수와 음운을 사용하여 알 수 없는 문자의 발음을 추측할 수 있음.
     * 예를 들어, 는 ""purse""와 운이 맞는 말하기 유형인 ""curse""를 의미함.

  다음절 단어

     * 가능한 경우 단어를 형태소로 나눔.
     * 예를 들어, ""outsider""는 ""out"" + ""side"" + ""-er""로 나눌 수 있음.

  외래어

     * 최근에 차용된 단어는 음절별로 기존 문자를 사용하여 표현됨.
     * 예를 들어, ""Peking""은 로 표현됨.

  사전

     * 영어 사전은 더 이상 알파벳 순서로 배열되지 않음.
     * 대신 부수에 따라 정리됨.

  영자로 생각하기

     * 영자 시스템은 모든 언어 요소를 영자로 구성된 것으로 생각하게 만듦.
     * 이는 단어의 기원에 대한 그래픽 어원학을 제공하게 함.

GN⁺의 의견

     * 흥미로운 점: 이 기사는 한자와 영어의 결합을 통해 새로운 문자 시스템을 제안함으로써 언어와 문자의 관계를 재고하게 만듦.
     * 도입 시 고려사항: 새로운 문자 시스템을 도입할 때는 학습 곡선과 기존 시스템과의 호환성을 고려해야 함.
     * 비판적 시각: 이 시스템은 복잡하고 비효율적일 수 있으며, 특히 다중 음절 형태소가 많은 영어에서는 더욱 그러함.
     * 관련 기술: 비슷한 개념으로는 일본어의 가나와 한자의 혼용, 한국어의 한글 등이 있음.
     * 기술 선택의 득과 실: 새로운 시스템은 시각적 구별을 제공하지만, 학습과 사용의 복잡성을 증가시킬 수 있음.

        Hacker News 의견

     * 중국어 문자의 장점: 중국어 문자는 전통과 실용성 때문에 계속 사용됨. 여러 방언이 서로 이해되지 않기 때문에, 표의문자는 모든 사람이 이해할 수 있게 해줌.
     * 중국어 학습 경험: 중국어 문자는 의미를 추측할 수 있지만, 발음을 알기 어려움. 스페인어는 새로운 단어의 발음을 쉽게 알 수 있음.
     * 한자와 영어: 윈스턴 처칠을 한자로 표기하면 '웬수텅 추얼치루'가 됨. 이는 조지 알렉 에핑거의 소설에서 유머로 사용된 적 있음.
     * 중국어 학습의 어려움: 중국어를 공부하면서 '중문'이라는 단어가 익숙해짐. 영어를 한자로 쓴다면 복잡해질 것임.
     * 관련 링크: 영어를 중국어처럼 쓴다면 어떤 모습일지에 대한 여러 논의 링크 제공.
     * 언어 구조 차이: 중국어와 영어의 언어 구조 차이로 인해 번역된 소설의 대화가 다르게 느껴짐.
     * 영어 문법: 영어의 가정법이 사라지면서 언어가 단순해짐.
     * 터키어의 문자 변화: 터키어는 아랍 문자를 사용하다가 라틴 문자로 변경됨. 중국어는 소리의 차이로 인해 이런 변화가 어려움.
     * 중국어의 특성: 중국어 문자는 음소적이지 않으며, 문법이 유연함. 한국어는 한글이 없을 때 중국어 문자를 사용했음.
     * 기사의 시대적 배경: 1999년 기사에서 'bodacious'라는 단어를 사용한 것이 시대를 반영함.
"
"https://news.hada.io/topic?id=15110","일본, 모든 연구를 오픈 액세스로 전환 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        일본, 모든 연구를 오픈 액세스로 전환 추진

     * 일본 정부는 공공 자금으로 지원받은 연구를 무료로 열람할 수 있도록 하는 계획을 추진 중
     * 2025년 1월부터 정부 자금을 받은 연구자들은 연구 논문을 기관 저장소에 무료로 공개해야 함
     * 이를 위해 일본 교육문화체육과학기술부(MEXT)는 100억 엔(약8800억원)을 투자하여 연구 논문을 무료로 열람할 수 있는 인프라를 구축할 예정

오픈 액세스의 장점

     * 연구 정보의 장기적인 추적 가능성을 높이고, 2차 연구를 촉진하며, 협업을 증진시킬 것으로 기대됨
     * 일본은 아시아 국가 중 오픈 액세스로 나아가는 데 주목할 만한 진전을 이룬 첫 번째 국가 중 하나이며, 전국적인 오픈 액세스 계획을 수립한 세계 최초의 국가 중 하나임
     * 일본의 계획은 미국과 유럽의 연구 자금 제공자 그룹인 cOAlition S가 6년 전에 도입한 영향력 있는 Plan S의 뒤를 잇는 것임
     * 미국도 2022년에 오픈 액세스 의무화를 시행하여 납세자가 자금을 지원하는 모든 연구를 2026년부터 무료로 이용할 수 있도록 함

기관 리포지토리 인프라 구축

     * 문부과학성(MEXT)은 2월에 오픈 액세스로의 전환을 발표하면서, 기관 리포지토리 표준화에 약 100억 엔(약 6,300만 달러)을 투자할 것이라고 밝힘
          + 기관 리포지토리는 과학 논문, 기초 데이터 및 기타 자료를 호스팅하는 전용 웹사이트임
     * 일본의 약 800개 대학 중 750개 이상이 이미 기관 리포지토리를 보유하고 있음
     * 각 대학은 소속 학자들이 생산한 연구 결과를 호스팅하지만, 기본 소프트웨어는 동일할 것임

일본의 프리프린트 서버 Jxiv

     * 2022년에 일본은 자체 국가 프리프린트 서버인 Jxiv를 출시했지만, 현재까지 플랫폼에 게시된 프리프린트 논문은 몇 백 편에 불과함
     * 일본의 많은 연구자들에게 프리프린트로 출판하는 것은 아직 습관이 되지 않았음
          + 2023년 Jxiv에 대한 설문 조사 응답자 중 약 5분의 1만이 Jxiv의 존재를 인지하고 있었음

그린 오픈 액세스 전략

     * 일본의 연구 접근성 향상은 '그린 오픈 액세스'에 초점을 맞추고 있음
          + 그린 오픈 액세스는 저자가 최종 버전이 아닌 저자 승인 버전의 논문을 디지털 리포지토리에서 무료로 이용할 수 있도록 하는 것임
     * 골드 오픈 액세스는 대학에 비용이 너무 많이 들기 때문에 광범위하게 실현 가능하지 않음
          + 골드 오픈 액세스는 논문의 최종 교정 및 완성 버전을 저널 사이트에서 무료로 이용할 수 있도록 하는 것임
          + 출판사는 논문을 무료로 읽을 수 있도록 하는 경우 출판사의 비용을 충당하기 위해 논문 처리 비용(APC)을 부과함
     * 그린 오픈 액세스 전략은 특히 여전히 유료 논문 뒤에 있는 모든 콘텐츠에 대해 반드시 해야 할 일임

일본 계획의 장점

     * 일본의 계획은 ""공평함""
          + 어디에 출판하든, APC가 있든 없든 상관없이 여전히 오픈 액세스 정책을 준수할 수 있음
     * 모든 기관 리포지토리가 동일한 국가 서버에서 호스팅되기 때문에 일본 학자들이 생산한 모든 연구의 통합 기록을 보유하게 될 것임
     * 기관 리포지토리에 초점을 맞추는 것은 일본어로 출판된 연구를 차별하지 않는 또 다른 이점이 있을 것임
          + 일본의 학술 생태계의 큰 부분이 일본어로 표현되고 있음

일본 연구의 국제적 지위 하락

     * 일본 정부의 오픈 액세스 이동 계획과 일본 대학 리포지토리 지원은 일본이 국제 연구에서의 지위 하락에 직면하고 있는 가운데 나온 것임
     * 작년 10월에 발표된 보고서에 따르면 일본의 세계적 수준의 연구 지위가 하락하고 있음
          + 예를 들어, 가장 많이 인용된 논문 상위 10%에서 일본의 비중이 6%에서 2%로 하락하여 국가 순위에서 13위를 차지했음 (연구 산출량은 5위임에도 불구하고)
     * 3월에 일본은 2040년까지 박사 학위 소지자 수를 3배로 늘리겠다고 공언했음
          + 또 다른 보고서에서 일본의 박사 학위 졸업자 수도 감소하고 있어 주요 경제국 중 이례적인 것으로 나타났기 때문임

GN⁺의 의견

     * 연구 접근성 향상: 일본의 오픈 액세스 정책은 연구 정보의 장기 추적 가능성을 높이고, 2차 연구와 협업을 촉진할 수 있음.
     * 비용 문제: 골드 오픈 액세스의 높은 비용 문제를 해결하기 위해 그린 오픈 액세스를 선택한 점이 현실적임.
     * 국제 경쟁력: 일본의 연구 경쟁력 하락 문제를 해결하기 위해 오픈 액세스 정책이 도움이 될 수 있음.
     * 기술 도입 고려사항: 오픈 액세스 정책을 도입할 때, 연구자들의 인식 변화와 기술적 인프라 구축이 중요함.
     * 다른 사례: 미국과 유럽의 Plan S와 같은 다른 오픈 액세스 정책 사례를 참고할 수 있음.

   일본은 정치권이 개막장이라 그렇지 사회 전반적으로 바닥을 치고 다시 부상한다는 느낌이 강합니다. 게다가 기초과학 바탕이 워낙 탄탄해서 분위기 타면 무섭게 치고 나오지 않을까 합니다.

   한국은 어떤가요? 대학을 나온지 까마득해서... 요즘 어떤지 잘 모르겠어요

   Arxiv 라는 무료로 접근 가능한 프리프린트 저장소에 논문을 올리는 경우가 많은데, 프리프린트 공개가 의무는 아니라서 분야별로, 연구실 별로 다른 듯 합니다.

   관련해서 한국에 대해 하고싶은 말은 많은데 정치적인 의견까지 안낄 수가 없어서 할 말은 많지만 말을 못하겠습니다.
   인재로 먹고살아야 할 나라인데 정치인들이 이걸 보고 느낀 게 있나부터 묻고싶군요.

        Hacker News 의견

     * ""Open access""라는 용어는 오해를 불러일으키며, 실제로는 ""출판 비용 지불""로 불려야 함. 현재의 OA 시스템은 유럽 국가들의 공공 자금을 소모하는 큰 계획임.
     * 호주는 이미 비슷한 시스템을 가지고 있으며, 연구가 국가 기금으로 지원받는 경우, 출판 전 버전을 연구소의 저장소에 저장해야 함. 그러나 이 시스템은 거의 강제되지 않으며, 연구자 평가 방식도 바뀌지 않음.
     * 금 OA는 모든 논문을 무료로 읽을 수 있게 하는 것이 비용이 너무 많이 들어서 널리 적용될 수 없음. 이는 영리 출판사들이 비용을 계속 올리기 때문임.
     * 일본은 연구 데이터를 포함한 자료를 호스팅하는 기관 저장소를 표준화하기 위해 100억 엔을 투자할 계획임. 중요한 것은 논문이 아니라 데이터 접근임.
     * 도쿄 대학은 연구 평가 선언(DORA)에 서명한 첫 번째 일본 대학이 되었으며, 이는 더 나은 연구 환경을 위한 긍정적인 움직임임.
     * 모든 공공 자금으로 지원된 연구는 공개되어야 함.
     * 일본은 모든 공공 자금으로 지원된 연구를 기관 저장소에 공개할 계획임. 그러나 특정 기관의 학생이나 직원이 아니면 접근할 수 없음.
     * 학자들이 블로그에 연구 결과를 게시하지 않는 이유가 궁금함.
     * 세금을 사용해 연구를 지원하고 출판사들이 결과를 독점하게 두는 것은 비합리적임.
     * 기존 프로세스에는 많은 문제가 있으며, 저품질 또는 가짜 연구를 제거할 방법, 출판된 논문을 업데이트할 방법, 저장소가 SEO 최적화되어 사람들이 찾을 수 있게 할 방법 등이 필요함.
     * 이 계획이 인접 국가들에게도 영감을 주기를 바람.
"
"https://news.hada.io/topic?id=15175","마이크로소프트, 로컬 계정을 가능하게 한 Windows 11 우회 방법 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               마이크로소프트, 로컬 계정을 가능하게 한 Windows 11 우회 방법 차단

     * 많은 사용자가 로컬 계정을 선호함: 로컬 계정은 데이터 제어와 프라이버시를 더 잘 보장함
     * Windows 11을 사용하기 위해서는 Microsoft 계정과 연결된 이메일 주소를 입력해야 함
     * 기존에는 임의의 이메일 주소와 비밀번호를 입력하여 연결에 실패하면 로컬 계정 생성으로 직접 이동할 수 있었음
          + 이는 데이터 제어와 개인정보 보호를 선호하는 사용자들이 자주 사용하던 방법임
          + 그러나 Microsoft 계정 없이는 계정 백업이나 Copilot 등 일부 유용한 기능을 사용할 수 없음
     * Microsoft는 이 버그를 패치하여 이제는 올바른 이메일 주소를 입력할 때까지 계정 연결 과정이 반복됨
          + 이전에는 작업 관리자에서 인터넷 연결을 차단하여 우회할 수 있었으나, Microsoft는 이 방법도 제거함
     * 윈도우 11 설치 단계에서 커맨드 프롬프트에 OOBE\BYPASSNRO 명령을 사용하여 인터넷 연결을 건너뛰고 로컬 계정을 생성하는 방법은 여전히 존재함
          + 그러나 Microsoft가 Windows 11 사용을 Microsoft 계정에 의존하도록 만들려는 것으로 보이므로 이 옵션이 얼마나 오래 유지될지는 의문임
     * Microsoft가 Windows 사용자들에게 Windows 11로의 전환을 촉구하는 상황에서, 이는 논란의 여지가 있는 조합으로 보임

GN⁺의 의견

     * 프라이버시 우려: 마이크로소프트 계정 사용 강제는 사용자 프라이버시 침해 가능성 있음.
     * 기능 제한: 로컬 계정 사용 시 일부 기능 제한으로 사용자 경험 저하 가능성 있음.
     * 대체 방법 필요: 마이크로소프트 계정 없이도 윈도우 11을 사용할 수 있는 대체 방법 필요.
     * 기술적 대응: 사용자는 새로운 우회 방법이 차단될 가능성에 대비해 다른 기술적 대응책을 마련해야 함.
     * 사용자 불만: 이러한 변화는 사용자 불만을 초래할 수 있으며, 마이크로소프트의 이미지에 부정적 영향을 미칠 수 있음.

   2000년대에 M$ 소리 듣던 마소가 2010년대 사티아 나델라로 CEO가 교체되고 나서 꽤 개과천선스러운 행보를 보여왔다고 생각했는데... 다시 좀 잘 나간다 싶으니까 또 윈도우 8 같은 망작을 만들어내기 시작하네요.
   닷넷 핫 리로드 사건도 그렇고 정말 여러모로 실망스럽습니다.

   운영체제를 쓰는데 왜 온라인 계정에 로그인해야 하는지 도무지 이해가 안되었던..

   삐빅정상입니다.

   rufus를 쓰면 윈도우 11의 온라인 계정 사용 강제를 포함한 여러 제한들을 해제해 부팅 USB를 만들 수 있습니다.

   최근에 지인분께 윈도우 설치를 해준적이 있었는데, 남의 컴이라서 이 로컬 계정 부분 처리하기 뭐해 그냥 새로 마이크로소프트 계정을 생성했네요. 그렇다고 맥이라고 경험이 좋은건 아닌데, 로컬/온라인 계정 혼용부분은 정말 깔끔하지 않아요.

   그 설치를 해주러 갔던 출장(?)을 갔던 가장 큰 이유는, 새로운 컴에 윈도우 정품 설치 USB가 동작 안된다는 거였는데, MBR로된 5년전 USB여서 그런거더군요. BIOS에서 Legacy를 쓰면 된다고 하던데 잘 안되더라고요. 만들어 갔던 UEFI 부팅가능 USB로 해결. 최근에는 PC도 많이 바뀌어서 뭔가 어렵 ㅠ

        Hacker News 의견

     * Windows XP와 비교: Windows XP에 머물러야 한다고 생각하지 않지만, 작업 관리자에서 검색 필터링 같은 오래된 기능이 이제야 추가된 점은 긍정적임. 그러나 MS 계정으로 로그인하게 만드는 것은 불만족스러움.
     * 윈도우 설치 경험: 최근 두 대의 컴퓨터에 윈도우를 설치했는데, 불필요한 프로그램을 제거하는 데 하루가 걸렸음. 게임을 위해 ThrottleStop과 MSI Afterburner가 필요해서 리눅스로 전환하지 못하고 있음.
     * 로컬 계정 거부 이유: MS가 로컬 계정을 거부하는 이유는 사용자 데이터를 수집하고 판매하기 위함이라고 생각함. 애플도 Apple ID를 원하지만 강제하지는 않음.
     * 사용자 선택 감소: 몇 년 전 새로운 MS가 더 나아졌다고 했지만, 지금은 더 나빠졌다고 느껴짐.
     * 윈도우의 사용자 적대성: 윈도우의 사용자 적대성이 노트북 시장의 침체를 초래했다고 생각함. 리눅스를 사용하지만, 터미널 사용을 꺼리는 사람들에게 추천하기 어려움.
     * 인터넷 연결 요구: 계정 등록을 통과하지 못해 윈도우를 재설치해야 했음. 인터넷 연결이 필수였고, 네트워크 어댑터를 수동으로 설치해야 했음.
     * 윈도우 사용 거부: 남편이 윈도우가 설치된 새 노트북을 원하지만, 윈도우의 문제점을 설명하며 리눅스를 시도하게 했음. 그러나 남편은 윈도우의 문제를 이해하지 못하거나 신경 쓰지 않음.
     * 윈도우 10 지원 종료: 윈도우 10 지원 종료가 다가오면서 많은 컴퓨터가 윈도우 11을 설치할 수 없게 됨. 이는 엄청난 전자 폐기물을 초래할 수 있음.
     * 윈도우 분리 제안: 윈도우를 ""Windows 11 Platform""과 ""Windows 11 Plus""로 분리하여, 전자는 보안 업데이트만 제공하고 후자는 구독 모델로 추가 기능을 제공하는 방안을 제안함.
     * 윈도우 11 설치 경험: 조부모를 위해 윈도우 11이 설치된 노트북을 샀는데, 너무 복잡해서 윈도우 10으로 다운그레이드했음. 다음에는 우분투를 설치하는 것을 고려 중임.
"
"https://news.hada.io/topic?id=15045","미국 최고 과학 경진대회에서 발생한 스캔들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        미국 최고 과학 경진대회에서 발생한 스캔들

     * Krish Pai는 ISEF 2024 환경공학 부문 1등을 수상하여 $55,000의 상금과 Regeneron Young Scientist Award를 받음
     * Pai는 기계 학습을 사용하여 플라스틱을 생분해할 수 있도록 유전적으로 변형 가능한 미생물 유전자 서열을 식별하는 연구를 수행했다고 주장
     * 그의 새로운 소프트웨어인 Microby는 미생물 데이터베이스를 스캔하고 플라스틱 생분해를 위해 유전적으로 변형 가능한 미생물을 결정
     * 테스트에서 그는 기존 재활용 비용의 10분의 1 수준으로 플라스틱을 분해할 수 있도록 유전적으로 변형 가능한 두 가지 미생물을 식별했다고 주장

부정 행위 의혹

     * Pai가 발표에 사용한 주요 이미지 중 하나가 온라인에서 가져온 위조된 이미지이며, 발각되지 않기를 바라며 미러링을 수행한 것으로 밝혀짐
     * 해당 이미지의 원본은 Pai가 사용한 것과는 완전히 다른 유기체인 Ideonella sakaiensis를 테스트한 유럽 대학 Ulysseus 연구소의 이미지임
     * Pai는 해당 이미지를 ""발견된 미생물에 의해 분해된 플라스틱""이라고 명확하게 레이블을 붙였는데, 이는 명백한 사기임
     * Pai는 다른 사람들의 데이터를 완전히 다른 연구 프로젝트에 가져와서 자신의 것인 양 주장하고 있음
     * 이미지는 미러링되었을 뿐만 아니라 Pai에 의해 다른 이미지와 결합되었음
     * 이는 우연이 아니라 Pai가 의도적으로 이미지를 조작하여 자신의 창작물과 결과인 것처럼 보이게 한 것임
     * 그는 또한 자신의 사진을 이 결과 바로 옆에 배치하여 마치 자신의 데이터인 것처럼 보이게 만듦
     * Pai는 파장 대 반사율 그래프도 도용하여 자신의 데이터에서 나온 것처럼 보이게 만듦
     * 해당 그림은 Pai 자신의 사진 바로 옆에 배치되어 자신이 수집하고 만든 것처럼 보이게 함
     * 원본 출처는 Zhu et al., 2019임
     * 보고서는 그림 도용, 새로움에 대한 과장된 주장, 이전 연구자의 장치 오용, 표절, 인용 사기, 과거 ISEF 수상 프로젝트와의 유사성, 잠재적 과학적 부정확성 등 수많은 추가 사례를 철저히 문서화하고 있음
     * Pai는 근적외선 분광기를 직접 만들었다고 주장했지만, 해당 이미지는 2021년 Rasberry Pi 기사에서 가져온 것으로 밝혀짐
     * Pai는 장치의 원 제작자나 이미지에 대한 크레딧을 전혀 주지 않고 ""맞춤형 센서를 만들었다""고 행동함

결론 및 제언

     * Pai의 상은 취소되어야 하며, $55,000의 상금은 차점자에게 돌아가야 함
     * 이번 사건은 ISEF의 관리 실패를 드러내며, ISEF는 이에 대해 성명을 발표해야 함
     * 주류 언론이 이번 사건을 다룰 것으로 예상됨

   이 의혹 제기 이후에 해당 수상자는 상금을 반환했습니다.

   https://www.karlstack.com/p/update-regeneron-isef-winner-withdraws

   Society for Science의 성명 발표

     Krish Pai는 Regeneron ISEF 2024에서 $50,000의 Young Scientist Award를 수상했으나, 이후 Pai의 연구 프로젝트에 대한 과학적 무결성에 대한 의혹이 제기됨
     Society for Science는 즉각적인 조사를 실시하고, 그 결과를 Pai에게 전달했고, Pai는 프로젝트를 철회하고 수상을 거부함
     현장 심사 과정에서 차점자가 결정되지 않아 상금은 재배정되지 않음

   근데 그럼 차점자에게라도 줘야할 것 같은데, 아무한테도 안준다는건 좀 이상하네요.
   이러면 정말로 저 Krish Pai가 남에게 줄 걸 뺏은게 되는건데

        Hacker News 의견

     * 2017 ISEF 결선 진출자: 2017 ISEF 결선에 진출한 경험이 매우 인상적이었음. 프로젝트를 스스로 설계한 학생들과 멘토나 연구실의 도움을 받은 학생들 간의 차이가 뚜렷했음. Regeneron이 이러한 차이를 더 명확히 구분해야 한다고 생각함.
     * 실수의 정의: 실수는 의도적으로 한 행동이 아니라 수학적 오류 등으로 인해 데이터가 잘못된 경우를 의미함. 과학 박람회에서의 한 사건으로 인해 그의 인생 전체가 망가져서는 안 되지만, 이것을 누구나 할 수 있는 부주의한 실수로 보아서는 안 됨.
     * 고등학교 압박: 자녀가 같은 학군의 학교에 다녔는데, AP 시험 준비만 한다는 이유로 다른 학교를 선택함. 학생들이 부모의 압박으로 인해 절박한 행동을 할 수 있다고 생각함.
     * 과학 프로젝트 경험: 16살 때 식물이 토양에서 중금속을 제거할 수 있는지에 대한 프로젝트를 했음. 실수를 깨닫고 일부러 프로젝트를 엉망으로 만들었지만, 도시 과학 박람회에서 우승함. 주 과학 박람회에서는 조롱받았고, 결국 해변으로 도망감.
     * 부유한 배경: 부유한 배경을 가진 학생이 상금이 필요하지 않음에도 불구하고 부정행위를 저질렀다는 점이 이해되지 않음.
     * 온라인 분노: CGP Grey의 유튜브 영상에서 분노가 사랑보다 더 바이럴하다는 내용을 떠올림. 하지만 이번 경우에는 어느 정도의 짜증이 정당하다고 생각함. 그러나 이를 알리는 것이 상황을 개선하는지 의문임.
     * 윤리 교육: 필수 윤리 강좌에서 배운 것은 부정행위를 한 사람들이 처벌을 받더라도 여전히 성공한다는 것임. 이 학생도 부정행위를 했음에도 불구하고 더 나은 상황에 있을 것이라고 생각함.
     * 미래의 부정행위: 미래의 경쟁자들은 AI를 사용하여 이미지를 생성함으로써 부정행위를 더 잘 숨길 수 있을 것임. 멘토들이 이를 몰랐다는 것이 이해되지 않음.
     * 사기와 처벌: 이는 단순한 과학적 사기가 아니라 실제 범죄 사기임. 연방 최저임금 기준으로 50,000달러 상당의 사회봉사가 적절한 처벌일 것임.
     * 과학 박람회의 부정행위: 과학 박람회에는 항상 부정행위의 흔적이 있음. 많은 학생들이 부모나 가족 친구, 연구실의 도움을 받음. 이번 사건에 대한 비판에는 인종적 요소가 포함된 것 같음. ""인도인"", ""중국인""이라는 표현이 사용됨.
"
"https://news.hada.io/topic?id=15136","slipshow - 슬라이드 기반이 아닌 기술 발표용 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    slipshow - 슬라이드 기반이 아닌 기술 발표용 도구

     * Slide 대신 Slip 이라는 개념을 사용
     * 각 Slip은 하단 길이 제한이 없어서 매우 길게 표현이 가능
     * 발표중에 발표자의 스크립트를 따라 화면(카메라)이 아래로 이동함
     * 칠판에 발표하듯 일부분만 지우기 가능
     * 마크다운 + 확장으로 쉽게 작성 가능하면서도 읽을 수 있는 문법
     * 스탠드얼론 HTML 파일로 컴파일되어 아무 웹브라우저에서나 볼수 있음

   다 좋은데, 디자인은 개선이 필요하겠어요..

   약간 기술 발표에 특화된 Prezi 같은 느낌이 드네요.
   저 같은 경우엔 Prezi 몇번 써보다가 결국 파워포인트나 워드같은 전통적이 포맷으로 돌아왔는데요,
     * 역동적인 장면 전환이 처음엔 멋있어보이고 직관적으로 보이지만 조금만 지나면 산만하게 느껴지기 쉽다
     * 발표자료를 A4 용지에 프린트해서 배포해야 하는 상황이 있을 때 문서화하기 힘들어서 도움이 안됨
     * 발표가 끝나고 질문을 받을 때 그와 관련된 슬라이드를 빨리 보여줘야 하는데 저런 방식은 각 장면 전환을 다시 보여주면서 이동해야 한다는 번거로움이 있어서 방해가 됨

   이런 이유들이 있었습니다.
   반대로 이런 점들을 해결한다면 충분히 기존의 포맷에 대응할 수 있다고 생각합니다.
"
"https://news.hada.io/topic?id=15182","ht - 헤드리스 터미널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ht - 헤드리스 터미널

     * 임의의 다른 바이너리(bash, vim등)을 VT100 스타일 터미널 인터페이스로 래핑
          + Pseudo 터미널 클라이언트(PTY)와 터미널 서버를 결합하여 해당 터미널의 입력 및 출력에 쉽게 프로그래밍 방식으로 액세스 가능
          + stdin/stdout 으로 JSON 이용
     * 터미널과 프로그래밍 방식으로 상호 작용하는 데 유용 (개발 동기는 LLM 에이전트가 터미널을 쉽게 활용하기 위함이었음)
          + 터미널은 모든 컴퓨팅 분야에서 가장 오래되고 가장 많이 사용되는 UI 프레임워크 중 하나
          + Stateful이기 때문에 예를 들어 터미널에서 편집기를 사용할 때 터미널은 커서 위치에 대한 상태를 관리해야 함
          + HT가 없으면 에이전트는 이 상태를 직접 관리하기 어렵지만 HT를 사용하면 사람처럼 터미널을 보기만 하면 됨
     * Rust로 개발되어 macOS 및 Linux에서 동작함
"
"https://news.hada.io/topic?id=15180","프로그램 합성을 위한 구문 트리에서의 Diffusion","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     프로그램 합성을 위한 구문 트리에서의 Diffusion

프로그램 합성을 위한 구문 트리 확산

  개요

     * 문제점: 대형 언어 모델(LLM)은 코드를 한 번에 하나의 토큰씩 생성함. 이 과정에서 프로그램의 실행 결과를 관찰하는 피드백이 부족함.
     * 해결책: 구문 트리에서 작동하는 신경 확산 모델을 제안함. 이미지 확산 모델과 유사하게, 구문 트리에 적용된 노이즈를 역으로 처리함.
     * 방법: 코드 생성 대신 반복적으로 편집하여 구문적 유효성을 유지함. 이를 통해 검색과 결합하기 쉬움.
     * 응용: 역 그래픽 작업에 적용하여 이미지를 해당 이미지를 생성하는 프로그램으로 변환함. 검색과 결합하여 그래픽 프로그램을 작성하고, 실행 결과를 확인하며 디버깅함.

  프로그램에 노이즈 추가란?

     * 노이즈 추가: 구문 트리의 임의 노드를 선택하고, 해당 노드를 올바른 유형의 다른 노드로 대체함.
     * 노이즈 역전: 노이즈를 추가한 후, 이를 역으로 처리하여 원래 상태로 되돌림.

  검색을 통한 프로그램 생성

     * 검색 사용: 모델이 주어진 목표 이미지를 생성하기 위한 최적의 프로그램을 찾기 위해 검색을 사용함.
     * 효율성: 몇 개의 검색 레이어만으로 올바른 프로그램을 찾을 수 있음.

  인용

     * 논문: ""Diffusion On Syntax Trees For Program Synthesis""
     * 저자: Shreyas Kapur, Erik Jenner, Stuart Russell
     * 출판: arXiv, 2024

  감사의 말

     * 기술 지원: Kathy Jang, David Wu, Cam Allen, Sam Toyer, Eli Bronstein, Koushik Sen, Pieter Abbeel

  라이선스

     * Creative Commons Attribution-ShareAlike 4.0 International License: 이 웹사이트의 소스 코드를 자유롭게 사용할 수 있으며, 페이지 하단에 링크를 추가해야 함.

GN⁺의 의견

     * 흥미로운 점: 프로그램의 실행 결과를 반영하여 코드를 편집하는 방식은 기존의 순차적 코드 생성 방식보다 더 직관적임.
     * 도움이 되는 이유: 역 그래픽 작업에 유용하며, 특히 손으로 그린 스케치를 프로그램으로 변환하는 데 강력한 도구가 될 수 있음.
     * 비판적 시각: 노이즈를 추가하고 역전하는 과정이 복잡할 수 있으며, 실제 적용 시 성능과 효율성에 대한 추가 검증이 필요함.
     * 관련 제품 추천: 비슷한 기능을 제공하는 다른 프로젝트로는 OpenAI의 Codex와 같은 코드 생성 모델이 있음.
     * 기술 도입 고려사항: 이 기술을 도입할 때는 모델의 학습 데이터와 실제 적용 환경에서의 성능을 면밀히 검토해야 함.

        Hacker News 의견

     * Racket과 MOOC 힌트 생성: Racket과 MOOC 힌트 생성 방식이 유사함. 구문 트리를 변형하고 분석하여 목표 솔루션에 도달하는 방식임. 이를 최신 머신러닝 접근법과 결합할 수 있을지 궁금함.
     * 유전 알고리즘과 서브트리 변형: 90년대 Koza와 Adami가 유전 알고리즘의 일환으로 서브트리 변형을 깊이 연구했음. 최적화 함수가 약간 다름.
     * 프로그램 트리 생성: 2000년 유전 알고리즘을 이용한 프로그램 트리 생성에 대한 참고 문헌이 있음. 주요 내용은 빠져 있음.
     * Markov Chain Monte Carlo: 프로그램 합성에 Markov Chain Monte Carlo가 새롭지 않음. Josh Tenenbaum의 연구가 즉각적으로 떠오름.
     * WebPPL 데모: WebPPL에서 3D 우주선 합성 등 다양한 데모가 있음. 관련 서적과 MIT Probabilistic Computing Project의 출판물도 추천함.
     * 컴파일러/인터프리터 최적화: 컴파일러/인터프리터 최적화에 어떻게 적용될지 궁금함. 어셈블리 수준에서 실행 부분을 분석하고 최적화를 도출할 수 있을지 의문임.
     * 프로그램 토큰 변경: 전통적 접근법에서는 무작위 이미지를 생성하고 최적화 방법을 사용함. 프로그램 토큰 변경이 어떻게 미분 가능한지 이해가 어려움.
     * GitHub과 빌드 도구 통합: GitHub이 일반 빌드 도구와 통합될 수 있음. 모든 llvm-컴파일된 프로젝트를 컴파일하고 중간 표현에 확산 모델을 적용할 수 있을지 궁금함.
     * 확산 모델과 바이너리: 확산 모델이 바이너리 수준에서 작동할 수 있을지 궁금함. 프롬프트를 주면 프로그램의 최종 바이너리를 생성할 수 있을지 의문임.
     * SDF와의 통합: SDF와의 통합을 보고 싶음.
     * PDF 렌더링 속도: PDF가 프로그램적으로 생성된 그림 명령어 때문에 렌더링이 느림. 학술 논문 느낌이 나서 그리움.
     * 빔 서치와 역확산: 빔 서치 아이디어가 흥미로움. 역확산과 빔 서치를 어떻게 통합하는지 궁금함. 역확산 단계에서 m > k 노드를 샘플링하고 상위 k 노드만 확장하는지 궁금함.
"
"https://news.hada.io/topic?id=15074","유출된 Google Search API 문서 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      유출된 Google Search API 문서 분석

     * 얼마전 익명의 소스로부터 구글의 검색 API 문서가 대량으로 유출되었다는 이메일을 받음
     * 문서의 진위는 전 구글 직원들에 의해 확인되었고, 일부 전직 구글 직원들과의 대화로 추가 정보도 포함됨

  주요 주장

     * 구글은 클릭 기반 사용자 신호를 사용하지 않는다고 반복적으로 부인해왔으나, 유출된 문서들은 이를 반박함
     * 서브도메인을 별도로 평가하지 않으며, 새로운 웹사이트에 대한 샌드박스가 없고, 도메인 연령을 고려하지 않는다는 구글의 주장도 부정됨
     * 구글 검색팀은 초기부터 검색 결과 품질을 향상시키기 위해 많은 웹 사용자의 클릭스트림 데이터(브라우저에서 방문한 모든 URL)를 필요로 했음
     * DoJ에서 인용된 NavBoost 시스템은 구글 툴바 페이지랭크에서 데이터를 수집하고, 더 많은 클릭스트림 데이터를 얻기 위해 Chrome 브라우저를 개발하게 된 주요 동기였음
     * NavBoost는 특정 키워드에 대한 검색 수, 검색 결과 클릭 수, 짧은 클릭과 긴 클릭을 분석하여 사용자 의도를 평가하고, 동영상이나 이미지에 대한 클릭이 많으면 NavBoost 관련 쿼리에 대한 동영상 또는 이미지 기능을 트리거함
     * 클릭 데이터 활용: 구글은 쿠키 기록, 로그인된 Chrome 데이터, 패턴 감지 등을 사용하여 수동 및 자동 클릭 스팸을 방지하고, 사용자의 클릭 및 참여도를 분석하여 검색 결과에 반영함
     * 사이트 품질 평가: NavBoost 데이터는 사이트의 전체 품질을 평가하는 데 사용되며(Panda라고 불리는), 이 평가에 따라 순위가 상승/강등
     * NavBoot는 클릭 데이터를 지리적 데이터도 고려하여 국가 및 주/도 수준으로 구분하여 평가함
     * 코로나19 및 선거 관련 검색 결과에 화이트리스트를 적용하여 특정 사이트를 우선적으로 표시함

  문서의 신뢰성 검증

     * 이 중 일부는 Google/DOJ 사건에서 밝혀진 정보와 겹치지만, 대부분은 새로운 내용
     * 익명의 소스는 5/28에 자신을 공개했고, 그는 Erfan Azimi(SEO 전문가)임
     * 전 구글 직원의 확인: 세 명의 전 구글 직원 중 두 명이 문서의 신뢰성을 확인함
     * 기술적 검토: 기술 SEO 전문가 Mike King이 문서를 검토하고 신뢰성을 확인함

  Google API Contents Warehouse ?

     * 이 API 문서의 목적: 구글 팀원들이 프로젝트에 사용 가능한 데이터 요소를 이해하도록 돕기 위한 문서임
     * 유출 경로: GitHub에 잠시 공개되었고, 이 기간 동안 문서가 유출됨

  주요 발견 사항

    #1: Navboost와 클릭 데이터 활용

     * 클릭 데이터 필터링: 구글은 랭킹 시스템에서 고려할 클릭 데이터를 필터링하고, 클릭 길이와 인상을 측정함.
     * 순위 시스템에 포함시키고 싶지 않은 클릭은 걸러내고, 포함시키고 싶은 클릭은 포함시키는 방법을 가지고 있음
     * 클릭 길이(예: 검색자가 검색 결과를 클릭했다가 찾은 답변에 만족하지 못해 뒤로 버튼을 빠르게 클릭하는 경우)와 노출 횟수를 측정하는 것으로 보임

    #2: Chrome 브라우저 클릭스트림 활용

     * Chrome 클릭스트림 데이터: 구글은 Chrome 브라우저의 클릭 데이터를 사용하여 Sitelinks(해당 웹사이트의 인기 있는 URL)을 결정함

    #3: 여행, 코로나, 정치 관련 화이트리스트

     * 화이트리스트 존재: 여행, 코로나, 선거 관련 검색 결과에 특정 도메인을 우선적으로 표시함

    #4: 품질 평가자 피드백 활용

     * 품질 평가자 데이터: 품질 평가자의 평가가 검색 시스템에 직접적으로 사용될 가능성이 있음

    #5: 링크 랭킹 가중치 결정에 클릭 데이터 사용

     * 링크 인덱스 분류: 클릭 데이터를 사용하여 링크 인덱스를 고품질, 중간 품질, 저품질로 분류함

  마케터를 위한 주요 시사점

     * 브랜드 중요성: 구글은 큰 브랜드를 우선적으로 랭킹에 반영함
     * E-E-A-T 요소의 중요성 감소: 일부 SEO가 강조하는 경험, 전문성, 권위, 신뢰성 요소가 직접적으로 랭킹에 반영되지 않을 가능성이 있음
          + Experience, Expertise, Authoritativeness, Trustworthiness
     * 사용자 의도와 클릭 패턴이 콘텐츠와 링크보다 더 중요한 랭킹 요소임
     * 페이지랭크, 앵커 텍스트 등 전통적인 랭킹 요소의 중요성이 감소하고 있음
     * SEO의 어려움: 중소기업과 새 창작자/퍼블리셔에게 SEO는 큰 브랜드와 경쟁하기가 더 어려워짐

   그렇다면 뒤로 가기 버튼을 동작안하도록 막아버리는건 어떨까요 ㅋㅋ

   막연히 짐작은 했지만, 펼쳐져 놓인 것을 보니 멘붕이군요...
   Navboost 까지는 수긍할 수 있을 것 같은데...
   화이트리스트는 충격이네요. 말이 좋아서 화이트지, 노골적인 차별 정책인데 말이죠.

   유출된 Google Content API Warehouse 문서
   https://hexdocs.pm/google_api_content_warehouse/0.4.0/…
"
"https://news.hada.io/topic?id=15153","맥스웰 방정식 직관적 가이드 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         맥스웰 방정식 직관적 가이드 (2020)

맥스웰 방정식에 대한 직관적 가이드

  소개

     * 1865년, 제임스 클러크 맥스웰은 전자기장을 설명하는 논문을 발표함
     * 이 논문은 전자기파의 존재를 예측하고, 전자기파와 가시광선이 동일한 것임을 수학적으로 증명함
     * 맥스웰 방정식은 빛과 다른 전자기 복사의 행동을 수학적으로 구성하고 추론할 수 있게 해줌

  필드

    필드란 무엇인가?

     * 필드는 공간과 시간에 걸쳐 작용하는 함수로 생각할 수 있음
     * 필드는 물질적 또는 기계적 유사성을 가지지 않음
     * 필드는 수학적 함수로서 공간과 시간에 퍼져 있음

    필드의 종류

     * 스칼라 필드: 공간의 한 점을 입력으로 받아 단일 숫자 값을 출력함
     * 벡터 필드: 공간의 한 점을 입력으로 받아 크기와 방향을 가진 벡터를 출력함

      온도

     * 산을 오를 때 고도가 높아질수록 온도가 낮아짐
     * 온도를 스칼라 필드로 정의할 수 있음

      온도와 열

     * 열 방정식은 열 흐름을 모델링함
     * 부분 미분 방정식을 사용하여 시스템의 변화를 모델링함

    벡터 필드

     * 유체의 속도 필드를 모델링할 때 벡터 필드를 사용함
     * 중력이나 자기장을 모델링할 때도 벡터 필드를 사용함

    발산

     * 벡터 필드의 발산은 특정 점에서 유체가 얼마나 밀집되는지를 나타냄
     * 발산이 양수이면 소스, 음수이면 싱크로 간주함

    컬

     * 벡터 필드의 컬은 특정 점에서 유체가 얼마나 회전하는지를 나타냄
     * 시계 반대 방향 회전은 양의 컬, 시계 방향 회전은 음의 컬로 간주함

  맥스웰 방정식

    가우스의 전기장 법칙

     * 전기장의 발산은 그 점에서의 전하 밀도에 비례함
     * 전기장은 양전하에서 발산하고 음전하로 수렴함

    가우스의 자기장 법칙

     * 자기장의 발산은 항상 0임
     * 자기장은 소스나 싱크가 없으며, 순 발산이 0임

GN⁺의 의견

     * 맥스웰 방정식의 중요성: 전자기파와 빛의 본질을 이해하는 데 필수적임
     * 수학적 접근의 필요성: 물리적 직관보다는 수학적 함수와 방정식으로 이해해야 함
     * 교육적 가치: 복잡한 개념을 시각적이고 직관적으로 설명하는 방법론이 유익함
     * 기술적 도전: 부분 미분 방정식과 같은 고급 수학적 개념을 이해하는 데 어려움이 있을 수 있음
     * 응용 가능성: 전자기학, 광학, 통신 등 다양한 분야에서 활용 가능함

        Hacker News 의견

     * 첫 번째 의견: 물리학 학위 시절 이런 콘텐츠가 있었다면 좋았을 것임. 다이어그램이 아름답고 핵심 벡터 미적분 개념을 잘 설명함.
     * 두 번째 의견: 훌륭한 링크와 기사임. 천천히 읽고 있으며 매우 흥미로움.
     * 세 번째 의견: 교육 중 가장 좋아했던 부분은 맥스웰 방정식의 아름다움을 발견한 것임. 미분 기하학을 통해 더 깊이 이해할 수 있음.
     * 네 번째 의견: 모든 벡터 미적분 강사는 grad, div, curl의 직관적 의미를 가르쳐야 함. 공학 학생들도 직관적으로 이해할 수 있어야 함.
     * 다섯 번째 의견: 설명이 매우 잘 되어 있음. 단순하지만 많은 세부 사항이 포함되어 있어 집중과 노력이 필요함. 이런 방식으로 설명되었다면 더 흥미롭게 공부했을 것임.
     * 여섯 번째 의견: 전자기학의 특수 상대론적 측면을 설명하는 접근법을 보고 싶음. 인터넷에 관련 자료가 많지 않음.
     * 일곱 번째 의견: Sussman과 Wisdom이 쓴 ""고전 역학의 구조와 해석"" 책처럼 전자기학에 대한 유사한 접근법을 시도한 사람이 있는지 궁금함.
     * 여덟 번째 의견: 전기장과 자기장의 상대론적 동등성에 대한 추가 정보 제공.
     * 아홉 번째 의견: 맥스웰 방정식의 현대적 4개 방정식 형태가 원래의 맥스웰 방정식을 직관적으로 재구성한 것임.
     * 열 번째 의견: 시간에 따라 3D로 확장된 2D 플롯이 훌륭함. 어떻게 만들어졌는지 궁금함.
"
"https://news.hada.io/topic?id=15084","Openkoda – 프라이빗한 Salesforce 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Openkoda – 프라이빗한 Salesforce 오픈소스 대체제

     * 비즈니스 애플리케이션 및 내부 도구 구축 프로세스를 가속화하는 즉시 사용 가능한 개발 플랫폼
     * 사전 구축된 기능과 Out-of-the-box 피쳐로 개발시간과 노력 감소
     * 유연하고 확장 가능한 접근 방식 : 엔티티로 애플리케이션을 빌드. 다양한 멀티테넌시 모델 중에서 선택 가능
     * Java + Spring Boot + JavaScript + HTML + Hibernate + PostgreSQL
     * 무제한 커스터마이징 및 통합 옵션 제공 (슬랙, 베이스캠프, 깃헙, 지라, 트렐로, 구글, 스트라이프, 팀스 등 )

  기본 제공 기능

    동적 엔티티

     * 데이터베이스 테이블, CRUD 기능, 폼, 개요 생성 가능

    애플리케이션 관리자 패널

     * 앱 구성: 이메일 설정, 역할, 권한, HTML 템플릿 관리.
     * 감사 화면: 데이터 변경 추적.
     * 시스템 로그: 활동 인사이트 및 문제 해결.
     * 시스템 상태: 시스템 성능 및 상태 개요.

    사용자 관리

     * 조직에 사용자 초대
     * 역할 설정
     * 사용자 프로필 설정 접근
     * 사용자 스푸핑 (관리자 모드에서 가능)

    역할 및 권한

     * 글로벌 또는 조직별 역할 생성
     * 각 역할에 권한 할당

    조직 관리

     * 조직 데이터 분리
     * 데이터 접근 보안 규칙 구현
     * 대시보드 사용자 정의
     * 사용자에게 조직 역할 할당

    CMS

     * HTML 템플릿 수정
     * 리소스 초안 버전 편집
     * 새로운 공개 리소스 도입

    리소스 관리

     * 파일 개요 관리
     * 이미지 크기 조정
     * 파일 공개 접근 설정

    이벤트 리스너

   애플리케이션 이벤트에 응답 (예: 사용자 생성, 로그인, 애플리케이션 시작)하는 내장 핸들러 사용.

    백업

   내장된 데이터베이스 백업 루틴.

    가져오기 및 내보내기

   현재 앱의 구성 요소를 내보내고 다른 Openkoda Core 인스턴스로 쉽게 가져오기 가능.

    다중 테넌시 모델

     * 단일 데이터베이스 / 단일 스키마
     * 단일 데이터베이스 / 다수 스키마
     * 다수 데이터베이스 / 다수 스키마

    작업 요청

   시간 간격으로 작업 예약 및 이벤트 리스너로 작업 처리.

    알림

   이메일, Slack, Jira, GitHub, Trello, Basecamp와 같은 알림 채널과 애플리케이션 동기화.

    이메일 발송기

   CMS를 통해 이메일 템플릿 사용자 정의 및 이메일 예약.

GN⁺의 의견

     * Openkoda의 유연성: 다양한 다중 테넌시 모델과 동적 엔티티 기능은 다양한 비즈니스 요구에 맞게 애플리케이션을 쉽게 확장할 수 있게 함.
     * 기술 스택: Java, Spring Boot, Hibernate 등 익숙한 기술 스택을 사용하여 초급 엔지니어도 쉽게 접근 가능.
     * 샘플 애플리케이션: 제공되는 샘플 애플리케이션은 실제 비즈니스 시나리오에 대한 좋은 예시를 제공함.
     * 기여 기회: 오픈 소스 프로젝트로서 개발자들이 직접 기여하고 개선할 수 있는 기회가 많음.
     * 관리형 클라우드: 관리형 클라우드 옵션은 배포와 확장을 쉽게 만들어줌.

        Hacker News 의견

     * Documentation 부족: OpenKoda의 문서화가 표면적인 수준에 머물러 있음. 깊이 있는 개발자 문서가 필요함.
     * CRM과 Salesforce: Salesforce의 오픈 소스 버전을 원하는 사람은 거의 없으며, 트렌드가 중요함.
     * 감사 인사: 피드백을 감사히 여기며, OpenKoda 데모를 제공할 의향이 있음.
     * Salesforce 불만: Salesforce에 대한 불만을 토로하며, OpenKoda에 흥미를 느끼고 있음.
     * 경쟁 플랫폼: OpenKoda는 Salesforce보다는 Retool과 경쟁할 가능성이 높음.
     * 기능 비교: 무료 버전과 엔터프라이즈 버전의 기능 차이를 알고 싶어함.
     * 중복 게시: 10일 전에 이미 게시했는데 왜 다시 게시하는지 궁금해함.
     * Salesforce의 강점: Salesforce는 파트너 생태계가 강력하며, 플랫폼 리스크가 거의 없음. OpenKoda의 플러그인 및 서비스 파트너에 대한 접근 방식이 궁금함.
     * Salesforce와 경쟁: Salesforce와 같은 대기업 소프트웨어를 이길 수 있을지 의문임.
     * NextJS 프로젝트: NextJS로 작성된 유사한 프로젝트가 있는지 궁금해함.
"
"https://news.hada.io/topic?id=15091","폴리스 주지사, 소비자 전자제품 수리 선택권 보장 법안 서명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   폴리스 주지사, 소비자 전자제품 수리 선택권 보장 법안 서명

콜로라도 공화당 부의장, 음모론 단체 FEC United와의 대화

  주요 내용

     * 콜로라도 공화당 부의장이 음모론 단체 FEC United와 대화한 사실이 있음.
     * FEC United는 선거 부정과 관련된 음모론을 주장하는 단체임.
     * 이 대화는 공화당 내부에서 논란을 일으킬 수 있는 요소로 작용할 가능성이 있음.

GN⁺의 의견

     * 정치적 논란: 공화당 부의장이 음모론 단체와 대화한 사실은 당내외에서 논란을 일으킬 수 있음.
     * 신뢰도 문제: 공화당의 신뢰도에 영향을 미칠 수 있으며, 이는 향후 선거에 부정적인 영향을 줄 수 있음.
     * 음모론 확산: 음모론 단체와의 연계는 음모론의 확산을 부추길 수 있음.
     * 정치적 전략: 이러한 행동이 특정 정치적 전략의 일환일 수 있으며, 이에 대한 분석이 필요함.

   링크된 페이지와 요약이 다른거 같습니다.

        Hacker News 의견

     * 첫 번째 댓글: 콜로라도의 새로운 법이 기존 주 법들과 비교해 강력함. 특히 데이터 센터와 기업 간 장비를 포함함.
     * 두 번째 댓글: 콜로라도가 다양한 제품 카테고리에 대해 문서, 부품, 내장 소프트웨어, 펌웨어, 도구를 포함함. 추가적인 권리가 필요함.
          + UL 또는 EPA가 장치의 수리 가능성과 총 소유 비용을 평가해야 함.
          + 수리 부품과 클라우드 기능의 시장 지속 기간을 공개해야 함.
          + 부품이 더 이상 제공되지 않을 때 호환 가능한 대체품을 생산하는 것이 합법이어야 함.
          + 전자 제품의 회로도를 제공해야 함.
          + 부품과 장치를 나이, 현재 시간, 모델 또는 타사 부품 설치로 인해 비활성화하는 것이 불법이어야 함.
     * 세 번째 댓글: 장치나 장비의 소유자로서 수리할 수 있는 권리는 기본적인 권리임. 왜 큰 문제가 되는지 이해하지 못함.
     * 네 번째 댓글: 법률 텍스트와 투표 결과 링크 제공.
     * 다섯 번째 댓글: 텔레비전 수리가 어떻게 가능한지 의문. 가격이 이미 저렴함. 제조업체가 사람들을 고소하지 못하게 하기 위한 것일 수 있음.
     * 여섯 번째 댓글: 이 법이 잘 의도되었지만, 회사들이 장치를 수리 불가능하게 설계하는 것이 더 저렴하고 쉬워질 수 있음.
     * 일곱 번째 댓글: 스코틀랜드에 연방 경찰이 있다는 사실을 몰랐음.
"
"https://news.hada.io/topic?id=15112","보트를 숨기라는 명령을 받은 남성, 울타리에 보트를 그리다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    보트를 숨기라는 명령을 받은 남성, 울타리에 보트를 그리다

예술 세계: 배를 숨기기 위해 울타리를 세우라는 명령을 받은 남자, 예술가에게 울타리에 배를 그리게 하다

  사건 개요

     * 캘리포니아 시사이드의 주민 에티엔 콘스터블은 집 앞에 있는 배를 숨기기 위해 울타리를 세우라는 명령을 받음.
     * 콘스터블은 울타리를 세운 후, 이웃 예술가 하니프 파니에게 울타리에 배를 사실적으로 그리게 함.
     * 이 사건은 인터넷과 소셜 미디어에서 큰 화제가 됨.

  예술적 접근

     * 콘스터블은 규칙을 어기지 않으면서도 정치적, 유머러스한 메시지를 전달하고자 했음.
     * 하니프 파니는 이 아이디어를 듣고 흥미를 느껴 작업을 시작함.
     * 울타리에 그려진 배는 실제 배와 매우 흡사하게 묘사됨.

  반응과 영향

     * 이 이야기는 많은 뉴스 매체에 보도되고 소셜 미디어에서 큰 인기를 끌었음.
     * 콘스터블은 사람들이 그의 독특한 아이디어를 좋아하는 것에 대해 기쁨을 표현함.
     * 한 지역 공무원은 이 창의적인 접근 방식을 칭찬함.

  예술가 하니프 파니

     * 하니프 파니는 오리건 대학교에서 예술과 미술사를 전공한 다재다능한 예술가임.
     * 다양한 클라이언트와 작업해왔으며, 그의 작품은 예술사적 전통과 잘 어울림.
     * 하니프는 이번 사건을 계기로 다른 배 벽화 작업 요청을 받았으나, 특정 이미지로 고정되는 것을 경계함.

  예술적 전통

     * 하니프의 작업은 고전 그리스 시대로 거슬러 올라가는 트롱프뢰유 기법을 사용함.
     * 또한, 해양 회화의 전통을 이어받아 작업함.

  GN⁺의 의견

     * 창의적 해결책: 규제를 따르면서도 창의적으로 문제를 해결한 사례로, 많은 사람들에게 영감을 줄 수 있음.
     * 커뮤니티 강화: 이웃 간의 협력과 우정을 보여주는 사례로, 지역 사회의 결속력을 강화할 수 있음.
     * 예술의 힘: 예술이 단순한 장식 이상의 역할을 할 수 있음을 보여줌. 예술은 메시지를 전달하고, 사람들 간의 대화를 촉진할 수 있음.
     * 비판적 시각: 규제를 우회하는 방식이기 때문에, 다른 사람들에게는 부정적으로 보일 수 있음. 규제의 목적을 고려할 필요가 있음.
     * 기술적 도전: 트롱프뢰유 기법은 높은 기술적 숙련도를 요구함. 초급 엔지니어가 이 기법을 이해하고 적용하는 데는 시간이 걸릴 수 있음.

        Hacker News 의견

     * 미국의 자유: 총을 학교에 가져갈 수 있지만 잔디가 너무 길면 벌금을 받는 상황이 미국의 자유를 상징함. HOA(주택 소유자 협회) 관련 이야기는 항상 재미있음.
     * HOA가 아닌 문제: 이 문제는 HOA가 아닌 Seaside 시에서 발생한 것임. 시는 이를 시 조례 위반으로 간주함.
     * HOA 비판: HOA를 좋아하지 않지만, 때로는 HOA가 문제가 아님.
     * 아일랜드와 영국의 유사 사례: 아일랜드와 영국에서도 집 앞에 자전거 보관소를 설치하는 문제로 비슷한 문제가 발생함.
     * 쓰레기통 문제 해결: 친구가 쓰레기통을 밖에 두지 못하게 하자, 나무로 된 인클로저를 만들어 외부에 쓰레기통 그림을 그려 해결함.
     * 울타리의 목적: 울타리가 배를 숨기기 위한 것인지 물리적 장벽을 제공하기 위한 것인지에 대한 논의. Seaside 시의 규칙이라면 후자일 가능성이 높음.
     * 배를 숨기는 이유: 왜 배를 숨기라는 명령을 받았는지 설명이 없어서 이상하게 느껴짐. 이는 개인의 마당이고 배는 PG13 아이템이 아님.
     * 배 정렬 강박증: 배 주인으로서 울타리에 완벽하게 맞추고 싶어하는 강박증을 유발할 것 같음.
     * HOA의 본질: HOA는 주로 가난한 사람들과 살기 싫어하는 사람들의 속물근성에서 비롯됨. 낡은 차나 수리되지 않은 차, ""못생긴 페인트""를 싫어함.
     * HOA 가입 강제성 도전: 부동산을 구매할 때 HOA에 강제로 가입해야 하는 것이 언젠가는 도전받을 것이라고 생각함. 특히 대부분의 HOA가 특정 부동산에 대해 아무것도 하지 않는 경우.
     * 그림 속임수 이야기: Parrhasius가 Zeuxis를 속이기 위해 커튼 뒤에 그림을 걸어두었고, Zeuxis가 커튼을 당기려 했을 때 그것이 그림임을 알게 된 이야기.
"
"https://news.hada.io/topic?id=15111","스노우플레이크 데이터 유출: 해커, 인포스틸러 감염을 통한 접근 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 스노우플레이크 데이터 유출: 해커, 인포스틸러 감염을 통한 접근 확인

     * 2024년 5월 31일, 클라우드 기업 스노우플레이크가 대규모 데이터 유출을 겪음
     * 해커는 인포스틸러 감염을 통해 접근했다고 허드슨 록에 확인해줌
     * 해커는 티켓마스터와 산탄데르 은행을 포함한 여러 주요 회사의 데이터를 러시아어 사이버 범죄 포럼에 판매함

  해킹 방법

     * 해커는 스노우플레이크 직원의 ServiceNow 계정에 도용된 자격 증명을 사용해 로그인함.
     * OKTA를 우회하여 세션 토큰을 생성하고 대량의 데이터를 유출함.
     * 해커는 약 400개의 회사가 영향을 받았다고 주장함.

  추가 증거

     * 해커는 허드슨 록 연구원들에게 스노우플레이크 서버에 대한 접근 권한을 보여주는 CSV 파일을 공유함.
     * 이 파일은 스노우플레이크의 유럽 서버와 관련된 2,000개 이상의 고객 인스턴스를 문서화함.

  해커의 목표

     * 해커는 스노우플레이크에게 2천만 달러를 요구하며 데이터를 되찾으려 함.
     * 회사는 이에 응답하지 않음.

  인포스틸러 감염의 증가

     * 인포스틸러 감염은 2018년 이후 6000% 증가하여 주요 초기 공격 벡터로 자리잡음.
     * 이는 랜섬웨어, 데이터 유출, 계정 탈취, 기업 스파이 활동 등을 포함한 사이버 공격을 실행하는 데 사용됨.

GN⁺의 의견

     * 사이버 보안의 중요성: 이번 사건은 기업이 사이버 보안에 더욱 신경 써야 함을 보여줌. 특히 직원들의 자격 증명 관리가 중요함.
     * 인포스틸러의 위협: 인포스틸러는 매우 빠르게 확산되고 있으며, 기업은 이에 대한 대비책을 마련해야 함.
     * 대응 전략: 해킹 사건 발생 시 신속한 대응과 피해 최소화 전략이 필요함. 스노우플레이크의 대응이 늦어 피해가 커짐.
     * 보안 교육: 직원들에게 보안 교육을 강화하여 자격 증명 관리와 피싱 공격에 대한 인식을 높이는 것이 중요함.
     * 대체 솔루션: 스노우플레이크와 유사한 기능을 제공하는 다른 클라우드 저장소 솔루션을 고려해 볼 수 있음. 예를 들어, AWS S3나 Google Cloud Storage 등이 있음.

        Hacker News 의견

     * Snowflake와 협력하는 과정에서 SE(솔루션 엔지니어)가 데모 환경을 설정하고 클라이언트 데이터를 사용함. 클라이언트가 ID 만료를 관리하지 않아 발생한 문제로 보임.
     * 기사 제목과 내용이 일치하지 않음. 고객 데이터 노출과 관련 없는 문제로 보이며, 실제로 손상된 고객 수는 적음.
     * Snowflake의 Felipe가 문제에 대한 최신 정보를 공유함. 링크를 통해 업데이트된 내용을 확인할 수 있음.
     * 채팅 로그 스크린샷이 인상적임. 범죄자가 이 회사와 소통 중이며, 회사의 도움으로 침해를 막을 수 있었다고 주장함.
     * Snowflake 시스템이 단일 관리자 계정으로 모든 접근을 허용하는 방식으로 설계된 것 같음. 이는 Ticketmaster와 Santander 사건의 신뢰성을 높임.
     * Snowflake는 고객의 잘못으로 문제 발생했다고 주장함. 연구 결과, Snowflake 제품의 취약점이나 잘못된 구성 때문이 아님을 강조함.
     * 공식 Snowflake 응답에 따르면, 이번 사건은 고객의 사용자 자격 증명이 노출된 것과 관련이 있음. Snowflake 제품 자체의 문제는 아님.
     * Ticketmaster 침해 사건이 Snowflake 직원의 자격 증명 도용으로 인해 400개 이상의 회사에 영향을 미쳤다는 주장. Hudson Rock의 신뢰성에 대한 의문 제기.
     * 위협 행위자가 Snowflake 직원의 ServiceNow 계정을 도용해 OKTA를 우회했다고 설명함. ServiceNow의 역할과 중요성에 대한 설명 요청.
     * Snowflake 직원의 자격 증명을 도용해 고객 데이터를 접근할 수 있다는 점에 의문 제기. Snowflake의 데이터 보안에 대한 기대가 높음.
"
"https://news.hada.io/topic?id=15090","프롬프트 하나로 풀스택 웹앱을 만드는 Marblism","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     프롬프트 하나로 풀스택 웹앱을 만드는 Marblism

   기능
    1. 만들고 싶은 제품을 묘사하는 프롬프트를 간략하게 작성합니다
    2. 작성한 프롬프트를 기반으로 Marblism이 페이지를 생성하고, 페이지별 유저경험을 정의합니다.
    3. 정의된 페이지와 UX를 기반으로 DB 모델링을 시작합니다. 기능구현에 필요한 컬럼을 알아서 생성합니다.
    4. 코드베이스를 생성합니다. 원한다면 자신의 깃헙 프로필을 초대할 수 있고, Marblism 내의 workspace에서 프롬프트로 수정할 수 있습니다. 물론 배포도 가능합니다.

   인상깊은 UX
     * AI 제품은 자유도가 높은 것이 양날의 검이다. 지나친 자유도는 선택의 부담을 안기기 때문에 모든 옵션을 열어두지 말고, 버티컬하게 집중할 옵션을 제안해야 한다. 단, 제한된 옵션 안에서 최대한의 자유도를 주면 좋다.
     * AI는 의도파악을 잘한다. 이걸 적극적으로 활용해서 유저가 미처 생각하지 못했던 부분까지 파악해 결과물을 제안할 수 있어야한다. Marblism은 프롬프트 하나로 notification 페이지 같이 사소한 것까지 알아서 생성해준다.
"
"https://news.hada.io/topic?id=15097","6년 만에 GraphQL을 그만둔 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         6년 만에 GraphQL을 그만둔 이유

     * 2018년부터 6년간 사용 후, 진정한 GraphQL 열혈 팬이었지만 이제 회의가 듦
     * 이제 GraphQL을 추천하지 않는 이유와 더 나은 대안이 무엇이라고 생각하는지에 대해 설명하고자 함

  공격 표면

     * GraphQL은 쿼리 언어를 노출하여 공격 표면을 넓히는 위험이 있음.
     * 권한 부여와 관련된 문제는 특히 중요함.
          + 모든 필드에 대해 적절한 권한 검사가 필요함.
          + REST API에서는 엔드포인트마다 권한을 검사하는 것이 더 간단함.

    권한 부여

     * 모든 필드에 대해 사용자 권한을 확인해야 함.
     * REST API에서는 엔드포인트마다 권한을 검사하는 것이 더 간단함.

    속도 제한

     * GraphQL 쿼리는 크기 제한이 없어서 서버에 큰 부담을 줄 수 있음.
     * 쿼리 복잡성을 추정하고, 일정 복잡성을 초과하는 쿼리를 제한하는 방법이 있음.
     * REST API에서는 요청 수를 제한하는 것이 더 간단함.

    쿼리 파싱

     * 잘못된 쿼리 문자열이 서버의 메모리를 과도하게 사용할 수 있음.
     * 최대 오류 수를 설정하여 파싱을 중단하는 방법이 있음.

  성능

    데이터 페칭과 N+1 문제

     * 필드 리졸버가 외부 데이터 소스를 여러 번 호출할 수 있음.
     * Dataloader 패턴을 사용하여 문제를 해결할 수 있음.
     * REST에서는 컨트롤러에서 N+1 문제를 해결하는 것이 더 간단함.

    권한 부여와 N+1 문제

     * 권한 부여 코드가 N+1 문제를 일으킬 수 있음.
     * REST에서는 이 문제가 발생하지 않음.

  결합

     * GraphQL 코드베이스는 비즈니스 로직이 전송 계층에 강하게 결합됨.
     * 통합 테스트가 필요하고, 디버깅이 어려움.

  복잡성

     * GraphQL의 보안 및 성능 문제를 해결하기 위한 다양한 방법들이 코드베이스의 복잡성을 증가시킴.
     * REST 솔루션은 일반적으로 더 간단함.

  대안

     * OpenAPI 3.0+를 사용하는 JSON REST API를 추천함.
     * 정적 타입 언어로 작성된 클라이언트가 있는 경우, OpenAPI가 더 나은 선택일 수 있음.
     * OpenAPI는 자동으로 타입 안전한 클라이언트 코드를 생성할 수 있음.

GN⁺의 의견

     * GraphQL은 강력하지만, 보안과 성능 문제를 해결하는 데 많은 노력이 필요함.
     * REST API는 상대적으로 간단하고, 많은 경우에 더 적합할 수 있음.
     * OpenAPI는 타입 안전성과 자동화된 도구를 제공하여 개발 생산성을 높일 수 있음.
     * GraphQL을 도입할 때는 보안 및 성능 문제를 충분히 고려해야 함.
     * REST와 GraphQL의 장단점을 비교하여 프로젝트에 맞는 기술을 선택하는 것이 중요함.

   GraphQL은 좀 짜증나요 (2022)

   rpc 대유행의 시대가 온다

   그럼 그렇지... 뭔가 fancy 한게 나왔다고 덥석 물고 빨아서는 안되는 거지.. 이젠 orm 차례다. 너도 멀지 않았다...

   orm은 나온지 20년이 넘었는데요...

   저는 처음 봤을때부터 마음에 안들었어요. 아무래도 RDBMS 위주의 전통적인 개발 방식에 익숙하고 그 시각에서 봐서 그럴 진 모르겠지만, 왜 프론트엔드에 쿼리 방식을 고집해야 하며, 매우 복잡한 커스터마이징 및 타입 보장 등등 여러가지로 일반 REST 에 비해 매력이 없어요. API는 자유도가 너무 넓아도 문제라 봅니다. 실무에서 잠깐 써봤지만 이미 구축해서 망정이지 제가 아키 한다면 당장 쓰지 말라 할 겁니다.

   2018년이면 PQ가 그다지 새롭지도 않았을텐데(사실 GraphQL이 처음 발표 될때부터 권장됨) 6년간 시도를 안했다는게 놀랍네요...

   GraphQL 을 손수 모두 구현하기에는 위에서 말한 모든 이유로 인해 복잡도, 안정성 면에서 어렵습니다. hasura 나 postgraphile 같은 layer 를 DB 위에 두고, 필요에 따라 graphql 이든 rest 든 이 layer 에 추가하는 식으로 개발하는 것이 좋을 것 같아요

        Hacker News 의견

     * GraphQL 도입 후 많은 문제를 겪었음. 권한 관리와 성능 문제로 인해 더 이상 사용하고 싶지 않음. 프론트엔드에서만 사용하면 좋을 수 있지만, 백엔드와의 통합은 복잡함.
     * REST를 먼저 배우고 gRPC를 사용해보니 타입 안전한 API가 매력적이었음. GraphQL은 많은 이점이 없고, 데이터베이스처럼 동작할 때만 유용함.
     * 두 개의 GraphQL 프로젝트에서 일했는데, 초기에는 작게 시작했지만 시간이 지나면서 복잡해졌음. 디버깅이 어렵고 성능 문제가 발생함. REST와 RPC가 더 간단하고 관리하기 쉬움.
     * Hasura 창립자로서 GraphQL 사용의 진화를 보았음. GraphQL은 데이터 레이어가 없으면 구축하기 매우 어려움. REST 위에 GraphQL을 사용하는 것은 비효율적임. GraphQL의 주요 사용 사례는 여러 데이터 소비자가 있는 경우임.
     * 프론트엔드 엔지니어들이 쿼리를 중앙 라이브러리에 저장하고 재사용하는데, 이는 GraphQL을 REST처럼 사용하는 것과 같음.
     * OpenAPI, GraphQL, JSON/HTTP, gRPC를 사용해본 경험으로, GraphQL 쿼리를 제한하는 것이 성능과 보안 문제를 완화할 수 있음. Buf Connect가 대부분의 프로젝트에 가장 적합한 타협점임.
     * Facebook에서 GraphQL을 사용한 경험으로, 많은 사람들이 GraphQL이 해결하려는 문제를 가지고 있지 않음. Facebook은 버전 관리와 복잡한 객체 모델을 다루기 위해 GraphQL을 사용함.
     * Facebook에서 GraphQL이 잘 작동하는 이유는 모든 사용자가 로그인하고, 보안이 모든 필드에 내재되어 있기 때문임. SPA와 로그인 요구 사항이 있는 경우 GraphQL이 유용할 수 있음.
     * GraphQL을 사용해보니 처음에는 좋았지만, 결국 많은 추가 작업과 중복이 필요했음. JSON-RPC 타입 엔드포인트로 시작하고 필요한 기능을 추가하는 것이 더 나았음.
     * 작은 프로젝트에서 GraphQL을 사용해보니 거의 모든 부분이 좋았음. Apollo Client와 graphql-codegen을 사용해 Vue 3용 타입과 함수를 생성했음. 일부 문제는 있었지만, 타입 수준에서 많은 오류를 잡아줌.
"
"https://news.hada.io/topic?id=15167","가상 정원 게임으로 배우는 CSS Grid","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        가상 정원 게임으로 배우는 CSS Grid

그리드 가든 소개

  그리드 가든이란?

     * 그리드 가든은 CSS 그리드 레이아웃을 학습하기 위한 게임임.
     * 사용자는 grid-column-start 속성을 사용해 당근이 있는 영역에 물을 주는 방식으로 게임을 진행함.

  예시 코드 설명

     * **grid-column-start: 3;**는 그리드의 세 번째 세로선부터 시작하는 영역에 물을 주는 것을 의미함.
     * 그리드의 각 열과 행은 **20%**씩 차지하도록 설정됨.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}
#water {}

  추가 학습 자료

     * Flexbox Froggy를 통해 CSS Flexbox를 학습할 수 있음.

GN⁺의 의견

     * 교육적 가치: 그리드 가든은 게임을 통해 CSS 그리드 레이아웃을 재미있게 학습할 수 있는 좋은 도구임.
     * 실습의 중요성: 이와 같은 인터랙티브 학습 도구는 이론보다는 실습을 통해 더 효과적으로 학습할 수 있게 해줌.
     * 기술 확장성: CSS 그리드와 Flexbox는 현대 웹 디자인에서 중요한 기술이므로, 이를 잘 이해하는 것이 중요함.
     * 다른 도구 추천: CSS 그리드 외에도 CSS Diner와 같은 다른 학습 도구들도 활용해보는 것을 추천함.
     * 주의사항: 게임을 통해 기본 개념을 익힌 후, 실제 프로젝트에서의 적용 방법을 학습하는 것도 중요함.

        Hacker News 의견

     * Rachel Andrews의 시리즈는 백엔드 개발자에게도 현대적인 UI 앱을 구축하는 데 큰 도움이 됨.
     * 팀과 함께 30분 동안 쇼앤텔을 했고, 비개발자도 참여하여 기본 프로그래밍 기술을 개발하는 데 유익했음.
     * 게임이 재미있지만, 문제 해결에만 집중하게 되어 깊은 이해를 방해할 수 있음. 해결책으로는 시도 횟수에 대한 패널티를 제안함.
     * 게임의 장점은 절대 위치를 확인하여 답을 검증하고, 단점은 시도마다 구글 애널리틱스를 전송하는 것임.
     * CSS Zen Garden은 과거에 CSS를 배우고 디자인 영감을 얻는 훌륭한 소스였음.
     * 이 게임과 Flexbox Froggy는 재미있게 CSS 레이아웃을 배우는 데 좋음.
     * 첫 10레벨을 플레이한 후 CSS에 대한 불만이 커졌음.
     * 이전의 큰 토론 링크를 공유함.
     * Flexbox Froggy가 Grid Garden보다 더 도움이 되었음. CSS Grid는 잘 이해되지 않음.
     * 최근에 Subgrid가 포함되었는지 궁금했음.
"
"https://news.hada.io/topic?id=15100","HN 공개: 토끼굴 탐험을 위한 ChatGPT UI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 공개: 토끼굴 탐험을 위한 ChatGPT UI

고속 언어 모델

  고속 언어 모델의 중요성

     * 고속 언어 모델은 자연어 처리(NLP) 작업에서 중요한 역할을 함.
     * 빠른 처리 속도와 높은 정확도를 제공하여 다양한 애플리케이션에서 사용 가능함.
     * 챗봇, 자동 번역, 텍스트 요약 등에서 활용됨.

  고속 언어 모델의 장점

     * 처리 속도가 빨라 사용자 경험이 향상됨.
     * 대용량 데이터를 효율적으로 처리할 수 있음.
     * 실시간 응답이 필요한 애플리케이션에 적합함.

  고속 언어 모델의 적용 사례

     * 고객 서비스: 빠르고 정확한 답변 제공.
     * 의료 분야: 환자 기록 분석 및 진단 보조.
     * 금융 분야: 시장 분석 및 예측.

  GN⁺의 의견

     * 고속 언어 모델은 다양한 산업에서 혁신을 가져올 수 있음.
     * 실시간 처리가 필요한 애플리케이션에서 특히 유용함.
     * 데이터 처리 능력이 향상되면 더 많은 응용 프로그램에서 사용 가능함.
     * 기술 도입 시 초기 비용과 인프라 요구 사항을 고려해야 함.
     * 경쟁 제품으로는 OpenAI의 GPT-3, Google's BERT 등이 있음.

        Hacker News 의견

     * 첫 번째 의견: 이 기능이 단순한 ""기믹"" 이상으로 중요한 것 같음. 클릭한 주제가 다시 열리지 않는 점이 좋음. UX 개선 필요성 강조.
     * 두 번째 의견: 사용자가 텍스트를 선택하고 링크처럼 사용할 수 있게 하는 기능 제안.
     * 세 번째 의견: 사람 이름을 링크화하지 않는 점이 아쉬움. 위키피디아처럼 이름을 선택해 정보를 얻는 기능이 유용할 것 같음.
     * 네 번째 의견: LLM의 UX/UI가 아직 미성숙함. 더 많은 실험이 필요함.
     * 다섯 번째 의견: 링크를 어떻게 생성하는지 설명 요청.
     * 여섯 번째 의견: ""delve""라는 단어가 농담이라면 이해했음을 알림. ""AutoExpert (Chat)""라는 GPT를 소개.
     * 일곱 번째 의견: 사이트가 바로 액션으로 이어지는 점이 좋음. 사이트 소개와 사용법 안내가 필요함.
     * 여덟 번째 의견: 위키피디아 링크 서핑과 비슷하지만, 이전 컨텍스트를 유지하는 점이 새롭고 유용함.
     * 아홉 번째 의견: 타일이 선형으로 배열되는 점이 아쉬움. 트리 레이아웃 제안.
     * 열 번째 의견: Andy Matuschak의 노트에서 영감을 받았음을 언급.
     * 열한 번째 의견: 이 프로젝트가 매우 인상적임. 클라우드플레어 인사이트 외에 트래킹이 없는 점이 좋음. 프로젝트의 상업화나 오픈 소스 계획 여부 질문.
"
"https://news.hada.io/topic?id=15151","나의 첫 번째 성공적인 사업 TinyPilot을 매각 완료했어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  나의 첫 번째 성공적인 사업 TinyPilot을 매각 완료했어요

     * 부트스트랩 창업자로서의 처음 2년간은 어려움을 겪었음. 유료고객을 거의 찾을수 없었고, 모든 사업에서 적자가 남
     * 2020년 중반, COVID-19로 인해 또 다른 사업 실패를 겪으면서, 집에 있는 서버를 웹 브라우저로 제어할 수 있는 장치 TinyPilot 개발
     * TinyPilot에 대한 블로그 포스팅이 큰 관심을 끌면서 사전 주문 판매 시작
     * 4년간 TinyPilot에 전념하며 연 매출 100만 달러 달성
     * 한 달 전, 60만 달러에 회사 매각

  매각 세부 사항

     * 매각 가격: $598,000 (연 수익의 2.4배)
     * 중개 수수료: $88,900
     * 변호사 비용: $18,297
     * 매각으로 인한 순이익: $490,803
     * 지불 조건: 거래 종료 시 전액 현금 지급 (영업 이익 분배나 매도인 금융 없음)
     * 매도인 의무사항:
          + 30일간 무료 컨설팅 (주 최대 40시간, 총 80시간)
          + 45일간 유료 컨설팅 (주 최대 10시간, 시간당 $180)
     * 4년간 사업으로 인한 총 이익 (매각 포함): $920,000

  [파트 1. 매각 준비]

    매각 이유

     * 하드웨어 사업으로 인해 소프트웨어 개발에 집중하기 어려웠음
     * 직원 및 공급업체 관리로 인한 스트레스와 피로감 누적
     * 가족 계획으로 인해 창업자로서의 스트레스 감당이 어려웠음

    누가 이런 이상한 사업을 인수하고 싶어할까?

     * TinyPilot은 하드웨어 제조, 소프트웨어 개발, 전자상거래가 결합된 독특한 사업 형태
     * 경쟁사에 매각하는 것은 고객과 팀에 대한 배신이라고 생각함
     * 제품에 계속 투자할 매수자를 원했음

    잘못된 브로커 FE International과의 만남

     * FE International은 부트스트랩 창업자를 위한 중개업체
     * TinyPilot의 제품 및 매출 구조가 매력적이지 않다며 거절당함

    나갈수 없다면 편안해 지자

     * 회사를 폐쇄하고 모든 직원을 해고하고 싶지 않았지만, 평생 TinyPilot 운영의 스트레스를 감당하고 싶지도 않았음
          + 그래서 사업을 덜 스트레스 받게 만드는 방법을 모색함
     * TinyPilot의 가장 어려운 부분 중 하나는 하드웨어 개정이었음
          + 개선을 위해 하드웨어를 지속적으로 재설계했지만, 이는 새로운 공급업체를 찾고 제조 파이프라인을 재고하는 것을 의미했음
          + 2023년에 기존 디자인을 유지하고 하드웨어 수정을 중단하기로 결정함
     * 또 다른 복잡성의 원천은 TinyPilot의 사무실이었음
          + 재고 관리, 장치 조립, 주문 처리 등 모든 것을 사내에서 처리하고 있었음
          + TinyPilot의 현장 팀과 협력하여 사무실의 핵심 기능을 외부 공급업체로 이전함
          + 민감한 프로세스를 아웃소싱하는 것은 큰 도전이었지만, 엄청난 양의 관리 오버헤드와 스트레스를 제거할 수 있었음
     * TinyPilot을 더 쉽게 관리할 수 있게 만든 것의 긍정적인 부수 효과는 회사를 잠재적 구매자에게 더 매력적으로 만들었다는 점임
          + 하드웨어 개선에 연간 10만 달러를 쏟아붓는 것을 중단하자 회사는 상당히 수익성이 높아졌음
          + 사무실과 사내 맞춤형 제조 없이도 미래의 소유주는 전 세계 어디에서나 TinyPilot을 운영할 수 있게 됨

  [Part 2. 매각 과정 시작]

    전략적 매수자 찾기

     * 브로커를 통하지 않고 직접 잠재 매수자에게 연락함
     * ServerCo라는 회사가 관심을 보임
          + 부트스트랩 방식으로 운영되는 회사
          + TinyPilot과 보완 관계에 있는 제품 판매
          + 인수 경험이 없어 신중한 태도 보임
     * ServerCo의 인수 제안 내용:
          + $150,000 현금
          + 1년 간 풀타임 고용 계약 (연봉 $100,000)
          + 거래 종료 후 1년 동안 TinyPilot 이익의 25%
          + 거래 종료 후 2년 동안 TinyPilot 이익의 10%
     * 전형적인 전자상거래 회사 가치 대비 매우 낮은 가격으로 판단하여 거절

    Quiet Light 브로커와의 만남

     * Microconf 컨퍼런스에서 Quiet Light 브로커를 알게 됨
     * 크리스 구스리 (Chris Guthrie) 고문과 함께 매각 준비
          + 잠재 매수자에게 보여줄 재무 보고서 및 질문지 작성
          + 회사 소개 동영상 촬영
     * TinyPilot을 전자상거래 사업으로 소개하고 지난 12개월 수익의 3배 가격으로 매물 게시
     * 2개월 동안 큰 반응 없었으나, 1월에 2명의 매력적인 매수 희망자 등장
          + 스콧 (Scott): 대기업 직장인이었으나 TinyPilot의 잠재력을 보고 관심을 가짐
          + 창업자 듀오: TinyPilot 고객이었으며, 매각 소식을 듣고 인수 의사를 밝힘

    LOI (의향서) 요청

     * LOI는 매각 과정의 시작을 알리는 문서로, 구매 가격 등 주요 내용 포함
     * LOI는 구속력이 없으며, 실제 계약은 APA (자산매매계약서)에서 이루어짐
     * 2명의 매수 희망자 간 경쟁으로 인해 좋은 협상 위치에 있었음
     * 브로커 크리스의 조언에 따라 2주 내 제안하면 기존 가격을 인정하겠다고 전달

    가격 협상

     * 스콧이 첫 공식 제안을 내놓았으나 $500,000로 희망 가격보다 $99,000 낮았음
     * 창업자 듀오는 갑자기 제안 없이 포기
     * 스콧이 다음 날 $599,000 제안을 해와서 수락함
     * 가격을 $99,000 올렸으나, 이후로는 우위를 점하기 어려웠음

  [Part 3. 거래 마무리]

    기나긴 실사 과정

     * 실사 기간이 길어질수록 매도자의 위험과 업무량이 증가함
     * 계약금 없이 기밀 정보 공개 및 법률 문서 작성에 많은 비용 소요
     * 매수자가 포기할 경우 아무것도 얻지 못한 채 다시 시작해야 함
     * 실사가 길어질수록 협상력이 약해짐
     * 3개월 간의 실사 끝에 매수자의 은행에서 거래 승인

    마지막 주

     * 4월 3일, 은행에서 거래 승인하고 4월 12일 종료일 제안
     * 매우 긴장되고 불안한 한 주를 보냄
          + 매수자가 마음을 바꿀까 봐 걱정
          + 경쟁사의 신제품 출시나 제조사 도산 등 돌발 변수 생각
     * 종료일 당일, 오전 4시에 일어나 이메일만 계속 확인
     * 오후 2시, 에스크로 회사에서 자금 준비 완료 메일 수신 후 서명

  [Part 4. 매각 이후]

    축하 파티

     * 당일 저녁 식사 중 송금 확인 메일을 받고 디저트 주문
     * 이후 48시간 동안 친구, 가족들과 축하 식사 및 디저트 파티

    해방감

     * 거래 종료 후에도 몇 주 동안 불안감이 가시지 않음
     * 3주 정도 지나서야 마음의 짐을 내려놓을 수 있었음
     * 매수자 스콧이 회사를 잘 운영해 나갈 것이라는 확신이 듦

    정체성 변화

     * 다른 창업자들처럼 정체성 상실이나 상실감은 크게 느끼지 않음
     * TinyPilot을 세상을 바꿀 스타트업이 아닌 작은 사업으로 운영해 왔기 때문

    타임라인

     * 2023년 10월 3일 - Quiet Light와 계약서(Engagement Letter)에 서명함
     * 2023년 10월 17일 - Quiet Light가 자사 웹사이트에 TinyPilot을 게시함
     * 2023년 12월 15일 - Scott과 첫 대화를 나눔
     * 2023년 1월 16일 - 첫 번째 LOI(의향서)를 받음
     * 2024년 1월 23일 - 4월 16일을 목표 마감일로 하는 LOI에 서명함
     * 2024년 2월 23일 - APA(자산매매계약)의 초안을 받음
     * 2024년 3월 7일 - 대출기관이 대출을 승인함
     * 2024년 3월 20일 - Scott과 APA를 최종 확정함
     * 2024년 3월 25일 - 대출기관이 법률 검토를 마치고 SBA(중소기업청)에 대출 패키지를 제출함
     * 2024년 4월 3일 - 대출기관이 구매자에게 SBA 승인을 통보하고 4월 12일을 마감일로 제안함
     * 2024년 4월 12일 - 최종 법적 계약에 서명하고 대금을 받음

    앞으로의 계획

     * 8월에 첫 아이 출산 예정이어서 육아에 집중할 계획
     * 블로그 독자들의 관심사를 반영한 사업 아이템 구상 중
     * TinyPilot은 스콧의 주도로 제품 개선 및 고객 저변 확대 예정
          + 기존 직원들 모두 고용 승계
          + 창업 비하인드 스토리 블로깅 이어갈 예정

   사업매각절차가 참 쉬운게 아니군요.

   요즘은 매각 생각조차 쉬운 게 아닙니다. 선빵필승이죠.

   이 TinyPilot은 긱뉴스를 통해서 두번 소개되었습니다.
     * TinyPilot: $100 보다 저렴한 KVM Over IP
     * 부트스트랩 창업자로서의 나의 6번째 해

   개인이 어느 정도 성공한 비즈니스를 구매해서 또 다른 성장을 이어나갈수 있는 환경이 부럽네요.
   하드웨어 창업은 정말 어려운 분야기도 한데, 엄청 노력한것 같아요.
"
"https://news.hada.io/topic?id=15132","킨츠기(Kintsugi)로 내 머그잔 수리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        킨츠기(Kintsugi)로 내 머그잔 수리

내 커피 머그를 킨츠기로 수리하기

  킨츠기 예술 (일본어: 金継ぎ)

     * 킨츠기는 깨진 도자기를 수리하는 전통 일본 예술임.
     * 자연 래커와 나무 가루, 연마제, 빵 반죽 등을 혼합해 금이나 은으로 수리한 부분을 강조함.
     * 일본 철학에서는 물건의 결함을 축하하며, 이는 물건의 역사를 이야기함.

  킨츠기 준비 과정

     * 깨진 머그 조각을 모아 킨츠기에 대해 조사함.
     * 전통적인 우루시 래커 대신 현대 에폭시를 사용하는 경우도 있지만, 식품 관련 사용의 안전성에 의문이 있음.
     * TSUGU TSUGU의 킨츠기 스타터 키트를 구입해 튜토리얼을 반복 시청함.

  1단계: 조각 붙이기 (무기 우루시 사용)

     * 깨진 조각을 붙이기 전에 깨끗이 청소하고 날카로운 가장자리를 다듬음.
     * 무기 우루시는 케이크 가루와 물을 섞어 만든 반죽에 원시 우루시를 혼합해 만듦.
     * 큰 조각부터 붙이고 작은 조각은 마스킹 테이프로 고정함.
     * 습기와 온도가 높은 상자에서 2주 동안 경화시킴.

  2단계: 틈새 채우기 (코쿠소와 사비 우루시 사용)

     * 큰 구멍은 무기 우루시와 나무 가루, 연마제를 섞어 만든 코쿠소로 채움.
     * 작은 틈새는 연마제와 원시 우루시를 혼합해 만든 사비 우루시로 채움.
     * 각 층을 경화시키고 샌딩하여 평평하게 만듦.

  3단계: 검은 래커 적용

     * 검은 우루시 래커를 여러 층으로 칠해 최종 표면 마감 작업을 시작함.
     * 미세한 붓을 사용해 세밀하게 칠함.

  4단계: 벵갈 레드 우루시 위에 금가루 적용

     * 최종 단계로 벵갈 레드 우루시를 바르고 금가루를 뿌림.
     * 벵갈 레드 우루시가 약간 끈적일 때 금가루를 적용해야 함.
     * 금가루를 실크 볼에 묻혀 붓으로 조심스럽게 칠함.

  최종 결과

     * 몇 달간의 작업 끝에 머그가 다시 사용 가능해짐.
     * 완벽하지는 않지만, 킨츠기 예술을 경험할 수 있었음.

GN⁺의 의견

     * 킨츠기 철학: 물건의 결함을 축하하는 일본 철학은 물건의 역사와 가치를 더욱 높여줌.
     * 실용성과 안전성: 전통적인 우루시 래커는 식품 관련 사용에 안전하지만, 현대 에폭시는 안전성에 의문이 있음.
     * 시간과 노력: 킨츠기 작업은 많은 시간과 노력이 필요하며, 특히 초보자에게는 도전적인 작업임.
     * 예술적 기술: 세밀한 붓질과 같은 예술적 기술이 필요하며, 이는 많은 연습이 필요함.
     * 대체 기술: 킨츠기 외에도 깨진 도자기를 수리하는 다른 현대적인 방법들이 있음.

        Hacker News 의견

     * 에폭시 사용 이유: 전통적인 우루시 래커 대신 현대적인 에폭시를 사용하는 이유는 우루시 래커가 독성 식물에서 추출되며 피부에 자극을 줄 수 있기 때문임. 특히 아이들과 함께 작업할 때는 더욱 주의가 필요함.
     * 에폭시의 안전성: 에폭시는 FDA에서 승인된 제품을 사용하면 식품 안전에 문제가 없으며, 병원과 식품 제조 시설에서도 사용됨. 단, 300°F 이상의 온도에서는 사용하지 않는 것이 좋음.
     * 우루시의 위험성: 우루시는 독성 식물의 수액으로, 피부에 자극을 줄 수 있음. 따라서 사용 시 주의가 필요함.
     * 샌프란시스코의 킨츠기 워크숍: 샌프란시스코 지역에서는 SF Zen Center에서 거의 매주 킨츠기 워크숍이 열림.
     * 킨츠기와 화장실 수리: 킨츠기를 통해 화장실을 수리한 경험이 있으며, 이는 매우 보람 있는 작업임.
     * 우루시 파우더 수입 금지: 최근 일본에서 우루시 파우더를 주문하려 했으나, 미국으로의 수입이 불법이라 취소됨.
     * 에폭시로 머그컵 수리: 에폭시로 머그컵을 수리했으나, 같은 위치에서 다시 손잡이가 부러져 결국 새로운 머그컵을 구입함.
     * 전통 킨츠기 학습: 아내가 전통 킨츠기를 배우고 있으며, 미국에서는 주로 금색 안료를 섞은 접착제를 사용하는 ""골드 릴리프"" 방법이 가르쳐짐. 전통 재료를 구할 수 있는 곳을 찾고 있음.
     * 유리 제품 수리: 오래된 유리 제품을 수리하고 싶어하며, 금색 접착제를 사용해 킨츠기 기법을 적용할 방법을 찾고 있음.
     * 다른 도자기 수리 방법: 도자기 수리의 또 다른 방법이 있음.
     * 물건을 발로 잡으려는 반사 행동: 물건을 발로 잡으려는 반사 행동이 꼭 나쁜 것은 아님. 오히려 많은 물건을 구할 수 있음.
     * 킨츠기 초보자의 성공적인 결과: 킨츠기를 12년 동안 해온 사람으로서, 초보자의 성공적인 결과를 칭찬함. 킨츠기는 매우 어려운 기술이며, 많은 창의성과 경험이 필요함.
"
"https://news.hada.io/topic?id=15061","주택 소유에서 밀려난 사람들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            주택 소유에서 밀려난 사람들

주택 소유의 어려움 - ""토할 것 같은 기분""

  주택 시장의 변화

     * Nathan Wilkins는 2019년에 어머니와 여동생과 함께 살면서 집을 사기 위해 돈을 모으려고 했음.
     * 그러나 미국 주택 시장은 임대료 상승, 주택 가격 급등, 대출 금리 상승으로 인해 주택 소유가 더 어려워졌음.
     * 현재 그는 월 $2,500(약 1960파운드)의 임대료를 지불하고 있어 저축이 어려운 상황임.

  주택 가격 상승

     * 미국의 중간 주택 판매 가격은 2019년 말 이후 약 30% 상승하여 올해 봄에는 $420,000에 도달했음.
     * 30년 고정 금리 모기지 금리는 2020년 약 3%에서 현재 약 7%로 상승했음.
     * 주택 구매를 위해서는 연간 소득이 $100,000 이상 필요하며, 이는 미국 가구 중간 소득인 약 $75,000을 훨씬 초과함.

  주택 구매의 어려움

     * Megan Holter는 2019년에 텍사스 오스틴에서 주택을 찾기 시작했으나, 팬데믹으로 인해 중단됨.
     * 올해 오하이오 콜럼버스로 이사하여 6.625%의 금리로 주택을 구매했음.
     * 많은 사람들이 주택을 소유할 수 없는 상황임.

  주택 소유에 대한 전망

     * 뉴욕 연방준비은행에 따르면, 임차인의 40.1%만이 언젠가 주택을 소유할 것으로 기대함.
     * 주택 소유자들도 시장 변화로 인해 재산세와 보험료 상승 등의 영향을 받고 있음.
     * 전체 가구의 약 1/3이 소득의 1/3 이상을 주택 비용에 지출하고 있음.

  정치적 영향

     * 주택 비용 상승은 조 바이든 대통령에게 큰 도전 과제임.
     * 도널드 트럼프는 바이든을 인플레이션 문제로 비난하며, 경제가 잘못된 방향으로 가고 있다고 주장함.
     * 바이든 행정부는 주택 구매자 지원을 위한 제안을 내놓았으나, 효과는 미미함.

  금리와 인플레이션

     * 연방준비은행은 금리 인하 압박을 받고 있으나, 인플레이션이 여전히 목표치인 2%를 초과하고 있음.
     * 많은 분석가들은 인플레이션이 완화되면 금리 인하가 가능할 것으로 예상함.
     * 그러나 주택 공급 부족과 높은 임대료로 인해 인플레이션이 지속될 가능성도 있음.

GN⁺의 의견

     * 주택 시장의 불안정성: 주택 가격과 금리의 급격한 변동은 주택 구매자들에게 큰 부담이 됨.
     * 정치적 영향: 주택 문제는 정치적 논쟁의 중심에 있으며, 이는 선거 결과에 영향을 미칠 수 있음.
     * 경제적 불확실성: 금리와 인플레이션의 불확실성은 경제 전반에 걸쳐 영향을 미침.
     * 주택 공급 문제: 주택 공급 부족은 장기적으로 주택 가격과 임대료 상승을 초래할 수 있음.
     * 대안적 주택 정책 필요: 주택 문제를 해결하기 위해서는 보다 혁신적이고 실질적인 정책이 필요함.

        Hacker News 의견

     * 첫 번째 의견: 문제의 원인은 건물 부족이 아니라 글로벌 자산 가격 인플레이션과 저렴한 신용으로 인한 것임. 주택은 투자용으로 사용되고 있어 실제 거주용으로 활용되지 않음.
     * 두 번째 의견: 포르투갈에서는 많은 건물이 방치되어 있으며, 주택 부족 문제는 건물 부족이 아니라 방치된 건물 때문임.
     * 세 번째 의견: 영국과 웨일즈에서는 주택 공급이 인구 증가를 따라가지 못해 가격이 상승하고 있음.
     * 네 번째 의견: 경제를 대도시로 집중시키지 않고 분산시키는 것이 필요함. 대도시의 주택 가격은 비싸고, 시골에는 방치된 건물이 많음.
     * 다섯 번째 의견: 국가 차원에서 수요를 보조하지 말고, 지역 차원에서 공급을 제한하지 말아야 함.
     * 여섯 번째 의견: 2022년에 새 집을 샀는데, 10년 전 가격을 들었으면 집사라고 생각했을 것임.
     * 일곱 번째 의견: 역사적으로 대도시에서는 대규모 공공사업이 이루어졌음. 예를 들어, 하수도 시스템, 대중교통 네트워크 등이 있음. 공공 저렴 주택도 필수 인프라임.
     * 여덟 번째 의견: 주택 가격이 비정상적으로 높음. 미국에서는 자가 주택 비율이 65%로, 지난 50-60년 동안 크게 변하지 않았음.
     * 아홉 번째 의견: 30년 고정 금리 모기지의 금리가 왜 이렇게 높은지 의문임. 은행들이 장기 평균 금리를 3%에서 7%로 예상하게 된 이유가 궁금함.
     * 열 번째 의견: 영국에서는 임대 부동산의 세금 정책이 변경되어 임대주들이 집을 팔게 되었고, 이로 인해 임대 주택이 줄어들고 임대 비용이 증가했음.
"
"https://news.hada.io/topic?id=15103","FrankenPHP: 현대적인 PHP 앱 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FrankenPHP: 현대적인 PHP 앱 서버

현대 PHP 앱 서버 FrankenPHP 소개

  FrankenPHP란?

     * FrankenPHP는 Go 언어로 작성된 현대적인 PHP 앱 서버임.
     * Caddy 웹 서버에 공식 PHP 실행기를 내장하여 HTTP/1.1, HTTP/2, HTTP/3을 지원함.
     * 자동 HTTPS 인증서 생성 및 갱신 기능을 제공함 (Let’s Encrypt 또는 ZeroSSL 사용).

  주요 기능

     * 단일 명령어로 프로덕션급 PHP 서버를 실행 가능함.
     * 독립 실행형 바이너리를 생성하여 PHP 웹 애플리케이션과 커맨드라인 도구를 의존성 없이 실행 가능함.
     * 인기 PHP 확장(OPcache, XDebug 등)을 기본적으로 지원함.

  성능 향상

     * Worker 모드: 애플리케이션을 한 번 부팅하면 메모리에 유지됨.
     * 간편한 사용: Symfony, API Platform, Laravel 등에서 기본 지원됨.
     * 빠른 속도: API Platform 앱에서 FPM보다 3.5배 빠름.
     * 효율성: Go의 고루틴 기능을 활용하여 효율적인 성능 제공함.
     * 간단한 배포: 단일 바이너리로 실행되며 외부 서비스가 필요 없음.

  FrankenPHP의 장점

     * 쉽고 빠른 설정: PHP 파일을 문서 루트에 복사하기만 하면 됨.
     * 고성능: 최신 웹 서버 기술과 PHP 실행기를 결합하여 높은 성능 제공함.
     * 유연성: Worker 모드와 호환되지 않는 앱도 그대로 서비스 가능함.

  GN⁺의 의견

     * 흥미로운 점: FrankenPHP는 최신 웹 서버 기술을 활용하여 PHP 애플리케이션의 성능을 크게 향상시킬 수 있음.
     * 도입 시 고려사항: 기존 PHP 서버 환경과의 호환성 문제를 사전에 검토해야 함.
     * 비판적 시각: 새로운 기술 도입에 따른 학습 곡선과 초기 설정 비용이 발생할 수 있음.
     * 추천 대안: 비슷한 기능을 제공하는 RoadRunner나 Swoole 같은 PHP 서버도 고려해볼 만함.
     * 기술 선택의 득과 실: 성능 향상과 간편한 배포가 장점이지만, 새로운 기술 도입에 따른 리스크와 기존 시스템과의 통합 문제를 신중히 검토해야 함.

        Hacker News 의견

     * PHP 개발을 10년 동안 하지 않았지만, 이 랜딩 페이지가 나를 다시 PHP로 돌아오게 할 뻔했음: 디자인, 색상, 애니메이션이 깔끔하고, 가치 제안이 잘 강조되어 있음. 작은 프로젝트를 시작하기에 좋은 방법으로 보임.
     * 오랜 C# 개발자, 현재는 주로 PHP8 사용: PHP8은 빠르게 작업을 완료할 수 있는 훌륭한 언어임. 이 방향이 LAMP보다 더 나은 방향임.
     * Tech Empower 벤치마크에서의 성과가 궁금함: 현재는 ""완료되지 않음"" 상태로 최하위에 있음.
     * PHP 통합 웹 서버를 개발 중 자주 사용: 단일 스레드로 느리고, 프로덕션 환경에 적합하지 않음. FrankenPHP는 유망해 보이지만, 제한된 코어/스레드 문제는 여전히 존재함. Docker 이미지가 유망해 보임.
     * FrankenPHP를 시도해봤지만 매우 느림: 문서가 부족하고, 성능이 기대 이하임. FPM보다 3.5배 성능을 주장하지만 실제로는 1% 성능도 나오지 않음.
     * FrankenPHP는 성능 문제를 가지고 있음: 그럼에도 불구하고 매우 유망한 프로젝트임.
     * 관련 링크: FrankenPHP, Go로 작성된 PHP 앱 서버 소개.
     * Docker 컨테이너 빌드 방법: Docker 명령어를 통해 새로운 Debian을 필요한 컨테이너로 변환하는 방법 설명.
     * FrankenPHP와 Apache의 Mod-PHP로 Wordpress 벤치마크 시도: FrankenPHP의 우위를 확인하지 못했음. Docker에서 테스트했으며, 더 깊이 파고들 필요가 있음.
     * HN 첫 페이지에 이 프로젝트가 올라온 것을 즐김: FPM과 공유하지 않는 아키텍처가 PHP의 성공과 동시에 한계를 가져왔다는 느낌임.
"
"https://news.hada.io/topic?id=15101","배우들이 대사를 기억하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            배우들이 대사를 기억하는 방법

배우들이 대사를 기억하는 방법

  배우들이 대사를 기억하는 방법

     * 배우들은 대사를 단순 반복으로 외우지 않음
     * 유지 리허설(maintenance rehearsal)은 효과적이지 않음
     * 정교 리허설(elaborative rehearsal)을 통해 대사의 의미와 캐릭터와의 연관성을 이해함
     * 캐릭터의 동기와 감정을 분석하고, 대사와 캐릭터의 배경을 연결함

  심층 이해의 중요성

     * 심층 이해는 장기 기억을 촉진함
     * 배우들은 대사를 외우기보다 캐릭터의 관점에서 대사를 이해함
     * 공연 중 자연스럽게 대사를 떠올릴 수 있게 됨

  기억 전략: 모든 사람을 위한 방법

     * 심층 이해는 일상적인 기억력 향상에도 도움이 됨
     * 예를 들어, 사과를 고를 때 색, 크기, 영양가 등을 생각함
     * 이러한 시각적, 음향적, 개념적 측면에 집중하면 기억력이 향상됨
     * 처리의 깊이(depth of processing)가 기억력에 영향을 미침
     * 의미 있는 연관성을 만드는 것이 얕은 처리보다 기억에 더 도움이 됨

  GN⁺의 의견

     * 기억력 향상: 배우들의 방법은 일상 생활에서도 적용 가능함. 심층 이해를 통해 중요한 정보를 더 오래 기억할 수 있음.
     * 교육적 활용: 이 방법은 학생들이 공부할 때도 유용함. 단순 암기보다 내용을 이해하고 연관 지으면 학습 효과가 높아짐.
     * 비판적 시각: 단순 반복이 아닌 심층 이해를 강조하는 것이 중요하지만, 모든 상황에서 적용 가능한 것은 아님. 예를 들어, 단순한 암기가 필요한 경우도 있음.
     * 기술 도입 시 고려사항: 새로운 학습 방법을 도입할 때는 개인의 학습 스타일과 상황에 맞게 조정해야 함. 모든 사람에게 동일한 방법이 효과적이지 않을 수 있음.
     * 관련 제품 추천: 기억력 향상을 위한 앱이나 도구들이 많이 있음. 예를 들어, Anki와 같은 플래시카드 앱은 정교 리허설을 돕는 좋은 도구임.

        Hacker News 의견

     * Meisner 기법: 상상 속 상황에서 진실하게 행동하는 능력을 키우는 과정으로, 다른 배우에게 집중하는 것이 중요함.
     * 공연 준비: 대사를 외우는 것보다 다른 배우와의 상호작용이 중요하며, 이는 사람들과 대화하는 능력을 향상시킴.
     * 공공 연설: 자료를 깊이 이해하고, 말하는 스타일을 개발하는 것이 중요함. 이는 방해에 대한 저항력을 키우고 즉흥 연설을 가능하게 함.
     * 기억력: 긴 비대화 텍스트를 외우는 방법에 대한 궁금증. 목사가 신약 성경 전체를 외운 사례를 들며, 꾸준한 노력이 중요함을 강조함.
     * 반복 연습: 완벽을 위해 반복이 필요함. 기억 궁전이나 기억술보다 반복이 더 효과적임.
     * 마이클 케인의 조언: 대사를 생각하지 않고 다른 배우의 얼굴에서 대사를 받아야 자연스럽게 연기할 수 있음.
     * 마이크로 기억법: 짧은 단어 그룹을 반복해서 외우는 것이 자연스러운 연기를 돕는 방법임.
     * 연극의 변동성: 대사를 기계적으로 외우는 것 외에도, 상황에 맞게 적응하는 능력이 필요함.
     * 기억의 과소평가: 언어는 쉽게 기억되도록 최적화되어 있으며, 반복 연습을 통해 대사를 자연스럽게 외울 수 있음.
     * 연기와 기억: 대사의 맥락과 감정을 이해하는 것이 중요하며, 반복 연습과 시각화, 동료 배우와의 협력이 도움이 됨.
     * Anki 사용자: 감정을 포함하고, 경험을 불러일으키며, 기억을 덩어리로 나누는 것이 학습에 도움이 됨.
     * 정확한 기억: 의미를 이해하는 것만으로는 충분하지 않으며, 작은 단어까지 정확히 기억하는 것이 중요함.
"
"https://news.hada.io/topic?id=15144","60 kHz (2022) 기술 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          60 kHz (2022) 기술 발표

콜로라도의 60 kHz 라디오 방송국

  WWVB 방송국

     * WWVB는 미국 국립표준기술연구소(NIST)에서 운영하는 라디오 방송국임.
     * 60 kHz 주파수로 현재 시간을 방송함.
     * 낮과 밤을 가리지 않고 지속적으로 방송을 유지함.

  낮은 주파수의 특징

     * 60 kHz는 낮은 주파수 대역에 속함.
     * 이 주파수 대역은 초당 하나의 이진수만 방송할 수 있는 좁은 대역폭을 가짐.
     * 현재 시간을 방송하는 데 1분이 걸림.

  라디오 시계의 동작 원리

     * 미국 내 모든 라디오 시계는 WWVB 방송을 사용함.
     * 시계는 하루에 한 번 정도 1분 동안 방송을 읽고 시간을 설정함.
     * 방송된 시간을 사용자가 설정한 시간대에 맞춰 조정함.

  기술적 해결책

     * 라디오 시계가 자동으로 시간을 설정할 수 있도록 정부가 WWVB 방송국을 설립함.
     * 이 기술은 단순하지만 효과적임.

  개인적인 감상

     * 이 기술은 매우 흥미롭고, 미국의 혁신을 상징함.
     * 과거의 기술을 활용하여 문제를 해결한 점이 인상적임.
     * 현재의 많은 기술이 과거의 사람들의 기여 위에 세워졌음을 상기시킴.

GN⁺의 의견

    1. 기술의 단순함과 효과성: WWVB 방송국은 단순한 기술을 사용하여 중요한 문제를 해결함. 이는 복잡한 기술이 항상 필요한 것은 아님을 보여줌.
    2. 시간 동기화의 중요성: 정확한 시간 동기화는 다양한 산업과 일상 생활에서 매우 중요함. WWVB 방송국은 이를 간단하게 해결함.
    3. 역사적 기술의 가치: 오래된 기술도 여전히 유용할 수 있음. 새로운 기술만이 답이 아님을 상기시킴.
    4. 미국의 혁신 정신: 이 방송국은 미국의 혁신 정신을 잘 보여줌. 문제를 해결하기 위해 기술을 활용하는 방식이 인상적임.
    5. 기술의 지속 가능성: WWVB 방송국은 오랜 기간 동안 안정적으로 운영되고 있음. 이는 기술의 지속 가능성을 보여줌.

        Hacker News 의견

     * 미국인들은 자국 발명품인지 확인하지 않고도 자국의 것이라 주장하는 경향이 있음.
     * 유럽에서는 이미 80년대부터 시계가 전파를 통해 시간을 맞추는 것이 일반적이었음.
     * 당시에는 새로운 기술이 많지 않았고, 가장 간단한 방법으로 문제를 해결했음.
     * 60kHz 신호에서 1초마다 이진수 한 자리를 전송하는 방식에 대한 추가 정보가 필요함.
     * GPS는 현재 더 높은 정밀도를 제공하지만, 수신기 복잡성이 높음.
     * 여러 방송국이 NIST에 의해 유지되고 운영되며, 예산 문제로 최근에 거의 폐쇄될 뻔했음.
     * Citizen ""AT"" 시계는 매일 WWVB와 동기화되어 완벽한 시간을 유지하고, 빛으로 충전되어 배터리 교체가 필요 없음.
     * ""The Time Regulation Institute"" 책을 읽고 있으며, 60kHz 신호를 이용하는 두 개의 원자 시계가 항상 같은 시간을 표시하지 않음.
     * 2024년 4월 7일 자정에 WWVB의 남쪽 안테나가 손상되어 현재 북쪽 안테나에서만 방송 중이며, 출력이 감소됨.
     * 라디오 장비 없이도 60kHz 신호를 들을 수 있는 공개 kiwisdr 사이트가 있음.
     * 친구와 함께 오래된 수신기를 수리한 후 WWVB 신호를 청취했으며, 다양한 길이의 비프음을 들을 수 있었음.
"
"https://news.hada.io/topic?id=15081","Kino - 전문가를 위한 영화 제작용 비디오 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Kino - 전문가를 위한 영화 제작용 비디오 앱

     * 초보자와 전문가 모두를 위한 강력한 영화 제작 앱
     * Instant Grade: 영화같은 느낌을 주는 프리셋을 한 번의 탭으로 적용 가능
          + 영화 제작자들은 ""필름 룩""을 추구함. 이는 촬영 후 이미지의 대비와 색상을 조정하는 컬러 그레이딩 과정에서 결정됨.
          + iPhone 비디오는 저장 공간 절약을 위해 색상과 밝기 정보를 많이 버리기 때문에 그레이딩이 어려움.
          + iPhone 15 Pro의 ""로그"" 비디오 지원으로 이러한 문제가 해결됨. 로그 비디오는 원본 정보를 거의 그대로 저장하며, 나중에 편집 가능하게 해줌.
          + Instant Grade 기능으로 전문가가 만든 프리셋을 한 번의 탭으로 비디오에 적용할 수 있음.
     * AutoMotion: 영화적인 모션 블러를 위해 자동으로 최적의 노출 설정을 선택
          + 영화 느낌을 주는 또 다른 요소는 모션 블러임. iPhone은 기본적으로 선명한 이미지를 촬영하려 하지만, 이는 영화의 몽환적인 느낌을 잃게 함.
          + AutoMotion은 영화 같은 모션 블러를 위한 최적의 노출 설정을 자동으로 선택해줌.
          + 밝은 낮 동안에는 이 기능이 항상 작동하지 않지만, ND 필터를 사용하면 가능해짐.
          + 전문가를 위해 수동 노출 제어 기능도 제공됨.
     * 인터페이스: 사진과 영상 제작의 차이를 고려해 처음부터 새로 설계
          + 기존의 성공적인 사진 앱인 Halide와는 다르게, Kino는 비디오 전용으로 설계됨.
          + 기술적인 사용자들을 위해 노출 설정, 오디오 미터, 디스크 공간을 한눈에 볼 수 있게 함.
          + 뷰파인더를 가리지 않는 것에 중점을 두어 중요한 정보를 가리지 않으며, 가로 및 세로 모드 모두에서 사용하기 편리함.
          + 실수로 설정을 건드리는 것을 방지하기 위해 탭투노출 대신 뷰파인더를 아래로 스와이프해 노출 다이얼 표시
          + 실수로 녹화를 중단하는 것을 방지하기 위해 Swipe to Lock 제스처 지원
     * 기본적으로 기본 카메라 앱과 유사하게 동작하지만, 사용자가 자신의 경험 수준에 따라 설정을 조정할 수 있음
     * 큰 용량의 Apple Log 파일을 저장하기 위해 외장 하드 드라이브도 지원함. 영상을 사진 라이브러리에 저장할 수도 있고, iPhone의 파일 폴더에 저장할 수도 있음
     * HDR 및 SDR 프리셋을 제공하며, 해상도 등 세부 설정을 쉽게 조정할 수 있음.
     * RGB 파형, 포커스 피킹, 그리드 등 다양한 부가 기능 제공
     * Halide의 무료 레슨 기능을 통해 앱 사용법과 영화 제작에 대해 배울 수 있음
     * Kino의 가격은 $19.99이지만, 출시 기념으로 금요일까지 50% 할인된 $9.99에 판매
     * Kino는 Lux의 두 번째 주력 앱으로, 앞으로도 지속적으로 개선해 나갈 예정

GN⁺의 의견

     * Kino는 iPhone을 이용한 영화 제작을 보다 쉽고 전문적으로 할 수 있게 해주는 앱으로 보임. 특히 Apple의 ProRes와 같은 고품질 코덱을 지원하는 것이 장점.
     * 다만 전문가용 앱인 만큼 가격이 다소 높은 편. 아마추어 사용자들에게는 부담이 될 수 있음.
     * 컬러 그레이딩을 위한 사전 설정 기능은 편리하지만, 오히려 창의성을 제한할 우려도 있음.
     * 수동 화이트밸런스 기능이 아직 지원되지 않는 등 부족한 부분이 있음. 향후 업데이트를 통해 보완되기를 기대함.
     * iPhone 영상 제작 앱 시장에는 이미 FiLMiC Pro 등 강력한 경쟁 앱들이 존재함. Kino만의 차별화 포인트를 더욱 강화할 필요가 있어 보임.

        Hacker News 의견

     * 앱의 가격이 명확하게 표시되어 있어 좋음: 앱의 가격이 명확하게 표시되어 있어 구매 결정이 쉬웠음. Halide 앱도 사용해봤는데, 구독 방식이 아닌 일회성 구매 옵션이 있다는 것을 나중에 알게 됨.
     * Halide 앱 추천: 오랜 시간 아마추어 사진가로서 Halide 앱을 사용해왔고, 문제 없이 잘 작동함. Kino 앱도 구매했으나 초기 실행 시 몇 번의 충돌이 있었음. 곧 해결될 것으로 기대함.
     * Blackmagic 앱과 비교 기대: Kino 앱이 Blackmagic의 무료 프로 iOS 비디오 앱과 어떻게 비교될지 궁금함.
     * 일회성 구매 옵션 환영: 좋은 제품을 만들고 그에 대한 비용을 받는다는 원칙이 마음에 듦. 일회성 구매 옵션이 있어 좋음.
     * 간단한 웹사이트 디자인: 웹사이트가 단순하고 산만한 효과가 없어 좋음. 독립 소프트웨어 스튜디오를 지원하는 것을 좋아해서 주저 없이 구매했음. 이 앱 덕분에 비디오 촬영을 더 시도해볼 것 같음.
     * iPhone 15 Pro 필요 여부 궁금: iPhone 15 Pro가 필요한지 궁금함. 게시글이 그렇게 느껴지게 했음.
     * 화이트 밸런스 기능 요청: Halide에서 사용하는 것처럼 비디오에 5500k 화이트 밸런스를 설정하고 싶었으나, Kino에는 해당 옵션이 없음. 하지만 Auto Motion과 수동 초점 기능이 마음에 듦. 화이트 밸런스 옵션 추가를 요청함.
     * 회사에 대한 긍정적 인상: 회사와 제품에 대해 잘 모르지만, 관련 기사를 읽고 그들이 얼마나 제품에 신경 쓰는지 알게 됨.
     * iPhone 15 Pro Max의 터치 문제: iPhone 15 Pro Max에서 손바닥이 화면 가장자리를 터치해 의도치 않은 동작이 발생하는 문제가 있음. 케이스를 사용하지 않고 해결하고 싶음.
     * 마케팅 전략에 대한 의견: 비디오 녹화 앱인데 페이지에 비디오가 하나뿐이고, 그마저도 재생되지 않음. 회사의 평판이 좋아 앱을 구매할 예정이지만, 프로페셔널한 작업을 볼 수 있는 짧은 영화가 있었으면 좋겠음.
"
"https://news.hada.io/topic?id=15095","Glance - 모든 Feed를 하나로 모아보는 셀프호스트 대시보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Glance - 모든 Feed를 하나로 모아보는 셀프호스트 대시보드

     * 다양한 위젯 : RSS, 레딧, 날씨, 북마크, 유튜브 특정 채널의 최신 영상, 캘린더, 주식, iFrame, 트위치 채널, GitHub 릴리즈, Repo 오버뷰, Site 모니터
     * 테마 지원 및 모바일 기기에 최적화
     * 빠르고 경량
          + 미니멀 JS, 매우 적은 의존성
          + 쉽게 배포 가능한 <15mb 사이즈의 바이너리 하나 및 작은 도커 컨테이너
          + 모든 요청은 병렬 처리되며, 캐시 안된 페이지들도 보통 1초내에 로딩

   Linux 성능 확인하는 https://github.com/nicolargo/glances 인줄 알았네요.
     * 캘린더는 일정보여주는 기능이 아직 없습니다.
     * 유튜브 알고리즘 배제하고 특정 채널 새로 업로드 영상만 볼 수 있습니다.
       유튜브 채널 아이디 확인은 채널 정보 '더보기' 클릭 후 가장 아래 '채널 공유'에서 '채널 ID 복사' 누르면 됩니다.
     * 위젯 추가로 사이트 새로 올라오는 글 확인도 가능해 보입니다.
"
"https://news.hada.io/topic?id=15123","스탠다드 이북스의 1,000번째 작품: Ulysses","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     스탠다드 이북스의 1,000번째 작품: Ulysses

제임스 조이스의 ""율리시스""

  설명

     * 제임스 조이스의 가장 유명한 소설로, 영어 문학에서 가장 높이 평가받는 소설 중 하나임.
     * 1904년 6월 16일 목요일, 더블린에서의 하루를 기록함.
     * 주인공은 스티븐 데달루스와 레오폴드 블룸으로, 각각의 여정을 따라가며 이야기가 전개됨.

  소설의 구조와 스타일

     * 18개의 장으로 구성되어 있으며, 각 장은 호머의 ""오디세이""의 장면을 반영함.
     * 각 장은 다른 배경에서 진행되며, 다양한 스타일로 쓰여짐.
     * 주요 혁신은 ""자유 간접 화법"" 또는 ""내면 독백"" 기법의 확장임.

  출판 역사

     * 초기 출판: 1918년부터 1920년까지 ""The Little Review""에 연재됨.
     * 법적 문제: 1921년 뉴욕에서 음란물 재판에서 문제가 되었고, 이후 미국에서 1934년까지 출판 금지됨.
     * 최초 완전판: 1922년 파리에서 출판됨.
     * 출판 오류: 첫 판은 인쇄 오류가 많았고, 1924년에 수정된 두 번째 판이 출판됨.

  초기 반응과 평가

     * 혼합된 초기 반응: W. B. 예이츠는 처음에는 ""미친 것""이라고 했으나, 나중에는 천재적인 작품으로 평가함.
     * 비판과 논란: 버지니아 울프는 ""저속하다""고 비판했으며, 조이스의 이모는 ""읽기 부적합""하다고 평가함.
     * 오늘날의 평가: 20세기 문학의 정점으로 평가받으며, 가장 풍부하고 어려운 책 중 하나로 여겨짐.

  무료로 읽기

     * 이 전자책은 미국에서 저작권 제한이 없는 것으로 간주됨.
     * 다른 국가에서는 저작권 상태를 확인해야 함.

  다운로드 형식

     * epub: 모든 기기 및 앱에서 사용 가능 (Kindle 및 Kobo 제외).
     * azw3: Kindle 기기 및 앱에서 사용 가능.
     * kepub: Kobo 기기 및 앱에서 사용 가능.

  GN⁺의 의견

     * 문학적 가치: ""율리시스""는 문학적 혁신과 복잡한 서사 구조로 인해 문학 연구자들에게 중요한 작품임.
     * 독서의 어려움: 많은 독자들이 이해하기 어려워하지만, 이는 책의 깊이와 복잡성을 반영함.
     * 출판 역사: 출판 과정에서의 법적 문제와 인쇄 오류는 이 책의 역사적 중요성을 더해줌.
     * 현대적 중요성: 오늘날에도 여전히 많은 문학 연구와 비평의 대상이 되며, 문학적 탐구의 중요한 자료로 사용됨.

        Hacker News 의견

     * Joyce의 유머: 조이스는 단지 많은 농담을 했다고 말했음.
     * Ulysses 읽기 방법: The Joyce Project를 추천함. 언어적, 문화적 참고 자료가 많음.
     * 읽기 방법: 종이로 읽고, 사이트에서 확인하고, 다시 종이로 읽는 방법을 사용했음.
     * Standard Ebooks 소개: 자원봉사로 고품질의 무료 전자책을 제작하는 프로젝트임.
     * 계산 쉽게 만들기: 'Calculus Made Easy'를 위해 같은 작업을 하고 싶지만, 게으름을 극복해야 함.
     * 무료 전자책의 질: 많은 무료 전자책이 낮은 품질의 형식을 가짐.
     * 인기 책 찾기: 프로젝트는 가장 인기 있는 책을 찾는 방법이 필요함.
     * 오디오북 추천: 책을 읽지 말고 들어보라고 추천함. 아일랜드 배우들이 낭독하는 팟캐스트가 있음.
     * 고전 읽기: 프로젝트 덕분에 많은 고전을 읽었음.
     * Ulysses에 대한 감정: 책을 싫어했지만 끝까지 읽었음. 투자 대비 수익이 낮았다고 느낌.
     * Standard Ebooks의 가치: 프로젝트를 매우 높이 평가함.
     * 텍스트 역사: Ulysses의 텍스트 역사에 관심이 많음.
     * 읽기 난이도: 74.9의 읽기 난이도가 쉽다고 하지만, 실제로는 그렇지 않다고 느낌.
"
"https://news.hada.io/topic?id=15126","S3에 대해 알지 않았으면 하는 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          S3에 대해 알지 않았으면 하는 것들

AWS S3 버킷 암호화는 생각만큼 간단하지 않음

  S3 암호화 옵션들

     * 서버 측 암호화 (SSE-S3): AWS가 관리하는 키를 사용해 데이터를 암호화함.
     * 서버 측 암호화 (SSE-KMS): AWS 키 관리 서비스(KMS)를 사용해 데이터를 암호화함.
     * 서버 측 암호화 (SSE-C): 사용자가 제공한 키를 사용해 데이터를 암호화함.
     * 클라이언트 측 암호화: 사용자가 데이터를 업로드하기 전에 직접 암호화함.

  암호화와 접근 제어의 차이

     * 암호화: 데이터를 보호하기 위해 데이터를 변환하는 과정임.
     * 접근 제어: 누가 데이터에 접근할 수 있는지를 결정하는 정책임.
     * S3 암호화는 실제로는 접근 제어에 더 가깝고, 데이터 보호보다는 접근 권한 관리에 중점을 둠.

  왜 중요한가

     * 보안: 암호화는 데이터 유출 시에도 데이터를 보호할 수 있음.
     * 규정 준수: 특정 산업 규제나 법적 요구사항을 충족하기 위해 암호화가 필요할 수 있음.
     * 데이터 무결성: 암호화는 데이터가 변조되지 않았음을 보장함.

GN⁺의 의견

     * 암호화와 접근 제어의 혼동: 많은 사람들이 암호화와 접근 제어를 혼동함. 이 기사는 그 차이를 명확히 설명해줌.
     * 실제 보안 수준: S3의 암호화 옵션이 실제로 얼마나 안전한지에 대한 비판적인 시각이 필요함.
     * 대안 기술: S3 외에도 Google Cloud Storage나 Azure Blob Storage 같은 다른 클라우드 스토리지 서비스도 고려해볼 만함.
     * 사용자 교육: 초급 엔지니어들에게 암호화와 접근 제어의 차이를 명확히 이해시키는 것이 중요함.
     * 기술 도입 시 고려사항: 암호화 기술을 도입할 때 성능 저하, 비용 증가 등의 요소를 고려해야 함.

        Hacker News 의견

     * 파일 시스템이 대소문자를 구분하는 것에 대한 불만에 동의하지 않음. 이는 당연한 것이며, macOS가 이를 지원하지 않는 것이 불편함.
     * S3 경로는 실제 디렉토리가 아닌 시뮬레이션임. 예를 들어, /builds/1/installer.exe는 실제로는 이름에 /가 포함된 파일임.
     * S3나 다른 AWS 서비스를 사용하는 것이 복잡하고 문서가 많아 실수로 데이터를 노출할 수 있음. Hetzner Storage Boxes나 DigitalOcean Spaces 같은 단순한 서비스를 선호함.
     * 수십억 개의 객체를 삭제하는 것은 비용이 많이 들 수 있음. 그러나 와일드카드나 버킷 전체 객체 만료 시간을 설정하면 무료로 즉시 스토리지 요금을 중지할 수 있음.
     * 실패한 멀티파트 업로드가 보이지 않게 남아 있어 스토리지 비용이 발생할 수 있음. S3의 'Simple'이라는 이름이 무색함.
     * 멀티파트 업로드는 여러 머신에서 수행할 수 없으며, LIST 요청은 느리고 비용이 많이 듦. 버킷 생성은 일관성이 없을 수 있음.
     * S3는 대소문자를 구분하며, 이는 파일 시스템 구조로 변환할 때 문제가 될 수 있음.
     * 대부분의 S3 구성은 GET 요청을 허용하지만 HEAD 요청은 허용하지 않음. 캐시를 활용한 흐름이 작동하지 않을 수 있음.
     * 사전 서명된 URL을 많이 사용하는 경우, URL 생성 속도를 10배에서 40배까지 향상시킬 수 있음.
     * 완료되지 않은 멀티파트 업로드에 대해 스토리지 비용을 지불해야 함. 자동 삭제 설정을 활성화해야 함.
     * 대소문자 구분 논의가 너무 영어 중심적임.
     * S3는 단일 TCP 연결이 100개의 HTTP 요청을 보낸 후 모든 요청을 조용히 무시함.
     * 잘못 구성된 웹사이트가 사용자 콘텐츠를 Amazon Glacier에 업로드하고 나중에 제공할 수 있음.
     * S3는 높은 지연 시간 때문에 웹 서빙에 적합하지 않음. 작은 객체의 일관된 지연 시간은 100-200 밀리초임.
"
"https://news.hada.io/topic?id=15063","AI 파트너쉽 트래커 : AI회사들과 미디어들의 계약 추적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AI 파트너쉽 트래커 : AI회사들과 미디어들의 계약 추적

     * AI 플랫폼과 퍼블리셔들간에 ""확정된"" AI 거래에 대한 세부 정보
     * 언론 보도를 통해 양측이 모두 참여한 것으로 확인된 ""논의중"" 거래들도 포함
     * 현재 확정 35건, 논의중 거래 17건으로 총 52건. 거래금액은 노출된 금액만 포함
          + OpenAI 24건 (직접 11건, 자회사를 통한 거래 13건) 총 $285,395,000
          + Microsoft 7건 (모두 직접) 총 $10,000,000
          + Google 3건 (모두 직접) 총 $60,000,000
          + Nvidia 1건 (직접)
     * Apple, Adobe, Amazon 등은 모두 논의중

   요즘 미국회사들의 AI 쪽 발전 상황을 보면, 아주 미국스러운 방법으로 발전하는 것 같다고 생각이 듭니다.
   일단 성장시켜본 뒤에 잡음이 나면 번 돈으로 무마?하는 느낌.

   LLM 성장에 아마도 다양한 글감들을 가져와서 학습시켰지만, 정확히 공개된 것은 없는 상태.
   그에 대해서 뭐라고 하니 ""아 그럼 이제라도 계약하고 비용지불할께"" 하면서 벌어들인 돈에서 처리

   올해 네이버와 카카오의 AI 관련 투자 총액 예산이 2500억 이라고 하는데.. OpenAI가 미디어들에 준 돈만 3000억이 넘습니다.
   2024년 아마존, 마이크로소프트, 구글, 메타등 빅테크 회사들이 투자할 AI 지출액 예상이 272조원 이라고 하는데, 규모의 차이가 너무 크네요.
   기술 뉴스 보다가 답답해 져서 주저리 적어봅니다.

   한국이랑 미국이랑 비교하는 거 자체가 말도 안되고, 한국은 미국의 기술을 활용할 수밖에 없습니다.

   그러게요.

   갑자기 3년 전 즈음에 HyperClova 나왔을 때, 사용 신청폼 작성해서 신청 했는데 아직도 승인을 못 받은게 생각나네요. 그 때도 GPT-3 신청은 하고 1~2일만에 승인 났던거 같은데. 그 뒤로는 네이버에서 뭐 나와도 신청도 안하게 되더라고요.
"
"https://news.hada.io/topic?id=15177","수백만 개의 모뎀 해킹 및 내 모뎀을 해킹한 자 조사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     수백만 개의 모뎀 해킹 및 내 모뎀을 해킹한 자 조사

해킹 수백만 개의 모뎀 (그리고 내 모뎀을 해킹한 사람을 조사하기)

  소개

     * 2년 전, 집 네트워크에서 XXE 취약점을 악용하던 중 이상한 일이 발생함.
     * AWS 박스를 사용해 Python 웹 서버를 실행하고 외부 HTTP 요청을 수신했음.
     * 몇 초 후, 알 수 없는 IP 주소가 동일한 HTTP 요청을 재전송함.

  159.65.76.209, 당신은 누구인가?

     * IP 주소를 조사한 결과, DigitalOcean 소유로 확인됨.
     * 이 IP 주소는 과거에 피싱 웹사이트와 메일 서버로 사용된 적이 있음.
     * ISG Latam이라는 남미 사이버 보안 회사를 대상으로 한 피싱 캠페인과 관련이 있음.

  해커가 해커를 해킹?

     * IP 주소가 3년 동안 여러 악의적인 활동에 사용된 것으로 보임.
     * 피싱 사이트, 모뎀 해킹 등 다양한 공격이 동일한 IP에서 발생함.
     * IP 주소가 여러 소유자 사이에서 순환했을 가능성도 있음.

  증거 제출

     * 해킹된 것으로 의심되는 Cox Panoramic Wifi 게이트웨이 모뎀을 ISP에 반납하고 새 모뎀을 받음.
     * 새로운 모뎀 설치 후, 이전의 비정상적인 트래픽 재전송이 사라짐.

  3년 후

     * 친구들과의 대화 중, 과거 사건을 다시 조사하기로 결정함.
     * 악성코드 운영자가 도메인 생성 알고리즘을 사용해 C&C 서버를 숨기려 했을 가능성이 있음.

  TR-069 프로토콜을 사용한 REST API 타겟팅

     * Cox 모뎀을 설정하면서 ISP 지원 에이전트가 TR-069 프로토콜을 통해 장치를 원격으로 관리할 수 있다는 것을 알게 됨.
     * 이 프로토콜은 2004년에 구현되어 ISP가 네트워크 내 장치를 관리할 수 있게 함.

  수백만 개의 모뎀 해킹

     * Cox Business 포털의 API를 분석하여 장치 관리 기능을 확인함.
     * API 경로를 통해 장치 관련 기능을 제공하는 것을 확인함.

  역방향 프록시 API에서 정적 리소스 로드

     * Burp Intruder를 사용해 URL 끝에 %2f를 추가하여 정적 리소스를 로드할 수 있었음.
     * Swagger 문서에서 700개 이상의 API 호출을 확인함.

  Cox 백엔드 API에서 권한 우회 발견

     * API 요청을 여러 번 재전송하여 권한을 우회할 수 있었음.
     * 고객 검색 API를 통해 Cox 비즈니스 고객의 프로필을 검색할 수 있었음.

  누구의 장비든 접근 가능 확인

     * MAC 주소를 사용해 모뎀의 IP 주소를 검색할 수 있었음.
     * API를 통해 고객 계정에 연결된 장비의 MAC 주소를 검색할 수 있었음.

  Cox 비즈니스 고객 계정 접근 및 업데이트

     * 이메일을 통해 고객 계정을 검색하고 수정할 수 있었음.
     * API를 통해 고객 계정의 PII를 검색하고 장비의 MAC 주소를 통해 명령을 실행할 수 있었음.

  암호화된 비밀을 통해 누구의 장비 설정이든 덮어쓰기

     * 장비 수정 요청에 필요한 encryptedValue 매개변수를 생성할 방법을 찾음.

GN⁺의 의견

     * 보안의 중요성: 이 기사는 네트워크 장비의 보안 취약점이 얼마나 심각한 영향을 미칠 수 있는지를 보여줌. 특히, ISP가 제공하는 장비의 보안이 매우 중요함.
     * API 보안: API가 제대로 보호되지 않으면, 공격자가 쉽게 시스템에 접근할 수 있음. API 보안 강화가 필요함.
     * 고객 데이터 보호: 고객의 PII가 쉽게 노출될 수 있는 위험이 있음. 데이터 보호를 위한 추가적인 보안 조치가 필요함.
     * 취약점 공개: 취약점을 발견했을 때, 이를 공개하고 해결하는 과정이 중요함. 이는 전체적인 보안 수준을 높이는 데 기여함.
     * 기술 발전: 새로운 기술이 도입되면서 보안 위협도 함께 증가함. 지속적인 보안 교육과 최신 보안 기술 도입이 필요함.

        Hacker News 의견

     * 댓글 이동: 댓글이 다른 링크로 이동되었음. 이유는 albinowax_가 처음 게시했지만 karma를 얻지 못해 안타까웠기 때문임.
     * xrayarx 언급: xrayarx가 불편해하지 않기를 바람. 이와 같은 경우를 위해 karma 공유 기능을 구현할 계획임.
     * 임시 조치: 현재는 임시로 수동 접근 방식을 사용하고 있음.
"
"https://news.hada.io/topic?id=15109","느린 인터넷을 위한 엔지니어링 - 남극에서 사용자 불편을 최소화하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                느린 인터넷을 위한 엔지니어링 - 남극에서 사용자 불편을 최소화하는 방법

  남극에서의 인터넷 사용 경험

     * 남극에서 14개월 동안 제한된 위성 링크를 통해 인터넷에 접속했음
     * 맥머도 기지에서는 약 천 명이 몇 십 메가비트의 속도를 공유
     * 2023년 10월 기준, 남극점에서는 하루에 몇 시간만 인터넷 연결이 가능했음
     * 위성 연결로 인해 높은 지연 시간(약 750밀리초)이 발생

  느린 인터넷 환경에서의 웹 및 앱 엔지니어링 문제

     * 많은 웹앱이 느린 인터넷 환경을 고려하지 않음.
     * 예를 들어, 특정 앱은 20MB의 자바스크립트를 로드해야만 작동했음.
     * 느린 인터넷 환경에서 앱이 제대로 작동하지 않으면 사용자가 큰 불편을 겪음.

  주요 문제와 해결 방안

    하드코딩된 타임아웃과 청크 크기

     * 하드코딩된 타임아웃과 청크 크기는 느린 인터넷 환경에서 큰 문제를 일으킴.
     * 해결 방안:
          + 데이터가 흐르고 있다면 그대로 두고, UI를 통해 진행 상황을 표시함.
          + HTTPS 호출 실패 시 더 긴 타임아웃으로 재시도함.
          + 큰 데이터를 한 번에 전송하지 말고 작은 청크로 나누어 전송함.
          + 문제 발생 시 DNS, ICMP, HTTP 등을 통해 문제를 진단함.

    예시 1 - 앱 메타데이터 다운로드

     * 특정 데스크탑 앱은 하드코딩된 타임아웃으로 인해 메타데이터 다운로드에 실패함.
     * 해결 방안:
          + 점진적으로 긴 타임아웃으로 재시도함.
          + 캐시된 데이터를 사용하거나 기본값을 사용함.
          + 사용자가 수동으로 데이터를 다운로드할 수 있는 방법을 제공함.

    예시 2 - 채팅 앱

     * 특정 채팅 앱은 웹소켓 초기화에 10초 타임아웃을 사용해 실패함.
     * 반면, 다른 채팅 앱은 다양한 네트워크 조건에 잘 대응함.
     * 해결 방안:
          + 타임아웃을 동적으로 조정하고, 실패 시 지능적으로 재시도함.
          + 현재 네트워크 상태를 명확히 표시함.

    예시 3 - 점진적 전송

     * 블로그 게시 도구는 작은 청크로 데이터를 전송하고 실패 시 재개함.
     * 다른 상업적 플랫폼은 큰 파일을 한 번에 전송하려고 해 실패함.

  사용자 다운로드 기능 제공

     * 앱 내 다운로드 기능이 실패할 경우 사용자가 직접 다운로드할 수 있는 링크를 제공함.
     * 사용자가 파일을 한 번 다운로드해 여러 기기에 공유할 수 있음.
     * 사용자가 다운로드를 관리할 수 있는 유연성을 제공함.

    예시 1 - macOS 업데이트

     * macOS 업데이트는 큰 파일 크기와 불완전한 캐시 기능으로 인해 문제를 일으킴.
     * 해결 방안:
          + 다운로드 링크를 제공해 사용자가 직접 다운로드할 수 있게 함.
          + 다운로드 도구에 일시 중지/재개 기능을 추가함.
          + 모든 필요한 파일을 포함한 전체 설치 프로그램을 제공함.

    예시 2 - 삼성 안드로이드 폰 OS 업데이트

     * 삼성 안드로이드 폰의 OS 업데이트는 일시 중지/재개 기능이 없어 실패함.
     * 해결 방안:
          + 다운로드 도구에 일시 중지/재개 기능을 추가함.
          + 사용자가 직접 파일을 다운로드할 수 있는 링크를 제공함.

    예시 3 - 소형 앱 자동 업데이트

     * 소형 데스크탑 앱의 자동 업데이트는 일시 중지/취소 버튼이 없어 문제를 일으킴.
     * 해결 방안:
          + 다운로드 도구에 일시 중지/취소 버튼을 추가함.

GN⁺의 의견

     * 느린 인터넷 환경 고려: 많은 앱이 느린 인터넷 환경을 고려하지 않아 사용자가 큰 불편을 겪음. 이는 특히 원격지나 해양 환경에서 중요한 문제임.
     * 사용자 경험 개선: 앱 개발자는 다양한 네트워크 조건을 고려해 사용자 경험을 개선해야 함. 이는 사용자 만족도를 높이고, 앱의 신뢰성을 향상시킴.
     * 기술적 해결 방안: 타임아웃 조정, 청크 전송, 다운로드 재개 등 기술적 해결 방안을 통해 문제를 해결할 수 있음.
     * 다른 제품 추천: 느린 인터넷 환경에서 잘 작동하는 앱을 찾는다면, 경쟁사 제품을 비교해보는 것도 좋은 방법임. 예를 들어, 특정 채팅 앱이 느린 환경에서 더 잘 작동하는 경우가 있음.
     * 기술 도입 시 고려사항: 새로운 기술을 도입할 때는 네트워크 조건을 충분히 고려해야 함. 이는 특히 원격지나 제한된 환경에서 중요한 요소임.

        Hacker News 의견

     * 중국의 인터넷 환경: 중국의 인터넷 환경은 불안정하고 VPN도 제한적임. 개발자들이 2005년으로 돌아가서 더 효율적인 웹앱을 만들 필요가 있음.
     * 호주와 런던의 네트워크 문제: 호주와 런던 지하철에서 네트워크가 자주 끊기는데, 대부분의 앱이 이를 잘 처리하지 못함. WhatsApp은 예외적으로 잘 작동함.
     * 원격 데스크톱 사용 제안: 원격 데스크톱을 사용하면 더 나은 경험을 할 수 있을지 궁금함. 네트워크 조건이 나쁜 상황에서 VNC/Windows Remote Desktop의 성능은 불확실함.
     * 느린 인터넷의 문제: 느린 인터넷에서 많은 웹사이트가 제대로 작동하지 않음. 텍스트만 있는 페이지도 로딩이 느림. 정적 사이트 생성기로 전환한 것이 생산성 향상에 큰 도움이 됨.
     * 로컬 우선 소프트웨어: 로컬 우선 소프트웨어가 필요함. 인터넷의 원래 목적에 부합하며, 데이터 소유권을 유지할 수 있음.
     * 블로그와 대역폭 문제: 블로그 작성자가 대역폭을 많이 차지해 다른 사람들이 불만을 가짐. 하지만 PR 가치 때문에 우선권을 받음.
     * 네트워크 해킹 경험: 다양한 네트워크 환경에서 NNCP를 사용하여 데이터를 청크로 나누어 전송하는 방법을 제안함. NNCP는 신뢰할 수 있는 데이터 전송을 보장함.
     * 느린 네트워크 환경 고려 필요: 많은 사람들이 빠른 인터넷에 접근하지 못함. 느린 네트워크 환경에서도 잘 작동하는 앱을 개발해야 함.
     * 남태평양에서의 경험: Starlink의 높은 전력 소모로 인해 현지 SIM 카드를 사용했으나, EDGE(2G) 네트워크는 매우 느림. 소프트웨어 테스트에 저속, 고지연 연결을 포함해야 함.
     * 선박에서의 인터넷 문제 해결: 선박에서 인터넷을 효율적으로 사용하기 위해 DNS 쿼리를 차단하고, 사용자 세션을 제한하며, 대역폭을 공평하게 분배하는 등의 방법을 사용함.
"
"https://news.hada.io/topic?id=15130","1Password가 esbuild로 브라우저 확장 빌드 시간을 90% 단축한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             1Password가 esbuild로 브라우저 확장 빌드 시간을 90% 단축한 방법

     * 개발 초기에는 빌드 시간이 30초 정도로 괜찮았지만, 점점 기능이 추가되면서 빌드 시간이 1분 10초까지 증가함
     * 긴 빌드 시간은 개발 과정을 느리게 만들고, 새로운 개발자의 온보딩 시간을 늘리며, 일상적인 작업에서 집중하기 어렵게 만듦

  해커톤을 통한 개선 시도

     * 1월에 데이터를 수집하고, 해커톤 프로젝트 제안서를 작성하며, 기존 빌드 시스템에 대한 이해를 높이고 프로파일링 방법을 모색함
     * OpenTelemetry와 Jaeger를 활용하여 전체 빌드 프로세스를 프로파일링함
          + 프로파일링 결과, Webpack/Rollup 실행이 대부분의 빌드 시간을 차지하고 있음을 확인
          + 작은 의존성들이 하나씩 빌드되고 있어 병렬 처리의 기회가 많음을 발견
          + 초기에 일부 핫한 작업들이 필요 이상으로 오래 걸려 나머지 빌드 프로세스를 지연시키고 있음을 확인
     * 해커톤 기간 동안 esbuild를 활용하여 번들링 시간을 단축하는데 집중
          + Webpack/Rollup의 로더로 esbuild를 사용하여 성능을 크게 개선 (Rollup의 경우 80% 단축)
          + esbuild를 Webpack/Rollup를 완전히 대체하는 번들러로 사용하여 번들링 시간을 90% 단축
     * 해커톤 프로젝트 결과, 확장 프로그램 빌드 시간을 70% 이상 단축하여 15초 수준으로 개선

  프로덕션 적용을 위한 작업

     * 해커톤 프로젝트에서는 임시 방편이 많이 사용되었기 때문에, 프로덕션에 적용하기 위해서는 실제 솔루션으로 대체해야 함
          + Webpack과 Rollup 사용을 완전히 esbuild로 전환
          + 빌드 프로세스를 하나의 위치로 통합
          + 그래픽 에셋 처리 문제 해결
          + TypeScript 타입 검사를 빌드 프로세스에 다시 추가
          + 프로덕션 빌드 테스트 및 크기, 기능 비교
          + 내부 의존성 변경사항 반영
          + Sentry 빌드 단계 등 이전 빌드 시스템의 다른 측면 재현
          + 비 Chrome 브라우저, 폴리필, 스토어별 빌드 요구사항 처리 추가
     * 타입 검사와 번들 크기 최적화에 중점을 둔 작업 수행

    esbuild에 타입 검사 추가

     * tsc는 느리기 때문에 esbuild의 빠른 빌드 프로세스와 함께 사용하기 어려움
     * esbuild-plugin-typecheck 커뮤니티 플러그인을 사용하여 tsc를 worker 스레드에서 실행하고 증분 컴파일을 활용
     * 자체적으로 간단한 타입 검사 플러그인을 구현하여 각 패키지 루트마다 병렬로 tsc CLI 프로세스를 실행
          + tsc 컴파일 진단 메시지를 esbuild 네이티브 형식으로 변환하여 가독성 개선
          + tsc --listFilesOnly 플래그와 esbuild의 Metafile을 활용하여 모든 빌드 입력이 타입 검사되었는지 자동으로 검증

    프로덕션 번들 크기 개선

     * esbuild의 번들 크기 분석기를 활용하여 프로덕션 번들 분석
          + UI 컴포넌트 라이브러리의 ESM과 CJS 빌드가 모두 번들에 포함되는 문제 발견
          + 내부 라이브러리의 잘못된 설정을 수정하여 번들 크기 축소 (3.3MB -> 2.1MB)
          + 여러 엔트리포인트에 걸쳐 파일 크기 감소 효과 확인

  영향과 결론

     * 프로덕션 구현 결과, 웜 빌드 시간이 90% 이상 단축되어 5초 수준으로 개선
     * watch 모드에서는 TypeScript 파일 변경 시 1초 이내에 리빌드 가능
     * 개발자들이 새로운 빌드 시스템으로 인해 작업 효율성이 크게 향상되었다고 피드백
     * QA 팀과 개발자 volunteers의 노력으로 새로운 빌드 시스템으로의 전환이 원활히 이루어짐
     * 개발자 만족도 조사 결과, 빌드 시간에 대한 불만족이 97%에서 5%로 크게 감소
     * esbuild는 훌륭한 도구이며, 해커톤 프로젝트는 이런 작업에 최고임
"
"https://news.hada.io/topic?id=15065","llm.c를 사용하여 GPT-2 모델을 저렴하게 재구현하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    llm.c를 사용하여 GPT-2 모델을 저렴하게 재구현하기

     * llm.c를 사용하여 GPT-2 (124M) 모델을 90분 안에 $20로 재현하는 방법 설명
     * GPT-2 (124M)은 OpenAI가 2019년에 발표한 가장 작은 모델
     * Lambda에서 8X A100 80GB SXM 노드를 사용하면 시간당 약 $14, 총 비용은 약 $20
          + 단일 GPU로도 훈련 가능하지만 시간이 더 오래 걸림 (4-24시간)

  결과 비교

     * FineWeb 검증 데이터셋에서 OpenAI가 공개한 체크포인트보다 좋은 성능을 보임
          + 단, GPT-2는 WebText로 학습했기에 완전히 공정한 비교는 아님
     * HellaSwag 정확도도 측정했는데, GPT-3 Small(124M)의 33.7에 근접한 29.9 달성
          + GPT-2(124M)의 29.4는 이미 능가함
          + 단, 여기서는 10B 토큰으로 학습했고, GPT-3는 300B 토큰으로 학습함

  최소 환경 설정

     * GPU 필요 (Lambda labs 추천)
     * Linux x86 64bit Ubuntu 22.04 with CUDA 12 기준 가이드
     * miniconda 설치 후 PyTorch nightly 버전 설치 (선택사항)
     * tokenizer를 위해 필요한 패키지 설치
     * 속도를 위해 cuDNN 설치 (선택사항)
     * 여러 GPU 사용 시 MPI 설치 (선택사항)
     * FineWeb 10B 토큰 데이터셋 전처리 (~1시간 소요)
     * llm.c 컴파일 (혼합 정밀도, cuDNN FlashAttention 사용)

  학습 실행

     * 단일 GPU 사용 시 예시 커맨드
     * 멀티 GPU (8개) 사용 시 mpirun으로 실행
     * 주요 인자 설명
          + -i, -j : 학습/검증 데이터 경로
          + -o : 로그, 체크포인트 저장 경로
          + -e : 모델 초기화 (depth 12 GPT-2)
          + -b : 마이크로배치 크기 (메모리 부족 시 줄이기)
          + -t : 최대 시퀀스 길이
          + -d : 총 배치 크기 (GPT-3 논문 참조)
          + -r : Recompute 설정 (메모리 절약)
          + -z : ZeRO-1 (옵티마이저 상태 sharding)
          + 기타 weight decay, 학습률, 체크포인트 주기 등 설정

  학습 과정

     * 10B 학습 토큰, 0.5M 배치 크기 기준 약 20K 스텝 예상
     * A100 40GB PCIe GPU 기준 스텝별 소요 시간, MFU, 토큰 처리량 출력됨
     * 학습 초기에 gradient exploding 현상 있으나 clipping으로 해결

  시각화

     * 로그 파일 파싱하여 학습 곡선 시각화하는 Jupyter 노트북 제공

  Tokenizer

     * 정수 토큰을 문자열로 변환하기 위해 필요
     * PyTorch 스크립트로 생성 가능

  Sampling

     * 현재는 추론에 최적화되어 있지 않음
     * 약간의 코드 수정으로 unconditional/conditional sampling 가능

  코드 구조

     * train_gpt2.cu 파일에 대부분의 구현 포함
     * 초반 500 줄은 MPI, NCCL, cuDNN, cuBLAS 등 설정
     * 이후 1500 줄은 Transformer의 forward/backward
     * 다음 1000 줄은 GPT-2 모델 구현
     * 마지막 1000 줄은 학습 루프, 인자 파싱 등

  350M 모델

     * 10B 토큰으로는 부족하고 30B 토큰 사용
     * 8X A100 80GB로 14시간 소요, 비용 약 $200

  FAQ

     * 샘플링 가능 여부: 가능하지만 비효율적임.
     * 채팅 가능 여부: 현재는 사전 훈련만 가능, 채팅 미세 조정은 불가.
     * 다중 노드 분산 훈련: 가능하지만 아직 테스트되지 않음.
     * 비트 단위 결정론적 여부: 거의 결정론적이지만 일부 커널 패치 필요.
     * FP8 훈련 가능 여부: 현재는 BF16으로 훈련 중, FP8은 곧 지원 예정.
     * 비 NVIDIA GPU 지원 여부: 현재는 C/CUDA만 지원.

GN⁺의 의견

     * GPT-2는 현대적 LLM의 시초로서 매우 중요한 모델임. 이후 GPT-3나 다른 LLM들도 GPT-2와 크게 다르지 않음.
     * 이 프로젝트는 GPT-2 수준의 모델을 누구나 합리적인 비용으로 직접 학습시켜볼 수 있게 해줌. LLM에 대한 이해도를 높이는데 큰 도움이 될 것으로 보임.
     * 다만 아직 추론에 최적화되어 있지 않아서 실제 서비스에 활용하기에는 제한적임. 대화형 모델로 파인튜닝하는 것도 지원되지 않음.
     * 현재는 NVIDIA GPU만 지원하는데, 향후 AMD나 애플 실리콘 등 다양한 플랫폼 지원이 기대됨.
     * 유사한 목적의 오픈소스 프로젝트로는 Megatron-LM, DeepSpeed, FairSeq 등이 있음. 각자의 장단점이 있으니 용도에 맞게 선택하면 좋겠음.
     * LLM 개발 생태계 활성화 차원에서 매우 고무적인 프로젝트임. 앞으로가 더 기대됨.
"
"https://news.hada.io/topic?id=15181","내 휴대폰을 훔친 사람들이 잠금 해제를 시도하며 보낸 메시지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   내 휴대폰을 훔친 사람들이 잠금 해제를 시도하며 보낸 메시지

     * 작성자의 아이폰이 3월 초에 도난당함. 15분 후 영화관 아래 푸드홀에서 도난 사실을 알아챔
     * Find My 앱으로 확인해 보니 도난당한 폰은 맨해튼을 돌아다니다가 록펠러 센터에서 멈춤
     * 작성자는 도난 신고, 서비스 중단, 원격 삭제 등 필요한 조치를 취함
     * 도난당한 아이폰은 보통 도둑이나 중간 매매인에 의해 온라인에서 대량으로 판매됨
     * 구매자들은 부품을 찾거나 폰을 해킹하여 초기화하고 재판매하려고 함
     * 도난당한 폰의 잠금을 해제하도록 설득, 속임수, 위협하는 일련의 문자를 지속적으로 받음
          + ""Find My 에서 해당 기기를 삭제"" 하라는 다양한 종류의 거짓말
          + ""당신의 아이폰 14 Pro가 중국에서 Apple Pay로 결제하려 하고 있습니다""
          + ""내가 구매한 아이폰 14 Pro에 당신의 메시지, 이메일, 카드, 은행, 메모, 개인 정보가 있습니다""
          + ""당신의 예전 아이폰 14 Pro는 우리가 재활용하고 있습니다. 우리는 도둑이 아닌 재활용 상인입니다""
          + ""이 폰은 당신의 모든 개인 정보와 함께 암시장에서 경매에 붙여질 것입니다""
          + ""당신의 예전 아이폰은 분해되었습니다... 당신은 그것을 되찾고 싶어하지 않을 것입니다. 왜냐하면 그것은 미국 법에 속하지 않기 때문입니다""
          + ""들어봐! 당신이 폰을 제거하지 않으면 나는 당신의 슬프고 어리석고 비참한 삶을 망가뜨리고 파괴할 것입니다, 이 멍청한 노예야""
     * 작성자는 국제적 소통과 국제 범죄의 약속을 결합한 이 경험을 즐김
     * 폰을 도난당한 사람들에게 이 글이 도움이 되기를 바람

  GN⁺의 의견

     * 휴대폰 보안의 중요성: 휴대폰 도난 시 개인 정보가 유출될 수 있으므로, 강력한 비밀번호 설정과 이중 인증 등의 보안 조치가 필요함.
     * 도난 대응 방법: 휴대폰 도난 시 즉시 통신사에 연락하여 휴대폰을 비활성화하고, 경찰에 신고하는 것이 중요함.
     * 사기 문자 주의: 도둑들이 보낸 문자에 속지 않도록 주의해야 하며, 의심스러운 메시지는 무시하는 것이 좋음.
     * 기술적 대처: 휴대폰 추적 앱이나 원격 잠금 기능을 활용하여 도난 시 휴대폰을 보호할 수 있음.
     * 사회적 경각심: 이러한 기사를 통해 사람들이 휴대폰 도난에 대한 경각심을 갖고, 예방 조치를 취하는 것이 중요함.

        Hacker News 의견

     * 중국에서 누군가가 괴롭히거나 위협하면, 중국 정부를 전복하려는 음모를 꾸미고 있다고 메시지를 보내면 괴롭힘이 멈출 것이라는 의견.
     * 중국 마피아들이 강하게 나서다가도 반중국 정부 메시지를 보내면 조용해진다는 주장.
     * 애플이 도난 방지 기능을 강화한 점에 대해 긍정적으로 평가하는 의견.
     * 화창베이 전자 시장이 세계 최대의 전자 시장 중 하나라는 설명.
     * 누군가의 여동생이 오스틴에서 휴대폰을 도난당하고, 이후 협박 메시지를 받았다는 경험 공유.
     * 애플이 도난 모드로 전환할 때 도둑들이 연락할 수 있다는 경고를 추가해야 한다는 제안.
     * 애플의 iMessage 기능이 피싱에 취약할 수 있다는 문제 제기.
     * 중국이 범죄를 단속하는 데 더 나아져야 한다는 의견.
     * 애플이 이메일 주소를 유출했을 가능성은 낮다는 주장.
     * TSA 보안 검색대에서 휴대폰이 도난당한 경험을 공유하며, 공항에서의 불안감을 표현.
     * 도난된 휴대폰이 여러 번 거래되며 가치가 점점 떨어지는 과정에 대한 추측.
"
"https://news.hada.io/topic?id=15083","오타와, 감시를 위한 네트워크 비밀 백도어 생성 권한 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    오타와, 감시를 위한 네트워크 비밀 백도어 생성 권한 요구

  캐나다 사이버 보안 법안의 문제점

    법안 C-26의 주요 내용

     * 법안 C-26은 캐나다 정부가 통신사에 암호화된 네트워크에 백도어를 설치하도록 비밀리에 명령할 수 있는 권한을 부여함.
     * 이는 5G 암호화 표준을 변경하여 정부 감시를 용이하게 할 수 있음.

    기존 네트워크의 취약점

     * 현재 네트워크에는 이미 많은 취약점이 존재함.
     * 예를 들어, 1975년에 개발된 신호 시스템 No.7은 휴대전화 보안의 주요 취약점임.
     * 2023년 Citizen Lab 보고서에 따르면, 전 세계 모바일 네트워크의 중심부에 광범위한 취약점이 존재함.

    법안의 문제점

     * 정부가 새로운 취약점을 만들기보다는 기존 취약점을 해결해야 함.
     * 법안 C-26은 캐나다의 통신 서비스의 ""기밀성, 무결성, 가용성""을 손상시킬 수 있는 기술적 변경을 강제할 수 있는 광범위한 권한을 부여함.
     * 정부는 이 법안을 통해 캐나다인의 가장 기밀한 통신에 대한 보안 여부를 결정하는 유일한 중재자가 됨.

    암호화 약화의 위험성

     * 5G 기술의 암호화는 모바일 통신을 보호하고 사용자 데이터를 중간자 공격으로부터 보호함.
     * 법안은 클라우드 연결 스마트 장치와 위성 기반 서비스에도 영향을 미칠 수 있음.
     * 역사적으로 정부의 백도어는 사이버 보안에 심각한 위협을 초래함.

    정부의 사이버 보안 전략의 모순

     * 캐나다는 2022년에 화웨이와 ZTE의 통신 장비를 차단했지만, 법안 C-26은 캐나다가 비밀 명령을 통해 암호화를 약화시킬 수 있는 권한을 제공함.
     * 이는 캐나다의 친암호화 정책과 전문가 지침에 모순됨.

    안전한 백도어는 존재하지 않음

     * GCHQ 보고서에 따르면 상업적 해킹 회사의 위협이 사이버 환경에 큰 영향을 미칠 것임.
     * 캐나다 정부가 통신사에 보안 기능을 약화시키도록 강제하면, 사이버 스파이 업체와 기타 적들이 통신에 접근할 수 있는 더 많은 방법을 찾게 될 것임.

  GN⁺의 의견

     * 암호화의 중요성: 암호화는 사이버 보안의 핵심이며, 이를 약화시키는 것은 전체 시스템의 안전성을 위협함.
     * 정부의 모순된 정책: 캐나다 정부의 정책이 일관성이 없으며, 이는 국제적으로도 부정적인 영향을 미칠 수 있음.
     * 기술적 취약점: 법안이 통과되면 새로운 기술적 취약점이 생길 가능성이 높음.
     * 대안 필요성: 캐나다는 암호화를 보호하고 강화하는 방향으로 사이버 보안 법안을 재검토해야 함.
     * 국제적 영향: 캐나다의 법안이 다른 국가들에게도 유사한 억압적 법안을 정당화하는 근거가 될 수 있음.

        Hacker News 의견

     * 캐나다의 통신망 감시: 캐나다는 통신망을 백도어로 감시할 수 있는 권한을 가지고 있음. 이는 모든 국가의 인프라에서 가능한 일임.
     * 법적 감독 없이 감시: 캐나다는 전통적인 법적 절차 없이 감시를 수행하려는 의도가 있는 듯함.
     * 클라이언트 측 스캐너: 클라이언트 측 스캐너는 E2EE(종단 간 암호화)를 깨지 않고도 감시를 가능하게 함.
     * NPU와 어휘 분석: NPU(신경처리장치)와 어휘 분석 기술을 이용해 대화를 감시할 수 있음.
     * 스노든과 어산지의 교훈: 국가 주도의 감시는 항상 높은 증거 기준을 요구하지 않음. 실제로 감시가 이루어지고 있음.
     * 통신사의 법적 의무: 대부분의 국가에서 통신사는 법적 감시를 제공해야 하는 의무가 있음.
     * 해킹 사례: 2017년 캐나다 MP의 휴대폰 번호만으로도 해킹이 가능했음. 이 공격이 여전히 가능한지에 대한 의문이 있음.
     * 정치적 통제: 이러한 감시 노력은 실제 범죄나 안전 문제보다는 정치적 통제를 위한 것임.
     * 감시 능력 확대: 정부는 감시 능력을 확대하려는 의도가 없다고 주장하지만, 실제로는 감시를 강화하고 있음.
     * 법적 감시 도구: 미국과 캐나다의 일부 기관은 JSI Telecom의 도구를 사용해 심층 패킷 검사와 전화 통화 녹음을 수행함.
     * 민주주의와 공화국: 민주주의가 공화국으로 대체될 가능성이 있으며, 이는 정부가 원하는 대로 할 수 있는 체제로 변할 수 있음.
     * 암호화의 헌법적 보장: 암호화를 헌법적으로 보장하는 것이 필요할 수 있음. 이는 견제와 균형의 개념과 잘 맞음.
"
"https://news.hada.io/topic?id=15158","URL을 길게 만드는을 길게 만드는 L(O*62).ONG

URL을 길게 만드는 도구

     * 기능: URL을 매우 길게 만들어주는 도구임.
     * 제작자: ccbikai와 ChatGPT가 공동 제작함.
     * 영감: llIlI.lI에서 영감을 받음.

GN⁺의 의견

     * 유용성: 이 도구는 URL을 길게 만들어야 하는 특정 상황에서 유용할 수 있음. 예를 들어, URL 길이에 따라 동작이 달라지는 시스템을 테스트할 때 사용 가능함.
     * 흥미 요소: URL을 길게 만드는 것이 왜 필요한지에 대한 호기심을 자극할 수 있음.
     * 기술적 고려 사항: 너무 긴 URL은 브라우저나 서버에서 처리할 때 문제가 발생할 수 있음. 따라서 실제 사용 시 주의가 필요함.
     * 대안: URL 단축 서비스와는 반대되는 개념으로, URL 길이를 조절하는 다양한 도구들이 존재함.

        Hacker News 의견

     * 저자: 직접 게시하려 했으나 이미 게시된 것을 발견함. 배포 중 HTTPS 인증서 관련 문제를 겪었음. 도메인 이름의 최대 길이는 63자, HTTPS 인증서의 commonName 최대 길이는 64자임. Cloudflare, Vercel, Netlify는 Let's Encrypt를 사용하지 못했으나 Zeabur는 가능했음. 최종적으로 Cloudflare 인증서를 Google Trust Services LLC로 전환하여 성공적으로 서명함.
     * Halibut Stuff: 이 회사는 무료 이메일 포워딩이 포함된 티셔츠를 판매했음. ""myself@iwenttodefcon7.andalligotwas.thislousyemailaddress.com"" 같은 이메일 주소를 사용했으며, 많은 가입 양식을 깨뜨렸음. 소프트웨어 테스트 중 ""깨질 가능성이 높은"" 이메일 서비스를 설정하고 판매하려 했으나, 이를 설명하기 어려울 것이라 판단함.
     * 좋은 품질에 대한 불만: 이 서비스가 너무 잘 만들어져서 싫음.
     * 프로토콜 필요성: ""google.com""을 입력했을 때 아무 일도 일어나지 않아 혼란스러웠음. 프로토콜이 필요하다는 라벨이 있어야 함.
     * 스케치한 링크: 링크를 ""스케치하게"" 보이도록 만드는 비슷한 것을 만들었음. 자동 링크 기능을 깨뜨릴 수 있지만, 복사하여 붙여넣기하거나 적절히 링크하면 작동할 것임.
     * URL 인코딩: URL을 이진수로 인코딩한 후 0과 1을 O와 o로 대체하는 방식이 천재적임.
     * 웹사이트 푸터 링크: 해당 웹사이트의 푸터에 링크된 ""https://llili.li/""가 더 좋음.
     * 필수 프로토콜: ""https://""가 양식에 미리 채워져 있어야 함.
     * 기시감: 어제 이 주제와 동일한 댓글을 본 것 같음. 그러나 지금은 모두 5시간 전의 댓글임.
     * 기술적 세부사항: 긴 도메인 이름과 HTTPS 인증서 사용의 어려움에 대한 흥미로운 기술적 세부사항. 저자는 해결책을 찾았으나 잠재적 남용이 우려됨. 이를 해결할 계획이 있는지 궁금함.
"
"https://news.hada.io/topic?id=15062","TerminalTextEffects (TTE) - 터미널 텍스트 효과 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               TerminalTextEffects (TTE) - 터미널 텍스트 효과 엔진

     * 터미널용 비쥬얼 특수효과 엔진
     * 시스템 어플리케이션으로 직접 사용하거나, Python 라이브러리로 자신의 스크립트/애플리케이션내에서 사용 가능
     * Xterm 256/RGB 컬러 지원
     * 경로, 웨이포인트, 모션 Easing을 통한 복잡한 문자열 이동, 쿼드/큐빅 베지어 커브 지원
     * 심볼/색상 변경, 레이어, Easing 및 경로 동기화 진행이 포함된 장면을 통해 복잡한 애니메이션을 구현 가능
     * 가변 정지/단계별 색상 그라데이션 생성
     * 커스텀 콜백 지원 및 다양한 사전 정의 액션을 통한 경로/씬 상태 변경에 대한 이벤트 처리
     * 인라인으로 실행되어 터미널 상태와 워크플로를 보존

효과 쇼룸

     * 빔 효과: 캔버스 위를 이동하며 문자를 밝히는 빔을 생성함.
     * 바이너리 경로: 문자를 이진 형태로 디코딩하여 캔버스 외부에서 입력 좌표로 이동함.
     * 블랙홀: 별이 있는 필드에서 블랙홀을 생성하고 별을 흡수한 후 데이터를 폭발시켜 원래 위치로 되돌림.
     * 바운시 볼: 문자가 캔버스 상단에서 떨어져 바운시 볼처럼 튀다가 제자리에 정착함.
     * 버블: 문자를 버블 형태로 만들어 떠다니다가 터짐.
     * 번 효과: 문자가 점화되어 화면을 태움.
     * 컬러 시프트: 터미널 전체에 색상이 변하는 그라디언트를 표시함.
     * 크럼블: 문자가 먼지로 부서졌다가 다시 재형성됨.
     * 디크립트: 영화 스타일의 텍스트 디크립션 효과를 제공함.
     * 오류 수정: 잘못된 초기 위치에서 올바른 위치로 문자를 교환함.
     * 확장: 문자가 중앙에서 확장됨.
     * 불꽃놀이: 문자가 화면 위로 발사되어 불꽃놀이처럼 폭발하고 제자리에 정착함.
     * 중앙 확장: 캔버스 중앙에서 한 행 또는 열로 확장됨.
     * 궤도 발사: 네 개의 발사기가 캔버스를 돌며 문자를 발사하여 중앙에서 텍스트를 형성함.

   holy

   와 예술이네요

   와 너무 고퀄인데요?

        Hacker News 의견

     * 어릴 적 Geocities 사이트를 떠올리게 함. 여러 웹사이트에서 HTML을 복사해 붙여넣어 ""해커"" 느낌을 냈음. 이제 터미널에서 그 향수를 느낄 수 있음.
     * 놀라운 라이브러리임. 하지만 절대 프로덕션 환경에서는 사용하지 말아야 함.
     * 이 라이브러리를 SSH 로그인 시 MOTD에 통합했음. 매번 랜덤 효과가 나타남.
     * 이 라이브러리를 정말 사랑함. 컴퓨터가 공상과학처럼 보이던 시절을 떠올리게 함. 프론트 페이지에 올라온 것이 기쁨. 파이썬 라이브러리로도 사용 가능함.
     * ""왜 사람들이 텍스트에 관한 기사를 추천하지?""라고 생각했지만, 이 라이브러리를 보고 사랑하게 됨. 순수한 열정으로 만들어진 것이 하루를 즐겁게 함.
     * Emacs에서 M-x zone 명령어와 비슷함. 실행할 때마다 랜덤 스크린 세이버 효과가 나타남. 타이머로 설정하면 동료들이 궁금해함.
     * 여러 장르의 텍스트 기반 어드벤처 게임에 이 라이브러리가 유용할 것 같음. 사이버펑크, 판타지, 호러 등에서 미묘하게 사용하면 효과적일 것임.
     * 모두가 비슷한 접근 방식을 취하는 것을 보니 기쁨. 코드 예시: self.move_cursor_to_top(), sys.stdout.write(output_string), sys.stdout.flush().
     * 이 라이브러리는 멋짐. 'Burn'이나 'ErrorCorrect' 효과를 사용해 로그에서 경고나 오류를 동적으로 강조할 수 있음.
     * Chalk 라이브러리 유지보수자임. 이 라이브러리는 최고임. 칭찬함.
"
"https://news.hada.io/topic?id=15137","시그널: 개인정보 보호 보장을 훼손하기보다는 EU 시장 철수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   시그널: 개인정보 보호 보장을 훼손하기보다는 EU 시장 철수

     * 지지부진하던 #ChatControl 제안이 결국 유럽연합 정부에 의해 채택될 수 있을 것으로 보임. 프랑스는 저항을 포기할 듯
     * Signal의 CEO는 다음과 같이 얘기함

     Signal은 이 제안에 강력히 반대합니다.
     의심할 여지 없이 우리는 개인 정보 보호를 약화시키지 않고 EU 시장을 떠날 것입니다.
     이 제안이 통과되어 우리에게 불리하게 시행된다면 우리는 이러한 선택을 해야 할 것입니다.
     이것은 보안 병에 담긴 감시용 와인입니다.

   검열은 항상 사회안정이라는 변명과 함께했는데
   딱히 사회안정이라는 문구가 매력적이게 다가오지 않을 정도로 시대가 바뀌었죠.
   그럼에도 높으신 분들 두뇌구조는 변하지 않았다는 것은 슬픈 일이네요.
   중국 한국도 그렇고 검열을 위한 최신 래퍼토리는 아동 포르노인가봐요.

   막는 거야 좋은데 그거 막겠다고 전 국민의 데이터를 감찰하겠다는 것은 범죄 잡겠다고 전 국민 안방에 cctv 달자는 주장이랑 다를 게 없죠.

   메신저앱 Signal 대표, 영국 ""대규모 감시"" 법에 따르지 않을 것이라고 발언
   유럽 인권 재판소, 안전한 'end-to-end encryption' 약화 금지 결정
   ChatControl: EU 장관들, 자신들은 면제하길 원하는 ChatControl 규제안

        Hacker News 의견

     * 트윗이 링크된 설명은 정확한 것 같음. 최신 규정 초안에 따르면, 채팅 기능이 있는 앱과 서비스 사용자에게 무차별적이고 오류가 발생할 수 있는 스캔과 보고를 수락할지 묻는 내용이 포함됨. 사용자가 스캔을 거부하면 이미지, 사진, 비디오 및 링크를 보내거나 받을 수 없게 됨. 종단 간 암호화된 서비스는 메시지 전송 전에 자동 검색을 구현해야 함. 텍스트 메시지와 음성 통신의 스캔은 폐기됨. 보안 당국과 군대 직원의 채팅은 예외로 함.
     * 다음 주에 유럽 의회 선거가 있음. 이 규정에 강력히 반대하는 ""주류"" 정당에 대한 팁이 있는지 묻는 의견. 해적당은 의석을 얻기 어려울 것 같음.
     * 중앙 집중식 서비스는 감시에 더 취약함. Signal은 자가 호스팅과 연합을 채택해야 함.
     * EU의 아동 포르노와의 싸움이 광범위한 온라인 감시에 대한 두려움을 불러일으키는 것 같다는 의견. 이는 EU 조달 로비와 부패의 일환일 수 있음.
     * 영국의 온라인 안전법이 프라이버시를 침해하면 ""100% 떠나겠다""고 위협한 Signal에 대한 의견. 이 규정도 마찬가지로 무의미한 말일 것 같음.
     * 현재 법안은 다수의 지지를 받지 못하고 있음. 위원회와 의회를 통과하더라도 유럽 사법 재판소에서 살아남기 어려울 것 같음.
     * GNUtella와 Signal 프로토콜을 결합한 피어 투 피어 클라우드 개념의 부활을 기다리는 의견.
     * 채팅 기능이 있는 앱과 서비스 사용자가 무차별적이고 오류가 발생할 수 있는 스캔을 수락해야 한다는 규정이 모든 웹 댓글과 메시징 플랫폼에 적용되어야 한다는 의견. 이는 모든 웹사이트와 웹 서비스가 EU 내에서 접근 가능해야 함을 의미함. 현실적으로 가능할지 의문임.
     * 이 규정이 통과되면 EU를 떠나겠다는 의견. 어디로 갈지는 모르겠음.
     * ""우리는 메시징 플랫폼의 보안을 보호하는 정부가 있는 곳에서 안전한 메시징 플랫폼을 운영할 것""이라는 의견. 이해는 되지만 특별히 흥미롭지는 않음.
"
"https://news.hada.io/topic?id=15169","EU: 스캔 거부 사용자, 사진 및 링크 공유 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      EU: 스캔 거부 사용자, 사진 및 링크 공유 금지

논란이 되고 있는 EU의 ""Chat Control"" 규제

     * 프랑스가 기존의 반대 입장을 철회하면서, EU 정부들이 'Chat Control' 규제를 승인할 가능성이 있음
          + 프랑스는 새로운 '업로드 조정' 제안을 실행 가능한 옵션으로 간주하고 있음
     * 최신 드래프트(5월 28일)에 따르면:
          + 채팅 기능이 있는 앱과 서비스 사용자들에게 무차별적이고 오류가 발생하기 쉬운 이미지, 사진, 영상 스캐닝 및 보고 수락 여부를 묻게 될 것임
          + 사용자가 스캐닝을 거부하면 이미지, 사진, 영상, 링크 전송 및 수신이 차단됨 (제10조)
          + 왓츠앱이나 시그널 같은 종단간 암호화 서비스는 메시지 전송 '이전'에 자동화된 검색을 구현해야 함 (클라이언트 측 스캐닝, 제10a조)
     * 법률 서비스는 무차별적 채팅 통제 스캐닝이 여전히 기본권 침해라는 점을 분명히 했음에도 불구하고, 대부분의 EU 정부는 계속 추진하기로 결정함
     * 반대자들은 이 제안이 본질적으로 EU 위원회의 극단적이고 전례 없는 초기 채팅 통제 제안과 동일하다고 경고함
          + 수백만 명의 무고한 시민들의 사생활 정보가 신뢰할 수 없는 기술로 검색되고 유출될 것임
          + 이는 디지털 통신 사생활을 파괴하고, 안전한 종단간 암호화를 훼손할 것임
     * EU 정부들이 정말로 이런 급진적 입장으로 3자 협의에 들어간다면, 의회가 초기 입장을 포기하고 우리의 온라인 보안을 위험에 빠뜨리는 나쁘고 위험한 타협에 동의할 위험이 있음

   이번 건의 경우는 정말 문제가 큰듯 한데 밀어붙이나 보네요.
   EU가 애플한테 한 짓은 맘에 들지만 이건 너무 나갔다 싶어요.

   어쩌면 애플한테 한 짓부터 잘못된거였을지도 몰라요... ㅠㅠ

        Hacker News 의견

     * 보안 당국과 군대의 채팅이 감시에서 면제된다는 점: 범죄를 저지를 가능성이 높은 두 주요 분야가 면제된다는 점이 이해되지 않음.
     * 법의 효과성에 대한 의문: 범죄자들이 다른 플랫폼을 사용할 수 있기 때문에 억제 효과가 없음.
     * 기술을 이해하지 못하는 입법자들: 기술을 이해하지 못하는 사람들이 법을 제정하는 것이 문제임.
     * 책임 있는 사람들이 무력감을 느낄 때: 책임 있는 사람들이 무력감을 느끼면 무고한 사람들을 불편하게 하거나 해를 끼치는 상황을 초래함.
     * 잘못된 법의 결과: 잘못된 법으로 인해 무고한 사람들이 피해를 입을 수 있음. 예: 잘못된 긍정으로 인해 구글 계정이 삭제된 사례.
     * 정치적 영향력 행사: 이 법이 통과되지 않도록 투표를 통해 영향을 미칠 수 있음. 예: EU 해적당.
     * EU의 규제 철폐 여부: EU가 규제를 철폐한 사례가 있는지 궁금함.
     * 정치인과 공무원의 데이터 공유: 정치인과 공무원의 데이터를 공유하고 분석하여 부패를 방지해야 한다는 의견.
     * 기본권에 대한 우려: 유럽연합 기본권 헌장의 제7조, 사생활과 가족 생활에 대한 존중 권리.
     * 긍정적인 측면: 반발이 새로운 세대를 고무시켜 구시대적 사고를 버리게 할 것이라는 의견.
     * 링크 공유 방지 방법: 링크가 텍스트로 공유될 수 있기 때문에 이를 막는 것이 불가능하다는 의문.
"
"https://news.hada.io/topic?id=15052","인터넷 아카이브, DDoS 공격 피해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인터넷 아카이브, DDoS 공격 피해

인터넷 아카이브의 마스토돈 서버

  인터넷 아카이브 DDoS 공격

     * 인터넷 아카이브(archive.org)가 DDoS 공격을 받고 있음
     * 데이터는 손상되지 않았으나 대부분의 서비스가 이용 불가 상태임
     * 문제 해결 중이며, 업데이트는 댓글로 게시할 예정임

  사용자 반응

     * 여러 사용자가 공격에 대한 다양한 의견을 공유함
     * 일부 사용자는 공격의 원인으로 AI 트레이너나 상업 출판사를 지목함
     * 다른 사용자는 정치적 이유나 단순한 해커의 자아 과시를 원인으로 추측함

  인터넷 아카이브의 대응

     * 인터넷 아카이브는 공격에 대응하기 위해 조정을 진행 중임
     * 주말과 공휴일에 공격이 빈번하게 발생함
     * 서비스 복구를 위해 노력 중이며, 사용자들에게 감사의 메시지를 전함

  사용자 지원과 격려

     * 많은 사용자가 인터넷 아카이브의 노력에 감사와 격려의 메시지를 보냄
     * 일부 사용자는 DDoS 보호 서비스 사용을 제안함
     * 다른 사용자는 공격의 이유를 묻거나, 공격자에 대한 비판을 표명함

GN⁺의 의견

     * DDoS 공격의 영향: DDoS 공격은 서비스 가용성을 저하시켜 사용자 경험에 큰 영향을 미침. 특히 공공 서비스인 인터넷 아카이브의 경우, 정보 접근성을 저해함.
     * 보안 강화 필요성: 인터넷 아카이브와 같은 중요한 서비스는 DDoS 공격에 대비한 보안 강화가 필요함. 클라우드플레어와 같은 DDoS 보호 서비스를 고려할 필요가 있음.
     * 커뮤니티의 중요성: 많은 사용자가 인터넷 아카이브를 지지하고 격려하는 모습에서 커뮤니티의 중요성을 확인할 수 있음. 이는 서비스 운영에 큰 힘이 됨.
     * 공격 동기 분석: 공격의 동기를 정확히 파악하는 것이 중요함. AI 트레이너, 상업 출판사, 정치적 이유 등 다양한 가능성을 고려해야 함.
     * 대응 전략: 공격에 대한 대응 전략을 명확히 하고, 사용자들에게 투명하게 상황을 공유하는 것이 신뢰를 유지하는 데 중요함.

        Hacker News 의견

     * 자신의 웹사이트 아카이브를 유지하는 습관: 흥미로운 사이트들을 아카이브로 저장하고, 나중에 로컬 네트워크에서 직접 제공할 계획이 있음. wget-mirror 셸 함수를 사용하여 대부분의 사이트를 쉽게 아카이브함.
     * 아카이브의 필요성에 대한 의문: 이런 행동이 무슨 의미가 있는지 의문을 제기함. 많은 돈과 다크 웹의 연락처가 있는 사람이 아니면 불필요하다고 생각함.
     * 사이트 복구 소식: 사이트가 다시 온라인 상태로 돌아왔음을 알림. 공격자와의 지속적인 싸움이지만, 조정이 이루어졌고, 메모리얼 데이를 기념함.
     * DDoS 공격 관리 방법: 오픈 소스를 사용하여 DDoS 공격을 관리하는 방법을 묻고, Cloudflare는 언급하지 말 것을 요청함.
     * archive.org의 인프라 비용: archive.org이 인프라에 얼마나 많은 돈을 쓰는지, 가장 심각한 DDoS 공격을 견디기 위해 얼마나 필요한지 궁금해함. Google이 큰 DDoS 공격을 견뎌낸 사례를 언급하며, 서비스 이용자들이 작은 금액이라도 기부할 것을 권장함.
     * archive.org 팀에 대한 감사: archive.org 팀에게 웹사이트를 사랑한다고 전하며, 희귀한 콘텐츠를 많이 저장해줘서 감사함.
     * 중복된 댓글: 중복된 댓글임을 알림.
     * archive.org의 가장 큰 적: 현재 archive.org의 가장 큰 적이 누구인지 궁금해함.
     * 음반사들의 방해: 음반사들이 문제를 일으키고 있다고 생각함.
     * 방화범의 비유: 고아원이나 도서관에 불을 지르는 방화범과 같다고 비유하며, 왜 그런 행동을 하는지 이해할 수 없음을 표현함.
"
"https://news.hada.io/topic?id=15145","중국 인터넷 초기 정보 거의 10년 상실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         중국 인터넷 초기 정보 거의 10년 상실

중국 인터넷 콘텐츠의 대규모 소멸

  주요 내용 요약

     * 중국 인터넷 콘텐츠 소멸:
          + 중국의 초기 인터넷 시절(1990년대 후반~2000년대 중반) 콘텐츠가 거의 전부 사라졌음.
          + 주요 인물들(예: 알리바바 창립자 마윈, 샤오미 CEO 레이쥔)에 대한 검색 결과가 거의 없음.
     * 소멸 원인:
          + 기술 발전으로 인한 개인 웹사이트와 블로그 플랫폼의 폐지.
          + 상업적 이유로 오래된 플랫폼을 유지하지 않는 상업 제공자들.
          + 아카이빙을 위한 사회적 자원의 부족.
     * 정치적 요인:
          + 중국 공산당의 정치적, 이념적 통제 정책이 주요 요인으로 작용함.
          + 역사와 여론을 통제하려는 시도로 콘텐츠가 삭제됨.
     * 미래의 문제:
          + 인터넷이 집단 정체성 형성에 미치는 영향에 대한 큰 질문을 제기함.
          + 21세기 초반의 역사적 기록이 사라질 가능성.

  GN⁺의 의견

     * 기술적 아카이빙의 중요성:
          + 인터넷 아카이빙은 디지털 시대의 역사 보존에 필수적임.
          + 미국의 Internet Archive와 같은 아카이빙 시스템의 필요성.
     * 정치적 통제의 영향:
          + 정치적 이유로 콘텐츠가 삭제되는 것은 정보의 자유와 투명성을 저해함.
          + 이는 장기적으로 사회적 신뢰를 약화시킬 수 있음.
     * 대체 검색 엔진의 필요성:
          + 중국 내 검색 엔진이 정치적 검열을 받는 상황에서, 대체 검색 엔진의 사용이 필요함.
          + VPN과 같은 도구를 통해 외부 검색 엔진을 사용하는 방법도 고려할 수 있음.
     * 역사적 기록의 소멸:
          + 디지털 기록이 사라지는 것은 역사적 연구와 교육에 큰 손실을 초래함.
          + 이는 미래 세대가 과거를 이해하는 데 어려움을 겪게 할 수 있음.
     * 국제적 협력의 필요성:
          + 글로벌 차원에서 디지털 아카이빙을 위한 협력이 필요함.
          + 각국이 협력하여 디지털 콘텐츠의 보존을 위한 정책을 마련해야 함.
"
"https://news.hada.io/topic?id=15176","Koheesio - Nike의 데이터 파이프라인 구축용 프레임워크 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Koheesio - Nike의 데이터 파이프라인 구축용 프레임워크 오픈소스

     * 효율적인 데이터 파이프라인을 구축하기 위한 Python 프레임워크
     * 모듈화와 협업을 촉진하여 간단하고 재사용 가능한 구성 요소로 복잡한 파이프라인을 만들 수 있게 함
     * 여러 데이터 처리 라이브러리나 프레임워크와 원활하게 작동하도록 설계됨
     * Pydantic을 사용하여 강력한 타입 검사, 데이터 유효성 검사 및 설정 관리를 제공함
     * 잘 테스트된 코드와 풍부한 기능 세트를 통해 예측 가능한 파이프라인 실행을 보장

  Koheesio와 다른 라이브러리의 차별점

     * 데이터 파이프라인, PySpark 통합, 데이터 변환, ETL 작업, 데이터 유효성 검사 및 대규모 데이터 처리에 특화된 설계
     * 모든 종류의 데이터 처리 작업을 위한 Reader, Writer 및 Transformation 기능 제공
     * 데이터 엔지니어링 커뮤니티 내에서 협업과 혁신을 장려함

  Koheesio 핵심 구성 요소

     * Step: Koheesio의 기본 작업 단위로, 데이터 파이프라인에서 단일 작업을 나타냄. 입력을 받아 출력을 생성함
     * Context: 작업의 환경을 설정하는 구성 클래스. 작업 간 변수를 공유하고 환경에 따라 작업의 동작을 조정할 수 있음
     * Logger: 다양한 수준에서 메시지를 기록하는 클래스

        Hacker News 의견

     * Nike의 데이터 엔지니어링이 실제로 어떤지 궁금함. LinkedIn 프로필 때문에 저임금 계약직 제안이 자주 옴. 이 역할들이 미국 내 경험 있는 사람들을 대상으로 하지만, 보수가 낮음. 이 역할들이 사기일 가능성도 있음.
     * 이 도구는 경험이 적은 개발자들이 많은 환경에서 유용할 수 있음. 2-3명의 개발자가 도구를 만들고, 더 큰 팀이 단순한 ETL 작업을 수행함. 도구 팀이 새로운 요구사항을 해결해야 하는 부담이 있음.
     * 강한 타입이 데이터 엔지니어링 문제를 방해함. 동적 언어가 코드 복잡성과 유지보수를 줄이는 데 도움이 됨. 타입 프레임워크를 고집하는 것은 산업 경험보다는 학문적 경험에 기반한 것임.
     * ETL, Spark, Storm 등을 다뤘지만, 이 라이브러리의 가치 제안이 이해되지 않음. 데이터 엔지니어링 전문가가 아니지만, 이 도구의 유용성을 기대했음.
     * 이 도구가 무엇인지, 왜 사용해야 하는지에 대한 더 나은 설명이 필요함. 링크 참고.
     * 몇 주 전에 Apache Beam을 사용해 데이터 파이프라인을 작성했음. Koheesio가 일부 기능을 공유하지만, Apache Beam이 더 뛰어남.
     * Luigi와 비슷함. 좋음!
     * CloudQuery를 확인해보길 권장함. Arrow 기반 ELT 프레임워크임. (작성자 본인)
     * Koheesio는 다른 라이브러리와 경쟁하지 않는다고 하지만, 실제로는 경쟁함. 워크플로우 오케스트레이션은 성숙한 카테고리임. Python을 사용하는 것이 큰 장점이 아님.
     * dlt 라이브러리를 봤는지 궁금함. Python에서 사용하기 쉬운 EL을 제공함. Koheesio와 dlt의 차이점과 상호 보완 가능성에 대해 궁금함.
"
"https://news.hada.io/topic?id=15076","Llama 3-V - GPT4-V와 동등한 성능을 100배 작은 모델과 500달러로 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Llama 3-V - GPT4-V와 동등한 성능을 100배 작은 모델과 500달러로 구현하기

     * Llama3-V는 Llama3를 기반으로 한 최초의 멀티모달 모델
     * Llama3-V는 500달러 이하의 비용으로 훈련되었음
     * 벤치마크에서 Llava보다 10-20% 성능 향상을 보였고, 100배 큰 폐쇄형 모델과 비교해도 대부분의 지표에서 유사한 성능을 보임

  모델 아키텍처

     * SigLIP: 이미지 임베딩 모델로, CLIP과 유사하지만 시그모이드 손실을 사용함.
     * 텍스트 임베딩 정렬: SigLIP을 고정하고, 투영 모듈을 사용해 이미지 임베딩을 텍스트 임베딩과 정렬함.
     * 이미지 토큰 추가: 이미지 임베딩을 텍스트 토큰 앞에 추가하여 Llama3에 입력함.

  추론 최적화

     * 캐싱: SigLIP 모델의 이미지 임베딩을 사전에 계산하여 GPU 활용도를 높이고, 훈련/추론 시간을 절약함.
     * MPS/MLX 최적화: SigLIP 모델을 MPS 최적화하여 초당 32개의 이미지를 처리함.

  훈련 과정

     * 임베딩 사전 계산: SigLIP을 사용해 이미지 임베딩을 사전 계산함.
     * 투영 레이어 학습: 투영 레이어를 통해 이미지와 텍스트 임베딩을 멀티모달 임베딩 공간으로 정렬함.
     * 지도 학습: 사전 훈련 후, 지도 학습을 통해 모델 성능을 향상시킴.

  요약

     * Llama3 8B에 비전 인코더를 추가함.
     * Llava보다 10-20% 성능 향상.
     * GPT4v, Gemini Ultra, Claude Opus와 같은 100배 큰 모델과 유사한 성능.
     * 500달러 이하의 비용으로 효율적인 훈련 및 지도 학습 파이프라인 제공.

GN⁺의 의견

     * 흥미로운 점: Llama3-V는 저비용으로 고성능 멀티모달 모델을 구현한 점이 흥미로움.
     * 비판적 시각: 모델 크기와 비용을 줄이면서 성능을 유지하는 것이 얼마나 지속 가능할지 의문임.
     * 관련 기술: 비슷한 기능을 제공하는 모델로는 CLIP과 DALL-E가 있음.
     * 도입 고려사항: 새로운 기술 도입 시, 모델의 정확도와 비용 효율성을 고려해야 함.
     * 기술 선택의 득과 실: 저비용으로 고성능을 얻을 수 있지만, 모델의 확장성과 유지보수 비용도 고려해야 함.
"
"https://news.hada.io/topic?id=15142","우리 뇌가 추가 신체 부위를 제어하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        우리 뇌가 추가 신체 부위를 제어하는 방법

추가 엄지손가락 사용법 익히기: 생각보다 쉬움

  공공 실험 결과

     * 케임브리지 연구진이 다양한 참가자들을 대상으로 제어 가능한 인공 엄지손가락을 테스트함.
     * 로봇 장치가 새로운 기술이 모든 사람에게 포괄적이고 효과적으로 작동할 수 있도록 하는 것이 중요함을 강조함.

  미래 기술: 모터 증강

     * 모터 증강은 외골격이나 추가 로봇 신체 부위를 사용하여 생물학적 한계를 넘어서는 능력을 제공하는 기술임.
     * 장애인에게는 환경과 상호작용할 수 있는 새로운 방법을 제공할 수 있음.

  기술의 인간 정의 변화

     * 타마르 메이킨 교수는 기술이 인간의 정의를 변화시키고 있으며, 이러한 기술이 사회에 이익을 줄 수 있다고 언급함.
     * 포괄성을 연구 개발 초기 단계에서 통합하고 측정하는 것이 중요함.

  제3의 엄지손가락 개발

     * 다니 클로드가 개발한 제3의 엄지손가락은 착용자의 움직임 범위를 증가시키고, 손의 잡기 능력을 향상시키며, 운반 능력을 확장함.
     * 발가락의 압력 센서를 통해 제어되며, 사용자가 한 손으로 복잡한 작업을 수행할 수 있게 함.

  2022년 로열 소사이어티 여름 과학 전시회

     * 596명의 참가자가 다양한 작업을 수행하며 제3의 엄지손가락을 테스트함.
     * 98%의 참가자가 첫 1분 내에 성공적으로 장치를 사용함.

  기술의 포괄성

     * 루시 다우달은 모터 증강이 성공하려면 사용자의 운동 및 인지 능력과 원활하게 통합되어야 한다고 언급함.
     * 다양한 연령, 성별, 체중, 생활 방식, 장애 등을 고려해야 함.

  기술이 포괄적이지 않을 때

     * 음성 인식 시스템이 백인 목소리를 더 잘 인식함.
     * 증강 현실 기술이 어두운 피부 톤 사용자에게 덜 효과적임.
     * 자동차 좌석 및 안전벨트가 남성 중심으로 설계되어 여성의 사고 위험이 높음.
     * 오른손잡이용 도구가 왼손잡이에게 사고를 유발함.

GN⁺의 의견

     * 포괄성의 중요성: 기술 개발 초기 단계에서 다양한 사용자 그룹을 포함하는 것이 중요함.
     * 사용자 경험: 새로운 기술이 사용자에게 쉽게 학습되고 사용될 수 있어야 함.
     * 기술의 사회적 영향: 기술이 사회 전반에 걸쳐 긍정적인 영향을 미칠 수 있도록 설계되어야 함.
     * 연령별 차이: 나이에 따른 기술 사용 능력 차이를 고려해야 함.
     * 기술의 접근성: 모든 사람들이 기술을 쉽게 접근하고 사용할 수 있도록 해야 함.

        Hacker News 의견

     * 아킬레스건 재건 수술을 받고 재활 과정을 거쳐 발을 움직이는 근육이 발가락을 움직이던 근육으로 바뀌었음. 처음에는 이상했지만, 시간이 지나면서 뇌가 적응했음.
     * ""커브 컷 효과""는 특정 장애인을 위해 만든 변화가 예상보다 더 널리 유용하게 되는 현상을 말함. 건강한 사람들을 위한 기술이 나중에 장애인들에게도 도움이 될 수 있음.
     * 머리를 다쳐서 한쪽 귀의 저주파 청력을 거의 잃었지만, 뇌가 적응하여 주관적인 경험은 크게 변하지 않았음. 방향 감각은 여전히 어려움.
     * 마샬 맥루한의 책 ""미디어 이해하기""에서 자동차를 인간의 확장으로 설명함. 자동차가 몸의 일부처럼 느껴질 때의 경험을 언급함.
     * Ctrl Labs의 초기 데모는 매우 흥미로웠음. 팔에 센서 밴드를 착용하고 뇌의 전기 신호를 해석하여 움직임을 예측함. 손가락을 실제로 움직이지 않아도 키보드를 완벽하게 사용할 수 있었음.
     * 햅틱 나침반 다큐멘터리를 본 적이 있음. 진동 팩을 이용해 방향 감각을 향상시키는 장치였음. 몇 주 후에 추가 감각에 익숙해짐.
     * 실험 참가자로서 뇌 스캔을 받기 위해 등록했음. 블록을 움직이는 것은 쉬웠지만, 더 복잡한 작업은 시간이 걸렸음. 특히 러닝머신에서 엄지손가락을 사용하는 것은 어려웠음.
     * ""세 번째 엄지손가락""은 발가락의 압력 센서로 제어됨. 팔마리스 롱구스 근육을 사용하면 더 직관적일 수 있을 것 같음. 이 근육은 중요한 역할이 없고 피부 가까이에 있어 EMG로 감지 가능함.
     * VR 퍼리들이 컴퓨터 접근성 기술을 발전시키고 있음.
     * 어릴 때부터 다양한 신체 부위의 감각에 매료되었음. 추가 손가락이나 팔을 가지는 느낌을 상상할 수 있음. 하지만 이것이 단순한 상상인지 테스트할 방법은 없음.
"
"https://news.hada.io/topic?id=15099","구글, 유출된 내부 검색 문서가 진짜임을 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글, 유출된 내부 검색 문서가 진짜임을 확인

     * 구글이 최근 유출된 2,500개의 내부 검색 문서가 실제임을 확인해줌
     * 문서에는 Google이 추적하고 있는 데이터에 대한 세부 정보가 포함되어 있으며, 이 중 일부는 비밀리에 보호되는 검색 순위 알고리즘에 사용될 수 있음
     * 문서는 웹을 형성하는 가장 중요한 시스템 중 하나인 ""검색""에 대한 전례 없는 통찰력을 제공함
     * 구글의 대변인 데이비스 톰슨은 이메일을 통해서 다음과 같이 강조함
          + ""상황에 맞지 않거나, 오래되었거나, 불완전한 정보에 근거하여 Search에 대해 부정확한 가정을 하지 않도록 주의하시기 바랍니다""
          + ""Google은 검색이 작동하는 방식과 시스템이 고려하는 요소 유형에 대한 광범위한 정보를 공유하는 동시에 조작으로부터 검색 결과의 무결성을 보호하기 위해 노력하고 있습니다""
     * SEO 전문가 랜드 피쉬킨과 마이크 킹이 이번 주 초 문서 내용에 대한 초기 분석을 발표함
          + 유출된 자료에 따르면 Google은 클릭, Chrome 사용자 데이터 등 회사 대표자들이 Google 검색에서 웹페이지 순위에 기여하지 않는다고 말한 데이터를 수집하고 잠재적으로 사용함
          + 세부적으로 설명된 데이터 중 어떤 부분이 실제로 검색 콘텐츠 순위를 매기는 데 사용되는지는 명확하지 않으며, 또한 검색에서 다양한 요소가 어떻게 가중치가 부여되는지 밝히지 않음
     * 구글은 어제까지 문서의 진위 여부에 대한 여러 요청에 응답하지 않았음
     * 공개된 정보는 검색 엔진 최적화(SEO), 마케팅 및 출판 업계에 파장을 일으킬 것으로 예상됨
     * 유출된 자료는 구글이 클릭, 크롬 사용자 데이터 등 공식적으로 ""검색 순위에 영향을 주지 않는다""고 한 데이터를 수집하고 사용할 가능성을 시사
     * 구글은 일반적으로 검색 알고리즘이 어떻게 작동하는지에 대해 매우 비밀스럽게 행동하며, 구글이 선택한 방식은 웹에 의존하는 모든 사람에게 심오한 영향을 미침
     * 구글의 불명확한 태도와 표현이 혼란을 초래했으나, 내부 문서의 유출로 인해 구글의 검색 순위에 대한 생각을 일부나마 엿볼 수 있게 됨.

   Don't be evil. 얼마나 셀프로 악햇으면 남들도 악하게 돈 번다 생각하고 그런 모토를 거나했더니 역시

   유출된 Google Search API 문서 분석
"
"https://news.hada.io/topic?id=15096","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   호주 vivid 쇼 보러 갑니다

   일요일에 러닝, 자전거, 수영을 하는 작은 행사를 참가합니다~

   궁디팡팡 캣페스타 갑니다 ㅎㅎ

   다음주에 여행가느라 슬슬 준비하려구요.
   그 외에 시간 좀 나면 책도 보고 바다도 좀 보러가고 하렵니다.

   개발 외주 일정이 이번주 일요일 마감이라 바쁘게 일해야 할것 같습니다.
   전혀 어렵진 않은데 단순반복 노가다인데다가 웹으로 중학교 수학 학습 자료를 만드는 일이라 손이 많이 가고 신경쓸게 많네요

   책장에 자잘한 것들이 많아서 정리용 서랍을 3D 출력중입니다.
   BaBo 시스템이라는 재미난(?) 이름의 서랍인데요.
   https://makerworld.com/en/models/14125

   원하는 높이로 쌓을수 있고, 내부에 깔끔하게 정리가 가능합니다.
   Gridfinity 규격 어댑터도 있어서 좋아요.

   M3x8 나사만 있으면 되어서 주문했더니 2천개가 왔네요. ㅎㅎ
   이거 조립하고 정리하면 주말이 다 갈듯 합니다.

   여름휴가를 갑니다! 발리 옆 조그만 섬에서 일주일 푹쉬다 오려구요

   밖에서 맛난 점심 먹고 기운 내기!
   스벅에서 커피도 즐기기!
   그리고 집에서 즐거운 코딩!

   일요일에 하남에서 유도 생체 시합에 참가합니다.

   집근처 돈카츠집에 갑니다. 접근성이 좋고 가성비, 맛 좋아서 자주 가는 곳이네요.
   일욜에는 남은 오렌지로 마멀레이드를 만들 예정입니다. 속껍질 벗기느라 노가다 좀 할 것 같네요.

   혹시 실례가 안된다면 어딘지 알 수 있을까요? 저도 돈카츠 찾는 모험을 하고 있어서 궁금합니다!

   원글님껏도 궁금하지만, 최근에 가본 돈카츠 집중에서 괜찮은 곳이 있어서 소개해드립니다.
   쿠츠 : 고이짱 - https://naver.me/GMRv5Rjs

   신대방역 근처에 있는 금제라고 하는 곳입니다. 저온에서 튀겨내는 것이 특징이라 약간 수비드 느낌의 고기 식감을 느낄 수 있는 곳입니다. 합정쪽 추천을 드리면, 돈까스 광명이라는 곳을 추천드립니다. 사장님 마음대로 운영하는 듯한 투박함이 있지만 개인적으로 육향이 좋은 곳 중 하나라서 좋아하는 식당입니다.

   소개해 주신 곳 오늘 저녁에 가보려고 갔는데, 재료 소진으로 일찍 문을 닫았더라구요ㅠ 아쉽지만 다음 기회에 다시 도전하 보겠습니다

   보통 돈카츠 집들이 소진시 문 닫는 경우가 많아서 가능하면 오픈할 때 가시는 것을 추천드려요.

   새로 구매한 풀 알루미늄 키보드 리뷰 영상 찍기..!

   호 어떤 모델인가요? 궁금합니다

   GX87이었습니다 :)

   ""물질의 세계"" 마저 읽기
   그리스 육지거북 산책

   정도가 있군요!
"
"https://news.hada.io/topic?id=15171","Show GN: OpenRouter (오픈라우터): 통일된 LLM 인터페이스와 마켓플레이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: OpenRouter (오픈라우터): 통일된 LLM 인터페이스와 마켓플레이스

     * 수 백개의 AI 모델과 수십 개의 서비스 공급자들이 등장하고 있음.
     * 오픈라우터는 150개 이상의 모델 중 토큰 출력 성능 또는 가격을 중심으로 최적의 모델을 고를 수 있도록 데이터와 API, 채팅 인터페이스를 제공함.
     * 하나의 표준 API만 배우면 모든 모델을 사용할 수 있음.
     * 어떤 LLM이 어떤 앱에서 사용되고 있는지, 어떤 카테고리의 프롬프트에 어떤 AI 모델이 사용되고 있는지를 확인할 수 있음.
     * 동일한 LLM에게 보내는 프롬프트를 여러 서비스 공급자에게 로드밸런싱, 라우팅할 수 있음.
"
"https://news.hada.io/topic?id=15174","수백만 개의 모뎀 해킹 및 내 모뎀을 해킹한 사람 조사하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    수백만 개의 모뎀 해킹 및 내 모뎀을 해킹한 사람 조사하기

     * 2년 전 집에서 취약점 테스트를 하던 중 이상한 일을 경험함
     * AWS 박스에서 HTTP 서버를 띄워서 취약한 서버에서 파일을 가져오려고 했음
     * 모든 설정이 잘 된 것 같았지만, 취약점 테스트로 돌아가려는 순간 예상치 못한 로그가 나타남
     * 누군가 집 네트워크와 AWS 박스 사이에서 10초 뒤 동일한 HTTP 요청을 가로채 다시 보냈음
     * 이 트래픽은 접근 불가능해야 하고 중개자가 없어야 함
     * 즉시 생각한 것은 내 컴퓨터가 해킹되어 해커가 트래픽을 적극적으로 모니터링한다는 것이었음
     * iPhone에서도 동일한 현상이 발생하는지 확인했고, 알 수 없는 IP 주소가 컴퓨터와 iPhone의 HTTP 요청을 모두 가로채고 다시 보냈음
     * ISP, 모뎀, AWS 중 하나가 침해되었을 가능성이 높아 보였음
     * AWS가 해킹되었다는 터무니없는 생각을 없애기 위해 GCP에서 박스를 켜니 동일한 현상이 발생함
     * 유일한 가능성은 모뎀이 해킹되었다는 것이었지만, 공격자는 누구일까? IP 주소 소유자를 조회해보니 DigitalOcean에 속한 것으로 나왔음
     * 해당 IP는 최근 몇 년간 여러 피싱 사이트와 메일 서버로 사용되었음
     * 침해된 장치는 계속 작동 중이었기에 전원을 뽑고 상자에 넣어둠
     * Cox 가게에 가서 해킹당한 모뎀 반납하고 새 것을 받았음
     * 새 모뎀 설치 후 이상 행동은 멈췄지만 모뎀의 정확한 침해 방법은 알 수 없었음
     * 3년 후 보안 전문가 친구들과 휴가 중 이 사건을 이야기하게 되었고, 그들이 흥미를 갖고 조사를 시작함
     * IP 주소가 등록한 도메인을 살펴보니 대량의 알고리즘 생성 도메인이 있었음. C&C 서버임을 시사함
     * 공격자는 동일 IP에서 여러 악의적 활동을 수행했지만 3년간 정지되지 않음. 의도를 파악하기 어려웠음
     * 새 모뎀 역시 동일 모델이었기에 공격자가 다시 침투했을 가능성도 고려함
     * TR-069 프로토콜을 통해 ISP가 장치를 관리할 수 있다는 점에 주목함. 지원 도구 인프라를 공격하면 모뎀을 장악할 수 있을 것임
     * Cox 비즈니스 포털 JavaScript를 분석해 700개 이상의 API 경로를 발견함. 그중 장비와 고객 계정 접근 기능이 가장 많은 API는 accountequipment, datainternetgateway, account였음
     * 인증 우회가 가능한 취약점을 발견함. HTTP 요청을 반복 전송하면 무단으로 명령을 실행할 수 있었음
     * MAC 주소로 누구의 장비라도 직접 통신할 수 있음을 확인함. Cox는 수백만 명의 고객에게 서비스를 제공함
     * 장비 설정을 덮어쓰고, 라우터에 접근하며, 장치에서 명령을 실행하는 등 ISP 기술 지원팀과 유사한 권한을 얻을 수 있음을 입증함
     * 이는 선행 조건 없이 수백만 개의 모뎀 설정을 변경하고, 고객 PII에 접근하며, ISP 지원팀 수준의 권한을 얻을 수 있는 취약점임
     * 사고 시나리오는 다음과 같음
         1. API로 Cox 비즈니스 고객 검색
         2. UUID로 장비 MAC 주소, 이메일, 전화번호, 주소 등 고객 PII 획득
         3. MAC 주소로 WiFi 비밀번호와 연결된 장치 조회
         4. 임의 명령 실행, 장비 속성 변경, 계정 탈취
     * 취약점을 Cox에 제보했고, 6시간 내 API를 차단하고 인증 문제 수정을 시작함
     * 700개 이상의 노출된 API 중 상당수가 관리자 기능을 제공했고, 모두 동일한 권한 문제가 있었음
     * 이번 사례는 ISP와 고객 장비 간 신뢰 계층의 취약점을 보여줌
     * 내 모뎀이 정확히 어떻게 해킹되었는지는 여전히 궁금함. 공격자가 트래픽을 왜 재전송했는지도 이해할 수 없음
     * 관련 이론이나 의견 환영함

GN⁺의 의견

     * 보안 취약점: 이 기사는 ISP의 보안 취약점이 얼마나 심각한 영향을 미칠 수 있는지를 보여줌. 특히, 원격으로 장치 설정을 변경할 수 있는 기능이 악용될 수 있음.
     * API 보안: API 보안의 중요성을 강조함. 인증 우회와 같은 취약점은 심각한 보안 문제를 초래할 수 있음.
     * 사용자 데이터 보호: 고객의 개인 정보와 장치 설정이 쉽게 노출될 수 있는 위험성을 경고함. ISP는 이러한 데이터를 보호하기 위해 더 강력한 보안 조치를 취해야 함.
     * 기술적 이해: 초급 소프트웨어 엔지니어도 이해할 수 있도록 기술적 세부 사항을 설명함으로써, 보안 취약점을 탐지하고 해결하는 방법을 배울 수 있음.
     * 대안 제시: 이와 같은 문제를 해결하기 위해 더 안전한 네트워크 장비와 보안 프로토콜을 사용하는 것이 중요함. 다른 ISP나 보안 솔루션을 고려해 볼 수 있음.

        Hacker News 의견

     * Cox가 문제를 부정하거나 메신저를 공격하지 않고 책임감 있게 대응한 점이 인상적임. 버그가 무엇이었는지 후속 기사를 읽고 싶음.
     * ISP가 자체 모뎀이나 라우터 사용을 강제하는 상황이 불편함. AT&T 라우터를 해킹당할 가능성이 있지만 HTTPS 덕분에 다행임.
     * 훌륭한 기사와 조사였음. Nokia 라우터의 로컬 관리자 인터페이스가 제대로 인증되지 않는 것 같음. 특정 설정을 변경할 수 없었지만 페이지를 해킹해 변경할 수 있었음.
     * 많은 라우터가 수동 펌웨어 업데이트를 요구함. GL.iNet 라우터는 최근 RCE 취약점이 있었음. 펌웨어 업데이트와 SSH 접근 비활성화 등의 조치를 권장함.
     * 공격자가 HTTP 트래픽을 어떻게 가로챘는지 여전히 의문임. Cox가 펌웨어 버전을 확인하고 자동 업데이트를 통해 문제를 해결할 수 있을 것임.
     * Cox가 과거에 이 취약점이 악용된 적이 없다고 주장하지만, 신뢰하기 어려움. 네트워크가 허술함.
     * 큰 기술 회사에서 큰 취약점이 발견된 것은 충격적임. 기사는 훌륭하지만, 이 취약점은 용서할 수 없음.
     * 취약점을 보고한 사람에게 보상이 있었는지 궁금함. 그가 큰 공헌을 했지만, 아무런 보상을 받지 못한 것 같음. 이는 매우 모욕적임.
     * Cox가 과거에 악용된 적이 없다고 주장하는 이유는 로그나 감사 데이터가 부족했기 때문일 것임.
     * 기사 내용은 훌륭하지만, 결심한 공격자는 Cox 기술자로 위장해 접근할 수 있음. ISP는 원격 접근을 기본적으로 비활성화하는 설정을 구현해야 함.
"
