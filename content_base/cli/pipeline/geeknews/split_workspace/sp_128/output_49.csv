"https://news.hada.io/topic?id=6493","Wireit - npm 스크립트를 더 똑똑하고 효율적으로 업그레이드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Wireit - npm 스크립트를 더 똑똑하고 효율적으로 업그레이드

     * 구글 오픈소스(아직 알파단계)
     * npm run 에서 그대로 동작
     * npm script들 간에 종속성을 병렬로 자동 실행
     * 스크립트를 Watch하고 변경되면 지속적으로 재실행
     * 아웃풋을 로컬 및 GitHub Actions 에서 캐슁
     * 싱글 패키지, npm workspace, monorepo 에서도 동작
"
"https://news.hada.io/topic?id=6495","초보자를 위한 Axios vs Fetch","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         초보자를 위한 Axios vs Fetch

     * Promise 기반의 HTTP Client 인 두 API를 비교
     * 문법 비교 부터 JSONPlaceholder API를 호출했을 때의 차이점을 보여주며 설명
          + 에러처리/타임아웃/취소
     * 둘다 비동기처리지만, 속도는 fetch가 다소 빠름

   번역글 : https://velog.io/@eunbinn/Axios-vs-Fetch
"
"https://news.hada.io/topic?id=6432","가장 작은 크기의 단색 256x256 PNG파일, 어디서 봤을까? (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              가장 작은 크기의 단색 256x256 PNG파일, 어디서 봤을까? (2015)

     * 같은 단색(푸른계열)이라도 파일 크기가 103~1189byte로 차이가 있음
     * PLTE(팔렛트) 및 IDAT(이미지 데이터) 섹션을 어떻게 구성하느냐에 따라 다름
     * 왜 이런 최적화가 필요할까?
       → 온라인 지도의 바다 부분 파일에서 사용
       → OpenStreetMap은 103byte, Bing Map은 156, 구글지도는 178, Here는 1189
     * 클라이언트가 스케일링을 지원하면 최소화 시킬 수 있는 것은 69byte
"
"https://news.hada.io/topic?id=6452","칸 아카데미, 온라인 고등학교 Khan World School 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 칸 아카데미, 온라인 고등학교 Khan World School 시작

     * ASU(아리조나 주립대)와 연계하여 2022년 8월부터 프로그램 시작
     * 전 세계 학생 대상 풀타임 온라인 학교(미국 기준 Grade 9 대상)
     * 자기 주도형 온라인 학습과정
     * 일일 세미나 진행
     * 소그룹 튜토리얼을 통한 개인화된 지도(Inspired by Oxford Tutorial System)
     * 온라인 사이트를 통한 Peer Tutoring 가능
"
"https://news.hada.io/topic?id=6379","dasel - JSON,YAML,TOML,XML,CSV 데이터를 질의 및 수정가능한 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           dasel - JSON,YAML,TOML,XML,CSV 데이터를 질의 및 수정가능한 도구

     * Data-Selector : "".property[index]"" 형식의 셀렉터 문법으로 모든 데이터 포맷을 처리 가능
     * Select, Convert, Put, Delete 가능
     * 의존성 없는 Go 오픈소스
     * 리눅스/맥/윈 지원
     * jq/yq 보다 빠름
     * JSON, YAML, TOML, XML, CSV 지원
     * 셀렉터 문법
       .propertyName 프로퍼티 셀렉터
       .- 키/인덱스 셀렉터
       .[0] 인덱스 셀렉터
       .[] Put시에 Next Avaliable Index 지정
       .[*] 모든 인덱스
       .(<key>=<value>) 다이나믹 셀렉터
       .(?<key>=<value>) 검색
       .[#] length
       .[@] Type
"
"https://news.hada.io/topic?id=6387","The Marketplace 100: 2022","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       The Marketplace 100: 2022

   a16z가 3년째 선정하는 소비자 대상 마켓플레이스 스타트업&비상장 회사의 순위표
   → GMV(총 상품판매량)를 포함한 시장활동 점수와 트래픽 기준

하이라이트

     * 전례없는 회전율: 5개 IPO, 3개의 SPAC, 11개의 인수. 신규 진입 회사가 37개로 지난해보다 48% 증가
     * 1등인 Instacart가 남들이 따라오기 어려울 정도로 성장
     * 라이브쇼핑앱 Whatnot이 전년 동기 대비 가장 큰 성장. 73계단 상승해서 26위
     * ""코로나 바운스 백"" 효과로 소비자들이 New Normal에 적응하면서 티케팅, 식음료 및 교육 부분에서 신규 진입자들이 나옴
     * 일부 카테고리에서는 격리가 지속적인 습관을 만들어냄. 특히 게임 및 쇼핑/수집품 카테고리는 코로나 이전 기준선을 넘어서 지속적으로 성장 중
     * 보너스: 이 마켓플레이스 100 리스트에 없지만 NFT 마켓플레이스는 2021년에 폭발적으로 증가

지켜봐야할 4개의 카테고리

     * 티케팅과 체험 : SeatGeek, Viagogo, Peek, Fever, Gametime, TickPick, Tixr, Dice, Todaytix
     * 쇼핑과 커머스 : TCGPlayer, Whatnot, Chrono24, OfferUp, Curated, SidelineSwap, TopHatter, Vinted
     * 게임 : Valve, Epic Games
     * Web3 마켓플레이스 : OpenSea, Axie, Topshot, MagecEden, Solanart

리스트에 혼자 카테고리를 차지하고 있는 회사들

     * Zola (웨딩), Faire (Wholesale/도매), Raise(할인), Eaze(의료용 대마초), Cameo(연예인 참여 영상), Artlist(음악), AptDeco(가구)

Top 10

    1. Instarcart 식료품 쇼핑
    2. Valve 게임(스팀)
    3. SeatGeek 티켓
    4. Turo 교통(개인간 차량 공유)
    5. StockX 스트리트웨어
    6. Viagogo 티켓
    7. GOAT 스트리트웨어
    8. Teachers Pay Teachers 교육
    9. Zola 웨딩
   10. Styleseat 뷰티

     * a16z Marketplace 100 : 2020
     * a16z Marketplace 100 : 2021

   작년과 같이 인스타카트/밸브가 1,2위를 그대로 차지했네요.
   3등이었던 Vacasa는 SPAC 상장했고, 4등이었던 StockX가 5등으로 떨어지면서 13등이었던 SeatGeek이 3위로, 9등이었던 Turo가 4위로 올라왔습니다.

   놀라운건 Teachers Pay Teachers 가 신규 진입했는데 8위네요.
   선생님들이 다른 선생님으로부터 교육 자료를 살 수있는 마켓플레이스 입니다.
   7백만명의 회원중 85%가 미국의 초/중/고(PreK-12) 선생님들로 약 5백만개의 교육자료가 판매되고 있습니다.
   몇년째 같은 자료만 사용하는 선생님들이 많은데, 이런 거래장터는 훌륭한듯 하네요.
"
"https://news.hada.io/topic?id=6456","애플, 미국내에서 수리 셀프 서비스 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플, 미국내에서 수리 셀프 서비스 시작

     * 사용자가 애플 제품의 수리 매뉴얼/부품/도구를 구해서 직접 수리 가능
          + 현재 아이폰 12, 13, SE(3세대) 제품군만 가능
          + 부품 : 배터리, 스피커, 카메라, 디스플레이, SIM 트레이, 탭틱엔진
     * 교체용 도구들도 판매 : 툴킷, 커버, 접착 커터, 드라이버, Bit, 디스플레이 프레스, 가열식 디스플레이 제거 Fixture 등
          + 도구는 대여도 가능($49 내고 일주일간)
     * 미국부터 시작해서 유럽도 오픈 예정

   한국도 조만간 실행하지 않을까 싶네요.

   와.. ifixit 은 어쩌려나요

   와우.. 작정하고 제대로 하는군요
"
"https://news.hada.io/topic?id=6410","DALL-E 2는 어떻게 동작하는가는 어떻게 동작하는가?

    1. 텍스트와 시각적 의미(Semantics) 연결
       → CLIP 모델 이용 : 수억개의 이미지와 관련 캡션을 학습하여 해당 캡션이 이미지와 얼마나 관련되어 있는지를 학습
    2. 시각적 의미로 부터 이미지 생성
       → GLIDE 모델 이용 : 이미지 인코딩 프로세스를 반전 시키는 방법을 학습. 확산(Diffusion) 모델을 사용함
    3. 텍스트 의미에서 해당하는 시각적 의미로 매핑
       → Prior 모델 이용 : 이미지 캡션의 텍스트 인코딩을 해당 이미지의 이미지 인코딩으로 매핑
    4. 모든 것을 통합
       → CLIP 텍스트 인코더가 이미지 설명을 표현 공간에 매핑
       → Diffusion Prior가 CLIP 텍스트 인코딩에서 관련된 CLIP 이미지 인코딩으로 매핑
       → 수정된 GLIDE 생성 모델이 역확산을 이용해서 표현 공간에서 이미지 공간으로 매핑하고, 입력된 캡션내에서 의미 정보를 전달하는 수많은 가능 이미지를 생성

중요한 3가지

    1. DALL-E 2 는 확산 모델의 힘을 보여줌
    2. 최첨단 딥러닝 모델을 훈련하기 위한 수단으로 자연어를 사용하는 것의 필요성과 그 힘을 강조
    3. 웹규모의 데이터 세트에서 훈련된 모델에 대해 Transformers 가 최고의 위치에 있음을 재 확인

   DALL·E 2 공개
   DALL·E 로 해볼만한 것들
"
"https://news.hada.io/topic?id=6399","내가 받았던 최고의 기술 인터뷰 질문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          내가 받았던 최고의 기술 인터뷰 질문

     * MemSQL(지금은 SingleStore)에서 2013년에 받은 DB관련 프로그래밍 과제
       → ""키밸류 저장소인 Memcached 에 incr / decr 와 비슷한 형태로 mult 명령을 추가하세요. 1시간 드리겠습니다.""
     * 이 질문은 후보자를 3가지 유형으로 깔끔하게 나누기 때문에 훌륭한 기술 면접 문제임
          + 타입 0 : 실제 코드를 건드려야 하는 것에 놀라는 사람들. 실제로 여기까지 못올테지만, 뽑지 말아야 함
            → 그 당시 MemSQL은 C++11로 개발되어 있었기 때문에, C로 된 Memcached를 건드리는 것은 목적에 잘 부합했음.
          + 타입 1 : 문제를 보고 ""곱셈은 덧셈의 반복이니까, 기존꺼를 반복하면 될 것 같아! 근데 락을 처리해야하니까.."" 라는 사람들
            → 한참 헤매다가 작동하는 코드를 못 만들고 실패. 역시 고용되지 않음
          + 타입 2 : ""곱셈은 덧셈이 +를 하는 곳에서 *를 해야한다는 거 말고는 같아"" 라고 얘기하고 Copy&Paste 해서 + 를 *로 바꾸는걸 빠르게 해버리는 사람들
            → 이 그룹에 있는 사람은 고용될 가능성이 매우 높음
          + 최고의 후보자들은.. 시간이 많이 남았으므로, 산출물을 다듬고, 포매팅이 일관적인지 확인하고, 유닛테스트도 넣고, ""디자인 결정""들도 재검토 하거나 할 수 있음

결론

     * 이 프로그래밍 과제를 좋아하는 이유는 실제 프로그래밍의 축소판이기 때문
     * 대규모 코드베이스를 유지 관리할 때 완전히 이해못하는 코드나, 불필요한 관용구들 등이 있기 마련
     * 이 문제는 ""bool incr 을 int opcode""로 바꾸는 정답이 하나만 있기 때문에 인터뷰에 딱 어울림
     * 현재 두개의 산술연산 명령(incr/decr)이 있고, 이걸 세개의 명령으로 확장하는 것
     * 이 과제는 미자격 후보자를 걸러내고, 자격을 갖춘 후보자를 행복한 길로 이끌도록 잘 만들어진 문제

   해당하는 코드를 어떻게 빠르게 찾는지가 중요한 관전 포인트가 되겠네요.

   바닥부터 프로그램 하나를 다시 짜는 게 아니라, 이미 있는 코드(그리고 그것도 이미 잘 알려져 있고 널리 쓰이는 오픈 소스 프로젝트)에 기능을 추가하는 방식이라는 점에서 더 좋은 것 같습니다.

   HN엔 역시나.. 원래의 인터뷰 질문을 냈던 사람이 등판해서 AMA를 하고 있네요.
   https://news.ycombinator.com/item?id=31065143
"
"https://news.hada.io/topic?id=6421","귀도 반 로섬 : Web3는 불타서 죽어버리게 두세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     귀도 반 로섬 : Web3는 불타서 죽어버리게 두세요

   Web3 도메인에서 파이썬이 쓰일 일 있을까요? 라는 질문에 대한 답변
"
"https://news.hada.io/topic?id=6449","NFT 커뮤니티, 재미를 디자인하라.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          NFT 커뮤니티, 재미를 디자인하라.

  들어가며

     * NFT 구매의 다양한 특징 중 하나는 재미
     * 그리고 재미에 가장 큰 영향을 주는 것은 커뮤니티.
     * NFT와 NFT 커뮤니티의 다양한 재미 요소 리서치 포스팅

  요약

    1. 프로젝트 오픈
          + 로드맵을 통한 스토리텔링
          + 터부시되는 컨셉의 활용을 통한 호기심 자극 및 재미
    2. 홍보 및 AMA
          + 로드맵만이 아닌 세부 정보 제공을 통한 템포와 콘트라스트 조정
    3. 챗굴 for 화이트리스트
          + 시스템에 대한 이해
          + 이케아 효과를 통한 강성 홀더
          + 반복을 통한 개인의 성장
    4. 민팅 및 리빌
          + 차이를 통한 개성 표현
          + 가챠 시스템을 통한 랜덤성 기대
          + 수집형 게임과 같은 쉬운 입문과 어려운 완성
          + 꽝의 재활용
    5. 커뮤니티 활동
          + 디스코드 등 SNS 활동
          + 공동의 목표와 DAO를 통한 책임감과 참여
          + 소비 모델 설계와 토크노믹스
          + 작품에 대한 해석 공유(예술과 공감)
    6. IP 활용
          + BAYC 외 국내 사례 중심
    7. Web3로의 확장
          + P2E or X2E : 반복적으로 즐길거리 필요
          + Metaverse : 더 즐길 공간의 확보
          + ESG : 가치소비에 집중

  마치며

     * 기술의 진화는 체험의 변화와 소비 형태의 진화로 변화됨
     * 활자가 만들어지고 문학이 발달했으며, 비디오가 생기고는 드라마, 영화 등의 다양한 매체가 생겼습니다. 인터넷이 생겼을 때, 그리고 스마트폰이 생겼을 때, 모든 순간에 새로운 소비 형태가 나타났음.
     * 이런 소비 형태의 핵심에는 항상 감성, 즉 ""재미""가 포인트가 있었음.
     * WEB3로 바뀌는 현재 새로운 재미를 찾는 것이 블루오션과 미래먹거리를 위한 길이라고 생각.

  추가자료

     * NFT 커뮤니티, 재미를 디자인하라. (1) : 체험 디자인에서 구상할 수 있는 재미에 대해.
"
"https://news.hada.io/topic?id=6453","MIT 연구진, 종이처럼 얇은 스피커 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        MIT 연구진, 종이처럼 얇은 스피커 개발

     * 모든 표면을 오디오 소스로 바꿀수 있는 종이처럼 얇은 스피커
     * 반대 위상의 소리를 생성하여 액티브 노이즈 캔슬링도 가능
     * 저전력 / 초경량
     * 영화관/놀이동산에서 3차원 오디오 제공하는데도 사용 가능
     * 기존과 전혀 다른 방식으로 설계
          + 개별로 진동하는 초소형 돔(머리카락 몇개 넓이, 높이는 머리카락 굵기의 1/6인 15미크론)을 이용
          + 얇은 PET위에 레이저로 구멍을 낸 뒤 거기에 얇은 필름을 쌓고, 진공으로 만들고 열을 가해 부풀려 돔을 생성
          + 돔은 진동할 때 0.5 미크론 정도만 위 아래로 움직임
          + 각 돔은 한 개의 소리만 내므로, 가청 사운드를 내려면 수천개의 돔이 함께 진동해야함
     * 매우 간단한 과정이어서 벽, 자동차/항공기 내부를 덮는 벽지처럼 롤단위로 대량 생산이 가능
     * 비슷한 음압을 내는데 가정용 스피커가 1와트 소모할때, 100밀리와트 정도만 필요로 함(1/10)

   오...! 소리만 차단해주는 방충망이 가능해지는..?!
"
"https://news.hada.io/topic?id=6475","AWS/Azure/GCP 외에 알아둬야 할 클라우드 업체는?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AWS/Azure/GCP 외에 알아둬야 할 클라우드 업체는?

   누군가 SaaS를 첨부터 만든다면 알아둘 업체는 뭐가 있을까요?라는 HN의 질문에 대한 답들
     * Cloudflare : 가격 경쟁력과 빠른 기술적 대응
     * Hetzner/OVH : 클라우드는 아니지만, 빠르고 저렴한 Dedicated 서버
     * Oracle Cloud : 전송량 많을 때 좋음(Zoom이 사용)
     * Vultr/DigitalOcean : 저렴한 VM, managed DB와 K8s
     * Netlify/Cloudflare Pages : 정적 웹사이트
     * Fly.io : 빠르고 간편한 컨테이너 배포
     * Render
     * Alibaba Cloud
     * LInode
     * Kubernetes + Cluster API면 다양한 업체 선택 가능
       → AWS,Azure,GCP,Baidu,Alibaba,Hetzner,IBM,KubeVirt,OpenStack,vSphere..

   fly.io 정말 간편합니다. 커맨드 하나로 서버랑 DB 연결도 쉽게되고 자동으로 환경변수 세팅도 해줘요
"
"https://news.hada.io/topic?id=6383","DuckDuckGo, 검색결과에서 해적사이트 및 Youtube-DL 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DuckDuckGo, 검색결과에서 해적사이트 및 Youtube-DL 제거

     * The Pirate Bay, 1337x 같은 사이트들을 검색결과에서 삭제
     * URL 자체를 인덱스에서 삭제해서 어떤 지역/설정으로도 나오지 않음
     * 놀라운건, 불법자료가 없는 youtube-dl 공식 사이트도 인덱스에서 제거됨
     * 구글도 몇달전부터 해적 사이트들을 제거하기 시작했음(MPA와 협업)

   이 얘기가 있은 후 다시 Pirate Bay 와 Youtube-dl 이 검색되기 시작했습니다.
   일시적인? 오류였는지, 아니면 다른 의도가 있는지 모르겠네요.
"
"https://news.hada.io/topic?id=6422","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   그림 그리고 고양이랑 뒹굴뒹굴거리며 보낼 것 같아요

   이번 주도 보드게임 모임으로 주말을 시작합니다.
   요즘 가장 핫 하다는 카네기 와 아크노바를 돌려보려고 해요.

   그리고, 요 몇일 좀 느슨하게 일했더니 메일이 너무 많이 밀려서 인박스제로 작업을 좀 해야할 듯
"
"https://news.hada.io/topic?id=6405","미국 항소 법원, 웹 스크래핑이 합법이라고 재판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국 항소 법원, 웹 스크래핑이 합법이라고 재판결

     * ""공개적으로 접근 가능한 데이터를 스크랩하는 것은 합법(CFAA 위반이 아님)""
     * LinkedIn이 분석회사 Hiq의 스크래핑을 금지하기 위해 낸 소송에서 기존 판결을 재확인(2019년에 이미 패소)
     * 웹아카이브, 학계, 연구자, 저널리스트 들에게는 좋은 소식
     * 미국 법원은 이번에 수십년된 CFAA(Computer Fraud and Abuse Act,컴퓨터 사기 및 오용에 관한 법률)를 재검토
          + 이 위반을 컴퓨터 시스템에 ""무단으로 접근 권한을 얻은 사람"" 으로 한정함
          + 공공 웹사이트에는 '허가받지 않은'의 개념이 적용되지 않음

   한국에서도 웹스크래핑이 법적인 문제가 없는지 궁금하네요.
   경험 있으신분이 있다면 공유해주실수 있을까요?

   우리나라 규제상
    1. 개인신용정보
       이게 '신용카드'의 신용이 아닙니다. 개인의 금융관련 평판을 내릴 수 있는 자료(잔액, 거래내역등)을 본인에게 '조회'할 수 있도록 하는 서비스는 금지입니다. 본인신용정보관리업 허가를 받아야합니다. 근데 본인에게 조회할 수 없고, 세무신고처럼 자료로 그냥 사용되면 문제 없습니다. 음...?
    2. 웹페이지에서 크롤이나 스크래핑으로 원하는 정보를 얻더라도, 결제페이지를 우회한다던지, 데이터를 화면에서 제공/의도하는것 외에 획득하는 정보들은 모두 불법입니다. json으로 화면에 표시 되지않더라도 fe/be랑 왔다갔다 할텐데, 의도외 사용은 불법입니다. 법무부에서 등기 공짜로 떼다가 구속된걸로 뉴스 본거 같네요.

   뭐 2는 돈없는 금융사(보험/카드/증권사등...은행외)들이 여력이 안되서 구멍이 많아서... 보호차원에서 오히려 이해가 가는데... 1은 정말 삽질같아요. 1도 개인정보주권의 궤에서 의도는 이해가는데, 양태는 지금 하는 짓이 ActiveX 3.0? 같아요.

   댓글 달아주신분들 모두 감사합니다! 덕분에 많은 도움이 되었습니다.

   제가 구독하고 있는 뉴스레터에서 얼마 전에 비슷한 주제를 다뤘던 링크가 있어 공유드립니다.

   아래 rtyuiop님께서 말씀해주신 잡코리아 VS 사람인 사례와 함께 여기어때 VS 야놀자, 네이버 vs 다윈중개의 사례들에 대해서 정리되어 있습니다.
   https://stibee.com/api/v1.0/…==

   오 팩플 뉴스레터 좋네요. 링크 고맙습니다~!

   항상 감사히 보고 있습니다 (_ _)

   제가 알기로 제일 유명한 사례는 여기어때가 야놀자의 데이터를 크롤링한 사례입니다. 제가 이해하기로는 물론 공개 데이터였고 크롤링 자체에 문제가 없지만 (1) 서버 부하가 늘어나서 야놀자가 입은 피해와 (2) 동종업종 내의 두 브랜드이기에 이로 인해 야놀자가 입을 피해 등이 주요안건이었습니다. 아직 진행 중인 소송이고 기사마다 해석하는 방향성이 다르기에 직접 이것저것 읽어보시는 게 좋을 것 같네요.

   금융쪽에서는 마이데이터 시작 이후로 스크래핑이 금지되었습니다.

   https://news.einfomax.co.kr/news/articleView.html?idxno=4192027

   제가 아는 변호사분과 그쪽 이야기를 한 적이 있는데 그 때 기준으로는 ""일단 공개된 정보를 긁어 모으는 것 자체는 문제가 없는데, 크롤링을 방지하는 장치가 어떤 형식으로든 존재하면 그걸 우회해서 저장하려고 하는 순간 문제가 될 수 있다""였습니다.
   역시 법에서는 기술적인 것보다는 의도가 어땠냐를 보더라구요.

   이게 LinkedIn 에 들어있는 개인 프로필 정보라서 조금 쎄하기는 한데..
   공개적으로 나와있는 정보들 마저 스크래핑을 금지하기엔 무리가 있는게 맞는 것 같습니다.

   2021년 웹 스크래핑 현황

   LinkedIn에 public으로 공개된 정보도 많습니다. 하지만, LinkedIn이 가장 scraping하기 어려운 사이트 중 하나입니다. 하지만, 어떻게든 페이지를 수집하기 합니다. 창과 방패의 싸움이죠.
"
"https://news.hada.io/topic?id=6431","Coursera가 추천하는 초보자를 위한 데이터 분석 책들 : 2022","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Coursera가 추천하는 초보자를 위한 데이터 분석 책들 : 2022

     * Numsense! 수학 없이 배우는 데이터 과학과 알고리즘
     * 데이터를 다루며 배우는 파이썬
     * 빅 데이터가 만드는 세상 : 데이터는 알고 있다
     * 비즈니스를 위한 데이터 과학 빅데이터를 바라보는 데이터 마이닝과 분석적 사고
     * 데이터 스토리텔링 연습 : 연습 문제와 다양한 사례로 익히는 데이터 시각화 기법
     * The Hundred-Page Machine Learning Book:수식과 간결한 설명을 바탕으로 하는 핵심 머신 러닝
     * 벌거벗은 통계학 : 복잡한 세상을 꿰뚫는 수학적 통찰력
     * 대량살상 수학무기 어떻게 빅데이터는 불평등을 확산하고 민주주의를 위협하는가
     * Data Analytics Made Accessible by Dr. Anil Maheshwari
     * Artificial Intelligence: A Guide for Thinking Humans by Melanie Mitchell
     * SQL QuickStart Guide: The Simplified Beginner's Guide to Managing, Analyzing, and Manipulating Data With SQL by Walter Shields
     * Business unIntelligence: Insight and Innovation beyond Analytics and Big Data by Dr. Barry Devlin

   번역서가 나온 것은 번역서의 제목을, 아직 번역서 출간이 안된 것은 원 제목과 작가 이름을 가져왔습니다.
"
"https://news.hada.io/topic?id=6439","건강한 SaaS를 위한 40%룰 (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        건강한 SaaS를 위한 40%룰 (2015)

     * SaaS가 건강하게 성장하려면 ""연 성장률 + 수익률 = 40%"" 가 되어야 한다는 것
     * 즉, 1년에 40%씩 성장한다면 BEP만 맞아도 되고,
       20%만 성장한다면 20% 영업 마진이 나야 하며
       성장하지 않는다면 영업 마진이 40%여야 함.
       그러나 100%씩 성장한다면 60%씩 적자가 날 수 있음.
       비즈니스가 매년 10% 감소한다면 영업마진은 50%여야 함

   2-3달 전부터 알게된 사이트라 눈팅만하다가 처음 댓글답니다. 항상 좋은 글 공유해주셔서 감사합니다.

   2015년도 글이라 지금은 아마도 숫자가 좀 다를 수도 있겠지만,
   기본적으로 빠르게 성장한다면 수익이 좀 적게 날 수도 있고,
   느리게 성장한다면 수익을 더 많이 내야한다는 기본 원칙은 비슷할 듯 합니다.
"
"https://news.hada.io/topic?id=6434","성공적인 위험감수(Risk-Taking) 문화 구축을 위한 팁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   성공적인 위험감수(Risk-Taking) 문화 구축을 위한 팁

   Okta 공동창업자의 책 ""Zero to IPO"" 에 담긴 내용

기업가 정신을 가진 사람을 고용할 것(적어도 첫 100명의 직원까지는)

     * 처음 10명의 직원이 회사의 문화를 정의하고, 다음 90명의 직원이 그걸 굳건히 함
     * 물론 규모가 커질수록 심리적으로 더 보수적인 사람들을 데려오기 시작할 것
     * 하지만, 처음 100명의 직원이 만들어낸 문화는 직원수가 500, 1000명으로 증가해도 계속 유지될 것
     * 초기 사람들이 더 기업가적(Entrepreneurial)일 수록 그 기풍(Ethos)은 회사의 문화에 더 녹아들 것

프로젝트가 위험하다는 것을 팀에 알릴 것

     * Minted의 CEO는 ""이게 성공할지는 잘 모르겠어요. 하지만 재미나게 해봐요""
     * 상사가 성공하지 못할 것을 알고 있다면 자신감을 가지고 프로젝트에 임하게 됨

재미있게 만들 것

     * 휴가의 ""재미""가 아니라, 장난기 넘치고 개방적이고 모험심 가득한 ""재미""
     * 연구에 따르면 마인드셋에 장난기가 넘칠수록, 창의적 혁신이 더 일어남
     * 사람들에게 새로운 것을 시도하도록 지시할 때, 특정 결과를 산출하는 것 보다 ""탐색""과 ""발견""에 더 중점을 둘 것

프로젝트가 실패한 직원을 ""처벌""하지 말 것

     * 실패에 벌을 받는 문화는 창업자의 일을 더 어렵게 만듦
     * 사람들은 합리적인 자기 보호를 위해 나쁜 소식을 숨기기 시작할 것
     * 팀이 뭔가에 실패하면 비난하지 말고, 다음에 어떤 프로젝트를 줄지 생각할 것
     * 실패한 팀을 중요하지 않은(backwater) 프로젝트에 할당하는 것은 위험한 메시지를 주게 됨
     * 사람들은 성공이 보장되는 주목을 많이 받고 위험도가 낮은 프로젝트만 해야 한다고 생각하기 시작할 것
     * 점점 회사는 정말 혁신적이고 흥미로운 일을 그만두게 될 것

가드레일을 설정할 것

     * 당신과 당신의 팀이 감수해야하는 위험을 계산 해야하고, 프로젝트의 규모는 개인이나 팀의 경험에 잘 맞아야함
     * 프로젝트의 규모,예산, 일정에 대한 가드레일을 설정할 것
     * 진행 상황과 발견한 내용을 보고 받을수 있는 마일스톤을 설정할 것
     * 프로젝트를 종료해야 하는 상황에 대한 파라미터를 정의할 것

회고(Post-mortem)를 진행하고 배운것을 축하할 것

     * ""실패""한 프로젝트는 팀이 뭐가 잘 되었고 안 되었는지를 배우고, 회사 전체가 배울수 있는 인사이트를 도출하기 전까지는 끝난게 아님
     * 그게 Google X를 만들었던 Sebastian Thrun이 진행한 방식
       ""우리는 항상 사람들에게 실패는 배움에 관한 것이라고 말하고 싶었어요. 중요한 인사이트를 제공하는 뭔가를 배운다면 그것은 훌륭합니다.""

   너무 잘 읽었습니다. 감사합니다!

   듬 -> 듦

   운영자입니다. 작성하신 댓글마다 신고가 들어와서 확인하고 댓글 드립니다.
   긱뉴스의 사이트 이용법 의 ‘댓글 달기’ 항목을 참고해주시기 바랍니다.
   가능한 한 맞춤법만을 지적하는 것보다는 주제에 관련된 댓글을 달아주세요.
"
"https://news.hada.io/topic?id=6501","Microsoft 3D Movie Maker 소스코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Microsoft 3D Movie Maker 소스코드

     * 1995년에 공개했던 3D Movie Maker 의 코드를 오픈소스로 공개(MIT)
       → 캐릭터를 배치하고 액션/음악/효과/음성을 넣어서 3D 영화를 만드는 어린이용 저작도구
     * 빌드를 위해서 Visual C++ 2.0 개발 도구 필요
     * SWIG, C++, C, Assembly
"
"https://news.hada.io/topic?id=6438","Litestream - SQLite 스트리밍 복제 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Litestream - SQLite 스트리밍 복제 도구

     * 백그라운드에서 SQLite DB데이터를 S3, GCS, SFTP, NFS 등 다른 스토리지로 안전하게(API만 이용) 복제
       → WAL(Write-Ahead Log) 사용
       → replicate/restore/snapshot 기능 제공
     * Go 오픈소스. 맥/리눅스 바이너리 제공
     * 도커/쿠버네티스 및 Systemd/윈도우 서비스로 동작 가능
"
"https://news.hada.io/topic?id=6377","Ask GN: 코드리뷰를 할 때, '변경했어야 했는데 하지 않은' 것들을 더 잘 인지할 수 있는 자신만의 팁이 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask GN: 코드리뷰를 할 때, '변경했어야 했는데 하지 않은' 것들을 더 잘 인지할 수 있는 자신만의 팁이 있으신가요?

   이번 커밋 또는 PR 또는 MR 에서 일어난 ""변경""에 대해서 그 변경이 괜찮은지 아닌지 코멘트를 남기기는 쉽지만, 변경했어야 했는데 하지 않은 부분을 알아차리고 코멘트 남기기는 코드리뷰를 꽤 오랫동안 해왔음에도 불구하고 여전히 어렵게 느껴집니다. 저에게 굉장히 익숙한 코드베이스가 아니라면 더욱 그렇습니다.

   몇 가지 방법이 생각나긴 하지만 장치가 더 많이 있으면 좋겠는데요. 여러분은 어떻게 해보셨는지 궁금합니다.
     * 구현할 때: 나중에 함께 변경되어야 하는 부분은 테스트코드가 함께 커버할 수 있게 구현한다.
     * PR 작성할 때: PR 템플릿에서 reviewee가 고려할 만한 적절한 질문을 추가한다. (e.g., 이번 PR과 유사한 목적을 가진 이전의 PR이 있나요? 그 PR과 비교해봤을 때 이번 PR에서 혹시 빼먹은 부분이 있진 않나요?)
          + 그 코드베이스에서 '했어야 했는데 빼먹은' 일이 발생할 때마다 기록해두고, 그때마다 PR 템플릿에 해당 내용을 예시로 업데이트한다.
     * PR 리뷰할 때: 리뷰어가 위 질문과 유사하게 빠진 부분을 찾아보도록 리뷰 가이드에 추가한다.
"
"https://news.hada.io/topic?id=6455","Datasette - 개인용 데이터 웨어하우스 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Datasette - 개인용 데이터 웨어하우스 오픈소스

     * 다양한 종류의 데이터를 수집 & 분석하고 웹사이트로 퍼블리싱 하도록 도와주는 도구
     * 데이터 저널리스트, 과학자, 연구자등을 대상
     * SQLite 기반이며, macOS용 데스크탑앱 제공
     * 수집한 데이터를 JSON/GraphQL API등으로 제공 가능. 인터랙티브 프로토타입의 백엔드로 사용하거나 Observable/Jupyter 노트북등에서 사용 가능
     * 38개의 관련 도구 및 87개의 플러그인이 있으며 계속 늘어나는 중
     * Publish 기능으로 만들어진 결과물(인터랙티브 웹사이트)을 Heroku/Google CloudRun 및 Vercel, Fly.io등에 배포 가능

   나온지 좀 된 도구인데, 저도 좀 써보고 추천하려다 늦어졌네요.
   제작자인 Simon Willison이 처음에 소개한 글을 읽어보시면 좋습니다.
   Personal Data Warehouses: Reclaiming Your Data

   관련해서 제작자가 운영하는 Dogsheep 프로젝트에 보시면
   다양한 소스에서 SQLite로 데이터를 가져오는 것을 지원합니다.

   Twitter, GitHub, Apple HealthKit, Apple Photos, Google Takeout, Evernote, HackerNews, Pocket, Foursquare Swarm..
   이런 소스에서 데이터를 가져다가 맘대로 분석해서 뭔가 유의미한 결과물을 만들수 있게 지원해주는 도구입니다.

   개인 오픈소스 프로젝트라 조금 인터페이스가 열악하긴 한데, 다양하게 활용 가능합니다.
   제작자가 계속 관련해서 개선하고 이런 저런 용도로 사용한 글을 쓰고 있으니 같이 참고하세요
   https://simonwillison.net/search/?tag=datasette
"
"https://news.hada.io/topic?id=6385","오버엔지니어링 된 일본의 기계식 샤프들 [영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       오버엔지니어링 된 일본의 기계식 샤프들 [영상]

     * 부러짐 방지, 자동 지우개 인출, 심 회전, 0.2mm, 자동 심 인출..

   Toga는 계속 잘쓰고 있는것중 하나입니다...
   심 자동인출이.. 되면 참좋은데.. 회전만..ㅋㅋㅋㅋ

   Orenz 샤프는 알고 있었는데, 이렇게 모아보니 재미나네요.
   손글씨는 꽝이라 잘 쓰지는 않지만..
"
"https://news.hada.io/topic?id=6450","Shape Up: B2B SaaS 스타트업 Relate 팀의 제품 개발 프로세스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Shape Up: B2B SaaS 스타트업 Relate 팀의 제품 개발 프로세스

   Shape Up은 프로젝트 매니지먼트 소프트웨어와 이메일 HEY를 만드는 Basecamp 팀이 처음 고안한 제품 개발 프로세스다.

   영업 CRM SaaS를 만드는 스타트업 Relate 팀은 이 Shape Up 프로세스를 조금 변형해서 사용하는데, 본문에 나와 있는 대로 여러가지 특징(uniqueness)이 있다. 그중에는 아래 특징들도 포함된다:
    1. 제품 스펙을 쓰지 않는다. 그대신, 적절한 수준의 추상적인 형태와 모습을(=shape) 전달한다. High fidelity wireframe이나 prototype도 (거의) 하지 않는다. 사이클이 시작되면 Shaping 을 통해 만들어진 형태를 갖고 엔지니어들이 바로 코드를 쓰고, 이후 제품리드가 전체 사이클을 관리하면서 이슈에 대응한다.
    2. 총 4주의 사이클, 3주 간의 개발 주기와 1주일 동안의 쿨다운 주기를 갖는다. 쿨다운 동안에는 QA 등 3주 동안 만든 것들의 완성도를 높이는 과정을 거친다.
    3. 덜 개발하거나 다르게 개발한다. 무조건 많이 만드는 것이 좋은 것이 아니다. 고객의 문제를 해결하는 데 집중하여 어떻게 하면 가장 심플한 방법으로 해결할 수 있는지 고민한다.

   씸플. 이라는 키워드가 마음에 듭니다.

   Shape Up - 작은 조직이 훌륭하게 일하는 법

   저희 스타트업도 Shape up을 쓰고 있는데 몇몇 주의해야할 점이 있더라고요.
    1. 한 사이클에 많은 shape를 넣지 않는다. 욕심내면 기능당 개발자 한 명이 배정받게 되고, 자율성에 우선순위를 두는 개발방식이다 보니 오히려 혼자서 쉐이핑 (기획) 및 개발까지 전부 다 하게되는 사태가 벌어지더라고요.
    2. 빌딩 사이클 중간에 의사결정권자가 개입하지 않는다. 자율성에 우선순위를 둔 거다 보니 중간에 윗사람이 개입하게 되면 그 사이클은 망했다고 봐야 하더라고요. 개발할 Shape를 정하는 배팅 기간에 정말 충분한 논의가 의사결정권자와 이루어져야 합니다.

   저희 회사는 시행착오를 겪고 Shape up 개발 방식이 정착했지만 유의사항들 잘 안지키면 한 사이클 자체가 통으로 날라갈 수 있으니 해당 개발 방식을 충분히 공부해야하더라고요.
"
"https://news.hada.io/topic?id=6451","GraalVM 22.1 릴리즈 - 개발자 경험 향상, 애플 실리콘 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GraalVM 22.1 릴리즈 - 개발자 경험 향상, 애플 실리콘 지원

     * JDK11, JDK17 기반 빌드 포함
     * Native Image 향상
          + 퀵 빌드 모드 제공(컴파일 81%, 전체 43% 속도 향상)
          + 기본 빌드도 26% 더 빨리지고, 바이너리 사이즈도 작아짐
     * 애플 실리콘 빌드 제공(프리뷰)
          + 포함 : JVM with Graal Compiler, Native Image, JavaScript, Java on Truffle(Espresso)
     * Python
          + Frozen 모듈 지원으로 REPL 시작이 30% 빠르고, 40% 적은 메모리 사용
     * Ruby
          + TruffleRuby가 Foreign Exception 지원
     * JavaScript
          + GraalVM Enterprise 의 기능인 Node.js 앱을 위한 엔진 캐슁을 실험적으로 지원
     * R
          + Graphic 지원 향상
     * Java on Truffle
          + 여러 새로운 HotSwap 기능 추가
          + LLVM Java 라이브러리 macOS 지원
     * 도구와 개발자 경험
          + GraalVM 엔터프라이즈 에디션 설치를 쉽게
          + VS Code 확장에 Native Image Pane 추가
     * Truffle 언어에 TruffleStrings 추가
"
"https://news.hada.io/topic?id=6485","WatermelonDB - React와 RN을 위한 Reactive DB 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             WatermelonDB - React와 RN을 위한 Reactive DB 프레임워크

     * Lazy Load 지원으로 데이터 크기에 상관없이 빠른 앱 런치
     * SQLite 기반이지만 Fully Observable
     * 멀티플랫폼 : iOS, Android, Web, Node.js
     * Offline-first : 백엔드와 동기화
     * JS API로 다른 프레임워크에도 사용 가능
     * RxJS API 지원
"
"https://news.hada.io/topic?id=6437","트위터, 일론 머스크의 55조원 인수 제안을 수락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      트위터, 일론 머스크의 55조원 인수 제안을 수락

     * 이달 초에 일론이 제시한 $44b(주당 $54.2)인수 제안을 트위터 이사회에서 승인
     * 트위터 주가는 5.7% 상승한 $51.7로 마감
     * 일론 머스크의 트위터 지분 9% 매입 발표 전날 대비 40% 프리미엄이 붙은 것

   현금을 어찌 조달할지 궁금하네요. 주식 매매? 아니면 주식 담보 대출?

   HN에 댓글이 2800개 달렸네요. 이런 숫자는 오랜만에 보는 듯..
   https://news.ycombinator.com/item?id=31153277

   저도 트위터 10년 넘게 쓰면서 애정이 많은데, 참 많은 생각이 교차하네요.
   비상장으로 돌리고 좀 더 자유롭게 운영하는게 트위터에 더 맞을 것 같다는 생각과
   트위터 기존 사용자들은 과연 이걸 어떻게 받아들일 것인가 하는..
"
"https://news.hada.io/topic?id=6425","Cog : 머신러닝을 위한 컨테이너 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Cog : 머신러닝을 위한 컨테이너 도구

     * 머신러닝 모델을 프로덕션 사용가능한 수준으로 패키징 하게 해주는 오픈소스 도구
     * NVidia 기본 이미지 + 캐싱 + 파이썬 + 환경변수 기본값 등 Best Practice가 다 포함된 도커이미지를 쉽게 생성
       → CUDA/cuDNN/PyTorch/TensorFlow/Python 등을 버전 호환되도록
     * Pydantic을 통해서 OpenAPI 스키마를 생성
     * 모델 타입을 통해서 FastAPI 로 RESTful HTTP API를 동적 생성
     * 오래 실행되는 딥러닝 모델 또는 배치 프로세싱을 위해 Redis 기반 큐 워커 제공 (다른 것도 추가예정)
     * ML SaaS인 Replicate 용으로 만들어졌으나, 자신의 인프라에도 사용 가능
"
"https://news.hada.io/topic?id=6420","스티브 잡스가 지켰던 '회의 - 3S 미팅 원칙'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스티브 잡스가 지켰던 '회의 - 3S 미팅 원칙'

    1. Small List - 이상적 회의 인원은 3~5명 정도!
    2. Short Agenda - 회의 아이템은 3개 이내로!
    3. Short Length - 회의 시간은 30분 이내로!
"
"https://news.hada.io/topic?id=6480","Ask GN: 새로운 것 하나만 알려주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ask GN: 새로운 것 하나만 알려주세요

   남들이 모를만한 것인데 재미나게 얘기해주실 수 있는 것들 있지 않으신가요?
   유용한 유틸리티, 코맨드라인 팁, 알아두면 좋은 사실들, 그 외 사람들이 관심있어 할 모든 것들 다 좋습니다.
   한개씩만 적어봐주세요

   HN의 Teach me something new 글이 재미나길래 한번 따라해 봅니다.

   인하대학교의 인하는 인천 하와이의 두문자어라 합니다.

   스마트폰(ex. 갤럭시)에서 연락처 저장할 때, 해시태그 마크 ( #)를 앞에 붙이면 카톡에 반영되지 않아요.
   연락처는 저장하되, 카톡에는 올리고 싶지 않을 때 쓸모 있어요.
   ex. 홍길동 -> 연락처 + 카톡 (친구 자동 등록), #홍길동 -> 연락처

   유튜브 검색할 때 '(검색) 필터' 조건을 바꿔서 해보면 의외로 신선하거나 유용한 결과를 얻을 수 있더군요. 특히 '업로드 날짜'를 올해로만 넣어도 괜찮은 채널이나 영상을 찾는 경우가 많았습니다. 검색 결과가 거기서 거기라고 느껴지면 시도해보세요.

   Not AND 연산만으로 현대 컴퓨터에서 사용할 수 있는 연산들을 만들 수 있습니다! (아마도요. 밑바닥부터 만드는 컴퓨팅 시스템 재미있네요.)

   화이트보드에 누가 매직으로 써놔서 안지워질때
   지울수 있는거 사러가기 귀찮을때
   -> 화이트보드 마카로 덮어쓰기해서 지웁니다

   코멘트 팁입니다.

   간단하게 A/B 테스트 하고 싶으면
   //*
   Code A - Run
   //
   Code B
   ///

   /*
   Code A
   //
   Code B - Run
   ///
   처럼 할 수 있어요.

   여기서는 잘 안되는데, 요런 식이에요.
   https://gist.github.com/black7375/bf6273e256da73f00b79c0c42a8738fc

   Ajax라는 단어의 뜻을 영어사전에서 찾아보면, 지금은 쓰이지 않는 용법으로 [화장실]이라는 뜻이 있다고 합니다. 옛날 영국에서 Ajax라는 말은 ‘a jakes’를 익살스럽게 이르는 말이었고, ‘jakes’란 바로 변소 혹은 변기를 뜻하는 말이었다고 하네요.

   HN글에서 보고 아! 했던 것은 NATO 음성 문자 였습니다.

   Alpha, Bravo, Charlie, Delta, Echo, Foxtrot, Golf, Hotel, India, Juliet, Kilo, Lima, Mike, November, Oscar, Papa, Quebec, Romeo, Sierra, Tango, Uniform, Victor, Whiskey, X-ray, Yankee, Zulu

   자주 쓰는 것 몇개만 외우지 전체를 외울 생각은 안해봤던 것 같아요.

   한국어에도 있습니다.

   ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ
   기러기, 나포리, 도라지, 로오마, 미나리, 바가지, 서울, 잉어, 지게, 치마, 키다리, 통신, 파고다, 한강

   ㅏ ㅑ ㅓ ㅕ ㅗ ㅛ ㅜ ㅠ ㅡ ㅣㅐㅔ
   아버지, 야자수, 어머니, 연못, 오징어, 요지경, 우편, 유달산, 은방울, 이순신, 앵무새, 엑스레이

   1, 2, 3, 4, 5, 6, 7, 8, 9, 0
   하나, 둘, 삼, 넷, 오, 여섯, 칠, 팔, 아홉, 공

   포병들이 통신할때 헷갈리지 말라고 하나둘삼넷 하는걸 보니 갖은자가 생각나네요.

   옛날에 한자로 공문서나 계약서를 작성할때, 숫자가 혼동되거나 위조되면 안되므로 일부러 복잡한 한자를 사용하곤 했습니다.

   零 : 영, 壹 : 일 (一), 貳 : 이 (二), 參 : 삼 (三) 요런식으로..
"
"https://news.hada.io/topic?id=6498","SQLite를 Primary DB로 사용해보신 분?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SQLite를 Primary DB로 사용해보신 분?

   실제 프로덕션에서 SQLite만으로 DB를 구성해 봤는지에 대한 질문 (dqlite,rqlite 포함)
     * SaaS에서 월 수백만 히트까지는 문제 없이 사용 중. Litestream으로 지속 백업해서 프로덕션에서도 문제 없음
     * SQLite보다는 그냥 Postgres를 선택하는게 더 낫다는 댓글이 많음
     * SQLite를 쓰면 안되는 경우
          + 데이터와 어플리케이션이 네트웍으로 분리된 경우
          + 동시에 쓰는 writer들이 많은 경우
          + 데이터 사이즈가 280TB 보다 큰 경우

   조금 다른 이야기입니다만, SQLite는 로컬 캐시 목적으로는 정말 끝내주게 편하더군요.
   저는 메인 DB까지 SQLite로 사용해본 적은 없습니다만, 기존에 퍼블릭 클라우드의 관리형 RDBMS를 쓰던 제품에서 생각보다 DB 사용량은 적은데 괜히 비용만 많이 나간다는 이유로 로컬 환경의 SQLite로 마이그레이션한 사례는 옆에서 본 적이 있습니다.

   SQLite 자체는 문제는 없는데...요즘 AWS같은데서 Postgres 같은거 올리는게 어렵지 않다 보니 옵션에서 밀리는거 같아요.

   https://news.hada.io/topic?id=6438

   Litestream 관련 내용입니다.

   SQLite가 정말 좋고 편하긴 합니다만,
   작은 웹사이트나 히트가 많지 않은 SaaS에서나 가능하고, 자신의 상황에 대한 판단없이 무턱대고 선택하는 건 위험합니다.
   잘 알고 쓰자는 의미에서 링크를 올려봅니다.
"
"https://news.hada.io/topic?id=6446","GitHub, 짧은 URL용 Git.io 서비스 운영 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GitHub, 짧은 URL용 Git.io 서비스 운영 중단

     * 2011년에 GitHub 주소를 짧게 만들기 위해 만들었던 서비스
     * 올해 1월에 ReadOnly로 변경했고, 4/29부터 모든 주소들 연결 제거 예정
"
"https://news.hada.io/topic?id=6393","뱅크샐러드에서의 통합UI테스트 운용법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          뱅크샐러드에서의 통합UI테스트 운용법

     * 테스트코드 도입이 처음이라면, 통합테스트부터
     * 접근성 경험 개선 작업이 선행되어야
     * UI테스트를 생산성 도구로 먼저 사용해보기
     * 4시간마다 테스트 실행하고, 실패할 경우 4~8시간 안에 수정
     * 테스트는 가장 작은 기기에서 가장 큰 글씨로
     * 하는 김에 이벤트 로깅 테스트까지
"
"https://news.hada.io/topic?id=6401","아마존 앤디 재시의 2021년 첫 연례 주주 서한 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아마존 앤디 재시의 2021년 첫 연례 주주 서한 (번역)

   반복적 혁신을 위한 비결
    1. '빌더' (builder)를 채용해야 합니다.
    2. '빌더'의 팀을 가능한 독립적이며 자율적으로 만듭니다.
    3. 빌더의 팀에게는 빠르게 움직이는데 필요한 도구와 권한을 부여합니다.
    4. 낭만적인 믿음은 필요합니다. 하지만 헛된 희망은 아닙니다.
    5. 최소 애착 제품(MLP;Minimum Loveable Product)을 정의하고, 빠르게 반복합니다.
    6. 장기적인 관점을 갖습니다.
    7. 실패를 피하지 마세요.
"
"https://news.hada.io/topic?id=6417","Memray - 블룸버그가 공개한 Python 메모리 프로파일러 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Memray - 블룸버그가 공개한 Python 메모리 프로파일러 오픈소스

     * 파이썬 코드의 네이티브 확장이나 인터프리터 내부까지 메모리 할당을 추적하고, 메모리 사용에 관한 다양한 리포트를 작성
     * CLI 도구 또는 라이브러리로 사용 가능
     * 주요 기능
          + 샘플링이 아닌 모든 함수 호출을 추적
          + C/C++ 라이브러리의 네이티브 호출까지 처리
          + 매우 빨라서 속도 저하를 최소화. 네이티브 코드 추적은 조금 느리지만 필요에 따라 활성화/비활성화 가능
          + Flame 그래프 같은 다양한 메모리 사용량 리포트 생성
          + 파이썬 쓰레드 지원
          + 네이티브 쓰레드 지원(C확장의 C++ 쓰레드)
     * 이런 문제 해결에 도움
          + 메모리를 많이 쓰는 원인을 파악
          + 메모리 Leak 찾기
          + 코드에서 많은 할당을 일으키는 핫스팟 찾기
     * 리눅스만 지원

   EdgeDB 의 CEO가 스크린샷과 함께 장점들을 정리한 트윗
   https://twitter.com/1st1/status/1516859294896906241
"
"https://news.hada.io/topic?id=6384","Reddit, 댓글 검색 및 검색 기능 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Reddit, 댓글 검색 및 검색 기능 향상

   새 UI 적용 및 다양한 방식으로 검색 결과 향상

   국내 커뮤니티들은 대부분 있는 기능인데, 최대 사이트라는 Reddit이 여태까지 댓글 검색이 안되었어? 하는 생각이 들지만
   구글 검색이 죽어가고 있다 에서 봤듯이 다들 그냥 구글에서 레딧 검색을 하고 있었어서 불편한게 없었..
"
"https://news.hada.io/topic?id=6423","뉴스전문 스트리밍 서비스 CNN+ 런칭 한달만에 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   뉴스전문 스트리밍 서비스 CNN+ 런칭 한달만에 서비스 종료

   모회사인 워너미디어와 Discovery가 합병하면서 내려진 결정
"
"https://news.hada.io/topic?id=6392","당신이 지금 먹는 닭은 지난 50년간 크기가 364% 커졌다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   당신이 지금 먹는 닭은 지난 50년간 크기가 364% 커졌다

   관련 통계 및 이렇게 된 이유, 그리고 건강에 미치는 영향
"
"https://news.hada.io/topic?id=6382","Moreutils - 아무도 만들지 않을 것 같은 Unix 도구 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Moreutils - 아무도 만들지 않을 것 같은 Unix 도구 모음

     * chronic: 실패하지 않는한 커맨드를 조용히 실행하기
     * combine: 불린연산을 이용해서 두 파일의 줄 합치기
     * errno: errno 의 이름과 설명 보기
     * ifdata: 네트워크 인터페이스 정보 보기 (ifconfig의 출력을 파싱하지 않고)
     * ifne: stdin(Standard Input)이 비어있지 않을때 프로그램 실행
     * isutf8: 파일 또는 stdin이 UTF-8인지 확인
     * lckdo: 잠금 유지된 상태에서 프로그램 실행(여러개가 동시 실행되지 않게)
     * mispipe: 두개의 커맨드를 pipe, 첫번째 커맨드의 종료값을 리턴
     * parallel: 여러개의 잡을 동시 실행
     * pee: stdin 을 pipe로
     * sponge: stdin 을 파일에 쓰기
     * ts: stdin 에 timestamp 붙이기
     * vidir: 텍스트 에디터 내에서 폴더 편집
     * vipe: pipe내에 텍스트에디터 추가
     * zrun: 인자에 있는 파일을 자동으로 압축해제

   나온지 10여년된 것이고, 새로 나온 커맨드라인 툴들 글에서도 소개된 바 있습니다.
"
"https://news.hada.io/topic?id=6460","왜 회사들이 Heroku를 떠나는가(비용 제외)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       왜 회사들이 Heroku를 떠나는가(비용 제외)

     * 2010년 Salesforce에 인수된 후 꾸준히 하락중이고, 기술 수준이 정체됨
     * 이전하는 회사들의 기술적인 이유들 정리
          + 자원 관리 부족 : Dyno 타입이 몇개 없고, 오토스케일링이 제한적
          + 네트워킹 제한 : Static egress IP 기본 지원 없음(비싼 Heroku Private Spaces에서만 가능, 하지만 그것도 기능 지원이 별로임)
          + 리젼 제한 : 총 8개의 리젼밖에 없음(2개는 공유, 6개는 Private Spaces)
          + 잦은 Outages : 인프라 문제로 서비스 중지 되는 경우가 많음.

   최근들어서 outage가 오랫동안 유지되고 있는걸보면 너무 마음이 아픕니다...

   이 글은 Heroku의 경쟁 서비스중 하나인 Porter가 작성했다는 것을 염두에 두고 읽어야 합니다.
   Porter는 Heroku에서 자신들로 Migration 하는 서비스도 제공합니다.

   하지만.. HN 댓글에도 Heroku 꽤 오래썼는데 요즘은 정말 문제가 많아서 떠난 다는 얘기들이 보이네요.
   https://news.ycombinator.com/item?id=31183573
"
"https://news.hada.io/topic?id=6462","AI로 마케팅 콘텐츠를 만들고 관리하는 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AI로 마케팅 콘텐츠를 만들고 관리하는 방식

   1.미국 기업 리프

   → 영화나 드라마에 AI를 접목한 간접광고 제작 기술을 선보임
   → 이 회사의 간접광고 제작 기술을 ‘플레이서’라고 함
   → 이는 컴퓨터 비전, 머신러닝 기술로 영화나 드라마에서 간접광고가 등장하기에 좋은 위치를 탐지함
   → 예를 들어, 드라마에서 간접광고가 나올 만한 위치로 ‘탁자 위에 와인 병이 놓인 모습’을 발견하는 식
   → 해당 위치에 간접광고 상품을 사진처럼 생생한 3D 이미지로 넣는데 여기에 렌더링 기술이 쓰임
   → 이는 상품 이미지가 조명, 영화와 잘 어울리도록 표현하며, 간접광고 상품이 처음부터 그 장면에 있었던 것처럼 보이게 함
   → 리프는 시청자 취향, 비디오가 유통되는 플랫폼, 방송 지역, 방송일시 등에 따라 광고를 맞춤화함
   → 장면 내용까지 고려해 맥락에 맞춰 간접광고를 넣을 수 있음
   → 예를 들어, 두 남자가 식당 밖 의자에 앉아있는 장면이 있음. 이 장면에 빈 유리잔 두개가 놓인 작은 테이블이 있음
   → 미국 IT 매체 돗엘에이에 따르면, 플레이서 기술은 ‘해당 장면에 음료수 병이 간접광고로 어울린다’고 판단함
   → 또 ‘이 장면의 공간적 배경인 나라 어디서나 볼 수 있는 브랜드를 간접광고로 넣어야 한다’고 인지함
   → 등장인물들이 술을 안 마시면 맥주가 아닌 탄산음료 브랜드를 간접광고로 제안할 수도 있음

   2.미국 기업 카피.AI

   → AI 기반 카피라이팅 제작 도구를 제공함
   → 사용자가 단어나 문장을 입력하면 몇 초 안에 마케팅 카피를 만듦
   → 자연어 AI 알고리즘인 GPT-3를 여기에 활용함
   → 이 도구로 페이스북·구글·링크드인 등 디지털 광고 카피, 인스타그램캡션·게시글·해시태그·콘텐츠 아이디어 등 소셜미디어 콘텐츠, 슬로건 생성·제목 등 웹사이트 카피, 상품 설명·이점 등 전자상거래 카피, 블로그 아이디어·제목·개요·도입부·문장 다시쓰기 등 블로그 콘텐츠, 영업 카피 등을 만들 수 있음
   → 사용자는 카피.AI 도구에서 자신이 원하는 카피 유형을 고를 수 있음
   → 이어서 회사 이름이나 상품 설명을 한두 문장 입력함
   → 카피.AI 도구는 이를 토대로 10가지 카피를 한번에 보여줌
   → 예를 들어, 아이스크림을 주제로 한 인스타그램 캡션을 카피.AI 도구로 만들 때, 사용자는 게시물 주제에 ‘아이스크림(ice cream)’을 입력할 수 있음
   → 어조에 ‘사랑스럽게(lovely)’라고 쓰고, ‘카피 만들기(Create Copy)’를 누를 수 있음
   → 이때 카피가 ‘더위를 식히는 가장 달콤한 방법(The sweetest way to cool off)’, ‘어서요, 당신 아이스크림에 행복을 끼얹어요(Go ahead—splash some happiness on your ice cream)’와 같은 문장이 나옴

   3.독일 기업 애크로링크스

   → 기업 콘텐츠 제작을 관리하는 AI 소프트웨어를 선보임
   → 이는 언어 분석 엔진을 사용해서 기업 콘텐츠를 읽음
   → 콘텐츠 안에서 철자·문법·대화 어조 등에 문제가 있으면 이를 개선하도록 지침을 줌
   → 사용자는 애크로링크스 소프트웨어에서 콘텐츠 목표를 설정할 수 있음
   → 이 단계에서 단어와 구, 정확성, 포괄 언어 사용 요건을 지정할 수 있는데 이는 기업의 콘텐츠 제작 지침이 되기도 함
   → 애크로링크스는 콘텐츠를 살펴보고, 철자·문법·대화 어조 등에 문제가 있으면 따로 표시하고, 개선방안도 함께 제시함
   → 콘텐츠에는 점수도 매기는데 앞서 사용자가 설정한 콘텐츠 목표와 콘텐츠가 얼마나 잘 맞느냐’에 따라 콘텐츠 점수를 채점함
   → 애크로링크스 소프트웨어의 ‘사이드바’ 기능은 콘텐츠 철자·문법·스타일·명확성·대화 어조 등을 점검함
   → 예를 들어, 콘텐츠에서 회사 이름 철자를 잘못 쓰면 이를 바로 잡아줌
   → 불필요하게 긴 표현을 사용하면 간단하고 단순한 표현을 대신 제안함
   → ‘제정신이 아닌(insanely)’ 같은 단어를 쓰면 ‘이 표현이 모든 사람들에게 공손한 표현인가요?’라는 식으로 지적함
   → ‘Here is’라고 쓰면 덜 딱딱하게 들리는 문장으로 ‘Here’s’를 대신 제안함
"
"https://news.hada.io/topic?id=6471","카톡 이모티콘을 통해 바라본 PFP NFT의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      카톡 이모티콘을 통해 바라본 PFP NFT의 미래

     * NFT 거래의 절반 가까이를 차지하고 있는 PFP(Profile Picture) NFT
     * PFP NFT는 개성 표현 측면에서 카카오톡 이모티콘이 성장해온 길을 따라가고 있다.
     * 그렇다면 PFP NFT의 미래는 무엇일까?
     * 기존 이모티콘 시장과 PFP
         1. 유명 작가로 시작
         2. 명확한 취향과 선택지 제공 시작
         3. 토큰화와 결제의 편의성
         4. 기업의 유입
         5. 표현의 다양성 - 3D, 애니메이션, 인터랙션 등
         6. 개성과 밈 - mfers
         7. 쉬운 등록과 확장
         8. 그 다음은 구독 경제?
     * PFP NFT 미래는 PFP를 보조할 수 있는 NFT를 구성할 수 있는 Web3 SNS

   카카오톡 이모티콘 역사를 잘 설명해주셨네요. 재미있게 읽었습니다.

   글에서 나와있듯이 NFT의 핵심은 소유권이라고 했는데, 역시 글에서 언급한 대로 카카오톡은 최근에 소유권 개념이 약한 구독형 서비스를 시작했어요. 구독경제 시스템에서 NFT가 가질 수 있는 강점이 어떤게 있을 수 있는지 궁금하네요.
"
"https://news.hada.io/topic?id=6470","Istio, CNCF 프로젝트에 조인 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Istio, CNCF 프로젝트에 조인 지원

     * 구글, IBM, Lyft가 2017년 5월에 Istio 0.1 출시하고 5년
     * 같이 가는 프로젝트인 Kubernetes와 Envoy가 속한 CNCF에 들어가는 것이 맞다고 판단
     * Istio는 Google Cloud의 미래 핵심이며, 계속 지원할 것
"
"https://news.hada.io/topic?id=6409","기술의 끔찍한 실패들 : 20년 간 주요한 실패들 회고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     기술의 끔찍한 실패들 : 20년 간 주요한 실패들 회고

   지금이 기술 혁신의 시대일지도 모르지만. 그게 잘못된 제품 아이디어와 실패한 크라우드 펀딩이 가득하지 못하다는 이유도 아닙니다. 이 기사는 지난 20년 간 실패한 기술들을 회고합니다.
     * 2019년 MoviePass - 넷플릭스와 같이 극장 구독 모델. 월정액을 넣으면 극장에 무제한으로 갈 수 있었음. 지속불가능한 비지니스로 시장에서 퇴출됨.
     * 2012년 iOS6의 Apple Map - 호주에서 Mildura라는 도시로 가려고 하면 국립 공원으로 안내해서 많은 운전자들의 길을 잃게 만들었고, 최대 24시간 물과 음식없이 고립된 운전자들도 있었으며. 해당 지역에서는 전화가 통하지 않아 위험한 길을 건너야만 했었음. 호주 경찰은 이에 해당 구역이나 주로 가는 여행자는 앱을 쓰지 말라고 경고함.
     * 2014년 아마존 Fire 폰 - 킨들에서 가장 좋은 건 짜르고, 가장 나쁜 건 취하고. 가격을 싸게 만들어서 얼버부리려는 2014년에 나온 2012년 폰. 게다가 Android 생테계를 이용하지 못함. $700달러에 더 괜찮은 폰이 많으므로 누구에게도 추천하고 싶지 않음.
     * 2016년 삼성 갤럭시 노트 7 - 펑.
     * 2012년 구글 Nexus Q 미디어 스트리머 (Apple TV와 비슷한 종류의 기기) - 기기가 할 수 있는 게 없어서 출시가 연기됨. 스트리밍 할 수 있는 게 Youtube 동영상과 Google Play의 음악과 동영상 뿐.
     * 2018년 구글+ 서비스 종료 - 1억명의 사용자가 있었지만, 90퍼센트는 5초 미만의 세션만 가졌으며 사실상 잘못 클릭해서 들어간게 대부분을 차지했음. 서비스 종료는 50만명의 개인정보 유출이 알려지자마자 발표했음.
     * 2017년 스마트폰 VR - VR을 발전하긴 커녕 방해만 하고 있었음. 해당 기기가 나온 건 17년 기준으로도 오래 됐었지만 아무런 변화도 없었으며, 컨텐츠 라이브러리 품질은 끔찍했음. Gear VR은 나빴고, Daydream은 최악이었으며 Daydream은 지원 스마트폰 조차 한정됨. 그리고 둘 다 컨트롤러는 한 손에만 들 수 있었음. 양손을 트랙킹 하는 건 불가능. 결정적으로 : 소비자는 그걸 원하지 않았음.
     * 2010년 아이폰 4 신호강도 표시기 오류 - 핸드폰을 특정 방법으로 쥐면 수신바가 1칸 이상 감소하는 현상. 특히 검은 띠를 잡으면 4~5칸 떨어짐. 게다가 소프트웨어에서는 2칸만 표시해야하는데 4칸을 표시하는 경우도 있었고. 그래서 실제론 감도가 최악임에도 4-5칸이 나올 수 있었음.
     * 2013년 폰블럭, 모듈형 스마트폰 - 블록으로 조립할 수 있는 핸드폰. 소비자 반응은 열광적이었지만, 이를 현실로 만들지는 못했음.
     * 2014년 닌텐도 Wii U - 타사 지원은 불안정하고, 소프트웨어는 부족했고. 기기의 상대적인 성능이 뒤떨어졌으며. GamePad는 저번 세대의 장점인 모션 컨트롤을 훨씬 어렵게 만들었고. 출시 첫해에는 괜찮은 타이틀이 없었고, 일부 타이틀은 실망스러웠음. 그래서 닌텐도는 판매 예측치를 900만대에서 280만대로 수정할 수밖에 없었음.
     * 2017년 폭스파겐 디젤게이트 - 폭스바겐이 디젤 배기량 테스트를 통과하고, 차량의 연료 효율과 엔진 출력을 만족하면서 저렴하게 만들기 위해 디젤 배기량 테스트를 할 때만 인위적으로 소프트웨어를 조작하여 오염물질 배출을 줄이고. 실제 공도에서는 미국 매연 기준의 40배에 해당하는 매연을 뿜어대게 만든 사건.
     * 2010년 3D TV - 나온지 12년이 지났지만, 이젠 아무도 원하지 않음.
     * 2015년 구글 글래스 프로젝트 드랍 - 멋진 아이디어로 등장했지만 소비자용 제품이 나오지는 못했음.

   구글+는 2018년까지 끌었던게 가장 큰 실패 같아요. 좀 더 일찍 종료 했었어야 했는데

   펑이랑 디젤게이트를 보니 22년 사례로 gos가 나올 수도 있겠군요.

   테크놀로지 터키... 를 '기술 칠면조(...)' 라고밖에 안 읽히다가, 구글에 쳐보니 은어로는 극단적으로 또는 완전히 실패한 것, 특히 연극이나 영화. 라고 해서 끔찍한 실패들이라고 번역했습니다.
"
"https://news.hada.io/topic?id=6445","2022년 현재 SHA1 충돌은 얼마나 찾기 쉬운가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2022년 현재 SHA1 충돌은 얼마나 찾기 쉬운가요?

     * SHA-1 계산 속도
          + NVIDIA 3090($1499) : 22.6×10⁹
          + AMD RX6800($649, 가성비 훌륭) : 20.6x10⁹
     * 2017년 논문에 의하면 9x10¹⁸ 번 계산이 필요(110GPU/년)
     * 2020년 논문에 의하면 3.5x10¹⁸ 번으로 줄어듦
     * 이걸 AMD 기준으로 계산시
          + 1xGPU 5.36년, 10xGPU 6개월, 30xGPU 2개월(GPU가격만 $19,470이고 전기세 별도)
     * AWS에서 p3.16xlarge (해쉬레이트 135GH/s)를 빌리면 인스턴스당 $24.48/h
          + 이걸 3인스턴스로 계산하면 3달 걸리고 비용은 $176,044
     * 2017년에 110GPU/년 였던게 2020년엔 8GPU/년, 지금은 5.4GPU/년으로 줄어 들었음
     * Custom ASIC으로 하면 더 빨라질 수도 있음

   듬 -> 듦
"
"https://news.hada.io/topic?id=6477","Reloadium - Advanced Hot Reloading for Python","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Reloadium - Advanced Hot Reloading for Python

     * 파이썬 앱에 ""Edit and Continue"" 기능을 제공
     * 함수가 변경될 때마다 재실행
     * PyCharm용 플러그인 제공(다른 에디터도 지원예정)
     * Django / Flask 도 저장할 때마다 뷰/앱을 리로드 & 리프레시
     * SqlAlchemy 에서 함수를 재실행한 후 필요 없는 객체 생기지 않도록 DB변경을 롤백
     * Pandas 객체도 핫리로딩

   저는 이 프로그램 제작자입니다. 여기에 언급해 주셔서 감사합니다.
   호주에서 보내는 사랑!

   English:
   Reloadium creator here.
   Thanks for mentioning this here.
   Sending love from Australia!
"
"https://news.hada.io/topic?id=6483","프로그래머 이력서와 코딩 과제, 검토자는 무얼볼까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      프로그래머 이력서와 코딩 과제, 검토자는 무얼볼까?

   프로그래머 이력서와 코딩 과제를 '검토자' 관점에서 분석한 글
   이력서
     * 기술 활용 능력
     * 서비스 운영 경험(트러블슈팅 등)과 거기에서 배운 것

   기술 점수
     * 기술 점수 적지 마세요

   깃헙
     * 커밋 메시지 작성 능력
     * 협업에 어울리는 코드 습관(=컨벤션)

   코딩 과제
     * 필수 요구사항 구현 여부
     * 최대한 간결한 코드
     * 의사 소통 능력(=궁금한 점을 질문하기)

   뭐가 좋다 보단 뭐가 안좋다 위주로 나열되어있으면 더 좋지 않았을까 싶습니다. 대개 신입분들이 실수하는 부분은 쓰지 않아도 될걸 쓰거나 써야될 걸 조금 이상한 방식으로 적어서 문제가 생기는 것 같아서요. do and don't 스타일이 아니라서 개인적으로 조금 아쉽습니다.

   기술점수 내용 완전 공감합니다~

   오 정말 궁금했던 부분이었습니다.

   회사마다 다를 테지만, 참고할 만한 부분도 있겠다 싶어요. ^^
"
"https://news.hada.io/topic?id=6441","bore - 로컬호스트와 서버간에 TCP터널을 연결해주는 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 bore - 로컬호스트와 서버간에 TCP터널을 연결해주는 CLI 도구

     * 로컬호스트의 특정 포트를, 원격호스트의 특정 포트에 연결
       → NAT 방화벽을 바이패싱
     * localtunnel 이나 ngrok과 유사하지만, 간단한 설치 & 셀프호스팅 가능하고 딱 TCP트래픽 전달 기능만 제공
     * Rust 오픈소스. 맥/윈/리눅스 바이너리 제공
"
"https://news.hada.io/topic?id=6459","내 인생 전체를 하나의 DB에 담는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         내 인생 전체를 하나의 DB에 담는 방법

     * 자신의 모든 메트릭들을 수집해서 하나의 DB에 저장하는 서비스를 만들고 오픈소스로 공개
       → Ruby + TypeScript + Postgres
     * 100여개의 데이터 포인트를 수집 : 수면/운동/식단/소셜라이프/컴퓨터 사용량 및 날씨 등등
       → RescueTime, Foursquare, 날씨 API, Apple Health..
     * 수동으로 입력하는 데이터는 텔레그램 봇이 매일/주말 마다 질문을 보내서 데이터 수집
     * 다양한 질문에 대한 답변을 알기 위해 시작
          + 도시에 따라서 건강/생산성/행복도가 어떻게 영향을 주는가
          + 수면이 운동이나 행복에 미치는 영향은?
          + 날씨/계절이 삶에 미치는 영향은?
          + 지난 몇년간 어떤 트렌드가 있나?
          + 컴퓨터 사용시간, 업무 시간, 회의 시간이 개인생활에 어떤 영향을 줄까 ?

   https://news.hada.io/topic?id=6455 요거랑 결이 비슷한 느낌도 드네요

   이런 시도들이 꽤 여럿 있었는데.. 저는 몇번 시도하다 실패하긴 했습니다.
   원작자가 자신의 데이터를 정리한 사이트 https://howisfelix.today/ 맨 하단에도 적혀있는데
   많은 시간을 들여서 솔루션을 구축하는 것은 그 만큼의 가치는 없었다고 생각하고, 앞으로는 들이는 시간을 줄일꺼라고 하네요.
   하지만 이렇게까지 해서 만들어보고 데이터를 정리한것 자체는 의미있었을 것 같아요.
"
"https://news.hada.io/topic?id=6454","TextSynth - 무료 GPT-NeoX-20B 플레이그라운드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  TextSynth - 무료 GPT-NeoX-20B 플레이그라운드

     * FFMpeg, QEMU를 만든 Fabrice Bellard의 gpt2tc(GPT-2)를 이용해서 만든 SaaS
     * GPT-J 6B / Boris(프랑스어), GPT-NeoX 20B, Fairseq GPT 13B 등의 모델 사용 가능
     * 무료 플랜은 30분당 30Req, 1req당 최대 200개 토큰
     * 유료 플랜은 모델별로 입력/생성 토큰당 가격
          + GPT-NeoX 20B : 입력 토큰당 $0.0000014, 생성 토큰당 $0.000035

   이 HN에서도 Bellard가 SaaS를 시작했다고! 하며 놀라고 있군요.
   (제공하는 모델의 유용성은 GPT-3 등에 비해서 그다지 인상적이지는 않은듯 합니다만..)
   https://news.ycombinator.com/item?id=31175291

   이 개발자인 Fabrice Bellard 는 정말로 엄청난 사람인데
   예전에 QuickJS Javascript Engine - 작고 빠르고 임베드 가능한 자바스크립트 엔진 글에 달았던 소개를 복사해봅니다.

   ~~
   Fabrice Bellard 는 정말 괴물급 개발자.

   1989년에 LZEXE 개발

   1996년에 Harissa - Java Virtual Machine 이자 Java to C 코드 컴파일러

   1997년에 2진법 표기시 파이(π)의 특정 자리수 값을 알아내는 공식 발표.
   -> 앞자리를 전혀 계산하지 않는 방법으로 계산. 1조번째 자리는 ""1""
   https://en.wikipedia.org/wiki/Bellard%27s_formula

   1998년에 TinyGL 발표 - 작고 임베드가능한 OpenGL 구현체

   2000년에 FFMpeg 발표. 현재 우리가 보고있는 대부분의 동영상 플레이어가 사용중.

   2000년에 가장 큰 소수를 찾는 448바이트 C코드로 IOCCC 우승. 이 소수는 2016년까지 발견된 가장 큰 소수였음.

   2001년에 Tiny C Compiler 발표 - 초경량 C 컴파일러

   2002년에 QEmacs 발표 - 초경량 Emacs 클론. HTML/XML/CSS2 WYSIWYG 렌더링 및 수정가능 (자체 브라우저엔진 내장)

   2003년에 QEMU 발표 - 하드웨어 가상화 기능을 갖춘 CPU 에뮬레이터

   2004년에 TinyCC Boot Loader 발표 - 리눅스 커널을 직접 컴파일해서 부팅이 가능한 부트로더

   2005년에 DVB-T 시그널 생성기 발표 : 비싼송출기 대신 데스크탑에서 디지털티비 송출이 가능. 이건 소스코드 미공개

   2009년에 π 소수점 아래 2조 7천억자리 까지 계산해서 세계 신기록세움. 자기 데스크탑으로 131일 동안 계산했다고.
   -> 큰 숫자에 관심보다는 그냥 컴퓨터 프로그래밍 도전을 위해서 였다고.

   2011년에 JSLinux 발표. 웹브라우저에서 실행되는 Linux 발표.

   그외에도 JPG보다 압축률좋은 HEVC 기반 이미지 포맷 BPG (자바스크립트 디코더 제공해서 아무 브라우저에서나 사용가능)

   4G LTE/5G NR 베이스 스테이션을 PC기반으로 저렴하게 구현했고, 이건 자신의 회사인 Amarisoft 를 통해서 상품화

   하는 일마다 이게 어찌 한사람이 하는 일인지 놀라울 뿐인 사람.
"
"https://news.hada.io/topic?id=6443","GPT-3 같은 대규모 언어 모델의 API사용에 관한 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GPT-3 같은 대규모 언어 모델의 API사용에 관한 정리

     * (Hosted) Large Language Models
     * LLM은 어떻게 동작하는가
     * 왜 필요한가 : 어려운 문제 해결, 빠르고 쉬운 사용, 자원이 없는 회사들
     * 반대하는 이유는 : 비용, 모든 것을 해결하진 못함, 민감한 데이터, 과도할 수 있음, 나쁜 결과로 이어질수도
     * 툴과 플레이어들 : GPT-3 Playground, AI21 Studio, Hugging face, EleutherAI
     * 전망
          + 개발자들에게 새로운 가능성을 열어줌
          + 실세계 데이터에 적용
          + 파인 튜닝을 통해 정확도 향상
          + 비디오 & 오디오에 적용(DALL-E 2 같이)
          + 새로운 역할을 생성할 수도
          + 최적화 (LLM을 생성하는데 필요한 비용 및 계산능력을 줄임)
     * 예제, 사용하는 회사들 및 그외

   이 https://unzip.dev/ 는 저도 최근에 구독한 뉴스레터 인데요.
   특정 기술 주제에 대해서 이해하기 쉽게 잘 정리해서 공유하고 있으니 살펴보세요.
   구독하는 이메일 주소 입력창이 아주 독특하니까 꼭 구독을 한번 해보시는 것을 추천드립니다.

   구독했습니다. 감사합니다!
"
"https://news.hada.io/topic?id=6481","Luckysheet - JS 스프레드시트 라이브러리 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Luckysheet - JS 스프레드시트 라이브러리 오픈소스

     * 엑셀과 비슷한 기능 제공
          + 포맷팅, 셀/행/열 단위 조작, undo/redo/copy/paste 및 드래그앤드롭
          + Formula 및 펑션 지원
          + 필터 및 소팅
          + 피봇 테이블, 차트, 댓글, 협업 편집, 사진 넣기..
     * V3는 TypeScript로 재작성 중
"
"https://news.hada.io/topic?id=6390","Fast의 빠른 몰락에서 배울 수 있는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Fast의 빠른 몰락에서 배울 수 있는 것

     * 원클릭 체크아웃 스타트업 Fast가 4월 5일에 450명 전원을 정리해고. 그 중 150명이 소프트웨어 엔지니어였음
     * 상황 설명과 교훈들

무슨 일이 일어났나?

     * 2021년 1월에 Fast는 Stripe로부터 1200억원 시리즈B 펀딩 받음
     * 2022년 3월까지만 해도 직원들은 회사가 돈이 은행에 남아있고, 시리즈C를 준비하고 있다고 믿었음.
     * 하지만 단 6일만에 6천억원 가치였던 회사가 모든 운영을 중단해버림
     * 시작은 3/29일에 The Information이 ""Why Stripe’s ‘Fast’ horse is losing the one-click checkout race"" 라는 기사를 냄
          + Fast가 2021년에 겨우 7억원의 매출을 냈지만, 현금으로 월 120억원씩 태우면서 돈이 거의 바닥났다는 저주스러운 주장을 했음
          + 이 기사가 바이럴 되면서, 다양한 이벤트가 일어남
          + 30일엔 Fast가 대규모 정리해고를 할 예정이며, 1200억원 투자를 받기 위해 자신들의 가치를 5500억원으로 하향할 것이라고 추가 보도
          + 31일엔 Fast가 모건스탠리를 고용해서 구매자를 찾고 있다는 추가 보도
          + 4/1일엔 Fast의 초기 엔지니어가 그만두면서, 놀라운 능력을 가진 회사에서 ""믿을수 없는 일""들이 일어나고 있다고 비판
          + 4/5일에 Fast가 회사를 셧다운 하고 모든 직원을 내보낼 것이라고 발표
          + 직원들은 공식 발표 한시간 전에야 소식을 알았다고
     * Fast의 이야기는 펀딩을 넉넉히 받은 스타트업도 파산에 가까울 수 있다는 경고 신호
          + 회사가 무서운 속도로 자금을 소진하고 있는 동안에도 직원들은 주요 위험 신호(major red flags)를 알아차리지 못했음
          + The Information이 보도한 것 처럼 ""호화로운 특전, 높은 연봉 제안, 사인온 보너스, 호화로운 회사 행사""는 그 반대를 시사했음
               o 창업자 Domm Holland는 채용할 직원들과의 통화에서 Stripe의 펀딩 라운드를 거론하며 돈이 은행에 있다고 안심시켰으며,
               o 고용 제안서(Offer Letter)에서 회사 가치가 12조원에 이르는 내용을 포함하는 엑싯 & 펀딩 플랜을 얘기했음(그 시절의 비공개 가치는 7천억원 수준이었음)
               o Stripe의 지원은 채용 후보자들에게 큰 셀링 포인트였고, 일부 직원들은 끝내는 Stripe가 Fast를 인수할 것이라고 믿었음
               o 대부분의 직원은 Fast의 재무현황에 대해서 알 수 없었음
               o 게다가 작년에 호놀룰루, 덴버, 뉴욕에서 열린 행사나 Tampa 여행(대표가 NASCAR 참여 및 해당 도시와의 연계 행사), 폭증하는 직원의 숫자는 모든 직원들에게 회사가 하키스틱 성장을 하고 있다고 믿게 했음

Fast는 Big Tech와 경쟁했음

     * Meta, Google, Uber, Amazon, Apple, Microsoft 등 잘 아는 빅테크 회사에서 엔지니어/매니저/PM/경영진을 고용했음
     * 어떻게 수백명의 사람들을 고용했을까 ? 돈, 스토리텔링, 그리고 주식
     * Fast는 꽤 많은 기본 연봉을 지급했고, 훌륭한 얘기를 들려주었으며, 꽤 넉넉한 주식을 오퍼했음
          + 조인한 대부분의 엔지니어는 왜 원클릭 체크아웃 산업이 수조원대의 가치가 있는지를 알지 못했음
          + 빅테크 회사들보다 높은 기본급을 줬고, 이사들은 이 회사는 로켓이라는 열정적인 이야기를 했으며, 받은 주식들은 은퇴로 가는 황금티켓 처럼 느껴졌음
     * Fast의 기본급은 시장 최고수준이었음
          + 시니어 소프트웨어 엔지니어에게 $200~240K(2.5억에서 3억원) 및 완전 원격근무 가능
          + 미국뿐만이 아니라 유럽등에서도 같은 수준(€180-€220K)
     * 높은 사이닝 보너스가 엔지니어들에게 일반적이었음
          + 약 $20~50K(2500~6000만원) 수준의 1회성 사이닝 보너스
          + 이 규모의 보너스는 빅테크 기업에서도 잘 없고, 수익 안나는 스타트업에서는 더더욱 잘 주지 않는 것
          + 이 높은 사이닝 보너스가 Fast가 재무적으로도 잘 되고 있는 것 처럼 느끼게 했음
     * 부여된 주식들은 꽤 많았고, 인생을 바꿀수 있는 것처럼 보였음
          + 시니어 소프트웨어 엔지니어는 15000~80000주의 주식을 받았고, 4년의 베스팅 기간, 1년 Cliff(최소 재직 기간)
          + 회사가 12조원 엑시트 하는 시나리오를 보여줬음
          + 오퍼하면서 지원자들에게 이 기반으로 계산하는 스프레드시트를 보여줬음
               o $220K 기본급에 3만주 정도의 스톡옵션을 받은 사람은 12조가치가 되었을 때 약 $11.3M(138억원)이 됨
     * 주식가치 상승을 시각화한 자료가 많은 지원자들이 빅테크 회사들 대신 Fast를 선택한 이유였음
          + 빅테크 회사들은 주식가치 상승이 제한적이지만, Fast는 인생을 바꿀만한 수준으로 보여줬기 때문
     * 2021년말에 시리즈C 투자가 마무리 되면, 이 오퍼(연봉과 스톡)가 불가능하다는 얘기때문에 많은 지원자들이 제안을 수락했음

회사의 위험 경고들

     * 직원들에게 위험한 것들이 보였는지 물어봄. 신호는 많았지만, 너무 작아서 그때는 신경쓰지 않았다고
     * 하키스틱 커브(J커브) 성장 그래프가 사내에 공유되었지만, Y축이 직원수 였음
     * 경영진 및 시니어 직원들이 받았던 아주 작은 일일 판매량 수치는 첫번째 경고 신호였음
          + 내부적으로 판매량은 투명히 공개되었고, L6과 그 이상 직원들은 Fast Checkout 으로 판매된 상품들의 세일즈 요약 이메일을 매일 받았음
     * Fast는 2022년 1월부터 4월까지 매일 대부분 $300,000 미만의 매출과 $6,000 미만의 수익을 냈음
          + 하루에 $2000 정도만 번 날도 있음
          + Fast Checkout 버튼은 하루에 50만번도 안되게 노출되었음. 즉 초당 몇 리퀘스트 이하
          + 엔지니어들이 눈치챈 경고중 하나는 인프라 규모가 쓸데 없이 커서 비용을 많이 지출하고 있다는 것
          + 엔지니어들은 수익이 많이 안나니까 인프라를 축소하고 비용을 절감하자는 제안을 하기도 했음
     * 플랫폼에 큰 클라이언트가 없었음
          + 볼륨이 작은 고객들이 많으니, 작업할 것도 많고 인티그레이션이 느려짐
     * 세일즈 vs. 엔지니어링 에서 세일즈 팀이 이김
          + Fast의 CEO는 는 세일즈맨이었고, 빠르게 50명이 넘는 영업사원들을 뽑아서 큰 영업그룹을 조직
          + 이 그룹이 다수의 소규모 비즈니스를 끌어오고, 이걸 엔니지어들에게 연동하도록 지시
          + 하지만 작은 비즈니스를 연동하는 것은 여러 커스터마이징이 필요했고, 엔지니어들은 계약 전에 세일즈로부터 검토요청을 받지 못한 것 때문에 기분이 좋지 않았음
          + 기술파트에서는 CEO에게 이런 우려사항을 얘기하고, 더 큰고객에게 집중해서 커스터마이징을 줄이면서 큰 매출을 노려야 한다는 보고서를 내기도 함
     * 새 CFO가 고용을 동결하겠다는 발표를 하면서, 확실한 경고신호가 감
          + Venmo의 CFO였던 Robert Mitchell 은 2021년 12월 입사하자 마자 첫번째로 고용을 동결하겠다고 발표함
          + 이것은 고용 속도를 늦추겠다는 신호로 커뮤니케이션 되어서 1월부터 효과가 발생
     * 이런 경고신호에도 불구하고, Fast의 직원들은 TheInformation이 시리즈 기사를 발표할 때까지 파산을 예상하지 못했음
          + 펀딩이 지연되고 있을것이라는 추측만 공유
          + Okta의 기술VP인 Vicky Xiong이 1월에 SVP이자 Head of Engineering으로 합류하면서 엔지니어들은 잘 될것이라는 새로운 확신을 받음
     * 엔지니어링쪽도 연간 Burn Rate는 경고신호 였음 (누구든 계산했다면)
          + Fast의 모든 엔지니어는 시니어 또는 그 이상이어서 년간 $200K 이상의 연봉을 받았음
          + 2022년초 Fast에서는 150명의 엔지니어가 있었음
          + 즉 엔지니어 기본연봉만 1년에 $30M(360억원)이었음. 사이닝 보너스 제외하고
          + 엔지니어링팀이 사내에서 3번째로 큰 파트였는데, 비용은 3번째가 아니었을 것
          + 이 계산을 통하면 어떻게 Fast가 1년만에 $100M의 투자비용을 다 썼는지 알 수 있음
     * 공동창업자이자 COO인 Allison Barr Allen 이 갑자기 3월부터 조용한 것은 또 다른 경고 였음
          + 사내 커뮤니케이션 채널(이메일과 슬랙) 에서 전혀 보이지 않음
          + 그는 회사가 셧다운 되기 한달전인 3월 7일에 회사 명부에서 삭제되었지만, 이 회사의 구조 변경은 직원들에게 알려지지 않았음
     * 신규 입사자가 회사 셧다운 3주 전인 3월 13일부터 들어오기 시작
          + 신규 입사자가 있으므로 직원들은 회사가 정상으로 돌아가고 있구나라고 생각하게 됨
     * 진짜 경고는 셧다운되기 11일전에 나옴
          + 3월 25일 전사 미팅에서 CEO가 시리즈 C 펀딩이 딜레이 되고 있다고 공유
          + 직원들은 정리해고가 있을 것이냐고 질문했으나, 답변하지 않고 질답세션을 빠르게 종료
          + 4일 뒤에 The Information이 Fast가 문제를 겪고 있다는 기사를 냄
          + 이 이후에는 직원들은 기사에서만 정보를 얻을 수 있었고, 경영진으로 부터는 정리해고가 시작될때까지 아무런 정보 공유도 받지 못함

Fast의 현재 상황

   모든 직원을 정리해고 했지만, 모든 직원이 잡을 잃어버리는 것은 아님
     * 소프트웨어 엔지니어들은 많은 회사로 부터 Full-Remote 잡을 오퍼받고 있음
     * BNPL 회사인 Affirm이 Fast의 기술경영진들과 협상을 통해서 약 100명의 엔지니어까지 오퍼를 할 것으로 예상(오직 엔지니어 들만)
     * Fast Alumni(근무했던 직원들)에 대한 무드는 복합적임
          + Fast에서 일하는 것이 얼마나 놀라운 경험인지에 대해서는 다들 공감중
          + 직원들은 문화를 좋아했고, 직원의 행복을 최우선으로 생각했음
          + 어떻게 이렇게 갑자기 일이 터졌는지에 대해 회사의 리더십에 좌절하고 실망하는 사람들도 있음

스타트업 해고 패턴의 시작?

     * Fast의 정리해고가 비슷한 이벤트의 시작일까 ? 트렌드가 있는 것 같음
     * 작년의 Peloton 과 Hopin 정리해고 처럼

스타트업에 조인할 때의 어드바이스

     * 회사와 창업자에 대해 조사할 것
          + 회사의 이력과 이전의 Red Flag(위험신호)들이 있는지 확인할 것
          + Fast의 창업자 Dominic Holland는 이전 회사가 파산할 때 직원들을 문자로 해고하고 주요 개인정보들을 팔겠다고 협박한 적이 있음
          + Fast 초기에 그는 아프리카의 계약직 소프트웨어 엔지니어가 만든 프로토타입으로 펀딩받고 나서, 정당한 이유없이 해고 했음
          + 비밀스런 스타트업이거나 첫번째 창업자라면 힘들긴 하겠지만, 그래도 파서 조사해 볼 것
     * 숫자를 요구할 것
          + 회사의 Runway가 얼마나 남았는지, 번레이트는 월당 얼마인지, 매출은 얼마고 얼마나 쓰는지
          + 특히 시니어/이사 레벨로 조인한다면 이런 것을 공유하지 않는다면 위험 신호임
          + 왜 그런지 묻는다면, Fast 사례를 예로 들어서 얘기하면 됨
     * 핵심 비즈니스 지표 세트가 있고, 엔지니어들이 거의 실시간으로 이에 접근할 수 있는지 물어볼 것
          + 사용자 수, 매출, 회원 가입, 반복 사용자 수등
          + 그 대답이 ""no"" 라면 위험신호라고 볼 것. Fast는 이게 잘 정의되지 않았고 엔지니어들에게 잘 공유되지도 않음
          + 반대로 Skyscanner 같은 경우는 핵심 지표를 ""일 매출""로 잡았고 이를 항상 스탭들에게 공유 했음(모니터에 표시하고 이메일로 보내고)
            모두가 회사가 얼마나 버는지 알 수 있었고, 그들이 만든 기능이 이 숫자를 어떻게 변화시키는지 볼 수 있었음
            Skyscanner는 2001년에 창업해서 2009년부터 흑자가 되었고, 2016년에 유니콘이 되었음
     * 미래 매니저와 창업자를 리버스 인터뷰 해볼 것
          + 의문점들을 정리해서 직접 물어볼 것
     * 핵심 투자자들과 얘기해 볼수 있는지 물어볼 것
          + 왜 투자했는지를 물어보면서 정보를 얻게 될 것
     * 떠난 사람들과 얘기해 볼 것
          + 그 스타트업을 떠난 비슷한 포지션의 사람을 찾아서 얘기해 볼 것(링크드인을 통해 찾거나)
          + 왜 떠났느지를 물어볼 것. 놀랍게도 많은 사람들이 답변을 해줄 것임
     * 경영진이라면 VC 네트워크 등을 통해서 VC들에게 백채널 체크를 해볼 것
     * 만약 부여받는 스톱옵션이 휴지조각이 되었을때에 대한 계획을 세워둘 것
          + 그냥 연봉만 남게 되었을때 당신이 얻는 것은 무엇인지
     * 위험과 보상은 항상 연결되어 있다는 것을 명심할 것
          + 기본 연봉은 보상에서 위험이 없는 부분
          + 공개적으로 거래되는 주식의 경우는 덜 위험하지만, 공개된 주식도 자체적인 위험은 있음(주가가 떨어지면 보상이 급격히 떨어지는 것을 보게됨)
          + 비상장 주식은 훨씬 위험. 초기 단계일수록 더 위험하지만, 상승폭은 더 큼
     * 모든 스타트업들이 Fast처럼 운영하지는 않지만, 많은 스타트업들이 Fast와 비슷한 문제를 가짐
          + Fast가 $120M의 투자금을 $1M의 매출만 내면서 날려버린 희귀한 케이스이긴 함
          + 대부분의 스타트업들이 투자금을 소비하면서 다음 단계의 투자를 받려고 함
          + 단지 숫자를 키우는 것 만이 아닌, 수익성을 가지는데에 주의를 기울일 것.
            투자 시장이 어떻게 변하는지를 보고, 매출 성장이 느리다면 얼마나 펀딩받기 어려운 지를 알아야 함

   배울게 많네요, 장점과 단점 모두!

   한국신용데이터?

   여기 뭐 있나요?

   여긴 아무것도 없죠

   -deleted-

   어떤 상황인데요?? 직원이신가요?

   그렇군요!

   정리 및 공유 감사합니다. 저도 감사 인사를 남기기 위해 가입 했습니다.

   고맙습니다~! 종종 들려주세요!

   정말 잘 정리해 주셨네요. 감사하다는 댓글 달려고 가입했습니다ㅎ

   고맙습니다!
   종종 들리셔서 좋은 기사 추천 ▲ 과 댓글도 달아주세요. ;)

   실제 근무했던 직원들의 증언도 HN에 많이 올라왔네요.
   https://news.ycombinator.com/item?id=30947595

   주말에 올라온 스타트업을 떠나며... 글과도 엮어서 보시면 좋을 것 같네요.
"
"https://news.hada.io/topic?id=6395","자바스크립트 프레임워크 전쟁은 끝났다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          자바스크립트 프레임워크 전쟁은 끝났다

   그리고 오직 한명의 승자가 있다.

   참가자들: 프레임워크 간 전쟁은 JS 커뮤니티의 뜨거운 주제. Backbone, Sencha 등은 사라짐. jQuery는 놀랍게도 여전히 큰 커뮤니티가 있음. Angular 같이 잘 안풀렸던 것도 있음.

   jQuery: 가장 오래된 참가자. 브라우저 호환성을 고쳐주어 인기. 하지만 애플리케이션 확장 어려웠음. 오늘날엔 주류가 아니며 최선의 선택이 아님.

   AngularJS: 이미 LTS 모드이며 퇴역함. 프레임워크 생태계에서 큰 도약이었고 그리워하는 사람들 많음. 더이상 유지되지 않아 더이상 참가자가 아님.

   Angular:
     * React와 경쟁하기 위해 등장. AngularJS의 성능, 견고성 문제로 인해 많은 프로그래머들이 React를 부러워함. Angular는 AngularJS를 현대화하고 ES6 개선점을 활용해 React와 경쟁하기 위해 노력함.
     * 무거운 학습 곡선이 가장 큰 어려움. 많은 개념을 필요로 했음. AngularJS의 학습 곡선을 이어 받았지만 RxJS 혹은 계층적 종속성 주입(DI) 같은 새로운 어려움이 있었음.
     * 또 다른 우려는 많은 약속을 어긴 점. 예로, V2가 서버 사이드 렌더링(SSR) 페이지를 간단히 만들 수 있었지만 2022/2/24 현재 JS 없이 작동 불가능.
     * 가장 큰 문제는 파편화와 버전 업그레이드. 버전 업그레이드가 너무 어려워서 사용자들은 위험을 감수하지 않음. npm 사이트 통계에서 이것이 드러남.

   VueJS:
     * AngularJS보다 성능이 뛰어나고 Angular보다 안정적이고 쓰기 쉬운 개발자들에게 해답이었음. 템플릿 시스템의 Vue는 AngularJS와 매우 가까워서 AngularJS의 단순성을 유지하는 동시에 React로부터 힘을 얻음.
     * 하지만 VueJS는 버전 1과 2에 심각한 문제가 있었음. array를 잘 다루지 못했고, 저자들은 업데이트 알고리즘를 잘못 선택했던 것에 대해 자바스크립트를 비난함. Vuex 또는 Redux 같은 라이브러리에 의존적.
     * 이 문제는 버전 3에서 해결됨. 그러나 자신의 실수에 대해 타인을 비난하는 것은 커뮤니티에 어울리지 않았음.

   SvelteJS:
     * 성장하는 경쟁자. 큰 약속들을 하고 있음. 명령형 언어로 컴포넌트를 번역하는 것이 주요 장점이라고 주장함. 그들에 따르면 리액트의 선언문보다 낫다고 함.
     * 사용법은 간단. 다만 명령어 번역의 결과로 생기는 구성 요소는 보기만큼 예측이 쉽지 않음. 경우에 따라 변경 사항을 올바르게 감지할 수 없음. 이 경우 상태가 손상되어 view가 제대로 업데이트 되지 않을 수 있음. 이 문제가 많은 우려를 야기하여 과거 VueJS처럼 SvelteJS의 어떤 프로젝트도 정당화가 어려움.

   StencilJS:
     * 엄밀히는 프레임워크는 아님. 컴포넌트를 작성하고 다른 프레임워크로 변환 가능. 현재 Angular, React, Vue 및 Web Components로 변환 가능.
     * 다른 프레임워크의 코드와 비슷한 코드인가? 라는 질문을 던짐 (원문 참조)

   Mitosis:
     * 아마 들어보지 못했겠지만, 이 글을 쓰게 만든 이유. Angular를 만든 Misko Hevery가 만든 최신 프레임워크.
     * StencilJS와 같은 목적을 가짐. 컴포넌트를 수많은 프레임워크로 번역함.
     * 마찬가지로 다른 프레임워크의 코드와 비슷한 코드인가? 라는 질문을 던짐 (원문 참조)

   React:
     * 10년 이상 npm 저장소에 보관된 가장 오래된 프레임워크 중 하나. 많이 변했지만 대부분 과거 버전과 호환. 모든 변화는 더 나아짐. 어떤 이들은 hook으로 React 하는 것이 훨씬 더 좋은 프레임워크를 만들었다고 함.
     * 가장 좋은 품질은 hook이나 눈에 보이는 기능에 있는 것이 아닌 그 반대. JS 최신 표준 및 JSX를 적용함. 이는 더이상 프레임워크가 아님. 결코 아니었을 것. React는 표준을 위해 너무 열심히 노력한 결과 사용자 코드에서 스스로를 제거함.

   그래서 우승자는...
     * JSX. React이기도 하지만 React 뒤에 있는 철학. React 자체는 라이브러리. 다만 Preact나 React Native 등 많은 다른 라이브러리로 대체 가능. 자세히보면, StelcilJS 혹은 Mitosis는 React와 매우 유사하며 이는 우연의 일치가 아님
     * ""최고의 프레임워크는 사용자 코드에서 자신을 제거하는 프레임워크""
     * React는 JS와 JSX를 많이 활용. 사용자 코드는 React와 무관. 큰 수정 없이 동일한 코드가 다른 프레임워크에서 작동 가능.
     * 그래서 의심할 여지 없이 React가 프레임워크 전쟁의 승자.
     * 왜냐하면 사용자 코드 내의 프레임워크가 아니기 때문.

   중요한건 '프레임워크와 결혼하지 말라'는 밥아저씨의 말을 최대한 실천하여 코드를 작성하면 react든 vue든 angular든 재밌게 개발할 수 있지 않을까요

   marko js의 전망은 어떤가요?
   이베이에서 지원하는거라 최근에 관심이 생겼는데 원문에는 언급조차 없네요...

   React의 ""많이 변했지만 대부분 과거 버전과 호환"" - 저는 이 호환 경험을 많이 하지 못했습니다.
   Angular의 ""파편화와 버전 업그레이드"" - 하지만 이부분에서는 저는 부드러운 경험을 많이 했어요.

   JSX 는 framework 가 아니라 specification 으로 분류해야된다고 생각합니다. 하고자 하는 말은 알겠는데, 안해도 될 서론이 너무 길고 무엇보다 제목이 clickbait 입니다. 글 자체의 퀄리티를 스스로 격하시키는 문체를 쓰시네요.

   요약과 좋은 댓글 들에 감사드립니다~! 이런 얘기들이 다른 분들에게 많은 도움이 될것 같아요 ;)

   전체적으로 이상한 글이라는 생각이 듭니다.

   먼저 스벨트 부분입니다.
   원문을 보니, 배열을 업데이트할 때 array[0] += 1 이런 식으로 쓰면 업데이트가 안 되니까 문제라고 써놨는데요, 스벨트 공식 문서에서도 배열은 재할당해야 업데이트가 된다고 쓰여 있고, 애초에 리액트에서도 이런 식으로는 배열 업데이트가 안 되잖아요?

   VueJS 부분도요.
   Angular랑 비교하면서 Vue의 단점을 얘기하고 있는데, 작동하는 Angular 코드랑 작동 안 하는 Vue 코드를 갖다놓고는 Vue가 별로라고 말하는 게 무슨 의미가 있는 건지 모르겠습니다.

   전 타당한 비판이라는 생각이 듭니다. 재할당과 mutation의 차이는 초심자에게는 헷갈리는 부분인데, svelte vue 모두 자바스크립트와 비슷한 별도의 문법을 사용하고 있는 이상 예상대로 동작하지 않는 부분은 비판받을 만 하죠.

   특히 vue는 프록시를 통해 set이 될 때 상태를 업데이트하는 방식인데, 처음 보기에는 쉬워보이지만 함정에 빠질 여지가 많아서 그 부분을 비판하고 있는 것은 저도 깊이 공감합니다.

   리액트는 이런 문제에서 훨씬 자유로운게, 재할당으로는 상태 업데이트가 되지 않고, 명시적으로 setUpdate 함수를 호출하는 식으로 자바스크립트 표준 안에서 단방향 업데이트를 제공하니까 배열 중 일부만 변경하는 거랑 재할당이랑 헷갈린다든지 하는 문제가 생길 일이 애초에 없죠.

   좀 곁다리로 꼽사리 끼는 이야기입니다만, Vue 3에서는 저런 형태의 배열 업데이트를 reactive하게 지원하는데 본 글이 구버전의 Vue만 맹비난하고 대충 넘어간다는 생각이 드네요...^^;; 정작 리액트에서는 이런 업데이트가 되지 않는 건 결코 작은 단점이 아닐텐데, 그런 특징은 제대로 짚고 넘어가지 않는 느낌이 있네요.ㅎㅎ

   원문에도 많은 댓글이 달렸고 여러가지 문제를 지적하는 댓글들이 많더라구요.

   StencilJS과 Mitosis에 설명이 달린 '다른 프레임워크의 코드와 비슷한 코드인가?' 부분이 헷갈려서 원문을 봤는데 아무래도 저 두 프레임워크에서 사용하는 코드가 다른 프레임워크에서 본 것 같지 않나? 물어보고 있네요.

   아마 리액트와 코드 작성법이 비슷하다는 의미로 작성한 것 같습니다.

   VueJS에 대해서는 너무 야박한 평가네요..

   redux에 대한 의존성은 react도 절대 자유롭지는 않을텐데..

   사용자 규모면에서라면 리액트가 압도적으로 1위인건 맞는데,

   기술적인 측면에서 리액트보다 별로인 프로젝트라고 부르지는 못하죠.

   여기서 VueJs에 대해 주로 이야기하는 논점은 외부 라이브러리에 대한 의존성보다는 ""자신들이 발생시킨 문제에 대해 JS에 책임을 전가하는 태도"" 아닌가요?

   아무래도 vueJS에 대한 여론이 좋지 않은 건 사실이라고 봅니다.

   본문가서 읽어보시면 Vuex, Redux에 대한 의존성을 언급한 부분도 VueJS 2에서 발생한 문제를 해결하기 위해서는 Vuex, Redux 같은 라이브러리가 '필수'였다 라는 부분이구요.

   네 원문에도 여러 댓글이 이미 있는 내용이긴 한데

   복잡성이 증가하면 Vue든 React는 redux와 같이 상태 저장/캐싱 라이브러리는 모두 ""필수""가 됩니다.

   그러네 원문 VueJS는 이게 단점이고 react는 언급을 ""의도적""으로 안했네요.

   커뮤니티의 행태는 저의 입장에서는 별로 중요하지가 않아서요..

   React에서는 redux가 필수는 아닙니다. contextAPI나 useReducer 등을 사용해서 상태 관리를 할 수 있어서요. 이게 React가 Vue보다 낫다고 볼 수 있는 근거라고는 생각하지 않지만은요.

   네 ㅎㅎ 전체적으로 좋은 글은 아닌 것 같습니다.

   저자는 결론을 정해놓고 결론에 도달하기 위해 다른 프레임워크들을 까내리고 있네요.
"
"https://news.hada.io/topic?id=6411","Feathr - 머신러닝을 위한 엔터프라이즈급 고성능 피쳐 스토어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Feathr - 머신러닝을 위한 엔터프라이즈급 고성능 피쳐 스토어

     * 링크드인이 ML 피쳐 관리를 단순화하고 개발자 생산성을 향상시키기 위해 개발한 Scala + Java 오픈소스
     * Feathr로 할수 있는 것
          + Raw 데이터 소스(시계열 포함)에서 간단한 API로 피쳐를 정의
          + 모델 학습 및 모델 추론시에 이름으로 피쳐 가져오기
          + 팀과 회사에 피쳐 공유하기
     * Azure 와 협업하여 간단히 설치 및 실행 가능 (Jupyter 노트북), 또는 로컬에서 pip로 설치 및 실행
     * 예전 이름은 Frame
"
"https://news.hada.io/topic?id=6458","Snapchat, 첫번째 드론 Pixy 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Snapchat, 첫번째 드론 Pixy 공개

     * 스냅챗과 연결하여 버튼만 누르면 가볍게 사용가능한 포켓사이즈 드론
     * 4가지 촬영모드 : Hover(떨어져서 자신을 촬영), Orbit(한바퀴 돌기), Reveal(멀어지면서), Follow(따라다니기)
     * 풀 충전시 5~8회 비행가능
     * 비행 끝나면 손에 와서 착륙
     * 101그램, 4000x3000(12MP) 사진, 2.7k 30fps 비디오
     * $249 (듀얼 배터리팩 포함)

   스냅챗 세대에게는 괜찮을 것 같기도 한데.. DJI 드론 보다가 이걸 보니 너무 장난감 같기도 하고..

   오히려 그게 매력 포인트 같긴하네요. DJI는 일반 유저들이 사용하기엔 너무 각잡고(?) 공부하고 써야하는 느낌이라 ㅎㅎ
"
"https://news.hada.io/topic?id=6486","암호화폐 스타트업 월드코인이 벌인 기만극…피해는 누가 봤나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    암호화폐 스타트업 월드코인이 벌인 기만극…피해는 누가 봤나

   YC의 샘 알트먼의 참여, A16z 와 Khosla의 투자, 크롬오브를 통한 홍채 스캔 등으로 유명해졌던 Worldcoin의 현재 상태 정리

     ""스타트업인 월드코인은 공정하게 분배된 암호화폐 기반의 '보편적 기본 소득'을 주겠다고 약속했다. 하지만 지금까지 한 일이라고는 이런 약속을 미끼로 얻은 가난한 사람들의 생체인증 정보를 갖고 데이터베이스를 구축한 게 전부다.""
"
"https://news.hada.io/topic?id=6419","Column - 개발자를 위한 은행 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Column - 개발자를 위한 은행

   ""Financial services as Code""
     * 개발자들이 새로운 금융상품을 만들수 있도록 설립된 미국의 국가 공인 은행(Chartered)
     * 복잡한 미들웨어 없이 API를 통해서 연준(Federal Reserve)과 연계
          + 계좌간 이체, 새로운 신용카드 만들기, 대출 및 상환등을 API로 호출
     * Brex, Plaid, POINT, Oxygen, Hopscotch 같은 핀테크 업체들이 사용

   CEO인 윌리엄 하키는 PLAID의 공동창업자 였는데요. 1989년생으로 올해 32살입니다.
   HN의 글에 보니 Northern California National Bank 라는 은행을 인수해서 미국내 공인(Chartered) 은행기관이 된거라고 하네요.
   2019년에 개발 시작해서 이제 런칭한건데, 엔지니어는 단 7명!
   개발 및 은행 인수등 모든 비용은 창업자와 직원들이 낸거라고.. (쫌.. 멋지네요)
   https://news.ycombinator.com/item?id=31109170
"
"https://news.hada.io/topic?id=6440","CSS의 미래 : CSS Toggles","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         CSS의 미래 : CSS Toggles

     * 현재 비공식 초안이 나왔고, 크로미엄이 프로토타이핑 시작 예정
     * 체크박스/라디오 버튼 같은 DOM 객체의 상태와 CSS를 연결하는 메커니즘

html {
  toggle-root: lightswitch; /* 토글 생성. 0 (비활성화, 기본값) 과 1 (활성화)  */
}

button {
  toggle-trigger: lightswitch; /* 버튼 클릭시 토글*/
}

html:toggle(lightswitch) {
  /* lightswitch 토글이 활성화 되었을 때 적용할 스타일 */
}

     * 여러개의 토글 생성가능. 1개 이상의 활성화 상태를 가질 수 있고, 꼭 0/1 같은 숫자값이 아니어도 됨
     * 기본값은 0 이지만 오버라이드 가능
     * 한 엘리먼트가 toggle-root 이자 toggle-trigger 인 것도 가능
     * toggle-visibility 를 통해서 토글 값에 따라 엘리먼트 보이기/숨기기 가능
     * toggle-group 으로 그룹핑 가능(탭 인터페이스에 유용)

   라디오 버튼을 이용해서 자바스크립트없이 css만으로 탭메뉴 만드는 방법이 있는데 이게 생기면 더 쉬워지겠네요.
"
"https://news.hada.io/topic?id=6465","Azurite - Azure Storage API 호환 서버 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Azurite - Azure Storage API 호환 서버 오픈소스

     * Node.js 기반으로 Azure Storage를 로컬에서 사용 가능한 에뮬레이터
     * MS가 직접 개발하여 대부분의 커맨드를 그대로 지원
     * V2는 JS로 수작업 개발했고, V3는 TypeScript Server Code Generator를 이용(Azure SDK가 사용하는 Swagger를 약간 수정)
     * 윈/리눅스/맥
"
"https://news.hada.io/topic?id=6469","GitHub, Git.io 주소들 Read-Only로 유지하는 것으로 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GitHub, Git.io 주소들 Read-Only로 유지하는 것으로 변경

     * 서비스 운영중단을 고지했으나, 논문 및 출판서적에서 링크를 사용하는게 있어서 읽기 전용으로 유지하는 것으로 변경
     * 수정은 불가하며, 스팸 또는 404 링크들만 제거할 예정이라고

   GitHub, 짧은 URL용 Git.io 서비스 운영 중단
"
"https://news.hada.io/topic?id=6416","QEMU 7.0.0 공개공개

     * x86 : Intel AMX 지원
     * RISC-V : KVM 지원, ratified Vector Extension 1.0지원
     * ACPI ERST를 이용한 게스트 이벤트 로깅
     * 그외 ARM, PowerPC 관련 업데이트등 2500+개의 커밋

   긱뉴스에 QEMU 와 FFMPEG 글 올라올 때마다 제가 링크하는 예전 댓글
   FFMPEG, QEMU, JSLInux, QuickJS 등을 만든 Fabrice Bellard에 대한 소개
"
"https://news.hada.io/topic?id=6473","구글, 흑백 이모지 폰트 Noto Emoji 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글, 흑백 이모지 폰트 Noto Emoji 공개

     * 색을 제거한 모노크롬 형태라 마음대로 색을 입혀서 사용
     * 가변글꼴(Variable)이어서 light/bold 등 지정 가능
     * 3663개의 이모지를 흑백에 맞춰서 다양하게 변형
          + 국기는 2자리 약자로 표시 : KR,US
          + 사람을 나타내는 이모지는 예전 blob(블롭, 얼룩 모양)로

   긱뉴스 웹사이트에도 Noto Emoji 폰트를 적용했습니다.
   글자만 있는 사이트라 컬러 이모지가 부담스러웠는데 딱 좋네요.
   😀😃😄😁😆😅😍🥰😘

   엄청 쓸만해보입니다.
   정보 감사합니다!
"
"https://news.hada.io/topic?id=6386","KAFKA 한국 사용자모임 4월 14일 밋업 발표자료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     KAFKA 한국 사용자모임 4월 14일 밋업 발표자료

   2022년 04월 14일 진행

   Speaker
     * 정주홍: Lag 없는 실시간 데이터 파이프라인을 위한 아키텍처 개선기
     * 최중호: MirrorMaker2 소개
     * 이동진: Introducing KRaft: Kafka without Zookeeper

   발표영상
     * kafkakru 올라올 에정....;;;

   오 요즘 페이스북을 안했더니 이런 그룹도 생겼군요!
   슬랙이 있으면 좋겠지만, 페이스북 가입해야겠네요 ㅎㅎ
"
"https://news.hada.io/topic?id=6407","2022년 테크 업계 번아웃 실태 보고 (번역글)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2022년 테크 업계 번아웃 실태 보고 (번역글)

     * 번아웃의 의의
     * 번아웃의 4가지 증상
         1. 감정 소모, 활력 고갈
         2. 무능감
         3. 냉소
         4. 비인격화 (분리, 소외감, 자아 상실) / 심리적 무감각
     * 매니저와 회사를 위한 조언
"
"https://news.hada.io/topic?id=6478","Fleet - Rust용 빠른 빌드 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Fleet - Rust용 빠른 빌드 도구

     * Cargo 보다 최대 5배까지 빠른 빌드 지원
       → sccache, lld, zld, ramdisk 등의 Rust 도구를 사용하여 빌드를 최적화
     * 현재는 rustc nightly 만 지원
     * 맥/윈도우/리눅스
     * GitHub CI/CD 연동 지원
"
"https://news.hada.io/topic?id=6468","구글 검색, 개인 식별 정보(PII) 삭제 요청 가능한 정보들 확대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글 검색, 개인 식별 정보(PII) 삭제 요청 가능한 정보들 확대

     * 검색 결과에서 신원도용/금융사기 등에 악용될 개인 식별 정보들 삭제 가능
     * 기존의 은행계좌/신용카드 번호에 추가로
          + 대한민국의 주민등록번호, 미국의 사회보장번호 같은 신분증 번호
          + 자필 서명이미지, 신분증 문서 이미지
          + 개인 연락처 정보(실제 주소, 전화번호, 이메일 주소)
          + 민감한 개인 정보를 포함하는 제한된 공식 기록(예: 의료 기록)
          + 로그인 사용자 인증 정보(기밀)
     * 신상털기 콘텐츠 삭제도 다음 사항들이 있다면 요구 가능
          + 연락처 정보가 있고
          + 명시적 또는 암시적 위협이 있거나 다른 사용자로 하여금 타인에게 해를 끼치거나 누군가를 괴롭히도록 유도하는 명시적 또는 암시적 문구

   옵션 변경에 대한 공지 글 : New options for removing your personally identifiable information from Search
"
"https://news.hada.io/topic?id=6413","Emacs Configuration Generator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Emacs Configuration Generator

     * Emacs가 접근하기 어려운 가장 큰 이유는 ""닭과 달걀"" 문제.
       → 최대한 활용하기 위해서는 Emacs (Lisp)을 이해해야 하는데, Emacs Lisp을 이해하려면 Emacs의 기본사항을 이해해야 함
     * 그래서 일반적인 제안은 잘 설정된 것을 가져다 쓰는 것인데, 이 사이트는 사용자가 원하는 기능을 선택해서 설정을 만드는 방식을 취함

   저는 아직까지 직접 설정해서 쓰고 있는데, doom을 한번 사용해볼까 생각이 드네요. 추가한 함수랑 설정을 방금 대충 세어보니 1500라인 정도 되네요.

   필요한 패키지를 찾아서 하나씩 설정하는 재미가 있는데, 혼자 쓰는거라 설정 파일 관리를 등한시하다보니 커질수록 관리가 잘 안 되는 문제가 있어요. doom 한번 써보고 싶네요. 지금은 doom modeline과 doom theme만 쓰고 있어요.

   들어가서 좀 써봤는데 최소한 use-package 를 썼으면 좋겠네요..

   use-package가 진짜 편하고 잘만들어졌는데 말이죠..ㅎㅎ

   preconfiguration에는 doom이랑 centaur가 젤 많이 쓰이는것 같네요..

   이 두가지 모두 여러 모듈을들 지원하고 본인이 필요한것들만 사용하게 설정 가능하죠..

   저는 2000라인짜리 10년 묶은 이맥스 설정 쓰고 있었는데, doom 한번 써보고 그냥 doom으로 넘어 왔습니다.

   이맥스가 플랫폼마다 성능이 제각각이고 너무 오래된 녀셕이라 레거시 지원 코드가 너무 많고 좀 복잡한 철학으로 구현이 된것 말고는 evil 이랑 같이 쓰면 개인적으로는 vim보다는 좋은거 같아요.. (vim 유저들께 어그로 끌어서 죄송합니다...)

   normal mode로 올 때, 한글 입력이 유지되던게 번거로웠던 기억이 나네요. 지금은 어떻게 해결됐는지 모르겠어요. emacs 와 evil 모드를 사용하면 이런 문제가 없어 편하게 사용하고 있습니다.

   커스텀하면 가능합니다.
   (use-package evil
   :commands evil-mode
   :hook ;; For IME
   (normal-state-entry . ime-to-en )
   (insert-state-entry . ime-to-prev)
   (emacs-state-entry . ime-to-prev)

   :init
   ;; Natural IME
   (defvar prev-input-method current-input-method ""Remember prev input method"")
   (defun ime-to-en ()
   (setq prev-input-method current-input-method)
   (set-input-method ""ucs""))
   (defun ime-to-prev ()
   (set-input-method prev-input-method))

   (evil-mode 1)
   )

   같은 식으로요.

   붙여넣기 하니 코드 인덴트가 깨지는데, 저는 저런식으로 커스텀해서 쓰고 있어요.

   vim 보다요?!!! ㅎㅎ

   vim을 계속 써 오곤 있지만 emacs에 대한 동경(?)으로 몇 년에 한 번씩 트라이 해보다가 접은 경험이 있는데요. 이 글 보니 다시 한 번 해봐야 하나 싶기도 하네요.

   제 주변에도 만날때마다 Doom 추천하시는 이맥스 광팬분이..

   아 그렇군요. 한국에서 이맥스 사용자 커뮤니티가 제대로 없어서.. 그런 분들 이야기 들을 때마다 동지를 찾았다는 생각에 ㅎㅎ 좋습니다.
"
"https://news.hada.io/topic?id=6391","구글 검색이 뒤지고 있는 분야 : 코드, 요리, 여행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글 검색이 뒤지고 있는 분야 : 코드, 요리, 여행

   Neeva나 You 검색엔진에서 ""Python Delete File"" 검색하면 원하는 코드가 바로 보임.
   구글은 ""Blueberry Pancake""를 검색하면 블루베리보다 광고가 더 많이 보임.
   이렇게 개발, 요리, 여행 분야에서 구글과 Neeva, You, Bing, Kagi 등의 검색 결과를 비교

프로그래밍 비교

  ""Python Throw Exception"" 을 검색

     * 구글 : 파이썬 공식 문서가 1번, 원하는 문서를 찾으려면 스크롤을 내려야함. 3번째 결과인 SO 링크가 원하던 것
     * Neeva : 창 오른쪽에서 바로 예제코드가 보여서 쉬움. UI에 구글에 비해 신선하고 빠름
     * You.com : SO 결과를 우측에 띄워줘서 페이지를 나갈 필요가 없음.
     * Bing : 구글보다 나은 결과를 보여줌. 내 질문을 이해했고, 맨 처음 박스에 파이썬은 Throw가 아니라 Raise 라는 설명을 보여줌. SO 예제도 잘 추출해서 보여줌.
       아쉬운 것은 5번째 결과인 ""Manually raising(throwing) an exception in Python"" URL이 더 높은 위치에 있었으면 좋았겠다는 것.
     * Kagi : 역시 구글보다 나음. Neeva/You 처럼 SO 결과를 우측 패널에 보여주고 빠름

  ""filter pandas dataframe date"" 를 검색

     * 구글 vs. Neeva : 구글의 첫번째 결과는 딱 관련있는 것이었고, Neeva도 같음. 하지만 Neeva가 중요한 코드 예제를 추출해서 보여줘서 UI가 훨씬 더 좋았음. 구문강조 까지 지원해서 보기 더 좋았음.

요리 비교

  ""biryani recipe"" 검색 (비리야니, 인도/남아시아의 쌀요리)

     * 구글의 검색결과는 특별한게 없음. 맨 처음 나온 사진은 조잡해 보이고 품질도 낮음. 레시피를 보고 싶지 않은 수준.
     * Bing의 검색결과가 가장 좋았음. 상단 사진이 아주 먹음직스러워 보임.
       Bing UI는 다른 부분에서는 산만하지만, 요리분야에서는 빛남.
       비리야니에 대해 잘 몰랐지만, 검색페이지에 한참 머물르면서 자세히 봤고, 비디오가 배치된 방식이 마음에 듬.
       우측에 레시피를 자동으로 추출해서 보여주는 방식도 좋음. 다만 재료만 보여주는데, 조리법 자체까지 잘 보이게 곧 업데이트 할 것같음.
       상단의 필터도 훌륭해서 ""Quick"" 필터 버튼으로 빠르게 요리할수 있는 레시피만 따로 검색 가능. 5점 만점에 5점으로 Google보다 훨씬 좋음
     * Neeva는 Bing에서 아쉬웠던 조리법까지 추출해서 빠르게 보여주고 있음.
       하단 Carousel로 여러개의 레시피간에 빠른 이동 가능해서 비교하면서 볼 수 있음(내가 가진 재료로만 할 수 있는 레시피를 찾거나 할때)

여행 비교

  ""what to do in los angeles"" 검색

     * 구글 검색결과는 좋았음. 첫번째 2개의 리스트는 훌륭했고, 사진들도 괜찮았음
     * 하지만 Bing이 더 좋았음. 이미지들과 상단 필터가 재미난 장소들을 빠르게 찾을수 있게 구성되어 구글 보다 훨씬 똑똑하고 고급화 된 것 처럼 보임
     * You.com 과 Kagi 는 포럼 검색 결과를 보여줘서 좋았음
     * DuckDuckGo 의 지도 추천은 이상했지만, 다른 결과들은 좋았음
     * 결론적으로 구글도 이미 좋았지만, Bing은 훨씬 더 좋았음. You.com과 Kagi의 소셜/포럼 결과를 추출한것도 좋았음.

   프로그래밍 관련해서 덕덕고도 구글보다 더 결과가 잘 나오기도 합니다.
   npm, pip 등의 키워드와 함께 검색하면 아예 설치 명령어가 먼저 뜨기도 하더라구요.

   다만 300GB / 100Mbps 와 같이 특정 크기의 파일을 다운로드 하는데 몇 분이 걸리는지 계산은 구글에선 되는데 덕덕고에선 안 되더라구요.
     * Neeva - 광고없는 유료 검색엔진
     * Kagi Search - 빠르고 사용자 중심적인 검색 엔진
     * 구글은 이제 꽤 많은 중요한 카테고리들에서 고품질 검색결과가 나오지 않는다

   링크 좋아요 !
"
"https://news.hada.io/topic?id=6463","구글 내부에선 GNU AGPL 라이센스 오픈소스는 사용 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글 내부에선 GNU AGPL 라이센스 오픈소스는 사용 불가

     * AGPL 오픈소스를 사용하면 네트워크를 통해 연결되는 모든 것이 AGPL에 따라야함
     * 구글은 코드가 많이 통합되어 있어서 ""AGPL 사용에 따른 위험이 얻게되는 이익보다 훨씬 큼""
     * 구글의 핵심제품(검색,Gmail,지도,유튜브)은 사용자가 원격 네트워크를 통해 상호작용 하므로
          + AGPL 라이센스 코드는 구글 제품에서 사용 불가하며, 저장소에 체크인 시도하지 말 것
          + 또한, 구글이 제공하는 노트북/폰에서 오픈소스 사용 부서의 명확한 사용승인 없이는 AGPL 라이센스 프로그램 설치 불가
"
"https://news.hada.io/topic?id=6457","LineageOS 19 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LineageOS 19 릴리즈

     * 안드로이드 12L 기반
     * 웹뷰가 크로미엄 버전 100으로 업데이트
     * AOSP 갤러리 앱의 포크버전을 대폭 수정 및 개선
     * Android TV 빌드는 광고없는 런처 포함
     * 기본 다크모드 적용
     * AOSP가 iptables 대신 eBPF를 사용하면서 많은 레거시 기기들 지원이 제거됨
          + eBPF를 쓰기위해선 리눅스 커널 4.9가 되어야 하기 때문

     * LineageOS - 안드로이드 기반의 오픈소스 OS
     * PixelExperience - AOSP 기반 안드로이드 ROM

   LineageOS 와 PixelExperience 둘다 12 버전으로 같이 업데이트 되었네요
"
"https://news.hada.io/topic?id=6487","광고 효율을 높이기 위한 도착 페이지 최적화 전략","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      광고 효율을 높이기 위한 도착 페이지 최적화 전략

     * 도착(Destination)페이지는 3초내에 로딩
     * 광고와 도착 페이지 간에 연속성이 있을 것(마치 다음 단계인것 처럼)
     * 고객의 공통적인 질문들을 찾고, 그 대답들을 도착 페이지에 보여줄 것
     * 고객의 위치에서 경험해 보고 평가해 볼 것
     * 모바일 친화적인 인터페이스 디자인
     * 상세 내용 PDF 제공(33p PDF)
     * PDF 마지막에 있는 점수표로 ad-to-destination 경험 평가해보기
          + 페이지 로딩시간
          + 오버레이/모달/팝업이 있는가?
          + 광고와 도착페이지 디자인이 비슷한가? 광고에서 보여준 이미지/메시지가 도착페이지에 반영되는가
          + 도착페이지에서 핵심 가치가 강조 되는가?
          + 제품/서비스에 대한 추가 정보를 얻기위해 고객이 개인정보를 제공해야 하는가?
          + 제품/서비스에 대해 공통적으로 질문 하는 것들에 대한 답을 쉽게 찾을 수 있는가?
          + 광고의 CTA가 도착페이지의 CTA와 일치하는가?
          + 구매 프로세스중에 소비자를 안내하도록 CTA가 최적화 되어있는가?
          + 고객이 사이트에 도달했을 때 다른곳으로 이동할 명확한 경로가 있는가?
"
"https://news.hada.io/topic?id=6448","FE News - 네이버 프론트엔드 기술 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FE News - 네이버 프론트엔드 기술 소식

   네이버 FE 엔지니어들이 발행하는 프론트 엔드 관련 기술 소식입니다.
   매월 첫째 주 수요일, 월 1회 발행됩니다.

   2020.02부터 발행되었습니다.

   재미있기 잘 보고 있습니다 ㅎㅎ 나올 때 마다 읽어보고 싶은데 구독할 수 있는 방법이 어떤 게 있을까 고민하다가, GitHub 커밋 로그를 RSS로 구독할 수 있는 방법을 StackOverflow에서 찾아 구독하고 있습니다. RSS 사용하시는 분들에게 도움이 되시길...

   https://github.com/naver/fe-news/commits/master.atom

   감사합니다!!!

   오.. 신기하네요.
   좋은 아이디어네요.

   와 좋네요! 고맙습니다.

   오! 잘 사용하겠습니다. 다른 곳에서도 적용 가능한 방법이군요
"
"https://news.hada.io/topic?id=6502","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   모터싸이클 라이더 모임이 있는데, 어쩌면 처음으로 다른 라이더 분들과 1박 투어하게 될 지도 모르겠군요. 기대됩니다. ㅎㅎ

   안산 거리극 축제 개막식을 다녀왔습니다.
   사람들이 많이 모여 에너지를 나누는 게 좋았습니다.

   항상 롤만 하고 있었는데 벽도 느끼고 해서, 미뤄뒀던 개발을 시작하려고요.

   PyImgui 가지고 놀고... 울산에 내려갔다 오려고요.

   천안 부동산 임장요! 개발만하다 새로운 뷰를 보니 잼있습니다

   남산 산책 가려고요~~

   이번 주말은 정말 별거 안하고 밀린 잠을 자려고 합니다.
   생활패턴이 바뀌어서 아침 6시 전에 일어나야 하는데, 잠은 자던대로 1~2시 넘어서 늦게 잤더니 계속 피곤이 쌓이는거 같아요.
"
"https://news.hada.io/topic?id=6403","애플 M1 기기의 썬더볼트 포트는 USB 3.1 Gen 2를 완전히 지원하지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플 M1 기기의 썬더볼트 포트는 USB 3.1 Gen 2를 완전히 지원하지 않음

     * 애플은 M1칩이 USB 3.1 Gen 2 (최대 10Gb/s)를 지원한다고 얘기하지만,
       많은 사용자들이 직접 연결한 외장하드에서 10Gb/s가 안 나온다고 함
     * 테스트 결과
          + USB 3.1 Gen 2 + M1 썬더볼트 : 5GB/s, 읽기 386~406MB/s 쓰기 430~435MB/s
          + USB 3.1 Gen 2 + M1 맥 스튜디오의 전면 USB-C 포트 : 10Gb/s, 읽기 500MB/s 쓰기 490MB/s
          + USB 3.2 + M1 썬더볼트 : 10Gb/s, 읽기 910MB/s 쓰기 970MB/s
          + USB 3.1 Gen 2 + M1 맥 스튜디오의 전면 USB-C 포트 + 썬더볼트 4 케이블 : 10Gb/s 지만, 읽기 20MB/s 쓰기로 40MB/s 로 이상한 결과를 보임

결론

     * 현재 M1 모델의 썬더볼트는 USB 3.1 Gen 2 의 10GB/s 를 지원하지 않음. 적어도 SSD에 대해선
     * USB 3.1 Gen 2 를 제대로 지원하는 포트는 맥 스튜디오 맥스의 전면 USB-C 포트 뿐임
     * 애플은 공식적으로 얘기하지 않지만 USB 3.2 기기도 M1 맥의 썬더볼트 포트가 지원하는 것으로 보임
     * USB 3.1 Gen 2 기기를 사용중이라면 썬더볼트 3 독을 쓰거나, 스튜디오 디스플레이의 USB포트를 사용하는게 더 좋은 성능을 냄

   그러니까 결론적으로 USB 3.2 기기를 새로 사면 모든게 해결.. 응?
"
"https://news.hada.io/topic?id=6479","Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ? (2022년 5월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ? (2022년 5월)

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)

   이 글은 매월 첫번째 월요일에 등록됩니다.
   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   이메일 뉴스레터 서비스 스티비에서 개발, 프로덕트 전직군을 모시고 있어요!

   스티비 | 프론트엔드/백엔드 엔지니어, 프로덕트 디자이너, 프로덕트 매니저 | 서울 중구 소공동(시청역, 을지로입구역 도보 5분) | Remote 가능 | https://stibee.com | recruit@stibee.com

   스티비는 이메일 뉴스레터의 제작과 발송, 마케팅을 돕는 이메일 뉴스레터 서비스입니다. 2019년 서비스 출시 이후 매년 2배 이상 성장해왔고, 우아한형제들, 컬리, 뉴닉, 조선일보, MBC 등 유니콘 기업, 미디어 스타트업, 주요 언론사/방송사에서 스티비를 사용하고 있습니다.

   이메일 뉴스레터 제작 솔루션으로 시작한 스티비는, 이제 이메일 뉴스레터를 기반으로 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어 나가고 있습니다.

   스티비와 함께 이메일 뉴스레터 제작 솔루션을 넘어, 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어나갈 분을 찾고 있습니다. 🙌

   [1] 프론트엔드 엔지니어(신입)
   [2] 프론트엔드 엔지니어(경력)
   [3] 백엔드 엔지니어
   [4] 프로덕트 디자이너
   [5] 프로덕트 매니저

   [🍋 레몬베이스(Lemonbase) - 회사와 구성원의 성과관리 혁신을 위한 국내대표 HR SaaS]

   채용페이지 : lemonbase.team/
   채용직군 : 프론트엔드 / 백엔드 / 디자이너 / 프로덕트 오너 (PO)
   위치 : 서울 성수(서울숲/뚝섬역 5분)
   근무형태 : Remote 가능
   레몬베이스는 ""일하는 사람들이 성장하고 성과를 내는 방식(grow and perform)을 혁신""하고 있습니다. 회사와 구성원의 건강한 성장을 돕기 위한 '성과관리솔루션' HR SaaS를 만들고 있고요. 서비스 런칭 후 매월 50% 이상 빠르게 성장하며, 카카오모빌리티 / 쏘카 / 위메프 / 마이리얼트립 / 매스프레소 / 버킷플레이스 등 수많은 기업들이 이미 레몬베이스와 함께 일하는 방식을 혁신하고 있습니다.

   2020년 12월 국내 시드 라운드로는 매우 드물게 본엔젤스 / 크래프톤 / 카카오벤처스로부터 62억원의 펀딩에 성공함으로써 우리의 가능성을 인정 받았어요 😊

   ✅ 앞으로 10년 우리 앞에 펼쳐질 가장 큰 기회를 현실로 만드는데 동참하고 싶은 분
   ✅ '건강한 성장'이라는 단어에 조금이라도 가슴이 떨리시는 분
   🌈🌈 https://www.lemonbase.team 에서 흥미로운 이야기들을 더 많이 보실 수 있습니다 :)

   프론트엔드 엔지니어 https://www.lemonbase.team/recruit/fe
   백엔드 엔지니어 https://www.lemonbase.team/recruit/be
   프로덕트 오너 https://www.lemonbase.team/recruit/po

   🙌 당장 지원하지 않으셔도 괜찮아요! 관련해서 궁금하신 점이 있거나 가볍게 이야기를 나눠보고 싶다면 start@lemonbase.com 으로 편히 메일 부탁드립니다 :)

   💎 AB180(에이비일팔공) | 소프트웨어 엔지니어 | 서울 서초(사당역 1분) | https://hiring.abrge.app/geeknews | hr@ab180.co

   초당 10만 건의 트래픽 처리. 월 2,000만 MAU.
   월 300억 이벤트 수집 및 분석. 실시간 대규모 데이터 분석 및 성과 극대화를 위한 머신러닝.

   유니콘부터 대기업까지 사용하는 프로덕트를 만들며 함께 성장하실 분들을 찾고 있어요!
     * AB180은 'Airbridge'라는, 사용자 행동과 마케팅 성과를 측정, 분석해서 더 좋은 퍼포먼스를 낼 수 있도록 돕는 도구를 만들고 있어요.
     * Meta(페이스북) 공식 모바일 측정(MMP) + 멀티터치 기여도 분석(MTA) 파트너
     * GS리테일, KB증권, 퀸잇, 다노 등 많은 기업에서 사용하는 제품
     * 실시간 대규모 데이터 처리 및 분석, 시각화 등을 경험 가능 → 기술블로그

   전직군 채용중 / 저희에 대해 궁금하시다면 아래의 공고를 확인해주세요 :)

   sᴅᴋ
   Android SDK Engineer ↗
   iOS SDK Engineer ↗
   Web SDK Engineer ↗

   ғʀᴏɴᴛᴇɴᴅ
   Frontend Engineer ↗

   ʙᴀᴄᴋᴇɴᴅ
   Backend Engineer - Data Pipeline ↗
   Backend Engineer - Data Serving API ↗
   Backend Engineer - Platform API ↗
   Backend Engineer - Query Engine ↗
   Data Engineer ↗

   VESSL AI (베슬에이아이) | 엔지니어링 및 비즈니스 전 직군 | 서울 강남 | Hybrid | https://vesslai.notion.site/VESSL-AI-We-are-hiring-70a1b790fa4941d4903…

   쉽고 편한 머신러닝 연구/개발 경험을 제공하는 MLOps 플랫폼 VESSL (https://vessl.ai/) 을 만들고 있는 스타트업입니다. 글로벌 B2B SaaS의 빠른 성장을 초기부터 경험하고 함께 만들어나가고 싶으신 분들을 모시고 있습니다!

   TSN Lab | SW 엔지니어(C 등), FPGA 설계자 | 풀 리모트 | https://tsnlab.notion.site/TSN-Lab-4eaad45d265c43c1993d607a4c6d2c4d
   Time Sensitive Network와 임베디드용 인공지능 런타임을 다루는 작은 회사입니다.
   규모는 작지만 풀 재택근무를 비롯해서 복지가 꽤 괜찮은 편이라 좋습니다.
"
"https://news.hada.io/topic?id=6380","Lexical - 페이스북이 공개한 텍스트 에디터 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Lexical - 페이스북이 공개한 텍스트 에디터 라이브러리

     * 자유롭게 확장 가능한 JavaScript 웹 텍스트 에디터 프레임워크 오픈소스
     * 1개의 ContentEditable 개체에 붙어서 이용가능
     * 최소화된 형태로 빠름. UI 및 기타 기능들은 플러그인을 통해 제공 가능
     * 프레임워크 상관없이 동작. React용 바인딩은 제공해서 좀 편하게 개발 가능
     * 접근성 지원을 염두에 두고 설계

   앵 예전에 draft.js인가 있지 않았나요?

   내부적으로 Draft.js 를 Lexical로 교체하고 있다고 합니다.
   Draft.js가 너무 오래전에 만들어져서 원하는 만큼 성능이나 호환성이 나오지 않아서 아예 Draft, Slate, ProseMirror 등에서 좋은 아이디어를 가져와서 종속성 없이 만들고 싶었다고..

   https://news.ycombinator.com/item?id=31022152

   그렇군요. 좋은 정보 감사합니다!

   구루님이 2등이시군요! :) https://news.hada.io/topic?id=6376

   아흑 못봤네요 ㅠ
"
"https://news.hada.io/topic?id=6378","DevStream - 오픈소스 DevOps 툴체인 매니저(DTM)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DevStream - 오픈소스 DevOps 툴체인 매니저(DTM)

     * 새로운 팀 / 새 프로젝트 구성할때 관련 개발도구들을 한번에 구성하기
       → 이슈트래커, 소스코드 관리, CI/CD, Secret 관리, 로깅 & 모니터링 등
     * 현재 지원 도구들
       → Trello/Github, Jenkins/GitHub Actions CI, GitLab CI, ArgoCD, Prometheus/Grafana, DevLake, OpenLDAP
     * Go 오픈소스
"
"https://news.hada.io/topic?id=6396","이제는 달라져야 하는 코딩 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           이제는 달라져야 하는 코딩 테스트

   코딩 테스트에 대한 7가지 사실과 오해
    1. 테스트를 통과하는 정답만 있다고 믿는다
    2. 빨리 결과를 만드는 데만 집중한다
    3. 코드 품질이 나빠진다
    4. 피드백 연결 고리가 끊어져서 개선하지 않는다
    5. 어려운 문제 점수가 실력을 의미하지 못한다
    6. 선별의 수단이 목적이 된다
    7. 코딩테스트 점수와 직무역량의 상관관계가 낮다

   가장 큰 문제는 코딩 테스트 하는데 TDD 로 할 수 없다는 거에요 너무 당황 스럽죠
"
"https://news.hada.io/topic?id=6436","테슬라 스마트 호출 기능 사용중에 43억원짜리 개인용 제트기에 충돌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 테슬라 스마트 호출 기능 사용중에 43억원짜리 개인용 제트기에 충돌

   Cirrus(개인용 제트기 제조사)가 후원한 이벤트 행사장에서 일어난 일
"
"https://news.hada.io/topic?id=6376","META, javascript 웹텍스트에디터 프레임워크 Lexical 오픈소스로 릴리즈.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           META, javascript 웹텍스트에디터 프레임워크 Lexical 오픈소스로 릴리즈.

   META, javascript 웹텍스트에디터 프레임워크 Lexical 오픈소스로 릴리즈.

   The core of Lexical is a dependency-free text editor framework that allows developers to build powerful, simple and complex, editor surfaces. Lexical's has a few concepts that are worth exploring:

   https://news.hada.io/topic?id=6380 이 기사도 같이 보면 좋습니다.

   위지익에디터 사용
   https://lexical-playground.vercel.app/
"
"https://news.hada.io/topic?id=6484","Zaplib post-mortem: WASM은 생각보다 빠르지 않습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Zaplib post-mortem: WASM은 생각보다 빠르지 않습니다.

   원래 Zaplib라는 프로젝트는 다음 가설에서 시작했음.
    1. JS와 브라우저는 느림
    2. 점진적으로 JS를 Rust/Wasm으로 이식하면 앱 속도가 빨라짐
    3. 작은 포팅에서 시작 및 확장하여 전체 앱을 전환
    4. 장기적으로 이것은 차세대 스택(""앱을 위한 Unity"")으로 진화

   그러나 여러 프로토타입과 유즈케이스들의 결과 WASM은 일반적으로 약 2배정도 빨랐음.
   10배까지 빨라지려면 러스트의 제로비용 추상화를 최대한 활용해야하며 백만개의 객체를 처리하는 정도여야했고 이는 도입에 드는 비용이 훨씬 큼을 의미.

   오히려 WebGL을 이용한 그래픽 가속이 미치는 영향이 훨씬 컸음.
   WASM을 사용하기로 유명한 Figma도 C++ 코드를 활용하기 위한 역사적 이유 때문이었으며, WebGL이 주요 성능향상 원인이었음.

   앗. 마지막을 까먹었는데..

   따라서 프로젝트를 유지관리모드로 전환했습니다.

   Zaplib - Rust와 WASM으로 웹 앱을 가속하는 오픈소스
   https://news.hada.io/topic?id=6343 에서 다룬적 있는 프로젝트입니다.

   이 글을 보니 WebGL 배우고 싶은 마음이 솔솔..

   예전에 보니 문서화가 잘 되어있더라구요.
   https://webglfundamentals.org/webgl/lessons/ko/
   https://webgl2fundamentals.org/webgl/lessons/ko/
"
"https://news.hada.io/topic?id=6497","Haskell을 Production에서 사용중인 회사들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Haskell을 Production에서 사용중인 회사들

     * Hasura : Haskell을 가장 많이 사용. 첫번째 Haskell 유니콘
     * GitHub : Semantic 구현에 사용
     * Meta : Haskell 재단의 큰 후원자. Sigma, Glean, Haxl 등 프로젝트
     * Microsoft : Bond 에서 사용
     * IOHK : Cardano 블록체인과 스마트 컨트랙트 언어인 Plutus에서 사용
     * Tesla : 몇년간 꾸준히 Haskell 엔지니어 및 인턴을 고용. 레딧 댓글에 의하면 Haskell로 C코드를 자동 생성해서 차량 펌웨어용으로 컴파일 한다고 함
     * Standard Chartered : Haskell과 파생언어인 Mu 를 직접 개발해서 내부 도구 개발에 사용
     * Klarna : 다양한 함수형 언어들을 사용. 코어는 Erlang 이지만 Scala, Clojure, Haskell 도 같이 사용
     * Freckle : 백엔드 및 내부 도구에 Haskell 사용
     * Galois : 오류가 나면 안되는 소프트웨어 시스템 연구개발 전문 회사. NASA / NSA 등과 오픈소스 개발
     * Serokell(글 작성자) : 대부분 소프트웨어 개발 프로젝트를 Haskell 로 진행. Cardano, Tezos 관련 및 암호화폐 거래소 및 멀티화폐 지갑등을 개발
"
"https://news.hada.io/topic?id=6447","Thin - React앱을 위한 실시간, TypeSafe 백엔드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Thin - React앱을 위한 실시간, TypeSafe 백엔드

     * 지연시간을 최소화한 엄청 빠른 백엔드 서비스
     * State 관리를 간소화, 실시간 API를 통해서 앱 상태를 DB(Postgres)와 항상 동기화
     * Haskel로 만들어진 IHP 프레임워크 기반
     * GUI 스키마 디자이너 제공
          + Git과 비슷한 Migration : 테이블 변경/추가 시 인메모리 스키마에만 저장되며, 마이그레이션 할때 실제 Postgre DB에 적용
     * Zero-setup 로그인 지원 또는 JWT 인프라와 연동 가능
     * Thin Functions로 서버 기능 작성 가능
     * 개인용은 무료, Pro는 1만개 동시 커넥션 및 5GB 전송량에 월 $10
"
"https://news.hada.io/topic?id=6444","PixelExperience - AOSP 기반 안드로이드 ROM ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  PixelExperience - AOSP 기반 안드로이드 ROM

     * 다양한 기기에서 Pixel 사용경험을 가능하게 해주는 안드로이드 롬
       → 갤럭시(S10, Note10), 샤오미, 모토롤라, OnePlus 및 구글의 Pixel 폰들
     * Pixel goodies(런쳐, 바탕화면, 아이콘, 폰트, 부팅 애니메이션) 및 모든 구글 앱들 포함
     * 12 Plus 버전이 최신

   크.. 갤럭시 넥서스 쓸때는 거의 매주 롬질하고 그랬는데 말이죠..

   비슷한 용도인 LineageOS 보다 좀 더 순정에 가깝고, 가볍다고 합니다.
"
"https://news.hada.io/topic?id=6461","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   요즘 어반 드로잉 배우는 곳에서 한옥 과제가 있어요.
   한옥 아름다운데 그리기 어렵네요. ㅎㅎ
   벌써부터 겁이 납니다.

   백주 오마카세 집을 예약해서.. 아마도 주말엔 (숙취로) 푹 쉴듯 합니다.
   긱뉴스 작은 변경들을 해야하는데 요즘 뉴스만 보기에도 벅차서 일이 잘 진행이 안되고 있네요.
"
"https://news.hada.io/topic?id=6402","삼성전자의 문화적인 문제가 파운드리,LSI,DRAM까지 재앙을 일으키고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               삼성전자의 문화적인 문제가 파운드리,LSI,DRAM까지 재앙을 일으키고 있다

     * 1등이었던 삼성이 쌓아둔 수많은 이점들이 모두 무너지는 중
     * 삼성의 CPU는 잘못된 리더십으로 인한 설계의 실패
     * 실수에 대해 굉장히 안좋게(toxic) 보는 문화와 자회사들이 서로를 비난(삼성 LSI는 삼성 파운드리를, 삼성 모바일은 LSI를)
     * 삼성 LSI 경영진은 한국 노동법 개정(주 52시간제)을 탓함
     * 문화가 너무 안좋아져서, 파운드리가 수율에 대해 고객과 삼성 회장에게 거짓말을 한다는 소문까지 있음
     * 수율 문제 때문에 퀄컴이 삼성에 화를 내고 있음
     * 삼성 파운드리는 문제가 더 심해서, 3nm GAP 노드는 2024년까지 출시 불가
     * TSMC의 N3 문제나 N2가 2025년에 출시한다는 것 때문에 삼성이 TSMC를 따라잡을 것이라고 생각하면 큰 오산임
     * 삼성은 최대 고객인 퀄컴과 2위 고객인 NVidia를 잃었음
     * 삼성 LSI는 그나마 나음. 합리적 가격과 효율적인 칩으로 5G 인프라 시장에서 점유율 확보 중
     * 삼성의 캐쉬카우인 DRAM도 순탄치 않음. 일부에선 마이크론과 SK하이닉스에 뒤지고 있는 중
       이것은 문화적인 문제에서 비롯된, 프로세스 개발에 대한 삼성의 지나치게 공격적인 행태가 주범
     * EUV 채택을 공격적으로 했지만, 이건 기술조직이 아닌 위에서 아래로 주도된 결정이었음
     * 삼성전자의 직원이 이재용 부회장과 경계현 대표이사에게 보낸 이메일이 블로그에 공개되었다가 지금은 폐쇄됨

     '위기입니다'라는 이야기를 꽤나 많이 들어왔습니다만, 그 어떤 때보다도 지금 이 순간이 위태롭다고 여겨지는 요즘입니다..
     * 4년차 엔지니어가 깊은 열정을 가지고 이런 말을 하는 것은 큰 위험신호임. 특히나 위계질서가 강한 한국의 조직문화 에서는.
     * 삼성의 일부 DRAM 기술 개발 직원들이 SK하이닉스로 이직하기도 했음
     * 디스플레이, NAND, 네트워킹등은 잘 돌아가지만, 가장 중요한 사업이 곤경에 처해있음
     * DRAM에서 기술 및 비용 우위를 잃어버리고, 첨단 공정 기술 경쟁에서 TSMC에 밀리고, 가장 큰 파운드리 고객들을 잃고, 스마트폰 SOC 설계에서 퀄컴과 MediaTek에 뒤지는 것으로 이 문화적인 문제가 절정에 이르렀음

   그 밖에 코드리뷰 개수와 커밋 개수로 부서를 줄세우고, 평균보다 낮은 부서는 경고를 받는 양적관리 문화도 있지요

   어디부터가 문제인지 뿌리를 찾으려면 꽤나 시간이 걸릴것 같군요..

   타이젠 개발한정이긴 합니다만 예전에 충격받았던게..
   https://what.thedailywtf.com/topic/15687/code-review-malediction

   Git 포기후 Perforce라는 VCS를 쓰고, 워드 기반으로 코드리뷰를 했었다는 썰이..

   깃이나 퍼포스나 각자 장단점이 있어서 단순히 퍼포스 썼다고 뭐라 할 건 아닌데 워드 기반으로 코드 리뷰는 진짜 뻘짓이네요

   HN 댓글에도 삼성의 문제에 관한 다양한 이슈들이 나오네요
   https://news.ycombinator.com/item?id=31064080

   첫 댓글은 ""삼성이 회사 건물안에서 폰을 보면서 걷는 것을 금지하는 정책을 실시하고 있다""는 얘기..
   보안요원 적발시 한번은 경고, 두번은 팀장 보고, 세번은 교육 비디오 시청 및 시말서 작성.
   정말 이런가요? 이건 엄청 놀라운데요. 스마트폰 만드는 회사에서 왜 이런 정책을???

   검색하다 보니, 이 기사에 대한 자료는 한국분이 Dylan Patel에게 도움을 주신 거네요.
   https://meeco.kr/index.php/…
   실제 원글이 인용한 기사 링크는 대부분 한국 기사들이니까 클릭해서 보시면 됩니다.

   환경안전 부서의 관리감독 (카메라, 단속인원)에게 걸리면 부서장 통보갑니다 ㅎㅎ..

   저도 같은 내용을 얼마전에 친구에게 듣고 좀 이상하단 생각을...
   정확하진 않지만 중대재해처벌법 때문인지 사업장내 직원 안전이 목적이었던 걸로 들었습니다.
   그래도 이상하단 생각을... ㅎㅎ

   사업장 안에서 폰 보며 걷지 마라고 여기저기 경고/안내 표지가 붙어 있긴 했는데 저 다닐땐...적발시 혼나는 것 까지 갔나보네요 --;;
"
"https://news.hada.io/topic?id=6415","쿠팡은 왜 적자를 탈출할 수 없는걸까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         쿠팡은 왜 적자를 탈출할 수 없는걸까?

   ① 쿠팡의 지출 중 가장 많은 비중을 차지하는 것이 상품구입비와 물류비이다.
   ② 상품구입비는 단가를 낮추는 데 한계가 있다.
   ③ 물류비는 자동화가 되면 규모의 경제로 비용을 낮추는 것이 가능하다.
   ④ 쿠팡은 물류센터 자동화 비율이 경쟁사에 비해 낮다. 인력이 의존해 물류센터를 운영.
   ⑤ 자동화 비율이 낮으면 주문이 늘어날수록 고용해야 되는 인력도 늘어난다(인건비 증가).
   ⑥ 인력에 의존하는 물류센터는 자동화 물류센터에 비해 건축비용과 건축 기간이 절반 이상으로 줄어든다.
   ⑦ 시장을 빠르게 장악하기 위해서는 전국 각지에 최대한 빠르고 많은 물류센터 건축이 필요하다.
   ⑧ 빠르게 물류센터를 확보하려면 자동화 물류센터를 포기해야 한다.

   한국의 아마존을 꿈꾼다길래 물류자동화에 투자 많이 하는 줄 알았는데 아닌가보네요?

   본문 중에 (논문에서 발췌한) Amazon, Coupang, SSG의 물류센터 구조를 비교해서 보여주는데 흥미롭네요.

   Coupang 자동화 비율 낮은거에 놀라고, SSG 자동화 비율 높은 것에 놀랐네요ㅇㅁㅇ
"
"https://news.hada.io/topic?id=6472","투자자들이 기대하는 훌륭한 성장률은 얼마일까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        투자자들이 기대하는 훌륭한 성장률은 얼마일까

런칭 후 걸린 시간 : Good : Great

     * $1m ARR : 1년 : 9개월

$1m ARR 이후 : Good : Great

     * Y+1 : 3x YoY(10% MoM) : 5x YoY (16% MoM)
     * Y+2 : 3x YoY(10%) : 4x YoY(12%)
     * Y+3 : 2x YoY(5%) : 3x YoY(10%)
     * Y+4 : 2x YoY(5%) : 3x YoY(8%)
     * Y+5 : 2x YoY(5%) : 3x YoY(8%)

각 라운드별 : Good : Great

     * 시리즈 A : 3x YoY(10%) : 5x YoY(16%)
     * 시리즈 B : 2.5x YoY(8%) : 4x YoY(12%)
     * 시리즈 C : 2x YoY(5%) : 3x YoY(10%)
     * 성장단계 : 2x YoY(5%) : 2.5x YoY(8%)
     * Pre-IPO : 1.5x YoY(3%) : 2x YoY(5%)
"
"https://news.hada.io/topic?id=6467","빅테크의 프로젝트 관리 방식, 그리고 스크럼의 기이한 부재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    빅테크의 프로젝트 관리 방식, 그리고 스크럼의 기이한 부재

     * 스카이프는 스크럼 방식으로 일했지만, 스크럼을 사용하지 않은 왓츠앱과의 메세징 앱 대결에서 패배했다. 기업의 성공과 프로젝트 관리 방식은 항상 연관되어 있지 않다
     * 기업들이 프로젝트를 관리하는 방식은 각기 달랐지만, 전반적으로 팀이 일하는 방식을 자유롭게 선택할 수 있다면 만족도가 더 높았다
     * 빅테크 기업에서는 엔지니어가 프로젝트를 주도할 수 있는 권한을 가지고, 별도의 프로젝트 매니저가 없다
     * 빅테크의 이러한 프로젝트 관리 방식은 빅테크의 독특한 환경과 관련이 깊다
     * 빅테크와 기타 기업의 또다른 차이점은 프로덕트 관리자의 역할 차이이다 - 빅테크의 프로덕트 관리자는 프로젝트 일정을 관리하기보다는 전반적인 팀의 전략을 정의하는 역할을 맡았다.
     * 스카이프는 릴리즈 주기를 짧게 하는 과정에서 스크럼을 버릴 수 있었다
     * 빅테크 엔지니어가 일하는 데에는 스크럼과 같은 프로세스가 필요없고, 빅테크 기업 전체의 문제도 스크럼으로 해결할 수 없다
     * 일부 상황에서는 스크럼이 충분히 좋은 선택이 될 수 있다
     * 팀을 어떻게 운영해야 할 지는 개별 팀의 상황에 달려 있지만, 몇 가지 고민해볼만한 점들이 있다.

   링크는 원문의 요약이고, 위 내용은 요약의 요약입니다. 원문 링크: https://blog.pragmaticengineer.com/project-management-at-big-tech/
"
"https://news.hada.io/topic?id=6474","PyScript - HTML에서 Python 코드 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PyScript - HTML에서 Python 코드 실행하기

     * Pyodide(WASM) 기반으로 서버 도움없이 브라우저내에서 파이썬 코드를 실행
     * <py-script> 로 코드 실행, <py-repl> 로 REPL을 컴포넌트 생성
     * 다양한 파이썬 패키지 이용가능 : numpy, pandas, scikit-learn..
     * Python 과 Javascript 객체간 양방향 통신 지원
     * 버튼, 컨테이너, 텍스트 상자등의 UI 컴포넌트 지원
     * 데모들 보기 : https://pyscript.net/examples/
"
"https://news.hada.io/topic?id=6494","magic-trace - 프로세스 동작을 고해상도로 추적하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  magic-trace - 프로세스 동작을 고해상도로 추적하는 도구

     * Intel Processor Trace를 사용. 샘플링이 아닌 High-Resolution Trace
     * 2%~10% 정도의 오버헤드
     * 모든 함수 호출을 약 40ns 안에 추적
     * 콜스택 타임라인을 10ms 안에 렌더링
     * 지원 환경
          + Perf에 의존 하므로 Linux만 지원
          + 인텔 Skylake 이후의 CPU들
          + x86_64
          + OCaml, C, C++, Rust, Python(C Frame만 디코드)
               o Exception은 현재 지원하지 않음. 지원예정
          + KVM with Kernel 5.0+
"
"https://news.hada.io/topic?id=6404","YDB - 오픈소스 분산 SQL 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        YDB - 오픈소스 분산 SQL 데이터베이스

     * Elastic Scalability : 노드를 쉽게 추가/제거가능
     * Fault-tolerant : 3 AZ 지원을 기본으로 설계
     * Strong Consistency + ACID 트랜잭션 + 고성능 쿼리 + SQL 문법(YQL) 및 JSON API 지원
     * Automatic disaster recovery
     * 셀프 호스팅, 쿠버네티스 및 다양한 클라우드 환경지원

   Y로 시작하길래 Yandex 에서 만든건가 했더니 맞네요.
   OLAP쪽 오픈소스로 ClickHouse를 만들었고, 이제 OLTP쪽으로도 똑같이 오픈소스 DB를 만드는 것인듯.
   Repo를 보니 첫 커밋이 2014년에 되어서 개발한지는 오래된 거 같은데 이번에 오픈소스로 공개한 듯 합니다.

   오픈소스 OLAP DB ClickHouse 별도 회사 설립
"
"https://news.hada.io/topic?id=6500","우아한 소프트웨어를 예로 들때 가장 좋아하는 것은 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     우아한 소프트웨어를 예로 들때 가장 좋아하는 것은 ?

     * Factorio(게임) : 작은 팀이 이 정도로 단단하고 성능 좋고 중독적인 게임을 만든다는 것에 놀람. 훌륭한 개발자 블로그도 운영
     * Emacs : 특이한 API가 있긴 하지만 이맥스의 디자인은 놀랍도록 효과적. 개별 버퍼에 대한 인터랙티브 모드를 커스터마이징 하는 방법은 똑똑하고 아름다움.
     * Remember the Milk : 저렴하고 빠르고 효과적이며, 직관적이고 인체공학적 요소가 가미된 UI디자인이 지속적으로 감동을 줌
     * Rollercoaster Tycoon : 아름답고, 성능좋고, 1명이 거의 손으로 작성한 어셈블리 코드
     * Syncthing : 이 정도로 좋은 오픈소스가 또 있을까 ?
     * MS-DOS용 Turbo Vision/Turbo Pascal : 최고의 객체 지향 라이브러리. 후속작인 Delphi for Windows는 최고의 생산성을 보여주는 환경이었음
     * SQLite : 최고의 작은 소프트웨어. 사람들이 종종 ""fopen()의 대체제"" 라고 부름
     * Signal : Privacy-first Design
     * Fossil SCM : Git + Gitea
     * Peter Norvig의 27줄 짜리 스펠 체커
     * Things, Redis, Spotify, Unix, Google's Flume, DynamoDB, EC2, Wikipedia, Blender, Tokio for Rust, GraphViz,..

   Factorio 완전 공감

   리멤버 더 밀크에 대해서는 저는 그닥… ^^;

   수학자들한테 '우아한 수학공식'을 보여주고 fMRI 를 찍는 실험이 있는데, 수학자들은 우아한 수학공식을 보면 시청각적인 예술을 볼때와 관련있는 뇌 부위가 활성화 된다고 하네요. 수학자의 뇌에서 우아한 수학공식은 모짜르트나 고흐와 같은 예술인 셈이죠.

   우아한 소스코드도 비슷한 현상이 있을지 궁금하네요 ㅋㅅㅋ

   Syncthing - 지속적 파일 동기화 오픈소스
"
"https://news.hada.io/topic?id=6424","영화/게임/컨셉 디자인등에서 본 HUDs + GUIs 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    영화/게임/컨셉 디자인등에서 본 HUDs + GUIs 모음

     * 영화/게임 등에서 미래의 장면들을 구성할 때 사용하는 HUD 및 GUI 들만 모은 사이트
     * 사이버펑크 2077, 배틀필드 2042, 블랙위도우, 만달로리안 S2, 소셜 딜레마, 스파이더맨..
     * 이메일 뉴스레터
     * 이북 ""FUI : How to design user interfaces for film and games."" (AUD $5)

   개인적으로. westworld에서 로봇 모니터링할 때 사용되는 Tablet UI가 아주 인상적이였는데, 여기에는 소개가 안된 것 같네요..
     * Interface in Game - 게임 인터페이스 모음
     * Game UI Database
"
"https://news.hada.io/topic?id=6503","Knex.js - 멀티DB용 SQL 쿼리 빌더 for Node.js","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Knex.js - 멀티DB용 SQL 쿼리 빌더 for Node.js

     * 유연하고 포터블한 설계
     * PostgreSQL, MySQL, SQLite3, Oracle, CockroachDB, Redshift..
     * 콜백/Promise API 둘 다 지원
     * 트랜잭션/커넥션 풀링/스트리밍 쿼리
"
"https://news.hada.io/topic?id=6414","19년간 만든 62개 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            19년간 만든 62개 프로젝트

     * Baremetrics를 50억에 팔았던 Josh Pigford의 19년간 개발 기록
     * 링크디렉토리 부터 아마존 어필리에이트, 블로그, 파일 저장소, 커뮤니티, 쇼핑몰, NFT, 다양한 웹앱 들 까지
     * 각 사이트를 만들면서 배운 점들 및 실제로 판매한 금액이 적혀있어서 흥미로움

   네 Josh는 뭔가 새로운걸 만드는걸 좋아하는 친구에요. 저희 PE펀드에서 Baremetrics를 인수했는데, 지금도 좋은 관계를 유지하고 있습니다. 새로운걸 잘 만드는데 스케일에는 큰 관심이 없어요. 또하나 특징은 인수금액을 공개한 것처럼 SaaS커뮤니티를 위해 모든 활동을 투명하게 공개하는 걸 강조하고 있어요. 그래서 저희가 인수 후에도 그가 만든 Open Startup Initiative는 그대로 유지 운영하고 있습니다.
   https://baremetrics.com/blog/open-startups
   https://baremetrics.com/open-startups

   우왓 그렇군요. 아이디가 익숙해서 보니 트위터에서 뵈었던 상욱님이신거 같은데 Xenon 파트너스에 계셨네요.
   종종 들리셔서 말씀 남겨주세요! ㅎㅎ

   Xguru님도 정말 오랜만이에요ㅎㅎ 잘 지내시죠? 네 요즘 일본쪽 활동이 많이서, 한국쪽도 점점 늘려야 한다고 생각하고 있습니다. 제가 도움되는 코멘트가 있을지 모르겠지만, 자주 글도 남기고 얘기 나누겠습니다!!

   NFT도 꽤 많이 소장했네요.

   2020년에 Baremetrics 를 팔면서 쓴 글이 본 것 같아요. 왜 긱뉴스에 안 올렸는지는 모르겠는데.. I sold Baremetrics
   그 뒤에도 뭔가를 계속 만들고 있군요. 사이트 상단에 ""I can't stop starting things"" 이 잘 어울리는 사람인 듯
"
"https://news.hada.io/topic?id=6408","Netlify Edge Functions 공개 : Deno 기반 서버리스 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Netlify Edge Functions 공개 : Deno 기반 서버리스 런타임

     * JavaScript/TypeScript 함수를 Netlify Edge 에서 서버리스로 실행
     * React Server Components, Content Rewrites, User Redirection, A/B Testing, OAuth 인증, Geolocation, Localization 등이 가능
     * 또한 별도 함수 작성없이 SSR 및 Astro, 11ty, Next.js, Nuxt, Remix, SvelteKit 같은 기능을 쉽게 사용할 수 있게 됨
"
"https://news.hada.io/topic?id=6388","HTTPie가 5.4만개의 GitHub Star를 잃어버린 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HTTPie가 5.4만개의 GitHub Star를 잃어버린 이유

     * 10년째 개발중인 CLI HTTP Client 오픈소스
     * 실수로 private repo로 전환하면서 모든 별이 삭제됨
     * GitHub은 전환시에 경고창이 있지만, 개인과 조직 Repo의 형태가 달라서 착각
          + 프로필의 경우 개인은 name/name , 조직은 name/.github
     * GitHub쪽에서 이걸 되돌려줄 방법은 없음
     * 교훈
          + UI/UX 측면에서 뭔가를 삭제하려고 할 때 심각하다는 것을 강조해서 보여줄 것
          + 일시 삭제 방법을 사용하고, 영구 삭제일 경우 프로세스를 지연하는 방법을 둘 것

GitHub쪽에서 이걸 되돌려줄 방법은 없음

   GitHub쪽에서 이걸 되돌려줄 명분이 없음

   이겠죠? 분명히 방법이 있을텐데..

   재밌는건 Github가 자사 저장소를 실수로 private으로 전환했을때는 DB 백업을 이용해 되돌렸었다는 점이죠.

   에고................... 참 안타깝네요
"
"https://news.hada.io/topic?id=6427","Show GN: 자바 객체 JSON/바이너리 직렬화 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: 자바 객체 JSON/바이너리 직렬화 라이브러리

   Jackson, GSON, Kryo보다 빠르고 사용하기 쉬운 직렬화 라이브러리를 만들어 보았습니다.

   많은 관심 부탁드립니다!
"
"https://news.hada.io/topic?id=6482","InfoQ의 2022년 중점 기술들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          InfoQ의 2022년 중점 기술들

   InfoQ는 자신들의 About에 올해 기사 편집시에 집중할 기술들을 정리해두고 매년 업데이트

Innovators

     * Rust
     * WASM
     * eBPF
     * ML@Edge
     * Project Loom
     * Java 16
     * DeFi
     * Federated Machine Learning
     * Differentiated Privacy
     * GPU/Vector Support for the JVM
     * Cutting Edge Performance

Early Adoptors

     * Software Ethics
     * Service Meshes
     * Microfrontends
     * Multicloud Practices
     * GraalVM (Compile to Native)
     * Hybrid Work Strategies
     * Serverless : Orchestration vs Choreography
     * DevEx
     * Org Hacking
     * Security & Customer Trust
     * Becoming a Better Developer
     * Edge Architectures & Wins
     * Finegrained Access Control / Zero Trust

Early Majority

     * DevOps in Practice
     * Chaos Engineering
     * Remote Working / WFH Strategies
     * SRE
     * Observability / Telemetry
     * React
     * Kubernetes Strategies
     * Operating Microservices
     * API Ergonomics
     * Reactive Architectures
     * Continuous Delivery
     * Streaming Systems
     * Microservice Patterns & Antipatterns
     * Modern Data Pipelines
     * Backend as a Frontend
     * Kafka
     * Lean & Process Improvements

   Java 17이 LTS이고 Spring 진영에서도 적극적으로 채택중인데 16을 적어둔 건 의외네요.

   예전에는 뭐를 골랐었나 뒤져 보는 것도 재미납니다.
   http://web.archive.org/web/20180831041820/…
   2016/17 : IoT, ML, AI, 컨테이너, 데이터 사이언스 분석 및 인프라, 웹 API, 모바일, HTML5, Javascript, Cloud
   2018 : AI & ML, 블록체인, Chaos Engineering, WebAssembly, Rust, Stream Processing, Kubernetes, FaaS, CQRS, Swift, DevOps, Microservices
   2020 : Data Mesh, Deep Learning, LinuxKit, C# 8, WASM, Autonomous Vehicles, Holacracy, Evolutionary Architectures, FaaS, Data Engineering, IoT Platforms, Chaos Engineering, Remote-Only Teams, MSA, Kubernetes, Event-Driven Architecture, Streaming Data Analytics..
   2021 : Project Valhalla, DeepLearning, GraalVM, Java 15, C# 9, Data Mesh, Quantum Computing, WASM, Operating MSA, Multi-cloud, GraphQL Federation, Service Mesh, IoT Data Pipelines, Micro-Frontends,..

   기술에 관심 가지는 회사들은 한 항목씩 골라서 주간 스터디 같은 걸 진행하면 좋을 리스트인듯 합니다.
   브라운백 세션(점심에 샌드위치 같은거 제공해서 먹으며 듣는) 같은거 해보면 어떨까 하네요.
"
"https://news.hada.io/topic?id=6435","최신 데이터 인프라를 위한 새로운 아키텍처 2.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      최신 데이터 인프라를 위한 새로운 아키텍처 2.0

   2020년 나왔던 글의 2.0 업데이트

Changelog

     * 새로 급성장한 2개의 분야
          + 데이터 디스커버리, 관찰, ML 모델 감사등의 핵심 데이터 프로세스와 워크플로우를 지원하기 위한 도구들
          + 데이터 워크스페이스, 리버스 ETL, ML 어플리케이션 프레임워크 처럼 데이터 팀과 비즈니스 사용자들이 데이터에서 가치를 만들어 낼수 있게 해주는 새로운 어플리케이션 들
     * BI에 추가된 것들
          + Metrics Layer : Transfrom, Supergrain 같은 새로운 순수 도구. 그리고 dbt가 이쪽으로 확장
          + Reverse ETL : Hightouch, Census
          + Data Workspace : Hex, Mode, Deepnote
          + Data Discovery & Observability : Monte Carlo, Big Eye가 큰 자금 유치. 시드 단계인 Select Star, Metaphor, Stemma, Secoda, Castor 같은 회사들도 많음
     * Multimodal Data Processing 에 추가된 것들
          + Lakehouse 아키텍처에 대한 접근
          + Storage Layer가 업그레이드 : Delta/Iceberg/Hudi가 더 많이 도입되고 상용화.
          + 스트림 프로세싱 도입이 늘어나는 중 : 실시간 분석 데이터 프로세싱. Materialize/Upsolver
     * AI & ML에 추가된 것들
          + 데이터 중심 어프로치로 통합중
               o 데이터 라벨링 : Scale, Labelbox. Closed-loop Data Engine에 대한 관심 증가
               o 피쳐스토어 도입 증가 : Tecton, Feast, Databricks
               o Low-Code ML 솔루션 : Continual, MindsDB, DataRobot, AutoML, Roboflow, Akkio
          + Pre-Trained 모델 사용이 기본이 되어 가는중. 특히 NLP. OpenAI & Hugging Face
          + MLOps 가 성숙해지고, ML Monitoring 중심으로 사례와 예산이 증가
          + ML모델을 어플리케이션에 어떻게 연동하는지에 대해서도 관심 집중. 미리 만들어진 API(OpenAI), 벡터 데이터베이스(Pinecone) 등

데이터 플랫폼 가설

     * 지난 1년간 데이터 인프라 스택은 핵심 시스템과 지원도구들이 빠르게 확산 되었는데, 이게 왜 일어났는지를 설명하기 위해 ""데이터 플랫폼"" 아이디어를 소개
     * 플랫폼이란 무엇인가?
          + 데이터 에코 시스템에서 ""플랫폼""은 과부하가 걸려있음. 내부 팀에서 전체 테크스택을 지칭하거나, 느슨하게 연결된 제품 스위트를 판매하는 벤더들에 의해 사용
          + 소프트웨어 에서 플랫폼은 다른 개발자들이 그 위에서 뭔가를 개발할 수 있는 것을 말함
          + 플랫폼을 정의하는 특성은, 산업적인 관점에서는 (기술적으로나 경제적으로) 영향력있는 플랫폼 제공자와 써드파티 개발자 풀사이의 ""상호 의존성""임
     * 데이터 플랫폼은 무엇인가?
          + 역사적으로, 데이터 스택은 플랫폼 정의에 맞지 않았음
          + ETL, 데이터 웨어하우스, 리포팅 벤더들 사이에서는 상호 의존성이 있었으나, 통합 모델은 1:다 보다는 1:1로 되는 경향이 많았음. 주로 전문 서비스들이 그걸 보완했고
          + 많은 데이터 전문가 들과 얘기해본 바에 의하면, 이게 변하기 시작할 수 있음
          + 플랫폼 가설은 데이터 스택의 ""백엔드(데이터 인제스천, 저장, 처리, 트랜스폼으로 이어지는)""가 일부 클라우드 기반 벤더에서 통합되기 시작했다고 주장
          + 결과적으로 고객 데이터 세트가 표준 시스템 세트에서 수집되며, 벤더들이 이 데이터가 다른 개발자들에게 쉽게 접근 될수 있도록 만들고 있음 (Databricks의 기본 디자인 원칙, SQL 표준과 Snowflake의 Snowpark 같은 API등을 통해)
          + 프론트엔드 개발자들이 싱글 포인트 통합에서 이점을 얻었던 것 처럼, 하단 구조에 상관하지 않고 통합된 데이터를 접근할수 있게 됨
          + 금융/제품분석 같은 전통적인 엔터프라이즈 시스템들도 ""Warehouse-native"" 아키텍처로 재개발 되는 것도 생기기 시작
          + 이것은 OLTP DB나 다른 중요한 백엔드 기술이 곧 사라질것이라고 말하는 것은 아님
          + 하지만 OLAP 시스템과의 네이티브 통합은 어플리케이션 개발의 핵심 컴포넌트가 될 수 있음
          + 점점 더 많은 비즈니스 로직과 어플리케이션 기능들이 이 모델로 변화할 수 있음
     * 데이터 앱들의 출현?
          + 이 데이터 플랫폼 가설은 아직 많이 논의될 부분이 있음
          + 어쨌든, 우리는 데이터 플랫폼위에서 수평적인 레이어로 복잡한 버티칼 SaaS 솔루션들이 증가하는 것을 보고 있음
          + Snowflake, Databricks 같은 회사들이 이런 데이터 스택의 안정적인 조각들이 될 것
               o 훌륭한 제품, 역량있는 세일즈 팀, 마찰이 별로 없는 배포모델 등 때문에
               o 고객이 이런 시스템위에서 데이터 어플리케이션을 만들거나 연동하면 다른 것으로 전환하는게 합리적이지 않기 때문
          + 지난 몇년간 데이터 인프라 제품이 만들어 지고 지금도 계속 나타나는 것은 플랫폼과 관계가 있을 것
          + 플랫폼 가설은 경쟁 역학을 예측가능하게 하는 힘이 있음
               o 규모가 크다면 플랫폼은 매우 가치가 높음
               o 핵심 데이터 시스템 벤더들은 현재 예산이 아닌 장기적인 플랫폼 지위를 차지하기 위해 공격적으로 경쟁하고 있을 수 있음
          + 데이터 인제스쳔 & 트랜스포케이션 회사들이나, Metrics Layer 또는 Reverse ETL 분야의 높은 밸류에이션은 그들이 새 데이터 플랫폼의 핵심부분이라고 생각하면 좀 더 합리적일 수 있음
     * 앞을 내다보기
          + 우리는 아직 분석 & 운영 적인 데이터 플랫폼을 정의하는 초기 단계에 있고, 그 플랫폼을 구성하는 조각들은 계속 변하는 중
          + 따라서 이건 엄격한 정의보다는 비유로 사용하면 좀 더 유용함
          + 그러나 이 가설은 Signal 에서 Noise를 필터링 하는 도구로서도 유용하고, 왜 시장이 이렇게 움직이는지를 이해하는데 도움이 됨
          + 데이터 팀들은 이제 DB의 발명 이후, 그 어떤 시점보다 많은 도구, 자원, 조직적인 모멘텀을 가지게 되었음
          + 이 새로운 플랫폼 위에서 앱 레이어가 진화할지를 지켜보는 것이 매우 흥분됨

   이전에 올려주시던 유투브 강좌 동영상도 업데이트 해 주시나요..? ^^;
   https://youtube.com/watch/…

   항상 감사합니다~

   영상 제작도 하다가 중단하니까 더 못하게 되네요 ㅠ
   아마 근시일 내에 업뎃은 어려울듯 합니다.

   아네. 이전에 올려주신 내용만으로도 많은 도움이 되었습니다.
   이자리를 빌어 감사 드려요.

   최신 데이터 인프라를 위한 새로운 아키텍처 글의 업데이트 버전입니다.

   정리하고 나서 올리려다 보니 Techit 에서도 이 2.0 글을 전체 번역해주신게 있네요. 같이 참고해서 보시기 바랍니다.
   모던 데이터 아키텍처와 새로운 아키텍처의 시대
"
"https://news.hada.io/topic?id=6381","스타트업을 떠나며스타트업을 떠나며...

    1. 직원은 오너가 아니다.
    2. 회사가 어려울 때 본심이 나온다.
    3. 지원은 없다.
    4. 스톡옵션이든 지분이든간에...
    5. 우리는 그저 비즈니스 관계다.
    6. 모든 것에 대한 책임
    7. 아무리 작은 회사도 조율자는 필요하다.
    8. 실패는 그다지 도움이 되지 않는다.
    9. 나는 반드시 잘해야 하지만, 내가 잘한다고 비즈니스가 성공하는 것은 아니다.
   10. 연봉은 절대로 폭발적으로 오르지 않는다.
   11. 나는 리스크를 지지 않았다.
   12. 저는 스타트업을 떠납니다.

   제가 좋은 스타트업만 경험했던건지.. 저는 크게 공감은 가지 않았습니다.
   충분한 지원과 보상이 있었고, 개인적인 성장과 성취도 컸다고 생각하거든요.
   어떻게 보면 스타트업 절망편을 경험하신분의 글인것 같은데, 이게 마치 모든 스타트업은 그렇다는 글처럼 비춰질것같아 걱정이되네요.
   13. 회사가 커지면 개인의 성장속도가 기업의 속도를 못 따라간다며 내 자리에 대기업 출신이 들어온다.

   개인적인 경험을 기반으로 제 생각을 정리해봤습니다.
   비교를 하기 좋도록 동일한 내용에 동일한 번호를 붙였습니다.
   저는 글쓴이의 의도와 글 내용에 전반적으로 동의합니다.
   조언이기도 하고 위로이기도 하고 의도없이 이런 경험도 있고 이런 모습도 있다고 공유하고 싶었습니다.
    1. 오너가 오너이고, 직원에게 지분 없이 오너쉽을 요구하면 호구를 원하는 것이다.
    2. 회사가 어렵지 않더라도 사소한 곳 여기저기 본심이 묻어있다.
    3. 업무에 필요한 지원도 없다면 바로 퇴사해야 한다.
    4. 성과가 있을 때 당장 지분을 나눠주지 않으면 상장할때도 주지 않는다.
    5. 1번와 동일. 비즈니스 이상의 요구는 보상과 함께.
    6. 무한책임, 모든 것에 대한 책임은 책임이 없는 것, 근로계약서, 정관 등에 구체적으로 명시돼있지 않을 것이다. 협박에 쫄지 말고 차분히 신고와 소송을 진행한다. 협박하는 스타트업에는 다소의 노동법 위반사례가 있기에 오너는 실제로 소송을 진행하지 않는다.
    7. 조율을 할 줄 아는 사람은 극소수이며, 대기업리더이거나 본인의 사업을 하고 있다. 그리고 비싸다. 즉, 스타트업에서는 만날 가능성이 적다.
    8. 실패에서 성공에 필요한 것을 얻을 수는 없지만, 실패를 하지 않는 도구를 얻게 된다고 착각한다. 실패의 냄새를 잘 맡게 된다고. 하지만 그것은 성공의 냄새를 맡아 본 적이 있을 때의 얘기다. 조금 다른 실패의 냄새를 성공의 냄새인걸로 착각할 것이다.
    9. 일을 항상 반드시 잘 할 필요는 없다. 계속 함께 해주는 것이 좋다. 잘 하는 사람이 올 수 있도록 개발문화에 공헌해도 되는 것이다.
   10. 연봉은 인력시장 상황에 따라 결정되는 것이고 회사사정상 낮게 받는 것은 (지분도 없이) 개발자가 희생하는 것이다. 회사규모와 관계없이 한 번 희생한 사람에겐 두번, 세번의 희생을 요구하는 것이 회사다.
   11. 동감한다. 회사에서 지분을 주지 않으면 리스크를 지고 싶어도 못 진다. 리스크는 투자에서 비롯되고 투자는 지분에서 비롯된다.
   12. 아니면 바로 나가는 것이다. ""이번 프로젝트만 끝나고""는 내 커리어에 크게 도움이 될 때만 쓰는 말이다. 프로젝트와 관계없이 나가야 그 회사가 남아있는 사람들에게 함부로 못한다. 빨리 나가서 좋은 회사를 찾아서 기존에 일했던 사람들을 끌어오는 것이 동료에게도 스타트업 업계에도 도움이 된다.

   감사합니다.

   와. 이글도 좋네요

    7. 아무리 작은 회사도 조율자는 필요하다.

   이거 정말 공감합니다. C레벨은 자기가 창업한 회사임에도 기본적으로 회사의 서비스 사양을 다 알지 못하더라고요.
   그래서 지시가 말단 개발자에게 바로 내려오면 각종 오해와 불신이 넘처나게 되더라고요.

   저희 스타트업이 개발자 5명인데 전부 경력도 비슷한 수평적 조직이었습니다. 그런데 같은 문제로 팀이 엉망진창이었다가 한 명이 조율자(팀 리드)가 되어 희생하겠다 하니 그 이후로 팀이 안정화되었습니다.

   괜찮은 회사는 많지 않습니다. 괜찮은 사람은 적고 그 적은 수 중에서 회사 대표인 사람은 더 적기 때문입니다. 괜찮을 수 있는 회사라도 돈이 없을 땐 그 모습이 크게 다르지 않을 수 있습니다.
   그러나 분명 괜찮은 스타트업도 있기 때문에, 이번에 느끼셨던 것들로 기준을 만들고 우선순위 두어 더 괜찮은 회사를 찾아가셨으면 좋겠습니다.

   갠적으로 커리어 초반에는 돈보다는 본인의 스킬 발전을 위해 괜찮은 엔지니어가 있는 회사로 갈 수 있는 게 베스트라고 생각합니다. 건승하시길

   성공하면 그 이득은 경영진이 전부 가져가는데, 실패하면 가장 말단의 실무자 한 명에게 책임을 다 몰아버린다는 점이라든지... 글쓰신 분이 겪은 상황이랑 제가 현재 속한 스타트업(11년차라 이젠 중소기업이란 이름이 더 어울리는 회사지만)에서 일어나는 상황 사이에 너무 많은 점이 겹치네요... 공감할 수밖에 없는 글입니다

   아 회사가 세워진지 11년차라는 이야기이고, 저는 경력이 그리 길지 않습니다... 아직 뉴비에 가까운 입장이다보니 선배님들께 여쭈어봅니다만, 모든 스타트업이 이렇게 사람에게 인색하게 구는 건 아니지요...? 제 경험만으로 뭔갈 결론내리기엔 성급한듯해서...

   중심조직이 IT인지 다른 분야인지에 따라 대우가 천차만별인거 같아요. 저도 그룹사 이지만 식음료계다 보니 IT의 의견은 귀신 씨나락 까먹는 소리 정도로 듣습니다...

   직원이 천 명 훌쩍 넘는 회사도 스타트업이고, 직원이 백 명도 안되는 회사도 스타트업이고, IT를 메인으로 두지 않으면서 매년 수백억씩 버는 회사들도 스타트업이라고 부릅니다. 적어도 대한민국에서는 스타트업이라는 단어를 사용하지 않는게 맞는 것 같아요. 많은 것들을 흐릿하게 만들어버리는 무서운 단어입니다.

   스타트업에서 일하시다가 좀 많이 상쳐받고 떠나시는 것같은데...

   11번에서 리스크를 지지 않았다라고 말하고 있지만, 제가 보기에는 시간이라는 가장 큰 리소스를 넣었던게... 인생에서 몇년이라는 시간은 다시 돌아오는 것이 아니기에... 그것의 보상이 월급이나 그 부차적인것이라 생각합니다.

   1, 5, 7번은 간과하기 쉬운 문제라 생각합니다.

   아쉽네요. 뭔가 좋은(?) 스타트업을 만났다면... 조금은 달라지지 않았을까 합니다. 읽고서 아쉽네요...

   저도 아쉽다는 생각을 했습니다.

   창업자의 마인드가 조금만 달랐어도 더 좋지 않았을까 싶어요.
"
"https://news.hada.io/topic?id=6488","Replibyte - 개발DB를 실제 데이터로 채우는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Replibyte - 개발DB를 실제 데이터로 채우는 도구

     * 프로덕션 DB에서 데이터 일부를 추출하여 개발 DB에 채워주는 도구
     * 민감한 데이터(이름/생일/이메일/전화번호/사용자명 등)는 가짜 데이터로 치환하는 트랜스포머 제공
     * PostgreSQL, MySQL, MongoDB 지원
     * 온더플라이 압축 및 암호화
     * 특정 필드용 커스텀 WASM 트랜스포머 사용 가능
     * Rust 오픈소스. 경량 바이너리

   나름 유용할듯 한데, 설정 파일에 AWS credential을 적는게 있어서 요것만 유의하시면 될 듯 하네요
   HN 첫 댓글에 그런 우려에 대해서 이야기 합니다 https://news.ycombinator.com/item?id=31165538
"
"https://news.hada.io/topic?id=6492","Ask GN: 저번 달에 어떤 걸 해내셨나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 저번 달에 어떤 걸 해내셨나요?

   최근에 일일 회고에 점점 부담이 느껴서, TIL(Today I Learned!)에 인상을 받아 대충 정한 TIMI( Today i Made it! )를 적는걸로 대체하려고 생각했는데요. 오늘 한 일 중 자그마한 성공이나 성과를 자축하고, 기록하는 걸로 바꾸려고 다짐했어요.

   그런데 다른 분들의 성과와 성공도 궁금하더라고요! 그래서 ASK 글을 올렸습니다. 여러분의 아무리 자그마한 성공과 성과를 한번 자축하고 공유해봅시다! 'ㅁ '!

   다음주에 있을 개발자 conference 발표 자료를 만들었습니다.
   코로나19이후 2년만에 회사에서의 첫 해외 출장을 제가 끊네요.
   contents는 아직 조금씩 계속 손 볼게 있지만 정리되니 속이 다 시원하군요. 하하.

   아 해외출장 부럽습니다. 곧 많이 나갈수 있게 되기를!!

   2월부터 시작했던 스터디를 무사히 마쳤습니다.
   많이 아쉬웠는데 함께 해주셨던 스터디원 분들이 좋게 말씀주셔서 좋았네요

   저는 지난 달에...
     * 새 사무실로 이사를 했습니다. 뭔가를 사고 배치하고 하다보니 한달이 후다닥 갔네요.
     * 보드게임 모임을 몇개 시작하고, 1년만에 블로그에 보드게임 관련 글을 하나 썼습니다. https://xguru.net/2258
     * 피아노를 아이패드로 배우고 있는데요. 아직도 서투르지만, 보헤미안 랩소디와 바흐 미뉴에트/아리오소를 쳤습니다.
     * 운동을 시작했습니다.

   요즘은 긱뉴스에 올리려고 보는 글이 더 많아져서, 뭔가 새로운 거를 더 많이 못하는 듯 하네요.

   저는 저번 달에...
     * 사내 사이드 프로젝트를 2번 릴리즈 했습니다!
     * 소설을 8만자 썼어요. 'ㅁ '!
     * 좀 큰 업데이트가 있었는데, 어찌 QA로 무사히 이슈를 넘겼습니다(... ) 야호!
     * 글은 정말 많이 썼어요. Drafts가 이제 100개를 넘겼습니다.
     * 매일매일 TOD(IT)이라는 자그마한 회사 슬랙 채널을 만들었는데. 34분이나 들어오셨어요!

   다음 달... 에도 이 질문을 올리면, 간단한 오픈 소스 링크도 공유해드려보려고 해요! ImGui로 Youtube Music 앱을 만들어보고 싶거든요.

   축하드립니다!!!
   저도 뭔가 쓰고 싶은게 있었는데 다시 보니까 이번 달이었네요 ^^;
   다음 달....에도 질문 올려주시기를 기대하겠습니다. :D

   물론이죠! 'ㅁ '!

   :+1:
   감사합니다! :D
"
"https://news.hada.io/topic?id=6389","2022년 소프트웨어 엔지니어 현황 [41p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2022년 소프트웨어 엔지니어 현황 [41p PDF]

   Hired가 약 36만건의 구인/구직 활동과 2천명의 대상자 설문조사를 통해서 조사한 보고서

주요 시사점

     * Go 엔지니어들이 평균보다 1.8x 정도 더 많은 인터뷰 요청을 받음
       → Go > Ruby On Rails > Scala > Ruby > React Native
     * 회사들이 점점 더 많이 풀스택 엔지니어를 찾음. 고용시장이 불안정하고 팀원변경이 많으니 이 상황에서 효율성 극대화하려는 것
       → 풀스택 > 백엔드 > 프론트엔드 > 보안
     * 동기를 부여하는 것 : 새로운 도전과 지속적인 학습 72% > 제품/솔루션을 만드는 것과 문제 해결 63% > 수익 잠재력 62%
     * 사이버 공격이 많아지면서 사이버 보안 인력 수요가 많아지면서 가장 높은 평균 연봉을 받음
     * 글로벌 원격근무가 많아지면서 캐나다/영국의 연봉이 미국 연봉을 따라가는 중. 빅테크 허브 도시들 보다 작은 도시들의 연봉이 크게 인상
     * 원격근무 가능한 지원자들이 다른 지원자에 비해 20% 정도 더 많은 인터뷰 요청을 받음
     * 작은 회사들도 최고의 인재를 데려오기 위해 높은 급여와 혜택을 제공하면서 평균연봉이 $155K(1.9억원)인 큰 회사들을 빠르게 따라잡는 중
     * 설문에 답한 대부분의 소프트웨어 엔지니어들은 이상적인 작업환경의 핵심요소가 ""훌륭한 관리자, 함께 어울리고 배울수 있는 동료, 근무시간에 대한 유연성"" 이라고 얘기함
     * 부트캠프와 같은 비전통적인 방법을 통해 기술을 배우고 독학하는 소프트웨어 엔지니어의 수가 매년 꾸준히 증가 중

   GO 언어의 어떤점이 저런 수요와 인기를 가지는 걸까요?

   답변 감사합니다. 장기적으로 공부해볼만한 언어같네요

   동시성과 스케일링에 강점이 있어서 좋았습니다.
   기존 mvc 서비스들 뒷단에서 인프라 역할하는 프로젝트로써 시작하기 좋았습니다. 특히 시그널 서버로 여러 클라이언트들 간 fsm 연동에 유효했습니다.

   공급이 심하게 부족해서 그럴 수도 있겠죠.

   Low level, strong typing (less error prone), fast, (relatively) easy ramp up 정도를 특징이라고 보는데, 카뮤니티도 꾸준하게 성장하고, 엔지니어들한테서 힙한 느낌을 주는 인기 많은 언어라고 생각해요. 조만간 golang 은 좀 더 메이저가 되고 rust 가 golang 의 현재 위상을 가져가지 않을까 예상합니다.
"
"https://news.hada.io/topic?id=6428","Github Private Profiles 기능 베타 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Github Private Profiles 기능 베타 시작

     * 사용자가 자신의 GitHub Profile을 ""비공개""로 설정가능
     * GitHub 플랫폼내에서 프로젝트간에 자신의 사용자 데이터를 공유해서 사용 가능하도록 지원
     * Contribution/Activity를 숨기고 팔로워/스타/피드/리더보드등에서 노출 안 되도록 함
"
"https://news.hada.io/topic?id=6406","데이터 분석가 대디가 유소년 축구 플렉스 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       데이터 분석가 대디가 유소년 축구 플렉스 하기

     * 유소년 축구 선수인 아들의 모든 경기 영상을 분석
     * 볼터치 순간을 찾아서 경기팀/시간/영상링크/포지션/볼터치 상황(드리블,볼컨트롤,킥,패스,슛..)별로 잘한 점과 못한 점 기록
     * 포지션 분석
     * 성장하고 있는가 ?
     * 축구일기로 볼터치 드리블 코멘트 분류하기
     * 양발잡이 손흥민은 왜 EPL 최고 골잡이 인가?
     * Heatmap 분석
     * 도출한 인사이트

   '분석 인사이트를 써넣고 보니 Jason이 매번 클럽 수업 중에 많이 들었던 이야기이다. 이제는 왜? 그런 피드백을 주었는지 의미까지 이해하게 되었다. 내가 이해를 했다. Jason은 그렇지 않다... 지금 불러다 놓고 브리핑을 하고 싶은데... 말을 듣지 않는다. 아니다. 관심이 없다... 쩝...'

   역시 육아는 어렵죠...

   영상을 어떻게 분석했지,, 하고 보니 아버지의 사랑이었네요,,

   히트맵을 영상을 직접 보면서 분석하다니 정말 대단하신 분이네요.
"
"https://news.hada.io/topic?id=6496","EpubPress - 웹컨텐츠를 e북으로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       EpubPress - 웹컨텐츠를 e북으로 만들기

     * 웹페이지를 ePub으로 만들어주는 크롬 & FF 확장
     * 가독성을 위해서 광고 및 기타 방해요소들을 제거
     * 변환할 웹페이지를 브라우저 탭들로 다 열어둔 다음, 버튼 누르면 탭 순서대로 페이지를 가지는 이북을 생성
     * epub / mobi 지원
          + Kindle ,iBooks,Google Play Books, Calibre, Kobo 에서 읽기 가능
     * 백엔드 서버와 JS 라이브러리 오픈소스로 공개
"
"https://news.hada.io/topic?id=6400","원격 근무를 위한 조엘 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            원격 근무를 위한 조엘 테스트

   소프트웨어 팀의 품질을 평가했던 조엘 테스트를 Remote Job에 적용한다면?
    1. 같은 업무에 대해 같은 임금을 제시하나요?
    2. 직접 부딪히는 동료들도 모두 원격으로 일하고 있나요?
    3. 보상과 휴가가 당신의 위치와 무관한가요?
    4. 채용 프로세스도 모두 원격인가요?
    5. 회사의 소통방식이 비동기적으로 이루어지도록 만들어져 있나요?
    6. 원격 근무자에게도 동등한 승진 기회가 주어지나요?
    7. 회사 도구로 자신의 개인 장비를 사용하지 않을 것으로 예상되나요?
    8. 당신의 팀 및 매니저와 주단위 동기화를 하나요 ?
    9. 모든 정보들은 적혀있거나 녹화되어 있나요?
   10. 물리적으로 만나는 것도 장려하나요?

   조엘 번역 사이트가 더이상 서비스되지 않길래 아카이브.org링크를 공유합니다.
   https://web.archive.org/web/20171226123400/…
"
"https://news.hada.io/topic?id=6499","Statuspage: 무료로 시작하는 API 상태 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Statuspage: 무료로 시작하는 API 상태 페이지

개요

   API 상태 페이지를 손쉽게 구축할 수 있는 아틀라시안의 서비스

방식

   크론잡 혹은 깃헙 액션으로 자사 API 상태를 주기적으로 수집하고, 장애 발생시 Statuspage API에 알려주면 API 상태 페이지를 손쉽게 구축할 수 있음.

가격 정책(공개 페이지 용, 비공개 상태 페이지는 별도)

  무료 플랜

   메트릭 2개
   구독 100명
   작업자 2명
   이메일 알림
   슬랙 연동
   REST API

  취미 플랜(월 $29)

   메트릭 5개
   구독 250명
   작업자 5명
   이메일 알림
   슬랙 연동
   커스텀 도메인
   REST API

  스타트업 플랜(월 $99)

   메트릭 10개
   구독 1,000명
   작업자 10명
   이메일, SMS, 웹훅 알림
   슬랙 연동
   커스텀 도메인, 커스텀 CSS
   REST API

  비즈니스 플랜(월 $399)

   메트릭 25개
   구독 5,000명
   작업자 25명
   이메일, SMS, 웹훅 알림
   슬랙 연동
   커스텀 도메인, 커스텀 CSS, HTML, JS
   컴포넌트 구독
   REST API

  엔터프라이즈 플랜(월 $1,499)

   메트릭 50개
   구독 25,000명
   작업자 50명
   이메일, SMS, 웹훅 알림
   슬랙 연동
   커스텀 도메인, 커스텀 CSS, HTML, JS
   컴포넌트 구독
   REST API
"
"https://news.hada.io/topic?id=6433","호텔에서 남겨진 비누는 어디로 가는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          호텔에서 남겨진 비누는 어디로 가는가

     * 출장 많이 다니던 사람이 호텔에 물어보니 이걸 다 버린다는 것에 착안
     * 버려진 비누를 수집해서 분쇄하여 재활용 비누를 만드는 ""Clean the World"" 라는 회사를 차림
     * 객실당 $0.5~$1을 받고 처리해 줌(수집통, 배송, 스탭 교육 포함)
     * 현재 전세계 8천개의 호텔(140만개 객실)과 파트너십 (하얏트,메리어트,힐튼..)
     * 호텔은 자신들이 기부한 비누를 통해 얻어진 환경 영향 보고서도 받게 됨
     * 이 비누들은 UNICEF, UN, 월드 비젼등을 통해서 전세계 필요한 곳에 배송됨
     * 하지만 팬데믹으로 호텔이 폐쇄되고 호텔 체인들이 비누에서 리필가능한 디스펜서로 전환하면서 피봇이 필요
       → 이제 가정용 제품도 출시

   글 중간에 이거 처음 프로토타이핑 하고 나서 ""빌 & 멜린다 재단""에 지원 받겠다고 요청서 집어넣으면 바로 $1m 주겠다고 할 줄 알았는데..
   8시간만에 거절 통지 받고 ""앞으로 3년간은 재지원 하지 마세요"" 라고 통보 받고나서,
   비즈니스 모델을 객실당 돈을 받는 ""annuity model""(연금 모델)로 바꿨다고..
   역시 비즈니스 모델이 중요합니다. ㅎ
"
"https://news.hada.io/topic?id=6430","Rust9x: Rust를 윈95/NT용으로 컴파일 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Rust9x: Rust를 윈95/NT용으로 컴파일 하기

     * Rust를 포크해서 i586/i686 용 msvc로 컴파일
     * 32비트 윈도우를 모두 지원 : 95/98/Me/NT 3.51/NT 4.0/2000/xp/Vista
"
"https://news.hada.io/topic?id=6426","Podman Desktop Companion","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Podman Desktop Companion

     * 데스크탑용 GUI 오픈소스 컨테이너 관리자
     * 윈/맥/리눅스 크로스플랫폼
     * 컨테이너/이미지/가상머신/Secret/볼륨 관리(CMS)
     * podman 사용법을 익히는 도구로도 유용

   Docker에서 Podman으로 전환하기 (리눅스)
   Docker에서 Podman으로 전환하기 (맥/윈)
   Docker Desktop 이제 250+명 회사에서 사용시엔 유료
"
"https://news.hada.io/topic?id=6490","번아웃 예방하기 : 관리자를 위한 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         번아웃 예방하기 : 관리자를 위한 툴킷

   GitLab 경영진들이 직접 정리한, 매니저를 위한 팀원 번아웃 방지 전략 12가지
     * 휴식 장려 : 반차 정도도 도움이 됨. 휴가를 계획하라고 장려하기
     * 압박 낮추기 : 번아웃이 우려되는 사람에게 목표 및 OKR 압박을 줄이고, 목표에 대해 묻는것 조차도 줄이기
     * 더 긍정적으로 : 솔직히 매니저가 스트레스의 큰 원인이 될 수 있으므로, 팀 멤버와 그들의 보고서에 대해 더 긍정적인 태도를 갖도록 노력하기
     * 인원 늘리기 : 대부분의 경우, 소수에게 일이 너무 많으므로 매니저들은 인원을 늘릴 방법을 찾아야 함. 임시적으로 다른 팀에서 빌려오거나 컨설턴트를 고용하는 것도 가능
     * 팀 멤버들에게 외부 코칭 제안하기 : 자신들이 고생하는 것을 이야기 할 수 있음(그들의 매니저 포함)
     * 직원들에게 정신 건강 관리 서비스를 회사가 제공한다는 것을 리마인드 시키기 : 깃랩은 Modern Health 통해서 서비스 제공 중
     * 감사 표시하기 : 멤버들 집으로 선물을 보내고, 개인적 관계를 증진시키도록 투자하기
     * 진척을 축하하기 : 번아웃은 보통 정체감에서 발생하기도 함. 매일 진척되는 부분을 알아채기는 어려움. 매니저들은 작은 승리들을 축하하고, 이미 등반했던 산들에 반영해야함(예전 성공들에 추가)
     * 동감하기 : 일은 어려움. 대화를 나눠보기
     * (매니저 본인부터)예시를 보여주며 리딩하기 :
          + 업무시간을 설정하고 지키기
          + 6시 넘어서는 슬랙 메시지에 반응하지 않고 내일 아침까지 참기
          + 비동기로 할수 있는 것 찾기
          + 진행중인 작업에 대해 이야기하고, 중요하지 않은 작업이 어떤 것인지 식별하도록 지원하기
          + 다른 멤버에게 위임할 수 있는 작업을 찾고 그 위임 권한을 부여하기
     * 멤버들에게 실패할 것들을 물어보고 찾아서 그것에 들이는 노력을 줄여서, 일 하는 시간을 줄이기
     * 번아웃에 대한 우려를 남들과 공유하기

   자기 스스로를 관리할 때 할 수 있을 만한 건...
     * 진척을 기록하기
       하나 정도려나요. 대학원에서 번아웃이 온 뒤로 아직도 회복이 덜 됐는데, 왜 이렇게 뭐든 하기가 싫을까요. 왜 열심히 뭔가를 했는지 이전에는 무슨 원동력으로 일을 해냈는지 모르겠습니다. 정신과도 계속 다니고는 있는데 마음가짐이 쉽게 바뀌지는 않네요.

   2022년 테크 업계 번아웃 실태 보고 (번역글)
   의욕적인 개발자가 번아웃을 피하는 방법 [번역]
"
"https://news.hada.io/topic?id=6504","Frappe - 인터랙티브 Gantt 차트 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Frappe - 인터랙티브 Gantt 차트 오픈소스

     * 태스크 드래그, 리사이즈로 기간 조절 가능
     * 태스크 간 의존성 및 타임스케일 지원
     * 일/주/월 및 하루 2/4분할 보기 지원
     * 태스크 클릭시 HTML 팝업
"
"https://news.hada.io/topic?id=6394","Show GN: 개발자 데스크 셋업 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: 개발자 데스크 셋업 모음

   개발자분들 장비 셋팅 어떻게 하고 쓰시는지 모아봤습니다.

   모니터 뭐 살까? 스탠딩 데스크 뭐 살까? 고민이셨던 분들은 한번 다른 분들 뭐 쓰나 보면서 고민해보세요.

   개발 공부하는 커뮤니티에서 오픈하고 모았더니 Paypal 본사 소프트웨어 엔지니어부터 초등학생 개발자분까지 다양합니다.

   허먼밀러 쓰시는 분은 한분도 안 계시지만 스탠딩 데스크는 대부분 다 쓰시는 점도 재밌네요.

   런칭 축하드립니다~!
   비슷한 Setups - 다른 사람의 책상은 어떨까 ? 를 공유 했던 적이 있는데요.
   한국분들이 올려주시니 역시 색다른 재미가 있네요.

   입력폼을 구글폼으로 한 것은 훌륭하다고 생각됩니다. 이런 다양한 입력이 필요한 사이트가 초기에 입력폼을 잘 만들기는 참 어렵거든요.

   다양한 장비들이 등록되어서 공유되면 심심할때 보러가기 좋을 것 같아요!
   ( 장비 종류별 필터링이 있으면 좋을 것 같네요. 아직 많지 않아서 개발 안하신듯 하지만 )

   오 올려주신 내용에 참고할만한 서비스들이 많네요! 참고해서 더 알차게 개선해보겠습니다 ^^!
   장비 종류별 필터링은 노션과 oopy를 이용하여 노코드로 만들어 필터추가를 살펴보지 못했어요.
   대신 우측 검색 에서 장비 종류를 검색하면 제품 명에 장비 종류 이름이 없어도 검색이 됩니다.
   예) chair 검색 -> sidiz T50 Air 등 chair가 제품종류 태그인 모든 의자 종류들이 나옵니다!
"
"https://news.hada.io/topic?id=6491","OPT - Meta가 공개한 GPT-3 규모(175B)의 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OPT - Meta가 공개한 GPT-3 규모(175B)의 언어 모델

   ""Open Pre-trained Transformer Language Model""
     * 이런 대규모 언어 모델은 상당한 자본이 들어야 구축이 가능하며, API 접근만 공개해서는 연구하기가 어려움
     * 관심있는 연구자들을 위해 전체 모델과 실험용 코드, 로그북을 모두 다운로드 가능하게 공개
     * GPT-3 보다 Carbon Footprint가 1/7만 필요함

   https://github.com/facebookresearch/metaseq
"
"https://news.hada.io/topic?id=6398","ClojureDart - Dart로 컴파일되는 Clojure","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ClojureDart - Dart로 컴파일되는 Clojure

     * Clojure 언어를 Dart로 이식하는 프로젝트
     * Dart 와 Flutter를 활용하여 Clojure의 활용범위를 모바일 및 데스크탑 앱으로 확장
     * Roam Research의 모바일 앱에서 사용 중
     * 아직 REPL도 없고, multi-method/sorted-collection 등이 지원 안됨
     * 올해 부활절 전에 공식 릴리즈 예정

   Clojurescript와 electron으로 크로스앱만드는것과 어떤 차이가 있을까요?

   보통 이런 언어 컨버전 프로젝트들은 끝이 안좋던데..

   이용된 사례의 얘기를 들어보니 흥미롭네요. https://news.ycombinator.com/item?id=31050693
     * 제작자들의 필요로 해서 시작했는데, 1년쯤 만들다가 노트앱인 Roam Research의 사람들을 만남
     * 그래서 Roam Research가 이거에 모바일 전략을 걸기로 하고 후원함
     * 왜냐하면, Roam의 복잡한 웹앱은 Clojure로 개발됨
     * 모바일 앱을 만들고 싶지만, 처음부터 재개발 하기보다는 자신들이 사용하는 Clojure 언어를 Dart로 변환해서 사용하고 싶음
     * 이러면 기존 코드를 재사용하면서 모바일 프론트엔드만 Flutter로 만들면 됨
     * 이 계획이 성공해서, Roam은 이 ClojureDart를 이용해서 iOS/Android 앱을 출시했고 사람들이 사용중
"
"https://news.hada.io/topic?id=6466","AVA (Node.js 테스트 프레임워크) 문서 한글화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AVA (Node.js 테스트 프레임워크) 문서 한글화

   개인적인 공부 겸 AVA란 Node.js 테스트 프레임워크 documentation 번역에 도전해보았습니다.

   문서 번역이 처음이라 실수가 많을 수 있습니다..

   번역이 조금이라도 애매한 것 같으면 영어 표현을 그대로 옮겨썼습니다.

   양이 꽤 긴 편인 것 같은데 혹시라도 리뷰해 주실 분이 계시다면 감사하겠습니다.

   (부자연스러운 번역, 깨진 이미지, 링크 지적 등 모두 환영합니다.)
"
"https://news.hada.io/topic?id=6418","Go는 다음 릴리즈 부터 pdqsort를 사용할 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Go는 다음 릴리즈 부터 pdqsort를 사용할 예정

   ""Pattern-defeating QuickSort""
     * 랜덤 퀵소트의 빠른 평균 케이스와 힙 소트의 빠른 최악의 케이스를 합치고, 특정 패턴의 입력에 대해서 리니어 시간을 달성하는 최신 정렬 알고리즘
       → Intro Sort(기본적으로 퀵소트인데, 재귀가 깊어지면 힙 소트를 사용)를 향상시킨 확장
     * 현재 C++ 및 Rust 구현체는 나와 있음

   관련 글들
     * 이 글의 HN 링크 Go will use pdqsort in next release
     * Changing std::sort at Google’s Scale and Beyond
"
"https://news.hada.io/topic?id=6412","5장의 차트로 2022년 소프트웨어 엔지니어 연봉 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    5장의 차트로 2022년 소프트웨어 엔지니어 연봉 이해하기

    1. 최고 연봉 직군 : 보안 > 검색 > NLP > 모바일 > 머신러닝 > AR/VR > 백엔드 > DB > 블록체인 > 데이터
    2. 최고 수요 기술 : Go > Ruby On Rails > Scala > Ruby > React Native > Kotlin > Typscript > Kafka > React > Node.js
    3. 개발자가 선호하는 언어 : Python > Javascript > Java > TypeScript > C# > Go > HTML > C++ > Ruby > C
    4. 미국에서 가장 연봉 높은 지역 : 샌프란시스코 > 시애틀 > 뉴욕 > 보스턴 > LA > 오스틴 > 아틀란타 > 워싱턴DC > 샌디에고 > 시카고
    5. 개발자가 해결하고 싶은 글로벌 이슈 : 공중 보건(Public Health) > 교육 > 일의 미래 > 환경 이슈 > 경제적 기회 부족 > Moonshots > 대체화폐 > 교통/물류 > 우주 > 음식/식수 해결

   저 글에 살짝 언급되는 ""not including bonuses or stock options"" 가 핵심입니다!

   실제 보상은 훨씬 더 높은 ...

   'HTML은 프로그애밍 언어가 아닙니다!!'

   저거 보면 우리나라 기술 수요가 너무 다른 거 같아서 좀 그렇네요.

   stackoverflow의 내용이랑은 언어 선호도에서 차이가 많네요.

   Hired가 조사한 2022년 소프트웨어 엔지니어 현황 에서 연봉에 관련된 것만 그래프로 추출한 내용이네요.

   주제와는 상관없지만, 혹시 파비콘 업데이트 가능할까요?

   다크모드에서 긱뉴스 링크에 나오는 로고는 잘 보이는데,
   https://user-images.githubusercontent.com/25581533/…

   파비콘은 그냥 검정색으로만 보여요.
   https://user-images.githubusercontent.com/25581533/…

   파비콘 SVG로 변경 및 다크모드 적용도 백로그에 있는데.. 손이 잘 안가요 ㅠ 곧 하겠습니다.

   말 나온 김에, 상단 메뉴 중 [쓰레드]와 [댓글]에서 링크 걸린 텍스트의 스타일이 다른 것도 살짝 불편합니다. 댓글 화면에서 보이는 링크는 점선 모양 밑줄이 있는데, 쓰레드 화면에는 없어요.
"
"https://news.hada.io/topic?id=6397","[판결] 보이스피싱 피해자의 '공동인증서'로 비대면 대출된 경우, 본인여부 판단 의무는 금융사에 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [판결] 보이스피싱 피해자의 '공동인증서'로 비대면 대출된 경우, 본인여부 판단 의무는 금융사에 있다

     * 보이스피싱범이 빼낸 개인정보로 공동인증서를 발급받고 비대면 전자금융거래방식으로 대출을 받음
     * 기존 '공인인증서'의 경우는 공인기관에서 발급된 것이라, 추가 본인확인 절차가 없어도 거래가 유효하게 성립하고 명의자에게 효력이 미침(대출금을 갚아야 함)
     * 공동인증서는 비대면 실명확인 방법을 통해서 금융기관이 꼭 확인할 의무가 있음 ('실명확인증표 사본 제출'과 '영상통화' 등 7가지 방법이 규정되어 있음)
     * 그래서 본인 확인을 진행하지 않은 B캐피탈에서 받은 대출은 갚지 않아도 됨

   공동인증서랑 공인인증서는 이름만 같은게 아니었나보군요.

   실명확인 방식을 찾아보니 아래 5개 중 필수로 2가지를 사용하고
     * 실명확인증표 사본 제출 : 사진촬영 및 스캔 후 신분증진위확인 서비스를 이용하여 확인
     * 영상통화
     * 접근매체 전달시 확인 : 현금카드, 보안카드, OTP 전달시
     * 기존 계좌 활용 : 기존 거래 계좌에 소액이체하여 실명확인
     * 기타 : 지문인식, 정맥인증 등 바이오 인증 같은 신뢰도의 인증기술
       추가로 2개의 방식을 더 권고하고 있네요
     * 다수의 개인정보 검증 : 고객이 제공한 개인정보와 신용정보사가 보유한 정보 대조
     * 타기관 확인결과 활용 : 공인인증서, 핸드폰, 아이핀등 활용

   이제는 신분증 스캔도 마구 요구하면 안될듯, 앱 말고 핸드폰으로 찍어서 보내달라는 경우도 꽤 있던데..
"
"https://news.hada.io/topic?id=6489","인도, RISC-V CPU 로드맵 발표 및 2023년 제품 출시 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인도, RISC-V CPU 로드맵 발표 및 2023년 제품 출시 예정

     * 정부 주도의 Digital India RISC-V(DIR-V) 프로그램 시작
       → 2023년 12월에 상용 실리콘 & 디자인 완성 목표
     * DIR-V는 인도의 반도체 스타트업을 촉진할 것이며, 인도를 반도체 국가로 만들겠다는 나렌드라 모디 총리의 미션 중 일부
     * 스타트업, 학계, 글로벌 메이저 연계로 세계 RISC-V의 인재 허브가 될 것
     * 전자정보부(MeitY)는 RISC-V International 의 프리미어 보드 멤버로 조인할 계획

     * 왜 RISC-V가 성공하고 있을까
     * M1은 RISC-V의 상승을 예고한다
     * MIPS, 자체 아키텍처를 버리고 RISC-V로 전환
     * 애플, RISC-V 프로그래머 구인중
     * Nios V - 인텔의 RISC-V 프로세서
     * 인텔, RISC-V 멤버로 가입하고 1.2조원 파운드리 펀드 조성
"
"https://news.hada.io/topic?id=6429","애플 macOS 서버 단종","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플 macOS 서버 단종

     * 기존 macOS 서버 사용자들은 Monterey로 계속 사용 가능
     * 캐슁/파일공유/타임머신 서버 등은 이미 High Sierra 부터 기본 포함
     * Profile Manager는 MDM 솔루션으로 가고, 나머지 서버들은 오픈소스/상용 대체제를 리스팅
"
"https://news.hada.io/topic?id=6476","차세대 CFO의 부상 : 재무의 역할 및 기술 스택의 진화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    차세대 CFO의 부상 : 재무의 역할 및 기술 스택의 진화

     * 재무 전문가들이 주요 의사결정 활동을 지원하기 위해, 비즈니스 전반에 직접 참여 하도록 요청받고 있음
     * CJ/NDR/FinOps 등 CFO의 책임 영역이 확장
     * 실시간 데이터 접근, 데이터 사이언스 활용, 자동화 등 다양한 기술적인 과제들이 생기고 있음 → 재무 리더를 위한 기술 스택이 필요

차세대 재무 기술 스택 : 3가지 핵심 단계로 구성되며, 각 단계 아래에 분야별로 다양한 서비스들이 있음

     * 예측과 예산 책정(Forecast & Budgeting)
          + Financial Planning & Analysis : Anaplan, Adaptive Insights(Workday), Mosaic, DataRails, Abacum, Pigment,..
          + Cash Flow Mgmt : Agicap, Trovata
          + Headcount : ChartHop, Knoetic, TruePlan
     * 실행과 제어(Execution & Control)
          + Billing & AR(Accounts Receivable) : Chargebee, Metronome, Octane,..
          + Spend Management & AP(Accounts Payable) : AvidXchange, Zip,..
          + FinOps & Cloud Optimization : CloudHealth, Cloudability, Zesty, Kubecost, Vantage
          + Saas Mgmt. : Productive, Zylo
          + Payment Operations : Modern Tresury, Proper, Fragment, Twisp
          + Rebate Mgmt. : Enable
     * 결과 및 측정(Outcomes & Measurement)
          + Bookkeeping & Tax : FloQast, TaxBit, Anrok, Bench, Taxdoo,..
          + Connected Spreadsheets : Canvas, Coefficient, Equals
          + Commissions : CaptivateIQ, Spiff
          + Equity & Debt Mgmt. : Carta, Finley
          + Dashboarding & Analytics : Tableau, Looker, Digits, Subscript
     * 그외의 시스템들
          + ERP : Quickbooks(Intuit), NetSuite(Oracle), SAP
          + Data Warehouse : Google BigQuery, Snoflake, Amazon RedShift
          + Banking : Mercury, Brex, Qonto
          + Payroll : Gusto, deel, Rippling, pento
          + Data Connectivity : Merge, Rutter, Codat, PLAID

Finance 기술의 미래에 대한 예상

    1. 차세대 재무는 데이터 사이언스와의 융합이 주도하고 있음
    2. 클라우드 활용의 폭발적인 증가로 클라우드 비용에 대한 프로그램적인 모니터링과 최적화 필요성을 증대시킴
    3. SaaS 플랫폼에 대한 수요 증가로 인해, 벤더 관점에서 계약을 관리하기 위한 지능적이고 자동화된 빌링 및 매출 인식 도구의 필요성이 증가
    4. 아직도 회계 마감은 수작업으로 남아있어서, 마감 시간 및 오류를 줄이고 재무 보고를 간소화 하는 자동화된 재무 마감 솔루션이 필요함
    5. 토큰화 경제의 부상은 세금 및 회계상의 의미에 있어서 광범위한 혼란을 가져왔고, 그 결과 암호화폐 세금을 단순화 하고 기업이 규정을 준수하도록 보장하는 써드파티 소프트웨어가 필요하게 됨
    6. 실시간 재무 데이터에 대한 수요 증가

재무 소프트웨어를 위한 기회

     * 재무 부서에 소프트웨어를 판매하는 것은 이 분야의 재직자가 많아서 어려운 일이었지만, 차세대 제무 소프트웨어의 시대가 도래했다고 믿음
     * 아직 기술에 의해서 지원받지 못하고 있는 재무 워크플로우의 중요 구성요소들을 식별하는 벤더들에게 큰 기회가 있음
     * 광범위한 재무 기능들이 조직 내에서 더 다양하고 전략적인 역할을 맡게 됨에 따라, 효율성, 데이터 기반 의사 결정, 전반적인 재무 성과 관리를 개선하는 소프트웨어에 대한 투자 욕구는 계속 커질 것
"
"https://news.hada.io/topic?id=6464","Skia Canvas - Node.js용 HTML Canvas API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Skia Canvas - Node.js용 HTML Canvas API

     * Skia엔진을 이용해서 Canvas 엘리먼트를 에뮬레이트해서 서버에서 브라우저 없이 이용
     * Rust 와 C++로 개발되어 빠름
     * JPEG & PNG, PDF & SVG 포맷 지원
     * 파일/버퍼/dataURL 로 저장
     * 비동기 렌더링 및 File I/O를 위해 쓰레드와 채널(Rust) 사용
     * 캔버스내에서 여러 페이지를 만들고, 멀티 페이지 PDF로 저장하거나 여러개의 이미지파일로 저장 가능
     * 이미지 처리용 CSS 필터 이펙트 모두 지원
     * 다양한 타이포그래픽 제어 지원 : 멀티라인, 워드랩, font-variant, tracking & leading
"
