"https://news.hada.io/topic?id=12218","Duke 대학교 도서관이 Basecamp 사용을 중단하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Duke 대학교 도서관이 Basecamp 사용을 중단하는 이유

     * 거의 10년간 구독해온 프로젝트 관리 플랫폼 Basecamp 사용을 중단하기로 결정
     * Basecamp 모회사인 37signals의 경영진이 지속적으로 야기할 수 있는 ""피해""와 조직 내 사용 빈도를 고려한 결과, 현재 구독을 갱신하지 않기로 함
     * 콘텐츠를 Export한뒤 다른 생산성 플랫폼으로 전환 예정

Basecamp 내부 논란과 리더십의 대응

     * 2009년에 Basecamp의 고객 서비스 담당자가 ""재미있는 고객 이름""을 리스트로 만들어서 공유했고, 이게 오래 유지되었다가 2021년에 이슈가 됨
     * 이 인종 차별적인 일이 이슈가 되자 경영진은 ""직원들의 사회적, 정치적 토론을 금지""함
     * 이로 인해 대규모 사직이 발생하고, 다양성, 형평성, 포용성(DEI) 활동에 대한 ""지원""에서 ""제한""으로 전환한 경영진의 실패가 드러남
     * 이 일이 있었던 2021년에도 도서관 팀내에서 이슈가 되었지만, Basecamp 문화와 플랫폼을 떠나는 결정이 일상 업무에 미칠 영향에 대한 우려가 제기됨
     * 직원들은 플랫폼 사용의 편리함과 의존하는 프로젝트의 수를 고려하며, 타사의 가치에 대응하는 방법에 대해 논의
     * 그러나 당시에는 구독 취소를 추진하지 않기로 결정

블로그 포스트와 가치 충돌

     * 37signals 공동 창립자이자 CTO인 David Heinemeier Hansson(DHH)의 블로그 포스트가 올해 7월에 다시 팀 내에서 공유됨
     * ""토지의 법칙"" 이라는 제목의 글에서 대법원의 ""대학 입학 시 소수 집단 우대 조치 프로그램 폐지"" 결정을 축하하며 DEI의 우세가 약해지는 것을 긍정적으로 묘사함
     * 해당 포스트에서는 조지 플로이드 사건 이후 발생한 폭동으로 묘사하고, DEI 운동이 강화되었다고 주장
     * 이러한 표현은 2020년의 대부분 평화로운 시위를 왜곡하고, 폭력적인 이미지를 조장하는 극단주의자들의 언어를 사용하는 것
     * 또한 그의 ""메타는 직장에서 정치에 관한 논의를 하지 않습니다(아무도 신경쓰지 않습니다)"" 글도 다시 이슈가 됨
     * 우리는 DHH의 블로그 게시물에 있는 많은 허위와 왜곡을 각각 다루지는 않을 것이지만, 우리의 가치에 반하는 몇가지 상징적인 문구에 초점을 맞출 것
          + (원문에서는 그가 DEI 운동을 이상하게 표현하고, 2022년말 기술 근로자 대량해고를 기뻐한 것 등을 얘기합니다.)

Duke 도서관의 가치와 대응

     * 도서관은 자체 가치와 충돌하는 기업들과의 경험이 많으며, 학술 출판 시스템과 같이 가치에 반하는 사업 모델을 가진 기업들과 거래하고 있음
     * 도서관은 인종차별적이고 백인 우월주의적인 가정에 기반한 자료를 수집하고 연구를 위해 유지하기도 함
     * 도서관은 또한 인류가 창조할 수 있는 것 중 최악의 것을 너무 잘 알고 있음. 왜냐하면 그것을 수집하기 때문
     * 그러나 도서관은 자체 직장 문화와 관행이 과거에 야기한 해로움을 인지하고, 이를 완화하기 위한 노력을 함
     * 중요한 것은 우리가 완벽하거나 본받아야 할 모델이라는 것이 아님. 요점은 우리가 순진하지 않다는 것.
     * 흑인 운동가들이 주도하는 경찰의 폭력과 조직적인 인종차별에 대한 전국적인 조직적 항의 운동을 ""폭동"" 이라고 부르는 기술회사의 상사,
       팀원 중 일부가 우스꽝스럽다고 생각하는 비영어권 이름 목록을 만들었을때 이에 반대하는 목소리를 낼 수 있는 사람들을 해고하는 것을 즐기는 상사가 있는 회사를 볼 때
       우리는 누구를 상대하고 있는지 알 수 있게 됨
     * 누군가의 생계를 없애고 싶어서, 경영진을 괴롭히고 싶어서, 또는 구독료가 큰 변화를 가져올 것이라고 생각해서가 아님
     * 그 공간을 채울 수 있는 다른 생산성 도구가 있고, 이 경우에는 선택의 여지가 있음
     * 그래서 우리는 Basecamp 구독을 종료하기로 결정 했음

   저는 개인적으로 DHH가 개발자로서는 독특한 사람이라고 생각이 듭니다만, 회사의 경영진으로서는 어울리지 않는 언행을 자주 하는 것 같아요.

   이 글에 대한 해커뉴스 댓글도 몇개 가져와 봅니다.

        Hacker News 의견

     * 한 해커뉴스 사용자는 듀크 대학교 도서관 디지털 프로젝트 팀의 블로그를 발견하고, 게시물의 품질이 매우 높아서 예전 블로깅 시절을 떠올리게 한다며 추천함.
     * 또 다른 사용자는 듀크 대학교의 FIRE 평가가 전반적으로 '녹색'이라며, 이는 대학이 자유 연설을 명목상 보호하는 정책을 가지고 있음을 의미함.
     * 한 사용자는 더크 대학교가 새로운 플랫폼으로 Microsoft To Do를 선택한 과정이 궁금하며, 추후에 이에 대한 게시물을 기대함.
     * 어떤 사용자는 이러한 전환 작업을 수행하기 위해 전담 팀이 있을 것이라고 추측함.
     * 한 에이전시는 2018년에 Basecamp에서 Asana로 전환했다고 밝히며, Basecamp의 리더십에 대한 비판적인 의견을 나타냄.
     * 한 사용자는 듀크 대학교의 게시물이 Basecamp보다 대학에 더 부끄러운 내용이라고 평가함.
     * 다른 사용자는 듀크 대학교가 도덕적으로 우월한 결정을 내렸다고 자랑하는 것처럼 보이며, 37signals에서 마이크로소프트로 전환한 것이 도덕적인 면에서 인상적이라고 풍자적으로 언급함.
     * 한 사용자는 37signals의 이념적 전환에 동의하지 않지만, 더크 대학교의 게시물 역시 이념적이고 편협하다고 비판함.
     * 또 다른 사용자는 프로젝트 관리 도구를 변경하는 것이 어리석은 이유라고 생각하며, 이로 인한 사용자들의 불편함이 37signals가 만들어낸 해로움보다 클 것이라고 지적함.
     * 한 사용자는 다른 의견을 가지고 있다는 이유로 해를 끼친다고 비난하는 레토릭을 비판하며, 이것이 대학 학위를 가진 상류 중산층 사람들의 '아이들을 생각하라'와 같다고 표현함.

   해커뉴스 댓글을 직접 본 건 아니고 이 요약 댓글만 본 것이지만, “바이럴이 가능한 유명인이, 사회에 해를 끼치는 관점을 설파하고 자기 기업에 그 관점을 적용하면서 실질적 영향까지 미치는 것“을 단순히 ”다른 의견“ 이라고 표현하는 것도 문제라고 생각됩니다. 공적 역할을 가지는 교육기관의 의사결정에 공적 관점을 담는 것도 당연한 일이라고 보고요.
"
"https://news.hada.io/topic?id=12184","비행기 추락 조사 방해 혐의로 유튜버에게 6개월 징역형 선고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   비행기 추락 조사 방해 혐의로 유튜버에게 6개월 징역형 선고

요약 제목: 유튜버, 연방 조사 방해로 6개월 징역 선고

     * 산타바바라 카운티의 유튜버 파일럿이 연방 조사를 방해한 혐의로 6개월의 연방 교도소 징역형을 선고받음.
     * 트레버 다니엘 제이콥(30세)은 자신이 고의로 추락시킨 비행기의 잔해를 파괴하여 연방 조사를 방해한 혐의를 인정함.
     * 제이콥은 스폰서십 계약에 따라 유튜브 비디오에 지갑을 홍보할 예정이었으며, 비행 중 비행기에서 탈출하여 추락하는 장면을 촬영하여 온라인 조회수를 늘리려 함.

요약 제목: 비행기 추락 사건의 전말

     * 제이콥은 2021년 11월 24일, 마모스 레이크로 가는 척 하며 비행기를 조종하다가 고의로 탈출하여 추락 장면을 촬영함.
     * 추락 후, 제이콥은 비행 및 추락 영상이 담긴 데이터를 회수하고, NTSB에 추락 사실을 알림.
     * 제이콥은 추락 잔해를 보존하겠다고 약속했으나, 실제로는 잔해를 회수하여 파괴하고 증거를 은폐함.

요약 제목: 연방 조사 기관과의 상호 작용

     * NTSB와 FAA는 추락 사건에 대한 조사를 시작했으며, 제이콥은 조사관들에게 거짓말을 하여 잔해 위치를 모른다고 주장함.
     * 제이콥은 나중에 잔해를 헬리콥터로 이송하여 파괴하고, 이는 연방 조사를 방해할 의도였음.
     * 제이콥은 유튜브에 ""I Crashed My Airplane""이라는 제목의 비디오를 업로드하여 수익을 창출하려 했으며, 연방 조사관들에게 거짓 보고서를 제출함.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 연방 조사를 방해한 행위에 대한 법적 책임과 그로 인한 처벌이다. 유튜버가 조회수를 늘리기 위해 고의로 비행기를 추락시키고, 이를 영상으로 촬영하여 소셜 미디어에 게시한 것은 불법 행위이며, 이러한 행위가 법적으로 어떻게 다뤄지는지에 대한 사례를 제공한다. 이 사건은 소셜 미디어에서의 인기와 수익 창출을 위해 무리한 행동을 하는 현상에 대한 경각심을 일깨우며, 법적 결과에 대한 인식을 높이는 데 기여한다.

        Hacker News 의견

     * 비행기 추락 사건의 주인공이 고의로 비행기를 추락시킨 혐의로 감옥에 가는 것이 아니라, 연방 조사를 방해하기 위해 고의로 비행기 잔해를 파괴한 혐의로 수감됨.
          + 협조했다면 면허 취소와 벌금만으로 끝날 수도 있었으나, 잔해를 은닉하고 파괴하는 등의 행동으로 더 큰 법적 책임을 지게 됨.
     * 해당 사건의 주인공이 유죄인지 여부보다는, 이 사건을 통해 재정적으로 성공할 수 있을지가 더 흥미로운 질문임.
          + 수백만 회의 조회수와 스폰서십 계약이 있었기 때문에, 일부 기업들이 법을 고의로 어기고 그 대가를 지불하는 경우가 있으므로 독립적인 사업가들도 그럴 수 있음을 시사함.
     * 해커뉴스에서 이전에 많은 토론이 있었으나, 추락이 고의였는지에 대한 초기 분석이 가장 흥미로웠음.
     * 이 사건의 주인공은 훨씬 더 긴 형을 받아야 한다는 의견 제시.
          + 사람이나 재산에 큰 위험을 초래할 수 있으며, 심지어 외진 지역에서도 불이나 다른 사고를 일으킬 가능성이 있음.
     * 주인공이 이미 조종사 면허를 다시 얻었다는 사실.
     * 이 사건으로 인해 다른 사람들이 이런 어리석은 행동을 하지 않도록 충분한 교훈이 되길 바람.
          + 이야기 전반에 걸쳐 주인공의 행동이 매우 무모했으며, 조사관에게 거짓말을 하고 범죄 증거를 파괴하는 것으로 극에 달함.
     * 모든 일이 지갑 광고를 위해서였다는 것에 대한 놀라움과 비판.
     * 주인공이 추락 지역이 안전한지, 산불을 일으키지 않을지 충분히 확인했는지에 대한 의문 제기.
          + 사고가 발생하지 않은 것은 단지 운이 좋았을 뿐임.
     * 비행기를 고의로 추락시키는 위험 대비 보상 계산을 이해할 수 없음.
          + 조회수 증가(보장되지 않음)가 비행기 비용과 추락 후의 개인적 위험보다 큰가에 대한 의문.
     * 연방 정부가 추락 자체가 아닌 방해 혐의로 처벌함으로써 쉬운 길을 택했다는 의견.
          + 추락 자체에 대한 처벌은 중대한 선례를 남길 수 있었을 것임.
"
"https://news.hada.io/topic?id=12179","2023년 API 프로토콜 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2023년 API 프로토콜 현황

     * Postman이 4만명의 개발자 대상 조사를 통해 정리한 API 프로토콜 트렌드와 장/단점
     * REST, WebHooks, GraphQL, SOAP, WebSocket, gRPC 등

REST

     * 아직 가장 널리 사용. 지난 2년간 92% 에서 86%로 감소
     * 단순성, 확장성 및 웹 서비스와의 통합 용이성
     * REST의 장점
          + 단순성 및 표준화: 표준 HTTP 방법을 이용하여 이미 HTTP에 익숙한 개발자가 쉽게 채택가능. 단순성은 신속한 학습과 통합을 촉진
          + 확장성: REST의 상태 비저장 특성으로 인해 서버는 요청 간에 세션 데이터를 저장할 필요가 없음. 공유 서버 없이 인스턴스를 추가하여 수평적 확장을 용이하게 함
          + 성능: 상태 비저장 및 캐시 가능한 응답은 실행 속도를 높이고 요청 수를 줄여줌
          + 모듈성: RESTful 서비스는 모듈식 구성 요소로 개발될 수 있음. 독립적인 업데이트를 가능하게 하고 유지 관리성을 향상시킴
          + 플랫폼에 구애받지 않음: 다양한 클라이언트로 사용가능. 상호 운용성이 시스템 전반에 걸쳐 API 통합을 촉진
          + 성숙한 도구 및 커뮤니티 지원: 도구, 라이브러리, 모범 사례, 문제 해결 지침 및 커뮤니티 리소스가 많음
     * REST의 과제
          + 오버-펫칭 & 언더-펫칭: 클라이언트가 자료의 일부만 필요할수 있어서 데이터를 많이 가져오거나 적게 가져올 수 잇음. 이로 인해 성능 문제가 발생하고 대역폭이 낭비 될 수 잇음
          + 여러번의 인터페이스: 관련 데이터를 검색하려면 여러 요청이 필요할 수 있으며 이로 인해 대기 시간이 늘어남. 이러한 호출의 연속으로 인해 애플리케이션이 확장되면서 문제가 됨
          + 버전 관리 문제: REST API의 새 버전을 만드는 것은 번거로울 수 있으며, 특히 데이터 구조나 서비스 기능이 변경되는 경우 더욱 그러함. 이로 인해 이전 버전과의 호환성 문제가 발생하는 경우가 많음
          + 무상태 오버헤드: 무상태는 확장성을 지원하지만 모든 요청에 ​​필요한 모든 컨텍스트를 제공해야 함을 의미하기도 함. 특히 클라이언트가 대량의 반복 데이터를 전송해야 하는 경우 오버헤드를 초래할 수 있음
          + 실시간 기능 부족: REST는 채팅이나 라이브 피드와 같은 실시간 앱에 최적화되어 있지 않음. WebSocket과 SSE가 이러한 사용 사례에 더 적합

WebHooks

     * 웹훅은 소스 애플리케이션의 이벤트에 의해 트리거되는 사용자 정의 HTTP 콜백
     * 이벤트가 발생하면 소스 애플리케이션은 대상 애플리케이션이 지정한 URI로 HTTP 요청(일반적으로 POST)을 보내며, 이를 통해 반복적인 폴링 없이 거의 실시간 이벤트 기반 통신이 가능
     * 웹훅은 점점 인기를 얻고 있으며 개발자의 36%가 다양한 시스템 간의 원활한 통합을 위해 사용중
     * WebHooks의 장점
          + 실시간 통신: 웹훅으로 실시간 데이터 전송이 가능. 이벤트가 발생하면 해당 데이터가 전송되어 시스템 간 최신 동기화가 보장
          + 효율성: 웹훅은 리소스 집약적인 폴링을 제거하여 컴퓨팅 성능과 대역폭을 절약
          + 유연성: 웹훅은 특정 이벤트에 응답하도록 구성할 수 있으므로 한 애플리케이션의 어떤 작업이나 트리거가 다른 애플리케이션으로 데이터를 보낼지 사용자 정의할 수 있음
          + 단순화된 통합: HTTP 방법을 사용하면 대부분의 애플리케이션에서 쉽게 사용할 수 있음
          + 분리된 아키텍처 지원: 웹훅은 이벤트를 기반으로 작동하므로 자연스럽게 이벤트 중심 또는 분리된 아키텍처를 지원하여 모듈성과 확장성을 향상시킴
     * WebHooks의 과제
          + 오류 처리: 웹훅 수신 측이 다운되거나 콜백 처리에 오류가 있는 경우 데이터 손실 위험이 있음. 웹후크를 사용하는 시스템에는 재시도 또는 로그를 포함한 강력한 오류 처리 메커니즘이 있어야 함
          + 보안 문제: 웹훅은 인터넷을 통해 데이터를 전송하므로 데이터를 가로채거나 악의적인 공격에 취약하게 만듦. HTTPS 및 페이로드 서명 사용과 같은 API 보안 조치가 필수적
          + 여러 웹훅 관리: 웹훅 관리 및 모니터링은 복잡할 수 있음. 특히 애플리케이션이 성장하고 여러 웹훅에 의존하기 시작하면 더욱 그렇게 됨. 모든 웹후크가 올바르게 작동하고 다양한 엔드포인트를 추적하려면 주의가 필요
          + 과부하 가능성: 대량의 동시 콜백으로 인해 애플리케이션 수신이 부담될 수 있지만 속도 제한이나 일괄 처리는 급증 관리에 도움이 될 수 있음

GraphQL

     * GraphQL은 API용 쿼리 언어이자 데이터에 대해 정의한 유형 시스템을 사용하여 쿼리를 실행하기 위한 서버 측 런타임
     * 2012년 Facebook에서 개발하고 2015년 오픈 소스 프로젝트로 출시된 GraphQL은 기존 REST API에 대한 보다 유연하고 효율적인 대안을 제공
     * GraphQL은 개발자들 사이에서 채택률이 29%로 증가하고 있으며 이는 오늘날 API 환경에서 그 중요성이 나타나고 있음
     * 관련 데이터를 가져오기 위해 여러 API 엔드포인트를 거쳐야 하는 REST와 달리 GraphQL을 사용하면 단일 쿼리에서 필요한 모든 데이터를 얻을 수 있음
     * 이는 데이터 검색 프로세스에 대한 더 많은 제어권을 제공하고 더 동적이고 반응성이 뛰어난 사용자 인터페이스를 만들 수 있도록 해주기 때문에 프런트엔드 개발자에게 특히 유용
     * GraphQL의 장점
          + 강력한 형식의 스키마: GraphQL API에는 강력한 형식의 스키마가 있으므로 개발자는 쿼리에 사용할 수 있는 데이터와 유형을 정확히 알 수 있음
          + 정확한 데이터 검색: 클라이언트는 필요한 정확한 데이터를 요청할 수 있으며, 이는 오버-펫칭 및 언더-펫칭 문제를 해결하고 더 나아가 성능을 향상시키고 비용을 절약
          + 쿼리 복잡성 및 다양한 리소스: GraphQL은 하나의 요청으로 여러 데이터 유형 쿼리를 지원하므로 복잡하고 상호 관련된 데이터에 대한 네트워크 요청 수가 줄어듦
          + 구독을 통한 실시간 업데이트: GraphQL은 구독을 통해 실시간 동기화를 지원하므로 클라이언트가 실시간으로 업데이트됨
          + 내성: GraphQL의 자체 문서화 스키마를 사용하면 자체 검사를 통해 더 쉽게 개발할 수 있음
     * GraphQL의 과제
          + 쿼리 복잡성: GraphQL이 클라이언트에 제공하는 유연성에는 단점이 있음. 지나치게 복잡하거나 중첩된 쿼리는 성능에 부정적인 영향을 미칠 수 있기 때문
          + 학습 곡선: GraphQL은 돌연변이 및 구독과 같은 새로운 개념으로 인해 REST보다 학습 곡선이 더 가파름
          + 버전 관리: 쿼리의 유연한 특성은 스키마 변경으로 인해 기존 쿼리가 중단되고 버전 관리가 복잡해질 수 있음을 의미
          + 리소스의 과도한 사용 가능성: 클라이언트는 하나의 쿼리로 여러 리소스를 요청할 수 있으므로 필요한 것보다 더 많은 데이터를 가져와 서버에 과부하가 걸릴 위험이 있음
          + 보안 문제: 악의적인 사용자는 GraphQL의 유연성을 악용하여 복잡한 쿼리로 서버에 과부하를 줄 수 있음

SOAP

     * SOAP(Simple Object Access Protocol)는 웹 서비스를 구현하기 위해 구조화된 정보를 교환하기 위한 프로토콜
     * 메시지 형식으로 XML을 사용 하고 일반적으로 메시지 협상 및 전송 계층으로 HTTP 또는 SMTP를 사용
     * REST 및 GraphQL과 달리 SOAP에는 ACID 호환 트랜잭션, 보안, 메시징 패턴과 같은 엄격한 표준과 내장 기능이 있음
     * 개발자의 26%에 불과한 사용량 감소에도 불구하고 SOAP는 특정 애플리케이션에 대해 신뢰할 수 있는 선택
     * SOAP의 장점
          + 강력한 타이핑 및 계약: WDSL(Web Services Description Language) 문서에 정의된 강력한 유형 지정 및 엄격한 계약이 있음
          + 내장된 보안 기능: SOAP는 WS-Security 표준을 통해 구현된 인증 , 권한 부여 및 암호화를 통해 포괄적인 보안을 제공. 이로 인해 엔터프라이즈 애플리케이션에 선호되는 선택
          + ACID 거래: SOAP는 금융 또는 의료 시스템과 같이 데이터 무결성이 중요한 애플리케이션에 필수적인 ACID 트랜잭션을 지원
          + 안정적인 메시징: SOAP는 안정적인 메시지 전달을 보장하고 오류를 잘 처리하므로 메시지 전달 보장이 중요한 시스템에 매우 적합
          + 언어, 플랫폼 및 전송 중립성: REST와 마찬가지로 SOAP 서비스는 기본 프로그래밍 언어, 플랫폼 또는 전송 프로토콜에 관계없이 XML을 이해하는 모든 클라이언트에서 사용할 수 있음
     * SOAP의 과제
          + 복잡성 및 학습 곡선: SOAP는 엄격한 표준과 XML 사용으로 인해 구현하기가 더 복잡할 수 있으므로 REST 또는 GraphQL과 같은 대안보다 학습 곡선이 더 가파름
          + 자세한 메시지: SOAP 메시지 헤더는 많은 오버헤드를 전달하므로 REST 및 GraphQL의 JSON 보다 페이로드가 더 커짐 . 이는 성능과 대역폭 사용량에 영향을 미칠 수 있음
          + 제한된 커뮤니티 지원: SOAP는 기반을 잃어가고 있으며 이는 커뮤니티 지원과 사용 가능한 라이브러리가 감소하고 있음을 의미
          + 유연성이 떨어짐: 계약이 변경되면 클라이언트와 서버 모두 각각의 구현을 업데이트해야 할 수 있으며 이는 단점이 될 수 있음
          + 방화벽 문제: SOAP는 HTTP/HTTPS와 다른 전송 프로토콜을 사용할 수 있으며 이는 방화벽 제한에 직면할 수 있음을 의미. 이로 인해 일부 배포 환경에서는 SOAP의 다목적성이 떨어짐

WebSocket

     * WebSocket은 클라이언트와 서버 간에 지속적이고 대기 시간이 짧은 양방향 연결을 제공하여 실시간 데이터 전송이 가능
     * HTTP의 요청-응답 주기와 달리 WebSocket을 사용하면 서버는 초기 핸드셰이크 이후 언제든지 클라이언트에 데이터를 보낼 수 있음
     * 채팅 애플리케이션, 온라인 게임, 거래 플랫폼 등에 대한 즉각적인 데이터 업데이트가 용이
     * 설문 조사에 따르면 개발자의 25%가 WebSocket을 사용하는 것으로 나타남
     * WebSocket의 장점
          + 실시간 양방향 통신: 실시간 양방향 통신은 교환할 때마다 다시 설정해야 하는 HTTP 연결보다 대기 시간이 짧음
          + 간접비 절감: 초기 핸드셰이크 후에도 연결은 계속 열려 있으므로 기존 HTTP 요청과 함께 제공되는 헤더의 오버헤드가 줄어듦
          + 자원의 효율적인 사용: 영구 연결은 긴 폴링보다 서버 리소스를 더 효율적으로 사용
     * WebSocket의 과제
          + 구현 복잡성: WebSocket 구현은 다른 API 아키텍처보다 더 복잡하고 시간이 많이 걸릴 수 있음. 특히 WebSocket이 지원되지 않는 환경에서 대체의 필요성을 고려할 때 더욱
          + 내장 기능 부족: 보안 및 트랜잭션을 위한 기능이 내장되어 있는 SOAP와 달리 WebSocket은 기본에 가까워 개발자가 이러한 기능을 직접 구현해야 함
          + 자원 소비: 개방형 WebSocket 연결은 일반적으로 장기 폴링 기술보다 더 효율적이지만 여전히 서버 리소스를 소비하며 대규모로 문제가 될 수 있음
          + 네트워크 제한: 일부 프록시 및 방화벽은 WebSocket을 지원하지 않으므로 특정 네트워크 환경에서 잠재적인 연결 문제가 발생할 수 있음

gRPC

     * ""Google Remote Procedure Call""을 의미하는 gRPC는 서비스 간 통신을 용이하게 하는 최신 고성능 프로토콜
     * HTTP/2 위에 구축되었으며 프로토콜 버퍼를 활용하여 서비스 방법과 메시지 형식을 정의
     * GET 및 POST와 같은 표준 HTTP 동사를 사용하는 REST API와 달리 gRPC는 서비스에서 프로그래밍 언어의 기능과 유사한 사용자 지정 메서드를 노출할 수 있도록 지원
     * gRPC의 장점
          + 성능: HTTP/2 및 프로토콜 버퍼를 사용하면 gRPC가 짧은 대기 시간과 높은 처리량을 달성할 수 있음
          + 강력한 타이핑: SOAP 및 GraphQL과 마찬가지로 gRPC는 강력한 형식입니다. 결과적으로 컴파일 타임에 유형이 검증되므로 버그가 줄어듦
          + 다중 언어 지원: gRPC는 Go, Java, C# 및 Node.js를 포함한 다양한 프로그래밍 언어를 최고 수준으로 지원
          + 스트리밍: gRPC는 즉시 스트리밍 요청 및 응답을 처리하여 장기 연결 및 실시간 업데이트와 같은 복잡한 사용 사례에 적용 가능
          + 배터리 포함: gRPC는 부하 분산, 재시도 및 시간 초과와 같은 중요한 기능을 직접 지원
     * gRPC의 과제
          + 브라우저 지원: 브라우저의 기본 gRPC 지원은 여전히 ​​제한되어 있으므로 웹 애플리케이션의 클라이언트-서버 직접 통신에는 적합하지 않음
          + 학습 곡선: 개발자는 초기 생산성을 저하시킬 수 있는 프로토콜 버퍼, 사용자 지정 서비스 정의 및 기타 gRPC 기능을 사용하는 방법을 배워야 함
          + 디버깅 복잡성: 프로토콜 버퍼는 사람이 읽을 수 없으므로 JSON API보다 gRPC API를 디버깅하고 테스트하기가 더 어려움

기타 API 프로토콜

     * MQTT : IoT와 같은 저대역폭 네트워크에 최적화된 경량 메시징 프로토콜. 클라이언트가 브로커를 통해 메시지를 게시하고 구독할 수 있지만 일부 보안 및 확장성 기능이 부족
     * AMQP : 안정적인 메시지 전달과 유연한 메시지 라우팅을 보장하는 더욱 강력한 엔터프라이즈 메시징 표준. 그러나 이는 경량 프로토콜보다 복잡할 수 있고 오버헤드가 더 많음
     * SSE : HTTP를 통한 단방향 서버-클라이언트 통신을 가능하게 하며, 실시간 업데이트에는 적합하지만 양방향 기능이 부족
     * EDI : 구매 주문서, 송장 등의 전자 문서를 표준화하여 B2B 커뮤니케이션을 자동화하지만 초기 비용이 많이 들고 복잡한 인프라도 필요
     * EDA : 구성요소가 이벤트에 반응하는 이벤트 중심 아키텍처를 촉진하여 확장 가능하면서도 디버깅이 복잡한 실시간 시스템을 가능하게 함

결론

     * 개발자가 새로운 아키텍처, 프로토콜 및 도구를 채택함에 따라 API 환경은 계속 발전하고 있음
     * REST는 단순성과 편재성으로 인해 여전히 지배적이지만 GraphQL 및 gRPC와 같은 대안은 과도한 가져오기 및 수다스러운 인터페이스와 같은 문제점을 해결하여 관심을 얻고 있음
     * 또한 개발자들은 실시간 통신에 대한 요구 때문에 WebHooks와 WebSocket을 점점 더 중요하게 여기고 있음
     * 많은 일반적인 API 사용 사례에서 REST는 확장성, 상호 운용성 및 채택 용이성을 고려하여 견고한 기본 접근 방식으로 남아 있음. 또한 커뮤니티 성숙도의 이점도 있음
     * 그럼에도 불구하고 모든 프로토콜에는 장단점이 있으며 애플리케이션이 더욱 복잡해짐에 따라 개발자는 GraphQL 및 gRPC와 같은 특수 솔루션을 포함하도록 API 프로토콜 툴킷을 현명하게 확장중
     * 모든 경우에 적용되는 일률적인 만병통치약보다, API 개발자는 여러 프로토콜의 강점과 약점을 이해하는 것이 가장 좋음
     * REST, WebHook, WebSocket, GraphQL 및 각각 고유한 장점을 지닌 기타 접근 방식을 결합한 시스템을 설계함으로써 개발자는 강력하고 효율적이며 유지 관리가 가능한 API를 구축할 수 있음
     * 개별 프로토콜의 인기는 계속해서 변동하겠지만, 가장 중요한 추세는 API 환경에서 다양성이 증가하는 것
     * 개발자는 최적의 API 솔루션을 만들기 위해 이러한 다중 프로토콜 철학을 수용해야 함

   잘 봤습니당

   트랜잭션 아니면 죽음을 달라는 대한민국 IT에 SOAP를 밀고 써야 정상(?)인데 REST를 쓰는 게 재밌는 현상입니다(??).

   단순 죄회성 한번의 액션으로 끝나는 업무가 아니라면 트랜잭션은 필수 이지 않나용? (필수임에도 rest를 이제서야 지향하는 아이러니에 대한부분은 공감합니다 ㅎㅎ)
"
"https://news.hada.io/topic?id=12185","나쁜 TV 설정을 끄는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            나쁜 TV 설정을 끄는 방법

스마트 TV 설정 개선

     * 스마트 TV에는 영화를 비현실적으로 보이게 만드는 다양한 설정이 존재함.
     * 모션 보간, 노이즈 감소, 동적 대비와 같은 설정은 영화 제작자의 의도를 무시하고, 원치 않는 이미지 아티팩트를 도입하며, 새로운 영화들을 비누 오페라처럼 보이게 만듦.
     * 이러한 설정을 끄면 영화 제작자가 의도한 대로 영화를 감상할 수 있고, 약간의 전기도 절약할 수 있음.

스마트 TV 이상한 설정 끄는 방법

     * 설정의 이름은 제조사마다 다르기 때문에 모든 TV에 대한 상세한 가이드를 제공하기 어려움.
     * TV 설정으로 이동하여 끌 수 있는 몇 가지 주요 기능들이 있음.
     * 운이 좋다면, 영화 제작자의 의도에 맞춰 TV를 조정하는 '필름메이커 모드'가 있을 수 있음.

주요 설정들

     * 모션 보간: 24fps를 60fps로 증가시키기 위해 원본 영화에 없는 새로운 프레임을 생성하고 삽입함.
     * 동적 대비 및 밝기: 어두운 장면의 대비를 증가시키도록 설계되었지만, 때때로 어두운 장면에서 밝은 부분의 과노출을 일으키거나 제작자의 의도보다 더 많은 디테일을 보여줄 수 있음.
     * 노이즈 감소: 지상파 TV의 노이즈, 픽셀화, 압축을 줄이려고 하지만, 때때로 질감을 제거하고 흐릿한 이미지를 만들어냄.

배경 지식

     * 스마트 TV의 복잡한 기능을 끄면 에너지를 절약할 수 있다는 가정이 있음.
     * 영화 제작자의 의도에 맞는 TV 설정에 대해 더 알고 싶다면 Vox의 ""How your TV settings ruin movies""를 시청하거나 which.co.uk의 ""How to get the best TV picture""를 참조할 것.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 스마트 TV의 기본 설정이 영화 감상 경험을 해칠 수 있으며, 이를 개선함으로써 더 나은 화질과 제작자의 의도에 부합하는 시청 경험을 얻을 수 있다는 점임.
     * 스마트 TV 사용자들에게는 이러한 설정을 조정하는 것이 흥미로울 수 있으며, 영화를 원래의 모습으로 감상하고자 하는 사람들에게 유용한 정보를 제공함.

        Hacker News 의견

     * 삼성 TV의 주변 소음에 따라 볼륨이 자동으로 조절되는 기능에 대한 불만

     한 사용자는 삼성 TV가 주변 소음이 높을 때 볼륨이 커지는 기능을 비활성화할 수 없다며, 아이의 비명 소리에 TV가 더 크게 소리를 내 스트레스가 더해진다고 불편함을 표현함.
     * 프레임 보간 기술에 대한 부정적인 의견

     다른 사용자는 프레임 보간 기술이 특히 애니메이션에서 끔찍해 보인다고 생각하며, 유튜브에서 24fps로 의도된 애니메이션을 60fps로 변환하여 원래의 수작업으로 완성된 애니메이션의 완벽함을 망친다고 비판함.
     * 로컬 디밍 기능에 대한 전문가의 설명

     전 고급 오디오/비디오 판매원은 로컬 디밍 기능이 동적 대비와 다르다고 설명하며, LED 백라이트 배열이 소스 자료의 어두운 부분을 어둡게 함으로써 실제 대비를 향상시키지만, 노출을 조정하여 가짜 대비를 만드는 것이 아니라고 강조함. 이 기술은 할로 현상을 일으키기도 하지만, 올바른 방향으로의 한 걸음이라고 평가함.
     * TV의 '선명도' 설정에 대한 언급의 부재에 대한 의아함

     한 사용자는 TV 설정에서 '선명도'를 조정하는 것이 어렵다고 언급하며, '0', '50', '100' 등의 값이 선명도를 추가하는 것인지, 부드럽게/선명하게 하는 것인지, 혹은 부드러움을 제거하는 것인지 파악하기 어렵다고 지적함.
     * 소니 브라비아 패널의 프로 모드 활성화 방법 공유

     소니 브라비아 패널 사용자는 특정 키 조합을 사용하여 프로 모드를 활성화할 수 있으며, 이를 통해 반응이 느린 패널을 대부분 일반 디스플레이로 전환할 수 있다고 함.
     * Consumer Reports의 TV 화면 최적화 도구 소개

     Consumer Reports는 브랜드/모델별 최적의 화면 설정을 제공하는 'TV 화면 최적화' 도구를 제공하며, ACR 및 기타 개인 정보 관련 기능을 끄는 방법도 안내한다고 함.
     * 소니 TV의 Motionflow 기술에 대한 긍정적인 평가

     한 사용자는 소니 TV가 Motionflow 기술을 완성하여 프레임 속도에 대한 고민을 덜어준다고 언급하며, 소니가 자체 스튜디오를 가진 유일한 제조사이기 때문에 이 기술에 우선순위를 두었다고 생각함.
     * 고전 TV 기술에 대한 향수와 현대 TV 기술에 대한 비판

     다른 사용자는 고전 TV의 특성과 NTSC, PAL, SECAM 간의 논쟁에 대해 언급하며, 고전 아날로그 TV가 가진 매력을 그리워하고, 현대의 MP2에서 MP4로의 변화가 가져온 장단점에 대해 의견을 나눔.
     * 24fps 비디오로 인한 두통을 해결하기 위한 모션 보간의 필요성

     한 사용자는 24fps 비디오, 특히 패닝 샷으로 인해 두통을 겪는 사람들에게는 모션 보간이 필요하다고 주장하며, 48fps로 촬영된 몇몇 영화가 훨씬 더 보기 좋다고 언급함.
     * 삼성 TV의 네트워크 트래픽을 차단하는 방법 공유

     한 사용자는 삼성 TV를 pihole 뒤에 두어 TV UI 내의 광고를 차단하고 다른 데이터 추출 API 호출을 상상할 수 있다고 언급하며, 이 방법으로 TV의 네트워크 트래픽을 줄일 수 있다고 함.
"
"https://news.hada.io/topic?id=12162","[c++] 빠르게, 더 빠르게 (성능 튜닝)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [c++] 빠르게, 더 빠르게 (성능 튜닝)

     * Matt Godbolt의 유튜브 세션을 글로 풀어서 정리한 내용
          + https://www.youtube.com/watch?v=fV6qYho-XVs
     * 숫자, 문자를 받아서 합성하는 단순한 기능의 최적화
     * perf 툴로 분석하여 단계별 최적화를 진행
         1. stringstream (550ns)
         2. sprintf (220ns)
         3. custom formatter (20ns)
         4. custom formatter + lookup table + @ (13ns)
     * 최초보다 42배 빨라진 최종 코드
          + https://godbolt.org/z/3befMz74j
     * 결론: 최적화 할 때에는 직관을 따르지 말고, 면밀한 성능 측정이 우선되어야 한다

   성급한 최적화는 만악의 근원이다

   최적화도 좋지만 블로그 글을 보고 무조건적인 불필요한 최적화를 할 사람들을 위해 경고해두면 좋을것같네요..
"
"https://news.hada.io/topic?id=12190","GQL - Git Query Language","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GQL - Git Query Language

     * SQL과 비슷한 문법으로 DB대신 .git 파일에 대해서 쿼리 가능한 언어
     * 작은 엔진이 별도의 DB 또는 변환없이 Repo에 대한 실시간 질의 수행
     * SQL의 대부분 문법 지원 (그룹핑, 정렬, 집계 포함)
     * Rust 오픈소스

SELECT DISTINCT title AS tt FROM commits
SELECT name, COUNT(name) AS commit_num FROM commits GROUP BY name ORDER BY commit_num DESC LIMIT 10
SELECT commit_count FROM branches WHERE commit_count BETWEEN 0 .. 10

SELECT * FROM refs WHERE type = ""branch""
SELECT * FROM refs ORDER BY type

SELECT * FROM commits
SELECT name, email FROM commits
SELECT name, email FROM commits ORDER BY name DESC, email ASC
SELECT name, email FROM commits WHERE name LIKE ""%gmail%"" ORDER BY name
SELECT * FROM commits WHERE LOWER(name) = ""amrdeveloper""
SELECT name FROM commits GROUP By name
SELECT name FROM commits GROUP By name having name = ""AmrDeveloper""

SELECT * FROM branches
SELECT * FROM branches WHERE is_head = true
SELECT name, LEN(name) FROM branches

SELECT * FROM tags
SELECT * FROM tags OFFSET 1 LIMIT 1

   awesome

   설치하고, CLI에서 직접 쿼리를 입력하는게 안되서 아쉬웠습니다.
   그런데 저장소를 직접 빌드해서 사용하면 직접 쿼리를 던지는 옵션을 사용 할 수 있네요.

   아마 다음 버전에 추가될 예정인가 봅니다

   cargo run -- -q ""SELECT * FROM tags""

   이런식으로 사용하면 됩니다.
   이제 DevOps 작업에 사용 할 수 있습니다. :)

   큰 저장소에 사용시에 혹시 속도는 괜찮으시던가요? 궁금합니다 ^^

   오! git log --numstat 출력을 파싱해서 DB에 넣어 놓고, SQL로 분석하는 귀찮은 작업을 종종하는데, 이거 하나면 되겠군요.

   오... 깃 작업할 때 명령어 이것저것 쓰는 것보다 편해 보이기도 하네요.
"
"https://news.hada.io/topic?id=12122","Meta, Seamless Communication 모델 패밀리 발표 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Meta, Seamless Communication 모델 패밀리 발표

     * 언어간 장벽을 제거하고 더 자연스럽게 여러 언어 간 커뮤니케이션을 가능하게 하는 AI 연구 모델군
          + SeamlessExpressive: 언어 간 표현과 언어의 미묘함을 보존
          + SeamlessStreaming: 약 2초의 지연 시간으로 음성 및 텍스트 번역을 제공
          + SeamlessM4T v2: 다국어 및 멀티태스킹 파운데이션 모델로, 음성과 텍스트를 통한 커뮤니케이션을 지원
          + Seamless: SeamlessExpressive, SeamlessStreaming 및 SeamlessM4T v2의 기능을 하나로 통합

표현의 뉘앙스 보존

     * SeamlessExpressive는 인간 표현의 뉘앙스를 포착하는 번역을 목표로 함
     * 기존 번역 도구는 대화 내용을 포착하는 데는 능숙하지만, 일반적으로 단조롭고 로봇 같은 음성으로 출력됨
     * SeamlessExpressive는 음성 스타일과 감정적 색채뿐만 아니라 말하기 속도와 일시 정지와 같은 언어의 미묘함을 보존하고자 함

거의 실시간 번역

     * SeamlessStreaming은 약 2초의 지연 시간으로 번역을 제공하는 최초의 대규모 다국어 모델
     * SeamlessM4T v2를 기반으로 하며, 자동 음성 인식 및 거의 100개의 입력 및 출력 언어에 대한 음성-텍스트 번역을 지원
     * 또한 거의 100개의 입력 언어와 36개의 출력 언어에 대한 음성-음성 번역을 지원

범용 번역을 위한 기초 모델

     * 2023년 8월, Meta는 음성 및 텍스트에 걸쳐 번역 및 전사에 있어 최첨단 결과를 제공하는 SeamlessM4T의 첫 버전을 소개함
     * 이를 기반으로 개선된 모델인 SeamlessM4T v2는 새로운 SeamlessExpressive 및 SeamlessStreaming 모델의 파운데이션이 됨
     * 새로운 아키텍처와 비자동 회귀 텍스트-유닛 디코더를 특징으로 하여 텍스트와 음성 출력 간의 일관성을 향상시킴

연구 접근 방식

     * 협력과 개방형 연구의 힘을 믿으며, 연구자들이 이 작업을 기반으로 발전시킬 수 있도록 Seamless Communication 모델 전체를 공개함
     * 안전하고 책임감 있는 AI 생태계를 촉진하기 위해 번역에서 환각 독성의 영향을 크게 줄이고, 표현력 있는 모델의 오디오 출력에 대한 맞춤형 워터마킹 접근 방식을 구현

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Meta가 언어 장벽을 허물기 위해 개발한 Seamless Communication AI 모델들의 소개임. 이 모델들은 표현의 뉘앙스를 유지하면서 거의 실시간으로 번역을 제공하고, 다양한 언어를 지원하는 강력한 기능을 갖추고 있음. 이러한 기술 발전은 전 세계 사람들이 더욱 자연스럽고 진정성 있는 방식으로 소통할 수 있는 길을 열어주고 있어, 많은 이들에게 흥미롭고 매력적인 소식으로 다가올 것임.

        Hacker News 의견

     * 기대되는 미래 기술에 대한 희망

     해외에서 헤드폰을 착용하고 자신의 언어로 주변 대화를 듣는 날을 기대함. 어린 시절 SF에서 본 '유니버설 번역기'에 매료되었으며, 아버지가 프랑스어-영어 동시통역사로 바쁘게 일하시는 것을 보고 직접 번역기를 만들어보려 했음. 번역은 중요한 일이며 많은 사람들에게 도움이 될 수 있음을 희망함.
     * 기술을 활용한 언어 학습 도구에 대한 기대

     이 기술을 활용한 언어 교사 개발을 기대함. 모든 사람이 하루 몇 시간씩 개인 교사를 가질 수 있음. 중국이나 멕시코에서 일하며 VR 게임을 통해 언어를 배우는 것이 매우 매력적임.
     * 실시간 스트리밍 기술의 가능성

     청각 장애가 있는 새 직원을 위해 회사가 실시간으로 작동하지 않는 Dragon과 같은 솔루션을 제안했으나, 직원이 직접 Whisper를 사용하여 실시간에 가까운 텍스트 변환 솔루션을 개발함. 새로운 모델을 사용하여 그가 어떤 일을 할지 기대됨.
     * 번역의 정확성에 대한 우려

     번역기가 때때로 부정확한 단어를 사용하는 것보다 오해를 불러일으키는 번역을 하는 것이 더 우려됨. 예를 들어, ""what the fuck""을 스페인어로 번역할 때 의미가 누그러진 ""qué diablos""로 출력되는 것은 원래 의도를 정확히 알고 싶은 사용자에게 문제가 될 수 있음.
     * AI에 의한 산업 변화에 대한 인식

     아내가 여러 언어로 더빙을 하는 전문 성우가 되려 했을 때, AI에 의한 산업 변화를 예견하고 경로를 변경했음. AI의 발전에 대해 인상적인 결과를 느낌.
     * 텍스트 음성 변환 기술의 발전과 향후 기대

     텍스트 음성 변환 기술이 최근 몇 년 사이에 많이 발전했으나, 이 기술이 운영체제에 내장된 TTS 엔진(예: 스크린 리더 등)으로 언제 통합될지 궁금함.
     * 특정 언어에 대한 지원 부족에 대한 불만

     힌디어와 같은 주요 언어가 샘플에 포함되지 않은 것에 대해 실망함. 인도는 페이스북의 가장 큰 사용자 기반이지만, 페이스북은 인도에 충분한 기여를 하지 않고 있음.
     * 언어 데이터 부족에 대한 문제 제기

     영어-스와힐리어 번역 시도 결과가 좋지 않았음. Huggingface M4T V2를 사용했지만 대부분의 경우 제대로 작동하지 않고 단지 다른 목소리로 영어를 반환함. 어떤 데이터가 부족해서 언어가 제대로 작동하지 않는지 명확한 설명이 필요함. 데이터 제공을 통해 도움을 줄 수 있을지도 모름.
     * 번역기의 오류에 대한 표현

     ""toxic word hallucinations""이라는 표현이 사이버펑크적이라고 느낌.
     * 인공지능 번역 기술의 발전에 대한 감탄

     지난 30년 동안 이루어진 진보에 대해 감동함. 90년대 중반 학생으로서 독일 인공지능 연구센터의 Verbmobil 시스템에서 일했는데, 이는 매우 제한된 범위에서 영어, 독일어, 일본어의 음성-음성 번역을 수행함. 당시에는 도메인 모델링, 문장 파싱, 의미 엔진, 3개 언어에 대한 맞춤형 음성-텍스트 변환 등 ""전통적인"" NLP 방식이 사용되었으나, 이 접근법은 결국 막다른 길이었음을 인식함.
"
"https://news.hada.io/topic?id=12142","스탠퍼드 경제학자가 말하는 "사무실 복귀"의 종말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스탠퍼드 경제학자가 말하는 ""사무실 복귀""의 종말

재택근무의 현황과 미래 전망

     * 코로나19 팬데믹 초기에 재택근무 비율이 급증한 후 2022년까지 감소 추세를 보였으나, 2023년에는 정체 상태를 보임.
     * 스탠퍼드 대학의 경제학 교수인 닉 블룸은 재택근무가 미국 노동 시장의 영구적인 현상이 되었다고 주장함.
     * 재택근무의 비율이 팬데믹 이전 7%에서 현재 약 28%로 증가하였으며, 이는 기술적, 인구학적 추세에 따라 2025년 이후에도 증가할 것으로 예상됨.

재택근무의 지속적인 인기

     * 재택근무는 처음에는 코로나19로 인한 봉쇄 조치로 인해 급증했으나, 많은 근로자들이 이러한 근무 방식을 선호하게 됨.
     * 유연한 근무 시간, 출퇴근 시간 절약, 준비 시간 단축 등의 이점이 있으며, 뜨거운 노동 시장은 근로자들에게 더 나은 근무 조건과 임금을 제공하는 새로운 직장을 찾을 수 있는 레버리지를 제공함.
     * 재택근무는 근로자에게만 이득이 아니라, 부동산 비용 절감, 임금 및 채용 비용 절감, 근로자 유지 향상, 인재 채용 풀 확대 등 기업에게도 이익이 되는 것으로 나타남.

재택근무 정책의 다양성

     * 대부분의 재택근무는 '하이브리드' 방식으로 이루어지며, 일부는 집에서, 나머지는 사무실에서 근무함.
     * 온라인 채용 공고 중 약 11%가 완전 재택 또는 하이브리드로 광고되며, 회사마다 재택근무 정책에 상당한 차이가 있음.
     * 직원들이 사무실에 출근해야 하는 날에 대한 규정도 다양하며, 많은 기업들이 여전히 재택근무 정책을 실험 중임.

재택근무의 미래 증가 전망

     * 재택근무의 비율이 팬데믹 이전 수준으로 떨어질 가능성은 낮으며, 미국 경기 침체가 발생하더라도 기업의 비용 절감 효과로 인해 큰 감소는 예상되지 않음.
     * 장기적으로는 기술의 발전과 젊은 기업가 및 CEO들의 재택근무에 대한 긍정적인 태도로 인해 2025년 이후 재택근무 비율이 증가할 것으로 전망됨.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 재택근무가 미국 노동 시장에서 영구적인 현상으로 자리 잡았다는 것이다. 이는 기술의 발전과 근로자들의 근무 환경에 대한 선호도 변화가 어떻게 노동 시장의 구조를 변화시키는지를 보여준다. 특히, 재택근무가 근로자와 기업 모두에게 이익이 되는 방식으로 자리 잡고 있으며, 이는 앞으로도 계속될 것으로 예상된다는 점에서 흥미롭다. 이러한 변화는 미래의 근무 환경과 라이프스타일에 대한 통찰을 제공하며, 많은 사람들에게 매력적인 주제가 될 수 있다.

   잡 저글링이라는 업무 형태가 요즘 미국에서 화두인 것 같습니다.
   https://www.asiae.co.kr/article/2023120116115957620

        Hacker News 의견

     * 하이브리드 팀 관리자의 경험
          + 원격 근무자는 일의 속도는 빠르지만, 변화에 대응하는 민첩성은 낮음
          + 잘 정의된 업무에서는 원격 근무자가 사무실 근무자보다 빠르게 완료
          + 높은 불확실성, 빠른 의사소통, 높은 신뢰도가 요구되는 업무에서는 사무실 팀이 더 생산적
          + 사무실은 신뢰 구축과 고대역폭 커뮤니케이션 가능하지만, 방해 요소와 불편한 근무 환경도 존재
          + 새로운 기술 기반의 경제 붐이 사람들을 사무실로 복귀시킬 수 있는 계기가 될 것
     * 원격 근무(RTO/WFH)에 대한 경제적 논쟁
          + 회사들이 투자자들을 만족시키기 위해 자신들의 이익을 희생하는 모습
          + 이사회 멤버들이 부동산에 투자하고 있어 사무실 점유율을 높이려는 압력 존재
          + 직원과 중간 관리자들의 조용한 저항과 새로운 현실 수용
     * 미디어 플랫폼 간의 의견 차이
          + 원격 근무의 단점과 RTO의 장점을 강조하는 WSJ, Fortune, FT 등의 의견
          + 온라인 신문은 원격 근무에 대한 반대 의견 제시
          + 사람들이 자신의 세계관에 맞는 데이터만 받아들이는 경향
     * 원격 근무와 사무실 근무의 비율
          + 원격 근무와 사무실 근무의 혼합이 일반적인 현상으로 자리 잡음
          + 하이브리드 근무는 이동성 제한, 시간대 다른 인재 채용의 이점 미활용, 미사용 상업용 부동산 비용 발생 등의 문제 존재
          + 100% 원격 근무 또는 100% 사무실 근무가 더 바람직할 수 있음
     * 원격 근무와 생산성 변화
          + 일부 직원은 시간에 구애받지 않고 업무 수행, 일부는 가용성으로 보완
          + 회사들은 근무 시간 모니터링보다 실제 생산성 이해에 집중할 필요
     * 원격 근무의 효율성
          + 사무실 근무의 필요성에 의문 제기, 원격 근무에서의 생산성 경험 공유
          + 원격 근무가 복잡한 문제 해결에 방해가 되지 않는다는 주장
     * RTO 정책의 현 상황
          + RTO가 실패했다거나 포기되었다는 주장이 아닌, RTO 추세가 정체되었다는 사실 제시
     * RTO 정책의 숨겨진 의도
          + RTO는 회사가 퇴직금 지급 없이 직원을 해고하도록 유도하는 수단으로 사용됨
     * 기업의 의사결정과 데이터
          + 데이터 없이도 사무실 복귀가 더 나은 것으로 믿는 기업 고위 경영진의 태도 비판
"
"https://news.hada.io/topic?id=12091","1988년 항공편 655호 격추 사건, 사용자 인터페이스 재앙으로 규정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                1988년 항공편 655호 격추 사건, 사용자 인터페이스 재앙으로 규정

요약: 이란 에어 655편의 비극과 UI의 중요성

     * 1988년 7월 3일, 미 해군의 미사일 순양함 USS Vincennes가 이란 에어 655편을 격추시켜 탑승자 전원이 사망하는 사건 발생.
     * 당시 세계 최첨단 방공 시스템인 Aegis를 탑재한 Vincennes는 단일 민간 항공기를 오인하여 격추시킨 원인에 대해 의문이 제기됨.
     * 미 해군의 공식 보고서는 Aegis 시스템이 아닌 선원들의 잘못으로 결론내렸으나, 후에 밝혀진 Aegis의 사용자 인터페이스 결함이 사고의 일부 원인이었음을 시사.

GN⁺의 의견

   이 글에서 가장 중요한 것은 사용자 인터페이스(UI)의 설계가 얼마나 중요한지를 강조하는 것이다. 전투와 같은 극도로 스트레스가 많은 상황에서도 사용자가 명확하고 정확한 정보를 얻을 수 있도록 시스템이 설계되어야 한다는 점이다. 이 글은 소프트웨어 엔지니어링뿐만 아니라 다양한 분야의 전문가들에게도 흥미로운 사례를 제공하며, 잘못된 UI 설계가 어떻게 심각한 결과를 초래할 수 있는지를 보여준다.

        Hacker News 의견

     * 해커뉴스에 이런 내용이 올라온 것이 흥미로움
          + 현재 해당 댓글 작성자는 사건 이후 HMI/UI를 재설계한 회사에서 근무 중임.
          + 이 회사는 미 해군이 샌디에이고의 UCSD 교수들과 협력하여 설립되었으며, 이 교수들은 스트레스와 인지 부하 하에서의 고강도 결정을 전문으로 함.
          + 미 해군은 이들의 상세한 분석과 권장 사항에 깊은 인상을 받아 지속적으로 협력함.
          + 이 회사는 인간 요소 공학과 복잡한 시스템을 위한 인터페이스 디자인에 중점을 둠.
          + 최근에는 회사의 두 명의 원래 창립자가 은퇴하고, 새로운 CEO가 USS Zumwalt의 전 선장으로 임명됨.
     * 이 사건에 대한 또 다른 좋은 기사는 Admiral Cloudberg 블로그에 있음
          + 이 블로그에는 UX 실수로 인한 Air France Flight 447 사건에 대한 기사도 포함되어 있음.
          + Air France Flight 447의 추락은 조종사와 부조종사의 조종간 입력이 서로 다를 경우 평균화되어 문제가 발생했음.
          + 한 조종사가 비행기의 고도를 낮추려 했지만 다른 조종사가 올리려 하여 입력이 상쇄되어 거의 효과가 없었음.
          + 문제가 해결될 수 있었던 초기에는 두 조종사의 조작이 일치하지 않았음.
     * 해커뉴스에서 자동차의 터치스크린에 대한 불만이 많은데, USS John S. McCain 충돌 사건에서도 터치스크린 UI로 인한 문제가 일부 있었음을 알 수 있음.
     * 이란이 단일 F-14 전투기를 발진시켜 함선을 공격할 것이라고 가정한 것은 놀라운 일임.
          + Stanislav Petrov가 소련 조기 경보 시스템의 오류를 인지하고 올바른 판단을 내린 사례와 비교됨.
     * Paypal의 UX 재앙에 대한 언급
          + Paypal iOS 앱은 이전에 금액을 센트 단위로 입력해야 했으며, 인터페이스가 변경되어 이제는 쉼표를 직접 입력해야 함.
          + 이로 인해 사용자가 실수로 많은 금액을 송금할 위험이 있음.
     * 테슬라 차량에서 물리적인 컨트롤이 지속적으로 제거되는 것에 대한 우려
          + 초기 모델 S/X는 많은 기능에 대해 전용 컨트롤을 가지고 있었으나, 터치스크린에 의존하는 컨트롤이 점점 늘어나고 있음.
          + 중요한 기능에 대한 전용 컨트롤의 필요성이 강조됨.
     * Mastodon에서 온 글이 연속해서 해커뉴스의 첫 페이지에 올라온 것에 대한 언급
          + Twitter가 더 이상 기술 관련 대화의 중심이 아닐 수도 있다는 의문 제기.
     * 모든 대형 항공기에는 '친구 또는 적 식별'을 위한 IFF 장치가 장착되어 있다는 사실에 대한 의문
          + 군사 충돌 상황에서 군용 항공기가 왜 자신을 식별하고자 하는지에 대한 의문 제기.
     * 당시의 일반 항공 교통 관제 기술과 비교하여 이 사건이 어떠했는지에 대한 궁금증
          + 당시에도 많은 항공 교통 관제 재난이 있었음을 언급.
     * UI가 생사에 영향을 미칠 정도로 나쁠 수 있다는 사실에 대한 놀라움
          + 이 사건으로 인한 혼란스러운 UI에 대한 자세한 정보 공유 필요성 강조.
          + Lockheed Martin이 2023년에 이 시스템을 사용하기 위한 계약을 체결했으며, 최근 UI 문제가 해결되었는지에 대한 정보 공유 요청.
"
"https://news.hada.io/topic?id=12140","오픈소스 대형 언어 모델의 추격 경쟁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          오픈소스 대형 언어 모델의 추격 경쟁

ChatGPT 출시 1주년: 오픈소스 대형 언어 모델의 추격

     * 2022년 말 출시된 ChatGPT는 AI 분야 전반에 걸쳐 큰 변화를 가져옴.
     * 대형 언어 모델(LLM)을 지도 학습과 인간 피드백에서의 강화 학습으로 조정하여, 다양한 작업에서 인간의 질문에 답하고 지시를 따를 수 있는 능력을 보여줌.
     * 이러한 성공 이후, 학계와 산업계에서 LLM에 대한 관심이 증가하고, 많은 스타트업이 LLM에 집중하고 있으며, 오픈소스 LLM들이 빠르게 발전하며 특정 작업에서는 ChatGPT와 동등하거나 더 나은 성능을 보이는 것으로 주장함.

연구 및 비즈니스에 미치는 영향

     * 비록 폐쇄 소스 LLM들(예: OpenAI의 GPT, Anthropic의 Claude)이 일반적으로 오픈소스 모델들보다 우수한 성능을 보이지만, 오픈소스 LLM들의 발전은 빠르며 일부 작업에서는 동등하거나 더 나은 성능을 달성했다는 주장이 있음.
     * 이러한 발전은 연구뿐만 아니라 비즈니스에도 중요한 영향을 미침.

GN⁺의 의견

     * ChatGPT의 출시 1주년을 맞아, 오픈소스 대형 언어 모델들이 빠르게 발전하고 있으며, 특정 작업에서는 ChatGPT와 비슷하거나 더 나은 성능을 보이고 있다는 점이 중요함.
     * 이는 연구와 비즈니스 모두에 중대한 영향을 미치며, AI 기술의 민주화와 혁신을 촉진하는 데 기여할 수 있음.
     * 이 글은 AI 기술의 발전과 그것이 사회에 미치는 영향에 관심이 있는 사람들에게 흥미로운 내용을 제공함.

        Hacker News 의견

     * 최근 몇 일 동안 공개된 크고 강력한 모델들:
          + Qwen 72B (및 1.8B): 32K 컨텍스트, 3T 토큰으로 훈련, 월 사용자 1억 미만 상업 라이선스, 벤치마크에서 강력한 성능
          + DeepSeek LLM 67B: 4K 컨텍스트, 2T 토큰, Apache 2.0 라이선스, 코드 분야에서 강력함(DeepSeek Code 33B와 비교해도 더 나음)
          + 중국에서 출시된 모델들: Yi 34B(100B 소문이 있음), XVERSE-65B, Aquila2-70B, Yuan 2.0-102B
          + OpenChat 3.5: 7b 모델로 2023년 3월 ChatGPT와 비슷한 결과를 달성, 8k 컨텍스트 윈도우, 챗봇 경기장 리더보드에서 Llama-2-70b-chat보다 높은 순위
          + 오픈소스 LLM은 특히 매개변수 효율성과 소비자가 자신의 하드웨어에서 실행할 수 있는 유용한 모델을 제공하는 측면에서 업계를 선도함
     * 13억 매개변수 llama2를 qlora로 미세 조정한 능력 시연:
          + Inkbot은 지식 그래프를 생성하며, YAML 형식으로 적절한 구조를 반환, GPT4보다 더 나은 결과를 얻음
          + 간단한 프롬프트와 복잡한 프롬프트에 대한 예시 제공
          + 청크 요약 기능도 수행함
     * 전문화된 여러 모델(코드, 채팅, 수학, SQL, 건강 등) 앞에 프롬프트 라우터를 두는 것이 필요해질 것으로 보임:
          + 일반 모델이 실행 중인 라우터에 요청을 보냄
          + 프롬프트/질문이 분해되어 전문가 모델로 분류 및 전달됨
          + 응답이 돌아와 일반 모델에 의해 조립됨
          + 이와 유사한 프로젝트가 진행 중인지에 대한 질문
     * 현재 약 70B 모델들은 ChatGPT 3.5와 동등한 수준이며, 작은 모델들은 처음에는 비슷해 보일 수 있지만, 더 높은 비율로 환각을 일으키고 세계에 대한 지식이 부족함
     * GPT 4는 더 깊은 수준에서 '이해함'이며, 오픈소스 모델은 아직 비교가 되지 않음
     * 오픈소스 기술은 OpenAI가 구현하지 않는 출력 제어 기능(예: llama.cpp의 문법 또는 ControlNet)을 가지고 있어, 이 측면에서는 오픈소스가 OpenAI보다 앞서 있음
     * DeepSeek 67B 모델을 사용해본 경험 공유:
          + ChatGPT의 필요성을 대체할 만큼 충분함
     * Mistral OpenOrca는 창의적 글쓰기/분석에 있어 GPT4-turbo와 거의 동등하며, 비슷한 텍스트를 출력하는 경향이 있음
     * 장기적으로 오픈소스 LLM이 따라잡는 것은 거의 피할 수 없으며, 오픈소스 커뮤니티는 자원이 훨씬 제한적이지만 <30B 매개변수 모델의 개발 속도를 크게 높임
     * 개인적 경험에 따르면, 오픈소스 LLM은 아직 GPT 3.5의 품질에 도달하지 못했지만, 이미 오늘날 유용하며 로컬 머신에서 실행 가능함
     * Neovim 플러그인 gen.nvim을 사용하여 간단한 작업을 수행하며 많은 시간을 절약함
     * 미래에 대한 기대감 표현
     * GPT4가 지난 한 달 동안 지속적으로 후퇴함에 따라 오픈소스 모델이 따라잡고 있음을 확신함
"
"https://news.hada.io/topic?id=12192","위기에 처한 파이어폭스?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             위기에 처한 파이어폭스?

미국 정부 웹사이트 개발자 가이드라인의 영향

     * 미국 정부 웹사이트 개발자들을 위한 가이드라인이 Mozilla Firefox 브라우저의 사용 감소를 가속화할 수 있음.
     * 미국 웹 디자인 시스템(USWDS)은 개발자들에게 2% 이상의 사용률을 보이는 브라우저를 공식 지원하도록 규정함.
     * 현재 analytics.usa.gov의 데이터에 따르면, Firefox의 사용률은 2.2%로, 지원 기준선에 근접해 있음.

브라우저 사용률의 변화

     * Firefox는 2009년 11월 31.82%의 점유율로 정점을 찍은 후 지속적으로 감소함.
     * Chrome은 2009년 1월 1.37%에서 2020년 9월 66.34%로 급증한 후 최근 62.85%로 소폭 감소함.
     * 미국 내에서도 iPhone의 인기로 인해 Safari의 사용률이 높아져 Firefox에 불리함.

Firefox의 시장 점유율 감소

     * Chrome의 지배, 모바일 기기의 Safari 기본 사용, 기업 및 정부 IT 부서의 Microsoft Edge 사용 강조로 인해 Firefox의 웹 공간이 축소됨.
     * Firefox의 지속적인 점유율 하락으로 USWDS가 지원 브라우저 목록에서 제외될 위험에 처해 있음.

미국 정부의 웹 개발자 가이드라인이 미치는 영향

     * Firefox 사용률이 2% 미만으로 떨어지면 USWDS는 정부 웹 개발자들에게 Firefox 지원 중단을 통보할 수 있음.
     * 이러한 변화는 빠르게 전파되어 정부와 거래하는 많은 기업들에게 영향을 미칠 수 있음.
     * 기업들은 개발 비용과 배포 시간을 줄이기 위해 Firefox에 대한 테스트 및 특정 코딩을 줄일 수 있는 기회로 볼 수 있음.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 미국 정부 웹사이트 개발자들을 위한 가이드라인이 Firefox의 시장 점유율 감소에 영향을 줄 수 있다는 점임.
     * 이는 웹 개발자들과 기업 IT 부서에게 영향을 미칠 수 있으며, 결과적으로 Firefox의 지원이 줄어들 수 있음.
     * 이러한 변화는 웹 브라우저 다양성 감소와 개발자들의 작업 흐름에 영향을 줄 수 있어, 기술 커뮤니티와 사용자들에게 흥미로운 주제임.

        Hacker News 의견

     * 파이어폭스는 기본적으로 강화된 추적 보호 기능을 사용하여 Google Analytics를 대체하는데, 이로 인해 사용량 통계가 실제와 다를 수 있음을 지적함.
     * 한 사용자는 Manifest V3 사건 이후 파이어폭스로 전환했으며, 시장 점유율이 낮은 브라우저 사용의 부정적인 영향이 과장되었다고 느낌. 웹 표준화가 진행되면서 표준을 준수하는 소규모 브라우저 사용에 문제가 없다고 경험함.
     * 정부 웹사이트는 시장 점유율이 아닌 W3C 오픈 표준을 준수해야 하며, 개발자들은 여러 브라우저에서 테스트를 해야 함을 제안함. 또한, 정부의 비웹 플랫폼 앱 사용을 지양하고 웹 표준 플랫폼에 투자하도록 권장함.
     * 파이어폭스는 기본적으로 다양한 분석 및 추적을 차단하므로 사용자 수가 실제보다 적게 계산될 수 있음. 미국 웹 표준 개발 서비스(USWDS)가 지원하는 기본적인 웹 기능에 대해서는 파이어폭스의 지원 여부가 크게 중요하지 않음을 언급함.
     * 파이어폭스는 이미 5년 전부터 통계적으로 중요하지 않았으며, 크롬과 사파리가 기본 브라우저로 제공되어 시장 점유율이 높아진 반면, 파이어폭스는 개선해도 시장 점유율이 오르지 않을 것이라는 의견을 제시함.
     * 파이어폭스는 훌륭한 브라우저이지만 마케팅 전략이 부족하다고 지적함. 사람들이 파이어폭스를 다운로드하고 싶게 만드는 '멋짐'과 같은 요소가 필요하다고 주장함.
     * 파이어폭스는 신뢰할 수 있는 광고 차단 기능을 제공하며, 구글 크롬이나 마이크로소프트 엣지와 달리 광고를 기본적으로 허용하지 않아 웹사이트가 더 빠르게 작동한다고 언급함.
     * 파이어폭스의 글로벌 시장 점유율은 여전히 4.7%, 미국 내에서는 4.9%로, 독일과 같은 일부 국가에서는 더 높은 점유율을 보이며, 아직 지원할 만큼 충분히 중요한 점유율을 유지하고 있음을 밝힘.
     * 파이어폭스는 브라우저의 성능과 사용자 인터페이스, 기능에 더 집중해야 하며, Mozilla가 프라이버시와 비브라우저 관련 프로젝트에 너무 많은 주의를 기울이고 있다고 비판함.
     * Manifest V3로 인해 크롬에서 uBlock Origin이나 다른 효과적인 광고 차단기가 제대로 작동하지 않게 되면, 일부 사용자가 파이어폭스로 전환할 가능성이 있음을 제기함.
"
"https://news.hada.io/topic?id=12139","Onyx - WebAssembly 기반의 새로운 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Onyx - WebAssembly 기반의 새로운 프로그래밍 언어

     * 현대적이고 표현력이 풍부한 구문, 엄격한 타입 안전성, 빠른 빌드시간, 크로스 플랫폼 지원
     * Go, Jai, Odin 등의 명령형 프로그래밍 언어에서 영감을 받았지만, 어느 정도 함수형 스타일로도 프로그래밍 가능
     * C-FFI 지원으로 네이티브 C 라이브러리 호출 가능
     * 웹 서버부터 비디오 게임까지 다양한 부분의 개발에 사용 가능
     * 지난 3년의 개발 기간 동안 빠른 컴파일러, 패키지 관리자, 랭귀지 서버, 에디터 지원, Wasmer 및 WASIX를 사용한 크로스 플랫폼 배포 등의 기능이 추가됨
"
"https://news.hada.io/topic?id=12128","데이터베이스 구축 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              데이터베이스 구축 중단

데이터 관리의 복잡성

     * 프론트엔드 엔지니어는 API 데이터를 캐시해야 할 필요성을 깨닫게 됨.
     * 초기에는 간단한 데이터 저장으로 시작하지만, 기능 요청이 늘어나면서 데이터 캐시, 수동 인덱스, 낙관적 변이(optimistic mutations), 재귀적 캐시 무효화 등을 구현하게 됨.
     * 이러한 기능들은 데이터베이스의 내부 작동과 유사하며, 복잡한 프론트엔드 애플리케이션에서는 결국 도메인 특화 데이터베이스를 만들게 됨.

캐시의 기본

     * API 요청 결과를 로컬 변수에 저장하는 것으로 시작.
     * 선언적 프레임워크를 사용하는 웹 애플리케이션에서 불필요한 API 요청을 방지하기 위해 데이터를 변수에 저장함.
     * 캐시를 더 높은 계층으로 옮기거나 UI 트리 외부로 이동시키는 것이 다음 단계임.

인덱스를 통한 속도 향상

     * 데이터를 특정 방식으로 조직함으로써 애플리케이션의 작업을 줄이고 사용자 경험을 향상시킬 수 있음.
     * 프론트엔드 데이터 최적화가 데이터베이스 저장소의 내부 작동과 유사함을 발견함.
     * ID별로 데이터를 저장하고, 날짜별로 항목을 빠르게 조회할 수 있는 인덱스를 만들어 데이터 구조를 개선함.

낙관적 변이

     * 서버 응답을 기다리지 않고 로컬에서 특정 작업의 효과를 시뮬레이션하는 것.
     * 사용자 인터페이스가 즉각적으로 반응하는 것처럼 보이게 하지만, 서버와 다른 결과가 나올 경우 UI가 변경 사항을 롤백해야 함.
     * 클라이언트와 서버 간의 논리를 복제하고, 비동기적 오류를 처리하며, 애플리케이션 재시작을 거쳐 변경 사항을 조정하는 등의 도전과제가 있음.

재귀적 캐시 무효화

     * 데이터가 캐시의 여러 곳에 나타나며, 업데이트 후 서버와 일치하도록 캐시를 올바르게 무효화하는 것이 필요함.
     * UI가 캐시의 어떤 부분이 각 변이에 관련되어 있는지 알아야 하며, 이는 규모가 커질수록 취약해질 수 있음.
     * 낙관적 변이와 결합될 때, 클라이언트 측에서 서버 변경을 예측하기 위해 서버 논리를 복제하는 것이 더 어려워짐.

데이터베이스 구축 중?

     * 충분한 복잡성을 가진 프론트엔드 애플리케이션에서는 결국 많은 데이터 관리 기능을 구축하게 되며, 이는 사용자를 기쁘게 하고 비즈니스 문제를 해결하는 데서 시간을 빼앗김.
     * 프론트엔드 최적화된 데이터베이스 스택에 대한 대안을 제시함.

SQLSync 소개

     * SQLite를 기반으로 한 프론트엔드 최적화된 데이터베이스 스택인 SQLSync를 개발함.
     * SQLSync는 데이터 관리 문제를 해결하고 개발자가 애플리케이션의 독특한 기능에 집중할 수 있도록 설계됨.
     * SQLSync는 내구성 있는 캐시, SQLite의 전체 기능, 낙관적 변이, 스마트 캐시 무효화, 반응형 쿼리를 제공함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 프론트엔드 애플리케이션의 복잡성이 증가함에 따라 개발자들이 데이터베이스와 유사한 기능을 자체적으로 구현하게 되는 현상입니다. 이러한 작업은 개발자의 시간을 소모하고, 실제로 사용자에게 가치를 제공하는 기능 개발에서 벗어나게 만듭니다. SQLSync와 같은 프론트엔드 최적화된 데이터베이스 스택은 이러한 문제를 해결하고자 하는 혁신적인 접근 방식을 제시합니다. 이 글이 흥미로운 이유는 기존의 데이터 관리 방식에 대한 근본적인 문제를 지적하고, 개발자가 더 효율적으로 작업할 수 있는 새로운 해결책을 모색하고 있기 때문입니다.

        Hacker News 의견

     * 프로젝트 창작자인 친구에 대한 이해
          + SQLsync는 프론트엔드 개발자들이 브라우저 내에서 원격 데이터베이스를 질의하고 업데이트할 수 있게 해주는 도구임.
          + WASM의 힘을 이용해 SQLite 데이터베이스를 브라우저로 전송하는 방식으로 작동함.
          + 여러 클라이언트 간의 동기화를 위해 반응형 알고리즘을 사용함.
          + 개발자들의 데이터 동기화 작업을 혁신적으로 해결하는 접근법임.
     * 과거 회사의 프로젝트 관리 소프트웨어 경험
          + 체크인/아웃 메커니즘을 사용해 데이터를 동기화했으나, 실시간 업데이트 앱이 등장하면서 구식으로 여겨짐.
          + SPA 웹 앱을 10년간 구축한 경험에서, 이러한 데이터 동기화 메커니즘이 시대를 앞서간 것으로 느껴짐.
     * SPA를 버리면 사라지는 문제
          + Hotwire나 htmx와 같은 솔루션을 사용하면 서버 쿼리가 단순화되고, 이를 빠르게 만드는 문제가 더 잘 이해됨.
     * SQLSync 창작자의 의견
          + 많은 질문에 답변하고, 놓친 질문을 주기적으로 확인할 예정임.
          + SQLSync를 만든 동기에 초점을 맞춘 첫 게시물에 대한 토론이 기쁨.
          + 다음 게시물에서 SQLSync의 작동 방식에 대해 설명할 예정임.
     * 사용자에게 현실과 다른 정신 모델을 주지 말 것
          + 데이터베이스 동기화는 클라이언트-서버 모델보다 복잡할 수 있음.
          + 빠른 UI가 필요할 때 CRDT 기본 요소를 사용하는 것이 더 안전하다고 느낌.
     * 측정 가능한 것이 관리되는 원칙과 침몰 비용의 오류
          + 데이터베이스의 복잡성이 문제임.
          + SQL의 문법이 문제이며, 기본적인 관계형 데이터베이스 사용이 즐거운 경험이라면, 자체 데이터베이스를 만드는 대신 DB를 사용할 유혹이 커질 것임.
          + 좋은 데이터베이스는 SQL을 사용하며, 효율성을 위해서는 데이터베이스 언어를 사용해야 함.
     * 클라이언트와 서버 간 상태 동기화의 문제
          + PHP/SSR 모델로 돌아가면 UX 희생을 통해 문제를 우회할 수 있음.
          + SPA는 좋지만, 멀티파트 폼 게시도 여전히 작동함.
          + 모든 상태를 서버에 두고 클라이언트를 단순한 터미널로 취급하는 것이 개발 경험을 향상시킴.
     * ORM 라이브러리와의 비교
          + 브라우저에서 지원하는 TypeORM과 SQL.js를 직접 사용하는 것과 SQLsync를 비교하는 질문.
     * 프론트엔드와 백엔드 데이터베이스의 차이
          + 프론트엔드 데이터베이스는 백엔드와 다를 수 있으며, 클라이언트에서 실시간 상태를 더 잘 관리할 필요가 있음.
          + react query와 웹소켓을 사용하여 캐시 무효화를 고려 중임.
          + SQLsync 아이디어도 고려할 가치가 있음.
     * SignalDB를 통한 유사한 시도
          + SignalDB는 신호를 이용한 반응성과 프레임워크에 구애받지 않는 mongodb와 유사한 쿼리 구문을 사용함.
"
"https://news.hada.io/topic?id=12146","2023 프론트엔드 개발자 취업 팁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2023 프론트엔드 개발자 취업 팁

     * 3년차 웹 프론트엔드 개발자가 이직을 준비하면서 얻은 경험과 팁을 정리
     * 현재 구직 시장 상태
     * 보통 경력같은 신입, 3년차 이상을 원한다.
     * react가 현재는 최고다.
     * 회사 선택 & 팁
     * 서류합격 - 이력서 & 팁
     * 코딩과제 & 팁
     * 코딩 테스트 & 팁
     * 대면 면접 - 기술면접 & 팁
     * 대면 면접 - 컬쳐핏 & 팁
     * 대면 면접 - 임원 & 팁
     * 레퍼런스 체크 & 팁
     * 연봉 협상 & 팁

   좋은 글 감사합니다.
"
"https://news.hada.io/topic?id=12108","Brickception - 팝업윈도우로 하는 블럭깨기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Brickception - 팝업윈도우로 하는 블럭깨기

     * ""Brick Inception""
     * 클래식한 Breakout(블럭깨기) 게임에 팝업 창을 결합한 새로운 형태의 게임.
     * 게임을 플레이하기 위해서는 팝업 창을 활성화해야 하며, 주 게임 창과 패들 조작 창 두 개의 팝업이 등장
     * 패들 조작 창에는 중첩된 게임이 있으며, 두 창에서 모두 승리해야 함
     * 패들 창을 움직이면 패들이 움직이고, 주 게임 창의 공은 패들 창의 상단에서 튕김
     * 모바일 기기와 같이 팝업을 지원하지 않는 환경에서는 게임을 플레이할 수 없음
     * 게임 개발자는 Preet Shihn이며, 원래 개념은 Ryo Suzuki가 제공
     * 소스 코드는 GitHub에서 확인 가능

GN⁺의 의견

     * BRICKCEPTION은 기존의 브레이크아웃 게임을 혁신적으로 변형한 게임으로, 팝업 창을 활용한 독특한 게임 플레이가 특징.
     * 이 게임은 사용자에게 두 개의 창을 동시에 관리하는 새로운 도전을 제공하며, 이는 게임에 대한 흥미와 재미를 더함.
     * 오픈 소스로 제공되어 개발자들이 소스 코드를 직접 확인하고 학습할 수 있는 기회를 제공하는 점도 매력적.

        Hacker News 의견

     * 이 게임은 정말 기발하며, 특이하면서도 흥미롭게 즐길 수 있는 방식으로 기발함.
          + 두 개의 브레이크아웃 게임을 동시에 다루어야 하며, 같은 마우스로 두 개의 패들을 다른 스케일로 동시에 조작함.
          + 두 공이 잠시 동기화되었을 때 동시에 칠 수 없는 흥미로운 도전이 존재함.
     * 겟티어 문제(Gettier Problems)를 연상시킴.
          + 사막 여행자가 물을 찾는 예시와 실제 세계에서의 비디오 피드백 루프 버전의 겟티어 문제를 예로 듦.
          + 문제가 N번째 중첩된 수준에서만 해결되는 것과 같음.
     * 2013년 해커뉴스 스레드를 떠올리게 함, 틱택토를 훨씬 더 흥미롭고 메타적으로 변화시킴.
          + 당시 간단한 온라인 플레이 가능한 게임을 만듦.
     * 이 게임을 상상하는 것만으로도 상당한 불안감을 느낌. 그러나 매우 멋진 아이디어임.
     * 타일링 윈도우 매니저를 사용할 때는 상당히 어려움.
     * 블록 깨기에 대한 더 많은 관심이 있다면, Pippin Barr의 BREAKSOUT을 확인해볼 것. 36가지 기발한 브레이크아웃 변형을 모아놓음.
     * 이 게임은 너무 우스꽝스러워 웃음이 나옴. 윈도우 10에서 잘 작동함.
     * 좌절감을 주는 난이도: 사랑스러움! 여기에 담긴 기발함이 훌륭함.
     * 리눅스/파이어폭스: 패들이 움직이지 않고 패들 팝업이 공을 튕기지 않음.
          + 리눅스/크롬: 패들은 움직이지 않지만 패들 팝업은 공을 튕김.
     * 이 아이디어는 놀랍지만 동시에 완전히 사악함.
"
"https://news.hada.io/topic?id=12150","Marker - PDF를 마크다운으로 변환하는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Marker - PDF를 마크다운으로 변환하는 오픈소스

     * PDF, EPUB, MOBI 를 마크다운으로 변환
     * 페이스북 리서치가 만든 Nougat 보다 10배 이상 빠르고 더 정확하게 변환
     * 책과 논문 형식에 최적화됨
     * 헤더, 푸터 및 다른 아티팩트는 제거
     * 대부분의 수식은 LaTeX로 변환
     * 코드블록 및 테이블은 포맷팅
     * 다국어 지원

   이런….
   영어권 출판사들에게 시련이 닥치는군요.
   몇볓 테크 위주 출판사들은 도서 구매 시 pdf 파일을 그냥 주는 곳도 더러 있는데, 어떻게 풀어나갈지 궁금하네요.

   PDF는 OCR이 되어있어야 하는걸까요?? 당장 써봐야겟네요

   readme만 봤을때는 OCR 작업도 수행해주는걸로 보이네요...제가 잘못읽었을수도...

   네.. 영알못에겐 좀 어려운 표현을 사용했네요
   Extract text, OCR if necessary??

     This works best on digital PDFs that won't require a lot of OCR. It's optimized for speed, and limited OCR is used to fix errors.

   속도에 치중되었기때문에, 대량의 OCR 이 요구되는 PDF 에는 안 맞을 확률이 높네요.
   OCR 이 되기는 되는데, 보장못함 이라고 이해하시면될 거 같네요.

     Only languages similar to English (Spanish, French, German, Russian, etc) are supported. Languages with different character sets (Chinese, Japanese, Korean, etc) are not.

   추가적으로 CJK 는 지원하지 않습니다.

   감사합니다!
"
"https://news.hada.io/topic?id=12176","Apple, 2023 앱 스토어 어워드 수상작 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Apple, 2023 앱 스토어 어워드 수상작 발표

App 부문

     * 올해의 iPhone 앱: All Trails
     * 올해의 iPad 앱: Prêt-à-Makeup
     * 올해의 Mac 앱: Photomator
     * 올해의 Apple TV 앱: MUBI(MUBI, Inc.)
     * 올해의 Apple Watch 앱: SmartGym

게임 부문

     * 올해의 iPhone 게임: 붕괴: 스타레일 - Honkai: Star Rail
     * 올해의 iPad 게임: Lost in Play
     * 올해의 Mac 게임: P의 거짓(NEOWIZ)
     * 올해의 Apple Arcade 게임:Hello Kitty Island Adventure

문화적 영향력 부문 수상작

     * Pok Pok - 어린이를 위한 디지털 장난감 공간
     * Proloquo - '증강현실 기반 보완 대체 의사소통(AAC)' 도구
     * Too Good To Go - 판매되지 않은 음식이 있는 레스토랑이나 매장을 합리적인 가격에 사용자와 연결해서 음식물 쓰레기 최소화
     * Unpacking - 명상 퍼즐 게임
     * Finding Hannah - 다채로운 색감의 성장형 숨은그림찾기 게임

   피의 거짓이 여기에도 있네요

   전 엑스박스에서 돌려봤는데 잘 만들긴 했더라고요. 하지만 피지컬이 안되어서 중간에 포기 ㅠ
"
"https://news.hada.io/topic?id=12092","러스트 std fs가 파이썬보다 느린가? 아니, 하드웨어 문제임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  러스트 std fs가 파이썬보다 느린가? 아니, 하드웨어 문제임

OpenDAL 파이썬 바인딩이 파이썬보다 느린가?

     * OpenDAL은 다양한 저장소 서비스에서 데이터를 효율적으로 검색할 수 있게 해주는 데이터 액세스 레이어임.
     * OpenDAL의 파이썬 바인딩이 파이썬 자체보다 느리다는 보고가 있음.
     * 파이썬 내부 캐시, 파일 읽기 가속화, PyO3 추가 오버헤드 등이 원인일 수 있음을 가설로 제시함.

OpenDAL Fs 서비스가 파이썬보다 느린가?

     * Rust, OpenDAL, Python, PyO3 등 여러 요소가 관련된 문제임.
     * Rust로 구현된 OpenDAL fs 서비스도 파이썬보다 느림을 발견함.

Rust std fs가 파이썬보다 느린가?

     * OpenDAL이 std::fs를 통해 fs 서비스를 구현함.
     * Rust의 std::fs를 사용한 구현도 파이썬보다 느림을 확인함.

Rust std fs가 파이썬보다 느린가? 정말!?

     * Rust std fs가 파이썬보다 느리다는 결과에 의문을 제기함.
     * strace를 사용하여 시스템 호출 분석을 배움.
     * strace 결과 분석을 통해 둘 다 mmap을 사용하고 있음에도 파이썬이 더 빠른 이유를 찾지 못함.

왜 여기서 mmap을 사용하는가?

     * mmap은 파일을 메모리에 매핑하는 것 외에도 대규모 메모리 영역 할당에 사용됨.
     * malloc을 사용하여 메모리를 요청할 때 glibc가 mmap을 사용하여 메모리를 할당함.

파이썬은 Rust와 동일한 메모리 할당자를 가지고 있는가?

     * 파이썬은 pymalloc이라는 작은 할당에 최적화된 메모리 할당자를 사용함.
     * pymalloc은 작은 객체에 최적화되어 있으며, 큰 할당에는 PyMem_RawMalloc()와 PyMem_RawRealloc()을 사용함.

Rust가 기본 메모리 할당자로 파이썬보다 느린가?

     * mmap이 문제를 일으키는 것으로 의심됨.
     * jemalloc으로 전환한 Rust 프로그램이 파이썬보다 빠르게 동작함을 발견함.

Rust가 내 컴퓨터에서만 파이썬보다 느린가!

     * Rust가 파이썬보다 느리게 동작하는 것은 특정 컴퓨터에서만 발생함.
     * CPU와 메모리에 대한 상세 정보 제공함.
     * CPU 취약점 완화 기능, Transparent Hugepage, CPU 코어 친화도 등을 조정해도 결과에 변화 없음.
     * eBPF 프로그램을 사용하여 Rust가 시스템 호출 수준에서도 파이썬보다 느림을 확인함.

C가 파이썬보다 느린가?

     * C로 구현한 버전도 파이썬보다 느림을 발견함.

C가 파이썬보다 느린가? 지정된 오프셋 없이!

     * 메모리 영역 오프셋에 차이가 있음을 발견하고, 오프셋을 조정하여 C 프로그램의 속도를 향상시킴.
     * AMD Ryzen CPU에서 특정 오프셋 없이는 성능 저하가 발생함을 확인함.

AMD Ryzen 9 5900X가 지정된 오프셋 없이 느린가!

     * CPU 관련 문제임을 확인하고, 커널 개발자가 논의에 참여함.
     * perf를 사용한 프로파일링을 통해 오프셋 없이는 성능 저하가 발생함을 다시 확인함.

   GN⁺의 의견: 이 글에서 가장 중요한 점은 Rust와 C가 특정 하드웨어 환경에서 파이썬보다 느리게 동작할 수 있다는 것이며, 이는 메모리 할당과 CPU의 특정 동작 방식에 기인할 수 있다는 점입니다. 이 글은 소프트웨어 성능에 영향을 미치는 다양한 요소들을 탐구하는 과정을 통해, 하드웨어와 소프트웨어의 상호작용이 얼마나 복잡할 수 있는지를 보여줍니다. 이러한 탐구는 소프트웨어 엔지니어링의 세계에서 발생할 수 있는 예상치 못한 문제들을 해결하는 데 있어 중요한 교훈을 제공합니다.

        Hacker News 의견

     * 혼란스러운 전제에 대한 의견

     한 사용자는 Python 표준 라이브러리의 함수들이 순수 Python으로 작성되었다고 생각하는 것에 대해 혼란스러워함. Python의 파일 읽기 메소드와 OpenDAL 모두 네이티브 코드를 래핑한 Python 래퍼라는 점에서 성능 차이가 흥미롭지만, ""Python보다 느리다""고 표현하는 것은 이상하다고 느낌. Python 표준 라이브러리의 함수 구현이 네이티브 코드로 되어 있고, 각각 최적화되어 있다고 기대함. 기사의 결론이 네이티브 코드의 작동 방식과 관련이 있다는 것에 놀라지 않았으며, 특정 답변에는 놀랐지만 혼란스러운 시작에도 불구하고 매우 흥미로운 기사였음을 인정함.
     * CPU 기능 플래그에 대한 토론

     두 개의 전용 CPU 기능 플래그가 있어서 REP STOS/MOV 명령어가 memset/memcpy를 위한 짧은 명령어 시퀀스로서 빠르고 사용 가능함을 나타냄. 새로운 CPU 세대마다 최적화된 루틴을 수작업으로 만드는 것은 수십 년간 지속된 고통임. 이제는 CPU 제조업체의 타이밍 테스트 스위트의 일부가 되어야 하지 않을까 하는 의문을 제기함.
     * 관련 glibc 버그 링크

     Zen 4와 관련된 glibc 버그에 대한 링크를 제공함.
     * 기사에 대한 긍정적인 반응

     한 사용자는 기사를 읽고 std::fs의 잘못된 사용에 대해 비웃을 준비를 했지만, 기사가 토끼굴과 미스터리의 연속이라며 잘 쓰여졌고 매우 흥미롭다고 평가함.
     * 기사에 대한 높은 평가

     다른 사용자는 이 기사가 이번 주에 읽은 것 중 가장 흥미로운 기사라고 평가하며, 글이 훌륭하게 작성되었다고 칭찬함.
     * 문제 해결을 위한 제안

     명백한 해결책으로, ""copy_user_generic"" 커널 메소드를 변경하여 CPU가 문제가 있는 것으로 감지되고 메모리 정렬이 느림 버그를 유발하는 경우 다른 메모리 복사 구현을 사용하도록 패치를 보내는 것을 제안함.
     * Rust의 기본 할당자에 대한 정보

     Rust의 기본 할당자가 2018년까지 jemalloc이었다는 정보와 관련 링크를 제공함.
     * 성능 향상을 위한 Rust 개발자의 고려 사항

     Rust 개발자들이 jemallocator로 전환하여 성능을 향상시키는 것을 고려해야 하는지, 이것이 모든 사람이 성능을 무료로 얻을 수 있는 방법인지, C 코드베이스도 이로부터 이득을 볼 수 있는지, 현재 테이블 위에 남겨진 성능인지에 대한 궁금증을 표현함.
     * AMD와 Intel의 CPU 차이에 대한 설명

     AMD의 문자열 저장 방식이 Intel과 다르며, CPU의 L2 크기를 넘어서기 전까지는 사용하지 않는 것이 좋다고 설명함. 그 지점을 넘어서면 문자열 저장을 사용하는 것이 이득이며 ""DRAM 속도""로 실행되어야 하지만, 높은 시작 비용이 있기 때문에 해당 임계값에 도달할 때까지는 256비트 벡터 로드/스토어를 사용해야 함을 언급함.
     * 기사를 적절한 사람들에게 전달한 사실

     한 사용자가 이 기사를 적절한 사람들에게 전달했다고 밝힘.
"
"https://news.hada.io/topic?id=12097","Okta, 해커가 전체 고객 지원 사용자의 데이터를 훔쳤다고 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Okta, 해커가 전체 고객 지원 사용자의 데이터를 훔쳤다고 발표

     * 두달전 네트워크에 침입한 해커들이 고객 지원 시스템의 모든 사용자에 대한 정보를 훔쳤다는 사실을 발견
          + 이전에 회사가 영향을 받았다고 밝힌 고객의 1%보다 훨씬 더 큰 범위
     * 고객에게 보낸 메일에서 ""해커들이 자사 고객 지원 시스템을 사용하는 모든 고객의 이름과 이메일 주소가 포함된 데이터가 포함된 보고서를 다운로드한 것으로 확인했다""고 알림
          + Okta는 고객에게 공격 위험이 증가할 수 있다고 경고하고 강력한 다단계 인증을 사용할 것을 촉구
     * Okta의 주가는 해커들이 훔친 자격 증명을 사용하여 지원 시스템에 액세스했다는 사실을 공개한 후 지난 달 급락했음
          + 당시 회사 대변인은 Okta 고객의 약 1%에 해당하는 약 184명의 고객이 영향을 받은 것으로 추정했음
          + 최근 감사 결과 처음에 생각했던 것보다 더 많은 데이터가 도난당한 것으로 밝혀져 조사 결과를 수정
          + 또한 일부 Okta 직원 정보가 도난 보고서에 포함되어 있음도 발견
     * 데이터에는 고객 사용자 이름, 회사 이름, 휴대폰 번호에 대한 필드가 포함되어 있지만 대부분의 필드가 비어 있고 자격 증명이나 민감한 개인 데이터가 포함되어 있지 않다고 밝힘
          + 보고서에 나열된 고객 중 99% 이상이 도난당한 유일한 연락처 정보는 이름과 이메일 주소뿐이었다고

   이건 1달전 해커들이 Okta 지원 부서에서 액세스 토큰을 훔쳐갔다
   작년 초에는 Lapsus$ 해킹그룹, Okta를 해킹했다고 주장
   11개월전에는 Okta, GitHub Repo를 해킹 당해서 소스코드 유출

   Okta 는 인증서비스 업계 탑인데.. 너무 사고가 많네요.
"
"https://news.hada.io/topic?id=12132","그것을 위해 JavaScript가 필요 없습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       그것을 위해 JavaScript가 필요 없습니다

웹 개발의 핵심 원칙: 최소 권한의 법칙

     * 웹 개발의 핵심 원칙 중 하나인 '최소 권한의 법칙'은 주어진 목적에 적합한 가장 낮은 수준의 언어를 선택하는 것을 의미함.
     * HTML, CSS, JS 중에서 HTML이 가장 선호되며, 그 다음이 CSS, 마지막이 JS임.
     * JS는 가장 다재다능하지만, 로드 실패, 추가 리소스 소모, 접근성 문제 등의 위험이 있음.

사용자 정의 스위치

     * 디자인 요구에 따라 일반 체크박스 대신 사용자 정의 스위치를 구현할 때, JS 대신 :checked 가상 클래스를 사용하는 HTML과 CSS로 구현 가능함.
     * 브라우저는 레이블 내부에 있는 입력 요소를 자동으로 연결하여 클릭 가능하게 함으로써 추가적인 JS 핸들러 없이도 토글 기능을 제공함.

네이티브 자동 완성 기능: Datalist

     * 자바스크립트 대신 브라우저의 내장 기능인 datalist를 사용하여 사용자가 입력함에 따라 옵션을 자동으로 필터링하여 보여주는 기능을 구현할 수 있음.
     * 사용자는 자신이 원하는 값을 입력하거나, 브라우저가 추가한 드롭다운 아이콘을 클릭하여 모든 옵션을 볼 수 있음.

네이티브 색상 선택기

     * 복잡한 JS를 사용한 색상 선택기 대신, 단일 HTML 라인으로 구현된 네이티브 색상 선택기를 사용할 수 있음.
     * 크롬 기반 브라우저에서는 화면 어디에서나 색상을 선택할 수 있는 추가 기능을 제공함.

아코디언

     * details와 summary 요소를 사용하여 사용자가 필요할 때까지 내용을 숨겨 놓고 페이지의 구조를 개선할 수 있음.
     * open 속성을 사용하여 아코디언 항목 중 하나를 기본적으로 열어 둘 수 있음.

대화형 모달

     * dialog 요소를 사용하여 사용자에게 정보를 제공하거나 입력을 요청하는 모달을 구현할 수 있음.
     * JS를 사용하여 모달을 열지만, 나머지는 모두 네이티브 HTML과 CSS로 처리할 수 있음.

결론

     * 이 기사는 JS를 덜 사용하고, CSS와 HTML의 기능을 활용하여 더 나은 웹사이트를 만들 수 있음을 보여줌.
     * 접근성을 고려하여 새로운 구현 방식을 테스트하는 것이 중요함.

GN⁺의 의견

     * 이 글에서 가장 중요한 점은 웹 개발 시 JS에 의존하지 않고 HTML과 CSS의 기능을 최대한 활용하여 성능과 접근성을 향상시킬 수 있다는 것임.
     * 웹 개발자들에게 흥미로운 이유는 기존에 JS로만 가능하다고 생각했던 기능들을 더 간단하고 효율적인 방법으로 구현할 수 있는 새로운 방법을 제시하기 때문임.

        Hacker News 의견

     * 자바스크립트의 호환성이 더 좋기 때문에 특정 영역에서 사용하는 것에 대한 언급이 누락되었다는 지적
          + 새로운 자바스크립트를 트랜스파일링을 통해 사용할 수 있지만, CSS와 HTML의 누락된 기능을 폴리필하는 것은 훨씬 어렵고 때로는 불가능함
          + appearance 속성 사용 시 MDN에서 많은 주의사항을 제시하며, 특히 appearance: none 사용에 대해 철저한 테스트를 권장함
          + datalist는 Firefox Android에서 기능하지 않으며, 단순한 입력 상자로만 보임
          + 색상 선택기는 매우 비표준적이어서 대부분의 비즈니스에서 사용하기 어려움
          + details와 dialog의 일관성 부족을 기사 자체도 인정함
          + 브라우저들이 이러한 기능들을 일관되게 지원하는 시대가 오기를 바라지만, 그때까지는 주로 개인 프로젝트에서만 사용할 것임
     * 2023년에도 여전히 폼과 사용자 데이터 입력에 대한 일반적인 사용자 경험(UX) 문제를 겪고 있음에 놀라움을 표함
          + 이 문제가 왜 해결되지 않았는지 이해할 수 없음
          + XForms를 통해 한 번에 해결하려는 시도가 있었지만 브라우저에서 구현되지 않았고, 대신 CSS/JS 컴포넌트 프레임워크가 제한된 폼 요소 세트를 제공함
     * datalist에 대해 알지 못했지만, Chrome Android에서 제대로 작동하지 않는 것으로 보임
          + 키보드에서 옵션을 볼 수 있지만, 모바일 웹 UI에서 이 기능을 본 것은 처음이며, 일반 사용자가 사용 방법을 알아내는 데 자신이 없음
          + Firefox Android에서는 전혀 지원되지 않음
     * scroll-behavior: smooth를 사용한 네이티브 부드러운 스크롤링, scroll-snap을 사용한 네이티브 캐러셀, 스크롤 기반 애니메이션에 대한 언급
          + 이 기능들의 사용을 제한하고, 종종 부정적인 부작용이 있으므로 신중히 사용할 것을 권장함
     * <details>를 사용하면 Ctrl+F로 내용을 검색할 수 있고 자바스크립트 아코디언을 열 수 없는 반면, <details>는 열 수 있다는 장점이 있음
     * datalist는 내부 도구가 아니라면 적절한 선택이 아니라는 의견
          + 기본값이 좋지 않고 스타일을 변경할 수 없으며, 스타일링이나 행동 변경에 제한이 있을 때 자바스크립트를 사용하는 것이 종종 유일한 선택임
     * HTML 표준을 따르면 모든 것이 일관되고 접근성이나 번역과 같은 것들에 쉽게 적용할 수 있다는 의견
          + 현대 사이트들이 동적으로 페이지를 로드하기 때문에 뒤로 가기 버튼조차 작동하지 않는 문제를 지적함
     * CSS가 웹 페이지를 읽기 어렵게 만드는 도구로 사용될 수 있다는 지적
          + 레이아웃과 타이포그래피의 모든 측면을 사용자가 제어할 수 있는 브라우저로 돌려보내야 한다는 의견
     * 웹 개발의 핵심 원칙 중 하나로 ""가장 적은 힘의 원칙(Rule of Least Power)""을 언급
          + 이 원칙에 대해 들어본 적 없다는 개발자의 의견과, 가능한 한 간단하게 작업하고자 하는 프론트엔드 개발자들이 있는지에 대한 궁금증을 표함
"
"https://news.hada.io/topic?id=12121","코드는 읽는 것보다 실행되는 경우가 더 많다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        코드는 읽는 것보다 실행되는 경우가 더 많다

소프트웨어 개발의 가치 체계

     * 소프트웨어 개발 과정에서 코드는 작성보다 읽히는 경우가 더 많으며, 이는 유지보수가 쉬운 코드를 작성하는 것이 좋은 투자임을 의미함.
     * 코드는 단순히 작성되는 것이 아니라 사용자에게 서비스를 제공하는 목적을 가지고 있으며, 사용자 경험이 중요함.
     * 사용자 중심의 개발을 위해 사용자에게 프로그램을 일찍이고 자주 보여주고 피드백을 받는 것이 중요함.

코드 운영의 중요성

     * 코드가 실행되는 것은 프로그램을 운영하는 것을 포함하며, 배포, 업그레이드, 모니터링 등을 포함함.
     * 소프트웨어가 실제 운영 환경에서 실행될 때 KISS(Keep It Simple, Stupid) 원칙이 더욱 중요해짐.
     * 실제 운영에서는 코드뿐만 아니라 시스템의 각 부분을 이해하고 실패 상황에서도 작동할 수 있도록 하는 것이 중요함.

비즈니스 관점의 중요성

     * 사용자 중심의 개발은 소프트웨어가 조직에 가치를 제공한다는 가정 하에 유효함.
     * 비즈니스 관점을 개발 과정에 포함시키는 것이 유익할 수 있으며, 예산, 마케팅, 기한 등을 고려해야 함.
     * 조직 전체를 고려할 때 소프트웨어, 팀 또는 사용자에게 의미 있는 결정이 항상 최선은 아닐 수 있음.

소프트웨어 개발의 일반적인 문제점

     * 유지보수가 어려운 코드는 작성자 중심의 접근으로 발생함.
     * 사용자 경험을 고려하지 않는 소프트웨어는 개발자 중심의 접근으로 인해 발생함.
     * 운영을 고려하지 않고 설계된 소프트웨어는 개발자 중심의 접근으로 인해 발생함.
     * 비즈니스 관점을 고려하지 않는 소프트웨어는 개발자 중심의 접근으로 인해 발생함.
     * 실제로 운영되지 않는 소프트웨어는 비즈니스 중심의 접근으로 인해 발생할 수 있음.

GN⁺의 의견

   이 글에서 가장 중요한 것은 소프트웨어 개발 과정에서 다양한 요소들의 상대적 중요성을 인식하고 이를 바탕으로 의사결정을 하는 것임. 사용자, 운영, 개발자, 비즈니스 간의 관계를 이해하고 균형을 맞추는 것이 중요함. 이 글은 소프트웨어 개발자들에게 흥미로운 인사이트를 제공하며, 개발 과정에서 종종 간과되기 쉬운 비즈니스와 운영의 중요성을 강조함으로써 보다 효과적이고 책임감 있는 개발 문화를 조성하는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 언어 설계 및 표준 라이브러리 개발자와 모듈 개발자, 일반 개발자, 최종 사용자 간의 사용량 증가

     언어 설계자 대비 모듈 개발자, 일반 개발자, 최종 사용자의 비율이 각각 약 1000배씩 증가하는 경향이 있음. 이는 언어 설계나 표준 라이브러리 개발 초기 단계에서의 작은 게으름이 후방에 큰 영향을 미칠 수 있음을 의미함.
     * 시스템 사용의 이유와 중간 관리자의 역할

     사용자가 시스템을 사용하는 이유는 회사에서 구매했기 때문일 수 있으며, 이 경우 개발자는 실제 사용자의 필요보다는 중간 관리자의 요구에 부응해야 함. 이는 사용자가 불완전한 제품에 얽매이게 될 수 있음을 시사함.
     * 비교 관계를 나타내는 수학 기호 ≹에 대한 발견

     '≹' 기호는 두 개체가 서로에게 크거나 작지 않으면서도 반드시 동등하지 않은 관계를 나타냄. 이는 수치적으로만 비교할 수 없는 상황에서 중요한 구분임.
     * 코드 실행 비용 대비 개발자 시간의 가치

     코드를 10억 번 실행하는 비용이 개발자 몇 분의 시간보다 적을 수 있음. AWS 서버를 한 달간 사용하여 웹 API 코드를 1000억 번 실행할 수도 있음. 코드 최적화는 경제적으로 비효율적이 될 때까지 항상 인간의 가독성을 우선시해야 함.
     * 코드 가독성의 중요성

     코드가 읽히지 않으면 오래 실행되지 않음을 의미함. 시스템 관리자에서 개발자로 전환하려는 초보자의 관점에서 이해함.
     * 저자의 이론에 대한 비판적 시각

     저자가 일반적인 진리를 재해석하여 자신의 이론을 구축함에 있어, 그 표현이 고통스럽고 유용하지 않은 단축어로 오해될 수 있음.
     * 비즈니스의 본질과 사용자의 중요성

     비즈니스는 실제로 존재하지 않으며, 자원을 조직하는 데 도움이 되는 가상의 구조임. 비즈니스의 목표는 사용자에게 봉사하는 것이며, 내부 정치가 혼란스러워 비즈니스 이익만을 추구하게 되면 조직은 독성을 가지게 됨.
     * 개발, 운영, 비즈니스의 복잡한 관계

     개발, 운영, 비즈니스는 각각 단일한 엔티티가 아니며 다양한 전문성과 조직 내 다른 역할을 가진 사람들로 구성됨. 이들 모두가 코드 작성 방식과 사용자에게 제공되는 시기에 영향을 미침.
     * 소프트웨어 업계의 윤리적 문제에 대한 토론

     소프트웨어 전문가들 사이에서 증가하는 불편함의 원인을 설명하려는 시도로, 사용자가 고객이 아닐 때, 비즈니스 모델이 사용자에게 부정적인 영향을 미칠 때의 윤리적 의무에 대한 질문을 제기함.
     * 개발, 운영, 비즈니스의 상대적 중요성에 대한 개인적 견해

     개발, 운영, 비즈니스의 중요성은 상황에 따라 다르며, 때로는 개발이 비즈니스나 운영보다 우선시되어야 하는 경우도 있음을 인정함.
"
"https://news.hada.io/topic?id=12157","EPA, 납 배관의 완전한 제거 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          EPA, 납 배관의 완전한 제거 추진

EPA의 납관 교체 규정 제안

     * 미국 환경보호청(EPA)이 전국의 수도 시설에 납으로 된 모든 파이프 교체를 처음으로 요구하는 규정을 제안함.
     * 이 규정이 확정되면, 지역 수도 회사들은 납 파이프를 파내고 교체하는 대대적인 작업을 해야 함.
     * 납 노출의 위험성과 관련된 건강 문제를 고려할 때, 이 규정은 공중 보건에 유익할 수 있으나, 추정되는 비용은 450억 달러에 이를 것으로 예상됨.

납 파이프 교체의 중요성

     * 납은 낮은 수준에서도 아이들에게 돌이킬 수 없는 인지 손상과 다른 건강 문제를 일으킬 수 있음.
     * 미국 내에는 약 900만 개의 납 파이프가 남아 있으며, 연방 정부는 이전까지 전면 교체를 요구한 적이 없음.
     * EPA 관리자 Michael Regan은 이 제안이 저소득 커뮤니티에 불균형적으로 영향을 미친 공중 보건 문제를 해결하는 중요한 발전이라고 언급함.

규정 제안의 내용

     * 제안된 규정에 따르면, 대부분의 수도 회사는 10년 내에 납 서비스 라인을 교체해야 함.
     * 매년 10%의 파이프를 교체해야 하며, 부분적인 교체를 제한하여 홈오너의 수돗물에서 높은 납 수준이 검출될 경우에도 회사가 소유한 파이프 부분만을 제거하는 것을 방지함.
     * 조 바이든 대통령은 2031년까지 미국의 모든 납 파이프를 교체하겠다는 약속을 했으며, 이 규정은 그 약속을 실현하기 위한 조치임.

자금 조달과 실행의 도전

     * 인프라 법안은 납 파이프 제거를 위해 150억 달러를 할당했으나, 총 비용이 450억 달러에서 최대 600억 달러로 추정되어 자금 부족 문제가 있음.
     * EPA의 제안된 규정은 이 프로젝트에 대한 비용을 누가 부담할지에 대한 질문에 완전히 답하지 않음.
     * 수도 회사들은 연방 자금 지원을 받기 위해 납 서비스 라인을 완전히 교체해야 하며, 인프라 법안에서 자금을 받지 못하는 회사들은 고객의 수도 요금 인상을 고려해야 할 수도 있음.

납관 교체의 사회적 영향

     * 납관 교체의 초기 비용은 가난하고 주로 흑인과 라티노가 사는 지역에서 교체를 하는 데 큰 장벽이 되어왔음.
     * 이러한 지역에서는 납 파이프가 더 흔하며, 부유한 가정이 저소득 가정보다 납 파이프를 완전히 교체할 가능성이 더 높아 건강 불평등이 증가함.

납과 구리 규정 개정의 배경

     * 환경주의자와 공중 보건 옹호자들은 수돗물 속 납에 대한 기존 규정이 복잡하고 약해 많은 미국인의 건강을 보호하지 못한다고 지적해왔음.
     * 2014년 플린트 수질 위기 이후, 강화된 규정을 요구하는 목소리가 높아졌으며, 트럼프 행정부는 1991년 이후 처음으로 규정을 업데이트했지만, 비판자들의 우려를 해소하지 못했음.
     * 바이든 행정부 하에서 EPA는 행동 수준을 15ppb에서 10ppb로 낮추고, 파이프 목록을 작성하며, 반복적인 노출이 있을 때 가정에 필터를 제공하도록 규정을 변경할 계획임.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 EPA가 제안한 납 파이프 교체 규정이 어떻게 공중 보건에 긍정적인 영향을 미칠 수 있는지에 대한 내용임. 납 노출이 아이들에게 미치는 해로운 영향을 고려할 때, 이 규정은 미래 세대의 건강과 안전을 보장하기 위한 중요한 단계임. 이러한 규정이 실제로 시행되면, 많은 도시와 지역 사회가 더 안전한 식수를 제공할 수 있게 되어 사람들에게 흥미롭고 매력적인 주제가 될 것임.

        Hacker News 의견

     * 전 세계적인 건강 문제인 납 노출 문제는 정부가 납의 원천을 추적하고 제거할 수 있게 함으로써 해결할 수 있는 명확한 방법이 있음.
     * 정기적으로 온수기를 비우고, 음용수로 온수를 사용하지 않아야 하는 이유는 온수기가 납을 함정으로 만들 수 있기 때문임.
     * 인간에게 쉽게 오염을 일으킬 수 있는 모든 환경적 납 원천은 제거되어야 하며, 이는 좋은 조치임. 이와 관련된 국제 조약이 있으면 좋을 것이며, 조약에 서명한 국가들에게 목표와 집행력을 부여해야 함.
     * 환경보호청(EPA)이 그 역할을 수행하는 것처럼 보이는 것은 상쾌한 일임.
     * 구리 파이프를 연결하는 데 사용되는 납 함유 솔더의 해로움은 어느 정도인가? 납이 없는 솔더는 1986년경에만 의무화되었으므로, 납을 포함한 솔더를 사용하는 구리 파이프가 많이 남아 있을 것임.
     * 미국의 물 문제가 생각보다 훨씬 심각함.
     * 미국에 거주하지 않지만, 역삼투(RO) 시스템을 갖추고 그 물을 마시는 것이 훨씬 안심됨.
     * 이러한 조치는 20년 전에 이루어졌어야 했음.
     * 장기적인 해결책이 더 나을 것임. 오늘날 납에 450억 달러를 투자한다면, 다음 세대에는 PFOA나 파이프 라이너에 사용되는 플라스틱과 같은 다른 오염 물질을 정화하기 위해 또 다른 투자를 해야 할 것임.
     * 가정용 물 필터 설치에 대한 보조금을 제공하고, 염소 처리 비용으로 매년 필터 보조금을 제공하는 것이 더 나을 수 있음. 한 번에 모든 문제를 해결할 수 있음.
"
"https://news.hada.io/topic?id=12182","Meta가 리눅스를 대규모로 패치하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Meta가 리눅스를 대규모로 패치하는 방법

     * 리눅스 서버 패치는 간단하지만, 수만 대의 서버를 다운타임 없이 패치하는 것은 쉽지 않음
     * Meta는 수백만대의 리눅스 서버 패치를 위해 Red Hat의 Kpatch 와 KLP(Kernel Live Patching)을 이용함
          + KLP는 재부팅하지 않고도 Linux 커널에 최신 보안 업데이트를 적용할 수 있음

라이브 커널 패치

     * 라이브 커널 패치는 메인 커널 패키지와 별개로 수정된 코드가 포함된 패키지로 제공됨
     * 라이브 패치는 누적되어 최신 패치에는 이전 패치의 모든 수정 사항이 포함
     * 라이브 패치는 모든 것에 적용되지 않으며, 데이터나 구조를 패치할 수 없고, 라이브 패치를 만드는 데 추가 엔지니어링 작업이 필요함

  Kpatch

     * Kpatch는 원본 커널과 패치된 커널을 비교한 다음 사용자 정의 커널 모듈을 사용하여 실행 중인 커널에 새 코드를 패치하는 방식으로 작동
     * 그런 다음 Kpatch 프로세스는 ftrace를 사용하여 기존 프로세스의 스택을 감시하여 유해한 영향 없이 패치를 수행할 수 있는지 확인
     * 안전하다고 판단되면 실행 중인 코드를 패치된 함수로 리디렉션한 다음 이제 오래된 코드를 제거
     * 이제 서버에 패치가 적용되어 다운타임이 발생하지 않음

  Meta 의 경우

     * 물론 실제로는 그렇게 간단하지 않음
     * 메타에서는 라이브 패치를 적용할 때 호스트에 패치를 적용하는 데 보통 1~2초가 걸림
     * 호스트 한 대에 1~2초라는 시간은 새로운 커널을 부팅하는 Linux 커널 메커니즘인 kexec과 비교하면 정말 빠른 속도
     * 다운타임이나 워크로드 마이그레이션이 필요하지 않으며, 라이브 패치를 적용하기만 하면 바로 사용할 수 있음

수백만 대의 기계 패치 방법

     * 수백만 대의 기계를 패치할 때는 이게 전부가 아님
     * 메타에선 패치 롤아웃 중 버그를 발견하게 될 수 있으므로, 관리자는 릴리스 후보 티어부터 먼저 패치함
     * RPM 기반 패치를 제공하는 패키지 롤러는 서버의 건강도 자동으로 확인함
     * 메타는 새 커널에서 충돌, 주요 경보, 애플리케이션 문제 및 성능을 모니터링하며, 오류율이 1000 대의 서버 당 크래시 1건을 넘으면 패치가 중단되고 이전 커널로 복원됨
     * Meta는 Kpatch를 사용하지만 다른 대안도 있음
          + SUSE는 kGraft를 제공하고, Oracle은 Ksplice를 사용하며, Canonical은 Livepatch를 지원
          + 코드에 관계없이 모두 비슷한 결과를 제공

GN⁺의 의견

   이 기사에서 가장 중요한 것은 메타가 전 세계 수백만 대의 서버에 대한 다운타임 없는 효율적인 패치 방법을 적용했다는 점입니다. 이는 초급 소프트웨어 엔지니어에게도 흥미로운 주제이며, 리눅스 시스템의 유지 관리와 보안에 대한 중요성을 강조합니다. 또한, 이 기사는 라이브 패치 기술의 복잡성과 필요성을 이해하는 데 도움을 줄 수 있습니다.

        Hacker News 의견

     * Ksplice는 오라클에 인수된 후 내가 근무하는 동안 사용자 공간 프로그램으로 확장된 원래의 실시간 패치 기술임. 클라우드로의 이동에도 불구하고 대규모로 전체 시스템을 재시작할 필요가 없기 때문에 구식이 되지 않는 매우 멋진 기술임.
     * 메타가 이 방법을 사용하여 전체 배포에 얼마나 걸리는지 언급하지 않은 것은 중요한 세부사항을 빠뜨린 것 같음. 실시간 패치를 사용하면 서버, 데이터 센터, 클라우드의 다운타임 없이 운영할 수 있음.
     * 메타의 규모에서 일한다면 실시간 패치가 의미가 있을 수 있지만, 대부분의 잘 설계된 서비스와 애플리케이션은 서버의 전체 재부팅을 잘 견딜 수 있어야 함. 수백만 대의 서버를 관리하는 복잡성은 상상하기 어려움.
     * KernelCare는 대부분의 리눅스 배포판을 지원하는 커널 실시간 패치를 위한 서비스임.
     * 많은 가상머신에 Kpatch를 사용해왔으며, 상당히 잘 작동함.
     * 현재 약 1,300만 대의 서버를 운영 중이며, 2023년에 새로운 데이터센터 장비에 200억 달러, 2024년에 추가로 200억 달러를 지출할 예정임. 현재 CentOS 8 Stream을 사용 중이며, 곧 9로 이동할 예정임.
     * 호스트의 드레이닝과 언드레이닝은 어렵다고 함. 이는 사실상 서비스에서 호스트를 드레이닝하고 다시 복구하는 것이 쉽지 않다는 것을 의미하며, 이는 리눅스 커널이 실시간 패치를 위해 설계되지 않았으며, 이를 시도하는 것은 항상 불확실성의 원천이며 엔지니어링 작업 측면에서 비용이 많이 들고 재앙이 항상 임박해 있음을 의미함. 반면, 호스트의 서비스 드레이닝과 복구 시스템을 수정하여 매우 견고하고 신뢰할 수 있게 만드는 것이 신뢰성 측면에서 큰 이득을 가져올 것임. 이 접근 방식은 조직의 기능 장애를 덮는 것으로 보임. 한 팀이 모든 커널을 패치할 수 있지만, 모든 호스트가 서비스 드레이닝과 복구를 지원하도록 만드는 것은 불가능하며, 이를 수정할 실제 인센티브가 없기 때문에 아무도 이를 고치려 하지 않음. 오직 멋진 해킹과 새로운
       프로젝트만이 제대로 보상받음.
     * 대부분의 조직은 메타를 모방하는 것에서 이득을 보지 못하며, 그렇게 할 필요도 없음.
     * ""하이퍼스케일""이라는 개념을 처음 들어봄. 이것이 단순한 확장과 어떻게 다른지 궁금함.
"
"https://news.hada.io/topic?id=12198","[중복] Twitch, 한국에서 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [중복] Twitch, 한국에서 서비스 종료

     * 2024년 2월 27일부로 한국에서 사업 운영을 종료하기로 결정
     * 한국에서 Twitch를 운영하는 데 드는 비용이 심각한 수준으로 높기 때문
          + P2P 모델 도입 및 720p로 조정했음에도 불구하고 다른 나라보다 10배가 높은 네트워크 수수료
     * 종료 이후 한국 시청자들은 더 이상 Twitch의 유료 상품을 구매할 수 없고 스트리머들은 Twitch를 통하여 수익을 창출할 수 없음
     * AfreecaTV나 YouTube 등으로의 이전을 권장하고 도울 예정

   트위치 한국에서 나름 빅스트리머들 잘나가는 줄 알았는데, 거의 트윕이나 투네이션으로 후원하고 유료상품은 저조했던걸까요..

   이거 서드파티는 영향준거없다고 CEO 방송에서 들었어요 망사용료가 원인이라고 하네요

   파트너들은 어떻게 될지 궁금하네요.

   이게 시작일까봐 무섭네요
   한국 통신사 마음에 안들면 니들도 짐싸고 나와의 선례가 큰 기업부터 나와버린...
"
"https://news.hada.io/topic?id=12084","Ask GN: 올해 읽었던 책 중 가장 인상깊었던 책을 추천해주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask GN: 올해 읽었던 책 중 가장 인상깊었던 책을 추천해주세요

   소설, 비문학, 기술서, ..., 가장 웃긴 책, 가장 놀라운 책, 가장 실용적이었던 책 무엇이든 좋습니다. 내년에는 여러분이 추천해주신 책을 읽어보려구요!

   저부터 시작하면 저는 애거서 크리스티의 '그리고 아무도 없었다'가 정말 재미있었습니다. 몇십 년 전에 쓰인 책이라는 게 믿기지 않을 정도로 음산한 기운이 일품입니다.

   백범일지 - 김구

   이것이 정말 실화인가 싶을 정도로 영화와 같은 삶을 사셨네요.
   꾸준히 책을 읽고 있는데 올 해 읽은 책 중에 가장 재밌게 읽었네요.

   가족이지만 타인입니다 - 원정미
   좋은 책이네요.

   퓨처셀프 - 벤저민 하디

   추천합니다.

   물고기는 존재하지 않는다 <룰루 밀러>.
   중반부에 조금 잘 안읽히는 감이 있지만 전체적으로 재미있게 읽었습니다.

   덕분에 지난 일주일간 정말 재미있게 읽었습니다! 감사합니다~

   +1
   이야기를 정말 잘 구성했더라고요. 일반적으로 했으면 일반적인 책이 되었을텐데.

   책을 많이 읽지 못한 해여서.... ""칼리의 노래"" 소설 완독했네요. 특유의 불쾌한 느낌, 끝을 알 수 없는 분노와 전파되는 분노의 감정... 그리고 그 끝에 허망함에 대해서 고민해봤습니다. 가끔 알 수 없는 분노에 사로잡혀서 그 끝을 종체 알 수 없을 것 같은 감정을 종종 느끼는데..종국엔 파괴와 혼돈만 남는게 아닌가 하면서..감정을 절제하게 되더라구요.

   존 윌리엄스의 소설 ‘스토너’ 가 기억에 남네요.
   올해뿐만 아니라 그동안 읽었던 모든 책들중에서도 손꼽히는 책입니다.

   드라마 때문에 시작한 '파운데이션' 이 기억나네요.

   전 좀 올드하지만, 매 나이가 10의 배수가 되는 해에 '채근담'을 읽습니다.
   스무살에 처음 읽기 시작했는데, 10년 전에 읽었을 때와 올해 읽었을 때 느낌이 또 다르더라고요.
   SF/판소도 좋아하는데, 한참 전에 읽었던 것이지만 댄시먼즈의 '일리움'과 '올림푸스' 추천합니다.

   테드 창의 <당신 인생 이야기>
   요네자와 호노부의 <흑뢰성> 재밌게 읽었습니다

   저는 류츠신의 삼체라는 소설을 올해 처음 접했는데, 정말 재미있게 읽었습니다. +_+
   중국에서 나온 SF 소설은 처음인데, 장난 아니더라고요.
"
"https://news.hada.io/topic?id=12098","정확성, 속도, 그리고 단순성에 중점을 둔 jq 클론, Jaq","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   정확성, 속도, 그리고 단순성에 중점을 둔 jq 클론, Jaq

jaq의 소개

     * jaq는 JSON 데이터 처리 도구인 jq의 클론으로, jq의 문법과 연산의 상당 부분을 지원함을 목표로 함.
     * jaq의 세 가지 주요 목표는 정확성, 성능, 그리고 단순성임.
     * jq와의 호환성을 유지하면서 더 정확하고 예측 가능한 구현을 제공하려 함.
     * jq의 예상치 못한 동작 예시로는 nan > nan이 거짓이고 nan < nan이 참인 점, jq에서 [[[]] | implode 실행 시 충돌이 발생하는 점 등이 있음.
     * jq의 긴 시작 시간에 대한 해결책으로 개발되었으며, jq 1.6보다 약 30배 빠른 시작 시간을 자랑함.
     * jaq는 버그의 가능성을 줄이고 기여를 용이하게 하기 위해 간단하고 작은 구현을 목표로 함.

설치 방법

  소스로부터 설치

     * jaq를 컴파일하기 위해서는 Rust 도구체인이 필요함.
     * Rust 컴파일러는 리눅스 배포판에 포함된 것이 오래되어 jaq를 컴파일하기에 적합하지 않을 수 있음.
     * cargo install --locked jaq 또는 cargo install --locked --git https://github.com/01mf02/jaq 명령어를 통해 jaq를 설치할 수 있음.
     * Rust가 지원하는 모든 시스템에서 jaq가 작동해야 하며, 그렇지 않은 경우 이슈를 제기해야 함.

  바이너리 설치

     * macOS 또는 Linux에서 homebrew를 사용하여 jaq를 설치할 수 있음.

예시

     * 다음 예시들은 jaq가 현재 할 수 있는 일들을 보여줌.
     * echo '{""a"": 1, ""b"": 2}' | jaq '.a'를 실행하면 1이 출력됨.
     * echo '{""a"": 1, ""b"": 2}' | jaq 'add'를 실행하면 3이 출력됨.
     * echo '[0, 1, 2, 3]' | jaq 'map(.*2) | [.[] | select(. < 5)]'를 실행하면 [0, 2, 4]가 출력됨.

성능

     * 여러 벤치마크를 통해 jaq, jq, gojq의 성능을 비교함.
     * empty 벤치마크는 시작 시간을 측정하기 위해 사용됨.
     * bf-fib 벤치마크는 jq로 작성된 Brainfuck 인터프리터가 Fibonacci 수를 생성하는 Brainfuck 스크립트를 실행함.
     * 다른 벤치마크는 다양한 필터를 n 입력값과 함께 평가함.
     * 벤치마크 결과는 jaq-1.2가 16개 벤치마크에서 가장 빠르고, jq-1.7은 2개, gojq-0.12.13은 1개에서 가장 빠름을 보여줌.

기능

  기본 기능

     * 기본 데이터 타입, 조건문, 접근, 연산자, 오류 처리, 문자열 보간, 포맷 문자열 등 다양한 기본 기능을 지원함.

  경로

     * 배열/객체 인덱싱, 반복, 선택적 인덱싱/반복, 배열 슬라이스, 문자열 슬라이스 등을 지원함.

  연산자

     * 구성, 바인딩, 연결, 할당, 업데이트 할당, 대안, 논리, 동등성 및 비교, 산술, 부정, 오류 억제 등의 연산자를 지원함.

  정의

     * 기본 정의 및 재귀 정의를 지원함.

  핵심 필터

     * 다양한 핵심 필터를 지원함.

  표준 필터

     * 표준 필터는 더 기본적인 필터를 통해 정의됨.

  수치 필터

     * libm에서 가져온 많은 필터를 지원함.

  고급 기능

     * jq의 몇몇 기능은 지원하지 않음, 예를 들어 모듈, SQL 스타일 연산자, 스트리밍 등.

jq와 jaq의 차이점

  숫자

     * jq는 모든 숫자를 64비트 부동 소수점으로 사용하는 반면, jaq는 정수와 부동 소수점을 구분하여 사용함.

  NaN과 무한대

     * jaq는 IEEE 754 부동 소수점 산술 표준에 더 가까운 동작을 제공함.

  분수 숫자의 보존

     * jaq는 JSON 데이터에서 오는 분수 숫자를 완벽하게 보존함.

  할당

     * jaq는 할당을 jq와 다르게 해석함.

  정의

     * jaq는 필터 정의를 허용하며, jq와 같이 인자를 값으로 전달할 수 있음.

  인자

     * jaq는 명령줄을 통해 인자를 정의할 수 있음.

  접기

     * jaq는 reduce와 foreach 필터를 제공하며, jq와 다른 해석을 제공함.

  오류 처리

     * jaq는 jq와 다른 오류 처리 메커니즘을 사용함.

  기타

     * 슬러핑, 카테시안 곱, 리스트 업데이트, 입력 읽기, 조인 등에서 jq와 jaq는 다른 동작을 보임.

기여

     * jaq에 대한 기여를 환영하며, 변경 후 cargo test가 성공적으로 실행되는지 확인해야 함.

감사의 말

     * jaq는 여러 라이브러리와 Rust 표준 라이브러리 덕분에 큰 이득을 얻었음.

GN⁺의 의견

   이 글에서 가장 중요한 것은 jaq가 jq의 기능을 대부분 지원하면서도 성능과 정확성을 개선하려는 시도임. 특히, 시작 시간이 jq에 비해 현저히 빠르고, 예상치 못한 동작을 줄이려는 점은 많은 사용자들에게 흥미로울 수 있음. 또한, Rust 기반으로 개발되어 메모리 안전성과 성능 측면에서도 장점을 가짐. 이러한 개선 사항은 JSON 데이터 처리가 필요한 소프트웨어 엔지니어에게 유용한 도구가 될 것으로 기대됨.

        Hacker News 의견

     *

     [[[]] | implode 버그와 jq 개발 중단
          + jq 개발이 5년간 중단되었다가 최근 재개되어, 오랫동안 알려진 버그들이 수정되지 않은 상태였음. 개발 재개로 인해 점진적으로 누적된 문제들이 해결될 것으로 기대됨.
     *

     다른 프로젝트 추천에 대한 감사
          + 프로젝트가 다른 유사하거나 영감을 준 프로젝트를 추천할 때 멋짐. 특히 jql 프로젝트를 알게 되어 만족함.
     *

     nan > nan과 nan < nan의 비교 결과에 대한 의문
          + jq에서 nan > nan이 거짓이고 nan < nan이 참인 것은 부동소수점 표준인 IEEE 754를 충실히 따르는 것인지, 아니면 버그인지에 대한 의문 제기.
     *

     jq의 uint64 숫자 표시 문제
          + jq가 uint64 숫자를 제대로 표시하지 않는 것에 대한 불만 표출.
     *

     jq 대신 DuckDB 사용 경험 공유
          + jq는 강력하지만, 데이터가 표 형태일 경우 SQL을 사용하는 것이 더 자연스러움을 경험함.
     *

     jaq의 의존성이 많다는 지적
          + jaq 프로젝트의 의존성이 많다는 점에 대한 지적.
     *

     jq 사용 방법에 대한 질문
          + jq를 개발/데이터 분석 중에 JSON 파일을 탐색하는 용도로 사용하는지, 아니면 생산 환경에서 실행되는 프로그램에서 사용하는지에 대한 질문.
     *

     jq 대신 yq 사용에 대한 경험 공유
          + jq 대신 yq를 사용하기 시작했으며, 두 도구 사이의 주요 차이점에 대한 의견 교환.
     *

     PowerShell에서의 데이터 쿼리 방법
          + PowerShell을 사용하면 jq, xmlstarlet 등 다양한 도구의 문법을 배울 필요 없이 모든 데이터를 객체로 변환하여 PowerShell 문법으로 쿼리할 수 있음.
     *

     jq 문법과 문서의 난해함에 대한 의견
          + jq의 문법과 문서가 이해하기 어렵다고 느끼며, 새로운 버전에서도 이 부분이 개선되지 않았다고 생각함. 직접 작성하는 것이 더 나을 수도 있음을 시사함.
"
"https://news.hada.io/topic?id=12209","S3 Express가 당신에게 필요한 전부입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       S3 Express가 당신에게 필요한 전부입니다

     * AWS의 새로운 ""S3 Express One Zone"" Low Latency 스토리지 클래스가 데이터 인프라 커뮤니티에서 주목받는 중
          + 데이터 억세스 속도가 10배 빠르고, API 리퀘스트 비용은 50% 저렴. 분당 수백만 리퀘스트 처리 가능
     * S3 Express 스토리지 클래스는 기존 S3 Standard 대비 GiB당 8배 더 비싸서, 대규모 데이터 시스템의 ""주"" 저장소로는 부적합함
     * API 작업 비용은 50% 저렴하지만, 엄청 저렴한 것은 아니어서 이전에 S3 API의 비용 때문에 비실용적이었던 워크로드에는 여전히 맞지 않음
     * S3 Express는 512 KiB를 초과하는 모든 API 작업(쓰기 + 읽기)에 대해 GiB당 요금을 부과함
          + 다르게 생각하면 모든 API 작업에는 512 KiB의 ""무료"" 대역폭이 제공되며, 이를 초과할 때만 비용을 지불
     * 단, One Zone 스토리지 클래스이기 때문에, 데이터 시스템은 단일 AZ의 실패에 대비해 데이터를 수동으로 두 AZ에 복제해야 함
          + 두 AZ에 데이터를 두 번 쓰는 비용은 응용 프로그램 계층에서 수동으로 데이터를 복제하는 비용과 유사함

최신 데이터 인프라에 대한 새로운 기회

     * 새로운 스토리지 클래스는 동일한 아키텍처와 코드로 저지연과 높은 비용 또는 높은 지연과 낮은 비용 사이를 조정할 수 있는 새로운 기회를 제공함
     * 모든 최신 데이터 시스템은 이제 로컬 디스크나 블록 스토리지(EBS)의 가용성에 따라 설계할 필요가 없으며, 오브젝트 스토리지를 기반으로 완전히 구축될 수 있음
     * 데이터는 저지연 S3 Express 버킷에 쉽게 저장되었다가 비동기적으로 S3 Standard 버킷으로 이동될 수 있으며, 대부분의 최신 데이터 시스템은 이미 압축 기능을 가지고 있어 ""스토리지 계층화""가 사실상 무료임

GN⁺의 의견

   이 기사에서 가장 중요한 점은 AWS의 새로운 S3 Express One Zone 스토리지 클래스가 데이터 인프라에 어떤 변화를 가져올 수 있는지에 대한 전망이다. 이 스토리지 클래스는 데이터 시스템의 비용과 성능을 획기적으로 개선할 수 있는 새로운 기회를 제공하며, 이는 데이터 관리와 저장 방식에 혁신을 가져올 수 있다. 특히, 모든 데이터 시스템을 오브젝트 스토리지 중심으로 구축할 수 있는 능력은 많은 기업과 개발자에게 매력적인 옵션이 될 것이다. 이러한 변화는 데이터 인프라의 미래를 더욱 유연하고 비용 효율적으로 만들어 줄 것으로 기대된다.

   어떻게 사용될지 궁금하네요.

   바로 어제 WarpStream을 다시 검색해봤었기에 링크 첨부합니다
   https://news.hada.io/topic?id=10234

        Hacker News 의견

     * S3 기반의 대부분의 프로덕션 스토리지 시스템/데이터베이스는 생산적인 성능을 내기 위해 SSD/메모리 캐싱 계층을 구축하는 데 상당한 노력을 기울임.
          + S3 Express는 HDD 랜덤 읽기 속도에 근접하므로 SSD 캐시 없이도 프로덕션 시스템을 구축할 수 있음.
          + 많은 시스템은 여전히 SSD 캐시를 유지할 것이지만, MVP는 이제 SSD 캐시 없이 구축할 수 있으며, 콜드 쿼리 대기 시간이 크게 감소함.
          + 현재 객체 스토리지 위에 벡터 데이터베이스를 구축 중이므로 이 기술은 매우 시의적절함.
     * AWS S3 Express 스토리지 비용은 S3 표준보다 8배 높지만, 현대 데이터 스토리지 시스템에는 문제가 되지 않음.
          + 데이터는 저지연 S3 Express 버킷에 쉽게 저장되고, 비동기적으로 S3 표준 버킷으로 압축 이동됨.
          + 대부분의 현대 데이터 시스템은 이미 압축 기능을 가지고 있으므로, ""스토리지 계층화""는 사실상 무료임.
          + 대부분의 데이터 집약적 앱이 주 스토리지 계층으로 S3를 사용할 미래를 예상함.
     * 몇 주 전에 검색 엔진 Quickwit에서 S3 Express를 테스트함.
          + 성능 측면에서 만족스러웠지만 가격에 대해 실망함.
          + 특정 사용 사례에서는 가격이 적절할 수 있지만, 대부분의 사용자는 기존 S3에 로컬 SSD 캐싱을 추가할 것으로 예상함.
     * 추가적인 맥락으로, warpstream은 S3를 객체 저장소로 사용하는 Kafka 호환 스트리밍 시스템을 구축 중임.
          + 이를 통해 저렴한 존 전송 비용과 자동 스토리지 계층화를 활용하여 시스템 운영 및 유지 관리 비용을 절감함.
          + S3의 읽기/쓰기 속도로 인한 지연 시간이 문제였지만, S3 Express로 인해 이러한 지연 시간에 민감한 애플리케이션에서 Confluent Kafka의 관리형 제품과 경쟁할 수 있게 됨.
     * 로컬에서 파일을 S3로 업로드하기 전에 Redis에 캐싱하여 문제를 해결함.
          + 코드베이스가 파일을 사용할 때 Redis를 확인하고, 거기에 없으면 가져와 다시 캐싱함.
     * EFS는 S3보다 훨씬 우수하지만 주목을 받지 못하는 이유를 이해하지 못함.
          + 시스템이 드라이브로 마운트할 수 있고, 시스템 간에 공유되며, 이미 매우 낮은 지연 시간을 가지고 있음.
          + EFS가 이미 존재하는데 S3 Express가 실제로 얼마나 유용한지 확실하지 않음.
     * ""X is all you Need""라는 문구가 ""Attention is all you need"" 논문에서 처음 사용되었는지 궁금함.
          + 해당 논문은 Transformer를 세상에 소개함.
     * 이것이 Rust로 작성된 저지연 S3라면, 몇 년의 개발 끝에 드디어 출시된 것임.
     * 새로운 S3 Express 계층을 사용하면 성능이 향상될 사용 사례가 있는지, 그리고 8배의 추가 비용이 가치가 있는지 궁금함.
     * 많은 S3 구현이 단순히 디스크로의 투명한 다운로드로 보이지만, 실제로는 ""네트워크를 디스크로 사용""하는 것이 아님.
"
"https://news.hada.io/topic?id=12099","SDXL Turbo - 실시간 텍스트-to-이미지 생성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   SDXL Turbo - 실시간 텍스트-to-이미지 생성 모델

     * SDXL Turbo는 새로운 증류(distillation) 기술을 적용하여 최첨단 성능을 달성
     * 이미지 생성을 위한 단계를 50단계에서 단 1단계로 줄이면서 전례 없는 품질의 싱글 스텝 이미지 생성
     * 모델 가중치와 코드는 Hugging Face에서 비상업적 연구 라이선스 하에 다운로드 가능
     * Stability AI의 이미지 편집 플랫폼 Clipdrop에서 SDXL Turbo의 실시간 텍스트-이미지 생성 기능 베타 데모 시연중

적대적 확산 증류(Adversarial Diffusion Distillation)의 장점

     * SDXL Turbo는 적대적 확산 증류(ADD)라는 새로운 증류 기술을 기반으로 함
     * ADD를 통해 GAN(Generative Adversarial Networks)과 유사한 장점을 가지면서 단일 스텝 이미지 출력 가능
     * 다른 증류 방법에서 종종 관찰되는 아티팩트나 흐림 현상을 피함

다른 확산 모델과의 성능 비교

     * SDXL Turbo 선택을 위해 여러 모델 변형(StyleGAN-T++, OpenMUSE, IF-XL, SDXL, LCM-XL)을 비교
     * 동일한 프롬프트로 생성된 출력물을 인간 평가자에게 무작위로 보여주고 가장 프롬프트의 방향을 잘 따른 출력을 선택하도록 함
     * 이미지 품질에 대한 추가 테스트도 동일한 방법으로 수행
     * SDXL Turbo는 단일 스텝으로 LCM-XL의 4단계 구성을, 4단계로는 SDXL의 50단계 구성을 능가함
     * 이 결과로 SDXL Turbo가 이미지 품질을 희생하지 않고 훨씬 낮은 계산 요구 사항으로 최첨단 멀티 스텝 모델을 능가함을 확인할 수 있음

Clipdrop을 통한 SDXL Turbo 이용해 보기

     * 새 모델의 기능을 테스트하기 위해 Stability AI의 이미지 편집 플랫폼 Clipdrop에서 SDXL Turbo의 실시간 이미지 생성 베타 데모 이용 가능
     * 대부분의 브라우저와 호환되며 현재 무료로 시도해볼 수 있음

상업적 활용

     * 이 모델을 상업적 제품이나 목적으로 사용하고자 하는 경우 컨택 필요

   엄청 빠르네요
"
"https://news.hada.io/topic?id=12135","크롬의 광고 차단 툴 전쟁 다음 전략: 느려지는 확장 프로그램 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                크롬의 광고 차단 툴 전쟁 다음 전략: 느려지는 확장 프로그램 업데이트

크롬의 광고 차단기 전쟁에서 다음 무기: 느린 확장 프로그램 업데이트

     * 구글의 광고 차단 전쟁이 본격화되고 있으며, YouTube는 광고 차단기를 탐지하고 차단하는 데 주력하고 있음.
     * 크롬은 2024년 6월 광고 차단을 제한하는 Manifest V3 확장 플랫폼을 출시할 예정임.
     * Manifest V3는 확장 프로그램 업데이트에 장애물을 설정하여 개발자들이 변화에 빠르게 대응하는 것을 어렵게 만듦.

Manifest V3의 변화

     * 현재 Manifest V2는 10년 이상 사용되어 왔으며, 확장 프로그램이 웹 브라우저 트래픽을 완전히 제어할 수 있음.
     * Manifest V3는 광고 차단기가 사용하는 주요 API인 WebRequest API를 폐기하고, 구글이 더 많은 제어를 가질 수 있는 제한된 필터링 API로 대체함.
     * 새로운 NetRequest API는 확장 프로그램이 구글 크롬에게 네트워크 요청 차단을 요청하도록 하며, 필터링 규칙의 수에 임의적인 제한을 두고 개별 규칙의 효과에도 제한을 둠.

업데이트 지연의 영향

     * 현재는 광고 차단기와 개인 정보 보호 앱이 필터 목록 업데이트를 직접 배포할 수 있으나, Manifest V3는 이를 제한함.
     * 모든 업데이트는 크롬 웹 스토어를 통한 전체 확장 프로그램 업데이트를 통해 이루어져야 하며, 이는 상당한 시간 지연을 초래함.

파이어폭스의 대응

     * 파이어폭스는 크롬의 인기로 인해 Manifest V3 확장 프로그램을 지원하게 되었지만, Manifest V2 지원을 곧바로 중단하지는 않을 예정임.
     * 파이어폭스의 Manifest V3 구현은 필터링 제한이 없으며, Mozilla는 사용자들이 uBlock Origin과 같은 효과적인 개인 정보 보호 도구를 계속 사용할 수 있도록 보장함.

크롬 웹 스토어 리뷰 지연

     * 필터 목록 업데이트가 이제 크롬 웹 스토어를 통해 이루어져야 하므로, 리뷰에는 몇 시간에서 최대 3주가 소요될 수 있음.
     * 이러한 시간표는 구글이 모든 변경 사항을 리뷰 과정을 통해 처리해야 하므로 향후 크롬 웹 스토어 리뷰의 작업량이 대폭 증가하기 전의 것임.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 구글이 Manifest V3를 통해 광고 차단기의 업데이트 속도를 늦추려 하고 있다는 것이다. 이는 광고 차단기 개발자들이 광고 전달 시스템의 변화에 신속하게 대응하는 것을 어렵게 만들어, 광고 차단의 효과를 저하시킬 수 있다. 이러한 변화는 사용자의 웹 경험과 개인 정보 보호에 직접적인 영향을 미칠 수 있으며, 기술 산업 내에서 광고와 개인 정보 보호 간의 지속적인 긴장 관계를 반영한다. 이 글이 흥미로운 이유는 인터넷 사용자들의 권리와 웹 브라우징 경험을 형성하는 데 있어 중요한 기술적 변화에 대한 인식을 높이기 때문이다.

        Hacker News 의견

     * Ars 기사가 광고 차단을 옹호하는 것은 좋으나, 실제 개발자와 대화하고 허위 주장을 피하는 등 더 철저한 준비가 필요함.
          + Google이 웹 요청 차단 기능을 없애는 등 논란이 많은 행동에 대한 비판은 타당하지만, 확장 프로그램에서 원격 JS 포함 금지를 비판하는 것은 부적절한 접근임.
          + Mozilla 애드온 스토어에서 원격 JS가 허용되지 않았던 사실, 화장 필터 업데이트가 확장 프로그램 업데이트를 필요로 하지 않음, Chrome 웹스토어가 내년에 계획 중인 빠른 검토 프로세스 등에 대한 사실 확인이 필요함.
     * MV3가 차단 목록 업데이트를 위해 Chrome 웹 스토어를 거쳐야 하는 이유에 대한 명확한 설명 부족.
          + declarativeNetRequest 문서를 살펴보면, 확장 프로그램의 manifest에 선언해야 하는 정적 규칙 세트가 있지만, JavaScript를 통해 업데이트할 수 있는 동적 규칙 세트도 존재함.
     * Google이 간접적으로 광고 차단을 방해하는 이유에 대한 이해 부족.
          + Google이 왜 단순히 Chrome 웹 스토어에서 광고 차단기를 금지하지 않는지, 또는 특정 광고 차단기를 하나씩 제거하지 않는지에 대한 의문 제기.
     * 기사가 클릭베이트라는 주장.
          + 기사에서 검토 시간 증가에 대한 언급 없음, 검토 시간은 항상 몇 분에서 몇 일이었음.
          + 필터 업데이트가 확장 프로그램 업데이트에 의존하지 않으며, 스크립틀릿을 포함할 수 있어 MV3에서도 여전히 허용됨.
     * Firefox를 다시 사용하며 새로운 경험을 한 사용자의 긍정적인 반응.
     * Firefox에서 Google 웹 서비스 로딩 문제 발생.
          + Gmail이 완전히 멈추고, Sheets가 반쯤 렌더링된 문서를 보여줌, 다른 사이트들은 정상 작동함.
          + 이러한 문제가 우연의 일치일 가능성.
     * Google이 Chrome에 직접 광고를 내장하는 것이 나을 수도 있음.
          + 광고가 브라우저의 '크롬' 부분에 직접 표시되고, 일정 시간마다 비디오 광고를 봐야 하는 상황에 대한 우려.
     * 광고를 통해 전달되는 악성 소프트웨어, 피싱, 사기 등으로 인한 피해에 대해 Google에 책임을 물을 시기.
     * Google이 광고 차단의 비효율성을 이해하지 못하는 것은 그들의 이해를 방해하는 직업적 이해관계 때문일 수 있음.
          + 사람들이 Chrome 대신 Edge, Safari, Brave 등 다른 브라우저를 사용할 것임을 Google에 암시.
     * Chrome 웹 스토어의 uBlock Origin 버전이 업데이트 지연되고 있으며, 이것이 Google의 의도적인 지연일 수 있음에 대한 추측.
          + 최신 버전의 uBlock Origin이 YouTube의 광고 차단 탐지를 우회하는 데 효과적임.
"
"https://news.hada.io/topic?id=12107","아마존 HR에서 근무하며 목격한 'PIP 계획'에 혐오감을 느낀 전 직원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                아마존 HR에서 근무하며 목격한 'PIP 계획'에 혐오감을 느낀 전 직원

아마존 HR 직원의 Pivot 프로그램 경험담

     * 아마존의 인사(HR) 부서에서 근무하던 직원이 성과 개선 계획인 Pivot 프로그램을 관리하다가 자신도 그 프로그램의 대상이 됨.
     * 해당 HR 직원은 Pivot 프로그램으로 인해 PTSD(외상 후 스트레스 장애)를 개발했다고 주장하며, 이 프로그램의 부당함을 지적함.
     * 아마존 대변인은 이 직원의 주장에 대해 부정확한 정보가 포함되어 있다고 반박하며, 회사의 성과 관리 프로세스에 대한 오해를 해명함.

Pivot 프로그램의 목표와 실행

     * Pivot의 목표는 일률적으로 6%의 직원을 성과 관리 대상으로 지정하는 것이었으며, 이는 HR 직원에게 상당한 부담이었음.
     * HR 부서의 부사장들은 성과 관리 대상자를 파악하기 위해 일일, 주간 단위로 메트릭스를 확인하도록 강조함.
     * 매니저들은 Pivot 프로그램을 싫어했으며, 대부분의 매니저들은 성과 관리를 적절히 수행할 능력이 부족했음.

Pivot 프로그램의 실제 운영

     * HR 직원은 Pivot 컨설턴트와 협력하여 직원을 Pivot 대상으로 지정할 적절한 시기를 결정함.
     * HR 직원의 80%의 업무 시간이 Pivot 관련 업무에 집중되었으며, Pivot 프로그램은 탈출하기 매우 어려운 것으로 설계됨.
     * 직원들을 성과 순위에 따라 상위 15-20%, 중간, 하위 20-30%로 분류했으나, 실제로 성과가 부진한 직원은 1-2%에 불과했음.

PTSD를 겪은 HR 직원의 경험

     * HR 직원은 Pivot 프로세스로 인해 PTSD를 겪었으며, 이 프로세스가 자신에게 심각한 영향을 미쳤음을 밝힘.
     * 비자 후원을 받는 직원들은 Pivot 프로그램을 통해 해고되면 미국에서의 취업 자격을 잃게 되는 어려움에 직면함.
     * HR 직원은 자신이 성과 문제를 겪은 적이 없음에도 불구하고, 갑작스럽게 Pivot 프로그램의 대상이 되어 충격을 받음.

HR 직원의 Pivot 프로그램 경험

     * HR 직원은 성과 평가에서 처음으로 비판을 받았으며, 이는 과거에는 듣지 못한 내용이었음.
     * 아마존은 직원들을 상위, 중간, 최소한 효과적인 세 가지 범주로 나누었으며, HR 직원은 자신이 최소한 효과적인 범주에 속한다는 것을 인정받음.
     * HR 직원은 Pivot 프로그램에 참여하거나 즉시 퇴사할 선택을 받았으며, 결국 다른 직장을 찾아 퇴사함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 아마존의 성과 관리 프로그램인 Pivot이 직원들에게 어떤 영향을 미쳤는지에 대한 실제 HR 직원의 경험담을 들여다보는 것이다. 이 글은 성과 관리 시스템이 직원들의 정신 건강에 미치는 영향과 기업 문화에 대한 중요한 통찰을 제공한다. 특히, 성과 관리가 어떻게 잘못될 수 있는지에 대한 실제 사례를 통해, HR 전문가와 관리자들에게 교훈을 줄 수 있는 흥미로운 내용을 담고 있다.

   미국은 해고가 자유롭다고 하는데...
   왜 그냥 짜르지 않고 저렇게 괴롭히는 걸까요...?

   저도 이게 궁금해요

   미국식 화장실 앞 책상...?

   Amazon PIP 호러 스토리

   아마존의 PIP 얘기는 는 언제 들어도 좀..

        Hacker News 의견

     * FAANG 회사들의 PIP(성과 향상 계획) 프로그램의 문제점 중 하나는 높은 면접 장벽에도 불구하고, 회사의 30%가 부진하다고 간주되어 매년 6%가 감축됨.

     FAANG 회사들의 면접 과정은 매우 경쟁적이며, 높은 보상을 통해 최고의 인재를 유치하려 하지만, 실제로 매년 많은 부진한 직원들을 해고하는 것은 과도한 고용 후 조정으로 보임.
     * Wall Street 모델이 한 번에 해고하고 퇴직금을 주는 방식이 연중 PIP 위험에 처하고 해고될 가능성이 높은 PIP에 놓인 것보다 인간적임.

     연례 감축이 필요한 회사들도 있지만, 경쟁적인 채용 과정을 거친 후에도 매년 부진한 직원을 해고하는 것은 결국 인재 풀이 고갈될 수 있음.
     * 아마존에서의 경험을 통해, 성과 관리 및 보상 시스템이 가혹하며, 많은 사람들이 보상 감소를 피하기 위해 회사를 떠났다가 다시 돌아오는 현상이 있음.

     아마존과 같은 회사에서는 장기 근속을 장려하는 재정적 인센티브 프로그램이 있지만, 이를 통해 직원들이 중요한 보상을 받기 직전에 회사를 떠나도록 유도하는 경우가 있음.
     * 46세의 평범한 CRUD 개발자로서 아마존의 채용 제안을 받았지만, 코딩 인터뷰 준비, 시애틀 이주, 아마존의 평판 등을 고려하여 AWS Professional Services의 원격 근무 직무를 선택함.

     아마존에서의 짧은 근무 경험 끝에 PIP를 받고 해고되었지만, 스트레스가 적은 새로운 직장을 찾아 만족함.
     * 고급 금융 분야에서 일할 때, 매 1-2년마다 3-5%의 직원이 해고되는 것이 일반적이었으며, 이는 갑작스러운 해고 통보와 퇴직금 제공으로 이루어짐.

     PIP와 같은 시스템을 통해 직원들에게 개인 성과가 아닌 회사의 재정 관리를 위한 부담을 지우는 것은 심리적 고문과 같음.
     * 일정 비율의 직원을 매년 PIP에 넣어야 하는 회사는 좋지 않으며, 이로 인해 실제로 문제가 없는 직원들도 PIP 대상이 될 수 있음.

     회사가 매년 일정 비율의 직원을 PIP에 넣도록 강제하면, 실제로는 문제가 없는 직원들도 PIP 대상이 될 수 있음.
     * 직원이 회사 정책에 따라 해고될 수 있음을 이해하고, 자신의 이익을 위해 회사를 떠나는 것은 당연한 일임.

     직원이 자신의 이익을 위해 회사를 떠나는 것은 비즈니스의 일부로 받아들여짐.
     * 아마존에서의 열악한 근무 조건에 대한 많은 부정적인 이야기들로 인해, 아마존에서 일하는 것에 대한 망설임이 있음.

     아마존의 기술은 흥미롭지만, 근무 환경으로 인한 정신 건강 문제를 우려함.
     * 아마존 HR에서 오랜 기간 근무한 후에 회사의 부정적인 면에 대해 놀라움을 표현하는 것은 이해하기 어려움.

     아마존에서의 근무 경험을 통해 많은 수익을 얻었지만, 그 과정에서 직원들에게 가해진 부당한 대우에 대한 비판이 있음.
     * 매니저로서 팀에 PIP 프로세스를 적용해야 했던 경험은 매우 끔찍하며, 대부분의 경우 PIP는 해고로 이어짐.

     연간 예산을 맞추기 위해 강제로 낮은 성과를 보이는 직원들을 PIP에 넣는 것은 매우 부당함.
     * 기술 회사들이 매달 주식을 부여하는 것을 정상화해야 하며, 그렇지 않으면 실제로 좋은 임금을 받고 있지 않은 것처럼 보이는 사기임.

     스타트업에서는 주주 명부를 낮게 유지할 필요가 있지만, 대기업에서는 직원들에게 주식을 분배하는 시스템을 개선할 수 있음.
"
"https://news.hada.io/topic?id=12165","Ask HN: 어떤 사이드 프로젝트가 당신에게 직업을 안겨주었나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask HN: 어떤 사이드 프로젝트가 당신에게 직업을 안겨주었나요?

     * HN에 오는 사람들이 어떤 프로젝트에 참여하여 취업에 성공했는지에 대한 궁금함
     * 프로젝트의 세부사항과 취업에 어떻게 도움이 되었는지
     * 프로젝트가 직접적으로 취업으로 이어졌는지, 면접 과정에서 도움이 되었는지, 그리고 프로젝트가 취업한 직무와 관련이 있는지

        Hacker News 의견

     * 2014년에 만든 자체 은행 앱 'Basil'
          + Mint 앱의 불편함으로 인해 자체 은행 앱 개발에 착수
          + Mailbox 앱처럼 금융 거래를 쉽게 분류할 수 있는 기능 제공
          + 현지 은행 API를 활용하여 구현
          + 디자이너 친구의 도움으로 아름다운 디자인 완성
          + Objective-C 코드와 아키텍처에 대한 자부심
          + 대형 소매업체에서 채용 제안, Basil 코드 제출로 긍정적인 피드백 받음
          + 해당 회사에서 7년간 근무하며 커리어 방향에 큰 변화
     * Syncany 프로젝트와 인생의 변화
          + 2014/2015년에 Syncany라는 파일 동기화 앱 개발
          + 알파 버전에도 불구하고 일정한 인기
          + 독일에 거주 중 미국 코네티컷 회사로부터 면접 제안
          + 영국 거쳐 미국 이주, 회사에서 8년간 근무하며 승진
          + 녹색 카드 취득, 가족과 함께 코네티컷 거주
          + 사이드 프로젝트가 인생에 미친 영향에 대한 회고
     * StackOverflow에서 HTML Canvas에 대한 답변과 기회
          + 대학 졸업 후 HTML Canvas에 대한 StackOverflow 질문에 답변
          + HTML5 Unleashed 책 저술로 인한 명성
          + 샌프란시스코로의 채용 제안과 거절
          + 사이드 프로젝트가 가져온 기회에 대한 감사
     * 우루과이 금융 위기와 mysql-ha 프로젝트
          + 은행에서 해고 후 MySQL HA 프로젝트에 집중
          + 이스라엘에서 연락받고 채용 제안 수락
          + 프로젝트 사용자였던 채용 관리자와의 인터뷰
     * 리눅스 취미와 시스템 관리자로의 커리어 전환
          + 대학 인턴십 중 리눅스 발견
          + IRC 채널을 통한 시스템 관리자 직무 제안
          + 유럽에서 여러 센터 개설 경험
     * Sonos와 Apple Airplay 프로토콜 리버싱
          + Sonos가 Apple Airplay를 지원하지 않아 프로토콜 리버싱 진행
          + Apple과 Sonos로부터 채용 메시지 수신
          + 다른 직업을 선택하며 면접 시 유용한 이야깃거리 제공
     * 날짜 형식 문서화 프로젝트
          + 날짜 형식 문서화에 지쳐 foragoodstrftime.com 개발
          + 일일 사용자 약 1000명 유치
          + 컨설팅 기회 및 채용 제안 유도
          + 사이드 프로젝트를 자산으로 취급하고 투자하는 전략 제안
     * Oculus Rift Kickstarter 백업 및 VR 아이트래킹
          + Oculus Rift의 초기 지지자로서 VR 아이트래킹의 중요성 인식
          + 자체 아이트래킹 시스템 개발 및 Hacker News에 게시
          + 아이트래킹 스타트업으로부터 연락받고 Google 퇴사 후 합류
          + Google에 인수된 후의 경험
     * 고등학교 프로그래밍 대회용 애플리케이션
          + 인터넷 접근이 불가능한 환경에서 프로그래밍 대회 진행을 위한 앱 개발
          + 방문한 스타트업 CEO의 관심으로 인한 채용 제안
          + 고등학교 졸업 후 정규직 전환
     * Sendmail 구성 파일 컴파일러/디컴파일러 개발
          + Sendmail 구성 파일의 복잡성에 대한 해결책으로 도구 개발
          + Sun Microsystems에서의 채용으로 이어짐
          + 현재는 청소년을 위한 프로그래밍 언어 Onyx 개발 중
"
"https://news.hada.io/topic?id=12106","헨리 키신저 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               헨리 키신저 별세

헨리 키신저 별세

     * 헨리 A. 키신저, 미국의 중국 개방을 설계하고 베트남 전쟁에서의 철수를 협상한 학자 출신 외교관이 100세 나이로 사망.
     * 냉전 시대 소련과의 미국 권력 관계를 재편성하는 데 영리함, 야망, 지성을 사용했으나 때로는 민주적 가치를 짓밟기도 함.
     * 키신저는 전후 가장 강력한 국무장관으로 평가받으며, 미국 이익을 반영한 외교를 재구성한 초현실주의자로 칭송받기도 하고, 인권 분야에서 미국 가치를 저버렸다는 비난도 받음.

GN⁺의 의견

     * 헨리 키신저는 냉전 시대 미국의 외교 정책에 지대한 영향을 미친 인물로, 그의 죽음은 미국과 세계 여러 나라와의 관계에 남긴 복잡한 유산을 다시금 조명하게 함.
     * 그의 죽음은 미국의 중국, 러시아, 중동과의 관계에 여전히 울려퍼지는 그의 복잡한 유산을 상기시키는 계기가 됨.
     * 키신저의 삶과 업적은 미국 외교사에서 중요한 장을 차지하며, 그가 남긴 유산은 오늘날에도 여전히 논란의 여지가 있고 흥미로운 토론 주제를 제공함.

        Hacker News 의견

     * 뉴욕 타임즈의 부고에서: ""2010년에 사망한 타임즈의 전 기자이자 편집자인 마이클 T. 카우프먼이 보도에 기여했다.""
          + 헨리 키신저의 부고를 쓴 기자가 키신저보다 먼저 세상을 떠남을 언급함.
     * 키신저는 수백만 명의 민간인을 죽이고 독재자들과 친분을 쌓는 데에 대한 양심의 가책이 없는 사기꾼이었다.
          + 키신저의 행적에 대한 비판적 견해 제시.
     * 우리는 미국에서 정부가 민간인에게 폭탄을 떨어뜨릴 때마다 책임을 물어야 한다.
          + 미국 정부의 군사 행동에 대한 책임 추궁의 중요성 강조.
     * 헌터 S. 톰슨의 닉슨에 대한 애도를 떠올리게 한다. 감옥에서 죽었어야 했다.
          + 키신저에 대한 부정적인 견해와 그가 받았어야 할 처벌에 대한 의견.
     * 다니엘 엘스버그의 ""지식의 한계""에 대한 Mother Jones 기사를 다시 연결할 좋은 시기다.
          + 지식의 한계에 대한 다니엘 엘스버그의 견해를 다룬 기사를 공유함.
     * 키신저에 대한 6부작 시리즈 중 적어도 하나는 들어보는 것이 좋다. 다음 며칠 동안 읽게 될 애도에 대한 배경을 제공한다.
          + 키신저에 대한 비판적인 팟캐스트 시리즈를 들어볼 것을 권장함.
     * 제3세계, 특히 아프리카 출신으로서 키신저의 죽음을 애도하거나 좋은 말을 할 수 없다. 사실 반가운 소식이다.
          + 키신저의 아프리카 정책에 대한 피해자의 시각에서 비판적인 견해.
     * ""불법은 즉시 실행한다,"" 키신저가 한 번 이상 농담삼아 말했다. ""헌법에 어긋나는 것은 조금 더 시간이 걸린다."" - 헨리 키신저
          + 키신저의 유명한 인용구를 공유함.
     * 헨리 키신저에 대한 몬티 파이썬의 헌정.
          + 몬티 파이썬이 키신저에게 바친 헌정 영상 링크 공유.
     * 히치가 지금 살아있다면 그의 의견이 특별했을 것이다. 롤링스톤 기사는 꽤 적절했지만.
          + 크리스토퍼 히친스의 의견이 특별했을 것이라는 추측.
     * 키신저는 과대평가되었다. 그가 세계 질서를 조종한 인물이라기보다는 도구였다.
          + 키신저에 대한 과대평가와 그의 역할에 대한 다른 시각 제시.
"
"https://news.hada.io/topic?id=12178","Lobsters - 해커뉴스와 비슷한 커뮤니티 사이트의 Rails 소스코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Lobsters - 해커뉴스와 비슷한 커뮤니티 사이트의 Rails 소스코드

Lobsters Rails 프로젝트 소개

     * Lobsters Rails 프로젝트는 https://lobste.rs에서 접근 가능한 소스 코드로, Rails 기반으로 작성되었으며 MariaDB를 사용하는 SQL 백엔드 데이터베이스를 사용함.
     * 이 코드는 BSD 3-clause 라이선스 하에 공개되어 있어, 누구나 자매 사이트를 시작하는 데 사용할 수 있음.
     * 버그 보고와 코드 기여를 환영하지만, 사이트에 유용하지 않은 작업은 수용하기 어려울 수 있음을 이해해야 함.

기여 방법

     * 프로젝트에 도움을 주고 싶은 사람들은 CONTRIBUTING 파일을 참조하면 됨.
     * 코드에 익숙한 사람이 대부분의 경우 채팅방에서 질문에 답할 수 있음.

초기 설정 방법

     * 로컬 설치를 위한 단계를 따르거나, 프로덕션 배포 설정을 위해 lobsters-ansible을 사용할 수 있음.
     * Docker를 사용하고 싶다면 외부 프로젝트인 docker-lobsters가 있음.
     * .ruby-version에 명시된 Ruby 버전을 설치하고, Github에서 lobsters git 저장소를 체크아웃함.
     * Nodejs를 설치하여 uglifier에 필요하며, Bundler를 실행하여 프로젝트에 필요한 gems를 설치함.
     * MySQL 데이터베이스를 생성하고, config/database.yml 파일에 개발 및 테스트용 데이터베이스 정보를 입력함.
     * 새 데이터베이스에 스키마를 로드하고, 개발자 컴퓨터에서 샘플 데이터를 추가하고 개발 모드에서 Rails 서버를 실행할 수 있음.
     * 프로덕션에서 사이트를 배포하려면 웹 서버를 설정하고 앱을 프로덕션 모드로 실행해야 함.
     * 정기적인 작업을 위해 crontab 또는 다른 스케줄러를 설정해야 함.

관리 방법

     * 기본적인 모더레이션은 사이트에서 이루어지지만, 대부분의 관리 작업은 프로덕션에서 rails 콘솔을 사용해야 함.
     * 관리자는 /tags에서 태그를 생성하고 편집할 수 있음.

GN⁺의 의견

   이 글에서 가장 중요한 것은 오픈 소스 Rails 프로젝트인 Lobsters의 소스 코드를 누구나 사용할 수 있으며, 커뮤니티의 기여를 환영한다는 점이다. 이 글은 소프트웨어 개발에 관심 있는 사람들에게 흥미로울 수 있으며, 실제로 작동하는 웹 애플리케이션의 코드베이스를 탐색하고, 배우고, 심지어 자신만의 사이트를 시작하는 데 사용할 수 있는 기회를 제공하기 때문에 매력적이다.

        Hacker News 의견

     * 한 사용자는 자신의 계정이 여전히 존재하지만, 초대제로 인해 트롤이 적다는 점을 긍정적으로 평가하면서도, 품질이 해커뉴스(HN)보다 뛰어나지 않다고 언급함. 자신의 글은 환영받지 못했지만 다른 이들의 자기 홍보 글은 허용되는 것에 대해 이해할 수 없다고 느낌.
     * 다른 사용자는 Lobsters의 태그 시스템이 HN보다 피드를 관리하기 쉽게 만들어주며, 사이트가 활발하지 않은 것이 아니라 소음이 적은 것을 의도한 것이라고 설명함.
     * 한 사용자는 Lobsters의 어두운 모드(dark mode)를 좋아하며, 특히 밤에 아기를 달래면서 휴대폰으로 사용할 때 HN보다 눈부심이 적어 좋다고 함.
     * 또 다른 사용자는 초대제가 아닌 가입을 허용한다면 사이트가 더 활성화될 것이라고 생각하지만, 초대제가 사이트의 취지라고 인정함.
     * 한 사용자는 사이트 디자인은 좋지만 커뮤니티 문화가 부족하다고 평가하며, 자폐 스펙트럼에 있는 사람들에게 친화적이지 않다고 느낌. 초대제가 탄탄하지만, 자신이 환영받을 수 있는 곳으로 만들기 위해 몇 가지를 변경할 것이라고 언급함.
     * 한 사용자는 HN의 소스 코드가 공개되지 않은 이유에 대해 궁금해하며, 공개적인 표준이 사이트를 개선하는 데 도움이 될 수 있다고 생각함.
     * 다른 사용자는 HN에서 uBlock Origin을 사용하여 관심 없는 주제나 출처를 필터링함으로써, Lobsters가 지향하는 것을 HN에서 구현할 수 있다고 제안함.
     * 한 사용자는 Lobsters에 HN과 같은 상위 10개/20개 필터 기능이 있는지 궁금해하며, 현재는 최근 일주일 동안의 인기 글만 볼 수 있는 것 같다고 언급함.
     * 한 사용자는 Lobsters에 대한 관심이 있었지만 초대를 받지 못했으며, HN에서 주목받지 못한 흥미로운 주제에 대한 토론이 있을 때 가끔 사이트를 방문한다고 함.
"
"https://news.hada.io/topic?id=12095","Llamafile - 단일 파일로 LLM 배포 및 실행 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Llamafile - 단일 파일로 LLM 배포 및 실행 가능

llamafile 프로젝트 요약

     * AI 개발자들이 어디서나 빌드하고 실행할 수 있는 꿈을 실현하기 위해 llama.cpp와 Cosmopolitan Libc를 결합한 프레임워크 개발
     * llamafile은 다양한 CPU 마이크로아키텍처 및 CPU 아키텍처에서 실행 가능하며, 여러 운영 체제에서 단일 빌드로 코드 실행 지원
     * LLM의 가중치를 llamafile 내에 포함시켜 직접 메모리 매핑을 통해 빠른 실행 가능

바이너리 사용법

     * Hugging Face를 통해 다운로드 가능한 여러 모델의 예제 바이너리 제공
     * 커맨드 라인 바이너리는 llama.cpp의 ""main"" 함수를 수동으로 호출하는 것과 같이 실행
     * 서버 바이너리는 로컬 웹 서버를 실행하여 웹 기반 챗봇 제공

주의사항

     * macOS에서 Apple Silicon 사용 시 Xcode 설치 필요
     * Windows에서는 파일 이름을 llamafile.exe로 변경해야 실행 가능
     * zsh, Python subprocess, Fish 등에서 실행 문제 발생 시 대체 명령어 사용 권장
     * Linux에서 binfmt_misc 문제 발생 시 해결 방법 제공

GPU 지원

     * Apple Silicon에서는 Xcode 설치 시 자동으로 작동
     * Linux에서는 Nvidia cuBLAS GPU 지원을 위한 컴파일러 설치 및 플래그 설정 필요
     * Windows에서는 MSVC x64 네이티브 커맨드 프롬프트를 통한 첫 실행 후 CUDA 경로 설정 필요

소스 코드 빌드 방법

     * cosmocc 툴체인을 사용하여 llamafile 소스 코드 빌드 방법 안내
     * libc 함수 코드 생성 및 HTTP 서버 실행 예제 제공

zipalign 문서

     * PKZIP 아카이브에 정렬된 압축되지 않은 파일 추가를 위한 zipalign 도구 사용법 설명
     * 기존 ZIP 아카이브 도구보다 빠른 실행 및 메모리 정렬 요구 사항 충족

기술적 세부사항

     * llamafile은 쉘 스크립트와 가중치를 결합하여 빠른 실행을 가능하게 하는 mmap() 기능 활용
     * ZIP 가중치 포함, 마이크로아키텍처 및 아키텍처 이식성, GPU 지원에 대한 기술적 해결책 제시

라이선스

     * llamafile 프로젝트는 Apache 2.0 라이선스를 사용하며, llama.cpp에 대한 변경 사항은 MIT 라이선스 적용

알려진 문제

     * 64비트 Windows에서는 4GB 파일 크기 제한이 있어, 가중치를 별도의 파일로 사용해야 함

GN⁺의 의견

   이 글에서 가장 중요한 것은 AI 개발자들이 어디서나 손쉽게 LLM을 빌드하고 실행할 수 있도록 하는 llamafile 프로젝트의 혁신적인 접근 방식임. 이 프로젝트는 다양한 플랫폼과 아키텍처에서의 호환성을 제공하며, 가중치를 포함한 단일 파일로 배포함으로써 사용의 편리성을 크게 향상시킴. 이러한 기술적 발전은 AI 연구와 개발을 더욱 가속화할 수 있는 잠재력을 가지고 있어, 이 분야에 관심 있는 사람들에게 매우 흥미로운 내용임.

        Hacker News 의견

     * LLaVA 모델 사용 방법
          + macOS에서 LLaVA 모델을 시험해보는 최선의 방법은 텍스트와 이미지를 결합한 모델(GPT-4 Vision과 유사)을 사용하는 것임.
          + macOS에서 실행하는 방법을 단계별로 설명하며, 다른 플랫폼에서도 비슷하게 작동할 것으로 예상함(아직 시도하지는 않음).
              1. Hugging Face에서 4.26GB 크기의 llamafile-server-0.1-llava-v1.5-7b-q4 파일 다운로드
              2. 터미널에서 실행 권한 부여
              3. 실행 파일을 실행하여 8080 포트에서 웹 서버 시작
              4. 브라우저에서 http://127.0.0.1:8080/로 이동하여 이미지 업로드 및 모델과 대화 시작
     * macOS 앱 개발 경험 공유
          + Justine Tunney / jart의 뛰어난 이식성 작업에 대한 감탄과 함께, 개발자는 자신의 macOS 앱에서 llama.cpp를 SwiftUI 프론트엔드와 함께 실행함.
          + 앱의 첫 버전에서는 단일 다운로드 후 채팅 흐름과 네트워크 연결을 하지 않는 것에 집중함.
          + 모델을 앱에 번들로 제공하여 다운로드 후 바로 사용할 수 있었으나, UI 업데이트를 배포할 때마다 사용자들이 3GB를 다시 다운로드해야 하는 문제 발생.
          + 사용자들의 불만 후, 기본 모델 다운로드와 UI를 분리하여 앱 업데이트 시 5MB 정도만 배포하게 변경함.
          + 이 도구를 사용하는 사람들이 llama.cpp 업데이트를 원할 때 비슷한 문제에 직면할 것으로 예상하며, 이러한 문제가 중요하지 않은 경우가 있을지 궁금함.
     * Simon Willison의 관련 포스트 추천
          + Simon Willison의 관련 포스트에 대한 추천 링크 제공.
     * 관련 링크 공유
          + Mozilla의 llamafile 소개와 Justine Tunney의 트윗에 대한 링크 공유.
     * Llaminate라는 이름 제안
          + Llama 호환 모델을 사용할 준비가 된 blob으로 래핑하는 일반적인 작업을 위한 'Llaminate'라는 이름 제안.
     * Cosmopolitan을 사용한 CUDA 지원에 대한 감탄
          + Cosmopolitan이 이번 달에 GPU를 활성화하기 위해 동적 링킹을 위한 지원을 추가한 것에 대한 감탄.
          + CUDA 개발자 툴킷 설치가 필요하지만, Nvidia 드라이버 외에는 별도의 의존성 없이 CUDA 앱을 배포할 수 있는 가능성에 대한 흥미.
     * Windows에서의 실행 파일 크기 제한 언급
          + Windows 10 64비트 시스템에서 4GB 실행 파일이 잘 작동하는 경험 공유.
     * llama.cpp의 다양한 모델 실험 방법 공유
          + GitHub에서 llama.cpp를 클론하고, 필요한 모델을 다운로드하여 서버를 실행하는 방법을 코드와 함께 공유.
     * 단일 모델과 가중치로만 작동하는 바이너리에 대한 제한성 지적
          + 하나의 모델과 가중치 세트만 실행하는 바이너리의 제한성에 대한 의견 제시.
     * Justine의 놀라운 프로젝트 창출 속도에 대한 언급
          + Justine이 놀라운 속도로 놀라운 프로젝트를 만들어내고 있음에 대한 언급.
"
"https://news.hada.io/topic?id=12172","스포티파이, 전체 인원의 약 17% 감축 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스포티파이, 전체 인원의 약 17% 감축 예정

조직 변화에 대한 업데이트

     * 스포티파이 CEO 다니엘 에크가 직원들에게 회사의 조직 변화에 대한 메모를 공유했음.
     * 지난 2년간 스포티파이는 지속 가능하고 위대한 비즈니스를 구축하는 데 중점을 두었으며, 세계 최고의 오디오 회사가 되고 지속적인 수익성과 성장을 이끌어내는 것을 목표로 함.
     * 경제 성장이 크게 둔화되고 자본 비용이 증가함에 따라, 스포티파이도 이러한 현실에서 예외가 아님.

인력 감축 결정

     * 스포티파이의 미래 목표와 도전에 맞게 조직을 조정하기 위해 전체 인력의 약 17%를 감축하기로 어려운 결정을 내림.
     * 이 결정은 가치 있는 기여를 한 많은 개인에게 영향을 미칠 것이며, 많은 능력 있는 인재들이 회사를 떠날 것임.
     * 이번 인력 감축은 최근 긍정적인 수익 보고와 성과에도 불구하고, 재정 목표와 현재 운영 비용 사이의 격차를 고려할 때 필요한 조치로 판단됨.

다음 단계

     * 영향을 받는 직원들은 HR로부터 1:1 대화를 위한 캘린더 초대를 받게 될 것이며, 이는 화요일까지 진행될 예정임.
     * 해고되는 직원들에게는 평균 5개월치의 퇴직금, 미사용 휴가급여, 퇴직 기간 동안의 건강보험, 이민 지원, 2개월간의 경력 지원 서비스가 제공될 것임.

앞으로 나아가기

     * 팀 규모를 줄이는 결정은 더 강하고 효율적인 스포티파이를 만들기 위한 어려우면서도 중요한 단계임.
     * 스포티파이는 초기 자원이 제한적이었을 때 창의성과 기발함으로 성공을 거두었으나, 자원을 효율적으로 사용하는 원칙에서 멀어졌음.
     * 더욱 자원을 집중적으로 사용하고, 투자를 전략적으로 재투자함으로써, 스포티파이의 지속 가능한 수익성과 혁신 능력을 보장할 것임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 스포티파이가 경제적 현실을 인식하고 미래 지향적인 조치를 취했다는 점이다. 인력 감축은 단순히 비용 절감이 아니라 회사의 지속 가능한 성장과 효율성을 위한 전략적 재편이라는 메시지를 전달한다. 이러한 변화는 기술 산업에서 일하는 사람들에게 특히 흥미로울 수 있으며, 변화하는 시장 환경에 대응하는 대기업의 결정 과정에 대한 통찰을 제공한다.

        Hacker News 의견

     * 한 사용자는 9000명이 단일 제품을 위해 일하는 것에 놀라움을 표시함. 5년 넘게 구독자였지만 아이폰 앱의 품질이 점점 떨어지는 이유를 궁금해함.
          + 매일 업데이트되던 기능이 사라져 좋아하는 아티스트의 새로운 릴리스를 한눈에 볼 수 없게 됨.
          + 클래식 음악을 듣는데, 곡 제목이 너무 길어 불편함.
          + 최근에는 휴대폰과 데스크탑 앱 간의 플레이리스트 동기화가 중단됨.
     * 다른 사용자는 클라우드 구매에 대한 의견을 제시함. 스포티파이가 클라우드를 대규모로 도입한 것에 대해 언급하며, 이것이 핵심 역량이 아니라고 생각하는 기업들이 많았음을 지적함.
          + 클라우드 비용이 많은 인력을 고용하는 것보다 훨씬 높다는 점을 언급함.
          + 비효율이 존재하지만, 클라우드에 대한 지출이 많으면 수익이 적을 때 어떤 조치가 필요함을 강조함.
     * 또 다른 사용자는 스포티파이가 2020년과 2021년에 저금리로 대출을 받았음에도 불구하고 왜 그 시기에 이익을 더 전략적으로 투자하지 않았는지 의문을 제기함.
          + 대출은 전략적이지 않고 지속 가능하지 않은 고용에 사용되었다고 비판함.
     * 한 사용자는 해고가 발생할 때 CEO가 사임해야 한다는 의견을 표현함. 정부와 같이 전체 내각이 사임하는 것처럼, 해고가 필요하다면 최고 경영진도 책임을 지고 사임하는 것이 공정하다고 주장함.
     * 레이블과 주주들이 더 큰 이익을 원하기 때문에 비용 상승이 문제가 아니라는 의견을 제시함. 아티스트들은 거의 돈을 벌지 못하고, 이제는 직원들도 손해를 보고 있다고 지적함.
     * 스트리밍 서비스 회사가 9500명의 직원을 필요로 하는 이유에 대해 의문을 제기함. 네이티브 데스크탑 앱도 없는데 비효율적으로 보인다고 함.
     * 조 로건이나 해리와 메건과 같은 유명 인사들과의 계약에 많은 돈을 지출한 것이 해고에 영향을 미쳤는지 궁금해함. 9000명의 직원 중 17%가 해고됨.
     * 해고되는 직원들에 대한 퇴직금 지급 방식이 모호하게 느껴진다는 의견을 제시함. 평균 5개월의 퇴직금이라는 것은 2020년과 2021년에 고용된 사람들이 아닌, 오래된 직원들이 해고될 가능성을 시사함.
     * 스포티파이가 왜 그렇게 많은 직원을 필요로 하는지 의문을 가짐. 9000명의 직원이 모두 무엇을 하는지 궁금해함.
     * 스포티파이가 이익을 내지 못하고 있는 것 같다는 의견을 표현함. 음악 스트리밍 서비스들이 수년간 이익을 내지 못하는 모델로 운영되고 있는 것이 이상하다고 함.
"
"https://news.hada.io/topic?id=12216","인공지능과 대규모 감시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              인공지능과 대규모 감시

인공지능과 대규모 감시

     * 감시와 스파이 활동은 서로 다르지만 관련된 개념임. 과거에는 감시가 비용과 시간이 많이 드는 수작업이었으나, 이제는 스마트폰, 신용카드, 앱 등을 통해 자동으로 위치, 구매, 대화 상대 등이 추적됨.
     * 인터넷의 비즈니스 모델이 된 대규모 감시에서는 우리가 이를 선택하지 않을 수 없는 상황임. 스파이 활동은 여전히 인간의 노동력에 의존하지만, 인공지능(AI)이 이를 변화시킬 준비가 되어 있음.

인공지능의 변화

     * 현대의 생성적 AI 시스템은 요약을 잘 수행하며, 수백만 개의 대화를 주제별로 정리하거나 특정 주제에 대해 누가 언급하는지 알려줄 수 있음.
     * 이러한 기술은 완벽하지 않지만, 인간도 실수를 하며, AI는 빠르게 복제되고 개선되고 있어 매년 더 나아질 것임. 대규모 스파이 시대가 다가오고 있음.

대규모 감시와 스파이의 미래

     * 대규모 감시는 과거로 거슬러 올라가 감시할 수 있는 능력을 제공하며, 특정 대상을 몰라도 감시가 가능함.
     * 대규모 스파이 활동은 모든 데이터를 저장하고, 대량으로 검색하고 이해할 수 있게 만들 것임. 특정 주제에 대한 대화, 범죄 계획, 소문 확산, 정치 시위 참여 계획 등을 찾아낼 수 있음.
     * 조직 구조를 밝히거나, 비밀을 공유하는 사람들을 찾아내는 등의 복잡한 분석이 가능해질 것임. 대화뿐만 아니라, 마이크가 있는 곳이라면 어디서든 스파이 활동이 가능해질 것임.

감시와 스파이 활동의 사회적 영향

     * 지속적인 감시 상태는 사람들의 행동에 영향을 미치며, 자기 검열과 사회적 통제를 촉진함.
     * 정부는 대규모 감시를 이미 사용하고 있으며, 대규모 스파이 활동도 시작할 것임.
     * 기업들은 마케팅 목적으로 사람들을 감시할 것이며, 개인화된 광고 산업을 더욱 강화할 것임.

데이터 프라이버시와 제한

     * 구글은 과거에 Gmail 내용을 사용하여 개인화된 광고를 제공하려 했으나, 키워드 데이터의 효용성이 낮아 중단함. 그러나 이러한 기술이 개선되면서, 다시 시작될 가능성이 있음.
     * 대규모 스파이 기능을 제한하거나 강력한 데이터 프라이버시 규칙을 도입할 수 있지만, 대규모 감시를 제한하지 않은 것처럼 스파이 활동도 다르지 않을 것임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 인공지능(AI) 기술의 발전이 개인의 프라이버시와 감시의 본질을 어떻게 변화시키고 있는지에 대한 통찰을 제공한다는 점이다. 대규모 감시와 스파이 활동이 사회적 행동과 통제에 미치는 영향을 이해함으로써, 독자들은 데이터 프라이버시와 관련된 중요한 논의에 참여할 수 있는 기반을 마련할 수 있다. 이 글은 AI의 빠른 발전과 그것이 우리 일상에 미칠 수 있는 광범위한 영향을 고려할 때, 특히 소프트웨어 엔지니어와 같은 기술 전문가들에게 흥미로운 주제를 제공한다.

        Hacker News 의견

     * 정치적 문제의 본질
          + 이 문제는 기술적인 것이 아니라 정치적인 문제임. 예를 들어, 구소련은 기본적인 기술로도 효과적인 대규모 감시를 수행했음. 미국에서 이러한 일이 일어나지 않은 것은 기술적 능력 부족이 아니라 정치적 관심이 없었기 때문임.
          + 과거에는 상상도 못했던 것들을 금지하는 법이 만들어졌음. 데이터 수집을 불법화하는 것도 큰 법적 도약은 아닐 것이나, 현재 정치적 관심이 전혀 없음.
     * 인공지능의 감시 위험성
          + 감시 국가의 현실에서 데이터의 양이 너무 많아 현실적으로 모니터링이 불가능했으나, AI는 이를 요약하여 해결할 수 있음. 이것이 단기적으로 AI의 진짜 위험성으로, 표준에서 벗어난 모든 것을 타겟팅하는 도구가 될 수 있음.
     * 기업의 개인 비서 봇
          + 구글, 메타, 마이크로소프트 등의 봇은 웹이나 소셜 네트워크뿐만 아니라 특정 주제와 사람들을 추적할 것임. 이러한 개인 비서 봇은 사용자를 돕는 척하지만 실제로는 기업의 목적에 맞게 정보를 수집하고 조작된 정보를 제공함.
     * AI에 의한 대규모 범죄 법 집행
          + 범죄 법은 조사와 기소에 자원이 필요하다는 가정 하에 작성되었으나, AI는 이러한 제한을 없앨 수 있음. AI가 공공 활동을 모니터링하고 법적 절차를 자동화하여 사소한 범죄까지도 기소할 수 있게 됨.
     * 검열의 영향
          + 검열의 가능성과 이를 통한 비즈니스 모델이 감시보다 더 우려됨. 예를 들어, 데이팅 앱에서 연락처 교환에 비용을 지불하게 하거나, 소셜 미디어에서 특정 견해를 즉시 삭제하는 것이 가능해질 수 있음.
     * 기술의 불가피한 발전
          + 기술이 발전함에 따라 불가피하게 감시와 검열이 일어날 것임. 이를 현실로 받아들이고 적응하는 방법에 대한 논의가 필요함. 법적 규제와 반감시 기술을 통해 불법 감시의 위험을 줄일 수 있음.
     * 보안을 위한 얼굴 인식
          + ""보안""을 명목으로 곧 자주 얼굴 스캔이 이루어질 것이며, 이는 우리 생활의 많은 부분에서 의무화될 것임.
     * 구글의 개인정보 보호 노력
          + 구글은 ""Hey Google""이 항상 듣고 있는 것이 아니라, 특정 단어를 인식할 때만 오디오를 전송함. 구글의 개인정보 보호 팀은 올바른 일을 하려고 노력하고 있음.
     * AI에 의한 대규모 감시의 현실
          + 대규모 감시는 이미 존재하며, AI는 수십 년에 걸친 모든 사람의 행동 데이터를 추출하는 데 사용될 수 있음. 이 데이터가 범죄 기소에만 사용된다면, 법 위에 아무도 없는 사회가 될 수 있으나, 시스템을 통제하는 인간은 자신에게 유리한 위치를 원함.
     * AI 소프트웨어의 자유
          + AI 소프트웨어는 제한되어서는 안 되며, 일반인과 시민 의식이 있는 사람들이 기업 AI에 대항할 수 있는 개인 및 공공 AI 시스템을 개발할 수 있어야 함. AI의 미래는 대립적이며, AI 소프트웨어 개발의 자유는 그 사용이 규제되어야 함.
"
"https://news.hada.io/topic?id=12149","클랭이 이제 오리지널 파이 B+에서 실행할 수 없는 바이너리를 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 클랭이 이제 오리지널 파이 B+에서 실행할 수 없는 바이너리를 생성
"
"https://news.hada.io/topic?id=12081","우리가 백엔드를 Vercel에서 Fly.io로 바꾼 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    우리가 백엔드를 Vercel에서 Fly.io로 바꾼 이유

     * API 서버는 Hono, 런타임은 Bun, 호스팅은 Fly.io로 전환

이전한 이유

     * 경량 서버 필요: 모니터링 엔드포인트를 위해 간단한 REST API를 갖춘 경량 서버를 원했음. Vercel의 Next.js 서버는 불필요한 추가 기능이 있고 더 무거움. Hono와 Bun을 사용. 시작하는데 0.19ms & 메모리 91MB
     * 가격 문제: 다중 지역 모니터링을 유지하면서 비용을 예측하기 어려웠음. Vercel은 사용한 CPU 시간에만 비용을 부과하지만, 사용자 증가에 따라 비용이 증가함. 반면 Fly.io는 더 저렴

이전 중 도전과제

     * Docker와 모노레포: 초기에 Docker 이미지가 2GB로 과도했지만, 최적화를 통해 700MB로 줄임
     * Fly 배포 시간 초과 문제: Fly 배포는 종종 시간 초과 되어서 타임아웃을 늘려야 했음. Fly 배포는 Vercel에 비해 안정성이 떨어지고, 이전 버전으로 빠르게 롤백하는 방법이 없음
     * Bun 버그: Bun 런타임 사용 시 요청 실패가 증가했으며, keepalive 매개변수를 false로 설정해야 함

결론

     * 이전은 도전적이었지만, 결과적으로 만족스러웠음.
     * 물론 Vercel은 여전히 좋아함. 그러나 Next.js 이외의 애플리케이션 호스팅이 필요한 경우 이것은 최적의 선택이 아닐 수 있음
"
"https://news.hada.io/topic?id=12186","프로그래밍 언어프로그래밍 언어 HTML

     * HTML을 기반으로 한 튜링 완전한 스택 프로그래밍 언어 공개.
     * 모든 계산을 위해 HTML에 정의된 요소를 사용함.
          + <data> 태그를 이용해 스택에 데이터를 삽입하고, <i>로 분기를 태우고 <table>로 객체를 정의하는 등.
          + 모든 데이터 구조, 연산 등이 전부 HTML 요소임.
     * 자바스크립트 기반의 HTML 인터프리터에 의해 실행됨.
     * 간단한 Hello world나 입출력부터 피보나치 수열을 계산하는 예시까지 공개함.
     * 이제 ""HTML은 프로그래밍 언어인가요?""라는 질문에 ""네""라고 대답 가능.
          + ""HTML is a programming language""가 적힌 티셔츠도 판매.

   티셔츠 단 돈 $25.00

   직접 작성하기는 넘 어려워보이고… 누가 트랜스파일로를 만들어줘야 할 것 같아요 ㅋㅋ

   티셔츠 팔려고 이러는걸까요

   티셔츠 하나 팔기 위해 이렇게 튜링 완전한 스택 개발 언어를 만들었다!

   아니면 식칼 든 하키마스크 살인마에게 잡히고 싶어서…?

   이걸 이제 프로그래밍 언어가 됐다고 해야할지
   기어코 프로크래밍 언어로 만들었다고 해야할지..

   그럼 이제 HTPL 인가요? ㅎ
   Hyper Text Programming Language

   재밌긴 한데 네임스페이스 침해/오염이라 좋게만은 안보이네요

   정말 omg 그자체군요...

   html붐은 온다...

   결국 누군가가 만들어버리고 말았군요...

   https://htmx-shop.fourthwall.com/products/html-pl-btw-shirt

   HTML은 프로그래밍 언어라는 티셔츠도 같이 팝니다. 밑에 해당 글 주소를 적은 게 킬포..

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   ㅋㅋㅋ

   WTF...?

   WOW

   OMG...
     * HN 스레드

   HN 반응 중에 ""풀스택 HTML""이라고 하겠다는게 너무 재미있네요. +_+
"
"https://news.hada.io/topic?id=12105","Tesla, Cybertruck 가격 및 스펙 공개하고 딜리버리 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Tesla, Cybertruck 가격 및 스펙 공개하고 딜리버리 시작

     * 3가지 모델
          + RWD $60990 : 2025년, 400km 주행, 제로백 6.5초
          + AWD $79990 : 2024년, 540km 주행, 제로백 4.1초, 최대속도 180kmh, 600마력, LB-FT 토크 7435, 11000LBS(5톤) 토우 가능
          + CyberBeast $99990 : 2024년, 514km 주행, 제로백 2.6초, 최대속도 210kmh, 845마력, LB-FT 토크 10296, 11000LBS(5톤) 토우 가능
     * $250 내고 주문하면, 가능한 시점에 초대됨

딜리버리 행사 진행 내용

     * ""More utility than a Truck, Faster than a Sports Car""
     * 단단함 : 방탄(Bulletproof)
          + 테슬라가 설계한 Stainless Stell Super Alloy : 이전에 존재하지 않았던 새로운 재질
          + Tesla Armor Glass 로 야구공 던지기 테스트
          + Tommy Gun(톰슨 기관단총, 시카고 타자기) .45 935 ft/s 로 난사해도 방탄
          + Glock 9mm 1100 ft/s 에도 방탄
          + MP5-SD(테러리스트 들이 주로 사용하는 기관단총) 9mm 950 ft/s 에도 방탄
          + 조 로건 쇼에 나가서 강철 크로스보우 에도 버티는지 테스트
     * 유틸리티
          + 11000LBS(5톤) 토우 가능
          + 40000LBS(18톤) 장비를 끄는 성능 비교에서 Ford F-150 전기트럭, Rivin R1T 전기 트럭, Ford F-350 디젤 트럭을 모두 이김
     * 성능
          + 최고 지상고 17인치(43cm)
          + 모델 S 보다 회전 반경이 짧음(후륜 조향)
          + 최초의 풀48V 적용 차량: 배선의 70%를 제거
          + 포르쉐 911과의 드래그 레이스 테스트에서 911 한대를 뒤에 달고 달리면서도 다른 911을 이김 (2.6초)

   차폭이 2.4미터라 한국에서는 못탈거 같네요

   모듈간 와이어리스 통신으로 배선을 줄였다는 내용을 봤는데.. 이게 가능한건가 싶네요.

   48 volt 아키텍쳐로 배선 양을 줄인 겁니다. 같은 양의 전기를 보낼때 전압이 2배 높아지면 저항은 4배 감소 합니다. 따라서 배선 무게의 총양을 줄일 수 있습니다. 무게는 가벼워지고 전기는 더 효율적으로 사용하고, 1석 2조. 앞으로 모든 회사들이 채택 할겁니다. 늦을 수록 경쟁에서 뒤처짐.

   오... 신기하네요. 만약 타고 다닌다면 시선 하나는 슈퍼카보다 더 끌게 생겼어요.

   CNET 유튜브에 올라온 Tesla's CyberTruck Delivery Event - LIVE

   포르쉐 911 테스트 영상부분에서 빵 터졌네요.
   앞서 나가는걸 카메라가 앞에서 찍어서 보여주니 사람들 환호하는데,
   일런 머스크가 ""Wait, There's More"" 하더니 뒤에 한대를 끌고 왔다는 걸 보여줍니다.

   진짜 최고네요 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=12086","처음부터 설계하는 SIMD 알고리즘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          처음부터 설계하는 SIMD 알고리즘

SIMD 알고리즘 설계

     * SIMD 최적화에 대한 설명: SIMD는 단일 명령어 다중 데이터를 의미하며, 회로 설계자처럼 생각하는 것이 필요함.
     * SIMD는 성능과 HPC(고성능 컴퓨팅)에서 자주 언급되지만 초보자에게 친숙한 주제는 아님.
     * 대부분의 프로그래밍 언어에서 SIMD 프로그래밍 API는 사용하기 어려움.
     * SIMD 알고리즘은 절차적 프로그래밍 사고방식으로는 이해하기 어려우며 함수형 프로그래밍이 도움이 됨.
     * 본문은 Rust의 std::simd 라이브러리를 사용하여 base64 코덱을 구현한 vb64에 대한 것임.

물리적 한계

     * 컴퓨터는 실제 세계에 존재하며 물리 법칙에 구속됨.
     * 초기 컴퓨팅 시대에는 새 컴퓨터를 구입함으로써 성능을 향상시킬 수 있었음.
     * 덴나드 스케일링 효과가 붕괴되어, 더 작은 트랜지스터는 더 많은 전력 소모를 의미함.
     * 코어 수를 늘리는 것이 새로운 트렌드가 됨. 멀티스레딩을 통해 CPU 성능을 향상시킬 수 있으나 동기화 오버헤드가 발생함.

절차적 코드의 느림

     * 현대 컴퓨터 코어는 코드를 줄 단위로 실행하지 않음.
     * 명령어 수준 병렬성을 통해 데이터 의존성이 없는 경우 동시에 여러 연산을 수행함.
     * 컴파일러가 데이터 위험을 해결할 수 있을 때 병렬성이 증가함.
     * 분기와 메모리 작업은 스톨을 발생시키며, 이는 코드를 느리게 만듦.

SIMD와 레인

     * SIMD와 벡터는 종종 동의어로 사용됨.
     * SIMD 명령어는 고정 크기의 숫자 배열인 벡터를 기본 단위로 사용함.
     * 벡터의 각 요소를 레인이라고 하며, SIMD 벡터는 일반적으로 작은 크기임.

실제 벡터에 대한 연산

     * SIMD 벡터는 일반 레지스터보다 복잡한 연산을 제공함.
     * 벡터 레지스터는 비트 연산, 레인별 산술 연산, 레인별 비교, 셔플 등 다양한 연산을 지원함.
     * 셔플은 SIMD 프로그래밍에서 데이터를 적절한 위치로 이동시키는 데 중요함.

내장 함수와 명령 선택

     * SIMD 코드 작성 시 사용 가능한 연산은 아키텍처에 따라 다름.
     * 컴파일러는 사용자가 요청한 연산을 어떤 명령어로 선택할지 결정하는 명령 선택 문제를 해결함.
     * 포터블 SIMD 코드 작성은 복잡하지만, 런타임 기능 감지를 통해 다양한 프로세서에서 최적의 코드를 생성할 수 있음.

SIMD로 파싱

     * SIMD를 사용하여 텍스트 파싱이 가능하며, 매우 빠를 수 있음.
     * base64 디코딩을 SIMD로 구현하는 것을 예로 들 수 있음.
     * 모든 분기를 제거하는 것이 SIMD 버전을 만드는 과정의 핵심임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 SIMD 프로그래밍이 기존의 절차적 프로그래밍 방식과 다르게 데이터를 병렬로 처리하여 성능을 향상시킬 수 있다는 점입니다. SIMD는 고성능 컴퓨팅 분야에서 매우 중요하며, 특히 Rust와 같은 현대 프로그래밍 언어에서 SIMD를 효과적으로 사용하는 방법을 이해하는 것은 소프트웨어 엔지니어에게 매우 흥미로운 주제가 될 수 있습니다. SIMD를 통해 복잡한 알고리즘을 최적화하고, 실제 하드웨어의 한계를 극복하는 방법을 배울 수 있기 때문입니다.

        Hacker News 의견

     * 포터블 SIMD 사용 사례를 볼 수 있는 훌륭한 기사. Zen 3 시스템에서 벤치마크를 재현해보니 동일한 속도 향상을 확인함. M1 mbp에서는 입력 길이 110바이트에서 최대 2배까지 성능 향상이 점진적으로 증가함. x86_64보다는 이득이 적지만 목표를 달성했다고 볼 수 있음. 그러나 Rust가 SIMD 및 포인터 관련 작업, 성능 엔지니어링 전반에 걸쳐 다소 불편한 점이 있음을 확인함.
     * 때로는 C++로 최선을 다해 프로그래밍하려고 해도, SIMD를 사용한 버전이 10배 이상 빠른 성능을 보여주는 경우가 놀랍다. 코드의 이식성은 떨어지지만, 컴파일러가 자동 벡터화를 더 잘 해줬으면 하는 바람이 있음. 어노테이션을 통해 특정 연산의 순서를 재배열할 수 있도록 언어에 지원이 추가되었으면 좋겠음.
     * 컴파일러가 특정 popcount 구현을 단일 명령어로 최적화하지 못했지만, 다른 구현에 대해서는 가능한 경우가 있음을 지적함.
     * _mm256_cvtps_epu32는 AVX2의 명령어가 아니라 AVX-512의 명령어이며, AVX1에서는 정수가 부호 있는 형태로 존재하고 해당 명령어는 _mm256_cvtps_epi32임.
     * 오른쪽에 있는 작은 미니맵이 매우 마음에 듦.
     * ISPC는 C++나 Rust에 SIMD를 추가하는 것보다 낫다고 평가함. 또한, 동적 디스패칭을 지원하는데, 이는 직접 구현하기 까다로운 기능임.
     * fastbase64와 비교했을 때 어떤가에 대한 질문과 함께, 포터블 SIMD 라이브러리에 대한 글쓴이의 낙관적인 태도를 공유하고 싶다는 의견을 제시함.
     * 훌륭한 글로, 스스로 결코 이만큼 똑똑해질 수 없을 것 같다는 인상을 남김.
     * 벡터화되지 않은 popcnt 구현의 첫 번째 예제가 ""솔직히 말해서 우스꽝스러운 코드""를 생성한다고 언급되었지만, 네이티브 타겟 CPU에서 릴리스 모드로 컴파일하면 함수가 꽤 괜찮게 벡터화되는 것으로 보임.
     * Rust Simd에 대한 상당히 좋은 시도. 생성된 코드를 검사했을 때 가장 놀라운 특이점은 무엇이었는지에 대한 질문을 제기함.
"
"https://news.hada.io/topic?id=12211","Gemini: 지금까지 구글에서 가장 능력이 뛰어난 AI 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Gemini: 지금까지 구글에서 가장 능력이 뛰어난 AI 모델

요약 제목: 구글과 딥마인드의 새로운 AI 모델 '제미니' 소개

     * 구글과 알파벳의 CEO 순다르 피차이는 AI가 모바일이나 웹으로의 전환보다 더 큰 변화를 가져올 것이라고 믿음.
     * 구글은 AI 중심 회사로서 8년간의 여정을 거치며, 제너레이티브 AI를 통해 사용자들이 새로운 방식으로 협업하고 창조할 수 있게 됨.
     * 구글은 연구에 대한 야심과 사회에 큰 혜택을 가져다 줄 능력을 추구하면서도, AI의 위험을 다루기 위해 정부 및 전문가들과 협력함.

제미니 소개

     * 구글 딥마인드의 CEO이자 공동 창립자인 데미스 하사비스는 AI가 인간에게 놀라운 혜택을 가져다 줄 것이라고 믿음.
     * 제미니는 구글 팀 간의 대규모 협력을 통해 만들어진 가장 능력 있는 모델로, 텍스트, 코드, 오디오, 이미지, 비디오 등 다양한 정보 유형을 이해하고 운용할 수 있음.
     * 제미니 1.0은 세 가지 크기로 최적화되어 있으며, 데이터 센터부터 모바일 기기까지 효율적으로 작동할 수 있음.

최첨단 성능

     * 제미니 모델은 다양한 작업에서 현재 최첨단 결과를 뛰어넘는 성능을 보임.
     * 제미니 울트라는 인간 전문가보다 높은 성능을 보이는 MMLU에서 90.0%의 점수를 기록함.
     * 이미지 벤치마크에서도 이전 모델을 뛰어넘는 성능을 보이며, 제미니의 복잡한 추론 능력의 초기 징후를 보여줌.

차세대 능력

     * 제미니는 태생적으로 멀티모달이며, 다양한 모달리티에서의 이해와 추론 능력이 기존 모델보다 훨씬 뛰어남.
     * 제미니 1.0은 복잡한 문서에서 지식을 추출하고, 수학과 물리학과 같은 복잡한 주제에서 추론을 설명하는 데 특히 뛰어남.
     * 제미니는 고품질 코드를 이해하고 생성할 수 있으며, 프로그래밍 언어 간의 작업과 복잡한 정보에 대한 추론에 있어 선도적인 기초 모델 중 하나임.

더 신뢰할 수 있고 확장 가능하며 효율적인

     * 제미니 1.0은 구글의 AI 최적화 인프라와 TPU v4 및 v5e를 사용하여 대규모로 훈련됨.
     * 제미니는 이전 모델보다 빠르게 실행되며, 구글의 AI 제품에 핵심적인 역할을 하는 맞춤형 AI 가속기임.
     * 구글은 Cloud TPU v5p를 발표하여 제미니의 개발을 가속화하고 개발자들이 대규모 AI 모델을 더 빠르게 훈련할 수 있게 함.

책임감과 안전성을 핵심으로 구축

     * 구글은 제미니의 멀티모달 능력을 고려하여 새로운 보호 조치를 추가하며, 개발의 모든 단계에서 잠재적 위험을 고려함.
     * 제미니는 구글 AI 모델 중 가장 포괄적인 안전 평가를 받았으며, 내부 평가 방식의 맹점을 식별하기 위해 외부 전문가들과 협력함.
     * 제미니는 안전 분류기와 강력한 필터를 사용하여 폭력이나 부정적인 스테레오타입과 같은 내용을 식별하고 분류함.

제미니를 세계에 제공

     * 제미니 1.0은 구글 제품과 플랫폼에 도입되고 있으며, 바드는 제미니 프로의 고급 버전을 사용하여 더 발전된 추론과 이해를 제공함.
     * 개발자와 기업 고객은 구글 AI 스튜디오 또는 구글 클라우드 버텍스 AI를 통해 제미니 프로에 접근할 수 있음.
     * 제미니 울트라는 신뢰성 및 안전성 검사를 거친 후 초기 단계의 피드백을 위해 선택된 고객, 개발자, 파트너 및 전문가들에게 제공될 예정임.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 구글과 딥마인드가 제미니라는 새로운 AI 모델을 개발하여 AI 기술의 새로운 시대를 여는 것임. 제미니는 멀티모달 기능을 갖추고 있어 텍스트, 이미지, 오디오 등 다양한 형태의 정보를 이해하고 처리할 수 있는 능력을 보유하고 있으며, 이는 개발자와 기업들이 더욱 혁신적인 제품과 서비스를 만들어낼 수 있는 기회를 제공함. 이 기사가 흥미로운 이유는 AI 기술이 인간의 삶을 어떻게 변화시킬 수 있는지에 대한 구체적인 예시를 제공하고, 이러한 기술 발전이 어떻게 책임감 있게 이루어져야 하는지에 대한 구글의 접근 방식을 보여주기 때문임.

   HN쪽에도 중복 게시물이어서, 제가 긱뉴스에 별도로 올린 구글, AI 모델 Gemini 공개 를 보시면 됩니다.
"
"https://news.hada.io/topic?id=12136","인터넷을 형성한 HTML 해킹 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인터넷을 형성한 HTML 해킹 기술

HTML 해킹의 기발함

     * HTML 해킹의 필요성: HTML 코드의 실패나 브라우저 구현의 미흡으로 인해 기대한 결과를 얻기 위해 우아하지 않은 코드를 작성해야 하는 경우가 있음. 이러한 해킹은 때로는 창의적이고 기억할 가치가 있음.
     * 넷스케이프 내비게이터 4.0 @import 해킹: 넷스케이프가 지원하지 않는 CSS 스타일을 차단할 수 있도록 함. 넷스케이프가 CSS 대신 JSSS를 지지했으나 W3C가 CSS를 선택하면서 넷스케이프 4의 CSS 구현이 서두르게 되었고, 이로 인해 나중의 브라우저에 비해 성능이 떨어짐.
     * HTML 테이블을 레이아웃에 사용: 더 실험적인 레이아웃을 가능하게 함. HTML 테이블을 레이아웃 도구로 사용하는 것은 해킹의 정의이며, 이메일 세계에서는 여전히 사용됨.
     * CSS 스타일 앞에 밑줄을 사용: 특정 스타일을 IE6에만 적용하도록 함. IE가 특수 문자를 파싱하는 한계를 이용함.
     * AlphaImageLoader를 사용하여 PNG 투명성 제공: IE6이 지원하지 않는 PNG 파일의 투명성을 렌더링함. 이미지를 필터를 통해 실행함.
     * 조건부 주석: 특정 IE 버전에서만 특정 트릭을 사용할 수 있도록 함. HTML 주석 기능을 해킹하여 코드를 실행할 수 있도록 변경함.
     * Scalable Inman Flash Replacement (sIFR): 비 웹 안전 폰트를 사용할 수 있게 함. 텍스트를 Flash 임베드로 교체하는 자바스크립트 해킹을 사용함.
     * 프리헤더 텍스트 해킹: 이메일에서 추가 텍스트가 설명 라인에 흘러 들어가는 것을 방지함. 비표준 또는 이례적인 공백 문자 배열을 사용함.
     * Google Chrome Frame: IE6을 크롬 창으로 대체함. 브라우저 플러그인을 통해 구현함.
     * Webkit 전용 선택자 해킹: CSS 코드를 Webkit 브라우저에만 적용함. 특정 브라우저 특정 CSS 코드를 지원하는지 감지함.
     * 반응형 디자인: 다양한 설정, 특히 태블릿과 모바일에서 정보를 효과적으로 배치함. 대부분의 경우 미디어 쿼리를 사용하여 장치에 따라 정보를 배치함.

GN⁺의 의견

     * 가장 중요한 것은 HTML과 CSS의 표준을 벗어나 창의적인 해결책을 찾아내는 개발자들의 노력임.
     * 이 글은 웹 개발자들이 브라우저의 한계를 극복하고 사용자 경험을 향상시키기 위해 어떻게 창의적인 해킹을 사용했는지 보여줌으로써 흥미롭고 매력적임.
     * 이러한 해킹은 웹 표준의 발전과 더 나은 웹 디자인을 위한 개발자들의 끊임없는 노력을 반영함.

        Hacker News 의견

     * 테이블을 레이아웃으로 사용하는 것은 이해할 수 있음.

     테이블이 유행을 따르지 않게 되면서 몇 년간 레이아웃을 위해 float 사용이 대세였음. 이 방법이 리스트에서 빠진 것에 대해 놀람. MDN 문서에 따르면, float 속성은 원래 텍스트 블록 내 이미지를 띄우기 위해 사용되었으나, 웹페이지의 다중 컬럼 레이아웃을 만드는 데에 자주 사용되었음. 이제 flexbox와 grid의 등장으로 원래의 목적으로 돌아감.
     * spacer.gif에 대한 존중이 없음.

     HN에서 여전히 사용 중이며, 모든 페이지 요청에 포함됨: s.gif
     * 가장 좋아하는 기술들:

          + 사이드바가 내용만큼 길어 보이게 하기 위한 'Faux columns'
          + 아홉 개의 패치와 9개의 div 또는 3x3 테이블을 사용하여 경계를 해킹하고, 배경을 일부 축에서 반복함. CSS3에서는 이를 돕는 border-image가 등장함. 하지만 이러한 경계 스타일은 더 이상 선호되지 않음.
          + 둥근 경계를 만들기 위해 아홉 개의 패치를 사용할 수 있으나, 많은 사람들이 HTML을 생성하는 제너레이터를 사용하여 둥근 경계를 시뮬레이션함. 기사에서 설명하듯, 추가 마크업이 이미지보다 더 많은 바이트를 차지할 것이라는 전통적인 지혜가 있었으나, 라운드트립이 적고 실행하기 쉬움.

     * HN이 오늘날에도 이러한 기술 중 하나를 사용함:

          + HTML 테이블을 레이아웃으로 사용함
          + 이 리스트는 표준 없는 개발이 어떻게 다양한 용인 가능한 부수적인 채널에 제어 정보를 인코딩하는지 강조함.
          + 이로 인한 잠재적인 혼란과 충돌은 때때로 W3C 프로세스에 대해 느껴지는 경멸을 부각시킴. 이 프로세스는 표준 기반의 웹 기술 진화와 브라우저 주도의 혁신을 결합함. 때로는 서로를 이끌거나 동시에 진행됨.
          + 종종 비판받지만, 이 프로세스는 이전 것보다 더 지속 가능하고 안정적으로 해석될 수 있음.
          + 새로운 W3C-벤더 규범을 비판하는 이들 중 몇 명이 이 10가지 이상한 해킹을 회상하며 그 시절로 돌아가고 싶어할지 궁금함.

     * 접근성을 위한 제목을 화면에 표시되지 않게 -10000 위치에 두는 것을 포함하지 않음.
     * HTML5 shiv를 CSS 이전에 설치하여 모든 브라우저의 특이점을 제거하는 것에 대한 언급이 없음.

     HTML5 shiv의 역사
     * 투명한 1×1 픽셀 gif를 사용하여 테이블 셀을 제어하던 좋은 옛날을 기억함.
     * 초기에 널리 사용된 &nbsp;, 즉 공백을 끊지 않는 공간 문자 엔터티에 대한 추가 언급:

     텍스트를 컨테이너 내에서 오른쪽 또는 왼쪽으로 이동하기 위해 사용됨. 또는 테이블 셀이 제대로 동작하도록 하기 위해 1x1 스페이서 gif와 유사하게 사용됨. 일부 페이지에는 수백 개의 &nbsp;가 사용됨. 일반적으로 여백이나 패딩을 추가하는 방법으로 사용됨.
     * 현대 웹 개발자들이 CSS Grid와 IE의 종말로 인해 버릇없어졌는지, 아니면 복잡한 현대 프레임워크와 빌드 프로세스를 다루지 않아서 그 시절에 버릇없었는지 가끔 구분이 안 됨.
     * 반응형 디자인이 정말 해킹인지에 대한 의문:

     미디어 쿼리는 놀라움. 조건부 로직을 자바스크립트에 넣는 것 대신 CSS에 넣는 것은 서버 사이드 렌더링을 원할 때 큰 이점임.
"
"https://news.hada.io/topic?id=12214","애플, 정부가 사용자 감시를 위해 푸시 알림을 사용한다고 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플, 정부가 사용자 감시를 위해 푸시 알림을 사용한다고 확인

정부의 푸시 알림 감시 확인

     * 미국의 한 상원의원이 정부가 구글과 애플 서버를 통해 푸시 알림을 추적하여 스마트폰 사용자를 감시하고 있다고 경고함.
     * 상원의원 Ron Wyden은 외국 정부가 기술 대기업들로부터 데이터를 요구하여 스마트폰 추적에 사용하고 있다고 밝힘.
     * 애플은 Wyden의 서한이 공개됨으로써 정부의 푸시 알림 모니터링에 대한 자세한 정보를 공유할 수 있는 기회를 제공했다고 언급함.

푸시 알림 관련 데이터 요청

     * Wyden의 서한에 따르면, 감시에 대한 정보는 ""팁""을 통해 알려졌으며, 외국 및 미국 정부 기관이 애플과 구글에 푸시 알림 관련 메타데이터를 요청했다고 함.
     * 메타데이터는 메시징 앱의 익명 사용자를 특정 애플 또는 구글 계정과 연결하는 데 사용되었다고 함.
     * 데이터 요청을 한 정부는 미국과 동맹을 맺은 ""민주주의 국가""로 기술되었으나, 구체적인 국가명은 밝혀지지 않음.

개발자의 알림 데이터 보안 조치

     * 애플은 개발자들에게 알림에 민감한 데이터를 포함하지 말고, 알림 페이로드에 데이터를 추가하기 전에 암호화할 것을 권장함.
     * 개발자가 조치를 취해야 하며, 메타데이터(어떤 앱이 알림을 보내는지, 얼마나 자주 보내는지 등)는 암호화되지 않아 사용자의 앱 사용 패턴에 대한 통찰력을 제공할 수 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 정부 기관들이 푸시 알림 메타데이터를 요청하여 사용자의 스마트폰 사용을 감시하고 있다는 사실이 공개되었다는 것이다. 이는 개인의 프라이버시와 관련된 중대한 이슈로, 사용자들과 개발자들에게 알림 데이터의 보안에 대한 인식을 높이는 계기가 될 수 있다. 이러한 정보 공개는 투명성과 개인 정보 보호에 대한 사회적 논의를 촉진할 수 있으며, 이는 많은 사람들에게 흥미로운 주제가 될 것이다.
"
"https://news.hada.io/topic?id=12137","OpenAI, 커스텀 GPT 스토어 출시를 2024년 초로 연기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI, 커스텀 GPT 스토어 출시를 2024년 초로 연기

OpenAI 맞춤형 GPT 스토어 출시 연기

     * OpenAI가 개발자들에게 보낸 메모에 따르면, 맞춤형 GPT 스토어의 출시를 내년 초로 연기함
     * 당초 지난달에 오픈할 예정이었던 이 스토어는 사람들이 자신들이 만든 맞춤형 버전의 ChatGPT를 배포할 수 있는 곳임
     * 스토어는 지난달 OpenAI DevDay 개발자 컨퍼런스의 하이라이트였음
     * 현재는 Custom GPT 링크를 직접 공유함으로써 남들과 같이 이용 가능

        Hacker News 의견

     * 플러그인 출시가 많은 사용자들에게 실망스러웠던 경험
          + 개발자 경험이 어색하고 답답함
          + 플러그인 스토어의 작동 방식에 대한 혼란
          + GPT로의 플러그인 전환 계획이 있으나 아직 시간을 내지 못함
     * 유료 GPT 사용에 대한 의문
          + 기본 모델이 대부분의 경우 더 나을 것으로 예상
          + 특수한 지식이 필요한 경우에만 유용할 것으로 보임
     * Google을 이용한 GPT 찾기 방법 제시
          + 특정 분야를 검색하여 GPT를 찾는 방법 안내
     * 모든 GPT 생성자에게 OpenAI로부터 발표 이메일 수신
          + ""scoop""이라는 표현에 대한 지적
     * 오픈 소스에 의한 새로운 ""봉건 영주"" 교체에 대한 기대감
     * ""앱 스토어""에 대한 우려
          + 쓰레기 앱과 마케팅 수법으로 범람할 가능성
          + GPT의 가치가 불투명해질 위험성
     * GPT 버전 관리의 부재에 대한 비판
          + GPT 버전 관리 기능의 필요성 강조
     * 맞춤형 GPT의 실제 사용에 대한 의문
          + 유용한 사용 사례 찾기 어려움
          + 시스템 프롬프트를 복사하여 사용하는 것이 더 투명하고 수정하기 쉬움
     * 맞춤형 GPT의 현재 행동이 거의 무용지물
          + 모든 요청을 승인해야 하는 번거로움
          + 이 문제의 해결을 희망함
     * 스토어가 빠른 수익을 노리는 사람들의 쓸모없는 내용으로 범람할 것에 대한 우려
"
"https://news.hada.io/topic?id=12194","매직 더 개더링: 아레나를 해킹하여 100% 승률 달성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     매직 더 개더링: 아레나를 해킹하여 100% 승률 달성

게임 해킹: 매직 더 개더링 아레나에서 100% 승률 달성

     * 매직 더 개더링: 아레나에서 상대방이 자동으로 항복하게 만드는 방법 발견
     * 문제 보고 의사 표시와 함께 소스 코드 및 해결 방안 제공 제안

서론

     * 클라이언트 측 코드의 난독화에 대한 의견: 난독화는 투자가 적은 사람들을 막기 위한 장벽을 높이지만, 보안 취약점을 보고하는 열정적인 개발자들에게는 장애물
     * 카드 게임은 서버 측에서 게임 상태를 전적으로 관리하고 클라이언트는 필요한 정보만 받음
     * 클라이언트는 제한된 정보만 가지고 있어, 해킹이 어려움

시작하기

     * 네트워크 통신 분석을 통해 게임 해킹 시작
     * C#으로 작성된 MTGA는 런타임에서 게임 객체를 조작하기 쉬움
     * 비공개 필드 및 메소드에 접근 가능한 리플렉션 사용

단서 찾기

     * C# 디컴파일은 메타데이터 토큰을 사용하여 인간이 읽을 수 있는 이름과 연결
     * 'JoinMatch' 함수 발견, 게임 서버에 처음 연결하는 곳으로 추정

Sparky의 구현

     * MTGA의 마스코트인 Sparky는 신규 플레이어를 위한 튜토리얼과 연습용 봇
     * 봇 로직은 로컬에서 실행되며, 모든 결정 과정이 사용자의 컴퓨터 내에서 진행됨

구현의 악마(세부 사항)

     * 봇 매치 시작 시 'HeadlessClient' 클래스를 통해 실제 봇 로직 처리
     * 봇은 게임 보드를 렌더링할 필요 없이 게임 서버에 연결하여 게임 진행

경기 인수

     * 리플렉션을 사용하여 게임 객체의 행동을 변경할 수 있음
     * 본인의 좌석을 파악하고, 다른 좌석에 클라이언트를 연결하여 상대방이 항복하게 만드는 코드 작성

GN⁺의 의견

   이 글에서 가장 중요한 점은 게임의 보안 취약점을 발견하고 이를 개선하기 위해 공유하는 개발자의 책임감 있는 행동이다. 카드 게임과 같이 서버가 게임 상태를 전적으로 관리하는 시스템에서도 클라이언트 측 조작을 통해 게임 결과를 조작할 수 있는 취약점이 존재한다는 것은 매우 흥미롭다. 이러한 정보는 게임 개발자들에게 보안을 강화하고, 게임을 더욱 공정하게 만드는 데 중요한 교훈을 제공한다.

        Hacker News 의견

     * 리눅스를 처음 접하며 네트워크 트래픽을 조사한 경험
          + EverQuest 게임을 위한 ShowEQ 프로그램을 사용하여 암호화되지 않은 트래픽 분석
          + 허브를 사용하여 리눅스 박스로 트래픽 복제, 실시간 지도 그리기 및 캐릭터 위치 표시
          + 몹이 가진 아이템 확인 가능, 특정 몹 선택적 사냥 지원
          + 패시브하고 탐지 불가능한 방법이었으나, 나중에 SOE가 트래픽 암호화 시작
     * Magic: The Gathering 게임을 위한 AI의 놀라운 효율성
          + 로컬 머신에서 작동 가능한 AI의 작은 메모리 사용량에 놀라움
          + 서버보다 로컬에서 AI를 실행하는 것이 더 합리적일 수 있음
          + 서버와 로컬 머신의 CPU 차이와 멀티코어 지원에 대한 고려
     * Magic: The Gathering AI 개발의 복잡성과 효율성
          + MTG의 복잡한 AI 개발에 대한 오해 해소
          + Sparky 로직의 접근 가능성 및 개발자들의 구현 선택
          + 게임의 거의 튜링 완전성과 AI 전략 개발에 대한 언급
     * MTGA에 대한 개인 프로젝트 및 게임 해킹에 대한 관심
          + 비공식 MTGA 클라이언트 개발 중이나 아직 초기 단계
          + 게임 해킹 경험과 버그 공개, 클라이언트 구조에 대한 관심 표현
     * 아들과 함께하는 Magic 93/94 게임의 즐거움
          + 실제 카드를 사용하여 아들과 게임 즐기기
          + 매드리드에서 열리는 세계 챔피언십 참가 및 아들의 성과 자랑
     * 클라이언트 측 게임 로직의 중요성과 서버 검증의 필요성
          + 실시간 게임에서 클라이언트 측 로직의 반응성 강조
          + 카드 게임에서 서버 검증의 중요성 및 상대방 정보 제한
     * League of Legends 게임의 버그와 그 영향
          + 특정 챔피언과 아이템 조합으로 인한 서버 오류 및 게임 결과 조작
     * 게임 중 AI 연결과 상대방의 기권 처리에 대한 의문
          + 실제 경기 중 AI 연결 허용 및 기권 처리 방식에 대한 질문
     * Diablo 2 게임에서의 서버 연결 패킷 재사용 경험
          + LAN 서버 캐릭터를 공식 인터넷 서버에 연결하는 방법 공유
     * 서버 에뮬레이터 개발과 LAN 매치에 대한 관심
          + 모든 카드가 잠금 해제된 LAN 매치를 위한 서버 에뮬레이터 개발 가능성 탐색
"
"https://news.hada.io/topic?id=12083","Adobe, 텍스트-투-비디오 AI 플랫폼 Rephrase 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Adobe, 텍스트-투-비디오 AI 플랫폼 Rephrase 인수

     * Rephrase는 2019년 설립되어 사용자가 몇 분 만에 디지털 아바타를 이용한 전문적인 비디오를 생성할 수 있는 플랫폼을 제공
     * 사용자는 비디오 템플릿, 아바타, 목소리를 선택하고 필요한 내용을 추가하여 비디오를 생성 가능
     * Rephrase는 50,000명 이상의 고객을 확보하고, Red Ventures와 Lightspeed India 등으로부터 거의 $14백만을 투자받음

어도비의 인공지능에 대한 전략

     * 어도비는 최근 몇 달 동안 여러 제품 업데이트를 통해 인공지능 기술을 적극적으로 통합중
     * 어도비는 이미지 생성을 위한 AI 엔진인 Firefly를 출시하고 Photoshop과 같은 크리에이티브 클라우드 제품에 통합
     * 어도비는 연례 Max 컨퍼런스에서 텍스트 프롬프트를 이용해 비디오의 텍스처와 객체를 변경하는 등의 인공지능 기반 비디오 기능을 시연
"
"https://news.hada.io/topic?id=12188","Show GN: VigmaRN - React Native코드를 실시간 생성하는 FIgma스타일 VSCode extension","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: VigmaRN - React Native코드를 실시간 생성하는 FIgma스타일 VSCode extension

     * Figma 스타일 GUI 에디터를 사용하면 코드가 실시간 생성됨
     * vs-code extension
     * for React Native (Expo)

   c# 스타일의 디자이너 + gpt4v인건가요!

   제가 c#과는 연이 없어서 몰랐는데 이런 게 있었군요. 안드로이드 스튜디오 정도로 생각하고 있었습니다 ㅎㅎ

   비공개 베타라고 되어있는걸 보니 아직 사용해볼 수는 없나보네요.
   아쉽습니다.

   아무튼 GPT-4 Vision이 진짜... 엄청난가봐요.
   이런 이미지 -> UI? Code? 같은 제품의 품질이 갑자기 몇 배는 올라간걸 보면...

   gpt4v는 대단한 것 같긴 해요. 이미지를 아주 자세히 읽어주는 느낌입니다. 물론 정말 보는거랑은 달리 (아마도) 한 번 이미지캡셔닝모델을 거쳐서 나오는 걸 언어모델에 넣어주는거라 았는 그대로 베끼지는 못합니다. 칼라값같은건 절대 못 가져와요 파랑이면 그냥 대충 비슷한 파랑색을 가져올 뿐..

   waitlist 남겨주시면 우선등록 해드릴게요
   gpt비용을 (키 안 받기 위해) 제가 내고 있는데 사용한도가 있어서 사용자 수를 제한중이라서요. 프로그램도 아직 안정성체크가 더 필요하기도 하고..

   앗 감사합니다. 방금 요청 제출했습니다.
   일단 체험 정도가 목적이긴 한데, 그래도 가능하면 좀 써보고 피드백 드릴 수 있도록 할게요. +_+

   넵 확인된 것 같습니다. 현재 외부라서 오후에 처리해 메일드리겠습니다. 체험도 좋죠 뭐든 감사합니다!

   안타깝게도(?) 확인하신 요청이 제가 아니였나봐요... 아니면 제가 정보를 잘못 입력했거나...

   헉 못받으셨어요? 메일 한 번 주시겠어요? kdh@n3rds.io입니다.

   신기하네요

   감사합니다!!

   https://docs.vigma.dev/
"
"https://news.hada.io/topic?id=12110","시각적 아나그램: 확산 모델을 이용한 광학 착시 현상 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    시각적 아나그램: 확산 모델을 이용한 광학 착시 현상 생성

다중 시점 시각 착각 생성: 확산 모델을 이용한 연구

     * 미시간 대학교의 Daniel Geng, Inbum Park, Andrew Owens가 확산 모델을 이용해 다중 시점의 시각 착각을 생성하는 새로운 방법을 제시함.
     * 이 방법은 이미지가 변형될 때 다른 모습이나 정체성으로 보이는 이미지를 생성하는 것으로, 회전, 뒤집기, 색상 반전, 기울기, 직소 퍼즐 재배열, 무작위 순열 등 다양한 변환을 지원함.
     * 이 연구는 이론적으로뿐만 아니라 실제 예시를 통해 방법의 유효성을 입증함.

방법론

     * 사용된 방법은 개념적으로 간단하며, 시중에 나와 있는 확산 모델을 사용하여 이미지의 다양한 뷰 또는 변환에서의 노이즈를 추정함.
     * 추정된 노이즈는 역 뷰를 적용하여 정렬되고 평균화된 후, 이 평균화된 노이즈 추정치를 사용하여 확산 단계를 진행함.

뷰에 대한 조건

     * 모든 뷰 함수가 위의 방법과 호환되는 것은 아니며, 뷰 함수는 반드시 가역적이어야 함.
     * 뷰 함수가 신호와 노이즈 사이의 가중치를 유지하려면 선형성을 가져야 하며, 이는 선형 변환을 나타내는 정사각 행렬 A를 통해 달성될 수 있음.
     * 확산 모델은 노이즈가 표준 정규 분포에서 독립적으로 동일하게 추출된다고 가정하므로, 변환된 노이즈도 이러한 통계를 따라야 함.
     * 선형 변환의 경우, 이는 A가 직교 행렬이어야 한다는 조건과 동일함.

직교 변환

     * 대부분의 직교 변환은 시각적으로 의미가 없으나, 순열 행렬은 직교 행렬의 부분 집합이며 이미지 내 픽셀의 재배열로 해석될 수 있음.
     * 이 연구에서 제시된 대부분의 착각은 픽셀의 특정 재배열, 예를 들어 회전, 뒤집기, 기울기, ""내부 회전"", 직소 퍼즐 재배열, 패치 순열 등으로 해석될 수 있음.
     * 색상 반전은 순열은 아니지만 픽셀 값의 부정으로서 직교 변환임.

GN⁺의 의견

     * 이 연구는 이미지 변환을 통해 다양한 시각 착각을 생성하는 새로운 방법을 제시함으로써, 인공 지능 기술과 예술의 경계를 확장하는 데 기여함.
     * 특히, 이미지의 픽셀을 재배열하여 다양한 시각적 효과를 만들어내는 방법은 창의적이며, 이를 통해 새로운 형태의 예술 작품 생성이 가능해질 것으로 기대됨.
     * 이 글이 흥미로운 이유는 기존의 확산 모델을 활용하여 시각 착각을 만드는 독창적인 접근 방식을 탐구했기 때문이며, 이는 초급 소프트웨어 엔지니어들에게도 새로운 영감을 줄 수 있는 연구임.

        Hacker News 의견

     * 한 사용자가 지난해 초에 비슷한 아이디어를 가지고 있었으며, 체스판 방식을 사용해 실험했다고 함. 9개의 유명 화가 스타일로 그린 고양이 그림으로 만든 하나의 고양이 이미지를 예로 듦. 이 기술이 몇 달 전 논란이 된 ""스파이럴"" ControlNet 이미지와는 관련이 없으며, DeepFloyd-IF 기반으로 만들어졌다고 언급함.
     * 다른 사용자는 남성/여성 색상 반전 이미지가 인상적이라고 평가하며, 자신은 이미지를 정신적으로 회전시켜 다른 관점을 볼 수 있지만 색상 반전은 어렵다고 느낌.
     * 또 다른 사용자는 남성/여성 반전 이미지를 매우 좋아하며, 같은 기술을 확장하여 한 이미지에서 얼마나 많은 순열을 생성할 수 있는지 궁금해함. 두 직교 변환을 연속으로 적용하면 여전히 직교 변환이 될지에 대한 수학적 이해가 부족함.
     * 한 사용자는 제시된 모든 예시가 ""그럭저럭""이라고 평가하면서 펭귄/기린 이미지가 아마도 가장 좋은 것 같다고 언급함. 노인/드레스 이미지는 둘 중 어느 것과도 잘 닮지 않았다고 느낌.
     * 신경망을 사용하는 것은 이 작업에 있어 과잉일 수도 있고, 광학 착시에 대한 이론적 이해의 대체재로는 최적이 아닐 수 있지만 결과에는 논쟁의 여지가 없다고 생각하는 사용자도 있음.
     * 이러한 이미지들을 즐기는 사용자도 있으며, 훌륭한 게시물이라고 평가함.
     * 빨간색/파란색 빛 아래에서 다른 것처럼 보이는 이미지를 만드는 것이 멋질 것이라는 아이디어를 제시하는 사용자도 있음.
     * 오리/토끼 이미지가 슬라이딩 퍼즐에 사용되어 두 가지 유효한 해결책을 제공하는 것이 정말 멋질 것이라는 의견을 내놓은 사용자도 있음.
     * 실제로 구매할 수 있는 이와 같은 직소 퍼즐이 존재하는지 궁금해하는 사용자도 있음.
"
"https://news.hada.io/topic?id=12141","HN에 묻다: 이번 휴일에 도움이 필요한 사람은 누구인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN에 묻다: 이번 휴일에 도움이 필요한 사람은 누구인가?

커뮤니티 지원 제공

     * 작년에 HN 커뮤니티에 지원을 제공하는 스레드가 놀라운 반응을 얻음.
     * 작년에 커뮤니티 멤버들에게 거의 $20k 상당의 지원을 제공함.
     * 올해는 더 많은 사람들이 도움을 요청할 수 있도록 더 많은 시간을 제공하고자 함.

기부 요청 아님

     * 기부를 요청하는 것이 아니며, 작년과 올해 모두 개인 자금으로 운영할 예정임.
     * 금전적 필요와 그 목적을 알려주면 더 많은 사람들을 도울 수 있음.

지원 가능한 요청

     * 휴일 숙박
     * 가족을 위한 장난감/선물
     * 음식
     * 여행 지원
     * 의료비
     * 가족을 위한 엔터테인먼트

개인 정보 보호

     * 도움을 요청하기 어려울 수 있으나, 대부분 이메일을 통해 요청하고 개인 정보는 비밀로 유지됨.

질문 환영

     * 커뮤니티와 잠재적 수혜자들의 질문에 이 스레드를 사용할 수 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 커뮤니티 멤버들이 서로를 지원하고 도울 수 있는 기회의 제공임.
     * 이 글이 흥미로운 이유는 개인의 어려움을 공유하고, 그것을 극복하기 위해 서로 돕는 긍정적인 커뮤니티 문화를 보여주기 때문임.

        Hacker News 의견

     * 한 해커뉴스의 오랜 회원이 필리핀에서 어려운 상황에 처해 있음
          + 원래 웹 개발자로 활동했으나 현재 수입이나 고용 없이 가족과 함께 필리핀에 머무르고 있음
          + 크리스마스를 앞두고 식량과 자금이 바닥난 상황
          + 미국으로의 이민 서류 작업이 예상보다 오래 걸리고 있음
          + 원격 근무를 하다가 회사가 매각되어 해고됨
          + 원격으로 가능한 엔트리 레벨의 백엔드 또는 프론트엔드 역할을 찾고 있으며, 파이썬과 HTML/CSS/JavaScript 경험 있음
          + 이력서를 보내고 인터뷰를 진행했지만 아직 긍정적인 반응이 없음
          + 가족과 함께 파산 위기에 처해 있으며, 어떤 도움이든 감사할 것임
     * 우크라이나 키예프에서 온 인사
          + 여전히 전쟁 중이지만 작년보다 상황이 나아짐
          + 11월은 운명을 기다리는 지루한 달이었으나 12월이 얼마나 위험할지 예측할 수 없음
          + 전기 엔지니어이자 프로그래머로, 다른 사람들이 따뜻하고 안전하게 느낄 수 있는 방법에 대한 아이디어를 요청함
     * OP에게 감사 인사를 전하는 댓글
          + 10년간의 구금 후 보석금을 내지 못해 노숙자가 됨
          + 인터넷 접근이 가능하고 살아있는 것에 감사하며, SaaS 구독 쿠폰을 받을 수 있다면 감사할 것임
     * 일자리를 찾고 있으나 성공하지 못한 상황을 공유하는 댓글
          + 수많은 지원서를 보냈지만 거절당함
          + 임대료가 밀려 있고 인터넷이 끊겨 일자리 찾기가 어려움
          + 친구와 가족의 도움을 받고 있으나 한계가 있음
     * Sheltersuit Foundation에 대한 정보를 공유하는 댓글
          + 노숙자를 위한 적절한 침낭을 만들고 기부를 통해 필요한 사람들에게 제공함
          + 네덜란드 사람들이 노숙자를 위한 자금을 모으기 위해 밤새 야외에서 잠을 잤음
     * 기술적 토론을 통해 ""업스킬""을 돕고자 하는 댓글
          + 지난 3-4년간 수백 명의 후보자를 인터뷰한 경험이 있음
          + 기술적인 책을 쓰고 있으나 이는 책 홍보가 아님
     * 음악가 친구들을 돕기 위한 비영리 음악 판매점 프로젝트를 진행 중인 댓글
          + 첫 $1000/월 수익에 대해 플랫폼 수수료를 받지 않을 예정
          + 프로젝트를 지속하기 위해 부업을 찾고 있으며 도움이 필요함
     * 긴급 상황에 처해 있으나 도움을 요청하기 어려워하는 댓글
          + 몇 달 동안 발을 구르고 있으며, 가족과 함께 시간을 보내기 위해 노력 중임
          + 크리스마스 여행과 결혼 10주년 등 중요한 날짜들을 놓치고 있음
     * 어려운 상황에 처해 있지만 희망을 잃지 않은 댓글
          + 매달 어려움을 겪고 있으나 여전히 희망이 있음
          + 투자 포트폴리오를 검토하고 다른 사람들에게 도움이 되는 방향으로 조정할 것을 요청함
     * 가족을 돕기 위해 치과 치료를 미루고 있는 댓글
          + 프로그래밍이 아닌 일을 하며 낮은 임금을 받고 있음
          + 1월에 수술을 앞당길 수 있는 금전적 도움을 요청함
"
"https://news.hada.io/topic?id=12196","iMessage 설명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              iMessage 설명

iMessage의 내부 구조 설명

     * iMessage의 내부 구조에 대한 개괄적인 개요 제공
     * pypush 프로젝트를 통해 발견한 내용을 바탕으로 기술적 세부사항은 간략화하여 설명
     * pypush는 iMessage를 재구현하는 오픈 소스 프로젝트로, 자세한 구현은 해당 저장소에서 확인 가능

기본 계층 (Foundational Layer)

     * Apple Push Notification Service(APNs)는 iMessage의 핵심 구성 요소로, 앱이 닫혀 있을 때도 실시간 알림과 업데이트를 받는 데 사용됨
     * APNs는 양방향 서비스로, 푸시 알림을 보내고 받는 데 모두 사용됨
     * 장치가 APNs에 연결되면 특정 장치로 알림을 라우팅하는 데 사용되는 ""푸시 토큰""을 받음
     * 알림을 보낼 때는 메시지의 주제 를 명시해야 하며, iMessage의 경우 com.apple.madrid임
     * APNs는 메시지 전송 외에도 IDS를 통해 쿼리를 보내고 APNs를 통해 응답을 받는 데 사용됨
     * APNs에 연결하려면 Albert 활성화 서버에서 발급한 클라이언트 인증서가 필요함

키 서버 (Keyserver)

     * IDS(IDentity Services로 추정)는 iMessage와 FaceTime 등의 서비스를 위한 키 서버로 사용됨
     * iMessage는 E2E 암호화되므로 참가자 간에 공개 키를 안전하게 교환해야 함
     * IDS에 등록하는 첫 단계는 인증 토큰을 받는 것으로, Apple ID 사용자 이름과 비밀번호가 필요함
     * 인증 토큰을 받은 후에는 더 오래 지속되는 인증서로 즉시 교환해야 하며, 이 인증서를 통해 IDS에 등록할 수 있음
     * IDS 등록 과정에서는 공개 암호화 및 서명 키와 다양한 ""클라이언트 데이터""를 키 서버에 업로드함
     * IDS 등록 요청 시 ""검증 데이터""라는 이진 블롭이 필요하며, 이는 Apple 기기가 아닌 장치가 iMessage를 사용하지 못하도록 하는 검증 메커니즘임
     * IDS에 등록하면 ""아이덴티티 키 페어""를 받게 되며, 이를 통해 공개 키 조회를 수행할 수 있음
     * 조회 시 원하는 계정을 제공하고, 각 장치에 해당하는 ""아이덴티티"" 목록을 받게 되며, 중요한 세부 정보를 포함함

메시지 암호화

     * iMessage의 기본 설정이 완료되어 다른 사용자의 공개 키를 조회하고 자신의 키를 게시할 수 있음
     * 메시지를 받으려면 APNs 연결을 com.apple.madrid로 필터링하고 활성 상태 패킷을 보냄
     * IDS 등록에서 광고한 기능과 발신 장치의 iOS 버전에 따라, 메시지를 pair 암호화 형식 또는 새로운 pair-ec 형식으로 받을 수 있음
     * 메시지를 보낼 때는 각 수신자에게 개별적으로 메시지를 보내거나, APNs가 나눠줄 수 있는 하나의 큰 번들로 모든 수신자와 암호화된 페이로드를 묶을 수 있음
     * 메시지는 대화에 참여하는 모든 참가자에게 전달되며, 자신 계정의 다른 장치를 포함함
     * 메시지 전송 시 종종 간과되는 사항은 AES 키가 완전히 무작위가 아니라 HMAC으로 태그되어 있다는 점임

자료 및 출처

     * iMessage에 대한 이해를 돕는 많은 사람들과 이전 작업들이 있음
     * IMFreedom Knowledge Base, pushproxy, apns-dissector, QuarkSlab, Garman et al., NowSecure, Elcomsoft, open-imcore, The Apple Wiki, Mihir Bellare와 Igors Stepanovs의 연구 등이 참고됨

        Hacker News 의견

     * 애플이 iMessage를 잠그기 위해 기기 검증(증명)을 사용할 것이라는 예측이 있음. 이는 구형 기기에 대한 소프트웨어 업데이트가 필요할 것임.

     iMessage 사용을 위해 IDS 등록 요청 시 '검증 데이터'라는 이진 블롭이 필요함. 이는 애플 기기가 아닌 것들이 iMessage를 사용하지 못하도록 하는 애플의 검증 메커니즘임.
     * 애플의 이러한 행위가 유럽연합의 DSA 및 DMA 법안에 위배될 수 있는지 궁금함.
     * 기술 분야에 어떻게 진입했는지에 대한 경험을 공유하면, 기술적인 것을 배우고자 하는 학생들에게 도움이 될 것임.
     * libpurple 플러그인을 누군가 만들 계획이 있는지 궁금함.
     * 이 주제에 대한 열정을 보여주며, Hack Club에 가입할 것을 추천함.
     * iMessage가 보이지 않는 메시지와 첨부 파일을 허용하는 이유에 대한 설명을 기대했으나, 이 기능이 기기 감염에 사용되는 것을 보고 의문을 가짐.
     * iMessage 역공학 뉴스에 대한 오늘의 발전을 이끈 오픈소스 프로젝트인 pypush는 MongoDB의 Server Side Public License를 따르고 Beeper가 소유함. 이 라이브러리는 훌륭하지만, 강력한 저작권 라이선스가 사용될 수 있는 범위에 영향을 미칠 수 있음.
     * 'opertunistic'이라는 단어가 실제로 사용되는 것인지, 아니면 'referer'와 같은 오타가 세대를 거쳐 고착화된 것인지에 대한 진지한 질문이 있음.
     * 고등학생이 이런 일을 해내는 것이 놀랍다는 격려의 말이 있음.
"
"https://news.hada.io/topic?id=12104","샘 알트먼, CEO로 복귀하며 OpenAI에 새로운 초대 이사회 구성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 샘 알트먼, CEO로 복귀하며 OpenAI에 새로운 초대 이사회 구성

OpenAI의 새로운 리더십과 이사회 구성

     * OpenAI의 CEO로 Sam Altman이 복귀함.
     * CTO로는 Mira Murati가, 회장으로는 Greg Brockman이 복귀함.
     * 새로운 초기 이사회는 Bret Taylor(의장), Larry Summers, Adam D’Angelo로 구성됨.

Sam Altman의 회사에 대한 메시지

     * Sam Altman은 CEO로서 OpenAI에 복귀하며, 미래에 대한 큰 기대감을 표현함.
     * Ilya Sutskever는 이사회에서 물러나지만, OpenAI에서의 업무를 계속할 수 있는 방안을 논의 중임.
     * 회사의 리더십 팀이 회사를 잘 이끌 준비가 되어 있음을 강조하며, 팀원들과 파트너들에게 감사의 뜻을 전함.

Bret Taylor의 회사에 대한 메시지

     * OpenAI 이사회를 대표하여 Bret Taylor는 회사의 미션을 지속할 수 있도록 도운 모든 OpenAI 커뮤니티에 감사함을 표현함.
     * 이사회는 OpenAI의 기업 거버넌스를 강화하는 데 집중할 예정임.
     * ChatGPT의 인기로 인해 AI가 일상생활의 일부가 되었으며, 이사회는 OpenAI가 AI의 발전과 안전에 중요한 역할을 할 것임을 인식함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 OpenAI의 리더십 변화와 새로운 이사회 구성이며, 이는 인공지능(AI) 분야의 미래에 큰 영향을 미칠 수 있기 때문에 흥미롭다. Sam Altman의 복귀와 그의 열정적인 메시지는 OpenAI가 직면한 도전을 기회로 전환하려는 의지를 보여준다. Bret Taylor의 메시지는 회사 거버넌스 강화와 이해관계자들의 신뢰 구축에 초점을 맞추고 있어, AI의 안전하고 윤리적인 발전을 추구하는 OpenAI의 미션에 대한 공동체의 지지를 강조한다.

        Hacker News 의견

     * 샘 알트만이 해고되기 전날 밤에 한 발언과 관련된 긴장의 원인에 대해 아직 확실한 정보는 없음.

     ""샘 알트만이 해고되기 전날 밤에 한 발언이 긴장의 원인일 수 있으나, 아직 구체적인 내용은 알려지지 않음.""
     * 샘 알트만은 기술 혁신의 큰 도약에 대해 매우 흥분하며, 이는 자신의 전문적인 명예로 여겨짐.

     ""샘 알트만은 기술 혁신이 크게 도약할 것이라며, 이를 자신의 전문적인 명예로 여기는 듯함.""
     * 다음 해에 회사가 발표할 놀라운 소식에 대해, 모델의 능력이 예상치 못한 수준으로 발전할 것이라고 언급함.

     ""샘 알트만은 모델의 능력이 예상을 뛰어넘는 발전을 이룰 것이라고 예측함.""
     * 인터뷰에 대한 의견으로, 정치인들이 조사를 이용해 질문에 답하지 않는 방식과 샘 알트만이 해고된 이유에 대한 명확한 답변이 없는 것에 대해 지적함.

     ""정치인들이 질문을 회피하는 방식과 샘 알트만의 해고 이유에 대한 불명확한 답변에 대한 비판적인 의견 제시.""
     * 샘 알트만에 대한 비난이 무엇인지 여전히 불분명하며, 안전에 대한 무모한 태도가 문제였다면 해고가 옳았는지에 대한 의문 제기.

     ""샘 알트만에 대한 구체적인 비난 내용이 불분명하며, 안전에 대한 무모한 태도가 문제였다면 해고가 정당했는지 의문을 표함.""
     * 브렛 테일러가 구글에서 제품 관리자로 시작해 세일즈포스의 공동 CEO, 그리고 오픈AI 이사회 의장으로 경력이 발전한 것에 대한 관찰.

     ""브렛 테일러의 경력 발전에 대한 관심 표현: 구글 제품 관리자에서 세일즈포스 공동 CEO, 오픈AI 이사회 의장까지.""
     * 샘 알트만이 자신의 세계와 다른 세계에 살고 있다는 개인적인 의견.

     ""샘 알트만이 자신과는 다른 세계에 살고 있다고 느끼는 개인적인 의견.""
     * 일리야 사츠크버가 이사회에서 빠진 이유와 리더십 그룹에서 언급되지 않은 이유에 대한 의문.

     ""일리야 사츠크버가 이사회에서 제외된 이유와 리더십 그룹에서 언급되지 않은 이유에 대한 의문 제기.""
     * 오픈AI의 도덕적 비전과 이에 대한 다양한 수준의 신뢰성에 대한 어려움을 표현함.

     ""오픈AI의 도덕적 비전과 이에 대한 다양한 수준의 신뢰성에 대한 어려움을 표현하는 의견.""
     * 샘 알트만이 해고된 이유에 대한 추가적인 통찰력이 있는지에 대한 질문.

     ""샘 알트만이 해고된 구체적인 이유에 대한 추가적인 정보에 대한 질문.""
     * 샘 알트만에 대한 악감정이 없다는 말이 실제로는 그렇지 않을 수 있다는 의심.

     ""샘 알트만에 대한 악감정이 없다는 말에 대한 의심을 표현하는 의견.""
     * Azure에서 GPT-3.5를 사용해본 결과, OpenAI API보다 20배 빠르고 안정적이라는 경험 공유.

     ""Azure에서 GPT-3.5를 사용한 경험을 공유하며, OpenAI API보다 빠르고 안정적이라고 평가함.""
"
"https://news.hada.io/topic?id=12203","샤잠 작동 원리샤잠 작동 원리 (2022)

요약 제목: Shazam 음악 인식 기술의 원리

  Shazam이란 무엇인가?

     * Shazam은 주변에서 재생되는 음악을 식별하는 앱임.
     * 앱을 열고 음악이 재생되는 동안 몇 초간 오디오를 녹음하여 데이터베이스에서 검색함.
     * 과거에는 전화번호로 서비스를 제공했으며, 통화 품질의 한계로 인해 음악 인식이 어려운 작업이었음.

  음악 인식이 어려운 이유

     * 신호 처리에 익숙하지 않은 사람에게는 오디오 신호의 복잡성으로 인해 음악 인식이 어려운 문제임.
     * 노래의 특정 부분을 전체 트랙에서 찾는 무차별 대입 방식은 매우 느리며, 백그라운드 노이즈와 주파수 효과 등으로 인해 신호의 형태가 크게 변할 수 있음.

  시스템 개요

     * Shazam은 음악을 등록하고 인식하는 두 가지 흐름으로 나뉘며, 두 흐름 모두 스펙트로그램 계산, 스펙트로그램 내 피크 찾기, 피크 해싱 등의 공통 단계를 가짐.
     * 등록 흐름은 해시를 데이터베이스에 저장하고, 인식 흐름은 데이터베이스 내 해시와 비교하여 재생 중인 노래를 식별함.

  스펙트로그램 계산

     * 오디오의 스펙트로그램을 얻기 위해 Fourier 변환을 이해해야 함.
     * Fourier 변환은 오디오에서 존재하는 주파수를 알려주며, 이를 통해 시간에 따른 주파수 변화를 나타내는 스펙트로그램을 생성함.

  스펙트로그램

     * 스펙트로그램은 시간에 따라 변하는 주파수를 더 잘 표현하기 위해 노래를 작은 부분으로 나누고 Fourier 변환을 적용함.
     * 스펙트로그램은 시간(X축), 주파수(Y축), 강도(Z축/색상)의 3D 그래프임.

  지문 생성

     * 스펙트로그램에서 가장 큰 주파수를 나타내는 피크를 찾아 오디오의 고유 지문을 추출함.
     * 이러한 피크는 노이즈나 기타 왜곡에도 견딜 수 있어 지문 생성에 적합함.

  피크 찾기

     * 스펙트로그램의 피크는 신호에서 가장 강한 주파수를 나타내며, 오디오 지문에서 사용하기 위해 고르게 분포되어야 함.
     * 최대 필터 기법을 사용하여 스펙트로그램의 피크를 강조하고 위치를 찾음.

  해싱

     * 스펙트로그램 피크의 쌍을 만들어 해시를 생성하고, 이를 통해 고유성을 높임.
     * 해시는 두 피크의 주파수와 시간 차이를 포함하여 데이터베이스에 저장됨.

  매칭

     * 데이터베이스 내 지문 컬렉션에서 주어진 오디오 샘플과 일치하는 지문을 찾는 과정을 설명함.
     * 해시를 검색하고, 노래별로 그룹화한 다음, 해시가 일치하는지 확인하여 가장 많이 일치하는 트랙을 선택함.

  결론

     * Shazam은 노래를 등록하고 인식하기 위해 스펙트로그램 계산, 피크 추출, 해시 쌍 생성, 지문 저장 등의 과정을 거침.

  GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 Shazam이 음악을 인식하는 복잡한 과정을 이해하기 쉽게 설명하고 있다는 점임.
     * 기술적인 세부 사항을 단계별로 분해하여 초급 소프트웨어 엔지니어도 이해할 수 있도록 만들어진 점이 흥미롭고 매력적임.

        Hacker News 의견

     * Shazam의 효율적인 해시 기반 접근 방식

     2008년 Shazam이 출시될 때, 노래를 계산적으로 효율적으로 해시로 변환하는 방법을 개발하는 것이 현명한 접근이었음. 오늘날 같은 서비스를 출시한다면 기본적으로 모델을 훈련시키는 R&D 방식을 취할 것이지만, 이는 비효율적이고 비용이 많이 들 수 있음. 노래의 수가 유한하기 때문에 해시 기반 접근이 훨씬 더 성능이 좋을 수 있음.
     * Shazam의 지속적인 마법 같은 매력

     Shazam은 20년이 넘도록 마법 같은 느낌을 주는 드문 제품 중 하나로, 기술자들이 지향해야 할 대상임.
     * Shazam의 작동 원리를 설명하는 Wall Street Journal 비디오

     Wall Street Journal이 제작한 Shazam의 독특한 오디오 지문을 만드는 방법을 설명하는 아름다운 비디오가 있음.
     * Chromaprint와 AcoustID에 대한 설명

     Chromaprint는 스펙트럼의 최대값 대신 음높이 변화 패턴을 기반으로 작동하며, AcoustID라는 대규모 오픈 데이터베이스에 사용되어 MusicBrainz 녹음과 오디오 지문을 연결함. Shazam만큼 상업적 지원을 받지 않았음에도 불구하고 데이터베이스에 많은 음악이 포함되어 있어 놀라움.
     * Shazam과 디지털 신호 처리에 대한 흥미로운 글

     Shazam의 작동 방식과 디지털 신호 처리에 대한 훌륭한 입문서로, 오디오 지문 인식이 어떻게 작동하는지 이해하고자 하는 사람들에게 필독임.
     * 다른 미디어에도 적용 가능한 유사 알고리즘

     오디오 지문 인식뿐만 아니라 다른 미디어에도 적용 가능한 유사한 근사 알고리즘이 있으며, 실제 세계의 해싱을 이해하고자 하는 사람들은 이 글을 천천히 공부해야 함.
     * Every Noise At Once 웹사이트의 중요성

     Every Noise At Once는 음악 장르 분류와 새로운 노래 서명이 도입하는 분기 서브 장르에 알고리즘 매칭을 적용하는 놀라운 사이트로, 호스팅 문제로 인해 서비스가 중단될 위험이 있으며, 이는 월드 와이드 웹에 큰 손실이 될 것임.
     * 음악 인식 과정의 직관성

     이 시스템은 우리의 인식 과정과 매우 유사하게 멜로디 조각을 식별하고 이를 순서대로 매칭하는 방식으로, 우리가 몇 개의 음표를 듣고 노래를 인식하는 방식과 일치함.
     * 음악 인식에 사용되는 푸리에 변환

     음악 인식에 자주 사용되는 푸리에 변환에 대한 언급이 있으며, 이는 Echoprint라는 오픈 소스 버전에서도 사용되었지만, Spotify에 인수된 후 서비스가 중단됨.
"
"https://news.hada.io/topic?id=12208","chasquid - 간편성/보안/운영 편리성에 집중한 SMTP 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 chasquid - 간편성/보안/운영 편리성에 집중한 SMTP 서버

     * 일반적인 MTA로 동작해 이메일을 주고 받음 (Postfix/Exim 대신 사용 가능)
     * 개인 및 소규모 그룹을 위해 설계됨
     * Go 로 작성된 오픈소스 (아파치 라이센스 2.0)

기능

     * Easy
          + 설정이 쉬움
          + 유해하거나 안전하지 않은 방식으로 잘못 구성하기 어려움(예: 오픈 릴레이 또는 일반 텍스트 인증 사용 안 함)
          + 모니터링 용도의 HTTP 서버를 내장하여, 외부 변수 및 트레이싱을 통해 디버깅 가능
          + Debian, Ubuntu, Arch 와 연동
          + 인증에 Dovecot 사용 가능
     * Useful
          + 도메인별 사용자 및 Alias 가능한 멀티/가상 도메인
          + 접미사 삭제 기능 (사용자+something@도메인 → 사용자@도메인)
          + greylisting, 안티바이러스, 안티스팸, DKIM/DMARC와의 통합을 위한 Hooks 제공
          + 국제 사용자 아이디(SMTPUTF8) 및 도메인 이름(IDNA)
     * Secure
          + 도메인별 TLS 지원을 추적하여 연결 다운그레이드를 방지
          + 다중 TLS 인증서
          + Let's Encrypt 인증서와의 간편한 통합
          + SPF 및 MTA-STS 검사
"
"https://news.hada.io/topic?id=12112","(sim) 베가스 구체를 위한 셰이더 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (sim) 베가스 구체를 위한 셰이더 작성

프래그먼트 셰이더의 기본 구조와 기능

     * 프래그먼트 셰이더는 픽셀 단위의 색상을 계산하는 프로그램임.
     * uniform float time;은 시간에 따라 변하는 값을 셰이더에 전달함.
     * varying vec2 vUv;와 varying vec3 vNormal;은 각각 텍스처 좌표와 정점의 법선 벡터를 나타냄.
     * void main() 함수 내에서 gl_FragColor를 설정하여 최종 색상을 결정함.
     * vec4(0.5 + 0.5 * cos(time + vUv.xyx + vec3(0., 2., 4.)), 1.);는 시간과 텍스처 좌표에 따라 색상을 변화시키는 식임.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 프래그먼트 셰이더가 픽셀별로 색상을 어떻게 계산하는지에 대한 이해임.
     * 프로그래밍에 관심 있는 사람들에게 셰이더 프로그래밍의 기본적인 개념을 소개하는 것은 흥미롭고 매력적인 주제임.
     * 셰이더의 시각적 효과를 만드는 과정을 이해함으로써, 초급 소프트웨어 엔지니어들은 그래픽 프로그래밍에 대한 기초 지식을 쌓을 수 있음.
"
"https://news.hada.io/topic?id=12180","2023 SEO 연봉 설문조사연봉 설문조사

     * SEO(검색엔진 최적화) 담당자들의 연봉 설문 조사 결과
     * 평균 연봉 $49,211
     * 최고액 연봉 $229,652
     * 고액 연봉을 위해서는 Technical SEO 전문가가 되어야 함
          + SEO 책임자, SEO 디렉터, SEO 리더는 모두 전문 분야가 Technical SEO
     * 응답자의 5.4%만이 교육 과정을 통해 SEO를 배웠으며, 대부분은 업무 중(52.3%) 또는 독학(42.3%)으로 배움
     * 36.9%는 자신을 콘텐츠 전문가, 30.6%는 기술 전문가, 6.3%는 링크 구축 전문가라고 답함
     * 응답자의 49.5%는 SEO 에이전시, 42.3%는 사내 직원, 8.2%는 자영업자로 근무
     * 대부분의 응답자(28.8%)는 11~50명 규모의 회사에서 근무
     * 응답자의 평균 SEO 경력 6.9년
     * 자영업 SEO의 평균 연봉이 60,232달러로 가장 높았으며, 인하우스 직군의 평균 연봉은 56,789달러로 약간 낮았고, 에이전시 SEO의 평균 연봉은 44,169달러로 가장 낮았음

놀라운 점

     * 설문조사에서 기술 및 콘텐츠에 비해 링크 구축에 특화되어 있다고 답한 SEO는 거의 없었음
          + 이는 링크가 여전히 가장 중요한 Google 순위 요소 중 하나라는 사실에도 불구하고
     * SEO 디렉터와 SEO 책임자의 평균 경력은 SEO 디렉터가 10.4년, SEO 책임자가 10.6년으로 큰 차이가 없었지만, 두 역할의 연봉 차이는 약 11,552달러로 상당히 컸음
"
"https://news.hada.io/topic?id=12134","Show HN: 속도 80% 향상, 메모리 사용량 50% 감소, 정확도 손실 0%인 Llama 파인튜닝","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show HN: 속도 80% 향상, 메모리 사용량 50% 감소, 정확도 손실 0%인 Llama 파인튜닝

QLoRA 모델 튜닝의 효율성 향상

     * QLoRA/LoRA 모델은 수동으로 유도된 역전파 단계를 통해 80% 빠른 속도와 50% 적은 메모리 사용을 달성함.
     * OpenAI의 Triton 언어로 작성된 모든 커널은 정확성 손실 없이 최적화됨.
     * 하드웨어 변경 없이 NVIDIA GPU(2018년 이후 모델, CUDA 7.5+ 지원)에서 사용 가능함.
     * Flash Attention 지원과 4비트 및 16비트 LoRA 파인튜닝 지원을 통해 효율적인 모델 트레이닝 가능함.
     * Slim Orca 모델을 로컬 환경에서 1301시간에서 260시간으로 대폭 줄인 시간 안에 트레이닝할 수 있음.
     * 오픈 소스 버전은 5배 빠른 트레이닝을 제공하며, Unsloth Pro와 Max 코드 경로는 최대 30배 빠른 트레이닝을 제공함.

설치 지침

     * Unsloth는 리눅스 배포판과 Pytorch 2.1 이상 버전에서만 지원함.
     * Conda와 Pip을 통해 설치할 수 있으며, CUDA 버전에 따라 적절한 패키지를 선택하여 설치함.

Alpaca 모델 예시

     * FastLlamaModel을 사용하여 Llama 모델을 로드하고, 4비트 양자화를 통해 메모리 사용을 줄임.
     * 모델 패치와 빠른 LoRA 가중치를 추가하여 성능을 향상시킴.
     * Huggingface의 Trainer와 데이터셋 로딩을 사용하여 모델 트레이닝 가능함.

미래의 목표와 한계

     * 메모리 사용을 25% 추가로 줄일 수 있는 sqrt 그래디언트 체크포인팅 지원 예정.
     * 현재는 Llama 모델만 지원하지만, 향후 다른 모델들도 지원할 계획임.

성능 비교

     * Tesla T4 GPU를 사용한 경우, Unsloth는 Huggingface에 비해 훨씬 빠른 에포크 시간과 낮은 메모리 사용을 보임.
     * 단일 GPU와 다중 GPU 시스템 모두에서 Unsloth의 Pro와 Max 버전이 더 높은 성능을 제공함.

문제 해결

     * bitsandbytes 또는 xformers가 제대로 연결되지 않을 때 해결 방법 제공.
     * 현재 Windows는 지원되지 않으며, Xformers와 Triton이 Windows를 공식 지원하게 되면 Unsloth도 지원할 예정임.
     * 설치에 문제가 있을 경우, pip을 업데이트하는 것이 해결책이 될 수 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 QLoRA/LoRA 모델의 튜닝이 기존 방법보다 훨씬 빠르고 메모리 효율성이 높다는 것이다. 이러한 최적화는 인공지능 모델의 트레이닝 시간과 비용을 대폭 줄여주므로, 초급 소프트웨어 엔지니어들에게도 매력적인 솔루션이 될 수 있다. 또한, 이 기사는 오픈 소스 기술의 발전과 그것이 어떻게 기술의 접근성을 높이는지에 대한 흥미로운 사례를 제공한다.
"
"https://news.hada.io/topic?id=12144","Ask GN: 이달의 구직 - 같이 일할 팀을 찾습니다 (2023년 12월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 이달의 구직 - 같이 일할 팀을 찾습니다 (2023년 12월)

   일할 곳을 찾고 계시다면, 간단히 정보를 남겨 주세요.

     지역 :
     리모트 필요 :
     기술 :
     이력서 :
     이메일 :

   위 정보는 구인을 위해서만 이용해 주세요

   ~~

   혹시나 봇들이 이메일 주소를 크롤링하는 경우가 있을 수 있으니 '[at]' 이나 '[앳]' 등을 써서 이메일 주소를 난독화 해주셔도 좋습니다.
   가능하면 자신의 깃헙/링크드인 URL을 남겨 주세요.
   HN의 Who wants to be hired 를 참고 했습니다.
"
"https://news.hada.io/topic?id=12207","구글, AI 모델 Gemini 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글, AI 모델 Gemini 공개

     * MMLU에서 90%를 받아 인간 전문가를 능가한 최초의 AI 모델 Gemini(제미나이)
     * 멀티모달 AI 모델로 이미지/비디오/오디오 다중 모드 벤치마크에서도 GPT-4V 와 Whisper 를 능가
     * 3가지 모델로 크기에 따른 최적화
          + Ultra : 복잡한 작업을 위한 가장 크고 뛰어난 모델
          + Pro : 광범위한 작업에 걸쳐 확장 가능
          + Nano : 온디바이스 작업을 위한 가장 효율적인 모델
     * Python, Java, C++, Go 등 세계에서 가장 널리 사용되는 프로그래밍 언어로 고품질 코드를 이해하고 설명하며 생성
     * Gemini 를 이용한 Competitive Programming용 AlphaCode 2도 출시
     * TPU v4 및 v5e를 사용하여 AI에 최적화된 인프라에서 Gemini 1.0을 대규모로 교육
          + 더욱 안정적이고 확장 가능하며 효율적
     * Responsibility 와 Safety에 중점을 둠
          + 포괄적인 안전성 평가를 수행
     * Gemini Pro 는 Google Bard에서 바로 사용 가능
          + 영어로 170개국에서 사용가능하며, 다른 모달리티와 새로운 언어를 곧 지원 예정
     * Gemini Nano 를 Pixel 8 Pro에 도입할 것
     * 몇달내로 검색, 광고, 크롬 및 Duet AI에도 Gemini를 적용할 것
     * 12월 13일 부터 개발자와 기업고객들은 Google AI Studio 및 Google Cloud Vertex AI를 통해서 Gemini API 이용가능(Pro만)
     * Gemini Ultra 도 곧 사용 가능
          + 신뢰할 수 있는 외부 기관의 레드팀 검증을 포함한 광범위한 신뢰 및 안전 점검을 완료하고 있으며, 광범위한 공개를 앞두고 미세 조정과 사람 피드백을 통한 강화 학습(RLHF)을 통해 모델을 더욱 정교하게 다듬는 중
          + 일부 고객, 개발자, 파트너, 안전 및 책임 전문가에게 Gemini Ultra를 제공하여 초기 실험과 피드백을 받은 후 내년 초에 개발자와 기업 고객에게 공개할 예정
          + 내년 초에는 Gemini Ultra를 시작으로 최고의 모델과 기능을 이용할 수 있는 새로운 최첨단 AI 환경인 바드 어드밴스드(Bard Advanced)도 출시할 예정

   영상 보고 '바드가 그렇게 별로인데 그걸 벌써 다 뛰어넘었다고?' 라고 생각했는데요.

   연출된 영상이라고 하네요. 이러면 사기 아닌가요..
   https://www.tomshardware.com/news/google-gemini-ai-video-staged

   그런 트윗이 기억나네요, '혹자는 구글이 AI에서 뒤쳐지고 있다고 생각하지만, 그들은 그들만의 another level에 있는거야'.

   오늘 구글 주식 많이 올랐네요.

   nano는 Pixel 8 Pro에서 사용가능하다고 합니다.... 만
   https://blog.google/products/pixel/pixel-feature-drop-december-2023/

   적용범위에는 한국어가 지원안되는 Voice Recorder와 beta 에 별도로 opt-in 해야하는 gboard 밖에 없네요.

   그래서 한국엔 Pixel 안 파는거 아닌가요..? ㅎㅎ
   저 픽셀 1 아직 가지고 있는데 ㅠ

   드디어 나왔네요. 구글 제품에 전반적으로 적용 되면 어떤 모습일지 기대되네요

   가장 흥미로운 영상은 Hands-on with Gemini: Interacting with multimodal AI 입니다.
   6분 정도니까 꼭 한번 보시기 바랍니다. 멀티모달 AI가 발전하면 우리가 영화에서 보던 자비스가 실현되겠네요.

   GPT-4 Vision도 놀라웠는데, 진짜 자비스의 시대가 올 것 같네요... +_+
"
"https://news.hada.io/topic?id=12217","MLX - 애플 실리콘을 위한 Numpy와 비슷한 어레이 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 MLX - 애플 실리콘을 위한 Numpy와 비슷한 어레이 프레임워크

     * 애플 머신러닝 연구팀에서 제작한, 애플 실리콘에서 효율적이고 유연한 머신러닝 수행을 위해 설계된 어레이 프레임워크
     * Numpy 와 거의 유사한 Python API를 제공하며, 모든 기능을 같이 제공하는 C++ API도 있음
     * Numpy와의 차이점
          + Composable function transformations: MLX에는 자동 미분, 자동 벡터화, 계산 그래프 최적화를 위한 구성 가능한 함수 변환이 있음
          + Lazy Computation: MLX의 계산은 Lazy함. 배열은 필요할 때만 구체화(Materialize)됨
          + 멀티 디바이스: 지원되는 모든 장치(CPU, GPU, ...)에서 연산을 실행할 수 있음
     * 동적 그래프 구성: MLX의 계산 그래프는 동적으로 구축됨. 함수 인수의 모양을 변경해도 컴파일 속도가 느려지지 않으며, 디버깅이 간단하고 직관적
     * PyTorch, Jax, ArrayFire 같은 프레임워크에서 영감을 받음
          + 이러한 프레임워크와 MLX의 눈에 띄는 차이점은 Unified Memory Model
          + MLX의 어레이는 공유 메모리에 저장됨. MLX 배열에 대한 작업은 데이터 복사를 수행하지 않고도 지원되는 모든 장치 유형에서 수행할 수 있음
          + 현재 지원되는 장치 유형은 CPU와 GPU
     * 다양한 예제 포함
          + Transformer 언어 모델 학습
          + LLaMA 로 대규모 텍스트 생성 및 LoRA로 파인튜닝
          + Stable Diffusion으로 이미지 생성하기
          + OpenAI's Whisper로 음성 인식하기

     동적 그래프 구성: MLX의 계산 그래프는 동적으로 구축됨. 함수 인수의 모양을 변경해도 컴파일 속도가 느려지지 않으며, 디버깅이 간단하고 직관적

   이게 진짜 좋아보이네요. Dynamic한 데이터를 많이 다뤄서 jax 쓸때 항상 힘들었는데...

   오, 이거 좋네요. 한 번 써보겠습니다.
"
"https://news.hada.io/topic?id=12195","Show HN: 컴퓨터가 내 서버에 어떻게 도달했나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show HN: 컴퓨터가 내 서버에 어떻게 도달했나?

요약 제목: 인터넷 패킷의 여정과 BGP 프로토콜의 역할

     * 인터넷을 통해 데이터가 어떻게 전송되는지를 추적하는 'traceroute' 기능을 설명하는 기사.
     * 사용자의 컴퓨터에서 시작하여 라우터, ISP, 그리고 최종 목적지 서버까지 패킷이 이동하는 과정을 담은 내용.
     * 'ktr'이라는 실시간으로 결과를 스트리밍하는 traceroute 프로그램을 사용하여 각 단계에서 패킷이 거치는 서버를 추적.

인터넷 패킷의 여정

     * 사용자의 컴퓨터가 라우터와 통신을 시작하며, 이 라우터는 ISP의 네트워크로의 진입점임.
     * Linode의 네트워크를 거쳐 최종적으로 서버에 도달하는 과정이 traceroute를 통해 추적됨.

웹사이트의 프론트엔드

     * 자바스크립트 비활성화 상태에서도 웹사이트가 정상 작동함.
     * 서버가 HTTP 요청을 받고 traceroute를 시작하여, 결과가 나올 때마다 웹 페이지에 실시간으로 표시됨.

패킷 경로의 역추적

     * 실제로는 서버에서 사용자 컴퓨터로의 traceroute를 실행하고 그 경로를 역으로 추적함.
     * 실제 인터넷 라우팅에서는 패킷이 다른 경로를 거칠 수 있으나, 대체로 비슷한 경로를 따름.

네트워크의 정의

     * 각 네트워크는 자율 시스템(AS)으로 불리며, 서로 연결된 라우터와 서버의 집합임.
     * AS 소유자들은 다른 AS와의 연결을 통해 인터넷의 구조를 결정함.
     * 인터넷은 기업 소유의 네트워크들이 금융 거래와 관료주의에 의해 연결되어 있는 구조임.

WHOIS 정보

     * WHOIS 프로토콜을 사용하여 각 IP 주소가 속한 자율 시스템(AS)의 소유 정보를 조회함.
     * WHOIS 서버 관리자가 만든 구조를 따라 다양한 서버에서 정보를 제공함.

BGP 프로토콜

     * BGP(Border Gateway Protocol)는 AS 간의 경계 라우터가 패킷을 다음 네트워크로 전송할 때 사용하는 프로토콜임.
     * BGP는 인터넷의 형태를 결정하며, 각 AS의 라우터는 BGP를 통해 라우팅 테이블을 공유함.

역사적 배경

     * 인터넷의 초기 형태인 ARPANET의 시작부터 BGP 프로토콜의 발전까지의 역사를 설명함.
     * BGP v4는 현재까지 사용되는 인터넷 라우팅의 주요 프로토콜임.

GN⁺의 의견

   이 기사에서 가장 중요한 부분은 인터넷 상에서 데이터 패킷이 어떻게 여정을 거치는지를 실시간으로 추적할 수 있는 'traceroute' 기능과 그 과정에서 핵심적인 역할을 하는 BGP 프로토콜에 대한 설명임. 이 기사는 초급 소프트웨어 엔지니어에게 인터넷의 복잡한 구조를 이해하는 데 도움을 주며, 인터넷이 단순한 기술적 구조가 아니라 다양한 기업과 정책이 얽혀 있는 복잡한 생태계임을 보여줌으로써 흥미를 유발함.

        Hacker News 의견

     * Lexi, 17세의 젊은 개발자, 컴퓨터 작동 원리에 대한 깊은 이해와 새로운 방식의 시각화에 관심.
          + cpu.land 발표 후, 다음 큰 프로젝트에 대한 압박감을 느낌.
          + 개인 프로젝트를 하며 인터넷 작동 원리를 우연히 학습, 웹사이트로 실시간 스트리밍이 가능한 traceroute 프로그램 개발.
          + 인터넷 구조 시각화에 대한 새롭고 흥미로운 방법으로 인식, 사이트를 멋지게 다듬고 관련 지식을 공유하는 기사와 결합.
          + 코드가 언젠가는 깨질 것이라고 예상하며, 제안이 있으면 알려달라고 요청.
          + Rust를 선택한 이유는 빠르고 신뢰할 수 있는 저수준 프로그램 작성과 Rust의 오류 처리 기능 때문.
     * BGP는 인터넷의 형태를 결정하는 프로토콜이며, 개인이 직접 사용할 수 없음.
          + ASN을 취득하고 BGP를 사용하는 것이 의외로 쉬움, 관심이 있다면 시도해볼 것을 권장.
     * 서버가 사용자의 컴퓨터에 도달하는 방식의 역순을 나타내는 것이며, 각 방향의 라우팅은 대부분 매우 다름.
     * traceroute의 작동 방식에 대한 논문 추천, traceroute가 대칭적이지 않을 수 있다는 점을 많은 사람들이 간과함.
     * WHOIS 프로토콜 파서 개발은 사실상 불가능, 응답 형식이 자유로움.
          + 과거에는 대부분의 주소/도메인에 대해 임시 파서를 만들 수 있었으나, 현재는 개인정보 보호 방패 뒤에 숨겨져 있음.
          + ICANN이 공개 WHOIS 서버 제공 규칙을 시행하지 않고 폐지함.
     * ICMP ECHO 추적 대신 클라이언트 브라우저와 웹 서버 간의 기존 HTTP TCP 연결을 사용하여 클라이언트 측 NAT 및/또는 상태 유지 방화벽을 통과할 수 있음.
     * 역방향 traceroute에 대한 이전 연구 소개.
     * TCP 세션의 패킷이 인터넷을 통해 비대칭 경로를 사용하는 경우가 많음, 이는 비용과 인간의 오류와 관련된 비즈니스 규칙 때문임.
     * traceroute보다 더 자주 사용하는 mtr에 대한 언급, 간헐적인 패킷 손실 진단과 평균적인 흐름 이해에 도움.
          + MPLS가 실제 경로를 숨길 수 있다는 점과 UDP 추적의 유용성, 많은 라우터가 부하 상태에서 ICMP를 선택적으로 드롭한다는 점도 언급.
     * Lexi는 TCP/IP와 OSI 모델의 모든 7계층에 대한 깊은 이해뿐만 아니라 프론트엔드 및 백엔드 개발, 임베디드 하드웨어, 모바일 앱, 컴파일러에도 능숙함.
          + 또한 암벽 등반, 세스나 조종, 로봇 제작, 첼로 연주 및 작곡 등 다양한 분야에서 뛰어난 재능을 보유.
"
"https://news.hada.io/topic?id=12148","NSA, 위치 및 브라우징 데이터 구매에 관한 질문에 답변할 때까지 새로운 수장 선임 안 해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          NSA, 위치 및 브라우징 데이터 구매에 관한 질문에 답변할 때까지 새로운 수장 선임 안 해

공공 부문: NSA 새 수장 임명 보류

     * 미국 상원의원 론 와이든이 NSA의 위치 및 브라우징 데이터 구매에 대한 질문에 답변을 받을 때까지 새 NSA 국장의 임명을 막음.
     * 와이든은 미국인들이 영장 없이 국내에서 감시를 받고 있는지에 대한 정보를 알 권리가 있다고 주장함.
     * 현재 미국 의회는 외국 정보 감시법(FISA) 제702조의 연장을 논의 중이며, 이에 대한 공개적인 토론이 필요함.

데이터 중개업체의 역할

     * 데이터 중개업체들은 앱 등에서 개인 정보를 수집하여 판매하고 있으며, 미국 정부 기관들은 영장 없이 이 정보를 구매할 수 있음.
     * 와이든은 국방정보국(DIA)이 미국 시민의 위치 데이터를 구매하고 있다는 사실을 공개하고, 다른 군사 기관들에 대한 정보도 요구함.
     * 와이든은 이러한 정보가 ""통제되지 않은 비밀정보(CUI)""로 분류되어 공개할 수 없다고 지적함.

NSA 국장 임명 보류

     * 와이든은 NSA가 영장 없이 시민들의 위치 데이터나 브라우징 기록을 구매하는지에 대한 답변을 요구하며, 티모시 하우 중장의 NSA 국장 임명을 보류함.
     * 이 조치는 NSA가 와이든의 요청을 만족시키거나, 의회가 절차적 투표를 통해 임명을 강행할 필요가 있음을 의미함.
     * 와이든은 하우의 승진과 NSA 국장으로의 지명에 개인적인 이의가 아니라, 정부의 투명성을 요구하는 것임을 명확히 함.

FISA 제702조의 미래

     * 미국 의회는 FISA 제702조의 미래를 논의 중이며, 이 조항은 올해 말 만료될 예정임.
     * 제702조는 특정 상황에서 정부 기관이 영장 없이 미국인의 사적인 통신을 분석할 수 있게 함.
     * 의회는 이 조항을 갱신할 가능성이 높지만, 추가적인 보호 조치를 원하는 의원들도 많음.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 미국 상원의원 론 와이든이 NSA의 국내 감시 활동에 대한 투명성을 요구하며 새 NSA 국장의 임명을 보류한 사실입니다. 이는 미국 내에서 개인 정보 보호와 정부의 감시 권한 사이의 균형을 찾으려는 지속적인 노력의 일환으로 볼 수 있습니다. 사람들에게 흥미로운 점은 이러한 논의가 미국인들의 사생활 보호와 관련된 법적 및 윤리적 문제에 대한 국가적인 대화를 촉진할 수 있다는 것입니다.

        Hacker News 의견

     * CUI(관리되어야 할 민감한 정보)는 기밀 정보는 아니지만 접근 제어를 통해 보호되어야 하며, 널리 공유되어서는 안 됨. 오바마 대통령이 2010년에 행정 명령으로 CUI를 창설했으며, Wyden 상원의원은 이러한 라벨링을 법적 근거가 없는 만들어진 지정이라고 비판함.
          + 기밀 문서에는 의무적인 해제 날짜가 있지만, CUI는 분류 체계 밖에 있어서 무기한 지속될 수 있는, 법적 구조를 벗어난 구조임.
     * Wyden 상원의원의 요청에 대해 NSA는 만족스러운 답변을 제공하거나, 의회는 절차 투표를 통해 인증을 밀어붙일 필요가 있음.
          + 이로 인해 몇 주간 과정이 지연될 가능성이 높지만, 의회가 결국 인증을 강행할 것으로 보임. 이는 전체 상황에 대해 약간의 빛을 비추는 효과가 있음. 미국 시민이 아닌 사람에게는 큰 차이가 없지만, 개인 데이터를 수집하고 판매하는 민간 기업을 중단하는 것이 가장 좋고 쉬운 해결책일 수 있음.
     * 수집 및 판매되는 정보의 종류를 명시적으로 다루는 법률을 제정하여, 영장 없이 누구와도 공유하는 것을 불법으로 규정할 것을 제안함.
     * NSA가 위치 데이터를 구매해야 한다면, 이는 그들이 휴대폰 운영자로부터 직접 데이터를 얻을 수 없다는 것을 의미하는지에 대한 의문 제기.
     * Wyden 상원의원을 대통령으로 지지하는 의견 표현.
     * Strava 데이터를 통한 군사 시설 매핑 등과 같은 사건들이 미국에서 개인 정보에 대한 심각한 논의로 이어지지 않는 것에 대한 놀라움 표현. 정부가 이러한 상업적 데이터베이스의 존재를 왜 허용하는지에 대한 의문 제기.
     * 오리건주에서 나온 최고의 정치인으로 Wyden 상원의원을 칭찬하는 의견.
     * Wyden 상원의원이 훌륭하고 그의 목표를 대체로 지지하지만, 구체적인 내용에 동의할 수 없음. 기사에 제시된 주장은 정부가 개인 데이터를 구매함으로써 불합리한 수색을 하고 있는 것이 헌법 제4조 위반이라는 것임.
          + 그러나 이는 말도 안 되는 주장으로, ""공개 시장에서 합법적으로 구매 가능한"" 것보다 더 적절한 ""합리적"" 정의가 있을 수 없음. 이러한 데이터 판매를 원하지 않는다면 법을 제정하고 시장에서 제거해야 함.
     * 상원의원이 이미 답을 알고 있지만 공개하고자 하는 것처럼 보임. 답이 ""아니오""라면 이를 밀어붙이지 않을 것이므로, 당연히 그들이 미국 시민의 데이터를 대량으로, 영장 없이 구매하고 있다는 것이 답임.
"
"https://news.hada.io/topic?id=12202","Beeper Mini - 안드로이드용 iMessage 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Beeper Mini - 안드로이드용 iMessage 클라이언트

     * 안드로이드에서 동작하는 iMessage 클라이언트인 Beeper Mini 공개.
     * Apple 계정 없이 안드로이드에서 본인의 휴대전화로 iMessage의 모든 기능 이용 가능.
          + 안드로이드 앱 내부에서 Apple 서버와 직접 통신하여 전화번호를 등록하고 iMessage를 수신 및 발신함.
          + 단 앱이 꺼져있는 동안에도 푸쉬 알림을 받기 위해서 Beeper 서버가 대신 푸쉬 알림을 구독하고 FCM을 통해 앱으로 전달해 줌.
               o 구독 키와 암호화 키를 분리하여 구독은 서버가 진행하지만, 해독은 기기에서만 가능.
          + iMessage가 제공하는 종단간 암호화 또한 동일하게 지원.
     * Python으로 작성된 iMessage를 구동하는 개념 증명도 같이 공개함.
     * Beeper Mini는 유료 앱으로 7일 체험판이 있으며, 이후 가격은 월 1.99 달러.
     * 앞으로 SMS/RCS를 포함한 각종 앱의 모든 채팅 기능을 하나로 통합하기 위해 노력할 것이라고 밝힘.

   https://news.hada.io/topic?id=12189

   아 제가 단순히 놓친거였군요. 중복이네요. ㅠㅠ
     * HN 스레드

   Apple이 냅둘지 모르겠지만, 굉장히 신기하네요. +_+
"
"https://news.hada.io/topic?id=12158","OpenAI, 샘 알트먼이 투자한 스타트업으로부터 5100만 달러 규모의 AI 칩을 구입하기로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI, 샘 알트먼이 투자한 스타트업으로부터 5100만 달러 규모의 AI 칩을 구입하기로

OpenAI와 Rain AI의 계약

     * OpenAI가 뇌에서 영감을 받은 칩을 개발하는 스타트업 Rain AI에 5100만 달러를 투자하기로 한 의향서에 서명함.
     * OpenAI의 CEO인 Sam Altman은 Rain AI에 개인적으로 투자한 바 있음.
     * Rain AI는 인간의 뇌 기능을 모방한 neuromorphic processing unit(NPU)을 개발 중이며, OpenAI는 이 칩이 시장에 나오면 구매하기로 2019년 비공식적으로 합의함.

Sam Altman의 투자 및 OpenAI의 칩 수요

     * Sam Altman은 OpenAI의 CEO로서 개인적인 투자가 회사의 의사결정과 얽힐 수 있는 복잡한 상황에 놓임.
     * OpenAI는 AI 프로젝트를 지원하기 위해 필요한 칩을 확보하기 위해 큰 금액을 지출할 의사가 있음을 보여줌.
     * Altman은 AI 칩의 부족과 높은 비용에 대해 공개적으로 불만을 표시했으며, 새로운 칩 디자인과 공급망이 AI 발전의 속도에 영향을 줄 수 있다고 언급함.

Rain AI의 기술 및 시장 전망

     * Rain AI는 자사의 NPUs가 기존의 GPU보다 훨씬 더 높은 컴퓨팅 파워와 에너지 효율성을 제공할 것이라고 주장함.
     * Rain AI는 약 40명의 직원을 두고 있으며, AI 알고리즘 개발과 전통적인 칩 설계 분야의 전문가들로 구성됨.
     * 회사는 최근 CEO 교체를 진행했으며, 새로운 CEO로 승진한 William Passo가 이끌고 있음.

Rain AI의 투자 및 안보 우려

     * Rain AI는 지난해 Prosperity7 Ventures가 주도한 투자 라운드를 통해 총 3300만 달러의 자금을 확보함.
     * 미국의 외국인투자심의위원회(CFIUS)는 국가 안보 위험을 이유로 Prosperity7 Ventures가 Rain AI의 지분을 매각하도록 요구함.
     * 이러한 결정은 Rain AI의 독창적인 칩 기술을 시장에 출시하는 데 지연을 초래할 수 있음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 OpenAI가 AI 칩 공급을 확보하기 위해 스타트업 Rain AI에 대규모 투자를 결정했다는 것이다. 이는 AI 기술의 발전과 관련하여 하드웨어의 중요성을 강조하며, 특히 OpenAI와 같은 선도적인 기업이 새로운 칩 기술에 대한 투자를 통해 기존의 하드웨어 제약을 극복하려는 노력을 보여준다. 이러한 투자 결정은 AI 분야의 미래 발전에 중대한 영향을 미칠 수 있으며, 이는 기술에 관심 있는 사람들에게 매우 흥미로운 소식이다.

   알트맨이 OpenAI 주식이 한주도 없다는데에서 매우 의아했었는데, 알트만은 AI 자체에 더 큰 베팅을 하고 있었군요.

   잘 발전해서 엔비디아 말고도 방법이 생겼으면 좋겠네요.

        Hacker News 의견

     * 2018년 비구속 의향서는 극단적인 혁신 프로젝트에 투자할 때 감수하는 제한된 손실과 무한한 이득의 리스크임. 붐 슈퍼소닉이 유나이티드 항공과 비슷한 접근법을 사용하여 아직 개발되지 않은 초음속 비행기에 자금을 조달함. 100만 달러 투자는 알트만의 개인 자금에 한정된 손실을 가지며, 창업자들에게 성공을 위한 동기를 부여하는 무한한 이득을 가짐. 투자 가치는 알트만에게는 종이상 제로이지만, 당시 우주 분야에서 가장 유망한 것으로 보였던 창업자들에게는 자금 조달, 채용, 미래 판매에 대한 신뢰성에 큰 도움을 줌. OpenAI는 기준을 충족하지 않는 한 칩을 구매할 필요가 없음. 2018년 OpenAI는 해결 불가능해 보이는 문제를 해결하려는 많은 스타트업 중 하나였음.
     * 알트만이 해임된 이유 중 하나는 이사회가 그의 정직성에 대한 신뢰를 잃었기 때문임. 많은 작은 일들이 쌓여서 발생한 것으로, 알트만은 조사가 진행되는 조건으로 복귀함.
     * OpenAI의 거래에 대해 회의적인 사람들도 있지만, 칩 스타트업에 대한 100만 달러 투자는 알트만이 주요 소유주라고 보기 어려움. 해당 스타트업은 지금까지 3300만 달러를 모금했으며, 알트만이 5% 이상을 소유하고 있을 것이라고 생각하기 어려움. 이는 부유한 천사 투자자가 자신의 관심사와 관련된 스타트업에 기대하는 투자 유형으로 보임.
     * 최근 OpenAI 내부의 권력 투쟁이 이해 상충 문제에 관한 것이었다는 의심과 토론이 많았기 때문에, 이 거래가 2019년으로 거슬러 올라가는 것은 불행하지만 놀랍지 않음. 이는 OpenAI에서 일어나고 있는 일에 대한 논란에 더 많은 기름을 부을 수 있음.
     * 만약 기사가 사실에 기반한다면, 이는 부패의 한 예가 아닌가 하는 의문이 제기됨.
     * WeWork의 아담 뉴먼은 ""We""라는 상표권을 소유하고 있었으며, 자신이 소유한 건물들을 WeWork에 임대하여 큰 이득을 얻음.
     * 알트만이 과거에 자기 거래(self dealing) 문제로 폴 그레이엄에 의해 해임된 적이 있음.
     * 벤처캐피탈리스트(VC)로서 ""누군가 우리 제품을 사고 싶어하는데, 우리는 그것을 제공하기 위한 자금만 필요하다""는 이상적인 제안임. 대안은 OpenAI가 이 칩들을 선결제하고 많은 리스크를 감수하는 것이었음. 알트만의 입장에서는 OpenAI(및 그 투자자들) 대신 개인적으로 리스크를 감수함.
     * WeWork의 전략을 사용한 것으로 보임.
     * 아담 뉴먼의 전략을 따른 것으로 보임.
"
"https://news.hada.io/topic?id=12187","Show GN: ArXiv GPT - 전세계 논문을 AI가 자동으로 한글 번역, 요약, 분석, QnA를 한방에!!!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: ArXiv GPT - 전세계 논문을 AI가 자동으로 한글 번역, 요약, 분석, QnA를 한방에!!!

   ArXiv GPT

   전세계 논문을 AI가 자동으로 한글 번역, 요약, 분석, QnA를 한방에!!!
   *ArXiv는 글로벌 논문 검색 포털 서비스입니다.

   ArXiv GPT 유튜브 소개 동영상: https://youtu.be/-kpz0mjAd3Y

   ArXiv의 전세계 모든 논문을 AI가 한글로 전문 번역, 요약, 분석, QnA를 지원합니다.
   ArXiv는 글로벌 논문 검색 포털 서비스입니다.
   전세계의 거의 모든 연구자, 교수들은 ArXiv에 자신들의 연구 성과물을 공개하고 활발한 토론이 전개되고 있습니다.
   그러나 ArXIv는 영어로 구성되어 있고 너무나 방대한 논문들이 등록되어 있어 어떤것을 찾을지도 어렵고 비영어권 국가 이용자들 입장에서는 가독성이 낮습니다.

   이러한 문제를 해결하기 위해 ArXiv GPT를 만들었습니다.
   ArXiv GPT는 -ChatGPT의 커스텀 앱으로 개발되었습니다.
   현재는 챗지피티 플러스 유료 이용자만 사용하실 수 있습니다.
   주요 기능은 ArXiv 논문 '한글' 검색, 논문에 대한 요약, 분석, QnA를 제공하며 GPT 4기반이기에 이미지나 파일 데이터도 업로드 할 수 있습니다.

   가장 큰 특징은 논문 전문을 HTML로 보여주고 논문 전문을 한글로 번역해 줍니다.
   이제 영어 논문을 한글로 편하게 읽을 수 있고 편집을 할 수 있습니다.
   크롬 브라우저 우클릭하여 한글 번역하기를 이용하시면 됩니다.

   기능을 사용해보시고 커스텀 개발 지원이 필요하거나 이용 방법이 궁금하신 분들은 ArXiv GPT 커뮤니티에 참여하여 주세요.
    1. 핵심 기능 구성
       -ChatGPT의 커스텀 GPTs 앱으로 개발
       *챗지피티 플러스 유저만 무료 이용 가능
       -ArXiv 논문 '한글' 검색
       -논문 전문을 HTML(링크 클릭)로 보여주고 한글로 번역해줌
       : 크롬 한글 자동 번역을 통해 영어 논문이 한글로 전환됨
       *HTML이 갖는 장점
       -논문에 대한 요약, 분석, QnA 제공
       -한글 지원 및 GPT-4 지원(이미지,링크 등)
    2. 커스텀 지원(카카오 오픈채팅방 커뮤니티 참여자에 한해 지원)
       -별도 요청시 '지정 논문들' 학습된 밎춤형 챗봇 제작 지원
       : 웹위젯, 카카오 채널 등 대화형 봇 지원 가능
       : 웹위젯의 경우 '말로 하기(음성으로 출력)' 지원 가능
       : 외부 API 및 시나리오 적용 지원

   -동영상: https://youtu.be/-kpz0mjAd3Y
   -커뮤니티 링크: https://open.kakao.com/o/gE6hK9Vf
   -GPTs 링크: https://chat.openai.com/g/g-LmRBZpu94-arxiv-gpt
   -컨택포인트: aitechtree@gmail.com

   업데이트 소식

   안녕하세요.
   GPTs상에서 논문 분석 결과를 이메일로 즉시 공유할 수 있습니다.
   예를들어, 원하는 논문 분석 결과가 출력되었다고 가정하고 이를 동료와 공유하고 싶다면.

   프롬프트 입력: 출력 내용 전문을 xxxx@gmail.com으로 보내고 제목은 '중요 논문 공유'로 해라

   그러면 그 메일로 논문 결과 내용이 그대로 전송됩니다.

   기존에 사용하고 있던 ArxivGPT가 있는데 차별성은 GPTs로 되어 있다는 것일까요?

   https://chromewebstore.google.com/detail/arxivgpt/…

   안녕하세요.
   GPTs상에서 논문 분석 결과를 이메일로 즉시 공유할 수 있습니다.
   예를들어, 원하는 논문 분석 결과가 출력되었다고 가정하고 이를 동료와 공유하고 싶다면.

   프롬프트 입력: 출력 내용 전문을 xxxx@gmail.com으로 보내고 제목은 '중요 논문 공유'로 해라

   그러면 그 메일로 논문 결과 내용이 그대로 전송됩니다.

   감사합니다! 근데 ArXiv 로 적고, 아카이브 라고 발음하지 않을까요. :) https://en.m.wikipedia.org/wiki/ArXiv

   참고로 동영상의 화자는 openai의 휘스퍼로 만든 음성입니다.

   발음은 각자의 로컬라이제이션이겠지요.
   저는 아카이브라고 읽습니다.

   -커뮤니티 링크: https://open.kakao.com/o/gE6hK9Vf
"
"https://news.hada.io/topic?id=12129"," Spring Boot 2 OSS 지원 종료, Spring Boot 3마이그레이션 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Spring Boot 2 OSS 지원 종료, Spring Boot 3마이그레이션 방법

     * 마이그레이션 배경
          + Spring Boot 2의 OSS 지원이 올해 11월 24일에 EOL(end of life)
          + LINE BK 보험 중개 서비스에서는 이에 Spring Boot 3로 마이그레이션
     * Spring Boot 마이그레이션
         1. 사전 준비
         2. Java 버전을 최소 17 이상으로 업데이트
         3. Spring Boot 버전을 3으로 업데이트
         4. Java EE를 Jakarta EE로 변경
         5. application.yml 혹은 application.properties 수정
         6. 지원이 중단된(deprecated) API 수정
     * 기타 Spring 프로젝트 마이그레이션
          + Spring Cloud
          + Spring Data JPA
          + Spring Batch
          + Spring Security
          + 기타(Flyway, Mockito 등)

   어떻게 마이그레이션 하지....-_- 난감하네요.

   한국에서는 2021년+17=2038년 에 마이그레이션 할 테니까 한국 여러분들은 신경 안써도 되는 사하...ㅇ...또르르
"
"https://news.hada.io/topic?id=12124","애플의 컴퓨테이셔널 포토그래피에서 발견된 현실을 왜곡하는 오류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플의 컴퓨테이셔널 포토그래피에서 발견된 현실을 왜곡하는 오류

컴퓨터 사진술의 실수로 현실을 구부리는 신부 예비

     * 영국 여성이 거울 앞에서 찍힌 사진에서 반영된 모습이 일치하지 않는 현상 발견.
     * 아이폰의 컴퓨터 사진술 오류로 인해 발생한 현상으로, 거울에 비친 여러 모습이 서로 다른 포즈를 취함.
     * 사진은 신부 예복을 입은 테사 코츠가 거울 앞에 서 있는 모습을 보여주며, 각기 다른 거울에 비친 그녀의 모습이 다른 자세를 취하고 있음.

애플의 컴퓨터 사진술 파이프라인 오류

     * 아이폰 카메라가 거울을 찍는 것을 인식하지 못해 거울에 비친 여러 모습을 다른 사람으로 처리함.
     * 코츠가 움직이는 동안 여러 다른 이미지가 캡처되고, 애플의 알고리즘이 이를 합쳐 최상의 채도, 대비, 세부 사항, 흐림 없는 이미지를 선택함.
     * 최종 합성 이미지는 그 순간의 가장 현실적인 해석이 되어야 하지만, 거울이 있어 알고리즘이 각 거울에 보이는 다른 순간들을 최적으로 판단하여 서로 다른 모습의 테사가 생성됨.

컴퓨터 사진술의 한계와 소셜 미디어 활용

     * 최근 아이폰 및 많은 스마트폰에서 거울을 다루는 컴퓨터 사진술의 한계로 인해 이러한 결과 재현 가능.
     * 젊은 세대가 이 현상을 파악하고 소셜 미디어를 위한 재미있는 이미지를 생성하는 데 사용함.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 컴퓨터 사진술의 한계와 그로 인해 발생할 수 있는 현실 왜곡 현상의 예시임.
     * 사람들에게 흥미로운 이유는 기술의 진보가 어떻게 예상치 못한 결과를 초래할 수 있는지 보여주며, 일상적인 기술 사용에서 발생할 수 있는 흥미로운 오류에 대한 인식을 높일 수 있기 때문임.

        Hacker News 의견

     * 원본 기사가 더 나은 정보원일 수 있음
          + 원본 기사에 대한 짧은 요약 글이 참조되었으나, 원본 기사가 더 나은 정보를 제공할 가능성이 있음.
     * 컴퓨터 사진학에 대한 순수주의자들의 반감과 개인적 만족
          + 순수주의자들은 컴퓨터 사진학을 싫어할 수 있으나, 한 사용자는 아이폰으로 야간, 저조도, 움직임이 있는 이미지를 잘 캡처하는 것을 좋아함.
          + 물리적으로 작은 센서에서 불가능할 것으로 생각했던 야간 사진들을 캡처할 수 있었음.
          + 사진이 실제 상황과 100% 픽셀 완벽하지 않을 수 있으나, 그 사용자는 중요하게 생각하지 않음.
          + HDR 노출 스택킹, 포커스 스택킹, 사람이나 차 없는 이미지를 만들기 위해 여러 사진을 합치는 등의 기술을 사용했으며, 완벽한 픽셀 대표성보다는 주제를 포착하는 이미지를 얻는 것이 목적임.
     * 구글 픽셀 7로 찍은 사진과 컴퓨터 사진학에 대한 경험
          + 구글 픽셀 7로 사슴 사진을 찍었을 때, 세부적으로 보면 모든 것이 유화 같은 이상한 효과를 띠고 있었음.
          + 컴퓨터 사진학은 매우 멋지면서도 약간 걱정스러움.
     * 스마트폰 알고리즘에 의한 사진의 비현실적 변형 경험
          + 갤럭시 22 울트라로 아들의 사진을 완벽하게 찍었으나, 알고리즘이 아들의 피부를 벽의 질감으로 바꾸어 놓음.
          + RAW 모드로 전환하여 미래의 사진을 구할 수 있으나, '프로' 카메라 모드에서만 작동하고 불편함이 있음.
          + 결국 제3자 카메라 앱을 설치하여 사용하기로 결정함.
     * '파노-랭켄슈타인' 사진에 대한 가족의 취미
          + 가족들은 사람의 얼굴을 빠르게 표정을 바꾸면서 파노라마 사진을 찍어 재미있는 결과물을 얻음.
     * AI 조작의 법적 방어 수단으로의 활용 가능성
          + AI 조작의 예시들이 법적 방어의 일부로 사용될 것으로 예상되며, 일부 판사와 배심원들에게 합리적 의심의 여지를 줄 수 있음.
     * 구글 픽셀의 사진 촬영 방식과 HDR 스택킹
          + 구글 픽셀은 카메라 앱을 열자마자 프레임을 저장하기 시작하고, 실제 사진을 찍을 때 이전 프레임들을 사용하여 HDR 스택킹 효과를 낼 수 있음.
     * 나비의 다리가 사라진 컴퓨터 사진학의 결과물
          + 나비집에서 찍은 근접 사진에서 나비의 다리가 제거되고 날개만 남은 결과물을 얻음.
     * 현실에 대한 인식과 컴퓨터 사진학의 영향
          + 현실이 무엇인지에 대한 질문과 컴퓨터 사진학이 현실을 어떻게 포착하는지에 대한 고찰.
          + 광학 카메라가 우리의 현실을 충실히 포착하는지, 그리고 컴퓨터 사진학이 만들어내는 현실이 우리의 인식과 어떻게 다른지에 대한 논의.
     * 아이폰 카메라 앱의 사진 촬영 기능과 최적의 사진 선택
          + 아이폰 카메라 앱에서 버튼을 길게 누르면 여러 사진을 찍고, 그 중 '최고'라고 생각하는 사진을 표시함.
          + 이 기능은 사람들이 눈을 뜨고 있는 사진을 선택하는 데 기반을 둠.
"
"https://news.hada.io/topic?id=12120","Animate Anyone: 캐릭터 애니메이션을 위한 이미지-to-비디오 합성 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Animate Anyone: 캐릭터 애니메이션을 위한 이미지-to-비디오 합성 기술

캐릭터 애니메이션을 위한 일관되고 제어 가능한 이미지-비디오 합성 기법

     * 캐릭터 애니메이션은 정지 이미지로부터 동작 신호를 통해 캐릭터 비디오를 생성하는 것을 목표로 함.
     * 디퓨전 모델은 강력한 생성 능력 덕분에 시각적 생성 연구에서 주류를 이루고 있으나, 이미지-비디오 분야, 특히 캐릭터 애니메이션에서는 세부 정보를 시간적으로 일관되게 유지하는 것이 큰 도전임.
     * 본 논문에서는 디퓨전 모델의 장점을 활용하여 캐릭터 애니메이션을 위한 새로운 프레임워크를 제안하고, 참조 이미지의 복잡한 외형 특성을 유지하기 위해 ReferenceNet을 설계하여 공간적 주의를 통해 세부 특성을 통합함.

방법론

     * 제안된 방법의 개요는 Pose Guider를 사용하여 포즈 시퀀스를 초기 인코딩하고, 다중 프레임 노이즈와 융합한 후, 비디오 생성을 위해 Denoising UNet이 비노이즈 과정을 수행함.
     * Denoising UNet의 계산 블록은 공간적 주의, 교차 주의, 시간적 주의로 구성되며, 참조 이미지의 통합은 두 가지 측면을 포함함.
     * 첫째, ReferenceNet을 통해 추출된 세부 특성이 공간적 주의에 사용되고, 둘째, CLIP 이미지 인코더를 통해 추출된 의미적 특성이 교차 주의에 사용됨.
     * 시간적 주의는 시간 차원에서 작동하며, 최종적으로 VAE 디코더가 결과를 비디오 클립으로 디코딩함.

다양한 캐릭터 애니메이션

     * 인간, 애니메/만화, 휴머노이드 캐릭터를 포함한 다양한 캐릭터를 애니메이션할 수 있음.
     * 패션 비디오 합성은 패션 사진을 실제적인 애니메이션 비디오로 전환하는 것을 목표로 하며, UBC 패션 비디오 데이터셋에서 동일한 훈련 데이터를 사용하여 실험을 수행함.
     * 인간 댄스 생성은 실제 댄스 시나리오에서 이미지를 애니메이션하는 것을 중점으로 하며, TikTok 데이터셋에서 동일한 훈련 데이터를 사용하여 실험을 수행함.

GN⁺의 의견

     * 이 연구는 캐릭터 애니메이션 분야에서 중요한 진전을 나타내며, 디퓨전 모델을 활용하여 이미지로부터 비디오를 생성하는 새로운 방법을 제시함.
     * 참조 이미지의 세부적인 특성을 유지하면서도 캐릭터의 움직임을 정교하게 제어할 수 있는 기술은 애니메이션과 시각 효과 산업에 큰 영향을 미칠 수 있음.
     * 이 글은 캐릭터 애니메이션을 위한 혁신적인 접근 방식과 그것이 어떻게 다양한 캐릭터와 시나리오에 적용될 수 있는지에 대한 흥미로운 정보를 제공함.

   일정 밀려서 작화 풍괴된 애미메이션을 생각해보면 결과물이 오히려 이 쪽이 더 나을지도 모르겠네요. 어느 정도 후처리 과정에서 사람의 손이 들어가야 하긴 하겠지만요

   와 결과물이 장난 아니네요. 영상쪽도 엄청 빠르게 발전하는군요

        Hacker News 의견

     * 인공지능이 설득력 있는 인간의 움직임을 생성하는 것을 처음 본다는 감탄
          + 실제 움직임의 골격은 모션 캡처에서 비롯되었을 가능성이 높음
          + 비디오 게임에 중요한 움직임 골격을 생성하는 현재 기술 수준에 대한 궁금증
          + Corridor Crew의 Rock, Paper, Scissors를 AI 캐릭터 애니메이션의 이전 최고 수준으로 언급
          + 애니메이션 제작의 진입 장벽이 매우 낮아질 것으로 예상
          + AI 여자친구에 대한 소름 돋는 요소가 증가함
     * 몇 년 안에 이 기술이 전통적으로 매력적인 젊은 여성 캐릭터 외에도 일반화될 수 있음에 놀라움
     * Github에 연구 결과를 게시하지만 코드를 공개하지 않는 행위에 대한 의문 제기
          + 이러한 추세가 이상하다고 생각함
     * 좋아하는 만화를 애니메이션으로 만들어 볼 수 있는 도구나 도구 체인에 대한 기대
          + 공식 발매를 기다리지 않고 시즌 1이나 OVA를 소화시켜 시즌 2를 볼 수 있기를 희망
     * 몇 년 내에 모든 비디오가 실시간으로 생성되는 YouTube와 같은 사이트가 생길 것이라는 상상
          + 전자 제품 수리부터 과학 학습까지 모든 것이 사용자의 학습 수준과 관심사에 맞춰져 있을 것으로 기대
     * 테스트 이미지 선택이 부적절하다는 비판
          + 다양하고 표준화된 데이터셋을 사용해야 한다는 주장
          + 이미지 처리 강의에서 성적인 이미지 사용에 대한 비판 인용
     * 샘플이 선별된 것 같고 시스템이 데이터셋에 과적합되어 다른 것에는 일반화되지 않을 것이라는 의심
          + 실패 사례가 없는 것은 경계해야 할 신호
          + 현재 형태로도 유용할 수 있으며, 더 일반적인 시스템을 만들기 위해서는 적절한 훈련 데이터 수집이 주로 필요함
     * 이 기술이 3D 모델링 및 VR과 결합될 때의 상상
          + VR 포르노, 동적 AI 캐릭터가 있는 비디오 게임, 영화와 교육에 부활한 사망한 배우와 역사적 인물
          + 미래의 요양원에 대한 두려움이 줄어듦
     * 이 분야의 모든 것이 성적인 경향이 있는 이유에 대한 의문
          + 문제가 될 수 있지만, 사람들이 의도를 솔직하게 드러낼 때 환영하는 태도도 있음
"
"https://news.hada.io/topic?id=12082","IKEA 문과 창문, 움직임, 물 샘 감지 센서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       IKEA 문과 창문, 움직임, 물 샘 감지 센서

이케아, 저렴한 스마트 홈 센서 3종 출시

     * 이케아가 문과 창문 개폐, 실내외 움직임, 물 샘 감지를 위한 저렴한 스마트 홈 센서 3종을 출시함.
     * 센서들은 각각 10달러 미만의 가격으로, 내년 상반기에 전 세계적으로 판매될 예정임.
     * 센서들은 이케아의 스마트 홈 제품군과 앱에 통합되어 구글, 아마존, 애플의 스마트 홈 생태계와 상호 운용 가능함.

센서 상세 정보

     * Parasoll은 문과 창문 센서로, 개폐 감지 시 자동화를 트리거하고, 이케아 스마트 전구와 바로 연동 가능함.
     * Vallhorn은 실내외 사용이 가능한 모션 센서로, 움직임 감지 시 조명 또는 다른 자동화를 활성화하며, 이케아 스마트 전구 최대 10개를 직접 제어할 수 있음.
     * Badring은 물 샘 감지 센서로, 내장된 사이렌을 통해 누수를 감지하고, 이케아 Dirigera 허브가 설치된 집에서는 모바일 알림을 발송할 수 있음.

출시 일정 및 호환성

     * Vallhorn은 2024년 1월부터 미국을 포함한 일부 국가에서 판매 시작, Parasoll은 국제적으로 같은 달 출시되나 미국에서는 4월에 출시될 예정임.
     * Badring은 4월부터 일부 국가에서 판매를 시작하며, 미국에서는 7월에 출시될 예정임.
     * Parasoll과 Badring 센서는 이케아의 구형 Trådfri Home 스마트 게이트웨이와는 호환되지 않으나, 새로운 Dirigera 허브와는 호환됨.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 이케아가 저렴한 가격대의 스마트 홈 센서를 출시하여 스마트 홈 기술을 대중화하려는 노력임.
     * 이러한 제품들은 사용자들이 스마트 홈 기술을 쉽게 접하고, 일상생활에서 편리함을 누릴 수 있게 해주는 매력적인 요소로 작용함.
     * 또한, 이케아의 스마트 홈 제품들이 기존의 다양한 플랫폼과 잘 통합되고 있으며, 앞으로 Matter 지원을 통해 더욱 확장될 가능성을 가지고 있어 이 분야에 관심 있는 사람들에게 흥미로운 소식임.

        Hacker News 의견

     * Xiaomi Aqara Zigbee 물 샘 감지 센서를 사용하여 큰 피해를 막을 수 있었음. Ikea 제품의 사이렌은 분명한 개선점이며 가격도 합리적임. 모션 센서는 기존 제품보다 나아 보이며 배터리 수명 문제도 없음. 그러나 문 센서는 Xiaomi Aqara 센서보다 크게 보임. Ikea Zigbee 제품들은 Zigbee2MQTT를 통한 지원이 잘 되고 있으며 OTA 업데이트도 가능함.
     * Ikea는 스마트 홈 제품을 잘 만들고 있으며, 가격이 저렴하고 심플함. 모든 제품이 Zigbee를 사용하며 Ikea 허브 없이도 사용 가능함. Ikea 스마트 조명, 모션 센서, 플러그 등이 Home Assistant와 잘 통합되어 오랫동안 문제없이 작동함.
     * Ikea는 기술 제품을 저렴한 가격에 제공하는 데 있어 선구자적 역할을 함. 색상 변경 LED 스트립이나 CFL 전구 등을 합리적인 가격에 제공함.
     * Zigbee 생태계는 저렴한 장치, 긴 배터리 수명, 높은 신뢰성을 제공하며, 다양한 브랜드의 장치를 하나의 허브로 사용할 수 있는 경험이 좋음. 커뮤니티 리소스도 훌륭함.
     * Matter over Thread 기술을 사용하는 센서를 선호하지만, 추가적인 허브 없이 Nest Wifi와 함께 사용하고 싶음.
     * 물 샘 감지 시나리오에서는 기기가 새는 것을 감지하여 사전에 수리하거나 교체할 수 있도록 도와주는 것이 최선임. 갑작스러운 큰 누수를 방지하기 위한 것이 아님.
     * Ikea 스마트 홈 제품을 사용하여 간단한 자동화를 구현하고 있으며, Sonos와의 통합도 만족스러움. 물 샘 감지 센서도 구매할 예정임.
     * Philips Wiz Wi-Fi 전구를 사용하고 있으나, 페어링이 어렵고 종종 Wi-Fi 연결이 끊김. 새로운 Wi-Fi 전구가 더 나을 수 있지만, 저가형 Wi-Fi 하드웨어 사용에 대한 우려가 있음. LG TV에 내장된 Matter Thread 허브가 매력적이지만, Thread 기기는 아직 비싸고 선택지가 제한적임. Zigbee에 대한 인식이 바뀌고 있으며, 저렴하고 호환성이 높음.
     * Philips Hue를 사용하여 스마트 조명을 오랫동안 사용하고 있으며, 일반적인 조명 스위치 사용이 구식으로 느껴짐. 특히 밤 10시 이후에는 불빛이 매우 어두워야 함.
     * 집에 약 40-45개의 Zigbee 장치가 있으며, Hue 게이트웨이와 zigbee2mqtt/Homeassistant 설정에 연결되어 있음. Aqara 장치는 만족스럽지만 비싸고, sonoff 제품은 품질이 낮음. Ikea 제품은 가격 대비 성능이 좋고 신뢰성이 높지만 배터리 수명은 다소 실망스러움. 새로운 모션 센서는 AAA 배터리 3개를 사용하여 배터리 수명이 덜 실망스러울 것으로 기대됨.
"
"https://news.hada.io/topic?id=12093","ultimate-guitar.com을 위한 대체 프론트 엔드, Freetar","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ultimate-guitar.com을 위한 대체 프론트 엔드, Freetar

freetar - Ultimate Guitar 대체 프론트엔드 소개

     * freetar는 Ultimate Guitar 웹사이트의 대체 프론트엔드임.
     * Invidious와 유사하지만 Ultimate Guitar 전용임.
     * 사용해보기: freetar

주요 기능

     * 광고나 팝업 없이 간단한 디자인 제공.
     * 탭 검색 및 조회 기능.
     * 좋아하는 코드를 즐겨찾기로 저장(계정 필요 없이 세션 저장소에 저장).
     * 다크 모드 지원.
     * 자동 스크롤 기능.

향후 개발 계획

     * 코드 표시 기능 추가 예정.
     * 모바일 기기에서 사용자 경험(UX) 개선.
     * 스마트폰에서 화면 잠금 방지.
     * 코드 공유 기능(QR 코드 생성?) 고려 중.
     * 즐겨찾기를 서버 측에서 암호화하여 저장하는 기능 고려 중.

사용 방법

     * poetry가 필요함.
     * 설치 및 실행 방법:
poetry install
poetry run freetar

     * 브라우저에서 localhost:22000 방문.
     * PyPi 패키지로도 사용 가능:
pip install freetar

GN⁺의 의견

   이 글에서 가장 중요한 것은 freetar가 Ultimate Guitar 사용자들에게 광고 없이 깔끔한 인터페이스를 제공하며, 사용자 친화적인 기능들을 추가할 계획이라는 점이다. 이 글이 흥미로운 이유는 기존의 인기 있는 서비스에 대한 대체 프론트엔드가 개발되어 사용자들에게 새로운 선택지를 제공한다는 점에서 매력적이기 때문이다.

        Hacker News 의견

     * 이 서비스는 매우 좋으며 이미 많은 도구들이 존재함. 저작권 문제로 탭이 더 많이 제한될 것으로 예상되어, 개인적으로 탭을 스크랩하고 저장하는 도구를 만들었음. UG 프로 멤버십을 평생 사용하지만, 수익화를 위해 너무 멀리 나아가고 있음.
     * 오픈 소스 소프트웨어(OSS)가 이 분야에서 발전할 길이 없음. 탭은 종종 출판사나 아티스트에 의해 소유되고 라이선스가 부여됨. Oliver Tree 같은 아티스트는 노래당 4개의 코드에 불과함에도 탭 대부분이 한 때 삭제됨.
     * 2000년대 초부터 ultimate-guitar를 사용해왔고, 내 탭 중 일부가 여전히 그곳에 있음. 현재 사이트 상태는 매우 혼란스러움. 이 새로운 서비스를 시도할 예정임.
     * 과거에 앱을 구입하여 평생 구독권을 얻었고, 마케팅에서 벗어날 수 있었지만, 사용자 인터페이스가 매우 혼란스러워 기타 연주를 더 어렵게 만듦.
     * OLGA(On-Line Guitar Archive)를 기억함. 1990년대에 기타를 배우던 시절, OLGA는 사용자가 생성한 텍스트 기반 탭을 무료로 제공하여 원하는 모든 노래를 배울 수 있었음.
     * 원래 사이트가 시간이 지남에 따라 사용자에게 적대적이 되었는데, 사이트를 정의하는 대부분의 콘텐츠가 사용자에 의해 기여되었기 때문에 이는 특히 용납할 수 없음.
     * 기타를 배운 지 약 15개월 되었고, 대부분의 기타 사이트에서 광고와 팝업을 매우 싫어함. 이 서비스는 완벽하게 간단한 인터페이스를 제공하며 시간 낭비가 없음. 훌륭한 아이디어와 실행임.
     * 두 가지를 언급함:
         1. 이 서비스는 정말 훌륭함. 사이트에 추가한 탭을 검색해보니, 매우 인쇄하기 좋은 형식으로 잘 제시함.
         2. 클래식 기타에 관심이 있다면, 인터넷의 보석인 classtab.org를 확인해야 함.
     * 몇 년 전 비슷한 웹 앱을 만들었음. 이 서비스와 경쟁할 수 있다고 생각함. 문법 강조 기능이 있음.
     * 이 서비스를 좋아함. 모든 웹사이트가 이렇게 생겼으면 좋겠음. UG의 웹사이트는 매우 형편없음. 피드백은 인기 있거나 트렌딩하는 탭을 기반으로 노래를 고르곤 했기 때문에, 이 기능이 여기에도 있으면 좋겠음.
     * 이 서비스를 확실히 사용할 것임. 모든 데이터를 어떻게 얻었는지 궁금함. API를 사용했는지, 아니면 스크랩했는지?
"
"https://news.hada.io/topic?id=12087","당신의 집에 대한 문서 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            당신의 집에 대한 문서 작성

주택 기술 문서 작성하기

    동기 부여

     * 첫 주택 소유자로서 다양한 질문에 대한 문서화된 참고 자료의 필요성 인식
     * 주택에 대한 사용자 매뉴얼 및 기술 문서의 중요성 강조

    추천 프레임워크

     * Diátaxis 기술 문서 프레임워크 적용 고려
     * 문서를 튜토리얼, 방법 안내, 기술 참조, 설명의 네 가지 유형으로 구성

    변경 사항

     * 주택 소유 기간 동안의 중요 변경 사항 기록을 위한 변경 사항 페이지 추가

    구현

     * 복잡한 웹사이트 구현 대신 간단한 바인더, 구글 문서, 유튜브 채널 등을 사용할 수 있음
     * 개인적으로는 Material for Mkdocs를 사용하여 문서화 사이트 구축

    디렉토리 구조

     * 계약서, 다이어그램, 문서, 금융, 검사, 보험, 세금, 유틸리티 등을 포함한 예시 디렉토리 구조 제시

    Mkdocs 설정

     * mkdocs.yml 설정 예시 제공, 사이트 이름, 테마, 플러그인, 마크다운 확장 기능 포함

    로컬 미리보기

     * Justfile을 사용하여 로컬에서 문서 미리보기를 위한 명령 실행

    결론

     * 문서화를 통해 가족이 필요한 정보를 쉽게 찾을 수 있는 품질 향상 경험
     * 주택 가치 향상 및 다음 소유자에게 문서 전달의 중요성 강조

    GN⁺의 의견

   이 글에서 가장 중요한 것은 주택 소유자가 자신의 집에 대한 기술 문서를 작성하여 정보를 쉽게 찾고, 관리할 수 있는 방법을 제시했다는 점이다. 이러한 접근 방식은 주택 관리를 더 체계적이고 효율적으로 만들 수 있으며, 특히 긴급 상황이나 중요한 유지보수가 필요할 때 유용하다. 이 글은 소프트웨어 엔지니어링의 원칙을 일상 생활에 적용하는 참신한 아이디어를 제공하며, 이는 독자들에게 흥미로운 영감을 줄 수 있다.

        Hacker News 의견

     * 친구의 경험: 친구가 팬데믹 기간 중 집을 개조하며 생방송을 통해 사람들과 연결을 시도함. 어느 날, 욕실 벽을 허물던 중 벽 사이에서 70년대에 작성된 전기 배선과 설치 목록이 담긴 클립보드를 발견함. 클립보드 첫 페이지에는 개조 작업이 힘들고 외로울 수 있지만 계속하면 언젠가는 가치가 있다는 메모가 있었고, 이는 친구와 시청자들에게 감동을 줌.
     * 집 문서화 경험: 집을 스마트 홈으로 개조하고 모든 설명서와 영상을 만들어 새 주인에게 전달했으나, 새 주인은 스마트 홈 기능을 대부분 제거하고 문서를 무시한 것으로 보임. 이후로는 집에 대한 문서화에 같은 노력을 기울이지 않기로 함.
     * 시애틀 집 판매 경험: 이전 집을 개조하고 상세한 문서를 남겼으나 새 주인이 이를 무시함. 나중에 아들이 방문했을 때, 자신이 만든 벽돌 오븐이 철거된 것을 발견하고 실망함. 그럼에도 불구하고 앞으로도 집에 대한 문서화를 계속할 것임.
     * 문서화의 가치: 이전 주인이 남긴 간단한 문서 덕분에 집의 역사와 유지 보수에 대한 정보를 쉽게 파악할 수 있었으며, 이는 첫 주택 구매자에게 매우 유용함.
     * 위키를 통한 문서화: 모든 것을 위키에 문서화하여 유지 보수와 미래의 집 판매를 용이하게 함. 미래의 주인들도 이로 인해 감사할 것임.
     * '집 책' 작성: 집과 관련된 모든 정보를 기록한 노트북을 작성하여 유지 보수에 필요한 정보를 쉽게 찾을 수 있도록 함.
     * 문서화의 중요성: 가족 중 누군가가 갑작스럽게 돌아가거나 능력을 잃었을 때, 문서화된 정보가 매우 유용할 수 있음. 문서화할 때는 일반인도 이해할 수 있는 도구나 매체를 사용하는 것이 좋음.
     * RV 문서화 경험: RV와 집에 대한 모든 설치물과 유지 보수에 대한 상세한 문서를 작성하여 관리를 용이하게 함.
     * 아버지의 집 설계 지식: 아버지가 설계한 집에서 살고 있으며, 아버지는 집에 대한 상세한 지식을 가지고 있어 유용한 자원임.
     * 문서화의 중요성 강조: 완벽함을 추구하기보다는 간단한 메모라도 남기는 것이 아무런 문서화도 없는 것보다 낫다는 의견 제시.
"
"https://news.hada.io/topic?id=12199","AWS, 기업용 AI 챗봇 "아마존 Q(프리뷰)" 발표 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AWS, 기업용 AI 챗봇 ""아마존 Q(프리뷰)"" 발표

     * AWS가 새로운 AI 기반 비서 서비스인 Amazon Q를 발표
     * Amazon Q는 업무에 특화되어 있으며, 기업의 정보 저장소, 코드, 엔터프라이즈 시스템에서 데이터와 전문 지식을 활용해 대화, 문제 해결, 콘텐츠 생성, 행동 수행 가능
     * Amazon Q는 일반 지식과 특정 분야의 전문 지식을 갖추고 있으며, 보안과 개인 정보 보호에 중점을 둔 설계

Amazon Q의 활용 방법

     * Amazon Q를 통해 직원들은 분산된 콘텐츠 저장소에 흩어진 지식에서 질문에 대한 답을 얻을 수 있음
     * 긴 보고서 요약, 기사 작성, 행동 수행 등 다양한 작업을 회사의 연결된 콘텐츠 저장소 내에서 수행 가능
     * Amazon Q는 40개 이상의 인기 있는 엔터프라이즈 시스템에 대한 내장 커넥터를 제공하며, 사용자가 접근 권한을 가진 콘텐츠에서만 응답을 생성

Amazon Q의 미리보기 사용 가능 지역

     * Amazon Q는 미국 동부(버지니아 북부) 및 미국 서부(오리건) AWS 지역에서 미리보기로 사용 가능

Amazon Q, AWS 전문가 비서로서의 역할

     * Amazon Q는 개발자와 IT 전문가들이 AWS에서 애플리케이션과 워크로드를 구축, 배포, 운영할 때 전문적인 지원을 제공하는 다양한 기능을 미리보기로 제공

Amazon Q, Amazon Connect에서의 역할

     * Amazon Q는 Connect에서 실시간으로 권장 응답과 행동을 제공하여, 컨택 센터 에이전트가 고객 문제를 신속하고 정확하게 해결할 수 있도록 도움

   아마존의 Q는 '심각한 Hallucination'이 있으며 공개 미리보기에서 기밀 데이터를 유출한다고 직원들이 경고

   초반부터 별로 평가는 좋지 않군요.
"
"https://news.hada.io/topic?id=12152","화재로부터 회복하는 고대 레드우드, 천년 된 싹을 틔우다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    화재로부터 회복하는 고대 레드우드, 천년 된 싹을 틔우다

캘리포니아 산불 이후 살아남은 적송의 비밀

     * 2020년 8월 캘리포니아 빅 베이슨 레드우즈 주립공원 주변에서 발생한 산불로 인해 적송들이 화재에 노출됨.
     * 적송은 일반적으로 화재에 강하지만 이번 화재는 나무 꼭대기까지 번져 수십 년 전에 생성된 에너지 저장소를 활용해 새싹을 틔움.
     * 연구진은 적송이 수백 년간 휴면 상태였던 봉오리에서 새로운 성장을 시작했다고 밝힘.

적송의 에너지 저장과 재성장 능력

     * 적송은 광합성을 통해 생성된 당분과 탄수화물을 에너지로 저장하며, 이는 가뭄이나 화재 후 회복에 사용됨.
     * 연구진은 적송이 수천 년을 살아남을 수 있는 능력이 과거에 저장된 에너지를 활용하는 데 있다고 추정.
     * 연구를 통해 적송이 평균 21년 된 에너지 저장소를 사용하여 새싹을 키우고, 일부 탄수화물은 훨씬 오래된 것으로 밝혀짐.

적송의 재생과 기후 변화에 대한 적응

     * 적송은 수세기에 걸쳐 형성된 봉오리에서 새로운 성장을 시작하며, 이는 화재에 대한 높은 회복력을 보여줌.
     * 연구진은 적송이 다시 광합성을 통해 충분한 에너지를 얻기 전까지 어떻게 적응할지, 그리고 재발하는 대형 화재에 어떻게 대처할지에 대해 의문을 제기함.

GN⁺의 의견

     * 이 연구는 적송이 기후 변화로 인한 대형 화재에도 불구하고 살아남을 수 있는 놀라운 생명력을 가지고 있음을 보여줌.
     * 적송이 수십 년 전에 저장한 에너지를 활용하여 새로운 성장을 시작하는 능력은 자연의 회복력과 적응력에 대한 깊은 이해를 제공함.
     * 이 글은 적송의 생존 전략과 과학자들의 발견이 어떻게 자연의 복원력을 이해하는 데 기여하는지에 대한 흥미로운 통찰을 제공함.
"
"https://news.hada.io/topic?id=12130","Show GN: Noiselith - Stable Diffusion XL 을 로컬에서 쉽게!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: Noiselith - Stable Diffusion XL 을 로컬에서 쉽게!

   안녕하세요. 저희 팀에서 새로운 이미지 생성 도구를 만들어서 소개드립니다.
   WebUI를 쓰다가 로컬에서 돌아가는 더 쉬운 툴이 있었으면 해서 새로 만들었습니다.
   출시한지 얼마 안되어서 아직 기능이 부족하지만 빠르게 채워나가고 있습니다.
   한번 써보시고 후기를 알려 주시면 마음에 들 때까지 정말 열심히 발전시켜보겠습니다!

   https://noiselith.com 에서 무료로 다운 받으실 수 있습니다.

   FAQ
    1. 이걸 왜 써야 하나요?

     * 설치가 매우 간편합니다.
     * 인터페이스가 쉽고 편하게 설계되었습니다.
     * Fast 모드(LCM)를 탑재해서 약 3배 빠르게 이미지를 생성할 수 있습니다.
     * 앱 내에서 CivitAI의 모델을 간편하게 설치할수 있습니다.
     * 서버 업로드 없이 로컬에서 돌아갑니다.

    2. 어떤 기능들이 있나요?

     * SDXL 모델을 이용한 이미지 생성
     * Text to Image, Image to Image
     * 체크포인트/로라 변경 가능
     * 기존에 갖고있는 모델 파일을 불러오기
     * CivitAI 모델을 원클릭으로 설치
     * 생성한 이미지를 볼수 있는 갤러리
     * SD WebUI의 생성 파라미터 불러오기, 내보내기
     * 더 많은 기능들을 개발중입니다!

    3. 요구 사양이 어떻게 되나요?

     * 윈도우: 8GB 이상의 VRAM이 있는 NVIDIA 그래픽카드
     * 맥: 32GB 이상의 메모리가 포함된 Apple Silicon
     * 요구사양이 높은것을 잘 알고있고 최적화를 위해 노력중입니다.
     * 이르면 다음주 중에 4GB VRAM에서도 동작하는 SD 1.5 지원을 추가할 예정입니다.

    4. 한국어도 지원 되나요?

     * 네! 사실 저는 영어를 잘 못합니다 ㅎㅎ..

    5. 앞으로 준비중인 기능은 무엇이 있나요?

     * SD 1.5 지원
     * 인페인팅
     * 컨트롤넷
     * 한국어 프롬프트 지원
     * 고품질 이미지가 나오도록 프롬프트 자동변환
     * 쉬운 모델학습
     * 여러 추가기능들을 받을수 있는 앱스토어
     * 사용자 분들이 제안해주시는 기능들

    6. 로컬에서 돌아가나요?
       넵 생성 과정이 완전히 로컬에서 돌아갑니다. 저희는 프롬프트와 기타 생성 파라미터, 생성 결과물을 수집하거나 서버에 보관하지 않습니다.

   긴글 읽어주셔서 감사합니다 ㅎㅎ
   저희가 사용자분들 피드백 정말 열심히 읽고있고 요청하시는 기능들 최대한 다 잘 만들어서 넣으려고 노력하고있어요.
   업데이트도 일주일에 두세번씩 빠르게 하고 있습니다.
   어떠한 의견도 좋으니 많이 주시면 감사하겠습니다!

   그새 없어졌네요

   오 어딘가했더니 보이저엑스네요

   회사 맥(M1)에서 실행 시, 사내 SSL 때문인지 다음 오류가 발생하는데 확인 부탁드립니다.
   ""설정 중 오류가 발생했습니다.
   self signed certificate in certificate chain""
     * 디퓨전비는 실행 잘되요.
     * 모델 직접 다운로드해서 앱 리소스에 복사하는 방법도 좋습니다.

   다양한 프롬프트로 수 만번 생성을 하면 개인 성향이 담긴 방향으로 학습을 하는 걸까요??

   SDXL-turbo도 지원될까요?

   다운로드 버튼을 못찾고 있습니다... 어디에 있나요??

   리눅스여서 없었던 거네요! 윈도우에서는 있었습니다.

   다운로드 설치 위치 지정이 가능했으면 좋겠어요!ㅠㅠ 혹시 있는데 제가 못찾는걸까요? .. 설치는 지정가능한데, 모델 다운로드가 C로 고정되어 받아지는것같아 여쭤봅니당

   안녕하세요! 모델 다운로드는 첫 설치 이후에 설정->애플리케이션 설정->모델에서 모델 폴더를 지정 가능합니다!

   설치 중인데, 왠지 기대되네요. :) 드뎌 맥스튜디오 64G 램 덕을 보게되나요...

   ㅎㅎ 써보시고 피드백이나 불편하신점 있으시면 언제든지 말씀해주세요!

   맥 16GB 지원은 힘들까요 ㅠㅠ

   안녕하세요! 저희가 아직 맥에대한 최적화를 많이 안했는데 빠른시일내에 맥 최적화를 개선해볼수 있도록 하겠습니다. ㅜㅜ
   최적화와는 별개로 이번주중으로 비교적 가벼운 SD1.5모델을 지원하는데 이 모델은 16GB 맥에서도 사용하실수 있을거에요

   감사합니다 :)

   라데온은 지원안되나요?ㅠ

   안녕하세요! 저희가 사용하는 기반기술들이 라데온에 대한 지원이 제대로 안되어있어서 빠른시일내에 대응은 어려울거같습니다

   어제 해커뉴스에 업로드 했는데 반응이 역대급이였습니다 :)

   진심으로 감사드립니다. 덕분에 밤사이에 해외 유저들이 많이 유입되어 깜짝 놀랐네요

   글로벌 유저 확보 및 바이럴, 진출에 언제든 불러주세요.

   VoyagerX에서 또 일을 냈군요
"
"https://news.hada.io/topic?id=12089","State of JS 2023 설문 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         State of JS 2023 설문 시작

     * 매년 실시 하는 State of JS가 2023년 설문 조사를 받고 있습니다.
     * 한국 개발자들의 참여율은 매우 저조한데 모두들 조금만 시간 투자해서 설문에 참여해서 한국의 개발 트렌드에 관한 유의미한 데이터도 얻을 수 있으면 좋겠다는 마음입니다.
     * 설문은 11/20 ~ 12/12일까지 진행합니다.
"
"https://news.hada.io/topic?id=12154","Show HN: 브라우저에서 3D 식물 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show HN: 브라우저에서 3D 식물 시뮬레이션

   이 기사는 특정한 식물 모델링 소프트웨어의 인터페이스에 대한 설명을 담고 있는 것으로 보입니다. 그러나 제공된 텍스트는 구체적인 문맥이나 설명 없이 단편적인 인터페이스 요소들의 목록으로 구성되어 있어, 정확한 요약을 제공하기 어렵습니다. 따라서, 이 텍스트는 요약할 수 있는 충분한 정보를 포함하고 있지 않습니다.

        Hacker News 의견

     * 이 프로젝트는 다양한 이유로 유용하고 멋진 것으로, 브라우저 기반 노드 그래프 편집기를 통해 절차적인 3D 메쉬를 생성하고 .obj로 내보낼 수 있으며, 개방적인 라이선스를 제공함. 이는 절차적 도구들의 기반이 될 수 있는 소중한 시작점임.
     * 복잡성에 인상을 받았으며, 빠르게 체험하고 싶은 사람들을 위해 튜토리얼이 유용하나 재미있는 부분에 도달하기까지 몇 분이 걸림. 대신 오른쪽 패널의 슬라이더를 조작해보고 고사리 모델이 어떻게 변하는지 확인하거나 라이브러리에서 다른 모델들을 불러보는 것이 좋음.
     * 이 프로젝트는 흥미롭지만 현재 식물을 렌더링하지 못하는 문제가 있음. 20분 전에는 식물을 렌더링했었는데, 해커뉴스의 트래픽이 영향을 준 것 같음. 모든 코드는 온라인에서 확인할 수 있으며, 문서화도 잘 되어 있음. 실제로 이 프로젝트에는 서버 백엔드가 존재함.
     * 프로젝트는 매우 멋지지만 값들을 변경할 때 카메라가 '흔들리는' 문제가 있음. 식물의 형태가 바뀌면서 카메라가 지속적으로 조정되어야 하기 때문임. 파라미터를 변경하는 동안 카메라를 고정할 수 있는 기능이 있으면 좋을 것 같음.
     * 매우 멋진 프로젝트이며, 특히 '줄기 두께' 파라미터가 인상적임.
     * 오른쪽 패널을 슬라이드하여 더 많은 파라미터와 컨트롤을 볼 수 있다는 사실을 모르는 사람들도 있음.
     * 이 프로젝트는 놀랍고, 알고리즘으로 생성된 식물의 숲을 보는 것이 기대됨. 과학 프로젝트와 연결되어 있는지 궁금함. 인공지능 식물학자가 식물의 생존 가능성, 가장 가까운 분류학적 참조, 쌀과 함께 먹을 수 있는 좋은 레시피 등을 알려주는 기능이 있으면 멋질 것 같음.
     * 이 프로젝트는 WebGL을 사용하는 것으로 보이며, WebGPU를 사용하여 같은 결과를 쉽게 얻을 수 있는지 궁금함.
     * 실제 식물처럼 보이는 놀라운 결과물임.
     * 기술 예술을 좋아하는 친구들에게 이 프로젝트를 공유할 예정임.
"
"https://news.hada.io/topic?id=12170","하버드, 저커버그의 5억 달러 기부 후 '페이스북 파일' 조사팀 대폭 축소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               하버드, 저커버그의 5억 달러 기부 후 '페이스북 파일' 조사팀 대폭 축소

하버드 대학의 페이스북 파일 조사팀 해체 배경

     * 하버드 대학이 페이스북의 마크 주커버그와 그의 아내 프리실라 챈이 운영하는 재단으로부터 5억 달러를 기부받은 후, 온라인 정보 조작 전문가 팀을 해체함.
     * 조앤 도노반 박사는 하버드의 기술과 사회 변화 연구 프로젝트(TASC)에서 페이스북이 플랫폼으로 인한 공공의 해를 어떻게 알고 있었는지를 밝히는 수천 개의 문서를 분석하던 중 기관의 저항과 해고를 경험함.
     * 도노반 박사는 하버드 케네디 스쿨(HKS)에서 연구팀과 함께 페이스북 파일을 분석하던 중 학교 리더십으로부터 갑작스러운 감시와 압력을 받았다고 주장함.

하버드 대학의 조사팀에 대한 압력과 해체 과정

     * 도노반 박사는 페이스북 파일을 공개적으로 연구하고 분석할 수 있는 공개 아카이브를 만들려 했으나, 이후 HKS 학장인 더글러스 엘멘도르프에 의해 2년간의 탄압 캠페인을 겪음.
     * 하버드 대학은 TASC의 연구를 중단시키고 도노반 박사의 연구 결과가 메타의 거짓된 공개 서술에 도전하는 것을 막기 위해 제한과 관료적 장애물을 설정함.
     * 이러한 조치는 하버드가 챈 주커버그 이니셔티브로부터 사상 최대 규모의 기부금을 받는 과정에서 일어남.

조앤 도노반 박사의 행동과 요구

     * 도노반 박사는 하버드 대학, 미국 교육부, 매사추세츠 법무장관실에 공식적인 내부 고발을 보내며 HKS에서 부적절한 영향력에 대한 긴급하고 공정한 조사를 요구함.
     * 현재 보스턴 대학의 조교수인 도노반 박사는 HKS에서 미디어 조작과 정보 조작에 대해 강의했으며, 페이스북 파일을 분석하여 공공의 책임을 확보하려는 비전을 가지고 있었음.
     * 이 사건은 법률가, 규제 기관, 학계가 강력하고 부유한 이해관계자들이 공공 이익 연구에 미치는 해로운 전략을 다루는 중요한 기회로 여겨짐.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 하버드 대학이 대규모 기부금을 받은 후 연구 자유와 학문적 진실을 추구하는 팀을 해체했다는 주장이다. 이는 학계의 독립성과 연구의 중립성이 어떻게 외부 영향력에 의해 위협받을 수 있는지를 보여주는 사례로, 특히 사회적 영향력이 큰 기술 기업과 관련된 연구에서 이러한 문제가 두드러진다. 이러한 상황은 연구자들과 일반 대중 모두에게 중요한 의미를 지니며, 학문적 자유와 연구의 독립성을 지키기 위한 논의와 개선이 필요함을 시사한다. 이 기사가 흥미로운 이유는 학계 내에서의 윤리적 문제와 기업의 영향력이라는 민감한 주제를 다루고 있기 때문이다.

   퇴출된 선전학자, 하버드가 메타에 굴복했다고 비난

   이 글의 댓글은 이쪽에서 같이 볼 수 있습니다.

        Hacker News 의견

     * 관련 기사 링크
          + 해당 주제에 대한 훌륭한 기사가 있음: 워싱턴포스트 기사 및 아카이브 링크
     * 브랜드 가치 하락에 대한 우려
          + 브랜드 가치가 저하되는 속도를 보면, 이제 곧 자금을 챙겨 도망칠 때가 된 것 같음.
     * 개인적인 의견
          + 기부금이 필요할 것 같은 느낌임.
"
"https://news.hada.io/topic?id=12100","가장 신뢰할 수 있는 새 차를 제조하는 회사는 어디일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    가장 신뢰할 수 있는 새 차를 제조하는 회사는 어디일까?

신차 신뢰도 랭킹

     * 신차 신뢰도 랭킹: 렉서스, 토요타, 미니가 올해 가장 신뢰할 수 있는 브랜드로 선정됨. 일본 브랜드들이 지난해에 비해 순위가 바뀜.
     * 브랜드별 평균 예측 신뢰도: CR 회원들의 설문을 바탕으로 평균 예측 신뢰도가 산출됨.
     * 브랜드별 순위:
          + 렉서스: 79점
          + 토요타: 76점
          + 미니: 71점
          + 아큐라: 70점
          + 혼다: 70점
          + 기타 브랜드 순위 및 점수는 기사 내 상세 목록 참조

신뢰도 평가 방법

     * CR 회원 설문: 매년 CR은 회원들에게 지난 12개월 동안 겪은 차량 문제에 대해 물음.
     * 문제 영역: 총 20개의 문제 영역을 조사하며, 브레이크 소음부터 엔진, 변속기, EV 배터리 및 충전 문제에 이르기까지 다양함.
     * 예측 신뢰도 점수: 각 차량의 문제 유형의 심각성을 고려하여 1부터 100까지의 예측 신뢰도 점수를 부여함.

지역별 신뢰도 비교

     * 아시아 자동차 제조사: 전체 평균 신뢰도 점수 63으로 신뢰도가 가장 높음. 상위 10개 브랜드 중 7개가 아시아 브랜드임.
     * 유럽 자동차 제조사: 평균 점수 46으로 아시아에 이어 두 번째로 높은 신뢰도를 보임.
     * 미국 자동차 제조사: 평균 점수 39로 아시아 및 유럽 브랜드에 뒤처짐.

하이브리드와 전기차의 신뢰도

     * 하이브리드 차량: 내연기관 차량에 비해 26% 적은 문제를 보임.
     * 플러그인 하이브리드 차량 (PHEV): 내연기관 차량에 비해 146% 더 많은 문제를 보임.
     * 전기차 (EV): 전기차와 전기 SUV의 평균 신뢰도 점수는 각각 44와 43으로 낮음.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 렉서스, 토요타, 미니가 가장 신뢰할 수 있는 자동차 브랜드로 선정되었다는 것이다. 이는 소비자들에게 차량 구매 결정에 있어 중요한 정보를 제공한다. 또한 하이브리드 차량이 전통적인 내연기관 차량에 비해 더 적은 문제를 보이는 반면, 전기차는 아직 신뢰도에서 어려움을 겪고 있다는 점이 흥미롭다. 이는 자동차 산업의 미래에 대한 통찰력을 제공하며, 기술 발전에 따른 신뢰도 변화를 지켜보는 것이 매력적이다.

        Hacker News 의견

     * 3세대 Toyota 4Runner 소유자는 차량의 신뢰성과 기능성에 만족하면서도, 자녀의 안전을 고려해 새 차량 구매를 고민 중임. 새 차량의 복잡한 컴퓨터 시스템은 비싼 수리비를 암시하는 반면, 기존 차량은 간단하고 저렴한 수리가 가능함. Toyota의 신뢰성에 만족하며, 차량 교체 시에도 동일 브랜드를 선택할 의향이 있음.
     * 통계가 처음 3년 동안의 신뢰성만을 반영한다는 점에 주목하며, 장기적 신뢰성에 더 관심이 있는 중고차 구매자의 관점을 제시함. 초기 신뢰성과 장기 신뢰성 간의 상관관계에 의문을 표함.
     * BMW와 Mini가 신뢰성 순위 상위에 오른 것에 대해 데이터를 무시해야 한다는 의견을 제시함. BMW는 복잡하고 특정한 방식으로 유지보수가 필요하며, 일반적인 차량보다 엄격한 관리가 요구됨을 지적함.
     * Toyota가 신뢰성 있는 차량을 만들면서도 열악한 코드를 작성한다는 비판을 제기함. 과거 소프트웨어 결함 관련 소송에서 드러난 Toyota의 코드 작성 방식에 대해 지적하며, 일본 기업의 소프트웨어 개발 속도와 품질에 대한 아이러니를 언급함.
     * JD Power의 신뢰성 보고서에 대한 의구심을 표하며, '초기 품질'이라는 지표의 신뢰성에 대해 비판함. 고가의 차량이 까다로운 소유자들로 인해 낮은 점수를 받는 경향이 있으며, 문제의 중요도에 따른 가중치가 없다는 점을 지적함.
     * 하이브리드 차량이 가솔린 차량보다 더 신뢰성이 있다는 주장이 Toyota의 영향 때문일 수 있다는 의문을 제기함.
     * 1992년식 Mercedes-Benz e420 (w124) 모델의 신뢰성과 내구성에 대한 만족감을 표현함. 30년이 넘은 차량임에도 불구하고 장거리 여행에 문제가 없음을 언급함.
     * 친구들이 차량을 구매할 때, 일부는 비싼 Tesla를 선택한 반면, 한 친구는 저렴한 1996년식 Toyota Rav-4를 구매한 경험을 공유함. Rav-4의 운전 경험과 가시성, 기계적 만족감을 긍정적으로 평가하며, 가격 대비 성능에 대한 의견을 제시함.
     * 2015년식 Mazda 차량의 신뢰성에 대한 만족감을 표현하면서도, 차량의 디자인과 운전 재미에 대한 개인적인 불만을 표현함. 이전에 소유했던 차량과 비교하여 재미와 개성이 부족하다고 느낌.
     * Consumer Reports의 자가 보고 방식의 신뢰성 조사 결과에 대한 의문을 제기함. 자가 보고 설문조사의 편향성과 Toyota 구매자들의 신뢰성에 대한 기대감이 결과에 영향을 미칠 수 있다는 점을 지적함.
"
"https://news.hada.io/topic?id=12111","Ripgrep, grep, ag, Git grep, ucg, pt, sift보다 빠른 검색 기술 (2016년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ripgrep, grep, ag, Git grep, ucg, pt, sift보다 빠른 검색 기술 (2016년)

요약: 새로운 명령줄 검색 도구 ripgrep 소개

     * ripgrep은 The Silver Searcher의 사용성과 GNU grep의 성능을 결합한 새로운 명령줄 검색 도구임.
     * 리눅스, 맥, 윈도우용 바이너리를 제공하며 Rust로 작성됨.
     * 단일 파일 및 대규모 디렉토리 검색에서 성능과 정확성 면에서 뛰어남.
     * 유니코드 지원이 탁월하며, 메모리 맵을 사용하는 도구보다 일반적으로 더 빠름.

ripgrep 소개

  장점

     * 다른 검색 도구보다 빠르며, .gitignore에 의해 무시되는 파일은 검색하지 않음.
     * 특정 파일 유형만 검색하거나 제외하는 기능 제공.
     * grep의 많은 기능을 지원하며, 유니코드를 항상 지원함.
     * PCRE2 정규 표현식 엔진을 선택적으로 사용할 수 있음.
     * 다양한 텍스트 인코딩과 압축된 파일 검색 지원.
     * 임의의 입력 전처리 필터 지원.

  반대 의견

     * POSIX 표준을 준수하지 않으며, grep보다는 보편적이지 않음.
     * 다른 도구에 있는 특정 기능이나 버그가 ripgrep에는 없을 수 있음.
     * 성능의 특정 엣지 케이스에서 ripgrep이 다른 도구보다 느릴 수 있음.

  설치

     * ripgrep의 바이너리 이름은 rg이며, 다양한 플랫폼에서 설치 가능.
     * Homebrew, Archlinux, Rust 프로그래머를 위한 설치 방법 제공.
     * 소스에서 직접 빌드하는 것도 가능.

  빠른 투어

     * ripgrep의 명령줄 사용법은 다른 유사한 도구와 크게 다르지 않음.
     * 터미널 출력, 색상, 줄 번호 표시 등을 자동으로 지원.
     * 다양한 검색 옵션과 패턴을 사용하여 검색 가능.

ripgrep의 구조

  배경

     * grep과 ack의 후손 도구들 간의 차이점과 공통점을 설명.
     * ripgrep은 grep의 대용량 파일 검색 능력과 ack의 ""스마트"" 검색 기본 설정을 결합함.

  파일 검색 준비

     * 빠른 디렉토리 반복자 사용과 파일 경로 필터링이 중요.
     * .gitignore 파일의 규칙을 빠르게 적용하는 것이 성능에 영향을 미침.

  검색

     * 빠른 정규 표현식 엔진과 리터럴 최적화가 중요함.
     * 전체 파일이 아닌 라인별로 검색하지 않고 큰 버퍼를 한 번에 검색함.

  출력

     * 검색 결과를 메모리 버퍼에 쓰고, 이를 stdout으로 직렬화하여 출력함.

방법론

  개요

     * 사용자가 해결하려는 문제에 초점을 맞추고, 공정한 벤치마크를 위해 노력함.
     * 다양한 도구를 벤치마크하고, 각 도구의 기본 동작 차이를 고려하여 비교함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 ripgrep이 기존의 검색 도구들과 비교하여 어떤 장점을 가지고 있는지를 상세히 설명하고 있다는 점입니다. 특히, 빠른 성능과 유니코드 지원, 다양한 파일 형식과 인코딩에 대한 지원 등이 사용자에게 매력적인 이유가 될 수 있습니다. 이 글이 흥미로운 이유는 새로운 도구가 기존 도구들과 어떻게 다른지, 그리고 그 차이가 실제 사용자에게 어떤 영향을 미칠 수 있는지를 이해하는 데 도움을 주기 때문입니다.

        Hacker News 의견

     * ripgrep과 fzf의 조합은 매우 빠르며, 이를 활용하는 Powershell 함수 예시가 제공됨. 이 함수는 ripgrep으로 검색한 후 fzf를 사용하여 퍼지 검색을 하고, bat를 통해 결과의 컨텍스트를 보여줌. 이 방법은 여러 저장소 프로젝트에서 특정 내용의 위치를 빠르게 찾는 데 유용함.
     * Emacs의 project.el 패키지와 dumb-jump 패키지를 사용하여 ripgrep을 활용하는 방법이 소개됨. dumb-jump는 특정 프로젝트 디렉토리 내에서 현재 파일 유형에 대한 검색을 자동으로 제한하며, ag라는 또 다른 빠른 도구도 지원함.
     * ripgrep이 Node.js 래퍼를 통해 VS Code 검색 기능을 제공한다는 사실이 흥미로움.
     * ripgrep 사용자는 grep 대비 사용의 용이성과 속도 향상을 주된 이유로 꼽으며, 특히 gitignore 규칙을 자동으로 적용하는 기능을 유용하게 사용함.
     * ripgrep, ag와 같은 병렬화된 grep 대체품들이 grep보다 훨씬 빠르기 때문에 속도 차이가 큰 기준이 되지 않으며, 다른 방식으로 평가해야 함을 언급함.
     * ripgrep의 초기 발표가 2016년이었음을 지적하며, 제목에 연도 표시가 필요함을 제안함.
     * qgrep은 인덱스를 사용하여 빠른 속도를 제공하지만, UTF8 멀티라인 매치가 필요할 때는 ripgrep이 느려질 수 있음을 언급함.
     * Emacs 내에서 ripgrep을 사용하는 Consult 패키지를 통해 프로젝트 전체 편집을 수행하는 편리한 워크플로우를 공유함.
     * ripgrep-all 버전은 PDF와 doc 파일과 같은 다른 문서 유형에서도 작동한다는 정보를 제공함.
     * grep이 왜 대체되거나 개선되지 않는지에 대한 의문을 제기하며, 이 주제가 다소 오래되었다고 평가함.
"
"https://news.hada.io/topic?id=12133","청각 신경 손상과 연관된 이명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            청각 신경 손상과 연관된 이명

청각 신경 손상과 이명의 연관성

     * 매사추세츠 아이 앤 이어(Mass Eye and Ear) 연구진이 전 세계 성인의 10% 이상에게 영향을 미치는 이명과 감지되지 않는 청각 신경 손상 간의 연관성을 밝혀냄.
     * 정상적인 청력 검사를 통과한 사람들도 '숨겨진 청력 손실'을 겪을 수 있으며, 이는 청각 신경 재생에 초점을 맞춘 새로운 치료법 개발의 길을 열 수 있음.
     * 이 연구는 이명과 감지되지 않는 청각 신경 손상을 연결짓는 혁신적인 발견으로, 기존의 믿음에 도전하며 청각 신경 재생을 통한 치료법 개발의 새로운 길을 제시함.

이명이 삶의 질에 미치는 영향

     * 이명 증상은 지속적인 귀울림 또는 기타 소리로, 많은 환자들에게 수면 부족, 사회적 고립, 불안, 우울증을 유발하고 업무 성과에 부정적인 영향을 미쳐 삶의 질을 현저히 저하시킴.
     * 이명의 발생 기전을 완전히 이해하지 못하면 치료할 수 없으며, 이 연구는 이명을 침묵시키기 위한 최종 목표로 나아가는 첫 걸음임.

이명과 청력 손실에 대한 새로운 생각

     * 청력 손실을 호소하는 많은 사람들이 귀에서 윙윙거림, 윙윙거림, 울림 또는 심지어 포효하는 소리를 경험함.
     * 이명 증상은 뇌의 부적응적인 가소성, 즉 청력 손실을 보상하기 위해 뇌 활동이 증가하여 환청인 이명을 인지하게 되는 결과로 생각되어 왔음.
     * 그러나 2009년 매사추세츠 아이 앤 이어 연구진이 발견한 '코클리어 시냅토파시(cochlear synaptopathy)'는 정상적인 청력 검사를 받은 환자들도 청각 신경에 상당한 손실이 있을 수 있음을 보여주며 이 가설을 다시 활성화시킴.

이명 치료를 위한 잠재적인 접근

     * 연구진의 작업은 이명이 정상 청력을 가진 사람들을 포함하여 청각 신경의 손실에 의해 유발될 수 있음을 조화롭게 설명함.
     * 향후 연구 방향에서는 신경 영양인자(neurotrophins)라는 약물을 사용하여 청각 신경을 재생시키는 최근의 작업에 주력할 예정임.
     * 연구진은 언젠가 뇌에 빠진 소리를 되돌려주고, 재훈련과 함께 뇌의 과잉 활동을 줄일 수 있을 것이라는 희망을 가지고 있음.

GN⁺의 의견

   이 연구는 이명이 단순히 귀의 문제가 아니라 청각 신경 손상과 관련이 있음을 밝혀내며, 이명을 겪는 많은 사람들에게 새로운 희망을 제공한다. 특히 정상 청력 검사를 받은 사람들도 숨겨진 청력 손실을 겪을 수 있다는 점은 청각 건강에 대한 이해를 새롭게 하며, 청각 신경 재생을 통한 치료 가능성을 열어준다. 이 연구가 흥미로운 이유는 이명의 원인과 치료에 대한 새로운 접근 방식을 제시하고, 많은 환자들의 삶의 질을 향상시킬 수 있는 가능성을 내포하고 있기 때문이다.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자는 머리/얼굴/턱 근육을 움직여 이명을 악화시킬 수 있음을 발견함.
          + 이러한 현상은 어릴 때부터 있었으며, 이명 발생 전부터 경험했음.
          + 이명이 근육과 관련된 물리적 원인일 수 있음을 시사하며, 청력 손상이나 신경학적 요인과는 다를 수 있음을 추측함.
          + 의사는 이 현상을 중요하지 않게 여겼으나, 비슷한 경험이 있는 사람들의 통찰을 얻고자 공유함.
     * 두 번째 댓글 요약:
          + 댓글 작성자는 청력 손실을 이해하기 위해 오디오모스를 사용하여 새들의 울음소리를 기록함.
          + 오디오 편집 프로그램을 사용하여 이명의 주파수 범위를 파악하고, 청력 손실의 정도를 이해함.
          + 이 정보를 바탕으로 영향을 받은 주파수 대역을 강화하는 보청기를 설계할 수 있을 것으로 기대함.
     * 세 번째 댓글 요약:
          + 댓글 작성자는 이명과 과민성 청각을 앓고 있으며, 처음 발생했을 때는 매우 힘들었으나, 시간이 지나면서 배경 소음으로 무시할 수 있게 됨.
          + 최근에 이명이 재발하여 다시 적응하는 과정을 겪고 있음.
          + 이명을 심각한 부상처럼 대하고, 치유를 위한 시간을 갖고, 자신을 탓하지 말며, 우울증이 있다면 도움을 받을 것을 권장함.
     * 네 번째 댓글 요약:
          + 댓글 작성자는 이명이 뇌의 부적응적 가소성으로 인해 발생한다는 이론에 동의하지 않음.
          + 이명이 청각 신경에서 기계적 움직임을 전기적 신호로 변환하는 과정의 문제로 보임.
          + 과도한 소음에 의해 이 과정이 손상되어 이명이 발생할 수 있음을 추측함.
     * 다섯 번째 댓글 요약:
          + 댓글 작성자는 이명의 특정 주파수에 해당하는 음을 들으면 잠시 동안 이명이 사라지는 현상을 경험함.
          + 이 현상은 잔류 억제라고 불리며, 벤조디아제핀과 같은 약물이 일시적으로 이명을 완화시킬 수 있음을 언급함.
          + 이명의 원인과 치료에 대한 연구가 아직 진행 중이며, 청력 보호의 중요성을 강조함.
     * 여섯 번째 댓글 요약:
          + 댓글 작성자는 이명을 가지고 있으며, 때때로 그 존재를 잊을 수 없을 정도로 불편함을 느낌.
          + 삶에서 이명 없이 지낼 수 있는 경험을 다시 하고 싶어함.
     * 일곱 번째 댓글 요약:
          + 댓글 작성자는 청각 신경 손상으로 인해 이명을 겪고 있으며, 뇌 수술 후에도 이명이 지속됨.
          + 이명이 단순히 미감지 신경 손상 때문만은 아닐 수 있음을 시사함.
     * 여덟 번째 댓글 요약:
          + 댓글 작성자의 이모는 이명을 겪었으며, MRI 검사를 받지 않고 치료받지 못함.
          + 결국 다른 증상이 나타나 MRI를 받았을 때 뇌암이 발견됨.
          + 이명이 뇌암의 증상일 수 있음을 경고함.
     * 아홉 번째 댓글 요약:
          + 댓글 작성자는 목의 자세를 교정하여 이명을 거의 치료함.
          + 나쁜 자세로 인해 이명이 재발할 경우, 목 마사지와 자세 교정으로 증상을 완화시킴.
     * 열 번째 댓글 요약:
          + 댓글 작성자는 이명의 원인에 대한 다양한 추측을 언급하며, 청력 손실이 이명을 유발할 수 있음을 설명함.
          + 신경계가 자가 조절 피드백 루프로 작동하며, 입력이 끊어지면 이명과 같은 증상을 유발할 수 있음을 논함.
"
"https://news.hada.io/topic?id=12147","LLM 시각화(Visualization)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         LLM 시각화(Visualization)

     * GPT-2, nano-gpt, GPT-3 등 대형 언어 모델의 작동 원리를 시각적으로 설명하는 가이드
     * 목차: 소개 및 예비 지식, 임베딩, 레이어 정규화, 셀프 어텐션, 프로젝션, MLP, 트랜스포머, Softmax, 출력

전체 소개 부분 요약

     * 'nano-gpt' 의 경우 85,000개의 매개변수를 가지고 있음
     * 주어진 여섯 글자의 문자열을 알파벳 순으로 정렬하는 것이 목표
     * 문자열 'C B A B B C'를 입력받아 'ABBBCC'로 정렬하는 과정을 예로 들 수 있음.
     * 문자열의 각 글자를 '토큰'이라고 부르며, 모델의 어휘는 다양한 토큰으로 구성됨
     * 각 토큰은 숫자 인덱스로 할당되며, 이를 모델에 입력함
     * 각 숫자는 48개 요소의 벡터로 변환되는데, 이를 '임베딩'이라고 함
     * 임베딩은 '트랜스포머'라 불리는 일련의 레이어를 통과함.
     * 최종적으로 모델은 주어진 시퀀스의 다음 토큰에 대한 확률을 예측함
     * 예측된 토큰은 모델의 상단으로 다시 입력되어 전체 과정이 반복됨

        Hacker News 의견

     * LLM을 근본적으로 이해하는 데 아주 유용한 도구임
          + LLM이 실제로 어떻게 작동하는지 깊이 이해할 수 있는 훌륭한 도구로 평가됨.
          + 만약 첫 번째 배열에 48개의 요소가 왜 있는지 이해가 안 갈 경우, minGPT의 model.py를 참조하라는 조언이 있음.
          + 이러한 구조적 결정은 문맥을 잘 모르는 사람들에게 혼란을 줄 수 있으므로 기사에서 언급하는 것이 좋을 것이라는 의견 제시.
     * 알고리즘 복잡성이 3D 공간에서 명확하게 표현된 것을 보고 놀람
          + 알고리즘의 복잡성이 3D로 명확하게 표현된 것에 대한 감탄을 표함.
          + 그 정확성에 대해 충분히 이해할 수 있는 지식이 있는지에 대한 개인적인 바람을 나타냄.
     * 이 시각화는 정말 놀라움.
          + 오랫동안 깊이 있게 파고들고 싶었는데, 3D 모델은 교육적인 도구로서 놀라울 정도임.
     * 몇 달 동안 찾던 시각화 방법임
          + 오랫동안 찾아온 시각화 방법을 발견하여 매우 만족함.
          + 이러한 자료가 무료로 제공되는 것에 대해 감사함을 표현함.
     * '마법을 매트릭스 곱셈과 점곱으로 해부하기'라고 제목을 붙여도 좋을 정도임.
          + LLM이 잘 작동한다는 사실에 더 놀라움.
     * 3D 모델이 교육적으로 놀라울 정도임
          + 3D 모델이 교육적인 도구로서 매우 인상적이라는 의견을 나타냄.
          + 깊이 있는 학습을 위한 훌륭한 자료로 평가함.
     * LLM이 어떻게 잘 작동하는지에 대해 더욱 놀라움
          + LLM의 작동 원리를 기초적인 수준에서 분석한 내용에 대해 긍정적인 평가를 함.
          + LLM이 잘 작동하는 것에 대해 더욱 놀라움을 표현함.
     * 자기 주의(self attention)의 강력함에 대한 설명이 종종 누락됨
          + 전통적인 신경망과 달리, 자기 주의 계층은 맥락에 기반하여 입력 사이의 연결을 적응적으로 가중함.
          + 이를 통해 트랜스포머는 전통적인 네트워크가 여러 계층을 거쳐야 할 작업을 단일 계층에서 수행할 수 있음.
     * 저자의 트위터 스레드에서 이 작업에 대한 추가 맥락을 공유함
          + 저자가 이 작업에 대한 추가적인 배경을 트위터 스레드를 통해 공유함.
     * 자신의 모델을 위한 저차원 버전을 원한다면 Netron 라이브러리를 추천함
          + 모델 아키텍처 시각화를 위한 Netron 라이브러리에 대한 긍정적인 평가와 추천을 함.
     * 단순한 3D 모델이 아닌 깊이 있는 작업임
          + 처음에는 단순한 3D 모델로 생각했지만, 애니메이션과 함께 제공되는 깊이 있는 내용에 대해 감탄함.
     * 이 시각화는 정말 놀라움.
          + 트랜스포머를 이해하려고 애쓸 때 이것을 봤더라면 훨씬 쉬웠을 것임.
     * 해커뉴스를 사랑하는 이유임
          + 이러한 우수한 자료가 해커뉴스에 공유되는 것에 대해 긍정적인 반응을 보임.
"
"https://news.hada.io/topic?id=12103","Adobe의 Figma 인수는 개발자들에게 '나쁜' 영향을 미칠 수 있다고 영국 규제당국이 경고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Adobe의 Figma 인수는 개발자들에게 '나쁜' 영향을 미칠 수 있다고 영국 규제당국이 경고

Adobe와 Figma의 합병에 대한 영국 경쟁 시장 규제 기관의 잠정적 판단

     * 영국의 경쟁 시장 규제 기관(Competition Markets Authority, CMA)은 Adobe의 Figma 인수가 소프트웨어 개발자에게 해로울 것이라는 잠정적 판단을 내림.
     * CMA는 Figma를 Adobe에 대한 ""등장하는 위협""으로 분류하고, 합병에 대한 심층 조사를 시작함.
     * 합병이 승인되면 Adobe가 Figma에 대해 가지고 있는 제약이 사라져, 혁신과 경쟁적인 신제품 개발이 감소할 것이라는 우려가 제기됨.

Figma의 시장 영향력과 Adobe의 대응

     * Figma는 Airbnb, Patagonia, Vodafone과 같은 유명 기업들이 사용하는 웹 기반 디자인 협업 도구를 제공함.
     * Adobe는 Figma와의 경쟁으로 인해 자사의 Photoshop과 Illustrator 애플리케이션을 포함한 이미지 편집 및 일러스트레이션 소프트웨어 개발을 촉진했음.
     * 합병으로 인해 이러한 경쟁이 사라지면 디자이너와 크리에이티브 에이전시가 새로운 도구 사용이나 미래 업데이트에 의존하는 데 해가 될 것이라는 CMA의 보고서 내용.

합병에 대한 규제 기관의 대응과 Adobe의 입장

     * CMA는 합병에 대한 최종 결정을 내리기 전에 잠정적 판단에 대해 의견을 수렴하고, 가능한 해결책을 고려할 예정임.
     * Adobe는 합병으로 인한 고객 가치 증대를 주장하며, CMA의 잠정적 판단에 대해 실망감을 표시하고 반박함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 Adobe와 Figma의 합병이 소프트웨어 개발자와 디자이너 커뮤니티에 미칠 수 있는 잠재적 영향과 관련된 영국 경쟁 시장 규제 기관의 잠정적 판단이다. 이 합병이 혁신과 경쟁을 억제할 수 있다는 우려는 기술 산업의 건강한 경쟁 환경을 유지하려는 규제 기관의 중요한 역할을 보여준다. 이러한 이슈는 기술 산업의 미래와 관련된 중대한 결정에 대한 통찰력을 제공하며, 이는 많은 이해관계자와 소비자에게 흥미로운 주제가 될 것이다.

   실제 합병되고 우려대로 되면, 이 친구가 더 인기 있어지겠네요
   https://news.hada.io/topic?id=3779
"
"https://news.hada.io/topic?id=12113","지금까지 본 가장 이상한 버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            지금까지 본 가장 이상한 버그

이상한 버그의 발견과 해결 과정

     * 내부 도구 팀의 온콜 근무 중, 구스토(Gusto)의 내부 소프트웨어를 사용하는 사용자들이 크롬 브라우저 충돌 문제를 경험함.
     * 이 문제는 고객 서비스에 다양한 방해를 초래함.
     * 문제 해결을 위해 경험 많은 동료, 제품 인프라 팀, IT 팀의 도움을 받음.

첫 번째 단서

     * 영향을 받은 사용자들에게 공통점을 찾으려 시도함.
     * 모든 구스토 직원이 영향을 받은 것은 아니며, 고객 대면 소프트웨어는 문제가 없음.
     * 다른 내부 소프트웨어 웹페이지는 정상 작동함.
     * 충돌은 일관성 없이 발생하며, 사파리나 파이어폭스에서는 문제가 발생하지 않음.

두 번째 단서

     * 크롬 버전이 문제일 수도 있다는 가설을 세움.
     * 일부 사용자가 크롬 버전을 업데이트했을 때 문제가 해결된 것처럼 보였으나, 완전히 해결되지는 않음.
     * 크롬 확장 프로그램이 문제일 수도 있다고 추측했으나, 확장 프로그램 없이도 문제가 재현됨.

버그 재현의 어려움

     * 인프라 팀이 모든 엔지니어에게 문제 재현을 요청함.
     * 터키의 두 엔지니어를 제외하고는 엔지니어 팀에서는 충돌을 보고하지 않음.
     * 크롬 충돌 보고 기능이 보안상 비활성화되어 있어 문제 해결에 어려움을 겪음.

행운의 전환점

     * 덴버의 한 엔지니어가 그래머리(Grammarly) 데스크톱 앱을 다운로드한 후 문제가 발생했다고 보고함.
     * 그래머리 앱을 삭제하고 컴퓨터를 재시작하면 문제가 해결됨을 발견함.

진전

     * 디버깅이 가능해지면서, 문제의 원인을 찾기 위해 여러 시도를 함.
     * 주요 내부 애플리케이션은 ActiveAdmin을 기반으로 구축되었으나, React를 사용하는 새로운 부분은 충돌하지 않음.
     * 공통 코드 부분을 조사하던 중 'My History' 드롭다운 메뉴가 문제의 원인임을 발견함.

문제 해결

     * 'loader-spinner.gif' 이미지 파일이 문제를 일으키는 것으로 확인됨.
     * 해당 GIF를 다른 이미지로 교체하자 페이지가 더 이상 충돌하지 않음.
     * 그래머리나 크롬 중 하나가 문제를 해결했는지, 이제는 원래의 GIF가 크롬을 충돌시키지 않음.

결론

     * 예상치 못한 애니메이션 GIF가 디버깅의 해답이었음.
     * 호기심과 협력을 통해 문제를 해결함.
     * 구스토는 협력적이고 호기심 많은 사람들과 함께 일할 수 있는 기회를 제공함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 예상치 못한 원인으로 인한 버그를 발견하고 해결한 과정의 상세한 기술임. 이 글은 소프트웨어 엔지니어링의 복잡성과 예측 불가능성을 보여주며, 팀워크와 끈기 있는 문제 해결 능력이 얼마나 중요한지를 강조함. 엔지니어링 팀이 어떻게 협력하여 난해한 문제를 해결하는지에 대한 흥미로운 사례를 제공하며, 이는 엔지니어링 분야에 관심 있는 사람들에게 매우 매력적인 이야기가 될 것임.

        Hacker News 의견

     * 특정 GIF 파일로 인한 버그 발생에 대한 놀라움과 의심

     한 사용자는 코드 내에서 일련의 우연이 겹쳐 특정 GIF 파일로 인한 버그가 발생하는 것을 믿기 어렵다고 언급함. Grammarly 앱에 대한 의구심도 표현하며, 많은 사람들이 문법 제안을 받기 위해 사실상 스파이웨어와 같은 앱을 설치하고, 회사에서 이를 허용하는 것에 대해 놀라움을 표함.
     * 대학 교수의 연구 논문 작업 중 발생한 밑줄 인쇄 문제

     한 대학 교수가 연구 논문 작업 중 텍스트 밑줄이 인쇄되지 않는 문제를 겪었고, 이는 특정 비디오 카드 드라이버와 프린터 드라이버의 조합으로 인한 것으로 밝혀짐.
     * Grammarly 관련 버그 경험 공유

     한 사용자는 과거 Grammarly 확장 프로그램이 설치된 특정 부서 내에서 비슷한 버그를 경험했으며, 이는 스테이징 환경의 URL에서만 발생하고, 잘못된 정규 표현식으로 인해 페이지가 멈추는 현상이었음.
     * 버그 수정에 대한 실망감 표현

     한 사용자는 버그 수정 과정을 추리 소설처럼 즐겼으나, 결국 버그의 정확한 원인을 알 수 없게 되어 실망함을 표현함.
     * 윈도우와 리눅스 듀얼 부팅 시 오디오 문제

     윈도우에서 재부팅 후 리눅스에서 사운드가 없는 문제가 발생했으며, 이는 윈도우가 오디오 장치를 완전히 종료하지 않고 대기 모드로 전환하기 때문이라는 것을 발견함.
     * 2023년 웹 환경에서의 버그 발생에 대한 흥미

     기술의 복잡한 결합으로 인해 발생한 버그에 대해 흥미를 표현하며, 크로미움 버그가 해결되었는지 궁금해함.
     * 크롬의 접근성 도구와 관련된 버그 경험 공유

     크롬의 접근성 도구가 유사한 버그를 일으킨 경험을 공유하며, Grammarly가 크롬의 접근성 도구에 의존할 가능성을 언급함.
     * 페이지 번역 설정으로 인한 혼란 공유

     사용자가 입력한 정보의 문구가 저장 시 변경된다고 주장하는 문제가 발생했으나, 이는 크롬의 ""이 페이지 번역하기"" 옵션이 켜져 있어서 발생한 것으로 밝혀짐.
     * 웹사이트 CSS로 인한 리눅스 데스크탑 충돌 경험 공유

     Yahoo 검색 페이지의 CSS가 Red Hat Linux에서 데스크탑 충돌을 일으킨 경험을 공유하며, 크롬 개발팀에 버그를 보고할 것을 제안함.
     * 버그 해결이 중요한 보안 취약점이 될 수 있음에 대한 의견

     버그를 해결할 수 있다면, 이는 매우 가치 있는 보안 취약점이 될 수 있다는 의견을 제시함.
"
"https://news.hada.io/topic?id=12102","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   머리 식힐겸 오사카에 놀러가요 ㅎ
   열심히 힐링 하다 올 생각입니다 :)

   날씨 더 추워지기 전에 세차 싹 하고 월동준비할 예정입니다

   여자친구랑 데이트하러갑니다.

   연말에 남은 복지 포인트 털러 비싼 레스토랑에 갑니다 ㅎㅎ

   연극 보러 가요~
   지난 주에는 쉬다가, 바둑앱을 깔아 혼자 배워보기 시작했습니다.
   나중에 아버지 바둑 친구해드릴까 하여 연습중인데 너무 어렵네요. 초급 상대봇한테 자꾸 집니다. ㅠㅠ

   쓰시는 바둑 앱이 궁금합니다 :)

   앗.. 이제 일주일차인데요. ㅎㅎ 아이패드에 바둑배우기(입문) 깔아서 공부했고요. 그런 후 지금은 ™바둑 이라는 앱 깔아서 연습하고 있어요. 이미 둔 수를 물릴 때 꽤 짧은 광고를 보면 되더라고요.

   아는 개발자 분들과 함께 한달에 한번씩 토요일 보드게임 모임을 합니다.
   점심때부터 모여서 10시간 정도 달리는데요. 조금 긴 전략게임을 맘 편히 할 수 있어서 매번 기대 됩니다.
   이번 모임은 브라스-버밍엄, 테오티우아칸, 행성X를 찾아서, 에이지 오브 스팀, 혁신의 시대 정도를 돌려볼수 있을 것 같아요.
"
"https://news.hada.io/topic?id=12174",""Have I Been Pwned"의 10년 역사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ""Have I Been Pwned""의 10년 역사

A Decade of Have I Been Pwned

     * Have I Been Pwned는 데이터 유출 사고가 발생했을 때 사용자의 이메일이 포함되었는지 확인할 수 있는 서비스임.
     * 이 서비스는 10년 동안 사용자들에게 데이터 유출 정보를 제공하며 인터넷 보안에 기여함.
     * 사용자들은 이메일 주소를 입력하여 자신의 개인 정보가 유출된 사건이 있는지 확인할 수 있음.

  GN⁺의 의견

     * Have I Been Pwned 서비스는 개인 정보 보호와 사이버 보안에 중요한 역할을 함.
     * 이 서비스는 사용자들이 자신의 데이터가 위험에 노출되었는지 쉽게 파악할 수 있게 해주어, 보안 의식을 높이는 데 기여함.
     * 10년이라는 긴 시간 동안 꾸준히 서비스를 제공해온 점이 특히 흥미롭고, 이는 사이버 보안 분야에서의 지속적인 노력과 진화를 반영함.

        Hacker News 의견

     * Troy Hunt는 웹 애플리케이션 개발자들에게 큰 자산임. 자격 증명 스터핑(credential stuffing)에 대한 보호 조치는 필수적이며, 특히 이중 인증이 가장 좋은 방어책이지만, Hunt의 해시된 비밀번호 데이터베이스를 확인하는 것도 사용자에게 추가 작업을 요구하지 않으면서 매우 효과적임.
     * 대부분의 계정 침해는 자격 증명 스터핑이나 비밀번호 재사용에서 비롯된다고 추측함. 대기업들이 이러한 검사를 하지 않는 것은 놀라운 일임. 설정은 간단하고 하루면 충분함.
     * 웹 앱을 개발 중인 초기 단계 엔지니어나 CTO라면, 자격 증명 스터핑 공격을 경험하지 않았을 수 있지만, 언젠가는 반드시 마주하게 될 것임. 공격을 받게 되면, 밤새 대응하고, 데이터 유출 통지를 해야 하는 등의 어려움을 겪게 됨.
     * Troy Hunt의 무료 데이터베이스를 사용하면 이러한 어려움을 예방할 수 있음. 사용을 권장함.
     * Troy Hunt이 이혼에 대해 구체적으로 언급한 바 있는지, 자산 분할과 소유권 결정으로 인해 길고 비용이 많이 들었을 것이라고 추정함.
     * 사이트가 이전에는 훌륭한 경험을 제공했지만, 이제는 연간 $169.50을 지불하고 100개의 침해된 계정을 확인해야 하는 등 돈을 벌기 위한 수단으로 변했다고 느낌.
     * 각 웹사이트마다 고유한 이메일 주소(데이터 유출 감지용)를 사용하는데, 도메인 결과를 검색하려 할 때 구독이 필요하다는 오류를 마주함.
     * Troy Hunt이 공개 데이터 컴파일을 '침해'로 포함시켜 침해된 계정 수를 인위적으로 늘린다고 비판함. 연간 $5-12 정도의 비용이면 합리적일 것이라고 생각함.
     * haveibeenpwned.com과 유사한 다양한 도메인 이름들이 생겨나는 것은 미디어 명성의 재미있는 부작용이라고 평가함.
     * Troy Hunt의 글이 매우 유익하다고 생각함. k-익명성을 이용해 비밀번호를 전송하지 않고도 pwned 파일을 확인하는 방법에 대해 읽고, 이를 연구하고 전문적인 프로젝트에 적용한 경험을 공유함.
     * 해커들이 pwned 비밀번호 데이터베이스를 사용하여 설득력 있는 피싱 이메일을 만들어내고 있음. 이러한 사기에 사람들이 속아 넘어가는지 궁금함. 대부분 스팸 필터에 걸러지지만, 가끔은 스팸 필터를 통과하는 경우도 있음. HIBP 서비스와 Troy Hunt의 글에 감사함을 표함.
     * HaveIBeenPwned가 사용자 인식에 미친 영향을 강조함.
     * SpyCloud가 더 큰 데이터셋을 가지고 있고, 기업들과 직접 협력하여 자격 증명 재사용을 실제로 완화하는 데 기여하고 있음에도 충분한 인정을 받지 못한다고 느낌.
     * 지난 10년간 스토킹 피해자들이 HaveIBeenPwned를 사용하여 자신의 계정과 사생활을 침해당했을 가능성에 대해 생각함.
     * 사이트는 나쁜 행위자가 서비스를 이용하기 전에 사용자가 먼저 가입하고 검색 결과에서 자신의 정보를 숨겨야 한다는 입장을 유지함.
     * 개인 정보 보호에 중점을 둔 사람들을 위해 HaveIBeenPwned에서 자신의 정보를 공개 검색에서 제거하는 방법을 공유함.
     * Troy Hunt이 제트 스키를 타며 자유를 만끽하는 것에 대한 언급이 있음.
"
"https://news.hada.io/topic?id=12164","현대적인 JavaScript 프레임워크의 작동 원리를 직접 만들면서 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               현대적인 JavaScript 프레임워크의 작동 원리를 직접 만들면서 배우기

현대 자바스크립트 프레임워크의 작동 원리 이해하기

     * 자신의 자바스크립트 프레임워크를 만들어보는 것이 학습에 도움이 됨.
     * ""현대 자바스크립트 프레임워크""는 React 이후의 프레임워크를 의미함.
     * 이러한 프레임워크들은 React로부터 영감을 받았지만, 서로 비슷한 방향으로 진화함.

현대 프레임워크의 특징

     * DOM 업데이트를 위한 반응성(reactivity) 사용.
     * DOM 렌더링을 위한 템플릿 복제(cloning templates) 사용.
     * <template> 및 Proxy와 같은 현대 웹 API 사용.

반응성(Reactivity)

     * React는 반응형이 아니라고 종종 언급됨.
     * 현대 프레임워크는 푸시 기반의 반응 모델을 사용하여 성능을 우선시함.
     * Proxy를 이용하여 상태가 변경될 때마다 DOM이 업데이트되도록 구현함.

DOM 트리 복제(Cloning DOM trees)

     * <template> 태그를 사용하여 HTML을 한 번 파싱한 후 전체를 빠르게 복제하는 기술이 효율적임.
     * 이 방법은 다양한 자바스크립트 프레임워크에서 사용되고 있음.

현대 자바스크립트 API

     * <template>과 Proxy는 반응성 시스템을 구축하는 데 도움이 되는 API임.
     * 태그된 템플릿 리터럴(tagged template literals)을 사용하여 HTML 템플릿 API를 간단하게 만듦.

반응성 구축 단계

     * 상태 관리와 상태 변경 시 DOM 업데이트를 정의하는 반응성이 프레임워크의 기반이 됨.
     * Proxy를 사용하여 상태 변경을 감지하고, queueMicrotask를 통해 업데이트를 효율적으로 관리함.

DOM 렌더링 단계

     * html 함수를 사용하여 DOM 트리를 구축하고 효율적으로 업데이트함.
     * 태그된 템플릿 리터럴을 사용하여 HTML 템플릿을 작성하고, WeakMap을 이용하여 HTML 파싱을 최적화함.

반응성과 DOM 렌더링 결합

     * createEffect를 사용하여 상태에 따라 DOM을 업데이트함.
     * 상태 변경 시 자동으로 텍스트가 업데이트되도록 구현함.

다음 단계

     * DOM 렌더링 시스템을 개선할 수 있는 여러 방법이 있음.
     * 템플릿을 한 번만 파싱하고, 바인딩을 한 번만 설정하여 업데이트를 최소화하는 것이 목표임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 현대 자바스크립트 프레임워크의 핵심 개념과 구현 방법을 이해하고, 실제로 자신만의 프레임워크를 만들어보는 경험을 통해 학습하는 과정임. 이러한 접근 방식은 초급 소프트웨어 엔지니어들에게 프레임워크의 내부 동작을 이해하고, 실제로 적용해볼 수 있는 기회를 제공하여 흥미롭고 유익한 학습 경험이 될 수 있음.

        Hacker News 의견

     * 관심 있는 주제에 대한 기본적인 이해를 위해 다음 자료들을 추천함:
          + 증분 컴퓨팅: 위키피디아 링크
          + 자기 조정 계산: Umut A. Acar의 논문
          + JaneStreet의 증분 컴퓨팅 소개: 블로그 링크
          + 웹과 증분 컴퓨팅: 블로그 링크
          + 자기 조정 DOM: 블로그 링크
          + 자기 조정 DOM과 차이가 나는 데이터: 블로그 링크
          + Rado Kirov의 증분 컴퓨팅 초안: Part 1, Part 2, Part 3
          + 반응형 UI의 통합 이론을 향하여: Raph Levien의 글
     * React에 대한 오해와 실제 동작 방식에 대한 설명:
          + 상태 업데이트 시 React는 전체 가상 DOM 트리가 아닌 해당 컴포넌트와 그 자식들만 재구성함.
          + useMemo는 재렌더링을 방지하지 않으며, React.memo가 그 역할을 함.
          + React가 ""push-only""가 아닌 이유는 업데이트를 버퍼링하기 때문임.
          + 신호(signals)의 장점은 DOM의 어떤 속성이 재렌더링되어야 하는지 프레임워크가 알고 있음을 의미하지만, 이것이 반응성을 의미하지는 않음.
     * Svelte에 대한 긍정적인 평가와 활용 사례:
          + Svelte 컴파일러는 확장성이 뛰어나며, Svelte 템플릿을 특별한 방식으로 처리할 수 있음.
          + Svekyll(정적 블로그 도구 Jekyll의 클론)을 Svelte로 구축한 경험 공유.
     * 반응형 프레임워크에 대한 다양한 관점:
          + Solid와 같은 반응형 프레임워크에 대한 소개 자료 제공.
          + solid-js의 반응성을 이해하기 위해 웹 렌더러/프레임워크를 작성한 경험 공유.
          + React를 직접 구현해보는 학습 자료 추천.
     * React의 반응성에 대한 질문과 토론:
          + React를 ""반응형""으로 만들 수 있는 방법에 대한 질문.
          + 더 이상의 JS 프레임워크 개발을 자제해야 한다는 의견.
     * 프론트엔드 프레임워크 경험이 풍부한 사람들에게 제기된 질문:
          + 렌더링 작업에 대한 효과 시스템(effect-system)을 지원하는 프레임워크/라이브러리에 대한 질문.
"
"https://news.hada.io/topic?id=12126","Emailspiration - 잘 디자인된 이메일 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Emailspiration - 잘 디자인된 이메일 모음

     * 잘 만들어진 이메일 디자인을 보고 영감 받기
     * 뉴스레터, SaaS (소개, 뉴스레터, 온보딩, 트라이얼 컨버전), 제품 업데이트, 온보딩/웰컴, Waitlist, B2B 등
"
"https://news.hada.io/topic?id=12117","스타니스와프 렘의 인공생명 비전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스타니스와프 렘의 인공생명 비전

스타니스와프 렘의 선견지명: 인공 생명에 대한 통찰

     * 스타니스와프 렘의 소설 ""The Invincible""은 우주선이 의사소통이 끊긴 자매 우주선의 운명을 알아보기 위해 불명확한 행성에 보내지는 이야기를 담고 있음.
     * 우주선의 항해사 로한과 그의 팀은 자율적으로 자기 복제하는 기계에서 진화한 생명체를 발견하며, 인간이 알려진 지식의 한계에 도달했을 때 어떤 행동을 취해야 하는지에 대한 고전적인 딜레마에 직면함.

인공 생명에 대한 과학적 예측

     * ""The Invincible""에서 렘은 인공 생명을 예측했으며, 이는 1940년대부터 추측되었지만 과학 분야로서의 명칭은 1986년 크리스토퍼 랭턴에 의해 붙여짐.
     * 인공 생명에 대한 중요한 논쟁 중 하나는 진화적 프로그램과 장치가 실제로 생명인지(강한 버전), 아니면 단지 생명을 모방하는 것인지(약한 버전)에 대한 것임.
     * 로버트 로젠을 포함한 연구자들은 지구상의 탄소 기반 생명체뿐만 아니라 외계 행성 시스템에서의 생명 가능성에 대해 생명 자체의 본질적 특성에 대해 추측함.

인공 생명체의 진화적 승리

     * 렘은 인공 생명체가 행성의 진화 경쟁에서 이기는 이유를 상상하면서, 이들이 태양 에너지를 사용하여 에너지를 충족시키는 방식으로 진화했다고 제안함.
     * 작은 인공 생명체일수록 에너지 요구가 적으며, 따라서 진화적 동인은 더 작은 형태로 이끌어, 뛰어난 지능이 아닌 무리 지능을 통해 승리함.
     * 인공 ""파리"" 무리가 강력한 전자기장을 생성할 수 있는 능력을 추가함으로써, 이 작은 인공 생명체들은 행성에서 진화적 승자일 뿐만 아니라 침략하는 인간에게 강력한 힘을 발휘함.

인공 생명 연구의 현대적 통찰

     * 현대 인공 생명 연구는 인공 존재의 무리가 복잡한 행동을 나타내기 위해 몇 가지 간단한 규칙만 필요하다는 렘의 통찰을 확인함.
     * 컴퓨터 시뮬레이션은 각 개체가 주변의 몇몇에게만 반응하며, 몇 줄의 코드로 구성된 규칙 세트를 가짐으로써 물고기, 새, 벌 등의 무리 행동을 정확하게 묘사함.

인간과 인공 생명체의 대조

     * 인간과 인공 ""파리"" 무리 사이의 대조는 인간 생명의 소중함, 승무원들이 위험에 처했을 때 구조될 것이라는 믿음에 기반한 인간 연대, 그리고 각 인간의 독특한 가치에 대한 가정을 드러냄.
     * 반면에 ""파리"" 무리의 개별 구성원은 서로 거의 동일하며, 쉽게 대체되어 폐기 가능하므로 자체적으로 가치가 없으며, 오직 무리만이 진화적 생존 가치를 가짐.

GN⁺의 의견

     * ""The Invincible""은 인간의 현재 상황과 미래에 대해 교훈을 줄 수 있는 최고의 과학 소설 중 하나임.
     * 이 작품은 인간 중심적 가정이 지구 밖의 생명체와의 만남에서 얼마나 지방적으로 보일 수 있는지를 제시함으로써, 우리가 우주 문명에서 어린아이와 같은 존재일 수 있음을 시사함.
     * 로한이 인간에게 모든 것이 주어지지 않았다는 결론을 내릴 때, 우리는 렘 자신이 인간의 윤리적 틀과 지구의 인간 착취를 지배하는 인간 중심적 가정에 도전하는 것을 들을 수 있음.

        Hacker News 의견

     * 렘은 과학과 철학에 관련된 거의 모든 주제에 대한 책을 가지고 있으며, ChatGPT에 대해서도 글을 썼음.
     * ""The Invincible""은 한 사용자의 최애 도서로, 12살 때 처음 발견한 이후로 몇 년에 한 번씩 재독함. 2020년에 적절한 현대 번역본과 훌륭한 오디오북이 나오면서 영어권에서도 제대로 인식되기 시작했음. 또한, 이 책을 바탕으로 한 비디오 게임이 출시되어 책에 대한 경의를 표하며 몇 가지 세부 사항을 변경했음에도 불구하고 게임을 매우 즐겼음.
     * 렘은 인공지능(AI)과 그것이 인류에게 제공하는 서비스의 한계에 대한 깊은 이해를 보여주는 많은 책을 저술했음. ""Pirx the Pilot"" 이야기 모음집을 추천하는데, 여기에는 AI의 결함, 기이함, 본능을 인간 지능의 진정한 반영으로 묘사한 단편들이 포함됨. 또한, AI의 역사적 개요를 제공하는 ""Golem XIV"" 서문에서는 각 반복이 더 비싸고 더 지능적이며 유용해질수록 결국 인간보다 더 똑똑해져 인간 문제에 무관심해진다고 설명함.
     * 렘은 다양한 장르의 스타일로 작성했으며, 폴란드 위키의 표에서 그의 작품이 소개된 장르를 잘 보여줌. 과학 소설뿐만 아니라 범죄 소설, 리얼리즘 소설, 철학 에세이 등 다양한 장르에 걸쳐 작품을 썼음.
     * 렘의 가장 예지력 있는 책은 1961년에 출판되었지만 이 세기의 정확한 초상을 그렸음. 그러나 그의 유머러스한 작품들, 예를 들어 ""Cyberiada""나 ""Star Diaries""를 더 선호함.
     * 렘의 미래에 대한 비전은 일관되고 인상적으로 예지력이 있었음. 그는 자신을 과학 소설 작가가 아닌 ""미래학자""로 묘사했을 것임. 그의 이야기는 기술을 배경으로 사용하여 사회 구조와 등장인물 간의 다양한 상호 작용을 탐구했지만, 동시에 이야기에 중요한 맥락으로 기술을 활용함. ""Peace on Earth""를 비롯한 그의 책은 어느 것이든 흥미로운 독서가 될 것임.
     * ""Stargate""의 복제기는 자기 조립을 통해 유기적인 형태를 만드는 인공 생명체의 시각화에 가까움. 그들의 유일한 목표는 자신들을 더 만들기 위해 물질을 소비하는 것임.
     * ""The Futurological Congress""에서 현실을 대체하는 알약에 대해 언급함. 우리는 그러한 현실에서 멀지 않음. ""Tales of Pirx the Pilot""에서는 점차적으로 모든 것이 ""기계화되는 두뇌""를 보여주며, 그 결과는 점점 더 슬퍼짐.
     * ""Invincible""은 인공 생명이 아닌 나노기술에 관한 것으로 보통 간주됨. 두 주제는 중첩되지만, 이 기사의 제목은 인공 생물을 만드는 것(예를 들어 원시 스프에서 세포를 만드는 시뮬레이션)에 대한 것으로 오해할 수 있음. 렘은 마지막 소설 ""Peace on Earth""에서도 나노기술 아이디어로 돌아감. ""Peace""는 ""Invincible""보다 더 나은 소개이자 더 재미있는 책임.
     * 렘의 모든 책을 헝가리어로 번역된 것을 읽은 팬으로, AI뿐만 아니라 정치, 문화, 사회, (생물)공학 등에 대한 통찰력과 인용구를 수집함. 약 50년 전에 그가 예측한 많은 것들이 오늘날 실현되었다는 사실에 여전히 매료됨. 예측하는 대신에 보이는 지평선을 감지하고 기록하는 그의 방법에 여전히 매료됨.
"
"https://news.hada.io/topic?id=12161","큰 TAM 창업자, 작은 TAM 스타트업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         큰 TAM 창업자, 작은 TAM 스타트업

     * 스타트업의 성공 가능성을 극대화하는 한 가지 방법은 큰 TAM(Total Addressable Market)을 가진 창업자가 작은 TAM 스타트업을 운영하는 것
     * 큰 시장, 큰 문제, 큰 결과를 추구하는 것이 일반적이지만, 이는 높은 위험을 수반하며 성공을 만들어가기 위한 제어가 어려움
     * 반대로 작은 시장, 작은 문제, 작은 결과를 추구하는 것은 성공 확률이 높아질 수 있으며, 시장 리스크가 적고 실행 리스크도 관리 가능함

성공 사례: 뉴스레터

     * 뉴스레터는 큰 TAM을 가진 창업자가 작은 TAM 스타트업을 운영하여 성공할 수 있는 예시임
     * 요즘 실리콘밸리에서 가장 똑똑한 사람들은 VC가 펀딩한 스타트업 대신 Substack을 시작한다는 농담이 있음
     * 그들이 바로 큰 TAM을 가진 창업자들. 포텐셜이 있는 일에 도전 가능한 경험과 기술을 갖추고 있음
          + 그러나 이들은 자신이 해결할 수 있다고 생각하는 것보다 훨씬 작은 규모의 TAM 스타트업에서 일하고 있음
          + 왜 그럴까? 잠재적 결과가 더 작더라도 성공 가능성이 더 높다고 보기 때문
          + 시장 위험이 줄어들고, 실행상의 위험도 관리가능한 수준
          + 실행은 ""틈새의 전문성(예: 소매 공급망 관리))"" 보다는 ""운영의 일관성(예: 뉴스레터 형식과 일정 준수)""에 관한 문제임
     * 성공을 ""은행에 저축""하는 것은 매우 유효하며, 작은 규모라도 성공을 인정받고 재정적 제약에서 벗어나 다음 도전을 선택하는 데 도움이 됨

창업자 TAM과 스타트업 TAM의 차이

     * 예를 들어, 고성장 중인 성공적인 B2B SaaS 스타트업의 초기 직원이 회사를 창업하기 위해 퇴사한다고 가정
     * 창업자가 이전에 경험한 큰 TAM 문제의 일부를 해결하는 새로운 스타트업을 시작할 때, 추구하는 TAM은 자연스럽게 작아짐
     * 작은 TAM에 집중하는 것은 더 큰 시장에 진입하기 위한 현명한 ""쐐기""일 수도 있고, 높은 성공 확률을 기대하는 의도적으로 작은 TAM 사업일 수도 있음
     * 둘 중에 어떤 것인지 판단하기 위해서는 비전, 자금 조달, 팀 규모 등 다른 요소들을 고려하는게 필요하지만, 이 부분은 여러분의 미래를 예측해서 투자하려는 VC 외에는 누구에게도 중요하지 않음
     * 다만 자신을 위해서, 자신이 누구인지, 무엇을 할 수 있는지, 무엇을 성취하고 싶은지 아는 것이 현명함

창업자의 TAM과 스타트업의 TAM 이해

     * 창업자의 TAM이 스타트업의 TAM보다 크면 성공할 가능성이 높아짐
     * 창업자는 TAM과 제어력 사이에서 배분할 수 있으며, 그 정도는 창업자가 결정하는 것
"
"https://news.hada.io/topic?id=12215","제프슨이 클로저로 작성된 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            제프슨이 클로저로 작성된 이유

Jepsen이 Clojure로 작성된 이유는?

     * Jepsen은 동시성 시스템, 주로 데이터베이스를 테스트하기 위해 구축됨.
     * Clojure의 불변성 데이터 구조와 우수한 동시성 지원으로 올바른 동시 프로그램 작성 용이함.
     * 다양한 데이터베이스 클라이언트 지원이 필요하며, Clojure는 Java와의 상호 운용성이 좋음.

테스트를 위한 언어 선택

     * 실험적인 테스트 작업에 적합한 간결하고 유연한 언어 필요.
     * Clojure는 간결하고 매크로 시스템을 통한 구문적 유연성 제공.
     * 복잡한 데이터 구조를 다루는 테스트에 Clojure의 데이터 구조와 표준 라이브러리 함수가 매우 적합함.

성능과 안정성

     * ""충분히 좋은"" 성능을 가진 언어 필요, Clojure는 Java에 비해 상대적으로 느리지만 성능 차이 해결 가능.
     * JVM의 우수한 프로파일링 도구가 Clojure와 잘 호환됨.
     * Clojure는 JVM 목표와 언어 자체에서 높은 안정성을 보임, 라이브러리의 빠른 부식이 적음.

단점과 결정

     * Clojure는 작은 엔지니어링 커뮤니티와 널리 받아들여진 정적 타입 시스템이 없는 단점이 있음.
     * Jepsen은 소규모 팀에서 유지 관리되고 사용되므로 이러한 단점이 크게 문제되지 않음.
     * Clojure로 Jepsen을 프로토타이핑한 후 결정한 것은 꽤 좋은 절충안이었다고 생각함.

GN⁺의 의견

     * Jepsen이 Clojure로 작성된 가장 중요한 이유는 Clojure의 불변성 데이터 구조와 강력한 동시성 지원 덕분에 복잡한 동시성 데이터베이스 시스템을 테스트하기에 적합하기 때문임.
     * 이 글은 소프트웨어 엔지니어링, 특히 동시성 프로그래밍과 데이터베이스 시스템에 관심 있는 사람들에게 흥미로울 수 있으며, 특정 프로그래밍 언어의 선택이 실제 프로젝트에 어떤 영향을 미칠 수 있는지에 대한 실질적인 사례를 제공함.

        Hacker News 의견

     * 클로저(Clojure)와 클로저스크립트(ClojureScript)를 10년간 사용한 한 사용자는 클로저의 장점으로 도메인 코드를 .cljc 파일에 작성하여 서버와 클라이언트 양쪽에서 컴파일하는 이점, 트랜스듀서(transducers)의 성능과 재사용성, 그리고 클로저의 안정성과 오래된 호환성을 강조함.
     * 클로저 생태계의 문제점으로는 도구의 접근성과 사용성이 극단적으로 나뉘어 있으며, 좀 더 쉬운 도구나 프레임워크가 있으면 클로저가 더 널리 채택될 것이라는 의견 제시.
     * 7년간 클로저만 사용한 한 개발자는 강력한 타입 시스템의 부재가 주된 불만이며, 클로저가 루비(Ruby)나 파이썬(Python)을 좋아하는 개발자들에게 더 많은 힘을 제공한다고 생각함.
     * 클로저와 클로저스크립트로 개발하는 한 팀은 클로저의 접근성과 REPL 워크플로우의 장점을 언급하며, 작은 프로젝트나 작업에 대해 Babashka/nbb를 사용하는 것이 유용하다고 함.
     * 클로저 초보자는 도구의 오류 상태가 난해하다고 느끼며, 클로저 생태계의 혁신적인 아이디어들을 가치 있게 여기지만, 괄호 사용과 nil 처리에 대한 개선 필요성을 언급함.
     * 클로저 커뮤니티의 라이브러리 조합에 대한 거의 교리적인 욕구가 실제 웹 개발 팀의 작업 속도를 늦출 수 있다고 지적하며, 더 사용하기 쉬운 웹 프레임워크의 필요성을 언급함.
     * 클로저의 작은 엔지니어링 커뮤니티와 정적 타입 시스템의 부재를 단점으로 보는 반면, 자바(Java)와의 상호 운용성을 강점으로 보는 의견 제시.
     * 클로저 사용자 중 한 명은 클로저의 오류 메시지와 타입 힌트의 부족을 지적하며, 대규모 코드 리팩토링의 어려움을 토로함.
     * 클로저 초보자를 위한 인터랙티브 튜토리얼 사이트를 추천하는 댓글 제공.
     * 클로저를 좋아하지만, 복잡한 현대 애플리케이션에는 결국 생태계가 중요하다는 교훈을 얻었다고 말하는 사용자의 의견.
"
"https://news.hada.io/topic?id=12210","Gemini(제미나이emini(제미나이) AI

Gemini 시대의 도래

     * Gemini는 텍스트, 이미지, 비디오, 오디오, 코드를 아우르는 멀티모달 기능을 기반으로 구축됨.
     * Gemini의 첫 버전은 현재까지 가장 능력 있는 AI 모델로 소개됨.
     * 인간 전문가를 능가하는 첫 모델로, AI 모델의 지식과 문제 해결 능력을 테스트하는 MMLU에서 높은 성능을 보임.

텍스트 기능 벤치마크

     * Gemini Ultra는 일반적인 MMLU, 복잡한 추론이 필요한 Big-Bench Hard, 독해력을 평가하는 DROP 등 다양한 벤치마크에서 높은 성능을 기록함.
     * 일상적인 상식 추론, 수학 문제 해결, 파이썬 코드 생성 등에서도 우수한 결과를 보임.
     * 다른 방법론에 대한 성능은 기술 보고서에서 자세히 확인 가능함.

멀티모달 기능 벤치마크

     * 이미지, 비디오, 오디오 분야에서도 Gemini는 기존의 최고 성능을 능가함.
     * 대학 수준의 다양한 학문 문제 해결, 자연 이미지 이해, 문서 이해 등에서 Gemini Ultra가 높은 성능을 보임.
     * 오디오 분야에서는 자동 음성 번역과 인식에서 Gemini Pro가 경쟁 모델들을 앞짐.

Gemini Pro의 Bard에서의 활용

     * Bard에서 Gemini Pro를 경험하면 새로운 창작, 계획, 브레인스토밍 등을 할 수 있는 방법을 발견할 수 있음.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 Gemini AI 모델이 텍스트, 이미지, 비디오, 오디오, 코드 등 다양한 형태의 데이터를 이해하고 처리할 수 있는 멀티모달 기능을 갖추고 있으며, 여러 벤치마크에서 인간 전문가를 능가하는 성능을 보여준다는 것임.
     * 이러한 발전은 AI 기술의 진보를 보여주며, 향후 창작, 계획, 학습 등 다양한 분야에서 AI의 활용 가능성을 크게 확장시킬 것으로 기대되기 때문에 사람들에게 흥미로운 소식임.

        Hacker News 의견

     * 관련 블로그 포스트: Google의 새로운 AI 기술인 Gemini에 대한 블로그 포스트 링크와 해커뉴스 토론 링크 제공. Gemini Ultra는 아직 출시되지 않았으며 몇 달이 남아 있음.
     * Bard w/ Gemini Pro는 유럽에서 사용할 수 없으며 다중 모달이 아님. Gemini Pro에 대한 공개 통계는 없으나, 기술 문서에 숨겨진 정보 존재.
     * GPT-4와 경쟁할 제품이 오늘 출시되지 않았다는 점에서 과대평가된 홍보라는 의견. 대부분의 국가에서 사용 가능하고 광고된 통계를 가진 제품을 출시하는 것이 더 나은 모습이었을 것이라는 평가.
     * Gemini AI의 인상적인 성능: TypeScript의 불가능한 기능에 대한 질문에 정확하게 불가능하다고 답변하고 관련 GitHub 이슈 링크 제공. GPT-4는 웹 브라우징 모드가 아닐 때 링크 생성을 잘 하지 않음. 또한, 아직 베타 버전인 Pixi.js v8에 대해 GPT-4보다 빠르게 인식하고 주요 기능에 대해 정확히 설명함.
     * Gemini 버전에 혼란스러워하는 사람들을 위한 설명: 주로 논의되는 것은 GPT-4를 능가한다고 주장되는 Gemini Ultra. Bard를 통해 사용 가능한 것은 Gemini Pro.
     * 기술 보고서에 따른 Gemini Ultra와 Gemini Pro, GPT-4의 벤치마크 성능 비교. 다양한 데이터셋에서의 점수 비교 제공.
     * Gemini AI 데모 비디오 링크 제공.
     * Sundar Pichai의 주요 비디오 발언에 대한 관찰: Google이 오랫동안 AI를 해왔다는 점을 강조하려는 듯한 인상. 현재 공개된 최신 모델은 OpenAI가 만든 것이기 때문에 이러한 강조가 다소 부적절하게 느껴짐. 실제로 보여주는 것이 더 나은 전략이라는 의견.
     * Google AI Studio와 Google Cloud Vertex AI를 통해 Gemini 모델을 애플리케이션에 통합할 수 있는 정보. 12월 13일부터 사용 가능할 것으로 보임.
     * 벤치마크에서 테스트 데이터가 훈련 데이터의 일부였는지 판단하기 어려운 문제에 대한 우려. GPT-4가 수학 문제에서 실수를 하지만 GSM8k에서 높은 점수를 받는 것과 같은 예시 제시.
     * GPT-4를 간신히 능가하는 것에 대한 다양한 의견. 경쟁이 치열해지면 모두에게 이득이 될 것이라는 기대감 표현. 사전 공개 발표에 대한 불만과 실제 사용 가능해질 때까지 기다려야 한다는 지적.
     * Codeforces(경쟁 프로그래밍 플랫폼)에서 Gemini 모델에 대한 토론 링크 제공. 3200 등급 문제를 데이터 유출 없이 해결했다는 주장에 대한 의심 표현.
     * Gemini Nano에 대한 큰 기대감. Pixel 8 스레드에서 웹 API를 사용하는 것이 임시적이며 향후 기기 내 모델로 대체될 수 있다는 의견이 있었는데, 이것이 그 시작일 수 있음.
"
"https://news.hada.io/topic?id=12197","Twitch 한국 서비스 운영 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Twitch 한국 서비스 운영 종료

     * Twitch는 한국에서의 운영을 2024년 2월 27일부로 종료 결정
     * 한국의 높은 네트워크 수수료와 운영 비용으로 어려움을 겪어옴
     * 한국 시청자는 해당 일 이후 Twitch의 유료 상품을 구매할 수 없음
     * 한국 스트리머들은 Twitch를 통한 수익 창출이 불가능해짐
     * Twitch는 영향을 받을 스트리머 및 시청자 지원 계획을 발표
     * 스트리머들의 다른 플랫폼 이전을 돕기 위한 알림 기능 및 링크 게재를 지원 예정
     * 결정이 어려웠고, Twitch는 한국의 e스포츠 커뮤니티에 감사의 말 전함

   (ChatGPT 요약)

   cloudflare에서 한국 통신망 비싸다고 언급한 내용입니다

   https://blog.cloudflare.com/bandwidth-costs-around-the-world/

   안타깝네요, 국내외로 어떤 선례가 될지는 시간이 지나봐야 알겠지만 긍정적으로 해석할 수 있는 케이스가 되긴 어려워보입니다.

   한국은 그리고 복리 뺨치듯 트래픽이 늘어날수록 망 사용료가 기하급수적으로 오르는 유일한 나라라고 클라우드플레어가 블로그에 언급한 바 있습니다.

   매년 수조원씩 영업이익을 올리는 통신3사들이 받아먹는 만큼 환원하는 게 있어야할텐데요

   한국 IP 접속까지 차단한다고 하니 우회 경로라도 찾아야 할 판국이네요

   안그래도 720p 제한 덕분에 일본 VPN으로 시청중이긴 했습니다.

   그런데 해외 스트리머 보시는 분들은 그대로 계속 이용할 수 있겠지만,
   한국 스트리머 분들은 앞으로 트위치에서 방송을 하지 않을 가능성이 매우 높으니...

   근데 10배가 차이가 나는데 유튜브랑 다른 곳들은 대체 어떻게 서비스를 버티고 있는 걸까요.

   흠..주요 트래픽이 라이브 스트리밍 영상인지 정적 컨텐츠인지에 따라 나뉠 수 있다는 생각이 드는군요!

   아흑 제가 몇초 늦었군요. 중복글이 되어버렸 ㅠ

   10배...나 하는군요.

   아시아 중에서도 서울 리전이 조금 더 비싸긴 해도, 가격이 그렇게까지 차이 나지는 않았는데,
   트위치 급으로 네트워크를 사용하면 망 사용료를 별도로 내야 하나 보네요.

   아무튼 정말 슬픈 일이네요. 아프리카는 진짜 안되는데...

   방금 CEO방송 보고왔는데 망 사용료가 타국가의 10배수준이라고 하는거보니 ...
"
"https://news.hada.io/topic?id=12079","인간을 위한 딥러닝, Keras 3.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       인간을 위한 딥러닝, Keras 3.0 릴리즈

     * Keras 3.0이 정식 출시됨을 발표, 5개월간의 공개 베타 테스트를 거침
     * Keras 3은 JAX, TensorFlow, PyTorch 상에서 Keras 워크플로우를 실행할 수 있는 전면적인 재작성 버전
     * 새로운 대규모 모델 훈련 및 배포 기능 제공

다중 프레임워크 머신러닝 환영

     * Keras 사용의 이점은 높은 개발 속도, 사용자 경험, API 디자인, 디버깅 용이성에 중점
     * 250만 개발자가 선택한 검증된 프레임워크로, Waymo 자율주행 차량 및 YouTube 추천 엔진과 같은 대규모 ML 시스템에 사용됨
     * Keras 3는 모델 성능 최적화, 모델 생태계 옵션 확장, 대규모 모델 병렬 처리 및 데이터 병렬 처리 지원 등의 추가 이점 제공

Keras 3 API, JAX, TensorFlow, PyTorch에서 사용 가능

     * Keras 3는 Keras API 전체를 구현하고 TensorFlow, JAX, PyTorch에서 사용 가능
     * 내장 레이어만 사용하는 모든 Keras 모델은 지원되는 모든 백엔드에서 즉시 작동
     * 기존 tf.keras 모델도 JAX와 PyTorch에서 바로 실행 가능

다중 프레임워크 레이어, 모델, 메트릭 작성

     * Keras 3는 모든 백엔드에서 동일하게 작동하는 컴포넌트(커스텀 레이어, 사전 훈련된 모델 등) 생성 가능
     * keras.ops 네임스페이스를 통해 백엔드 간 호환 가능한 NumPy API 및 신경망 특화 함수 제공
     * keras.ops만 사용하는 한, 커스텀 레이어 및 메트릭이 JAX, PyTorch, TensorFlow에서 동일한 코드로 작동

대규모 데이터 병렬 처리 및 모델 병렬 처리를 위한 새로운 분산 API

     * 대규모 모델 샤딩 문제를 해결하기 위한 새로운 분산 API 제공
     * 모델 정의, 훈련 논리, 샤딩 구성을 분리하여 단일 장치에서 실행되는 것처럼 모델 작성 가능
     * 데이터 병렬 처리 및 모델 병렬 처리를 위한 샤딩 레이아웃을 쉽게 지정할 수 있는 API 제공

사전 훈련된 모델

     * Keras 3에서 사용할 수 있는 다양한 사전 훈련된 모델 제공
     * 모든 Keras Applications 모델과 KerasCV, KerasNLP의 사전 훈련된 모델이 모든 백엔드에서 작동

모든 백엔드에서 크로스 프레임워크 데이터 파이프라인 지원

     * Keras 3 모델은 JAX, PyTorch, TensorFlow 백엔드와 관계없이 다양한 데이터 파이프라인을 사용하여 훈련 가능

복잡성의 점진적 공개

     * Keras API는 단순한 워크플로우부터 저수준 커스터마이징까지 다양한 사용자 프로필에 맞는 다양한 워크플로우를 지원하는 설계 원칙을 따름

무상태 API

     * 모든 상태를 가진 Keras 객체는 이제 JAX 함수에서 사용할 수 있는 무상태 API를 가짐

Keras 2에서 Keras 3으로의 이동

     * Keras 3은 Keras 2와 높은 수준의 호환성을 가지며, 대부분의 사용자는 코드 변경 없이 Keras 3으로 전환 가능
     * 더 큰 코드베이스는 일부 코드 변경이 필요할 수 있으나, 이동을 돕기 위한 완전한 마이그레이션 가이드 제공
     * Keras 2를 계속 사용하고자 하는 경우, tf_keras 패키지를 사용하거나 TF_USE_LEGACY_KERAS 환경 변수를 설정하여 Keras 2를 사용할 수 있음

GN⁺의 의견

   이 글에서 가장 중요한 것은 Keras 3.0의 공식 출시와 그것이 개발자들에게 제공하는 새로운 기능들임. Keras 3.0은 JAX, TensorFlow, PyTorch 등 다양한 백엔드에서 작동하며, 대규모 모델 훈련 및 배포 기능을 개선함으로써 머신러닝 개발의 유연성과 효율성을 크게 향상시킴. 이러한 특징은 머신러닝 커뮤니티에게 매우 흥미로운 소식이며, 개발자들이 더욱 다양한 환경에서 모델을 실험하고 배포할 수 있는 기회를 제공함.

   개인적으로 Keras를 정말 좋아하는데 Pytorch를 백엔드로 해서 돌릴 수도 있게 되었다는게 정말 반갑네요.

   오 새로운 Keras 버전이 발표되었군요.

   파이토치만 배웠는데,
   ""기존 tf.keras 모델도 JAX와 PyTorch에서 바로 실행 가능""하다고 하니, 어떻게 하는 건지 궁금하군요~

   오 케라스 3이 나왔군요. +_+
   모델 개발이든 학습이든 좀 더 쉬워지면 좋겠네요.
"
"https://news.hada.io/topic?id=12155","llamafile - 단일 파일로 LLM 배포 및 실행 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   llamafile - 단일 파일로 LLM 배포 및 실행 하기

     * 1개의 파일로 대부분의 컴퓨터에서 설치없이 LLM을 쉽게 실행 지원
     * llama.cpp와 Cosmopolitan Libc를 결합한 프레임워크
          + 1개의 빌드로 여러 OS, 다양한 CPU 아키텍처에서 실행 가능
     * 채팅 및 이미지 인식이 가능한 LLaVA 모델을 예제로 제공
          + 4GB 파일인 llava-v1.5-7b-q4-server.llamafile 을 다운 받아서 실행하면 끝
          + 맥/리눅스/BSD 의 경우는 chmod +x 하고 바로 실행
          + 윈도우는 확장자 뒤에 .exe 를 붙여서 바로 실행
          + 실행되면 자동으로 브라우저가 열리고 채팅 인터페이스를 표시
     * 그외에 Mistral-7B-Instruct, WizardCoder-Python-13B 등의 llamafile 도 제공

   curl --location https://huggingface.co/jartine/llava-v1.5-7B-GGUF/… > llamafile

   curl 명령어 한 번이면, 바로 실행가능해서 너무 놀라워요..

   와 대박이네요 ㅋㅋㅋ

   진짜 쉽게 실행 할 수 있네요.

   GN⁺ 에 올라왔는데, AI 요약에 의한 소개가 부족했는지 인기가 없어서 다시 한번 정리했습니다. 꽤 재미난 시도인 것 같아요.
   ""Llamafile""을 통해 단일 파일로 LLM 배포 및 실행 가능

   기본 모델인 LLaVA: Visual Instruction Tuning

   공개당시에는 장난스러웠던 Cosmopolitan 과 RedBean 이 이렇게도 쓰이는 군요. 아주 훌륭한 사용처가 될 듯
     * Cosmopolitan v3.0 - ""Build Once Anywhere, Run Anywhere C/C++""
     * Cosmopolitan libc - Build-Once Run-Anywhere C
     * Cosmopolitan v1.0 공개
     * Cosmopolitan v2.0 릴리즈
     * Redbean - 파일1개로 실행되는 웹서버
     * Redbean 2.0 공개
"
"https://news.hada.io/topic?id=12156","Ask HN: 더 많은 사람들이 알았으면 하는 인기 없는 기술들은 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask HN: 더 많은 사람들이 알았으면 하는 인기 없는 기술들은 무엇인가요?

   HN에 올라온 질문과 관련 답변들
     * Tarantool은 고성능 인메모리 데이터베이스 및 애플리케이션 서버로, 공식 웹사이트는 여기.
     * Rebol/Red-lang은 독특한 프로그래밍 언어로, 간결하고 표현력이 뛰어난 코드 작성을 지향하며, 자세한 정보는 여기에서 확인 가능.
     * U++ 는 C++ 프로그래머를 위한 IDE 및 라이브러리 세트로, 개발을 더욱 효율적으로 만들어주며, 공식 웹사이트는 여기.
     * Lazarus는 크로스 플랫폼 개발을 위한 무료 오픈 소스 IDE로, Delphi와 유사한 프로그래밍 환경을 제공하며, 공식 웹사이트는 여기.
     * Fasm은 플랫 어셈블러로, 다양한 아키텍처에 대한 어셈블리 언어 프로그래밍을 지원하며, 공식 웹사이트는 여기.

   이 중에서 들어본적이 있는건 FASM 뿐이네요.
   MenuetOS와 여기서 파생된 Kolibri OS가 FASM으로 작성되었죠.

        Hacker News 의견

     * 아날로그 컴퓨팅
          + 기계적 아날로그 컴퓨팅은 복잡한 물리 시스템을 단순한 기계로 변환하는 아름다운 개념임.
          + 이상한 모양의 기어를 맞물려 적분을 구하는 것은 우주에 대한 깊은 의미를 전달함.
          + 전자 아날로그 컴퓨팅으로 확장 가능하며, 진공관의 작동 원리는 물리학의 아름다움을 보여줌.
          + 디지털 컴퓨팅도 아름다운 문제를 해결하지만, 아날로그 컴퓨팅만큼의 감동은 없음.
          + 아날로그를 버림으로써 무언가 중요한 것을 잃었다는 느낌이 듦.
     * NNCP (http://www.nncpgo.org)
          + 비연속적 또는 간헐적 연결성을 가진 신뢰할 수 있는 당사자들 간의 비동기 파일 전송을 위한 프로토콜/도구임.
          + usenet의 현대적 대안으로 시작되었으며, 다양한 전송 방식을 지원함.
          + 파일 전송 우선 순위 시스템과 메시지 수신 시 임의의 명령 실행이 가능함.
     * 다양한 기술 링크
          + Tarantool은 메모리 내 데이터베이스, Red는 독특한 문법을 가진 프로그래밍 언어임.
          + U++는 QT와 같은 C++ 프레임워크, Lazarus는 파스칼 IDE, FASM은 어셈블러 구축 툴킷임.
          + 링크된 기술들 간의 공통점을 찾기 어려움.
     * MediaWiki
          + MediaWiki는 위키백과를 구동하며, 문서화를 위해 더 널리 사용되기를 바람.
          + Lua로 특수 템플릿을 만들고, Cargo RDBMS 확장을 통해 SQL 기능을 제공함.
          + Confluence와 같은 외부 서비스 플러그인은 부족하지만, 자체 호스팅 가능하고 문서화 플랫폼으로 우수함.
     * Nix 패키지 매니저의 nix-shell
          + Nix는 점차 인기를 얻고 있으나, 많은 사람들이 큰 약속이 필요하다고 생각함.
          + 프로젝트별 개발 쉘을 생성하여 해당 프로젝트 작업에 필요한 패키지를 설치할 수 있음.
     * GnuPG/PGP와 신뢰의 웹
          + 블록체인이 사용되는 많은 경우에 OpenPGP 서명이 더 적합할 수 있음.
          + 기계 생성 콘텐츠가 증가함에 따라 신뢰의 웹 개념을 사용하는 서비스가 강력할 수 있음.
          + 암호화 서명의 UX 문제가 있지만, 사용하기 쉽게 만드는 그룹에게는 많은 기회가 있음.
     * Magic Wormhole (https://magic-wormhole.io)
          + 사용하기 쉽고 안전한 파일 전송 프로그램임.
          + 거의 매일 사용하며, pycon-2016에서 저자가 발표한 비디오가 유익함.
     * Nim 프로그래밍 언어
          + Nim은 빠르고, 정적 타입을 가지며, Python처럼 읽히고 효과 시스템이 우수함.
          + 사용하기 즐겁고, Nim으로 인터프리터를 작성하는 과정이 있음.
     * Arcan 디스플레이 서버
          + Arcan은 혁신적인 아이디어를 가진 디스플레이 서버임.
          + 인기를 얻지 못하더라도, 다른 인기 있는 프로그램에서 사용할 수 있는 아이디어가 있음.
     * BEAM 언어 가족 (Erlang, Elixir, LFE 등)
          + BEAM 언어들은 더 널리 사용될 수 있으며, BEAM에서는 많은 문제들이 해결될 수 있음.
"
"https://news.hada.io/topic?id=12131","소형 볼류메트릭 디스플레이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             소형 볼류메트릭 디스플레이

요약: 3차원 디스플레이를 위한 초소형 LED 매트릭스 보드 개발

     * 창의적인 사람들과의 대화에서 전자 촛불 아이디어가 나옴; 모든 각도에서 깜빡이는 촛불처럼 보이는 것을 만드는 것이 목표.
     * 지속적인 시각 효과(persistence-of-vision) 디스플레이 제안, 하지만 너무 많은 지원 기계가 필요하다는 의견이 있었음.
     * 모터와 배터리가 충분히 작다면 전체가 회전할 수 있을 것이라는 생각으로 LED 매트릭스 보드를 신속하게 디자인하고 주문함.

제작 과정

     * 중국에서 소형 회로 기판을 저렴하게 주문, 빠른 배송이 중요함.
     * Charmhigh CHM-T36VA 픽 앤 플레이스 기계를 사용하여 회로 기판을 빠르게 조립함.
     * 간단한 LED 매트릭스에는 단일 구성 요소만 있어서 릴 로딩이 매우 빠름.
     * 레이저로 에칭한 스텐실을 사용하여 프로토타입 제작, LED 매트릭스는 향후 유용할 것으로 예상됨.

마이크로컨트롤러 및 배터리 선택

     * 충분한 플래시 메모리를 가진 마이크로컨트롤러 필요, Raspberry Pi Pico가 후보였으나 크기가 너무 커서 부적합함.
     * Waveshare RP2040-tiny 보드 선택, 최소한의 구성 요소로 설계되어 프로토타입에 적합함.
     * LIR2450 리튬 이온 충전식 배터리 사용, 작은 크기의 배터리보다 용량과 전류 능력이 뛰어남.

프로토타입 제작

     * PETG로 3D 프린트된 배터리 홀더 사용, 벽 두께가 얇아 프로토타입이 떨어질 때마다 부러짐.
     * IR 센서와 LED를 포함한 회로 기판에 솔더링하여 프로토타입 완성.
     * 모터 제어와 전원 공급을 위해 간단한 회로를 구성함.

소프트웨어 개발

     * IR 센서를 모니터링하여 회전 속도를 측정하고 디스플레이 속도를 조정함.
     * RP2040의 듀얼 코어 ARM Cortex-M0를 사용하여 정확한 타이밍으로 LED 매트릭스를 제어함.
     * 간단한 모터 속도 제어 로직을 구현하여 일정한 프레임 속도 유지함.

배터리 모니터링 및 충전

     * 배터리 전압 모니터링을 위해 GPIO를 사용하여 전압 분배기를 추가함.
     * 배터리를 충전하기 위해 독립형 충전기 사용, 충전기가 고장나자 대체 충전 방법을 모색함.
     * RP2040-tiny USB 어댑터 보드를 사용하여 프로토타입에 배터리를 충전하는 동시에 프로그래밍 가능함.

3D 데이터 생성

     * Blender를 사용하여 3D 극좌표 데이터를 생성하고, 이를 LED 매트릭스에 맞게 변환함.
     * 유체 시뮬레이션과 화재 시뮬레이션을 통해 볼륨 데이터를 생성하고, 이를 프로토타입에 표시함.

GN⁺의 의견

   이 프로젝트에서 가장 중요한 것은 창의적인 아이디어를 실제로 구현하는 과정과 그 결과물이다. 3차원 디스플레이를 위한 초소형 LED 매트릭스 보드 개발은 기술적인 도전과 혁신을 좋아하는 사람들에게 흥미로운 주제를 제공한다. 복잡한 문제를 해결하고, 새로운 기술을 탐구하는 과정은 많은 소프트웨어 엔지니어들에게 영감을 줄 수 있으며, 이러한 프로젝트는 기술의 미래를 형성하는 데 중요한 역할을 할 수 있다.

        Hacker News 의견

     * 개선 아이디어 제안
          + 동일한 모터를 여분으로 가지고 있다면, 두 개를 분해하여 회전하는 전력 전송 시스템을 만들 수 있음.
          + 모터 두 개를 희생하여 각 유닛을 만들지만, 캡과 정류기를 사용하면 완벽하게 맞고 매우 신뢰성이 높으며, 배터리 걱정이 없음.
          + 정류기는 조립이 한 바퀴 돌았음을 알려주는 신호를 제공하여, 실제 위치에 기반한 이미지 안정성을 유지할 수 있음.
          + 유도를 통한 전력 전송도 가능하지만, 효율적으로 전달하는 데 성공하지 못했으며, 화재를 걱정할 정도로 소스 전압을 높여야 했음.
          + 이 조언은 2001년 버닝맨 아트 프로젝트에서 나온 것임.
     * 뒤돌아보면 명백한 아이디어
          + 비교적 원시적인 별도의 구성 요소로 손으로 만들어진 결과물이 매력적인 만큼, 왜 다음 크리스마스에 아마존의 모든 무작위 7자 드롭십 업체에서 전체 색상, 고해상도 버전을 보지 못할 것인지 궁금함.
     * 매력적인 작은 프로젝트
          + 다른 프로젝트들도 확인해볼 것을 추천하며, 이 중 일부는 이전에 해커뉴스에 소개된 적이 있음.
     * 런던 기반 또는 방문객을 위한 전시회
          + 180 스튜디오에서 이러한 기술을 사용하는 예술 전시회를 자주 개최하며, 예술과 기술에 관심이 있다면 확인할 가치가 있음.
     * 홀로그램 팬 작동 원리
          + 모든 전자 장치가 회전 부분에 있으며, 팬에서는 무선 전력 전송을 사용하여 상단 보드를 구동함.
     * 유도 전력 전송의 가능성
          + 배터리가 필요 없게 하기 위해 유도 전력 전송을 사용할 수 있는지 궁금함.
          + LED만 전력을 공급하면 되므로 모터는 기반에 장착될 수 있음.
          + 두 코일을 서로 안에 배치하고 페라이트 코어에 놓을 수 있음.
     * 창의적인 프로젝트
          + 이와 같은 멋진 프로젝트를 생각해내는 상상력은 부족하지만, 인터넷을 통해 사람들이 만들어낸 인상적인 작품을 볼 수 있음.
     * OLED 디스플레이의 업데이트 속도
          + 저렴한 OLED 디스플레이가 더 높은 해상도를 달성하기 위해 충분히 빠르게 업데이트될 수 있는지 궁금함.
          + 작동은 가능하지만, 레이디얼 슬라이스 사이의 공간이 픽셀 간격보다 훨씬 클 수 있어 더 나빠 보일 수 있음.
     * 아크릴 큐브 또는 구체 만들기
          + 회전 가능한 축을 중심으로 한 투영 표면을 내부에 넣음.
          + 공기를 빼서 조용하게 하고 매우 얇은 시트를 사용할 수 있음.
          + 외부 자기장으로 회전시키고, 2-3개의 프로젝터로 각도를 달리하여 왜곡 교정 및 회전 동기화 이미지를 투영함.
          + 취미로도 가능한 자신만의 스타워즈 디스플레이를 만들 수 있음.
     * 중심 문제 해결
          + 두 개의 LED 보드를 상단에 뒤집어서 배치함.
          + 한 보드는 LED를 절반으로 이동시켜 해상도를 두 배로 늘리면서 인터레이싱 효과를 만들 수 있음.
"
"https://news.hada.io/topic?id=12123","높은 정확도로 빠르게 PDF를 Markdown으로 변환하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  높은 정확도로 빠르게 PDF를 Markdown으로 변환하는 기술
"
"https://news.hada.io/topic?id=12201","아마존 CTO의 2024년 이후 기술 예측","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        아마존 CTO의 2024년 이후 기술 예측

   워너 보겔스 박사의 글
     * 인류는 역사를 통틀어 자신의 능력을 증강하고 증폭하는 도구와 시스템을 개발해 왔음
     * 클라우드 기술, 머신러닝, 생성형 AI의 접근성이 높아지면서 이메일 작성부터 소프트웨어 개발, 심지어 암의 조기 발견에 이르기까지 우리 삶의 거의 모든 측면에 영향을 미치고 있음
     * 앞으로 몇 년간 기술에 대한 접근성을 대중화하고 여러 분야의 혁신으로 가득 차게 될 것이며, 그 시작은 제너레이티브 AI에서 시작될 것

[생성형 AI가 문화를 인식하게 됨] - Generative AI becomes culturally aware

     *

     ""문화적으로 다양한 데이터로 학습된 대규모 언어 모델(LLM)은 인간의 경험과 복잡한 사회적 문제를 더욱 미묘하게 이해할 수 있게 됨. 문화적 유창성(fluency)은 전 세계 사용자가 제너레이티브 AI에 더 쉽게 접근할 수 있게 해줄 것""
     * 문화는 모든 것에 영향을 미침 - 우리가 하는 이야기, 먹는 음식, 옷차림, 가치관, 매너, 편견, 문제에 접근하고 결정을 내리는 방식 등 모든 것
     * 문화는 우리 각자가 커뮤니티 내에서 어떻게 존재하는지에 대한 토대
     * 문화는 우리의 행동과 신념을 규정하고 지배하는 규칙과 지침을 제공하며, 이러한 계약은 우리가 어디에 있고 누구와 함께 있는지에 따라 달라지고, 이러한 차이는 때때로 혼란과 오해를 초래할 수 있음
     * 인간은 여러 문화권에서 일하는 데 익숙하기 때문에 이러한 정보를 맥락화하고 종합하며 이해를 조정하고 적절하게 대응할 수 있음
     * 앞으로 몇 년 동안 문화는 기술을 설계, 배포, 소비하는 방식에 중요한 역할을 할 것이며, 그 효과는 제너레이티브 AI에서 가장 분명하게 드러날 것

  문화적 유창성 확보를 위한 노력

     * LLM 기반 시스템이 전 세계 사용자에게 다가가기 위해서는 인간이 본능적으로 느끼는 ""문화적 유창성""을 확보해야 함
     * 많은 LLM을 훈련하는 데 사용된 Common Crawl은 약 46%가 영어이며, 언어에 관계없이 사용 가능한 콘텐츠의 훨씬 더 많은 비율이 문화적으로 서구적임(미국에 상당히 치우쳐 있음)
     * 지난 몇 달 동안 비 서구권 언어 학습자가 등장하기 시작: 아랍어와 영어 데이터로 훈련된 Jais, 중국어/영어 이중 언어 모델인 Yi-34B, 방대한 일본어 웹 코퍼스로 훈련된 Japanese-large-lm 등
     * 이는 문화적으로 정확한 비서구권 모델을 통해 수억 명의 사람들이 교육에서 의료에 이르기까지 광범위한 분야에 영향을 미칠 수 있는 제너레이티브 AI를 사용할 수 있게 될 것이라는 신호
     * 언어와 문화는 동일하지 않다는 점을 명심할 것
     * 완벽한 번역을 할 수 있다고 해서 문화에 대한 모범적인 인식이 있는 것은 아님
     * 이러한 모델에 무수히 많은 역사와 경험이 내재되어 있기 때문에 LLM은 더 폭넓고 전 세계적인 관점을 개발하기 시작할 것
     * 인간이 토론과 논쟁, 아이디어 교환을 통해 배우는 것처럼, LLM도 관점을 넓히고 문화를 이해하기 위해 비슷한 기회가 필요함
     * 이러한 문화 교류에서 두 가지 연구 분야가 중추적인 역할을 할 것
          + 하나는 한 모델이 다른 모델의 피드백을 통합하는 AI 피드백을 통한 강화 학습(RLAIF). 이 시나리오에서는 서로 다른 모델이 서로 상호 작용하고 이러한 상호 작용을 기반으로 다양한 문화적 개념에 대한 이해를 업데이트할 수 있음
          + 두 번째는 다중 에이전트 토론을 통한 협업으로, 한 모델의 여러 인스턴스가 응답을 생성하고 각 응답의 타당성과 그 이면에 있는 추론에 대해 토론하며 이러한 토론 과정을 통해 최종적으로 합의된 답변에 도달하는 것
          + 두 가지 연구 영역 모두 모델을 훈련하고 미세 조정하는 데 드는 인적 비용을 줄여줌
     * LLM이 서로 교류하고 배우면서 다양한 문화적 관점을 바탕으로 복잡한 사회적 문제를 더욱 미묘하게 이해할 수 있게 될 것
     * 이러한 발전은 또한 모델이 기술과 같은 분야의 광범위한 주제에 대해 더욱 강력하고 기술적으로 정확한 대응을 제공하도록 보장할 것
     * 그 효과는 지역, 커뮤니티, 세대에 걸쳐 심오하게 나타날 것

[FemTech가 마침내 도약] - FemTech finally takes off

     *

     ""펨테크에 대한 투자가 급증하고, 의료 서비스가 하이브리드화되고, 풍부한 데이터를 통해 진단과 환자 치료 결과가 개선되면서 여성 의료는 변곡점에 도달했음. 펨테크의 부상은 여성에게만 혜택을 주는 것이 아니라 전체 의료 시스템에 활력을 불어넣을 것""

  여성의료는 틈새시장이 아닌데 외면 받고 있음

     * 여성 의료 서비스는 틈새 시장이 아님. 미국에서만 여성은 연간 5,000억 달러 이상을 의료 서비스에 지출
     * 여성은 전체 인구의 50%를 차지하며 소비자 의료 결정의 80%를 차지하지만, 현대 의학의 근간은 기본적으로 남성이었음
     * 1993년 미국 국립보건원 활성화법이 제정되고 나서야 미국 내 여성들이 임상 연구에 참여하기 시작
     * 생리 관리나 폐경 치료와 같은 일반적인 요구는 역사적으로 금기시되어 왔으며, 여성은 임상시험과 연구에서 배제되어 왔기 때문에 그 결과는 일반적으로 남성보다 더 나빴음
     * 평균적으로 여성은 남성보다 많은 질병에 대해 늦게 진단을 받고, 심장마비 후 오진을 받을 확률이 50% 더 높음
     * 불평등을 가장 극명하게 보여주는 예는 처방약으로, 여성은 남성보다 훨씬 높은 비율로 부작용을 보고함
     * 이러한 통계는 겉으로 보기에는 우려스러워 보이지만, 클라우드 기술과 데이터에 대한 접근성 향상에 힘입어 여성 의료 서비스(일명 펨테크)에 대한 투자가 증가하고 있음
     * AWS는 여성이 주도하는 스타트업과 긴밀히 협력해 왔으며, 펨테크의 성장을 직접 목격함. 작년에만 자금 지원이 197% 증가.
     * 자본, 머신러닝과 같은 기술, 여성을 위해 특별히 설계된 커넥티드 디바이스에 대한 접근성이 높아지면서 우리는 여성 돌봄에 대한 인식뿐만 아니라 관리 방식에 있어서도 전례 없는 변화의 기로에 서 있음

  기술로 무장한 펨테크 기업들이 나오고 있음

     * Tia, Elvie, Embr Labs와 같은 기업들은 데이터와 예측 분석을 활용하여 개별화된 치료를 제공하고 집과 이동 중에도 환자가 편한 곳에서 환자를 만날 수 있는 엄청난 잠재력을 보여주고 있음
     * 여성 건강 문제에 대한 낙인이 사라지고 이 분야에 더 많은 자금이 유입됨에 따라, 펨테크 기업들이 이전에는 간과되었던 여성 건강 문제와 니즈에 적극적으로 대처하는 모습을 계속 보게 될 것
     * 동시에 온라인 의료 플랫폼, 저비용 진단 기기의 가용성, 의료 전문가에 대한 온디맨드 접근성을 활용하는 하이브리드 치료 모델 덕분에 여성의 의료 서비스 접근성이 크게 향상될 것
     * Maven은 정신 건강과 신체 건강의 경계를 허물고 관계 상담부터 폐경기 관리까지 모든 것을 제공하면서 이 분야의 선두주자임을 입증
     * NextGen Jane이 개발 중인 스마트 탐폰 시스템을 통해 여성은 자신의 자궁 건강 프로필을 구축하고 질병의 잠재적 게놈 마커를 식별할 수 있으며, 이를 임상의와 원활하게 공유할 수 있음
     * 또한 웨어러블이 사용자와 의사에게 분석할 수 있는 풍부한 종단적 건강 데이터를 제공할 것
     * 오늘날 70% 이상의 여성이 폐경 증상을 치료받지 않고 방치하고 있는 상황에서 교육 강화, 데이터의 가용성, 비침습적 솔루션은 산부인과 치료의 결과를 획기적으로 개선할 수 있으며, 이는 산부인과 치료 그 이상의 의미를 지님

  여성 건강 관리의 변곡점

     * 우리는 여성 건강 관리의 변곡점에 서 있음
     * 컴퓨터 비전 및 딥 러닝과 같은 클라우드 기술과 결합된 다양한 데이터에 대한 액세스는 오진을 줄이고 오늘날 여성에게 불균형적으로 영향을 미치는 약물 부작용을 최소화하는 데 도움이 될 것
     * 자궁내막증과 산후우울증은 마땅히 받아야 할 관심을 받게 될 것
     * 마침내 여성 치료가 변두리에서 최전선으로 이동하는 것을 보게 될 것
     * 그리고 여성이 주도하는 팀은 남성으로만 구성된 팀보다 광범위한 건강 문제를 해결하는 데 더 유리하기 때문에, 펨테크는 여성으로 식별되는 사람들에게 혜택을 줄 뿐만 아니라 전체 의료 시스템을 향상시킬 것

[AI 어시스턴트 들이 개발자 생산성을 재정의] - AI assistants redefine developer productivity

     *

     ""AI 어시스턴트는 기본적인 코드 생성자에서 소프트웨어 개발 수명 주기 전반에 걸쳐 지원을 제공하는 교사이자 지칠 줄 모르는 협력자로 진화할 것. 복잡한 시스템을 간단한 언어로 설명하고, 목표 개선 사항을 제안하고, 반복적인 작업을 대신 수행하여 개발자가 작업에서 가장 큰 영향을 미치는 부분에 집중할 수 있도록 도와줌""
     * 나는 2021년에 제너레이티브 AI가 소프트웨어 작성 방식에 중요한 역할을 하기 시작할 것이라고 예측했음. 개발자의 기술을 보강하여 더 안전하고 신뢰할 수 있는 코드를 작성하는 데 도움이 될 것이라고

  AI 비서는 동료이자 스승

     * 현재 자연어 프롬프트를 기반으로 전체 함수, 클래스, 테스트를 생성할 수 있는 도구와 시스템에 대한 광범위한 액세스가 가능해지면서 이러한 현상이 본격적으로 나타나고 있음
     * 실제로 2023년 스택 오버플로 개발자 설문조사에서 응답자의 70%가 개발 프로세스에서 이미 AI 지원 도구를 사용하고 있거나 사용할 계획이라고 답함
     * 이제 출시될 AI 비서들은 코드를 이해하고 작성할 뿐만 아니라 지칠 줄 모르는 협력자이자 스승이 될 것
     * 어떤 작업도 그들의 에너지를 소진시키지 않으며, 몇 번을 물어봐도 개념을 설명하거나 작업을 다시 하느라 조바심을 내지 않을 것
     * 무한한 시간과 인내심으로 팀원 모두를 지원하고 코드 검토부터 제품 전략에 이르기까지 모든 일에 기여할 것

  경계가 모호해짐

     * 제품 관리자, 프론트엔드 및 백엔드 엔지니어, DBA, UI/UX 디자이너, DevOps 엔지니어, 아키텍트 간의 경계가 모호해질 것
     * AI 어시스턴트는 고립된 모듈뿐만 아니라 전체 시스템에 대한 컨텍스트 이해를 바탕으로 냅킨 스케치를 스캐폴딩 코드로 번역하거나, 요구 사항 문서에서 템플릿을 생성하거나, 작업에 가장 적합한 인프라(예: 서버리스와 컨테이너)를 추천하는 등 인간의 창의력을 강화하는 추천을 제공할 것

  맞춤화 가능

     * 이러한 어시스턴트는 개인, 팀 또는 회사 수준에서 고도로 맞춤화할 수 있음
     * 주니어 개발자는 익숙하지 않은 인프라를 빠르게 익히는 데 활용할 수 있고, 시니어 엔지니어는 새로운 프로젝트나 코드베이스를 빠르게 이해하고 의미 있는 기여를 시작하는 데 사용할 수 있음
     * 이전에는 코드 변경의 다운스트림 영향을 완전히 파악하는 데 몇 주가 걸렸지만, 어시스턴트는 수정 사항을 즉시 평가하고 시스템의 다른 부분에 미치는 영향을 요약하며 필요에 따라 추가 변경 사항을 제안할 수 있음

  이미 개발자의 손을 덜어주기 시작

     * 단위 테스트, 상용구 코드 작성, 오류 디버깅 등 최신 소프트웨어 개발에서 가장 지루한 부분이 개발자의 손에서 벗어나는 것을 이미 목격중
     * 이러한 작업은 종종 '부가적인' 작업으로 간주되어 뒷전으로 밀려나곤 했는데 어시스턴트에 의해 처리됨
     * 물론 개발자는 여전히 결과물을 계획하고 평가해야 함
     * 하지만 이러한 보조 도구는 학술 연구를 통해 분산 시스템에 적합한 알고리즘을 선택하고, 기본-백업 접근 방식에서 능동-능동 구현으로 가장 잘 전환하는 방법을 결정하고, 리소스가 개별적으로 효율성에 어떤 영향을 미치는지 이해하고 가격 모델을 개발하는 데 도움을 줘서, 그 어느 때보다 더 많은 일을 하게 될 것
     * 개발자는 Java 버전 업그레이드와 같은 차별화되지 않은 과중한 업무에 대한 부담을 덜고 혁신을 주도하는 창의적인 작업에 집중 가능
     * 향후 몇 년 동안 엔지니어링 팀은
          + 생산성을 높이고,
          + 더 높은 품질의 시스템을 개발하며,
          + 전체 소프트웨어 산업에서 AI 어시스턴트가 참신함에서 필수 요소로 이동함에 따라
          + 소프트웨어 릴리스 주기를 단축하게 될 것

[기술 혁신의 속도에 맞춰 진화하는 교육] - Education evolves to match the speed of tech innovation

     *

     ""고등 교육만으로는 기술 변화의 속도를 따라잡을 수 없음. 업계가 주도하는 기술 기반 교육 프로그램이 등장할 것이며, 이는 숙련된 기술자의 여정과 더욱 유사할 것. 이러한 지속적인 학습으로의 전환은 개인과 기업 모두에게 도움이 될 것""
     * 특히 기술 분야에서는 최고의 인재를 채용하고 최고의 직장에 취업하기 위해서는 대학 학위가 필수라는 인식이 널리 퍼져 있지만, 개인과 기업 모두에서 이 모델이 무너지기 시작
     * 학생의 경우, 비용이 상승하고 있으며 실무 교육이 가능한 상황에서 전통적인 대학 학위의 가치에 의문을 제기하는 사람들이 많음
     * 기업 입장에서는 신입사원에게 여전히 실무 교육이 필요하며, 점점 더 많은 산업에서 직원의 전문성을 요구함에 따라 학교에서 가르치는 것과 고용주가 필요로 하는 것 사이의 간극이 점점 더 벌어지고 있음
     * 수십 년 전의 소프트웨어 개발 과정과 마찬가지로 기술 교육도 중요한 시점에 도달했으며, 한때 소수를 위한 맞춤형 현장 교육이었던 것이 이제는 다수를 위한 업계 주도의 기술 기반 교육으로 발전할 것

  이미 수년간 이런 변화가 진행중

     * 원래 소비자에 초점을 맞추었던 Coursera와 같은 회사는 기업과 파트너십을 맺고 업스킬링 및 재교육 노력을 확장
     * 이제 기업들도 기술 기반 교육에 대규모로 진지하게 투자하기 시작. 실제로 Amazon은 이미 전 세계 2,100만 명의 기술 학습자에게 기술 교육을 실시했다고 발표

  이런 개념은 원래부터 있어 왔음

     * 전기공, 용접공, 목수와 같은 숙련공의 경우 대부분의 기술을 교실에서 습득하는 것이 아님
     * 이들은 훈련생에서 견습생으로, 수습생에서 장인으로, 그리고 장인이 될 수도 있음
     * 직장에서 학습은 지속적으로 이루어지며, 기술을 향상시킬 수 있는 경로가 잘 정의되어 있음
     * 배우고 호기심을 갖는 이러한 스타일의 평생 교육은 개인과 기업 모두에게 좋은 징조

  그렇다고 기존 학위가 사라지는 것은 아님

     * 이것은 '양자택일'의 상황이 아니라 선택의 문제
     * 기술 분야에서는 여전히 이러한 유형의 학문적 학습이 중요한 영역이 존재할 것
     * 하지만 기술의 영향력이 전통적인 교육 시스템을 능가하는 산업 분야도 많을 것
     * 비즈니스의 수요를 충족하기 위해 무시할 수 없는 업계 주도의 새로운 교육 기회의 시대가 열릴 것

   '그리고 여성이 주도하는 팀은 남성으로만 구성된 팀보다 광범위한 건강 문제를 해결하는 데 더 유리하기 때문에~' => 굳이 이런 얘기를 왜 했는지 궁금하네요.

   And since women-led teams are more inclined than those made up of just men

   원문입니당

   거기 걸린 링크고요
   https://www.science.org/doi/10.1126/science.aba6990

   실제로 점점 기업과 대학이 연계된 학과들이 많이 등장하고 있죠. 기술 혁신에 맞게끔 교육이 빠르게 변화해야 할 것 같습니다.

   3년치를 비교해 보면 연결점이 나올려나요 ㅎㅎ

   한국은 따라가기만 해도 고맙겠네요...

   아마존 CTO의 2023년 이후 기술 예측
   아마존 CTO의 2022년 이후 기술 예측
"
"https://news.hada.io/topic?id=12159","모두의 로고 폰트가 왜 비슷해 보이는가? (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     모두의 로고 폰트가 왜 비슷해 보이는가? (2020)

로고 폰트의 동질화 현상

     * 최근 많은 기업들의 로고 폰트가 유사한 경향을 보이며, 이는 산세리프(Sans-Serif) 폰트의 사용 증가와 관련이 있음.
     * 이러한 경향은 고급 기술부터 고급 패션에 이르기까지 다양한 산업에서 나타나고 있으며, 로고 디자인의 단순화 추세를 반영함.

산세리프 로고 폰트의 부상

     * 구글과 같은 기술 대기업들은 로고에서 산세리프 폰트를 채택하여 브랜드 정체성을 간결하게 표현함.
     * 산세리프 폰트는 기술 산업에서 효율성과 간결함을 강조하는 경향에 부합하며, 미래 지향적인 이미지를 강화함.

고급 패션에서의 산세리프

     * 럭셔리 패션 업계에서도 2010년대에 걸쳐 산세리프 폰트를 채택하는 추세가 나타남.
     * 다이앤 본 퍼스텐버그(Diane von Furstenburg), 버버리(Burberry), 발망(Balmain) 등 유명 패션 브랜드들이 로고에서 세리프를 제거하고 산세리프 폰트로 전환함.

산세리프의 비용

     * 산세리프 폰트는 깔끔하고 읽기 쉬우며 다양한 매체에 잘 어울리는 장점이 있지만, 디자인의 동질화로 인해 브랜드의 차별화에 문제가 발생할 수 있음.
     * 산세리프 폰트는 세리프나 스크립트 폰트에 비해 디자인의 차별화 요소가 적어 로고 폰트가 서로 유사해질 위험이 있음.

미니멀리즘의 간략한 역사

     * 산세리프 폰트의 인기는 지난 10년간 미니멀리즘 디자인 추세와 연관이 있으며, 이는 경제 불황과 문화적 경향의 변화에 기인함.
     * 2010년대는 '덜이 더'라는 정신으로 정의되며, 디자인의 간결함과 효율성을 추구하는 문화적 경향이 나타남.

로고 폰트 다양성으로의 복귀

     * 산세리프 폰트가 여전히 소비자의 선호를 반영하는지, 아니면 새로운 로고 폰트 추세로의 전환점을 맞이하고 있는지에 대한 논의가 있음.
     * 브랜드가 소비자와 더 인간적인 관계를 구축하려는 경향이 강해짐에 따라, 개성을 더 잘 표현할 수 있는 로고 폰트로의 전환 가능성이 제기됨.

그동안의 디자인 방향

     * 산세리프 폰트는 사용자 친화적인 디자인으로 여전히 많은 장점을 가지고 있으나, 2020년대에는 더 개성 있는 폰트 선택이나 마케팅 접근 방식을 고려할 필요가 있음.
     * 캐나다의 노네임(No Name) 브랜드는 평범한 로고 디자인에 유머를 더하는 방식으로 독특한 브랜딩을 구축함.

GN⁺의 의견

   이 글에서 가장 중요한 점은 로고 폰트의 동질화 현상과 그로 인한 브랜드 차별화의 어려움이다. 이는 소비자와의 관계 구축과 브랜드 인지도에 중요한 영향을 미칠 수 있으며, 디자이너와 브랜드 관리자에게 새로운 도전을 제시한다. 이 글이 흥미로운 이유는 현재 디자인 트렌드를 이해하고, 미래의 브랜딩 전략을 예측하는 데 도움을 줄 수 있기 때문이다.

        Hacker News 의견

     * 디자인은 패션 산업과 유사함. 많은 사람들이 서로를 모방함.
          + 좋은 디자인은 단순히 보기 좋은 것뿐만 아니라 무리에서 돋보여야 함.
          + 모방의 문제는 모든 것이 똑같아 보이게 되어 특별하거나 기억에 남지 않음.
          + 웹 디자인은 종종 평범하고 일반적인 경향이 있음.
          + 몇 년 전, 앱 디자이너가 독특한 붉은색을 사용하여 아이콘을 돋보이게 함.
     * 대부분의 디자이너들은 동일한 소프트웨어와 기능을 사용함.
          + 동일한 트렌드와 인터넷 기사, 창의적 영향력자를 따르고 같은 대학 과정에서 배움.
          + 모든 수준에서의 동질화가 증가함.
     * 로고 폰트가 비슷한 이유는 모바일 기기에서의 가독성 때문임.
          + 스마트폰의 등장과 함께 이 트렌드가 시작됨.
          + 브랜드는 다양한 매체에서 일관된 모습이 필요함.
          + 모바일에서의 전자상거래 판매가 50% 이상을 차지하고, 소셜 미디어 마케팅이 중요해짐에 따라, 브랜드 마크는 이러한 처리에서 뛰어나야 함.
     * 보스턴 미술관의 로고 변경이 아쉬움.
          + 접근성을 높이기 위해 세련된 세리프 폰트에서 평범한 산세리프로 변경함.
          + 산세리프는 의미가 거의 없어서 디자이너들이 가치를 부여하기 쉬움.
          + 기술 세계의 기업들에게 매력적이지만, 문화 기관들이 같은 방어적 접근을 취하는 것은 실망스러움.
     * 로고 변경에 대한 블로그 추천.
          + 기사를 읽으려면 구독해야 하지만 썸네일만 봐도 재미있음.
     * Adobe 후원 콘텐츠가 현상의 완벽한 예로 보임.
     * 창의성과 개성의 상실이 건축물에서 웹 사이트와 로고로 이어짐.
     * 디자인이 지루한 이유에 대한 많은 논의가 있음.
          + 미니멀리즘의 유행이 문제라고 생각함.
          + 디자이너들은 대체로 창의적이지 않으며 새로운 트렌드를 따름.
     * 디자인의 일반적인 답변은 트렌드와 실패에 대한 두려움의 혼합임.
          + 다른 모든 사람과 비슷하게 하면 비난받지 않음.
     * Airbnb와 같은 회사들의 로고 폰트 변경에서 디자인 주기가 명확함.
          + 현재의 주기는 미니멀리즘이라는 점에서 새로움.
          + 다음 주기에서는 디자인 철학을 허용하는 한 더 다양한 디자인을 볼 수 있을 것임.
"
"https://news.hada.io/topic?id=12090","마이크로소프트, ThreadX(Azure RTOS) 오픈소스화 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 마이크로소프트, ThreadX(Azure RTOS) 오픈소스화 발표

     * Microsoft가 Express Logic 인수를 통해 획득한 실시간 운영 체제인 ThreadX를 오픈 소스로 공개함.
     * ThreadX RTOS와 이를 포함하는 Azure RTOS 개발 스위트가 Eclipse Foundation에 기부되어 Eclipse ThreadX로 알려지게 되며, MIT 라이선스 하에 사용 가능해짐
     * 실시간 운영 체제(RTOS)는 다양하지만, ThreadX는 12억 대 이상의 장치에서 사용되고 있으며, Raspberry Pi를 포함한 여러 장치에서 핵심적인 역할을 함

Raspberry Pi와 ThreadX의 관계

     * ThreadX는 Intel의 칩 내 관리 엔진과 Raspberry Pi의 펌웨어를 구동하는 데 사용됨.
     * Raspberry Pi 1, 2, 3에서는 bootcode.bin으로, Pi 4와 400에서는 start*.elf로 불리며, 이는 GitHub과 Debian에 포함되어 있지만, 소스 코드가 공개되지 않은 프로프라이어터리 ""blob""임
     * Raspberry Pi의 VideoCore GPU에서 실행되며, Arm 코어는 GPU에 종속된 슬레이브 장치로 작동함

Microsoft의 ThreadX 인수와 오픈 소스화의 의미

     * Microsoft는 2019년 ThreadX가 21주년이 되자 Express Logic을 인수하고 Azure RTOS로 리브랜딩함
     * 이 인수는 AWS가 FreeRTOS의 관리권을 인수한 것에 대한 대응으로 보이며, 원 개발자 William Lamie는 새 회사를 설립하여 POSIX 호환 스레드를 가진 ""다섯 번째 세대"" RTOS인 PX5OS를 판매중
     * ThreadX는 검증된 제품으로, 일부 버전은 TÜV Functional Safety 인증을 받았으며, 이는 일부 고객에게 매력적임

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 Microsoft가 ThreadX RTOS를 오픈 소스로 공개했다는 것이며, 이는 개발자 커뮤니티에 더 많은 기회를 제공하고 기술 혁신을 촉진할 수 있는 중요한 변화임.
     * 오픈 소스화는 Raspberry Pi와 같은 장치의 소프트웨어 스택이 완전히 오픈 소스가 될 가능성을 열어, 많은 사람들에게 더 매력적인 선택지가 될 수 있음을 의미함.
     * 이러한 변화는 기술 애호가와 전문가 모두에게 흥미로운 소식이며, 오픈 소스 생태계의 성장과 혁신에 긍정적인 영향을 미칠 것으로 기대됨.

        Hacker News 의견

     * ""Azure RTOS""는 Microsoft가 Amazon이 FreeRTOS를 인수한 후 서둘러 구입한 것이다. Bill Lamie는 PX5를 시작하고 새로운 경량 임베디드 RTOS 작업을 위해 대부분의 인재를 데려갔다. Microsoft가 이러한 조치를 취한다면 Azure RTOS와 IoT 노드에 대한 로드맵에서 벗어나는 것일 수 있다. ThreadX는 FreeRTOS보다 훨씬 더 많은 생태계를 가지고 있으며, Raspberry Pi 이외의 것들에서도 작동한다. Renesas는 자신들의 SoC를 구매하면 무료로 제공했다.
     * 안전 인증은 특히 흥미롭다. ""안전 소프트웨어""를 개발하는 것은 많은 작업을 필요로 한다. 오픈소스이면서 안전 인증을 받은 RTOS를 가지는 것은 꽤 좋은 일이다. 인증을 유지하려면 어딘가에서 투자가 이루어져야 할 것이다. 안전 표준을 이해하고, 올바른 개발 프로세스를 구축하고, 소프트웨어가 변경됨에 따라 이를 유지하는 것은 단순한 코드 작성과 실행만큼 간단하지 않다. 취미로 할 수 있는 소프트웨어 개발 종류는 아니다. Microsoft가 그 개발 노력에 자금을 지원하기를 바란다. FreeRTOS는 안전 인증을 받지 않았지만, SAFERTOS는 같은 API를 가진 상업적 구현으로 안전 인증을 받았다.
     * ThreadX를 사용했을 때 매우 마음에 들었다. ""운영 체제""라고 부르는 것은 인터럽트 서비스 루틴과 스레드 생성, 메모리 할당 관리 등의 기능을 제공하는 함수들로 구성되어 있다는 점에서 관대한 표현이다. ThreadX는 매우 가볍고 작업을 수행하기에 좋았다. tx_thread_create, tx_malloc 등의 함수를 호출하고, 큐, 세마포어, 뮤텍스 등을 사용했다. ThreadX가 여전히 살아있는 것을 보니 반갑다. 실시간 전력/팬/열 제어 루프를 수행해야 했기 때문에 특정 작업이 언제 발생하는지 제어할 수 있어야 했고, 문제를 감지한 후 일정 시간 내에 명령을 내려 대응하거나 시스템을 안전하게 유지해야 했다.
     * Azure가 RTOS를 가지고 있는 이유에 대해 궁금해하는 사람들을 위해, Microsoft는 2019년에 Express Logic과 그들의 ThreadX RTOS를 인수했다. ThreadX는 많은 리소스 제약이 있는 마이크로컨트롤러에서 사용되고 있다. Azure 브랜딩은 IoT 기기가 클라우드와 통신한다는 점 외에는 별로 의미가 없어 보인다.
     * 현재 버전만 GitHub에 올라와 있으며, VideoCore 버전의 흔적은 보이지 않는다. Raspberry Pi Foundation이 자체 버전의 소스 코드를 공개할 수 있는 허가를 받을 수 있을지도 모른다는 희망이 있다.
     * 이 코드는 좋지만, 휴대성을 높이고 프로그래머 친화적으로 만들 수 있는 여러 방법이 있다고 생각한다. 특히 포팅된 어셈블리 코드 부분이 그렇다. 데이터 구조체에 대한 인덱스를 수정하기 어려우므로 구조체 변경이 쉽지 않다. C 구조체와 어셈블리 코드 인덱스가 동기화되어 있지 않으면 시스템이 충돌할 수 있다. 어셈블리 코드에 있는 인덱스를 매크로로 만들면 수정하기 쉬울 것이다. 어셈블리용 헤더와 C 코드용 헤더를 만들고 매크로로 구조체를 정의하면 된다. 이렇게 하면 C 코드와 어셈블리 코드가 동기화될 것이다. 단점은 이 매크로로 구조체를 정의해야 한다는 것이지만, 이는 어셈블리와 C 또는 더 높은 수준에서 사용되는 구조체에만 해당된다.
     * ThreadX에 대해 들어본 지 오래되었다. 약 20년 전에 ThreadX 기반 제품에서 작업했다. 실시간 스케줄링이나 빠른 부팅이 필요하지 않은 애플리케이션 장치였지만, ThreadX를 선택한 결정은 내가 관여할 수 있는 수준을 넘어섰다. 심지어 별도의 ""고급"" 제품이 있었는데, 그것은 임베디드 리눅스를 실행했고 작업하기에 즐거웠다. ThreadX를 사용하여 개발, 디버그, 테스트하는 데 2배에서 3배 더 오래 걸렸다. 커널에서 의존하게 되는 많은 편의 기능들이 ThreadX에는 존재하지 않았기 때문이다. 매우 단순한 안전-중요 장치에만 사용할 것을 권장한다.
     * 이것은 실제로 큰 거래이며, Eclipse Foundation이 이를 관리하는 것은 멋진 일이다. Microsoft는 이에 대한 칭찬과 찬사를 받을 만하다. 그들은 좋은 기록을 가지고 있으므로 매우 낙관적이지만, 이 프로젝트는 많은 지속적인 지원이 필요할 것이다. 이제 Microsoft 혼자만의 책임은 아니지만, 일이 움직이는 동안 더 큰 부담을 짊어질 수도 있다.
     * Deskjet 펌웨어 작업을 할 때 ThreadX는 괜찮은 RTOS였다. 당시 오픈소스 OS와 특히 도구는 작업에 적합하지 않았다. 하지만 지금은 상황이 많이 달라졌고, 대안이 있다.
     * ThreadX는 오픈소스가 아니다. 소스 코드는 공개되어 있지만 평가판, 즉 독점 라이선스로 제공된다.
"
"https://news.hada.io/topic?id=12094","새로운 Outlook, 사용자와 766개 제3자 모두에게 유익","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   새로운 Outlook, 사용자와 766개 제3자 모두에게 유익

요약: godforsaken.website 및 Mastodon 네트워크

     * godforsaken.website는 Mastodon 기반의 분산 소셜 네트워크의 일부임.
     * 영국에 기반을 둔 이 인스턴스는 'bumholes'와 유네스코 세계 유산 사이트에 관한 수천 개의 게시물을 자랑함.
     * 관리자는 doctor steve huel(@pisscotheque)이며, 서버 통계에 따르면 32명의 활성 사용자가 있음.

Mastodon 사용자들의 대화 요약

     * 사용자들은 새로운 Outlook 앱에 대해 다양한 의견을 나눔.
     * 일부는 ""Reject all"" 버튼의 실제 기능에 의문을 제기하며, 데이터 수집과 개인정보 보호에 대한 우려를 표현함.
     * Microsoft의 GDPR 준수 여부와 개인 데이터 처리에 대한 비판적인 시각이 공유됨.
     * 사용자들은 대안으로 Thunderbird와 같은 다른 이메일 클라이언트 사용을 언급함.
     * 일부는 자신의 이메일 서버를 호스팅하는 것의 어려움을 언급하며, 대기업 이메일 서비스에 대한 불신을 표현함.

GN⁺의 의견

   이 글에서 가장 중요한 부분은 사용자들이 새로운 Outlook 앱과 관련하여 개인정보 보호와 데이터 수집에 대한 우려를 공유하고 있다는 점이다. 이는 소프트웨어 업데이트와 개인 데이터 처리에 대한 사용자들의 인식과 기업의 책임에 대한 논의를 촉진할 수 있는 흥미로운 주제이다. 데이터 보호와 사용자 권리에 대한 지속적인 관심은 기술 발전과 함께 중요한 사회적 대화를 이끌어내고 있다.

        Hacker News 의견

     * 새로운 아웃룩에 대한 개인 정보 침해 우려
          + 새로운 아웃룩이 사용자의 모든 이메일 서비스에 대한 지속적인 접근을 위한 수단으로 보임.
          + 이메일 클라이언트라는 용어가 잘못된 것으로, 실제 클라이언트는 MS 클라우드가 되어 모든 메일을 검색하고 처리함.
          + 아웃룩은 실제 이메일 제공자와의 연결을 더 이상 수행하지 않음.
     * 아웃룩 데스크톱 앱으로의 전환과 로그인 문제
          + 구 버전의 메일 앱을 새 아웃룩 데스크톱 앱으로 대체했으나, 로그인 문제가 1년 동안 해결되지 않음.
          + 이 문제로 인해 아웃룩 사용을 완전히 중단함.
     * 마이크로소프트의 업데이트 정책에 대한 비판
          + 윈도우 10 이후, 마이크로소프트의 정책은 무료 업데이트 제공과 대가로 사용자의 테스트 참여, 광고 시청, 개인 정보 제공을 요구하는 것으로 보임.
     * 이메일 클라이언트 선택과 사용 경험
          + Evolution 사용 후 MAPI 제거로 Thunderbird+Exquilla 사용, 현재는 Thunderbird+IMAP 사용이 합리적인 선택으로 보임.
          + 모든 이메일 규칙을 서버 측에서 OWA를 사용하여 설정하고, Thunderbird는 OAUTH2 문제를 대부분 해결함.
          + Teams 사용으로 이메일 클라이언트가 수행하던 캘린더 기능이 불필요해짐.
          + 마이크로소프트 샵에서 리눅스를 사용하는 경험과 윈도우 사용에 대한 개인적 선호도 공유.
     * 아웃룩에 대한 풍자적인 댓글
          + 새로운 아웃룩에 대한 긍정적인 반응을 풍자적으로 표현함.
     * 시장의 힘에 대한 비꼬는 댓글
          + 시장의 힘을 통해 마이크로소프트가 지배적 위치를 남용하는 것을 중단하고 광고를 보여주지 않게 한 것에 대한 비꼬는 댓글.
     * PST 파일 지원 중단에 대한 우려
          + PST 파일 지원 중단으로 인해 오랜 기간의 고객 대화 기록이 있는 인박스에 영향을 미칠 것으로 보임.
          + IT 부서와의 통화와 필요한 경우 고통스러운 마이그레이션을 야기할 것으로 예상됨.
     * 아웃룩의 스팸 필터 부재에 대한 지적
          + 아웃룩의 스팸 필터가 없는 것 같아, 구글의 스팸 메일함보다 더 많은 스팸을 받는 것에 대한 놀라움을 표현함.
     * eM 클라이언트 사용 권장
          + eM 클라이언트가 아웃룩을 완전히 대체할 수 있는 유일한 윈도우 클라이언트로, Exchange와 잘 호환됨을 언급함.
"
"https://news.hada.io/topic?id=12189","Beeper Mini - 안드로이드에서 iMessage를 사용하게 해주는 써드파티 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Beeper Mini - 안드로이드에서 iMessage를 사용하게 해주는 써드파티 앱

     * ""더 이상 녹색 버블은 없다""
     * Android 사용자가 iPhone 사용자와의 메시지 교환 시 파란색 말풍선을 사용할 수 있게 해주는 스탠드얼론 앱
     * 고해상도 파일 전송, 답글 스레드, 타이핑 표시, 읽음 표시, 이모티콘 반응 등의 기능 제공
     * iPhone 전용 그룹 채팅에 참여할 수 있으며, 편집, 취소, 암호화 등의 기능이 포함

Beeper Mini의 작동 원리

     * Beeper Mini를 사용하면 Android 사용자의 전화번호가 iPhone 사용자에게 파란색 말풍선으로 표시됨
     * 앱은 Mac 릴레이 서버 없이 직접 Apple 서버에 연결되어 메시지를 암호화하여 전송하고 수신함
     * 애플의 E2E 암호화 프로토콜과 iMessage 프로토콜을 안드로이드 앱 내에서 네이티브로 구현
          + jjtech 라는 개발자가 리버스 엔지니어링을 한 것: 실제 iMessage 앱과 애플서버간 통신 내용을 분석
          + pypush 라는 Python iMessage 프로토콜 PoC도 오픈소스로 공개
     * 최종 목표는 유니버설 채팅앱을 만드는 것 (SMS/RCS, WhatsApp, Signal 및 12개의 채팅앱을 통합)

Beeper Mini의 보안성

     * 메시지는 끝까지 암호화되어 Beeper나 Apple을 포함한 누구도 읽을 수 없음
     * 암호화 키는 사용자의 기기를 떠나지 않으며, Apple ID가 필요하지 않음

Beeper Mini의 가격 및 사용 가능성

     * 7일 무료 체험 후 월 $1.99의 구독료가 있음
     * 다른 채팅 네트워크 지원 예정이며, 데스크톱과 iOS 버전도 출시 예정
     * Beeper Mini는 Google Play에서 다운로드 가능

   애플이 어떻게 생각할지가 궁금하네요. 이렇게 해서든 iMessage 를 쓰고싶다는건 오히려 애플의 생태계에 끼고싶어한다는 증거이기도 할테니까요.
   저는 이렇게까지 해서 그 생태계에 끼지 않는게 더 좋지 않나 싶기도 하지만, 확장성있는 메신저구조를 가져간 부분은 좋은것 같네요.

   jjtech 가 올린 iMessage, Explained 글과 How Beeper Mini Works
   에서 내부 동작 방식을 설명하고 있습니다.

   GN+ 가 요약한 iMessage, Explained

   어쨋거나 리버스 엔지니어링 앱인데 이게 지속이 가능한 앱일지 모르겠네요.
   다른곳에서도 저 오픈소스 버전을 가져다 고쳐서 쓰게 되려나요.

   그래도 얼마전에 Nothing 폰이 구현했던 중간 맥서버를 통한 릴레이 방식보다는 훨씬 나은방법이긴 하네요.

        Hacker News 의견

     * 유니버설 채팅 애플리케이션의 아이디어에 대한 흥분과 지지

     이 프로젝트는 지속되지 않을 것 같지만 정말 멋지고, 애플의 방해를 이겨내길 바람. 표준과 상호운용성의 가치를 인식하는 데 도움이 될 수 있음.
     * GitHub에서 다운로드되는 코드와 'IMDAppleServices' 바이너리에 대한 질문

     GitHub에서 코드를 다운로드하여 애플의 독점적인 바이너리인 'IMDAppleServices'에서 특정 코드 포인트를 실행함. 이 바이너리의 출처와 코드 내 하드코딩된 주소에서 수행되는 작업에 대한 추가 설명 요청. 이것이 네트워크에 제시되는 고유 디바이스 식별자와 관련이 있는지, 모든 클라이언트가 하나의 식별자를 공유하는지, 아니면 애플 ID마다 생성되는지, 개발 및 테스트 중에 애플 ID가 iMessage에서 차단된 사례가 있는지 질문.
     * Beeper에 대한 존경과 기술적 제품으로서의 가치 인정

     Beeper의 백엔드가 Matrix와 오픈 소스 브릿지로 구성된 점이 인상적임. 사용자에게 문제를 일으킬 수 있는 구현을 피하고 올바르게 구현하기 위해 노력한 점에 대한 존경.
     * iMessage 자체보다 더 큰 가능성을 가진 프로젝트에 대한 칭찬

     이 방법을 사용하여 iCloud Keychain에 접근하고 Continuity 키를 생성함으로써 Linux와 Windows에서도 Universal Clipboard가 작동할 수 있음. 아이폰이 BLE를 통해 클립보드 데이터를 해당 키로 암호화하여 방송할 것임.
     * 구독 정보 이전에 로그인 버튼을 제공하는 것에 대한 의문

     월 구독료가 있다는 것을 알았다면 다운로드를 시도하지 않았을 것임. 이런 식의 로그인 버튼 배치가 요즘 일반적인지 질문.
     * Beeper 사용에 대한 우려와 서비스 약관 위반에 대한 두려움 표현

     Beeper는 멋진 아이디어이지만 서비스 약관 위반으로 인한 계정 정지를 우려하여 사용을 망설임. Beeper를 사용하는 사람들이 이 문제를 어떻게 다루고 있는지, 테스트 계정을 사용하거나 위험을 감수하고 있는지 궁금함.
     * Beeper Mini가 '유출된/추출된' FairPlay 개인 키를 사용하는 것에 대한 우려

     FairPlay 인증서/키는 각 iDevice마다 고유해야 하는데, Beeper Mini가 설치마다 새로운 것을 생성하는지, 애플이 이 인증서를 진짜로 인식할 이유가 있는지 질문. 또한 언급된 소스 저장소가 404 오류를 보이는 점에 대한 지적.
     * Google 계정 없이 Beeper 사용 가능성에 대한 질문

     Google 계정 없이, 최대한 샌드박스화된 Google Play 서비스만을 사용하여 Beeper를 사용할 수 있는지 여부에 대한 질문.
     * Beeper Mini의 확장 가능성에 대한 관심

     Beeper Mini가 지원하는 모든 네트워크를 포함시킬 계획이며, 데스크톱과 iOS로도 출시될 예정이라면, 유료라도 관심이 있음. 여러 앱을 사용하지 않고 하나의 깔끔한 앱을 사용하고 싶은 바람.
     * 애플 서버에 연결하기 위한 허가 여부에 대한 질문

     애플로부터 서버에 연결하기 위한 허가를 받았는지, Google Play가 제3자 API에 연결하는 앱을 허용하지 않는 정책에 대한 언급. APNS에 애플의 허가 없이 연결하는 앱에 대한 이해와 관련하여 Google Play 개발자 계정이 정지된 개인적 경험 공유.
"
"https://news.hada.io/topic?id=12151","GCP 사건 발생 현황사건 발생 현황

구글 클라우드 플랫폼의 문제점과 대응

     * Railway는 구글 클라우드 플랫폼(GCP)의 Compute Engine을 사용하여 애플리케이션 개발 플랫폼을 구동함.
     * 특정 머신들이 응답하지 않게 되어 서비스에 장애가 발생했으며, 이는 약 10분간 지속되었음.
     * 문제는 해결되어 모든 작업 부하가 성공적으로 이관되었고 서비스가 복구됨.

구글 클라우드와의 어려운 관계

     * Railway는 지난 18개월 동안 구글 클라우드와 여러 문제를 겪음.
     * 네트워킹 문제가 지속되자 자체 네트워킹 스택을 구축하여 문제를 해결함.
     * 구글이 레지스트리 할당량을 제한하자 자체 레지스트리 제품을 만들어 해결함.
     * 구글의 지원 서비스에 실망하여 구글의 부사장들과 문제 해결을 위해 논의함.
     * 구글이 서비스 약관을 변경하여 비용이 20% 증가하였으며, 이에 대한 해결책을 기다리고 있음.
     * Railway는 구글 클라우드 서비스를 중단하고 자체 베어 메탈 인스턴스로 이전할 계획임.

사건 복기

     * 구글이 기계를 재시작하여 서버가 오프라인 상태가 됨.
     * 자동 장애 복구 시스템이 있으나, 일부 서버가 복구되지 않아 수동으로 장애 복구를 진행함.
     * 구글 클라우드의 자동 라이브 마이그레이션으로 인한 문제로 추정하고, 구글에 연락을 시도했으나 응답이 없었음.
     * 시리얼 콘솔 로그 분석 결과, GCP 게스트에서 사용자 공간에서 커널로의 메모리 전송 중 드문 경우에 자원 압박 하에 소프트락이 발생하는 것으로 추정됨.

사용자를 위한 결론

     * 수동 장애 복구 중 각 호스트당 약 10분간의 다운타임 발생함.
     * 다중 서비스 워크로드를 실행하는 사용자에게는 다운타임이 더 길어질 수 있음.
     * Railway는 사용자에게 불편을 끼친 점에 대해 사과하며, 더 높은 신뢰성을 제공하기 위해 자체 베어 메탈로 이전할 계획임.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 구글 클라우드 플랫폼의 기술적 문제와 고객 지원의 문제점이 사용자에게 미치는 영향이다. Railway가 겪은 문제들은 클라우드 서비스 제공자의 신뢰성과 지원에 대한 중요성을 강조하며, 이러한 문제를 해결하기 위해 자체 인프라를 구축하는 것의 중요성을 보여준다. 이 글은 클라우드 컴퓨팅의 복잡성과 잠재적인 위험성을 이해하는 데 도움이 되며, 기술적 문제에 대한 통찰력과 대응 방안을 제공함으로써 흥미롭고 유익하다.

        Hacker News 의견

     * 소규모 소프트웨어 회사의 경험
          + 2인 소프트웨어 회사로서 Google과 여러 문제를 겪음.
          + Google Adwords와 관련된 문제가 대부분임.
          + Google이 큰 금액을 지불하는 원문 작성자에게 제대로 된 지원을 제공하지 않는다면, 작은 비즈니스에 대한 희망이 적음.
     * GCP의 변화에 대한 의견
          + 몇 년 전 GCP는 AWS에 비해 가격 대비 성능 면에서 더 나은 옵션이었음.
          + 당시 GCP의 지원은 우수했으며, 초기 티켓 처리 경험도 인상적이었음.
          + 영업 팀과의 상호작용도 좋았으나, 지금은 AWS가 비용 대비 성능 면에서 GCP를 따라잡았고, 관리형 서비스에서 앞서 나감.
          + GCP 지원 경험이 현저히 악화되었으며, 네트워크 문제 인식에 실패함.
          + GCP에 대한 투자가 많았지만, 현재 상황에 실망하고 지출을 줄이려고 노력 중임.
     * GCP와 AWS의 신뢰성 비교
          + GCP에서 컴퓨트 인스턴스가 다운되는 것은 드문 일임에도 불구하고 비판을 받음.
          + AWS에서는 인스턴스가 자주 중단되거나 사라지는 경험을 함.
          + AWS의 기본 요소가 GCP보다 덜 신뢰성 있다고 개인적인 경험과 AWS 문서를 통해 주장함.
     * 클라우드 제공업체의 문제에 대한 의견
          + 모든 클라우드 제공업체에 문제가 있음.
          + AWS에서 여러 가지 이슈를 발견하고 보고했으며, 지원팀이 시간을 낭비하게 함.
          + 핵심 서비스(EC2, EBS, S3)를 제외하고는 사용을 꺼림.
     * Google Cloud 지원 서비스에 대한 경험
          + Google Cloud 지원 서비스에 대해 인상적이지 않음.
          + AWS에서는 지원 경험이 항상 좋았음.
          + Google Cloud에서 긍정적인 상호작용이 있을 경우, 강조하여 긍정적인 피드백을 제공할 것을 권장함.
     * GCP의 기능 문제에 대한 경험
          + GCP의 기업용 기능이 제대로 작동하지 않았으며, 이를 수정하려고 할 때 다운타임을 유발함.
          + GCP 대표들은 NDA를 상기시키며 문제를 인정하지 않으려 함.
     * GCP의 미문서화된 임계값에 대한 경험
          + Cloud Run과 관련하여 CPU 사용량과 동시 요청에 기반한 설명할 수 없는 스케일링 이벤트를 경험함.
          + 프리미엄 지원을 통해 추가 기준이 있음을 알게 되었으나, 자세한 설명을 듣지 못함.
     * Google Cloud 네트워킹 문제에 대한 해결책
          + Google Cloud 제품에서 지속적인 네트워킹 문제를 겪음.
          + 자체 네트워킹 스택을 구축하여 문제 해결함.
          + UDP/Wireguard 오버레이가 기본 네트워크가 불안정할 때 어떻게 더 신뢰성 있을 수 있는지에 대한 의문 제기.
     * Google Cloud의 신뢰성에 대한 의견
          + 초기 클라우드 컴퓨팅에서의 신뢰성 문제는 이해할 수 있으나, 2023년에 대형 고객을 실망시키는 것은 좋지 않은 상황임.
          + 다른 사람들도 비슷한 경험을 했는지, 아니면 저자만 운이 나쁜 것인지 궁금함.
     * GCP에서의 문제에 대한 개인적인 혼란
          + 중첩된 가상화가 문제와 무슨 관련이 있는지 혼란스러움.
          + MMIO 명령어에 대한 언급이 이해되지 않음.
          + 저자가 최근 사건에 대해 답답함을 느끼고 해결책을 찾으려고 애쓰는 것으로 보임.
"
"https://news.hada.io/topic?id=12109","CSAR: 유럽 의회, 개인 메시지 대량 스캐닝 반대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     CSAR: 유럽 의회, 개인 메시지 대량 스캐닝 반대

유럽 의회, 개인 메시지 대량 스캔 거부

     * 2022년 11월 22일, 유럽 의회는 '아동 성적 학대 방지 및 대응을 위한 규정' 초안에 대한 공식 입장을 채택함.
     * 모든 유럽 정치 그룹의 강력한 지지를 받아 인권에 대한 긍정적 발전으로 평가됨.
     * 유럽연합(EU)의 가장 논란이 많은 법안 중 하나에서 인권 보호에 대한 진전이 이루어짐.

유럽 의회의 입장

     * 유럽 의회는 사회적 목표 달성을 위해 어떠한 조치도 정당화되지 않는다는 명확한 정치적 성명을 발표함.
     * EU 기본권 법은 사람들의 권리에 대한 제한이 목표 달성을 위해 필요하며, 객관적으로 효과적이고 가능한 가장 적게 침해하는 것이어야 함을 요구함.
     * 의회는 대량의 개인 메시지를 스캔하도록 강제하는 규칙을 단호히 거부하고, 합리적인 의심이 있을 때만 요구하도록 변경함.

EDRi의 활동과 연대

     * EDRi는 아동 성적 학대 문제에 대처하기 위한 조치가 인권 규칙에 부합해야 한다고 EU에 지속적으로 촉구함.
     * '디지털 시대의 아동을 보호하기 위한 10가지 원칙'은 원래 입법 제안에서 무시되었으며, 이는 커미션 자체 검토 위원회의 우려도 마찬가지였음.
     * EDRi가 주도한 'Stop Scanning Me' 캠페인 덕분에 유럽 전역의 수천 명이 초안 조치에 대해 경고의 목소리를 냄.

다음 단계는?

     * 유럽 의회는 공식적으로 입장을 채택함에 따라, '트릴로그'라 불리는 비공개 협상에 참여할 준비가 됨.
     * 현재 유럽연합 회원국 정부들은 협상에 필요한 명확한 입장을 가지고 있지 않으며, 일부 국가들은 기술적 및 법적 현실을 듣지 않고 있음.
     * 독일, 오스트리아, 폴란드, 에스토니아, 슬로베니아 등의 정부가 잘못된 제안에 대해 강력히 반대하는 입장을 취함.

GN⁺의 의견

     * 유럽 의회가 개인 메시지의 대량 스캔을 거부하고, 인권 보호를 위한 중요한 이정표를 설정한 것이 이 기사에서 가장 중요한 내용임.
     * 이 결정은 디지털 권리와 개인의 사생활 보호에 대한 유럽 의회의 확고한 태도를 보여주며, 기술과 법의 현실을 인정하는 중요한 사례로 평가될 수 있음.
     * 이러한 발전은 인권과 개인 정보 보호에 관심이 있는 사람들에게 흥미롭고, 디지털 환경에서의 권리 보호에 대한 중요성을 강조하는 매력적인 소식임.

        Hacker News 의견

     * 보안을 깨려는 시도를 방지하기 위한 메커니즘의 필요성

     보안을 해치려는 시도를 지속적으로 막기 위한 방안이 필요함을 강조함. 위기 상황이나 피로감으로 인해 결국 시도가 성공할 수 있음을 우려함.
     * 대규모 감시의 부패성

     대규모 감시가 영혼을 병들게 하는 절대 권력과 같다고 비유하며, 이러한 감시가 개인에게 어떻게 부패를 가져오는지 직접적인 경험을 통해 설명함.
     * 법 집행 관점에서의 통신 감시의 무용성

     법 집행 기관이 대중이 사용하는 통신 시스템을 감시하는 것은 일반 대중을 모니터링하려는 의도가 아니라면 가치가 없다고 주장함. 기술적 수단을 가진 악의적 행위자들이 공개 시스템을 사용하지 않을 것이라는 점을 강조함.
     * 노르웨이의 메타데이터 감시 법률

     노르웨이에서 국경을 넘는 모든 트래픽의 메타데이터를 읽을 수 있게 하는 법을 통과시켰으나, 대부분의 데이터가 국경을 넘는 현실에서 이 법이 무의미하다고 비판함.
     * EU 회원국의 거부권 중요성

     몇몇 국가들이 반대한 덕분에 법안이 철회된 사례를 들어, EU 내에서 회원국의 거부권이 중요하다고 주장함.
     * 정치인들의 통신 기록 공개 필요성

     지지한 정치인들의 모든 메시지를 공개 기록으로 만들어야 한다고 주장하며, 권력 남용을 막는 것이 그들의 사생활권보다 중요하다고 강조함.
     * 암호화된 앱 개발의 중요성

     정부의 의도와 상관없이 개인의 메시지를 보호할 수 있는 암호화된 앱 개발의 중요성을 강조함. 기술적으로 능숙하고 프라이버시를 중시하는 사람들만이 이러한 앱을 계속 사용할 수 있을 것이라는 우려를 표함.
     * 프라이버시 보호를 위한 승리와 지속적인 경계

     프라이버시 보호를 위한 중요한 승리를 기념하면서도, 정부가 다른 이름으로 다시 시도할 것이라는 경계심을 표현함.
     * 플랫폼 소유자의 법 집행 요청 준수 가능성

     메시지가 암호화되어 있더라도 대부분의 플랫폼 소유자들이 법 집행 요청에 따를 것이며, 이로 인해 메시지가 노출될 수 있는 다양한 방법들을 지적함.
"
"https://news.hada.io/topic?id=12138","장치에서 오프라인으로 사용 가능한 Easy Stable Diffusion XL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              장치에서 오프라인으로 사용 가능한 Easy Stable Diffusion XL

Noiselith 앱 소개

     * 오프라인 이미지 생성 도구: Noiselith는 클라우드 없이 장치에서 자유롭게 이미지를 생성할 수 있게 해줌.
     * 개인정보 보호: 모든 생성 작업이 로컬에서 이루어지며 클라우드로 정보가 전송되지 않음.
     * 무제한 생성: 하루에 100, 200, 심지어 1000개의 이미지를 생성할 수 있는 무제한 생성 기능 제공.
     * 속도: 서버 자원을 기다릴 필요 없이 장치에서 즉시 이미지 생성 가능.

시스템 요구사항

     * Windows: Windows 10 또는 11, NVIDIA RTX 20 시리즈 이상의 GPU(8GB 이상 VRAM), 16GB 이상의 RAM, 20GB 이상의 저장 공간 필요.
     * macOS: macOS 12.3 이상, Apple Silicon, 32GB 이상의 RAM, 20GB 이상의 저장 공간 필요.

사용자 경험

     * 간편한 설치: 몇 번의 클릭만으로 Noiselith를 사용할 준비 완료.
     * 직관적 사용: 기술적인 세부 사항에 대해 걱정할 필요 없이 아이디어를 시각적으로 변환하는 직관적인 인터페이스 제공.
     * 모델 관리: 모델을 쉽게 다운로드, 삭제, 업데이트할 수 있으며, 생성된 이미지를 우아하게 정리해주는 갤러리 제공.

개발 로드맵

     * 다양한 기능 지원: SDXL 모델, SDXL LoRA, 역사 관리, 프로젝트 관리, 모델 관리 등의 지원 예정.
     * 커뮤니티 및 확장성: 사용자 커뮤니티, SD 1.5 및 2.1 모델 지원, 모델 데이터베이스, 업스케일러, 스마트 프롬프트 등의 기능 포함.
     * Noiselith 앱 스토어: 클라우드 GPU, 원격 협업 기능을 포함한 앱 스토어 개발 계획.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 Noiselith 앱이 사용자의 장치에서 클라우드의 도움 없이 개인정보를 보호하면서 무제한으로 이미지를 생성할 수 있는 새로운 도구라는 점임.
     * 이 앱은 소프트웨어 설치와 사용의 복잡함을 줄이고, 직관적인 인터페이스를 통해 누구나 쉽게 이미지 생성을 시작할 수 있게 함으로써 창의적인 작업에 더 집중할 수 있게 만드는 점에서 흥미로움.

        Hacker News 의견

     * 로컬 AI 설치 후기
          + 장점: 자체 포함성, 모델 설치기의 용이함, 고품질 이미지 생성, 생성 중간 단계 표시
          + 단점: 모델 파일 다운로드 위치 불명확, 첫 생성 속도 저하, 여러 사용자 피드백 모듈, 비오픈소스, 메모리 사용량, 비표준 macOS 사용자 경험
          + 종합 평가: 별 4개, 재사용 의향 있음
     * 오픈소스 로컬 AI 대안들
          + 이미 여러 오픈소스 로컬 AI 옵션이 존재하며, 사용자 친화적인 UI도 제공됨
     * Fooocus 추천
          + Fooocus는 짧은 프롬프트로 고품질 출력을 제공하는 로컬 SD 파이프라인 중 최고라고 평가
     * 다른 서비스와 비교 의향
          + Diffusionbee.com과 비교해볼 예정
     * 마케팅 전략에 대한 의견
          + 오프라인 기능을 차별점으로 내세우는 것은 대부분 이미 사용하는 방식이므로, 설치 및 사용의 용이성에 더 집중할 것을 제안
     * 부적절한 판매 프롬프트 지적
          + 판매 프롬프트의 부적절함에 대한 비판
     * 네트워크 접근 요구에 대한 우려
          + 오프라인이라고 표시되었음에도 네트워크 접근을 요구하는 것에 대한 문제 제기
     * 로컬 클라이언트의 발전에 대한 흥미
          + 다양한 로컬 클라이언트의 존재와 각각의 특징에 대한 설명
     * 무료이지만 오픈소스가 아닌 점에 대한 의문
          + 무료 서비스이지만 오픈소스가 아닌 점에 대한 의심
     * 로컬 AI의 장점과 다른 패키지 추천
          + 로컬 AI의 장점 강조 및 다른 유사하거나 더 나은 패키지에 대한 추천 링크 제공
"
"https://news.hada.io/topic?id=12183","예측에는 오차 범위가 필요합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           예측에는 오차 범위가 필요합니다

범죄 분석 및 범죄 예측의 오류 범위 필요성

     * 범죄 예측에는 오류 범위가 포함되어야 함을 강조하는 내용
     * 리처드 로젠펠드가 최근 범죄학자에 기고한 글에서 국가 범죄율 예측에 대해 논의
     * FBI가 범죄 통계를 1년 늦게 발표하는 것에 대한 불만이 있지만, 학계는 더 늦게 ""예측""을 제공함

ARIMA 모델을 사용한 분석

     * 파이썬에서 ARIMA 모델을 사용하여 합리적인 예측 오류가 어떻게 보이는지 분석
     * 데이터와 코드는 GitHub에서 제공
     * 데이터 로딩 및 라이브러리 가져오기에 대한 간단한 설명과 함께 데이터 형식을 올바르게 설정하는 과정 설명

모델 피팅 준비

     * 리처드의 논문과 유사한 조건으로 ARIMA(1,1,2) 모델 피팅
     * 리처드의 모델에 대한 설명과 비교, 그리고 모델의 출력 결과 제공

예측 및 오류 범위

     * statsmodels 패키지를 사용하여 새로운 데이터를 추가하고 한 단계 앞선 예측을 수행
     * 예측의 표준 오류가 시간이 지남에 따라 증가하는 것을 보여주는 예측 결과 제공

리처드의 추정치와 비교

     * 리처드의 예측치와 비교하여 각 모델의 MAPE(Mean Absolute Percentage Error)를 계산
     * 예측 간격을 보여주며, 관찰된 값이 여전히 추정된 모델과 일치함을 강조

최종 포인트

     * 리처드가 매크로 수준의 범죄 예측에서 계속해서 큰 오류를 범해도 중요하지 않음을 주장
     * 국가 수준의 범죄 예측이 정책 대응에 도움이 되지 않는다고 주장
     * 실제 범죄 예측의 응용 예로, 도시 성장에 따른 경찰 인력 증가 필요성을 예측하는 방법을 제시

GN⁺의 의견

   이 글에서 가장 중요한 점은 범죄 예측에 있어 오류 범위의 중요성과 예측의 불확실성을 인정하는 것의 필요성을 강조하는 것임. 범죄 예측이 정책 결정에 직접적으로 유용하지 않을 수 있음에도 불구하고, 예측 모델링은 범죄학 이론의 타당성을 검증하는 데 중요한 도구로 사용될 수 있음. 이 글은 데이터 과학과 범죄학의 교차점에 있는 사람들에게 흥미로운 인사이트를 제공하며, 예측 모델의 한계와 이를 극복하기 위한 방법에 대한 심도 있는 논의를 제공함.

        Hacker News 의견

     * 예측과 의사결정의 연결성
          + 예측은 일반적으로 의사결정으로 이어져야 함.
          + 예측이 의사결정과 분리될 때 그 가치가 불분명해짐.
          + 로젠필드는 과거 데이터에 대한 통계적 결론에 무게를 더하기 위해 예측을 사용하려 하고 있으나, 이는 의심스러움.
     * 오차 막대의 의미
          + 오차 막대의 의미는 명확하지 않음.
          + 하나는 신뢰 구간(모델이 출력이 이 범위 내에 있을 확률을 95%로 제공).
          + 다른 하나는 표준 편차(자신의 예측과 결과 사이의 제곱 차이를 예측하는 것).
     * 오차 막대의 중요성
          + 오차 막대는 새로운 처리의 이점을 비교할 때 더 나은 이해를 제공.
          + 일부는 이것이 문제를 혼란스럽게 만든다고 생각.
          + 의미 있는 오차 막대를 얻는 것은 어떤 경우에는 매우 어려움.
     * 통계 분포의 검토
          + 중요한 지표에 대한 히스토그램(통계 분포)을 정기적으로 살펴봄.
          + 웹 서비스 호출 속도 문제에서 두 개의 명확한 피크가 나타남.
          + 로그아웃된 사용자와 로그인된 사용자를 나타내는 두 피크를 통해 문제의 원인을 더 깊이 파악.
     * 날짜 추정치에 대한 오차 막대
          + 날짜 추정치(즉, 마감일)에도 오차 막대가 있어야 함.
          + 날짜는 예측이며, 불확실성 추정치 없이는 의미가 없음.
     * 불확실성 정량화의 중요성
          + 데이터 과학과 특히 머신러닝에서 불확실성 정량화는 종종 간과됨.
          + 실무자들은 항상 통계적 배경을 가지고 있지 않음.
     * 예측과 측정의 비교
          + 예측은 미래에 대한 측정으로 볼 수 있음.
          + 불확실성에 대한 지식 없이 하는 모든 측정은 의미가 없음.
     * 날씨에 대한 오해
          + 처음에는 이 글이 날씨에 관한 것으로 생각함.
     * 현재 또는 과거의 예측, 즉 나우캐스팅
          + 데이터를 기다리는 동안 현재 또는 과거를 예측하는 예술.
          + 오차 범위 없이는 부정확한 과학/통계임.
     * 오차 막대 없이도 유용한 예측
          + 때로는 단순한 점 예측만으로도 행동을 안내하는 데 필요함.
          + 예측 분포의 전체 지식이 좋은 결정을 내리는 데 도움이 될 수 있음.
     * 가우시안 프로세스 회귀의 장점
          + 가우시안 프로세스 회귀(또는 크리깅)는 큰 장점을 가짐.
     * 모든 추정/예측/예보/내삽/외삽에 대한 신뢰/예측/허용 구간의 필요성
          + 팀이 문제에 투입하는 가정을 포함하는 신뢰/예측/허용 구간이 있어야 함.
"
"https://news.hada.io/topic?id=12119","터보 파스칼 40주년","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              터보 파스칼 40주년

Turbo Pascal의 40주년

     * 1983년 11월 Borland에 의해 소개된 Turbo Pascal이 이번 달로 정식으로 40주년을 맞이함.
     * Turbo Pascal은 업계에 있어 중요한 이정표 제품이며, Borland 회사의 시작을 알리고 최초의 인기 있는 통합 개발 환경(IDE)이었음.
     * Embarcadero는 Turbo Pascal의 후속 제품을 계속 작업하고 있으며, 최근에는 그 컴파일러의 36번째 버전을 출시함.

사용자 의견

     * Randy Lea: Turbo Pascal은 편집, 컴파일, 실행이 쉬웠으며, 속도가 빨랐음. 어셈블러 코드를 실행할 수 있는 기능이 큰 업그레이드였음.
     * Liviu: Turbo Pascal 사용 시 ""end"" 문장 앞의 세미콜론은 필요하지 않음.
     * Paul Max: Turbo Pascal의 40주년을 축하함.
     * Elias Bourgess: Turbo Pascal은 프로그래밍 분야로 진입하는 데 주요한 이유 중 하나였음.
     * Marco Cantu: Pascal은 세미콜론을 문장 구분자로 사용하지만, 추가 세미콜론이 있어도 문제되지 않음.
     * Chris Mark: 대학에서 Turbo Pascal을 사용했으며, 이후 Delphi를 사용하게 됨. 제품을 대학과 학생들에게 무료로 제공하면 평생의 충성도를 얻을 수 있음.
     * Lachlan: Turbo Pascal은 첫 사랑과 같은 프로그래밍 언어였으며, 고등학교 CS 수업과 프로그래밍 대회에서 사용함.
     * DW: Turbo Pascal은 첫 프로그래밍 언어였으며, 40주년을 축하함.

GN⁺의 의견

     * Turbo Pascal의 40주년은 소프트웨어 개발 역사에서 중요한 이정표를 나타내며, 많은 개발자들에게 영향을 미친 것으로 보임.
     * 이 기념일은 개발자 커뮤니티에 긍정적인 반응을 불러일으키며, 프로그래밍 언어에 대한 개인적인 추억과 경험을 공유하는 계기가 됨.
     * 이 글은 Turbo Pascal이 현대 소프트웨어 개발의 초석 중 하나로서 그 가치와 영향력을 인정받고 있음을 보여주는 흥미로운 내용을 담고 있음.

        Hacker News 의견

     * ZZT 게임과 Turbo Pascal
          + 한 사용자는 자신이 좋아하는 컴퓨터 게임 ZZT가 Turbo Pascal로 작성되었다고 언급함. ZZT는 Epic Megagames의 Tim Sweeney가 만든 텍스트 모드 게임으로, 퍼즐과 슈팅 등이 특징임. 무료 공유 버전에도 게임 편집기가 포함되어 있었으며, ZZT-OOP라는 작은 프로그래밍 언어도 있었음. 원본 소스 코드는 분실되었지만, Adrian Siekierka가 원본 Pascal 코드를 역공학하여 Turbo Pascal의 원래 버전으로 컴파일했을 때 바이트 단위로 동일한 실행 파일을 생성하는 놀라운 작업을 함.
     * Turbo Pascal의 영향력
          + 다른 사용자는 Turbo Pascal이 자신을 프로그래밍 세계로 이끈 계기가 되었다고 회고함. 독일 마르크를 사용하여 Borland Pascal 7.0과 Delphi 1.0, 2.0 라이선스를 구입했고, 이를 통해 첫 상업용 소프트웨어를 개발하여 판매했음. DOS 시대에는 Turbo Pascal이 프로그래밍을 시작하기에 가장 쉬운 방법 중 하나였으며, Windows 3.1/95에서는 Delphi가 GUI 프로그래밍의 용이함을 보여줬음. 현대의 소프트웨어가 비슷한 기능을 가지고 있음에도 파일 크기가 훨씬 큰 것에 대해 의문을 제기함.
     * 학습 경험과 현대 시스템의 비교
          + 또 다른 사용자는 Turbo Pascal이 제공한 간단하고 이해하기 쉬운 코드 예제들이 인터넷 없이도 TP를 스스로 배울 수 있게 해주었다고 언급함. 현대 시스템이 이와 유사한 자료를 제공하지 않는 것에 대해 아쉬움을 표함.
     * Delphi와의 경험
          + 한 사용자는 대학에서 Borland Pascal을 배웠고, 이 경험이 Delphi를 사용한 맞춤형 앱 개발로 이어졌다고 말함. 이후 Borland에서 Kylix와 C++Builder IDE를 테스트하는 일을 하게 됨. Delphi의 컴포넌트 라이브러리와 확장 가능한 코딩 환경에 대한 향수를 느낌.
     * Turbo Pascal과 청소년기
          + 한 사용자는 14살 때 Turbo Pascal을 불법 복제하여 사용했고, 이것이 기술 분야에서의 경력을 결정짓는 계기가 되었다고 고백함.
     * Free Pascal과 현대 IDE
          + 사용자 중 한 명은 Free Pascal이 여전히 원래 TP IDE와 유사한 모습을 제공하지만, 현대의 IDE 기능과 통합되지 않는다는 점에서 아쉬움을 표함.
     * Turbo Pascal의 속도
          + 다른 사용자는 Turbo Pascal의 속도가 경쟁자들보다 월등히 빨랐으며, 결과적으로 생성된 프로그램도 더 빨랐다고 언급함.
     * Turbo Pascal과 개인 경력
          + 한 사용자는 Turbo Pascal을 사용하여 커리어를 시작했고, 이 경험이 매우 중요했다고 회고함.
     * Macintosh Plus와 Turbo Pascal
          + 또 다른 사용자는 Macintosh Plus에서 Turbo Pascal을 사용했으며, 이후 THINK Pascal과 THINK C로 전환했다고 말함. Turbo Pascal에 대한 애정을 표현함.
     * Apple Pascal에서 Turbo Pascal로의 전환
          + 마지막 사용자는 Apple Pascal에서 Turbo Pascal로 전환한 경험을 공유하며, Turbo Pascal의 빠른 컴파일러와 좋은 피드백, 다채로운 에디터, Wordstar 키 바인딩 등이 좋은 경험이었다고 언급함.
"
"https://news.hada.io/topic?id=12175","퇴출된 선전학자, 하버드가 메타에 굴복했다고 비난","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      퇴출된 선전학자, 하버드가 메타에 굴복했다고 비난

요약: 하버드 대학의 연구원 해고 논란

     * 조안 도노반은 하버드 대학이 페이스북과의 관계를 위해 자신을 해고했다고 주장함.
     * 도노반은 소셜 미디어 플랫폼에서의 잘못된 정보에 대한 연구를 진행하며, 페이스북 문서를 공개한 후 하버드 대학의 태도가 변했다고 밝힘.
     * 하버드 대학은 도노반의 주장을 부인하며, 연구 프로젝트를 이끌 교수를 찾지 못해 프로젝트를 종료했다고 설명함.

하버드 대학의 입장

     * 하버드 대학은 도노반의 해고를 부인하고, 연구 프로젝트에 대한 후원자의 영향력을 부정함.
     * 대학 측은 도노반에게 시간강사로 계속 근무할 기회를 제공했으나 그녀가 이를 거부했다고 주장함.
     * 도노반의 연구 프로젝트는 교수의 지도 없이는 지속될 수 없었으며, 프로젝트 종료를 위한 기간이 주어졌다고 밝힘.

조안 도노반의 주장

     * 도노반은 하버드 대학이 페이스북과의 관계를 이유로 자신의 연구 자유를 침해했다고 주장함.
     * 그녀는 페이스북 문서를 공개한 후 하버드 대학의 태도가 변하고 연구 활동에 제약이 생겼다고 밝힘.
     * 도노반은 하버드 대학이 페이스북의 영향력에 휘둘려 학문적 자유를 희생했다고 주장함.

GN⁺의 의견

   이 기사에서 가장 중요한 것은 학문적 자유와 대학 내 연구의 독립성에 대한 논란이다. 하버드 대학과 페이스북 간의 관계가 연구원의 해고와 연구 활동에 어떤 영향을 미쳤는지에 대한 주장은 학계와 기술 산업의 상호작용에 대한 깊은 통찰을 제공한다. 이러한 이슈는 연구 윤리와 자금 출처의 중요성을 강조하며, 학문적 자유가 기업의 이해관계와 어떻게 충돌할 수 있는지에 대한 흥미로운 사례를 제시한다.

        Hacker News 의견

     * ""선물"" 링크와 아카이브 링크 제공
          + 제공된 링크를 통해 관련 정보 접근 가능
     * 조안 도노반의 공익제보 선언문 요약
          + 페이스북이 연구 자금을 제안했으나 거절함
          + 페이스북 전 커뮤니케이션 담당자와의 불편한 만남 발생
          + 케네디 스쿨 학장으로부터 연구 검토 요청 이메일 수신
     * 어류 연구 관련 개인 경험담
          + 친구의 수산학부 연구 프로젝트 중단
          + 대형 농업 기업의 연구 중단 압력과 장학금 제안
     * 찬 주커버그 재단의 행위에 대한 법적 문제 제기
          + 비영리 재단의 세제 혜택과 거버넌스 요구사항
          + 재단이 메타의 이익을 위해 압력을 행사하는 경우 독립성 문제
     * 법적 사건에 대한 관심과 추적 방법 탐색
          + 6개월 후 사건 진행 상황 확인을 위한 캘린더 알림 설정
          + 법적 사건 업데이트를 이메일로 받을 수 있는 서비스에 대한 호기심
     * 하버드 대학의 조안 도노반에 대한 입장
          + 하버드는 해고를 부인하며, 도노반에게 시간강사로 계속할 기회를 제공했다고 주장
          + 하버드의 입장에 대한 의심 표명
     * 대학의 재정적 영향력에 대한 비판
          + 대형 기부자에 대한 대학의 유화적 태도 지적
          + 대학의 연구 중단 결정에 대한 놀라움 표현
     * 학계의 비밀스러운 관행 언급
          + 경제학 부서가 기부자의 영향력 하에 있는 것은 공공연한 비밀
     * 데이터 조작 연구자에 대한 비판
          + 잘못을 인정하고 바로잡는 것이 해결책임을 강조
          + 비난과 변명은 도움이 되지 않음을 지적
"
"https://news.hada.io/topic?id=12191","제3자 정비소에서 수리 시 폴란드 열차 잠금 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      제3자 정비소에서 수리 시 폴란드 열차 잠금 현상

요약: 해커스페이스.pl과 연구 발표

     * 해커스페이스.pl은 Mastodon을 기반으로 한 분산 소셜 네트워크의 일부임.
     * 워쇼 해커스페이스 회원들을 위한 서버로, q3k@q3k에 의해 관리됨.
     * 서버 통계: 22명의 활성 사용자.

연구 내용 요약

     * 연구자들은 NEWAG Impuls EMUs의 PLC 코드를 역공학으로 분석함.
     * 이 열차들은 제3자 작업장에서 서비스를 받은 후 임의의 이유로 작동이 중단됨.
     * 제조사는 이러한 문제가 작업장의 부적절한 처리 때문이라고 주장하며, 자사에서 서비스를 받아야 한다고 주장함.

발견된 문제점

     * PLC 코드에는 특정 날짜 이후나 일정 시간 동안 운행하지 않을 경우 열차를 잠그는 로직이 포함되어 있음.
     * 일부 버전의 컨트롤러에는 제3자 작업장에만 행동을 제한하는 GPS 좌표가 포함되어 있음.
     * 열차는 객실 제어판의 특정 키 조합을 눌러 잠금을 해제할 수 있었으나, 이는 문서화되어 있지 않았음.

소프트웨어 업데이트와 추가 문제

     * 새로운 PLC 소프트웨어 버전에서는 키 해제 기능이 삭제되었지만, 잠금 로직은 남아 있음.
     * NEWAG의 특정 업데이트 이후, HMI는 잠금이 발동되어야 할 조건의 부분 집합을 감지하고 열차가 여전히 작동 중일 때 저작권 위반에 대한 무서운 메시지를 표시함.
     * 열차에는 GSM 텔레메트리 장치가 탑재되어 있어 잠금 조건을 방송하고, 경우에 따라 원격으로 열차를 잠글 수 있는 것으로 보임.

공개 토론 및 반응

     * 연구자들은 이 내용에 대해 OhMyHack에서 비공개 토론을 진행함.
     * 폴란드어 소스를 통해 이 이야기가 퍼지고 있으며, 37C3에서 이에 대해 자세히 다루고 발견 사항을 공개할 예정임.
     * 사람들은 이 문제에 대해 다양한 반응을 보이며, 일부는 이러한 행위가 반경쟁적이고 불법적일 수 있다고 지적함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 연구자들이 NEWAG Impuls EMUs의 PLC 코드에 내재된 문제점을 발견하고 이를 공개적으로 논의할 예정이라는 점이다. 이는 소프트웨어와 하드웨어의 상호작용, 그리고 기술이 어떻게 사용자의 권리와 경쟁을 제한할 수 있는지에 대한 흥미로운 사례를 제공한다. 이러한 연구는 기술의 윤리적 사용과 소비자 보호에 대한 중요한 논의를 촉발할 수 있으며, 이는 모든 이해관계자에게 매우 중요한 주제이다.

        Hacker News 의견

     * 폴란드의 지역 열차 회사들이 사용하는 열차에 대한 유지보수는 P1부터 P5까지 5단계로 나뉘며, 몇 년 전부터 유럽연합 철도청의 시장 개방 덕분에 작은 회사들도 P3 이상의 유지보수 입찰에서 승리하게 됨.
     * SPS Mieczkowski가 서비스한 4대의 열차가 작동하지 않아 회사는 벌금 50만 유로를 지불하고 열차는 Newag으로 반환됨. 동시에 다른 회사의 열차들도 서비스를 받지 않고 한 장소에 오래 머물면서 움직이지 않게 됨. 이로 인해 SPS Mieczkowski는 Dragon Sector를 고용하여 조사를 실시하고 열차를 멈추게 하는 여러 별개의 루틴을 발견함.
     * 이 사건은 폴란드 중앙반부패국에서 조사 중이지만, Newag에 큰 타격을 줄 것 같지 않음. 폴란드 철도운송청은 작은 스케줄 오류에 대해 불만과 명령으로 철도 회사를 괴롭혔지만 이 사건에는 개입하지 않음.
     * 폴란드는 16개의 주로 나뉘어 있으며, 2000년대 초반의 개혁 이후 거의 각 주마다 자체 지역 철도 회사가 있음. Newag 열차에 대한 여러 결함이 발생한 후, 서비스 회사가 해커들을 고용하여 역공학을 통해 문제를 파악하는 데 시간이 걸림.
     * 이 사건은 과거 마이크로소프트가 DR-DOS를 경쟁에서 배제하기 위해 사용한 AARD ""크래시""를 떠올리게 함. AARD 코드는 Windows 3.1 베타 버전에 포함된 코드로, Windows가 MS-DOS나 PC DOS가 아닌 DR-DOS와 같은 경쟁 제품에서 실행되는지 확인하고 후자의 경우 암호화된 오류 메시지를 표시함.
     * Newag의 주가가 이 게시물 이후에 상당히 하락함. 이것이 Mastodon에 의해 유발된 첫 번째 가격 조정인지 궁금함.
     * 2022년 11월 21일에 서비스 중이지 않았음에도 불구하고 작동을 거부한 열차가 있었음. 컴퓨터는 압축기 오류를 보고했지만, 기계공은 압축기에 아무런 문제가 없다고 판단함. 컴퓨터 코드 분석 결과, 특정 날짜가 되면 압축기 오류를 보고하도록 하는 조건이 있었음.
     * Newag 열차는 Pesa(다른 폴란드 제조업체)보다 품질이 높지만, 인위적인 결함을 생성해야 할 정도로 신뢰성이 높다는 의견이 있음.
     * 제조업체들이 중요한 인프라를 마비시키며 폴란드를 인질로 잡은 것이 아닌가 하는 의문이 제기됨. 이는 대담한 범죄이며, 그들이 벗어날 수 있을지 확신할 수 없음.
     * 악성 코드 조항을 작성한 사람과 이를 알고 있던 사람에 대한 의문이 있으며, 내부 고발자가 없었던 이유가 궁금함. 회사에 대한 익명의 (검증되지 않은) 직원들의 의견이 있는 페이지가 있음.
     * 해커뉴스를 열고 자주 타던 열차에 관한 영화 같은 이야기를 읽는 것은 세상이 얼마나 작은지를 보여줌. 코드 리뷰가 없었거나 리뷰어들이 어떤 이유로든 이를 수용했을 가능성이 있음.
     * 이 상황이 Newag와 유럽 철도 서비스 Akiem과의 계약에 미칠 영향이 흥미로움. Newag은 프랑스를 위한 서비스와 열차에 대해 1억 6천 4백만 유로의 계약을 체결함.
"
"https://news.hada.io/topic?id=12153","진짜 엔지니어가 아닌 'Not a real engineer' (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                진짜 엔지니어가 아닌 'Not a real engineer' (2019)

요약: 실제 엔지니어가 아님

     * 본문은 실제 엔지니어에 대한 정의를 상징적이고 은유적인 언어로 표현한 내용.
     * 엔지니어를 강력하고 신비로운 존재로 묘사하며, 동시에 기술적인 능력이 부족하다는 이유로 거절하는 내용 포함.
     * 글의 마지막 부분은 추가 읽을 거리를 제공하며, 특히 ""life is too short for jenkins""라는 다음 글에 대한 관심을 유도.

GN⁺의 의견

     * 이 글은 엔지니어의 역할과 기술적 능력에 대한 기존의 관념을 도전하는 창의적인 접근 방식을 보여줌.
     * 은유적인 서술 방식은 독자들에게 엔지니어링이 단순히 기술적 지식만이 아니라 더 넓은 의미를 가질 수 있음을 시사.
     * 글이 흥미로운 이유는 전통적인 기술 직업에 대한 인식을 재고하게 만드는 독특한 문체와 내용 때문임.
"
"https://news.hada.io/topic?id=12177","도그볼트 디컴파일러 익스플로러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            도그볼트 디컴파일러 익스플로러

Decompiler Explorer 소개

     * Decompiler Explorer는 방문자들에게 높은 트래픽으로 인해 서비스 이용에 불편을 겪을 수 있음을 알림.
     * ""Samples"" 섹션에서 이미 생성된 결과를 확인하거나, 대기 시간을 확인할 수 있는 큐를 확인할 것을 제안함.
     * 2MB 이하의 파일을 업로드할 수 있으며, 업로드된 바이너리는 보관됨.

샘플 파일

     * 다양한 샘플 파일을 제공하여, 사용자들이 Decompiler Explorer의 기능을 시험해 볼 수 있음.
     * 샘플에는 다양한 플랫폼과 언어로 작성된 바이너리 파일들이 포함됨.
     * 예를 들어, x86 Linux용 CTF 챌린지, Arm Linux용 Hello World, 여러 운영 체제에서의 Megatest Decompiler 테스트 바이너리 등이 있음.

지원되는 Decompilers

     * angr, BinaryNinja, Boomerang, dewolf, Ghidra, Hex-Rays, RecStudio, Reko, Relyze, RetDec, Snowman 등 다양한 디컴파일러를 지원함.
     * Decompiler Explorer는 오픈 소스로, GitHub에서 포크할 수 있음.

GN⁺의 의견

   Decompiler Explorer는 다양한 플랫폼과 언어로 작성된 바이너리 파일을 분석할 수 있는 유용한 오픈 소스 도구임. 이 서비스는 소프트웨어 엔지니어링 및 보안 연구 분야에서 매우 중요한 역할을 하며, 특히 역공학이나 보안 취약점 분석에 관심이 있는 초급 소프트웨어 엔지니어에게 흥미로운 리소스가 될 수 있음. 오픈 소스라는 점은 사용자들이 자유롭게 기여하고 개선할 수 있는 기회를 제공하며, 이는 커뮤니티의 협력을 촉진하고 지식의 공유를 가능하게 함.
"
"https://news.hada.io/topic?id=12163","ChatGPT 출시 1주년: OpenAI의 AI 챗봇이 기술계를 영원히 변화시킨 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ChatGPT 출시 1주년: OpenAI의 AI 챗봇이 기술계를 영원히 변화시킨 방법

인공지능의 미래

     * OpenAI가 기술 산업에 세대적 변화를 일으키려고 한 것은 아니었으나, ChatGPT 출시로 그러한 변화가 시작됨.
     * ChatGPT는 출시 이후 가장 빠르게 성장하는 소비자 기술로 자리 잡음.
     * ChatGPT는 기술 산업의 모든 영역에 변화를 가져왔으며, AI 관련 회사들은 투자를 유치하는 데 성공함.

AI의 영향력

     * AI는 기술 산업의 거대 기업들에 의해 채택되어 다양한 제품과 서비스에 통합됨.
     * Microsoft, Google, Amazon, Meta 등이 AI를 중심으로 한 새로운 기능과 서비스를 발표함.
     * ChatGPT는 단순한 채팅 인터페이스에 불과하지만, 신뢰성 문제에도 불구하고 높은 사용자 증가를 보임.

AI 기술의 현실

     * 현재 AI 기술은 여전히 불완전하며, 대부분의 AI 시스템은 인간보다 더 똑똑하거나 창의적이지 않음.
     * AI의 발전은 자율주행 자동차와 비슷한 경로를 따르고 있으며, 완벽해지기까지는 많은 노력이 필요함.
     * AI의 미래에 대한 예측은 불확실하며, 최근의 기술 트렌드가 항상 예상대로 진행되지는 않음.

AI 산업의 미래

     * AI 기술은 빠르게 발전하고 있으며, AI를 활용한 새로운 회사와 제품이 계속해서 등장할 것임.
     * AI가 인터넷, 소셜 미디어, 스마트폰처럼 우리의 삶을 근본적으로 재편할지 여부는 아직 미지수임.
     * 많은 전문가와 자본이 AI의 잠재력에 투자하고 있으며, 이는 AI가 단순한 시작 단계를 넘어설 것이라는 기대를 반영함.

GN⁺의 의견

     * 가장 중요한 것은 ChatGPT가 단순한 채팅 인터페이스를 넘어서 기술 산업 전반에 걸쳐 변화를 가져왔다는 점임.
     * 이 기사가 흥미로운 이유는 AI 기술이 어떻게 빠르게 발전하고 있으며, 이것이 우리의 일상과 산업에 어떤 영향을 미칠지에 대한 전망을 제공하기 때문임.
"
"https://news.hada.io/topic?id=12080","Carton - 다양한 언어에서 ML모델을 하나의 API로 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Carton - 다양한 언어에서 ML모델을 하나의 API로 실행하기

     * 모든 프레임워크를 위한 오픈소스 API
     * 모델을 메타데이터와 함께 하나의 Zip 파일로 압축한 뒤, 해당 파일을 로딩
     * 추론 코드는 프레임워크와 무관하게 동작 가능. Carton API를 호출하면 Carton이 프레임워크 내부를 호출
     * Rust 로 구현되고, 각 언어용 바인딩을 제공
     * x86_64 Linux 와 macOS, aarch64 Linux 와 macOS, WebAssembly 지원
     * 모델을 변환하는 ONNX와 달리 Carton 은 변환하지 않고 Wrapping 만 함
"
"https://news.hada.io/topic?id=12206","원자로 시뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               원자로 시뮬레이터

요약: 가상 원자로 시뮬레이션 게임 소개

     * 사용자는 닉네임을 입력하고 게임을 시작함.
     * 게임의 목표는 압력수형 원자로의 출력을 수요에 맞추는 것임.
     * 사용자는 냉각 펌프, 제어봉 위치, 증기 발생기를 조작하여 원자로를 제어함.

GN⁺의 의견

     * 이 게임은 원자로의 기본적인 작동 원리를 이해하는 데 도움이 될 수 있음.
     * 원자력 발전에 관심이 있는 초급 소프트웨어 엔지니어에게 흥미로운 학습 도구가 될 수 있음.
     * 실제 원자로 운영의 복잡성을 단순화하여 교육적인 방식으로 제공함으로써, 기술에 대한 이해를 증진시킬 수 있음.

        Hacker News 의견

     * 2012-2013년에 동료와 함께 Delphi/Pascal 프로그램을 WebGL로 포팅한 경험
          + 원래 프로그램은 OpenGL을 사용하여 만들어졌으며, WebGL은 당시 상대적으로 새로운 기술
          + 포팅의 주된 목적은 학교 행사 등에서 인터랙티브하게 실행할 수 있도록 하기 위함
          + 실제보다는 재미에 더 최적화된 시뮬레이션
          + 핵공학자들이 상업용 원자력 발전소의 수요가 그렇게 빠르게 변하지 않는다고 지적
     * 게임 아이디어: 플레이어가 엔진이나 시스템을 조립하고, 센서와 스위치를 사용하여 제어하는 게임
          + 시스템 조립은 퍼즐 같은 과제
          + 부품 고장 시 센서로 고장난 부분을 파악하고 스위치로 시스템을 수리하는 능력 필요
     * 전직 미 해군 잠수함 핵 반응기 운영자의 경험
          + 핵 반응기 시뮬레이션은 단순화되어 있지만 나쁘지 않음
          + 물이 핵 반응기를 자체 조절하는 흥미로운 측면을 숨김
          + 물의 부정적 온도 계수 반응성에 대한 설명
               o 우라늄-235 원자가 중성자를 흡수하고 분열하면서 더 많은 중성자 방출
               o 중성자가 물에서 느려지고 연료로 다시 튕겨져 들어가면서 추가 핵분열 반응 유발
               o 반응기가 임계 상태일 때 핵분열 반응이 자체 유지됨
               o 물의 밀도를 변화시켜 중성자가 연료로 돌아가는 것을 조절할 수 있음
               o 물의 온도를 조절하여 밀도를 변경
               o 증기 수요에 따라 물의 온도가 변화하고, 이는 핵분열 반응과 열을 조절하여 평형 상태 도달
     * 독일 학교에서 배운 경험
          + 모든 반응기 유형에 대해 배움
          + 건물의 모양으로 반응기 유형을 판단할 수 있음을 기억
     * 어린 시절 플레이한 첫 번째 시뮬레이션 게임인 'Three Mile Island'에 대한 추억
          + 게임 매뉴얼과 게임 링크 제공
     * ZX81 버전의 비슷한 시뮬레이션 게임 비디오 링크 공유
     * 어린 시절의 경험
          + 목표는 반응기를 폭발시키는 것
          + 안전 시스템이 재미를 방해함
     * 증기 발생기 레버로 무엇을 조절하는지에 대한 궁금증
          + 제어봉은 다이어그램에서 움직임이 보여 명확함
     * 다른 핵 발전소 시뮬레이터 'Nucleares'에 대한 링크 공유
          + 친구와 함께 플레이할 예정
     * 클래식 NPP 시뮬레이터 'SIMULA-C'에 대한 추억
          + 소스 코드와 MS-DOS 실행 파일이 공개되었었음
          + 시뮬레이터에 대한 스크린샷이 포함된 보고서 링크 공유
"
"https://news.hada.io/topic?id=12173","장고(Django) 5.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           장고(Django) 5.0 출시

     * 새로운 기능
          + 데이터베이스에서 계산된 기본값을 모델 필드에 정의 가능
          + Django ORM 확장을 계속하여 데이터베이스 생성 컬럼을 만들 수 있는 생성된 모델 필드를 추가
          + 템플릿 시스템에 폼 필드 렌더링을 단순화하는 필드 그룹 개념을 도입
     * Django 5.0은 다운로드 페이지나 Python Package Index를 통해 받을 수 있음

Django 4.2 및 4.1 지원 종료 안내

     * Django 4.2는 주요 지원이 종료되었으며, 마지막 소규모 버그 수정 릴리스인 4.2.8이 발표됨.
     * Django 4.2는 LTS(장기 지원) 릴리스로, 2026년 4월까지 보안 및 데이터 손실 수정을 받을 수 있음.
     * Django 4.1은 확장 지원이 종료되었으며, 마지막 보안 릴리스인 4.1.13이 11월 1일에 발표됨.
     * 모든 Django 4.1 사용자는 보안 문제에 대한 수정을 계속 받기 위해 Django 4.2 이상으로 업그레이드할 것을 권장함.

추가 정보 및 이벤트

     * Mikhail Podgurskiy가 Django 개발을 지원하기 위해 Django Software Foundation에 기부함.
     * DjangoCon Europe 2024가 2024년 6월 5일 스페인 비고에서 개최될 예정임.

GN⁺의 의견

   이 기사에서 가장 중요한 내용은 Django 5.0의 출시와 함께 Django 4.2 및 4.1의 지원 종료 소식임. 이는 웹 개발자들과 Django 커뮤니티에게 흥미로운 소식이며, 새로운 기능과 업데이트를 통해 개발 프로세스가 더욱 효율적이고 현대적으로 변화할 것으로 기대됨. Django 5.0의 새로운 기능들은 개발자들이 더 나은 웹 애플리케이션을 만드는 데 도움을 줄 것이며, 이는 기술 커뮤니티에 긍정적인 영향을 미칠 것임.

   django붐은 온다...

     데이터베이스에서 계산된 기본값을 모델 필드에 정의 가능

   이거 때문에 골치 아팠는데 좋네요

        Hacker News 의견

     * Django 프로그래밍에 대한 사랑을 13년 전에 느끼게 해준 프레임워크로, 항상 마음속에 특별한 자리를 차지함.
          + Django와 Django REST Framework로 구축한 프로젝트는 6년 후에도 최소한의 변경으로 잘 작동함.
          + 반면, Ember로 만든 클라이언트 부분은 시간 속에 사라짐.
          + 클라이언트 재작성 시 htmx를 사용하여 서버 사이드에서 Django 템플릿을 렌더링하고 간단한 JS 스크립트를 포함시킬 계획임.
          + Elixir/Phoenix/LiveView를 사용해본 경험은 혁신적이지만, Django가 제공하는 인증 시스템과 관리 인터페이스의 편리함을 선호함.
     * Django 백엔드와 Vue 프론트엔드를 사용하는 앱 개발자로서, Django의 ORM, 라우팅, 미들웨어 시스템 및 관리 인터페이스의 가치를 높이 평가함.
          + DRF에서 Django-Ninja로의 이전은 생산성과 성능 면에서 큰 개선을 이룸.
          + Django 5.0의 새로운 기능 중 GeneratedField가 특히 좋은 추가로 보임.
     * Django 5.0의 새로운 기능과 관련된 커뮤니티 리소스를 소개하는 링크 제공.
     * Django를 매우 좋아하며, 현재도 일상 업무에서 사용하고 있음.
          + Django와 Rails는 웹 개발 세계에서 신뢰성 있는 'Toyota Corollas'와 'Honda Civics'와 같은 존재임.
     * 현재는 업무에서 Django를 사용하지 않지만, 여전히 마음속에 특별한 자리를 차지함.
          + Django의 ORM 모델을 최고로 평가하며, 다른 ORM은 사용하기 어렵게 느껴짐.
          + Django 커뮤니티 내에서 호환성을 더 자주 깨는 변화가 있는지 궁금함.
     * 빠르게 성장하는 스타트업에서 Django를 강력하게 추천하여, Django를 사용하는 팀이 더 생산적임을 경험함.
          + 사용자, 역할, 권한이 필요한 제품에는 Django를 선택함.
     * Django는 5년 이상 지원되는 프로젝트에 대한 높은 표준을 유지함.
          + 클라이언트 측 작업이 필요한 경우나 프로덕션으로 이동하는 것은 여전히 어려움이 있음.
     * Django 5.0 출시를 축하하며, Django/Docker 스타터 앱을 Django 5.0을 사용하도록 업데이트한 링크 공유.
     * 10년 이상 웹 프로젝트의 주요 선택으로 Django를 사용해옴.
          + Django는 내장 기능이 많아 제품 출시에 필요함.
          + Django 커뮤니티는 DRF, Django Channels, social-auth 등의 강력한 생태계 프로젝트를 가지고 있음.
     * Django를 사용하는 방식에 대한 개인적인 평가로, 웹 개발에 대한 충분한 추상화를 제공하며, 오랜 시간이 지나도 이해하기 쉬움.
"
"https://news.hada.io/topic?id=12213","SQLite, JSONB 지원 기능 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         SQLite, JSONB 지원 기능 도입

     * SQLite의 기존 JSON 함수를 재작성. 사용패턴에 따라 몇배까지 더 빠르게 실행됨
     * 원래 JSON 함수는 3단계로 동작
         1. JSON을 C코드가 쉽게 처리가능한 내부용 바이너리 포맷으로 파싱
         2. 요청한 작업 수행. 특정 필드를 찾거나 JSON을 수정하거나 하는 등
         3. 작업이 JSON을 변경했다면, 내부 바이너리 포맷을 RFC-8279 JSON 문자열로 바꿔서 출력 또는 저장
     * 2단계 말고 1과 3은 오버헤드임
     * SQLite는 많은 포인터를 포함하는 내부 바이너리 형태의 JSON을 사용했음. C 프로그램에 잘 맞지만 시리얼라이즈가 어려움
     * JSONB 재작성을 통해서 이 JSON의 내부 바이너리 표현을 SQL BLOB으로 읽거나 쓸 수 있는 연속된 바이트 배열로 변경
     * 이렇게 하면 내부에서 사용하는 JSON의 표현을 JSON 텍스트 대신 데이터베이스에 저장할 수 있으므로 1단계와 3단계의 오버헤드를 제거할 수 있음

변경된 것

     * 모든 기존 기능은 그대로 유지. 새로운 기능만 추가
     * 이제 JSON 텍스트를 입력으로 받아들이는 모든 JSON 함수는 동일한 매개변수에 대해 JSONB 바이너리 콘텐츠도 받아들임
          + 함수가 텍스트를 가져올지 바이너리 데이터를 가져올지 알려줄 필요가 없음. 함수가 스스로 알아서 판단
     * 이제 JSON을 출력하는 JSON 함수는 두 가지 버전으로 제공
          + 기존의 ""json_"" 함수는 이전과 동일하게 작동
          + 텍스트 JSON이 아닌 JSONB를 반환하는 ""jsonb_"" 함수가 있어 일반 처리에서 3단계가 생략됨
     * 애플리케이션을 변경하지 않으면 속도가 약간(1%) 빨라지기는 하지만 모든 것이 기존과 동일하게 계속 작동
     * 그러나 애플리케이션을 수정하여 텍스트 JSON 대신 JSONB를 저장하기 시작하면 적어도 JSON 집약적인 작업의 경우 3배의 성능 향상을 볼 수 있음
     * 또한 JSONB는 대부분의 경우 텍스트 JSON보다 약간 더 작기 때문에(약 5% 또는 10% 더 작음) JSON을 많이 사용하는 경우 데이터베이스 크기가 약간 줄어드는 것을 볼 수도 있음

        Hacker News 의견

     * JSONB에 대한 혼란이 많음
          + JSONB는 JSON 데이터 타입과 매우 유사하게 애플리케이션에 사용됨.
          + 애플리케이션은 여전히 JSON 문자열을 읽고 쓰지만, 실제 JSONB 내용은 보지 못함.
          + 동일한 SQL 함수들이 jsonb_ 접두사를 가지고 사용 가능함.
          + JSON 데이터 타입은 디스크에 JSON으로 저장되지만, JSONB는 특별한 바이너리 형식으로 저장됨.
          + JSON 데이터 타입은 작업을 수행하기 위해 전체 JSON을 파싱해야 하지만, JSONB는 파싱 단계를 건너뛰고 디스크 형식에 직접 작업을 수행할 수 있음.
          + 단순히 SQLite에서 전체 JSON 블롭을 읽고 쓰는 경우 JSON 데이터 타입이 적합하지만, SQL을 사용하여 데이터를 쿼리하거나 조작하는 경우 JSONB가 더 적합함.
     * JSONB는 Postgres에서 제공하는 포맷으로, 일반 JSON에 비해 읽기 성능이 향상되어 권장됨.
          + PostgreSQL JSON 데이터 타입 문서
     * 문서 저장소의 목적을 이해하는 데 몇 년이 걸렸으며, POC(Proof of Concept) 구축에 탁월함.
          + JSON 지원 강화는 SQLite를 적합한 문서 저장소로 만드는 데 도움이 될 것임.
          + Protobuf 메시지를 직렬화 및 역직렬화하여 전체 타입 지원을 받고, 이 컬럼을 JSONB로 만들지 않으면 검색 가능한 데이터를 다른 컬럼으로 펼칠 필요 없이 이 컬럼을 필터링할 수 있음.
     * SQLite의 릴리스 프로세스에 대한 궁금증.
          + 최신 릴리스는 3.44이며, JSONB는 사전 릴리스 스냅샷에 포함됨.
          + Cloudflare의 D1과 Fly.io에서 이 기능을 사용하고 싶지만, SQLite 버전이 공개되지 않았거나 맞춤화되었을 수 있음.
          + API 변경 사항이 SQLite 호환 덤프/쿼리 파일을 가져올 수 있다는 Cloudflare의 약속을 깨뜨릴 수 있음.
     * JSONB를 사전 릴리스 스냅샷이나 플레이그라운드에서 시도할 수 있음.
          + SQLite 다운로드 페이지
          + SQLite 플레이그라운드
     * JSONB 사양의 핵심 아이디어는 각 요소가 크기와 타입을 포함하는 헤더로 시작한다는 것임.
          + JSON 사양에 크기 표시를 추가하는 것이 JSON 처리에 필요한 메모리를 줄일 수 있음을 제안함.
     * MongoDB의 BSON에 익숙하지만 JSONB는 아님.
          + JSONB와 BSON의 차이점에 대해 설명하는 블로그 글을 참조함.
     * JSONB는 성능에 영향을 미침.
          + 많은 사람들이 Postgres에서 JSONB를 알고 있을 것임.
          + PGConf NYC 2021에서 Oleg Bartunov가 발표한 'Jsonb 성능 이해' 강연을 보는 것을 권장함.
          + Jsonb 성능 이해 강연 영상
     * 여러 행에 걸쳐 JSON 데이터를 압축하는 방법이 있었으면 함.
          + 매우 유사한 블롭이 각 행에 있으며, 많은 유사한 블롭을 여러 행에 걸쳐 저장 공간을 줄이는 방법이 필요함.
     * 내부 형식에도 불구하고 애플리케이션에서 즉시 사용 가능함.
          + 예를 들어 Python에서의 일괄 삽입에 있어서 행 당 삽입 호출에는 눈에 띄는 오버헤드가 있음.
          + JSONB는 CTE(Common Table Expressions)를 사용하여 성능을 개선할 수 있음.
          + json_each는 애플리케이션에서 JSONB BLOB으로 바인딩된 매개변수를 받아들일 수 있음.
"
"https://news.hada.io/topic?id=12166","전화 스팸 신고 - 로보콜러와 문자 스패머 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       전화 스팸 신고 - 로보콜러와 문자 스패머 차단

스팸 전화나 문자 메시지를 받았나요? 스팸 발송자 차단에 도움을 주세요.

     * 대부분의 통신사는 스팸 메시지를 원치 않으며, 이를 차단하기 위해 사용자의 신고가 필요함.
     * 스팸 발송자의 전화번호를 신고하여 해당 통신사가 서비스를 중단시킬 수 있도록 하는 방법 소개.

스팸 신고 방법

     * 스팸 발송자의 실제 전화번호 확인
     * 해당 번호를 관리하는 통신사 찾기
     * 해당 통신사에 스팸 신고하기

스팸 발송자의 실제 전화번호 확인

     * 전화 통화(로보콜, 음성 메일)의 경우, 표시되는 번호가 아닌 연락을 지시하는 번호를 신고.
     * 문자 메시지(SMS, iMessage)의 경우, 메시지가 발송된 번호를 신고.

해당 번호를 관리하는 통신사 찾기

     * 무료 웹사이트(realphonevalidation.com, freecarrierlookup.com) 또는 Twilio, Plivo의 API를 사용하여 통신사 조회.

해당 통신사에 스팸 신고하기

     * 웹사이트나 API 응답을 통해 통신사 이름 확인 후 연락처로 스팸 신고.
     * 여러 회사가 언급된 경우 첫 번째 회사에 연락.
     * 신고 시 전문적이고 존중하는 태도 유지.

자주 묻는 질문들

     * 이 방법은 통신사가 스팸 발송자의 서비스를 중단시키도록 도움을 줌.
     * ""스팸 신고"" 버튼이나 앱을 사용하는 것과는 다르며, 실제 스팸 발송자의 서비스를 중단시킬 수 있는 통신사에 신고하는 것임.
     * 정치적 또는 비영리 단체의 대량 메시지도 신고 대상임.

GN⁺의 의견

   이 글에서 가장 중요한 것은 스팸 발송자의 서비스를 중단시킬 수 있는 구체적인 신고 방법을 제공한다는 점이다. 이러한 정보는 스팸 메시지로 인해 불편을 겪는 사람들에게 매우 유익하며, 스팸 문제에 적극적으로 대처할 수 있는 방법을 알려주어 흥미롭다.

        Hacker News 의견

     * 스팸 전화 및 문자 신고
          + 한 사용자가 몇 년 동안 FCC에 스팸 전화와 문자를 신고했지만, 그 효과에 대해 확신할 수 없음. 공식적인 경로를 통한 신고가 실패하는 것 같고, 스팸 전화와 문자, 가짜 정부 웹사이트 문제가 지속됨.
     * 전화 시스템의 문제
          + 현재 전화 시스템이 심각하게 불완전하고 위험하다고 느끼는 사용자가 있음. 웹이 HTTPS 없이는 민감한 업무를 처리하는 것이 불법일 것이라는 비유를 통해 전화 시스템의 보안 문제를 지적함.
     * 고객 지원의 어려움
          + 한 사용자는 자신의 통신사 고객 지원에 연결하는 데 45분이 걸린다고 언급하며, 스팸 신고를 위해 지원 핫라인에 인간이 응답하는 것이 어렵고 비효율적이라고 비판함. 통신사가 스팸 신고 버튼을 통해 자동으로 원래 통신사와 소통할 수 있는 시스템을 갖추어야 한다고 제안함.
     * 스팸 전화의 무력감
          + 사용자가 자신의 통신사인 Verizon으로부터 스팸 전화를 받았고, 이를 신고했을 때 통신사는 이런 일이 자주 발생한다고 답변함. 이로 인해 스팸 전화를 막을 수 없다고 느낌.
     * 스팸 전화와의 싸움
          + 스팸 전화를 받을 때 가능한 오래 전화를 끌어 스팸 전화를 하는 쪽에 손해를 입히려는 전략을 사용하는 사용자가 있음.
     * 스팸의 확산
          + 스팸이 이제 WhatsApp과 Telegram까지 확산되었으며, 미국에서는 여전히 문자 메시지를 사용하기 때문에 완전히 비활성화할 수 없다는 사용자의 경험.
     * 전화 사용의 변화
          + 전화 기능이 구식 기술처럼 느껴지고, 중요한 경우가 아니면 사용하지 않는다는 사용자의 의견. 중요한 연락은 음성 메일을 통해 이루어지며, 모던 앱이 통신의 주요 수단이 됨.
     * 스팸 전화 대응 전략
          + 스팸 전화에 대응하여 실제 번호를 얻으려는 시도가 있음. 통신사가 실제 전화 발신지를 알려주지 않기 때문에 필요한 조치로 보임.
     * 통신 비용과 스팸
          + 통화가 사실상 무료인 현 상황에서, 통화를 할 때 소액의 돈을 에스크로에 넣고, 통화를 받은 사람이 불쾌하다고 느낄 경우 키패드 명령을 통해 그 돈을 청구할 수 있는 시스템을 제안하는 의견.
     * 개인적 해결책
          + 2002년부터 전화를 받지 않는 것으로 스팸 문제를 해결하고 있다는 사용자의 경험.
"
"https://news.hada.io/topic?id=12127","DALL·E Party·E Party

     * DALL·E 와 GTP-4 Vision을 이용한 ""Translation Party""
          + 번역파티 : 구글 자동번역을 이용하여 하나의 문장을 지속적으로 교환 번역하면서 새로운 결과물을 만들어가는 놀이
     * 간단한 프롬프트를 넣어서 DALL·E 가 이미지를 만들면, GTP-4 Vision 으로 해당 이미지를 인식해서 프롬프트를 도출
     * 그 프롬프트를 다시 DALL·E에 넣는 식으로 순환하며 최대 몇번 할번지 지정 가능
     * 자신의 OpenAI 키를 입력해서 실행해야 함
"
"https://news.hada.io/topic?id=12125","Deno Cron 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Deno Cron 발표

     * 예약된 작업을 쉽게 생성 가능

Deno.cron(""샘플 크론 잡"", ""*/10 * * * *"", () => {
  console.log(""10분 마다 실행"");
});

     * UNIX/Linux 크론과 달리 Deno Cron 실행은 겹치지 않음
          + 10분마다 실행하게 예약했지만, 작업 완료에 30분 걸리는 경우 작업 완료 시점까지 예약된 실행을 건너뜀
     * 자바스크립트 친화적인 API를 추가할 것(JSON 형태로 실행 정보 구성)
     * Deno.Deploy 에서는 자동으로 인식되고 관리되므로 신경쓸 필요 없음
"
"https://news.hada.io/topic?id=12143","데이터 과학자의 시간 관리 방법(Rize 앱)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       데이터 과학자의 시간 관리 방법(Rize 앱)

     * 시간 관리를 하기 위해 여러가지 시도를 진행
          + 피터 드러커 : 측정할 수 없다면 관리할 수 없고, 관리할 수 없으면 개선시킬 수도 없다
     * 스프레드시트에 30분 단위로 집중력 측정 -> 회고를 통해 Action Item
          + 위 방법이 바로 실행할 수 있다는 관점에서 좋지만, 기록하는 일이 번거로울 수 있음
     * 기록을 자동화하기 위한 Time Tracking SaaS를 찾아보았고, Rize라는 제품이 잘 맞아서 사용하고 있음
          + 자동으로 활성화된 앱/웹을 수집해 카테고리를 분류해줌
          + Session에서 하는 행동은 Focus, Meeting, Break 3가지의 타입이 존재
          + 구글 캘린더를 연동해 특정 단어가 들어가면 자동으로 Focus, Meeting 등을 분류
          + 방해 되는 서비스를 사용하면 Alert
          + 뽀모도로 같이 타이머를 활용할 수 있으며, 이 때 음악을 재생할 수도 있음
          + Daily, Weekly Report를 보내주는데 이 내용을 통해 별도의 데이터 분석을 하지 않아도 어떤 상황인지 확인할 수 있음
     * 시간 데이터를 확보한 후, 시간 관리 원칙을 하나씩 세우고 있음

   Rize라는 제품이 있군요, 프로그래밍 관련해서는 https://wakatime.com 서비스 추천합니다.
   대부분의 IDE에 플러그인을 지원하고 트레킹 하는데요, 프로그래밍 언어나 특정 프로젝트 등 여러가지 필터링을 지원하고 로우데이터 export도 지원하는 듯 해서 3~4년째 잘 사용중입니다. 단점은 무료 서비스는 특정 기간만 데이터 저장이 보장되는것인데요, 아무생각없이 유로로 사용하다가 댓글달기 전 방금 찾아보았는데 https://github.com/muety/wakapi 라는 self-hosted WakaTime-compatible 서비스도 있네요 갈아탈만한지 고민해봐야겠습니다.

   오 언어나 프로젝트 관점으로 파악하려면 이 서비스 사용하면 되겠네요! 감사합니다!!
   전체 패턴은 Rize로, IDE의 패턴은 이 제품으로 해보면 하이브리드로 알 수도 있겠어요
"
"https://news.hada.io/topic?id=12145","Ask GN: 이달의 구인 - 멤버를 찾고 계신가요 ? (2023년 12월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 이달의 구인 - 멤버를 찾고 계신가요 ? (2023년 12월)

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)

   이 글은 매월 첫번째 월요일에 등록됩니다.
   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   [레몬베이스 - 회사와 구성원의 건강한 성장을 기술로 실현하는 SaaS 스타트업]

   사람은 깨어 있는 시간의 70%를 일터에서 보냅니다. 그 시간이 돈을 벌기 위한 수동적인 시간이 아니라, '나와 조직의 성장과 성공을 위해 주도적으로 활용하는 시간'이 될 수 있도록 레몬베이스는 성장하고 성과를 내는 방식을 기술을 통해 혁신하고 있습니다.

   레몬베이스 팀은 이 문제를 지속적인 성과관리(Continuous Performance Management)로 해결할 수 있다고 믿습니다. 레몬베이스를 통해 일 년에 한두 번이 아니라 일 년 내내 목표를 스스로 설정하고, 그 과정을 실시간으로 공유하고, 또 1:1 미팅을 통해 코칭을 주고받으며, 더 자주 동료들로부터 칭찬과 피드백을 받을 수 있습니다.

   2023년, 70억원 규모의 시리즈A 투자를 유치해 누적 투자액이 140억원으로 늘어난 레몬베이스는 빠르게 성장하는 테크 기업부터 다양한 산업의 엔터프라이즈 기업까지, 시대를 선도하는 수많은 기업과 함께 성과관리를 혁신하고 있습니다.

   ""회사와 구성원의 건강한 성장""이라는 미션을 가진 레몬베이스와 함께 성장할 미래의 크루를 찾고 있습니다. 레몬베이스 팀의 여정에 동참해 주실 분들을 기다립니다 :)

   *팀 소개 / 채용페이지 : https://www.lemonbase.team/
   *엔지니어링 그룹 페이지 : https://www.lemonbase.team/group_engineering

   ✔️ Frontend Engineer : https://www.lemonbase.team/recruit/fe
   ✔️ Frontend Engineer (산업기능요원) : https://www.lemonbase.team/recruit/fe_sip
   ✔️ Data Engineer : https://www.lemonbase.team/recruit/de

   *서울 성동구, 자율적인 리모트 워킹 가능
"
"https://news.hada.io/topic?id=12096","2024년을 위한 API 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2024년을 위한 API 트렌드

     * 디지털 트랜스포메이션, 앱, 데이터의 증가로 인해 효과적인 API 관리 전략의 중요성이 커짐

트렌드 1 - 여러 Source의 API

     * 기업들은 써드파티 API 및 오픈 API에 점점 더 의존하고 있음
     * 내부 및 외부 API를 모두 관리할 수 있는 능력을 포함한 API 전략과 기술이 필요

트렌드 2 - 다양한 API 표준 및 형식

     * RESTful API가 여전히 인기 있는 아키텍처 스타일이지만, AsyncAPI(이벤트 드리븐 아키텍처용)와 GraphQL 같은 새로운 형식이 다른 규칙과 구조를 가지고 있음
     * 모든 API 사양을 관리할 수 있는 견고한 API 관리 솔루션이 필요

트렌드 3 - API 기술의 언번들링

     * 많은 조직들이 API 생명주기 전체를 관리하는 플랫폼을 사용하지만, 일부 기능만 제공하는 벤더들도 존재함
     * API 생명주기의 특정 단계에 특화된 다른 벤더를 추가할 수 있음
     * 주로 언번들링하는 API 기술: 개발자 포털 및 API 게이트웨이

트렌드 4 - API 기술 확산

     * API 관리 기술의 언번들링으로 발생하는 부정적인 결과가 API Technology Sprawl
     * 여러 벤더로부터 오는 API 기술을 사용함으로써 중앙 집중식 거버넌스 부족, API 생태계 전반에 걸친 가시성 저하, 보안 취약점이 발생할 수 있음

트렌드 5 - API 게이트웨이의 진화

     * 멀티클라우드 환경과 마이크로서비스를 채택함에 따라 API 게이트웨이의 필요성과 역할, 전체 아키텍처가 변화함
     * 많은 조직들이 아키텍처 내부에 경량 게이트웨이를 추가하고 있음
          + 경량 게이트웨이는 작고 배포가 쉬우며 기능이 잘 정의되어 있음
          + 특정한 문제를 풀기 위해 상품화되고 있음

트렌드 6 - 고급 API 보안

     * 오늘날의 위협뿐만 아니라 새로운 위협에 대응할 수 있는 API 보안 전략이 필요
     * 하지만 API에 대한 공격이 더욱 지능화되고 보안을 유지해야 하는 API의 수가 폭발적으로 증가함에 따라 API 보안은 아주 어려운(Superhuman) 문제가 되어가고 있음
     * 고급 API 보안은 자동화, 인공지능, 머신러닝을 사용하여 API를 효과적으로 보호
          + 잠재적으로 안전하지 않은 API를 식별하고, API의 잘못된 구성과 취약성을 평가하며, 비정상적인 API 트래픽을 실시간으로 탐지하여 악성 트래픽을 차단하는 기능이 포함

   ChatGPT에게 용어 두개를 설명 부탁했습니다.

   ""API 기술의 언번들링""과 ""API Technology Sprawl""은 API 기술과 관련된 두 가지 개념을 나타냅니다.
    1. API 기술의 언번들링(Unbundling of API Technology): 이 용어는 API 기술이 서로 긴밀히 통합된 하나의 큰 시스템에서 여러 개별적인 구성 요소로 분리되는 과정을 말합니다. 예를 들어, 대규모 모놀리식(monolithic) 시스템에서 작은 마이크로서비스로 나누어져 각각의 기능이 개별적인 API로 제공되는 것을 의미할 수 있습니다.
    2. API Technology Sprawl: 이는 기업이나 조직 내에서 API의 수와 복잡성이 무질서하게 확장되는 현상을 말합니다. 이것은 종종 관리가 힘든 수많은 API가 생기고, 이로 인해 효율성이 떨어지고 보안 문제가 생기는 결과를 초래할 수 있습니다.

   간단히 말해, ""언번들링""은 API를 분해하여 더 관리하기 쉽고 유연한 구조로 만드는 과정을, ""Sprawl""은 API가 너무 많아져서 관리와 보안에 문제가 생기는 상황을 의미합니다.
"
"https://news.hada.io/topic?id=12200","Onsites - 빅테크 회사들의 인터뷰 경험 큐레이션 사이트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Onsites - 빅테크 회사들의 인터뷰 경험 큐레이션 사이트

     * 애플, 구글, 메타, 마이크로소프트, 아마존 등의 인터뷰 경험들을 모아서 정리한 사이트 (550+)
     * 다른 사람의 실제 면접 경험(라운드, 질문, 형식)을 검토하는 것은 면접을 위한 귀중한 학습자료가 될 수 있음
     * 소프트웨어 엔지니어, 머신러닝 엔지니어, 데이터 사이언티스트
          + 영업, 재무, 디자인쪽 도 곧 추가될 예정
     * Initial Screen / Phone Screen / Onsite 등
"
"https://news.hada.io/topic?id=12212","정부, 푸시 알림을 통해 애플과 구글 사용자 감시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      정부, 푸시 알림을 통해 애플과 구글 사용자 감시

        Hacker News 의견

     * Home Assistant Companion for iOS 팀은 iOS용 푸시 알림에 대해 종단 간 암호화를 구현하고자 했으나, Apple이 필요한 권한(com.apple.developer.usernotifications.filtering)을 여러 차례 거부함. 최근 뉴스를 통해 다시 신청할 수 있는지 궁금해함. 매월 iOS에서 약 3천5백만 건, Android에서 약 6천7백만 건의 푸시 알림을 보냄.
     * Ron Ryden은 오랫동안 데이터 프라이버시와 관련된 법안을 추진해왔으며, 위치 및 건강 데이터 판매 금지, 개인 정보 보호 강화 등을 포함한 다양한 법안을 소개함.
     * 한 기업이 정부로부터 정보 공유 금지 명령을 받았으며, 이제 해당 방법이 공개되어 투명성 보고를 업데이트할 예정임을 밝힘.
     * 스노든이 폭로한 사실에도 불구하고, 정부의 감시로부터 벗어나기 위해서는 사회에서 실질적으로 연결을 끊는 것이 불가능에 가까움. 대안이 무엇인지에 대한 논의 필요.
     * 푸시 알림 메타데이터가 실제 사용자와 연결될 수 있다는 주장에 대한 예시를 보고 싶어함. 특정 사용자를 추적할 수 있는 시나리오에 대한 우려 표현.
     * 메시 네트워크에 대한 관심이 다시 생김. 공공장소에서 익명성을 유지하며 기본 기능만을 가진 기기를 통해 메시지와 파일을 전송할 수 있는 네트워크에 대한 논의.
     * 푸시 알림은 앱 서버에서 개별 기기로 전송되며, 기기는 알림 수신을 위해 서버에 등록함. 등록 시 키 교환을 왜 하지 않는지, 앱이 웹보다 프라이버시 측면에서 뒤처져 있는 이유에 대한 질문.
     * 새로운 법안과 입법자가 필요하며, 가장 유망한 출발점은 주 수준에서 시작될 수 있음.
     * 미국 내에서는 정부보다 Apple과 Google이 사용자를 감시할 가능성에 대한 우려 표현. 법적 보호는 거의 없으며, 정부는 이들 기업으로부터 사용자 정보를 요구할 수 있음.
     * 푸시 메시지에 기본적으로 종단 간 암호화를 추가하는 것이 감시를 방지하는 데 도움이 될 수 있음. 개발 도구에 내장되어 있다면 사용하기 어렵지 않을 것임에도 불구하고, 개발자들은 이를 사용하지 않고 있음.
"
"https://news.hada.io/topic?id=12193","23andMe, 해커들이 690만 사용자의 조상 데이터를 도난당했음을 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               23andMe, 해커들이 690만 사용자의 조상 데이터를 도난당했음을 확인

23andMe 해킹 사건: 690만 명의 조상 데이터 도난 확인

     * 유전자 검사 회사 23andMe가 해커가 고객의 개인 데이터에 접근하여 약 1만 4천 명의 개인 정보와 다른 사용자들의 조상에 관한 프로필 정보가 포함된 상당 수의 파일에 접근했다고 발표함.
     * 해커는 23andMe의 DNA 친척 기능에 동의한 약 550만 명의 개인 정보에 접근했으며, 도난당한 데이터에는 이름, 출생 연도, 친척 관계 라벨, 친척과 공유하는 DNA 비율, 조상 보고서, 자가 보고 위치가 포함됨.
     * 또한 DNA 친척 기능에 동의한 약 140만 명의 사용자들도 가족 나무 프로필 정보가 접근당했으며, 이에는 표시 이름, 친척 관계 라벨, 출생 연도, 자가 보고 위치, 정보 공유 여부가 포함됨.

해커 포럼에서의 데이터 유출 광고

     * 10월 초, 한 해커가 유명한 해킹 포럼에 23andMe 사용자들의 DNA 정보를 도난했다고 주장하며 유대인 아슈케나즘 후손 100만 명과 중국인 사용자 10만 명의 데이터를 공개하고, 개별 계정 데이터에 대해 1달러에서 10달러를 요구함.
     * 이후 같은 해커가 같은 포럼에서 추가로 400만 명의 기록을 광고했으며, TechCrunch는 다른 해커가 이미 두 달 전에 별도의 해킹 포럼에서 도난당한 23andMe 고객 데이터를 광고한 것을 발견함.
     * TechCrunch가 분석한 몇 달 전 유출된 데이터는 취미로 유전학 정보를 온라인에 게시한 사람들의 기록과 일치하는 부분이 있어, 해커가 유출한 데이터가 적어도 부분적으로는 진짜 23andMe 고객 데이터임을 시사함.

비밀번호 재사용으로 인한 데이터 유출

     * 23andMe는 10월에 발표한 사건 공개에서 데이터 유출이 고객들이 비밀번호를 재사용함으로써 발생했다고 밝힘.
     * 해커들은 다른 회사들의 데이터 유출로 공개된 비밀번호를 사용하여 피해자들의 계정을 무차별 대입 공격으로 해킹할 수 있었음.
     * DNA 친척 기능이 사용자들을 그들의 친척과 매칭하는 방식 때문에, 한 개인의 계정을 해킹하면 계정 소유자뿐만 아니라 그들의 친척들의 개인 데이터도 볼 수 있어 피해자 수가 증가함.

GN⁺의 의견

   이 기사에서 가장 중요한 점은 유전자 검사 서비스인 23andMe가 대규모 데이터 유출 사건을 겪었다는 것이다. 이 사건은 약 690만 명의 사용자들의 조상 데이터가 해커에 의해 도난당했다는 사실을 드러냈으며, 이는 23andMe 고객의 절반에 가까운 수치이다. 데이터 유출은 비밀번호 재사용으로 인한 것으로, 이는 온라인 보안의 중요성을 다시 한번 상기시킨다. 이 기사가 흥미로운 이유는 개인의 유전 정보가 얼마나 민감한 데이터인지를 보여주고, 이러한 정보가 어떻게 잘못된 손에 넘어갈 수 있는지를 보여주기 때문이다. 이는 개인 정보 보호와 사이버 보안에 대한 대중의 인식을 높이는 계기가 될 수 있다.

        Hacker News 의견

     * 개인정보 보호에 대한 중요성
          + 친척이 23andMe와 같은 서비스를 이용해 유전체 데이터를 공유하는 것이 본인의 정보 노출에 영향을 미침을 지적함.
          + 행동 데이터 수집이 공통된 배경을 가진 다른 사람들에게도 영향을 줄 수 있음을 희망함.
     * 23andMe 이용약관 업데이트 문제
          + 추수감사절에 발표된 이용약관 업데이트가 집단 소송 금지, 법적 조치 전 60일간의 비공식 절차, 구속력 있는 중재를 요구함.
          + 고객이 사실상 법적 권리를 거의 가지지 못함을 23andMe 변호사들이 만든 것으로 보임.
     * 개인정보 보호의 미래에 대한 의문
          + 기계 학습 알고리즘이 걸음걸이만으로 사람을 식별하고, 키보드 소리만으로 텍스트를 해독할 수 있는 방향으로 발전함.
          + 공개 데이터와 발전된 알고리즘을 사용해 현재의 합리적인 개인정보 보호를 유지하기 어려움을 표현함.
     * 병원의 DNA 분석 프로그램 참여 요청 경험
          + 병원이 이전에 수집한 혈액 샘플을 사용해 DNA 분석을 하겠다고 제안함.
          + 미국의 개인정보 보호법이 사실상 존재하지 않음을 보여주는 사례로, 유럽에서는 동의 없이 샘플을 보관할 수 없음.
     * 23andMe 데이터 유출 의혹
          + 14,000개 계정이 한 번에 유출되었고, 해커들이 'DNA Relatives' 기능을 통해 6.9백만 명의 개인 정보에 접근함.
          + 각 계정이 평균 492명의 고유 친척 정보를 가지고 있었음을 의미함.
     * 23andMe 서비스 이용에 대한 개인적 회의
          + 해커가 아닌 정부가 그 정보를 어떻게 사용할지에 대한 우려로 인해 서비스 이용을 고려하지 않음.
     * 23andMe 관련 최근 뉴스 링크
          + 2023년 12월과 10월에 발생한 23andMe 관련 데이터 유출 및 해킹 사건에 대한 뉴스 링크 제공.
     * 자격 증명 스터핑(credential stuffing)에 대한 논의
          + 웹 애플리케이션 개발자들이 자격 증명 스터핑에 대한 보호 조치를 취해야 함을 강조함.
          + 트로이 헌트(Troy Hunt)의 해시된 비밀번호 데이터베이스를 사용하는 것이 좋은 방어책임을 언급함.
     * 데이터 수집 회사의 해킹 가능성
          + 데이터를 수집하는 모든 회사가 결국 해킹당할 것이라는 의견을 표현함.
     * 23andMe를 이용하지 않은 사람들의 집단 소송 가능성
          + 친척이 23andMe를 이용했을 경우에도 개인정보 보호에 대한 권리를 주장할 수 있는지에 대한 질문을 제기함.
"
"https://news.hada.io/topic?id=12169","드디어 rust에 specification이 추가됩니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     드디어 rust에 specification이 추가됩니다

   Rust 단체가 팀을 꾸려 모든 문법에 관한 specification을 만들고 있다 합니다. 다만 러스트의 발전 속도를 늦추지 않기 위해 specification 확정일자와 따로 간다고 하네요.
"
"https://news.hada.io/topic?id=12114","가짜 여성 발표자를 포함시키는 기술 컨퍼런스 운영사를 조심하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  가짜 여성 발표자를 포함시키는 기술 컨퍼런스 운영사를 조심하세요

     * 개발자 컨퍼런스인데 CFP가 없고 연사에게 직접 연락함
     * 기술업계에서 영향력 있는 유명 남성 연사들과 여성 연사 3명을 성공적으로 모심
     * 그런데 이중 2명의 여성 발표자는 가짜였음. 행사 오거나이저들이 가짜 프로필을 만들고 있는 것
     * 자신들의 행사에 유명인사를 원하고, 다양성 문제를 쉽게 해결할 수 있다고 생각했기 때문
     * 여성중 한명인 Anna Boyko는 이더리움 컨트리뷰터 이면서, Coinbase의 스탭 엔지니어라고 하는데, 코인베이스의 직원 누구도 그녀를 알지 못함. 존재하지 않는 사람임
     * 또 다른 한명인 Alina Prokhoda는 Microsoft MVP 이고, WhatsApp 의 시니어 엔지니어라고 하는데, 그런 사람은 역시 없고, 그 컨퍼런스의 다른 스피커들도 전혀 알지 못함
     * 이 컨퍼런스는 CFP(Call-For-Papers)가 없고, 자신들은 ""Hollywood Principle"" 을 따른다고 함 ""Don't call us, We'll call you""
     * 12월 7~8일 개최 예정인 DevTernity 표를 샀다면 저 Anna Boyko가 웹사이트에 있는 것을 알 수 있음(지금은 지워짐)
     * 내년 5월 개최예정인 JDKon 2024 표를 사려고 한다면 Alina Prokhoda 의 세션을 볼 수 있음(역시 지금은 지워짐)
     * 이 두개의 컨퍼런스의 운영사는 똑같이 dev.events 라는 곳임
     * 그들이 가짜 여성 프로필을 지우긴 했지만 아직 Internet Archive에는 캐시 버전이 남아 있음
     * 심지어 그들은 가짜 여성 프로필을 몇년간 이용해 왔음
          + Anna Boyle의 ""동료""인 Natalie Stadler 역시 Coinbase 출신이라고 하는데, 그런 사람은 없었음
          + 2021년에도 2022년에도 발표 했다고 나옴
     * 행사 주최자는 여성 연사를 섭외하기 위해 열심히 노력했지만 너무 힘들다고 응답했음
          + 이 유료(!) 컨퍼런스는 1인당 $870 의 가격인데도 불구하고
     * Anna 는 삭제 되었지만, 또 다른 가짜인 Julia Kirsina 는 그대로 있음
          + coding_unicorn 이라는 아이디로 인스타그램에 11.5만명의 팔로워를 가지고 있는 가짜 계정
          + 심지어 남의 콘텐츠를 가져다 쓰고 있으며, 인스타그램에는 랩탑/기술 책을 들었지만 야시시한 사진을 올리는 가짜 계정임
          + Xing(독일의 링크드인) 계정에 있는 Julia 의 프로필에는 Uber Estonia 에서 아키텍트 였다고 하는데, 우버는 에스토니아에 오피스가 없음
     * 주최자는 실수로 했다고 하지만 실제로는 다음과 같음
          + 2021 & 2022: 가짜 Natalie & Julia
          + 2023: 가짜 Anna, Alina & Julia
          + 모두 발표자로 등록되어있지만, 발표는 하지 않음. 이 폭로 쓰레드가 나오기 전까지는 삭제되지 않았음
     * 몇몇 연사는 이미 주최 측에 발표 불참을 통보하고 취소했음
          + 수년 동안 가짜 여성 연사들을 내세워 낚시를 한 전력이 있는 컨퍼런스를 지지하고 싶지 않다고 해서 그들을 탓할 수는 없음
          + 주최 측이 가짜 안나를 빠르게 삭제했지만 여전히 등록되어 있음
          + 컨퍼런스 페이지에 취소한 발표자들도 아직 나열되어 있고, 몇몇 발표자는 삭제를 요청함
     * 정직한 사람이라면 이런 컨퍼런스와 연관되기를 원하지 않을 것. 주최자가 3년 연속 가짜 연사를 만들어 놓고도 여전히 문제가 없다고 부인하는 컨퍼런스
     * Jetbrains는 더 이상 DevTernity 또는 JDKonf와 연관되기를 원하지 않으며, 후원을 중단하고 로고를 삭제함
     * Julia (@coding_unicorn) 계정 은 5년전에 만들어진 계정이고, 첫 팔로우가 Eduards Sizovs (DevTernity 창업자)임
          + 컨퍼런스를 홍보하기 위해 만든 계정이 아닐까 ?

   발표 연사로만 등록해 두고, 실제 강연 발표는 하지 않았다는 것인가요? 그것도 수 년 동안?? 이해가 안되는 점은 발표 연사로 매 년 등록하고 발표 하지 않는다고 하면 그 연사를 빼는게 정상적인 대회 운영일 것 같은데 말이죠.

   이렇게 까지 해서 얻을 수 있는 이득이 대체 무엇인지 궁금하네요..

   투자처가 생깁니다. 결국 결론은 돈에 귀결되죠. 특히 한국에서는 이렇게 유명하지라도 않으면 투자받기 사실상 힘들고, 만약 걸려도 아쉬울 거 없습니다.

   한국에서는 흔한 일이라 놀랍지도 않네요.

   저는 한국에서 이런 일을 한번도 보지 못했는데, 어떤 정보를 알고 계셔서 이런 의견을 말씀하시는건지 정보 공유 좀 해주세요

   증거를 제시해주시죠 아무리 헬조선이라도 가짜 여성 프로필을 수시로 만들지 않습니다

   이런 일이 흔하다고요?

   최근, 그것도 우리와 유관한 기사로 대신하겠습니다.
   https://news.kbs.co.kr/news/pc/view/view.do?ncd=7798206
   언급하면 고소당하니 뉴스기사로 대신합니다.

     고용노동부는 오늘(20일) 코드 스테이츠를 대상으로 4년간의 훈련정보를 분석하고 현장 점검한 결과, 자격요건을 갖추지 않은 강사를 활용하고 훈련생 출결을 부실하게 관리한 점을 확인했다고 밝혔습니다.

   이 문장을 보면 얘들도 진짜 사람을 썼지 위에 놈들처럼 가짜 프로필을 만들진 않았어요

   전 위 뉴스가 이 기사랑 관련이 있어보이진 않네요.

   이런 문제에 옹호하는 사람도 있죠..

   https://twitter.com/unclebobmartin/status/1729259132455395395

   재밌네요. 여성 엔지니어가 성장할 환경은 없는 상황에서 갑자기 성평등이 중요해지니 이때 생기는 미스매치를 해결하려고 거짓말을 했군요. 문제를 드러내는데 있어서, 환경에 대한 반성이 없다는 부분이 아쉬운 지점입니다.

   와 불쾌할 정도네요.

   이거 대형 스캔들이군요.
   가끔 세션 리스트에 처음 보는 사람들이 있어서 그런가 보다 했는데, 이걸 파보니 이런 일이 허허
"
"https://news.hada.io/topic?id=12085","나의 5억 달러짜리 화성 로버 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          나의 5억 달러짜리 화성 로버 실수

나의 5억 달러짜리 화성 로버 실수: 실패담

     * 2003년 2월, 나사(NASA)의 제트 추진 연구소(JPL)에서 일상적인 저녁이 시작됨.
     * Spirit 화성 로버가 플로리다 케이프 커내버럴로 발사를 위해 운송되기 두 주 전이었음.
     * Spirit과 Opportunity는 당시 가장 복잡한 우주선 중 하나로, 나사에 거의 10억 달러가 투자됨.
     * 화성 로버에는 바퀴 구동 및 조향, 로봇 팔 제어, 카메라 조준, 지구 지향 안테나 포인팅 등을 위한 62개의 모터가 탑재됨.
     * 로버는 화성의 가혹한 환경을 시뮬레이션하는 광범위한 테스트를 거침.
     * 특히 폭발적인 충격파가 모터 내부의 취약한 탄소 구성 요소를 손상시킬 수 있는 화약 이벤트가 중요함.
     * 모터의 내부 상태는 전기적 성능을 검사하여 확인할 수 있음.
     * 테스트는 여러 번 수행되었으며, 경험 많은 크리스는 모터 연결 및 제어 지침 작성 책임자로서 이 테스트 캠페인에 적합한 인물이었음.
     * 테스트 중, 크리스는 실수로 전기적 서지를 로버가 아닌 우주선으로 보내는 실수를 저질러버림.
     * 이 실수로 인해 5억 달러짜리 우주선이 폐기될 수도 있는 상황에 처함.
     * 크리스는 즉시 상황을 보고했으나, 우주선에서 모든 텔레메트리가 손실된 것으로 나타남.
     * 크리스는 자신의 실수로 인해 이번 발사 주기에 로버가 하나만 발사될 수도 있다고 생각함.
     * 그는 이 사건을 아내에게 털어놓으며 자신이 다음 날 직장을 잃을 것이라고 확신함.
     * 다음 날, 팀은 사건을 면밀히 검토했고, 전기적 서지가 H-브리지 모터 드라이버 회로로 갔을 가능성이 높다고 판단함.
     * 우주선을 다시 켜보기로 결정하고, 테스트를 재개함.
     * 우주선의 텔레메트리가 다시 살아나고, Spirit이 죽지 않았음이 밝혀짐.

교훈

     * 크리스는 이 이야기를 공유함으로써 자신과 다른 사람들에게 귀중한 교훈을 제공함.
     * 그의 실패담은 팀 문화와 채용 과정에서도 중요한 역할을 함.
     * 크리스는 자신의 경험을 통해 얻은 교훈을 다음과 같이 표현함: ""당신의 흉터가 당신을 섬기게 하라; 그것들은 귀중한 학습 경험이자 능력과 회복력에 대한 투자다.""
     * 위기의 순간, 한 동료가 크리스에게 다가와 위로의 말을 건네며, 다음에 무언가가 괜찮다고 승인할 때 이 느낌을 기억하라고 조언함.
     * 크리스는 이 사건 이후 Spirit과 Opportunity의 비행 감독관이 되어 나사의 탁월한 성과 메달을 수상함.
     * 프로젝트 관리자는 크리스가 다시는 같은 실수를 하지 않을 것이라고 믿으며, 그가 테스트를 계속 이끌 것이라고 결정함.
     * 크리스는 이후에도 많은 테스트를 수행하며, 절차를 신중하게 수정하여 동일한 실수를 반복하지 않도록 함.
     * 그는 중요한 결정을 내릴 때마다 그 순간을 기억하며, 다른 사람들이 자신의 도전적인 순간을 헤쳐나가도록 돕는 데 주력함.
     * 우주 탐사에서 실패는 선택이 아니라 기본 장착된 것으로, 모든 실수는 더 큰 성공으로 향하는 디딤돌임.
     * 크리스는 우주 기업가, 엔지니어, 과학자, 기술자 등 다른 사람들의 '실패담'을 듣고 배우고 싶어함.

GN⁺의 의견

   이 글에서 가장 중요한 것은 실패를 통한 학습과 성장의 가치임. 크리스의 이야기는 실패가 불가피한 일부임을 인정하고, 그것을 극복하는 과정에서 얻는 교훈과 자신감이 얼마나 중요한지를 보여줌. 이 글은 특히 초급 소프트웨어 엔지니어들에게 실패를 두려워하지 않고, 그것을 성장의 기회로 삼을 수 있는 영감을 제공함. 또한, 크리스의 경험은 팀워크와 리더십의 중요성을 강조하며, 어려운 상황에서도 서로를 지지하고 신뢰하는 문화가 얼마나 중요한지를 보여줌. 이러한 이야기는 사람들에게 유익하고, 긍정적이며, 흥미롭고, 재미있고, 매력적인 요소를 가지고 있어 많은 사람들에게 흥미로울 것임.

        Hacker News 의견

     * 기계/항공우주 엔지니어의 경험

     인명을 책임지는 안전 비평가로서, 사고로 인해 파손된 부품 사진을 검토하며 자신의 계산 오류나 부적절한 테스트 절차 등이 원인이었을까 두려움을 느낌. 이러한 경험은 일부에게는 PTSD와 같은 심리적 부담을 안겨줌.
     * 소프트웨어 엔지니어의 실수 이야기

     10년 전 고객의 웹 서비스 새 버전을 출시하는 날, 수동적이고 복잡한 배포 과정 중 실수로 프로덕션 데이터베이스를 지워버림. 다행히 백업 덕분에 대부분의 데이터 복구 가능. 이후 데이터베이스와 프로덕션 시스템을 다룰 때 극도로 주의를 기울임.
     * 인턴의 실수와 프로세스 문제

     인턴이 프로덕션 데이터베이스를 삭제했다면, 인턴의 문제가 아닌 프로세스의 문제임. 전임 직원(FTE)에게 더 많은 것을 기대하긴 하지만, 실수를 통해 다시 일어날 수 있는 희망의 중요성을 인식함.
     * 데이터베이스 보안과 해커의 위협

     한 사람의 실수로 전체 시스템이 무너질 수 있으므로, 해커에게도 동일한 위험이 존재함. 별도의 자격 증명, 접근 분리, 위험한 명령어 금지 등의 보안 조치가 중요함.
     * TV 방송국 테이프 오퍼레이터의 경험

     방송 중 잘못된 테이프를 꺼내는 실수를 방지하기 위해 트레이너가 주의를 주는 방법을 통해 신중함을 배움. 실수로 인한 징계가 엄격했지만, 덕분에 실수를 하지 않고 경력을 쌓음.
     * 토마스 J 왓슨의 인용구

     회사에 큰 손실을 끼친 직원을 해고하지 않고, 그 경험을 통해 배운 것을 가치 있게 여김.
     * 사건 연결성의 중요성

     사건 발생 시 정확한 타임스탬프 비교를 통해 불필요한 걱정을 피할 수 있음. 정확한 언어 사용과 사건 간 연결성 확인의 중요성을 강조함.
     * NOAA-N Prime 위성 사고

     비싼 볼트를 다른 프로젝트에 '빌려' 사용하고 반환하지 않아 위성이 떨어지는 사고 발생. 사고로 인한 수리 비용은 1억 3천 5백만 달러에 달함.
     * 과로와 실수 가능성

     중요한 작업에 12시간 근무를 허용하는 것은 잘못됨. 실수의 가능성을 인정하고, 인간의 역량에만 의존하는 것은 위험함.
     * 전기 커넥터 설계와 모터 컨트롤러의 복잡성

     잘못된 연결을 방지하기 위해 다양한 크기와 모양의 커넥터를 사용하는 설계의 중요성. 복잡한 실패 사슬과 그로 인한 재설계의 필요성을 인식함.
"
