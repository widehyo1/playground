"https://news.hada.io/topic?id=18218","Firefox의 "Do Not Track" 기능 지원 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Firefox의 ""Do Not Track"" 기능 지원 중단

     * Mozilla Firefox의 ""Do Not Track"" 기능 제거
          + Mozilla는 Firefox 브라우저에서 ""Do Not Track"" (DNT) 설정을 제거함. 이 변경은 버전 135부터 적용되며, Nightly 버전에서도 확인 가능함.
          + DNT는 사용자가 웹사이트에 추적을 원하지 않는다는 신호를 보내는 브라우저 설정임. 그러나 많은 웹사이트가 이 신호를 무시함에 따라 Mozilla는 DNT가 더 이상 효과적인 개인정보 보호 수단이 아니라고 판단함.
          + Firefox의 ""Do Not Track"" 지원 페이지도 업데이트되어, DNT가 일부 경우 개인정보를 감소시킬 수 있다고 설명함.
     * 대안: Global Privacy Control
          + Mozilla는 Global Privacy Control (GPC) 설정을 대안으로 추천함. GPC는 점점 더 많은 사이트에서 존중되며, 일부 지역에서는 법적으로 시행됨.
          + Firefox에서 GPC 설정을 활성화할 수 있으며, 이는 ""내 데이터를 판매하거나 공유하지 말라""는 요청을 웹사이트에 보낼 수 있음.
     * 다른 브라우저의 상황
          + Google Chrome과 Microsoft Edge는 여전히 DNT 설정을 제공함. 이 변경이 다른 브라우저 벤더에게 영향을 미칠지는 지켜봐야 함.
          + Chrome에서 DNT를 활성화하려면 설정 > 개인정보 및 보안 > ""Do Not Track"" 요청 보내기를 선택해야 함.
          + Microsoft Edge에서는 설정 > 개인정보, 검색 및 서비스 > ""Do Not Track 요청 보내기""를 켜야 함.
     * 개인정보 보호 강화 방법
          + Firefox는 GPC를 추천하지만, Brave와 DuckDuckGo 같은 개인정보 보호 중심 브라우저, 광고 차단기, VPN 서비스, Privacy Badger 같은 브라우저 확장 프로그램을 사용하여 개인정보를 강화할 수 있음.
     * 기타 정보
          + Mozilla는 Firefox를 기본 브라우저로 설정하기 위한 실험을 계획 중이며, 이는 Firefox 다운로드 페이지와 설치 프로그램에 영향을 미침.

        Hacker News 의견

     * Mozilla에서 이 기능이 도입될 당시, 웹사이트가 이를 지원하는 것은 선택 사항이었음. 많은 사람들이 기본 설정으로 활성화되기를 원했지만, 실제로는 거의 사용되지 않았음. Internet Explorer가 기본 설정으로 활성화했지만, 결국 기능이 무시되었음. 이 기능이 종료된 것에 대해 긍정적으로 생각함. 실제로는 보안에 큰 기여를 하지 않았음.
     * Mozilla의 최근 행동에 대해 부정적인 의견이 많지만, 이 기능은 거의 존중받지 못했음. 명예 시스템에 기반했으며, 브라우저는 이를 강제하지 않았음. 아이러니하게도, 이 기능은 개인정보 보호에 민감한 사람들을 추적하는 추가 데이터 포인트로 사용되었음.
     * 이 기능은 개인정보 보호에 실질적인 기여를 하지 않았으며, 오히려 사용자를 식별하는 신호로 작용했음. 반추적은 패배하는 싸움임. Firefox를 사용해도 1차 추적을 피할 수 없음. 예를 들어, 브라우저가 CPU 코어 수를 노출하면 사용자를 거의 고유하게 식별할 수 있음.
     * 이 기능의 제거는 사용자 권한을 해침. Firefox 사용자는 더 많은 동의 요청을 처리해야 할 것임. Transcend Consent Management는 DNT가 활성화되면 자동 동의 요청을 억제하지만, GPC만 활성화되면 ""정보 판매/공유""만 제외함. 이 변화는 웹 커뮤니티의 의견을 충분히 고려하지 않았음.
     * GPC는 DNT와 유사하지만, 법적 지원이 더 강함. CCPA와 같은 법률이 이를 지원함. GPC는 데이터 판매나 공유를 중단하는 데 중점을 두어 현대의 개인정보 보호 요구에 더 적합함. GPC는 규제 기관, 개인정보 보호 옹호자, 산업 리더의 의견을 반영하여 기존 법률과 기능적 격차를 해결함.
     * DNT는 새로운 제안인 ""Global Privacy Control""로 대체됨. Firefox는 이제 선택적으로 Sec-GPC 헤더를 보냄. 웹사이트 소유자로서 DNT 헤더가 있을 때 익명화 코드를 구현했지만, Sec-GPC를 추가하는 것은 변화에 불과함. Mozilla가 두 헤더를 동시에 보내지 않는 것은 이해하기 어려움.
     * ""Do Not Track"" 신호는 추적을 막기보다는 지문 인식 신호로 더 유용했음. 이제 더 강력한 대안을 기대할 수 있음.
     * 이 기능을 유지하고 EU가 이를 무시하는 것을 법적으로 남용으로 간주해야 한다고 생각함. 그러면 쿠키 배너가 필요 없을 것임.
     * 2018년에 폐기되고 2024년에 제거됨. 이 기능이 목적과 반대되는 역할을 했기 때문에 놀랄 일이 아님.
     * 이 기능은 사용량이 적어 사람들을 추적하는 데 사용되었음.
"
"https://news.hada.io/topic?id=18217","미국 수학 점수 하락 국제 주요 시험 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        미국 수학 점수 하락 국제 주요 시험 결과

     * 미국의 4학년 학생들은 2019년부터 2023년까지 국제 수학 시험에서 점수가 크게 하락함. 이는 다른 여러 나라들이 점수를 개선한 것과 대조적임.
     * 8학년 학생들의 점수 하락은 더욱 심각하며, 이는 팬데믹 이전부터 시작된 추세임.
     * TIMSS(국제 수학 및 과학 성취도 추이 연구) 결과는 64개국의 4학년과 8학년 학생 65만 명 이상을 대상으로 함.
     * 싱가포르, 한국, 홍콩, 일본이 대부분의 학년과 과목에서 상위권을 차지함.

미국 공립학교 이해하기

     * 대부분의 참여국 학생들은 기본적인 수학 및 과학 지식을 가지고 있으며, 약 3분의 1은 높은 기준을 충족함.
     * 2023년 시험에서는 많은 국가에서 남학생들이 여학생들보다 더 높은 점수를 받았으며, 이는 1995년 이후 좁혀졌던 성별 격차가 다시 벌어지고 있음을 나타냄.
     * COVID-19 팬데믹 이후 처음으로 TIMSS 결과가 발표되었으며, 일부 국가는 점수가 개선됨.
     * 미국 학생들의 과학 순위는 상대적으로 좋지만, 4학년 학생들의 평균 점수는 1995년보다 낮음.
     * PISA(국제 학업 성취도 평가)에서도 미국의 수학 점수는 하락했으나, 다른 국가들의 점수 하락이 더 커 순위는 상승함.
     * NAEP(국가 교육 진보 평가)와 TIMSS 결과는 모두 수학 점수의 큰 하락을 보여줌.
     * 미국의 최하위 10% 학생들은 수학 점수가 37점, 과학 점수가 22점 하락함.
     * 학업 성취도가 낮은 학생들의 점수 하락이 미국 전체 점수 하락의 주요 원인임.
     * 팬데믹 이후 인종 및 소득에 따른 격차가 확대됨.
     * TIMSS는 학생들의 결석, 가정의 자원, 수업의 질, 학생들의 수학 및 과학에 대한 흥미 등을 조사함.
     * 결석이 잦은 학생들은 점수가 낮았으며, 사회경제적 지위와 점수 간의 강한 상관관계가 있음.
     * 학업 성취를 중시하는 학교의 평균 점수가 높았음.

        Hacker News 의견

     * TIMSS 2023 결과에 따르면, 미국 교육의 질이 향상되었음에도 불구하고, 인구 구성의 변화로 인해 전체 점수가 하락했을 가능성이 있음
          + 이민자 자녀들이 본국보다 미국에서 더 좋은 성과를 내지만, 백인 미국인 그룹보다 낮은 성과를 보임
          + Simpson의 역설로 인해 각 하위 그룹은 개선되었지만, 전체 점수 분포가 하락했을 수 있음
     * 미국의 수학 교육 수준이 낮다는 점에 실망했으나, 시간이 지나면서 수학이 모든 사람에게 중요하지 않다는 인식을 이해하게 되었음
          + 고등학교에서는 기본적인 수학만 가르치고, 더 깊이 배우고 싶은 학생들은 스스로 노력해야 함
          + 많은 학생들이 더 나은 엔지니어가 될 수 있었을 것이라는 아쉬움이 있음
     * 캘리포니아의 교육 정책 변화로 인해 국제 시험 점수가 낮아질 가능성이 있음
          + 수학 교육의 일부를 커리큘럼에서 제거하고 대체 수업을 제공하는 정책이 논란이 되고 있음
          + 이러한 변화가 전국적으로 확산되면, 미국 학생들이 더 기초적인 수학을 배우게 될 수 있음
     * 문해력 문제에 대한 우려가 있음
          + 숫자를 이해하는 것이 중요하지만, 맥락에서 그 의미를 해석할 수 없다면 큰 의미가 없음
          + 유튜브와 소셜 미디어의 영향으로 문해력이 계속 하락할 가능성이 있음
     * 댓글 대부분이 인종과 정치에 집중하고 있으며, 소셜 미디어와 휴대폰을 요인으로 언급하는 댓글은 거의 없음
     * 4학년 성별 차이에 대한 언급
          + 이슬람 국가에서는 성별 차이가 거의 없지만, 서구 국가에서는 여학생들이 더 낮은 성과를 보임
          + 성별 분리 교육의 필요성을 시사할 수 있음
     * 학생들이 시험에 지쳐 시험을 던지려는 경우가 있음
          + 시험이 성적에 영향을 미치지 않기 때문에 학생들이 시험에 대한 동기부여가 부족함
     * 휴대폰과 소셜 미디어가 학생들의 집중력과 학습에 큰 방해 요소가 됨
          + 부모의 사후 관리가 중요한 요인임
          + 아시아 국가에서는 학생들이 방과 후에도 추가 수학 공부를 하며, 이민자 가정에서도 비슷한 경향을 보임
          + 어린 나이에 지나친 시험 압박을 주는 것이 바람직한지에 대한 고민이 필요함
     * 성적이 낮은 학생들이 더 많은 격차를 보이고 있음
          + 성적이 낮은 부모의 자녀도 성적이 낮을 가능성이 있는지에 대한 논의가 필요함
"
"https://news.hada.io/topic?id=18186","농담 아님, Funko가 방금 내 엄마에게 전화했음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      농담 아님, Funko가 방금 내 엄마에게 전화했음

        Hacker News 의견

     * Funko는 인디 게임과 개발자에 대한 깊은 존중과 감사를 표하며, 인디 게임 커뮤니티의 창의성과 열정을 사랑함
          + 최근 Funko의 브랜드 보호 파트너가 Itch.io에서 Funko Fusion 개발 웹사이트를 모방한 페이지를 발견하여 해당 페이지에 대한 삭제 요청을 했음
          + Funko는 Itch.io 플랫폼 전체에 대한 삭제 요청을 하지 않았으며, 사이트가 다시 정상화되어 기쁨
          + Funko는 Itch.io와 이 문제에 대해 소통하고 있으며, 게임 커뮤니티의 이해에 깊이 감사함
     * DMCA 삭제 요청, 사기 및 사기 보고, 그리고 어머니에게 전화하는 것에 대한 농담이 있음
          + 다음은 산타에게 말하는 것인가에 대한 유머가 포함됨
     * 이미지 변환과 관련된 저작권 문제로 인해 imagemagick과 ffmpeg가 삭제될 수 있다는 우려가 제기됨
     * Funko가 무엇인지 잘 모르는 사람도 있으며, 수집품 회사인지 궁금해하는 의견이 있음
     * Funko의 어머니에게 전화하라는 농담이 있으며, 빠르게 반응하는 상황을 묘사함
     * 법학 학생이 Itch.io를 돕기 위해 최선을 다해 문제를 해결하려고 노력하는 상황을 상상함
     * 최근 설문 조사에서 여성들이 암호화폐 거래를 하는 남성을 매력적이지 않다고 생각한다는 결과가 나왔으며, 애니메이션이나 코스프레를 즐기는 남성보다 낮게 평가됨
          + Funko 수집을 하는 남성은 암호화폐 거래보다 더 낮게 평가됨
     * Itch.io의 어머니에 대한 농담이 있으며, 사이트 자체를 언급하는 것인지 궁금해하는 의견이 있음
     * Funko가 밀고자라는 의견이 있음
"
"https://news.hada.io/topic?id=18229","로보콜을 중단하지 않은 2400개 전화 서비스 제공업체들, FCC에 의해 폐쇄될 위기에 처함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          로보콜을 중단하지 않은 2400개 전화 서비스 제공업체들, FCC에 의해 폐쇄될 위기에 처함

     * 2,400개 이상의 음성 서비스 제공업체가 로보콜 완화 데이터베이스 제출 요건을 준수하지 않아 제거될 위기에 처함.
          + FCC는 로보콜 완화 책임에 대한 인식을 높이기 위해 더 엄격한 제출 요건을 고려 중임.
     * FCC의 새로운 조치
          + FCC 집행국은 2,411개의 음성 서비스 제공업체가 로보콜 완화 데이터베이스에 제대로 제출하지 않았음을 발표함.
          + 데이터베이스에서 제거되면 다른 제공업체는 이들로부터의 통화 트래픽을 수락할 수 없게 됨.
          + FCC 의장 Jessica Rosenworcel은 로보콜 완화 데이터베이스의 제출 요건을 강화하는 새로운 규칙을 제안함.
     * 로보콜 완화 데이터베이스의 중요성
          + 모든 음성 서비스 제공업체는 STIR/SHAKEN 구현 수준을 증명하고 로보콜 완화 계획을 설명하며, 규칙 준수를 모니터링하기 위한 기타 정보를 제공해야 함.
          + 미국 전화 네트워크에 참여하는 것은 소비자에게 도달하는 사기 트래픽의 위험을 적극적으로 완화할 책임이 있음.
     * 새로운 규칙 제안
          + 회사 정보의 적시 업데이트를 요구하고, 잘못된 정보 제출 시 $10,000, 정보 유지 실패 시 $1,000의 기본 벌금을 부과함.
          + 제출물의 정확성을 매년 재인증하고 $100의 제출 수수료를 도입함.
          + 데이터베이스의 신뢰성과 보안을 개선하기 위해 추가 지침과 ""모범 사례""를 제공하고, 이중 인증 프로토콜을 설정함.
     * 반로보콜 다주 소송 태스크포스의 조치
          + 51명의 주 법무장관으로 구성된 반로보콜 다주 소송 태스크포스는 여러 음성 서비스 제공업체에 대한 조사를 완료하고 FCC와 조사 결과를 공유함.
     * 배경
          + 음성 서비스 제공업체는 STIR/SHAKEN 구현 상태와 로보콜 완화 노력을 보고하기 위해 RMD에 인증서를 제출해야 함.
          + RMD에 나타나지 않는 제공업체로부터의 트래픽은 차단해야 함.
     * 더 큰 그림
          + FCC의 로보콜 대응 팀은 불법 스푸핑 또는 사기 로보콜의 위협을 해결하기 위한 작업 그룹으로 활동함.
          + 소비자 통신 정보 서비스 위협(C-CIST) 분류를 통해 가장 해로운 불법 계획을 실행하는 위협 행위자를 공식적으로 명명함.
          + 불법 로보콜 및 스푸핑에 대해 기록적인 벌금을 부과하고, 국제 로보콜러가 미국 전화에 도달하는 게이트웨이를 폐쇄함.
          + STIR/SHAKEN 발신자 ID 인증 표준의 광범위한 구현을 포함하여 게이트웨이 제공업체에 요구 사항을 적용함.
          + 불법 통화를 소급하여 그 출처를 추적하기 위해 업계와 협력함.
          + 49개 주, 워싱턴 D.C., 괌 및 국제 파트너와 로보콜 조사 파트너십을 체결함.
          + 사기 문자 메시지를 겨냥한 최초의 규정을 수립함.
          + STIR/SHAKEN 준수를 모니터링하기 위해 로보콜 완화 데이터베이스를 시작함.

        Hacker News 의견

     * SIP 제공자가 차단될지 확인하고 싶어하는 의견이 있음. 원래 URL에서 제공자 목록을 찾을 수 있었으나 현재는 텍스트 뉴스 릴리스로 변경되었음. 본인의 SIP 제공자가 목록에 없어서 기쁨을 느낌
     * 북유럽에서 스팸 전화와 번호 스푸핑이 심각해져서 전화 받기를 포기하거나 번호를 변경하는 사람들이 많아짐. 시스템이 구식이라고 생각하며, 무작위 전화를 받는 것은 순진한 행동이라고 결론 내림
     * Google Pixel을 사용하는 주된 이유는 자동 전화 스크리닝 기능 때문임. 모든 미확인 번호를 스크리닝하고 통과한 전화만 받음. 다른 스마트폰 회사들도 비슷한 기능을 도입해야 한다고 생각함
     * 최근 몇 년간 스팸 전화가 크게 줄어들었음을 관찰함. Stir/Shaken 기술이 효과를 발휘하기 시작했거나, 세대 변화로 인해 전화 받는 사람이 줄어들어 스팸 전화의 ROI가 감소했을 가능성을 제기함
     * FCC가 스팸 전화 차단에 진전을 보이고 있지만, 새로운 인물이 FCC를 이끌게 되면 이 진전이 뒤집힐까 걱정함
     * 데이터 전용 SIM과 VoIP 번호만 사용하며, Zoiper를 통해 아웃바운드 통화나 사전 예약된 통화만 활성화함. WhatsApp을 통해 친구와 가족과 소통하며, 스팸 전화나 문자를 전혀 받지 않음. 전화번호를 인증 수단으로 사용하는 웹사이트에 불만을 표함
     * FCC가 스팸 전화 차단에 느리게 대응하고 있다고 비판함. 2,411개 회사가 인증을 갱신하지 않아 FCC가 강력한 경고를 보냈고, 7개월 후에야 집행 절차를 시작함
     * FCC의 스팸 전화 차단 파트너십에 참여하지 않은 주가 궁금하다는 의견이 있음
     * 스팸 전화 차단이 이루어지면 차단했던 번호를 해제해야 할 것 같다고 생각함. 특정 제공자에게 할당된 번호 블록을 알아내어 차단할 수 있는 기능이 있었으면 좋겠다고 언급함
"
"https://news.hada.io/topic?id=18198","screenpipe - 데스크탑의 모든 데이터를 가져오는 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  screenpipe - 데스크탑의 모든 데이터를 가져오는 API

     * 사용자의 데스크탑 컨텍스트와 활동을 이해하고 향상 시키는 AI 에이전트를 쉽게 개발 가능
     * 데스크탑의 스크린, 보이스, 키보드, 마우스, 카메라를 모두 녹화
     * 100% 로컬에서 실행되며, 크로스플랫폼, 24/7 모든 활동을 기록
     * 화면에서 텍스트 추출, 오디오 Transcribe, 사용자 액션을 모두 SQLite에 저장
     * 임베딩, RAG 파이프라인, Ollama를 이용한 로컬 LLM, OpenAI/Anthropic 프록시 제공
     * 샌드박싱된 JS 플러그인 시스템 제공

   'every second you are not recording is a missing context for AGI' ㄷㄷㄷ

   언젠간 필요해질 존재지만 너무 무서운 존재네요...

   Anthropic의 Computer-Use API 이후로 이런 시도들이 많아지고 있는걸 보니 다행스럽기도 하고 다른 분들처럼 우려스럽기도 하네요 ㅎㅎ (전반적으로는 발전하는 과정이라고 생각합니다)

   이런건 어떻게 활용할 수 있을 지 궁금하네용..

   바이러스??

   오 재밌는 프로젝트네요.
   ms같은 대기업보다 오픈소스가 더 나을듯하네요.

   보안 문제가 생길 거 같은데요.
"
"https://news.hada.io/topic?id=18254","터미널 프로그램이 따르는 "Rules" 규칙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        터미널 프로그램이 따르는 ""Rules"" 규칙

     * 최근 터미널에서 발생하는 모든 일이 다음 네 가지 요소의 조합임을 생각하게 됨
          + 운영 체제의 역할
          + 쉘의 역할
          + 터미널 에뮬레이터의 역할
          + 실행 중인 프로그램의 역할 (top, vim, cat 등)
     * 프로그램은 놀랍도록 일관되게 동작함
          + POSIX는 터미널 에뮬레이터, OS, 쉘의 작동 방식을 주로 규정하지만, 개별 프로그램의 동작 방식에 대한 표준은 없음
          + 그러나 터미널 프로그램은 대체로 일관된 방식으로 동작함
     * 이 규칙들은 설명적이지 처방적이지 않음
          + 터미널 프로그램의 저자들에게 이 규칙을 따라야 한다고 설득하려는 것이 아님
          + 새로운 터미널 프로그램을 사용할 때 예상할 수 있는 기본 규칙을 아는 것이 유용함
     * 프로그램의 책임이 명확하지 않은 경우가 있음
          + 예를 들어, Ctrl-D를 눌러 REPL을 종료하는 것은 프로그램이 명시적으로 구현해야 함

    규칙 1: 비대화형 프로그램은 Ctrl-C를 누르면 종료해야 함

     * 비대화형 프로그램은 기본적으로 Ctrl-C를 누르면 종료됨
     * 대화형 프로그램에서는 Ctrl-C가 다른 역할을 함

    규칙 2: TUI는 q를 누르면 종료해야 함

     * less나 htop 같은 TUI 프로그램은 q를 누르면 종료됨

    규칙 3: REPL은 빈 줄에서 Ctrl-D를 누르면 종료해야 함

     * 대부분의 REPL은 빈 줄에서 Ctrl-D를 누르면 종료됨

    규칙 4: 16가지 이상의 색상을 사용하지 말아야 함

     * 터미널 프로그램은 기본 16 ANSI 색상 외의 색상을 거의 사용하지 않음

    규칙 5: readline 키 바인딩을 대략적으로 지원해야 함

     * 대부분의 프로그램은 readline 키 바인딩을 지원함

    규칙 5.1: Ctrl-W는 마지막 단어를 삭제해야 함

     * Ctrl-W가 마지막 단어를 삭제하지 않는 프로그램은 거의 없음

    규칙 6: 파이프에 쓰기 시 색상을 비활성화해야 함

     * 대부분의 프로그램은 파이프에 쓰기 시 색상을 비활성화함

    규칙 7: -는 stdin/stdout을 의미함

     * -를 파일 이름 대신 전달하면 stdin에서 읽거나 stdout에 씀
     * 이러한 규칙을 배우는 데 시간이 걸림
          + 규칙이 어디에 적용되는지 배우고, 예외를 인식하며, 패턴을 무의식적으로 파악해야 함
          + 이러한 규칙을 명시적으로 작성하면 다른 사람들이 배우는 속도를 높일 수 있음

        Hacker News 의견

     * 사용자 기본 전경색과 배경색을 존중해야 함
          + 색상을 사용할 경우, 기본 배경색과 전경색에 관계없이 가독성이 있어야 함
          + 색상만으로 정보를 전달하지 말아야 함
          + 이모지는 신중하게 사용해야 함
          + 스크롤링 출력에서 중요한 정보를 삭제하지 말아야 함
          + 사용자에게 색상 및 시각적 요소를 선택할 수 있는 설정을 제공해야 함
     * Command Line Interface Guidelines를 추천함
          + Ctrl-C로 종료, stdin을 위한 - 수용, 파이프에서 색상 비활성화 등의 규칙 포함
     * 명령줄 도구에 대한 추가 규칙
          + 터미널 유형을 가정하지 말아야 함
          + 터미널이 없을 수도 있음을 가정해야 함
          + 인수 및 출력 구조에서 일반적인 관례를 따라야 함
          + 표준 sysexits.h 종료 코드를 사용해야 함
          + 이진 내 --help 및 매뉴얼 페이지를 포함해야 함
     * readline/emacs 키 바인딩에 대한 정보
          + macOS에서 Ctrl-E, Ctrl-W, Ctrl-U 사용 가능
          + rlwrap 프로그램을 설치하여 라인 편집 기능을 추가할 수 있음
     * 색상 사용에 대한 조언
          + 16색 이상 사용하지 말아야 함
          + 색상을 구성 가능하게 해야 함
     * GHCi에서 Ctrl-D 사용 시 발생하는 문제
          + :q 명령어로 종료해야 함
     * ~를 홈 디렉토리로 취급하는 것에 대한 설명
          + 쉘에서는 작동하지만 POSIX API에서는 작동하지 않음
     * 프로그램이 홈 디렉토리에 파일을 추가하지 않도록 해야 함
          + XDG_CONFIG_HOME을 존중해야 함
     * CLI의 일관성에 대한 의견
          + CLI는 GUI보다 일관성이 높음
          + GUI에 이 속성을 가져오는 것은 어려움
     * 장기 실행 프로세스는 SIGHUP에서 구성을 다시 로드해야 함
     * SSH 연결에서 유용한 팁
          + ~.를 사용하여 SSH 세션을 종료할 수 있음
"
"https://news.hada.io/topic?id=18174","휴대폰이 PC가 되지 않는 한, 추가 성능에 대해 돈을 내고 싶지 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                휴대폰이 PC가 되지 않는 한, 추가 성능에 대해 돈을 내고 싶지 않아요

     * 최근 스마트폰의 성능은 충분히 강력하여 대부분의 일상적인 앱 실행에 문제가 없음
          + 최신 칩셋은 성능이 뛰어나지만, 실제 사용에서 그 차이를 느끼기 어려움
          + 성능 향상에 드는 비용이 증가하고 있으며, 이는 다른 중요한 기능에 투자될 수 있는 자원을 소모함
     * 고성능 스마트폰이 더 많은 성능을 활용할 수 있는 새로운 사용 사례가 필요함.
          + AI는 아직 소비자들에게 큰 매력을 주지 못하고 있으며, 현재의 하드웨어에서도 충분히 잘 작동함
          + 핸드헬드 게이밍은 아직 충분히 활용되지 않은 옵션이며, 현재의 플래그십은 Nintendo Switch보다 성능이 뛰어남
     * 스마트폰을 PC처럼 사용할 수 있는 가능성?
          + 삼성의 Dex는 이러한 가능성을 보여주지만, 아직 PC와 같은 경험을 제공하지 못함
          + Android와 ChromeOS의 통합이나 Debian 앱 실행 가능성은 미래의 고성능 칩셋 활용에 대한 힌트를 줌
     * 더 높은 성능은 더 높은 비용을 수반하며, 이는 소비자에게 부담이 됨.
          + Qualcomm의 Snapdragon 8s Elite와 같은 중상급 칩셋이 일상적인 성능에 충분할 수 있음.
          + 배터리 수명과 가격 안정화가 소비자에게 더 중요한 요소로 작용할 수 있음.
     * 새로운 스마트폰이 이전 모델보다 현저히 빠르다는 느낌은 사라졌으며, 성능보다 다른 중요한 기능에 집중할 필요가 있음
          + 제조업체가 성능 향상보다 배터리 수명 개선과 가격 안정화에 더 집중해야 한다고 주장

        Hacker News 의견

     * 앱 성능 발전에 따라 새로운 버전으로 업그레이드가 필요해질 것이라는 의견이 있음. MS가 Teams에 AR 기능을 추가할 것이라는 소문이 있음
          + 성능 향상은 자원 낭비를 정당화하는 이유가 됨
     * 2022 Moto Razr는 모니터에 연결하면 PC처럼 사용할 수 있음. 데스크톱 모드가 있으며, TV와 연결해 스트리밍이나 가벼운 게임을 즐길 수 있음
     * iPhone X 이후로 스마트폰의 사용성은 정점에 도달했다고 생각함. 추가적인 기능이 사용자에게 큰 가치를 제공하지 않음
          + 스마트폰을 개인 AI 기기로 만들거나 일반 컴퓨팅 장치로 전환하는 것이 필요함
          + 삼성과 Huawei는 일반 컴퓨팅 형태를 추구하고 있음
     * Ubuntu Edge는 2013년에 제안된 리눅스 폰이었으나, Purism Librem 5는 모니터에 연결하면 완전한 리눅스 데스크톱이 됨
     * ""성능""의 개념은 논쟁의 여지가 있음. eMMC나 UFS는 성능을 중시하는 사용자에게 적합하지 않음
          + Chromebook과 개발 보드도 eMMC를 사용함
     * 고급 스마트폰은 사치품의 측면이 있음. 많은 사람들이 사양을 신중히 검토하지 않고 새 폰을 구매함
          + 스마트폰은 인터넷 접속의 주요 수단이 됨
          + 성능 개선은 대부분의 사용자에게 중요하지 않지만, 상태와 FOMO가 판매를 주도함
     * 스마트폰은 강력한 컴퓨터지만, 계측기기와의 연결을 위한 포트 접근성이 부족함
          + 다양한 기능을 추가할 수 있는 잠재력이 있지만, 제조사들이 이를 다루지 않음
     * 대부분의 사람들이 3년마다 업그레이드하는 이유는 배터리 교체의 어려움 때문임
          + 현재의 스마트폰은 대부분의 모바일 컴퓨팅 작업에 과잉임
     * Motorola Atrix는 스마트폰을 Ubuntu 웹탑 장치로 변환할 수 있는 제품이었음
     * ZTE Blade는 예산형 폰으로 성능이 제한적이었음. 배터리 문제로만 폰을 교체했음
          + 카메라, 웹 브라우저, 채팅 앱, 이메일 수신 기능이 충분함
"
"https://news.hada.io/topic?id=18206","라즈베리 파이 500 리뷰: 다시 컴퓨터가 된 키보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     라즈베리 파이 500 리뷰: 다시 컴퓨터가 된 키보드

     * Tom's Hardware 총평 : Raspberry Pi 400의 훌륭한 업그레이드 버전으로, Raspberry Pi 5의 강력한 성능을 편리한 폼팩터에 담음. 뛰어난 열 성능과 3GHz로의 오버클럭도 가능.
     * 장점 : 우수한 열 성능, 편리한 폼팩터, 기본적으로 빠르며, 더 빠르게 조정 가능
     * 단점 : GPIO 접근 불편, NVMe 스토리지 없음, 카메라 및 터치 디스플레이 연결 불가

Raspberry Pi 500 기술 사양

     * SoC: BCM2712 SoC Arm Cortex-A76 64비트 CPU, 2.4 GHz
     * GPU: 800 MHz VideoCore VII GPU, OpenGL ES 3.1, Vulkan 1.2 지원
     * 디스플레이: 2 x 4Kp60 HDMI 출력, HDR 지원
     * RAM: 8GB LPDDR4X SDRAM
     * 저장소: Micro SD (SDR104 호환)
     * GPIO: 40 핀 Raspberry Pi HAT 호환
     * USB: 1 x USB 2, 2 x USB 3
     * 네트워킹: 기가비트 이더넷
     * Wi-Fi / Bluetooth: 듀얼 밴드 802.11ac, Bluetooth 5 / BLE
     * 전원 버튼: 키보드에 소프트 전원 버튼
     * 전원: 5V 4A USB C
     * 크기: 286 × 122 × 23 mm

Raspberry Pi 500 디자인

     * Raspberry Pi 500은 Raspberry Pi 5가 내장된 키보드 형태로, Raspberry Pi 400과 유사한 폼팩터를 가짐
     * 전체적으로 흰색 컬러 스킴을 채택
     * 모든 포트가 케이스 뒤에 위치하여 깔끔한 케이블 정리가 가능함
     * 키보드는 반응성이 좋고, 전원 버튼이 포함되어 있음

Raspberry Pi 500 분해

     * Raspberry Pi 500은 쉽게 열 수 있으며, 내부에는 큰 알루미늄 방열판이 PCB와 키보드를 감싸고 있음
     * NVMe SSD를 위한 공간이 있지만, 실제로는 연결부가 없음
     * RP2-B2 칩이 키보드 컨트롤러로 사용됨

Raspberry Pi 500 열 및 전력 성능

     * Raspberry Pi 400과 유사한 열 성능을 보이며, 3 GHz로 오버클럭해도 우수한 성능을 유지함
     * 기본 상태에서 1.5 GHz로 작동하며, 31.2°C의 온도를 유지함
     * 5분 스트레스 테스트 동안 2.4 GHz로 작동하며, 51°C까지 상승함. 최대 8.8W의 전력 소비

Raspberry Pi 500 오버클럭 가능성

     * Raspberry Pi 500은 안정적으로 3 GHz까지 오버클럭 가능함(64.8°C 유지)
     * 전압 조정을 통해 안정성을 유지하며, 성능이 뛰어남

Raspberry Pi 500 Micro SD 카드 성능

     * 부팅 시간은 19.86초로 인상적이며, 읽기 및 쓰기 성능은 NVMe에 비해 느림
     * Raspberry Pi OS는 빠르고 반응성이 좋음

Raspberry Pi 500의 GPIO 접근

     * GPIO 접근을 위해 브레이크아웃 보드가 필요하며, 기존 Raspberry Pi 5와 동일한 핀을 제공함

Raspberry Pi 500의 사용 사례

     * 1980년대 홈 컴퓨터의 현대적 대안으로, 강력한 처리 능력을 제공하여 데스크톱 컴퓨터로 사용 가능함
     * 초보자나 학생, 또는 가벼운 데스크탑 작업에 이상적

결론

     * Raspberry Pi 500은 강력한 성능을 제공하는 매력적인 패키지로, 교육 및 사무실 환경에서 유용하게 사용될 수 있음
     * GPIO 접근 및 카메라/디스플레이 포트의 부족이 단점

   제 친구 중에 한 명은 라즈베리파이로 코인봇을 만들어서 계속 거래하고 있습니다. 코인원 API를 사용하면 수수료가 0원이라고 하더라고요. 생각보다 꽤 많은 돈을 번 걸로 알고 있어서, 그 이후로 라즈베리파이 소식을 계속 보고 있는데 반가운 소식이네요.

        Hacker News 의견

     * Pi 500의 설계에서 M.2 HAT 기능을 통합하지 않은 점이 아쉬움. SSD를 쉽게 장착할 수 있었다면 제품의 활용 범위가 크게 확장되었을 것임
          + Micro HDMI 포트를 고수한 점도 이해하기 어려움. 표준 HDMI 케이블이 더 저렴하고 쉽게 구할 수 있음
     * Pi 500에 대한 비판이 많지만, 경량 저전력 기기가 연결성과 학습의 기회를 제공할 수 있는 점을 고려하면 좋은 솔루션임
          + 모든 사람이 같은 자원과 필요를 가지고 있지 않음을 잊지 말아야 함
     * 목표 그룹이 SD 카드로 모든 것을 실행하는 데 문제가 없을 수 있지만, M.2 슬롯을 제공하지 않은 것은 실수라고 생각함
          + 작은 드라이브는 매우 저렴하고 성능 차이가 큼
     * Pi500의 출시를 기다려왔으며, Pi400을 사용 중인 집에 큰 업그레이드가 될 것임
          + 여전히 조용하고, RAM이 두 배, 속도가 세 배로 증가하여 만족스러움
          + 새로운 Pi의 날은 최고의 날임
     * 45% 색 영역의 모니터는 가성비가 좋지 않음. $100로 sRGB 전체 지원, 높은 주사율의 휴대용 모니터를 구할 수 있음
     * Pi 400을 충동적으로 구매했지만, 메인 컴퓨터와 보조 컴퓨터가 고장 났을 때 유용했음
          + 전원 공급 USB 허브를 통해 하드 드라이브를 연결하면 실제 작업에 사용할 수 있음
          + 현재는 주로 Commodore 64로 사용 중임
     * 새로운 Pi 모니터를 몇 주간 사용 중이며, 과거의 Apple 디스플레이를 연상시킴
          + 주로 보조 디스플레이로 사용 중이며, 가족 캘린더를 벽에 걸어두기 위해 사용 예정임
          + 교육 및 백오피스에서 잘 팔릴 것이라고 생각함
     * 중간 크기의 PI 보드를 전자 프로젝트에 주로 사용하지만, 백업 머신이나 셀프 호스팅 프로젝트에는 미니 PC가 더 비용 효율적이고 조직적일 수 있음
     * Pi 500과 모니터, M.2 슬롯의 부재로 인해 저렴한 학생용 노트북이 개발 중일 것이라고 생각함
          + 모니터는 Pi 500에서 60% 전력으로 구동 가능
          + 내장 스피커와 오디오 라인을 모니터의 헤드폰/스피커 라인 아웃으로 분리하는 HDMI 기능 포함
          + 16GB 모델이 나올 예정
          + M.2 슬롯을 ""프리미엄"" 기능으로 추가
          + 기존 PCB가 노트북 케이스에 잘 맞음
          + 터치패드가 있는 노트북 케이스에 넣으면 약 $300-400의 노트북이 될 수 있음
          + 저전력, 저비용, 좋은 소프트웨어/하드웨어 생태계, 내장 GPIO가 시장 차별점이 될 것임
          + 다음 크리스마스까지 한두 단계만 더 나아가면 가능할 것임
     * 저렴한 PC/키보드 조합 아이디어가 좋으며, 과거 Amiga 500, C64, Atari ST의 향수를 불러일으킴
          + Mac Mini를 키보드 안에 넣는 형태로도 잘 작동할 것임
          + Pi 500에서 mini HDMI를 유지하고 M.2 커넥터를 추가하지 않은 이유를 이해하기 어려움
          + 보드에 NVMe 공간과 표시가 있지만 커넥터가 없음
"
"https://news.hada.io/topic?id=18220","Google Deepmind, 에이전틱 시대를 위한 새 AI 모델 Gemini 2.0 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Google Deepmind, 에이전틱 시대를 위한 새 AI 모델 Gemini 2.0 공개

     * Gemini 1.0은 텍스트, 비디오, 이미지, 오디오 및 코드 전반에 걸쳐 정보를 처리할 수 있는 다중모드 모델로 혁신을 이루었음
     * Gemini 2.0은 이 비전을 더욱 진전시켜 세계를 이해하고 여러 단계를 계획하며 작업을 수행할 수 있는 에이전틱 모델로 진화함
     * Gemini 2.0은 Google 검색과 같은 주요 제품에 통합되어, 더 복잡한 주제와 다단계 질문도 처리할 수 있는 능력을 제공함

Gemini 2.0 Flash의 주요 특징

     * 1.5 Flash의 성공을 기반으로 더욱 향상된 성능과 빠른 응답 시간을 제공
     * 1.5 Pro보다 2배 빠른 속도로 주요 벤치마크에서 더 우수한 성능
     * 이미지, 비디오, 오디오와 같은 멀티모달 입력뿐만 아니라 텍스트와 혼합된 이미지 생성 및 다국어 음성 합성도 지원
     * Google Search, 코드 실행, 사용자 정의 함수 등의 도구를 네이티브하게 호출 가능
     * 개발자와 신뢰할 수 있는 테스터들에게 우선 공개되며, 내년 초 더 넓은 범위로 출시될 예정임

연구 프로젝트 소개

     * Project Astra : 향상된 메모리 기능을 갖춘 범용 AI 어시스턴트
          + 다국어 대화, Google Search/Lens/Maps 활용, 10분 내외의 세션 메모리 등 기능 향상
          + Android 기기를 통해 신뢰할 수 있는 테스터로부터 피드백을 수집하며 발전 중
     * Project Mariner : 브라우저와 상호작용하며 복잡한 작업을 도울 수 있는 연구 프로토타입
          + WebVoyager 벤치마크에서 83.5%의 높은 성과 달성
          + 사용자가 최종 작업을 승인하기 전에 확인을 요청하는 안전 조치 내장
     * Jules : GitHub 워크플로우에 통합된 AI 기반 코딩 에이전트
          + 개발자가 이슈를 해결하고 계획을 실행하는 과정을 지원함

AI 에이전트의 응용 분야

     * 게임 개발사 Supercell과 협력하여 게임 내 AI 에이전트 활용을 탐구 중임
     * 로봇 공학 분야에서 Gemini 2.0의 공간 추론 능력을 적용하는 실험을 진행 중임

안전성과 책임감 있는 개발

     * 새로운 기술 개발에 있어 단계적이고 탐색적인 접근 방식을 채택
     * AI 지원 레드팀 접근 방식을 통해 위험 탐지와 완화 방안을 자동으로 생성
     * Project Mariner에서는 악의적인 프롬프트 주입 시도로부터 사용자를 보호하는 기능을 구현함
     * 사용자의 개인정보 보호를 위한 제어 기능과 세션 삭제 기능을 제공

향후 계획

     * Gemini 앱과 다른 Google 제품에 Gemini 2.0의 기능을 확장할 예정
     * AGI를 향한 발전 과정에서 안전성과 책임감을 최우선으로 고려할 것

        Hacker News 의견

     * 새로운 llm-gemini 플러그인이 Gemini 2.0 Flash 모델을 지원함. 터미널에서 사용 방법을 공유함
          + Gemini 모델은 Python 코드를 작성하고 실행할 수 있는 기능이 있음
          + 네트워크 호출은 불가능하지만, 다양한 접근을 시도함
          + 시각적 설명에 뛰어난 성능을 보임
     * 대기업은 방향 전환이 느리지만, 일단 방향을 잡으면 작은 기업이 할 수 없는 것을 이룰 수 있음
          + Google은 이 분야에서 많은 인재를 보유하고 있으며, 좋은 결과를 얻고 있음
          + LLM 모델의 제품화와 마케팅 능력은 아직 미지수지만, 성능은 뛰어남
     * Gemini 1.5 Pro를 대부분의 벤치마크에서 능가함
          + Google DeepMind는 LLM 시대에 적응 중임
          + TPU를 통해 하드웨어를 직접 제어함
     * 새로운 SDK가 발표됨. 현대적 모범 사례를 따르는 것으로 보임
          + OpenAI 호환 엔드포인트를 제공해 왔지만, 장기 지원 여부는 불확실했음
          + Kubernetes 클러스터와 GCP 버킷 설정을 권장함
     * Google의 새로운 릴리스가 즉시 사용 가능하여 기쁨
          + Gemini Flash 2.0이 Advent of Code 문제에서 Gemini Pro 1.5를 능가함
          + Flash 2.0이 컴파일 오류를 수정함
     * ""agentic""이라는 단어가 불쾌하게 느껴짐
          + ""versatile"", ""multifaceted"", ""autonomous"" 같은 단어가 더 적절함
     * Gemini 2 모델은 오디오 및 이미지 생성 기능을 지원함
          + 이미지 생성은 1월에 일반적으로 제공될 예정임
          + 컴퓨터 비전 작업이 LLM을 통해 가능해질 것임
     * Gemini 2가 4o를 챗봇 아레나에서 앞서고 있음
     * ""agentic""이라는 단어가 부적절하다고 생각함
          + 대부분 시스템 프롬프트와 도구로 구성된 파이프라인임
     * iPhone의 Safari 브라우저에서 Google AI Studio를 통해 Gemini 2.0 Flash에 접근함
          + 카메라를 통해 본 것을 정확히 식별함
          + 영어와 일본어 텍스트를 읽을 수 있음
          + 피아노 음을 시각적으로 식별했지만, 소리만으로는 불가능했음
"
"https://news.hada.io/topic?id=18142","Show GN: Voice-Pro – 음성인식, 번역, 음성합성을 지원하는 Gradio WebUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: Voice-Pro – 음성인식, 번역, 음성합성을 지원하는 Gradio WebUI

   Voice-Pro는 음성인식, 번역, 음성합성을 지원하는 Gradio WebUI 입니다.

   주요 기능:
     * 제로샷 보이스 클로닝. 15초 분량의 음성 샘플만 있으면 됩니다. 50인 이상의 셀럽 보이스 제공
     * YouTube 오디오 다운로드
     * 보컬 분리
     * 다국어 텍스트-음성 변환 (Edge-TTS, F5-TTS)
     * 다국어 번역
     * 다양한 Whisper 엔진 지원 (Whisper, Faster-Whisper, Whisper-Timestamped)

   비디오 데모:
     * Voice-Pro 사용 튜토리얼: https://youtu.be/z8g8LMhoh_o
     * Voice-Cloning 팟캐스트 제작 데모: https://youtu.be/Wfo7vQCD4no
     * 데모 및 샘플영상들: https://youtube.com/playlist/?list=PLwx5dnMDVC9Y7dAjm9r26CZUw1uU5VIeq

   GitHub:
   https://github.com/abus-aikorea/voice-pro

   한국분이 만드셨나봐요
"
"https://news.hada.io/topic?id=18129","Reacteact 19

  19.0.0 (2024년 12월 5일)

    새로운 기능

      React

     * Actions: startTransition은 이제 비동기 함수를 수용할 수 있음. 이 함수들은 ""Actions""라 불리며, 상태를 백그라운드에서 업데이트하고 UI를 한 번에 커밋함. Actions는 비동기 요청과 같은 부작용을 수행할 수 있으며, Transition이 완료되기 전에 작업을 기다림.
     * useActionState: Transition 내에서 Actions를 정렬하고 상태에 접근할 수 있는 새로운 훅임. 초기 상태와 reducer를 받아들임.
     * useOptimistic: Transition이 진행 중일 때 상태를 업데이트하는 새로운 훅임. Transition이 완료되면 상태가 새로운 값으로 업데이트됨.
     * use: 렌더링 시 리소스를 읽을 수 있는 새로운 API임. Promise나 Context를 수용하며, Promise가 제공되면 값이 해결될 때까지 중단됨.
     * ref를 prop으로 사용: forwardRef가 필요 없이 ref를 prop으로 사용할 수 있음.
     * Suspense 형제 프리워밍: 컴포넌트가 중단되면 React는 가장 가까운 Suspense 경계의 대체를 즉시 커밋함.

      React DOM 클라이언트

     * <form> action prop: Form Actions는 자동으로 폼을 관리하고 useFormStatus와 통합함. 성공 시 폼을 자동으로 재설정함.
     * 문서 메타데이터 지원: 문서 메타데이터 태그를 컴포넌트에서 네이티브로 렌더링할 수 있음.
     * 스타일시트 지원: Suspense 경계의 콘텐츠를 공개하기 전에 클라이언트의 <head>에 스타일시트를 삽입함.
     * 비동기 스크립트 지원: 컴포넌트 트리 어디에서나 비동기 스크립트를 렌더링할 수 있음.

      React DOM 서버

     * prerender 및 prerenderToNodeStream API 추가: 정적 사이트 생성을 위한 API로, Node.js 스트림 및 웹 스트림과 같은 스트리밍 환경에서 작동하도록 설계됨.

      React 서버 컴포넌트

     * RSC 기능: 지시문, 서버 컴포넌트, 서버 함수가 안정화됨. 서버 컴포넌트를 포함한 라이브러리는 이제 React 19를 피어 종속성으로 타겟팅할 수 있음.

    폐기 예정

     * element.ref 접근: element.props.ref를 선호하여 element.ref 접근을 폐기함.
     * react-test-renderer: React 19에서는 react-test-renderer가 폐기 경고를 기록하며 웹 사용을 위해 동시 렌더링으로 전환됨.

    주요 변경 사항

      React

     * 새로운 JSX 변환 필수: 번들 크기를 개선하고 React를 가져오지 않고 JSX를 사용할 수 있도록 하는 새로운 JSX 변환이 필요함.
     * 렌더링 오류가 다시 던져지지 않음: 오류가 Error Boundary에 의해 잡히지 않으면 window.reportError에 보고됨.
     * propTypes 제거: propTypes 사용이 조용히 무시됨. TypeScript로 마이그레이션을 권장함.
     * 함수의 defaultProps 제거: ES6 기본 매개변수를 대신 사용할 수 있음.
     * 문자열 refs 제거: 문자열 refs 사용을 ref 콜백으로 마이그레이션해야 함.

      React DOM

     * react-dom/test-utils 제거: act를 react-dom/test-utils에서 react로 이동함. 다른 유틸리티는 제거됨.
     * ReactDOM.render, ReactDOM.hydrate 제거: 동시 렌더링을 위한 ReactDOM.createRoot 및 ReactDOM.hydrateRoot로 대체됨.

    주목할 만한 변경 사항

      React

     * <Context>를 제공자로 사용: <Context.Provider> 대신 <Context>를 제공자로 렌더링할 수 있음.
     * 커스텀 엘리먼트 지원: React 19는 모든 커스텀 엘리먼트 테스트를 통과함.
     * StrictMode 변경 사항: useMemo와 useCallback은 첫 번째 렌더링의 메모이제이션 결과를 재사용함.

      React DOM

     * 하이드레이션 오류에 대한 차이점: 불일치가 발생할 경우, React 19는 불일치된 콘텐츠의 차이점을 포함한 단일 오류를 기록함.

    TypeScript 변경 사항

     * 암시적 반환 금지: refs는 이제 정리 함수만 수용함. 암시적 반환은 오류를 발생시킴.
     * useRef의 초기 인수 필요: 초기 인수는 이제 필수임.
     * 엄격한 ReactElement 타이핑: React 요소의 props는 이제 any 대신 unknown으로 기본 설정됨.

        Hacker News 의견

     * React를 사용하여 확장 가능한 앱을 구축하는 것이 가능하고 재미있다고 느끼는 의견이 있음
          + TS 지원과 커뮤니티 라이브러리 덕분에 쉽게 구축하고 확장할 수 있다고 생각함
          + 새로운 기능들이 사람들을 겁먹게 하는 이유를 이해하지 못함
          + Jetpack Compose와 Swift UI가 React에서 영감을 받았다는 의견이 있음
          + 과거에 jQuery나 plain JS로 대규모 웹 앱을 구축하는 것이 즐거웠는지에 대한 의문이 있음
     * React의 새로운 릴리스에 대해 긍정적인 의견을 가지고 있으나, 초보자가 시작하기 어려울 수 있다는 우려가 있음
          + React는 여전히 뛰어난 프레임워크이며 이번 릴리스는 개선점이 있다고 생각함
          + 비판은 React 자체보다는 전반적인 프론트엔드 개발에 대한 것임
     * 클라이언트 사이드 프레임워크의 복잡성이 증가하고 있다는 의견이 있음
          + 백엔드, 프론트엔드, DevOps 스택 등 모든 곳에서 복잡성이 증가하고 있다고 느끼고 있음
     * 새로운 릴리스에서 'ref as a prop' 기능이 추가되어 forwardRef가 필요 없게 된 점을 긍정적으로 평가함
     * Redux 대신 Recoil 클론인 Jotai를 언급하며, React 19와 호환 가능하다고 언급함
          + 프론트엔드 복잡성으로 인해 다른 상태 관리자가 방해가 될 수 있다고 생각함
     * 'use' API의 이름 변경을 희망하는 의견이 있음
          + React hooks를 처음 접하는 사람들이 혼란스러울 수 있다고 생각함
     * 병렬 서스펜스 문제 해결을 위해 릴리스를 지연시킨 점에 대해 긍정적으로 평가함
     * 기존 내장 훅을 기반으로 useActionState 훅을 구축할 수 있는지에 대한 의문이 있음
     * 표준 웹 기술 사용을 장려하는 기능과 삶의 질을 개선하는 기능이 추가된 점을 긍정적으로 평가함
          + 서스펜스 트리거링이 여전히 프레임워크 지원이 필요하다는 점에 실망함
          + TanStack Query를 통해 서스펜스 메커니즘을 이해하려고 했으나 성공하지 못함
"
"https://news.hada.io/topic?id=18204","Llama 3.3 70B로 이제 GPT-4급 모델을 노트북에서 실행가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Llama 3.3 70B로 이제 GPT-4급 모델을 노트북에서 실행가능

     * GPT-4급 성능의 Meta의 Llama 3.3 70B 모델을 일반 노트북(64GB MacBook Pro M2)에서 실행할 수 있게 됨
     * 2023년 3월 LLaMA 출시 이후 약 20개월 만에 이룬 큰 발전
     * Ollama를 통해 42GB의 모델 데이터를 로컬에 다운로드하여 실행함 (애플의 MLX로도 실행 가능)
          + 64GB RAM이 필요하며 실행 시 메모리 사용량이 높으므로 다른 리소스 집중적인 앱은 종료 권장
     * 성능 및 벤치마크
          + LiveBench 벤치마크에서 상위 19위, Claude 3 Opus보다 높은 성능을 보이며 GPT-4 Turbo와 유사한 수준
          + 특히 명령어 이해(Instruction Following) 평가에서 최상위 성능을 기록함
          + 텍스트 생성, 코드 작성, SVG 이미지 생성 등 다양한 작업 수행 가능
     * 개인 기기에서도 점점 더 강력한 모델을 실행할 수 있게 됨
     * 주목할 만한 다른 로컬 구동 LLM 모델들
          + Qwen2.5-Coder-32B
               o 알리바바 Qwen 연구팀이 개발한 모델로 Apache 2.0 라이선스 기반으로 공개됨
               o 코드 생성 작업에서 뛰어난 성능을 보여주며, 자유롭게 사용 가능
               o 오픈소스 라이선스로 개발자들에게 더욱 의미 있는 도구
          + QwQ
               o OpenAI의 o1 시리즈와 유사한 사고 연쇄(chain-of-thought) 패턴을 구현
               o 복잡한 문제를 단계적으로 해결 가능
               o 로컬 환경에서도 원활히 실행되는 점이 인상적
          + Meta의 Llama 3.2
               o 1B와 3B 크기의 모델은 라즈베리 파이와 같은 소형 컴퓨터에서도 실행 가능
               o 크기 대비 뛰어난 성능을 제공하며, 이미지 처리 능력을 갖춘 11B와 90B 크기의 멀티모달 비전 모델도 포함
               o 작은 모델부터 대규모 모델까지 다양한 선택지가 있음
          + 이러한 모델들은 LLM 기술이 서버급 하드웨어를 벗어나 일반 개인용 컴퓨터에서도 실행 가능하다는 점을 보여줌
          + 특히 오픈소스 모델들의 발전으로 개발자들이 자유롭게 실험하고 응용할 수 있는 환경이 확장되고 있음
     * 향후 전망
          + 다중 모달리티와 모델 효율성 측면에서 큰 발전이 예상됨
          + AGI보다는 실용적이고 효율적인 작업 수행에 초점을 맞춘 발전이 지속될 것으로 전망됨
          + 현재 모델들만으로도 향후 몇 년간 생산적인 작업이 가능할 것으로 예상

   M1 Max 64GB 에서도 돌아가긴 하겠죠?

   아예 컴퓨터 관심 없는 분들이면 몰라도 이쪽 분들에게는 64기가정도는 기본이라고 생각했는데..

   데이터 많이 다루는 경우가 아니면 16이나 64나 크게 체감되는 영역은 아니라서요

   램 8기가로도 개발 잘 합니다. 모든 작업에 그렇게 메모리가 많이 필요한게 아니에요

   64GB 램이면 접근성 높은편인거 같아요.
   요즘 노트북용 DDR5 16GB 6만원밖에 안해요.
   80만원대 64GB 노트북도 많습니다.

   맥64램은 vram 64랑 같은 의미라서 사실상 300부터 출발이에요

   M시리즈 맥은 램을 cpu, gpu 가 공유하기 때문에 gpu 램이 늘어나는 효과를 가집니다.

   원 글을 보고왔더니 제목이 이해가 그나마 가네요. 작성자가 내가 가지고 있는 내 노트북에서 Llama 모델을 돌렸음! 이라는 글이니까요.. 허허허

   다른 프로그램 구동까지 고려해서 64GB인걸까요? 소비자급 내지는 개인용 PC라고 부르기에 현실적이지 않은 사양이라고 생각합니다

   이런 맥락에서 개인용 컴퓨터는 보통 'B2C 시장에서 판매중이고 살 수 있음(가격과 관계 없이)' 정도더라고요. '모두가 쓸 수 있음' 과는 거리가 멀어보였습니다

   상황은 다양합니다. 저도 개인용으로 맥북프로 96GB을 쓰는데 LLM 관련 개발이 아니더라도 Swap이 자주 차곤 합니다

   64GB 램이 일반 노트북...?? ㅠㅠ

   소비자급 하드웨어라고 하는게 조금 더 알맞겠네요
"
"https://news.hada.io/topic?id=18258","샌프란시스코 아파트에서 발견된 OpenAI 내부고발자 사망 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  샌프란시스코 아파트에서 발견된 OpenAI 내부고발자 사망 사건

  OpenAI 내부고발자 사망 사건

     * 사건 개요
          + OpenAI의 전 연구원인 수치르 발라지(Suchir Balaji)가 샌프란시스코 아파트에서 사망한 채 발견됨.
          + 발라지는 OpenAI의 ChatGPT 개발 과정에서 저작권법 위반을 주장한 내부고발자로 알려져 있음.
          + 그의 사망은 자살로 판명되었으며, 타살의 증거는 발견되지 않음.
     * 발라지의 주장
          + 발라지는 OpenAI가 ChatGPT를 개발하는 과정에서 미국 저작권법을 위반했다고 주장함.
          + 그는 OpenAI가 인터넷 데이터를 무단으로 사용하여 프로그램을 훈련시켰다고 비판함.
          + 이러한 주장은 OpenAI에 대한 여러 소송의 핵심 증거로 사용될 예정이었음.
     * OpenAI와의 법적 분쟁
          + OpenAI는 ChatGPT의 개발 과정에서 저작권을 침해했다는 이유로 여러 언론사로부터 소송을 당함.
          + OpenAI는 이러한 주장에 대해 ""공정 사용"" 법률에 따라 모든 작업이 합법적이라고 반박함.
     * 발라지의 배경
          + 발라지는 쿠퍼티노에서 성장하여 UC 버클리에서 컴퓨터 과학을 전공함.
          + 인공지능이 사회에 긍정적인 영향을 미칠 수 있다고 믿었으나, OpenAI에서의 경험 이후로 그 견해가 바뀜.
     * 인공지능의 영향
          + ChatGPT의 출시는 인공지능 산업에 큰 영향을 미쳤으며, 많은 기업들이 이 분야에 뛰어들게 됨.
          + OpenAI의 가치는 지난 1년 동안 거의 두 배로 증가함.
     * 기타 정보
          + 발라지의 사망 이후 그의 어머니는 사생활 보호를 요청함.
          + 발라지는 OpenAI에 대한 소송에서 중요한 문서를 보유한 인물로 지목됨.

        Hacker News 의견

     * 일부 댓글이 냉담하다는 의견이 있음
          + Suchir는 26세로 Berkeley를 졸업한 지 3년밖에 되지 않았음
          + 그의 개인 사이트 링크가 제공됨
          + 세계 최대 기업 중 하나의 부당함에 맞선 그의 용기가 대단하다고 생각함
          + 그의 가족에게 애도를 표하며, 그는 재능 있는 엔지니어였음
          + 경쟁 프로그래밍 상을 받은 경력이 LinkedIn에 있음
          + 다른 사람들이 내부고발자 정의나 암살 이론에 대해 논하기 전에, 그의 입장에서 그런 글이 쓰여지길 원하는지 생각해보길 권장함
     * 내부고발자는 주요 문서를 ""데드맨 스위치"" 서비스에 보관해야 한다는 의견이 있음
          + 갑작스러운 사망 시 여러 뉴스 기관에 증언/문서를 공개할 수 있도록 해야 함
          + 정기적으로 자신의 정신 상태를 증명하는 공개 영상을 게시해야 함
     * Suchir의 죽음은 끔찍하고 슬픈 손실이라는 의견이 있음
     * Suchir Balaji가 작성한 ""생성 AI가 공정 사용으로 인정받는 시점""에 대한 링크가 제공됨
     * ""내부고발자""라는 단어는 일반적으로 조직에 대한 알려지지 않은 사실을 폭로한 사람을 의미함
          + 이 경우 그는 OpenAI를 비판한 전직 직원임
          + 그가 가진 사실은 이미 널리 알려져 있었고, 몇 달 전에 시작된 소송의 주제였음
          + ""내부고발자""라는 단어 사용은 그의 죽음에 뭔가 수상한 점이 있다는 암시로 보임
     * 그의 가족에게 애도를 표하며, 그는 사려 깊고 원칙 있는 사람이었다는 의견이 있음
     * OpenAI 직원의 행동에 대해 자연스럽게 추측이 이루어짐
          + 사직, 발언, 자살 등 다양한 사건에 대해 추측이 이루어짐
          + 수천 명의 OpenAI 직원이 일반 인구와 같은 조건에 처해 있으므로 과도한 추측은 피해야 함
     * Mercury News의 기사에 포함된 지도에 대한 의문이 제기됨
          + ""San Francisco, CA""로 표시된 지도가 기사와 관련이 없음
          + 비지역 독자가 SF의 위치를 혼동할 수 있음
     * Hacker News의 댓글과 Reddit의 댓글을 비교하는 의견이 있음
          + Reddit의 극단적이고 조정되지 않은 수사가 우려됨
          + 미국에서 가장 많이 방문하는 사이트 중 하나가 인구의 일부를 급진화시키고 있다는 우려가 있음
     * NYT 기사에 따르면 OpenAI가 ChatGPT 출시 전에 GPT-4 개발을 시작했다는 점이 흥미롭다는 의견이 있음
          + 초기 GPT-2/3 결과에 확신을 가졌음
          + 2022년 초에 Balaji가 새로운 프로젝트인 GPT-4를 위해 디지털 데이터를 수집하기 시작함
"
"https://news.hada.io/topic?id=18200","음악을 지키고, 아카이브를 지키자!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          음악을 지키고, 아카이브를 지키자!

     * 500명이 넘는 음악가들이 주요 음반사들이 인터넷 아카이브를 파괴하려는 소송을 중단할 것을 요구하며 목소리를 내고 있음. 이들은 음악 산업이 예술가들의 이익과 일치하는 행동을 취할 것을 촉구하고 있음.
     * 공정성과 보존을 위한 음악가들의 공개 서한
          + 음악 산업은 주주 이익이 아닌 음악가들의 예술적 유산과 미래를 지원해야 함. 주요 음반사들의 부당한 소송에 반대하며, 인터넷 아카이브는 중요한 비영리 문화 기관임.
          + 2031년까지 음악 산업 수익이 1,000억 달러를 초과할 것으로 예상되지만, 평균적인 음악가는 생존에 어려움을 겪고 있음. 투어 비용과 스트리밍 수익 모델의 불공정성으로 인해 음악가들은 어려움을 겪고 있음.
          + 음악 산업은 더 이상 어려움을 겪고 있지 않음. 오직 음악가들만이 어려움을 겪고 있음.
     * 다양한 음악 유산 보호
          + 음악 산업은 역사를 보존할 도덕적 의무가 있음. 그러나 디지털 보존 없이는 오래된 기록들이 사라질 위험에 처해 있음. 인터넷 아카이브의 프로젝트가 수많은 기록을 구했지만, 주요 음반사들은 소송으로 대응함.
          + 음악가와 음반사는 인터넷 아카이브와 같은 문화적 수호자와 협력해야 함.
     * 현역 음악가에 투자
          + 음악 권리는 400억 달러 규모의 사업이지만, 그 수익의 대부분은 사모펀드가 차지하고 있음. 음악가들은 수익의 12%만 가져가고 있음.
          + 투어 수익이 증가했지만, 음악가들은 여전히 손해를 보고 있음. 투어 비용이 증가하면서 음악가들은 어려움을 겪고 있음.
     * 스트리밍 서비스의 공정한 보상
          + 음악 산업은 음악가보다 대기업을 우선시하고 있음. 정부가 스트리밍 플랫폼에 적절한 세금을 부과하도록 로비스트 조직이 힘을 쏟아야 함.
          + 공정한 스트리밍 보상을 위한 법안이 도입되었으며, 많은 음악가들이 이에 동참하고 있음.
     * 음악 산업의 지속 가능한 미래
          + 음악 산업은 음악가 없이는 생존할 수 없음. 음악가의 미래와 작품의 장기 보존을 위해 즉각적이고 지속적인 조치가 필요함.

        Hacker News 의견

     * Relisten과 같은 오픈 소스 프로젝트는 Grateful Dead와 같은 아티스트의 합법적으로 녹음된 콘서트를 장기 저장하기 위해 Internet Archive에 의존함. 이는 수백만 음악 팬에게 귀중한 공공 서비스이며 미국 역사와 문화에 큰 도움이 됨
     * 저작권 문제는 멈춰야 함. 이는 훌륭한 음악이 만들어지거나 공개되는 것을 방해함. 일부 음악가는 로열티를 받지만 대부분은 스트리밍에서 거의 수익을 얻지 못하고 음반 판매에서도 간신히 수익을 냄. 모든 것을 샘플링하고 리믹스할 수 있다면 아무것도 얻지 않아도 괜찮음
     * 밴드가 CD를 완벽하게 마스터하여 제작하고 스트리밍하는 것이 일반적인 생각임. 그러나 Fleetwood Mac과 같은 실제 밴드는 콘서트에서 매번 다른 방식으로 노래를 연주함. 다양한 버전의 노래를 듣는 것이 신선하고 재미있음. 밴드가 더 나은 노래의 여러 ""라디오 편집""을 제작하면 판매가 증가할 것이라고 생각함
     * 음악가의 미래 수입은 녹음된 음악이 아닌 라이브 공연에서 나올 것임. 녹음된 음악은 라이브 공연을 위한 마케팅 수단이 될 것임. Taylor Swift와 같은 똑똑한 음악가들은 이를 이미 이해하고 있음
     * 콘서트에서 음악가에게 어떻게 지원할 수 있는지 물어보면 CD 대신 티셔츠를 사라고 함. 이는 이상한 일임
     * 로비스트 조직은 독점적인 기업 플레이어와 함께하기보다는 정부가 스트리밍 플랫폼에 적절한 세금을 부과하여 아티스트를 지원하도록 해야 함. 스트리밍 플랫폼과 레코드 레이블 간의 계약이 음악가에게 충분한 수익을 주지 않는다면, 계약을 재협상해야 함. 음악가가 협상할 힘이 없다면 정부가 이를 해결해야 함. 세금 부과로 로열티가 해야 할 일을 대신하는 것은 이상함
     * 많은 넷레이블이 Internet Archive에 릴리스를 호스팅하고 있음. 일부는 2000년대 초까지 거슬러 올라감
     * 오늘날 우리가 만드는 음악은 가치가 있으며, 산업은 이를 그렇게 대우하고 스트림에 대한 공정한 로열티를 지불해야 함. 그러나 글로벌 자본주의에서는 돈의 양이 더 이상 다른 사람에게 가져다주는 가치에 비례하지 않음. 대신 기존 권력 구조를 얼마나 효과적으로 성장시키는지에 비례함. 음악 산업과 같은 대기업은 협상하지 말고 직접 음악을 만들고 판매해야 함
     * 음악가의 저작권을 침해하지 않고 타협할 수 있는 방법이 있는지 궁금함
     * Internet Archive가 패배할 경우 어떤 일이 발생할지 궁금함
"
"https://news.hada.io/topic?id=18202","gARM: ARM64에 특화된 고성능 Go 컴파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      gARM: ARM64에 특화된 고성능 Go 컴파일러

   Go 언어의 단순성과 저수준 제어 및 고성능을 결합한 ARM64 어셈블리 컴파일러.
   ARM 아키텍처에 특화된 최적화, 하드웨어 수준 튜닝, 보안 제어, 디버깅 도구 등을 제공.
     * Go 컴파일러와 ARM 어셈블러들은 많지만 ARM의 고유한 기능을 활용하는 도구는 부족.
          + ARM의 유연한 산술 명령어의 두 번째 피연산자
          + 조건부 실행 기능
          + 벡터화를 위한 NEON SIMD 연산
          + 하드웨어 나누기 및 곱셈-누적 명령어
     * ARM 아키텍처의 증가하는 지배력(Apple M 시리즈, AWS Graviton, 모바일 장치, 임베디드 시스템)으로 인해 ARM64에 특화된 최적화 도구의 중요성이 커지고 있습니다.

  gARM

     * 기본적으로 Generational GC를 사용하여 컴파일.
     * GC 알고리즘 선택 또는 GC 미사용 옵션을 제공.
     * ARM 서버에서 고성능 컴퓨팅을 지원합니다 (ARM64에서 Go 성능 5배 향상 목표).
     * 성능이 중요한 크로스 플랫폼 모바일/임베디드 시스템에 적합합니다.
     * ARM 인스턴스에서 실행되는 클라우드 애플리케이션에 적합합니다.
     * (AST) -> (SSA) -> (IR) -> (Optimizer) -> (Assembly)

   디버거인 Delve가 바로 붙을지 궁금하네요.
   x86에서 aarch64 넘어갈때도 한참 걸렸는데...
"
"https://news.hada.io/topic?id=18222","Gemini 2.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Gemini 2.0 출시

   Gemini 2.0: 개발자를 위한 차세대 AI 모델
     * Google에서 개발한 최첨단 AI 모델로, 개발자들이 AI의 미래를 구축할 수 있도록 지원합니다.
     * Gemini 1.0 출시 이후 수백만 명의 개발자가 Google AI Studio 및 Vertex AI를 통해 109개 언어로 Gemini를 사용하고 있습니다.
     * Gemini 2.0 Flash Experimental을 통해 더욱 몰입감 있고 상호작용적인 애플리케이션 개발이 가능하며, 개발자를 대신하여 작업을 수행하는 새로운 코딩 에이전트를 제공합니다.

  Gemini 2.0 Flash

     * Gemini 1.5 Flash의 성공을 기반으로 구축된 모델로, 1.5 Pro보다 2배 빠르면서도 강력한 성능을 제공합니다.
     * 새로운 멀티모달 출력 기능과 기본 도구 사용 기능을 제공합니다.
     * 실시간 오디오 및 비디오 스트리밍을 통해 동적인 애플리케이션을 구축할 수 있는 멀티모달 라이브 API를 도입합니다.
     * 개발자는 Google AI Studio 및 Vertex AI에서 실험 단계의 Gemini 2.0 Flash를 테스트하고 탐색할 수 있으며, 내년 초에 일반 출시될 예정입니다.

    주요 기능:

    1. 향상된 성능:
          + Gemini 1.5 Pro보다 강력하면서도 Flash 모델의 속도와 효율성을 유지합니다.
          + 멀티모달, 텍스트, 코드, 비디오, 공간 이해 및 추론 성능이 향상되었습니다.
          + 특히, 공간 이해 능력 향상으로 복잡한 이미지에서 작은 객체의 경계 상자 생성 정확도가 향상되었습니다.
    2. 새로운 출력 방식:
          + 단일 API 호출을 통해 텍스트, 오디오, 이미지를 포함하는 통합된 응답을 생성할 수 있습니다.
          + SynthID 보이지 않는 워터마크를 모든 이미지 및 오디오 출력에 적용하여 오정보 및 오귀인 문제를 줄입니다.
          + 다국어 네이티브 오디오 출력: 8가지 고품질 음성, 다양한 언어 및 억양을 선택하여 텍스트 음성 변환 오디오 출력을 세밀하게 제어할 수 있습니다.
          + 네이티브 이미지 출력: 이미지를 생성하고, 대화형 멀티턴 편집을 지원하여 이전 출력을 기반으로 이미지를 개선할 수 있습니다. 텍스트와 이미지를 혼합하여 레시피와 같은 멀티모달 콘텐츠를 생성하는 데 유용합니다.
    3. 기본 도구 사용:
          + 에이전트 경험 구축을 위한 기본적인 기능인 도구 사용 능력을 갖추고 있습니다.
          + Google 검색 및 코드 실행과 같은 도구를 기본적으로 호출할 수 있으며, 사용자 정의 함수 호출을 통해 타사 기능도 사용할 수 있습니다.
          + Google 검색을 도구로 사용하면 더 사실적이고 포괄적인 답변을 제공하고 게시자에게 트래픽을 증가시킵니다.
          + 여러 검색을 병렬로 실행하여 여러 소스에서 관련 정보를 동시에 찾아 정확도를 높일 수 있습니다.
    4. 멀티모달 라이브 API:
          + 카메라 또는 화면에서 오디오 및 비디오 스트리밍 입력을 사용하여 실시간 멀티모달 애플리케이션을 구축할 수 있습니다.
          + 중단 및 음성 활동 감지와 같은 자연스러운 대화 패턴을 지원합니다.
          + 단일 API 호출로 복잡한 사용 사례를 해결하기 위해 여러 도구를 통합할 수 있습니다.

  AI 코드 지원의 발전

     * AI 코드 지원이 단순한 코드 검색에서 개발자 워크플로우에 내장된 AI 기반 도우미로 빠르게 진화하고 있습니다.
     * Gemini 2.0을 활용한 코딩 에이전트는 개발자를 대신하여 작업을 수행할 수 있습니다.
     * 코드 실행 도구를 갖춘 2.0 Flash는 실제 소프트웨어 엔지니어링 작업에서 에이전트 성능을 테스트하는 SWE-bench Verified에서 51.8%의 성공률을 달성했습니다.

  줄스(Jules): AI 기반 코드 에이전트

     * Python 및 Javascript 코딩 작업을 처리하는 실험적인 AI 기반 코드 에이전트입니다.
     * GitHub 워크플로우와 통합되어 비동기적으로 작동하며, 버그 수정 및 기타 시간 소모적인 작업을 처리합니다.
     * 줄스는 문제 해결을 위한 포괄적인 다단계 계획을 수립하고, 여러 파일을 효율적으로 수정하며, GitHub에 직접 수정 사항을 적용하기 위한 풀 리퀘스트를 준비합니다.

    줄스의 장점:

     * 생산성 향상: 비동기 코딩을 통해 문제 및 코딩 작업을 줄스에게 할당하여 효율성을 높입니다.
     * 진행 상황 추적: 실시간 업데이트를 통해 정보를 얻고 주의가 필요한 작업을 우선 순위를 정할 수 있습니다.
     * 개발자 제어: 줄스가 생성한 계획을 검토하고 피드백을 제공하거나 조정을 요청할 수 있습니다. 줄스가 작성한 코드를 검토하고 프로젝트에 병합할 수 있습니다.
     * 현재 신뢰할 수 있는 테스터 그룹에 제공되며, 2025년 초에 다른 개발자에게도 제공될 예정입니다.

  Colab의 데이터 과학 에이전트

     * 데이터 세트를 업로드하고 몇 분 안에 인사이트를 얻을 수 있는 실험적인 데이터 과학 에이전트를 labs.google/code에서 제공합니다.
     * Colab에 동일한 에이전트 기능을 통합하여 Gemini 2.0을 사용합니다.
     * 자연어 지침을 통해 분석 목표를 설명하면 자동으로 노트북이 생성되어 연구 및 데이터 분석을 가속화할 수 있습니다.
     * 신뢰할 수 있는 테스터 프로그램을 통해 조기 액세스를 제공하며, 2025년 상반기에 Colab 사용자에게 더 광범위하게 출시될 예정입니다.

  개발자 지원

     * Gemini 2.0 모델은 개발자가 더 빠르고 쉽게 강력한 AI 앱을 구축할 수 있도록 지원합니다.
     * Android Studio, Chrome DevTools 및 Firebase와 같은 플랫폼에 Gemini 2.0을 통합할 예정입니다.
     * Visual Studio Code, IntelliJ, PyCharm 등 인기 있는 IDE에서 향상된 코딩 지원 기능을 위해 Gemini Code Assist에서 Gemini 2.0 Flash를 사용할 수 있습니다.

   지금 Google AI Studio와 Vertex AI에서 사용이 가능한 것 같네요.

   모델 성능과 라이브 E2E 음성의 지연시간이 인상적입니다.
"
"https://news.hada.io/topic?id=18227","PeerTube 모바일 앱: 주의력을 배려하며 영상 발견하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PeerTube 모바일 앱: 주의력을 배려하며 영상 발견하기

    PeerTube 모바일 앱: 주의력을 배려하며 비디오 발견하기

     * Framasoft는 Android와 iOS용 PeerTube 모바일 앱의 첫 번째 버전을 출시함. 이 앱은 사용자의 주의력과 데이터를 착취하지 않으면서 더 많은 사람들이 비디오를 보고 플랫폼을 발견할 수 있도록 설계됨.

      PeerTube 성장의 또 다른 단계

     * Framasoft는 비영리 단체로, PeerTube 소프트웨어를 7년 동안 개발하고 유지해왔음. PeerTube는 YouTube와 Twitch에 대한 급진적인 대안으로, 커뮤니티의 기여와 소규모 자금으로 개발됨.
     * 모바일 기기에서 비디오와 라이브 스트리밍 시청이 증가함에 따라, PeerTube 네트워크의 청중을 넓히기 위해 모바일 클라이언트를 개발하는 것이 다음 단계였음.

      자금 조달 및 도움 받기

     * 새로운 직원을 고용하는 것은 큰 결정이었으며, Zenika와 협력하여 모바일 전략에 대한 도움을 받음. Flutter를 사용하여 앱을 개발하고, 사용자 경험을 개선하기 위해 디자인을 최적화함.
     * 첫 번째 릴리스에서는 ""관람자 사용 사례""에 초점을 맞추어 비디오 탐색과 시청 기능을 제공함.

      Fediverse의 복잡성을 단순화하기

     * 모바일 클라이언트는 PeerTube 경험을 단순화할 수 있는 기회를 제공함. PeerTube는 중앙 집중식 플랫폼이 아닌 비디오 플랫폼 네트워크로, 각 플랫폼은 자체 규칙과 초점을 가짐.
     * 모바일 앱에서는 로컬 계정을 생성하여 사용자가 플랫폼을 찾지 않고도 비디오 콘텐츠를 즐길 수 있도록 함.

      어두운 패턴을 배제한 디자인

     * PeerTube와 모바일 앱은 사용자의 주의를 끌거나 광고를 강요하지 않음. 독성 디자인 패턴을 배제하고 사용자 친화적인 인터페이스를 제공함.

      제한된 연합 해제

     * Google PlayStore와 Apple AppStore에 맞추기 위해 제한된 ""허용 목록""을 사용함. F-Droid와 직접 다운로드 apk에서는 모든 PeerTube 플랫폼을 사용할 수 있음.

      PeerTube 앱의 향후 계획

     * 앱의 첫 번째 버전을 출시하고 점진적으로 개선할 계획임. 2024년 초에는 디자인 보고서와 문서를 공개하고, 백그라운드에서 비디오 재생, 계정 로그인, 댓글 기능 등을 추가할 예정임.

      관심, 공유 및 기여

     * 사용자가 앱을 다운로드하고 사용하며 친구들과 공유하기를 희망함. 앱은 PeerTube 콘텐츠를 홍보하고, 콘텐츠 제작자에게 더 많은 청중을 제공하는 새로운 관문이 될 것임.
     * 버그 보고, 코드 기여, 인터페이스 번역 등을 통해 기여할 수 있음. 현재 앱은 영어와 프랑스어로만 제공되며, 다른 언어 번역이 환영됨.

        Hacker News 의견

     * Framasoft의 프로젝트에 대한 큰 팬이며, iOS App Store의 제한으로 인해 사전 승인된 목록에 없는 인스턴스를 탐색할 수 없게 되어 아쉬움
     * PeerTube와 Framasoft의 제품을 좋아하지만, 대부분의 연합 소프트웨어처럼 브랜드 및 마케팅 문제로 성장에 어려움을 겪고 있음
          + Mastodon도 비슷한 문제를 겪었으며, 사이트 개편 후 ""toots"" 같은 용어를 없앴음
          + 교육이 목표라고 하지만, 교육하려면 성장이 필요함
     * 랜딩 페이지에 앱 다운로드 버튼이 없음
          + 회사 정보, 다른 행위자들의 문제점, 자금 요청에 대한 정보는 많지만, 플랫폼 탐색 방법이나 다운로드 방법에 대한 비디오가 없음
          + 사용자용으로 만들어지지 않은 것 같음
     * 사용자 정의 스트림 추가를 막는 특정 App Store 규칙이 있는지 궁금함
          + Mastodon 클라이언트에 인스턴스를 추가하거나 Podcast 앱에 RSS 피드를 추가하는 것과 기능적으로 동일하게 들림
     * PeerTube 관계자가 읽고 있다면, 인스턴스 페이지에 더 유용한 정렬 기능이 필요하다는 피드백을 제공함
          + 예를 들어, 무작위 채널이 두 번째 인스턴스로 나타나고, Freediverse.com이 6번째로 나타남
          + 후자가 상위에 있어야 함
     * PeerTube에서 영어 기술 채널 추천을 찾고 있음
          + 기본 추천은 대부분 프랑스어로 보임
     * 몇 년 전 안드로이드용 PeerTube 클라이언트를 만들었으나, 9월에 Google에 의해 제거되었고 아직 항소 중임
          + 이번 버전이 같은 운명을 맞지 않기를 바람
     * PeerTube의 성장을 기쁘게 생각하며, 중앙집중식 YouTube의 대안 중 하나로 간주함
     * 앱을 다운로드하고 관심사를 추가했을 때 첫 10개의 추천 목록
          + PeerTube 자체에 대한 교육 비디오
          + 영어 자막이 있는 동일한 교육 비디오
          + 프랑스어로 된 Framadate에 대한 슬라이드쇼
          + 연합에 대한 교육 비디오
          + 프랑스어로 된 피라미드에 대한 비디오
          + 스페인어 자막이 있는 동일한 교육 비디오
          + Mastodon에 대한 교육 비디오
          + 대체 의학에 대한 교육 비디오
          + TILvids에 대한 교육 비디오
          + 프랑스어를 못하지만, 관심사로 필터링해도 비디오가 변하지 않음
          + YouTube의 경쟁자로서 적합하지 않다고 생각함
     * ""funny videos"" 같은 간단한 검색어를 입력했지만, 관련 있는 재미있는 고양이나 개 비디오를 찾지 못함
          + 콘텐츠 파이프라인 구축을 위한 이니셔티브가 필요할 것 같음
"
"https://news.hada.io/topic?id=18164","세가 채널 게임 이미지 파일 형식의 리버스 엔지니어링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     세가 채널 게임 이미지 파일 형식의 리버스 엔지니어링

소개

     * Sega Channel은 케이블 가입자에게 매달 약 50개의 Sega Genesis 게임을 제공하는 게임 온디맨드 서비스였음.
     * 1994년 6월부터 1998년 6월까지 운영되었으며, 가입자는 Genesis와 케이블 TV 라인을 연결하는 어댑터 카트리지를 받았음.
     * 게임 메뉴를 다운로드하고 선택한 게임을 RAM에 다운로드하여 실행할 수 있었음.
     * Sega Channel은 약 25만 명의 가입자를 보유한 적이 있었음.

게임 이미지

     * 2024년 11월, Sonic Retro 포럼의 RisingFromRuins 사용자가 1996년 9월의 Sega Channel 게임 이미지 CD를 발견함.
     * 이 이미지를 통해 독점 게임이나 프로토타입 게임을 추출할 수 있을지 확인하는 프로젝트를 시작함.

과정

     * 이미지 파일의 내용을 헥스 에디터로 확인했으나 읽을 수 있는 내용이 없었음.
     * 2017년, Foley Hi-Tech의 백업 CD가 발견되어 Sega Channel 개발 자료를 포함하고 있었음.
     * 게임 이미지 파일을 생성하는 도구를 역공학하여 데이터를 추출하는 것이 더 쉬울 것이라 판단함.
     * NSF.EXE라는 프로그램을 분석하여 게임 이미지 파일을 디코딩하는 프로그램을 작성함.

발견

     * 1996년 9월에 방송된 독점 게임인 Chessmaster와 Klondike를 포함한 게임 목록을 확인함.
     * Sega Channel 데모 카트리지 ROM을 사용하여 에뮬레이터에서 메뉴를 실행할 수 있었음.
     * 게임 설명 ROM은 에뮬레이터에서 실행되지 않았으나, 수정 후 실행 가능했음.

결론

     * Sega Channel 개발 백업 CD를 공개한 Tdijital, .SA 압축 형식을 역공학한 Octocontrabass, 그리고 디버그 모드로 NSF.EXE를 컴파일한 Scientific Atlanta에 감사함.
     * RisingFromRuins가 게임 이미지 파일을 공개한 덕분에 프로젝트가 가능했음.

        Hacker News 의견

     * Teletext 시스템은 1980년대와 1990년대 유럽에서 널리 사용되었으며, 방송 TV 신호의 빈 구간에서 데이터를 전송하는 방식이었음. BBC의 Ceefax Teletext 서비스는 BBC Micro에 소프트웨어를 배포하는 데 사용되었음
          + Teletext는 뉴스, 날씨 등의 정보를 TV에서 직접 볼 수 있도록 했으며, 인기 있는 페이지는 자주 반복되어 빠르게 로드되었음
          + Sega Channel 시스템과 유사하게 Teletext 시스템도 루프된 데이터를 방송했음
          + Teletext의 PAL 방송 비트레이트는 약 7Mbps로, 1990년대 중반의 Sega 시스템의 8Mbps와 비교해도 높은 수준이었음
     * Sega Channel은 6학년 때 친구가 사용했던 서비스로, 게임 다운로드 개념이 당시에는 혁신적이었음
          + 월 $15의 요금으로 매달 또는 매주 게임이 교체되었으며, 출시 전 게임도 포함되었음
          + Vectorman 게임을 출시 전 또는 출시 직후에 플레이했던 기억이 있음
     * SNES는 일본에서만 제공된 StellaView라는 유사한 서비스가 있었음
          + Legend of Zelda 1의 리메이크 버전을 플레이했으며, A Link to the Past 그래픽으로 재구성되었음
     * 90년대에 한두 달 동안 이 서비스를 사용했으며, 놀라운 경험이었지만 약간 까다로웠음
          + 이웃이 케이블을 분리하면서 서비스가 중단되었으며, 전용 라인이 필요했음
     * Nabu 컴퓨터와 유사한 점이 많으며, 데이터 업로드가 불가능한 상황에서 프로그래밍을 연속 루프로 제공했음
     * 하드웨어는 4MB의 RAM을 가지고 있었음
     * 아버지가 General Instrument에서 Sega Channel 작업을 했지만, 집의 케이블 제공자가 서비스를 제공하지 않아 실제로 사용해보지 못했음
     * 초등학교 때 부모님을 설득해 서비스를 받았지만, 다른 사람들은 이 서비스를 들어본 적이 없었음
          + 버지니아에서 서비스가 매우 불안정했으며, 1~3개월 동안 지원 센터에 자주 연락해야 했음
     * Foley Hi-Tech라는 회사가 게임 메뉴 그래픽과 애니메이션을 만들고 월간 콘텐츠를 삽입했음
          + 약 60MB의 ""게임 이미지"" 파일을 CD에 구워 덴버, 콜로라도의 위성 업링크 시설로 보냈음
          + CD는 업링크 게임 서버 컴퓨터에 설치되어 위성을 통해 게임 데이터를 루프로 전송했음
          + 케이블 헤드엔드는 위성 전송을 받아 케이블 가입자에게 전송했으며, 데이터가 연속 루프로 전송됨으로써 ""상호작용성""을 제공했음
     * 이 서비스가 존재하는지 몰랐으며, 게임을 루프로 방송하는 것이 기발하다고 생각했음
          + ZX Spectrum은 이미 라디오를 통해 게임을 전달한 적이 있었음
     * PKSPREAD가 Phil Katz의 PKZIP와 관련이 있는지 궁금했음
"
"https://news.hada.io/topic?id=18168","Mathics 7.0 – Mathematica의 오픈소스 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Mathics 7.0 – Mathematica의 오픈소스 대안

Mathics3/mathics-core 업데이트 요약

     * 새로운 기능 및 개선 사항
          + 내장 함수의 게으른 로딩을 지원하기 위한 작업이 진행됨.
          + Python 코드와 스타일을 현대화하고, 타입 주석을 추가하며, 철자 오류를 제거함.
          + SymPy 및 Python의 최신 버전 사용.
          + 새로운 내장 함수 추가: $MaxLengthIntStringConversion, Elements, ComplexExpand, ConjugateTranspose, LeviCivitaTensor, RealAbs, RealSign, RealValuedNumberQ.
     * 문서화
          + PDF 파일의 형식 문제 해결.
          + 챕터 및 섹션 목차의 번호 간격 증가.
          + 내장 정의 주변의 여백 공간 증가.
          + 철자 오류 수정.
          + doctests 실행 및 LaTeX 문서 생성 코드를 개정하여 점진적 내장 업데이트 가능.
     * 호환성
          + Plot은 평가 중 메시지를 표시하지 않음.
          + Range[]는 이제 음수도 처리 가능.
          + DirectedInfinity 및 Indeterminate에 대한 지원 개선.
          + Mathics-Django 인터페이스에서 오류 메시지 툴팁 표시.
          + $CharacterEncoding을 세션 내에서 변경 가능.
     * 내부 구조
          + eval_abs 및 eval_sign을 Abs 및 Sign에서 추출하여 mathics.eval.arithmetic에 추가.
          + 문자열의 최대 자릿수는 7000으로 설정되며 환경 변수 MATHICS_MAX_STR_DIGITS로 조정 가능.
          + 실수 비교는 이제 RealSign의 내부 구현을 기반으로 함.
          + Python 3.11에서 $MaxLengthIntStringConversion은 큰 정수와 문자열 간의 변환 최대 크기를 제어함.
     * 버그 수정
          + Definitions는 pickle과 호환됨.
          + Quantity 표현식에 대한 지원 개선.
          + Graphics 및 Graphics3D의 배경 옵션 작동.
          + 문자열을 포함한 표현식에 대한 수치 비교 문제 해결.
          + Switch[]의 무한대 처리 문제 해결.
          + Outer[]의 SparseArray 처리 문제 해결.
          + ArrayQ[]는 SparseArray를 감지함.
          + BoxExpressionError 예외 처리 문제 해결.
          + True, False, List[]의 도함수 평가 문제 해결.
          + Combinatorica 패키지 수정.
          + Exit[] 작동 문제 해결.
          + BaseForm이 $OutputForms에 나열됨.
     * API 변경 사항
          + 새로운 함수 import_and_load_builtins() 호출 필요.
          + 내장 모듈의 게으른 로딩 지원을 위해 필요함.
     * 패키지 업데이트
          + Python 3.11 지원.
          + Sympy 1.12 지원.

        Hacker News 의견

     * 이 프로젝트를 몇 년간 지켜보았으며, 오픈 소스 컴퓨터 대수 시스템에 관심 있는 사람들에게 다양한 성숙한 솔루션이 존재함
          + GNU Octave, Maxima 같은 고전적인 것부터 SAGEmath, Symbolics.jl, sympy 같은 현대적인 것까지 다양함
          + GiNaC 같은 상징적 라이브러리부터 SAGEmath 같은 ""배터리 포함"" IDE까지 폭넓은 범위를 가짐
          + SAGEmath는 웹 노트북 인터페이스를 개척하여 오늘날 Jupyter를 가져옴
     * 개인적으로 Mathematica의 LISPy 스타일을 좋아하지만, MMA의 강력함은 방대한 라이브러리에 있음
          + 상징적 통합, 2D/3D 그래픽, 유한 요소 방법 등 기본 주제에 대한 업계 선도 솔루션뿐만 아니라 생물정보학 같은 특수 목적 도메인도 포함됨
          + Mathics는 핵심을 잘 복제했지만 모든 라이브러리가 부족함
          + Matlab과 numpy 복제본의 논리와 유사함
     * Wolfram Cloud는 개인 사용에 무료로 제공되며, Wolfram Engine은 명령줄을 통해 Mathematica를 무료로 사용할 수 있는 방법임
     * Mathics에 대한 간단한 소개는 여기에서 확인 가능함
     * Mathematica는 Raspberry Pi에서 무료로 사용할 수 있으며, 대부분의 대학은 사이트 라이선스를 보유하고 있음
          + ""Home & Hobby"" 라이선스는 연간 $195 또는 영구 라이선스 $390로 비교적 저렴함
          + 취미 라이선스 가격을 지불하는 것이 가치 있다고 생각하며, 수학 소프트웨어를 지원하는 것이 좋은 일이라고 생각함
     * (F)OSS 수학 소프트웨어는 여전히 중요한 역할을 함
          + Mathematica는 포괄적이지만 고급 수학에서 몇 가지 중요한 단점이 있음
          + GAP, M2, PARI/GP 같은 (F)OSS 소프트웨어는 Wolfram Language의 부족한 부분을 보완하는 데 중요한 역할을 함
     * Mathematica의 기능을 복제하려는 프로젝트에 큰 관심은 없지만, 이러한 프로젝트가 Wolfram Research에 기본 기능을 지속적으로 개선하도록 압박을 가함
     * 소프트웨어 엔지니어들은 소프트웨어 비용을 지불하지 않으려는 경향이 있음
     * Mathematica의 불편한 점 중 하나는 모든 함수가 동일한 네임스페이스에 밀집되어 있으며, 다른 매개변수화 옵션으로 오버로딩이 없다는 것임
"
"https://news.hada.io/topic?id=18173","NAVIX - 네이버에서 만든 리눅스 배포판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NAVIX - 네이버에서 만든 리눅스 배포판

     * OpenELA 기반 OS로 강력한 하드웨어와 결합하여 탄탄한 호환성, 안정성, 유연성을 제공
     * NAVIX의 라이프 사이클 정책은 5+5 정책으로, 총 10년의 수명

   튜닝의 끝은 순정일터인데

   구형 노트북 설치할 때 deprecated hardware라고 나오더니
   결국 화면이 나오지 않네요..

   지원 하드웨어 목록이 없을 때부터 알아봤어야 하는건데..

   버전이 9가 넘네요? 나온지가 오래됐는데 모르고 있었던 듯?

   배포된 버전이 9.4와 9.5밖에 없는것 같아요.

   RHEL과의 호환성때문에 버전번호를 유지하는 것 아닐까요? AlmaLinux나 Rocky도 마찬가지구요

   네이버에서도 리눅스 배포판을 만드나보네요. 한 번 살펴봐야겠습니다.

   대체 왜 릴리즈 노트에 언제 릴리즈 했는지 날짜가 없는걸까요...
   공식 홈페이지의 News들도 날짜가 없구요.
   기술지원을 5+5년 하겠다는데 별로 믿음이 안 가네요...
"
"https://news.hada.io/topic?id=18161","Mend it Mark, £25k 오디오 앰프 수리에 대한 의심스러운 저작권 침해 주장 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mend it Mark, £25k 오디오 앰프 수리에 대한 의심스러운 저작권 침해 주장 제기

     * £25,000 톰 에반스 프리앰프 수리와 저작권 문제
     * 독자가 [톰 에반스]가 [마크]의 Mend it Mark 유튜브 채널의 수리 비디오에 대해 저작권 클레임을 제기했다고 알려줌. 이로 인해 해당 수리 비디오와 [마크]의 코멘터리가 삭제됨.
     * 새로운 비디오에서 [마크]는 이 삭제와 그 의미에 대해 언급함. 가장 큰 의문은 원래 비디오에서 무엇이 저작권이었는지에 대한 것임. 유튜브가 [마크]의 질문을 전달하거나 추가 세부 정보를 제공하지 않았기 때문에 어려웠음.
     * 새로운 비디오에서는 실제 프리앰프 대신 소품을 사용하여 수리를 다시 요약함. 이전 수리 보도에서 프리앰프를 잠깐 볼 수 있음. 요약하자면, 한 채널에 문제를 일으킨 불량 탄탈 커패시터가 있었고, 이 25,000 파운드짜리 프리앰프의 내부는 PCB로 만든 젠가 타워의 예술적 해석처럼 보임.
     * 이 새로운 비디오가 제조업체로부터의 추가 저작권 공격에서 안전하길 바람. 제조업체가 결함 있는 유닛을 [마크]에게 수리 도전 과제로 보낸 후 발생한 일임.
     * 이 '오디오파일 수준'의 프리앰프는 특별한 회로나 필터링을 사용하지 않음. 단지 신중하게 매칭된 연산 증폭기를 사용함. 이는 저작권 문제로 인해 혼란스러운 사례 중 하나임.

        Hacker News 의견

     * ""저작권""이라는 단어가 점점 더 일반적인 의미로 변하고 있으며, 대기업이 싫어하는 작은 회사나 개인을 침묵시키는 수단으로 사용되고 있음. 이 사례는 실제 저작권과 관련이 없어 보임. 회사가 정확히 어떤 콘텐츠가 복사되었다고 주장했는지 궁금함
          + 20세 미만의 아이에게 ""저작권""이 무엇인지 물어보면, 지적 재산권이나 복사와 관련된 것보다는 기업의 괴롭힘으로 설명할 가능성이 높음
     * ""Tom Evans""는 제조 회사이며, 단순한 개인이 아님. Mend it Mark가 이 회사를 당황하게 만들었고, 그 결과로 YouTube에서 전형적인 기업식 대응을 하고 있음
     * 문제의 영상은 인터넷 아카이브에서 여전히 볼 수 있음
     * 오디오파일 관련 제품에 대한 비판적 의견이 있으며, Mend it Mark가 YouTube의 저작권 문제로 어려움을 겪고 있음. 그의 반응 영상은 재미있었음
          + Mend it Mark가 YouTube/Google에 덜 의존할 수 있기를 바람. 그의 교육 과정은 Wistia에 호스팅되고 있음
     * 이 에피소드를 보았는데, 잘못된 앰프의 구조가 웃기게도 끔찍했음. 제품 디자이너는 Mark가 고칠 수 없다고 주장했지만, Mend it Mark는 고칠 수 있는 것은 무엇이든 고칠 수 있는 진정한 수리 전문가임
     * ""오디오파일"" 장비는 항상 사기꾼들이 활동하기 좋은 환경으로 보였으며, Shakti stone 같은 고전적인 예가 있음
     * 어떤 회사가 제품 가격에 너무 많은 0을 추가한 것을 누군가가 보여주는 것에 대해 매우 당황한 것 같음
     * ""Tom Evans"" 앰프로 Streisand 앨범을 재생하고 싶다는 의견이 있음
     * 후속 영상: £25,000 프리앰프 수리와 저작권 문제
     * Mark의 팬으로서 그의 YouTube와 Patreon은 전자기기 수리에 대한 지식의 보고임. 그는 전자기기부터 기계 가공 및 플라스틱 제작까지 전문가임. 그의 태도와 발표 스타일도 훌륭함. 이 사건이 그의 인지도를 높이고 팬을 얻는 데 도움이 되기를 바람
     * Tom Evans 영상이 처음 나왔을 때 봤으며, 그들의 ""저작권"" 주장은 로고나 PCB에 쓰인 글자를 보여준 것에서 비롯된 것 같음
"
"https://news.hada.io/topic?id=18245","[GeekNight 2024] 인지과학 연구로 증명된 학습 보조 도구 Anki: 10배 더 효과적으로 활용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [GeekNight 2024] 인지과학 연구로 증명된 학습 보조 도구 Anki: 10배 더 효과적으로 활용하는 방법

   어제 발표한 내용을 좀 더 보강하여 블로그에 올렸습니다. 아래는 요약입니다.

   --

Anki가 무엇인가

     * Anki: 똑똑한 플래시카드 앱
     * 수식, 이미지, HTML 등 다양한 인풋 포맷을 지원하고, 알고리즘에 따라 학습 주기를 조절하는 게 특징
     * 모바일 앱은 유료, 데스크톱은 오픈소스 무료

Anki에 내포된 학습 원리

     * Dunlosky라는 학자가 연구한 효과적 학습 방법 5가지가 있음 (자세한 내용은 원본 링크를 참조하세요)
          + 효과 큼: 분산 연습하기(Spaced Repitition), 연습시험 치기
          + 효과 중간: 다양한 주제를 섞어서 연습하기, 이게 왜 맞는 말인지 자문하기, 내가 이미 아는 지식과 비교하여 연결짓기
     * 이 효과 큰 2가지 방법을 Anki가 기본적으로 지원함. 알고리즘에 따라 주기 조절하여 여러 번 시험을 치는 것이기 때문
     * 효과 중간인 3가지 방법은 좀 더 능동적으로 Anki를 써야 얻을 수 있음

내가 Anki 쓰는 방법

   Input - Process - Output으로 소개

  Input - 언제 넣는가

   이러한 트리거를 삶에 설치해둬서 카드가 꾸준히 추가됨
     * 호기심이 생기면 GPT와 문답
     * 중요한 회의나 회고 이후 잊고 싶지 않을 때
     * 책, 강의, 워크숍, 글 등에서 배운 것의 액기스
     * 새로운 분야의 지식을 빠르게 습득하고 싶을 때
     * 기타 내가 잘 했던 행동을 기억해서 반복하고 싶을 때

  Input - 무엇을 넣는가

   질문의 답만 넣지 않고 메타데이터를 여럿 추가함
     * 추가한 날, 출처
     * 기억을 돕는 장치(두문자어, 시각화 등)
     * 의문, 생각, 계기, 쓸모
     * 이 지식을 스스로 만들어내는 방법 (ex: 공식 자체보다는 유도법)
     * 트리거: 다음에 이 카드를 보면 뭘 해봐야지.
     * 트리거: 어떤 상황에서 이 지식을 쓸 수 있을까? 이것도 카드로 추가할까?

  Process - 질문과 답변을 보면서 뭘 하는가

   한마디로 말하면 카드를 살아있게 만드는 것
     * 너무 어렵네? 두문자어를 질문에 넣을까? 그룹핑을 다시 해볼까? 시각화를 추가해볼까?
     * 너무 쉽네? 갯수를 숨겨보자.
     * 이 내용은(카드는) 이제 안 중요한데 지우자.
     * 너무 한 카드를 길게 썼다. 쪼개자.
     * 이거 출처 안 썼었네? 다시 정확히 읽어보고 내용 보강해둘까?

   미래의 내가 지속적으로 개선해줄 걸 알기 때문에, Input 단계에서 대충 집어넣어도 큰 부담이 없음.
     * 나만의 Anki 사용 마인드셋이자, 피드백 구조를 설계한 것

  Output - Anki를 통해 만들어내는 것들

   호기심 해결과 지식 습득 자체도 즐겁지만 결국 써먹어야 의미가 있음
     * 글감 얻기: 블로그 글의 50% 이상은 안키로 시작하거나 안키로 끝남
     * 도움 주기: 코칭/멘토링할 때 나만의 지식과 기억 저장고에서 쉽게 꺼내서 말해줄 수 있음
     * 도움 받기: 내가 현재 신경쓰는 문제에 대해 Anki 카드가 우연히 도움을 줄 때가 많음. 과거의 내가 현재의 나를 코칭해주는 느낌

   내년에는 나의 Anki 사용법을 Anki 플러그인이나 GPTs, 웹, 앱 등 뭐든 간에 제품으로 만들어서 Show GN에 올리는 게 소소한 목표임

   '프로그래머의 뇌' 책을 읽고 flashcard를 적극적으로 사용해보고 싶었는데, 이런 글을 보게 돼서 도움이 됐습니다. Spaced repetition 용어도 알게 됐네요.

   오 재무제표 공부하려고 했는데 anki 쓰겠습니다~!

   저도 한동안 Anki로 공부해야지 하다가 기억 저편으로 들어갔네요.
   다시금 새로 끄내서 사용해보고자 하는데 말씀해주신 프로세스 좋은 것 같습니다!

   새로 Input에 넣으실 때 한 덱에 넣으실까요? 아니면 주제별로 다 분리하시나요?
   이전에 사용할 때 세분화 하다보니 특정 덱 위주로 학습이 진행되게 되는 것 같은 느낌이더라고요.ㅎㅎ

   마침 링크드인에서 어떤 분이 비슷한 질문을 주셔서 복붙합니다!

   —

   저는 덱은 하나만 사용합니다.

   만약 특정 주제에 대해 꼭 빠르게 암기해야겠다 싶다면(시험을 친다거나?) 그건 덱을 따로 만들어서 그 덱만은 매일 복습할 아이템 안 남을 때까지 복습하는 전략을 취할 수도 있을 것 같습니다만, 지금까지 그럴 필요를 느낀 적이 없었네요.

   그 외에는 어차피 제 삶에서 다 필요한 내용을 넣었을 테니, 모두 한 덱에서 넣고 알아서 나타나게 하면 자연스레 섞어서 학습도 될 거라고 생각해요.

   https://youtu.be/Udg61ewIdoE?t=717

   최근 본 한 유튜브 동영상에서 비슷한 내용이 있어서 정리해 공유드립니다. 지식을 가공 없이 단순 기록만 하는 것이 아니라, 내용을 이해하고 자신의 가치관이 반영된 새로운 정보를 만들어내는 활동이 공통적으로 보여서 관련이 있다고 생각했습니다.

   김정운 교수와 독일 학생간 학습방법 차이
     * 김정운 교수: 내용, 출처
     * 독일 학생: 내용, 출처, 내용의 중요성애 대한 개인의 생각을 요약하여 제목 작성 (개인의 메타언어 사용)
     * 편집과 짜깁기의 차이: 메타언어의 유무

   소개 감사해요. 시청해보겠습니다 ㅎㅎ

   강연 잘 들었습니다. 행사 때 인사를 나누고 싶었는데 기회를 놓쳤네요. 꾸준히 학습하고 공유하는 자세, 존중합니다.

   경귀님 저도 어라? 하고 반가웠는데 인사를 못나눴네요 ㅠㅠ 다음에 기회가 있기를..

   GeekNight 발표 잘 들었어요!
   예전에 김창준님의 페이스북 글을 보고, Anki에 입문해서 한동안 썼었는데.. 습관이 잘 들지 않더라구요. 말그대로 살아있는 카드를 만들기 어려웠던 것 같아요.
   메타 데이터를 추가하거나 기존 카드를 리팩토링(?) 하는 방식이 유용해 보이고, 다시 써보고 싶은 생각이 들었네요. ㅎ

   ㅎㅎ 꼭 다시 써보시면 좋겠네요

   바로 옆자리에서
   대화 나누었던..baeba라고 합니다.
   업무 생산성 및 기억력 증강에 많은 도움이 되었습니다.
   감사합니다.

   감사합니다. 제가 네트워킹 참여를 못했는데 baeba 님만이라도 얘기 나눌 수 있어서 다행이었네요 ㅎㅎ

   오 감사합니다. 다른 세션내용들도 기대됩니다.

   강연 도중에 너무 흥미로워서 샀습니다 'ㅁ 'b

   그나저나 몇달전부터 느낀건데 혹시 운영진(xguru님 또는 GN+)이 올리는 글 외에는 슬랙봇애 안올라가게 바뀌었나요? vote 수는 충분해 보이는데 슬랙에는 없네요.

   특정 뉴스레터나 블로그 링크가 반복적으로 등록될 경우 홍보성이 되는 것을 방지하기 위해 슬랙봇을 포함한 소셜 공유 기능이 제한됩니다. 외부 채널들로의 공유는 조금 더 제약이 많은 점을 불편하시더라도 양해 부탁드립니다. 운영 시스템을 계속적으로 조정해나가겠습니다.

   네 답변 감사합니다!

   감사합니다. 다른 GeekNight 세션도 올라왔으면 좋겠네요

   좋은 글 감사합니다

   제텔카스텐과 Anki가 결합된 느낌이네요.

   안녕하세요.
   저희는 더 쉽고 접근성 좋은 Anki를 만들어보자는 목적으로 ‘오늘학습‘ 이라는 앱을 개발&서비스 하고 있습니다.
   Anki 처럼 반복 간격 학습을 통해 암기를 잘 할 수 있도록 도와줘요!
   혹시 관심 있으시면 사용해 보세요.

   https://today-study.com

   오 소개 감사합니다!
"
"https://news.hada.io/topic?id=18239","Electric (Postgres 동기화 엔진) 베타 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Electric (Postgres 동기화 엔진) 베타 출시

     * Electric은 Postgres 동기화 엔진으로, 실시간으로 Postgres 데이터를 로컬 앱과 서비스에 부분적으로 복제하는 기능을 제공
     * 자체 동기화 엔진을 개발하거나 스택을 변경할 필요 없이 실시간 로컬 데이터를 기반으로 앱을 구축할 수 있음
     * 브라우저에서 실행 가능한 경량 WASM Postgres인 PGlite도 개발 중
     * 프로덕션 준비 완료
          + Google, Supabase, Trigger.dev, Otto, Doorboost 등 여러 회사에서 Electric과 PGlite를 프로덕션 환경에서 사용 중
          + Trigger.dev에서는 ElectricSQL을 사용하여 실시간 업데이트를 제공하며, Otto에서는 AI 에이전트 기반의 스프레드시트 제품을 구축
          + Doorboost에서는 여러 플랫폼의 데이터를 실시간으로 대시보드에 표시
     * 확장성
          + Electric은 높은 처리량과 낮은 지연 시간으로 수백만 명의 동시 사용자를 지원할 수 있도록 설계됨
          + 클라우드 벤치마크 테스트에서 메모리 사용량과 지연 시간이 일정하게 유지됨
     * 채택 용이성
          + API를 간단하고 강력하게 설계하여 채택이 용이함
          + 문서가 업데이트되어 빠른 시작 가이드와 다양한 주제에 대한 가이드를 제공함
          + 다양한 패턴과 프레임워크에서 Electric을 사용하는 방법을 보여주는 데모 앱과 기술 예제가 제공됨
     * 점진적 채택
          + Electric을 한 컴포넌트와 한 경로씩 점진적으로 채택할 수 있음
          + 기존의 데이터 모델이나 마이그레이션을 변경할 필요 없이 Electric을 사용할 수 있음
     * 기존 API와 함께 사용
          + Electric은 HTTP를 통해 동기화되므로 기존 API와 함께 사용할 수 있음
          + 인증 및 쓰기와 같은 문제를 기존 코드와 웹 서비스 통합을 통해 처리할 수 있음
     * Electric Cloud도 개발 중이며, 관리형 Electric 호스팅을 제공할 예정
"
"https://news.hada.io/topic?id=18191"," 긴 컨텍스트 임베딩 모델에서 청킹(Chunking)은 여전히 필요할까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                긴 컨텍스트 임베딩 모델에서 청킹(Chunking)은 여전히 필요할까요?

   긴 컨텍스트 임베딩 모델이 모든 것을 처리할 수 있는 상황에서도 청킹 전략이 여전히 유용한지, 그리고 다양한 청킹 전략을 비교 분석하여 최적의 접근 방식을 찾는 방법에 대해 다룹니다.

  긴 컨텍스트 임베딩(Long Context Embedding)

     * Jina Embeddings v3와 같은 모델을 사용하여 최대 8,192 토큰까지의 텍스트를 단일 벡터로 임베딩하는 방식입니다.
     * 문서 전체의 맥락을 파악하는 데 유용하지만, 문서가 길어질수록 정보 손실 및 표현 희석 문제가 발생할 수 있습니다.
     * 문서의 주요 주제를 파악하는 데 적합하며, 사용자 쿼리가 문서의 전체적인 내용과 관련된 경우 효과적입니다.

  나이브 청킹(Naive Chunking)

     * 텍스트를 고정된 크기 또는 문장 단위로 분할한 후, 각 청크를 독립적으로 임베딩하는 방식입니다.
     * 긴 컨텍스트 임베딩의 단점인 표현 희석 문제를 완화하고, 특정 정보 검색에 유리합니다.
     * 각 청크는 주변 청크의 문맥 정보를 잃어버리기 때문에, 청크 간의 관계를 고려해야 하는 작업에는 적합하지 않습니다.
     * 계산 및 저장 비용이 증가할 수 있습니다.

  레이트 청킹(Late Chunking)

     * 먼저 전체 문서를 임베딩하여 토큰 수준의 임베딩을 생성한 후, 세분화된 청크 경계에 따라 토큰 임베딩을 평균화하여 청크 임베딩을 생성하는 방식입니다.
     * 전체 문서의 맥락을 유지하면서 청크 단위의 세분화된 정보 표현을 가능하게 합니다.
     * 나이브 청킹과 비교하여 문맥 정보 손실 문제를 해결하고, 더 나은 검색 성능을 제공합니다.
     * 특히 작은 청크 크기에서 효과적이며, 문서의 일부분이 서로 관련성이 높은 경우 유용합니다.
     * 단, 문서의 각 부분이 서로 관련성이 낮은 경우, 불필요한 컨텍스트가 노이즈로 작용하여 성능이 저하될 수 있습니다.

  청킹 크기의 영향

     * 청킹 크기는 검색 성능에 큰 영향을 미칩니다.
     * 일반적으로 레이트 청킹은 작은 청크 크기에서 나이브 청킹보다 더 나은 성능을 보입니다.
     * 청크 크기가 커짐에 따라 나이브 청킹의 성능이 향상되는 반면, 레이트 청킹의 성능은 감소할 수 있습니다.

  결론

     * 긴 컨텍스트 임베딩, 나이브 청킹, 레이트 청킹 중 어떤 방법을 선택할지는 데이터의 특성과 검색 작업의 목표에 따라 달라집니다.
     * 긴 컨텍스트 임베딩은 일관성 있는 문서와 일반적인 질의에 적합하며, 청킹은 사용자가 문서 내 특정 정보를 찾는 경우에 유용합니다.
     * 레이트 청킹은 작은 세그먼트 내에서 문맥적 일관성을 유지해야 하는 경우 효과적입니다.
     * 데이터와 검색 목표를 이해하고 정확성, 효율성, 문맥적 관련성을 고려하여 최적의 접근 방식을 선택해야 합니다.
"
"https://news.hada.io/topic?id=18235","Timemap.org – 역사 인터랙티브 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Timemap.org – 역사 인터랙티브 지도

     * 타임라인과 상호작용하기
          + 슬라이더를 사용하여 시간에 따라 국가, 주, 제국의 경계가 어떻게 변화했는지 탐색할 수 있음.

        Hacker News 의견

     * Klokan은 TimeMap의 창시자 중 한 명으로, 프로젝트에 대한 관심과 지원에 감사함
          + TimeMap을 Product Hunt에 출시했으며, 관심이 있다면 UPVOTE를 부탁함
          + Stanford University에서 TimeMap을 소개하는 행사를 개최했으며, YouTube에서 녹화를 볼 수 있음
          + TimeMap의 구축 과정과 관련된 다양한 기술과 파트너 프로젝트를 소개함
          + Klokan은 OpenMapTiles.org의 창립자이자 MapLibre.org의 이사회 멤버이며, 여러 오픈 소스 프로젝트에 기여하고 있음
     * Kentucky Bend에 대해 최근 알게 되었으며, 이 지역은 Tennessee와 Missouri에 둘러싸여 있음
          + 1848년 이전에 Tennessee가 이 지역을 주장하려 했음
     * 역사적 지도에서 국가의 통제뿐만 아니라 실제로 그 지역에 있었던 사람들, 언어, 문화, 신을 보여주는 방법이 있었으면 좋겠음
     * TimeMap의 UI가 매우 멋지며, Wikipedia 링크의 포함이 마음에 듦
          + 현대 지도의 오버레이가 흥미롭고 방향을 잡는 데 유용함
          + 역사적 해안선이나 수로를 보여주는 것이 어려울 수 있지만, 시도해볼 만한 가치가 있음
          + 역사적 세계 지도의 경계와 음영 처리 방식에 대한 두 가지 비판점이 있음
     * 역사적 사건을 연대순으로 연구하는 것이 어려울 수 있음
          + 자녀에게 역사적 전기를 읽어주는 과정에서 연대순으로 읽는 것이 유익했음
     * TimeMap과 유사한 프로젝트를 진행했으며, 커뮤니티의 지원을 받았음
          + 소스 코드는 GitHub에서 확인할 수 있음
     * 디지털 역사 아틀라스를 오랫동안 원했으며, TimeMap이 대부분의 요구 사항을 충족함
          + 자신의 프로젝트를 시작했지만 TimeMap의 발전을 보고 다른 일을 할 수 있게 되어 기쁨
     * New Zealand의 역사적 국기가 부정확하게 표시되어 있음
          + 초기 국기와 신호 국기가 잘못 표시되어 있음
     * Chronas.org라는 유사한 프로젝트가 있으며, 이 대화에서 언급되지 않은 것이 놀라움
"
"https://news.hada.io/topic?id=18248","Kubernetes Spec Explorer","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Kubernetes Spec Explorer

     * 쿠버네티스의 모든 리소스/속성/타입/예제에 대한 문서를 쉽게 찾아 보기 가능
     * 모든 리소스의 스키마, 유형 및 설명이 포함된 트리 보기 지원
     * 버전 X 이후의 변경 내역(속성 추가/제거/수정) 표시
     * 새로 출시된 1.32를 포함하여 1.25 이후의 모든 버전 지원
"
"https://news.hada.io/topic?id=18163","롤러코스터 타이쿤, 마지막 남은 동종 게임 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     롤러코스터 타이쿤, 마지막 남은 동종 게임 [비디오]

        Hacker News 의견

     * RollerCoaster Tycoon을 다시 플레이하고 싶다면, OpenRCT2를 추천함. 여러 품질 개선 기능과 MacOS 지원이 있음
     * 처음 RCT를 플레이했을 때 복사 방지 기능 때문에 게임을 실행할 수 없었지만, exe 파일을 여러 번 클릭하여 우연히 실행할 수 있었음. 이 방법으로 게임을 플레이했음
     * RollerCoaster Tycoon에 대한 noclip 다큐멘터리를 추천함. RCT2 이후의 이야기를 다루고 있으며 OpenRCT2 커뮤니티의 관점도 포함되어 있음
     * 프로그래머 Chris Sawyer의 근황에 대해 궁금했음. 그는 지역 초등학교 미디어 팀에서 자원봉사를 하고 있으며, 롤러코스터 애호가로서 전 세계를 여행하며 2024년 기준으로 770개의 롤러코스터를 방문했음
     * Ahoy는 플랫폼에서 최고의 창작자 중 하나이며, 그의 Polybius에 대한 비디오를 추천함
     * Assembly 언어로 개발된 마지막 게임은 아니지만, 여전히 성공적인 솔로 개발자나 소규모 팀의 게임이 존재함. Manor Lords, Tiny Glade, Townscaper가 그 예임
     * ""RollerCoaster Tycoon이 어셈블리 언어로 작성되었다""는 이야기가 반복되는 것을 보는 것이 재미있음
     * OpenRCT2는 emscripten을 사용하여 브라우저에서 RollerCoaster Tycoon 2를 실행할 수 있음
     * RCT는 거의 전적으로 x86 어셈블리로 작성되었으며, 소량의 C++ 래퍼를 사용하여 DirectX 호출과 Windows API 호출을 처리했음. Transport Tycoon Deluxe와 동일한 기본 엔진을 사용함
"
"https://news.hada.io/topic?id=18170","HN 공개: 웹사이트에서 AI 허튼소리 제거 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 공개: 웹사이트에서 AI 허튼소리 제거 하기

        Hacker News 의견

     * AI가 생성한 과도하게 긴 콘텐츠를 다시 유용한 정보로 압축하는 상황이 웃기고 점점 더 정확해지고 있음
          + AI가 구멍을 파고 다른 AI가 그 구멍을 메우는 상황을 비유적으로 설명함
          + 정보 검색과 독서 경험이 AI 요약 영상으로 대체될 수 있을지에 대한 의문을 제기함
     * 인터넷의 많은 쓰레기 콘텐츠는 AI 때문이 아니라 AdSense 같은 광고 수익 모델 때문임
          + 광고 수익을 늘리기 위해 콘텐츠를 부풀리고 논란을 추가하는 등의 방법을 사용함
          + AI가 이러한 사이트를 자동으로 생성할 수 있음
     * AI가 AI 콘텐츠를 제거하는 아이러니를 언급함
          + AI를 사용한 마케팅 생성에서 오해가 발생함
     * AI가 쓸모없는 내용을 제거하는 것처럼 보이며, 제목이 이를 과소평가하고 있다고 생각함
     * 특정 레시피 웹사이트에서 불필요한 내용을 제거하고 원하는 정보를 얻음
          + URL을 매개변수로 설정할 수 있는 기능을 제안함
     * ""불을 불로 싸우는"" 방식이 유효할 수 있지만, 역사적으로는 더 나쁜 상황을 초래함
          + Snowflake가 Streamlit을 인수한 상황을 언급하며, AI의 낮은 가치를 비판함
     * PornHub를 대상으로 한 요약 결과를 공유함
          + 사용자 수, 콘텐츠 제작자 수, 무료 콘텐츠 시간 등을 포함한 요약을 제공함
     * 이러한 도구가 단순한 필러 이상의 것을 제거한다고 언급함
          + 여행을 즐기지 않고 목적지만을 향하는 것과 같다고 비유함
     * ""AI"" 열풍이 높은 오락 가치를 가지고 있다고 언급함
          + 사람들이 ""AI""의 영향을 줄이기 위해 ""AI""가 필요하다고 믿게 만드는 것이 흥미롭다고 함
     * 이미 존재하는 앱을 언급하며, 플러그인도 유용하다고 언급함
"
"https://news.hada.io/topic?id=18260","Microsoft MarkItDown - 파일 및 오피스 문서를 Markdown으로 변환하는 Python 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Microsoft MarkItDown - 파일 및 오피스 문서를 Markdown으로 변환하는 Python 도구

     * 다양한 파일을 Markdown으로 변환하는 유틸리티 도구
     * 지원포맷:
          + PDF (.pdf), PowerPoint (.pptx), Word (.docx), Excel (.xlsx)
          + 이미지 (EXIF 메타데이터 및 OCR), 오디오 (EXIF 메타데이터 및 음성 변환)
          + HTML (특히 Wikipedia 등 특별 처리) 기타 다양한 텍스트 기반 형식 (csv, json, xml 등)
     * API 사용법은 간단함:
from markitdown import MarkItDown
markitdown = MarkItDown()
result = markitdown.convert(""test.xlsx"")
print(result.text_content)

   오 마소 내부에서도 오픈소스화시키려나보네요?

        Hacker News 의견

     * uv를 설치한 경우, 파일에 대해 별도의 설치 없이 uvx markitdown path-to-file.pdf 명령어로 실행할 수 있음
          + 처음 실행 시 필요한 패키지를 캐시하고, 이후 실행 시 캐시된 패키지를 재사용함
          + HTML과 PDF에 대해 시도해본 결과 꽤 괜찮은 성능을 보임
     * 회사에서 파일을 LLM 친화적인 텍스트로 변환하는 기능을 개발한 경험이 있음
          + 소스 코드를 읽어본 결과, 이 구현은 꽤 합리적임
          + 이미지나 스프레드시트에는 사용하지 않는 것이 좋음
          + 이미지의 경우 LLM 제공자가 직접 전달할 수 있으며, 스프레드시트는 Markdown 테이블 해석에 약함
     * 많은 스타트업과 오픈 소스 프로젝트가 이 분야를 복잡하게 만들지만, 이해하기 쉽고 배포하기 쉬운 간단한 프로젝트가 최종 목표임
     * PDF 처리에 있어 ""얼마나 많은 처리를 원하는지"" 조절할 수 있는 기능이 있었으면 좋겠음
          + PDF는 텍스트 추출 시, PDF 내보내기 방식에 민감한 휴리스틱을 사용하거나 OCR을 완전히 사용해야 함
          + 프로젝트가 한 가지 방법에만 고정되는 것은 불편함
          + 음성-텍스트 기능은 텍스트-텍스트 기능과 성능 특성이 다를 수 있어 사용하지 않을 것임
     * PDF 처리에 있어 PDFMiner를 직접 통합하는 것이 더 나을 수 있음
     * Pandoc을 사용하여 .docx 파일을 Markdown 및 다른 파일 형식으로 변환할 수 있음
          + Pandoc은 파워포인트와 엑셀 파일 변환은 불가능함
     * PDF 형식의 복잡한 시각적 레이아웃과 많은 테이블을 가진 테이블탑 RPG 책을 색인화함
          + PDFMiner의 래퍼라면 이 도구의 추가 가치는 보이지 않음
          + 테이블을 인식하거나 처리하지 않지만, 최소한의 테이블 셀 인식은 있음
          + 가변 폭 열이나 복잡한 방식으로 감싸인 텍스트는 잘 처리함
          + 완전히 정렬된 텍스트에 불필요한 공백을 삽입하고, 중간 문장 열 분할 시 불필요한 줄 바꿈을 추가함
          + 가장 큰 문제는 제목을 완전히 놓치는 것임
     * README에 LLM에 대한 언급이 없다는 점이 예상 밖이지만 긍정적임
          + 코드 읽기가 흥미로움
          + 대부분은 단일 1101줄 파일에 있는 글루 코드임
     * 온라인 언어 수업에서 과제를 Slack으로 제출했을 때의 경험 공유
          + .md 파일로 과제를 제출했으나, 선생님이 이를 이해하지 못함
          + 이후로는 Word 문서를 선호하는 사람을 만날 줄 몰랐음
     * docling과의 비교에 대한 호기심
          + docling은 LLM을 사용함
     * Markdown에서 PDF나 .docx로 변환하는 좋은 라이브러리가 있는지 궁금함
          + Pandoc은 대부분의 경우 가능하지만, 테이블과 같은 특정 항목에서 어려움을 겪음
     * Microsoft라면 Outlook HTML과 .docx에서 절반 정도는 괜찮은 결과를 낼 수 있을 것임
          + 대부분의 유료 솔루션도 평가했으나, 프로덕션에서 실행할 만큼 좋다고 생각한 것은 없음
          + 이 도구를 시도해볼 것임
"
"https://news.hada.io/topic?id=18203","Orchestrion: Go 애플리케이션을 위한 컴파일 타임 자동 계측 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Orchestrion: Go 애플리케이션을 위한 컴파일 타임 자동 계측 도구

     * Datadog에서 개발한 Go 애플리케이션을 위한 안전하고 신뢰할 수 있는 자동 계측 도구
     * 컴파일 타임에 계측을 삽입하여 런타임 오버헤드를 최소화
     * RASP 기능을 통해 애플리케이션을 보호
     * 컴파일 과정에서 소스 코드를 수정하여 Datadog APM 추적을 위한 계측을 자동으로 삽입
     * Datadog Application Security Management Exploit Prevention 기능을 통해 일반적인 취약점으로부터 애플리케이션을 보호

  작동 방식

     * Go 툴체인과 연동하여 컴파일 과정 중에 소스 코드를 분석하고 수정합니다.
     * Abstract Syntax Tree(AST) 레벨에서 코드를 조작하여 Go 컴파일러가 모든 변경 사항을 검증하고 타입 검사를 수행하도록 합니다.
     * 애플리케이션의 모든 동작에 대한 무제한적인 접근을 허용하면서 컴파일된 바이너리를 직접 수정하여 발생할 수 있는 오류를 방지합니다.
     * Go 컴파일러의 최적화 과정을 거쳐 수정된 코드가 최적화되어 런타임 오버헤드를 줄입니다.
     * 수정된 소스 코드에 Go //line pragma 지시문을 삽입하여 수정으로 인해 라인 번호가 영향을 받지 않도록 하고 계측된 애플리케이션에서 생성된 스택 추적이 원본 소스 코드의 올바른 위치를 가리키도록 합니다.

  컴파일 타임 계측을 사용하는 이유

     * 안전성, 신뢰성, 데이터 품질: 컴파일 타임 계측은 바이너리 패칭이나 eBPF보다 안전하고 신뢰할 수 있는 데이터를 생성합니다.
     * 자동화: 바이너리 패칭 및 eBPF는 높은 수준의 자동화를 제공하지만 Orchestrion은 빌드 프로세스 변경 및 애플리케이션 재배포가 필요합니다.
     * 성능 오버헤드: eBPF는 커널과 사용자 공간 간의 컨텍스트 전환으로 인해 성능 오버헤드가 발생할 수 있습니다. Orchestrion은 컴파일 타임에 계측을 삽입하여 런타임 오버헤드를 최소화합니다.
     * 지원 환경: eBPF는 Linux 환경으로 제한되지만 Orchestrion은 다양한 환경을 지원합니다.
     * 전반적인 기능: eBPF는 기능이 제한적이지만 Orchestrion은 코드 레벨에서 작동하여 더 많은 기능을 제공합니다.

  보안을 위한 Orchestrion

     * 코드 레벨 작업을 통해 프로그램의 제어 흐름을 변경할 수 있는 계측을 삽입하여 RASP 기능을 구현합니다.
     * SQL 주입 또는 로컬 파일 포함과 같은 일반적인 취약점으로부터 애플리케이션을 자체적으로 보호할 수 있습니다.
     * 특정 API를 다른 API로 완전히 대체할 수 있어 개발자가 추적 컨텍스트 체이닝을 위해 모든 비즈니스 로직 계층에 컨텍스트 값을 전달하는 것에 대해 생각할 필요가 없습니다.
"
"https://news.hada.io/topic?id=18147","신임 관리자로서 저지를 수 있는 6가지 실수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        신임 관리자로서 저지를 수 있는 6가지 실수

     * 개별 기여자(IC)에서 매니저로의 전환은 큰 커리어 변화임
     * 특히 빠르게 변화하는 기술 업계에서 새로운 도전과 학습 기회를 제공함
     * 저자가 경험한 초기 몇 년 동안의 교훈은 많은 신규 매니저에게 공통적으로 적용될 수 있음

  🤝 위임

     * IC에서 매니저로 전환 시, 이전 책임에 집착하며 팀원에게 업무를 신뢰하지 못하는 경우가 많음
     * ""내가 하던 방식대로 할 수 없을 것""이라는 합리화를 할 수도 있음
     * 위임은 단순히 업무를 나누는 것이 아니라 팀을 신뢰하고, 성장하도록 돕는 것임
     * 팀의 성장을 도와야 본인도 성장할 수 있음

  🧠 도파민, 어디로 갔나?

     * IC 시절에는 새 프로젝트를 실행하며 도파민 보상을 얻었음
     * 매니저가 되면 직접적인 성과 보상이 줄어들며 공허함을 느낄 수 있음
     * 새로운 보상 시스템을 설계하는 것이 중요: 피드백 제공, 팀원 성장 관찰, 성과 평가 작성 등에서 만족감을 얻는 방식으로 전환해야 함
     * 더 이상 프로젝트를 직접 실행하지 않지만, 팀이 모든 프로젝트를 성공적으로 실행하도록 돕는 역할임

  🔍 양보다 질

     * 신규 매니저는 팀 규모 확대를 성공의 척도로 착각할 수 있음
     * 팀의 질적 성과에 초점을 맞추는 것이 중요
     * 팀이 아이디어를 내고 뛰어난 작업을 수행할 수 있는 환경을 조성해야 함
     * 크기가 작아도 잘 협력하는 팀이 더 큰 팀보다 우수한 결과를 낼 수 있음

  ⚖️ 적정한 참여 수준

     * 팀 프로젝트에서 너무 개입하면 마이크로매니징, 너무 관여하지 않으면 무관심해 보일 수 있음
     * ""Guided Autonomy"" 개념을 적용: 명확한 목표와 기대치를 설정한 후 팀이 독립적으로 달성할 수 있도록 맡김
     * 지원과 가이드를 제공하면서도 팀의 독립성을 보장하는 환경을 조성해야 함
     * 팀원이 책임감과 성장의 기회를 느낄 수 있도록 유도해야 함

  👁️ 인식 관리

     * IC 시절에는 성과가 명확했지만, 매니저의 성과는 보이지 않는 경우가 많음
     * 팀 내부에서는 성공의 촉진자로서의 역할을 팀원들이 인식하도록 해야 함
     * 외부에서는 팀 성과와 리더십의 기여를 명확히 전달해야 함
     * 이는 자신의 공로를 주장하는 것이 아니라 팀의 성과를 돕는 리더십을 보여주는 것임
     * 정치적인 요소로 비춰질 수 있으나, 이는 팀과 리더십의 가치를 올바르게 전달하는 과정임

  🌟 성공의 재정의

     * 매니저로 전환후 자신이 하는 일의 가치에 대한 의문이 생길 수 있음
     * 간단히 다음 두 가지 질문으로 성공을 정의할 수 있음:
          + 팀이 결과물을 내고 있는가?
          + 팀이 행복한가?
     * 두 질문에 ""예""라고 답할 수 있다면, 당신은 성공 중임 🎉


     * 실수는 성장의 기회임
     * 숙련된 매니저가 되기 위해 시간과 지속적인 학습이 필요함
     * 이러한 도전들을 받아들이고, 실수에서 배운 교훈을 경력의 이정표로 삼아야 함

   오.. 진짜 와닿는 글이네요. 메모메모

        Hacker News 의견

     * 새로운 관리자가 가장 큰 실수로 어려운 대화를 피하는 것임. 특히 이전에 함께 일했던 동료들과의 관계에서 더욱 어려움. 솔직하고 직접적인 피드백을 주지 않으면 팀 성과가 저하되고 불만족이 생김. 행동과 결과에 대해 이야기하는 것이 중요함.
     * 모든 사람은 개별 기여자임. 프로젝트나 팀을 관리할 때도 다른 방식으로 기여하는 것임. 관리자는 경험을 바탕으로 빠른 두뇌 작업을 다른 사람에게 맡기고, 자신은 배운 교훈을 적용함.
     * 관리직은 두뇌 속도가 느려지는 경향이 있어 개인적으로 즐기지 않음. 회의에서 문제를 천천히 생각하는 경향이 있음.
     * 직원에 대한 관심이 좋은 관리자가 되는 데 중요한 요소임. 팀을 구축하는 것이 가장 보람 있는 성취임. 관리자가 되고 싶지 않다는 것을 깨닫는 경우도 있음.
     * 새로운 팀에 합류한 관리자로서 기술적이지 않으면 문제가 됨. 보고서의 작업을 잘 알고 있어야 함.
     * 위임은 가장 어려운 일임. 팀의 성공이 자신의 성공임. 팀의 장애물을 제거하는 것이 관리자의 역할임.
     * 관리자의 역할은 눈에 띄지 않게 팀을 보호하는 것임. 성공을 재정의하는 것은 관리자와 상사의 몫임.
     * 관리자는 여전히 팀의 코드에 적극적으로 참여해야 함. 팀의 역량을 이해하고 부족한 부분을 채우기 위해 노력해야 함.
     * 품질보다 양을 중시하는 것은 관리자로서의 경력 성장에 좋지 않음. 인원 증가에 적극적이지 않으면 승진에 불리함.
     * 위임에 어려움을 겪었으나, 다른 사람이 80-90%만큼 잘 처리해도 회사에 더 좋다는 것을 이해함.
     * 도파민을 얻기 위한 방법으로 PowerPoint와 Excel을 활용하여 발표 자료를 만들고 공유함.
     * 이전 동료들이 여전히 친구라고 생각하는 것은 실수임.
"
"https://news.hada.io/topic?id=18211","klongpy - 파이썬용 고속 어레이 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     klongpy - 파이썬용 고속 어레이 프로그래밍 언어

     * NumPy의 강력한 성능을 활용하는 고성능 벡터화 연산으로 잘 알려진 Klong 배열 언어를 파이썬으로 변형한 것
     * ""Battery Included"" 철학으로 내장 모듈 + 파이썬의 에코시스템을 결합, Klong의 간결한 구문으로 애플리케이션을 빠르게 개발할 수 있도록 지원
     * 데이터 과학자, 금융 분석가, 연구자, 프로그래밍 언어 애호가들에게 유용하며, 높은 성능과 유연성을 제공

핵심 기능

     * NumPy를 활용한 벡터화 연산 : APL에서 유래된 Iverson Ghost의 후손인 NumPy를 사용하여 고효율 배열 조작을 지원
     * CPU 및 GPU 백엔드 지원 : CuPy를 통합하여 CPU와 GPU 모두에서 작동 가능하며, 다양한 컴퓨팅 옵션을 제공
     * Python 생태계와의 원활한 통합 : KlongPy의 내장 기능과 Python의 다양한 라이브러리를 결합하여 복잡한 애플리케이션을 손쉽게 개발 가능
"
"https://news.hada.io/topic?id=18162","2024년 꼭 봐야 할 기술관련 TED 강연들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2024년 꼭 봐야 할 기술관련 TED 강연들

     * 오디오 컴퓨터 세계에 오신 것을 환영합니다 - Jason Rugolo
     * AI는 어떻게 화면을 벗어나 현실 세계로 나올까요? - Daniela Rus
     * 이제 AI와 함께라면, 누구나 코더가 될 수 있습니다 - Thomas Dohmke
     * 마이크로 로봇을 통해 몸 속을 들여다보는 방법 - Alex Luebke, Vivek Kumbhari
     * 무한한 에너지의 비밀스러운 힘? 레이저 - Tammy Ma
     * AI의 발전이 멈춰 있나요? - Jennifer Golbeck
     * 수직 농업의 달콤한 미래 - Hiroki Koga
     * 엔터테인먼트의 AI 업그레이드 - Kylan Gibbs
     * 태양에 닿는 임무를 수행하는 탐사선 - Nour E. Rawafi
     * 예측하기 어려운 AI를 통제하는 방법 - Helen Toner

   2024년 꼭 봐야 할 기술관련 TED 강연들 공유 감사합니다.

   ted

   감사합니다

   2024테드 저장

   2024 테드

   2024테드 저장

   나중에 보기 위한 댓글

   favorite 기능이 있어서 저장해두기 좋답니다

   세상에 AI가 절반이네요

   아쉽게도 모든 발표가 한국어 자막이 있지는 않습니다.

   별도로 ""2024년 가장 인기있었던 TED 강연들"" 도 같이 챙겨 보세요
     * 미국이 젊은이들의 미래를 파괴하는 방법 - Scott Galloway
     * 그래서 AI가 결국 무엇일까요? - Mustafa Suleyman
     * 팔레스타인인과 이스라엘인, 얼굴을 마주하다 - Aziz Abu Sarah and Maoz Inon
     * 기후 변화의 임계점 - 우리는 현재 어디에 있을까요? - Johan Rockström
     * 외계인이 존재한다는 증거를 찾기 위한 나의 검색 - Avi Loeb
     * 직장에서 긍정적인 피드백만 주면 생기는 문제들 - Tessa West
     * 미국의 정치가 망가진 이유와 해결책 - Andrew Yang
     * 민주주의를 살리는 방법에 대한 코미디언의 견해 - Jordan Klepper
     * 공간 지능을 통해 AI가 현실 세계를 이해하게 된다 - Fei-Fei Li
     * 내가 잘못 알았던 티핑 포인트 - Malcolm Gladwell

   2024년 가장 놀라운 TED 강연들 도 있네요
     * 하늘로 향하는 불꽃 사다리 — 폭발 예술의 마법 - Cai Guo-Qiang
     * 단순한 벽돌이 아주 유망한 차세대 배터리가 될 수 있을까요? - John O'Donnell
     * 거칠고 복잡한 조각품 - 내 머리카락으로 만든 작품 - Laetitia Ky
     * 몰입형 라이브 엔터테인먼트의 놀라운 미래 - Willie Williams
     * Niceaunties 들의 기묘하고 멋진 예술 - Niceaunties
     * 배양육은 미래의 먹거리일까요? - Uma Valeti
     * AI의 다음 단계는? 춤추는 로봇 - Catie Cuan
     * 아빠가 둘인 생쥐 - 그리고 생물학의 새로운 개척지 - Katsuhiko Hayashi
     * 간단한 피 검사로 암을 진단할 수 있을까요? - Hani Goodarzi
     * 더 늦기 전에 프리온 질병을 치료하기 위한 나의 여정 - Sonia Vallabh
"
"https://news.hada.io/topic?id=18225","매일 5분만 써서 더욱 똑똑해지기 (feat. AI)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     매일 5분만 써서 더욱 똑똑해지기 (feat. AI)

     * 가추(Abduction)라는 추론 방식을 일상생활에서 연습하는 방법을 소개합니다.
     * GPT를 활용해 새로운 주제에 대한 가설을 세우고 검증하며 사고력을 향상시킬 수 있음을 강조합니다.
     * 일상에서 주변 현상에 의문을 가지고 가추를 연습하면 더 똑똑해 질 수 있습니다.
"
"https://news.hada.io/topic?id=18240","Steel - AI 에이전트 & 앱을 위한 오픈소스 브라우저 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Steel - AI 에이전트 & 앱을 위한 오픈소스 브라우저 API

     * 웹과 인터랙션하는 AI 에이전트 및 브라우저 자동화 도구를 만들기 위한 API
     * 자동화 인프라를 기초부터 구축하는 대신, 복잡한 작업은 Steel이 처리하는 동안 AI 애플리케이션에 집중할 수 있음
     * 브라우저 완벽제어 : Puppeteer 및 CDP를 사용해 Chrome 인스턴스 완벽 제어. Puppeteer, Playwright, Selenium과의 연결 지원
     * 세션 관리: 요청 간 브라우저 상태, 쿠키, 로컬 스토리지 유지
     * 프록시 지원: IP 회전을 위한 내장 프록시 체인 관리
     * 확장 프로그램 지원: 맞춤형 Chrome 확장 로드 가능
     * 디버깅 도구: 요청 로깅 및 세션 녹화 기능 포함
     * 안티 디텍션: 스텔스 플러그인 및 지문(fingerprint) 관리 제공
     * 자원 관리: 자동 정리 및 브라우저 수명 주기 관리
     * 브라우저 도구: API를 통해 페이지를 마크다운, 읽기 모드, 스크린샷, PDF로 빠르게 변환 가능
"
"https://news.hada.io/topic?id=18133","광고의 적정량은 제로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              광고의 적정량은 제로

새로운 유료 사이트 출시

     * The Verge는 새로운 유료 버전의 웹사이트를 출시하고 구독 서비스를 추가함.
     * 개인적으로 이러한 움직임에 반대하지 않으며, 광고로 가득 찬 사이트 대신 지속 가능한 사이트를 원한다면 프리미엄 모델이 앞으로 나아갈 길이라고 생각함.
     * 새로운 버전의 개인적인 하이라이트는 구독자들이 전체 텍스트 RSS 피드를 이용할 수 있다는 점임.

광고에 대한 의견

     * 광고가 적어지는 유료 옵션이 추가되었지만, 직접 지원받는 출판물의 적절한 광고 수는 0이라고 주장함.
     * 사용자가 돈을 지불하는 만큼 광고가 없어야 하며, 광고주에게 데이터를 판매하여 추가 수익을 얻는 것은 부적절하다고 비판함.

다음 단계

     * 아카이브를 계속 탐색하고 Ko-Fi 또는 Donorbox를 통해 지원할 것을 권장함.
     * 게스트북에 서명하고 이메일로 연결하거나 32-Bit Café에서 찾을 수 있음.
     * RSS를 통해 사이트를 팔로우하고 블로그롤을 탐색할 수 있음.
     * 블로그를 보내면 읽어보겠다고 제안함.

        Hacker News 의견

     * 미디어 비즈니스에서 하나의 수익원에 의존하는 것은 위험하다는 의견이 있음. 광고가 구독 비용을 보조하여 더 많은 사람들이 접근 가능하게 함.
          + 인터넷에서는 대부분의 회사가 구독료를 받고 광고를 줄이지 않음. The Verge는 사용자와 타협하려고 노력하며, 이는 구독 비용을 줄여줌.
          + Firefox를 사용하여 광고를 피하고, Amazon Prime과 YouTube에서 광고 없이 콘텐츠를 즐김. Amazon Prime은 필요할 때만 구독하고, 필요 없을 때는 취소함.
          + 웹사이트나 블로그에 구독료를 지불하지 않음. 많은 웹사이트에 구독료를 지불하는 것은 지속 가능하지 않음.
          + The Verge는 경쟁이 많아 구독할 가치가 없다고 생각함.
     * 광고가 없는 것이 이상적이지만, 네이티브 광고는 복잡한 균형을 요구함.
          + 네이티브 광고는 독자들이 원하는 콘텐츠일 수 있으며, 광고와 콘텐츠의 경계가 모호함.
          + 구독자가 이러한 광고를 보지 못하면 불만을 가질 수 있음.
     * 광고는 사회에 부정적 영향을 미치며, 제한적으로 허용되어야 한다는 의견이 있음.
          + 온라인 콘텐츠에 대해 지불하는 것은 개인 정보를 제공하지 않기 위함임.
          + 추적 광고는 없어야 한다고 주장함.
     * 광고의 적정 수는 하나라는 의견이 있음.
          + 독립 웹 개발자로서, 하나의 명확하고 비침해적인 광고가 독자에게 불편을 주지 않으며 동기 부여를 유지할 수 있다고 믿음.
     * 광고가 없는 서비스가 이상적이지만, 회사가 이를 제공할 의무는 없다고 생각함.
          + 신문, 케이블 TV, 잡지 등은 광고가 많지만 여전히 사람들이 구독함.
          + 구독자에게는 1차 광고만 제공하는 것이 더 지속 가능할 수 있음.
     * 디지털 광고는 개인 데이터를 판매하는 것이 아니라 특정 프로파일링을 기반으로 광고를 제공하는 것임.
"
"https://news.hada.io/topic?id=18195","내가 떠난 곳으로 - Redis 창시자 Antirez의 복귀 선언과 향후 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              내가 떠난 곳으로 - Redis 창시자 Antirez의 복귀 선언과 향후 계획

     * Redis 창시자인 Antirez(본명 Salvatore Sanfilippo)는 약 1620일 전(~4.44년) Redis 프로젝트를 떠났음
     * 떠난 후 Redis의 코드, 커밋 메시지 등을 전혀 보지 않았으며, 단지 필요할 때 소스 코드를 다운로드하고 컴파일만 했음
     * 과거 작업에 대한 애착이 없었던 것은 아님. 프로젝트 관리 업무의 증가로 창의적 작업이 줄어들었지만 Redis 작업은 여전히 즐겼음
     * 프로젝트를 떠난 이유는 가족과 시간을 더 보내고 새로운 도전을 하고 싶었기 때문임

코딩으로 돌아오다

     * 글쓰기 활동 중 코딩은 휴식의 한 형태였음
     * 임베디드 프로젝트, 신경망, Telegram 봇 제작 등 다양한 실험을 진행함
     * 시간이 지나면서 기술 세계에 다시 참여하고 싶다는 강한 욕구를 느꼈고 Redis 커뮤니티가 분열되는 것을 목격함
     * Redis 생태계에서 커뮤니티와 회사 간 다리 역할을 하는 ""전도사""로서 재참여를 고려함

뉴욕에서의 시간과 복귀 제안

     * 딸의 뉴욕 방문 소원을 계기로 Redis Labs의 새로운 CEO, Rowan Trollope와 연락을 취함
     * Redis 생태계와 코드베이스의 방향을 조정하는 역할을 제안했고 합의에 도달함

라이선스 전환에 대한 견해

     * Redis의 라이선스 변경은 본인의 결정이 아니었지만, 이를 이해하고 있음
     * 새로운 SSPL 라이선스는 SaaS 형태로 Redis를 판매하는 경우에만 제한을 두며, 대부분의 사용 사례에는 이전 BSD 라이선스와 비슷한 자유를 제공함
     * 라이선스 전환이 커뮤니티와의 균열의 주요 원인은 아니라고 주장함
     * 오히려 이 변화로 Redis의 핵심 개발에 다시 초점이 맞춰질 수 있기를 희망함

Redis의 새로운 데이터 구조와 AI 지원

     * Redis에 벡터 인덱싱 기능 추가를 구상 중이며, 이와 관련한 새로운 데이터 구조를 설계하고 있음
     * 새로운 데이터 구조는 기존의 정렬된 집합(sorted sets) 개념을 확장하여 다차원 점수(임베딩)를 기반으로 K-NN 매칭을 지원함
     * Redis의 ""개발자를 위한 레고""라는 철학을 이어가며, 개발자들이 직접 무언가를 창조하도록 독려함

Redis 커뮤니티와의 협력

     * Redis 커뮤니티의 기여에 감사를 표하며, 앞으로도 새로운 아이디어와 기능을 공유할 계획임
     * BlueSky에서 활동하며 Redis와 관련된 발전 상황을 공유할 예정임

결론

     * Antirez는 Redis 프로젝트에 다시 참여하며, 커뮤니티와 함께 새로운 여정을 이어갈 것임. Redis의 미래 발전을 위한 커뮤니티와 회사 간의 협력을 강화하고자 함

   오... 레디스(회사)의 큰 한 수가 나왔네요

        Hacker News 의견

     * Redis의 라이선스 변경에 대한 불만은 두 가지 이유에서 비롯됨
          + 많은 사람들이 Redis 프로젝트에 무료로 기여했으며, 이는 프로젝트가 동일한 오픈 소스 라이선스 하에 유지될 것이라는 이해 하에 이루어졌음
          + 오픈 소스 라이선스의 장점은 소프트웨어를 어떻게 사용할 수 있는지 명확히 알 수 있다는 점인데, 새로운 Redis 라이선스는 법적 조언이 필요할 수 있어 불편함
          + 이러한 라이선스 변화는 오픈 소스에 해로움
          + 오픈 소스 프로젝트를 기반으로 사업을 구축할 수 있었던 시절이 있었으나, 이제는 그렇지 않음
          + 기업이 오픈 소스를 기반으로 하면서 기여하지 않는 경향도 이해하지만, 명확한 정답은 없음
     * 글쓰기와 코딩의 경험에 대해 공유함
          + ""Game Programming Patterns""와 ""Crafting Interpreters""의 코딩은 즐거웠으나, 글쓰기는 정신적으로 힘들었음
     * 커뮤니티의 분열이 라이선스 때문이 아니라는 의견에 대해 의문을 가짐
          + 본인은 라이선스가 주된 이유라고 생각하며, 비슷한 입장의 사람들도 그렇게 생각함
     * Redis의 라이선스 변경에 대해 실망했으며, 대안으로 valkey를 고려함
          + 라이선스 변경이 있을 때마다 다른 대안으로 이동할 준비가 되어 있음
     * ""라이선스 변경""으로 인해 오픈 소스 소프트웨어를 출판하는 팀들이 의심받게 됨
          + MIT/GPL 라이선스에 기여하는 이유에 대해 의문을 가짐
          + 기업이 오픈 소스 프로젝트의 지원/커스터마이징을 위해 필요함
     * Salvatore의 복귀를 환영하며, 새로운 벡터 프리미티브를 만드는 것이 그의 강점이라고 생각함
          + 벡터와 임베딩 관련 도구들이 유용할 것이라고 기대함
     * Salvatore의 글에서 두 가지가 인상적이었음
          + Claude를 사용하는 것이 효율적이며, 프로그래밍에서 고립감을 덜어줌
          + Salvatore가 Gen AI를 사용하여 소프트웨어를 작성하는 방법을 설명한 부분이 인상적이었음
     * Claude가 다른 도구보다 앞서 있다는 의견에 대해 의문을 가짐
          + Amazon Q를 사용 중이며, 무료로 제공되는 것이 큰 장점이라고 생각함
     * 딸과의 뉴욕 여행 이야기가 감동적이었음
          + 자녀에 대한 사랑과 감사를 표현한 부분이 인상적이었음
     * 벡터 세트 디자인이 간단하고 우아하며, Redis의 API 디자인을 연상시킴
"
"https://news.hada.io/topic?id=18221","파산 판사, Infowars의 The Onion 매각 거부 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  파산 판사, Infowars의 The Onion 매각 거부 결정

     * 판사가 Infowars의 The Onion 매각을 거부함
          + Infowars는 음모론자 Alex Jones가 설립한 웹사이트로, The Onion이 인수하려 했으나 판사에 의해 거래가 중단됨.
          + The Onion의 입찰은 Sandy Hook 총격 사건 피해자 가족들과 총기 폭력 종식을 목표로 하는 비영리 단체의 지지를 받았음.
          + 2022년, Sandy Hook 사건 피해자 가족들은 Alex Jones를 상대로 14억 달러의 명예훼손 소송에서 승소했음.
          + The Onion은 Infowars를 음모론을 조롱하는 풍자 사이트로 만들 계획이었음.
     * 판사의 결정과 그 영향
          + 판사 Christopher M. Lopez는 Infowars의 운명을 불확실하게 만들었으며, 법원에서 임명한 신탁 관리자 Christopher Murray에게 대안을 마련하라고 지시함.
          + Murray의 접근 방식은 아직 명확하지 않으며, 즉각적인 응답은 없었음.
     * The Onion의 반응
          + The Onion의 모회사 Global Tetrahedron의 CEO Ben Collins는 판사의 결정에 ""깊은 실망""을 표명함.
          + Collins는 Sandy Hook 가족들이 긍정적인 결과를 얻을 수 있도록 계속해서 해결책을 모색할 것이라고 밝힘.
          + The Onion은 Infowars 인수를 계속 추구할 계획임.

        Hacker News 의견

     * 댓글 작성 시 사이트 가이드를 검토하고 준수해야 함
          + 주제가 논쟁적일수록 댓글은 더 사려 깊고 실질적이어야 함
     * NYT 기사에서 판사가 어떤 근거로 결정을 내렸는지 명시하지 않은 것 같음
          + 결정의 타당성을 판단하는 데 중요한 정보임
     * Alex Jones의 비타민 회사가 더 많은 현금을 제공했으며, 파산 시 현금이 부채 포기보다 중요함
          + 다른 채권자들이 더 많은 현금을 받는 것이 유리함
          + 경매가 부실하게 진행되었고, Onion이 웹사이트를 무료로 구매할 수 있도록 설계된 것 같음
     * 부동산 압류에서 채권자가 부채의 가치를 입찰하여 경매에서 이기는 것이 일반적임
          + 현금을 많이 준비할 필요가 없음
          + 이 상황과 다른 점이 무엇인지 궁금함
     * Onion의 CEO Ben Collins의 성명서가 있음
     * 파산 수탁자가 중립적인 제3자로서 과정에 관여했음
          + 채권자들에게 더 많은 돈을 제공하는 것이 목표지만, 이미 합의한 채권자들의 이익을 해칠 수 있음
          + 파산 판사들이 계획을 자주 거부하며, 이 사건은 주목받는 사례임
     * Onion이 실제로 Info Wars를 구매하려고 했다는 것을 한 주 동안 패러디 헤드라인으로 착각했음
          + 예술이 현실을 모방하는 시대에 살고 있음
     * Alex Jones를 지지하는 사람들이 많아 충격적임
          + 그는 부모들을 공격하고 재피해를 입히는 사업을 구축했음
          + 그 사업이 그에게서 빼앗겼는데, 사람들이 그것이 지나치다고 생각함
     * Jones가 이상한 사람처럼 보이지만, 그가 엄청난 금액으로 소송을 당하는 것은 우스꽝스러움
          + 사람들이 그가 직접 총격을 저질렀다면 덜 화를 냈을 것 같음
          + 인기 있는 팟캐스트 장르가 살인 사건을 다루며 이론을 제시하는 것과 차이가 무엇인지 궁금함
"
"https://news.hada.io/topic?id=18134","Everyvery V4 UUID

     * 이 웹사이트는 UUID V4를 검색할 수 있는 기능을 제공함
     * UUID V4는 무작위로 생성되는 고유 식별자로, 다양한 소프트웨어 시스템에서 사용됨
     * 이 사이트는 특정 UUID를 검색하여 해당 UUID가 존재하는지 확인할 수 있는 기능을 제공함
     * 이는 개발자들이 UUID의 중복 여부를 확인하거나 특정 UUID의 존재 여부를 빠르게 확인하는 데 유용함

     The most offensive sentence I could come up with leetspeak/hexspeak is this one:
     fe11a710-babe-4150-ace5-b19b1accd1cc
     (Yes it's a valid UUID)
     (I am so sorry)

   oh... 👀

        Hacker News 의견

     * 검색 기능이 작동하는 것이 매우 인상적임. 마법 같은 기술이 설명되면 간단해 보이는 것처럼 느껴짐
          + 프로젝트 작동 방식에 대한 블로그 포스트 링크가 제공됨
          + 전체 텍스트 검색을 지원하는 것을 몰랐는데, 이제 더 인상적임
     * 누군가 모든 UUID를 유출한 것 같음. 자신의 UUID가 유출에 포함되어 있는지 확인 필요함
     * 매우 유용함. UUID를 잊어버릴 때 참고할 예정임. 비트코인 개인 키를 기억하기 위해 이 사이트를 자주 사용함
     * HN에서 최근에 큰 숫자에 대한 설명 기사가 있었음. 바쁜 비버나 128비트 정수 같은 것임
          + 숫자의 크기를 설명하기 위해 다양한 활동을 통해 카운터를 증가시키는 방식으로 설명됨
          + 지구를 한 바퀴 돌고 종이를 쌓는 등의 활동을 반복하여 그 숫자에 도달하는 과정을 설명함
     * UUID를 생성하고 아무것도 사용하지 않을 때 낭비한 것 같은 기분이 들 때가 있음
     * 신발과 잘 어울리는 UUID를 찾았음. 346c7747-a421-4073-881e-7a7282b6150b가 그것임. 이 UUID는 내 것임. 사용하지 말아달라는 요청이 있음
     * 새로운 npm 패키지 get-uuid를 발표함. everyuuid.com을 로드하고 무작위 행 번호를 선택하여 UUID를 반환함
     * libraryofbabel.info를 떠올리게 함. 현재 다운된 상태지만 아카이브에서 확인 가능함
          + 3200자 가능한 모든 페이지를 포함하는 재미있는 구현임. 하지만 문자 세트가 제한되어 있어 UUID는 찾을 수 없음
     * 모든 .com 도메인이 유효한 UUID 목록일 것이라 생각했음. 얼마나 많은 도메인이 존재하는지 궁금해짐
          + 다른 댓글러가 이미 공유한 링크가 있음
     * 페이지 하단으로 이동했더니 페이지가 멈춤. 콘솔에 ""범위 초과 오류 - 2^122보다 작아야 함""이라는 메시지가 표시됨
"
"https://news.hada.io/topic?id=18199","구글 윌로우라는 물건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              구글 윌로우라는 물건

     * Google의 Willow 양자 칩 발표에 대한 전문가 견해
          + Scott Aaronson : 계산 복잡도 이론 분야에서 저명한 컴퓨터 과학자로 저서 ""스콧 애론슨의 양자 컴퓨팅 강의""가 있음
     * Q2B(Quantum 2 Business) 컨퍼런스 참석 중 Google Quantum 팀의 새로운 105큐빗 초전도 칩 ""Willow"" 발표에 참석했음
     * Willow 칩은 오류를 교정하는 서페이스 코드 큐빗과 대규모 양자 우월성 실험(Random Circuit Sampling)을 수행한 성과를 포함함
     * 발표는 Mountain View의 Computer History Museum에서 진행되었으며, 높은 기술 수준의 발표와 질의응답 세션으로 구성되었음

Google의 주요 성과와 과학적 의미

     * Willow 칩은 큐빗의 수를 2019년 이후 두 배로 늘리고 큐빗의 코히어런스 시간을 5배 증가시켰으며, 2-큐빗 게이트 정확도를 ~99.7%(Controlled-Z 게이트), ~99.85%(iswap 게이트)까지 향상시켰음
     * 서페이스 코드 크기를 3×3, 5×5, 7×7로 확장하며, 인코딩된 논리 큐빗이 더 오래 유지되는 현상을 발견
     * 이는 양자 오류 교정을 통한 안정적인 양자 컴퓨팅의 가능성을 보여주는 중요한 임계점으로 평가됨

Willow 칩의 제한점 및 향후 과제

     * Google은 완전한 오류 내성 큐빗을 정의하기 위해 다큐빗 연산에서 오류율을 10⁻⁶까지 줄이는 것이 필요하다고 명시
     * 현재 실험에서는 단일 인코딩된 큐빗만 생성했으며, 아직 다큐빗 연산 실험은 이루어지지 않음

양자 우월성 실험과 계산 시간

     * Willow를 이용한 새로운 양자 우월성 실험은 105큐빗과 40단계 게이트를 기반으로 수행되었음
     * 최신 시뮬레이션 알고리즘으로도 이 실험 결과를 고전적으로 검증하려면 최대 10²⁵년이 소요될 것으로 추정
     * 검증은 소규모 회로 결과를 기반으로 한 간접적인 방법으로 이루어짐

경쟁 기술과의 비교

     * 초전도 큐빗의 게이트 속도가 빠르지만, 트랩 이온 큐빗은 큐빗 이동과 높은 게이트 정확도를 제공
     * Willow는 Google이 경쟁자들에게 새로운 도전 과제를 제시한 사례로 평가됨

논쟁과 반응

     * 양자 컴퓨팅 회의론자 Gil Kalai는 Google의 주장을 신중하게 접근해야 한다고 언급하며, 기존의 양자 우월성 실험 데이터를 중심으로 반박
     * Google의 발표는 과장 없는 성과를 기반으로 이루어진 점에서 긍정적으로 평가됨

  결론

     * Willow는 양자 오류 교정 및 대규모 양자 실험의 가능성을 입증하며, 대체로 긍정적인 평가를 받고 있으며 분야의 중요한 이정표로 인정받고 있음
     * 향후 Google과 다른 경쟁자들 간의 기술 발전 속도가 주목됨
     * 양자 컴퓨팅의 발전은 계속되고 있으며, 실험적 성과가 점점 더 나아지고 있음

        Hacker News 의견

     * 소프트웨어 엔지니어로서 API를 소비하고 데이터베이스 행을 업데이트하는 것이 읽은 내용에 비해 유치하게 느껴짐. 양자 컴퓨터가 해결한 문제는 전통적인 컴퓨터로는 수조 년이 걸리지만, 양자 연구자 외에는 관심이 없음
          + 양자 연구자가 아닌 사람들이 관심을 가질 문제를 해결해주길 바람. 예를 들어, n=10인 여행 판매원 문제나 10자리 숫자 인수분해 같은 것
          + 현재 양자 컴퓨터는 상업적 핵융합과 같은 범주에 있음. ""돌파구""는 많지만 결과는 없음
          + 암 연구자들은 ""암을 치료할 수 있는 돌파구!"" 발표는 거의 없지만 꾸준한 진전이 이루어지고 있음
     * 에버렛 다중우주론에 대한 주장은 비논리적이라고 생각함. 평행 우주가 같은 계산을 동시에 수행하고 있다면, 전체 우주에 대한 성능 향상이 어떻게 가능한지 의문임
     * 초전도 큐비트와 트랩 이온, 중성 원자, 광자 큐비트에 대한 질문을 받는다는 것이 웃겼음. 두 단어 이상 이해했다면 질문했을 것임
     * 일반적인 유용한 작업에서의 성능이 어디 있는지 궁금함. Shor 알고리즘으로 인수분해할 수 있는 가장 큰 숫자나 Grover 알고리즘으로 사전 이미지를 계산할 수 있는 가장 큰 해시가 무엇인지 알고 싶음
     * 하드웨어는 발전 중이지만, 양자 컴퓨터에서 실행할 알고리즘이 부족함. RSA를 깨는 데 유용한 Shor 알고리즘 외에는 없음
          + 양자 시뮬레이션이나 최적화에 유용할 수 있다는 막연한 아이디어만 있음
          + 내일 완전한 양자 컴퓨터가 있다면 무엇을 실행할지 모름. 공백 상태임
          + 양자 알고리즘의 돌파구가 유일한 희망임. 이 분야에서는 진전이 거의 없음
          + Zapata Computing, 양자 알고리즘 분야에서 가장 잘 자금 지원받던 회사가 올해 문을 닫음
     * 관련 기사: Willow, Our Quantum Chip
     * ""10^25년"" 결과에 대한 가장 큰 경고는 Google이 충분히 주목하지 않았다는 점임. 이 양자 계산이 고전 컴퓨터로 시뮬레이션하는 데 ~10^25년이 걸린다는 이유로, 고전 컴퓨터가 양자 컴퓨터의 결과를 직접 검증하는 데도 ~10^25년이 걸림
          + 이 부분을 이해하지 못함. 설명이 필요함. 해결하는 데 오래 걸리지만 검증은 간단한 문제가 많음. 예를 들어, 매우 큰 소수의 곱으로 이루어진 큰 숫자의 인수분해 같은 것
     * 고전 컴퓨터가 양자 컴퓨터의 결과를 직접 검증하는 데 ~10^25년이 걸린다는 주장은 이해하기 어려움. 해결보다 검증이 훨씬 쉬운 문제가 많음. 왜 이런 접근법이 양자 컴퓨팅 주장 검증에 사용되지 않는지 의문임
     * 요약: 실제 결과임. 더 많은 큐비트가 더 오래 지속되는 것이 멋진 부분임. 나쁜 부분은 결과가 명시적으로 검증되지 않고, 추론을 통해서만 검증 가능함
"
"https://news.hada.io/topic?id=18153","2025년을 위한 7개의 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2025년을 위한 7개의 데이터베이스

     * 다양한 문제를 해결하기 위해 주목할 가치가 있는 DB 7개를 소개
     * 이는 ""최고의 DB"" 목록이 아닌, 새롭고 유용한 관점을 제공하는 도구들
     * 2025년엔 이들 각 DB에 대해 일주일씩 투자해보길 바람(7 DBs in 7 Weeks)

1. PostgreSQL: 기본 데이터베이스

     * PostgreSQL은 기본적으로 사용되는 안정적인 기술
          + ""Just use Postgres""라는 문구는 널리 알려진 밈이자 신뢰성을 상징하는 표현임
          + ACID를 준수하며 물리적 및 논리적 복제를 포함한 강력한 기능을 제공함
          + 주요 벤더들 간에 광범위한 지원을 받고 있는 안정적 데이터베이스임
     * PostgreSQL의 가장 큰 매력: 확장성
          + 확장 기능(Extensions)을 통해 독창적인 기능을 추가 가능함
          + 주요 확장 기능 예시:
               o AGE: 그래프 데이터 구조와 Cypher 쿼리 언어 지원
               o TimescaleDB: 시계열 데이터 작업 지원
               o Hydra Columnar: 열 기반 스토리지 엔진 제공
          + 확장 기능은 PostgreSQL을 타 데이터베이스와 차별화시키는 핵심 요소임
     * PostgreSQL의 유용성과 확장성
          + 다양한 생태계를 갖추고 있으며, 기본 설정이 합리적이고 사용자 친화적임
          + 비 PostgreSQL 서비스에서도 Postgres 와이어 프로토콜을 사용해 클라이언트 호환성을 제공함
          + WebAssembly(Wasm) 환경에서도 설치 가능할 정도로 가벼움
     * PostgreSQL 학습 권장
          + PostgreSQL의 가능성과 한계를 이해하기 위해 시간을 투자할 가치가 있음
          + 예: MVCC(Multi-Version Concurrency Control)의 복잡성 이해
          + 간단한 CRUD 애플리케이션 개발, PostgreSQL 확장 기능 작성 등을 추천함

2. SQLite: 로컬-우선 데이터베이스

     * SQLite는 ""로컬 우선"" 데이터베이스로 독립적으로 실행 가능
          + 클라이언트-서버 모델을 벗어나 애플리케이션과 같은 환경에서 실행됨
          + 예시: WhatsApp과 Signal은 기기 내부에 SQLite를 사용하여 채팅 데이터를 저장함
     * SQLite의 발전된 활용 사례
          + 기본 ACID 준수 데이터베이스 이상의 창의적인 사용 가능
          + 새로운 도구와 확장 기능:
               o Litestream: SQLite의 스트리밍 백업 제공
               o LiteFS: 분산 액세스를 지원하여 더욱 유연한 토폴로지 구현
               o CR-SQLite: CRDT(Conflict-free Replicated Data Types)를 사용해 변경 세트를 병합할 때 충돌 해결 필요성을 제거
     * SQLite의 인기 재조명
          + Ruby on Rails 8.0 덕분에 다시 주목받고 있음
          + 37signals: SQLite를 기반으로 Rails 모듈(Solid Queue 등)을 개발
               o Rails의 다중 SQLite 데이터베이스 관리 지원 (database.yml)
          + Bluesky: 개인 데이터 서버(Personal Data Servers)로 사용자마다 개별 SQLite 데이터베이스 사용
     * SQLite 활용 학습 권장
          + SQLite를 이용한 로컬 중심 아키텍처 실험
          + 기존의 PostgreSQL 기반 클라이언트-서버 모델을 SQLite로 대체할 수 있는지 시도

3. DuckDB: 모든 것을 질의할 수 있는 데이터베이스

     * DuckDB는 OLAP에 특화된 임베디드 데이터베이스
          + SQLite처럼 애플리케이션과 함께 작동하지만 OLTP 대신 OLAP 작업에 중점
          + 데이터 분석 및 쿼리 중심으로 설계된 시스템
     * DuckDB의 ""쿼리-애니씽(Query-Anything)"" 특성
          + 다양한 데이터 소스를 직접 SQL로 쿼리 가능:
               o CSV, TSV, JSON 등 일반 파일 형식
               o Parquet 등 고급 파일 형식 지원
          + 이 기능은 유연성을 제공하며, 예: Bluesky의 데이터 스트림 분석
     * 확장성 및 생태계
          + DuckDB에도 확장 기능이 존재하나, Postgres만큼 풍부하지 않음 (상대적으로 젊은 프로젝트)
          + 커뮤니티 기여 확장이 많이 있으며, gsheets(Google Sheets 연동)가 주목할 만함
     * DuckDB 활용 학습 권장
          + Python 노트북이나 Evidence를 통해 데이터 분석 및 처리 실험
          + SQLite와 결합: SQLite 데이터베이스의 분석 쿼리를 DuckDB로 위임해 성능 향상

4. ClickHouse: 컬럼형 데이터베이스

     * ClickHouse는 OLAP 작업에 특화된 데이터베이스
          + OLTP는 PostgreSQL, OLAP는 ClickHouse라는 조합이 이상적임
          + 대규모 분석 워크로드를 처리하며, 수평 확장과 샤딩을 통해 높은 데이터 삽입 속도를 지원함
     * ClickHouse의 주요 특징
          + 계층형 스토리지 지원:
               o ""핫 데이터""와 ""콜드 데이터""를 분리해 저장 가능
               o 예: GitLab 문서에서 이를 활용한 사례를 자세히 다룸
          + 대규모 데이터셋 처리 및 실시간 분석:
               o DuckDB로는 처리하기 어려운 크기의 데이터셋에 적합
               o 실시간 분석이 필요한 상황에서 강력한 성능 제공
     * 운영의 편리함
          + 배포, 확장, 백업 등 운영 관련 문서가 체계적이며 상세함
          + 예: 적절한 CPU 설정 방법까지 다룬 문서 제공
     * ClickHouse 학습 권장
          + 대규모 분석 데이터셋 실험 또는 DuckDB로 작업한 분석을 ClickHouse로 변환
          + ClickHouse의 임베디드 버전인 chDB를 활용해 SQLite와 더 직접적으로 비교 가능

5. FoundationDB: 레이어드 데이터베이스

     * FoundationDB는 ""데이터베이스의 기반"" 역할을 하는 독특한 시스템
          + 키-값 저장소로 설계되었으나 단순한 데이터베이스라기보다는 데이터베이스를 구축하는 ""기초""로 작동
          + 애플, Snowflake, Tigris Data와 같은 주요 기업에서 사용
     * 주요 특징 및 한계
          + 제한사항:
               o 트랜잭션 데이터는 10MB를 초과할 수 없음
               o 트랜잭션은 첫 번째 읽기 이후 5초를 넘길 수 없음
          + 이러한 제한으로 인해 대규모 환경에서도 완전한 ACID 트랜잭션 지원 가능
               o 예: 100TiB 이상의 클러스터 운영 사례
     * FoundationDB의 설계와 테스트
          + 특정 워크로드에 최적화되어 설계됨
          + 시뮬레이션 테스트를 통해 안정성과 확장성을 입증:
               o Antithesis 및 다른 데이터베이스에서도 동일한 테스트 방법론 사용
               o 관련 참고 자료: Tyler Neely와 Phil Eaton의 문서
     * ""레이어드"" 데이터베이스로서의 FoundationDB
          + 스토리지 엔진과 데이터 모델 간 결합이 느슨함:
               o 다양한 레이어에서 스토리지 엔진을 재매핑 가능
               o 예: Record 레이어, Document 레이어 (FoundationDB 조직에서 제공)
          + Tigris Data에서 작성한 레이어 설계 사례가 참고할 만함
     * FoundationDB 학습 권장
          + 튜토리얼을 진행하며 RocksDB 같은 시스템을 대체할 가능성 탐색
          + 설계 방법(Design Recipes)과 관련 논문 읽기
          + Anti-Features와 Features 문서를 통해 사용 제한과 해결 가능한 문제 이해

6. TigerBeetle: 철저하게 정확한 데이터베이스

     * TigerBeetle는 금융 트랜잭션에 특화된 단일 목적 데이터베이스
          + 범용 데이터베이스와 달리 특정 목적, 특히 금융 거래에 초점
          + 오픈 소스로 제공되며, 높은 수준의 신뢰성과 정확성을 목표로 설계
     * 철저한 정확성을 위한 설계 철학
          + NASA의 Power of Ten Rules 및 프로토콜 인지 복구(Protocol-Aware Recovery) 구현
          + 엄격한 직렬화(strict serialisability) 와 Direct I/O 사용으로 커널 페이지 캐시 관련 문제 회피
          + 안전성 문서(Safety doc)와 독특한 프로그래밍 방식 ""Tiger Style""에서 철저함을 확인 가능
     * Zig 언어로 구현된 혁신적 접근
          + Zig는 시스템 프로그래밍 언어로 비교적 신생이지만, TigerBeetle의 목표에 이상적으로 부합
          + 간결성과 성능을 극대화하는 데 Zig의 장점을 활용
     * TigerBeetle 학습 및 활용 제안
          + 로컬 배포 환경에서 금융 계좌 모델링 실험:
               o Quick Start를 따라 설치 및 사용
          + 시스템 아키텍처 문서(System Architecture docs)를 참고하여 범용 데이터베이스와 결합 가능성 탐구
          + 예: PostgreSQL 또는 FoundationDB와 함께 통합해 사용 사례 확장

7. CockroachDB: 글로벌 데이터베이스

     * CockroachDB는 글로벌 분산 데이터베이스
          + PostgreSQL 와이어 프로토콜과 호환되며, 수평 확장과 강한 일관성을 지원
          + Google Spanner에서 영감을 받은 설계로, 다중 지역에 걸친 데이터베이스 확장을 가능케 함
     * CockroachDB의 주요 기술적 특징
          + 시간 동기화 기술:
               o Google Spanner는 원자 시계와 GPS 시계를 사용하지만, CockroachDB는 일반 하드웨어에서도 동작하도록 설계
               o NTP 기반 동기화 지연 보정, 노드 간 클록 드리프트 비교 및 최대 오프셋 초과 시 멤버 종료
          + 다중 지역 구성:
               o 테이블 로컬리티(Table Localities) 기능을 통해 읽기/쓰기 트레이드오프에 따른 최적화 가능
               o 데이터가 사용자 지리적 위치에 맞게 분산되어 성능과 지연 시간을 개선
     * CockroachDB 활용 학습 제안
          + MovR 예제 재구현:
               o 원하는 언어와 프레임워크를 사용해 MovR(분산 애플리케이션 예제)을 구현
          + CockroachDB의 다중 지역 및 스케일링 전략을 활용하여 글로벌 애플리케이션 설계 실험
     * CockroachDB 선택 이유
          + DynamoDB와 같은 다른 분산 데이터베이스와 달리 로컬 환경에서 무료로 실행 가능
          + 강한 일관성과 글로벌 분산 지원이라는 차별화된 특성 제공

Wrap Up

     * 소개된 데이터베이스는 각기 다른 문제와 요구 사항을 해결하기 위해 설계됨
     * 2025년엔 이 데이터베이스들을 학습하며 더 흥미롭고 창의적인 문제 해결 방법을 탐구해보세요!

   Duckdb 분석 성능면에서 생각보다 탁월하여 깜짝 놀랐습니다

   몇달째 sqlite로. 일자별. 200만건, 5GB 수준의 데이터를 처리하는 작업을 수행하고 있습니다.

   처리속도는 만족하는데.. 이 녀석을 가공후 다시 엑셀로 만들어서 이해당사자들에게 제공하는 시간이 너무 오래걸리고 있습니다.

   OpenPyXl을 사용하는 방식에 연구를 좀 해야할거 같습니다.

   무슨 매직이 있는지 몰라도 duckDB + sqlite 조합을 쓴다고 하네요.

   의외로 MongoDB 가 언급되지 않았군요.

   수십년(??)째 MySQL만 사용 중인데,
   PostgreSQL은 어떠한지 현업에서 프러덕션으로 PostgreSQL 사용하시는 분들의 많은 댓글 기대합니다.

   ""코끼리는 물개보다 우수합니다""
   이는 대부분의 상황에서 사실입니다

   ㅋㅋㅋㅋ

   2001년에 버그 가득한 mysql(당시 v3.x)에서 pgsql로 넘어왔습니다.
   우월하다 생각하는 부분이 많지만.. 현실에서는 Partial Index의 존재가 가장 강력한 기능이라고 생각합니다.

   회사일때문에 Oracle, Sqlserver만 쓰다가 MySQL을 사용하려고 해보니 정말 ""왜 이게 안되지?"" 하는게 너무 많았습니다. 저도 정확하게는 기억이 안나네요.
   결국은 Postgres로 넘어왔습니다.

   Postgres 쓰다가 MySQL 쓰는곳으로 와서, 느낌 상 왜 이게 안돼? 왜 이게 성능이 안나오지? 하는 것들이 꽤 있습니다.
   정확하게 뭐였는지 기억은 잘 안납니다 (사소할수도 아닐수도)

   혹시 개발자 러닝커브가 걱정되는 환경이라면 SQLite 추천합니다. 파일기반이라 쉬워요.

   원격접근 요구사항이 없는게 확실시되면 정말 만족스러운 솔루션입니다. DB 관리포인트 없어지고 데이터 편집,백업/복구도 간편해서 좋습니다

   SQLITE 쓰겠다고 이야기하면 욕먹기 좋은데, SQLITE 썼다고 이야기하기 전에는 아무도 모르기도 하죠... SQLITE 생각보다 좋습니다.
"
"https://news.hada.io/topic?id=18244","Android XR: AI 기반의 새로운 확장 현실 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Android XR: AI 기반의 새로운 확장 현실 플랫폼

     * Google이 삼성, 퀄컴과 협력하여 새로운 확장 현실(XR) 운영체제인 Android XR을 발표함
     * Android 플랫폼의 자연스러운 진화 단계로서, AI 기술의 발전을 활용한 새로운 컴퓨팅 경험을 제공하는 것이 목표임
     * Gemini AI를 통해 자연스러운 상호작용과 의도 이해가 가능한 환경을 구축함

Android XR: 헤드셋과 안경을 위한 새로운 플랫폼

     * 삼성/Qualcomm과 협력하여 발표된 확장 현실(XR) 플랫폼
     * 헤드셋 및 안경을 통해 새로운 방식으로 탐험, 연결, 창작 가능
     * AI, AR, VR 기술을 결합한 차세대 컴퓨팅 운영 체제

Android XR의 주요 특징

     * 헤드셋을 위한 Android XR
          + 첫 번째 디바이스 Project Moohan은 삼성에서 제작하며 내년에 출시 예정
          + AI 어시스턴트 Gemini를 통해 사용자의 의도와 환경을 이해
          + YouTube, Google TV, Google Photos, Google Maps와 같은 앱이 XR 환경에 맞게 재구성
               o YouTube, Google TV 등을 가상의 대형 스크린에서 시청 가능함
               o Google Photos를 통해 3D로 추억을 회상할 수 있음
               o Google Maps의 몰입형 뷰로 도시와 랜드마크를 탐험할 수 있음
               o Chrome을 통해 다중 가상 화면으로 멀티태스킹이 가능함
               o Circle to Search 기능으로 간단한 제스처를 통해 정보 검색이 가능함
          + Google Play 앱과 호환되어 XR 전용 콘텐츠를 제공
     * 안경을 위한 Android XR
          + 향후 하루 종일 착용 가능한 스타일리시한 XR 안경 지원
          + 삼성이 개발 중인 Project Moohan이 2025년 출시 예정임
          + 가상 환경과 현실 세계를 자유롭게 전환할 수 있는 기능 제공
          + Gemini AI 비서를 통해 대화형 작업 지원과 기기 제어가 가능함
          + 일상용 스마트 안경도 지원 예정이며, 실시간 번역, 길 안내 등의 기능을 제공할 예정임
          + 프로젝트 Astra를 통해 소규모 사용자 그룹과의 실험 시작

XR 생태계 구축

     * ARCore, Android Studio, Unity 등 기존 개발 도구를 지원하여 개발자들의 진입 장벽을 낮춤
     * Lynx, Sony, XREAL 등 퀄컴 파트너사들과 협력하여 다양한 XR 기기 개발을 지원함
     * Magic Leap과 협력하여 AR과 AI 기술이 결합된 미래 제품을 개발 중임
     * 개방형 통합 플랫폼
          + 다양한 디바이스 선택 및 기존 Android 앱과의 호환성 제공
          + 개발자들에게 친숙한 Android 도구와 프레임워크로 새로운 경험 창출 가능
     * 개발자 및 크리에이터 초대
          + Android Developers Blog에서 시작 가이드 제공
          + XR 플랫폼의 발전을 함께 이끌어갈 기회 제공

프라이버시와 개발자 지원

     * 프로토타입 안경의 실제 테스트를 통해 프라이버시 보호 방안을 검증할 예정임
     * 개발자들을 위한 통합 플랫폼을 제공하여 다양한 기기에서 작동하는 앱 개발을 지원함
     * Android 기존 앱과의 호환성을 보장하며, XR에 최적화된 새로운 콘텐츠도 출시 예정임

미래 전망

     * Android XR은 컴퓨팅의 새로운 진화를 위해 설계된 플랫폼으로, 사용자는 몰입감 있는 경험과 현실 세계의 연결을 동시에 누릴 수 있음
     * AI와 XR의 결합으로 새로운 형태의 컴퓨팅 경험을 제공할 것으로 기대됨
     * 개방형 통합 플랫폼으로서 다양한 기기와 앱 생태계 구축을 목표로 함
     * 2025년부터 본격적인 기기 출시와 서비스 제공이 시작될 예정임

   삼성에서도 별도의 발표가 나갔네요.
     * https://news.samsung.com/kr/… (한글)
     * https://news.samsung.com/global/… (영문)

        Hacker News 의견

     * Google의 VR/XR 전략은 Cardboard, Daydream, Poly, Earth, TiltBrush 등 다양한 프로젝트에 투자했으나 일관성이 부족했음. 시장이 성장할 경우를 대비해 투자한 것으로 보임.
          + Daydream이 Android 기반으로 Quest 헤드셋의 대안이 될 수 있었을 것이라는 의견이 있음.
     * Meta가 Jetpack API를 Quest/horizonOS에 지원하기를 바라는 의견이 있음. 현재 SDK는 Unity/Unreal/Native에 제한적임.
          + 두 개의 경쟁 XR 플랫폼이 Android에서 작동하면 나쁘지 않을 것이라는 의견이 있음.
     * horizonOS의 문제점으로는 guardian 시스템이 사전 정의된 공간에 사용자를 가두고, 카메라 피드가 접근 불가능한 점이 있음.
          + 경쟁 압력이 Meta를 개선할 수 있을 것이라는 기대가 있음.
     * 현재 시장에는 많은 Quest 2 & 3 기기가 있지만 새로운 Samsung XR 글래스는 없음.
          + 새로운 XR 앱을 개발하는 개발자는 Quest에서 앱이 실행되기를 원할 것임.
     * Android처럼 개방적일지, Google Play처럼 폐쇄적일지에 대한 의문이 있음. 라이선스에 대해 명확하지 않음.
     * AI가 OS 수준에서 필요하다는 점을 이해하기 어렵다는 의견이 있음. AI는 앱 수준에서 더 적합할 것이라는 의견이 있음.
          + XR과의 연결성에 대해 불분명함. 버즈워드처럼 들림.
     * AI 비서가 시각적 기능을 갖추는 것이 유용할 것이라는 의견이 있음. 항상 사용 가능한 카메라를 안경에 넣는 것이 매력적일 것임.
     * Apple이 모바일 앱을 공간적으로 실행할 수 있는 능력을 표준화한 점에 대해 긍정적임.
          + Meta의 horizonOS 계획에 어떤 영향을 미칠지 궁금함.
     * 현대적인 독립형 HMD를 잠금 해제된 부트로더로 가질 기회로 보임. Meta와 ByteDance의 제품은 잠겨 있고 스파이웨어가 많음.
     * OS/UXD 수준에서 혁신적인 아이디어가 있음. Apple의 VisionOS보다 더 사려 깊고 혁신적이라는 의견이 있음.
          + 다른 XR 플랫폼에서 제품/서비스가 제한되는 것에 대한 불만이 있음.
          + 이전 XR 노력에 대한 경험으로 장기적인 투자에 대한 신뢰가 없음.
     * 새로운 Android로 자체 안경을 만들어야 한다는 의견이 있음. 이름은 Google Glass로 해야 한다고 제안함.
     * 이 기능이 휴대폰 OS의 일부가 되어 USB-C로 헤드셋을 연결하는 방식이 되면 좋겠다는 의견이 있음.
          + Android Auto, Dex, XR과 함께 단일 컴퓨터를 휴대할 수 있는 상태가 될 것임.
     * 일부 목업이 Google Glass와 유사하다는 의견이 있음. 헤드 마운트 카메라가 모든 것을 클라우드로 전송하는 것이 일반화되기는 어려울 것이라는 의견이 있음. 세대 간 변화가 있을 것임.
"
"https://news.hada.io/topic?id=18190","Show GN: [작은 앱 프로젝트] 윤슬 가계부: 아이폰, 아이패드, 맥 가계부 앱 (Mac Catalyst 사용 사례)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: [작은 앱 프로젝트] 윤슬 가계부: 아이폰, 아이패드, 맥 가계부 앱 (Mac Catalyst 사용 사례)

   작은 앱 프로젝트 시작 이후 6번째로 출시한 '윤슬 가계부' 앱을 소개드립니다 🙏

   📌 작은 앱 프로젝트

   모든 앱들이 점점 더 복잡해지고 있습니다.

   생각해봤습니다.

   꼭 많은 기능과 서비스를 제공하는 복잡한 앱만이 사람들에게 유용할까? 필요한 기능만 제공하는 단순한 앱도 사람들에게 유용할 수 있지 않을까?

   윤슬 가계부 앱은 그런 저의 생각에서 출발한 '작은 앱 프로젝트'의 '작은 앱' 중 하나입니다. 평균적인 앱의 복잡도가 크게 올라간 지금 이 시대에 사람들은 작은 앱에 어떻게 반응할 지 궁금합니다. 과연 슈퍼 앱들과의 경쟁에서 살아남을 수 있을까요?

   저는 2022년부터 '작은 앱 프로젝트'라는 도전을 이어나가고 있으며, 지금은 전 세계 사람들에게 '오직 필요한 기능만 제공'하는 '작은 앱(Small App)' 생태계를 제공한다는 목표로 꾸준히 새로운 작은 앱들을 만들고 개선해 나가고 있습니다.

   꼭 필요한 기능만 제공하는 단순한 '작은 앱'이 많은 분께 도움이 되기를 바랍니다 ☺️✨

   📌 윤슬 가계부
   캘린더로 관리하는 지출 & 수입
   https://apps.apple.com/kr/app/id6514279917

   지출 관리.
   필요한 기능만.

   말이 필요 없는 단순함.
   그 단순함이 주는 편리함.

   지출 관리에만
   집중할 수 있도록 도와드립니다.

   📌 [기술] Mac Catalyst

   윤슬 가계부 앱은 'Mac Catalyst'라는 기술을 활용해 아이폰(iPhone)과 아이패드(iPad), 맥(Mac) 앱을 하나의 코드 베이스로 운영하고 있습니다.

   Mac Catalyst는 iPad 앱을 macOS에서 실행할 수 있도록 변환하는 Apple(이하 '애플'로 표기)의 기술입니다. 이 기술을 활용하면 iPad용으로 개발된 앱을 최소한의 수정만으로 macOS에 포팅할 수 있습니다.

   Mac Catalyst로 맥 앱을 출시할 때 가장 큰 고민은 '안정성'이었는데요. 사용자 분들께서 실제 앱을 쓰실 수 있을 만큼 신뢰할 만한 기술인지 고민이 많았었지요. Mac Catalyst를 활용해 출시한 첫 맥 앱이었던 '스케줄러' 앱을 지난 6개월 동안 운영해 본 결과 실제 배포 환경(Production)에서도 충분히 신뢰할 만하다고 결론을 내렸습니다 🙌

   두 번째 고민은 '기능의 제약'이었습니다. Mac Catalyst 앱에서는 AppKit과 같은 맥 고유의 프레임워크 사용에 제한이 있습니다. 생각보다 이 제한에 걸리는 일은 없었고, 꾸준히 연구해 보니 자체 기술로 대체하거나 필요에 따라 Mac Native 앱으로 전환하면 되기 때문에 고민이 해결되었습니다.

   시간을 효율적으로 써야하는 1인 IT 기업(인디 해커)으로서 Mac Catalyst는 대단히 고마운 기술입니다. 최신 macOS인 macOS Sequoia(macOS 15)에서는 Mac Catalyst에 쓰이는 iPad SwiftUI View들이 사용자 님들께서 더욱 편하게 쓰실 수 있도록 개선되기도 해 정말 기뻤습니다.

   iOS 개발에 익숙하신 분들께서 macOS 앱에 관심이 있으시다면 Mac Catalyst를 활용해 보시는 걸 추천드려 봅니다 👍

   부쩍 쌀쌀해진 날씨에 건강 잘 챙기시실 바라겠습니다 ☃️
   행복한 연말 보내시길 바랄게요 🎄✨

   아이폰 유저는 아니지만..
   응원합니다..
   이상한 댓글에 상처 받지 마시고..
   앞으로 주욱... 전진하세요..

   안녕하세요? 😎 큰 위로가 되는 감사한 말씀을 남겨주셔서 정말 넘나 감사드립니다 🙏 말씀주신 것처럼 꾸준히 열심히 노력하며 전진해 보도록 하겠습니다!! 💪 저도 응원하겠습니다!!!!! 언제나 건강부터 잘 챙기셨으면 좋겠습니다. 행복한 금요일, 행복한 주말 보내시길 바랄게요 🌈✨

   어느덧 광고창이 되버렸네;

   안녕하세요? 😊 제 글이 기분을 나쁘게 해드려 정말정말 죄송합니다 🙇‍♂️🙇‍♂️🙇‍♂️ 이 글은 GeekNews 'Show' 섹션 가이드라인을 꼼꼼히 읽고 가이드라인을 지키고자 노력한 뒤 올린 글로 마음에 드시지 않았더라도 부디 너그러운 마음으로 이해 부탁드리겠습니다 🙏 감사합니다!! 행복한 오후 시간 보내시길 바라겠습니다~! ☀️

   공간 자체가 본인이 만든 프로덕트를 옮기는 공간임을 잊지 말아주세요.
"
"https://news.hada.io/topic?id=18251","일론 머스크는 OpenAI가 영리 기업이 되길 원했었음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     일론 머스크는 OpenAI가 영리 기업이 되길 원했었음

     * OpenAI를 영리 목적으로 전환하려 했던 Elon Musk의 시도와 그 이후의 과정을 시간순으로 정리한 내용임
     * 일론 머스크는 OpenAI의 영리 기업 전환을 막기 위해 법적 조치를 취하고 있음
     * 머스크는 OpenAI의 공동 창립자였으나, 현재는 경쟁 AI 기업인 xAI를 운영 중임
     * 머스크는 OpenAI와 CEO 샘 알트만이 공익보다 이익을 우선시한다고 주장하며, 이러한 구조 변경이 반경쟁적이고 독점적이라고 비판함
     * 초기 비영리 단체로서의 OpenAI와 현재의 유한이익 구조로 전환하게 된 배경을 이해할 수 있음

사건의 타임라인

     * 2015년 11월: OpenAI가 비영리로 시작되었음. Elon은 이에 대해 의문을 제기함
     * 2015년 12월: OpenAI가 공식 발표되었음
     * 2017년 초: AGI 개발에 필요한 컴퓨팅 자원을 위해 수십억 달러 규모의 자금이 필요하다는 것을 인식함
     * 2017년 여름: Elon과 OpenAI는 미션을 발전시키기 위한 다음 단계로 영리 기업이 필요하다고 합의했음
     * 2017년 가을: Elon은 영리 기업의 대주주, 절대적 통제권, CEO 자리를 요구했음
     * 2017년 9월: Elon은 ""Open Artificial Intelligence Technologies, Inc.""라는 공익 법인을 설립했음
     * 2017년 9월: OpenAI는 Elon의 조건을 거절했음. 이는 OpenAI의 미션에 반하는 것이었음
     * 2018년 1월: Elon은 OpenAI가 Tesla와 합병하지 않으면 실패할 것이라고 주장했음
     * 2018년 2월: Elon은 OpenAI 공동 의장직에서 사임했음
     * 2018년 12월: Elon이 즉시 연간 수십억 달러 규모의 자금 조달이 필요하다고 주장함
     * 2019년 3월: 비영리 단체가 관리하는 유한이익 구조의 OpenAI LP 발표
     * 2023년 3월: Elon은 OpenAI 경쟁사인 xAI를 시작했음

  Elon Musk의 최근 법적 조치

     * Elon은 OpenAI에 대한 법적 조치를 통해 자신의 주장을 재구성하려 했음
     * 2017년 Elon은 OpenAI의 새로운 구조로 영리 기업을 원했으며 이를 실제로 설립했음
     * 다수 지분과 완전한 통제권을 얻지 못하자 OpenAI를 떠나 실패할 것이라고 말했음
     * 현재 OpenAI는 AI 연구의 선두 주자이며 Elon은 경쟁 AI 회사를 운영하고 있음
     * Elon은 법원에 OpenAI의 미션 수행을 막아달라고 요청하고 있음

  OpenAI의 미션

     * OpenAI의 미션은 AGI가 인류 전체에 이익이 되도록 하는 것임
     * Elon의 초기 기여에 대해 감사하지만, 시장에서 경쟁해야 한다고 생각함
     * 미국이 AI 분야에서 글로벌 리더로 남아 있는 것이 중요함
     * OpenAI는 미션 중심의 조직으로 남을 것임

  결론

     * Elon Musk는 OpenAI를 영리 기업으로 전환하고자 했으나, 그의 일방적 통제권 요구로 인해 실패함
     * 이후 OpenAI는 비영리 단체가 관리하는 유한이익 구조를 채택하여 사명을 유지하면서도 필요한 자금을 조달할 수 있게 됨
     * Elon Musk는 결국 자신의 AI 회사인 xAI를 설립하여 OpenAI와 경쟁하는 입장이 됨

  법적 분쟁 관련

     * 현재 Elon Musk는 OpenAI를 상대로 소송을 제기했으나, 이는 1년 내 네 번째 시도임
     * 법원은 2025년 1월 14일에 머스크의 가처분 신청에 대한 심리를 진행할 예정
     * OpenAI는 Elon이 법정이 아닌 시장에서 경쟁해야 한다는 입장을 표명함

   일론머스크의 행보를 보고 있으면, SF영화에서 빌런이 어떻게 탄생했는지 보여주는 프리퀄 같은 느낌이 있네요.

   이글이 맞다면 개 진흙탕 싸움인데..
   open ai 영리아님으로 설립 -> 엘론 영리 주장 -> open ai는 영리안하기위해 엘론 쫒아냄 -> open ai는 엘론없이 영리로 변경 -> 엘론은 open ai의 영리는 위험하다고 주장 -> 엘론의 영리 ai 설립

   일론도 재앙이지만, 알트만도 준-영리화한 장본인이기도 하니 아직 안전하진 않음. 과연 인류 전체에 이익이 되는 방식으로 기술발전이 될지는 지켜볼 문제로 보임.

        Hacker News 의견

     * OpenAI의 이사회가 세계의 운명을 결정할 것이라는 주장과 2020년까지 로봇공학이 완전히 해결될 것이라는 예측이 있음
          + OpenAI의 목표는 AGI 독재를 피하는 것임
          + 많은 투자에도 불구하고 큰 성과가 없고, 대규모 제품-시장 적합성도 명확하지 않음
     * OpenAI의 비즈니스 모델에 대한 설명이 있음
          + Ilya와 나는 AGI가 10년 이내에 실현될 수 있다고 믿게 할 수 있음
          + 기부와 투자에 대한 큰 관심이 있음
          + 비영리로 가장하여 자금을 모은 후 영리로 전환하는 것이 문제임
     * HER 알고리즘이 이전에 해결할 수 없었던 저차원 로봇 작업을 빠르게 해결할 수 있음
          + 6개월 내에 HER 알고리즘을 사용하여 루빅스 큐브, 펜 스피닝, 중국 공 스피닝 중 하나를 달성할 것임
     * 하드웨어 우위를 확보하려는 계획이 있음
          + 2년 내에 TPU 3.0과 유사한 4칩 카드를 제작할 수 있음
     * 엘론 머스크가 개인적으로 주식에 관심이 없으며 화성에 도시를 건설하기 위해 800억 달러를 모아야 한다고 언급함
     * OpenAI의 공개적인 부분은 그들의 문제점이 항상 드러난다는 것임
     * AGI를 추구하는 인간들이 충분한 자연 지능이 부족하다고 생각함
          + 좁고 잘못된 관점을 가진 사람들이 많은 권력, 돈, 영향력을 가지고 있어 걱정됨
     * 엘론 머스크가 시장에서 경쟁해야 한다는 의견이 있음
          + x.ai와 같은 프로젝트를 통해 시장에서 경쟁 중임
          + 엘론의 위선에 대한 지적이 있음
     * 사람들은 항상 생각을 바꿀 수 있음
          + 2017년에 원했던 것이 2024년에 같거나 다를 수 있음
     * Google/Gemini는 이러한 문제를 가지고 있지 않음
"
"https://news.hada.io/topic?id=18252","1968년 IBM의 Executive Terminal 시연을 담은 새로운 비디오","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              1968년 IBM의 Executive Terminal 시연을 담은 새로운 비디오

     * IBM이 경영진을 위한 전쟁실을 만들었을 때
     * IBM의 경영진 단말기 1968년 데모 영상
          + IBM의 경영진 단말기는 컴퓨터, 비디오, 디지털 정보 전달을 통해 고위급 의사 결정을 촉진하려는 시도였음
          + 1968년의 데모 영상은 이러한 시도를 잘 보여줌
          + 원본 사진 제공: Penny Ahlstrand; The Dunlop Collection

        Hacker News 의견

     * 초기 시스템 버전은 IBM 3270 디스플레이와 전화 수화기를 사용했으며, 키보드는 없었음. 경영진이 전화를 걸면 콜센터의 누군가가 스프레드시트 작업을 대신 수행했음
     * ""마우스""라는 이름의 유래에 대해 회고하며, 역사적인 순간을 보는 듯한 느낌을 받았음
     * IBM의 계층적 접근 방식과 Englebart의 Mother of All Demos의 대조적인 비전을 흥미롭게 봄. IBM의 비전은 컴퓨팅 기반이 아니며, 전용 기업 비디오 통화 시스템의 데모에 가까움
     * Dunlop의 1968년 비디오 시연은 세 가지 행위로 진행됨. 링크된 비디오는 실제 시연이 아닌 편집되지 않은 B-roll 영상임
     * 올해 Vintage Computer Festival West에서 Computer History Museum을 방문했으며, 빈티지 컴퓨팅 하드웨어의 개인 컬렉션을 볼 수 있었음. 종교적인 경험이었음
     * ""Control"" 게임의 미학과 액션 게임, 초자연적인 요소를 좋아한다면 이 게임을 시도해보길 권장함
     * 대문자 문자는 위에 막대/마크론을 사용하여 표현됨. 이 관습을 본 적이 없었음
     * QUIKTRAN은 수학적 유틸리티가 아닌 초기 시분할 시스템이었음. 사용자 만족도 조사에서 응답 시간의 변동성이 사용자에게 불편함을 주었음
     * 비디오가 상사의 뒤에서 프로그래머와 함께 작업하는 페어 프로그래밍을 상상한 것 같음. 실제로는 상사가 프로그래머의 느린 작업을 참을 인내심이 없었을 것 같음
     * 컴퓨팅 역사를 기록하는 것은 다양한 연구에 중요함. 사람들이 이러한 역사적 자료를 수집, 복원, 출판하는 것이 훌륭함
     * 60년대부터 데모의 신들이 우리를 저주해왔다는 것을 알게 되어 위안이 됨
"
"https://news.hada.io/topic?id=18209","HN 출시: Double (YC W24) – 0% 비용 비율의 인덱스 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 출시: Double (YC W24) – 0% 비용 비율의 인덱스 투자

     * Double 소개
          + Double는 50개 이상의 주식 시장 지수에 0% 비용 비율로 투자할 수 있는 플랫폼임.
          + 관리, 리밸런싱, 세금 손실 수확 등을 월 $1에 제공함.
          + Robinhood가 수수료를 없앤 것처럼 ETF와 뮤추얼 펀드에 저비용 트렌드를 도입하는 것이 목표임.
     * 비용 절감의 중요성
          + 금융 자문가는 연간 자산 관리 비용으로 1%를 청구하며, ETF는 평균 0.17%의 비용 비율을 가짐.
          + 30년 동안 $500k 포트폴리오에 매월 $2k를 투자할 경우, 금융 자문가에게 $1.30M, 평균 ETF에 $244k, 낮은 비용의 VOO에 $42,951를 잃게 됨.
     * Double의 장점
          + Double은 개별 주식을 구매하여 인덱스 투자 가능하며, 맞춤형 세금 손실 수확을 제공함.
          + 50개 이상의 전략을 제공하며, 섹터나 주식의 가중치를 다르게 설정하거나 스크래치에서 인덱스를 구축할 수 있음.
          + M1 Finance와 비교하여 더 강력한 기능을 제공하며, 세금 손실 수확, 더 넓은 범위의 인덱스, 더 큰 맞춤화 가능성을 제공함.
     * 기술적 도전과 학습
          + 포트폴리오 소프트웨어 구축 과정에서 주식의 지속적인 식별자가 없다는 점을 배움.
          + 큰 직접 인덱스 포트폴리오에서 세금 손실 수확을 최적화하는 방법에 대해 학습함.
     * 리스크 관리
          + Double이 사업을 중단하더라도 자산은 Apex Clearing에 안전하게 보관되며, 자산 접근 및 이전을 위한 프로세스가 마련되어 있음.

        Hacker News 의견

     * ETF의 스프레드 비용에 대한 의견: ETF의 스프레드는 개별 주식의 스프레드 합보다 작음. 이는 ETF 시장 조성자와 차익 거래자 덕분이며, 개별 주식을 구매하면 모든 주식에 대한 스프레드 비용을 지불해야 함. 이러한 비용은 크지 않지만 VOO의 17bps/yr 비용 비율과 비교할 때 중요함.
     * $1/월 가격 정책에 대한 의견: 대부분의 제공자가 더 많은 수익을 내는 시장에서 $1/월로 판매하는 것은 저렴한 B2C 서비스보다도 낮은 가격임. 고객이 신뢰할 수 있는 수익 모델이 필요함.
     * 금융 보안에 대한 우려: Synapse 사건 이후, SIPC 보험이 실제로 자금 손실을 보장하는지 확인하고 싶음. 새로운 핀테크 제품에 대한 불신이 있음.
     * 서비스 비교에 대한 질문: Fidelity나 Schwab의 무비용 뮤추얼 펀드와 비교했을 때 이 서비스가 어떻게 다른지 궁금함. 유동성 문제나 스프레드 비용이 발생할 수 있는지에 대한 의문이 있음.
     * 거래 흐름 판매 및 대출 수수료에 대한 질문: Citadel과 같은 시장 조성자에게 거래 흐름을 판매할 계획인지, 대출 수수료를 투자자에게 환급할 것인지에 대한 질문이 있음.
     * 새로운 서비스에 대한 긍정적인 의견: Vanguard와 Fidelity가 오랜 기간 동안 표준 ETF에 머물러 있는 반면, 이 서비스는 더 세분화된 가중치 조정과 일일 세금 손실 수확을 제공함. 사용자에게 주식 대출에 대한 선택권을 제공할 것을 희망함.
     * 가격 정책에 대한 의견: AUM에 기반한 가격 책정을 원하지 않지만, $1은 너무 낮음. 초기 고객으로서 더 많은 금액을 지불할 의향이 있음.
     * 미국 전용 서비스에 대한 불만: 미국 외 거주자는 서비스 이용이 불가능하다는 점을 명확히 해주었으면 함. 계정 삭제 방법이 없다는 점도 문제임.
     * ""소프트 숏"" 옵션에 대한 제안: 특정 주식을 제외한 인덱스를 제공하는 것이 가능함. 이는 일반적인 숏 포지션의 무제한 손실을 피할 수 있는 방법임.
     * 리밸런싱 및 세금 손실 수확에 대한 의견: 리밸런싱은 과세 이벤트이며, 새로운 투자에 초점을 맞추는 것이 더 나은 접근법일 수 있음. 세금 손실 수확이 세금을 절약하는 방법으로 제시되는 것은 오해의 소지가 있음.
"
"https://news.hada.io/topic?id=18139","Llama-3.3-70B-Instruct","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Llama-3.3-70B-Instruct

     * Llama 3.3 컬렉션
          + 이 컬렉션은 Llama 3.3의 변환기와 원본 저장소를 포함하고 있음
          + 최근 8시간 전에 업데이트됨
          + 총 1개의 항목 포함

        Hacker News 의견

     * Llama 3.2 405B와 비교했을 때 성능이 비슷하거나 약간 더 나은 것으로 보임
          + Zuck에 따르면 Llama 3 시리즈의 마지막 릴리스이며, Llama 4는 2025년에 출시될 예정임
          + Steve Jobs가 Dropbox에 대해 '기능이지 제품이 아니다'라고 한 유명한 발언을 상기시킴
          + Meta는 강력한 모델을 오픈소스로 제공하여 AI를 상품화하고 있으며, 이를 통해 Facebook과 Instagram의 서비스를 강화할 수 있음
          + AI를 판매하는 것이 아니라, AI를 사용하여 핵심 비즈니스를 강화하는 것임
          + 오픈소스로 제공함으로써 널리 채택되고 개발되는 이점을 얻을 수 있음
     * 우리의 벤치마크에서 예상보다 잘 수행됨
          + 더 깊이 살펴볼 예정이지만 인상적임
     * 현재 좋은 ""일반"" Mac 데스크톱 클라이언트에 대한 논의가 계속되고 있음
          + Ollama, ChatGPT, Claude, Perplexity 등을 사용하고 싶음
          + 다양한 앱에서 AI 채팅을 사용하고 싶으며, 데스크톱 앱일 필요는 없음
          + MacMind는 멋지지만 다른 API의 프론트엔드로 많은 비용이 듦
          + ""구두쇠가 되지 말라""는 답변도 합리적임
     * 여러 벤치마크에서 GPT-4o와 비슷한 성능을 보임
     * Hugging Face에 4bit bitsandbytes, GGUFs 및 원래 16bit 가중치를 업로드함
          + Llama 3.3 70B를 48GB VRAM 이하에서 2배 빠르게 미세 조정할 수 있으며, 메모리 사용량을 70% 줄일 수 있음
     * OpenRouter에서 1M 토큰의 가격을 추적 중이며, 새로 고침할 때마다 가격이 감소하고 있음
     * Llama의 오픈 소싱은 ""Commoditize Your Complement"" 전략의 훌륭한 예시임
          + 이 전략에 대해 들어보지 못한 사람들을 위해 Gwern의 ""Laws of Tech: Commoditize Your Complement"" 링크 제공
     * Hugging Face 모델에 대한 질문
          + 노트북에서 JupyterLab을 통해 실행할 수 있는지
          + 어떤 이점이 있는지
          + 정기적으로 업데이트할 수 있는지
          + 특정 용도에 맞게 미세 조정할 수 있는지
          + 모델을 미세 조정하는 데 얼마나 많은 시간과 노력이 필요한지
          + Hugging Face가 이러한 질문에 대한 답변을 제공하는지 여부에 대한 URL 요청
     * Meta는 OpenAI/Anthropic을 목표로 강력한 오픈 모델을 출시하여 지속적으로 기대 이상을 제공함
          + 큰 수혜자는 개발자들임
"
"https://news.hada.io/topic?id=18152","Show HN: Countless.dev – 모든 AI 모델을 비교하는 웹사이트: LLMs, TTSs, STTs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show HN: Countless.dev – 모든 AI 모델을 비교하는 웹사이트: LLMs, TTSs, STTs

AI 모델 비교 소개

     * AI 모델 비교: 다양한 AI 모델을 쉽게 비교할 수 있는 오픈 소스 프로젝트임. 무료로 제공되며, 각 모델의 입력 및 출력 길이, 가격 등을 비교할 수 있음.

  가격 비교

     * 모델별 가격: OpenAI, Azure, Anthropic, Google 등 다양한 제공자의 모델들이 포함되어 있으며, 각 모델의 입력 및 출력 길이에 따른 가격이 명시되어 있음.

  모델 기능 비교

     * 지원 기능: 모델들이 지원하는 기능에는 Vision, Chat, Embedding, Image generation, Completion, Audio transcription, TTS 등이 포함됨.

  주요 모델 및 가격

     * OpenAI: gpt-4, gpt-3.5-turbo 등 다양한 모델이 있으며, 입력 및 출력 길이와 가격이 다양함.
     * Azure: gpt-4o, gpt-4-turbo 등 다양한 모델이 있으며, 일부 모델은 Vision 기능을 지원함.
     * Anthropic: Claude 시리즈 모델들이 있으며, 다양한 입력 및 출력 길이를 지원함.
     * Google: Gemini, Chat-bison 등 다양한 모델이 있으며, 일부 모델은 Vision 기능을 지원함.

  모델 선택 시 고려 사항

     * 가격: 모델의 입력 및 출력 길이에 따른 가격을 고려해야 함.
     * 기능 지원: 필요한 기능을 지원하는 모델을 선택해야 함.
     * 제공자: OpenAI, Azure, Anthropic, Google 등 다양한 제공자 중에서 선택할 수 있음.

        Hacker News 의견

     * LLM 비교 도구에서 영감을 받았는지 궁금함. 테이블이 매우 유사하지만 사용자 정의 계산기를 추가한 점이 좋음
          + Versus Comparison에 각 LLM의 최상급 필드를 강조하는 체크박스를 추가하면 좋을 것 같음
     * 모델 비교 아이디어가 마음에 듦. 독립적인 분석을 추가할 계획이 있는지, 아니면 입력 제한의 집합체인지 궁금함
          + 다른 분석과 어떻게 다르거나 추가되는지에 대한 의견을 묻고 있음
          + 웹사이트가 탐색하기 좋음
     * ""bang to buck"" 가치를 원함. 비구조화된 텍스트에서 구조화된 데이터를 신뢰성 있게 생성할 수 있는 가장 저렴한 모델을 알고 싶음
          + gpt4o-mini를 사용 중이나 더 저렴한 대안이 있는지 궁금함
     * ChatGPT의 기본 클라이언트보다 더 나은 데스크톱 애플리케이션이 있는지 묻고 있음
          + macOS/Linux 호환성을 선호함
     * UI와 테이블 레이아웃이 마음에 듦. 모델의 VRAM 요구 사항을 보여주는 것을 고려했는지 궁금함
     * Google의 Gemini가 대부분의 경쟁사보다 10배 이상 큰 컨텍스트 윈도우를 주장함
          + 실제로 유용한지 실험한 사람이 있는지 궁금함
          + 자신의 실험에서는 약 10회 대화 후에 흐름을 잃는 경향이 있음
          + Gemini가 실제로 다르게 작동하는지, 아니면 마케팅 과장인지 궁금함
     * 오디오 전사 모델이 두 개뿐임. 오픈 소스 전사 모델이 없는지, 아니면 데이터셋이 작은 것인지 궁금함
     * llmprices.dev를 추천함. 매일 24시간마다 최신 정보로 자동 업데이트됨
     * 빌드 중에 생성된 로그, 테스트 결과, 메트릭 등이 빌드 출력이 될 수 있음
          + ""배포""가 다른 저장소의 버전 문자열과 이미지 참조를 업데이트하는 것을 의미하는 경우가 있음
          + SSH 키가 필요하지만 수동으로 처리하는 것을 선호함
     * 이 프로젝트가 해커톤을 위해 만들어졌다는 것을 보고 큰 찬사를 보냄
"
"https://news.hada.io/topic?id=18237","BlenderGPT - 프롬프트/이미지에서 3D 모델 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    BlenderGPT - 프롬프트/이미지에서 3D 모델 생성

     * BLENDERGPT®는 텍스트나 이미지 프롬프트로부터 3D 모델을 약 20초 만에 생성하는 AI
     * 완전한 텍스처가 적용된 메쉬를 합성한 후, Blender로 바로 가져오거나 소스 파일을 다운로드하여 호환 가능한 소프트웨어에서 사용할 수 있음
     * 빠른 3D 모델 생성 시간 및 다양한 소프트웨어와의 호환성 제공
     * 워크플로우에 통합하여 효율성을 높일 수 있음

        Hacker News 의견

     * BlenderGPT를 만든 aarya는 트래픽이 많아 덜 컴퓨팅 집약적인 모델로 전환할 예정임. Google 로그인을 요구하는 이유는 봇이나 계정 생성 남용을 방지하기 위함임. BlenderGPT는 부트스트랩 방식으로 운영되며 팀은 aarya 혼자임. Twitter DM으로 피드백을 받음
     * TRELLIS라는 무료 오픈 소스 프로젝트를 추천함. 이미지를 업로드하면 3D 모델을 출력함. 별도의 이미지 생성기를 사용하여 상상할 수 있는 모든 것의 모델을 만들 수 있음
     * 프로젝트에 대한 부정적인 반응이 많지만, UI를 추가한 것만으로도 충분히 멋진 프로젝트임. gd3kr의 노력을 응원함
     * Microsoft 프로젝트의 래퍼인지에 대한 질문이 있음. TRELLIS와 관련된 링크를 공유함
     * ""자전거를 타는 펠리컨"" 테스트에서 좋은 결과를 얻었음. 2D 로딩 인디케이터도 인상적이었음. BlenderGPT가 무엇을 사용하는지 궁금해하는 의견이 있음
     * Blender는 등록 상표이며, BlenderGPT와 관련이 없을 가능성이 높음. GPT의 안전성과 정확성에 대한 의문이 있음
     * 기술적 기반에 대한 질문이 있음. 새로운 3D 기술인지, 기존 시스템에 UI를 추가한 것인지 궁금해함
     * 오픈 소스 모델과 시스템을 사용했기 때문에, 다른 개발자들도 비슷한 비즈니스를 시작할 수 있을 것임. Claude 3.5 Sonnet New를 사용하여 핵심 코드를 생성했으나 테스트는 하지 않음
     * Meshy AI와 Rodin 같은 기존 서비스와의 비교에 대한 궁금증이 있음
     * Huggingface의 무료 오픈 소스 애드온을 사용하여 로컬에서 실행할 수 있다는 의견이 있음
"
"https://news.hada.io/topic?id=18166","Mise: 개발 도구, 환경 변수, 작업 실행기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Mise: 개발 도구, 환경 변수, 작업 실행기

  mise란 무엇인가?

     * mise는 asdf, nvm, pyenv와 유사하게 node, python, cmake, terraform 등 다양한 개발 도구를 관리하는 도구임
     * direnv와 유사하게 프로젝트 디렉토리별 환경 변수를 관리함
     * make와 유사하게 프로젝트 빌드 및 테스트에 사용되는 작업을 관리함

  30초 데모

     * mise를 사용하여 node의 다양한 버전을 설치하는 방법을 보여줌
     * which node 명령어를 실행하면 실제 경로가 반환되며, 이는 shim이 아님

  빠른 시작

     * mise 설치 방법:
          + $ curl https://mise.run | sh
          + $ ~/.local/bin/mise --version 명령어로 설치된 버전 확인 가능
     * 특정 버전 설치:
          + $ curl https://mise.run | MISE_VERSION=v2024.5.16 sh
          + $ ~/.local/bin/mise --version 명령어로 설치된 버전 확인 가능
     * 쉘에 mise 연결하기:
          + bash: echo 'eval ""$(~/.local/bin/mise activate bash)""' >> ~/.bashrc
          + zsh: echo 'eval ""$(~/.local/bin/mise activate zsh)""' >> ~/.zshrc
          + fish: echo '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish
     * 런타임 설치 및 글로벌 기본값 설정:
          + $ mise use --global node@20
          + $ node -v 명령어로 버전 확인 가능

  전체 문서

     * mise.jdx.dev에서 전체 문서 확인 가능

        Hacker News 의견

     * mise를 사용하기 시작했을 때, asdf의 단점을 보완하면서도 빠르고 덜 침입적인 셸 설정을 제공하여 만족스러웠음
          + Task Running과 Env Vars 기능이 추가되어 더욱 유용해졌음
          + 개발자가 기존 도구와의 호환성을 유지하면서도 미래 기능을 구축하는 데 많은 시간을 투자한 점이 인상적이었음
          + 최근 백엔드 기능을 통해 필요한 개발 도구를 쉽게 설치할 수 있게 되어 편리해졌음
     * JS, Ruby, Python, Java SDK 관리를 위해 Mise로 전환했으며, 만족스러웠음
          + RVM, NVM, Python 설치 도구 등을 설치할 필요가 없어 신선한 느낌을 받았음
     * 팀의 도구 체인을 통합하기 위해 mise를 사용 중이며, Docker나 Nix를 사용하지 않음
          + Docker는 여전히 서비스 실행에 사용하지만, mise의 사용자 경험이 뛰어남
          + 모든 저장소 스크립트에 자동 완성 기능이 추가되어 편리함
     * 모든 것을 하려다 보면 아무것도 제대로 하지 못할 가능성이 큼
          + 대부분의 사람들은 한 생태계의 패키징 문제를 깊이 이해하지 못함
          + 개발자들이 많은 것을 알아야 하지만, 실제로는 기존 도구를 래핑하는 것에 불과함
     * 개발자가 아니기 때문에 이러한 도구의 사용 사례를 이해하지 못함
          + asdf를 사용하여 모노레포의 모든 프로그램 버전을 관리하며, UX는 별로지만 신뢰성 있음
          + 환경 변수를 현재 셸 세션에 로드하지 않고 스크립트나 Makefile을 사용하여 필요한 변수를 로드하고 작업을 수행함
          + Make를 사용하여 디렉토리별로 반복 가능한 작은 명령어를 실행하거나 명령어를 병렬화하거나 순서대로 실행함
          + 셸 스크립트를 사용하여 Make 타겟보다 약간 더 길거나 복잡한 도구를 작성함
          + 전체 환경은 asdf만 설치하면 관리 가능하며, 모든 것이 자동화되고 버전이 고정됨
     * mise를 사용하여 Go 버전을 관리하고 있으며, 약간 혼란스럽고 문서화가 부족하지만 괜찮음
          + asdf나 유사한 도구를 사용해본 적이 없어 학습 곡선이 있을 수 있음
     * mise를 asdf 대체 도구로 사용하며 만족스러웠음
          + 동일한 기능을 제공하지만 더 빠르고 UX가 우수함
     * 1년 이상 사용하며 삶을 더 쉽게 만들어준 간단한 도구임
          + 제작자와 기여자들에게 감사함
     * mise를 GitHub Actions 워크플로우에 통합하는 방법을 고민 중임
          + mise 저장소의 워크플로우 파일을 보면 몇 가지 mise 단계를 추가한 것으로 보임
          + 워크플로우 파일을 생성할 수 있다면 더 좋을 것 같음
     * 프로젝트의 Readme를 읽고 나서 ""왜?""라는 의문이 남음
          + Devbox를 사용하여 전체 Nix 생태계에 접근함
"
"https://news.hada.io/topic?id=18249","Show HN: 에스프레소 머신 및 커피 그라인더 설계자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: 에스프레소 머신 및 커피 그라인더 설계자

     * TREFOLO 에스프레소 머신
          + 에스프레소 머신의 미니멀리스트적 재해석을 보여줌
     * Turbina 커피 그라인더
          + 최초의 원통형 버 커피 그라인더임

        Hacker News 의견

     * 디자인은 좋지만 웹사이트 디자인은 마음에 들지 않음. Trefolo의 사진이 실제 환경에서 찍힌 것이 없어 아쉬움. 지속 가능성에 대한 설명이 더 구체적이어야 함. Trefolo의 교체 부품과 호환성에 대한 우려가 있음. 특히 Turbina 커피 그라인더의 교체 부품 부족이 걱정됨
     * 제품과 웹사이트 모두 훌륭하다고 생각함. 특히 새로운 그라인더 디자인이 인상적임. 웹사이트 디자인에 대한 비판에 낙담하지 말고, 제품의 디자인 언어를 잘 보여주고 있다고 생각함
     * 제품이 아름답지만 에스프레소 머신의 일부만을 제공하는 것 같음. 물을 가열하고 온도를 제어하는 방법이 명확하지 않음. 전체적인 에스프레소 제조 과정을 보여주는 비디오가 필요함
     * 영국과 EU에서 디자인을 등록하여 보호할 것을 권장함. 디자인이 독특하고 복제되면 안타까울 것임
     * 제품은 훌륭하지만 웹사이트 디자인이 제품의 장인 정신과 맞지 않음. 전체 제품을 보여주는 사진이 필요함. 웹사이트가 제품의 아름다움을 제대로 전달하지 못하고 있음
     * 제품을 현실로 만든 것에 대해 축하함. 그러나 웹사이트가 현대적이지만 전체 기계를 볼 수 없고 가격이 숨겨져 있어 구매 전환이 어려움. 웹사이트 개선이 필요함
     * 제품의 사진을 많이 봤지만 여전히 어떻게 생겼는지 잘 모르겠음. 몇 걸음 물러나서 전체 제품을 찍은 사진이 필요함
     * 기계 설계와 제조가 큰 작업임을 인정하며 축하함. 그러나 웹사이트가 기계의 작동 방식을 혼란스럽게 설명함. 기계가 직접 뜨거운 물을 받아들이는 방식이 명확하지 않음.
"
"https://news.hada.io/topic?id=18131","70% 문제: AI 지원 코딩의 냉혹한 진실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        70% 문제: AI 지원 코딩의 냉혹한 진실

     * 개발자들이 AI를 활용하는 두 가지 주요 패턴이 있음
          + 부트스트래퍼:
               o Bolt, v0, screenshot-to-code AI 같은 도구를 사용하여 빠르게 초기 프로토타입을 생성함.
               o 디자인이나 개념을 시작점으로 AI를 활용하여 초기 코드베이스를 생성하고, 몇 시간 또는 며칠 만에 작동하는 프로토타입을 개발함
          + 이터레이터:
               o Cursor, Cline, Copilot, WindSurf 같은 도구를 일상 개발에 사용하여 코드 완성, 복잡한 리팩토링, 테스트 및 문서 생성을 수행함

숙련된 개발자와 초급 개발자 간의 AI 활용 차이

     * 숙련된 개발자: AI가 제안한 코드를 지속적으로 리팩토링하고, 에지 케이스를 처리하며, 타입 정의를 강화하고, 아키텍처 결정을 검토함
     * 초급 개발자: AI의 출력을 그대로 수용하는 경향이 있어, 실제 환경에서 문제가 발생할 수 있는 '카드로 만든 집'과 같은 코드를 생성할 위험이 있음

AI 도구의 역설: 지식의 역설

     * 숙련된 개발자: 이미 알고 있는 작업을 AI를 통해 가속화함
     * 초급 개발자: 무엇을 해야 할지 배우기 위해 AI를 사용하려 함
     * 결과: 숙련도에 따라 AI 활용의 효과가 크게 달라짐

비전문가의 AI 코딩 도구 사용 시 70% 문제

     * 초기 진행: AI 도구를 사용하여 원하는 기능의 70%를 빠르게 구현할 수 있음
     * 남은 30%: 작은 버그를 수정하려 할 때 새로운 문제가 발생하며, 이를 해결하려다 더 많은 문제가 생기는 악순환에 빠질 수 있음

AI 도구를 효과적으로 활용하기 위한 전략

     * AI 초안 패턴: AI로 기본 구현을 생성하고 수동으로 검토 및 리팩토링함
     * AI를 학습 도구로 활용: 지속적인 대화로 AI가 생성한 코드를 이해하고, 기본적인 프로그래밍 개념을 함께 학습하며, 점진적으로 지식을 쌓아감
     * AI의 한계 인식: AI 도구는 프로토타입 개발, 학습 보조, 아이디어 검증에는 유용하지만, 생산 준비가 된 유지 보수 가능한 소프트웨어를 개발하려면 여전히 실제 엔지니어링 지식이 필요함

에이전틱 소프트웨어 엔지니어링의 부상

     * 에이전틱 시스템: 명령에 응답하는 것을 넘어, 계획하고 실행하며 반복할 수 있는 시스템으로 발전하고 있음
     * 미래 전망: AI는 개발자를 대체하는 것이 아니라, 점점 더 능동적인 협력자로서 인간의 지침과 전문성을 존중하며 주도적으로 문제를 해결하는 방향으로 나아가고 있음
     * AI는 이미 알고 있는 패턴을 구현하는 데 도움을 주고, 아이디어를 빠르게 프로토타입하고 다양한 접근 방식을 탐색하는 데 유용함
     * 반복적이고 일상적인 코딩 작업을 자동화하여 더 흥미로운 문제에 집중할 수 있게 함

AI 도구 사용 시 주의사항

     * 사용자 경험의 중요성: AI를 활용하여 빠르게 데모를 만들 수 있지만, 실제 사용자가 사용할 때 발생할 수 있는 에러 메시지, 에지 케이스, UI 상태 등을 세심하게 다루지 않으면 사용자에게 불편을 줄 수 있음
     * 장인 정신의 부활:
          + AI가 소프트웨어 개발을 빠르게 만들었지만, 진정한 소비자 품질의 경험을 만드는 예술을 잃을 위험이 있음.
          + AI 도구는 일상적인 코딩 작업을 처리하여 개발자가 중요한 세부 사항에 집중할 수 있도록 도와줄 수 있음.

결론

     * AI의 역할:
          + AI는 더 많은 코드를 빠르게 작성하는 것이 아니라, 더 나은 소프트웨어를 구축하는 데 도움을 줌
          + AI는 소프트웨어 품질을 극적으로 향상시키지 않음.
     * 소프트웨어 개발의 어려운 부분은 여전히 인간의 판단이 필요함.
     * AI는 더 나은 솔루션을 찾기 위한 빠른 탐색을 가능하게 하지만, 좋은 소프트웨어 관행을 대체할 수는 없음.
     * 인간의 책임: AI를 현명하게 사용하여 엔지니어링 원칙을 유지하고, 소프트웨어 품질을 향상시키는 것은 여전히 인간의 몫임

   기술을 활용하는 것은 좋은데, 생각까지 위탁해버리는 분들이 너무 많아서, 특히 교육 같은거 나가면 더 많이 보여서 걱정입니다. 솔직히 저는 그런 사람들이랑 일하고 싶지는 않거든요.

   IDE가 개발자를 망친다 라는 논의랑 비슷할지도..

   고객이 생성한 AI 코드를 수정하는 데 지쳤어요
   판단을 AI가 하기 시작하면 답이 없어 보입니다

   AI에게 피드백을 하면 좋아지는 듯 보이다가… 어느 순간 망가짐. 그 순간을 캐치하는 요령이 필요함. 그리고 그 순간이 오면 AI를 버릴 건지 다시 시작할건지 선택해야함.

   production-ready(본문 생산준비) 를 뭐라고 번역하면 매끄러울까요?

   실 서비스 준비완료 수준
   제품 수준

   출시 준비 완료!

   저는 보통 출시 가능 or 출시 준비된 으로 번역하는 편입니다.

   ""출시 가능"" 좋은 것 같아요!

   ""(실 사용 또는 고객용으로) 배포 준비 된""
   정도가 어떨까요?

   실전검증된 은 어떨까요?

   실전검증은 battle tested 라고 많이 표현하는 것 같아요.

        Hacker News 의견

     * AI는 과거의 여러 도구들과 마찬가지로 프로그래밍의 일부를 대체하려고 했음. 하지만 본질적인 작업은 여전히 인간의 두뇌가 필요함
          + AI는 복잡성 관리와 같은 본질적인 작업을 수행할 수 없음
          + AI는 영어로 대화할 수 있어 이전 시도들보다 유연하지만, 여전히 본질적인 문제 해결에는 한계가 있음
     * AI는 팀의 열정적인 주니어 개발자와 같음
          + 주니어 개발자와 AI 도구 모두 버그가 많고 장황한 코드를 작성하는 경향이 있음
          + AI는 피드백을 통해 학습할 수 없기 때문에 반복적인 실수를 계속 검토해야 함
     * AI 도구를 사용하여 새로운 도구를 빠르게 개발할 수 있었음
          + AI 덕분에 며칠 걸릴 작업을 몇 시간 만에 완료할 수 있었음
          + AI가 전체 작업의 70% 또는 42.5%를 수행했을지라도 큰 개선이었음
     * 주니어 개발자에게 AI는 양날의 검임
          + AI를 학습의 지름길로 사용하면 학습을 건너뛰게 됨
          + 그러나 AI를 멘토로 사용하면 깊이 있는 학습이 가능함
          + AI가 주니어 개발자의 작업을 대체하면 채용 문제가 발생할 수 있음
     * ""신뢰하되 검증하라""는 패턴이 중요함
          + AI가 작성한 코드가 컴파일되고 테스트 케이스를 통과하면 긍정적인 신호임
          + 예를 들어, Rust의 csscolorparser를 Python으로 바인딩한 프로젝트가 있음
     * AI가 코드를 빠르게 작성할 수 있지만 학습 과정이 빨라지지는 않음
          + AI의 도움으로 더 빨리 발전할 수 있지만, 여전히 잘 구조화된 코드를 작성하는 데는 시간이 걸림
     * Copilot은 복잡한 작업에서 실패함
          + AI는 확장성에서 한계를 보이고 있음
          + 미래에는 양자 컴퓨팅과 같은 기술이 필요할 것임
     * GenAI는 잘 알려진 요구 사항을 가진 솔루션에서는 깊이 있는 결과를 제공할 수 있음
          + 복잡한 문제에서는 50% 정도의 성과만 가능함
          + 세부적인 작업 목록을 만들어 각 작업을 개별적으로 해결하는 방법을 사용 중임
     * AI의 작업을 검증하는 것이 중요함
          + AI가 제안한 코드가 실행 가능했지만, 보안 문제가 있는 라이브러리를 사용하고 있었음
          + AI의 코드가 실행 가능하더라도 검증이 필요함
     * AI로 생산성이 크게 향상되었다는 사람들을 실제로 만나기 어려움
          + AI 도구는 편리하지만, 코딩의 일부에만 유용함
"
"https://news.hada.io/topic?id=18130","HN 공개: 처음부터 작성된 Unix 유사 운영 체제 Banan-OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 공개: 처음부터 작성된 Unix 유사 운영 체제 Banan-OS

banan-os

   이 프로젝트는 C++로 작성된 취미 운영체제이며, x86_64 및 i686 아키텍처를 지원함. 이는 다른 제품이나 기존 오픈 소스 프로젝트와 비교하여 독특한 학습 경험을 제공함.

    기능

     * 일반
          + Ring3 사용자 공간
          + SMP(다중 처리)
          + 선형 프레임버퍼(VESA 및 GOP)
          + 네트워크 스택
          + ELF 실행 파일 로딩
          + AML 인터프리터(부분적)
          + 기본 그래픽 환경
               o 터미널 에뮬레이터
               o 상태 표시줄
               o 프로그램 실행기
               o 몇 가지 유용한 앱
          + ELF 동적 링크
          + copy-on-write 메모리
               o 파일 매핑
               o 익명 매핑
     * 드라이버
          + NVMe 디스크
          + ATA(IDE, SATA) 디스크
          + E1000 및 E1000E NIC
          + RTL8111/8168/8211/8411 NIC
          + PS2 키보드(모든 스캔코드 세트)
          + PS2 마우스
          + USB
               o 키보드
               o 마우스
               o 대용량 저장소
               o 허브
          + virtio 장치(네트워크, 저장소)
     * 네트워크
          + ARP
          + ICMP
          + IPv4
          + UDP
          + TCP(부분적 및 버그 있음)
          + Unix 도메인 소켓
          + SSL
     * 파일 시스템
          + 가상 파일 시스템
          + Ext2
          + FAT12/16/32
          + Dev
          + Ram
          + Proc
          + Sys
          + 9P
     * 부트로더 지원
          + GRUB
          + 사용자 정의 BIOS 부트로더
          + 사용자 정의 UEFI 부트로더

  코드 구조

   각 주요 구성 요소와 라이브러리는 자체 하위 디렉토리를 가짐. 각 디렉토리에는 해당 구성 요소의 모든 헤더 파일이 포함된 include 디렉토리가 있음. 모든 헤더는 절대 경로로 포함됨.

  빌드

    필요한 패키지

     * apt (Ubuntu 22.04에서 테스트됨)
          + build-essential, git, ninja-build, texinfo, bison, flex, libgmp-dev, libmpfr-dev, libmpc-dev, parted, qemu-system-x86, cpu-checker
     * pacman
          + base-devel, git, wget, cmake, ninja, parted, qemu-system-x86

    컴파일

     * 이 운영체제를 위한 툴체인을 빌드하려면 다음 명령어를 실행할 수 있음. 이 단계는 한 번만 수행하면 되며, 시간이 오래 걸릴 수 있음.
          + ./bos toolchain
     * 운영체제 자체를 빌드하려면 다음 명령어 중 하나를 실행할 수 있음. 디스크 이미지 생성/수정을 위해 루트 권한이 필요함.
          + ./bos qemu
          + ./bos qemu-nographic
          + ./bos qemu-debug
          + ./bos bochs
     * 커널이나 디스크 이미지를 실행하지 않고 빌드할 수도 있음.
          + ./bos kernel
          + ./bos image
     * 다른 아키텍처를 위해 빌드하려면 환경 변수 BANAN_ARCH=_arch_를 설정함(e.g. BANAN_ARCH=i686).
     * 부트로더를 변경하려면 환경 변수 BANAN_BOOTLOADER를 설정함. 지원되는 값은 BANAN(사용자 정의 부트로더) 및 GRUB임.
     * UEFI로 실행하려면 환경 변수 BANAN_UEFI_BOOT=1을 설정함. 또한 OVMF_PATH를 올바른 OVMF로 설정해야 함(기본값 /usr/share/ovmf/x64/OVMF.fd).
     * 디스크 이미지가 손상되었거나 새로 만들고 싶다면, 수동으로 _build/banan-os.img_를 삭제하거나 다음 명령어를 실행할 수 있음.
          + ./bos image-full
     * zsh를 위한 셸 완성 스크립트도 생성됨. _script/shell-completion/zsh/_bos_ 파일을 /usr/share/zsh/site-functions/로 복사하거나 .zshrc의 fpath에 _script/shell-completion/zsh_를 추가할 수 있음.

  기여

     * 업스트림은 개인 서버에 호스팅되므로, 기여를 병합하는 것이 GitHub에서처럼 간단하지 않음. GitHub에서 PR을 보내면 diff를 다운로드하여 수동으로 적용할 수 있음. 원한다면 개인 git 서버에 계정을 제공할 수 있음. 이 경우 이메일이나 디스코드를 통해 연락 바람.
     * 이는 주로 학습 경험이므로, 새로운 기능을 추가하기 전에 이메일, 디스코드, 이슈 등을 통해 먼저 연락해 주길 바람. 만약 내가 계획하고 있던 작업에 대해 문의 없이 PR을 보내면, PR을 닫을 가능성이 높음. 버그 수정은 언제나 환영함.
     * 커밋 메시지는 다음과 같이 포맷해야 함.
         1. 첫 번째 줄은 "" Subject: Description "" 형식이어야 하며, _Subject_는 영향을 받은 영역(Kernel, Shell, BuildSystem 등)을 나타내고, _Description_은 변경 사항에 대한 간단한 설명이어야 함. 첫 번째 줄은 72자 이내로 작성해야 함.
         2. 메시지 본문은 변경 사항과 변경 이유를 자세히 설명해야 함.
     * 모든 커밋은 .pre-commit-config.yaml에 정의된 pre-commit 훅을 통과해야 함. pre-commit 설정 방법에 대한 지침은 pre-commit.com을 참조 바람.

        Hacker News 의견

     * USB 드라이버를 처음부터 구현한 점을 칭찬함. ""cat doom1.wad""를 입력하여 시스템을 깨뜨렸다고 언급함
     * 프로젝트 이름이 마음에 듦. 구현한 것 중 가장 어려운 부분이 무엇인지, 그리고 심각한 장애물이 있었는지 질문함
     * 새로운 OS 커널 발표에 관례적으로 포함되는 문장이 빠져 있다고 언급함
     * 프로젝트가 매우 멋지다고 생각함. 주당 몇 시간 정도 이 프로젝트에 투자하는지, 그리고 학생 프로필이 대학생을 의미하는지 질문함. 만약 그렇다면, 학업의 일환으로 OS 작업을 했는지 궁금해함
     * 개발 과정이 어떻게 진행되는지 궁금해함. VM에서 실행하는지, 아니면 실제 하드웨어에서 실행하는지 질문함. 개발 중 배운 점과 개발 기록을 어떻게 관리하는지 질문함
     * 많은 작업이 필요했음을 인정함. 두드러진 도전 과제가 무엇인지 궁금해함
     * 예상치 못한 기능 세트를 가진 프로젝트라고 생각함. 더 많은 소프트웨어를 이식할 계획이 있는지 질문함
     * 프로젝트가 멋지다고 생각함. 포크의 대체 이름으로 ""PlatanOS""를 제안함
     * 매우 인상적인 성과라고 생각하며, 프로젝트 이름도 마음에 듦
     * 멋진 사이드 프로젝트라고 축하함. 비슷한 프로젝트를 시도하고 싶은 사람들을 위한 시작점이나 자료에 대한 팁을 요청함
"
"https://news.hada.io/topic?id=18181","OpenAI, Sora 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI, Sora 출시

     * Sora는 텍스트에서 현실감 있는 비디오를 생성하는 모델로, 현실 이해 및 시뮬레이션을 목표로 개발됨
     * 새로운 버전 Sora Turbo는 이전보다 훨씬 빠른 속도로 동작하며, Sora.com 에서 독립형 제품으로 출시됨
     * ChatGPT Plus 및 Pro 사용자는 추가 비용 없이 이용 가능

Sora의 주요 기능

     * 최대 1080p 해상도 와 20초 길이 의 비디오 생성 가능
     * 와이드스크린, 세로, 정사각형 비율 지원
     * 텍스트뿐만 아니라 이미지를 포함한 사용자 자산 활용 가능:
     * 주요 기능
          + Remix: 비디오의 요소를 교체, 제거 또는 재구성하여 새로운 콘텐츠 생성
          + Re-cut: 최고의 프레임을 찾아 양방향으로 확장하여 완벽한 장면을 완성
          + Storyboard: 개인 타임라인에서 비디오를 조직 및 편집하여 독창적인 시퀀스 구성
          + Loop: 비디오를 다듬어 끊김 없는 반복 영상을 제작
          + Blend: 두 개의 비디오를 결합해 자연스러운 하나의 클립으로 제작
          + Style Presets: 상상력을 반영하는 스타일을 생성 및 공유하여 고유한 비주얼을 구현
     * 커뮤니티에서 생성된 콘텐츠를 보여주는 Featured 및 Recent 피드 제공

이용 요금 및 구독 옵션

     * Plus 계정: 480p 해상도로 월 최대 50개의 비디오 생성 가능
     * Pro 플랜:
          + 10배 더 많은 사용량
          + 더 높은 해상도와 더 긴 비디오 길이 지원
          + 사용자 맞춤형 요금제는 내년 초 출시 예정

Sora 배포 및 안전성

     * Sora Turbo는 빠르고 강력하지만 아직 복잡한 동작이나 현실감 있는 물리 구현에 한계가 있음
     * C2PA 메타데이터:
          + Sora에서 생성된 비디오의 출처를 명확히 표시
          + 투명성을 위해 기본적으로 워터마크 추가
     * 오남용 방지 노력:
          + 아동 성학대 자료 및 성적 딥페이크 등 특정 남용 형태 차단
          + 사람을 포함한 업로드는 초기에는 제한적 제공
          + 내부 검색 도구로 생성물 출처 검증 가능
     * 안전 및 모니터링 시스템 카드와 레드 팀 테스트로 윤리적 사용 보장

Sora의 목표

     * 창의성 증진과 새로운 스토리텔링 방식 탐구 지원
     * 비디오 스토리텔링의 가능성을 확장하는 데 기여
     * 초기 단계의 Sora를 통해 다양한 사용 사례와 가능성을 탐험하고, 기술 발전에 따른 사회적 규범과 안전 장치를 공동 개발

   Sora가 창작과 스토리텔링의 새로운 장을 열어갈 것으로 기대하며, 전 세계 사용자가 이를 활용해 어떤 창작물을 만들어낼지 기대함

        Hacker News 의견

     * 현재 기술로는 원하는 이미지나 비디오를 만들기 위해 많은 프롬프트와 반복이 필요하며, 원하는 결과를 얻기 어려움
          + 구글이 이러한 기술을 공개하지 않는 결정을 지지하게 됨
          + 유튜브 쇼츠에서 비현실적인 비디오를 보고 AI가 만든 가짜임을 깨달음
          + AI가 페이스북에 퍼지고 있으며, 중독적인 요소가 있음
          + 구글이 혁신을 숨기는 이유를 이해하게 됨
          + OpenAI가 기술을 너무 빨리 공개한 것에 대해 우려함
     * OpenAI가 chatGPT와 Sora로 혁신을 이루었으나, 한계에 도달한 것 같음
          + 너무 빠르게 한계에 도달한 것에 놀람
     * 완벽한 파워포인트 슬라이드를 생성하는 모델이 필요함
          + Beautiful.ai나 Copilot for PowerPoint는 만족스럽지 않음
     * 비디오 생성 기술을 소개하며, 사회가 책임감 있게 사용할 수 있도록 시간을 주고자 함
          + 안전 도구에서 놓치는 부분이 있을 수 있음을 암시함
     * AI 이미지 및 비디오 생성의 매력적인 나쁜 점이 있다고 느끼며, Sora는 매력적이지 않은 나쁜 점으로 넘어간 것 같음
     * 이 제품의 대상이 누구인지 궁금함
          + 많은 사람들이 비디오를 통해 경험할 수 없는 것을 경험하고자 함
          + AI 생성 비디오는 주로 페이스북 사용자를 속이는 데 사용될 것 같음
          + CGI 산업에 미치는 영향이 흥미로움
     * OpenAI의 Sora 발표 링크 제공
     * MKBHD의 Sora 리뷰 링크 제공
     * 4글자 이하의 .com 도메인 가격에 대한 궁금증
          + 중개인을 통해 구매했을 가능성 언급
"
"https://news.hada.io/topic?id=18226","memcpy(NULL, NULL, 0)은 더 이상 정의되지 않은 동작이 아닙니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              memcpy(NULL, NULL, 0)은 더 이상 정의되지 않은 동작이 아닙니다
"
"https://news.hada.io/topic?id=18256","Mouseless - 키보드로 빠르게 제어하는 마우스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Mouseless - 키보드로 빠르게 제어하는 마우스

     * 키보드로 빠르게 마우스를 제어할 수 있는 소프트웨어임
     * macOS용으로 다운로드 가능하며, 7일간 무료로 사용 가능하고 $9.99에 평생 라이선스 제공
     * 1, 2, 클릭
          + 몇 가지 좌표를 입력하여 2초 이내에 화면 어디든 클릭 가능
          + 다른 솔루션인 ""마우스 키""는 클릭에 최대 10초가 소요됨
          + 화면에 오버레이가 표시되어 암기할 필요가 없음
     * 완전한 제어
          + 클릭, 이동, 드래그 및 드롭 가능
          + 더블 및 트리플 클릭 지원
          + 왼쪽, 오른쪽, 중간, 뒤로 및 앞으로 버튼 지원
          + Mouseless는 모든 기능을 지원함
     * 생산성 향상
          + 키보드 단축키가 실용적이지 않거나 사용 불가능할 때 시간을 절약해 줌
          + 일회성 클릭을 위해 마우스를 잡을 필요가 없음
     * 접근성 향상
          + 마우스를 사용할 수 없는 사람들에게 효율적이고 기능이 풍부한 대안 제공
     * 건강을 지키는 인체공학
          + 노트북 트랙패드의 장시간 사용은 위험할 수 있으며, Mouseless는 트랙패드 의존도를 줄여 스트레인과 부상을 예방함
     * 링크
          + 문서화, 버그 보고 및 기능 요청
          + YouTube 채널, X 및 Twitch 팔로우

   Windows에서의 유사한 프로그램 중 현재 유지보수 되고있는 프로그램: mousemaster

   https://github.com/petoncle/mousemaster

        Hacker News 의견

     * 창의적인 아이디어임. Lenovo의 빨간 마우스 누브를 더 많은 키보드에 통합했으면 좋겠음
          + 사이트에서 YouTube 임베드를 최대화할 수 있도록 해주면 좋겠음. 제품을 명확히 보기 위해 YouTube에서 열어야 했음
          + 비디오의 작은 녹색 커서가 보기 어려움
          + 셀이 직사각형이라는 것을 이해하는 데 시간이 걸렸음. ""셀의 2 문자""라는 표현이 처음에는 이해되지 않았음. 비디오에서 강조할 필요가 있음
     * MacOS에서 마우스 없이 탐색할 수 있는 다른 옵션들
          + warpd: 그리드 사용
          + Scoot: 그리드 사용
          + Shortcat: 접근성 UI 사용
          + Superkey: 텍스트 OCR 사용
     * 비디오가 멋져 보이지만 혼란스러웠음. 셀에 대해 이야기했지만 셀이 어디에 있는지 보이지 않았음. 큰 화살표나 깜박이는 원 같은 것이 필요함
     * Mac에서 시스템 대화 상자에 탭, 엔터 등을 사용할 수 없다고 언급했지만, 키보드 설정에서 '컨트롤 간 포커스를 이동하기 위해 키보드 탐색 사용'을 활성화하면 탭(및 shift+tab)으로 포커스를 순환하고 스페이스로 선택할 수 있음. 새 설치 시 가장 먼저 활성화하는 것 중 하나임
     * 10년 전 RSI가 심할 때 비슷한 시스템을 사용했음. 화면을 4분할하고 숫자를 입력해 확대하는 방식이었음. 원하는 위치에 도달할 때까지 반복했음. 꽤 잘 작동했음
     * 마우스 키를 사용하는 것이 ""5...10초 걸린다""는 것은 잘못된 표현임. QMK 키보드로 마우스 키를 사용하며 마우스만큼 빠르게 사용할 수 있음. 여러 커서 속도를 전환하며 사용함. Tridactyl도 사용하지만, 때로는 마우스 키를 사용함. 키 앵커로 탐색하는 것이 항상 더 나은 것은 아님. 문자 읽고 입력하는 것이 WASD로 마우스를 움직이는 것보다 인지 부담이 큼
     * Vimac을 사용 중임. UI 구성 요소에 직접 타겟을 표시함
     * 과거에는 ""키보드 탐색""이라는 것이 있었음. 탭으로 다음 컨트롤 요소로 이동하고, 스페이스바로 활성화했음. 메뉴와 중요한 컨트롤에는 ALT+키 단축키가 있었음. 모든 요소가 기본적으로 키보드 탐색을 제공했음. 그런 멋진 시절이었음. 이제는 터치스크린만 있음
     * 몇 달 전에 이걸 봤으면 좋았을 것임. Keyball로 하드웨어 문제를 해결했음
     * 눈 추적 솔루션이 있는지 궁금함. 큰 모니터 설정에서 유용할 것 같음
"
"https://news.hada.io/topic?id=18150","Ollama, 구조화된 출력 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Ollama, 구조화된 출력 지원

     * Ollama가 이제 JSON 스키마를 사용하여 모델의 출력을 특정 형식으로 제약하는 구조화된 출력(Strucutured Output) 기능을 지원
     * Python 및 JavaScript 라이브러리가 업데이트되어 이 기능을 사용할 수 있게 됨
     * 구조화된 출력의 주요 활용 사례
          + 문서에서 데이터 파싱
          + 이미지에서 데이터 추출
          + 모든 언어 모델 응답의 구조화
          + JSON 모드보다 더 높은 신뢰성과 일관성 제공
     * 사용 팁
          + Pydantic (Python) 또는 Zod (JavaScript)로 JSON 스키마 정의
          + 프롬프트에 ""JSON으로 반환"" 추가
          + Temperature 설정을 0으로 낮춰 결정론적 출력 확보
     * 향후 계획
          + 로짓 노출로 생성 제어 지원
          + 성능 및 정확도 개선
          + JSON 스키마 외 추가 형식 지원
          + GPU 가속 샘플링 지원

   기존에는 json schema를 프롬프트의 일부로 포함시키고 api parameter에는 format: json 형태로만 썼었는데 이제 토큰도 아끼고 더 편하게 설정할 수 있게 되었네요!
"
"https://news.hada.io/topic?id=18246","페르마의 마지막 정리 진행 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           페르마의 마지막 정리 진행 상황

     * Xena 프로젝트와 페르마의 마지막 정리
          + Xena 프로젝트는 수학을 컴퓨터에 형식화하는 것을 목표로 함. 이는 AI 수학 혁명이 일어날 경우 컴퓨터가 현대 수론의 경계를 확장하는 데 도움을 줄 수 있도록 하기 위함임.
     * 페르마의 마지막 정리 형식화
          + 페르마의 마지막 정리(FLT)를 컴퓨터에 증명하는 작업을 진행 중임. 이 과정에서 R=T 정리를 컴퓨터에 가르치는 것이 주요 과제임.
          + Wiles의 원래 증명 대신, 현대의 일반화되고 단순화된 증명을 형식화하려고 함.
     * 결정 코호몰로지와 나눔 거듭제곱 구조
          + 결정 코호몰로지는 1960-70년대에 개발된 이론으로, 수학적 형식화에 중요한 역할을 함.
          + 나눔 거듭제곱 구조는 결정 코호몰로지를 컴퓨터에 가르치기 위해 필요한 개념임.
     * 인간의 수학 문서화 문제
          + 수학 문서화의 부정확성이 드러남. 전문가들 사이에서 알려진 내용이지만 문서화가 제대로 되지 않은 경우가 많음.
          + 형식화 작업이 이러한 문제를 해결하는 데 도움이 될 수 있음.
     * 형식화의 중요성
          + 수학을 형식화하는 것은 기계가 스스로 수학적 논증을 할 수 있도록 하는 중요한 단계임.
          + 많은 수학자들이 형식화의 필요성을 느끼지 못하지만, 이는 인간 오류를 줄이는 데 필수적임.
     * 결론
          + 최근의 발표에서 나눔 거듭제곱의 형식화 문제가 해결되었음. 이는 프로젝트가 다시 궤도에 올랐음을 의미함.

        Hacker News 의견

     * 대학원 시절에 빠른 코드를 작성하여 Birch와 Swinnerton-Dyer 추측을 돕던 경험을 회상함. 세미나에서 반례를 찾고 싶다고 말했을 때 전문가들이 화를 냈음. 수학의 깊이를 이해하지 못했지만, 호기심을 자극받았음.
     * 수학의 형식주의 발전에 기쁨을 느낌. 프로그래머로서 수학을 더 접근하기 쉽게 만듦. 형식주의 부족에 대한 불안은 호기심으로 대처해야 함.
     * 수학자들이 자주 세부사항을 생략하는 경향이 있음. 엄격한 증명을 원하면 전문가의 도움이 필요함. 현대 수학은 불안정한 기반 위에 있음.
     * 앤드류 와일즈가 FLT를 증명하는 과정을 회상함. 1990년대의 증명 방식이 오래된 것처럼 느껴짐.
     * 현대 수학의 문서화가 부족함을 강조함. 형식 시스템을 통해 오류를 줄일 필요가 있음. 기계에게 수학적 논증을 가르치는 것이 중요함.
     * UI/UX 디자이너와 개발자의 역할 차이를 설명함. 디자인과 개발은 다른 사고방식을 요구함.
     * Lean과 같은 정리 증명기가 수학에서 중요한 도구가 될 것임을 기대함.
     * Lean 코드를 살펴보는 것이 흥미로움. 최종 증명문이 유닛 테스트 역할을 함.
     * 수십 년간 사용된 수학적 개념이 잘못되었을 가능성에 대한 의문을 제기함.
     * 'vitiated'라는 단어를 소개하며, 증명이 잘못되었을 때 사용하기 좋다고 언급함.
     * 수학자와 엔지니어 간의 격차를 언급하며, 기계가 수학을 해결할 때도 성능 향상이 필요할 것임을 기대함.
     * 수학 문헌의 상태에 실망감을 표함. 1960년대부터 1990년대까지의 수론 문헌에 문제가 있을 것으로 예상함. 전문가 커뮤니티가 작을수록 오류가 쉽게 간과될 수 있음.
"
"https://news.hada.io/topic?id=18183","OpenWrt 공급망 침해 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OpenWrt 공급망 침해 사건

  소개

     * Flatt Security Inc.의 보안 엔지니어 RyotaK가 OpenWrt의 펌웨어 업그레이드 과정에서 보안 취약점을 발견함.
     * OpenWrt는 임베디드 장치용 Linux 기반 펌웨어로, 특히 라우터에 인기가 많음.

  sysupgrade.openwrt.org

     * sysupgrade.openwrt.org는 사용자가 원하는 패키지를 선택하여 새로운 펌웨어 이미지를 생성할 수 있는 온라인 서비스임.
     * 사용자가 제공한 소스 코드로 이미지를 빌드하는 과정에서 보안 문제가 발생할 수 있음.

  명령어 주입

     * sysupgrade.openwrt.org 서버는 오픈 소스 프로젝트로, 소스 코드는 openwrt/asu에 호스팅됨.
     * 서버는 컨테이너를 사용하여 빌드 환경을 격리하지만, 사용자 입력을 통해 임의의 명령어를 실행할 수 있는 취약점이 발견됨.

  SHA-256 충돌

     * 요청의 해시를 생성하는 과정에서 SHA-256 해시가 12자로 잘려 사용됨.
     * 해시 충돌을 통해 잘못된 빌드 아티팩트를 반환하도록 서버를 속일 수 있음.

  SHA-256 무차별 대입

     * OpenCL을 사용하여 GPU에서 해시를 무차별 대입하는 프로그램을 구현했으나 성능이 좋지 않았음.
     * Hashcat을 사용하여 12자 충돌을 찾는 데 성공함.

  두 공격 결합

     * 합법적인 패키지 목록과 동일한 해시를 가진 명령어 주입 페이로드를 찾아 공격을 수행함.
     * 공격자는 사용자가 악성 펌웨어로 업그레이드하도록 강제할 수 있음.

  문제 보고

     * OpenWrt 팀에 문제를 보고한 후, 서비스가 일시 중단되고 빠르게 수정됨.
     * 사용자에게 공지가 발행되어 장치가 손상되지 않았는지 확인하도록 함.

  결론

     * 명령어 주입과 SHA-256 충돌을 통해 sysupgrade.openwrt.org 서비스를 손상시킬 수 있었음.
     * OpenWrt 팀의 빠른 대응에 감사하며, 사용자에게 문제를 신속히 알림.

  광고

     * Flatt Security는 보안 평가 및 침투 테스트 서비스를 제공하며, 새로운 웹 페이지 업데이트를 기념하여 특별 할인을 제공함.
     * Shisho Cloud라는 강력한 보안 평가 도구도 제공함.

        Hacker News 의견

     * 특정 사용자나 기기에 맞춰진 코드 실행의 정상화는 검증 가능성이 없고, 백도어가 포함된 빌드를 생성하지 않았다는 것을 확인할 수 없는 취약점이 있음
          + xz-utils의 동일한 빌드를 사용하거나, 보안 연구자들이 공급망 침투 여부를 확인할 수 있는 빌드를 사용하는 것이 중요함
          + Mozilla는 Merkle tree에 릴리스 빌드를 공개적으로 기록하려는 시도를 했으나 중단됨
          + Google은 Pixel 펌웨어 빌드에 대한 구현을 작성했지만, Google Play Store를 통한 앱은 취약할 수 있음
          + Apple은 개별 기기에 맞춰진 빌드를 투명하게 제공하지 않아 Google보다 더 나쁨
          + Gentoo의 ebuild 저장소는 잘 구현된 바이너리 투명성의 예시로, 오픈 소스 소프트웨어의 가장 크고 분산된 Merkle tree 중 하나임
     * "".join"" 사용은 위험할 수 있음
          + 인접한 필드 간의 문자를 이동시켜도 해시가 변경되지 않음
          + 시스템을 직접적으로 손상시키지는 않지만, 캐시를 손상시키거나 다운그레이드를 유도할 수 있음
     * 오픈 소스는 비즈니스급 폐쇄 소스와 경쟁할 수 없음
          + 문제를 3시간 만에 수정했으며, 고객이 6개월 동안 패치를 기다리지 않도록 함
          + 문제를 보고한 사람을 고소하지 않음
          + 사용자에게 ""구식""이지만 완벽하게 작동하는 기기를 버리라고 하지 않음
     * ""공급망""이라는 용어가 블로그 게시물에 나타나지 않음
          + ""공급망""은 원자재를 완제품으로 변환하고 최종 소비자에게 배포하는 복잡한 물류 시스템임
          + OpenWRT의 상업적 공급자를 위한 시스템인지, 최종 소비자를 위한 시스템인지에 대한 의문이 있음
     * 오픈 소스 도구는 원래 목적에 맞지 않게 조정되었음
          + 대기업은 문제를 해결하기 위해 소송을 제기하고 패치를 절대 공개하지 않을 것임
          + OpenWRT는 정보를 받은 후 불안전한 서비스를 오프라인으로 전환하고, 보고서를 확인한 후 3시간 만에 패치를 배포함
     * 해시를 잘라내는 아이디어가 어떻게 나왔는지 궁금함
          + 어떤 목적이나 이점이 있는지 이해하기 어려움
     * GPU 파워가 짧은 충돌을 찾는 데 많이 필요하다는 점에 놀람
          + 보안 분석에 한 달에 40k가 적절한 가격인지에 대한 의문이 있음
          + 좋은 보안 연구자가 연간 약 500k를 벌 수 있는지에 대한 질문이 있음
     * 해시의 길이가 64자 중 12자로 잘린다는 점을 즉시 알아챔
     * hashcat 성능이 인수 순서에 따라 크게 달라지는 이유에 대한 질문이 있음
          + 매 실행마다 대상 패턴을 스캔하는지에 대한 의문이 있음
     * 매우 영리한 코드 읽기와 익스플로잇 개발에 대한 훌륭한 글임
"
"https://news.hada.io/topic?id=18149","안드로이드 폰에 postmarketOS 설치 후 Docker를 홈 서버로 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             안드로이드 폰에 postmarketOS 설치 후 Docker를 홈 서버로 활용하기

     * 이 가이드는 Android 스마트폰에 Docker를 설치하고 이를 홈 서버로 활용하는 방법을 설명함
     * PostmarketOS를 기반으로 진행되며, 이 과정에서 데이터가 모두 삭제되므로 사용하지 않는 기기를 권장함
     * 해당 기기가 PostmarketOS 지원 목록에 있어야 하며, 다른 기기에서도 비슷한 방식으로 적용 가능
     * 이 튜토리얼에 필요한 것
          + Android 폰 (OnePlus 6 또는 OnePlus 6T 추천)
          + PC에 설치된 Fastboot
          + PostmarketOS 부팅 및 이미지 파일
     * 1단계: 개발자 모드 및 USB 디버깅 활성화
          + Android 폰에서 개발자 모드 활성화: 설정에서 ""빌드 번호""를 여러 번 탭하여 개발자 모드 활성화 메시지 확인
          + 개발자 옵션에서 OEM 잠금 해제 및 USB 디버깅 활성화
     * 2단계: PC에 Fastboot 설치
          + Android SDK 플랫폼 도구 페이지 에서 Fastboot 패키지 다운로드 및 설치
          + 패키지를 추출한 후 platform-tools 폴더를 시스템 환경 변수에 추가
     * 3단계: PostmarketOS 파일 다운로드
          + PostmarketOS 웹사이트에서 특정 폰 모델에 맞는 부팅 및 이미지 파일 다운로드
          + 파일을 추출하여 한 폴더에 저장
     * 4단계: Fastboot 모드로 진입
          + Android 폰을 재시작하고 Fastboot 모드로 부팅
          + OnePlus 6T의 경우 볼륨 업, 볼륨 다운, 전원 버튼을 동시에 눌러 Fastboot 모드 진입
          + USB 케이블로 PC에 연결
     * 5단계: PostmarketOS 플래시
          + 각 기기에 맞는 PostmarketOS 설치 가이드 확인 후 플래시
          + 명령 프롬프트 또는 터미널에서 다음 명령어 실행:
               o fastboot erase userdata
               o fastboot erase dtbo
               o fastboot flash boot boot_file_name.img
               o fastboot flash userdata img_file_name.img
          + 플래시 완료 후 폰 재시작
     * 6단계: 초기 설정 및 SSH 활성화
          + 폰 재시작 후 기본 PIN ""147147"" 입력
          + Wi-Fi 네트워크 연결
          + Console 앱에서 SSH 활성화 명령어 실행:
               o sudo apk update
               o sudo service sshd start
               o sudo rc-update add sshd
     * 7단계: PC에서 SSH로 폰 연결
          + PC에서 명령 프롬프트 또는 터미널 열고 SSH로 폰 연결:
               o ssh user@IP_Address_of_the_phone
          + 기본 사용자 이름은 ""user""
     * 8단계: Android 폰에 Docker 설치
          + SSH로 연결된 상태에서 다음 명령어로 Docker 설치:
               o sudo apk add docker
               o sudo service docker start
               o sudo rc-update add docker default
          + Docker 설치 확인: sudo docker ps
     * Docker 컨테이너 실행
          + Portainer 컨테이너 실행 명령어:
               o sudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
          + Portainer는 Docker 컨테이너 관리를 위한 웹 기반 인터페이스 제공
     * Portainer 인터페이스 접근
          + PC 웹 브라우저에서 IP_Address_of_the_phone:9443 입력하여 Portainer 인터페이스 접근
     * OnePlus 6T를 홈 서버로 사용할 때의 단점
          + 이더넷 지원 없음: Wi-Fi에만 의존하여 안정성과 속도가 부족할 수 있음
          + 외부 드라이브 지원 없음: 내부 메모리(256GB)로 제한되어 대규모 저장 작업에 부적합
     * 이 방법은 Raspberry Pi의 훌륭한 대안으로, 통합된 화면과 배터리를 제공하여 더 많은 기능을 제공함.

        Hacker News 의견

     * postmarketOS를 설치하면 Android 대신 일반 Linux를 사용할 수 있으며, Docker 설치가 가능함. Android의 OOM 킬러가 백그라운드 앱을 공격적으로 종료할 수 있어 서버 설정 시 피하는 것이 좋음. 배터리 문제로 24/7 운영이 장기적으로 가능한지 의문임. 배터리 제거를 권장함.
     * 저렴한 휴대용 서버를 찾는 사람들에게 Motorola G 시리즈 폰이 적합함. Android 14를 탑재한 모델은 120 USD 이하로 배터리 충전 제한 기능을 제공함. Termux에서 앱 백그라운드 킬러를 비활성화할 수 있으며, 루트 권한이 필요 없음. Wi-Fi는 350Mbit 속도를 지원하며, Speedify와 Tailscale을 결합하여 99% 가동 시간을 제공할 수 있음.
     * 러시아 밈을 언급하며, 단순한 도구로 복잡한 것을 만드는 것이 왜 필요한지 의문을 제기함.
     * Termux를 사용하여 Android에 Docker를 설치하는 것은 간단하다고 주장함. GitHub 링크를 통해 설치 방법을 공유함.
     * Linux 폰 운영체제의 현황에 대해 궁금해하며, 과거에는 통화만 가능했다고 언급함.
     * 화면이 깨진 폰에서 이를 수행할 수 있는 좋은 방법이 있는지 궁금해함. USB와 오디오를 통해 피드백을 받을 수 있는 방법을 찾고 있음. 화면 교체가 가능한지에 대한 질문을 던짐.
     * Docker를 사용하여 다양한 애플리케이션을 배포할 수 있는 홈 서버로 모바일 기기를 활용할 수 있다는 제안을 긍정적으로 평가함.
     * 휴대폰이 서비스 호스팅을 위한 패러다임 전환을 이끌 수 있을지 궁금해함. 배터리 수명 문제로 현재는 불가능하지만, 배터리 기술 발전과 효율적인 E 코어가 필요함.
     * 과거에는 휴대폰을 UPS가 내장된 서버로 사용하는 것이 멋진 아이디어로 여겨졌으나, 배터리 폭발 위험이 문제임.
     * 호환 가능한 폰이 이미 있는 경우에만 흥미롭다고 언급함. 그렇지 않으면 서버 사용에 더 적합한 저장 및 전력 기능을 갖춘 미니 PC에 시간과 돈을 투자하는 것이 더 나을 것임.
"
"https://news.hada.io/topic?id=18212","DSPy - 언어모델을 (프롬프팅 대신) 프로그래밍하는 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DSPy - 언어모델을 (프롬프팅 대신) 프로그래밍하는 프레임워크

     * DSPy(Declarative Self-improving Python)는 프로그래밍을 통해 언어 모델(LM)을 제어하도록 설계된 프레임워크
     * 간단한 분류기부터 복잡한 RAG 파이프라인, 에이전트 루프까지 모듈화된 AI 시스템을 빠르게 구축할 수 있으며, 프롬프트와 가중치를 최적화하는 알고리듬도 제공
     * 기존의 불안정한 프롬프트 대신 합성 가능한 파이썬 코드를 작성하여, 모듈화된 AI 시스템을 빠르게 구축하고 LM이 고품질 출력을 생성하도록 학습시킬 수 있음
     * Module을 사용하여 AI 동작을 문자열이 아닌 코드로 기술
          + 신뢰할 수 있는 AI 시스템을 구축하려면 빠르게 반복해야 함
          + 그러나 프롬프트를 유지 관리하면 LM, 메트릭 또는 파이프라인을 변경할 때마다 문자열이나 데이터를 수정해야 하므로 어려움
          + DSPy는 LM 시스템 정의를 특정 LM이나 프롬프팅 전략에 대한 복잡한 선택과 분리하기 위해 개발됨
          + DSPy의 프로그래밍 방식
               o DSPy는 프롬프트 문자열 조정에서 구조화되고 선언적인 자연어 모듈을 사용한 프로그래밍으로 초점을 전환함
               o 시스템의 모든 AI 구성 요소에 대해 입출력 동작을 시그니처로 지정하고 모듈을 선택하여 LM 호출 전략을 할당함
               o DSPy는 시그니처를 프롬프트로 확장하고 타입이 지정된 출력을 파싱하여 사용하기 쉽고 이식 가능하며 최적화 가능한 AI 시스템을 작성할 수 있음
     * Optimizer가 AI 모듈의 프롬프트와 가중치를 조정
          + DSPy는 자연어 주석이 포함된 고수준 코드를 저수준 연산, 프롬프트 또는 가중치 업데이트로 컴파일하는 도구를 제공함
          + 이를 통해 LM을 프로그램의 구조 및 메트릭과 정렬할 수 있음
          + 코드나 메트릭을 변경하면 이에 맞게 간단히 다시 컴파일할 수 있음
          + DSPy 최적화 프로세스
               o 작업의 대표적인 입력 몇 십 개 또는 몇 백 개와 시스템 출력의 품질을 측정할 수 있는 메트릭이 있다면 DSPy Optimizer를 사용할 수 있음
                    # dspy.BootstrapRS는 모든 모듈에 대해 좋은 few-shot 예제를 합성함
                    # dspy.MIPROv2는 모든 프롬프트에 대해 더 나은 자연어 명령을 제안하고 지능적으로 탐색함
                    # dspy.BootstrapFinetune은 모듈용 데이터셋을 구축하고 이를 사용하여 시스템의 LM 가중치를 미세 조정함
     * DSPy 생태계는 오픈소스 AI 연구를 발전시킴
          + DSPy의 모듈식 패러다임은 거대 언어 모델과 비교하여 더 많은 연구자들이 LM 프로그램의 구성 아키텍처, 추론 시간 전략, 최적화 도구를 분산된 방식으로 개선할 수 있는 기회를 제공함
          + 이는 DSPy 사용자들에게 더 많은 제어권을 부여하고, 반복 작업을 더 빠르게 할 수 있도록 도와주며, 최신 최적화 도구나 모듈을 적용하여 프로그램이 시간이 지날수록 발전할 수 있게 하는 이점이 있음
          + DSPy 연구는 2022년 2월 Stanford NLP에서 시작되었으며, ColBERT-QA, Baleen, Hindsight와 같은 초기 복합 LM 시스템 개발에서 얻은 교훈을 바탕으로 구축됨
          + 2022년 12월에 DSP로 처음 출시되었고 2023년 10월에 DSPy로 발전하였으며, 250명의 기여자들 덕분에 수만 명의 사람들이 모듈형 LM 프로그램을 구축하고 최적화하는 방법을 배울 수 있게 됨
          + DSPy 커뮤니티는 MIPROv2, BetterTogether, LeReT와 같은 최적화 도구와 STORM, IReRa, DSPy Assertions와 같은 프로그램 아키텍처에 대한 많은 연구 성과를 이룩함
          + PAPILLON, PATH, WangLab@MEDIQA, UMD의 프롬프팅 사례 연구, Haize의 Red-Teaming 프로그램과 같은 새로운 문제에 대한 성공적인 적용 사례도 다수 보유하고 있음
          + 이 외에도 많은 오픈소스 프로젝트, 프로덕션 애플리케이션 및 기타 사용 사례들을 통해 DSPy의 실용성이 입증됨
"
"https://news.hada.io/topic?id=18157","유나이티드헬스의 환자 치료 보장 거부 시도 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     유나이티드헬스의 환자 치료 보장 거부 시도 (2023)

  UnitedHealthcare의 보험 거부 사례

     * 배경: Christopher McNaughton은 펜실베이니아 주립대학의 학생으로, 궤양성 대장염 치료를 위해 보험사 UnitedHealthcare와 싸우고 있음. 이 과정에서 보험사의 내부 절차가 드러남.
     * 보험사의 거부: McNaughton은 Mayo Clinic에서 개발한 고가의 약물 치료로 병을 통제하고 있었으나, UnitedHealthcare는 이를 ""의학적으로 필요하지 않다""며 거부함. 이로 인해 McNaughton의 가족은 소송을 제기하게 됨.
     * 보험사의 절차: 보험사는 내부 이메일과 녹음된 대화를 통해 비용 절감을 위해 치료를 거부하려는 시도를 함. McNaughton의 치료가 FDA 가이드라인을 초과한다는 이유로 거부했으나, 실제로는 비용 절감이 주요 목표였음.
     * 의료 전문가의 의견: McNaughton의 주치의는 치료 변경이 그의 건강에 위험을 초래할 수 있다고 경고했으나, 보험사는 이를 무시하고 비용 절감을 위한 결정을 내림.
     * 결과: 결국 UnitedHealthcare는 McNaughton의 치료비를 지불했으나, 이 과정에서 보험사의 절차와 결정이 어떻게 이루어지는지에 대한 중요한 정보가 드러남.

  McNaughton의 개인적 배경

     * 건강 상태: McNaughton은 심각한 궤양성 대장염을 앓고 있으며, 이는 심각한 관절염, 피로, 혈전 등을 유발함. 여러 약물 치료가 실패한 후 Mayo Clinic의 Dr. Edward Loftus Jr.의 치료로 상태가 호전됨.
     * 치료 과정: McNaughton은 두 가지 생물학적 제제를 고용량으로 병용하는 치료를 받았으며, 이는 그의 증상을 크게 개선시킴. 그러나 보험사는 이 치료를 거부하려 함.
     * 보험사의 대응: 보험사는 McNaughton의 치료를 거부하기 위해 여러 차례 내부 검토를 진행했으며, 이 과정에서 의사의 의견을 왜곡하거나 무시함.

  결론

     * 보험사의 절차: 이 사건은 보험사가 비용 절감을 위해 어떻게 치료를 거부할 수 있는지를 보여줌. McNaughton의 사례는 보험사의 결정이 환자의 건강에 미치는 영향을 강조함.
     * 소송의 중요성: McNaughton 가족의 소송은 보험사의 내부 절차를 공개하는 데 중요한 역할을 했으며, 이는 다른 환자들에게도 영향을 미칠 수 있음.

        Hacker News 의견

     * UNH의 CEO인 Thompson의 연봉이 1,020만 달러에 달하며, 이는 평균 미국인의 평생 소득의 10배에 해당함. 고객의 돈이 서비스 제공 대신 소수의 개인에게 돌아가고 있음.
          + 고객들은 자신이 지불한 돈이 서비스 제공에 사용되기를 기대하지만, 많은 돈이 소수의 개인에게 돌아가고 있음.
          + 심각한 건강 문제를 가진 사람들은 단지 자신이 지불한 서비스를 기대하고 있음.
     * 보험 회사뿐만 아니라 병원과 제약 회사도 가격 인상에 책임이 있음. 보험이 지불할 때 병원은 가격을 올리고, 환자가 직접 지불할 때는 가격이 더 합리적임.
     * 가격이 숨겨져 있는 상황을 이해할 수 없음. 유럽에서 온 친척이 급히 병원을 방문했을 때 2,500달러의 청구서를 받았으나, 협상 후 250달러로 해결됨.
     * 보험사가 고객 관리를 우선시한다면, 의사들이 보험 정책에 접근할 수 있는 이유를 이해할 수 없음. 시스템의 복잡성과 무능함이 문제임.
     * 의료 보험은 비영리로 규제되어야 함. 미국의 건강 산업은 비윤리적인 기업 행동이 만연해 있음.
     * 공공 의료 시스템이 있는 국가의 행운을 깨달음. 사설 시스템은 평균 사람에게 아무런 이점이 없음.
     * 보험사가 고용주에게 직원의 건강 비용이 너무 비싸다고 설득하여 해고를 유도할 수 있는지에 대한 우려가 있음.
"
"https://news.hada.io/topic?id=18257","Node.js, "require(esm)"이 활성화된 첫번째 LTS 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Node.js, ""require(esm)""이 활성화된 첫번째 LTS 발표

기본값으로 require(esm) 활성화

     * Node.js 22.12.0 ('Jod') LTS 버전이 출시되었으며, 기본적으로 require(esm) 기능이 활성화됨
          + 더 이상 --experimental-require-module 플래그가 필요하지 않음
          + require()를 사용해 네이티브 ES 모듈을 로드할 수 있게 되었음
     * 기능 배경:
          + CommonJS(CJS) 사용자에게 호환성을 유지하면서 ES 모듈(ESM) 채택을 가속화하기 위함
          + 플러그인 코드에 네이티브 ESM 지원을 도입하는 데 도움을 주며, 프레임워크와 도구의 전환 과정을 지원함
     * 개발자 참고사항:
          + require()로 로드할 때 ERR_REQUIRE_ESM 에러가 더 이상 발생하지 않음
          + 단, 모듈에 top-level await가 포함된 경우 ERR_REQUIRE_ASYNC_MODULE 에러 발생 가능
          + 경고 메시지는 모듈이 node_modules 경로에서 로드되지 않을 때 출력됨

자동화된 프로세스를 통한 릴리스 속도 향상

     * 2023년부터 릴리스 과정의 자동화를 추진했으며, 최근 몇 달 동안 보안 릴리스 관련 작업을 자동화하여 효율성을 높였음
     * 새로운 기능:
          + 릴리스 워크플로우를 간소화하는 --releaseDate 및 --yes 플래그 추가
          + 보안 릴리스의 변경 로그에 CVE-ID 메타데이터를 자동으로 포함하는 기능 추가
     * 릴리스 정책 변화:
          + Node.js 24부터 모든 주요 릴리스에 안정성을 위한 1개월 ""베이킹 기간""을 필수적으로 포함

보안 강화

     * 보안 보고 감소:
          + 2024년 10~11월 동안 보고된 보안 이슈가 총 10건으로 역대 최저 기록
          + 보고 내용: 스팸(1), 비적용(4), 참고용(2), 신규 문제(2), 분류 완료(1)
     * 개선 효과:
          + 새로운 보안 정책이 시스템 보호 강화에 기여
          + 자동화된 워크플로우로 릴리스 제안, 웹사이트 배너 업데이트, 블로그 게시물 관리가 간소화됨
     * 추가 개발:
          + 변경 로그에 CVE-ID 메타데이터 자동 추가를 통해 보안 릴리스 속도 개선

핵심

     * require(esm)의 기본 활성화는 CommonJS와 ES 모듈 간의 격차를 줄이는 중요한 단계로, 개발자들이 현대적이고 상호운용 가능한 JavaScript 개발을 수월하게 할 것임
     * Node.js는 성능, 보안, 생태계의 유연성을 계속해서 발전시키며 JavaScript 언어와 플랫폼의 글로벌 영향력을 강화하는 데 기여하고 있음
"
"https://news.hada.io/topic?id=18160","최대 규모의 Shell 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           최대 규모의 Shell 프로그램

     * 세계에서 가장 큰 쉘 프로그램
          + akinomyoga/ble.sh: 총 61K LoC (46K SLoC). Bash Line Editor로, 순수 bash로 작성된 fish-like 인터랙티브 라인 편집기임. 주요 파일 out/ble.sh는 30K LoC (23K SLoC)를 포함하고 있으며, 전체적으로 60K+ LoC가 있음. 일본어로 된 많은 주석이 포함되어 있음. ble.sh의 작동 방식에 대한 개요가 있으며, 매우 정교한 데이터 구조 사용을 보여줌.
          + kalua: OpenWRT 애드온으로 약 56K SLoC/라인의 POSIX 쉘로 구성됨.
          + bashdb: bash 디버거로 약 14K 라인의 bash로 구성됨. 디버거 구현의 흥미로운 역사를 가짐.
          + drwetter/testssl.sh: 단일 파일에 21K 라인의 bash로 구성됨. 수작업으로 작성된 것으로 보임.
          + Simplenetes: 17K 라인의 Shell로 구성된 Kubernetes. 놀랍지만 현재는 비활성 상태임.
          + rkhunter: 공식 사이트에서 21K 라인의 Bourne 쉘로 2003-2018년 사이에 작성됨.
          + romkatv/powerlevel10k: 디렉토리 internal/에 12K 라인의 zsh 스크립트가 있음. 추가로 8K 라인의 구성 및 도우미 스크립트가 있음.
          + dylanaraps/neofetch: 10K 라인의 bash 3.2로 시스템 정보를 표시함.
          + xwmx/nb: nb 자체에 26K LoC (22K SLoC)의 bash가 있음. 추가로 bats 테스트를 bash로 계산하면 91K LoC (61K SLoC)가 있음.
          + distrobox: 7K 이상의 bash 스크립트로 구성됨. 터미널 내에서 어떤 리눅스 배포판도 사용할 수 있음.
          + acme.sh: 7K 라인의 쉘 스크립트로 인증서를 발급 및 갱신함.
          + inxi 2.3.56 [obsolete]: 16K 라인의 bash로 구성됨. 2008년에 infobash의 포크로 시작됨.
          + bashforth: 약 3800 라인으로 구성되었지만 실제 프로그래밍 언어를 구현함.
          + yoda: bashforth의 절반 크기지만 전체 인터프리터와 컴파일러를 구현함.
          + vegardit/bash-funk: 총 27K LoC (24K SLoC)의 Bash 라이브러리.
          + Relax-and-Recover: 35K LoC (24K SLoC). 백업 및 복원 도구.
          + abcde / A Better CD Encoder: CD 리핑에 사용되며 약 5.5k LoC로 구성됨.
          + thc-segfault: 3.3K LoC. 주로 Bash로 구축된 pubnix 서버.
          + ffmpeg/configure: 8.4K LoC. FFmpeg의 구성 스크립트로 수작업으로 작성됨.
          + ffhevc: 4k LoC. FFmpeg 및 libx265를 사용하여 HEVC 비디오로 인코딩하기 위한 완전 수작업 Bash 래퍼 스크립트.
          + ffx264: 3.9k LoC. FFmpeg 및 libx264를 사용하여 H.264/AVC 비디오로 인코딩하기 위한 완전 수작업 Bash 래퍼 스크립트.
          + h264enc: 9.2k LoC. MEncoder를 사용하여 H.264/AVC 비디오로 인코딩하기 위한 완전 수작업 Bash 래퍼 스크립트.
          + bashtop: 5.3k LoC. 리소스 모니터.
          + halcyon: 6.6k LoC. Haskell 앱 설치 시스템.
          + winetricks: 22K 라인의 쉘 스크립트. Wine에서 다양한 Windows 프로그램을 설치함.
          + wordshell: 약 7k 라인의 코드. 명령줄에서 여러 WordPress 사이트를 관리함.
          + BaCon: 약 10k 라인의 코드. BASIC으로 작성된 프로그램을 C로 변환함.
     * 쉘 유사 언어 / DSL
          + modernish: 쉘로 작성된 이식 가능한 쉘 방언.
          + bats: 테스트 작성을 위한 DSL. bash 코드를 생성함.
          + bashible: bash에서 Ansible과 유사한 DSL.
          + clash: 현대 POSIX 쉘과 호환되는 객체 지향 프레임워크.
          + bash Infinity: bash를 위한 표준 라이브러리 및 보일러플레이트 프레임워크.
     * 작은 프로그램
          + Alpine, Aboriginal, Debian scripts: 블로그 게시물 참조.
          + Completion scripts: 크지만 종종 반복적임.
          + _git Zsh completion: 8.3k 라인의 코드.
          + git-completion.bash: Docker completion.
          + dyne/Tomb: 약 3500 라인의 zsh 스크립트.
          + Basalt: 순수 Bash로 작성된 완전한 기능의 패키지 관리자 (약 2021년). 몇 천 라인에 불과하지만 이미 풍부한 생태계(15개 이상의 앱/라이브러리)가 있음.

        Hacker News 의견

     * Sony에서 25년 전, 매우 느리고 자주 다운되는 주문 관리 시스템을 개선하는 프로젝트에 배정받았음.
          + AIX 서버에서 수십 년 동안 방치된 50,000줄의 셸 스크립트로 구성된 시스템이었음.
          + Perl을 사용하여 시스템을 5,000줄로 줄이고 성능을 10-100배 향상시켰음.
          + 이 프로젝트는 매우 만족스러운 경험이었음.
     * Enrust CA와 디렉토리 설치 프로그램을 작성했으며, 모든 Unix에서 실행되도록 발전했음.
          + 설치는 간단했지만, 업그레이드는 복잡했음.
          + 각 Unix의 유틸리티가 약간씩 달라서 관리가 필요했음.
          + DEC의 Unix는 명령줄 유틸리티가 출력 폭을 제한하는 등 혼란스러웠음.
          + HP-UX는 버전마다 변경 사항이 있었음.
     * 스크립팅 언어 Lil을 bash로 해석기를 작성하려 했으나, 부동 소수점 연산의 어려움과 제한된 배열 지원으로 AWK를 선택했음.
          + AWK는 POSIX 환경에서 사용 가능하고, 일반적인 언어로 적합했음.
     * Bash 스크립트는 복잡한 프로그램 작성에 적합하지 않음.
          + 가독성이 떨어지고, 변수 범위 규칙이 미묘하며, 오류 처리가 원시적임.
          + 정적 분석 도구, 린터, 디버거가 부족하여 유지보수가 어려움.
          + 테스트가 번거롭고, 복잡한 논리나 데이터 구조를 다루기 어려움.
          + Bash는 간단한 자동화에 적합하지만, 복잡한 애플리케이션에는 다른 언어가 더 나음.
     * rkhunter 스크립트는 코드가 좋고 정보가 풍부함.
          + 다양한 플랫폼에서 유틸리티가 예상대로 작동하도록 보장하는 데 많은 코드가 사용됨.
          + 복잡한 프로그래밍 언어로 작성되었다면 덜 투명했을 것임.
     * 과거에 사용한 가장 큰 셸 프로그램은 abcde로, 약 5500줄의 코드로 구성됨.
     * FreeBSD Update 클라이언트는 약 3600줄의 sh 코드로 구성됨.
          + 운영 체제를 업데이트하는 도구로서 상당한 기능을 제공함.
     * 셸은 가용성이 보장되는 유일한 도구일 수 있지만, 큰 셸 앱을 작성할 때는 재고할 필요가 있음.
     * acme.sh 스크립트는 7.1K 줄로, Lets Encrypt에서 인증서를 발급하고 갱신하는 데 사용됨.
     * mod_pagespeed에서 셸 스크립트를 사용하여 시스템 테스트를 수행했으나, Python으로 전환하는 것이 더 나았을 것임.
          + 10,579줄의 bash 코드가 사용되었음.
          + 점진적으로 전환하는 것이 더 효율적이었을 것임.
"
"https://news.hada.io/topic?id=18236","OnlyFans 모델들, AI를 사용하여 DM을 관리중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OnlyFans 모델들, AI를 사용하여 DM을 관리중

     * 기술 발전으로 인해 AI가 일부 직업을 대체하고 있음
     * OnlyFans의 ""Chatter""(팬과의 메시지를 대신 관리하는 인력) 직업도 영향을 받고 있음
     * OnlyFans의 주요 수익 모델 중 하나는 크리에이터와 팬들 간의 직접적인 메시지 교환을 통한 관계 형성임
     * 많은 크리에이터들이 수천 명의 팬들과 동시다발적인 대화를 진행해야 하는 상황
     * 이전에는 필리핀, 파키스탄, 인도 등 저임금 국가의 계약직 채터들이 크리에이터를 대신하여 메시지 응답을 담당했음
     * 하지만 이젠 AI 도구를 제공하는 스타트업들이 증가하고 있으며, 많은 크리에이터들이 이를 사용중
          + ChatPersona, FlirtFlow, ChatterCharms, Supercreator, Botly 등 다양한 AI 기반 채팅 서비스가 시장에 진출함
     * ChatPersona 사례
          + 실제 크리에이터들의 채팅 데이터를 기반으로 AI 모델을 구축
          + 약 6,000명의 개인 및 기업 고객을 확보
          + 인간이 ""전송"" 버튼을 눌러야 한다는 조건으로 OnlyFans의 약관을 준수한다고 주장
     * Supercreator 사례
          + 'Inbox Copilot'이라는 AI 도구를 통해 고객을 자동으로 분류하고 우선순위를 설정함
          + 장기 미접속 사용자가 접속할 때 자동 메시지를 발송하는 기능을 제공해 판매에 직접적인 영향을 미침
     * AI 도구를 사용하여 판매가 크게 증가함
          + 팬의 소비 패턴에 따라 타겟팅이 가능함.
          + AI가 메시지의 기본 내용을 작성하고, 크리에이터가 이를 보완하는 방식으로 운영됨
          + 일부 대화에서 AI가 시작한 메시지가 큰 팁으로 이어지는 사례도 존재
          + 일부 AI는 완전히 자동화되어 있지만, 창작자들은 자신의 말을 섞어 사용하기를 선호함
     * OnlyFans의 서비스 이용약관에는 AI 채터봇 사용에 대한 명시적 언급이 없음
     * 일부 에이전시는 AI 도구 사용으로 매출이 크게 증가했다고 보고함
          + AI를 활용해 메시지 작성의 효율성을 높이되, 크리에이터가 직접 개입하여 ""진정성""을 유지하려고 시도중
     * 윤리적 고려사항
          + 팬들에게 AI 사용 여부를 공개하지 않는 것이 논란이 될 수 있음
          + 소비자들은 점점 더 AI와 소통하고 있다는 사실을 받아들여야 할 필요
          + 온라인 쇼핑이나 보험 상담 등 다른 산업 분야에서도 유사한 윤리적 문제가 제기되고 있음

   https://news.hada.io/topic?id=13169

   AI와 인간이 교감 하는 듯한 사례들을 보면 'Her'의 주인공이 사만다와 사랑에 빠진다는 것이 현실에서도 충분히 있을 수 있는 일처럼 느껴집니다.

        Hacker News 의견

     * YouTube는 크리에이터에게 LLM 기반의 자동 응답 기능을 제공함. 이 기능은 크리에이터의 실제 응답을 학습한 것임
          + 추가적으로, 비디오 아이디어, 스크립트, 썸네일까지 생성하는 기능도 있음
          + 이러한 기능의 긍정적인 사용 이유가 무엇인지 의문임. 사람들에게 실제 상호작용을 하는 것처럼 속이는 것이 유일한 사용 사례로 보임
     * OnlyFans는 법적 문제를 검토할 필요가 있음
          + 모델과의 실제 상호작용을 판매하는 것에 대해 사기 혐의로 집단 소송이 제기될 수 있음
          + OnlyFans 사용자는 더 잘 알아야 하지만, 모델과의 상호작용 서비스에서 사기를 당했다고 주장할 수 있음
     * 현재 시대를 반영하는 것 같음: 외로운 사람들이 실제 대면 상호작용이 부족한 상황에서 채팅봇을 통해 기가 경제를 형성함
     * Westworld의 한 장면이 항상 떠오름: 주인공이 처음으로 도착해 호스트를 만나는 장면
          + ""당신은 진짜인가요?""라는 질문에 ""알 수 없다면, 그게 중요할까요?""라는 대답이 인상적임
          + 진실을 모른다면 중요하지 않지만, 알게 된다면 중요해지는 슈뢰딩거의 고양이와 같음
     * 모델 자체가 AI 모방자로 대체될 것임. OnlyFans는 내가 사용해본 서비스 중 가장 착취적인 서비스임
          + 사기꾼의 표적이 되기 쉬움. 필리핀의 아이들이나 AI 봇이든, 모든 크리에이터가 이를 사용함
          + 몇 년 전에는 실제 대화를 할 수 있었지만, 이제는 미화된 스팸에 불과함
     * Supercreator라는 회사는 CRM을 가지고 있음. 이는 단순한 AI 챗봇이 아닌, 실제 기업용 솔루션임
          + 크리에이터와 ""에이전시""를 SMB로 간주하고, CRM을 판매하여 팬이나 구독자를 관리함
          + 매우 흥미로움. 웹사이트를 보면 ""데모 요청"" 섹션이 있고, 기업용 SaaS 웹사이트처럼 보임
     * OnlyFans 고객들이 이를 이해하지 못하는 이유를 모르겠음
          + 수십만 명의 구독자를 가진 사람이 개인적으로 채팅할 것이라고 생각하는가? AI나 다른 사람이 대신할 것임
          + 많은 사람들이 이렇게 쉽게 속는다는 것이 이해하기 어려움
     * 더 나은 헤드라인은 ""OnlyFans 인간 채터가 AI로 대체되고 있음""일 것임
          + 대부분의 모델은 실제 대화를 하지 않음. 많은 모델이 영어를 전혀 하지 못함
          + DMs는 처음부터 채터에 의해 처리되었음. 모델과는 관련이 없음
     * 사람들은 모델과 대화하기 위해 가입함
     * 우리나라는 점점 심각해지는 외로움 전염병을 겪고 있으며, 이는 이를 더욱 악화시킴
          + $1,000 팁은 많은 데이트를 하거나 친구들과 여행을 갈 수 있는 금액임. OF를 더 매력적인 직업 옵션으로 만들기보다는 더 만족스러운 삶과 경력을 가질 수 있는 잠재력을 가진 사람들에게 더 나은 선택이 될 수 있음
"
"https://news.hada.io/topic?id=18228","Mullvad VPN 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Mullvad VPN 리뷰

     * Mullvad VPN 보안 감사
     * X41이 Mullvad VPN 애플리케이션에 대한 소스 코드 접근을 포함한 화이트 박스 침투 테스트를 수행함.
     * 이 테스트는 Linux, Windows, macOS, Android, iOS 등 5개 플랫폼에서 실행되는 애플리케이션의 복잡성 때문에 도전적이었음.
     * 정기적인 감사와 침투 테스트를 통해 Mullvad VPN 애플리케이션은 높은 보안 수준을 유지하고 있음.
     * 테스트 결과
     * 총 6개의 취약점이 발견됨.
     * 가장 심각한 취약점은 신호 처리기 코드에서의 경쟁 조건과 시간 안전성 위반으로 인한 메모리 손상 문제임.
     * 네트워크 인접 공격자가 사용자의 신원을 유출할 수 있는 취약점과 특정 상황에서 클라이언트가 현재 접속 중인 사이트를 드러낼 수 있는 부채널 공격이 있음.
     * Mullvad VPN AB는 이러한 취약점을 신속하게 해결하였고, 수정 사항이 제대로 작동하는지 감사받음.
     * 결론
     * 클라이언트 애플리케이션은 제한된 수의 관련 취약점을 드러냈으며, Mullvad VPN AB는 이를 신속하게 해결함.
     * X41은 Mullvad VPN AB와의 원활한 협력과 소통에 감사의 뜻을 전함.
     * 링크
     * 전체 보고서
     * Mullvad 발표
     * Mullvad의 이전 감사

        Hacker News 의견

     * X41의 Mullvad 감사 보고서에서 발견된 문제들은 비교적 간단함. DAITA(Defence against AI Traffic Analysis)에 대해 많이 의존하고 있음.
          + DAITA는 AI 트래픽 분석에 대한 방어로, 추가적인 학습이 필요할 수 있음
     * VPN 사업은 요즘 매우 활발하지만, 고객을 제대로 대우하지 않거나 제공하는 서비스에 대해 투명하지 않다고 느껴짐
          + 특히 스칸디나비아 국가에서 오는 ""멋진"" VPN들이 많다고 하지만, 실제로는 그렇지 않음
     * 감사 보고서에서 위협 모델 섹션이 잘 작성되어 있음. 많은 감사 기관들이 이 부분을 생략하는 경우가 많음
          + Cure53, Assured, Atredis와 같은 이전 감사 기관들이 Mullvad와 적절한 위협 모델을 설정했을 것으로 보임
     * 공개 감사 보고서가 ""이 회사는 매우 안전하고 잘하고 있다""는 식으로 작성되는 경우가 많음
          + X41이 특정한 불만은 아니지만, 많은 평가 기관들이 이런 경향이 있음
          + 그러나 Rust 프로그램에서 힙 손상 취약점을 발견한 것은 좋은 성과임
     * Mullvad VPN 앱에 대한 감사 보고서가 공개됨
          + Mullvad 서비스가 아닌 앱에 대한 감사임
     * Mullvad는 과거에 훌륭했지만, 포트 포워딩을 중단하면서 토렌트 사용이 어려워짐
          + OpenVPN의 지원 중단도 불편함을 초래함
          + 다른 VPN으로 이동할 계획임
     * OpenBSD에서 WireGuard와 함께 Mullvad VPN을 사용 중이며, 잘 작동함
          + 익명성을 위해 비트코인으로 월 단위 구매 가능함
     * ""X41이 Mullvad VPN 앱을 감사했다""는 제목이 더 명확할 수 있음
     * VPN을 리뷰하는 진지한 웹사이트가 있는지 궁금함
          + 인터넷에서 스폰서되지 않은 정보를 찾기가 항상 어려움
          + Mullvad가 P2P를 지원하는 최고의 VPN 중 하나라는 평판이 있음
"
"https://news.hada.io/topic?id=18241","비만, 흡연을 제치고 주요 질병 위험 요인으로 부상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      비만, 흡연을 제치고 주요 질병 위험 요인으로 부상

     * 과체중이 흡연을 질병 위험 요인으로 앞지름
          + 2024년, 과체중 및 비만이 흡연을 제치고 질병 부담의 주요 위험 요인으로 부상함.
          + 호주 보건복지연구소(AIHW)의 '2024 호주 질병 부담 연구'에 따르면, 호주인들이 부상, 질병 또는 조기 사망으로 인해 잃는 건강한 삶의 연수를 추정함.
          + 이 보고서는 알코올 사용, 신체 활동 부족, 불량한 식단, 과체중 또는 비만, 흡연 등 20개의 개별 위험 요인에 기인한 질병 부담을 추정함.
     * 주요 결과
          + 2024년, 호주인들은 질병과 조기 사망으로 인해 약 580만 년의 건강한 삶을 잃음.
          + 전체 질병 및 부상의 3분의 1 이상이 연구에 포함된 수정 가능한 위험 요인으로 인해 피하거나 줄일 수 있었음.
          + 2003년 이후 흡연으로 인한 부담이 41% 감소하면서 과체중 및 비만이 2024년 주요 위험 요인으로 부상함.
          + 흡연율 감소와 폐암 및 만성 폐쇄성 폐질환(COPD)과 같은 주요 연관 질환의 부담률 감소가 원인으로 추정됨.
     * 질병 부담의 통계
          + 2024년 전체 질병 부담의 8.3%가 과체중(비만 포함)으로 인한 것이며, 7.6%는 흡연(전자담배 제외)으로 인한 것임.
          + 그 외 식단 위험(4.8%)과 고혈압(4.4%)이 뒤를 이음.
          + 15-24세 남성의 경우 알코올 및 불법 약물 사용이 주요 위험 요인으로, 같은 연령대 여성의 경우 아동 학대 및 방임이 주요 위험 요인으로 작용함.
     * 질병 부담의 변화
          + 2003년과 2024년 사이에 인구 고령화를 조정한 후 전체 질병 부담률이 10% 감소함.
          + 치명적 부담률이 26% 감소한 반면, 비치명적 부담률은 7% 증가함.
          + 평균적으로 호주인들이 더 오래 살고 있지만, 건강하지 않은 상태로 사는 연수도 증가하여 완전한 건강 상태로 사는 삶의 비율에는 큰 변화가 없음.
     * 주요 질병 및 성별 차이
          + 2024년, 암이 질병 부담의 주요 원인으로 16.4%를 차지하며, 이 중 91.3%가 치명적이고 8.7%가 비치명적임.
          + 주요 질병 부담 원인은 관상동맥 심장병(5.5%), 치매(4.5%), 요통 및 문제(4.3%), 불안 장애(3.9%), COPD(3.7%)임.
          + 남성이 모든 연령대에서 여성보다 더 많은 질병 부담을 경험하며, 이는 남성이 더 높은 치명적 부담률을 가지기 때문임.
          + 젊은 층에서는 정신 건강 상태와 자살 및 자해가 주요 질병 부담 요인으로 작용함.

        Hacker News 의견

     * 연구 논문은 BMI와 관련된 사망 유형을 분석하며, 모든 원인에 의한 사망률이 가장 낮은 BMI는 25임을 보여줌. BMI 30은 위험 비율을 크게 증가시키지 않지만, BMI 45는 두 배로 증가시킴. 암 사망률의 최소 BMI는 21이며, 전염병 사망률의 최소 BMI는 26임.
          + 2024년에는 비만을 포함한 과체중이 담배 사용을 제치고 주요 위험 요인이 되었음. 이는 2003년 이후 담배 사용에 따른 부담이 41% 감소했기 때문임.
          + 많은 사람들이 비만 인구가 증가한 것이 아니라 흡연 인구가 감소한 것임을 놓치고 있음.
     * 음식 회사들이 중독성 있고 건강에 해로운 음식을 광고하고 판매하는 방식에 대해 책임을 지게 될 날이 올지 궁금함. 이는 담배 회사에 대한 책임과 유사한 상황임.
     * 음식 중독은 흡연 중독보다 치료하기 훨씬 어려움. 흡연은 완전히 끊고 잊어버리는 것이 일반적인 방법이지만, 음식은 끊을 수 없고 맛있으며 무한정으로 제공됨.
     * 알코올 소비가 비만뿐만 아니라 건강 저하와 자살/우울증 증가에 더 큰 영향을 미친다고 확신함. 알코올은 사회적으로 허용된 독이며, 어떤 양의 소비도 개인에게 나쁜 영향을 미침.
     * 가장 효과적인 다이어트 중 하나는 커피와 담배 다이어트임. 배고플 때마다 커피와 담배를 먼저 하고, 여전히 배고프면 조금 먹음. 이는 다른 칼로리 제한 다이어트보다 준수율이 높음.
     * 최근 비만율이 증가하지 않고 감소했다는 뉴스 기사를 봄. GLP-1s가 이에 얼마나 기여했는지 궁금하며, 앞으로 얼마나 더 기여할지 궁금함.
          + 건강 보험사들이 비용 절감 조치로 GLP-1s를 무료로 제공하는 시점이 3년 이내일 것임.
     * 건강 위험을 경시하거나 반박하는 감정이 소셜 미디어에서 커지고 있으며, 이는 현실 세계에 강한 영향을 미침. 건강에 해로운 음식 제공을 막으려는 노력이 약화되고, 의사들은 환자와 체중에 대해 논의하는 것을 꺼리게 됨. 과체중 모델은 건강하지 않은 신체 구성을 정당화함.
          + 공공장소(예: 학교, 병원)에서 제공되는 음식의 품질을 의무적으로 높이고, 설탕이 많은 음식과 음료의 판매를 제한하며, 갈망을 유발하는 물질을 전면 금지하는 노력이 필요함.
"
"https://news.hada.io/topic?id=18140","Trailbase - Rust/SQLite/V8 기반 싱글파일 오픈소스 앱 서버 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Trailbase - Rust/SQLite/V8 기반 싱글파일 오픈소스 앱 서버

     * TrailBase는 빠르고 오픈 소스인 애플리케이션 서버로, Rust, SQLite, V8을 기반으로 구축
     * Type-Safe CRUD API, 내장 JS/ES6/TS 런타임
     * Auth (암호 및 소셜/OAuth, JWT 기반) 및 Admin UI 제공
     * 모바일, 웹, 데스크톱 애플리케이션을 위한 단일 파일의 확장 가능한 백엔드를 쉽게 셀프 호스팅할 수 있음
     * 서브 밀리초의 지연 시간으로 전용 캐시가 필요 없음
     * PocketBase 보다 10배, SupaBase 보다 20배 빠름
     * OSL-3.0 라이선스 하에 무료 소프트웨어로 제공됨
          + AGPLv3와 같은 유사한 카피레프트 라이선스보다 좁은 파생 작업 정의를 가짐
          + TrailBase를 프레임워크로 사용하면서 원본 작업에 라이선스 요구 사항을 부과하지 않음

   PocketBase - SaaS/앱을 위한 오픈소스 리얼타임 백엔드
   Supabase 공개 베타 시작 - 오픈소스 Firebase 대체제

        Hacker News 의견

     * Pocketbase의 보안에 대한 GG의 세심한 주의가 인상적임
          + 시작 문서에서 SQL로 직접 문자열 보간이 안전한지 의문이 있음
          + 함수가 매개변수를 받지만 사용하지 않는 것 같음
     * Trailbase 문서가 Pocketbase와 Supabase와의 차이점만 설명하여 이해하기 어려움
          + Pocketbase 문서는 빠르게 핵심을 전달함
     * ""Application server""라는 용어가 포괄적이며 문서가 이를 명확히 설명하지 않음
          + 캐시가 필요 없을 정도로 빠르다고 하지만 SQLite만 지원하여 단순한 애플리케이션에 적합해 보임
     * 프로젝트가 Redbean과 비슷하지만 더 많은 언어를 지원하고 보편적인 실행 파일은 없는 것 같음
     * 비교 기사들이 영감을 받은 프로젝트에 대해 매우 긍정적으로 설명함
     * ""Application server""의 목적을 문서가 제대로 설명하지 않음
     * 예제가 단일 파일로 구성되어 있지만 서버 자체는 단일 파일이 아님
     * TomCat과 같은 JVM 프로그램용 애플리케이션 서버와의 차이점이 명확하지 않음
          + 어떤 애플리케이션을 지원하는지, 특정 런타임을 사용하는지 궁금함
     * 프로젝트가 훌륭해 보이지만 대상 청중이 누구인지 궁금함
          + 수백만 명의 사용자를 지원하는 솔로 개발자에게 적합한지 의문임
     * Rust로 개발된 Pocketbase의 데모가 좋은 인상을 줌
          + 시간이 되면 프로젝트를 시도해보고 싶음
"
"https://news.hada.io/topic?id=18214","미 연방통신위원회(FCC), 6GHz 대역 전체를 저전력 기기 운영에 오픈하기로 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            미 연방통신위원회(FCC), 6GHz 대역 전체를 저전력 기기 운영에 오픈하기로 결정

     * 2024년 12월 11일, 미 연방통신위원회(FCC)는 6 GHz 대역의 1,200 메가헤르츠 전체를 매우 낮은 전력 장치 운영에 개방하는 새로운 규칙을 채택
     * 이 규칙은 웨어러블 기술, 증강 및 가상 현실과 같은 최첨단 응용 프로그램의 생태계를 강화할 것으로 예상
          + 학습 기회 향상, 의료 결과 개선, 새로운 엔터테인먼트 경험 제공에 기여할 것
     * 6 GHz 대역의 확장
          + FCC는 최근 몇 년간 5.925에서 7.125 GHz 사이의 비면허 사용을 확장하여 Wi-Fi 6E 도입을 지원하고 Wi-Fi 7의 기반을 마련함
          + 사물인터넷(IoT)의 성장을 지원함
     * 매우 낮은 전력(VLP, very low power) 장치의 운영 허용
          + VLP 장치는 U-NII-6 (6.425-6.525 GHz) 및 U-NII-8 (6.875-7.125 GHz) 대역에서 350 메가헤르츠의 스펙트럼을 사용할 수 있음
          + 기존의 면허 서비스 보호를 유지하면서 동일한 전력 수준과 기술적/운영적 보호를 제공함
          + VLP 장치는 자동 주파수 조정 시스템의 제어 없이 어디서든 운영 가능함
     * 간섭 위험 최소화
          + 간섭 위험을 최소화하기 위해 VLP 장치는 경쟁 기반 프로토콜을 사용하고 송신 전력 제어를 구현해야 함
          + 고정된 야외 인프라의 일부로 운영하는 것은 금지됨
     * VLP 장치의 이점
          + VLP 장치는 짧은 거리에서 매우 낮은 전력으로 작동하며 매우 높은 연결 속도를 제공함
          + 고데이터 전송률의 최첨단 응용 프로그램에 이상적임
          + 소비자 경험을 풍부하게 하고 국가 경제를 강화할 것임
     * 혁신 촉진
          + FCC의 6 GHz 대역에서의 조치는 증강 현실, 가상 현실, 차량 내 연결성, 웨어러블 장치, 의료 모니터링, 단거리 모바일 핫스팟, 고정밀 위치 및 내비게이션, 자동화 등 신기술과 응용 프로그램에 더 많은 용량을 제공하여 혁신을 촉진할 것임
     * 위원회의 승인
          + 2024년 12월 11일 제3차 보고서 및 명령(FCC 24-125)에 따른 위원회의 조치
          + Rosenworcel 의장, Carr, Starks, Simington, Gomez 위원이 승인함
          + Rosenworcel 의장과 Starks 위원이 별도의 성명을 발표함

        Hacker News 의견

     * 호주가 Wi-Fi 6E 기기를 하위 6 GHz 대역에서 사용할 수 있도록 허용한 것에 대한 긍정적인 반응이 있음
          + ACMA가 하위 6 GHz 대역에서 저전력 실내 및 매우 저전력 기기를 허용함
          + 상위 6 GHz 대역은 아직 평가 중이며, 2024년 6월에 공공 의견을 수렴함
     * 미국의 주파수 할당 차트에 대한 링크가 제공됨
     * 900MHz 대역의 변경 제안에 대한 주의 분산 가능성에 대한 의문이 제기됨
          + UWB(초광대역)와 관련된 주요 사용 사례가 될 가능성이 있음
     * 뉴스 릴리스에서 '매우 저전력'의 정의가 명확하지 않음
          + FCC 문서에서 정의를 찾을 수 있음
     * VLP 기기의 사용 사례로 착용형 장치가 주를 이룰 것으로 예상됨
          + 스마트폰, 안경, 시계, 이어폰 등과 같은 휴대용 사용 사례를 지원할 것으로 기대됨
          + 차량 내 애플리케이션도 포함됨
     * 혁신가들이 핸드오프 기반의 메시 네트워크를 개발할 가능성에 대한 기대가 있음
          + TV 대역의 화이트 스페이스가 비면허화되었을 때의 사례를 언급함
          + 전용 하드웨어의 필요 여부가 장벽이 될 수 있음
     * EIRP 제한이 보수적이며 위상 배열의 유용성을 제한한다고 느끼는 의견이 있음
          + 위상 배열이 단일 안테나보다 더 나은 범위를 제공할 수 있음
          + EIRP 제한의 이유에 대한 질문이 제기됨
     * 새로운 기술이 이전에 불가능했던 것을 가능하게 할 수 있는지에 대한 질문이 있음
     * Wi-Fi 6E의 채널 수가 증가하는지 여부에 대한 질문이 있음
     * 높은 주파수에서 신호의 취약성에 대한 우려가 제기됨
          + 신호가 쉽게 차단되거나 굴절될 수 있음
"
"https://news.hada.io/topic?id=18207","2024년 사이드 프로젝트로 월 $500를 버는 사람들 – Show and Tell","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2024년 사이드 프로젝트로 월 $500를 버는 사람들 – Show and Tell

     * 매년 이맘때가 되면 새로운 아이디어와 기존 아이디어에 대해 듣고 싶음
     * 이전에 논의된 연도별 링크 제공
          + 2023년: 링크
          + 2022년: 링크
          + 2021년: 링크
          + 2020년: 링크
          + 2019년: 링크
          + 2018년: 링크
          + 2017년: 링크

   좋은 자료 공유 감사합니다.

   긱뉴스에도 몇번 정리해서 올렸는데 아래 GN+가 댓글도 잘 요약해줬네요.

   몇번 얘기했지만, 저는 이 정도의 수익이 나는 사이드 프로젝트를 개발자가 여러개 가질수 있었으면 합니다.
   그런게 모이다 보면 자신의 라이프스타일 비즈니스가 될수 있겠죠.

   월 $500 이상 버는 사이드 프로젝트가 있나요? 2024
   월 $500 이상 버는 사이드 프로젝트가 있나요? 2023
   월 $500 이상 버는 사이드 프로젝트가 있나요? 2022

   위클리 작성하면서 좀 더 정리해서 올려봅니다.
     * 웹에서 인터랙티브하게 음악 이론을 배우는 사이트
     * 웹용 Klondike Solitaire를 PWA로 만들어 광고로만 월 $500 버는중
     * 3D 프린팅을 이용한 주얼리를 Etsy에서 판매. STL로 디자인해서 캐스팅하우에 보내면 Wax로 출력한 뒤에 캐스팅하고 제작
     * 내가 있는 곳 근처의 역사적 지도를 보여주는 Pastmaps로 월 $5000 넘게 버는 중(미국)
     * ExploreHere 로 특정 위치를 지날때 역사적인 정보에 대한 것을 푸시로 보내주는 서비스 운영중. 월 $1000
     * The Greatest Books of All Time 사이트로 월 $2000
     * 사용자들이 최고의 사진을 선택할수 있게 도와주는 RankPic 으로 월 $500
     * 모든 USB 게이밍 콘솔에 대한 블루투스 어댑터인 BlueRetro 를 만들어서 월 $1000

        Hacker News 의견

     * 8년 전 겨울 방학 동안 인터랙티브 음악 이론 강좌를 만들어 매달 임대료를 지불할 수 있을 만큼 수익을 얻고 있음
          + Tone.js를 사용하여 피아노, 기타 등 인터랙티브 데모를 포함하고 있음
          + 마케팅 없이도 꾸준한 트래픽을 유지하고 있으며, Stripe와 PayPal을 통해 결제 지원
          + PayPal 추가 후 매출이 두 배로 증가했음
     * Etsy와 Shopify에서 맞춤형 주얼리를 판매하고 있음
          + 3D 프린팅 기술을 활용하여 고객의 맞춤 요청을 반영한 주얼리 제작
          + 새로운 기술을 실험하며 재미를 느끼고 있으며, 가족을 도와줄 수 있을 만큼의 수익을 얻고 있음
     * The Greatest Books 웹사이트를 2008년에 만들었으며, 매달 약 $2,000의 수익을 올리고 있음
          + Rails와 Postgresql로 구축되었으며, Linode 서버에서 호스팅 중
          + 매일 약 25만 페이지 방문을 기록하고 있음
     * ExploreHere 앱을 개발하여 여행 중 역사적 장소를 알림으로 제공하고 있음
          + 무료 및 유료 구독 모델을 사용하며, 매달 약 $1,000의 수익을 올리고 있음
          + 여행 중 흥미로운 정보를 제공하는 가이드로 발전시키고 있음
     * Sink It for Reddit 확장 프로그램을 개발하여 Reddit 사용성을 개선하고 있음
          + 주로 Apple 플랫폼에서 30만 명의 사용자가 있으며, 매달 네 자릿수 수익을 올리고 있음
          + 인수 제안을 받았으나 악성 소프트웨어로 변질될까 우려하여 거절했음
     * FreeSolitaire.win은 Klondike Solitaire PWA로, 매달 약 $500의 광고 수익을 올리고 있음
          + 가벼운 구조로 유지하며, 남아프리카 공화국에서 인기를 얻고 있음
     * BlueRetro는 거의 모든 구형 게임 콘솔을 위한 범용 Bluetooth 컨트롤러 어댑터임
          + 오픈 소스 펌웨어로 제품 제조업체들이 자발적으로 기여하고 있음
          + 직접 제조한 어댑터를 판매하며 수익을 올리고 있음
     * RankPic 앱은 사용자들이 최고의 사진을 선택할 수 있도록 도와주는 앱임
          + 최근 수익화하여 매달 $500 이상을 벌고 있으며, 커뮤니티가 성장하고 있음
     * PastMaps는 옛날 지도를 탐험할 수 있는 플랫폼으로, 매달 약 $5,000의 수익을 올리고 있음
          + 미국 전역의 고해상도 지도를 제공하며, 입소문을 통해 성장하고 있음
     * Check Supply는 친구와 함께 개발한 iOS 앱으로, 체크 발송을 간편하게 해주는 서비스임
          + Plaid를 사용하여 계정을 연결하고 체크 발송을 추적할 수 있음
"
"https://news.hada.io/topic?id=18158","Ollama를 활용한 구조화된 출력","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Ollama를 활용한 구조화된 출력

구조화된 출력

  2024년 12월 6일

   Ollama는 이제 JSON 스키마로 정의된 특정 형식에 모델의 출력을 제한할 수 있는 구조화된 출력을 지원함. Ollama Python 및 JavaScript 라이브러리가 구조화된 출력을 지원하도록 업데이트됨.
     * 구조화된 출력의 사용 사례:
          + 문서에서 데이터 파싱
          + 이미지에서 데이터 추출
          + 모든 언어 모델 응답 구조화
          + JSON 모드보다 더 높은 신뢰성과 일관성 제공

    시작하기

     * Ollama 최신 버전 다운로드
     * Ollama Python 또는 JavaScript 라이브러리 최신 버전으로 업그레이드

      cURL

     * format 매개변수를 사용하여 모델에 구조화된 출력을 전달할 수 있음

        출력

     * 요청의 JSON 스키마로 정의된 형식으로 응답이 반환됨

      Python

     * Ollama Python 라이브러리를 사용하여 JSON 객체로 스키마를 format 매개변수에 전달
     * Pydantic을 사용하여 스키마를 직렬화하는 것이 권장됨

        출력

     * name='Canada' capital='Ottawa' languages=['English', 'French']

      JavaScript

     * Ollama JavaScript 라이브러리를 사용하여 JSON 객체로 스키마를 format 매개변수에 전달
     * Zod를 사용하여 스키마를 직렬화하는 것이 권장됨

        출력

     * { name: ""Canada"", capital: ""Ottawa"", languages: [ ""English"", ""French"" ] }

  예시

    데이터 추출

     * 텍스트에서 구조화된 데이터를 추출하기 위해 정보를 나타내는 스키마를 정의
     * 모델이 정보를 추출하고 정의된 스키마로 데이터를 JSON으로 반환

      예시 출력

     * pets=[ Pet(name='Luna', animal='cat', age=5, color='grey', favorite_toy='yarn'), Pet(name='Loki', animal='cat', age=2, color='black', favorite_toy='tennis balls') ]

    이미지 설명

     * 구조화된 출력은 비전 모델과 함께 사용할 수 있음
     * llama3.2-vision을 사용하여 이미지를 설명하고 구조화된 출력을 반환

      예시 출력

     * summary='A palm tree on a sandy beach with blue water and sky.'
     * objects=[ Object(name='tree', confidence=0.9, attributes='palm tree'), Object(name='beach', confidence=1.0, attributes='sand') ]
     * scene='beach', colors=['blue', 'green', 'white'], time_of_day='Afternoon', setting='Outdoor', text_content=None

      OpenAI 호환성

     * OpenAI 클라이언트를 사용하여 구조화된 출력과 호환 가능

  팁

     * 구조화된 출력을 신뢰성 있게 사용하려면:
          + Pydantic(Python) 또는 Zod(JavaScript)를 사용하여 응답 스키마 정의
          + 모델이 요청을 이해하도록 프롬프트에 ""JSON으로 반환"" 추가
          + 더 결정론적인 출력을 위해 온도를 0으로 설정

  다음 단계

     * 제어된 생성을 위한 로짓 노출
     * 구조화된 출력의 성능 및 정확도 개선
     * 샘플링을 위한 GPU 가속
     * JSON 스키마를 넘어선 추가 형식 지원

        Hacker News 의견

     * llama.cpp의 gbnf 기능을 통해 더 강력한 출력 제약을 설정할 수 있음
          + 링크: GitHub - llama.cpp grammars
     * 정규 프롬프트를 구조화하여 csv 데이터로 변환할 때 불필요한 텍스트를 제거할 수 있어 유용함
     * gemma2:2b를 사용하여 텍스트를 입력하면 구조화된 JSON 형식의 출력물을 얻을 수 있음
          + 예시 입력: ""You have spent 190 at Fresh Mart. Current balance: 5098""
          + 예시 출력: {""amount"": 190, ""balance"": 5098, ""category"": ""Shopping"", ""place"": ""Fresh Mart""}
     * LLM의 출력 품질에 제약이 어떻게 영향을 미치는지 궁금해하는 의견이 있음
          + 경우에 따라 Markdown이나 일반 텍스트로 파싱하는 것이 더 나은 품질을 제공할 수 있음
     * 지원되는 모델과 함께 사용할 수 있는지에 대한 질문이 있음
          + 개인 하드웨어에서 1b-3b 모델만 안정적으로 실행할 수 있음
     * llama.cpp와 ollama가 llama의 구조화된 출력 기능을 활용하는지, 아니면 다른 방식으로 구현된 것인지에 대한 궁금증이 있음
          + Meta의 Llama 페이지에서 모델이 구조화된 출력을 본래 지원한다고 언급됨
     * outlines와 비교하여 어떤 부가가치가 있는지에 대한 질문이 있음
          + 링크: Taming LLMs - Structured Output
     * oobabooga를 계속 사용하는 이유는 exlv2 지원으로 듀얼 3090s에서 더 효율적인 추론을 제공하기 때문임
     * curl 예제가 먼저 나오는 것이 좋음
          + Pydantic을 좋아하지만, 스키마를 직접 코딩하는 것이 프로토타입을 Go로 옮기기 더 쉬움
     * LLM에 구조화된 입력을 제공하는 최적의 방법에 대한 질문이 있음
          + 예: 100개의 문장을 입력하여 각각을 다른 방식으로 분류하는 것
          + 구조화된 데이터를 얻는 것은 쉽지만, 줄 번호를 접두사로 사용하는 방식이 어색함
"
"https://news.hada.io/topic?id=18136","도쿄, 공무원 대상 주 4일 근무제 도입 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       도쿄, 공무원 대상 주 4일 근무제 도입 예정

     * 도쿄는 정부 공무원들을 대상으로 4일 근무제를 도입할 예정
     * 이 제도는 4월부터 시작되며, 직원들에게 매주 3일의 휴일을 제공할 수 있음
     * 초등학교 1~3학년 자녀를 둔 부모는 급여 일부를 포기하고 조기 퇴근 옵션을 선택할 수 있는 정책도 발표
     * 정책의 배경과 목표
          + 도쿄의 새로운 정책은 출산율을 높이고 일하는 엄마들을 지원하기 위한 것임
          + 일본의 출산율은 지속적으로 하락하고 있으며, 2023년에는 1.2로 최저치를 기록함
          + 인구가 안정되기 위해서는 출산율이 2.1이어야 함
     * 일본의 인구 문제와 근무 문화
          + 일본 정부는 인구 위기를 해결하기 위해 다양한 정책을 추진 중임
          + 엄격한 근무 문화와 생활비 상승이 출산율 하락의 주요 원인으로 지목됨
          + 장시간 근무는 건강 문제를 초래하며, 극단적인 경우 '과로사'로 이어질 수 있음
     * 여성과 노동 참여
          + 여성들은 경력과 가정 사이에서 선택을 강요받는 경우가 많음
          + 일본의 노동 참여 성별 격차는 다른 고소득 국가들보다 높음
     * 4일 근무제의 국제적 관심
          + 서구에서는 4일 근무제가 근무 환경 개선을 위한 방법으로 주목받고 있음
          + 일부 연구에 따르면, 이는 근로자의 복지와 생산성을 향상시킴
          + 그러나 일본 기업에서는 여전히 급진적인 아이디어로 여겨짐
     * 아시아의 가족 친화 정책
          + 도쿄 외에도 싱가포르 등 아시아 국가들이 가족 친화적인 정책을 도입하고 있음
          + 싱가포르는 유연 근무 요청을 고려하도록 모든 기업에 새로운 지침을 도입함

   한국인 이런 이야기를 하는것조차 사치인 상황이네요.

   저도 옵션이 있다면 급여 일부를 포기하고 가족과 시간을 보내고싶네요.

        Hacker News 의견

     * 많은 부부가 가족과의 시간을 더 가지기 위해 금전적 손실을 감수하고도 이 제안을 받아들일 것 같음. 금요일에 집안일을 마치고 주말을 스트레스 없이 즐길 수 있는 것은 큰 장점임
     * 출산율 감소에 대한 우려가 오래 지속되었지만, 삶의 질을 개선하면 출산율이 증가할 수 있다는 아이디어는 처음 봄
     * 이 정책은 도쿄 지방 정부의 정책이며, 국가 정책은 아님
     * 일본의 근무 문화가 나쁘다는 평판이 있지만, 많은 변화가 있었음. 많은 회사들이 유연 근무제를 도입하고 있으며, 원격 근무도 유지되고 있음
          + 성장의 한계가 있다는 공감대가 형성되었고, 더 나은 근무 조건이 협상 가능해짐
          + 새로운 회사들은 더 나은 조건을 제공하고 있으며, 기존 회사들도 이에 맞춰 변화하고 있음
          + 정부의 이니셔티브도 이러한 추세를 따르고 있음
          + 학교들도 변화하지 않으면 외면받는 상황에 직면하고 있음
     * 근무 시간이 변경되는지 여부를 명시했으면 좋겠음. 32시간, 주 4일 근무가 더 나아 보임. 하지만 40시간을 10시간씩 나누는 것은 큰 차이가 없음
     * 전반적으로 좋은 움직임이라고 생각하며 지지함. 하지만 출산율 감소는 가치관과도 관련이 있다고 생각함
     * 일본은 2120년에 5천만 명의 인구를 유지할 것으로 예상됨. 이는 인구 위기라고 볼 수 없으며, 자연 복원이 이루어진다면 쾌적할 수 있음
     * 정부 업무와 민간 산업 업무가 다를 수 있지만, 내 회사에서는 주 6일 근무했으며 토요일은 ""반나절""로 8시간 근무했음. 토요일은 공식적인 근무일이 아니어서 캐주얼 복장이 허용되었고, 에어컨도 자주 꺼져 있었음
     * 출산율에 초점을 맞추고 있지만, 더 중요한 것은 일자리를 창출하는 것임. 노동력의 가용성을 줄이면 더 많은 일자리가 생기고 경제가 활성화됨
     * 일본은 도쿄 중심의 구조를 탈피해야 함. 도시 밀집도가 출산율 감소의 주요 원인 중 하나이며, 도쿄는 전 세계적으로 도시 집중화의 최악의 사례임

   도쿄도 밀집도가 심한데 서울은 오죽할까요
"
"https://news.hada.io/topic?id=18148","연방 항소 법원, TikTok 매각 법안 지지 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      연방 항소 법원, TikTok 매각 법안 지지 결정

     * 미국 법원, ByteDance에 TikTok 매각 명령 유지
          + 미국 연방 항소 법원은 중국 기반의 ByteDance가 인기 소셜 미디어 앱 TikTok을 매각하지 않으면 미국 내에서 금지될 것이라는 법을 유지함.
          + 워싱턴 D.C.의 미국 항소 법원은 TikTok의 금지가 헌법에 위배되며 1억 7천만 명의 미국 사용자의 첫 번째 수정헌법 권리를 침해한다는 주장을 기각함.
          + 공화당과 민주당 의원들은 TikTok이 중국 정부와의 연관성으로 인해 국가 안보 문제를 야기할 수 있다고 주장하며 앱 금지를 지지함.
     * TikTok의 대응 및 법적 논쟁
          + TikTok은 항소 법원의 결정을 뒤집기 위해 미국 대법원에 요청할 것이라고 밝힘.
          + ByteDance가 1월 19일까지 TikTok을 매각하지 않으면, 앱 스토어 기업과 인터넷 호스팅 제공업체가 TikTok 지원을 중단해야 함.
          + 법무부 장관 Merrick Garland는 이번 결정이 중국 정부가 TikTok을 통해 민감한 정보를 수집하거나 콘텐츠를 조작하는 것을 막는 중요한 단계라고 언급함.
     * 법적 및 정치적 배경
          + 조 바이든 대통령은 4월에 이 법을 서명했으며, 이는 중국 공산당과의 연관성에 대한 우려로 인해 제정됨.
          + 법원은 이 법이 국가 안보를 보호하기 위해 좁게 설계되었다고 판단함.
          + TikTok은 대법원이 미국인의 표현의 자유를 보호할 것이라고 기대함.
     * 반대 의견 및 추가 논의
          + 미국 시민 자유 연합의 Patrick Toomey는 이번 판결이 정부가 온라인에서 미국인의 발언을 침묵시킬 수 있는 위험한 선례를 남긴다고 비판함.
          + TikTok 금지는 1월 19일에 1억 7천만 명 이상의 미국인과 전 세계 사용자의 목소리를 침묵시킬 것이라고 주장함.
     * 정치적 영향 및 미래 전망
          + 도널드 트럼프 대통령 당선인은 TikTok 금지를 시행할지 여부를 밝히지 않았음.
          + 트럼프는 이전 행정부에서 TikTok 금지를 시도했으나, 최근에는 입장을 바꾸었음.
          + TikTok의 미래는 정치적 및 법적 요인에 의해 영향을 받을 가능성이 있음.

        Hacker News 의견

     * 법원이 비공개 기록이 아닌 부분에 근거하여 결정을 내렸음. TikTok이 중국 정부의 지시에 따라 콘텐츠를 조작한 적이 없다고 명확히 부인하지 않았다는 점이 흥미로움
          + 법은 엄격한 심사를 충족할 수 있으며, 이는 정부가 제한이 중요한 이익을 증진하고 덜 제한적인 대안이 정부의 목표를 달성하지 못할 것임을 증명해야 함을 의미함
          + 대법원이 이 사건을 듣고 싶어하지 않을 것 같음. 법이 엄격한 심사 또는 중간 심사를 받아야 하는지 여부가 가장 흥미로운 법적 질문이었으나, D.C. Circuit가 법이 어느 기준을 충족할 수 있다고 말했기 때문에 이제는 중요하지 않음
     * 중국 소유의 TikTok의 가상 위험은 중국이 미국 통신 네트워크를 해킹하고 여전히 접근할 수 있는 것보다 작은 우려로 보임
     * TikTok에 대한 논의는 항상 프라이버시 문제에 집중되며 이는 농담처럼 보임
          + 진짜 문제는 중국이 서구 국가들의 인구에 영향을 미칠 수 있는 알고리즘적 통제임
          + Meta가 콘텐츠 관리를 캐나다 회사에 아웃소싱하고, 이 회사가 Instagram 콘텐츠 관리를 이란에 아웃소싱한 것으로 밝혀짐
          + 이는 프라이버시 문제가 아님. 이러한 플랫폼들은 새로운 미디어가 되었음. 이익을 추구하는 미국과 중국 회사로부터 뉴스를 얻는 것은 장기적으로 이상적이지 않음
     * 법원은 법이 엄격한 심사를 요구하고 이를 충족한다고 생각함
          + 엄격한 심사는 두 가지 테스트가 있음: 중요한 정부 이익, 좁게 맞춤화된 방법(가장 덜 제한적인 수단)
          + 법원은 외국 행위자들이 수정헌법 제1조의 권리를 갖지 않는다고 말하지 않음
     * TikTok을 처음으로 금지한 나라는 중국임. (중국에서는 접근할 수 없음)
     * TikTok이 서구에서 금지되거나 금지 위협을 받는 것은 시간 문제라고 생각함
          + 국가들은 이를 허위 정보 위험으로 인해 심각한 국가 위협으로 보기 시작함
          + 루마니아 선거를 보면, 몇 시간 전에 첫 번째 선거 라운드를 무효화했으며, 이는 러시아의 캠페인이 TikTok과 같은 플랫폼을 사용하여 유권자들에게 영향을 미친 결과임
          + Facebook, Snap 등과 같은 플랫폼이 더 나은 것은 아니지만, 이는 어느 정도의 통제를 갖는 문제임
     * 서구에서는 아직 엄격한 인터넷 통제에 익숙하지 않음. 중국과 러시아에서는 인구가 익숙함. 누구나 VPN을 사용하여 서구 인터넷을 사용함
          + 중국은 미국이 하려는 것과 같은 이유로 서구 소셜 미디어를 금지했으며, 단지 더 일찍 준비가 되었을 뿐임
     * 이는 항소 법원에서의 결정일 뿐임. TikTok은 대법원으로 가져갈 것이며, 대법원은 다른 결론에 도달할 수 있음
     * 이 금지는 항상 우스꽝스럽게 느껴짐. 프라이버시와 데이터 수집이 우려라면, 수백만 개의 앱이 그렇게 하지 않음? 반중국 정서라면, 왜 TikTok이고 다른 수백만 가지가 아닌가? 선거와 선전 보호라면, 왜 X와 Meta와 YouTube는 아닌가?
          + 왜 TikTok만 타겟으로 하는지 이상하게 느껴짐
"
"https://news.hada.io/topic?id=18179","Google의 AI 날씨 예측 모델 GenCast는 꽤 훌륭함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Google의 AI 날씨 예측 모델 GenCast는 꽤 훌륭함

     * Google DeepMind의 GenCast는 전통적인 날씨 예측 시스템과 비교할 만한 정확성을 가짐
     * 최근 연구에 따르면, GenCast는 2019년 데이터를 기반으로 테스트했을 때 세계 최고 수준의 예측 모델 ENS를 97.2%의 확률로 능가함

GenCast의 주요 특징

     * AI 기반 기계 학습 모델로, 1979년부터 2018년까지의 날씨 데이터를 학습하여 패턴을 인식하고 미래를 예측함
     * 전통적인 모델(ENS)은 물리학 기반의 복잡한 방정식을 계산하는 반면, GenCast는 기계 학습을 활용해 더 효율적으로 예측 수행
     * 엔셈블 예측 방식을 사용하여 다양한 시나리오를 제시:
          + 예: 열대성 저기압 경로 예측에서 평균 12시간 더 빠른 경고 제공
          + 태풍, 극단적 날씨, 풍력 생산량 등을 최대 15일 전까지 예측 가능

주요 성능 및 효율성

     * 시간과 자원 절약:
          + GenCast는 Google Cloud TPU v5를 이용해 15일 예보를 8분 만에 생성
          + 전통적인 모델 ENS는 동일한 예보를 생성하는 데 몇 시간이 소요됨
          + 물리학 방정식을 우회하여 계산 비용 절감
     * 해상도 차이:
          + GenCast는 0.25도 해상도(위도 및 경도)로 작동
          + ENS는 2019년 당시 0.2도 해상도로 작동했으며, 현재는 0.1도 해상도로 개선됨
          + 해상도 차이에도 불구하고 GenCast는 뛰어난 성과를 보임

AI와 전통적 모델의 공존

     * GenCast는 12시간 간격으로 예측을 제공하며, 이는 더 짧은 간격으로 데이터를 제공하는 전통 모델과의 차별점
     * DeepMind는 GenCast를 전통적 모델과 함께 사용하여 신뢰와 자신감을 구축하는 데 중점을 둠
     * GenCast는 기상학 연구 및 예보 실무자들에게 새로운 도구로서 실질적인 영향을 미칠 가능성이 있음

AI 모델의 잠재적 한계

     * 현재 ENS와 GenCast의 성능 비교는 GenCast가 2019년 ENS 데이터를 기반으로 테스트되었기 때문에 완벽한 비교는 어려움
     * 높은 해상도로 확장하거나 더 짧은 예측 간격을 제공하는 등의 추가 개선 필요
     * 기상학 커뮤니티는 여전히 AI 기반 모델이 물리학 기반 모델만큼 신뢰할 수 있는지 고민 중

오픈소스 및 미래 전망

     * DeepMind는 GenCast의 오픈소스 코드를 공개하여 더 많은 연구와 실무자들이 접근할 수 있도록 함
     * AI 모델은 전통적 모델을 대체하기보다는 보완하여 더 정확하고 신속한 날씨 예측을 가능하게 할 전망
     * AI 날씨 예측 모델은 더 나은 사회적 영향을 목표로 기상 데이터 활용 방식을 혁신할 가능성을 제시함
"
"https://news.hada.io/topic?id=18171","JSON5 - 인간을 위한인간을 위한 JSON

     * JSON5는 JSON 파일 형식을 확장하여 사람이 직접 작성하고 유지보수하기 쉽게 만든 형식
          + 기계 간 통신을 위한 용도로는 사용되지 않음
          + 2012년에 시작되어 2022년 기준으로 주당 6500만 회 이상 다운로드되며, npm에서 가장 많이 의존하는 패키지 상위 0.1%에 속함
          + Chromium, Next.js, Babel, Retool, WebStorm 등 주요 프로젝트에서 채택됨
          + MacOS와 iOS 같은 Apple 플랫폼에서 기본적으로 지원됨.
     * JSON5의 특징
          + JSON의 상위 집합으로, ECMAScript 5.1의 일부 구문을 포함함.
          + JSON5 파일은 항상 유효한 ES5 파일임.
     * 확장된 ECMAScript 5.1 기능
          + 객체
               o 객체 키는 ECMAScript 5.1 IdentifierName이 될 수 있음.
               o 객체에 단일 후행 쉼표를 허용함.
          + 배열
               o 배열에 단일 후행 쉼표를 허용함.
          + 문자열
               o 문자열은 단일 인용부호로 감쌀 수 있음.
               o 줄바꿈 문자를 이스케이프하여 여러 줄에 걸쳐 있을 수 있음.
               o 문자 이스케이프를 포함할 수 있음.
          + 숫자
               o 16진수로 표현 가능함.
               o 선행 또는 후행 소수점을 가질 수 있음.
               o IEEE 754 양의 무한대, 음의 무한대, NaN을 포함할 수 있음.
               o 명시적 플러스 기호로 시작할 수 있음.
          + 주석
               o 단일 및 다중 라인 주석을 허용함.
          + 공백
               o 추가적인 공백 문자를 허용함.
     * API
          + JSON5.parse(): JSON5 문자열을 파싱하여 JavaScript 값이나 객체를 생성함.
          + JSON5.stringify(): JavaScript 값을 JSON5 문자열로 변환함.
     * CLI
          + JSON5를 JSON으로 변환하거나 JSON5 문서의 구문을 검증하는 CLI 제공.
     * ECMAScript 호환성
          + JSON5는 ES5와 완전히 호환되도록 설계되었으나, U+2028 및 U+2029 문자는 ES5에서 허용되지 않음.
          + ES2019에서 이 문자가 허용되어 JSON 및 JSON5가 ES2019와 완전히 호환됨.
     * 라이선스
          + MIT 라이선스 하에 제공됨.

   JSON5를 만들면서 배운 것 : 혐오자들을 무시하세요

        Hacker News 의견

     * JSON은 이중 인용부호 문자열만 지원하여 인용부호 사용에 대한 논쟁을 제거하는 특징이 있음. JSONC를 사용하여 주석과 후행 쉼표를 추가할 수 있음
          + JSONC는 Visual Studio Code에서 설정 형식으로 사용됨
     * JSON5의 명칭이 비윤리적이라고 생각함. 원작자의 승인이 없는 경우 다음 버전인 것처럼 암시하는 것은 부적절함
     * JSON5를 선호하며, YAML의 가독성이 떨어진다고 생각함. YAML 파일을 이해하기 위해 JSON 변환 도구를 자주 사용함
     * JSON이 간단하기 때문에 널리 사용됨. XML이나 YML 같은 복잡한 대체물은 적합하지 않다고 생각함
          + 복잡한 형식을 사용하면 문제가 발생할 수 있음
     * EDN이 Clojure 생태계 외부에서 많이 채택되지 않은 점이 아쉬움
          + 표준이 없지만 사용자들은 문제없이 사용 중임
     * JSON의 특수 문자 문제를 지적함. JSON은 UTF-8로 정의되어 있지만, 7비트 ASCII 제어 문자를 잘못 기재한 오류가 있음
          + RFC에서 33개의 제어 문자를 포함해야 함
     * TOML을 추천하며, 인간 가독성과 도구 지원의 완벽한 조합이라고 생각함
     * JSON/YAML 대안에서 더 많은 유형을 지원하는 것은 좋은 생각이 아니라고 봄
          + NestedText가 거의 이상적이지만, 여러 구문을 사용하고 주석을 데이터 모델에 포함하지 않음
     * JSON5가 BMP 외부의 유니코드 문자를 위한 \U 이스케이프 시퀀스를 도입하지 않은 점을 지적함
          + UTF-16 대리쌍을 사용해야 하는 것은 번거롭고 유니코드 표준에 맞지 않음
     * JSON에서 주석과 네이티브 datetime 유형을 제외한 다른 기능은 필요하지 않다고 생각함
          + 후행 쉼표는 유용하다고 봄
"
"https://news.hada.io/topic?id=18233","Bazel 8.0 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Bazel 8.0 릴리즈

     * Bazel 8.0은 주요 LTS 릴리스로, 새로운 기능과 이전 버전과 호환되지 않는 변경 사항을 포함
     * 주요 변경 사항
          + Starlarkification: 규칙 분리. Bazel에 기본적으로 포함되었던 여러 규칙들이 별도의 저장소로 이동됨
               o Android, C++, Java, Protobuf, Python, Shell 등이 포함
          + WORKSPACE 비활성화
               o Bzlmod는 외부 의존성을 관리하는 새로운 방식으로, Bazel 7.0부터 기본 활성화됨
               o 이제 Bazel은 기본적으로 WORKSPACE 및 WORKSPACE.bzlmod 파일을 읽지 않음
                    # --enable_workspace 플래그로 이전 동작 복구 가능
                    # Bazel 9에서 WORKSPACE는 완전히 제거될 예정
          + 심볼릭 매크로(Symbolic Macros) : 새로운 방식으로 빌드 매크로를 작성하도록 지원
     * 마이그레이션 가이드
          + 외부 의존성을 Bzlmod로 전환하는 도구와 가이드를 확인
          + WORKSPACE 비활성화와 Bazel 9 준비에 대비 필요

   Bazel: 언제 사용해야 할까? (2023)
"
"https://news.hada.io/topic?id=18259","기초 연구 예산 삭감 속, 뉴질랜드 사회과학 지원 전면 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   기초 연구 예산 삭감 속, 뉴질랜드 사회과학 지원 전면 중단

        Hacker News 의견

     * 경제 연구는 예산 삭감에서 제외될 가능성이 높다고 추측함. 사회 과학 연구는 여전히 중요하다고 생각함.
          + 최근 몇 년간 사회 과학의 일부 분야는 과학적 방법과 맞지 않는 질적 방법론으로 전환되었음.
          + 사회 과학에 대한 자금 지원을 중단하는 것은 실수라고 생각하지만, 일반화 가능한 결과를 얻을 수 있는 방법에 중점을 두는 것이 필요하다고 봄.
          + 이념적 또는 정치적 과정의 일환으로 이러한 변화가 일어나는 것은 아쉬움.
     * 스페인에서 철학이 고등학교 교육과정에서 제외된 것과 유사하다고 느끼며, 이는 잘못된 결정이라고 생각함.
          + 철학이 배제되면서 역사, 문학, STEM 과목들이 기반을 잃었다고 봄.
          + 소셜 네트워크와 같은 현대 사회의 중요한 주제에 대한 연구도 중단되지 않아야 한다고 주장함.
     * 사회 과학과 인문학 졸업생이 실제 고용주나 학계의 수요보다 많다고 생각함.
          + 특정 과학 분야에 대한 모든 지원을 중단하는 것은 과잉 반응이라고 봄.
          + 졸업생 수를 줄이고 실질적인 이익을 가져올 수 있는 연구에 집중하는 것이 더 나을 수 있다고 제안함.
          + 빈곤, 실업, 범죄를 연구하는 사회 과학자는 정책 입안자에게 유용한 정보를 제공할 수 있음.
     * 경영 컨설팅 회사들이 새로운 유행을 만들기 위해 아이디어를 어디서 가져올지에 대한 우려를 표명함.
          + Maslow의 욕구 단계 이론이 자주 사용되었음을 언급함.
     * 뉴질랜드의 사회 과학 축소에 대한 우려를 제기함.
          + Marsden Fund는 순수 연구를 지원하기 위해 설립되었으며, 사회 과학 연구의 거의 대부분을 지원함.
          + 경제적 이익을 위한 연구에 자금을 전환하는 것은 잘못된 판단이라고 봄.
          + 심리학과 같은 분야는 경제적 가치를 제공할 수 있음.
     * 사회 진보를 위한 담론이 국가 기구의 필요에 맞게 왜곡되었다고 생각함.
          + 학문적 작업이 직업으로 변했으며, 교육을 받은 인구가 많아졌다고 봄.
          + 캠퍼스 조직화는 여전히 존재하며, 교수진이 부족할 경우 관리자가 어려움을 겪을 수 있다고 주장함.
     * Marsden Fund는 순수 연구를 지원하기 위해 설립되었으며, 현재 예산으로는 제출된 신청서의 약 10%만 지원할 수 있음.
          + 뉴질랜드 과학 부문은 이미 여러 다른 대규모 응용 연구 자금원을 보유하고 있음.
          + 예산 부족이 어떻게 이렇게 커졌는지에 대한 의문을 제기함.
          + 사회 과학 연구자의 수를 줄이는 것이 나쁜 아이디어는 아니라고 생각함.
"
"https://news.hada.io/topic?id=18155","해커를 위한 브라우저, Nyxt","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           해커를 위한 브라우저, Nyxt

     * Nyxt: 해커의 브라우저
          + 키보드를 떠나지 않고 인터넷에서 정보를 빠르게 분석, 탐색, 추출할 수 있는 브라우저인 Nyxt에 대한 설명임.
     * 강력한 링크 힌팅
          + 키보드로 링크를 따라가는 과정을 가속화함. 마우스를 사용하지 않고도 페이지를 탐색할 수 있음.
     * Jump Headings로 문서 빠르게 탐색
          + 헤더 태그를 통해 중요 챕터로 즉시 이동할 수 있음. 예시로 'Intelligence and Learning' 섹션으로 점프하는 방법을 보여줌.
     * 탭 간 빠른 전환
          + 퍼지 검색을 통해 관련 탭을 쉽게 찾을 수 있음. 예시로 11개의 열린 탭을 좁혀가는 과정을 설명함.
     * 멀티탭 검색으로 첫 번째 시도에 올바른 정보 찾기
          + 여러 탭을 동시에 검색할 수 있음. 예시로 펭귄의 식단을 여러 페이지에서 동시에 검색하는 방법을 설명함.
     * 반복 작업 피하기
          + 여러 탭에 대해 명령을 실행하여 반복 작업을 피할 수 있음. 예시로 'ele' 문자열과 일치하는 모든 웹페이지를 선택하고 닫는 방법을 설명함.
     * 명령어 쉽게 실행
          + 관련 명령어를 퍼지 검색하여 즉시 실행할 수 있음. 메뉴를 뒤질 필요가 없음.
     * 내장 프로그래머빌리티
          + 내장된 REPL을 사용하여 Nyxt를 프로그래밍할 수 있음. 짧은 스크립트를 실행하고 새로운 워크플로를 시도할 수 있음. Nyxt는 완전히 확장 가능하고 수정 가능함.
     * 스마트 북마크 검색
          + 프롬프트 버퍼를 사용하여 태그된 북마크를 지능적으로 검색할 수 있음.
     * 커스터마이즈 가능한 자동 완성
          + 자동 완성을 사용하여 양식을 채울 수 있음. 자동 완성은 함수 또는 일반 문자열일 수 있으며, 함수의 경우 지능적으로 만들 수 있음. 예를 들어, 현재 날짜를 자동으로 채우도록 설정할 수 있음.
     * 클립보드 히스토리
          + 복사한 모든 것이 기억되어 언제든지 다시 붙여넣을 수 있음. 마지막에 붙여넣은 것을 찾을 필요가 없음.
     * 손실 없는 트리 히스토리
          + 트리 기반 히스토리를 통해 방문한 페이지를 잃지 않음. 방문한 모든 페이지가 탐색 및 검색 가능한 트리에 저장됨. 히스토리에서 항목을 잃어버릴 일이 없음.

        Hacker News 의견

     * 일부 사용자는 Vimium 같은 애드온으로 이미 제공되는 기능이 많다고 느끼며, Firefox 백엔드와 호환되기를 바람
          + Chrome 파생 브라우저의 새로운 UI에 대한 관심 부족
     * SBCL로 작성된 웹 엔진에 대한 호기심 표현
     * Nyxt의 렌더러 독립적 접근이 흥미롭다고 생각함
          + 현실적으로 가능할지는 의문이지만, 좋은 아이디어라고 평가
     * Nyxt는 마우스 사용자에 대한 적대감이 없음을 강조
          + 마우스 사용자도 좋은 브라우징 경험을 누릴 자격이 있다고 주장
     * Nyxt 브라우저를 사용해본 경험 공유
          + 처음에는 유망했으나, 작업 시 산만함을 느껴 포기
          + Vim 스타일의 조작을 좋아하는 사용자에게 추천
     * Mac용 Shortcat 사용 경험 공유
          + 키보드로 모든 것에 접근 가능함을 칭찬
          + Nyxt의 스크립팅 기능도 언급
     * Nyxt의 AI 통합에 대한 우려 표명
          + 프라이버시 문제 가능성 제기
          + EULA와 코드 검토 시도
     * Nyxt를 일상적으로 사용하려 했으나, 버그와 충돌로 인해 포기
          + 다시 시도할 계획
     * ""해커""가 마우스 사용을 꺼리는 사람으로 변한 것에 대한 의견
     * uzbl을 기억하는 사용자의 아쉬움 표현
          + Nyxt를 시도해볼 계획
     * UBlock origin을 실행할 수 없는 점이 Nyxt 사용의 걸림돌
          + 시간이 생기면 직접 해결할 계획
     * Nyxt의 훌륭함을 인정하지만, 2fa 키가 작동하지 않는 점이 아쉬움
          + 엔진 지원 추가를 기대
"
"https://news.hada.io/topic?id=18234","구케시, 역사상 최연소 체스 세계 챔피언 등극","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구케시, 역사상 최연소 체스 세계 챔피언 등극

     * 구케시, 역사상 최연소 세계 챔피언 등극
          + GM 구케시 D는 GM 딩 리런과의 경기에서 약간 유리한 엔드게임을 오랫동안 압박한 끝에 승리함.
          + 딩 리런은 개막 후 약간 유리한 상황에서 폰 다운 엔드게임을 방어해야 했으나, 결국 실수로 패배하게 됨.
          + 리체스는 세계 챔피언십의 매일 라이브 스트리밍을 제공하며, GM 펠릭스 블로버거와 IM 로라 우눅이 진행함.
     * 긴 엔드게임 압박과 새로운 세계 챔피언
          + 딩은 1. Nf3를 시도하며 주요 오프닝 이론을 피하려 했으나, 구케시는 1...d5로 응수하며 클래식한 방식으로 플레이함.
          + 딩은 하이퍼모던 스타일로 피스 중심의 컨트롤을 시도했으나, 구케시는 중앙의 긴장을 해소하며 빠르게 진행함.
          + 구케시는 6...Nge7라는 거의 새로운 오프닝을 선보이며, 나이트 교환을 통해 퀸에게 템포를 얻음.
     * 깊은 준비와 중앙 컨트롤
          + 딩은 10. e3로 중앙을 도전했으나, 구케시는 중앙의 컨트롤을 유지하며 약간의 우위를 점함.
          + 딩은 다크 스퀘어 비숍을 발전시키며 템포를 얻었으나, 구케시는 중앙 컨트롤을 통해 큰 불리함을 피함.
     * 최종 결전
          + 구케시는 16...e5로 라이트 스퀘어 비숍을 발전시킬 기회를 얻었고, 딩은 빠르게 대응해야 했음.
          + 딩은 19. cxb5로 대량의 말 교환을 시작하며 균형을 맞추려 했으나, 구케시의 빠른 활동으로 인해 어려움을 겪음.
          + 딩은 3 vs. 2 룩과 비숍 엔드게임을 방어해야 했으며, 이는 어제와 유사한 상황이었음.

        Hacker News 의견

     * Ding의 경기 후 인터뷰에서 그의 사려 깊음, 객관성, 겸손함이 인상적이었음. 그는 자신의 경기력에 만족하며 팬들에게 감사의 메시지를 전했음
          + Gukesh도 승리 후 겸손하고 신사적인 태도를 보였음
          + 이러한 특성들이 체스와 체스 스타들을 매력적으로 만드는 요소임
     * 이번 챔피언십의 결말은 매우 실망스러웠음
          + Gukesh는 대회 전부터 훌륭한 경기력을 보여주었고, Ding은 기대 이상으로 잘 싸웠음
          + 마지막 게임은 복잡한 싸움이었고, Ding이 몇 가지 실수를 하면서 패배로 이어졌음
     * 기사에서 Gukesh의 나이를 찾기 어려웠음
          + 나이와 관련된 정보가 잘 드러나지 않았음
     * 실시간으로 선수들과 팬들의 반응을 보는 것이 흥미로웠음
          + 코로나로 인해 체스를 시작하게 되었고, 컴퓨터 평가가 초보자에게 많은 도움이 됨
     * 아들과 함께 체스를 보며 즐거운 시간을 보냈음
          + Gukesh는 경기 내내 Ding을 압박했고, 그의 정신 건강과 회복력이 돋보였음
          + 그의 겸손함과 감사함이 인상적이었음
     * 두 선수에게 큰 존경을 표함
          + 현재의 체스 포맷이 정체되어 있다고 생각함
          + Fischer Random을 포함한 새로운 포맷이 필요하다고 주장함
          + Magnus Carlsen의 불참으로 인해 대회가 저평가된 것이 아쉬움
     * Gukesh의 젊은 나이에 대한 놀라움
          + Kasparov가 22세에 기록을 세웠고, Gukesh의 기록은 오랫동안 깨지지 않을 것 같음
     * Ding의 경기력에 놀랐고, Gukesh의 끈기가 결국 보상을 받았음
          + Ding은 기회를 놓치고, Gukesh는 끊임없이 압박을 가하며 최연소 체스 세계 챔피언이 되었음
     * Gukesh의 성에 대한 궁금증
          + FIDE 프로필에 성이 'D'로만 표기되어 있음
          + 인도 동료들은 이름이 길어서 줄여 쓴 것이라고 추측했음
     * Gukesh는 모든 사람에게 훌륭한 롤 모델임
          + 그의 결단력과 겸손함이 돋보였음
          + Magnus가 다시 출전하여 Gukesh와의 경기를 기대함
"
"https://news.hada.io/topic?id=18230","뉴저지 드론 미확인 목격, '비상사태' 촉구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        뉴저지 드론 미확인 목격, '비상사태' 촉구

     * 드론 목격 사례 증가
          + 11월 중순부터 뉴저지와 미국 북동부 지역에서 드론 군집 목격 사례가 보고됨.
          + 이러한 목격 사례는 의회 의원들의 불만을 불러일으키며, 제한적인 비상사태 선언 요구로 이어짐.
     * 정치적 반응
          + 뉴저지의 공화당 상원의원 Jon Bramnick는 미스터리가 해결될 때까지 모든 드론 금지를 요구함.
          + 뉴저지 주지사 Phil Murphy는 미국 국토안보부 장관과 회의를 열어 드론 보고에 대해 논의함.
          + 현재까지 공공에 알려진 위협은 없다고 강조함.
     * 연방 조사
          + FBI의 Robert Wheeler는 드론 목격에 대한 설명이 아직 없다고 확인함.
          + 3,000건 이상의 목격 사례가 FBI의 제보 라인에 접수되었으나, 아직 돌파구는 없음.
     * 지역 사회의 우려
          + 뉴저지의 21개 도시 시장들은 주지사에게 주 전역의 조치를 요구하는 공동 서한을 보냄.
          + 드론이 민감한 인프라 근처에서 목격되며, 특히 Bedminster 골프 코스와 전력 전송 장소, 철도역, 경찰서 등에서 우려가 집중됨.
     * 뉴욕과 필라델피아로 확산
          + 최근 드론 목격 사례가 뉴욕시와 필라델피아 교외 지역으로 확산됨.
          + Staten Island와 Brooklyn의 공화당 의원 Nicole Malliotakis는 드론이 민감한 인프라 위를 비행하고 있어 우려된다고 언급함.
     * 군사적 대응
          + 펜타곤은 드론이 ""이란 모선""에서 온 것이라는 근거 없는 주장에 대해 대응함.
          + 미국 군사 지도자들은 드론이 외국의 적으로부터 온 것이 아니라고 믿음.
          + 미국 북부 사령부는 현재까지 이러한 사건에 대한 지원 요청을 받지 않았다고 발표함.

        Hacker News 의견

     * 2018년 Gatwick 공항에서 드론 소동이 발생했음. 수백 건의 목격이 보고되었지만, 실제로 드론이 발견되지 않았음. 전문가도 헬리콥터를 드론으로 착각했음
     * FBI는 드론이 회전익 및 고정익이라고 말하고, 백악관은 외국 적대세력이 아니라고 주장하며, 국방부는 미국 군대가 아니라고 함. 그러나 실제 위협이 없다고 주장함
     * 정치인들은 드론의 정체를 모른 채 위협이 없다고 단정할 수 없다고 의문을 제기함. 드론이 상업용 항공기와 헬리콥터로 보인다는 의견도 있음
     * 일부 사람들은 물체의 불규칙한 움직임을 보고함. 어두운 곳에서 깜빡이는 LED가 착시를 일으킬 수 있다고 설명함. 이 현상은 안구 운동인 사카드와 관련이 있을 수 있음
     * FAA가 비행 제한 구역을 설정하고, 국가 방위군이 드론을 차단하여 훈련 기회로 활용할 수 있다고 제안함. 드론이 합법적이라면 ID를 방송할 것이라고 함
     * 보스턴 교외에서 드론을 목격했다는 사람도 있음. Hanscom에서 출발했거나 도시를 지도화하는 중일 가능성을 제기함
     * 드론과 쿼드콥터는 다르며, 드론은 일반 항공기나 헬리콥터처럼 보일 수 있음. 정부는 모든 공역을 항상 감시하지 않음
     * 드론이 빛을 발산하며, 소유자가 드론을 보이게 하려는 의도가 있을 수 있음. 뉴스와 소셜 미디어를 통해 공포를 퍼뜨리는 비폭력적 테러의 형태일 수 있음
     * 이상한 빛이 하늘에 있다는 소문은 사람들이 밤하늘을 보게 만들고 더 많은 보고를 유도할 수 있음
     * 목격자 보고는 1800년대 후반과 1900년대 초반의 미스터리 비행선 사건을 떠올리게 함
"
"https://news.hada.io/topic?id=18238","GPT-2 기반 3000바이트 C로 구현된 ChatGPT 클론 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GPT-2 기반 3000바이트 C로 구현된 ChatGPT 클론 (2023)

     * ChatGPT 클론 구현
          + 이 프로그램은 GPT-2의 의존성 없는 구현임.
          + TensorFlow 파일에서 가중치 행렬과 BPE 파일을 로드하고, 입력을 간단한 바이트 쌍 인코더로 토큰화함.
          + 기본 선형 대수 패키지를 구현하고, 변환기 아키텍처를 정의하며, 변환기 추론을 수행하고, BPE 디코더로 출력을 비토큰화함.
          + 약 3000바이트의 C로 작성됨.
          + 효율적으로 최적화되어 GPT-2 Small 모델이 현대 기기에서 몇 초 내에 응답할 수 있음.
          + KV 캐싱과 효율적인 행렬 곱셈 알고리즘을 구현함.
     * 프로그램 구조
          + 기본 행렬 수학 라이브러리 (700바이트)
          + 빠른 행렬 곱셈 (300바이트)
          + 신경망 레이어 (300바이트)
          + 변환기 모델 (600바이트)
          + 바이트 쌍 인코딩 (400바이트)
          + 입출력 (200바이트)
          + 가중치 로딩 (300바이트)
          + 바이트 쌍 인코딩 로딩 (300바이트)
     * ChatGPT와 변환기 배경
          + ChatGPT는 언어 모델과 대화할 수 있는 애플리케이션임.
          + GPT-4는 최신 모델로 매우 인상적임.
          + 이 C 프로그램은 2019년의 약한 모델인 GPT-2를 사용하여 ChatGPT의 동작을 구현함.
          + GPT-2는 고정 크기의 단어 시퀀스를 입력으로 받아 다음 단어를 예측하는 변환기임.
     * C 코드 설명
          + 행렬 수학 시작하기 (700바이트)
               o 신경망은 행렬 연산으로 구성됨.
               o 최소한의 행렬 정의를 사용하여 행렬 라이브러리를 구축함.
               o 매크로를 사용하여 공통 로직을 메타 루틴으로 추출함.
          + 빠른 행렬 곱셈 (300바이트)
               o 기본 행렬 곱셈은 세 개의 루프를 사용하여 구현됨.
               o 메모리와 캐시의 작동 방식 덕분에 동일한 메모리를 반복적으로 읽고 쓰는 것이 더 빠름.
          + 신경망 레이어 (300바이트)
               o 변환기를 작성하기 위해 몇 가지 특별한 신경망 레이어를 정의함.
               o GELU 활성화 함수와 인과적 주의에 필요한 하위 대각선 설정 함수 등을 구현함.
          + 변환기 아키텍처 (600바이트)
               o 변환기를 600바이트로 구현함.
               o 각 레이어에서 키, 쿼리, 값을 계산하고, 주의 행렬을 생성하여 결과를 결합함.
          + 바이트 쌍 인코딩 (400바이트)
               o 언어 모델은 고정 크기의 입력이 필요하므로 단어 조각을 사용하여 토큰을 생성함.
               o 주어진 단어를 개별 문자로 나누고, 인접한 토큰 쌍을 병합함.
          + 가중치 로딩 (300바이트)
               o 신경망의 가중치를 디스크에서 로드함.
               o 가중치는 32비트 부동소수점으로 직렬화되어 있음.
          + 바이트 쌍 인코딩 로딩 (300바이트)
               o 바이트 쌍 인코딩 어휘를 디스크에서 로드함.
               o 파일 형식은 바이트 쌍 인코딩 목록으로 구성됨.
     * 결론
          + 기계 학습의 수십 년의 발전을 몇 천 바이트로 압축할 수 있음.
          + 단순한 신경망의 예시로, 실제 모델 가중치를 제외하고는 모든 것을 포함함.

        Hacker News 의견

     * GPT-2를 사용해 친구와 대화를 시뮬레이션했을 때 재미있고 때로는 놀라울 정도로 정확했음. GPT-2와 GPT-3 사이의 큰 도약은 더 큰 모델, 더 많은 데이터, 또는 둘 다 때문인지 궁금함. RLHF가 큰 차이를 만들지만 기본 GPT-3 모델도 충분한 예시가 주어지면 매우 유용했음
     * 간단한 신경망이 실제로 얼마나 간단한지를 보여주는 좋은 예시임. 인공지능은 우리가 돈을 벌기 위해 사용하는 검은 마법임
     * 코드를 실행해보진 않았지만 작은 크기에 감명받았음. 초기 ELISA 프로그램은 더 컸음. 지난 4년 동안 이것을 바이트 단위로 맞출 수 있게 되었음. 마법이 어디에 있는지 힌트가 있다면 설명해주길 바람. GELU 함수인지 bash 스크립트를 통해 다운로드된 모델인지 궁금함
     * GPT-2가 내가 좋아하는 동화를 작성했음. 링크: The Princess, the Fairy Godmother, and the Chest
     * GPT-2가 실제로 채팅에 사용될 수 있도록 조정되었는지 궁금함. 그렇지 않다면 이것을 ChatGPT 클론이라고 부르는 것은 무리라고 생각함
     * LISP가 항상 C보다 나은 것은 아님. 이번에는 허용됨. 코드 링크를 놓쳤다면 여기 있음: C-Chat-GPT-2
     * 어떤 하드웨어에서 실행될 수 있는지 궁금함. huggingface의 양자화된 가중치를 사용할 수 있는지, 어떤 문제나 쿼리에 특히 잘 맞는지 궁금함
     * 요즘 gptscript를 사용하여 쉽게 자신만의 ChatGPT를 구현할 수 있음. 링크: gptscript
     * C 매크로가 정규 표현식과 어떻게 비슷한지 이해하지 못하겠음. C 매크로는 단어를 매칭하고 다른 텍스트로 대체함. 정규 표현식은 상대적으로 복잡한 패턴으로 텍스트를 매칭하며, 자체적으로 텍스트 대체를 하지 않음
     * 로컬에서 실행하여 이 GP2가 생성하는 출력이 어떤지 확인한 사람이 있는지 궁금함
"
"https://news.hada.io/topic?id=18138","인텔 이사회와 이사회 및 단기주의 실패 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        인텔 이사회와 이사회 및 단기주의 실패 사례

    인텔의 몰락: 이사회 실패

     * Pat Gelsinger의 퇴임: Pat Gelsinger는 인텔의 CEO 자리에서 물러났으며, 이는 퇴임이 아닌 해고로 간주됨. 그는 기술적으로 가장 유능한 CEO였지만, 짧은 임기를 가짐.
     * 이사회의 역할: 이사회는 Pat의 계획에 대해 불만을 가졌으며, 특히 대규모 투자에 대한 수익을 요구함. Pat은 대담한 IFS 계획을 추진하고자 했으나, 이는 이사회와의 마찰을 초래함.
     * 이사회의 구성: 인텔 이사회는 반도체 경험이 부족한 인물들로 구성되어 있으며, 많은 이들이 인텔의 문제에 책임이 있음. 이사회는 단기적인 주주 가치를 극대화하기 위해 회사를 분할하려는 계획을 가지고 있음.
     * 이사회의 실패: 이사회는 기술적 전문성이 부족하며, 인텔의 문제를 해결할 능력이 부족함. Pat의 해고는 이사회의 무능함을 보여주는 사례로, 이사회는 인텔을 잘못된 방향으로 이끌고 있음.
     * 인텔의 미래: 인텔은 새로운 이사회 구성원들을 임명했으나, 이는 너무 늦은 조치일 수 있음. 인텔의 미래는 불확실하며, 회사의 분할 가능성이 제기됨.

        Hacker News 의견

     * Andy Bryant가 Intel의 이사회에서 중요한 역할을 했음. Pat Gelsinger가 Intel을 떠난 이유 중 하나가 Andy Bryant였음
          + Andy Bryant는 2012년부터 이사회 의장을 맡았으며, 그 이전에는 부의장으로 활동했음
          + Intel의 CEO 전략과 방향은 지난 10년간 Andy Bryant에게 귀속될 수 있음
          + Paul Otellini 이후 모든 Intel CEO를 직접 선발했음
          + Pat Gelsinger는 Brian Krzanich 시대 동안 여러 번 CEO로 복귀 요청을 받았으나 거절했음
          + Andy Bryant가 2020년 초 은퇴를 발표한 후 Pat Gelsinger가 Bob Swan을 대체하는 CEO로 합의했음
          + 주주들이 배당금을 계속 유지하기를 원했기 때문에 Intel은 배당금을 줄일 수 없었음
          + 결국 주주들이나 월스트리트가 이사회 멤버십을 그들 사이에서 나누며 회사를 운영했음
     * 이사회가 기술적 또는 제품 전문성이 부족하다는 점이 Gelsinger의 갑작스러운 은퇴 발표 때 드러났음
          + 이사회는 Gelsinger의 계획을 승인했어야 했으며, 그들이 무엇을 승인하는지 알았어야 했음
          + Gelsinger는 재정과 시장 감정에 대해 너무 경솔했을 수 있음
     * 월스트리트에서 대형 M&A 자문을 거의 10년 동안 한 후, 활동가 투자자들이 자본 시장에서 근본적인 역할을 한다고 생각함
          + 활동가들이 이사회를 교체하라고 요구하지 않은 것이 놀라움
          + Intel을 되돌리기에는 너무 늦었거나, 활동가가 천천히 지분을 사들이고 있을 가능성도 있음
     * Gelsinger가 기술적으로 유능했기 때문에 좋은 CEO가 될 것이라는 암묵적인 가정이 있음
          + Gelsinger의 재임 기간 동안 Intel에 대한 부정적인 이야기만 들었음
          + 좋은 엔지니어가 항상 좋은 관리자가 되는 것은 아님. 관리의 핵심은 인재를 식별하고 그들이 일을 잘 할 수 있도록 신뢰하는 것임
     * Intel이 파운드리 없이 미국에 전략적 가치를 제공하지 않음
          + 현재 Intel은 세금 지원에 의존하고 있음
          + 파운드리를 없앨 계획이 있음
     * Intel 같은 대기업이 이사회에 의해 완전히 무력화될 수 있다는 점을 강조함
          + 이사회 멤버 중 반도체 경험이 있는 사람이 거의 없음
     * Pat Gelsinger가 괜찮은지에 대한 의문이 있음
          + Gelsinger가 갑자기 성경 구절을 트위터에 게시하기 시작했음
     * James Goetz는 Sequoia의 파트너로 2019년 11월에 이사회에 합류했음
          + 네트워킹 중심의 이사회에서 활동한 경험이 있으며, 전기공학 학위를 가지고 있음
          + 기술적 배경이 없다고 하지만, 실제로는 기술적 배경이 있음
     * Gelsinger가 맡은 문제의 복잡성을 과소평가하지 말아야 함
          + Gelsinger는 많은 문제를 해결하려고 했으며, 조직의 문화적 짐을 안고 있었음
          + 다음 리더십에서는 미래에 대한 명확하고 긍정적인 비전과 산업의 체계적 변화에 대한 인식이 필요함
     * 현재 공개된 정보만으로는 이 결정에 대한 확고한 견해를 갖기 어려움
          + 기술적 진전이 있었지만, IFS 고객이 없으면 의미가 없음
          + 새로운 CEO가 비용 문제와 진전 없는 제품 제거를 더 잘 처리할 수 있을 것임
"
"https://news.hada.io/topic?id=18185","Hetzner의 계정 취소 및 모든 서버 종료 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Hetzner의 계정 취소 및 모든 서버 종료 결정

     * 서버 중단 사건
          + Kiwix는 Hetzner의 서비스 중단으로 인해 서버가 예고 없이 종료되었음.
          + Hetzner는 이메일을 보냈다고 주장했으나, Kiwix는 이를 받지 못했음.
          + 데이터는 이미 삭제되어 복구 불가능한 상태였음.
     * 대처 및 복구
          + Kiwix는 다른 호스팅 서비스인 Scaleway를 통해 새로운 서버를 구축하고 데이터를 복구했음.
          + 약 48시간이 소요되어 8TB의 데이터를 복구했음.
          + 이 과정에서 취약점을 발견하고 향후 개선 방안을 모색 중임.
     * 커뮤니티 반응
          + 여러 사용자들이 Hetzner의 서비스 중단에 대해 비슷한 경험을 공유함.
          + Hetzner의 고객 서비스와 데이터 처리 방식에 대한 불만이 제기됨.
          + GDPR 규정을 통해 Hetzner에 정보 요청을 할 것을 권장하는 의견도 있었음.
     * Hetzner에 대한 우려
          + Hetzner의 서비스 중단이 다른 사용자들에게도 영향을 미칠 수 있다는 우려가 제기됨.
          + Hetzner의 신뢰성에 대한 의문이 커지고 있으며, 다른 대안을 찾으려는 움직임이 있음.
     * 백업 및 데이터 보안
          + Hetzner 외부에 백업을 두는 것이 중요하다는 의견이 많았음.
          + 데이터 손실을 방지하기 위한 백업 전략의 필요성이 강조됨.

        Hacker News 의견

     * CTO들이 AWS에 백업을 두고 있어 안전하다고 하지만, 계정이 차단되면 어떻게 할지에 대한 계획이 부족함. 다른 클라우드 제공자와의 백업 및 테스트가 필요함.
          + Hetzner와 20년 이상 함께 했지만, 개별 서버는 중단되었어도 전체 계정은 취소되지 않았음.
     * Hetzner가 경고 없이 데이터를 삭제했다면 안정적인 기반이 아님. Google Cloud를 사용하지 않는 이유와 Hetzner에 대한 불신을 표현함.
     * Hetzner가 경고 없이 데이터를 삭제했다는 것은 비즈니스에 치명적임. Hetzner의 평판과 고객에게 큰 영향을 미침.
     * Hetzner의 서버 중단은 보통 약관 위반 때문이지만, Kiwix의 경우는 의심스러운 콘텐츠와 관련이 없어 보임. Hetzner의 입장을 기다리고 있음.
          + 개인적으로 Hetzner를 문제 없이 사용했지만, 데이터 삭제 소식은 공격적으로 들림. 다행히 데이터 백업이 있음.
     * VPS 제공자와의 콘텐츠 문제를 해결하기 위해 알려지지 않은 VPS 제공자를 사용하고, 콘텐츠를 숨기기 위한 방법을 공유함.
          + 실제 서버를 콘텐츠 원본으로 사용하고, 프록시 서버를 통해 접근하도록 설정함.
          + DNS와 Cloudflare를 프록시 노드에 연결하여 서버가 중단되어도 쉽게 대체 가능함.
     * Hetzner가 설명 없이 계정을 비활성화한 사례가 있음.
     * Hetzner가 0.02 유로의 미납금으로 계정을 동결했으며, 결제 방법의 제한으로 인해 불편을 겪음.
     * 저작권 침해 요청을 받으면 Hetzner는 경고 없이 서버를 중단함. 이는 비합리적이며, Hetzner를 추천하지 않음.
     * Hetzner에 가입하려 했으나, 신분증을 제출해도 가입이 거부됨. 결과적으로 문제를 피한 셈임.
     * 최근 Hetzner에 대한 부정적인 경험이 많아지고 있으며, 평판에 문제가 생기고 있음.
"
"https://news.hada.io/topic?id=18146","Just - Command Runner","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Just - Command Runner

     * ""프로젝트별 명령""을 저장하고 실행하는 간편한 도구
          + 빌드시스템이 아닌 단순한 ""명령 실행기""
     * make와 비슷한 문법의 justfile(recipe) 를 작성하여 실행
     * 리눅스/맥/윈도우 지원
     * 명확한 에러 제공, 문법 에러는 소스 컨텍스트와 함께 표시
     * Recipe는 명령형 인자 받기 지원
     * 가능하다면 모든 에러는 정적으로 리졸브됨. 알수 없는 레시피 및 순환 종속성은 실행 전에 알려줌
     * Recipe는 명령행에서 리스팅 가능
     * 명령행 자동완성 스크립트는 대부분의 유명 쉘들에서 지원 (Bash, Elvish, Fish, Nushell, PowerShell, Zsh)
     * Recipe는 Python/NodeJS 같은 임의의 언어로 작성할 수 있음

   .sh랑 .bat을 둘 다 가지는게 불쾌할 때 쓰는 도구인걸까요

        Hacker News 의견

     * Task는 예상 파일을 지정하여 불필요한 작업을 피할 수 있어 소프트웨어 빌드에 적합함
          + Just는 프로세스의 성공 코드만 중요할 때 적합하며, Rust 팬에게도 좋음
          + CI 같은 특정 용도에서는 이미 YAML/JSON/XML 형식을 사용 중일 가능성이 높음
     * Just는 추가적인 언어를 요구하며, 프로젝트 도구로서 명령형 모드를 장려함
          + 이는 파일 시스템 상태를 변경할 수 있어, 자동화가 불확실한 상태에 의존하게 됨
          + Nix와 같은 도구를 사용하여 빌드로 재구성하는 것이 바람직함
     * Mise를 사용해 보았으나 설치가 번거로워 Just로 돌아옴
          + Just는 가볍고 빠르다는 인식 덕분에 저항이 적음
     * Just를 거의 1년 동안 사용하며 만족함
          + just --list로 새로운 사람의 온보딩이 쉬움
          + Make보다 더 나은 문법을 제공함
     * 과거에 비슷한 도구를 개발한 경험이 있으며, 같은 필요를 느낀 사람들이 있어 기쁨
     * Just는 개발 스택에서 중요한 소프트웨어로, Windows에서도 잘 작동함
     * 모든 프로젝트에서 Just를 사용 중이며, 일반적인 justfile은 약 20개의 규칙을 가짐
          + 프로젝트 루트 디렉토리에서 항상 실행되는 것이 큰 장점임
     * Just는 Make보다 사용 설득이 쉬움
          + Make는 배우기 유용하지만, 쉘 경험이 적은 사람에게는 어려운 언어임
          + 소유자가 불분명한 Makefile이 레포지토리에 흩어져 있는 경우가 많음
     * Task/Taskfile과 유사한 Mage/Magefile은 Go 코드로 작업을 정의함
          + 복잡한 작업에 유용하며, Pulumi와 Terraform의 관계와 비슷함
     * Make를 오랫동안 사용했지만, 새로운 도구에 투자하는 것이 불안함
          + Make를 대체할 '더 나은 Make'가 있기를 바람
"
"https://news.hada.io/topic?id=18151","협업 편집에 대한 거짓말, 1부: 오프라인 편집을 위한 알고리듬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  협업 편집에 대한 거짓말, 1부: 오프라인 편집을 위한 알고리듬

     * 2024년 초, Moment의 핵심 텍스트 편집기에 사용할 협업 편집 시스템을 조사하기 시작함. 현재 여러 알고리듬이 온라인 및 오프라인 편집 문제를 해결한다고 주장하고 있음. 그러나 실제로는 오프라인 편집 경험이 좋지 않다는 것을 발견함.
     * 오프라인 편집의 문제점
          + CRDTs와 OT 같은 인기 있는 알고리듬은 직접적인 편집 충돌을 비직관적으로 해결하여 사용자들이 데이터 손상으로 인식하게 만듦.
          + 오프라인 편집은 직접 충돌의 가능성을 높이며, 이 알고리듬들은 오프라인 편집에 적합하지 않음.
     * 예시: 사소한 편집 충돌
          + Alice와 Bob이 오프라인 상태에서 문서를 편집함. Bob은 'Color'를 'Colour'로 바꾸고, Alice는 모든 텍스트를 삭제함. 이후 온라인 상태가 되었을 때, 이 충돌을 해결해야 함.
          + 이러한 충돌은 흔하며, 결과적으로 사용자들은 데이터가 손상되었다고 인식함.
     * 알고리듬의 한계
          + Yjs, ShareJS, Peritext 같은 프로젝트는 오프라인 편집을 지원한다고 주장하지만, 실제로는 빈번한 오류가 발생함.
          + 알고리듬은 사용자 의도를 알 수 없으며, 문자 단위로 작동하여 결과에 대한 보장이 부족함.
     * UI/UX 문제로의 전환
          + 알고리듬만으로는 문제를 완전히 해결할 수 없으며, UI/UX 문제로 접근해야 함.
          + git과 같은 문서 병합 UI가 이미 존재하며, 이를 더 접근 가능하고 자동화할 수 있는 방법을 연구해야 함.
          + 일부 연구자들은 이 문제를 UI/UX 문제로 집중하고 있으며, Ink & Switch의 협업 역사 연구가 그 예임.

        Hacker News 의견

     * Eg-walker와 ShareJS의 저자는 실시간 협업 도구가 온라인에서 함께 작업할 때 유용하지만, 오프라인 편집이나 장기적인 브랜치에서는 충돌 마커를 추가하고 수동 검토를 할 수 있는 옵션이 필요하다고 언급함
          + Eg-walker 알고리즘은 모든 사용자로부터 문자별 편집 추적을 저장하고, 모든 변경이 발생한 시점을 저장하여 충돌 범위를 감지하고 표시할 수 있는 CRDT를 구축할 수 있는 가능성을 제시함
          + 이 문제는 흥미로운 문제이며, 아직 해결되지 않았으므로 더 많은 관심이 필요하다고 강조함
     * CRDT를 사용하는 구현의 또 다른 문제는 인프라 부담임
          + CRDT를 사용할 경우 Redis나 MyRocks와 같은 것을 사용하는 것이 좋으며, RDBMS, 특히 Postgres로 백업하지 말 것을 권장함
     * CRDT를 노트 작성 소프트웨어에 통합하는 작업을 하고 있는 사용자에게 감사의 인사를 전함
     * 기계적 병합 알고리즘은 다양한 종류의 충돌에서 성능이 다를 수 있으며, CRDT는 병합된 텍스트가 사용자가 의도한 것인지 결정할 수 없음을 언급함
          + Upwelling 논문에서는 의미적 충돌과 구문적 충돌의 차이에 대해 자세히 설명함
          + 진지한 협업은 문서 검토 문제이며, 특히 저널리즘과 과학 출판에서 중요함
     * 협업 텍스트 편집에 사용되는 알고리즘(CRDTs와 OT)은 편집 작업의 수행 및 상호작용에 대한 엄격한 대수적 요구사항이 있음
          + 서버가 UX 논리에 따라 작업을 처리하고, 클라이언트는 낙관적 편집을 허용하는 리베이스/예측 전략을 사용할 수 있음
     * 수학적, 인과적, 엔트로피적 충돌 개념이 의미적 충돌과 혼동되었다고 언급함
          + CRDTs 중 충돌을 보존하는 클래스가 가장 유망하며, 사용자가 충돌을 시각적으로 확인할 수 있도록 해야 함
     * AI를 사용하여 병합을 예측할 수 있는 가능성을 제시함
          + LLM이 저자의 변경 세트를 보고, 편집이 중복되는지 여부를 묻고, 변경 순서를 결정하여 90%의 좋은 결과를 얻을 수 있을 것이라고 언급함
     * CRDTs는 분산 데이터 구조에 대한 훌륭한 공식 모델이지만, 모든 충돌을 자동으로 해결해야 한다는 개념에 문제가 있다고 언급함
          + 충돌을 구조적으로 표현하고 공유 및 협력적으로 해결할 수 있는 모델이 필요함
          + ""Lazy Merging""이라는 구조적 충돌 표현 모델을 개발하여, 수학적 접근을 통해 간단한 개념적 모델을 제시함
     * 여러 개체가 동시에 데이터에 대한 권한을 가지는 것은 해결할 수 없는 문제라고 언급함
          + 분산 시스템에서 배운 교훈이며, 문서의 분산 편집에서 명확히 드러남
     * 2009년에는 Git이 자동으로 변경을 병합하는 알고리즘에 대한 논의가 많았으며, Torvalds는 자동 병합의 한계에 대해 회의적이었음을 언급함
          + 오프라인 편집은 UI/UX 문제이며, 오래된 솔루션을 답습하는 컴퓨팅의 문제와 관련됨
          + 텍스트 편집에서 오프라인 협업 병합은 프로세스의 중심이 되어야 하며, MacWrite와 같은 로컬 최대치에서 벗어나기 어렵다고 언급함
"
"https://news.hada.io/topic?id=18232","Bazel: 언제 사용해야 할까? (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Bazel: 언제 사용해야 할까? (2023)

     * Bazel은 Google이 대규모 모노레포를 효율적으로 빌드하기 위해 개발한 오픈 소스 빌드 시스템
     * 복잡한 프로젝트를 정확하고 빠르게 빌드하며, 특히 대규모 코드베이스와 다중 언어 종속성을 다룰 때 효과적
     * Bazel의 핵심 개념
          + 정확성 기반의 속도: Bazel은 빌드를 순수 함수로 간주, 동일한 입력이 동일한 출력을 생성하도록 보장
          + 효율적인 캐싱: Google의 대규모 환경에서 캐싱은 필수이며, 정확성이 이를 가능하게 함
          + 청소 없는 빌드: 소스 변경 후 ""clean build"" 없이도 안정적 빌드 가능
     * Bazel의 사용 시점
          + 사용 권장
               o 대규모 모노레포: 코드 라인이 수백만에 이르고 여러 언어를 사용하는 경우
               o 다양한 언어의 종속성 관리: 예를 들어 Python으로 모델 학습, Scala로 데이터 처리 등
               o 빠르고 정확한 CI/CD 요구: 개발 속도를 높이고 충돌 방지
          + 사용 비추천
               o 소규모 프로젝트: 코드 라인이 10만 이하이고, 단일 언어를 사용하는 경우
               o 오픈 소스 라이브러리: Bazel은 배포 가능한 아티팩트 생성에는 적합하지만, 재사용 가능한 라이브러리 배포에는 미흡
     * Bazel 도입 시 고려 사항
          + 초기 학습 곡선이 높고, 빌드 파일 작성 및 유지보수에 추가 리소스 필요
          + 캐시 서버 및 원격 실행 설정 등의 인프라 구축이 필수
     * 성공적인 Bazel 사례
          + Netflix
               o 문제점: 25만-30만 라인의 코드가 포함된 레포에서 CI 시간이 45분-1시간 소요
               o 해결책: Bazel 도입 후 빌드 시간이 20분에서 6분으로 감소
               o 효과: 병합 충돌 감소, PR 처리 속도 개선
          + Open Systems
               o 문제점: 느린 빌드 시간과 비효율적인 작업 흐름
               o 해결책: Bazel로 전환 후 피드백 루프를 20분에서 5분으로 단축
               o 교훈: 개발자 교육과 소통이 중요
     * Bazel 도입의 장단점
          + 장점
               o 빠른 빌드 시간: 캐싱 및 증분 빌드로 속도 개선
               o 정확성과 재현성: 복잡한 종속성 그래프를 정확히 표현
               o 다중 언어 통합: Haskell, TypeScript, Python 등 다양한 언어 지원
          + 단점
               o 높은 도입 비용: 초기 설정 및 학습 곡선이 가파름
               o 빌드 파일 관리 필요: 입력/출력 명시가 필수적이며, 자동화 도구 활용 필요
               o JavaScript 및 프론트엔드 툴링: 핫 리로딩 등 기존 워크플로와 호환 어려움
     * Bazel 마이그레이션 팁
          + 핵심 팀 구성: Bazel을 이해하고 설정할 수 있는 전문가 확보
          + 교육 및 소통: 도입 초기, 개발자 교육과 기대치 설정 필수
          + 언어별 복잡성: 각 언어마다 다른 빌드 설정 요구
          + 빌드 파일 자동화: Gazelle 같은 도구 활용
     * 결론
          + Bazel은 대규모 모노레포와 복잡한 종속성을 처리하는 데 탁월하지만, 도입 비용이 높음
          + 수백만 라인의 코드와 다중 언어를 다루는 조직에 적합
          + 소규모 프로젝트나 점진적 전환을 원하는 경우, Bazel 대신 Earthly 같은 대안 검토

   Bazel 도입 실패사례도 언급이 되면 좋을 것 같군요.

   AOSP의 경우 최근 몇년동안 BazelCon 에서 기존의 빌드시스템(Soong)에서 Bazel로 마이그레이션하는 부분에 대해 몇가지 발표를 하였습니다.

   https://developers.googleblog.com/en/…

   하지만 올해 Bazelcon 에서는 AOSP관련 내용 공유가 빠져있고, 최근 AOSP의 빌드관련 문서에서는 Bazel 이전이 중단되었다는 안내가 나왔습니다.

   Bazel 마이그레이션 관련해서 AOSP팀이라면 많은 도움을 받을 수 있을텐데, 도입을 포기했다는 것에 대해 많은 시사점을 보여주는 것 같습니다.

   아마… 당신의 소프트웨어는 Bazel이 필요없을겁니다.

   ㅋㅋ Earthly에서 Earthly광고를 하는군요.
   bazel은 빠른 빌드와 빠른 ""테스트""에 방점이 있습니다. 테스트이야기가 많지 않네요.
"
"https://news.hada.io/topic?id=18243","Dioxus 0.6 – Rust로 개발된 크로스플랫폼 앱 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Dioxus 0.6 – Rust로 개발된 크로스플랫폼 앱 프레임워크

     * Dioxus 0.6 출시
          + Dioxus는 웹, 데스크톱, 모바일 앱을 단일 코드베이스로 구축할 수 있는 Rust 기반 프레임워크
          + Flutter보다 더 나은 프레임워크가 목표
          + 풀스택 웹 지원과 타입 안전한 서버/클라이언트 통신에 중점을 두며, 빠른 성능과 개발자 경험 향상에 초점을 맞춤
          + 이번 0.6 릴리스는 Dioxus를 더 쉽게 사용하고 개발자 경험을 개선하며 버그를 수정하는 데 중점을 두었음
     * 주요 기능 개선
          + 모바일 시뮬레이터 지원: Android 및 iOS 시뮬레이터와 장치에서 앱을 실행할 수 있는 기능 추가.
          + 매직 핫 리로딩: 포맷된 문자열, 속성 및 중첩된 rsx!{}의 핫 리로딩 지원.
          + 인터랙티브 CLI: 새로운 UX로 Dioxus CLI를 재작성하여 사용성을 개선함.
          + 인라인 스택 트레이스: WASM 패닉과 로그를 터미널에 직접 캡처.
          + 네이티브 서버 함수: 데스크탑 및 모바일 앱을 위한 인라인 서버 RPC 지원.
     * 개발자 경험 개선
          + 토스트 및 로딩 화면: 웹 앱 개발 중 새로운 토스트 및 로딩 화면 추가.
          + 자동완성 개선: RSX의 자동완성 기능 대폭 개선.
          + 자산 시스템 안정화: 네이티브 앱에 통합된 링크 기반 자산 시스템 안정화.
          + 스트리밍 HTML: 서버에서 클라이언트로 서스펜스 및 오류 경계 스트리밍 지원.
          + SSG 및 ISG: 정적 사이트 생성 및 증분 정적 재생성 지원.
          + 오류 처리: 이벤트 핸들러, 작업 및 구성 요소에서 ?를 사용하여 오류 처리.
          + 메타 요소: 문서 속성을 설정하기 위한 새로운 Head, Title, Meta 및 Link 요소 추가.
          + 동기 prevent_default: 모든 플랫폼에서 이벤트를 동기적으로 처리.
          + onresize 이벤트 핸들러: IntersectionObserver 없이 요소의 크기를 추적.
          + onvisible 이벤트 핸들러: IntersectionObserver 없이 요소의 가시성을 추적.
          + WGPU 통합: WGPU 표면 및 자식 창 위에 Dioxus를 오버레이로 렌더링.
          + dx 번들: 웹, iOS 및 Android를 위한 완전한 dx 번들 지원.
          + json 모드: 제3자 도구 및 CI/CD 파이프라인에서 사용할 수 있도록 CLI 메시지를 JSON으로 출력.
          + 새 템플릿: 크로스 플랫폼 앱을 위한 세 가지 새로운 시작 템플릿.
          + 야간 튜토리얼 및 가이드: Dioxus 0.6 및 이후 버전을 위한 새로운 튜토리얼 및 가이드.
          + 바이너리 패칭 프로토타입: 새로운 순수 Rust 핫 리로딩 엔진의 프로토타입.
     * 릴리스 정보
          + Dioxus 0.6은 350개 이상의 풀 리퀘스트가 병합되고 수백 개의 이슈가 해결된 가장 큰 릴리스임.
          + 핫 리로딩, 자동완성 및 자산 번들링의 품질을 크게 개선하고자 함.
          + Dioxus CLI를 더 견고하고 사용하기 쉽게 만들고자 함.
          + 모바일 도구를 dioxus CLI에 인라인하여 1급 모바일 지원을 제공하고자 함.
     * 인터랙티브 명령줄 도구
          + Dioxus 0.6은 완전히 개편된 CLI 경험을 제공함.
          + 새로운 CLI는 라이브 진행률 표시줄, 애니메이션, 인터랙티브 필터 시스템, 로그 레벨을 실시간으로 변경할 수 있는 기능 등을 지원함.
     * Android 및 iOS 지원
          + Dioxus 0.6에서는 dioxus CLI가 dx serve --platform ios/android를 기본적으로 지원함.
          + 모바일 플랫폼에 대한 1급 지원을 제공하며, Android 및 iOS 시뮬레이터 타겟은 데스크탑과 동일한 기능을 지원함.
     * 핫 리로딩 엔진 개편
          + Dioxus의 핫 리로딩 엔진에 대대적인 개선을 도입함.
          + 포맷된 문자열, 중첩된 rsx 블록, 구성 요소 속성 및 간단한 Rust 표현식의 핫 리로딩 지원.
     * 자동완성 기능 개편
          + rsx! {}의 자동완성 기능을 대폭 개선함.
          + Rust-analyzer와의 통합을 개선하여 더 나은 자동완성 경험을 제공함.
     * 인라인 WASM 스택 트레이스 및 추적 통합
          + WASM 앱을 위한 추적 통합을 제공하여 패닉과 로그를 캡처하고 터미널에 전송함.
     * 토스트 및 로딩 화면
          + 웹 앱 개발 중 빌드 진행 상황을 보여주는 로딩 화면과 빌드 상태를 나타내는 토스트를 제공함.
     * 풀스택 데스크탑 및 모바일
          + 네이티브 앱과 서버 함수를 통합하여 데스크탑 및 모바일 타겟에서 서버 함수가 기본적으로 작동하도록 함.
     * Manganis 자산 시스템 안정화
          + 새로운 자산 시스템 Manganis를 안정화하고 여러 버그와 성능 문제를 해결함.
     * 서스펜스 및 HTML 스트리밍
          + 비동기 UI를 위한 새로운 핵심 프리미티브인 서스펜스 경계를 도입함.
          + Dioxus 풀스택은 서버에서 각 서스펜스 경계를 스트리밍하여 페이지 로드를 기다리지 않고 각 청크를 스트리밍함.
     * 정적 사이트 생성 및 ISG
          + 정적 사이트 생성 및 증분 정적 생성 지원을 통해 SEO를 개선하고 사용자 로드 시간을 단축함.
     * 문서 요소: Title {}, Link {}, Stylesheet, Meta {}
          + HTML 문서 객체와 상호작용할 수 있는 특별한 요소를 제공하여 추가 JavaScript 없이 문서 속성을 설정할 수 있음.
     * 물음표 오류 처리
          + Element가 이제 Option가 아닌 Result로 전환되어 Rust의 일반적인 오류 처리를 구성 요소에서 사용할 수 있음.
     * 동기 prevent_default
          + 모든 이벤트 처리를 동기적으로 수행할 수 있도록 개선하여 dioxus_prevent_default 속성을 더 이상 필요로 하지 않음.
     * onresize 및 onvisible 이벤트 핸들러
          + 요소의 크기와 가시성을 추적할 수 있는 특별한 핸들러를 제공하여 JavaScript 없이 풍부한 상호작용을 구현할 수 있음.
     * 하이브리드 WGPU 오버레이
          + Dioxus 데스크탑의 ""자식 창"" 기능을 통해 기존 창에 네이티브 Dioxus 앱을 오버레이로 통합할 수 있음.
     * 웹, iOS 및 Android 번들 지원
          + dx 번들에 웹 및 모바일 지원을 추가하여 다양한 타겟에 번들링할 수 있음.
     * CI / CLI를 위한 JSON 출력
          + CLI의 JSON 출력 모드를 제공하여 로깅을 JSON 형식으로 받을 수 있음.
     * 새로운 시작 템플릿
          + 크로스 플랫폼 앱을 위한 세 가지 새로운 시작 템플릿을 제공함.
     * 야간 문서, 튜토리얼 및 새로운 가이드
          + 문서와 튜토리얼을 대대적으로 개편하여 기본적인 내용을 다루고 배포에 중점을 둠.
     * 인플레이스 바이너리 패칭 미리보기
          + Rust 코드의 핫 리로딩을 추가하기 위한 실험을 진행함.
     * 작은 변경 사항
          + 시스템 트레이 지원, 사용자 정의 이벤트 루프, dioxus-document 및 dioxus-history 분리, eval API 단순화 등 다양한 작은 변경 사항을 포함함.
     * 0.5에서 0.6으로 업그레이드
          + 몇 가지 API 변경 사항이 있지만 대부분의 경우 쉽게 수정할 수 있음.
     * 결론
          + 이번 릴리스는 많은 문제를 해결하고 다양한 기능을 개선하여 Dioxus 0.6을 가장 완성도 높은 릴리스로 만듦.
          + 앞으로는 새로운 기능보다는 튜토리얼 비디오 제작, 문서 작성, 버그 수정, 성능 개선 및 커뮤니티와의 협업에 중점을 둘 계획임.

   최근에 tauri 사용중이였는데 이것도 한번 써봐야겠네요

   Dioxus - React에서 영향받은 Rust용 크로스플랫폼 UI 라이브러리
   Dioxus 0.5 - Rust로 개발하는 웹, 데스크톱, 모바일 앱

        Hacker News 의견

     * 한 사용자는 새로운 릴리스를 시도한 경험을 공유하며, cargo install을 사용해 프로젝트를 생성하고 dx serve를 실행했지만 컴파일러 오류가 발생했음을 언급함. 표준 Rust 워크플로우를 사용했다면 더 쉽게 디버깅할 수 있었을 것이라고 생각함. v를 눌러 자세한 로그를 활성화할 수 있지만, 추가적인 명확한 정보는 제공되지 않음.
     * 다른 사용자는 매 6개월마다 Rust GUI 프레임워크를 시도하지만, 데모나 플레이그라운드 다운로드 시 오류가 발생한다고 언급함. 장기적인 투자 결정을 신중히 해야 한다고 생각함.
     * Dioxus는 자바스크립트를 최소한으로 사용하면서 크로스 플랫폼 기능을 제공할 수 있는 유일한 웹 플랫폼 기술 도구라고 언급함. WGPU 렌더링 스택의 발전을 긍정적으로 평가함.
     * Dioxus는 생태계가 부족하며, 컴포넌트 라이브러리가 없다고 언급함. 가상 DOM에 대한 확신도 부족함. 경쟁자인 Leptos를 추적하고 사용 중임.
     * 서버 측에서 Dioxus를 사용 중이며, 컴포넌트를 작성하는 방식과 개발자 경험이 매우 좋다고 평가함.
     * Lustre를 발견하고 채택한 후, The Elm Architecture 외에는 사용할 생각이 없다고 언급함. Rust의 Iced를 사용해 시나리오 편집기 프로토타입을 구축 중이며, System76이 Cosmic을 구축하는 데 사용하고 있어 신뢰함.
     * 새로운 기술 프레임워크가 가장 유망하다고 평가하며, 성공하면 다른 모든 프레임워크를 대체할 수 있을 것이라고 언급함. 성능에 중점을 두고 있으며, Rust가 보안과 성능의 기초를 제공함.
     * Dioxus가 벤처 자본을 유치했으므로, 미래를 걸기 전에 주의해야 한다고 언급함. 저작권 양도나 CLA가 필요한지, 기여자 중 몇 명이 급여를 받는지에 대한 정보가 부족함.
     * 포스트 제목의 대비가 페이지 배경과 더 잘 어울릴 수 있도록 개선할 수 있다고 제안함. Qt의 현재 위치와 접근성, HiDPI 화면 처리에 대한 비교를 질문함. C++와 Python 외의 언어에 대한 품질 바인딩이 부족하다고 느끼며, 더 나은 바인딩과 도구가 있다면 더 인기가 있을 것이라고 언급함.
     * 새로운 핫 리로딩 기능이 놀랍다고 평가하며, 다른 Rust 웹 프레임워크에서 UI 업데이트를 기다리는 것이 큰 문제였다고 언급함.
"
"https://news.hada.io/topic?id=18255","파킨슨의 법칙: 실재하는 법칙 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         파킨슨의 법칙: 실재하는 법칙 활용하기

    파킨슨의 법칙: 실제로 존재하므로 활용할 것

     * 파킨슨의 법칙: ""일은 그 완료를 위해 주어진 시간을 채우도록 확장된다""는 법칙임. 이 법칙은 직관에 반하지만, 실제로 많은 진실을 담고 있음. 프로젝트에 기한이 없으면, 심지어 자가 설정한 기한이라도, 필요 이상으로 오래 걸리며 기능 추가와 범위 확장이 발생할 수 있음.
     * 아이언 트라이앵글: 프로젝트의 세 가지 주요 제약 조건을 나타냄.
          + 범위: 완료해야 할 작업.
          + 자원: 작업을 수행할 수 있는 사람과 도구.
          + 시간: 작업을 완료하기 위한 시간.
          + 이 세 가지 중 하나를 변경하면 다른 것들에 영향을 미침. 예를 들어, 더 많은 작업을 원한다면 더 많은 사람이나 시간이 필요함.
     * 기한의 중요성: 기한이 없으면 팀의 프로젝트 범위가 주어진 시간을 채우도록 확장됨. 기한은 명확한 템포와 리듬을 강요하며, 근본적으로 일을 진행시킴. 예를 들어, 언제든지 작성할 수 있는 설문조사보다 내일까지 작성해야 하는 설문조사가 훨씬 더 높은 응답률을 얻음.
     * 효과적인 리더십을 위한 템포와 리듬: 기한이 있는 작업은 실제적이고 구체적인 진전을 강요함. 예를 들어, 프로토타입이 한 달 걸릴 것이라고 생각한다면, 팀에게 주말까지 무엇을 전달할 수 있는지 도전해보게 할 것.
     * 주간 보고의 중요성: 사람들은 일주일 동안 할 수 있는 일을 항상 과소평가함. 팀, 프로젝트, 작업에 주간 보고 리듬을 주입하여 팀이 계획하고 실행하며 주간 진행 상황을 업데이트로 작성해 공유하도록 함. 이 규율은 에너지를 주며, 사람들이 작업에 대해 생각하는 방식을 완전히 바꿈.
     * 기한의 힘: 기한은 인간을 움직이고 기분 좋게 만드는 지식을 가지고 우아하게 사용될 때 강력한 도구임. 파킨슨의 법칙은 실제로 존재하며, 조직이 클수록 더 강하게 싸워야 함. 이 싸움에서 성공하면 수만 명의 조직 규모에서도 빠르게 성장하고 배송할 수 있음. 그렇지 않으면 어느 날 스타트업이 지역 세무서의 소프트웨어 버전으로 변한 것을 보게 될 것임. 기한을 설정할 것.

        Hacker News 의견

     * 새로운 직장에서 상사가 작업 속도를 맞추라고 했던 경험이 있음. 결국 월요일 오전에 일주일치 일을 끝내고 나머지 시간은 탐색 프로젝트에 사용했음. 잘못된 것을 빠르게 배송하는 것은 잘못된 것을 배송하는 것일 뿐임.
          + $5M 문제를 $1M으로 해결하려다 결국 $10M이 드는 경우를 봤음. 팀이 서둘러 선택한 ""지름길""이 결국 ""우회로""가 되어 프로그램을 지연시킴.
     * 대형 클라우드 제공업체에서 일했을 때 모든 것이 느리게 진행되는 것을 경험했음. 스타트업에서의 시간/재정 압박과는 반대였음. 파킨슨의 법칙의 도미노 효과를 목격했음.
          + 조직이 확장된 타임라인을 설정하고, 이는 결국 더 많은 낭비로 이어짐.
     * 임의의 마감일 설정은 팀을 프로젝트 붕괴로 이끌 수 있음. 작은 증분을 정의하고, 문제를 해결하는 것이 더 나은 방법임.
          + 마감일이 필요하지 않으며, 세밀한 관여와 워크플로우에 집중하는 것이 중요함.
     * 사람들은 각기 다른 동기에 의해 움직임. 압박, 보상, 문제 해결 등이 있음. 인위적인 마감일이나 보상은 오히려 동기를 저하시킬 수 있음.
     * 마감일은 일부 사람들에게 효과적일 수 있지만 보편적인 해결책은 아님. 파킨슨의 법칙을 설명하고 다양한 해결책을 제시하는 일반 이론이 필요함.
     * 파킨슨의 법칙을 관리자에게 가르치면 비현실적인 마감일을 설정하게 되어 모두에게 해로울 수 있음. 개발자들이 작업에 관심을 갖도록 하는 것이 중요함.
     * 마감일의 문제는 다른 사람들의 우선순위를 반영한다는 것임. 마감일이 효율적인 우선순위와 일치하면 필요하지 않음. 외부에서 부과된 마감일은 작업 분배를 변경시킴.
     * 작업에 대한 대략적인 추정치를 설정하고 계획하는 것이 생산성과 스트레스 수준에 긍정적인 영향을 미침. 타임박싱과 우선순위 설정이 중요함.
     * 적절한 환경이 없으면 긴급한 마감일은 해로울 수 있음. 실수를 학습 기회로 보고, 팀의 노력을 공유된 비전과 일치시키는 것이 필요함.
     * 두 가지 시나리오가 있음: 지속적인 압박으로 인한 번아웃과 개인 도전으로서의 마감일 설정. 후자는 분석 마비를 피하고 집중을 유지하는 데 도움이 됨.
"
"https://news.hada.io/topic?id=18169",""가정용 BGP: 가정에 DIA 회선 설치"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""가정용 BGP: 가정에 DIA 회선 설치""

     * 배경
          + AS54316 네트워크는 AP Foundation의 서비스를 지원하며, 뉴욕의 데이터센터에 기반을 두고 있음.
          + 가정에서의 물리적 인프라 호스팅은 기후 제어, 전력, 보안, 네트워크 연결 등 여러 도전 과제를 제시함.
          + 특히 네트워크 연결은 2개월 이상, 2.5마일 이상의 광섬유, 여러 경찰관과 10명 이상의 통신 엔지니어가 필요했던 흥미로운 여정이었음.
     * 해결책 찾기
          + ""전용 인터넷 액세스(DIA)""라는 개념을 발견함.
          + DIA는 ISP가 중앙 사무소(CO)에서 건물까지 전용 광섬유 쌍을 제공하며, 대역폭, 가동 시간, 지연 시간, 지터 등에 대한 보장을 제공함.
          + DIA는 비용이 많이 들지만 BGP 피어링을 허용함.
     * 솔루션 구매
          + Verizon Enterprise와 Lightpath를 포함한 여러 주요 연결 제공업체에 문의함.
          + 일부 제공업체는 주거용 건물과의 작업을 거부하거나 높은 월 최소 요금과 긴 건설 기간을 요구함.
          + Verizon Enterprise를 선택함. 그 이유는 이미 ""네트워크에 연결되어 있음""을 주장했기 때문임.
     * 회로 설치
          + 설치 과정은 약 2개월이 걸렸으며, 10명 이상의 Verizon 엔지니어/기술자와 5번의 디스패치가 필요했음.
          + Verizon Telecom과 Verizon Business로 나뉘어 작업이 진행됨.
          + 각 디스패치에서 사이트 조사, 광섬유 드롭, 네트워크 인터페이스 장치(NID) 설치, 광섬유 접합 팀, NID #2 설치가 이루어짐.
     * 활성화
          + 마지막 NID 설치 후 IP 세부 정보와 BGP 세션 피어링 세부 정보가 제공됨.
          + Verizon의 인프라에 대한 몇 가지 흥미로운 정보가 제공됨.
     * 기타 참고 사항 (몇 개월 후)
          + ""포트"" 요금에 대한 추가 연방 보편 서비스 기금 세금이 있음.
          + Verizon의 헬프데스크는 대부분 해외에 있으며, 간헐적인 문제를 진단하기 어려울 수 있음.
          + SLA는 100%를 보장하지만, 몇 번의 순간적인 플랩과 약 30분의 중단이 있었음.

        Hacker News 의견

     * SLA는 100%라고 명시되어 있지만, 완벽함을 기대하지 말라는 의견이 있음. SLA는 서비스 중단 시 환불을 요청할 수 있는 재정적 약속일 뿐, 실제 가동 시간을 보장하는 것은 아님. Verizon의 경우 100% SLA를 제공하지만, 실제로는 높은 가용성을 위해 설계되지 않았음.
     * 특정 ISP는 전용 서비스를 제공하며, 설치 비용과 월 요금이 추가됨. 대부분의 비용은 SLA의 위험을 커버하는 데 사용됨. BGP를 통해 다중 홈을 제공하는 것이 더 나은 복원력을 제공한다고 생각함.
     * 몇몇 사람들만이 실제로 가정에 광섬유를 설치할 수 있었음. 하지만 높은 월 요금이 자동차 할부금과 비슷하다는 점이 아쉬움.
     * FTTH(가정용 광섬유)의 경우, 각 가입자가 자신의 대역폭을 가지며 다른 가입자와 중복되지 않는다고 생각했음. PON(수동 광 네트워크)이 어떻게 작동하는지 이해하기 어려움.
     * 데이터 센터에 라우터를 설치하고 IPsec 또는 WireGuard를 통해 집과 연결하는 방법을 제안함.
     * Verizon이 설치 비용을 별도로 청구하지 않은 것에 놀라움을 표함. 설치 비용을 회수하는 데 오랜 시간이 걸릴 것이라고 생각함.
     * 상업용 건물에 DIA를 설치하는 과정과 유사하다고 설명함. ISP가 무료로 설치해줄 수 있었지만, 직접 비용을 지불했음. 고객 서비스의 질이 매우 뛰어났음.
     * 회사가 모든 비용을 지불한 것에 놀라움을 표하며 부러움을 느낌.
     * Verizon이 설치 후 높은 수익을 올릴 것이라고 추측함. 직원과 경찰이 일주일 동안 작업했음에도 불구하고 비용을 감수함.
     * 자신의 설정을 설명하며, DIA 연결과 백업 VPN을 사용하고 있음. ISP와의 소통이 어려웠지만, 웹 티켓 시스템이 충분히 좋음. ISP가 도시를 서비스 지역으로 나누는 것이 합법적인지 이해하기 어려움.
"
"https://news.hada.io/topic?id=18132","LimeJourney - 오픈소스 고객 인게이지먼트 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LimeJourney - 오픈소스 고객 인게이지먼트 플랫폼

     * AI 기반의 오픈소스 고객 참여 플랫폼으로, 데이터를 활용해 대규모로 개인화된 사용자 여정을 설계할 수 있도록 지원
          + Customer.io 의 오픈소스 대체제
     * 기존 도구의 문제점: 높은 비용, 기존 커뮤니케이션 스택 전체를 변경해야 하는 어려움
     * LimeJourney는 다음 두 가지 원칙을 중심으로 설계됨:
          + 오픈소스 접근성: 개발자와 소규모 팀이 무료로 사용 가능. 관리형 솔루션을 선호하는 경우 클라우드 버전도 제공
          + 기존 통합 지원 (BYOI): 기존 도구와의 통합 지원, 전체 스택 교체 불필요

주요 기능

     * AI 기반 통찰: AI 모델을 사용해 고객 이해를 지원
     * 비주얼 여정 빌더: 직관적인 드래그 앤 드롭 인터페이스로 복잡한 사용자 여정 생성 가능
     * 동적 세분화: 사용자 이벤트나 속성을 기준으로 세그먼트 생성 가능
          + 예: ""최근 30일간 구매하지 않은 사용자""
     * 통합 기능: 기존 도구 및 서비스와 연결 가능, 데이터 수집 관련 통합 기능 지속 추가 중

LimeJourney의 기술 스택

     * 풀스택 모노레포 애플리케이션 (TypeScript로 작성)
     * 주요 기술:
          + Turbo: 모노레포 관리
          + Next.js: 웹 앱 개발
          + TailwindCSS: 스타일링
          + Express: API 개발
          + TSOA: API 경로 및 OpenAPI 문서 생성
          + PostgreSQL: 주요 데이터 저장소
          + Redis: Journey-Trigger 매핑 관리용 KV 저장소
          + ClickHouse: 대규모 이벤트/엔터티 데이터 관리 및 실시간 세분화
          + Temporal: 비주얼 여정 빌더에서 생성된 여정을 실행
          + Kafka: 중앙 이벤트 버스 (Upstash에서 호스팅)

백엔드 아키텍처

  핵심 구성 요소

     * 이벤트 스트리밍 백본 (Kafka 기반)
          + 사용자 및 시스템 이벤트 고속 처리
          + 시스템 내 모듈 간 비동기 통신 지원
          + 이벤트 소싱을 통한 데이터 일관성과 재생 가능성 제공
     * 실시간 세분화 엔진
          + ClickHouse의 고성능 쿼리 기능 활용
          + 사용자 속성 및 행동에 기반한 동적 세그먼트 생성
          + 대규모에서도 빠른 세그먼트 계산 가능
     * 여정 오케스트레이션
          + Temporal 기반으로 복잡한 사용자 여정 관리
          + 워크플로 신뢰성 보장, 실패 시 복구 가능
          + 여정 일시 중지, 재개 및 수정 지원
     * 엔터티 관리
          + 사용자 프로필 및 속성 관리
          + 엔터티 변경 이벤트 발행
          + 플랫폼 전반에서 통합된 사용자 데이터 제공

  데이터 흐름 및 상호작용

    1. 사용자 행동(예: 페이지 조회, 구매)이 이벤트를 생성해 Kafka로 전달
    2. 이벤트는 ClickHouse에 저장되어 대규모 데이터 분석 지원
    3. 세분화 엔진이 최신 이벤트와 데이터를 기반으로 실시간 사용자 세그먼트를 업데이트
    4. 세분화 변경 또는 특정 이벤트가 여정 오케스트레이션을 트리거
    5. Temporal이 여정을 관리하며 다음과 같은 작업 수행:

     * 사용자 데이터 및 이벤트 기록 조회
     * 현재 세분화 상태 확인
     * 외부 작업 트리거(예: 이메일, 푸시 알림 발송)

    6. 주요 작업 또는 상태 변경 시 새 이벤트를 생성, 시스템에 다시 전달

   kafka가 이런 대용량 이벤트에 적합할까요?

   비동기 처리가 필요해서 쓰는거니 적합하지 않을까요?
"
"https://news.hada.io/topic?id=18253","Show HN: Quantus – 금융 모델링을 위한 LeetCode","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: Quantus – 금융 모델링을 위한 LeetCode

     * 플랫폼 소개
          + Quantus는 재미있고 직관적이며 실용적인 방식으로 금융 용어와 공식을 학습할 수 있는 플랫폼임.
          + 스프레드시트 인터페이스를 통해 실제 문제 해결을 통해 금융을 실습할 수 있음.
          + AI를 활용하여 실시간 시장 데이터를 제공하고 학습 진행에 맞춰 적응하는 환경을 제공함.
     * 금융 학습의 혁신
          + Quantus는 금융 모델링을 단계별 힌트와 가이드를 통해 익힐 수 있는 차세대 금융 학습 플랫폼임.
          + Excel과 유사한 환경에서 금융 모델링을 실습할 수 있으며, 핵심 아이디어를 교차 참조하여 명확한 사고 지도를 구축할 수 있음.
          + AI 지원 튜터링과 진행 추적 기능을 제공함.
     * 사용자 후기
          + ""변혁적인 학습 경험"" - Quantus는 개념을 쉽게 이해할 수 있도록 디자인되어 있으며, 초보 지식을 가진 사람도 쉽게 학습할 수 있도록 도와줌.
          + ""금융 모델링을 위한 최고의 플랫폼"" - 복잡한 개념을 접근 가능하고 흥미롭게 만드는 혁신적인 접근 방식을 제공함.
          + ""금융 모델링 경험의 재정의"" - 웹 브라우저에서 Excel과 같은 경험을 제공하며, 직관적이고 세련된 UI로 모든 수준의 사용자가 명확하게 학습할 수 있도록 함.
     * 팀 소개
          + Quantus는 헤지 펀드 배경을 가진 역동적인 팀으로 구성되어 있음.

        Hacker News 의견

     * 이 도구는 기본적인 비즈니스 모델링에 유용하며, 개인 포트폴리오 계획을 위한 버전도 보고 싶음
          + 위험 매개변수 설정, 특정 브로커리지에서 ETF 선택, 리밸런서 도구 사용 등의 기능이 필요함
     * 이 아이디어가 정말 멋지다고 생각하며, 데이터/비즈니스 팀에서 유용하게 사용할 수 있을 것 같음
          + 기술적 피드백으로는, 수식을 선택할 때 엑셀처럼 키보드 화살표를 사용할 수 있으면 좋겠음
          + 튜토리얼/미니 과제를 더 어렵게 만들어야 하며, 실제 재무제표처럼 몇 가지 함정이 있는 것이 좋음
          + 모듈 내의 다양한 미니 과제가 동일한 엑셀 시트에서 작동하면 좋겠음
     * LeetCode는 인터뷰 준비용으로 많이 사용되며, 학습은 부수적인 효과임
          + 이 질문들이 인터뷰에서 나오는 질문과 유사한지, 아니면 일반 학습용인지 궁금함
     * 다음 라이브러리 추가 계획이 무엇인지 궁금하며, VC 용어 시트, 전환사채/SAFE 노트 변환, 기술 경제 분석에 대한 릴리즈를 기대함
     * 금융 서비스에서 20년 가까이 일한 사람으로서, 경험 많은 거래자들이 어떻게 몇 가지 이유로 거래를 평가하는지 흥미로움
          + 엑셀 모델을 구성하는 것보다 무엇에 집중할지 아는 것이 어려움
     * 내부적으로 사용하고 싶으며, 비펀드가 여러 자산 클래스에 걸쳐 투자 가능하고 금융 도구를 유연하게 사용할 수 있어 유용할 것 같음
     * ChatGPT와 Claude로 금융 모델링 연습을 시도했으나, 흥미로운 데이터를 찾기 어려웠음
          + 비즈니스 용어와 기능 사용에 대한 지식 테스트인지, 아니면 통찰력을 얻기 위한 충분한 데이터가 있는지 궁금함
     * 파생상품에 대해 배우고 싶어 가입했음
          + 금융 모델링을 가르치는 것이 성장하는 시장인지 궁금하며, 그렇다면 그 이유가 무엇인지 궁금함
          + 아니라면, 이 공간을 테스트하여 향후 제품을 위한 아이디어인지 궁금함
     * 대상 청중이 누구인지 궁금함
          + CS 배경을 가진 사람이 금융을 배우고 싶지만 수학과 통계에 깊이 빠지고 싶지 않을 때 좋은 자원인지, 아니면 퀀트로 진입하고 인터뷰를 위한 개념을 배우고 싶은 사람을 위한 것인지 궁금함
     * Wall Street 진입을 위한 PDF를 읽으며 보낸 많은 저녁과 주말을 떠올리게 함
          + 정말 멋지다고 생각함
"
"https://news.hada.io/topic?id=18197","트리 계산법트리 계산법

Tree Calculus의 개요

     * Tree Calculus는 계산의 본질을 포착하는 간단한 연산자와 의미론을 가진 투링 완전한 시스템임.
     * 함수의 직렬화와 역직렬화가 가능하며, 다양한 형식으로 컴파일할 수 있음.
     * 프로그램 분석, 타입 체크, 컴파일, 최적화 등을 프로그램 내에서 수행할 수 있는 능력을 가짐.

함수와 메타이론의 민주화

     * 문자열 조작 함수의 예시를 통해 Tree Calculus의 기능을 설명함.
     * 타입 체크는 함수 호출로 간단히 수행 가능하며, 최적화도 가능함.
     * 최적화 전후의 평가 단계 수와 트리 노드 수를 비교하여 성능을 확인할 수 있음.

Intensionality의 장점

     * 프로그램 분석을 위한 인용 없이도 프로그램을 반영할 수 있는 능력을 가짐.
     * 정적 및 동적 체크를 동일한 함수 호출로 수행할 수 있음.
     * 프로그램 자체에서 컴파일 및 배포가 가능하여 강력한 REPL 환경을 제공함.

Tree Calculus의 강력함

     * Tree Calculus는 투링 완전하며, 프로그램과 그 인코딩 간의 구분이 없음.
     * 데이터 인코딩과 알고리듬이 비대칭적으로 최적화되어 있음.
     * 일반적인 리스트 조작 함수는 수백 개의 노드를 가진 이진 트리로 표현됨.

간결함

     * Tree Calculus의 추상 구문은 단순하며, 값은 라벨이 없는 이진 트리로 표현됨.
     * JSON, UTF8 등의 표준을 사용하지 않고도 다양한 개념을 신속하게 부트스트랩할 수 있음.
     * 교육용으로 적합하며, 점진적으로 추상화를 도입하고 모델링할 수 있음.

이식성

     * Tree Calculus의 구문과 의미론은 최소화되어 있으며, 플랫폼에 종속되지 않음.
     * 모든 플랫폼이나 프로그래밍 언어에서 인터프리터를 쉽게 작성할 수 있음.
     * Tree Calculus의 전체 기능을 어디서든 부트스트랩할 수 있어 이질적인 시스템에서 코드로서의 설정 언어로 적합함.

        Hacker News 의견

     * Tree Calculus는 매우 흥미롭고 이 웹사이트 외에도 많은 함의가 있음. 그러나 웹사이트가 창작자이자 저자인 Prof. Barry Jay를 언급하지 않는 점이 아쉬움. 그의 책은 GitHub에서 확인 가능함
          + GitHub 링크
     * Tree Calculus는 매우 멋진 개념으로 보임. 하지만 더 쉽게 이해할 수 있는 설명이 필요함. 초보자를 위한 버전이 있는지 궁금함
     * 홈페이지에서 ""Democratizing Functions""와 ""Democratizing Metatheory""라는 문구를 사용하고 있음. 이 단어의 사용이 적절한지 의문이 듦
     * Tree Calculus의 논리적 축소 규칙을 이해하기 위해 시각적으로 표현한 그림을 만들어 봄. 시각적 사고를 하는 사람들에게 유용할 수 있음
          + 시각화 링크
     * 이 내용을 이해하는 척하며 투표하는 사람들이 있는지 궁금함
     * Tree Calculus가 Lisp나 Forth와 다른 점을 설명해 줄 수 있는지 궁금함. 비판이 아닌 이해를 위한 질문임
     * Python 코드 예시를 통해 Tree Calculus의 기본 개념을 설명함
          + Leaf, Stem, Fork와 같은 기본 구조를 정의하고, apply 함수로 논리를 구현함
          + show 함수를 통해 결과를 출력함
     * Z 조합자를 SKI에서 Tree Calculus로 변환해 보려는 시도를 함. 람다 계산법 예제를 사용하여 트리를 출력함
     * Tree Calculus 규칙을 이진 트리의 패턴 매칭으로 시각화한 결과를 공유함
          + GitHub 링크
     * Johannes가 Tree Calculus를 실험하고, GitHub에 있는 자신의 책에서 암시적으로만 언급된 가능성을 명시적으로 보여주는 것이 매우 좋음. 이제 타입이 있는 Tree Calculus가 생겨 블로그를 시작함
"
"https://news.hada.io/topic?id=18201","Limbo - Rust로 완전히 새롭게 작성된 SQLite","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Limbo - Rust로 완전히 새롭게 작성된 SQLite

     * Limbo는 메모리 안전성을 제공하는 Rust로 SQLite를 재구현하는 실험적 프로젝트
          + SQLite의 임베디드 특성을 좋아하지만, 더 개방적인 개발 모델을 원해 libSQL 프로젝트 시작
     * SQLite를 포크한 이유: 새로운 기능을 쉽게 통합할 수 있고, 기존 코드와의 호환성 유지 가능
          + 단점: SQLite의 테스트 스위트가 독점적이고 C로 작성되어 있어 코드 진화가 어려움
     * 새로운 접근 방식
          + 벡터 검색 기능 추가를 통해 SQLite의 한계를 경험
          + SQLite를 처음부터 다시 작성하여 호환성을 유지하면서도 더 공격적인 기능 추가 가능성 탐색
     * 다음 단계
          + Limbo를 공식 Turso 프로젝트로 전환
          + SQLite와 동일한 신뢰성을 유지하면서 메모리 안전성을 제공하는 새로운 아키텍처 구축 목표
     * SQLite의 신뢰성에 도전
          + 결정론적 시뮬레이션 테스트(DST)를 통해 높은 신뢰성 확보
          + Antithesis와 협력하여 시스템 수준의 DST 프레임워크 사용
     * 현재 상태
          + 완전 비동기 I/O: Limbo는 완전 비동기 설계로, SQLite의 동기 인터페이스 문제 해결
          + WASM을 위한 설계: WASM 환경에서의 사용을 고려한 설계
          + 성능: 많은 작업에서 SQLite와 동등하거나 더 빠른 성능
          + 단순성: 현대 환경에 덜 중요한 기능 제거로 더 나은 사용자 경험 제공
     * 추가 정보
          + Limbo는 MIT 라이선스로 GitHub에서 제공
          + SQLite의 약속을 다음 단계로 발전시키고자 하는 임베디드 데이터베이스 구축에 관심 있는 사람들을 초대함

   기여하던 프로젝트가 hacker news에 나오니 신기하네요 ㅎㅎ

        Hacker News 의견

     * SQLite는 코드 품질과 엄격한 테스트로 인해 재작성할 필요가 없는 프로젝트로 보임
          + 다른 C 코드가 먼저 재작성되면 좋겠다는 의견이 있음
     * SQLite가 ""오픈 기여""가 아니라는 논의는 기여를 받는다는 것이 항상 기여를 수용한다는 의미가 아님을 간과함
          + SQLite는 기여를 위한 절차가 있으며, 제안된 기능을 구현하는 방식임
          + Litestream과 LiteFS 같은 SQLite 생태계의 다른 프로젝트들도 비슷한 기여 정책을 가짐
     * SQLite3에서 LibSQL로의 포크 초기 발표에 대해 부정적이었음
          + SQLite3의 테스트 스위트가 독점적이기 때문에 포크가 실패할 가능성이 높다고 생각했음
          + 그러나 메모리 안전 언어로의 재작성과 같은 큰 제품이 있다면 포크가 의미가 있다고 봄
     * 최대 성능을 위해 WAL 모드를 선택해야 하며, POSIX 권고 잠금을 비활성화해야 함
          + ""wal2"" 모드가 프로젝트의 레이더에 있는지 궁금해하는 의견이 있음
     * SQLite의 테스트 스위트가 독점적이라는 사실을 처음 알았다는 의견이 있음
          + Android가 비슷한 방식으로 구축되었지만, 이는 다른 문제임
     * ""async IO"" 섹션의 논리를 받아들이지 않음
          + SQLite에 비동기 인터페이스를 추가하기 위해 재작성할 필요가 없다고 봄
          + SQLite의 동기 인터페이스 문제는 IO를 기다리는 동안 스레드가 유휴 상태로 남는 것임
          + SQLite는 저장소에 매우 가깝게 실행되도록 설계되어 IO 차단이 매우 짧거나 없을 수 있음
     * 초기 단계에 있는 프로젝트라는 의견이 있음
          + Python과 Limbo를 사용한 코드 예시가 제공됨
     * Fil-C로 컴파일하면 메모리 안전한 SQLite를 얻을 수 있음
          + 약간의 변경만 필요하며, 테스트 스위트를 거의 통과함
     * SQLite는 약 156,000줄의 코드와 92,000줄의 테스트 코드로 구성되어 있음
     * Rust 변형의 DO-178B 인증은 고려되지 않는 것으로 추정됨
     * ""Limbo""라는 이름은 AT&T의 Inferno 운영 체제를 위한 포스트-C/UNIX 언어에서도 사용됨

   SQLite는 코드 품질과 엄격한 테스트로 인해 재작성할 필요가 없는 프로젝트로 보임 -> sqlite에 대한 이런 평가는 정말 부럽고 멋지네요.

   DO-178B 프로세스를 따르고 있고 MC/DC 코드 커버리지 100%를 달성했다고 합니다.
   SQLite의 알려지지 않은 이야기
"
"https://news.hada.io/topic?id=18210","Denoeno 2.1

     * ESM import 구문으로 WASM 바로 불러올 수 있음
          + import { add } from './add.wasm';
     * LTS 지원 시작
          + 6주마다 새로운 마이너 릴리스와 거의 매주 새로운 패치를 출시 예정
     * 더 좋아진 Node.js / npm 호환성
          + package.json에 ""type"": ""commonjs"" 기재 시 .js 파일을 CommonJS로 해석
     * 그 밖의 다양한 개선 사항 포함
"
"https://news.hada.io/topic?id=18182","Google의 최첨단 양자(quantum) 칩, Willow","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Google의 최첨단 양자(quantum) 칩, Willow

     * Google이 새롭게 개발한 양자 칩 Willow는 오류율 감소와 성능 향상을 통해 대규모 양자 컴퓨터 구축에 한 발짝 더 다가섬
     * Willow는 기존 슈퍼컴퓨터로는 10제타년(10^25년)이 걸리는 계산을 단 5분 만에 완료하여 양자 컴퓨팅의 잠재력을 입증함.

주요 성과 및 기능

     * 양자 오류 수정의 혁신:
          + 더 많은 큐빗을 사용하면서 오류율을 지수적으로 감소시키는 데 성공
          + 양자 오류 수정에서 중요한 ""임계 이하(below threshold)"" 성과 달성
          + 실시간 오류 수정 구현으로 안정성과 신뢰성 확보
     * 압도적인 계산 성능:
          + 랜덤 회로 샘플링(RCS) 벤치마크에서 기존 슈퍼컴퓨터 대비 수십억 배 빠른 속도로 작업 수행
          + 105개의 큐빗으로 현재 최고의 양자 칩 성능 기록
     * 새로운 제조 공정:
          + 최첨단 제조 시설에서 설계 및 제작
          + 개별 구성 요소와 시스템 통합의 품질을 모두 극대화

Willow의 기술적 진보

  1. 양자 오류 수정

     * 큐빗 배열(3x3, 5x5, 7x7)로 점진적 테스트를 수행하며 오류율을 절반으로 줄이는 데 성공
     * ""양자 시스템이 큐빗 수 증가에 따라 더 강력해지는"" 성과를 입증

  2. RCS 벤치마크

     * 랜덤 회로 샘플링:
          + 양자 컴퓨터가 기존 컴퓨터로 해결할 수 없는 작업을 수행할 수 있는지 검증
          + Willow는 RCS에서 역대 최고의 성능을 기록하며 ""양자 우위""를 입증

  3. 설계 및 제조 품질

     * T1 시간(큐빗이 자극을 유지하는 시간) 약 100마이크로초로 5배 개선
     * 고품질 큐빗과 게이트 조합으로 시스템 전반의 성능 극대화

Willow의 가능성과 미래

  상업적 응용 가능성

     * Willow는 ""실용적이고 상업적으로 유용한"" 양자 알고리즘 개발 가능성을 열었음
     * 다음 목표는 양자 컴퓨터가 실제 문제를 해결하는 첫 유용한 계산을 입증하는 것

  양자 컴퓨팅과 AI의 시너지

     * AI 훈련 데이터 생성, 새로운 약물 발견, 에너지 효율적 배터리 설계 등에서 핵심 역할 기대
     * 양자 컴퓨팅의 확장성과 성능이 AI의 발전을 가속화할 것으로 전망

   Willow는 양자 컴퓨팅의 상업적 활용 가능성을 입증하며 과학, 에너지, AI 등 다양한 분야에서 혁신을 이끌어 갈 플랫폼으로 자리 잡을 것임.

        Hacker News 의견

     * 양자 컴퓨팅에 대한 중요한 발표임. 256비트 키를 사용하는 비양자 저항 알고리즘은 약 2500개의 큐비트가 필요함. 100개 이상의 큐비트를 안정적으로 보여주는 것은 많은 사람들이 불가능하다고 생각했던 것임. 양자 컴퓨팅은 많은 것을 변화시킬 수 있어 사람들이 이를 무시하려는 경향이 있음. AI와 데이터 보안이 크게 달라질 수 있음.
     * API가 열렸으나 요청을 보내기 300ms 전에 응답이 돌아옴. 이를 처리하기 위해 try{}와 predestined{} 블록을 사용해야 하는지, 아니면 Bootstrap Paradox 라이브러리를 사용해야 하는지 고민 중임.
     * 양자 계산이 여러 평행 우주에서 발생한다는 개념이 있음. 증거와 결론 사이에 많은 간극이 존재함. 양자 컴퓨팅 전문가들이 다른 우주의 용량을 빌려 계산한다고 생각하는지 궁금함.
     * 다른 사람들이 이 발표의 중요성을 판단하기 위해 Scott Aaronson의 블로그를 기다려야 하는지 궁금함.
     * Willow가 5분 이내에 수행한 표준 벤치마크 계산은 오늘날 가장 빠른 슈퍼컴퓨터가 10세틸리언 년이 걸리는 계산임.
     * 양자 계산이 여러 평행 우주에서 발생한다는 개념이 있음. 다른 우주에 엔트로피를 주입하는 것인지, 계산 시간으로 몇 개의 우주가 있는지 계산할 수 있는지 궁금함. 우리 우주의 양자 칩을 냉각해야 하는데, 다른 우주들은 어떻게 냉각하는지 궁금함.
     * 양자 컴퓨팅의 수학적 기초를 엄격히 배우기에 좋은 시기임. Quantum Formalism Academy에서 자율 학습 가능함.
     * Willow에서 더 많은 큐비트를 사용할수록 오류가 줄어들고 시스템이 더 양자화된다는 주장은 매우 놀라운 주장임. 이는 양자 오류 수정의 역사적 경험과 모순됨.
     * UCSB에서 Julian을 만났음. 그는 매우 똑똑하고 친절하며 외향적이었음. 그의 연구 발표를 보게 되어 기쁨.
     * Google Research 블로그에 따르면, 오류가 수정된 큐비트가 커질수록 기하급수적으로 더 좋아지는 첫 번째 양자 프로세서임. 이는 양자 계산의 확장 문제를 근본적으로 뒤집는 것임.
"
"https://news.hada.io/topic?id=18177","Raspberry Pi 5, Valve Steam Link 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Raspberry Pi 5, Valve Steam Link 지원

     * Raspberry Pi Connect로 라즈베리 파이를 어디서나 원격으로 제어할 수 있게 되었음
     * Valve의 Steam Link를 사용하면 PC를 옮길 필요 없이, 집안 어디서나 PC 게임을 플레이할 수 있음
     * 이제 Raspberry Pi 5에서도 Steam Link를 실행 가능

Steam Link의 주요 특징

     * 그래픽이 강한 게임을 원격으로 플레이할 수 있도록 여러 기술적 문제를 해결:
          + 고화질 이미지를 전송하면서도 낮은 비트레이트와 지연 시간을 유지
          + 오디오와 비디오를 동시에 전송
          + 게임 컨트롤러와의 상호작용 지원
     * Valve는 이러한 어려운 문제를 해결하여 원활한 원격 게임 플레이 환경을 제공함

Raspberry Pi 5에서의 Steam Link 실행

     * Raspberry Pi OS가 Broadcom 멀티미디어 라이브러리를 사용하지 않는 방식으로 전환됨에 따라 새로운 접근 방식이 필요했음
     * Sam Lantinga(SDL 개발자이자 Valve 소속 개발자)가 Raspberry Pi 소프트웨어 팀과 협력하여 최적의 성능을 발휘할 수 있도록 Steam Link를 개발함
     * Steam Link v1.3.13에서는 Raspberry Pi 5에서 놀라운 성능을 보여줌:
          + 4K 60fps
          + 1080p 240fps (해당 해상도를 지원하는 모니터 필요)

설치 방법

    1. 최신 Raspberry Pi OS 이미지를 준비
    2. 다음 명령어 실행:
sudo apt update
sudo apt upgrade
sudo apt install steamlink
steamlink

    3. 설치 후 Steam Link를 실행하여 즐기기!

결론

     * Raspberry Pi 5에서 Steam Link를 사용하면 PC 게임을 집안 어디에서나 간편하게 플레이할 수 있음
     * Valve와 Raspberry Pi 팀의 협력으로 사용자 경험이 크게 향상됨

    0. 4080 이상의 그래픽 카드가 달린 컴퓨터에 스팀을 설치한 후 집안 어딘가에 잘 짱 박아놓을 것

   너무 잘쓰고있다가 삼성tv스토어에서 지원이 끊겨버린탓에 애플TV구매해서 쓰고있었는데
   대안으로 좋은 선택지가될듯하네요
"
"https://news.hada.io/topic?id=18184","왜 Pat Gelsinger는 Intel에 적합하지 않았는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   왜 Pat Gelsinger는 Intel에 적합하지 않았는가

     * Pat Gelsinger는 기술적으로 뛰어나고 근면하며 훌륭한 관리자로 평가받음
     * 그러나 Intel의 CEO로서 그의 리더십은 회사의 문화적 문제를 해결하지 못하고, 오히려 악화시켰다는 비판을 받고 있음

  Intel과 Oxide의 협력

     * Oxide는 초기부터 Intel의 CPU 대신 AMD의 솔루션을 선택했지만, Intel의 Tofino 네트워크 스위치 기술에는 흥미를 가짐
     * Tofino는 P4 프로그래밍 가능 네트워크 실리콘을 사용하며 Broadcom의 대안을 제시했음
     * 그러나 Oxide는 Intel이 과거 혁신적인 프로젝트를 무산시킨 전례 때문에 Tofino의 지속 가능성에 의구심을 가졌음
     * 결과적으로 Oxide는 Tofino를 사용해 성공적인 제품을 구축했지만, 이후 Intel은 Tofino 개발을 중단

  Gelsinger의 리더십 한계

     * 자신감과 아집:
          + Gelsinger는 Intel의 실패 사례를 인정하지 않고 성공적인 서사로만 포장하는 경향을 보임
          + 예: Larrabee GPU 프로젝트의 실패를 인정하지 않고, 자신의 부재가 NVIDIA의 성공을 초래했다고 주장
     * 문화적 문제 해결 실패:
          + Intel의 문제는 내부와 고객의 의견을 경청하지 않는 문화에서 비롯됨
          + Gelsinger는 이러한 문제를 해결하지 못하고 오히려 Intel의 오만한 태도를 강화했다는 비판을 받음
     * 부적절한 전략적 결정:
          + ""4년 동안 5개의 프로세스 노드""라는 공격적인 계획 발표
          + 그러나 Intel의 10nm 노드 실패를 명확히 설명하지 않음으로써 신뢰를 저하시킴
          + 심각한 재정적 상황에도 불구하고 배당금을 유지하여 투자 여력을 축소

  Tofino 프로젝트의 종말

     * Gelsinger가 CEO로 부임한 이후에도 Tofino는 초기에는 안전하다고 평가받았음
     * 그러나 2023년에 Tofino의 모든 추가 개발이 취소됨
     * Intel은 Oxide를 포함한 파트너들과의 신뢰를 저버렸으며, 이는 장기적으로 Intel의 생존 가능성을 위협함

  Oxide의 대안과 미래

     * Tofino 이후, Oxide는 Xsight Labs의 X2 ASIC으로 전환
          + X2는 Tofino의 장점을 유지하면서도 개방성과 확장성을 갖춘 솔루션
     * Oxide는 Tofino를 통해 프로그래밍 가능한 네트워크의 가능성을 입증했지만, Intel의 폐쇄적인 아키텍처와 신뢰 문제로 인해 장기적으로 적합하지 않았음

  결론: Gelsinger와 Intel의 문화적 문제

     * Intel의 문화적 문제는 혁신을 저해하고 파트너와 고객의 신뢰를 약화시킴
     * Gelsinger는 이러한 문제를 해결할 적임자가 아니었으며, 오히려 회사의 과거에 집착하여 미래를 준비하는 데 실패함
     * Oxide는 Intel의 기술에서 벗어나 더 개방적이고 지속 가능한 대안을 찾았음
     * Intel이 문화적 변화를 이루지 않는 한, 미래의 기술 파트너로 신뢰받기 어려울 것임

   인텔이 이렇게 되다니 싶네요

        Hacker News 의견

     * Pat Gelsinger는 Intel의 문제를 인식하고 해결하려고 노력했음. 이전 CEO들은 기술적이지 않았고, 배당금과 주식 환매에 집중했음
          + Gelsinger는 10nm 지연, TSMC의 앞서감, GPU 전략 부재 등 문제를 물려받았음
          + 배당금과 주식 환매를 줄이고, 여러 국가에 공장을 설립하며 혁신을 추진했음
          + Microsoft와 Amazon을 고객으로 확보했으며, Apple도 참여할 가능성이 있었음
          + Microsoft의 Nadella와 비교하면, Gelsinger는 더 어려운 상황에서 시작했음
     * Intel의 주가는 하락했지만, Gelsinger는 2025년 이전에는 회복이 어렵다고 솔직하게 말했음
          + 그는 Gordon Moore와 Andy Grove에게 훈련받았으며, 기술적 리더십에서 자신감을 얻었음
          + 문제는 이사회에 있음. 기술을 이해하지 못하는 사람들이 많음
     * Pat Gelsinger와 Bryan Krzanich를 잘 아는 사람으로서, Pat이 적절한 선택이었는지 확신할 수 없었음
          + Intel은 GPU나 AI 관련 기술에 더 일찍 진지하게 접근했어야 했음
          + Pat은 Intel 내부 출신이지만, 여전히 좋은 선택이었음
     * Pat Gelsinger의 실패
          + AMD, Nvidia, Apple, Broadcom을 고객으로 확보하지 못했음
          + 공장 취소와 지연으로 많은 돈을 낭비했음
          + 내부 공장 문화를 외부로 전환하는 데 적절한 인재를 채용하지 못했음
          + 제품 로드맵을 단순화하지 못했음
          + 2024년 8월까지 배당금 지급을 중단하지 않았음
          + 2022년에 공장 자금을 줄여 배당금을 지급했음
          + 코로나 붐 이후 Intel이 큰 문제에 직면할 것을 예측하지 못했음
          + 직원 수는 증가했지만, 수익은 감소했음
     * Intel은 2021년 CEO가 누구든지 간에 하락세였음
          + Gelsinger는 하락을 가속화하고, 여러 분야에서 진전을 이루지 못했음
          + Intel은 외부에서 온 새로운 리더가 필요함
     * Larrabee 프로젝트를 포기한 것은 실수였음
          + Intel이 2009년부터 2024년까지 독립형 GPU를 개발했다면, Nvidia의 크기는 현재의 1/4일 수 있었음
     * Gelsinger의 리더십 스타일에 대한 비판
          + 문제는 항상 그가 없을 때 발생하고, 성공은 그가 있을 때 이루어졌다는 주장
     * Gelsinger의 결정이 잘못되었다는 의견이 많지만, 대안이 무엇인지 명확하지 않음
          + Intel이 다시 정상에 오르기 위해 어떤 방향을 취해야 했는지 불분명함
     * 혁신자의 딜레마
          + Intel의 새로운 혁신이 시장에 나오기까지 시간이 걸려 실패로 이어짐
     * Gelsinger는 Intel의 성장을 위한 문화를 재건하지 못했음
          + 이사회가 문제의 원인일 수 있음
     * Gelsinger는 TSMC와 경쟁하는 전략을 세웠지만, CHIPS Act의 자금 지원 실패와 수출 통제 변화로 어려움을 겪었음
          + 미국 정부의 산업 정책 능력을 과대평가한 것이 실수였음
"
"https://news.hada.io/topic?id=18175","얼굴 인식을 피하기 위한 얼굴 변형 정도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         얼굴 인식을 피하기 위한 얼굴 변형 정도

    얼굴 인식을 피하기 위해 얼굴을 얼마나 바꿔야 할까?

     * 얼굴 인식의 확산
          + 얼굴 인식 소프트웨어는 공항 보안 검사나 약국 방문 시에도 우리의 데이터를 수집함.
          + 카메라를 피하는 것이 얼굴 인식을 피하는 가장 좋은 방법이지만, 이는 점점 어려워지고 있음.
          + 개인정보 보호 전문가들은 우리의 생체 데이터 보호가 점점 더 어려워지고 있다고 경고함.
     * Cynthia Rudin 교수의 견해
          + 얼굴을 극적으로 바꾸는 것은 현실적이지 않음.
          + 마스크나 선글라스를 착용하면 인식이 어려워질 수 있지만, 이는 얼굴을 숨기는 것일 뿐임.
          + 얼굴을 바꾸더라도 인터넷에 얼굴이 노출되면 인식될 가능성이 높음.
     * Walter Scheirer 교수의 견해
          + 얼굴 인식 알고리듬의 사용 방식에 따라 다름.
          + 1:1 모드에서는 얼굴을 바꾸는 것이 매우 어려움.
          + 1:다 모드에서는 얼굴을 가리는 것이 효과적일 수 있음.
          + 얼굴 인식이 배치된 장소를 피하는 것이 가장 실용적인 방법임.
     * Xiaoming Liu 교수의 견해
          + 얼굴 인식을 피하는 방법에는 물리적 적대적 공격과 얼굴 외형 변경이 있음.
          + 특수 안경이나 메이크업을 통해 얼굴 인식을 피할 수 있음.
          + 개인의 얼굴 특징에 따라 필요한 메이크업의 양이 달라질 수 있음.
     * Kevin W. Bowyer 교수의 견해
          + 얼굴 인식은 두 이미지의 유사성을 비교하여 동일 인물인지 판단함.
          + 유사성을 낮추기 위해 다양한 방법을 시도할 수 있음.
          + 어떤 방법도 얼굴 인식을 완전히 피할 수 있는 보장은 없음.

    결론

     * 얼굴 인식을 피하기 위해 얼굴을 바꾸는 것은 비현실적이며, 법적 규제가 더 효과적일 수 있음.
     * 얼굴 인식 기술의 확산에 따라 프라이버시 보호가 더욱 중요해지고 있음.

        Hacker News 의견

     * Helen Phillips의 소설 ""Hum""은 첨단 로봇이 여성의 얼굴을 미세하게 변경하여 얼굴 인식 소프트웨어를 테스트하는 이야기를 다룸
          + 주인공은 경제적 어려움으로 인해 연구에 참여하게 됨
          + 얼굴이 미세하게 변형되어 가족과 지인들이 혼란스러워함
          + 소설은 예상치 못한 방향으로 전개되며, 아름답게 쓰여진 SF 작품임
     * 공항에서 보딩 패스와 여권 대신 얼굴 인식 시스템을 사용한 경험을 공유함
          + 멕시코 공항에서의 경험을 통해 얼굴 인식 시스템의 보편화가 시간 문제임을 언급함
     * 중국의 연쇄 살인범 Lao Rongzhi가 얼굴 인식 기술로 체포된 사례를 언급함
          + 얼굴 인식 기술의 발전으로 인해 숨을 수 없음을 강조함
     * 얼굴 인식 기술을 피하기 위해 얼굴을 변경하는 것은 비현실적임을 언급함
          + 팬데믹 동안 마스크 착용으로 인해 눈 모양에 의존하는 시스템으로 변경되었음을 설명함
     * 준비된 이미지를 통해 얼굴 인식을 피하는 방법을 소개함
          + Fawkes 프로젝트를 통해 얼굴 인식 방해 데이터를 포함한 이미지를 생성할 수 있음을 설명함
     * 얼굴 인식을 피하기 위한 다양한 방법을 제안함
          + 카메라가 있는 지역을 피하고, 원격 근무를 하며, 현금을 사용하여 익명성을 유지하는 방법을 제안함
     * 데이터 보호를 위한 법률 제정의 어려움을 언급함
          + 독일과 유럽에서 데이터 수집을 줄이기 위한 노력을 설명함
     * IR LED를 사용하여 카메라를 혼란시키는 실험을 제안함
          + 감시를 싫어하는 개인적인 감정을 공유함
     * 얼굴 인식 시스템을 피하기 위한 구체적인 방법을 제안함
          + 눈의 위치와 얼굴 구조를 변경하는 방법을 설명함
     * 기술이 일반인을 해방시킬 것이라는 기대와 달리, 권력자들이 이를 억압적으로 사용할 가능성을 언급함
"
"https://news.hada.io/topic?id=18143","실직 2년차실직 2년차

     * 두 번째 해의 실직 생활
     * 금전적 상황
          + 2년 전 직장을 그만두고 $80K를 가지고 있었음. 현재는 돈이 거의 다 떨어진 상태임.
          + 처음에는 돈을 빨리 쓴 것에 대해 후회했지만, 몬트리올의 평균 생활비를 고려하면 그렇게 나쁘지 않았음을 깨달음.
          + 2025년까지 $1M의 수익을 목표로 했으나, 아직 달성하지 못함.
     * 작업
          + 네 개의 프로젝트에 참여했으며, 그 중 Blymp만이 수익을 창출하고 있음.
          + Guitartonic, Wonderbook, 그리고 다른 프로젝트들을 시도했으나 큰 성공을 거두지 못함.
     * 주거
          + 몬트리올의 빅토리아 스타일의 집에서 다른 세 명의 룸메이트와 함께 살고 있음.
          + 협업과 영감을 주고받는 환경이 정신 건강에 긍정적인 영향을 미침.
     * 음악
          + 피아노를 배우기 시작했으며, 여러 곡을 연주할 수 있게 됨.
          + Guitartonic 앱 덕분에 기타에 대한 열정도 되살아남.
     * 스포츠
          + 암벽 등반 팀에 합류하여 훈련했으며, 트라이애슬론을 준비함.
          + 수영, 자전거, 달리기를 통해 체력을 키움.
     * 건강
          + 위장 문제로 인해 FODMAP 다이어트를 시작했으며, 증상이 개선됨.
          + 건강한 식습관을 유지하기 위해 요리를 더 많이 하게 됨.
     * 전반적인 생각
          + 프로젝트 외에도 음악, 스포츠, 친구들이 삶에 큰 영향을 미쳤음.
          + 긍정적인 한 해였으며, 앞으로의 해가 기대됨.
          + 좋은 것들을 유지하고, 나쁜 것들은 줄이며, 더 많은 좋은 것들을 얻고자 함.
     * 미래 계획
          + 2025년은 인내와 자기 성찰의 해가 될 것임.
          + 더 많이 주고, 더 깊은 연결을 추구할 계획임.

        Hacker News 의견

     * 한 사용자는 수입이 거의 없는 상황에서 어떻게 생계를 유지하는지 의문을 제기함. 가족이나 지원 네트워크가 없는 상황에서 대부분의 사람들은 불안해할 것임.
     * ""많은 프로젝트를 시도하고 성공하는 것을 찾기"" 전략의 문제는 프로젝트가 실패할 때마다 기하급수적인 성장을 놓친다는 점임. 많은 사람들은 현재 회사 내에서 혁신하고 전략을 세우는 ""내부 기업가 정신""을 통해 더 나은 경력 전망을 얻는 것이 더 나을 것임.
     * 다른 사용자는 현재 상황에 처한 사람들에게 물건을 팔고, 나머지를 보관소에 넣고, 각 지역에서 4~6개월씩 여행할 것을 권장함. $80k로 세계 여러 곳에서 매우 편안하게 4년 이상 생활할 수 있음.
     * 미국의 문제는 의료보험임. 많은 주에서 건강 보험 시장은 네트워크 내에서만 이용 가능한 '브론즈' 플랜만 제공하며, 높은 공제액과 비싼 보험료가 문제임. 미국의 고용 시장은 사람들을 기업 고용주에 의존하게 만듦.
     * 한 사용자는 팬데믹 이전에 IBM에서 구조조정을 당한 후 미니 은퇴를 경험했음. 팬데믹이 시작되면서 몇 달간 어려움을 겪었지만, 현재는 새로운 직장에서 일하고 있음.
     * 다른 사용자는 파트타임 원격 근무와 예산 내에서의 여행이 더 지속 가능하고 즐거운 접근법이 될 수 있었을 것이라고 생각함.
     * 한 사용자는 COVID 이후 여러 스타트업을 시도했으나 성공하지 못했음. 최소한의 판매 가능한 제품을 빠르게 만들고, 시장 진입 전략을 확립하는 것이 중요하다는 교훈을 얻었음.
     * 돈이 부족하면 결국 문제가 생김. 많은 사람들이 경제와 일자리 문제로 어려움을 겪음. 비기술직에서 일하면서 스트레스를 줄이고 생계를 유지하는 방법을 찾음.
     * 한 사용자는 직장을 그만두지 말고, 다른 직업을 위한 고용 계약이 있거나 충분한 수입을 창출하는 부업이 있을 때만 그만두라고 조언함.
     * 다른 사용자는 저렴한 지역으로 이주하여 인디해커들과 함께 생활하며, 기존 앱을 복사하고 마케팅을 통해 수익을 창출하는 전략을 제안함. 기업가의 삶은 위험하고 힘든 여정임.
"
"https://news.hada.io/topic?id=18242","캐나다 안락사, 전체 사망의 약 5% 차지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        캐나다 안락사, 전체 사망의 약 5% 차지

     * 캐나다의 조력 자살 현황
          + 2023년 캐나다에서 조력 자살이 전체 사망의 4.7%를 차지함. 이는 2016년 합법화 이후 다섯 번째 연례 보고서로, 약 15,300명이 조력 자살을 신청하여 성공적으로 진행함.
          + 이 그룹의 중간 연령은 77세 이상이며, 대다수인 96%는 암과 같은 심각한 의학적 상태로 인해 사망이 ""합리적으로 예측 가능""한 경우였음.
          + 소수의 경우, 환자가 말기 질환은 아니지만 복잡한 질병으로 인해 삶의 질이 크게 저하되어 조력 자살을 선택함.
     * 조력 자살 법률의 국제적 동향
          + 캐나다는 지난 10년 동안 조력 자살 법률을 도입한 몇 안 되는 국가 중 하나로, 호주, 뉴질랜드, 스페인, 오스트리아 등이 있음.
          + 캐나다에서는 성인이 심각하고 치료 불가능한 의학적 상태를 가질 경우 의료 제공자에게 조력 자살을 요청할 수 있음.
          + 두 명의 독립적인 의료 제공자가 환자가 자격이 있는지 확인해야 하는 등의 규정이 있음.
     * 2023년 캐나다 조력 자살 통계
          + 2023년 캐나다에서 32만 명 이상이 사망했으며, 이 중 15,300명이 의료적으로 조력된 사망이었음.
          + 캐나다의 조력 자살 비율은 2023년에 거의 16% 증가했으며, 이는 이전 연도의 평균 증가율인 31%에서 급격히 감소한 수치임.
          + 보고서는 증가율이 둔화된 원인을 판단하기에는 아직 이르다고 경고함.
     * 인종 및 민족 데이터
          + 처음으로 보고서는 조력 자살을 선택한 사람들의 인종 및 민족 데이터를 조사함.
          + 수혜자의 약 96%가 백인으로, 이는 캐나다 인구의 약 70%를 차지함. 이 불균형의 원인은 불분명함.
          + 두 번째로 많이 보고된 민족 그룹은 동아시아인(1.8%)으로, 캐나다 인구의 약 5.7%를 차지함.
     * 퀘벡의 높은 조력 자살 비율
          + 퀘벡은 캐나다 인구의 22%를 차지하지만, 전체 조력 자살의 거의 37%를 차지하며 가장 높은 사용률을 보임.
          + 퀘벡 정부는 올해 초 높은 조력 자살 비율의 원인을 조사하기 위한 연구를 시작함.
     * 조력 자살의 국제 비교
          + 캐나다의 조력 자살 비율은 여전히 네덜란드보다 낮으며, 네덜란드에서는 조력 자살이 전체 사망의 약 5%를 차지함.
          + 영국에서는 말기 환자에게 조력 자살 권리를 부여하는 법안이 통과되었으나, 법제화되기까지는 몇 달의 검토가 필요함.
     * 캐나다의 조력 자살 법률 확장
          + 캐나다는 처음에는 ""합리적으로 예측 가능한"" 사망을 가진 사람들에게만 조력 자살을 허용했으나, 2021년 만성적이고 쇠약한 상태로 인해 삶을 끝내고자 하는 사람들에게도 접근을 확대함.
          + 올해 초 정신 질환을 가진 사람들에게도 접근을 확대하려 했으나, 캐나다 주들이 시스템이 확장을 감당할 수 있을지에 대한 우려를 제기하면서 두 번째로 연기됨.
     * 논란과 우려
          + 온타리오 주의 보고서는 자연 사망에 가까워지지 않은 사람들에게 조력 자살이 허용된 논란이 되는 사례를 조명함.
          + 한 예로, 화학 물질에 대한 심각한 민감성을 가진 50대 여성이 주거 문제로 인해 조력 자살 요청이 승인됨.
          + 또 다른 사례로, 노바 스코샤의 암 환자가 유방 절제 수술 중 조력 자살 옵션에 대해 두 번이나 질문을 받았다고 보고됨.

        Hacker News 의견

     * 캐나다 부모님의 친구들이 MAID(의료 지원 사망)을 선택한 사례를 공유함. 한 사람은 암을 극복했지만 아내가 사망한 후 MAID를 선택했음. 다른 사람은 신장 및 심부전으로 고통받고 있었으며, 더 이상 고통받고 싶지 않아 MAID를 선택했음.
     * 미국에서도 유사한 방식으로 안락사가 이루어지고 있음을 언급함. 아버지가 COPD로 사망할 때 병원에서 수액을 중단하고 모르핀을 투여하여 36시간 만에 사망했음.
     * 병원에서 많은 사람들이 불필요한 고통 속에서 사망하는 경우가 많음을 지적함. MAID가 더 인간적인 선택일 수 있음을 언급함.
     * BBC 기사 제목이 ""Assisted dying""으로 업데이트되었음을 알림. 캐나다 정책은 환자나 의료인이 사망을 유도하는 물질을 투여하는 두 가지 방식을 모두 제공함.
     * 대부분의 MAID 사례는 암과 같은 심각한 질환으로 인해 사망이 ""합리적으로 예측 가능한"" 경우임을 강조함.
     * 영국의 Assisted Dying Bill 논쟁 중, 완화 치료 의사가 모든 환자의 고통을 완화할 수 없음을 설명함. 고통스러운 죽음을 막지 않는 것은 도덕적 실패로 여겨질 수 있음.
     * 말기 명료성(terminal lucidity)에 대해 언급함. 치매 환자도 사망 직전에 명료한 순간을 가질 수 있으며, 이는 가족들에게 큰 기쁨을 줌.
     * 할머니가 산책을 못하게 되면 삶의 가치가 없다고 말씀하셨음을 회상함. 치매로 인해 보호받기 위해 요양원에 입소했으며, 방문할 때만 산책함.
     * 의사들이 ""손을 놓는"" 것에 대한 두려움이나 상속인들의 압박에 대한 우려가 있을 수 있음을 이해함. 그러나 인간 안락사가 불법인 곳에서는 동물 안락사는 허용됨.
     * MAID의 높은 수치에 대해 처음에는 놀랐지만, 더 많은 사람들이 선택할 수 있어야 한다고 생각함. 개인적으로도 죽음을 선택할 자유를 원하며, 종교적 이유로 반대하는 경우가 많음을 지적함.
"
"https://news.hada.io/topic?id=18135","포틀랜드 공항, 대규모 목재 지붕 캐노피 확장으로 성장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     포틀랜드 공항, 대규모 목재 지붕 캐노피 확장으로 성장

     * 포틀랜드 공항의 목재 지붕
          + 포틀랜드 공항(PDX)의 메인 터미널이 확장되면서 대규모 목재 지붕이 설치됨. 이는 콘크리트와 같은 전통적인 건축 자재의 대안으로, 목재가 다시 인기를 얻고 있는 사례임.
          + ZGF라는 건축 회사가 글루램(접착 적층 목재) 더글라스 퍼를 사용하여 9에이커 규모의 지붕을 설계함. 이는 혁신적이고 지속 가능한 해결책일 뿐만 아니라 지역 생태계와 문화 전통을 반영한 것임.
          + 프로젝트에 사용된 350만 개의 목재는 대부분 300마일 반경 내의 소규모 가족 운영 및 지속 가능한 공급업체와 원주민 국가에서 조달됨.
     * 포틀랜드 공항의 설계와 건축
          + 포틀랜드 항만청은 ZGF에게 단계적 건설 전략을 제안하여 기존의 주요 허브를 확장함. 이는 중요한 게이트를 유지하면서도 넓은 면적을 확보할 수 있는 방법임.
          + 곡선형 구조물은 자연광이 충분히 들어올 수 있도록 설계되었으며, 내부에는 거리 풍경과 공원 같은 공간이 마련되어 있음. 생물학적 디자인 요소가 도입되어 승객의 웰빙을 증진시킴.
     * 포틀랜드 공항의 중요성
          + 포틀랜드 국제공항은 대규모 목재 건축물로서 현장 대응성과 지속 가능성을 높인 공항 디자인의 기준을 세움.
          + 시카고 오헤어 공항의 재개발에서도 유사한 접근 방식이 적용될 예정임.
          + PDX의 목재 운송 프로젝트의 다음 단계는 2026년에 완료될 예정임.
     * 디자인 밀크의 소개
          + 디자인 밀크는 신진 재능을 발굴하고 강조하는 데 열정을 가진 커뮤니티로, 다양한 디자인 애호가들과 함께 함.

        Hacker News 의견

     * 포틀랜드 국제공항의 목재 디자인은 아름다우며, 천장을 높이고 자연광을 많이 확보한 것이 주요 개선점임. 그러나 도착 및 출발 안내가 더 혼란스러워졌음.
          + 공항의 전체적인 흐름이 샌프란시스코 국제공항의 새로운 터미널보다 더 혼란스러움.
     * 최근 공항을 방문했을 때, 변화를 보고 놀라움을 느낌. 천장, 티켓 발권 섬, 보안 구역, 터미널 출구의 원형 극장식 좌석 등 모든 것이 인상적임.
          + 공간이 넓고 자연스럽고 기능적이며 환영받는 느낌을 줌.
     * 최근 포틀랜드 국제공항을 방문했는데, 미국 공항에서 이런 아름다움을 느낄 줄 몰랐음. 건축물 외에도 TSA 입구 위의 큰 비디오 월이 숲과 해안 장면을 보여줌.
     * 공항을 지속 가능한 재료로 꾸미는 것이 비행의 탄소 배출 문제를 해결하지는 못함. 보스턴-뉴욕 간 비행이 연간 탄소 예산의 상당 부분을 차지함.
     * 포틀랜드 공항의 새로운 건축 기술을 보고 싶다면, B1M의 비디오를 추천함. 공항 운영에 미치는 영향을 최소화하면서 변화를 이뤄낸 것이 인상적임.
     * 공항의 구조가 아름다워 보이지만, 실제로는 강철 트러스 아래에 매달린 천장처럼 보임. 오클랜드 공항도 목재 천장과 고무 바닥을 시도 중임.
     * 벵갈루루의 새로운 터미널 2는 대나무와 녹지로 덮여 있어 포틀랜드 공항과 유사함.
     * 포틀랜드 공항의 건설 과정에 대한 흥미로운 세부 사항이 있음.
     * 미국의 건축물이 너무 실용적이고 저렴하게 지어져 아쉬움. 더 아름다운 건축물이 많아졌으면 좋겠음.
     * 포틀랜드 공항의 목재 테마와 따뜻한 환경이 다른 공항에도 도입되길 바람. 마드리드 국제공항도 비슷한 분위기로 매우 마음에 듦.
"
"https://news.hada.io/topic?id=18159","아사드 가문의 50년 통치 종식으로 시리아 정부 붕괴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     아사드 가문의 50년 통치 종식으로 시리아 정부 붕괴

     * 시리아 정부의 몰락
          + 시리아 정부가 반군의 급작스러운 공격으로 50년간의 아사드 가문 통치가 끝남.
          + 반군이 수도 다마스쿠스에 진입하며 아사드 대통령이 축출되었음을 선언함.
          + 시리아 국영 TV는 아사드 대통령이 축출되었고 모든 수감자가 석방되었다고 보도함.
     * 반군의 진격
          + 반군이 다마스쿠스에 도착하자 시민들이 거리로 나와 축하하며 반 아사드 구호를 외침.
          + 정부군과 경찰이 포스트를 떠나고 약탈자들이 국방부 본부에 침입함.
          + 반군은 다마스쿠스 외곽 지역을 점령한 후 다마스쿠스에 진입함.
     * 아사드의 행방
          + 아사드 대통령이 다마스쿠스를 떠나 미확인 장소로 도피했다는 보도 있음.
          + 시리아 정부는 아사드 대통령이 다마스쿠스를 떠났다는 소문을 부인함.
          + 시리아 총리는 아사드 대통령의 위치를 알지 못한다고 밝힘.
     * 국제 반응
          + 유엔 시리아 특사는 질서 있는 정치적 전환을 위한 긴급 회담을 제안함.
          + 러시아 외무장관은 시리아 국민을 안타깝게 생각한다고 발언함.
          + 미국은 시리아에 군사적으로 개입할 의도가 없다고 밝힘.
     * 반군의 전략
          + 반군은 다마스쿠스를 포위하며 최종 단계의 공격을 시작함.
          + 반군은 알레포와 하마 등 주요 도시를 점령하며 빠르게 진격함.
          + 반군의 주요 세력인 하야트 타흐리르 알샴(HTS)은 알카에다와의 관계를 끊고 다원주의와 종교적 관용을 수용하겠다고 선언함.

        Hacker News 의견

     * 시리아 상황에 대해 잘 알지 못하지만, 이란과 러시아가 아사드 정권을 지원했음에도 불구하고 매우 약해 보임. 이란은 최근 사건들로 인해 과도한 확장을 피하려는 것이 이해되지만, 러시아가 아무것도 하지 못한 이유는 이해하기 어려움. 최근 몇 가지 중요한 사건들이 세계를 재편할 가능성이 있음.
     * 이 분석이 상황을 이해하는 데 도움이 되었음: 링크
     * 시리아 해커 뉴스 커뮤니티의 의견을 듣고 싶음. 많은 댓글을 읽고 있지만 실제 시리아인들이 얼마나 있는지, 그들이 다음에 대해 어떤 희망이나 두려움을 가지고 있는지 확신할 수 없음.
     * 무엇보다도 러시아와 이란이 얼마나 심각한 상태인지 보여줌. 15년간의 대리 전쟁이 조용히 끝남.
     * 아사드 왕조는 시리아 문제의 증상에 불과함. 시리아는 수니파가 다수인 국가이며, 아사드 왕조 동안 알라위파 소수 민족이 지배 계층이었음. 알라위파는 이슬람의 독자적인 종파를 가지고 있음. 아사드가 몰락하면 그들은 학살당할 위험이 있음. 반군은 터키의 지원을 받는 시리아 국가군의 깃발 아래 싸우지만, 주로 지하디 그룹 하야트 타흐리르 알 샴(HTS)이 주도함.
     * 정부군이 모든 곳에서 단순히 자리를 포기하고, 시리아의 동맹국들이 개입하려 하지 않는 것이 흥미로움. 우리가 아직 알지 못하는 다른 일이 있을지도 모름.
     * 응원할 만한 선한 세력이 없는 곳임. 시민들, 특히 여성들이 걱정됨.
     * 오랜 내전에도 불구하고 통치 왕조가 이렇게 빨리 몰락하고 군대가 반군을 막지 못한 것이 충격적임. 믿기 어려움.
     * 어떤 정부의 가장 큰 전략은 즉시 갈등을 해결하는 것이 아니라 더 나은 시기를 위해 갈등을 연기하는 것임. ""지금은 해결책을 찾겠지만, 지금은 속도를 늦추거나 멈추자""라는 것임. 갈등은 이러한 국가들이 변화하고 형성되는 방식의 일부임. 미국도 다른 역사와 위협을 가지고 있기 때문에 공감할 수 있음. 역사가 우리에게 가르쳐준 것이 있다면, 우리는 이미 오늘날의 우리를 만든 갈등과 내전을 겪었다는 것임. 미국도 여전히 원하는 것이 무엇인지 혼란스러워하고 있음. 규제가 기업과 미국을 만든 부문을 마비시키고 있음. 그래서 우리도 문제를 가지고 있지만, 지금은 그것을 다루고 있음.
     * 누가 시리아를 통제할 가능성이 있는지, 시리아가 이슬람 국가가 될 것인지 궁금함.
"
"https://news.hada.io/topic?id=18145","MIT, 공기역학을 포함한 최대 규모 오픈소스 자동차 설계 데이터 세트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               MIT, 공기역학을 포함한 최대 규모 오픈소스 자동차 설계 데이터 세트 공개

     * MIT 엔지니어들은 친환경 자동차 및 전기 자동차의 설계 속도를 높일 수 있는, 공기역학을 포함한 자동차 설계에 대한 최대 규모의 오픈 소스 데이터 세트를 개발
          + 자동차 설계는 수년간의 시뮬레이션과 물리적 테스트를 거쳐 진행되는 반복적이고 독점적인 과정임
          + 자동차 설계에 있어 공기역학적 성능 등의 세부 정보는 일반적으로 공개되지 않음
          + 설계 효율을 극대화하기 위해 생성적 AI 도구를 활용할 수 있으나, 기존에는 이러한 AI가 학습할 데이터가 부재했음
     * DrivAerNet++ 데이터 셋의 중요성
          + 현재까지 개발된 자동차 공기역학 분야에서 가장 큰 오픈소스 데이터셋
          + 8,000개 이상의 자동차 설계를 포함하며, 각 설계는 3D 형식으로 제공됨
          + 공기역학적 데이터를 포함해 유체 역학 시뮬레이션 기반의 성능 정보를 제공함
          + 데이터셋의 설계는 메쉬, 점군(Point Cloud), 설계 매개변수 리스트 등 다양한 형식으로 제공되어 여러 AI 모델에 적합하게 사용 가능함
     * AI 모델 학습에 활용되어 효율적인 설계 가능
          + AI는 데이터를 학습해 새로운 설계를 빠르게 생성할 수 있음
          + 연료 효율성 향상, 전기차 주행 거리 증가 등 혁신적인 설계 결과를 도출 가능
          + 설계 프로세스를 간소화하여 연구 개발 비용 절감과 지속 가능한 자동차 개발 촉진에 기여
     * 데이터셋 개발 과정
          + 기존 Audi와 BMW의 2014년 제공한 3D 모델을 활용
               o fastback, notchback, estateback 등 주요 승용차 카테고리를 포함
          + 기존 설계에 26개의 매개변수 조정을 통해 다양한 새로운 설계를 생성
               o 설계의 길이, 차체 하부 구조, 유리창 기울기, 바퀴 폭 등이 포함
               o 생성된 설계는 최적화 알고리즘으로 중복되지 않도록 보장
          + MIT SuperCloud를 통해 3백만 CPU 시간과 39테라바이트 데이터를 활용하여 제작됨
     * 기대되는 활용 사례
          + AI 모델이 데이터셋을 학습하여 최적화된 공기역학을 가진 새로운 자동차 설계를 신속하게 생성 가능
          + 특정 자동차 설계의 공기역학을 빠르게 예측하여 연비나 전기차 주행거리를 산출할 수 있음
          + 지속 가능하고 환경 친화적인 차량 개발을 가속화할 것으로 기대됨
     * 연구의 의의
          + 자동차는 주요 오염원 중 하나로, 설계 혁신은 환경 보호에 중요한 역할을 함
          + 실제 테스트 없이도 물리적으로 정확한 3D 자동차 형태를 생성하는 것이 가능해짐
          + 연구팀은 이를 통해 차세대 AI 기반 설계 도구의 토대를 마련했다고 평가함
     * 연구 결과는 NeurIPS 2024 학회에서 발표 예정
          + 연구는 독일 학술교환처 및 MIT 기계공학부의 지원을 받음
     * 데이터 Repo : https://dataverse.harvard.edu/dataverse/DrivAerNet
     * 이슈 트래킹 : https://github.com/Mohamedelrefaie/DrivAerNet

        Hacker News 의견

     * 새로운 전기차들이 크기와 무게 면에서 왜 그렇게 설계가 잘못되었는지 궁금해하는 의견이 있음. 경제적인 가족용 차량을 원하는데, 선택지가 많지 않음.
     * DrivAerNet 데이터 파일이 하버드 대학의 Dataverse에서 제공됨.
     * DrivAerNet의 이슈 트래킹은 GitHub에서 가능함.
     * 데이터 파일이 수백 기가바이트에 달하며, 기관 계정으로만 로그인 가능함. 작은 연구소에 소속된 사용자가 다른 사람의 로그인 정보를 빌릴 수 있는지 문의함.
     * Creative Commons Attribution-NonCommercial 라이선스는 오픈 소스가 아님.
     * 비행 날개/RC 비행기를 설계하려는 사용자가 FOSS를 통해 공기역학적 결과를 얻을 수 있는지 문의함.
     * 새로운 차들이 모두 동일하게 보이는 것에 대한 불만이 있음.
     * 디자인이 매우 좋다는 의견이 있음.
     * 'verbing'이라는 표현이 문장을 읽기 어렵게 만든다는 의견이 있음.
"
"https://news.hada.io/topic?id=18215","휴대전화와 터치스크린으로 작성한 25,000줄의 Neovim 플러그인 코드 개발자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             휴대전화와 터치스크린으로 작성한 25,000줄의 Neovim 플러그인 코드 개발자

        Hacker News 의견

     * 한 사용자는 방글라데시에서 M1 MacBook Air를 구입하기 위한 기금 모금을 진행 중이며, 약 500달러가 더 필요하다고 설명함
          + 투명한 기부 내역을 제공하며, GitHub와 Reddit에서 공식 모금 활동임을 확인할 수 있음
     * 다른 사용자는 버스나 지하철에서 휴대폰으로 코딩을 하며, 터미널 기반 도구에 익숙하면 의외로 즐거운 경험이라고 언급함
          + Galaxy S24 Ultra, Termius, tmux, Vim을 사용하며, 지문 인식을 통해 원격 서버에 로그인하는 것이 마법 같다고 표현함
          + 스마트폰 화면의 제한된 너비가 가장 큰 문제점이며, 접이식 폰이 코딩에 적합하다고 설명함
     * 또 다른 사용자는 휴대폰에서 타이핑하는 것이 불편하며, 특히 기호가 섞인 텍스트를 입력할 때 실수가 많다고 언급함
     * 개발도상국에서는 많은 학생들이 컴퓨터에 접근할 수 없으며, 휴대폰으로 학습하여 첫 노트북을 구입하는 경우가 많다고 설명함
          + 친구 중 한 명은 전기가 없는 마을에서 정부가 제공한 PC를 보고 컴퓨터를 배우게 되었고, 현재는 뛰어난 리눅스/정보보안 전문가가 되었음
     * 50년 이상 프로그램을 작성해 온 사용자는 휴대폰으로 코딩하는 것이 고문 같다고 표현하며, 작은 화면과 키보드가 불편하다고 설명함
     * 'The Painted Man'이라는 소설은 작가가 출퇴근길에 Blackberry로 주로 작성한 작품임
     * Nokia n900에서 외부 키보드를 사용하여 개발을 했던 사용자는 화면 키보드로 코딩하는 것을 상상할 수 없다고 언급함
     * 한 사용자는 휴대폰 브라우저의 주소창에 메모를 입력하고 나중에 데스크톱에서 동기화하는 방법이 의외로 생산적이라고 설명함
     * 다른 사용자는 게임이나 뉴스 대신 사이드 프로젝트 개발에 시간을 사용하며, 다양한 도구와 앱을 활용하여 효율적으로 작업한다고 설명함
          + Keep notes, ChatGPT, Neovim, Fastapi & Vue, Kiwi browser, Termux, Git 등을 사용하여 프로젝트를 관리하고 버그를 즉시 수정함
"
"https://news.hada.io/topic?id=18187","Himalaya - CLI용 이메일 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Himalaya - CLI용 이메일 관리 도구

     * 다양한 이메일 계정(다중 계정, IMAP/Maildir/Notmuch/SMTP 등 지원)을 CLI 환경에서 관리할 수 있는 Rust 기반 오픈소스 도구
     * 터미널에서 이메일 목록 조회, 읽기, 쓰기, 송수신, 암호화/복호화, 필터링, 다중 포맷 출력 등 다양한 기능을 명령어로 사용 가능
     * TOML 설정 파일 또는 대화형 마법사(wizard) 를 통한 간편 계정 설정, PGP 암호화, 키링, OAuth2 인증, JSON 출력, 플러그인 연동 등 풍부한 확장성
     * mutt, aerc, alpine 등 TUI 메일러와 달리 stateless CLI 명령 기반으로, DevOps/개발자/자동화 파이프라인 환경에 최적화
     * 주요 특징 및 장점
          + 다중 계정 지원: wizard(대화형) 또는 TOML 설정파일로 계정 추가/관리
          + IMAP/Maildir/Notmuch/SMTP/Sendmail 백엔드 자유 선택 가능
          + 메시지 작성: $EDITOR 연동, 헤더/본문/첨부 자유롭게 편집
          + PGP 암호화: GPG·shell 명령·내장 방식 등 다양한 옵션
          + 키 관리: OS keyring 연동, password manager 커맨드 사용 지원
          + OAuth2 인증: Gmail, Outlook 등 최신 이메일 보안 프로토콜 대응
          + JSON 출력 지원: --output json 등, jq 등 데이터 파이프라인과 연동 용이
          + 강력한 플러그인/확장성: Vim, Emacs, Raycast 등과 연동 플러그인 제공
     * 기타 특징
          + stateless CLI 방식으로 쉘 자동화/스크립트에 최적화(이벤트루프 기반 TUI와 차별화)
          + Rust 기반 email-lib 재사용으로, 자체 Rust 기반 이메일 툴 개발도 용이
          + 디버그/로깅/색상출력 제어, 다양한 백엔드(로컬/클라우드/암호화 메일) 지원

        Hacker News 의견

     * Himalaya는 CLI 도구 작성과 이메일 워크플로우 자동화를 쉽게 만들어 줌. August와 잘 어울리며, HTML을 텍스트로 변환할 수 있음. 이를 활용해 git 이메일 패치 자동화 도구를 작성했음
          + Git Receive Mail 프로젝트 링크
     * TUI가 주목받고 사용되는 트렌드가 마음에 듦. Textual을 사용해 Outlook과 인터페이스하는 TUI 도구를 작성했으며, 이메일 카테고리 지정과 아카이빙/삭제를 Vim 스타일 UX로 구현했음
     * 이메일 필터를 지원하는지 궁금함. Gmail 필터를 프로그래밍적으로 관리하거나 설정 파일로 관리하고 싶음
          + Gmailctl라는 별도의 도구가 있음
     * 이전에 이 프로젝트를 본 것 같으며, 업데이트가 계속되어 기쁨. 곧 시도해 볼 예정임
          + 문서를 읽어보니 oauth2와 json 출력 기능이 마음에 듦
          + ""himalaya ..."" 명령어를 주기적으로 실행해야 하는지, 아니면 TUI를 열어두면 백그라운드에서 새로고침되는지 궁금함
          + 메시지 작성 시 ""From"" 헤더를 Thunderbird처럼 재작성할 수 있는지 궁금함
     * 'Pimalaya'인지 'Himalaya'인지 혼란스러움
     * 로컬 LLM을 사용해 이메일을 관리하는 사람이 있는지 궁금함. 유용할 것 같음
     * 로고가 마음에 듦
     * HN 제목에 ""CLI to...""라고 되어 있지만, GitHub 저장소에서 CLI 중심의 문서를 찾을 수 없음
          + himalaya envelope list --account posteo --folder Archives.FOSS --page 2 명령어와 PINE처럼 보이는 스크린샷이 있음
          + 이 스크린샷이 PINE처럼 인터랙티브한지, 아니면 himalaya가 출력하고 프로세스가 종료되는지 궁금함
     * 이 프로젝트를 주시하고 있었지만, 1.0 이전에 이메일 설정이 번거로울 것 같아 주저했음
          + 이 프로젝트와 조직의 로드맵에 대한 블로그나 게시물을 보고 싶음
     * Microsoft Teams 기업 조직에서 이 도구를 사용할 수 있는지 궁금함. 아마도 불가능할 것 같지만, 방법이 있기를 바람
"
"https://news.hada.io/topic?id=18196","Figma 2024: 피그마가 올해 배포한 주요 업데이트에 대한 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Figma 2024: 피그마가 올해 배포한 주요 업데이트에 대한 정리

UI3: 사용자 중심의 대규모 인터페이스 재설계

     * UI3는 2019년 이후 Figma의 가장 큰 인터페이스 변경으로, 복잡성을 줄이고 팀 협업 공간을 확보하기 위해 재구축됨
     * 초기 베타 테스트에서 떠다니는 패널(floating panels)이 작업 속도를 저하시키는 문제가 발견됨
          + 사용자 피드백을 바탕으로 패널을 **도킹(docked)**하여 크기 조절 가능하게 변경
          + 수평 스크롤링 추가 등 작은 디테일을 반영하여 더 직관적인 편집 환경 제공
     * 주요 개선 사항:
          + 하단 툴바와 Actions 메뉴를 통해 주요 도구 및 AI 기능에 빠르게 접근 가능
          + 색상 스포이트 도구 개선: 스타일 재사용, 색상 형식 변경, 새 변수 생성 가능

핵심 기능 강화: Multi-edit 및 성능 최적화

     * Multi-edit: 다양한 작업 스타일에 적응, 공동 작업 시 효율성을 높임
     * 타이포그래피:
          + 텍스트 스타일 덮어쓰기(기울임꼴, 굵게, 밑줄 등) 지원
          + 향상된 글꼴 선택 도구 및 단일 텍스트 노드에서 혼합된 단락 간격 설정 가능
     * 성능 개선:
          + 대형 파일을 효율적으로 관리하는 동적 페이지 로딩
          + 메모리 사용 최적화 및 원활한 멀티플레이어 협업 제공
     * 팀 관리 도구 개선:
          + 파일 고정, 검색 필터, 페이지 구분선 등의 조직화 도구 추가

AI 기능: 디자인 작업 흐름의 마찰 제거

     * 시각적 검색: 이미지나 캔버스 영역을 업로드해 필요한 파일과 컴포넌트 빠르게 찾기
     * 텍스트 생성 및 변환:
          + 텍스트 대체, 번역, 요약, 현실적인 텍스트 삽입
     * 이미지 제작 및 편집:
          + AI 기반 이미지 생성 및 배경 제거 기능 제공
     * FigJam:
          + AI 마인드맵으로 아이디어 시각화 및 Figma Slides 발표 자료 자동 생성

Figma Slides: 협업 중심의 프레젠테이션 도구

     * Figma의 협업 기능을 기반으로 프레젠테이션 모드 제공
          + 스마트 템플릿으로 일관성 유지
          + 실시간 설문조사 및 상호작용 기능 추가
     * FigJam 보드에서 자동으로 슬라이드 데크 아웃라인 생성 가능

디자인 시스템: 확장성과 유연성 강화

     * 타이포그래피 변수로 텍스트 제어 강화
     * 컴포넌트 속성의 새로운 변수 기능:
          + 인스턴스 분리 없이 디자인 시스템 유지 가능
     * 준비된 UI 키트로 디자인 프로세스 시작 속도 향상

개발자 도구: Dev Mode와 Code Connect

     * Dev Mode 개선:
          + 디자인-개발 협업을 위한 주석 도구 추가
          + VS Code 확장 프로그램으로 디자인 컨텍스트를 코드 편집기에 직접 통합
     * Code Connect:
          + 프로덕션 코드 스니펫 제공으로 디자인 시스템과 코드 간의 일관성 강화

커뮤니티 기여: 플러그인과 템플릿

     * 주목할 만한 플러그인:
          + LottieFiles: 애니메이션 생성
          + Peppercorn: 텍스트 스타일 생성
          + Vector to 3D: 디자인을 3D로 변환
     * 주목할 만한 템플릿:
          + FigJam 템플릿 500개 이상 공유
          + 다양한 디자인 리소스와 창의적인 템플릿 제공

글로벌 이벤트와 커뮤니티 성장

     * Config 2024: 10,000명 이상 참석, 디자인과 개발의 미래를 탐구
     * Friends of Figma: 220개 지역 그룹, 500개 이상 이벤트 개최
          + 커뮤니티 중심의 실질적이고 유의미한 경험 공유
     * 2024년에는 디자인과 개발, 아이디어와 프레젠테이션, 상상과 현실 사이의 격차를 줄이는 데 중점을 두었음
     * 2025년에는 커뮤니티와 함께 디자인 도구의 가능성을 더욱 확장해 나갈 계획

   이번에 GeekNight 준비하며 디자인 작업을 Figma로 진행했는데요.
   옆에서 곁눈질로만 봐도 정말 놀랍게 편하더군요.
   디자이너 뿐만 아니라 개발자들도 써보고 그들의 방식을 배우면 좋을 것 같아요.
"
"https://news.hada.io/topic?id=18154","Terrateam - 오픈소스 GitOps CI/CD 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Terrateam - 오픈소스 GitOps CI/CD 플랫폼

     * GitHub 기반 인프라 워크플로 자동화를 지원하는 GitOps CI/CD 플랫폼
     * Terraform, OpenTofu, CDKTF, 및 Terragrunt 작업을 pull request를 통해 조율할 수 있음
     * SaaS 서비스와 온프레미스 배포 옵션을 제공하며, 완전한 Git 통합으로 인프라 코드 관리에 최적화되어 있음
     * True GitOps
          + 모든 설정이 Git에 저장되며 코드와 함께 관리 가능
          + 별도의 설정 파일이나 외부 구성 필요 없이 브랜치, 병합, 되돌리기 작업을 코드처럼 수행 가능
     * 확장성과 신뢰성을 고려한 설계
          + GitHub-Native: GitHub Actions, PR, Secrets와 직접 통합되어 추가 도구가 필요 없음
          + 엔터프라이즈 보안: RBAC, SSO, 감사 기록 등으로 안전하고 규정을 준수하는 인프라 제공
          + 고가용성: 병렬 실행 및 다중 레포 환경을 처리할 수 있는 분산 아키텍처
          + Drift Detection: 실시간 인프라와 코드 간의 차이를 감지하여 경고
          + 다중 환경 지원: 개발, 스테이징, 프로덕션 환경을 쉽게 관리 가능

주요 기능

     * GitOps 통합: GitHub pull request와 Actions를 사용해 Terraform 변경을 조율
     * 고가용성: 분산 아키텍처로 대규모 작업과 팀을 지원
     * Apply Before/After Merge: 병합 전후에 인프라 변경을 적용 가능
     * 비용 추정: 변경 사항 적용 전에 비용을 자동으로 예측
     * OIDC 인증: OpenID Connect를 통해 클라우드 제공자와 안전하게 인증
     * 적용 잠금: 자동 잠금과 동시 작업 방지 기능으로 충돌 회피
     * 병렬 실행: 제한 없이 여러 작업을 병렬로 실행 가능
     * Private Runners: 전용 실행 환경을 활용해 보안 강화
     * Drift Detection: Terraform 또는 OpenTofu 설정과의 불일치를 감지하고 수정
     * 다중 환경 관리: GitHub Environments를 사용해 환경별 관리 가능
     * RBAC: GitHub 사용자 및 팀별 세부 권한 관리 지원
     * 감사 기록: 모든 인프라 변경 사항을 추적 및 검토 가능

아키텍처 개요

     * Terrateam Server: 인프라 작업을 조율하며 병렬 작업과 복잡한 환경에 적합
     * GitHub 애플리케이션: GitOps 워크플로를 네이티브 GitHub 기능과 통합
     * GitHub Actions: 코드 실행과 인프라 관리의 핵심 역할
     * Postgres 데이터베이스: 작업 데이터와 구성을 안전하게 저장하여 일관성 및 감사 기능 제공

오픈 소스 및 유료 버전

     * Community Edition (CE): 소규모 팀과 개인 개발자를 위한 무료 오픈 소스 버전
     * Enterprise Edition (EE): RBAC, UI 감사 기록 등 대규모 조직을 위한 추가 기능 제공
"
"https://news.hada.io/topic?id=18192","Trellis – 3D 메쉬 생성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Trellis – 3D 메쉬 생성 모델

    새로운 3D 생성 방법 소개

     * Structured LATent (SLAT) 표현: 다양한 출력 형식으로 디코딩할 수 있는 통합된 구조적 잠재 표현을 소개함. 이는 강력한 비전 기반 모델에서 추출한 밀도 높은 다중 뷰 시각적 특징과 희소하게 채워진 3D 그리드를 통합하여 구조적(기하학적) 및 텍스처적(외관) 정보를 포괄적으로 캡처함.
     * Rectified Flow Transformers: SLAT에 맞춰 설계된 3D 생성 모델로, 50만 개의 다양한 객체로 구성된 대규모 3D 자산 데이터셋에서 최대 20억 개의 파라미터로 모델을 훈련함. 텍스트 또는 이미지 조건으로 고품질 결과를 생성하며, 기존 방법을 크게 능가함.

    3D 자산 생성 및 편집

     * 텍스트 및 이미지 기반 3D 자산 생성: TRELLIS는 텍스트 또는 이미지 프롬프트를 사용하여 다양한 3D 자산을 생성할 수 있음. 예시로는 구리 회전 전화기, 이층 벽돌집, 구체 로봇 등이 있음.
     * 자산 변형 및 지역 편집: 주어진 3D 자산의 변형을 텍스트 프롬프트에 따라 생성할 수 있으며, 특정 지역을 조작하여 새로운 디자인을 만들 수 있음. 예를 들어, 전투 로봇의 팔을 제거하거나 무기를 추가하는 등의 작업이 가능함.

    TRELLIS의 응용 및 방법론

     * 3D 아트 디자인: TRELLIS가 생성한 고품질 3D 자산을 조합하여 복잡하고 생동감 있는 3D 아트 디자인을 쉽게 생성할 수 있음.
     * 구조적 잠재 표현: SLAT는 희소 구조와 강력한 시각적 표현을 결합하여 객체 표면과 교차하는 활성 복셀에 지역 잠재를 정의함. 이러한 특징은 강력한 사전 학습된 비전 인코더에서 파생되어 상세한 기하학적 및 시각적 특성을 캡처함.
     * TRELLIS 모델: 텍스트 프롬프트나 이미지를 조건으로 하는 대규모 3D 생성 모델을 훈련함. 두 단계 파이프라인을 적용하여 SLAT의 희소 구조를 생성한 후 비어 있지 않은 셀에 대한 잠재 벡터를 생성함. 다양한 출력 형식으로 3D 자산을 쉽게 생성할 수 있음.

        Hacker News 의견

     * AI 생성 콘텐츠를 보고 처음으로 속이 불편해짐을 느낌. 이러한 콘텐츠는 매우 훌륭하지만, 사람의 손으로 만든 작품이 사라지는 것 같아 슬픔을 느낌. 절차적으로 생성된 게임보다 사람의 생각에서 나온 세계를 원함.
          + 콘텐츠가 아닌 예술 작품을 원함. 동료들이 자신의 비전과 가치를 담아 만든 작품을 원함.
     * NeRF 데모 이후로 모두가 생각해온 것 같음. 5년 전 자신의 댓글을 찾음. 다음 단계는 3D 이미지에 ""노드""를 추가하여 애니메이션과 상호작용이 가능한 콘텐츠를 만드는 것임.
          + 어린 시절 사진을 입력하여 추억을 재현하고, 사랑하는 사람의 음성 샘플을 추가하여 대화 가능하게 함. VR과 소음 차단 헤드폰으로 몰입감을 높일 수 있음.
     * 완벽하지는 않지만, 지금까지 시도한 것 중 가장 나은 3D 모델 생성기임. Orca Slicer에 바로 넣을 수 있는 파일 형식을 원함.
     * 위키피디아의 F-117 스텔스 폭격기 이미지를 시도했으나, 결과물이 완전히 실패함. 여러 각도의 이미지를 업로드할 수 있는 기능이 필요함.
     * ""Text to 3D Asset"" 기능의 데모가 있는지 궁금함.
     * 며칠 전에 제출된 것을 보았지만, 매우 인상적인 데모임. 여기서 논의되기를 바람.
     * 잠재력을 볼 수 있지만, 제공한 이미지가 훈련 범위를 벗어난 것 같아 이상한 평면만 생성됨.
     * 레이어 확산을 사용하여 저폴리 에어쉽을 만듦. 게임 자산으로 사용할 수 있는 수준에 도달함.
     * 케이블과 플러그 사진을 업로드하여 개별 와이어와 올바른 구멍이 있는 플러그 메쉬를 생성함.
     * 닉스 눈송이 모델링은 매우 형편없었음. 자연 및 생물학적 구조와 텍스처에 더 많이 훈련된 것 같음.
"
"https://news.hada.io/topic?id=18194","흔한 컴파일러 오해들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              흔한 컴파일러 오해들

    컴파일러 최적화에 대한 오해

     * 최적화는 최적의 프로그램을 제공한다?
          + 컴파일러는 최적의 프로그램을 생성하는 것이 아니라, 단순화된 프로그램을 개선하는 것을 목표로 합니다.
          + 코드 크기 최적화는 가능성이 있지만, 실행 시간 최적화는 측정의 어려움, 최적 부분 구조의 부재, 하드웨어 모델의 부정확성 등으로 인해 어렵습니다.
          + 실행 시간은 코드 크기와 달리 정확한 측정이 어렵고, 여러 요인의 영향을 받으며, 최적 부분 구조를 갖지 않습니다. 예를 들어, 두 개의 루프를 개별적으로 최적화하더라도 전체 프로그램의 최적화를 위해서는 두 루프를 합쳐야 할 수도 있습니다. 또한, 컴파일 대상 하드웨어에 대한 정확한 모델이 없기 때문에 최적화가 어렵습니다. 예를 들어, goSLP는 전역적으로 최적화된 SLP 벡터화 코드를 생성하지만, 하드웨어 모델이 부정확하기 때문에 생성된 프로그램이 최적이 아닐 뿐만 아니라 LLVM보다 느릴 수도 있습니다.

    분기 예측과 관련된 오해

     * 분기 가중치는 CPU의 분기 예측기에 사용된다?
          + x86 아키텍처에서 컴파일러는 분기 힌트를 생성하지 않습니다.
          + 분기 가중치는 컴파일러의 코드 블록 배치에 사용됩니다. (예: 분기 가능성이 높으면 명령어 캐시 지역성을 높이기 위해 대상 블록을 현재 블록 바로 아래에 배치)
          + 최근 Intel Redwood Cove 아키텍처에서 분기 힌트가 다시 관련성을 갖게 되었지만, 실제로 컴파일러가 이러한 힌트를 생성하는 경우는 드뭅니다.

    최적화 레벨에 대한 오해

     * -O3는 -O2보다 훨씬 빠른 코드를 생성한다?
          + Clang의 경우 -O2와 -O3의 성능 차이가 크지 않으며, GCC의 경우 -O2가 Clang보다 덜 적극적이므로 약간의 차이가 있습니다.
          + -O3는 코드 크기를 거의 고려하지 않으므로 명령어 캐시 문제가 발생할 수 있습니다.
          + 벤치마킹을 통해 확인하는 것이 좋습니다.

    Javascript 인터프리터와 JIT 컴파일러에 대한 오해

     * Javascript 인터프리터는 런타임에 JIT 컴파일을 수행하는 이유는 어떤 경로가 핫한지 미리 알 수 없기 때문이다?
          + 핫 경로를 아는 것만으로는 충분하지 않으며, 타입 정보도 필요합니다.
          + 타입 정보는 런타임에만 알 수 있으므로 JIT 컴파일러가 런타임에 코드를 컴파일합니다.

    컴파일러와 인터프리터의 관계에 대한 오해

     * 컴파일러가 있으면 인터프리터가 필요 없다?
          + C/C++의 경우 인터프리터가 유용하지 않지만, WebAssembly와 같은 경우 인터프리터가 개발 및 사용의 용이성, 디버깅, 보안 등의 이점을 제공할 수 있습니다.

    컴파일러 중간 단계에 대한 오해

     * 중간 단계(middle-end)는 대상/플랫폼에 독립적이다?
          + LLVM의 경우 중간 단계가 대상/플랫폼에 완전히 독립적이지는 않습니다.

    데이터 지역성 최적화에 대한 오해

     * 컴파일러는 데이터 지역성을 최적화한다?
          + 컴파일러는 명령어 캐시 지역성을 최적화하지만, 데이터 지역성은 거의 최적화하지 않습니다.
          + 데이터 지역성 최적화는 코드에 대한 대규모 변경이 필요하며, C/C++ 컴파일러는 이러한 변경을 수행할 수 없습니다.
          + 데이터 지역성을 개선하려면 데이터 중심 설계와 같은 기법을 사용해야 합니다.

    컴파일 속도에 대한 오해

     * -O0은 빠른 컴파일을 제공한다?
          + -O0은 디버깅 가능하고 예측 가능한 코드를 생성하지만, 항상 빠른 컴파일을 보장하지는 않습니다.
          + 일반적으로 -O0이 -O2보다 빠르지만, 프로젝트 규모와 컴파일러에 따라 다를 수 있습니다.
          + 빠른 컴파일을 위해서는 표준 컴파일 파이프라인을 우회하거나 (예: TinyCC), LLVM IR을 직접 생성하는 방법을 고려할 수 있습니다.

    템플릿 컴파일 속도에 대한 오해

     * 템플릿은 컴파일 속도가 느리다?
          + C++ 템플릿이 컴파일 속도가 느린 것은 C++의 컴파일 모델 때문입니다.
          + 템플릿 자체가 컴파일 속도를 크게 저하시키는 것은 아닙니다.
          + Dlang의 표준 라이브러리 Phobos는 많은 템플릿을 사용하지만 빠른 속도로 컴파일됩니다.

    개별 컴파일의 효용성에 대한 오해

     * 개별 컴파일은 항상 가치가 있다?
          + 개별 컴파일은 링크 시간이 오래 걸릴 수 있습니다.
          + 많은 프로젝트에서 유니티 빌드(모든 코드를 단일 파일에 포함)가 더 나은 성능을 제공합니다.
          + 유니티 빌드는 전체 프로그램 최적화, 컴파일 속도 향상, 에러 로그 개선 등의 이점을 제공합니다.
          + 개별 컴파일이 유니티 빌드보다 나은 경우는 드뭅니다.

    링크 시간 최적화(LTO)에 대한 오해

     * 링크 시간 최적화(LTO)는 왜 링크 시간에 발생하는가?
          + LTO는 전체 프로그램 최적화를 위해 수행됩니다.
          + 이론적으로는 중간 단계에서 전체 프로그램 최적화를 수행하는 것이 더 합리적이지만, C/C++ 빌드 시스템의 현실적인 문제 (소스 파일 찾기 및 호출 관계 파악의 어려움) 때문에 링크 시간에 수행됩니다.
          + 링커는 모든 오브젝트 파일을 찾을 수 있으므로, 컴파일러는 링커가 액세스할 수 있도록 오브젝트 파일에 LLVM IR과 같은 중간 언어 표현을 포함시킵니다.

    인라이닝 최적화에 대한 오해

     * 인라이닝은 주로 함수 호출 명령어를 제거하기 때문에 유용하다?
          + 함수 호출 명령어를 제거하는 것은 이점이지만, 인라이닝의 가장 큰 이점은 다른 최적화를 가능하게 하는 것입니다.
          + 인라이닝은 함수 간 최적화를 가능하게 합니다.
          + 인라이닝을 통해 여러 함수의 코드가 하나의 함수로 합쳐지면, 기존의 함수 내 최적화 기법을 적용할 수 있습니다.

    인라인 키워드의 역할에 대한 오해

     * 인라인 키워드는 인라이닝 최적화와 관련이 있는가?
          + C++의 인라인 키워드는 원래 최적화 프로그램에 대한 힌트로 사용되었지만, C++98 이후로는 ""여러 정의 허용""을 의미하게 되었습니다.
          + LLVM의 경우 인라인 키워드가 있으면 inlinehint 속성을 추가하고 인라이닝 임계값을 높이지만, 그 영향은 크지 않습니다.
          + 함수를 항상 인라인하려면 always_inline 지정자를 사용해야 합니다.

    컴파일러 학습 자료에 대한 오해

     * LLVM은 학습하기 가장 좋은 컴파일러이다?
          + LLVM은 교육적인 측면도 있지만, 다양한 사용 사례를 지원하기 때문에 복잡하고 방대합니다.
          + 컴파일러 개발 학습을 위해서는 Go 컴파일러, LDC, DMD 등 더 작고 단순한 컴파일러를 먼저 살펴보는 것이 좋습니다.

    정의되지 않은 동작(Undefined Behavior)에 대한 오해

     * 정의되지 않은 동작은 최적화만 가능하게 한다?
          + 정의되지 않은 동작은 최적화를 비활성화할 수도 있습니다.
     * 컴파일러는 정의되지 않은 동작을 ""단순히"" 정의할 수 있다?
          + 컴파일러는 정의되지 않은 동작을 정의할 수 있지만, 성능에 영향을 미칠 수 있습니다.
          + 컴파일러가 모든 정의되지 않은 동작을 플랫폼의 동작으로 정의하는 것은 이상적이지만, 현실적으로 쉽지 않습니다.

    AI 기반 코드 생성에 대한 오해

     * 99% 정확도의 코드 생성은 괜찮다?
          + 컴파일러에서 생성된 코드의 99% 정확도는 실제로 사용하기 어렵습니다.
          + 코드의 1% 오류는 디버깅 및 유지보수에 큰 어려움을 초래합니다.
          + 대규모 프로젝트에서는 1% 오류가 매우 심각한 문제를 일으킬 수 있습니다.
          + 현재 LLM은 컴파일러에 비해 매우 느리기 때문에 온라인 코드 생성에 적합하지 않습니다.
"
"https://news.hada.io/topic?id=18178","VectorChord - 40만개 벡터를 PostgreSQL에 $1로 저장하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              VectorChord - 40만개 벡터를 PostgreSQL에 $1로 저장하기

     * 대규모 벡터를 비용 효율적으로 관리하기 위한 PostgreSQL용 새로운 벡터 검색 확장
     * 768차원의 1억 개 벡터에 대해 상위 10개 쿼리에서 QPS 131, 정확도 0.95 달성 가능
          + 월 $250으로 단일 머신에서 실행 가능
     * 400,000개 벡터를 $1에 저장 가능:
          + Pinecone(저장소 최적화 인스턴스) 대비 6배 저렴
          + pgvector 대비 26배 저렴

HNSW(Hierarchical Navigable Small Worlds) 기반 벡터 데이터베이스의 문제점

     * 긴 인덱스 생성 시간: 500만 레코드에 대해 2시간 이상 소요
     * 높은 메모리 요구량: 1천만 벡터 저장 시 최대 40GB 필요

VectorChord의 혁신적 솔루션: 디스크 친화적인 IVF+RaBitQ

     * **IVF(역 파일 색인)**와 RaBitQ 양자화를 사용
          + 32비트 벡터를 압축된 비트 표현으로 변환해 계산 비용 감소
          + 대부분의 비교는 압축 벡터를 사용하고, 정확도 보장을 위해 소수 벡터에 대해 전체 정밀 계산 수행
     * HNSW보다 빠르고 효율적인 검색:
          + RaBitQ는 벡터를 1비트로 압축, 계산 속도 100배 증가
          + 높은 정확도를 유지하면서 속도 최적화 가능

주요 벤치마크 결과

  GIST 데이터셋 (1M, 960차원)

     * VectorChord는 pgvector 대비 QPS가 2배 더 높음
     * KMeans 클러스터링을 외부 GPU에서 수행 후 PostgreSQL로 가져오는 방식을 활용
     * AWS i4i.large 인스턴스(2 vCPUs, 16GB RAM)에서 70만 벡터 인덱싱 소요 시간: 186초
          + pgvector 대비 16배 빠름
          + 삽입 속도도 14배 더 빠름

  LAION 5M 데이터셋

     * r6a.xlarge 머신에서 실험(4 vCPUs, 32GB RAM, 200GB EBS):
          + 높은 정확도에서도 빠른 응답 유지
          + $165.56/월 비용으로 유사 성능을 제공하며, 경쟁 플랫폼 대비 비용 효율적

  LAION 100M 데이터셋

     * AWS i4i.xlarge 인스턴스(4 vCPUs, 32GB RAM, 937GB SSD):
          + QPS 16.2 @ recall 0.95 (상위 10개 결과 기준)
          + 멀티 스레드 환경에서 요청 증가에 따라 선형적인 QPS 증가 관찰

VectorChord의 주요 장점

     * PostgreSQL의 물리적 복제 및 기타 기능과 호환
     * 외부 인덱스 생성 지원:
          + 더 강력한 머신에서 인덱스를 생성한 뒤, 이를 소규모 머신으로 가져와 질의 실행
          + 단일 머신에서 수십억 개 벡터 지원 가능
     * 저비용, 고성능: 경쟁 플랫폼 대비 월 비용 크게 절감

요약 및 추가 정보

     * VectorChord는 PostgreSQL 환경에서 효율적인 벡터 검색을 제공
     * IVF 및 RaBitQ 양자화를 통해 속도와 메모리 사용을 최적화하여 대규모 데이터셋에 적합
     * 클라우드 관리 서비스: PGVecto.rs Cloud
          + 손쉬운 배포 및 확장 가능

   Vector는 PostgreSQL의 새 JSON 입니다
   위 글에서 인용한 pgvector 와 이 VectorChord의 전신인 pgvecto.rs 는 다른 확장입니다.
   pgvector vs. pgvecto.rs in 2024: A Comprehensive Comparison for Vector Search in PostgreSQL

   pgvecto.rs 를 만든 팀이 VectorChord를 만들어서 같이 관리중이고, 아직 기능이 VectorChord로 다 넘어오지 않았고요. 내년쯤에는 pgvecto.rs를 지원중단하고 VectorChord로 넘어간다고 합니다.

   Postgres에서 벡터 저장 하시는 분들은 참고하세요.
"
"https://news.hada.io/topic?id=18144","<dialog>: Dialog 요소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <dialog>: Dialog 요소

<dialog>: 대화 상자 요소

     * 기본 제공: <dialog> 요소는 모달 또는 비모달 대화 상자, 경고, 검사기, 서브윈도우 등의 상호작용 요소를 나타냄. 2022년 3월부터 대부분의 브라우저에서 사용 가능함.

  속성

     * open: 대화 상자가 활성화되어 상호작용 가능함을 나타냄. open 속성이 설정되지 않으면 사용자에게 보이지 않음. .show() 또는 .showModal() 메서드를 사용하는 것이 권장됨.

  사용 노트

     * HTML <form> 요소는 method=""dialog"" 속성을 사용하여 대화 상자를 닫을 수 있음.
     * CSS ::backdrop 의사 요소를 사용하여 모달 대화 상자의 배경을 스타일링할 수 있음.
     * autofocus 속성은 대화 상자가 열릴 때 즉시 상호작용할 요소에 추가해야 함.
     * <dialog> 요소에 tabindex 속성을 추가하지 않도록 주의해야 함.

  접근성

     * 대화 상자를 구현할 때 사용자 포커스를 적절히 설정하는 것이 중요함.
     * showModal() 메서드를 사용하여 대화 상자를 열 때, 포커스는 첫 번째 포커스 가능한 요소에 설정됨.
     * 모든 사용자가 대화 상자를 닫을 수 있도록 명시적인 버튼을 포함하는 것이 가장 확실한 방법임.

  예제

    HTML 전용 대화 상자

     * HTML만으로 비모달 대화 상자를 생성하는 예제. open 속성으로 인해 페이지 로드 시 대화 상자가 열려 있음.

    모달 대화 상자 생성

     * .showModal() 메서드를 사용하여 모달 대화 상자를 여는 예제. Esc 키 또는 대화 상자 내의 ""Close"" 버튼으로 닫을 수 있음.

    대화 상자의 반환 값 처리

     * <dialog> 요소의 returnValue를 사용하는 예제. 폼을 사용하여 모달 대화 상자를 닫을 수 있음.

    필수 폼 입력이 있는 대화 상자 닫기

     * 대화 상자 내부의 폼에 필수 입력이 있을 때, formnovalidate 속성을 사용하여 닫을 수 있음.

    대화 상자 애니메이션

     * <dialog> 요소의 display 속성을 애니메이션화하여 대화 상자를 애니메이션할 수 있음.

  기술 요약

     * 콘텐츠 카테고리: 흐름 콘텐츠, 섹션 루트
     * 허용 콘텐츠: 흐름 콘텐츠
     * 암시적 ARIA 역할: dialog
     * DOM 인터페이스: HTMLDialogElement

  사양

     * HTML 표준 # the-dialog-element

  브라우저 호환성

     * 대부분의 주요 브라우저에서 <dialog> 요소와 open 속성을 완전히 지원함.

  참고

     * HTMLDialogElement 인터페이스
     * HTMLDialogElement의 close 및 cancel 이벤트
     * HTMLDialogElement의 open 속성
     * HTML 요소의 inert 글로벌 속성
     * CSS ::backdrop 의사 요소
"
"https://news.hada.io/topic?id=18231","OAuth 제공자에게 보내는 편지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           OAuth 제공자에게 보내는 편지

     * OAuth 공급자에게 보내는 편지
          + GitHub
               o 토큰 엔드포인트가 오류에도 200 상태 코드를 반환함
               o 오류 응답은 400 또는 401 상태 코드를 사용해야 함
          + Facebook
               o 토큰 엔드포인트가 사용자 정의 오류 응답을 반환함
               o 오류 필드가 있는 JSON 객체여야 함
          + TikTok
               o 서버가 client_id 대신 client_key 매개변수를 사용함
               o 사양에서 벗어난 이유가 없음
          + Strava
               o 서버가 범위 매개변수에 쉼표로 구분된 목록을 사용함
               o 공백으로 구분된 목록이어야 함
          + Naver
               o 서버가 토큰 만료 시간을 문자열로 반환함
               o 사양 준수 여부를 넘어선 문제임
          + 다양한 OAuth 공급자
               o 클라이언트 인증을 위해 client_secret 매개변수 대신 HTTP 기본 인증을 지원해야 함
               o OAuth 2.1 표준에서 HTTP 기본 인증은 선택 사항이지만, PKCE가 요구됨에도 불구하고 대부분의 공급자가 이를 사용하지 않음
          + AWS
               o OAuth 클라이언트 라이브러리와 함께 사용 시 여러 버그 보고를 받았으나, 문제를 재현할 수 없어 관련 내용을 삭제함

   정부 대국민 서비스 프로젝트 구축하면서, OAuth (OIDC) 기능 구현에만 1달이 꼬박 걸린 경험이 있습니다...

   외부 라이브러리를 쓸 수 없다보니, 일일히 다 구현해야 했는데 OAuth 표준을 제대로 지키는건 카카오나 구글 말고는 없었습니다...

   네이버는 뭐, 로그인만 되면 문제 없지 수준이라 써도 되나 싶었고, 애플은 지금 생각해도 어떻게 구현했는지 기억조차 안날 정도로 기존 Oauth 소스의 3배 이상의 구현 코드가 필요했습니다.

   위 본문처럼 응답 코드가 개판인 경우도 있고, 하다하다 418(I'm a teapot) 을 회신하는 제공자도 있었죠.
   이런 경험이 있다보니 저는 소셜로그인 같은 기능을 편해도 안쓰게 되더랍니다...

        Hacker News 의견

     * 한 사용자는 회사의 인트라넷에서 OAuth 서버를 구현했음. 다른 팀이 공식 사양을 따르지 않고 로그인 구현을 요청했으며, 결국 비공식적인 OAuth 변형을 만들게 되었음
     * OAuth 사용 시 여러 제공자와 이메일 가입 옵션이 있을 때, 이전에 어떤 방법으로 로그인했는지 기억하지 못해 새로운 계정을 실수로 생성하게 되는 경우가 있음
     * 1년 전 100개의 인기 API에 대해 OAuth를 구현했으며, 경험은 OP가 설명한 것과 유사했음
     * 많은 제공자가 prompt=select_account를 지원하지 않거나 사용자가 로그인할 계정을 선택하도록 요청하지 않음. 이는 OIDC에서 특히 문제임
     * AWS와 관련된 버그 보고서를 받았으나 재현할 수 없었고, 해당 섹션을 게시물에서 제거했음. 하지만 일반적인 문제점 체크리스트로 유용할 수 있었음
     * 공식적인 테스트 스위트가 있다면 오픈 표준 구현에 도움이 될 것임. 사양을 추적하기 어렵기 때문에 검증할 수 있는 테스트 스위트가 유용할 것임
     * Facebook의 문제는 기존 서비스 프레임워크를 사용하여 OAuth2를 코딩했지만 사양에 맞추지 못한 경우로 보임. 스크립팅의 일반적인 문제와 유사함
     * 일부 제공자는 사양을 따르지 않고 리프레시 토큰을 위한 별도의 엔드포인트를 선택했음
     * OIDC/OAuth 제공자에게 SCIM 지원을 제대로 하고, ""API 우선"" 사고방식으로 시스템을 설계할 것을 요청함. GNAP로 이동하기 전에 결정 재고 필요함
"
"https://news.hada.io/topic?id=18247","Helium : Python용 경량 웹 자동화 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Helium : Python용 경량 웹 자동화 라이브러리

     * 크롬/Firefox 같은 브라우저를 자동화하기 위한 파이썬 라이브러리
     * Helium은 Selenium을 기반으로 하며, 더 높은 수준의 API를 제공
          + Helium 스크립트는 일반적으로 Selenium 스크립트보다 30-50% 짧고, 읽기 쉽고 안정적임
          + Selenium에서는 HTML ID, XPath, CSS 선택자를 사용해야 하지만, Helium은 사용자에게 보이는 레이블로 요소를 참조할 수 있음
          + Helium과 Selenium을 혼합하여 사용할 수 있음
     * Helium의 장점
          + iFrames: Helium은 중첩된 iFrame 내부의 요소와 상호작용할 수 있음.
          + 윈도우 관리: 팝업 창을 자동으로 감지하고 포커스를 맞춤. 쉽게 스위치 가능
          + 암묵적 대기: 특정 엘리먼트가 아직 로드되기 전에 클릭할 경우 나타날때까지 기본 10초까지 기다림(Selenium은 스크립트 실패함)
          + 명시적 대기: 조건이 충족될 때까지 대기하는 더 나은 API를 제공함.
     * 현재는 프로젝트 유지보수에 시간이 부족하여 무료로 지원하지 않음
          + PR은 수락하며, 기여를 환영함.
     * 역사
          + Helium은 2013년 BugFree 소프트웨어라는 폴란드 IT 스타트업을 위해 개발됨
          + 2019년 회사가 종료되었고, Helium을 오픈 소스로 전환함
          + Java와 Python에서 사용 가능했으나, 현재는 Python만 지원함
          + Helium이라는 이름은 Selenium과 같은 화학 원소에서 유래되었으며, 더 가벼움을 의미함

        Hacker News 의견

     * Selenium 프로젝트 창립자는 Helium의 API가 Selenium의 초기 API와 유사하다고 언급함. 다양한 스타일의 자동화 API가 존재하며, 모든 사람을 만족시키는 API는 없음을 강조함. 개인적으로는 간단한 함수형 스타일을 선호함
          + Nim 프로그래밍 언어의 'Uniform Function Call Syntax'를 좋아하는 이유도 같은 맥락임
     * 대부분의 Python 린터와 모범 사례 문서에서는 import *를 권장하지 않음. 대신 import helium as h와 같은 방식으로 간결하게 사용할 수 있음
          + Python 기반 브라우저 자동화에서 일반적으로 사용되는 우회 방법과 유사함
          + 명시적인 것이 암시적인 것보다 낫다는 격언에 따라, 가독성을 위해 이러한 레이어가 문제를 일으킬 수 있음을 우려함
     * Selenium을 사용한 임시 자동화를 경험한 사용자는 Helium의 자연어와 유사한 API가 유용했을 것이라고 언급함
     * Selenium의 래퍼가 더 가볍다는 주장에 의문을 제기함. 래퍼는 기본적으로 더 많은 코드와 기능을 포함하며, 리소스를 덜 사용하거나 더 빠르지 않음
          + 자동화 테스트는 멋진 API로 해결되지 않으며, 지속 가능한 자동화를 위해 실제 소프트웨어 엔지니어링이 필요함을 강조함
     * Helium이 Playwright, Selenium, Cypress, Puppeteer와 어떻게 비교되는지 궁금해함
     * Helium이 사라지지 않도록 노력한 것에 감사함을 표현함
     * 특정 Chrome 브라우저 프로필 이름으로 시작하거나 기존의 Firefox/Chrome 세션을 재사용할 수 있는지 궁금해함
     * 자동화가 실제 사용자와 구별되는 것이 얼마나 쉬운지에 대한 의문을 제기함. 자동화를 통해 웹을 사용할 경우 접근이 차단될 위험이 있을 수 있음
     * Helium을 사용하여 에이전트 흐름을 만들 수 있을 것 같다고 언급함. 데이터 수집이나 질문에 답하는 작업을 수행할 수 있는 샌드박스 인스턴스를 만드는 것에 관심이 있음
     * Helium이 사용자 필드를 어떻게 인식하는지 궁금해함. 레이블을 읽고 그 아래나 오른쪽에 있는 것을 사용자 필드로 가정하는지에 대한 의문을 제기함
"
"https://news.hada.io/topic?id=18208","Show GN: Project Nebula - Hashicorp Vault, Infisical 등 중앙 집중식 Vault 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: Project Nebula - Hashicorp Vault, Infisical 등 중앙 집중식 Vault 대안

   중앙에서 관리되는 Secret Management Solution들의 한계점에 대해서 생각 해보신 적 있으신가요? 민감한 정보나 크리덴셜을 단일 서버나 서비스가 중앙에서 관리하는 구조는 중앙 서버가 해킹 당하거나 내부자 위협으로 인해 관리 체계가 무너질 수 있습니다.
   또한, 중앙 집중식 Vault는 데이터 소유자가 데이터에 대해서 권한 설정을 할 수 없습니다.
   저희는 위 문제를 해결한 Secret Management 시스템을 오픈소스로 공개했고, 애용하던 Geek News에 공유합니다.

  주요 기능 및 특징:

     * MA-ABE(Multi-Authority Attribute-Based Encryption)를 통한 분산 관리
       단일 중앙 서버에 의존하지 않고, 다양한 권한 기관에 키를 분산하여 관리합니다. 이를 통해 특정 기관이 손상 되더라도 전체 시크릿 관리 체계 영향을 최소화합니다.
     * 속성 기반 암호화 및 접근 제어 정책
       데이터 소유자가 데이터에 대해서 접근 제어를 함으로써 제3자에게 안전하게 공유가 가능합니다
     * E2EE(End-to-End Encryption)
       시크릿은 사용자 단에서 암복호화가 이루어지며, 전송 및 저장 과정 전체에 걸쳐 평문 노출 없이 보안이 유지됩니다.
     * Rust기반 구현 및 WASM클라이언트 지원
       Rust로 구현돼 높은 안정성과 성능을 보장하며, WASM클라이언트를 통해 쉽게 통합이 가능합니다.

  로드맵

     * WASM 클라이언트를 주요 언어에서 사용할 수 있게 SDK를 제공할 예정입니다.

   드디어 Vault의 대안을 제시해주는건가여

   Vault나 Infisical과 같은 Secret Management 서비스들/솔루션들을 쓰다보면 늘 고민되었던게 '중앙 관리자'는 모든걸 다 알 수 있는 것 아닌가?에서 시작되었습니다. :)
   보안에서의 복원성이 점점 중요해지고 있는데, Vault보다 뛰어난 복원성과 / 보안성 / 분산된 구조로 있는 영향범위 최소화가 가능한게 장점입니다. :)
"
"https://news.hada.io/topic?id=18167","2024년에 내가 배운 52가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2024년에 내가 배운 52가지

   2014년부터 매년 새로 배운 52가지를 정리하는 Tom Whitwell의 재미난 리스트
    1. 한국은 세금 회피를 방지하기 위해 8천만원 이상의 회사 차량에 못생긴 형광 녹색 번호판을 도입하였으며, 이로 인해 고급차 판매가 27% 감소
    2. 널리 사용되는 건강 데이터에서 불법인 DB 쿼리 한문장을 던지면 토니 블레어의 개인 의료 기록 전체에 접근할 수 있음(1953년 5월생 남성으로 런던에서 2003/2004년 특정 날짜에 심장박동회복술을 받은 사람)
    3. 미국에는 크레욜라 크레용, 플레이도우, 인디애나의 바다 향이 나는 실내 놀이 공간, 암모니아와 등유 냄새가 나는 총기 청소제 등 16개의 상표 등록된 향이 존재함
    4. 영화 스튜디오는 영화 제작에 사용된 CGI의 양을 숨기기 위해 비하인드 씬 영상에 CGI 효과를 추가함
    5. 카시오는 프리미엄 데스크 계산기 S100X-BK를 판매. 일반 계산기와 동일한 기능을 가지지만 일본에서 밀링된 알루미늄으로 수제작되었고 가격은 64만원(£359.99)임. (31개의 버튼을 가진 일반 탁상용 계산기처럼 생김)
    6. 런던 지하철에는 지상 모기와 유전적으로 다른 독특한 형태의 모기인 Culex pipiens f. Molestus가 최소 1940년대부터 존재함
    7. 오젬픽은 미국 원산의 크고 느린 도마뱀인 Gila 몬스터의 독성 타액에서 발견된 단백질을 변형한 합성 버전임.
    8. 문장을 작성할 때, 독자를 기다리게 하지 말 것
    9. 콜롬비아의 메데인은 나무를 심어 3년 만에 도시 온도를 2°C 낮춤
   10. 중국에서는 유령이 나오는 아파트의 목록이 있으며, 불길한 역사를 가진 곳에 살기를 원한다면 30%의 할인을 받을 수 있음
   11. 웹 도메인 이름을 구매하기 전에 그것이 유령이 나오는지 저주받았는지 확인해야 함.
   12. 100년간의 노력 끝에, 이집트는 투탕카멘을 죽인 질병인 말라리아에서 공식적으로 해방되었음
   13. 강력한 샤워기는 약한 샤워기보다 에너지 효율과 물 효율이 더 높음
   14. 1980년대 초 샌프란시스코에서는 BART 교통 시스템에서 좌석을 절단하는 갱단이 운영되었으며, 이는 수리 비용과 초과 근무 수당을 의도적으로 발생시켰음. 그들은 수리 팀이 누구에게 비용을 지불해야 하는지 알 수 있도록 특정한 절단 패턴을 사용했음
   15. 밀워키 공항의 보안 구역 뒤에는 보안 절차로 인해 혼란스러워진 사람들을 위한 'Recombobulation Area'가 있음
   16. 메트로폴리탄 경찰은 1930년대부터 항공기를 사용해왔으며, 1936년의 케이블 스트리트 전투는 초기 헬리콥터에 의해 순찰되었음
   17. Telugu어로 된 액션 영화 'Devara: Part 1'은 미국 극장에서 550만 달러를 벌어들여, 프랜시스 포드 코폴라의 1억2천만 달러짜리 'Megalopolis'의 첫 주 수익인 500만 달러를 넘어섰음.
   18. 10월에 런던에서 22톤의 치즈가 도난당했으며, 이는 러시아의 사치품에 대한 제재를 피하는 암시장에서 끝났을 수 있음
   19. 도쿄의 아바타 로봇 카페 Dawn은 장애를 가진 근로자들이 집에서 원격으로 조종하는 로봇 웨이터가 근무함
   20. Tabloid는 클릭베이트 헤드라인(클릭을 유도하는 제목)을 기반으로 한 프로그래밍 언어로, ""모든 프로그램은 PLEASE LIKE AND SUBSCRIBE로 끝나야 하며, 이는 청중을 늘려야 하기 때문""임
   21. 2022년에는 메이시스 수입의 55%가 소매 판매가 아닌 신용카드에서 나왔으며, 이는 미국 백화점에서는 꽤 일반적임
   22. 몽골에서는 사람들이 말을 타고 레이브를 즐김
   23. 스위스 베른(그리고 바젤)에서는 일터로 물에 떠서 가거나 수영하는 것이 점점 더 인기를 얻고 있음
   24. 일반 헤어드라이어를 수돗물로 가득 찬 어항에 떨어뜨리면 계속 작동하며 물을 부드럽게 데움 (주의: 절대 시도하지 마세요.)
   25. 인도 농촌 지역의 아이들에게 수백만 대의 무료 자전거가 제공되어, 학교에 자전거로 통학하는 소녀들의 수가 두 배로 증가하고, 출석률이 높아지며 중도 탈락이 감소하였음
   26. 1960~70년대 스포츠 이벤트 사진에는 현대 사진에는 없는 푸른 안개가 배경에 있으며, 이는 경기장에서 모두가 담배를 피웠기 때문임
   27. 2024년 9월 30일, 영국은 석탄을 태워 전력을 생산하는 것을 완전히 중단한 첫 번째 국가가 되었음
   28. Qoobo는 꼬리가 달린 로봇 베개로, ""우리의 특정 부분은 심장 박동이 있는 털이 있는 무언가를 쓰다듬고 싶어하며, 이 이상한 작은 로봇은 이 두 가지를 모두 만족시킴.""
   29. 200개의 실제 인간 어금니를 900달러에 구매할 수 있음
   30. 영국 레스토랑 체인 Dishoom의 각 지점에는 고유한 50페이지 분량의 배경 이야기가 존재하며, ""새 레스토랑의 가상 소유자는 당시 정치에 대한 견해나 예술과 문학에 대한 특정 취향을 가질 수 있음""
   31. 오토파지(autophage) 로켓은 자체 플라스틱 동체를 연료로 사용함
   32. 1800년에는 세계 인구 3명 중 1명이 중국인이었으나, 오늘날에는 5명 중 1명 이하임
   33. 미국에서는 테이블 톱이 연간 약 4,300건의 절단 사고를 일으키며, 이는 다른 모든 제품을 합친 사고 수 3,600건보다 많음
   34. 욕실 타일에는 네안데르탈인의 신체 부위가 포함될 가능성이 있음
   35. 성이 U, V, W, X, Y, Z로 시작하는 사람들은 A~E로 시작하는 성을 가진 사람들보다 평균적으로 0.6% 낮은 점수를 받음. 이는 학습 관리 시스템에서 논문을 알파벳 순으로 정렬하여 채점하는 방식 때문이며, 일부 교사는 Z에서 A 순으로 뒤집어 채점해 이 결과를 반전시킴
   36. 라오스 북부 루앙프라방의 빈 공터에 있는 어느 정도 포토제닉한 나무가 Xiaohongshu(중국의 소셜 미디어)에서 소개된 후 관광 명소가 되었음
   37. 유럽에서는 2010년에서 2019년 사이에 공기 오염으로 인한 뇌졸중 사례가 25% 감소했음
   38. 1926년에서 1934년 사이, 전구 제조업체 카르텔은 내구성이 더 긴 전구를 생산하는 업체에 벌금을 부과하여 전구 수명을 평균 1,800시간에서 1,200시간으로 단축시킴
   39. 아스널 감독 미켈 아르테타는 선수들에게 준비와 경각심의 중요성을 가르치기 위해 전문 소매치기 팀을 고용해 디너 파티에서 선수들의 휴대전화와 지갑을 훔치도록 했음
   40. 히잡을 착용하는 여성들은 핀을 입에 물고 있다가 흡입해 사고가 발생하는 경우가 있음
   41. 중국에서 초단편 드라마(10~15분 길이)가 인기이며, ""플래시 결혼 상대는 재벌"", ""경비원은 억만장자"", ""50세의 내가 20세의 부자 남성과 아이를 가지다"" 같은 제목이 있음. 일부 시청자는 약 160만원(9000위안)이 넘는 과도한 유료 시청료 청구서를 받고 있음
   42. 2020년대에 영화 제목에 콜론이 포함된 비율이 16% 이상으로, 1990년대보다 약 300% 증가함
   43. 대만 엔지니어들은 특정 브랜드의 과자(乖乖 Kuaikuai, 코코넛 버터 맛)를 기술의 행운 부적으로 믿고 있음. 대만 최초의 국내 개발 위성을 궤도에 올린 팰컨 9 로켓 모형 주위에 KuaiKuai 과자 박스가 쌓여있음.
   44. 일본의 Takkyu-bin 은 매우 편리한 수하물 배송 서비스로, 약 $13에 무거운 짐을 호텔이나 공항간에 배송해 줘서 들고 다닐 필요가 없음. 왜 다른 나라에는 이런 서비스가 없을까?
   45. 오젬픽은 중고 의류 시장에 영향을 미쳐, 플러스 사이즈 여성복 판매가 증가했으며, 3XL 사이즈 제품 목록이 지난 2년간 두 배 증가함
   46. 1920~1950년대 소비에트 연합의 '인민의 적'으로 여겨진 엘리트들이 수용소로 보내졌던 지역은 오늘날 유사한 지역보다 더 번영하고 생산적임
   47. 2024년, Anguilla GDP의 약 10%가 .ai 도메인 이름 수수료에서 나옴
   48. 일부 언어는 빨강, 검정, 흰색 세 가지 색상만 이름으로 부르고 있음. 이 경우 초록은 검정, 파랑도 검정, 노랑은 빨강으로 간주됨
   49. 우크라이나에서 러시아 드론이 무선 방해를 피하기 위해 10km 길이의 매우 얇은 광섬유 케이블을 뒤에 끌고 다니며 조종 및 통신을 수행함
   50. 채팅에서 'hello'라는 인사말을 사용하지 마세요
   51. 한국은 직원 10,000명당 1,012대의 로봇을 보유하고 있으며, 세계에서 가장 높은 로봇 밀도를 가짐. 올해 중국은 독일과 일본을 추월했으며, 10,000명당 470대의 로봇을 보유하여 로봇 밀도가 4년 만에 두 배 증가했음
   52. Halal Beats는 악기를 사용하지 않고 보컬 소리만으로 만든 음악을 판매하는 영국 회사로, 악기로 연주된 음악을 피하려는 무슬림 영상 제작자 및 인플루언서를 위한 콘텐츠를 제공함

   51번은 왜 한국이 로봇이 있다는 건지 아시는 분?

   Global Robot Density in Factories Doubled in Seven Years

     The Republic of Korea is the world´s number one adopter of industrial robots with 1,012 robots per 10,000 employees. Robot density has increased by 5% on average each year since 2018. With a world-renowned electronics industry and a strong automotive industry, the Korean economy relies on the two largest customers for industrial robots.

   전자/자동차 산업 공장에서 자동화기계(로봇)를 대거 채용했다고 합니다.

   50번은 낮이 익은데 하필...

   50번의 nohello는 링크 글이랑은 뉘앙스가 좀 다르지 않을까요
   메신저는 이메일과 전화의 중간인데..
   '안녕하세요'하고 대답을 기다리면서 메신저를 전화처럼 쓰지 말자는 캠페인 아닐까 싶네요

   This Year I Learned 느낌이라 더 재밌네요.
   (Past 52 Weeks I Learned?)

   내가 2023년에 배운 52가지
   내가 2022년에 배운 52가지
   내가 2021년에 배운 52가지
   내가 2020년에 배운 52가지

   올해는 한국이 2개나 들어갔네요.
"
"https://news.hada.io/topic?id=18176","연구: 온라인에서 부정적인 콘텐츠를 접하면 정신 건강이 악화됩니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  연구: 온라인에서 부정적인 콘텐츠를 접하면 정신 건강이 악화됩니다

     * 정신 건강에 어려움을 겪는 사람은 부정적 콘텐츠를 더 많이 열람하는 경향이 있으며, 이러한 콘텐츠가 증상을 더욱 악화시킴
     * MIT의 연구는 건강과 온라인 행동 간에 상호 작용하는 인과적 관계가 있음을 보여줌
     * 연구진이 정신 건강을 보호하고자 하는 사람들을 위해 더 나은 결정을 내릴 수 있도록 돕는 웹 플러그인을 개발
          + 자연어 처리 기법을 사용하여 1,000명 이상의 참가자가 방문한 웹 페이지의 부정 점수와 긍정 점수를 계산함
          + 부정적, 긍정적 점수와 함께 분노, 두려움, 기대, 신뢰, 놀라움, 슬픔, 기쁨, 혐오 등 다양한 감정을 평가
     * 참가자는 웹 탐색 전후로 자신의 기분을 보고했으며, 부정적 웹 페이지가 기분 악화에 영향을 줌을 확인함
     * 부정적 콘텐츠 열람 후 참가자들의 기분이 더 나빠짐. 부정적 웹 페이지를 탐색한 참가자들은 이후 더욱 부정적인 페이지를 찾는 경향이 있었음
     * 연구진은 단순히 스크린 타임이나 소셜 미디어 사용 빈도에 초점을 맞춘 기존 연구와 달리 콘텐츠의 유형과 감정적 속성을 분석함

  개입과 도구의 효과

     * 참가자들에게 검색 결과에 ""기분이 좋아질 가능성"" 또는 ""기분이 나빠질 가능성""을 라벨로 표시한 결과:
          + 라벨이 제공된 그룹은 부정적 콘텐츠를 선택할 가능성이 줄어들고 긍정적 콘텐츠를 선택할 가능성이 높아짐
          + 긍정적 콘텐츠를 더 많이 열람한 참가자는 기분이 현저히 개선됨
     * 이를 기반으로, **Digital Diet 플러그인**이 개발됨:
          + 구글 검색 결과에 대해 세 가지 카테고리 점수를 제공:
               o 감정 (긍정적/부정적 여부)
               o 지식 (정보가 주제를 이해하는 데 도움을 주는 정도)
               o 실행 가능성 (정보의 유용성)
          + 플러그인은 사용자가 부정적 순환을 끊고 긍정적 콘텐츠로 전환하도록 지원함

  연구와 도구의 의미

     * ""정신 건강이 나쁜 사람일수록 더 부정적이고 두려움을 유발하는 콘텐츠를 찾는 경향이 있으며, 이는 증상을 악화시키는 악순환을 만듦""
     * Digital Diet 도구는 사람들이 더 나은 콘텐츠를 선택하고 정신 건강을 관리할 수 있도록 돕기 위해 개발됨

        Hacker News 의견

     * 글로벌 정치, 기후 변화, 미세 플라스틱 등 통제할 수 없는 문제들에 대해 걱정하게 됨. 정보는 중요하지만, 지속적인 정보 유입은 도움이 되지 않음. 웹에서 소비하는 정보를 조절하는 것이 중요함. RSS를 추천함
          + Hacker News는 여전히 읽고 있음. Reddit, CNN, NYTimes 등을 제거하고 더 행복해짐
          + 정보를 얻지 못해 슬프지만, 다른 사람에 대한 분노가 줄어들어 가족과의 관계가 개선됨
          + 결국 다시 시작할 것이지만, 현재는 행복을 유지하고 싶음
     * 부정적인 감정을 유발하는 것이 돈이 되기 때문에 모든 것이 그렇게 설계됨. 국제 문제에 덜 신경 쓰고 지역 사회에 더 참여할 필요가 있음
     * 소셜 미디어의 부정적인 콘텐츠 때문에 우리가 절망적이라고 생각하게 됨. Jason Pargin의 ""I'm Starting to Worry About This Black Box of Doom"" 관련
     * 정규 표현식을 사용한 콘텐츠 차단기를 만들어 웹 페이지의 텍스트를 차단함. Google AI 해커톤에 참가함
     * 부정적인 콘텐츠를 덜 소비해야 하지만, 때로는 나쁜 기분이 병을 인식하게 해줌. 세상을 미화하지 말고, 나쁜 기분의 이유를 찾을 필요가 있음
     * 타블로이드 뉴스가 전 세계의 부정적인 지역 뉴스를 표면화함. 사회적 불균형이 모든 지역에 전파됨
     * 모든 뉴스 사이트, 소셜 미디어 등을 차단하고, 스마트폰 대신 벽돌폰을 사용하며, TV를 팔고, 인터넷 콘텐츠 차단기를 만듦. 이미지 차단기도 고려 중임
     * LLM을 사용하여 뉴스 기사를 긍정적으로 재작성하는 브라우저 확장 프로그램이 있으면 흥미로울 것임. 균형 잡힌 시각으로 기사를 생성할 수 있음
     * 소셜 미디어는 이미 죽었음. 광고가 나오면 떠남. 간단한 삶을 추구함
"
"https://news.hada.io/topic?id=18224","OAuth 제공자에게 - 잘못된 OAuth 토큰 설계 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OAuth 제공자에게 - 잘못된 OAuth 토큰 설계 모음

     * Github: 오류 처리에 200 대신 400, 401 상태 코드를 보내주세요.
     * Facebook: 오류 토큰의 error 속성을 객체 대신 문자열로 바꿔주세요.
     * Tiktok: client_key 인자를 client_id로 바꿔주세요.
     * Strava: scope 인자에 반점(,)이 아닌 띄어쓰기(%20)로 바꿔주세요.
     * Naver: 토큰 만기 일자를 문자열로 만들지 말아주세요.
     * AWS Cognito: PKCE를 사용할 때도 HTTP Basic 인증을 사용할 수 있게 만들어주세요.
     * 42, Atlassian, Box, Coinbase, Dribble, Facebook, Kakao, Line, Linear, LinkedIn, Naver, osu!, Patreon, Shikimori, Start.gg, Strava, Tiltify, Twitch, VK, WorkOS: 클라이언트 인증에 client_secret 인자 말고 HTTP Basic 인증을 사용해주세요.

   to.naver
   The ""expires_in"" parameter is represented in seconds and is a JSON number.

   네이버 저건 좀 심각하네요 ㅋㅋㅋㅋ
   expires_in을 문자열로 주다니

   출처가 어딘지 모르겟지만
   대기업에서 제공하는 서비스도
   혼(?)나긴하네요 ㅎㅎ

   ㅋㅋㅋ

   ""Your server, for whatever fucking reason, returns a string for the token expiration.""
   f word를 받은 건 네이버가 유일한데요 ㅋㅋㅋ?
"
"https://news.hada.io/topic?id=18193","1,600일간 진행된 데이터 사이언스 프로젝트의 실패","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     1,600일간 진행된 데이터 사이언스 프로젝트의 실패

     * 1,600일 동안 진행한 데이터 사이언스 프로젝트가 관심을 잃으면서 실패로 끝남
     * 텍스트 데이터를 다루는 새로운 도전을 시도하기 위해 ""뉴스티커 데이터 수집 및 분석""을 진행
          + 2020년 3월 COVID-19 관련 뉴스를 제공하는 독일 공영 뉴스 사이트 Tagesschau의 뉴스티커를 데이터 소스로 선정
          + 2022년 3분기에 COVID-19가 덜 중요해지면서 우크라이나-러시아 전쟁 관련 뉴스티커로 확장
          + 데이터 메타패턴(게시 빈도 등) 및 주제별 의미 분석 수행
     * 단기 데이터 탐색만 수행, 실질적 분석은 미완성
     * 2024년 3분기에 관심 감소 및 시간 부족으로 프로젝트 중단

데이터 수집 및 시스템 설계

     * 2020년부터 2024년까지 1,600일간 매일 뉴스 데이터의 URL을 수집하고 원시 데이터를 다운로드
          + Tagesschau 는 매일 짧은 뉴스 스토리 목록이 있으며, 각 스토리는 타임스탬프, 헤드라인, 본문 텍스트 및 멀티미디어 요소를 포함
     * 수작업과 Python 기반으로 반자동화된 데이터 파이프라인을 구축하여 비정형 데이터를 구조화된 뉴스 스니펫으로 변환함
          + URL 수집 자동화가 어려워 매일 웹사이트를 방문하여 수동으로 링크를 수집하는 방식을 택함. 이는 Tagesschau의 비구조적 URL 스키마 때문
          + 4-8주마다 Python으로 HTML 페이지를 일괄 처리하여 원시 데이터로 저장함
          + BeautifulSoup4를 활용해 HTML을 파싱하고 SQLite 데이터베이스에 저장
          + 프로젝트의 많은 부분이 자동화되었으나, 수동 ETL 파이프라인과 실제 분석은 자동화되지 않음
          + DOM 구조 변경에 대비하여 원시 HTML 데이터 보존 강조

프로젝트 실패의 교훈

    1. 스토리텔링 고려:
          + 프로젝트 초기부터 스토리텔링을 구상해 결과를 쉽게 공유할 수 있도록 설계
    2. 빠른 결과 도출:
          + 데이터를 모으기만 하지 말고, 작은 데이터셋으로 빠르게 초기 분석을 수행
          + 결과를 공개하며 작업 동기를 유지 (“Show Your Work” 접근법 활용)
    3. 자동화:
          + 데이터 수집 및 ETL 파이프라인을 최대한 자동화하여 반복 작업 최소화
          + 현재라면 LLM 기반 AI 에이전트를 활용했을 것
    4. 데이터 수집 빈도 평가:
          + 수집 주기를 미리 설정 (예: 매일 vs 30초 간격)
          + 자동화 가능한 데이터 수집 빈도를 설정
    5. 원시 데이터 저장:
          + 원시 데이터를 저장해 향후 변경된 파싱 로직에 대응 가능
    6. 클라우드 활용:
          + 간단하고 신뢰성 높은 인프라를 구축하고 실무 기술 습득 기회 마련

결론: 실패를 통한 성장

     * 실패한 프로젝트도 학습 경험이 되어 ""더 나은 데이터 실무자""가 되는데 도움이 됨
     * 데이터 과학 프로젝트의 실패는 귀중한 학습 경험이자 “전투 흉터”를 쌓는 기회
     * 자연어 처리를 통한 자동화 기회를 활용하지 못한 것이 아쉬움
     * 약 10만 건의 뉴스 스니펫 분석 기회를 놓친 것도 큰 아쉬움
     * 2024년 미국 선거 등 새로운 뉴스티커가 계속 나오고 있어 다른 이들이 이어받을 수 있음
          + 관심 있는 사람이 프로젝트를 이어가기를 희망하며, 모든 데이터를 공유할 준비가 되어 있음

   “Go out and build something!”

        Hacker News 의견

     * 이 프로젝트를 실패라고 부르기보다는 호기심으로 시도했다가 중단한 것이라고 봄. 블로그에 글을 올리고 HN에 소개된 것만으로도 성공이라고 생각함
          + 프로젝트를 완료했다면 Python을 사용하여 여러 분석에 활용될 데이터셋을 공개했을 것임
          + 원시 데이터셋을 공개하고 이를 성공으로 간주할 수 있음
          + LLMs의 발전으로 인해 이제는 AI 에이전트로 포장된 기초 모델을 고려할 것임
     * 웹 스크래핑은 여전히 어려운 부분이며, 사이트가 스크래핑을 방지하려는 노력이 많음
     * Tagesschau 웹사이트를 매일 방문하여 링크를 수집하는 수작업 과정이 있었음. 이는 게임 계획으로 적절하지 않았음
     * COVID 관련 데이터 과학 취미 프로젝트를 진행했으나, 6개월 후 흥미를 잃음. 클라우드에서 스크래퍼가 계속 작동 중임
     * 수작업 대신 RSS 피드를 활용하여 자동화했어야 했음
     * 프로젝트 초기부터 피드백을 받는 것이 중요함. 이는 프로젝트의 방향성을 조정하고 흥미를 되살릴 수 있는 기회를 제공함
     * 다양한 관심사를 아우르는 프로젝트의 역동성을 좋아함. 여러 프로젝트를 통해 배운 것을 활용하여 새로운 아이디어를 얻음
     * 제목이 오해를 불러일으킬 수 있음. 단순히 뉴스 피드를 스크래핑하는 작업은 며칠이면 설정할 수 있음
     * 개인 프로젝트를 완성하는 데 어려움을 겪는 사람들이 많음. 데이터 과학은 데이터셋에 대한 통찰을 발견하는 탐구적 작업임
     * 데이터 수집 과정에서 Tagesschau 웹사이트의 비구조적 URL 스키마 때문에 수작업이 필요했음. 안정적인 데이터 소스가 필요함
     * 웹사이트 개발자는 스크래퍼를 고려하지 않음. 고유한 데이터셋을 수집하려면 웹 개발자에게 공개 API 제공을 요청하는 것이 좋음
"
"https://news.hada.io/topic?id=18165","HN에 알림: 10년간의 개인 데이터가 있는 Google 계정 잠금 해제 도움 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN에 알림: 10년간의 개인 데이터가 있는 Google 계정 잠금 해제 도움 요청

     * Google 계정에 접근할 수 없게 되어 10년 이상의 디지털 생활이 담긴 계정을 복구하려고 애쓰고 있는 상황임

상황

     * 오늘 아침에 완전히 계정 접근이 차단됨
     * ""계정을 보호하라""는 메시지를 받음
     * 새 비밀번호와 복구 정보를 설정했지만 로그인 화면으로 계속 리다이렉트됨
     * 잠든 동안 ""비정상적인 활동"" 경고를 받음
     * 시스템이 2022년에 잃어버린 예전 전화번호를 요구함
     * g.co/recover를 통해 수십 번 복구 시도를 했으나 실패함
     * 예전 복구 이메일에 접근할 수 있지만 시스템이 이를 요구하지 않음

시도한 방법

     * 항상 사용하던 동일한 기기와 네트워크 사용 (Google Pixel)
     * 예전/새 전화번호로 여러 번 복구 시도
     * 예전/새 비밀번호 사용 (어느 것을 받아들이는지 알 수 없음)
     * 모든 공식 Google 복구 가이드를 따름

계정에 담긴 중요한 정보

     * 주요 이메일 통신
     * 비밀번호 관리자 데이터
     * 비즈니스 문서와 프로젝트
     * 개인 문서
     * Google Drive 내용
     * 연락처
     * 여러 서비스에 대한 OAuth 접근
     * 수년간의 대체 불가능한 데이터
     * 공식 채널과 온라인 리소스를 모두 소진했으며, 이 계정에 영구적으로 접근할 수 없게 될까 두려움
     * 비슷한 상황에서 계정을 성공적으로 복구한 경험이 있는 사람이나 Google 직원, 보안 전문가의 도움이 필요함
     * 이 계정은 전체 디지털 정체성을 대표하며, 어떤 지침이나 도움이 절실히 필요함

        Hacker News 의견

     * 이메일 클라이언트를 로컬 머신에 설치하여 모든 이메일을 다운로드하고, Google Drive의 모든 콘텐츠를 로컬에 복사하며, 비밀번호 관리자를 텍스트 파일로 백업하여 암호화할 것을 권장함. Google을 완전히 신뢰하지 말라는 조언임
     * EU에 거주하는 경우 Google에 주체 접근 요청을 보내 계정의 콘텐츠를 복구할 수 있음. 데이터 소유권에 대한 잘못된 정보가 있을 경우 수정 요청을 제출할 수 있음. 실패 시 관할 데이터 보호 기관에 문제를 제기할 수 있음
     * 이메일 및 비밀번호를 사용하여 24시간 간격으로 시도하고, 동일한 전화번호를 통신사에서 얻으려 하며, Google에 주체 접근 요청을 보내 데이터를 복구하려는 계획을 세움. 댓글에서 제안된 방법들이 유용하다고 언급함
     * Google에 직접 연락하는 대신 광고 캠페인을 시작하고 비용을 지불하지 않는 방법을 추천함. 이렇게 하면 실제 사람과 연결되는 지원 번호를 얻을 수 있음
     * Reddit에 교차 게시하는 것도 서비스 받는 효과적인 방법이라고 언급함
     * Google이 보조 이메일, 비밀 단어, 현재 비밀번호 등을 거부하여 Gmail과 YouTube 채널을 잃었다는 경험을 공유함. IP 주소 변경이 원인일 수 있다고 추측함
     * 디지털 정체성을 계정에 의존하는 것은 실수일 수 있으며, 4개월마다 메일박스와 중요한 데이터를 로컬에 백업하고, 물리적으로 분리된 미디어에 복사하여 보관함
     * 2018년경 비슷한 문제를 겪었으며, Google의 지원 센터에 전화를 걸어 문제를 해결했다고 회상함. 주 기기를 교체해야 했으며, 복구 이메일에서 백업/복구 코드를 확인할 것을 권장함
     * 로그인 문제를 해결하기 위해 시크릿 모드에서 로그인 시도 후 쿠키를 삭제하고 다시 시도하는 방법을 제안함. Google의 인증 보안 시스템에 문제가 있다고 언급함
     * 이메일 주소가 디지털 및 물리적 삶의 많은 부분과 연결되어 있어 불안감을 느낀다고 언급함. 이메일 주소는 소유할 수 없는 것이며 언제든지 접근이 차단될 수 있음
     * 이메일 주소가 전 세계적으로 주요 통신 수단이 된 것에 대해 불편함을 느끼며, 과거의 우편 시스템이 더 나았다고 회상함. 이메일 주소가 소유할 수 없는 것임을 강조함
"
"https://news.hada.io/topic?id=18216","GM, 로보택시 시장 철수, Cruise 운영 내부화 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GM, 로보택시 시장 철수, Cruise 운영 내부화 추진

     * GM의 Cruise 로보택시 시장 철수
          + General Motors(GM)는 Cruise 부문의 로보택시 개발에 대한 자금 지원을 중단하고, 이를 자사의 기술 팀에 통합할 계획임.
          + GM은 로보택시 시장의 경쟁 심화, 자본 배분 우선순위, 사업 성장에 필요한 시간과 자원을 이유로 들었음.
          + GM은 개인 차량에 사용할 자율주행 시스템 개발에 집중할 것임.
     * Cruise의 현재 상황과 미래 계획
          + GM은 Cruise의 지분을 97% 이상으로 늘릴 계획이며, 2025년 초까지 외부 주주로부터 남은 지분을 인수할 예정임.
          + Cruise의 연간 비용은 약 20억 달러였으며, 구조 조정으로 절반 이상 절감할 것임.
          + Honda는 일본에서의 무인 택시 서비스 계획을 재평가할 것임.
     * 경쟁사와 시장 동향
          + Alphabet의 Waymo는 여러 미국 대도시에서 상업용 로보택시 서비스를 운영 중이며, 마이애미로 확장할 계획임.
          + Tesla는 부분 자동화 주행 시스템을 사용하며, 2025년까지 캘리포니아와 텍사스에서 자율주행 택시 서비스를 시작할 계획임.
          + Amazon 소유의 Zoox는 여러 미국 도시에서 자율주행 차량을 테스트 중임.

        Hacker News 의견

     * GM이 로보택시 시장에서 철수한 이유로 경쟁 심화를 언급함. Google/Waymo가 가장 앞서 있으며, Tesla Cybertaxi, Amazon/Zoox, Uber/Yandex가 뒤따르고 있음. Cruise는 가장 정교한 자율주행 플랫폼 중 하나로 알려져 있으며, GM의 Super Cruise는 Tesla FSD와 비교될 만함. 그러나 전략적 실수로 인해 철수한 것으로 보임
     * GM 딜러십에서 Super Cruise가 테스트 드라이브에 사용되지 않는다는 약한 변명을 들음. 기술은 있지만 전략을 잘못 짜고 있는 듯함
     * Ford는 BlueCruise 구독 비용을 1/3로 낮췄으며, 이전에 70%의 마진을 기록했음. 운전자들이 기능에 흥미를 느끼지 않아 갱신하지 않는 것으로 보임. 자율주행에 대한 관심이 전반적으로 식어가는 중임
     * 과거에 유출된 라이다 장애물 감지 알고리즘에 대한 흥미로운 이야기. Velodyne HDL-32E를 위한 코드로, 장애물 감지에 매우 효과적임
     * Cruise 차량이 SF에서 많았지만 서비스는 Waymo보다 나빴음. 2023년 10월의 사고가 큰 영향을 미쳤음
     * Waymo가 경쟁이 필요함. Tesla는 상업적 파일럿 프로그램을 시작하지 않았음
     * GM이 여러 방면에서 자금 손실을 겪고 있음. 중국의 EV 가격 전쟁에서 50억 달러 손실 예상
     * GM이 재정 전문가들에 의해 운영되고 있다는 증거. Cruise를 창립자에게 되팔 가능성 언급
     * GM이 Cruise의 기술을 승용차에 활용하려는 원래 계획으로 돌아간 것으로 보임. Waymo는 매주 17만 5천 번의 탑승을 제공하며 시장을 확장 중임
     * 자율주행 분야에 대한 부정적인 소식. 과거 수십억 달러의 VC 투자가 있었으나 대부분 실패함. 자율주행은 도시별로 해결되어야 하며, 지역 정부가 전용 차선을 만들어야 함
     * GM이 로보택시 유닛에 100억 달러 이상을 투자했으나 Cruise 서비스를 포기함. 결과가 나오지 않는 상황에 대한 의문 제기
     * Ford가 Argo를 중단하고 Latitude로 전환하여 ADAS 기술에 집중한 사례 언급. Latitude가 실제로 무엇을 출시했는지에 대한 궁금증 있음
"
"https://news.hada.io/topic?id=18180","펀코에 의해 중단된 Itch.io","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           펀코에 의해 중단된 Itch.io

     * 이슈 발생
          + itch.io가 Funko의 ""Funko Pop""에 의해 도메인이 비활성화됨.
          + Brand Shield라는 AI 기반 브랜드 보호 소프트웨어가 잘못된 피싱 보고서를 생성하여 도메인 등록기관인 iwantmyname에 전달함.
          + iwantmyname은 itch.io의 응답을 무시하고 도메인을 비활성화함.
     * 커뮤니티 반응
          + 많은 사용자들이 itch.io의 빠른 복구에 감사의 뜻을 전함.
          + 일부 사용자들은 AI 기술이 잘못된 데이터를 생성하여 문제를 일으킨다고 비판함.
          + Funko와 Brand Shield에 대한 법적 조치를 요구하는 목소리가 있음.
     * 기술적 논의
          + DNS 및 EPP 코드에 대한 기술적 논의가 진행됨.
          + 서버 및 클라이언트 EPP 코드가 도메인 상태에 어떻게 영향을 미치는지 설명함.
     * AI 및 브랜드 보호에 대한 비판
          + AI가 인간의 지능을 대체할 수 없다는 의견이 많음.
          + AI를 사용한 브랜드 보호가 오히려 문제를 일으킨다는 비판이 있음.
     * 법적 대응 제안
          + Funko와 Brand Shield에 대한 소송을 제안하는 의견이 다수 존재함.
          + 소송을 통해 잃어버린 수익과 명예를 회복해야 한다는 주장.
     * 기타 의견
          + Funko의 브랜드 보호 전략에 대한 비판적인 의견이 많음.
          + AI 기술을 사용하는 Funko의 접근 방식에 대한 조롱 섞인 반응도 있음.

        Hacker News 의견

     * itch.io 운영자가 Funko Pop 게임의 팬 페이지가 BrandShield의 자동화된 시스템에 의해 문제를 겪었음을 설명함
          + 팬 페이지가 ""사기 및 피싱""으로 보고되어 도메인이 비활성화되었음
          + Linode는 문제를 해결했으나 iwantmyname는 응답하지 않음
          + 소셜 미디어를 통해 문제를 직접 해결하려고 시도함
     * 다른 사용자는 비슷한 경험을 공유함
          + 성과 같은 이름의 회사가 상표권을 가지고 있어 도메인이 자동으로 비활성화됨
          + 지원팀의 소통 부족으로 인해 다른 등록기관으로 변경함
     * Brand Shield와 같은 AI 소프트웨어가 문제를 일으킨다는 의견
          + 고객의 평판과 수익에 손해를 끼친다고 주장함
     * Notebook.ai도 유사한 문제를 겪었음
          + 사용자 콘텐츠로 인해 상표 침해 통지를 받았고, 계정이 일시적으로 차단됨
          + Heroku의 지원팀 덕분에 빠르게 해결됨
     * iwantmyname의 등록기관에 대한 불만
          + 도메인이 복구되었으나 등록기관의 책임 회피에 대한 불만
     * 웹 활동이 AI나 알고리즘에 의해 쉽게 사라질 수 있다는 우려
          + YouTube 채널 삭제, Facebook 게시물 공유 제한 등의 경험을 공유함
     * Funko와 Mattel의 라이선스 관련 정보
          + Funko가 Disney 브랜드의 저품질 제품을 판매하는 것에 대한 우려
          + Mattel이 Disney와의 라이선스 계약을 맺고 있음
     * 법적 조치 가능성에 대한 질문
          + itch.io가 오프라인 상태로 인한 수익 손실을 입증할 수 있다면 Funko나 Brand Shield에 대한 소송 가능성 문의
"
"https://news.hada.io/topic?id=18213","jq로 JSON 변환하기: 인터랙티브 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        jq로 JSON 변환하기: 인터랙티브 가이드

     * jq는 JSON 데이터를 다루기 위한 명령줄 도구로, 대부분의 Linux 배포판에 기본 설치되어 있음
     * JSON 데이터를 보기 좋게 출력(pretty print)하거나, 필터를 사용해 데이터를 변환하는 데 유용함
     * 개발자들이 꼭 배워야 할 5가지 CLI 도구에 포함될 정도로 강력하며, JSON 데이터를 다루는 다양한 작업을 간단히 수행 가능

jq 설치 및 기본 사용법

     * 설치 방법
          + jq는 대부분의 패키지 관리자에서 설치 가능하며, 직접 바이너리를 다운로드하거나 소스에서 빌드 가능
          + 설치 후 jq 명령어를 사용해 작동 확인 가능
     * 기본 사용 예
          + JSON 데이터를 보기 좋게 출력:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq

     * JSON 필터 예시
          + 특정 조건에 맞는 데이터 필터링:
curl 'https://jsonplaceholder.typicode.com/users' | jq \
'.[] | select(.address.city == ""South Christy"") | {name, username, email}'

jq의 주요 기능

    기본 필터

     * Identity 필터
          + 입력 데이터를 변경 없이 출력:
echo '{""id"":1,""name"":""Leanne Graham"",""website"":""hildegard.org""}' | jq '.'

     * 특정 필드 접근
          + JSON 객체의 특정 필드 선택:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq '.name'

          + 중첩 필드 접근:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq '.address.zipcode'

    배열 처리

     * 배열 요소 접근
          + JSON 배열에서 특정 인덱스의 요소 선택:
curl 'https://jsonplaceholder.typicode.com/users' | jq '.[0]'

     * 배열 슬라이싱
          + 특정 범위의 하위 배열 추출:
curl 'https://jsonplaceholder.typicode.com/users' | jq '.[3:6]'

     * 배열 반복 처리
          + 배열의 각 요소에 대해 필터 적용:
curl 'https://jsonplaceholder.typicode.com/users' | jq '.[] | {name, email}'

    새 JSON 생성

     * 새 객체 생성
          + 선택한 필드로 새로운 JSON 객체 생성:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq \
'{""name"": .name, ""email"": .email, ""company"": .company.name}'

     * 새 배열 생성
          + 변환된 데이터로 배열 생성:
curl 'https://jsonplaceholder.typicode.com/users' | jq \
'[.[] | {name: .name, email: .email, company: .company.name}]'

jq 고급 기능

    함수 활용

     * 길이 계산
          + 문자열 길이 계산:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq '.name | length'

     * 키 추출
          + 객체의 키를 배열로 반환:
curl 'https://jsonplaceholder.typicode.com/users/1' | jq 'keys'

     * 맵 함수
          + 배열의 각 요소에 필터 적용:
curl 'https://jsonplaceholder.typicode.com/users' | jq \
'map({name: .name, city: .address.city})'

    데이터 선택

     * 조건에 맞는 데이터 선택
          + 특정 조건을 만족하는 데이터 필터링:
curl 'https://jsonplaceholder.typicode.com/users' | jq \
'.[] | select(.address.city == ""South Christy"")'

JSON 변환과 활용

     * 고급 JSON 변환
          + 데이터를 그룹화하거나 통계를 계산하는 필터:
curl 'https://jsonplaceholder.typicode.com/users' | jq \
'group_by(.address.city) |
map({
  city: .[0].address.city,
  user_count: length,
  users: [.[] | {name: .name, username: .username}]
})'

     * 대규모 JSON 처리
          + 대량의 JSON 데이터를 효율적으로 처리:
curl 'https://api.github.com/repos/apache/apisix/contributors?per_page=100' | jq \
'sort_by(.contributions) | reverse | map({username: .login, contributions}) | .[0:5]'

     * jq Playground에서 실습해보기 가능

   요약 감사합니다! 진짜 꿀정보네요

     개발자들이 꼭 배워야 할 5가지 CLI 도구에 포함될 정도로 강력하며,

   그런데 나머지 4개 CLI 도구가 무엇인지도 궁금한데, 그건 글에는 언급이 안되어서 맥거핀화됬네요..

   https://navendu.me/posts/jq-interactive-guide/….

   원문을 보니

     jq is on every “five command line tools to learn as a developer” video on YouTube.
     라는 문구가 있네요.

   나머지 4개가 특정된게 아니고, 저런류의 CLI tool 추천 영상에 항상 언급되나 봐요ㅋㅋ
"
"https://news.hada.io/topic?id=18137","루마니아 법원, 대통령 선거 1차 투표 결과 무효화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      루마니아 법원, 대통령 선거 1차 투표 결과 무효화

     * 루마니아 헌법재판소는 대통령 선거 1차 투표 결과를 무효화함. 이는 2차 투표가 예정되기 며칠 전의 일이며, 정부는 새로운 투표 날짜를 결정해야 함.
     * 1차 투표에서는 거의 알려지지 않은 극우 성향의 나토 회의론자 칼린 게오르게스쿠가 승리했으며, 그는 이전에 블라디미르 푸틴을 칭찬한 적이 있음.
     * 법원의 결정은 해외에서 진행된 대규모 영향력 작전으로 인해 투표 결과가 왜곡되었다는 정보 문서가 비밀 해제된 후 내려짐.
     * 게오르게스쿠는 법원의 결정을 ""형식적인 쿠데타""라고 비판하며, 다시 대통령 선거에 출마할 의사를 밝힘.
     * 마르셀 치올라쿠 총리는 러시아의 개입으로 인해 루마니아 국민의 투표 결과가 왜곡되었다고 주장하며 법원의 결정을 지지함.
     * 클라우스 요하니스 대통령은 새로운 대통령이 선출될 때까지 직무를 유지할 것이라고 발표함.
     * 법원은 선거 무효화 시 12월 22일에 재개될 예정이었으나, 정부에 전체 선거 과정을 다시 진행할 것을 요청함.
     * 지난주 법원은 틱톡이 게오르게스쿠에게 ""특혜를 줬다""는 주장에 따라 1차 투표의 재검표를 명령함.
     * 엘레나 라스코니는 법원의 결정을 ""불법적""이고 ""비도덕적""이라고 비판하며, 민주주의가 훼손되었다고 주장함.
     * 게오르게스쿠는 자신이 모스크바의 인물이 아니라고 부인하며, 정치권이 그의 성공을 견디지 못하고 그를 막으려 한다고 주장함.
     * 루마니아는 정치적으로 새로운 국면에 접어들었으며, 앞으로의 상황은 불확실함.

        Hacker News 의견

     * 루마니아의 대선 상황에 대해 많은 사람들이 ""이길 후보가 이기지 못해서 선거가 취소되었다""라고 요약하고 있음
          + Calin Georgescu가 첫 번째 라운드에서 예상치 못하게 승리했으며, 여론조사에서는 5% 미만으로 나왔음
          + 후보들은 선거 캠페인 지출을 보고해야 하지만, Georgescu는 아무것도 지출하지 않았다고 보고했음. 이는 불법임
          + TikTok 인플루언서들이 제3자 회사를 통해 후보를 긍정적으로 소개하는 대가로 돈을 받았다고 주장함. 이는 루마니아 법에 따라 ""선거 광고""로 태그되어야 함
          + TikTok이 중국 소유이고 미국에서 금지될 가능성이 있어, 국가 행위자들이 알고리즘을 통해 Georgescu를 밀어주고 있다는 강한 의심이 있음
          + 이는 강력한 풀뿌리 운동이 아니라, 대규모 봇 네트워크가 그의 이름과 TikTok 페이지를 스팸하여 인기를 끌어올린 것임
          + Georgescu는 NATO에 반대하는 발언을 했으며, Iron Guard를 지지한다고 밝힘. 이는 루마니아에서 불법임
          + 투명성을 위해 자산을 신고해야 하지만, Georgescu는 모든 자산을 신고하지 않았으며, 돈세탁 의혹도 있음
          + 국가 방위 및 안보를 담당하는 최고 국방위원회가 형사 조사를 요청했으며, 현재 초기 단계임
          + Georgescu의 상대인 Elena Lasconi도 법원의 판결을 ""불법""이고 ""비도덕적""이라고 비난함
          + 선거가 재실시될 예정이지만, 이미 형성된 의견 때문에 새로운 투표가 큰 변화를 가져오지 않을 것임
          + 러시아의 영향력이 있는 주제에 많은 댓글이 달림
          + TikTok이 잘못된 선택을 했으며, 이는 여러 지역에서 심각한 타격을 줄 것임
          + 이는 러시아가 원하는 결과로, 민주적 과정을 약화시키고 있음
          + 충분한 자원이 있는 사람은 선거 결과를 무효화할 수 있다는 위험한 선례를 남김
          + 의회 선거도 취소할 것인지에 대한 의문이 제기됨
          + 민주주의를 왜 이렇게 다루고 있는지에 대한 비판이 있음
          + EU가 TikTok을 금지할 때가 되지 않았는지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=18219","WPEngine, Inc. 대 Automattic - 예비 금지 명령 신청에 대한 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            WPEngine, Inc. 대 Automattic - 예비 금지 명령 신청에 대한 결정

법적 문서 요약

     * 사건 배경
          + WPEngine, Inc.는 Automattic Inc.와의 법적 분쟁에서 예비 금지 명령을 요청함.
          + WordPress는 사용자가 웹사이트를 쉽게 구축하고 유지할 수 있도록 하는 오픈 소스 소프트웨어임.
          + WPEngine은 WordPress 기반 웹사이트를 위한 호스팅 플랫폼, 플러그인, 테마 등을 제공하는 기술 회사임.
     * WPEngine의 역할
          + WPEngine은 WordPress 커뮤니티를 지원하고 교육 자원을 개발함.
          + WPEngine의 비즈니스는 WordPress 오픈 소스 플랫폼에 기반을 두고 있음.
          + WPEngine은 WordPress 웹사이트와 호환되는 여러 인기 있는 플러그인을 개발함.
     * Automattic 및 Mullenweg의 역할
          + Automattic은 WPEngine과 경쟁하는 WordPress 웹사이트의 웹 호스팅 제공자임.
          + Mullenweg는 Automattic의 창립자이자 CEO이며, WordPress의 공동 창립자임.
          + Mullenweg는 WordPress.org의 도메인 소유자이자 웹사이트 관리자임.
     * 분쟁의 원인
          + Automattic의 CFO는 WPEngine에 큰 금액의 로열티를 요구하며, 이를 거부할 경우 '전쟁'을 벌이겠다고 위협함.
          + WPEngine은 이러한 요구를 거부하였고, 그 결과로 WordPress.org에 대한 접근이 차단됨.
     * WPEngine의 대응
          + WPEngine은 Automattic의 요구를 거부하고 법적 조치를 취함.
          + WPEngine은 WordPress.org에 대한 접근이 차단되면서 플러그인 업데이트에 어려움을 겪음.
     * 법원의 결정
          + 법원은 WPEngine의 예비 금지 명령 요청을 수정하여 승인함.

        Hacker News 의견

     * Matt Mullenweg의 발언이 WPEngine의 계정 접근을 차단하고 ACF 플러그인을 변경할 권리가 있다고 주장했으나, WPEngine 경영진의 선언에 의해 그 취약점이 경미하다고 밝혀짐
          + Matt가 자신의 행동에 대해 언급하면서 스스로를 곤경에 빠뜨렸다는 의견이 있음
          + 법원의 명령은 체크박스를 제거하고, ACF를 WPEngine에 반환하며, 웹사이트 접근을 복원하고, 보증금이 필요 없음을 의미함
     * Wordpress의 모든 커뮤니티 자원을 재단에 포함시키고, 실제 이사회를 구성하며, 기금을 기부하고, 라이선스와 커뮤니티의 개방적 정신에 맞는 거버넌스 및 기여 시스템을 설정하는 것을 고려해야 한다는 의견이 있음
          + Drupal이 이 부분에서 잘하고 있으며, Dries가 이에 대한 흥미로운 글을 작성했음을 언급함
     * WPEngine 고객 목록이 포함된 ""domains.csv"" 파일을 삭제해야 한다는 법원의 명령이 있었으며, 이와 관련된 GitHub 저장소에서도 삭제가 필요함
          + 목록에 더 많은 사이트가 추가되었으므로 명령을 집행하기 위한 두 번째 청문회가 열릴 것으로 예상됨
     * Matt의 Hacker News 댓글이 그에게 불리하게 사용되었음을 언급함
          + WPEngine이 명령을 받게 된 더 중요한 결과는 WordPress 로그인 체크박스를 제거하는 것임
     * 이 사건이 처음 발생한 이유에 대한 추측이 있으며, 돈을 받을 때는 매우 신중해야 한다는 의견이 있음
          + Matt가 투자자들로부터 압박을 받아 이 방법이 유일한 해결책이라고 생각했을 가능성이 있다고 추측함
          + 훌륭한 유산이 아무런 수익 없이 사라지는 것을 보는 것이 안타깝다는 의견이 있음
     * WPEngine과 관련된 엔티티의 wordpress.org 접근을 복원하는 것이 매우 어색한 상황이 될 것임
     * Automattic에 대한 큰 판결이며, 이런 명령을 받기 위해서는 이길 수 있는 사건임을 증명해야 하고, 현재 공공이 피해를 입고 있으며 재판까지 기다릴 수 없음을 증명해야 함
          + 명령은 거의 모든 관련 사항을 다루며, ACF 반환, 웹사이트 추적기 제거, 체크박스 제거 등을 포함함
     * Matt가 법적으로 서비스를 제공해야 하는 이유에 대한 질문이 있음
          + ACF 상황은 더 명확하게 행동 가능한 것으로 보이나, 다른 것들도 매우 흥미롭다는 의견이 있음
     * WP 엔진을 좋아하지 않는 WP 개발자로서, 이번 결과가 유일하게 합리적이고 공정한 결과였다는 의견이 있음
          + ""Secure Custom Fields"" 사건은 적어도 10년 동안 오픈 소스에서 가장 심각한 사건 중 하나로, 매우 충격적이라는 의견이 있음
          + Matt가 자신의 입장을 재고하고, 너무 많은 역할에서 물러나기를 바람
     * Matt가 명령을 따를지에 대한 의문이 있으며, 그의 자존심이 이를 허락하지 않을 것이라는 느낌이 있음
"
"https://news.hada.io/topic?id=18172","영국, 시리얼·머핀·버거의 주간 TV 광고 금지 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     영국, 시리얼·머핀·버거의 주간 TV 광고 금지 조치

   죄송하지만, 제공된 콘텐츠에는 요약할 수 있는 정보가 없습니다. 접근이 거부된 페이지에 대한 설명만 포함되어 있습니다. 다른 콘텐츠나 질문이 있다면 도와드리겠습니다.

        Hacker News 의견

     * 도박 광고도 금지해야 한다는 의견이 있음. 담배 광고를 금지한 후 중독성 있는 제품 광고의 위험성을 잊은 것 같음
          + YouTube와 TikTok 같은 온라인 플랫폼의 광고에 대한 우려가 있음. 요즘 아이들과 청소년들은 TV를 거의 보지 않음
          + 광고 없는 세상을 경험해보자는 의견이 있음. 이는 과소비로 인한 환경 부담을 줄일 수도 있음
     * 아침 시리얼이 건강에 해롭다는 것을 이해하지 못했음. 그러나 자연산 오트밀과 무가당 요구르트는 새로운 규제에 해당되지 않음
          + ""즉석 섭취""라는 표현이 모든 시리얼에 적용된다는 것을 명확히 해야 함
     * 다른 나라들도 광고 규제를 시행해야 한다는 의견이 있음. 특히 어린이들이 과도한 설탕과 지방 섭취에 중독되지 않도록 해야 함
          + 어린이들이 특정 브랜드의 맛을 갈망하도록 만드는 것은 무책임한 행동임
     * 광고 금지가 너무 광범위하다는 의견이 있음. 어린이들은 부모가 주는 음식을 먹을 수밖에 없음
          + 일부 냉동 치킨 너겟은 좋은 단백질 비율을 가지고 있음
     * 광고를 전면 금지하는 것은 어떨까라는 의견이 있음. 광고가 없으면 TV와 인터넷의 많은 콘텐츠가 사라질 것임
          + YouTube는 과거의 모습으로 돌아갈 것이고, Google 검색 결과도 광고 없는 상태가 될 것임
     * TV 광고만으로는 충분하지 않다는 의견이 있음. 슈퍼마켓에서도 어린이들이 보는 곳곳에 정크푸드 광고가 있음
     * 미국이 의약품 광고를 금지했으면 좋겠다는 의견이 있음
     * 안정적인 소득이 없는 사람들에게 광고하는 것이 허용되는 것이 이해되지 않는다는 의견이 있음. 특히 어린이들에게 광고하는 것은 더욱 그렇다는 의견이 있음
"
"https://news.hada.io/topic?id=18156","Postgres 활용 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Postgres 활용 방법

목표 및 영감

     * 이 저장소의 목표는 Postgres를 모든 것에 사용하는 방법을 보여주는 것임.
     * Amazing CTO의 기사와 @cpursley의 GitHub gist에서 영감을 받음.

왜 이 목록을 유지하는가?

     * 매주 Postgres 위에 새로운 도구나 사용 방법이 등장하므로, 이를 기록할 장소가 필요함.
     * 다른 예시가 있다면 PR을 제출할 수 있음.

목차

     * 블로그 게시물 및 기사
     * 크론 작업
     * 메시지 큐
     * 분석
     * GIS 및 매핑
     * 감사 로그
     * 접근 제어 및 권한 부여
     * 검색
          + 전체 텍스트
          + 벡터
     * 시계열
     * 열 지향
     * NoSQL
     * 그래프 데이터
     * 외부 데이터
     * 대체 쿼리 언어
     * HTTP
     * API
     * 이벤트, 복제, CDC
     * 캐싱
     * 단위 테스트
     * HTML 및 애플리케이션
     * 그래픽 및 시각화
     * 마이그레이션
     * 성능 튜닝
     * 확장 및 저장
     * 대시보드 및 UI
     * 데이터 시각화
     * 패키지 관리
     * 언어 서버
     * 기타
     * 보너스: Supabase를 포함하는 항목 수

블로그 게시물 및 기사

     * 코드를 데이터베이스 함수로 이동하여 단순화
     * 모든 것에 Postgres 사용
     * PostgreSQL은 세계 최고의 데이터베이스
     * Postgres가 데이터베이스 세계를 장악하고 있음
     * Hacker News 토론

크론 작업

     * citusdata/pg_cron
     * cybertec-postgresql/pg_timetable

메시지 큐

     * Postgres 큐 기술 선택에 대한 글
     * tembo-io/pgmq
     * SKIP LOCKED
     * riverqueue/river
     * sequinstream/sequin: Postgres에서 CDC를 위한 도구로, Kafka 및 SQS와 같은 스트리밍 플랫폼 및 큐로 Postgres 행과 변경 사항을 쉽게 스트리밍할 수 있음.
     * janbjorge/pgqueuer: PostgreSQL을 활용한 효율적인 작업 큐잉을 위한 Python 라이브러리

분석

     * pg_analytics: Postgres를 빠른 OLAP 데이터베이스로 변환
     * pg_duckdb: DuckDB를 위한 공식 Postgres 확장

GIS 및 매핑

     * postgis/postgis

감사 로그

     * arkhipov/temporal_tables
     * supabase/supa_audit
     * pgMemento/pgMemento
     * pgaudit/pgaudit

접근 제어 및 권한 부여

     * arkhipov/acl
     * pgcrypto 문서
     * michelp/pgjwt
     * supabase.com의 데이터베이스 보안 가이드

검색

    전체 텍스트

     * Postgres 전체 텍스트 검색 관련 유용한 링크 모음
     * paradedb/paradedb
     * Postgres 전체 텍스트 검색과 다른 검색 기술 비교

    벡터

     * pgvector/pgvector
     * tensorchord/VectorChord: 확장 가능한 고성능 벡터 유사성 검색을 위한 PostgreSQL 확장
     * timescale/pgai: Postgres 내에서 RAG, 시맨틱 검색 및 기타 AI 애플리케이션 개발을 허용하는 PostgreSQL 확장
     * timescale/pgvectorscale: pgvector를 보완하는 DiskANN 벡터 인덱스 구현

시계열

     * timescale/timescaledb
     * tembo-io/pg_timeseries
     * pg_timeseries 소개: PostgreSQL을 위한 오픈 소스 시계열 확장

열 지향

     * hydradatabase/hydra
     * citusdata/cstore_fdw

NoSQL

     * JSON 데이터 저장 및 인덱싱에 대한 PostgreSQL 문서
     * robconery/dox
     * ferretdb.com
     * PostgreSQL에서 JSONB를 효과적으로 저장 및 인덱싱하는 방법

그래프 데이터

     * age.apache.org

외부 데이터

     * supabase/wrappers

대체 쿼리 언어

     * kaspermarstal/plprql
     * supabase.github.io/pg_graphql
     * dosco/graphjin

HTTP

     * pramsey/pgsql-http
     * supabase/pg_net

API

     * PostgREST/postgrest
     * hasura/graphql-engine
     * postgraphile.org
     * supabase.github.io/pg_graphql

이벤트, 복제, CDC

     * Postgres를 사용하는 애플리케이션을 위한 Notifier 패턴
     * SQL NOTIFY 문서
     * cpursley/walex
     * PeerDB-io/peerdb
     * debezium/debezium
     * 2ndQuadrant/pglogical

캐싱

     * martinheinz.dev 블로그
     * readysettech/readyset

단위 테스트

     * theory/pgtap
     * peterldowns/pgtestdb

HTML 및 애플리케이션

     * SQLpage
     * Omnigres
     * pg_render
     * plmustache

그래픽 및 시각화

     * pgSVG

마이그레이션

     * purcell/postgresql-migrations
     * bytebase.com
     * xataio/pgroll
     * stripe/pg-schema-diff

성능 튜닝

     * Supabase Index Advisor
     * Dexter
     * HypoPG
     * pg_hint_plan
     * PGHero

확장 및 저장

     * Cloudflare가 15개의 PostgreSQL 클러스터로 초당 5,500만 요청을 처리한 방법
     * supabase/supavisor
     * pg-sharding/spqr
     * orioledb.com: 디스크 및 메모리 엔진의 장점을 결합한 PostgreSQL 확장

대시보드 및 UI

     * Baserow
     * NocoDB
     * AppSmith

데이터 시각화

     * Evidence
     * Metabase

패키지 관리

     * pgxman/pgxman
     * supabase/dbdev

언어 서버

     * supabase/postgres_lsp

기타

     * 매우 포괄적인 Postgres 도구 목록
     * Aurora DSQL에서 지원되지 않는 PostgreSQL 기능 목록

보너스: Supabase를 포함하는 항목 수

     * 11개

        Hacker News 의견

     * Postgres를 모든 것에 사용하지 말고, 100명 이상의 엔지니어로 확장할 때는 각 단위가 자체 Postgres를 갖도록 논리적, 물리적 경계를 설정하는 기술적 리더십이 필요함
          + 많은 CTO들이 이 어려운 부분을 수행하지 않음
     * Postgres 인덱스가 스킵을 지원하지 않으며, 문자열에 널 문자(\u0000)를 포함할 수 없는 점이 불편함
          + Postgres는 훌륭하지만 몇 가지 이상한 결함이 있음
     * 데이터베이스에서 생성된 API를 팀 외부 사람들에게 노출하지 않는 것이 좋음
          + 데이터 저장 방식을 변경하는 데 제한이 생김
          + 이 주제에 대해 이전에 글을 썼으며, 의견이 크게 변하지 않음
     * PGQueuer는 Python을 위한 경량 작업 큐로, PostgreSQL을 기반으로 하며 SKIP LOCKED를 사용하여 효율적이고 안전한 작업 처리를 제공함
          + Postgres를 이미 사용 중이고 추가 인프라 없이 Python 네이티브 방식으로 백그라운드 작업을 관리하고 싶다면 PGQueuer를 고려할 만함
     * MariaDB/MySQL과 PostgreSQL을 비교한 결과, JSON, 시간 테이블, 컬럼 및 벡터 저장소 등 많은 확장 기능이 존재함을 발견함
          + LISTEN/NOTIFY 기능은 부족하지만, 많은 레거시 앱에서 사용되지 않음에도 불구하고 놀랍게도 따라잡고 있음
     * 오픈소스 BM25 검색을 PL/pgSQL에서 제공하며, Rust 확장을 사용할 수 없는 경우에 유용함
          + pgvector와 Reciprocal Rank Fusion을 사용한 하이브리드 검색 제공
     * ""Amazing CTO""의 기사에서 영감을 받았다는 언급을 보고 기쁨을 느낌
     * 하나의 API로 많은 기능에 접근할 수 있는 이점이 많음
          + 메시지 큐와 통합하는 대신 INSERT를 통해 간단하게 처리 가능함
          + 벡터 검색도 당연히 하나의 데이터베이스로 처리 가능함
          + Postgres를 사용하여 HTML을 생성하는 것은 의문이며, 사용자 인터페이스를 만드는 데 적합하지 않을 것 같음
     * Postgres 데이터베이스를 자체 호스팅하는 방법에 대한 좋은 자료를 찾고 있음
          + 백업, 최적화 등 최선의 방법을 알고 싶음
     * Apache Age를 그래프 데이터에 통합하는 데 2주를 보냈지만, 프로젝트가 오래되고 혼란스러움을 깨달음
          + DGraph로 더 나은 결과를 기대하고 있지만, 그래프 데이터베이스는 불안정한 상태임
"
"https://news.hada.io/topic?id=18188","헬스케어 임원 살인 사건 관련 소프트웨어 개발자 체포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     헬스케어 임원 살인 사건 관련 소프트웨어 개발자 체포

     * Luigi Mangione: CEO 총격 용의자에 대한 정보
          + Luigi Mangione는 United Healthcare의 CEO를 뉴욕에서 총격으로 사망하게 한 사건과 관련하여 체포된 26세 남성임.
          + 경찰은 그를 펜실베이니아 알투나의 맥도날드에서 인식하고 체포했으며, 그에게서 미국 의료 시스템에 대한 불만을 언급한 3페이지의 손으로 쓴 문서를 발견했음.
          + 현재 펜실베이니아에서 무기 및 가짜 신분증 혐의로 기소되었으며, 뉴욕에서는 곧 살인 혐의가 추가될 예정임.
     * Luigi Mangione의 배경
          + 메릴랜드 출신으로 샌프란시스코와도 연관이 있으며, 뉴욕에서는 이전 체포 기록이 없음.
          + 볼티모어의 사립학교인 Gilman School의 졸업생으로, 학급에서 가장 높은 학업 성취를 이룬 발레딕토리안으로 선정되었음.
          + 펜실베이니아 대학교에서 컴퓨터 과학 학사 및 석사 학위를 받았으며, 비디오 게임 개발 클럽을 창립했음.
          + TrueCar에서 데이터 엔지니어로 일했으며, 이전에는 Fixarixis에서 프로그래밍 인턴으로 근무했음.
          + 볼티모어 지역의 저명한 가문 출신으로, 가족 사업에는 컨트리 클럽과 요양원이 포함됨.
     * 체포 당시 상황
          + 맥도날드에서 한 고객이 직원에게 신고하여 체포됨.
          + 3D 프린터로 제작된 검은 권총, 소음기, 9mm 탄환이 장전된 탄창을 소지하고 있었음.
          + 여러 신분증을 소지하고 있었으며, 그 중 하나는 가짜 뉴저지 신분증이었음.
          + 체포 당시 뉴욕에 최근 방문했는지 묻자 조용해지고 떨기 시작했음.
     * 소셜 미디어 프로필
          + Goodreads에서 Theodore Kaczynski의 ""Industrial Society and Its Future""에 4성 평가를 남김.
          + Kaczynski는 1978년부터 폭탄 테러를 벌여 3명을 살해하고 수십 명을 부상시킨 인물로, 그의 행동을 극단적인 정치 혁명가의 것으로 보았음.
     * 보험 CEO 살해 사건과 미국 의료 시스템에 대한 분노
          + 이 사건은 미국 의료 시스템에 대한 분노를 드러내고 있음.

        Hacker News 의견

     * 용의자는 가짜 신분증, 총기, 소음기, 가면, 그리고 동기를 설명하는 자필 선언문을 소지하고 있었음. 경찰은 그를 찾은 것이 완전한 우연이라고 밝힘
          + 어제 그를 알고 있었다는 경찰의 말은 거짓말이었음
          + 보안 명목으로 사생활을 포기했지만, 결국 용의자가 잡힌 것은 연방 수사관의 운 덕분이었음
     * 용의자는 Unabomber의 선언문에 대해 Goodreads에서 4성 평가를 남겼으며, Unabomber를 ""정치적 혁명가""로 묘사했음
          + 선언문을 미친 사람의 것으로 치부하기 쉽지만, 현대 사회에 대한 예측이 정확했음을 무시할 수 없음
          + 그는 폭력적인 인물로, 무고한 사람들을 해쳤으며, 이는 극단적인 정치적 혁명가의 행동으로 볼 수 있음
     * 용의자가 소프트웨어 개발자라는 사실은 특별히 중요하지 않음. 현재 미국에서 소프트웨어 개발자는 일반적인 직업 선택임
     * 오타가 AP에서 비롯된 것 같으며, Fixarixis는 Firaxis로 추정됨. 이는 용의자의 메릴랜드와의 연관성과 관련 있음
     * Ted Kacyzinski의 책에 대한 Goodreads 댓글이 흥미로움
     * 컴퓨터 과학 석사 학위를 얻기 위해 더 이상 똑똑할 필요가 없다는 증거로 이 사람과 내가 인터뷰한 주니어 개발자들이 있음
     * 어떻게 반쪽 얼굴 사진만으로 그를 알아봤는지 의문임. 동부 해안에는 그런 외모를 가진 사람이 수백만 명 있을 것임
"
"https://news.hada.io/topic?id=18189","Randflake ID: 분산, 균일, 예측 불가능, 고유 임의 ID 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Randflake ID: 분산, 균일, 예측 불가능, 고유 임의 ID 생성기

   Randflake ID는 분산 환경에서 사용할 수 있는 64비트 고유 식별자 생성 시스템입니다.

  주요 특징

     * 예측 불가능성: 블록 암호를 사용하여 다음/이전 ID 예측이 불가능
     * 고유성 보장: 타임스탬프, 노드 ID, 시퀀스 번호를 조합
     * 분산 환경 지원: 최대 131,072개의 노드 지원
     * 높은 처리량: 초당 최대 17,179,869,184개의 ID 생성 가능

  구조

     * 타임스탬프: 30비트
     * 노드 ID: 17비트
     * 시퀀스: 17비트

  장점

     * 데이터베이스 조회 없이 고유 ID 생성
     * 균일한 분포로 샤딩 키로 활용 가능
     * 내부 추적 기능 제공 (비밀키 보유자에 한정)

  활용

   임대 기반의 노드 ID 조정 메커니즘을 통해 분산 시스템에서 효율적으로 운영 가능하며, 글로벌 규모의 애플리케이션에서 활용하기에 적합합니다.
"
