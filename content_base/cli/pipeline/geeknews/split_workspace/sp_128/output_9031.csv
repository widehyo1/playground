"https://news.hada.io/topic?id=16093","Show GN: PackPack.AI：AI로 당신의 ‘컬렉션’ 경험을 재구성합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: PackPack.AI：AI로 당신의 ‘컬렉션’ 경험을 재구성합니다

   PackPack은 AI가 구동하는 북마크 관리 도구로, 뉴스와 소셜 미디어 등의 온라인 리소스를 맞춤형으로 저장할 수 있습니다. AI를 사용하여 콘텐츠를 정리하고 저장합니다. PackPack을 사용하여 북마크 관리 방식을 완전히 바꾸고 더 스마트하게 컬렉션을 관리하세요.

   💯 맞춤형 지원: 소셜 미디어(Twitter, YouTube), 라이프스타일 및 쇼핑 플랫폼(Amazon, Shein, Walmart), 뉴스 사이트(TechCrunch, ProductHunt, Reddit, HackerNews) 등에서 맞춤형 저장 경험을 제공하여 저장된 콘텐츠가 깔끔하고 시각적으로 매력적이도록 합니다.

   ⚡ AI 구동: AI를 활용하여 콘텐츠 수집 및 검색을 강화하여 경험을 원활하고 효율적으로 만듭니다.

   📱 크로스 플랫폼(곧 출시): Chrome, Android 및 iOS에서 사용할 수 있어 모든 기기에서 통일된 경험을 제공합니다.

   🏖️ 선택적 저장: 사용자가 소셜 미디어 피드에서 특정 게시물이나 콘텐츠를 선택적으로 저장할 수 있도록 합니다.

   사용 방법
   Chrome 확장 프로그램을 설치한 후 클릭하여 저장하세요
"
"https://news.hada.io/topic?id=16015","구글, 써드파티 쿠키 제거 시도 포기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글, 써드파티 쿠키 제거 시도 포기

     * Google이 끝내 Chrome 웹 브라우저에서 서드 파티 트래킹 쿠키를 제거하지 않기로 결정했다고 발표함
     * 대신 사용자가 Google의 검색 제품에서 추적 방식을 선택할 수 있는 새로운 프롬프트를 도입할 예정

  중요한 이유

     * Google의 쿠키 제거 위협은 광고 업계가 대체 솔루션을 찾기 위해 분주하게 만들었고, 이는 규제 당국으로부터의 반경쟁 우려를 야기함
     * 영국 정책 입안자들은 2월에 Google에게 쿠키 제거 계획을 일시 중지하라고 요청함
     * Google의 발표 후, 경쟁 광고 기술 회사들의 주가가 상승

  배경 정보

     * Google은 2020년에 처음으로 2022년까지 서드 파티 쿠키 지원을 중단할 계획을 발표함
     * 이후 쿠키 지원 종료 기한을 세 번 연기했으며, 마지막 연기는 2025년으로 예정됨

  세부 사항

     * Google은 광고 산업과 협력하여 쿠키를 대체할 Privacy Sandbox라는 이니셔티브를 테스트함
     * 몇 년 동안 다양한 쿠키 대체 실험을 도입했지만, 산업 파트너와 규제 당국의 전폭적인 지지를 얻지 못함
     * 초기 대체안인 FLoC는 프라이버시 전문가들의 우려로 2022년에 폐기됨
     * 이후 ""Topics"" 및 ""Tracking Protection"" 기능을 테스트함

  전반적인 상황

     * Google은 월요일에 산업 전체의 지지를 얻는 것이 어렵다는 것을 인정함
     * ""서드 파티 쿠키를 폐기하는 대신, 사용자가 웹 브라우징 전반에 걸쳐 정보를 바탕으로 선택할 수 있는 새로운 경험을 Chrome에 도입할 예정이며, 언제든지 그 선택을 조정할 수 있음"" - Anthony Chavez

  새로운 경로

     * Google의 새로운 접근 방식은 2021년에 Apple이 도입한 앱 추적 변화와 유사함
     * Google은 이 새로운 경로에 대해 규제 당국과 논의 중이며, 이를 출시하면서 산업과의 협력을 계속할 예정

  현실 확인

     * Google의 쿠키 제거 위협은 비록 실현되지 않았지만, 광고 산업이 쿠키에 덜 의존하고 프라이버시 중심의 광고 추적 솔루션에 더 집중하게 만듦
     * 대부분의 웹 브라우징이 Chrome에서 발생하기 때문에 대다수의 마케터, 광고 기술 회사, 에이전시, 출판사들은 쿠키 대체안을 찾지 않을 수 없었음
     * 몇몇 회사들은 해시된 이메일 및 전화번호 데이터를 사용하는 Universal IDs라는 솔루션을 공동 개발함
     * 마케터들은 퍼스트 파티 데이터 수집을 우선시하고 데이터 공유를 위한 ""클린룸""을 사용하기 시작함

  요약

     * Google의 변화는 실제로 큰 차이를 만들지 않을 수 있음
     * 인터넷의 70%는 이미 서드 파티 쿠키를 사용하지 않음

   인터넷의 70%는 이미 서드 파티 쿠키를 사용하지 않지만 한국 웹사이트들이 문제죠. 페이코 결제시 서드 파티 쿠키 차단하면 로그인 안되는 경우가 간혹 있고(이 문제 때문에 성공할뻔 했던 공연 티켓팅을 조졌습니다) 금융인증서도 서드파티 쿠키를 끄면 제대로 작동이 안되었던 걸로 기억합니다.

   감사합니다!

   구글, Privacy Sandbox의 새로운 경로 모색
   공식 발표는 위 글인데, 정작 무슨 새로운 일을 하는 것 처럼 제목을 적어놔서 이런쪽 요약 잘하는 Axios 기사도 같이 올려봅니다.

   맞아요.

   실제 공지 내용은 선택권을 벤더가 아닌 사용자에게 주겠다는 얘기라 어찌보면 벤더들에게는 전혀 달가운 소식이 아닐텐데 지나치게 낙관적인 해석만 검증없이 퍼지고 있네요 ㅎㅎ...
"
"https://news.hada.io/topic?id=16136","메타, Segment Anything Model 2 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    메타, Segment Anything Model 2 도입

Meta Segment Anything Model 2 (SAM 2) 소개

  주요 기능

     * 모든 비디오 및 이미지에서 객체 분할
          + SAM 2는 이미지와 비디오에서 객체를 분할하는 최초의 통합 모델임
          + 클릭, 박스, 마스크를 입력으로 사용하여 이미지나 비디오 프레임에서 객체를 선택할 수 있음
     * 비디오 프레임 간 객체 선택 및 조정
          + SAM 2를 사용하여 비디오 프레임에서 하나 또는 여러 객체를 선택할 수 있음
          + 추가 프롬프트를 사용하여 모델 예측을 세밀하게 조정할 수 있음
     * 낯선 비디오에서도 강력한 분할 성능
          + SAM 2는 모델 학습 중에 보지 못한 객체, 이미지, 비디오에서도 강력한 제로샷 성능을 발휘함
          + 다양한 실제 응용 프로그램에서 사용 가능함
     * 실시간 상호작용 및 결과
          + SAM 2는 스트리밍 추론을 통해 실시간 상호작용 애플리케이션을 가능하게 함
     * 최첨단 객체 분할 성능
          + SAM 2는 비디오 및 이미지에서 객체 분할에 있어 최고의 모델보다 뛰어난 성능을 발휘함

  하이라이트

     * 이미지 분할에서 SAM보다 향상된 성능
     * 기존 비디오 객체 분할 모델보다 뛰어난 성능, 특히 부분 추적에서
     * 기존 상호작용 비디오 분할 방법보다 적은 상호작용 시간 필요

  직접 사용해보기

     * 비디오의 한 프레임에서 단일 클릭으로 객체를 추적하고 재미있는 효과를 만들어 볼 수 있음
     * 데모 시도하기

  모델 아키텍처

     * Meta Segment Anything Model 2 설계
          + SAM 2 모델은 세션별 메모리 모듈을 추가하여 비디오 도메인으로 확장됨
          + 이 모듈은 비디오의 대상 객체에 대한 정보를 캡처하여 객체가 일시적으로 보이지 않더라도 모든 비디오 프레임에서 객체를 추적할 수 있게 함
          + 추가 프롬프트를 기반으로 마스크 예측을 수정할 수 있는 기능도 지원함
          + SAM 2의 스트리밍 아키텍처는 비디오 프레임을 하나씩 처리하여 비디오 도메인으로 자연스럽게 일반화됨

  Segment Anything Video Dataset

     * 대규모 및 다양한 비디오 분할 데이터셋
          + SAM 2는 대규모 및 다양한 비디오와 마스크렛(시간 경과에 따른 객체 마스크) 세트에서 학습됨
          + 학습 데이터에는 공개 소스인 SA-V 데이터셋이 포함됨
     * 하이라이트
          + 약 51,000개의 비디오에서 약 600,000개 이상의 마스크렛 수집
          + 47개국에 걸친 지리적으로 다양한 실제 시나리오
          + 전체 객체, 부분, 도전적인 가림 현상을 포함한 주석

  연구 공개

     * 오픈 이노베이션
          + 연구 커뮤니티가 이 작업을 기반으로 구축할 수 있도록 사전 학습된 Segment Anything 2 모델, SA-V 데이터셋, 데모 및 코드를 공개함
     * 하이라이트
          + SAM 2 학습 데이터의 투명성 제공
          + 실제 세계를 대표하기 위해 SA-V 데이터셋의 지리적 다양성 우선
          + SAM 2의 공정성 평가 수행

  잠재적 모델 응용

     * 확장 가능한 출력
          + SAM 2의 비디오 객체 분할 출력은 현대 비디오 생성 모델과 같은 다른 AI 시스템의 입력으로 사용될 수 있음
     * 확장 가능한 입력
          + SAM 2는 실시간 또는 라이브 비디오에서 객체와 상호작용하는 창의적인 방법을 가능하게 하는 다른 유형의 입력 프롬프트를 수용할 수 있음

  추가 리소스 탐색

     * AI at Meta 블로그 읽기
     * 연구 논문 읽기
     * 데이터셋 다운로드
     * 데모 시도하기

GN⁺의 정리

     * SAM 2는 이미지와 비디오에서 객체를 분할하는 통합 모델로, 실시간 상호작용 및 강력한 제로샷 성능을 제공함
     * 다양한 실제 시나리오에서 사용할 수 있도록 설계되었으며, 연구 커뮤니티를 위해 공개된 데이터셋과 코드가 포함됨
     * 비디오 객체 추적 및 분할에서 기존 모델보다 뛰어난 성능을 발휘하며, 적은 상호작용 시간으로도 높은 정확도를 제공함
     * SAM 2는 비디오 생성 모델과 같은 다른 AI 시스템과 결합하여 새로운 경험을 가능하게 할 수 있음
"
"https://news.hada.io/topic?id=16122","rST 선호 현상 Markdown에 비해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         rST 선호 현상 Markdown에 비해

  왜 나는 rST를 선호하는가

    나는 이 주장을 멈추지 않을 것임

     * 새로운 버전의 ""Logic for Programmers"" v0.2를 출판했음. 이 버전은 epub 지원, 제약 해결 및 형식 사양에 대한 내용을 포함하고 있음.
     * 두 번째 책 ""Learn TLA+""도 Sphinx로 작성했음. Sphinx는 reStructured Text(rST)라는 독특한 마크업을 사용함.
     * rST는 markdown보다 학습 곡선이 가파름. 몇 권의 책을 markdown으로 작성한 후 더 나은 것이 필요하다고 느껴 rST로 전환했음.

    rST가 더 나은 이유

     * markdown은 HTML의 경량 표현인 반면, rST는 추상 문서 트리의 중간 무게 표현임.
     * markdown에서 이미지를 만드는 방법:
![alttext](example.jpg)

     * rST에서 이미지를 만드는 방법:
.. image:: example.jpg
   :alt: alttext

     * rST는 확장 가능함. 새로운 텍스트 객체를 추가할 수 있음.
     * Sphinx는 cross-referencing을 처리할 수 있음. 예를 들어, 한 문서에 foo 앵커를 넣고 다른 문서에 :ref:image <foo>``를 넣으면 Sphinx가 올바른 URL을 삽입함.
     * rST는 빌드 프로세스의 나머지 부분과 함께 변환 코드를 구성할 수 있음.

    한 가지 사용 사례

     * ""Logic for Programmers""는 수학 관련 책으로, 독자를 위한 연습문제가 필요함.
     * 연습문제와 해답을 문서에서 나란히 배치하고 싶지만, 독자를 위해 해답은 책의 뒷부분에 나타나야 함.
     * 이를 위해 자체 연습문제 확장을 작성했음.
.. in chapter.rst
.. exercise:: Fizzbuzz
   :name: ex-fizzbuzz
   An exercise
   .. solution:: ex-fizzbuzz
      A solution
.. in answers.rst
.. solutionlist::

     * HTML에서는 연습문제와 해답을 인라인으로 렌더링함.
     * epub과 latex에서는 변환을 통해 해답 노드를 solutionlist 아래로 이동시키고, 각 연습문제에 참조 노드를 첨부함.

    ""하지만 나는 문법이 싫음""

     * rST의 문법이 못생겼다는 의견이 많음.
     * 문법이 싫어서 좋은 도구를 사용하지 않는 것은 이해할 수 있음.
     * asciidoc, MyST, Typst, Pollen, pandoc-extended markdown 등 다른 문서 빌더도 있음.
     * markdown 기반 문서 생성기는 새로운 사용 사례를 지원하기 위해 자체 전처리 단계를 추가하는 경우가 많음.
     * markdown과 rST를 위한 LSP와 treesitter가 있지만, gitbook-markdown이나 md-markdown, leanpub-markdown을 위한 것은 없음.

    다음 주 뉴스레터 없음

     * 홍콩에 있을 예정임.

  2024-07-31 업데이트

     * ""Logic for Programmers""에 대한 간단한 설명을 추가함.
     * 이 책은 형식 논리가 일상적인 소프트웨어 엔지니어링에서 어떻게 유용한지에 대한 내용을 다룸.
     * 기본적인 수학 개요와 여덟 가지 다른 응용 프로그램을 포함하고 있음.
     * 아직 알파 단계이지만 이미 20,000 단어 이상 작성되었고 많은 유용한 내용을 포함하고 있음.

  GN⁺의 정리

     * rST는 markdown보다 더 강력한 문서 작성 도구임.
     * Sphinx와 함께 사용하면 문서 트리를 변환하고 확장할 수 있는 기능이 있음.
     * ""Logic for Programmers""와 같은 책 작성에 유용함.
     * rST의 문법이 못생겼다는 의견이 많지만, 다른 대안도 존재함.
     * 형식 논리와 관련된 소프트웨어 엔지니어링에 관심이 있는 사람들에게 유용할 수 있음.

        Hacker News 의견

     * Markdown의 가장 큰 장점은 읽기 쉽고 쓰기 쉬운 점임
     * Markdown은 책을 쓰기 위한 최적의 도구는 아닐 수 있지만, 빠르게 형식화된 텍스트를 작성하는 데 최적임
     * LaTeX를 사용하여 책을 쓸 것이며, Markdown은 메모 작성, 빠른 문서화 및 댓글 작성에 적합함
     * reStructuredText(reST)는 자체로는 다소 거칠지만, Sphinx와 결합하면 매우 훌륭함
          + Sphinx는 대규모, 전문적인 문서 사이트에 적합한 선택임
          + Sphinx는 사이트의 공통 요소를 쉽게 커스터마이징할 수 있게 함
          + 내부 링크가 항상 해결되도록 보장함
          + 확장 및 테마 API가 잘 정의되어 있음
          + PyPI에 다양한 확장 및 테마가 존재함
     * Markdown은 HTML의 경량 표현이며, reST는 추상 문서 트리의 중간 무게 표현임
     * Markdown은 이메일 메시지와 Usenet 게시물의 형식화 텍스트를 변환하기 위해 설계됨
     * reST 도구는 RST 파일을 자동으로 생성하는 기능이 부족함
     * Markdown은 간단한 작업을 빠르게 수행할 수 있게 해주며, 필요 시 원시 HTML을 삽입할 수 있음
     * MyST는 reStructuredText의 기능을 제공하면서 Markdown 구문을 사용할 수 있게 함
     * GitHub 프로젝트 페이지의 문서화는 복잡할 수 있으며, Sphinx와 Markdown을 함께 사용하는 것이 유용할 수 있음
     * 저자는 자신의 책을 조판하는 맥락에서 rST를 언급하고 있음
     * reST는 MarkDown의 경쟁자가 아니라, MarkDown보다 먼저 등장한 형식임
     * Markdown과 reST는 기본적으로 동일한 목표를 가지고 있음
     * Markdown과 reST는 둘 다 읽기 쉽고 빠르게 작성할 수 있음
     * Markdown은 역사적 이유로 더 널리 사용되게 되었음
     * Markdown은 커스텀 블록 타입을 정의하고 문서 트리를 변환할 수 있음
     * Jupyter Book은 Markdown을 사용하여 PDF와 같은 다른 타겟으로 렌더링할 수 있는 좋은 예임
"
"https://news.hada.io/topic?id=16017","Node.js, Typescript 파일 실행을 시험적 기능으로 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Node.js, Typescript 파일 실행을 시험적 기능으로 추가

   Node.js에서 --experimental-strip-types 실험적 플래그를 사용하면 TypeScript 파일을 직접 실행할 수 있게 되었습니다. 이 과정에서 Node.js는 TypeScript 소스 코드를 JavaScript 소스 코드로 변환합니다.

   Node.js, TypeScript 실험적 지원 추가

   GN⁺의 정리와 해커뉴스 댓글 요약도 같이 참고하세요

   우왓 마침내...!!!

   SWC 기반으로 구현된 것 같네요. 개발자들에게 응원을 보냅니다
"
"https://news.hada.io/topic?id=16043","Cloudflare 와 Cronjob 을 활용한 무료 DDNS 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Cloudflare 와 Cronjob 을 활용한 무료 DDNS 만들기

     * NoIP 같은 유료 Dynamic DNS 서비스 만들기
     * 무료 Cloudflare 계정과 본인 컴퓨터/서버의 크론잡을 사용하여 Cloudflare에서 DNS 레코드를 자동으로 업데이트 가능
     * Python 코드
          + Ubuntu에선 5분마다 실행하는 Cronjob 설정
          + MacOS에선 launchd 를 활용
          + Windows에선 Task Scheduler 사용

   Cloudflare가 이미 기능으로 제공하는데 너무 돌아가는게 아닌가 싶네요

   원본 HackerNews 댓글에 이런 문구가 인상깊습니다.

     대단한 프로젝트도 아닌데 많은 추천과 관심을 받는 이유가? hnews 가 틱톡 되는거 아니냐?

   비슷한 기능을 하는 쉘스크립트 버전 - https://github.com/ddries/d2c.sh
   Perl 로 작성된 DDClient 는 다양한 DDNS 서비스를 지원 - https://github.com/ddclient/ddclient

  Hacker News 의견

     * Python 런타임을 설치하지 않고 bash 스크립트를 사용하고 싶은 사람들을 위해 만든 도구 소개: d2c.sh 사용 권장
     * DDNS 대신 Cloudflare 터널을 사용하여 홈 서비스를 인터넷에 노출시키는 방법 설명
          + 설정이 간단하고 보안성이 높음
          + 포트를 지정하고 서브도메인에 연결하면 즉시 작동함
          + 데몬은 한 번만 설치하면 됨
     * 5년 전에 동일한 것을 만들었고 매일 사용 중임
          + 설정 파일이 필요 없고 몇 가지 CLI 옵션만 있으면 됨
          + pip, docker 또는 바이너리 다운로드로 설치 가능: cloudflare-dyndns
     * Google Domains DDNS를 사용하던 사람들은 이미 ddclient를 설치했을 것이라고 생각함
          + ddclient는 Cloudflare와 호환됨: Cloudflare DDNS 관리
     * Cloudflare와 함께 ddclient를 몇 년 동안 문제 없이 사용해옴
          + 최근에 홈 라우터를 업그레이드했고 제조사가 제공하는 무료 동적 DNS 서비스를 사용 중임
          + 도메인의 DNS 레코드에 cname 레코드를 추가했지만, 이제는 필요 없음
          + 모든 홈 서비스는 Wireguard VPN 연결을 통해서만 원격으로 접근 가능함
          + 라우터가 900Mbs의 Wireguard 트래픽을 처리할 수 있고 훌륭한 VPN 서버 관리 기능을 제공함
     * DDNS 클라이언트가 dyndns를 지원하지만 Cloudflare를 지원하지 않는 경우, Cloudflare Worker를 어댑터로 사용할 수 있음: unifi-ddns
     * Docker 컨테이너를 제공하는 프로젝트 사용 경험 공유: cloudflare-ddns
     * 공용 IP를 확인하기 위해 api.ipify.org를 사용하는 것 같음
          + Cloudflare 서비스로 IP를 확인할 수 있는 방법이 있는지 궁금함
     * afraid.org가 몇 년 동안 해오던 것과 다르지 않음
          + FreeBSD를 4년 동안 탐구하게 됨
          + 원하는 것을 얻기 위해 Debian의 Proxmox로 교체해야 했던 점이 아쉬움
     * NoIP와 DynDNS 같은 유료 서비스의 구식 소프트웨어에 의존하는 것에 지친 사람들을 위해, 무료 Cloudflare 계정과 함께 사용할 수 있는 간단한 스크립트 추천
          + 자신의 도메인 이름으로 홈 서버를 관리하는 신뢰할 수 있는 방법 제공
"
"https://news.hada.io/topic?id=16022","ESOP: 모든 회사는 직원이 주인이 되어야 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ESOP: 모든 회사는 직원이 주인이 되어야 합니다

Central States Manufacturing의 직원 소유 모델

     * 이 회사에는 47명의 백만장자가 있으며, 이들은 모두 경영진이 아니라 운전사나 기계공 같은 블루칼라 노동자임
     * 직원 소유제로 운영되며, 모든 직원이 급여 외에도 급여의 일정 비율을 주식으로 받음
     * 회사가 잘 되면 모든 직원이 혜택을 받음
     * 올해 매출 10억 달러를 달성할 예정이며, 직원 소유제 덕분에 경영진뿐 아니라 모든 직원이 이익을 공유함
     * 직원들은 회사의 성과에 따라 주식으로 보상을 받으며, 이는 장기적으로 회사의 성공에 기여함

  스탁 옵션의 문제와 해결책

     * 1990년대 법안으로 경영진이 스탁 옵션으로 보수를 받기 시작하면서 경영진의 급여는 급상승했으나, 일반 직원의 급여는 정체됨
     * 직원들도 회사의 일부를 소유했다면, 그들의 급여도 함께 상승했을 것임
     * 진정한 부를 축적하기 위해서는 무언가의 소유가 필요함
     * 최저 임금을 올리는 것만으로는 해결되지 않음
     * 모든 직원이 소유자가 되는 방법을 고민할 필요가 있음

  미국의 ESOP(Employee Stock Ownership Plan) 증가

     * 미국에는 6,533개의 직원 주식 소유 계획(ESOP)을 가진 회사가 있으며, 매년 약 250개의 회사가 추가됨
     * ESOP를 도입한 회사들은 1,470만 명의 직원이 소유하고 있으며, 이 회사들의 총 가치는 2.1조 달러임
     * ESOP를 통해 직원들은 급여의 일정 비율을 주식으로 받으며, 이는 회사의 성장과 함께 가치가 상승함
          + 주식의 가치는 매년 평균 20%의 수익률을 기록하며 주식 시장을 능가함
     * 직원들은 주식을 통해 주택 구입, 학비, 의료비 등을 충당할 수 있음

  ESOP의 장점

     * 직원들은 주식 계좌에서 자금을 인출하여 학비, 의료비 또는 주택 구입 자금으로 사용할 수 있음
     * ESOP 계좌는 두 번째 401k와 유사하며, 59.5세 이전에 인출하면 세금과 조기 인출 수수료를 내야 함
     * 직원들이 회사를 떠나거나 은퇴하면 계좌의 전체 잔액이 6년에 걸쳐 지급됨
     * 회사는 이를 위해 현금을 준비해야 하며, 이는 연간 현금 흐름에 반영됨
     * 직원들은 회사의 장기적인 성공을 위해 참여하도록 독려됨

  장기적 성공을 위한 동기 부여

     * ESOP 회사의 직원들은 회사의 단기 성과보다 장기 성과에 관심을 가지며, 이는 단기적 성과에 집착하는 경영진과는 대조적임
     * 단기 성과를 위해 품질을 희생하지 않으며, 경영진은 모든 직원들이 주주임을 인식하고 책임감을 가짐
     * 월간 손익(P&L) 보고서와 연간 재무 보고서를 직원들과 공유하며, 연간 주주 회의에서 회사의 미래에 대해 논의함

  ESOP의 혜택

     * ESOP 회사는 직원 유지율이 높고, 퇴직 혜택이 좋으며, 대출 상환율이 낮음
     * 경제 위기와 코로나 동안에도 ESOP 회사는 더 나은 성과를 보임
     * ESOP는 노조의 대안으로 작용하며, 직원들이 소유자가 됨으로써 소유자와 노동자 간의 갈등이 없음
     * ESOP 회사는 소득세를 면제받으며, 이는 직원들에게 더 많은 혜택으로 돌아감

  ESOP의 도입 장려

     * 많은 창업자가 회사를 매각할 때 ESOP를 고려하지 않는 이유는 정보 부족 때문임
          + 창업자들이 회사를 매각할 때 ESOP를 고려하도록 교육이 필요함
     * ESOP는 신속한 절차가 아니며, 도입을 위해서는 사전 계획과 독립적인 평가가 필요함
     * ESOP는 의회에서 초당적인 지지를 받고 있으며, 교육과 전환 과정을 개선하기 위한 법안이 추진 중임

  ESOP의 장기적 전망

     * ESOP는 하위 소득층 가정의 주식 소유를 증가시킴
     * 더 많은 창업자들이 회사를 직원들에게 매각함으로써 부의 분배가 더 고르게 이루어질 것임
     * 주식 시장이 부유해짐에 따라 모든 사람들이 함께 부유해질 것임
     * Central States의 사례는 ESOP가 세대를 변화시킬 가능성을 보여줌

  GN⁺의 정리

     * 이 기사는 직원 소유 회사의 장점과 ESOP의 중요성을 강조함
     * 직원 소유는 부의 불평등을 해소하고, 장기적 성공을 위한 동기 부여를 제공함
     * ESOP는 노동조합의 대안으로, 직원과 소유주 간의 갈등을 줄임
     * ESOP 도입을 위한 정보와 교육의 필요성을 강조함
     * 유사한 기능을 가진 프로젝트로는 Mondragon Corporation과 같은 협동조합이 있음

   이익공유가 제대로 안되는 거면 노조 말곤 답이 없죠;

   직원의 동기부여에 좋은 방법 중 하나인 것 같네요.
   단점은 없나? 궁금했는데, [Hacker News 의견]에 잘 나와있어서 좋네요 ^^

   자본주의가 자본가들에 의해 잠식당하고 있다고 생각했는데, 이런 접근은 아주 좋네요.

        Hacker News 의견

     * 기존의 성공적인 비즈니스를 염두에 두고 생각하기 쉽지만, 항상 그렇게 되지는 않음
          + 사업 초기에는 소유자가 많은 시간과 돈을 투자하여 시작함
          + Central States의 경우, 사업이 이미 성공한 후의 이야기임
          + 사업이 어려워지거나 실패할 경우, 직원들이 주식을 사기 위해 급여의 일부를 사용하게 됨
          + 이는 시장 대비 저임금으로 일하는 것과 같음
     * 직원 주식 옵션은 새로운 아이디어가 아님
          + 모든 회사가 직원에게 주식 옵션을 제공하는 것은 좋은 비즈니스 계획일 수 있음
          + 그러나 모든 직원에게 주식 옵션을 제공하는 것은 인센티브에 큰 영향을 미치지 않음
          + 주식 시장의 변동성에 따라 급여가 달라질 수 있음
          + 모든 회사가 직원 소유 협동조합이 되어야 한다는 것은 노동자의 권리를 제한하는 것임
          + 노동자 소유 협동조합은 자본 조달이 어렵고, 이익보다는 노동자 복지를 우선시하는 경향이 있음
     * 현대 경영진의 급여 추세는 중간 직원과 비교해 매우 가파름
          + 예를 들어, Boeing CEO는 2022년에 2200만 달러, 2023년에 3200만 달러를 받음
          + Nvidia CEO인 Jensen Huang은 2024년에 3400만 달러를 받음
     * 모든 직원이 매년 급여의 일부를 회사 주식으로 받는 것은 선택 사항이어야 함
          + 주식이 하락할 경우, 시장 가격 이하로 노동을 제공한 것이 됨
     * 평균적인 노동자에게는 매우 나쁜 아이디어임
          + 한 주식에 모든 자산을 투자하는 것은 위험함
          + 이익 공유를 통해 원하는 대로 투자할 수 있게 하는 것이 더 나음
     * 과거에 시도된 아이디어들이 있었음
          + Familistère 협동조합은 계층 구조와 경쟁으로 인해 실패함
          + 소유권뿐만 아니라 가치 체계를 포함한 구조적 해결책이 필요함
     * 직원이 퇴사하거나 은퇴하면 계좌 잔액이 6년 동안 지급됨
          + 이는 전통적인 의미의 주식 소유가 아님
          + 주식을 자유롭게 팔 수 없고, 회사에만 팔 수 있음
     * 소유권이 없으면 진정한 부를 쌓기 어려움
          + 많은 미국인들이 부동산 소유를 목표로 함
          + 그러나 이는 도시 개발과 충돌할 수 있음
     * 모든 회사가 직원 소유가 되면 사회에 큰 문제가 발생할 수 있음
          + 투자와 고용이 감소할 수 있음
          + 회사가 파산하면 모든 자산을 잃게 됨
     * 모든 직원이 매달 돈을 받고 원하는 회사의 주식을 살 수 있게 하는 것이 더 나음
"
"https://news.hada.io/topic?id=16041","새로운 인터넷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                새로운 인터넷

     * Tailscale의 CEO이자 공동 창업자인 Avery Pennarun이 작성한 글로, 회사의 큰 비전에 대해 설명하고 있음
     * 1990년대에 LAN을 경험한 사람들은 나이가 들었을 것이며, 우리 직원중 상당수가 LAN을 사용한 기억이 있는데, 이 Age Gap은 Tailscale을 다른 스타트업과 구분짓는 점임
     * 우리가 Tailscale을 시작했을 때, 기술의 많은 부분이 1990년대 이후로 좋아졌음. 컴퓨터는 수백만 배 더 빨라졌고, 더 많은 사람들이 프로그래머가 될 수 있었음. 그러나 많은 일상적인 작업이 더 어려워짐
     * 프로그래밍이 매우 쉬워질 것으로 예상했지만, 오히려 기술 산업은 복잡해졌고, 이는 고칠 수 있는 문제임

규모 확장하지 않기

     * 오늘날의 프로그래머들은 규모 확장에 집착하며, 이는 잘못된 것임
     * 대부분의 것들은 규모 확장이 필요하지 않으며, 우리는 Tailscale을 통해 이러한 작업을 위한 시간을 절약할 수 있도록 만듦
     * 현대의 소프트웨어 개발은 대부분 쓸데없는 간접 비용으로 채워져 있음

인터넷

     * Tailscale의 창립자들은 개발자들이 불필요한 규모 확장을 하는 것이 문제라고 보았음
     * 인터넷이 모든 것을 어렵게 만들고 있으며, Tailscale은 이를 해결하기 위해 OSI 3계층에 새로운 인터넷을 구축하고 있음

도미노

     * 인터넷 문제를 해결하면 기술 진화의 다음 단계에 도달할 수 있음
     * AWS가 현재 기술 세계에서 임대료를 부과하는 병목 지점임

IPv4

     * 위치가 중요하기 때문에 사람들은 자신의 컴퓨터 대신 클라우드 제공업체에게 막대한 임대료를 지불함
     * 신뢰할 수 있는 클라우드 제공업체를 선택해야 함

진자 운동

     * IBM은 중앙 집중식 컴퓨팅을 독점했지만 Microsoft의 등장으로 영향력을 잃기 시작함
     * 우리는 현재 Microsoft 이후의 웹 중심 세계에 살고 있지만, 이는 다시 중앙 집중화된 것임
     * 클라우드 제공업체들이 모든 사람에게 임대료를 부과할 수 있는 새로운 독점 기업이 되었음

운영 체제

     * 1990년대에는 운영 체제가 중요했지만, 웹이 독점 체제를 무너뜨렸음. 지금은 HTTPS가 프로그램 간 연결을 제어함

인증서

     * HTTPS는 본질적으로 중앙 집중식 시스템으로, 클라이언트와 서버로 구성됨
     * 클라이언트는 정적 IP 주소, DNS 이름, TLS 인증서, 열린 포트가 없음
     * AWS는 이러한 중앙 집중식 구조의 중심에서 가장 잘하는 회사임

Taildrop

     * Tailscale은 모든 디바이스에 인증서, IP 주소, DNS 이름, 엔드투엔드 암호화, ID를 제공하여 피어가 될 수 있게 함
     * Taildrop은 Tailscale로 가능해진 것의 예시로, 간단한 HTTP PUT 작업으로 파일을 전송할 수 있음
     * Taildrop은 클라우드 비용 없이 작동함

새로운 인터넷

     * Taildrop은 Tailscale 덕분에 10배 더 쉬워질 수 있는 프로그램 클래스에 대한 증거임
     * 연결성 부족이 중앙 집중화의 원인이며, 이는 작은 프로그램을 실행하는 데에도 임대료를 내야 하는 이유임
     * Tailscale은 복잡성의 계층을 제거하고 원하는 작업에 더 쉽게 집중할 수 있게 해줌

모두를 위한 것

     * Tailscale 유무에 따라 새로운 격차가 생길 것임
     * 충분한 사람들이 Tailscale을 사용하지 않으면 새로운 앱이 개발되지 않을 것임
     * 인터넷은 모두를 위한 것이며, Tailscale은 모든 사람이 연결될 때까지 멈추지 않을 것임

비전

     * 세계 인구의 약 1/20,000이 새로운 인터넷(Tailscale)을 사용하고 있음. 우리는 모든 사람이 사용할 때까지 멈추지 않을 것임.
     * 30년 전에는 사람들이 Microsoft가 모든 책상에 컴퓨터를 놓겠다는 것을 비웃었고, TCP/IP는 써드파티에서 구입해야 하는 애드온이었음
     * 기술 세계는 빠르게 변화하며, Tailscale은 이를 더 나은 방향으로 변화시키려 함

GN⁺의 의견

     * Tailscale의 비전은 매우 야심찬 것으로 보이며, 기술 산업의 근본적인 문제를 해결하려 하고 있음
     * 중앙 집중식 구조와 불필요한 복잡성을 제거하는 것은 개발자들에게 큰 도움이 될 것임
     * 그러나 이를 위해서는 Tailscale의 대중화가 필수적이며, 이는 쉽지 않은 과제일 것임
     * 기존의 클라우드 제공업체들의 반발도 예상되므로, Tailscale은 이에 대한 대비도 해야 할 것임
     * Tailscale과 유사한 기능을 제공하는 다른 프로젝트로는 ZeroTier, Nebula 등이 있음

        Hacker News 의견

     * Tailscale와 같은 회사들은 인터넷이 스스로 해결해야 할 문제를 해결함으로써 문제를 유지할 동기를 가지게 됨
          + 인터넷은 IPv6와 IPsec을 통한 자동 암호화, DNSSEC에 의한 PKI가 필요함
          + Tailscale은 이러한 것들이 널리 구현되는 것을 막을 동기를 가짐
     * 중앙 집중화에 대한 불만이 있으며, 클라이언트-서버 컴퓨팅이 문제의 원인이 아님
          + 새로운 세상에서는 Tailscale을 가지지 않으면 특정 앱을 실행할 수 없게 될 것임
     * Tailscale을 실제로 사용하는 사람으로서, Tailscale이 없으면 더 많은 인력이 필요했을 것임
          + Tailscale은 놀랍고 사랑스러움
          + 하지만 인터넷만큼 좋지는 않으며, 지연 시간과 연결 문제 등이 있음
          + Tailscale의 비전과 접근 방식을 믿으며, 하드웨어 제어, 비용 절감, 보안 향상에 기여함
     * Tailscale을 좋아하지만, 인터넷은 표준과 자유로 성공했음
          + Tailscale은 대규모 IP 주소 공간에 의존함
          + 중앙 집중화된 IPv4와 서버, 독점적인 것들에 의존하는 것은 모순적임
     * Tailscale의 아이디어는 독창적이지 않으며, 인터넷 인프라를 단일 회사에 의존하고 싶지 않음
          + 전통적인 인터넷의 문제는 기술적이기보다는 사회적임
     * yggdrasil이 새로운 인터넷이 되어야 하는 것 아닌가?
          + Tailscale이 아닌 다른 경쟁자들도 있음
          + Tailscale은 사용하기 편리하지만, 중앙 집중화 문제를 해결하지 않음
     * AWS가 비싼 이유는 IPv4나 데이터 센터 때문이 아님
          + 인증서가 중앙 집중화를 초래하지 않았으며, DNS도 여전히 ICANN 루트에 의존함
          + Tailscale은 NAT 뒤에 있는 컴퓨터에 접근하는 데 도움을 줌
     * Tailscale 서비스를 즐기지만, 이 글은 공감되지 않음
          + Tailscale도 여전히 자체적인 마찰이 있으며, 큰 그림 문제를 해결하지 못함
          + 구체적인 예로, 가족과의 원격 데스크톱 연결 시 문제가 발생함
     * IPv6는 원래 모든 인터넷 호스트에 암호화된 신원을 제공하기 위해 IPsec을 필수로 포함해야 했음
     * Tailscale이 인터넷을 다시 쉽게 만들지만, 여전히 중앙 집중화된 서비스 제공자에 의존해야 함
"
"https://news.hada.io/topic?id=16082","StreamPot - ffmpeg 을 API로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     StreamPot - ffmpeg 을 API로 만들기

     * fluent-ffmpeg 호환성을 가지며, 큐 및 S3를 이용하는 FFmpeg API 오픈소스
     * 앱에서 미디어를 변환하는 작업을 지원(예: 비디오 자르기, 비디오에서 오디오 제거, mp4를 webp로 트랜스코딩)
          + 점점 더 많은 프로젝트가 워크플로의 일부로 미디어를 변환하고 있기 때문
     * 셀프호스팅 가능하며, Hosted 버전도 제공

        Hacker News 의견

     * ffmpeg 명령어의 복잡성에 대한 의견과 DSL(도메인 특화 언어)의 필요성 언급
          + JSON 기반 DSL을 통해 스크립트 생성 및 스키마 검증 가능성 제안
          + LosslessCut 앱의 타임라인 미리보기 썸네일 생성 방식 설명
          + ffmpeg를 서버로 실행하여 프로세스 시작 비용을 줄이는 프로젝트 필요성 언급
     * 자바스크립트 API에서 폴링 방식의 작업 상태 확인에 대한 불만
          + 폴링 대신 이벤트 소스를 통한 HTTP API 신호 추가 제안
     * StreamPot의 Jack가 제품 공유에 대한 기쁨 표현 및 피드백 요청
     * 완전히 로컬 설정에서 실행할 수 있는 방법 문의
          + nginx 설정 제공 가능성에 대한 질문
     * ffmpeg CLI 명령어를 TypeScript 구문으로 변환하는 기능의 유용성 언급
          + 문서나 가이드에서 명령어를 복사하여 사용하는 경험 공유
     * Streampot의 유료 버전에 대한 질문과 ffmpeg 라이선스의 상업적 사용 제한에 대한 우려
          + 상업적 프로젝트에서 ffmpeg 사용을 고려했으나 라이선스 문제로 중단한 경험 공유
     * Android에서 완전한 기능의 ffmpeg를 제공해달라는 요청
          + Termux와 같은 앱의 한계 언급
          + 보너스로 Termux의 보조 프로필 문제 해결 요청
     * ffmpeg를 기반으로 한 비즈니스 아이디어와 StreamPot의 셀프 호스팅 링크가 깨진 문제 언급
"
"https://news.hada.io/topic?id=16078","ky - 작고 우아한 Fetch API 기반 Javascript HTTP Client","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ky - 작고 우아한 Fetch API 기반 Javascript HTTP Client

     * 최신 브라우저 및 Node.js/Bun/Deno 용
     * fetch 보다 나은 점
          + 더 간단한 API
          + 숏컷 메소드 (ky.post())
          + 2xx 가 아닌 상태코드를 에러로 처리(리다이렉트후)
          + 실패한 요청 재시도
          + JSON 옵션
          + 타임아웃 지원
          + URL Prefix 옵션
          + 커스텀 디폴트 값을 가지는 인스턴스
          + Hooks
          + TypeScript의 장점들 (.json() 은 any가 아니라 unknown 으로. .json<T>()도 사용 가능 )

   sindresorhus의 모듈들은 ESM 설정을 강요하던데 이것도 그렇군요

   axios 마음에 안들어서 ky 썼었는데 만족했습니다. 심플하고 금방 익숙해질 수 있고 필요한 건 갖춰져 있었죠. 저는 추천합니다. 지금은 fetch 쓰긴 하지만, 이놈도 과거에 매력있었던 물건인 만큼, axios 대용으로 추천합니다.

   requests와 API가 거의 흡사하네요. 거기에서 영감을 받았나 봅니다.
"
"https://news.hada.io/topic?id=16087","Ask HN: FAANG 수준 연봉을 받으면서 다른 곳에서 일하는게 가능한가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask HN: FAANG 수준 연봉을 받으면서 다른 곳에서 일하는게 가능한가요?

     * FAANG과 비FAANG 간의 급여 차이는 상당함
          + 예를 들어, 평균적인 스타트업의 스태프 엔지니어는 HCOL(생활비가 높은)지역에서 $250k의 기본 급여와 10-20%의 보너스를 받을 수 있음
          + 그러나 FAANG의 스태프 엔지니어는 비슷한 기본 급여와 4년 동안 $1M의 주식을 받음
     * FAANG 및 대형 은행/고빈도 거래(HFT, 초단타) 회사 외에도 이러한 급여를 받는 사람들이 있는지에 대한 질문
          + 만약 있다면, 그들은 누구이며 무엇을 하는지에 대한 궁금

답변들

     * 많은 사람들이 사업을 시작하고 운영하는 법을 배우기보다는 잘 보상받는 직원이 되기 위해 많은 노력을 기울이는 것이 흥미로움
          + 위에 적은 것은 높은 연봉이지만 성공적으로 그 지역 배관공 비즈니스를 운영하는 사람보다 크게 많지 않음
          + 직원으로서는 연봉 한도가 있지만 사업주로서는 한도가 거의 없음
          + FAANG이 아닌 곳에서 그 정도의 돈을 벌고싶다면, 사업을 시작하고 운영하는 법을 배우는 것이 좋음
          + 벤처 자금이 필요한 소셜 앱이 아닌, 돈이 있는 다른 기업의 문제를 해결하는 SAAS를 추천함
     * 한 대기업의 시니어 스태프 엔지니어로서 LCOL(생활비가 낮은) 도시에서 일하고 있음
          + 중산층 주택 가격은 $300k - $500k, 고급 주택은 약 $1m, 소형 스타터 주택은 $200k
          + 내 기본 연봉은 $150k/년, 현금 보너스는 $50k - $70k, 주식은 $12k - $15k(년)
          + 총 보상 패키지는 약 $280k - $300k/년 쯤 되는 것 같음
          + 이 지역에서는 매우 높은 보수를 받고 있음
          + 다른 도시로 이사하거나 원격 근무를 찾지 않는 한 더 많은 돈을 벌기 어려움
     * 헤지 펀드에서 일하면 비슷한 돈을 벌 수 있으며, 펀드가 성공하면 더 많이 벌 가능성도 있음
          + 좋은 점은 제한된 주식 대신 실제 돈을 받는 다는 것
          + 또한 돈이 4년 베스팅 기간보다 더 빨리 잠금 해제됨
          + 자신의 펀드에 수수료 없이 투자 가능
          + 단점은 스트레스가 많고 숨을 곳이 없다는 점
          + 팀과 회사의 규모는 매우 작고, 모두가 회사의 성공에 각자의 기여도가 무엇인지 잘 알고 있음
     * 두 가지 검증된 방법을 제안함. 물론 보장은 못함
          +
              1. 압도적인 대다수의 동료들보다 월등히 뛰어나고 주목받기(압도적의 의미는 아주 일부분 이라는 이야기)
          +
              2. 대부분의 사람들이 할 수 없거나 하지 않는 전문 분야에 특화되기. 어렵고, 모호하고, 불쾌한 일이 포함됨
          + 두 경우 모두 네트워크가 구축되고 기업의 특정 고충을 해결하는 것으로 명성을 쌓은 후 독립 컨설팅을 통해 가장 큰 수익을 올릴 수 있음(물론 대가를 청구해야 함
     * FAANG에서 일하면서 여러 회사에서 제안을 받은 경험을 공유함
          + 현재 내 연봉을 능가하는 회사는 다른 대형 기술 및 금융 회사뿐이었지만 몇가지 놀라운 점들
          + Tier 3(들어본적 없는) 회사에서 Staff 레벨인데 $450k TC(Total Compensation)를 제안함. 참고로 FAANG의 Senior 레벨은 $500k TC
          + 스타트업에서 Principal 레벨에 $650k TC 제안, 비록 그들의 주식은 종이 돈이지만
          + ""랜덤"" 회사들도 높은 수준의 보상을 제공할 수 있지만 일반적이지 않음
          + 사실 대부분의 회사는 아마도 $200k대 일 것임
          + 리크루터와의 대화에서 보상 범위를 먼저 물어보는 것을 추천함
     * 물론임. 소프트웨어 세계의 특이한 구석에 기회가 존재함
          + 예를 하나 들어보면, 대형 금융 기관을 위한 고성능 컴퓨팅 소프트웨어를 만드는 회사가 있는데, 연평균 수익률(ARR)이 9자리수에 달함
          + 아마도 누구도 못들어봤을텐데, 매우 조용한 회사고, 지난 10년간 직원수가 크게 늘지 않고 직원들이 거의 떠나지 않음
          + 하지만 정말 낮은 수준의 코드를 작성하는 직원들 중 일부는 FAANG의 대표적인 동료들보다 훨씬 많은 돈을 벌고 있음
     * 헬스 시스템/병원에서 일하는 몇몇 사람들은 연간 400시간 일하면서 $500k+를 벌고 있음
          + COBOL과 MUMPS 같은 레거시 언어 전문가
          + 레거시 빌링 및 EMR/EHR 시스템 코드 작업을 함
          + 한 사람은 유타의 ""chateau(성)""에서 동부로 매달 또는 두 달에 한 번씩 비행함
          + 유일한 단점은 연중 무휴 대기(On-Call) 상태라는 것. 은행에도 이런 직원이 있다고 들었지만 직접 만나본 적은 없음
     * 그 회사들(돈을 많이주는) 중 일부는 이러지도 저러지도 못하는 상황임
          + 신규 채용을 잘 하지도 않고, 팀이 작음
          + 많은 돈을 벌기 때문에 소문을 내지 않고, 어느 날 우연히 직원 중 한 명이 레딧에서 채용 중이라고 말하지 않는 한 그 회사에 대해 듣지 못할 것
          + 섹시하지 않은 산업이나 고위험 분야에서 일함(도박 같은)
          + 당신이 예상하지 못하는 장소에 위치함
     * DC 또는 SF 메트로 지역의 공무원은 혜택을 제외하고 $195k까지 벌 수 있음
          + 혜택에는 실제 연금, 좋은 건강 보험, 401(k)와 같은 퇴직 기금에 1-1 급여 매칭 포함
          + 주 40시간 근무하며, 그 이상은 일하지 않고, 모든 휴가는 사용 가능
          + 이 수준에 도달하려면 시간이 걸리거나 GS-15(고위 관리직, 보통 부서의 고위 관리자, 국장, 또는 전문 기술직 책임자)에 해당하는 직위로 직접 고용되어야 함
          + NASA, NOAA, DOE, DOD 등 기술 작업을 하는 기관에서 가능함
     * ""매우 많은 돈을 가지고 있고, 그 돈을 계속 버는 데 소프트웨어가 중요한 조직(또는 누군가가 큰 돈을 벌 수 있다고 믿는 무언가를 만들기 위해 돈을 준 곳)을 찾아보세요. 일반적으로 돈을 따라갑니다.""
     * 네트워킹과 관계 형성에 능숙하고 기술적인 능력이 있다면 컨설팅 회사에서 꽤 많이 받을 수 있음
          + 하지만 적합한 인재를 찾고, 마케팅, 기술/시장 적합성 등을 고려하여 스타트업을 창업하는 것처럼 일을 처리해야 함
          + 컨설팅 업계에서 얼마나 많은 돈을 벌 수 있는지에 대한 실질적인 상한선은 없으며, 모두 회사를 위해 얼마나 많은 돈을 벌 수 있는지에 따라 달라짐
          + 회사에 많은 돈을 벌고 자신의 몫을 달라고 하면 회사는 그렇게 해주거나 최소한 협상할 것
          + 반면에 좋은 프로젝트를 수주하지 못하고 사용률(고객에게 청구하는 시간의 비율)을 유지하지 못하면 비용이 발생하고 업계에서는 청구 시간 외에는 이에 대한 유예가 많지 않기 때문에 스트레스를 받을 수 있음

   오 한국이나 미국이나 같네요 ㅎㅎ

   확실히 일반 소프트웨어 분야 밖에서 포지셔닝을 잘 해서 잘 버는 회사들이 여기저기 숨어 있습니다.

   라스베가스에서 회원들에게 대단위로 문자 뿌리는 프로젝트를 추진하던 도박회사
   소규모 메디컬 디바이스 회사인데 특이한 아이디어 제품을 fda 승인 받아서 대박난 회사
   렌더팜이나 드론 관련해서 이런저런 턴키 솔루션 제공하는 회사…

   인터뷰만 보고 못 들어갔지만(…) 얘기만 들어도 재밌더라구요.
"
"https://news.hada.io/topic?id=16119","Stop drawing ERD, but auto generate by "prisma-markdown"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Stop drawing ERD, but auto generate by ""prisma-markdown""

     * 본인은 ERD 를 손으로 그리는게 성가심
     * 자동 erd 생성 툴을 쓰자니 테이블 개수가 여럿일 때 다이어그램이 혼탁해짐
     * 다이어그램 말고 해설서 등 문서화에 뾰족한 방법이 없어 곤란
     * 이에 새로운 라이브러리 개발
     * 테이블 개수가 늘어나 어그러짐에는 페이지네이션 개념으로 대응
     * 문서화는 ORM 모델 상 주석을 그대로 마크다운에 옮겨 해결
"
"https://news.hada.io/topic?id=16054","650만 체크로 확장하는 One Million Checkboxes 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                650만 체크로 확장하는 One Million Checkboxes 기술

    650,000,000 체크박스 체크하기: 예상치 못한 인기 대처하기

      2024년 6월 26일, One Million Checkboxes (OMCB) 웹사이트를 출시함

     * 100만 개의 글로벌 체크박스를 가진 사이트로, 체크박스를 체크하면 모든 사용자에게 즉시 반영됨
     * 출시 후 30분 만에 수천 명의 사용자가 수백만 개의 체크박스를 체크함
     * Hacker News, /r/InternetIsBeautiful, Mastodon, Twitter 등에서 유입됨
     * Washington Post와 New York Times에도 소개됨
     * 첫날 5천만 개 이상의 체크박스가 체크됨
     * 2주 후 사이트를 종료하기 전까지 6억 5천만 개 이상의 체크박스가 체크됨

    원래 아키텍처

     * 체크박스 상태는 100만 비트(125KB)로 저장됨
     * 클라이언트는 비트셋을 사용하여 체크박스를 렌더링하고 서버에 체크 상태를 알림
     * 서버는 Redis를 사용하여 비트를 업데이트하고 모든 클라이언트에 브로드캐스트함
     * nginx를 통해 정적 콘텐츠를 제공하고, Flask 서버를 통해 비트셋 상태와 웹소켓 연결을 처리함
     * Redis는 상태 저장 및 메시지 큐 역할을 함

    확장 원칙

     * 비용 제한: 서버리스로 확장하여 파산하지 않도록 비용을 수학적으로 계산함
     * 단기적 해결책 수용: 사이트의 인기가 일시적일 것으로 가정하고, 빠른 해결책을 선택함
     * 간단하고 자체 호스팅된 기술 사용: 직접 서버를 운영하고 디버깅할 수 있는 기술만 추가함
     * 재미 추구: 돈보다는 재미를 우선시함
     * 글로벌 유지: 모든 사용자가 즉시 변화를 볼 수 있도록 글로벌 상태를 유지함

    첫날: 폭발적인 인기

     * 30분 만에 서버 부하가 급증함
     * 추가 서버를 스핀업하여 부하를 분산시킴
     * Redis 연결 문제 해결을 위해 배치 업데이트를 도입함
     * Digital Ocean의 관리형 Redis 인스턴스를 업그레이드함

    밤새 계획이 없었음

     * ITP 캠프에서 얼굴 인식 Pacman 게임을 전시하기 위해 계획을 세움
     * iPad를 가져가서 서버를 스핀업함
     * 서버 네이밍 규칙을 발전시키며 8개의 워커 VM을 운영함
     * 플라스크 프로세스 수를 줄이고 업데이트 배치 크기를 늘려 부하를 줄임

    대역폭 문제

     * Digital Ocean의 대역폭 가격을 고려하지 않음
     * 상태 스냅샷 빈도를 줄이고, 업데이트 크기를 줄임
     * tc 유틸리티를 사용하여 초당 전송 데이터 양을 제한함

    둘째 날: 계속 성장함

     * 입력 유효성 검사를 제대로 하지 않아 사이트가 다운됨
     * Redis 복제본을 추가하여 부하를 분산시킴
     * 플라스크 프로세스가 계속 충돌하여 자동 재시작 스크립트를 작성함

    오래된 업데이트 문제

     * 클라이언트가 오래된 업데이트를 적용하여 상태가 잘못 표시되는 문제 발생
     * 타임스탬프를 추가하여 업데이트 순서를 보장함

    Go로 재작성

     * 성능 엔지니어 친구와 함께 백엔드를 Go로 재작성함
     * 성능이 크게 향상됨
     * DDOS 공격을 CloudFlare를 통해 방어함

    사이트 종료

     * 체크박스가 빠르게 체크 해제되지 않으면 동결되도록 변경함
     * Redis를 사용하여 동결 상태를 관리함
     * 2주 후 사이트를 종료함

    배운 점

     * 두 번째로 '실제' 백엔드를 가진 서버를 공개 인터넷에 배포한 경험
     * 단기적인 해결책을 선택한 것이 좋은 선택이었음
     * Redis와 nginx의 강력함을 다시 확인함
     * 사람들이 익명으로 상호작용하는 사이트에 대한 갈망을 확인함

    GN⁺의 정리

     * 이 글은 웹사이트의 예상치 못한 인기로 인해 발생한 기술적 문제와 해결 과정을 다룸
     * Redis와 nginx를 사용한 간단한 아키텍처로도 대규모 트래픽을 처리할 수 있음을 보여줌
     * 단기적인 해결책을 통해 빠르게 문제를 해결하고 사이트를 안정화하는 방법을 설명함
     * Go로의 재작성과 CloudFlare를 통한 DDOS 방어 등 다양한 기술적 도전을 다룸
     * 비슷한 기능을 가진 프로젝트로는 Reddit의 /r/Place와 같은 대규모 협업 프로젝트가 있음

        Hacker News 의견

     * 많은 교훈과 역사적 지식을 배울 수 있었음
          + 모든 종류의 중단과 실패 지점을 다루었지만, 저장 공간 문제는 언급되지 않음
          + Redis가 Lua를 사용할 수 있다는 것을 몰랐으며, 이를 대체 상태로 사용하는 것에 관심이 생김
          + 클라우드 서비스의 대역폭 문제는 청구 초과를 피할 수 있는 하드 리미트가 없다는 점에서 가장 큰 불만 중 하나임
     * 훌륭한 글이었음! 웹사이트도 축하하지만, 글 자체가 가장 자랑스러워해야 할 부분임
     * 두 날 만에 사이트를 구축한 것은 좋은 선택이었음
          + 초기 경력 엔지니어들이 배워야 할 중요한 교훈임
          + 스케일링 문제는 실제로 문제가 될 때까지는 문제가 아님
          + 그 시점에서 좋은 문제이며, 생각보다 해결하기 어렵지 않음
     * 최근 관련된 프로젝트:
          + ""One Million Checkboxes"" - 링크 - 2024년 6월 (305개의 댓글)
     * 재미있는 프로젝트임
          + 6년 전 안드로이드에서 Pixmap이라는 협업 픽셀 편집 앱을 출시했음
          + 큐를 사용하여 각 이벤트를 PNG 이미지에 적용하고, 클라이언트는 연결 시 초기 PNG를 로드함
          + 각 픽셀 드로우 이벤트는 클라이언트에 작은 객체로 전송됨
          + 초기 로드 시 이미지 압축을 활용하고, 변경 세트는 매우 작음
          + 각 이벤트가 로그에 저장되므로 이미지를 ""되감기""할 수 있음
          + 데모 링크
     * 훌륭한 글이었음 - 비용이 얼마나 들었는지 궁금함
     * 사람들은 제한된 익명 상호작용을 갈망한다는 믿음이 확인되었음
     * 백엔드 초보자로서 이 프로젝트에 대한 간단한 대체 아키텍처가 있는지 궁금함
          + 백만 개의 상태를 호스팅하고 클라이언트와 동기화하는 더 쉬운 방법이 있기를 바람
          + 글의 일부 솔루션이 이해하기 어려웠음
          + 작성자에게 찬사를 보냄 - 프로젝트가 훌륭함
     * 멋짐!
          + 다음 글은 체크박스의 통계 분석이 될 것인지 궁금함
          + 내가 선택한 체크박스가 거의 즉시 해제되어 슬펐던 기억이 있음
     * 게임이 아직도 라이브인지 궁금함
          + One Million Checkboxes에 접속했을 때 아무 것도 체크되지 않았고, JS 콘솔에 다음과 같은 메시지만 보였음
          + {""total"":0,""totalGold"":0,""totalRed"":0,""totalGreen"":0,""totalPurple"":0,""totalOrange"":0,""recentlyChecked"":false}
"
"https://news.hada.io/topic?id=16113","창의성의 근본은 암기에서 비롯되는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          창의성의 근본은 암기에서 비롯되는가?

     * 나는 종종 창의적인 활동에 '시스템'을 도입한다고 놀림을 받음
          + 예: DJ 전환의 최적화된 방법, 코미디언과 밈의 유머 패턴 분석, 경쟁적 비디오 게임의 모범사례 체크리스트 등
     * 그러나 이는 창의성이 무엇인지 오해하는 것임
     * 창의성은 내면화된 개념을 연결하는 영감의 순간에서 비롯됨
          + 영감은 글쓰기나 그림 그리기를 알고 있어야 가능함
          + 말장난은 작가가 이미 알고 있는 한 단어와 다른 단어 사이의 유사성을 보지 않으면 만들어질 수 없음
          + 기존 작품에 대한 친숙함이 없으면 새로운 것이 참신함지 확신할 수도 없음
     * 창의성은 예술의 패턴을 내면화한 사람에게서 나오는데, 머릿속에 모든 것이 있기 때문에 연관성이나 참신함을 볼 수 있음
          + 따라서 자율성은 창의성을 가능하게 하고 시스템은 자율성을 더 빨리 달성하도록 도와줌

모든 것은 학습에서 시작됨

     * 얼마전 빠르게 학습하는 방법을 발견함
         1. 개념의 다양한 분류/패턴을 암기하기
         2. 실제 사례를 많이 접해서 이전에 학습한 패턴 중 하나와 일치시키기
     * 이는 학문적 주제 외에도 적용 가능
          + 스포츠: 수비의 약점을 인식하는 법 배우기
          + 영업: 누군가의 ""대화 유형""을 인식하는 법 배우기
          + 유머: 상황에서 흔한 유머의 기회를 인식하기
     * 학문적으로도 기존의 서구식 커리큘럼은 암기를 강조하는 듯 보였지만, 새로운 학교 교육은 암기를 보조하는 이해 중심으로 바뀌고 있는 것 같음
     * 동양 문화권에서는 Kumon(구몬교육연구회)과 같은 인기 있는 과외 서비스에서 볼 수 있듯이 매일 정해진 시간에 테스트를 통해 속도를 개발하는 등 자율성을 키우기 위해 이러한 원초적 능력을 훈련하는 데 집중
     * 캘리포니아에서 인도 부모님과 자란 덕에 두 가지 방식을 모두 경험함
          + 매일 어머니가 구몬 시트를 손으로 적어주고, 같은 학년의 인도 교과서(미국의 동급 교과서보다 훨씬 수준 높은)로 배움
          + 그래서 미국의 학교 시스템에 큰 무리없이 적응함
     * 여기서 핵심은 학습에서 암기의 역할
          + 우리는 종종 암기와 진정한 '이해'의 차이에 대해 이야기하지만, 실제로는 엄연히 다름
          + 수학적 적분을 푸는 다양한 방법을 암기하는 것과 그 순간에 올바른 방법을 사용할 수 있는 것은 다름
     * 하지만 나는 이러한 패턴 인식도 암기의 또 다른 형태일 뿐, 무의식적인 암기가 더 많다고 주장함
          + 이것은 반복적인 노출을 통해 학습되며, 프레임워크와 사용 가능한 패턴을 학습한 후 다양한 사례를 '폭넓게' 보려고 할 때 내가 시도하는 것
     * 실제로 내부에서 하는 일은 휴리스틱을 만들어서 ""암기하는 것임""
          + 휴리스틱이 내재화되면 새로운 원리가 되고 우리는 더 높은 수준의 문제에 집중하게 됨
     * 하지만 고등학생들이 흔히 그렇듯이 이해 없이 지식을 암기하더라도 나중에 이해가 발현될 수 있는 기회가 생김
          + 대학 시절 전자기파에 대한 증명 과제를 하다가 빛의 속도라고 맹목적으로 외웠던 ""3e8""이라는 수치가 갑자기 나왔을 때 받았던 충격을 잊을 수 없음

하지만 이렇게 하면 창의적이고 직관적이지 않고 기계적인 작업이 되지 않을까?

     * 오히려 기본기에 필요한 에너지를 줄여주어 창의성과 직관성을 높여주고, 고차원적인 문제에 집중할 수 있게 함
     * 무용수가 기본 동작을 배우면 즉흥 연주가 가능해짐. 피아니스트도 음계를 배우면 그렇게 됨
     * 시스템이 창의성을 직접 만들지는 않지만 창의성을 가능하게 해줌. 암기의 역할도 이와 유사함
     * 음악 이론을 배우면 공감을 얻는 방식으로 이를 어기는 것이 가능해짐
     * 개인적으로 최고의 사례는 세일즈를 배우는 것이었음
          + 직관적인 카리스마가 없는 나는 이를 위한 시스템을 배워야 했음
          + 예를 들어 전술적인 전달 기술 같은 것
               o 대답하기 전에 2초간 잠시 멈추세요
               o 문장에 너무 많은 조건문을 사용하지 마세요
               o 답변으로 시작한 다음 자세히 설명하세요(맥킨지 피라미드 원칙)
          + 또는 물어봐야할 질문들(SPIN Selling)
               o Situation(상황) 질문
               o Problem(문제) 질문
               o Impact(영향) 질문
               o Need-payoff(요구-보상) 질문
          + 처음에는 통화가 어색했지만, 일단 내재화되면 창의력이 풍부해짐
               o 대화가 자연스럽게 ""문제"" 질문에서 ""영향"" 질문으로 넘어가는 상황을 인지하면, 굳이 다시 ""문제"" 질문으로 돌아가지 않고 그냥 앞으로 나아가면 됨
          + 이러다 보면 갑자기 영업 전화(및 일반적인 인간 상호 작용)가 재미있어지고 삶이 향상됨

파급 효과(Ramifications)

     * 위의 단계를 사용하여 개인/경력 목표를 달성하기 위해 빠르게 배울 수 있는 학습 시스템을 얻었음
     * 가장 최근에는 다음과 같은 것들을 배웠음:
          + 판매하는 방법
          + 자금을 모으는 방법(fund raising)
          + 더 재치 있는 사람이 되는 방법
     * 덜 분명한 것은 창의력 시스템임
          + 창의력이 여러 영역에서의 자율성에서 나온다면, 더 창의적이 되는 한 가지 방법은 많은 영역에서 자율성을 갖는 것임
          + 이는 음악과 같은 단일 영역 내에서 가능함. 힙합과 컨트리의 패턴을 깊이 연구하고 배우면 Lil Nas X의 Old Town Road와 같은 히트 퓨전을 만들어낼 수 있음
     * 그러나 오늘날 대부분의 스타트업에서 볼 수 있듯이 영역 간에도 가능함
          + 나는 Skysafe에서 드론 해킹 역공학자로 일했는데, 이는 정보 보안과 라디오의 교차 전문 지식에서 탄생한 회사였음
          + Dopplio(만든 비디오를 AI 기반으로 개인화 시켜주는 서비스)도 정보 보안 악용, 마술, 영업에 대한 나의 이해에서 나왔음
     * 인터넷이 정보를 대중화하고 손쉬운 열매를 따기 힘들어짐에 따라, 새롭고 가치 있는 것을 만들어내려면 이와 같이 여러 분야의 전문 지식이 필요함(스타트업, 음악에서 볼 수 있듯이)
     * 요즘 ""제너럴리스트""는 ""반복 전문가""에 가까움
     * 그러므로 창의적이고 싶다면 많은 것을 깊이 배우고 빨리 배우는 법을 배워야 함
          + 이를 달성하기 위해 시스템을 받아들이고, 기본에서 벗어나 새로운 것에 집중할 수 있도록 자유롭게 해야 함

   위에 이야기가 나와서 저도 학생 때 구몬을 했었는데요. 몇 과목을 하면서 전부 다 싫어했지만 그 중 한자는 정말로 싫어했습니다. 그냥 한자 획을 따라 쓰면서 페이지를 채우는게 전부였거든요. 당시에는 이게 진짜 암기식 교육의 폐해라고 느끼면서 해가지 않은 적도 많고, 부모님께 혼도 정말 많이 났던 기억이 납니다.

   그렇지만 지금 와서 정말 생각이 많이 달라졌습니다. 알게 모르게 도움도 정말 많이 되었고 (국어수업이나 일본어/중국어 수업을 정말 수월하게 했습니다), 특히 요즘같은 브라우저 세상에는 '무언가 한 가지 똑같은 주제를 몇 번씩 숙달한다'는 개념 자체가 접할 기회가 많지 않아졌어요. SNS에선 항상 오늘 보는 영상, 기사와 내일 보는 영상, 주제들이 또 달라지니까요. 그리고 사실 초보자 입장에서는 우선 암기하고 숙달해야, 그래서 뇌에서 최적화가 이루어져야 무엇이 중요하고 중요하지 않은지 보이고 그 상위의 것들에 대한 고려나 사고도 가능해지는 것 같다고 느낍니다.

   이 글에 공감하며 현대 교육의 축이 너무나 (섣부른) 창의적 사고 중심으로 넘어갔고, 다시 약간은 넘어와 균형을 맞출 필요가 있다고 생각됩니다.

   구몬을 여기에서 보다니 의외네요

   본문과는 영 동 떨어진 잡설 입니다만…

   미국에는 구몬이 동네마다 있고, 인도와 중국계 부모들이 주요 고객들 입니다. 한인들 많은 지역엔 한국식 과외 학원도 많이 생겼습니다. 간판 한쪽에 Hagwon이라고 적혀 있는 곳도 있더군요. 어쨌거나 수학 같은 쪽은 공교육 수준이 워낙 떨어져서, 대학 보내려면 다들 하나씩 보낸다고 하더군요.

   구몬vs학원 인가요...

   한 스탠드업 코미디에서 구몬을 언급하길래 대강 해외에 진출해있다 정도로만 알고 있었는데 상세한 설명 감사합니다

        Hacker News 의견

     * OP와 다른 사람들은 ""암기""의 정의를 ""기억에 남는 모든 것""으로 확장하고 있음
          + 뜨거운 팬에 손을 데는 경험은 기억에 남지만, 이를 암기로 이해하지 않음
          + 암기는 추상적인 개념을 반복적으로 노출시켜 개념을 흡수하려는 행위로 이해됨
          + 전문가들이 학습자와 공감하지 못하고, 기호의 의미를 전달하지 못함
          + 단어 카드 외우기와 실제 읽기, 듣기, 대화의 차이
          + 어린 아이들은 단어 카드를 사용하지 않고, 실제 사회적 맥락에서 학습함
          + 특정 영역에서는 반복 학습이 유용할 수 있음
          + 그러나 이는 학습의 작은 부분에 불과하며, 주로 시험 통과에 중요함
          + OP의 주장을 재구성하면, 의도적인 연습이나 반복이 더 중요함
     * ""내부화된 개념을 연결하는 영감의 번뜩임""
          + 기계적인 암기는 개념을 내부화하는 데 필요하지 않음
          + 체계적인 암기는 창의성을 가르칠 수 없으며, 이는 프로그래밍에서도 마찬가지임
          + 암기는 프로그래밍에서 우아한 코드 대신 복잡한 디자인 패턴을 초래함
          + 전문성을 개발하는 데 있어 암기는 작은 부분에 불과함
          + 현실적인 연습과 빠른 피드백, 전문가의 멘토링이 더 중요함
          + 암기는 시간이 많이 들고 지루함
          + 맥락 없이 암기하는 것은 비효율적이며, 내재적 동기를 죽임
     * 인도 부모와 함께 자라면서 Kumon과 인도 교과서를 사용해 학습한 경험
          + 미국 학교 시스템을 쉽게 통과함
          + 우크라이나 난민들도 영국 학교 시스템에서 비슷한 경험을 하고 있음
          + 서구 공교육이 나쁜 상태에 있으며, 이는 사회적 약점의 원인임
     * 암기를 믿지 않았지만, spaced repetition을 통해 생각이 바뀜
          + 일상적으로 연습할 기회가 없는 것들도 숙달할 수 있게 됨
          + Kubernetes 문제 해결, 통계, PowerShell 윈도우 프로그래밍, 교통 공학 등에서 유용함
          + 예시로 통계 관련 링크 제공
     * Alphazero는 창의적이었지만, 단일 움직임도 암기하지 않았음
          + Deep Blue는 많은 움직임을 암기했지만 창의적이지 않았음
          + 창의성은 암기에서 나오지 않으며, 개념 주위에 모델을 구축하는 것임
     * 카테고리는 분류된 것이 아님
          + 모든 것을 상자에 넣는다고 해서 모든 것이 상자에 속하는 것은 아님
          + 단순히 암기하는 것이 해결책이 아님
     * 암기는 나쁜 평판을 가지고 있지만, 핵심 개념을 암기하는 것은 중요함
          + 충분히 엄격하게 수행되면, 암기는 고차원적 비판적 사고와 추론을 위한 공간을 만듦
     * 암기는 오랫동안 지능의 중요한 요소로 여겨져 왔음
          + 개념을 암기하는 것은 이해의 첫 단계임
          + 수학에서 암기한 것이 나중에 이해하는 데 큰 도움이 됨
     * 인터넷에서 수동적으로 소비하는 자기계발 콘텐츠는 실제로 삶에 영향을 미치지 않음
          + 의도적인 학습이나 반복이 없으면, 중요한 순간에 기억되지 않음
     * ""Repetitio est mater studiorum"" - 반복은 학습의 어머니임
          + 창의적 글쓰기 교수님이 매 수업 전에 이 말을 세 번 반복했음
"
"https://news.hada.io/topic?id=16083","MeTube: 셀프 호스팅 YouTube 다운로드 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    MeTube: 셀프 호스팅 YouTube 다운로드 프로그램

     * 32비트 ARM 빌드 중단
          + 새로운 Node 버전이 32비트 ARM을 지원하지 않음
          + 보안 업데이트와 종속성 문제로 64비트 OS로 마이그레이션 필요
     * MeTube 소개
          + youtube-dl의 웹 GUI (yt-dlp 포크 사용)
          + YouTube 및 여러 사이트에서 비디오 다운로드 지원

Docker로 실행

     * Docker 명령어
docker run -d -p 8081:8081 -v /path/to/downloads:/downloads ghcr.io/alexta69/metube

     * docker-compose 예제
version: ""3""
services:
  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    restart: unless-stopped
    ports:
      - ""8081:8081""
    volumes:
      - /path/to/downloads:/downloads

환경 변수로 설정

     * UID: MeTube가 실행될 사용자 ID (기본값: 1000)
     * GID: MeTube가 실행될 그룹 ID (기본값: 1000)
     * UMASK: umask 값 (기본값: 022)
     * DEFAULT_THEME: 기본 테마 (light, dark, auto, 기본값: auto)
     * DOWNLOAD_DIR: 다운로드 저장 경로 (기본값: /downloads)
     * AUDIO_DOWNLOAD_DIR: 오디오 전용 다운로드 저장 경로 (기본값: DOWNLOAD_DIR)
     * DOWNLOAD_DIRS_INDEXABLE: 다운로드 디렉토리 인덱싱 가능 여부 (기본값: false)
     * CUSTOM_DIRS: 사용자 지정 디렉토리 다운로드 활성화 여부 (기본값: true)
     * CREATE_CUSTOM_DIRS: 디렉토리 자동 생성 지원 여부 (기본값: true)
     * STATE_DIR: 큐 지속성 파일 저장 경로 (기본값: /downloads/.metube)
     * TEMP_DIR: 중간 다운로드 파일 저장 경로 (기본값: /downloads)
     * DELETE_FILE_ON_TRASHCAN: UI에서 삭제된 파일 서버에서 삭제 여부 (기본값: false)
     * URL_PREFIX: 웹 서버의 기본 경로 (기본값: /)
     * PUBLIC_HOST_URL: UI에서 표시되는 다운로드 링크의 기본 URL
     * PUBLIC_HOST_AUDIO_URL: 오디오 다운로드 링크의 기본 URL
     * OUTPUT_TEMPLATE: 다운로드 파일 이름 템플릿 (기본값: %(title)s.%(ext)s)
     * OUTPUT_TEMPLATE_CHAPTER: 챕터로 나눈 비디오 파일 이름 템플릿 (기본값: %(title)s - %(section_number)s %(section_title)s.%(ext)s)
     * YTDL_OPTIONS: youtube-dl에 전달할 추가 옵션 (JSON 형식)
     * YTDL_OPTIONS_FILE: YTDL_OPTIONS를 채우기 위한 JSON 파일 경로

브라우저 쿠키 사용

     * docker-compose.yml에 추가
volumes:
  - /path/to/cookies:/cookies
environment:
  - YTDL_OPTIONS={""cookiefile"":""/cookies/cookies.txt""}

     * 쿠키 추출 확장 프로그램 설치
          + Firefox
          + Chrome

브라우저 확장 프로그램

     * Chrome: Google Chrome Webstore에서 설치 가능
     * Firefox: Firefox Addons에서 설치 가능

iOS 단축키

     * iOS 단축키: Safari에서 URL을 MeTube로 전송
     * 서버 주소 및 포트 입력 필요

iOS 호환성

     * iOS 비디오 파일 요구 사항: h264 또는 h265 비디오 코덱 및 aac 오디오 코덱 필요
     * MP4 형식 다운로드 시 ""Best (iOS)"" 옵션 선택 가능

북마클릿

     * Chrome 북마클릿: 현재 열린 웹페이지를 MeTube로 전송
     * HTTPS 페이지에서 사용 시 HTTPS 역방향 프록시 필요

역방향 프록시 뒤에서 실행

     * NGINX 설정 예제
location /metube/ {
  proxy_pass http://metube:8081;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection ""upgrade"";
  proxy_set_header Host $host;
}

     * Apache 설정 예제
<Location /metube/>
  ProxyPass http://localhost:8081/ retry=0 timeout=30
  ProxyPassReverse http://localhost:8081/
</Location>
<Location /metube/socket.io>
  RewriteEngine On
  RewriteCond %{QUERY_STRING} transport=websocket [NC]
  RewriteRule /(.*) ws://localhost:8081/socket.io/$1 [P,L]
  ProxyPass http://localhost:8081/socket.io retry=0 timeout=30
  ProxyPassReverse http://localhost:8081/socket.io
</Location>

     * Caddy 설정 예제
example.com {
  route /metube/* {
    uri strip_prefix metube
    reverse_proxy metube:8081
  }
}

yt-dlp 업데이트

     * 자동 야간 빌드: 새로운 yt-dlp 버전이 있으면 자동으로 빌드 및 Docker 이미지 업데이트
     * watchtower 설치 및 설정 권장

문제 해결 및 이슈 제출

     * MeTube는 yt-dlp의 UI: yt-dlp 관련 문제는 MeTube 프로젝트에 제출하지 않음
     * yt-dlp 명령어 직접 사용 권장: 옵션 테스트 후 YTDL_OPTIONS에 적용

로컬 빌드 및 실행

     * 필요한 도구: node.js 및 Python 3.11
cd metube/ui
npm install
node_modules/.bin/ng build
cd ..
pip3 install pipenv
pipenv install
pipenv run python3 app/main.py

     * Docker 이미지 로컬 빌드
docker build -t metube .

개발 노트

     * Windows, macOS, Linux에서 작동
     * VSCode에서 서버 실행 시 다운로드 폴더는 사용자의 Downloads 폴더

GN⁺의 정리

     * MeTube는 youtube-dl의 웹 GUI로, 여러 사이트에서 비디오를 다운로드할 수 있는 기능을 제공함
     * Docker를 사용하여 쉽게 배포 및 설정할 수 있으며, 다양한 환경 변수를 통해 사용자 맞춤 설정이 가능함
     * 브라우저 확장 프로그램과 iOS 단축키를 통해 편리하게 비디오를 다운로드할 수 있음
     * yt-dlp의 최신 버전을 자동으로 업데이트하여 항상 최신 상태를 유지함
     * 유사한 기능을 제공하는 프로젝트로는 JDownloader, Video DownloadHelper 등이 있음

        Hacker News 의견

     * Tube Archivist는 기술 채널을 아카이브하고 인덱싱하는 데 유용함
          + 고급 전체 텍스트 및 메타데이터 검색 기능을 제공함
          + Alphabet보다 훨씬 나은 검색 기능을 제공함
     * YouTube TiVo와 같은 기능을 원함
          + 자주 시청하는 100개의 채널을 놓치고 싶지 않음
          + 우선순위 피드가 필요함
          + DLNA를 통해 다운로드 및 시청 가능하면 더 좋음
          + YouTube는 사용자가 좋아하는 콘텐츠를 놓치지 않게 하는 데 관심이 없음
     * yt-dlp를 사용하여 간단한 앱을 만들 생각을 하고 있음
          + 서버에 호스팅할 필요가 없다고 생각함
          + 대안이 있는지 궁금함
     * Jellyfin과 연동되는 인터페이스가 있으면 좋겠음
          + YouTube를 검색하고 yt-dlp로 다운로드한 후 광고 없이 Jellyfin을 통해 스트리밍 가능
     * 많은 YouTube 미러링 도구가 있는 것이 의아함
          + 비디오를 다운로드/아카이브하는 이유가 궁금함
          + 비디오가 삭제될 경우를 대비해 아카이브하는 것이 좋지만, 개인적으로는 드물게 발생함
          + 비디오를 보고 나면 다시 볼 필요가 없다고 생각함
     * yt-dlp 기반 서버가 PiHole처럼 간단한 이미저와 프론트엔드 클라이언트 앱으로 포장되면 인기를 끌 수 있을 것 같음
          + Raspberry Pi를 구매하고 microSD 카드를 이미지화한 후, 좋아하는 YT 채널을 선택하고 클라이언트 앱을 설치하면 로컬에서 광고 없이 YT 콘텐츠를 이용 가능
     * TubeSync를 사용 중임
          + 간단한 기능과 많은 버그에도 불구하고 충분히 잘 작동함
          + 채널이나 재생목록을 구독하고 비디오를 경로에 다운로드하며, 하루에 한 번 새로운 콘텐츠를 확인함
          + 채널 설정을 위한 UX만 필요함
          + 파일을 저장하고 Plex가 나머지를 처리하게 함
          + 더 나은 옵션이 있는지 궁금함
     * Cobalt.tools를 사용 중임
          + 만족스러움
     * 플레이리스트에 추가한 비디오를 다운로드하여 공유 Plex 서버에 저장함
          + 주로 콘서트 비디오와 스케이트 파트를 아카이브함
     * 관련 도구로 Yark: YouTube Archiver with Offline UI가 있음
"
"https://news.hada.io/topic?id=16106","구글 딥마인드 논문의 비용 계산 해보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         구글 딥마인드 논문의 비용 계산 해보기

     * ""arXiv 프리프린트에 약 $10M(130억원)을 태우는 방법""
     * 최근 딥마인드(GDM)가 ""Scaling Exponents Across Parameterizations and Optimizers"" 라는 훌륭한 논문을 발표
          + 이 논문은 10,000회 이상의 LLM 트레이닝 러닝을 수행하여 다양한 환경에서 최적의 하이퍼파라미터를 도출함
     * 논문을 읽은 후 실험 결과를 모두 집계하여 논문을 재현하는데 필요한 총 연산량 비용 계산을 시도해봄
     * 결과적으로 총 필요 FLOPS는 5.42e24 이고, 비용은 $12.9M(178억원) ($3/H100/시간당 으로 측정시)
          + 큰 틀에서 보면 5.42e24는 ""그렇게 크지 않은"" 규모임
          + 이는 라마 3에 사용된 컴퓨팅의 15%도 되지 않으며, 100,000개의 H100 클러스터로 이 모든 실험을 단 2일 만에 수행할 수 있음

H100 가치에 대한 부연 설명

     * 구글 딥마인드 출신 논문이므로 거의 확실히 TPU로 실험을 진행했을 것
     * 논문에 int8 사용 언급이 없으니 아마도 bfloat16 정밀도를 사용했을 것으로 추정됨
     * H100-SXM은 989.40TFLOP/s의 16비트 텐서 연산 성능 보유
     * 최근 PyTorch 블로그와 torchtitan에서 H100 MFU를 40% 정도로 보고함
     * H100 노드 비용은 시간당 $3 정도로 추산됨(어디서 쓰냐에 따라 조금씩 다르므로 평균치)

   가격보다 사용된 에너지의 총량이 궁금해지네요.
"
"https://news.hada.io/topic?id=16027","OVH 판례에 따른 프랑스에서의 CrowdStrike 손해 배상 책임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OVH 판례에 따른 프랑스에서의 CrowdStrike 손해 배상 책임

  CrowdStrike가 프랑스에서 손해배상 책임을 질 가능성

     * 최근 CrowdStrike 사건으로 인해 850만 대의 컴퓨터가 비활성화되고 54억 달러 이상의 손해가 발생한 것으로 추정됨
     * CrowdStrike가 손해배상 책임을 질 가능성이 높음
     * 프랑스에서 OVH 사건과 유사한 사례가 있었음

    OVH에 대하여

     * OVH는 유럽 최대의 데이터센터 및 클라우드 제공업체로, 물리적 서버와 가상 머신, 다양한 클라우드 서비스를 제공함
     * 2021년 3월 10일, SGB 위치에서 화재가 발생하여 두 개의 데이터센터가 전소되고 두 개의 데이터센터가 일시적으로 운영 불가능해짐
     * 다수의 고객이 손해배상을 청구하여 승소함
     * 법원에서 논의된 주요 사항:
          + 사건 중 및 이후에 서비스가 완전히 중단됨
          + 데이터가 완전히 복구 불가능하게 손실됨
          + OVH는 백업 서비스를 제공했으나, 백업도 복구 불가능하게 손실됨
          + 여러 데이터센터가 근처에 위치해 있었으나, 모두 같은 장소에 있어 법원에서 비합리적으로 판단됨
          + 백업이 동일한 데이터센터 또는 같은 장소에 위치한 다른 데이터센터에 저장된 것이 비합리적으로 판단됨
          + 고객이 여러 위치에 백업을 두는 것이 좋은 관행임을 법원이 인정함
          + 법원은 OVH가 백업 제공자로서 합리적인 기준을 준수해야 한다고 판단함
          + OVH의 백업 서비스가 합리적인 기준을 충족하지 못하고 목적에 실패했다고 판결함

    CrowdStrike에 대하여

     * CrowdStrike는 컴퓨터에 설치되는 안티바이러스 소프트웨어로, 주로 대기업의 장치에 설치됨
     * 2024년 7월 19일, CrowdStrike는 소프트웨어 업데이트를 배포했으나, 이 업데이트가 오류를 일으켜 수백만 대의 컴퓨터가 비활성화됨
     * 주요 논의 사항:
          + CrowdStrike는 컴퓨터 시작 시 높은 권한 모드에서 실행됨
          + 수백만 대의 중요한 장치에 배포됨
          + 업데이트가 수백만 대의 장치에 동시에 배포됨
          + 소프트웨어 업그레이드는 단계적으로 진행하는 것이 좋은 관행임
          + CrowdStrike가 테스트 및 단계적 배포를 하지 않았음
          + 고객들이 이전에도 이 문제를 제기했으나, CrowdStrike는 이를 거부함
          + 업데이트가 배포된 후 거의 두 시간 동안 문제가 인지되지 않음
          + 모든 컴퓨터가 비활성화되어 사용자들이 문제를 해결할 수 없었음
          + IT 팀이 물리적으로 접근하여 컴퓨터를 재설치하거나 드라이버 파일을 삭제해야 함
          + 수천 대에서 수십만 대의 장치를 복구하는 데 몇 주가 소요될 것임
          + 중요한 장치가 복구 불가능할 수 있음
          + CrowdStrike가 보호해야 할 컴퓨터를 파괴함
          + 고객들에게 심각한 피해를 초래함

    GN⁺의 정리

     * CrowdStrike 사건은 OVH 사건과 유사하게 손해배상 책임을 질 가능성이 높음
     * CrowdStrike의 업데이트 오류로 인해 수백만 대의 컴퓨터가 비활성화되어 기업들이 큰 피해를 입음
     * 이 사건은 소프트웨어 배포 및 테스트의 중요성을 강조하며, 특히 중요한 장치에 배포되는 소프트웨어의 경우 더욱 철저한 검증이 필요함
     * 비슷한 기능을 가진 다른 보안 소프트웨어로는 Symantec, McAfee 등이 있음

        Hacker News 의견

     * 프랑스 CSP에서 일하는 사람으로서 OVH 사건을 실시간으로 경험했음
          + OVH는 데이터 손실 때문에 책임을 졌음
          + 데이터 손실은 영구적이고 돌이킬 수 없는 문제임
          + 일부 기업은 데이터 손실로 인해 운영이 불가능해졌음
          + 서비스 중단은 SLA 계약으로 해결될 수 있는 문제임
          + CrowdStrike는 큰 책임을 지지 않을 것 같음
          + 의료 부문은 더 많은 규제가 필요할 것임
     * 이 헤드라인은 오해의 소지가 있음
          + 개인의 의견을 사실로 표현한 것임
          + ""CrowdStrike가 책임을 져야 한다고 생각함"" 같은 표현이 더 적절함
     * 일반적인 책임 면제 조항은 미국 외의 관할 구역에서는 의미가 없음
     * OVH와 CrowdStrike 사건 비교는 적절하지 않음
          + OVH는 백업 시스템 전체가 실패했음
          + CrowdStrike는 고객의 커널을 약 1시간 동안 다운시켰음
          + 소프트웨어 버그는 대부분의 산업에서 불가피한 것으로 취급됨
          + CrowdStrike의 소프트웨어는 많은 중요한 경로에 삽입되었기 때문에 뉴스가 됨
          + CrowdStrike의 소프트웨어는 부실하게 개발되었음
          + 법적 틀 내에서 책임을 질 가능성은 낮음
          + 고객들이 지갑으로 투표할 가능성이 있음
     * 많은 청구자들이 이미 변호사를 통해 보상을 받으려 하고 있을 것임
          + 여러 관할 구역에서 어떻게 조직되는지 궁금함
     * Falcon이 제공하는 보호 기능이 왜 OS 자체에서 제공되지 않는지 궁금함
          + Windows에서는 명확한 보안 역할이 존재하지 않음
          + Red Hat이나 Canonical과 비교됨
     * B2B 계약은 두 당사자가 모두 숙련된 것으로 간주됨
          + 계약 조건을 초과하는 법적 보호가 거의 없을 것임
          + 영국 법률에 대한 이해를 바탕으로 함
     * 대부분의 EU 국가에는 책임을 제한하는 법률이 있음
          + 병원, 응급 서비스 등은 직접적인 손해에 대해 소송을 제기할 수 있음
          + 개인도 손해에 대해 소송을 제기할 수 있음
          + 기회 비용이나 인력 비용은 소송하기 어려울 것임
          + 과실의 정도가 중요한 요소가 될 것임
     * 2019년 7월 19일에 CrowdStrike가 소프트웨어 업데이트를 푸시했음
          + 연도는 2024년으로 잘못된 것 같음
     * 몇 주 전에 CrowdStrike 에이전트가 Linux 시스템을 손상시킨 사건이 있었음
          + 이 사건과 관련이 있는지 궁금함
"
"https://news.hada.io/topic?id=16013","Node 22.5.0, sqlite 를 내장하고 Websocket 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Node 22.5.0, sqlite 를 내장하고 Websocket 지원

     * node:sqlite 로 내장 SQLite 사용 가능
          + 인메모리 DB를 생성하고 SQL로 테이블 생성 및 데이터 넣기/조회가 가능해짐
          + import { DatabaseSync } from 'node:sqlite'; const database = new DatabaseSync(':memory:');
     * node:http 에서 WebSocket 이 노출되어 이용 가능
          + import { WebSocket } from 'node:http';

   ecma script 구현체마다 node:sqlite, bun:sqlite..... 썩 맘에 들진 않네요

   바로 다른 에러가 패치된 22.5.1 이 릴리즈 되었으니, 테스트 한다면 22.5.1을 사용하세요
   https://github.com/nodejs/node/releases/tag/v22.5.1
"
"https://news.hada.io/topic?id=16097","걷기 전환을 위해 존엄성 우선 필요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          걷기 전환을 위해 존엄성 우선 필요

     * 친구가 여행에서 돌아와서 걸어다니는 것이 얼마나 좋았는지 이야기하는 경우가 있음
     * 왜 자동차가 생기기 전의 도시에서는 걷는 것이 자연스러운데, 집으로 돌아오면 걷는 것이 불편하게 느껴지는지에 대한 의문이 있음
     * 이는 도시의 밀도나 운전의 저렴함과 편리함 등 여러 요인이 있지만, 더 큰 요인은 보행자 경험을 존엄성 있게 설계하지 않는 것임

필요의 계층 구조

     * 좋은 보행자 공간을 설계할 때 세 가지 관련 개념이 있으며, 이는 Maslow의 필요 계층 구조와 유사하게 배열될 수 있음
     * 피라미드의 기초는 가장 필수적이지만, 완전하고 즐거운 보행자 경험을 위해서는 세 가지 계층 모두가 필요함
     * 계층은 준수, 안전, 존엄성임

  준수: 종종 충분하지 않음

     * 피라미드의 맨 아래에는 준수가 있음. 이는 주로 ADA 규칙을 준수하는 것을 의미함
     * ADA 규칙 준수만으로는 좋은 보행자 시설을 제공하지 못하는 경우가 많음
     * 예를 들어, 많은 기관이 준수 비용을 줄이기 위해 보행자 시설을 제거함
     * 준수는 선의로 이루어지지만 보행자 시설을 실제로 사용하기에는 충분하지 않은 경우도 있음

  안전: 한 단계 더 나아가지만 여전히 부족함

     * 피라미드의 중간에는 안전이 있음. 이는 실제와 인식된 안전을 모두 포함함
     * 준수하지만 안전하지 않은 시설을 만들 수 있음
     * 잘 설계되고 안전하지만 존엄성이 없는 시설도 있음

  존엄성: 걷는 것이 올바르게 느껴지게 하기

     * 존엄성을 갖춘 시설인지 여부를 판단하기 위한 간단한 테스트를 제안함
     * 친구가 걷고 있는 것을 보면 어떤 생각이 드는지에 따라 판단할 수 있음
     * 존엄성을 갖춘 보행자 경험을 만들기 위한 주요 요소는 다음과 같음
          + 그늘과 빛
          + 편리함
          + 둘러싸임과 비율
          + 참여도

    그늘과 빛

     * 존엄성을 갖춘 시설은 여름철에 일관된 그늘이 필요함
     * 밤에는 그림자가 최소화되고 경로가 명확해야 함

    편리함

     * 경로는 직관적이고 쉬워야 하며, 탐색하는 것이 지루하게 느껴지지 않아야 함
     * 날카로운 90도 회전이나 우회로를 가야 하는 것은 불편함을 느끼게 함

    둘러싸임과 비율

     * 넓고 개방된 복도를 걷는 것은 매우 불편한 경험임
     * 적절한 균형이 필요함

    참여도

     * 참여도가 높은 전면이 항상 더 매력적임
     * 전통적인 메인 스트리트를 걷는 것이 산업 공원을 걷는 것보다 더 즐거움

준수만으로는 충분하지 않음

     * 준수하는 인도와 경로를 만드는 것은 기본적인 수준에서 보행자를 돕기 위한 높은 우선순위임
     * 그러나 그것만으로는 충분하지 않음
     * 걷기와 롤링을 원하는 일상 활동으로 만들기 위해서는 준수, 안전, 존엄성을 갖춘 시설이 필요함

GN⁺의 정리

     * 이 기사는 보행자 경험의 존엄성을 강조하며, 단순한 준수와 안전만으로는 충분하지 않음을 설명함
     * 보행자 공간을 설계할 때 그늘, 편리함, 둘러싸임, 참여도와 같은 요소를 고려해야 함
     * 이 기사는 도시 계획자와 정책 입안자에게 유용하며, 보행자 친화적인 도시를 만드는 데 도움이 될 수 있음
     * 유사한 기능을 가진 프로젝트로는 ""Complete Streets"" 프로그램이 있음

        Hacker News 의견

     * Austin에서 경찰이 질문을 했는데, 나는 혼란스러워 보였음. 결국 박물관에 가는 중이라고 설명했음
          + 미국 방문 중 걷는 것을 즐겼지만, 유럽의 차 없는 생활이 더 좋음
     * 자동차 중심의 인프라가 거리를 불필요하게 넓게 만듦
          + 도시 중심에서 자동차를 거의 금지하는 것을 고려해야 함
     * GCN 채널에서 자동차 중심 사고에 대한 영상을 공개했음
          + 이동성을 우선시하는 사고방식이 필요함
          + 안전한 자전거 인프라를 위해 도로를 재설계해야 함
     * 기사 제목이 오해를 불러일으킬 수 있음
          + 보행자의 존엄성을 운전자보다 우선시해야 함
          + 많은 미국 도시가 자동차 없이는 살기 어려움
     * 큰 도시에서 걷는 것을 좋아하는 사람도 있지만, 혼잡한 곳에서 걷는 것을 불편해하는 사람도 있음
          + 자동차는 개인 공간을 제공해줌
     * 이상적인 도시를 상상하는 것은 현실적이지 않음
          + 유럽의 작은 도시와 미국의 농촌 지역을 비교하는 것은 무리임
     * 미국에서 걷는 것은 어색하게 느껴질 수 있음
     * 16세 이하와 75세 이상의 사람들은 이동에 제한이 있음
          + 걷기 좋은 도시에서 자란 사람들은 더 자유롭게 이동할 수 있음
     * 유럽으로 이주하는 방법에 대해 궁금해하는 사람도 있음
          + 스페인, 독일, 네덜란드, 스웨덴, 에스토니아에 관심이 있음
     * 디즈니 월드는 보행자 이동을 극대화한 예시임
          + 대중교통 시스템이 보행자 중심 블록을 연결함
          + 소음이 많은 자동차를 지하로 이동시키는 것도 고려해야 함
"
"https://news.hada.io/topic?id=16025","Apple Maps 웹용 베타 버전 출시 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Apple Maps 웹용 베타 버전 출시

     * 오늘부터 Apple Maps 웹 베타 버전이 공개되어 전 세계 사용자가 브라우저를 통해 Maps에 직접 접근할 수 있음
     * 사용자는 운전 및 도보 경로 안내를 받을 수 있으며, 사진, 영업 시간, 평점 및 리뷰 등 유용한 정보를 찾을 수 있음
     * Maps 장소 카드에서 직접 음식을 주문하거나, 도시의 먹거리, 쇼핑, 탐험할 장소를 발견할 수 있는 큐레이션된 가이드를 탐색할 수 있음
     * 추가 기능인 Look Around는 몇 달 내에 제공될 예정임
     * 모든 개발자는 MapKit JS를 사용하는 경우, 웹에서 Maps로 링크를 연결하여 사용자가 운전 경로를 확인하거나 상세한 장소 정보를 볼 수 있도록 할 수 있음
     * 현재 웹에서의 Maps는 영어로 제공되며, Mac과 iPad의 Safari와 Chrome, Windows PC의 Chrome과 Edge에서 호환됨
     * 추가 언어, 브라우저 및 플랫폼 지원은 시간이 지나면서 확대될 예정임
     * 지역에 따라 이용 가능 여부가 다를 수 있음

    GN⁺의 정리

     * Apple Maps 웹 베타 버전은 사용자가 브라우저를 통해 쉽게 접근할 수 있도록 하여 편리함을 제공함
     * 다양한 기능과 큐레이션된 가이드를 통해 사용자 경험을 향상시킴
     * 개발자에게는 MapKit JS를 통해 웹과의 통합을 용이하게 함
     * 추가 언어와 플랫폼 지원이 예정되어 있어 더 많은 사용자가 이용할 수 있을 것으로 기대됨
     * Google Maps와 같은 다른 지도 서비스와의 경쟁에서 어떤 차별점을 제공할지 주목할 필요가 있음

   Firefox는 지원 안 하는데다, Linux에서는 Chrome이나 Edge를 써도 지원 안 한다고 뜨네요…

   아직 한국에서는 접근 안되나 보네요.
   해커뉴스 댓글에서 https://maps.apple.com/imagecollection/map?path=anything 예전에도 요런 식으로 편법?으로 볼수는 있었다고 하네요.

   공식으로 열려야 좋겠지만, 미국 대도시에서는 애플맵이 나름 좋지만 한국은 그닥일듯 합니다.

        Hacker News 의견

     * 웹에서 작동하지 않는 웹 앱을 출시하는 것은 Apple의 특성임
          + Apple은 특정 하드웨어에서만 작동하는 메시징 앱을 만듦
          + Apple은 존재하지 않는 제한을 찾아내는 능력이 있음
     * Firefox에서 Apple Maps를 사용해본 결과, POI가 잘못 배치되고 도로가 직각으로 표시됨
          + 특히 남아프리카에서 문제가 발생함
          + OpenStreetMap 프로젝트에 기여할 때 Apple은 종종 실수를 저지름
     * Apple Maps를 매일 NYC에서 사용하며, 핀을 드롭하는 시간을 조금 더 길게 설정해주길 바람
          + 브라우저에서 뷰를 드래그하려다 실수로 핀을 드롭하는 일이 자주 발생함
     * Google Maps에 많은 ""Favorites"", ""Want to Go"", ""Starred"" 장소가 저장되어 있어 Apple Maps로 전환하는 비용이 높음
          + Google Maps 데이터를 내보내는 방법이 있는지 궁금함
          + Apple이 데이터를 가져오는 기능을 제공할지 궁금함
     * Firefox는 지원되는 브라우저가 아님
          + Android는 전혀 지원되지 않음
          + 어떻게 이런 상황이 발생할 수 있는지 이해할 수 없음
     * 베타 제품이므로 모든 플랫폼을 지원하지 않는 것은 이해할 수 있음
          + 그러나 오픈 소스 브라우저와 운영 체제를 사용하는 사람들이 가장 철저한 테스트와 상세한 문제 보고를 제공할 것임
     * ""beta."" 부분을 제거하고 Chrome + Windows에서 시도해본 결과, 쿼리 매개변수가 있는 URL은 경쟁사인 Google Maps로 리디렉션됨
          + 이유를 알 수 없음
     * Apple Maps는 DuckDuckGo를 통해 작동함
          + DuckDuckGo는 개인 정보 보호를 위해 Apple Maps를 사용함
          + 주소, 지리적 장소, 지역 비즈니스 등을 검색할 수 있음
          + 개인 정보 보호 정책에 따라 개인 식별 정보를 수집하거나 공유하지 않음
     * Firefox 지원 부족에 대해 불만이 있지만, 최신 iOS 18 베타에서 Apple의 Safari 브라우저도 차단됨
          + 이는 베타 버그일 가능성이 높음
     * 지도 서비스가 핀 위치의 사용자 정의 목록에 인색함
          + Google Maps의 저장된 목록이 8,000개 이상의 즐겨찾기로 인해 사용 불가능해짐
          + Apple은 100개의 제한으로 더 나쁨
"
"https://news.hada.io/topic?id=16076","AVX-512을 사용한 tolower() 함수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AVX-512을 사용한 tolower() 함수

     * 몇 년 전, SWAR 트릭을 사용하여 tolower()를 빠르게 처리하는 방법에 대해 글을 썼음. 며칠 전, Olivier Giniaux의 글에서 SIMD 명령어를 사용하여 작은 문자열을 처리하는 최적화 방법에 대해 흥미를 느꼈음. 이 방법은 Rust로 작성된 빠른 해시 함수에서 사용됨.
     * SIMD 명령어는 짧은 문자열을 쉽게 처리할 수 있지만, 메모리와 벡터 레지스터 간의 전송이 어렵다는 점이 항상 불편했음. Olivier의 글은 이 문제를 해결하는 재미있는 방법을 제시했음.

  희망의 징후

     * 일부 SIMD 명령어 세트는 문자열 처리를 위한 유용한 마스크 로드 및 스토어 기능을 제공함. 이는 바이트 단위로 작동함.
          + ARM SVE: 최근의 큰 ARM Neoverse 코어에서 사용 가능, 예를 들어 Amazon Graviton. 하지만 Apple Silicon에서는 사용 불가.
          + AVX-512-BW: 최근 AMD Zen 프로세서에서 사용 가능. AVX-512는 복잡한 확장 세트로, Intel에서는 지원이 랜덤함.
     * AMD Zen 4 박스를 가지고 있어 AVX-512-BW를 시도해보기로 했음.

  tolower64()

     * Intel intrinsics 가이드를 사용하여 한 번에 64바이트를 처리할 수 있는 기본 tolower() 함수를 작성함.
          + *를 와일드카드로 사용하여 mm512*epi8을 검색해 바이트 단위의 AVX-512 함수를 찾음.
          + 몇 가지 레지스터를 64개의 유용한 바이트로 채움.
          + 대문자를 소문자로 변환하기 위해 필요한 숫자를 설정함.
          + 입력 문자를 A와 Z와 비교하여 대문자인지 확인함.
          + 마스크를 사용하여 대문자인 경우 소문자로 변환함.

  대량 로드 및 스토어

     * tolower64() 커널을 더 편리한 함수로 감싸야 함. 예를 들어, 문자열을 복사하면서 소문자로 변환하는 함수.
          + 긴 문자열의 경우, 정렬되지 않은 벡터 로드 및 스토어 명령어를 사용함.

  마스크 로드 및 스토어

     * 작은 문자열과 긴 문자열의 끝 부분은 마스크된 정렬되지 않은 로드 및 스토어를 사용함.
          + 마스크는 첫 len 비트가 설정됨.
          + 로드와 스토어는 마스크가 추가된 전체 너비 버전과 유사함.

  벤치마킹

     * 여러 유사한 함수의 성능을 벤치마킹함.
          + Clang 16으로 컴파일하고 AMD Ryzen 9 7950X에서 실행함.
          + 각 함수는 별도로 컴파일하여 인라인 및 코드 이동의 간섭을 피함.
     * 결과:
          + tolower64는 테스트된 모든 함수 중 가장 빠름.
          + copybytes64는 tolower64와 유사한 방식으로 AVX-512를 사용하지만 크게 빠르지 않음.
          + copybytes1은 바이트 단위로 memcpy를 수행하며, Clang 11의 자동 벡터화가 상대적으로 좋지 않음을 보여줌.
          + 표준 tolower()는 가장 느림.
          + tolower1은 Clang 16으로 컴파일된 바이트 단위 tolower()이며, 자동 벡터화가 개선되었지만 여전히 느림.
          + tolower8은 이전 블로그 글에서 소개한 SWAR tolower()이며, Clang이 자동 벡터화를 시도하지만 결과가 좋지 않음.
          + memcpy는 초기에는 빠르지만 copybytes64의 절반 속도로 떨어짐.

  결론

     * AVX-512-BW는 특히 짧은 문자열을 처리할 때 매우 유용함.
     * Zen 4에서 매우 빠르며, 내장 함수가 사용하기 쉬움.
     * AVX-512-BW의 성능은 매우 부드러움.
     * ARM SVE 지원이 있는 박스가 없어 자세히 조사하지 못했지만, SVE가 짧은 문자열에 얼마나 잘 작동하는지 궁금함.
     * 이러한 명령어 세트 확장이 더 널리 사용되기를 바람. 문자열 처리 성능을 크게 향상시킬 것임.
     * 이 블로그 글의 코드는 내 웹사이트에서 확인 가능함.

  GN⁺의 정리

     * 이 글은 SIMD 명령어를 사용하여 짧은 문자열을 효율적으로 처리하는 방법을 설명함.
     * AVX-512-BW와 ARM SVE 명령어 세트가 문자열 처리에 유용함을 보여줌.
     * 벤치마킹 결과, AVX-512-BW가 특히 짧은 문자열에서 뛰어난 성능을 발휘함.
     * 이 글은 성능 최적화에 관심 있는 개발자들에게 유용할 것임.

        Hacker News 의견

     * Rust와 LLVM 메모리 모델에서 ""unsafe read beyond of death"" 트릭은 정의되지 않은 동작으로 간주됨
          + 컴파일러는 최적화를 위해 이러한 동작이 발생하지 않는다고 가정할 수 있음
          + 이를 피하려면 인라인 어셈블리를 사용해야 함
     * AMD의 AVX512 구현과 Intel의 AVX10 경쟁에 대한 호기심이 생김
          + AVX10은 Intel의 P vs E 코어 문제를 해결하기 위한 것임
          + AMD는 상황에 맞게 Zen5의 전체 폭 또는 Zen4, Zen5 모바일의 256비트 더블 펌프를 사용함
          + 큰 성능 향상은 Zen4 코어에서 이루어짐
     * SWAR 최적화는 8바이트 주소에 정렬된 문자열에만 유용함
          + 비정렬된 문자열에 적용하면 원래 알고리즘보다 느림
          + 알고리즘을 세 부분으로 나누면 더 많은 명령어가 필요함
     * 마스크 추가가 깔끔해 보임
          + .NET 내장 기능에서 AVX512의 마스크 레지스터를 직접 조작할 수 있는 방법이 있었으면 좋겠음
     * Clang을 사용하면 더 나은 결과를 얻을 수 있음
          + 더 나은 명령어 선택과 잘 풀린 결과를 제공함
     * 짧은 길이의 문자열에 대한 코어 루프는 한 명령어가 더 적음
          + 짧은 문자열을 빠르게 처리하는 것이 중요함
     * ASCII를 UTF-8로 대문자/소문자 변환하는 유사한 구현을 C#에서 작성함
          + 짧은 문자열이 대부분의 코드베이스를 지배하므로 빠르게 처리하는 것이 중요함
     * AVX512를 사용하여 텍스트를 uwu로 변환하는 SIMD 사용 예시가 있음
     * 유니코드 문자 변환을 고려하면 더 인상적일 것임
          + 대부분의 프로그래머는 ASCII에만 신경 쓰지만, 표준 문자 집합 외에도 많은 세계가 존재함
     * 과거에 이미지 주위에 검은 테두리를 추가하여 버퍼 SIMD 문제를 피한 경험이 있음
          + 입력을 완전히 제어할 수 없을 때도 있음
"
"https://news.hada.io/topic?id=16065","리눅스 네트워크 성능 궁극 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           리눅스 네트워크 성능 궁극 가이드

  Linux 네트워킹 스택

    Linux 네트워크 패킷 수신

     * 네트워크 장치에서 NIC(Network Interface Card)는 패킷이 도착했음을 알리기 위해 IRQ(Interrupt Request)를 발생시킴
     * IRQ 핸들러는 매우 높은 우선순위로 실행되며, 추가 IRQ 생성을 차단함
     * softIRQ 시스템은 장치 드라이버 IRQ 컨텍스트 외부에서 작업을 처리하기 위해 사용됨
     * softIRQ 커널 스레드가 생성되고, softnet_data 구조체가 생성됨
     * NIC는 네트워크 데이터가 RAM의 링 버퍼에 기록되도록 DMA(Direct Memory Access)를 사용함
     * NAPI softIRQ 폴링 루프가 시작됨
     * net_rx_action 루프가 NAPI 구조체를 확인하고, 패킷을 napi_gro_receive로 전달함
     * 패킷은 netif_receive_skb를 통해 프로토콜 스택으로 전달됨

    Linux 커널 네트워크 전송

     * 애플리케이션이 메시지를 전송하면 TCP 헤더가 작성되고, L3 핸들러가 호출됨
     * 패킷이 조각화되고, L2 전송 함수가 호출됨
     * 드라이버가 패킷을 tx 링 버퍼에 큐잉함
     * NIC가 RAM에서 패킷을 가져와 전송함
     * 전송이 완료되면 NIC가 하드 IRQ를 발생시킴
     * 드라이버가 이 IRQ를 처리하고, NAPI 폴 시스템을 스케줄링함

  네트워크 성능 튜닝

    빠른 HOWTO

      /proc/net/softnet_stat & /proc/net/sockstat

     * /proc/net/softnet_stat 파일은 각 CPU 코어의 통계를 제공함
     * /proc/net/sockstat 파일은 소켓 사용 통계를 제공함

      ss

     * ss는 소켓 통계를 조사하는 유틸리티로, 메모리 사용량을 확인할 수 있음

      netstat

     * netstat는 네트워크 연결 및 프로토콜 스택 통계를 제공하는 명령줄 유틸리티임

      sysctl

     * sysctl 명령을 사용하여 시스템/네트워크 설정을 변경할 수 있음
     * /etc/sysctl.conf 파일을 편집하여 영구적으로 값을 변경할 수 있음

    NIC 링 버퍼

     * NIC 링 버퍼는 고정 크기의 FIFO 버퍼로, RAM에 위치함
     * 버스트 연결을 원활하게 수용하기 위해 이 큐를 증가시킬 필요가 있음

GN⁺의 정리

     * 이 가이드는 Linux 네트워크 스택의 작동 방식을 상세히 설명하며, 네트워크 성능을 최적화하기 위한 다양한 방법을 제시함
     * 네트워크 패킷의 수신 및 전송 과정에서 발생하는 IRQ와 softIRQ의 역할을 이해하는 것이 중요함
     * sysctl 명령을 사용하여 시스템 설정을 조정하고, NIC 링 버퍼의 크기를 조정하여 성능을 향상시킬 수 있음
     * 네트워크 성능 튜닝은 시스템의 특정 요구 사항에 따라 달라질 수 있으며, 다양한 설정을 실험해보는 것이 필요함
"
"https://news.hada.io/topic?id=16115","최근 베네수엘라 선거에서 발견된 의심스러운 데이터 패턴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     최근 베네수엘라 선거에서 발견된 의심스러운 데이터 패턴

        Hacker News 의견

     * Carter Foundation이 베네수엘라 선거의 공정성을 위해 지역 투표 집계 공개를 요구함
     * 선거 결과를 조작하는 예시로, 1,000표 중 60%를 얻었다고 주장하는 경우를 설명함
          + 실제로는 10,058,774표와 같은 큰 숫자에서 정확히 60%를 얻는 것은 매우 드문 일임
     * 아프리카 선거의 문제점과 그 합법성을 판단하는 기준을 설명하는 BBC 기사 언급
          + 투표 조작의 징후: 너무 많은 유권자, 특정 지역의 높은 투표율, 많은 무효표, 발행된 투표용지보다 많은 투표수, 일치하지 않는 결과, 결과 발표 지연
     * 발표자가 단순히 반올림된 퍼센티지와 총 투표수를 받았을 가능성을 제기함
     * 에베레스트 산의 높이가 처음 측정되었을 때 정확히 29,000피트로 나왔던 이야기를 상기시킴
     * CNE의 공식 성명이 아직 게시되지 않았음을 지적함
     * ""한 사람, 한 표"" 원칙이 쉽게 왜곡될 수 있음을 상기시킴
          + 베네수엘라의 경우 1998년에 한 번 있었음
     * 이번 선거가 공정하기를 바라는 마음을 표현하며, 미국의 개입이 베네수엘라에 혼란을 초래하지 않기를 바람
          + 댓글을 통해 정부가 퍼센티지를 게시했을 뿐, 투표 집계는 게시하지 않았음을 확인함
     * TV에서 투표 분포를 보여주었을 때 합이 106%였다는 지적
     * 모든 투표 수가 정확한 숫자로 나오는 것은 매우 드문 일이라는 질문을 제기함
          + 로또 당첨 번호가 특정 숫자 세트와 동일한 확률을 가지는 예시를 들음
"
"https://news.hada.io/topic?id=16021","Node.js, TypeScript 실험적 지원 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Node.js, TypeScript 실험적 지원 추가

    모듈: --experimental-strip-types 추가

     * Node.js에서 TypeScript 파일 실행 가능
          + --experimental-strip-types 플래그를 설정하면 TypeScript 파일을 실행할 수 있음
          + Node.js는 TypeScript 소스 코드를 JavaScript 소스 코드로 변환함
          + 변환 과정에서 타입 체크는 수행되지 않으며, 타입은 제거됨
     * 동기
          + TypeScript 파일을 외부 종속성이나 로더 없이 실행할 수 있도록 하는 것이 중요함
          + 사용자들이 node foo.ts를 실행할 수 있기를 원함
     * 타입 스트리핑의 의미
          + 타입 스트리핑은 모든 타입을 제거하고 입력을 JavaScript 모듈로 변환하는 것
          + 예: const foo: string = ""foo"";가 const foo = ""foo"";로 변환됨
     * @swc/wasm-typescript 선택 이유
          + 간단함 때문
          + 다른 도구들은 Rust나 Go를 추가해야 하지만, @swc/wasm-typescript는 작은 패키지로 wasm과 js 파일만 필요함
          + Deno에서도 사용되고 있어 신뢰할 수 있음
     * 제한 사항
          + Enum, 네임스페이스 등 TypeScript 전용 기능은 변환되지 않음
          + 확장자 없는 임포트는 지원되지 않음
     * 향후 계획
          + 네이티브 레이어에서 구현될 가능성 있음
          + 소스 맵 지원을 추가할 수 있음

    GN⁺의 정리

     * Node.js에서 TypeScript 파일을 실행할 수 있도록 하는 새로운 기능에 대해 설명함
     * TypeScript 파일을 JavaScript로 변환하여 실행할 수 있게 하며, 타입 체크는 수행되지 않음
     * 이는 사용자들이 외부 종속성 없이 TypeScript 파일을 실행할 수 있게 하여 개발 환경을 단순화함
     * 이 기능은 @swc/wasm-typescript를 사용하여 구현되었으며, 향후 네이티브 레이어에서의 구현도 고려되고 있음
     * TypeScript와 JavaScript를 혼합하여 사용하는 프로젝트에 유용할 수 있음.

        Hacker News 의견

     * TypeScript의 타입을 제거하는 것은 TypeScript의 문법 없이는 불가능함. 타입 제거는 토큰 수준의 작업이 아니며, TypeScript 문법은 계속 변화하고 있음
          + 예를 들어, foo < bar & baz > ( x )는 TypeScript 1.5에서 다르게 해석되었음
          + 새로운 TypeScript 기능을 사용하려면 JS로 컴파일하거나 Node 버전을 최신으로 유지해야 함
          + Node LTS 릴리스를 사용하는 사람들에게는 타협이 어려울 수 있음
     * Node.js가 TypeScript 파일을 직접 실행할 수 있다면 TypeScript 컴파일러는 타입을 제거하고 JavaScript로 변환할 필요가 없을 것임
          + 이는 Python의 상황과 유사함
          + Python에서는 여러 타입 체커가 존재하며, 모두 동일한 타입 힌트 문법을 사용하지만 다른 의미를 적용함
          + JavaScript에서는 TypeScript가 유일한 인기 있는 타입 체커가 됨
          + Python에서는 타입 힌트를 주석처럼 사용하는 사람들도 있음
          + Node.js에서 타입을 무시하는 기능이 지원된다면 JavaScript에서도 가능할 것임
     * 이 기능이 기본값이 된다면 NPM 생태계가 어떻게 반응할지 궁금함
          + NPM 모듈을 게시할 때 CJS와 EJS 버전을 계속 빌드할지, 아니면 engine: nodejs >= 25를 package.json에 추가하고 빌드 단계를 생략할지 고민됨
          + 개인적으로는 TS로 작성된 NPM 모듈이 더 이상 dist/.cjs를 제공하지 않기를 바람
          + 빌드 단계를 생략하는 것이 NPM 기여자들에게 유혹적일 것임
          + 이는 NPM 생태계에 파급 효과를 일으킬 수 있음
          + Node.js가 이 기능을 실험적 플래그 없이 제공하면 모든 소비자가 TS 파일을 수용할 것으로 예상됨
          + 이는 Firefox와 Safari도 TS 파일을 수용하도록 강제할 수 있음
          + 개인적으로는 JS 컴파일러가 TS 타입 주석을 버리는 것을 환영함
          + Node가 .ts 파일을 수용하면 트랜스컴파일 단계를 제거할 수 있음
     * Node가 JS에서 타입을 조사할 수 있게 되면 큰 이득이 될 것임
          + Python에서는 pydantic 같은 도구가 존재하며, 이는 타입을 조사하고 검사를 생성함
          + 이는 단일 표준 표기법으로 타입 검사, 런타임 데이터 검사, API 생성, API 문서 생성을 가능하게 함
          + 현재 JS에서는 zod 같은 도구가 필요함
     * Bun의 개발자 경험(DX)은 이 분야에서 전례가 없으며, 대부분의 사용 사례가 충족됨
          + Node에서는 import 시 확장을 요구하지 않도록 설정할 수 없으며, tsc가 .js 확장을 자동으로 추가하도록 설정할 수 없음
          + 네이티브 TypeScript 지원이 이를 해결할 수 있지만, Bun의 사용자 경험이나 성능을 따라잡기 어려울 것임
     * TypeScript를 매우 즐기며 TypeScript 런타임을 갈망해왔음
          + Java를 떠난 이유가 더 많은 기능을 가진 타입 시스템과 점진적 타이핑을 원했기 때문임
          + npm 생태계의 단점에도 불구하고 라이브러리를 사용하는 것이 덜 부담스럽고 더 재미있음
          + Rust는 다른 언어 스펙트럼에 있지만 유사한 느낌을 제공함
          + JIT는 잘못된 용어였으며, JVM과 V8의 시작 시간과 런타임 차이를 말하고자 했음
     * 내가 가장 좋아하는 deno 기능이 Node에 직접 도입됨
          + esbuild를 설치하지 않고 타입을 제거할 수 있게 되어 매우 기대됨
          + 최근에는 Python을 선호했지만, TypeScript가 Python보다 타입 면에서 더 나음
          + 큰 스크립트는 타입이 있을 때 더 큰 이점을 가짐
     * Node에게 매우 중요한 한 달이었음
          + v22.5.0에서 node:sqlite를 추가했고, 이제 TypeScript 지원이 도입됨
          + Node의 방향성이 마음에 듦
     * PR 작성자임, AMA
     * 오래 전 Node.js를 백엔드 작업에 사용하기 시작했으며, PHP보다 많은 이점을 제공함
          + Node는 다소 번거롭고 원하는 언어로 만들기 위해 조립해야 했음
          + Golang을 사용하기 시작했고, 타입 안전성 덕분에 코딩이 더 쉬워짐
          + TypeScript는 좋은 옵션이지만 또 다른 부가 기능에 불과함
          + Node를 사용하는 큰 이점은 프로토타입 작성 속도이며, TypeScript 사용으로 인해 이 이점이 상쇄될 수 있음
"
"https://news.hada.io/topic?id=16029","OpenAI, SearchGPT 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI, SearchGPT 발표

     * AI 모델과 웹 정보를 결합하여 빠르고 시의적절한 답변을 제공하는 새로운 검색 기능의 프로토타입
     * 소규모 사용자 및 게시자 그룹에 출시하여 피드백을 받을 예정이며, 향후 ChatGPT에 이러한 기능을 직접 통합할 계획
     * Waitlist에 등록 가능

새로운 검색 방식

     * 웹에서 답을 찾는 것은 많은 노력이 필요하며 종종 여러 번 시도해야 관련 결과를 얻을 수 있음
     * AI 모델의 대화 기능을 웹의 실시간 정보로 강화하면 원하는 것을 더 빠르고 쉽게 찾을 수 있다고 생각함

더 빠르고 쉬운 검색 방법

     * 웹의 최신 정보를 사용하여 질문에 신속하고 직접적으로 응답하면서 관련 출처에 대한 명확한 링크와 함께 제공
     * 사람과 대화할 때처럼 후속 질문을 할 수 있으며, 각 쿼리와 함께 공유 컨텍스트가 구축됨
     * 이미지와 비디오를 포함한 시각적 응답을 쉽게 이해할 수 있는 형식으로 제공

퍼블리셔 및 창작자와의 파트너십

     * 번창하는 퍼블리셔 및 창작자 생태계를 위해 노력하고 있음
     * 사용자가 퍼블리셔 사이트 및 경험을 발견하는 데 도움을 주면서 검색에 더 많은 선택권을 제공하기를 희망함
     * 수십 년 동안 검색은 퍼블리셔와 창작자가 사용자에게 다가가는 기본적인 방법이었음
     * 이제 AI를 사용하여 대화형 인터페이스에서 고품질 콘텐츠를 강조하고 사용자가 참여할 수 있는 여러 기회를 제공함으로써 이 경험을 향상시키고 있음
     *

     ""AI 검색이 사람들이 인터넷을 탐색하는 주요 방법 중 하나가 될 것이며, 이 기술이 저널리즘과 출판사를 소중히 여기고 존중하며 보호하는 방식으로 구축되는 것이 중요함"" - The Atlantic의 CEO인 Nicholas Thompson
     * SearchGPT는 검색 시 게시자를 눈에 띄게 인용하고 연결하여 사용자가 게시자와 연결되도록 설계되었음
     * 응답에는 명확한 인라인 및 명명된 속성과 링크가 있어 사용자는 정보의 출처를 알고 사이드바의 소스 링크를 통해 더 많은 결과를 빠르게 확인할 수 있음
     * 이 경험을 구축하기 위해 퍼블리셔들과 파트너 관계를 맺었으며 계속해서 피드백을 구하고 있음
     * SearchGPT 프로토타입 출시 외에도 퍼블리셔가 SearchGPT에 나타나는 방식을 관리할 수 있는 방법도 출시하여 퍼블리셔에게 더 많은 선택권을 제공
     * 중요한 점은 SearchGPT가 검색에 관한 것이며 OpenAI의 생성 AI 기반 모델 교육과는 별개라는 것임
     * 생성 AI 교육을 선택 해제한 경우에도 사이트가 검색 결과에 표시될 수 있음
     *

     ""AI 기반 검색이 효과적이려면 신뢰할 수 있는 출처에서 제공하는 최고 품질의 가장 신뢰할 수 있는 정보를 기반으로 해야 하며, 기술과 콘텐츠 간의 관계는 공생적이어야 하고 출처가 보호되어야 함"" - News Corp의 최고경영자 Robert Thomson

앞으로의 계획

     * 지역 정보 및 상거래와 같은 영역에서 사용자 경험을 계속 개선해 나갈 예정임
     * 또한 사용자 및 게시자로부터 프로토타입에 대한 피드백을 받고 이 경험의 장점을 ChatGPT에 적용할 계획임
     * SearchGPT를 사용해 보고 싶다면 대기자 명단에 등록할 수 있음

GN⁺의 의견

     * SearchGPT는 기존 검색 엔진의 한계를 극복하고 보다 직관적이고 대화형 방식으로 정보를 제공할 수 있는 혁신적인 시도로 보임
     * 다만 AI 모델이 제공하는 정보의 정확성과 신뢰성을 담보하기 위해서는 고품질의 데이터 확보와 엄격한 검증 과정이 필요할 것임
     * 또한 SearchGPT가 기존 검색 엔진 시장에서 어떤 포지션을 차지할 수 있을지, 그리고 광고 등 수익 모델은 어떻게 구축할 것인지 등 해결해야 할 과제들이 남아 있음
     * 한편 게시자 및 제작자와의 협력을 통해 이들의 권리를 보호하고 공정한 수익 배분을 모색하는 것도 중요한 이슈가 될 것으로 보임
     * 장기적으로는 SearchGPT와 유사한 AI 기반 검색 서비스들이 늘어날 것으로 예상되는 만큼, 이용자들은 각 서비스의 장단점을 면밀히 비교하고 선택할 필요가 있음

        Hacker News 의견

     * iFixit이 가짜 수리 가이드를 게시했으며, ChatGPT가 이를 학습 데이터로 사용했음
     * 웹에서 답을 찾는 것은 많은 노력이 필요하지만, 편지 쓰기나 지도 읽기, 반 마일 걷기와 비교하면 그렇게 큰 노력은 아님
          + 예를 들어, ""boone north carolina august 음악 축제""를 검색하면 충분히 적절한 결과를 얻을 수 있음
          + Sequoia Capital에 따르면 이 분야에 현재 6000억 달러의 공백이 있으며, 이를 해결할 새로운 것이 필요함
     * 과거에는 웹사이트 소유자들이 봇이 사이트를 크롤링하고 인덱싱하는 것을 허용할 이유가 있었음
          + 그러나 Google은 점점 더 많은 사이트 내용을 google.com에서 직접 보여주고 있음
          + SearchGPT는 사람들을 다른 사이트로 보내지 않고 답변만 제공함
          + AI 크롤러가 사이트를 느리게 만들기 때문에 허용할 이유가 없음
     * Google도 이미 이 기능을 제공하고 있으며, 많은 사람들이 이를 끄고 싶어함
     * 대기자 명단보다, OpenAI의 발표가 실제로 사용할 수 있는 제품이었으면 좋겠음
     * 검색 엔진은 키워드 기반이어야 함
          + ""피자 근처 "" 또는 "" ""와 같은 검색어로 합리적인 결과를 원함
          + 검색 엔진이 내 키워드를 무시하고 의미적으로 해석하려 하면 경험이 나빠짐
     * Kagi의 Quick Answer 기능이 훌륭함
          + 인용이 중요함
     * OpenAI가 지난 몇 달 동안 콘텐츠를 판매할 의향이 있는 출판사와 계약을 체결했음
          + 모든 것을 그들의 플랫폼에 묶고, 우선순위가 매겨진 콘텐츠를 반환함
          + SEO는 현금, 호의, 뒷거래로 대체될 것임
     * Perplexity가 매우 유용하다고 생각함
          + OpenAI가 Perplexity를 능가할 수 있다면 Alphabet에 큰 문제가 될 것임
     * Google의 핵심 사업을 겨냥한 제품이 드디어 나왔음
          + 후속 질문 기능이 마음에 들지만, 링크를 제공하는 것 외에 ChatGPT와 어떻게 다른지 궁금함
"
"https://news.hada.io/topic?id=16047","베이지안 통계: 세 가지 문화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            베이지안 통계: 세 가지 문화

주관적 베이즈(Subjective Bayes)

     * 전통적인 주관적 베이즈 학파는 데이터 생성 분포(즉, 모수의 함수로서의 가능도)를 가정
     * 이 가정을 조건으로, 사전 신념을 모수에 대한 사전분포로 인코딩
     * 이후 사후추론을 수행하고 돌아보지 않음
     * 오늘날 누군가가 이 철학을 엄격히 따르는지, 또는 자신을 주관적 베이즈 학파로 여기는지는 불분명함

객관적 베이즈(Objective Bayes)

     * ""객관적 베이즈"" 철학은 가설검정(베이즈 팩터 사용)을 하고 싶어하고 Andrew가 말하는 ""베이즈 크린지""를 강하게 느끼는 결합에서 비롯
     * 한 선도적 지지자의 논문에서 인용하면:

     참조분석은 추론적 진술이 오직 가정된 모형과 가용한 데이터에만 의존한다는 의미에서, 그리고 추론에 사용되는 사전분포가 정보이론적 의미에서 최소한의 정보를 갖는다는 의미에서 객관적 베이즈 추론을 생산함

     * 컨퍼런스 개최, 제목에 ""객관적 베이즈""가 포함된 책 출판 등으로 보아 여전히 많은 사람들이 이를 특징으로 하는 작업을 수행하고 있음
     * BUGS 예제에서 널리 사용되는 gamma(epsilon, epsilon)과 normal(0, 10_000) 사전분포의 배경에 어느 정도 있음

실용적 베이즈(Pragmatic Bayes)

     * Andrew는 ""실용적 베이즈""라고 부르는 철학을 따름
     * Gelman, Carlin, Stern, Rubin의 책 ""Bayesian Data Analysis"" 초판에 명확하게 제시되어 있음

    1. 관찰가능하고 관찰불가능한 모든 양에 대한 결합확률분포인 완전확률모형을 설정. 모형은 기저 과학적 문제와 데이터 수집 과정에 대한 지식과 일치해야 함
    2. 관찰된 데이터를 조건으로 하여 관심있는 관찰불가능한 양의 조건부확률분포인 적절한 사후분포를 계산하고 해석
    3. 모형의 적합도와 결과 사후분포의 함의를 평가: 모형이 데이터에 얼마나 잘 맞는지, 실질적 결론이 합리적인지, 1단계의 모형 가정에 결과가 얼마나 민감한지. 이에 대응하여 모형을 수정하거나 확장하고 세 단계를 반복할 수 있음

     * Andrew가 최종적으로 ""작업흐름""이라고 명명한 과정이 바로 이것임

공학에서의 표준 운영 절차

     * 이는 공학에서 ""반복적 설계""라고 불리는 표준 운영 절차임
     * 거의 모든 기계학습이 이런 방식으로 이루어짐
     * CS와 ML 배경에서 온 나는 통계학자들이 이런 방식으로 생각하지 않는다는 사실에 충격을 받았음

BDA를 집필할 때의 전략에 대한 발문

     * Andrew는 BDA 초판 집필 초기에 철학을 건너뛰고 그냥 과학을 ""하기로"" 명시적인 결정을 내렸다고 말함
     * 그와 Rubin은 그들의 반복 설계 과정에 이름을 붙이지 않았음
     * 다른 사람들의 철학적 신념을 정확하게 특징짓기 어렵고 토론을 통해 그것을 바꾸기는 더 어려우므로 이는 현명한 선택임
     * 과학적 방법에 과학철학적 면책 조항이 필요하다면, 아마도 그다지 설득력 있는 과학은 아닐 것임

가능도 vs 사전분포에 대한 발문

     * 사전분포의 선택이 가능도의 선택보다 더 ""주관적""이거나 덜 ""주관적""이지 않다는 Andrew의 견해에 동의함
     * Andrew는 이를 ""가능도라는 낙타를 삼키면서 사전분포라는 모기에 힘쓰기""라는 글에서 간결하게 요약

신념 vs 지식에 대한 발문

     * 철학적 관점에서 ""신념""보다는 ""지식""의 측면에서 사전분포와 가능도를 인식론적으로 특징짓는 것을 선호함
     * 이는 Laplace가 처음 제공하고 John Stuart Mill이 더 철저히 탐구한 틀이며 Gelman 등이 BDA에서 따른 것임

본 포스트의 어원에 대한 발문

     * 1959년 C.P. Snow는 예술 vs 과학에 대한 유명한 에세이 ""두 문화""를 씀
     * 2001년 L. Breiman은 명시적으로 생성과정을 모델링하는 것과 아주 유연한 모형을 사용하는 것 사이의 구분에 관해 영향력 있는 에세이 ""통계적 모델링: 두 문화""를 씀
     * Breiman은 그의 작업에서 의사결정 포레스트를 지지했고, 최첨단 신경망을 학습시키기에는 데이터가 충분하지 않은 Kaggle 대회에서 그의 접근법이 여전히 승리하고 있음
     * Andrew가 ""펼쳐지는 꽃""이라고 불렀던 것의 예로서 의사결정 포레스트와 신경망을 고려하는지 궁금함

GN+의 의견

     * 주관적 베이즈와 객관적 베이즈라는 두 가지 전통적 접근은 너무 극단적임. 실용적 베이즈 접근이 현실적이고 유용한 타협점을 제공
     * 사전분포의 선택이 가능도의 선택만큼이나 주관적이라는 관점에 동의. 모형의 모든 구성요소는 주관성과 가정을 수반함
     * 모형을 평가하고 예측 성능을 체크하며 필요시 반복하는 ""작업흐름"" 접근법이 과학에서 표준이 되어야 함
     * 과거 데이터에 기반한 정보적 사전분포를 사용하는 것은 드물지 않으며, 더 많은 베이지안 분석에서 이를 활용해야 함
     * 궁극적으로 베이즈 추론의 철학보다는 과학을 실제로 수행하는 데 초점을 맞추는 것이 현명한 전략임. 그러나 때로는 추론의 기초에 대해 토론하는 것도 가치 있음
"
"https://news.hada.io/topic?id=16039","Llama 고려하기  폐쇄형 소스 AI 모델들은 불행한 결말을 맞게 될 것인가? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Llama 고려하기 폐쇄형 소스 AI 모델들은 불행한 결말을 맞게 될 것인가?

   Unix vs. LInux
   Oracle vs. MySQL
   오픈소스는 협업을 통해 혁신을 이뤄냈습니다. 오픈소스의 힘은 투명성과 협업입니다. 리눅스, MySQL 등의 성공적인 오픈소스는 그 결과이죠.

   GPT-n vs. Llama ?

   라마는 오픈 혁신의 한계가 있습니다.
   라마 모델을 혁신하기 위해서는 사전훈련이 가능해야 하지만, 현재는 사후훈련만 가능합니다. 그 이유는 라마 학습데이터를 공개하지 않았기 때문입니다. AI, 딥러닝에서의 소스코드는 훈련데이터셋입니다. 그러나, 라마는 모델웨이트만 공개하고, 훈련데이터, 모델트레이닝 코드, 하이퍼파라미터 등은 공개하지 않았습니다. 현재 라마웨이트로는, 파인튜닝, 경량화 등의 튜닝성 혁신은 가능하지만, 사전훈련을 통해서만 가능한 모델웨이트 혁신은 불가능합니다. 왜냐하면, AI, 딥러닝에서는 훈련데이터셋을 개발하는 것이 코딩이고 디버깅이기 때문입니다. 라마의 학습데이터는 비공개라서, 대중이 협업해서 개선할 방법이 없습니다. 이런면에서, 라마는 오픈소스라고 보기 어렵습니다.

   또한, 커뮤니티의 GPU 자원부족입니다.
   라마 훈련에는 H100*16k GPU가 사용되었다고 합니다. GPU만 6천억원이 넘죠. 이를 돌릴 인프라 및 전기료 등의 추가비용까지 감안하면 1조원은 그냥 넘을것입니다. 아무나 시도할 수 있는 일이 아닙니다. 오픈소스 커뮤니티에서 혁신이 가능하려면, 공공의 GPU 클러스터가 있어야 할것입니다.

   요약하면
   AI, 딥러닝 분야에서 오픈 이노베이션이 가능하려면 최소한 다음 두 가지가 되야 합니다.
    1. 훈련데이터 공개
    2. 대규모 공공 GPU 클러스터 제공

   하지만, 1번은 저작권 문제로 가능성이 희박합니다. 그리고 2번은 1조원이 필요합니다.

   결론은, 현재 상황에서 AI, 딥러닝 분야의 오픈 이노베이션은 그 가능성이 매우 희박하다 입니다. 하지만, GPU 또는 뉴로모픽칩 등의 하드웨어 혁신이 일어나면 얘기는 달라지겠죠.
"
"https://news.hada.io/topic?id=16128","현대 기술의 불완전성을 탐구하는 소규모 집단 Hundred Rabbits","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                현대 기술의 불완전성을 탐구하는 소규모 집단 Hundred Rabbits

소개

     * Hundred Rabbits는 작은 예술가 집단으로, 현대 기술의 계획된 실패 가능성을 탐구하고 저전력 솔루션을 연구함
     * 태평양을 항해하며 현대 컴퓨팅 스택의 취약성을 깨닫고, 기술이 서구 세계의 해안 너머에서 어떻게 악화되는지 학습함

이야기

     * 2016년 첫 항해 시 소프트웨어와 하드웨어의 빈번한 실패를 경험
     * 에너지 저장이 적고 신뢰할 수 있는 연결이 부족하여, 새로운 상황에 맞는 도구를 개발하기로 결정
     * Electron 프레임워크를 사용하여 프로그램을 개발했으나, 점점 커지는 크기와 에너지 사용 문제로 인해 다른 솔루션을 찾게 됨
     * 6502 어셈블리를 배우고, NES 롬으로 게임을 실행하는 아이디어를 얻음
     * 2021년, 이식 가능성을 중점으로 한 작은 가상 머신 Uxn을 설계함

왜 보트인가

     * 2012년부터 2014년까지 일본에 거주하며 애니메이션 스튜디오와 소프트웨어 회사에서 일함
     * 항해를 통해 새로운 언어와 문화를 배우고, 공감, 호기심, 창의력을 키우기 위해 보트 생활을 선택
     * 2016년 캐나다 브리티시컬럼비아에서 Pino를 구매하고 태평양을 일주함

위치

     * Pino의 현재 위치: 캐나다 서부 Clothes Bay
     * 2016년부터 2020년까지 태평양을 일주하며 다양한 국가를 탐험
     * 2020년부터 2023년까지 Salish Sea를 탐험
     * 2024년에는 브리티시컬럼비아 북부 해안과 미국 SE 알래스카를 탐험

장비 설정

     * 다양한 장치를 보유하고 있으며, 대부분 중고로 기증받음
     * 주요 작업 스테이션: Rek의 Macbook Air 2013과 Dev의 x250Thinkpad
     * 현재 문제: Pinebook의 키보드 오류, MacbookPro 2012의 부팅 문제 등

문서화

     * 2021년 4월, 웹사이트를 위키로 변환하여 모든 학습 내용을 기록
     * Rek가 대부분의 글을 작성하고 Devine이 교정 및 프로젝트 문서화를 담당
     * 2016년부터 2020년까지 여행을 촬영하고 매달 요약 영상을 제작

라이선스

     * 모든 프로젝트와 자산에 MIT 라이선스와 BY-NC-SA4.0 라이선스 적용
     * 지식을 공유하고 다른 사람들이 프로젝트를 개선하거나 유용하게 만드는 것을 환영하지만, 다른 이름으로 판매하는 것은 금지

기여

     * 모든 프로젝트의 소스 파일은 SourceHut 페이지에서 확인 가능
     * 웹사이트에는 추적기나 분석 도구가 없음

GN⁺의 정리

     * Hundred Rabbits는 저전력 솔루션을 연구하며 현대 기술의 취약성을 탐구하는 예술가 집단임
     * Electron 프레임워크의 한계를 극복하기 위해 Uxn 가상 머신을 개발
     * 보트 생활을 통해 새로운 언어와 문화를 배우고, 지속 가능한 예술 창작 방법을 모색
     * 다양한 중고 장비를 사용하며, 모든 프로젝트는 오픈 소스로 공유됨

        Hacker News 의견

     * ""This website has no tracking or analytics""라는 사이트에서 Privacy Badger가 여러 Google 관련 트래킹을 차단함
          + 차단된 트래킹 목록: googleads.g.doubleclick.net, static.doubleclick.net, play.google.com, www.google.com, www.youtube.com
          + 이유: YouTube 동영상 플레이어를 포함한 iframe 사용 때문임
          + Google 관련 서비스를 사용하면 트래킹이 발생함
     * Orca라는 2D 음악 프로그래밍 언어가 매우 재미있고 멋짐
          + 예시 동영상 링크 제공: 링크1, 링크2, 링크3, 링크4
     * 글의 시작 부분이 컬트 선언문처럼 보이지만, 중요한 문제에 대한 논리적인 해결책으로 전환됨
          + 흥미로움
     * Devine의 최신 강연을 추천함
          + 강연 링크: Computing and Sustainability
          + 텍스트와 비디오 형식으로 제공됨
          + 컴퓨팅에 대한 독특한 접근 방식을 통해 도구와 플랫폼을 구축함
          + 업계의 90%가 이해하기 어려운 수준의 영감을 주는 작업임
     * UXN/Varvara 프로젝트가 매우 특별함
          + 링크: UXN
          + 복잡성 제약을 적용하여 이해 가능한 소프트웨어를 만드는 접근 방식임
          + Viewpoint Research의 STEPS 프로젝트와 유사하지만 더 구체적인 목표와 단순한 기반을 가짐
     * 가끔 멋진 도구나 아름다운 소프트웨어를 발견할 때마다 그 배후에 있는 사람들이 이 두 사람임을 깨달음
          + 그들의 접근 방식이 놀랍고 영감을 줌
          + 멋진 작업을 세상에 내놓아 감사함
     * WHOI에서 자주 이러한 문제에 직면함
          + 해양 프로젝트는 종종 긴 기간 동안 연결이 끊기거나 작은 대역폭 제한이 있는 연결을 가짐
          + 중요한 데이터를 보내기 위한 연결로 자동 소프트웨어 업데이트를 위한 것이 아님
          + 많은 소프트웨어가 인터넷에 연결되어야 한다고 당연하게 여김
     * 항해와 자유 소프트웨어는 제한된 자유라는 공통점을 가짐
          + 수많은 규칙을 따라야 하지만 바람의 힘으로 여행하는 것은 여전히 매력적임
          + Yamaha 33 보트는 그들이 하는 항해에 비해 매우 작고 가벼움
     * Neat CSS 프레임워크가 그들의 작업에서 영감을 받았음을 언급함
          + 거의 모든 프로젝트에서 사용 중임
          + 작은 크기에 중독됨
          + 링크: Neat CSS
     * Rek이 자신의 웹사이트에 복어 그림을 그려줬고 매우 마음에 듦
          + 링크: 웹사이트
"
"https://news.hada.io/topic?id=16134","Russ Cox, Go 기술 리더 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Russ Cox, Go 기술 리더 사임

    새로운 리더십 발표

     * 러스 콕스의 메시지
          + 9월 1일부터 Austin Clements가 Go 프로젝트의 기술 리더 역할을 맡음
          + Cherry Mui는 컴파일러 툴체인, 런타임, 릴리즈를 담당하게 됨
          + 러스 콕스는 Go 프로젝트를 떠나지 않지만, 리더십 변화를 위해 한 발 물러섬
          + 리더십은 명예 타이틀이 아닌 서비스 역할임
          + 새로운 리더는 새로운 강점과 신선한 관점을 가져옴
          + Python의 Guido가 2018년에 물러난 것처럼 Go도 리더십 변화를 통해 성장할 것임
     * Austin과 Cherry 소개
          + Austin은 2014년부터, Cherry는 2016년부터 Google에서 Go 프로젝트에 참여
          + 두 사람 모두 Go와 관련 시스템에 대한 깊은 지식과 뛰어난 판단력을 가짐
          + Austin과 Cherry가 새로운 리더로서 적합하다고 확신함
     * 러스 콕스의 역할 변화
          + 의사 결정에서 한 발 물러나 Austin과 다른 리더들이 앞으로 나아갈 공간을 만듦
          + 여전히 Go 디자인, CL 리뷰, 역사적 질문 등에 대해 도움을 줄 예정
          + 새로운 표준 라이브러리 작업과 GoLab에서의 발표 등 계속 활동할 예정
     * Gaby와 Oscar 프로젝트
          + Gaby와 Oscar 프로젝트에 더 집중할 계획
          + Oscar 프로젝트를 통해 오픈 소스 유지 관리자를 돕는 방법을 찾고, 다른 프로젝트에서도 채택되기를 희망함
          + Oscar의 목표는 유용한 것을 만들고, 새로운 것을 배우며, 다른 프로젝트를 위한 길을 개척하는 것임
     * 전환의 세부 사항
          + 전환의 세부 사항은 아직 결정되지 않음
          + Austin과 러스는 이 변화를 Go 프로젝트가 더 강해지고 나아지는 기회로 만들 것임
          + 러스는 여전히 Go 프로젝트에 참여할 예정
     * 다니엘 마티의 메시지
          + 러스의 헌신과 노력에 감사
          + Austin과 Cherry가 앞으로 나아갈 적임자라고 확신
          + 컴파일러와 런타임 회의 노트 스레드를 재개할 기회로 삼기를 희망

    GN⁺의 정리

     * 러스 콕스가 Go 프로젝트의 기술 리더 역할을 Austin Clements와 Cherry Mui에게 넘김
     * 리더십 변화는 프로젝트의 성장과 새로운 관점을 가져올 기회로 작용할 것임
     * 러스는 여전히 Go 프로젝트에 참여하며, 새로운 프로젝트인 Oscar에 집중할 예정
     * 이 변화는 Go 커뮤니티와 프로젝트에 긍정적인 영향을 미칠 것으로 기대됨

        Hacker News 의견

     * Golang은 빠르고 깔끔하며 Rust보다 사용하기 쉬운 언어임
          + Golang을 사용해 Chat GPT와 함께 작은 모바일 앱을 만들 수 있었음
          + 더 나은 모바일 및 게임 프레임워크가 필요함
          + Flutter를 좋아하지만 Google이 Dart 대신 Golang을 사용하지 않은 점이 아쉬움
          + 다음으로 Chrome 네이티브 지원이 필요함
     * rsc에게 감사의 말을 전하며, 지난 12년간 Go 개발이 훨씬 즐거워졌음
          + 레이스 디텍터, 표준화된 에러 래핑, 모듈, 제네릭, 툴체인 업데이트 등 다양한 기능이 추가됨
          + 개인적으로는 sum 타입, 더 나은 enum/범위 타입, 불변성, non-nilness 등이 필요함
          + 그럼에도 불구하고 Go는 가장 즐거운 개발 생태계임
     * 개인적으로 Go는 가장 잘 관리된 오픈 소스 프로젝트 중 하나임
          + Google의 지원에 감사함
     * ""BDFL"" 모델이 건강하지 않다고 생각함
          + 최고의 프로젝트는 BDFL을 가지고 있으며, 최고의 BDFL은 자신의 권력에 회의적임
     * Russ에게 감사의 말을 전하며, 그의 리더십, 헌신, 디자인 지혜, 기술적 기여에 감사함
          + Go 언어, 라이브러리, 도구, 커뮤니티 모두 훌륭함
     * rsc에게 감사하며, Go 덕분에 소프트웨어 엔지니어링에 입문할 수 있었음
          + 여러 프로그래밍 언어를 사용해봤지만 Go는 여전히 편안함
          + 개발 경험이 훌륭하며, 언어와 창작자들이 단순하고 책임감 있게 행동한 점을 높이 평가함
          + 앞으로의 모든 노력에 행운을 빔
     * RSC의 블로그가 매우 좋음: https://research.swtch.com/
     * Go에 대한 모든 기여에 감사함
          + Python은 GvR이 물러난 후 혜택을 받지 못했음
          + 새로운 리더십은 비기술적이고 독재적이며, 대부분의 진정한 오픈 소스 기여자들을 떠나게 했음
          + 개발이 정체되었고, 몇몇 기업의 기여만 남았음
          + 분위기가 억압적이며, Microsoft/Instagram/Bloomberg에서 권력을 가진 위치에 있는지가 중요함
          + 이러한 회사들의 잘못은 아닐 수 있음. 그들의 관대함이 남용되고 있다는 것을 모를 수 있음
     * 큰 뉴스임! 새로운 리더십이 Golang을 작고 단순하게 유지하는 것이 가장 큰 강점임을 기억하길 바람
          + 제네릭을 추가한 것은 과도했으며, 일부 중요한 경우에만 가치가 있음
          + Google의 프로젝트 통제가 줄어들기를 바람
          + Golang 덕분에 https://github.com/purpleidea/mgmt/ 프로젝트가 가능했음
          + Russ에게 감사함
     * https://www.youtube.com/watch?v=wwoWei-GAPo — 프로젝트가 많이 발전했으며, 여전히 번창하고 있음
          + 2009년에 기대하지 않았던 결과임
          + Russ가 없었다면 Go가 지금의 위치에 있지 않았을 것임
          + 그의 기여는 엄청났음
          + Russ에게 감사함
"
"https://news.hada.io/topic?id=16117","런치 HN: SSOReady (YC W24) – SAML SSO를 간편하고 오픈 소스로 만드는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        런치 HN: SSOReady (YC W24) – SAML SSO를 간편하고 오픈 소스로 만드는 기술

     * SSOReady
          + Enterprise SSO를 구현하기 위한 개발 도구 제공
          + 무료로 SAML 지원 추가 가능
          + Auth0나 WorkOS 같은 제품의 오픈 소스 대안
          + MIT 라이선스
          + 자체 호스팅 가능, 또는 app.ssoready.com에서 무료 사용 가능
          + 사용자 데이터베이스에 대한 통제 유지
          + 잘 문서화된 간단한 구현
          + Python과 TypeScript/Node.js SDK 제공, 추가 개발 중
     * Documentation
          + 전체 문서는 https://ssoready.com/docs에서 확인 가능
          + SAML을 제품에 추가하는 간단한 단계:
              1. app.ssoready.com에서 무료로 가입
              2. 로그인 페이지에서 getRedirectUrl 엔드포인트 호출하여 SAML로 사용자 로그인
              3. 사용자가 선택한 콜백 페이지로 리디렉션, redeemSamlAccessCode 호출하여 로그인 완료
          + TypeScript 예제:
const { redirectUrl } = await ssoready.saml.getSamlRedirectUrl({
  organizationExternalId: ""...""
});
// 사용자 리디렉션

const { email, organizationExternalId } = await ssoready.saml.redeemSamlAccessCode({
  samlAccessCode: ""saml_access_code_...""
});
// 사용자 로그인

          + 구체적인 내용은 퀵스타트 가이드 참고
     * Philosophy
          + 모든 비즈니스 소프트웨어는 엔터프라이즈 SSO를 지원해야 함
          + 엔터프라이즈 SSO는 고객에게 큰 보안 이점 제공
          + 대부분의 오픈 소스 SAML 라이브러리는 문서화가 부족하여 혼란스러움
          + SAML 구현 시 명확하고 안전한 기본 설정 제공
          + 보안 소프트웨어 가격 인상은 용납할 수 없음
          + MIT 라이선스는 가격 인상에 대한 보험 역할
     * Reporting problems
          + GitHub 이슈나 founders@ssoready.com으로 문제 보고 가능
          + 보안 문제는 security-contact@ssoready.com으로 즉시 연락
          + 24시간 내 응답, 대부분의 경우 즉각적인 응답 기대 가능
          + GitHub 이슈나 포럼에 게시하지 말 것

GN⁺의 정리

     * SSOReady는 엔터프라이즈 SSO 구현을 간단하고 명확하게 만들어주는 오픈 소스 프로젝트임
     * 보안 소프트웨어의 가격 인상을 방지하기 위해 MIT 라이선스를 채택함
     * Python과 TypeScript/Node.js SDK를 제공하여 다양한 개발 환경에서 사용 가능함
     * SSOReady는 보안 문제를 매우 심각하게 다루며, 빠른 응답을 보장함
     * 비슷한 기능을 가진 제품으로는 Auth0와 WorkOS가 있음

        Hacker News 의견

     * 첫 번째 의견
          + IdP를 직접 개발한 경험을 공유함
          + SSO, Single Sign OUT, 사용자 프로비저닝 등 다양한 기능을 구현했음
          + 통합 작업이 항상 쉽지 않았음
          + SAML에 대한 이해가 부족한 파트너와의 협업이 어려웠음
          + 인증서 관리와 같은 문제들이 많았음
          + 성공을 기원함
     * 두 번째 의견
          + SAML 구현이 어려웠지만 이 도구는 간편해 보임
          + 가격 정책에 대한 우려가 있음
          + 무료 제공이 지속 가능하지 않을까 걱정됨
          + 유료 서비스가 더 신뢰감을 줄 것 같음
     * 세 번째 의견
          + 오픈 소스 출시와 사용하기 쉬운 서비스에 찬사를 보냄
          + 인기 있는 구현이 되면 다른 서비스와의 통합이 쉬워질 것이라 기대함
          + 무료 호스팅 SSO의 보안과 가동 시간 보장에 대한 질문을 던짐
     * 네 번째 의견
          + SAML 통합이 SaaS 제품과의 통합에서 가장 큰 장애물이라고 느꼈음
          + 복잡한 문서와 속성 매핑이 문제임
     * 다섯 번째 의견
          + SAML 지원을 추가한 경험을 공유함
          + OneLogin의 PHP 라이브러리를 사용했음
          + 사용자에게 셀프 서비스 기능을 제공했음
          + 몇 가지 지원 요청이 있었지만 전반적으로 잘 작동함
     * 여섯 번째 의견
          + ""대기업의 복잡한 요구를 충족시키는 추가 기능""으로 수익을 창출할 계획에 대해 궁금해함
          + YC 신청 과정에서 비즈니스 모델이 얼마나 중요한지 궁금해함
          + 성공을 기원함
     * 일곱 번째 의견
          + WorkOS의 대안으로 이 도구를 시도해 볼 계획임
          + Entra ID와의 통합에 대한 즉각적인 지침을 요청함
     * 여덟 번째 의견
          + 이전 회사에서 SSO 통합을 구현한 경험을 공유함
          + SAML 대신 OIDC2를 사용했음
          + Okta 통합에서 SSO와 SCIM을 분리하여 사용했음
     * 아홉 번째 의견
          + SCIM 추가 계획에 대해 궁금해함
          + SAML과 SCIM을 함께 제공하면 큰 장점이 될 것이라 생각함
          + 다른 서비스는 비싸고 DIY는 어렵다고 언급함
     * 열 번째 의견
          + 출시를 축하함
          + BoxyHQ의 SAML Jackson과의 비교를 요청함
"
"https://news.hada.io/topic?id=16020","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
"
"https://news.hada.io/topic?id=16125","Meta, 미국 대상으로 AI 스튜디오 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Meta, 미국 대상으로 AI 스튜디오 출시

     * 누구나 자신의 관심사에 따라 AI 캐릭터를 만들 수 있으며, 크리에이터는 자신을 확장한 AI를 만들 수 있음
     * Instagram, Messenger, WhatsApp에서 이러한 AI와 채팅을 시작 가능
     * 두가지의 AI를 생성 가능
          + Creator AI : 자신을 확장한 AI
               o 콘텐츠와 정보를 기반으로 나처럼 말하는 AI
               o 채팅을 시작으로 더 많은 팬과 소통하고 새로운 방식으로 관계를 맺어 시간을 절약할 수 있도록 도와줌
               o AI가 공유했으면 하는 사실, 링크, 피하고 싶은 주제를 추가할 수 있음
               o 준비후 AI 자동답글을 키면 선택한 사용자에게 자동 답변
          + AI Character : 내 관심사에 기반한 AI
               o 누구나 재미, 유용성 또는 지원을 위해 자신의 관심사를 기반으로 독특하게 표현하는 대화형 AI를 만들수 있음
               o 다양한 프롬프트 템플릿으로 빠르게 작성 가능
               o 개인적으로 사용하거나 스토리, 직접 링크를 통해 공유하거나 Instagram 프로필에 표시할 수도 있음
"
"https://news.hada.io/topic?id=16091","FastHTML – 순수 파이썬으로 현대적 웹 애플리케이션 구현하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FastHTML – 순수 파이썬으로 현대적 웹 애플리케이션 구현하기

     * 순수 Python으로 멋진 현대 웹 애플리케이션을 만들고 몇 분 안에 배포할 수 있음
          + 간단한 대시보드부터 확장 가능한 현대적 웹 애플리케이션까지
     * 단일 Python 파일만으로도 모든 애플리케이션을 만들 수 있으며, 원하는 Python 또는 JS 라이브러리 이용 가능
     * HTTP, HTML, JS, CSS에 완전한 접근을 제공, 구축할 수 있는 것에 제한이 없음
     * Python을 지원하는 모든 호스팅 서비스를 사용하여 쉽게 배포 가능
          + Railway, Vercel, Hugging Face, PythonAnywhere 에서 1클릭 배포 지원
     * 기술 스택 : ASGI, HTMX
     * Uvicorn, Starlette, SQLite 와 호환됨

GN⁺의 정리

     * FastHTML은 순수 Python으로 현대 웹 애플리케이션을 빠르고 쉽게 만들 수 있는 도구임
     * HTTP, HTML, JS, CSS에 대한 완전한 접근을 제공하여 유연성과 확장성을 보장함
     * FastAPI와 유사한 직관성과 깨끗한 아키텍처를 제공하며, Django와 경쟁할 수 있음
     * Railway, Vercel 등 다양한 호스팅 서비스에서 쉽게 배포 가능함
     * React, Next.JS와 같은 프레임워크와 비교했을 때 속도와 사용성 면에서 경쟁력 있음

   css 때문에 결국 지옥길이 열리는거 아닌가 했는데 demo 영상의 댓글들을 보니 반응이 괘 괜찮네요. 특별한 유저층이 존재하는 듯 합니다.

   Docs가 아직 덜 쓰인 것 같네요. 궁금해서 들어가 봤더니...
"
"https://news.hada.io/topic?id=16074","Opslane - 온콜 메시지를 통합해서 스트레스를 줄여주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Opslane - 온콜 메시지를 통합해서 스트레스를 줄여주는 도구

     * LLM을 사용하여 알림을 실행 가능한 것과 소음으로 분류
          + 알림 기록과 Slack 대화를 분석하여 알림이 실행 가능한지 여부를 판단
          + 처리를 위한 상황별 정보(인사이트 와 추가 리소스)를 제공하여 알림 피로를 줄여줌
     * Slack과 연동 하여 동작, 알림 패턴을 분석하고, 채널의 알림에 대한 주간 리포트 제공

  모듈식 아키텍처

    1. 알림 수집: Datadog이 웹훅을 통해 알림을 FastAPI 서버로 전송
    2. FastAPI 서버: 시스템의 핵심으로, 들어오는 알림을 처리하고 Slack과 상호 작용하며 데이터 흐름을 관리
    3. Slack 통합: 알림 관리와 상호 작용을 위한 사용자 인터페이스를 제공
    4. 데이터베이스: 알림 데이터와 임베딩을 저장하기 위해 Postgres와 pgvector를 사용

  통합

   유연한 데이터 모델을 사용하여 여러 통합을 지원할 수 있음. 현재 Opslane은 Datadog을 지원

  GN⁺의 정리

     * Opslane은 알림 피로를 줄이고 실행 가능한 알림을 분류하여 온콜 경험을 덜 스트레스받게 하는 도구
     * Slack과의 통합을 통해 알림 관리와 디버깅을 돕고, 주간 보고서를 통해 알림 품질을 분석함
     * 오픈 소스로 제공되어 커뮤니티의 기여를 환영하며, Datadog과의 통합을 지원함
     * 비슷한 기능을 가진 도구로는 PagerDuty와 VictorOps가 있음.

        Hacker News 의견

     * 첫 번째 의견: 경고를 실행 가능한 것과 소음으로 분류하고 처리하기 위한 맥락 정보를 제공함으로써 경고 피로를 줄이는 제품에 대해 논의함
          + 이 문제는 유용한 관찰 가능성을 만들지 못하는 회사의 문제를 더 잘 보여줌
          + 제품은 환영받을 만하지만, 나쁜 문화적 관행을 가능하게 하는 측면을 주요 판매 포인트로 강조하지 않기를 바람
          + 통신업계는 15년 전에 Fault Management 자동화를 통해 이 문제를 해결했음
          + 경고가 Slack으로 이동하면서 데이터가 비구조화된 텍스트가 되어 복잡한 필터링 솔루션이 필요해짐
     * 두 번째 의견: 중요한 작업에 신뢰할 수 없는 LLM을 사용하는 것에 대한 우려를 표명함
          + 원래 문제를 해결하고 LLM을 추가하지 않기를 바람
     * 세 번째 의견: All Quiet 창립자가 LLM을 사용하지 않는 도구를 개발 중임을 언급함
          + 사용자들이 중요한 경고가 불투명한 LLM에 의존하지 않기를 원함
          + AI는 증상에 도움을 줄 수 있지만 근본 원인인 관찰 가능성과 프로세스 문제를 해결하지 못함
     * 네 번째 의견: LLM을 통해 알림의 중요성을 필터링하는 것에 대한 우려를 표명함
     * 다섯 번째 의견: Slack에 도구를 밀접하게 결합하는 것이 사용 가능한 플랫폼을 제한함
          + 다른 인스턴트 메시징 플랫폼도 존재함
          + IM을 사용하는 것에 대한 더 넓은 문제는 다른 댓글 스레드에서 논의 중임
     * 여섯 번째 의견: 이 방향에 대한 큰 팬임을 언급함
          + 초기 부트스트래핑 및 지속적인 베이스 라이닝에 대한 궁금증을 표명함
          + Louie.AI 팀이 SE와 주요 직책을 채용 중임을 알림
     * 일곱 번째 의견: 현재 직장에서 경고 시스템의 문제를 알고 있지만 해결할 수 없는 이유를 설명함
          + 경고를 끌 수 없고, 근본 원인을 식별하거나 해결할 수 없는 문제
          + 온콜을 잘 운영하는 것은 문화적 문제임
          + 기술적 도구는 문화적 문제를 해결할 수 없음
          + 문화적 문제를 해결하려면 다른 직장을 찾거나 문제를 받아들이는 방법밖에 없음
     * 여덟 번째 의견: 제품을 만든 것에 대해 축하하며, 첫 번째 단락에 단어가 빠졌음을 지적함
     * 아홉 번째 의견: 비즈니스 경고를 위한 유사한 UI를 찾고 있음
          + Snowflake/BigQuery와 같은 데이터 소스를 사용하는 도구를 원함
          + 사용한 도구들은 스팸성 Slack 채널로 끝났음을 언급함
"
"https://news.hada.io/topic?id=16019","최고의 개발자들을 붙잡아 두는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           최고의 개발자들을 붙잡아 두는 법

     * 평균 혹은 그 이하의 개발자들은 디폴트값이 '현재 자리에 머무르기'이기 때문에 관리가 쉽다. ""5년 후에 프로모션 해드릴게요""로 충분하다.
     * 그러나 뛰어난 개발자들은 그렇지 않다. 그들은 동기부여의 3요소, 즉 자율, 숙달, 목적이 확보되지 않으면 금방 동력을 잃어버린다.
     * 그런 개발자들에겐 이런 문장들이 더 설득력이 있을 것이다:
          + ""앞으로 몇 달 동안 이 작업들을 진행하면, 당신은 우리 조직에서 최고의 NoSQL 전문가가 되어있을 것입니다.""
          + ""당신이 Bob의 Ruby 작업에 대해 많은 존경심을 가지고 있다는 것을 잘 알고 있습니다. Bob 을 당신 멘토로 지정해 두겠습니다.""
          + ""비즈니스에 중요한 회계 패키지를 구축해야 하는데, 이 중 보안 및 로깅 부분은 당신이 맡아주세요.""

   돈은 기본중에 기본입니다.

   댓글에서 돈에 대해서 언급해주신 분들은 이번 슈카월드 영상을 한 번 보시는 것을 추천드립니다 :D https://www.youtube.com/watch?v=X2Rh0pvgITw

   왜요?

   동기부여를 하는건 중요하지만, 그건 하나의 방편인것 같아요. 결국은 리더들의 수준에 맞는 구성원들만 남도록 수렴되는것 같습니다.

   어떤 동기부여나 훌륭한 미션이 있더라도, 내로남불, 공감 능력이 딸리는 리더들과는 오래가지 못하게 되더라구요.

   동의 합니다 회사의 주로 문제를 유발 하는 생각은 내로남불 인것 같습니다 :)

   저도 그렇고 돈의 우선순위가 높긴 하지만, 더 높은 곳에 있는 더 높은 이상을 가진 사람들은 돈이 최우성은 아닐 수도 있더라고요.

   오타니 계약도 그렇고 사우디 안 가고 미국간 메시도 그렇고요.

   연봉이야 기본조건인 것 같고, 어느정도 충족 된 이후에는 이런 요소가 채워지지 않을때 회사에 머무르고싶지 않다는 생각이 많이 들었던 것 같네요.

   스타트업에서는 연봉과 스톡옵션이 기본 중의 기본입니다. 그러나 이 기본적인 조건조차 제대로 지켜지지 않는 경우가 많아 많은 인재들이 해외로 떠나는 것 같습니다.

   굉장히 쉬우면서도 많이들 간과하는 요소는 연봉이지요... 돈도 중요합니다. 그게 전부는 아니지만 저 동기부여의 ""4""요소로 추가할 수 있을 만큼 중요합니다.

   하하 논리적인사고로 행간을 읽는 개발자들에게 귀여운 시도를 하시네요 돈올려준다 말 한마디면 더 쉽게 갈 수 있지 않을까요?

   벌써부터 두근거린다

   동기부여의 3요소가 마음에 와닿네요~

   음.. 돈을 많이 준다 는 통하지 않나 보군요?

   내적동기 달성에 따른 번아웃 방지에 초점이 맞춰진 글 같네요.
     * https://news.hada.io/topic?id=7334
"
"https://news.hada.io/topic?id=16096","AI 기업들, OpenStreetMap 스크래핑 대신 $10k 기부는 어떨까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI 기업들, OpenStreetMap 스크래핑 대신 $10k 기부는 어떨까요?

en.osm.town 소개

     * en.osm.town은 Mastodon을 기반으로 한 분산형 소셜 네트워크의 일부임
     * OpenStreetMap 커뮤니티의 독립적인 커뮤니티로, OpenStreetMap Foundation의 자금 지원을 받음
     * 서버 통계: 257명의 활성 사용자

주요 내용

     * Grant Slater는 AI 회사들에게 OpenStreetMap 데이터를 몰래 스크래핑하지 말고 $10,000 기부를 제안함
     * $50,000 기부 시 실시간 스트리밍 업데이트도 제공 가능함
     * Bart Louwers는 OpenStreetMap 스크래핑이 흔하다고 언급함
     * wikiyu는 planet.osm 데이터를 사용하는 것이 더 효율적이라고 주장함
     * Josua는 AI가 비효율적인 방식으로 학습하고 있다고 비판함
     * Juan Luis는 Read the Docs에서도 유사한 AI 크롤러 남용 문제가 발생하고 있다고 언급함
     * Simon Poole은 합리적인 방법이 AI 회사의 이미지를 손상시킬 수 있다고 주장함
     * Michał은 특정 국가의 계약자가 OSM 데이터를 다운로드하는 임무를 받았을 가능성을 제기함
     * leadingzero는 OSM 라이선스 요구 사항이 제대로 시행되지 않는다고 비판함
     * Grant Slater는 타일 속성 추적을 위한 GitHub 저장소를 만들었다고 언급함
     * Guillaume Rischard는 최근 독일에서 법적 문제를 해결했다고 언급함
     * Adderall girl grindset (Jes)는 AI 크롤러를 차단할 것을 제안함

GN⁺의 정리

     * 이 글은 OpenStreetMap 데이터를 스크래핑하는 AI 회사들에 대한 문제를 다루고 있음
     * OpenStreetMap 데이터를 효율적으로 사용하는 방법과 기부를 통한 데이터 접근 방식을 제안함
     * AI 크롤러의 남용 문제와 그에 대한 대응 방안을 논의함
     * 유사한 기능을 가진 프로젝트로는 Google Maps와 Bing Maps가 있음

        Hacker News 의견

     * AI 크롤러들이 로봇.txt를 무시하고 공공 API를 사용하지 않으며 피크 로드를 준수하지 않아 인프라 비용이 증가함
     * OpenStreetMap Foundation 의장은 OpenStreetMap 데이터를 무료로 대량 다운로드할 수 있으며, 스크래핑 대신 이를 사용할 것을 권장함
          + 스크래핑은 기부된 자원에 높은 부하를 주며, 스크래핑 IP를 차단하는 데도 시간과 노력이 필요함
          + 자원과 시간을 존중하는 것이 서비스를 무료로 유지하는 데 도움이 됨
     * OpenStreetMap 인스턴스를 10분 만에 설정할 수 있으며, 이는 단순한 'docker run' 명령으로 가능함
          + 인덱싱에 시간이 걸리지만, 이는 자원에 비해 오래 걸리지 않음
     * OSM 데이터를 필요로 했으나, 데이터를 얻는 방법을 제대로 이해하지 못했음
          + 100GB의 대용량 파일을 다운로드하고, 불명확한 형식과 라이브러리를 사용해야 함
          + 정보가 분산되어 있으며, HTTP API는 제한적이거나 속도 제한이 있음
          + 결국 사전 변환된 OSM 데이터를 제공하는 무료 프로젝트를 사용함
     * OP는 웹사이트와 매핑 API를 공격적으로 스크래핑하는 크롤러를 제한하고 차단한 후, 비꼬는 반응을 보였음
          + OpenStreetMap 데이터는 무료로 다운로드 가능하며, AWS S3 및 토렌트를 통해 제공됨
          + 처음 시작하는 경우, 작은 지역 추출 데이터를 사용하는 것이 좋음
     * planet.osm을 토렌트에 올리고, 스크래핑을 토렌트를 통해서만 허용하면 네트워크 부하를 분산시킬 수 있음
     * AI 크롤러들이 웹 인터페이스를 통해 모든 파일의 모든 개정을 요청하는 것은 비효율적임
          + 이는 전력과 자원을 낭비하게 함
     * AI 회사들을 위한 허니팟을 만들어 무한 루프의 무의미한 콘텐츠를 생성하는 것을 제안함
     * CommonCrawl 같은 프로젝트가 다양한 회사들이 서버를 스크래핑할 필요성을 제거하지 못한 것이 아쉬움
          + 이는 더 자주 방문하고 싶어하거나, 투자자들에게 인상을 주기 위해 많은 VC 자금을 사용하기 때문임
     * AI 회사들이 OSM에서 무엇을 스크래핑하는지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=16046","리눅스 커널 모듈 프로그래밍 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          리눅스 커널 모듈 프로그래밍 가이드

소개

  저자

     * Linux Kernel Module Programming Guide는 Ori Pomerantz가 Linux v2.2용으로 처음 작성
     * Peter Jay Salzman이 Linux v2.4용으로 업데이트
     * Michael Burian이 Linux v2.6용으로 공동 유지보수
     * Bob Mottram이 Linux v3.8 이후 버전의 예제 업데이트
     * Jim Huang이 최근 Linux 버전(v5.0 이상)으로 업데이트 및 LaTeX 문서 수정

  감사의 글

     * 여러 기여자들이 수정 및 제안을 제공

  커널 모듈이란?

     * Linux 커널 모듈은 필요에 따라 커널에 동적으로 로드 및 언로드할 수 있는 코드 세그먼트
     * 커널 모듈은 시스템 재부팅 없이 커널 기능을 확장
     * 모듈이 없으면 새로운 기능을 추가할 때마다 커널을 재빌드하고 시스템을 재부팅해야 함

  커널 모듈 패키지

     * Ubuntu/Debian: sudo apt-get install build-essential kmod
     * Arch Linux: sudo pacman -S gcc kmod

  내 커널에 어떤 모듈이 있는가?

     * lsmod 명령어로 현재 커널에 로드된 모듈 확인 가능
     * /proc/modules 파일에서도 확인 가능

  커널 다운로드 및 컴파일 필요 여부

     * 이 가이드를 따르기 위해 커널을 다운로드하고 컴파일할 필요는 없음
     * 테스트 배포판에서 예제를 실행하는 것이 안전

  시작하기 전에

     * 모듈 버전 관리, X Window System 사용, SecureBoot 등 주의사항

헤더

     * 커널 헤더 파일 설치 필요
     * Ubuntu/Debian: sudo apt-get install kmod linux-headers-$(uname -r)
     * Arch Linux: sudo pacman -S linux-headers
     * Fedora: sudo dnf install kernel-devel kernel-headers

예제

     * 모든 예제는 문서의 examples 하위 디렉토리에 있음

Hello World

  가장 간단한 모듈

     * hello-1.c 파일 생성 및 컴파일
     * 모듈 로드 및 언로드 방법 설명

  Hello와 Goodbye

     * module_init 및 module_exit 매크로 사용 예제

  __init 및 __exit 매크로

     * __init 매크로는 초기화 함수가 완료되면 메모리를 해제
     * __exit 매크로는 모듈이 커널에 내장된 경우 함수를 생략

  라이선스 및 모듈 문서화

     * MODULE_LICENSE 매크로를 사용하여 모듈의 라이선스 지정
     * MODULE_AUTHOR, MODULE_DESCRIPTION 매크로 사용 예제

  명령줄 인수 전달

     * module_param 매크로를 사용하여 모듈에 명령줄 인수 전달
     * MODULE_PARM_DESC 매크로를 사용하여 인수 설명 추가

  여러 파일에 걸친 모듈

     * 여러 소스 파일로 나누어진 커널 모듈 예제

  사전 컴파일된 커널용 모듈 빌드

     * 사전 컴파일된 커널용 모듈 빌드 방법 설명

GN⁺의 정리

     * 이 가이드는 Linux 커널 모듈 프로그래밍에 대한 포괄적인 안내서로, 다양한 예제와 함께 커널 모듈의 기본 개념부터 고급 주제까지 다룸
     * 커널 모듈을 통해 시스템 재부팅 없이 커널 기능을 확장할 수 있으며, 이는 개발자에게 큰 이점
     * 모듈 버전 관리, SecureBoot 등 주의사항을 잘 이해하고 따라야 함
     * 관련 프로젝트로는 Linux Device Drivers, The Linux Programming Interface 등이 있음

        Hacker News 의견

     * ""Detecting button presses"" 예제는 RPi 모듈을 빌드해야 해서 어렵다는 의견 있음
          + qemu는 커널 해킹을 경험하기 좋은 방법임
     * Linux Foundation이 LDD(linux device driver)와 Linux 커널 책 업데이트를 후원해야 한다는 의견 있음
     * 22년 전에 처음 읽었다는 사용자의 경험 공유
     * The Linux Memory Manager 책의 최신 업데이트는 7월 초에 있었으며, 현재 편집 중이라는 소식 있음
     * Linux 커널 프로그래밍에 대한 일반적인 질문, 예를 들어 파일 시스템이나 메모리 관리 해킹에 대한 질문 있음
          + Robert Love의 ""Linux Kernel Development"" 책이 있었으나, 아마도 더 이상 업데이트되지 않음
     * 커널 모듈을 바로 빌드하는 상세하고 실습적인 튜토리얼에 대한 칭찬 있음
          + 관련 자료: https://0xax.gitbooks.io/linux-insides/content/index.html
     * 저자가 LLM을 사용하여 텍스트를 작성하거나 개선했는지에 대한 질문 있음
"
"https://news.hada.io/topic?id=16034","HN 커뮤니티에서 누가 무엇을 알고 있는지 찾기 위한 Hacker News 매핑","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HN 커뮤니티에서 누가 무엇을 알고 있는지 찾기 위한 Hacker News 매핑

40 million embeddings to find who knows what on Hacker News

  프로젝트 배경

     * 이전 게시물에서 Hacker News의 4천만 개의 게시물과 댓글을 임베딩하여 커뮤니티의 의미 지도를 만들었음
     * 커뮤니티가 프로젝트를 지지하며 제안한 내용을 통해 전 세계에서 실제 관계로 빠르게 축소되는 것을 발견했음
     * Robert(로버트)와의 대화를 통해 2008년에 사회적 의미 알고리듬을 구축한 그의 작업을 논의했음
     * 16년이 지난 지금도 Hacker News와 같은 소셜 네트워크가 주제별로 신뢰할 수 있는 목소리를 계산하고 표시하지 않는다는 점에 놀랐음

  주요 질문

     * 왜 특정 주제에 대해 가장 잘 아는 사람들을 발견하고 탐색하는 것이 어려운가?
     * 그들의 지식의 범위와 유사한 생각을 가진 사람들과의 관계는 어떻게 되는가?

  새로운 앱 기능

     * 새로운 앱을 통해 Hacker News의 의미 지도를 탐색하고 상호작용할 수 있음 (hn2.wilsonl.in)

    발견한 흥미로운 점들

     * 사용자 의미 조직화: 커뮤니티의 의미를 사용자로부터 시작하여 유사한 사용자와 함께 HN 기여도를 의미적으로 보여줌
          + 예: robg의 새로운 프로필 확인
     * 의미 검색: 누가 무엇을 아는지에 따라 HN의 의미를 검색할 수 있음
          + 예시 쿼리: 스타트업, Go vs Rust 프로그래밍, 신경과학과 수면, 이메일 마케팅
     * 커뮤니티 지도 작성: 누가 무엇을 알고 있는지와 관련된 의미를 기반으로 커뮤니티를 지도화할 수 있음
          + 지식이 균일하지 않기 때문에 커뮤니티의 지형을 통해 사람들과 그들이 아는 것을 강조할 수 있음

  기술의 잠재력

     * 의미를 조직하고, 검색하고, 커뮤니티를 지도화하는 세 가지 기능을 합치면 단어 뒤에 있는 사람들을 보여줄 수 있음
     * 세계의 정보를 조직하는 대신, 세계의 사람들을 조직할 수 있음
     * 다양한 사회적 지식 도전 과제에 대해 생각하게 만듦
     * 프로젝트에 더 많은 진전을 이루면서 함께 탐색하고 싶은 사람들은 대기자 명단에 가입할 것을 권장함

GN⁺의 정리

     * 이 프로젝트는 Hacker News 커뮤니티의 의미 지도를 통해 특정 주제에 대한 전문가를 찾고 탐색하는 방법을 제시함
     * 사용자 기여도를 의미적으로 분석하여 유사한 사용자와의 관계를 시각화함
     * 검색 기능을 통해 특정 주제에 대한 지식을 가진 사람들을 쉽게 찾을 수 있음
     * 커뮤니티의 지형을 통해 사람들과 그들이 아는 것을 강조함
     * 이 프로젝트는 사람들을 연결하고 지식을 공유하는 새로운 방법을 제공함

        Hacker News 의견

     * HN이 개인 사용자보다 콘텐츠와 토론에 집중하는 점이 좋음
          + 전문가를 팔로우하고 싶다면 Mastodon 같은 소셜 네트워크나 RSS 피드를 사용할 것임
          + 이 도구는 지식 있는 전문가보다는 활발한 댓글 작성자를 선택하는 경향이 있음
          + 여전히 멋진 프로젝트임
     * 내 사용자 이름은 ""Zen and the Art of Motorcycle Maintenance""의 내레이터의 또 다른 자아에서 따옴
          + 분석적인 칼을 사용하는 Phædrus의 능력을 반영함
          + ""part, system, level, language, article, object"" 등의 키워드를 자주 사용함
     * Optimizing Toilet Lid Design의 선도적인 전문가로 소개됨
     * 프로필 텍스트에서 내 이메일을 추출해 mailto: 링크로 만든 것 같음
          + 스팸 발송자에게 이메일 수집을 쉽게 해줘서 고맙다는 비꼬는 말임
     * ""Risk of COVID from pianos""라는 항목이 맵 하단에 포함됨
          + 그 출처가 궁금함
     * HN의 가장 좋은 점은 댓글이 일시적이라는 느낌을 준다는 것임
          + 동의 없이 분석되고 공개되는 것이 불편함
          + 모든 것이 분석될 필요는 없으며, 경쟁할 필요도 없음
          + 콘텐츠에 집중하는 점이 좋음
          + 트위터 핸들을 바이오에서 제거하게 됨
     * 최근 관련된 프로젝트:
          + ""Show HN: Exploring HN by mapping and analyzing 40M posts and comments for fun"" (2024년 5월, 159개의 댓글)
     * 몇 년 전 논란이 된 도구가 있었음
          + 텍스트 분석과 스타일로 유사한 사용자를 찾는 도구였음
          + 매우 정확했다고 들었음
          + 이 도구가 그런 용도로 재사용될 수 있을지 궁금함
          + ""Explore More Users""가 유사성으로 정렬된 것인지 명확하지 않음
     * 활동이 적은 사용자로서 이 도구가 부정확하다고 느낌
          + 내가 가장 잘 모르는 jpeg xl에 대한 질문에 집중된 것 같음
          + 더 일반적인 주제에 편향이 있을 수 있음
     * 내 사용자 이름을 깊이 파고들기 어려웠음
          + 맵에 많은 점들이 흩어져 있는 것 외에는 별다른 정보를 제공하지 않음
          + 전체 클러스터가 무엇인지 이해하려고 노력 중임
          + 대부분이 android/apple/google 관련임
"
"https://news.hada.io/topic?id=16050","국경에서 연방정부가 휴대폰을 수색할 수 있는 허점을 폐쇄한 법원 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 국경에서 연방정부가 휴대폰을 수색할 수 있는 허점을 폐쇄한 법원 결정

     * 법원, 연방정부의 국경 휴대전화 검색 허점 폐쇄
          + 세관 및 국경 보호국(CBP)의 주장
               o CBP는 영장 없이 전자기기를 검색할 수 있다고 주장해 왔음
               o 연방 판사는 이를 부인함
          + 판결 내용
               o 뉴욕 동부지구의 니나 모리슨 판사는 휴대전화 검색이 '비일상적' 검색이라고 판결함
               o 이는 신체 수색과 유사하며, 가방 검사나 금속 탐지기 통과와는 다름
               o 휴대전화 데이터 검색은 물리적 소지품 검색보다 더 큰 프라이버시 침해를 초래함
               o 따라서 국경에서의 휴대전화 검색은 '합리적인 의심'과 영장이 필요함
          + 언론의 승리
               o 판사는 휴대전화 검색이 언론의 자유에 미치는 영향을 인정함
               o _The Intercept_와 _VICE_의 보도를 인용하며, 언론인들의 휴대전화 검색이 기밀 소스를 위험에 빠뜨릴 수 있다고 경고함
          + 기타 판결
               o 4th 및 9th 서킷은 국경 경찰이 휴대전화를 검색하려면 최소한 '합리적인 의심'이 필요하다고 판결함
               o 작년 뉴욕 남부지구의 판사도 영장 없이 미국 시민의 휴대전화를 복사하고 검색할 수 없다고 판결함
          + 사례 연구
               o 쿠르보날리 술타노프 사건: 아동 성 학대 이미지 다운로드로 인해 감시 목록에 오른 미국 시민
               o 술타노프의 휴대전화에서 발견된 증거는 억제되었지만, 자발적인 진술은 억제되지 않음
               o 제이티크 스미스 사건: 뉴욕의 화재 완화 산업을 폭력적으로 장악하려던 블러즈 갱단의 일원
               o 스미스의 휴대전화에서 발견된 증거는 억제되었지만, 스미스는 유죄 판결을 받음
          + CBP의 입장
               o CBP는 종종 영장 없는 낚시 탐사를 수행함
               o 정치적 어려움이 있는 국가에서 오는 미국 시민의 휴대전화를 검색함
          + 시민 자유 단체의 개입
               o 콜롬비아 대학교의 나이트 제1수정헌법 연구소와 언론 자유를 위한 기자 위원회가 amicus 브리프를 제출함
               o 모리슨 판사는 이 브리프를 많이 인용함
          + 기자 위원회의 반응
               o ""국경을 넘을 때마다 기자들의 작업물과 통신을 자유롭게 뒤질 수 있게 하는 것은 언론의 자유에 용납할 수 없는 위험을 초래할 것""이라고 언급함
               o 이 판결은 다른 법원에 강력한 지침을 제공함

GN⁺의 정리

     * 이 기사는 국경에서의 휴대전화 검색에 대한 법적 논쟁을 다루고 있음
     * 판결은 언론의 자유와 프라이버시 보호에 중요한 영향을 미침
     * 국경에서의 영장 없는 검색이 헌법에 위배된다는 점을 강조함
     * 유사한 기능을 가진 프로젝트로는 ACLU와 EFF가 있음

        Hacker News 의견

     * 미국이 이런 일을 계속하면서도 여전히 자유 국가로 인식되는 것이 놀라움
          + 1980년대에는 인쇄물을 검색하는 유일한 국경이 동독 국경이었음
     * 이 판결이 확정된 것인지, 아니면 연방주의자 논문에서 반대 의견을 찾아 대법원이 무효화할 수 있는지 궁금함
     * ""국경에서""라는 표현이 실제로 미국 국경에서 100마일 이내의 모든 곳을 의미하는지 궁금함
          + ACLU 링크
     * 이 규정이 미국 시민에게만 적용되는지, 아니면 모든 사람에게 적용되는지 궁금함
          + L1B 비자 소지자가 휴대폰 검색을 거부하면 입국을 거부당할 수 있는지 궁금함
     * 휴대폰이 잠겨 있을 때, 검색을 위해 잠금을 해제하라는 요구를 받은 적이 있는지 궁금함
     * 위험한 국가에서는 버너폰을 사용할 것을 권장함
     * 이 사건은 획기적인 사건이 아님
          + 법원은 수년간 영장 없는 국경 검색에 반대하는 판결을 내려왔음
          + 예: US v Cano (2019), US v Aigbekaen (2019), US v Smith (SDNY 2023)
     * Judge Nina Morrison이 휴대폰 검색을 ""비일상적"" 검색으로 판결함
          + 이는 가방 검색이나 금속 탐지기를 통과하는 것보다 신체 수색에 더 가까움
          + 개인적으로는 휴대폰 검색보다 신체 수색을 선호할 것 같음
               o 신체 수색은 방을 나가면 끝나지만, 휴대폰 검색은 잊어버린 무고한 정보가 범죄 증거로 간주될 수 있음
               o 또한, 신원 도용에 필요한 정보가 충분히 제공될 수 있음
               o 데이터가 어떻게 처리되는지, 백도어가 설치되었는지 알 수 없음
     * 차에서도 문자 메시지, 연락처, 통화 기록을 가져갈 수 있음
          + 많은 차에서 동기화됨
     * Judge Nina Morrison이 휴대폰 검색을 ""비일상적"" 검색으로 판결함
          + 이는 신체 수색에 더 가까움
          + 신체 수색도 영장이 필요한지 궁금함
"
"https://news.hada.io/topic?id=16056","Semantic Grep - Word2Vec 기반 검색 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Semantic Grep - Word2Vec 기반 검색 도구

     * sgrep은 단어 임베딩을 사용하여 텍스트 입력에 대한 시맨틱 검색을 수행하는 명령줄 도구
          + 단순한 문자열 매칭을 넘어 쿼리에 대해 시맨틱적으로 유사한 일치를 찾음
          + grep과 유사한 경험을 제공하도록 설계됨
     * 기능
          + Word2Vec 임베딩을 사용한 시맨틱 검색
          + 유사성 임계값 설정 가능
          + 일치하는 줄 전후의 문맥 표시
          + 일치하는 단어와 줄 번호에 대한 색상 코드 출력
          + 파일 또는 표준 입력에서 읽기 지원
          + JSON 파일 및 명령줄 인수를 통한 구성 가능
     * 사용 예제
          + 헤밍웨이의 ""노인과 바다""에서 ""death""와 유사한 단어를 문맥과 줄 번호와 함께 검색:
curl -s 'https://gutenberg.ca/ebooks/hemingwaye-oldmanandthesea/…' \
| sgrep -C 2 -n -threshold 0.55 death

          + 이 명령어는 다음을 수행함:
               o ""노인과 바다"" 텍스트를 Project Gutenberg Canada에서 가져옴
               o 텍스트를 sgrep에 파이프함
               o ""death""와 시맨틱적으로 유사한 단어를 검색함
               o 유사성 임계값을 0.55로 설정함 (-threshold 0.55)
               o 각 일치 항목 전후로 2줄의 문맥을 표시함 (-C 2)
               o 줄 번호를 표시함 (-n)
          + 출력은 유사성 점수, 강조된 단어, 문맥 및 줄 번호를 보여줌
     * Word2Vec 모델
     * sgrep은 이진 형식의 Word2Vec 모델이 필요함. Google의 Word2Vec 모델과 같은 사전 학습된 모델을 사용하거나 gensim과 같은 도구를 사용하여 직접 학습할 수 있음
     * .bin 파일을 로컬에 다운로드하고 config.json을 업데이트함
          + Google의 Word2Vec: https://github.com/mmihaltz/word2vec-GoogleNews-vectors
          + 슬림 버전: GoogleNews-vectors-negative300-SLIM.bin.gz 모델 https://github.com/eyaler/word2vec-slim/ (eyaler 덕분에)
     * download-model.sh는 eyaler가 호스팅하는 작은 word2vec 모델을 models/googlenews-slim/ 디렉토리에 저장하는 간단한 도우미 스크립트임

GN⁺의 정리

     * sgrep은 단어 임베딩을 사용하여 텍스트에서 시맨틱적으로 유사한 단어를 검색하는 도구임
     * grep과 유사한 사용 경험을 제공하면서도 단순한 문자열 매칭을 넘어서는 기능을 제공함
     * Word2Vec 모델을 사용하여 유사성을 판단하며, 다양한 설정 옵션을 통해 유연하게 사용할 수 있음
     * 텍스트 분석 및 자연어 처리 작업에서 유용하게 사용될 수 있으며, 특히 문맥 기반 검색이 필요한 경우에 강력한 도구임

        Hacker News 의견

     * 코드를 읽으면서 몇 가지 작은 팁을 공유함
          + 벡터를 한 번에 읽을 수 있음
          + BLAS를 사용하여 유사성을 더 빠르게 계산할 수 있음
          + 벡터를 로드할 때 정규화하면 코사인 유사도는 벡터의 내적이 됨
          + 여러 CPU를 지원할 수 있는지 궁금함
          + word2vec 저장소가 데이터 할당량을 초과했음
          + 대체 소스로 Stack Overflow와 Hugging Face를 제안함
     * 이 아이디어가 매우 유용하고 왜 생각하지 못했는지 궁금해짐
     * 이미 semgrep이라는 도구와 회사가 존재함
     * 이 도구가 설명적 문구나 복합 문구를 처리할 수 있다면 매우 유용할 것임
          + 현재 검색 엔진의 가장 큰 단점은 단일 히트 검색임
     * 매우 멋진 도구임
          + 각 줄을 단어로 나누고 각 단어의 임베딩을 사용하는 것 같음
          + 긴 텍스트 시퀀스를 의미적으로 검색할 수 있는지 궁금함
          + Transformer 모델을 사용하는 것보다 단어 벡터를 사용하는 것이 더 빠르고 가벼울 것임
          + 잘 분리되지 않은 단어를 감지하고 서브스트링으로 나타나는 모든 단어를 찾는 방법도 고려할 수 있음
     * 이 도구가 매우 멋지며 꼭 사용해보고 싶음
          + 텍스트 전반에 걸친 의미적 검색이 많은 응용 프로그램에서 더 나은 사용자 경험을 제공할 것임
     * 비슷한 도구로 fltr를 제안함
          + 자연어 질문을 위한 grep과 유사함
     * 매우 멋지며, 파일 이름도 검색할 수 있는지 궁금함
     * 매우 멋진 도구를 발견하게 됨
          + semgrep이 이미 사용 중이므로 다른 이름을 고려해야 함
"
"https://news.hada.io/topic?id=16064","SAML에 대한 간단한 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            SAML에 대한 간단한 소개

     * SAML(Single Assertion Markup Language)은 XML 형식의 보안 관련 메시지를 교환하기 위한 규칙을 정의하는 표준
     * 주로 3개 이상의 독립된 엔티티 간 메시지 교환에 사용됨
          + 일반적인 시나리오는 서로 다른 회사에서 만든 두 소프트웨어 시스템과 사용자가 관련된 경우
          + 두 시스템은 사용자에 대한 정보를 교환해야 함
          + 커스텀 인티그레이션 할 수도 있지만 유지보수가 어려움
     * SAML은 시스템 간에 동일한 규칙을 따르게 하여 복잡한 통합 작업을 단순화함

  SAML 메시지 형식

     * SAML 메시지는 XML 형식으로 이루어짐
     * 메시지 구문을 정의하고 메시지 내용을 안전하게 처리하는 방법을 알려줌
     * <Response> 태그를 받으면 <Assertion> 태그를 찾아야 한다는 것 등을 알 수 있음
     * 디지털 서명이 어떻게 생겼는지, 보안 문제를 피하기 위해 메시지를 어떻게 처리해야 하는지에 대한 지침을 제공함

  SAML의 유연성

     * SAML은 유연성을 강조하여 설계됨. 원칙적으로는 SAML로 많은 작업을 할 수 있음, 하지만 그 유연성이 복잡성으로 이어짐
     * SAML 사양에는 수많은 예외사항이 있고, 많은 if와 예를 들어가 있어서 엣지 케이스를 추가함
     * SAML은 오래됐기 때문에 일부 사람들은 유연성을 활용함
     * 실제 운영 환경, 특히 레거시 시스템에서는 SAML이 비정상적인 동작을 하는 경우가 있음
     * 대부분은 SAML의 작은 하위 집합에만 집중하면 삶이 더 편해짐

  SAML의 실제 사용 목적

     * SAML은 주로 Single Sign-On(SSO)에 사용됨
     * SAML은 몇 가지 이상한 SSO 유형을 정의하지만, 일반적으로 Web Browser SSO Profile을 사용함
     * 최종 사용자는 중앙 집중식 시스템에 먼저 인증한 다음 원하는 소프트웨어 애플리케이션에 액세스함
     * 사용자는 애플리케이션에 직접 인증하지 않음
     * 예를 들어 Okta를 사용하여 이메일에 액세스한 적이 있다면 Web Browser SSO Profile을 사용한 것임

  SSO에 관련된 엔터티

     * SSO에는 3가지 주체가 관련됨:
         1. 사용자: 애플리케이션을 사용하려는 사람
         2. 서비스 제공자(SP): 애플리케이션 자체
         3. ID 제공자(IDP): 사용자가 인증에 사용할 중앙 서비스
     * 각 고객의 IDP는 데이터베이스로 간주할 수 있음. 사람들에 대한 데이터를 추적함
          + 회사는 종종 ID 제공자를 사용하여 직원을 부서에 할당하고 다양한 권한을 부여함
     * SAML을 통해 사용자를 로그인할 때마다 IDP에서 정보를 가져와야 함. SSO에서는 주로 IDP에 사용자 ID 확인을 요청
     * IDP와 사전 구성된 신뢰 관계가 필요함
          + SAML SSO를 사용하는 모든 고객은 애플리케이션에서 자체 설정이 필요
          + 하지만, IDP와 직접 메시지를 주고받지는 않음. SAML SSO에서는 서비스 제공자와 ID 제공자가 사용자의 브라우저를 통해 통신함

  SAML 엔터티 간 상호 작용 방식

     * 일반적인 SAML SSO 프로세스:
         1. 사용자가 웹 브라우저에서 애플리케이션의 일부에 액세스하려고 함
         2. 사용자에게 유효한 보안 컨텍스트가 있는지 확인
         3. 사용자에게 유효한 보안 컨텍스트가 없으므로 로그인 페이지 표시
         4. 사용자가 일부 정보(예: 이메일 주소)를 입력하면 적절한 로그인 방법을 결정하는 데 사용됨
         5. 사용자를 IDP의 웹 주소로 리디렉션하고 사용자의 브라우저를 통해 SAML 메시지를 IDP에 전달
         6. IDP는 사용자에게 자격 증명을 묻는 메시지를 표시. 사용자가 성공적으로 인증됨
         7. IDP는 사용자의 인증에 대한 정보를 전달하는 SAML 메시지와 함께 사용자를 애플리케이션으로 다시 리디렉션함
         8. SAML 메시지를 처리하고 사용자에 대한 보안 컨텍스트를 설정해야 한다고 판단함
         9. 사용자에게 애플리케이션의 원하는 부분에 대한 액세스 권한을 부여함
     * ID 공급자에서 SAML SSO 프로세스를 시작할 수도 있음
     * 이 경우 인증 요청을 보내지 않고 인증 응답을 받게 됨
     * SAML SSO 지원을 구현할 때 IDP에서 시작한 SSO에 대비해야 함

  SAML에서 교환되는 메시지

     * SAML SSO에서 주로 2가지 메시지가 관심사임
          + 서비스 제공자에서 IDP로 가는 메시지를 SAML 요청(request)이라고 함
          + IDP에서 서비스 제공자로 돌아오는 메시지를 SAML 응답(response)이라고 함
     * SAML 요청은 실제로 그리 복잡하지 않음. XML을 HTTP 리디렉션을 통해 보내는 것으로 충분함
     * <AuthnRequest> 태그에 ID를 포함하여 IDP가 원래 요청과 연결된 <Response>를 공유할 수 있도록 함
     * <Issuer> 태그로 감싼 데이터도 IDP에 보내서 누구인지 알려줌
     * SAML 응답은 더 까다로움. 일반적으로 POST를 통해 전송됨
     * <Response>는 개념적으로 몇 개의 <Assertion> 태그를 감쌈
     * <Assertion>은 사용자에 대한 클레임(누구인지, IDP로 어떻게 인증했는지 등)을 감쌈
     * Assertion을 처리하여 사용자를 로그인할지 여부를 결정함

  주의사항

     * 여기서는 많은 세부 사항, 특히 보안상 중요한 내용들을 생략했음
     * SAML에 개인적으로 관심이 있거나 전문적으로 깊이 조사할 이유가 없다면 SAML 기반 로그인을 직접 구현하는 것은 권장하지 않음. 시간 낭비임
     * SAML을 가능한 한 빨리 설정하고 싶다면 우리가 SAML을 추상화한 오픈소스 SSOReady 를 제공함. 시간과 고통을 많이 절약해 줄 것임
"
"https://news.hada.io/topic?id=16035","스위스의 한 도시가 옥외 광고판을 금지함, Zurich와 Bern도 곧 동참 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             스위스의 한 도시가 옥외 광고판을 금지함, Zurich와 Bern도 곧 동참 가능

     * 제네바 인근의 한 교외 지역인 베르니에(Vernier)가 스위스에서 처음으로 상업 광고를 거리에서 추방한 지자체가 됨. 이는 스위스 전역의 대도시에서 유사한 금지 조치를 취할 수 있는 청사진이 됨
     * 베르니에의 3만 8천 명 주민들 중 이 조치에 반대하는 사람들이 국민 투표를 위한 충분한 서명을 모으는 데 실패한 후, 지방 정부가 광고판을 철거하는 것을 막으려는 마지막 시도가 이달 스위스 대법원에서 기각됨
     * 재판관들은 베르니에의 정책이 자유 경쟁에 영향을 미치려는 것이 아니라 ""시각적 공해와 싸우고"" 시민들에게 ""원치 않는 광고를 거부할 기회를 주는 것""이라고 판결함

""광고판에 대한 공익을 인식하지 못했음""

     * 베르니에 시의회 의원 Mathias Buschbeck은 ""우리는 광고판에 대한 공익을 인식하지 못했다""고 말함. 찬성론자들은 광고가 단지 불필요한 지출과 소비자 부채를 조장한다고 주장함
     * 녹색당 당원인 Buschbeck은 ""우리는 이 조치로 불필요한 소비와 싸우고 싶다""고 말하며, 광고판은 보통 ""대기업이 예약했지 지역 기업이 예약한 게 아니었다""고 덧붙임

대법원 판결로 172개 광고판 중 4분의 3 이상 철거 확정

     * 대법원 판결로 베르니에 시내에 있던 172개의 광고판 중 4분의 3 이상을 철거하고, 나머지는 문화와 스포츠 광고에 사용하기로 한 결정이 확정됨
     * 이 금지령은 사유지에 설치된 것을 포함하여 공공 토지에서 보이는 모든 광고에 적용됨

취리히와 베른 등 대도시도 유사한 제안 추진 중

     * 이번 획기적인 판결로 취리히와 베른 등 스위스의 대도시들도 유사한 제안을 추진할 수 있게 됨
     * 수도 베른과 금융 중심지 취리히는 모두 지방 의회를 통과한 유사한 계획이 있으며, 현재 행정부가 금지 조치를 어떻게 시행해야 할지 제안하기를 기다리고 있음
     * 베른은 대부분의 상업 광고를 금지하려 하고, 취리히는 에너지를 많이 소모하는 디지털 스크린만 겨냥함

옥외 광고 산업에 타격 우려

     * 광고 없는 도시로 가는 추세는 연간 약 4억 스위스 프랑(4억 5천만 달러)의 가치가 있고 스위스 GDP 8,850억 달러의 거의 두 배를 기여하는 옥외 광고 산업에 위험 요소임
     * 업계 협회 회장인 Markus Ehrle은 그 돈이 대신 ""구글이나 메타와 같은 대형 인터넷 기업으로 흘러들어갈 것""이라며 ""온라인 광고가 광고판보다 훨씬 더 에너지 집약적""이라고 덧붙임

도시 미관 넘어 기후 변화 대응책으로 제시

     * 지방 정치인들은 이제 상파울루나 프랑스 그르노블 같은 도시에서 금지령을 가져온 깔끔한 도시 경관이라는 한때 지배적이던 논리를 넘어섬. 대신 이 아이디어는 기후 변화와의 싸움에서 또 다른 해결책이 되었음
     * 베른 시의 좌파 정치인 그룹은 의회 제안서에서 ""광고는 사람들이 전에는 알지 못했던 욕구를 만들어내기 위한 것""이며 ""광고의 목적과 목표는 베른이 기후 중립을 달성하려는 목표와 정반대""라고 썼음
     * 취리히에서는 녹색당 정치인이 디지털 광고판을 ""쓸데없는 에너지 낭비""라고 칭함

성공 보장은 없음

     * 베르니에의 성공이 다른 곳에서 보장되는 것은 아님. 2023년 봄, 베르니에의 큰 형 제네바는 시민들의 11시간 국민투표로 이미 결정된 의회 금지령이 저지되는 것을 보았음
     * 2022년 전국 조사에서 응답자의 63%가 광고판 금지 아이디어에 반대함

GN⁺의 의견

     * 옥외 광고 금지는 에너지 소비와 불필요한 소비주의를 줄이는 데 도움이 될 수 있음. 하지만 이는 지역 경제와 중소기업에 부정적인 영향을 미칠 수도 있음
     * 옥외 광고 산업의 타격도 고려해야 함. 온라인 광고로의 전환이 반드시 더 친환경적이지는 않을 수 있음
     * 시민들의 의견을 충분히 수렴하고 지역 상황을 고려하여 균형 잡힌 정책을 수립하는 게 중요함
     * 광고 제한과 함께 지속 가능한 소비를 장려하고 지역 경제를 활성화하는 다른 정책도 병행되어야 함
     * 옥외 광고를 완전히 금지하기보다는 에너지 효율적인 방식으로 규제하고, 지역 사회에 기여하는 광고는 허용하는 것도 대안이 될 수 있음

        Hacker News 의견

     * 폴란드 크라쿠프시는 2년 전 광고판을 금지했으며, 긍정적인 결과를 얻었음
          + 일부 기업들은 광고를 위해 건물 외관을 덮는 등의 편법을 사용하고 있음
          + 다른 도시를 방문할 때 시각적 쓰레기를 참을 수 없게 됨
          + 이러한 금지는 모든 곳에서 시행되어야 함
     * 그르노블은 2014년에 모든 광고를 금지하고 많은 나무를 심었음
          + 주차 금지와 자동차 공유, 대중교통 개선, 도시 농업, 커뮤니티 정원 및 공원을 추가하면 효율적인 도시가 될 것임
          + 네덜란드의 시장들은 이러한 규칙을 변경할 권한이 부족함
          + 네덜란드에서는 이러한 변화가 어렵지만, 진보적인 도시에서는 가능할 수 있음
     * 미국 버몬트주는 1968년부터 광고판을 금지했으며, 주에서 시간을 보내는 것이 매우 쾌적함
     * 마케팅이 없는 세상이 어떻게 보일지 항상 궁금했음
          + 마케팅은 순수익이 부정적이라고 생각함
          + 대기업의 지출을 통제함으로써 대부분의 마케팅을 제거할 수 있음
          + 마케팅을 제거하는 것에 대해 윤리적 문제가 없다고 생각함
          + 기업이 자유 발언권을 가질 권리가 없다고 생각함
     * 테네시 주 저먼타운은 오래 전부터 광고판과 큰 간판을 금지했음
          + 상점을 찾기 어려웠음
          + 알래스카는 1949년에 광고판을 금지했음
     * 남아프리카 요하네스버그 지역에 살고 있으며, 경제적으로 중요한 지역임
          + 교통 체증 중 광고를 피할 수 없음
          + 큰 전자 광고판 주변이 지저분하고 관리되지 않음
          + 지방 정부의 무능함이 원인임
          + 광고판 회사들이 도로를 깨끗하게 유지하도록 계약 조건에 포함시킬 수 있음
          + 뇌물 수수, 부패, 전력 공급 문제 등으로 인해 중산층이 나라를 떠나는 이유 중 하나임
     * 기업들은 증강 현실을 통해 모든 표면에 광고를 배치하려고 기다리고 있음
     * 광고 없이 기능할 수 없도록 세뇌된 사람들을 보는 것이 재미있음
          + 물건을 살 때 더 신중한 결정을 내릴 수 있음
     * 프라하의 한 지하철역이 최근에 리모델링되었고, 광고가 없었음
          + 시각적 오염이 없는 공간이 신선하게 느껴졌음
          + 몇 주 후 광고가 다시 붙었고 사람들이 불평했음
          + 광고 공간의 소유자가 광고 공간을 매우 저렴하게 제공했음
          + 광고를 제거한 후 가장 아름다운 지하철역이 되었음
"
"https://news.hada.io/topic?id=16118","LG와 삼성은 TV 화면을 사라지게 만들고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LG와 삼성은 TV 화면을 사라지게 만들고 있다

     * LG와 삼성은 CES 2024에서 투명 디스플레이를 시연했음. 이러한 큰 투명 TV는 많은 관람객의 관심을 끌었음
     * 하지만 투명 TV가 거실에 나타날 가능성은 낮음.
     * LG는 OLED 디스플레이에 집중하고, Samsung은 microLED 스크린을 개발 중이지만, 두 기술 모두 아직 실용화 준비가 되지 않았음. 각 기술의 어려움을 이해하려면 더 깊이 들어가야 함

LG의 투명 OLED 디스플레이 기술

     * LG는 투명 OLED 디스플레이에 베팅하고 있음
     * OLED는 유기 발광 다이오드를 의미하며, 전기로 에너지를 받으면 빛을 내는 탄소 기반 화합물임
     * 서로 다른 화합물이 다른 색을 내며, 이를 조합해 풀 컬러 이미지를 만들 수 있음
     * OLED 재료를 박막 형태로 기판에 증착시켜 디스플레이를 만듦
     * RGB 재료를 패턴으로 배열해 풀 컬러 픽셀의 고밀도 어레이를 만드는 것이 가장 일반적인 방식임
     * 4K 해상도 디스플레이는 384만 개의 픽셀로 구성되며, 거의 2500만 개의 RGB 서브픽셀로 이뤄짐
     * 각 서브픽셀로 보내는 전류의 타이밍과 양이 발광량을 결정함
     * 전선 대신 투명한 전도성 트레이스를 사용해야 빛을 막지 않음
     * 수천 개의 트레이스가 행과 열로 배열돼 각 서브픽셀에 필요한 전기적 연결을 제공함
     * 트랜지스터 스위치도 동일한 기판에 제작됨
     * OLED가 투명해 보이려면 이 모든 재료를 주의 깊게 선택해야 함
     * 전도성 트레이스로는 인듐 주석 산화물을 얇은 막으로 사용하며, 일반적인 두께는 135nm이지만 약 80%의 빛이 통과할 수 있음
     * 트랜지스터 재료는 본질적으로 불투명하므로 최대한 작게 만들어 빛을 덜 차단하도록 해야 함
     * 대부분의 LCD에 사용되는 비정질 실리콘은 저렴하지만 전자 이동도가 낮아 트랜지스터 크기를 줄이는 데 한계가 있음
     * 레이저로 비정질 실리콘을 어닐링해 결정화된 폴리실리콘을 만들면 전자 이동도가 개선돼 트랜지스터 크기를 줄일 수 있지만, 작은 유리 기판에서만 가능함
     * 투명 OLED 디스플레이 설계자들은 IGZO로 눈을 돌림. IGZO는 전자 이동도가 높아 비정질 실리콘보다 작은 트랜지스터를 만들 수 있어 빛을 덜 차단함
     * OLED는 산소나 수증기에 노출되면 발광 물질이 파괴되므로 표면과 가장자리를 덮는 캡슐화 층이 필요함
     * 이 층 때문에 패널을 가장자리로 붙일 때 눈에 띄는 틈이 생겨 작은 디스플레이를 모아 큰 디스플레이를 만들 수 없음
     * 큰 OLED 디스플레이가 필요하면 하나의 큰 패널을 제작해야 함
     * LG 시제품은 45% 정도의 투과율을 가진 것으로 보임. 화면 뒤의 사람과 물체가 직접 볼 때보다 눈에 띄게 어둡게 보임

삼성의 마이크로 LED 기술

     * 삼성은 투명 디스플레이에 무기 LED를 사용하고 있음
     * LED는 전기를 빛으로 변환하는 효율이 매우 높으며, 가정용 전구, 자동차 전조등과 후미등, 전자 기기의 전원 표시등 등에 널리 사용됨
     * LED 디스플레이에서 각 픽셀은 RGB LED 하나씩으로 구성됨
     * 이는 고속도로 광고판이나 스포츠 경기장 전광판 등 먼 거리에서 볼 이미지에 적합함
     * 그러나 TV 디스플레이는 적당한 거리에서 봐야 하므로 훨씬 더 작은 LED가 필요함
     * 2년 전만 해도 마이크로 LED 디스플레이는 30x50μm 칩을 사용했지만, 지금은 12x27μm 미만으로 크기가 절반 이상 줄었음
     * 이렇게 작은 LED 칩은 빛을 거의 차단하지 않아 디스플레이가 더 투명해짐
     * 대만의 디스플레이 제조업체 AUO는 최근 60% 이상의 투과율을 가진 마이크로 LED 디스플레이를 시연함
     * 마이크로 LED는 산소와 수분의 영향을 받지 않아 캡슐화가 필요 없음
     * 이를 통해 작은 패널을 조립해 끊김 없는 더 큰 디스플레이를 만들 수 있음
     * 작은 패널의 실리콘 코팅은 IGZO보다 성능이 좋은 폴리실리콘으로 어닐링할 수 있어 트랜지스터를 더 작게 만들고 빛을 덜 차단할 수 있음
     * 하지만 마이크로 LED 방식에도 문제점이 있음. 아직 초기 단계라 제조 비용이 많이 들고 전체 디스플레이에서 균일한 밝기와 색상을 얻기 위해 힘든 과정이 필요함
     * 개별 OLED는 잘 정의된 색을 방출하지만 LED는 그렇지 않음. LED 칩의 물리적 특성이 약간만 달라져도 방출하는 빛의 파장이 눈에 띄게 달라짐
     * 제조업체는 수천 개의 칩을 테스트한 후 유사한 파장으로 그룹화하고 원하는 범위에 맞지 않는 것은 폐기하는 방식으로 이 문제를 해결해 왔음
     * 이는 LED 스크린 가격이 비싼 이유 중 하나임. 제작에 사용되는 많은 LED가 폐기되어야 하기 때문
     * 그러나 마이크로 LED에는 이런 방식이 통하지 않음. 작은 칩을 테스트하기 어렵고 너무 비싸서 많이 폐기하면 비용이 천문학적으로 높아짐
     * 대신 제조업체는 조립 후 마이크로 LED 디스플레이의 균일성을 테스트한 다음, 각 서브픽셀에 인가되는 전류를 조정해 디스플레이 전체의 색상과 밝기를 균일하게 보정함
     * 이 보정 과정에는 패널에 이미지를 스캔한 후 제어 회로를 재프로그래밍하는 작업이 포함되며, 때로는 수천 번의 반복이 필요할 수 있음
     * 패널 조립 문제도 있음. 4K 디스플레이를 구성하는 2500만 개의 마이크로 LED 칩은 각각 정확히 위치해야 하고 올바른 전기 접점에 연결돼야 함
     * LED 칩은 사파이어 웨이퍼에 제작되는데, 각 웨이퍼에는 한 가지 색상의 칩만 포함됨
     * 이 칩들은 웨이퍼에서 캐리어로 옮겨져 패널 백플레인에 적용되기 전까지 일시적으로 고정됨
     * 대만의 마이크로 LED 회사 PlayNitride는 2μm 미만으로 칩을 배치한 큰 타일을 만드는 공정을 개발했으며, 99.9% 이상의 수율을 가진 작은 칩 위치 설정 공정을 보유하고 있음
     * 그러나 99.9%의 수율에서도 4K 디스플레이에 약 25,000개의 불량 서브픽셀이 예상됨
     * 전기적 접촉이 이뤄지지 않도록 잘못 위치하거나, 패턴에 잘못된 색상 칩이 배치되거나, 서브픽셀 칩 자체가 불량일 수 있음
     * 이러한 결함을 수정하는 것이 가능하기도 하지만, 이는 이미 높은 비용을 더 증가시킬 뿐임

투명 디스플레이의 실제 활용

     * 삼성과 LG뿐 아니라 다른 회사들도 최근 투명 패널을 선보였음
     * AUO의 60인치 타일형 투명 디스플레이는 5월 산호세에서 열린 SID 디스플레이 위크에서 마이크로 LED 기반 기술 부문 인기상을 수상함
     * 중국 BOE는 CES 2024에서 49인치 투명 OLED 디스플레이를 시연함
     * 이 투명 디스플레이들은 모두 엄청나게 비쌀 것이라는 공통점이 있음
     * LG의 투명 OLED 디스플레이만 상용 제품으로 발표됐지만, 가격이나 출시일은 아직 밝혀지지 않았음
     * 그러나 불투명 버전도 충분히 비싼 걸 감안하면 가격을 짐작하기 어렵지 않음. LG의 최고급 77인치 OLED TV 가격은 $4,500임
     * 끊김 없는 타일링 덕분에 투명 마이크로 LED 디스플레이는 OLED보다 더 클 수 있지만, 생산 비용도 훨씬 더 높음
     * 이는 가격에 반영됨. 예를 들어 삼성의 114인치 불투명 마이크로 LED TV는 $150,000에 판매되며, 투명 모델은 더 비쌀 것으로 예상됨
     * 이런 가격을 보면 투명 디스플레이의 실제 활용 분야가 무엇일지 의문이 듦
     * 가격이 너무 비싸서 거실 TV로 등장하긴 어려울 것임. 게다가 가격만의 문제는 아님
     * 영화를 볼 때 배경에 책장이 비치는 걸 원하는 사람은 없을 것임
     * 이 때문에 LG가 CES 2024에서 시연한 투명 OLED TV에는 필요할 때 디스플레이 뒤쪽을 가리는 검은색 천으로 된 ""콘트라스트 레이어""가 포함됐음
     * 투명 디스플레이는 데스크탑에서 활용될 수 있음. 투과해서 보이는 게 아니라 뒤에 카메라를 두고 화면을 직접 보면서 이미지를 캡처할 수 있기 때문
     * 줌 통화 중에 시선을 유지하는 데 도움이 될 수 있음
     * Veeo라는 회사는 CES 2024에서 이런 제품의 시제품을 시연했으며, 올해 말 30인치 모델을 $3,000에, 55인치 모델을 $8,500에 출시할 계획임
     * Veeo의 제품은 LG의 투명 OLED 기술을 사용함
     * 투명 스크린은 이미 간판과 공공 정보 디스플레이로 활용되고 있음
     * LG는 서울 신규 고속 지하철인 GTX의 창문에 55인치 투명 OLED 패널을 설치했음
     * 승객들은 이 디스플레이에서 지도와 정보를 볼 수 있으며, 필요할 때는 바깥 풍경을 볼 수 있도록 투명하게 만들 수 있음
     * LG 투명 패널은 두산 밥캣의 E35e 굴삭기 시제품에도 사용됐음
     * 이 터치스크린 디스플레이는 작업자의 앞유리나 옆유리 역할을 하며, 중요한 기계 데이터를 보여주거나 차량에 장착된 카메라의 실시간 영상을 표시할 수 있음
     * 이런 투명 디스플레이는 일부 항공기 앞유리의 헤드업 디스플레이와 유사한 기능을 할 수 있음
     * 따라서 대형 투명 디스플레이는 인상적이지만, 초기에는 기계 작업자용 디스플레이, 공공 엔터테인먼트, 소매 간판, 자동차 앞유리 등으로 더 많이 볼 가능성이 높음
     * 초기 채택자들이 대량 생산 공정 개발 비용을 감당하면서 가격이 내려갈 수 있음
     * 그러나 설령 비용이 합리적인 수준에 도달하더라도 일반 소비자가 정말로 집에 투명 TV를 원하는지는 두고 봐야 할 것임

GN⁺의 의견

     * 투명 디스플레이 기술은 분명 흥미롭고 미래지향적인 기술임. 하지만 아직 실용성 측면에서는 의문이 있음
     * 디스플레이 시장은 이미 OLED와 마이크로 LED 기술 경쟁으로 치열한 상황인데, 여기에 투명성이라는 새로운 요소가 추가된 것임. 어떤 기술이 시장을 선도할지 예측하기 어려움
     * 투명 디스플레이의 가장 큰 난제는 높은 가격임. 이는 생산 비용 문제와 직결되는데, 당분간은 대중화되기 어려울 것으로 보임
     * 또 다른 이슈는 투명 디스플레이의 실제 활용 분야임. 기술 시연용으로는 인상적이지만 실생활에서 꼭 필요한 기능인지는 의문임
     * 기술의 진화 방향을 볼 때 투명 디스플레이가 미래 트렌드가 될 가능성은 있지만, 상용화까지는 많은 시간이 걸릴 것으로 예상됨
     * 투명 디스플레이 기술이 일반 가정보다는 산업 현장이나 상업 공간 등 특수 목적으로 먼저 도입될 가능성이 높아 보임
     * 자동차나 비행기 등 운송 수단에서의 활용도 주목할 만한데, AR/VR 기술과 접목되면 더 큰 시너지를 낼 수 있을 것임
     * TV 시장에서는 투명성보다는 화질, 해상도, 크기 등 다른 요소들이 여전히 더 중요할 것으로 보임. 투명 TV가 대중화되기는 힘들 전망임
     * 다만 투명 디스플레이가 차세대 디스플레이로 주목받으면서 OLED, 마이크로 LED 등 디스플레이 기술 발전을 더욱 가속화할 것으로 기대됨
     * 특히 AR 글라스 등 웨어러블 기기나 사물인터넷(IoT) 기기 등에서 투명 디스플레이의 잠재력이 빛을 발할 수 있을 것임

        Hacker News 의견

     * Samsung TV에 광고가 삽입된 이후 다시는 구매하지 않겠다는 의견
     * 투명 TV는 해결할 필요가 없는 문제 중 하나라는 의견
     * '미래 기술'로 포장된 것이 혼란스럽다는 의견
          + 투명 디스플레이는 8년 전부터 상업적으로 사용되었음
          + 최근 증강 현실 버스 투어 프로젝트에서 사용됨
          + 투명 OLED와 투명 LCD의 차이점 설명
     * rtings에서 얇은 베젤을 가진 LCD TV의 문제점을 지적한 영상 공유
          + 이는 TV가 저렴해서가 아니라 디자인 결정 때문임
          + 삼성의 대응은 실질적인 답변이 아니었음
          + 제품의 수명이 짧아지는 것이 회사에 유리하다는 의견
     * 투명 디스플레이와 카메라를 이용한 줌 콜에 대한 기사 언급
          + 투명 디스플레이가 한 방향으로만 빛을 방출할 수 있는지 의문
          + 기존의 텔레프롬프터 솔루션이 더 나을 수 있다는 의견
     * 수평 화면을 이용한 저렴한 대체 방안 제안
          + 강력한 LED와 적절한 기하학적 배치를 통해 가능할 것이라는 의견
     * 혼합 현실 기술에 대한 기대감
          + 현재 광학 투과형 AR 안경은 거울/투명 화면을 통해 정보를 표시함
          + 디스플레이 투과형은 사실감을 제공할 수 있지만 사용성 문제 존재
          + 두 기술의 장점을 결합한 기술의 발전을 기대함
     * 투명 TV에 대한 회의적인 시각
          + 소비자에게는 큰 의미가 없을 것이라는 의견
          + 상업적 용도에서는 유용할 수 있음
          + 가정에서는 배경과 이미지가 섞일 수 있는 문제 존재
     * 투명 TV의 채택 곡선과 가격 프리미엄에 대한 궁금증
          + TV가 가정에서 중요한 역할을 하기 때문에 투명 TV의 이점이 적음
          + 투명 TV를 위해 가구 배치와 케이블 관리가 더 중요해짐
          + 채택이 느려질 가능성 존재
     * 많은 SF TV 쇼에서 투명 터치스크린이 등장하지만, 사용성 문제 존재
          + 배경이 보이는 모니터는 사용하기 어려울 것이라는 의견
"
"https://news.hada.io/topic?id=16086","Show HN: Three.js로 만든 축구 패스 시각화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show HN: Three.js로 만든 축구 패스 시각화 도구

     * 이벤트가 선택되지 않음
     * 필터 적용
     * 필터 지우기
     * 카메라 리셋
     * StatsBomb 3D 시각화 도구
     * StatsBomb 이벤트 데이터 파일의 URL을 붙여넣기
     * 데이터 로드
     * 예제 로드
     * 예시: @c_mnzs / gh: @carlos-menezes

GN⁺의 정리

     * 이 도구는 StatsBomb 이벤트 데이터를 3D로 시각화할 수 있는 기능을 제공함
     * 사용자는 이벤트 데이터 파일의 URL을 입력하여 데이터를 로드할 수 있음
     * 필터를 적용하거나 지우는 기능을 통해 원하는 데이터를 선택할 수 있음
     * 카메라 리셋 기능을 통해 시각화된 데이터를 초기 상태로 되돌릴 수 있음
     * 이 도구는 데이터 분석과 시각화에 관심 있는 사람들에게 유용할 수 있음

        Hacker News 의견

     * 무료 데이터를 활용한 멋진 프로젝트를 보는 것은 항상 즐거움
          + 수천 개의 무료 축구 경기가 GitHub에 있음
          + Lionel Messi와 Tom Brady의 경기 데이터도 수집 중임
     * 2D 시각화를 좋아함
          + 예전에 PUBG 분석 도구를 만들었음
          + 프로 축구팀도 비슷한 도구를 사용하고 있을지 궁금함
     * 프로젝트를 통해 three.js를 배우고 있음
          + deck.gl이나 kepler.gl도 고려할 만함
          + 더 높은 수준의 시각화와 성능 최적화를 제공함
          + 빠른 프로토타이핑이 가능함
     * 인터페이스가 훌륭함
          + raw json을 직접 찾아서 변경할 수 있음
          + three.js 사용 이유가 명확하지 않음
          + whoscored의 패스 경로가 더 직관적임
     * 선수들의 포지션이 경기에서 어떻게 반영되는지 흥미로움
          + Bayer Leverkusen vs. Werder Bremen 경기를 예로 든 것이 좋음
     * 프로젝트가 멋짐
          + 시간 기반 애니메이션 추가를 요청함
          + 데이터를 탐색하는 것이 첫 단계임
     * 색상의 의미가 궁금함
          + 패스의 방향과 속도를 표시하는 방법 제안
          + 각 선수와 팀의 통계 요약을 제공하는 것도 좋음
     * 시간 순서대로 패스를 재생할 수 있으면 좋겠음
     * ""Load Example"" 기능이 유용했음
          + 실시간 게임 카메라와 결합하면 강력할 것임
     * 파일 로드에 실패함
          + 다양한 URL 형식을 시도했으나 작동하지 않음
          + 예제 형식이나 오류 메시지 개선이 필요함
          + 메인 엔진이 완성된 후 더 많은 필터가 추가되면 좋겠음
"
"https://news.hada.io/topic?id=16060","배터리 디자인 디버깅 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             배터리 디자인 디버깅 방법

    배터리 설계 디버깅 방법

      ""and"" 문제

     * 현재 시장에는 고에너지와 고출력을 동시에 제공하는 배터리가 거의 없음
     * 고에너지 배터리는 주행 거리를 늘리지만 가속 시 과열 문제 발생
     * 배터리 설계 시 고려해야 할 주요 지표는 안전성, 수명, 무게, 비용 등

      차원의 저주

     * 배터리 설계는 다양한 변수와 조합을 고려해야 하므로 실험 비용과 시간이 많이 소요됨
     * 각 변수마다 3개의 데이터 포인트를 수집하면 3,486,784,401개의 조합이 발생
     * 모든 조합을 실험하는 것은 비현실적이며, 비용과 시간이 과도하게 소요됨

      ""and"" 문제 해결 방안?

     * 실리콘과 그래파이트 혼합 음극재가 고에너지와 고출력을 동시에 제공할 가능성 있음
     * 실리콘 음극재는 용량을 증가시키지만 전압 히스테리시스와 팽창 및 균열 문제 발생

      전압 히스테리시스

     * 리튬 이온이 음극재에 삽입되면서 전압 변화 발생
     * 전압 히스테리시스는 충전 및 방전 시 전압 경로가 달라지는 현상
     * 전압은 배터리 상태를 즉각적으로 나타내지만 신뢰성 문제 존재

      팽창 및 균열

     * 실리콘 입자는 리튬 삽입 시 약 80% 팽창
     * 팽창으로 인해 입자가 파손되거나 주변 재료와의 연결이 끊어질 수 있음
     * 입자 크기를 줄이면 전압 히스테리시스와 팽창 문제 완화 가능

      PyBaMM의 도움

     * PyBaMM은 배터리 문제를 시뮬레이션으로 해결할 수 있는 오픈소스 도구
     * 배터리 충전 및 방전 시 전압 변화를 분석하고 주요 물리적 과정을 이해하는 데 도움
     * 시뮬레이션을 통해 다양한 변수의 영향을 빠르게 평가 가능

      PyBaMM 코드 예제

     * PyBaMM을 사용하여 배터리의 전압 구성 요소를 분리하고 분석 가능
     * 실험을 통해 전압 변화와 관련된 주요 과정을 시각화

      결론

     * PyBaMM은 배터리 설계 및 디버깅에 유용한 도구
     * 시뮬레이션을 통해 차원의 저주 문제를 해결하고 실험 비용과 시간을 절약 가능

  GN⁺의 정리

     * 이 기사는 배터리 설계의 복잡성과 이를 해결하기 위한 시뮬레이션 도구의 중요성을 설명함
     * PyBaMM은 배터리 설계 시 다양한 변수의 영향을 빠르게 평가할 수 있는 유용한 도구임
     * 배터리 설계 및 디버깅에 관심 있는 엔지니어들에게 유익한 정보 제공
     * 유사한 기능을 가진 다른 프로젝트로는 COMSOL Multiphysics와 ANSYS Battery Simulation이 있음

        Hacker News 의견

     * 실험 설계: 한 번에 하나의 요소만 변경하는 실험은 비효율적임. 현대 실험 설계 방법을 사용하면 수백에서 수천 번의 실험으로 최적화 가능함
          + 참고 도서: ""Design and Analysis of Experiments"" by Douglas C. Montgomery
     * 배터리 기술 학습: 직접 ""solar generator""를 제작하면서 배터리 기술을 학습함
          + 구성 요소: 리튬 인산철 셀, BMS, 태양광 충전 컨트롤러 등
          + 결과물: 캠핑 시 냉장고와 조명을 위한 1.2kWh 배터리 제작, 상업용 제품보다 절반 이하의 비용으로 제작
          + 산업 디자인: 배터리 팩의 외관과 내부 배선의 어려움을 경험함
     * PyBAMM: PyBAMM의 유용성을 언급하며, 배터리 셀 설계와 검증에 대한 질문을 제기함
          + 모델링: 장기적인 열화 및 마모 모델링에 대한 관심 표명
          + 튜토리얼 요청: 해당 주제에 대한 튜토리얼이나 예제 요청
     * 에너지 프로파일링 도구: Nordic Semiconductor의 PPK II를 추천함
          + 가격 대비 성능: 합리적인 가격에 뛰어난 성능을 제공함
          + 필수 도구: 배터리로 구동되는 하드웨어 제품을 설계할 때 필수적인 도구임
     * PyBaMM 모델 파라미터화: 상업용 셀을 사용한 PyBaMM 모델 파라미터화에 대한 블로그 포스트 요청
     * 전기 비행 성능 요구사항: 전기 비행 성능 요구사항에 대한 오픈 액세스 논문 추천
          + 논문 링크: 논문 링크
     * 배터리 디버깅: 배터리 디버깅보다는 일반적인 배터리와 프로파일링에 대한 내용이 많음
          + PyBaMM 요구사항: ""pybamm=24.1""
          + GitHub 링크: PyBaMM GitHub
     * 기사 제목: ""디버깅""이라는 단어가 적절하지 않다고 생각함
          + 제안 제목: ""How to model the right battery choice for your application"" 또는 ""Understanding trade-offs in battery design""
     * 블로깅 플랫폼: GitHub이 블로깅 플랫폼으로 완벽한 솔루션임
     * 라이브러리 파라메트릭: 다른 전해질 시스템(예: 나트륨 배터리, 플로우 배터리, 납산 배터리)에도 적용 가능한지 질문함
"
"https://news.hada.io/topic?id=16085","슈퍼 닌텐도 비디오 시스템 설계 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          슈퍼 닌텐도 비디오 시스템 설계 이해

    슈퍼 닌텐도 비디오 시스템 설계

      90년대 초 TV의 내부

     * 슈퍼 닌텐도는 표준 TV 세트에 비디오를 출력함
     * TV는 안테나를 통해 아날로그 TV 방송(NTSC)을 수신하고, 튜너를 통해 신호를 받아 CRT(음극선관)에 이미지를 표시함
     * TV에는 보조 입력(AUX)이 있으며, 기본 TV 세트에는 비디오 신호를 전달하는 컴포지트 커넥터(노란색)와 스테레오 오디오 신호를 전달하는 전용 잭(흰색 및 빨간색)이 있음

      CRT의 작동 원리

     * CRT는 15kHz로 작동하며 초당 약 15,000개의 선을 그림
     * CRT 내부에는 세 개의 전자포가 있으며, 전자포는 항상 정면으로 전자를 발사하고, 두 개의 자석 세트(수직 및 수평)가 전자를 위아래 및 좌우로 이동시킴
     * CRT에는 픽셀이 없으며, 전자포에서 발사된 전자는 항상 올바른 색상 스트립에 도달함

      CRT 제어 방법

     * CRT는 빨강, 초록, 파랑 신호를 각각의 전자포에 연결하여 소비함
     * 동기화 신호(HSYNC 및 VSYNC)는 하나의 흰색 와이어를 통해 전달되며, 이를 합성 동기화(CSYNC)라고 함
     * CRT는 신호를 소비하고 전자포를 동기화하려고 시도함

      CRT가 이미지를 그리는 방법

     * CRT는 왼쪽에서 오른쪽으로 선을 그림
     * HSYNC 이벤트를 받으면 화면의 왼쪽(X=0)으로 돌아가고, VSYNC 이벤트를 받으면 화면의 맨 위(Y=0)로 돌아감
     * CRT는 오른쪽으로 이동하면서 아래로 기울어지며 선을 그림

      CRT 이해의 핵심

     * CRT의 핵심은 전자포가 화면의 오른쪽으로 이동하면서 아래로 기울어지는 것을 이해하는 것임
     * VSYNC가 마지막 HSYNC와 동시에 발생하면 선이 항상 화면의 동일한 위치에 그려짐
     * VSYNC가 두 HSYNC 사이에 발생하면 선이 교차하여 그려짐

      선 내부의 내용

     * CRT는 선을 그릴 때는 디지털이지만, 선 내부의 내용은 아날로그임
     * 세 개의 전자포는 RGB 와이어에 직접 연결되어 있으며, 시스템은 색상 신호를 자유롭게 변경할 수 있음

      기존 시스템 처리

     * SNES 설계자는 CRT가 처리할 수 있는 신호를 제공해야 했음
     * NTSC 신호 사양을 준수해야 했음
     * 4:3 화면 비율, 필드당 262.5개의 선, 선당 341.25개의 점, 필드 주파수 59.94Hz

      닌텐도 엔지니어 되기

     * CRT가 작동하는 방식을 이해한 후, 비디오 시스템을 설계해야 했음
     * 262개의 선을 사용하여 프로그레시브 모드를 만들고, 59.94Hz의 프레임 속도를 목표로 함
     * 350개의 점을 사용하여 4:3 화면 비율을 맞추고, 5,496,498Hz의 도트 클럭이 필요함

      문제 해결

     * 5,496,498Hz의 도트 클럭을 사용할 수 없었음
     * 마스터 오실레이터를 사용하여 서브 시스템이 분주기를 통해 사용해야 했음
     * 오버스캔 문제를 해결해야 했음

      오버스캔 도입

     * 전자포가 수평 또는 수직으로 리셋될 때 전자를 계속 발사하면 가시적인 아티팩트가 발생함
     * TV는 화면 영역을 오버스캔하여 화면이 약간 더 크게 표시됨
     * VSYNC 및 HSYNC 후에 전자포를 멈추는 시간이 필요함

      SNES 수직 해상도 선택

     * 경쟁 시스템은 224개의 가시적인 선을 사용함
     * 닌텐도는 262개의 선을 224개의 가시적인 선과 38개의 빈 선으로 나눔

      SNES 수평 해상도 선택

     * 262개의 선을 사용하고, 21.47727MHz의 마스터 클럭을 사용하여 5.3693175MHz의 도트 클럭을 얻음
     * 341개의 점을 사용하여 60.098Hz의 프레임 속도를 얻음

      SNES 수평 오버스캔 선택

     * 341개의 점 중 256개의 가시적인 점을 사용하고, 85개의 점을 HBLANK로 사용함
     * 화면 비율은 8:7로 약간의 왜곡이 발생함

      고해상도 모드: 인터레이싱

     * 수직 해상도를 448개의 선으로 두 배로 늘릴 수 있음
     * 수평 해상도를 두 배로 늘리는 것은 어려움

      PAL 대 NTSC

     * 유럽에서는 NTSC 대신 PAL을 사용하고, 프랑스에서는 SECAM을 사용함
     * PAL은 50Hz의 프레임 속도와 필드당 312.5개의 선을 사용함
     * PAL 버전의 SNES는 17.7344750MHz의 마스터 클럭을 사용함
     * 가시적인 해상도는 224개의 선과 256개의 점을 사용하고, 프레임 속도는 50.00697891Hz임

      출력

     * SNES는 CRT 신호를 컴포지트 및 S-Video로 변환함
     * AV 커넥터를 통해 순수 ""RGB/CSync"" 신호, ""Composite"" 신호, 및 S-Video 신호를 제공함

    GN⁺의 정리

     * 이 글은 슈퍼 닌텐도 비디오 시스템의 설계 과정을 설명하며, CRT의 작동 원리와 신호 처리 방식을 다룸
     * CRT의 동작 방식과 신호 처리에 대한 이해를 통해 SNES 비디오 시스템의 설계 결정을 설명함
     * 이 글은 비디오 게임 콘솔의 하드웨어 설계에 관심이 있는 사람들에게 유익하며, CRT 기술의 역사와 작동 원리를 이해하는 데 도움이 됨
     * 비슷한 기능을 가진 다른 프로젝트로는 Sega Genesis와 Neo-Geo AES가 있음

        Hacker News 의견

     * 224는 16으로 나누어 떨어지는 숫자라서 그래픽 렌더링 파이프라인 타일맵과 잘 맞음
          + CGA/EGA/VGA는 모두 320x200 모드를 가졌음
          + NES는 256x224였고, SNES도 마찬가지였음
          + Pac-man은 아케이드에서 288x224였음
          + PC에서 Pacman 클론은 항상 이상하게 보였음
          + 기계의 세부 사항을 배우고 나서야 이해하게 되었음
          + 픽셀이 PC 해상도에서 정사각형이 아님
          + Pacman 포트나 클론을 보면 세계 크기, 타일 크기, 스프라이트 크기를 알아내려고 했음
     * 59.94Hz는 이상한 숫자임
          + 북미와 몇몇 다른 지역은 60Hz 전력망을 사용함
     * 8:7 아트워크 비율은 다른 플랫폼으로 포팅된 SFC/SNES 게임에서 볼 수 있음
          + PSX/Saturn/PC 버전은 원본 아트를 유지하고 4:3으로 패딩을 추가함
          + Saturn 버전의 스크린샷을 보면 모든 것이 약간 너무 날씬해 보임
     * 유럽 게임은 50.00697891Hz에서 VSYNC가 발생하여 게임이 의도보다 17% 느리게 실행됨
          + Sonic the Hedgehog를 Mega Drive에서 처음 플레이했을 때 실망했음
          + NTSC와 PAL의 속도 차이를 유튜브를 통해 알게 되었음
          + 음악도 PAL에서 끔찍하게 들림
          + SNES의 DooM은 NTSC 버전이 더 큰 화면을 가졌음
          + NES에서 Punch-Out을 잘했지만, 미국에서 경쟁했다면 첫 라운드에서 패배했을 것임
     * TFA에 오타가 있음; 8:6 비율은 4:3과 같음
          + RF 출력을 사용하여 SNES와 TV 안테나를 전환했음
     * 256x224 (8:7) 출력 해상도가 4:3 이미지로 확장됨
          + SNES의 도트 속도는 ATSC 표준의 정사각형 픽셀 속도보다 느림
          + 픽셀이 가로로 8/7로 확장되어 8:7 해상도가 64:49로 확장됨
          + 224*(4/3) = 298 가시 도트가 됨
          + 224*(7/6) = 261.33... 가시 도트가 더 가까움
     * CRT 외관을 정확하게 시뮬레이션하는 에뮬레이터가 있는지 궁금함
          + GPU 셰이더로 성능적으로 가능할 것임
     * 이로 인해 상징적인 게임 디자인이 어떻게 이루어졌는지에 대한 통찰을 기대했음
          + SNES를 사랑했지만 부모님을 설득하지 못했음
          + 글 작성에 감사함. 매우 흥미로웠음
"
"https://news.hada.io/topic?id=16094","4분 만에 40억 년 – GPU로 세계 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      4분 만에 40억 년 – GPU로 세계 시뮬레이션

GPU에서 세계 시뮬레이션

  40억 년을 4분 만에

     * 이 글은 GLSL 프래그먼트 셰이더로 작성된 절차적 지구 시뮬레이션 구현에 대해 다룸
     * 지구와 유사한 행성의 전체 역사를 몇 분 만에 시뮬레이션하며, 초당 60프레임으로 업데이트됨

  원시 행성

     * 45억 년 전, 용암 덩어리로 시작된 이야기
     * 초기 지구는 소행성 충돌로 인해 붉고 뜨거운 원시 행성이었음
     * 절차적으로 생성된 지형 맵을 통해 지형의 높이를 계산함
     * 다양한 크기의 소행성 충돌구를 생성하고, 이를 통해 지형의 높이를 결정함
     * 소행성 충돌구는 3D 그리드에서 생성되며, 해시 함수를 사용해 불규칙성을 부여함
     * 최종적으로 생성된 높이 맵은 초기 지구의 모습을 재현함

  판 구조론

     * 산맥, 해구, 대륙 지형을 형성하기 위해 판 구조론 모델을 사용함
     * 초기 속도로 판의 시드 위치를 무작위로 생성하고, 시간이 지남에 따라 판이 성장함
     * 판의 경계에서 충돌이 발생하면 지형의 높이가 증가함
     * 이 충돌은 열 침식 모델을 통해 주변 픽셀로 확산됨

  수리 침식

     * 자연 지형의 거친 모습은 주로 강 유역의 형성에 의해 결정됨
     * 저해상도 지형 맵에서도 강을 시뮬레이션할 수 있는 모델을 사용함
     * 각 픽셀은 주변 8개의 픽셀을 검사하여 가장 큰 경사 방향으로 물이 흐름
     * 침식은 스트림 파워 법칙에 의해 구동됨
     * 물의 흐름과 침식의 상호작용으로 자연스러운 강 유역이 형성됨

  전 지구 기후

     * 기후 시스템 시뮬레이션은 평균 해수면 기압(MSLP) 맵을 기반으로 함
     * MSLP 맵은 육지와 해양의 위치 및 위도의 영향을 받음
     * 계절 변화에 따라 기후 패턴이 변하도록 MSLP 맵을 조정함
     * MSLP를 기반으로 바람과 온도를 생성함
     * 바람은 고기압에서 저기압으로 이동하며, 코리올리 효과를 고려함
     * 강수량은 바람 벡터 필드를 통해 해양에서 육지로 이동함

  생명

     * 기후는 행성의 생명 분포에 영향을 미침
     * 강수 패턴과 온도 변화는 식물 성장 속도를 결정함
     * 계절 변화에 따라 초식동물과 포식동물이 이동함
     * Lotka-Volterra 확산 모델을 사용해 이러한 동적 변화를 시뮬레이션함

  인류

     * 초기 지구의 서막이 끝나고, 인류가 행성 표면을 식민지화함
     * 화석 연료를 태우며 대기 중에 탄소를 방출함
     * 수백 년 동안 인류는 모든 화석 연료 자원을 소모하고, 대기 중에 5조 톤의 탄소를 방출함
     * 이로 인해 온실 효과가 강화되고, 지구 평균 온도가 약 10도 상승함
     * 적도 주변의 넓은 지역이 극한 온도로 인해 사람이 살 수 없게 됨

GN⁺의 정리

     * 이 글은 절차적 지구 시뮬레이션의 구현 과정을 상세히 설명함
     * GLSL 프래그먼트 셰이더를 사용해 지형, 판 구조론, 수리 침식, 기후, 생명 등을 시뮬레이션함
     * 인류의 활동이 지구 환경에 미치는 영향을 시뮬레이션하여 경각심을 일깨움
     * 유사한 기능을 가진 프로젝트로는 ""SimEarth""와 ""Universe Sandbox""가 추천됨

        Hacker News 의견

     * ""I don't know, Timmy, being God is a big responsibility""라는 단편 소설이 세계 시뮬레이션 주제를 다루고 있음
     * 문명에 야간 조명이 있으면 화석 연료를 모두 태워 사막화된다는 가정은 우리의 문명 궤적에만 기반한 것임
          + 핵전쟁, 청정 융합 개발, 전염병, 외계 행성 침략 등 다른 가능성도 있음
          + 온도 상승이 건조함과 동일시되고 추가 CO2가 식물에 미치는 영향이 고려되지 않음
     * 1996/1997년에 판 구조 이동, 온도, 고도, 강수량을 시뮬레이션하는 CD-ROM 게임을 개발했음
          + 28년 동안 컴퓨팅 하드웨어와 소프트웨어의 발전이 놀라움
     * ""Permutation City""라는 하드 SF 책이 이 주제와 관련이 깊음
          + 이 글의 제목을 읽을 때 꿈을 꾸는 듯한 느낌을 받았음
     * 대학에서 에너지 정책 분석 수업에서 MIT에서 개발한 EPPA 모델을 사용해 에너지 저장 비용을 10배 줄이는 등의 시뮬레이션을 했음
          + 매우 재미있었지만 직장에서 비슷한 일을 찾지 못했음
     * 시뮬레이션에서 일부 세부 사항이 생략되었음을 언급함
     * 왜 프래그먼트 셰이더만 사용하는지 의문을 가짐
          + 높이 맵을 위한 버텍스 셰이더도 사용하면 표면까지 확대할 수 있음
     * Shadertoy 예제가 페이지에서 0.6 FPS로 재생되지만 Shadertoy 웹사이트에서는 60 FPS로 잘 재생됨
     * 가끔 시뮬레이션된 우주에서 사는 것이 어떤 느낌일지 궁금해함
     * 전체 비디오에 동반된 음악이 익숙했지만 출처를 알 수 없었음
          + AI가 생성한 음악일 가능성도 있음
"
"https://news.hada.io/topic?id=16073","Claude로 코드리뷰 경험 개선하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Claude로 코드리뷰 경험 개선하기

    1. AI(Claude)를 활용한 코드리뷰 경험 개선
          + 기능적 문제와 감정적 문제를 구분하여 접근
          + 기능적 문제는 AI에게 위임하여 해결
          + 감정적 문제(의견 전달, 피드백 수용 등)에 더 집중할 수 있음
          + pre-commit 훅을 활용해 자동화된 코드리뷰 프로세스 구축
               o 변경 사항을 Claude에게 전송하고 리뷰 내용 받기
               o 필요 시 코드 수정 후 커밋 진행
    2. Claude 프롬프트 정확도 향상 방법
          + XML 태그를 활용해 프롬프트 구조화 및 맥락 제공
          + 태그를 통해 요청 내용, 배경 정보, 응답 형식 등을 명시
    3. AI 활용을 통한 생산성 향상 및 시간 활용
          + 기능적 문제 해결로 확보된 시간을 팀 관리, 소통 등에 투자
          + 팀 동기부여, 복잡한 관계 관리 등 감정적 문제 해결에 집중

   AI가 상황에 맞지 않는 엉뚱한 개선사항을 주고 그걸 커밋하게 되는 경우에는 본래 의도했던 기능적 문제를 줄이는 것과 반대의 효과가 나타날 것 같은데 그런 경우에는 어떻게 대응해야 할까요? 그냥 LLM의 한계라 수용하고 넘어가야 하는 건지 궁금하네요

   말씀하신 것처럼 당장은 LLM의 한계 때문에 원하는 결과가 나오지 않을 수 있고, 그래서 프롬프트 엔지니어링이나 파인튜닝을 하면서 문제를 해결해보려는 것 같습니다 ㅎㅎ
"
"https://news.hada.io/topic?id=16108","홈브루 감사 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               홈브루 감사 보고서

    Homebrew 감사

     * Homebrew 감사 개요
          + Homebrew/brew 및 세 개의 관련 저장소를 포함한 Homebrew의 보안 관련 측면을 감사함
          + 발견된 문제는 치명적이지 않지만, 공격자가 예기치 않은 시점에 실행 가능한 코드를 로드하여 Homebrew의 무결성을 저해할 수 있음
          + Open Tech Fund의 후원으로 수행됨

    Homebrew

     * Homebrew 소개
          + macOS 및 Linux용 패키지 관리자
          + 소프트웨어 개발자들에게 널리 사용되며, 수백만 건의 패키지 설치를 처리함
          + Golang, Node.js, OpenSSL 등의 중요한 패키지를 포함하여, Homebrew의 보안이 전체 소프트웨어 생태계의 보안에 중요함
     * Homebrew의 역사
          + 2009년 시작된 이후 여러 아키텍처 변경을 겪음
          + 바이너리 빌드(병)를 기본 설치 메커니즘으로 도입하여 로컬 소스 빌드를 대체함
          + CI/CD를 통해 빌드의 무결성을 유지함

    감사 범위

     * 감사 질문
          + 로컬 액터가 brew install 없이 공식 DSL을 실행할 수 있는지
          + 로컬 액터가 brew tap만으로 공식 DSL을 평가할 수 있는지
          + 네임스페이스 혼동이나 충돌을 유발할 수 있는지
          + 로컬로 설치된 공식이 Homebrew의 빌드 격리 메커니즘을 우회할 수 있는지
          + 낮은 권한의 CI/CD 액터가 높은 권한으로 전환할 수 있는지
          + 낮은 권한의 CI/CD 액터가 병 빌드를 오염시킬 수 있는지
          + 낮은 권한의 CI/CD 액터가 CI/CD에서 지속성을 유지할 수 있는지

    주요 발견 사항

      brew

     * 주요 발견 사항
          + 공식이 문자열 삽입을 통해 샌드박스를 탈출할 수 있음
          + 충돌이 발생하기 쉬운 해시 함수(MD5)를 사용하여 런타임 혼동을 유발할 수 있음
          + 공식이 명시되지 않은 네트워크 리소스를 빌드에 포함할 수 있음
          + 소켓 피벗을 통해 샌드박스를 탈출할 수 있음
          + sudo 토큰을 통해 권한 상승을 수행할 수 있음
          + 비로컬 URL에서 공식을 설치할 수 있음

      Homebrew의 CI/CD

     * 주요 발견 사항
          + pull_request_target 트리거를 사용하여 서드파티 PR이 Homebrew의 상위 저장소에서 코드를 실행할 수 있음
          + workflow_dispatch 입력을 통해 셸 삽입이 가능함
          + 아카이브 추출 중 샌드박싱/격리가 부족하여 높은 권한으로 전환할 수 있음
          + 비로컬 URL에서 공식을 설치하여 임의 코드 실행을 유도할 수 있음

    주요 시사점

     * 패키지 관리 생태계 감사의 도전
          + 패키지 관리 도구는 설계상 임의의 서드파티 코드를 설치하고 실행함
          + Homebrew와 같은 패키징 생태계에서는 패키지 형식(공식)이 자체적으로 실행 가능한 코드임
     * 감사 협력
          + Homebrew 유지보수자 및 Homebrew PLC와 긴밀히 협력함
          + Homebrew의 보안 관리자 Patrick Linnane에게 감사의 뜻을 전함

    GN⁺의 정리

     * Homebrew는 macOS 및 Linux에서 널리 사용되는 패키지 관리자임
     * 감사 결과, 치명적이지는 않지만 보안 문제를 발견함
     * Homebrew의 보안은 전체 소프트웨어 생태계의 보안에 중요함
     * 패키지 관리 도구의 특성상 임의의 서드파티 코드를 실행할 수 있어 보안 감사가 중요함
     * 유사한 기능을 가진 패키지 관리 도구로는 apt, yum 등이 있음
"
"https://news.hada.io/topic?id=16059","넷플릭스 게임의 두 번째 시즌: 도전, 변화, 그리고 앞으로의 길","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  넷플릭스 게임의 두 번째 시즌: 도전, 변화, 그리고 앞으로의 길

     * Netflix는 2022년에 게임 산업에서 ""최고""의 비디오 게임 서비스를 갖는 것을 목표로 하는 대담한 발표를 하며 게임 시장에 진출했음
     * 2년 후 Netflix는 게임 개발과 퍼블리싱 조직을 구축하고, 여러 게임 스튜디오를 인수하며, 100개 이상의 게임 카탈로그를 구축하는 데 엄청난 10억 달러를 투자했음
     * Netflix Games의 전 리더 Mike Verdu는 확실한 기반을 구축했고, 거대 기업이 새로운 사업으로 빠르게 움직일 수 있었던 것이 인상적임
     * Mike Verdu가 영입한 인재들의 수준과 그가 구축한 문화가 가장 인상적임. 동료들은 Netflix Games를 그들이 일했던 최고의 회사라고 칭찬했음
     * 높은 보상, 자율성, 실행을 위한 자원, 결과에 대한 완전한 책임 등의 조합이 중요한 역할을 했음
     * Netflix Games의 사업 전략에 대한 건설적인 비판에도 불구하고, Mike Verdu와 그의 리더십 팀은 세계 최고 수준의 조직 구축자임

당면 과제와 미래 전망

     * 그러나 달성한 것이 초대담한 목표를 충족시키지는 못한 것 같음. 오늘날 Netflix를 업계 최고의 비디오 게임 서비스로 꼽기는 어려움
     * 게임 부문의 부진한 성과에 대해 공동 CEO Greg Peters는 2023년 말에 언급했음. 새로운 장르나 지역 출시와 비슷한 궤적이며, 장기적인 엔터테인먼트 가치를 구축할 엄청난 기회가 있다고 봄
     * Mike Verdu가 새로운 역할로 이동한다고 발표되면서, 후임자가 3가지 핵심 문제를 해결하고 설득력 있는 전략을 수립할 것으로 예상됨

Netflix Games의 여정과 교훈

     * 세계 최고 수준의 조직과 문화를 구축했지만, 전략은 없고 강력한 비전만 있었던 것 같음. 이는 무작위적이고 반응적인 행동으로 이어져 Netflix Games가 비전을 달성하지 못하게 했음
     * Netflix는 2021년에 게임을 진지하게 한다고 발표하면서 ""게임은 구독자들이 좋아하는 쇼의 시즌 사이에 참여를 유지하는 전략""이라고 말했음
     * 현재까지 Netflix Games는 빈티지 PC 게임과 모바일 게임의 독점 퍼블리싱 권리를 구매하고, 자체 IP로 새로운 게임을 개발했음. 게임에서 가능한 마이크로트랜잭션을 제거하고 앱스토어에 (재)출시하여 Netflix 구독자만 이용할 수 있게 했음
     * 출시된 대량의 게임들은 무작위적으로 보임. Too Hot to Handle이나 Netflix Stories 같은 타이틀은 적합하지만 Townsmen, Terranil Hades, Into the Breach 같은 핵심 PC 게임은 어울리지 않아 보임. 포팅된 PC 게임 중 몇 개는 사용자 경험이 좋지 않아 품질 관리가 카탈로그 규모 확장에 밀린 것으로 보임
     * Netflix Games의 카탈로그는 현재까지 총 3억 2천 6백만 건의 설치를 기록했음. 타이틀당 평균 310만 건, 중앙값 130만 건의 설치임. GTA 3개 타이틀을 제외하면 평균 270만 건임
     * 100개 게임을 출시하는 것 외에도 회사는 4개의 게임 스튜디오를 인수하고 2개의 스튜디오를 새로 설립했음

Apple Arcade와의 비교

     * Netflix Games는 Apple Arcade보다 2년 늦게 출시되었지만, 더 약한 콘텐츠, 직접적인 수익화 부재, Netflix IP 활용 미비, 열등한 유통 모델을 가지고 있음
     * 많은 면에서 Netflix Games는 아쉽게도 Apple Arcade의 약화된 버전임. 품질이 낮고, 오리지널 게임이 거의 없으며, 유통 채널이 작고, 선택할 수 있는 게임이 적음. 직접적인 수익 창출도 없음
     * Netflix Games가 Apple Arcade로부터 배운 바가 적고 같은 궤적을 밟고 있는 것이 혼란스러움. Apple Arcade는 3년 만에 개편되었고, 양보다 질에 초점을 맞추지 않아 진짜 참여를 이끄는 것을 오해했기 때문에 Apple One과 묶였음. Netflix Games도 3년 차에 같은 근본적인 이유로 개편에 직면함

새로운 보스의 과제

     * 조직을 책임지는 사람은 성공으로 선회할 수 있는 좋은 위치에 있음. 팀과 문화는 최고 수준임. 기업은 여전히 게임에 전념하고 있음. 구독자 기반이 성장했고 주가도 상승했음. 이 모든 것이 새 보스에게 건전한 전략을 세우고 실행할 시간과 자원을 제공함

    문제 1: 상품-시장 적합성(PMF) 부족

     * 제품-시장 적합성이 부족한 이유는 더 근본적인 문제라고 봄. Netflix Games는 Apple Arcade와 같은 오류를 범하고 있음. 즉, 인앱 구매나 광고가 없으면 모바일 게임이 더 나아질 것이라고 가정함
     * 그들은 무료 게임이 참여를 통해 수익을 창출하도록 설계되었다는 점을 이해하지 못함. 따라서 다른 모델로 만들어진 게임은 언제나 무료 게임에 뒤질 것임
     * 쉽게 말해, Fortnite, League of Legends, Candy Crush, Clash of Clans에서 수익화 요소를 제거한다고 해서 게임이 더 좋아지지는 않음

    문제 2: 투자 수익률

     * 10억 달러를 게임에 투자한 후 Netflix는 100개 이상의 게임을 출시했고(거의 모두 이전에 같은 플랫폼이나 다른 플랫폼에서 출시된 게임들임), 약 3억 3천만 건의 다운로드를 달성했지만, 투자에서 대략 0달러의 수익을 올렸음
     * Netflix Games가 수익과 관련이 없다고 말하는 사람도 있겠지만 그건 사실이 아님. 회사는 이 전략이 미래 수익 확장을 위한 씨앗을 심는 것이라고 분명히 밝혔음
     * 결국 모든 비즈니스에는 두 가지 성장 경로만 있음. 수익을 늘리거나 수익성을 높이는 것임. 품질이나 접근성 개선, 브랜드와 IP에 대한 투자, 추가 서비스 도입은 결국 수익(고객이 지불하는 금액)이나 수익성(모든 비용을 뺀 후 얻는 금액)을 높이기 위한 것임
     * 그러나 Netflix Games가 시즌 사이에 사용자 참여를 유도하지 못하고, 새로운 고객을 유치하지 못하며, 직접적인 수익 기여를 하지 않는다면 투자에 대한 수익을 내고 있지 않은 것임

    문제 3: 사업 타당성

     * Netflix Games는 천재적인 게임 전문가들이 최고의 연봉을 받으면서 게임이 비즈니스에 미치는 영향을 고민하지 않고 재미있고 보람찬 게임을 만드는 곳처럼 보임. 지속 가능해 보이지는 않지만 어디에 지원해야 할지 모르겠음
     * 물론 게임은 즐겁고 보람 있어야 함. 그러나 최종 결과는 수백만 명의 플레이어가 이 게임에 몇 년 동안 참여하는 것이어야 함. 그들이 영입한 인재들이라면 어떤 비즈니스 목표도 달성할 수 있어야 함. 새 보스는 사업부가 원하는 결과에 부합하는 목표를 설정하기만 하면 됨
     * 인디 개발사든 대기업이든 수익성이나 매출은 플레이어에게 즐겁고 보람찬 경험을 제공한 결과여야 함. 둘 다 창출하지 못한다면 다른 사람의 자금에 의존하고 있는 것이고, 이는 자신의 운명을 통제하지 못하고 있다는 의미임
     * 성공하는 것만이 Netflix Games가 오래 지속될 수 있는 유일한 방법

개편과 미래 전망

     * Netflix Games는 게임 업계를 제패하기 위해 대담한 여정을 시작했지만 그 길은 순탄치 않았음. $1B(1.3조원)라는 엄청난 돈을 투자했음에도 원대한 야망을 이루는 데 어려움을 겪었음. 전임 리더는 탄탄한 기반을 구축했지만 의도한 대로 시장을 장악하지는 못했음. 새 리더십하에 전략적 개편을 통해 흐름을 바꾸기를 희망함
     * 2022년 Netflix 공동 창업자이자 이사회 의장인 Reed Hastings는 인터뷰에서 회사가 장기적으로 인터랙티브 콘텐츠에 어떻게 접근할 것인지 묻는 질문에 간단히 답했음. ""우리는 그 분야에서 차별화되고 훌륭해야 합니다. 그냥 참여하는 것은 의미가 없습니다.""라고 말했음
     * Hastings는 Netflix가 현재 업계의 강자들과 경쟁할 수 있는 게임 서비스가 되어야 한다는 생각을 피력했음. ""우리는 성장하고 있고 그렇게 되려고 하는 것은 아닙니다. 그러나 우리는 가장 훌륭한 콘텐츠로 구독자들을 기쁘게 해야 합니다.""
     * 2024년 Netflix Games는 차별화되지 않고, 최고 수준이 아니며, 구독자들에게 흥미롭지 않음. Netflix의 2억 4700만 구독자 중 1% 미만이 매일 게임을 하는 것으로 CBNC는 보도
     * Netflix의 성공 문화는 최고의 인재를 채용하고, 시장에서 제공할 수 있는 최고의 보상을 제공하며, 그들에게 필요한 일을 할 수 있는 자율성을 부여하고, 실패하거나 더 이상 필요하지 않으면 그들을 내보내는 데 초점을 맞춤
     * Netflix Games가 비전을 실현하지 못했기 때문에 올해 안에 구조조정이 있을 것으로 예상됨. Netflix Games의 새로운 수장은 큰 변화가 다가오고 있음을 분명히 보여줌
     * Netflix가 게임을 완전히 중단할 가능성은 낮아 보임. 그들에게 전략적 초점인 것 같기 때문임. 그러나 회사가 노력을 집중함에 따라 일부 스튜디오는 문을 닫을 가능성이 높음. 조직도 그 결과 축소될 것으로 예상됨. 더 적은 오리지널 게임이나 Netflix IP를 활용한 더 나은 품질의 게임이 미래의 모습일 것임
     * 그러나 나는 여전히 Netflix Games에 대해 낙관적임. 방향 수정이 절실히 필요할 뿐. 조직의 인재 수준, 문화, 자원을 감안할 때 장래에 성공할 것이라고 믿음
     * 넷플릭스 1.0이 비즈니스 목표를 달성하지는 못했지만, 차세대 리더들이 넷플릭스를 비즈니스 성공으로 이끌 수 있는 놀라운 기반을 마련한 것은 분명함
     * 그럼에도 불구하고 업계가 처한 상황과 모든 게임 구독 플랫폼이 실패했다는 사실을 고려하면 3년 이내에 넷플릭스는 라이선스 모델로 다시 전환할 것으로 예상. 하지만 이는 3장이고 이제 막 2장을 시작했을 뿐

   넷플릭스 게임에 지인들이 많고 넷플릭스 게임의 문제점을 알고 있으니 차기 CEO가 되고 싶기라도 한 걸까요? 아니면 넷플릭스 게임에 컨설팅을 해 주고 싶은 건지.. 굉장히 논조가 이상한 글입니다

     Nevertheless, given where the industry stands and the fact that every single games subscription platform has failed my prediction is that within 3 years Netflix will pivot back to a licensing model. But that’s chapter three, and we’re just beginning the second chapter.

   문맥에서 2장을 시작하는 주체가 넷플릭스 게임인 것과 we라는 표현을 감안하면, 이해관계가 전혀 없는 제3자의 논평이라고 보기에는 무리가 있어 보입니다.

   좋은 제품없이 최고의 팀을 가지고 있다라... 게이머들이 뭘 원하는지 본질적으로 이해하지 못하는 팀이 최고의 팀이라고 절대 말할 수 없을 것 같네요.
"
"https://news.hada.io/topic?id=16016","Alexa는 수백만 가구에 있지만 Amazon은 수십억 달러를 손해보고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Alexa는 수백만 가구에 있지만 Amazon은 수십억 달러를 손해보고 있음

     * 아마존의 Echo 스피커는 널리 판매되었지만 막대한 손실을 초래하는, 회사들이 원하지 않는 형태의 사업 사례임
     * CEO 앤디 재시는 이 문제를 해결하고 이를 초래한 아마존의 회계 전술에서 벗어나려 하고 있음

에코의 수익성 문제

     * 2014년 알렉사 음성 비서가 탑재된 에코 스마트 홈 기기를 출시할 때, 아마존은 질레트의 전략을 차용함
     * 많은 고객들이 알렉사 지원 기기를 보유하고 있지만, 에코를 통해 아마존에서 상품을 구매하는 아이디어는 실현되지 않음
     * 고객들은 에코를 주로 알람 설정, 날씨 확인 등 무료 앱에 사용함
     * 그 결과 아마존은 에코와 다른 기기 사업에서 수십억 달러의 손실을 봄

제프 베조스 시대의 잘못된 판단

     * 현 CEO 앤디 재시가 바꾸려 하는 건, 창업자 제프 베조스 하에서 아마존이 한 중대한 판단 착오임
     * 손실을 만회하기 위해 아마존은 이달 중 유료 알렉사 서비스를 출시할 예정이지만, 일부 엔지니어들은 성공 가능성에 우려를 표함

""Downstream Impact"" 지표의 문제점

     * 베조스 시대에 만들어진 모호한 지표인 ""Downstream Impact""(DSI)가 에코 등의 기기가 오랫동안 큰 손실을 초래하면서도 거의 영향을 받지 않은 이유를 설명해줌
     * DSI는 고객이 제품이나 서비스를 구매한 후 아마존 생태계 내에서 지출하는 금액을 기준으로 재무적 가치를 할당함
     * 킨들 등 일부 사례에선 DSI 모델이 잘 작동했지만, 특히 에코 기기의 경우엔 제대로 작동하지 않음
     * DSI는 내부적으로 사용되는 추정치이며, 특별히 과학적이거나 정확하지 않음
     * 사업부서 간에 동일한 수익을 중복 계산하는 문제도 있었음

제프 베조스의 에코 지원

     * 기기 사업은 베조스의 애착 프로젝트였고, 그는 막대한 손실에도 불구하고 투자를 지속하고 인력을 확대함
     * 2018년과 2019년 기기 사업 손실은 각각 50억 달러, 60억 달러 이상이었음
     * 베조스의 유명한 ""빨리 실패하라"" 격언에도 불구하고 손실은 수년간 누적됨

앤디 재시의 수익성 검토

     * 재시는 CEO가 된 후 곧바로 아마존 사업부문별 수익성 검토에 착수함
     * 수익성이 불분명한 신제품 개발팀은 해체되었고, 기존 제품팀은 DSI에 의존하지 않고 수익원을 개발하라는 지시를 받음
     * 2022년 10월, 아마존은 적자를 면치 못한 화상통화 기기 Amazon Glow를 출시 1년 만에 단종함

알렉사 유료화 계획

     * 재시의 팀은 알렉사와 에코 기기에 주목해 수익화 방안을 모색하도록 했음
     * ""Banyan""이라는 코드명의 프로젝트를 통해 ""Remarkable Alexa""라는 유료 알렉사 서비스를 개발 중
     * 새로운 기술 스택을 기반으로 하며 생성형 AI를 더 많이 활용할 예정
     * 그러나 일부 팀원들은 고객들이 또 다른 유료 구독 서비스를 원할지, 새 알렉사가 지불할 만한 가치가 있는 제품을 제공할 수 있을지 의구심을 표함

GN⁺의 의견

     * 아마존의 에코와 알렉사는 가정에 널리 보급되었지만 수익성 문제로 인해 어려움을 겪고 있음. 음성 비서 시장에서 구글, 애플 등 경쟁사들과의 경쟁도 치열한 상황임
     * DSI와 같은 모호한 내부 지표에 의존하다 보니 사업의 실제 수익성을 제대로 파악하기 어려웠던 것으로 보임. 재시 CEO 체제 하에 엄격한 수익성 기준이 적용되고 있음
     * 유료 알렉사 서비스가 성공하려면 기존 무료 서비스 대비 차별화된 가치를 제공해야 할 것임. 단순히 유료 전환만으로는 고객 이탈을 피하기 어려울 수 있음
     * 아마존 에코의 사례는 혁신적인 제품이라도 수익 모델이 분명치 않으면 지속 가능하기 어렵다는 점을 보여줌. 초기 시장 선점을 위해 저가 전략을 쓰는 것도 장기적으론 부담이 될 수 있음
     * 음성 AI 분야의 기술 발전 속도가 빨라지고 있어, 아마존도 알렉사의 기능을 더욱 강화할 필요가 있음. 동시에 개인정보 보호, 알고리즘 편향성 등의 이슈에 대한 대응책 마련도 요구됨

        Hacker News 의견

     * Amazon이 Alexa를 판매 증대 도구로 구상했으나, 소비자들은 그렇게 행동하지 않음
          + Amazon의 Dash 버튼 실패와 유사한 이유
          + 소비자들은 제품 세부 정보와 가격을 확인하고 싶어함
          + Alexa가 스마트 홈과 어시스턴트 경험에 집중해야 함
          + 현재 기술 수준은 2014년과 비슷함
          + Alexa가 삶에 가치를 더하면 구독료를 지불할 의향이 있음
     * Amazon의 Alexa 조직에서 일했던 경험 공유
          + 조직이 매우 크지만 수익 창출이 적음
          + 여러 프로젝트가 실용성이나 수익성에 의문을 가짐
          + Alexa를 다양한 도메인에 억지로 적용하려 함
          + 서비스 오버헤드가 큼
          + Alexa 조직이 해고에 더 큰 타격을 받은 것에 놀라지 않음
     * AI 스타트업 CEO의 경험
          + Amazon이 기술 세부 정보를 수집하고 복제하려는 경향이 있음
          + Alexa의 M&A 팀이 스타트업 가치를 묻고 비웃음
          + 현재 스타트업 가치는 그때보다 높아졌고, Alexa의 핵심 경험은 변하지 않음
     * Echo가 주로 무료 앱(알람 설정, 날씨 확인)으로 사용됨
          + 전직 고위 직원이 ""스마트 타이머를 만들었다""고 우려
          + Alexa를 타이머로만 사용하는 사람들 많음
     * Alexa 팀의 리더십 교체 필요성
          + 앱과 사용자 경험이 나쁨
          + 스킬 추가 과정이 복잡함
          + 3rd 파티 앱 접근 제한 결정이 단기적임
          + Alexa를 3rd 파티 소프트웨어와 쉽게 통합해야 함
     * 음성/채팅 앱의 수익화 문제
          + LLM 시장이 어떻게 발전할지 궁금해함
          + 소비자 관심은 있지만 주로 기본적인 사용 사례에 그침
          + GH Copilot/Cody와 같은 개발자 중심 워크플로우는 좋은 사용 사례임
     * ""Downstream impact"" 지표의 문제점
          + 여러 프로젝트가 이론적 영향력을 주장하며 기존 수익을 잠식함
          + Alexa 팀이 타이드 팟 주문 가능성을 주장하지만 실제 수익은 변하지 않음
          + Alexa 브랜드 인식이 좋지 않음
     * 최신 open-webui로 Alexa보다 똑똑한 LLM 기반 음성 어시스턴트 사용 가능
          + 스파이 행위 걱정 없음
     * Alexa가 쇼핑 목록에 항목 추가는 가능하지만 삭제는 불가능
          + 사용자 경험이 적대적임을 보여줌
"
"https://news.hada.io/topic?id=16116","`find`와 `mkdir`의 튜링 완전성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        `find`와 `mkdir`의 튜링 완전성

개요

     * GNU의 find와 mkdir 명령어만으로 시스템이 튜링 완전함을 증명하려는 시도
     * sed와 awk 명령어는 튜링 완전함이 잘 알려져 있지만, find와 mkdir의 튜링 완전성에 대한 참고 자료는 없음
     * 증명은 Rule 110을 실행할 수 있음을 보여주는 일반적인 기법을 활용
     * 루프, FizzBuzz, Rule 110의 구현 순서로 설명

구현

  루프 구성

     * 다음 코드는 디렉토리를 재귀적으로 생성하고 무한 루프를 만듦
mkdir x
find x -execdir mkdir x/x \;

     * find x는 x 아래의 파일을 나열하고, x가 나열되면 x/x를 생성
     * 디렉토리 생성 깊이를 제한하려면 -maxdepth 옵션을 사용
mkdir x
find x -maxdepth 3 -execdir mkdir x/x \;

  FizzBuzz

     * find의 -regex 옵션을 사용하여 파일 이름을 필터링하고, 루프와 결합하여 FizzBuzz를 구현
mkdir -p d/x
find d/x -regextype posix-extended -regex 'd(/x){0,29}' -execdir mkdir x/x \;
find d -regextype posix-extended \
-regex 'd((/x){15})+' -printf ""FizzBuzz\n"" -o \
-regex 'd((/x){5})+' -printf ""Buzz\n"" -o \
-regex 'd((/x){3})+' -printf ""Fizz\n"" -o \
-regex 'd(/x)+' -printf ""%d\n""

  Rule 110 구현

     * 루프와 조건 분기를 사용할 수 있게 되면 임의의 프로그램을 작성 가능
     * Rule 110을 구현하여 이를 증명
WIDTH=16
ITER=15
mkdir -p p/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/1
O='(/?1)'
Z='(/?[0p])'
X='(/?[01p])'
W0=""($X{$WIDTH})""
W1=""($X$W0)""
W2=""($X$W1)""
ZERO=""($Z$Z$Z|$O$Z$Z|$O$O$O)""
ONE=""($O$O$Z|$O$Z$O|$Z$O$O|$Z$O$Z|$Z$Z$O)""
find p -regextype posix-extended \
-regex ""$W1$W2{$ITER}"" -fprint /dev/null \
-o -regex ""$W1$W2{0,$ITER}"" \( -execdir mkdir 0/p 1/p \; -o -execdir mkdir 0/p/p 1/p/p \; \) \
-o -regex ""$W2*"" -fprint /dev/null \
-o -regex ""$X*$ZERO$W0"" -execdir mkdir 0/0 1/0 p/0 \; \
-o -regex ""$X*$ONE$W0"" -execdir mkdir 0/1 1/1 p/1 \; \
2> /dev/null
find p -regextype posix-extended \
-regex ""p$W2{0,$ITER}"" -execdir find p -mindepth $WIDTH -maxdepth $WIDTH \;

예상 질문과 답변

     * 파일 경로 길이 제한으로 인해 임의 크기의 오토마타를 실행할 수 없는가?
          + mkdir는 특정 길이 이상의 파일 경로를 전달하면 실패하지만, 위 코드는 이를 피함
          + find는 30000 이상의 경로에서도 작동함
     * 위 코드가 POSIX 사양에 따라 작동이 보장되는가?
          + 아니며, 디렉토리 검색 중 파일이 추가되면 동작이 지정되지 않음
          + 사용된 도구 버전:
find (GNU findutils) 4.8.0
mkdir (GNU coreutils) 8.32
Linux DESKTOP-5JU1LI7 5.15.153.1-microsoft-standard-WSL2 #1 SMP Fri Mar 29 23:14:13 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

GN⁺의 정리

     * find와 mkdir 명령어만으로 튜링 완전성을 증명하려는 시도는 흥미로움
     * Rule 110의 구현을 통해 이를 증명하려는 접근 방식은 창의적임
     * POSIX 사양에 따른 동작 보장은 없지만, GNU 도구에서는 성공적으로 작동함
     * 비슷한 기능을 가진 프로젝트로는 sed와 awk가 있음
"
"https://news.hada.io/topic?id=16051","색도 다이어그램이 그렇게 보이는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          색도 다이어그램이 그렇게 보이는 이유

색도 다이어그램이 왜 그렇게 생겼을까?

     * XYZ 색 공간에 대해 공부하면서 색 이론을 이해하려고 시도함
     * 1931년에 만들어진 XYZ 색 공간은 모든 색 공간의 어머니 같은 존재로 보임
     * XYZ 색 공간을 읽으면서 아래와 같은 이미지가 자주 등장함
     * 이 이미지의 형태와 색상이 어떻게 계산되었는지 궁금해짐
     * 이 질문에 대한 답을 찾기 위해 여러 자료를 탐구함

  색 일치 함수

     * 색 일치 함수는 특정 파장의 강도를 결정하여 눈이 목표 색상을 인식하게 함
     * 빨강, 초록, 파랑에 대한 세 가지 색 일치 함수가 존재함
     * 빨강, 초록, 파랑의 빛의 강도를 조절하여 스펙트럼 색상을 시각적으로 인식하게 함
     * CIE 1931 색 공간은 이러한 RGB 색 일치 함수를 정의함
     * 실험을 통해 사람들이 RGB 빛의 강도를 조절하여 목표 색상과 일치시키는 데이터를 수집함
     * 이 데이터는 순수한 RGB 빛으로는 재현할 수 없는 스펙트럼 색상이 존재함을 보여줌

  XYZ 색 일치 함수 소개

     * XYZ 색 공간은 RGB 색 공간을 행렬로 변환한 것임
     * 이 변환은 선형 변환으로, 동일한 데이터를 약간 변형한 것임
     * XYZ 색 일치 함수는 RGB 색 일치 함수를 변환하여 얻어짐
     * XYZ 색 공간은 모든 색상을 설명하며, 디바이스 독립적인 방식으로 색상 정보를 인코딩함

  색도

     * 색도 다이어그램은 색상의 품질을 객관적으로 지정하는 것임
     * XYZ 값을 사용하여 색도의 x와 y 값을 계산함
     * x와 y 값을 사용하여 xy 색도 다이어그램을 생성함
     * RGB 데이터를 XYZ 공간으로 변환하여 색도를 시각화함

  색상 채우기

     * 색도 다이어그램의 내부를 채우기 위해 각 픽셀에 대해 색상을 계산함
     * x와 y 값을 사용하여 XYZ 값을 생성하고, 이를 sRGB 공간으로 변환함
     * 이 과정에서 많은 유효하지 않은 색상이 생성됨
     * 최적의 Y 값을 찾아 색상을 표현함

  스펙트럼 생성

     * 색 일치 함수를 사용하여 스펙트럼을 생성함
     * XYZ 값을 sRGB로 변환하여 캔버스에 렌더링함
     * p3 와이드 색역을 사용하여 더 많은 색상을 표현할 수 있음

  색도 다이어그램 채우기

     * 색도 다이어그램을 채우기 위해 임의의 색상을 생성하고, 이를 xy 공간에 플롯함
     * 스펙트럼 라인을 생성하여 XYZ 값과 RGB 값을 계산함
     * 이 과정을 통해 색도 다이어그램을 채움

  색상 문제

     * 생성된 색상이 너무 포화되거나 유효하지 않은 경우가 많음
     * RGB 색 일치 함수를 사용하여 색상을 계산하는 방법을 시도함
     * 여전히 유효하지 않은 색상이 존재하지만, 더 나은 결과를 얻음

  형태 탐구

     * 색도 다이어그램의 형태는 XYZ 색 일치 함수에서 유래함
     * 임의의 색 일치 함수를 생성하여 색도 다이어그램의 형태를 실험함
     * 색도 다이어그램의 형태는 눈이 빨강, 초록, 파랑을 인식하는 방식에 따라 결정됨

GN⁺의 정리

     * 이 기사는 색 이론과 색 공간에 대한 깊은 이해를 제공함
     * 색도 다이어그램의 형태와 색상이 어떻게 계산되는지 설명함
     * 색 일치 함수와 XYZ 색 공간의 중요성을 강조함
     * 색상 표현의 한계와 디지털 디스플레이의 색상 문제를 탐구함
     * 색 이론에 관심 있는 사람들에게 유익한 자료임

        Hacker News 의견

     * XYZ 색도 다이어그램의 왜곡된 모양은 실제 데이터와 무관한 것임
          + 색도 다이어그램은 3D 색 공간의 2D 평면 슬라이스로 생각하는 것이 더 자연스러움
          + 등변 삼각형으로 색도 다이어그램을 그리면 색 영역의 실제 모양을 더 명확하게 보여줌
     * 특정 색도 다이어그램은 디스플레이에서 누락된 색상을 잘못 보여줄 수 있음
          + sRGB 빨간색을 요청했을 때 고감도 모니터에서 다른 색상이 나타나는 문제를 경험함
          + 색상 관리에 대해 더 많이 배우게 됨
     * 색상 공간에 대한 흥미로운 탐구가 있음
          + 링크: https://ericportis.com/posts/2024/okay-color-spaces/
     * 색상, 지각, 색 영역에 대한 새로운 아이디어를 얻음
          + 특정 파장의 빛이 치즈 냄새나 곰의 존재를 연상시키는 것처럼 색상도 감각적인 경험일 수 있음
          + 마젠타는 비스펙트럼 색상으로, 뇌가 과부하되지 않도록 다른 색상으로 인식됨
     * XYZ로 시작하는 것이 좋지만, 더 나은 색상 공간이 있음
          + CIE 1976 L',u',v'와 Dolby 연구의 ICtCp가 있음
     * 교육용 색상 공간을 찾고 있음
          + 인간 지각의 실제 특징을 반영하는 색상 공간이 필요함
          + CAM16UCS와 Jzazbz를 사용하여 구현함
     * 음의 빨간색 광원은 색상 일치 과정에서 빨간색을 추가하는 것을 의미함
          + C+R = G+B와 같은 방식으로 음의 빨간색이 발생함
     * Guild의 원본 데이터를 읽고 있음
          + 표 4의 숫자의 의미를 이해하는 데 어려움을 겪고 있음
          + 색상 일치 실험의 비정규화 계수를 찾고자 함
     * 색도 다이어그램을 채우는 방법에 대한 의견
          + Y 값을 선택하고, x, y 좌표를 사용하여 색상을 지정함
          + XYZ 값으로 변환한 후 sRGB 색 공간에 매핑함
     * OKLCH 색상 선택기는 색상을 다른 방식으로 표현함
          + 3D 버전은 색상의 산악 풍경처럼 보임
          + L(밝기), C(채도), H(색상)은 이 산악 풍경의 직교 2D 슬라이스임
          + 3D 색도 다이어그램을 렌더링하는 소프트웨어도 있음
          + 링크: https://youtu.be/FdFpJFSTMVw?t=679
"
"https://news.hada.io/topic?id=16066","200KB로 Windows 복구 환경 및 부팅 가능한 USB 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 200KB로 Windows 복구 환경 및 부팅 가능한 USB 생성기

     * Windows Deployment Image Customization Kit
          + Windows 이미지 배포 도구인 Windows Deployment Image Customization Kit에 대한 설명
     * Mirrors
          + 주요 다운로드 링크
               o https://majorgeeks.com/files/details/…
               o https://softpedia.com/get/System/…
     * Tutorial
          + 튜토리얼 링크
               o https://youtube.com/@windozedev
               o https://learn.microsoft.com/en-us/archive/…

GN⁺의 정리

     * Windows Deployment Image Customization Kit은 Windows 이미지 배포를 위한 네이티브 명령 셸 도구임
     * 이 도구는 Windows PE 복구 배포 환경을 구현하는 방법을 제공함
     * 관련 튜토리얼과 다운로드 링크를 통해 쉽게 접근 가능함
     * 시스템 관리자가 Windows 배포를 효율적으로 관리하는 데 유용함
"
"https://news.hada.io/topic?id=16031","HN에 공개: Haystack – 무한 캔버스에서 코드 탐색 및 편집을 위한 IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN에 공개: Haystack – 무한 캔버스에서 코드 탐색 및 편집을 위한 IDE
"
"https://news.hada.io/topic?id=16036","공산주의자들이 견디지 못한 컴퓨터 천재 Jacek Karpiński (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              공산주의자들이 견디지 못한 컴퓨터 천재 Jacek Karpiński (2017)

기술 및 혁신

  공산주의자들이 견딜 수 없었던 컴퓨터 천재

     * 1970년대 폴란드에서 엔지니어 Jacek Karpiński는 K-202라는 컴퓨터를 개발함
     * 이 컴퓨터는 초당 백만 번의 연산을 수행할 수 있었으며, 서류 가방에 들어갈 정도로 작았음
     * 당시 컴퓨터는 크고 느렸기 때문에 이는 엄청난 성과였음
     * 그러나 공산주의 정권은 이 기기의 생산을 막았음

    초당 백만 번

     * K-202 컴퓨터는 1971년 Poznań 국제 박람회에서 처음 공개됨
     * 이 컴퓨터는 서류 가방에 들어갈 정도로 작았고, 초당 백만 번의 연산을 수행할 수 있었음
     * 가격은 약 5,000달러로, 당시 다른 컴퓨터들보다 훨씬 저렴했음
     * 그러나 2년 후, Karpiński는 공장에서 무장 경비원에 의해 쫓겨났고, 모든 K-202는 폐기됨

    유럽의 지붕에서

     * Jacek Karpiński는 1927년 4월 9일 토리노에서 태어남
     * 그의 부모는 산악인이었고, 그의 아버지는 항공기 디자이너였음
     * Karpiński는 14세에 폴란드 저항군에 합류하여 제2차 세계 대전에 참여함
     * 바르샤바 봉기에서 척추에 총상을 입었지만, 어머니의 도움으로 다시 걸을 수 있게 됨

    해고당함

     * 전쟁 후, Karpiński는 바르샤바 공과대학교를 졸업함
     * 그는 전자공학을 선택했지만, 저항군 출신이라는 이유로 취업에 어려움을 겪음
     * 결국 전자공학 공장에서 일하게 되었고, 폴란드 과학 아카데미에서 다양한 기계를 개발함

    높은 독성

     * 1960년 UNESCO가 주최한 글로벌 기술 인재 대회에서 우승하여 미국에서 공부할 기회를 얻음
     * 미국에서 인공지능 연구에 참여했지만, 폴란드로 돌아가기로 결정함

    불가능함

     * 1968년, Karpiński는 CERN에서 받은 데이터를 처리하기 위해 KAR-65 컴퓨터를 개발함
     * 그는 서류 가방에 들어갈 수 있는 컴퓨터를 만들고자 했지만, 폴란드 군대는 그의 아이디어를 거부함

    친구들의 도움

     * 영국의 친구의 도움으로 그의 아이디어를 영국 전문가들에게 소개함
     * 결국 폴란드로 돌아와 1970년 마이크로컴퓨터 공장을 설립함

    프린터, 카메라, 레이더

     * 1971년, Karpiński와 그의 팀은 K-202 컴퓨터를 개발함
     * 이 컴퓨터는 초당 백만 번의 연산을 수행할 수 있었고, 모듈식으로 설계되어 다양한 장치를 연결할 수 있었음

    차와 함께 던져라

     * K-202는 Poznań 국제 박람회에서 큰 주목을 받았지만, 경쟁사인 Elwro는 그의 성공을 방해하려 함
     * 결국 1973년, Karpiński의 공장은 폐쇄되고, 그는 컴퓨터를 만들 수 없게 됨

    진짜 돼지

     * Karpiński는 농촌으로 이주하여 돼지와 닭을 키우며 생활함
     * 1981년, 그는 스위스로 이주하여 Pen Reader라는 휴대용 스캐너를 개발함
     * 1990년, 공산주의가 붕괴된 후 폴란드로 돌아왔지만, 재정 문제로 인해 성공하지 못함

    확실히 천재

     * Jacek Karpiński는 2010년 2월 21일 사망함
     * 그는 바르샤바 봉기에서의 용기로 세 개의 용기 십자훈장을 받음
     * 그의 기술은 자유로운 폴란드에서 여전히 존재함

  GN⁺의 정리

     * Jacek Karpiński는 폴란드의 혁신적인 컴퓨터 과학자였음
     * 그의 K-202 컴퓨터는 당시 기술 수준을 뛰어넘는 성과였음
     * 그러나 공산주의 정권의 방해로 인해 그의 발명품은 대중화되지 못했음
     * 그의 이야기는 기술 혁신과 정치적 억압의 교차점을 보여줌

        Hacker News 의견

     * 관료들은 IBM 360 기반의 통일된 시스템 표준화를 추진했기 때문에 맞춤형 기계에 관심이 없었음
          + K-202는 나중에 MERA 400으로 발전했으며, 이는 더 성공적이었음
          + 이 기계들은 동기 클럭이 없었고, RC 지연 회로로 사이클을 조절했음
          + CROOK이라는 운영체제가 개발되었으며, 이는 다른 메인프레임 기반 시스템보다 유닉스에 가까웠음
          + 현대 에뮬레이터와 YouTube 채널이 있음
     * Karpiński가 오늘날의 페이징 시스템 사용을 개척했음
          + K-202에 대해 잘 몰랐지만 흥미로웠음
          + 약 230대만 생산되었고 모두 공장에서 파괴되었기 때문에 서방 컴퓨터 디자이너에게 영향을 미쳤는지 의문임
     * 1970년에 마이크로컴퓨터 공장이 설립되었음
          + 폴란드 노동자들이 일했지만 영국 부품과 자금을 사용했음
          + K-202의 성능이 서방 부품 덕분인지 의문임
          + 공산주의자들이 더 안전한 공급망을 선호한 것은 정당했음
     * 미국에서 유사한 Perceptron이 있었으며, 이는 Marvin Minsky에 의해 과소평가되었음
          + 발명가는 사고로 일찍 사망했음
     * Jacek Karpiński는 2020년 <i>History of Computing</i> 팟캐스트에서 다루어졌음
     * K-202는 초당 백만 번의 메모리 읽기/쓰기를 수행했음
          + 메가플롭을 수행한 것은 아님
     * K-202의 매뉴얼이 있음
     * K-202는 나중에 인기를 끈 개인용 컴퓨터보다 빠름
          + 초기 마이크로프로세서는 LSI TTL 디자인보다 느렸음
          + Data General Super Nova와 유사한 속도를 가졌음
          + Datapoint 2200도 흥미로운 컴퓨터였음
     * 좋은 이야기였으며, 전체를 읽어보기를 권장함
          + 공산주의 이론에서 사업 경쟁은 파괴적인 힘으로 간주되었음
          + 소련 공산주의 하에서 제조의 가장 일반적인 측정 기준은 킬로그램 출력이었음
          + 서방 재료와 부품을 수입하는 것은 금지되지 않았지만, 외화 위기 때문에 어려웠음
          + 컴퓨터는 서방의 과잉으로 간주되었음
          + Karpiński는 서방에서 많은 시간을 보냈고 영어를 이해했기 때문에 충격적이었음
          + 직업 금지와 비자 발급은 흔한 방법이었음
     * Julia 언어의 Karpiński와 관련이 있는지 궁금함
"
"https://news.hada.io/topic?id=16068","비합리적 배고픈 판사 효과 재조명 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       비합리적 배고픈 판사 효과 재조명 (2023)

요약

     * 추상
          + Danziger, Levav, Avnaim-Pesso (2011) 연구는 이스라엘 가석방 판결에서 사건이 제시되는 순서가 판결에 미치는 영향을 분석함.
          + 첫 판결에서 마지막 판결로 갈수록 긍정적 판결 확률이 65%에서 거의 0%로 감소하고, 식사 후 다시 65%로 회복됨.
          + 이 현상이 정신적 소모로 인한 것일 수 있다고 추측함.
          + 시뮬레이션 결과, 긍정적 판결이 부정적 판결보다 시간이 오래 걸리기 때문에 순서의 영향이 통계적 인위물로 설명될 수 있음.
     * 서론
          + 다양한 상황에서 사람들은 비합리적인 요소에 의해 판단이 영향을 받음.
          + 법적 판결은 법과 관련된 사실에만 의존해야 하지만, 실제로는 순서나 피로, 배고픔 같은 외부 요인에 영향을 받음.
          + DLA 연구는 여러 사건을 연속적으로 판결할 때 후속 사건의 판결에 영향을 미친다는 것을 보여줌.
     * 비판적 평가
          + DLA 연구는 큰 효과 크기로 인해 주목받음.
          + 정신적 소모가 원인이라면, 실험실에서 관찰된 효과보다 훨씬 큰 효과가 나타남.
          + 사건 순서가 무작위가 아니거나, 판사들이 휴식을 취할 시점을 결정하는 요인이 결과에 영향을 미칠 수 있음.
     * 합리적 시간 관리와 선택적 탈락
          + 긍정적 판결이 부정적 판결보다 시간이 오래 걸리기 때문에, 세션 후반부에는 긍정적 판결이 적어질 가능성이 있음.
          + 판사들이 세션을 끝내기 전에 복잡한 사건을 시작하지 않으려는 경향이 있음.
     * 가상 합리적 판사의 선택 패턴 시뮬레이션
          + 시뮬레이션 결과, 합리적 판사도 세션 후반부에 긍정적 판결 확률이 감소하는 패턴을 보임.
          + 이는 DLA 연구에서 관찰된 것과 유사한 효과를 나타냄.
     * 추가 요인: 자기상관과 검열
          + DLA 연구에서 데이터의 마지막 5%를 검열함으로써 인위적으로 하향 경사 효과가 나타남.
          + 자기상관이 있는 경우에도 유사한 효과가 나타남.
     * 예측 없이 합리적 시간 관리
          + 예측 없이도 검열과 자기상관이 있는 경우 하향 경사 효과가 나타남.
     * 토론
          + DLA 연구는 외부 요인이 법적 판결에 영향을 미친다는 결론을 내림.
          + 그러나 시뮬레이션 결과, 합리적 시간 관리와 선택적 탈락이 큰 부분을 설명할 수 있음.
          + 검열이 인위적으로 하향 경사 효과를 유발함.
          + DLA 연구가 외부 요인의 영향을 과대평가했을 가능성이 있음.

GN⁺의 정리

     * 이 연구는 법적 판결이 외부 요인에 의해 영향을 받을 수 있다는 중요한 문제를 다룸.
     * 시뮬레이션을 통해 합리적 시간 관리가 큰 부분을 설명할 수 있음을 보여줌.
     * 검열이 인위적으로 하향 경사 효과를 유발할 수 있음을 지적함.
     * 법적 판결의 공정성을 보장하기 위해 추가 연구가 필요함.
     * 유사한 기능을 가진 다른 연구로는 Weinshall-Margel과 Shapard (2011) 연구가 있음.

        Hacker News 의견

     * 원래 연구가 오류가 있었음을 지적함. 사건 순서가 무작위가 아니었고, 변호사가 없는 죄수의 요청이 세션 끝에 처리되었기 때문임
     * 원래 연구는 점심 후 판사들이 더 관대하고, 점심 전에는 더 엄격하다는 결과를 제시했음
          + 긍정적인 판결은 시간이 더 걸리고, 부정적인 판결은 더 빠르게 처리됨
          + 판사들은 복잡한 사건을 휴식 직전에 시작하지 않으려 함
     * 원래 연구를 여러 번 인용했으나, 이번 연구가 더 많은 세부 사항을 제공함
     * 관련 연구 링크를 제공함
     * 불균등한 길이의 데이터를 다루는 통계는 어려움
     * 흡연과 같은 중독된 판사의 효과에 대해 궁금해짐
     * 상식에 반하는 사회/심리학 논문은 무시해야 한다고 주장함
     * 연구 대상이 현상을 인지하고 보상하려는 행동이 재현 실패의 원인일 수 있음
     * 기본 결과가 반대인 경우를 비교하는 것도 흥미로울 것임
     * 원래 연구를 읽은 후 점심 전 회의를 잡지 않음
     * 배고픔이 우리의 시스템에 노이즈(비합리성)를 증가시키고, 이것이 생존 가능성을 높였다는 진화론적 관점을 제시함
"
"https://news.hada.io/topic?id=16110","Show GN: textcube_to_jekyll - Textcube 백업 데이터를 Jekyll 포스트로 변환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: textcube_to_jekyll - Textcube 백업 데이터를 Jekyll 포스트로 변환

   안녕하세요. 인디 게임 웹진 Pig-Min의 기술지원을 맡고 있었던 나유령이라고 합니다.

   Pig-Min은 2015년 정도까지 운영되었던 Textcube 기반 블로그 입니다. 2015년 이후에는 거의 방치되다 싶이 하다 불의의 사고로 사용중이던 웹호스팅을 날려먹었고, 사이트는 완전 폐쇄 상태가 되었습니다.

   사이트는 Textcube 기반으로 되어 있으며 Textcube에는 블로그 데이터(포스트, 첨부파일 등)를 하나의 XML 파일로 내보내기/가져오기를 하는 기능이 있었습니다.
   우연히 이 기능을 활용해 만든 백업 데이터가 발견되었는데, 어떻게 다시 사이트를 살릴까에 대해서는 고민이 되었습니다.
     * 지금 다시 Textcube 블로그를 돌리기에는 보안적인 면이 걱정됨
     * 이전에는 Textcube에서 Tistory로 이전도 가능했으나 현재는 기능이 사라짐
     * 사이트 운영 비용을 최대한 절약하고 싶음
     * 아카이브 용도의 사이트이기 때문에 이것저것 타협 가능
          + 포스트 작성 편의성 희생
            (제가 기술지원을 하긴 하지만, 사이트의 주 운영자는 기술자가 아닙니다)
          + 댓글/트랙백 기능이 없어도 됨

   이런 점을 종합하여 Textcube 백업 데이터를 Jekyll 포스트로 변환해주는 툴을 만들어 GitHub Pages를 통해 호스팅 하게 되었습니다.

   5218개의 글을 XML 파일로부터 복원하였고, 백업 이후 작성된 글 중 일부(118개)는 archive.org 백업된 HTML을 받아 파싱하여 복원하였습니다.

   이 툴로 만든 사이트는 아래에서 구경하실 수 있습니다.
   https://blog.pig-min.com/

   혹시나 저와 같은 고민을 하시는 분이 있을까 하여 올려봅니다.

   감사합니다.

   예전에 RSS로 구독해서 봤었던 기억이 나네요. 이렇게 다시 소식을 듣게 되어 기쁩니다.
   혹시 앞으로 컨텐츠도 더 올라오나요?

   2015년도 부터 팟캐스트 쪽이 주력이 되어서 블로그는 운영되지 않고 있습니다.
   (이런 점을 고려하여 정적 사이트로 복구하였습니다.)

   저는 기술지원만 하기 때문에 컨텐츠와는 상관이 없지만, 혹시라도 포스팅을 신규로 하시게 된다면 지원은 해드릴 예정입니다.
   (Jekyll 위에서 포스팅 하도록 가이드를 드리거나... 혹은 다른 블로그 툴로 이전하거나...)
"
"https://news.hada.io/topic?id=16023","딥마인드의 AI, 국제 수학 올림피아드 문제 은메달 수준 해결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   딥마인드의 AI, 국제 수학 올림피아드 문제 은메달 수준 해결

     * 구글 딥마인드의 AlphaProof와 AlphaGeometry 2가 국제 수학 올림피아드 문제를 풀어냄
          + AlphaProof: 강화 학습 기반의 수학적 추론 시스템
          + AlphaGeometry 2: 개선된 기하학 문제 해결 시스템
          + 두 시스템이 올해 국제 수학 올림피아드(IMO)에서 6문제 중 4문제를 해결하여 은메달 수준의 성과를 달성함

  복잡한 수학 문제 해결에서의 AI 성과

     * IMO 소개
          + 1959년부터 매년 개최되는 가장 오래되고 권위 있는 청소년 수학 대회
          + 대회 문제는 대수학, 조합론, 기하학, 수론 등에서 출제됨
          + Fields Medal 수상자 중 다수가 IMO 출신
     * AI 시스템의 IMO 도전
          + AlphaProof와 AlphaGeometry 2가 올해 IMO 문제를 해결
          + 문제는 공식 대회 규칙에 따라 점수화됨
          + AlphaProof는 대수학 문제 2개와 수론 문제 1개를 해결
          + AlphaGeometry 2는 기하학 문제 1개를 해결
          + 두 조합론 문제는 해결하지 못함
          + 총 42점 중 28점을 획득하여 은메달 수준의 성과를 달성

  AlphaProof: 형식적 추론 접근법

     * AlphaProof의 작동 원리
          + 수학적 명제를 형식 언어 Lean으로 증명
          + 사전 훈련된 언어 모델과 AlphaZero 강화 학습 알고리즘 결합
          + 자연어 문제를 형식 명제로 번역하여 다양한 난이도의 문제를 해결
          + 문제를 제시하면 AlphaProof는 해결 후보를 생성하고 증명 또는 반증
          + 증명된 결과는 AlphaProof의 언어 모델을 강화하여 더 어려운 문제 해결 능력 향상
     * 훈련 과정
          + 수백만 개의 문제를 증명하거나 반증하며 훈련
          + 대회 기간 동안에도 훈련 루프를 적용하여 문제 변형을 증명

  더 경쟁력 있는 AlphaGeometry 2

     * AlphaGeometry 2의 개선점
          + Gemini 기반의 언어 모델과 신경-기호 하이브리드 시스템
          + 이전 버전보다 10배 더 많은 합성 데이터로 훈련
          + 기하학 문제 해결 속도와 정확도 향상
          + 새로운 문제 해결 시 지식 공유 메커니즘 사용
     * IMO 2024 성과
          + 과거 25년간의 IMO 기하학 문제 중 83% 해결
          + 올해 대회에서 문제 4를 19초 만에 해결

  수학적 추론의 새로운 프론티어

     * 자연어 추론 시스템 실험
          + Gemini 기반의 자연어 추론 시스템 실험
          + 형식 언어로 번역하지 않고 문제 해결 가능
          + 다른 AI 시스템과 결합 가능성 탐색
     * 미래 전망
          + 수학자들이 AI 도구와 협력하여 새로운 가설 탐구, 문제 해결 접근법 시도, 증명 과정 단축 가능
          + Gemini와 같은 AI 시스템이 수학 및 일반 추론 능력 향상

  GN⁺의 정리

     * AlphaProof와 AlphaGeometry 2는 수학적 추론에서 AI의 가능성을 보여줌
     * 국제 수학 올림피아드에서 은메달 수준의 성과를 달성하여 AI의 수학 문제 해결 능력을 입증
     * 수학자들이 AI와 협력하여 새로운 문제 해결 접근법을 탐구할 수 있는 가능성을 열어줌
     * 유사한 기능을 가진 프로젝트로는 OpenAI의 GPT-3와 같은 자연어 처리 모델이 있음

   형식 수학 라이브러리의 개발에 이바지하는 수학자가 많아질수록 성능이 좋은 수학 AI를 만들기가 수월해질 것입니다. 자신이 직접 린(Lean) 증명 보조기의 언어로 형식화한 수학 이론을 린의 수학 라이브러리 매스리브(Mathlib)에 옮기고 있는 한국인은 제가 알기로 현재 3명 있습니다.

   저는 지난해에 매스리브를 린 3에서 린 4로 옮기는 작업에 조금 참여했고, 올해에는 린 4 배터리 라이브러리의 미해결 정리 하나를 증명했습니다.

        Hacker News 의견

     * 첫 번째 의견
          + 이 프로젝트에 대해 매우 흥분하지만, 수학 문제를 형식적 언어로 번역하는 과정에서 컴퓨터가 얼마나 기여했는지 불분명함
          + 다운로드 가능한 솔루션에서 인간이 번역 과정에서 결정한 것인지 컴퓨터가 찾은 것인지 명확하지 않음
     * 두 번째 의견
          + IMO에서 메달은 참가자의 50%에게 수여되며, 금, 은, 동 메달의 비율은 1:2:3임
          + AI가 75%의 학생들보다 더 잘 해결했다는 것은 인상적임
          + 그러나 AI가 문제를 해결하는 데 걸린 시간은 학생들이 시험에서 주어진 시간과 다르므로 직접 비교는 부적절함
     * 세 번째 의견
          + AlphaGeometry는 제한된 문제를 해결했지만, 이번 방법은 더 광범위하게 수학에 영향을 미칠 것임
          + 자연어 수학을 형식화된 수학으로 변환하는 파이프라인을 구현하고 있으며, 이는 기본 이론 구축도 학습할 수 있음
          + 이는 증명 보조의 성배이며, 인간이 더 자연스럽게 수학을 형식화할 수 있게 도와줄 것임
     * 네 번째 의견
          + 시스템이 문제를 해결하는 데 3일이 걸렸다면, 이는 단순한 무차별 대입과 다를 바 없음
          + 이는 진정한 추론이 아님
     * 다섯 번째 의견
          + Lean을 사용하고 있음
          + 이는 수학 문제뿐만 아니라 일반적으로 무의미한 결과를 피하는 데 중요함
          + 더 많은 사람들이 Lean과 같은 시스템에서 타입을 작성하기를 희망함
     * 여섯 번째 의견
          + 이 프로젝트에 참여하는 사람들을 부러워함
          + 최첨단 기술을 발전시키는 것이 매우 재미있고 만족스러울 것임
     * 일곱 번째 의견
          + 최고의 논의는 LeanProver의 Zulip 채팅에서 이루어짐
     * 여덟 번째 의견
          + Fields 메달리스트인 Tim Gowers가 주요 주의사항을 설명하고 맥락을 제공하는 좋은 개요를 제공함
     * 아홉 번째 의견
          + 정리 증명은 매우 큰 탐색 공간을 가진 단일 플레이어 게임임
          + AlphaProof의 가장 큰 기여자는 Lean과 Mathlib의 개발자들임
          + 수학 논문에서 형식화의 부족이 자동화 시도를 방해했음
     * 열 번째 의견
          + 기계는 수십 년 동안 체스에서 인간보다 뛰어났음
          + 그러나 사람들은 여전히 Magnus Carlsen을 보고 있음
          + 인간은 다른 인간의 행동에 관심이 있음
          + 기계는 인간에게 도움이 되는 한에서만 관심을 가짐

     * 일곱 번째 의견
          + 최고의 논의는 LeanProver의 Zulip 채팅에서 이루어짐

   그 최고의 논의는 여기서 볼 수 있습니다. https://leanprover.zulipchat.com//…
"
"https://news.hada.io/topic?id=16127","레이저 눈 부상 경험담","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              레이저 눈 부상 경험담

내가 레이저 눈 부상을 입은 방법

     * 서문
          + 필자는 이 이야기를 학생들에게 교훈과 웃음을 주기 위해 여러 번 말했지만, 글로 적은 적은 없었음
          + 필자의 눈과 시력은 괜찮지만, 오른쪽 눈의 주변 시야에 약간의 손상이 있었음
          + 큰 흰 종이를 들면 오른쪽 아래 모서리에 약간의 노란색 얼룩이 보임
     * 사건의 배경
          + 1999년 봄, 흐린 아침, $LASER_COMPANY의 건물 6과 15 사이의 외부 주차장에서 발생한 사건
          + 필자는 광학 코팅 시설을 방문하기 위해 건물 6의 측면 문을 나서서 건물 15로 가던 중 이상한 소리를 들음
          + 그 소리는 Quanta-Ray 시스템의 플래시램프 소리였음
     * 사고 발생
          + 필자는 소리가 나는 방향으로 가면서 ""SHUT IT DOWN!!!""이라고 외쳤고, 그 과정에서 레이저 빔의 일부를 맞았음
          + 몇 달 후에야 손상을 인지하게 되었음
     * 사고 현장
          + Quanta-Ray PRO350 레이저 시스템이 주차장에 설치되어 있었음
          + 세 명의 남자가 레이저와 연결된 장비를 조작하고 있었고, 그 중 두 명만 레이저 안전 안경을 착용하고 있었음
          + 필자는 레이저 안전 책임자로서 상황을 파악하고 질문을 시작함
     * 안전 문제
          + 고객들이 착용한 안경은 Nd:YAG 레이저에 적합하지 않았음
          + 레이저가 주차장 바닥의 줄무늬를 태우는 대신, VP of Sales의 새 차에 손상을 입혔음
          + 레이저 빔이 반사되어 작업자들에게 다시 돌아왔고, 근처 초등학교와 군사 공역에도 위험을 초래했음
     * 결과
          + 비가 내려 레이저 시스템이 파괴되었고, 두 주 후에 Bob은 회사를 떠났음

GN⁺의 정리

     * 이 기사는 레이저 안전의 중요성을 강조하며, 작은 실수가 큰 사고로 이어질 수 있음을 보여줌
     * 레이저 시스템을 다룰 때는 항상 적절한 안전 장비를 착용하고, 주변 환경을 고려해야 함
     * 이 기사는 레이저 기술을 사용하는 사람들에게 유익한 교훈을 제공하며, 안전 관리의 중요성을 다시 한 번 상기시킴
     * 비슷한 기능을 가진 산업 제품으로는 Coherent와 Spectra-Physics의 레이저 시스템이 있음

        Hacker News 의견

     * 레이저 용접 경험 공유
          + 레이저 용접 시 가장 중요한 것은 레이저 안전 커튼임
          + 2500와트 레이저는 반사로 인해 먼 거리에서도 사람을 쉽게 실명시킬 수 있음
          + NOHD(명목적 안구 위험 거리)는 약 10km임
          + 레이저 용접기는 저렴하게 구입했고, 초보자도 쉽게 용접할 수 있음
     * 3M에서의 레이저 장난 사고
          + 3M에서 동료가 레이저 장난으로 눈에 상처를 입음
          + 상처는 주변 시야에 영향을 주었고, 나이가 들면서 시력이 더 나빠짐
          + 회사는 보상을 피했고, 장난을 친 동료는 적절히 처벌받지 않음
     * 안전 규정에 대한 불만
          + 해병대에서 새로운 장비를 테스트할 때마다 안전 담당자가 제한을 걸어 재미를 망침
          + 전역 후에는 주방위군에 가입함
     * US Navy Safety Picture Of The Day 사이트
          + 이 사이트는 사람들이 얼마나 위험한 상황에 처할 수 있는지를 보여줌
          + 현재는 사이트가 폐쇄된 것으로 보임
     * 레이저 포인터로 인한 눈 손상
          + 30세 때 저출력 레이저 포인터를 눈에 비춰도 괜찮다고 생각했으나, 결국 눈에 구멍이 생김
     * 의심스러운 이야기
          + 어떤 이야기는 믿기 어려운 부분이 있음
     * 레이저 비용 관련 정보
          + 레이저를 이용한 도로 페인트 제거는 오래전부터 연구되었고, 위험과 보상이 잘 정리되어 있음
     * 레이저 안전 교육 후의 두려움
          + 레이저 실험실에서 일한 후, 레이저에 대한 두려움이 생김
          + 바코드 스캐너나 자율주행차의 라이다도 피하게 됨
     * 레이저 실험의 추억
          + Quanta-Ray Nd:YAG 레이저로 실험하면서 항상 눈 안전에 신경 씀
          + 현재는 저렴한 고출력 다이오드 레이저가 많아졌고, 유튜버들이 안전 없이 사용하는 것을 보면 걱정됨
     * 사고 상황에 대한 궁금증
          + 사고 당시 다른 사람들은 어떻게 되었는지 궁금함
"
"https://news.hada.io/topic?id=16100","메타, 사용자 동의 없이 안면인식 기술 사용에 대해 텍사스에 14억 달러 지불하기로 합의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           메타, 사용자 동의 없이 안면인식 기술 사용에 대해 텍사스에 14억 달러 지불하기로 합의

     * 페이스북의 모회사인 메타가 사용자 승인 없이 생체인식 데이터를 사용했다는 혐의로 텍사스주에 14억 달러를 지불하기로 합의함
     * 2022년 텍사스 검찰총장 켄 팩스턴이 주 법원에 제기한 소송에서, 메타가 텍사스 주민들의 동의 없이 페이스북에 업로드된 사진에 안면인식 소프트웨어를 사용했다고 주장함
     * 팩스턴 사무실은 이번 합의가 단일 주에서 얻은 최대 규모의 합의금이자 검찰총장이 확보한 프라이버시 관련 최대 합의금이라고 밝힘
     * 이번 합의는 메타의 유죄 시인이 아니며, 메타는 잘못이 없다고 주장함

2009년 텍사스주 생체인식 데이터 보호법 하에서의 첫 번째 소송

     * 이번 소송은 지문과 안면 스캔 등 텍사스 주민의 생체인식 데이터를 보호하는 2009년 주법 하에서 팩스턴 사무실이 처음으로 제기한 것임
     * 이 법은 기업이 개인의 동의를 얻어 데이터를 수집하고 공유를 제한하며, 더 이상 필요하지 않은 데이터는 1년 이내에 파기할 것을 요구함
     * 2011년 메타는 사용자가 사진에 태그를 달기 쉽도록 Tag Suggestions 기능을 도입했는데, 팩스턴 사무실에 따르면 이 기능은 기본적으로 켜져있었고 사용자 사진에 안면인식을 실행해 2009년 법으로 보호되는 데이터를 자동으로 수집함

합의 조건 및 반응

     * 합의의 일환으로 메타는 주 생체인식 데이터법에 해당할 수 있는 예상되거나 진행 중인 활동을 검찰총장실에 통보해야 함
     * 메타 관계자는 이번 합의로 주 생체인식 데이터법의 영향과 요구사항을 검찰총장실과 논의하기 쉬워질 것이라며, 데이터 보호와 프라이버시가 회사의 핵심 우선순위라고 말함
     * 소비자 옹호단체 Consumer Reports는 팩스턴을 칭찬하면서도 이번 사례가 이례적이라고 지적했으며, 주정부가 프라이버시 침해에 대해 너무 적은 사건을 제기했다고 말함

텍사스주의 빅테크 규제 노력

     * 이번 합의는 빅테크 기업들이 텍사스에서 입지를 넓히는 가운데 주 정부가 업계를 규제하려는 노력의 일환임
     * 작년 주 의회는 Texas Data Privacy and Security Act를 통과시켰는데, 이는 기업이 민감한 개인정보 처리에 대해 사용자의 허가를 받도록 요구하고 소비자에게 자신의 데이터에 접근하고 삭제할 권리를 부여함
     * 미 대법원은 최근 텍사스 소셜미디어법(정치적 관점에 따라 대형 소셜미디어 기업이 사용자 콘텐츠 검열을 막는 법)에 대한 법적 도전을 하급법원으로 돌려보냄
     * 텍사스주는 구글, 애플 등 빅테크 기업들을 상대로 여러 반독점 소송을 제기해왔음

GN⁺의 의견

     * 이번 합의는 소비자 프라이버시 보호와 관련해 상당한 의미가 있는 사건으로 보임. 특히 단일 주에서 이뤄진 최대 규모의 합의라는 점에서 주목할 만함
     * 다만 이번 사례가 이례적이라는 지적처럼, 아직까지 대부분의 주에서는 빅테크 기업의 프라이버시 침해에 적극적으로 대응하지 못하고 있는 상황임. 앞으로 더 많은 주정부의 적극적인 법 집행이 필요해 보임
     * 한편 메타로서는 막대한 합의금 지불에도 불구하고 텍사스에서의 사업 확대 의지를 밝혔다는 점이 흥미로움. 이는 텍사스가 빅테크 기업에게 여전히 매력적인 시장임을 보여줌
     * 이번 사건은 AI 개발 경쟁이 가속화되면서 소비자 데이터 수집을 둘러싼 우려가 커지고 있는 상황에서 나온 것임. 앞으로 각국 정부와 기업이 데이터 활용과 프라이버시 보호 사이에서 어떻게 균형을 잡아갈지 지켜볼 필요가 있음
     * 한국에서도 개인정보보호법, 정보통신망법 등을 통해 프라이버시 보호를 위한 법제도가 마련돼 있지만, 아직 미국에 비해서는 집행력이 미흡한 측면이 있음. 이번 사례를 계기로 국내에서도 적극적인 법 집행과 제도 개선 노력이 필요해 보임
"
"https://news.hada.io/topic?id=16024","부패한 Winamp 스킨 조사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            부패한 Winamp 스킨 조사

    내가 조사한 부패한 Winamp 스킨의 기이한 비밀

   2021년 1월, 나는 Winamp Skin Museum을 위해 수집한 스킨들을 탐색하던 중 몇몇이 손상된 것을 발견하고 조사하기로 결심함. Winamp 스킨은 실제로 파일 확장자가 다른 zip 파일이므로, 파일을 추출하여 무엇을 찾을 수 있는지 확인함. 이 과정에서 다음과 같은 흥미로운 것들을 발견함:
     * 암호화된 파일을 해독하여 비밀을 발견함
     * 태국의 한 아버지가 두 살 반 된 아들을 위해 만든 선물
     * 누군가의 이메일 비밀번호
     * Chet Baker의 비밀 전기
     * 암호화된 역방향 오디오 파일
     * worm.exe라는 파일에서 놀라운 발견
     * 매우 무작위적인 이미지와 파일들
     * 다른 Winamp 스킨 안에 숨겨진 56개의 새로운 Winamp 스킨

   이 모든 것은 Winamp에 대한 나의 사랑과 발견된 아이템에 대한 나의 사랑과 일치하며, 이 스킨들에 대한 모든 데이터를 sqlite 데이터베이스에 저장함으로써 가능해짐.

    이야기

   첫 번째 손상된 파일은 단순히 볼링 핀 마스코트 의상을 광고하는 PDF 파일이었음.

    bobs_car.wsz

   이 파일은 단순히 ""Bob의 차""라는 제목의 사진을 포함하고 있었음.

    암호화된 zip 파일

   암호화된 zip 파일을 발견하고, zip 파일의 비밀번호를 무차별 대입 공격으로 해독하는 도구를 배우게 됨. 비밀번호는 ""honda""였음.

    태국의 아버지

   태국의 한 아버지가 두 살 반 된 아들을 위해 Adobe Illustrator로 만든 Winamp 스킨 모형을 발견함. 그는 이 스킨을 winamp.com에 보내며 공유하지 말아달라고 요청함.

    또 다른 암호화된 zip 파일

   또 다른 암호화된 zip 파일을 발견하고, 비밀번호를 무차별 대입 공격으로 해독함. 비밀번호는 ""nayane""였음.

    이메일 비밀번호

   Winamp 스킨 파일 안에서 E-mail passwords.txt라는 파일을 발견함. 이 파일에는 이메일 주소와 비밀번호가 포함되어 있었음.

    Suprise!.zip

   또 다른 스킨 파일 안에서 Suprise!.zip이라는 파일을 발견함. 이 파일은 암호화되어 있었고, 비밀번호는 ""kewl16""이었음. 비밀번호를 소문자로 바꾸어야 했음.

    Chet Baker의 전기

   secret.txt라는 파일에는 Chet Baker의 전기가 포함되어 있었음.

    mp3 파일

   몇몇 스킨 파일 안에는 mp3 파일이 포함되어 있었음. 예를 들어, cool.mp3라는 5초짜리 파일이 있었음.

    역방향 오디오 파일

   Sovergein_Sect.wav라는 파일을 발견하고, 역방향으로 재생해보니 스킨의 이름과 다른 정보를 말하는 것 같았음.

    WORM.EXE

   WORM.EXE라는 파일을 발견하고, Virus Total에 제출했으나 문제가 없었음. Webamp Discord의 누군가가 VM에서 실행해보니 뱀 게임이었음.

    이미지 파일들

   몇몇 스킨 파일 안에는 이미지 파일들만 포함되어 있었음. 예를 들어, Standing around the hoop.jpg와 ellie.bmp 파일이 있었음.

    다른 스킨을 포함한 스킨

   다른 스킨을 포함한 스킨을 찾아보니 127개의 스킨을 발견함. 그 중 54개는 박물관에 없던 새로운 스킨이었음.

    GN⁺의 정리

     * Winamp 스킨을 조사하면서 다양한 흥미로운 발견을 함.
     * 암호화된 파일을 해독하고, 개인적인 이야기와 비밀을 발견함.
     * Winamp 스킨 안에 숨겨진 다른 스킨들을 찾아내어 박물관에 추가함.
     * 이 기사는 Winamp와 관련된 흥미로운 발견과 개인적인 이야기를 제공하여 독자들에게 재미와 흥미를 줄 수 있음.

        Hacker News 의견

     * Jordan Eldredge는 WinAmp 관련 프로젝트를 여러 해 동안 진행해 온 개발자임
          + WebAmp: 웹 기반 WinAmp 재구현 프로젝트
          + WASM 엔진: WinAmp 스타일의 음악 시각화 엔진
          + 프로젝트 페이지: Jordan Eldredge Projects
     * 가장 좋아했던 Winamp 스킨은 Jimmy Eat World의 앨범 Bleed American 스킨이었음
          + 아카이브에서 찾을 수 없어서 아쉬움
          + Bleed American 위키피디아 링크
     * 스킨 제작을 매우 그리워함
          + 다양한 프로그램에 스킨을 제작하고 배포하는 것을 좋아했음
          + 지금도 모든 것을 커스터마이징하는 것을 좋아함
          + Discord 같은 프로그램은 커스터마이징을 거의 허용하지 않아서 불만임
          + 인디 웹이 사라진 큰 이유는 OS와 프로그램들이 사용자 커스터마이징을 제한했기 때문임
          + MySpace 테마는 사람들이 HTML/CSS를 배우게 했고, Winamp 스킨은 포토샵/그래픽을 배우게 했음
          + mIRC 스크립팅은 기본 코딩을 가르쳤음
          + OS 커스터마이징은 모든 것을 포함했음
          + 지금은 그냥 주어진 대로 사용해야 함
     * 주로 Windows를 사용하며, 여전히 주요 오디오 플레이어로 Winamp를 사용함
          + FLAC 파일과 DI.fm 스트림을 재생할 때 사용함
     * ""Sovereign Sect""는 스케이트보드 의류와 관련이 있었던 것으로 기억함
          + Thrasher Magazine 링크
     * 농구 골대 주변에 서 있는 사람들을 보며 강한 데자뷰를 느낌
     * 이 글을 읽으며 13살 때로 돌아간 느낌이었음 (27년 전)
     * 정말 좋았음. 사람들이 어떻게 이런 일을 하게 되었는지 궁금함
     * 오래된 zip 파일을 해독해야 한다면, 이 도구가 유용함: bkcrack
     * 사진 속 인물 중 한 명이 고등학교 때 Turing 언어로 웜 게임을 작성했을 것이라고 생각함
          + 고등학교 수업에서 했던 일이 떠올랐음
"
"https://news.hada.io/topic?id=16057","수학의 가장 생산적인 중심지 중 하나였던 괴팅겐 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   수학의 가장 생산적인 중심지 중 하나였던 괴팅겐 (2019)

  한 독일 도시가 수학 천재들을 키우고 잃은 이야기

    저자

     * David Gunderman, 콜로라도 대학교 볼더 캠퍼스 응용 수학 박사 과정 학생

    공개 성명

     * David Gunderman은 이 기사로 이익을 얻을 수 있는 회사나 조직에서 일하지 않으며, 관련된 소속이 없음을 공개함

    파트너

     * 콜로라도 대학교는 The Conversation US의 회원으로서 자금을 제공함

    소개

     * 가우스, 리만, 힐베르트, 노터는 모두 독일 괴팅겐 대학교의 교수였음
     * 괴팅겐은 한때 수학의 중심지였으나, 나치즘의 등장으로 인해 많은 수학자들이 해외로 떠나면서 쇠퇴함
     * 괴팅겐의 수학 유산은 오늘날 프린스턴, 뉴욕 대학교 등에서 이어지고 있음

  대학의 설립

     * 1734년, 영국과 북유럽의 대규모 지역을 통치하던 조지 2세가 괴팅겐 대학교를 설립함
     * 계몽주의 시대에 설립된 이 대학은 학문적 자유와 종교적 감독으로부터의 자유를 보장받음
     * 학생 교육은 부유한 사람과 가난한 사람 모두에게 평등하게 제공됨

  위대한 수학자들

     * 18세기 후반, 괴팅겐 대학교는 독일의 과학 학습의 중심지로 알려짐
     * 카를 프리드리히 가우스는 괴팅겐에서 1795년부터 1855년까지 연구를 수행하며 수학의 왕자로 불림
     * 베른하르트 리만은 리만 기하학을 발명하여 아인슈타인의 상대성 이론에 기여함
     * 펠릭스 클라인은 클라인 병을 처음으로 설명함
     * 클라인은 다음 세대의 수학자들을 괴팅겐으로 초빙하는 데 중요한 역할을 함

  대탈출

     * 1930년대 초 나치즘의 등장으로 괴팅겐의 수학적 역량이 쇠퇴함
     * 1933년, 유대인 교수와 나치즘에 반대하는 학자들이 독일을 떠남
     * 에미 노터, 리처드 쿠란트, 헤르만 바일 등 많은 수학자들이 미국과 영국으로 이주함
     * 힐베르트는 1934년에 괴팅겐의 수학이 유대인의 출국으로 인해 고통받았는지 묻는 질문에 ""괴팅겐의 수학은 더 이상 존재하지 않는다""고 대답함

  GN⁺의 정리

     * 괴팅겐 대학교는 한때 세계 최고의 수학 연구 중심지였음
     * 나치즘의 등장으로 많은 수학자들이 해외로 떠나면서 괴팅겐의 수학적 유산이 미국과 영국으로 이어짐
     * 이 기사는 역사적 사건이 학문적 발전에 미치는 영향을 보여줌
     * 유사한 기능을 가진 프로젝트로는 프린스턴 대학교와 뉴욕 대학교의 수학 프로그램이 있음

        Hacker News 의견

     * 이 글은 왜 괴팅겐에서 천재들이 집중되었는지에 대한 질문에 답하지 않음
          + 괴팅겐을 새로 만들려면 어떻게 해야 하는지, 어떤 요인이 괴팅겐을 가능하게 했는지 궁금함
          + 독일이 과학과 학문 분야에서 선두를 달렸던 이유를 알고 싶음
          + 독일의 황금기는 문화적 사건이었으며, 단순히 자유 민주주의를 구축하는 것만으로는 충분하지 않음
     * 나치 시대와 제2차 세계대전 이후 수학의 중심이 영국과 미국으로 이동했음
          + 정치적 혼란이나 종교적 박해가 도시의 부흥을 촉발하는 경우가 많음
          + 성공적인 도시나 국가를 이해하려면 누가 그곳으로 이동했는지, 어떤 기술과 경험을 가져왔는지 물어보는 것이 좋음
          + 관용적이고 안정적이며 환영하는 국가가 되는 것이 중요함
     * 괴팅겐은 수학뿐만 아니라 물리학에서도 중요한 역할을 했음
          + 폴 디랙, 막스 보른, 아인슈타인, 엔리코 페르미, 하이젠베르크, 존 폰 노이만, 오펜하이머, 막스 플랑크, 볼프강 파울리 등이 괴팅겐에서 연구하거나 직업을 가졌음
     * 콘스턴스 리드의 ""Hilbert"" 전기는 괴팅겐의 수학 역사에 대해 많은 것을 설명함
          + 헤르만 바일이 힐베르트의 수학적 작업에 대해 쓴 기사도 있음
          + 힐베르트는 23개의 ""힐베르트 문제""로 유명하며, 이는 후속 수학에 큰 영향을 미쳤음
     * 흥미로운 일화로, 조합 논리는 모든 조합자에 대해 독일어 단일 문자 이름을 사용함
          + 이는 러시아 유대인 모세 쇼엔핑켈이 발명하고 미국인 해스켈 커리가 발전시켰음
     * 괴팅겐에서 태어난 독일인과 함께 일했던 경험이 있음
          + 그는 어린 시절 유명한 과학자들과 함께 종이 비행기를 풍동에서 테스트했던 이야기를 들려줌
     * 괴팅겐이 수학의 중심이 된 것은 카를 프리드리히 가우스 덕분임
          + 그의 영향력은 19세기 독일의 수학과 과학 발전에 결정적이었음
     * 미국은 전체주의 국가로부터의 두뇌 유출로 많은 혜택을 받았음
          + 이를 계속 유지해야 함
     * 폴란드 대학을 졸업하고 독일에서 한 학기를 보낸 경험이 있음
          + 독일 대학생들은 자신이 무엇에 관심이 있고 졸업 후 무엇을 하고 싶은지 알고 있었음
          + 반면 폴란드에서는 사회적 압력으로 대학에 진학하고, 학문적 스태프의 요구에 맞춰야 했음
"
"https://news.hada.io/topic?id=16101","Zig에서의 C 매크로 리플렉션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Zig에서의 C 매크로 리플렉션

Zig의 C 매크로 반영

     * Zig
          + Zig는 저수준 및 시스템 프로그래밍에 중점을 둔 새로운 프로그래밍 언어로, C를 대체할 수 있는 언어로 자리 잡고 있음
          + 현재 개발 중이지만, 이미 Bun과 TigerBeetle 같은 프로젝트에서 사용되고 있음
          + Zig의 가장 인상적인 기능 중 하나는 C와의 뛰어난 상호 운용성임
     * 외부 라이브러리 호출
          + Zig에서는 외부 라이브러리를 쉽게 호출할 수 있음
          + 예시 코드:
const win = @import(""std"").os.windows;
extern ""user32"" fn MessageBoxA(?win.HWND, [*:0]const u8, [*:0]const u8, u32,) callconv(win.WINAPI) i32;
pub fn main() !void {
  _ = MessageBoxA(null, ""world!"", ""Hello"", 0);
}

     * C 헤더 파일 가져오기
          + Zig에서는 C 헤더 파일을 가져와서 일반 Zig 가져오기처럼 사용할 수 있음
          + 예시 코드:
const win32 = @cImport({
  @cInclude(""windows.h"");
  @cInclude(""winuser.h"");
});
pub fn main() !void {
  _ = win32.MessageBoxA(null, ""world!"", ""Hello"", 0);
}

     * 윈도우 프로그래밍
          + 일반적인 윈도우 애플리케이션은 main 함수와 window procedure 함수를 가짐
          + main 함수는 애플리케이션을 초기화하고 메시지를 window procedure로 전달하는 루프를 실행함
          + window procedure는 메시지를 받아 처리함
          + 예시 코드:
const std = @import(""std"");
const windows = std.os.windows;
const win32 = @cImport({
  @cInclude(""windows.h"");
  @cInclude(""winuser.h"");
});
var stdout: std.fs.File.Writer = undefined;
pub export fn WindowProc(hwnd: win32.HWND, uMsg: c_uint, wParam: win32.WPARAM, lParam: win32.LPARAM) callconv(windows.WINAPI) win32.LRESULT {
  _ = switch (uMsg) {
    win32.WM_CLOSE => win32.DestroyWindow(hwnd),
    win32.WM_DESTROY => win32.PostQuitMessage(0),
    else => {
      stdout.print(""Unknown window message: 0x{x:0>4}\n"", .{uMsg}) catch undefined;
    },
  };
  return win32.DefWindowProcA(hwnd, uMsg, wParam, lParam);
}
pub export fn main(hInstance: win32.HINSTANCE) c_int {
  stdout = std.io.getStdOut().writer();
  var class = std.mem.zeroes(win32.WNDCLASSEXA);
  class.cbSize = @sizeOf(win32.WNDCLASSEXA);
  class.style = win32.CS_VREDRAW | win32.CS_HREDRAW;
  class.hInstance = hInstance;
  class.lpszClassName = ""Class"";
  class.lpfnWndProc = WindowProc;
  _ = win32.RegisterClassExA(&class);
  const hwnd = win32.CreateWindowExA(win32.WS_EX_CLIENTEDGE, ""Class"", ""Window"", win32.WS_OVERLAPPEDWINDOW, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, null, null, hInstance, null);
  _ = win32.ShowWindow(hwnd, win32.SW_NORMAL);
  _ = win32.UpdateWindow(hwnd);
  var message: win32.MSG = std.mem.zeroes(win32.MSG);
  while (win32.GetMessageA(&message, null, 0, 0) > 0) {
    _ = win32.TranslateMessage(&message);
    _ = win32.DispatchMessageA(&message);
  }
  return 0;
}

     * 반영
          + C 매크로를 매핑하는 것은 번거로울 수 있음
          + Zig에서는 @typeInfo 함수를 사용하여 구조체 필드와 선언을 나열할 수 있음
          + 이를 통해 C 매크로를 Zig에서 반영할 수 있음
          + 예시 코드:
const window_messages = get_window_messages();
fn get_window_messages() [65536][:0]const u8 {
  var result: [65536][:0]const u8 = undefined;
  @setEvalBranchQuota(1000000);
  for (@typeInfo(win32).Struct.decls) |field| {
    if (field.name.len >= 3 and std.mem.eql(u8, field.name[0..3], ""WM_"")) {
      const value = @field(win32, field.name);
      result[value] = field.name;
    }
  }
  return result;
}
pub export fn WindowProc(hwnd: win32.HWND, uMsg: c_uint, wParam: win32.WPARAM, lParam: win32.LPARAM) callconv(windows.WINAPI) win32.LRESULT {
  _ = switch (uMsg) {
    win32.WM_CLOSE => win32.DestroyWindow(hwnd),
    win32.WM_DESTROY => win32.PostQuitMessage(0),
    else => {
      stdout.print(""{s}: 0x{x:0>4}\n"", .{ window_messages[uMsg], uMsg }) catch undefined;
    },
  };
  return win32.DefWindowProcA(hwnd, uMsg, wParam, lParam);
}

     * 결론
          + Zig는 C의 기능을 더 현대적인 프로그래밍 언어 구조를 사용하여 더 편리하게 수행할 수 있음
          + Zig는 C 컴파일러 도구 체인을 포함하여 C 헤더 파일의 선언을 원활하게 포함할 수 있음
          + Zig의 실용주의 철학은 언어를 배우기 시작하면 바로 드러남
          + Zig의 직관적이고 일관된 설계는 생산성을 높이는 데 기여함

GN⁺의 정리

     * Zig는 저수준 및 시스템 프로그래밍에 중점을 둔 새로운 언어로, C와의 뛰어난 상호 운용성을 자랑함
     * Zig는 C 헤더 파일을 가져와서 사용할 수 있으며, C 매크로를 Zig에서 반영할 수 있음
     * Zig의 실용주의 철학과 직관적인 설계는 언어를 배우고 사용하는 데 큰 도움이 됨
     * Zig는 기존 C 코드베이스를 Zig로 전환할 수 있는 경로를 제공하여 언어 채택의 장애물을 극복함

        Hacker News 의견

     * @cImport 기능이 제거될 예정임
          + C 파일을 가져오는 것은 가능하지만 더 많은 작업이 필요함
          + libclang 의존성을 제거하기 위해 이 기능을 언어에서 제거하려고 함
     * 예제 코드:
const win32 = @cImport({
  @cInclude(""windows.h"");
  @cInclude(""winuser.h"");
});

pub fn main() !void {
  _ = win32.MessageBoxA(null, ""world!"", ""Hello"", 0);
}

     * D 언어의 동등한 코드:
import windows, winuser;
void main() {
  MessageBoxA(null, ""world!"", ""Hello"", 0);
}

     * 컴파일러가 나머지를 처리함
     * C 파일을 가져오는 특별한 구문을 요청하는 사람들이 있지만, 이 간단함이 더 좋음
     * Zig를 좋아하고 싶지만 몇 가지 문제를 겪고 있음
          + 대부분은 아직 1.0 버전이 아니기 때문이라고 생각함
          + 예를 들어, zig init으로 프로젝트를 시작하는 권장 방법은 불필요한 코드가 많음
          + 최근에 zig build-exe filename.zig로 초기화 부분을 건너뛸 수 있다는 것을 알게 됨
          + 에디터 통합 문제도 많았음
          + VSCode 확장을 설치했지만 자동 완성 등이 제대로 작동하지 않음
          + 아마도 사용자 오류일 가능성이 높아 주말에 다시 시도해볼 예정임
     * Clang의 전처리기는 별도의 컴파일 전 단계로 구현되지 않음
          + 본질적으로 렉서의 일부임
          + gcc도 유사한 방식을 사용할 것이라고 생각함
          + 매크로 이름에 접근하는 것은 기술적으로 불가능하지 않음
          + 수요가 많지 않기 때문에 구현되지 않음
     * D 언어에서 ImportC를 사용하여 유사한 작업을 수행하는 방법을 블로그에 작성함
          + 블로그 링크
     * 각 enum마다 최소 UINT16_MAX*sizeof(intptr_t) 바이트를 실행 파일에 추가할 것 같음
     * 함수 정의가 매우 읽기 쉽게 보임
          + 다른 언어에서 본 적이 있지만 보통은 매우 끔찍함
          + Zig를 배울 가치가 있을지도 모름
          + 이것은 킬러 기능임
     * 사이트가 마음에 듦
          + Zig가 정말로 인기를 끌고 있는 것 같음
"
"https://news.hada.io/topic?id=16062","인텔 N100 Radxa X4 첫인상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인텔 N100 Radxa X4 첫인상

     * Radxa x4 사양
          + Intel N100 CPU (4 Alderlake CPU 코어, 최대 3.4GHz)
          + Intel UHD Graphics (750MHz)
          + 4/8/12/16GB LPDDR5 4786MT/s
          + 2.5Gbit RJ45 Ethernet (PoE 지원)
          + M.2 M-Key 연결 (M.2 2230 NVMe 드라이브용)
          + 12V USB-C 전원 공급 입력
          + 3x USB-A 3.2 (10Gbps) 포트, 1x USB-A 2.0
          + WiFi 5 & BT5, 또는 WiFi 6 & BT5.2 (8GB RAM 모델 이상)
          + 2x Micro HDMI (최대 4K60)
          + Raspberry Pi RP2040 (40핀 GPIO 헤더 제어용)
          + 팬 및 RTC 배터리 헤더
          + 3.5mm 헤드폰 및 마이크 잭
          + eMMC (직접 납땜하거나 포함된 SKU 주문 가능)
     * 박스 개봉
          + Radxa x4, PoE+ HAT, 케이스/쿨러 하이브리드 포함
          + 케이스/쿨러는 열 패드와 2개의 발 스티커 포함
          + PoE HAT는 스탠드오프가 사전 적용됨
          + x4 보드는 사전 설치된 RTC 배터리와 2개의 WiFi 안테나 포함
     * 초기 설정
          + 공식 Pi 5 PSU와 WD_BLACK SN770M 2230 M.2 NVMe 드라이브 사용

    BIOS

     * American Megatrends BIOS (2024년 4월 빌드)
     * 다양한 시스템 설정 조정 가능

    Debian 12 (Bookworm)

     * Debian 설치는 순조로움
     * GNOME 데스크탑 환경 선택, 대부분의 기능 정상 작동
     * 4K 60fps HDR 비디오 재생 원활
     * WiFi/BT 드라이버는 설치되지 않음

    Windows 11

     * Windows 설치 미디어 생성 필요
     * 네트워크 드라이버 문제 해결 필요
     * Intel 드라이버 페이지에서 드라이버 다운로드 가능

  간단한 테스트

    Geekbench 6 for Windows

     * CPU: 1007 (싱글코어), 2295 (멀티코어)
     * GPU: 3246 (OpenCL), 3710 (Vulkan)
     * 최대 CPU 주파수 2.9GHz (BIOS 설정 조정 필요)

    네트워킹

     * iperf3 테스트에서 2.5Gbps 연결 포화
     * WiFi 드라이버 문제로 인해 Windows에서는 작동하지 않음

    전력 소모

     * Windows 11에서 유휴 상태: 8와트
     * 모든 장치 제거 시: 6.8와트
     * CPU 및 GPU 스트레스 테스트 시: 27.3와트

    온도

     * 케이스 없이 사용 시 매우 뜨거워짐
     * Radxa 4x 쿨러/케이스 콤보 사용 권장
     * 열 패드 문제로 인해 냉각 성능 저하

    Power over Ethernet

     * 2.5GbE 포트는 PoE 호환
     * 특정 PoE 스위치에서 전력 문제 발생

  요약

     * Radxa x4는 좋은 제품이지만 몇 가지 개선이 필요함
     * 대부분의 기능은 예상대로 작동
     * 쿨러와 PoE HAT 설치 시 NVMe 드라이브와 WiFi 칩 간의 간격이 좁음
     * 추가 벤치마킹과 테스트 필요

GN⁺의 정리

     * Radxa x4는 Intel N100 기반의 강력한 싱글 보드 컴퓨터로, 다양한 프로젝트에 적합함
     * Windows와 Debian 모두 설치 가능하지만, 일부 드라이버 문제 해결 필요
     * PoE 기능과 2.5GbE 네트워킹 지원으로 유연한 사용 가능
     * 쿨링 솔루션과 전력 관리에 대한 추가 연구 필요
     * 유사한 기능을 가진 제품으로는 Raspberry Pi 5와 다양한 미니 PC가 있음

        Hacker News 의견

     * Windows 11 ISO와 Debian ISO를 쉽게 설치할 수 있는 점이 x86의 큰 장점임
          + ARM 프로세서도 이와 같이 유연해지기를 희망함
          + x86 프로세서가 저렴하고 저전력이며 강력한 성능을 유지하는 점이 놀라움
          + N100 프로세서를 사용하는 더 많은 장치를 보고 싶음
     * $60에 x86을 실행할 수 있고 하드웨어 트랜스코딩이 가능하며 RPI 5보다 3배 강력한 CPU를 제공함
          + Raspberry Pi 대신 Radxa 보드를 사용하는 것이 더 경제적임
          + PoE와 m.2 슬롯이 내장되어 있어 추가 비용이 절감됨
          + Radxa 보드의 생산이 증가하기를 희망함
          + Radxa 보드가 Raspberry Pi 케이스에 맞을 수도 있음
     * 바이너리 블롭이 없는 장치라면 매우 흥미로울 것임
     * 최신 플랫폼의 유휴 전력 소모가 실망스러움
          + 8/9세대 Intel TinyMiniMicro PC는 3W 이하로 작동 가능함
          + Gemini Lake (Refresh) 얇은 클라이언트도 4W 이하로 작동 가능함
          + ARM RK3588 플랫폼은 유휴 전력 소모에서 우수함
          + Orange Pi 5 Plus는 1.5W로 작동함
          + Proxmox를 실행하려는 사람들에게는 적합하지 않음
          + N100 플랫폼은 대부분 5W 이상으로 작동함
          + 신뢰할 수 있는 제조업체의 패시브 쿨링 옵션이 많지 않음
          + EU 에너지 가격으로 5W 차이는 연간 20-35 EUR의 전기 요금 차이를 의미함
     * N100이 성능/와트 또는 성능/$에서 큰 도약을 이룬 것으로 보임
          + N100 미니 PC가 아이의 첫 리눅스 PC로 적합한지 궁금함
     * 큰 GPU를 장착하고 추론에 사용하는 경험이 있는지 궁금함
          + NVME 포트를 통한 데이터 전송이 제한될 수 있음
          + Jetson 보드 대신 가벼운 추론용 장치로 적합할 수 있음
     * SATA 헤더가 없는 점이 놀라움
          + 팬리스 히트 싱크가 잘 작동하는지 확인할 것임
     * Ethernet 컨트롤러가 EtherCAT을 지원하는지 궁금함
     * $60 가격이 매우 저렴함
          + 온도 문제는 있지만 CPU를 상당히 제한할 의향이 있음
     * Emulation Station과 함께 사용하면 훌륭한 레트로 게임 머신이 될 것임
          + 현재 Rpi 4를 사용 중이지만 더 강력한 CPU가 필요함
"
"https://news.hada.io/topic?id=16126","크라우드스트라이크, 패러디 사이트 제거 시도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        크라우드스트라이크, 패러디 사이트 제거 시도

     * 광대 서비스 회사가 ClownStrike를 공격함
          + Hacker News에서 상위에 오른 ClownStrike 패러디 사이트
          + CrowdStrike와 같은 회사들이 허위 삭제 요청을 제출하고 사이버 괴롭힘을 하는 광대 서비스 회사 사용
          + CrowdStrike가 이 사이트를 좋아하지 않는 이유는 패러디 사이트이기 때문임
     * CloudFlare에 대한 근거 없는 삭제 요청
          + CloudFlare에 근거 없는 삭제 요청을 보내는 것이 문제 해결에 도움이 되지 않음
          + CrowdStrike가 세계 최악의 IT 중단을 일으킨 것에 대해 비판받고 있음
          + 수백만 항공 승객이 발이 묶이고 수십억 달러의 피해 발생
     * 글로벌 기술 중단의 원인과 비용
          + CrowdStrike의 업데이트 실패로 인한 글로벌 중단과 여행 혼란
          + CrowdStrike의 복구 방법이 복잡하고 최대 15번 재부팅 필요
          + CrowdStrike와 Microsoft의 주요 중단으로 인해 BSOD와 혼란 발생
          + Microsoft는 CrowdStrike BSOD로 인해 850만 시스템이 영향을 받았다고 발표하고 USB 복구 도구를 출시함
     * DMCA와 기업 사이버 괴롭힘
          + DMCA가 기업 사이버 괴롭힘에 사용되는 문제
          + DMCA의 카운터노티스 시스템이 비효율적임
          + DMCA가 기업에 유리하게 편향되어 있음
     * 패러디 사이트에 대한 상표 침해 주장
          + 패러디 사이트에 대한 상표 침해 주장이 우스꽝스러움
          + 상표와 저작권법에서 중요한 ""공정 사용"" 개념
          + 패러디, 비판, 변형 작품, 뉴스 보도, 교육 등에서 상표 사용이 허용됨
          + 패러디는 ""공정 사용""으로 잘 인정받는 권리임
     * 상표법: 패러디와 상표 침해의 미세한 경계
          + 최근 대법원 판결이 패러디 방어의 한계를 확인함
          + 상표법에서 패러디 제품에 대한 가이드 제공
          + 비상업적 사용에 대한 법적 제외 조항 존재
     * ClownStrike의 입장
          + 이 사이트는 명백한 패러디이며 상업적 사용이 없음
          + CrowdStrike에 대한 강한 비판

GN⁺의 정리

     * 이 기사는 CrowdStrike의 업데이트 실패로 인한 글로벌 IT 중단 사건을 다루고 있음
     * DMCA가 기업 사이버 괴롭힘에 어떻게 사용되는지 설명하고 있음
     * 패러디 사이트가 상표 침해 주장에 어떻게 대응하는지에 대한 법적 배경을 제공함
     * 이 기사는 패러디와 공정 사용의 중요성을 강조하며, 법적 권리에 대한 이해를 높이는 데 도움이 됨
     * 비슷한 기능을 가진 프로젝트로는 ""EFF""와 같은 디지털 권리 보호 단체를 추천함

        Hacker News 의견

     * CSC는 다른 회사들이 행정 목적으로 고용하는 회사임
          + CSC는 주로 서류 제출과 같은 법적 요구사항을 처리함
          + CSC가 DMCA 요청을 대행하는 것은 의외임
          + CSC의 온라인 브랜드 보호 서비스가 문제의 원인일 가능성이 있음
          + Crowdstrike 사건이 인터넷을 마비시킬 수 있음
          + Crowdstrike가 사이버 보험 정책을 통해 브랜드 보호 서비스를 구매할 수 있음
          + 이로 인해 사이트가 많은 트래픽을 받을 수 있음
     * 회사들이 이러한 집행 조치로 인한 평판 손상을 얼마나 고려하는지 궁금함
          + 작은 바이오텍 스타트업에 대한 정보를 검색하다가 비슷한 사례를 발견함
          + 이는 회사 이름을 들을 때 가장 먼저 떠오를 것임
     * CrowdStrike가 브랜드에 큰 손상을 입혔음
          + 비윤리적인 행동과 DMCA 남용이 문제임
          + ClownStrike를 제거하려는 시도가 더 큰 반감을 살 것임
          + 브랜드, 평판, 고객 신뢰를 파괴하는 행동임
     * 콘텐츠와 청중 사이의 중개자를 최대한 줄이는 것이 중요함
          + 이상적인 시나리오는 자체 ASN과 물리적 서버를 갖추는 것임
          + 중개자가 많을수록 제거 대상이 많아짐
          + 상업용 CMS를 선택하면 쉽게 타겟이 될 수 있음
          + Cloudflare를 선택하는 것도 마찬가지임
     * Cloudflare의 변호사들이 CrowdStrike에게 거절하라고 조언했어야 함
          + DMCA의 저작권 조항은 상표권에는 적용되지 않음
          + Cloudflare는 법적 책임 없이 거절할 수 있었음
          + 가짜 DMCA 청구를 제기하겠다고 위협할 수도 있었음
     * ClownStrike가 사이트를 제거하려면 또 다른 버그 업데이트를 배포해야 함
          + 인터넷 전체를 마비시킬 수 있음
     * DMCA 통지를 받은 사이트의 모습은 다음과 같음
          + https://clownstrike.lol/"">사이트 링크
     * CrowdStrike는 사이트 제거에 능숙함
          + clownstrike.com과 clownstrike.net 도메인을 2012년부터 소유하고 있었음
          + 새로운 TLD에는 신경 쓰지 않은 것 같음
     * 이 게시물의 많은 추천 수를 보면, CrowdStrike가 큰 PR 실수를 저질렀음을 알 수 있음
"
"https://news.hada.io/topic?id=16042","유럽, 규제로 인해 기술 시장 소멸 위기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         유럽, 규제로 인해 기술 시장 소멸 위기

     * 애플은 6월, 이메일 작성 및 편집, 새로운 사진 및 이모지 생성 등 AI를 활용한 새로운 기능 모음인 ""Apple Intelligence""를 발표함
          + 하지만 유럽 사용자들은 이 기능을 사용할 수 없게 됨
     * EU의 디지털 시장법(DMA) 요구사항으로 인해 Apple Intelligence, SharePlay 화면 공유, iPhone 화면 미러링 등 새로운 제품 및 기능을 EU 국가에 출시하지 않기로 결정했다고 발표함
     * EU 집행위원 Margrethe Vestager는 애플의 결정을 ""반경쟁적 행위의 충격적인 선언""이라고 비난함
          + 하지만 이는 말도 안 되는 주장임. 기술 대기업이 제품 출시를 하지 않기로 한 것은 경쟁을 촉진시키는 것이며, 유럽의 규제 입장을 고려하면 당연한 결과임

규제로 인한 기술 기업들의 유럽 철수 사례 증가

     * 경제학자 앨버트 허쉬만은 불리한 환경에서 '목소리(voice)'와 '탈출(exit)'라는 두 가지 선택지를 제시했음
          + 기술 기업들은 전통적으로 로비 활동을 통해 규제를 개선하려고 노력해왔으나, 최근에는 '탈출' 전략을 더 많이 고려하고 있음
     * 잘못 설계된 규제로 인해 특정 국가에서 기능이나 서비스 제공을 중단한 사례들
          + 페이스북은 캐나다 온라인 뉴스법 대응으로 캐나다 내 모든 뉴스 콘텐츠 제거
          + 구글 뉴스는 스페인의 ""링크세"" 때문에 철수했다가 법 개정 후 복귀
          + 많은 기술 기업들이 중국 공산당의 영향력 때문에 중국 시장 떠남
     * 성인 사이트들도 연령 확인 법률로 인해 일부 미국 주에서 사용자 차단 중
     * 메타는 규제 우려로 트위터 경쟁 앱 스레드의 EU 출시 연기
     * 메타는 ""규제의 불확실성"" 때문에 최첨단 Llama AI 모델을 EU에 출시하지 않기로 함

EU의 과도한 규제, 기술 기업 철수 초래할 수도

     * EU는 최근 메타의 ""결제 또는 동의"" 계획이 EU 규정을 위반했다며 제재
          + 메타는 개인 맞춤 광고에 기반한 비즈니스 모델을 가지고 있음
          + EU 규제 당국은 메타에게 사용자 데이터 추적 없는 옵션 제공 요구
          + 메타는 광고 없는 유료 서비스 모델 제시했으나, EU는 이 또한 규칙 위반이라 주장
          + EU는 메타에게 개인 맞춤 광고 없는 무료 서비스나 월별 요금제 제공 요구하고 있음
          + 사실상 EU는 메타의 핵심 비즈니스 모델 자체를 불법으로 규정한 셈
     * 트위터에 대한 EU의 제재도 부당함
          + 트위터의 블루 체크 유료화에 대해 EU는 기만적 관행이라며 문제 삼음
          + 그러나 이는 널리 알려진 변화였고, EU가 블루 체크의 의미를 해석하고 규정하는 것은 과도한 개입
     * 프랑스, 엔비디아를 반경쟁 행위로 제재하려 함
          + CUDA 소프트웨어가 문제시 되고 있으나, 이는 엔비디아가 오랜 기간 투자해 개발한 혁신 기술

유럽의 규제 과잉 문제

     * 모든 예시들은 성공한 외국 기술 기업들을 겨냥하고 있음. 이는 EU의 규제가 유럽 내에서 성공적인 기술 기업을 거의 허용하지 않기 때문임
     * 규제 과잉의 사례들로 인해 EU가 제품 결정을 강제하거나 사업 전략을 불법으로 규정하는 경우가 많음
     * 벌금의 규모는 너무 커서 기업들을 대륙에서 떠나게 할 가능성이 있음. EU 정책은 전 세계 수익의 최대 10%에 해당하는 벌금을 부과할 수 있음
     * 메타는 EU에서 수익의 10%만, 애플은 7%만을 얻고 있으며, 엔비디아도 비슷한 비율일 가능성이 큼
     * 이는 수익이 아닌 매출에 대한 벌금으로, 단일 벌금이 여러 해 동안 EU에서 얻는 수익보다 많아질 수 있음

규제 준수와 현실

     * EU 규제 당국은 기업들이 규제를 준수하면 벌금 없이 수익을 올릴 수 있다고 주장하지만, 메타의 사례에서 보듯이 이는 사실이 아님
     * EU는 명확한 규칙을 사전에 제시하지 않으며, 추상적인 목표를 요구함. 규제 준수 여부는 사후에 결정됨
     * 이는 기업들에게 불리하며, 기업들이 떠나려는 이유가 됨
     * 유럽은 세계의 기술 산업에서 무엇을 원하는지 명확히 할 필요가 있음
     * 기술 산업에서 혁신보다는 규제를 중시하는 경향이 있음
     * 몇 안 되는 성공 사례들도 규제로 인해 위험에 처할 수 있음. 예를 들어, 프랑스의 AI 기업 '미스트랄'은 엔비디아가 프랑스 시장에서 철수할 경우 생존이 어려울 수 있음
     * 유럽인들은 구식 기기를 사용하고, 전 세계의 검색 엔진과 소셜 미디어 사이트에 접근하지 못하며, 고성능 컴퓨터 칩을 이용할 수 없게 될 가능성이 있음

규제와 기업들의 대응

     * 유럽연합은 자주적으로 기술을 규제할 권리가 있지만, 그로 인해 기술 기업들이 떠나는 것에 대해 놀라서는 안 됨
     * 현재 대부분의 기술 기업들은 시스템 내에서 규제를 더 합리적으로 만들기 위해 노력 중이나, 만약 이러한 노력들이 계속 실패한다면 탈출이 유일한 선택이 됨
     * 유럽에서는 탈출이 점점 더 합리적인 선택이 되고 있음

GN⁺의 의견

     * EU의 과도한 규제는 글로벌 기술 기업들의 유럽 시장 철수를 초래할 수 있음. 유럽은 규제보다는 기술 혁신에 더 집중할 필요가 있어 보임
     * 기술 기업들이 유럽 시장에서 철수한다면, 유럽은 구식 기기를 사용하고 최신 서비스를 이용하지 못하는 온라인 변방이 될 수 있음
     * 유럽의 기술 산업 경쟁력이 매우 취약한 상황에서, 글로벌 기업들마저 규제 때문에 떠난다면 그 폐해는 고스란히 유럽 소비자들이 감당해야 할 것임
     * EU는 주권 기구로서 원하는 대로 입법할 권리가 있지만, 그로 인해 초래되는 결과에 대해서도 책임질 준비가 되어 있어야 함
     * 대부분의 기술 기업들은 아직 EU의 규제 체계 내에서 활동하려 노력 중이지만, 계속 실패한다면 결국 철수라는 선택을 하게 될 것임
     * 기술 기업들이 규제를 준수하기 어렵게 만드는 불명확한 규제는 결국 유럽 기술 산업 전체에 부정적인 영향을 미칠 수 있음

   과도한 규제는 좋지 않지만, 어느 정도는 규제가 있어야 한다고 생각합니다.
   적절한 수준의 규제가 무엇인지, 서로 받아들일 수 있는지는 어려운 문제지만요..

   GN⁺: 유럽에 드리는 당부의 말, ""제발 깨어나시길""

   어려운 문제인듯 합니다. EU 덕분에 기술 기업들이 견제 받기도 하지만, 이렇게 아예 EU를 버려 버리면 아예 소외 될테니까요.

        Hacker News 의견

     * 전화 서비스 제공 회사는 규제 준수를 위해 많은 절차를 거쳐야 함
          + 과거에 독점 시도나 인명 사고가 있었기 때문임
          + 대형 기술 회사들은 경쟁을 막고 개인 정보를 최대한 수집하려고 함
          + 미국 규제 기관은 제약이 많아, 불법적인 행위를 쉽게 할 수 있음
     * EU는 게이트키퍼 방지법과 상호 운용성 요구 사항을 통과시킬 수 있음
          + Apple은 이를 따르지 않고 제품을 EU에서 제공하지 않을 수 있음
          + 이는 EU에게 큰 승리이며, Apple도 불평할 수 없는 상황임
     * ""유럽인들이 구식 전화기와 제한된 인터넷 환경에서 살게 될 것""이라는 의견에 대해
          + 이는 오히려 더 건강한 생활 방식일 수 있음
          + 최신 기술이 필요하지 않음
          + 인터넷은 감시, 마케팅, 광고로 가득 차 있음
          + 최신 기술이 사람들을 더 똑똑하게 만들지 않음
     * 검색 엔진과 소셜 미디어에 의존하는 국가들은 정신 질환과 낮은 시험 점수를 가질 가능성이 높음
          + 이는 사회의 질을 떨어뜨림
     * Jonathan Kanter와의 인터뷰에서 유럽의 규제 접근 방식에 대해 논의함
          + 많은 사람들이 유럽의 방향을 부러워함
          + Apple과 Meta 같은 회사들을 규제하는 것이 유럽을 빈곤하게 만들지 않음
     * 미국에서도 이러한 규제가 필요함
          + 개인 정보를 통제할 수 없는 기술 회사들은 존재해서는 안 됨
          + CCPA/CPRA 같은 규제는 매우 유익함
          + 빅 테크는 과소 규제 상태이며, 이는 변화가 필요함
     * 타겟 광고가 완전히 불법화되기를 바람
          + 사회에 큰 이익이 될 것임
     * 유럽의 규제가 현 상태를 바꾸었는지에 대한 의문
          + 미국의 대형 기술 회사들이 빠지면 현지 회사들이 시장을 차지할 수 있음
          + 개인적으로는 지지하지 않지만, 그들의 관점을 이해할 수 있음
     * 대형 기술 회사들의 퇴출이 나쁜 일이 아님
          + 유럽이 올바른 방향으로 가고 있다는 신호일 수 있음
     * 기술 부문은 다른 부문에서 작동한 규제가 자신들에게는 적용되지 않는다고 주장함
     * 소셜 플랫폼의 요구 사항이 매우 까다로워짐
          + 이는 스타트업의 시장 진입을 어렵게 함
          + 소셜 기능이 있는 거의 모든 제품에 영향을 미침
          + 대형 회사들은 결국 유럽에 진출할 것이지만, 다른 지역보다 늦어질 것임

   https://news.ycombinator.com/item?id=41084521

     To access facual information, cf. marketing and propaganda, worthless opinions, and ""AI"" generated garbage, one did not and does not need the latest ""phone"" or ""high-performance computer chips"". This stuff is not making people smarter. Is it is not making society better.

   전적으로 공감합니다
"
"https://news.hada.io/topic?id=16009","버튼 스틸러 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               버튼 스틸러 사건

     * Button Stealer
          + Chrome 확장 프로그램으로, 사용자가 방문하는 모든 웹사이트에서 버튼을 ""훔치는"" 기능을 제공함
          + Button Stealer는 자동으로 작동하며, 사용자가 일상적으로 온라인 활동을 하는 동안 훔친 버튼의 컬렉션이 증가하는 것을 볼 수 있음
          + 재미있고, 쓸모없으며, 무료임
     * Button Stealer 설치
          + Button Stealer는 로컬에서 작동하며, 데이터를 외부로 전송하지 않기 때문에 사용자의 데이터는 개인적으로 유지됨
     * GN⁺의 정리
          + Button Stealer는 사용자가 방문하는 웹사이트에서 버튼을 수집하는 재미있는 Chrome 확장 프로그램임
          + 개인 정보 보호를 위해 데이터를 외부로 전송하지 않음
          + 비슷한 기능을 가진 다른 확장 프로그램으로는 ""Button Collector""가 있음
"
"https://news.hada.io/topic?id=16081","CrowdStrike의 항공 산업에 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CrowdStrike의 항공 산업에 미치는 영향

CrowdStrike의 항공 산업에 미친 영향

     * 2024년 7월 19일, CrowdStrike가 윈도우 시스템에 센서 구성 업데이트를 배포함
     * 이 업데이트로 인해 약 850만 대의 컴퓨터가 블루스크린을 겪으며 병원, 은행, 911 시스템 등 다양한 기관에 영향을 미침
     * 리눅스, 맥, 휴대폰은 영향을 받지 않음

  미국 항공 산업에 미친 영향

     * 7월 19일, 미국에서 이륙한 항공기의 수를 시간별로 비교한 차트 제공
     * 7월 12일과 비교하여 0600부터 1300까지는 소폭 감소, 이후에는 소폭 증가
     * 0400부터 시작된 누적 통계에서는 이전 주 금요일과 비교하여 2.6% 증가

  항공사 통계

     * 주요 4개 미국 항공사(Delta, United, American, Southwest)의 통계 제공
     * Delta: -1087편 (-46%)
     * United: -596편 (-36%)
     * American: -376편 (-16%)
     * Southwest: +101편 (+3%)

  항공사 요약

     * Delta가 가장 큰 타격을 받았고, United와 American이 그 뒤를 이음
     * Southwest는 영향을 받지 않음
     * Delta는 복구에 오랜 시간이 걸렸으며, 다른 항공사들은 더 빨리 정상화됨

  데이터 및 분석

     * ADS-B Exchange의 원시 데이터를 사용하여 항공기 이륙을 감지하는 코드로 처리
     * 이륙을 비행으로 간주하여 통계 작성

GN⁺의 정리

     * CrowdStrike의 업데이트로 인해 발생한 대규모 IT 장애가 항공 산업에 미친 영향을 분석한 기사임
     * Delta 항공사가 다른 항공사보다 복구에 오랜 시간이 걸린 이유에 대한 다양한 의견이 제시됨
     * 이 기사는 IT 시스템의 안정성과 비상 계획의 중요성을 강조함
     * 비슷한 기능을 가진 다른 프로젝트로는 Splunk와 같은 로그 관리 및 분석 도구를 추천함

        Hacker News 의견

     * Delta의 승무원 추적 소프트웨어가 큰 타격을 받아 복구에 시간이 걸렸음
          + 출처: Delta CEO Ed Bastian의 업데이트
          + 시스템 중단으로 인한 변화 처리에 어려움을 겪음
     * 많은 컴퓨터가 인터넷에 연결되어 있어서는 안 된다는 점을 시사함
     * Delta는 이미 소송을 준비 중인 것으로 보임
          + 출처: Yahoo Finance 기사
     * Southwest Airlines가 Windows 3.1을 사용하여 CrowdStrike와 Microsoft의 중단을 피했다는 기사
          + 출처: TechRadar 기사
     * Minneapolis-St Paul 공항이 다른 미국 공항보다 일찍 취소를 경험한 이유를 궁금해함
     * 최신의 잘 연습된 재해 복구 계획이 효과가 있었는지, 아니면 IT가 백업 및 복구 비용을 지불하지 않았는지 궁금해함
     * 글로벌 분석이 있는지 궁금해함
     * 이번 중단의 흥미로운 점은 ""PROD"" 시스템은 주로 Linux 및 오래된 독점 소프트웨어로 운영되어 괜찮았지만, ""CORP"" 시스템은 주로 Windows로 운영되어 큰 타격을 입었음
          + 은행 시스템은 돈을 이동시키는 데 문제가 없었지만, 사람들과 상호작용하는 시스템은 문제가 있었음
     * Delta가 핵심 비즈니스 역량을 아웃소싱하고 계약을 최소화하여 절약한 것이 문제를 악화시켰음
          + 고객에게 보상하는 비용이 절약한 비용보다 더 많이 들기를 바람
          + 출처: Reddit 댓글
     * Delta는 적절한 재해 복구 계획과 IT 비즈니스 연속성 계획이 없었음
          + UA, AA, F9는 준비된 계획을 즉시 실행하여 빠르게 복구했음
          + UA와 AA는 서버 농장, 클라우드 솔루션, 공항의 최종 사용자 스테이션까지 모든 곳에 계획을 배치했음
          + Delta는 많은 IT를 아웃소싱했음
          + UA와 AA는 직원의 초과 근무 비용을 지불하는 데 주저하지 않았음
          + UA와 AA도 Delta만큼 Windows에 의존하고 있었음
          + AA는 금요일 말까지 복구되어 토요일에 정상 운영을 재개했음
          + UA는 약 12시간 뒤에 복구되어 토요일 오후에 정상 일정을 재개했음
          + 문제의 책임은 100% Delta의 IT 결정에 있음
          + 하위 IT 직원이 대부분의 비난과 결과를 받을 것임
     * ""CrowdStrike""가 이제 ""글로벌 중단""의 동의어가 된 것을 좋아함
          + ""heartbleed""와 같은 귀여운 이름이 아닌, 문제를 일으킨 회사의 이름임
"
"https://news.hada.io/topic?id=16040","낱말퀴즈(꼬들) 해킹으로 base64 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       낱말퀴즈(꼬들) 해킹으로 base64 이해하기

   세 줄 요약
     * Base64에 대한 설명과 꼬들이라는 낱말퀴즈를 분석함
     * 꼬들 문제 링크의 파라미터에는 base64로 된 데이터가 존재하며
     * 이 데이터를 디코딩함으로써 정답을 추출할 수 있는 방법을 설명

   Base64란
     * Base64는 바이너리 데이터를 텍스트 형식으로 변환하는 인코딩 방식
     * 4개의 문자(A-Z, a-z, 0-9, +, /)를 사용하여 모든 종류의 데이터를 표현

   Base64를 사용하는 이유
     * 암호화된 데이터 저장
     * 이메일 첨부 파일 전송
     * URL 인코딩 등

   Base64에 대한 오해
     * Base64가 암호화 방식이 아님
     * Base64는 단순히 데이터를 다른 형태로 표현하는 인코딩 방식일 뿐

   꼬들(kodle) URL 구조
     * 도메인(kordle.kr)과 파라미터(code=~~~)로 구성되어 있음
     * 파라미터의 값은 어떠한 값을 base64로 인코딩한 데이터
     * 이를 디코딩하면 낱말퀴즈의 정답이 도출됨

   사용하는 이유 -> 암호화 된 데이터 저장
   오해 -> Base64가 암호화 방식이 아님

   모순된 내용이 서로 서술되어있네요

   Base64의 경우 암호화 방식이 아닌, 데이터를 바이너리 형태로 표현하는 또 다른 방식으로 보면 좋을 듯 하네요

   원 글에서도 암호화 하여 저장한다기 보다는 암호화된 데이터를 안전하게 전송하거나 저장하는 목적으로 쓰인다고 기술되어 있는데,
   아무래도 설명 없이 요약되다 보니 이렇게 보이는 것 같네요.
"
"https://news.hada.io/topic?id=16123","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
"
"https://news.hada.io/topic?id=16120","2015년 Linear Regression의 진실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2015년 Linear Regression의 진실

선형 회귀의 진실

     * 소개
          + 이 문서는 2015년 가을에 36-401, 현대 회귀 강의를 할 때 작성한 강의 노트를 기반으로 함
          + 선형 회귀를 배우거나 가르치는 사람들에게 도움이 될 수 있음
          + 기존의 이론에서 Gaussian 노이즈와 정확히 지정된 선형 모델에 의존하는 부분을 줄이고, 더 계산 집약적이지만 견고한 기술을 강조함
     * PDF 전체 텍스트
          + 데이터 파일
          + 각 장의 R 코드
          + 현재 개요
     * 최적 예측
          + 통계 모델링 소개
          + 단순 선형 회귀 모델과 추정에 대한 힌트
     * 단순 선형 회귀를 위한 최소 제곱법
          + 단순 선형 회귀를 위한 최대 우도법
          + 단순 회귀 진단 및 수정
          + 매개변수에 대한 추론
          + 단순 선형 모델에 대한 예측 추론
          + 변환 후 매개변수 해석
          + F-검정, R^2 및 기타 주의사항
          + 행렬 형식의 단순 선형 회귀
     * 다중 선형 회귀
          + 다중 선형 회귀 진단 및 추론
          + 다항 및 범주형 회귀
          + 다중공선성
          + 검정 및 신뢰 구간
          + 상호작용
          + 이상치 및 영향력 있는 점
          + 모델 선택
          + 검토
          + 가중 및 일반화된 최소 제곱법
          + 변수 선택
          + 트리
          + 부트스트랩 I
          + 부트스트랩 II

GN⁺의 정리

     * 이 문서는 선형 회귀에 대한 현대적인 접근 방식을 제공하며, 기존의 이론적 한계를 극복하기 위해 더 견고한 계산 방법을 강조함
     * 통계 모델링과 회귀 분석에 대한 기초부터 고급 주제까지 포괄적으로 다루고 있음
     * 특히, 다중공선성, 변수 선택, 부트스트랩 등 실무에서 중요한 주제들을 포함하고 있음
     * 이 문서는 통계학과 데이터 과학을 공부하는 학생이나 실무자에게 유용할 수 있음
     * 유사한 기능을 가진 다른 프로젝트로는 ""Advanced Data Analysis from an Elementary Point of View""가 있음

        Hacker News 의견

     * 대부분의 사람들이 선형 회귀를 잘 이해하지 못함
          + 모든 일반적인 통계 테스트는 선형 모델임
          + 선형 모델은 매개변수에 대해 선형적이지, 응답에 대해 선형적이지 않음
          + 적절한 스플라인 기저를 선택하면, 예측 변수와 응답 간의 많은 비선형 관계를 선형 모델로 모델링할 수 있음
          + 테일러 정리에 따라 선형 관계는 비선형 관계의 좋은 근사치가 될 수 있음
     * CMU에서 10년 전 통계 수업을 들었는데, R을 배우게 되어 좋았음
          + 선형 회귀의 큰 약점은 작은 교육 데이터셋에는 유효하지만, 실제 데이터에는 적용하기 어려움
     * Ridge Regression이 다중공선성 문제를 해결하는 데 유용함
          + 요즘은 과적합 방지 정규화 기법으로 배우지만, 원래는 고도로 상관된 예측 변수들 간의 가중치를 균형 있게 조정하는 데 사용됨
     * Citadel의 정량 연구자가 선형 회귀를 어떻게 사용하는지 배우고 싶음
          + 그들이 어떤 이론적 결과를 중요하게 생각하는지 궁금함
     * 학부 과정에서 여러 번 선형 회귀를 배웠음
          + 통계와 확률 이론을 통해 최적성이 증명될 수 있음
     * 박사 과정에서는 주로 딥러닝 모델을 사용한 회귀 문제를 다룸
          + 고전적인 선형 모델의 엄격한 증명과 정리를 딥러닝 회귀 모델에 적용할 수 있는 방법이 있으면 좋겠음
     * Shalizi의 ""Data Analysis from an Elementary Point of View""는 좋은 입문서임
          + 선형 및 가산 모델과 시뮬레이션에 중점을 둠
          + 책의 90%는 컴퓨터 없이는 쓸모없지만, 이는 현대의 진리임
     * 회귀에서 가장 중요한 기술은 절편을 인식하는 것임
          + 상호작용 항을 포함하면 절편의 의미를 이해하는 것이 중요함
          + 예를 들어, 나이와 자폐증 진단 변수를 포함한 단순 선형 모델에서 절편이 의미하는 바를 이해해야 함
     * XGBoost를 사용한 회귀를 가르치는 사람으로서, 이 글이 매우 유익하고 접근하기 쉬움
          + 특히 6장, 시각적 진단이 매우 잘 작성되었음
     * 이 글에서는 언급되지 않았지만, 선형 회귀도 딥러닝에서 흔히 볼 수 있는 Double Descent 현상을 보임
          + 이를 위해서는 정규화를 도입해야 함
     * 이 PDF를 모바일 최적화된 형태로 변환하는 방법을 알고 있는지 궁금함
"
"https://news.hada.io/topic?id=16072","디버깅 원칙디버깅 원칙

     * 디버깅은 사실상 개발자의 필수 역량
     * 디버깅은 어떻게 접근할 것인가라는 마인드셋이 중요
     * 디버깅이란 주어진 상황과 데이터를 기반으로 문제의 원인을 찾아나가는 과정
          + 글쓴이는 이를 직관이라고 표현한다
          + 직관이란 내가 아는 지식을 문제와 연결하는 것
          + 경험은 지식이 직관으로 통하는 숏컷 역할
     * 개발자는 디버깅은 예상하지 못한 동작의 원인을 찾기 위하여 본능적으로 가능성을 좁혀나가는 행위를 하게됨
     * 글쓴이는 원칙을 가지고 하나씩 좁혀나가는 것이 효율적이라 생각
     * 문제를 찾기 위한 네 개의 단계를 소개
          + 첫 번째, 의심하기
               o 코드, 로그, 에러 메시지, 모니터링 데이터, 요구사항, 하드웨어 등 모든 것은 문제 해결을 위한 정보를 수집하는 것
               o 체크리스트를 작성하면 좋음
          + 두 번째, 분류하기
               o 수집한 정보 중 아는 것과 잘 모르는 것 나눌 것
               o 정보를 수집하는 단계에서 바로 여과되는 정보는 작은 직관으로 인한 것
               o 글쓴이는 논리적 결함, 의존 기술 결함, 기반 기술 결함, 물리적 결함 네 가지로 분류
          + 세 번째, 학습하기
               o 수집한 정보를 기반으로 지식 공백을 찾고 학습할 것
          + 네 번째, 연결하기
               o 정보를 바탕으로 문제에 대한 가설을 세우고 실험할 것
               o 이 과정에서 새로운 통찰이 생기면 다시 네 단계를 도는 피드백 루프를 이용할 것
     * 앞서 소개한 내용은 앞서 언급한 직관을 연습하기에 유용한 방법
     * 나만의 디버깅 원칙이 없다면 이 글을 기반으로 만들어도 좋고 새롭게 만들어도 좋음. 좋은 팁을 공유한다면 더 좋음

     글쓴이는 원칙을 가지고 하나씩 좁혀나가는 것이 효율적이라 생각

   굉장히 공감합니다. 그리고 디버깅에 관한 일반론적인 접근법을 잘 정리해서 제안해주신 것 같습니다.

   실제로 디버깅을 해나가는 과정 속에는 굉장히 다양한 원인과 배경지식이 복잡하게 맞물려있기 때문에, 이 안에서 필요한 단서를 찾기 위해 포커스를 좁혀가는 과정이 정말 중요하다고 생각합니다.
   본문에선 그런 과정에서 직관과 통찰력을 갈고 닦아야 한다고 하였는데, 직감적으로 어디가 원인인지, 어디를 중심으로 조사해야 하는지 그 시작점을 잡는 데에 있어 경험과 감으로 다져진 직관이 여기서 많은 지분을 차지하는 듯 합니다.

   공감합니다. 말씀하신 직감을 잘 표현하고 싶었는데 글 전체적으로 직관 대신 통찰력으로 통일하는게 더 좋을 것 같다는 생각이 드네요.

   추론이 되는 사람은 되고 안 되는 사람은 안 된다는 생각.

   한 30년쯤 전이었나 봅니다.

   IT는 3년쯤 하면 실력이 다 똑같아진다는 소리를 선배들이 하고는 했죠.

   지금 생각해보면 ....

   정보를 연결하는 것은 직관의 영역이라기보다 추론 또는 논리적 증명으로 생각하는 게 더 자연스럽지 않을까요? 증명을 반복숙달하게 되면 구구단 외우듯이 중간과정은 생략하고 답이 바로 나와서 직관처럼 보일수는 있겠지만 둘은 구별하는 게 맞지 않나 생각합니다.

   나머지 의심, 분류, 학습은 경험과 배경 지식이 쌓이게 되면 향상되는 걸 경험했기 때문에 동의합니다

   글을 한번 더 읽어보고 덧붙입니다

   필자께서 주장하시는 직관의 정의가 사회적으로 통용되는 직관의 정의와는 다른 것으로 보입니다. 생각의 과정이 없이 문제를 이해하는 게 일반적인 직관의 정의라 이해하고 있는데요. 글을 읽다보니 순간 제가 직관의 뜻을 잘못 이해하고 있나 싶어서 다시 확인해보게 되더라구요. 디버깅에 생각의 절차가 필요하다는 전체적인 논지와도 모순되지 않나 생각합니다. 디버깅이 정말 온전히 직관으로 수행할 수 있는 작업이라면 디버깅시에 로그나 데이터 확인, 형상관리가 전혀 필요없다는 주장도 참이어야 하지 않을까요?

   안녕하세요. 글에 관심 주셔서 감사합니다.

   말씀하신 것처럼 일반적으로 직관이란 직접적인 사고 활동 없이 대상을 파악하는 것을 의미합니다. 그렇다고 정말 아무 지식이 없는 상태에서 정답까지 갈 수는 없다고 생각합니다.

   먼저 직관이라는 단어에 대한 제 생각을 적어보자면, 디버깅에 관한 이야기를 하다 보면 '갑자기 떠올랐다', '왠지 그 부분이 문제인 것 같았다'와 같은 말을 동료에게 듣거나 스스로 해봤다는 이야기를 자주 듣습니다. 저는 이 부분이 직관이라 생각했어요. 갑자기 떠오른 것을 그냥 넘기지 않고 하나씩 짚어보면 결국 해당 부분에 대한 경험이 있었거나 관련 지식을 잘 이해하고 있다는 것을 깨달을 수 있었습니다. 그래서 직관이라는 단어를 사용했고 오해가 있을 수 있으니 '내가 아는 지식을 문제와 연결하는 것이 직관'이라는 문장을 추가했습니다.

   그래서 말씀 주신 몇 가지 의문에 제 생각을 말씀드리자면,
   '디버깅에 생각의 절차가 필요하다는 전체적인 논지와도 모순'에 대해서는 제가 글에서 표현한 직관이란 이미 경험했거나 알고 있는 사실로 큰 생각없이 생략하는 것으로 묘사했습니다. 따라서 생각의 절차가 필요 없다는 뜻이 아닌, 생각을 빠르게 할 수 있는 도구로 표현하고자 했습니다.

   다음으로 '디버깅이 정말 온전히 직관으로 수행할 수 있는 작업이라면 디버깅시에 로그나 데이터 확인, 형상관리가 전혀 필요없다는 주장도 참이어야 하지 않을까요?'에 대해선 온전히 직관으로 수행할 수 있다고 표현하지는 않았습니다. 오히려 '디버깅이란 주어진 상황과 데이터를 기반으로 문제의 원인을 찾아나가는 과정'이라는 문장을 추가했습니다. 다만, 디버깅 때마다 글에서 주장하는 네 단계 추론 과정을 거치는 개발자는 거의 없을 것으로 생각합니다. 어느 정도 경험과 지식이 있다면 자신의 판단으로 생략하는 경우도 있겠죠. 언급하신 로그, 데이터 등은 경험이나 지식이 있다면 이를 상기시켜 주는 역할을 하거나 경험이나 지식이 없다면 추론에 도움을 주는 역할 두 가지를 가지고 있다고 생각합니다. 따라서 글에서 언급한 직관을 위해서라도
   없어선 안 되는 중요한 정보입니다.

   이 글에서 사용한 직관이란 단어 자체가 애매모호할 수 있다고 생각합니다. 어쩌면 제 생각을 나타내기에 글의 구성이나 빌드업이 안 좋았을지도 모르겠습니다. 우선 구체적이지 않았던 부분은 수정하려고 합니다. 그러나 직관이라는 단어를 교체하는 것이 좋을지는 아직 판단이 잘 안서네요. 글을 쓸 때부터 직관이라는 단어를 핵심으로 꼽았기에 대체할 다른 단어가 생각나지 않습니다. 혹시 좋은 의견이 있으시다면 말씀 주시면 감사하겠습니다. :)

   디버깅에 직관과 추론 작용이 둘 다 필요하다는 배경 설명을 서론에, 문제를 찾는 방법과 직관/추론의 연관성을 본론에 추가하면 글의 완결성을 높일 수 있을 것으로 판단합니다

   변경 전
    1. 디버깅이란 주어진 상황과 데이터를 기반으로 문제의 원인을 찾아나가는 과정이다
    2. 디버깅을 통한 문제 해결은 보통 개발자의 직관에서 나온다
    3. 문제를 찾기 위한 네 개의 단계가 존재한다

   변경 후

   서론
    1. 디버깅이란 주어진 상황과 데이터를 기반으로 문제의 원인을 찾아나가는 과정이다
    2. 디버깅에는 문제 인식과 문제 해결 두 가지 세부 작업이 순차적으로 필요하다
    3. 문제 인식에는 직관이, 문제 해결에는 추론이 작용한다. 이를 뒷받침하는 이론으로 이중처리이론(dual process theory)가 있다
    4. 문제 인식 과정에 추론만을 사용하게 되면 시스템의 형상 등의 기술 세부사항을 일일이 확인하고 검증해야 하기 때문에 생산성을 높이는 데에 제약이 있다. 대신 문제 인식 과정에 직관을 보조적으로 사용하는 것이 디버깅 전략에 유리하다
    5. 직관의 실효성을 높이기 위해 평소에 경험과 통찰, 즉 휴리스틱을 축적하는 것이 중요하다.
    6. 직관이 틀리거나 상황에 맞지 않는 가능성은 언제나 존재하며, 인지 편향에서 벗어나는 훈련도 중요하다

   본론 (디버깅 절차)
    1. 정보 수집
    2. 분류 - 직관과 휴리스틱이 작용함
    3. 학습
    4. 가설 수립 및 검증 - 추론이 작용함
"
"https://news.hada.io/topic?id=16014","구글, Privacy Sandbox의 새로운 경로 모색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글, Privacy Sandbox의 새로운 경로 모색

     * Privacy Sandbox는 온라인 광고를 지원하는 인터넷을 유지하면서 온라인 개인 정보 보호를 의미 있게 개선하는 혁신적인 솔루션을 찾는 것을 목표로 개발되었음
          + 영국 경쟁시장청(CMA), 정보위원회(ICO), 출판사, 웹 개발자, 표준 그룹, 시민 사회, 광고 업계 참여자 등 다양한 이해 관계자로부터 피드백을 받았음
          + 이 피드백은 경쟁력 있고 번성하는 시장을 지원하고 개인정보 보호 기술 채택을 장려하는 솔루션을 만드는 데 도움이 되었음
     * Google을 포함한 광고 기술 회사의 초기 테스트에 따르면 Privacy Sandbox API가 이러한 결과를 달성할 수 있는 잠재력이 있음을 시사함
          + 업계 채택이 증가함에 따라 시간이 지남에 따라 Privacy Sandbox API를 사용한 전반적인 성능이 향상될 것으로 예상됨
          + 동시에 이 전환에는 많은 참여자의 상당한 노력이 필요하며 온라인 광고에 참여하는 모든 사람에게 영향을 미칠 것임을 인식함
     * 타사 쿠키를 폐기하는 대신 Chrome에 새로운 경험을 도입하여 사람들이 웹 탐색에 적용되는 정보에 입각한 선택을 할 수 있게 하고 언제든지 해당 선택을 조정할 수 있도록 할 것임
          + 이 새로운 경로에 대해 규제 기관과 논의 중이며 출시할 때 업계와 협력할 것임
     * 개발자가 개인정보를 보호하는 대안을 갖는 것은 여전히 중요함
          + Privacy Sandbox API를 계속 사용할 수 있도록 하고 개인정보 보호와 유용성을 더욱 개선하기 위해 투자할 것임
          + IP Protection을 Chrome의 시크릿 모드에 도입할 계획이므로 추가적인 개인 정보 제어 기능을 제공할 예정임
     * 지난 4년 동안 Privacy Sandbox를 개발, 테스트 및 채택하기 위해 협력해 준 모든 조직과 개인에게 감사함
          + 이 접근 방식을 최종 확정함에 따라 CMA, ICO 및 전 세계 다른 규제 기관과 계속 협의할 것임
          + 더 Private한 웹으로 가는 여정의 다음 단계에서 생태계와 지속적으로 협력하기를 기대함

   그동안 진짜 여러 시도도 하고 반발도 많았는데.. 끝내 안하는 것으로
     * 2020-01 크롬도 Third-Party Cookie를 사용하지 않는것에 동참
     * 2021-01 FLoC, 관심기반 광고를 위한 써드파티 쿠키 대체제
          + 구글 FLoC에서 내 웹사이트 제외 시키기
          + Am I FloCed ?
          + 아마존, 구글 FLoC 차단
          + GitHub Pages, 구글 FLoC 차단
          + Brave 브라우저, 구글 FLoC 기능을 차단
     * 2021-06 구글, 써드 파티 쿠키 제거를 2023년으로 연기
     * 2022-01 구글, FLoC을 대체할 새 ""토픽 API"" 공개
     * 2022-01 구글의 Topics API는 프라이버시 문제 해결없이 FLoC을 리브랜딩만 한 것
     * 2022-08 구글, 써드 파티 쿠키 제거를 2024년으로 연기
     * 2023-10 구글 크롬, 새로운 광고 제공 및 사용자 추적 방식 도입
"
"https://news.hada.io/topic?id=16069","glhf - (거의) 모든 언어 모델 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       glhf - (거의) 모든 언어 모델 실행하기

     * vLLM과 직접 만든 오토스케일링 GPU 스케줄러를 사용하여 거의 모든 오픈소스 대규모 언어 모델을 실행
          + Llama 3.1 405b, Qwen 2 72b, Gemma 2 27b, Phi-3 등
     * 별다른 설정없이 허깅 페이스 리포지토리 링크를 붙여넣으면 동작 : 모든 Full-weight 및 4-bit AWQ Repo
     * 최대 8개의 Nvidia A100 80Gb GPU를 사용 가능
     * 베타 기간 동안에는 무료로 제공. 베타가 끝나도 멀티테넌트로 동작해서 주요 클라우드 GPU 가격보다 좋을 것

   llama 405b 어떻게 써보나 했는데 빠르고 퀄리티도 좋네요

   vLLM: PagedAttention을 이용한 쉽고, 빠르고 저렴한 LLM 서빙
"
"https://news.hada.io/topic?id=16102","Porffor: 처음부터 새로 만든 실험적 Ahead-of-Time JS 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Porffor: 처음부터 새로 만든 실험적 Ahead-of-Time JS 엔진

처음부터 실험적인 AOT JS 엔진

   Porffor는 JS 코드를 WebAssembly 또는 네이티브로 사전 컴파일하는 독특한 JS 엔진/컴파일러/런타임임. 현재는 연구 목적으로 사용되며, 실제 사용에는 제한적임.

  Wasm 컴파일

   Porffor의 WebAssembly 출력은 기존 JS -> Wasm 프로젝트에 비해 훨씬 빠르고 작음. 이는 Porffor가 JS를 AOT로 컴파일하기 때문임.
     * Wasm 크기: Javy보다 32배 작음 (~1.3MB -> ~40KB)
     * Wasm 성능: Javy보다 18배 빠름 (~70m -> ~4m)

  네이티브 컴파일

   JS를 사전 컴파일하기 때문에 Porffor는 런타임을 패키징하지 않고 실제 네이티브 바이너리로 컴파일할 수 있음. 이는 다음과 같은 결과를 초래함:
     * 바이너리 크기: 1000배 이상 작음 (~90MB -> <50KB)
     * 메모리 사용량: 40배 이상 적음 (~50MB -> ~1MB)
     * 성능: 최대 3배 빠름

  추가 사항

     * Porffor는 안전함: Wasm으로 컴파일되며, 메모리 안전 언어(JS)로 작성됨.
     * Porffor는 처음부터 AOT를 염두에 두고 작성됨: 기존 JS 엔진에 기반하지 않음. 유일한 의존성은 JS 파서임.
     * Porffor는 TypeScript 입력을 지원함: 번거로운 트랜스파일러 단계가 필요 없음. TS 파일을 바로 입력하면 됨.

  Playground

   온라인 또는 로컬에서 Porffor를 시도할 수 있음. npm i -g porffor@latest && porf 명령어를 사용하면 됨.
     * Prime Numbers
     * Fibonacci
     * Factorial
     * Sum of Digits
     * Exception
     * Array Reading
     * ArrayPrototype
     * Math Proposals Parser: acorn, meriyah, hermes-parser, @babel/parser
     * Target: wasm

const isPrime = number => {
  if (number < 2) return false;
  for (let i = 2; i < number; i++) {
    if (number % i == 0) return false;
  }
  return true;
}

let counter = 0;
while (counter <= 10000) {
  if (isPrime(counter)) Porffor.numberLog(counter);
  counter++;
}

  Test262

   Test262는 공식 ECMAScript 적합성 테스트 스위트임. Porffor는 각 커밋마다 이를 실행하여 적합성 진행 상황을 추적함.

GN⁺의 정리

   Porffor는 JS 코드를 WebAssembly 또는 네이티브로 사전 컴파일하는 독특한 엔진임. 이는 기존 솔루션에 비해 훨씬 작은 크기와 빠른 성능을 제공함. 연구 목적으로 사용되며, TypeScript 입력을 지원함. 이 프로젝트는 JS 엔진의 성능과 효율성을 연구하는 데 유용할 수 있음. 비슷한 기능을 가진 프로젝트로는 Javy와 같은 JS -> Wasm 컴파일러가 있음.

        Hacker News 의견

     * Oliver가 Porffor에 전념할 것이라고 발표했음
     * JS 성능 향상에 한계가 있어, V8 C++ 호출로 트랜스파일링하는 것이 최선일 것이라는 의견이 있음
          + TypeScript를 컴파일하면 큰 성능 향상을 얻을 수 있음
          + TS와 V8은 빠르게 변화하는 비표준 대상이므로 큰 팀이 필요함
     * JS 런타임이 Wasm 접근을 시도하는 것이 멋지다고 생각함
          + Static Hermes와 Porffor의 공통점과 차이점을 분석함
               o 둘 다 JS test262 준수를 목표로 함
               o Porffor는 Native와 Wasm 출력을 지원하지만 Static Hermes는 주로 Native 출력에 집중함
               o Porffor는 자체 호스팅되며 순수 JS로 작성되었고, Static Hermes는 LLVM에 의존함
               o Porffor는 비동기/프로미스/어웨이트를 지원하지 않지만 Static Hermes는 제한적으로 지원함
               o Static Hermes는 C++로 작성되었고, Porffor는 주로 JS로 작성됨
               o 둘 다 TypeScript를 지원하지만 Static Hermes는 TS AST를 Flow로 트랜스파일링하고, Porffor는 네이티브로 지원함
               o Static Hermes는 eval과 같은 어려운 JS 시나리오를 지원하기 위해 폴백 인터프리터를 가지고 있지만, Porffor는 AOT 컴파일만 지원함
     * 이 프로젝트가 JS 엔진을 가속화할 수 있을지 기대됨
     * windmill.dev에서는 사용자가 코드를 배포할 때 Bun 빌드를 사용하여 스크립트와 모든 종속성을 하나의 js 파일로 번들링함
          + 번들을 s3에 저장하여 콜드 스타트와 메모리 사용량을 개선함
          + 모든 것을 네이티브로 번들링할 수 있다면 게임 체인저가 될 것임
     * ""ahead-of-time JS engine""이 ""JS-to-Wasm compiler""보다 더 나은 설명인 이유를 궁금해함
     * Porffor의 버전 관리 방식에 대해 의심이 있음
          + Test262 테스트에서 회귀가 발생하면 버전 번호가 역행할 수 있음
     * Porffor는 웨일스어로 ""보라색""을 의미함
     * quickJS와 비교하여 JS를 네이티브 코드로 컴파일하는 방법을 궁금해함
     * Facebook이 PHP를 C로 트랜스파일링하려 했던 것과 같은 아이디어라고 생각함
          + hiphop-php라고 불렸고, 결국 hhvm을 새 개념으로 만들었음
     * NodeJS를 네이티브 라이브러리로 컴파일할 수 있는 방법을 알고 싶어함
          + 현재 사용 중인 프로세스가 약간 복잡하고 오류가 발생하기 쉬움
"
"https://news.hada.io/topic?id=16105","SQLite의 트랜잭션ite의 트랜잭션

     * 최근 몇 년 동안 SQLite는 서버 프로세스의 백엔드 용도로 강력한 인-프로세스 고신뢰성 SQL 데이터베이스 엔진으로 각광받음
     * 전통적인 클라이언트 또는 엣지 애플리케이션 역할이 아닌 이런 용도로 SQLite가 사용되는 것을 SQLite 개발자들이 거의 적극적으로 만류하고 있음에도 불구하고 인기가 급증함

내가 SQLite에 관심을 갖게 된 주요 이유들:

     * 개념적으로 단순함: 기본키로 파티션된 행/튜플의 B-트리를 상상해 봄. 이를 디스크에 안정적으로 지속시키기 위해 광범위하게 테스트되었고, SQL 상호작용 계층을 추가함
     * Litestream을 통해 실용적인 백업 전략을 수립할 수 있음. 원격 위치로 WAL을 백업하고 지속적으로 복제함. 백업은 간단한 명령어로 시작시 자동 복원 가능함.
     * 오프라인에서 실행 가능한 완전한 개발 환경을 여전히 좋아함
     * file::memory:를 통해 인-메모리 작업이 가능해 필요시 테스트 코드가 인스턴스를 쉽게 시작하고 종료할 수 있음

  Single-writer 제한

     * SQLite 개발자들에 의해 ""서버에서의 SQLite 제한""이 잘 문서화되어 있고, 최상의 서버 측 설정이 분석됨. 하지만 눈에 띄는 제한은 고트래픽 웹사이트인데, 이는 쓰기가 많은 웹사이트를 의미함
     * WAL 모드에서 SQLite는 설계상 단일 Writer를 사용함. 이는 동시에 최대 1개의 쓰기 트랜잭션과 여러 읽기전용 트랜잭션을 허용함
     * 이 설계는 고트래픽 쓰기 집중 웹사이트의 병목을 해당 단일 Writer의 처리량 관리에 두고 있음. 이는 현대 기술의 핵심 구성요소 중 하나로 다시 돌아옴

    SQLite

     * SQLite는 기본적으로 엄격한 SERIALIZABLE Isolated 트랜잭션을 제공함. 이는 Isolation 보증의 가장 강력한 수준임
     * 단일 Writer를 사용함으로써 SQLite는 쓰기 트랜잭션이 진행되는 동안 기본 데이터가 변경되지 않았음을 쉽게 보장할 수 있는 Pessimistic concurrency control 형식을 사용하고 있음

    Postgres

     * Postgres는 실제로 SQL 표준에서 정의된 SERIALIZABLE 기본값과 다르며, 더 완화된 READ COMMITTED를 선택함(훨씬 더 복잡한 Multiversion concurrency control에도 불구하고)
          + 이러한 엄격성 감소는 non-repeatable reads의 위험이 있음. 즉, 동일한 트랜잭션 내에서도 다른 COMMITTED 트랜잭션에 의해 백그라운드에서 값이 변경되면 동일한 읽기 쿼리를 여러 번 실행할 때 다른 결과를 검색할 수 있음
          + 이 Isolation 수준을 선택함으로써 Postgres는 트랜잭션이 오래된 데이터로 작동할 위험을 열어둠. 개발자는 이 사실을 명심해야 함
     * SERIALIZABLE로 설정하면 Postgres는 optimistic-concurrency control 체계를 사용하여 transaction 중에 액세스한 데이터를 추적하고 커밋 전에 변경되지 않았는지 확인함
          + Postgres는 메모리 사용량을 관리하기 위해 transaction에 따라 row level 또는 page level의 잠금을 기반으로 이를 수행함
          + 이 패턴은 transaction이 커밋될 때 transaction에 의해 모니터링되는 데이터가 더 세분화될수록 변경될 가능성이 적기 때문에 기본 데이터가 변경되지 않을 것으로 예상되기 때문에 optimistic이라고 함

    FoundationDB

     * 트랜잭션은 관계형 데이터베이스에만 국한되지 않음. 분산 키-값 저장소에서 SERIALIZABLE 보장을 달성하기 위해 Optimistic concurrency control 사용
     * NoSQL이 등장했을 당시, ACID 보증이 있는 분산 NoSQL 저장소는 일반적이지 않았음. FoundationDB는 트랜잭션 매니페스토를 작성하여 개발자가 ACID 보증으로부터 크게 혜택을 받을 수 있음을 강조함
     * FoundationDB는 Optimistic concurrency control을 위한 코드 작성 방법과 때로는 동시 트랜잭션 충돌로 인해 데이터가 변경되고 트랜잭션이 자동으로 재시도된다는 사실에 대한 조언을 제공함

  Idempotence

     * 멱등 트랜잭션은 한 번 커밋할 때와 두 번 커밋할 때 동일한 효과를 갖는 트랜잭션임
     * FoundationDB는 트랜잭션을 멱등으로 만들기 위해 충돌로 인해 트랜잭션을 여러 번 재시도해야 하는 경우 문제 방지를 위한 패턴을 제공함

   그렇다면 이 모든 것을 염두에 뒀을때 SQLite는 어떤 옵션을 제공할까?

BEGIN …

   SQLite는 개발자들이 WAL 모드에서 DEFERRED vs IMMEDIATE로 축소될 수 있는 IMMEDIATE, EXCLUSIVE, DEFERRED 키워드 형태로 트랜잭션이 동작할 방식을 엔진에 표시할 수 있는 여러 방법을 제공함

    DEFERRED

     * 트랜잭션이 다른 읽기 또는 쓰기 트랜잭션과 동시에 실행될 수 있는 READ 모드로 시작됨
     * DB 상태를 수정하는 쿼리(INSERT, UPDATE, DELETE)가 실행되는 경우에만 차단 READ-WRITE 트랜잭션으로 업그레이드됨
     * 업그레이드시 DB가 다른 트랜잭션에 의해 잠겨있으면 SQLITE_BUSY 오류 반환. 클라이언트가 이를 처리해야 함

    IMMEDIATE

     * 트랜잭션이 즉시 READ-WRITE 모드로 시작됨
     * 쓰기 트랜잭션이 이미 실행 중인 경우 즉시 SQLITE_BUSY 반환
     * 클라이언트가 처리 방법을 결정해야 함

    CONCURRENT

     * SQLite에는 트랜잭션을 Pessimistic에서 제한된 Optimistic으로 이동하는 실험 지점이 있음
     * 제한된 이유는 Optimistic locking이 행/튜플 수준이 아닌 DB 페이지 수준(기본 4096 bytes)에서 작동하기 때문
     * CONCURRENT 모드에서 SQLite는 여러 쓰기 트랜잭션을 동시에 활성화할 수 있지만, 커밋 전에 트랜잭션 수행 중 액세스한 페이지가 트랜잭션 시작 이후 변경되지 않았는지 확인함
     * 충돌이 발생하지 않으면 변경 사항이 순차적으로 커밋되고 엄격한 SERIALIZABLE 보장을 달성함. 충돌 발생시 SQLITE_BUSY 반환

    HC-Tree

     * SQLite의 또 다른 실험 브랜치는 [HC-Tree]로, 낙관적 행/튜플 수준 잠금을 제공하는 것을 목표로 하는 진행 중인 작업임. 흥미로운 결과 중 하나는 그러한 설계의 성능 이점을 BEGIN CONCURRENT 브랜치와 비교하여 보여주는 우수한 벤치마크 세트를 제공한다는 것

   그들의 벤치마킹 접근 방식을 가져와서 표준 옵션에 대해 실행해 보는 것은 어떨까?

벤치마킹

    nUpdate=1, nScan=0

     * 이 write-only 트랜잭션은 IMMEDIATE vs DEFERRED의 이점이 분명함을 보여줌. Locking은 즉시 발생하며 트랜잭션은 upgrading 비용의 영향을 받지 않음
     * CONCURRENT는 스레드 수가 늘어나고 충돌이 증가함에 따라 처리량 증가를 보여줌

    nUpdate=10, nScan=0

     * 예상대로 write 일괄 처리는 16 스레드에서 업데이트된 행 수에 많은 도움이 됨. CONCURRENT는 ~12k/sec에서 ~19k/sec로 증가함
     * IMMEDIATE vs DEFERRED는 덜 중요해짐. 트랜잭션 업그레이드 비용보다 업데이트 자체 비용이 더 중요해지기 때문

    nUpdate=1, nScan=10

     * 이 트랜잭션은 random read로 인해 page 수준 CONCURRENT locking의 약점을 노출시켜야 함
     * 업데이트할 트랜잭션에 IMMEDIATE를 사용하는 것이 DEFERRED 업그레이드 비용보다 중요한 이유를 바로 보여줌
     * CONCURRENT의 경우 기본 충돌이 실제로 크게 증가하지 않았기 때문에 이러한 결과가 매우 견고함

    nUpdate=0, nScan=10

     * 이 read-only 일괄 처리 트랜잭션은 Pessimistic concurrency control의 영향 보여줌
     * 모든 트랜잭션에 IMMEDIATE를 기본값으로 설정하면 안 되는 이유를 보여줌
     * CONCURRENT vs IMMEDIATE는 CONCURRENT 모드를 사용할 때 약간의 단점이 있음을 나타냄. ""모든 경우에 성능이 약간 떨어짐""
          + 하지만 CONCURRENT는 좋은 기본 옵션이 될 것임
"
"https://news.hada.io/topic?id=16067","마이크로소프트의 CrowdStrike 사건 기술 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     마이크로소프트의 CrowdStrike 사건 기술 분석

CrowdStrike 정전 사태의 기술적 분석

     * CSagent 드라이버의 메모리 안전 문제, 특히 읽기 범위를 벗어난 액세스 위반이 근본 원인이었음
     * Microsoft의 WinDBG 커널 디버거와 무료로 제공되는 여러 확장을 활용해 분석을 수행함

CSagent.sys 드라이버의 기능

     * CSagent.sys 모듈은 안티맬웨어 에이전트에서 일반적으로 사용하는 파일 시스템 필터 드라이버로 등록되어 있음
     * 파일 생성이나 수정과 같은 파일 작업에 대한 알림을 수신하는 데 사용됨
     * 브라우저를 통해 파일 다운로드와 같이 디스크에 새로운 파일이 저장될 때마다 보안 제품이 스캔하는 데 사용
     * 시스템 동작을 모니터링하려는 보안 솔루션의 신호로도 사용 가능
     * CrowdStrike는 콘텐츠 업데이트의 일부가 sensor의 named pipe 생성 관련 로직 변경이었다고 설명함
     * 파일 시스템 필터 드라이버 API는 드라이버가 시스템에서 named pipe 활동(예: named pipe 생성)이 발생할 때 호출을 수신할 수 있게 해 악성 행위 감지를 가능하게 함

CrowdStrike의 다양한 드라이버 모듈

     * CrowdStrike는 CSBoot, CSDeviceControl, CSAgent, CSFirmwareAnalysis의 4개 드라이버 모듈을 로드함
     * 그 중 하나는 CrowdStrike의 사고 후 검토 타임라인에 따라 동적 제어 및 콘텐츠 업데이트를 자주 받음

CrowdStrike 드라이버 관련 충돌 보고서 수의 변화

     * 이 특정 CrowdStrike 프로그래밍 오류로 인해 생성된 Windows 충돌 보고서 수를 파악함
     * 충돌 보고서를 생성한 장치 수는 Microsoft가 이전 블로그 포스트에서 공유한 영향을 받은 장치 수보다 적음
     * 이는 충돌 보고서가 표본 추출되고 충돌 보고서를 Microsoft에 업로드하도록 선택한 고객에서만 수집되기 때문
     * 충돌 덤프 공유를 활성화하도록 선택한 고객은 드라이버 벤더와 Microsoft가 품질 문제와 충돌을 식별하고 해결하는 데 도움이 됨

높은 보안 모드로 Windows를 배포할 수 있는지?

     * Windows는 통합 도구를 사용하여 잠글 수 있고, 보안 기본값을 지속적으로 높이고 있음
     * Windows 11에서는 기본적으로 수십 개의 새로운 보안 기능이 활성화됨
     * 통합 보안 기능에는 보안 부팅, 측정된 부팅, 메모리 무결성, 취약한 드라이버 차단 목록, 로컬 보안 기관 보호, Microsoft Defender 바이러스 백신 등이 있음
     * 이 보안 기능은 최신 Windows에서 맬웨어와 익스플로잇 시도에 대한 보호 계층을 제공
     * 표준 사용자로 실행하고, 필요할 때만 권한 승격하는 등의 모범사례를 따르는 회사는 MITRE ATT&CK 기술의 많은 부분을 완화함

향후 계획

     * Microsoft는 에코시스템과 협력해 안티맬웨어 업체가 Windows의 통합 기능을 활용해 접근방식을 현대화하고 보안과 안정성을 높이도록 도울 것임
     * 안전한 롤아웃 지침, 모범사례, 기술을 제공해 보안 제품 업데이트 수행을 더 안전하게 만듬
     * 중요한 보안 데이터에 액세스하기 위해 커널 드라이버가 필요한 경우를 줄임
     * VBS 엔클레이브와 같은 기술로 향상된 격리 및 변조 방지 기능 제공
     * 장치의 보안 상태를 Windows 기본 보안 기능의 상태에 따라 판별할 수 있는 방법인 고무결성 증명과 같은 제로트러스트 접근법 활성화
     * Windows는 Microsoft의 Secure Future Initiative의 일환으로 Rust 프로그래밍 언어에 대한 약속을 발표했으며, Windows 커널의 Rust 지원을 확장함
     * CrowdStrike 사고 후 학습과 다음 단계를 알리기 위한 약속의 일환으로 이 블로그 포스트의 정보를 제공함

        Hacker News 의견

     * Microsoft는 보안 소프트웨어의 현대화를 위해 안티멀웨어 생태계와 협력할 계획임
          + 업데이트를 안전하게 수행하기 위한 지침, 모범 사례 및 기술을 제공함
          + 중요한 보안 데이터를 접근하기 위해 커널 드라이버의 필요성을 줄임
          + 사용자 모드에서 실행되는 기능을 나열하여 커널 모드에서 실행되는 항목을 줄이려 함
     * CrowdStrike의 분석을 기다려야 할 것 같음
          + 보안 소프트웨어가 역사적으로 커널 모드에서 실행된 이유를 설명함
          + Microsoft는 보안 벤더들이 사용자 모드로 이동하도록 새로운 기술을 추진 중임
          + CrowdStrike는 이미 Mac과 Linux에서 사용자 모드로 실행 중임
          + Windows에서도 사용자 모드로 실행하면 블루스크린 같은 치명적 오류의 위험을 줄일 수 있음
          + Apple이 보안 벤더들을 커널 모드에서 제외한 것처럼 Windows도 그렇게 했다면 이런 문제가 발생하지 않았을 것임
     * eBPF에 대한 언급이 없다는 점이 주목할 만함
          + eBPF는 Linux에서 표준이며 Windows에서도 사용 가능하지만, 아직 주요 Windows OS에 도입되지 않음
          + 정적 분석은 Blue Friday 버그를 잡을 수 있었을지 모르지만, 현재의 커널 모듈 모델보다 보호 수준을 높임
     * Microsoft 자체가 CrowdStrike의 주요 경쟁자라는 점이 놀랍지 않음
     * 마케팅 및 법무 부서의 검토를 거쳤을 것임
          + 사건에서 배운 점을 바탕으로 개선하는 OS/배포판을 선택하는 것이 중요함
     * Microsoft만이 사용자들이 할 수 있는 일을 결정하는 대안은 더 나쁨
          + 디지털 전체주의를 옹호하는 사람들이 있음
     * 디버그 과정의 흐름과 리소스 링크가 포함된 기술적 분석이 좋았음
          + 더 많은 디버그 회고가 이렇게 되었으면 좋겠음
     * MS나 CrowdStrike의 발표에서 이 충돌이 어떻게 QC를 우회했는지 설명하지 않음
          + 100% 재현 가능한 충돌이 QC의 초기 단계에서 잡히지 않은 것이 이해되지 않음
     * Control Flow Integrity (CFI/XFI) 연구 경험이 있음
          + 커널 모듈을 샌드박싱하는 것이 가능했음
          + 현재는 적절한 플래그로 코드를 컴파일하여 메모리 안전 오류를 완전히 배제할 수 있음
          + BSOD를 정중한 로그 메시지로 바꾸고 결함 있는 드라이버를 비활성화할 수 있음
"
"https://news.hada.io/topic?id=16109","모든 C 코드를 Rust로 변환하는 기술 (TRACTOR)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    모든 C 코드를 Rust로 변환하는 기술 (TRACTOR)

     * C를 Rust로 번역하기 (TRACTOR)
          + Dr. Dan Wallach
          + 20년 넘게 C와 C++의 메모리 안전성 문제를 해결하려는 노력 끝에, 소프트웨어 엔지니어링 커뮤니티는 결론에 도달함
          + 버그 찾기 도구에 의존하는 것만으로는 충분하지 않음
          + 컴파일 시점에서 안전하지 않은 프로그램을 거부할 수 있는 ""안전한"" 프로그래밍 언어를 사용하는 것이 선호됨
          + TRACTOR 프로그램은 기존 C 코드를 Rust로 자동 번역하는 것을 목표로 함
          + 숙련된 Rust 개발자가 작성한 것과 동일한 품질과 스타일을 달성하여 C 프로그램에서 발생하는 메모리 안전성 보안 취약점을 제거하는 것이 목표임
          + 이 프로그램은 정적 분석, 동적 분석, 대형 언어 모델과 같은 기계 학습 기술의 새로운 조합을 포함할 수 있음
          + 추가 정보는 SAM.Gov의 TRACTOR Special Notice에서 확인 가능함
     * DARPA의 주요 성과
          + 스텔스 혁명
               o DARPA의 스텔스 기술 연구 초기, F-117A의 프로토타입인 Have Blue가 1977년에 처음으로 성공적으로 비행함
               o F-117A 프로그램의 성공은 스텔스 혁명의 시작을 알렸으며, 이는 국가 안보에 엄청난 이익을 가져옴
          + 손바닥 안의 내비게이션
               o 초기 GPS 수신기는 크고 무거운 장치였음
               o 1983년, DARPA는 이를 소형화하기 위해 노력하여 GPS 기능의 훨씬 더 넓은 채택을 이끌어냄
          + 현대 인터넷의 길을 닦다
               o ARPA 연구는 정보 혁명을 시작하는 데 중요한 역할을 함
               o ARPANET의 개념적 기초를 개발하고, 디지털 프로토콜을 발명하여 인터넷의 탄생을 이끌었음
     * GN⁺의 정리
          + TRACTOR 프로그램은 기존 C 코드를 Rust로 자동 번역하여 메모리 안전성 문제를 해결하려는 중요한 시도임
          + DARPA의 연구는 스텔스 기술, GPS 소형화, 인터넷의 탄생 등 현대 기술 발전에 큰 기여를 함
          + 이 기사는 소프트웨어 엔지니어와 기술 역사에 관심 있는 사람들에게 유익할 수 있음
          + 유사한 기능을 가진 프로젝트로는 Microsoft의 Checked C와 Google's Carbon 언어가 있음

        Hacker News 의견

     * 숙련된 프로그래머가 작성한 Rust는 C와 매우 다르며, 대부분의 흥미로운 코드는 C++로 작성됨
          + C 프로그램의 모든 할당 수명을 정적으로 결정하는 것은 매우 어려운 문제임
          + C/C++ 프로그램은 사용자 클릭과 같은 이벤트에 할당 수명을 연결할 수 있음
          + 분석하려는 프로그램이 버그가 있는 경우 수명이 의미가 없을 수 있음
          + 기존 연구는 분석 대상 코드가 올바르다고 가정함
     * 이 제안이 공개된 것이 흥미로움
          + 자동 번역의 실현 가능성에 대해 기대를 조절하려고 노력함
          + C 소스 코드에는 Rust 소스 코드보다 정보가 적음
          + 누락된 정보를 생성하는 것은 불가능함
          + 올바르게 추론하려면 판단이 필요하며, 이는 오류가 발생할 수 있음
          + 프로젝트가 어느 정도 성공할 수 있지만 신중하게 접근해야 함
          + 정부의 프로젝트가 C에 대한 전면적인 비난이나 Rust에 대한 전면적인 찬양으로 해석되지 않기를 바람
     * ""Rust로 세계를 다시 작성하자""는 사고방식을 좋아하지 않음
          + 프로젝트를 새로운 언어나 플랫폼으로 포팅하려면 기계적 번역은 좋지 않음
          + 더 나은 아키텍처를 계획하고 소프트웨어 시스템을 설계하는 데 시간을 투자해야 함
          + Rust를 사용하기로 결정했다면 Rust로 작성해야 함
          + C를 현대적인 C로 업데이트하고 모델 체커를 사용하여 메모리, 리소스, 정수 수학 안전성을 검증하는 것이 더 나음
     * 많은 사람들이 이 프로젝트를 C와 C++ 코드를 Rust로 번역하라는 요구로 읽고 있음
          + C와 C++는 기본적으로 안전하지 않음
          + 가능한 한 많은 코드를 안전한 언어로 번역하거나 작성해야 함
          + 기존 C 코드를 Rust로 번역하는 소프트웨어를 지원하고 있음
          + Rust로 세계를 다시 작성하자는 합의가 아니라 안전한 언어로의 마이그레이션을 목표로 함
     * 번역된 코드베이스를 유지하는 데 문제가 있음
          + C로 작성된 코드베이스와 이를 유지할 수 있는 C 엔지니어 팀이 필요함
          + 자동 번역된 Rust 코드베이스는 원본보다 읽기 어렵고 이해하기 어려울 수 있음
          + Rust 엔지니어 팀이 필요함
          + Rust 엔지니어가 이미 있다면 수동으로 코드를 다시 작성하는 것이 더 나음
     * 자동으로 포팅하는 프로그램이 C 코드를 안전하게 만들 수 있는 모든 기능을 포함해야 함
          + Rust에는 메모리 버그가 없고 C를 자동으로 번역할 수 있다면 모든 메모리 버그를 자동으로 수정할 수 있음
          + 이는 일반적으로 불가능함
     * Mozilla에서 해고된 유능한 엔지니어를 먼저 고용하여 언어 자체를 계속 작업하게 하는 것이 좋음
          + 비동기 처리가 아직 완전히 완료되지 않음
          + 여러 가지 문제점이 있음
     * DARPA가 이 문제를 추진하는 것이 좋음
          + 안전한 Rust로 번역하는 것은 매우 어려움
          + 현재 C에서 Rust로 번역하는 도구가 있지만 결과는 유지 관리가 어려움
          + 올바르게 수행하려면 배열 크기와 비선형 포인터 사용 문제를 해결해야 함
"
"https://news.hada.io/topic?id=16124","OpenAI, 보이스 모드를 일부 ChatGPT Plus 사용자들에게 배포 시작 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OpenAI, 보이스 모드를 일부 ChatGPT Plus 사용자들에게 배포 시작

     * 고급 음성 모드는 더욱 자연스러운 실시간 대화를 제공하고, 언제든지 중단할 수 있으며, 사용자의 감정을 감지하고 반응함
     * 이번 알파 버전에 참여하는 사용자에게는 모바일 앱에서 지침과 메시지가 담긴 이메일이 전송됨
     * 지속적으로 사용자를 추가하여 가을에는 플러스 사용자 모두가 이용할 수 있도록 할 계획
     * 동영상 및 화면 공유 기능은 추후에 출시될 예정
     * 45개 언어에 걸쳐 100명 이상의 외부 레드팀원과 함께 GPT-4o의 음성 기능을 테스트 함
     * 사람들의 개인정보를 보호하기 위해 미리 설정된 네 가지 목소리로만 말하도록 모델을 훈련시켰으며, 이 목소리와 다른 음성은 출력되지 않도록 차단하는 시스템을 구축
     * 또한 폭력적이거나 저작권이 있는 콘텐츠에 대한 요청을 차단하는 가드레일을 구현
     * 이번 알파 테스트에서 얻은 교훈은 모두에게 더욱 안전하고 즐거운 고급 음성 경험을 제공하는 데 도움이 될 것
     * 8월 초에 GPT-4o의 기능, 한계, 안전성 평가에 대한 자세한 보고서를 공유할 계획

   기쁘게도 오늘 저는 이 모드를 얻었어요.

   증거에요

   https://imgur.com/a/hada-news-U7M8o0b

   음성모드 누르고 오른쪽 위의 ?를 누르니 아래와 같이 나오네요ㅠ 저는 아직 고급 음성 모드가 아닌가봐요..

   고급 음성 모드 준비 중
   고급 음성 모드 출시를 순차적으로 시작 했습니다. 안정적인 품질로 제공하기 위해 사용자들을 차근차근 알파 버전에 등록하는 중입니다. 가을 말 즈음에는 모든 Plus 사용자 께서 고급 음성 모드에 액세스하실 수 있을 겁니다. 이용 가능하게 되면 곧바로 알려 드리겠습니다.

   가능하면 UI로 알려주고 헤드폰 대신 파장 같은 아이콘으로 바뀌어요

   정말이세요?! 한국사용자들에게도 알파 권한이 주어지고 있는걸까요.

   넵, 저도 한국인이에요.
"
"https://news.hada.io/topic?id=16104","rrweb - 웹용 레코드 & 리플레이 디버거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       rrweb - 웹용 레코드 & 리플레이 디버거

     * 사용자 인터랙션을 녹화하여 다시 재생해주는 도구
     * 3가지 요소로 구성됨
          + rrweb-snapshot : Snapshot & Rebuild
               o 스냅샷: DOM과 그 상태를 고유 식별자를 가진 직렬화 가능한 데이터 구조로 변환
               o 리빌드: 스냅샷을 해당 DOM으로 다시 빌드
          + rrweb : Record & Replay
               o 레코드: DOM의 모든 변화를 기록
               o 리플레이: 기록된 모든 변화를 타임스탬프에 따라 하나씩 재생
          + rrweb-player : rrweb을 위한 플레이어 UI. 멈춤, 빨리감기, Drag & Drop 을 지원
"
"https://news.hada.io/topic?id=16011","유닉스 파이프 카드 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             유닉스 파이프 카드 게임

    UNIX Pipe 카드 게임

     * UNIX 명령어를 파이프로 결합하는 방법을 가르치는 카드 게임
          + 기본 UNIX 명령어(cat, grep, tail, head, wc, sort, uniq)를 알고 있어야 함
          + 컴퓨터에서 명령어를 실행해 보여주는 것이 좋음
          + UNIX 시스템이 없다면 브라우저에서 jslinux를 사용할 수 있음
     * 구매 옵션
          + 구매: €5,00 EUR
          + 직접 인쇄: unix-pipe-cards.pdf, unix-pipe-box.pdf
          + 코드: unix-pipe-game
          + 저자: github.com/jackdoeco
          + 연락처: b0000@fastmail.com
          + 라이선스: CC BY 4.0
     * 확장팩
          + 더 어려운 버전을 원한다면 확장팩(UNIX Pipe Game - Process Substitution)을 사용할 수 있음

    게임 예시

     * 예시 게임 라운드
          + 작업: 파일에서 가장 흔한 줄을 출력
          + 명령어: cat 03.txt | sort | uniq -c | sort -n | tail -1

    규칙

     * 게임 규칙
          + 가장 어린 플레이어가 두 가지 형식 중 하나를 선택
               o 가장 짧은 파이프 체인을 완성하는 사람이 승리
               o 가장 긴 파이프 체인을 완성하는 사람이 승리
          + 가장 어린 플레이어가 작업 카드를 선택 (같은 작업을 두 번 선택할 수 없음)
          + 카드를 섞음
          + 카드를 뒤집어 테이블에 놓음
          + 시계 방향으로 각 플레이어가 덱에서 카드를 뽑아 작업을 완료하려고 시도
          + 작업을 처음 완료한 플레이어가 점수를 얻음
          + 더 이상 작업이 없으면 게임 종료

    작업 목록

     * 작업 목록
          + 두 번째 줄 출력
          + 끝에서 두 번째 줄 출력
          + 7번째 줄 출력
          + 가장 흔한 줄 출력
          + 가장 드문 줄 출력
          + ""rises""가 포함된 줄 수 세기
          + W가 포함된 첫 번째 줄 출력
          + ""in""이 포함된 줄 수 세기
          + 두 개의 임의의 줄 표시
          + 마지막 두 줄의 단어 수 세기
          + 7번째와 8번째 줄 출력
          + !가 포함된 줄 수 세기
          + !가 포함되지 않은 줄 수 세기
          + 아무것도 출력하지 않는 명령어 체인 만들기

    카드 덱 모습

     * 카드 덱 모습
          + 부모가 자녀에게 가르칠 때 사용할 수 있는 다른 카드 게임도 있음
               o Programming Time: 파이썬과 기본 알고리듬을 가르치는 게임
               o The C Pointer Game: 포인터, 배열, 문자열을 가르치는 게임
               o 4917: 기계 코드와 CPU의 메모리 및 레지스터 작동 방식을 가르치는 게임
               o The Unix Pipes Game - Process Substitution: 프로세스 치환을 가르치는 확장팩
               o RunLength Encoding for Kids: 런길이 인코딩을 설명하는 작은 카드 게임
               o PUNK0 - The Function Composition Card Game: 리스트를 조작하고 값을 사용하여 승리하는 게임
               o PROJEKT: OVERFLOW: RISCV 어셈블러 보드게임
               o Programming for kids: 딸에게 코딩을 가르치는 여정을 기록한 로그

    GN⁺의 정리

     * UNIX Pipe 카드 게임은 UNIX 명령어를 재미있게 배우고 익힐 수 있는 좋은 도구임
     * 부모와 자녀가 함께 학습할 수 있는 다양한 카드 게임을 제공하여 교육적 가치를 높임
     * 프로그래밍과 컴퓨터 과학의 기본 개념을 쉽게 이해할 수 있도록 도와줌
     * 비슷한 기능을 가진 다른 교육용 게임으로는 ""Programming Time""과 ""The C Pointer Game""이 있음

   8,000₩이네요 사본분 있으시면 후기 부탁드려요
"
"https://news.hada.io/topic?id=16033","Show HN: Wat – Python 객체의 심층 검사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: Wat – Python 객체의 심층 검사

     * 🙀 WAT Inspector
          + Python 객체를 깊이 검사하는 도구
          + WAT는 런타임에 알 수 없는 객체를 조사할 수 있는 강력한 검사 도구
          + ""Wat""는 혼란이나 혐오를 표현할 때 자주 사용되는 영어 단어 ""what""의 변형
          + Python 콘솔에서 wat / object를 실행하여 객체의 타입, 형식화된 값, 변수, 메서드, 부모 타입, 서명, 문서화, 소스 코드 등을 조사할 수 있음
          + wat(object) 구문도 사용 가능
     * Import
          + Insta-Load
               o 설치 없이 동일 세션에서 이 검사 도구를 빠르게 로드할 수 있음
               o Python 인터프리터에 다음 스니펫을 붙여넣기:
import base64, zlib
code = b'eJzNWumO20YS/u+naEx+iLJpxRPvASiRd5144hhwkoUz2cCYGRCUSM0wpkiBpGxPtALyEPsM+2D7JFtHH9U8JM1sAsSAR1J31dddR1dXV/eyKlcqiZt4kcd1ndYqW63LqnFND3RDVtTrdNGouFZ1k0T6p+ktLV2Vmm/1bf1gifDN7Torrg3y8+I2VC+yRROq11kNf79fN1lZxHmozm/XaaheNWkVz3P49mMBHQ/+7uZCf9UrHvurslhm19MHCv7VNwA9VfOyzOl3simStBINRZmUi1o05GVxLX4uyiTVP4fGe940VTbfNCkPWcQr4Kibin69j/MN/ATh6CeIDL9QHkaP8xxF2jfDdZW9jxtJUmfXRdxsKmgzOrqA8a6Yv1y0m5N0acwUEE05/5mmFNKvh2FbVWqmvo7zOg07M/J7pPL8HqdFv92p028HPbSbx6zOk5MT+jz7GK+yIlXNTYrzB1lG4JTFsqxWMQobqnqzuEE3zJqa9Bwq7mzShM0QwkeVob7rUK3S5qZM6tAobbNKi4aQVFmputxUi5SmOyGK6Tqu4hVrjodXTWm0Kim0Gj/cAH5aIREYsGi4XZWbZr1p1IcMBofP2LhOrYIizYjDzhHUW5lpjuUQrNzOCEVZPI7n8yp9n8VW5lrFReLLJ6GMbTtg3CEmKLnYil0RndJUuVSxWm6KBduGxUDN8gISYMaJBNxNBgi+TcCUFo5l0oFJQpEXCZysWOQbgIJ26SqeX9HUA23IiGl4leiVErLpZvQ31IqZaf3ArAA8JJPM8I9tYbFm/BGSUmasGSKgEcZjuTa9wf9YS3SsHj/DkDbVFBhgodcLuMGwmjrasOoSimEX5wUypS2AohcMc8GRDX5F5NPQpHXFvwNQFnNX6VrTUAQGQmxx/dlSkKjZDImoF63i90TQla2jRZmXVWCH1kHJzXQSr9dpkQTL0faH87evz6Iv37x6+c159OXrH892PJPtm7Mfzs53amt
RdiOeTgrKvRMgmmAY7kgQlNOhyP7d1ulgpyk0Ng6GQVXoHn8G9Ac1KM23d3jaAj0hsMWMAwsZ1nwthuEWIqo9S2rSOynQ8NjxdYMZHmCzGtZjExcLkitUQU7ZSEKZCUw3VPPbBncQ/IirKoa0pdmsMS+pUyCB1OaXtKCvVVxcp+O7+UyeFm52vptDF6tazNZkENThBsIkBHR4nTYYwVmQURRhcxSN4Pt/f/2P8BqbUaDegSkysJHtCZA3VNYAx3qszVWcyU2TEQNighkXvvJkKUKcV5vUSopUGPeLstERaMLhhHeDfj0w32RRbiDIjy6L0RjX9hNHsEeMl2+ev93BNrEFBPr0FkR3/Qqo9GODUBcdLFA9oIGTjATglbMmy0X7BEoViJR6ktW05dl45YksZNbbsNYo/4oQMvCMB8Nx31HK8Gzq9nlj1ctiy63CNYWheOOy44i0B0IwdKVJEGWQ3keuh92A+cehepfezvJ4NU9i4p7S3wn6ZMcdtfIjWNiJhqyjOqXUIXADWHA7YTiYTEDhAAO6BsLbYDxV6hMFk89+KSETydU8ruxwMF/ISOM8+pAlzQ1IUtYT1Lhtr7Nf0mAM1sw3q6JuTxPMmlZN8CRUWsOgWvUIVua/fx2ph230R4oUPbT27gzRgJZgyrgkJj+XWQFRDpJrzLLoS1aYVBX0wi01GfS7skg9C/cpTaiIRvH2UmwzuzVEgYKIKA/qcwFOgrSppn7GQVmJORVetE9jVzwNcBz0siQTaQCKCe0oJXa7+eqsbobNIFVcNTWm6gGETogcuCKxAxQumr1Yo7NmP0zp7MxbZtDVZMUmtY36mNc3th4aERnKMtl0CP3OKs5lRbRu3AxtVAcWGz04r7nTVgCgIY89lntQRAGRXMRp1I/t+hxG0V1rB78fhLnN0jzpHLgDT6UYDGY4Na+VRpzxuF4HJhQzSl9YEr/XTGZmZ+X3+/mt16UtOdOffqdV4sx+awGXixluEbaRzwh
DFtbrA8SmjJeWBLSwszXVrfM6vdq8lMB6R/pxka4b9WVcp2f0Fc9ccJZOO/ypm85AkjDlLMlMjqbkFSR6JhdJt8OkXG58Dt4lmnrCwT9REWdVVVZcJqKv4wHgkwDSnvGJjfcDm+tULMp0mX1ETq74nOi0vctcVhABIU6aM+ogUFzfFguFOhwEO4ixl5uP2vfjnW+yHKQ4lvkmrvvSy4OsMmtyFCdyU3CJB2YcW6ba+cnIyzdnZ9/ttjjqzuZZ1OSsbo8xzm1bGdHxTqqnJlUGeAznNhfjmd//0HbLEAJYYioa7Kj9a2w5WsZZniZYw4ARZGFlqrYUs9LxDr6mUi6dO+uI4I73Q7JxaG5Jo0G8rBu2fgzGnWnaCM1ImGjTRh9YbppEmw3oevxAd0aUKqYFpQzFdQDEOgCKdC4yNbKAc8H2vrAvX7BVDAqhEVcJzDmLBtfBlRLMof2KnQMM0QIg2xAnfhv7Hq3803b09uz16+9/2m1tKmu8WHdoW+MQOxhja2dsrC5Vopd9v0J8yXXmRsO681nXCWG+bmoUOkeGn9qx1CyzH9N44LjVwXeLVcnj0ie6G49fdhUbkO7Raw/sFI4n/jkMGiz2ZSHOYsOe2Qes7dDjPa7u31mKez1QcO9fRZZZ+lh79ViisTfR7hQzCkxThWVcMFjHX0RRRC8JBO3q6MSLw6Otrk9p7dqdl/PWobhiY/+3z1+efXf+fIdUnoEkBBYJhiG8rQJJB3Go1HkQ6M3Zix1RtnG6GgpAmXDSz8u4GfeoygAj4tYvuQ1jYhWqi2Xsir3SuMauM/54dNpX5DIhLqv3IGPvEcj9boBFPu3SO+sJ0h/FvOHrVN8CCp/0/RHPo3VviThz+ysebrEJD8LcLI9+obF7gSqdwMFzVcuDK5D0LkxiZTh3ZDqwjrsMJIAosYhp77Z6aIz+LuCHrqzC0rvz2gqy8IgRMIvCthOQOeCmx6du2FWWJJCtE0Dn7F+PBz3U7FNbV+y
RUFT8EbNo7WK73TGxtT3UrpW4df0wr/U1wb08Bf3AugBC/UbWbPmceoSy/bHseHEvM17d3YoXV702tPcGEd+E+yZblckmx8MaUUyiiBuiyOhNE+jNAwuhhoVOjsBBZ7VI8lIZjw43j8Hcjbl+3+eBZng+0/g+PMTDw+0mg8w2V/cuNdq6sCUtl6uLwxZR03FrVZX+aQudGo33MVRzOMnzhQ0InBabFUA2Wu0TzTr2EyjcFpC5J2XDf52KleYRI9X6avxIZi7qeG5hwfyEpX0H5M5s1m+0TfBugxdDv565hKDRW9kSFiJdFcUiL7OqbmiNhAoUX6U1LlAkngB8k9FRnZJdYyokEVax/MAmfjziWxgbD9IicL1j9UydPnlyEOViClRXHpbxTjkSOWDn0NBXFtfRslNNPaoG6xx2vZnn2YJHwaiLX8g/6Qv4pLgDkOcRUwY1BU/O0qnKxoFbExyNLFH1C5mNU8CxAN4MWDQ4g/aze6JL2Uy9zBdkGMeTdBhIyzOI48m7Zz48bf3g5CjJ9ki1F6Yt2LBQ+2DacvWg4C2xsBYw+1K65cWxSNegXIPNZPUF+T+IXXjI1DvamCDcUhgOPu0LfYM1DXs5Jc/XUhRcH0Oy9MrTM609jEOlBXf5Lr0X9erb/e6KNev+WM2K8X8L1UpxSLdD8hxW7mHOg9r1Lo74BZdw9jsr90X7Mdd+3YqA8huoVoYnIcndFXuYcVivXL7/KW7so0K9i1HGxCdhrLam+pXhpnhXlB8Knc/U9GDPPOFbYypVVrV5QUa7KiTNWRNFQZ3my1A9fPjuQ1xd1/JWHjomEb1Tw3DG/YKfXt4wv59+CGZ8qhbdpLmpsOI/k/eMBBY+qhmCMvRfgDKUUwIL+kygiNEIqXOru0QFnFe3ys+CPwDupxrPvPmAATpEE8iWs2WWglu0yd3LSvCYFqdHOWm9X/rWQBqkmAubXjmCXyN0p2Z6xSzoIaJ8pOkeZ6Iri8eZPgZW7AT
Mnd9n+mjs+B28vieaPiNeGHTY7vRK08fj9zZt/Rz/UNNHg53aM3j/W82vsKHrPHkJO329z7+CcY87+VQM4gitdSdDw17n5VyMO4is6XqhYdl49yQ6Th58TCGW3sCDCvzH71ldm87540UT0XMCDlAlPpF1pyi/DGveihMRBjMZuwQqXQC7mIcBTZeTTfxzI9CT/YsRBB04oeFwV/7VARJ7khbpBxct5QTAq9e3QnU+8WSzTvCgq+Nv3w2BEY8mjHN13PJpF8xKC9EHAoIENsofvpUwY0ZYhEgidryIY1kwljptqk2aZO+tWoWlpvYGktQhjEpEY/WJ+lQgxUlyT5RHAiWvb7Jlcy8gQPriC7nF/V9Qz54JqLK6L8y/pGz3l0ug6BcVFooepR3yefQ53Cln2pO6S8yEBXzJCdnPdkTbFtY36tGuu1YwOmn+C02K5U688vCdmp+GztQIN6nRASCiOYDD+9AhJE11AAt3pUNIRHMAh3eqQ0ia6gAWBLlDQEhyUNu45Ef3jg5dRL3HHAWpaXsxOyErzupU2coPPVRop49aAw+cC5uSWmtj6qmnaYgqndSbeVCNLj+ezi8vLpNHwefwZ/y3Ffo4/Oc9jFB79cJopS4VB0bDoQqYIhyHarsb661iWfGTaPneYbGpsDxIXZrMe/CBuUyEi48ecgef8XPQebx4hzs/7n6QfxF3uyjKo4k3k92SqJkQfU6WEcI+OB6ie5FlgFgP3Tst8682L8BCAaCVhM9Fc6GBJM2FgNpypTRK27PaVjFe+rua5Y+kfi3w76p/SirVbHT55OnTiyer0QN5CqIrIew4tR0vXn1rWz+zrW/OXtjWJ58/PW3heP2nsp8SeMn6WZvVpziVFJwhS+6nbe4WyalHgm+cBfOf2swewakk0M8JJPefbedXb597Iv3F9vz0zatzb8i/CkU8f+sUSz3/A3vsqZs='
exec(zlib.decompress(base64.b64decode(code)).decode(), globals())

               o 이제 wat 객체를 사용할 수 있음
               o 경고: Insta-Load 스니펫을 실행하기 전에 실행할 내용을 확인하는 것이 좋음
                    # 추출된 코드의 내용을 미리 확인:
print(zlib.decompress(base64.b64decode(code)).decode())

                    # inspection.py의 내용을 인터프리터에 붙여넣기
                    # pip으로 패키지를 설치하고 코드를 검토
          + Install with pip
               o wat-inspector 패키지를 설치하고 wat 모듈에서 검사 도구를 가져오기:
pip install wat-inspector
import wat

     * Usage & modifiers
          + wat 객체는 괄호 없이 빠르게 입력할 수 있는 / 연산자를 사용하여 객체를 빠르게 검사할 수 있음
          + wat / object는 wat(object)와 동일
          + 다음 수정자를 사용하여 wat.modifiers / object (또는 wat.modifiers(object))를 호출할 수 있음:
               o .short 또는 .s: 속성(변수 및 메서드)을 숨김
               o .long: 축약되지 않은 값과 문서화를 표시
               o .dunder: 던더 속성을 표시
               o .code: 함수, 메서드 또는 클래스의 소스 코드를 표시
               o .nodocs: 함수 및 클래스의 문서화를 숨김
               o .all: 사용 가능한 모든 정보를 포함
          + 수정자를 체인으로 연결 가능, 예: wat.long.dunder.nodocs / object
          + wat.locals 또는 wat()를 호출하여 locals() 변수를 검사
          + wat.globals를 호출하여 globals() 변수를 검사
          + 인터프리터에서 wat를 입력하여 이 객체에 대해 더 알아보기
     * Use Cases Examples
          + Determine type
               o Python과 같은 동적 타이핑 언어에서는 객체의 타입을 결정하기 어려움
               o WAT Inspector는 객체의 타입 이름과 모듈을 표시하여 도움을 줄 수 있음
>>> wat.short / (1,)
value: (1,)
type: tuple
len: 1

>>>

        Hacker News 의견

     * Waaat :D. 이 도구가 정말 좋음. 예전에 python-ls를 사용했지만 더 이상 유지되지 않음. snoop과 pdbpp를 주로 사용하며, wat에 ipy 위젯이 추가되면 좋겠음
          + base64 exec 해킹을 처음 알게 되었으며, 앞으로 사용할 예정임
     * 이 도구가 재미있어 보임. Python에서 ""dir""을 자주 사용하며, 공식 문서보다 유용할 때가 있음
          + Python의 인터랙티브 셸에 대한 혁신과 새로운 도구가 더 많지 않다는 것에 놀람
     * 이런 종류의 도구는 유용함
          + 20년 전 Zope를 위한 객체 인트로스펙터를 작성했음
          + 현재는 devtools를 매일 사용하고, icecream과 q를 가끔 사용함. wat을 시도해 볼 예정임
     * $PYTHONSTARTUP 파일에 다음 코드를 추가하면 번거로운 import를 피할 수 있음
try:
   from wat import wat
except ImportError:
   pass

     * wat은 icecream의 멋진 버전처럼 보임
          + icecream에 대해 들어본 적이 없다면, 아래 링크를 참조
          + https://github.com/gruns/icecream#icecream-in-other-language...
     * wat 프로젝트가 멋진데, ""import wat""와 같은 간단한 사용법을 제공하지 않는 것이 놀라움
          + 사용자들이 wat/wat을 시도해 보도록 유도할 수 있음
     * Python의 가장 큰 약점은 변수가 어떻게 생겼는지 정확히 보여주는 함수가 없다는 것임
          + PHP의 var_dump는 매우 유용함. wat도 최고의 도구 중 하나로 보임
     * wat 모듈은 Python 표준 라이브러리의 inspect 모듈을 사용하여 기능을 제공함
          + inspection.py 파일의 2번째 줄에 ""import inspect as std_inspect""가 있음
     * 이 도구는 Python을 배울 때 큰 도움이 되었을 것임
          + 언어를 배우기 위해 내부에서 무슨 일이 일어나는지 보는 것이 중요함
          + 기본 Python 디버깅은 실망스러움
          + 대신 pry를 설치하고 Ruby 팬이 되었지만, wat 덕분에 다시 시도해 볼 수 있음
     * Lua에도 이런 도구가 있는지 궁금함
          + Lua는 Python의 help()와 같은 내장 인트로스펙션 기능이 없음
"
"https://news.hada.io/topic?id=16028","EU 의회 의원, 이스라엘 Candiru 스파이웨어에 감염","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    EU 의회 의원, 이스라엘 Candiru 스파이웨어에 감염

        Hacker News 의견

     * EU 의회 의원 같은 고위 인사들은 거의 매일 피싱 이메일의 표적이 됨
          + 법률 제정자들은 첩보 활동의 주요 표적이 됨
          + 대부분의 일반인들도 정기적으로 피싱 이메일을 받음
          + 제목에서 기대했던 것보다 단순한 피싱 시도였음
          + 링크를 클릭하지 않아 피싱 시도가 실패했음
     * 해당 소프트웨어를 판매하는 국가는 제재를 받아야 함
          + 소프트웨어 개발에 관여한 사람들은 스파이 혐의로 기소되어야 함
     * 댓글 작성자들은 ""이스라엘"" 부분에 집중하고 더 큰 문제를 간과하고 있음
          + 이스라엘은 기술 산업 규제에 매우 자유방임적임
          + 공격을 수행한 구매자가 누구인지가 중요함
          + 헝가리 정보기관이 관련되었을 가능성이 있음
          + 헝가리, 폴란드, 스페인, 그리스, 키프로스 등은 정치적 이익을 위해 스파이웨어를 남용하고 있음
     * 관련 뉴스레터 링크 제공
          + https://politico.eu/newsletter/brussels-playbook/…
     * 회사 이름이 아마존 물고기에서 유래되었음이 흥미로움
          + 물고기가 사람의 요도로 들어가 몸 안에 자리 잡는다는 이야기
     * 이스라엘 사이버 그룹과 관련된 문제는 HN에서 빠르게 부정되거나 무시됨
          + 스파이웨어와 다른 사이버 공격은 선택적으로 보도됨
          + 모든 사람이 항상 공격의 표적이 되지만, 뉴스에 보도되는 것은 기자의 선택임
"
"https://news.hada.io/topic?id=16077","9년간 운영된 1인 SaaS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            9년간 운영된 1인 SaaS

     * Healthchecks.io는 2015년 7월에 시작되었으며, 올해로 9주년을 맞이함

    수익

     * 현재 652명의 유료 고객을 보유하고 있으며, 월간 반복 수익(MRR)은 14,043 USD임
     * MRR 그래프는 스크립트와 스프레드시트를 사용하여 직접 작성함
     * MRR이 점진적으로 증가하는 것을 기쁘게 생각하지만, 이를 최적화하는 데 집중하지 않음
     * Healthchecks.io는 현재 상태로 지속 가능하며, 즐거움과 삶/일의 균형을 최적화하고 있음
     * 더 많은 통계(사용자 수, 체크 수, 일일 핑 수)는 Healthchecks.io 소개 페이지에서 확인 가능

    여전히 1인 사업인가?

     * 네, 여전히 1인 사업임
     * 2022년까지는 파트타임 계약직으로 일했으나, 2022년 1월부터는 Healthchecks.io가 유일한 수입원이 되었음
     * 팀을 확장할 계획은 없으며, 관리하거나 관리받는 것을 원하지 않음
     * 공동 창업자나 직원을 두는 것은 정기적인 회의를 의미하며, 이는 원하지 않음

    성장 목표

     * 무료 플랜의 리밋을 더 줄일 계획은 없음
     * Healthchecks를 시작한 이유는 기존 서비스(Dead Man’s Snitch와 Cronitor)가 비싸다고 생각했기 때문임
     * 유료 플랜의 가격을 인상할 계획도 없음
     * PO 청구, 송금 결제, 맞춤형 계약, 벤더 포털 가입 등을 요구하는 엔터프라이즈 고객을 추구하지 않음
     * 추가 수익이 큰 차이를 만들지 않으며, 추가적인 부담은 더 바쁘고 짜증나게 만들 것임
     * 기능적으로 현재의 범위와 기능 세트에 만족하며, 추가적인 기능(예: 활성 가동 시간 모니터링, 호스팅 상태 페이지, APM 기능)을 추가할 계획은 없음
     * Healthchecks 제품은 호빗 소프트웨어이며, Healthchecks.io 비즈니스는 라이프스타일 비즈니스임

    호스팅 설정

     * 호스팅 설정은 2022년과 거의 동일함
     * 몇 가지 업데이트:
          + 웹 서버를 Hetzner의 AX42(AMD 8700GE, 8코어)로 업그레이드함
          + 데이터베이스 서버를 Hetzner의 EX101(Intel 13900, 8+16코어)로 업그레이드함
          + Healthchecks.io는 이제 maddy를 사용하여 자체 이메일을 보냄
          + 핑 본문 데이터를 S3 호환 객체 저장소에 저장하여 PostgreSQL 데이터베이스 크기를 줄임

   1인 SaaS인 Healthchecks.io의 기술 스택

   예전에 한번 소개글을 등록했었는데 아직도 잘 운영되고 있네요.
   MRR이 $14000 이면 이제 적정 궤도에 오른듯. 진정한 라이프스타일 비즈니스가 되었네요.
   이런 단계에 이른 서비스들이 국내에도 많아지길 ㅎㅎ

        Hacker News 의견

     * 자신의 선택을 존중함: 균형과 즐거움을 최적화하려는 선택을 존중함
          + 솔로프리뉴어로서 비슷한 여정을 겪고 있으며, 휴식을 허락하는 데 어려움을 겪고 있음
          + 회사가 멈출까 봐 쉬는 것이 두려움
          + 그럼에도 불구하고 꿈을 이루는 중이며, 아침이 가장 좋아짐
          + 과거에는 일요일 밤마다 불안감을 느꼈지만, 지금은 프로젝트에 대한 열정으로 아침에 일어남
          + SaaS가 9년 동안 잘 유지되고 있어 기쁨
     * 영감을 받음: 휴가 중 고객 지원을 어떻게 처리하는지 궁금함
          + 휴가 중에도 장애를 해결하는 방법에 대해 궁금함
     * 경쟁력 있는 가격: 제품 시장 적합성 문제를 직접 경쟁으로 대체함
     * 비슷한 상황: 1인 SaaS B2C 제품을 운영 중이며, 지난 1년간의 경험을 정리한 리뷰 포스트를 작성함
          + 리뷰 포스트 링크
     * 꿈을 실현 중: 지속 가능한 1인 SaaS 운영이 목표임
          + SaaS 아이디어가 없고, 실행할 의지도 부족함
          + ""Hobbit software""라는 용어를 사용함
     * 자신의 프로젝트 성공: 자신의 프로젝트를 성공적으로 운영하는 것이 꿈임
     * 좋은 읽을거리: 포스트가 좋았으며, 과거 @patio11의 연말 리뷰 포스트를 떠올리게 함
          + 리뷰 포스트 링크
     * 가격 인상 제안: 가격을 두 배로 올려도 큰 변화가 없을 것 같음
          + 가격 인상이 수익을 늘리고 고객 지원을 남용하는 고객을 걸러내는 방법임
          + 가격 페이지 링크
          + 그러나 그는 자신의 일을 잘 알고 있으므로 낯선 사람의 조언을 따르지 말아야 함
     * 비슷한 이야기: 목표와 시간 프레임이 비슷하며, 같은 호스팅 제공자와 결제 프로세서를 사용함
          + 새로운 쌍둥이를 찾은 것 같음
     * 성공을 기쁨: 그가 잘 지내고 있어 기쁨
          + Healthchecks를 좋아함
          + 오픈 소스이며 설정이 쉬움
          + 무료 티어가 충분하며, 가장 신뢰할 수 있는 부분임
"
"https://news.hada.io/topic?id=16038","Git Granary - 개인용 Git LFS 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Git Granary - 개인용 Git LFS 서버

     * TypeScript로 작성된 Git LFS(Large File Storage, 대용량 파일 저장소) 서버 구현체
     * 로컬에서 개인용으로 셀프호스팅 하기 위해 설계됨
     * 멀티 사용자 지원은 가능하지만 기본 HTTP 인증을 사용해야 함(Caddy,Traefik 같은 HTTPS 프록시 뒤에서 사용할 것)
     * 런타임
          + Granary는 Bun, Deno, Node에서 실행 가능
          + 어댑터 패턴으로 코딩해서 Deno가 주된 런타임이며, Bun과 Node 어댑터는 최소 구현만 제공
          + Deno의 표준 라이브러리인 serveFile을 사용하여 다운로드 작업 처리
          + 업로드 시 Web Crypto를 사용하여 SHA-256 계산과 파일 스트리밍을 동시 처리
          + 각 런타임마다 고유한 HTTP 서버 사용: Bun.serve, Deno.serve, Node의 createServer
     * MIT 라이선스

   git으로 바이너리 관리하기 너무 힘들어요.
   개선 좀 되었으면 좋겠습니다.

   사실 바이너리 변경 아니 버전관리용은 아닌거죠.
"
"https://news.hada.io/topic?id=16018","던전 앤 드래곤이 대체 텍스트 작성법을 가르쳐준 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     던전 앤 드래곤이 대체 텍스트 작성법을 가르쳐준 경험

디자인 업데이트 중

     * 디자인을 새롭게 하는 과정 중임
     * 잠시 동안 사이트가 불안정할 수 있음

Dungeons & Dragons가 나에게 대체 텍스트 작성법을 가르쳐줌

     * 고등학교와 대학 시절에 Dungeons & Dragons를 많이 플레이했음
     * Dungeon World의 접근 방식에 더 관심이 있음
     * 친구들과의 우정을 깊게 하고, 많은 웃음을 나누며, 멋진 어휘를 배우고, 시스템 디자인에 간접적으로 입문했음

  Dungeons & Dragons 플레이 방식

     * 미니어처와 지도를 사용하는 방식
     * 상상의 극장 방식
     * 주로 상상의 극장 방식을 선택했음
     * 게임은 전적으로 말로 진행되며, 캐릭터 시트만 텍스트와 숫자로 구성됨

  Dragon Magazine의 조언

     * Dragon Magazine의 조언을 통해 묘사 기술을 향상시킴
     * 가장 중요한 것을 먼저 묘사하는 것이 핵심
     * 예시: 큰 붉은 용이 공격하는 상황을 먼저 묘사

  정보의 우선순위

     * 중요한 정보를 먼저 제공하고, 이해를 돕기 위해 세부 사항을 추가
     * 예시: 큰 용이 공격하고 있으며, 방이 넓고, 숨을 곳이 많지 않음

  맥락의 중요성

     * 맥락에 따라 묘사하는 것이 중요
     * 예시: 싸구려 맥주가 담긴 낡은 나무잔을 간단히 묘사

  톤과 분위기

     * 역할극 게임에서 톤과 분위기가 중요
     * 예시: 지루한 회의 중에 느끼는 두려움과 긴장감을 묘사

  보조 기술의 사용자 경험

     * 화면 낭독기가 대체 텍스트를 읽는 방식을 고려
     * 중요한 정보를 먼저 제공하고, 덜 중요한 정보는 나중에 제공

  내러티브를 통제하는 힘

     * Dungeons & Dragons 게임을 진행하는 사람은 다른 참가자들에게 기억에 남는 경험을 제공할 책임이 있음
     * 대체 텍스트 작성에서도 동일한 원칙이 적용됨
     * 이미지의 인종, 성별, 민족성을 포함하는 것이 중요

  기술을 연마하는 방법

     * 역할극 게임을 처음 하는 사람들은 처음에는 어색할 수 있음
     * 대체 텍스트 작성도 마찬가지로 연습을 통해 향상될 수 있음
     * 웹상의 대체 텍스트 상태는 아직 많이 부족하지만, 작성하는 것은 즐거움과 예술이 될 수 있음

  유용한 리소스

     * An alt Decision Tree - Web Accessibility Initiative (WAI)
     * Images Tutorial - Web Accessibility Initiative (WAI)
     * How to write text descriptions (alt text) in BBC News articles - BBC GEL
     * Alt-texts: The Ultimate Guide
     * Understanding and Using Alternative Text: A Comprehensive Guide - The A11Y Collective
     * Image Accessibility - Accessible social
     * Text descriptions and emotion rich images - Léonie Watson
     * Writing great alt text: Emotion matters - JakeArchibald.com

GN⁺의 정리

     * Dungeons & Dragons를 통해 대체 텍스트 작성법을 배운 경험을 공유함
     * 중요한 정보를 먼저 제공하고, 맥락에 따라 묘사하는 것이 중요함을 강조
     * 대체 텍스트 작성은 연습을 통해 향상될 수 있으며, 웹 접근성을 높이는 중요한 역할을 함
     * 관련 리소스를 제공하여 대체 텍스트 작성법을 배우는 데 도움을 줌

        Hacker News 의견

     * 유명 소설가이자 싱어송라이터와 함께 자란 경험을 공유하며, 그가 어린 시절 던전 마스터로 유명했음을 언급함
          + 잡지의 조언이 고전적인 보도 방식인 역피라미드 구조를 상기시킴
          + 가장 중요한 내용을 먼저 설명하는 것이 좋다는 조언을 강조함
     * 중요한 순서대로 설명하는 것이 좋은 조언임
          + 대부분의 사람들은 직관적으로 전경에서 배경으로, 왼쪽에서 오른쪽으로 이미지를 설명함
          + 중요도에 따라 설명하면 화면 읽기 사용자에게 유리함
     * 모든 전문적인 커뮤니케이션에서 중요한 내용부터 전달하는 것이 중요함
          + 첫 문장에서 요점을 전달하면 상대방의 관심을 끌 수 있음
          + World of Warcraft 고객 서비스 경험을 통해 이를 깨달았음을 공유함
          + 현재 스타트업에서 소프트웨어 개발자로 일하며 고객과의 커뮤니케이션에서도 이를 실천함
     * Dwarf Fortress의 아이템 설명에서 영감을 받아 대체 텍스트 작성에 도움이 되었음을 언급함
          + 특히 동사 사용이 효과적임
     * Dungeon World가 창의성과 공동 스토리텔링에 중점을 두고 있어 D&D보다 선호된다는 의견을 공유함
          + D&D의 명확한 규칙이 더 간단할 수 있다는 점도 언급함
     * 이메일 작성 시 중요한 내용을 먼저 요약하여 제목에 넣는 것이 좋다는 조언을 공유함
     * 제품 설명 작성에 어려움을 겪고 있으며, 중요한 내용을 먼저 설명하는 방법을 시도해볼 계획임
          + 다른 유용한 읽을거리를 추천받고 싶어함
     * 매일 alt 태그를 작성하는 데 어려움을 겪고 있으며, 친구의 D&D 세션에 참석하여 개선하고자 함
          + AI 도구를 사용하여 alt 태그를 작성하는 방법을 공유함
     * 던전 마스터가 풀타임 직업이라는 의견에 전적으로 동의함
     * D&D 지도를 출력하여 중요한 특징을 색깔 펜으로 표기하고 게임을 진행함
          + 간결함이 중요하며, 사진 같은 지도는 사용성을 저해할 수 있음
"
"https://news.hada.io/topic?id=16071","동시 멀티스레딩 작동 원리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             동시 멀티스레딩 작동 원리

    두 개의 스레드, 하나의 코어: 동시 멀티스레딩의 작동 원리

      배경 및 동기

     * SMT 도입 배경: 프로세서 자원 활용도를 높이기 위해 도입됨. 프로세서에는 수백 개의 레지스터, 여러 로드/스토어 유닛 및 산술 유닛이 있음. 이를 더 잘 활용하기 위해 명령어 수준 병렬 처리(ILP) 기술 사용.
     * 명령어 파이프라이닝: 명령어 실행을 여러 단계로 나누어 각 사이클마다 새로운 명령어를 추가 처리. 파이프라인 깊이가 깊을수록 더 많은 명령어를 병렬로 처리 가능.
     * 슈퍼스칼라 아키텍처: 각 사이클마다 여러 명령어를 발행할 수 있음. 예를 들어, 최신 Intel Core i7 프로세서는 각 사이클마다 4개의 명령어를 발행할 수 있음.
     * 수평 및 수직 낭비: 독립적인 명령어를 충분히 찾지 못할 때 발생하는 자원 낭비. 수평 낭비는 프로세서가 충분한 독립 명령어를 찾지 못할 때 발생하고, 수직 낭비는 모든 명령어가 현재 실행 중인 명령어에 의존할 때 발생함.

      Intel 프로세서의 SMT 구현

     * 아키텍처 상태 복제: 두 개의 스레드를 동시에 실행하기 위해 프로세서의 아키텍처 상태를 복제. 이를 통해 하나의 물리적 프로세서가 운영 체제에 두 개의 논리적 프로세서로 나타남.
     * 자원 공유 및 복제: 일부 자원은 복제되고, 일부는 공유됨. 복제 여부는 전력 소비 및 칩의 실제 공간 등 여러 요인에 따라 결정됨.

    프로세서 마이크로아키텍처

     * 프론트엔드, 백엔드, 리타이어먼트 유닛: 프로세서 마이크로아키텍처는 세 부분으로 나뉨. 프론트엔드는 명령어를 가져오고 디코딩하며, 백엔드는 실행 자원을 할당하고 명령어를 실행함. 리타이어먼트 유닛은 실행된 명령어의 결과를 아키텍처 상태에 커밋함.

      SMT 구현 세부 사항

     * 프론트엔드: 명령어 포인터, 트레이스 캐시, ITLB 캐시, uop 큐 등 여러 구성 요소로 이루어짐. 각 구성 요소는 두 개의 논리적 프로세서를 지원하기 위해 복제되거나 공유됨.
     * 백엔드: 자원 할당기, 레지스터 리네이밍, 명령어 준비 큐, 명령어 스케줄러 등으로 구성됨. 자원 할당기는 각 사이클마다 논리적 프로세서 간에 전환됨.
     * 리타이어먼트 유닛: 명령어가 아키텍처 상태에 커밋될 준비가 되면 이를 추적하고 올바른 순서로 커밋함.

    메모리 서브시스템

     * TLB: 가상 주소를 물리 주소로 변환하는 작은 캐시. 두 논리적 프로세서 간에 동적으로 공유됨.
     * L1, L2, L3 캐시: 각 CPU 코어는 자체 L1 캐시를 가짐. L2 캐시는 마이크로아키텍처에 따라 다를 수 있으며, L3 캐시는 코어 간에 공유됨.

    SMT의 성능 영향

     * 단일 스레드 실행: SMT가 활성화된 코어에서 단일 스레드를 실행할 때 자원이 공유되므로 성능이 저하될 수 있음.
     * 두 개의 스레드 실행: 캐시 접근 패턴에 따라 성능이 달라질 수 있음. 협력적인 스레드는 성능을 향상시킬 수 있지만, 경쟁적인 스레드는 성능을 저하시킬 수 있음.
     * 보안 취약점: 최근 몇 년간 SMT와 관련된 보안 문제가 발견됨. 자원 공유와 명령어의 추측 실행으로 인해 민감한 데이터가 유출될 가능성이 있음.

    결론

     * SMT 사용 여부 결정: SMT는 CPU 자원 활용도를 높이고 명령어 처리량을 증가시키기 위해 설계되었지만, 성능 및 보안 측면에서 trade-off가 있음. 워크로드에 따라 SMT를 사용할지 여부를 결정하는 것이 중요함.

    GN⁺의 정리

     * SMT의 이해: SMT는 CPU 자원 활용도를 높이고 명령어 처리량을 증가시키기 위해 설계됨.
     * 성능 및 보안: SMT는 성능 향상에 도움이 될 수 있지만, 자원 경쟁 및 보안 취약점으로 인해 성능 저하 및 보안 문제가 발생할 수 있음.
     * 사용 여부 결정: 워크로드에 따라 SMT를 사용할지 여부를 신중하게 결정해야 함. 고성능이 필요한 경우 SMT를 비활성화하는 것이 좋음.
     * 관련 프로젝트: AMD의 SMT 구현 및 ARM 프로세서의 SMT 성능 분석 프로젝트도 참고할 만함.
"
"https://news.hada.io/topic?id=16129","Flux - 12B 파라미터 오픈소스 Text-To-Image 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Flux - 12B 파라미터 오픈소스 Text-To-Image 모델

     * Black Forest Labs에서 개발한 가장 큰 SOTA 오픈 소스 텍스트-이미지 모델
          + Stable Diffusion을 개발한 오리지널 팀
     * 12B 파라미터로 창의성과 성능의 경계를 확장하여, Midjourney와 유사한 이미지 생성 기능을 제공

  3가지 모델로 제공

     * FLUX.1 [dev]: 비상업적 라이선스로 오픈 소스화된 기본 모델. 커뮤니티가 이를 기반으로 구축할 수 있음
     * FLUX.1 [schnell]: 기본 모델의 증류 버전으로 최대 10배 빠르게 작동함. Apache 2 라이선스.
     * FLUX.1 [pro]: API를 통해서만 이용 가능한 비공개 버전

  주요 특징

     * 향상된 이미지 품질: 고해상도의 놀라운 비주얼 생성 가능
     * 고급 인간 해부학 및 포토리얼리즘: 매우 현실적이고 해부학적으로 정확한 이미지 생성 가능
     * 개선된 프롬프트 준수: 입력에 기반한 더 정확하고 관련성 높은 이미지 생성 가능
     * 뛰어난 속도: 높은 수요 애플리케이션에 이상적인 Flux Schnell의 속도와 효율성

  fal의 통합

     * fal의 최첨단 추론 엔진을 통합하여 Flux 모델을 eager torch보다 최대 2배 빠르게 실행 가능
     * 빠른 처리 시간과 뛰어난 품질 및 디테일 유지

  GN⁺의 정리

     * Flux는 Black Forest Labs에서 개발한 최신 텍스트-이미지 모델로, 창의성과 성능의 새로운 기준을 제시함
     * 다양한 변형 모델을 통해 다양한 사용 사례에 맞춤형 솔루션을 제공함
     * 향상된 이미지 품질과 현실적인 표현력으로 높은 수요 애플리케이션에 적합함
     * fal의 추론 엔진을 통해 더욱 빠르고 효율적인 모델 실행이 가능함
     * 유사한 기능을 가진 다른 프로젝트로는 DALL-E와 Midjourney가 있음

        Hacker News 의견

     * burkay from fal.ai: 모델은 fal이 만든 것이 아니며, Black Forest Labs가 제작한 것임
          + fal.ai는 모델을 최적화된 추론 엔진에서 실행하여 매우 빠르게 동작하게 함
          + 모델을 playground에서 시도해볼 수 있음
          + [schnell] 모델은 Apache 라이선스로 Hugging Face에서 오픈 소스로 제공됨
          + 텍스트 렌더링이 매우 빠르고 뛰어나며, 텍스트와 위치를 더 잘 처리할 수 있는 텍스트 인코더가 있음
          + 텍스트 렌더링이 좋아지면 훈련 데이터의 텍스트 워터마크가 더 명확하게 나타남
          + 모델을 시도해볼 수 있는 링크 제공
               o FLUX.1 [schnell]: Apache 2.0, 오픈 웨이트, 스텝 증류
               o FLUX.1 [dev]: 비상업적, 오픈 웨이트, 가이드 증류 (로그인 필요)
               o FLUX.1 [pro]: 폐쇄 소스, SOTA, 원시 데이터 (API를 통해서만 사용 가능)
     * 다른 사용자: 대부분의 비교가 새로운 모델을 제대로 테스트하지 않음
          + 현재 시장에서 가장 좋은 프롬프트 준수는 DALL-E 3이지만, 복잡한 개념에서는 여전히 부족하고 검열이 많음
          + Flux와 DALL-E 3을 비교한 결과, Flux가 인상적이고 성능이 뛰어남
          + 비교 결과를 블로그에 게시함
     * 다른 사용자: ideogram의 프롬프트를 사용하여 테스트했으며, Flux가 매우 좋은 이미지를 생성함
          + ideogram을 사용해봤지만 필터가 마음에 들지 않음
          + 로컬에서 실행할 수 있다면 이미지 품질과 프롬프트 준수 면에서 매우 근접함
          + 텍스트가 복잡할 때는 명확하게 작성하지 못함
          + 예시로 ideogram 이미지의 프롬프트를 제공함
          + 안정적인 확산 모델을 오래전에 사용하지 않게 되었으며, 기술이 너무 복잡해져서 재미가 없어짐
          + 필터 없이 로컬에서 실행할 수 있는 ideogram과 같은 시스템을 원함
          + 이 모델이 매우 좋음
     * 다른 사용자: 새로운 모델을 볼 때마다 엔지니어링 다이어그램을 만들 수 있는지 확인함
          + 이 모델은 아직 엔지니어링 다이어그램을 잘 처리하지 못함
          + AI 회사가 엔지니어링 다이어그램 문제를 해결해주길 바람
          + 현재 훈련 데이터셋에 포함되지 않았을 가능성이 큼
          + 합성 데이터셋/벤치마크를 만들고 싶음
     * 다른 사용자: 가입 절차가 번거로움
          + Github 계정 생성이 현재 오류가 발생하여 두 번의 시도와 두 개의 브라우저가 필요했음
     * 다른 사용자: 벤처 자금 지원을 받는 스타트업들이 비즈니스 모델 없이 무료로 모델을 계속 출시함
          + 오픈 소스를 지지하지만 장기적으로 지속 가능하지 않을까 걱정됨
     * 다른 사용자: 인상적인 품질임
     * 다른 사용자: 공간 관계를 잘 처리하지 못함
          + ""거꾸로 된 집"" -> 일반적인 집
          + ""개 위에 앉아 있는 말"" -> 말과 개가 나란히 있음
          + ""뒤집힌 Lockheed Martin F-22 Raptor"" -> 잘못된 결과
"
"https://news.hada.io/topic?id=16095","Show GN: hideonbush 크롤링 방지를 위한 path기반 데이터 저장/조회 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: hideonbush 크롤링 방지를 위한 path기반 데이터 저장/조회 서비스

   깃허브에 이메일을 써놨더니 마구마구 수집해가가지고 지들멋대로 써먹더라구요...
   그걸 방지하기 위해 간단하게 django+postgresql로 심플하게 서비스 한번 제작해봤습니다.

   접속하시면 보시다시피 path를 지정한 뒤에 데이터를 저장할 수 있습니다.
   단순히 크롤링을 방지하기 위한 글로벌 key value storage라고 생각해주시면 될 것 같습니다.
   데이터는 암호화되어 저장 되지 않으니 민감한 정보는 저장하지 않으시길 바랍니다. 감사합니다.

   p.s: faker 팬 맞습니다 ㅋㅋ
   서비스 하나 만들기도 이렇게 귀찮고 힘든데 새삼 페이커가 대단하다고 느껴집니다.
"
"https://news.hada.io/topic?id=16061","PCI-e 학습: 드라이버 및e 학습: 드라이버 및 DMA

    PCI-e 학습: 드라이버 및 DMA

      이전 항목 요약

     * 이전 항목에서는 간단한 PCI-e 장치를 구현하여 수동으로 주소(0xfe000000)를 사용해 32비트씩 읽고 쓰는 방법을 다루었음.
     * 프로그래밍적으로 이 주소를 얻기 위해 PCI 서브시스템에서 메모리 매핑 세부 정보를 요청해야 함.

      드라이버 구조체 생성

     * struct pci_driver를 생성해야 하며, 지원되는 장치 테이블과 probe 함수가 필요함.
     * 지원되는 장치 테이블은 장치/벤더 ID 쌍의 배열로 구성됨.

static struct pci_device_id gpu_id_tbl[] = {
  { PCI_DEVICE(0x1234, 0x1337) },
  { 0, },
};

     * probe 함수는 장치/벤더 ID가 일치할 때 호출되며, 장치의 메모리 영역을 참조하도록 드라이버 상태를 업데이트해야 함.

typedef struct GpuState {
  struct pci_dev *pdev;
  u8 __iomem *hwmem;
} GpuState;

      probe 함수 구현

     * 장치를 활성화하고 pci_dev에 대한 참조를 저장함.

static int gpu_probe(struct pci_dev *pdev, const struct pci_device_id *id) {
  int bars;
  unsigned long mmio_start, mmio_len;
  GpuState* gpu = kmalloc(sizeof(struct GpuState), GFP_KERNEL);
  gpu->pdev = pdev;
  pci_enable_device_mem(pdev);
  bars = pci_select_bars(pdev, IORESOURCE_MEM);
  pci_request_region(pdev, bars, ""gpu-pci"");
  mmio_start = pci_resource_start(pdev, 0);
  mmio_len = pci_resource_len(pdev, 0);
  gpu->hwmem = ioremap(mmio_start, mmio_len);
  return 0;
}

      사용자 공간에 카드 노출

     * 이제 커널 드라이버에서 BAR0 주소 공간을 매핑했으므로, 사용자 공간 애플리케이션이 파일 작업을 통해 PCIe 장치와 상호 작용할 수 있도록 문자 장치를 생성할 수 있음.
     * open, read, write 함수를 구현해야 함.

static int gpu_open(struct inode *inode, struct file *file);
static ssize_t gpu_read(struct file *file, char __user *buf, size_t count, loff_t *offset);
static ssize_t gpu_write(struct file *file, const char __user *buf, size_t count, loff_t *offset);

      DMA 사용

     * CPU가 한 번에 하나의 DWORD 데이터를 복사하는 대신, DMA를 사용하여 카드가 데이터를 자체적으로 복사하도록 할 수 있음.
     * DMA ""함수 호출"" 인터페이스 정의:
         1. CPU가 카드에 복사할 데이터(소스 주소, 길이), 대상 주소, 데이터 흐름 방향(읽기 또는 쓰기)을 알려줌.
         2. CPU가 카드에 복사를 시작할 준비가 되었음을 알림.
         3. 카드가 CPU에 전송이 완료되었음을 알림.

#define REG_DMA_DIR     0
#define REG_DMA_ADDR_SRC  1
#define REG_DMA_ADDR_DST  2
#define REG_DMA_LEN     3
#define CMD_ADDR_BASE    0xf00
#define CMD_DMA_START    (CMD_ADDR_BASE + 0)

static void write_reg(GpuState* gpu, u32 val, u32 reg) {
  iowrite32(val, gpu->hwmem + (reg * sizeof(u32)));
}

void execute_dma(GpuState* gpu, u8 dir, u32 src, u32 dst, u32 len) {
  write_reg(gpu, dir, REG_DMA_DIR);
  write_reg(gpu, src, REG_DMA_ADDR_SRC);
  write_reg(gpu, dst, REG_DMA_ADDR_DST);
  write_reg(gpu, len, REG_DMA_LEN);
  write_reg(gpu, 1,  CMD_DMA_START);
}

      MSI-X 설정

     * DMA 실행이 비동기적이므로 write가 완료될 때까지 블록하는 것이 더 나음.
     * PCI-e 카드는 메시지 신호 인터럽트(MSI)를 통해 CPU에 신호를 보낼 수 있음.
     * MSI-X를 설정하려면 각 인터럽트에 대한 구성 공간(MSI-X 테이블)과 대기 중인 인터럽트의 비트맵(PBA)을 저장할 공간을 할당해야 함.

#define IRQ_COUNT      1
#define IRQ_DMA_DONE_NR   0
#define MSIX_ADDR_BASE   0x1000
#define PBA_ADDR_BASE    0x3000

static irqreturn_t irq_handler(int irq, void *data) {
  pr_info(""IRQ %d received\n"", irq);
  return IRQ_HANDLED;
}

static int setup_msi(GpuState* gpu) {
  int msi_vecs;
  int irq_num;
  msi_vecs = pci_alloc_irq_vectors(gpu->pdev, IRQ_COUNT, IRQ_COUNT, PCI_IRQ_MSIX | PCI_IRQ_MSI);
  irq_num = pci_irq_vector(gpu->pdev, IRQ_DMA_DONE_NR);
  request_threaded_irq(irq_num, irq_handler, NULL, 0, ""GPU-Dma0"", gpu);
  return 0;
}

      실제로 블록하는 쓰기

     * 인터럽트 메커니즘을 사용하여 write를 블록하도록 대기열을 사용할 수 있음.

wait_queue_head_t wq;
volatile int irq_fired = 0;

static irqreturn_t irq_handler(int irq, void *data) {
  irq_fired = 1;
  wake_up_interruptible(&wq);
  return IRQ_HANDLED;
}

static ssize_t gpu_fb_write(struct file *file, const char __user *buf, size_t count, loff_t *offset) {
  GpuState *gpu = (GpuState*) file->private_data;
  dma_addr_t dma_addr;
  u8* kbuf = kmalloc(count, GFP_KERNEL);
  copy_from_user(kbuf, buf, count);
  dma_addr = dma_map_single(&gpu->pdev->dev, kbuf, count, DMA_TO_DEVICE);
  execute_dma(gpu, DIR_HOST_TO_GPU, dma_addr, *offset, count);
  if (wait_event_interruptible(wq, irq_fired != 0)) {
    pr_info(""interrupted"");
    return -ERESTARTSYS;
  }
  kfree(kbuf);
  return count;
}

      화면에 표시

     * 이제 사용자 공간에서 write(2)를 통해 데이터를 PCI-e 장치로 전달할 수 있는 '프레임버퍼'가 있음.
     * QEMU의 콘솔 출력에 카드의 버퍼를 연결하여 작동하는 GPU처럼 보이도록 할 수 있음.

struct GpuState {
  PCIDevice pdev;
  MemoryRegion mem;
  QemuConsole* con;
  uint32_t registers[0x100000 / 32];
  uint32_t framebuffer[0x200000];
};

static void pci_gpu_realize(PCIDevice *pdev, Error **errp) {
  gpu->con = graphic_console_init(DEVICE(pdev), 0, &ghwops, gpu);
  DisplaySurface *surface = qemu_console_surface(gpu->con);
  for(int i = 0; i<640*480; i++) {
    ((uint32_t*)surface_data(surface))[i] = i;
  }
}

static void vga_update_display(void *opaque) {
  GpuState* gpu = opaque;
  DisplaySurface *surface = qemu_console_surface(gpu->con);
  for(int i = 0; i<640*480; i++) {
    ((uint32_t*)surface_data(surface))[i] = gpu->framebuffer[i % 0x200000 ];
  }
  dpy_gfx_update(gpu->con, 0, 0, 640, 480);
}

static const GraphicHwOps ghwops = {
  .gfx_update = vga_update_display,
};

    GN⁺의 정리

     * 이 글은 PCI-e 장치 드라이버와 DMA를 다루며, 커널 드라이버를 통해 사용자 공간 애플리케이션이 PCIe 장치와 상호 작용할 수 있도록 하는 방법을 설명함.
     * DMA를 사용하여 CPU의 부하를 줄이고 데이터 전송 속도를 높이는 방법을 다룸.
     * MSI-X를 사용하여 DMA 전송 완료 시 CPU에 신호를 보내는 방법을 설명함.
     * QEMU를 사용하여 가상 환경에서 GPU를 시뮬레이션하고 테스트하는 방법을 다룸.
     * 비슷한 기능을 가진 프로젝트로는 pciemu와 Linux Kernel Labs - Device Drivers가 있음.

        Hacker News 의견

     * 최종 목표는 FPGA를 사용하여 디스플레이 어댑터를 만드는 것임
          + Tang Mega 138k를 사용하여 시작했지만 문서가 많지 않아 시간이 걸리고 있음
          + PCI-e 하드 IP가 있는 다른 저렴한 FPGA 보드 추천을 원함
     * 이 기사들의 흐름이 매우 마음에 듦
          + 충분한 코드로 요점을 설명하고 점진적으로 빌드하는 방식이 좋음
          + 새로운 PCI 장치를 만들고 싶어지게 하는 좋은 기술 글쓰기의 예시임
     * Linux PCIe 디바이스 드라이버에 대한 훌륭한 입문서처럼 보임
          + Linux 디바이스 드라이버는 작업해본 적 없지만 다른 운영 체제에서 여러 PCIe 드라이버를 작업한 경험이 있음
          + 개념이 매우 익숙하게 느껴짐
          + 이런 유형의 콘텐츠가 더 많아지길 바람
     * 이 글을 작성해줘서 정말 고마움
          + 매우 유익하고 실용적임
          + 이 분야에서 이런 정보는 정말 드물음
          + 프로젝트를 위한 개발/플레이테스트 환경을 만드는 데 필요한 정보를 제공함
          + 다른 두 부분도 매우 실용적임
               o bootsvc 드라이버 사용법, 버스 마스터링, msi-x 등 많은 유용한 세부 정보가 포함됨
"
"https://news.hada.io/topic?id=16135","Foobar2000 음악 플레이어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Foobar2000 음악 플레이어

     * 개요
          + foobar2000은 Windows 플랫폼용 고급 무료 오디오 플레이어임
     * 최신 뉴스
          + 2024-05-21
               o 이전 버전의 새로운 릴리스
               o 최신 버그 수정이 foobar2000 v1.5 및 v1.6 시리즈에 백포팅됨
               o 버전 1.6.18 및 1.5.12는 이전 버전 페이지에서 다운로드 가능
               o 버전 1.5.12는 오래된 하드웨어에서 제대로 테스트되었으며, 이전 릴리스에 존재했던 SSE CPU 요구 사항이 제거됨
          + 2024-05-20
               o foobar2000 모바일 v1.5가 릴리스됨
               o 이 버전은 일반적으로 사용 가능한 도구로 편집할 수 있는 새로운 스킨 파일 형식을 도입함
               o Android APK 다운로드 가능
          + 2023-12-18
               o foobar2000 v2.1 최종 버전이 릴리스됨
               o foobar2000 for Mac v2.6 최종 버전도 릴리스됨
     * 주요 기능
          + 지원되는 오디오 포맷: MP3, MP4, AAC, CD Audio, WMA, Vorbis, Opus, FLAC, WavPack, WAV, AIFF, Musepack, Speex, AU, SND 등
          + 갭리스 재생
          + 사용자 인터페이스 레이아웃을 쉽게 사용자 정의 가능
          + 고급 태그 기능
          + 오디오 CD 리핑 및 모든 지원되는 오디오 포맷을 변환하는 Converter 컴포넌트 지원
          + 전체 ReplayGain 지원
          + 사용자 정의 가능한 키보드 단축키
          + 서드파티 개발자가 플레이어의 기능을 확장할 수 있는 오픈 컴포넌트 아키텍처
     * GN⁺의 정리
          + foobar2000은 다양한 오디오 포맷을 지원하고 고급 태그 기능 및 사용자 정의 가능한 인터페이스를 제공하는 고급 오디오 플레이어임
          + 최신 릴리스는 이전 버전의 버그 수정 및 새로운 기능을 포함하고 있어 사용자 경험을 향상시킴
          + 오픈 컴포넌트 아키텍처를 통해 서드파티 개발자가 기능을 확장할 수 있어 유연성이 높음
          + 비슷한 기능을 가진 다른 제품으로는 VLC Media Player와 MusicBee가 있음

        Hacker News 의견

     * fb2k가 여전히 잘 유지되고 있는 것이 기쁨
          + 21년 동안 동일한 UI를 유지한 점이 인상적임
          + 단순함이 유행을 쫓는 것보다 우수함을 증명함
          + Winamp 3.0 이후 주 음악 플레이어로 사용했으며, 현재는 mpv와 Quod Libet를 사용함
     * 이 시대와 스타일의 소프트웨어가 매력적임
          + fb2k, mpc, virtualdub, utorrent, irfanview, kerio firewall, putty, mirc, notepad++ 등이 대표적임
          + 작은 프로그램, 클래식한 Windows 스타일, 최소한의 인터페이스지만 강력한 기능을 가짐
          + fb2k는 여전히 정기적으로 사용 중임
     * fb2k는 훌륭한 음악 플레이어임
          + 깨끗하고 단순한 UI, 사용하기 쉬움
          + 주류보다 더 많은 포맷을 지원함
          + Replaygain 기능이 뛰어남
     * fb2k가 추억을 떠올리게 함
          + 앨범과 플레이리스트를 정리하는 데 많은 시간을 보냈음
          + 스트리밍 플랫폼이 등장하면서 빠르게 전환함
     * 폴더를 클릭하여 음악을 재생할 수 있는 기능이 독특함
          + 다른 플레이어에서도 가능하지만 fb2k만큼 쉽지 않음
     * Foobar2000이 오픈 소스가 아닌 이유에 대한 링크 제공
     * AIMP도 훌륭한 오디오 플레이어임
          + 2006년에 출시되었으며, Winamp 개발이 중단될 때 전환함
          + 'Pandemic' 스킨으로 클래식 Winamp처럼 보이며, 시각화 및 다양한 기능을 지원함
     * Winamp의 시각화 프로그래밍이 만족스러웠음
          + 스킨과 패널 설정에 대한 제어도 좋았음
          + 무작위 재생 목록을 만드는 도구가 유용했음
     * foobar2000은 플러그인 생태계 덕분에 매우 우수함
          + Linux에서 wine을 통해 음악 재생에 사용 중임
"
"https://news.hada.io/topic?id=16026","모두를 위한 Reverse Engineering","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       모두를 위한 Reverse Engineering

소개

     * x86 강좌
          + Part 1: 목표
          + Part 2: 기술
          + Part 3: 악성코드의 종류
          + Part 4: x86 어셈블리 소개
          + Part 5: 이진수 시스템
          + Part 6: 16진수 시스템
          + Part 7: 트랜지스터와 메모리
          + Part 8: 바이트, 워드, 더블 워드 등
          + Part 9: x86 기본 아키텍처
          + Part 10: 범용 레지스터
          + Part 11: 세그먼트 레지스터
          + Part 12: 명령 포인터 레지스터
          + Part 13: 제어 레지스터
          + Part 14: 플래그
          + Part 15: 스택
          + Part 16: 힙
          + Part 17: 리눅스 설치 방법
          + Part 18: vim 텍스트 편집기
          + Part 19: 어셈블리 학습 이유
          + Part 20: 명령 코드 처리
          + Part 21: 프로그램 컴파일 방법
          + Part 22: ASM 프로그램 1 [즉시 데이터 이동]
          + Part 23: ASM 디버깅 1 [즉시 데이터 이동]
          + Part 24: ASM 해킹 1 [즉시 데이터 이동]
          + Part 25: ASM 프로그램 2 [레지스터 간 데이터 이동]
          + Part 26: ASM 디버깅 2 [레지스터 간 데이터 이동]
          + Part 27: ASM 해킹 2 [레지스터 간 데이터 이동]
          + Part 28: ASM 프로그램 3 [메모리와 레지스터 간 데이터 이동]
          + Part 29: ASM 디버깅 3 [메모리와 레지스터 간 데이터 이동]
          + Part 30: ASM 해킹 3 [메모리와 레지스터 간 데이터 이동]
          + Part 31: ASM 프로그램 4 [레지스터와 메모리 간 데이터 이동]
          + Part 32: ASM 디버깅 4 [레지스터와 메모리 간 데이터 이동]
          + Part 33: ASM 해킹 4 [레지스터와 메모리 간 데이터 이동]
          + Part 34: ASM 프로그램 5 [레지스터를 통한 간접 주소 지정]
          + Part 35: ASM 디버깅 5 [레지스터를 통한 간접 주소 지정]
          + Part 36: ASM 해킹 5 [레지스터를 통한 간접 주소 지정]
          + Part 37: ASM 프로그램 6 [CMOV 명령어]
          + Part 38: ASM 디버깅 6 [CMOV 명령어]
          + Part 39: ASM 해킹 6 [CMOV 명령어]
          + Part 40: 결론
     * ARM-32 강좌 1
          + Part 1: 삶의 의미
          + Part 2: 숫자 시스템
          + Part 3: 이진수 덧셈
          + Part 4: 이진수 뺄셈
          + Part 5: 워드 길이
          + Part 6: 레지스터
          + Part 7: 프로그램 카운터
          + Part 8: CPSR
          + Part 9: 링크 레지스터
          + Part 10: 스택 포인터
          + Part 11: ARM 펌웨어 부팅 절차
          + Part 12: 폰 노이만 아키텍처
          + Part 13: 명령 파이프라인
          + Part 14: ADD
          + Part 15: ADD 디버깅
          + Part 16: ADD 해킹
          + Part 17: ADDS
          + Part 18: ADDS 디버깅
          + Part 19: ADDS 해킹
          + Part 20: ADC
          + Part 21: ADC 디버깅
          + Part 22: ADC 해킹
          + Part 23: SUB
          + Part 24: SUB 디버깅
          + Part 25: SUB 해킹
     * ARM-32 강좌 2
          + Part 1: 삶의 의미 Part 2
          + Part 2: 숫자 시스템
          + Part 3: 이진수 덧셈
          + Part 4: 이진수 뺄셈
          + Part 5: 워드 길이
          + Part 6: 레지스터
          + Part 7: 프로그램 카운터
          + Part 8: CPSR
          + Part 9: 링크 레지스터
          + Part 10: 스택 포인터
          + Part 11: 펌웨어 부팅 절차
          + Part 12: 폰 노이만 아키텍처
          + Part 13: 명령 파이프라인
          + Part 14: 헬로 월드
          + Part 15: 헬로 월드 디버깅
          + Part 16: 헬로 월드 해킹
          + Part 17: 상수
          + Part 18: 상수 디버깅
          + Part 19: 상수 해킹
          + Part 20: 문자 변수
          + Part 21: 문자 변수 디버깅
          + Part 22: 문자 변수 해킹
          + Part 23: 불리언 변수
          + Part 24: 불리언 변수 디버깅
          + Part 25: 불리언 변수 해킹
          + Part 26: 정수 변수
          + Part 27: 정수 변수 디버깅
          + Part 28: 정수 변수 해킹
          + Part 29: 부동소수점 변수
          + Part 30: 부동소수점 변수 디버깅
          + Part 31: 부동소수점 변수 해킹
          + Part 32: 더블 변수
          + Part 33: 더블 변수 디버깅
          + Part 34: 더블 변수 해킹
          + Part 35: SizeOf 연산자
          + Part 36: SizeOf 연산자 디버깅
          + Part 37: SizeOf 연산자 해킹
          + Part 38: 전위 증가 연산자
          + Part 39: 전위 증가 연산자 디버깅
          + Part 40: 전위 증가 연산자 해킹
          + Part 41: 후위 증가 연산자
          + Part 42: 후위 증가 연산자 디버깅
          + Part 43: 후위 증가 연산자 해킹
          + Part 44: 전위 감소 연산자
          + Part 45: 전위 감소 연산자 디버깅
          + Part 46: 전위 감소 연산자 해킹
          + Part 47: 후위 감소 연산자
          + Part 48: 후위 감소 연산자 디버깅
          + Part 49: 후위 감소 연산자 해킹
     * x64 강좌
          + Part 1: 사이버 혁명
          + Part 2: 트랜지스터
          + Part 3: 논리 게이트
          + Part 4: 숫자 시스템
          + Part 5: 이진수 덧셈
          + Part 6: 이진수 뺄셈
          + Part 7: 워드 길이
          + Part 8: 일반 아키텍처
          + Part 9: 호출 규약
          + Part 10: 불리언 명령어
          + Part 11: 포인터
          + Part 12: 유효 주소 로드
          + Part 13: 데이터 세그먼트
          + Part 14: SHL 명령어
          + Part 15: SHR 명령어
          + Part 16: ROL 명령어
          + Part 17: ROR 명령어
          + Part 18: 부트 섹터 기본 [Part 1]
          + Part 19: 부트 섹터 기본 [Part 2]
          + Part 20: 부트 섹터 기본 [Part 3]
          + Part 21: 부트 섹터 기본 [Part 4]
          + Part 22: 부트 섹터 기본 [Part 5]
          + Part 23: 부트 섹터 기본 [Part 6]
          + Part 24: 부트 섹터 기본 [Part 7]
          + Part 25: 부트 섹터 기본 [Part 8]
          + Part 26: 부트 섹터 기본 [Part 9]
          + Part 27: x64 어셈블리 [Part 1]
          + Part 28: x64 어셈블리 [Part 2]
          + Part 29: x64 어셈블리 [Part 3]
          + Part 30: x64 어셈블리 [Part 4]
          + Part 31: x64 어셈블리 [Part 5]
          + Part 32: x64 어셈블리 [Part 6]
          + Part 33: x64 어셈블리 [Part 7]
          + Part 34: x64 C++ 1 코드 [Part 1]
          + Part 35: x64 C++ 2 디버그 [Part 2]
          + Part 36: x64 C++ 3 해킹 [Part 3]
          + Part 37: x64 C & 생명의 기원
          + Part 38: x64 네트워킹 기본
          + Part 39: 왜 C인가?
          + Part 40: 헬로 월드 해킹!
          + Part 41: 변수 해킹!
          + Part 42: 분기 해킹!
          + Part 43: 포인터 해킹!
     * ARM-64 강좌
          + Part 1: 삶의 의미
          + Part 2: 개발 환경 설정
          + Part 3: ""헬로 월드""
          + Part 4: ""헬로 월드"" 디버깅
          + Part 5: ""헬로 월드"" 해킹
          + Part 6: 기본 I/O
          + Part 7: 기본 I/O 디버깅
          + Part 8: 기본 I/O 해킹
          + Part 9: 문자 원시 데이터 타입
          + Part 10: 문자 원시 데이터 타입 디버깅
          + Part 11: 문자 원시 데이터 타입 해킹
          + Part 12: 불리언 원시 데이터 타입
          + Part 13: 불리언 원시 데이터 타입 디버깅
          + Part 14: 불리언 원시 데이터 타입 해킹
          + Part 15: 부동소수점 원시 데이터 타입
          + Part 16: 부동소수점 원시 데이터 타입 디버깅
          + Part 17: 부동소수점 원시 데이터 타입 해킹
          + Part 18: 더블 원시 데이터 타입
          + Part 19: 더블 원시 데이터 타입 디버깅
          + Part 20: 더블 원시 데이터 타입 해킹
     * Pico 해킹 강좌
          + Part 1: 이유와 방법
          + Part 2: 헬로 월드
          + Part 3: 헬로 월드 디버깅
          + Part 4: 헬로 월드 해킹
          + Part 5: char
          + Part 6: char 디버깅
          + Part 7: char 해킹
          + Part 8: int
          + Part 9: int 디버깅
          + Part 10: int 해킹
          + Part 11: float
          + Part 12: float 디버깅
          + Part 13: float 해킹
          + Part 14: double
          + Part 15: double 디버깅
          + Part 16: double 해킹
          + Part 17: ""절대 권력은 절대적으로 부패한다!"", 입력의 비극적 이야기
          + Part 18: ""800년 동안 나는 제다이를 훈련했다!"", 입력의 힘
          + Part 19: 입력
          + Part 20: 입력 디버깅
     * Reverse Engineering For Everyone!
          + 역공학이란 무엇인가?
               o Wikipedia에 따르면, 역공학은 인공 객체를 분해하여 설계, 아키텍처, 코드 등을 밝히거나 객체에서 지식을 추출하는 과정임. 이는 자연 현상을 연구하는 과학적 연구와 유사함.
               o 이 튜토리얼 세트는 역공학을 가능한 한 쉽게 만들기 위해 존재함.
               o 이 포괄적인 역공학 튜토리얼 세트는 x86, x64, 32비트 ARM 및 64비트 아키텍처를 다룸.
               o 초보자에게는 역공학의 기본 개념을 익히는 데 도움이 되며, 개념을 복습하려는 사람들에게도 유용함.
               o PDF 또는 MOBI 형식으로 전체 튜토리얼 세트를 다운로드할 수 있음.

GN⁺의 정리

     * 이 기사에서는 x86, x64, ARM-32, ARM-64 및 Pico 해킹 강좌를 포함한 다양한 역공학 튜토리얼을 다룸.
     * 초보자부터 중급 수준의 역공학 기술을 익히고자 하는 사람들에게 유용한 자료임.
     * 사이버 보안 분야에서 역공학 기술은 매우 중요함.
     * PDF 및 MOBI 형식으로 튜토리얼을 제공하여 접근성을 높임.
     * 유사한 기능을 가진 프로젝트로는 ""Practical Reverse Engineering""과 ""Reversing: Secrets of Reverse Engineering""이 있음.
"
"https://news.hada.io/topic?id=16121","조언이 효과 없는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              조언이 효과 없는 이유

왜 조언이 효과가 없을까?

  조언이 나쁜 것일 수도 있음

     * 조언이 상황에 맞지 않거나 잘못된 경우, 오히려 더 나쁜 결과를 초래할 수 있음
     * 예를 들어, 1962년 케네디 대통령의 합참의장은 쿠바 미사일 기지에 대한 공습을 권고했음
     * 인터넷에서는 사소한 일로 이혼을 권하는 경우도 있음

  조언이 경험 없이 불완전할 수도 있음

     * 등반을 배울 때 ""발을 올려라""라는 조언을 들었지만, 실제로는 더 많은 기술이 필요했음
     * 경험이 부족한 사람에게는 단순한 조언이 충분하지 않을 수 있음

  사람들이 조언을 이해하지 못해서 무시할 수도 있음

     * 사람들이 조언을 이해하지 못하거나 진지하게 받아들이지 않을 때 무시할 수 있음
     * 예를 들어, 커피를 많이 마신다는 조언을 들었지만, 그 중요성을 깨닫지 못했음

  사람들이 조언이 효과가 없을 것이라고 느껴서 따르지 않을 수도 있음

     * 사람들이 조언이 효과가 없을 것이라고 느끼면 따르지 않을 수 있음
     * 예를 들어, 프로그래머가 되고 싶어하는 친구에게 조언을 했지만, 그 친구는 조언이 효과가 없을 것이라고 느꼈음

  조언이 다른 사람에게는 효과가 없을 수도 있음

     * 사람마다 다르기 때문에, 한 사람에게 효과적인 조언이 다른 사람에게는 효과가 없을 수 있음
     * 예를 들어, 친구가 현실 TV를 보라고 조언했지만, 자신에게는 효과가 없었음

  조언이 많은 의지력을 요구할 수도 있음

     * 조언이 많은 의지력을 요구할 때, 사람들이 따르기 어려울 수 있음
     * 예를 들어, 달리기를 시작하라는 조언은 따르기 어렵지만, 소음 차단 헤드폰을 사라는 조언은 따르기 쉬움

  사람들이 조언이 유용한지 여부에 크게 신경 쓰지 않을 수도 있음

     * 사람들이 조언을 구하는 이유는 자신이 이미 결정한 선택이 옳다는 확신을 얻기 위해서일 수 있음
     * 또는 대화를 시작하기 위해 조언을 구할 수도 있음

  사람들이 너무 많은 정보를 가지고 있어서 조언을 따르기 어려울 수도 있음

     * 사람들이 너무 많은 정보를 가지고 있어서 큰 그림을 보지 못할 때, 조언을 따르기 어려울 수 있음
     * 예를 들어, 글쓰기를 개선하기 위한 조언을 받았지만, 자신의 글을 객관적으로 보지 못해서 따르기 어려웠음

  조언이 효과가 있을 때, 그것을 조언이라고 부르지 않을 수도 있음

     * 조언이 효과가 있을 때, 그것을 조언이라고 부르지 않을 수 있음
     * 예를 들어, 연못 물을 마시지 말라는 조언은 일반적인 상식으로 받아들여짐

  조언이 필요한 이유가 조언을 따르기 어려운 이유와 같을 수도 있음

     * 사람들이 조언을 따르기 어려운 이유가 조언이 필요한 이유와 같을 수 있음
     * 예를 들어, 이메일에 답장하는 것이 어려운 이유가 이메일을 많이 받기 때문임

  결론

     * 조언을 ""수정""하는 방법에 대한 교훈은 많지 않음
     * 조언을 받는 사람들에게는, 반복적으로 조언을 받는다면 무언가를 놓치고 있을 가능성을 고려해야 함
     * 조언을 주는 사람들에게는, 현실적인 기대를 가지고, 따르기 쉬운 조언을 주는 것이 중요함
     * 특히 돈을 어떻게 쓸지에 대한 조언은 사람들이 따르기 쉬움

        Hacker News 의견

     * 전문가로 인정받기 위해서는 초청이 필요함: 직함, 교육, 경험이 중요하지 않음. 초청받지 않은 조언은 환영받지 못함
          + 스스로 문제를 해결하고 싶어하는 사람들: 해결책을 제시하지 말고, 다양한 옵션의 도전 과제를 설명해 스스로 결론을 내리게 해야 함
          + 배우자의 불만 처리: 배우자가 ""고쳐줘""라고 말하지 않는 한, 단순히 들어주고 원하는 것을 파악해 해결해야 함
     * 조언을 줄 때의 규칙:
          + 초청받지 않은 조언은 비판임
          + 문제를 끝까지 들어야 함
          + 해야 할 일을 말하지 말고, 자신이라면 어떻게 할지 말해야 함
          + 조언의 목적은 옵션을 제시하는 것임
          + 조언자가 틀릴 수 있음을 이해해야 함
     * 지적-감정적 불일치: 사람들이 조언을 따르지 않는 주요 이유 중 하나임
          + 감정과 지성의 균형: 더 많은 지적 이유를 제시하는 것은 감정과 이성 사이의 격차를 더 크게 만듦
          + 감정을 무시하지 말아야 함: 감정을 이해하고 접근하는 것이 중요함
     * 조언을 주기 전에 고려할 점:
          + 조언을 주지 않는 것이 좋을 때도 있음: 사람들이 단순히 불만을 털어놓거나 대화를 나누고 싶어할 때가 많음
          + 조언을 요청받았을 때만 주는 것이 좋음: 그렇지 않으면 양쪽 모두에게 좌절감을 줄 수 있음
     * 조언의 효과:
          + 조언이 나중에 효과를 발휘할 때도 있음: 조언을 여러 번 거부하다가 나중에 받아들이는 경우도 있음
          + 조언은 양방향 소통임: 조언을 주는 사람과 받는 사람이 모두 준비되어 있어야 함
     * 개인적인 경험: 친구와의 경험을 통해 조언이 항상 효과적이지 않음을 깨달음
          + 친구의 성공: 조언을 따르지 않았지만 결국 성공한 친구의 사례
     * 큐와 조언의 차이: 큐는 이미 배운 것을 상기시키는 간단한 신호임
          + 큐는 조언이 아님
     * 경험이 있는 조언: 조언은 체험이 있어야 효과적임
          + 체험을 통해 느껴야 함: 조언은 감정적으로 와닿아야 함
          + 작은 단계의 조언이 중요함: 큰 그림의 조언은 신뢰가 쌓인 후에만 효과적임
     * 변화의 단계 모델: 사람의 변화 단계를 이해하는 것이 중요함
          + 문제를 인식하는 단계: 문제를 인식하지 못하면 조언이 효과적이지 않음
          + 적절한 질문을 통해 문제를 인식하게 해야 함
     * 인간 본성: 사람들이 스스로 발견한 이유에 더 설득됨
          + Blaise Pascal의 인용: ""사람들은 자신이 발견한 이유에 더 설득된다""
"
"https://news.hada.io/topic?id=16132","사용자 위치정보(User Location)를 믿지마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     사용자 위치정보(User Location)를 믿지마세요

     * 앱에 로케이션 관련 로직을 넣는 예
          + 지역에 따라 앱의 언어 또는 통화를 설정하려는 경우
          + 특정 국가의 사람들에게 할인을 제공하려는 경우
          + 사용자에게 가장 가까운 위치를 표시해야 하는 스토어 로케이터가 있는 경우
          + 날씨 앱이 모든 종류의 데이터를 제공하기 전에 위치에 의존하는 경우
          + 법적 이유로 앱을 지오펜스 하려는 경우(예: 쿠키 배너)
     * 몇 가지 공통된 테마가 있음
          + 표시/사용자 경험: 위치 정보를 사용하여 사용자 경험을 개선하거나 간소화
          + 기능/로직: 위치에 따라 애플리케이션의 비즈니스 로직이 변경
          + 정책/컴플라이언스: 기능을 포함하거나 제외해야 하는 법적 요건이 있음
     * 항상 명확하게 구분되는 것은 아님. 경우에 따라 중복되는 경우도 있지만, 잘못 입력하는 경우의 심각도가 다르기 때문에 이러한 구분을 염두에 두는 것이 중요

사용자 위치를 가져오는 방법

     * 사용자에게 직접 위치를 물어보기
          + 장점: 구현이 쉬움, 사용자가 정확한 정보를 제공하면 신뢰할 수 있음, 다양한 위치를 지원할 수 있음
          + 단점: 사용자가 오타를 내거나 정보를 생략할 수 있음, 사용자가 거짓 정보를 제공할 수 있음
     * 기기의 휴리스틱을 사용하기
          + 현대 기기는 GPS, Wi-Fi 데이터, 셀 타워, IP 주소를 통해 위치 정보에 접근 가능
          + 웹 개발자는 브라우저의 Geolocation API를 통해 사용자 위치에 접근 가능
          + 단점: 사용자에게 위치 공유 허용을 요청해야 함, 사용자가 거부할 수 있음
     * IP 주소를 사용하기
          + IP 주소는 네트워크에서 기기를 고유하게 식별하고 위치를 지정하는 데 사용됨
          + IP 주소의 각 숫자 청크는 넓은 범위에서 좁은 범위로 서브넷을 나타냄
          + IP 주소만으로는 사용자 위치를 알기에 충분하지 않으므로 알려진 서브넷 위치 데이터베이스와 비교해야 함
     * 엣지 컴퓨팅을 사용하기
          + 사용자 요청을 가장 가까운 서버에서 실행하는 방식
          + 사용자에게 허락을 구하거나 IP 주소를 조회할 필요 없이 위치 정보 제공 가능
          + 단점: 실제 사용자 위치가 아니라 엣지 노드의 위치임

사용자 위치를 신뢰할 수 없는 이유

     * 사용자를 신뢰할 수 없음
          + 사용자가 항상 정직하게 실제 위치를 입력한다고 보장할 수 없음
          + 실수로 잘못된 정보를 입력할 수도 있음
     * 기기를 신뢰할 수 없음
          + 사용자가 Geolocation API 사용을 거부할 수 있음
          + Geolocation API 정보를 브라우저 설정에서 사용자가 변경할 수 있음
     * IP 주소를 신뢰할 수 없음
          + 사용자가 VPN을 통해 요청을 라우팅할 수 있음
          + VPN의 IP 주소만 볼 수 있고 사용자의 실제 IP는 알 수 없음
     * 엣지 컴퓨팅을 신뢰할 수 없음
          + 엣지 노드의 위치 정보이므로 실제 사용자 위치와 다를 수 있음
          + VPN 사용 시 원래 IP 주소에 접근할 수 없음

그럼 우리는 어떻게 해야할까 ?

     * 위치 정보를 얻는 방법에는 여러 가지가 있지만, 그 중 어느 것도 완전히 신뢰할 수 있는 방법은 없음
     * 그렇다고 포기해야 할까? No! 더 나은 정보를 얻고 대비할 수 있음

  예제: 콘텐츠 번역

     * 영어로 작성되었지만 다른 언어도 지원하는 웹사이트가 있다고 가정
     * 사용자의 현지 언어를 로드하여 사용자 환경을 개선하고 싶음
     * 네덜란드어(플랑드르어), 프랑스어, 독일어를 사용하는 벨기에의 사용자는 어떻게 처리해야 할까?

    1. 사용자가 웹사이트를 요청
    2. 엣지 컴퓨팅을 통해 벨기에에서 온 요청임을 확인
    3. HTTP 쿠키에서 언어 기본 설정을 찾음
    4. 쿠키가 있으면 기본 설정 언어 사용
    5. 쿠키가 없으면 영어 또는 네덜란드어 버전 사용
    6. 웹사이트에서 사용자에게 지원되는 언어 목록 제공
    7. 사용자가 언어 기본 설정을 선택하면 쿠키에 저장

     * 이 시나리오에서는 사용자 경험을 개선하기 위해 엣지 컴퓨팅과 사용자 보고를 결합하여 위치 정보를 얻음
          + Geolocation API를 사용할 필요는 없어 보임
          + 잘못된 언어가 표시될 위험은 있지만 비용은 낮음
          + 위치 정보가 잘못되었거나 누락되어도 웹사이트는 작동함
     * 업데이트: 클라이언트의 선호 언어와 로케일을 나타내는 Accept-Language 헤더도 이용 가능

  예제: 날씨 앱

     * 위치 기반으로 날씨 정보를 보여주는 애플리케이션이 있음
          + 이 경우 앱이 작동하려면 위치 정보가 필요함. 정보가 없다면 어떻게 날씨를 보여줄 수 있을까?
     * 이 시나리오에서는 첫 로드 시 사용자의 위치를 가정해도 안전함
          + 엣지 컴퓨팅이나 IP 주소에서 해당 정보를 가져와 (우리가 생각한) 사용자의 지역 날씨를 보여줄 수 있음
          + 또한 웹사이트의 주요 초점이 위치에 있기 때문에 Geolocation API를 사용하여 더 정확한 데이터를 요청할 수 있음
          + 사용자가 다른 위치의 정보를 원할 경우를 대비해 유연한 사용자 리포트 옵션도 제공해야 함
          + 이를 위해 가능한 한 자세한 위치 정보를 자동 완성하는 검색 입력 필드를 제공할 수 있음
          + 향후 방문 처리 방식은 다양할 수 있음. 항상 ""로컬"" 날씨를 기본값으로 설정하거나 이전 방문에서의 위치를 기억

    1. 사용자가 웹사이트를 요청
    2. 첫 요청 시 엣지 컴퓨팅이나 IP 주소로 위치 정보 추정하여 앱 시작
    3. 첫 클라이언트 로드 시 Geolocation API 실행하여 정보 업데이트
    4. 향후 로드를 위해 쿠키에 위치 정보 저장 가능
    5. 다른 위치 검색을 위해 자동 완성되는 유연한 입력 제공

     * 여기서 중요한 점은 앱이 실제로 사용자가 어디에 있는지 신경 쓰지 않는다는 것임
          + 그냥 위치만 있으면 됨
          + 사용자가 보고한 위치(검색)가 쿠키, 엣지 컴퓨팅, IP 주소에서 찾은 위치보다 우선함
     * 날씨가 매일 변하기 때문에 캐싱 전략과 앱을 주로 서버 렌더링할지 클라이언트 렌더링할지도 고려해 볼 만함

  예제: 매장 위치 찾기

     * 여러 위치에 실제 매장을 운영하고 있다고 가정
          + 제품 카탈로그와 재고를 온라인으로 보여줄 수 있지만, 매장 내 재고에 대한 최신 정보를 제공하는 것이 좋은 방법임
          + 이를 위해서는 어떤 매장의 재고를 보여줘야 할지 알아야 하며, 최상의 사용자 경험을 위해서는 사용자에게 가장 가까운 매장이어야 함
     * 다시 한번, 엣지 컴퓨팅이나 IP 주소를 사용하여 사용자의 위치를 예측하는 것이 타당함
          + 그런 다음 사용자가 위치 정보를 입력할 수 있는 유연한 입력을 제공하되, 자동 완성은 근접성에 따라 정렬된 매장 목록으로 제한해야 함
          + Geolocation API를 실행하는 것도 좋음
     * 이 예시와 이전 예시의 차이점은 사이트의 주요 목적이 위치에 의존하지 않는다는 것임
          + 따라서 사용자가 위치 의존적인 기능과 상호 작용할 때까지 기다려야
          + 즉, 사용자가 매장 위치 찾기 필드에 초점을 맞출 때만 위치를 요청해야 함

  예제: 지역별 가격 차등

     * 이것은 조금 까다로운 주제인데, 사용자의 위치에 따라 다른 가격을 청구하려면 어떻게 해야 할까?
     * 예를 들어, 일부 항공사와 호텔은 한 지역에서 예약하는 사용자에게 다른 지역보다 더 높은 가격을 제시하는 것으로 알려져 있음
     * 윤리적인 문제는 차치하고, 이것은 수익성에 관한 질문이므로 매우 큰 영향을 미침
     * 따라서 사용자가 사용자 보고 위치 정보를 통해 쉽게 가격을 변경할 수 있도록 허용하고 싶지는 않을 것임
     * 이 경우에는 아마도 엣지 컴퓨팅이나 IP 주소만 사용할 것임
          + 사용자가 VPN을 사용하여 이를 우회할 수 있지만 할 수 있는 최선의 방법일 것임
          + 사기꾼을 피하는 것에 대해 정말 걱정된다면 Akamai의 향상된 프록시 감지 기능을 사용하여 VPN 사용자의 요청을 차단하려고 할 수 있음
          + 그러나 그렇게 하면 할인된 판매 대신 판매 자체가 이루어지지 않을 수 있음. 선택은 당신의 몫

  예제: 쿠키 배너

     * 이 마지막 예시는 법적 준수에 더 중점을 두고 있으므로 작은 면책 조항으로 시작하겠음: 나는 변호사가 아님!!!
          + 이것은 가설적인 예시일 뿐이며 법적 조언으로 받아들여서는 안 됨
     * 2016년 유럽연합은 일반 데이터 보호 규정(GDPR)을 통과시켰음
          + 이는 EU 내 인터넷 사용자의 프라이버시를 보호하는 법률로, 회사가 EU 외부에 있더라도 EU 내 개인에게 상품이나 서비스를 제공하는 회사에 적용됨
     * 웹사이트 소유자에 대한 많은 요구 사항이 있지만, 내가 주목할 것은 우리가 지금 온라인에서 어디에서나 볼 수 있는 쿠키 배너의 폐해임
          + 개인정보 보호 문제, 쿠키 배너가 옳은지 그른지, 그것의 효과 또는 비효과, 더 나은 접근 방식이 있는지에 대한 논의는 하지 않겠음
          + 대신 법적으로 필요한 경우에만 쿠키 배너를 표시하고 그렇지 않은 경우에는 피하는 것이 좋다고 말하겠음
     * 다시 한번, 사용자의 위치를 아는 것은 매우 중요함
          + 이것은 이전 사례와 매우 유사하며 구현 또한 유사함. 주요 차이점은 잘못될 경우의 심각성이며, 따라서 올바르게 수행하기 위한 노력의 수준임
     * 쿠키 배너는 법률과 사용자 위치가 웹사이트에 어떤 영향을 미칠 수 있는지에 대한 가장 널리 퍼진 예시일 수 있지만, 가장 강력한 예시를 찾고 있다면 아마도 중국의 방화벽일 것임

결론

     * 사용자 위치 결정에는 정답이 없음
          + 시나리오에 따라 사용자 리포팅, 기기 휴리스틱, 엣지 컴퓨팅, IP 주소를 조합하여 접근해야 함
     * 중요한 것들
          + 사용자의 위치가 필요한가, 아니면 그냥 아무 위치나 필요한가?
          + 데이터는 얼마나 정확해야 하는가?
          + 사용자 위치가 위조되어도 괜찮은가?
     * 또한 법적 준수, 규정, 기능성, 95%의 신뢰성으로 괜찮은지도 고려해야 함
     * 법적 이유로 위치 로직을 사용한다면 자신을 보호하기 위한 조치를 취하는 것이 좋음
     * CCPA, GDPR 등의 데이터 개인 정보 보호법 준수
"
"https://news.hada.io/topic?id=16037","스위스, 공공 부문에 오픈 소스 소프트웨어 의무화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스위스, 공공 부문에 오픈 소스 소프트웨어 의무화

     * 많은 유럽 정부들이 Big Tech 및 기타 경쟁 회사들의 폐쇄형 소프트웨어에서 벗어나기 위해 노력하고 있음
     * 그러나 스위스 정부는 Big Tech가 지배하는 오늘날의 세계에서 보기 드문 독특한 조치를 시행했음

EMBAG - 공무수행을 위한 전자수단의 사용에 관한 연방법

     * EMBAG는 전자 수단을 사용한 정부 업무 수행에 관한 연방법으로, 2023년에 통과되어 최근 시행됨
     * 이 법에 따라 모든 공공 부문 정부 기관은 오픈 소스 소프트웨어를 사용해야 하며, 해당 기관에서 개발한 소스 코드를 공개해야 하는 추가 의무가 있음
     * 그러나 제3자 권리와의 충돌이나 보안 문제의 경우 코드를 공개하지 않을 수 있음
     * 또한, 제9조의 동일한 규정에 따라 공공 기관이 유지보수, 통합, 인프라 보안 등과 관련된 추가 서비스를 제공할 수 있는 메커니즘이 있으며, 이러한 비용을 충당하기 위해 적절한 지급이 이루어짐
     * 베른 대학교 공공 부문 변혁 연구소 소장인 Matthias Stürmer 박사는 스위스 정부의 이러한 개방성 필요성에 대해 가장 큰 목소리를 내고 있음
     * Open Source Observatory와의 대화에서 그는 다음과 같이 덧붙였음:

     스위스의 새로운 'Public Money Public Code' 법은 정부, IT 산업 및 사회에 큰 기회를 제공함
     모든 이해 관계자가 이 새로운 규정으로부터 혜택을 받으며, 공공 부문은 공급업체 종속을 줄이고, 기업은 디지털 비즈니스 솔루션을 성장시키며, 납세자는 IT 솔루션에 대한 지출을 줄이고 경쟁과 혁신 증가로 인해 더 나은 서비스를 받게 됨
     * EMBAG이 어떻게 탄생했는지 더 깊이 알고 싶다면, Stürmer 박사의 글 “Open by Default”를 법률로 지정하다 를 참조할 것(독일어)

GN⁺의 정리

     * 스위스 정부가 모든 공공 부문에서 오픈 소스 소프트웨어를 사용하도록 의무화한 EMBAG 법을 시행함
     * 이 법은 공공 부문에서 공급업체 종속을 줄이고, 기업의 디지털 비즈니스 솔루션 성장을 촉진하며, 납세자에게 더 나은 서비스를 제공함
     * Matthias Stürmer 박사는 이 법의 필요성을 강조하며, 공공 자금으로 개발된 코드는 공공의 이익을 위해 공개되어야 한다고 주장함
     * 독일의 한 주도 Microsoft 소프트웨어를 오픈 소스 소프트웨어로 대체하는 움직임을 보이고 있음
     * 이러한 변화는 IT 산업의 경쟁과 혁신을 촉진하고, 공공 부문에서의 비용 절감을 가능하게 함

   한국도 이런 방향으로 이행했으면 좋겠습니다.

   CSAP 인증을 받으셔야 합니다 고갱님

   그래서 준비했습니다. 전 자 정 부 표 준 프 레 임 워 크
   이거 안쓰면 공공 사업 불가합니다.
"
"https://news.hada.io/topic?id=16053","스트라이프, 레몬 스퀴지 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스트라이프, 레몬 스퀴지 인수

    Lemon Squeezy가 Stripe에 인수됨

     * Stripe가 Lemon Squeezy를 인수
          + 2020년에 시작된 Lemon Squeezy는 디지털 제품 판매를 간편하게 만드는 플랫폼을 목표로 함
          + 세금 문제, 사기 방지, 환불 처리, 라이선스 키 관리, 파일 전달 등 복잡한 문제를 해결하는 데 중점을 둠
          + 2021년 공개 출시 후 9개월 만에 연간 반복 수익(ARR) 100만 달러를 돌파
     * Stripe와의 완벽한 조화
          + Stripe는 개발자 경험, API 표준, 디자인에 대한 헌신으로 유명함
          + Lemon Squeezy와 Stripe는 고객 사랑과 판매를 간편하게 만드는 데 공통된 목표를 가짐
          + 두 회사의 결합으로 더 강력한 제품을 제공할 수 있을 것으로 기대됨
     * 앞으로의 계획
          + Stripe의 도움으로 판매자 기록 관리, 청구 지원 강화, 더 직관적인 고객 경험 구축 등을 개선할 예정
          + Lemon Squeezy는 Stripe와의 협력을 통해 더 밝은 미래를 기대함
     * 고객에게 미치는 영향
          + 기존의 신뢰할 수 있는 제품과 서비스를 계속 제공할 예정
          + 고객 중심의 제품과 최상의 고객 서비스를 유지할 것임
     * 감사의 인사
          + 커뮤니티의 성장과 지원에 감사
          + Stripe와 함께 더 많은 성과를 이룰 것을 기대함

    # GN⁺의 정리

     * Lemon Squeezy가 Stripe에 인수되면서 디지털 제품 판매가 더욱 간편해질 전망
     * 두 회사의 결합으로 더 강력하고 직관적인 고객 경험을 제공할 수 있을 것으로 기대됨
     * 고객 중심의 서비스와 제품을 유지하며, 앞으로도 지속적인 개선을 목표로 함
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Gumroad와 Paddle이 있음

        Hacker News 의견

     * Merchant of Record 기능이 유지되기를 바라는 의견이 있음
     * Stripe의 규모가 커지는 것이 무섭다는 의견이 있음
          + 경쟁 대신 다른 회사를 인수하는 방식에 대한 우려
          + 규제 개입이 필요할 수도 있다는 의견
     * Stripe가 국제 세금 준수와 관련된 복잡한 노하우를 인수하는 것에 대한 긍정적인 평가
          + LemonSqueezy를 선택한 이유가 EU 전역의 세금 문제 때문이라는 의견
          + 미국에 있는 경우 LemonSqueezy를 선택할 이유가 없다는 의견
     * LemonSqueezy 팀의 성과에 대한 축하와 칭찬
     * Merchant of Record의 가격 문제가 가장 큰 이슈라는 의견
          + 가격을 Stripe 가격 + 1%로 낮추면 기본 선택이 될 것이라는 의견
     * 국제, PayPal, 구독 결제 및 지급에 추가되는 수수료 조정 계획에 대한 질문
          + 가격 페이지에 명시되지 않은 수수료에 대한 놀라움
     * M&A가 다시 활기를 되찾은 것에 대한 긍정적인 평가
          + LemonSqueezy 팀에 대한 축하
     * LemonSqueezy가 Stripe에 인수될 운명이었다는 의견
          + 브랜드와 UVP가 빠른 인수를 위한 것이었다는 의견
          + 여전히 큰 성과라는 평가
     * 결제 분야의 경쟁 부족에 대한 실망
          + 인수로 인해 경쟁이 더 줄어들 것이라는 우려
          + LemonSqueezy가 Stripe에 의존하고 있었지만, 인수 전에는 독립할 가능성이 있었다는 의견
          + LemonSqueezy가 단순한 사용 사례에 집중하는 결제 제공자로서의 역할을 기대했으나, 이제 Stripe의 복잡한 시스템에 통합될 것이라는 우려
     * Stripe가 Patreon과 같은 서비스를 금지했기 때문에 LemonSqueezy를 기반으로 무언가를 만들고 싶었다는 의견
          + 이 금지가 LemonSqueezy에도 적용될 것인지에 대한 질문
"
"https://news.hada.io/topic?id=16012","Briefer – 일정, SQL, 내장 LLM이 포함된 멀티플레이어 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Briefer – 일정, SQL, 내장 LLM이 포함된 멀티플레이어 노트북

     * Notion + Jupyter 에 확장 기능을 추가
          + 노트북 스케줄링, 대시보드와 앱으로 변환, 데이터 프레임으로 결과를 리턴하는 SQL 쿼리 등
     * 기존 노트북의 문제점 해결
          + 공유의 어려움 : 데이터 팀 작업을 보기위해 Docker+Python 설치가 필요
          + 노트북이 너무 복잡함 : 코드 블록이 너무 많아져서 가독성 저하 및 비기술자가 이해하기 어려움
          + 데이터베이스 쿼리, API 호출, 그래프 작성 등의 간단한 작업도 복잡함
     * Briefer의 해결 방법
          + 공유 문제 해결
               o 노트북을 클라우드로 이동하여 스케줄링 가능
               o CRDTs와 Yjs를 사용해 상태 관리, 실시간 편집 반영
          + 노트북 정리
               o 깨끗한 디자인과 블록을 그룹화하여 정리 가능
               o 블록을 탭으로 그룹화하고, 공개 버전에 표시할 블록 선택 가능
               o 대시보드 구축 기능 제공
          + 간단한 작업의 간편화
               o 클릭으로 그래프 작성, AI 어시스턴트로 복잡한 차트 코드 생성
               o SQL 쿼리 결과를 자동으로 데이터 프레임으로 변환, DuckDB를 사용해 파일 쿼리 가능

주요 기능들

     * 파일 트리
          + 파일 트리는 노트북을 관리하고 탐색할 수 있는 곳
          + Notion과 마찬가지로 각 노트북에 대한 아이콘을 선택하고, 순서를 변경하거나, 하나를 다른 노트북 안에 넣을 수 있음
          + 노트북을 삭제하면 휴지통에 사본을 보관하여 필요한 경우 복원할 수 있음
     * 블록과 탭 : Briefer 노트북은 다양한 유형의 블록으로 구성됨
          + 텍스트 블록: 노트북에 컨텍스트를 추가하기 위함
          + 쿼리 블록: 파일이나 Postgres, BigQuery, Redshift, Athena 등과 같은 연결된 데이터 소스에서 데이터를 수집하기 위함
          + 파일 업로드 블록: 데이터가 연결된 데이터 소스에 없는 경우 CSV, XLS 또는 기타 파일을 노트북에 추가하기 위함
          + Python 블록: 데이터를 조작하고, 시각화를 생성하거나, 원하는 다른 작업을 수행하기 위해 Python 코드를 작성하기 위함
          + 입력 블록: 텍스트 입력이나 드롭다운과 같은 대화형 요소를 노트북에 추가하기 위함
          + 시각화 블록: 코드를 작성하지 않고 시각화를 생성하기 위함
          + 노트북에 블록을 추가한 후, 이를 탭으로 그룹화하여 노트북을 구성하고 탐색하기 쉽게 만들 수 있음
     * 파일과 데이터베이스
          + 래퍼나 커넥터를 작성하지 않고도 쿼리 블록을 사용하여 파일 및 데이터베이스에서 데이터를 쿼리할 수 있음
          + 데이터가 데이터베이스에 있는 경우 쿼리 블록을 사용하여 SQL 쿼리를 작성하고 필요한 데이터를 가져올 수 있음
          + 데이터가 파일(CSV, XLSX, Parquet 등)에 있는 경우 해당 파일을 업로드하고 일반 SQL을 사용하여 쿼리할 수 있음
          + 쿼리 블록을 사용하여 데이터프레임을 일반 SQL로 쿼리할 수도 있음
     * 자동 데이터프레임
          + 모든 쿼리 블록은 자동으로 쿼리 결과를 포함하는 Pandas 데이터프레임을 생성함
          + 이를 통해 이 데이터를 추가 Python 블록에서 사용할 수 있음
          + 기본적으로 데이터프레임에는 query_1과 같은 이름이 지정되지만 더 의미 있는 이름으로 바꿀 수 있음
     * AI 어시스턴트
          + SQL 및 Python 블록에는 AI 어시스턴트가 포함됨
          + AI 어시스턴트의 도움이 필요할 때마다 ""AI로 편집""을 클릭하고 어시스턴트에게 원하는 작업을 알려줄 수 있음
          + 그러면 AI 어시스턴트가 제안을 생성하고 시도, 수락 또는 거부할 수 있는 diff를 보여줌
          + Python 블록에서 AI 어시스턴트는 기존 데이터프레임과 열을 인식함
          + SQL 블록에서 AI 어시스턴트는 이미 데이터베이스의 테이블과 열을 알고 있으므로 더 나은 제안을 제공하고 복잡한 쿼리를 올바르게 작성하는 데 도움을 줄 수 있음
          + 오류가 발생할 때마다 ""AI로 수정""을 클릭하여 AI 어시스턴트가 수정을 시도하게 할 수 있음
     * 스케줄
          + 노트북을 매시간, 매일, 매주 또는 매월과 같은 특정 간격으로 실행하도록 예약할 수 있음
          + 예약을 생성할 때 스케줄이 성공적으로 실행되거나 실패할 때 이메일이나 Slack 메시지를 받도록 알림을 설정할 수도 있음. 성공적인 실행의 경우 노트북 출력이 포함된 PDF 파일도 받게 됨
     * 스냅샷과 버전 관리
          + 노트북을 게시할 때마다 노트북의 상태를 자동으로 저장하여 시간 경과에 따른 변경 사항을 확인하고 필요한 경우 이전 버전으로 롤백할 수 있음
          + 이를 통해 노트북에 대한 변경 사항을 추적하고 문제가 발생하면 이전 버전으로 되돌릴 수 있음
          + 또한 모든 성공적인 예약 실행은 해당 시점의 노트북 상태에 대한 스냅샷을 생성함
          + 스냅샷은 결과가 시간에 따라 어떻게 변경되었는지 보거나 서로 다른 실행의 출력을 비교할 때 유용함
     * 대시보드로의 노트북
          + 노트북의 출력을 사용하여 대시보드를 만들 수 있음
          + 차트를 그리기 전에 많은 데이터 랭글링을 수행해야 하는 경우와 같이 불필요한 코드나 설명을 포함하지 않고 결과를 다른 사람과 공유할 수 있음
          + 사용자가 입력 및 드롭다운과 상호 작용할 수 있도록 하지만 내부 코드를 보여주고 싶지 않은 데이터 앱을 구축할 때도 대시보드 보기가 유용함

GN⁺의 의견

     * 이 플랫폼은 노트북 스타일의 데이터 분석 및 시각화 작업에 유용할 것으로 보임
     * 클라우드 기반으로 실시간 협업 가능하며, 사용자 친화적인 인터페이스와 정리 기능으로 가독성 향상 및 비기술적인 사용자도 쉽게 데이터 분석 결과를 볼 수 있어 협업 효율성 증가
     * AI 어시스턴트가 SQL 쿼리 및 Python 코드 작성을 지원한다는 점도 데이터 분석 작업의 생산성을 높일 수 있을 것임. 다만 AI 제안의 정확성과 효용성은 실제로 사용해 봐야 알 수 있음
     * 노트북의 스케줄링 및 버전 관리 기능은 반복적인 데이터 분석 작업이나 협업 시 유용할 것으로 보임. 다만 이를 위해서는 안정적인 인프라 운영이 전제되어야 함
     * 대시보드 생성 기능을 통해 분석 결과를 비개발자와 쉽게 공유할 수 있다는 점도 장점. 그러나 대시보드의 레이아웃 및 디자인 자유도가 어느 정도일지는 미지수
     * 유사한 플랫폼으로는 Jupyter Notebook, Google Colab, Deepnote 등이 있음. 이들과 차별화되는 Briefer만의 장점이 무엇일지 고민해 볼 필요가 있음. 예를 들어 보다 간편한 사용성, 강력한 협업 기능 등이 있을 수 있음

        Hacker News 의견

     * 제품 관리자들은 간단한 Excel 공식과 차트를 설정하여 작업을 쉽게 만들려고 노력함
          + 스크린샷을 찍는 등의 작업 포함
     * 데이터 엔지니어들은 Superset과 dbt 같은 오픈소스 솔루션을 사용하여 더 기술적인 작업을 수행함
     * 기업들은 종종 최종 UI를 직접 구축하려고 함
          + Pinterest가 오픈소스한 것을 기억함
     * 노트북 같은 도구를 만드는 것이 얼마나 어려운지 깊이 이해함
          + 협업과 UX에 문제가 있음
     * 데이터 자체와 경쟁이 치열한 시장 때문에 기능 제안이 어려움
          + Popsql이 번창하지 못한 것을 기억함
     * Lucas의 작업을 칭찬하며, CLI, 커넥터, 심볼릭 계산, 오프라인 지원, 암호화된 네임스페이스 추가를 제안함
          + 이는 다른 경쟁자들보다 앞서게 할 것임
          + 바쁘겠지만 논의하고 싶으면 연락하라고 함
     * Python과 데이터 과학(Jupyter에서 pandas, Polars, scikit learn, XGBoost 등)을 많이 가르침
          + 소프트웨어 엔지니어링의 모범 사례도 가르침
     * 교육을 통해 많은 문제가 해결된다는 경험을 공유함
          + 최근 클라이언트에서 이를 다시 확인함
     * 초보자 친화적인 코드 작성에 집중하는 대신, 전문가 수준의 코드를 작성해야 한다고 생각함
          + 초보자들은 이 코드를 좋아하지 않을 것임
     * 소셜 미디어에서 비판을 받지만, 학생들과 독자들의 긍정적인 반응이 있음
     * 노트북과 크론 작업, 상태 저장을 사용하는 워크플로우를 구축한 경험이 있음
          + 문제를 전체적으로 해결하려는 시도를 기쁘게 생각함
     * 출시를 축하하며, 예제 GIF의 90년대 Mac Finder 크롬이 시선을 분산시킨다고 언급함
          + 시각적, 의미적으로 정리할 것을 제안함
     * Python/코드 블록 지원이 흥미로움
          + Jupyter 노트북은 어디서나 실행 가능함
          + 로컬 설치나 로컬 Python 설치에 연결을 중계하여 지원하는지 묻는 질문
          + 모든 Python 코드가 클라우드 서버에서 실행되어야 하는지, 고성능 GPU 접근이 불가능한지 묻는 질문
     * 출시를 축하하며, Hex 같은 기존 도구와 비교하여 어떻게 발전할지 궁금해함
     * 비기술적 조직을 위한 온라인 협업 도구로도 판매할 수 있다고 언급함
          + 많은 사람들이 Microsoft Access보다 더 편리한 도구를 원한다고 말함
     * 내부 쿼리 카탈로그와 대시보드를 구축하는 데 유용한 도구가 될 수 있다고 언급함
          + Grafana의 ""변수""와 유사한 동적 필드 선택기를 지원하는지 묻는 질문
     * 노트북의 첫 번째 문제는 공유가 어렵다는 점을 언급함
          + PM들과 GitHub 링크를 통해 노트북을 공유함
"
"https://news.hada.io/topic?id=16008","공항 얼굴 인식 스캔 선택적 거부 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         공항 얼굴 인식 스캔 선택적 거부 가능

    여름 여행 계획 중? 공항에서 얼굴 인식을 피하는 방법

     * 서문
          + Sigal Samuel은 Vox의 Future Perfect의 선임 기자로, 인공지능과 신경과학의 발전과 그 윤리적 문제를 주로 다룸.
          + 얼굴 인식 기술의 문제를 오랫동안 보도해왔지만, 공항에서 얼굴을 여러 번 스캔함.
          + 주된 이유는 얼굴 인식을 거부할 수 있다는 사실을 몰랐기 때문임.
     * 얼굴 인식을 거부하는 방법
          + 미국 내 국내선에서는 모든 승객이 얼굴 인식을 거부할 수 있음.
          + 국제선의 경우, 미국 시민은 거부할 수 있지만 외국인은 일부 예외를 제외하고 참여해야 함.
          + 카메라에서 멀리 서거나 마스크로 얼굴을 가리고, 신분증을 제시하며 ""생체 인식을 거부합니다. 표준 확인 절차를 원합니다.""라고 말하면 됨.
          + 이론적으로는 공항 직원이 수동으로 신분증과 얼굴을 비교해야 하지만, 실제로는 저항이나 협박을 받는 경우도 있음.
     * 얼굴 인식 기술의 작동 방식
          + 미국 내 80개 이상의 공항에서 얼굴 인식 기술을 시범 운영 중이며, TSA는 이를 모든 공항에 도입하려 함.
          + 얼굴 인식 기술의 위험성: 데이터 도난, 잘못된 신원 확인, AI 편향성 등.
          + Joy Buolamwini는 공항 얼굴 인식이 감시를 정상화하는 것에 대한 우려를 표명함.
     * 얼굴 인식 데이터의 삭제 여부
          + 미국 시민이 아닌 경우, 얼굴 사진이 삭제되지 않을 가능성이 큼.
          + CBP 문서에 따르면, 비시민 여행자의 얼굴 이미지는 75년 동안 보관됨.
          + 미국 시민의 경우, CBP는 사진을 12시간 이내에 삭제한다고 하지만, 얼굴 템플릿이 삭제되는지는 불확실함.
     * 얼굴 인식을 이미 허용한 경우, 다음 번에 거부할 필요가 있는가?
          + Buolamwini는 여전히 얼굴 인식을 거부하는 것이 중요하다고 강조함.
          + 대중의 반발이 충분하면 얼굴 데이터 삭제로 이어질 수 있음.
          + TSA의 얼굴 인식 도입 이유는 공항에서의 마찰을 최소화하기 위함임.

    GN⁺의 정리

     * 이 기사는 공항에서 얼굴 인식 기술을 거부할 수 있는 방법과 그 중요성에 대해 설명함.
     * 얼굴 인식 기술의 위험성과 윤리적 문제를 강조하며, 대중의 인식과 행동이 변화를 이끌 수 있음을 시사함.
     * 비슷한 기능을 가진 프로젝트로는 Algorithmic Justice League의 ""Freedom Flyers"" 캠페인이 있음.

        Hacker News 의견

     * Boston International Airport에서 TSA와 5분간 논쟁 후 사진 저장을 거부했음
          + 사진을 저장하지 않는 옵션은 소프트웨어에서 체크박스를 선택하는 것뿐이었음
          + 결국 비행기를 타지 않는 것이 대안이었음
          + 얼굴 인식 강제화는 사기임
     * 감시와 데이터 유출이 정상화되고 있음
          + 민감한 데이터를 법 집행 기관에 제공하는 것도 정상화되고 있음
          + 저항하기 어렵고 많은 사람들이 그냥 받아들이고 있음
     * 남편의 직장에서 생체 인식을 강요했음
          + 단순한 근무 시간 기록을 위해 생체 데이터를 제공하는 것은 터무니없음
          + 동료들에게 서명하지 말라고 권장했지만 대부분 신경 쓰지 않았음
     * 금융 기관에서 신원 확인을 위해 생체 인식을 강요했음
          + 기존의 신분증명서류를 제공해야 했음
          + 생체 인식이 추가로 필요한 이유를 이해할 수 없었음
     * 사람들은 일반적으로 저항이 적은 길을 선택함
          + 생체 인식이 정상화되는 것을 막기 어려울 것 같음
     * 미국으로 돌아오는 비행기에서 얼굴 스캔을 거부했음
          + 직원이 무례하고 공격적이었음
          + 사진이 즉시 삭제되는지 여부는 중요하지 않음, 중요한 것은 메트릭스임
     * 연방 정부가 얼굴 정보를 가지는 것에 대해 신경 쓰지 않음
          + 이미 여권과 운전면허증이 있음
          + 문제는 사기업이 이를 사용하거나 저장하는 것임
          + Clear에 가입하지 않을 것이며, 다른 사람들에게도 신뢰하지 말라고 말함
     * 애리조나에서 ""Real ID"" 운전면허증을 받기 위해 얼굴 스캔 앱을 사용해야 했음
          + 공항에 가기 전에 이미 얼굴 스캔이 완료됨
          + 공항에서 이전 얼굴 스캔과 비교할 수 있을지 궁금함
     * 달라스에서 얼굴 인식 시스템이 완전히 선택 사항이라고 안내했음
          + 직원에게 ""옵트 아웃""을 요청했지만 이해하지 못했음
          + 훈련이 부족함을 느꼈음
     * Algorithmic Justice League의 기사를 참고함
          + TSA 기사를 가지고 다니며 필요시 제시할 계획임
     * 모든 것을 옵트 아웃했지만 이제는 포기했음
          + Clear에 가입하고 사진을 제공함
          + 이미 모든 정보를 알고 있다고 생각함
          + 더 이상 저항할 힘이 없음
     * 얼굴 스캔이라는 용어 사용에 의문을 가짐
          + 단순히 사진을 찍는 것과 다르지 않음
          + 3D 스캔이 아닌 단순한 디지털 사진임
     * 매번 얼굴 스캔을 거부하지만 직원들은 크게 신경 쓰지 않음
          + 이미지가 즉시 삭제된다고 설명함
"
"https://news.hada.io/topic?id=16045","Svelte로 제작된 UI 밀도 실험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Svelte로 제작된 UI 밀도 실험

        Hacker News 의견

     * 많은 데이터를 다루는 사용자로서, iTunes에서 영감을 받아 DataTables를 사용해왔음
          + 실시간 업데이트, 다중 컬럼 안정적 정렬, 행 강조, 후행 0 감춤, 적절한 색상 사용, 24H Low/High 컬럼 그래프 등 선호
          + 수평 스크롤바가 거의 보이지 않음, 넓은 수직 스크롤바, 24H Low/High 정렬 방식, 필터링 부재 등은 단점으로 지적
     * 고정 수입 거래를 위한 밀집된 UI를 Svelte로 이전하려고 함
          + React는 많은 데이터를 처리하기 어려움
          + 프로그래머와 디자이너가 모든 도메인에서 Instagram 스타일 UI를 재구성하려는 경향을 비판
          + 사용자가 프로그래머보다 높은 급여를 받는 환경에서는 단순한 UI가 제한적일 수 있음
     * 테이블 스크롤바에 추가 정보를 포함시킨 점을 긍정적으로 평가
          + 헬릭스 그래프는 읽기 어렵고 주기적인 데이터에 더 적합
          + 3D 시각화는 2D 그래프 세 개로 대체하는 것이 더 효과적일 수 있음
     * Windows Forms에서 DataGridView 컨트롤을 사용해 데이터 중심 금융 앱을 개발하는 것을 선호
          + 높은 밀도와 성능, 필터링, 정렬, 드래그 앤 드롭 컬럼 재정렬 및 크기 조정 가능
          + React로 유사한 UI를 작성하려는 시도는 성능 문제로 실패
     * Perspective와의 비교를 제안
          + 밀도 중심의 성능, 시각화 또는 다른 요소에 대한 초점 여부 질문
     * 그리드 뷰는 괜찮지만 테이블 뷰는 사용하기 어려움
          + 눈의 미세한 정렬 문제로 인해 줄을 스캔하는 데 어려움
          + 줄무늬 배경과 같은 시각적 보조 장치 필요
     * 정보 밀도가 높은 인터페이스로의 회귀를 희망
          + Material Design 이후의 불필요한 공백과 여백을 비판
     * 실험의 결론에 대해 궁금증 제기
          + 많은 인터랙티브 요소가 있는 경우 성능 문제가 발생할 수 있음
          + 캔버스를 사용하여 해결
     * 헬릭스 차트가 멋지지만 실용성에 의문
          + 실험의 결론에 대해 궁금증 제기
"
"https://news.hada.io/topic?id=16080","이동 가능한 트리 CRDT와 Loro의 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        이동 가능한 트리 CRDT와 Loro의 구현

     * Movable tree CRDTs and Loro's implementation
     * 배경
          + 분산 시스템과 협업 소프트웨어에서 계층적 관계를 관리하는 것은 복잡함
          + 데이터 구조에서 삭제와 삽입을 결합하여 이동을 모델링할 때 충돌 해결과 사용자 기대 충족이 어려움
          + 예를 들어, 동일한 노드를 다른 부모로 동시에 이동하면 동일한 내용의 중복 노드가 생성될 수 있음
     * 이동 가능한 트리의 충돌
          + 이동 가능한 트리의 주요 작업: 생성, 삭제, 이동
          + 동시 작업 동기화 시 발생할 수 있는 충돌:
               o 동일한 노드가 삭제되고 이동됨
               o 동일한 노드가 다른 노드 아래로 이동됨
               o 다른 노드가 이동되어 순환이 발생함
               o 조상 노드가 삭제되는 동안 자손 노드가 이동됨
     * 동일한 노드의 삭제와 이동
          + 상대적으로 해결이 쉬움
          + 분산 시스템의 타임스탬프나 애플리케이션의 특정 요구 사항에 따라 하나의 작업을 적용하고 다른 작업을 무시함
     * 동일한 노드를 다른 부모 아래로 이동
          + 동시 이동 작업 병합은 더 복잡함
          + 애플리케이션에 따라 다양한 접근 방식 채택 가능:
               o 노드를 삭제하고 다른 부모 노드 아래에 복사본 생성
               o 노드가 두 부모에게 연결되도록 허용 (일반적으로 허용되지 않음)
               o 모든 작업을 정렬하고 순차적으로 적용
     * 다른 노드의 이동으로 인한 순환 발생
          + 동시 이동 작업으로 인한 순환 해결은 복잡함
          + 여러 해결책:
               o 오류 발생
               o 순환 노드를 특별한 ""타임아웃"" 영역에 렌더링
               o 서버에서 이동 작업 처리
               o 위상 정렬 사용
               o 순환을 일으키는 엣지를 숨김
     * 조상 노드 삭제와 자손 노드 이동
          + 조상 노드 삭제 시 자손 노드 이동은 쉽게 간과될 수 있음
          + 모든 자손 노드를 직접 삭제하면 데이터 손실로 오해할 수 있음
     * 인기 있는 애플리케이션의 충돌 처리 방법
          + Dropbox: 파일 이동을 삭제 후 생성으로 처리했으나 데이터 손실 위험 있음
          + Figma: 중앙 서버가 순환을 감지하고 작업을 거부하여 일관성 유지
     * 이동 가능한 트리 CRDTs
          + 중앙 집중식 솔루션 대신 CRDTs 사용
          + 초기 CRDT 기반 알고리즘은 구현이 어렵고 저장 오버헤드가 큼
          + 지속적인 최적화로 일부 CRDT 기반 트리 동기화 알고리즘이 생산 환경에 적합해짐
     * 복제된 트리를 위한 고가용성 이동 작업
          + 트리의 세 가지 작업(생성, 삭제, 이동)을 이동 작업으로 통합
          + 이동 작업은 Move t p m c로 정의됨
          + 노드 삭제는 TRASH 노드로 이동하여 처리
     * 전역적으로 정렬된 논리적 타임스탬프
          + Lamport 타임스탬프 사용하여 분산 시스템에서 이벤트의 인과 순서 결정
          + 작은 숫자가 더 이른 이벤트를 의미함
     * 원격 작업 적용
          + 작업의 안전성은 적용 시 트리 상태에 따라 다름
          + 원격 업데이트를 처리할 때 최근 작업을 되돌리고 새로운 작업을 삽입한 후 되돌린 작업을 다시 적용
     * CRDT: 가변 트리 계층 구조
          + 각 노드가 모든 역사적 부모 노드를 추적하고 카운터를 부여
          + 동기화 시 순환이 발생하면 가장 가까운 역사적 부모 노드에 다시 연결
     * Loro에서의 이동 가능한 트리 CRDTs 구현
          + Martin Kleppmann의 알고리즘을 구현하여 높은 성능 제공
          + Fractional Index 알고리즘을 통합하여 자식 노드 정렬 가능
     * 자식 노드 정렬에서의 잠재적 충돌
          + 동일한 위치에 여러 노드를 삽입할 때 동일한 Fractional Index가 할당될 수 있음
          + PeerID를 사용하여 동일한 Fractional Index의 상대적 순서 판단
     * 구현 및 인코딩 크기
          + Fractional Index는 노드 순서를 제공
          + 인코딩 크기는 최악의 경우 추가 바이트가 필요하지만 드문 상황임
     * 관련 작업
          + Fractional Index 외에도 이동 가능한 목록 CRDT가 있음
          + Fractional Index는 구현이 간단하고 상대적 순서만 필요할 때 유용함
     * 벤치마크
          + Loro의 이동 가능한 트리 구현 성능 벤치마크 수행
          + 실시간 협업과 원활한 역사적 버전 체크아웃 지원 가능
     * 요약
          + 이동 가능한 트리 CRDTs 구현의 어려움과 두 가지 혁신적인 알고리즘 소개
          + Loro는 Martin Kleppmann의 알고리즘과 Fractional Index를 통합하여 다양한 애플리케이션 시나리오를 충족
     * GN⁺의 정리
          + 이동 가능한 트리 CRDTs는 분산 시스템에서 계층적 데이터 구조를 관리하는 데 중요한 역할을 함
          + Loro는 높은 성능과 효율적인 충돌 해결을 제공하여 실시간 협업 애플리케이션에 적합함
          + Fractional Index를 사용하여 자식 노드 정렬 문제를 해결함
          + 유사한 기능을 가진 다른 프로젝트로는 Figma와 Dropbox가 있음

        Hacker News 의견

     * 새로운 멀티플레이어 편집기를 개발 중임
          + 텍스트와 아웃라이너 작업을 지원함
          + 문서는 큰 트리 구조로 변환됨
          + insmov(이동 또는 삽입) 작업을 사용하여 동기화함
          + 서버가 변경 사항을 보내면 클라이언트는 이를 다시 적용함
          + 대부분의 경우 작업을 되돌릴 필요가 없음
          + 실시간 업데이트 시 문제가 거의 발생하지 않음
     * React Table Library를 오픈 소스로 제공함
          + 폴더/파일 트리 구조를 처리함
          + 폴더/파일 이동, 복제, 지연 로딩 등을 지원함
          + Google Drive가 동일한 계층 수준에서만 표시 및 수정하는 이유를 이해하게 됨
     * 조언을 구함
          + 큰 비정규화된 트리를 프론트엔드에서 사용 중임
          + 사용자 프로필을 타일 레이아웃으로 관리함
          + 안전한 업데이트를 위해 최소한의 데이터를 전송함
          + CRDT를 사용하면 상태 관리가 훨씬 쉬워질 것 같음
          + 브라우저 탭 간 동기화가 가능해짐
     * Google Docs/Zoho Writer와 같은 형식화된 텍스트 콘텐츠 작업 시 트리 조작이 필요함
          + 동시 충돌 문제 해결이 어려움
          + 리스트 CRDT와 트리 CRDT를 결합할 수 있을 것 같음
          + 모든 작업에 2차원 주소를 추가해야 함
     * 이미지(픽셀) 및 3D 모델과 같은 데이터 밀집 응용 프로그램에 대한 실용적인 CRDT가 있는지 궁금함
     * 첫 번째 단락이 ChatGPT의 목소리를 닮았다고 생각함
"
"https://news.hada.io/topic?id=16111","Yelp, 내 앱이 10년간 사용하던 API에 단 4일 기간만 주고 비활성화 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Yelp, 내 앱이 10년간 사용하던 API에 단 4일 기간만 주고 비활성화

     * 2014년 Apple이 Swift를 출시해서, 이와 Yelp API를 사용하여 Mac용 레스토랑 검색 앱을 만들기로 결정
     * Yelp의 개발자 관계 담당자에게 이메일을 보내 허가를 받고, Yelp API를 사용하여 하루 25,000회 호출 제한을 부여받음
     * 앱은 빠르고 macOS와 잘 통합된 레스토랑 검색 도구가 됨
          + Mac App Store에서 $1.99에서 $4.99 사이의 가격으로 판매됨
          + AppKit과 CDYelpFusionKit 같은 서드파티 라이브러리를 사용하여 앱을 개발함
          + 다양한 macOS 기능과 통합하여 사용자가 레스토랑을 쉽게 검색하고 정보를 공유할 수 있도록 함
          + 레스토랑 카테고리를 이모지로 표시하는 디자인 결정이 인기를 끌었음 (미국 전통식당은 🦃 칠면조를 표시)

    4일의 기한

     * 2024년 7월 19일, Yelp로부터 API 사용에 대한 이메일을 받음
     * 이메일 내용은 API 사용이 다른 개발자보다 높으며, 상업적 사용을 위해 라이선스 계약이 필요하다는 내용이었음
     * 4일 내에 응답하지 않으면 API 키가 비활성화될 것이라는 위협적인 내용이 포함됨
     * 이메일에 응답했으나, Yelp는 유료 라이선스 프로그램으로 전환되었음을 통보함
     * 결국 내 앱을 Mac App Store에서 제거하고, Yelp API 사용을 중단함

    개발 종료

     * Yelp와의 추가 이메일 교환 후, 앱의 판매를 중단하고 API 키가 비활성화됨
     * 최근에 앱을 구매한 사용자들에게 환불을 요청하도록 안내함
     * 다른 API로 전환을 고려했으나, Yelp API만큼 포괄적인 API가 없어 재개발을 포기함

    배운 교훈

     * 서드파티 API에 의존하는 앱은 해당 회사의 정책 변화에 취약함
     * 지속적인 서비스 접근이 필요한 앱의 경우, 선불 모델보다는 구독 모델이 더 나을 수 있음
     * 사용자가 앱을 구매할 때 ""영구적인 접근""을 기대하지 않도록 하는 것이 중요함

  GN⁺의 정리

     * 이 기사는 서드파티 API에 의존하는 앱 개발의 위험성을 잘 보여줌
     * Yelp API의 갑작스러운 유료화 전환으로 인해 앱 개발자가 겪는 어려움이 잘 나타남
     * 지속적인 서비스 접근이 필요한 앱의 경우, 구독 모델이 더 적합할 수 있음을 강조함
     * 비슷한 기능을 제공하는 다른 API로는 Google Places가 있지만, Yelp API만큼 포괄적이지 않음

   음.. 기간을 짧게 준 Yelp가 이상하긴 한데, 검색 API를 무료로 제공받아서 유료 앱을 만들어 판매한거면 Yelp 입장에서도 충분히 그럴만하다고 생각도 드네요.

        Hacker News 의견

     * YouTube API 사용 경험
          + 오디오 팟캐스트를 YouTube 채널로 자동 변환하는 서비스를 개발했음
          + Google과의 API 사용 승인 과정에서 수개월 동안 검토를 거쳤음
          + 실제 서비스 출시 후 API 키가 비활성화되었고, 수개월 동안 이메일을 보냈지만 동일한 답변만 받았음
          + 결국 서비스를 종료하고 다른 방향으로 전환했음
     * API 사용자에 대한 적대감
          + 스타트업과 기업가를 대상으로 하는 사이트에서 API 사용자에 대한 적대감을 느꼈음
          + API 사용자들의 무력함을 지적하는 블로그 게시물의 본질을 놓치고 있음
     * Yelp API 사용 경험
          + 취미 프로젝트로 Yelp API를 사용했으나 업데이트로 인해 사용이 중단되었음
          + 스팸 폴더에서 이메일을 발견했고, 답변 후 사용 기한이 며칠 연장되었으나 결국 중단되었음
          + 새로운 가격 정책이 비합리적이라고 생각했음
     * Yelp API 승인 문제
          + Yelp API를 10년 동안 사용했으며 공식 승인을 받았음
          + 시간이 지나면서 승인에 대한 지식이 사라졌을 가능성이 있음
     * API 접근 유지에 대한 놀라움
          + API 접근이 오랫동안 유지된 것에 놀랐음
          + 새로운 API 가격 정책이 AI 데이터 스크래핑을 방지하기 위한 것일 수 있음
     * 단일 실패 지점 회피
          + 단일 실패 지점을 피하는 것이 중요함
          + 비즈니스를 죽일 수 있는 단일 엔티티에 의존하지 말아야 함
     * 대기업의 지원 부족
          + 대기업의 지원 부족이 문제라고 생각함
          + 이메일로 연락하는 담당자와 소통이 어려움
     * Yelp의 마케팅 전략
          + Yelp의 마케팅 전략이 단기적이고 수익 손실을 초래한다고 생각함
          + Apple Map에서 Yelp를 제거하기를 기대함
     * AI 훈련을 위한 API 차단
          + Yelp가 AI 훈련을 위해 API를 차단한다고 생각함
          + 앱 구매자가 환불을 요청하지 않을 것이라고 생각함
     * 계약 위반 가능성
          + 10년 전 승인된 내용이 계약 위반일 가능성이 있음
          + 계약 또는 서비스 약관 변경 시 사전 통지 요구 사항이 있을 수 있음
          + 저자가 원한다면 소액 청구 법원에 손해 배상을 청구할 수 있음
"
"https://news.hada.io/topic?id=16092","Show GN: nextjs-ko: Next.js 첫 한국어 커뮤니티 번역 문서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: nextjs-ko: Next.js 첫 한국어 커뮤니티 번역 문서

Next.js 공식문서 한글 번역

   안녕하세요 :) 프론트엔드 개발 재밌게 하고 계신가요?
   너무나도 친절한 React.js 한글 문서에 비해 Next.js는 한글 문서가 없는 것이 아쉬워 지난 주말간 LLM의 도움을 받아 번역 및 배포를 진행했습니다.
     * 이미 많은 커뮤니티 컨트리뷰터 분들께서 도와주고 계십니다!

번역 과정

    0. 프로젝트 시작부터 배포까지 20시간 내로 진행했습니다.
    1. chatGPT 4o를 통해 번역했습니다.
    2. 공식문서의 성격을 유지하기 위해 '마크다운 파일', '개발 단어 원문 유지', '있는 그대로 번역' 등의 프롬프트를 통해 (약간의 노가다와 함께) 쉽게 번역했습니다.

오픈소스 컨트리뷰터 모십니다!

    1. 아직 재밌는 신규 번역문서 열 건 정도 남아있습니다. (편하고 빠르게 번역에 참여하실 수 있게 프롬프트 공유 드립니다.)
    2. 문서의 전반적인 어투나 용어집 + 웹사이트 기능 개발 등 여러 컨트리뷰션 받습니다!
    3. vuejs나 reactjs 처럼 커뮤니티를 통해 공식 한글문서로 할당 받는것이 목표입니다.

링크

    1. 문서
    2. 레포
    3. 개발기 블로그 (반말로 작성한 터라 읽기 조금 불편하실 수도 있습니다. ㅜㅜ 양해 부탁드립니다.)

   재밌는 경험이 될거 같네요! 참여해보고 싶지만 시간을 많이 할애할 수 없어서 고민됩니다.

   gpt 등 llm 이용해서 쉽게 번역하실 수 있도록 제가 사용했던 프롬프트도 공유해드리고 있습니다! ㅎㅎ
   클론부터 PR까지 10분 이내로 완료하실 수 있으니 참여해주시면 재밌는 경험 되실것 같습니다. :)

   한번 짬 내서 참여해보겠습니다!
"
"https://news.hada.io/topic?id=16006","크라우드스트라이크, 서비스 중단 사과로 10달러 기프트 카드 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  크라우드스트라이크, 서비스 중단 사과로 10달러 기프트 카드 제공

    CrowdStrike의 사과

     * CrowdStrike는 최근 업데이트 오류로 전 세계 수백만 대의 컴퓨터가 다운된 사건에 대해 사과의 의미로 파트너들에게 $10 상당의 Uber Eats 기프트 카드를 제공함
     * 여러 사람들이 이 기프트 카드를 받았다고 보고했으며, 일부는 기프트 카드가 취소되었다는 오류 메시지를 받았음
     * CrowdStrike 대변인 Kevin Benacci는 Uber가 높은 사용률로 인해 사기성 거래로 플래그를 지정했기 때문에 기프트 카드가 취소되었다고 설명함

    업데이트 오류의 영향

     * 7월 19일 업데이트 오류로 인해 약 850만 대의 Windows 장치가 사용 불가능해짐
     * 이로 인해 암스테르담, 베를린, 두바이, 런던 및 미국 전역의 공항에서 지연이 발생함
     * 여러 병원이 수술을 중단해야 했으며, 전 세계 수많은 비즈니스가 마비됨

    CrowdStrike의 대응

     * CrowdStrike는 사건 발생 이후 원인을 파악하기 위해 정기적으로 업데이트를 게시함
     * CEO George Kurtz와 최고 보안 책임자 Shawn Henry는 고객과 파트너에게 사과 메시지를 게시함
     * Kurtz는 사건 해결 과정에서 투명성을 유지하고 재발 방지 조치를 취할 것을 약속함

    GN⁺의 정리

     * CrowdStrike의 업데이트 오류는 전 세계적으로 큰 영향을 미쳤으며, 특히 공항과 병원에 큰 피해를 줌
     * 회사는 사과의 의미로 기프트 카드를 제공했으나, 일부는 취소되어 추가적인 불만을 초래함
     * 이번 사건은 사이버 보안 회사의 업데이트 관리와 검증 과정의 중요성을 강조함
     * 비슷한 기능을 제공하는 다른 사이버 보안 솔루션으로는 Palo Alto Networks와 Symantec이 있음

        Hacker News 의견

     * Uber Eats 기프트 카드가 취소된 것에 대해 불만이 많음
          + 큰 문제에 대한 대응은 더 큰 문제로 만들지 말아야 함
          + PR 101 실패
     * 이전 직장에서 비슷한 경험을 했던 기억
          + 회사가 코드 소유권 서명을 요구하며 $20를 지급했음
          + 금액이 너무 적어 웃음이 나왔음
     * 금융 회사에서 일했던 경험 공유
          + 고객에게 필요 없는 투자 기회를 제공했음
          + IT 부서에서 프로세스를 관리하는 훌륭한 도구를 만들었음
          + 크리스마스 보너스에서 IT 부서는 50% 할인 쿠폰만 받았음
     * Uber Eats 기프트 카드 금액이 모욕적일 정도로 적음
     * 잘못된 사망 소송에서 $4를 받은 가족 이야기와 비슷함
     * CrowdStrike의 보안과 고객 관계 관리 능력 부족
          + 마케팅도 잘 못함
          + 이름이 반인격 드론을 연상시킴
     * Delta 항공편 취소로 인해 가족을 마지막으로 보지 못한 기자 이야기
          + 아버지가 불만을 가진 고객에게 살해당했음
     * $10 기프트 카드 아이디어가 잘못된 이유
          + 추가 비용이 필요해 실질적으로 쓸모없음
          + 회사가 저렴하게 구입했을 가능성 있음
     * CrowdStrike의 기프트 카드 사건이 주가 조작을 위한 장난일 가능성
          + 많은 사용자를 가진 공개 상장 회사가 이런 실수를 저지르기 어려움
"
"https://news.hada.io/topic?id=16075","Show GN: 하루동안의 노션 변경사항 이메일로 깔끔하게 받기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 하루동안의 노션 변경사항 이메일로 깔끔하게 받기

   안녕하세요!

   회사에서 노션을 쓰고 계시다면 만들어지는 문서들 잘 파악하고 계신가요?
   저는 40명 규모의 회사에서 노션을 사용하는데 쉽지 않더라구요.
   그래서 하루에 한번 이메일로 노션에서 업데이트된 페이지를 미리보기와 함께 받아볼 수 있는 도구를 만들었습니다.
     * 아침 8시 이메일 한통에 노션 워크스페이스의 변경사항을 미리보기와 함께 보내드립니다.
     * 외부 사람처럼 이메일로 연락해야할 경우 노션페이지를 이메일로 바로 공유할 수 있습니다.
     * 노션 버전 잔디밭으로 내가 그리고 팀이 얼마나 많은 페이지를 만들었는지 파악할 수 있습니다.

   https://notionto.email/

   한두달 써본 경험으로는 팀이 어떻게 흘러가는지 편하게 파악할 수 있어 너무 좋더라구요.
   조금 심심할 때는 사이트에서 실시간으로 확인하기도 합니다.
   팀에서 노션으로 일하신다면 사용해보시구 피드백 부탁드립니다!

   [*노션 페이지 조회 및 변환 데이터는 저장되지 않습니다.]

   감사합니다.

   감사합니다😊

   예전에 Workflowy 쓸 때 가장 만족하면서 썻던 기능...!

   전체 워크스페이스 말고 개인의 활동으로 다이제스트 해주는것도 좋을 것 같아요 ㅎㅎ

   오! Workflowy라는 서비스 참고해보겠습니다
   말씀해주신대로 필터링을 해보면 좋겠네요! 조언 감사합니다😊

   혹시 제작자이실까요? 이게 드디어 올라오네요! 작업한 내용의 변경점이 모아지는 점이 너무 좋더라구요
   감사하다는 말씀드리고 싶었습니다!

   앗...! 감사합니다. 몇안되는 유저분들 중 한분이 여기 계셨군요
"
"https://news.hada.io/topic?id=16049","Zen 5의 2-어헤드 브랜치 프레딕터: 30년 된 아이디어가 새로운 트릭을 가능하게 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Zen 5의 2-어헤드 브랜치 프레딕터: 30년 된 아이디어가 새로운 트릭을 가능하게 하는 방법

    Zen 5의 2-Ahead Branch Predictor Unit: 30년 된 아이디어가 새로운 트릭을 가능하게 하는 방법

     * 서론
          + AMD의 Zen 5 아키텍처는 기존 Zen 아키텍처를 완전히 재설계한 것임
          + 가장 중요한 변화 중 하나는 새로운 2-Ahead Branch Predictor Unit임
          + 이 아이디어는 30년 전 논문에서 유래되었음
     * Branch Predictor의 중요성
          + 컴퓨터는 프로그램을 메모리에 저장하고 이를 실행함
          + 프로세서는 명령어를 가져오고 실행하는 전단부와 후단부로 나뉨
          + 조건부 점프는 파이프라인을 채우는 데 큰 도전 과제임
          + 잘못된 예측은 파이프라인을 플러시하고 다시 시작해야 함
          + 따라서 프로세서는 가능한 한 정확하게 프로그램 명령어 시퀀스를 예측해야 함
     * 2-Ahead Branch Predictor의 등장
          + 1990년대 초반부터 제안된 아이디어임
          + TAGE predictor와 같은 더 효율적인 방법이 개발되었음
          + 그러나 단일 코어 성능을 향상시키기 위해 2-Ahead Branch Predictor가 다시 주목받고 있음
     * x86 아키텍처의 이점
          + x86은 고정 길이 명령어를 가진 다른 ISA보다 2-Ahead Branch Prediction에서 더 큰 이점을 얻음
          + x86은 명령어 경계를 결정하는 데 더 복잡한 처리가 필요함
          + Zen 5는 두 개의 32바이트 페치 파이프와 4-와이드 디코드 클러스터를 사용함
     * Seznec 논문의 구현
          + Seznec 논문은 2-Ahead Branch Predictor를 구현하는 방법을 설명함
          + Zen 5는 이 논문의 권장 사항을 따름
          + 두 개의 32바이트 페치 파이프와 6-와이드 듀얼 포트 오프 캐시를 사용함
          + L1 BTB와 L2 BTB를 사용하여 예측 정확도를 높임
     * 결론
          + Zen 5의 2-Ahead Branch Predictor는 Zen 아키텍처의 중요한 변화임
          + 이 새로운 예측기는 향후 Zen 코어 개발에 큰 도움이 될 것임

    GN⁺의 정리

     * Zen 5의 2-Ahead Branch Predictor는 30년 전 아이디어를 현대적으로 재해석한 것임
     * 이 기술은 프로세서의 명령어 예측 정확도를 높여 성능을 향상시킴
     * x86 아키텍처의 복잡성을 해결하는 데 특히 유용함
     * 이 기사는 CPU 아키텍처와 성능 최적화에 관심 있는 사람들에게 유익함
     * 유사한 기능을 가진 다른 프로젝트로는 Intel의 Golden Cove 아키텍처가 있음

        Hacker News 의견

     * branch prediction에 대한 훌륭한 설명이 있음
     * SMT 성능이 흥미로울 것 같음, Zen5c에서 192 Core 또는 384vCPU를 제공함. Zen 6c에서는 256 Core를 기대할 수 있음. Dual Socket 1U Server에서 512 Core와 1024 vCPU 가능성 있음
          + 2014년 웹 앱 스케일링 문제를 단일 서버로 해결할 수 있음, 냉각 문제만 해결하면 됨
          + 1 RPS per vCPU로 1000 RPS 가능, 캐시 히트 제외
          + HN 프론트 페이지도 1000 페이지 뷰 per second를 넘지 않음
     * 수십 년 된 논문이 하드웨어 발전으로 ""최첨단""이 되는 경우가 흥미로움
          + 예: Z-buffer, 3D 비디오 게임에서 사용됨
          + 처음 논문에 발표될 때는 주요 주제가 아니었음, 메모리 요구량이 많았기 때문
          + 몇십 년 후 메가바이트가 저렴해지면서 모든 실시간 3D 렌더러가 사용하게 됨
     * 추측 예측기는 개인 데이터를 유출하는 여러 공격에 취약함. 많은 일반적인 ISA가 취약한데, 이러한 공격의 영향을 줄이기 위한 조치를 취하고 있는지 궁금함
     * 이 분야의 초보자로서 2-ahead branch predictor가 무엇인지 명확하지 않음
     * 더 많은 branch hints가 필요할 것 같음
          + Cold, warm, warmer, 기본값으로 hot 생략? 모든 분기를 cold로 설정하고 하나만 제외하는 것이 나쁜 아이디어일지 궁금함
          + 조건부 분기가 있을 때 두 가지 가능한 분기를 모두 가져와 준비하고 잘못된 것을 버리는 것이 왜 어려운지 궁금함
     * 더 많은 메모리 대역폭이 필요함, 소비자용 AM5 소켓의 두 메모리 채널은 성능에 비해 부족함
          + M2 Max로 이동했는데 메모리 대역폭 개선이 데이터 작업을 가속화함. 무거운 멀티태스킹에서도 Zen 설정의 좁은 메모리 파이프가 자주 막힘
     * Zen 5가 두 개의 스레드를 활성화할 때 디코드 클러스터와 동반된 fetch 파이프가 정적으로 분할됨
          + 이는 하이퍼 스레딩 성능에 큰 향상을 줄 것 같음. Zen1에서 HT로 인해 약 25% 빨라짐. 최신 모델에서 테스트한 사람이 있는지 궁금함
     * 여전히 2-ahead branch predictor가 무엇인지 모르겠음
"
"https://news.hada.io/topic?id=16131","소수의 숨겨진 구조를 밝히는 돌파구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          소수의 숨겨진 구조를 밝히는 돌파구
"
"https://news.hada.io/topic?id=16098","다크 스카이, 데이터 시각화 걸작에 대한 추모 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    다크 스카이, 데이터 시각화 걸작에 대한 추모 (2023)

     * Nightingale 커뮤니티의 5년
          + 2019년 7월, 데이터 시각화 세계에 새로운 출판물이 등장함
          + Nightingale은 커뮤니티의 빈틈을 채우기 위해 시작됨
     * 커뮤니티의 성장
          + Nightingale은 데이터 시각화 전문가와 애호가들을 위한 플랫폼으로 성장함
          + 다양한 주제와 기술을 다루며, 지식 공유와 네트워킹을 촉진함
     * 주요 성과
          + 수많은 기고자들이 참여하여 고품질 콘텐츠를 제공함
          + 데이터 시각화 분야에서 중요한 자료와 인사이트를 제공함
     * 미래 계획
          + 더 많은 기고자와 독자들을 유치하기 위해 노력 중
          + 새로운 기술과 트렌드를 반영하여 콘텐츠를 지속적으로 업데이트할 계획
     * GN⁺의 정리
          + Nightingale은 데이터 시각화 커뮤니티에 중요한 기여를 하고 있음
          + 다양한 전문가들의 참여로 고품질의 자료를 제공함
          + 데이터 시각화에 관심 있는 사람들에게 유용한 정보와 네트워킹 기회를 제공함
          + 유사한 기능을 가진 프로젝트로는 Datawrapper, Tableau 등이 있음

        Hacker News 의견

     * Dark Sky의 가장 그리운 기능은 하루 동안 이슬점 변화를 시각화할 수 있었던 점임
          + 미국 동부 해안에서는 습도에 따라 날씨가 크게 다르게 느껴짐
          + 상대 습도는 날씨의 습도를 측정하는 데 적합하지 않음
          + Dark Sky는 시간별 이슬점 그래프를 제공했음
          + Apple Weather는 이슬점을 보여주지만, 상대 습도 그래프에서 포인트를 선택해야 함
          + 이슬점이 ""절대 습도""를 나타내는 더 우아한 방법임을 인식하는 사람이 적음
     * Dark Sky는 대체 불가능한 앱이었음
          + Apple이 이를 망가뜨린 것에 대해 용서할 수 없음
     * Apple이 Dark Sky를 종료한 후 Weather Strip을 사용하게 되었음
          + 정보 밀도가 높고, 한눈에 여러 정보를 제공함
     * Merry Sky를 대체 앱으로 사용 중임
          + Dark Sky만큼 정확하고 유용하지만, 가끔 데이터 블랙아웃이 발생함
     * Dark Sky를 매우 그리워하며, Apple이 이를 망쳤음
          + Pirate Weather 프로젝트를 후원하며, 이를 통해 개인적인 날씨 디스플레이를 만듦
     * Dark Sky 블로그에는 앱 디자인과 날씨 예측 알고리즘에 대한 포스트가 있었음
          + Apple 인수 후 삭제되었지만, Wayback Machine에 아카이브되어 있음
     * Dark Sky를 많이 사용했으며, ""5분 후 비가 그침"" 기능이 Back To The Future 2를 떠올리게 했음
          + 다른 서비스도 이 기능과 귀여운 UI를 구현해주길 바람
     * Dark Sky를 사용할 때 날씨 예측이 매우 정확했음
          + 현재는 Carrot과 AccuWeather API를 사용 중이지만, 정확도가 떨어짐
     * Apple이 Dark Sky를 다시 출시해주길 바람
          + Weather 앱은 깔끔한 디자인으로 유지하고, 정보 밀도가 높은 Dark Sky를 다시 사용하고 싶음
     * Dark Sky는 실제 날씨 앱이 아니었음
          + 기상학자들은 Dark Sky를 그래픽 처리 도구로 여겼음
          + Dark Sky는 레이더의 시각적 입력을 바탕으로 몇 시간 동안의 날씨를 예측했음
"
"https://news.hada.io/topic?id=16130","인터넷 연결을 끊으세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              인터넷 연결을 끊으세요

     * ""ClownStrike""라는 ""가상""의 보안 업체가 테스트가 부족한 콘텐츠 업데이트로 인해 대부분의 Windows 설치 기반을 중단시킨 사건이 있었음
     * 이런 상황에 대해 비난할 사람이 많겠지만, 대부분은 ""이런 시스템은 인터넷에 연결되어서는 안 된다""는 주장을 되풀이함

인터넷에 연결하지 않는 것의 현실적 고려사항

     * 현대 비즈니스 컴퓨터는 거의 전적으로 통신 장치의 역할을 함
     * 조직과 지리적 경계를 넘나드는 상호 연결 없이는 가치를 창출하기 어려운 실정임
     * 항공사 예약 및 스케줄링 시스템 등은 본질적으로 통신 시스템이므로 네트워킹 없이는 기능할 수 없음

  유지보수와 운영을 위한 네트워크 연결의 중요성

     * 실시간 통신이 필요 없는 시스템이라도 네트워크 연결은 유지보수, 모니터링, 비즈니스 요구사항 변화 대응 등에 매우 유용함

  인터넷에 연결되지 않는다는 것의 다양한 의미

     * 인터넷에 연결되지 않는 형태에는 여러 가지가 있으므로 명확한 정의 없이는 진지한 논의가 어려움
     * 단일 장치의 네트워크 연결 없음부터 NSA 인증 크로스 도메인 솔루션에 이르기까지 다양한 시나리오가 있음
     * 사설 광역망, 암호화 터널링, AWS 프라이빗 VPC 등 여러 형태의 제한된 인터넷 연결 방식이 있음

  인터넷 연결이 없는 시스템 운영의 불편함

     * 거의 모든 소프트웨어 환경이 인터넷 연결을 전제로 설계되어 있어 오프라인 환경에서는 모든 것이 더 어려워짐
     * OS 업데이트, 패키지 관리자, TLS 인증서, 클라우드 라이선싱 등 다방면에서 추가 작업과 비용이 발생함
     * 엔터프라이즈 소프트웨어 공급업체와의 복잡한 상호작용으로 인해 시간과 비용이 크게 증가하는 사례도 많음

  오프라인 환경은 많지 않음

     * 강력한 형태의 오프라인 환경은 국방, 정보기관, 일부 은행 등에 국한됨
     * 이들 산업은 대개 비용과 시간이 과도하게 소요되는 것으로 유명함
     * 약한 형태라도 높은 규제 산업이나 보안을 중시하는 일부 기업에서나 볼 수 있음

개선을 위한 제안

     * 가능한 한 제한적인 네트워크 정책 적용 (AWS 등 클라우드가 이를 용이하게 해줌)
     * 오프라인 환경을 염두에 둔 소프트웨어 개발 (외부 연결 최소화, 엔드포인트 대체 방안 마련 등)
     * 시스템 신뢰 저장소 사용, 배포 시점 종속성 해결 등 TLS 및 기타 암묵적 가정 재고
     * Docker는 오프라인 환경 관리를 더 어렵게 만드는 역설적 사례

GN⁺의 의견

     * CrowdStrike 사태는 인터넷 연결 여부와는 무관한 문제임. 오프라인 환경에서도 보안 업데이트는 필수적으로 이뤄져야 함
     * 그러나 현실적으로 오프라인 업데이트는 지연되기 쉬우며, 이는 오히려 보안에 도움이 되기도 함
     * 네트워크 단절은 개념적으로는 매력적이지만 실제 구현은 매우 어려움. 향후 소프트웨어 산업이 이에 대한 대비를 더 잘할 필요가 있음
     * 한편 인터넷 연결을 전제로 한 현대 IT 환경의 근본적 한계를 인식하고, 네트워크 정책 강화 등 실현 가능한 개선책을 우선 모색해야 함
     * 핵심 기반시설, 국방 등 초고도 보안이 필요한 영역에서는 어려움을 감수하고서라도 물리적 네트워크 분리를 검토해 볼 만함

        Hacker News 의견

     * 보안/시스템/운영 분야에서 일하는 사람으로서, 대부분의 사람들이 일을 잘 못하고 있으며, 산업 전체가 이를 지원하도록 설정되어 있음
          + 디지털 사이니지를 배포할 때, 네트워크 접근은 서버의 IP 주소로만 허용하고, 서명된 업데이트와 인증서 고정 연결만 받아야 함
          + IoT 장치들이 보안이 취약하며, 기본 비밀번호와 열린 포트가 많음
          + 대부분의 회사들이 일을 잘 하지 않으며, ""최고의 실천""이나 벤더의 지침을 따르는 것이 일을 잘하는 것을 의미하지 않음
     * 스웨덴에는 인터넷과 격리된 Sjunet이라는 사설 네트워크가 있으며, 의료 제공자들이 사용함
          + Sjunet은 산업 전반에 걸친 에어갭 환경으로 볼 수 있으며, 보안을 개선하지만 비용은 적음
     * 제어 엔지니어로서, 이더넷 케이블을 사용하는 기계들이 인터넷에 연결되지 않아야 함
          + 제조 공장에서는 PLC와 HMI 시스템이 이더넷을 사용하지만, 인터넷에 노출되지 않음
          + 저항 용접기와 같은 오래된 기계들은 최신 보안 시스템이 필요하지 않음
     * 시스템을 에어갭하지 말아야 한다는 주장에 동의하지 않음
          + 인터넷 중심의 개발 관행을 사용하지 않아야 함
          + MRI 기계가 NPM에서 JS 종속성을 가져오는 것은 잘못된 것임
     * 사설 네트워크를 운영할 때, 내부 서비스는 인기 있는 CA의 TLS 인증서를 가지지 않을 가능성이 높음
          + JRE의 신뢰 저장소 문제로 인해 많은 시간을 낭비할 수 있음
     * 맥도날드 키오스크를 사용해 본 후, 다른 장소의 장비들도 테스트해 봄
          + 한 푸드 코트의 키오스크는 인터넷에 완전히 접근 가능했으며, 악성 소프트웨어를 다운로드할 수 있었음
          + 주차 키오스크는 강화되지 않았음
          + 맥주 브랜드의 인터랙티브 디스플레이는 큰 해를 끼치지 않았지만, ""물 마시기"" 메시지를 남김
     * 주요 결론은 시스템이 인터넷에 연결되지 않아야 한다는 것이 아님
          + 시스템은 아웃바운드 네트워크 흐름을 허용하지 않아야 함
          + 많은 엔터프라이즈 소프트웨어 제품에서 자동 업데이트를 비활성화할 수 있음
          + 업데이트를 점진적으로 롤아웃하여 문제를 최소화할 수 있음
     * Hamnet은 부분적으로 인터넷 라우팅이 가능하며, 아마추어 라디오 스펙트럼을 사용함
          + 상업적 사용이 금지되어 있음
     * 항공사 예약 시스템은 네트워크에 연결되어야 하지만, 많은 장비들이 온라인에 연결될 필요가 없음
          + 냉장고, 주전자, 차고 문 등 인터넷에 연결된 장치들이 많음
          + 모든 보안 조치는 사용자가 불편함을 느끼게 함
     * 특정 소프트웨어가 인기를 잃었고 더 이상 해를 끼치지 않음
          + 그러나 여전히 많은 블랙박스와 독점적인 소프트웨어가 존재하며, 재난 복구 능력이 부족함
"
"https://news.hada.io/topic?id=16103","어트리뷰션의 소멸과 클릭의 감소. 마케팅은 다시 20세기로 회귀중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  어트리뷰션의 소멸과 클릭의 감소. 마케팅은 다시 20세기로 회귀중

     * 지난 20년 동안 해오던 마케팅 방식이 끝나가고 있음
     * 과거에는 모든 조회수와 클릭을 추적해 전환으로 이어질 때 완벽하게 귀속시킬 수 있다고 생각했지만, 지금은 그렇지 않음

클릭을 죽이는 것은 무엇인가?

     * LinkedIn, Twitter, Facebook, Reddit, YouTube, Instagram, TikTok 등 주요 검색, 소셜, 콘텐츠 플랫폼들은 사용자를 자신들의 플랫폼에 머물게 하려는 유인이 있음
     * 그래서 링크에 페널티를 주고, 제로클릭 콘텐츠 같은 자체 콘텐츠에 보상하는 알고리즘에 치우치게 됨

어떤 것들이 Attribution을 죽였나?

     * Apple의 쿠키 변경, 캘리포니아, 캐나다, 뉴욕, EU의 추적 방지 및 개인 정보 보호법
     * 광고 차단기의 대규모 도입(인터넷 사용자의 1/3에서 1/2이 하나 이상의 기기에서 사용)
     * 멀티 디바이스 여정은 브라우저 핑거프린팅으로도 추적이 불가능해짐
     * 모바일과 태블릿 기기 채택 및 앱 내 활동 지배로 인해 속성 데이터가 더욱 숨겨짐
     * 제로 클릭 문제로 사람들이 예전처럼 클릭하지 않게 됨
     * 다크 트래픽으로 인해 주요 소셜 네트워크의 50% 이상이 리퍼럴 데이터를 숨김

이 주장을 뒷받침하는 데이터

     * Datos와 함께 한 연구에서 웹 트래픽의 대부분은 검색에서 오는 것으로 나타남(Google, Bing, DuckDuckGo가 전체 트래픽 추천의 70% 차지)
     * 그러나 사람들이 시간을 보내는 곳은 검색이 아님. 실제 검색은 전체 방문의 10%에 불과함
     * 소셜, 이메일, 뉴스 웹사이트, 전자상거래, 동영상 및 오디오 플랫폼에서 시간을 보냄
     * 트래픽 추천 데이터로 유입을 증명하려 하면 Google의 바보가 될 것
          + 소셜, 뉴스, 이메일, 동영상, 오디오 등에서 소비하는 모든 것이 잠재적 검색으로 이어짐
          + 그러나 직접 링크를 클릭하기보다는 나중에 Google에서 검색하게 되는 경우가 많음. 그러면 Google이 공을 차지하게 됨

제로 클릭, 어트리뷰션 불가능한 2024년 마케팅 세계의 해법은?

     * 청중에게 영향을 미치는 곳으로 가는 것이 해법
     * 예를 들어, 리조또 만드는 최고의 쌀을 찾기 위해 Google 검색을 할 수도 있지만, TikTok이나 Instagram 영상을 보거나 좋아하는 레시피 블로그를 찾아볼 수도 있음
     * 매주 전 세계 수백만 명이 리조토를 만들지만, 그 중 0.1%만이 Google에서 ""리조토 만드는 최고의 쌀""을 검색함
     * 그들에게 영향을 미치는 모든 출처를 밝혀내야 함
     * 특정 브랜드나 종류의 쌀을 사도록 유도하는 모든 방법을 알아야 함
     * 리조토 검색자들이 방문하는 웹사이트, 그들이 사용하고 팔로우하는 소셜 네트워크와 계정, 팟캐스트, 유튜브 채널, 서브레딧 등을 파악해야 함
     * ""리조토를 위한 최고의 쌀"" Google 검색에 대한 우려
          + 구식 SEO는 잠재적 클릭률을 보고 이 키워드가 타겟팅할 만한 가치가 없다고 말할 수 있음
          + Google이 즉각적인 답변을 보여주고 있기 때문에 순위를 매길 가치가 없다고 생각할 수 있음
          + 클릭은 없지만, 행동에 영향을 미치는 결과는 있음
          + 식료품점에서 ""리조토에 가장 좋은 쌀 종류""를 검색하면 Google 검색 결과 상단의 굵은 글씨 답변인 아르보리오 쌀을 살 가능성이 높음
          + 하지만 아르보리오는 리조토에 가장 좋은 쌀이 아니며, 가능하다면 카르나롤리 쌀을 사는 것이 좋음
     * 검색 결과 변경을 위한 마케팅 활동의 문제점
          + Google이 카르나롤리(또는 특정 브랜드)를 보여주도록 검색 결과를 변경하는 데 성공하더라도 어트리뷰션이 부족함
          + 그 순위를 차지함으로써 회사에 어떤 가치를 제공했는지 보스에게 증명할 수 없음
          + 대부분의 검색이 클릭 없이 끝날 뿐만 아니라, 트래픽을 보내더라도 어떤 키워드가 그들을 보냈는지 알려주지 않기 때문
          + Google은 거의 10년 전에 키워드 데이터를 볼 수 있는 기능을 없앴음

올바른 영향력의 출처를 통해 사람들에게 다가가는 것이 성공의 열쇠

     * Acquerello라는 숙성 카르나롤리 쌀 브랜드는 전문 셰프와 가정의 요리사들에게 높이 평가받는 리조토용 쌀임
     * 미국에서 10년 전만 해도 거의 알려지지 않았지만, 지난 10년 동안 완벽하게 속성될 수 없는 전술에 투자해 매출을 크게 늘렸음
     * Acquerello가 활용한 마케팅 전략들
          + Amazon을 통한 판매로 주요 미국 간행물에 실리기 위해 제휴 프로그램 시작(브랜드 포지셔닝과 잘 맞지 않았지만)
          + PR팀이 Bon Appetit 편집자 등에게 피칭
          + 관광객들이 처음으로 훌륭한 리조토를 경험하는 이탈리아 전역의 셰프들에게 메뉴에 브랜드 이름을 포함하고 식당 선반에 쌀 포장을 놓도록 유도
          + 미국 주요 도시의 이탈리아 레스토랑 및 셰프와 대규모 입소문 캠페인 시작
          + 유럽과 북미 다른 나라에서 이벤트 후원
          + 미국 전문 소매업체와 제휴해 제품 판매
          + 온라인 판매 유통 확대
     * Acquerello 마케팅의 성공 요인과 한계
          + 이 모든 것이 Acquerello의 성공에 긍정적으로 기여했지만, 특정 판매로 귀속시킬 수 없었음
          + 속성 모델에 기반해 지출을 결정하는 대부분의 미국 테크 CEO와 CFO들은 판매 증가로 이어졌다는 것을 증명할 수 없기 때문에 Acquerello가 한 모든 것에 거부권을 행사했을 것임
          + ""상관관계이지 인과관계가 아니므로 돈을 낭비할 수 있다""고 말할 것임
     * 2024년의 디지털 마케팅은 1964년의 마케팅과 매우 유사함
          + 올바른 메시지를 올바른 사람들에게 올바른 장소와 시간에 전달하는 것이 핵심
          + Lift 기반 측정에 투자하고 최적화할 것을 권장(어트리뷰션에 의존하지 말 것)
          + 어트리뷰션은 더 이상 근본적으로 작동하지 않음
          + 대신 청중이 누구이고 어디서 어떻게 그들에게 영향을 줄 수 있는지 아는 것에 기반해 마케팅 투자를 하면 결과를 크게 개선할 수 있음

   카르나롤리 쌀은 무슨 맛일까

   좋은 글 감사합니다.

   페이스북이나 엔스타는 내부 지표가 멀쩡한걸까요?

   요즘 페이스북에 올라가는 긱뉴스 아티클들이 계속 스팸으로 처리가 되는데, 이게 AI 기반 판단이라고는 하지만 외부 링크에 대해서는 너무 강하게 잡는듯한 느낌이 듭니다. 외부 링크는 올리지 말라고 강요하는 듯.

   페이스북/트위터 같은 플랫폼에 의존 안하고 긱뉴스를 만들길 잘했다고 위안중입니다. ㅎㅎ

   좋은 사이트 항상 감사합니다~! 저는 트위터봇으로 구독중입니다
"
"https://news.hada.io/topic?id=16048","커맨드 라인 시대의 시작커맨드 라인 시대의 시작 (1999)

시작은 명령줄이었다 - Neal Stephenson

  Apple과 Microsoft의 시작

     * 약 20년 전, Apple의 창립자 Jobs와 Wozniak은 가정용 정보 처리 기계를 판매하는 아이디어를 생각해냈음
     * 같은 시기에 Bill Gates와 Paul Allen은 컴퓨터 운영 체제를 판매하는 더 기이한 아이디어를 제안했음
     * 운영 체제는 물리적 실체가 없고, 디스크에 담긴 긴 0과 1의 문자열에 불과했음

  운영 체제의 대중화

     * 현재 Microsoft는 운영 체제를 대규모로 판매하고 있음
     * 운영 체제의 새로운 버전은 할리우드 블록버스터처럼 출시됨
     * 일반인들도 운영 체제의 중요성을 이해하고 있으며, 서로의 장단점에 대해 강한 의견을 가지고 있음

  자동차와 운영 체제의 비유

     * Microsoft는 처음에 MS-DOS라는 3단 변속 자전거를 판매했음
     * Apple은 비싸지만 매력적인 자동차를 판매하기 시작했음
     * Microsoft는 Windows라는 모터 키트를 출시하여 Apple의 자동차와 경쟁했음
     * 이후 Microsoft는 Windows 95라는 대형 스테이션 왜건을 출시하여 큰 성공을 거두었음
     * BeOS는 Batmobile, Linux는 탱크로 비유됨

  비트-플링거

     * 컴퓨터와의 상호작용은 매우 형식적이었음
     * 텔레타이프와 모뎀을 사용하여 컴퓨터와 통신했음
     * 컴퓨터는 숫자를 처리하고, 인간은 그 숫자를 의미 있는 기호로 해석했음

  GUI의 등장

     * GUI는 컴퓨터를 더 많은 사람들에게 접근 가능하게 만들었음
     * Macintosh는 GUI를 통해 혁신을 일으켰음
     * GUI는 컴퓨터와의 상호작용을 더 인간 중심적으로 만들었음

  GUI와 CLI의 논쟁

     * GUI는 컴퓨터를 더 인간 중심적으로 만들었지만, CLI는 더 강력하고 유연했음
     * Microsoft의 Windows는 GUI를 채택하면서도 CLI를 유지했음
     * Macintosh는 GUI만을 사용하여 혁신을 추구했음

  Microsoft와 Apple의 차이

     * Microsoft는 주주 이익을 극대화하기 위해 제품을 출시함
     * Apple은 기술을 통해 인류에게 이익을 주는 이상을 구현하려 했음
     * Microsoft의 제품은 미적 감각이 부족했지만, 시장에서 성공을 거두었음

GN⁺의 정리

     * 이 글은 운영 체제의 역사와 그 발전 과정을 흥미롭게 설명하고 있음
     * 운영 체제의 대중화와 GUI의 등장이 컴퓨터 사용을 어떻게 변화시켰는지 이해할 수 있음
     * Microsoft와 Apple의 다른 접근 방식이 어떻게 시장에 영향을 미쳤는지 알 수 있음
     * Linux와 같은 오픈 소스 운영 체제의 중요성과 그 장점을 강조함
     * 비슷한 기능을 가진 제품으로는 Ubuntu, Fedora 등이 있음

        Hacker News 의견

     * Neal Stephenson의 에세이는 1999년에 처음 출판되었음
     * OS를 자동차에 비유한 내용이 Microsoft의 최근 Acquired 에피소드에서 언급되었음
          + Windows Vista는 Dodge Viper, Windows 7은 Toyota Camry로 비유됨
     * CLI의 주요 장점은 명령어가 간결하고 쉽게 전달될 수 있다는 점임
          + Linux 시스템의 문제 해결 방법을 명령어로 쉽게 전달할 수 있음
          + 반면, 그래픽 프로그램의 문제 해결 방법은 전달하기 어려움
     * Linux 배포판이 실제로 지원을 제공했는지에 대한 의문이 제기됨
          + 과거에는 기술 매뉴얼을 통해 사용자가 직접 문제를 해결할 수 있도록 했음
          + 현재는 상황이 많이 개선되었음
     * LLMs와의 소통을 위한 언어 사용이 GUI보다 더 쉬운 방법으로 제시됨
          + 이는 Unix 철학과 일맥상통함
     * Unix/Linux 사용자가 Windows에 대해 느끼는 감정을 설명한 부분이 인상적임
          + ""THE HOLE HAWG OF OPERATING SYSTEMS""라는 표현이 있음
     * 이 에세이는 모든 CS 학생과 해커를 지망하는 사람들에게 필독서로 추천됨
     * Neal Stephenson의 다른 작품에서도 인상적인 비유가 있음
          + Mac 파일이 손상되었을 때의 느낌을 비유한 부분이 있음
     * LLMs의 CLI를 Bash로 작성한 경험이 공유됨
          + Unix 철학에 기반한 텍스트 기반 소통 방식이 강조됨
     * 특정 기계를 사용하는 것이 더 우월하다고 믿는 사람들에 대한 언급이 있음
          + 이는 일종의 컬트 현상으로 설명됨
     * Gates와 Allen이 설립한 회사가 운영체제를 판매하는 방식에 대한 회고가 있음
          + 운영체제가 할리우드 블록버스터처럼 출시되었음
          + 과거에는 운영체제를 실제로 구매한 사람이 많지 않았음
          + 현재는 운영체제가 상품화되어 비즈니스로 판매하기 어려움
     * Linux에 대한 긍정적인 평가가 있지만, 다소 낙관적이라는 의견도 있음
     * BeOS 애호가로서 Batmobiles에 대한 언급을 좋아했음

   The hole hawg.. 그게 뭔가요
"
"https://news.hada.io/topic?id=16010","Google의 Wiz 인수 거래 무산, Wiz는 IPO 추진 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google의 Wiz 인수 거래 무산, Wiz는 IPO 추진 예정

     * Wiz는 기업 가치 230억 달러에 Google과의 인수 합병을 포기
     * Wiz CEO Assaf Rappaport는 직원들에게 당초 계획대로 IPO를 추진할 것이라고 전함

Wiz의 인수 합병 포기 배경

     * Wiz는 Google에 인수될 경우 회사 가치가 230억 달러로 평가받을 예정이었음
     * Wiz는 독점금지 및 투자자들의 우려를 고려하여 Google과의 잠재적 인수 합병을 포기한 것으로 알려짐
     * Rappaport CEO는 직원들에게 보낸 메모에서 IPO와 연간 반복 매출 10억 달러라는 다음 목표에 집중할 것이라고 밝힘
          + Wiz는 Google과의 인수 합병 논의가 보도되기 훨씬 이전부터 이러한 목표를 염두에 두고 있었음

Wiz의 급성장과 보안 제품 포트폴리오

     * Wiz는 2020년에 설립되었으며 Rappaport 하에서 빠르게 성장함
          + 설립 후 1년이 채 되지 않아 1억 달러의 펀딩 라운드를 발표함
          + 최근 펀딩 라운드에서 Wiz의 가치는 120억 달러로 평가받았음
     * 18개월 만에 연간 반복 매출 1억 달러를 달성했으며 작년에는 3억 5천만 달러에 도달함
          + Covid 팬데믹 동안 기업들이 원격 근무를 지원하기 위해 클라우드 기반 소프트웨어와 인프라를 채택하면서 Wiz는 큰 혜택을 봄
     * Wiz의 클라우드 보안 제품에는 예방, 능동적 탐지 및 대응 등이 포함되어 있으며, 이는 대기업들에게 어필하고 Google이 Microsoft와 경쟁하는 데 도움이 되었을 것임

Google 클라우드 사업부의 도전과제

     * Alphabet의 클라우드 부문은 선두주자인 Microsoft와 Amazon으로부터 경쟁 압박을 받고 있음
     * Google 클라우드는 Thomas Kurian CEO 하에서 인공지능 붐 기간 동안 사업을 확보하기 위해 지속적으로 성장해야 하는 압박을 받고 있음
     * Google은 2022년 사이버보안 기업 Mandiant를 54억 달러에 인수한 바 있음
     * Google의 가장 큰 거래는 2012년에 125억 달러에 하드웨어 제조업체 Motorola를 인수한 것이었음
     * 최근에는 HubSpot 인수를 포기했음

거래 무산에 대한 업계 반응

     * 스타트업들이 더 나은 시장 상황을 기다리며 IPO를 미루고 인수합병에 어려움을 겪고 있어 기술 업계에서 엑시트가 드문 상황임
     * Index Ventures, Insight Partners, Lightspeed Venture Partners, Sequoia 등 수십억 달러 규모의 펀드를 조성한 벤처캐피털들에게는 실망스러운 소식이 될 것임
     * 수십억 달러 규모의 펀드는 제한된 파트너들에게 상당한 수익을 내기 위해서는 100억 달러가 넘는 엑시트가 필요하며, 그러한 일은 드물다고 PitchBook의 선임 애널리스트 Brendan Burke는 말함
     * Wiz의 창립자들은 이전에 Adallom이라는 보안 스타트업을 Microsoft에 3억 2천만 달러에 매각한 바 있음
"
"https://news.hada.io/topic?id=16112","Swift, Homomorphic Encryption(동형 암호화) 패키지 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Swift, Homomorphic Encryption(동형 암호화) 패키지 공개

     * 새 Swift 오픈소스 패키지인 swift-homomorphic-encryption 공개
     * 동형 암호화(HE)는 암호화된 데이터를 복호화하지 않고도 연산할 수 있는 암호화 기술
     * 클라이언트가 암호화된 데이터를 서버에 보내고, 서버는 이를 연산하여 결과를 반환
     * 서버는 원본 데이터를 복호화하거나 복호화 키에 접근하지 않음
     * 클라우드 서비스에서 사용자 데이터의 프라이버시와 보안을 보호하는 새로운 기회 제공

  Apple의 활용 사례

     * iOS 18의 새로운 기능인 Live Caller ID Lookup에 동형 암호화 사용
     * Live Caller ID Lookup은 암호화된 쿼리를 서버에 보내 전화번호에 대한 정보를 제공
     * 서버는 요청의 특정 전화번호를 알지 못함
     * live-caller-id-lookup-example 패키지를 통해 기능 테스트 가능

  주요 기능

     * Swift on Server, Hummingbird HTTP 프레임워크 및 크로스 플랫폼 지원
     * Benchmark 라이브러리를 통한 쉬운 벤치마킹
     * Swift Crypto의 성능 좋은 저수준 암호화 프리미티브

  Private Information Retrieval (PIR)

     * Live Caller ID Lookup은 Private Information Retrieval(PIR)에 의존
     * 클라이언트가 서버에 키워드를 보내고 관련 값을 검색
     * 서버가 키워드를 알지 못하도록 구현
     * 동형 암호화를 사용하여 대규모 데이터베이스를 효율적으로 처리

  동형 암호화

     * 동형 암호화는 복호화 없이 암호화된 데이터에 연산 가능
     * 일반적인 워크플로우:
          + 클라이언트가 민감한 데이터를 암호화하여 서버에 전송
          + 서버는 암호문에 대해 연산 수행
          + 서버는 결과 암호문을 클라이언트에 전송
          + 클라이언트는 결과를 복호화
     * Brakerski-Fan-Vercauteren (BFV) HE 스킴 구현
     * BFV는 양자 저항성을 가진 RLWE 문제 기반

  동형 암호화 사용 예시

     * 다양한 프라이버시 보호 애플리케이션에 유용
     * 예시 코드:
import HomomorphicEncryption

// Bfv 체계에 대한 몇 가지 암호화 파라미터를 선택하는 것으로 시작
// *이 암호화 파라미터는 안전하지 않으며 테스트용으로만 적합*
let encryptParams = try EncryptionParameters(from: .insecure_n_8_logq_5x18_logt_5)

// 매개변수를 사용하여 HE 계산을 위한 사전 계산을 수행
let context = try Context(encryptionParameters: encryptParams)

// Coefficient 인코딩을 사용하여 N 값을 인코딩
let values: [UInt64] = [8, 5, 12, 12, 15, 0, 8, 5]
let plaintext: Bfv.CoeffPlaintext = try context.encode(values: values, format: .coefficient)

// 비밀 키를 생성하고 이를 사용하여 일반 텍스트를 암호화
let secretKey = try context.generateSecretKey()
let ciphertext = try plaintext.encrypt(using: secretKey)

// 일반 텍스트를 해독하면 원래 값을 얻을 수 있음
let decrypted = try ciphertext.decrypt(using: secretKey)
let decoded: [UInt64] = try decrypted.decode(format: .coefficient)
precondition(decoded == values)

  GN⁺의 정리

     * 동형 암호화는 데이터 프라이버시를 보호하면서 클라우드 서비스의 새로운 가능성을 열어줌
     * Apple의 iOS 18 기능에 적용되어 실용성을 입증
     * Swift 커뮤니티에서 다양한 프라이버시 보호 애플리케이션 개발 가능
     * 유사한 기능을 제공하는 다른 프로젝트로는 Microsoft SEAL, IBM HELib 등이 있음

        Hacker News 의견

     * 전화번호 조회는 동형 암호화가 실제로 작동하지 않는 교과서적인 예시임
     * 동형 암호화는 시뮬레이션을 접근할 수 없는 평행 우주로 이동시키는 것처럼 흥미로움
     * FHE에 관심 있는 사람은 최근 실용적인 FHE를 만든 Zama.ai를 확인해야 함
     * 이는 HE의 첫 번째 실제 사용 사례일 것임. 일반적으로 너무 느려서 유용하지 않다고 여겨졌지만, 이는 훌륭한 사용 사례임
     * 이는 장기적으로 매우 중요한 발표임, 즉각적으로 느껴지지는 않을 것임
          + 이는 AI와 PII 관련 사용 사례에 대한 대규모 발표임
     * Zama.ai의 FHE와 비교하면 어떨지 궁금함
     * FHE는 멋지지만 실제로 얼마나 많은 사용 사례에 적합한지 궁금함. 사용자에게 더 나은 보안 보장을 제공하지만, 조직이 클라우드에서 안전한 실행 환경을 약속한다고 해서 사용자가 정말로 신경 쓸까?
          + 또한 엔지니어링 관점에서 FHE를 사용하려면 흐름을 리팩토링하고 모든 다운스트림 처리를 고정적으로 약속해야 함. 법률이 이를 의무화하지 않는다면 조직이 충분한 동기를 가질까?
     * 이름이 웃김, 왜냐하면 HME는 여러 차원에서 전혀 빠르지 않음
          + 진정한 해결책은 보안 인클레이브라고 생각하지만, 그것도 어려움이 있음
     * FHE에 대해 항상 알고 싶은 점: 현대 암호화의 금본위는 IND-CCA 보안임. FHE는 정의상 그 기준을 충족할 수 없음 (암호문을 변경하여 평문에 예측 가능한 영향을 미치는 것이 선택 암호문 공격의 정의임). 그래서 현대 FHE 스킴은 얼마나 가까운가? 즉, FHE의 장점을 얻기 위해 얼마나 많은 보안을 희생하는가?
     * 서버가 키를 알지 못한 채 암호문을 값과 일치시킬 수 있는 방법을 이해하지 못함. 서버가 암호문이 특정 값에 해당한다고 어떻게 결정하는가? 서버가 이 암호문-값 데이터베이스를 구성하면, 값을 암호문으로 만들고 저장하는 데 어떤 알고리즘을 사용해야 하는지 어떻게 아는가?
"
"https://news.hada.io/topic?id=16133","NotShazam - Go 언어로 재구성한 Shazam 알고리듬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NotShazam - Go 언어로 재구성한 Shazam 알고리듬

     * Shazam의 노래 인식 알고리듬을 구현한 프로젝트
     * Spotify와 YouTube API를 통합하여 노래를 찾고 다운로드할 수 있음
     * Go + FFMpeg + MongoDB
     * MIT 라이선스

GN⁺의 정리

     * NotShazam은 Shazam의 노래 인식 알고리듬을 구현한 오픈 소스 프로젝트임
     * Spotify와 YouTube API를 사용하여 노래를 찾고 다운로드할 수 있음
     * 이 프로젝트는 Golang, FFmpeg, MongoDB, NPM 등의 기술을 필요로 함
     * 유사한 기능을 가진 다른 프로젝트로는 AudD와 ACRCloud가 있음

        Hacker News 의견

     * Apple이 Shazam의 특허를 2025년 3월까지 보유하고 있음
     * Shazam의 공동 창립자인 Avery Wang의 DAFx17 컨퍼런스 강연이 유익했음
          + 알고리즘 이론과 실용적인 문제(배경 소음 등)에 대해 다룸
     * 최근 Shazam의 정확도가 떨어졌음을 발견함
          + Soundhound가 더 나은 결과를 제공함
          + Shazam이 아시아 음악 전통에서 많은 결과를 제공하지만, 잘못된 노래임
          + 알고리즘 개선이 필요할 수 있음
          + 해시 테이블 충돌이 증가했음
     * 프로젝트가 사용 및 수정하기 좋지만, 아직 게시하지 않았을 것임
          + 설치 지침이 최적이 아님
          + MongoDB가 필요하지만 연결 방법이 없음
          + MongoDB를 대체할 수 없다면 Dockerfile과 Docker Compose를 제공해야 함
          + 클라이언트 npm 설치에 8개의 치명적인 취약점이 있음
          + 특허나 저작권 문제를 피하기 위해 이름을 변경해야 함
          + wav 파일에서 노래를 추가하는 방법을 추가해야 함
          + 프로젝트가 조금 더 다듬어져야 함
          + 오디오 매칭 실험을 위해 PR을 만들 계획임
     * 모든 노래를 가지고 있지 않으면 쓸모없음
          + 알고리즘보다 데이터가 중요함
     * Spotify 노래를 삽입하면 Spotify 노래를 출력하는 것이 더 합리적임
     * 이 프로젝트가 매우 흥미로움
          + 버킷 리스트의 일환으로 이와 같은 것을 구축해보고 싶었음
     * Shazam의 핵심은 모르는 노래를 찾는 것임
          + 모르는 노래를 어떻게 Spotify 링크로 제공할 수 있는지 의문임
     * 누군가 수십억 개의 노래를 ""대형 노래 모델""에 합쳐 모든 신호 처리 지식을 무의미하게 만들 때까지 얼마나 걸릴지 궁금함
     * UI 알림에서 모든 노래를 표시하는 데몬으로 실행할 수 있음
"
"https://news.hada.io/topic?id=16070","나의 Obsidian 노트 작성 워크플로우","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        나의 Obsidian 노트 작성 워크플로우

     * 모든 노트는 플레인 텍스트 파일과 Markdown을 사용하며, Vim 명령어로 빠르고 효율적인 노트 작성
     * 깊이 있는 삶을 추구하며, 직업, 학업, 생활에 긍정적인 영향을 미침
          + Deep Life : 직장, 가정, 영혼 등 정말로 중요한 것에 열정적인 의도를 가지고 집중하고, 중요하지 않은 것에 너무 많은 주의를 허비하지 않는 것
               o 집중하면서 방해되는 것을 치워서 생산성을 높이는 쪽으로
     * Microsoft OneNote 사용에서 시작하여, 현재는 Obsidian으로 전환하여 노트 작성중

  나의 노트 작성 발전 경로

    1. 모든 것을 계속 잊어버림
    2. 다양한 기기와 앱, 종이에 분산된 노트를 작성함
    3. 공부 중 OneNote를 사용하여 업무와 학업 관련 노트를 분리
    4. 개인적인 여행, 연구 노트 작성 시작
    5. Obsidian으로 전환하여 개방형 포맷과 새로운 기능을 사용
    6. Second Brain 시스템 시작:
          + 건강, 일기, 요리, 읽은 책 등 모든 삶의 노트를 추가
          + 노트를 연결하고, 필요할 때 쉽게 찾을 수 있도록 시스템을 발전시킴
    7. Vim과 그 명령어를 사용하여 빠르고 간편한 노트 작성
    8. Quartz를 사용하여 노트를 공개

  왜 Obsidian을 선택했는가?

     * 개방형 파일 포맷 사용
          + OneNote에서 노트를 내보내는 것이 고통스러웠던 경험이 있음
     * 협업은 필수 기능이 아님
     * 간편한 검색 기능

    지금도 Obsidian을 사용하는 이유

     * 필요할 때 지식을 찾을 수 있는 능력
     * 생각을 기반으로 한 검색 기능
     * PARA 및 Zettelkasten 방법론을 통한 효율적인 파일 구조를 유지
          + P.A.R.A : 폴더 구성 방법. Project, Area of responsibility, Resource, Archive
          + 제텔카스텐 : 독일의 사회학자인 니클라스 루만 (Niklas Luhmann) 이 공무원 재직 시절부터 자신의 메모를 정리한 방법으로 뭔가를 배우고, 자신의 지식으로 만들어가는 워크플로우를 최적화 하는 메모 기법
     * Vim 명령어 사용으로 빠르고 편리한 노트 작성
     * 플레인 텍스트 파일 및 로컬 우선 접근 방식

  초기 노트 작성 방법 (템플릿)

     * 항상 템플릿으로 시작함 cmd+t
     * 기본 템플릿에는 제목, 생성일, 출처, 참조, 태그가 포함
          + 노트를 시작하게 된 계기를 Origin에 추가하고, 관련 노트가 떠오르면 References에 추가함
          + 노트 내용에 Wikilink를 최소한 하나 이상 추가함
          + 노트의 품질에 따라 다른 태그를 사용함 (📬, 🗃/🌻, 🗃/📖, 🗃/🌳)
               o 📬 메모, 아이디어, 읽은 내용, 떠오르는 모든 것. 그냥 찰나(fleeting)의 메모. 잠시 후 삭제할 수 있음
               o 🗃/🌻 조금 작업한 것. 떠오르는 메모를 많이 추가하고, 브레인스토밍을 하고, 조금 더 정교하게 만들고, 참고자료를 만들었음
               o 🗃/📖 조금 긴(literature) 노트는 작성했지만 영구 노트까지는 아직 준비가 덜 됨. 하지만 이미 풀 문장으로 구성되어 있고 이미 효과가 있었거나 내용에 만족
               o 🗃/🌳 에버그린/영구 노트. 이렇게 오래 지속될 노트는 결국 내 글과 함께 제텔카스텐 코어에 남게 됨. 여기서는 제텔카스텐 원칙에 따라 문헌 노트를 서로 다른 아이디어로 분리하고 서로 연결
          + 최근에는 태그 업데이트를 덜 하고 있지만 여전히 유용함
          + 대부분의 노트를 영구 노트처럼 시작하고 추가하면서 발전시킴

  내가 사용하는 플러그인

     * dataview: Markdown 내 데이터베이스 기능
     * excalibrain: 노트와 연결을 시각화
     * note-folder-autorename: 노트와 이미지를 폴더로 자동 정리
     * obsidian-admonition: 주의 사항(call-out) 추가
     * obsidian-auto-link-title: 링크 제목 자동 추가
     * obsidian-excalidraw-plugin: Markdown 내 드로잉 기능
     * obsidian-list-callouts: 리스트 형태의 주의 사항 추가
     * obsidian-pandoc: Word 문서, PDF 등으로 내보내기
     * obsidian-projects: Kanban, 테이블, 캘린더 뷰
     * obsidian-reading-time: 노트 읽는 시간 표시
     * obsidian-vimrc-support: Vim 단축키 추가
     * ollama: 로컬 LLM을 사용한 노트 분석
     * omnisearch: 퍼지 검색 기능
     * readwise-official: ReadWise와의 연동
     * remember-cursor-position: 각 노트의 커서 위치 저장
     * settings-search: 모든 Obsidian 설정 검색
     * templater-obsidian: 템플릿 기능 확장

  노트 공유 방법

     * 이 웹사이트의 ""brain""을 클릭하면 공개적으로 공유하는 모든 노트를 볼 수 있음
     * Quartz를 사용하여 노트 공개(Obsidian Publish의 오픈소스 대체제)
          + 모든 노트를 처리하고 해시태그가 #publish 인 노트는 Quartz에 복사한 다음 내 웹사이트에 배포하는 추가 스크립트를 구성. Public Second Brain with Quartz 글 참고
     * Obsidian 그래프와 백링크를 활용한 탐색 기능 제공

  공유와 피드백이 학습에 도움이 되는 방법

     * 공개적으로 공유하면 많은 피드백을 받게 됨
     * 이 피드백 루프가 글을 쓰게 만드는 가장 중요한 요소임
     * 열정을 공유하고 비슷한 생각을 가진 사람들을 만나는 것은 현실 세계에서는 복제할 수 없는 매력임
     * Learn in Public이라고 불리며 초보자에게도 추천함

  요약

     * Obsidian과 Second Brain 시스템은 노트 작성을 시작할 때 꿈꿨던 모든 것을 제공해 줌
     * 심지어 도움이 될 줄 몰랐던 것들도 포함됨 (예: 그래프 기반 접근법)
     * 깊은 작업 모드를 통해 더 집중할 수 있음
          + 결과적으로 더 명확해지고 마음의 평화를 얻게 됨
     * 통찰이나 흥미로운 생각을 빠르게 Obsidian Vault에 적어두고 삶을 계속 살아갈 수 있음
     * 병원 진료나 알레르기 검사 결과 등을 언제든 꺼내볼 수 있다는 점이 편리함
     * 나중에 필요할 때 직관적으로 노트를 찾을 수 있음
     * 모든 지식에 오프라인으로 접근할 수 있다는 것도 큰 장점임
     * 최근에는 구글링을 덜 하고 Second Brain를 검색하는 일이 많아짐

   한글 입력과 vim 모드를 동시에 잘 하기가 쉽지 않다는 것 빼고는… 저도 대부분 노트는 마크다운으로 작성 중이라 흥미롭네요.

   이미 하고 계실 수도 있는데, ESC 누를 때, 영문으로 전환되게 해두시면 vim쓸 때 훨씬 편하더라구요 ㅎㅎ

   그런 방법도 있었군요
   찾아보니 이렇네요
   감사합니다.
   https://github.com/johngrib/simple_vim_guide/…

   이것 저것 해봤지만, 역시 입력기 자체를 바꾸고, 영문으로만 바뀌는 단축키를 지정하거나 옵션을 켜는게 좋더라고요. 맥에서는 구름, 윈도우는 날개셋, 리눅스는 kime 쓰고 있습니다.

   저는 kime가 어쩐지 요즘 제대로 동작하지 않더라구요. 예전엔 잘 됐는데 ㅠㅠㅠ
   그래서 주로 사용 중인 fcitx의 경우엔, deactivate input method를 escape로 설정하니 잘 되네요.
   한글 문서 쓸일이 거의 없긴하지만, 그래도 잘 쓸 수 있을 것 같습니다.

   ibus-hangul 은 기본적으로 esc 를 누르면 영문모드가 됩니다 👍
"
"https://news.hada.io/topic?id=16030","맥킨지의 기술 트렌드 2024 [100p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      맥킨지의 기술 트렌드 2024 [100p PDF]

AI 혁명

     * 생성형 AI
     * 응용 AI
     * 머신 러닝의 산업화

디지털 미래 구축

     * 차세대 소프트웨어 개발
     * 디지털 신뢰와 사이버 보안

컴퓨팅 및 연결성의 최전선

     * 고급 연결성
     * 몰입형-현실 기술
     * 클라우드 및 엣지 컴퓨팅
     * 양자 기술

첨단 공학

     * 로봇 공학의 미래
     * 모빌리티의 미래
     * 생명공학의 미래
     * 우주 기술의 미래

지속 가능한 세계

     * 전기화 및 재생 가능 에너지
     * 전기화 및 재생 가능 에너지를 넘어선 기후 기술

   목차는 위와 같습니다. 아래는 AI가 요약한 내용입니다.

생성형 AI

     * 생성형 AI는 대화형 AI, 이미지 생성, 음악 작곡 등에서 비약적 발전을 이뤄내며 광범위한 분야에서 혁신을 가속화하고 있음. 다만 편향, 오보, 딥페이크 등의 위험성도 안고 있어 이에 대한 대책 마련도 필요할 것으로 보임
     * 다중 모달 생성 모델, 강력한 오픈소스 모델, 자연어 처리의 context window 확장, LLM의 기업용 툴 내재화, Multi-agent 접근법 활용 확대 등이 주요 기술 트렌드
     * 주요 불확실성 요인
          + 사이버 보안 및 프라이버시 우려
          + 윤리적 고려사항
          + 규제 및 컴플라이언스
          + 저작권 소유권 및 보호
          + 환경적 영향
          + 부정확성
     * 핵심 질문
          + 모델 생성 비용 변화와 경쟁 양상
          + 기업의 지출 증가와 수익화
          + 오픈소스와 클로즈드 소스의 발전
          + 위험 요인 관리 방법
          + 사회공학에 대한 정책
          + 실제 사용을 위한 오류율과 hallucination 제어 수준
          + gen AI로 인한 직무 변화의 정도
          + 관련 기술 발전에 따른 주요 사용 사례와 기업의 포지셔닝

응용 AI

     * 기계 학습, 컴퓨터 비전, 자연어 처리 등의 분석 AI 기술이 모든 분야에서 점점 더 중요해지고 있음. 생성형 AI에 대한 관심이 응용 AI의 잠재력에 대한 인식도 제고. 하지만 기업 문화 변화, 대규모 데이터 확보/활용/구성, 최종 사용자의 모델 출력값 해석과 신뢰 구축 등의 어려움도 존재
     * 데이터 중심 AI 강조, 하드웨어 가속화에 대한 모멘텀 증가, 생성형 AI가 응용 AI의 문을 더 활짝 열어줌 등이 주요 트렌드
     * 주요 불확실성 요인
          + 사이버 보안 및 프라이버시 문제
          + 규제와 컴플라이언스
          + 윤리적 고려사항
          + 운영 리스크
     * 핵심 질문
          + 생성형 AI와 응용 AI의 전략적 결합
          + 인재와 기술 스택에 대한 시사점
          + 경쟁 우위 선점을 위한 방안
          + 비용 절감과 AI의 신뢰성/책임성 간 균형
          + AI 관련 리스크 관리를 위한 조치

기계학습 산업화

     * MLOps는 기업 내 머신러닝 애플리케이션을 확장하고 유지하는 프로세스로, ML 파일럿 프로젝트를 강건한 비즈니스 프로세스로 전환하는데 핵심. 특히 Gen AI의 등장으로 MLOps 역량에 대한 요구사항도 변화
     * 모니터링과 오케스트레이션의 MLOps 핵심 구성요소화, 사전 구축된 솔루션과 API 사용 증가, Gen AI에 대한 MLOps의 중요성 대두 등이 주요 트렌드
     * 주요 불확실성 요인
          + 산업화된 ML 도입을 위한 선행 투자와 자원 필요
          + 대규모로 ML 솔루션을 유지 관리하기 위한 프로세스와 책임소재 확립
          + 빠르게 진화하는 시장에서 기존 벤더 제품과 신규 제품 간 가치 실현의 효율성 간 균형
          + 역량 불일치 가능성 방지
          + 편향 해소를 위한 지속적인 모니터링과 평가
          + 증가하는 자동화에 따른 기술 및 인재 진화
     * 핵심 질문
          + MLOps 관행과 기술 생태계 진화 방향
          + 새로운 ML 기술 중 조직의 니즈에 맞는 우선순위
          + 산업화된 ML이 조직과 운영 모델 및 엔지니어링 역할에 미치는 영향
          + AI/ML의 신뢰할 수 있고 책임감 있는 사용 보장을 위한 MLOps 노력과 책임 역할 정의
          + MLOps의 ML/DL/Gen AI 통합 방안

차세대 소프트웨어 개발

     * 생성형 AI, 클라우드 기반 아키텍처 등 첨단 기술이 개발자의 역량을 강화하고 비기술 전문가의 애플리케이션 개발 참여를 가능케 함. 통합 과제, 명확한 측정 지표 부재, 개발자 대규모 재교육 필요성 등으로 광범위한 도입에는 시간이 더 걸릴 것. 하지만 초기 도입 기업은 생산성 향상의 토대를 마련하고 있음
     * AI 기반 개발 툴의 개념 증명에서 광범위한 적용으로의 전환, 통합된 개발 플랫폼으로의 추세, 인재 영역의 변화, 컴플라이언스와 신뢰에 대한 관심 증대 등이 최신 트렌드
     * 주요 불확실성 요인
          + 자동화된 테스트와 리뷰에만 의존할 경우의 오류 증가
          + Low/No-code를 경험 많은 개발자의 모니터링과 디버깅 없이 사용하는 것의 한계
          + 다양한 벤더의 조정되지 않은 변경 및 업그레이드로 인한 버전 관리의 어려움
          + AI가 생성한 코드의 품질과 보안 문제
          + AI 생성 코드의 지적 재산권 및 법적 책임 문제
          + API로 인한 잠재적 보안 취약점
     * 핵심 질문
          + AI 생성 코드가 소프트웨어 엔지니어의 일상 업무와 책임 및 수에 미치는 영향 정도
          + 아마추어 개발자에 의한 no-code 기술 활용이 전문 소프트웨어 개발자의 수요를 감소시킬 수 있는 정도
          + 팀이 업무 방식의 변화를 수용할지 여부
          + AI 생성 코드의 지적재산권 문제
          + 애플리케이션의 유지 책임 소재
          + 조직의 소프트웨어 팀 재교육 투자 여부
          + 엔지니어의 AI 지원 툴의 양질의 결과물 식별 역량 강화 방안

디지털 신뢰와 사이버 보안

     * 디지털 신뢰와 사이버 보안은 조직이 기술과 데이터 리스크를 관리하고 혁신을 가속화하며 자산을 보호할 수 있게 함. 클라우드/엣지 컴퓨팅, 응용 AI, 차세대 SW 개발 등 신기술 도입으로 그 중요성이 더욱 커지고 있음. 하지만 통합 과제, 조직 사일로, 인재 부족 등으로 도입에 어려움 직면
     * Gen AI 리스크 및 준비 태세 관리가 주요 초점, 사이버 범죄자와 위협이 빠른 속도로 진화, CISO 역할 외 새로운 구매자 등장, 사이버 보안 플랫폼과 Best-of-breed 솔루션 간 논쟁 지속, 비트코인과 이더리움 ETF가 주류 관심 촉발, 블록체인 기업들이 파일럿에서 토큰화된 금융 자산의 대규모 구축으로 이동 등이 최근 주요 변화
     * 주요 불확실성 요인
          + 구현의 복잡성
          + 레거시 시스템과의 통합 시 호환성 문제
          + 산업별 신뢰 구조 기술 사용에 대한 표준화 부족
          + 프라이버시와 공정성/안전성 간 긴장 관계
          + 지정학적 긴장에 따른 사이버 리스크 증가
          + 블록체인과 토크나이제이션에 대한 규제 환경의 파편화
          + 설명 가능한 방식으로 대형 AI 모델을 개방하는 방법의 불확실성
          + 기밀 데이터가 LLM 학습에 사용되는 것에 대한 기업의 우려
          + 디지털 신뢰 조치를 핵심 제품 기능으로 통합하는 것에 대한 리더들의 인식 부족
          + Web3의 가치 제안과 UX 이해 부족
          + 소비자 보호에 대한 규제 당국의 관심 증대
     * 핵심 질문
          + 고객/직원/커뮤니티의 보안, 경험, 프라이버시에 대한 기대 관리 방안
          + 규제 당국이 새로운 신뢰 기술의 요구 사항과 과거의 기준을 조정하는 방법
          + 선제적인 사이버보안 리스크 관리에 대한 규제 당국의 기대 증가에 따른 보고 비용 관리 방안
          + 가장 중요한 시스템/데이터 유형 식별과 위험에 노출된 부분 파악
          + 미래에 대비한 디지털 포트폴리오 아키텍처에 ""제로 트러스트"" 등의 개념을 내재화하는 방법
          + Web3의 기술적으로 신뢰할 수 있고 상업적으로 실행 가능한 비즈니스 모델과 가치 사슬
          + Web3 생태계와 기존 기업 시스템 아키텍처 및 Web2 플랫폼과의 공존 방식 등에 대한 향후 고민 필요

고급 연결성

     * 고급 연결성 기술은 소비자와 모빌리티, 제조, 농업 등 다양한 산업의 경험을 혁신할 잠재력. ROI의 불확실성으로 일부 최신 연결 기술에 대한 투자를 꺼리는 기업들도 있지만, 차세대 위성 연결, 사설 5G 네트워크, 6G 등이 빠르게 발전하면서 통신사와 기업은 혜택 향유를 위한 준비 필요
     * 통신 산업의 어려움 지속, 사설 네트워크 도입 진전, 6G의 지속적인 발전에도 불구하고 일부 의문점 상존, 모바일 네트워크에서 xRAN 도입 부상, LEO위성 constellation 구축 진전 등이 주요 동향
     * 주요 불확실성 요인
          + 통신사의 수익성 악화
          + 산업용 수직 계열화와 고객들에 대한 서비스 수준 협약 요구에 부합하는 성숙한 사용 사례 부재
          + IoT 도입 속도를 늦추는 시장의 분절화, 보안 문제, 상호운용성 결여, 복잡한 구축, 표준화 부족 등의 생태계 성숙도 부족
          + 5G/6G 인프라 구축을 위한 정부 개입의 역할 불확실성
     * 핵심 질문
          + 통신 산업이 수익성을 개선하기 위해 필요한 근본적인 변화
          + 광섬유 시장 변화가 고객의 네트워크 옵션에 미치는 영향
          + 5G 수익화 충분성 여부
          + 차세대 무선 기술에 대한 이해관계자들의 기대
          + 6G의 모습과 네트워크 장비 업체, 통신사, 기업, 칩 제조사의 투자와 수익 창출을 위한 필요 조건
          + 사설 네트워크 도입의 성공 가능성과 기업들의 혜택 놓치지 않기 위한 필요 사항
          + LEO 발사 확대와 기술 발전에 따른 위성의 공급 과잉 가능성

몰입형 현실 기술

     * 몰입형 현실 기술은 현실 세계에 가상의 물체를 추가하거나 가상 세계에서 상호작용을 가능하게 함. 하드웨어 개발 지연, 불안정한 투자와 소비자 수요 등의 어려움에도 불구하고, Vision Pro 헤드셋 출시, 기업의 디지털 트윈 기술 관심 지속 등 탄력성 보여줌
     * 헤드셋 시장의 선택적 성장, 게임을 넘어 디지털 경험으로 확장 중인 가상 세계, 기업 도입의 지속에도 예상보다 확장에 더 오랜 시간 소요 등이 주요 트렌드
     * 주요 불확실성 요인
          + 하드웨어/SW 개선을 통한 소형화, 내구성 향상, 정밀도와 사용자 편의성 개선
          + 열 관리, 배터리 수명 연장 등 기술적 해결 과제
          + 비용 절감 속도와 수준의 불확실성
          + 사용자 니즈의 범위 성장에 대한 의문
          + 사용자 행동 추적과 관련된 보안 및 개인정보 보호 문제 완화
          + AR/VR 플랫폼 사용 시 안전 문제 해결
          + 의도된 사용에 따른 다양한 폼팩터의 확산이 각각에 가장 적합한 사용 사례에 대한 불확실성 야기
     * 핵심 질문
          + 다양한 환경(가정, 직장, 이동 중)에서의 사용 사례가 미치는 잠재적 영향
          + 기기 하드웨어의 진화 방식과 속도
          + 새로운 원격/하이브리드 근무 방식과 인간-기계 인터페이스에 몰입형 현실이 미치는 영향
          + 기업이 새롭고 진화하는 사용 사례에 필요한 기술 인프라를 효과적으로 관리하는 방법
          + VR 기술의 안전하고 안심할 수 있으며 윤리적인 사용(콘텐츠 조정, 데이터 프라이버시, 사이버보안 포함)을 보장하기 위해 필요한 규제 프레임워크

클라우드와 엣지 컴퓨팅

     * 기업은 전통적인 온사이트 저장 및 관리 방식에서 원격 하이퍼스케일 데이터 센터부터 엣지의 온사이트 서버에 이르기까지 여러 인프라 지점에 걸친 분산 방식으로 전환 중. 클라우드와 엣지 컴퓨팅의 균형 있는 워크로드 배분은 리소싱, 지연 시간, 데이터 프라이버시, 보안 확장성 최적화에 기여
     * AI 수요 증가로 클라우드와 엣지 컴퓨팅의 사용이 크게 증가, 온프레미스 엣지 솔루션에 대한 우선순위 변화, 일부 사용 사례의 경우 AI 모델의 클라우드에서 엣지 컴퓨팅으로의 전환이 차세대 진화를 의미, 기업들이 GPU 공급망을 다양화하는 추세 등이 최근의 주목할 만한 변화
     * 주요 불확실성 요인
          + 엣지 노드와 디바이스 수 증가에 따른 규모 확장의 어려움
          + 클라우드 솔루션을 효과적으로 구현할 인하우스 인재 부족과 경영진 지원 부족
          + ML/AI 모델의 복잡성과 즉시 배포 가능한 솔루션의 부재로 인한 클라우드 컴퓨팅 기능 구축 및 확장의 기술적 어려움
          + 투자수익률 가시성 부족
          + 엣지 개발을 위한 긴 투자 회수 기간
          + 부가가치 사용 사례에 대한 고객 이해 부족
          + 파일럿에서 대규모 구현으로 확장하기 위한 대규모 투자 요구사항
          + 복잡한 기술 스택 요구사항(대부분의 기업의 기존 기술 환경과의 통합 필요)
          + 즉시 배포 가능한 솔루션의 부족 등 기타 도전 과제
          + 많은 기업에서 여전히 우려하는 클라우드의 개인정보 보호 문제
     * 핵심 질문
          + 비즈니스 및 규제 측면에서 유리한 위치에 있는 엣지가 클라우드보다 더 혁신적일 것인지
          + 네트워킹의 상호운용성과 표준의 공통성 부족 등의 방해 요인이 엣지가 잠재력을 충분히 발휘하지 못하게 할 것인지
          + 하이퍼스케일 클라우드 제공업체가 엣지 컴퓨팅을 주도할 것인지
          + 5G 지원 MEC를 보유한 통신사들이 하이퍼스케일러와 경쟁 또는 협력할 것인지
          + 급속히 진화하는 AI 기술과 규제 변화가 클라우드 및 엣지 제공업체의 비즈니스 모델을 어떻게 변화시킬 것인지
          + 데이터 센터와 엣지에 배포되는 전문 칩이 경쟁적인 클라우드 및 엣지 환경을 어떻게 수정할 것인지
          + 스토리지 및 처리 단위 수 증가가 보안 취약점으로 이어질 것인지
          + 그린 인프라로의 전환이 클라우드 및 엣지 기술의 지속적인 발전을 어떻게 촉진할 것인지
          + 센서 비용 하락과 성능 향상에 따라 엣지 및 클라우드 리소스가 데이터 이동 및 AI 지원 분석에 대한 수요 증가에 어떻게 대처할 것인지
          + 연결 비용 감소가 엣지 도입을 더 많이 주도할 것인지

양자 기술

     * 양자 컴퓨팅, 양자 통신, 양자 센싱으로 구성. 실제 응용에 대한 양자 우위는 아직 입증되지 않았지만 화학, 제약, 금융, 자동차, 항공우주 등 다양한 산업의 선도 기업들 사이에서 유망한 연구와 실험이 이루어지고 있음. 민간 및 공공 부문 모두의 노력이 요구되는 기술적 장벽 극복 필요. 미래 발전을 위해 현명하게 투자하는 것이 전략적으로 현명
     * 오류 정정 관련 주요 진전, 전체 스택 구축(SW 및 양자와 고전적 컴퓨팅 인프라 통합 포함)에 대한 추가 강조, 양자 컴퓨팅 발전에 따른 정보 보안 개선, 기존 기업과의 스타트업 파트너십 지속 등이 최근의 주목할 만한 변화
     * 주요 불확실성 요인
          + 충분한 양과 품질의 큐비트를 관리하고 의미 있는 계산 결과를 도출할 능력 등의 기술적 과제
          + 기존 슈퍼컴퓨터로도 기업에 필요한 대부분의 계산을 합리적으로 수행할 수 있어 일반 목적 양자 컴퓨터가 중심 무대에 서기 전까지 비용 효율성 달성에 시간이 걸릴 것
          + 기술 성숙값과 적용 가능성의 상이한 수준
          + 시장 출시에 필요한 분야 간 조정 필요성 증가
          + 이론/하드웨어/소프트웨어 개발의 인재 확보 등 양자 허브 외부에서의 개발 및 혁신을 저해하는 제한된 인식과 낮은 기술 도입
     * 핵심 질문
          + 양자 기술이 향후 10년간 어떤 속도로 발전하고 주요 이정표에 도달할 것인지
          + 양자와 AI의 결합으로 얻을 수 있는 이점은 무엇인지
          + 기업이 양자 기술, 특히 양자 컴퓨터로 인한 보안 위협에 대비하기 위해 언제 어떻게 준비를 시작해야 하는지
          + 인재 공급이 수요를 따라잡을 수 있을지
          + 활용 가능한 레버는 무엇이며 조직이 인재 격차를 메우는 데 어떻게 도울 수 있을지

로봇공학의 미래

     * 고도로 정교화된 로봇 시스템은 다양한 물리적 작업을 자동화하는 데 특화. 거시경제 상황과 기술 발전으로 인해 소비자 수준의 서비스부터 기업 수준의 조립에 이르기까지 사용 사례 확산. 거시경제적으로 많은 국가에서 인건비 상승, 인구 고령화, 오프쇼어링에 대한 추가 복잡성 등으로 노동시장 긴축. 기술적 관점에서 AI가 물리적 로봇의 역량을 높이고 교육을 가속화하는 많은 혁신 주도. 기술적, 사회적 장벽은 있지만 광범위한 채택은 생산성 향상과 현재의 인간 중심 일자리와 근본적으로 다른 새로운 업무 방식을 통합하는 경제로의 전환에 핵심
     * 로봇 도입 부문 확산, 로봇 유형 확장, 휴머노이드 및 범용 로봇에 대한 관심 급증, AI가 더 자율적인 로봇을 향한 발전을 지속 촉진하고 있음 등이 최근 주목할 만한 발전 사항
     * 주요 불확실성 요인
          + 로봇이 사회와 더욱 통합되고 인간과 함께 일하게 됨에 따라 안전, 개인정보 보호 및 책임에 대한 우려 제기 가능
          + 로봇 도입이 많은 업무를 자동화할 잠재력이 있음에도 처음에는 노동 시장과 대중의 인식에 부정적일 수 있음(인력의 새로운 역할을 위한 일자리 시장 재설계 기회 제공 가능)
          + 로봇을 인력에 통합하려면 인간 근로자를 다른 역할로 재교육하거나 새로운 동료와 효과적으로 협력하기 위한 교육 필요
          + 배터리 및 인재와 같은 충분한 자원에 대한 접근은 기술 개발과 향후 제품 공급 모두에 계속 중요
          + 국가 간 경쟁이 글로벌 기술 무역 흐름에 큰 영향을 미칠 수 있음
          + 규제 변화 가능성이 시장 전망에 상당한 불확실성 추가
     * 핵심 질문
          + 기업이 로봇을 조직에 도입하는 속도는 어떻게 될 것인가
          + 로봇과의 통합이 미래의 인력을 어떻게 재편할 것인가
          + 범용 로봇은 언제쯤 기대할 수 있을까
          + 고급 로봇으로 인해 어떤 새로운 비즈니스 사용 사례가 만들어질 수 있을까

모빌리티의 미래

     * 자율주행차(AV), 전기차(EV), 도심 항공 모빌리티(UAM), ACES(자율주행, 연결성, 전동화, 공유/스마트 모빌리티) 기술에 대한 관심 고조. 모빌리티 부문의 신규 및 기존 기업들의 가속화되는 기술 도입. 주요 도시에서 자율주행 로보택시의 상용 시범 프로그램, 도심 항공기 비행 테스트 등 대규모 도입을 위한 주요 단계. 기술, 규제, 소비자 인식 문제로 업계 변동성 증가
     * EV 수요는 여전히 높지만 주요 지역에서 최근 성장률 둔화, 로보택시가 더 광범위한 상용 사용을 위한 장애 요소 해결, 테스트가 시작되면서 자율 트럭 운송이 중대한 시점에 도달, 마이크로 모빌리티는 일반적으로 시장 통합 속에서 회복력을 보여줌, 드론 배송 운영의 규모와 폭이 확대, eVTOL 항공기에 대한 자금 조달이 약간 감소했지만 인증 가능성이 모멘텀 유지 등이 최근의 주요 발전 사항
     * 주요 불확실성 요인
          + EV 수요를 충족하기 위해 필요한 글로벌 에너지 공급 확장의 불확실성
          + 무인 및 자율 모빌리티 기술 관련 안전성 및 책임성에 대한 우려
          + 더 많은 응용 분야(예: 항공 모빌리티)를 지원할 수 있는 충분한 범위의 배터리 관련 기술적 불확실성
          + 소음 및 시각적 영향에 대한 고객 인식(예: 배송 드론의 소음 공해)
          + 새로운 운송 수단에 대한 장비 및 인프라 비용(예: EV 충전 네트워크 구축)
          + 주류 인증 프레임워크가 개발됨에 따라 발생하는 규제 변화(예: 확장된 항공 교통 통제)
          + 소비자 데이터에 의존하는 기본 AI 알고리즘 및 워크플로에 대한 개인 정보 보호 및 보안 문제
          + 이러한 기술을 확장하는 데 필요한 충분한 자원(예: 배터리 생산을 위한 원자재, 자율주행 소프트웨어를 위한 소프트웨어 개발자) 확보
     * 핵심 질문
          + 미래 모빌리티 트렌드가 도시를 어떻게 형성할 것인지
          + 광범위한 채택을 가능하게 하기 위해 해결해야 할 규제상 장애와 활성화 요인은 무엇인지
          + 자율주행차가 차량 판매에서 차지하는 비중과 지배적인 비즈니스 모델은 무엇일지
          + 자율주행차와 도심항공모빌리티에 대한 소비자 신뢰를 얻기 위해 어떤 성과를 달성해야 하는지
          + 향후 10년 동안 고급 항공 모빌리티가 어느 정도의 규모에 도달할 것인지
          + 공유 모빌리티의 발전이 기대되는 재정적, 환경적 영향을 미치기 위해 무엇이 갖춰져야 하는지

바이오 엔지니어링의 미래

     * 생물학적 컴퓨팅 발전의 결합은 헬스케어, 식품 및 농업, 소비재, 지속가능성, 에너지 및 소재 산업에 일련의 제품 및 서비스 혁신 촉발. 향후 10년간 연간 2조 달러 이상의 잠재적 경제적 영향과 수백 가지 사용 사례 가능성. 상용성과 사회적/규제적 도전과제 극복이 필요. 지속적 투자와 혁신 노력 지속 중
     * CRISPR 기반 유전자 치료제가 중요한 발전, 바이오 엔지니어링에서 AI의 새로운 사용법 지속 발견, 규제적 제약에도 불구 대체 단백질 생산 발전 등이 최근 주목할 만한 발전 사항
     * 주요 불확실성 요인
          + 바이오 엔지니어링 기술 및 제품 규제가 발전 속도에 영향을 미칠 수 있음
          + 바이오 엔지니어링 제품의 안전성, 비용, 품질에 대한 대중의 인식과 윤리적 우려가 시장 발전 속도를 결정할 수 있음
          + 살아있는 유기체 변형에 대한 우려가 발전에 도전할 수 있음
          + 생물학적 시스템이 자가 복제, 자가 유지되고 매우 상호 연결되어 있어 한 부분의 변화가 전체 생태계나 종에 걸쳐 부정적인 파급효과를 가질 수 있음
     * 핵심 질문
          + 사회가 다양한 가치관과 원칙에 비추어 유전체 편집의 적절한 범위를 어떻게 결정할 것인지
          + 비즈니스 채택과 함께 대중이 바이오 엔지니어링을 어떻게 인식하고 채택할 것인지(예: 배양육이 기존 식단에 어떻게 부합할지)
          + 다양한 질병에 대해 CRISPR 기반 유전자 치료제가 결실을 맺고 더 사회적으로 수용되기까지 얼마나 걸릴 것인지

우주 기술의 미래

     * 지난 10년 동안 기술 비용이 급격히 감소하면서 우주 기술의 실행 가능성과 관련성이 높아짐. 위성 인터넷 연결의 대규모화, 민간 시장의 발사체 관련 참여와 혁신 확대. 사용 사례 증가로 비우주 기술 기업들의 관심과 투자 유치. 2035년까지 우주 산업 매출이 7500억 달러 이상으로 성장할 가능성. 기술적, 지정학적 장애물 극복이 관건
     * LEO 위성통신 constellation의 지속적인 성장, 직접 단말기 연결(D2D)에 대한 관심과 기대 확장 지속, 글로벌 발사 활동 증가, 민간 및 공공 부문 모두에서 달 활동 지속, 최종 사용자 솔루션으로의 통합 관련 관심 증가가 비우주 기술 부문의 관심 견인 등이 최근의 주목할 만한 발전 사항
     * 주요 불확실성 요인
          + 우주 기술의 비용 효율성 확보를 통한 추가 확장성 가능 여부
          + 플레이어, 위성, 응용 프로그램 수 증가에 따른 주파수 및 궤도 사용 권한 할당을 위한 거버넌스 메커니즘 정의 필요성
          + 상업 플레이어 증가로 인한 데이터 유출, 맬웨어 및 기타 사이버 공격 등 사이버 위험 증가
     * 핵심 질문
          + 우주 및 우주 기술에 대한 소유권 및 접근권을 어떻게 정의할 것인지
          + 주요 영역(예: 의도하지 않은 간섭 줄이기, 안전한 운영 촉진, 재산권 및 사용 보호, 책임 결정, 공평한 데이터 공유 장려)에 대한 거버넌스 구조를 이해 관계자가 어떻게 조정하여 구축할 수 있을지
          + 우주 잔해물과 교통량을 효과적으로 관리하기 위해 이해 관계자가 어떻게 조율할 수 있을지
          + 향후 위성 분포(예: 궤도 전반에 걸친 균형)는 어떤 모습일지
          + 시장이 다양한 요인(거시경제, E2E 솔루션 추진 등)을 고려할 때 어떻게 진화할지
          + 민간 발사 시장 내 경쟁이 어떻게 진화할지
          + 스펙트럼 사용의 경쟁 심화와 정체 위험이 높아지는 상황에서 현재의 주파수 할당 시스템이 지속될 수 있을지

전기화와 재생 에너지

     * 파리협정에 따른 글로벌 탄소 배출량 감축에 매우 중요. 2030년까지 글로벌 배출량을 45% 감축하고 2050년까지 넷제로에 도달하려면 태양광, 풍력 등 재생에너지, 원자력, 수소, 지속가능한 연료와 바이오에너지, 에너지 저장 등 청정 확고한 에너지원, 장기 배터리 시스템과 스마트 그리드 등 분배 솔루션 등 필요 기술 대부분이 이미 존재. 하지만 에너지 및 토지 이용 시스템에 대한 실물 자산 총 투자는 2050년까지 넷제로에 도달하는 데 필요한 연간 9.2조 달러에 훨씬 미치지 못함. 2050년까지 기후 기술 가치 사슬에 약 2억 명의 숙련된 노동자 필요할 것으로 추정
     * 여러 가지 과제나 문제점에도 불구하고 재생에너지 발전 용량이 급증, 수소에 대한 공공 부문 지원 증가했으나 구현은 여전히 뒤쳐짐, 글로벌 배터리 저장 용량 급속 확장, 정책 인센티브가 침체된 히트펌프 도입을 자극하려 함 등이 2023년 주요 발전사항
     * 주요 불확실성 요인
          + 재생에너지 기술 도입 확대에 비용 절감이 필수이며, 이는 기술 발전과 규모의 경제를 위한 투자를 통해 달성 가능
          + 저탄소 에너지 생산 속도가 글로벌 넷제로 공약에 맞춰 증가해야 하는 수준에 도달하면 리튬, 철강, 구리 등 자재 공급이 제약요인이 될 수 있음
          + 그린수소, 배터리, 지속가능한 연료 등 신기술의 생산을 위한 인프라 개발 확대가 미래 에너지 믹스에 수반
          + 전력 송배전, 배터리 저장, EV 충전, 스마트 그리드 부하 관리를 위한 혁신과 인프라 투자 가속화
          + 인허가 간소화를 통해 프로젝트 리드타임 단축과 신속한 규모 확대 가능
          + 글로벌 탄소중립 공약에 필요한 속도와 규모로 전기화와 재생에너지 기술 배치에는 청정에너지 기술 전문가 공급의 단계적 증가 필요
          + 지역 간 협력을 통해 표준을 조화시키고 재생에너지 기술의 글로벌 채택을 가속화하며 글로벌 에너지 안보 정책 조정 가능 등의 과제와 대응이 필요
     * 핵심 질문
          + 배터리 저장 기술의 혁신이 전기차와 재생에너지 자산의 도입에 어떤 영향을 미칠 것인지
          + 에너지 안보와 전력망 안정성을 보장하면서 기존 및 신흥 에너지 시스템을 병행 관리하기 위해 공공-민간 이해관계자가 어떻게 협력할 수 있을지
          + 지역과 조직이 기존 산업 종사자의 일자리 안정을 높이면서 에너지 접근성을 늘리고 전기화된 세상에서 가져오는 새로운 비교우위를 어떻게 활용할 것인지
          + 전력 부문이 전기화 및 재생에너지 기술 관련 기술을 갖춘 근로자 인력을 어떻게 늘릴 것인지
          + 신흥국가들이 기존 인프라 장벽과 탄화수소로부터의 비용 경쟁에도 불구하고 증가하는 인구에 청정 에너지를 공급할 것인지

전기화 및 재생에너지를 넘어선 기후 기술

     * 순환성 및 자원, 탄소 포집 및 제거와 관련된 기술 포함. 지속가능한 제품 및 서비스 생산은 기업이 새로운 규제를 준수하고 성장 기회를 창출하며 인재를 유치하는 데 도움. 소비의 환경적 영향을 완화하는 많은 기술이 기술적으로 가능하지만 대규모로 비용 효율적이 되거나 인력 재교육, 자금 조달 등의 장벽을 극복한 경우는 거의 없음. 과제의 범위도 전례 없음. 2030년까지 연간 0.8~2.9 GtCO2의 추가 제거 용량 필요. 열망과 공약 간의 격차를 해소하려면 글로벌 연간 GDP의 약 0.1%(약 1200억 달러)에 해당하는 투자의 단계적 변화 필요
     * 기업의 공약 확대, 지속가능한 농업을 위한 농업 기술(agtech) 솔루션 채택 증가(침투율은 상대적으로 낮음), 탄소 관리 이니셔티브에 대한 공공 부문 지원 증가, 탄소 포집/활용/저장(CCUS)에 대한 관심이 단계적으로 변화 등이 2023년 주요 발전 사항
     * 주요 불확실성 요인
          + 정책과 규제가 투자 결정, 사업 사례 타당성, 탄소 관리 계획에 대한 대중의 반응을 형성하는 데 결정적인 역할을 할 수 있음
          + 다양한 탄소 관리 인센티브 구조를 통한 자연자본 가치 평가 방식에 따라 자연자본 솔루션의 공동 혜택에 대해 조직이 순수 CO2 제거와 상대적으로 다양한 가치를 적용할 수 있음
          + 탄소 저감 및 제거 인프라 확장은 시간과 자본이 집약적이므로 가치 사슬 전반에 걸친 조정이 어려울 수 있으며, 공공 및 민간 이해 관계자 간 현지 수준의 조율 필요성이 추가 장애물이 될 수 있음
          + 독립적인 탄소 신용 기준이 약속을 이행하기 위해 투명성과 일관성을 높이기 위한 최근 공약이 탄소 관리 계획에 대한 신뢰에 어떤 영향을 미칠 것인지 불분명함
     * 핵심 질문
          + 탄소 관리 계획이 R&D, 경험, 규모의 경제를 통해 잠재적인 병목 현상(예: 원자재, 토지, 인프라)을 어떻게 극복할 것인지
          + 자연 기반 탄소 제거와 기술 기반 탄소 제거의 효능에 대한 논쟁이 투자 결정과 대중의 인식에 어떤 영향을 미칠 것인지
          + CCUS 기술의 혁신이 상당한 비용 절감과 사용 사례 확장으로 이어질 수 있는지
          + 독립적인 탄소 신용 기관이 인증 기준을 성공적으로 충족하고 자발적 탄소 시장에 대한 신뢰와 신뢰성을 구축하기 위해 점수 투명성을 높일 수 있을지
          + 소비자들이 대체 단백질의 지속적인 혁신에 어떻게 반응할 것인지
"
"https://news.hada.io/topic?id=16044","SQLite: 파일 시스템보다 35% 더 빠름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       SQLite: 파일 시스템보다 35% 더 빠름

     * SQLite는 작은 Blob(예: 썸네일 이미지)를 개별 파일에서 fread()나 fwrite()로 읽거나 쓰는 것보다 35% 더 빠르게 읽고 쓸 수 있음
     * 또한 10KB Blob을 저장하는 단일 SQLite 데이터베이스는 개별 파일로 Blob을 저장하는 것보다 디스크 공간을 약 20% 적게 사용함
     * 성능 차이는 SQLite 데이터베이스에서 작업할 때 open()과 close() 시스템 호출이 한 번만 호출되는 반면, 개별 파일의 Blob을 사용할 때는 각 Blob마다 open()과 close()가 한 번씩 호출되기 때문에 발생하는 것으로 보임. open()과 close()의 오버헤드가 데이터베이스 사용 오버헤드보다 큰 것으로 보임
     * 크기 감소는 개별 파일이 파일 시스템 블록 크기의 다음 배수로 채워지는 반면, Blob은 SQLite 데이터베이스에 더 조밀하게 포장되기 때문에 발생함

주의사항

     * 35%라는 수치는 대략적인 것임. 실제 타이밍은 하드웨어, 운영 체제, 실험 세부 사항에 따라 다르며 실제 하드웨어에서 무작위 성능 변동이 있음
     * 35%라는 수치는 저자가 쉽게 사용할 수 있는 모든 시스템에서 테스트를 실행한 결과임. 일부 리뷰어들은 그들의 시스템에서 SQLite가 직접 I/O보다 더 높은 지연 시간을 가진다고 보고함. 아직 그 차이를 이해하지 못함
     * SQLite는 차가운 파일 시스템 캐시를 사용하여 실험을 실행할 때 직접 I/O만큼 잘 수행되지 않는 것으로 나타남
     * 이 문서는 관계형 데이터베이스가 직접적인 파일 시스템 I/O보다 느려야 한다는 일반적인 가정을 반박함
     * 2022년 연구에 따르면 실제 작업에서 SQLite는 Linux의 Btrfs 및 Ext4에 비해 대략 2배 더 빠른 것으로 나타남

측정 방법

     * I/O 성능은 SQLite 소스 트리의 kvtest.c 프로그램을 사용하여 측정됨
     * 이 테스트 프로그램을 컴파일하려면, SQLite 아말감 소스 파일 ""sqlite3.c""와 ""sqlite3.h""와 함께 kvtest.c 소스 파일을 디렉터리로 수집한 다음, Unix에서 다음과 유사한 명령을 실행함
     * 이 명령의 결과로 나오는 ""kvtest"" 프로그램을 사용하여 100,000개의 무작위 비압축 Blob으로 구성된 테스트 데이터베이스를 생성하며, 각 Blob의 크기는 8,000바이트에서 12,000바이트 사이임
     * 모든 Blob의 사본을 디렉터리의 개별 파일로 만들기 위해 --tree 명령줄 옵션을 사용하여 ""export"" 명령을 실행할 수 있음
     * 데이터베이스에서 Blob을 읽고 개별 파일에서 Blob을 읽는 성능을 측정하기 위해 다음 명령을 사용함
     * --blob-api 옵션을 사용하면 SQLite가 SQL 문을 실행하는 대신 sqlite3_blob_read() 기능을 사용하여 Blob 내용을 로드할 수 있어 읽기 테스트에서 조금 더 빠르게 실행됨

읽기 성능 측정

     * Windows10에서는 SQLite 데이터베이스에서 콘텐츠를 디스크에서 직접 읽는 것보다 약 5배 더 빨리 읽을 수 있음
     * Android에서는 SQLite가 디스크에서 읽는 것보다 약 35% 더 빠름
     * 메모리 매핑된 데이터베이스에서 sqlite3_blob_read()를 사용하여 읽을 때 Mac과 Android에서는 디스크에서 개별 파일을 읽는 것보다 2배 더 빠르고 Windows에서는 10배 더 빠름

쓰기 성능 측정

     * 모든 시스템에서 직접 I/O와 SQLite 모두 쓰기 성능이 읽기보다 5~15배 느림
     * 쓰기 테스트에서 안티바이러스 소프트웨어는 SQLite 쓰기에는 거의 영향을 미치지 않지만 직접 디스크에 쓰기는 10배 정도 느려짐
     * 이는 아마도 SQLite는 단일 데이터베이스 파일만 변경하는 반면 직접 디스크에 변경하는 것은 안티바이러스에서 검사해야 하는 수천 개의 개별 파일을 변경하기 때문일 것임

일반적인 결과

     * SQLite는 읽기와 쓰기 모두에서 별도의 디스크 파일에 저장된 Blob과 경쟁력이 있으며 대개 더 빠름
     * SQLite는 안티바이러스 보호 기능이 켜져 있을 때 Windows에서 디스크에 직접 쓰기보다 훨씬 더 빠름
     * 읽기는 모든 시스템에서 그리고 SQLite와 직접 디스크 I/O 모두에서 쓰기보다 약 10배 더 빠름
     * I/O 성능은 운영 체제와 하드웨어에 따라 크게 다름. 결론을 내리기 전에 자체 측정이 필요함
     * 일부 다른 SQL 데이터베이스 엔진은 개발자에게 Blob을 별도의 파일에 저장한 다음 데이터베이스에 파일 이름을 저장할 것을 조언함. 이 경우 전체 Blob을 데이터베이스에 저장하면 SQLite에서 훨씬 더 빠른 읽기 및 쓰기 성능을 제공함

GN⁺의 의견

     * SQLite의 성능이 개별 파일을 읽고 쓰는 것보다 우수하다는 점이 매우 흥미로움. 이는 데이터베이스를 사용하는 애플리케이션의 성능 향상에 도움이 될 것으로 보임
     * 그러나 이 벤치마크 결과가 모든 상황에 일반적으로 적용되는 것은 아님. 데이터의 특성, 액세스 패턴, 하드웨어 구성 등에 따라 달라질 수 있음. 중요한 애플리케이션의 경우 실제 작업 부하를 사용하여 벤치마크를 수행하는 것이 중요함
     * 또한 SQLite는 안티바이러스 검사를 피할 수 있다는 장점이 있음. 이는 대량의 작은 파일을 다루는 애플리케이션에서 특히 유용할 것임
     * SQLite의 단점은 모든 데이터가 단일 파일에 저장되기 때문에 데이터베이스 파일이 손상되면 모든 데이터가 손실될 수 있다는 점임. 따라서 데이터베이스 파일을 정기적으로 백업하는 것이 중요함

   데이터베이스에 파일 속성(파일 이름, 크기, 접근 권한, …)에 대한 접근까지 포함하던가,
   그게 아니라면 파일 입출력이 아니라 블럭 입출력과 비교해야하는데 아닐까 싶은데요…
   이랬던 저랬던 SQLite가 빠르긴 하죠.

        Hacker News 의견

     * 파일 시스템 속성이나 메타데이터가 없어서 추가적인 속성 기록이나 업데이트가 필요 없고, 물리 파일이나 파이프/심볼릭 링크 확인, 권한 검사, 블록 크기 정렬 불일치 등이 없어서 단일 오픈 명령어만 필요함
          + 기능을 버리고 범용 설계를 무시할 때 이해할 수 있는 부분임
          + SQLite에 대한 fuse 매핑을 사용하고 디렉토리를 마운트하여 접근하면 성능이 비슷하거나 더 느릴 수 있음
          + 속성을 비활성화하고 최적화된 블록 크기로 커스텀 파일 시스템을 만들면 비슷한 성능을 얻을 수 있음
          + rsync 같은 쉘 명령어를 사용하여 파일을 탐색하고 조작할 수 있는 단순함이 있음
          + SQLite는 패키지된 정적 자산이나 어플라이언스 타입 애플리케이션에 적합함
     * Windows 10에서 4배 속도 증가가 Windows 파일 시스템 호출이 얼마나 느린지 강조함
     * 디지털 피아노에서 나오는 모든 노트를 실시간으로 기록하는 아이디어를 가짐
          + SQLite를 사용하여 각 행이 피아노의 MIDI 이벤트인 단일 테이블로 저장함
          + 성능이 좋고 나중에 분석할 수 있음
     * 데이터베이스 연구실에서 OS 연구와 비교하는 것이 흥미로웠음
          + 관계형 데이터베이스는 작은 개별 레코드와 일관성을 위해 최적화됨
          + 행 크기가 커질수록 성능이 급격히 떨어짐
     * WAL2 모드에서 sqlite DB에 추가하는 것을 고려 중임
          + 쓰기 성능 페널티가 거의 없고 읽기/분석에 큰 장점이 있음
     * SQLite 데이터베이스에서 open()과 close() 시스템 호출이 한 번만 호출됨
          + 개별 파일에서 블롭을 사용할 때보다 오버헤드가 적음
     * SQLite 블롭 필드를 사용하여 파일을 저장하는 것은 권장하지 않음
          + 블롭 최대 크기가 2GB임
          + 객체를 바이트로 직렬화/역직렬화해야 함
          + 다른 시스템/서비스와 상호작용하려면 파일이 필요함
          + SQLite는 병렬 요청을 처리하는 설정이 있지만, 경쟁 요청으로 인해 데이터베이스가 잠김
     * 파일 시스템 위에 구축된 것이 파일 시스템보다 빠르다는 것은 최적화되지 않은 방식으로 파일 시스템을 사용할 때 느리다는 의미임
     * SQLite 데이터베이스에서 많은 행을 삭제하는 것이 파일을 삭제하는 것보다 느림
     * 모든 파일 시스템/드라이브 접근은 OS에 의해 관리됨
          + 데이터베이스 파일이 디스크에 클러스터로 저장됨
          + 데이터베이스 관리 시스템은 특정 도메인과 문제를 해결하기 위해 편리하게 만들어짐

   20년 전에 파일을 blob으로 oracle db에 넣는 아키텍처를 잘 사용했으나.. 매번 사람들에게 그 장점을 설명해야 했음. 물론 매번 성공적이지는 않았음.

   20년 전이면 오라클 SAN DISK 가격이 만만치 않았을텐데요..
"
"https://news.hada.io/topic?id=16052","스마트한 덤 워치로 손목에 TOTP 토큰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스마트한 덤 워치로 손목에 TOTP 토큰

     * 최근 Sensor Watch에서 Casio F-91W의 새로운 교체 로직 보드를 받음
     * F-91W는 세계에서 가장 인기 있는 쿼츠 시계 중 하나로, 약 9천만 대가 판매됨
     * Sensor Watch 보드는 F-91W의 원래 쿼츠 무브먼트를 ARM Cortex M0+ 기반의 새로운 두뇌로 교체함
     * 원래의 LCD 디스플레이, 버튼, 피에조 부저를 사용하며, 보드는 프로그래밍 가능함
     * Sensor Watch 프로젝트는 수정하기 쉬운 시계 화면과 작은 유틸리티 앱을 제공함
     * 블루투스 라디오는 없지만, 가벼운 유틸리티 시계 케이스와 몇 달 동안 지속되는 배터리 수명, 집에서 재구성할 수 있는 기능이 강력함
     * 약 한 시간 만에 로직 보드를 교체하고, Google과 Github 계정의 2FA 비밀을 설정하여 자주 사용하는 OTP 코드를 손목에서 확인할 수 있었음
     * 새로운 속도계 시계 화면을 작성하여 노젓기 스트로크미터나 케이던스 미터로 사용 가능함
     * 컴퓨터에서 테스트하기 쉬운 wasm 기반 에뮬레이터도 제공됨

  TOTP 시계 화면

     * 이 시계 화면은 시간 기반 일회용 비밀번호(TOTP)를 생성하여 Google, Github 등 인기 있는 웹사이트에 안전하게 로그인할 수 있게 함
     * 알람 버튼을 눌러 설정된 웹사이트/TOTP 비밀을 순환함
     * 여러 웹사이트/TOTP 비밀을 지원하며, TOTP QR 코드에서 비밀을 추출하여 소스 코드에 추가해야 함

    totp_face.c 편집

     * 데모 키를 제거하고, 목록 끝에 키를 추가하려면:
          + static const uint8_t num_keys = 2;에서 숫자를 하나 증가시킴
          + static uint8_t keys[] = {}에 16진수 바이트를 쉼표로 구분하여 추가함
          + static const uint8_t key_sizes[] = {}에 비밀의 크기를 추가함
          + static const uint32_t timesteps[] = {}에 30 항목을 추가함
          + static const char labels[][2] = {}에 비밀의 레이블을 추가함

  새로운 시계 화면 작성 – 속도계

     * 이 시계 화면의 모든 코드는 메인 프로젝트에 제출한 pull request에서 찾을 수 있음
     * 구현은 주로 하나의 메인 루프 함수에 있음

    주요 이벤트 처리

     * 시계 화면이 활성화되면 ""RA""를 표시함
     * MODE 버튼을 누르면 다음 시계 화면으로 이동함
     * LIGHT 버튼을 누르면 조명을 켬
     * ALARM 버튼을 누르면:
         1. 이전 버튼 누름과의 간격을 기반으로 계산된 속도를 업데이트함
         2. 틱 카운터를 재설정함
         3. 빠른 틱 주기를 요청함
     * 매 틱마다 현재 속도를 표시하거나 분당 500회 이상일 경우 ""Hi"", 분당 1회 미만일 경우 ""Lo""를 표시함
     * 틱 카운터를 증가시킴

GN⁺의 정리

     * Sensor Watch는 Casio F-91W의 기능을 확장하여 사용자 정의 가능한 시계 화면과 유틸리티 앱을 제공함
     * ARM Cortex M0+ 기반의 새로운 로직 보드는 프로그래밍 가능하며, 다양한 기능을 추가할 수 있음
     * TOTP 시계 화면은 인기 있는 웹사이트에 안전하게 로그인할 수 있는 기능을 제공함
     * 새로운 속도계 시계 화면은 노젓기 스트로크미터나 케이던스 미터로 유용하게 사용 가능함
     * 이 프로젝트는 시계의 기능을 확장하고 사용자 정의할 수 있는 흥미로운 기회를 제공함

        Hacker News 의견

     * TOTP 비밀키를 웹페이지에 입력하는 것에 불편함을 느끼는 의견이 있음
          + Linux에서 base32와 od 도구를 사용하여 변환 가능함
          + 프로젝트는 멋지지만 시계 디자인은 별로임
     * HN에서 기대하는 콘텐츠임
     * F-91W와 A158W는 같은 형태로, 가격 대비 매우 멋진 시계임
          + 밴드가 팔털을 잡아당기는 경우는 거의 없음
          + A168WGG는 총알 회색 밴드와 검은색 페이스를 가짐
          + A168은 A158보다 약간 큼
     * GA-B2100-1AJF는 G-Shock 중에서도 스타일리시하며 많은 기능을 제공함
     * 시계의 디스플레이 효율성이 놀라움
          + 첫 번째 숫자는 0-5만 표시하면 됨
          + 7만 문제가 됨
     * Nixon에서 일하는 사람은 이 프로젝트를 Nixon 디지털 시계에 적용하고 싶어함
     * 손목시계를 재컴파일하고 다시 플래시해야 하는 점이 TOTP 사용을 제한할 수 있음
     * Casio 계산기 시계에 이런 기능이 있었으면 좋겠다는 의견이 있음
     * WASM 에뮬레이터가 Casio 이스터 에그를 에뮬레이트하지 않는 것 같음
     * 이 프로젝트를 매일 사용하며, TOTP 코드를 정의하는 새로운 인터페이스를 구현했음
          + 사용자 보정 기능을 추가하여 천식 측정기로 사용할 수 있음
          + 시계의 정확성을 연간 약 10초로 향상시키는 보정 기능도 있음
          + 커뮤니티가 성장 중이며, 최근에는 무한 러너 게임도 만들어졌음
          + 유지 보수자들이 매우 친절함
          + 오픈 소스 프로젝트에 시간을 투자하고 싶다면 추천함
     * SecurID 토큰과 함께 작동했으면 좋겠다는 의견이 있음
     * TOTP를 시계에 표시하는 것이 보안에 좋은지 의문을 제기함
          + 시계를 잃어버리거나 도난당할 경우를 걱정함
"
"https://news.hada.io/topic?id=16058","페이스북이 경쟁사의 암호화된 모바일 앱 트래픽을 가로챈 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   페이스북이 경쟁사의 암호화된 모바일 앱 트래픽을 가로챈 방법

     * 현재 Meta에 대한 집단 소송이 진행 중이며, 법원 문서에 따르면 회사가 Wiretap Act를 위반했을 가능성이 있음.
     * 이 게시물은 법원 문서와 Onavo Protect 앱의 역공학 분석을 기반으로 함.
     * 페이스북은 MITM 공격을 사용하여 사용자의 암호화된 HTTPS 트래픽을 가로챘으며, 이를 ""ssl bump""라고 명명함.

      기술 요약

     * Onavo Protect 안드로이드 앱은 사용자가 ""Facebook Research""에서 발급한 CA 인증서를 설치하도록 유도하는 코드를 포함하고 있었음.
     * 이 인증서는 페이스북이 TLS 트래픽을 해독하기 위해 필요했음.
     * 2016년 배포된 앱에는 Facebook Research CA 인증서가 포함되어 있었으며, 일부는 2027년까지 유효함.
     * 새로운 안드로이드 버전이 출시되면서 이 방법은 더 이상 사용 불가능해졌음.
     * Snapchat 앱의 분석 도메인은 인증서 고정을 사용하지 않았기 때문에 MITM 공격이 가능했음.
     * 앱 사용 통계 외에도 민감한 데이터(예: IMSI)를 수집하는 기능이 있었음.

      동작 방식

     * 신뢰할 수 있는 인증서를 장치에 설치하고, 모든 트래픽을 VPN을 통해 페이스북 인프라로 전송한 후, Squid 캐싱 프록시를 사용하여 트래픽을 해독함.
     * Snapchat, Amazon, YouTube 도메인의 트래픽이 가로채졌음.
     * 시간이 지나면서 안드로이드의 보안 강화로 인해 이 전략의 성공률이 감소했음.
     * 페이스북은 접근성 API를 대안으로 고려했음.

      동기

     * 마크 저커버그는 Snapchat에 대한 신뢰할 수 있는 분석이 필요하다고 언급함.
     * Onavo Protect VPN 앱을 통해 특정 도메인의 트래픽을 가로채는 기술을 다른 앱에 배포하려는 의도가 있었음.
     * 페이스북은 2013년에 Onavo를 약 1억 2천만 달러에 인수했으며, 이 기술을 잘 활용하려고 했음.

      기술 분석

     * HTTPS/TLS를 통해 원격 웹사이트나 서버를 신뢰하는 이유는 장치의 신뢰 저장소에 저장된 공인 인증서 때문임.
     * 자체 서명된 인증서를 신뢰 저장소에 추가하면 암호화된 TLS 트래픽을 가로챌 수 있음.
     * 안드로이드 11부터는 사용자가 추가한 인증서를 대부분의 앱에서 신뢰하지 않도록 변경됨.
     * Snapchat 앱은 분석 도메인에 대해 인증서 고정을 사용하지 않았음.

      결론

     * 페이스북이 사용자의 동의 없이 HTTPS 트래픽을 해독한 것은 윤리적 규범을 위반할 수 있으며, 법적으로 문제가 될 수 있음.
     * 안드로이드 7 이후로는 앱이 사용자 저장소의 인증서를 신뢰하지 않도록 변경됨.
     * 페이스북은 IMSI와 같은 민감한 데이터를 수집하려고 했음.

    GN⁺의 정리

     * 이 기사는 페이스북이 경쟁사의 트래픽을 가로채기 위해 사용한 기술적 방법을 상세히 설명함.
     * 안드로이드의 보안 강화로 인해 이러한 방법이 더 이상 유효하지 않음.
     * 페이스북의 접근성 API 남용 가능성은 윤리적 문제를 제기함.
     * 유사한 기능을 가진 다른 프로젝트로는 VPN을 통한 트래픽 분석 도구가 있음.

        Hacker News 의견

     * FB가 SC 사용자들에게 ""시장 조사""에 참여하고 프록시를 설치하도록 돈을 지불한 것 같음
          + 대부분의 기사에서 이를 해킹으로 묘사하지만, 실제로는 그렇지 않음
          + 참가자들이 자신들의 행동이 모니터링된다는 것을 알고 있었을 가능성이 높음
          + 통신 채널의 한 당사자가 암호화를 해제하는 것이 도청으로 간주될 수 있는지에 대한 논란이 있음
     * FB 직원들이 MITM(중간자 공격)에 대해 공개적으로 이야기하고, 다른 회사들에게도 이를 포함시키도록 한 것은 매우 어리석은 행동임
          + ""Zuck, 제안에 대해 이야기할 아이디어가 있어. 직접 만나서 논의하자"" 같은 표현이 더 나았을 것임
     * Onavo 앱을 다운로드해야 한다는 점에서 사용자에게 어느 정도의 선택권이 주어짐
          + iOS에서 사용할 수 있는 두 가지 웹뷰(WKWebview와 SFSafariViewController)가 있음
          + Facebook 앱에서 링크를 클릭할 때 SFSafariViewController를 사용해야 하지만, 여전히 WKWebView를 사용하고 있음
          + WKWebView를 통해 임의의 JS를 주입하고 사용자 행동을 추적할 수 있음
     * Facebook에 대해 좋은 의견을 가질 수 없는 유일한 기술 회사임
          + 10-11년 전에 Facebook 계정을 닫고 검색 결과에서 Facebook을 필터링함
          + WhatsApp은 여전히 사용 중임
     * Meta에 대한 현재의 집단 소송이 Wiretap Act 위반을 주장하는 문서를 포함하고 있음
          + 그러나 이는 도청 사건이 아니며, Sherman Act 위반에 대한 소송임
          + 발견 과정에서 Facebook이 Wiretap Act를 위반했을 가능성이 발견되었음
     * Facebook이 NSA의 전초기지처럼 운영되고 있다는 생각이 듦
     * SSLbump에 대한 법적 선례가 있어야 함
          + 고객 측에서 네트워크 트래픽을 감시하는 것을 범죄로 규정한 사례가 있어야 함
     * 친척이 시장 조사에 참여하려다 포기한 적이 있음
          + VPN 및 프록시를 통해 모든 인터넷 트래픽을 리디렉션하고 인증서를 설치하는 방식이었음
          + 기술 지식이 부족한 사람의 동의가 얼마나 의미 있는지 의문임
     * 인터넷을 통해 민감한 정보를 전송하기 전에 TLS 인증서 교환을 해야 함
     * Meta와 같은 악의적인 행위자들이 많은 ""어두운 패턴""을 사용하고 있을 가능성이 높음
          + 센서 데이터를 통해 민감한 정보를 추출할 수 있는 보안 위험이 존재함
          + Meta와 다른 회사들이 더 간단하고 나쁜 도청 기술을 사용하고 있을 가능성이 있음
"
"https://news.hada.io/topic?id=16032","내가 좋아하는 알고리듬: Linear Time Median Finding (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            내가 좋아하는 알고리듬: Linear Time Median Finding (2018)

    O(n log n)에서 중간값 찾기

     * 리스트를 정렬한 후 중간값을 선택하는 가장 간단한 방법
     * 비교 기반 정렬의 시간 복잡도는 O(n log n)임
     * 코드 예시:
def nlogn_median(l):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return 0.5 * (l[len(l) // 2 - 1] + l[len(l) // 2])

    평균 O(n)에서 중간값 찾기

     * ""quickselect"" 알고리듬을 사용하여 평균적으로 선형 시간에 중간값을 찾을 수 있음
     * Tony Hoare가 개발한 재귀적 알고리듬
     * 과정:
         1. 리스트에서 임의의 인덱스를 선택하여 피벗으로 설정
         2. 피벗을 기준으로 리스트를 두 그룹으로 나눔:
               o 피벗보다 작거나 같은 요소들
               o 피벗보다 큰 요소들
         3. 중간값이 포함된 그룹을 재귀적으로 탐색
     * 코드 예시:
import random

def quickselect_median(l, pivot_fn=random.choice):
    if len(l) % 2 == 1:
        return quickselect(l, len(l) // 2, pivot_fn)
    else:
        return 0.5 * (quickselect(l, len(l) // 2 - 1, pivot_fn) + quickselect(l, len(l) // 2, pivot_fn))

def quickselect(l, k, pivot_fn):
    if len(l) == 1:
        assert k == 0
        return l[0]

    pivot = pivot_fn(l)
    lows = [el for el in l if el < pivot]
    highs = [el for el in l if el > pivot]
    pivots = [el for el in l if el == pivot]

    if k < len(lows):
        return quickselect(lows, k, pivot_fn)
    elif k < len(lows) + len(pivots):
        return pivots[0]
    else:
        return quickselect(highs, k - len(lows) - len(pivots), pivot_fn)

    평균 O(n) 증명

     * 피벗이 리스트를 대략 절반으로 나누는 경우, 각 재귀 호출은 이전 단계 데이터의 절반에서 작동함
     * 수학적 증명:
C = n + n/2 + n/4 + n/8 + ... = 2n = O(n)

    결정적 O(n)

     * 최악의 경우에도 선형 시간 보장
     * ""median-of-medians"" 알고리듬을 사용하여 피벗을 선택
     * 과정:
         1. 리스트를 5개씩 그룹으로 나눔
         2. 각 그룹을 정렬하고 중간값을 선택
         3. 중간값들의 중간값을 피벗으로 선택
     * 코드 예시:
def pick_pivot(l):
    assert len(l) > 0

    if len(l) < 5:
        return nlogn_median(l)

    chunks = chunked(l, 5)
    full_chunks = [chunk for chunk in chunks if len(chunk) == 5]
    sorted_groups = [sorted(chunk) for chunk in full_chunks]
    medians = [chunk[2] for chunk in sorted_groups]
    median_of_medians = quickselect_median(medians, pick_pivot)
    return median_of_medians

def chunked(l, chunk_size):
    return [l[i:i + chunk_size] for i in range(0, len(l), chunk_size)]

    요약

     * quickselect 알고리듬은 적절한 피벗을 선택하면 선형 시간에 중간값을 찾을 수 있음
     * median-of-medians 알고리듬은 최악의 경우에도 선형 시간을 보장하는 피벗 선택 방법
     * 실제로는 임의의 피벗 선택이 충분히 효과적임

    GN⁺의 정리

     * 이 글은 중간값을 찾는 다양한 알고리듬을 설명하고, 특히 선형 시간에 중간값을 찾는 방법을 다룸
     * quickselect 알고리듬은 평균적으로 빠르지만, 최악의 경우를 대비해 median-of-medians 알고리듬을 사용할 수 있음
     * 실제 응용에서는 임의의 피벗 선택이 대부분 충분히 효과적임
     * 비슷한 기능을 가진 알고리듬으로는 introselect가 있으며, 이는 C++ 표준 라이브러리에서 사용됨

        Hacker News 의견

     * 4년 전 다양한 중위수 알고리듬을 비교한 긴 글을 작성했음
     * 10-15년 전, 수십억 개의 값을 가진 로그 항목에서 중위수를 찾기 위해 MapReduce를 사용했음
          + 데이터의 정밀도와 범위를 알면 버킷 정렬을 사용할 수 있었음
          + 타이밍을 정수 밀리초로 표현하고 히스토그램을 생성하여 중위수를 쉽게 찾을 수 있었음
     * 2017년에 중위수-중위수 접근법을 다른 선택 알고리듬과 경쟁력 있게 만든 논문이 발표되었음
          + Andrei Alexandrescu가 이 알고리듬에 대해 2016년에 강연을 했음
     * 중위수-중위수 알고리듬의 저자 목록이 매우 유명함
          + Manuel Blum, Robert Floyd, Ron Rivest, Bob Tarjan, Vaughan Pratt 등
     * Floyd-Rivest 알고리듬도 효율적이지만 이해하기 어려움
     * 스트리밍 알고리듬을 사용하면 전체 데이터를 메모리에 저장하지 않고도 근사치를 계산할 수 있음
     * 퀵소트를 수정하여 중위수를 선택하는 방법이 있음
     * 인터뷰 질문으로 수조 개의 숫자가 있는 리스트에서 중위수를 찾는 문제를 받았음
          + 상한과 하한을 설정하여 중위수를 찾는 방식을 사용했지만 최적의 방법은 아니었음
          + 우선순위 힙을 사용하는 더 효율적인 방법이 있었음
          + 이후 LeetCode 구독을 시작했음
     * Go로 구현된 간단한 예제를 공유했음
     * Radix 정렬은 정수 외에도 문자열 등 다양한 데이터 타입에 사용할 수 있음
"
"https://news.hada.io/topic?id=16079","포크 없이 Bash로 작성된 ps aux","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         포크 없이 Bash로 작성된 ps aux

ps aux를 bash로 구현하기

     * 인터뷰 질문: bash/linux 관련 지식이 필요한 포지션의 인터뷰 질문으로 다음과 같은 상황을 가정할 수 있음
          + SSH로 접속한 머신에서 bash 쉘을 사용 중인데, 새로운 프로세스를 생성할 수 없는 상황
          + 모든 PID가 사용 중인 경우 어떻게 할 것인지 묻는 질문
     * 해결책: 이 도구를 사용하면 ps aux 명령어를 사용할 수 있는 것처럼 행동할 수 있음
          + 모든 상황에서 100% 작동하는 것은 아니지만, 유사하게 동작함

GN⁺의 정리

     * 이 기사는 bash 쉘에서 새로운 프로세스를 생성할 수 없는 상황에서 ps aux 명령어를 대체할 수 있는 방법을 제시함
     * bash 스크립트를 통해 시스템 프로세스를 확인할 수 있는 방법을 설명함
     * 이 방법은 모든 상황에서 완벽하게 작동하지 않을 수 있지만, 제한된 환경에서 유용할 수 있음
     * 비슷한 기능을 제공하는 다른 도구로는 htop이나 top 명령어가 있음

        Hacker News 의견

     * 컴퓨터 과학에서 가장 어려운 문제는 정렬 작업임
          + 간단해 보이는 함수도 실제로는 매우 오래 걸림
          + 여러 프로그래밍 언어에서 열 정렬 함수를 작성하는 것은 항상 어려움
          + Python의 f-strings와 패딩 기능을 사용해도 복잡하고 읽기 어려운 코드가 됨
          + 예제 코드 작성 중에도 여러 버그를 수정해야 했음
     * bash/Linux 관련 지식을 요구하는 인터뷰 질문 예시
          + 모든 PID가 사용 중인 상황에서 새로운 프로세스를 생성할 수 없을 때 해결 방법을 묻는 질문
          + /proc/[pid]/ 파일 시스템에서 PID 공간을 소모하는 프로세스를 확인함
          + kill은 bash의 내장 명령어로 새로운 프로세스를 생성하지 않고도 사용할 수 있음
          + 부모 프로세스를 찾아서 중지시키면 문제를 해결할 수 있음
          + 파이프나 서브셸을 생성하지 않는 깔끔한 스크립트 작성 가능함
     * 2011년에 미국의 대형 기술 회사에서 SRE 역할 인터뷰 경험
          + MS Office의 온라인 브라우저 기반 대안을 만드는 회사였음
          + 전화 인터뷰 후 bash로 netstat 대체 프로그램 작성 과제 부여받음
          + 당시에는 /proc/에서 소켓 정보를 찾는 방법을 몰라서 ps와 fuser 대체 프로그램을 작성함
          + 인터뷰어가 이를 수용했고, 이후 현장 인터뷰로 진행됨
          + 이 시나리오가 현실에 기반한 것인지 궁금함
     * bash@libera의 Izabera는 bash 전문가 중 한 명임
          + 지난 10년 동안 많은 것을 배움
     * 깔끔한 bash 코드 예시
          + 대부분의 bash 코드는 비효율적이지만, 이 코드는 좋은 예시임
     * 모든 PID가 사용 중인 상황에서 새로운 프로세스를 생성할 수 없을 때 해결 방법을 묻는 질문
          + POSIX 쉘에서는 bash 스크립트가 호환되지 않음
     * bash 3.2에서는 작동하지 않지만 bash 4.2에서는 작동함
          + 예제 코드에서 printf의 형식 문자 오류 발생
     * procps가 설치되지 않은 시스템에서 프로세스를 나열하는 더 나은 사용 사례 제안
     * bash로 리스너와 클라이언트를 작성할 수도 있지만, 실제로는 추천하지 않음
"
"https://news.hada.io/topic?id=16137","Embedding.io - 모든 웹사이트를 LLM을 위한 지식창고로 전환하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Embedding.io - 모든 웹사이트를 LLM을 위한 지식창고로 전환하기

     * 모든 웹사이트를 크롤링, 청크 및 벡터화하여 LLM으로 콘텐츠를 사용할 수 있도록 해주는 웹 서비스
     * API로 모든 것을 수행 : 컬렉션을 생성하고, 페이지를 컬렉션에 추가하면, 바로 쿼리 가능
     * 무료버전은 월간 1000페이지까지 지원

   여기 잘 되시는 분 있나요?
   2개 사이트 해봤는데, 하나는 크롤링 이후에 챗봇에게 질문하면 ""I don't know""만 나오고, 나머지 하나는 Server error만 나오네요ㅠㅠ
"
"https://news.hada.io/topic?id=16063","절차적 게임 개발을 위한 나의 선호 도구 및 기법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      절차적 게임 개발을 위한 나의 선호 도구 및 기법

     * 프로젝트 개요
          + 몇 년 동안 브라우저에서 실행되는 3D 장면과 레벨을 작업해 왔음
          + 처음에는 개별 데모로 시작했으나, 점차 상호 연결된 게임 같은 프로젝트로 발전함
          + 절차적 및 생성적 기술을 사용하여 특정 요소를 구현함
     * Shaders + Textures
          + 대부분의 텍스처는 이음새가 없도록 설계되어 큰 영역에서도 패턴이 보이지 않음
          + Three.JS에서 사용자 정의 셰이더를 만들어 추가 기능을 제공함
     * Triplanar Mapping
          + UV 맵 없이 메쉬에 텍스처를 적용할 수 있어 절차적으로 생성된 지형에 유용함
          + 간단하게 구현할 수 있으며, 다양한 메쉬에 적용 가능함
          + pow() 함수를 사용하여 가중치를 조정해 품질을 개선하고 성능을 최적화함
     * Hex Tiling
          + 이음새 없는 텍스처의 반복을 숨기는 알고리듬
          + Three.JS 프로젝트에 쉽게 통합할 수 있는 독립형 라이브러리로 포팅함
          + UV 맵이 필요하며, 성능 오버헤드가 큼
     * Depth Pre-Pass
          + 성능을 향상시키기 위해 장면을 두 번 렌더링하여 픽셀의 깊이를 기록함
          + 오버드로우가 많은 장면에서 성능을 30% 이상 향상시킬 수 있음
     * AI-Powered PBR Texture Synthesis
          + AI 생성 텍스처를 사용하여 장면의 품질을 높임
          + DeepBump와 Materialize를 사용하여 PBR 맵을 생성함
     * Volumetric Fog/Clouds
          + 장면에 구름이나 안개를 추가하는 셰이더를 개발함
          + LoD 노이즈 룩업을 사용하여 다양한 기능을 추가함
     * Meshes + Geometry
          + 런타임에 메쉬를 생성하고 변형하는 기술을 연구함
          + 주로 장식이나 배경 요소를 절차적으로 생성함
     * LoD Terrain
          + 노이즈 함수를 사용하여 지형을 생성하고, 카메라와의 거리에 따라 해상도를 동적으로 조정함
     * Procedural Mesh Processing + Manipulation Pipeline
          + 저폴리 메쉬를 절차적으로 세분화하고 변형하는 파이프라인을 구축함
          + 노멀 처리에 많은 노력이 필요함
     * Future Work
          + Constructive Solid Geometry(CSG)를 사용하여 메쉬를 병합하거나 잘라내는 작업을 계획 중임
          + Rust로 포팅하여 더 나은 이해를 목표로 함

GN⁺의 정리

     * 이 기사는 절차적 게임 개발에 유용한 다양한 기술과 도구를 소개함
     * Triplanar Mapping과 Hex Tiling 같은 텍스처링 기법을 통해 성능과 품질을 동시에 향상시킴
     * AI를 활용한 텍스처 생성과 Volumetric Fog/Clouds 셰이더는 장면의 현실감을 높임
     * Constructive Solid Geometry와 같은 미래 작업은 메쉬 변형에 큰 잠재력을 가짐
     * 비슷한 기능을 가진 프로젝트로는 Unity의 ProBuilder와 Houdini가 있음

        Hacker News 의견

     * 과거에 절차적 생성에 도전해본 경험이 있음
          + 특히 멋진 나무를 만들기 위해 시도했음
          + 기하학을 쉽게 연결하는 방법이 부족하다고 느낌
          + 두 개의 실린더를 만드는 것은 쉽지만, 이를 연결하는 것은 매우 어려움
          + 이론적으로 CSG가 이 틈새를 채울 수 있지만, 3D 형태로 모델링해야 해서 어려움
          + 두 개의 루프를 연결하는 루틴을 만들려고 했지만, 잘 작동하지 않음
          + 나중에 모듈형 절차적 생성 시스템이 자발적으로 작동하는 게임을 만들고 싶음
     * 좋은 지형 생성은 간단하지 않음
          + 세계 규모나 눈높이에서 모두 어려움
          + 단순한 접근 방식은 현실과 거의 닮지 않은 울퉁불퉁한 높이 맵을 생성함
          + Dwarf Fortress는 기본적인 중점 변위를 시작으로 많은 커스텀 작업을 함
     * 웹에서의 절차적 기술에 대한 훌륭한 글임
          + WIP 절차적 RPG 레벨 편집기에 관심이 있다면 https://github.com/gamedevgrunt/3D-Action-RPG-JavaScript를 확인해보길 권장함
     * 깊이 프리패스를 사용하는 데 혼합된 경험이 있음
          + 몇 번 시도했을 때 중간에서 고급 데스크탑 GPU에서 성능 향상을 크게 느끼지 못했음
          + 이유는 확실하지 않지만, 초기 Z 거부로 인해 픽셀 셰이더 호출이 절약되었기 때문일 수 있음
          + 일반적으로 불투명한 메쉬를 앞에서 뒤로 렌더링함
          + 공정하게 말하자면, 내 실험은 게임이 아닌 CAD/CAM 애플리케이션의 맥락에서 이루어졌음
          + 장면은 일반적인 게임 환경과 달리 최소한의 텍스처와 매우 높은 폴리곤 기하학을 가짐
     * 3D 아티스트로서 매우 흥미로운 기사였음
          + 이 주제에 대한 좋은 기사는 매우 드묾
          + Three.js를 시도해볼 예정임
"
"https://news.hada.io/topic?id=16107","LLM 양자화에 대한 비쥬얼 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LLM 양자화에 대한 비쥬얼 가이드

     * 대규모 언어 모델(LLM)은 일반 하드웨어에서 실행하기에는 너무 크고, 보통 매개변수 수십억 개를 가져서 대량의 VRAM을 가진 GPU들이 필요
     * 따라서 개선된 훈련, 어댑터 등을 통해 이러한 모델을 더 작게 만드는 데 점점 더 많은 연구가 집중되고 있으며, 이 분야의 주요 기술 중 하나는 양자화(Quantization)

Part 1: 대규모 언어 모델의 ""문제""

     * LLM(Large Language Model)은 포함된 매개변수의 수에 따라 이름이 붙여졌음
     * 이런 모델에는 일반적으로 수십억 개의 매개변수(대부분 가중치)가 포함되어 저장 비용이 상당히 많이 들 수 있음
     * 추론 중에 활성화는 입력과 가중치의 곱으로 생성되며, 마찬가지로 상당히 클 수 있음
     * 따라서 주어진 값을 저장하는 데 필요한 공간을 최소화하면서 수십억 개의 값을 최대한 효율적으로 표현하려고 시도함

  수치 값을 표현하는 방법

     * 주어진 값은 부동 소수점 숫자(실수)로 표현되는 경우가 많음
     * 이 값들은 ""비트""로 표현되며, IEEE-754 표준은 비트가 값을 표현하기 위해 기호, 지수, 가수(fraction) 중 하나의 기능을 나타내는 방법을 설명
     * 값을 표현하는 데 사용되는 비트가 많을수록 일반적으로 더 정밀해짐
     * 사용 가능한 비트가 많을수록 표현 가능한 값의 범위가 커짐

  메모리 제약

     * 700억 개의 매개변수를 가진 모델을 가정할 때, FP32(full-precision)를 사용한다면 모델을 로드하는 데만 280GB의 메모리가 필요
     * 따라서 모델의 매개변수를 나타내는 비트 수를 최소화하는 것이 매우 중요하지만, 정밀도가 감소하면 모델의 정확도도 일반적으로 감소
     * 정확도를 유지하면서 값을 표현하는 비트 수를 줄이는 것이 목표이며, 이것이 바로 양자화(quantization)가 등장하는 부분

Part 2: 양자화 소개

     * 양자화는 모델 매개변수의 정밀도를 높은 비트 폭(예: 32비트 부동 소수점)에서 낮은 비트 폭(예: 8비트 정수)으로 줄이는 것을 목표로 함
     * 비트 수를 줄일 때마다 원래 매개변수를 저비트 표현으로 ""압축""하기 위한 매핑이 수행됨

  일반적인 데이터 유형

    FP16

     * FP32에서 FP16(half precision)으로 가면 FP16이 취할 수 있는 값의 범위가 FP32보다 상당히 작아짐

    BF16

     * FP32와 유사한 값 범위를 얻기 위해 ""잘린 FP32""의 일종인 bfloat 16이 도입됨
     * BF16은 FP16과 동일한 양의 비트를 사용하지만 더 넓은 값 범위를 가질 수 있으며 딥러닝 응용 프로그램에서 자주 사용됨

    INT8

     * 비트 수를 더 줄이면 부동 소수점 표현 대신 정수 기반 표현에 가까워짐

  대칭 양자화

     * 원래 부동 소수점 값의 범위가 양자화된 공간에서 0을 중심으로 대칭 범위에 매핑됨
     * 부동 소수점 공간에서 0의 양자화된 값은 양자화된 공간에서 정확히 0임

  비대칭 양자화

     * 대칭 양자화와 달리 0을 중심으로 대칭이 아님
     * 최소값(β)과 최대값(α)을 부동 소수점 범위에서 양자화된 범위의 최소값과 최대값으로 매핑
     * 영점(zero-point) 양자화라고 불리는 방법 중 하나

  범위 매핑 및 클리핑

     * 벡터의 전체 범위를 매핑하면 이상치로 인해 모든 작은 값이 동일한 저비트 표현에 매핑되어 차별화 요소를 잃게 됨
     * 대신 특정 값을 클리핑(clipping)하도록 선택할 수 있음
     * 클리핑은 모든 이상치가 동일한 값을 갖도록 원래 값의 다른 동적 범위를 설정하는 것
     * 이상치가 아닌 값의 양자화 오차는 크게 줄어들지만 이상치의 양자화 오차는 증가

  보정(Calibration)

    가중치(및 편향)

     * 가중치와 편향은 모델을 실행하기 전에 알려진 정적 값으로 간주할 수 있음
     * 편향은 가중치보다 훨씬 적기 때문에 더 높은 정밀도(예: INT16)로 유지되며 양자화의 주요 노력은 가중치로 향함
     * 정적이고 알려진 가중치의 보정 기법에는 입력 범위의 백분위수를 수동으로 선택하거나, 원래 가중치와 양자화된 가중치 사이의 평균 제곱 오차(MSE)를 최적화하거나, 원래 값과 양자화된 값 사이의 엔트로피(KL 발산)를 최소화하는 것 등이 있음

    활성화

     * 입력은 LLM 전체에서 지속적으로 업데이트되며 일반적으로 ""활성화""라고 함
     * 이 값은 각 입력 데이터가 추론 중에 모델에 공급될 때마다 달라지므로 정확하게 양자화하기 어려움
     * 이 값은 각 은닉층 후에 업데이트되므로 입력 데이터가 모델을 통과할 때만 추론 중에 무엇이 될지 알 수 있음

Part 3: 사후 훈련 양자화(PTQ - Post-Training Quantization)

  동적 양자화

     * 데이터가 은닉층을 통과한 후 활성화가 수집됨
     * 이 활성화 분포는 출력을 양자화하는 데 필요한 영점(z)과 스케일 팩터(s) 값을 계산하는 데 사용됨
     * 데이터가 새 층을 통과할 때마다 프로세스가 반복됨. 따라서 각 층은 고유한 z와 s 값을 가지며 서로 다른 양자화 체계를 가짐

  정적 양자화

     * 추론 중이 아니라 미리 영점(z)과 스케일 팩터(s)를 계산
     * 이러한 값을 찾기 위해 보정 데이터 세트가 사용되어 모델에 제공되어 이러한 잠재적 분포를 수집
     * 실제 추론을 수행할 때 s와 z 값은 재계산되지 않고 모든 활성화에 대해 전역적으로 사용되어 양자화됨
     * 일반적으로 동적 양자화가 각 은닉층마다 s와 z 값을 계산하려고 하기 때문에 약간 더 정확하지만, 계산 시간이 늘어날 수 있음
     * 반면에 정적 양자화는 덜 정확하지만 이미 s와 z 값을 알고 있기 때문에 더 빠름

  4비트 양자화의 영역

     * 8비트 미만으로 내려가는 것은 비트를 잃을 때마다 양자화 오차가 증가하기 때문에 어려운 작업으로 판명됨
     * HuggingFace에서 일반적으로 공유되는 두 가지 방법인 GPTQ와 GGUF 탐색

    GPTQ

     * 4비트로 양자화하기 위해 실제로 가장 잘 알려진 방법 중 하나
     * 비대칭 양자화를 사용하고 각 층이 독립적으로 처리된 후 다음으로 계속되도록 층별로 수행
     * 층별 양자화 프로세스 중에 먼저 층의 가중치를 역 Hessian으로 변환하며, 이는 모델 손실 함수의 2차 도함수이며 각 가중치의 변화에 모델 출력이 얼마나 민감한지 알려줌
     * 간단히 말해서 층에서 각 가중치의 (역)중요도를 보여줌
     * Hessian 행렬에서 값이 작은 가중치는 이러한 가중치의 작은 변화가 모델 성능에 큰 변화를 초래할 수 있기 때문에 더 중요함

    GGUF

     * GPTQ는 전체 LLM을 GPU에서 실행하기에 좋은 양자화 방법이지만 항상 그런 용량을 가지고 있지는 않음
     * 대신 LLM의 모든 층을 CPU로 오프로드하기 위해 GGUF를 사용할 수 있음
     * 충분한 VRAM이 없을 때 CPU와 GPU를 모두 사용할 수 있게 해줌

Part 4: 양자화 인식 훈련(QAT - Quantization Aware Training)

     * 3부에서 훈련 후 모델을 양자화하는 방법을 살펴봤지만, 이 양자화는 실제 훈련 프로세스를 고려하지 않는다는 단점이 있음
     * 이것이 바로 양자화 인식 훈련(QAT)이 등장하는 부분. PTQ와 달리 QAT는 훈련 중에 양자화 절차를 학습하는 것을 목표로 함
     * QAT는 훈련 중에 양자화가 이미 고려되었기 때문에 PTQ보다 더 정확한 경향이 있음

  1비트 LLM의 시대: BitNet

     * BitNet은 모델의 가중치를 단일 1비트, -1 또는 1로 표현
     * 트랜스포머 아키텍처에 양자화 프로세스를 직접 주입하여 수행
     * 트랜스포머 아키텍처는 대부분의 LLM의 기반으로 사용되며 선형 레이어를 포함하는 계산으로 구성됨
     * BitNet은 이러한 선형 레이어를 BitLlinear라고 하는 것으로 대체

    가중치 양자화

     * 훈련 중에 가중치는 INT8에 저장된 다음 기본 전략인 부호 함수를 사용하여 1비트로 양자화됨
     * 본질적으로 가중치 분포를 0을 중심으로 이동시킨 다음 0의 왼쪽에 있는 모든 것을 -1로, 오른쪽에 있는 모든 것을 1로 할당

    활성화 양자화

     * 활성화를 양자화하기 위해 BitLinear는 행렬 곱셈(×)에 더 높은 정밀도가 필요하기 때문에 활성화를 FP16에서 INT8로 변환하기 위해 absmax 양자화를 사용

    역양자화

     * α(활성화의 절대값 중 가장 큰 값)와 β(가중치의 평균 절대값)를 추적했는데, 이 값들은 나중에 활성화를 FP16으로 역양자화하는 데 도움이 될 것임
     * 출력 활성화는 {α, γ}로 재조정되어 원래 정밀도로 역양자화됨

  모든 대규모 언어 모델은 1.58비트 이다

     * BitNet 1.58b는 이전에 언급된 스케일링 문제를 개선하기 위해 도입됨
     * 이 새로운 방법에서는 모델의 모든 단일 가중치가 -1 또는 1뿐만 아니라 이제 0도 값으로 취할 수 있어 삼진(ternary)이 됨
          + 흥미롭게도 0만 추가해도 BitNet이 크게 개선되고 계산 속도가 훨씬 빨라짐

    0의 힘

     * 0을 추가하는 것이 왜 그렇게 큰 개선인가? 이는 행렬 곱셈과 모두 관련이 있음
     * 1.58비트로 양자화된 가중치가 있으면 곱셈만 수행하면 되기 때문에 계산 속도를 크게 높일 수 있을 뿐만 아니라 특성 필터링도 가능

    양자화

     * 가중치 양자화를 수행하기 위해 BitNet 1.58b는 이전에 보았던 absmax 양자화의 변형인 absmean 양자화를 사용
     * 단순히 가중치 분포를 압축하고 절대 평균(α)을 사용하여 값을 양자화하며, 이들은 -1, 0 또는 1로 반올림됨
     * BitNet와 비교하여 활성화 양자화는 한 가지를 제외하고는 동일함. 활성화를 [0, 2ᵇ⁻¹] 범위로 조정하는 대신 이제 absmax 양자화를 사용하여 [-2ᵇ⁻¹, 2ᵇ⁻¹]로 조정됨
     * 1.58비트 양자화에는 (주로) 두 가지 트릭이 필요했음:
          + 삼진 표현 [-1, 0, 1]을 만들기 위해 0 추가
          + 가중치에 대한 absmean 양자화
     *

     ""13B BitNet b1.58은 지연 시간, 메모리 사용량 및 에너지 소비 측면에서 3B FP16 LLM보다 더 효율적""
     * 따라서 계산적으로 효율적인 1.58비트만 있기 때문에 경량 모델을 얻을 수 있음
"
"https://news.hada.io/topic?id=16090","SAM 2: 이미지와 비디오를 위한 Segment Anything ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SAM 2: 이미지와 비디오를 위한 Segment Anything

     * Segment Anything Model 2 는 이미지와 비디오에서 프롬프트 가능한 시각적 분할 문제를 해결하기 위한 모델
          + 이미지를 단일 프레임의 비디오로 간주하여 비디오로 확장함
          + 실시간 비디오 처리를 위한 스트리밍 메모리를 갖춘 간단한 트랜스포머 아키텍처를 사용
          + 사용자 상호작용을 통해 모델과 데이터를 개선하는 데이터 엔진을 구축하여 SA-V 데이터셋을 수집
     * 다양한 작업과 시각적 도메인에서 강력한 성능을 제공함
     * Segment Anything Video (SA-V) 데이터 셋도 공개
          + 50,583개의 다양한 동영상과 642,036개의 고품질 시공간 분할 마스크(Masklet)로 구성
          + CC by 4.0 라이센스

   Segment Anything Model(SAM) : 이미지에서 어떤 객체든 추출해주는 Meta의 AI모델
   SAM.cpp - Meta의 Segment Anything Model을 순수 C/C++ 로 구현

        Hacker News 의견

     * mIoU와 이미지 처리 속도 6배 향상에 관심이 있음
          + 속도 향상은 주로 효율적인 인코더 덕분임
          + 동일 이미지의 여러 세분화에서는 이점이 적을 수 있음
          + 원래 SAM과의 비교가 필요함
     * Segment Anything 팀에서 SAM 2 모델을 출시함
          + 실시간 객체 세분화를 위한 첫 통합 모델임
          + 코드, 모델, 데이터셋, 연구 논문, 데모를 공개함
          + 사용자들이 무엇을 만들지 기대됨
     * SAM 1을 다룬 적이 있음
          + SAM 2 논문 요약:
               o 256 A100 GPU로 108시간 동안 훈련됨
               o 훈련 비용은 약 $50k로 저렴함
               o 새로운 SA-V 데이터셋은 50k 비디오로 구성됨
               o 3단계 주석 부트스트랩 방식 사용
               o 메모리 주의 기능이 추가됨
     * 비디오 프레임을 분류하고 특정 프레임을 찾는 모델을 훈련하고 싶음
          + SAM-2를 기본 모델로 사용해도 되는지 궁금함
     * SAM 손실 함수에 큰 팬임
          + 감사의 뜻을 전함
     * 웹 데모가 매우 깔끔함
          + 각 신발을 개별 객체로 선택했을 때 모델이 겹쳐진 상태에서도 세분화함
     * SAM 첫 번째 모델이 가장 유용했음
          + SAM2를 사용해 보는 것이 기대됨
     * 연구 데모가 일리노이주와 텍사스주에서는 사용 불가함
          + 이유가 궁금함
     * 군사적 사용에 대한 우려가 있음
     * 놀라운 성과임
"
"https://news.hada.io/topic?id=16084","Mem0 - 개인화 AI를 위한 Long-Term 메모리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Mem0 - 개인화 AI를 위한 Long-Term 메모리

     * LLM을 위한 Self-improving 메모리 레이어를 제공하여 애플리케이션 전반에서 개인화된 AI 환경을 구현
     * 다단계 메모리: 사용자, 세션 및 AI 에이전트 메모리 유지
     * 적응형 개인화: 인터랙션에 기반한 지속적인 개선
     * 개발자 친화적 API: 다양한 애플리케이션에 간편하게 통합가능
     * 크로스 플랫폼 일관성: 모든 기기에서 일관된 동작
     * 관리형 서비스: 번거로움 없는 호스팅 솔루션 제공
"
"https://news.hada.io/topic?id=16114","Docker에서 QEMU로 실행되는 macOS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Docker에서 QEMU로 실행되는 macOS

Docker-OSX

  Docker-OSX 소개

     * Docker-OSX는 Docker 컨테이너에서 macOS를 실행할 수 있게 해주는 프로젝트임.
     * X11 포워딩, iMessage 보안 연구, iPhone USB 작동 등 다양한 기능을 제공함.
     * Linux와 Windows에서 macOS 보안 연구를 수행할 수 있음.

  커뮤니티 및 지원

     * Docker-OSX는 Discord와 Telegram 서버를 운영 중임.
     * 질문이나 아이디어를 공유할 수 있는 활발한 커뮤니티가 있음.
     * 개인적인 문의는 LinkedIn이나 Sick.Codes 웹사이트를 통해 가능함.

  저자 및 기여자

     * 이 프로젝트는 Sick.Codes가 유지 관리함.
     * 추가 기여자 목록은 GitHub에서 확인 가능함.
     * OSX-KVM과 KVM-OpenCore 프로젝트에 감사의 인사를 전함.

  빠른 시작 가이드

     * 비디오 설치 튜토리얼 제공.
     * Windows 사용자는 추가 노트를 확인할 것.
     * Catalina, Big Sur, Monterey, Ventura, Sonoma 등 다양한 macOS 버전을 지원함.

    Catalina

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  sickcodes/docker-osx:latest

    Big Sur

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  sickcodes/docker-osx:big-sur

    Monterey

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  -e GENERATE_UNIQUE=true \
  -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/…' \
  sickcodes/docker-osx:monterey

    Ventura

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  -e GENERATE_UNIQUE=true \
  -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/…' \
  sickcodes/docker-osx:ventura

    Sonoma

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  -e GENERATE_UNIQUE=true \
  -e CPU='Haswell-noTSX' \
  -e CPUID_FLAGS='kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on' \
  -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/…' \
  sickcodes/docker-osx:sonoma

    Catalina 사전 설치

docker pull sickcodes/docker-osx:auto
docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  -e GENERATE_UNIQUE=true \
  sickcodes/docker-osx:auto

  구형 시스템

    High Sierra

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  sickcodes/docker-osx:high-sierra

    Mojave

docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  sickcodes/docker-osx:mojave

  이미지 수동 다운로드 및 사용

     * Docker의 CDN이 느릴 경우 수동으로 이미지를 다운로드하여 사용할 수 있음.

wget https://images2.sick.codes/mac_hdd_ng_auto.img
docker run -it \
  --device /dev/kvm \
  -p 50922:10022 \
  -v ""${PWD}/mac_hdd_ng_auto.img:/image""; \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -e ""DISPLAY=${DISPLAY:-:0.0}"" \
  -e GENERATE_UNIQUE=true \
  -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/… \
  sickcodes/docker-osx:naked

  iPhone USB 패스스루

     * iPhone USB 패스스루를 위한 다양한 방법 제공.
     * 데스크탑 PC에서는 @Silfalion의 지침을 따를 수 있음.
     * 노트북에서는 usbfluxd를 사용하여 네트워크 스타일 패스스루 가능.

  성능 최적화

     * osx-optimizer를 사용하여 성능을 향상시킬 수 있음.
     * GUI 로그인 화면 건너뛰기, Spotlight 인덱싱 비활성화 등 다양한 최적화 옵션 제공.

  디스크 공간 증가

     * /var/lib/docker를 외부 드라이브로 이동하여 디스크 공간을 확보할 수 있음.
     * 자세한 튜토리얼은 Sick.Codes 웹사이트에서 확인 가능.

  기술적 세부사항

     * 다양한 macOS 버전 지원: High Sierra, Mojave, Catalina, Big Sur, Monterey, Ventura, Sonoma.
     * iPhone OSX KVM, 폴더 공유, USB 패스스루, SSH 및 VNC 지원.
     * X11 포워딩 및 QEMU + KVM 기반 실행.

  요구사항

     * 최소 20GB 이상의 디스크 공간 필요.
     * BIOS 설정에서 가상화 활성화 필요.
     * x86_64 KVM 호스트 필요.

  TODO

     * 보안 연구를 위한 문서화.
     * GPU 가속 지원.
     * virt-manager 지원.

  Docker 이미지

     * Docker Hub에서 Docker-OSX 이미지를 다운로드할 수 있음.

  Kubernetes 지원

     * Docker-OSX는 Kubernetes를 지원함.
     * Kubernetes Helm Chart 및 문서는 helm 디렉토리에서 확인 가능.

  지원

     * 작은 질문이나 이슈는 GitHub 이슈를 통해 문의 가능.
     * 전문적인 지원 서비스도 제공함.

  라이선스 및 기여

     * Docker-OSX는 GPL v3+ 라이선스를 따름.
     * 기여를 환영하며, 기여자 목록은 GitHub에서 확인 가능.

  유사 프로젝트

     * Dock Droid: Docker 컨테이너에서 Android 실행.
     * Docker-eyeOS: Docker 컨테이너에서 iOS 12 실행.
     * Bluebubbles.app: Docker에서 iMessage 리레이어 실행.

  면책 조항

     * Apple 보안 연구에 관심이 있다면 이 프로젝트가 유용할 것임.
     * Hackintosh, OSX-KVM, Docker-OSX의 법적 문제는 각자의 책임임.

GN⁺의 정리

     * Docker-OSX는 Docker 컨테이너에서 macOS를 실행할 수 있게 해주는 유용한 도구임.
     * 다양한 macOS 버전을 지원하며, 보안 연구 및 개발에 유용함.
     * 커뮤니티 지원이 활발하며, 다양한 설치 및 최적화 옵션을 제공함.
     * 비슷한 기능을 가진 프로젝트로는 Dock Droid와 Docker-eyeOS가 있음.

        Hacker News 의견

     * GPU 가속을 위해서는 PCI 패스스루를 통해 지원되는 dGPU(AMD RX 6xxx 이상)를 사용해야 함
          + Intel iGPU는 Comet Lake와 일부 Ice Lake까지 작동하지만, 최신 버전은 작동하지 않음
          + Apple Silicon 빌드의 MacOS는 당분간 에뮬레이션이 불가능할 것으로 보임
          + Intel VT-x가 AMD에 없기 때문에 AMD 호스트에서 가상화가 불가능함
          + 오래된 VirtualBox 버전으로 Docker를 에뮬레이션을 통해 작동시키는 방법이 있음
     * 관련 프로젝트:
          + Docker-OSX: Docker에서 macOS VM 실행
          + macOS in QEMU in Docker: QEMU에서 macOS 실행
     * Sick Codes와의 인터뷰에서 이 제품에 대한 접근 방식을 논의함
          + OSX-PROXMOX: Proxmox 홈 서버에서 유사한 기능을 제공하는 프로젝트
          + HP Z420 Xeon에서 사용 중이며, GPU 패스스루와 함께 매우 안정적임
     * 홈 서버에서 iCloud 동기화를 실행하는 것이 멋질 것 같음
          + 현재 iCloud를 홈 서버/NAS에 물리적으로 백업할 좋은 방법이 없음
     * 이 프로젝트는 현재 x86-64 Docker 이미지만 제공하며, aarch64는 제공하지 않음
     * iOS 빌드를 시도해보고 싶음
          + Unity, React Native 등을 사용하여 빌드 가능성을 탐색하고 싶음
          + 빌드 시간이 5배 더 걸리더라도 자유로움 측면에서 멋질 것 같음
     * QEMU가 컨테이너에서 실행되고, 그 안에서 macOS가 실행됨
          + 설치가 매우 간편하며 수동 설정 단계가 없음
          + macOS EULA를 명백히 위반할 가능성이 있음
          + Apple 소프트웨어는 Apple 브랜드 컴퓨터에서만 실행할 수 있음
          + 프로젝트를 다운로드하여 보관할 것을 권장하며, 법적 경고를 받을 수 있음
     * MacOS 이미지를 재배포하는 것이 라이선스에 의해 허용되는지 궁금함
          + 이 프로젝트가 Docker Hub에서 불법 복사본을 배포하는지 의문임
     * Intel 지원이 없는 최신 MacOS 버전이 출시되면 진행이 중단될지 궁금함
          + 이 컨테이너 안에서 Docker를 실행하여 MacOS를 MacOS 안에서 실행할 수 있는지 궁금함
     * ""USB 패스스루""라는 용어가 잘못 사용되는 것을 싫어함
          + 실제로는 ""USB over ethernet proxy""가 사용됨
          + 이는 일반적인 패스스루가 가지지 않는 여러 단점을 초래함
"
"https://news.hada.io/topic?id=16088","AI 스타트업들에게: 곡괭이와 삽을 팔지 말고, 직접 캐세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AI 스타트업들에게: 곡괭이와 삽을 팔지 말고, 직접 캐세요

     * AI가 모든 것을 변화시킬 것이라고 스타트업 업계에서는 믿고 있고, 새로운 파운데이션 모델의 급속한 발전과 놀라운 데모는 흥미로움
     * 하지만 새로운 기술 개발 속도, 법적 문제에 대한 불명확성, 모델의 일반적인 접근성, AI가 제기하는 고유한 상용화 과제로 인해 창업자들은 이 새로운 환경에서 어떻게 스타트업을 구축해야 할지 확신하지 못하고 있음

과거의 스타트업 전략이 새로운 AI 시대에 적용되기 어려운 이유

     * 많은 창업자들은 최신 기술 골드러시를 위한 도구를 구축하는 것이 승리하는 전략이라고 생각함
     * 이전 기술 물결에서는 다른 사람들이 최종 제품을 구축하는 데 도움이 되는 도구를 만드는 것이 안전하고 현명한 전략이었음
     * 하지만 이번에는 다르며, 지난 15년 동안 스타트업에 잘 작동했던 플레이북은 2024년 이후에는 성공하는 데 도움이 되지 않을 것임

SaaS는 솔루션 대신 도구를 판매하는 것

     * 지난 15년 동안의 B2B 소프트웨어 개발은 새로운 도구의 끊임없는 개발로 특징지어짐
     * 이는 대부분 마케터, CS 관리자, HR 담당자 및 기타 직원들이 인사이트를 얻고, 워크플로를 개선하며, 내부 및 외부 커뮤니케이션을 간소화하는 데 도움이 되는 포인트 솔루션이었음
     * 도구를 만드는 사람들조차도 새로운 도구가 있었음
     * Airtable 및 Shopify와 같은 수평적 로우 코드 앱은 중소기업과 사무직 근로자를 의사 엔지니어로 만들었음
     * 그 밑에는 앱 간 상호 연결을 쉽게 구축할 수 있는 Plaid 및 Zapier와 같은 또 다른 ""도구와 도끼"" 계층이 있었음
     * 또한 클라우드 제공업체의 부상으로 호스팅이 상품화되었음

AI 시대에는 솔루션을 직접 제공하라

     * 많은 창업자들이 AI 시대에 SaaS 플레이북을 복사하려고 하고 있음
     * 하지만 이들은 풀스택 비즈니스나 새로운 세대의 기술 지원 서비스에 대한 사고 방식을 재구성하는 것을 고려해야 함
     * 직원들을 위한 새로운 AI 기반 회계 소프트웨어 패키지를 기업에 판매하는 대신, 재무제표 소화, 의심스러운 항목 감사, 상세한 재무 보고서 작성을 위해 AI 도구를 핵심으로 하는 처음부터 구축된 회계법인을 상상해 볼 것
     * 또는 동일한 방식으로 새로운 로펌, 부동산 중개업체, 컨설팅 회사 같은 것을 상상해 볼 것
     * 수년 전 로펌을 혁신하려고 했던 Atrium은 단순히 너무 이른 시기였을 수 있음

기존 기업도 AI를 채택하지 않을까?

     * 이론적으로 기존 기업은 AI 도구를 도입하고 활용할 수 있음
     * 하지만 기존 조직이 근본적인 수준에서 재구성하는 데는 많은 노력이 필요함
     * AI가 침투함에 따라 많은 직원들이 자신의 책임을 방어하고 직업을 보호하려 할 것임
     * 채택 속도는 예상보다 느릴 수 있음
     * 이는 핵심에 AI를 두고 비즈니스를 설정하고 뒤처진 기업과 경쟁할 수 있는 기회를 만듦

AI 기반 풀스택 스타트업을 구축해야 하는 이유

     * 기존 기업이 AI의 잠재력을 완전히 채택하고 이해하는 것을 주저하는 것은 스타트업이 번성할 수 있는 기회임
     * 새로운 딜로이트나 맥킨지를 만드는 것은 쉽지 않음
     * 하지만 중소 규모 서비스 기업의 많은 고객은 이러한 브랜드 자본이 필요하지 않거나 감당할 수 없으며, 이는 스타트업에게 충분한 쐐기(Wedge)가 될 수 있음
     * 이런 고객에게 서비스를 제공하면, 시간이 지남에 따라 기존 기업의 신뢰와 브랜드 인지도 수준에 도달할 수 있는 새로운 세대의 서비스 비즈니스 기회를 창출할 수 있음

VC는 Tech-Enabled 서비스를 싫어하지 않나?

     * 역사적으로 풀스택 서비스 지향적 접근 방식은 창업자들 사이에서 인기가 없었음
     * VC는 Tech-Enabled 서비스 비즈니스에 투자하는 것을 좋아하지 않는다고 정확하게 믿음
     * 풀스택 솔루션은 실행하기 어렵고 마진이 낮으며 순수 소프트웨어 대신 더 많은 사람이 필요함
          + 하지만 AI가 그렇게 말하는 게임 체인저 기술이라고 믿는다면 이러한 반대는 더 이상 유효하지 않을 수 있음
          + 이전보다 훨씬 적은 인력만 필요할 수 있으므로 마진은 크게 개선될 것
          + 풀스택 솔루션은 위험한 베팅이지만 혼잡한 시장에서 501번째 삽을 팔려고 하는 것보다 더 위험하지 않음
          + 또 다른 도구가 되는 것은 이 새로운 세상에서 훌륭한 해자가 아님
          + AI를 처음부터 활용하여 일을 수행하는 새로운 엔드 투 엔드 솔루션을 구축해야 방어력을 확보할 수 있음
     * 물론 새로운 소프트웨어 회사를 위한 시장은 항상 존재함
          + 다만 창업자들이 브라우저 외의 대안을 고려해 보라는 제안을 드리고 싶을 뿐
          + 어떤 일을 하든 스타트업을 중심으로 생태계가 형성될 때까지 기다리지 말아야 함. 그런 일은 일어나지 않음
          + 대신 삽질을 시작할 것. 운이 좋으면 금을 발견할 수도 있음

   B2B보다 B2C를 지향하는 말인듯.

   기술자체가 도메인인 회사는 참 쉽지 않은 거 같아요

   회계 도구가 아니라 회계 서비스를 제공해야하고,
   분석 툴이 아니라 분석 서비스를 제공하라는 말씀이네요.
   AI가 진짜 유용하다면 기존 회계사들을 압도할테고, 아니면 곧장 망할테니.
   진짜 하이리스크, 하이리턴 전략이네요...

   “운이 좋으면 금을 발견할 수도 있음”
   이게 핵심이군요..?
"
