"https://news.hada.io/topic?id=17717","리눅스에서 Steam 클라이언트 안정성 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        리눅스에서 Steam 클라이언트 안정성 개선

  Steam 클라이언트 안정성 개선

     * 배경: 11월 5일 Steam 클라이언트 업데이트에서 Linux에서의 일반적인 충돌을 수정함. 이 중 가장 큰 영향을 미친 것은 setenv와 getenv 함수의 사용 방식 변경임.
     * 문제점: setenv는 Linux에서 안전하지 않은 API로, 멀티스레드 환경에서 사용 시 문제가 발생할 수 있음. getenv 호출 후 다른 스레드에서 SIGABRT와 같은 충돌이 발생할 수 있음.
     * 해결책:
          + 대부분의 setenv 호출을 제거하고, 프로세스 생성 시 execvpe를 사용하여 환경을 전달하도록 리팩토링함.
          + getenv 의존도를 줄이기 위해 호출을 캐싱함.
          + 남은 setenv 사용 사례에 대해 '환경 관리자'를 도입하여 시작 시 충분히 큰 값 버퍼를 미리 할당함.
     * 결과: 이러한 변경으로 SIGABRT 발생 빈도가 크게 감소함. 그러나 완벽한 해결책은 아니며, 외부 라이브러리가 setenv를 호출할 경우 여전히 충돌 위험이 있음.
     * 향후 계획: glibc에서 이 문제를 해결하기 위해 비동기 신호 안전성을 유지하면서 envp 사용과 동기화하는 방법을 연구 중임. 이 작업은 복잡하지만, 장기적으로 POSIX 사양에서 벗어나지 않는 범위 내에서 해결책을 제안할 계획임.

        Hacker News 의견

     * Red Hat의 그래픽 스택 안정성 문제로 인해 패치가 검토 중임
          + getenv의 스레드 안전성 수정이 glibc 2.41에 포함될 가능성이 높음
          + setenv는 이미 환경 문자열을 해제하지 않기 때문에 처리하기 쉬움
          + unsetenv는 동시성 문제로 복잡함
          + getenv에 잠금을 도입하지 않으려는 이유는 비동기 신호 안전성을 유지하기 위함임
          + vfork+execve로 인해 메모리 누수를 피하기 어려워 환경 처리 수정이 논란이 있음
     * Linux에서 Steam이 잘 작동하는 것에 감사함
     * 환경 변수를 부팅 시 읽고 setenv를 사용하지 않는 것이 최선의 방법임
          + 새로운 프로세스를 생성할 때는 현재 환경을 복제하여 새로운 값을 업데이트해야 함
          + getenv/setenv를 IPC 메시징 메커니즘으로 사용하는 것은 문제가 될 수 있음
     * setenv가 Linux API인지에 대한 의문이 있음
          + setenv는 POSIX에 정의되어 있으며 Linux 커널이 아닌 사용자 공간에서 구현됨
     * 프로그램이 한 스레드에서 setenv를 호출하고 다른 스레드에서 효과를 원할 경우가 있는지에 대한 질문이 있음
          + GLIBC는 위험한 함수들을 잘 문서화하고 있어 잠금/복사를 추가할 수 있음
     * Steam이 연결이 없다고 불평하는 문제가 있음
          + '재시도' 버튼을 여러 번 누르면 작동하지만 불편함
     * Steam 클라이언트와 Linux 프로그래밍에 대한 통찰력이 흥미로움
          + 릴리스 노트가 자세하지 않은 이유를 이해하지만, ""일반적인 충돌 수정""은 과소평가된 표현임
     * glibc에서 문제를 해결하려면 기능의 절충이 필요할 수 있음
          + 장기적으로 합리적인 제안을 할 수 있다면 추구할 수 있음
     * Steam 클라이언트의 렌더링 성능이 마우스가 창 안에 있을 때 좋지 않음
     * Linux Steam 클라이언트에 오랜 기간 지속된 버그가 있음
          + 하루 이상 Steam을 실행하면 창 핸들이 부족해져 새로운 그래픽 애플리케이션/창을 열 수 없음
          + Steam Chat을 사용하면 문제가 더 빨리 발생함
          + 이 문제는 GitHub에 문서화되어 있지만, 이유 없이 닫힘
          + 개인적으로 매일 Steam을 재시작함
          + KDE/Wayland와 X11에서도 이 문제를 관찰함
"
"https://news.hada.io/topic?id=17680","IronCalc – 오픈소스 스프레드시트 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       IronCalc – 오픈소스 스프레드시트 엔진

     * 고급 오픈 소스 스프레드시트 솔루션을 제공하여 모든 사용자가 쉽게 접근할 수 있도록 함
     * MIT/Apache 2.0 라이선스로 제공되어 프로젝트에 통합하고, 필요에 맞게 커스터마이즈하며, 제한 없이 공유 가능
     * IronCalc의 특징
          + 다양한 기능 지원 및 Excel 호환 제공
          + 빠르고 가벼움, 모든 기능에 대한 테스트, 국제화 지원
     * IronCalc의 필요성
          + 스프레드시트는 40년 이상 다양한 애플리케이션에 필수적이었음.
          + 많은 기존 솔루션이 비싸거나 계정이 필요하거나 성능 및 안정성 문제를 겪음.
          + IronCalc는 이러한 문제를 해결하고 다양한 요구를 충족하는 강력한 오픈 소스 스프레드시트 엔진을 제공함.
     * IronCalc의 사명
          + 미충족 요구 해결: SaaS 개발자를 지원하여 더 나은 오픈 소스 대안을 제공함.
          + 자동화된 스프레드시트 처리: 대규모 시나리오에 필요한 성능과 기능을 제공함.
          + 글로벌 협업: 누구나 온라인에서 스프레드시트를 사용하고 쉽게 공유할 수 있도록 함.
          + 블로그 통합: 블로거가 인터랙티브 스프레드시트를 게시물에 삽입할 수 있도록 함.
     * 코드 이상의 목표
          + 연구 및 개발: 스프레드시트 엔진에 대한 개방형 연구를 촉진함.
          + 커뮤니티 및 협업: 협력 환경을 조성하여 아이디어와 혁신이 번창할 수 있도록 함.
          + 지식 기반 구축: 차세대 스프레드시트 개발자를 위한 도구와 지식을 제공함.

   심플하고 퀄리티가 괜찮아보입니다.
   단, 한글 입력 시 처음 입력하는 문자가 동일한 위치의 영문 알파벳으로 표기되는 버그가 있네요.

   Iron 은 Implementation Running On .NET. 인데 말이죠 ㅋㅋ

        Hacker News 의견

     * Ironcalc UI를 사용하여 관리자가 공식을 생성할 수 있는지에 대한 질문이 있음. 서버에서 공식을 실행하여 다른 소스의 입력을 기반으로 결과를 얻는 것이 가능한지 궁금해함. Rust로 이미 실행 중인 커스텀 코드가 있지만, 관리자가 고급 공식을 만들고 이를 서버 코드로 변환하는 데 시간이 걸림. 이 작업을 지원하거나 가능할지에 대한 문의가 있음
     * 프로젝트 소유자가 자신의 프로젝트가 여기에 소개된 것에 대해 놀라워하며 질문에 답변하겠다고 함
     * Ironcalc가 Excel을 대체할 수 있는 가능성을 지닌 프로젝트로 평가됨. Excel과 호환되고, 성능이 뛰어나며, 확장 가능하고, 무료로 브라우저에서 실행 가능함. Emacs 수준의 편집기가 될 수 있을 것이라고 주장함. 학생들에게 공유할 예정임
     * 성능 최적화를 위해 캐시된 계산 체인을 사용하는지, 변동 함수도 고려하는지에 대한 질문이 있음
     * Ironcalc는 React 앱과 Rust 백엔드를 가진 스프레드시트 엔진으로, 빠른 반응 속도에 감명받았다고 함. Google Sheets나 Excel만큼 기능이 풍부하지는 않음
     * Iron이라는 접두사가 이제 Rust를 의미하는 것이 흥미롭다고 언급함. 과거에는 .NET을 의미했음
     * Ironcalc를 앱 보고 시스템에 추가하고 싶은 충동이 생겼다고 함
     * 큰 값이나 임의의 정밀도에 대한 댓글을 남겼으며, Firefox에서 값을 붙여넣을 때 오류가 발생한다고 함
     * 이 프로젝트의 성공을 기대하고 있으며, Microsoft Excel의 VBA와 같은 스크립팅 언어를 지원할지 궁금해함
     * Ironcalc를 사용해본 결과, 기본 기능 중 일부가 없다고 함. 예를 들어, 행이나 열 헤더를 클릭하여 전체를 선택하거나 두 열 사이의 크기 조정기를 더블 클릭하여 열을 콘텐츠 길이에 맞게 자동 조정하는 기능이 없음
"
"https://news.hada.io/topic?id=17722","AI를 활용한 소매업의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI를 활용한 소매업의 미래

   데이터 활용과 공급망 관리 - AI는 고객 구매 기록과 재고 데이터, 고객 피드백 등을 분석하여 공급망 및 재고 관리를 개선히며 도난 방지와 고객 서비스 품질도 높일 수 있다.

   동적 가격 책정 - 온라인 소매업체는 실시간으로 수요, 경쟁, 고객 행동 등을 고려한 가격 조정을 통해 수익을 극대화할 수 있다.

   오프라인 매장 혁신 - AI는 자동 결제와 재고 관리 기술을 통해 매장 운영 효율성을 높이며, 컴퓨터 비전을 활용해 매장 레이아웃과 쇼핑 동선을 최적화한다.

   고객 지원 및 hyperpersonalization - AI 챗봇은 24시간 다국어 고객 지원이 가능하며, 초 개인화된 추천으로 고객 만족도를 높인다.

   시각 검색과 인벤토리 관리 - 고객이 이미지를 통해 제품을 검색하거나 설명만으로 찾을 수 있는 기능을 지원하며, 컴퓨터 비전을 통해 재고 오류를 줄인다.

   사기 예방과 안전 - AI는 거래 패턴과 고객 행동을 분석해 사기 활동을 감지하고, 도난을 예방하는 데 기여한다.

   공급망 최적화 - AI는 재고 예측과 물류 경로 조정 등으로 운영비를 절감하고 효율성을 높인다.
"
"https://news.hada.io/topic?id=17607","그냥 자바를 쓰세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               그냥 자바를 쓰세요

     * 내가 가장 좋아하는 언어는 파이썬. 그럼에도 불구하고 나는 모든 곳에 - 간단한 스크립트까지 - 자바를 사용한다.
     * 몇 가지 경험들:
          + 자바 베이스인 회사에서 테스트 시나리오를 자바스크립트로 작성하였음. 하지만 스택 트레이스 추적이 어렵고, 자바랑 자바스크립트 사이 브릿지 코드를 작성하느라 괜한 수고를 했음.
          + 로그를 json 포맷으로 저장하고 있었는데, 동료 개발자가 이 로그를 다루는 logcat이라는 프로그램을 만듦. 그 프로그램에 만족했지만, 이후 비슷한 프로그램을 자바로 만들자 10배 이상의 성능 향상을 보였음.
          + 자바에 대한 풍부한 경험과 자료 덕분에, 웹 서비스를 만드는 점에서 파이썬보다 자바가 빨랐음. 엄밀히 말하면 이건 한 언어를 사용함에 따른 이점임.
     * 자바에 대한 가장 뜨거운 논쟁은 verbose(장황함). 하지만 이건 전혀 단점이 아님. 아래의 두 코드를 보라.

// java
Map<String,User> userIdMap = new HashMap<String,User>();
// python
userIdMap = {}

     * 하지만 실제로 파이썬 코드는 아래처럼 작성되어 있을 가능성이 더 많다. (그렇지 않다면, 정말 유지보수하기 힘들 것이다)

# Map from user ID to User object.
userIdMap = {}

     * 즉, 동적 타입 언어를 쓰는 것은 30분만에 멋진걸 만들기 위해 14일 이후의 생산성을 희생하는 것과 같다.
     * 스택오버플로우는 ASP.NET 을 써서 (2010년에) 5대의 서버로 60,000,000 페이지뷰를 버텼다.
     * 단위 테스트의 예시를 보자. 단위 테스트를 작성하고 유지보수하는 것은 시간을 소모한다. 특히, 타입으로 간단히 확인할 수 있는 예외사항들은 동적 타입 언어의 유닛 테스트로 잘 잡히지도 않는다 (예: 파서)
     * (파이썬을 쓰지 않는 이유 중 하나를 추가하자면) 즉석 해결책(quick hack)은 점점 커져서 매우 중요한 툴이 되는데, 그걸 재작성할 여유는 없어서 결국 쓸 때마다 퍼포먼스와 유지보수에 허덕이게 된다.
     * 마지막으로, 다른 정적 타입 언어들 대신 자바를 선호하는 이유들
          + C/C++는 내 업무에 적용하기 어려움
          + C#은 크로스 플랫폼 지원이 부족함
          + Scala는 너무 복잡함
          + D, Go 같은 다른 언어는 내 업무에 투입하기엔 너무 새 것임


     * 제가 이 글을 긱뉴스에 가져온 몇 가지 이유가 있습니다:
          + ""난 자바가 진짜 좋아!""라는 글을 처음 봐서 신기했습니다 (제목만 보고 반전이 있을 줄 알았는데...)
          + 본인만의 (자바로 만든) 공구상자를 가지고 있다는 점이 재밌었습니다. 뭔가 주머니에서 주섬주섬 고대무기를 꺼내는 노인의 이미지가 생각났어요.
          + 저는 개인적으로 자바스크립트와 파이썬을 많이 좋아합니다. 그러나 얼핏 보면 이 언어들도 '타입을 어떤식으로든 도입' 쪽이 대세로 느껴집니다 (typescript for javascript, typing/mypy for python). 이런 상황에서, 이 글을 보니 제가 (타입을 전혀 강제하지 않는 방식으로) 정적 타입 언어를 쓰는게 약간은 자기만족에 가깝지 않나 하는 생각이 들었습니다.
     * 저자는 자바와 파이썬에 대한 경험을 갖고 있어서 그 두 언어를 직접적으로 비교했지만, 굳이 그렇게 한정지어 생각할 필요는 없는 것 같습니다. 보다 넓은 관점에서 정적 타입과 동적 타입 언어에 대해 여러분은 어떤 생각을 가지고 계신가요?

   PS. 특정 언어를 무의미하게 비하하지는 맙시다 :D

   너무 개인적인 경험이겠지만 자바는 언어보다 jvm 이 가장 문제라고 생각합니다.
   여러 버전의 jvm 에서 메모리 관리 못하는 것을 너무 많이 겪었어요.

   그럼 pandas, numpy 도 자바로 만들어 쓰시오. 저런 주장을 하는 자는 가까이 두면 안됨.

   자바는 웹벡엔드에 쓰고 파이썬은 ai에 쓰죠
   성능따질거면 러스트 써야죠 뭐 다아는 얘기 아닌가요?
   근데 앞으로 ai비중이 높아질 전망이라 자바도 버릴 때
   된거 아닌가? 라고 생각됨 우리나라는 뒤쳐지면 안된다
   라는 마인드가 많거든요 ㅎㅎ

   AI가 수요가 많아지고 일반 REST API나 단순 CRUD 작업이 대체되어 그런 시스템을 더 이상 만들지 않는다면 자바를 버릴 수도 있겠죠
   또한 프로젝트가 하나의 언어로 구성되지 않는 경우도 있기 때문에 언어와 프로젝트의 목적을 일대일대응 시킬수도 없다고 생각합니다. 프로그래밍 인터페이스가 파이썬이고 성능이 중요한 부분은 네이티브 코드를 쓰는 경우가 일반적이니까요. 우리나라에서 그런 식으로 프로젝트를 구성하는 경우는 잘 없겠지만요

   소개글이 좀 아쉽습니다. 원문이 쓰인 날짜를 먼저 알려주셨다면, 여기 있는 분들 반은 어느정도 납득하셨을텐데...

   저도 다른 분들 댓글 보고 눈치챘네요.

   하지만 저는 최근에 쓰여졌다고 지레짐작했고, 내용을 읽는데에 전혀 어색함을 느끼지 못했습니다. 적어도 저에겐 여전히 설득력이 있는 글입니다.

   그것과 별개로 날짜는 한번씩 신경쓰겠습니다 ㅋㅋ

   저는 오라클(jvm)보다 구글(v8)을 믿습니다.

   저도 정적 타입 언어를 선호합니다.
   동적타입언어가 편한 부분은 있지만, 프로덕션 환경에서 유지보수가 힘들어지는 경우가 종종 있네요.
   그리고 동적타입언어들은 보통 설계철학이 ""간단한 코드 작성""을 목표로 하는 경우가 많아 언어 차원에서 암시적으로 관리해주는 것들이 많은데, 이 때문에 최적화할 여지가 적을때도 많습니다.

   결국 구현 편의성 vs 최적화 여지가 많음 이 둘 사이에서 개발환경에 맞게 고민하고 선택하는게 좋을 것 같네요.

   10년전글 ㄷㄷ

   그러게요 ㅋ

   자바를 떠나고 내 삶이 평온해졌습니다.

   스택오버플로우 서베이에서 자바의 인기 순위가 계속 떨어지고 있는건 다 그만한 이유가 있죠.
   유독 한국에서는 그놈의 정부프레임워크를 스프링으로 못박어 버리는 바람에 취업할때 쓸만하지만,
   서구권에서 레거시 말고, 새로운 프로젝트를 시작할때 자바를 선택하는건 거의 사라지고 있는 듯

   그만한 이유가 있는건 맞는데 그 이유를 다르게 생각하시는것 같네요.

   TIOBE 사이트에서도 개발언어 순위를 참고용으로만 봐야하고 시장 점유율 또는 인기랑 직접적인 관련은 없다고 언급돼있습니다.

   결론은. 파이썬이 압도적 점유율로 1위인데 시장에 나온 툴이 있나요?
   가장 흔히 접하는건 C/C++과 닷넷, 그리고 자바(코틀린) 및 swift 입니다.

   질문과 검색이 많다고 많이 쓰는 언어는 아닌거죠.
   파이썬은 전공을 하지않아도 누구나 쓸수있는 언어입니다.
   인기가 많은걸 부정할순 없지만 개발 시장에선 얘기가 다르죠.

   인스타그램은 백엔드에 파이썬을 사용하고 있습니다.

   '시장에 나온 툴'이라는 게 어떤 의미인지 조금 불명확하지만... 장고, FastAPI, PyTorch, NumPy, Pandas 등등 툴은 충분하지 않나요...?

   제목보고 댓글부터 기대하고 들어옴 ㅋㅋㅋ 요즘은 언어에 기대는 폭이 넓어졌죠

   비용문제만 한정하면 자바는 메모리 사용때문에 클라우드에서 비용이 많이 나가더라구요. 정적언어로 100MB,200MB 메모리 필요한 프로그램이 자바로 작성하면 1G,2G 필요한 경우가 허다하구 경량쓰레드는 라이브러리 호환성때문에 안되는 경우가 많더라구요.

   자바도 정적언어입니다만... 메모리 문제는 가비지 콜렉터나 JVM에 해당하는거고 말씀하신 ""정적언어로 100MB,200MB 메모리 필요한 프로그램""은 C, C++ 같은 네이티브 언어에 해당하는 얘기일 듯 합니다.

   환각 죄송합니다. ㅠㅠ java도 정적 언어 맞습니다. 클라우드에서 이런저런 비용 합치면 메모리 1G당 3만원 정도 생각해야 되서 자바로 개발하는 서비스는 매우 비싼 비용이 지출되더라구요.

   예외가 존재하면 동적 타입 언어입니다. 별개로 타입 시스템과 메모리 사용이 별개라는 논점엔 동의합니다

   말씀하신 예외의 의미가 너무 넓게 와닿는데 조금만 자세히 설명해주실 수 있을까요?
   제가 아는 정적/동적 타입 언어의 정의는 변수의 타입이 컴파일 타임에 정해져있고 그걸 바꿀때 명시적으로 해야하면 정적 타입 언어이고, 동적 타입 언어는 런타임 시점에 얼마든지 변수의 타입을 정할 수도 있고 암시적으로 바꿀 수도 있는 언어였습니다.

   런타임에 다운캐스팅을 수행한다거나 하는 상황을 마주하면 자바는 런타임에 타입 체크를 해야합니다. 이런 이유로 자바가 동적타입이고, 이때 발생하는게 예외죠
   근본적으로 이 간극이 없다면 예외를 예외라고 부를 필요가 없습니다. throw는 throw하는 객체를 전역변수에 담아두고 goto하는 패턴의 문법설탕이 되겠죠

   말씀하신것과 유사하게 타입체크를 런타임에 수행하는 언어를 동적타입이라 부릅니다. 하지만 이건 프로그램에서 다뤄지는 모든 값에 대한 얘기입니다. 자바 글이니 자바를 예로 들면, 자바 코드는 컴파일타임에 타입체크 되지만 이건 그 변수에 대응될 값이 변수의 타입과 일치해야한다는 중요한 암시를 내포하고 있습니다.

   타입체크를 런타임에 한다고 동적타입이면 C도 동적타입 언어 인가요? void포인터라는 개념이 있는걸로 아는데 둘간의 어떤 차이가 있는지요

   어떤 C컴파일러가 자료형 검사를 코드에 끼워넣고 자료형이 틀렸을때 명시적인 오류를 발생시키나요? 그런 구현체가 있으면 예를 하나만 들어 주십시오

   C는 그 과정에 타입체크랄게 없습니다. 부동소수 자료를 정수로 읽는다고 아무 문제가 없잖아요? 동적타입인게 아니고 그냥 위험한거죠

     타입체크를 런타임에 한다고 동적타입이면 C도 동적타입 언어 인가요?

   네 C가 타입체크를 런타임에 하면 동적타입 언어입니다.
   그렇지 않기 때문에 정적 타입입니다.

   void 포인터는 그냥 원래 자료형을 알 수 없는 raw 포인터입니다. 해당 포인터가 가르키는 주소에 어떤 타입이 있는지는 알 수 없습니다.

   제 지론은 익숙한 언어가 최고라는 것입니다.

   동의합니다. 팀이나 조직에서 사용하는 언어를 벗어나기도 쉽지 않은 것 같습니다.

   업무 내용이나 배정이 분리되는 여러 가지 이유 중에 언어가 추가돼서 특정 인원에 대해 업무 과중이 발생하고 인원 변동시 업무 진행이 안됩니다. 채용에도 영향을 미치는 요소라서 기술 스택 선정은 신중을 기해야 한다고 생각합니다

   다만 반대로 익숙하다는 이유로 채용 풀이 적거나 채용 후 별도 학습이 필요한 언어를 고수한다면 그것도 문제긴 하겠죠

   C#이 크로스플랫폼이 왜 부족한가요. 요즘 대부분의 닷넷서버앱을 리눅스서버에 배포해요.
   파이썬은 애초에 비교대상이 아니고, 코틀린, C#에 비해서 장황하고 필요한 기능들이 많이 없는건 맞는것같아요.

   아 10년전 글이군요. 지금은 상황이 많이 바뀌었습니다

   C#도 가상머신을 쓰는 언어라 크로스 플랫폼 지원이 진작에 나왔어야 됐지만 제가 알기로는 극 최근에 나온걸로 알고있고 그렇기 때문에 윈도우가 아닌 타 OS에 돌릴수는 있다 정도의 인식이 당분간 지속될거 같네요.
   게다가 365일 수행되는 서버위주의 리눅스 환경이면 해당 시스템에 10년 이상 안정성이 검증된 타 언어보다 충분히 검증되지 않은 닷넷을 꺼려하는것도 사실입니다.
   그런의미에서 크로스플랫폼이 부족하다고 말하는게 아닐까요

   그런데 안정성이 검증되는 기준이 대체 무엇인가요? 단순히 사용 기간을 말씀하시는건지 저는 이해가 가지 않아서요.

   10년전 글이니 .net core가 태동한지 얼마지나지 않아 글이 저렇게 쓰인겁니다.
   이미 닷넷 어플리케이션들은 리눅스, 맥에서 안정적으로 잘 동작합니다.

   moderator | 사이트 이용법에 맞지 않아 삭제되었습니다.

   moderator | 사이트 이용법에 맞지 않아 삭제되었습니다.

   python식 간결한 문법에 정적 타입 붙은 언어같은거 없나 찾아보다가 우연히 GDScript를 발견했는데, 이건 보편적으로 사용하긴 힘들다는점이 너무 큰 단점이에요.
   기회가 되신다면, godot을 통해서 작은 프로젝트를 진행해보시고, GDScript를 맛봐보시는걸 추천드려요.

   저는 코틀린을 접하곤 자바 혐오증 걸렸습니다...

   자바는 어떤 기능이 필요할 때마다 검증된 정답이 있다는 인상을 받았습니다.

   그게 자바를 쓰는 주된 이유입니다.

   그냥 코틀린을 쓰세요.

   안그래도 (저도 코틀린 유저로서) 메일로 코틀린에 대한 의견을 여쭤봤는데, 써본적이 없어서 경험을 말하기가 어렵다고 답장해주셨습니다.

   저는 정적타입 언어를 좋아합니다. 생각을 해야 할 필요성을 줄여줘서 그 시간에 다른걸 생각할 수 있거든요.

   자바는 정말 독특한 지위에 있는 언어죠. 자바를 마지막으로 업무에 사용했던게 대략 10여년 전이지만 지금도 어떤 프로그램을 취미가 아닌 업무로 개발해야 한다면 1순위로 고려할 언어 목록에 들어가 있습니다.

   지금 업무에 쓰는 주 언어는 Ada와 C언어지만 개인적으로 또는 팀 내에서 사용할 도구들은 주로 PowerShell로 짭니다. 그런데 작성하다가 시간이 조금만(5분만...) 지나면 ""이 변수가 무슨 타입이었더라?""를 생각하고 있더라구요. 그래서 요즘엔 타입을 꼭 명기하고 있습니다. (PowerShell은 변수 정의에 타입을 지정할 수도 있고, 생략하고 동적으로 사용할 수도 있습니다)

   저는 C도 별로 좋아하지 않아요. Ada였다면 컴파일러가 걸러줬을 타입 관련 오류를 C는 전혀 잡아주지 못하거든요. C 같은 문법에 Ada의 타입 시스템을 지원하는 언어가 있으면 좋겠다는 생각을 종종 합니다.

   Javascript와 Python은 정이 안 가네요. Perl이나 Shell Script는... 생각하고 싶지도 않네요.

   C언의 기본철학 '프로그래머를 믿어라' 때문에 어쩔 수 없는거 같네요..

   아, 그리고 저는 자바는 좋아하지만 Maven은 싫어합니다.
   좋았던 옛 시절에는 Ant로 모든걸 할 수 있었다구요!

   자바에 레코드, 패턴매칭이 추가되는 등 천천히 신식 언어를 따라가고는 있어서 그나마 다행이란 생각이 듭니다

   자바가 레퍼런스가 많아서 좋긴한데, 단지 그것 뿐이면 C++이 아닐 이유는 뭘까 싶네요.
   자바의 장점 이야기가 좀 더 있었으면 좋았겠어요.

   제가 주로 c++을 사용하는 지라 c++을 예로 들었을 뿐입니다. 저도 java는 좋은 언어라고 생각하는데, 제가 지적하고 싶었던 건, 저 원 포스팅에 java의 장점에 대한 이야기가 부족하다는 것이었어요.
   java 너무 좋아, 라고 적었으면 java의 장점 이야기가 메인이 되어야 하는데, 타 언어에 대한 비판이 메인인 것 같아서요.
   의견 주신대로 java의 jvm은 굉장히 좋다고 생각합니다.

   전적으로 동의합니다. 굳이 자바로 한정지어서 얘기하지말자는 disclaimer는 그런 의도였습니다. 썩 전달은 안된듯 합니다만..

   비교군이 자바와 C++인점에서 뭔가 신뢰도가 확 떨어지네요 ㅋㅋ

   자바는 jvm상에서 돌아가니 로컬과 머신 환경을 동일하게 세팅이 가능하죠. C++로 모든 개발자와 머신 환경을 동일하게 만드려면 상당한 시간이 들겁니다. 유지도 어렵고...

   원 저자는 단지 C++을 적용하기 어려운 업무여서 자바를 쓰는것 같아요. 아마 파이썬과 C++중에 골라야 한다면 C++을 선택하지 않았을까요?

   fix: ""마지막으로 다른 정적 타입 언어들이 아닌 이유들"" -> ""마지막으로, 다른 정적 타입 언어들 대신 자바를 선호하는 이유들""

   토론이 과열되고 있습니다.
   반론이 있다면 그 내용만을 적어주세요.
   사이트 이용법에 어긋나는 댓글은 삭제 처리하였습니다.
   또한 이용법에 맞지않는 활동이 반복적인 아이디를 차단하였으니 참고하시기 바랍니다.
   건전한 토론을 부탁드립니다.

   파이썬을 하다가 자바를 처음 봤을 때는 정말 장황하다고 느껴졌는데 요즘 파이썬에 완전한 타입 힌트를 추가하기 위해 필요한 코드들을 보면 딱히 그렇지도 않은 것 같습니다 ㅋㅋ 자바의 아쉬운 점은 오히려 메서드명을 엄청나게 길게 지으려고 하는 네이밍 컨벤션인 것 같아요.

   June 1, 2014

   뗄감에 불 잘붙네.. 개추

   제가 원한 불길이 아니예요 ㅠ

   따뜻..하네요..
"
"https://news.hada.io/topic?id=17632","프라이빗 클라우드 컴퓨트 보안 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          프라이빗 클라우드 컴퓨트 보안 가이드

     * 보안 가이드 탐색
          + Private Cloud Compute Security Guide는 Apple Intelligence의 복잡한 모델을 클라우드에서 처리하면서도 보안과 프라이버시를 유지하는 방법을 설명함.
          + PCC는 Apple의 기기 보안 모델을 클라우드로 확장하여 사용자가 보안과 프라이버시를 희생하지 않고 복잡한 모델을 활용할 수 있게 함.
     * 핵심 요구 사항
          + 상태 없는 계산: PCC는 개인 사용자 데이터를 사용자 요청을 처리하는 데만 사용해야 하며, 응답 후에는 데이터에 접근할 수 없어야 함.
          + 강제 가능한 보장: PCC 시스템의 보장을 분석하고 제한할 수 있어야 함.
          + 특권 런타임 접근 금지: PCC는 Apple의 사이트 신뢰성 직원이 프라이버시 보장을 우회할 수 있는 특권 인터페이스를 포함해서는 안 됨.
          + 비대상성: 공격자는 특정 PCC 사용자의 개인 데이터를 타겟으로 삼지 않고 전체 PCC 시스템을 광범위하게 공격해야 함.
          + 검증 가능한 투명성: 보안 연구자들이 PCC의 프라이버시 및 보안 보장이 공개된 약속과 일치하는지 높은 신뢰도로 검증할 수 있어야 함.
     * 하드웨어 및 소프트웨어
          + 신뢰의 하드웨어 루트: 하드웨어 무결성과 소프트웨어 기반을 통해 보안을 강화함.
          + 소프트웨어 계층화: 요청 처리 및 검증 가능한 투명성을 위한 소프트웨어 구조를 설명함.
     * 요청 처리
          + 요청 흐름: 요청 처리의 흐름과 검증된 요청 처리 방법을 설명함.
          + 상태 없는 추론: 상태 없는 방식으로 데이터를 처리하는 방법을 설명함.
     * 투명성 및 관리
          + 릴리스 투명성: 릴리스의 투명성을 유지하고 관리하는 방법을 설명함.
          + 관리 및 운영: 보안 분석 및 공격 예측을 포함한 관리 및 운영 방법을 설명함.
     * 소스 코드
          + 보안 연구를 단순화하기 위해 특정 보안 중요 PCC 구성 요소의 소스 코드가 제공됨.
     * 가상 연구 환경
          + VRE 시작하기: 가상 연구 환경을 시작하고 상호작용하는 방법을 설명함.
          + 릴리스 검사: 릴리스를 검사하고 참조하는 방법을 설명함.
     * 부록
          + 시스템 구성, 보안 부팅 태그, 신뢰 캐시 형식, 보안 부팅 티켓 정규화, 증명 번들 내용, 투명성 로그에 대한 부록을 포함함.
"
"https://news.hada.io/topic?id=17676","HTML-to-Markdown - Golang/CLI로 전체 웹사이트를 Markdown으로 변환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HTML-to-Markdown - Golang/CLI로 전체 웹사이트를 Markdown으로 변환

     * HTML을 깨끗하고 읽기 쉬운 Markdown으로 변환하는 강력한 도구
     * 복잡한 포맷을 지원하고, 사용자 정의 옵션과 플러그인을 통해 변환 과정을 완벽하게 제어할 수 있음
     * Golang 라이브러리 또는 CLI 명령어를 사용하거나, 온라인 데모나 REST API를 통해 직접 확인 가능

주요 기능

     * Bold & Italic: 단어 내에서도 굵게 및 기울임을 지원함
     * List: 순서 있는 목록과 순서 없는 목록을 완벽하게 중첩하여 지원함
     * Blockquote: 인용문 내에 다른 요소를 포함할 수 있으며, 중첩된 인용문도 매끄럽게 지원함
     * Inline Code & Code Block: 백틱과 여러 줄의 코드 블록을 올바르게 처리하여 코드 구조를 유지함
     * Link & Image: 여러 줄의 링크를 올바르게 포맷하고, 빈 줄에 대한 이스케이프를 추가함
     * Smart Escaping: 특별한 문자를 필요할 때만 이스케이프하여 의도치 않은 Markdown 렌더링을 방지함
     * Remove/Keep HTML: 특정 HTML 태그를 제거하거나 유지할 수 있는 선택권을 제공함
     * Plugin: 플러그인을 쉽게 확장하거나, 기능을 향상시키기 위해 사용자 정의 플러그인을 만들 수 있음
          + 사용자 정의 로직이 필요할 경우, 코드를 작성하고 등록할 수 있음
          + 기본 설정이 마음에 들지 않으면 PriorityEarly를 사용하여 로직을 다른 것보다 먼저 실행할 수 있음
     * Converter는 여러 고루틴에서 사용할 수 있으며, 내부적으로 뮤텍스를 사용함

        Hacker News 의견

     * Jina.ai의 무료 API를 사용하면 인증이나 API 키 없이도 URL을 가져와서 마크다운 문서를 얻을 수 있음
          + 일부 웹사이트는 처리하지 못하지만, 대부분의 경우 90%의 작업을 수행할 수 있음
          + Pandoc을 사용하여 HTML을 마크다운으로 변환할 수 있음
     * MIT 라이선스가 적용된 이 도구를 Kindle에서 읽기 위해 p2k, Instapaper 등의 대체로 사용할 수 있을지 궁금함
          + 이러한 서비스는 렌더링이 부정확하고, 구독료를 요구함
          + 프로젝트가 적극적으로 유지 관리된다면 다양한 기사로 테스트하고 문제를 보고할 수 있음
     * 이 라이브러리를 Lambda 함수에서 사용하여 URL을 마크다운으로 변환하고 S3에 저장함
          + 모든 북마크 앱에 웹훅으로 연결하여 북마크한 모든 것을 마크다운으로 저장함
          + Obsidian으로 가져오기 편리함
     * LLM에 웹 페이지 데이터를 제공하기에 유용함
          + Elixir 세계를 위한 유사한 도구를 만들었지만 제한적임
          + 아이디어를 차용할 수 있음
     * 도구에 n-gram 중복 제거 기능이 있으면 좋겠음
          + 헤더와 푸터에서 동일한 콘텐츠를 제거하는 기능이 필요함
     * Urlbox를 사용하여 웹 페이지의 정확한 스크린샷과 마크다운을 얻을 수 있음
          + 무료 도구로 이 기능을 사용할 수 있음
     * RedditToMarkdown과 urltomarkdown.com을 사용하여 LLM과 AI 앱을 구축하는 데 유용함
     * Kotlin/Spring 앱에서 사용할 유사한 라이브러리를 찾고 있음
          + HTML에서 마크다운으로 변환할 때 HTML 문서 문자열은 이미 정리되어 있음
     * 이 도구를 사용할 때의 어려움 중 하나는 구문 강조 코드 블록을 처리하는 것임
          + html-to-markdown이 이러한 시나리오에서 어떻게 작동하는지 궁금함
"
"https://news.hada.io/topic?id=17733","M4 Mac mini의 효율성은 놀라움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         M4 Mac mini의 효율성은 놀라움

     * M4는 이전 세대의 M1/M2보다 32%의 효율성 향상을 보여줌
     * HPL 벤치마크에서 M4 mini는 6.74 Gflops/W를 기록하며, 42W에서 283 Gflops를 달성
     * M1 Max Mac Studio는 66W에서 264 Gflops를 기록하여 약 4.00 Gflops/W의 효율성을 보임
     * M4는 가장 효율적인 CPU로, 유휴 전력 소모는 3-4W로 Raspberry Pi와 비슷함
     * 시스템에는 10 기가비트 이더넷과 32GB RAM이 포함되어 있으며, 대부분의 시스템은 10 GbE 컨트롤러만으로도 4-6W를 소모하는 것과 비교하면 매우 효율적
     * 랙 마운트에서의 장점
          + 1.25U의 랙 공간에 3 개의 Mac mini를 설치할 수 있으며, 유휴 상태에서 전력소모는 약 10W에 불과하지만, 거의 1 테라플롭의 CPU 성능을 제공함.
          + 빠른 GPU/NPU, 10 GbE, 고속 Thunderbolt IO가 다양한 고성능 입출력 옵션이 포함되어 있어 서버 환경에서도 유리함
          + 전원 버튼이 하단에 위치한 것은 불편하다는 단점이 있지만, 아이들 전력 소모가 낮아 자주 끌 필요는 없음

   메모리 업하려면...휴...기분이 나빠지고..전 안삽니다

   맥 새로 살때 항상 겪는,, 매우 동감합니다

   디자인 적인 문제와.
   아이들 상태로 놓아서 시작을 빠르게 한다든지. 뭔가의 작업에 써먹으려고 일부러 숨긴거 같은데...

   맨날 놀라운 맥!
   이번 컨셉이 대기전력 효율이 우수하니 끄지 말라는거군요.
   그래서 혁신적으로 버튼을 밑에 숨겨둠거고

        Hacker News 의견

     * Linux를 사용하지만, M4 Mini는 가격 대비 뛰어난 가치와 효율성을 제공함. 교육 할인 시 약 €650로 VAT 포함임. 이 정도 가격에 조용하고 강력한 기계를 찾기 어려움. 비슷한 옵션이 있는지 궁금함
          + 팬리스 i3-14100T 빌드는 더 비싸고 Geekbench에서 40-50% 느림. i5는 조금 더 가까움. 2024 Ryzen CPU는 멀티코어 성능에서 비슷하거나 더 나을 수 있지만, 더 비싸고 에너지 효율성이 낮음. RAM이 더 필요하면 PC가 가격 면에서 유리함. Mac 업그레이드는 비용이 많이 듦
          + Nix를 Mac Mini에서 사용하여 Linux와 유사한 개발 환경을 유지할 수 있음. 하지만 ARM에서 지원되지 않는 패키지가 있음. Nix와 nix-darwin을 일상적으로 사용하는 경험이 있는지 궁금함
     * ""전원 버튼을 아래에 두지 않았으면 좋겠음""
          + Apple의 이 결정은 이해하기 어렵지만, 이런 결정을 내릴 수 있는 조직 구조는 존중함. 많은 회사에서는 여러 사람이 의견을 내어 인기 없는 선택을 막음. 합의가 원하는 결과를 방해할 때도 있음
     * M4 Mac Mini 16GB RAM이 팀의 6k 원본 영상 편집에 ""충분히 좋은"" 성능을 발휘함. 16GB RAM에 만족하고 있음
          + M1 Macbook Air 16GB RAM은 색 보정 시 많이 끊겼음. 확실히 개선됨을 느낌
     * M4 Mini는 플래시 스토리지가 메인보드에 납땜되지 않고 교체 가능한 모듈로 되어 있음. NVMe 컨트롤러는 SoC에 통합되어 있음
          + iFixIt 등에서 플래시 스토리지가 업그레이드 가능하다는 영상을 게시함
     * Mac mini M4의 성능은 DaVinci Resolve에서 HP 노트북(i5-1135G7)보다 4-5배 뛰어남
          + i5에서 HDR 비디오 렌더링은 12fps였으나, Mac mini에서는 60fps로 향상됨
          + M4 10코어 GPU는 모바일 RTX3060(65W)와 비슷하거나 더 나은 성능을 보임. M4의 효율성에 감명받음. 전력 대비 많은 성능을 제공함
          + macOS의 SMB 자동 마운팅 문제도 해결 가능해 보임. 기본 모델 가격에 만족하고 있음. 전원 버튼 위치는 불편함
     * Studio 모델이 GPU 중심이므로, M4 Mini의 성능 개선이 Studio 라인에 적용되기를 기대함
     * 일반 소프트웨어 개발(백엔드 작업) 및 일반 가정용 PC로서의 사용에 대한 피드백이 궁금함. 벤치마크를 보면 문제가 없어 보이지만, 실제 경험이 궁금함
     * Mac mini를 유능한 홈 서버로 만들기 위해 필요한 몇 가지 기능을 Apple이 제공했으면 좋겠음
     * 휴일 후에 업그레이드를 고려 중임
          + 2015 iMac을 사용 중이며, Apple Silicon MacBook을 의도대로 사용하지 않았음. 업그레이드할 때가 된 것 같음
     * Studio Display는 전력 소모가 많음. Mac이 실행 중일 때 화면이 꺼져 있어도 최소 10W의 전력을 사용함
          + Thunderbolt 컨트롤러, USB 허브, A13 프로세서, 팬을 유지하는 데 10W가 필요함
          + Mac이 실제로 잠자기 상태일 때 전력 사용량은 1W 미만으로 떨어짐. USB 허브에 아무것도 연결되지 않은 경우에만 해당됨. 빈 iPhone 케이블도 디스플레이가 5W를 소모하게 함. 실망스러움
"
"https://news.hada.io/topic?id=17658","수십 년 만에 FDA, 효과 없는 비충혈 제거제 퇴출 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    수십 년 만에 FDA, 효과 없는 비충혈 제거제 퇴출 조치

        Hacker News 의견

     * FDA의 결정에 대한 직접 링크가 포함된 이전 게시물에 대한 언급이 있음
     * 공식 발표에 대한 링크가 제공됨
"
"https://news.hada.io/topic?id=17609","HTML to React & Figma - 웹사이트를 React 컴포넌트로 변환하는 크롬 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HTML to React & Figma - 웹사이트를 React 컴포넌트로 변환하는 크롬 확장

     * 웹 페이지의 HTML을 React 코드나 Figma 디자인으로 변환할 수 있는 도구
          + 사용자는 기존 디자인을 가져와 React 코드로 변환하거나, Figma에서 편집 가능한 디자인으로 변환할 수 있음
          + AI를 사용하여 기존 디자인을 맞춤화하고 수정할 수 있는 기능을 제공
     * 주요 기능
          + 마음에 드는 기존 디자인을 가져와 자신의 프로젝트에 사용할 수 있는 React 코드로 즉시 변환 가능함
          + 기존 디자인을 가져와 편집하고 작업할 수 있어 처음부터 시작할 필요가 없음
          + AI를 활용하여 디자인을 맞춤화하고 수정 가능

   후기
   사이트 전체를 한번에 복제하긴 어려움.
   복제하는 컴포넌트가 커질수록 에러가 생길 가능성이 커서 헤더, 메인, 아티클, 사이드, 푸터처럼 주요 컴포넌트를 별도로 복제하고 컨테이너 레이아웃은 개발자가 직접 짜야했음.

   스타일링 기능
   기본 인라인은 컴포넌트마다 style태그를 생성하거나 html마다 style 속성을 부여했는데, 이건 개발자 입장에서 유지보수하기에는 코드가 js랑 분리가 덜 되고 지저분하다고 느꼈음.
   Tailwindcss로 변환하는 기능은 정말 좋았음.

   컴포넌트 분할 기능
   있긴 한데, 거의 없다고 봐야함. 여기에 더해 환장할 양의 css, 재사용될만한 컴포넌트 상당수가 그대로 html로 사용됨.
   따라서 몇 천줄 단위의 jsx코드가 나와버림.

   Ai 업데이트
   Ai채팅으로 디자인 컨셉을 바꿀 수 있었는데, 생각만큼 엄청 참신한게 나오진 않지만, 3번에 한번 꼴 정도로 신선한 디자인이 나왔음,
   그런데 유료라서 몇 번 못 써봄.

   정적 파일 생성
   Svg나 png들을 하나의 파일로 통합하는 이미지 스프라이트 기법을 사용해서 아이콘들을 통합한다는 점이 좋았음

   결론
   기존의 생성형 ai를 사용하듯이,
   ""전체적으로 괜찮지만 디테일 측면의 부족으로 개발자가 만져줘야 하는 코드""를 만들어냄.
   특히 컴포넌트 분할 기능이 부족해서, 아직까지는 ""레이아웃 및 정적 파일 추출기"" 정도로만 쓸모 있어 보임.
   기존에 gpt같은 ai로는 비즈니스 로직이 아니라 디자인 css의 레이아웃 관련 문제는 다루기 조금 어려웠는데, 이건 측면을 보완할 수 있을지 좀 더 다뤄봐야 겠음.

   HTML을 왜 react로 변환(?)해야할까요?

   ui 아이디어 훔치기..

   미쳤다...

   너무 잘 되네..

   아 너무 좋네요

        Hacker News 의견

     * 실제 제품이 매우 매력적임. 기본 테스트만으로도 일반 LLM 모델보다 훨씬 세련된 디자인을 생성함을 알 수 있음. 이번 주에 프로토타이핑에 사용할 예정임
          + 표준 LLM에서 어떤 변화를 주었는지 궁금함. 가드레일을 설정하거나, 구성 요소를 제공하거나, 좋은 웹사이트의 코퍼스를 기반으로 미세 조정했을 가능성을 상상할 수 있음
     * 이 도구는 페이지의 섹션을 깨끗하고 인쇄 가능한 HTML로 얻는 좋은 방법임. 예를 들어, Claude 웹 UI는 전체 채팅 기록을 인쇄할 수 없고 화면에 보이는 것만 인쇄함
          + 이 도구를 사용하면 두 채팅 버블 사이의 지점을 선택하여 전체 기록을 선택할 수 있음
          + 유사한 기능을 가진 간단한 Chrome 확장을 만들었지만, 출력의 품질이 떨어짐
     * 이런 도구의 출력물에 대한 저작권이 어떻게 되는지 궁금함. 모든 웹사이트가 라이선스를 포함하지 않기 때문에, 일반 LLM보다 더 불명확할 수 있음
     * 매우 유용한 브라우저 확장임. 스타일을 TailwindCSS로 변환할 수 있는 점이 매우 마음에 듦. 매우 영리함
     * 이 도구는 정말 훌륭함. 약 10개의 웹사이트에서 시도해봤는데, 약 80%의 웹사이트 요소에서 잘 작동함
          + 우리 사이트에서도 시도해봤고, 가장 중요한 구성 요소를 완전히 복제할 수 있었음
          + 몇몇 사이트는 선택을 허용하지 않음. 선택 모드를 활성화하고 요소 위에 마우스를 올려도 아무것도 선택되지 않음. 우리 사이트도 복제를 방지할 방법을 고민하게 됨
          + 훌륭한 작업임. 오랫동안 사용할 것임
     * 멋진 도구임. 요즘 프론트엔드 개발이 복잡해져서 이런 도구가 필요하다는 점이 아쉬움. 예전의 view-source와 단일 style.css의 시절이 그리움
     * Hacker News 로고의 폰트를 확인했는데, 다름
          + 원래는: Verdana, Geneva, sans-serif
          + 당신의 것은: ui-sans-serif, system-ui, sans-serif, ""Apple Color Emoji"", ""Segoe UI Emoji"", ""Segoe UI Symbol"", ""Noto Color Emoji""
          + 멋지지만, 왜 이런 일이 발생하는지 이해가 안 됨
     * 좋은 작업임. Firefox와 호환되도록 만들 계획이 있는지 궁금함
     * 내 Framer 페이지에서도 작동하여 직접 호스팅할 수 있을지 궁금함
     * 웹사이트의 HTML과 CSS를 얻는 매우 유용한 방법임
"
"https://news.hada.io/topic?id=17712","피지컬 인텔리전스의 최초 범용 정책 AI, 세탁 가능성 실현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   피지컬 인텔리전스의 최초 범용 정책 AI, 세탁 가능성 실현

     * 물리적 지능 (π)π0: 우리의 첫 번째 범용 정책
     * AI 혁명 시대에 살고 있으며, AI는 체스 게임을 이기거나 새로운 약물을 발견하는 것과 같은 ""쉬운"" 문제를 해결할 수 있지만, 셔츠를 접거나 테이블을 정리하는 것과 같은 물리적 세계의 문제는 여전히 어려운 문제임. 이를 해결하기 위해 AI 시스템이 물리적 지능을 갖추도록 해야 함.
     * 지난 8개월 동안 우리는 범용 로봇 기초 모델인 π0을 개발했으며, 이는 사용자가 로봇에게 원하는 작업을 수행하도록 요청할 수 있는 인공지능을 개발하기 위한 첫 번째 단계임. π0은 이미지, 텍스트, 행동을 아우르며, 로봇의 경험을 통해 물리적 지능을 습득함.
     * 범용 로봇 정책의 약속
     * 현재 로봇은 좁은 범위의 전문성을 가지고 있으며, 복잡한 환경에서의 행동은 불가능함. AI는 로봇이 사용자 지침을 배우고 따를 수 있게 하여 새로운 행동을 프로그래밍하는 것을 단순화할 수 있음. 이를 위해서는 많은 데이터가 필요함.
     * 범용 로봇 정책을 훈련할 수 있다면, 다양한 기술을 수행하고 다양한 로봇을 제어할 수 있는 모델을 만들 수 있음. 이는 적은 양의 데이터로 새로운 작업에 특화될 수 있음.
     * 교차 구현 훈련 혼합
     * π0은 인터넷 규모의 비전-언어 사전 훈련, 오픈 소스 로봇 조작 데이터셋, 8개의 서로 다른 로봇의 정교한 작업 데이터셋을 사용하여 훈련됨. 다양한 작업을 수행할 수 있으며, 제로샷 프롬프트나 미세 조정을 통해 가능함.
     * 인터넷 규모의 의미 이해 상속
     * π0은 인터넷 규모의 사전 훈련된 비전-언어 모델(VLM)에서 의미 지식과 시각적 이해를 상속받음. VLM은 웹의 텍스트와 이미지를 모델링하도록 훈련됨.
     * 정교한 조작을 위한 사후 훈련
     * 복잡하고 정교한 작업은 모델을 미세 조정하여 특화시킬 수 있음. 예를 들어, 세탁물을 접는 작업은 매우 어려운 작업임.
     * π0의 평가 및 비교
     * π0은 다른 로봇 기초 모델과 비교하여 모든 작업에서 우수한 성능을 보임. π0-small과 비교해도 더 나은 성능을 보임.
     * 앞으로의 방향
     * Physical Intelligence의 목표는 모든 로봇을 제어할 수 있는 기초 모델을 개발하는 것임. 현재까지의 실험은 다양한 로봇을 제어하고 이전에 성공하지 못한 작업을 수행할 수 있음을 보여줌. 그러나 범용 로봇 정책은 아직 초기 단계에 있으며, 앞으로 많은 발전이 필요함.

        Hacker News 의견

     * 인간의 만족을 위해 가사 로봇이 필요함을 언급함
          + 경제적 가치의 목표는 인간의 행복과 만족임
          + 부유해지면 가사 일을 아웃소싱하는 경향이 있음
          + 여성의 노동시장 참여로 기업들이 이익을 얻었음
          + 가사 로봇이 모든 사람에게 제공될 수 있음을 제안함
          + 기술 혁신은 가정에 도입되어 삶을 편리하게 함
          + 로봇 메이드가 사회적 변화를 가져올 것이라고 예상함
     * 로봇의 실용성에 대한 회의적인 시각
          + 로봇이 인간의 감독 없이 실용적이지 않음을 주장함
          + 일반적인 가사 로봇의 가능성에 대해 회의적임
     * 유럽 도시의 공간 제약 문제
          + 세탁실의 공간 제약으로 로봇 사용이 어려움
          + 세탁실은 작은 공간에 위치하고 있음
          + 로봇이 세탁실에 접근하기 어려움
     * 실험실 자동화 도구로서의 로봇 가능성
          + 정밀도가 향상되면 실험실 자동화 도구로 유용할 것임
          + 많은 실험실 작업이 정해진 절차에 따라 이루어짐
     * 요리 로봇의 잠재력
          + 세탁보다 요리 로봇이 더 유용할 것임
          + 요리 로봇이 식품 산업에 큰 영향을 미칠 것임
     * 로봇의 단순함과 비용 문제
          + 단순한 로봇이 비용이 낮을 것임
          + 세탁보다 요리가 더 자주 필요함
     * 세탁의 변화
          + 젊은 세대는 세탁과 다림질을 덜 함
          + 세탁의 필요성이 줄어들고 있음
     * 로봇의 속도 문제
          + 로봇이 느리게 움직이는 이유에 대한 궁금증
          + 안전성 때문인지 속도가 어려움을 증가시키는지에 대한 질문
"
"https://news.hada.io/topic?id=17691","인간 세포 연구, 기억이 뇌에만 존재하지 않음을 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     인간 세포 연구, 기억이 뇌에만 존재하지 않음을 발견

        Hacker News 의견

     * ""The Body Keeps the Score""는 훌륭하지만 읽기 어려운 책임. 추천함
     * 연구는 뇌와 상호작용 없이 이루어지는 ""학습""에 관한 것임
          + 면역 체계가 감염과 싸우는 방법을 배우는 것과 같은 방식임
          + 세포가 상태를 기록하는 메커니즘이 뇌의 세포 수준 메커니즘과 유사함
     * DNA 외에 유전 정보 전달 방법이 있는지에 대한 질문을 제기함
          + 본능으로 여겨지는 많은 것들이 부모로부터 자식에게 전달되는 정보일 수 있음
          + 예를 들어, 새끼 새가 아는 노래, 동물이 보여주지 않고 아는 이동 경로 등
          + 화학적 신호로 모든 것을 인코딩하는 것은 불가능해 보임
     * Michael Levin의 연구와 관련된 주제임
          + 세포를 지능적 에이전트로 보는 실험을 진행함
          + 암세포를 정상으로 되돌리거나, 세포가 눈을 만들도록 유도하는 등의 결과가 있음
          + 연구는 다세포체의 자기 조립, 수리, 새로운 해부학적 목표 해결 능력에 초점을 맞춤
     * 많은 연구가 같은 결론에 도달했음
          + 심장 이식 수혜자가 자신의 기억이 아닌 기억을 경험하거나 새로운 성격 특성을 개발함
     * 댓글에서 이상한 말을 하는 사람들이 있음
          + 비유전학적 전이는 제한적임
          + 비뇌 조직에서의 기억은 세부적인 문제를 가짐
          + 기억 전이는 성격, 기분, 신경전달물질과 관련될 수 있음
     * ""The Body Remembers""라는 책에 대해 들어본 적 있음
     * Purkinje 세포가 패턴을 감지하고 반응하는 것을 보여줌
          + 세포 내에 낮은 수준의 메커니즘이 존재함
     * 논문 자체는 대부분의 사람들이 기억이라고 부르는 것에 대해 이야기하지 않음
          + 난해하게 작성되어 있음
"
"https://news.hada.io/topic?id=17644","Switch 2, Switch와의 하위 호환성 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Switch 2, Switch와의 하위 호환성 지원

     * Switch 2는 Switch와 호환 가능할 것임을 Nintendo가 확인함
          + Nintendo는 Nintendo Switch의 후속 기기가 Switch와 역호환이 가능할 것이라고 확인함.
          + Nintendo 사장 Shuntaro Furukawa는 후속 기기에 대한 추가 정보가 ""추후에"" 발표될 것이라고 밝힘.
          + Nintendo Switch Online 서비스도 후속 기기에서 이용 가능할 것임.
     * 추가 정보 및 발표 일정
          + Nintendo는 다음 콘솔 하드웨어를 현재 회계 연도 말인 2025년 3월 31일 이전에 발표할 계획임을 재확인함.
          + 개발자들은 Nintendo의 다음 콘솔이 2025년 4월 이전에 출시되지 않을 것이라는 정보를 받은 것으로 보도됨.
     * Switch의 시장 위치
          + Switch는 2017년 3월에 출시되어 현재 시장에서 8년째임.
          + 7월에 Famicom을 넘어 Nintendo 콘솔 중 가장 긴 수명을 기록함.
     * 관련 VGC 콘텐츠
          + Take-Two는 GTA 6와 Borderlands 4가 서로 가까운 시기에 출시되지 않을 것이라고 밝힘.
          + Grand Theft Auto 6는 2025년 가을 출시 예정임.
          + Nintendo 사장은 Switch 2 발표 계획에 ""변경 없음""을 언급함.
          + Nintendo는 판매가 31% 감소한 후 Switch 예측을 하향 조정함.
     * 관련 제품
          + Pokémon Scarlet and Violet Dual Pack
          + Nintendo Switch Wireless Pro Controller
          + Nintendo Switch Joy-Con Pair
     * 기타 제품
          + Nintendo Switch OLED
          + Nintendo Switch Lite
          + LEGO Nintendo Entertainment System

        Hacker News 의견

     * Nintendo는 과거 몇 십 년간 구형 콘솔의 현대화 버전을 출시하는 경향이 있었음. 이러한 콘솔은 이전 버전과 호환되며 추가 기능을 제공함
          + 모든 주요 콘솔 제조업체가 하위 호환성을 우선시하고 있으며, PC 게임의 증가로 인해 사람들이 오래된 게임이 10년 후에도 ""만료""되지 않는다는 사실을 인식하기 시작함
          + 하위 호환성이 앞으로 모든 게임 콘솔의 표준이 될 가능성이 높음
          + 오래된 콘솔에서 출시된 게임들이 계속 플레이되는 방식, 예를 들어 Fortnite가 노후화된 하드웨어를 어떻게 지원할지에 대한 관심이 있음
          + Epic이 어느 날 게임이 더 이상 해당 콘솔에서 작동하지 않는다고 발표할 수 있는 점이 마음에 들지 않음. 이는 하드웨어를 업그레이드할 때까지 구매가 무효화됨을 의미함
     * Nintendo가 Switch 에뮬레이터를 겨냥한 진짜 이유는 Switch 2가 제대로 에뮬레이트되기 전에 시간을 벌기 위함임
          + 디지털/전자 게임과의 하위 호환성인지, 물리적 카트리지와의 하위 호환성인지에 대해 명확히 밝히지 않음
          + 하위 호환성이 없다면 정말 놀라울 것임. Switch의 하위 호환성 부족은 예외적이었으며, Wii 이후의 모든 Nintendo 콘솔은 최소 한 세대의 하위 호환성을 가졌음
     * Lego City Undercover가 더 높은 프레임레이트/해상도로 제공된다면 훌륭할 것임. AI 업스케일링만으로도 만족할 수 있음
          + AI가 바이너리의 충돌 버그를 수정할 수 있다면 보너스가 될 것임
     * Switch 2가 AMD Z2 기반일 것이라고 생각했으나, nVidia가 새로운 SoC를 제작하도록 설득한 것 같음
          + nVidia가 AI 칩에 여유 생산 시간을 사용하고 싶어할 것이라고 생각했으나, 아마도 오래된 공정 용량이 있을 수 있음
     * 새로운 제품에 하위 호환성이 포함될 때 매우 기쁨. Nintendo가 여러 번 실수를 겪었기 때문에 놀라움
          + 예를 들어, Wii의 GameCube 호환성 덕분에 Wii가 빠르게 해킹되었음
     * 사이트에 접근할 수 없지만, 다음 콘솔에 관심이 있음
          + 하위 호환성이 있다면 여전히 카트리지 기반일 것 같음. 아니면 카트리지 없는 시스템으로 비용을 절감할 수도 있음
          + 온라인 구매에 대한 하위 호환성은 여전히 가능함
          + 시스템의 정식 공개를 기대하고 있음. 크리스마스 이후에 발표될 것 같음
     * 새로운 시스템이 핸드헬드+TV 시스템일 가능성이 높음. Switch의 성공 덕분임
          + 새로운 아이디어가 있을 것으로 기대됨. VR을 위한 헤드스트랩이 포함될 가능성도 있음
     * Nintendo의 새로운 시스템에 대한 유일한 ""문제""는 현재 세대라고 주장하지만, 최신 게임의 품질과 성능을 따라잡기 어려워짐
          + 최신 세대 시스템과 비교할 때 어떻게 될지 궁금함
     * 콘솔 형태로 출시된다면 더 흥미로울 것임. N64는 게임을 수동으로 로드하고 블루투스나 컨트롤러 충전 문제 없이 로컬 협동 게임을 우선시하는 완벽한 형태였음
     * 장점: 게임을 다시 구매할 필요가 없음
          + 단점: 네이티브 호환성을 가정할 때, 매우 흥미로운 콘솔이 아닐 가능성이 있음
"
"https://news.hada.io/topic?id=17628","98.css – 오래된 사용자 인터페이스를 충실하게 재현하는 디자인 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               98.css – 오래된 사용자 인터페이스를 충실하게 재현하는 디자인 시스템

     * Intro
          + 98.css는 Windows 98 스타일의 인터페이스를 구축하기 위한 CSS 라이브러리임.
          + 이 라이브러리는 접근성을 주요 목표로 하며, HTML의 시맨틱 사용을 권장함.
          + JavaScript 없이 HTML을 스타일링하며, 다양한 프론트엔드 프레임워크와 호환 가능함.
     * Components
          + Button
               o 명령 버튼은 사용자가 클릭할 때 애플리케이션이 특정 작업을 수행하게 하는 컨트롤임.
               o 기본적으로 75px 너비와 23px 높이를 가지며, 클릭 시 테두리가 눌린 상태로 변함.
          + Checkbox
               o 체크박스는 독립적이거나 비독점적인 선택을 나타냄.
               o 체크박스와 라벨을 함께 사용하여 접근성을 높임.
          + OptionButton
               o 옵션 버튼은 제한된 선택지 중 하나를 선택할 수 있는 라디오 버튼임.
               o 같은 그룹의 옵션 버튼은 동일한 name 속성을 공유하여 그룹화함.
          + GroupBox
               o 그룹 박스는 컨트롤 세트를 조직화하는 데 사용되는 사각형 프레임임.
               o fieldset 태그를 사용하여 구현하며, 레이블을 추가할 수 있음.
          + TextBox
               o 텍스트 박스는 사용자가 텍스트를 입력하거나 편집할 수 있는 직사각형 컨트롤임.
               o 여러 줄을 지원하려면 textarea 요소를 사용함.
          + Slider
               o 슬라이더는 조정 범위를 정의하는 막대와 현재 값을 나타내는 표시기로 구성됨.
               o 수직 슬라이더를 만들려면 is-vertical 클래스를 사용함.
          + Dropdown
               o 드롭다운 리스트 박스는 목록에서 단일 항목을 선택할 수 있게 함.
               o select와 option 요소를 사용하여 구현함.
     * Window
          + Title Bar
               o 제목 바는 창의 상단 가장자리에 위치하며, 창의 내용을 식별함.
               o title-bar, title-bar-text, title-bar-controls 클래스를 사용하여 구현함.
          + Window contents
               o 창의 경계를 정의하는 window 클래스를 사용하여 창을 구성함.
               o window-body 클래스를 사용하여 창의 내용을 그림.
          + Status Bar
               o 상태 바는 창의 하단에 위치하여 현재 상태나 기타 정보를 표시함.
               o status-bar 클래스를 사용하여 구현함.
          + TreeView
               o 트리 뷰 컨트롤은 객체를 계층적 관계에 따라 들여쓰기된 개요로 표시함.
               o ul 요소와 tree-view 클래스를 사용하여 구현함.
          + Tabs
               o 탭 컨트롤은 파일 캐비닛이나 노트북의 구분자와 유사함.
               o menu 요소와 [role=tablist] 속성을 사용하여 구현함.
          + TableView
               o 테이블 뷰는 table 요소를 사용하여 렌더링함.
               o sunken-panel 클래스로 테두리와 오버플로우 컨테이너를 제공함.
     * Issues, Contributing, etc.
          + 98.css는 MIT 라이선스를 따름.
          + GitHub 이슈 페이지에서 버그를 보고하거나 새로운 버그를 제보할 수 있음.
          + 오픈 소스에 대한 기여를 환영하며, 코드 리뷰를 제공함.

        Hacker News 의견

     * 한 사용자는 다양한 운영체제의 기본 색상 테마를 포함한 프로젝트를 만들었으며, 현대 시스템에서도 잘 작동하고 미적으로 보이도록 SVG로 아이콘과 심볼을 재창조했음
          + 프로젝트를 Show HN에 게시했으나 큰 주목을 받지 못했음
          + 프로젝트 제목이 매력적이지 않을 수 있다고 생각함
     * 다른 사용자는 이 프로젝트가 번아웃 회복 프로젝트였으며, 최근 이에 대한 생각을 기록했음
     * 여러 운영체제와 관련된 CSS 스타일을 수집한 사용자가 있음
          + The Sims, Windows 98, Windows XP, Windows 7, Edward Tufte 스타일을 포함함
     * 98.css는 Hacker News에서 클래식으로 여겨지며, 여러 차례 논의된 바 있음
          + HyperCard Simulator와 Decker도 참고할 만함
     * 비원본 DPI 설정에서는 스타일이 잘 작동하지 않을 수 있으며, 브라우저 콘솔에서 특정 코드를 실행하여 물리적 픽셀에 맞출 수 있음
     * 한 사용자는 Windows 95와 Windows 98에서 MS Sans Serif가 아닌 것 같다고 언급함
     * 또 다른 사용자는 botoxparty.github.io/XP.css와 khang-nd.github.io/7.css를 확인할 가치가 있다고 말함
     * 90년대 후반 Microsoft는 Windows 데스크탑 테마와 색상에 맞춘 CSS 색상을 제공했으며, 이를 통해 웹 UI를 사용자의 데스크탑과 일치시킬 수 있었음
     * 한 사용자는 현재의 UX/UI 연구와 개선보다 과거의 스타일이 더 낫다고 주장함
          + 버튼, 탭, 텍스트 필드가 명확하게 보이는 것을 선호함
     * Obsidian 테마를 98.css 소스를 사용하여 만들었으나 현재는 중단된 상태임
"
"https://news.hada.io/topic?id=17695","고성과자(High Performer)를 무시하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     고성과자(High Performer)를 무시하지 마세요

     * 관리자들은 고성과자가 최대 역량을 발휘하도록 내버려 두고, 저성과자에게 시간과 관심을 쏟는 실수를 저지름
     * 이로 인해 고성과자는 간과되고 무시받는다고 느낌
     * 고성과자는 저성과자와는 다른 방식으로 관심이 필요함
     * 생산성 때문에 무시되기보다는 인정과 감사, 성장과 도전의 기회, 명확한 승진 경로, 자율성과 신뢰, 조직에 대한 소속감과 목적의식이 필요함

고성과자의 중요성

     * 고성과자는 혁신, 생산성, 탁월함의 원동력임
     * 평균 직원보다 400% 더 생산적이고, 소프트웨어 개발자와 같은 복잡한 직종에서는 최대 800%까지 더 생산적임
     * 그러나 관리자들은 즉각적인 개입이 필요한 저성과자에 초점을 맞춤
     * 이런 불균형한 관심은 고성과자의 의욕 상실, 좌절, 이직으로 이어짐

고성과자에 대한 잘못된 가정

     * 관리자들은 고성과자가 자립적이고 적은 관심이 필요하다고 가정함
     * 이미 탁월한 결과를 내고 있으니 굳이 개입할 필요가 없다고 생각함
     * 이런 사고방식은 고성과자가 스스로 도전을 헤쳐나가게 하고, 진정한 학습이 시작되는 불편한 영역 밖으로 밀어내지 않게 함
     * 독립성도 중요하지만, 직접적인 지원과 피드백의 부재는 고립감과 무시받는 느낌을 줌
     * 고성과자는 성장, 피드백, 도전의 기회를 원하며, 이런 요구가 충족되지 않으면 강한 성과에도 불구하고 빠르게 의욕을 잃음

1. 인정과 감사

     * 고성과자는 모든 성공에 대해 인정을 구하지 않음. 다음 도전에 집중하느라 바쁨
     * 하지만 자신의 기여가 주목받고 감사 받기를 원함
     * 평범한 ""잘했어""로는 부족함. 기대치를 뛰어넘는 구체적인 방식을 알아줘야 함
     * 복잡한 프로젝트에 대한 헌신, 혁신적 문제 해결, 팀 결속력 등에 대해 구체적으로 칭찬해야 함
     * 프로젝트의 병목 현상을 찾아내고 해결하거나, 필요한 새로운 기능을 도입하거나, 시스템적 문제를 해결하거나, 팀 역량 강화를 위한 교육을 준비하는 등의 업무 범위를 넘어선 해결책을 냈다는 것을 인정해야 함
     * 연구에 따르면 긍정적인 기술과 기여를 인정하는 것은 인정받는 개인의 동기를 높일 뿐만 아니라 나머지 팀에도 강력한 파급 효과가 있음
          + 인정은 항상 공개적일 필요는 없지만 의미 있어야 함
     * 어떤 이에게는 조용한 감사의 말이나 사려 깊은 쪽지로 충분할 수 있고, 어떤 이는 팀 회의나 LinkedIn과 같은 전문 플랫폼에서 인정받는 것을 고마워할 수 있음
     * 핵심은 각 고성과자가 어떻게 인정받기를 선호하는지 이해하고 그에 따라 접근 방식을 맞추는 것

2. 성장과 도전의 기회

     * 고성과자는 도전을 즐김. 기대치를 충족시키는 것에 만족하지 않고 뛰어넘기를 원함
     * 그들을 계속 참여시키려면 능력을 발휘할 기회를 제공해야 함
     * 도전적인 업무, 부서 간 프로젝트, 컴포트 존을 벗어나야 하는 역할 등이 될 수 있음
     * 고성과자의 강점과 열정에 맞는 기회를 파악하려면 그들을 깊이 알아가는 데 시간을 투자하고 무엇이 그들을 움직이게 하는지 배워야 함
     * 정기적인 일대일 대화나 복도 잡담을 통해 그들의 관심사, 장기 목표, 성장하고 싶은 영역을 파악할 수 있음
     * 이러한 인사이트를 통해 직원의 타고난 재능과 열망에 맞게 과제를 조정할 수 있으며, 직원의 성공에 관심이 있다는 강력한 신호를 보낼 수 있음
     * 핵심은 직원들이 진정으로 열정을 가지고 있는 분야에서 역량을 펼칠 수 있는 기회를 맞춤형으로 제공하는 것
     * 하지만 어려운 프로젝트를 맡기고 그냥 둬서는 안 됨
          + 성공에 필요한 도구, 리소스, 자율성을 제공할 것
          + 부서 간 역할인 경우 다른 리더에게 확인
          + 또한 고성과자에게 업무가 어떻게 진행되고 있는지, 무엇을 배우고 있는지, 미리 알았으면 하는 것이 무엇인지 물어볼 것
          + 그들의 성공에 도움이 되는 관점과 컨텍스트를 제공하면, 이는 여러분이 그들의 성공에 관심이 있다는 것을 보여줌

3. 명확한 승진 경로

     * 고성과자는 야망이 있음. 꾸준한 성취, 달성, 성공을 추구함
     * 자신의 노력이 어딘가로 이어지고 있다는 것을 알고 싶어 함
     * 기술을 아는 것에 그치지 않고 마스터하고 싶어 함
     * 막연한 미래의 기회 약속으로는 부족함. 명확하고 실행 가능한 승진 경로가 필요함
     * 정기적인 경력 대화가 필수적임. 연례 평가에만 그쳐서는 안 됨
          + ""지금 어떤 새로운 도전이 당신을 흥분시키나요?""
          + ""어떤 기술이 당신의 성과를 다음 단계로 끌어올릴 수 있다고 생각하나요?""
          + ""앞으로 6개월 동안 어떤 마일스톤을 달성하고 싶으신가요?""
          + ""여러분의 앞길을 가로막는 장애물을 제거하기 위해 제가 어떻게 도울 수 있을까요?""
     * 월별 또는 분기별 미팅을 예약하여 이들의 성장을 최우선 순위에 둘 것
     * 경력의 다음 단계, 개발해야 할 기술, 진척도 평가 기준 등을 설명해야 함
     * 고성과자의 커리어 궤적에 대해 기다리지 말고 먼저 물어봐야 함
          + 승진, 리더십 역할, 장기 목표와 일치하는 새로운 프로젝트 등 기회를 적극적으로 파악해야 함
          + 직원들의 미래에 투자하고 있다는 것을 보여줌으로써 조직에 대한 직원들의 애사심을 고취

4. 자율성과 신뢰

     * 고성과자의 의욕을 꺾는 가장 빠른 방법은 그들을 미시적으로 관리하는 것
     * 그들은 유능하고 혁신적이며 믿을 수 있다는 것을 여러 번 입증했음
     * 결정을 내리고 문제를 해결하며 자신이 맞다고 생각하는 방식으로 책임을 수행할 자율성이 필요함
     * 그들에게 맡은 책임에 걸맞은 권한을 신뢰하면, 기대치를 충족시킬 뿐 아니라 종종 뛰어넘음
     * 고성과자에게 자율성을 부여하는 동시에 자연스럽게 감시하려는 경향을 관리하려면 미리 명확한 기대치를 설정
          + 원하는 결과를 정의하되, 그 결과에 도달하는 방법을 자유롭게 결정할 수 있도록 할 것
          + 진행 상황을 업데이트할 수 있는 정기적이고 간단한 연락 일정을 잡고, 이러한 체크인 시에는 프로세스를 주도하기보다는 안내와 지원을 제공하는 데 집중
     * 과거 성과로 이런 수준의 신뢰를 얻었다는 것을 상기시켜야 함
          + ""내가 필요하면 내가 여기 있지만, 나는 당신이 이 일을 처리할 것으로 믿습니다.""
     * 그들의 프로세스를 신뢰하면 궁극적으로 더 나은 결과와 더 강력한 참여로 이어질 것

5. 조직 가치와의 일치

     * 고성과자는 단순히 더 큰 급여를 찾는 것이 아니라 목적을 추구함
     * 자신의 일이 의미 있고 조직의 가치와 일치한다고 느끼고 싶어 함
     * 그들이 추진력을 얻는 것에 대해 대화를 나누고, 그들의 업무를 더 큰 조직 목표와 연결시킬 방법을 찾아야 함
     * 고성과자의 원동력을 파악하려면 그들의 가치와 열망의 핵심을 파악할 수 있는 질문을 할 것
          + ""업무 중 어떤 부분에서 가장 큰 에너지를 얻나요?""
          + ""업무의 어떤 부분이 당신을 고갈시키나요?""
          + ""우리 미션의 어떤 측면이 가장 공감이 되나요?""
          + ""여러분의 업무가 회사나 업계에 어떤 영향을 미치기를 원하세요?""
          + 이렇게 하면 일상 업무와 더 큰 조직의 비전 사이에 연결이 생김
     * 갤럽과 맥킨지의 연구에 따르면, 직원이 자신의 업무를 개인적 가치와 일치시킬 수 있을 때 몰입도가 높아지고 궁극적으로 높은 창의력과 생산성으로 이어짐
     * 고성과자가 업무를 통해 자신의 가치를 실현하도록 장려하면 몰입도를 높일 뿐만 아니라 더 혁신적이고 영향력 있는 기여로 이어짐
     * 고성과자들은 자신보다 더 큰 무언가의 일부가 되기를 원하며, 이들이 더 큰 그림에 어떻게 부합하는지 알 수 있도록 돕는 것이 여러분의 역할

결론

     * 이러한 요소에 우선순위를 두면 고성과자를 계속 참여시킬 수 있을 뿐만 아니라 그들의 잠재력을 최대한 발휘하여 조직을 더 큰 성공으로 이끌 수 있음
     * 결국, 고성과자들이 진정으로 원하는 것은 자신이 중요하다는 것, 즉 자신의 노력이 변화를 만들어내고 있다는 사실을 아는 것
     * 그들이 그렇게 느낄 수 있도록 하는 것이 리더인 여러분의 책임

   고성과자에 포커싱을 할거면 팀의 존재 의의가 있는 것인지 의문이 드네요. 본인이 고성과자라고 착각 하는 것이 아니라면 극 소수일텐데..

   무엇이든 사람이 가장 중요하고 , 고성과자는 누구보다 중요한게 사실입니다.
   무엇보다 고성과자가 일을 잘할수 있게 지원을 잘하는 것이 리더의 역할이고 (리더는 관리자가 아닌 지원자임),
   꼭 저성과자를 어떻게 하자는 것 보다는 같이 갈수 있는 문화를 만들어 다 같이 갈수 있게 하는게 리더의 역할 이라 생각합니다.
   위의 2가지가 리더의 역할이라 생각되며 , 특히 앞의 것은 꼭 사수해야 합니다.

   인상적인 글입니다. 재미있어요~

   인상적인 글이에요. 관리자 관점에서 시사하는바가 많은것 같아요.
   스스로를 돌아보게되는 ;;

   https://news.hada.io/topic?id=14096 해고에 관한글

   중간 관리자들도 그냥 실무하라고 내려보내는 추세인데 이래저래 남게된 관리자들은 더 힘들어지겠군요...그래도 중요한 지적 같습니다.

   관리자는 너무 바쁘네요 ㅠ

   저 성과자를 버리면 됩니다. 회사에선 두배로 손해.

   저성과자가 문화를 저해하는 사람이 아닌 이상, 사람을 버리면 고성과자만 남는게 아니라 고성과자가 조금 더 상향 평준화된 저상과자로 변하고 인원은 줄고, 저성과자를 버리는 문화에 지치는 사람들이 나오기도 하고. 넷플릭스가 그랬지 않나요

   저성과자들이 지쳐서 나와서 저성과회사에 들어간답니다.

   죄송하지만 이 마인드는 저성과자를 양산하는 방법과 다름 없습니다.
   고성과자는 버림받는 저성과자를 보고 회사를 떠납니다.
   관리는 쉽지 않아요.

     고성과자는 버림받는 저성과자를 보고 회사를 떠납니다.

   제대로 보상받지 않는 다른 고성과자를 보면 모를까.. 보통은 그렇지 않을거 같아요
   저성과자를 더 케어하면 고성과자도 시일에 지남에 따라 저성과자가 될 뿐입니다 (= 일 열심히해서 뭐하나)

   동의합니다. 혹은 고성과자가 떠나거나.

     고성과자는 버림받는 저성과자를 보고 회사를 떠납니다.

   이 의견에 대한 뒷받침 근거가 궁금합니다. 저는 고성과자들이 '썩은 사과'에 더 민감하게 반응할 거라 생각했습니다. 어쩌면 '저성과자'라는 용어에 대해 제가 생각하는 것과는 다른 의미를 생각하시는 걸수도 있겠네요.

   정말 분위기 흐리는 저성과자는 안 버리는게 오히려 고성과자를 떠나게 할 수도 있지 않을까요? 한국은 미국처럼 PIP로 사람 밀어내는 게 쉽지 않아서 아예 고려대상도 아닌 건가요.

   고성과자로서 경험한 바를 말씀하시는걸까요???

   월급루팡 말인가요? 미국은 해고하면 되니까요.
   한국이야기면 한국은 어짜피 답이 없습니다. 관리자가 쪼으는 수밖에 없어요.

   고성과자는 버림받는 저성과자를 보고 회사를 떠난다는건 증명이 된건가요?
   어찌보면 이글과 반대되는 주장이신데요?

   반대된다고 생각하지 않습니다. 다른 방식의 관리가 추가로 필요하다는 내용에는 동의합니다.
   '버리면 됩니다.' 에 반대하는 의견이고요,
   고성과자가 일에만 신경쓰는 사람일거라고 생각하시나요?
   협업 구조에서 자기 일만 신경써서는 고성과를 내기 어려울 텐데요...

   버리라는 표현은 과한표현이지만,
   이 글은 저성과자 신경쓸 시간낭비하지말고, 고성과자 신경을 써라 라는 뜻에 더 가깝습니다.
   ""관리자들은 고성과자가 최대 역량을 발휘하도록 내버려 두고, 저성과자에게 시간과 관심을 쏟는 실수를 저지름""

   저 성과자를 무자비하게 잘라낸다면, 남은 사람들이 모두 고성과자가 된다는 것은 착각입니다. 고성과자만 모아서 조직을 꾸려도 다시 고성과자와 저성과자로 나뉩니다. 이것은 이미 미국에서 실험이 끝났습니다. 이런식의 전략은 협업이 아니라 서로 경쟁하게 만들고, 장기적인 비전을 추구하기 어렵게 합니다.
"
"https://news.hada.io/topic?id=17693","OpenID Connect 사양 ISO 표준으로 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenID Connect 사양 ISO 표준으로 발표

OpenID Connect 사양의 ISO 표준화

     * OpenID Connect 사양이 ISO/IEC 표준으로 발표됨
          + ISO/IEC 26131:2024 — OpenID Connect Core 1.0
          + ISO/IEC 26132:2024 — OpenID Connect Discovery 1.0
          + ISO/IEC 26133:2024 — OpenID Connect Dynamic Client Registration 1.0
          + ISO/IEC 26134:2024 — OpenID Connect RP-initiated Logout 1.0
          + ISO/IEC 26135:2024 — OpenID Connect Session Management 1.0
          + ISO/IEC 26136:2024 — OpenID Connect Front-Channel Logout 1.0
          + ISO/IEC 26137:2024 — OpenID Connect Back-Channel Logout 1.0
          + ISO/IEC 26138:2024 — OAuth 2.0 Multiple Response Type Encoding Practices
          + ISO/IEC 26139:2024 — OAuth 2.0 Form Post Response Mode
     * OpenID Connect 사양은 2023년 12월에 ISO의 Publicly Available Specifications(PAS)로 제출됨
          + ISO 승인 투표 후, 공식적으로 발표됨
          + 국제 조약에 의해 인정받는 표준 기관의 사양을 사용해야 하는 법적 요구 사항이 있는 전 세계 관할 구역에서 OpenID Connect의 채택을 촉진할 것으로 기대됨
     * OpenID Connect 작업 그룹은 ISO 버전에 모든 알려진 오류 수정을 포함하기 위해 사양의 오류 수정 작업을 철저히 수행함
     * OpenID Foundation은 ISO PAS 제출 프로세스를 성공적으로 완료한 후, FAPI 1.0 사양, eKYC-IDA 사양, FAPI 2.0 사양을 포함한 추가 사양을 ISO에 제출할 계획임
     * 이 중요한 성과를 달성하는 데 도움을 준 모든 사람들에게 감사의 인사를 전함

        Hacker News 의견

     * OpenID Connect는 OpenID의 초기 개념과 거의 관련이 없으며, OAuth의 진화 형태임
          + OpenID는 URL을 통해 자신의 정체성을 증명하는 시스템이었음
     * 표준을 얻기 위해 비용을 지불해야 하는 것은 좋지 않음
          + 더 많은 노력이 시간 소모가 적은 표준과 구현 설계에 들어가야 함
     * Mike Jones는 OIDC 작업 그룹의 일원으로, OIDC의 공개 표준(PAS) 출판을 축하하며, 문서의 완전성을 위해 오류 수정 사항을 포함시켰음
     * ISO는 소프트웨어 생태계에 도움이 되지 않으며, ISO 8601은 복잡하고 대부분 올바르게 구현되지 않음
          + 예를 들어, 미래의 날짜에 대한 시간대 변경 문제를 해결하지 못함
     * ISO와 같은 대형 표준 조직은 표준을 보기 위해 비용을 청구함
          + 일부 산업에서는 IETF와 같은 오픈 소스 단체보다 ""진짜"" 표준을 요구함
     * ISO와 같은 유료 표준은 인류의 진보를 방해함
     * OpenID Connect는 비교적 간단한 프로토콜이며, 하루 만에 대부분 이해할 수 있었음
          + Python을 사용하여 클라이언트를 구현하는 튜토리얼을 작성했으며, JWT 토큰의 디코딩과 검증이 복잡한 부분임
          + 이 클라이언트를 실제 프로젝트에서 사용 중이며, 잘 작동하고 있음
          + 사이트에 광고가 많으니 광고 차단기를 사용할 것을 권장함
     * 독립적인 OIDC 발급자가 남아 있는지 궁금함
          + Github 계정을 사용하지 않고 Tailscale에 계정을 만들고 싶었으나 불가능했음
          + openid.net과 Ubuntu One이 과거에 이 서비스를 제공했으나 중단됨
     * PAS는 최대 6년의 수명을 가지며, 이후 국제 표준으로 전환되거나 철회될 수 있음
          + PAS 신청이 표준 기구를 더 빠르게 통과하기 위해 선택된 것인지 궁금함
     * 연말 예산을 소진하기 위한 좋은 방법일 수 있음
"
"https://news.hada.io/topic?id=17671","Omni SenseVoice - 단어별 타임스탬프 가능한 고속 음성 인식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Omni SenseVoice - 단어별 타임스탬프 가능한 고속 음성 인식

     * 자동 음성 인식(ASR), 음성 언어 식별(LID), 음성 감정 인식(SER), 오디오 이벤트 감지(AED) 등의 기능을 갖춘 다국어 음성 이해 모델 SenseVoice 기반
     * 초고속 추론과 정확한 타임스탬프에 최적화되어 있어 더 스마트하고 빠르게 오디오 트랜스크립션을 처리할 수 있음
     * 주요 옵션
          + --language: 언어를 자동으로 감지/지정(auto, zh, en, yue, ja, ko)
          + --textnorm: 역 텍스트 정규화 적용 여부 선택(역 정규화된 경우 withitn, 원시 텍스트의 경우 woitn)
          + --device-id: 특정 GPU에서 실행(기본값: CPU의 경우 -1)
          + --quantize: 빠른 처리를 위해 양자화된 모델을 사용

   한국어가 옵션에 있으니 테스트 해보고싶네요 ㅎ
"
"https://news.hada.io/topic?id=17697","F# 9의 새로운 기능의 새로운 기능

     * 왜 F# 9가 중요한가 : F# 9는 프로그램을 더 안전하게, 탄력 있게, 성능 좋게 해주는 광범위한 개선 사항을 도입

Nullable 참조 타입

     * F#은 null을 피하도록 설계되었지만, C#으로 작성된 .NET 라이브러리와 인터페이스할 때 null이 섞일 수 있음
     * 이제 F#은 null을 유효한 값으로 갖는 참조 타입을 타입 안전한 방식으로 다룰 수 있게 해줌
     * 예시:
          + let notAValue: string | null = null
          + let len (str: string | null) = match str with | null -> -1 | NonNull s -> s.Length

Discriminated Union의 .Is* 프로퍼티

     * Discriminated Union은 이제 각 case마다 자동 생성된 프로퍼티를 가짐
     * 이를 통해 값이 특정 case인지 확인할 수 있음
     * 예를 들어 person.contact.IsEmail과 같이 작성 가능

부분 액티브 패턴은 unit option 대신 bool을 반환 가능

     * 이전에는 부분 액티브 패턴이 일치하면 Some (), 아니면 None을 반환했음
     * 이제는 bool을 반환할 수도 있음

인수가 제공될 때 내장 프로퍼티보다 확장 메서드를 선호

     * F#은 이제 타입의 내장 프로퍼티와 동일한 이름으로 정의된 확장 메서드를 해결함
     * 이는 일부 .NET 라이브러리에서 볼 수 있는 패턴과 일치함

빈 몸체의 Computation Expression 지원

     * F#은 이제 빈 Computation Expression을 지원함
     * 예: let xs = seq { }
     * 빌더의 Zero 메서드를 호출하게 됨

해시 지시문은 문자열이 아닌 인수를 허용

     * 컴파일러를 위한 해시 지시문은 이전에는 따옴표로 전달된 문자열 인수만 허용했음
     * 이제는 모든 타입의 인수를 받을 수 있음
     * 예: #nowarn 0070

fsi에서 #help 지시문 확장

     * F# Interactive의 #help 지시문은 이제 주어진 객체나 함수에 대한 문서를 보여줌
     * 따옴표 없이 전달 가능
     * 예: #help List.map;;

경고 비활성화를 위해 #nowarn에서 FS 접두사 지원

     * 이전에는 #nowarn ""FS0057""을 작성하면 잘못된 경고 번호라는 메시지가 나왔음
     * 이제는 접두사가 있어도 경고 번호가 허용됨

재귀적이지 않은 함수나 let으로 바인딩된 값에 TailCall 특성 사용 시 경고

     * 이제 F#은 [<TailCall>] 특성이 잘못된 곳에 사용되면 경고를 내보냄
     * 코드에는 영향이 없지만 읽는 사람을 혼란스럽게 할 수 있음

특성 대상 적용

     * 컴파일러는 이제 let 값, 함수, union case 선언, 암시적 생성자, 구조체 및 클래스에 대한 AttributeTargets를 올바르게 적용함
     * 이는 Xunit 테스트에 unit 인수를 추가하는 것을 잊는 등의 버그를 방지할 수 있음

표준 라이브러리 업데이트

  컬렉션을 위한 Random 함수

     * List, Array, Seq 모듈에 랜덤 샘플링과 셔플을 위한 새로운 함수가 추가됨
     * 암시적이고, 스레드 안전한 공유 Random 인스턴스를 사용하는 버전
     * Random 인스턴스를 인수로 받는 버전
     * 사용자 지정 randomizer 함수를 받는 버전
     * Shuffle, Choice, Choices, Sample 함수가 있음

  CustomOperationAttribute의 Parameterless 생성자

     * Computation Expression 빌더를 위한 사용자 지정 연산을 더 쉽게 만들 수 있음
     * 명시적으로 이름을 지정하지 않아도 됨(대부분의 경우 이름이 메서드 이름과 일치함)

  F# List와 Set에 대한 C# 컬렉션 식 지원

     * F# List와 Set을 C#에서 사용할 때 컬렉션 식으로 초기화할 수 있음
     * 예: FSharpSet<int> mySet = [ 1, 2, 3 ];

개발자 생산성 향상

  파서 복구

     * 파서 복구에 지속적인 개선이 이루어짐
     * 코드 편집 중이어서 항상 구문적으로 올바르지 않더라도 도구가 계속 작동함

  진단

     * F# 9에는 새롭거나 개선된 진단 메시지가 많이 있음
     * 모호한 오버라이드 메서드, 추상 멤버 사용 시, 중복된 필드가 있는 유니언 등

  실제 가시성

     * F#에서 어셈블리를 생성하는 방식에는 private 멤버가 IL에 internal로 작성되는 문제가 있음
     * 이제 --realsig+ 컴파일러 플래그로 이 동작을 수정할 수 있음

성능 개선

  최적화된 동등성 검사

     * 동등성 검사가 이제 더 빨라지고 메모리 할당이 줄어듦

  구조체 Discriminated Union의 필드 공유

     * 구조체 DU의 여러 case에서 동일한 이름과 타입의 필드를 갖는 경우 동일한 메모리 위치를 공유할 수 있음
     * 이는 구조체의 메모리 공간을 줄여줌

  정수 범위 최적화

     * 컴파일러는 이제 start..finish와 start..step..finish 식의 더 많은 인스턴스에 대해 최적화된 코드를 생성함
     * 이전에는 타입이 int/int32이고 스텝이 상수 1이나 -1일 때만 최적화되었음
     * 이제 모든 정수 타입과 다른 스텝 값도 최적화됨

  List/Array Comprehension의 for x in xs -> ... 최적화

     * List와 Array의 컴프리헨션에서 for x in xs -> ...가 최적화되었음
     * 특히 Array에서 최대 10배 속도 향상과 1/3에서 1/4 수준의 할당 크기 감소

도구 개선

  Visual Studio의 Live Buffer

     * 이전에는 옵트인 기능이었지만 이제 기본적으로 활성화됨
     * IDE의 백그라운드 컴파일러가 이제 라이브 파일 버퍼로 작동함
     * 변경 사항을 적용하기 위해 파일을 디스크에 저장할 필요가 없음

  불필요한 괄호 제거를 위한 분석기와 코드 수정

     * 명확성을 위해 추가 괄호가 사용되기도 하지만 때로는 그냥 노이즈임
     * 이제 Visual Studio에서 괄호를 제거하기 위한 코드 수정을 제공함

  Visual Studio에서 F#에 대한 사용자 지정 시각화 도우미 지원

     * Visual Studio의 디버거 시각화 도우미가 이제 F# 프로젝트에서 작동함

  파이프라인 중간에 서명 도구 설명 표시

     * 이전에는 파이프라인 중간에 있는 함수에 이미 복잡한 커리 매개변수(람다 등)가 적용된 상황에서는 서명 도움말이 제공되지 않았음
     * 이제 다음 매개변수에 대한 서명 도구 설명이 표시됨

        Hacker News 의견

     * F#는 대학 시절 처음 접한 이후로 가장 좋아하는 언어임. C#보다 앞선 기능들을 가지고 있으며, C#도 이러한 기능들을 도입하고 있지만 호환성 문제로 어려움이 있음. F#은 여전히 훌륭한 언어이며, .NET 생태계와 호환 가능하며 적은 보일러플레이트로 C#과 동등한 성능을 제공할 수 있음
     * F#는 Microsoft가 Excel 이후로 출시한 최고의 제품 중 하나로, .NET을 합리적인 플랫폼으로 변환함
     * F#을 기반으로 한 Phosphor 프로젝트에 큰 투자를 했으나, Typescript와 Rust로 전면 재작성하게 됨. Fable 라이브러리를 통해 다양한 기술 간의 타입 안전성을 유지하려 했으나, 라이브러리 간의 상호 운용성 문제와 의존성 관리가 어려웠음. F#은 전통적인 프론트엔드/백엔드 구분이 있는 경우에만 적합하다고 생각함
          + 현재 내부적으로 사용하는 기술 중 가장 흥미로운 것은 Effect 라이브러리와 Moonbit임. Moonbit는 MS/.NET 의존성이 없는 현대적인 F# 버전으로, AI 중심의 세계에 적합한 언어로 기대됨
     * .NET을 사용하는 언어를 선택할 수 있는 암호학 수업에서 F#로 작성한 과제가 다른 사람들보다 읽기 쉬웠음. 데이터 과학 작업의 거의 100%가 Python으로 이루어져 있어 F#을 더 많이 사용하지 못함
     * F#에서 작업하는 것이 그립지만, 업데이트를 계속 주시하고 있음. 도구는 커뮤니티의 크기와 Microsoft의 무관심에도 불구하고 꽤 좋았음. 가장 큰 문제는 코드 테스트 커버리지의 정확성이었음
     * 최근에 F#을 사용해봤는데, Python에서 온 사람으로서 REPL을 사용할 수 있다는 점이 마음에 듦. 겨울에 작은 웹 백엔드 프로젝트를 만들어 언어와 생태계를 더 잘 알고 싶음. http 부분에 대해 Oxpecker에 대해 좋은 이야기를 들었음
     * F#의 버전 관리 방식에 대해 궁금함. 품질 개선이 많지만, 주요 버전 변경이 필요해 보이지 않음. .NET9와의 버전 번호 일치가 이유인지 궁금함
     * F#이 Windows에서 GUI 앱을 만들기 위한 C#의 대체재로서의 상태는 어떤지, 이를 위해 F#을 사용하는 회사가 있는지 궁금함
     * F#을 해본 적은 없지만, 좋은 리소스로 보이는 사이트를 발견함: fsharpforfunandprofit.com
     * Linux/MacOS에서의 F#의 상태는 어떤지 궁금함. Windows 전용인지, 아니면 완전히 지원되는 언어처럼 느껴지는지 알고 싶음
"
"https://news.hada.io/topic?id=17674","경찰의 심문에서 기만 사용 합법화, 이를 중단하려는 움직임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    경찰의 심문에서 기만 사용 합법화, 이를 중단하려는 움직임

     * 테드 브래드포드는 경찰이 자신을 강간 사건에 대해 심문하던 날이 인생 최악의 날이었다고 말함
          + 경찰은 그에게 DNA 증거가 있다고 주장하며 자백을 요구함
          + 결국 브래드포드는 자백했지만, 증거는 DNA 테스트가 불가능했음
          + DNA 기술의 발전으로 2010년에 무죄 판결을 받음
     * 미국 모든 주에서 경찰은 심문 중 거짓말을 할 수 있음
          + 일부 주에서는 청소년에게 거짓말을 금지하는 법을 통과시킴
          + 그러나 법률 전문가들은 다른 취약한 그룹도 보호받아야 한다고 주장함
     * 거짓말은 빠르고 간단하게 사건을 해결하는 방법으로 사용됨
          + 그러나 잘못된 자백을 유도할 수 있음
          + 무죄 판결의 약 3분의 1이 잘못된 자백과 관련 있음
     * 워싱턴 주에서는 성인과 청소년 모두에게 거짓말로 얻은 자백을 법정에서 인정하지 않도록 하는 법안을 제안함
          + 경찰은 이 법안에 반대하며, 거짓말이 더 많은 진실된 자백을 가져온다고 주장함
     * 다른 나라에서는 경찰이 거짓말을 하지 않는 심문 방법을 사용함
          + 이러한 방법은 경찰을 더 신뢰할 수 있게 만듦
          + 워싱턴 주 의원은 이 법안을 다시 제안할 계획임
     * 경찰이 거짓말을 하지 않는 심문 방법은 유럽 여러 나라에서 사용되고 있음
          + 이러한 방법은 경찰과 지역 사회 간의 신뢰를 높일 수 있음

        Hacker News 의견

     * Tom Perez 사건은 부당함. 그는 살아있는 아버지를 살해한 혐의로 체포되었고, 경찰은 그가 피 묻은 옷을 버리는 영상을 가지고 있다고 주장하며 그의 개를 죽이겠다고 협박함
     * 경찰이 법과 절차에 대해 거짓말하는 것은 용납할 수 없는 일임. 예를 들어, ""자백하면 일주일만 감옥에 있을 것이고, 그렇지 않으면 사형당할 것이다""라는 식의 협박은 부당함
     * 경찰과 대화하지 말고, 변호사를 요청한 후 침묵을 유지하는 것이 중요함. 경찰과의 대화는 변호사를 통해 진행해야 함
     * 경찰이 거짓말을 할 수 있다면, 나도 경찰에게 거짓말을 할 수 있어야 한다고 생각함. 법정에서의 선서는 다른 문제임
     * 경찰이 거짓말을 할 수 있지만 미란다 권리를 읽어줘야 하는 것은 모순적임. 대부분의 사람들이 이를 모르기 때문에 문제가 됨
     * 유명한 사례로는 Riley Fox 사건이 있음. 이 사건은 미성년자에게 속임수를 쓰지 못하도록 하는 일리노이 법률이 있음
     * 경찰이 생물학적 증거가 있다고 주장하며 자백을 요구한 사례가 있음. 반대로, 경찰이 체포하지 않겠다고 약속했지만 결국 체포된 경험도 있음
     * 서유럽에서도 경찰이 이런 일을 할 수 있는지 궁금함. 미국 경찰은 법원에 의해 지원받는 준군사적 폭력배로 보임
     * 경찰은 개인 공간을 침해하며 심리적 압박을 가하는 신체 언어 기술을 사용함. 법적 조언을 요청하는 것이 중요함
     * 자백이 법정에서 인정되려면 전체 심문 과정이 촬영되고 대배심에 의해 검토되어야 한다고 생각함. 경찰이 거짓말을 할 수 있지만 연방 조사관에게 거짓말하는 것은 범죄임
"
"https://news.hada.io/topic?id=17648","Show GN: 이것은 데이팅 앱이 아닙니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: 이것은 데이팅 앱이 아닙니다.

   어그로 죄송합니다.
   사진으로만 소통하는 서비스를 만들었습니다.
   공개 SNS에 조금 지쳤거든요.

   저는 펜팔을 만화책으로만 봤어요.
   소위 아날로그를 동경하는 세대입니다.
   누군가에게 편지를 보내고 기다리는 그 애틋함이 펜팔의 매력 아니였을까 짐작만 해볼 수 있네요.

   펜팔을 디지털로 옮겼습니다.
   SnapPal로 13개국의 누군가와 이어져보세요.

   AppStore로 SnapPal 보러가기 ->
     * SnapPal은 1인 개발 서비스로, 서비스 내 소박한 규모와 분위기를 지향합니다.
     * 서비스 초기라 사진 도착에 시간이 걸릴 수 있습니다. 먼저 보내보는 건 어떨까요?
     * 부적절한 사진 신고를 상시 모니터링 중입니다.
     * Android는 빠른 시일 내 지원 예정입니다.

   오직 사진만 보여주는 건가요?

   사진만 주고받을 수 있고

   채팅방의 소유권이 1:1 대화상대 모두에게 있는 게 아니라

   답장 할 차례인 사람에게만 있도록 펜팔 개념을 도입했습니다.
"
"https://news.hada.io/topic?id=17613","넷플릭스 유럽 사무소 세무 사기 조사 압수수색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       넷플릭스 유럽 사무소 세무 사기 조사 압수수색

     * Netflix 유럽 사무실 세무 조사
          + 프랑스와 네덜란드 당국이 넷플릭스의 파리 및 암스테르담 사무실을 세무 조사 일환으로 급습함.
          + 두 나라의 관계자들은 2022년 11월에 시작된 조사에 협력 중임.
          + 넷플릭스는 이번 급습에 대해 구체적인 언급은 없으나, 운영하는 모든 지역에서 세법을 준수한다고 주장함.
          + 암스테르담 사무실은 유럽, 중동, 아프리카 지역의 본부임.
     * 프랑스의 조사
          + 프랑스의 조사는 고위층 화이트칼라 범죄를 조사하는 특별 부서인 국가 금융 검찰청(PNF)이 수행 중임.
          + ""심각한 세금 사기 및 비공식 노동 은폐"" 의혹과 관련 있음.
          + 2019년, 2020년, 2021년의 세금 신고도 조사 대상임.
          + 네덜란드 당국도 동시에 수색을 진행 중이며, 두 나라 간의 협력은 ""여러 달"" 동안 지속됨.
     * 세금 신고와 관련된 의혹
          + 프랑스 매체 La Lettre에 따르면, 넷플릭스는 2021년까지 프랑스에서 발생한 매출을 네덜란드에 신고하여 세금 부담을 최소화했음.
          + 이 방식을 중단한 후, 프랑스에서의 연간 신고 매출은 2020년 €47.1m에서 2021년 €1.2bn으로 급증함.
          + 조사관들은 2021년 이후에도 넷플릭스가 이익을 최소화하려 했는지 여부를 확인 중임.
     * 넷플릭스의 프랑스 내 활동
          + 넷플릭스는 10년 이상 전 프랑스에 진출했으며, 2020년에 파리 사무실을 개설함.
          + AFP 뉴스에 따르면, 프랑스 내 구독자는 약 1,000만 명임.

        Hacker News 의견

     * 원격 우선 회사들은 사무실이 거의 없고 모든 문서가 클라우드에 저장되어 있어 ""사무실 급습""이 어떻게 작동할지 궁금함
     * 기술 회사들이 아일랜드 외부로 확장하지 않을 것 같음
     * 네덜란드에서 세금 회피 규칙의 변화가 진행 중이며, 다른 나라들도 비슷한 규칙을 변경할지 궁금함
          + 네덜란드 정부의 세금 회피 대응 관련 문서 링크 제공
     * 유럽에서 대기업 사무실에 대한 급습이 정기적으로 발생하는 것 같음. 소규모 기업에도 이런 일이 발생하는지, 규제 당국이 회사를 폐쇄할 가능성이 업무에 심각한 문제를 일으키는지 궁금함
     * 네덜란드는 간소화된 관료제로 기업 친화적이지만 세금 회피는 용납하지 않음. 세무 당국과 협상하는 것이 올바른 접근법임
     * 프랑스에서 Netflix가 2021년까지 네덜란드에 매출을 신고하여 세금을 최소화한 사례가 있음. 조사관들은 2021년 이후에도 Netflix가 이익을 최소화하려 했는지 조사 중임
     * Uber와 같은 미국 회사도 비슷한 사례가 있었으며, 법 위반이나 세금 회피를 시정하겠다고 했지만 실제로는 아무것도 하지 않은 사례가 있음. 이런 행동이 미국에서는 더 수용되는지 궁금함
     * 이 주제를 다룬 미니 시리즈가 이미 제작 중인지 궁금함
     * ""Emily in Paris""에서 Emily가 이런 일을 하고 있었는지 궁금함
     * 법인세가 잘못 설계된 세금이라고 생각하는 의견이 있음. 높은 이익을 낸 해에 세금을 내야 하는 이유와 배당금과 소득이 이미 과세되는 상황에서 법인세를 내야 하는 이유에 의문을 가짐. 법인세가 사업 전략에 큰 영향을 미치는 것도 문제임
     * 법인세의 이중 과세를 없애는 것이 어떨지 제안함. 결국 개인의 배당금 분배나 주식 판매를 통해 세금이 납부될 것임
"
"https://news.hada.io/topic?id=17631","Starship 6차 비행 시험 발사 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Starship 6차 비행 시험 발사 예정

     * 11월 18일 월요일 발사 예정
     * 중계는 SpaceX X 계정과 X TV 앱에서 발사 30분 전부터 시청 가능
     * 발사 윈도우는 오후 4시(CT)에 30분간 개방
     * 모든 개발 테스트와 마찬가지로 일정은 유동적이며 변경될 가능성 높음

5차 Starship 비행 시험 결과

     * 재사용 가능한 발사 시스템을 향한 중요한 이정표
     * 수퍼 헤비 부스터는 성공적으로 발사 부지로 복귀하여 발사 및 착륙 타워의 집게 팔에 포착됨
     * Starship 상단부는 여러 개선 사항을 보여주었고, 제어된 진입 및 인도양 목표 지점에 고정밀 착수에 성공

6차 Starship 비행 시험 목표

     * 우주선과 부스터의 성능 향상 및 전체 시스템의 재사용성 개선
     * 부스터의 발사 부지 복귀 및 포착 재시도
     * 우주 공간에서 Raptor 엔진 재점화
     * 열 차폐 실험 및 인도양 상공에서의 선박 재진입 및 하강을 위한 기동 변경 테스트

5차 비행 시험에서의 하드웨어 업그레이드

     * 부스터 추진 시스템에 중복성 추가
     * 주요 영역의 구조적 강도 증대
     * 성공적인 포착 후 부스터에서 추진제를 하역하는 타임라인 단축
     * 부스터의 발사 및 복귀를 위한 소프트웨어 제어 및 커밋 기준 업데이트

수퍼 헤비 부스터 복귀 및 포착을 위한 안전 기준

     * 부스터와 타워의 건전성 확인 필요
     * 비행 감독관의 최종 수동 명령 필요
     * 부스트백 연소 완료 전에 명령이 전송되지 않거나 자동 건강 검사에서 Super Heavy 또는 타워의 상태가 허용되지 않으면 기본적으로 멕시코만에 연착륙하는 궤적을 따름
     * 대중과 팀의 안전을 위해 타협하지 않음

음속 붐 예상

     * 초음속 속도에서 감속하는 부스터로 인해 착륙 구역 주변에서 음속 붐 발생
     * 음속 붐의 영향은 일반적으로 천둥과 같은 짧은 소음
     * 날씨 및 복귀 지점으로부터의 거리에 따라 소음 크기가 달라질 수 있음

Starship 상단부 비행 계획

     * 이전 비행 시험과 동일한 준궤도 궤적을 따라 비행하며, 인도양에 착수 예정
     * 단일 Raptor 엔진을 사용한 우주 공간에서의 연소 시도를 통해 궤도 임무 전 선박 궤도 이탈 연소에 필요한 기능 추가 입증

열 보호 실험 및 운용 변경

     * Starship의 성능 한계를 테스트하고 선박 포착 및 재사용 계획에 대한 비행 데이터 생성을 위한 실험 진행
     * 2차 열 보호 재료 평가 및 미래 차량의 포착 가능 하드웨어 연구를 위해 선박 양쪽의 열 차폐 타일 전체 섹션 제거
     * 하강 최종 단계에서 고의로 높은 받음각으로 비행하여 향후 착륙 프로파일에 대한 데이터 획득을 위해 플랩 제어 한계 시험
     * Starbase에서 오후 늦은 시간대로 발사 윈도우를 조정하여 주간에 인도양 상공에서 선박이 재진입할 수 있도록 하여 시각적 관측에 더 나은 조건 제공

향후 Starship 업그레이드 계획

     * 7차 비행 시험부터 재설계된 전방 플랩, 더 큰 추진제 탱크, 최신 세대 타일 및 2차 열 보호층 등 상당한 업그레이드가 적용된 선박 사용 예정
     * 이번 및 후속 비행 시험에서 얻은 교훈을 통해 완전하고 신속한 재사용성에 근접하면서 전체 Starship 시스템의 신뢰성을 지속적으로 향상시킬 계획

GN⁺의 의견

     * Starship의 재사용 가능한 발사 시스템 개발은 우주 탐사의 비용을 크게 절감하고 접근성을 높일 수 있는 획기적인 기술
     * 그러나 완전한 재사용성 달성을 위해서는 아직 많은 기술적 난제들이 남아 있으며, 안전성과 신뢰성 확보가 무엇보다 중요
     * 음속 붐과 같은 부작용을 최소화하고 대중의 우려를 해소하기 위한 노력도 필요해 보임
     * 경쟁사인 Blue Origin의 New Glenn 로켓도 재사용 가능한 발사체 개발을 목표로 하고 있어 향후 경쟁이 치열해질 전망
     * 이런 민간 우주 기업들의 기술 혁신이 향후 달 기지 건설이나 화성 탐사 등 인류의 우주 진출에 크게 기여할 것으로 기대됨

        Hacker News 의견

     * SpaceX의 최근 테스트 영상이 매우 감동적임
     * SpaceX 엔지니어들이 놀라운 일을 가능하게 했으며, 그들의 성공을 기원함
     * Austin으로의 로드 트립을 계획 중이며, 친구들과 함께 직접 목격할 예정임
     * 발사 시간이 오후 4시 CT로 예정되어 있는지 확인 중임
     * 이전의 발사가 놀라웠으며, 이번에는 어떤 혁신적인 시도가 있는지 궁금함
     * 완전히 놀라운 경험임
     * 발사 이벤트를 라이브로 볼 수 있는 방법을 알고 싶어함. 일반인에게 공개되는지, 아니면 SpaceX 직원과 가족만 가능한지 궁금함
     * 공상과학이 현실이 되는 순간을 사랑하며, 배기구의 다이아몬드 모양을 좋아함
     * SpaceX가 정부 계약을 받을 가능성이 높다고 상상함
     * 특정 영상의 진위를 확인하고 싶어하며, 이를 반박할 수 있는 자료를 찾고 있음
"
"https://news.hada.io/topic?id=17605","캘리포니아에서 처방 화재 중단 결정, 역사를 반복하는 산림청 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  캘리포니아에서 처방 화재 중단 결정, 역사를 반복하는 산림청 결정

        Hacker News 의견

     * 미국 산림청이 캘리포니아에서 예정된 화재를 중단하도록 지시한 것은 자원 문제로 보임
          + 이는 철학의 변화가 아니라 자원 보존을 위한 것임
          + 예정된 화재가 여름 초에 이루어지는 이유는 인력 소요가 적기 때문임
     * 예정된 화재가 여름에 이루어지면 큰 산불로 번질 수 있음
          + 90년대에는 여름에 화재가 가능했지만 지금은 아님
          + 가을에 비와 서늘한 날씨가 지속될 때 화재를 하는 것이 바람직함
     * 연방정부와 캘리포니아의 산림 관리 협력은 정치적 요인에 의해 불안정함
          + 예산 논쟁으로 인해 산림 관리 자금이 불확실함
          + 캘리포니아 주지사와 입법부가 연방 토지에서 통제된 화재를 명령할 경우의 결과에 대한 의문 제기
     * 산림청의 결정은 이러한 정치적 문제의 결과임
     * CEPR 같은 조직의 역할에 대한 의문
          + 경제 및 사회 문제에 대한 민주적 토론을 촉진하는 것이 목표임
          + 수익 모델에 대한 의문 제기
     * 산불 문제 해결에 필요한 자원이 부족함
          + 예정된 화재는 새로운 장비 구매를 촉진하지 않음
     * 산불은 캘리포니아 생태계의 자연스러운 일부임
     * 예정된 화재가 잘못되면 큰 비용이 발생할 수 있음
          + 계획되지 않은 산불이 계속 발생함
     * 과거 산림청은 목재 판매로 자금을 조달했음
          + 환경 소송으로 인해 벌목이 제한됨
          + 바이든 행정부는 벌목량을 늘렸지만 여전히 부족함
          + 벌목 감소로 인해 예정된 화재가 더욱 필요해짐
"
"https://news.hada.io/topic?id=17610","FFMpeg, 손으로 작성한 AVX-512 어셈블리 코드로 94x 성능 향상 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               FFMpeg, 손으로 작성한 AVX-512 어셈블리 코드로 94x 성능 향상

     * 현대의 고급 프로그래밍 언어와 고급 컴파일러는 소프트웨어 개발을 크게 단순화하고 비용을 낮추지만, API의 비효율성으로 인해 현대 하드웨어의 성능 기능을 숨기는 경향이 있음
     * FFmpeg 개발자들에 따르면, 어셈블리 코드를 사용하면 워크로드에 따라 성능이 3배에서 94배까지 향상될 수 있음
     * FFmpeg 내의 특정 기능을 가속화하기 위해 AVX-512 명령어 세트를 사용하여 최적화된 코드 경로를 만들었고, 표준 구현에 비해 훨씬 더 빠른 성능을 달성할 수 있었음
     * AVX-512는 512비트 레지스터를 사용하여 단일 정밀도 FLOP 16개 또는 배정밀도 FLOP 8개를 한 번의 연산으로 처리할 수 있어 대량의 데이터를 병렬로 처리할 수 있음
     * 벤치마킹 결과에 따르면 새로운 수작업 AVX-512 코드 경로가 기준 C 코드, AVX2 및 SSE3와 같은 낮은 SIMD 명령 집합을 포함한 다른 구현보다 상당히 빠름
     * 이 개발은 AVX-512 지원 하드웨어에서 실행되는 사용자에게 특히 유용하며 미디어 콘텐츠를 훨씬 더 효율적으로 처리할 수 있음
     * 그러나 인텔은 12세대, 13세대, 14세대 코어 프로세서에서 AVX-512를 비활성화하여 이러한 CPU의 소유자들이 이를 사용할 수 없게 됨
     * 반면 AMD의 Ryzen 9000 시리즈 CPU는 완전히 활성화된 AVX-512 FPU를 특징으로 하므로 이러한 프로세서의 소유자는 FFmpeg의 성과를 활용할 수 있음
     * 아쉽지만, AVX-512의 복잡성과 특수성으로 인해 이러한 최적화는 일반적으로 성능이 중요한 애플리케이션에 국한되며 저수준 프로그래밍 및 프로세서 마이크로아키텍처에 대한 전문 지식이 필요함
       ( 이 내용은 Tom's Hardware의 FFmpeg devs boast of up to 94x performance boost after implementing handwritten AVX-512 assembly code 에서 가져옴 )

   예전에 관련 작업을 잠깐 해본 경험이 있어서 말씀드리면 일단 94라는 것은 어그로입니다.
   의견에 올라온대로 스칼라/벡터 코드의 차이로 성능 차이가 크게 나타난 것입니다.
   하지만 대부분의 상업용 코덱은 어셈블리 코딩으로 최적화를 수행합니다.
   ""대부분의 C코드는 최적의 어셈블리 코드로 컴파일됨""이 맞는 말이긴 합니다만 성업용 제품을 개발하기 위해서는 그 대부분의 수준보다 높아야되니까요. 특히 임베디드쪽에서는 더 중요합니다.

        Hacker News 의견

     * FFmpeg의 특정 필터에서 성능이 94배 향상되었다는 주장은 오해의 소지가 있음. 대부분의 사용자는 이미 AVX/SSE를 사용하고 있었기 때문에 C 코드 최적화가 필요하지 않았음
          + FFmpeg의 주요 CPU 사용자는 인코딩과 디코딩이며, 이번 개선은 이에 영향을 미치지 않음
     * 손으로 작성한 어셈블리 코드와 그렇지 않은 코드의 비교가 아닌, 스칼라 코드와 벡터 코드의 비교임
          + AVX 내장 함수를 사용하여 C 코드를 작성하면 어셈블리 코드 없이도 유사한 속도 향상을 얻을 수 있음
     * 특정 경우에는 손으로 작성한 어셈블리 코드가 유리할 수 있음
          + 비디오 디코더는 매우 타이트한 루프를 포함하고 있어, 성능의 일관성을 유지하기 위해 어셈블리 코드가 필요함
     * FFmpeg 팀은 내장 함수 사용을 금지하고 모든 플랫폼별 코드를 어셈블리로 작성하도록 요구함
          + 어셈블리 코드는 충분한 노력을 기울이면 항상 더 빠르지만, 내장 함수는 적은 노력으로도 매우 가까운 성능을 얻을 수 있음
     * 94배 향상은 dav1d의 최적화이며, FFmpeg뿐만 아니라 다른 프로그램에서도 사용할 수 있음
          + RISC-V(64비트) 최적화에 대한 요청이 있으며, 관심 있는 사람들에게 좋은 기회임
     * LuaJIT의 Mike Pall은 어셈블리 코드 작성의 이점을 설명한 바 있음
     * 마이크로 벤치마크에서 단일 함수가 C 코드보다 94배 빨라짐
     * Intel은 Core 12, 13, 14세대 프로세서에서 AVX-512를 비활성화함
          + 이에 대한 명확한 이유는 찾지 못했음
     * 성능 문제 해결 전에 병목 현상을 식별하는 작업이 충분히 이루어지지 않는 경우가 많음
          + 대부분의 C 코드는 최적의 어셈블리 코드로 컴파일됨
     * 성능 향상의 원인은 손으로 작성한 어셈블리 코드가 아닌 AVX-512 SIMD 명령어 사용임
          + gcc의 AVX-512 벡터화와 비교해보고 싶음

   새로운 인텔 몰락 AVX2/AVX-512 취약점 및 이로 인한 막대한 성능 영향

   https://tuxcare.com/ko/blog/…

   아 이런 이유로 인텔이 AVX-512를 내렸군요.

   해당 이유보다는 E코어가 AVX-512를 지원하지 않다보니, 소프트웨어적으로 막아둔걸로 압니다.
   P코어는 비공식적으로 AVX-512 지원했었어요.

   그렇군요. 알려주셔서 감사합니다 :)
"
"https://news.hada.io/topic?id=17664","하루 5분 운동으로 혈압 감소 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          하루 5분 운동으로 혈압 감소 가능성

     * 연구 개요
          + 새로운 연구에 따르면, 하루에 5분 정도의 간단한 신체 활동, 예를 들어 계단 오르기나 언덕 걷기 등이 혈압을 낮추는 데 도움이 될 수 있음.
          + 이 연구는 University of Sydney와 University College London이 주도하는 ProPASS Consortium에 의해 수행되었으며, Circulation에 발표되었음.
          + 하루에 20-27분의 운동으로 앉아 있는 시간을 대체하면 임상적으로 의미 있는 혈압 감소가 예상됨.
     * 연구의 중요성
          + 고혈압은 전 세계적으로 주요 건강 문제 중 하나이며, 약물 외에도 접근 가능한 방법으로 문제를 해결할 수 있는 가능성을 제시함.
          + 하루에 5분의 추가 운동이 혈압을 낮출 수 있다는 발견은 짧은 고강도 운동이 혈압 관리에 얼마나 강력한지를 강조함.
     * 고혈압의 위험성
          + 고혈압은 전 세계적으로 조기 사망의 주요 원인 중 하나이며, 뇌졸중, 심장마비, 심부전, 신장 손상 등 다양한 건강 문제를 일으킬 수 있음.
          + 증상이 없어 '침묵의 살인자'로 불리기도 함.
     * 연구 방법
          + 연구팀은 5개국에서 14,761명의 자원봉사자의 건강 데이터를 분석하여, 하루 동안의 운동 행동을 다른 것으로 대체했을 때 혈압에 미치는 영향을 조사함.
          + 참가자들은 허벅지에 착용 가능한 가속도계를 사용하여 하루 종일 활동과 혈압을 측정함.
          + 일일 활동은 수면, 앉아 있는 행동, 느린 걷기, 빠른 걷기, 서기, 달리기, 자전거 타기, 계단 오르기와 같은 더 격렬한 운동으로 나뉘어짐.
     * 연구 결과
          + 앉아 있는 행동을 하루 20-27분의 운동으로 대체하면 인구 수준에서 심혈관 질환을 최대 28%까지 줄일 수 있음.
          + 운동은 혈압을 낮추는 데 핵심이며, 짧은 자전거 타기나 버스를 타기 위해 뛰는 것과 같은 일상적인 활동도 포함됨.
          + 운동을 많이 하지 않는 사람들에게도 걷기는 혈압에 긍정적인 영향을 미칠 수 있음.
     * 연구의 의의
          + ProPASS 컨소시엄과 같은 연구 플랫폼은 운동, 수면, 앉아 있는 행동의 미묘한 패턴을 식별하는 데 강력한 도구임.
          + 이러한 패턴은 임상적 및 공중 보건적으로 중요한 의미를 가짐.
     * 연구 관련 정보
          + 연구는 'Device-measured 24-hour movement behaviours and blood pressure: a six-part compositional individual participant data analysis in the ProPASS Consortium'라는 제목으로 Circulation에 게재됨.
          + DOI: 10.1161/CIRCULATIONAHA.124.069820
     * 연구진의 이해관계
          + Emmanuel Stamatakis 교수는 Complement Theory Inc의 유급 컨설턴트이며, 이 회사의 제품과 서비스는 이 기사 내용과 관련이 있음. 다른 저자들은 이해관계가 없음을 선언함.

        Hacker News 의견

     * Tabata 훈련은 1990년대 중반에 개발된 고강도 간헐적 훈련으로, 짧은 운동이 장기적으로 지속하기 쉬워 유익함
          + 20-30분 동안 동네를 달리고, 주간적으로 푸시업이나 풀업, 바벨 운동을 집에서 수행함
          + 긴 운동 루틴을 지속하지 못하는 사람들을 많이 봄
     * 운동이 좋다는 증거는 충분하며, 적은 양이라도 운동이 없는 것보다 나음
     * ""운동"" 대신 ""활동""이라는 용어를 사용하면 더 많은 사람들에게 효과적일 수 있음
          + 집 주변을 걷는 것만으로도 큰 효과를 얻을 수 있음
     * 비만인 경우 체중 감량이 혈압을 낮추는 가장 빠른 방법임
          + 체중 1파운드 감량 시 수축기 혈압이 1 mmHg 감소함
     * 60대 이웃이 40대에 혈압이 높았으나, 유도 수업을 시작한 후 20년간 심장 및 혈압 문제가 없었음
     * 마그네슘 섭취가 혈압을 낮출 수 있으며, 이뇨제는 마그네슘 결핍을 유발할 수 있음
     * 규칙적인 운동을 시작한 후 혈압이 135/90에서 115/75로 낮아짐
     * 운동은 삶을 긍정적으로 변화시킴
          + 20분의 가벼운 달리기가 정신을 맑게 해줌
     * 연구자들이 신중하게 ""할 수 있다""라는 표현을 사용하지만, 이는 의미가 없게 만듦
     * 운동이 좋다는 것은 모두 알지만, 시간과 동기 부여가 어려움
          + 다른 해야 할 일이 많아 운동을 우선시하기 어려움
"
"https://news.hada.io/topic?id=17694","생성형 AI시대에서 세일즈하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          생성형 AI시대에서 세일즈하는 방법

     * ""지금 판매하는 것은 매우 어렵습니다. AI 시대의 비즈니스에서 승리하는 방법을 소개합니다.""

왜 지금 판매하기가 어려운가

     * 소프트웨어 시장의 규모 자체가 감소 : 스타트업이 신규 고객으로부터 벌어들일 수 있는 금액이 절반으로 줄었음
     * 이렇게 소프트웨어 소비 규모가 줄어든 데에는 세 가지 요인이 작용함:
          + 거시경제적 불확실성으로 인해 CIO들은 단기 계획을 세우기 어려워하고, 예산도 삭감 중
          + COVID 이후 SaaS 제품이 과포화 상태여서, 기업들이 저수익 소프트웨어는 과감히 정리하는 추세
          + 제너레이티브 AI로 인해 기술 지형이 어떻게 변할지 불투명한 상황에서 기업들이 대규모 투자를 망설이고 있음

기회의 장을 찾아라

     * 그럼에도 불구하고 스타트업이 기회를 잡을 수 있는 영역은 존재함
     * 가장 큰 기회는 향후 2-3년 내 제너레이티브 AI로 영향을 받을 기업들과 ROI에 초점을 맞추는 장기적 관점의 기업들에게 있음
          + 총 IT 지출의 85% 이상을 차지하는 3조3천억 달러 규모

어떻게 신규 사업을 따내야 할까

     * 오늘날 기업의 실제 문제점에 초점을 맞춘 정교한 영업 활동과 탄탄한 제품 로드맵, 즉 세대별 AI 혁신에 앞서고 실질적인 ROI를 보여줄 수 있어야 함
     * 현재 시장에서의 기회를 세분화 해보면
          + AI 영향 정도에 따른 고객 세분화
               o High: 단기적으로 고객의 비즈니스에 큰 혼란을 줄 수 있음
               o Medium: 향후 2~3년 내 사업 운영이나 판매 방식에 큰 영향을 미칠 가능성 높음
               o Low: 5년 이상의 장기적 관점에서 사업에 미미한 영향을 줄 것으로 예상됨
          + 서비스/제품 특징
               o High: 소프트웨어 제품, 기술 컨설팅
               o Medium: 전자상거래, 여행 등 디지털 고객 접점 및 백오피스 운영
               o Low: 제조업 등 실물 제품
          + 제너레이티브 AI의 일반적 활용 사례
               o High: 특정 워크플로를 위한 맞춤형 AI 솔루션 구축 및 제품에 적용
               o Medium: 콘텐츠 개인화, 소프트웨어 개발 자동화, 챗봇 등 영업 및 마케팅 자동화
               o Low: 콜센터, 고객지원 업무
          + 핵심 영업 질문
               o High: 경쟁에서 앞서나가기 위해 어떻게 해야 하는가?
               o Medium: 제너레이티브 AI가 사업에 미치는 영향을 어떻게 준비해야 하는가?
               o Low: 어떻게 가시적인 ROI를 보여줄 것인가?
          + CIO 설득 포인트
               o High: 제너레이티브 AI 기반 솔루션 판매
               o Medium: 중단기 로드맵이나 고객의 제너레이티브 AI 계획에 맞는 솔루션
               o Low: 명확하고 측정 가능한 ROI 제시
          + ROI 평가 기준
               o High: 혁신성(다년간 제품 혁신)
               o Medium: 로드맵(후발 제너레이티브 AI 제품들과의 호환성, 기존 IT 환경과의 연계성)
               o Low: 효율성 개선 실적(예: 헤드카운트 절감)

    PLG(Product-Led Growth)만으로는 부족하다

     * 엔터프라이즈 세일즈가 다시 중요해지고 있음. CFO와 CIO 모두를 대상으로 한 무거운 영업 사이클에 대비해야 함
     * PLG는 여전히 중요하지만, 고객의 기존 시스템에 어떻게 녹여낼 것인지 이해하고 비즈니스 요구사항에 맞춰 제안해야 함

    가치를 팔아라, 실험 정신은 접어둬라

     * 대부분의 CIO는 명확하고 측정 가능한 ROI를 낼 수 있는 소프트웨어를 원함
     * 실험 단계의 활용 사례는 제너레이티브 AI가 아닌 솔루션에는 어려움. 기업들은 제너레이티브 AI 솔루션이 아니라면 가치에 더 중점을 둠

    제품 로드맵이 그 어느 때보다 중요함

     * CIO는 제너레이티브 AI가 비즈니스에 어떤 도움이 될지 제시해줄 파트너를 찾고 있음
          + 로드맵에서 제너레이티브 AI를 어떻게 포함시킬지
          + 5년 뒤 제너레이티브 AI 중심 세상에서 자사 제품이 어떤 위치를 차지할지 잘 보여주는 기업이 유리함
     * 제너레이티브 AI 네이티브 솔루션이 아니어도 괜찮지만, 제너레이티브 AI나 ROI 가속화에 도움이 된다는 점을 강조하는 것이 현명함
     * 고객군별 주요 활용 사례와 ROI 기대
          + 전 산업: 정보 요약, 고객 지원, 소프트웨어 개발 등 업무 생산성 향상에 제너레이티브 AI 활용
          + 단기 영향: 고객 대면 애플리케이션에 제너레이티브 AI 내장, LLM 활용해 데이터 분석 개선이나 추천 엔진 구축 등 자체 역량 강화. 단기 ROI보다는 제너레이티브 AI가 사업에 미칠 위협에 대비하는 데 주력
          + 중기 영향: LLM 활용 방식이 다양함. 일부는 자체 내부 툴 구축, 일부는 써드파티 앱 사용. 업무 생산성 향상과 웹사이트 챗봇 등 고객 경험 개선 목적
          + 장기 영향: 측정 가능한 ROI 달성에 제너레이티브 AI 활용하며, 혁신 우위 확보에는 신경 쓰지 않음. 마케팅 카피 작성이나 이메일 개인화 같은 영업/마케팅 목적으로 초기 도입 중
     * 제너레이티브 AI 앱 레이어의 큰 기회
          + 현재 대부분의 제너레이티브 AI 소프트웨어가 앱 구축 혹은 인프라 소프트웨어에 그치고 있어 아직 초기 단계
          + 장기적으로는 CRM 같은 범용 애플리케이션이나 전자건강기록 같은 특화 애플리케이션 시장을 잠식할 기회가 있음
          + 앱 레이어에서 사업을 따내려면 다음을 고려해야 함:
               o 도입 과정에서 고객의 손을 잡아주기
               o 데이터 정리
               o 다른 앱과의 통합
               o 자사 워크플로에 익숙한 고객층 확보
               o 사용자 커뮤니티 구축 및 육성

    컨설턴트나 대형 플랫폼 같은 채널 파트너와 손잡아라

     * 제너레이티브 AI의 영향이 불투명하고 기업이 소프트웨어 통합을 추진중이라 Accenture 같은 채널 파트너나 대형 플랫폼이 고객 계정에 대해 더 많은 권한을 쥐고 있음
     * 이들이 고객에게 제공하는 솔루션에 포함되도록 관계를 만들어가되, 너무 많은 부분을 내주지 않도록 주의해야 함
          + 채널 파트너가 고객 관계와 제품 구현을 장악하게 되면 제품에 대한 인식과 활용에 영향을 미칠 수 있음

앞으로의 전망

     * 당신의 시장 판단이 빗나간 게 아니며, 수년 전보다 판매 자체가 어려워진 것은 사실임
     * 그러나 고객의 요구사항에 맞춘 정교한 기업 영업 방식과 제품 로드맵을 구축하는 데 집중하는 창업자라면 여전히 기회가 있음
     * 거시경제 불확실성, SaaS 통합, 초기 제너레이티브 AI 도입의 중첩된 사이클은 영원히 지속되지 않을 것임
     * 신중하고 끈질기게 기회를 모색하고 잡으려 노력하는 창업자는 내일과 그 이후를 위한 발판을 마련할 수 있을 것임
"
"https://news.hada.io/topic?id=17604","Diagrams - Diagram as Code","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Diagrams - Diagram as Code

     * Diagrams는 Python 코드로 클라우드 시스템 아키텍처를 그릴 수 있게 해주는 도구
          + 새로운 시스템 아키텍처를 프로토타이핑할 때 디자인 도구 없이 사용할 수 있도록 만들어졌음
          + 기존 시스템 아키텍처를 설명하거나 시각화하는 데도 사용 가능
          + Diagram as Code는 아키텍처 다이어그램의 변화를 버전 관리 시스템에서 추적할 수 있게 해줌
     * 지원하는 주요 제공자
          + AWS, Azure, GCP, Kubernetes, Alibaba Cloud, Oracle Cloud 등 주요 클라우드 제공자를 지원
          + 온프레미스 노드, SaaS, 주요 프로그래밍 프레임워크 및 언어도 지원
     * 주의사항
          + 실제 클라우드 리소스를 제어하거나 클라우드 포메이션 또는 테라폼 코드를 생성하지 않음
          + 클라우드 시스템 아키텍처 다이어그램을 그리는 용도로만 사용됨

   Diagrams - 파이썬 코드로 클라우드 아키텍쳐 그리기
   당근마켓에 계신 권민재님이 만드신건데 GitHub Star가 이제 38700개까지 올라갔네요!

        Hacker News 의견

     * 이 프로젝트는 Graphviz의 래퍼로, 스타일이 적용된 .dot 파일을 생성하여 원시 gv 파일보다 더 나은 시각적 효과를 제공함
          + Python을 사용하여 명세하는 것은 이론적으로는 IDE의 하이라이팅, 자동완성 등의 이점을 제공하지만, 실제로는 Python이나 Golang을 배우고 싶지 않은 사람들에게는 적합하지 않음
          + 작은 아키텍처 다이어그램에는 레이아웃 엔진이 괜찮지만, 규모가 커지면 보기 좋지 않음
          + draw.io를 사용하여 의도나 디자인을 설명하고, 동적 요소에는 Graphviz를 스타일과 함께 사용함
          + dot 언어의 확장을 통해 위협 모델링과 렌더링 스타일링을 가능하게 하는 것을 보고 싶음
     * D2는 꽤 멋진 도구임
          + Digital Ocean의 NetBox는 네트워크 자산 데이터베이스에서 다이어그램을 생성할 수 있음
          + NetBox는 네트워크 인프라의 진실의 원천으로 작동하며, 네트워크 구성 요소와 리소스의 의도된 상태를 정의하고 검증함
          + 각 파일은 개별 물리적 장치 유형을 나타내며, NetBox에 로드하여 수동으로 새 장치 유형 정의를 만들 필요를 없앰
          + 장치 이미지는 PNG 형식으로 제조업체별로 정리되어 있으며, NetBox에 로드하여 장치 이미지를 만들 필요를 없앰
     * 개인적으로 시퀀스 다이어그램과 흐름도를 위해 Mermaid를 사용함
          + DaC는 인프라에 더 나은 선택지로 보임
     * DSL을 프로그래밍 언어로 구현하는 것은 정적 데이터 구조를 생성할 때 복잡해 보임
          + DSL은 다른 코드에서 사용될 때 유용하지만, 이 경우에는 대안에 비해 오버헤드가 있음
     * PostScript 프로그래밍 언어는 스택 기반이며, 그림과 다이어그램에 뛰어남
          + Ghostscript는 무료 PostScript 인터프리터임
     * Visio나 LucidChart를 사용하는 것을 싫어하며, Python을 사용하여 다이어그램을 그리는 것을 선호함
          + Python을 사용함으로써 두 가지 작업을 동시에 처리할 수 있음
     * 이러한 라이브러리를 보면서 LLM이 다이어그램을 마스터할 수 있는 효율적인 API를 생각하게 됨
     * ""Generic"" 노드 세트가 있어 기쁨
          + 특정 클라우드 플랫폼의 이름이나 아이콘에 너무 의존하는 아키텍처 다이어그램이 불편함
          + 노드 간의 연결선에 유용한 정보가 표시되지 않음

   plantuml 도 있습니다.
"
"https://news.hada.io/topic?id=17721","Show GN: 자바스크립트 및 타입스크립트 코드의 TODO 코멘트를 분석하고 보고하는 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 자바스크립트 및 타입스크립트 코드의 TODO 코멘트를 분석하고 보고하는 CLI 도구

   Todoctor는 Git을 사용하여 코드베이스의 기술 부채를 분석, 추적 및 시각화할 수 있는 강력한 도구입니다.

   코드의 TODO/FIXME 주석을 수집하고 모니터링하여 시간 경과에 따른 변경 사항을 관찰할 수 있습니다.

   리포지토리:
   https://github.com/azat-io/todoctor

   보고서 예시:
   https://todoctor.azat.io/
"
"https://news.hada.io/topic?id=17714","Chonkie - 빠르고 경량인 RAG용 파이썬 텍스트 청킹 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Chonkie - 빠르고 경량인 RAG용 파이썬 텍스트 청킹 라이브러리

     * 기본 설치 용량이 21MB로 대체 라이브러리 대비 80-171MB 더 작음
     * 다른 인기 라이브러리보다 토큰 청킹 속도가 33배 빠름
     * 토큰, 단어, 문장, 시맨틱, SDPM 등 다양한 청킹 전략 지원
     * transformers, tokenizers, tiktoken 등 주요 토크나이저와 모두 호환
     * 기본 기능만으로는 외부 종속성 없음

  기술적 최적화

     * 더 빠른 토큰화를 위해 멀티스레딩을 지원하는 tiktoken 사용
     * 적극적인 캐싱과 사전 계산 구현
     * 효율적인 시맨틱 청킹을 위한 Running Mean Pooling 사용
     * 필요한 것만 설치할 수 있는 모듈형 종속성 시스템
"
"https://news.hada.io/topic?id=17636"," Hacker News 첫 페이지를 인쇄 신문으로 제작하기 (개인화 가능)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Hacker News 첫 페이지를 인쇄 신문으로 제작하기 (개인화 가능)

     * 해커뉴스 첫페이지 글의 원문 일부를 가져와서 신문처럼 편집
     * Like/Dislike 를 누름에 따라 추천 글이 변경됨
     * 추가 예정 : 전체 코멘트 보기, 멀티 페이지 브라우징, 좋아요 & 싫어요 저장

        Hacker News 의견

     * 이 프로젝트는 전통적인 신문보다는 기업 블로그의 첫 페이지처럼 보임. HN의 현재 모습에 만족하는 사람도 있지만, 프로젝트의 출시에 축하를 보냄
     * Harry Potter 시리즈의 ""Daily Prophet"" 스타일로 신문을 만들고 싶다는 꿈을 가진 사람도 있음. GIF와 효과를 추가하고 싶어함
          + 과거에 E Ink 스마트 스크린을 사용해 벽에 신문을 게시하는 비슷한 프로젝트가 HN에 게시된 적이 있음
     * 뉴스 편집과 레이아웃은 단순히 서체를 사용하는 것 이상의 복잡한 작업임
          + 적절한 레이아웃을 위해 정보 밀도와 가독성의 균형이 중요함. 현재 레이아웃은 미니멀한 가독성에 치우쳐 있음
          + 디지털 출판 레이아웃을 보고 싶다면 오래된 Indesign/Quark Express 잡지를 참고할 것을 권장함
          + 언젠가 뉴스 편집과 웹을 융합한 훌륭한 레이아웃이 나올 것임
     * 이 아이디어는 매우 흥미로움. Hacker News의 기술 중심 콘텐츠와 클래식한 느낌을 결합한 것 같음
     * 정보 표시 방식이 인식에 미치는 영향을 탐구하기 위해 임베딩을 사용해 실험적으로 만든 프로젝트임
          + 상위 100개의 이야기를 가져와 GPT-4로 주요 내용을 추출하고 제목과 내용을 사용해 임베딩을 생성함
          + 좋아요/싫어요는 로컬 저장소에 저장되고 코사인 유사도를 사용해 가장 관련 있는 이야기를 찾음
          + 운영 비용은 하루 약 $10이며, 추가 가치를 제공하는 소액 구독을 고려 중임
     * ""Failed to load stories""라는 메시지만 받는다는 사용자도 있음. 설정이 필요한지 질문함
     * 레이아웃이 깔끔하다는 의견이 있음. PDF로 인쇄를 시도했으나 결과가 좋지 않았음
     * 깨끗한 인터페이스가 개별 게시물에 더 집중할 수 있게 해주는 점이 좋음
          + 좋아요/싫어요 없이 관심 있는 주제를 먼저 볼 수 있도록 커스터마이징 지원이 있었으면 좋겠다는 의견이 있음
     * ""Hacker Monthly""를 기억하는 사람도 있음. 과거에 인기 있는 기사를 PDF로 제공했음
     * 처음에는 좋았으나, 브라우저 창에 이미지가 로드되면서 유용성이 떨어졌다는 의견이 있음
          + 특히 애니메이션 이미지가 주의를 분산시킴. 텍스트만 있는 것이 더 좋다는 의견이 많음
"
"https://news.hada.io/topic?id=17698","경력이 쌓이면서 했던 고민들과 깨달은 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        경력이 쌓이면서 했던 고민들과 깨달은 것들

   경력이 쌓이면서 생각했던 고민들에 대해 작성한 글입니다.
    1. 좋은 커리어란 무엇일까? 앞으로 어떻게 발전해야 할까?
    2. 데이터 과학자, 데이터 분석가. 데이터 직무의 고민. 커리어를 어떻게 발전해야 할까?
    3. 좋은 선택, 의사 결정이란 무엇일까?
    4. 번아웃이 오면 어떻게 해야 할까?
       그 외에 자주 나오는 고민, 질문

   사람마다 생각과 경험이 달라서 다른 분들은 어떻게 생각하고 계실지 궁금하네요. 제 의견이 정답은 아니고 이렇게 생각하는 사람도 있구나 정도로 생각해주시면 좋을 것 같아요.
    1. 커리어 코치해줄 사람 찾기
    2. 허들이 없는 커리어는 엣지가 없음에 유의

   1에 대한 팁이 있으신지 궁금합니다

   좋은 커리어:
   내가 좋아하는 일이고, 처우도 좋고, 남들도 우러러보는 회사라면 좋지않을까요. 그런데 우선순위는 마지막보다는 내가 재밌어하고 처우가 좋은 일이면 작은 스타트업이라도 좋다고 봅니다.

   번아웃: 사람에 따라 바람직하지 않을 수 있습니다만, 전 같은 또는 유사한 직군에서 안해본 일을 찾아서 이직합니다. 예를 들어 모바일 개발자이고 커머스회사에서 일했다면 보안회사로 가본다던지, 모빌리티 회사로 가본다던지 하는 식이요. 아 또, 퇴근해서 절대로 업무관련 행동은 하지 않는 방법도 있고, 마지막으로 그냥 그만두고 한 반 년정도 폐인처럼 게임만하면서 사는 방법도 있습니다. 아예 놓아버리고나서 6개월 정도 쉬어보면 다시 일이 하고 싶어져요 ㅎ

   좋은 글 공유 감사합니다.
"
"https://news.hada.io/topic?id=17645","Ollama 0.4, Llama 3.2 Vision 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ollama 0.4, Llama 3.2 Vision 지원

     * Llama 3.2 Vision은 11B/90B 크기의 이미지 추론 생성 모델
          + 시각 인식, 이미지 추론, 캡션 생성, 이미지에 관한 일반 질문에 대한 답변에 최적화
     * ollama run llama3.2-vision:90b 와 같이 실행한후 이미지를 프롬프트에 추가 해서 질문 가능
     * 사용 예: 필기체 인식, OCR, 차트/테이블 해석, 이미지에 대한 Q/A
"
"https://news.hada.io/topic?id=17634","AI기반 블로그 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI기반 블로그 시스템

   AI를 이용하여 글을 다국어로 번역하여 배포함.
   AI를 이용하여 글 세줄 요약을 지원해줌

   아래 글은 두루미스 소개 글을 AI가 요약한 내용이다.
     * durumis는 무료 블로그 서비스로, 전 세계 38개 언어(현재 베타버전 18개 언어 지원)로 글을 번역하여 송출하며, 생성형 AI 기반 미리보기 및 요약 기능을 제공합니다.
     * 구글 검색 노출, 구글 애드센스 및 애널리틱스 연동을 지원하며, Google Gemini Pro 기반의 다국어 서버 운영으로 빠른 페이지 로딩 속도를 자랑합니다.
     * 댓글 및 추천 기능은 향후 추가될 예정이며, 서비스 이용 방법 및 FAQ는 공식 웹사이트를 참고하시기 바랍니다.


   ps. 이제는 다국어 지원을 UI뿐만 아니라 컨텐츠에서도 AI를 통해서 간편하게 지원이 가능해졌나보네요.

   바로 아래 slop 관련 글과 대비되는게 특이하네요
   이렇게 생성된 게시글은 slop으로 분류해야 하는지 어렵군요

   (개발자입니다.)
   기본적으로 대부분의 컨텐츠는 고객들이 작성한 게시글이 기본입니다. ( 물론 1개의 글을 작성했다 하더라도 17개의 번역본은 .. AI 가 작성한걸로 간주할 수도 있겠습니다만..)

   그리고 말씀하신 slop 으로 생성된 컨텐츠들도 있습니다. ( 일부 계정들은 시험적으로 그리고, 컨텐츠 부족을 채우기 위해서요.. )
   저희는 slop 자체가 문제가 아니라, 컨텐츠의 퀄리티가 더 중요하다고 믿고 있습니다.
   관심을 가져주셔서 감사합니다.

   댓글기능은 최근 추가했습니다!

   와 신기한 서비스네요....!
"
"https://news.hada.io/topic?id=17668","Show HN: 웹에서 플레이 가능한 나의 SF 로그라이크 게임 Asterogue 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: 웹에서 플레이 가능한 나의 SF 로그라이크 게임 Asterogue 공개

        Hacker News 의견

     * Asterogue는 원작 Rogue에서 영감을 받은 그래픽 로그라이크 게임으로, 플레이어는 17층을 내려가서 The Orb를 찾아 우주를 구하는 내용임
          + 다양한 몬스터들이 등장하며, 내려갈수록 난이도가 높아짐
          + 마법 대신 기술을 사용하며, 나노기술 아이템과 화학 물질을 통해 캐릭터를 강화할 수 있음
     * 개발자는 질병으로 인해 휴직 중에 Asterogue를 몇 달 동안 개발했으며, 처음에는 Android와 Windows에서만 출시했음
          + 웹 버전 출시를 통해 더 많은 사람들이 쉽게 게임을 즐길 수 있도록 하고 있으며, 현재 웹 버전이 더 많은 일일 플레이어를 끌어들이고 있음
     * 웹 기반 버전에서는 새로운 결제 모델을 시도 중임
          + 처음 몇 레벨은 무료로 브라우저에서 플레이 가능하며, 전체 게임을 온라인으로 잠금 해제하려면 일회성 결제를 해야 함
          + 이는 플레이어가 게임을 시도해보고, 마음에 들면 계속할 수 있는 균형을 제공함
     * 이번 출시에는 플레이어 피드백을 반영한 여러 수정 사항과 새로운 기능이 포함되어 있음
     * Jupiter Hell은 700시간 이상 플레이한 사용자에 의해 최고의 로그라이크 게임으로 평가받고 있음
          + 실험을 장려하는 스킬 트리, 공정한 학습 곡선, 매력적인 전투 메커니즘 등이 특징임
     * 게임 판매 방식에 대한 질문이 있으며, 이메일을 통해 구매 시 완전한 버전의 링크를 받는지에 대한 궁금증이 있음
     * Chris는 rogule이라는 또 다른 로그라이크 게임의 개발자이며, 이 게임도 즐기고 있음
     * 게임의 아이템 수가 인벤토리 공간에 비해 많다는 의견이 있음
          + 흥미로운 아이템을 발견할 때마다 기존 아이템을 버려야 하는 불편함이 있음
     * 사용자 인터페이스의 발견 가능성을 높게 평가하는 의견이 있음
          + 인벤토리 열기와 닫기 기능에 대한 개선 제안이 있음
     * 아이템을 버릴 때, 아이템이 발 밑에 떨어지지 않고 영구적으로 사라지는 문제에 대한 개선 제안이 있음
     * HJKL 또는 WASD 이동을 허용하는 것이 좋다는 제안이 있음
          + 화살표 키가 직관적이지만 최적의 위치는 아님
     * 게임의 미적 요소를 좋아하는 의견이 있으며, 몇 가지 작은 문제에 대한 개선 제안이 있음
          + 브라우저 뒤로 가기 버튼 사용 시 확인 메시지 추가 제안
          + 게임 내 메시지의 철자 오류 수정 제안
     * 게임의 음식 시스템이 임의적이라는 의견이 있으며, 특정 레벨에서 음식이 발견되지 않는 문제를 언급함
          + 게임이 충돌하는 문제와 몬스터의 행동 차이에 대한 의견이 있음
"
"https://news.hada.io/topic?id=17651","Avaaatars 2.0 - 600개 이상의 무료 사진 아바타","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Avaaatars 2.0 - 600개 이상의 무료 사진 아바타

     * 사용자 정의 가능한 배경과 테두리 모양을 갖춘 600개 이상의 무료 사진 아바타 제공
     * Figma, PNG, Sketch, Adobe XD 또는 Figma 플러그인으로 이용 가능
     * 투명 배경 및 배경색, Circle/Square/Rounded 형태 지원
"
"https://news.hada.io/topic?id=17667","100개의 소소한 것들(100 Scrappy Things)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    100개의 소소한 것들(100 Scrappy Things)

     * 사람들은 흔히 양보다 질이 중요하다고 말하지만, 나는 그렇게 생각하지 않는다.
     * 양이 먼저 충족되지 않으면 질을 높이기 어렵다고 본다.
     * 나는 반복의 힘을 믿으며, 꾸준한 반복이 장기적으로 좋은 결과를 만든다고 생각한다.
     * 나는 2020년 유튜브 채널 구독자 10만 명 달성을 목표로 한 후 1년 5개월 동안 약 200개의 영상을 꾸준히 업로드했고, 결국 10만 명을 달성했다.
     * 더 나은 작가가 되거나 뛰어난 영상을 제작하고 싶다면 ""100개의 소소한 것들""을 실천해보라. 예를 들어, ""100개 글 쓰기""나 ""100개 프로젝트 만들기"" 같은 목표를 세워 하나씩 실천하면 꾸준히 성장할 수 있다.
     * 이러한 방식으로 현재 나의 블로그에는 한 달에 약 8천 명이 방문하고, 유튜브는 한 달에 약 3만 8천 회 조회되며, 프로젝트에서는 한 달에 평균 3천~4천 달러의 수익이 발생하고 있다.
     * 중요한 것은 단순히 100개를 채우는 것이 아니라, 채워가는 과정에서 조금씩 발전하는 데 중점을 두는 것이다.

   “인일기백”, 남들이 한번에 하면 나는 백번 천번을 해서라도 해낸다.
   이 사자성어가 생각나네요

   ""양이 먼저 충족되지 않으면 질을 높이기 어렵다고 본다.""

   우리나라는 부족한 양을 가격으로 밀어부치면서 커 왔으며, 그것을 바탕으로 품질을 올렸는데, 새로운 분야는 가격때문에 양으로 밀어부치기가 힘들어 보입니다.

   장르에 따라 다르게 적용 될 것 같네요.

   유튜브채널이 없어진건가요?
   ------->
   죄송합니다. 이 페이지를 사용할 수 없습니다.
   다른 검색어로 검색해 보세요.

   채널 주소를 바꿨는데 블로그 글에는 업데이트를 안시켜놓은 것 같네요.
   https://www.youtube.com/florinpop
"
"https://news.hada.io/topic?id=17624","유용한 내장 macOS 명령줄 유틸리티","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         유용한 내장 macOS 명령줄 유틸리티

Keychain에 프로그램적으로 접근하기

     * security 명령어를 사용하여 키체인에 저장된 비밀번호를 프로그래밍적으로 접근할 수 있음
       security find-internet-password -s ""https://example.com"";
     * 자동화된 스크립트 작성 시 유용함
     * 보너스: 1Password CLI를 사용하면 1Password 항목에도 접근 가능

터미널에서 열기

     * open 명령어를 사용하면 터미널에서 파일을 열 수 있음
     * open file.txt를 실행하면 Finder에서 파일을 더블클릭한 것처럼 해당 파일 유형의 기본 애플리케이션에서 파일이 열림

복사/붙여넣기

     * pbcopy와 pbpaste는 텍스트를 pasteboard(다른 OS에서는 ""clipboard""라고 부르는 것)에 복사하고 붙여넣을 수 있는 명령줄 유틸리티임
     * pbcopy는 표준 입력으로 주어진 것을 pasteboard에 넣음
          + echo ""Hello, world!"" | pbcopy;
     * pbpaste는 pasteboard에 있는 것을 가져와서 표준 출력으로 출력함
pbpaste
>> Hello, world!

     * 파일에서 데이터를 가져와 브라우저나 다른 GUI 애플리케이션에 넣을 때 매우 유용함

UTC 날짜

     * 서버를 많이 다룰 때는 UTC 기준 현재 시간을 아는 것이 유용할 수 있음(예: 서버 로그 확인 시)
     * 터미널에서 한 줄로 가능함
          + date -u
     * 또는 TZ=UTC date 사용 가능

맥 잠자기 방지

     * 맥이 잠들지 않게 하려면 터미널에서 caffeinate를 실행하면 됨
          + caffeinate
     * caffeinate는 사용자가 중지할 때까지(예: Ctrl+C 누를 때까지) 맥을 깨어있게 함
     * caffeinate는 예전에는 서드파티 도구였지만 이제는 macOS에 내장되어 있음
     * 주로 서버를 실행할 때 맥이 잠들지 않도록 하는 데 사용함

UUID 생성

     * UUID가 필요하다면 uuidgen 명령어를 사용할 수 있음
          + uuidgen
     * 기본적으로 uuidgen은 대문자로 UUID를 출력함
     * tr과 pbcopy를 결합하여 UUID를 소문자로 클립보드에 복사할 수 있음
          + uuidgen | tr '[:upper:]' '[:lower:]' | pbcopy
     * ID가 필요한 단위 테스트를 작성할 때 많이 사용함

언급할 만한 것들

     * mdfind: 터미널에서 Spotlight 검색. 일반적으로 Spotlight 자체(또는 훌륭한 Raycast) 사용
     * say: 이 명령은 맥이 주어진 텍스트를 말하게 함
     * screencapture: 이 명령을 사용하면 스크린샷을 찍어 파일로 저장할 수 있음. cmd-shift-5 사용 선호
     * networksetup: 이 명령을 사용하면 네트워크 설정을 프로그래밍 방식으로 구성할 수 있음. API가 매우 위협적이어서 많이 사용하지는 않음

   터미널에서 특정 폴더를 파인더로 열때

   open -a ""Finder"" [경로]

   로 열수 있어요.

   caffeinate 명령어는 자주 쓰고 있습니다ㅋㅋ

   집에서 안쓰는 맥북 서버로 쓰면서 안꺼지게하려고 외부 앱 썼었는데 caffeinate 쓰면 되겠네요 ㅎ

   몇 개는 처음 보는데 유용할 것들이네요

   커맨드는 아니지만, utc 확인용으로 아예 상단 바에 넣어서 쓰고 있습니다.
   https://sindresorhus.com/utc-time

   open 은 뒤에 -a 옵션으로 특정 프로그램 지정하는 것까지 같이 쓰면 더 편하더라고요.

   예를 들면, open . -a Visual\ Studio\ Code

   vsc는 code . 하셔도 될텐데?!?

   dmg 로 설치한 경우는 code 명령어가 없지 않나요?
   그리고 intellij 등으로 열고 싶을 때도 유용합니다 :)

   VS code 내에서 설정할 수 있습니다.
   command+shift+p 누르시고 shell command라고 치시면 됩니다.

   저는 인텔리제이는 i 로 alias 하는 등으로 해두어서 i . 또는 i file.txt 해주면 바로 인텔리제이에서 열리도록 해두었습니다. :-)

   맥 커맨드 유틸 유용한게 되게많죠 저도 pbcopy, pbpaste는 자주 사용하는 것 같습니다

   pbcopy 유용하게 사용하고 있습니다.

   networkQuality 도 있어요

        Hacker News 의견

     * afconvert는 Core Audio 프레임워크의 AAC 코덱을 포함한 오디오 파일 형식 변환기임
          + 예시: afconvert in.wav -o out.m4a -q 127 -s 2 -b 160000 -f m4af -d 'aac '
     * diskutil은 고정 및 이동식 저장소를 위한 다양한 도구를 제공함
          + 예시: mb=300; diskutil eraseVolume APFS myramdisk \hdiutil attach -nomount ram://$((mb*2048))``
     * hear 앱은 macOS의 음성 인식 및 받아쓰기를 명령줄에서 사용할 수 있게 함
          + 링크: https://sveinbjorn.org/hear
     * open -n file.pdf는 Preview 앱의 새 인스턴스를 열어 동일한 파일을 두 번 열 수 있게 함
     * caffeinate -d는 디스플레이가 꺼지지 않도록 하여 마우스를 움직이지 않고도 화면을 볼 수 있게 함
     * 터미널 버전의 Disk Utility는 GUI보다 더 나은 성능을 제공함 (앱이 멈추거나 오류가 발생하지 않음)
          + 문서 링크: https://ss64.com/mac/diskutil.html
     * macOS용으로 쉽게 설치할 수 있는 명령줄 유틸리티 목록이 있음
          + 링크: https://terminaltrove.com/categories/macos/
     * https://ss64.com/은 유용한 리소스로, 더 일찍 알았으면 좋았을 것 같음
     * nc는 임의의 TCP 및 UDP 연결 및 수신을 위한 도구임
     * networkQuality는 속도 테스트 및 네트워크 스트레스 도구임
     * system_profiler는 셸 스크립트에서 광범위한 시스템 정보를 가져오는 유용한 방법임
     * wdutil은 Wireless Diagnostics 애플리케이션의 기능을 명령줄 형태로 제공함
     * 가장 쓸모없는 macOS 명령줄 유틸리티는 pdisk임
          + Apple 디스크 파티셔닝 스킴을 사용하여 디스크를 파티셔닝하는 메뉴 기반 프로그램임
     * Quick Look으로 파일을 미리보기 위한 원라이너가 있음 (ql로 별칭 설정)
          + 예시: qlmanage -p $argv >/dev/null 2>&1
     * 사이트가 다운된 것 같음
          + 아카이브 링크: https://archive.is/kGmn6
"
"https://news.hada.io/topic?id=17709","Show HN: Krita RGBA 기술 – 오픈소스 아트에서 현실적인 금속 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show HN: Krita RGBA 기술 – 오픈소스 아트에서 현실적인 금속 구현

    Krita용 금속 효과 브러시 세트

     * 소개
          + 이 브러시 세트는 Krita에서 금속 효과를 모방하는 브러시 모음임.
          + 첫 번째 브러시 제작 시도이며, 사용자의 피드백을 환영함.
          + Ko-Fi와 GitHub에서 다운로드 가능함.
     * 구성 요소
          + 브러시 32개: 글리터, 금박, 망치로 두드린 금속 등 다양한 효과 포함.
          + 텍스처 13개: 녹청 그룬지, 금속 호일 등 포함.
          + 패턴 3개: 아르데코와 우키요에에서 영감을 받은 패턴.
          + 팔레트 1개: 실제 금속 색조를 반영한 팔레트.
          + 브러시팁 23개: 사용자 정의 브러시 제작을 위한 RGBA 팁 포함.
          + PDF 가이드 1개: 설치 가이드, 참고 자료 및 창의적 영감 제공.
     * 특징
          + 완전히 무료로 제공됨.
          + 깔끔한 아이콘과 설명적인 제목.
          + 모든 항목에 태그가 붙어 있음.
          + PDF 가이드 포함.
          + RGBA 및 무제한 색상 지원.
          + 펜과 마우스에 최적화됨.
     * 라이선스
          + CC-BY-SA 라이선스 사용.
          + 일부 브러시는 Memileo의 리소스를 사용함.
     * 도움말
          + 추가 정보는 Krita 아티스트 포럼에서 확인 가능함.

        Hacker News 의견

     * README.md 파일에서 Krita를 처음 언급할 때 Krita 저장소나 웹사이트로 링크를 걸어달라는 요청이 있음
     * 다양한 예술 매체를 단일한 방법으로 사용할 수 있는 Krita의 기능에 감탄함
     * Krita를 시도해볼 것이라고 함
     * Krita가 무엇을 하는지, 그림을 그리면서 노멀 맵을 생성하는지 궁금해함
     * Krita의 아름다운 결과물에 감사하며, 작업에 대해 칭찬함
     * 페인트의 훌륭한 결과물에 대해 칭찬함
     * 공유해준 멋진 텍스처에 감사하며, 생성적 예술 프로젝트에 사용해볼 것이라고 함
     * 공유에 감사하며, 시도해볼 것을 기대함
     * 멋진 작업이라고 칭찬함
     * 훌륭한 데모 gif에 깊은 인상을 받았다고 함
     * Krita를 시도해볼 핑계를 찾고 있었는데, 이번 기회가 그것이 될 것이라고 함
     * 금속 질감을 웹에서 구현할 수 있는 FOSS 라이브러리를 만들었다고 소개함
"
"https://news.hada.io/topic?id=17720","Ask GN: 혹시 무료 행사도 올려도 되나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 혹시 무료 행사도 올려도 되나요?

   저희 친구들끼리 커서를 이용한 플러터 서비스만들기 모임을 무료로 만들어보고자 하는데 혹시 긱뉴스에 올리는게 가능한가 궁금해서 문의드립니다.

   항상좋은 뉴스 잘 보고있습니다. 감사합니다.

   긱뉴스는 주로 기술 및 스타트업 관련 토론과 정보 공유를 지향합니다. 모임 홍보나 광고성 게시물은 제한하고 있습니다. 서비스에 대한 질문은 Ask에 작성하는 대신 news@hada.io로 보내주세요.

   넵 친절한 답변 감사합니다.
"
"https://news.hada.io/topic?id=17678","Microsoft/Data-Formulator - AI로 시각화 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Microsoft/Data-Formulator - AI로 시각화 생성하기

     * LLM을 사용하여 데이터를 변환하고 데이터 시각화 작업을 신속하게 처리하는 Microsoft Research의 애플리케이션
     * 분석가가 AI로 데이터를 변환하고 풍부한 시각화를 Iterative하게 만들수 있도록 지원
     * 사용자가 모든 것을 자연어로 설명해야 하는 대부분의 채팅 기반 AI 도구와 달리, 데이터 포뮬레이터는 사용자 인터페이스 상호 작용(UI)과 자연어(NL) 입력을 결합하여 더 쉽게 상호 작용 가능
     * Python PIP로 설치하거나 GitHub 코드스페이스에서 사용 가능
     * 기본 사용 방법
          + 자신의 OpenAI 키를 제공하고 모델(GPT-4o 권장)을 선택한 다음 데이터 집합을 선택
          + 차트 유형을 선택한 다음 데이터 필드를 차트 속성(x, y, 색상, ...)으로 끌어다 놓아 비주얼 인코딩을 지정
     * 초기 데이터셋을 넘어서 시각화 생성하기
          + Encoding shelf에 현재 data에 존재하지 않는 field 이름을 입력 가능
               o Data Formulator에게 기존 데이터에서 계산이나 변환이 필요한 시각화를 생성하라고 지시하는 것
               o 선택적으로 자연어 프롬프트를 제공해서 의도를 설명하고 명확히 할 수 있음(필드 이름이 자명할 경우 필요 없음)
          + Formulate 버튼을 클릭
               o Data Formulator가 인코딩과 프롬프트를 기반으로 데이터를 변환하고 시각화를 인스턴스화함
          + 데이터, 차트 및 코드를 검사
          + 기존 차트를 기반으로 새 차트를 생성하려면 자연어로 후속 작업을 수행
               o 후속 프롬프트 제공(예: ""상위 5개만 표시!"")
               o 새 차트에 대한 비주얼 인코딩을 업데이트할 수도 있음

   gpt와 pandas로 존버해보겠습니다

   (앞으로 이 일을 더 하려면)개발도구 아니 개발언어를 새로 배워야 할 거 같다는 생각이 듭니더.
"
"https://news.hada.io/topic?id=17619","모르는 게 약이다: 모르는 것이 사실 유리한 것이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모르는 게 약이다: 모르는 것이 사실 유리한 것이다

     * 보통 타인의 문제 상황과 맥락을 완전히 이해하면 도움을 줄 수 있다고 생각한다
     * 하지만 이는 뭘 해도 '부처님 손바닥 위'에 불과할 수 있다 (이미 해봤던 것을 제안할 가능성이 높음)
     * 상대방이 보지 못했던 관점을 제시할 때 실질적인 문제 해결에 도움이 될 수 있다
     * 모른다는 것을 새로운 가능성을 찾아낼 수 있는 '유리한 상태'라고 생각하는 것이 좋다

   알고 있다고 믿고 있는 부분이 빙산의 일각일 때, 깊게 사고하기보다 편향적으로 사고하는것의 위험성일까요. 스스로도 모르고 있다는 사실을 몰라서 시야가 좁아지는것보다 무얼 모르고 있는지 냉철하게 돌아보는것이 유리한 순간도 있겠네요.

   의견을 주고 받을 때 내가 아는것을 공유한다는 나만의 관점이 아니라 서로 모르는 지점을 짚어가봐야겠습니다. 나도 모르고 상대도 모르던 우리의 새로운 관점을 발견하면서 서로 이득이 되는 관계가 될 수 있으면 좋겠네요.

   모를 때 전략을 세우고 알게된 후 선택하거나 다시 전략을 짜는 방식으로 접근해도 좋을 거 같네요.

   이미 했던것을 다시 제안하는 경우가 많습니다.
   그래도 제안하는게 좋습니다.
   그리고 상대 이야기를 많이들어줘야합니다.
   제안하고 본인이 했던 것들을 다시 말해주면서 어느 순간 본인들이 정리가 되면서 해결책을 찾습니다.
   많이 들어주는 것이 중요합니다

   저도 이런 경험이 많았던 것 같습니다.

   뭘 모르는지도 모르는 상황이라면?

   컨설팅 업체들이 슬퍼합니다?

   아는 것이 힘이라고 생각했는데 정 반대로 생각 할 수도 있겠군요

   뭐든 항상 두 가지 관점이 있죠.. 관점마다 장단점이 있고 그걸 잘 활용하는 것이 중요한법..

   무언가를 안다는 것이 사고의 범위를 제한시킬 수 있다는 것에는 동의하지만, 반대로 알지 못하는 것이 사고의 범위를 제한할 수도 있죠.
   저도 연구가 업이라서, 이런 저런 아이디어를 내어야 하는 입장인데, 대부분 모르는 것보다는 아는 것이 더 좋은 결과를 내었습니다.
   유연한 사고를 하는 것도 역시 훈련이 필요한 일이었고요.

   규칙 모르고 슬롯 머신 돌리면 성공/실패가 50 대 50이다 이런걸 말하는건 아니죠..?
"
"https://news.hada.io/topic?id=17643","QNX, 비상업적 용도 무료 제공 및 RPi 이미지 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    QNX, 비상업적 용도 무료 제공 및 RPi 이미지 추가

     * QNX 소프트웨어 무료 접근
          + QNX는 비상업적 용도로 QNX 소프트웨어와 리소스를 무료로 제공하여 개발자와 엔지니어를 지원함.
          + 취미로 개발하는 사람, 학생, 산업 전문가 모두에게 실용적인 도구와 교육, 커뮤니티를 제공함.
     * 라이선스 옵션
          + 다양한 라이선스 옵션이 있으며, 적합한 라이선스를 찾기 위한 가이드 제공.
     * QNX 소프트웨어 개발 플랫폼 8.0
          + QNX SDP 8.0은 차세대 시스템 온 칩(SoC)을 위한 개발 플랫폼으로, 미래의 실리콘 발전을 활용할 수 있도록 설계된 아키텍처를 기반으로 함.
          + 사물인터넷(IoT)에서 일관된 실시간 성능을 제공하며, 업그레이드된 툴체인과 디버깅 및 프로파일링을 위한 새로운 유틸리티 포함.
     * QNX 커뮤니티 참여
          + GitLab의 QNX 커뮤니티에서 다양한 리소스를 활용하고, QNX에서 실행되는 오픈 소스 프로젝트에 접근 가능.
     * FAQ
          + 이 이니셔티브의 목적은 비상업적 용도로 QNX 소프트웨어와 리소스를 쉽게 접근할 수 있도록 하여 임베디드 시스템 커뮤니티에서 혁신과 기술 개발을 촉진하는 것임.
          + QNX SDP 8.0을 무료로 개발할 수 있으며, ""비상업적 사용""의 의미와 관련된 정보 제공.
          + QNX SDP 7.1도 이 이니셔티브의 일부로 제공됨.
     * 커뮤니티 FAQ
          + QNX는 시작을 돕기 위한 훌륭한 문서와 데모 프로젝트를 제공함.
          + Raspberry Pi 4에 QNX SDP 8.0 이미지를 플래시하여 개발을 시작할 수 있음.
     * 지원 및 문의
          + myQNX 계정 등록 문제나 제품 라이선스 관련 문제 발생 시 myqnx@blackberry.com으로 문의 가능.

        Hacker News 의견

     * QNX는 두 번의 오픈 소스 시도 후 다시 닫혔던 경험이 있음. 과거에는 Firefox, Eclipse, GCC 등과의 호환성이 있었으나, Harman과 RIM에 인수된 후 오픈 소스 개발이 중단되었음
          + QNX는 계약 조건에 따라 언제든지 라이선스를 종료할 수 있는 위험이 있음
          + Unreal Engine의 성공적인 라이선스 모델을 참고하여 QNX의 채택을 늘리는 것이 필요함
     * QNX 8.0의 비상업적 사용에 대한 개발자 조건 링크가 제공됨
          + 법적 조언 없이 사용하지 말 것을 권장하며, 사용자가 법적 책임을 지지 않도록 주의해야 함
          + AWS 외의 클라우드 사용은 제한되며, OSI 정의에 맞지 않는 라이선스는 사용 불가함
     * Linux의 실시간 운영체제 기능이 성숙해지면서 QNX의 필요성이 줄어들었음
          + QNX의 라이선스 변경 위험 때문에 사용을 꺼리는 의견이 있음
          + QNX가 진지하게 채택되려면 완전한 오픈 소스가 필요함
     * QNX와 BeOS는 과거에 뛰어난 성능을 보여주었으나, 현재는 iOS가 그나마 비슷한 경험을 제공함
     * QNX의 소스 코드는 2007년부터 2010년까지 공개되었음
          + 향후 소스 코드 접근을 제공할 계획이 있는지에 대한 질문이 제기됨
     * 이전 회사에서 QNX를 사용하여 모바일 네트워크 라우터를 개발했으며, QNX의 IPC 기능이 중요했음
          + 사용자 공간에서 장치 드라이버를 재시작할 수 있는 기능이 유용했음
     * QNX 웹사이트의 다운로드 제한과 라이선스 메커니즘을 제거하면 취미 개발자들이 더 쉽게 접근할 수 있을 것이라는 의견이 있음
     * QNX의 강점을 활용한 블로그 포스트 시리즈를 통해 더 많은 사용자에게 다가가는 것이 좋을 것이라는 제안이 있음
     * QNX의 단일 플로피 데모가 인상적이었으며, 법적 문제를 해결하여 오픈 소스를 추진하기를 바라는 의견이 있음
"
"https://news.hada.io/topic?id=17637","Show GN: 브라우저에서 시작하는 버튜버 방송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 브라우저에서 시작하는 버튜버 방송

     * 브라우저에서 mediaPipe를 사용하여 카메라를 통해 인식한 사용자 모션을 활용해서 캐릭터 모션을 제어하는 웹앱입니다.
     * 대부분의 버츄얼 스트리머 분들이 방송 시 어깨 위만 활용하시는것 같아 최대한 심플하게 구현해보았습니다.
     * OBS 사용을 염두해서 PIP 기능을 적용해 실제 스트리머 분들이 방송 셋팅을 쉽게 하실 수 있도록 구성하였습니다,
     * 드래그 앤 드랍으로 직접 사용하실 vrm 파일을 업로드 하실 수 있습니다. 해당 파일은 서버에 업로드 되지 않고 사용자의 브라우저 안에서만 활용됩니다.
     * 카메라가 정면에 위치하지 않을 경우 ""Calibration"" 버튼을 사용해서 조정할 수 있습니다.
     * 많이들 사용하시는 와루도에 비할 바는 못되겠지만 최대한 가볍게 시작하실 수 있도록 해보았습니다.
"
"https://news.hada.io/topic?id=17707","호주 3G 종료 – 4G/5G 휴대폰 차단 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       호주 3G 종료 – 4G/5G 휴대폰 차단 이유

호주의 3G 종료 - 왜 4G/5G 전화가 차단되었는가

  소개

     * 호주는 현재 통신 환경의 큰 변화를 겪고 있음. 이는 3G 모바일 네트워크의 종료와 관련이 있음.
     * 3G 종료는 4G 및 5G의 고속 통신 시대를 열기 위한 조치로, 2019년 말 Telstra에 의해 처음 발표되었음.
     * 그러나 이 과정은 정부와 규제 기관의 준비 부족으로 인해 혼란과 지연을 초래했음.

  2024년 10월 28일 종료

     * Telstra와 Optus는 10월 28일에 3G 네트워크 종료를 시작했음.
     * 많은 고객들이 이로 인해 4G 또는 5G 기기가 완전히 차단될 것이라는 사실을 알지 못했음.

  문제의 원인

     * 4G 및 5G는 데이터 전용 표준으로, 전통적인 회로 교환 통화 기능이 없음.
     * VoLTE(Voice over LTE)를 통해 4G 네트워크에서 통화가 가능하지만, 이는 소프트웨어/펌웨어 지원이 필요함.

  소비자에 미치는 영향

     * 많은 소비자들이 3G 종료로 인해 예상치 못한 비용을 부담하게 되었음.
     * 정부와 규제 기관은 소비자 보호에 실패했으며, 많은 사람들이 새로운 기기를 구매해야 하는 상황에 처했음.

  관광객 및 로머에 미치는 영향

     * 국제 관광객과 로머의 기기도 Telstra와 Optus 네트워크에서 차단되었음.
     * 이는 기술적 복잡성과 제한으로 인해 발생한 문제임.

  결론

     * 3G 종료는 기술적 표준화의 부족과 정부 및 산업의 준비 부족으로 인해 많은 문제를 야기했음.
     * 소비자와 산업 모두가 이로 인한 영향을 받고 있으며, 보다 철저한 정책과 준비가 필요함.

        Hacker News 의견

     * 영국에서는 4G/5G 네트워크 도입 초기부터 규제 관점에서 다르게 처리되어, 더 나은 결과를 얻음
          + 영국에서는 휴대폰이 특정 지역에서 긴급 전화를 걸 수 있어야만 해당 지역에서 신호를 제공할 수 있도록 허용함
          + 휴대폰이 네트워크에 연결되었다고 표시하려면, 2G/3G 커버리지가 있거나 VoLTE를 지원해야 함
          + 새로운 LTE 및 5G 스펙트럼은 VoLTE를 지원하는 장치에만 제공됨
          + 이 접근 방식은 모든 장치가 VoLTE를 지원하도록 유도함
          + 데이터 전용 장치는 이 요구 사항에 포함되지 않음
          + 로밍 장치는 영향을 받지 않음
     * 독일에서는 3G를 종료하고 2G를 기본 서비스로 유지하여 좋은 결정을 내림
          + 데이터 통신은 4G/5G로 전환 가능하며, 음성 통신은 2G를 백업으로 사용 가능함
     * 멜버른에서는 3G 종료로 인해 200대의 트램과 2500대의 버스의 티켓 발권 단말기가 고장남
     * 정부의 규제 부족이 문제의 원인으로 지적됨
          + 정부는 통신사에 책임을 묻고, 긴급 통화가 신뢰성 있게 작동하는지 증명하도록 해야 함
     * VoLTE는 정의가 부족하여 신뢰성 문제를 야기함
          + IP 기반 시스템을 설계할 수 있지만, VoLTE 사양이 오랫동안 정의가 부족했음
     * 새로운 규칙은 새로 제조/판매된 휴대폰에 적용되어야 함
          + 기존 휴대폰도 긴급 상황에서 통신 가능하도록 해야 함
     * 호주에서 관광객이 사용하는 휴대폰이 WiFi와 WhatsApp 같은 앱으로만 작동할 가능성이 있음
          + 관광객들은 공항에서 저렴한 휴대폰을 구매하는 방법을 사용함
"
"https://news.hada.io/topic?id=17606","안전한 Go 코드 작성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             안전한 Go 코드 작성하기

     * Go 코드를 작성할 때 보안을 고려하는 것은 복잡한 작업
     * 몇 가지 구체적인 실천 방법을 제시하여 지속적으로 적용할 경우 견고하고 안전하며 성능이 뛰어난 코드를 작성할 수 있도록 도움을 줌

Go 버전 최신 상태 유지

     * 프로젝트에서 사용하는 Go 버전을 최신으로 유지해야 함
     * 최신 언어 기능을 사용하지 않더라도 Go 버전을 올리면 발견된 취약점에 대한 모든 보안 패치를 받을 수 있음
     * 새로운 Go 버전은 최신 의존성과의 호환성도 보장함
     * Go 릴리즈 히스토리 사이트에서 어떤 Go 릴리즈에서 어떤 보안 이슈와 CVE가 해결되었는지 확인하고 프로젝트의 go.mod 파일에서 최신 버전으로 업데이트할 수 있음
     * Go 버전을 업그레이드한 후에는 호환성 및 의존성 문제가 발생하지 않는지 확인해야 함
     * 정적 코드 분석기를 사용하여 코드 품질과 보안을 평가할 수 있음

    vet

     * Go 자체 제공 go vet 명령어로 Go 코드 분석 가능
     * go vet 명령어는 인수 없이 실행하면 기본 허용된 모든 옵션으로 실행됨
     * 소스 코드를 스캔하고 잠재적 이슈를 보고함
     * 가장 일반적인 이슈로는 고루틴 실수, 사용하지 않는 변수, 도달할 수 없는 코드 영역 등이 있음

    staticcheck

     * 서드파티 린터인 Staticcheck은 버그를 찾고 성능 문제를 탐지하며 Go 언어 스타일도 적용함
     * 발견된 이슈를 설명하고 예제와 함께 수정사항을 제안함
     * CI 파이프라인에서 실행하는 것 외에도 독립 실행 파일로 설치해 로컬에서 코드 스캔 가능
     * 설치한 버전을 확인하고 스캔 실행 준비가 되었는지 확인
     * 인수 없이 실행하면 기본적으로 모든 코드 분석기 호출
     * NGINX Agent GitHub 저장소에서 어떤 것을 찾을 수 있는지 예시 보기
     * 스캔 결과는 deprecated 패키지/메서드/함수, 사용하지 않는 변수/필드, 코드 품질 관련 문제 등 3가지로 분류할 수 있음

    golangci-lint

     * golangci-lint는 go install 명령어로 설치 가능
     * 설치가 잘 되었는지 버전을 확인
     * 인수 없이 호출하면 모든 린터가 실행됨
     * 이전에 복제한 agent 저장소에서 어떤 경고와 제안사항을 보여주는지 확인
     * 린터가 정확한 파일과 라인을 가리킴
     * 코드를 평가하고 변경한 다음 린터를 다시 실행하고 모든 단위 테스트 실행
     * 테스트가 통과되면 업데이트된 코드를 커밋하고 원격으로 push

경쟁 상태(Race Condition) 탐지

     * 여러 고루틴이 동시에 리소스에 액세스하려고 할 때 경쟁 상태가 발생할 수 있음
     * 적어도 하나의 고루틴이 리소스를 변경하려고 할 때 탐지됨
     * Go는 -race 인수와 함께 test 도구를 사용하여 이러한 상태를 테스트하는 것을 기본적으로 지원함
     * 경쟁 탐지기는 실행된 코드만 평가하고 실행되지 않은 코드 경로는 무시하므로 데드 코드가 없는지 정적 코드 분석기를 먼저 실행해야 함
     * 테스트를 병렬로 실행하면 동시성 문제를 탐지할 가능성이 높아짐

취약점 소스 코드 스캔

    govulncheck

     * CVEs 데이터베이스에 나열된 알려진 취약점에 대해 코드 베이스를 스캔하는 도구
     * Go 팀에서 개발하며 Go 취약점 전용 데이터베이스가 스캐너에 정보를 제공함
     * 최신 버전 설치 후 기본 기능 시도
     * habit 저장소 복제 후 루트 디렉터리에서 도구 실행
     * 취약점이 발견되지 않음
     * 이진 파일을 스캔하면 다른 취약점이 발견될 수 있음
     * Go 버전을 최신으로 업그레이드하고 의존성을 가져온 다음 소프트웨어와 의존성에 CVE가 없는지 확인

    gosec

     * 안전하지 않은 코드 구성을 찾는 데 도움이 되는 정적 코드 분석기
     * 로컬 시스템이나 GitHub Action으로 CI 파이프라인에서 실행 가능
     * 스캔 구성을 위한 옵션과 규칙 목록이 다양함
     * 스캔할 Go 코드가 있는 GitHub 저장소 복제 후 루트 디렉터리에서 스캔 시작
     * 스캔 보고서에서 심각도와 신뢰도별로 정렬된 잠재적 문제 목록 확인 가능
     * 리포트된 CWE를 확인하고 나열된 약점에 대한 자세한 내용 학습

퍼징

     * 코드 품질을 확인하고 취약점을 발견하는 마지막 방법
     * 코드 테스트 적용 범위를 사용하여 무작위로 생성된 입력 데이터를 조작하는 자동화된 특수 테스트
     * 버퍼 오버플로, SQL 인젝션, DoS 공격, XSS 공격 등의 잠재적 보안 결함을 찾는 데 매우 유용함
     * 많은 입력 조합이 자동으로 생성되므로 개발자가 수백, 수천 가지 입력 데이터 조합을 직접 고민할 필요가 없음

        Hacker News 의견

     * govulncheck는 취약한 코드가 실제로 도달되는지를 확인하는 도구로, 프로그램의 의존성을 점검하는 것보다 유용함
     * Google의 capslock 프로젝트를 잊지 말고 참고할 필요가 있음
     * go vet와 go test -race에 대한 유용한 팁이 포함되어 있음
     * Go는 메모리 안전하지 않지만, 다른 언어보다 안전하게 코딩하기 쉬움
          + Go의 명확한 구문 덕분에 함수의 동작과 데이터 구조를 쉽게 이해할 수 있음
          + AI 도구가 Go와 잘 작동하는 이유는 함수 내의 문맥이 명확하기 때문임
     * Semgrep은 정적 분석을 통해 언어와 공통 프레임워크에 대한 검사를 수행하는 훌륭한 도구임
          + Semgrep의 오픈 규칙을 GitHub에서 확인 가능함
     * Go의 보안 평판에 대한 의문이 제기됨
          + Go는 일반적으로 안전하고 안정적이라고 생각되며, .NET과 같은 다른 도구와 비슷한 수준임
     * gosec에 대해 새롭게 알게 되었음
     * 9년 동안 Go 앱을 유지보수하면서 Go 버전과 모듈을 쉽게 업그레이드할 수 있었음
          + GitHub가 자동으로 취약성을 알려주며, 99%의 경우 변경 없이 작동함
     * Go는 실제로 메모리 안전하지 않음
          + 원자성이 단어 크기 값에만 보장되며, 인터페이스 포인터나 슬라이스 같은 이중 단어 값은 동시성에서 메모리 안전성을 해칠 수 있음
     * Go는 좋지만, 최근 제네릭 사용이 증가하면서 코드 가독성이 떨어지고 있음
          + 이전의 제네릭을 거의 사용하지 않은 Go 코드보다 읽기 어려워짐
"
"https://news.hada.io/topic?id=17662","토큰화 및 구문 분석에 Rust를 사용하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       토큰화 및 구문 분석에 Rust를 사용하는 이유

매크로

     * Rust의 매크로는 코드 중복 제거와 반복 감소를 위해 사용됨.
     * sqleibniz의 문장 노드는 Node 트레이트를 구현해야 하며, 이는 많은 코드 중복을 초래함.
     * 매크로를 사용하여 구조체 정의와 Node 트레이트 구현을 자동화할 수 있음.

코드 중복 제거 매크로

     * 매크로는 구조체를 정의하고, 문서 주석을 추가하며, Node 트레이트를 만족시키는 함수를 구현함.
     * 매크로는 반복적인 메타변수 정의를 통해 다양한 필드를 추가할 수 있음.

테스트

     * Rust에서는 Go의 테이블 기반 테스트와 유사한 방식을 구현할 수 있음.
     * test_group_pass_assert!와 test_group_fail! 매크로를 사용하여 다양한 입력과 예상 출력 쌍을 테스트할 수 있음.

파서 테스트

     * 파서 모듈에서도 유사한 매크로를 사용하여 SQL 문장의 결과를 테스트함.
     * EXPLAIN SQL 문장을 테스트하기 위해 sql_stmt_prefix 함수가 사용됨.

매크로의 단점

     * rust-analyzer는 매크로 내부에서 잘 작동하지 않으며, 문서화가 부족함.

문자 매칭

     * Rust의 matches! 매크로를 사용하여 문자를 쉽게 비교할 수 있음.
     * 주어진 문자가 SQLite 숫자인지 확인하는 예시가 있음.

토큰 매칭

     * 렉서가 문자 스트림을 토큰 스트림으로 변환한 후, 파서는 이를 사용하여 구문 트리를 생성함.
     * match 문을 사용하여 토큰 유형을 인식함.

오류 표시

     * 오류 처리를 통해 사용자에게 명확한 오류 메시지를 제공함.

선택적 기능

     * Rust의 Option 타입을 사용하여 값이 존재하는지 확인하고, 조건을 체크하거나 기본값을 제공할 수 있음.
     * is_some_and, map, map_or 등의 메서드를 사용하여 코드 가독성을 높임.

반복자

     * Rust의 반복자를 사용하여 문자를 필터링하고, SQLite의 숫자 파싱 규칙에 맞게 처리함.

        Hacker News 의견

     * Rust의 차용 검사기(borrow checker)와 메모리 관리의 어려움으로 인해 Rust 사용에 어려움을 겪음. Rust의 함수형 프로그래밍(FP) 요소를 좋아했지만, 다른 언어를 찾기로 결정함. OCaml을 발견하고 만족스러움을 느낌
     * Rust와 PL 아이디어에 대한 경험이 부족한 것으로 보임. AST는 대수적 데이터 타입으로 정의하는 것이 더 간단할 것이라고 생각함. 매크로는 대부분의 언어에서 다르게 작동하지만, 주로 코드 중복 제거와 반복 감소를 위해 사용됨
     * Haskell로 작성한 파서는 단순성과 가독성 면에서 뛰어남. BNF와 거의 비슷하게 읽히며 기술적인 절차가 거의 없어 실제 문법에 집중할 수 있음
     * Ragel, Go, Java, C++, C로 파서를 작성한 경험이 있음. C로 JSON 파서를 작성하는 것이 Rust 코드보다 더 간단할 수 있음. eBNF로 파서를 만들 수 있는 포화점에 도달할 때까지 파서 인프라가 발전함
     * Rust로 eBPF 디스어셈블러와 에뮬레이터를 작성했으며, Rust가 파싱 작업에 적합하다고 생각함. 그러나 매크로 사용이 언어 내에서의 작업과는 다르게 느껴짐
     * Rob Pike의 Go에서의 렉시컬 스캐닝에 대한 강연을 좋아함. 교육적이고 우아한 접근법임
     * 파서 조합기 라이브러리를 사용하여 고성능 프로토콜 파서를 임베디드 환경에 배포할 수 있음. 동일한 라이브러리를 사용하여 임베디드 프로토콜 파서를 작성할 수 있음
     * Rust에서 전체 AST 파서를 작성할 때 구체적인 AST 타입의 계층 구조를 표현하는 것이 어려웠음. 이상한 타입 트릭과 매크로를 사용해야 했음
     * sqlite 구문을 파싱하는 것은 어려운 작업임. sqlite는 영감을 주는 소스임. 레일로드 다이어그램이 매우 유용하며, 레몬 파서 생성기는 충분한 인정을 받지 못함
     * 대수적 데이터 타입을 가진 언어는 sqlite 구문 파싱에 적합함. Typescript도 좋은 선택이 될 수 있음. Rust로 파서를 작성하는 방법에 대한 간단한 소개를 작성함
"
"https://news.hada.io/topic?id=17657","NPM에 업로드된 수백 개의 악성 코드 라이브러리가 개발자 머신에 멀웨어를 설치중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             NPM에 업로드된 수백 개의 악성 코드 라이브러리가 개발자 머신에 멀웨어를 설치중

     * 현재 진행 중인 공격은 NPM(Node Package Manager) 저장소에 수백 개의 악성 패키지를 업로드하여 해당 코드 라이브러리에 의존하는 개발자 장치를 감염시키려 함
     * 악성 패키지의 이름은 Puppeteer, Bignum.js 등 합법적인 코드 라이브러리 및 다양한 암호화폐 라이브러리와 유사함
     * 이 캠페인은 이 글이 게시될 당시에도 활성화되어 있었으며 보안 회사인 Phylum이 발견함

공급망 공격에 주의해야 함

     * 멀웨어 제작자들은 의도를 숨기고 자신들이 제어하는 원격 서버를 난독화하는 새로운 방법을 모색해야 했음
          + 이는 공급망 공격이 계속해서 활발히 이루어지고 있음을 보여주는 지속적인 경고임
     * 설치된 악성 패키지는 악성 2단계 멀웨어 페이로드를 받기 위해 연결하는 IP 주소를 숨기는 새로운 방법을 사용함
          + 1단계 코드에는 IP 주소가 전혀 나타나지 않음. 대신 이더리움 스마트 계약에 액세스하여 이더리움 메인넷의 특정 계약 주소와 관련된 문자열(IP 주소)을 가져옴
          + Phylum에서 분석한 패키지에서 반환된 IP 주소는 hxxp://193.233.201[.]21:3001 이었음
     * 이더리움 블록체인에 데이터를 저장하면 공격자가 이전에 사용했던 IP 주소를 볼 수 있음
          + 이더리움은 지금까지 본 모든 값의 변경할 수 없는 기록을 저장함
          + 따라서 이 위협 행위자가 사용한 모든 IP 주소를 볼 수 있음
     * 악성 패키지는 Vercel 패키지 형태로 설치되고 메모리에서 실행됨
          + 페이로드는 재부팅할 때마다 로드되도록 설정하고 이더리움 계약의 IP 주소에 연결함
          + 추가 Javascript 파일을 가져오기 위해 여러 요청을 수행한 다음 동일한 요청 서버로 시스템 정보를 다시 게시함
          + 이 정보에는 GPU, CPU, 머신의 메모리 양, 사용자 이름 및 OS 버전에 대한 정보가 포함됨
     * 오타를 이용한 공격이 널리 사용됨
          + 이 공격은 합법적인 패키지와 매우 유사하지만 몇글자만 다른 이름을 사용하는 typosquatting에 의존함
          + Typosquatting은 지난 5년 동안 개발자가 악성 코드 라이브러리를 다운로드하도록 속이는데 사용되어 왔음
          + 개발자는 다운로드한 패키지를 실행하기 전에 이름을 항상 이중 확인해야 함

   스마트컨트렉을 사용중이라면 같이 공격해서 해커의 gas 를 소진시킬수도 있지 않을까 싶군요 ㅎㅎㅎㅎ

   하여튼 그놈의 코인이 문제다

   Nix-store 에 멀웨어 검색기좀 있었시면 좋겠습니다 찾어봐야지 개발자는 다들 nix로 옮겨요. 디지털 자산전부 박제시켜 굳힌다음 못건드리게 해야지요. 그리고 국가는 rag ai나 만들어서 기업에 배포좀 해주지 언제할래나요 화이링 이거 동남아보다 못한 개발환경 언제 끝날래나

   무슨 회사를 다니시길래 동남아보다 못한 개발환경에서 일하시나요...

   회사 문제가 아니라 국가 정책적인 문제 때문임을 말씀하시는 거겠죠.

   npm은 심심할만 하면 이 이슈가 발생하는데 다른 언어들의 패키지 저장소는 이런 문제가 없나요?

   예를 들어 패키지 매니저의 기본 설정이 allow-net=false or ignore-scripts=true라서 안전한건지 비슷한 상황인건지 ..

   Npm이 많이 쓰여서 눈에 자주 뜨이는거지
   다른 언어 패키지 저장소도 다 마찬가지에요.

   이렇게 원격에서 라이브러리를 자동으로 가져와 사용하는 도구들, cargo, alire, maven 등등은 다 비슷한 위협에 노출되어 있는게 아닌가 합니다.
"
"https://news.hada.io/topic?id=17639","WebSocket 때문에 AWS 비용으로 $1M(13억) 내다가 절감한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               WebSocket 때문에 AWS 비용으로 $1M(13억) 내다가 절감한 방법

     * recall은 수백개의 회사에 회의용 봇을 제공하는 서비스로 AWS에서 대규모 인프라를 운영하고 있음
     * 비용 효율적인 서비스를 위해 하드웨어 성능을 최대한 활용하려 함
     * 지난 몇 년 동안 클라우드 제공업체의 GPU 가용성이 불안정했기 때문에 비디오 처리를 GPU가 아닌 CPU에서 수행
     * 헤드리스 Chromium을 사용하는 봇을 프로파일링한 결과, 대부분의 CPU 시간이 비디오 처리(인코딩/디코딩)이 아닌 메모리 복사 함수 __memmove_avx_unaligned_erms와 __memcpy_avx_unaligned_erms에서 소비되고 있었음
          + memmove와 memcpy는 C 표준 라이브러리(glibc)에 있는 메모리 블록 복사 함수
          + memmove는 겹치는 범위의 메모리 복사와 관련된 몇 가지 예외 사례를 처리하지만, 두 함수 모두 ""메모리 복사"" 함수로 분류할 수 있음
          + avx_unaligned_erms 접미사는 Advanced Vector Extensions(AVX)를 지원하는 시스템에 최적화되어 있으며, 정렬되지 않은 메모리 접근에도 최적화되어 있음을 의미
          + erms는 Enhanced REP MOVSB/STOSB의 약자로, 최신 Intel 프로세서에서 빠른 메모리 이동을 위한 최적화. ""특정 프로세서를 위한 더 빠른 구현""을 의미한다고 볼 수 있음
     * 프로파일링 결과, 이 함수들을 가장 많이 호출한 것은 데이터를 수신하는 Python WebSocket 클라이언트였음
          + 그 다음으로는 데이터를 전송하는 Chromium의 WebSocket 구현체가 많이 호출했음

WebSocket의 문제점

     * 원시 비디오 데이터를 Chromium의 JS 환경에서 인코더로 전송하기 위해 로컬 WebSocket 서버를 사용했음
     * 원시 1080p 30fps 비디오 스트림은 초당 93MB 이상의 높은 대역폭을 요구함
     * WebSocket 사용이 많은 연산 비용을 초래했는데, 주된 원인은 단편화(fragmentation)와 마스킹(masking)이었음
          + 단편화: Chromium의 WebSocket 구현체는 131KB 이상의 메시지를 여러 프레임으로 단편화함. 3MB 이상의 원시 비디오 프레임은 24개 이상의 별도 프레임으로 나뉘어 전송됨
          + 마스킹: 보안상의 이유로 WebSocket은 클라이언트에서 서버로 전송되는 모든 프레임을 마스킹함. 초당 100MB 이상의 대용량 데이터에서는 의미있는 오버헤드가 됨

대안 모색

     * 브라우저 API로는 WebSocket보다 훨씬 더 성능이 좋은 것을 구현하기 어려워 Chromium을 포크하여 사용자 정의 기능을 구현하기로 함
     * 3가지 대안을 고려했음: raw TCP/IP, Unix Domain Socket, Shared Memory
          + TCP/IP: WebSocket의 단편화/마스킹 문제는 피할 수 있지만 최대 패킷 크기가 작아 여전히 단편화 문제가 있음. 커널 공간으로의 복사 오버헤드도 있음
          + Unix Domain Socket: 네트워크 스택을 완전히 건너뛸 수 있지만 사용자 공간과 커널 공간 사이에 데이터 복사가 필요함
          + Shared Memory: 여러 프로세스가 동시에 접근할 수 있는 메모리. 중간에 복사 없이 Chromium이 공유 메모리에 직접 쓰고 인코더가 바로 읽을 수 있음

공유 메모리 기반 전송 구현

     * 공유 메모리에 데이터를 연속적으로 읽고 쓰기 위해 링 버퍼 형태로 구현
     * 요구사항: lock-free, 다중 생산자/단일 소비자, 가변 프레임 크기, 무복사 읽기, 샌드박스 친화성, 저지연 시그널링
     * 기성 링버퍼 구현체를 평가했으나 요구사항을 모두 만족하는 것이 없어 직접 구현하기로 함
     * 무복사 읽기를 지원하기 위해 포인터를 write, peek, read 세 개로 나누었음
     * 스레드 안전성을 위해 원자적 연산을 사용하고, 새 데이터 발생/공간 확보를 알리기 위해 named semaphore를 사용함
     * 공유 메모리 기반 링버퍼 구현과 기타 최적화를 통해 봇의 CPU 사용량을 최대 50%까지 감소시킬 수 있었음. 결국 AWS 비용을 연간 백만 달러 이상 절감함.

        Hacker News 의견

     * 한 스타트업이 ""충분히 괜찮은"" 지름길을 선택하고 나중에 최적화하는 전형적인 이야기임.
          + 한 회사에서 CPU 사용량이 높은 VM 클러스터가 있었고, 이를 최적화하기 위해 프로파일러를 사용했음.
          + 오래된 데이터를 삭제하고 쿼리에 필터를 추가하여 CPU 사용량을 줄였음.
     * 원시 비디오 데이터의 높은 대역폭이 놀랍다는 의견이 있음.
          + WebSockets의 설계 결정을 비판하며 CPU 사용량 문제를 예상하지 못했음.
     * AWS 문제가 아니라 CPU 사이클을 낭비한 문제라는 의견이 있음.
          + WebSockets는 데이터 전송이나 API 게이트웨이 비용과 관련이 있음.
     * TCP/IP 네트워크의 MTU와 MSS가 비디오 프레임 크기에 비해 작다는 점을 지적함.
          + 기술적 지식 부족을 지적하며 개발자를 고용할 필요가 있다고 주장함.
     * Chromium의 Mojo를 사용하여 플랫폼별 코드를 걱정할 필요가 없다는 의견이 있음.
          + 커스텀 링 버퍼 구현도 괜찮다고 생각함.
     * 네트워크 문제가 아니라 비디오 코덱에 대한 이해 부족이 문제라는 의견이 있음.
          + RDP와 같은 비디오 스트리밍 프로토콜을 사용하지 않는 이유를 이해할 수 없다고 함.
     * 투명성을 칭찬하며 제품 가격에 대한 투명성도 원한다고 함.
     * WebSocket 프로토콜의 마스킹이 중간자의 문제를 해결하려는 시도라고 설명함.
          + 관련 RFC를 읽어볼 가치가 있다고 함.
     * 비디오 데이터를 압축하지 않고 전송하는 방식이 이상하다고 지적함.
          + 압축된 스트림을 전송하지 않는 이유를 이해할 수 없다고 함.
     * 원시 비디오를 WebSocket으로 전송하는 초기 접근 방식이 놀랍다고 함.
          + 비효율성이 제품 개발에 방해가 되지 않았다고 함.
          + 데이터의 양을 고려하지 않는 접근 방식을 이해할 수 없다고 함.

     * 제품 개발 시 성능에 대한 고려는 전혀 없었다고 본다.
     * 이 문제는 결국 대량 데이터를 어떻게 IPC 할것 인지의 문제로 귀결됨.
     * 차이점은 일반적인 IPC가 아닌, 크롬 브라우져와 IPC 한다는 것이고
     * 크롬 브라우져 내부 방식은 그리 쉽지는 않겠지만, 오픈되어 있으니 수정은 가능
     * 그럼 결국 IPC 선택의 문제임

   첨부터 개발을 잘못 했구만..

   ""원시 비디오를 WebSocket으로 전송하는 초기 접근 방식이 놀랍다고 함."" 이 말에 공감.
"
"https://news.hada.io/topic?id=17711","lukacho/ui - 깔끔한 애니메이션을 지원하는 UI 컴포넌트 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               lukacho/ui - 깔끔한 애니메이션을 지원하는 UI 컴포넌트 라이브러리

     * React + TailwindCSS + FramerMotion으로 제작된 특별한 UI 컴포넌트 모음
     * 20개 컴포넌트를 애니메이션 처리하여 디자인. 손쉽게 Copy & Paste해서 사용 가능
     * 지원 컴포넌트 리스트
          + 드롭다운 메뉴, 탭 리스트, 이미지 스와이퍼, 사용자 가입/로그인, 사용자 피드백, 사이드 메뉴 버튼
          + 아코디언(FAQ), Figma 스타일 커서(협업시 사용자 표시), 애니메이션 커스텀 커서, 애니메이션 SVG 차트
          + 백그라운드 Grid Beam / Lights (Hero 섹션등 뒤에 애니메이션 처리용), 깔끔한 가격표 컴포넌트 & 애니메이션 가격표 카드
          + Copy To Clipboard, Link 컴포넌트
          + Mock 브라우저

   개인 사이드 프로젝트에 한번 써보고 싶네요. 좋은 정보 감사합니다.
"
"https://news.hada.io/topic?id=17715","빅테크에서 프로젝트를 Ship 하는 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         빅테크에서 프로젝트를 Ship 하는 방법

출시(Shipping)가 어려운 이유

     * 많은 사람들이 ‘출시’가 쉬운 일이라고 착각하지만, 기본 상태는 출시가 지연되거나 취소되거나, 혹은 완성도가 낮아 문제가 발생하는 경우가 많음.
     * 코드를 모두 작성하거나 Jira 티켓을 모두 해결했다고 자동으로 출시되는 것이 아님. 출시를 위해 누군가가 리드 역할을 맡아야 함.
     * 출시가 최우선 과제가 되어야 함. 사용자 경험(UX)에 지나치게 집중하면 오히려 출시가 지연됨.
     * 프로젝트를 성공적으로 출시하려면, 기술적인 리더나 DRI(Directly Responsible Individual)가 필요함. 이러한 역할을 맡는 엔지니어가 있는 팀은 성공 확률이 높아짐.

‘출시’란 무엇인가?

     * 많은 엔지니어들은 ‘출시’를 단순히 코드 배포나 기능 활성화로 생각하지만, 이는 큰 테크 회사에서는 다르게 정의됨.
     * 출시는 회사 내 중요한 사람들이 ‘출시되었다’고 믿을 때 이루어지는 것임. VP나 CEO가 만족하지 않으면, 코드가 배포되었더라도 실제로 ‘출시된’ 것이 아님.
     * 프로젝트가 사용자에게 큰 성공을 거두거나 수익을 올리면 출시된 것이지만, 사용자 반응이 좋지 않더라도 리더십이 만족하면 출시된 것으로 간주됨.

커뮤니케이션의 중요성

     * 프로젝트의 목표가 무엇인지 명확히 파악해야 함. 목표에 따라 작업 방식과 커뮤니케이션 전략이 달라짐.
     * 회사의 리더십은 프로젝트의 기술적 세부사항을 거의 모름. 따라서 신뢰를 유지하기 위해 정확한 예상, 문제 해결, 그리고 적절한 업데이트가 중요함.
     * 신뢰를 유지하는 방법:
     * 과거 성공적인 출시 경험이 있는 경우 유리함.
     * 자신감 있는 태도를 보여야 함.
     * NASA의 미션 컨트롤처럼 전문적이고 간결하게 소통해야 함.
     * 일일 또는 주간 업데이트 스레드를 통해 능동적으로 정보를 제공해야 함.

프로덕션 배포 문제 해결

     * 대부분의 문제는 예상치 못한 세부 사항에서 발생함. 예를 들어, Memcached의 블록 크기 문제나 트래픽 예측 오류, 민감한 사용자 데이터 문제 등이 있음.
     * 문제를 빠르게 해결하기 위해 시스템에 대한 깊은 기술적 이해가 필요함.
     * 예상되는 문제에 대해 빠르게 대응하고, 문제가 심각한지 아닌지를 명확히 설명할 수 있어야 함.

지금 당장 출시할 수 있는가?

     * 지금 당장 출시할 수 있는지 스스로 질문해보는 것이 중요함. 만약 그렇지 않다면, 무엇이 변경되어야 가능한지 고민해야 함.
     * 기능 플래그와 스테이징 환경을 활용해 가능한 빨리 피드백을 받을 수 있도록 해야 함.
     * 출시 직전에는 기술 작업을 줄이고, 문제가 발생했을 때 빠르게 대응할 수 있도록 준비해야 함.

요약

     * 출시 작업은 매우 어렵고, 최우선 과제로 삼아야 함.
     * 출시의 의미는 단순한 배포가 아니라 리더십 팀이 만족하는 것임.
     * 리더십 팀의 신뢰를 얻는 것이 성공적인 출시의 핵심임.
     * 문제를 예상하고 대처할 수 있는 백업 플랜이 중요함.
     * 출시 직전에는 개발 작업을 줄이고 문제 해결에 집중할 수 있어야 함.
     * 항상 “지금 당장 출시할 수 있는가?”라는 질문을 던져야 함.
     * 두려움을 버리고 용기를 가져야 함.

        Hacker News 의견

     * ""Shipping""은 회사 내 사회적 구성물이라는 관찰이 인상적임. 중요한 사람들이 프로젝트가 완료되었다고 믿을 때 완료된 것임
     * 이 기사는 소프트웨어 배포가 아닌 경영진을 만족시키는 것에 관한 것임. 사용자들이 싫어하고 시장이 비웃어도 경영진이 좋아하면 배포된 것임
     * 스포츠에서 승리가 모든 문제를 해결하듯, 소프트웨어에서는 배포가 모든 문제를 해결함. 완벽한 제품은 없지만, 일찍 배포하면 사용자들이 만족할 수 있음
     * 문제를 예방하는 것보다 문제를 해결하는 엔지니어가 더 많은 인정을 받는 경우가 있음. 문제를 예방하려고 노력하지만, 리더들은 이를 인식하지 못할 때가 있음
     * 대기업에서는 ""배포""가 단순히 기능을 현실화하는 것이 아닌, 더 큰 맥락에서 이해되어야 함. 일부는 이를 비윤리적이라고 할 수 있지만, 대기업에서는 일종의 ""게임""임
     * 많은 프로젝트를 배포했지만, 구체적인 사례가 없어 신뢰하기 어려움. 실제 프로젝트 사례가 포함되었으면 더 이해하기 쉬웠을 것임
     * 이 기사는 자기 홍보성 블로그 스팸임
     * 경험과 일치하지만 실질적인 조언이 부족함. 리더십의 인정을 받는 방법에 대한 구체적인 사례가 필요함
     * 대기업에서의 경험과 다름. 경영진의 지원 없이도 사용자 피드백이나 지표가 긍정적이면 성공으로 간주됨. 작은 프로젝트도 가치가 있을 수 있음
     * 주장을 정량화하고 정성화해야 신뢰할 수 있음. ""대기업에서 배포한다""는 광범위한 진술이며, 구체적인 설명이 필요함

   인상적인 의견 발췌해봤습니다.

   “어떤 사람들은 단지 자신들만을 위한 기술 영역을 구축하거나, 어떤 계층에서든 자신보다 위에 있는 사람들로부터 칭찬을 받고 싶어합니다. 이게 ""게임이 진행되는 방식""입니다. 이 게임을 하는 것은 결국 조직의 죽음으로 이어지고, 이것이 바로 우리가 애초에 기업 라이프 사이클을 갖는 이유입니다. 결국 이런 사람들은 조직을 내부에서 망가뜨리고, 실제 의견을 가진 사람이나 실제로 일을 처리하기 위해 최적화하는 사람을 밀어냅니다.”

   “게임에서 이기는 방법은 게임을 플레이하지 않는 것입니다”
"
"https://news.hada.io/topic?id=17687","기계 학습의 잘못된 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             기계 학습의 잘못된 이야기

블로그 소개

     * 2022년 6월, MIT 졸업 후 첫 연구 컨퍼런스에서 하드웨어 보안 연구 논문 발표
     * 논문은 인텔의 2024 하드웨어 보안 학술상 1위 수상 및 IEEE Micro Top Picks에 선정됨
     * 논문은 머신러닝을 활용한 사이드 채널 공격에 대한 분석을 다룸

연구 배경

     * 연구는 웹 브라우저에서 머신러닝 모델을 활용한 공격과 모델의 오해로 인한 잘못된 적용을 다룸
     * 연구는 개인적인 성장과 멘토의 중요성에 대한 이야기도 포함

사이드 채널 공격 개요

     * 프로세스 격리를 통해 애플리케이션 간 독립성을 유지하지만, 자원 공유로 인해 정보 유출 가능성 존재
     * 네트워크 활동을 통해 사용자 활동을 추적하는 예시 설명

웹사이트 핑거프린팅

     * CPU 캐시를 활용한 웹사이트 핑거프린팅 공격 설명
     * 공격자는 CPU 캐시의 활동 패턴을 분석하여 사용자가 방문한 웹사이트를 식별 가능

최종 프로젝트

     * Shusterman et al.의 연구를 재현하며 새로운 공격 방법 발견
     * 단순히 카운터를 증가시키는 방법이 더 높은 정확도를 보임

미스터리 사이드 채널 조사

     * CPU 주파수 조정, 코어 경합, 시스템 인터럽트 등 다양한 가설 테스트
     * 시스템 인터럽트가 공격에 영향을 미친다는 결론 도출

연구 결과

     * 새로운 사이드 채널 발견 및 머신러닝 모델의 신중한 사용 필요성 강조
     * 연구는 하드웨어 보안 및 컴퓨터 아키텍처 분야에 기여

   이 블로그는 머신러닝과 컴퓨터 아키텍처에 대한 깊은 이해를 제공하며, 연구 과정에서의 개인적인 성장과 발견을 공유함.
"
"https://news.hada.io/topic?id=17730","떠나며 손을 흔드는 모습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             떠나며 손을 흔드는 모습

     * Deanna Dikeman의 작품 소개
          + Deanna Dikeman은 27년 동안 부모님 집을 방문하고 떠날 때마다 사진을 찍었음.
          + 이 시리즈는 1991년에 시작되었으며, 처음에는 단순한 스냅샷으로 시작되었음.
          + 사진을 찍는 것은 이별의 슬픔을 다루는 방법이었으며, 점차 작가의 작별 인사 의식이 되었음.
          + 이 사진들은 'Relative Moments'라는 더 큰 작품의 일부로, 1986년부터 부모님과 친척들의 삶을 기록해왔음.
     * 'Leaving and Waving' 시리즈의 의미
          + 이 시리즈는 가족, 노화, 이별의 슬픔에 대한 이야기를 담고 있음.
          + 2009년에는 아버지가 더 이상 사진에 등장하지 않음. 아버지는 91세 생일 며칠 후에 돌아가셨음.
          + 어머니는 계속 작별 인사를 했으며, 이별할 때마다 얼굴이 점점 더 슬퍼졌음.
          + 2017년 어머니는 요양원으로 이사하셨고, 몇 달 동안 아파트 문에서 작별 인사를 찍었음.
          + 2017년 10월 어머니가 돌아가셨고, 장례식 후 떠날 때 빈 차도를 마지막으로 사진에 담았음. 처음으로 아무도 작별 인사를 하지 않았음.
     * 전시회 정보
          + 이 작품은 2018년 8월, Kansas City, MO의 Charlotte Street Foundation La Esquina Gallery에서 전시되었음.
     * 저작권
          + 모든 이미지 © Deanna Dikeman. Deanna Dikeman의 명시적 서면 동의 없이 복제 금지.

        Hacker News 의견

     * 어린 시절 아버지를 잘 알지 못했음. 아버지는 알코올 중독자였고, 부모님은 8살 때 이혼했음. 이후 아버지를 본 적이 없었음
          + 어머니와도 가까운 관계가 아니었음. 20살에 어머니와의 관계를 끊었고, 지금은 소원한 상태임
          + 관계를 회복하려는 시도가 여러 번 있었지만 성공하지 못했음. 어머니는 자유로운 영혼이었고, 부모로서 헌신하지 않았음
          + 부모님이 돌아가셔도 그리워하지 않을 것 같음. 어머니는 조금 그리울 수 있지만, 아버지는 전혀 아님
          + 부모가 없었던 것처럼 느껴짐. 부재를 그리워할 수 없기 때문임
          + 딸에게 내가 받지 못한 부모가 되고 싶음. 파트너가 암 4기라 딸의 어린 시절에 함께하지 못할 것 같지만, 이것이 삶임
     * 죽음의 최종성을 이해하기 어려움. 부모님은 90대이고, 다른 대륙에 살고 있음
          + 가족 사진을 아카이브하는 것을 좋아함
          + 20년 전 부모님의 삶을 인터뷰하여 기록했음. 각자의 관점에서 다르게 기록했음
          + 모든 사람이 향수를 느끼는 것은 아니지만, 지금 이러한 일을 시작하는 것을 권장함
     * Tim Urban의 블로그 글 'The Tail End'를 떠올리게 됨
          + 고등학교 졸업 후 부모님과의 대면 시간이 93% 사용되었고, 이제 마지막 5%를 즐기고 있음
     * 아버지가 돌아가셨을 때 눈물이 났고, 빈 차도를 보며 울었음. 사랑의 아름다운 표현임
          + 비슷한 일을 할 기회가 있었으면 좋았을 것 같음
     * 남부 폴란드에서 북서부 독일로 기차를 타고 이동 중임. 부모님을 방문하고 돌아가는 길임
          + 부모님이 60세를 넘겼고, 앞으로 얼마나 더 많은 방문을 할 수 있을지 모르겠음
          + 이 제출물이 적절한 시기에 나와서 감사하며, 부모님을 더욱 소중히 여기게 됨
     * 가까운 사람들의 나이 드는 모습을 보는 것이 멋지다고 생각함
          + 아내와 결혼한 지 20년이 되었고, 그녀의 변화를 보는 것이 흥미로움
          + 나이 드는 것과 죽음에 대해 두렵거나 슬프지 않음. 자연스럽고 아름다움
     * 43세이고, 부모님이 방문 후 작별 인사를 할 때 여전히 손을 흔드심
          + 부모님 중 아버지가 먼저 가실 가능성이 높음. 어머니가 어떻게 견딜지 모르겠음
          + 오늘 할 수 있는 일을 주저하지 말아야 함
     * 지나가는 친구여, 기억하라
          + 지금의 당신처럼 나도 한때 그랬음
          + 지금의 나처럼 당신도 곧 될 것임
          + 죽음을 준비하고 나를 따르라
     * 이런 것들을 좋아하지 않지만, 감정적으로 큰 영향을 받았음
     * 마지막 사진을 보고 부모님이 작별 인사를 하지 않는 것을 보고 눈물을 흘린 사람이 나뿐인가?
"
"https://news.hada.io/topic?id=17684","그림 판당고그림 판당고

     * 그리운 판당고
     * 개발 배경
          + 1995년, 팀 셰이퍼는 루카스아츠에서 새로운 프로젝트를 구상하기 시작함.
          + 멕시코의 죽은 자의 날과 필름 누아르를 결합한 독창적인 어드벤처 게임 아이디어를 구상함.
          + 3D 그래픽을 도입하여 더 영화적인 경험을 제공하고자 함.
     * 기술적 도전
          + 기존의 SCUMM 엔진을 대체하기 위해 새로운 GrimE 엔진을 개발함.
          + 3D 모델링을 통해 비용 절감과 더 유연한 그래픽을 구현하려 함.
          + 캐릭터의 얼굴을 텍스처 맵으로 표현하여 기술적 한계를 스타일로 승화시킴.
     * 게임플레이와 퍼즐 디자인
          + 게임의 인터페이스와 퍼즐 디자인에서 많은 비판을 받음.
          + 퍼즐이 복잡하고 비논리적이며, 명확한 목표 설정이 부족함.
          + 인터페이스는 마우스 대신 숫자 키패드를 사용하여 조작이 불편함.
     * 스토리와 미적 요소
          + 1930년대 아르데코와 멕시코 민속 예술, 1940년대 갱스터 영화의 독특한 결합.
          + 매니 칼라베라의 캐릭터 아크와 감정적으로 깊이 있는 스토리.
          + 뛰어난 성우 연기와 음악이 게임의 분위기를 잘 살림.
     * 비평과 반응
          + 출시 당시 스토리와 캐릭터, 설정은 호평을 받았으나, 인터페이스와 퍼즐 디자인은 비판받음.
          + 어드벤처 장르의 쇠퇴와 맞물려 상업적 성공은 제한적이었음.
          + 2015년 리마스터 버전에서 포인트 앤 클릭 인터페이스가 추가되어 게임플레이가 개선됨.
     * 결론
          + 그리운 판당고는 독창적인 스토리와 미적 요소로 많은 사랑을 받았으나, 게임플레이 측면에서는 아쉬운 점이 많음.
          + 인터랙티브 요소가 게임의 핵심임을 고려할 때, 퍼즐 디자인의 부족함은 큰 단점으로 작용함.

        Hacker News 의견

     * Grim Fandango는 비판을 받을 수 있지만, 많은 사람들이 사랑하는 명작임. 퍼즐은 유기적으로 결합되어 있으며, 캐릭터와의 관계를 더 깊게 만들어 줌
          + Grim Fandango는 성인용 테마가 많아 어린이들에게는 이해하기 어려울 수 있음. 첫 챕터부터 사무실 정치와 관련된 복잡한 상황이 등장함
          + Grim Fandango의 게임플레이는 부족한 점이 있지만, 서사적 콘텐츠가 충분하여 퍼즐을 줄일 수 있었음. 당시에는 플레이타임이 중요한 평가 요소였음
          + Grim Fandango는 Lua 언어를 처음으로 사용한 게임으로, 게임 개발에서 Lua의 중요성을 높였음
          + 어린 시절 Grim Fandango의 캐릭터와 분위기에 매료되었으나, Act 1에서 진행이 막혔음. 영화로 제작될 가능성을 상상해 봄
          + 게임의 음악은 훌륭하며, 사운드트랙을 자주 듣고 따뜻한 추억을 떠올림
          + Grim Fandango의 인터페이스와 게임 디자인은 복잡하지만, 유튜브에서 롱플레이를 보는 것이 좋은 방법일 수 있음
          + Grim Fandango 팬이라면 The Journey Down도 추천함. Grim Fandango의 영향을 많이 받았음
          + Grim Fandango는 여전히 좋아하는 게임 중 하나이며, 게임과 세계가 주는 감정이 강렬하게 남아 있음
          + Grim Fandango는 시대를 초월한 훌륭한 게임이며, 리마스터 버전도 가치가 있음. 탱크 컨트롤과 어려운 퍼즐은 90년대 포인트 앤 클릭 어드벤처 게이머에게만 익숙할 수 있음
"
"https://news.hada.io/topic?id=17661","실시간 핵융합 플라즈마 행동 예측 및 조작을 위한 AI 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   실시간 핵융합 플라즈마 행동 예측 및 조작을 위한 AI 기술

AI를 이용한 실시간 핵융합 플라즈마 행동 예측 및 조작

     * 멀티모달 초해상도: 다중 공간 및 시간적 물리학 규모로 지배되는 비선형 복합 시스템은 단일 진단으로 완전히 이해할 수 없음. 여러 진단을 결합하면 시스템 물리학의 불완전한 투영이 발생함. 숨겨진 상호 상관성을 식별하여 이러한 격차를 메우는 것이 가능함. 이를 위해 혁신적인 기계 학습 방법론을 도입함. 이 방법론은 엣지 로컬라이즈드 모드(ELM)와 같은 플라즈마 불안정성을 해결하는 데 도움을 줌.
     * 기계 학습을 통한 RT 프로파일 제어: 토카막에서 플라즈마를 제어하기 위해 다양한 ""액추에이터""를 사용함. 모델 예측 제어를 통해 물리학 실험의 성공률을 높이고 시간을 절약할 수 있음. 실시간 물리 모델이 항상 정확하지 않기 때문에 기계 학습 모델을 개발하여 실시간 진단만을 사용하여 100마이크로초 이내에 예측을 생성함.

고해상도 진단을 통한 플라즈마 행동 모니터링

     * 불안정성 탐지 및 분류: 전자 사이클로트론 방출 신호를 기반으로 플라즈마 코어의 불안정성을 탐지하고 분류하는 연구를 진행함. Reservoir Computing Networks와 같은 기계 학습 모델을 사용하여 시간 시계열 데이터 처리에 효과적임을 입증함.
     * 진단 데이터의 정확성 및 범위 향상: 진단 데이터의 정확성과 범위는 핵융합 연구 장치 및 원자로의 최적 성능을 이해하는 데 중요함. 기계 학습 기반 접근 방식을 통해 진단 신호를 재현하고, 신호 시각화를 향상시킴.

토카막 수송 모델의 대규모 데이터베이스 교차 검증 및 검증

     * 토카막 수송 예측의 신뢰성 향상: DIII-D 방전을 사용하여 통계적 유의성을 확보하고, 예측 모델의 신뢰성을 높임. 1D 수송 솔버 ASTRA와 TRANSP를 검증하여 저장 에너지를 예측하는 데 있어 높은 정확성을 보였으나, 플라즈마 온도 프로파일 예측에서는 간단한 경험적 모델에 비해 통계적 이점이 없었음.

실시간 탄소-III 방출 전면 프록시를 통한 안정적인 디버터 방사 분리

     * 안정적인 디버터 분리: 토카막이 과도한 열 플럭스로 인한 디버터 플레이트 손상을 방지하면서 좋은 격리를 유지할 수 있도록 함. 기계 학습 알고리즘을 사용하여 토카막 내 어디서든 분리 값을 직접 찾고, 필요한 경우 액추에이션 신호를 조정할 수 있음.
"
"https://news.hada.io/topic?id=17692","텍스처 없는 텍스트 렌더링 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           텍스처 없는 텍스트 렌더링 기술

     * 텍스처 없는 텍스트 렌더링
          + 전통적으로 텍스트를 렌더링하려면 폰트의 모든 글리프를 아틀라스로 렌더링하고, 이를 텍스처로 바인딩한 후, 화면에 삼각형을 그려 글리프를 하나씩 렌더링해야 함.
          + 디버그 메시지를 빠르게 출력하기 위한 간단한 방법을 소개함.
          + 모든 텍스트를 단일 드로우 콜로 그릴 수 있는 기술을 설명함.
     * 폰트: 텍스처 없는 픽셀
          + 폰트 아틀라스 텍스처를 제거하기 위해, 프래그먼트 셰이더 내부에 폰트 아틀라스와 유사한 것을 저장해야 함.
          + 정수 상수를 사용하여 비트맵을 저장할 수 있으며, 이를 통해 글리프를 렌더링할 수 있음.
          + 8비트 정수를 비트맵으로 사용하여 GLSL 프래그먼트 셰이더에서 화면에 그릴 수 있음.
     * 단일 드로우 콜
          + 인스턴스 드로우 콜을 사용하여 반복적인 드로우 명령을 피할 수 있음.
          + 각 인스턴스에 대해 위치 오프셋과 출력할 텍스트를 포함한 데이터를 사용함.
          + 메시지를 4개의 문자로 나누어 uint32_t로 변환하여 word_data 구조체에 저장함.
     * 버텍스 셰이더
          + 버텍스 셰이더는 세 가지 출력을 생성함.
          + gl_Position에 삼각형의 정점을 화면에 배치함.
          + 출력할 단어를 프래그먼트 셰이더로 전달함.
          + 텍스처 좌표를 생성하여 uv 좌표를 계산함.
     * 프래그먼트 셰이더
          + 프래그먼트 셰이더는 텍스트를 렌더링하기 위해 세 가지 정보를 필요로 함.
          + uv 좌표를 글리프 비트맵의 올바른 비트에 매핑하여 글리프를 렌더링함.
          + 비트가 설정된 경우 전경색으로, 설정되지 않은 경우 배경색으로 렌더링함.
     * 전체 구현 및 소스 코드
          + 이 기술의 구현은 le_print_debug_print_text 모듈의 소스 코드에서 찾을 수 있음.
          + 이 모듈은 디버그 메시지를 화면에 쉽게 출력할 수 있도록 함.

        Hacker News 의견

     * ShaderToy에서 간단한 산술을 통해 코드를 작성하는 것이 재미있고 쉬운 작업임. 다양한 텍스트 해킹 예시가 많음
          + 예: 300자 미만의 Matrix, 녹색 CRT 디스플레이 효과 등
     * 이 방법은 창의적이지만 결과물이 아름답지는 않음. 더 나은 결과를 위해 더 많은 비트를 추가할 수 있지만, 효율적인 방법은 흑백 픽셀을 사용하여 텍스처로 저장하는 것임
     * 현대 3D 렌더링 엔진에서 텍스트를 그리는 일반적인 방법은 SDF 텍스트를 사용하는 것임. 이는 전통적인 텍스처 아틀라스를 사용하여 서명 거리 필드의 아틀라스를 생성함
     * 텍스트 렌더링 알고리즘을 직접 시도해본 적이 없지만 여러 가지를 구현한 경험이 있음. 해상도 독립성과 안티앨리어싱이 필요했기 때문에 이 방법은 도움이 되지 않았음
     * 이 방법은 Will Dobbie의 방법과 개념적으로 유사하지만 더 간단함. 픽셀 데이터를 배열에 저장하는 방식임
     * 텍스트를 메쉬로 렌더링하는 옵션도 있음. TextMeshPro는 서명 거리 필드를 사용하여 임의의 스케일을 처리함
     * 전통적인 텍스처 방식과 성능 비교를 하면 재미있을 것임. 현대 GPU의 간단한 작업에서는 성능이 ""예""라는 답변이 나올 가능성이 큼
     * Sebastian Lague의 비디오에서 다양한 폰트 렌더링 기법을 다룸
     * 폰트 데이터를 프래그먼트 셰이더 소스 코드에 포함시키는 유사한 기술을 사용한 경험이 있음. snprintf를 사용하여 GPU 버퍼에 직접 출력함
     * 이 방법은 BBC Basic에서 작은 8x8 스프라이트를 그리는 것과 유사함. 35년 전의 추억을 떠올리게 함
     * GPU는 텍스처에서 렌더링하는 데 효율적이지만 비트 조작에는 상대적으로 느림. 메모리를 절약하지만 실제로 아틀라스를 사용하는 것보다 빠른지는 의문임
     * 작은 텍스처를 GPU에 업로드하는 것이 성능에 큰 영향을 미치는지에 대한 질문이 있음. 2D로 텍스처에 문자열을 렌더링하고 두 삼각형에 텍스처를 표시하는 것이 가능한지 궁금함
"
"https://news.hada.io/topic?id=17623","트럼프, 두 번째 대통령 당선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            트럼프, 두 번째 대통령 당선

     * 트럼프, 두 번째 대통령 당선
          + 트럼프 대통령 당선: 전 대통령 도널드 트럼프가 두 번째로 대통령에 당선됨. 이는 그가 워싱턴을 떠난 지 거의 4년 만에 이루어진 일이며, 정치적 미래가 불확실했던 상황에서의 놀라운 복귀임.
          + 결정적 승리: 트럼프는 펜실베이니아와 알래스카에서 승리하여 270명의 선거인단을 확보함. 이는 그가 백악관을 다시 차지하기 위한 최소한의 조건임.
          + 선거의 주요 사건: 트럼프는 선거 기간 동안 형사 재판을 받았고, 암살 시도를 두 번 겪었으며, 바이든 대통령이 경선에서 하차한 후 민주당 후보가 교체되는 등 여러 예기치 않은 사건이 발생함.
          + 역사적 맥락: 트럼프는 120년 만에 백악관을 잃고 다시 당선된 두 번째 대통령이 됨. 이는 1892년 클리블랜드 대통령 이후 처음임.
     * 선거 전략 및 결과
          + 선거 전략: 트럼프와 그의 러닝메이트 JD 밴스는 바이든 행정부의 높은 비용, 남부 국경의 이민 급증, 해외 불안정성에 대한 유권자의 불만을 활용하여 자신의 정책으로 돌아가자는 메시지를 전달함.
          + 유권자 지지: 출구 조사에 따르면 트럼프는 라틴계 유권자들 사이에서 큰 지지를 얻었으며, 젊은 남성들 사이에서도 해리스와 거의 동등한 지지를 받음.
          + 정책 공약: 트럼프는 대규모 추방 작전, 2017년 세금 감면 연장, 외국 수입품에 대한 보편적 관세 부과, 교육부 폐쇄 및 환경 규제 완화 등을 약속함.
     * 정치적 배경 및 영향
          + 정치적 도전: 트럼프는 여성 유권자들 사이에서 큰 격차를 극복함. 해리스는 낙태권 문제를 강조하며 유권자들을 끌어들임.
          + 공화당 내 영향력: 트럼프는 공화당 내에서 자신의 이미지를 강화할 기회를 얻게 됨. 이는 상원 다수당을 다시 차지한 공화당에게도 영향을 미침.
          + 법적 문제: 트럼프는 2020년 대선 패배 이후 권력을 유지하려는 노력으로 인해 2023년 워싱턴 D.C.에서 연방 기소를 당했음. 그러나 그는 이 사건을 감독하는 특별 검사를 해임할 계획임을 시사함.
     * 선거 후 전망
          + 정치적 미래: 트럼프는 2028년 재선에 도전할 수 없지만, 그의 당선은 공화당의 보수적 입지를 강화할 기회를 제공함.
          + 역사적 의미: 트럼프는 미국 역사상 두 번째로 비연속적인 두 번째 임기를 수행하는 대통령이 됨. 이는 22차 수정헌법에 의해 제한됨.

        Hacker News 의견

     * 사이트 가이드라인을 준수해야 함을 강조함. 주제의 논쟁성이 커질수록 더 깊이 있는 논의가 필요함을 언급함
     * 인플레이션은 가격이 아닌 가격 변화율임. 낮은 인플레이션이 낮은 가격을 의미하지 않음
     * 총체적 통계가 개인의 결과를 설명하지 못할 수 있음
     * 민주당이 지난 40년 동안 이 부분에서 실패했음을 지적함. 이로 인해 오하이오 주가 공화당 지지 주로 변했음을 언급함
     * 2020년 선거에 비해 약 2천만 표가 줄었고, 민주당은 약 1천5백만 표, 공화당은 약 4백만 표가 줄었음을 흥미롭게 여김
     * FCC/FTC와 반독점 노력이 끝날 것이라는 우려를 표명함
     * 공공 토지를 석유 및 광물 채굴 목적으로 사용하는 것에 대한 우려를 나타냄
          + 미국은 많은 공공 토지를 보유하고 있으나, 4년 동안 정부가 이를 사유화하면 생태계에 지속적인 피해를 줄 수 있음
     * 많은 사람들이 지난 4년 동안 더 나아졌는지를 고민함
          + 코로나 이후 경기 침체 없이 인플레이션과 높은 금리에 직면했음을 상상함. 불법 국경 횡단, 여성의 지지 부족, 해리스 부통령의 침묵 등 다양한 문제를 언급함
     * 전 세계적으로 코로나 이후 현직자들이 부진한 성과를 보였음을 언급함
          + 영국, 캐나다, 일본, 프랑스, 이탈리아에서 충격적인 선거 결과가 있었음을 지적함
          + 미국에서도 일반적인 불만의 분위기가 관련이 있을 수 있음을 언급함
     * 민주당이 더 나은 후보와 캠페인을 진행했더라도 이러한 역풍을 극복하기 어려웠을 것이라는 의견을 제시함
          + 그러나 스윙 스테이트에서 근소한 차이로 패배했기 때문에 완전히 믿지는 않음
     * 2030년 인구 조사 이후 민주당에게 불리한 지도가 예상됨을 언급함
          + 텍사스 +4, 플로리다 +3, 기타 남부 주 +1로 총 +12가 공화당 지지 주로 예상됨
     * 실현 가능한 제3당이 있다면 놀라울 것이라는 의견을 제시함
     * 이민이 미국인들에게 낙태보다 더 중요한 문제로 부각되었음을 언급함. 3개 주가 낙태를 법제화하지 않았음을 지적함
"
"https://news.hada.io/topic?id=17700","Pi 체스 보드i 체스 보드

        Hacker News 의견

     * Pi Board는 Raspberry Pi를 사용하여 체스말을 자동으로 움직이는 시스템임. 개발 과정에서 스테퍼 모터의 좌표를 정밀하게 보정하고, 체스말의 무게를 계산하여 효율적인 움직임을 구현함. 전력 소비를 최소화하기 위해 최적의 알고리즘을 선택하는 데 주의를 기울였음
     * 체스말이 다른 말을 밀어내고, 밀려난 말을 손으로 다시 놓아야 한다면 아직 개선이 필요함. 잡힌 말도 스스로 보드에서 나가야 함
     * Regium이라는 5년 전 킥스타터 사기가 떠오름. 자동 체스보드의 3D 애니메이션 비디오로 사람들을 속였음. chess.com은 이 사기의 광고를 받아들였고, 결국 킥스타터에서 퇴출됨
     * Pi Board는 시간이 지나면서 개선될 재미있는 프로젝트로 보임
     * 플레이어의 움직임이 어떻게 감지되는지에 대한 언급이 없었음. 카메라와 컴퓨터 비전이 사용되는지 궁금함. 전자기기로 해결하기 어려운 문제임
     * 기사들의 움직임이 이상하게 느껴짐. 많은 작은 움직임과 회전이 있음. 말을 밀어내고, 사람이 다시 놓아야 함
     * 보드 아래에 두 개의 ""팔""을 사용하면 더 나은 움직임이 가능할 것 같음. 각 팔의 각도를 제어하는 두 개의 모터가 필요하고, 팔을 확장하는 방법이 필요함. 극좌표계를 사용하여 팔의 위치를 추적할 수 있음
     * 체스말을 움직이는 데 어려움이 있음. 더 많은 개발이 필요함
     * 더 얇은 체스말이 충돌을 방지하는 데 도움이 될 수 있음. 그러나 저자가 이 접근을 사용하지 않은 이유가 있을 것임. 체스말의 밑면 크기가 전자석의 강도에 의해 결정되는지 궁금함
     * squareoffnow.com이 떠오름. 친구들과 원격으로 플레이하기 위해 두 개의 보드를 사고 싶었음
"
"https://news.hada.io/topic?id=17618","Waymo, 자율주행을 위한 End-to-End 멀티모달 모델 EMMA 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Waymo, 자율주행을 위한 End-to-End 멀티모달 모델 EMMA 공개

     * EMMA: End-to-End Multimodal Model for Autonomous Driving
     * 구글의 Gemini 멀티모달 LLM을 활용하여 센서 데이터에서 직접 차량의 미래 궤적을 생성함
     * 자율주행에 특화된 학습과 미세조정을 통해 도로 상황에 대한 이해력을 높임

주요 연구 내용

     * 멀티모달 모델이 자율주행에 어떻게 적용될 수 있는지 보여줌
     * End-to-End 방식의 장단점을 탐구함
     * 멀티모달 세계지식 활용의 이점을 강조함
          + 공간 이해력과 추론 능력이 필요한 자율주행 작업에서도 도움이 됨
     * 여러 주요 자율주행 작업에 대해 긍정적인 전이학습 효과를 입증함
          + 경로계획, 객체인식, 도로그래프 이해 등을 공동학습하면 개별 학습보다 성능이 향상됨
          + 더 많은 핵심 자율주행 작업을 유사한 방식으로 통합하는 것이 유망한 연구 방향임을 시사함

EMMA 소개

     * EMMA는 대규모 멀티모달 학습 모델과 기술을 더 많은 영역에 통합하려는 AI 연구 트렌드를 반영함
     * Gemini를 기반으로 경로계획, 3D 객체인식 등 자율주행 작업에 특화된 모델을 만듦

   주요 특징:
    1. End-to-End 학습
          + 카메라 입력과 텍스트 데이터를 처리하여 경로, 인식 객체, 도로 그래프 요소 등 다양한 출력을 생성함
    2. 통합된 언어 공간
          + 비센서 입출력을 자연어 텍스트로 표현하여 Gemini의 세계 지식을 최대한 활용함
    3. 연쇄 사고 추론
          + 연쇄 사고 추론을 통해 의사결정 과정을 개선하여 End-to-End 계획 성능을 6.7% 향상시키고 운전 결정에 대한 해석 가능한 근거를 제공함

주요 성과

     * 공개 및 내부 벤치마크에서 최고 수준의 성능을 달성함
          + End-to-End 경로계획, 카메라 기반 3D 객체인식, 도로그래프 예측, 장면 이해 등
     * 공동학습을 통해 성능이 향상됨
          + 하나의 EMMA 모델로 여러 작업의 출력을 동시에 생성하면서 개별 학습 모델과 동등하거나 우수한 성능을 보임
          + 많은 자율주행 응용에 활용 가능한 범용 모델로서의 잠재력을 보여줌

한계점

     * 장기 비디오 시퀀스 처리에 제한이 있어 실시간 주행 상황 추론에 어려움이 있음
          + 장기 메모리가 필수적임
     * 라이다, 레이더 입력을 활용하지 않음
          + 정교한 3D 센싱 인코더 통합이 필요함
     * 효율적인 시뮬레이션 방법, 최적화된 모델 추론 시간, 중간 의사결정 단계 검증 등의 과제가 있음

향후 전망

     * EMMA가 독립적인 주행 모델로서는 한계가 있지만, 멀티모달 기술로 자율주행시스템의 성능과 일반화 능력을 높일 수 있음을 보여줌
     * 첨단 AI 기술을 실제 작업에 적용함으로써 AI의 역량을 복잡하고 역동적인 환경으로 확장하고 있음
     * 불확실한 상황에서 다양한 입력을 기반으로 신속하고 정확한 의사결정이 필요한 다른 중요 분야에도 AI가 도움이 될 수 있음
     * 멀티모달 대규모 언어모델의 자율주행 활용 가능성을 탐구하면서 도로 안전과 접근성 향상에 기여하고자 함
     * 복잡한 실제 환경을 더 효과적으로 탐색하고 추론할 수 있는 AI 발전에 기여할 것으로 기대됨

GN⁺의 의견

     * EMMA는 자율주행 기술 발전에 중요한 이정표가 될 연구임
          + 멀티모달 학습의 강점을 잘 보여주는 사례임
          + 여러 자율주행 핵심 작업을 통합하는 것이 성능 향상에 도움이 됨을 입증함
     * 아직 실제 주행에 바로 적용하기에는 한계가 있지만, 관련 기술 개발에 좋은 참고자료가 될 것임
          + 특히 장기 메모리, 멀티모달 퓨전, 시뮬레이션 최적화 등은 앞으로 중점적으로 연구되어야 할 분야임
     * 자율주행 뿐만 아니라 의료, 제조, 재난 대응 등 다양한 분야에서 멀티모달 AI 기술이 활용될 수 있을 것으로 기대됨
          + 데이터 형태가 다양하고 의사결정이 중요한 영역에서 특히 도움이 될 것임
     * 다만 멀티모달 모델의 블랙박스 특성상 설명가능성과 윤리성 문제가 대두될 수 있음
          + 모델의 편향성을 최소화하고 출력 결과에 대한 근거를 제시하는 것이 중요할 것임
     * 유사한 연구로는 NVIDIA의 DriveNet, Wayve의 AV2.0, Tesla의 FSD 등이 있음
          + 각 기업마다 조금씩 다른 접근법을 취하고 있지만 멀티모달 학습을 공통적으로 활용하고 있음
          + 기업 간 경쟁과 협력을 통해 자율주행 기술이 더욱 발전할 것으로 기대됨
"
"https://news.hada.io/topic?id=17612","Nvidia와 파트너들이 미국 수출 제한을 우회하기 위해 시스템을 구축했음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Nvidia와 파트너들이 미국 수출 제한을 우회하기 위해 시스템을 구축했음

     * Nvidia와 파트너들은 AI 칩을 중동, 러시아, 중국 등으로 수출하기 위한 정교한 우회 시스템을 구축함
     * 중국이나 중국 기업에 납품되는 GPU는 싱가포르를 거쳐 청구되거나 싱가포르에 설립된 중국 자회사를 통해 전달됨
     * 이 자회사들에서는 명목상 싱가포르 화교들이 지분을 갖고 있지만, 실질적인 통제권은 중국 모기업이 보유함
     * ByteDance 등 여러 기업들이 이 시스템을 잘 활용해왔음
     * 중동이나 러시아로 보내질 GPU는 인도를 경유함
     * 블룸버그는 러시아 기업들이 인도 유통업체를 통해 Nvidia GPU를 획득했다고 보도함
     * Nvidia는 이 시스템이 제한 사항이나 규제 지침을 완벽히 준수하지 않더라도 월스트리트의 기대치를 뛰어넘기 위해 원활히 작동하도록 함
     * Nvidia는 GPU의 최종 배송지를 통제할 수 없다고 주장하지만 사실일까?
     * 지난 분기 Nvidia 총 매출의 약 20%가 싱가포르에서 발생했는데, 이는 특히 감사인인 PwC San Jose의 의심을 살 수 있음
     * Nvidia 스스로도 싱가포르가 단순한 청구지에 불과하다고 인정했는데, 이는 이 GPU들이 싱가폴이 아닌 다른 기업에 도달하고 있음을 시사함
     * 법에 따르면 Nvidia는 제품의 최종 배송지를 능동적으로 모니터링하고 법이나 정책 위반 가능성이 있는 행위를 방지해야 함
     * 이는 의문을 제기함: Jensen Huang CEO를 비롯한 경영진이 이 정교한 시스템 구축에 어떤 역할을 했는가?

        Hacker News 의견

     * Nvidia는 미국 회사이지만, 칩은 대만에서 제조됨
          + 중국은 대만을 반란 지방으로 보고 있으며, 대만 침공을 고려 중임
          + 미국이 대만을 지원할 가능성이 있지만, 전쟁이 발생하면 생산에 차질이 생길 것임
          + 대만이 중국에 넘어가고, 중국이 미국으로의 수출을 금지하면 큰 문제가 발생할 것임
          + 중국에 칩을 공급할 비공식 경로가 존재하면, 중국이 대만을 통제할 동기가 줄어듦
     * Nvidia의 성장과 현재의 무게를 고려할 때, 선거 이후까지 제재가 시행되지 않을 것이라는 회의적인 시각이 존재함
          + 어느 당도 경제에 나쁜 영향을 주고 싶지 않음
     * CUDA API에 대한 특허나 소프트웨어 저작권을 취소해야 한다는 의견이 있음
          + Nvidia가 지배적인 이유는 소프트웨어 통제 때문임
     * Nvidia가 더 많이 판매할수록 중국과 다른 나라들이 대안을 만들 가능성이 줄어듦
          + 이는 중국의 수요에 의해 작동하는 시장의 힘임
          + Nvidia는 이를 막기 위해 더 많은 일을 할 수 있지만, 그럴 이유가 없음
     * 싱가포르의 누군가가 그래픽 카드를 구매해 중국에 재판매하는 경우, Nvidia가 이를 어떻게 통제할 수 있을지 이해하기 어려움
     * Nvidia 경영진이 공모했다는 주장을 믿기 어렵지만, 조사가 필요함
     * Nvidia는 GPU의 최종 배송지를 통제할 수 없다고 주장함
          + Nvidia가 동일한 제약을 받지 않는 사람에게 판매를 제한받지 않는 한, 이는 사실임
     * 이러한 무역 제재가 BRICS를 강화하고 그들의 내부 시장 개발을 가속화하지 않는지에 대한 의문이 제기됨
     * ""정교하다""는 표현의 의미를 이해하지 못했음
"
"https://news.hada.io/topic?id=17723","취약한 펌웨어를 가진 구형 재고를 여전히 판매하는 YubiKey","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  취약한 펌웨어를 가진 구형 재고를 여전히 판매하는 YubiKey

     * YubiKey가 여전히 EUCLEAK 공격에 취약한 펌웨어를 가진 구형 재고를 판매하고 있음이 보고됨
     * Fefe's Blog의 한 독자가 이를 보고함

        Hacker News 의견

     * YubiKey의 취약점 발표를 놓쳤으나, 개인의 위협 모델에는 큰 영향을 주지 않음
          + 공격자가 YubiKey를 물리적으로 소유하고, 타겟 계정에 대한 지식과 전문 장비가 필요함
          + 사용자 이름, PIN, 계정 비밀번호, 인증 키 등의 추가 정보가 필요할 수 있음
     * Yubico가 취약한 키를 폐기하지 않고 판매하고 있다는 지적이 있음
          + 새로운 펌웨어가 있는 키는 우선적으로 기관 및 ""우선 고객""에게 공급됨
     * 고객이 Yubico를 신뢰할 수 있는지에 대한 의문이 제기됨
          + 제조사가 고객 보호를 위해 노력해야 한다는 기대가 있음
          + 취약한 키를 판매하는 것은 신뢰 위반으로 간주됨
     * YubiKey를 분실하면 데이터가 손상될 수 있음
          + 14년 동안 발견되지 않은 취약점이 존재함
          + YubiKey를 분해하지 않고도 비밀을 추출할 수 있는 방법이 있음
     * Yubico가 키를 판매하는 이유는 펌웨어 버전을 명확히 표시하는 것이 비용이 많이 들기 때문임
          + 경쟁자가 등장할 기회로 보임
          + Nitrokey가 좋은 대안으로 제시됨
     * 보안 토큰을 구매할 때, 오픈 펌웨어와 하드웨어를 가진 제품을 선호함
          + 독립적으로 검사된 제품을 원함
          + 펌웨어를 로드하고 업데이트할 수 있는 기능이 있으면 좋음
     * Nitrokey를 추천함
          + 소프트웨어가 GitHub에 공개되어 있음
     * 구형 YubiKey를 할인된 가격에 구매할 의향이 있음
          + 개인의 위협 모델에서는 도난된 키에 대한 저항이 크게 필요하지 않음
     * 고객이 보안 토큰을 선택하는 최종 단계에 있었음
          + YubiKey는 더 이상 옵션이 아님
          + 결함 처리 방식에 실망함
     * Yubico의 키 구매 시 수동 공격적인 판매 이메일을 받을 수 있음
"
"https://news.hada.io/topic?id=17640","마이크로소프트, 1983년부터 사용된 "메모장"에 AI 텍스트 편집 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              마이크로소프트, 1983년부터 사용된 ""메모장""에 AI 텍스트 편집 기능 추가

     * Microsoft는 1983년에 처음 출시된 간단한 텍스트 편집기인 Notepad에 AI 기반 텍스트 편집 기능을 추가함
     * 이 기능은 ""Rewrite""라고 불리며, AI를 사용하여 문장을 다시 표현하거나, 어조를 조정하거나, 콘텐츠의 길이를 수정할 수 있음
     * Windows Insiders에게 미리보기로 제공되어, Notepad에서 조정하고자 하는 텍스트를 강조 표시한 후, 마우스 오른쪽 버튼을 클릭하고 Rewrite를 선택하여 사용할 수 있음.
          + Notepad는 텍스트를 어떻게 변경할지 결정할 수 있는 대화 상자를 표시하며, 세 가지 재작성된 버전을 제공함.
     * 이 기능을 사용하려면 Microsoft 계정에 로그인해야 하며, 이는 인증이 필요한 클라우드 기반 서비스로 구동됨. 이 기능은 Windows 11에서 미국, 프랑스, 영국, 캐나다, 이탈리아, 독일에서 미리보기로 출시됨. Microsoft는 7월에 Notepad에 맞춤법 검사 및 자동 수정 기능을 추가한바 있음

Paint의 AI 이미지 편집 도구

     * Microsoft는 Notepad의 Rewrite 기능과 함께, 지난달 미리보기로 공개된 Paint의 새로운 AI 이미지 편집 도구를 Insiders가 테스트할 수 있도록 함.
     * Generative Fill 기능은 프롬프트에 기반하여 이미지에 추가할 수 있으며, Generative Erase는 이미지의 일부를 제거하고 남은 빈 공간을 자연스럽게 채울 수 있음
     * Generative Fill은 처음에는 Copilot Plus PC를 사용하는 테스터에게 제공되지만, Generative Erase는 Windows 11의 모든 Insiders에게 제공됨.

   클래식은 클래식으로…

   사티아 나델라가 CEO 되고나서 정신 좀 차리나 싶었더니 윈11 나올때쯤부터는 2000년대의 M$로 다시 돌아가버렸네요

   메모장에 왜......

        Hacker News 의견

     * Microsoft가 오랫동안 업데이트를 하지 않다가 최근 몇 년간 의미 있는 업데이트를 했지만, 곧바로 불필요한 기능을 추가한 것에 대한 비판이 있음
          + Microsoft 계정에 로그인해야 Rewrite 기능을 사용할 수 있으며, 이는 인증이 필요한 클라우드 기반 서비스임
          + 데이터 수집을 위한 시도로 보임
     * 소프트웨어 회사들이 AI를 모든 곳에 적용하려는 경향이 있으며, 하드웨어 회사들은 이를 통해 더 많은 하드웨어를 판매하려고 함
     * 10년간 Linux만 사용하다가 Windows를 사용한 경험을 공유한 사용자
          + Notepad가 가볍고 좋은 소프트웨어였으나, Windows 11에서 문제가 생겼다고 언급함
     * Windows에서 텍스트나 비밀번호를 안전하게 복사하고 붙여넣을 수 있는 장소가 점점 사라지고 있음
     * 모든 앱에 글쓰기 도구가 포함되는 대신, Apple Intelligence처럼 운영체제 전반에 걸친 도구가 되어야 한다고 주장함
          + AI를 모든 곳에 적용하는 것은 특별한 경우를 제외하고는 의미가 없다고 봄
     * Notepad는 빠른 텍스트 조작을 위한 도구일 뿐, AI 기능이 필요하지 않다고 주장함
          + 과거에 Notepad를 사용해 간단한 HTML 페이지를 작성한 경험을 공유함
     * AI 기능을 기본적으로 활성화하기 위해 지속적인 인터넷 연결과 Microsoft 계정 로그인이 필요할 것이라는 우려가 있음
     * 핵심 기능을 개선하는 대신 최신 기술을 추가하는 경향이 있으며, 이는 사용자에게 불필요한 기능을 추가하는 것이라고 비판함
          + GaiaGPS 앱의 사례를 언급하며, 문제를 해결하기보다는 소셜 기능을 추가했다고 지적함
     * Microsoft의 Notepad 방치가 Notepad++의 등장을 가능하게 했으며, 이제 Notepad를 개선하려고 한다고 언급함
          + 이는 새로운 Notepad--의 등장을 위한 기회를 만들 수 있다고 봄
"
"https://news.hada.io/topic?id=17656","버섯 색상 아틀라스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               버섯 색상 아틀라스

     * 버섯의 색채 우주 탐험
          + 염료 버섯이 자연적으로 생성하는 색상의 스펙트럼을 탐험할 수 있는 동적 아틀라스임
          + 색상은 버섯 종류, 염료 또는 색소, 사용된 직물 및 매염제에 따라 필터링 가능함
     * 색상 검색 및 탐색
          + 아틀라스의 모든 염료 버섯은 인덱스에서 검색 가능함
     * 염색 과정 이해
          + 버섯으로 염색하는 방법, 기술 및 변수에 대해 알아볼 수 있는 프로세스 제공
     * 자원 및 이벤트
          + 포스트를 통해 자원을 찾고 이벤트에 대해 배울 수 있음
     * 책을 통해 버섯 왕국 여행
          + 책을 통해 버섯 왕국의 생생한 여행을 시작할 수 있음
     * 저작권
          + ©2024 Bloom & Dye. 모든 권리 보유

        Hacker News 의견

     * 오늘날 인터넷에 독립적인 사이트로 존재하는 것이 마음에 듦. 버섯이나 염색에 관심이 없지만 사이트의 열정에 감염됨
     * 친구의 엄마가 천연 색소로 양모를 염색하는 것을 좋아함. 주변에서 자라는 버섯으로 염색할 수 있어 흥미로움
          + 겨울 전에 버섯을 찾아 나서야겠음
          + 나무 껍질이나 잎을 위한 유사한 사이트가 있으면 좋겠음
     * 로고가 단순한 3가지 모양으로 3D 버섯처럼 보임
     * 이 사이트의 기반이 된 책을 가지고 있으며 아름다움. 아내와 함께 지역에서 채집한 재료로 퀼트를 만들 계획임
     * 와인 색상을 보여주는 유사한 사이트가 있으면 흥미로울 것임
     * 버섯으로 염색할 수 있다는 것을 몰랐음. 가족과 함께 버섯을 채집하며 시간을 보냄
          + 가난한 사람들은 버섯으로 모자나 건축 자재를 만들었다고 읽은 적이 있음
     * 지난 봄에 지역 이끼로 염색제를 만들었음. 블랙 월넛을 처리하여 염색제로 사용할 수 있다는 이야기를 들음
          + 가을에 필요한 버섯을 찾아볼 예정임
     * 식물을 사용한 인쇄의 다양한 효과가 흥미로움
     * 이 스펙트럼으로 색상 팔레트를 만들어 보고 싶음
     * 웹사이트 디자인이 훌륭하며 빠르고 유용함
"
"https://news.hada.io/topic?id=17686","미루기와 부족함에 대한 두려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            미루기와 부족함에 대한 두려움

     * 게으름과 두려움
          + ""더 많이 읽고 쓰고 싶다""라는 생각이 지난 2년 동안 머릿속에 맴돌았음.
          + 글을 쓰지 않은 이유를 게으름으로만 치부할 수 없으며, 이는 더 깊은 두 가지 문제에서 비롯됨.
     * 내가 충분히 잘하지 못하는가?
          + 글을 쓰려고 할 때마다 몇 문장도 채 쓰지 못하고 멈추게 됨.
          + 스스로 기대하는 수준에 도달하지 못할 것이라는 두려움이 있음.
          + 친구의 격려로 이 사고방식에서 벗어나기 시작했으며, 더 자주 글을 쓰고 읽으면서 개선하려고 함.
     * 다른 사람의 생각을 너무 신경 쓰는가?
          + 다른 사람들이 내 글을 어떻게 생각할지에 대한 걱정이 큼.
          + Hacker News에서 뛰어난 글을 읽을 때 압도감을 느낌.
          + 이러한 두려움을 극복하고 자신의 성장을 위해 노력해야 함.
     * 앞으로 나아가기
          + 내부의 장애물을 대부분 극복했으며, 개선을 위한 진정한 노력을 할 준비가 됨.
          + 글의 질에 상관없이 꾸준히 글을 쓸 계획임.

        Hacker News 의견

     * 글쓰기에 대한 개인적인 경험을 공유하며, 글쓰기를 좋아하지 않음을 밝힘. 글쓰기의 여정이나 결과를 즐기지 못했음
          + 글쓰기의 요소 중 하나라도 좋아하지 않으면, 자신을 위한 것이 아니라 다른 이유로 하는 것일 가능성이 큼
          + 시도해보는 것이 중요함. 직접 해보기 전까지는 알 수 없기 때문임
     * 자아가 문제임을 지적하며, 자아가 자신과 타인에 대해 많은 생각을 가지고 있음
          + 자아가 자신을 너무 높게 평가하여 실패를 피하려고 함
          + 영적 깨달음을 통해 자아가 희석되었고, 이제는 어떤 일도 할 수 있게 되었음
          + 자아를 다루거나, 무조건 결과물을 내야 하는 상황을 만들어야 함
     * 글쓰기에 대한 어려움을 코딩 관점에서 해결함
          + 큰 프로젝트를 작은 기능으로 나누어 작업하는 것처럼, 글쓰기도 작은 아이디어로 나누어 작업함
          + 작은 작업을 통해 전체 구조를 만들고, 결국 새로운 블로그 글을 완성함
          + 중요한 것은 작업을 작게 나누어 부담을 줄이는 것임
     * 글쓰기에 대한 자기 판단과 주변의 높은 기준이 글쓰기를 방해함
          + 글쓰기를 많이 한다고 해서 반드시 출판을 많이 해야 하는 것은 아님
          + 리뷰 스타일의 댓글을 작성하여 콘텐츠를 비판하고, 친구들이 리뷰를 읽도록 함
     * 매일 같은 감정을 느끼는 사람들을 발견함
          + ""시간이 충분하다""라고 말하며 깊게 숨을 쉬는 것과 같은 마음가짐 변화가 도움이 됨
          + 방해 요소를 소음으로 받아들이고 무시하는 것이 중요함
     * 다른 사람의 생각에 대한 걱정이 공감됨
          + 글쓰기를 더 많이 하려고 노력하지만, ""자기 방해""로 인해 어려움을 겪음
          + 이 문제를 해결할 수 있는 팁을 찾고 있음
     * 완벽주의 딜레마에 대해 설명함
          + 완성된 제품의 품질을 너무 중요시하여 작업을 방해함
          + 다른 사람들의 놀라운 성과를 보며 압도감을 느끼는 것이 본능적임을 인정함
     * 걱정을 멈추는 것은 생각의 관점에서 해결되지 않음
          + 불안은 신체적 현상이며, 호흡법이나 운동 등으로 해결해야 함
     * Ira Glass 인터뷰의 첫 3분이 매우 유익하며, 매년 한 번씩 들어보며 자신을 다짐함
     * 대부분의 사람들은 자신이 누구인지 알지 못하며, 다른 사람들이 자신에 대해 어떻게 생각할지 걱정할 필요가 없음
          + 거의 아무도 신경 쓰지 않음
"
"https://news.hada.io/topic?id=17649","몇 분 만에 AI가 있는 앱을 만들었습니다! OpenHands + Daytona","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              몇 분 만에 AI가 있는 앱을 만들었습니다! OpenHands + Daytona
"
"https://news.hada.io/topic?id=17727","Web Lockseb Locks API

     * Web Locks API는 하나의 탭이나 웹 워커에서 비동기적으로 락을 획득하고, 작업을 수행한 후 락을 해제할 수 있게 해줌
     * 락이 유지되는 동안 동일한 origin 내에서 다른 스크립트는 동일한 락을 획득할 수 없으므로 여러 탭이나 워커에서 리소스를 안전하게 조율할 수 있음
     * Secure Context(HTTPS) 에서만 사용 가능하며, Web Workers 에서 사용 가능

주요 개념 및 사용 방법

     * 락(Lock) 은 웹 애플리케이션에서 정의한 이름으로 식별되는 추상적인 리소스
     * 예를 들어, 여러 탭에서 IndexedDB와 네트워크 동기화를 할 때, “my_net_db_sync”라는 락을 사용하여 한 번에 하나의 탭만 동기화를 수행할 수 있음
     * 사용 흐름:
         1. 락 요청
         2. 비동기 작업 수행
         3. 작업 완료 후 자동으로 락 해제

예제 코드

   navigator.locks.request(""my_resource"", async (lock) => {
   await do_something();
   await do_something_else();
   });
     * 락이 유지되는 동안 동일한 락에 대한 다른 요청은 대기열에 추가되며, 락이 해제되면 첫 번째 요청이 처리됨

옵션

     * mode: 기본 모드는 “exclusive”(단독), “shared”(공유) 모드도 가능. “exclusive”는 하나의 요청만 허용, “shared”는 다수 허용 가능
     * ifAvailable: 즉시 락을 획득할 수 없는 경우 요청 실패, 콜백은 null 반환
     * steal: 동일한 이름의 기존 락을 해제하고 새로운 요청을 우선 처리
     * signal: AbortSignal을 통해 요청을 중단할 수 있음 (예: 타임아웃 구현)

모니터링

     * navigator.locks.query()를 사용하여 현재 origin의 락 상태를 조회할 수 있음
     * 이는 디버깅 시 유용하며, 어떤 락이 유지되고 있는지, 요청된 락이 무엇인지 확인 가능

고급 사용법

     * 비동기 작업의 완료 시점을 명시적으로 제어하려면 Promise를 반환 가능

   let resolve;
   const p = new Promise((res) => { resolve = res });

   navigator.locks.request(""my_resource"", (lock) => p);
     * resolve() 호출 시 락이 해제됨

데드락(Deadlock) 방지

     * 데드락은 서로 다른 요청이 순서 문제로 충돌하여 진행이 불가능한 상황
     * 예를 들어, 탭 1이 락 A를 가지고 있고, 탭 2가 락 B를 가진 상황에서, 탭 1이 락 B를 요청하고 탭 2가 락 A를 요청하면 서로 기다리게 됨
     * 이를 방지하려면:
     * 락 요청은 중첩되지 않도록 함
     * 락 요청은 순서를 지켜서 진행
     * 타임아웃을 설정하여 요청을 중단

인터페이스

     * Lock: 요청된 락의 이름과 모드를 제공
     * LockManager: 새로운 락을 요청하거나 기존 락을 조회할 수 있는 메서드 제공
     * navigator.locks로 인스턴스 획득 가능
     * WorkerNavigator.locks는 Web Workers에서 사용 가능

스펙 및 브라우저 지원

     * 스펙: Web Locks API
     * 브라우저 호환성: 일부 브라우저에서만 지원되며, 최신 브라우저에서의 지원 여부는 MDN에서 확인 가능

GN⁺의 의견

     * Web Locks API는 비동기 환경에서 리소스 동기화 문제를 해결하는 데 유용함
     * 데드락 발생 가능성이 있으므로 사용 시 주의가 필요하며, 타임아웃 설정과 같은 안전 장치를 고려해야 함
     * Shared mode는 읽기 전용 작업에서 성능을 높일 수 있으나, 여전히 경쟁 조건에 대한 철저한 검토가 필요함
     * 이 API는 기존의 localStorage나 IndexedDB의 동기화 이슈를 해결하는 대안으로 활용될 수 있음
"
"https://news.hada.io/topic?id=17633","트뤼도 정부, 캐나다에서 TikTok 운영 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       트뤼도 정부, 캐나다에서 TikTok 운영 금지

     * 트뤼도 정부, 캐나다에서 TikTok 운영 금지
          + 캐나다 연방 정부는 TikTok의 캐나다 내 운영을 중단하도록 명령했으나, 캐나다인들이 앱에 접근하는 것은 차단하지 않음.
          + 혁신부 장관 프랑수아-필립 샹파뉴는 국가 안보 검토 결과와 캐나다 보안 및 정보 커뮤니티의 조언에 따라 이 결정을 내렸다고 밝힘.
          + 정부는 캐나다인들이 앱을 사용하는 것을 막지 않지만, TikTok 사용 시 주의할 것을 권고함.
     * TikTok의 데이터 보안 우려
          + TikTok 사용자의 데이터가 중국 정부에 의해 수집될 수 있다는 비판이 있음.
          + 캐나다 보안 정보 서비스(CSIS)는 TikTok 사용이 위험하다고 경고하며, 특히 청소년들에게 주의를 당부함.
          + TikTok의 모회사 ByteDance가 중국 정부와의 연관성으로 인해 데이터 접근 가능성이 있다는 우려가 제기됨.
     * TikTok의 대응
          + TikTok은 캐나다 내 사무소 폐쇄 명령에 대해 법적 대응을 계획 중이라고 밝힘.
          + 회사는 서버가 중국 외부에 있으며, 캐나다의 데이터 보호 및 개인정보 보호법을 준수한다고 주장함.
     * 미국의 TikTok 관련 우려
          + 미국 의원들은 TikTok의 모회사 ByteDance가 중국 정부에 종속되어 있으며, 데이터 접근을 요구받을 수 있다고 주장함.
          + ByteDance는 중국의 소수 민족 탄압 및 홍콩 시위자 타겟팅에 관여했다는 비난을 받고 있음.
     * 캐나다 정부의 조치
          + 2023년 2월, 캐나다 정부는 모든 정부 기기에서 TikTok 사용을 금지함.
          + 이후 앱에 대한 국가 안보 검토를 명령했으며, 이번 발표는 그 결과임.

     미국과 캐나다는 TikTok을 위협으로 간주하기보다는 TikTok, Meta, Google, Apple, X에 동일하게 적용되는 데이터 보호법을 마련해야 함. EU의 법은 완벽하지 않지만 최악의 관행을 금지함. 중국은 광고 중개업체로부터 미국과 캐나다인의 정보를 구매할 수 있음

        Hacker News 의견

     * 미국과 캐나다는 TikTok을 위협으로 간주하기보다는 TikTok, Meta, Google, Apple, X에 동일하게 적용되는 데이터 보호법을 마련해야 함. EU의 법은 완벽하지 않지만 최악의 관행을 금지함. 중국은 광고 중개업체로부터 미국과 캐나다인의 정보를 구매할 수 있음
     * 정치인들이 규제에 동의하도록 하려면, 데이터 중개업체로부터 얻은 정보를 통해 국회의원들의 개인 정보를 공개하는 방법을 사용할 수 있음
     * 많은 사람들이 ""왜 십대의 데이터가 TikTok에 있는 것이 큰 문제인가?""라고 생각할 수 있지만, 5년, 10년 후 그 십대는 젊은 성인이 되어 전 세계적으로 다양한 활동에 참여하게 될 것임
     * Gen-Z로서 모든 것을 온라인에 공유하는 것이 점점 더 일반화되고 있는 것이 걱정스러움. AI가 오늘날의 데이터를 학습하여 인터넷 기록으로 남게 될 것임
     * ByteDance가 캐나다에 사무실을 두는 것을 금지하는 것이지 앱을 금지하는 것은 아님
     * 아일랜드가 이와 같은 조치를 취하고, Instagram, Youtube, Snapchat, Facebook, Pornhub, Netflix, Disney, Spotify 등을 금지하는 것을 기대함. 그러나 정부가 이렇게 개입하는 것은 환영할 일이 아님
     * 만약 실제로 ""국가 안보 우려""가 있다면, TikTok의 캐나다 시민 데이터는 캐나다 내에 저장되고 캐나다 직원만 접근할 수 있도록 해야 함. 이 금지는 회사의 존재를 제거하면서 앱은 계속 활성화되어 반대의 결과를 초래함
     * 이 금지는 매우 어리석은 결정임. 데이터가 국경을 넘지 않도록 해야 함. 정부가 어리석음
     * TikTok이 캐나다 사무실을 가질 수 없다면 캐나다 콘텐츠 자격을 얻을 수 없다는 CANCON 규칙과 관련이 있을 수 있음
     * 젊은 남성들의 현실 인식이 얼마나 나쁜지 알고 싶다면 genz reddit과 SubredditDrama의 인기 게시물을 확인해보길 권장함. 사회적 차원에서 젊은 남성들이 잘못된 길로 빠지지 않도록 해야 함. TikTok 금지가 큰 문제이며, 그 결과가 긍정적일지 부정적일지 알 수 없음
     * 국가 안보 우려로 인해 연방 정부가 TikTok의 캐나다 운영을 중단하도록 명령했지만, 캐나다 사용자는 여전히 앱에 접근할 수 있음
     * 미국 정부가 거의 모든 사람을 감시한다는 사실이 여러 내부 고발자와 법원을 통해 알려졌음에도 불구하고 중국 정부가 감시한다는 것이 큰 우려가 되는 이중 잣대가 재미있음. 유럽인으로서 이러한 이중 잣대와 미국의 예외주의가 불편하고 짜증스러움
"
"https://news.hada.io/topic?id=17690","Audio Decomposition – 음악을 구성 악기로 분리하는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Audio Decomposition – 음악을 구성 악기로 분리하는 오픈소스

     * 프로젝트 개요
          + 이 프로젝트는 음악을 악보로 변환하는 프로그램을 만드는 것을 목표로 함.
          + 외부 악기 분리 라이브러리를 사용하지 않고, 음악을 구성 악기로 분리하는 오픈 소스 프로젝트임.
          + 개인적인 필요와 간단한 오픈 소스 알고리듬의 부재가 프로젝트의 동기였음.
     * 준비 과정
          + 악기 데이터는 University of Iowa Electronic Music Studios의 데이터베이스에서 가져옴.
          + 이 데이터로부터 전체 파형의 푸리에 변환과 파형의 엔벨로프를 구함.
     * 작동 원리
          + 악기의 소리 파형은 주로 푸리에 변환과 엔벨로프로 특징지어짐.
          + 이를 통해 어떤 악기가 어떤 음을 연주하는지 파악할 수 있음.
     * 푸리에 변환
          + 음악 파일의 푸리에 변환을 0.1초마다 수행하여 스펙트로그램을 생성함.
          + 각 악기의 저장된 푸리에 변환을 합산하여 0.1초 창의 푸리에 변환을 재구성함.
          + 각 악기의 크기는 MSE 비용 함수의 주파수에 대한 편미분을 통해 구함.
     * 엔벨로프
          + 엔벨로프는 파형의 상한선이며, 잡음과 특정 유형의 파형에 강인한 방법이 필요함.
          + 파형을 청크로 나누고 각 청크의 최대값을 취하여 엔벨로프를 구함.
          + 엔벨로프를 공격, 유지, 해제로 나누어 분석함.
          + 악기의 파형은 정적 또는 동적 감쇠를 가질 수 있으며, 이를 구분하기 위해 감쇠 인자와 변화율을 분석함.
     * 파형의 다양한 유형
          + 음악 파일을 처리하기 위해 각 음의 주파수에 대해 밴드패스 필터를 적용함.
          + 각 악기에 대해 공격과 해제의 교차 상관을 통해 각 음의 시작과 끝을 찾고, MSE를 계산하여 비용을 구함.
          + 푸리에 변환 단계에서 찾은 크기와 비용의 역수를 곱하여 최종 크기를 구함.
     * 결과 및 디스플레이
          + matplotlib의 산점도를 사용하여 악보를 표시함.
          + 원래는 크기로부터 오디오를 재구성하려 했으나, 많은 문제가 발생하여 포기함.
          + 악보 재구성에 유용하며, 음정이나 코드 찾기에 어려움을 겪는 경우 특히 도움이 됨.

        Hacker News 의견

     * 제목이 혼란스러울 수 있음. 이 프로젝트는 음원 분리가 아니라 피치 감지 알고리즘이며, 악기를 분류하는 기능도 포함함
          + 결과를 수정하는 데 시간이 더 걸릴 수 있음
     * 자동 음악 전사(오디오->MIDI)는 딥러닝과 음악 정보 검색의 중요한 하위 분야임
          + Google의 MT3 프로젝트가 성공적인 모델로 언급됨
          + 피아노 전사의 경우, 낮은 품질의 오디오에서도 거의 완벽한 정확도를 보임
     * 오디오 분리에 관심이 있다면 RipX를 참고할 만함
          + 분리된 트랙을 MIDI 파일로 내보낼 수 있음
          + 여전히 몇 가지 문제가 있지만 잘 작동함
          + 스템 분리는 이제 음악 소프트웨어의 표준이며 거의 모든 DAW가 이를 제공함
     * 실제 악기 물리학은 단순한 푸리에 변환 템플릿으로 포착되지 않을 수 있음
          + 트럼펫은 부드럽게 연주할 때와 크게 연주할 때 다른 조화 스펙트럼을 가질 수 있음
          + 악기의 강도에 따라 조화 내용이 크게 변할 수 있음
          + 각 악기에 대한 강도 의존적 푸리에 템플릿을 추가하여 정확성을 향상시킬 수 있음
     * 15년 전 Audiosurf를 플레이했던 기억이 떠오름
     * YouTube 비디오 데모가 소스 분리를 보여주지 않는 것 같음
     * ""separation""이 네 번 잘못 철자되었음을 언급하는 사람이 없음
     * 일부 비디오에는 오디오가 없는 것 같음
     * 이 프로젝트는 Joshua Bird의 동생의 작업일 수 있음
          + Joshua Bird는 이미 인상적인 프로젝트를 진행했음
     * 소스 코드를 찾을 수 없지만 프로젝트가 흥미로워 보임
"
"https://news.hada.io/topic?id=17621","Medium에 AI Slop이 넘쳐나고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Medium에 AI Slop이 넘쳐나고 있다

     * 12년된 블로그 플랫폼 Medium에 AI 생성 콘텐츠가 쏟아지고 있음
     * CEO Tony Stubblebine은 아무도 읽지 않는 한 이는 ""중요하지 않다""고 말함
     * 올여름 처음으로 월간 흑자를 달성한 Medium은 ""a home for human writing"" 이라고 주장하지만, 로봇 블로거들도 증가하고 있음

최근 Medium에서의 AI 생성 콘텐츠 비율

     * Pangram Labs의 분석에 따르면, 최근 27만 건 이상의 게시물 중 47% 이상이 AI 생성 콘텐츠일 가능성이 높음
     * 이는 인터넷 전체 평균인 7%보다 훨씬 높은 수치임
     * Originality AI의 분석 결과도 이와 유사함. 2018년에는 3.4%에 불과했으나 2023년에는 40% 이상으로 추정됨
     * Medium에서 발견되는 AI 생성 콘텐츠의 주제는 대부분 암호화폐, NFT, web3, 이더리움, AI 등에 관한 내용임
     * 특이하게도 ""pets"" 태그에서도 AI 생성 콘텐츠가 많이 발견됨

Medium CEO의 입장

     * 그러나, Stubblebine은 Medium의 AI 문제에 대해 부인함
          + AI 탐지기 사용 결과의 중요성과 이 회사들이 무언가를 발견했다는 개념 자체에 이의를 제기함
          + AI 생성 콘텐츠가 연초 대비 10배 증가했다는 점은 인정하지만, 이는 ""중요하지 않다""며, 추천되거나 조회되는 실제 활동을 나타내지 않는다고 주장
     * Medium의 스팸 필터링 시스템과 사람에 의한 검토로 AI 콘텐츠를 효과적으로 억제하고 있다고 봄
          + ""대부분의 AI 생성 콘텐츠는 이미 조회수 0회""
          + 그러나 일부 AI로 의심되는 게시물은 수백 개의 ""박수""를 받는 등 실제로 0회 이상의 조회수를 보이고 있음

Medium의 AI 대응 정책

     * Medium은 AI 정책을 업데이트하며 로봇 블로거 억제를 위한 조치를 취함
          + AI 작성물에 대한 유료화, 광범위한 배포, 제휴 링크 홍보 등을 금지함
          + 공개된 AI 작성물은 일반 배포를, 비공개 AI 작성물은 팔로워 피드에만 표시되도록 제한함
     * 그러나 이러한 새로운 규칙에 대한 AI 특화 집행 도구는 없음
          + 기존의 큐레이션 시스템이 AI 생성 콘텐츠를 필터링하는 부수적 효과가 있다고 봄

Medium 작가와 편집자들의 의견

     * 일부는 Medium의 AI 접근 방식을 칭찬함
          + 사람에 의한 큐레이션이 플랫폼 내 양질의 인간 작성 콘텐츠를 부각시킨다고 봄
     * 그러나 다른 이들은 여전히 많은 AI 생성 콘텐츠가 존재한다고 생각함
          + AI 생성으로 의심되는 게시물이 바이럴되는 사례 제기
          + 잠재 기고자의 80%가 AI를 사용하고 있다고 판단해 거절했다는 편집자도 있음

더 큰 맥락에서의 AI 콘텐츠 문제

     * AI 붐은 플랫폼들이 양질의 콘텐츠를 부각시키고 쓰레기를 제거해야 하는 검열 문제를 더욱 가중시킴
          + Medium 외에도 Facebook, LinkedIn 등 많은 플랫폼에서 AI 콘텐츠가 급격히 증가하고 있음
          + YouTube에서도 AI 생성 콘텐츠를 통해 수익을 창출하는 방법을 권장하는 튜토리얼이 증가 중
          + Jonathan Bailey와 같은 전문가들은 인간 큐레이터와 스팸 필터가 이러한 AI 콘텐츠의 확산을 막는 데 가장 효과적인 도구라고 언급
     * 일부 플랫폼이 AI 콘텐츠 차단을 포기한다면, 사람이 만든 콘텐츠를 찾기가 더 어려워질 수 있음

   워터마크 임베딩같은 slop detection이 ai 시대의 새로운 먹거리일수도..

   저는 medium 유료 결제 중인데, 양질의 아티클이 많아서 돈내고 보는거라서, 해당 문제는 중요한 부분이라고 생각합니다.

   Medium은 가입과 블로그 구독 유도가 지나치게 심해서 AI붐 전에도 일부러 피했습니다

   맞아요... 저도 전체 내용 보려면 구독하라고 뜨면 그냥 닫아버려요
   언젠가 코딩애플 유튜브에서 뚫는 방법 소개하긴 했지만 그렇게해서까지 보고 싶지 않습니다

   AI가 생성했다고 의심되는 자료를 설명하는 새로운 용어 ""Slop"" 등장
"
"https://news.hada.io/topic?id=17655","미국 16개 주, 커뮤니티 소유 Broadband Networks 여전히 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국 16개 주, 커뮤니티 소유 Broadband Networks 여전히 금지

        Hacker News 의견

     * 러시아에서 사람들이 아파트 건물에 자신들만의 허브와 스위치를 설치하고 이더넷 케이블을 연결하여 인터넷을 구축한 경험이 놀라웠음
     * 작은 주의 소규모 광섬유 ISP를 사용 중이며, 커뮤니티 소유는 아니지만 고객 경험 측면에서 큰 차이는 없다고 생각함. 사업의 규모와 지역성이 네트워크 품질을 높이는 데 기여함
     * 커뮤니티 소유의 물리적 인프라, 특히 마지막 마일의 광섬유 및 구리선이 기본이 되어야 하며, 그렇지 않다면 개방형 접근 요구 사항으로 규제되어야 함
     * 미주리주의 법이 재해석되어 광대역 네트워크를 허용하게 되었으며, KCFiber와 같은 시 소유의 네트워크가 무료 서비스를 제공함
     * 16개 주에서 커뮤니티 네트워크에 대한 제한이 있지만, 많은 커뮤니티가 이를 극복하고 있음
     * 규제 포획이 문제이며, 앞으로 4년간 변화가 없을 것임
     * 정치적 연결을 피하고 싶지만, 현재 대통령 당선자에게 투표하지 않은 주가 하나뿐이라는 점이 눈에 띔
     * 테네시 주의 인터넷 인프라가 매우 인상적이며, 작은 도시에서도 훌륭한 FTTH 커버리지를 제공함
     * 주 의원들이 커뮤니티 광대역에 반대하는 이유가 궁금함
     * 커뮤니티 광대역이 금지되어서는 안 되지만, 지방자치단체가 이를 설치할 때 문제를 일으키고 있음. 설치 과정에서 많은 피해가 발생하고 있으며, 서비스의 품질은 시간이 지나야 알 수 있을 것임
"
"https://news.hada.io/topic?id=17673","Mergiraf - Git용 구문 인식 Merge 처리기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Mergiraf - Git용 구문 인식 Merge 처리기

     * Git Merge Conflict를 해결하는 도구로, 파일 내 트리를 이해하여 양측의 요구를 조화롭게 해결
     * 새로운 언어를 선언적으로 추가할 수 있음
     * Git의 기본 Merge 알고리듬 대신 Mergiraf를 사용하도록 설정 가능
          + merge, revert, rebase, cherrypick 등의 Git 명령어를 향상시킴
     * 또는 Git의 원래 동작을 유지하면서 충돌 발생 시 수동으로 Mergiraf를 호출할 수 있음.

Mergiraf의 목표

     * 충돌을 숨기지 않음
          + 구문을 인식하는 머지 휴리스틱은 때로는 지나치게 낙관적으로 충돌이 해결되었다고 간주할 수 있음
          + Mergiraf는 의심스러운 경우 파일에 충돌 마커를 유지하는 쪽으로 최선의 상태를 보존
          + 모든 충돌을 자체적으로 해결했다면 mergiraf review 명령을 통해 중재 작업을 검토하도록 권장
          + 병합이 잘못된 것처럼 보이면 mergiraf report로 쉽게 보고할 수 있음
     * 대화식 사용에 충분할 만큼 빠름
          + 기린은 시속 60킬로미터로 달릴 수 있음
          + 파일의 분기 버전을 병합하는 작업은 충돌이 없는 한 종종 눈치채지 못한 채 일상적으로 발생함
          + Mergiraf는 작업을 방해하지 않도록 빨라지려고 노력함
     * 다른 방법에 개방적임
          + 많은 경우 행 기반 병합은 잘 작동하며 트리 조작이 필요하지 않음
          + 행 기반 병합에 충돌이 없으면 Mergiraf는 해당 병합을 반환함(매우 빠름)
          + 행 기반 병합으로 인해 중복 키가 생성되면 Mergiraf는 문제를 해결하거나 충돌 마커로 강조 표시하기 위해 약간의 추가 작업을 수행함

   기린은 시속 60 킬로미터로 달릴 수 있군요

        Hacker News 의견

     * SemanticDiff와 유사한 작업을 하고 있으며, tree-sitter와 GumTree 사용에서 문제를 겪고 있음
          + tree-sitter는 주로 구문 강조를 위해 작성되어, 코드 수정 시 정확한 구문 분석이 어려움
          + GumTree는 빠른 결과를 제공하지만, 잘못된 매칭을 자주 반환함
          + Dijkstra 기반 접근 방식으로 전환하여 더 나은 결과를 얻고 있음
     * Mergiraf의 아키텍처 섹션이 복잡한 도구의 작동 방식을 깊이 있게 설명하고 있음
     * 기린을 선택한 이유는 높이로 인해 멀리 볼 수 있고, 육상 포유류 중 가장 큰 심장을 가졌기 때문임
     * 일부 삽입에서 순서가 중요하지 않다고 주장하는 것에 대해 비판적임
          + 언어 수준에서는 순서가 중요하지 않을 수 있지만, 인간에게는 특정 순서가 중요할 수 있음
          + 예시로 Base struct Foo; struct Bar; 사이에 Left가 impl Foo { }를 삽입하고 Right가 struct Baz;를 삽입하는 경우, 컴퓨터는 차이를 인식하지 못함
     * Git의 병합 드라이버 개발에 긍정적임
          + 표준 3-way 병합은 언어를 인식하지 못해 문제를 일으킬 수 있음
          + Python 코드에서 두 가지 다른 브랜치가 각각 다른 print를 삭제하면 유효하지 않은 코드가 됨
     * 팀이 문제에 맞게 기본 언어를 확장할 때 구문 인식 도구가 문제를 겪음
          + Rust의 매크로나 ""go generate"" 사용 사례를 언급함
     * 자동 포맷팅 관련 충돌 해결에 도움이 될 수 있는 아이디어임
          + 코드 이동으로 인해 발생하는 의미적 충돌을 감지할 수 있는지 궁금해함
     * Mergiraf를 시도해볼 예정이며, git-absorb와 함께 사용 중임
          + 두 도구가 완벽하게 작동하거나 Git에 공식적으로 통합되면 좋겠음
     * Python 지원이 유용할 것 같음
          + Python의 들여쓰기 기반 AST가 잘 작동할 것으로 보임
     * 언어 지원이 제한적이지만, 더 많은 언어 지원이 추가되기를 바람
"
"https://news.hada.io/topic?id=17696","Show GN: 경쟁사 홈페이지 키워드 분석 툴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: 경쟁사 홈페이지 키워드 분석 툴

   경쟁사 홈페이지가 어떤 키워드로 구글 오가닉 유입을 많이 만들고 있는지 확인할 수 있습니다.
   우리 회사 SEO 키워드 전략을 수립하거나, 경쟁사 분석을 할 때 사용할 수 있는 솔루션으로 보입니다.

   과금에 따라 보여주는 리스트 수를 차등을 두시는듯한데 그걸 css 레벨에서 하니 개발자 도구로 바로 패스가 가능합니다..

   해당 문제 해결해두었습니다! 감사합니다 :)

   국내 서비스인가보네요. 한번 써봐야겠습니다.

   많은 피드백 부탁드립니다 :-)
"
"https://news.hada.io/topic?id=17626","목성의 새로운 이미지 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             목성의 새로운 이미지 공개

     * PJ66 목성 이미지 콜라주
          + NASA/JPL-Caltech/SwRI/MSSS/Brian Swift가 제공한 과장된 색상 및 대비의 목성 이미지 콜라주임
     * PJ66 북극 최소 방출 각도
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공한 이미지임
     * PJ66, 이오 및 아말테아
          + 60 PPD로 구형으로 재투영된 이미지로, 명목상 최대 반경에 비해 100 km 여유를 두고 있음
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공함
     * JNCE_2024296_66C00020_V01, JNCE_2024296_66C00021_V01
          + PJ66, 아말테아가 600 PPD로 구형으로 재투영된 이미지로, 명목상 최대 반경에 비해 20 km 여유를 두고 있음
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공함
     * PJ66, 이오
          + 60 PPD로 구형으로 재투영된 이미지로, 명목상 최대 반경에 비해 20 km 여유를 두고 있음
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공함
     * PJ65 목성 이미지 콜라주
          + NASA/JPL-Caltech/SwRI/MSSS/Brian Swift가 제공한 과장된 색상 및 대비의 목성 이미지 콜라주임
     * 목성 PJ 66
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt/Thomas Thomopoulos가 제공한 이미지임
     * 북극 순환 극지 사이클론
          + PJ66, #33 및 #31 이미지로, NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공함
     * 접힌 필라멘트 지역
          + PJ66, #29 및 #27 이미지로, NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공함
     * PJ66 제트 N6 및 N5
          + NASA/JPL/SwRI/MSSS/Gerald Eichstädt가 제공한 이미지임

        Hacker News 의견

     * Juno는 구름층을 관통하여 아래를 볼 수 있는 레이더와 관련된 임무였음. 대학 시절 아들이 이 레이더 데이터를 처리하는 FFT 엔진 작업에 참여했음. 그의 코드가 목성을 돌고 있음
          + Juno는 2011년에 발사되어 2016년부터 목성을 궤도에 두고 있음. 위키피디아의 타임라인을 보면 여전히 매달 목성에 가까워지고 있음. 임무는 약 1년 후에 종료될 예정임
          + 카메라는 교육 및 대중 홍보를 위해 포함되었으나 나중에 목성의 구름 역학을 연구하는 데 재사용되었음
     * 외계 느낌이 있으며 때로는 불안감을 줌. 달 착륙 사진부터 화성 탐사 로버, 다양한 소행성과 행성 임무까지 태양계의 객체들이 이제는 생생하고 복잡하며 ""실제"" 장소로 느껴짐
     * 이러한 이미지들은 항상 놀라움을 줌. 시각적으로 더 접근 가능하고 인상적으로 만들기 위해 편집이 이루어지지만, 이미지들은 점점 더 좋아질 것임
     * 목성의 소용돌이들은 행성 크기의 허리케인 같아서 무서움을 줌. 목성이 더 컸다면 별이 되었을 것이고, 지구에 생명은 존재하지 않았을 것임. 소름이 돋음
     * 고정된 각도에서 목성을 24/7으로 보여주는 것을 보내는 것이 얼마나 어려운지 궁금함
     * 아름다운 이미지들임. 왜 Flickr에 전체 해상도 사진을 호스팅하고 자체 서버에는 호스팅하지 않는지 궁금함
     * 어쩌면 어리석은 질문일 수 있지만, 왜 사진이 잘려 있는지 궁금함
     * 사진의 화질 향상이 믿기지 않을 정도임
     * 목성이 왜 그렇게 다채로운지 궁금함. 색상의 변동이 밀도의 변동을 나타낸다면, 왜 목성에는 그렇게 많은 난류가 있는지, 왜 상층부가 더 일관되지 않은지 궁금함. 조석 운동 때문인지 아는 사람 있는지 궁금함
"
"https://news.hada.io/topic?id=17729","제2차 세계 대전 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             제2차 세계 대전 시각화

     * 과거의 시각화 (제2차 세계 대전)
          + 블로그 작성자는 역사와 지도를 좋아하며, 지도를 통해 세계를 이해할 수 있다고 설명함. 역사적 지도는 과거의 시각을 보여주며, 시대에 따라 세계에 대한 인식이 어떻게 변화했는지를 알 수 있음.
     * 제2차 세계 대전의 지도
          + 프랭클린 D. 루즈벨트의 연설: 1942년 2월, 루즈벨트 대통령은 전 세계적인 전쟁 상황을 설명하며 지도를 펼쳐보라고 권장함. 이는 현대 정보 기술을 통해 전쟁을 자세히 따라갈 수 있었던 시대적 배경을 반영함.
          + 1939년 9월 10일, 로스앤젤레스 타임스 지도: 독일의 폴란드 침공 직후 발행된 이 지도는 전쟁 초기의 불확실성과 전략적 요소를 보여줌. 당시 소련, 이탈리아, 발칸 국가들은 중립 상태였으며, 서방 연합국이 폴란드를 지원할 가능성을 탐색함.
          + 1939년 5월, 독일의 지도: 독일의 영토 확장을 보여주는 이 지도는 나치 독일의 선전 목적으로 사용됨. 당시 독일의 영토 확장은 미국의 텍사스와 비교되며, 미국 내 여론에 영향을 미치려는 시도가 있었음.
          + 1937년, 로스앤젤레스 이그재미너 지도: 미국의 패배 가능성을 상상하며 자원과 지역에 대한 관심을 보여줌. 이는 제1차 세계 대전 당시 미국의 참전을 반대했던 신문의 입장을 반영함.
          + 1940년 6월 2일, 샌프란시스코 이그재미너 지도: 이탈리아의 전쟁 참여 직전 발행된 이 지도는 지중해 지역의 지리적, 지정학적 맥락을 설명함. 무솔리니의 야망과 이탈리아의 전략적 목표를 보여줌.
          + 진주만 공격 직후, 시카고 데일리 트리뷴 지도: 일본 제국의 확장을 시간 순서대로 보여주며, 제국주의 일본의 위협과 그 취약성을 설명함.
          + 러시아 전쟁 구호 지도: 소련의 전쟁 상황을 미국에 전달하려는 시도로, 미국의 특권적 위치를 강조함.
          + 항공 경로 지도: 전쟁의 새로운 전장을 항공 경로로 설명하며, 항공 전력의 중요성을 강조함.
          + 특별판 제2차 세계 대전 책: 작은 도시 신문이 전쟁을 어떻게 보도했는지를 보여주는 자료로, 당시 사람들의 시각을 이해하는 데 도움을 줌.
          + 1940년 5월 10일, 독일의 프랑스 침공 지도: 전략적 상황을 대중에게 전달하려는 시도로, 당시의 불확실성을 반영함.
          + 영국 침공 가능성 지도: 1941년 미국인들에게 현실적인 우려였던 독일의 영국 침공 가능성을 탐색함.
          + 1942년 11월, 연합군의 작전 횃불 지도: 작전의 세부 사항을 보여주며, 당시 사람들에게 전쟁 상황을 이해시키려는 시도임.
          + 1939년 11월, 10년 지도: 1930년대의 지리적, 정치적 변화를 보여주며, 제2차 세계 대전의 배경을 설명함.

   지도가 첨부됐으면 더 좋았을 것 같습니다. 하나하나 검색해서 찾아보자니 불편하고, 내가 찾은 지도가 맞는지도 잘 모르겠달까. 되게 재밌을 것 같은데 아쉽네요.

        Hacker News 의견

     * 한 사용자는 이 게시물을 보면서 시간이 가는 줄 몰랐으며, 특히 ""on June 2nd, 1940""와 ""effort by Russian War Relief"" 위의 내용이 가장 인상적이었음을 언급함. SimCity 2000, RISK를 즐겼던 어린 시절을 회상하며, 물리적인 지도를 분석하는 것이 매우 만족스러웠음을 표현함
     * 다른 사용자는 제2차 세계 대전 프로젝트를 완료했으며, Google Maps가 전투를 따라가는 데 유용했음을 설명함. 그러나 Google Maps의 세부 정보가 너무 많아 특정 작전을 따라가는 것이 어려웠음을 언급하며, ""The West Point Atlas of War""와 같은 자료를 추천함
     * 또 다른 사용자는 1944년의 World Almanac을 소유하고 있으며, 제2차 세계 대전에 대한 상세한 정보를 제공함. 특정 날짜에 어떤 일이 일어났는지 확인하는 데 사용하며, 전쟁 지도도 매우 상세함을 강조함
     * 제2차 세계 대전에 대한 조직과 효율성의 중요성을 강조하며, 당시의 인간들이 종이, 타자기, 물리적 우편, 초기 전기 통신 시스템을 사용하여 거대한 조직적 노력을 수행했음을 설명함. 현대 기술이 오히려 과도한 분석을 초래할 수 있음을 지적함
     * 역사적 자료로서 ""Atlas Of World War II""를 추천하며, 관련 링크를 공유함
     * 제2차 세계 대전의 시각화 자료로 ""The Fallen of World War II""를 추천하며, 이 자료가 잘 연구되고 명확하게 시각화되었음을 설명함. 수백만 명의 죽음을 다루면서도 사람들을 단순한 통계로 보지 않도록 상기시킴
     * 1939년의 첫 번째 지도에서 북해의 영국 봉쇄선이 제1차 세계 대전에서 중요했으나 제2차 세계 대전에서는 덜 중요했음을 언급함
     * 첫 번째 지도를 보며 파리와 베를린 사이의 선이 아르덴을 통과하며, 1940년 5월에 프랑스 선을 돌파한 군대 그룹 A의 경로임을 설명함
     * Stephen E. Ambrose의 ""D-Day""와 ""Citizen Soldiers""의 팬인 사용자는 책의 내용을 지도와 함께 시각적으로 보여주는 비디오 동반 자료를 원함. Mr. Goldwag의 사이트가 역사 이해를 돕는 도구로서의 지도를 사랑하는 것을 보여주며, 그의 노력을 칭찬함
"
"https://news.hada.io/topic?id=17699","Show GN: 유튜브 바이럴 아이디어 찾기 DataTube.tv","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 유튜브 바이럴 아이디어 찾기 DataTube.tv

   ✅ 개요
   • 유튜버를 위한 대박 영상 검색 웹사이트
   • 대박난 영상을 검색함으로써 유튜브 주제를 찾는 것을 도와줌.
   • 뷰트랩(viewtrap.com) 영상검색과 같은 기능 제공
   • 가차없이 피드백과 기능요청 주실 알파 유저를 찾습니다

   💡 주요 기능
   • 채널 평균 조회수를 웃도는 영상을 쉽게 찾을 수 있음.(바이럴 지수)
   • Viewtrap대비 수십배의 사용량 (일 2회 << 일 약 90회)
   • 3일 무료 체험

   💰 가격 정보
   • 정상가: $15/월
   • 할인가: $7.5/월 (코드: 'GEEK50')
   • 3일간 무료 트라이얼 후 결제 시작

   📋 알파 테스터 조건
   • 알파 사용자 카톡방 참여 요망
   • 요청 기능 우선 개발 보장

   🔨 개발 예정 기능
   • 우수 썸네일 검색
   • 채널별 영상 분석
   • 경쟁채널 추적

   https://datatube.tv

   알파 사용자 카톡방은 어떻게 들어가죠?

   안녕하세요. 구독때 등록하신 정보로 메일을 보내드립니다.
"
"https://news.hada.io/topic?id=17625","영화 속 타이틀 드롭 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             영화 속 타이틀 드롭 현상

영화 제목 언급 분석

     * 제목 언급이란?
          + 영화에서 등장인물이 영화 제목을 말하는 현상을 '제목 언급'이라고 함.
          + 영화 역사에서 자주 등장하는 현상이며, 메타적인 요소로 인식됨.
     * 데이터 분석
          + 1940년부터 2023년까지 73,921개의 영화 데이터를 분석함.
          + OpenSubtitles.com과 IMDb의 데이터를 사용하여 분석을 진행함.
     * 제목 언급 빈도
          + 전체 영화의 약 36.5%에서 제목 언급이 최소 한 번 발생함.
          + 제목 언급이 있는 영화는 평균적으로 10.3회의 제목 언급이 발생함.
     * 제목 언급이 많은 영화
          + 픽션 영화: ""Barbie""가 267회의 제목 언급으로 가장 많음.
          + 다큐멘터리: ""Mickey: The Story of a Mouse""가 309회의 제목 언급으로 가장 많음.
     * 이름이 제목인 영화
          + 주인공 이름이 제목인 영화는 평균 24.7회의 제목 언급이 발생함.
          + 이러한 영화는 제목 언급 확률이 88.5%로 높음.
     * 단일 제목 언급
          + 영화의 11.3%는 단 한 번의 제목 언급이 발생함.
          + 이러한 경우, 제목 언급은 주로 중요한 장면에서 의도적으로 사용됨.
     * 제목 언급의 시대적 변화
          + 1960년대와 1970년대에는 제목 언급이 드물었으나, 최근에는 증가하는 추세임.
     * 장르와 제목 언급
          + 전기, 스포츠, 역사와 같은 논픽션 장르는 제목 언급이 빈번함.
          + 범죄, 로맨스, 전쟁과 같은 픽션 장르는 제목 언급이 드물음.
     * 영화 제목의 의미
          + 영화 제목은 제품 설명, 마케팅 도구, 예술 작품의 제목으로서 다양한 역할을 함.
          + 제목의 길이와 제목 언급 횟수 사이에는 약한 음의 상관관계가 있음.
     * 흥미로운 예시
          + 긴 제목을 가진 영화도 제목 언급이 발생할 수 있음. 예를 들어, ""The Englishman Who Went Up a Hill But Came Down a Mountain""은 전체 제목이 언급됨.
     * 결론
          + 제목 언급은 영화의 메타적 요소로서 다양한 방식으로 활용되며, 시대와 장르에 따라 그 빈도가 다르게 나타남.

        Hacker News 의견

     * ""Neon Genesis Evangelion""의 제목은 일본어 원제와 직접적으로 번역되지 않았음. 원제는 ""신세기 에반게리온""으로, ""새로운 시대/세기의 에반게리온""을 의미함. 이 스타일은 원작자들이 승인했지만, 해석의 차이가 의도적인지 항상 미스터리였음. 20년 후, 리부트 영화 시리즈 ""Rebuild of Evangelion""의 마지막 장면에서 주인공이 ""neon genesis""를 언급함
     * 제목의 의도성이 중요함. 제목이 캐릭터 이름인 영화는 제목 드롭으로 간주되지 않음. 예를 들어, ""Barbie"" 같은 영화는 제목 드롭이 많음
     * 제목 드롭이 영화의 내용이나 대사에서 나온 것인지 확신하기 어려움. 예를 들어, Leonard Cohen이 ""hallelujah""를 부르는 노래에서 제목 드롭이 아님
     * 영화에서 제목 드롭이 마지막 줄인 경우도 있음. 예를 들어, ""My Dinner with Andre""의 마지막 줄은 ""my dinner with Andre""임. 이 선택은 연극적인 느낌을 줌
     * ""The Lord of the Rings: The Fellowship of the Ring""에서는 ""Lord of the Rings""나 ""Fellowship of the Ring""이 제목 드롭으로 간주될 수 있음. ""Lord of the Ring""이라는 부분적인 제목 드롭도 있음
     * 때로는 제목이 대본에 있지만 실제로 대사로 말해지지 않음. 예를 들어, ""Aliens""에서는 외계인의 소리만 있음
     * 주인공 이름을 딴 영화는 제목 드롭 비율이 88.5%인 반면, 다른 영화는 34.2%만 제목을 드롭함. 주인공 이름을 언급하지 않는 영화가 11.5%나 됨. 이는 주인공이 왕과 같은 위치 때문에 이름으로 불리지 않거나 대사가 적은 영화일 수 있음
     * Kermode와 Mayo 라디오 쇼에서 가족이 영화 제목이 처음 언급되면 박수치고 나가는 이야기가 있었음. 이는 농담으로 추정되며, 실제로 이런 행동을 한 사람에 대한 참고 자료는 없음
     * ""Inception""이라는 영화에서 제목이 19:24에 언급되지만, 탐색기에서는 제목이 드롭되지 않았다고 나옴. 기억을 의심하여 직접 확인해야 했음
"
"https://news.hada.io/topic?id=17647","Ghidra와 Python을 활용한 Ecco the Dolphin 역공학 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ghidra와 Python을 활용한 Ecco the Dolphin 역공학 분석

    현미경 아래: Ecco the Dolphin — 미래의 수호자

     * Ecco the Dolphin: Defender of the Future는 저장 파일 이름에 따라 활성화되는 숨겨진 치트 기능이 있음
     * Ghidra와 Python을 사용하여 인코딩 방식을 역설계하여 특별한 이름을 발견함
     * 일부 이름은 오래전부터 알려져 있었으나, 나머지를 발견하여 ""불사""와 디버그 표시 같은 기능을 잠금 해제함

    인트로

     * Ecco the Dolphin: Defender of the Future는 공식적으로 출시된 마지막 Ecco 게임이며, 이후 게임은 취소됨
     * 알려진 치트는 VMU 화면에서 New Game을 선택하고, 이니셜을 GYU로 입력한 후, GYU를 다시 입력하고 세 글자를 추가하여 모든 스테이지를 잠금 해제할 수 있음

    Ghidra를 통한 분석

     * flycast 에뮬레이터의 메모리 스냅샷을 분석하여 이니셜 입력 버퍼를 발견함
     * Ghidra를 사용하여 변환 함수가 버퍼를 읽고 변환된 값이 여섯 가지 특별한 값 중 하나인지 확인함
     * GYU GYU XXX는 9388D627로 변환되어 첫 번째 특별한 값이 됨

    Python을 사용한 무차별 대입

     * GYU GYU는 여섯 글자이며, 가능한 조합은 26^6=308,915,776개임
     * 7글자 조합은 8억 개, 8글자 조합은 2080억 개로, 노트북에서 처리하기 어려움
     * Python으로 처리 코드를 복제하여 모든 가능한 조합을 체크함

    효과

     * SOCCER+XXX를 입력하면 Bonus Game이 잠금 해제되어 수중 축구를 할 수 있음
     * EXBBERX+XXX는 옵션 화면에 Immortality Enabled를 표시하며, 익사하거나 죽지 않음
     * QQRIQ+XXX는 게임의 프레임 속도와 디버그 값을 표시함
     * XYZZYX+XXX는 현재 시계를 표시함
     * POPELY+XXX는 특별한 효과가 없는 것으로 보임

    아웃트로

     * Appaloosa Interactive 게임의 인코딩 방식에 대한 다른 분석은 Three Dirty Dwarves에 관한 기사에서 확인 가능
     * 이전에 알려지지 않은 치트 코드를 찾는 다른 기사들은 아카이브에서 확인 가능

        Hacker News 의견

     * CRC32 해시 알고리즘에 대한 설명과 관련 링크 제공. CRC32의 다항식을 알면 로그 시간 내에 답을 구할 수 있음.
     * Megadrive의 Ecco 게임에 대한 개인 경험 공유. 게임이 매우 어려워서 암호 시스템을 해독하여 최종 레벨에 도달했음. 게임을 이틀 만에 완료한 것에 대한 죄책감 언급.
     * ""QQRIQ""는 여러 언어에서 수탉 소리를 나타내는 단어의 음성 약어임. 암호 선택 과정에 대한 궁금증 제기.
     * Ecco의 개발자인 Ed Annunziata가 LSD를 사용하지 않았지만 John C. Lilly의 작품을 많이 읽었다고 언급함. Lilly는 동물 지능, 케타민 심리치료, 고립 탱크, 의식 탐구 분야에서 선구적인 작업을 한 인물임. 그의 자서전 <i>The Center of the Cyclone</i> 추천.
     * Dreamcast 게임 리버스 엔지니어링에 대한 자료 요청. Skies of Arcadia와 관련된 체계적인 기술을 찾고 있음.
     * 리버스 엔지니어링 학습 시작점에 대한 고민. 대부분 Assembly를 먼저 배우라고 하지만, 그 이후의 구체적인 정보는 부족함. x86/arm/아케이드 플랫폼의 공통 패턴을 시도와 오류로 알아내는지에 대한 의문 제기.
     * 오래된 게임들이 더 많은 영혼을 가지고 있다고 느끼며, 최근 몇 년간 더 많이 즐기고 있음. 자동차 관련 경고에 감사함.
     * Sega Saturn에 관한 블로그 발견. 부모님 집에서 Saturn을 발견했으며, 게임 CD도 함께 있었음. 게임은 작동했지만 어떻게 활용할지 모름.
     * 수중 축구 치트의 작동 영상을 보고 싶다는 의견.
     * PS2 버전의 게임을 살펴보기를 권장. 레벨 잠금 해제 코드가 동일할 수 있으며, 리버스 엔지니어링이 더 쉬울 수 있음.
"
"https://news.hada.io/topic?id=17665","Browser-Use - LLM을 이용한 웹 오토메이션 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Browser-Use - LLM을 이용한 웹 오토메이션 오픈소스

     * LLM들이 간단한 인터페이스를 통해 웹사이트와 인터랙션하게 도와주는 라이브러리
     * 유니버설 LLM 지원 - LangChain이 지원하는 모든 언어 모델과 작동함
     * 대화형 요소 탐지 - 자동으로 페이지에서 인터랙티브 요소를 찾아냄
     * 스크래핑을 위한 XPath 추출 - 더 이상 수작업으로 DevTools 검사할 필요 없음
     * 비전 모델 지원 - 시각적 페이지 정보 처리함
     * 사용자 정의 가능한 액션 - 자신만의 브라우저 상호작용 추가 가능함(예: LLM이 사용할 수 있는 데이터베이스에 데이터 추가)
     * 동적 컨텐츠 처리 - 쿠키나 컨텐츠 변경에 대해 걱정 없음
     * 메모리를 사용한 연쇄적 사고 - Long-Term Task 해결 가능
     * 자기 수정 - LLM이 실수하면, 에이전트는 스스로 행동을 수정함
     * 사용법 예시
          + ""Go to hackernews on show hn and give me top 10 post titles, their points and hours. Calculate for each the ratio of points per hour""
          + ""Search the top 3 AI companies 2024 and find what out what concrete hardware each is using for their model.""
          + ""Go to kayak.com and find a one-way flight from Zürich to San Francisco on 12 January 2025""
"
"https://news.hada.io/topic?id=17669","Delta: Git, diff, grep, blame 출력용 구문 강조 페이지 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Delta: Git, diff, grep, blame 출력용 구문 강조 페이지 뷰어

  시작하기

     * 패키지 이름은 ""git-delta""이며, 실행 파일은 delta임.
     * ~/.gitconfig에 다음을 추가하여 설정할 수 있음:
[core]
pager = delta
[interactive]
diffFilter = delta --color-only
[delta]
navigate = true  # diff 섹션 간 이동을 위해 n과 N 사용
[merge]
conflictstyle = zdiff3

     * Delta는 다양한 기능을 제공하며 사용자 정의가 가능함. 사용자 매뉴얼을 참조할 수 있음.

  기능

     * 언어 구문 강조: bat과 동일한 구문 강조 테마 사용 가능.
     * 단어 수준 차이 강조: Levenshtein 편집 추론 알고리듬 사용.
     * 나란히 보기: 줄 바꿈 기능 포함.
     * 줄 번호 표시.
     * 파일 간 이동: 큰 diff에서 n과 N 키로 파일 간 이동 가능.
     * 향상된 병합 충돌 표시.
     * 향상된 git blame 표시: 구문 강조 및 커밋을 호스팅 제공자 링크로 포맷 가능.
     * grep 출력 구문 강조: rg, git grep, grep 등 지원.
     * Git의 --color-moved 기능 지원.
     * 코드 복사 가능: 기본적으로 -/+ 마커 제거.
     * diff-highlight 및 diff-so-fancy 에뮬레이션 모드.
     * 커밋 해시를 터미널 하이퍼링크로 포맷 가능.
     * 스타일 가능한 박스/라인 장식: 커밋, 파일, 청크 헤더 섹션 강조.
     * 스타일 문자열 지원: 20개 이상의 스타일 요소에 대해 전경색, 배경색, 글꼴 속성 사용 가능.
     * 전통적인 통합 diff 출력 및 git 출력 처리.
     * 밝은/어두운 터미널 배경 자동 감지.

  Git, diff, grep 출력을 위한 구문 강조 페이지

     * Delta는 코드의 변화를 효율적이고 즐겁게 분석할 수 있도록 도와줌.
     * 레이아웃과 스타일을 광범위하게 변경할 수 있으며, 기본 git/diff 출력과 가깝게 유지 가능.

    구문 강조 테마

     * bat과 동일한 구문 강조 색상 테마 사용 가능:
          + delta --show-syntax-themes --dark
          + delta --show-syntax-themes --light

    나란히 보기

     * 기본적으로 나란히 보기에는 줄 번호가 활성화되어 있으며, 왼쪽과 오른쪽 패널 모두 구문 강조가 적용됨.

    줄 번호

     * delta 설정에서 줄 번호를 활성화할 수 있음.

    병합 충돌

     * 사용자 매뉴얼을 참조하여 병합 충돌을 처리할 수 있음.

    Git blame

     * 사용자 매뉴얼을 참조하여 git blame을 향상시킬 수 있음.

    Ripgrep, git grep

     * 사용자 매뉴얼을 참조하여 ripgrep 및 git grep 출력을 구문 강조할 수 있음.

    설치 및 사용

     * 사용자 매뉴얼과 delta --help를 참조할 수 있음.

    유지보수자

     * @dandavison
     * @th1000s

        Hacker News 의견

     * Delta는 설정 후 잊어버릴 수 있는 도구로, git grep/diff/blame 출력 대신 자주 사용됨. ripgrep과도 호환됨을 알게 됨
          + bat도 비슷하게 설정 후 잊어버릴 수 있는 도구로, cat을 bat으로 alias하여 사용 중임
     * 기본 git으로도 적당한 수준의 단어 단위 diff를 얻을 수 있음
          + git diff --color-words --word-diff-regex='\w+|.' 명령어 사용
     * Delta는 유용하지만 긴 줄을 잘라내는 문제가 있었음. 이 문제는 git config --global --replace-all delta.max-line-length 0 설정으로 해결됨
          + 기본 설정이 아닌 이유는 불분명함
     * Delta와 difftastic을 혼합하여 사용 중이며, 특히 difftastic은 tree-sitter AST 구문에 유용함
          + Delta는 깔끔하고 매우 빠름
     * Delta 사용을 막는 요인은 ""시스템"" 테마 감지 부족임. 테마가 쉘과 맞지 않으면 읽기 어려움
     * 일반 git diff 도구를 색상과 함께 사용했지만, Delta는 너무 복잡함
     * Delta와 difftastic을 모두 사용 중이며, 강력히 추천함
          + 터미널을 사용하는 사람이라면 꼭 사용해보길 권장함
     * bat을 좋아하며, Delta와도 연결됨
     * Delta를 사랑하며, 항상 사용하지는 않지만 보통 사용함. 누구에게나 시도해보길 추천함
     * 작성자가 magit 통합도 작성한 것으로 보임
          + 사용자 피드백(성능 등)에 대한 의견을 구함
"
"https://news.hada.io/topic?id=17681","gccrs: Rust를 위한 대체 컴파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        gccrs: Rust를 위한 대체 컴파일러

     * gccrs는 GCC 프로젝트의 일환으로 개발 중인 대체 Rust 컴파일러입니다.
     * 이 프로젝트는 GNU 컴파일러 컬렉션 내에서 Rust를 지원하는 것을 목표로 하며, rustc와 동일한 동작을 목표로 합니다.
     * 주요 목표는 특히 LLVM이 지원하지 않는 플랫폼에서 Rust를 컴파일할 수 있는 대안을 제공하는 것입니다.
     * gccrs는 GCC의 안전 기능과 플러그인 덕분에 안전하지 않은 Rust 코드를 분석하는 데 유용합니다.
     * 이 프로젝트는 별도의 Rust 유사 언어를 만들지 않고 Rust 사양 노력에 기여하는 것을 목표로 합니다.
     * gccrs는 rustc_codegen_gcc와 경쟁하려는 것이 아니라, 별도의 GCC 프론트엔드로서 다른 이점을 제공합니다.
     * 이 프로젝트는 Rust 생태계를 분열시키지 않고 Rust가 더 많은 플랫폼에 도달할 수 있도록 돕는 것을 강조합니다.
     * gccrs로 코드를 컴파일하려면 -frust-incomplete-and-experimental-compiler-do-not-use라는 명령줄 플래그가 필요하며, 이는 실험적 상태를 나타냅니다.
     * gccrs는 GitHub과 Zulip을 사용하여 소통하며, 이는 Rust 커뮤니티의 선호와 일치합니다.
     * 이 프로젝트는 polonius와 rustc_parse_format과 같은 Rust 구성 요소를 재사용하여 정확성을 보장하고, 더 많은 재사용을 계획하고 있습니다.
     * gccrs는 Rust 커뮤니티와의 관계를 개선하고 생태계 파손을 줄이기 위한 의견을 환영합니다.

   오.... 생태계는 좋은 소식이지만.. GCC는... GNU 라이선스가 문제라 괜찮을지 모르겠네요..;;
   중간에 바겼을려나..;;;

   gccrs는 GPL이고 GCC로 빌드한 결과물은 GPL과 상관없습미다. gccrs를 숨기려면 모를까 이슈가 없겠죠.
"
"https://news.hada.io/topic?id=17688","Integuru - 내부 API를 리버스 엔지니어링 해서 외부용 통합 코드를 생성하는 AI에이전트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Integuru - 내부 API를 리버스 엔지니어링 해서 외부용 통합 코드를 생성하는 AI에이전트

     * 공식 API가 없는 플랫폼에서 내부 API를 역설계하여 Integration 코드를 생성하는 오픈 소스 AI 에이전트
     * 맞춤형 요청을 받아 생성, 호스팅, 인증을 관리
     * Integuru의 동작 방식
          + 수십 개의 플랫폼을 역설계하면서 LLM이 해독할 수 있는 많은 내부 API 설계 패턴을 발견하여 통합 생성을 자동화하는 에이전트를 구축
          + 플랫폼의 내부 API 설계를 분석하고 몇 분 안에 통합을 구축할 수 있음
          + 에이전트는 사람이 역설계할 때 하는 일을 모방함
          + 네트워크 요청 파일과 쿠키 파일을 생성한 다음, 이 두 파일을 원하는 작업에 대한 프롬프트와 쌍을 이룸
          + Integuru는 최종 요청을 식별하고, 다른 요청에 의존하는 요청 부분을 식별한 후, 종속성 그래프에 추가
          + 가장 최근에 발견된 요청이 다른 요청에 의존하지 않을 때까지 이 프로세스를 반복
          + 종속성이 없는 요청부터 시작하여 그래프를 위로 탐색하면서 각 요청을 실행 가능한 함수로 변환
     * Integuru의 사용 사례 및 한계
          + 문서 다운로드, 송금, 가상 카드 생성 등 놀라울 정도로 많은 사용 사례를 지원함
          + 사람들은 이미 에이전트를 사용하여 Robinhood, 운송 관리 시스템(TMS) 등의 플랫폼에 대한 저지연 API를 구축하고 있음
     * Integuru의 오픈 소스 및 비즈니스 모델
          + 에이전트와 모든 통합은 AGPL-3.0에 따라 오픈 소스임
          + 에이전트가 어려워하거나 편의를 위해 맞춤형 통합을 구축하고, 호스팅을 처리하고, 인증된 브라우저 세션의 인증 쿠키를 사용하여 인증을 관리하는 서비스에 대해 요금을 청구
          + API 호출당 요금을 청구하며 새 플랫폼에 대한 구현 비용을 받음
"
"https://news.hada.io/topic?id=17708","애플, 직원들의 급여 및 원격 근무 논의 위협 혐의로 연방 당국 기소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 애플, 직원들의 급여 및 원격 근무 논의 위협 혐의로 연방 당국 기소

     * Apple에서 부당하게 퇴출되었다고 주장하는 소프트웨어 엔지니어 셰어 스칼렛의 사례가 주목받고 있음.
     * Apple이 직원들에게 임금 및 임금 평등에 대해 이야기하지 말라고 위협했다는 고소가 연방에 제기됨.
     * 한 관리자가 직원에게 Apple이 임금에 대해 이야기하는 것을 원하지 않는다고 말한 것으로 알려짐.
"
"https://news.hada.io/topic?id=17713","구글 내부에서 운용된 예측 시장의 삶과 죽음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글 내부에서 운용된 예측 시장의 삶과 죽음

     * 지난 20년간 구글은 두 개의 서로 다른 내부 예측 플랫폼(Prediction Platform)을 운영해 왔음
     * 첫 번째 플랫폼은 실패했지만 두 번째 플랫폼은 지속될 수 있을까?

구글의 전성기 시절

     * 2005년 7월 구글은 실리콘밸리의 총아였음. 구글맵을 공개했고 지메일은 아직 베타 버전이었음
     * 이 당시 구글은 실리콘밸리의 관행에서 벗어난 비전형적인 회사였음
     * 구글의 창업자들은 ""구글은 전형적인 회사가 아니다""라고 말했음

Prophit - 구글 최초의 내부 예측 시장

     * 2005년 구글은 내부 예측 시장인 Prophit을 출시함
     * 구글 직원의 20%가 참여했고 3년 동안 운영됨
     * Prophit은 정확한 예측을 제공했고 언론에서도 주목받음

Prophit의 실패와 교훈

     * Prophit은 결국 2011년 폐쇄되었음
     * 주요 장애물은 온라인 도박이 불법이라는 점이었음
     * 또한 외부 출시를 시도했으나 법적 문제로 인해 실패함. 필요한 자원 확보가 어려웠음
     * 이에 대한 후회로 ""내부용으로만 운영했어야 했다""는 평가가 있었음

Gleangen - 구글의 두 번째 예측 시장

     * 2020년 4월 구글 직원 댄 슈워츠가 Gleangen을 출시함
     * 구글 직원의 8%(약 15000명)가 참여했고 월 1,000명 이상의 활성 사용자를 유지함
     * Prophit의 교훈을 바탕으로 내부 의사결정 도구로 설계되었음

예측 시장의 중요성과 도전

     * 예측 시장의 이점
          + 예측 시장은 집단 지성을 활용하여 정확한 예측을 제공할 수 있음
          + 기업은 이를 통해 경쟁사의 움직임을 예측하거나 내부 의사결정을 개선할 수 있음
     * 실패의 원인
          + 법적 규제와 내부 데이터 공유의 어려움이 주요 장애물로 작용함
          + Prophit의 경우, 외부 출시를 위한 법적 허가를 얻지 못해 실패함
     * 예측 시장 운영의 도전과제
          + 데이터 공유에 대한 꺼림, 프로젝트 실패에 대한 변명 여지 확보 욕구 등이 장애물임
          + 정보 통제에 대한 경영진의 욕구와 군중의 지혜 활용이 상충될 수 있음
          + 예측의 정확성보다 예측 프로세스의 투명성과 책임성이 우선시되기도 함

Waymo와 예측 시장의 활용

     * Waymo에서의 적용
          + Waymo의 시스템 엔지니어링 팀은 예측 시장을 통해 안전성 측정 지표를 개선하려고 시도함
          + 그러나 데이터 접근의 제한과 관리의 지원 부족으로 인해 성공하지 못함

Gleangen의 발전과 AI의 역할

     * Gleangen의 성공과 한계
          + Gleangen은 구글의 다양한 부서에서 예측을 통해 의사결정을 지원함
          + 그러나 내부 데이터의 제한과 경영진의 관심 부족으로 인해 완전한 성공을 거두지 못함
     * AI와 예측 시장의 미래
          + AI는 예측 시장의 비용을 줄이고 정확성을 높이는 데 기여할 수 있음
          + AI와 인간의 집단 지성을 결합하여 더 나은 예측을 제공할 수 있음
     * AI 예측과 인간 예측의 비교
          + 최근 연구에 따르면 AI 예측은 우연의 예측보다는 훨씬 나으나 인간 집단만큼 정확하지는 않음
          + 그러나 AI를 훈련시키는데 인간 예측이 활용되면서 기업 예측 시장의 가치가 높아지고 있음

기업 예측 시장의 미래

     * 경영진에게 더 가치있는 정보를 제공하고 AI로 예측 비용을 낮추는 것이 관건임
     * Anthropic 등 일부 기업이 내부 예측 시장을 도입하는 등 기업 예측 시장에 대한 관심이 높아지고 있음
     * 성공적인 예측 시장은 정보의 가치를 높이고, 기업의 전략적 의사결정에 기여할 수 있음
     * AI의 발전과 함께 예측 시장의 효율성은 더욱 향상될 가능성이 있음

        Hacker News 의견

     * Google는 사내 카페, A/B 테스트, ""dogfooding"" 등 여러 기술 관행을 개척했음. 그러나 Microsoft 등은 이미 수십 년 전에 dogfooding을 시작했음
          + 회사 카페는 Google이 개념을 도입하기 훨씬 전에 존재했음
     * 예측 시장에 대한 문제를 다루길 바랐으나, 기사는 건조한 역사만 다루고 있음
          + 순수한 예측 시장은 현실적으로 존재할 수 없으며, 예측 시장은 사건과 완전히 분리될 수 없음
          + 예측에 대한 이해관계가 결과에 영향을 미치게 되면 시장은 무용지물이 됨
     * Google의 성공은 문화뿐만 아니라 시장의 빠른 성장에도 기인함
     * 시장 가격은 0과 1 사이의 숫자를 제공하며, 사건이 더 가능성이 높아질수록 가격이 상승함
          + 그러나 이를 확률로 해석하는 것은 복잡하며, 현실적인 거래자들은 자본이 제한적이고 위험 회피 성향이 있음
     * 예측 시장이 어떻게 이러한 문제를 해결했는지 궁금함
          + 시장 가격을 최종 확률로 변환하기 위한 후처리가 있었는지, 거래자들이 시장 가격을 확률로 해석할 수 있도록 행동했는지 궁금함
     * 예측 시장은 집단 판단뿐만 아니라 초예측을 활용할 때 돌파구를 마련할 것임
          + 현재 예측 시장은 단순한 의견 조사와 같으며, 시장을 지속적으로 이기는 참가자를 식별하는 것이 필요함
          + 장기적인 베팅 추적과 개별 포지션의 시장 비공개가 필요함
     * Google은 내부적으로 여러 도박 플랫폼을 운영했으며, HR과 컴플라이언스 부서는 이를 허용했음
     * Polymarket은 가장 성공적인 예측 시장으로 평가됨
"
"https://news.hada.io/topic?id=17704","TinyStatus - 파이썬 스크립트로 생성되는 작은 웹서비스 상태 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               TinyStatus - 파이썬 스크립트로 생성되는 작은 웹서비스 상태 페이지

     * 다양한 서비스의 상태를 모니터링하는 간단하고 사용자 정의 가능한 상태 페이지 생성기
     * HTTP 엔드포인트 모니터링, 호스트 핑, 열린 포트 확인
     * 반응형 디자인으로 구성된 상태 페이지와 히스토리 페이지
     * YAML 설정 통한 맞춤형 서비스 확인 가능
     * 사고 히스토리 추적
     * 설정 가능한 인터벌에 따른 자동 상태 업데이트
     * 생성된 HTML은 단 5KB
"
"https://news.hada.io/topic?id=17635","jaqt - JavaScript Queries and Transformations ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             jaqt - JavaScript Queries and Transformations

     * GraphQL 과 SQL에서 영감을 받은, Array와 Object를 위한 쿼리 엔진
     * GraphQL 스타일의 Array.select() 와 Array.where() 기능을 Javascript에 도입하하여 사용하게 해주는 라이브러리

from(data)
.where({
        friends: 'John'
})
.select({
        name: o => o.name+' '+o.lastName
})

   위 코드를 보니 Drizzle ORM이 생각나는군요

   최근에 Drizzle orm에 대해 알게되었는데 기존 js 생태계 orm들인 knex나 typeorm같은 쿼리 빌더를 지향하는 orm인가요?

   Drizzle는 기존 ORM들과는 좀 다른 접근방식을 가지고 있어요. TypeScript에 최적화된 '얇은 SQL 레이어'라고 보시면 될 것 같네요.

   Knex와 비교하자면, 문법이나 스키마 정의 방식이 비슷해 보이지만 TypeScript 지원 측면에서 큰 차이가 있어요. Drizzle은 타입 안정성에 더 큰 중점을 두고 있죠. Knex는 스키마와 타입 정의를 따로 해야 하는 반면, Drizzle은 한 번의 정의로 스키마와 타입이 모두 생성돼서 더 편리하고 오류도 덜 발생해요.

   TypeORM과 비교하면, TypeORM은 더 무겁고 전통적인 ORM에 가까워요. Drizzle은 더 가볍고 성능이 좋아서 특히 서버리스 환경에서 장점이 있습니다. 실제 벤치마크를 보면 Drizzle이 TypeORM이나 Prisma보다 몇 배는 더 빠르다고 해요.

   추가로 재미있는 점은 Drizzle이 마이그레이션 관리도 잘 지원한다는 거예요. CLI 도구인 Drizzle Kit으로 마이그레이션 파일을 자동으로 생성할 수 있고, 개발 단계에서는 push 명령어로 간단하게 스키마 변경을 적용할 수 있어요.

   결론적으로 Drizzle은 타입스크립트 친화적이면서도 가볍고 성능 좋은 현대적인 쿼리 빌더라고 볼 수 있겠네요. 특히 타입 안정성과 성능을 중요하게 생각하시는 분들께 추천드려요!

   퍼플렉시티에 물어본 결과입니다
"
"https://news.hada.io/topic?id=17629","여권 사진 촬영 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              여권 사진 촬영 서비스

     * 여권 사진 시리즈
          + 여권 사진은 가장 평범하고 흥미롭지 않은 사진 유형 중 하나로, 엄격한 규제와 제한이 있음.
          + 공식 여권 사진 요구 사항에는 정면을 바라보고, 그림자 없는 배경, 안경에 반사 없음, 그리고 가장 중요한 미소 금지가 포함됨.
          + 이러한 규칙은 자기 표현을 거의 불가능하게 만듦.
          + 이 시리즈는 공식 규칙에 도전하며, 공식 문서 사진을 찍을 때 할 수 있는 다양한 행동을 실험함.

        Hacker News 의견

     * Max의 작업은 실용적이며 창의성이 넘쳐 추천할 만함
     * 국제 운전 면허증(IDP) 발급 시 사진 요구 사항이 비합리적임을 경험함
          + 긴 머리와 수염이 있는 사진이 거부됨
          + 여권 사진과 동일한 사진임에도 불구하고 외모 변화가 문제로 지적됨
          + 미국 자동차 협회(AAA) 직원이 사진을 업셀링하려는 의도가 있었는지 의문임
     * 영국 여권 사진 제출 과정에서 여러 번 거부당한 경험을 공유함
          + 호주에서 디지털 사진 시스템을 사용해 성공적으로 제출함
     * SNL 스케치와 유사한 프로젝트를 언급하며 재미있다고 표현함
     * 여권 사진에서 미소를 지을 수 있으며, 눈을 뜨고 입을 다물어야 함
     * 웹사이트 디자인이 이상하다고 언급함
     * 물고기 커서가 재미있다고 표현함
     * ID 사진을 위한 턱시도 착용을 추천한 Glenn O'Brien의 말을 인용함
     * 사진 ID 크기 조정 프로그램을 작성했음을 공유함
          + 얼굴 변형을 피하기 위해 얼굴 인식 알고리즘을 사용함
     * 페이지 아래로 스크롤하여 와인 잔을 든 소녀와 벽에 붙은 남자를 언급함
"
"https://news.hada.io/topic?id=17689","Jaws – JavaScript를 WASM으로 사전 컴파일하는 컴파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Jaws – JavaScript를 WASM으로 사전 컴파일하는 컴파일러

     * JavaScript를 WebAssembly로 컴파일하는 도구로, 독립 실행형 WASM 바이너리를 생성하는 점에서 porffor와 유사함. Rust로 작성됨
     * 실험적인 도구로, 아직 프로덕션에 사용하기에는 준비가 되지 않았으며, 많은 언어 기능과 내장 타입이 부족하거나 불완전함
     * 목표는 언어의 100% 지원을 달성하는 것임.

   ##왜 Jawsm인가?
     * Jawsm 프로젝트는 WebAssembly 시나리오를 실행하는 스트레스 테스트 도구인 Crowst 작업 중에 시작됨.
     * Rust에서 WASM으로 컴파일된 코드만 지원하나, Rust는 널리 사용되는 언어가 아님.
     * 스크립팅 언어를 WASM 위에서 실행하는 것은 현재 이상적이지 않음. 인터프리터를 포함해야 하거나, 타겟 언어의 변형을 사용해야 함.
     * 현대 WASM 제안을 통해 컴파일된 인터프리터 없이 JavaScript 기능의 100% 구현이 가능하다고 믿음.

작동하는 것

     * 언어의 100% 구현을 목표로 하며, 의미론 구현에 집중하고 있음.
     * 구현이 어려운 4가지 항목: 스코프/클로저, try/catch, async/await, 제너레이터.
     * 현재 Jawsm은 클로저를 사용한 코드 컴파일, try/catch, 제한된 Promise API 및 async를 구현함.
     * 작동하는 기능: 변수 선언 및 할당, while, 문자열 리터럴, 숫자 및 기본 연산자, 불리언 및 기본 불리언 연산자, 배열 리터럴, 객체 리터럴, new 키워드.

호스트 요구 사항

     * Jawsm은 최근 WASM 제안으로 구축되어, 생성된 바이너리는 런타임 간에 이식성이 떨어짐.
     * WASIp2를 염두에 두고 구현 중이며, V8을 사용하여 WASIp2 기능을 위한 JavaScript 폴리필을 사용함.
     * Jawsm이 생성한 바이너리를 실행할 수 있는 스크립트 run.js가 있음.

    사용 방법

     * 기여하지 않는 한 사용하지 않는 것이 좋음.
     * 저장소를 클론한 후 execute.sh 스크립트를 사용하여 WAT 파일을 생성하고 바이너리로 컴파일한 후 Node.js로 실행 가능.
     * Rust의 cargo, 최신 버전의 wasm-tools, Node.js v23.0.0 이상이 필요함.

다음 단계

     * 구현이 어려운 기능을 먼저 완료할 계획이며, 다음은 제너레이터와 await 키워드 지원임.
     * 스택 전환 제안을 사용하고 싶지만, 현재는 CPS 변환을 사용하여 지속성을 시뮬레이션 중임.
     * 이후 문법 및 내장 타입과 API를 구현할 예정임.

작동 원리

     * 프로젝트는 JavaScript 구문을 WASM 명령어로 변환하며, WASM GC, 예외 처리 및 꼬리 호출 최적화 제안을 활용함.
     * JavaScript의 스코프와 클로저를 WASM에서 시뮬레이션하기 위해 추가 WASM 코드를 작성함.

        Hacker News 의견

     * 새로운 WASM GC 제안의 영리한 사용법임. 기존의 JS -> WASM 컴파일러들은 전체 JS 엔진을 포함했지만, 이 프로젝트는 JS 구조를 WASM 기본 요소로 직접 매핑하려고 시도함.
          + 과거에 거의 Typescript에 가까운 ARM 임베디드 컴파일러를 만들었음. 몇 가지 기술이 유용할 수 있음.
     * Rust를 작성하는 것을 좋아하지만, 널리 사용되는 언어는 아님. Rust는 요즘 매우 주목받고 있으며, 여러 곳에서 사용되는 것처럼 보임.
     * JavaScript 사양의 100%를 커버할 수 있을 것이라고 확신함. 아이디어, 질문 또는 비판을 환영함.
          + test262_runner.rb의 결과가 있는지 궁금함. README에 이 진행 상황을 보여주면 좋겠음. 훌륭한 프로젝트임.
     * 프로젝트의 README.md를 읽었지만, 예상되는 사용법이 무엇인지 확신할 수 없음. 생성된 WASM 코드가 런타임과 어떻게 상호작용하는지 궁금함. 브라우저 및 기타 WASM 런타임과 호환되는 도구로 의도된 것인지, 아니면 프로젝트에 연결된 런타임과만 호환되는 것인지 궁금함.
          + JavaScript 코드 내의 웹 API나 특정 환경에서만 정의된 글로벌 식별자를 만나면 어떻게 반응하는지 궁금함. 해당 환경을 위한 것이 아니라면, 이를 사용할 때 I/O를 어떻게 해야 하는지 궁금함.
     * ""브라우저 런타임 없이 JS 실행""이 다가오고 있음. perforr, jaws 또는 다른 프로젝트가 결국 성공할 것임.
     * 문자열 인코딩 불일치 및 관련 유틸리티는 어떻게 처리되는지 궁금함. WASM은 UTF-8을 지원하고 JS는 (잠재적으로 잘못된) UTF-16을 지원함.
     * 이 접근 방식을 매우 좋아함. 직접적으로 바이너리를 생성하려고 하기보다는 WASM을 위해 직접 빌드하는 것이 WASM GC와 WASI 0.3의 일부로 예상되는 비동기 지원에 의존할 수 있음을 의미함.
     * 일부 사람들은 이를 컴파일러라고 부름. 훌륭한 작업임.
     * 이 코드가 JS에서 동일한 코드를 실행하는 것보다 더 빠르게 실행되는지, 아니면 다른 언어와의 상호 운용성을 위한 것인지 궁금함.
"
"https://news.hada.io/topic?id=17652","다수의 새로운 macOS 샌드박스 탈출 취약점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       다수의 새로운 macOS 샌드박스 탈출 취약점

macOS 샌드박스 탈출의 새로운 시대: 간과된 공격 표면과 10개 이상의 새로운 취약점 발견

     * macOS 시스템에서 대부분의 프로세스는 제한된 샌드박스 환경에서 실행됨. 공격자가 원격 코드 실행(RCE)을 얻더라도 그 능력은 제한적임. 다음 단계는 샌드박스를 우회하여 더 넓은 파일 접근 권한을 얻는 것임.
     * 샌드박스 탈출 취약점을 발견하기 위해 기존 문제를 검토한 결과, 중요한 간과된 공격 표면과 새로운 공격 기법을 발견함. 이를 통해 여러 새로운 샌드박스 탈출 취약점을 발견함: CVE-2023-27944, CVE-2023-32414, CVE-2023-32404, CVE-2023-41077, CVE-2023-42961, CVE-2024-27864, CVE-2023-42977 등.

macOS 샌드박스에 대하여

    앱 샌드박스

     * Mac AppStore의 요구에 따라 대부분의 애플리케이션은 앱 샌드박스 제한과 함께 실행됨. 샌드박스 애플리케이션은 특정 권한을 가져야 하며, 샌드박스에 들어가면 컨테이너화되어 파일 작업이 제한됨.
     * 샌드박스 애플리케이션이 생성한 파일은 기본적으로 격리되며, 샌드박스 앱은 이 속성을 제거할 수 없음.
     * 샌드박스 없는 애플리케이션은 모든 사용자 데이터와 시스템 리소스에 무제한 접근 가능함. 반면, 샌드박스 제한이 있는 애플리케이션은 제한된 접근만 가능함.
     * 포크된 자식 프로세스는 부모 프로세스의 샌드박스 제한을 상속하지만, LaunchService.framework를 통해 시작된 프로세스는 제한을 상속하지 않음.

    서비스 샌드박스

     * 대부분의 Apple 데몬 서비스는 서비스 샌드박스 컨텍스트에서 실행됨. 이들은 시스템 위치에 정의된 샌드박스 프로필에 의해 제한됨.
     * 서비스 샌드박스는 보통 컨테이너화되지 않으며, 파일은 기본적으로 격리되지 않음.

공격 표면

  기존의 일반적인 방법

    LaunchService.framework을 통한 공격

     * 시스템 LaunchService 프레임워크를 통해 비샌드박스 애플리케이션을 공격하는 방법이 있음. 예를 들어, CVE-2021-30864는 시스템 비샌드박스 애플리케이션 Terminal.app의 $HOME 환경 변수를 조작할 수 있음.
     * 새로운 비샌드박스 애플리케이션을 드롭하고 실행할 수 있지만, 새로 드롭된 애플리케이션은 격리되어 실행이 방지됨.

    사용 가능한 Mach 서비스 공격

     * 앱 샌드박스 프로필에 나열된 사용 가능한 Mach 서비스를 공격하는 방법이 있음. 시스템의 모든 Mach 서비스 정보는 /System/Library/xpc/launchd.plist 파일에 저장됨.

  새로운 간과된 방법

     * PID 도메인에 존재하는 XPC 서비스는 간과된 서비스임. 이들은 요청에 따라 애플리케이션에 의해 시작되고 요청 애플리케이션이 종료되면 종료됨.
     * PID 도메인의 XPC 서비스는 샌드박스 애플리케이션에서 호출할 수 있으며, 추가적인 권한 검사나 샌드박스 검사가 없음.

새로운 취약점 및 익스플로잇

  Beta-No-CVE-1

     * 이 취약점은 macOS Sonoma 베타 버전에만 영향을 미침.
     * 취약점은 XPC 서비스 /System/Library/PrivateFrameworks/StorageKit.framework/XPCServices/storagekitfsrunner.xpc에 존재함.
     * 이 서비스는 샌드박스 제한 없이 실행 가능하며, 임의의 시스템 명령을 실행할 수 있음.

  Beta-No-CVE-2

     * 이 취약점도 베타 전용 소프트웨어에만 영향을 미침.
     * 취약점은 XPC 서비스 /System/Library/PrivateFrameworks/AudioAnalyticsInternal.framework/XPCServices/AudioAnalyticsHelperService.xpc에 존재함.
     * 임의의 경로를 압축할 수 있으며, 생성된 zip 파일은 격리되지 않음.

  CVE-2023-27944

     * 취약점은 XPC 서비스 /System/Library/PrivateFrameworks/TrialServer.framework/XPCServices/TrialArchivingService.xpc에 존재함.
     * 이 서비스는 서비스 샌드박스에 들어가지만, 드롭된 파일은 격리되지 않음.

  CVE-2023-32414

     * 취약점은 XPC 서비스 /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/XPCServices/ArchiveService.xpc에 존재함.
     * 이 서비스는 서비스 샌드박스에 들어가지만, 드롭된 파일은 격리되지 않음.

  CVE-2023-32404

     * 취약점은 XPC 서비스 /System/Library/PrivateFrameworks/WorkflowKit.framework/XPCServices/ShortcutsFileAccessHelper.xpc에 존재함.
     * 이 서비스는 샌드박스 제한 없이 실행 가능하며, 전체 디스크 접근을 위한 특별한 TCC 권한을 가짐.

  CVE-2023-41077

     * 취약점은 XPC 서비스 /System/Library/Frameworks/ImageCaptureCore.framework/XPCServices/mscamerad-xpc.xpc에 존재함.
     * 이 서비스는 샌드박스 제한 없이 실행 가능하며, 사진 및 이동식 볼륨에 직접 접근할 수 있는 특별한 TCC 권한을 가짐.

        Hacker News 의견

     * XPC 서비스를 개별적으로 패치하는 것은 이상하며, 이는 샌드박스 자체의 설계 문제로 보임. 많은 XPC 서비스가 샌드박스 앱에서 접근 가능한 이유에 의문을 가짐
          + MacOS는 블랙리스트가 아닌 기능 기반의 Darwin 컨테이너를 가져야 함
          + SBPL(샌드박스 프로파일 언어)이 흥미로움. 관련 정보는 GitHub에서 확인 가능함
          + MacOS에 SBPL을 처리하는 Scheme 인터프리터가 있는지 궁금함
          + ""sandbox-exec""가 이를 처리하는 것으로 보임
     * 보안 프레임워크가 새로운 문제를 야기하며, 보안이 더 강화되었다고 느끼지 않음
          + 네덜란드 세법처럼 패치의 연속이며, 이미 의식을 가진 것처럼 보임
     * XPC 관련 결함이 계속 발견될 가능성이 높으며, Apple이 서비스 강화 접근 방식을 재설계하지 않는 한 지속적인 CVE가 발생할 것으로 예상됨
     * 샌드박스를 사랑하면서도 싫어함
          + 샌드박스는 훌륭한 2차 방어선이지만, 대기업은 샌드박스를 탈출하지 못할 때 RCE 수정을 거부하며 주 방어선으로 사용함
     * MacOS는 세밀한 권한을 위해 설계되지 않았으며, 기존 Mac OS와 NeXTSTEP 기술 위에 추가할 수 없음
          + 보안 연구자가 아닌 앱 개발자로서 여러 우회를 발견했지만, Apple의 보안 취약점 보고 시스템이 비효율적이라 포기함
          + MacOS는 보안 연극의 희생양이 되었으며, 사용자와 개발자에게 해를 끼치고 있음
     * iOS에서도 취약점이 존재하며, 약 20억 대의 활성 기기가 있음
     * PID 도메인의 XPC 서비스는 샌드박스 제한을 우회하는 영리한 방법이며, Apple의 패치는 임시방편처럼 보임
          + 샌드박스 상속 방식을 전면적으로 재설계할 필요가 있음
     * 샌드박스를 탈출하면 샌드박스가 없는 상태로 돌아가는 것인지, 더 높은 권한 상태로 가는 것인지 궁금함
"
"https://news.hada.io/topic?id=17734","버스 넘버 – 동료들이 작성하지 말라고 요청한 GitHub 플러그인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 버스 넘버 – 동료들이 작성하지 말라고 요청한 GitHub 플러그인

    버스 팩터란?

     * 버스 팩터는 프로젝트에서 몇 명의 팀원이 갑자기 사라져야 프로젝트가 지연되는지를 나타내는 지표임.
     * 2015년, 회사에서 유일하게 수익을 창출하는 코드베이스의 기여자가 해고되었을 때, 이를 계산하는 GitHub 플러그인을 작성하기로 결심함.

    플러그인 개발 과정

     * 트럭 팩터 연구 논문을 참고하여 플러그인을 개발하기 시작함.
     * 동료들은 이 플러그인이 관리자가 쉽게 해고할 사람을 계산하는 도구로 사용될 수 있다고 우려함.

    결과 재현 시도

     * 연구 논문에서 제공하는 GitHub 저장소를 사용하여 결과를 재현하려고 시도함.
     * 데이터는 JSON 형식으로 제공되며, 시각화는 CSV를 통해 가능함.
     * README의 지침이 제대로 작동하지 않아 문제를 해결하는 데 시간이 걸림.

    GNU Parallel 사용

     * GNU Parallel을 사용하여 여러 GitHub 저장소를 동시에 클론함.
     * 8개의 프로세스만 사용하도록 설정했지만, 모든 코어가 최대치로 사용됨.

    Ruby Gems와 NixOS

     * Linguist 플러그인을 설치하는 데 어려움을 겪음.
     * NixOS에서 Ruby Gems를 설치하는 방법을 찾고 있음.

    결과 재계산

     * 원본 저장소를 포크하고, Java 소스를 컴파일하여 결과를 재계산함.
     * Linux 커널 저장소의 예시 결과: 트럭 팩터 12, 커버리지 49.98%.

    문제점 및 추가 연구

     * 계산 과정에서 리뷰 프로세스를 고려하지 않음.
     * Linux 커널의 트럭 팩터가 10년 전과 크게 다른 이유를 조사할 필요가 있음.
     * 더 나은 계산 방법을 찾기 위해 논문의 인용문을 검토할 계획임.

    결론 - 버스 팩터의 중요성

     * 2015년 논문에서는 Linux 커널의 트럭 팩터를 90으로 평가했으나, 현재는 12로 계산됨.
     * 이는 개선이 아님을 의미함.
     * 추가적인 시각화와 세부 사항은 mclare의 블로그에서 확인 가능함.

        Hacker News 의견

     * CodeScene의 기능 중 하나는 코드 변경이 빈번한 영역에서 지식의 분포가 낮은 부분을 식별하여 위험이 높은 영역을 찾는 것임
          + 누군가 퇴사할 경우, 그 사람이 알고 있는 코드만 쉽게 확인할 수 있어 인수인계 계획이 용이함
          + 악의적으로 사용될 수 있다고 생각하지 않으며, 가시성을 제공하는 도구임
     * Amazon은 코드 시스템에 대한 보고서를 통해 팀의 활동과 위험 요소를 쉽게 파악할 수 있는 기능을 제공함
          + '버스 팩터'는 팀의 특정 구성원이 부재 시 팀이 얼마나 영향을 받을지를 나타내는 지표임
          + 개발자들이 특정 시스템에 대한 지식이 직업 안정성을 보장한다고 생각할 수 있지만, 이는 기술적 위험으로 볼 수 있음
     * GNU Parallel이 모든 코어를 사용하는 이유는 각 git clone이 여러 index-pack 스레드를 생성하기 때문임
          + pack.threads를 1로 설정하면 도움이 될 수 있음
     * '버스 팩터'는 팀의 자율성과 투명성을 나타내며, 이상적인 상태에서는 모든 팀원이 모든 것을 이해할 수 있어야 함
          + 0 버스 팩터는 팀원이 서로의 역할을 대체할 수 있음을 의미하며, 이는 소프트웨어의 단순성을 반영함
          + 이메일, 커밋, PR, 코드 라인 수 등으로 사람을 평가하는 것은 잘못된 방식임
     * 경력 상승에 따라 개발자는 코드 작성보다는 리뷰에 더 집중해야 한다는 오해가 있음
          + 훌륭한 개발자를 평범한 관리자로 바꾸고 싶지 않음
     * 시스템의 저자는 파일에 중요한 기여를 한 사용자로 정의되며, 저자가 전체 파일의 50% 미만을 커버할 경우 시스템은 심각한 지연을 겪을 수 있음
     * 스타트업의 해고 문제는 '누구를 해고할 것인가'가 아니라 '다음 버전을 빠르게 개발할 팀은 누구인가'에 대한 질문임
     * 일부 기업 소프트웨어에서는 이메일 송수신량을 측정하는 대시보드가 존재할 수 있음
          + 동료들이 반대하는 일을 취미로 진행하는 것은 좋지 않은 행동으로 보일 수 있음
     * CPAN은 오랫동안 버스 팩터를 추적해왔으며, 예를 들어 Moose의 버스 팩터는 5임
     * '복권 팩터'라는 용어를 사용하여, 누군가 복권에 당첨되어 떠나도 프로젝트가 계속될 수 있는지를 나타냄
"
"https://news.hada.io/topic?id=17728","TinyTroupe - LLM 기반 멀티에이전트 Persona 시뮬레이션 Python 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         TinyTroupe - LLM 기반 멀티에이전트 Persona 시뮬레이션 Python 라이브러리

     * TinyTroupe는 실험적인 Python 라이브러리로, 특정 성격, 관심사, 목표를 가진 사람들의 시뮬레이션을 가능하게 함
     * 인공 에이전트인 TinyPerson은 우리와 서로 듣고 대답하며 시뮬레이션된 TinyWorld 환경에서 살아감
     * GPT-4와 같은 Large Language Model(LLM)을 활용하여 현실적인 시뮬레이션 행동을 생성함

TinyTroupe의 특징과 목적

     * 사람의 행동 이해에 초점: TinyTroupe는 인간의 행동을 이해하고 분석하는 데 중점을 두며, 직접적인 AI 비서 역할보다는 시뮬레이션을 통한 분석에 적합한 메커니즘을 갖추고 있음
     * 고도로 맞춤화된 인물 설정: 다양한 인물의 성격과 행동을 시뮬레이션할 수 있어, 소비자 유형 분석이나 특수한 상호작용을 연구하는 데 유용함
     * 생산성과 비즈니스 시나리오에 초점: 게임형 LLM 시뮬레이션과 달리, TinyTroupe는 비즈니스 문제 해결 및 프로젝트 성공에 기여할 수 있는 분석과 인사이트 제공을 목표로 함

TinyTroupe의 활용 아이디어

     * 광고: 돈을 쓰기 전에 시뮬레이션된 청중과 함께 오프라인으로 디지털 광고(예: Bing Ads)를 평가할 수 있음
     * 소프트웨어 테스팅: 시스템(예: 검색 엔진, 챗봇, 코파일럿)에 테스트 입력을 제공하고 결과를 평가할 수 있음
     * 교육 및 탐색 데이터: 나중에 모델 훈련이나 기회 분석에 사용될 수 있는 현실적인 합성 데이터를 생성할 수 있음
     * 제품 및 프로젝트 관리: 프로젝트나 제품 제안서를 읽고 특정 페르소나(예: 의사, 변호사, 일반 지식 근로자)의 관점에서 피드백을 제공할 수 있음
     * 브레인스토밍: 포커스 그룹을 시뮬레이션하고 저렴한 비용으로 훌륭한 제품 피드백을 제공할 수 있음
     * 이러한 적용 사례 외에도 다양한 실험을 통해 도메인에 대한 깊은 인사이트를 얻을 수 있으며, 이를 통해 더 나은 의사 결정을 내릴 수 있음

   실제 써보니 너무 일반적인 답변만해요... 아직 갈길이 먼듯해요

   뭔가 매트릭스에서 나온 ""오라클"" 캐릭터가 생각나네요
"
"https://news.hada.io/topic?id=17641","rallyup - 경량 Wakeup-On-Lan 스케줄러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    rallyup - 경량 Wakeup-On-Lan 스케줄러

     * 소규모 비즈니스와 홈랩을 위해 설계된 Wake-On-LAN (WOL) 스케줄러이자 디펜던시 매니저
     * 방화벽, 스토리지, 하이퍼바이저 같은 인프라 서비스들이 정전과 같은 이벤트 후에 정확한 순서로 온라인이 되도록 보장
     * 주요 기능
          + VLAN 지원: 서로 다른 VLAN에 있는 디바이스들에게 WOL 패킷을 보낼 수 있음
          + YAML로 설정: 서버 부팅 시퀀스, 디펜던시, 상태 확인을 쉽게 정의할 수 있음
          + 서비스 상태 확인: HTTP 헬스체크, 오픈 포트, 쉘 커맨드로 서비스가 작동 중인지 검증할 수 있음
          + 플러그인 친화적: 사용자가 직접 상태 확인 플러그인을 작성할 수 있음 (개발중)
     * 설정 방법
          + YAML 설정 파일에서 서버 간 디펜던시와 온라인 검증 방법을 정의함
          + 서버 설정의 핵심 필드는 name, mac, interface, vlan, depends, check임
          + 각 서버마다 다음 디바이스가 시작되기 전 서버가 완전히 온라인인지 확인하는 다중 헬스체크를 가질 수 있음
          + 공통 헬스체크 필드 : retry, timeout
          + HTTP 헬스체크는 엔드포인트 응답을 검사함. type, url, status/regex 필드로 구성
          + Port 헬스체크는 TCP 포트 오픈 여부를 확인함. type, ip, port 필드로 구성
          + Shell 헬스체크는 셸 커맨드를 실행하고 결과를 검사함. type, command, status/regex 필드로 구성
"
"https://news.hada.io/topic?id=17603","Albertsons의 토지 이용 제한으로 농촌 식료품점 폐업 위기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Albertsons의 토지 이용 제한으로 농촌 식료품점 폐업 위기

    Albertsons가 토지 사용 제한으로 농촌 식료품점을 압박하는 방법

     * 농촌 시장 독점: Albertsons는 Mammoth, CA에서 토지 사용 제한을 통해 경쟁을 막고 유일한 상점이 되려 함. 이는 Kroger-Albertsons 슈퍼마켓 합병 사건에서 드러난 정보로, 농촌 시장은 독점하기 쉽다는 점을 보여줌.
     * 토지 사용 제한 사례: Washington 주 법무장관 Bob Ferguson은 2018년 Bellingham의 저소득 지역에서 Albertsons가 매각한 상점에 2038년까지 다른 식료품점이 들어설 수 없도록 제한한 것에 대해 벌금을 부과함. 이는 주 반독점법 위반으로 판명됨.
     * Mammoth Lakes의 상황: Mammoth Lakes는 연간 약 300만 명의 방문객이 있는 대규모 스키 지역으로, Vons가 주요 슈퍼마켓임. 경쟁자인 Grocery Outlet의 건설을 환경 문제로 막으려는 시도가 있었음. 지역 주민과 관광객들은 높은 가격과 나쁜 서비스에 대해 불만을 제기함.
     * Bishop의 상황: Bishop에서도 Vons가 주요 슈퍼마켓으로 자리잡고 있으며, 경쟁을 막기 위해 K-Mart 건물을 임대하여 다른 대형 소매업체의 진입을 막고 있음. 이는 가격을 높게 유지하는 결과를 초래함.
     * 농촌 지역의 일반적인 문제: 슈퍼마켓 산업에서 토지 사용 제한은 흔하며, 특히 농촌 지역에서 두드러짐. 새로운 상점을 여는 데 드는 비용과 적합한 토지의 부족이 주요 문제임. 이러한 제한은 경쟁을 방해하고 가격을 높게 유지하는 데 기여함.
     * 농촌 지역의 의존성: 농촌 지역은 대형 체인점에 의존하게 되며, 독립적인 농촌 식료품점의 연합체가 필요함. 그렇지 않으면 농촌 지역은 계속해서 대형 합병에 의해 피해를 입을 것임.

        Hacker News 의견

     * 토지 사용 제한은 불법이어야 한다고 주장함. 이는 기업이 가상의 정부처럼 행동하여 자신들이 소유하지 않은 토지에 규제를 가하는 것과 같음
          + 주택 소유자 협회(HOA)도 유사한 문제로, 주택에 대한 제한이 새로운 소유자에게도 계속 전달됨
          + 토지는 본질적으로 제한적이기 때문에, 이전 소유자가 미래 소유자의 토지 사용에 관여해서는 안 됨
          + 자동차는 다른 도시에서 구매할 수 있지만, 토지는 그렇지 않음
     * Matt Stoller가 토지 사용 제한에 대해 불평하는 것이 재미있다고 언급함
          + 캘리포니아의 96%의 주거용 토지에서 아파트 건설이 금지된 상황을 예로 듦
     * Alice가 토지를 Bob에게 제한 조건과 함께 판매하면, Alice는 여전히 토지에 대한 소유권을 유지하는 것과 같음
          + Bob이 Charlie에게 판매할 때도 동일한 제한이 적용됨
          + Alice는 제한 조건을 통해 소유권을 유지하므로, 이에 대한 세금을 내야 함
     * 토지 사용 제한은 구획 제한이 아닌 소유권 계약임을 명시함
     * 소유권 계약에 따라 특정 상점이 들어설 수 없는 토지를 구매한 경우, 이를 위반하면 어떻게 되는지 질문함
          + US vs. Eastern Mushroom Marketing 사건을 예로 들어 설명함
     * Mammoth에 대한 기사 내용이 잘못되었음을 지적함
          + 언급된 K-Mart는 Mammoth가 아닌 Bishop에 위치함
          + Mammoth에는 이미 두 개의 식료품점이 존재함
     * Bishop과 Mammoth의 식료품점 상황을 설명함
          + Bishop에는 Vons, Grocery Outlet, Smart and Final이 있음
     * 경쟁을 막기 위해 연간 75만 달러를 지불하는 계산이 어떻게 이루어지는지 질문함
          + 지역 정부가 이를 해결하기 위한 다양한 방법을 제안함
     * 보이지 않는 손이 Mammoth를 덜 매력적인 장소로 만들어 관광과 주민을 잃게 한다고 언급함
"
"https://news.hada.io/topic?id=17654","오브라 딘 1비트 디더링 프로세스 안정화 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     오브라 딘 1비트 디더링 프로세스 안정화 (2017)

     * TIGSource 포럼
          + TIGSource는 공식 Discord 서버를 개설함.
          + 포럼에는 다양한 주제와 토론이 있으며, 많은 회원들이 참여 중임.
     * Return of the Obra Dinn
          + 게임의 그래픽 스타일과 디더링 문제에 대한 토론이 진행 중임.
          + 높은 해상도로 렌더링 후 다운스케일링하여 깜박임 문제를 해결하려는 시도가 있음.
          + 디더링 패턴을 고정하여 움직임에 안정성을 부여하는 방법이 논의됨.
     * 디더링 프로세스
          + Obra Dinn은 8비트 그레이스케일로 렌더링 후 1비트로 변환하는 과정을 거침.
          + 두 가지 디더링 패턴을 사용하여 다양한 시각적 효과를 제공함.
          + 움직이는 이미지에서는 디더링 패턴이 문제를 일으킬 수 있음.
     * 디더링 안정화
          + 디더링 패턴을 지오메트리에 고정하여 안정성을 높이는 방법이 연구됨.
          + 여러 가지 매핑 방법을 시도하여 최적의 결과를 찾으려는 노력이 있음.
     * 결론
          + 디더링 문제 해결에 많은 시간이 소요되었으나, 결과적으로 게임의 시각적 스타일을 유지하면서 문제를 해결함.
          + 최종 게임은 두 가지 디스플레이 모드를 제공할 예정임.

        Hacker News 의견

     * 그래픽 프로그래밍을 10년 넘게 했지만 게임을 플레이할 때 그 점을 알아차리지 못했음. 게임의 전체적인 시각적 언어를 고려할 때, 100시간을 잘 보낸 것 같음
          + SIGGRAPH에서 비사실적 렌더링의 시간적 일관성 주제로 쉽게 발표할 수 있었을 것임
     * ""Return of the Obra Dinn""과 ""Papers, Please""는 Lucas Pope의 게임으로, 절대적인 클래식으로 여겨지며 여러 상을 수상한 게임임. 일반적인 게임 애호가가 아니더라도 꼭 해볼 가치가 있음
     * 1비트 디더링은 흥미로운 주제이며, 2D에서도 여러 방법이 존재함. 80년대 컴퓨팅 경험에 필수적이었던 것이 현대 하드웨어에서는 꽤 까다로워졌음
          + 개인 프로젝트에서 오프스크린 픽셀과 브라우저 캔버스 간의 일대일 매핑을 보장하는 것이 거의 불가능했음
     * 주제에 대한 이전 개발 로그를 찾아보았으며, Scale2X라는 업샘플링 알고리즘이 언급되었음. 꽤 멋짐
     * 제안된 접근 방식 중 어느 것도 잘 작동하지 않는 것 같으며, 문제는 생각보다 훨씬 복잡해 보임
          + ""프랙탈"" 디더 패턴을 사용하여 부드럽게 확대 및 축소할 수 있고 스케일 불변성을 유지하는 방법이 필요할 것 같음
          + 텍셀 공간에서 작업하여 카메라 및 객체 이동이 제대로 작동하도록 하는 것이 필요할 것 같음
          + 빌리니어 필터링을 수행하거나 디더 패턴의 슈퍼샘플링 렌더링을 수행한 후 화면 공간에서 오류 확산 패스를 사용하는 방법이 필요할 것 같음
          + 실제로 작동할지는 확신할 수 없음
     * 이 사람이 포럼에 모든 것을 공유하는 것이 정말 좋음
          + ""Papers, Please"" 작업 초기 부분을 본 기억이 있으며, 자신의 과정을 공유하고 피드백을 받는 것이 멋지다고 생각함
     * 최근 GOG에서 다운로드하여 5K 스튜디오 디스플레이에서 플레이하려 했으나, 아름다운 픽셀이 흐려지지 않는 결과를 얻지 못했음. 설정 메뉴를 모두 확인했음에도 불구하고 아쉬움
     * 재미로 이 게임의 OST를 공유함
     * 개인적으로 원본을 선호하며, 최종 접근 방식이 순수한 1비트 디더링 출력보다는 ""저해상도 텍스처"" 느낌을 너무 많이 준다고 생각함
"
"https://news.hada.io/topic?id=17660","Codebuff - 코드를 작성해주는 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Codebuff - 코드를 작성해주는 CLI 도구

     * Codebuff는 터미널에서 자연어 요청을 기반으로 파일을 수정하는 도구임
     * 사용자는 npm i -g codebuff 명령어로 설치 후 무료로 사용할 수 있음
     * 로그인 없이 최대 $20 상당의 크레딧을 제공
     * Codebuff의 작동 방식
          + 사용자가 터미널에서 원하는 작업을 입력하면, Codebuff는 코드베이스를 검색하여 필요한 수정 작업을 수행함.
          + 기존 소스 파일을 수정하거나 새로운 파일을 생성할 수 있으며, 테스트 실행, 타입 검사, 패키지 설치도 가능함.
          + 코드베이스의 함수와 클래스 이름을 파싱하여 코드베이스 맵을 생성함.
          + Claude Haiku 3.5를 사용하여 코드베이스 컨텍스트를 캐시하여 사용자 입력에 빠르게 응답할 수 있도록 함.
          + 웹소켓을 통해 데이터를 주고받으며, 초기에는 인증이나 데이터베이스 없이 API 키를 사용하여 요청을 처리함.
     * Codebuff의 개발 배경
          + 해커톤에서 시작된 프로젝트로, Sonnet 3.5를 사용하여 코드 작성 실험을 진행함.
          + 코드베이스에 대한 가이드를 작성하여 Sonnet 3.5의 성능을 개선함.
          + 초기에는 간단한 스크립트로 시작했으나, 더 많은 문제를 해결하기 위해 제품으로 발전시킴.
     * 기술 스택
          + 데이터베이스: Postgres + Drizzle
          + 서버: Bun, Render 호스팅
          + 인증: Auth.js
          + 웹사이트: NextJS, Render 호스팅
          + 결제: Stripe
          + 로깅: BetterStack
          + 대시보드: Retool
     * 사용 사례 및 요금
          + Codebuff는 제한된 무료 사용이 가능하며, 추가 크레딧은 월 $99에 제공됨.
          + 사용자는 Codebuff를 사용하여 Flutter 앱을 병렬로 개발하거나, 유닛 테스트 작성, Oauth 흐름 설정, API 스캐폴딩 등의 작업을 수행함.
          + 창의적인 사용 사례가 많으며, 사용자들이 구현 세부 사항보다 아키텍처와 디자인에 더 많은 시간을 할애할 수 있도록 도움을 줌.
     * SDK 및 향후 계획
          + Codebuff의 자연어 인터페이스를 앱에서 호출할 수 있는 알파 SDK를 제공함.
          + 얼리 액세스를 위해 등록할 수 있음.

        Hacker News 의견

     * Codebuff의 출시를 축하하지만, Aider와 매우 유사하게 보임. Aider는 오픈 소스이며, 파일 추가를 요청할 때 승인만 하면 됨. Aider는 명령어 실행도 가능함. 무엇이 다른지 궁금함
     * 데모는 항상 간단한 프로젝트에만 적용되며, 실제 복잡한 프로젝트에 대한 예시가 부족함. PR의 어려운 부분을 해결하는 데 도움이 필요함. 많은 도구들이 시작을 돕지만, 문제 해결에는 부족함
     * SSH 키와 클립보드를 여러 제3자에게 보내는 데 $20를 지불하고 싶지 않음. 네트워크 호출 없이 인라인 셸 지원을 제공하는 소프트웨어를 구매하고 싶음. 이러한 제품에 대한 일반적인 의견임
     * Codebuff는 이전에 manicode로 알려졌으며, 복잡한 리팩토링 작업에 유용함. Rust 프로젝트에서 파일을 모듈 디렉토리로 분리하는 데 사용했으며, 테스트 실행과 컴파일 오류 확인이 가능함. 이 작업에 약 100 크레딧 사용됨
     * 코드가 서버를 통해 전송되는지 궁금함. 로컬 서비스로 구현하는 것이 더 나을 것 같음. LLM이 파일 손실을 초래할 수 있는 명령을 받을 수 있는지, 이를 어떻게 방지할 것인지 궁금함
     * LLM이 인간의 검토 없이 명령을 실행하는 것은 위험하고 보안에 취약함
     * 이미 AIDE, Continue, Cody, Aider, Cursor가 있음. 왜 이 도구를 사용해야 하는지 궁금함
     * 이 도구를 사용해 보았으며, CoPilot과 Cursor보다 나은 점이 있음. 특히 CoPilot과는 편집기와 ""경쟁""하는 느낌이 들지 않음. 보안에 대한 우려가 있으며, 민감한 파일을 어떻게 처리하는지 궁금함
     * 코드 품질 측면에서 Cursor보다 나은지 궁금함. Cursor를 사용하며 파일 복사 시간을 절약하고 있음. 여전히 chatGPT/claude 인터페이스를 사용하여 코딩함
     * GPT-4o를 미세 조정하여 Claude의 변경 스케치를 git 패치로 변환함. 훈련 데이터는 밤늦게 생성되었으며, 미세 조정 작업은 자는 동안 실행됨. 훈련 데이터의 전체 내용과 변경 스케치 및 git 패치가 어떻게 작용했는지 궁금함
"
"https://news.hada.io/topic?id=17622","Rust 기반 Redox OS, RISC-V 지원 및 Raspberry Pi 4에서 부팅 가능해짐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Rust 기반 Redox OS, RISC-V 지원 및 Raspberry Pi 4에서 부팅 가능해짐

     * Redox OS는 Rust로 작성된 오픈 소스 운영 체제 프로젝트
     * RISC-V가 이제 Redox OS의 지원 대상이 됨. QEMU 에뮬레이터에서 데스크톱과 함께 Redox OS를 실행할 수 있는 수준에 이름
     * Raspberry Pi 4에서 Redox OS가 부팅됨. 로그인 화면까지는 진입하지만 USB 지원 등 다른 기능은 아직 완성되지 않음
     * Redox OS가 COSMIC Store를 포팅함
     * 다양한 ACPI 드라이버 업데이트가 이뤄짐
          + pkgar 패키지 형식이 이제 기본적으로 활성화됨
          + LuaJIT 등 기타 소프트웨어가 Redox OS로 포팅됨

   Nix지원 얼핏봤었는데 컴터한대는 redox로 셋업

   오 한번 설치해봐야겠네요. 👍🏻

   COSMIC Store가 인상적이네요

   https://www.redox-os.org/news/this-month-241031/

   Redox OS - Rust로 작성된 Unix-like OS
"
"https://news.hada.io/topic?id=17682","애플, 아이폰 16 및 16 Pro 수리 부품 판매 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플, 아이폰 16 및 16 Pro 수리 부품 판매 시작

   애플이 아이폰 16 및 16 Pro의 수리 부품을 자가 수리 스토어에서 판매하기 시작했습니다.
     * 아이폰 16 및 16 Plus의 카메라 어셈블리 교체 비용은 $169, 16 Pro 및 Pro Max의 경우 $249
     * 새로운 디스플레이는 모델에 따라 $279에서 $379까지 다양.
     * 배터리는 $99 또는 16 Pro 모델의 경우 $119.
     * 도구가 없다면 애플의 무거운 전문 수리 키트를 $49에 대여 가능.
"
"https://news.hada.io/topic?id=17672","실험실에서 배양한 바이러스로 자신의 암을 치료한 과학자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     실험실에서 배양한 바이러스로 자신의 암을 치료한 과학자

이 과학자는 실험실에서 배양한 바이러스로 자신의 암을 치료했음

     * 바이러스학자 베아타 할라시(Beata Halassy)는 실험실에서 배양한 바이러스를 자신의 유방암에 주입하여 성공적으로 치료했으며, 이는 자가 실험의 윤리에 대한 논의를 촉발시켰음.
     * 할라시는 2020년에 유방암 재발을 발견하고, 화학요법 대신 실험적 치료법을 선택했음.
     * 그녀는 자신이 배양한 바이러스를 사용하여 종양에 직접 주입하는 치료법인 종양용해 바이러스 요법(OVT)을 시도했으며, 4년 동안 암이 재발하지 않았음.

  떠오르는 치료법

     * OVT는 바이러스를 사용하여 암세포를 공격하고 면역 시스템을 자극하는 새로운 암 치료 분야임.
     * 현재까지 OVT는 주로 말기 암에 사용되었으나, 최근에는 초기 단계 암으로도 연구가 확대되고 있음.
     * 할라시는 두 가지 바이러스를 연속적으로 사용하여 자신의 종양을 표적으로 삼았으며, 이는 기존 임상 시험에서 사용된 바이러스임.

  윤리적 딜레마

     * 할라시는 자신의 연구 결과를 출판할 책임을 느꼈으나, 자가 실험과 관련된 윤리적 문제로 인해 여러 저널에서 거절당했음.
     * 연구자 자가 실험의 윤리에 대해 연구한 제이콥 셔코우(Jacob Sherkow)는 자가 실험이 다른 사람들에게 유사한 시도를 하도록 부추길 수 있다고 우려했음.
     * 할라시는 자신의 경험이 연구 방향을 바꾸는 긍정적인 경험이었다고 말하며, 동물 암 치료를 위한 OVT 연구에 자금을 지원받았음.

        Hacker News 의견

     * ""Right to try""는 드문 상황에서만 필요하며, 위험한 치료법이 성공할 가능성이 있을 때 논의할 가치가 있음. 두 명의 만성 질환 친구가 극단적인 치료법을 시도했지만 결국 빠르게 사망했음
     * 윤리적으로 문제가 없다고 생각하지만, 이론적인 피해가 출판의 이익과 비교될 때 과도하게 신중한 접근이라고 의심함. 과학 역사에는 이미 많은 자가 실험자들이 있으며, 출판이 큰 영향을 미치지 않을 것임
     * 암 진단을 받은 환자들은 이미 실험적 치료를 시도하려는 동기가 강하며, 자가 실험은 기회가 제한되어 있음. 인구 수준의 피해에 대한 우려가 개인의 치료 추구 권리를 넘어서는 경우가 많음
     * 전문 지식이나 기술이 의료 결정의 윤리적 경관을 변화시키는지에 대한 질문이 제기됨. 개인의 제한이나 지식 부족으로 덜 효과적인 치료를 선택하는 경우, 윤리적 무게가 달라지는지에 대한 복잡한 문제임
     * 특정 치료가 오프라벨일 경우, 위험이 수용 불가능하지 않으면 주목받지 않음. 치료가 유망한 경우, 윤리적 우려가 그 위험을 초월하는지에 대한 질문이 있음
     * 생명을 위협하는 질병에 직면했을 때, 개인의 사회적 책임과 자가 치료의 윤리적 함의 사이의 경계가 흐려지는 시점이 있음
     * 자가 치료를 시도하는 것이 아니라 출판이 다른 사람들에게 위험한 선택을 하게 할 수 있다는 것이 윤리적 문제라면, 출판 과정과 긍정적 결과에 대한 선택 편향이 문제의 핵심임
     * 생물학 교사가 아내의 암을 치료하기 위해 자가 치료를 시도한 사람을 알고 있었으며, 이것이 표준 치료가 되지 않은 것이 이상함
     * 과학자의 성공적인 암 치료 실험에 대한 윤리적 우려를 논의하는 이유가 의문임. 그녀의 선택이 건강과 웰빙에 기여했으며, 이는 명백히 긍정적인 일임
     * ""Halassy는 이 비공식적이고 낙인 찍힌 윤리적으로 복잡한 실천에 참여한 과학자들의 긴 줄에 합류했다""는 문장이 윤리학 연구를 진지하게 받아들이기 어렵게 만듦
"
"https://news.hada.io/topic?id=17666","FDA, 경구용 페닐에프린의 OTC 비충혈 완화제 사용 중단 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FDA, 경구용 페닐에프린의 OTC 비충혈 완화제 사용 중단 제안

        Hacker News 의견

     * Pseudoephedrine은 효과적인 비충혈제이며, 과거에는 Sudafed라는 브랜드로 쉽게 구할 수 있었음
          + 이 약은 감기 후 비행 시 귀 통증을 줄이기 위해 사용되었으며, 비행하지 않을 때도 비충혈 완화를 위해 사용되었음
          + 그러나 메스암페타민 제조에 사용될 수 있어, 미국에서는 구매 제한과 신분증 요구 등의 규제를 도입했음
     * 대체 약물로 phenylephrine이 개발되었으나, 효과가 떨어진다는 불만이 많았음
          + 규제 당국은 phenylephrine이 실제로 무용한지 조사 중이며, 무효하다고 판단되면 금지할 것을 제안하고 있음
     * 한 논문은 pseudoephedrine을 메스암페타민으로부터 합성하는 방법을 설명하며, 이는 풍자적임
     * phenylephrine이 효과가 없다는 사실을 알게 되어 실망한 사람들의 의견이 있음
          + FDA 제안에 대한 의견을 남기겠다는 사람도 있음
     * 비충혈제 사용에 대한 조언으로 neti pot(비강 세척기)이 도움이 된다는 의견이 있음
          + pseudoephedrine도 상황이 심각할 때 사용하며, 자연 요법만을 고집하지 않음
     * 영국에서는 pseudoephedrine이 포함된 Sudafed를 가끔 구할 수 있으나, phenylephrine이 포함된 제품과 거의 동일한 포장으로 판매됨
          + 이는 명백한 사기라고 생각하는 의견이 있음
     * phenylephrine 기반의 약물은 paracetamol과 카페인을 포함하며, 이는 값비싼 플라시보 효과를 주는 것이라는 의견이 있음
          + 고혈압 때문에 pseudoephedrine을 복용할 수 없는 사람은 다른 방법을 사용함
     * 제약업계가 phenylephrine의 무효성을 알고도 판매한 것에 대해 벌금을 부과해야 한다는 의견이 있음
          + FDA가 이를 허용했기 때문에 방어할 수 있을 것이라는 우려도 있음
     * phenylephrine의 문제는 적절한 용량으로 제공되지 않는 것이라는 의견이 있음
          + 표준 10mg 용량은 너무 낮아 효과가 없으며, IV로 투여할 때는 혈압을 증가시킬 수 있음
"
"https://news.hada.io/topic?id=17670","구글 퇴사 후 독립 활동 시작 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글 퇴사 후 독립 활동 시작 (2018)

  내가 구글을 그만두고 독립한 이유

     * 첫 2년
          + 구글에서의 첫 2년은 매우 만족스러웠음.
          + 최고의 엔지니어들과 함께 일하고, 최첨단 개발 도구를 사용하며, 무료 식사를 즐겼음.
          + 성과 평가에서 높은 점수를 받았고, 승진이 가까웠음.
     * 매니저가 승진을 시켜주지 않음?
          + 구글에서는 매니저가 직접 승진을 결정하지 않음.
          + 승진은 상위 엔지니어와 매니저로 구성된 위원회가 결정함.
          + 승진 신청은 추천서와 작업 설명서를 포함한 ""프로모션 패킷""을 제출해야 함.
     * 그게 실제로 어떻게 작동하는지
          + 승진 위원회가 공정하고 전지전능하다고 생각했으나, 현실은 달랐음.
          + 작업의 가치를 증명하기 어려웠고, 승진에 실패했음.
     * 순진하게 일하기
          + 유지보수 중인 데이터 파이프라인을 개선했으나, 그 성과를 증명할 수 없었음.
          + 버그 수정과 문서화를 했지만, 승진에 필요한 정량적 증거가 부족했음.
     * 측정할 수 없으면 존재하지 않는 것
          + 작업의 성과를 측정할 수 있는 지표가 부족했음.
          + 팀원 지원과 버그 수정은 승진에 도움이 되지 않았음.
     * 거절에서 배우기
          + 거절은 힘들었지만, 문제를 해결할 수 있다고 생각했음.
          + 작업의 기록을 남기고, 승진에 필요한 지표를 설정하기로 결정함.
     * 휴일 선물로 인한 깨달음
          + 구글의 휴일 선물 정책 변경으로 인해, 구글과의 관계가 비즈니스 관계임을 깨달음.
          + 자신의 이익을 위해 일해야 한다고 생각하게 됨.
     * 승진을 위한 최적화
          + 승진을 위해 작업을 선택하고, 그 외의 일은 하지 않기로 결정함.
          + 코드 품질 기준을 낮추고, 유지보수 작업을 피함.
     * 프로젝트가 취소됨
          + 프로젝트가 취소되면서 승진에 필요한 작업이 무의미해졌음.
          + 새로운 프로젝트에 적응하는 데 시간이 걸림.
     * 내가 무엇을 하고 있는가?
          + 구글과의 관계를 다시 생각하게 됨.
          + 프로젝트가 중단되면서 경력 발전이 방해받고 있다고 느낌.
     * 대안은 무엇인가?
          + Indie Hackers 커뮤니티를 발견하고, 소규모 소프트웨어 사업을 시작하기로 결심함.
          + 자신의 사업을 통해 더 많은 통제력을 가질 수 있다고 생각함.
     * 떠나기 전에 마지막으로
          + 승진을 위해 마지막 시도를 했으나, 팀이 해체되면서 실패함.
          + 더 이상 기다릴 수 없다고 판단하고 구글을 떠남.
     * 다음은 무엇인가?
          + 구글을 떠난 후 다양한 프로젝트를 시도하기로 결정함.
          + KetoHub와 Sia 기반 사업을 시도하고, 글쓰기를 통해 수익을 창출할 방법을 모색함.

  업데이트

     * 업데이트: 매년 솔로 개발자로서의 경험을 공유함.

  Refactoring English: Effective Writing for Software Developers

     * 소프트웨어 개발자로서 효과적인 글쓰기 기술을 담은 책을 집필 중임.
     * 이메일 작성, 소프트웨어 튜토리얼 작성, 설계 문서 작성의 고통을 줄이는 방법 등을 다룸.

        Hacker News 의견

     * 같은 저자가 다양한 소프트웨어 비즈니스를 시작하려는 과정을 요약한 ""연간 리뷰"" 블로그 게시물을 작성했음. 재정에 대해 솔직하게 공개하며, 소프트웨어 비즈니스를 부트스트랩하려는 사람들에게 유용한 자료임
     * 경력에서 가장 중요한 교훈은 고객이 실제 고객이 아니라는 것임. 급여, 보너스, 승진을 결정하는 사람들이 진짜 고객임. 경력을 비즈니스처럼 관리하여 가치를 제공하는 속도를 높이는 것이 중요함
     * 프로젝트가 완료되기 전에 중단되는 것은 짜증나지만, 승진만을 위해 직장에 있는 것은 좋지 않은 신호일 수 있음. Google에서 4년 동안 재정적 안정성을 얻고, 그 안정성을 바탕으로 고위험의 일을 할 수 있었음
     * 저자가 다시 등장하여 질문에 답변할 준비가 되어 있음
     * 승진보다는 내적 동기를 제공하는 직업을 원함. 많은 회사들이 낮은 급여를 제공하며, 의미 있는 일은 찾기 어려움. 미국 기업에서는 꾸준한 성과를 내는 직원도 성장과 경력 개발을 강요받음
     * 승진 위원회에 의존하는 것은 냉정함. Google은 엔지니어링 중심의 문화를 원했지만, 위원회가 진정한 감사를 형성할 수 없음. 회사가 당신을 인정하지 않는다면, 다른 곳을 찾는 것이 좋음
     * 조직이 협력을 촉진하지 않고, 직원들이 원하는 것을 고려하지 않는 방식으로 운영되는 것이 슬픔. 최고의 엔지니어들과 함께 일하고도 승진이 없으면 행복하지 않음
     * 저자는 더 큰 범위의 프로젝트가 필요하다고 느꼈지만, 이는 더 많은 통제 불가능한 요인으로 인해 실패할 수 있음을 의미함. 스타트업의 성공은 통제할 수 없는 100개 이상의 요인에 달려 있음
     * Google을 떠날 생각을 하고 있음. 다른 곳에서 더 높은 연봉을 받을 수 있고, 그곳에서는 경험을 더 가치 있게 여길 것임
     * Google에서는 매니저가 직접 보고하는 직원을 승진시킬 수 없으며, 승진 결정은 상위 소프트웨어 엔지니어와 매니저로 구성된 소규모 위원회에서 이루어짐. 2022년 이후에는 매니저가 유일한 투표권을 가짐
"
"https://news.hada.io/topic?id=17710","JVM 해부학 쿼크해부학 쿼크

     * JVM Anatomy Quarks 소개
          + ""JVM Anatomy Quarks""는 JVM에 대한 기본 지식을 설명하는 미니 포스트 시리즈임.
          + 각 포스트는 단일 주제, 테스트, 벤치마크, 관찰에 대해 깊이 있게 다룸.
          + 증거와 논의는 일화적일 수 있으며, 오류나 일관성에 대해 검토되지 않았음.
          + 사용자는 자신의 책임 하에 정보를 사용해야 함.
     * 작성자 정보
          + Aleksey Shipilëv, JVM/성능 전문가
          + Twitter: @shipilev
          + 문의 및 제안: aleksey@shipilev.net
     * 완전한 스냅샷
          + 시리즈는 진행 중이며, 자동 생성된 완전한 번들이 제공됨:
               o ePUB (가장 작음, MB 미만)
               o MOBI (작음, MB 정도)
               o PDF (매우 큼, 수십 MB)
     * 개별 인덱스
          + 인터넷에서 쉽게 하이퍼링크할 수 있는 인덱스 제공:
               o #1: Lock Coarsening and Loops
               o #2: Transparent Huge Pages
               o #3: GC Design and Pauses
               o #4: TLAB Allocation
               o #5: TLABs and Heap Parsability
               o #6: New Object Stages
               o #7: Object Initialization Costs
               o #8: Local Variable Reachability
               o #9: JNI Critical and GC Locker
               o #10: String.intern()
               o #11: Moving GC and Locality
               o #12: Native Memory Tracking
               o #13: Intergenerational Barriers
               o #14: Constant Variables
               o #15: Just-In-Time Constants
               o #16: Megamorphic Virtual Calls
               o #17: Trust Non-Static Final Fields
               o #18: Scalar Replacement
               o #19: Lock Elision
               o #20: FPU Spills
               o #21: Heap Uncommit
               o #22: Safepoint Polls
               o #23: Compressed References
               o #24: Object Alignment
               o #25: Implicit Null Checks
               o #26: Identity Hash Code
               o #27: Compiler Blackholes
               o #28: Frequency-Based Code Layout
               o #29: Uncommon Traps
               o #30: Conditional Moves
     * 마지막 업데이트
          + 2021-07-23 11:09:08 +0300에 마지막으로 업데이트됨.
"
"https://news.hada.io/topic?id=17611","일렉트로닉 아츠 7억 개 계정 해킹 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         일렉트로닉 아츠 7억 개 계정 해킹 사건

     * EA의 개발 환경인 ""integration""에서 테스트를 진행하던 중, 특정 게임의 실행 파일에 하드코딩된 자격 증명을 통해 권한 있는 액세스 토큰을 얻음.

  인증 문서

     * API 문서의 노출 여부를 확인하기 위해 여러 엔드포인트를 스캔함.
     * /connect/api-docs/index.json에서 Swagger JSON 파일을 발견하여 Nexus Connect API의 전체 Swagger 구현을 확인함.
     * Swagger 파일을 OpenAPI 3.0 사양으로 업데이트하여 로컬 Swagger UI 서버에서 실행함.

  더 많은 것을 찾기 위해

     * EA Desktop은 여러 백엔드 서비스를 통합하는 GraphQL API인 ""Service Aggregation Layer""를 사용함.
     * gateway.int.ea.com에서 80개 이상의 서비스 엔드포인트를 발견함.

  금광 발견

     * 모든 엔드포인트를 요청하고 OpenAPI 사양으로 변환하여 다양한 데이터를 확인함.
     * 특정 게임 팀에 대한 데이터와 같은 흥미로운 정보를 발견함.

  프로덕션 시간

     * 프로덕션 OAuth 클라이언트로 접근 가능한 엔드포인트를 탐색함.
     * /identity/pids/me와 /identity/pids/me/personas 엔드포인트를 통해 계정 정보와 ""페르소나"" 목록을 확인함.

  큰 발견

     * /identity/pids/{pidId}/personas/{personaId} 엔드포인트를 통해 페르소나를 업데이트할 수 있음을 발견함.
     * 사용자 이름 변경, 페르소나 상태 변경, 다른 계정으로의 페르소나 이동 등의 작업이 가능함.

  또 다른 깨달음

     * /identity/namespaces/{namespace}/personas 엔드포인트를 통해 숨겨진 계정도 검색 가능함.
     * 다른 계정의 페르소나를 자신의 계정으로 이동시켜 계정 데이터를 제어할 수 있음.

  세 번째 시도

     * Xbox/PSN 토큰을 사용하여 2FA를 우회하고 계정에 로그인할 수 있음을 발견함.
     * Xbox에서 게임에 로그인하여 피해자 계정에 접근할 수 있었음.

  영향

     * 공격자는 페르소나 데이터를 이동시켜 사용자 이름과 게임 데이터를 훔칠 수 있음.
     * Xbox를 통해 계정에 로그인하여 피해자 계정에 접근할 수 있음.
     * 페르소나를 금지하거나 사용자 이름을 변경할 수 있음.

  몇 가지 생각

     * EA가 문제를 해결하는 데 시간이 걸렸으며, 버그 바운티 프로그램이 없다는 점이 아쉬움.
     * EA와의 협력은 긍정적이었음.

  타임라인

     * 2024년 6월 16일 - EA에 취약점 보고
     * 2024년 7월 8일 - 패치 1 배포 (페르소나 소유권 확인)
     * 2024년 9월 10일 - 패치 4 배포 (문서 제거)

        Hacker News 의견

     * EA는 모든 게임에 공통 시스템을 사용하는 것을 좋아함. Madden에서 blaze라는 공통 백엔드를 발견했으며, 웹과 TCP 엔드포인트를 가짐. 엔드포인트 호출 도구를 만들었으나 서버를 하나씩 다운시킴. 이후 API를 구축하여 탐색을 막으려 함
     * Xbox를 통해 Battlefield 2042를 설치하고 성공적으로 접속함. 해커들을 좋아함
     * 공격을 수행하는 데 얼마나 많은 시간과 노력이 필요한지 보여주는 노트가 흥미로울 것임
     * 이 글을 즐긴 사람들은 HackerOne의 ""Hacktivity"" 같은 버그 바운티 플랫폼에서 더 많은 내용을 읽을 수 있음
     * 이 글 덕분에 개발 및 운영 API 서버를 점검하여 OpenAPI UI/JSON 디스크립터 경로가 노출되지 않았는지 확인함
     * EA 게임은 작동 여부가 불확실함. 큰 클라우드에서도 비슷한 상황이 발생할 수 있음. 인프라 세계에서는 불가능한 시나리오지만 EA 소비자 세계에서는 일상적임
     * EA는 Xbox 계정을 새 계정으로 변경하는 것이 ""기술적으로 불가능""하다고 주장했으나, 실제로는 가능함. 오래된 Xbox 계정을 연결할 수 없어 EA 게임을 Xbox에서 플레이할 수 없음
     * 모든 계정을 차단하고 데이터베이스 백업이 없기를 바라는 것이 재미있을 것임
     * 대기업에서 엔지니어로 일하는 것이 어떤 기분일지 궁금함. 여러 팀이 각기 다른 부분을 소유하고 있어 취약점이 존재할 가능성이 큼
     * EA가 아직 버그 바운티 프로그램을 시작하지 않은 것이 실망스러움. 보고할 인센티브가 없어 취약점을 숨기는 사람들도 있음. EA가 업계의 흐름을 따르길 바람. 보고에 대한 보상이 없었는지 궁금함
"
"https://news.hada.io/topic?id=17675","OpenCoder: 최상위 코드 LLM을 위한 오픈 쿡북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenCoder: 최상위 코드 LLM을 위한 오픈 쿡북

     * OpenCoder는 오픈 소스 코드 대형 언어 모델(LLM)로, 1.5B 및 8B 기본 및 채팅 모델을 포함하며 영어와 중국어를 지원
          + 2.5조 개의 토큰으로 구성된 데이터로 학습되었으며, 이 중 90%는 원시 코드, 10%는 코드 관련 웹 데이터로 구성
          + 최상위 코드 LLM의 성능에 도달하며, 모델 가중치, 추론 코드, 재현 가능한 학습 데이터, 데이터 처리 파이프라인, 실험적 절단 결과 및 상세한 학습 프로토콜을 제공
          + 연구자들이 코드 AI를 발전시키고 혁신할 수 있도록 지원하는 오픈 플랫폼
     * OpenCoder의 특징
          + 완전한 오픈 소스 코드 LLM으로, 투명한 데이터 처리 파이프라인과 재현 가능한 데이터셋을 기반으로 구축되어 여러 코드 LLM 평가 벤치마크에서 최상위 성능을 달성
          + RefineCode: 607개의 프로그래밍 언어에 걸쳐 9600억 개의 토큰으로 구성된 고품질의 재현 가능한 코드 사전 학습 코퍼스
          + 유의미한 절제(Ablation) 연구: 다양한 설계 선택 및 코드 LLM의 학습 전략에 대한 유의미한 통찰을 제공하기 위한 여러 절제 실험을 포함
          + 공개된 리소스: 최종 모델 가중치, 완전한 데이터 처리 파이프라인, 효율적인 평가 파이프라인, 재현 가능한 사전 학습 데이터셋, 대규모 SFT 데이터셋 및 중간 체크포인트

        Hacker News 의견

     * 모델 가중치와 추론 코드뿐만 아니라 재현 가능한 훈련 데이터, 데이터 처리 파이프라인, 실험적 결과, 훈련 프로토콜을 공개하여 과학 연구에 기여함.
          + 이러한 작업은 모델의 성능과 관계없이 모두에게 이익이 됨을 강조함.
     * 테스트 결과, 환각 현상이 많고 Qwen 2.5나 Mistral-Nemo 같은 일반 모델에 비해 성능이 떨어짐.
     * arxiv 논문의 홈페이지 링크 제공: https://opencoder-llm.github.io/
     * Qwen2.5-Coder-7B의 HumanEval 점수가 61.6인데, Table 1에서는 88.4로 나타나 혼란스러웠음.
          + 이는 두 모델이 다르기 때문임 (Qwen2.5-Coder-7B-Base는 61.6, Qwen2.5-Coder-7B-Instruct는 88.4).
     * 코드베이스 내 포크와 복사-붙여넣기 때문에 파일의 75%가 완전히 중복됨.
          + 파일 수준에서 해싱을 하기 때문에, 전체 파일을 수정 없이 복사한 것인지 확신할 수 없음.
     * 컴파일 및 실행의 메타데이터(프로파일링 데이터 등)를 포함하는 훈련을 하는 사람 있음?
          + 이러한 포함이 모델을 더 효율적인 코드 방향으로 유도할 수 있을지 궁금함.
     * 흥미로운 논문이지만, 모델이 Ruby를 포함한 몇몇 언어에서 Qwen2.5-Coder보다 나아 보이지 않음.
     * 이 모델을 실행하려면 어떤 하드웨어가 필요한지 궁금함.
     * 배관이 중요함.
     * 좋음.
"
"https://news.hada.io/topic?id=17646","TutorialLLM - LLM에 의해 진행되는 프로그래밍 학습 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                TutorialLLM - LLM에 의해 진행되는 프로그래밍 학습 플랫폼

     * 초중고(K-12) 교육을 위한 셀프 호스팅 가능한 프로그래밍 학습 플랫폼
     * 교육용 콘텐츠를 제작하는 사람과 이를 통해 학습하는 사람을 위해 설계
     * 음성(voice-to-voice) 및 텍스트 기반 AI 상호작용을 Scratch에서 널리 사용되는 블록 편집기인 Blockly에 통합
     * 이를 통해 서버 측 코드 실행이 가능하며, 학생들은 별도의 설정 없이 Minecraft(베드락 또는 교육용 버전)에서 직접 코드를 테스트할 수 있음

   오호 한국어로 넣어도 잘 설명해주네요. 점점 이런 도구들이 많아질 것 같습니다
   그러면서도 고민이 많아지네요
"
"https://news.hada.io/topic?id=17702","Greenmask - PostgreSQL DB 익명화 및 합성데이터 생성 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Greenmask - PostgreSQL DB 익명화 및 합성데이터 생성 도구

     * 데이터베이스 백업 덤핑, 익명화, 합성 데이터 생성 및 복원을 위해 설계된 오픈 소스 유틸리티
     * Stateless이며 데이터베이스 스키마를 변경할 필요 없음
     * 높은 수준의 커스터마이징이 가능하게 설계되었으며, 기존 PostgreSQL 유틸리티와 호환성이 뛰어나며 빠르고 안정적임
     * Playground : Docker 안에 샘플DB와 함께 구성된 샌드박스 환경이 있어서 추가 작업없이 테스트 가능
     * 주요 기능
          + Deterministic transformers: 해시 함수에 기반한 결정적 데이터 변환 방식으로, 동일한 입력 데이터는 항상 동일한 출력 데이터를 생성함. 대부분의 트랜스포머는 랜덤 또는 해시 엔진을 지원하여 모든 사용 사례에 적합함.
          + Dynamic parameters: 각 트랜스포머는 동적 매개변수를 지원하여 테이블 열의 값으로 트랜스포머를 매개변수화할 수 있음. 이 기능은 열 간의 기능적 종속성을 해결하고 제약을 충족시키는 데 유용함.
          + Transformation validation and maintainability: Configuration 중에 검증 경고, 데이터 변환 차이 및 스키마 차이 기능을 제공하여 소프트웨어 수명 주기 동안 변환을 효과적으로 모니터링하고 유지 관리할 수 있음. 스키마 차이는 스키마 변경 시 데이터 유출을 방지하는 데 도움을 줌.
          + Partitioned tables transformation inheritance: 한 번 Transformation 구성을 정의하면 파티션된 테이블의 모든 파티션에 적용할 수 있어(파라미터 apply_for_inherited 사용) 익명화 과정을 간소화함.
          + Stateless: 논리적 덤프로 작동하며 기존 데이터베이스 스키마에 영향을 주지 않음
          + Cross-platform: Go 기반 아키텍처로 인해 플랫폼 종속성을 제거하여 모든 플랫폼에서 쉽게 빌드하고 실행 가능함
          + Database type safe: 데이터 무결성을 보장하기 위해 데이터 검증 및 인코딩/디코딩 작업에 데이터베이스 드라이버를 사용함. 이를 통해 데이터 형식이 보존됨
          + Backward compatible: 기존 PostgreSQL 유틸리티와 동일한 기능과 프로토콜을 완벽히 지원하며, Greenmask로 생성된 덤프는 pg_restore 유틸리티를 사용하여 성공적으로 복원 가능함
          + Extensible: 사용자는 다양한 프로그래밍 언어로 도메인 기반 변환을 구현하거나 사전 정의된 템플릿을 사용할 수 있음
          + Integrable: CI/CD 시스템에 통합되어 자동화된 데이터베이스 익명화 및 복원 작업을 쉽게 처리할 수 있음
          + Parallel execution: 병렬 덤프 및 복원 기능을 활용하여 결과 제공 시간을 크게 단축함
          + Storage variety: 디렉토리 및 S3와 같은 원격 데이터 스토리지를 포함하여 로컬 및 원격 데이터 스토리지 옵션을 제공함
          + Pgzip 지원: --pgzip 설정 시 병렬 압축을 통해 덤프 및 복원 과정을 더 빠르게 처리 가능함
"
"https://news.hada.io/topic?id=17701","Go 언어의 15년","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Go 언어의 15년

   우리는 Go 오픈소스 공개 15주년을 축하했습니다!

   Go의 10주년 이후로 Go와 세상 모두가 많이 변화했습니다. 한편으로는 많은 것이 그대로 유지되었습니다: Go는 여전히 안정성, 안전성, 그리고 대규모 소프트웨어 엔지니어링과 프로덕션 지원에 대한 헌신을 유지하고 있습니다.

   Go는 계속 강세를 보이고 있습니다! Go의 사용자 기반은 지난 5년 동안 3배 이상 증가했으며, 이는 가장 빠르게 성장하는 언어 중 하나가 되었습니다. 불과 15년 전의 시작에서, Go는 상위 10개 언어 중 하나가 되었고 현대 클라우드의 언어가 되었습니다.

   주요 성과
     * 표준 라이브러리 HTTP 라우터 개선
     * 실행 추적 시스템 전면 개편
     * 더 강력한 난수 생성 기능
     * 첫 번째 v2 표준 라이브러리 패키지 도입
     * gopls 확장성 개선
     * 제네릭스 도입 (Go 1.18)
     * Go 모듈 시스템 도입 (Go 1.14)
     * 전방 언어 호환성 도입 (Go 1.21)
     * For 루프 변수 스코프 개선과 사용자 정의 반복자 도입 (Go 1.23)
     * 안정성과 안전성 유지하며 클라우드 인프라 언어로 성장

   향후 계획
     * 새로운 맵 구현과 가비지 컬렉션 알고리즘 도입 예정
     * FIPS 인증 암호화 내장 지원
     * 현대 하드웨어 최적화 개선
     * 최신 벡터 및 행렬 하드웨어 명령어 지원
     * AI 인프라 및 애플리케이션 지원 강화
     * CPU와 메모리 지역성 개선
     * 표준 라이브러리 현대화

  감사합니다

   이 모든 것은 Go의 놀라운 기여자들과 번창하는 커뮤니티 덕분에 가능했습니다. 15년 전 우리는 Go가 이루어낸 성공과 Go를 중심으로 발전한 커뮤니티를 꿈꾸기만 했습니다. 크고 작은 모든 역할을 해주신 모든 분들께 감사드립니다. 다가오는 한 해도 여러분 모두에게 최고의 한 해가 되기를 바랍니다.

   Go는 안정성과 혁신의 균형을 유지하며, 클라우드와 AI 시대의 핵심 언어로 계속 발전해 나갈 것입니다.

   벌써 15주년..! 하지만 개인적으로 가장 애정하는 언어지만 많이 쓰지는 못하고 있네요..

   Go가 벌써 15년이라니.. 으아아아 인생 무상합니다...

   Go언어의 15주년을 축하합니다! 저도 최근에 진행중인 프로젝트의 백엔드를 TypeScript(Bun) 에서 Go로 재작성하고 있는데, 정말 클라우드를 위한 언어라는 생각이 들 정도로 마음에 쏙 들었습니다. 혹시 Go언어 사용을 고민하고 있으신 분들이라면 한번쯤은 사이드 프로젝트로 써 보시는 걸 추천드리고 싶습니다. (특히 TypeScript로 백엔드까지 작성하시는 분들은 꼭 한 번 시도해 보셨으면 좋겠습니다!)
"
"https://news.hada.io/topic?id=17659","앰뷸런스, 자전거 운전자 충돌 후 병원 이송 및 $1,800 청구서 발송 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              앰뷸런스, 자전거 운전자 충돌 후 병원 이송 및 $1,800 청구서 발송 사건

     * 오리건 자전거 사고 소송
          + 오리건의 자전거 운전자인 윌리엄 호에쉬는 앰뷸런스와 충돌하여 코가 부러지고 몸에 긁힌 상처를 입은 후 앰뷸런스 제공업체를 상대로 99만 7천 달러의 소송을 제기함.
          + 앰뷸런스 제공업체인 Columbia River Fire & Rescue는 호에쉬에게 1,862달러의 앰뷸런스 비용을 청구했으며, 이는 현재까지 약 47,000달러의 의료비와 앞으로 예상되는 50,000달러의 의료비에 포함됨.
     * 사고 경위
          + 사고는 2022년 10월 Columbia County의 작은 마을 Rainier에서 발생했으며, 호에쉬와 앰뷸런스는 같은 방향으로 이동 중이었음.
          + 앰뷸런스가 우회전을 시도하면서 호에쉬와 충돌하여 그의 자전거를 파손시킴.
          + 사고는 Columbia River Fire & Rescue의 Rainier 소방서 앞에서 발생했으며, 앰뷸런스는 당시 2mph에서 10mph 사이로 이동 중이었음.
     * 소송 내용
          + 호에쉬는 통증과 고통에 대해 90만 달러를 추가로 청구하며, 운동 범위 감소, 손아귀 힘 감소 등의 증상을 겪고 있다고 주장함.
          + Columbia River Fire & Rescue는 논평을 거부했으며, Allstate Fire and Casualty Insurance Co.는 논평 요청에 응답하지 않음.
     * 기타 관련 사고
          + 오리건에서는 차량, 자전거, 보행자와의 앰뷸런스 충돌 사고가 드물지만 발생하고 있음.
          + 최근에는 25세의 켈시 사이벨의 유족이 South Lincoln Ambulance와 Yachats Rural Fire Protection District를 상대로 600만 달러의 소송을 제기함.

        Hacker News 의견

     * 자전거를 타는 사람으로서 자전거가 위험하다는 말을 자주 듣지만, 실제로는 자동차가 더 위험하다고 설명함. 이제는 빠른 청구를 하는 구급차도 위험 목록에 추가해야 할 것 같음
          + 오리건의 한 자전거 운전자가 구급차에 치여 코가 부러지고 몸에 상처를 입은 후 구급차 제공업체를 상대로 997,000달러의 소송을 제기함
          + 현재 의료비로 47,000달러, 예상되는 미래 의료비로 50,000달러, 장기적인 고통과 고난으로 900,000달러를 청구함
          + 기사가 자전거 운전자가 구급차 비용을 지불했는지 여부는 언급하지 않음
     * 자전거 운전자의 자동차 보험이 비용을 부담하고, 구급차 회사를 상대로 소송을 제기해 돈을 돌려받으려는 것 같음
          + 자동차가 없으면 자동차 보험도 없을 것이고, 건강 보험이 초기 비용을 부담한 후 구급차 회사를 상대로 소송을 제기할 것 같음
     * 자전거로 이동 위반을 하고 운전면허증을 경찰에게 보여주면 면허에 벌점이 부과되지만, 운전면허증이 없으면 벌점이 부과되지 않음
     * 유럽인으로서 구급차를 타고 가는 데 비용을 지불해야 한다는 사실이 충격적임
     * 고등학교 때 알던 아이가 구급차에 의해 자전거에서 떨어졌고, 구급차가 뒤로 물러나 그의 다리를 밟아 더 큰 피해를 입음
          + 1971년에 도시가 많은 돈으로 합의했지만, 10년 후에는 그렇게 많지 않은 금액이었음
     * ""오른쪽 후크""라는 일반적인 사고 유형임
          + 사고 방지 방법 링크
          + 자전거 사고 PDF 링크
          + 요즘은 주로 걷지만, 자전거를 탈 때는 이러한 사고 패턴을 외워서 피하려고 했음
     * 미국의 의료 시스템이 두렵게 느껴짐
     * 이 헤드라인은 어느 나라에서 발생했는지 말하지 않고도 어느 나라에서 발생했는지 알려줌
     * 병원까지 데려가는 데 1800달러?! 데리러 가는 것도 아니었음
     * Bakfiet 시간? YouTube 링크
"
"https://news.hada.io/topic?id=17614","해커 팹 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                해커 팹 기술

  개요

     * 목표: 집적 회로 프로토타이핑을 3D 프린팅만큼 빠르게 만들고, 모든 나노제작 도구의 DIY 버전을 개발하는 것임. 협력적인 오픈 소스 하드웨어를 통해 이를 달성하고자 함.
     * 현재 상황: 대규모 제조에 최적화된 공장과 도구를 사용하여 집적 회로 프로토타이핑을 진행 중임. 저렴한 비용으로 반도체 장치를 빠르게 제작할 수 있는 기계 세트가 부족함.
     * 비전: 나노제작을 복잡한 마법이 아닌, 기계의 기본 원리를 이해함으로써 혁신을 이루고자 함. 저비용, 빠른 회전율의 하드웨어 사용이 중요함.

  Hacker Fab

     * 참여자: 나노제작 경험이 없어도 의미 있는 기여 가능. 필수 읽기 자료를 읽어야 함.
     * 커뮤니케이션: Discord를 통해 전적으로 소통함.

  웹사이트

     * 목적: 모든 문서의 홈으로, 빈 방을 몇 달 안에 간단한 IC를 제작할 수 있는 공간으로 변환할 수 있는 충분한 자원을 제공함.
     * 기여: 누구나 무료 Gitbook 계정으로 변경 요청 제출 가능. 모든 문서는 GitHub에 있으며, Gitbook에서 보기 좋게 포맷됨.

  Fab Toolkit

     * 구성 요소: 모든 장치 제작에 필요한 도구 목록 제공. 각 빌드는 BOM, 설계 파일 링크, 코드 링크, 기계 설계의 기본 원리 이해(WIP)를 포함함.

  제작 도구

     * 리소그래피 스테퍼 V2: $3,708에 제작 가능
     * 진공 스핀 코터 V1: $200에 제작 가능
     * 열 증발기 V1: $15,000에 제작 가능
     * 튜브 퍼니스 V1: $200에 제작 가능
     * 플라즈마 에처: $17,400에 구매 가능

  검증/계측 도구

     * 프로브 스테이션 V1: $15,800에 구매 가능
     * DIY SMU: $800에 구매 가능

  화학물질

     * 포토레지스트 및 개발제
     * 유전체
     * 도체
     * 에칭제
     * 도판트 소스

  배경 및 라이선스

     * 영감: Sam Zeloof에게 영감을 받음.
     * 설립자: Elio Bourcart, Alexander Hakim, Sam Zeloof에 의해 시작됨.
     * 첫 Hacker Fab: Carnegie Mellon University에 개설됨.
     * 운영: 독립적인 기여자들에 의해 운영됨.
     * 하드웨어 라이선스: CERN-OHL-W
     * 소프트웨어 라이선스: MPL v2.0
     * 문서 라이선스: CC BY-SA 4.0

        Hacker News 의견

     * 3D 프린팅의 부상으로 대형 IC 제작에 대한 취미가 생길 것이라 기대했으나, IC 제작의 복잡성과 위험성을 깨달음. 이는 물질 과학자들의 영역임.
          + IC 제작은 위험한 화학물질과 먼지에 민감한 복잡한 과정임.
          + 취미 제작을 위한 노력은 있지만, 물질 과학자들이 주도하는 영역임.
     * 저비용 IC 프로토타이핑의 가능성을 기대함. 3D 프린팅보다는 PCB가 더 적절한 비교 대상임.
          + PCB는 DIY가 가능하지만, 중국의 대량 생산으로 인해 매우 저렴함.
          + IC 프로토타이핑의 비용 문제는 마스크 세트 제작의 NRE 비용임.
     * 개인이 칩을 제작할 수 있는 능력이 주된 가치라고 가정함. 이는 3D 프린팅처럼 빠른 프로토타이핑을 위한 것임.
          + FPGA와 비교했을 때의 장점에 대해 의문을 가짐.
     * 반도체 전문가로서, 기존 반도체 공정을 축소하는 것은 적절하지 않다고 봄. 새로운 도구가 필요함.
          + 독성이 없는 시약과 개발자가 필요하며, 이러한 단계는 지역 실험실에서 분리될 수 있어야 함.
     * 해커 랩을 구축하는 데 하드웨어 비용이 약 $50,000 이상 소요됨. 비용 절감을 기대함.
     * 농업을 위한 저비용 가정용 IC 개발이 필요함. 디지털 농기계의 자가 수리 및 수정 능력이 필요함.
     * 미세 구조를 인간 규모의 기계로 제작하는 것은 어려움. DNA 지향 결정 성장에 대한 새로운 접근법에 흥미를 느낌.
     * 프로젝트는 흥미롭지만, Discord를 통한 비공개 커뮤니케이션은 오픈 소스 DIY 프로젝트에 적합하지 않다고 봄.
"
"https://news.hada.io/topic?id=17731","에드테크 혁명의 실패","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              에드테크 혁명의 실패

     * EdTech 혁명의 실패
          + Jon Haidt와 Zach Rausch의 소개:
            2010년대 초 스마트폰과 소셜 미디어 플랫폼이 청소년의 삶에 들어오면서, 서구 세계의 학교들은 1대1 노트북, 태블릿, 아이패드가 교실의 필수품이 되는 디지털 혁명을 경험함. 그러나 10년 후, 이러한 혁신적 낙관론은 사라지고 있음. OECD의 한 리뷰에 따르면 대부분의 교육 기술(EdTech)은 한때 약속했던 학문적 이점을 제공하지 못했음. 이와 동시에 수학, 과학, 읽기 분야의 글로벌 시험 점수는 하락하고 있음.
     * 글로벌 PISA 시험 점수 하락
          + 그림 1: 38개 OECD 국가에서 평균화된 수학, 읽기, 과학 점수의 하락을 보여줌.
            _The Anxious Generation_에서 우리는 전화 없는 학교를 옹호했으며, 이는 학생의 성과와 집중력, 대면 관계의 질을 향상시킬 것이라고 주장했음. 그러나 EdTech의 광범위한 영향은 불분명했음. 우리는 EdTech가 전통적인 학습 방법보다 실제로 더 나은지, 언제 도움이 되는지, 그리고 언제 산만함이 교육적 이점을 압도하는지를 탐구하고 있음.
     * EdTech 혁명의 실패 by Jared Cooney Horvath
          + 2023년 5월, 스웨덴의 교육부 장관 Lotta Edholm은 스웨덴 교실에서 학생 중심의 디지털 기술을 크게 줄이고 전통적인 방법을 채택할 것이라고 발표함. 이는 많은 사람들에게 충격을 주었음.
            OECD의 국제 리뷰에 따르면, 학교에서 컴퓨터를 자주 사용하는 학생들은 대부분의 학습 결과에서 훨씬 더 나쁜 성과를 보임. J-PAL의 연구에 따르면, 컴퓨터 접근성을 확장하는 이니셔티브는 K-12 성적과 시험 점수를 개선하지 않음.
     * 데이터의 위치
          + 1980년대 이후, 다양한 학습 분야에서 디지털 기술의 영향을 탐구하는 메타 분석이 수행됨.
               o 수학: ES = 0.33
               o 문해력: ES = 0.25
               o 과학: ES = 0.18
               o 글쓰기 품질: ES = 0.32
               o 특정 학습 필요: ES = 0.61
                 이러한 효과 크기는 처음에는 유망해 보이지만, 교육 통계학자 John Hattie의 연구에 따르면 거의 모든 것이 학생 학습에 긍정적인 영향을 미침.
     * 멀티태스킹은 학습에 매우 나쁨
          + 디지털 기기가 학습을 어렵게 만드는 주요 이유를 이해하려면 인지적 측면을 살펴봐야 함.
            인간의 '주의'는 필터와 같으며, 관련 정보만 의식적 인식에 들어오게 함. 그러나 주의는 한 번에 하나의 규칙 집합만 처리할 수 있음. 멀티태스킹은 학습 속도를 늦추고, 정확성을 떨어뜨리며, 기억을 감소시킴.
     * 주요 기능은 무엇인가?
          + 컴퓨터의 주요 기능은 무엇인가? 학생들이 화면 앞에 앉을 때 즉시 떠오르는 행동은 무엇인가?
            미국 학생들이 디지털 기술을 사용하는 방식에 대한 조사에 따르면, 대부분의 학생들은 디지털 기기를 멀티태스킹에 사용함. 이는 학습에 방해가 됨.
     * 세 가지 변명
          + 변명 #1: 디지털 기기는 잠재력이 큼.
            변명 #2: 디지털 기기는 어디에나 있음.
            변명 #3: 학교가 디지털 기기를 잘못 사용하고 있음.
            이러한 변명은 디지털 기기의 효과 부족을 정당화하기 어렵게 만듦.
     * EdTech가 이점을 가져올 때
          + 디지털 도구가 잘 훈련된 교사에 의해 사용되고 제어될 때, 멀티태스킹과 산만함의 문제가 방지될 수 있음.
            학습이 중단될 때, 디지털 기술은 유용할 수 있음. 그러나 디지털 기기는 학습의 최선의 도구가 아닐 수 있음.
     * 결론
          + 유럽과 동남아시아의 많은 국가에서 디지털 의존도를 줄이고 있음. 이러한 변화가 학생 학습, 관계, 정신 건강, 신체적 웰빙에 긍정적인 영향을 미칠 수 있음.

        Hacker News 의견

     * EdTech 분야에서 오랜 시간 일해온 사람으로서, 교육 시스템이 학생들이 자신의 수준에 맞춰 학습할 수 있도록 하지 않는 문제를 지적함. EdTech의 약속은 학생들이 뒤처지지 않고 자신의 수준에 맞춰 학습할 수 있게 하는 것이었음. 그러나 현재는 학생들이 학년 기준으로 평가받고 있어 아쉬움이 큼.
     * EdTech가 교육 문제를 해결하지 못한 이유는 교육 자체의 실패 때문임. 교육에 기술을 단순히 도입한다고 해서 문제가 해결되지 않음. 교육 시스템은 이익을 위해 실패하도록 설계되어 있으며, 이는 정치적 영향력으로 인해 쉽게 바뀌지 않음. 학생 개개인에 대한 투자가 필요함.
     * 가장 효과적인 교육 방법은 전통적인 칠판과 종이 노트 사용임. 이는 학생들이 직접 필기하며 질문할 수 있는 환경을 제공함. COVID 기간 동안의 원격 수업 방식도 효과적이었음. 그러나 이는 주로 대학 수준의 과목에 해당하며, 개별 과외나 자기주도 학습이 더 효과적일 수 있음.
     * 디지털 기술이 학습에 사용되지 않는다는 주장은 과장된 것임. 학생들이 디지털 기기를 학습 외의 목적으로 사용하는 시간을 학습 효과와 비교하는 것은 부적절함. 음악을 들으며 공부하는 것은 학습에 도움이 될 수 있음.
     * EdTech 혁명이 실패했다는 주장은 과장된 것임. 디지털 기술이 교육 유토피아를 만들지는 않았지만, Math Academy, Skritter, Anki, Octostudio 같은 도구들은 학생들에게 큰 도움이 됨. 그러나 이들은 특정 분야에 특화되어 있음.
     * EdTech는 스마트폰, 태블릿, 컴퓨터를 교육 과정에 도입하는 것과 관련이 있음. EdTech 분야의 스타트업은 성공하기 어려우며, 많은 교사들이 조직의 지원 없이 서로 도움을 주고받아야 하는 상황임.
     * EdTech의 문제는 진보와 부분적 정답, 추측 작업의 개념이 부족하다는 것임. 다지선다형 문제는 학생들이 답을 추측하게 만듦. 빈 페이지에 답을 작성하는 것이 두뇌를 활성화시키는 방법임.
     * 기술의 과대광고에 쉽게 넘어가지 말아야 함. 교육 변화는 충분한 연구 후에 천천히 도입되어야 함. EdTech의 도입은 신중하게 검토되어야 함.
     * 교육 문제의 원인은 교사나 도구, 커리큘럼이 아니라 No Child Left Behind Act임. 모든 학생이 통과하는 시스템은 학습 동기를 저하시킴.
     * 교육 시스템은 빅토리아 시대의 구조에 기반하고 있으며, 시험 중심의 구조를 재구성해야 함. 시험은 과목의 숙달이 아닌 시험에 대한 능력을 평가하는 것임. 다양한 학습 방법을 제공하는 학교에서는 학생들이 더 나은 결과를 얻음.
"
"https://news.hada.io/topic?id=17627","트래커 비퍼 (2022) 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            트래커 비퍼 (2022) 출시

     * Tracker Beeper
     * 몇 년간 고민하던 아이디어를 드디어 구현하게 됨. 컴퓨터가 Google에 데이터를 보낼 때마다 소리를 내게 하는 것임.
          + 로그를 통해 많은 사이트가 방문과 클릭을 Google에 전송하는 것을 알게 됨.
          + 네덜란드 정부의 공식 구인 사이트가 사용자의 클릭을 Google에 전송하는 것을 보여주는 비디오를 공개함.
     * 비디오가 트위터에 공개된 후 일주일 만에 백만 조회수를 기록함.
          + Facebook과 다른 여러 트래커에 대한 지원을 추가함.
     * 미디어 출연
          + RTLNieuws.nl
          + 9to5Google
          + it-daily.net
          + Stadt Bremerhaven
          + Tarnkappe.info
     * 소프트웨어 상태
          + 현재는 Linux, OSX, BSD 사용자에게만 적합하며, 명령어 입력이 필요함.
          + 목표:
              1. Linux에서 필요한 기능을 구현하고 안정화
              2. Apple / OSX 버전을 단일 클릭으로 실행 가능하게 개발
              3. Windows 버전 개발
              4. iOS와 Android에서도 유사한 기능 구현 시도
     * 라이브 데모 설치
          + 휴대폰과 태블릿에서 사용할 수 있는 라이브 데모로 발전시키고 싶음.
          + 저전력 WiFi 네트워크를 사용하여 큰 QR 코드를 스캔하면 데모 WiFi에 연결됨.
          + 큰 스피커로 트래커 소리를 내며, 각 트래커마다 별도의 스피커를 사용하는 아이디어.
     * 추가 목표
          + 모든 인기 트래커 지원
          + 알림을 받고 싶은 트래커를 설정 가능
          + 설정 가능한 소리 제공 (스테레오 지원)

        Hacker News 의견

     * Pi-hole 설정은 생각보다 쉬우며, 가족과 친구를 위해 설정해두면 좋음. 미리 설정된 라우터를 판매하는 것도 고려할 수 있음
          + Pi-hole은 완벽한 해결책은 아니지만, 무언가를 시작하는 작은 단계임
     * 인간은 약 20kHz까지 들을 수 있으며, 초음파 주파수에 도달할 가능성이 있음
     * 컴퓨터 프로세스의 소리화는 흥미롭고 유익하며, 차트로 전달할 수 없는 경험을 실시간으로 제공함
     * Chrome의 검색 및 주소 바는 역검색 영장에 유용한 데이터 소스가 될 수 있음
     * 과거에는 하드 디스크에 무언가 기록될 때마다 소리가 나서 악성 코드를 쉽게 감지할 수 있었음
     * 하루에 보낸 요청 수를 세는 카운터가 있으면 좋겠음. 프라이버시가 거의 없는 현실이 놀라움
     * 친구가 웹 요청 데이터를 오디오 출력으로 변환하는 유틸리티를 만들었고, 이를 통해 흥미로운 발견을 했음
     * 대형 기술 회사들이 추적기를 많이 사용한다는 것은 알고 있었지만, 그 정도가 심각함
     * 광고 차단기와 필터 목록을 사용하여 추적 방지 효과를 비교해보면 흥미로울 것임
     * Chrome의 위치 및 검색 바 기능을 싫어하며, 모든 키 입력이 전송되는 것은 원치 않음
     * 검색 제안은 거의 유용하지 않으며, 큰 프라이버시 유출을 초래함. 대부분의 브라우저에서 기본적으로 활성화되어 있지만 비활성화할 수 있음
     * Pi-hole 설치 후 추적기 URL을 차단 목록에 추가하고 실시간 로그를 관찰하는 것이 빠르고 쉬운 방법임
     * Opnsense 또는 pfsense 설치 후 네트워크의 DNS를 차단하고 Pi-hole을 허용하는 것이 더 많은 시간을 필요로 함
     * VLAN을 생성하여 인터넷 접근을 차단하고 실시간 로그를 관찰하는 것도 가능함
     * 이러한 단계들은 각기 다른 수준의 차단을 제공하며, Pi-hole은 놀라운 속도로 차단 요청을 받음
"
"https://news.hada.io/topic?id=17608","2024년에도 JAVA가 여전히 인기 있는 25가지 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2024년에도 JAVA가 여전히 인기 있는 25가지 이유

     “프로그래밍 언어에는 두 가지 종류가 있습니다. 사람들이 불평하는 언어와 아무도 사용하지 않는 언어입니다.” — Bjarne Stroustrup.

   “Java를 비판하고 불평하는 사람들은 대개 젊고, 다른 어떤 것보다 JavaScript에 더 많이 노출되어 있는 것 같습니다. JS에 비해 Java는 약간 무겁고 제한적일 수 있습니다. 보일러플레이트가 곳곳에 있고, 컴파일러가 엄격하게 적용하는 타입 시스템 등이 있습니다. 하지만 선택권이 있다면 JS보다는 최적이 아닌 Java 코드베이스를 선택할 것입니다. 의심의 여지가 없습니다.”

   “수십 또는 수백 개의 파일에 분산된 코드를 다루는 실제 경험을 쌓은 후에야 Java의 소위 '제한'이 실제로는 발에 총을 쏘는 것을 막는 보호 장치라는 것을 깨닫기 시작합니다.”

   “Java를 발견하고 다시 전환하는 것은 계시와도 같았습니다. 저는 Java와 그 생태계를 사랑한다는 것을 깨달았습니다. 그래서 Java 생태계에 대한 제가 가장 좋아하는 몇 가지를 적어두기로 했습니다. 그러니 누군가가 Java를 비난한다면, 그들이 왜 틀렸는지 말해줄 25가지 이유가 있습니다.”
    1. 성숙한 생태계
    2. WRITE ONCE, RUN EVERYWHERE
    3. 이전 버전과의 호환성 (Backward compatiblity)
    4. 강 타입(Strongly Typed) 언어
    5. 빠른 릴리스 주기, 지속적인 개선
    6. 좋은 IDE들
    7. GraalVM의 Native Image 지원
    8. 오픈 소스 라이브러리와 프레임워크들
    9. 멀티쓰레딩
   10. 성숙한 객체 지향
   11. 메모리 관리와 가비지 컬렉션
   12. 관찰성(Observability)과 모니터링
   13. 함수형 프로그래밍 지원
   14. 풍부한 문서
   15. 빌드 도구와 의존성 관리
   16. 강력한 테스트 기능
   17. 거대한 커뮤니티
   18. 어노테이션
   19. 보안 기능
   20. 풍부한 API 세트
   21. 성능
   22. 구조화된 병행성
   23. 가상 쓰레드
   24. Switch 문을 위한 패턴 매칭
   25. 문자열 템플릿


   Spring을 언급하는 분이 없군요.
   전 Java의 언어 자체에 대한 불만은 없으나,
   Spring을 익혀야 한다는 국내 현실이 좀 답답하게 느껴져서 매력적이지 않게 느껴졌습니다.

   Java는 좋지만 Spring은... 끔찍하죠 ㅠ

   25개 다 변별력없음. 존중과 별개로, 레거시 잔치판의 하이에나들.

   2024년에도 여전히 인기있다는 이유로 25가지나 제시하고있지만
   굳이 자바가 아니어도 대체할 언어는 충분히 있는 것 같습니다...

   JVM이 인기 있는 거죠

   대부분의 이유들은 현대 여타 언어들의 생태계와 비교하였을 때
   그다지 강점이 아니며, 작성자는 스프링과 자바에 대해서 분리하지않고 글을 작성한 듯 싶네요

   Java라는 언어는 개발 환경이 잘 되어 있으니 선호하는 게 당연합니다.

   마찬가지로 그 환경 내에서만 일해야 퍼포먼스를 낼 수 있어서 그 환경에서만 일하고 싶은데 다른 환경을 요청하면 반감도 들고요.

   다만 앞으로 이런 언어들이 AI 가 더 코당을 잘 할 것이고 자신의 편한 환경보다 다양한 환경에서도 살아남을 적응력이 그 어느 때보다도 필요하다 보입니다.

   그런 면에서 다양한 언어의 적응력은 이제 선택이 아닌 필수 같아요.

   Entries web app을 만들어야 하면 무조건 java를 쓸듯. 1번만으로 끝나는 거라서... 간단한 개발, 빠른 개발이면 파이썬이 좋은 것 같고. Js는... 난 번잡해서 짜증나던데

   자바를 할거면 kotlin 을 하겠고, 자바라는 랭기지보단 닷넷계열 랭기지가 코틀린의 발전에 따라가주는 랭기지라고 판단합니다.
   자바는 예전에 자바로 구축해놓은 관공서 서버 유지보수 언어로 남아있는것이 좋을듯, 한국의 ceo 분들이 광고에서본 자바라는 단에에 익숙해서 자바를 고집하는 경향이 있죠. Kotlin, .net 을 경험해보고 자바를 고려해보세요.

   선생님들 Java 얘기 나와서 하는 말인데... Go는 어떻습니까? 저는 Java 보단 사실 Kotlin이 더 좋긴 한데, Gradle로 맛본 좌절감이 너무 많아서 그냥 Go로 정착중이거든요. 짧게나마 써 본 입장에서는 Java가 필요한 곳 어디든 Go로도 커버 가능하지 않을까? 하는 생각이 들었습니다.

   JS/TS의 경우 저도 좋아하긴 하는데 아무리 그래도 Java랑 동일 선상에 놓고 비교하는 건 좀 무리가 있지 않을까 싶습니다. 어쨌든 싱글스레드의 제약은 있는거고, pm2등으로 멀티 프로세싱을 한다고는 하는데 Java도 virtual thread 잘되어 있고 사실 이게 더 낫다고 생각하거든요. 물론 이렇게 사고가 흘러가다가 고루틴 보고 저는 Go로 정착하긴 했는데... ㅎㅎㅎ;;

   필요에 따라서 적재적소에 언어를 활용하는 게 좋다고 생각합니다. 저는 2024년인 지금도 여전히 PHP언어 사랑하고, JS, Java(Kotlin) 역시 Go만큼은 아니지만 애정합니다. 언어는 도구니까, 도구 목적에 맞게만 잘 쓰면 되지 않을까 하여 댓글 남겨봅니다.

   지금은 진짜 쓸만한 수준이 됐다고 봐요. 저는 회사에서도 go로만 업무하고 있습니다.
   예전 godep, glide 쓰던 시절엔 dependency 한번 어긋나면 끼워맞추는데 하루종일 걸리면서 이게 언어인가 언어 언저리인가 고민했었는데요.. 😂

   싱글스레드의 제약은 있다하더라도, 컨테이너 감싸서 하나의 팟 당 cpu 별로 안잡아먹게끔 해서 오케스트레이션하는 시대에서는 그 제약이 그렇게 큰가? 라는 생각밖에 들지않네요

   예전처럼 하나의 서버에 여러 컨테이너를 띄우는 대신, 그 컨테이너가 cpu를 많이 잡아먹었다면 모를까요

   대부분의 웹서버의 경우 cpu를 많이 잡아먹지않고 IO 쓰루풋이 많은만큼 노드도 하나의 선택지로써 다뤄질 수 있다고 생각이 드네요

   물론 cpu가 많이 드는 도메인이라면 이건 다른 언어를 고려해보거나, napi를 통하여 네이티브 코드를 불러올 수도 있겠죠

   고루틴으로 비동기작업이 잘 추상화되어 있는 특징이 있어서 비동기작업에 유용한 언어라고 생각합니다. Rust나 python의 비동기 코드는 생각을 너무 많이 한 경우 같아요. 작성하기에도 읽기에도 인지 부하가 높은 편인 것 같습니다

   저는 generic이 포함되기 전의 Go만 써봤는데, 훌륭한 언어라고 생각합니다. 초기에는 도구가 정말 별로였지만 많이 발전했더라구요.

   문법이 투박하지만 그래서 쉽게 배워지고요.

   싸우지 마세여....

   토론이 과열되고 있습니다.
   반론이 있다면 그 내용만을 적어주세요.
   사이트 이용법에 어긋나는 댓글은 삭제 처리하였습니다.
   또한 이용법에 맞지않는 활동이 반복적인 아이디를 차단하였으니 참고하시기 바랍니다.
   건전한 토론을 부탁드립니다.

   moderator | 사이트 이용법에 맞지 않아 삭제되었습니다.

   자바 1.8은 정말 훌륭한 버전이죠!

   moderator | 사이트 이용법에 맞지 않아 삭제되었습니다.

   write once run everywhere 는 이제 좀 놔줄 때도 되지 않나 싶은 표어라고 생각합니다.. ㅋㅋ

   그렇지만 그것이 자바인걸요! ㅋㅋㅋ

   IDEA에서 자바로 코딩하는건 즐거운데, IDEA 없었으면 불행했을겁니다. (불행했었고요)

   국내는 채용의 이점도 있고 전자정부프레임워크도 있고 자바공화국이란 말이 나올 정도라서 자바 개발자분들이 많은데요.
   기업에서 타 언어에서 자바로 전환하는 경우도 많은데 경험상 일부? 자바 개발자분들은 자바만 하고 싶어 하시더라고요.
   기존에 구축된 타 언어가 문제다, 자바로 전환해야 한다면서요. 근데 또 코틀린도 하기 싫어하시구요.
   뭔가 새로운 것을 배우는 것에 대한 거부감이 있어 보였어요. 굳이 자바로 다 하면 되는데 왜?라는 느낌

   자바의 강타입은 좋아하면서 강타입의 혜택인
   제네릭 싫어하는 개발자 본 적 있습니까? 저는 실제로 제 면상에서 그렇게 대놓고 주장하는 사람을 봤습니다. 어메이징 SI 입니다.

   SI 하는 분들은 제네릭 안쓰시지 않나요?

   그게 문제라는 말씀이신것 같은데요 .. ㅋㅋㅋ

   이정도면 자바는 종교인거같아요.
   Java를 비판하고 불평하는 사람들은 대개 젊고, 다른 어떤 것보다 JavaScript에 더 많이 노출되어 있는 것 같습니다.
   라는 말을 반대로 풀어보면 그만큼 js를 써본사람들은 java가 별로라고 경험했다는 얘기인것이기도 합니다.
   왜 그 각각의 장단점이 있다는 사실을 인정하지않고 java가 낫다라는 이야기만...
   document db 안써보고 그냥 특징 이런거 상관없이 sql이 좋다는 사람들이 있는것과 비슷하네요.

   이미 java를 많이 쓰고 있던 상황이 있었고 많은 선배개발자들이 java만 할줄알고 그사람들이 바꾸고싶어하지 않기 때문에 못바꾸고 있다란 사실은 빼놓고 생각하는거같네요. 지금 시점에서 보면 java만의 강점은 거의 없는 수준이라고 생각합니다.

   오랜 경험상으론 Python 이랑 JS가 광신자 비율이 더 많다고 생각합니다.

   그건 아마 Java 언어 대신 JS/Python 을 어필을 해야하는 입장이라 좀 더 주장이 많다고 느껴지실 수 있다고 봐요.

   개인적으로는 Java 말고 아에 다른 언어를 생각조차 못하는 분들을 좀 보긴 했어요. 그 외 언어 하시던 분들은 대부분 상황따라 다른 언어를 이용할 의지가 있더라고요.

   첫 언어가 자바면 그럴 수도 있겠다는 생각은 듭니다만 그런 경우를 주변에서 한번도 못봐서 상상이 잘 안가네요.

   저도 대학 입학하고 수업에서 처음으로 배운 언어가 C++이고 학년 올라가면서 다른 언어들을 자연스럽게 접했다보니 새로운 언어 배우는 것에 그렇게 부담을 갖고 있진 않습니다만... 사실 기본적인 문법(변수 선언, 제어문, 함수 등)은 다들 비슷비슷하니까요.

   그런 경우는 아마도 언어를 처음에 배울때 너무 협소하게 배워서 스펙트럼이 좁아진게 아닐까 싶습니다. 그리고 그런건 딥러닝이나 수리통계 목적으로 파이썬을 첫 언어로 접한 분들한테서 더 많이 봤습니다. 저도 그렇고 양쪽 다 경험담이니 둘 다 맞는 말이겠죠.

   저도 비슷한 경험을 해서 같은 생각입니다

   python을 좋아하는 분들은 python이 좋은 언어라고 주장하지 않습니다. js도 언어가 좋다고 우기는 분들은 없어요. python이나 js나 특정한 분야에서 개발을 하기에 생태계가 좋은 것일 뿐이죠. 유독 java 분들만 무조건 좋다고 우기는 느낌..

   Js는 js 개발자 스스로도 농담거리 삼습니다. 이게 언어냐.. ts 없었으면 ㅠㅠ

   굳이 자바를 변호해보자면, 반대로 자바만 유독 이런저런 이유로 많이 놀림감이 되기도 하는 듯 해요. 모두에게 친숙한 동네 삼촌 포지션...?

   요즘 자바관련 내용을 구글에 검색하면
   학원에서 배운 똑같은 내용의 한글 블로그글들이 쏟아져나와서
   재대로된 레퍼런스를 찾기 힘들어서 짜증이 납니다.

   구글 검색이 많이 안좋아졌죠...

   18, 25, 20, 10, 8, 6, 5, 3, 2, 1, 등등은 자바만의 전유물이 아님. 잘못된 비교

   지금 보니 자바도 이런 기능들이 있고 비난받을 이유가 없다는 것이지, 자바에서만 되니까 자바를 쓰라는 이야기는 아닌것 같아요.

   오히려 읽으면서 음.. 닷넷이 더 낫지 않나? 라는 생각 밖에 안드는군요

   저도 C#을 좋아하긴 하지만, 윈도가 아닌 환경에서는 굳이 써야하나 싶습니다.

   위 댓글과 마찬가지의 내용입니다. 그 시절 끝난지 정말 오래됐습니다.
   MS의 뒤늦은 선택이 사람들의 인식을 이렇게 망쳐놨네요.

   윈도우 응용프로그램만 만든다면 MS생태계 이점이 많아서 좋지만 리눅스나 맥OS 에선 자바보다 나을게 없다 봅니다. MS에서 뒤늦게 지원을 하지만 굳이 써야할 이유가 없죠. 시기가 안좋은

   더이상 .net framework 시절의 닷넷이 아닌데 윈도우 어플리케이션에 한정 짓나요
   이미 여러분들이 손에 쥐고 있는 휴대전화에서 닷넷 기반 게임 엔진이 돌아가고 있는걸요;

   222

   333

   문득, 자바로 만들어진 이클립스와 자바스크립트(타입스크립트)로 만들어진 VSCode 가 떠올랐다면... 잘못된 비교일까요. 물론 기능은 이클립스가 더 많습니다.

   잘못된 비교입니다..
   나온 시기를 봐야죠.
   이클립스가 나오고 한동안은 이클립스가 지금의 vscode와 같은 위상을 가지고 있었죠.
   저도 이클립스 정말 쓰기 불편해서 안쓰지만
   그 당시엔 쓸만한 선택지가 이클립스밖에 없었어요.

   네. 잘못된 비교입니다. 물론 그 두 도구의 특성부터 차이가 있지만, 언어 특성과 생태계를 비교해도 다르죠.
   런타임을 제외하고 얘기하자면,
   이클립스는 백엔드와 프론트엔드 모두 순 자바로 만든 도구입니다.
   vsc는 보이는 프론트엔드야 순 자바스크립트(물론 웹 기반)지만, 이를 지탱하는 백엔드(네, 그 일렉트론)는 C 같은 네이티브를 쓰죠.

   moderator | 사이트 이용법에 맞지 않아 삭제되었습니다.

   자바스크립트의 강점은 v8엔진을 구글이 관리하고 있다는 것이죠.
   버려진 java..

   일렉트론앱의 백엔드는 자바스크립트가 맞죠.. 메인 프로세스, 렌더러 프로세스 따로 돌아가지만 둘다 자바스크립트 코드로 동작하는걸요

   마찬가지로 JVM도 결국 네이티브로 구현된 런타임아닌가요?

   자바를 비판하는게 아니라, 자바가 짜증나는 이유는 자바 개발자만 유독 다른 언어 개발자들 비하하고 비교하고 기이한 자바부심이 있기 때문임. 자바를 좋아하지만, 왜들 그러는지 모르겠음. 언어마다 철학이 있고, 장단점이 있고, 생태계가 다른것 뿐인데, 이상한 자바부심을 돌발적으로 드러내서 비호감을 보임.

   자바 개발자의 자바 부심의 대한 근거로 제시할 자료가 필요해 보입니다. 제시하기 어렵다면 이는 받아들이기 어려운 주장이라고 생각합니다.

   어떤 언어나 도구에도 그런 사람들이 있기 마련인것 같습니다. 자바는 출시 당시에 C/C++에 비해 힙한 언어이면서도 기업용으로 널리 사용되면서 개발자의 풀이 커서 더 눈에 띄는게 아닌가 합니다.

   그리고 요즘은 Rust 개발자들이 그 역할을 하는것 같더라구요.

   놀랍게도 자바가 주류가 된 이유는 마케팅에 엄청난 비용을 사용했기 때문입니다ㅋㅋㅋㅋ
   https://www.youtube.com/watch?v=NVuTBL09Dn4

   언어가 어떻게 주류가 되는지에 대한 유튜브 비디오가 있는데 다른 분들도 보시면 흥미로울 거에요!
   https://www.youtube.com/watch?v=QyJZzq0v7Z4

   자바 개발자한테 짜증을 내셔야하는데 자바에게 내버리는...

   그건 그쪽 문해력이…

   제가 답변안해도 다른분이 적어주셨네요

   아닌데요?

     자바가 짜증나는 이유는

   문해력이 뭔지도 모르는듯?
"
"https://news.hada.io/topic?id=17653","미토콘드리아 생존 뉴스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미토콘드리아 생존 뉴스

미토콘드리아는 살아있음

     * 미토콘드리아의 기원
          + 1967년, 린 마굴리스는 원시 진핵세포가 산소를 이용하는 박테리아를 삼켜 공생 관계를 형성했다고 주장함.
          + 이 공생은 현대 미토콘드리아와 엽록체의 기원이 되었음.
          + 초기에는 비판을 받았으나, 시간이 지나면서 생물학자들이 이 이론을 수용하게 됨.
     * 미토콘드리아의 생명성
          + 미토콘드리아는 단순한 세포 소기관이 아니라 독립적인 생명체로 간주될 수 있음.
          + 미토콘드리아는 자체 유전체를 가지고 있으며, 이분법을 통해 복제와 분열을 함.
          + 열역학적 관점에서 미토콘드리아는 저엔트로피 입력을 받아 고엔트로피 출력을 생성함.
     * 미토콘드리아의 기능
          + 에너지 생성 외에도 정보 처리 및 환경과의 상호작용을 수행함.
          + 세포 내에서 다양한 분자들을 감지하고 세포 기능을 조절함.
          + 바이러스 침입 시 세포 사멸을 유도하여 확산을 막음.
     * 미토콘드리아의 진화적 역할
          + 미토콘드리아는 독립적으로 유전체를 복제하며, 인간 세포 복제와는 다른 특성을 가짐.
          + 미토콘드리아 DNA는 인간 유전체보다 빠르게 변이하며, 이는 세포의 적응력에 영향을 미침.
     * 미토콘드리아의 잠재적 역할
          + 미토콘드리아는 다른 세포 간 이동이 가능하며, 서로 다른 종 간의 전이도 가능함.
          + 외부 미토콘드리아의 추가는 심부전 및 척수 손상 치료에 이점이 있음.
     * 미토콘드리아와 생명 에너지
          + 미토콘드리아는 생명 에너지의 이해와 조작을 위한 중요한 연구 대상임.
          + 미토콘드리아의 기능 장애는 다양한 질병과 관련이 있으며, 이를 해결하기 위한 연구가 필요함.
     * 결론
          + 미토콘드리아의 역할을 재평가함으로써 생물학적 시스템의 복잡성을 이해할 수 있음.
          + 세포와 미토콘드리아의 상호작용을 통해 에너지 관련 질병 해결의 가능성을 모색해야 함.

        Hacker News 의견

     * 미토콘드리아의 ""생명력""은 단지 ""생명""이라는 인간의 언어적 구성에 따라 달라지며, 이는 생물학적 현상과 독립적으로 존재함. 과학은 수십 년 동안 이 문제를 고려해 왔으며, 이는 단지 의미론적 논쟁일 뿐 과학에 새로운 것을 추가하지 않음
          + 미토콘드리아는 흥미롭지만 세포의 기계에 완전히 의존적이며, 대부분의 유전자는 핵 DNA에 있음. 독립적으로 살아있다고 주장하기에는 부족함
          + 린 마굴리스의 미토콘드리아의 내공생 기원은 과학적 논쟁을 불러일으켰지만, 그녀의 주장은 수십 년 전에 확립된 과학임
     * 미토콘드리아는 복잡한 생명체의 에너지 예산을 가능하게 함. 지구 역사에서 미토콘드리아 내공생은 한 번 발생했으며, 이는 복잡하고 다세포적이며 지능적인 생명체로의 진행을 설명함
          + 실험실에서 작은 단계로 복제할 수 있지만, 그 순간은 복제되지 않음. 따라서 우주에는 많은 생명체가 있지만 식물과 동물은 거의 없다고 생각함
     * 기독교, 특히 가톨릭은 내공생의 밈적 등가물의 좋은 예가 될 수 있음. 기독교는 전 세계로 퍼지면서 토착 신앙과 관행을 흡수함
          + 크리스마스는 기독교의 핵심 휴일 중 하나이며, 독립적으로 존재할 수 없음
     * 과학 저널리즘의 고전적인 클리셰를 지적함. 약한 증거로 극적인 이론을 제시한 사람이 나중에 강한 증거로 입증되었다는 이야기와 의미론적 구분에 의존하는 철학적 주장에 대한 이야기임
     * 미토콘드리아에 대한 글을 읽을 때, Nick Lane의 <Power, Sex, and Suicide>를 추천함
     * 미토콘드리아를 ""살아있는"" 것으로 간주하는 것이 생물학적 시스템에 대한 이해를 저해한다고 주장하지만, 이는 단지 철학적으로 흥미로운 논쟁일 뿐 실질적으로 중요하지 않음
     * 미토콘드리아의 필수 단백질 대부분은 숙주 세포의 DNA에서 생성됨. 미토콘드리아는 일부 DNA를 가지고 복제하지만, 그 세포는 단순한 ""환경""이 아님
          + 미토콘드리아는 결합하여 다른 세포로 이동할 수 있음
     * 미토콘드리아가 세포의 발전소라는 사실은 우리가 원시적인 계약을 지키고 있다는 증거임. 미생물 중에서 더 나은 홍보 부서를 가진 생물학적 실체는 없음
"
"https://news.hada.io/topic?id=17616","데이터센터 분야에서 AMD의 Intel 판매량 초과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      데이터센터 분야에서 AMD의 Intel 판매량 초과

     * PC 구성 요소
          + CPU
               o AMD가 처음으로 데이터센터 분야에서 Intel을 추월함
                    # AMD는 데이터센터 CPU 시장에서 Intel을 처음으로 추월했음. 이는 AMD의 EPYC 프로세서가 Intel의 Xeon CPU보다 경쟁력을 갖추면서 발생한 변화임.
                    # AMD의 데이터센터 부문 수익은 2024년 3분기에 35억 4,900만 달러에 달했으며, 이는 Intel의 데이터센터 및 AI 그룹 수익인 33억 달러를 초과함.
                    # Intel의 Xeon CPU는 여전히 대부분의 서버를 구동하지만, 가장 비싼 기계는 이제 AMD의 EPYC 프로세서를 사용함.
                    # Intel의 Xeon 6980P 'Granite Rapids' 프로세서는 17,800달러로 가장 비싼 표준 CPU이며, AMD의 96코어 EPYC 6979P 프로세서는 11,805달러임.
                    # Nvidia는 데이터센터 GPU 및 네트워킹 칩을 통해 훨씬 더 많은 수익을 올리고 있으며, 이는 AI 프로세서가 데이터센터에서 협력하여 작동하는 데 필요함.
     * 최신 비디오
          + Tom's Hardware의 최신 비디오 및 뉴스레터 구독 정보 제공
     * 댓글
          + AMD가 데이터센터 CPU 시장에서 50% 점유율을 달성하는 데 시간이 걸릴 것이라는 의견
          + Intel이 2-3년 내에 사라질 것이라는 예측
          + AMD의 EPYC 프로세서가 Intel의 Xeon CPU보다 더 빠르다는 리뷰 언급
          + AMD가 AI-컴퓨팅 GPU를 지원하기 위해 개발자 도구와 기술 지원을 강화해야 한다는 의견
     * 인기 기사
          + Raspberry Pi Pico로 만든 Fallout 영감을 받은 T-45 파워 아머 헬멧
          + 해커가 프랑스 Schneider Electric에 바게트로 12만 5천 달러의 몸값 요구
          + Nvidia가 SK hynix에 HBM4 칩 배송을 6개월 앞당기도록 요청했다는 보고
          + SK hynix가 세계 최초의 48GB 16-Hi HBM3E 메모리 발표
     * 광고
          + 다양한 광고 및 스폰서 링크 포함

        Hacker News 의견

     * Intel 80386-33 CPU가 출시되었을 때, Novell 서버를 운영하며 최고의 CPU라고 생각했음. Arcnet에서 토큰 링으로 전환할 이유가 생겼고, 서버 성능이 크게 향상되었음
          + 1991년 중반 AMD 80386-40 CPU가 출시되며 큰 충격을 받았음. Twinhead 마더보드를 주문했고, 너무 빨라서 Hercules 모노 카드만 사용할 수 있었음
          + 16Mb 토큰 링이 출시되어 일부 고객들이 이 CPU와 함께 전환했음
          + 90년대 후반까지 AMD CPU를 사용하는 Novell NetWare 3.14 서버를 본 적이 있음. QUIC 테이프 드라이브가 있었지만 거의 10년 동안 교체되지 않았음
     * 하드웨어 전문가가 아니지만, AMD CPU가 더 많은 PCI 레인을 가지고 있어 최대 IO 처리량을 위한 HCI 솔루션을 설계하는 친구들이 있음
     * Intel이 모바일과 AI에서 기회를 놓친 후, 이제는 본거지에서 심각한 도전에 직면해 있음. Pat이 해결해야 할 과제가 많음
     * EPYC CPU가 오랫동안 지배적이었는데, 이렇게 오래 걸린 것이 놀라움
     * 여전히 괜찮은 첫 FPGA를 원하고 있음. FPGA를 만들어주길 바람
     * AMD의 성과를 이야기하지 말아야 함. 주가가 또 10% 하락할 것임. [비합리적인 시장 불평 증가]
     * AMD가 더 오랜 기간 동안 더 많은 가치를 제공해왔다고 확신함. 현재 배치된 AMD Exaflops가 Intel보다 훨씬 높다고 생각함. 두 회사 중에서 선택할 때 큰 고려사항이었음. 50% 더 많은 컴퓨팅 성능을 제공함
     * 해석 노트: 데이터센터를 보고 카테고리로 나누던 시기에 처음으로 AMD가 제품 품질 면에서 확실히 우위를 점했음. 2006년 AMD는 마이크로프로세서 부문에서 53억 달러의 매출을 보고했고, Intel은 같은 부문에서 92억 달러를 보고했음. 당시 두 회사는 ""서버"" 또는 ""엔터프라이즈"" 판매를 불완전하거나 일관되지 않게 보고했음
"
"https://news.hada.io/topic?id=17630","All-In 팟캐스트를 믿지 말아야 하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       All-In 팟캐스트를 믿지 말아야 하는 이유

     * 필자와 동료는 미국 경제의 붕괴 여부에 대해 토론하는 것을 즐기는데, 이 동료가 All-In 팟캐스트에서 지난 분기 경제 성장의 85%가 정부 지출에서 비롯되었다는 내용을 언급함
     * 올인 팟캐스트의 멤버중 하나인 Chamath Palihapitiya는 정부 지출이 GDP의 85%를 차지한다고 주장하며, 정부 지출을 제외하면 미국 경제의 실제 성장률은 2.8%의 15%에 불과하다고 말함
     * 상무부 경제분석국에서 발표한 GDP 추정치 자료를 확인해보면, 3분기 GDP 성장률 2.82% 중 정부 지출이 차지하는 비중은 0.85%로 30.1%에 해당하며 챠마스의 주장과 달리 85%가 아님
     * 현재 정부 지출 비중은 대공황 이후 시대에 일반적인 수준이며, 오바마 행정부 후기부터 트럼프 행정부 코로나19 이전까지와 비슷한 수준임
     * 챠마스의 주장은 총체적 헛소리이거나 의도적인 기만일 수 있으며, 동료 호스트들의 비판적 반응도 부족
     * 필자는 이런 실수가 자주 발생한다고 생각하여 이들의 콘텐츠를 소비할 가치가 없다고 판단함

   0.85가 85%로 바뀐 것 같은데 엑셀이 문제인 걸까요? 그럼에도 교차검증 안한건 비판받아 마땅하다고 생각합니다. 정부 지출이 GDP의 85%면 경제가 망한 건데 전혀 이상하지 않았나봐요

   그 분은 0.85%를 85%라고 읽은 건가요...
   그래도 상식적으로 생각해 봤을 때 경제 성장의 85%가 정부 지출이라는게... 실제로 통계에 그렇게 적혀 있더라도 다시 확인해볼 듯 한데.

   All-In 팟캐스트

   호스트들이 튀는편이라 감안하고 보셔야 하지만, 테크씬을 둘러보기에 좋은 팟캐스트입니다.

   개인적으로는 국내에도 이런 팟캐스트를 운영해보고 싶어요 ㅎㅎ

   저도 좋아하는 팟캐스트이긴 한데, 이슈 하나만으로 너무 공격적인 글 인것 같아요.
   대부분의 유튜버/팟캐스트/블로거가 말하는 사실들에 대해 다각도로 살펴보는 것은 필요하다고 봅니다.
"
"https://news.hada.io/topic?id=17615","JSON 인젝션을 이용한 API 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          JSON 인젝션을 이용한 API 공격

     * 얼마 전 삼성 기기의 JSON 인젝션 취약점을 이용해 기기에서 코드 실행까지 이어지는 공격 체인을 발생시킬 수 있었음
     * 페이로드의 JSON을 맹목적으로 신뢰하는 API를 어떻게 악용할 수 있는지에 대한 교훈이 될 수 있음

모든 것에 ""스마트""하게 인젝션하기

     * 삼성 스마트 허브의 경우 모바일 앱이 허브와 원격으로 통신하여 연결된 모든 것을 제어할 수 있었음
     * /credentials 엔드포인트로 악성 POST 요청을 보내 허브가 원격 서버에 연결하는 데 사용되는 자격 증명을 수정하고 데이터를 변조하여 SQL 인젝션으로 이어질 수 있었음
     * 삼성이 의존하는 json-c 라이브러리가 JSON_TOKENER_STRICT=0으로 컴파일되어 문자열을 작은따옴표와 큰따옴표로 정의할 수 있게 함
     * 이를 통해 공격자가 허브의 내부 sqlite 데이터베이스에 사용자 지정 열을 만들 수 있었음
     * camera 테이블에 과도하게 긴 ROP 체인을 삽입한 다음 /cameras 엔드포인트로 DELETE를 보내 video-core 프로세스가 데이터를 읽으려고 시도하다 충돌하게 만들어 전통적인 스택 기반 버퍼 오버플로우를 일으킬 수 있었음
     * 여기서 배운 내용은 JSON 인젝션 → SQL 인젝션 → 버퍼 오버플로우 → ROP = 장악이었음

JSON 인젝션이란?

     * JSON 인젝션은 악성 데이터를 JSON 스트림에 삽입하여 응용 프로그램 동작을 변경하거나 의도하지 않은 작업을 트리거할 수 있는 취약점
     * 서버 측 JSON 인젝션은 신뢰할 수 없는 소스의 데이터가 서버에서 제대로 정리되지 않고 직간접적으로 코드에 사용될 때 발생

문제는 파서에 있음

     * 최신 웹 애플리케이션과 API에서는 요청 파이프라인 내에 각각 독특한 특징과 취약점을 가진 여러 파서가 사용될 수 있음
     * 파서 간의 불일치와 다단계 요청 처리가 결합되어 심각한 취약점이 발생할 수 있음
     * JSON 파서는 공식 JSON RFC가 중복 키와 숫자 표현과 같은 주제를 개방형으로 남겨두기 때문에 어려움에 직면함
     * 공식 RFC가 유일한 규격은 아니며 ECMAScript, JSON5, HJSON, Binary JSON(BSON)도 있음
     * 파서 간 상호 운용성은 많은 사람들이 존재하는 것조차 알지 못하는 보안 위험을 노출시킴

JSON 파서 상호 운용성의 보안 문제

     * 중복 키를 처리하는 방식의 불일치
     * 특수 문자나 주석을 처리하는 방식의 불일치
     * JSON (역)직렬화의 불일치

JSON을 어떻게 악용할까?

     * JSON을 조작하여 개발자가 예상하지 못한 방식으로 응용 프로그램이 작동하도록 데이터를 주입할 수 있음
     * API 인프라 내에서 데이터가 구성 요소를 통과하는 방식을 조작할 수 있을 때 비즈니스 로직을 제어할 수 있는 기회가 생김
     * 파서가 입력을 처리하는 방식을 이해하면 파서의 동작을 악용하여 데이터를 조작할 수 있는 방식으로 해석하도록 하여 입력 검증을 우회할 수 있음

결론

     * 삼성 스마트 허브 공격은 JSON 인젝션이 SQL 인젝션부터 원격 코드 실행에 이르기까지 복잡한 취약점 체인으로 이어질 수 있는 한 가지 예시일 뿐임
     * 근본 원인은 종종 JSON 파서, 특히 여러 특이한 파서가 관련된 경우 데이터를 처리하는 방식의 불일치에 있음
     * JSON 객체가 어떻게 직렬화, 역직렬화, 처리되는지 철저히 검사함으로써 정제 필터를 우회하고 비즈니스 로직에 영향을 미칠 수 있는 페이로드를 작성하는 방법을 알아낼 수 있음
     * API가 계속해서 현대 애플리케이션의 초석이 되고 있기 때문에 API가 데이터를 처리하는 방식의 보안을 보장하는 것이 그 어느 때보다 중요함

   json body로 받은 데이터 validation 빡세게 해야겠네요
"
"https://news.hada.io/topic?id=17724","Clace - 내부 도구들을 위한 웹앱 관리 서버 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Clace - 내부 도구들을 위한 웹앱 관리 서버

     * 내부 도구용 웹 앱 개발 및 배포 플랫폼
     * 단일 머신에서 언어나 프레임워크에 관계없이 여러 웹 앱을 쉽고 안전하게 호스팅할 수 있음
     * 크로스 플랫폼(Linux/Windows/OSX)을 지원하며, 웹 앱 관리를 위한 GitOps 워크플로우를 제공
     * 주요 기능
          + 리버스 프록시, 하이퍼미디어 기반 마이크로 프레임워크, 컨테이너 오케스트레이터(Docker 또는 Podman 사용)의 기능을 단일 경량 바이너리로 제공
          + Clace 서버를 시작하고 Docker 또는 Podman이 실행 중인지 확인한 후, GitHub 소스 저장소에서 한 번의 명령으로 새 앱을 설치할 수 있음
          + 첫 번째 API 호출 시 Clace가 이미지를 빌드하고 컨테이너를 지연 로드 방식으로 시작함
          + 백엔드 API용 간단한 폼 기반 UI를 자동으로 빌드할 수 있음
     * 활용 방안
          + 개발 머신에서 컨테이너화된 웹 앱을 개발한 다음 공유 서버에 앱을 배포
          + 앱은 빌드 단계 없이 Git 저장소에서 직접 배포됨
          + Streamlit 앱을 배포하는 데 Clace를 사용하여 팀 전체에 걸쳐 액세스 제어를 위한 OAuth 인증을 추가할 수 있음

   제가 너무 게으른걸수도 있는데, 리드미 상단에 최종 결과물 스크린샷이 없으면 흥미가 팍 식는 경우가 더러 있습니다. 예를 들면 이 Clace...
"
"https://news.hada.io/topic?id=17638","호주, 16세 미만 소셜 미디어 사용 금지 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       호주, 16세 미만 소셜 미디어 사용 금지 제안

        Hacker News 의견

     * 인터넷에서 사람을 완벽하게 식별하는 방법을 찾는 것은 비현실적이며, 이는 개인의 프라이버시를 침해할 수 있음
          + 80년대 SF 소설에서 묘사된 디스토피아적 요소들이 현재 현실화되고 있음
          + ""Find my""와 ""air tags"" 같은 기술이 널리 사용되며, 많은 사람들이 이를 통해 사랑하는 사람들을 추적하고 있음
          + 과거 독재를 우려하던 사람들이 현재 기술을 통해 스스로를 감시하는 상황에 놓여 있음
          + 과거의 역사적 경험을 가진 사람들은 이러한 추적 기술이 남용될 것을 우려함
     * 산업이 자율적으로 콘텐츠를 규제하지 않는 상황에서 다른 대안이 필요함
          + 소셜 미디어에 대한 직접적, 간접적 경험을 통해 규제를 지지함
          + 정부 소유의 규제에 대한 우려가 있으며, 과거 정부의 행보에 대한 불신이 존재함
          + 정부 소유의 규제가 민영화될 가능성에 대한 우려가 있음
     * 중년의 기술 노동자들이 소셜 미디어 금지를 지지하는 것이 흥미로움
          + 현대 소셜 미디어의 결과를 좋아하지 않지만, 피해자를 처벌하는 것처럼 느껴짐
     * 소셜 미디어가 담배와 같다고 주장하며, 그 해로운 영향을 아직 완전히 알지 못함
          + 소셜 미디어 앱에 경고 문구를 추가하는 것이 필요하다고 생각함
     * 주류 소셜 미디어가 사람들을 화나게 하고 중독을 유발하여 수익을 창출함
          + 기업들이 도덕적 의무를 따르지 않으며, 강제적인 변화가 필요하다고 주장함
     * 온라인 식별을 강제하지 않고 법을 시행하는 방법에 대한 의문이 있음
          + 디지털 ID를 사용하여 웹이나 소셜 미디어에 접근해야 할 가능성을 제기함
     * 60세 이상에 대한 규제가 사회에 긍정적인 영향을 미칠 가능성이 있음
     * 금지는 효과가 없으며, 전면적인 감시 상태와 엄격한 처벌이 필요함
          + 이러한 상황을 받아들이고 있음
     * 식별 문제에 동의하지만, 현재 상황을 개선하는 데 도움이 될 수 있는 올바른 단계라고 생각함
     * 이러한 규제가 아이들이 현실 세계에서 사회성을 기르도록 강제할 수 있음
          + 장애가 있는 아이들은 비사회적으로 남을 가능성이 있음
"
"https://news.hada.io/topic?id=17679","FlyOnUI - Tailwind CSS를 위한 컴포넌트 라이브러리 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               FlyOnUI - Tailwind CSS를 위한 컴포넌트 라이브러리 오픈소스

     * 시맨틱 클래스의 심미적 매력과 JS 플러그인의 강력한 기능을 결합하도록 설계
     * 사용하는 컴포넌트들:
          + Tailwind CSS: 아름다운 웹사이트를 쉽게 구축할 수 있도록 도와주는 유틸리티 우선 CSS 프레임워크
          + daisyUI: Tailwind CSS에 컴포넌트 시맨틱 클래스 이름을 추가하여 더 빠르고 쉽고 유지 관리가 가능한 아름다운 웹사이트를 만들 수 있음
          + Preline: 접근성 지원 & 반응형 UI를 위한 JavaScript 헤드리스 및 완전 비스타일 Tailwind 플러그인. 애니메이션, 전환 등으로 경험을 향상시킴

FlyonUI를 사용해야 하는 이유

     * Tailwind CSS만 사용하면 HTML이 많은 유틸리티 클래스로 인해 지저분해질 수 있으며 유지 관리가 어려울 수 있음
     * Tailwind CSS나 daisyUI는 아코디언, 오버레이, 드롭다운 등과 같은 대화형 헤드리스 JavaScript 컴포넌트를 제공하지 않음
     * FlyonUI의 장점
          + 시맨틱 클래스의 아름다움과 대화형 헤드리스 JavaScript 플러그인을 결합하여 멋진 대화형 사용자 인터페이스를 쉽게 구축할 수 있는 강력한 도구 모음을 제공함
          + 깔끔하고 읽기 쉬운 코드베이스를 위해 시맨틱 클래스 이름이 있는 포괄적인 CSS 컴포넌트 활용
          + UI 컴포넌트에 상호 작용과 동적 동작을 추가하기 위해 아코디언, 드롭다운, 오버레이 등을 위한 헤드리스 JavaScript 플러그인 통합
          + 시맨틱 클래스와 JS 플러그인의 장점을 결합하여 더 빠르고 효율적인 개발 프로세스를 활용 가능
          + 일관된 코딩 접근 방식과 강력한 JS 플러그인으로 프로젝트를 유지 관리하고 확장할 수 있음

주요 기능

    1. 800개 이상의 무료 컴포넌트 예제: 웹앱 요구사항에 맞는 접근성 기준을 충족하는 수백 개의 컴포넌트 예제 제공
    2. 보편적인 프레임워크 호환성: React에서 Vue에 이르기까지 Tailwind CSS가 작동하는 곳이면 어디서든 완벽하게 호환됨
    3. 무제한 테마: FlyonUI의 테마 기능으로 앱의 모양과 느낌을 사용자 정의할 수 있음. 자세한 내용은 테마 섹션 참조
    4. Unstyled 및 Accessible 플러그인: 디자인을 희생하지 않고 원활하게 기능을 추가할 수 있는 비정형화되고 액세스 가능한 플러그인 제공
    5. 반응형 및 RTL 지원: 모든 기기에서 훌륭해 보이도록 반응형을 염두에 두고 제작되었으며 RTL 언어 지원
    6. 영원히 무료: 완전 무료이며 오픈 소스이고 커뮤니티를 위해 제작됨

   한번 써봐야겠네요 피그마도 추후에 공개예정이고 괜찮을 수 있겠네요

   UI라는 세상은 살아있는 생명체 같군요. 어디선가 본듯하지만 항상 새로운 것들이 계속 나오고, 주목받고,..
"
"https://news.hada.io/topic?id=17677","Λ-2D: 프로그래밍 언어로서의 드로잉 탐구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Λ-2D: 프로그래밍 언어로서의 드로잉 탐구

프로젝트λ-2D: 그림을 프로그래밍 언어로 탐구

     * 개요: 프로젝트λ-2D는 그림을 통해 프로그래밍을 할 수 있는 새로운 언어를 탐구하는 연구임. 람다 계산법의 아이디어를 기반으로 하여, 그림을 통해 코드 작성이 가능하도록 설계됨.
     * 비언어적 프로그래밍 언어: ASCII 기반 언어인 Befunge와 asciidots, 이미지 기반 언어인 Piet 등 비언어적 프로그래밍 언어들이 존재함. 이러한 언어들에 영감을 받아 새로운 언어를 개발함.
     * 목표:
          + 그림으로 프로그램을 작성하는 장점을 활용하여 텍스트 기반 언어로는 불가능한 기능을 포함함.
          + 명령어가 너무 적거나 많지 않도록 조정하여 사용의 용이성을 높임.
          + 시각적으로 매력적인 프로그램을 그릴 수 있도록 하여, 예술 작품처럼 감상할 수 있게 함.
     * 람다 계산법: 람다 계산법은 함수 적용과 함수 정의라는 두 가지 명령어만을 가짐. 각각의 명령어에 적합한 기호를 개발함.
     * 데이터 흐름: 기호를 연결하는 선을 통해 데이터가 흐를 수 있도록 설계함. 추가적인 기호를 도입하여 사용성을 높임.
     * 프레임과 GUI 요소: 캔버스의 특정 영역을 프레임으로 설정하여 데이터를 활용할 수 있도록 함. 슬라이더와 같은 GUI 요소를 추가하여 프로그램을 동적으로 제어할 수 있게 함.
     * 편집기 소프트웨어: 사용자가 디지털로 프로그램을 그릴 수 있는 편집기를 개발함. 5x5 픽셀의 기호를 사용하여 그리드 캔버스에 쉽게 배치할 수 있음.
     * 출력 문제 해결: 순수 함수형 언어의 특성상 ""출력"" 명령어를 구현하기 어려움. 이를 해결하기 위해 캔버스를 함수에 전달하여 변경된 캔버스를 반환받는 방식으로 재정의함.
     * 파서 개발: λ-2D 프로그램을 자바스크립트로 변환하는 파서를 개발함. 결과물은 복잡하지만 작동함.
     * 프로그래밍 경험: 새로운 언어로 프로그래밍하는 경험은 마인크래프트나 팩토리오와 비슷하지만 연구로서의 가치가 있음.
     * 시각화와 소리: 프로그램 실행을 시각화하고, 실행 중인 프로그램을 음악처럼 들을 수 있는 가능성을 탐구함.
     * 향후 계획: λ-2D를 개선하고, 그림을 통한 계산 시스템에 통합할 수 있는 새로운 프로그래밍 언어를 설계할 계획임.
     * 온라인 데모: λ-2D의 베타 버전을 온라인에서 체험할 수 있으며, 파서와 편집기의 소스 코드는 곧 GitHub에 공개될 예정임.

        Hacker News 의견

     * BitGrid와 유사하지만 다른 개념에 대해 논의하며, FPGA의 궁극적 단순화로 병렬로 행진하는 비트를 상상함. 이 아이디어는 대중에게 Petaflops를 제공할 수 있는 유용성을 가질 수도 있고 아닐 수도 있음. ASIC에서 DFF가 소모하는 에너지가 중요함.
          + Von Neumann 셀룰러 오토마타와 Nobili 셀룰러 오토마타를 발견했지만, 컴퓨터 과학의 이 부분에서 발견 가능성이 적어 실망스러움.
          + FSAs가 무한한 크기의 셀 공간을 정의하며, 모든 FSAs는 상태 전이 함수나 규칙 집합에서 동일함.
     * 자동화 프로젝트 엔지니어 작업이 재미있거나 친숙할 수 있음. 기능 블록 다이어그램은 기능 블록이 와이어로 연결되고, 블록 순서로 작업 순서가 정의됨. 블록은 엔진의 내장 함수와 같거나 복합체일 수 있음.
          + 제어 주기마다 다이어그램이 한 번 실행되며, 입력이 변경되지 않더라도 각 블록은 항상 한 번 실행됨.
          + 양조장부터 석유화학 공장까지의 제어 논리가 이렇게 구현됨.
     * 언어가 현재 튜링 완전하지만 사용하기 매우 힘들어 디자인 규칙 #2를 위반함. Lambda Diagrams에서 1단계에서 멈췄음.
     * Labview에서 이러한 작업이 수행되었지만, 진행하기 어려움. Max와 같은 소프트웨어에서도 수행되었지만, 금방 복잡해짐.
     * Petri Nets에 대한 그래픽 형식 사양에 관심이 있었음. 그래픽 표현이 있다면 엔지니어들이 형식적 방법을 더 많이 사용할 것이라고 생각했지만, Petri Nets를 보여주면 관심을 잃음.
          + University of York에서 PhD를 포기하기 전, RoboChart와 RoboSim을 사용했으며, 네트워크 및 서버 세계에 더 유용하게 적응시키려는 프로젝트를 진행 중임.
     * 비언어적 프로그래밍 언어의 영역이 탐구되지 않았다는 의견이 있음.
     * 1987년의 ""Wireworld""를 떠올리며, 8비트 카운터가 Wireworld에서 구현된 것을 본 적이 있음.
     * 프로그래밍 패러다임 측면에서 Funciton과 유사함.
"
"https://news.hada.io/topic?id=17663","Kagi Translate - Kagi 검색엔진이 제공하는 번역 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Kagi Translate - Kagi 검색엔진이 제공하는 번역 서비스

     * Kagi Translate는 기존 번역 서비스보다 뛰어난 번역 품질을 제공하며, 244개의 언어를 지원함
          + Google Translate와 DeepL을 포함한 기존 솔루션을 능가하는 번역 품질
     * Kagi Translate 사용 방법
          + URL 앞에 translate.kagi.com/을 추가하여 즉시 번역 가능
          + 앱 설치 없이 244개 언어에 접근 가능하며, 트래킹이 없음
          + 브라우저 북마클릿을 설치하여 빠르게 접근 가능
          + Kagi Search에 위젯으로 통합되어 검색 결과 내에서 즉시 번역 가능할 예정
     * 서비스의 특징
          + Kagi Translate는 모든 사용자에게 무료로 제공됨
          + 로그인하지 않은 사용자는 자동화된 남용을 방지하기 위한 간단한 캡차를 거치게 됨
          + Kagi 회원은 캡차 없이 직접 접근 가능하며, 기존 워크플로우와 원활하게 통합
     * 제한 사항
          + JavaScript로 로드되는 동적 콘텐츠나 유료 페이지는 번역하지 않음.
          + LLMs를 사용하여 각 작업에 최적화된 출력을 선택함으로써 강력한 번역 기능을 제공하지만, 가끔 발생하는 문제를 해결하기 위해 노력 중임.
     * 향후 계획
          + Kagi Translate는 단순히 더 나은 번역을 넘어 일상 도구의 기준을 높이는 것을 목표로 함
          + 개인정보 보호와 품질이 공존할 수 있으며, 강력한 도구는 사용자 추적 없이도 작동해야 한다고 믿음
          + Kagi Translate는 Small Web, Universal Summarizer, FastGPT와 함께 Kagi Search 및 Orion Browser의 도구 모음에 합류함

        Hacker News 의견

     * 한 사용자는 컴퓨터가 자신을 ""인간""으로 분류하지 않아 서비스를 사용할 수 없음을 언급함. Kagi의 번역 품질이 Google과 DeepL보다 낫다고 주장하지만, 아프리칸스어 번역에서 오류가 있었음을 지적함
          + ""Error Code: 600010"" 문제로 인해 피드백을 제출했으나, 로봇 여부를 확인할 수 없어 웹 사용이 점점 더 불편해지고 있음을 언급함
     * 아프리칸스어 번역에서 ""varktone""이 ""돼지 발가락"" 대신 ""돼지 껍데기""로 번역되는 등 부정확함이 있었음을 지적함. Google Translate가 더 정확한 번역을 제공함
     * Kagi의 번역 서비스가 비동기적으로 작동하지 않아 사용성이 떨어짐을 언급함. Deepl은 입력 시 비동기적으로 번역을 제공하여 더 나은 사용성을 제공함
     * Kagi의 다양한 기능 개발이 미완성 상태로 보임. 특히 지도 기능이 독일에서 제대로 작동하지 않음을 언급함
     * Kagi의 품질 평가 방법론에 대한 관심을 표명함. Kagi 사용자가 Kagi를 좋아하는 경향이 있어 편향이 있을 수 있음을 지적함
     * Google Translate와 Bing이 독일어 ""Orgel""을 번역하는 데 어려움을 겪는 반면, Kagi Translate는 정확하게 번역함
     * Pig Latin으로 입력 시 Kagi는 영어로 인식하지만 올바르게 번역함. Bing은 변경하지 않고, Google은 텔루구어로 인식하여 잘못된 번역을 제공함
     * 페이지 번역기가 iframe을 사용하려고 하여 보안 설정으로 인해 페이지가 표시되지 않음을 언급함. 브라우저 확장 프로그램을 사용하는 이유로 설명함
     * 번역 품질 비교를 위한 지표가 있는지 궁금해함. BLEU 점수와 같은 지표를 사용하여 비교하는 것이 필요하다고 언급함
     * Kagi가 DeepL보다 더 많은 언어를 지원하고 더 나은 번역을 제공한다는 주장에 대해 의문을 제기함
"
"https://news.hada.io/topic?id=17732","Postgres에 대해 누군가가 알려주었으면 하는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Postgres에 대해 누군가가 알려주었으면 하는 것

  Postgres에 대해 알았으면 좋았을 것들

     * Postgres 문서의 방대함: Postgres의 공식 문서는 매우 훌륭하지만, 그 양이 방대하여 초급 엔지니어가 처음부터 끝까지 읽기 어렵다는 점이 있음.

  데이터 정규화

     * 데이터 정규화: 데이터베이스 스키마에서 중복 데이터를 제거하는 과정임. 예를 들어, documents 테이블에 user_email 열을 두지 않고, users 테이블과 외래 키로 연결하는 것이 좋음.
     * 비정규화의 필요성: 특정 데이터를 더 빠르게 읽기 위해 비정규화가 필요할 때도 있음. 그러나 비정규화된 데이터는 데이터 불일치나 쓰기 복잡성 증가의 비용이 따름.

  Postgres 제작자의 조언 따르기

     * Postgres Wiki의 ""하지 말아야 할 것들"": 공식 Postgres Wiki에는 ""하지 말아야 할 것들"" 목록이 있음. 이해하지 못하더라도 실수를 피할 수 있음.
     * 추천 사항: 모든 텍스트 저장에 text 타입 사용, 모든 타임스탬프 저장에 timestampz/time with time zone 타입 사용, 테이블 이름은 snake_case로 작성.

  일반적인 SQL 특이점

     * SQL 대소문자 구분 없음: SQL 키워드는 대소문자를 구분하지 않음. 이는 Postgres에만 국한되지 않음.
     * NULL의 특이성: SQL의 NULL은 ""알 수 없음""을 의미하며, 대부분의 연산자와 결합 시 결과가 NULL이 됨. IS NULL, IS NOT NULL 등의 연산자를 사용하여 NULL을 비교할 수 있음.

  psql을 더 유용하게 만들기

     * 출력 가독성 향상: 터미널 페이저를 사용하여 긴 출력이 잘 보이도록 설정 가능. less를 페이저로 설정할 수 있음.
     * 모호한 NULL 명확화: psql에서 NULL을 나타내는 문자열을 설정하여 출력에서 NULL을 명확히 할 수 있음.
     * 자동 완성 사용: psql은 자동 완성을 지원하여 SQL 키워드나 테이블 이름을 쉽게 입력할 수 있음.

  인덱스 추가의 효과

     * 인덱스의 정의: 인덱스는 데이터를 빠르게 조회할 수 있도록 도와주는 데이터 구조임.
     * 인덱스의 한계: 로컬 데이터베이스에 행이 거의 없는 경우 인덱스가 유용하지 않을 수 있음. 여러 열을 인덱싱할 때는 순서가 중요함.

  JSONB의 활용

     * JSONB의 장점과 단점: Postgres는 JSON을 효율적으로 저장하고 쿼리할 수 있는 기능을 제공하지만, 잘못 사용하면 성능이 저하될 수 있음.
     * JSONB의 구조적 한계: JSONB 열은 구조에 대한 보장이 없어, 표준 테이블 스키마만큼 자체 문서화되지 않음.

  기타 유용한 팁

     * 긴 트랜잭션의 문제점: 트랜잭션이 너무 오래 지속되면 다른 클라이언트가 데이터베이스에 접근하는 것을 방해할 수 있음.
     * Postgres의 강력한 기능: Postgres는 문서 지향 데이터베이스의 강점을 제공하며, JSONB를 통해 효율적으로 데이터를 저장하고 쿼리할 수 있음.

   하지 말아야할 것 언젠가 한번 읽어봐야겠어요

        Hacker News 의견

     * Postgres는 대소문자를 구분하지만, 쿼리에서 키워드를 대문자로 작성하는 것은 가독성을 높이기 위한 것임. 이는 필수는 아니지만, 디버깅 시 쿼리를 보기 쉽게 변환하는 것이 유용함
          + 다른 언어에서의 코드 정리와 유사하게, 일관된 들여쓰기 등은 이해 시간을 줄여주어 중요한 부분에 집중할 수 있게 해줌
          + ""actuallyUsingCaseInIdentifiers""와 같은 식별자에 대문자를 사용하는 것은 피하고 싶음
     * ""Don't Do This"" 위키 항목을 처음 발견했는데 매우 유용함
     * 많은 내용이 Postgres에 국한되지 않음 (예: null의 특이성, 인덱스 컬럼 순서 등)
          + 예를 들어, null이 인덱스 및 고유 제약 조건과 상호작용하는 방식은 MySQL에서도 직관적이지 않음
          + 사용자 테이블에 null이 허용되지 않는 이메일 컬럼과 null이 허용되는 사용자 이름 컬럼이 있을 때, (email, username)과 같은 고유 제약 조건이 있으면 동일한 이메일을 null 사용자 이름과 함께 여러 번 삽입할 수 있음
     * 데이터를 정규화하라는 조언은 신중히 접근해야 함
          + 저자는 10가지 다른 정규화 유형을 언급했지만, 대부분의 사람들은 그 중 7가지를 사용할 필요가 없음
     * 개발자들이 정규화에 더 신경 쓰고 JSON(b) 컬럼에 모든 것을 넣는 것을 멈추길 바람
     * ""여정""이라는 단어는 과도한 사용으로 인해 블로그에서 불쾌하게 느껴짐
     * 코드 섹션이 모바일에서 거의 스크롤할 수 없을 정도로 불편함
     * JSON 스펙에서 'null'은 상수 값이며, SQL의 NULL과 다름
     * 인덱스를 추가해도 아무런 효과가 없을 수 있음
          + Postgres의 이념이 너무 강하거나 이해하기 어려운 부분이 있음
          + 향후 버전에서 힌트 지원이 추가될 가능성이 있어 기대됨
     * 이러한 기사를 읽고 90%를 이해할 수 있어 자신이 맡았던 직무에 대한 자부심을 느끼게 됨
"
"https://news.hada.io/topic?id

     * 2009년부터 2012년까지 Apple의 iPhone과 iPod Touch는 ""Send to YouTube"" 기능을 통해 사진 앱에서 YouTube로 직접 비디오를 업로드할 수 있었음
          + 이 기능 덕분에 2009년 상반기 동안 YouTube의 비디오 업로드가 1700% 증가했음
          + 그러나 2012년 Apple이 YouTube와의 관계를 끊으면서 이 기능은 사라졌음
     * IMG_XXXX 비디오의 독특함
          + iOS 기기는 이미지와 비디오에 'IMG_XXXX'라는 이름을 붙임
          + 많은 사용자가 이 이름으로 YouTube에 비디오를 업로드했으며, 이는 검색하기 어려운 이름이었음
          + 이러한 비디오는 편집되지 않았고, 대중을 위한 것이 아니었으며, 실수로 업로드된 경우가 많았음
          + YouTube는 유해한 콘텐츠를 자동으로 제거하므로 남아 있는 비디오는 독특하고 무해한 상태로 존재함
          + 'IMG_XXXX'를 검색하면 가장 진정성 있는 소셜 피드를 볼 수 있음
     * 발견된 비디오들
          + IMG_0416 (2015년 3월 17일)
               o 한 여성이 자신이 출판한 책을 언박싱하는 모습
               o 책은 ""A Profit / Prophet to Her Husband: Are you ready to be a wife?""라는 제목이며, Amazon에서 30개의 평가를 받았음
               o 그녀는 2020년에 두 번째 책도 출판했음
          + IMG_0416.MOV (2015년 6월 24일)
               o 여성이 카드 게임을 하며 포타시움에 대해 배우는 모습
               o 포타시는 식물 비료로 사용되는 칼륨이 많은 광물이며, 캐나다가 세계 최대의 매장량을 보유하고 있음
          + IMG_0416 (2011년 2월 8일)
               o 젊은 남성이 설탕 가루를 흡입하고 그 결과를 겪는 모습
               o 보스턴의 특색을 잘 보여주는 비디오로, 참여자들 간의 웃음이 인상적임
          + IMG_0417 (2014년 3월 14일)
               o 여성이 파트너에게 임신 사실을 알리는 순간을 촬영한 비디오
               o 이 비디오는 Hackernews에 게시된 후 댓글을 받았으며, 가족이 이 비디오를 자녀와 공유할 수 있기를 바람

        Hacker News 의견

     * 웹사이트 Astronaut.io는 최근 비디오를 보여주는 사이트로, iPhone뿐만 아니라 다양한 기기에서 업로드된 비디오를 제공함. 이 비디오는 최근 일주일 내에 YouTube에 업로드된 것으로, 거의 조회수가 없는 미편집 비디오임.
          + 예를 들어, 말레이시아의 학교 연주회에서 에콰도르의 생일 파티로 이동하는 경험을 할 수 있음. 놀라운 경험임.
     * 게시자는 자신의 첫 Hacker News 게시물에 대한 따뜻한 반응에 감사함.
          + 게시 후 몇 시간 만에 임신 소식을 전하는 여성의 감동적인 비디오를 발견했으며, 조회수는 16회에 불과했음.
          + 이 비디오는 10년 전에 게시되었으며, 가족이 이 비디오의 존재를 알고 있는지 궁금해함.
     * 최근 소셜 미디어의 콘텐츠는 지나치게 편집되고 상업화된 느낌이 있음.
          + TikTok이나 Instagram에서는 무한한 콘텐츠가 있지만, 모든 것이 여러 번 편집된 느낌이 들며, 사람들이 자신의 브랜드를 만들려고 노력하는 것 같음.
          + 예전의 재미가 사라진 것 같아 아쉬움.
          + YouTube에서 ""X 도시 1990년대/2000년대""를 검색해보기를 추천함. 샌프란시스코, 도쿄, 홍콩, 토론토, 런던 등의 일상 콘텐츠가 흥미로움.
     * 이러한 비디오의 날것의 느낌을 좋아함.
          + 다른 사람들이 나와 전혀 다른 삶을 살고 있는 것처럼 느껴질 때가 많음.
          + 이러한 작은 순간들을 보면 조금 더 인간적으로 느껴짐.
          + 소셜 미디어에서는 이러한 큐레이션이 어렵다고 느껴짐.
     * ""Webcam video from""이라는 파일 이름이 붙은 비디오에 대한 언급이 없다는 점에 놀람.
          + 웹캠 레코더로 만들어진 무제 비디오에 붙었던 이름임.
     * /r/DeepIntoYouTube 중독자는 다양한 카메라의 기본 번호 체계를 기반으로 조회수가 거의 없는 기이한 YouTube 비디오를 찾을 수 있는 패턴이 많다고 설명함.
          + 예를 들어, MVI_7812.MOV 같은 검색어로 수천 개의 번호를 검색할 수 있음.
     * Raspberry Pi와 작은 HDMI 화면을 사용하여 24/7 무작위로 이러한 비디오를 재생했던 경험을 공유함.
          + YouTube-dl과 레거시 검색 API 사용으로 인해 유지가 어려웠음.
          + IMG_와 같은 카메라 접두사를 검색했으며, 이를 다시 만들면 재미있을 것 같음.
     * Stable Diffusion/Flux 커뮤니티에서는 IMG_0416 같은 사진 ID를 포함하면 더 현실적인 사진을 얻을 수 있다는 소문이 있었음.
     * 이러한 비디오가 공개되었음을 이해하지만, 여전히 사람들의 사생활을 침해하는 것처럼 느껴짐.
          + 대부분의 사람들은 10년 후에 개인 비디오가 공개될 것을 의도하지 않았을 것임.
"
"https://news.hada.io/topic?id=17703","브라우저에서 폼 디자이너와 IDE를 포함한 C#로 재구축된 Visual Basic 6","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            브라우저에서 폼 디자이너와 IDE를 포함한 C#로 재구축된 Visual Basic 6

        Hacker News 의견

     * Figma가 UI에 행동을 추가할 수 있다면 더 나아질 것이라는 의견이 있음. 과거에는 Flash에서 HTML 5로 전환되었지만, 창의적인 작업이 줄어들었음. Visual Basic, Delphi, Borland JBuilder 같은 간단한 애플리케이션 빌더가 있었고, 웹에서는 Dreamweaver, Frontpage 등이 있었음. 그러나 이러한 도구들의 완벽한 대체품은 없었음. 현재는 Figma에서 디자인한 것을 개발팀이 처음부터 다시 구현하는 비효율적인 과정이 있음
     * Delphi와 같은 도구가 다시 등장하면 개발 상태에 대해 만족할 것이라는 의견이 있음. GitHub의 AvaloniaVisualBasic6 프로젝트를 언급함
     * Lazarus에 대해 알고 있으며, 브라우저에서 작동하는 현대적인 버전을 원함. .NET이 그에 적합할 것 같음. PascalABC.NET을 기반으로 할 수 있을 것이라고 생각함
     * Pascal/Lazarus와 Common Lisp 프로그래밍을 여전히 즐기고 있으며, 현재의 도구들보다 더 생산적이라고 느끼고 있음
     * 90년대 후반과 2000년대 초반에 VB5/6에서 매우 생산적이었으며, 다양한 유틸리티 앱을 쉽게 만들 수 있었음. VB.NET으로의 전환은 동일하지 않았음
     * 과거의 프로그래밍 도구들이 그리움. 현대에는 많은 노코드 또는 로우코드 도구들이 있지만, VB가 했던 것이 여전히 최고라고 생각함
     * VB6가 소프트웨어 개발에 입문하게 만든 도구였으며, 과거를 회상하게 해줘서 감사하다는 의견이 있음
     * 과거의 IDE들은 라인별 디버거가 있었지만, 현재의 Angular/React 애플리케이션은 여전히 혼란스러운 문법을 가지고 있음
     * GitHub에서 클래식 Win9x UI 라이브러리를 유지 관리하는 것을 발견하고, 이를 사용해 앱을 만들어보고 싶다는 의견이 있음
     * 작은 버그 리포트가 있음. 버튼을 추가하고 코드 창을 열어 간단한 코드를 추가했으나, 프로젝트를 저장하거나 실행해야 코드가 업데이트됨. 이전 VB IDE와의 차이점임
     * 2024년에도 VB6 프로젝트를 유지하고 있음. 스웨덴의 알루미늄 금속 회사가 VB6로 중앙 프로그램을 통해 모든 기계를 제어하고 있음. 오프라인 애플리케이션으로 SAP와 텍스트 파일을 교환함
     * 22년 전의 과제를 실행할 수 있을지 확인해보고 싶다는 의견이 있음. 소스가 Word 문서에 있으며, Git 이전의 것이기 때문에 원본 소스 파일이 없음
"
"https://news.hada.io/topic?id=17620","Java를 사용한 T-50 항공전자 내장형 소프트웨어 개발 - 한국항공우주산업(KAI)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Java를 사용한 T-50 항공전자 내장형 소프트웨어 개발 - 한국항공우주산업(KAI)

   2011년 ISET (International Symposium of Embedded Technology)에서 발표된 자료입니다.

   T-50의 항공전자 시스템 SW를 Real-time Java 스펙을 구현한 JVM인 JamaicaVM 위에 구현였고, 속도와 크기에 대한 이슈가 있었으나 최적화를 통하여 해결하였고 이를 통해 Java가 Hard Real-Time, Safety-Critical 시스템에 사용될 수 있음을 보였습니다.

   내용이 영문이지만 보기 쉬운 슬라이드로 되어있어 개요 외에는 따로 번역/요약하지 않았습니다.


   T-50의 핵심 항공 전자 시스템과 소프트웨어를 현지화하기 위한 정부 지원 프로젝트. Operational Flight Program이라고 불리는 임무 소프트웨어는 Real-time Java를 사용하여 개발되었습니다. 이 프레젠테이션은 Java를 선택하게 된 경위와 Java에 적응하기 위해 개발 초기 단계에서 수행한 작업을 보여줍니다.

   최근까지 임베디드 시스템에서 JavaScript를 지원하는 작업을 꽤나 오래 잡고 있었는데, 언어만 다르지 같은 고민을 가지고 있는 부분이 꽤 있어 흥미롭네요. 좋은 자료 공유 감사합니다.

   2012년 글이네요. C/C++ 선택하지 않은 이유가 보안이슈면 지금이였으면 선택이 많이 달라졌을수도 있을것 같아요

   아마 안 바꼈을거에요. 항공쪽은 선택의 여지가 없어보이거든요...
   2020년의 인터뷰에 따르면 KF-21도 C++로 개발하고 있다고 합니다.
   미국도 F-22까지 Ada를 썼고 JSF 사업 때 C++로 전환했죠.
   Ada는 요즘 개발자 구하기 힘들테고(그렇지만 레거시 코드가 잔뜩 남아있죠. 보잉 코리아는 아직도 Ada 개발자 채용공고가 한번씩 나옵니다.) Rust는 이제서야 인증된 도구가 하나씩 나오기 시작하는지라...

   20~30년 뒤에 KF-21 다음 세대 전투기를 개발할때는 바뀔지도 모르겠습니다.

   진찌 그 비행기 T-50 이네요

   넵 진짜로 그 비행기 T-50입니다 ㅎㅎ
"
"https://news.hada.io/topic?id=17683","Project Subway NYC - 뉴욕 지하철역 설계도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Project Subway NYC - 뉴욕 지하철역 설계도

     * Project Subway NYC는 뉴욕 지하철 역사에 대한 스케치, 사진, 건축 도면 모음집
     * 이 프로젝트는 특히 역사 자체에 초점을 맞춤 - 표지판, 계단, 개찰구, 터널, 플랫폼, 에스컬레이터, 그리고 공간 등 거리와 기차 사이의 모든 것
     * 오늘날 압도적인 양의 정보가 있음에도 불구하고, 역사의 3차원 표현은 존재하지 않음

프로젝트의 발전

     * 처음에는 도시가 사용할 수 있는 것이라고 생각해 역사를 문서화하는 것에 도전
     * 프로젝트가 발전하면서, 단순하고 기계적인 측량 및 제도 연습에서 점차 관찰, 발견 및 즐거움의 여정으로 변모

프로젝트의 목표

     * 도면을 통해 이 거대한 미로에서 길 찾기를 조금 더 쉽게 만들기를 희망
     * 프로젝트 전체가 세계에서 가장 역동적인 도시 중 하나의 지하에 있는 이 신비로운 세계에 대한 새로운 관점, 새로운 이해 방식, 그리고 아마도 새로 발견된 감정을 줄 수 있기를 희망 (2015년 8월 작성)

        Hacker News 의견

     * 세계 여러 도시의 지하철역을 렌더링한 사이트가 있으며, 많은 시스템이 포함되어 있음
          + 링크
     * 모바일(iOS)에서 사진 확대 기능을 방해하지 말라는 의견이 있음
     * Exit Strategy라는 앱은 기차에서 최적의 위치를 알려주는 기능이 있었음
     * 런던 지하철의 3D 지도가 제공되는 사이트가 있음
          + 링크
     * 파리 지하철의 상세한 트랙 맵을 제공하는 사이트가 있으며, 미국은 잘 다루어지지 않음
          + 링크
     * 일부 지도는 정확하지 않음. 예를 들어, Fulton St Station의 J/Z 플랫폼은 서로 다른 층에 있음
     * Centre Street에서 Q 플랫폼에 잘못 탑승한 경험이 있으며, Canal Street 역의 Escher 계단이 이를 확인해 줌
          + 이미지 링크
     * 렌더링에서 계단/에스컬레이터가 매우 가파르게 보이는 이유에 대한 질문이 있음
     * 토론토 TTC 지하철역의 출구/계단 위치를 미리 파악할 수 있는 아이디어가 있음
          + 링크
          + iOS 앱: 링크
          + Android 앱: 링크
     * NYC 도시 계획자에게 MTA 역 레이아웃을 공개하지 않는 이유를 물었을 때, 테러리스트 우려 때문이라는 답변을 받았음. 그러나 도시에서 이를 얻는 것은 가능함
"
"https://news.hada.io/topic?id=17716","I dont have Spotify - Spotify 링크를 다른 스트리밍 서비스로 변환 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           I dont have Spotify - Spotify 링크를 다른 스트리밍 서비스로 변환

     * Spotify가 없는 사람들을 위한 URL 변환기
     * 제공하는 어댑터들
          + Spotify: 공식 API 사용 가능, 역방향 검색 가능, 링크 검증 Yes
          + Youtube Music: 공식 API 사용 가능, 역방향 검색 불가, 링크 검증 Yes
          + Apple Music: 공식 API 사용 가능, 역방향 검색 불가, 링크 검증 Yes
          + Deezer: 공식 API 사용 가능, 역방향 검색 가능, 링크 검증 Yes
          + SoundCloud: 공식 API 사용 가능, 역방향 검색 불가, 링크 검증 Yes
          + Tidal: 공식 API 사용 불가, 역방향 검색 불가, 링크 검증 No

        Hacker News 의견

     * README 파일이 더 설명적일 필요가 있음. 프로젝트의 목적과 대상에 대한 정보가 부족함
          + Spotify를 사용하지 않아서 프로젝트의 목적을 추측하기 어려웠음
     * TuneMyMusic라는 웹사이트가 Spotify 및 다른 플랫폼의 재생목록을 전송할 수 있음
          + 링크 공유: TuneMyMusic
     * Chrome 확장 프로그램을 만들어 다른 음악 서비스로 자동 리디렉션 가능함
          + 예: Slack에서 Spotify 링크를 클릭하면 YouTube Music으로 리디렉션됨
          + 링크: Chrome Web Store
     * Spotify에서 음악이 사라지는 것을 경험하고 음악을 직접 구매하고 저장하고 싶음
          + 현대 음악을 구매하기 어려움. 대부분 스트리밍 플랫폼에서만 제공됨
     * YouTube Music에서 노래 매칭이 제대로 작동하지 않음
          + Kanye West의 ""Two Words""와 ""Never Let Me Down""이 다른 아티스트의 곡으로 매칭됨
     * Odesli.co를 사용하여 다양한 음악 제공자의 링크를 생성할 수 있음
          + 아티스트, 앨범, 노래별로 작동함
          + 사용자 계정을 만들어 URL을 커스터마이즈 가능함
     * Spotify 링크를 자주 받아서 이 서비스가 유용함
          + 실제 서비스 페이지로의 링크가 더 좋음: idonthavespotify
          + Firefox 확장 프로그램으로도 제공되면 좋겠음
     * Discord 음악 봇을 유지보수할 때 YouTube에서 스트리밍했음
          + Spotify URL을 YouTube 검색에 포함시키면 공식 비디오를 찾는 데 도움이 됨
     * 이 사이트가 PWA로 Chrome API를 지원하면 좋겠음
          + Android에서 직접 공유 가능하도록
          + 회사가 모든 지적 재산권을 소유하고 있어서 예외를 받는 데 시간이 걸림
     * 제출물에 감사하며, Show HN으로 게시할지 제안함
"
"https://news.hada.io/topic?id=17650","돈으로 행복을 살 수 있다고 데이터가 말합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       돈으로 행복을 살 수 있다고 데이터가 말합니다.

     * 돈 많을수록 행복 더 높아진다는 연구 결과
     * 소득이 오르면 삶의 만족도도 쭉쭉 상승
     * 중산층에서 초고소득층 갈수록 행복감 차이 확연
     * 연 8만 달러 넘는 소득도 행복 계속 증가
     * 돈 많을수록 일상에서 느끼는 행복감도 커짐
     * 부자일수록 ‘행복 정체’ 없이 만족도 높음
     * 실시간 행복 데이터, 부와 행복의 관계 입증
     * 초고소득층의 행복이 일반인보다 확연히 높음
     * 돈이 장기적 행복과 자유 보장 가능성 시사
     * ""돈 따라가라, 그게 행복의 열쇠""

   전반적으로 삶의 질 = 행복 이라는 관점인 것 같네요.
   자본주의 사회에서 돈이 삶의 질과 비례한다는 건 너무 당연한 이야기인 것 같습니다.
   저는 이런 연구들을 볼 때, 자본주의를 더 강하게 만드는 마케팅같은 느낌을 받습니다.
   결론에 도달해서 '돈과 행복(삶의 질)은 비례합니다' 라는 주장이 '돈이 곧 행복입니다' 로 확대되는 건 좀 아쉽네요.

   헉!!

   그저 당연하다고 생각했던 이야기를 잘 정리된 글로 읽는 것도 재밌네요.

   http://archive.today/j1yp7
   제목 어디에도 bullsh#t이나 cr#p 같은 단어는 없는데 왜 제목이 원문과 다른가요? 쌍따옴표로 인용할때는 인물이 직접 발언하거나 사용한 표현을 그대로 사용해야 합니다. 제목을 마음대로 바꾸시는 건 인터넷 기사식 자극적인 제목 짓기 내지는 클릭 유도로 보입니다

   원문의 타이틀로 변경되었습니다.
"
"https://news.hada.io/topic?id=17617","To GN: GeekNight 2024 참석자 등록 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    To GN: GeekNight 2024 참석자 등록 시작

   긱뉴스 사용자들의 첫번째 밋업, GeekNight 가 ""라이프 해킹 - 즐거운 삶을 위하여"" 주제로 열립니다.

   사이드 프로젝트나 새로운 비즈니스/아이디어 또는 내 삶을 풍요롭게 하는 것들에 대해 이야기합니다.
   다른 사람들의 경험도 듣고, 다양한 생각들을 나누는 자리입니다.

   이번 밋업은 긱뉴스 이야기 + 라이트닝 토크 + 네트워킹으로 진행됩니다.

GeekNight 2024 일정

   • 일시 : 12. 12 (목) 7:00 PM - 10:00 PM (3시간)
   • 장소 : 서울시 마포구 공덕동 마포T타운 5층 해피홀

라이트닝 토크 리스트

   • 주식은 로봇이 해주고, 저는 놀고만 싶습니다 - dsp
   • 인지과학 연구로 증명된 학습 보조 도구 Anki: 10배 더 효과적으로 활용하는 방법 - 배휘동
   • Notion에서 Google Docs로 돌아가는 이야기 - 김수빈
   • GTD와 Inbox 그리고 생산성 시스템의 함정 (부제: 우리 모두는 J가 될 수 없다.) - 데이브
   • 5분이면 저보다 창업 잘하는 개발자가 됩니다: 개발자 대표 창업기 - nurinamu
   • 50대 개발자들의 커리어 해킹: 임원, 괴수, 스타트업 그리고 새로운 출발점 - 524
   • 신생 개발팀의 AI 기술 활용법: 생성형 AI와 함께 성장하기 - popenaga
   • 테니스에 미친 개발자가 테니스 다이어리 앱을 만들기까지 - 박시형
   • Cursor와 Expo로 고통없이 앱 만들기 - sungchi
   • 5년 동안 집에서 서버를 운영한 썰 - K리그 프로그래머
   • 운영비 0원, 글로벌 수익형 AI 서비스 제작기 - 조코딩

GeekNight 2024 참가자 선정 진행 방식

   11월 12일까지 참가 신청을 해주세요.
   신청이 끝난 후 추첨 룰에 따라서 참가자 70명을 추첨합니다.
   당첨자에게는 참여 정보 입력폼이 메일로 발송되며, 정보 입력을 해주셔야만 참가 신청이 완료됩니다.

추첨 룰

   가중치를 이용한 추첨 방식으로, 긱뉴스에 기여도가 높은 사용자 및 사전 조사 등록자에 가점이 부여됩니다.
   또한, 참가 신청 날짜에 따라 가점이 차등 부여됩니다.

   • 긱뉴스 기여도는 GeekNews 의 Karma 를 기준으로 합니다.
     - 사용자 정보 페이지 (https://news.hada.io/user?id=아이디) 에서 확인 가능합니다.

   • 신청 일자별 가중치
     - 사전 설문 조사에 참여한 경우 신청 페이지가 빨리 공개됩니다.
     - 또한 일주일 등록 기간 중 먼저 신청할수록 가점이 높습니다.

안내

   • 상황에 따라 행사 내용은 변경될 수 있습니다.
   • 주차는 지원되지 않습니다.
   • 와이파이가 제공되지 않습니다.

   [ GeekNight 2024 참석 신청 하러 가기 ]

   오늘이네용... 확정되신분들 부럽습니다ㅠㅠ 리뷰 적어주세요ㅜㅜ

   네트워킹을 부담스러워 하는 타입이지만 이번 GeekNight밋업은 특유의 동질감(?) 있는 분위기 덕분에 편안했습니다. 한줄소개로 시작해서 어색함도 금방 풀렸고요. 라이트닝 토크도 재밌는 주제들이 많아 모두가 집중해서 들었던 것 같아요.
   다음 모임에서는 꼭 뵙길 기대하겠습니다 😊

   으 다 너무 재밌어보이는 리스트라 탐나네요ㅜㅜ 다음엔 꼭....

   앗 메일이 안왔는데 저는 떨어졌나보군요.

   festa.io 에 등록하신 메일로 당첨/비당첨 여부와 상관없이 모두 메일이 발송되었는데요.
   혹시 festa에 등록된 메일이 맞는지 확인 부탁드립니다.

   역시 저의 운은 ... OMG
   추첨만 하면 다 떨어지네요 :)

   참석 기회 주셔서 감사합니다! 너무 기대 되네요!

   흑흑.. 다음 기회에 ㅠ

   대박!!! 당첨이라니! 즐거운 마음으로 기다리겠습니다.

   추첨 끝났나요? 연락을 너무나 받고싶어서 계속 확인중이에요 ㅠㅠ

   메일 30분 전쯤에 왔습니다! 확인해보세요. 당첨 여부와 관계없이 온 것 같습니다.

   듣고 싶은 주제가 많네요. 영상이나 음성 공유를 해주시면 감사하겠습니다.
   좋은 내용들 공유해주셔서 감사드립니다.

   메일링은 하고있었는데 이제야 가입하네요. 카르마가 1이라 너무 안타깝습니다.

   참석은 못하지만 녹화본이라도 공유 되면 너무 좋을것같네요

   흥미로운 주제가 너무 많네요.
   일정이 안되어 참석신청은 못하지만 추후 행사내용을 볼 수 있다면 너무 좋을 것 같아요.

   뉴스레터 항상 열심히 보고 있었습니다! 참석 신청하였습니다

   기여도라니 .. 앞으로 열심히 해야겠군요

   듣고 싶은 라이트닝 토크가 정말 많은데 카르마가 낮아 너무 아쉽네요;;
   행사 후 영상 공개 예정이신지 궁금합니다.

   가입 안하고 뉴스만 보고 있었네요. ㅎㅎ 가입하고 활동 열심히 해야겠습니다. :(

   저도 이번 기회에 회원가입 신청했습니다. 꾸준히 카르마를 쌓아서 내년에는 꼭 참석하고 싶네요.

   정말 참석하고 싶은 1인은 카르마가 낮아서 웁니다 ㅠㅠ

   너무 재밌겠네요! 당첨 기원합니다

   6일에 열린거 보고 신청했는데 그 때도 이미 2XX..
   내년에는 더 크게 진행되면 좋겠습니다!

   당첨 기원해봅니다

   오 잼있겠습니다. 직접 참여는 힘들것 같고 내용은 궁금하고 그렇네요.

   좋은 행사가 되길 기도합니다

   참석하고 싶은데 막 가입해서 카르마가 너무 낮네요 ㅠㅠ

   신청하려고 가입했습니다.

   오오.. 대박

   비회원으로 보고 있었는데 아쉽다..

   신청은 했는데 당첨되길..

   긱뉴스가... 로그인이 가능한 서비스였군욬ㅋㅋㅋ 덕분에 가입하고 신청합니다ㅋㅋㅋㅋ 다음 GeekNight엔 가야지~

   신청에 참여한 것에 의미를 두어야 겠네요 ㅜㅜ

   늘 눈팅만 해와서 기여도가 없는 관계로 이번엔 참석이 힘들 것 같지만, 이 기회에 회원가입도 하고 첫 댓글도 남겨봅니다. 좋은 행사 되세요!

   헉 이미 참여자 284명.. 이번은 힘들겠네요 ㅠㅠ

   오 조코딩님.. 럴수럴수.. 서울분들 부럽읍니다!

   헉 일단 신청했습니다. 매일매일 슬랙으로 보고있는데 너무 가고싶어요!!!!

   참석하고 싶은데, 거리가 있어서 아쉽네요.
   혹시 발표 내용 실시간 스트리밍 계획은 없으실까요?
   아니면, 발표 자료라도 공유해주시면 좋을 것 같습니다.

   실시간 스트리밍은 어려울 것 같습니다.
   발표 자료는 발표자 분들과 논의해보겠습니다.

   xguru님, 참석 못할 시 특정 발표자분의 이메일 주소라도 알 방법이 있을까요 ??

   감사합니다!

   창업기 너무 듣고싶네요

   기여도가 개미만큼 뿐이지만 일단 신청해 봅니다.

   K리그 프로그래머님 꼭한번 뵙고 싶었는데 가고 싶네요!

   개인적으로 50대 개발자분들의 스토리가 궁금하네요
"
"https://news.hada.io/topic?id=17726","KubeAI - 쿠버네티스 위에서 Private AI 운영하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   KubeAI - 쿠버네티스 위에서 Private AI 운영하기

     * OpenAI와 호환되는 HTTP API 제공
     * 부하에 기반한 자동 스케일링
     * 오픈소스 LLM을 CPU/GPU 기반으로 서빙 가능
     * 제로 의존성(Istio, Knative 등)
     * Chat UI 내장
"
"https://news.hada.io/topic?id=17705","이더넷 패킷 전송 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              이더넷 패킷 전송 사건

     * 이더넷 패킷 전송
          + 저자는 ""Networking from scratch""라는 시리즈를 만들고자 했으며, 마이크로컨트롤러에서 TCP/IP 스택을 구축하는 프로젝트를 시작했음.
          + 이 블로그 글은 첫 이더넷 패킷을 성공적으로 전송한 이야기와 프로젝트에서의 버그 및 디버깅에 대한 경험을 공유함.
     * 마이크로컨트롤러
          + 사용된 마이크로컨트롤러는 STM32F401이며, ARM Cortex-M4 기반으로 최대 84MHz로 동작함.
          + 96KiB의 RAM을 가지고 있어 여러 패킷을 처리할 수 있는 충분한 용량을 제공함.
     * 이더넷
          + 이더넷은 다양한 기술과 표준을 포함하는 개념으로, 물리적 수준의 하드웨어, 신호 형식, 버스 충돌 처리 전략, 프레임 레이아웃 등을 포함함.
          + 이 프로젝트에서는 Wiznet의 W5100 칩을 사용하며, 이 칩은 하드웨어 TCP/IP 스택을 내장하고 있음.
     * 문제 1: 공허 속에서 외치기
          + W5100 칩과의 통신을 위한 드라이버를 작성했으나, SPI 신호가 잘못 연결되어 통신이 이루어지지 않았음.
          + Arduino 쉴드의 ICSP 헤더가 SPI 신호를 잘못 연결하여 문제가 발생했으며, 이를 수정하기 위해 보드를 재작업함.
     * 문제 2: 코미디의 본질
          + SPI 신호가 올바르게 연결된 후에도, 이더넷 패킷 전송이 제대로 이루어지지 않았음.
          + 논리 분석기를 사용하여 디지털 신호를 분석하고, 칩 선택 신호의 타이밍 문제를 해결하여 통신을 성공적으로 수행함.
     * 문제 3: 알 수 없는 패킷
          + Wireshark에서 전송한 패킷이 아닌 잘못된 패킷이 나타났음.
          + Arduino 라이브러리를 참고하여 문제를 분석하고, 잘못된 메모리 주소에 데이터를 기록하는 버그를 수정하여 문제를 해결함.
     * 이야기의 교훈
          + 이더넷 패킷 전송은 작은 성과일 수 있지만, 프로젝트에서의 버그와 디버깅 경험은 가치가 있음.
          + 디버깅과 도구 작성은 개발 과정에서 중요한 부분이며, 탐구와 실험을 통해 시스템을 이해하는 것이 중요함.
          + 프로젝트는 더 높은 추상화 수준의 문제와 버그를 다루며 진행 중임.

        Hacker News 의견

     * 도구를 작성하고 디버깅을 탐색하는 것은 항상 가치가 있음. 그러나 많은 사람들이 이를 이해하지 못하고, 특히 JIRA와 같은 개발 프로세스에서 탐색의 가치를 보지 못하는 경우가 많음.
     * 작은 도구를 만드는 능력은 10배 생산성을 가진 프로그래머의 핵심이며, 이는 종종 그림자 속에서 실천되는 예술임.
     * TCP/IP와 Ethernet 프레임 스택을 마이크로컨트롤러에서 처음부터 구축하는 시리즈의 시작임. W5100 칩을 사용하여 TCP/IP를 처리하고, 사전 구축된 Ethernet 프레임을 지원함.
     * FPGA 엔지니어링으로 경력을 전환하여 Ethernet에 집중하고 있으며, 네트워킹의 추상화를 이해하는 것이 매우 가치가 있었음.
     * STM32F401과 W5100 Ethernet 쉴드를 사용하는 대신 STM32F407 보드와 저렴한 Ethernet PHY 보드를 사용하는 것이 더 나을 것이라는 의견이 있음.
     * Ethernet 기능은 일반적으로 마이크로컨트롤러 내에 내장된 주변 장치로 포함되어 있음.
     * MOSI/MISO의 새로운 명칭인 main out/subordinate in을 처음 봤으며, COPI/CIPO 대안은 잘 이해되지 않음.
     * Linux에서 네트워크 스택을 작성하려면 socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL))를 사용할 수 있음.
     * STM32 Nucleo 보드에는 100Mbps Ethernet이 내장되어 있으며, STM32Cube 소프트웨어는 혼합된 평가를 받지만 작동하는 예제를 제공함.
     * Ethernet은 프레임을 다루며, 패킷은 IP 개념임.
     * ENC28J60 'Stand-Alone Ethernet Controller with SPI Interface'를 고려할 수 있으며, 하드웨어 TCP/IP 스택이 없어 소프트웨어 구현이 필요함.
"
"https://news.hada.io/topic?id=17642","Mozila VPN 한국 서비스 개시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mozila VPN 한국 서비스 개시

   Mozila VPN 이 한국 서비스를 개시했습니다.
     * 클라이언트는 데스크탑, 모바일 모두 지원합니다.
     * 결제는 모바일에서만 가능합니다.
     * 가격은 월 13,500원, 연 79,900원 (50% 프로모션) 입니다.

   지원되는 나라/서버 목록 확인하려고 링크따라 들어가봤더니..
   https://mullvad.net/ko/servers

   mullvad VPN위에 모질라 껍데가만 씌워서 서비스하는건가 싶기도하네요.

   확인해보니 맞군요.
   https://mullvad.net/en/blog/…

   근데 모질라가 더비싼데... 흠.... 전 그냥 원래쓰던 mullvad VPN 그대로 쓸래요.
"
