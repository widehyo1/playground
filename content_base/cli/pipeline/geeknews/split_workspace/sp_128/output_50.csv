"https://news.hada.io/topic?id=6613","CloudFlare 2022년 1분기 DDoS 공격 동향 보고서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CloudFlare 2022년 1분기 DDoS 공격 동향 보고서

   글로벌 클라우드 보안 서비스 회사인 CloudFlare 에서
   2022년 1월과 3월 사이의 DDoS 공격을 분석한 보고서를 발행하였습니다.

   < 주요 특징 요약 >
     * 러시아와 우크라이나
          + 러시아의 주요 타켓은 온라인 미디어 회사
          + 러시아를 공격하는 주요 출발지는 대부분 독일, 미국, 싱가포르, 핀란드, 인도, 네덜란드, 우크라이나 (유의할 점: 트래픽의 발원지를 식별해도 공격자의 위치를 파악하는 것은 또 다는 문제)
          + 우크라이나의 주요 타켓은 방송 미디어와 출판 웹사이트
          + 우크라이나를 공격하는 공격하는 발원지는 더 넓게 분산되어 있어 글로벌 봇넷을 사용한다고 추측해 볼 수 있음. 그렇지만 대부분 미국, 러시아, 독일, 중국, 영국, 태국 이 발원지
     * 랜섬 DDoS 공격
     * 응용 프로그램 계층 (L7) DDoS 공격
     * 네트워크 계층 DDoS 공격
"
"https://news.hada.io/topic?id=6566","구글, 기존 개인 GSuite 사용자용 'No-Cost Legacy G Suite' 버전 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글, 기존 개인 GSuite 사용자용 'No-Cost Legacy G Suite' 버전 추가

     * 올해 초 변경으로 무료로 사용하던 개인들도 모두 유료 플랜으로 업그레이드 해야 했음
     * 새로 'No-Cost Legacy G Suite' 옵션을 추가해서 기존에 무료로 사용하던 개인 사용자의 경우 그대로 이용 가능
     * 커스텀 Gmail 도메인도 계속 사용 가능
     * 이미 유료로 전환했다면 고객지원팀에 요청해서 원복 가능

   저도 유료로 전환했다가 어제 고객지원팀에 문의해서 무료로 전환 신청했습니다. 채팅으로 진행하면 되더군요

   이미 글에도 쓰여 있긴 하지만 ""개인"" 사용자 한정이라는 걸 다시 강조드립니다. 비지니스 관련 기능들은 아직 살아 있어도 사라질 수 있다는 단서가 붙어 있습니다.

   기존 무료 사용자용이고 신규 무료 가입은 안되는거죠?

   네 기존에 이용하고 있는 사람만 대상입니다.

   구글, 'GSuite 무료 에디션' 중단하고 7월 1일부터 비용 청구

   저도 유료버전으로 변경했는데, 고객 지원팀에 문의했더니 원복해준다고 합니다.
   당장 기존 플랜으로 바뀌는건 아니고 개발후 변경된다는데, 그때까지 비용 청구는 안될꺼라고 하네요.
   고객지원팀 문의는 https://support.google.com/a/answer/1047213 참고하셔서 얘기 진행하시면 됩니다.

   혹시 문의 진행 이후로 변경된 사항이 있나요?
   저도 문의를 하고 아래와 유사한 답변을 받았는데, 여전히 business starter 상태로 표시됩니다.

   아 상태 표시는 그대로인데, 비용은 청구가 안되는 방식인듯 합니다. 현재까지는 요

   문의는 영어로 진행해야 하고 상담사가 요런 얘기들을 합니다.

     If you previously were on G Suite legacy free edition and are using Workspace for personal use, you may be eligible for an alternative Workspace experience at no cost. If you choose to self-identify as a non-business user, you'll continue to have access to your custom domain with Gmail and other Workspace Services; you'll retain access to additional Google services such as Google Search, Google Maps, and Youtube; and you'll retain access to your paid content such as movie purchases at Google Play and data stored on Google Workspace. In the future, Google may remove business functionality from this offering such as 24/7 support.

     Please confirm the following statement: I confirm that I use Google Workspace for personal use. I understand, Google may remove business functionality from this offering and transition businesses to Google Workspace.

   그래서 이 내용을 컨펌해주면

     Thank you for choosing! I’ve noted that you are interested in an alternative Workspace experience at no cost. You can continue to enjoy your Google Workspace edition for no cost. You will not be billed for your Google Workspace account for the foreseeable future. No further action is needed at this time.

     There is no tentative date but you will be notified via email by our Product engineer once it is implemented and you may use google Workspace for free while waiting.

   요렇게 얘기하고 종료됩니다.
"
"https://news.hada.io/topic?id=6532","오픈소스를 수익화 하는 법 - Awesome OSS Monetization","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               오픈소스를 수익화 하는 법 - Awesome OSS Monetization

   수익화 방법들의 장단점등을 평가하고, 그 방식으로 운영중인 오픈소스들을 정리

비조건적 펀딩

     * 개인 기부
     * 회사 스폰서
     * 그랜트 및 Stipend

Paid Access

     * 유료 얼리 액세스
     * 유료 커뮤니티 액세스
     * 웹사이트 광고
     * 유료 바이너리

Paid Content

     * 유료 온라인 코스
     * 유료 명명권(Naming Rights)
     * 유료 머천다이즈 또는 책
     * 유료 도구 & 확장
     * 유료 뉴스레터

Paid Licenses

     * 상용 사용시 유료 / 듀얼 라이센싱
     * 유료 프리미엄 버전 / 오픈 코어
     * 브랜드 라이센싱
     * 화이트 라벨 판매

Paid Services

     * 유료 호스팅 / 오픈 SaaS
     * 유료 번들링 / 위젯 Frosting(하드웨어 번들링)
     * 유료 콘텐츠 서비스
     * 유료 데이터 스토리지

Paid Use

     * 유료 사용
     * Kickback from Hoster(호스터에게 리베이트 받기)
     * 유료 언락
     * Telemetry 판매
     * 블록체인 기반 배포

Paid Work

     * 유료 지원(Support)
     * 유료 버그픽스 / 바운티
     * 유료 기능 개발
     * 유료 버전 개발 / 크라우드 펀딩
     * 유료 컨설팅
     * 유료 교육 & 인증
     * 고용

Special Monetization Approaches

     * 벤처 캐피탈 모금
     * 프로젝트 판매

   xguru님은 어디에서 이런 정보를 취득하시나요?

   꽤 많은 뉴스레터와 블로그를 구독합니다. https://xguru.net/2222

   OSS 프로젝트를 하나 해보는게 항상 희망사항이였는데, 제가 생각한 방향은 위 구분에서 Paid Work내요

   평상시에는 내 맘대로 개발하지만, 돈을 지불하면 기능 개발이나 버그 픽스 우선순위를 조절해 보는 형태를 생각했습니다
"
"https://news.hada.io/topic?id=6555","내가 구글을 떠난 이유 : 워크-라이프-밸런스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       내가 구글을 떠난 이유 : 워크-라이프-밸런스

   구글에서 Replit으로 이직한 스캇 케네디의 회고 번역글
     * 꿈의 직장이었던 구글을 떠난 이유는 ""균형"". 왜 불행했던걸까요 ?
       → 인생의 균형을 물이 채워진 세 개의 양동이에 비유하면 '커리어', '신체의 건강', '사회생활/가정생활'
     * 팬데믹으로 세번째가 부서지고, 운동하다 다쳐서 두번째가 부서지고 나서야, 제 첫 번째 양동이도 한참동안 부서져 있었다는 걸 깨달았음
          + 항상 피곤했고
          + 무언가를 만들고 프로젝트를 마무리하는 그 만족감을 정말 그리워했다는 점
          + 끝내 번아웃
     * 작은 곳으로
          + 내가 신나게 맡을 수 있는 역할일 것
          + 세금 내고 공과금 낼 수 있을만큼의 급여
          + Replit 에 대해 내가 품기에 적합한 기대감만큼의, 구글을 떠날 수 있는 만큼의 주식
     * 행복하냐구요? 행복해요. 이론의 여지 없이요.

   도전적인 사람에게는 항상 두근거림이 필요하네요.
"
"https://news.hada.io/topic?id=6576","wp-sqlite - SQLite에서 Wordpress 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  wp-sqlite - SQLite에서 Wordpress 실행하기

     * 서버없이 동작하는 SQLite 의 특성을 활용, DB 설치 필요 없이 바로 워드프레스 설치 및 운영 가능
     * pdo_mysql 활성화 후에 define('DB_FILE', 'wpsqlite.db'); 로 설정 완료
"
"https://news.hada.io/topic?id=6623","WordPress 6.0 "Arturo" 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WordPress 6.0 ""Arturo"" 릴리즈

     * 전세계 42%의 웹사이트가 사용 중인 워드프레스가 메이저 버전 업
     * 향상된 쓰기 경험
          + 여러 블록의 텍스트 선택가능
          + '[[' 입력만으로 최근 글/페이지 선택 가능
          + 블록의 타입을 변경할 때도 스타일 유지
     * 스타일 전환 : 블록 테마가 여러개의 스타일 포함 가능
     * 다양한 템플릿들 추가 : 저자, 날짜, 카테고리, 태그, Taxonomy
     * 디자인 도구들 추가 : 컬러 패널, Border 제어도구, 투명도 레벨..
     * 더 나은 리스트 뷰
     * 성능 및 접근성 개선
     * 그래미를 수상한 라틴 재즈 뮤지션 Arturo O'Farrill 에게 영감을 받음
"
"https://news.hada.io/topic?id=6537","테라?, 루나?, 스테이블 코인? 대체 무슨일?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       테라?, 루나?, 스테이블 코인? 대체 무슨일?

    1. 스테이블코인은 코인계의 예금

     * 미 달러화와 페깅
     * 담보방식의 문제
     * 알고리즘으로 풀어보자

    2. 지난 3일간 테라에 생긴 일

     * 흔들리는 신뢰
     * 이것이 바로 뱅크런
     * Not Stable

    3. 암호화폐에 시스템리스크가 발생하면?

     * 14년전 생겼던 일
     * 비트코인이 2만달러까지 떨어지면?
     * 최후의 대부자는 누구?

   아직도 떨어지고 있어서.. 숫자는 계속 바뀌는 중이네요.
   관련해서 다른 글들도 몇개 읽어보세요. 테라/루나 관련 기사는 더 안올리고 여기 댓글에만 달겠습니다.
     * 코인판의 테라와 루나 상황을 이해해 보자 https://www.clien.net/service/board/park/17249222
     * LUNA-UST에 대해 솔직해져 봅시다 https://xangle.io/research/6278b5a668d4619ff418a512
     * 논란의 중심에 선 루나와 UST 핵심 궁금증 5가지 https://www.coindeskkorea.com/news/articleView.html?idxno=79306

   그날이 오면…(루나 코인 빅쇼트 성공) https://m.blog.naver.com/rudghks669/222724870784
"
"https://news.hada.io/topic?id=6551","Markdoc - 마크다운 기반 문서 저작 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Markdoc - 마크다운 기반 문서 저작 프레임워크

     * 개인용 블로그 부터 대규모 문서 사이트까지 작성 가능한 마크다운 문법 및 툴체인
     * Stripe가 공개용 문서들을 작성하기 위해 만든 markdown-it 기반 오픈소스
     * CommonMark를 확장해서 마크업을 추가
          + Tag
            {% tag %} Content {% /tag %}
            {% if true %}
          + Annotation
            # Header {% #custom-id %}
            # Heading {% .custom-class-name-here %}
"
"https://news.hada.io/topic?id=6628","1972년도 오리지널 Pong 게임은 소스코드 없이 하드웨어 회로로 만들어짐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               1972년도 오리지널 Pong 게임은 소스코드 없이 하드웨어 회로로 만들어짐

     * 아무런 코드도, 심지어 마이크로 프로세서도 없었음
     * 디지털 논리칩과 몇개의 타이머, 그리고 기타 아날로그 부품으로 구현된 회로(Circuit)였음
     * 회로 레벨에서 각 부분의 동작을 시뮬레이션 가능한 웹사이트
          + 클럭 생성기, 네트 그리기, 패들 위치 시키기, 점수 그리기, 공 움직이기, 사운드 처리, 게임 로직..
     * 16장 짜리 전체 회로도(Schematics) PDF 링크
     * FPGA에서 다시 구현해본 것도 27페이지 PDF 링크

   이쯤에서 올려보는 그 시절의 비디오 게임이 등장하는 최첨단 전자음악 뮤비.
   전자음악의 역사에서 유명한 YMO(Yellow Magic Orchestra)의 뮤직비디오입니다.
   https://www.youtube.com/watch?v=Q5KF8hf0MU8
   https://www.youtube.com/watch?v=K3DSwl3gMTc

   게임을 위해서 이야... 굉장했네요

   대박... 대부분 아날로그 회로였다니! 그건 몰랐네요

   Atari 의 원본 회로도를 한장으로 보면 요렇게 생겼습니다.
   https://reddit.com/r/EngineeringPorn/…
"
"https://news.hada.io/topic?id=6630","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   토요일에는 대학 동기들과 이태원에 갔습니다. 마치 낯선 도시를 여행하는 듯한 기분이었네요. 좋았습니다.
   일요일에는 그대가 조국 - 다큐멘터리를 보았습니다.

   이번 주말엔 저도 사전투표.
   토요일엔 방과후 수업 같은거 하는게 있어서 아이를 학교 데려다주고 기다리는 근처 도서관에서 영어공부.
   비 개발자인데, Javascript, Express, React, MongoDB 기반 서비스를 좀 공부하고 있어서 일요일에 시간 된다면 좀 들여다보려고 하는데 잘 될지 모르겠어요.

   지난주에는 일요일에 저나 아이(초등학교5학년)가 시간이 좀 남아서 markdown 좀 가르쳐줬는데, 흥미 있어 해서 좋네요.

   이번 주말에도 역시나 보드게임 모임이 있네요. ㅎ
   주말엔 운동과 함께, 새로 배우려고 하는 에어브러시 관련 도구들 공부를 할 예정입니다.
   유튜브가 참 많은 것을 바꾼듯 합니다. 예전같으면 배우기 어려웠던 것들도 다 영상자료가 있더라고요.

   그리고 사전투표도 해야할 것 같아요!
"
"https://news.hada.io/topic?id=6552","만화로 보는 넷스케이프 창업 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          만화로 보는 넷스케이프 창업 이야기

   안녕하세요.
   저자 직접 소개글입니다. :-) 그동안 눈팅만 하다가 처음 글을 올려봅니다. 앞으로 만화가 업데이트될 때 마다 글을 올려보겠습니다.

   공유한 글은 자유/오픈소스 소프트웨어 대한 만화 중 최근 이야기입니다. 지난 이야기에서는 모자익 브라우저가 어떻게 탄생했는지 이야기했었고, 이번 편에서는 넷스케이프라는 회사가 창업되는 과정을 소개했습니다.

   다음편은 파이어폭스 브라우저의 탄생 과정을 다룰까 합니다.

   의견은 여기에 답글을 올려주시면 감사하겠습니다.

   어릴 적에 그리신 만화를 찾아서 재미있게 읽으면서 꿈을 키웠는데 계속 그려주시니 너무 반갑습니다. 팬이에요!

   다음 편에는 흑화한 빌게이츠가 등장하나요?

   아마 뒷모습만 나올 것 같습니다 :-)

   재밌게 읽었습니다!

   흥미롭네요 다음화도 기대합니다!

   내용을 요약하면,
     * 1994년 4월 모자익 브라우저를 만든 마크 앤드리슨과 핵심 개발자, 그리고 실리콘 그래픽스를 창업했던 짐 클락이 주도로 실리콘 밸리 마운티뷰에 넷스케이프 컴퓨니케이션 회사 창업
     * 6개월만에 바닥 부터 윈도, 맥, 유닉스용 웹브라우저 개발
     * 1994년 12월 15일 넷스케이프 내비게이터(Netscape Navigator)라는 웹 브라우저가 출시
     * 웹 브라우저 시장에서 약 90%의 시장점유율을 차지하는 대성공을 거둔다.
     * 1995년 8월 나스닥 상장. 30억불 가치 회사로 성장
     * 그사이 MS는 MSN계획을 취소하고 모자익 브라우저 소스 코드 기반으로 IE개발하여 윈도95에 1.0버전 추가
"
"https://news.hada.io/topic?id=6589","Spring for GraphQL 1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Spring for GraphQL 1.0 릴리즈

     * Data Fetcher를 위한 어노테이션 기반 프로그래밍 모델
     * 입력 인자의 검증 및 데이터 바인딩
     * 데이터 @Controller 메소드의 어노테이션을 통한 필드 수준 보안
     * HTTP, WebSocket, RSocket 서버 핸들러와 인터셉션, 클라이언트
     * 배치 로딩 지원
"
"https://news.hada.io/topic?id=6578","Terraform v1.2.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Terraform v1.2.0 릴리즈

   신규 기능
     * precondition, postcondition 키워드를 통해 설정값이나 상태에 대한 단언문을 작성할 수 있음
     * replace_triggered_by 를 통해 리소스의 대체 여부를 의존하는 리소스에 따라 결정할 수 있음
     * Terraform-native services로 보낼 인증 키를 TF_TOKEN_으로 시작하는 환경 변수로 지정할 수 있음
     * 실행 계획 (terraform plan)에서 보여주는 ""Changes outside of Terraform"" 부분에서 실제로 실형 계획에 영향이 있는 부분만 보여주도록 함
"
"https://news.hada.io/topic?id=6610","Starlink for RVs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Starlink for RVs

     * 차로 여행하는 사람들을 위한 위성 인터넷 서비스
       → 이동 중이 아닌 정차 중 사용하는 사람들 대상
     * 언제든지 서비스를 일시 중지 및 해제할 수 있고, 1개월 단위로 청구됨
       → 여행 계획에 맞게 사용 가능

   기존 플랜과 차이점은, 월 단위로 일시정지가 가능한 개신 QoS상 우선순위가 낮아서 서비스 퀄리티가 좀 더 떨어진다는 건데, 월 단위 청구라 한달에 1회이상 사용할 꺼면 그냥 기존이 나은 듯 합니다. 저는 기존 스타링크 플랜 그냥 유지하려 합니다.

   구글 Fi 처럼 일 단위로 해주면 좋을텐데 말이죠. (여행 못가서 Fi 계속 중지 상태.. )

   이미 기존 스타링크 안테나(가정용)를 차에 달고 이동하며 쓰는 사람들도 있긴 한데,
   여행용으로 챙겨가서 쓸 수 있는 버전을 별도로 만들었네요.
   한국에선 크게 쓸모 없겠지만, 오지가 많은 미국/호주/유럽 같은 큰 지역을 캠핑카로 여행할 때는 쓸만할 듯

   근데 https://www.starlink.com/map 보니까 한국도 2023년부터 스타링크 서비스 대상 지역이군요.

   처음 봤을 때는 2022년 예상 떠서 그때 예약 했었는데 2023년으로 조용히 바뀌었더라고요. 일론 타임이 여기에도 적용되는 것 같습니다. 재미로 예약했던 터라 실제로 돌아가는 상황(이동 중 사용 어렵고 하늘 뻥 뚫려있어야 하고.. 지상 기지국이 위성 가까이 있어야 오픈해주고..)을 보니 한국에서는 쓸모없겠다 싶어 취소했지만요. ㅎㅎ
"
"https://news.hada.io/topic?id=6509","DFlex - 모든 JS프레임워크를 위한 Drag-n-Drop 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DFlex - 모든 JS프레임워크를 위한 Drag-n-Drop 라이브러리

     * 브라우저 API 호출없이 DOM 탐색
     * DOM 트리를 재정렬 하는 대신 엘리먼트를 변환
     * 드래그앤 드롭에 따른 레이아웃 쉬프트 방지
     * 헤드리스 (조작하는 함수만 있으므로)
     * 이벤트 드리븐 API
     * 각각의 DOM 노드를 개별적으로 타게팅
     * JSON트리를 사용하여 확장 가능
"
"https://news.hada.io/topic?id=6570","틱톡, 미국에서 올해 사용시간으로는 YouTube 앞지를 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   틱톡, 미국에서 올해 사용시간으로는 YouTube 앞지를 것

     * 틱톡에서 스크롤 하며 보내는 시간은 빠르게 늘고 있음
       → 2020년에 페이스북과 인스타그램을 제침. 틱톡 38.6분, 페이스북 34.6분
     * 틱톡은 작년에 3분 비디오를 내놓고 5분으로 출시한 후, 올해는 10분짜리도 도입해서 점점 장편으로 가는 중
     * Z세대의 40% 이상이 틱톡에서 하루 3시간 이상을 보냄. 거의 같은 비율로 Youtube에서도 3시간 이상을 보냄
     * 여러 플랫폼들이 틱톡을 복사하고, 틱톡이 다시 복사중
       → 인스타그램은 Reels, 유튜브는 Shorts로 틱톡을 이겨보려고 함
     * 틱톡은 트위터로 부터 Repost를, Snapchat과 Instagram 에서 Stories를, Twitch로부터 데스크탑 라이브 스트리밍을
     * 틱톡의 점유시간은 올해 1등이 될것이지만, 미국내에서의 광고수익은 아직 유튜브를 뛰어넘지는 못함
       → 아마도 2024년에 넘어설 것으로 예상 : 틱톡 $11.01b > 유튜브 $10.71b
"
"https://news.hada.io/topic?id=6550","Parca - eBPF 기반의 지속적인 CPU/메모리 프로파일러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Parca - eBPF 기반의 지속적인 CPU/메모리 프로파일러

     * 비용 절감 / 성능 향상 / 각종 사고 분석
     * eBPF를 이용해서 매우 적은 오버헤드로 systemd/kubernetes 등 전체 적용 가능
       → C, C++, Rust, Go 등 지원
     * pprof 표준 포맷을 지원해서 다양한 도구와 연동 가능
     * 효율적으로 프로파일 데이터를 저장하고, 검색을 최적화

   프로젝트가 모양새가 잡혀가면서, 스케일이 커지고... 그러면서 성능 분석에 대한 요구가 커지는 마당에 이런 좋은 도구들에 대한 소식을 접하게 되어 반갑네요.
"
"https://news.hada.io/topic?id=6528","DJI, Mini 3 Pro 출시ini 3 Pro 출시

     * 249g, 4K HDR 영상, 48MP RAW 사진, 짐벌이 90° 회전하여 세로촬영 모드 지원, 최대 47분 비행
     * 더 커진 프로펠러, 바디 틸트, 3방향 장애물 감지 시스템, 새로운 짐벌
     * 1/1.3” CMOS 센서 : 듀얼 네이티브 ISO 및 HDR, 2.4μm 픽셀, f/1.7 조리개
     * 1080p/120fps 슬로모션
     * D-Cinelike 컬러 프로필
     * DJI O3 동영상 전송 시스템 : 1080p/30fps 라이브 피드를 최대 12km 까지 전송
     * 930000원 부터(조종기 미포함시 819000)

   사실 집이 서울이면 평상시에 날리는게 거의 불가능한 것 같아서 드론은 쳐다도 보지 않고는 있는데..
   점점 가벼워지고 기능도 좋아지네요.
"
"https://news.hada.io/topic?id=6530","아직도 DBA는 좋은 직업인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           아직도 DBA는 좋은 직업인가요?

   ""IT업계에서 DBA는 사라지고 있는거야?"" 라는 내용으로 HN에 올라온 질문에 대한 답들
     * 난 개발자였다가 DBA가 되었는데, 개발자 시절에 난 DBA한테 필요한 도움을 받지 못했어. 그래서 난 지금 내가 도움을 받으려고 했던 사람이 되려고 하는데..
       → 이제서야 문제를 알았어. 우리 회사엔 딱 2명의 DBA만 있는데 우린 그들 모두에게 내 시간을 할애하는게 불가능해
       → DBA가 되는 것은 개발자들이 만들려고 하는 엔트로피에 대한 끝없는 전투야
       → 데이터 모델은 더 많은 지식과 경험을 가진 사람들이 항상 검증해야 하고, 젊은 개발자들은 가끔 미친 아이디어를 들고 오기도 해(FK를 쓰면 안됩니다! 같은..) 나쁜 아이디어들이 스트리밍처럼 계속 튀어나오는 것 같아
       → 이런 나쁜 아이디어가 실제 구현되어 버리면 실행취소가 어렵고 더 많은 혼돈을 가져오는 경향이 있음 : 중복된 모델링을 회피하기 위해 Matrialised View가 필요하거나, 중복 데이터를 보상하기 위한 이상한 View 등
       → 그러니 답은 ""Yes""야. DBA는 정말 중요해. 물론 회사가 그걸 얼마나 진지하게 받아들이고 개발 프로세스에 참여 하는지 여부에 달려있지만, 만약 그렇지 않다면 엄청난 스트레스를 받게 될 거야
     * 실제로 많은 회사에서는 아웃소싱 되고 있긴 해. 하지만 중요한 비즈니스 데이터를 다루는 안정적인 시스템은 항상 필요해. 데이터를 핸들링하는 것을 배우는 것은 계속 중요할꺼야
       → 또는 그냥 개발자들에게 떠넘겨 지거나..
     * DBA는 필수 롤이고, 점점 더 중요해진다고 생각해. 내 IT경력 25년을 돌아봤을 때, 평범한 개발자들은 데이터 모델링 및 관리에 대해서는 관심도 없고 지식도 많지 않았어
       → 작은 스타트업에서는 찾기 어렵겠지만, 큰 회사에서는 DBA는 필수야. 내 프로젝트에는 2-3명 있고 항상 더 많은 사람을 찾고 있어.
       → 잘못 만들어진 데이터 요청/SQL 이나, 데이터 모델/테이블이 몇배씩 성능에 영향을 미치는지 알면 놀랄꺼야. 또한 특정 인덱스나 튜닝 통계를 추가하면 실행에 얼마나 도움이 되는지도
       → 좋은 DBA를 고용하는 것보다 ""하드웨어가 저렴""하니까 더 좋은 하드웨어를 추가해야 하면 된다는 규모가 있긴 하지만
       → 나는 종종, 경험 많은 개발자들도 1줄짜리 답을 얻기 위해 100억줄을 버퍼로 읽는 SQL을 짜는걸 보게 되더라구(물론 필요할 수도 있겠지만, 대부분 아니야)
     * 니가 데이터를 모델링하고, 데이터 웨어하우스를 구축하고, 스키마를 관리 및 유지보수 하고, 분석가들이 효율적인 SQL을 작성하는 걸 도울수 있다면 ""넌 아주 오래 고용될 수 있을 꺼야"". 그냥 시스템 관리자 관점으로 본다면 SaaS/PaaS 솔루션 때문에 없어지겠지만

   중간에 예로 든것 때문에 Github 는 Foreign Key 를 전혀 사용하지 않습니다 (2016) 글이 생각났어요
"
"https://news.hada.io/topic?id=6607","애플 WWDC22, 6월 6일~10일 온라인 개최","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플 WWDC22, 6월 6일~10일 온라인 개최

   ""Swiftly approaching.""

   iOS 16, watchOS 9, MacBook Air 2022, M2 칩셋, AR/VR 헤드셋 등이 나올꺼라 예상을 하네요.
   전 AR/VR헤드셋은 아직인거 같기는 한데..
"
"https://news.hada.io/topic?id=6614","SLASH 22 - TOSS 개발자 컨퍼런스 6월8일~10일 개최개발자 컨퍼런스 6월8일~10일 개최

     * ""No User, No Technology""
     * 매일 오후 2시 유튜브 라이브로 공개
"
"https://news.hada.io/topic?id=6611","Lotus 1-2-3 for Linux","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Lotus 1-2-3 for Linux

     * 30년된 Lotus의 Unix 버전을 Linux에 이식한 과정을 정리

배경

     * Lotus의 팬이라 기존 DOS버전을 리버스엔지니어링 하여 DosEmu용 디스플레이 드라이버를 만들어서 실행했음
     * 그러나 예전 로터스의 Add-in들은 불가능 했음, LPL 이라고 하는 특수언어로 개발되었고, 컴파일러/SDK가 없음
       → 그 시절 $395나 되는 유료 제품 이었고, 가진 사람을 찾지 못함
     * 그러다 90년대 BBS를 운영하던 SYSOP을 통해서 테이프 백업에서 SDK의 Warez 본을 구함
       → ADK(Add-in Development Kit) for Lotus 1-2-3
     * 그 BBS에는 Lotus 1-2-3 for Unix 의 Warez 버전도 있었음
       → 유명 Unix 오피스 경쟁제품인 SCO Professional 때문에 얼마 팔리지 않아서 잊힌 제품

Lotus 1-2-3 for Unix

     * TD0 라고 하는 80년대에 사용하던 압축 디스크 이미지 포맷으로 구성되어 있었음
     * samdisk 로 raw 디스크 이미지로 변환
     * 디스크 내용중에 1-2-3의 심볼이 포함된 object 파일이 포함되어 있는 것을 발견
       → 90년대 초에는 dlopen()이 많이 쓰이지 않았기 때문에 이런 것이 필요했다고

해킹

     * 이 오브젝트 파일로 인해서 Lotus 1-2-3 내부 구조에 대해 가졌던 많은 의문이 풀렸음
     * 만들고 있던 드라이버가 더 많은 일을 할 수 있게 됨

GNU objcopy

     * 이 오브젝트 파일이 컴파일 되었을 때는 Linux의 첫번째 버전도 출시 되지 않았었음
     * 하지만 objcopy 로 COFF 오브젝트 파일을 ELF로 변환 가능

Porting Problem

  System Calls

     * 첫번째 문제는 Linux 와 UNIX가 같은 시스템 콜 인터페이스를 가지고 있지 않다는 것
     * UNIX는 lcall7 인터페이스를 사용하므로, open() 을 찾아서 glibc로 호출하도록 하기로 함
       → 이 심볼을 undefined로 바꿔버리면 링커가 알아서 하지 않을까?
       → 하지만 objcopy가 그렇게 동작하지는 않아서, 결국엔 강제로 지워주는 coffsyrup 이라는 도구를 작성
     * 호환되지 않는 몇몇 함수들을 objcopy + coffsyrup 으로 모두 변경
       → stat(), times(), uname(), fcntl(), ioctl()

  Licensing

     * 물론 이 소프트웨어는 라이센스 없이는 동작하지 않음
     * 본인은 Lotus 1-2-3 박스도 가지는 정식 소유자고, 32년된 abandoware 이기도 하므로
       아마도 개발자인 Mitch Kapor도 이 라이센스 체크를 패스하는 것을 뭐라고 하지 않을거라 생각
       → (Mitch Kapor 는 Lotus를 개발한 것으로 유명하며, EFF의 공동 창립자 이기도 합니다.)
     * lic_init() 함수에서 LICENSE.000 파일에 날짜와 사용자/시스템 명이 있으면 동작하므로 이렇게 맞춰줘서 패스!

Result

     * 결과적으로 Lotus 1-2-3 가 새 OS(리눅스)로 포팅됨
     * 아직 꼬인 부분이 있지만 100% 사용 가능

   맙소사...이게 머선.. ㅎㄷㄷ

   덕중의 덕은 양덕이라더니.. 정말 그 말이 맞네요..

   와.. 정말 대단한 열정. 전 Lotus는 그렇게 많이 쓰지는 않았고, 주로 멀티플랜을 썼어요
   https://en.wikipedia.org/wiki/Multiplan

   멀티플랜은 한글 버전도 나왔어서 그 시절에 한글이 제대로 지원 되던 것은 이 제품 뿐이었습니다.
   94년에 단종은 되었지만, 국내에선 회사에서 사용중인 데가 많아서 97년 즈음까지 썼던것 같아요.
   멀티플랜단종-도스시대의 종언

   https://www.hellomarket.com/item/162929337

   미개봉 한글 멀티플랜 패키지를 판매하는 게시물을 찾았네요.. 우어..
"
"https://news.hada.io/topic?id=6556","좋은 보스가 사용하는 트릭들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            좋은 보스가 사용하는 트릭들

    1. 좋은 보스는 의견 불일치를 장려. 최고의 답을 찾는 목표를 가진 토론을 환영
       → 나쁜 보스는 당신의 의견을 원하는 것처럼 이야기하지만, 실제로는 그렇지 않음
    2. 좋은 보스는 외부의 적을 만듦. 명분과 초점을 앞세워 조직을 집결시킴
       → 나쁜 보스는 직원들끼리 싸우게 하고, 결과보다 정치 문화를 만듦
    3. 좋은 보스는 마지막에 말함. 그들은 자신의 관점을 형성하기 전에 정보를 빨아들임(스펀지)
       → 나쁜 보스는 미리 정해진 아젠다가 있고, 당신의 의견을 고려하지 않음
    4. 좋은 보스는 모든 성공을 팀의 공으로 돌리고, 실패에 대한 책임을 짐
       → 나쁜 보스는 공로를 가져가고, 잘못되었을 때 당신을 비난할 방법을 찾음
    5. 좋은 보스는 직원의 커리어 여정을 지원함
       → 나쁜 보스는 직원이 떠날 때 소리와 비명을 지름. 그들은 두려움 때문에 직원을 붙잡음
    6. 좋은 보스는 대부분의 시간을 최고 성과자들과 보내고, 최고에 더 많이 베팅함
       → 나쁜 보스는 실적이 저조한 직원을 재활하는데 모든 시간을 할애함
    7. 좋은 보스는 각 직원이 어떻게 다른지 배움. 누군가는 거친 사랑을, 일부는 점수표를, 일부는 부드러운 친절을
       → 나쁜 보스는 모든 사람이 자신과 같이 생각한다고 믿음
    8. 좋은 보스는 성과가 좋지 않은 사람이 그 자리에 머물도록 내버려 두지 않음. 롤을 바꾸거나, 직원이 다음 일을 찾도록 도움
       → 나쁜 보스는 고군분투하는 직원을 비난하고 개선되기를 바람
    9. 좋은 보스는 자신을 대체할 내부 후보자 리스트를 만듦. 훌륭한 직원이 훌륭한 보스가 될 수 있다는 것을 앎
       → 나쁜 보스는 자신의 직업 안정성을 두려워하고, 회사가 자신을 대체하기 힘들게 만듦

    6. 좋은 보스는 대부분의 시간을 최고 성과자들과 보내고, 최고에 더 많이 베팅함
       → 나쁜 보스는 실적이 저조한 직원을 재활하는데 모든 시간을 할애함

   이걸 빼면 대체로 무난하게 동감하게 되네요

   저도 200% 공감요~~~~
"
"https://news.hada.io/topic?id=6596","불경기에 스타트업을 한다는 것 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         불경기에 스타트업을 한다는 것 (번역)

   YC의 폴 그레이엄이 서브프라임 시기인 2008년에 쓴 에세이, ‘Why to start a startup in a bad economy’를 번역
     * 불경기와 스타트업은 별개
     * 스타트업의 흥망성쇠는 결국 창업자의 역량에 달려있음
     * 중요한 문제는 1) 누가 2) 무엇을 하느냐로 정의해야 함
     * 가장 빠르게 성공하는 유일한 방법은 어떻게든 생존하는 것
     * 좋은 문제를 풀려고 하는 좋은 팀이 있다면, 타이밍은 늘 지금

   오히려 불경기때는 대기업을 갔을 인재가 스타트업으로 오는 경우가 많아지니 불경기때 스타트업 하는게 이점이 있다는 글을 본게 생각나네요. (조엘 스폴스키 아니면 폴 그레이엄이 했던말로 기억합니다)
"
"https://news.hada.io/topic?id=6619","Ghost 5.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ghost 5.0 출시

     * 커스텀 프리미엄 티어, 멀티 뉴스레터, 스페셜 오퍼 추가 및 오디언스 세그멘팅, 분석기능 확장
     * 편집기에 커스텀 카드들 추가 : 비디오, 팟캐스트, Gif, 제품, Callout, 헤더, NFT 등
     * 테마 개선 및 새로운 테마 추가 : 뉴스사이트용 Headline 등
     * 관리자 사이트 향상
     * 약 20% 속도 개선및 자원 사용량 22% 감소
     * 프로덕션 스택 : Ubuntu 20 + Node 16 + MySQL8

   아… 백업할 때 쓰던 그 고스트가 아니군요.

   Ghost 3.0 출시 - 2019.08
   Ghost 4.0 출시 - 2021.03
"
"https://news.hada.io/topic?id=6519","Xilem : Rust를 위한 새로운 UI 아키텍처 제안 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Xilem : Rust를 위한 새로운 UI 아키텍처 제안

     * Rust는 성능과 안전성면에서 UI를 구축하는데 매력적이지만, 좋은 아키텍처를 찾는 것이 어려움
     * 다른 언어에서 잘 동작하는 아키텍처들은 일반적으로 Rust에 잘 안 맞음
       → 대부분 Shared mutable state에 의존하며 그것은 Rust에서 잘 쓰이지 않기 때문
     * 그래서 고성능, Reactive, Declarative UI 아키텍처인 Xilem을 제안
       → SwiftUI, Flutter, React 와 비슷하면서도 idiomatic Rust를 지향
     * Xilem은 간단한 선언형 UI인 View tree 기반으로 지속적으로 동기화 하는 방식을 이용
          + 트리는 매우 짧게 존재하며, UI가 업데이트 될때마다 새로운 트리가 생성됨

   Rust 용 Data-first UI 디자인 툴킷인 Druid 를 만들었던 사람의 제안 글이네요.
   꽤 긴글이라 도입부만 옮겨봅니다. 결과물이 나와봐야 알 것 같아요.

   Raph Levien은 사실 Druid만으로 말하기에는 너무 부족한 사람인데... (GPL) Ghostscript 메인테이너, Advogato 블로그 커뮤니티, Inconsolata 글꼴, Xi 편집기 등으로 예전부터 유명합니다.
"
"https://news.hada.io/topic?id=6593","이 달의 CT 스캔 : iPod의 진화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         이 달의 CT 스캔 : iPod의 진화

     * 획기적인 가전제품이었던 iPod를 만들었던 Tony Fadell이 직접 설명
     * 2001년 발표 이후 매년 새로운 세대를 출시하면서 처리,저장소,디스플레이,UI의 빠른 발전으로 2007년 아이폰의 출시를 예상케 했음
          + iPod 클래식 (1세대) : TV리모콘 같았던 MP3플레이어 디자인을 고급진 휠 인터페이스 와 HDD 기반으로 바꿈
          + iPod 클래식 (6세대) : 오리지널 아이팟의 마지막 세대. 이후 나노와 셔플로 대체. 30핀 커넥터. 터치 휠
          + iPod 나노 (1세대) : 첫번째 플래시메모리 iPod. 엄청 빡빡한 내부. 30핀 커넥터는 2012년에 라이트닝으로 교체. 헤드폰 잭은 아이폰7(2017)년에 제거
     * 매달 CT 스캐너로 특정 물품을 상세히 찍어서 공개하는 페이지
     * 스크롤 하면서 물체를 회전시키며 내부를 설명하는 형식

   아카이브에서 기존 것들을 모두 볼 수 있습니다. https://www.scanofthemonth.com/scans
"
"https://news.hada.io/topic?id=6617","기계식 시계는 어떻게 동작하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           기계식 시계는 어떻게 동작하는가

     * 기계식 무브먼트 시계 안의 주요 부품을 하나하나 알기 쉽기 애니메이션과 함께 설명
       → 스프링, 배럴, 이스케이프먼트, 밸런스 휠, 이스케이프 휠, 팔레트 포크, 크라운 휠, 날짜 판..
       → 부품별로 색상을 달리 표현해서 어떻게 연동되는지 이해를 도움
     * 각 애니메이션은 마우스로 스크롤해서 단계별로 동작 관찰 가능

   발명가가 아니라는 점만 빼면 현대판 레오나르도 다빈치 같은 분이네요...

   ㅎㅎ 재미난 표현이네요!

   우와!!

   오 대박!!

   와 내가 뭘보고있는거지..

   Bartosz Ciechanowski 가 운영하는 이 블로그의 예전 아카이브 를 뒤져보면 정말 놀라운데,
   각각의 주제에 관해서 엄청 디테일한 내용까지 훌륭한 애니메이션 및 일러스트와 함께 설명합니다.
     * GPS
     * Naval Architecture (배의 구조)
     * Internal Combustion Engine (내연기관)
     * Cameras and Lenses
     * Earth and Sun
     * Drawing Bézier Curves
     * Color Spaces

   꼭 한번 둘러 보시기 바랍니다.

   시계로 끝이 아니네요.
   참 놀라운 분이십니다.
"
"https://news.hada.io/topic?id=6629","Jack Dorsey, 트위터 이사회에서 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Jack Dorsey, 트위터 이사회에서 사임

     * 작년 가을에 트위터 CEO를 그만두면서 미리 얘기 되었던 것 (2022년 주총에서 임기 만료때까지 남아있기로)
     * 잭은 일런 머스크와 친분이 있으며, 트위터 인수건에서 자신의 2.4% 지분을 넘기기로 논의했었음
     * 그는 창업자가 기술회사를 이끄는 것은 ""심각한 제한과 단일 실패지점(SPOF"") 이라고 얘기한 바 있음

   일런 머스크가 ""Jack off the board"" 라고 트윗 날리니
   잭 도시가 🐎 라고 회신했네요.
   https://twitter.com/elonmusk/status/1529869999803965446
"
"https://news.hada.io/topic?id=6591","RedHat, 쿠버네티스 보안 플랫폼 StackRox를 오픈소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                RedHat, 쿠버네티스 보안 플랫폼 StackRox를 오픈소스로 공개

     * 2021년에 StackRox를 인수해서 Red Hat Advanced Cluster Security for Kubernetes (RHACS) 제품이 됨
     * 이 제품을 StackRox 이름으로 GitHub에 아파치 2.0 라이센스로 공개
     * DevSecOps 자동화 플랫폼
          + Supply Chain / Infrastructure / Workload 보안 제공
     * Go 오픈소스
"
"https://news.hada.io/topic?id=6574","Bud - 풀스택 웹 프레임워크 for Go","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Bud - 풀스택 웹 프레임워크 for Go

     * Go 에코시스템에서의 Ruby On Rails
     * 맥/리눅스 CLI 바이너리 제공(윈도우 예정)
     * 스캐폴드 생성, 개발 서버 실행, 프로덕선 빌드
     * 예제 : 15분만에 해커뉴스 클론 만들기
"
"https://news.hada.io/topic?id=6631","Microsoft Dev Box 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Microsoft Dev Box 공개

     * 개발자를 위한 Azure 가상 데스크탑 서비스
     * 클라우드 상에 개발용 가상 머신을 생성하고 소스 코드 작성부터 테스트 배포까지 가능
     * 개발팀에서는 프로젝트 및 작업에 맞게 Dev Box를 이미지로 만들어 놓고 공유
       → 각종 개발 도구와 어플리케이션 소스 코드로 빌드한 결과까지 다 넣어서 만든 이미지로 각 개발자별 초기 빌드 시간도 단축 가능
     * 윈도우/맥/안드로이드/iOS/웹 브라우저 어디서든 접근하여 사용 가능

   가상데스크탑 성능이 이정도는 되야 개발을 할만 하겠죠. 지금 대기업들 vdi(가상데스크탑) 도입한곳 꽤 됩니다만, 개발자에게는 4gb 메모리에 4 cpu 짜리 사양을 주고 개발하라는 곳이 대부분인 현실입니다. 내가 아무리 좋은 laptop을 사도 다 소용없죠.
"
"https://news.hada.io/topic?id=6523","애플 iPod 단종 - The music lives on","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플 iPod 단종 - The music lives on

     * 20여년전 출시했던 iPod 시리즈를 iPod Touch 7세대 모델(A2178, A10칩)로 마무리
     * 남은 재고만 소진하고 단종
     * 아이팟의 음악 경험은 아이폰/애플워치/홈팟/맥/아이패드/애플TV에 이르는 모든 애플 제품에 적용되었음

   저도 몇개 모델을 가지고 있긴 한데.. 이렇게 사라진다니 또 아쉽네요.

   애플이 직접 고급형 디지털 오디오 플레이어를 만들면 어떨까 싶기도 한데.. 안 하겠죠? ㅎㅎ

   안 하지 않을까요ㅋㅋ 독립된 제품보단 아이폰 경험을 개선하는 방향으로 갈 것 같으니..
"
"https://news.hada.io/topic?id=6525","Apple, Google 및 Microsoft와 함께 FIDO 표준 지원 확대 가속화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Apple, Google 및 Microsoft와 함께 FIDO 표준 지원 확대 가속화

     * 보다 빠르고, 쉽고, 안전한 로그인 환경을 모든 주요 기기 및 플랫폼에 걸쳐 고객에게 제공

     암호만을 통한 인증 방식은 인터넷 환경에서 가장 큰 보안 문제 중 하나로 손꼽혀왔으며, 소비자는 다수의 암호를 관리하는 번거로움으로 인해 사용 중인 온라인 서비스에 걸쳐 동일한 패스워드를 사용하는 경우가 많다. 이러한 관행은 값비싼 대가가 요구되는 계정 탈취, 데이터 침해, 심지어는 신원 도용의 원인이 되기도 한다. 암호 관리 서비스 및 레거시 2차 인증은 개선된 환경을 제공했지만, 이번 협업으로 기업들이 함께 더욱 편리하고 안전한 로그인 기술을 제공할 수 있게 되었다.

     이번 확장된 표준 기반의 기술은 웹사이트 및 앱에 암호가 필요 없는 종단간 옵션을 제공한다. 사용자는 이제 지문 인식, Face ID, PIN 넘버 입력 등 보유한 기기의 잠금장치 해제를 위해 매일 여러 번 취하는 동일한 행위를 통해 웹사이트 및 앱에 로그인할 수 있다. 이 새로운 접근 방식은 SMS 문자 메시지를 통해 전송되는 일회용 비밀번호 및 기존의 다중 인증 기술과 달리 피싱으로부터 안전하다.
     * 암호를 필요로 하지 않는 기술 표준 지원 확장

    1. 사용자가 모든 계정을 다시 등록할 필요 없이 다수의 기기 및 새롭게 등록된 기기에서 (""패스키""로도 지칭되는) FIDO 로그인 계정 자격 증명에 자동으로 접근할 수 있다.
    2. 사용자가 실행 중인 OS 플랫폼 또는 웹 브라우저에 관계 없이, FIDO 인증을 보유한 모바일 기기에 활용하여 주변 기기에 로그인할 수 있다.

   야후의 사례도 같이 보는게 좋을거 같아 링크 남깁니다
   https://web.dev/yahoo-japan-identity-case-study/

   패스워드 없는 미래가 오고 있다
   위 기사에 대해서 애플 뉴스룸에서 한국어로 보도자료를 내서, 읽고 이해하기가 좋은듯 하여 다시 한번 올려봅니다.
"
"https://news.hada.io/topic?id=6545","Red Hat Enterprise Linux 9 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Red Hat Enterprise Linux 9 공개

     * CentOS Stream 에서 빌드되는 첫번째 릴리즈
     * 주요 개선 사항
          + 포괄적인 엣지 관리
          + Podman 으로 자동 컨테이너 롤백
          + 새로운 이미지 빌더
          + AWS Graviton 프로세서 연동
          + Spectre / Meltdown 취약점 개선
          + WireGuard VPN이 unsupported technology preview 로 사용 가능
          + 자동화 개선
          + Python 3.9 , Node.js 16, Linux Kernetl 5.14

   CentOS 프로젝트가 CentOS Stream에 집중하기로
"
"https://news.hada.io/topic?id=6544","Airbridge API 개발팀의 Monorepo 도입기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Airbridge API 개발팀의 Monorepo 도입기

   Airbridge API 개발팀에서 Monorepo를 도입하게된 계기와 도입 과정에서 겪은 문제를 해결한 사례를 소개합니다.
     * Monorepo 도입 배경
          + Monorepo란?
          + Airbridge API 팀의 도입 배경
     * 작업 목표
          + 동일한 개발 경험을 유지하면서 Monorepo 저장소 도입
     * 작업 완료 이후 발견한 문제
          + CI/CD 과정에서 각 컴포넌트에 변경점이 있는지 여부를 판단하게 되면서 CI/CD 스크립트가 복잡해지거나 동일한 코드의 재배포 불가능함 등의 문제가 발생
     * 해결하기 위해서
          + CI/CD가 수행되기 전에 컴포넌트의 변경 여부를 사전에 판단하여 CI/CD를 수행하게 하는 역할을 하는 컴포넌트 도입 (Code Deployer)
     * 조금 더 잘하기 위해서
          + PR에서 CI 확인할 수 있게 하기
          + Slack에서 PR 정보 및 CI 상태에 대한 가시성 높이기
     * Monorepo 도입 이후
          + 담당하는 컴포넌트의 가시성 향상
          + 생산성 향상
     * 마치며
"
"https://news.hada.io/topic?id=6522","Ryan Dahl의 JavaScript Containers에 대한 생각","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ryan Dahl의 JavaScript Containers에 대한 생각

     * Docker는 리눅스 컨테이너를 대중화 : OS 수준 가상화로 소프트웨어 배포를 쉽게 해줌
     * Cloudflare Workers 나 Deno Deploy 는 JS Container 개념을 구현한 것(서로 다른 환경에서)
     * JS 컨테이너는 향후 몇 년간 어떻게 진행될까 ?

Universal Scripting Language

     * 점점 더 많은 것들이 웹을 기반으로 연동중 : The web is eating the world
     * 웹은 인류 정보의 기본 매체이고, JS는 웹 인프라에 깊게 연동되어 있어서 다른 언어들과 다름
     * 스크립팅 언어는 많은 서버쪽 문제들을 해결해주며, 비즈니스 로직을 더 빠르고 저렴하게 작성 가능
     * 스크립트 언어는 유용하고, 서로 많이들 비슷하며, JavaScript가 가장 광범위하게 이용중이고 미래에도 사용 가능
     * 즉 JavaScript는 유니버설 스크립팅 언어라고 생각할 수 있음

Shell : Executables :: JavaScript : WebAssembly

     * 서버를 위한 새로운 상위레벨 컨테이너인 JavaScript Sandbox가 등장
     * Linux 컨테이너가 타겟하는 문제를 해결하기 위한 것은 아님
     * 단순화의 결과로 출현한 것
       → 웹 서비스 비즈니스 로직의 Boilerplate를 최소화
       → 브라우저와 개념을 공유하며, 프로그래머가 알아야 할 개념들을 최소화
     * 모든 웹 엔지니어들은 JavaScript 브라우저 API를 이미 알고 있음
       → JS 컨테이너 추상화는 같은 브라우저 API 기반으로 만들어졌기 때문에 알아야 할 내용이 줄어듦
       → JS의 Universality가 복잡도를 줄임
     * Shell 은 Unix 프로그램을 실행하기 위한 인터프리팅 스크립트 언어
       → 조건식, 루프, 변수가 있지만 제한적이어서 프로그래밍 하기는 어려움. 실제 기능은 실행파일들이 수행
     * 이 새로운 서버 추상화 레이어에서는 JS가 Shell의 위치를 차지함
       → Bash/Zsh 보다는 스크립팅에 적합하지만, Shell 이 실행파일을 호출하는 것처럼 JS Sandbox는 WASM을 호출함
       → 이미지 리사이징 처럼 복잡한 작업이 필요하다면 JS에서 작성하는 것보다 WASM을 이용하는 것이 좋음
       → bash에서 이미지 리사이징을 하지 않고 Imagemagick을 호출하듯이

The North Star

     * 스크립트의 미래는 브라우저 JavaScript임
     * Node.js 의 가장 근본적인 실수는 새로운 API가 표준화되면서 브라우저에서 벗어나 너무 많은 것을 발명해 버렸다는 것
       → 2010년엔 우리는 ES 모듈도 없었지만, 표준화 되고나서 Node로 가져와야 했음
       → Promise, Async/Await, Fetch, Streams 등 많은 것이 그랬음
       → 비표준인 CommonJS require, package.json, node_modules, npm, 글로벌 process 객체가 궁극적으로는 표준화 되어서 브라우저에 추가되거나, 웹기반의 다른것으로 교체됨
     * 고수준의 컨테이너는 아직 표준화되지 않았고, 이 모든 것이 어떻게 전개될지 아직 잘 모름
     * 현재 Cloudflare Workers 와 Deno Deploy는 FetchEvent API를 사용하지만, 더 나은 인터페이스를 찾을 수도 있음

결론

     * JavaScript 는 범용 스크립팅 언어임
     * JavaScript 의 보편성으로 인해 서버를 단순화 하는 새로운 컨테이너 같은 추상화가 등장하고 있음
     * Linux 컨테이너가 사라진다는 얘기는 아님. 그 수준의 추상화는 계속 유용할 것
       → 사람들이 작성하는 많은 ""비즈니스 로직""에 대해서는 다소 로우 레벨의 추상화 라는 것
       → 웹사이트를 구축할 때 systemd 설정 같은 것은 boilerplate 임
     * 아마도 많은 ""웹 서비스""들은 Linux 컨테이너가 아닌 JavaScript 컨테이너 관점에서 생각하면 단순화 할 수 있음
     * 우린 Deno에서 이 아이디어를 탐구 하는 중임
       → 서버 추상화를 근본적으로 단순화하려고 노력중

   번역글이 나왔네요

   https://medium.com/@yujso66/…

   제 나름대로 요약해보면
    1. 요즘 WASM을 이용한 샌드박스 기술들이 많이 나오고 있다
    2. JavaScript는 WASM을 구동하는 스크립트 처럼 사용한다.
    3. WASM 샌드박스는 OS부터 컨테이너및 프레임워크까지 모든게 올라가는게 가능하다
    4. 그러면 이런 식의 JS Container로 비즈니스 로직만 신경쓰는 새로운 고수준 컨테이너 표준이 나올 수도 있다.
       라고 정리되지 않을까 합니다.

   이해를 돕기 위한 다른 링크들
     * 이 글에 대한 HN 토론 : https://news.ycombinator.com/item?id=31262542
     * Zack Bloom 이 처음에 이 개념을 제시했던 Cloud Computing without Containers
     * WebAssembly에 주목해야 할 이유
     * WebAssembly는 어떻게 JavaScript를 빠르게 실행할 수 있는가
     * ATMO - WASM을 이용한 클라우드 어플리케이션 개발
     * Spin - 오픈소스 WebAssembly 프레임워크
     * WebAssembly가 네트웍 프록시에 새로운 확장성을 가져오다
     * 리눅스 컨테이너란?
"
"https://news.hada.io/topic?id=6567","VoCore - 동전 크기의 컴퓨터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          VoCore - 동전 크기의 컴퓨터

     * Linux(OpenWrt) 오픈 하드웨어
     * CPU : MT7628 MIPS 24K 580Mhz
     * 128MB DDR, WIFI, USB, UART, I2C, SPI, 20+ GPIO
     * 25.6mm x 25.6mm x 3.0mm 기판 버전 (USB Head 및 SD 슬롯 포함 버전도 있음) $17.99~24.99
     * 28mm x 30mm x 30mm 포트 내장 버전 (이더넷, USB2, 3.5mm 오디오, microSD) $44.99
     * PoE(Power Over Ethernet) 버전 및 4인치/5인치 스크린 버전도 있음
"
"https://news.hada.io/topic?id=6634","Payload - Headless CMS 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Payload - Headless CMS 오픈소스

     * 100% TypeScript + Node.js + React + MongoDB
     * 웹사이트, 웹앱, 네이티브 앱등을 위한 Headless CMS
     * 기존에 유료였다가 MIT 라이센스를 적용하고 프로젝트 종류에 상관없이 완전히 무료로 변경
     * GraphQL, REST, Local API 지원
     * 쉽게 커스터마이징 가능한 ReactJS Admin
     * 회사는 엔터프라이즈용 및 클라우드 호스팅 쪽으로 비즈니스 모델을 전환할 예정
"
"https://news.hada.io/topic?id=6558","사이버콩즈(CyberKongz)로 보는 NFT 토크노믹스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    사이버콩즈(CyberKongz)로 보는 NFT 토크노믹스

     * 유명 PFP NFT 프로젝트 중 하나인 사이버콩즈(CyberKongz)의 토크노믹스 구축 시도
     * 각 NFT 소유 시, 매일 10 $BANANA을 제공. 최대 하루 1200$ 수익 창출 가능. (현재 30$)
     * 2개 콩즈 NFT와 바나나 토큰을 사용하여 새로운 베이비콩즈 NFT를 발행하는 브리딩 시스템 사용하여 많은 사용자 참여 유도.
     * 다만 해당 브리딩 시스템은 작년 12월에 종료. 그 이후 토큰 인플레이션 발생
     * 토큰 이코노미 구축에 다양한 시도를 진행함
     * 메타버스 도입, P2E 게임 도입, 타 프로젝트 지원, 실물 상품 도입, 투표권 등 다양한 토큰 활용처에 대한 시도와 실패
     * 토큰 소각 모델의 정교한 설계의 중요성
"
"https://news.hada.io/topic?id=6505","젤다 클래식을 웹으로 포팅하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            젤다 클래식을 웹으로 포팅하기

     * 젤다 클래식은 젤다 팬들이 오리지널 젤다의 전설을 그대로 구현한 오픈소스 게임
       → 이 엔진 기반으로 600개 이상의 커스텀 게임(팬들은 퀘스트라고 부르는)이 출시 됨
     * Emscripten을 이용하여 젤다 클래식 코드(C++)를 WASM으로 변환한 과정을 상세히 정리한 글
     * 젤다 클래식은 크로스플랫폼 라이브러리인 Allegro를 이용(윈도우 관리, 화면처리, 사운드 등)
       → Allegro 4 를 이용하는데, 이 버전은 Emscripten 으로 컴파일이 불가해서 Allegro 5로 변경이 필요
     * 그외 MIDI 및 특수효과 처리, Filesystem API를 이용한 상태 저장, 게임 패드 지원, 모바일 지원, PWA 설정 등을 어떻게 처리했는지 상세히 정리
"
"https://news.hada.io/topic?id=6559","일본의 클래식 오디오 브랜드 Onkyo, 파산 신청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      일본의 클래식 오디오 브랜드 Onkyo, 파산 신청

   오사카 지방법원에 파산 신청. 총 부채는 약 31억엔(300억원)

   온쿄 오디오 소유자로 안타까운 소식이네요.. 스트리밍 세대에 중저가 오디오 브랜드는 버티기 힘들 것 같네요

   요즘 보면 스트리밍 앰프들 때문에 기존 오디오 제조사들이 다 힘들어지는 듯
   HiFi 한참 안보다가 살짝 들여다 봤더니.. 스트리밍 앰프 브랜드들은 뭐가 뭔지 전혀 모르겠더라고요.

   Onkyo 앰프 괜찮았는데.. 요즘 일본은 정말 다 안되는 것 같아요.
   최근에 슈카월드에 올라온 ""엔화 약세와 생활물가 충격, 일본의 딜레마"" 보니 더 이해가 되더군요.
"
"https://news.hada.io/topic?id=6604","Web3는 그냥 비싼 P2P입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Web3는 그냥 비싼 P2P입니다

Web3는

     * 탈중앙화 되지 않음. 앱이 실용적이 되려면 게이트웨이 중 하나를 거쳐야 함
     * 이 게이트웨이들은 할 수 있는 것과 할 수 없는 것을 적어도 기존 웹 호스팅 사이트 이상으로 제어함
     * 실제 블록체인에 뭔가 작업을 하는 것은 매우 비쌈
     * 대부분의 사용자들은 실제로 신경쓰지 않음

분산 시스템

     * 네트워크 시스템은 보통 3가지중 하나
          + Centralized : 은행, 줌, 슬랙..
          + Federated : 여럿이 각자의 중앙화된 시스템을 운영하고 서로간에 연동. 예) 이메일
          + Decentralized or Distributed : 초기의 파일 공유를 위한 P2P 같은 것들
     * 블록체인 역시 분산 시스템
       모든 블록체인 데이터는 노드들 간에 복사되고 각자 복제본을 가지고 있음(컨셉적으로)

Web3 vs. P2P Distributed Apps

     * 20여년전 초기 P2P 시절엔 사람들이 남는 리소스(컴퓨팅, 저장소, 네트워크 밴드위스)등을 제공했음
     * 요즘은 적은 전력만으로도 라즈베리파이 같은 것을 통해 개인 서버를 매우 저렴하게 운용 가능
     * P2P는 모두가 혜택을 받는 가벼운 공산주의 적인 거품을 만들어 제공했고, 완벽하지 않지만 동작했음(누군가 소프트웨어 설치해서 실행만 한다면)
     * Web3 커뮤니티는 이것을 반대쪽에서 접근함
          + 가벼운 공산주의적인 접근이 아닌 무거운 자유지상주의적인 접근을 함 : 모든 것은 수익화 되어야 함
          + 이것을 위해, 복잡하고 비싼 내부구조(블록체인)을 만들었고, 이 위에 더 복잡하고 에러날 수도 있고 비싼 레이어들을 더 얹음
          + 모든 사람은 결국 더 많은 돈과 기타 자원들을 소비하게 됨
          + 그러나 서버 관리는 돈을 받는 누군가가 하지만, 실제 Web3 소프트웨어가 실행되려면 여전히 당신에게 달려있음 (올바른 스마트 컨트랙트를 작성하는 것은 가장 야심찬 소프트웨어 프로젝트 중 하나이고, 복잡하고 오류가 발생하기 쉬움)

뭐가 나을까 ?

     * P2P는 한번도 주류가 되지 못했음. 그 대신 중앙화된 시스템이 여전히(다시? 또는 훨씬 더?) 시장을 장악 하고 있음
     * 그럼 그게 실패했기 때문에 우리가 다시 Web3를 시도해야 할까?
     * 나는 의심스러움. 더 높은 복잡성과 더 많은 종속성으로 인해 실패할 가능성이 높음
     * 따라서 초기 설정 및 유지보수의 문제점들을 줄일 수 없다면(커뮤니티가 노력하고 있긴 함), 가장 좋은 방법은 중앙 집중식 모델임
       → 이걸 하기 위해 누군가에게 돈을 지불해야하고, 이 필요한 자금을 마련하기 위해 비영리 협회를 설립할 수도 있음
     * 중앙집중식 이나 P2P에서도, Web3 세계에서도 모든 것들은 유지관리 되지 않는 채로 둘 수 없음
       → 다른 모든 것은 그냥 환상임

   웹 3.0은 그냥 비즈니스적인 접근으로 만들어진 쓸모없는 기술(개념)같아요.
   구지 쓸때 없이 코인을위한 기술 같습니다.

   일반 사용자들이 웹 3.0을 위해서 블록체인 노드(상시 켜져있는 채광용 컴퓨터)를 구성할 일도 없을것이므로, 일부 메가 채굴자(풀)들이 담당하게 되는 탈중앙화를 모방한 중앙화라 생각합니다.

   제가 느끼기엔 메타버스, NFT 와 더불어 말장난같네요.

   보면 볼수록 블록체인은 오로지 비트코인에만 쓸모가 있다는 게 맞는 것 같아요. 저 분산처리를 위한 고비용을 개인이 감당할 유인이 없어요.

   투기로 부터 자유로운 Hyperledger가 대안이지 않나 싶네요.
   솔리디티해보려고 이더도 구입하고 했지만, 가스비가 장난아니어서 일단은 접었습니다.

   Web3에 대한 나의 첫인상
   귀도 반 로섬 : Web3는 불타서 죽어버리게 두세요
   웹2.0 창시자 ""웹3에 흥분하기엔 너무 이르다"" 왜?
   Keep the web free, say no to Web3

   이 글 관련 HN 토론 https://news.ycombinator.com/item?id=31396329

   또한 반대입장에 서있는 (Web3 옹호쪽인) a16z의 보고서도 같이 보세요
   2022년의 크립토씬, 어디까지 왔는가?

   Web3 에 대해서는 다양한 의견이 있습니다. 양쪽 의견들을 다 들어보시면 좋을 것 같아요.
   근데 Web3 옹호쪽 의견은 다양하게 번역되는 데에 반해, 반대쪽 의견들은 국내에서 잘 번역 및 공유가 안되는 듯 해서 긱뉴스에 반대쪽 의견글이 더 많은 것 처럼 보이는 효과가 있는듯 합니다. ^^;
"
"https://news.hada.io/topic?id=6565","데이터 엔지니어란 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            데이터 엔지니어란 무엇인가?

   데이터 엔지니어란 어떤 직군이며 회사에서는 무슨 일을 하고, 이를 위해서 가지면 좋을 기술이 무엇일지를 지난 몇 년간 주로 스타트업에서 데이터 엔지니어로 근무하며 느낀 점을 바탕으로 정리해보았습니다. 또한, 스타트업 이외의 빅테크, 미국에서는 데이터 엔지니어를 어떻게 정의하고 있는지도 약간 살펴봅니다.
     * 데이터 엔지니어란 무엇인가?
          + 데이터 엔지니어의 업무
          + 데이터 엔지니어의 스킬셋
          + 데이터 엔지니어를 필요로 하는 회사는?
     * 한국 빅테크의 데이터 엔지니어 동향 살펴보기
     * 미국 데이터 엔지니어 동향 살펴보기

   매일 올라오는 글만 보다 처음으로 글을 올려보는데 혹시 궁금한 점이나 이상한 점 있으시면 자유롭게 알려주세요. 고맙습니다.

   감사합니다

   오.. 얼마전 링크드인에서 첨보고, 내용이 아주 좋아 같은 데이터플랫폼 팀원들에게 공유했었는데..여기서 다시 보게 되어 반갑네요..

   좋은 글 올려주셔서 감사합니다.

   재밌게 읽어주셨다니 제가 더 감사합니다!
"
"https://news.hada.io/topic?id=6626","Broadcom이 VMWare를 77조원($61b)에 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Broadcom이 VMWare를 77조원($61b)에 인수

     * 칩 제조사인 브로드컴이 클라우드회사 VMware를 현금과 주식 교환방식 매수
     * VMware 주식에 대해 현금 $142.5 또는 브로드컴 주식 0.2520주를 제안
       → 처음 얘기나왔던 22일 VMWare 종가보다 49% 높음
     * VMWare의 순 부채 80억달러도 인수
     * 마이크로소프트의 액티비전블리자드 인수($69b) 이후 두번째로 큰 규모
     * 브로드컴의 CEO인 Hock Tan은 각종 인수를 통해 회사를 세계 최대 칩 제조사로 키워왔음
       → CA테크놀로지스, 시만텍의 보안사업부 등
     * 작년 델에서 분사한 VMWare는 델의 CEO인 마이클 델이 40%의 지분을 보유중이며, 그의 재정적 후원자인 사모펀드 Silver Lake가 10%의 지분을 보유중. 둘다 이 매각에 동의.
"
"https://news.hada.io/topic?id=6587","갈라파고스 섬의 노트북들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             갈라파고스 섬의 노트북들

   10년전엔가 가볍고 작고 튼튼(?)하고, 비싼 노트북으로 센세이션을 일으켰는데, 이게 아직도 나오고 있었군요.
"
"https://news.hada.io/topic?id=6533","trdsql - CSV/JSON 등에 SQL로 쿼리하는 CLI도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  trdsql - CSV/JSON 등에 SQL로 쿼리하는 CLI도구

     * q/texql과 비슷하지만 PostgreSQL/MySQL의 SQL 구문을 지원
     * CSV/JSON/LTSV/MarkDown/RAW/TBLN 등의 출력 포맷 지원
     * 리눅스/윈/맥 지원
     * Go 오픈소스

   q - CSV 파일에 SQL쿼리 하기
"
"https://news.hada.io/topic?id=6511","GAN을 만들었던 애플 머신러닝 디렉터, 사무실 출근 정책에 반발하여 퇴사 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GAN을 만들었던 애플 머신러닝 디렉터, 사무실 출근 정책에 반발하여 퇴사

     * 2014년 GAN(생성적 적대 신경망) 논문을 썼던 Ian Goodfellow
     * Open AI 와 Google에서 일하다가 2019년 애플에 합류
     * 애플의 사무실 출근 정책(5/2부터는 주2일, 5/23부터는 주3일 이상 근무)에 반발하여 퇴사 메일을 보냄

     ""나는 내 팀을 위한 최고의 정책은 더 유연성을 부여하는 것이라고 강하게 믿는다.""

   저는 출근을 좋아해요 아이들과 6시 이후 바로 놀아줄 수 있고 출퇴근 지옥철을 타지 않고 점심시간에 30분 낮잠을 잘 수 있으면요

   다른 더 큰..이유가 있는거 아닐까요 ㄷ ㄷ ㄷ
"
"https://news.hada.io/topic?id=6600","케빈 켈리의 알았더라면 좋았을 103가지 조언 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       케빈 켈리의 알았더라면 좋았을 103가지 조언

   Wired 창립 편집장 케빈 켈리(KK)가 올해 70세 생일날 블로그에 올린 훌륭한 조언들 번역
     * About 99% of the time, the right time is right now.
       약 99%의 경우, 적절한 시간은 바로 지금입니다.
     * No one is as impressed with your possessions as you are.
       당신만큼 당신의 소유물에 인상을 받는 사람은 없습니다.
     * Dont ever work for someone you dont want to become.
       되고 싶지 않은 사람을 위해 일하지 마세요
     * Cultivate 12 people who love you, because they are worth more than 12 million people who like you.
       당신을 사랑하는 12명을 키우세요. 그들은 당신을 좋아하는 1200만명보다 더 가치가 있습니다.
     * Dont keep making the same mistakes; try to make new mistakes.
       같은 실수를 반복하지 마세요; 새로운 실수를 하려고 노력하세요.
     * If you stop to listen to a musician or street performer for more than a minute, you owe them a dollar.
       음악가나 길거리 공연자를 듣기위해 1분이상 멈췄다면, 그들에게 1달러를 빚진 것입니다.
     * Anything you say before the word “but” does not count.
       ""하지만"" 전에 얘기한 모든 말은 중요하지 않습니다.
     * When you forgive others, they may not notice, but you will heal. Forgiveness is not something we do for others; it is a gift to ourselves.
       다른 사람을 용서할 때 그들은 알아차리지 못할 수도 있지만, 당신은 치유될 것입니다. 용서는 다른 사람을 위해 하는것이 아니라, 우리 자신에게 주는 선물입니다.
     * Courtesy costs nothing. Lower the toilet seat after use. Let the people in the elevator exit before you enter. Return shopping carts to their designated areas. When you borrow something, return it better shape (filled up, cleaned) than when you got it.
       예의는 비용이 들지 않습니다. 변기 시트는 사용 후에 내리세요. 엘리베이터는 사람들이 내리고 나서 타세요. 쇼핑카트는 지정된 위치에 반납하세요. 뭔가를 빌렸다면, 빌렸을 때 보다 더 좋은 상태로 반납하세요(채워지고, 청소한 상태로)
     * Whenever there is an argument between two sides, find the third side.
       양측 사이에서 논쟁이 있다면, 세번째 측을 찾으세요.
     * Efficiency is highly overrated; Goofing off is highly underrated. Regularly scheduled sabbaths, sabbaticals, vacations, breaks, aimless walks and time off are essential for top performance of any kind. The best work ethic requires a good rest ethic.
       효율성은 매우 과대 평가 되고, 쉬는 것(농땡이 치는 것)은 매우 과소 평가 됩니다. 정기적으로 잡힌 안식일, 안식년, 휴가, 휴식, 목적없는 산책은 모든 것에서 최고의 성과를 내는데 필수적입니다. 최고의 직업 윤리는 좋은 휴식 윤리를 요구합니다.
     * When you lead, your real job is to create more leaders, not more followers.
       당신이 리드할 때, 당신의 진짜 임무는 더 많은 팔로워를 만드는게 아니라 더 많은 리더를 만드는 것입니다.
     * Criticize in private, praise in public.
       비공개로 비판하고, 공개적으로 칭찬하세요.
     * Life lessons will be presented to you in the order they are needed. Everything you need to master the lesson is within you. Once you have truly learned a lesson, you will be presented with the next one. If you are alive, that means you still have lessons to learn.
       인생의 교훈들은 그게 필요한 순서대로 당신에게 제공됩니다. 교훈을 마스터하는데 필요한 모든 것은 당신 안에 있습니다. 당신이 진정으로 교훈을 배우고 나면, 그 다음 교훈이 제시될 것입니다. 당신이 살아있다면, 그것은 당신이 아직 배울 교훈이 있다는 것을 의미합니다.
     * It is the duty of a student to get everything out of a teacher, and the duty of a teacher to get everything out of a student.
       교사에게서 모든 것을 얻어내는 것은 학생의 의무이고, 학생에게서 모든 것을 끄집어 내는 것은 교사의 의무입니다.
     * If winning becomes too important in a game, change the rules to make it more fun. Changing rules can become the new game.
       게임에서 이기는 것이 너무 중요하다면, 규칙을 변경하여 더 재미있게 만드십시오. 규칙을 바꾸는 것은 새로운 게임이 될 수도 있습니다.
     * Ask funders for money, and they’ll give you advice; but ask for advice and they’ll give you money.
       투자자에게 돈을 요청하면 조언을 제공할 것입니다. 하지만 조언을 요청하면 그들은 돈을 줄 것입니다.
     * Productivity is often a distraction. Don’t aim for better ways to get through your tasks as quickly as possible, rather aim for better tasks that you never want to stop doing.
       생산성은 종종 주의를 산만하게 합니다. 당신의 작업을 가능한 빨리 완료하는 방법을 목표로 하지말고, 절대 그만두기 싫은 더 좋은 작업을 목표로 하세요.
     * Immediately pay what you owe to vendors, workers, contractors. They will go out of their way to work with you first next time.
       공급업체, 작업자, 계약자들에게 빚진 금액을 즉시 지불하세요. 그들은 다음번에 당신과 일하기 위해 먼저 움직일 것입니다.
     * The biggest lie we tell ourselves is “I dont need to write this down because I will remember it.”
       우리가 스스로에게 하는 가장 큰 거짓말은 ""기억할 것이기 때문에 기록할 이유가 없다""는 것입니다.
     * Your growth as a conscious being is measured by the number of uncomfortable conversations you are willing to have.
       의식을 가진 존재로서의 당신의 성장은 당신이 기꺼이 하고 싶은 불편한 대화의 수로 측정 됩니다.
     * Speak confidently as if you are right, but listen carefully as if you are wrong.
       당신이 맞는 것처럼 자신있게 말하고, 당신이 틀린 것처럼 주의깊게 들으세요.
     * Handy measure: the distance between your fingertips of your outstretched arms at shoulder level is your height.
       편리한 측정 방법 : 어깨 높이에서 양쪽으로 뻗은 팔의 손가락 사이 거리가 당신의 키 입니다.
     * The consistency of your endeavors (exercise, companionship, work) is more important than the quantity. Nothing beats small things done every day, which is way more important than what you do occasionally.
       노력(운동, 관계, 일)의 일관성이 양보다 중요합니다. 매일 하는 작은 것들보다 좋은 것은 없고, 이게 가끔 하는 것보다 훨씬 중요합니다.
     * Making art is not selfish; it’s for the rest of us. If you don’t do your thing, you are cheating us.
       예술을 만드는 것은 이기적이지 않습니다: 그것은 다른 사람을 위한 것입니다. 당신이 당신의 일을 하지 않으면, 우리를 속이는 것입니다.
     * Never ask a woman if she is pregnant. Let her tell you if she is.
       여성에게 임신 여부를 묻지 마세요. 그녀가 당신에게 얘기하게 하세요.
     * Three things you need: The ability to not give up something till it works, the ability to give up something that does not work, and the trust in other people to help you distinguish between the two.
       당신에게 필요한 세가지: 뭔가가 동작할 때까지 포기하지 않는 능력, 동작하지 않는 것을 포기하는 능력, 당신이 그 두가지를 구별할 수 있도록 도와주는 다른 사람에 대한 신뢰
     * When public speaking, pause frequently. Pause before you say something in a new way, pause after you have said something you believe is important, and pause as a relief to let listeners absorb details.
       대중앞에서 얘기할 때 종종 멈추세요. 새로운 방식으로 뭔가를 말하기 전에 멈추고, 당신이 중요하다고 믿는 것을 말하고 나서 멈추고, 듣는 사람이 세부사항을 흡수할 수 있도록 돕기 위해 멈추세요.
     * There is no such thing as being “on time.” You are either late or you are early. Your choice.
       ""정시""라는 것은 없습니다. 늦거나 빠른 것입니다. 선택하세요.
     * Ask anyone you admire: Their lucky breaks happened on a detour from their main goal. So embrace detours. Life is not a straight line for anyone.
       존경하는 사람에게 물어보세요: 그들의 행운의 휴식은 주요 목표에서 우회했을 때 발생했습니다. 그러니 우회하는 것을 받아들이세요. 인생은 누구에게도 직선이 아닙니다.
     * The best way to get a correct answer on the internet is to post an obviously wrong answer and wait for someone to correct you.
       인터넷에서 올바른 답을 얻는 가장 좋은 방법은 명백한 오답을 게시하고 누군가 당신을 고쳐주길 기다리는 것입니다.
     * You’ll get 10x better results by elevating good behavior rather than punishing bad behavior, especially in children and animals.
       아이들과 동물에게는 잘못된 것을 처벌하는 것보다 좋은 행동을 강화시키면 10배 이상의 효과를 얻을 수 있습니다.
     * Spend as much time crafting the subject line of an email as the message itself because the subject line is often the only thing people read.
       이메일 제목을 작성하는데 본문을 작성하는 만큼 시간을 들이세요. 사람들이 제목만 읽는 경우가 많습니다.
     * Don’t wait for the storm to pass; dance in the rain.
       폭풍우가 지나가길 기다리지 마세요; 빗속에서 춤을 추세요.
     * When checking references for a job applicant, employers may be reluctant or prohibited from saying anything negative, so leave or send a message that says, “Get back to me if you highly recommend this applicant as super great.” If they don’t reply take that as a negative.
       구직자의 레퍼런스를 확인할때, 부정적인 것을 얘기하는 것을 꺼려하거나 금지당했을 수 있으므로 이렇게 메시지를 남기세요 ""이 사람이 매우 훌륭하여 강력히 추천한다면 회신 부탁드려요"" 그들이 회신하지 않는다면 부정적인 것으로 간주하세요.
     * Use a password manager: Safer, easier, better.
       암호 관리자를 사용하세요: 더 안전하고, 더 쉽고, 더 좋습니다
     * Half the skill of being educated is learning what you can ignore.
       교육 받는 기술의 절반은 무시할 수 있는 것을 배우는 것입니다.
     * The advantage of a ridiculously ambitious goal is that it sets the bar very high so even in failure it may be a success measured by the ordinary.
       터무니 없이 야심찬 목표의 장점은 기준을 높게 설정함으로써, 실패하더라도 일반적으로 측정하기엔 성공이 될 수 있다는 것입니다.
     * A great way to understand yourself is to seriously reflect on everything you find irritating in others.
       당신을 이해하는 훌륭한 방법은 다른 사람들에게서 짜증나는 모든 것을 당신에게 진지하게 반영해 보는 것입니다.
     * Keep all your things visible in a hotel room, not in drawers, and all gathered into one spot. That way you’ll never leave anything behind. If you need to have something like a charger off to the side, place a couple of other large items next to it, because you are less likely to leave 3 items behind than just one.
       호텔방에서 모든 물건을 서랍이 아닌 눈에 보이는 한곳에 모아두세요. 그렇게 하면 물건을 두고 오지 않을 것입니다. 충전기 같은 것을 구석에 둬야 한다면 큰 물건 한두개를 그 옆에 두세요. 한개보다는 3개를 두고 올 가능성이 적기 때문입니다.
     * Denying or deflecting a compliment is rude. Accept it with thanks, even if you believe it is not deserved.
       칭찬을 거부하거나 무시하는 것은 무례한 행동입니다. 자격이 없다고 생각하더라도 감사하는 마음으로 받아들이세요.
     * Always read the plaque next to the monument.
       항상 기념물 옆에 있는 명판을 읽으세요.
     * When you have some success, the feeling of being an imposter can be real. Who am I fooling? But when you create things that only you — with your unique talents and experience — can do, then you are absolutely not an imposter. You are the ordained. It is your duty to work on things that only you can do.
       어느 정도 성공하면, 사기꾼이 된 듯한 느낌이 들 수 있습니다. 내가 누구를 속이는 거지? 하지만 독특한 재능과 경험을 가진 당신만이 할 수 있는 것을 만든다면 당신은 절대 사기꾼이 아닙니다. 당신은 임명받은(Ordained) 사람입니다. 당신만이 할 수 있는 일을 하는 것은 당신의 의무입니다.
     * What you do on your bad days matters more than what you do on your good days.
       나쁜 시기에 무엇을 하느냐가 좋은 시기에 무엇을 하느냐보다 더 중요합니다.
     * Make stuff that is good for people to have.
       사람들이 가지고 있으면 좋은 것들을 만드세요
     * When you open paint, even a tiny bit, it will always find its way to your clothes no matter how careful you are. Dress accordingly.
       페인트를 열면 아무리 조심하더라도 아주 조금씩은 당신 옷에 묻습니다. 맞춰서 옷을 입으세요.
     * To keep young kids behaving on a car road trip, have a bag of their favorite candy and throw a piece out the window each time they misbehave.
       어린 아이들이 자동차로 여행을 갈 때 올바르게 행동하게 하려면, 그들이 좋아하는 사탕 한봉지를 가져가서 잘 못 행동할 때마다 창밖으로 한조각씩 던지세요.
     * You cannot get smart people to work extremely hard just for money.
       똑똑한 사람들이 단지 돈만을 위해서 극도로 열심히 일하게 만들 수는 없습니다.
     * When you don’t know how much to pay someone for a particular task, ask them “what would be fair” and their answer usually is.
       특정 일에 대해서 얼만큼 지불해야 할지 모를 때, 그들에게 ""얼만큼이면 공정할까요""라고 물어보면, 그들의 답이 보통 맞습니다.
     * 90% of everything is crap. If you think you don’t like opera, romance novels, TikTok, country music, vegan food, NFTs, keep trying to see if you can find the 10% that is not crap.
       모든 것의 90%는 쓰레기 입니다. 오페라, 로맨스소설, 틱톡, 컨트리 음악, 비건 푸드, NFT가 마음에 들지 않는다고 생각한다면, 쓰레기가 아닌 10%를 찾을수 있도록 노력하세요.
     * You will be judged on how well you treat those who can do nothing for you.
       당신을 위해 아무 것도 해줄 수 없는 사람들에게 얼마나 잘 대하는가로 당신은 판단받게 됩니다.
     * We tend to overestimate what we can do in a day, and underestimate what we can achieve in a decade. Miraculous things can be accomplished if you give it ten years. A long game will compound small gains to overcome even big mistakes.
       우리는 하루에 할 수 있는 일들을 과대 평가하고, 10년안에 이룰 수 있는 일을 과소 평가하는 경향이 있습니다. 10년을 들이면 기적같은 일이 일어납니다. 긴 게임에선 큰 실수라도 회복할 수 있도록 작은 이익들을 합칩니다.
     * Thank a teacher who changed your life.
       당신의 인생을 바꿔준 선생님게 감사드리세요.
     * You cant reason someone out of a notion that they didn’t reason themselves into.
       당신은 그들이 스스로 추론하지 않은 개념으로 그들을 추론할 수 없습니다.
     * Your best job will be one that you were unqualified for because it stretches you. In fact only apply to jobs you are unqualified for.
       당신의 최고의 직업은 당신이 모잘라서 (자신을 늘려야만 맞는) 자격이 없는 것들중 하나가 것입니다. 당신이 자격이 되지 않아 보이는 직업에 지원하세요.
     * Buy used books. They have the same words as the new ones. Also libraries.
       중고 책을 구입하세요. 그들은 새 것과 같은 말을 담고 있습니다. 또는 도서관에 가세요.
     * You can be whatever you want, so be the person who ends meetings early.
       당신은 당신이 원하는 무엇이든 할 수 있으니까, 미팅을 일찍 끝내는 사람이 되세요.
     * A wise man said, “Before you speak, let your words pass through three gates. At the first gate, ask yourself, “Is it true?” At the second gate ask, “Is it necessary?” At the third gate ask, “Is it kind?”
       현명한 사람이 이야기 하길 ""말하기 전에, 말들이 세개의 문을 통과 하게 하세요. 첫번째 문에서 당신에게 물어보세요. '이거 진짜야?' 두번째 문에서는 '이거 필요해?' 세번째 문에서는 '이거 친절해?'""
     * Take the stairs.
       계단을 이용하세요.
     * What you actually pay for something is at least twice the listed price because of the energy, time, money needed to set it up, learn, maintain, repair, and dispose of at the end. Not all prices appear on labels. Actual costs are 2x listed prices.
       당신이 실제로 지불하는 것은 그것을 만들고, 배우고, 유지보수하고, 수리하고, 마지막에 처분하는데 드는 에너지, 시간, 돈 때문에 실제 표시된 금액의 적어도 두배 이상입니다. 모든 가격이 라벨에 적혀있지 않습니다. 실제 비용은 표시된 가격의 2배입니다.
     * When you arrive at your room in a hotel, locate the emergency exits. It only takes a minute.
       호텔의 당신방에 도착하면, 비상구를 확인하세요. 1분밖에 걸리지 않습니다.
     * The only productive way to answer “what should I do now?” is to first tackle the question of “who should I become?”
       ""지금 뭘 해야 할까요?""에 대답하는 유일한 생산적인 방법은 ""나는 어떤 사람이 되어야 할까요?""에 대한 질문을 먼저 해결하는 것입니다.
     * Average returns sustained over an above-average period of time yield extraordinary results. Buy and hold.
       평균 이상의 기간동안 지속되는 평균 수익률은 놀라운 결과를 가져옵니다. 사고 유지하세요.
     * It’s thrilling to be extremely polite to rude strangers.
       무례한 낯선 사람에게 극도로 공손하게 대하는 것은 짜릿한 일입니다.
     * It’s possible that a not-so smart person, who can communicate well, can do much better than a super smart person who can’t communicate well. That is good news because it is much easier to improve your communication skills than your intelligence.
       아주 똑똑하지 않지만 의사소통을 잘하는 사람이 의사소통을 잘 못하는 엄청 똑똑한 사람보다 훨씬 더 잘 할 수 있습니다. 당신의 지능보다 의사소통을 향상시키는 것이 더 쉽기때문에 좋은 소식입니다.
     * Getting cheated occasionally is the small price for trusting the best of everyone, because when you trust the best in others, they generally treat you best.
       때때로 속는 것은 모든 사람의 최고를 신뢰하기 위한 작은 대가 입니다. 당신이 누군가의 최고를 신뢰할 때, 그들은 일반적으로 당신을 최고로 대우하기 때문입니다.
     * Art is whatever you can get away with.
       예술은 당신이 얻을 수 있는 모든 것입니다.
     * For the best results with your children, spend only half the money you think you should, but double the time with them.
       자녀와 함께 최고의 결과를 얻으려면, 사용해야 한다고 생각하는 돈의 절반만 사용하고 같이하는 시간을 두배로 늘리세요.
     * Purchase the most recent tourist guidebook to your home town or region. You’ll learn a lot by playing the tourist once a year.
       당신의 홈타운 또는 지역의 최신 여행자 가이드를 구입하세요. 일년에 한번 관광객이 되면 많은 것을 배울 것입니다.
     * Dont wait in line to eat something famous. It is rarely worth the wait.
       유명한 것을 먹기위해 줄 서지 마세요. 기다릴 가치가 있는 경우가 드뭅니다.
     * To rapidly reveal the true character of a person you just met, move them onto an abysmally slow internet connection. Observe.
       당신이 만난 사람의 진정한 성격을 빠르게 보려면, 느린 인터넷 연결로 옮기고 관찰해보세요.
     * Prescription for popular success: do something strange. Make a habit of your weird.
       인기있는 성공을 위한 처방 : 이상한 것을 하세요. 이상한 습관을 들이세요.
     * Be a pro. Back up your back up. Have at least one physical backup and one backup in the cloud. Have more than one of each. How much would you pay to retrieve all your data, photos, notes, if you lost them? Backups are cheap compared to regrets.
       전문가가 되세요. 백업을 백업하세요. 적어도 하나의 물리적 백업과 하나의 클라우드 백업을 만드세요. 각각 1개 이상 보유하세요. 당신의 모든 데이터, 사진, 노트를 복구하려면 얼마를 지불할껀가요? 백업은 후회보다 쌉니다.
     * Dont believe everything you think you believe.
       당신이 믿는다고 생각하는 모든 것을 믿지 마세요.
     * To signal an emergency, use the rule of three; 3 shouts, 3 horn blasts, or 3 whistles.
       위험 신호를 보내려면 3의 법칙을 사용하세요; 3번 외치거나, 3번 경적을 울리거나, 3번 휘파람을 부세요
     * At a restaurant do you order what you know is great, or do you try something new? Do you make what you know will sell or try something new? Do you keep dating new folks or try to commit to someone you already met? The optimal balance for exploring new things vs exploiting them once found is: 1/3. Spend 1/3 of your time on exploring and 2/3 time on deepening. It is harder to devote time to exploring as you age because it seems unproductive, but aim for 1/3.
       레스토랑에서 훌륭하다고 알려진 것을 주문하나요? 아니면 새로운 것을 시도하나요? 잘 팔릴 것이라고 믿는 것을 만드나요? 아니면 새로운 것을 만드나요? 새로운 사람들과 데이트를 하나요? 아니면 기존에 알던 사람들과 약속을 만드나요? 새로운 것을 탐색하는 것과 기존에 아는 것을 활용하는 최적의 균형은 1/3 입니다. 당신의 시간의 1/3을 탐험하는 데 쓰고, 2/3의 시간은 심화하는데 사용하세요. 나이가 들수록 탐험하는데 시간을 쓰는 것은 비생산적이어서 힘들지만, 1/3이 되도록 노력하세요.
     * Actual great opportunities do not have “Great Opportunities” in the subject line.
       진짜로 좋은 기회는 ""좋은 기회""라는 제목을 가지지 않습니다.
     * When introduced to someone make eye contact and count to 4. You’ll both remember each other.
       누군가를 소개 받을 때 눈을 마주치고 4까지만 세세요. 양쪽이 서로를 기억하게 될겁니다.
     * Take note if you find yourself wondering “Where is my good knife? Or, where is my good pen?” That means you have bad ones. Get rid of those.
       ""내 좋은 칼은 어디있지? 또는 내 좋은 펜은 어디있지?"" 라고 당신이 찾는다면, 나쁜 것들을 가지고 있다는 얘기입니다. 그런 것들은 제거하세요.
     * When you are stuck, explain your problem to others. Often simply laying out a problem will present a solution. Make “explaining the problem” part of your troubleshooting process.
       뭔가에 막히면 다른 사람에게 문제를 설명하세요. 종종 단순히 문제를 늘어놓는 것만으로도 해결책을 찾게 됩니다. ""문제를 설명하는 것""을 당신의 문제해결 프로세스의 일부로 만드세요.
     * When buying a garden hose, an extension cord, or a ladder, get one substantially longer than you think you need. It’ll be the right size.
       정원용 호스, 연장 코드, 사다리를 구입할 때 필요하다고 생각하는 것보다 훨씬 긴 것을 구입하세요. 딱 좋은 사이즈가 될겁니다.
     * Dont bother fighting the old; just build the new.
       오래된 것과 싸우려고 하지 마세요; 그냥 새 것을 만드세요.
     * Your group can achieve great things way beyond your means simply by showing people that they are appreciated.
       당신의 그룹은 사람들에게 감사를 표하는 것만으로 여러분의 능력을 뛰어 넘는 훌륭한 것을 성취할 수 있습니다.
     * When someone tells you about the peak year of human history, the period of time when things were good before things went downhill, it will always be the years of when they were 10 years old — which is the peak of any human’s existence.
       누군가가 인류 역사의 전성기, 뭔가가 나빠지기전 좋았던 시기를 이야기 한다면 그것은 - 모든 인간 존재의 절정인 - 10살때 쯤 이야기 일겁니다.
     * You are as big as the things that make you angry.
       당신은 당신을 화나게 만드는 것 만큼 큽니다.
     * When speaking to an audience it’s better to fix your gaze on a few people than to “spray” your gaze across the room. Your eyes telegraph to others whether you really believe what you are saying.
       청중에게 말을 할 때, 시선을 방 전체에 ""뿌리는(spray)"" 것보다. 몇명에게 시선을 고정하는 것이 좋습니다. 당신의 눈은 당신이 말하는 것을 진짜로 믿는지를 다른 사람에게 전합니다.
     * Habit is far more dependable than inspiration. Make progress by making habits. Dont focus on getting into shape. Focus on becoming the kind of person who never misses a workout.
       습관은 영감보다 훨씬 더 신뢰할 수 있습니다. 습관을 만드는 것으로 발전하세요. 몸매 관리에 집중하지 마세요. 운동을 빼먹지 않는 사람이 되는데 집중하세요.
     * When negotiating, dont aim for a bigger piece of the pie; aim to create a bigger pie.
       협상할 때 큰 파이 조각을 목표로 하지 마세요; 큰 파이를 만드는 것을 목표로 하세요.
     * If you repeated what you did today 365 more times will you be where you want to be next year?
       오늘 한 일을 365번 더 반복하면 당신이 내년에 원하는 위치에 있게 될까요 ?
     * You see only 2% of another person, and they see only 2% of you. Attune yourselves to the hidden 98%.
       당신은 다른 사람의 2%만 보고, 그들도 당신의 2%만 봅니다. 숨겨진 98%에 자신을 맞추세요.
     * Your time and space are limited. Remove, give away, throw out things in your life that dont spark joy any longer in order to make room for those that do.
       당신의 시간과 공간은 제한되어 있습니다. 기쁨을 주는 것들이 들어갈 공간을 만들기 위해 더 이상 기쁜을 주지 않는 것들을 인생에서 제거하고, 나눠주고, 버리세요.
     * Our descendants will achieve things that will amaze us, yet a portion of what they will create could have been made with today’s materials and tools if we had had the imagination. Think bigger.
       우리의 후손들은 우리를 놀라게 할 것들을 성취할 것이지만, 그들이 만들 것중의 일부는 우리가 상상력이 있다면 요즘의 재료와 도구들로도 만들수 있었을 것입니다. 더 크게 생각하세요.
     * For a great payoff be especially curious about the things you are not interested in.
       큰 보상을 위해서는 당신이 관심을 가지지 않는 것에 큰 호기심을 가지세요.
     * Focus on directions rather than destinations. Who knows their destiny? But maintain the right direction and you’ll arrive at where you want to go.
       목적지 보다는 방향에 초점을 맞추세요. 누가 그들의 운명을 알까요? 하지만 올바른 방향을 유지하면 가고자 하는 곳에 도착할 겁니다.
     * Every breakthrough is at first laughable and ridiculous. In fact if it did not start out laughable and ridiculous, it is not a breakthrough.
       모든 혁신은 처음에는 웃기고 어리석어 보입니다. 사실 웃기고 어리석어 보이게 시작하지 않는다면, 그건 혁신이 아닙니다.
     * If you loan someone $20 and you never see them again because they are avoiding paying you back, that makes it worth $20.
       누군가에게 $20를 빌려줬는데 그가 갚지 않으려고 해서 다시 만나지 못한다면, 그 $20은 가치가 있습니다.
     * Copying others is a good way to start. Copying yourself is a disappointing way to end.
       다른 사람을 베끼는 것은 시작하는 좋은 방법입니다. 자신을 모방하는 것은 실망스러운 결말입니다.
     * The best time to negotiate your salary for a new job is the moment AFTER they say they want you, and not before. Then it becomes a game of chicken for each side to name an amount first, but it is to your advantage to get them to give a number before you do.
       새 직장에 대한 급여를 협상하기에 가장 좋은 시점은 그들이 당신을 원한다고 말한 직후이지 그 전이 아닙니다. 각자가 원하는 금액을 얘기하도록 하는 치킨게임이 되지만, 당신이 원하는 숫자를 먼저 말하기 전에 그들이 얘기하게 하는 것이 당신에게 유리합니다.
     * Rather than steering your life to avoid surprises, aim directly for them.
       놀라움을 피하기 위해 인생을 조종하는 것 보다는, 그걸 목표로 삼으세요.
     * Dont purchase extra insurance if you are renting a car with a credit card.
       신용 카드로 차를 렌트하는 경우, 추가 보험에 가입하지 마세요.
     * If your opinions on one subject can be predicted from your opinions on another, you may be in the grip of an ideology. When you truly think for yourself your conclusions will not be predictable.
       한 주제에 대한 당신의 의견이 당신의 다른 것에 대한 의견에서 추측될 수 있다면, 당신은 아마 이념에 사로잡혀 있을 것입니다. 당신이 진정으로 스스로 생각한다면, 당신의 결론은 예측할 수 없을 것입니다.
     * Aim to die broke. Give to your beneficiaries before you die; it’s more fun and useful. Spend it all. Your last check should go to the funeral home and it should bounce.
       죽을때 파산을 목표로 하세요. 당신이 죽기전에 수혜자들에게 나눠주세요; 더 재미있고 유용합니다. 다 쓰세요. 당신의 마지막 수표는 장례식장으로 가야 하고 반송되어야 합니다.
     * The chief prevention against getting old is to remain astonished.
       늙어가는 것을 막는 가장 중요한 예방책은 놀라움을 유지하는 것입니다.

   좋은 내용 소개해주셔서 감사합니다. 덕분에 편하게 읽었습니다.

     레스토랑에서 훌륭하다고 알려진 것을 주문하나요? 아니면 새로운 것을 시도하나요? 잘 팔릴 것이라고 믿는 것을 만드나요? 아니면 새로운 것을 만드나요? 새로운 사람들과 데이트를 하나요? 아니면 기존에 알던 사람들과 약속을 만드나요? 새로운 것을 탐색하는 것과 기존에 아는 것을 활용하는 최적의 균형은 1/3 입니다. 당신의 시간의 1/3을 탐험하는 데 쓰고, 2/3의 시간은 심화하는데 사용하세요. 나이가 들수록 탐험하는데 시간을 쓰는 것은 비생산적이어서 힘들지만, 1/3이 되도록 노력하세요.

   새로운 사람을 만나는 비율이 너무 작다는 걸 깨달았습니다. 노력해야겠어요.

   너무 배울게 많네요!!
   번역 감사합니다

   ""호텔방에서 모든 물건을 서랍이 아닌 눈에 보이는 한곳에 모아두세요. 그렇게 하면 물건을 두고 오지 않을 것입니다. 충전기 같은 것을 구석에 둬야 한다면 큰 물건 한두개를 그 옆에 두세요. 한개보다는 3개를 두고 올 가능성이 적기 때문입니다."" 상당히 구체적인 조언이네요.. 충전기 가끔 두고 올때가 있는데, 도움이 될 것 같습니다. :-)

   정말 좋은 내용이네요 항상 감사드립니다!

   신용카드로 자동차 렌트를 할 때 추가 보험에 가입하지 말라는 건 미국 이야기인 것 같네요.
   미국의 주요 신용카드사는 신용카드로 렌트 비용을 내면서 별도의 보험을 구입하지 않는 경우 렌터카 보험혜택을 준다는 모양입니다.
   http://m.koreatimes.com/article/862149

   제 경험을 이야기하자면, 저도 처음 잘 모르고 추가 보험을 했는데, 원래 있던 자동차 보험으로도 렌터카 사고가 커버가 된다는 사실을 나중에 알았습니다. 그 후에는 추가 보험을 안합니다.

   그리고 이전 조언 중에 신용카드를 사용하지 말라는 조언이 있었는데, 그럼에도 불구하고 신용카드를 쓰는 사람에게만 해당하는 조언이겠지요 ㅎㅎ

   올해로 3년째네요. 어째 매년 하시는 말씀이 늘어나고 있긴 하지만 여전히 좋습니다.

   케빈 켈리의 68가지 조언
   케빈 켈리의 99가지 추가 조언

   생일이 몇 주 지난뒤에야 올리게 되네요. ^^;
   항상 번역이 어렵습니다. 혹시나 틀린 부분은 지적해주세요.
"
"https://news.hada.io/topic?id=6598","마케터를 위한 이메일 전달 가능성 체크리스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        마케터를 위한 이메일 전달 가능성 체크리스트

   36가지 체크 항목 설명 및 검증 방법/관련 사이트 소개

인증 : SPF, DKIM, DMARC, PTR, SSL

   → 이 사이트에 도메인 주소를 넣으면 체크해줌

인프라

     * 스케줄 배치 전송 가능한 메일 마케팅 플랫폼 선택
     * IP 주소 종류 선택
     * 트랜잭션용/프로모션용 이메일에 대해 서로 다른 주소와 IP 사용하기
     * 피드백 루프 구독
     * 커스텀 트래킹 도메인 생성하기
     * 포스트마스터 및 abuse 용 메일 계정 만들기
     * 무료 웹메일 어드레스 사용 금지

평판

     * 도메인/IP가 블랙리스트 되었는지 확인하기
     * 전송자 평판 확인
     * 도메인/IP 웜업하기

리스트 품질

     * 이메일 리스트 검증
     * 각각의 개인/비즈니스 이메일 주소로 보내기(sales/ceo 같은거 말고)
     * 스팸 함정 피하기
     * 가짜 및 바운스된 이메일 주소들 제거

콘텐츠 품질

     * 복잡한 HTML 사용 금지
     * HTTPS 링크만 사용하기
     * 팬시한 시그내쳐 사용 금지
     * 첨부파일 넣지 말기
     * 스팸 트리거 워드들 사용 금지
     * 제목에 대문자만 사용 금지
     * opt-out 또는 구독 해제 링크 포함
     * base64 코드 사용하지 말기
     * 단축 URL 사용 금지
     * no-reply 주소 사용 회피
     * From 주소와 From 이름 매치
     * From 주소를 목적에 맞게 개인화 하기
     * 커스텀 reply-to 주소 설정

평판 유지 하기

     * 바운스레이트 5% 이하로 유지
     * 일정한 숫자의 이메일 보내기
     * 리스트에서 비활성 주소들 제거
"
"https://news.hada.io/topic?id=6585","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?
"https://news.hada.io/topic?id=6526","구글 클라우드, Cloud TPU VM을 일반 공급(GA)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글 클라우드, Cloud TPU VM을 일반 공급(GA)


   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
     * 올해 초에 공개한 TPU 하드웨어 접근가능 VM을 이제 누구나 사용 가능

     * 대규모 랭킹 및 추천 작업에 최적화
   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
       → 초기부터 도입한 Snap의 경우, 광고 추천시 ~4.65배 정도 성능/TCO가 개선
   도움 요청이나 피드백 요청도 좋습니다.
     * 새로운 TPU Embedding API 공개 : ML 기반 랭킹/추천 작업을 가속
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.
       → TF2 랭킹/추천 API

       → DLRM 과 DCN v2 랭킹 모델 오픈소스로 공개
   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
     * TensorFlow, PyTorch, JAX 지원

"
   한참만에 독립하는 솔로 친구의 집들이 입니다. 주인공을 제외하고 4명의 유부남들이 간만에 맘 편하게 방바닥에서 저녁과 한잔을 할 수 있을거 같네요.
   흠, 심지어 한 친구는 집이 먼데 다음날 다운힐 자전거 타러 바로 가야해서 집에 외박 허가증도 받았군요. 재미있을 주말이 기대됩니다.

   북바인딩 기초를 배워서 재미가 막 붙었어요.
   자르고 꼬매고 붙이는데 시간을 보낼 것 같아요.

   이번주에도 보드게임 모임이 있습니다. (어쩌다 보니 매주 사람을 바꿔가며 잡고 있네요)
   제가 가장 좋아하는 18xx 시리즈 중 하나인 18Chesapeake 를 18 초보자들과 함께 돌려볼 예정이에요.
"
"https://news.hada.io/topic?id=6597","최악을 대비하세요 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             최악을 대비하세요 (번역)

   얼마전 YC가 포트폴리오 대표들에게 보냈다는 메일의 번역
    1. 상황이 좋지않다, 이것만은 분명
    2. 최악을 대비하고, 생존을 목표로 하기
    3. 직전 라운드와 밸류에이션이 같더라도 무조건 펀딩 받아놓는 것을 추천
    4. 대표의 책임은 24개월 뒤에도 회사를 살아남게 만드는 것
    5. 주식 시장이 약세면 VC들도 투자활동을 축소
    6. 5년내 창업했다면 지난 5년간의 IR이 비정상이었을 가능성이 큼. 앞으로는 어려울 것
    7. 시리즈A를 받았지만 제품-시장-핏(PMF)을 찾지 못했다면, 찾을때까지 펀딩을 포기해야할 수 있음
    8. 가급적이면 앞으로 1년이내의 펀딩을 피할 것
    9. 경쟁자들이 실패했을 때 생존할 수만 있다면 그때가 시장 지배력을 놓일 시점

   직원 입장에서 혹시 이직을 고려 한다면 올해 안에 이직하는 것을 추천 하더군요. 아마도 올해 말부터 구인구직이 급격히 얼어붙을 것으로 보입니다.
"
"https://news.hada.io/topic?id=6520","기묘한 홀인원 보험 비즈니스의 세계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          기묘한 홀인원 보험 비즈니스의 세계

     * 골프 토너먼트에서 홀인원에는 상금이 걸린 경우가 있음
     * 아마추어에겐 12500분의 1 확률이기 때문에 잘 일어나지 않지만, 혹시나 해서 주최자들은 홀인원 보험을 가입함
     * 홀인원 보험의 역사는 100년전으로 거슬러 올라가지만, 원래의 목적은 다른 것이었음
     * 예전엔 홀인원 하는 골퍼가 클럽의 모든 사람에게 음료수를 사는게 관례였음
     * 그래서 이런 골퍼를 보호하기 위한 사업이 생겨남
     * 예전 기사를 찾아본 결과 1933년 부터 홀인원 보험 회사가 존재했음
     * 그 시절에는 골퍼는 $1.5(오늘날 약 $35)의 돈을 내면 $25(~550)까지의 음료수 비용을 보험이 내줬음
     * 미국에선 이 컨셉이 사라졌지만, 일본에는 큰 비즈니스가 되어서 홀인원을 한 골퍼는 ""미니 웨딩"" 수준의 파티를 열었음. 라이브 뮤직, 음식, 음료 및 기념하는 나무 심기 까지
     * 1990년대에는 홀인원 보험이 $220m(2300억원)규모가 되었음
     * 모든 일본 골퍼의 약 30%가 최대 $3500(400만원) 정도의 비용을 감당하기 위해 연간 $50~70 정도의 보험료를 냈음
     * 거의 비슷한 시기에 골프 토너먼트에서는 홍보를 위해서 홀인원에 점점 더 큰 상품을 제공하기 시작
     * 그러면서 홀인원 보험이 미국에 복귀하기 시작. 개인 골퍼가 아닌 돈을 내는 이벤트 주최자를 위한 보험으로

홀인원 보험이 동작하는 방식

     * 미국의 가장 오래된 홀인원 보험사인 Hole in One International에 의하면 1991년에 29살인 Gilmartin이 주최자를 위한 홀인원 보험금 비즈니스를 시작
     * 현재는 24개 이상의 홀인원 보험사가 경쟁 중(구글 검색 키워드 등으로)
     * 동작 방식
          + 골프 토너먼트가 홀인원 상품으로 $60K(7천만원)짜리 벤츠를 주기로 했다면
          + 차를 제공하는 스폰서(딜러)가 보험을 가입하고 $200~1000 정도의 보험료를 납부
          + 혹시 홀인원이 나오면 보험사가 상품 비용을 처리
     * 보험금은 3가지 요소로 계산 : 참여하는 골퍼수, 홀의 길이, 상품의 가격
          + 이 정보를 계산식에 넣으면 위험 및 수익을 계산해서 보험료가 자동 산정
          + 100명의 골퍼가 참여하는 150미터 홀에 $60K 벤츠 상품이 걸리면 보험료는 $1185
     * 보험회사는 홀인원 확률이 낮다는 전제하에 동작함
          + 아마추어의 경우 12500분의 1
          + 프로의 경우 3000분의 1
     * 매년 4억 5천만 라운드가 플레이되므로, 홀인원은 매일 발생
     * National Hole-in-One Registry 의 결과 조사에 의하면, 매년 전세계적으로 프로/아마 통산 128000번의 홀인원이 발생한다고 함
     * Gilmartin은 매년 15000개의 이벤트에 대한 보험을 처리하고 수백번의 홀인원 상금을 내고 있다고
          + 2021년 11월 3명의 LPGA 골퍼가 같은 주에 홀인원을 쳐서 각각 람보르기니 우라칸 2년 리스를 따냈음
            → 후원자는 홀인원 보험을 들어서 Gilmartin으로부터 3억6천만원의 보험금을 수령
     * 지난 30년간의 보험금중에 4개의 $1m(10억)짜리 상품도 있음. 40년동안 매년 $25k를 주는 것.
     * 상품을 주기 전에 Gilmartin 은 몇몇 증명사항을 요청
          + 행사에 참여하지 않은, 비 이해관계자의 홀인원 목격에 대한 진술서
          + 홀인원이 적법하게 이뤄졌는지에 대한 조사 (티 위치가 바뀌었는지, 홀 길이가 계약과 일치하는지 등)
     * 사기도 종종 일어남
          + 1998년에 한남자가 홀인원 해서 1931년식 캐딜락 또는 $40000의 현금을 선택 가능
          + 조사해보니 이벤트 주최자가 그 사람에게 상품을 주기 위해서 조작한 것
          + 주최자는 사기로 고소당하고 상금은 취소
     * 하지만 상금 지급이 거절되는 경우는 별로 없으며, Gilmartin은 매년 $2~4m 의 상금을 주면서도 항상 흑자를 내고 있다고

소똥, 프리스비 던지기, 하프코트 샷

     * 홀인원 보험은 ""상금 손해 배상 보험"" 이라는 더 넓은 산업의 일부
     * Gilmartin 이 운영하는 두번째 회사인 ""Odds on Promotions""는 더 이상한 범위의 것들에 대한 보험을 커버
          + 농구에서 하프타임 동안의 하프코트샷 (100분의 1)
          + 항아리안의 젤리빈 갯수 맞추기
          + 대형 호박의 무게 맞추기
          + 자동차 선루프 통과해서 프리스비 던지기 (50분의 1)
          + 볼링에서 7-10 분할 만들기
          + 고무 오리(Rubber Duck) 경주
          + 쿠키를 우유잔에 던지기 (50분의 1)
          + 미래 특정일자의 다우존스 지수 예측하기 ( 1만분의 1 확율)
          + 바 건너편에서 마티니 잔에 올리브 던지기 (50분의 1)
     * 그가 경험한 가장 기이한 이벤트는 Cow Patty Bingo
          + 약 100개로 나눠진 거대한 빙고판에서 소가 움직여서 똥을 싸는 자리의 숫자를 맞추면 빙고!
          + 미국 중부에서는 꽤 큰 경기라고..
     * 이들 대부분은 3가지 위험으로 분류 가능
          + 수학적 (동전 뒤집기)
          + 스킬 기반 (하프코트 샷)
          + 확률 기반 (스포츠팀이 게임을 이기는 것)
     * 대부분의 경우, 어떤 일이 발생할 기회를 계산하고 데이터를 이용하여 보험료를 계산 가능
     * 하지만 기존 데이터가 없는 것에 대해 보험을 처리해야할 것이 있다면, 직원들과 함께 직접 실험해보고 시나리오를 만들어 봄

     ""계속 흥미 진진합니다. 적어도 보험 기준에서는요""

   기사를 찾아보니까 한국에도 홀인원 보험 얘기가 있긴 하군요.

   홀인원 보험의 모든 것 https://www.golfjournal.co.kr/news/articleView.html?idxno=3280

   HN에 Cow Patty Bingo 정말 가본 사람? 질문에 예전에 한번씩 가봤다는 사람이 꽤 되는군요.
   Austin 에는 Chicken-Shit Bingo 도 있다고..
   https://news.ycombinator.com/item?id=31251974
"
"https://news.hada.io/topic?id=6588","Kakaotalk Matrix Bridge","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Kakaotalk Matrix Bridge

   matrix 방과 kakaotalk을 연결 해주는 bridge
   mautrix-python 기반 및 node-kakao 백엔드

   지원기능
     * 1:1 채팅
     * 그룹 채팅
     * 텍스트 메세지
     * 대부분의 미디어 공유 (사진, 비디오, 음성 메세지, 파일)
     * 답장 및 언급
     * 메세지 편집/삭제
     * 종단간 암호화

   node-kakao가 중단되어서, 언제 멈출지 모른다는 것 빼고는 완벽하네요

   전 우주 통신규약을 향한 첫 걸음이군요
"
"https://news.hada.io/topic?id=6584","코인에 대해 우리가 잘 몰랐던 여섯 가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         코인에 대해 우리가 잘 몰랐던 여섯 가지

    1. 비트코인과 나머지 코인은 다르다.
       → 비트코인과 非비트코인은 엄청난 차이가 있다. 非비트코인은 그걸 처음 만든 이들이 있다.
    2. 코인은 투자가 아니라 기부다.
       → 코인 투자는 상법의 보호를 받는 주식투자와 다르다. 하지만 스타트업 벤처투자와 흡사한 점이 있다.
    3. 코인프로젝트는 주인이 없다.
       → 코인 프로젝트는 강력한 힘을 가진 주인이 없고, 오히려 주인이 없는 것이 미덕이다.
    4. 코인은 모두 자본차익을 노린다.
       → 코인프로젝트를 시작한 기관이나 초기투자자에게는 자본차익이 훨씬 중요하다.
    5. 코인은 커뮤니티와 생태계가 중요하다.
       → 코인에서는 사람(커뮤니티)이 곧 가치이면서 가격이다.
    6. 코인은 초국가적이다.
       → 코인은 초 국가적이지만, 이를 처음 만든 사람과 기관은 국가에 속해있다.

   테라와 루나로 시작된 이야기들이지만, (코인에 대해 잘 몰랐던 분들이) 전반적으로 코인 시장의 흐름을 이해하기에 좋은듯 해서 공유해봅니다.

   1번에 나오는 엄청난 차이란 뭔가요?

   본문에 ""그러다보니 비트코인을(은) 주도하는 기관이나 집단이 없어요"" 라네요
"
"https://news.hada.io/topic?id=6592","밍치 궈, 애플이 미래 폴더블 기기를 위한 컬러 '전자 종이 디스플레이(EPD)' 기술 테스트중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         밍치 궈, 애플이 미래 폴더블 기기를 위한 컬러 '전자 종이 디스플레이(EPD)' 기술 테스트중

     * 중국 e-Ink 사가 만든 컬러 EPD를 테스트 중
     * 2025년경 아이폰과 아이패드의 중간쯤 되는 9인치 폴더블 출시 계획 중이라는 예측
"
"https://news.hada.io/topic?id=6562","AWS Lambda 와 Cloudflare Workers 의 콜드스타트 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               AWS Lambda 와 Cloudflare Workers 의 콜드스타트 비교

     * 서버리스 플랫폼들은 특정시간 비활성 상태면 컨테이너를 종료해서 첫 리퀘스트시 시간이 오래 걸리는 ""콜드 스타트 문제""를 가지고 있음
     * V8을 직접 사용하는 Cloudflare는 0ms 콜드 스타트를 위해서 조금 다른 방법을 취함*

AWS Lambda(AL) vs Cloudflare Workers(CW) vs AWS Cloudfront Function(ACF)

     * 유럽 리젼 17개국에서 10초에 1만 리퀘스트를 보내서 테스트
     * 평균 응답시간은 ACF 153 > CW 170 > AL 178 로 AWS Clodfront Function이 가장 빠름
     * 콜드스타트는 P90 응답시간 기준으로 평가시
     * CW 는 219ms, ACF는 220ms 정도로 문제가 없지만, AWS Lambda는 333ms로 콜드스타트 문제를 가지고 있음

   *CloudFlare가 Workers의 콜드 스타트 시간을 0으로 만든 방법
"
"https://news.hada.io/topic?id=6549","Meta, Jest를 OpenJS 재단으로 이관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Meta, Jest를 OpenJS 재단으로 이관

     * 가장 많이 사용되는 오픈소스 JavaScript 테스팅 프레임워크인 Jest를 OpenJS로 이관
     * 2011년에 페이스북의 채팅 기능을 JS로 재작성 중에 개발되었고, 2014년에 오픈소스로 공개
     * 초기엔 페이스북 엔지니어들에 의해 파트타임으로 관리되었고, 2018년에 Jest Open Collective를 발표해서 외부 직원들이 유지보수 시작
     * 이제 jQuery, Node.js, Electron 등을 호스팅하는 OpenJS 재단으로 이관
       → IBM, Google, Intel, Joyent, Microsoft 등이 회사 멤버로 있음
     * Jest 자체에 변경되는 것은 없음
"
"https://news.hada.io/topic?id=6572","『프로그래밍 언어 속 타입』 책 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          『프로그래밍 언어 속 타입』 책 소개

   인사이트 출판사에서 프로그래밍 경험이 어느 정도 있는 사람들을 중심으로 타입 이론을 개념적으로 다루는 책을 기획하고 있는데, 그 초고가 공개되었다고 합니다(초고라는 건 편집자 분께 여쭤 봐서 알게 되었습니다).

   한국어로 프로그래밍 언어 이론 관련된 책이 나오는 것도 흔치 않은 일이고, 책 전체 내용이 초고긴 해도 통째로 공개되는 일 자체가 흔치 않은 것 같아서 소개드리게 되었습니다. 한국어는 아니긴 하지만 같은 저자가 공저한 Introduction to Programming Languages라는 교과서도 있습니다.

   일반적이지는 않는데, 최근 증명용 언어들에 도입되는 타입들도 재밌더라구요.

   Idris 2: Quantitative Type
   https://arxiv.org/abs/2104.00480

   Cubical agda
   https://dl.acm.org/doi/10.1145/3341691

   실제 현장에서 일하는 분들에게 바로 써먹는데 도움이 될만한 책이라기 보다는
   확실히 좀 더 이론과 원리에 포커스가 있어 보입니다.
   이런 책도 틈틈히 봐줘야 되는데.. ㅜ.ㅜ

   실례가 되더라도 치킨 한마리만 사주십셔
"
"https://news.hada.io/topic?id=6625","Fly Machines - 빠른 부팅 VM을 위한 API ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Fly Machines - 빠른 부팅 VM을 위한 API

     * Firecracker로 Docker 이미지를 엣지 서버에서 VM으로 실행하는 Fly.io의 새 API
     * REST API로 300ms 안에 VM의 인스턴스 부팅 가능
     * 요청시에 Proxy가 부팅해주고, idle일때 셧다운
       → 자신만의 Functions-as-a-Service 구현 가능
     * 기존 VM과 실행시 가격은 동일. 실행하지 않을 때는 스토리지 비용만 청구

   구조가 흥미롭내요. 덕분에 주말에 공부할께 생겼습니다! Thank you!

   요즘 엣지컴퓨팅 쪽에서 가장 흥미로운 회사죠 Fly.io
   안티클라우드 방식으로, Firecracker를 이용해서 Docker 이미지를 가까운 엣지 하드웨어에서 micro-vm 으로 변환해서 실행시키는 방법을 이용하는데, 이 vm 실행 과정을 엄청 더 빠르게 만들어 버린거네요.

   Docker Without Docker - Fly.io의 기반 기술 소개
   Fly.io, 소규모 프로젝트를 위한 무료 Postgres DB 제공
   Firecracker v1.0.0 릴리즈
"
"https://news.hada.io/topic?id=6602","컬리의 흑자는 과연 결정의 문제일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          컬리의 흑자는 과연 결정의 문제일까?

     * 쿠팡의 길을 걷고 있는 컬리
     * 공헌이익의 함정
     * 컬리식 장점과 비지니스 모델과의 괴리
     * 새벽의 저주, 규모의 손해
          + 오아시스마켓, 마켓컬리, SSG, 쿠팡 의 비교
     * 클라우드를 하시겠다고요?
     * 아마존 메타의 종말
"
"https://news.hada.io/topic?id=6620","YouTubeDrive - 파일을 유튜브에 저장하기 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  YouTubeDrive - 파일을 유튜브에 저장하기 (2018)

     * 파일을 비디오 데이터로 만들어서 유튜브에 저장하는 실험
       → 유튜브는 무한 업로드 가능하니, 무제한 저장소..
     * Wolfram 언어(Mathematica) 패키지로 코딩 되어있음
     * FFMpeg , youtube-upload, youtube-dl 이용(별도 설치)

   π에 모든 수 조합이 있다며 극강의 압축률을 자랑하는 파일 시스템도 있습니다. ㅋㅋ
   https://github.com/philipl/pifs

   그야말로 애초의 개발자의 의도와는 상관없이 사용하는 기상천외한 사례네요

   개발자가 HN에 구현 관련해서 글을 남겼네요. 대학교 1학년때 프로그래밍이나 코딩 이론 잘 모르고, 시간이 많아서 개발했다고..
   https://news.ycombinator.com/item?id=31499456
"
"https://news.hada.io/topic?id=6609","Imagen - 구글의 text-to-image diffusion model","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Imagen - 구글의 text-to-image diffusion model

     * 언어를 깊은 수준으로 이해해서 사실적인 이미지를 생성하는 AI 모델
     * 사람을 대상으로 한 평가에서 OpenAI의 DALL-E 2 보다 더 선호하는 이미지를 생성
       → 품질 및 이미지-텍스트 얼라인 측면
     * 연구 논문과 예시 이미지만 공개
       → 외부에서 사용가능한 데모 버전은 윤리적인 문제등으로 인해서 공개 안 하기로

   어제 서점에서 디즈니 애니메이션 스틸컷을 삽화로 삽입한 『이상한 나라의 앨리스』 책을 봤는데, 저런 모델에 『이상한 나라의 앨리스』의 각 장면을 입력하면 어떤 결과가 출력될지 궁금합니다.

   DALL·E 2 공개
   DALL-E 2는 어떻게 동작하는가?
"
"https://news.hada.io/topic?id=6595","Fontkit - Node & 브라우저용 고급 폰트 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Fontkit - Node & 브라우저용 고급 폰트 엔진

     * PDFKit 이 사용하는 폰트 엔진
     * TrueType (.ttf), OpenType (.otf), WOFF, WOFF2, TrueType Collection (.ttc) 등 지원
     * 문자를 glyph에 매칭 지원(ligature 포함)
"
"https://news.hada.io/topic?id=6605","애플 아이폰 셀프 서비스 수리 키트 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플 아이폰 셀프 서비스 수리 키트 리뷰

   ""31그램 짜리 배터리 교체를 위해 35kg짜리 리페어킷을 보냈어요""
   ""애플은 분명 우리가 셀프 수리 하지 말기를 바라는 것 같아요""
     * 작은 도구 상자가 올거라고 예상했지만, 거대한 박스 두개가 배달 왔음
       → 내부 보호용 플라스틱으로 만들어진 펠리칸 케이스

교체 프로세스

     * 아이폰을 여는데 사용하는 실험실 장비처럼 보이는 산업용 히트 스테이션이 와서 그걸 이용
     * 화면 주위의 밀봉을 녹이는 히팅 포켓에 넣고 가열한 뒤에, 썩션 컵을 이용해서 화면을 잡아 당김
     * 작은 커터로 접착제를 잘라내고 들어올림
     * 멋진 토크 드라이버를 제공하지만, 3가지 다른 비트가 필요하며, 자성화 되지도 않아서 자꾸 나사를 떨어뜨림
     * 배터리는 교체하고, 접착 시트를 이용하여 다시 붙임
     * 거대한 스프링이 달린 프레스로 꽉 닫아줌
     * 배터리가 충전되지 않은 채로 배송 되었기에 바로 충전해야 함
     * 또한 정품 배터리를 정품으로 인식하지 못하고 ""알 수 없는 부품"" 이라고 뜸
     * 즉, 셀프 수리가 끝나면 애플의 써드파티 업체에 연락해서 부품 검증을 해야함
     * 아이폰을 진단 모드로 재부팅하고 그 회사에 원격 제어권한을 부여해야 검증 가능

결론

     * 이렇게 셀프 수리하기 위해서는 주문할 때 IMEI를 입력하고,
       수리설명서를 읽었다는걸 확인하기 위해 6자리 코드도 입력해야 하는 귀찮음이 있음
     * 가장 놀라운 것은 가격임
          + 새 배터리 가격은 $69로 애플 스토어에서 교체하는 비용과 같음
          + $49를 내고 저 도구들을 일주일간 임대해야함
          + 이 도구 세트에 대한 보증금으로 $1200을 신용카드 승인 필요. 7일내에 반환하지 않으면 이 비용이 실제 청구됨
     * 이것은 실제로는 셀프 수리를 장려하지 않으면서도 셀프 수리 정책을 지원하는 것처럼 보이게 하는 완벽한 방법임
          + 저 35kg 짜리 펠리컨 케이스가 그 증거임. 이걸 실제 미국 전역에 배송하려면 엄청난 비용이 들텐데 애플은 $49 만으로 배송 및 회수가 가능하며 부품을 검증하고 회수 전담 팀을 운영함
          + 이것은 가능하다는 것만 보여주고, 실제로는 그냥 애플스토어에 가는게 더 편해요 라고 얘기하는 것
          + 애플은 Right-to-Repair 옹호자들에게 적어도 노력했다고 얘기할 수 있게 되었음

   정말 정성스럽게 '나 하기 싫어요'를 알리는 방법이네요

   Apple, 셀프 서비스 수리 프로그램 발표
"
"https://news.hada.io/topic?id=6518","일장춘몽의 끝: 넷플릭스 추락 이면의 알력다툼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       일장춘몽의 끝: 넷플릭스 추락 이면의 알력다툼

     ""넷플릭스가 충격과 공포를 선사하면서, 업계의 제작자들과 넷플릭스 관계자들은 이제 이 OTT 공룡의 문화가 잘못되었다고 점점 목소리를 높이고 있습니다.""

     * 넷플릭스의 위기?
     * 아티스트 신디 홀랜드
     * 사업가 테드 사란도스
     * 새로운 콘텐츠 헤드 벨라 바자리아
     * 신디 홀랜드 vs 벨라 바자리아
     * 신디 홀랜드 vs 테드 사란도스
     * 예술이 아닌 사업

   “넷플릭스가 새로운 업의 표준을 제시하고 있는 것은 맞습니다. 그들은 여전히 건재해요.”

     “하지만 세상을 집어삼킬 것 같던 그들의 기세는, 이제 끝난 것 아닐까요.”

   같은글의 또 다른 번역글..이긴한데, 역자에 따라 해석하는게 조금씩 다르네요ㅎㅎ
   https://extmovie.com/movietalk/76582220
"
"https://news.hada.io/topic?id=6534","PostgresML - ML 모델 훈련 및 예측을 SQL만으로 가능하게 해주는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostgresML - ML 모델 훈련 및 예측을 SQL만으로 가능하게 해주는 오픈소스

     * ""end-to-end 머신러닝 시스템""
     * 머신러닝 모델을 기존 어플리케이션에 도입하기 위해 필요한 복잡함(특정 언어, 라이브러리, 하드웨어, 서비스 등)을 제거
     * 사용중인 Postgres 연결과 SQL을 이용해서 모델을 훈련하고, 예측값을 얻기
     * SQL을 아는 누구나 머신러닝 모델을 만들고 배포하고 유지하는 것을 목표
"
"https://news.hada.io/topic?id=6616","Uber가 Zig를 사용하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Uber가 Zig를 사용하는 방법

     * Uber는 ""zig cc"" (bazel-zig-cc)를 사용하여 C/C++ 코드를 컴파일
       → 현재는 Go Monorepo 에서만. C/C++ 툴체인 사용중인 다른 언어로도 확장 계획이 있음
       → glibc 버전 선택이 가능하며, macOS 크로스 컴파일 가능하기 때문
     * 하지만, Zig 언어 자체를 사용할 계획은 없음. 즉 Zig의 C 툴체인만 활용
     * Uber는 Zig 재단(ZSF)에 기부를 하고, 버그수정 우선순위 계약을 체결했음 ($52800)
     * zig cc 의 강점
          + 40MB 밖에 안되는 크기의 완전 밀폐형 C/C++ 컴파일러. 표준 CLang의 1/10 밖에 안됨
          + 명령줄 인수로 제공하는 glibc 버전으로 링크 가능
          + Host 와 Target이 디커플됨. 호스트 상관없이 linux-aarch64 와 darwin-x86_64 의 설정이 동일
          + musl과 링크하는 것은 그냥 또 다른 libc 버전을 선택하는 것과 같음 -target x86_64-linux-musl

   zig cc: a Powerful Drop-In Replacement for GCC/Clang
"
"https://news.hada.io/topic?id=6582","새롭게 업그레이드 된 Framework Laptop 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    새롭게 업그레이드 된 Framework Laptop 발표

     * 기존 Framework 노트북을 구매한 사용자도 인텔 11세대 CPU를 12세대로 업그레이드 가능
       → 업글킷트 별도 판매 : CPU+메인보드+탑커버(CNC 알루미늄) 로 구성
       → i5-1240p($538), i7-1260p($788), i7-1280p($1138)
     * 2.5 기가빗 이더넷 확장카드도 공개 예정

   아예 메인보드와 케이스만 팔기도 하더군요.
   인텔 nuc 같은 소형 데탑이 되는데, 랩탑의 배터리 관리가 귀찮은 저로써는 꽤 끌리는 옵션인 것 같습니다.

   정말 좋은 것 같아요. 요즘 노트북 업계의 트랜드에 모두 엿먹으라고 하는게(...)

   온보드 램도 없고, 메인보드를 갈아도 갈기 전 메인보드는 내거고, 세대 업그레이드도 가능하고... 부디 폐쇄성이 날이 갈 수록 강해지는 이 곳에 개방성을 무기로 더 컸으면 좋겠어요. 그리고 한국 구매도 가능해졌으면.. ;ㅁ ;. 배대지까지는 쓰기 싫은데..

   기존 부품들 최대한 재활용하면서 성능만 업데이트 하는 노트북이 과연 가능할까 했는데,
   일단 11에서 12세대로의 전환은 가능해졌네요.
   윈도우나 리눅스 노트북이 필요하다면 사볼만 한 것 같아요.

   모듈형 노트북, Framework Laptop 공개
   Framework Laptop 배송 시작 및 리뷰들 공개
   모듈형 노트북 Framework 마켓플레이스 공개
"
"https://news.hada.io/topic?id=6547","구글 지도, Immersive View 도입 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글 지도, Immersive View 도입 예정

     * 컴퓨터 비젼과 AI의 발달로 스트리트 뷰와 항공 이미지를 결합하여 세상의 디지털 모델을 생성
     * 이웃부터 랜드마크, 식당, 유명 장소 등을 바로 앞에 있는 것처럼 볼 수 있게
     * 스마트폰을 포함한 모든 장치에서 작동
     * 올해말 로스엔젤레스, 런던, 뉴욕, 샌프란시스코, 도쿄 부터 시작해서 더 많은 도시가 제공될 예정
"
"https://news.hada.io/topic?id=6635","Remult - 풀스택 Typescript용 CRUD 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Remult - 풀스택 Typescript용 CRUD 프레임워크

     * Typescript Model Type을 이용해서 3가지를 제공
          + Secure REST API
          + Type-safe 프론트엔드 API 클라이언트
          + Type-safe 백엔드 쿼리 빌더
     * React/Angular/Vue/Next.js 예제 제공
"
"https://news.hada.io/topic?id=6571","FormKit - Vue3 폼 작성용 프레임워크 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    FormKit - Vue3 폼 작성용 프레임워크 오픈소스

     * 스캐폴딩, UI, 데이터 검증, 폼 생성, 데이터 관리 기능을 하나의 패키지로
     * Full SSR 지원
     * 간편한 백엔드 에러처리
     * 올바른 입력에 대한 서버 오류 메시지 표시
     * 20개 이상의 내장 validation 룰
     * 테마 & 스타일링. Tailwind 지원

   소개 페이지 무척 잘 만들었네요. 꼭 써보고 싶어지게 합니다.
"
"https://news.hada.io/topic?id=6521","SGTS - 싱가폴 정부 테크 스택싱가폴 정부 테크 스택

     * 지속적으로 변화하는 시민/비즈니스의 요구사항에 대응하는 보안시스템을 구축하기 위해 개발 프랙티스를 현대화
     * 3가지 목표 : 민첩성 개선, 품질 및 규정 준수 향상, 비용 절감

SGTS : Singapore Government Tech Stack

     * 개발 프로세스를 간소화 및 단순화 하고, 범정부적으로 코드를 재사용하여 안전한/고품질의 어플리케이션을 개발할 수 있도록 하는 플랫폼 도구 세트
     * Service Layer
          + Analytics : Personalize, WOGAA(Whole-of-Government Application Analytics, GA와 비슷)
          + Design : SGDS(SG Gov Design System)
          + Digital Identity : Corppass(G2B), Identiface(생체인증), Singpass Login(무암호 로그인), MyInfo(개인 데이터 플랫폼), Verify(QR 인증), Authorise, Notify, Sign
          + IoT : DECADA IoT Stack(Device Management, Control and Data Acquisition Systems)
          + Data Science : VAS(Video Analytics), Transcribe, GovText, Fraud Detect
          + Data Transfer : Cloud File Transfer, Video Exchange
     * Base Layer
          + Communications : APEX on Prem(API Exchange), ADEX(Asynchrounous Data Exchange), APEX Cloud, APEX Marketplace
          + Toolchain : SHIP-HATS(Secure Hybrid Integration Pipeline - Hive Agile Testing Solutions, CI/CD 솔루션)
          + Runtime : Container Stack, IaC
          + Monitoring : StackOps(Elastic + Logstash + Kibana), Gov Cyber Sec Ops Centre, Cloudscape, Endpoint Det & Res
          + Service Management : Developer Portal, SEED & TechPass, TechBiz

   각각의 세부페이지에서 향후 로드맵이나 담당PM, 관련 문서들 링크까지 잘 정리되어 있습니다.
   단어들만 봐도 요즘 주요 기술 키워드들을 많이 반영한 것 처럼 보이네요.
"
"https://news.hada.io/topic?id=6601","Summari - 웹문서 요약 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Summari - 웹문서 요약 서비스

   Chrome 확장을 설치하면 현재 보고 있는 페이지를 요약해 줍니다.

   아직 영어밖에 없지만, 1차로 요약하고 papago로 번역하면 빠르게 정보를 파악할 때 나름 도움이 될 것 같습니다.

   항상 요약하시느라 수고 하시는 정혁님께 조금이라도 도움이 되었으면 좋겠습니다.

   앗 ㅎㅎ 고맙습니다.
   요약은 꽤 훌륭하게 해주는데, 한달에 2개 인게 아쉽네요 ^^

   제가 처음 했을 때에는 크게 제약이 없었던거 같은데... 아쉽네요.
   아무튼 늘 응원하고 감사드립니다.~ ㅎ
"
"https://news.hada.io/topic?id=6516","Show GN: Korean FE Article: 한글로 된 프론트엔드 글을 전송해주는 메일링 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: Korean FE Article: 한글로 된 프론트엔드 글을 전송해주는 메일링 서비스

   안녕하세요. Korean FE Article을 운영하는 한정입니다.

   Korean FE Article은 프론트엔드 관련 글을 큐레이팅하고 번역해서 공유하는 활동입니다.

   매주 3-4개의 글이 번역되고 있고 총 8명의 팀원이 함께 번역을 진행하고 있습니다.
   현재 메일링 서비스를 진행한 지는 100일 정도 되었고 30개 이상의 글이 번역되었습니다.

   저희 글이 프런트엔드 생태계에 조금이나마 도움이 되었으면 좋겠다는 마음에서 활동하고 있는데요. 여기 계신 분들도 함께 글을 읽고 이야기했으면 좋겠다는 생각에서 공유하게 되었습니다.

   👉 구독하기: https://kofearticle.substack.com/
   👉 RSS: https://kofearticle.substack.com/feed

   감사합니다. ㅎㅎ

   고맙습니다 :D

   와 정말 애용하고 있습니다~ 좋은 서비스네요 ^^!!

   저는 rss로 구독완료ㅎㅎ

   와 저도 구독했어요~~👍

   최고네요 최고!

   오 감사합니다 ㅎㅎ 저도 구독 완료했어요

   아묻따 구독 완료입니다!

   와 좋네요! 저도 구독했어요.

   오 제가 구독해놓은 서비스를 여기서 보게되니 반갑네요!!
   긱뉴스와 함께 제 아침을 책임져주셔서 감사합니다 :)
"
"https://news.hada.io/topic?id=6561","Plain-text 인터넷이 온다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Plain-text 인터넷이 온다

     * 웹은 쓰레기로 넘쳐남 : 팝업, 자동 재생 비디오, 쿠키 배너, 가입 요청..
     * Plain Text Sports는 텍스트 만으로 각종 스포츠 경기 결과를 보여줌
     * 아직 돈은 못벌지만, 텍스트 뿐이기 때문에 아마존 CDN 비용이 월 50달러에 불과
     * HN/DF 게재된 후 100배 증가해서 하루에 10만뷰
     * 언젠가는 광고가 들어가긴 하겠지만, 그마저도 아마 플레인 텍스트 광고일 것
     * 프론트엔드는 간단하지만, 백엔드는 복잡
     * 이제 개발자/디자이너들이 기존 인터넷에 반항하는 모습을 보이기 시작
          + 소셜 네트워크는 시간순 피드를 복원하고
          + 읽기 모드는 모든 브라우저가 구현하고 있으며
          + Obsidian 같은 생산성에 집착하는 사람들이 사용하는 도구도 모두 텍스트 기반

   요 두 웹사이트가 생각나네요
   https://motherfuckingwebsite.com
   http://txti.es/
   첫번째 사이트는 말이 좀 험하긴 하지만 결국 하고자 하는 말은 마지막에 적혀 있습니다.

   저도 텍스트 좋아해서.. 예전에는 lynx나 w3m 같은 브라우저도 썼지만...

   돈 벌기는 글렀네요....

   플레인 텍스트를 좋아하는 입장이라 굉장히 공감되네요.

   Plain-text 라고는 하지만,
   전 오히려 craiglist 같은 스타일이 적당해 보입니다.
   https://seoul.craigslist.org/?lang=ko

   적절한 Typography only 사이트들이 좋은거 같아요..
   에디터도 복고풍으로 다시 vi m같은 tui 중심의 modal editing으로 넘어가면 좋겠네요

   emacs gui로 쓰고 있는 1인

   그와중에 링크된 사이트는 가입 유도와 쿠키 배너로 피로도가..

   https://plaintextsports.com/
   웹에서 tui가 좋은지는 모르겠네요. 긱뉴스 정도가 괜찮은듯 ㅎㅎ

   웹이라면 TUI까지는 좀 오버인것 같고, 긱뉴스 같은 텍스트 위주의 깔끔한 사이트가 좋은것 같습니다.

   그냥 홍보성 기사 처럼도 읽히지만..
   저는 Plain-Text 인터넷을 매우 좋아하는 터라 기사를 올려 봅니다.

   정말 광고 이미지들 없이 깔끔한 인터넷 사이트들이 더 많아지면 좋겠어요.
"
"https://news.hada.io/topic?id=6580","PyTorch, 맥(애플실리콘 M1)에서 GPU 가속 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PyTorch, 맥(애플실리콘 M1)에서 GPU 가속 지원

     * 애플의 Metal 개발팀과 협업으로 PyTorch가 맥에서 GPU 가속 가능해짐
          + MPS(Metal Performance Shader)를 PyTorch의 백엔드로 활용
     * VGG16 으로 CPU 사용했을 때와 비교시 Training은 8배, Evaluation은 21배의 성능 향상을 보임

   살포시 파이토치 한국 사용자 모임의 글도 덧붙여봅니다 ^^;

   https://discuss.pytorch.kr/t/apple-m1-pytorch-gpu/276

   Apple M1 기기에서 PyTorch 1.12를 설치하고 MPS 장치를 사용하는 방법을 정리하였습니다.

   conda에서 arm64를 지원하지 않아 사용이 어려우실 수 있는데, 지원 여부 확인 및 해결 방법 등을 함께 정리하였습니다.

   https://discuss.pytorch.kr/t/apple-m1-gpu/286
"
"https://news.hada.io/topic?id=6621","RustDesk - 오픈소스 TeamViewer 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     RustDesk - 오픈소스 TeamViewer 대체제

     * 오픈소스 가상/리모트 데스크탑 소프트웨어
     * 맥/윈도우/리눅스/안드로이드/iOS/웹 클라이언트 지원
     * 랑데뷰/릴레이 서버 셀프 호스팅 가능
     * Rust 코드
     * 무료 퍼블릭 서버 제공 : 서울/싱가폴/달라스

   rpm 패키지를 제공하지 않네요..
   최근 리눅스 진영은 Appimage 나 flatpak 을 활용해서 다양한 배포판을 지원하는게 추세인 것 같던데..

   아 깃릴리즈 가보니 있군요 ㅎㅎ 헌데 fedora 28 과 centos 8 이라니...

   wayland 에선 동작하지 않는다며 ""fix it"" 버튼을 만들어 뒀는데
   확인해보니 wayland 를 disable 하는 버튼이네요..
   충격받았습니다.. 내 데스크탑 설정을 마음대로 바꾸지마..

   가끔 그러는 소프트웨어가 있죠.
   제가 직접 겪은 건 아닌데, 예전에 팔리던 모 TV 튜너 카드의 윈도우용 소프트웨어는 제멋대로 시스템 성능 옵션의 [마우스로 끄는 동안 창 내용 표시] 옵션을 꺼 버리는 동작이 있어 원성을 샀다고 들었습니다.

   와... teamviewer 대체제가 있다니 오픈소스

   한국서버가 있는게 신기하네요

   한번 써봐야겠네요. 정말 멋지네요.
"
"https://news.hada.io/topic?id=6538","검색의 미래는 부티크다 (a16z 글 번역 및 요약)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     검색의 미래는 부티크다 (a16z 글 번역 및 요약)

     * 요즘 Google 검색은 매우 실망스럽다
       → 선별 노력, 신뢰 이슈, 검색의 상업주의, 탐색 비용 이슈
     * 대안적 검색 : DuckDuckGo, Neeva
     * 부티크 검색 : 검색의 기회는 거대한 수평적 애그리게이터로 구글을 정면 공격하는 것이 아니라 새로운 방식으로 사물을 색인화하고, 선별하고, 정리하는 '부티크(Boutique)' 검색 엔진을 구축하는 것

Vertical Search Aggregators (수직 검색 애그리게이터)

     * 구글검색의 단점
     * 버티컬 검색의 강점
     * 버티컬 검색에서의 개선 필요점
     * Yelp의 사례

큐레이터, 큐레이터

     * 큐레이션의 현실
     * 오락에 갇힌 큐레이션
     * 새로운 기회 - 목표 지향적인 인터페이스를 동반한 큐레이션

부티크 검색엔진이 차세대 큐레이션!

     * 부티크 검색엔진의 의미
     * 부티크 검색엔진의 주요 사례
       → Spotify, Wirecutter, Thingtesting, On Deck, Tegus

검색은 어렵다 - 계속 남는 질문들

     * 가치 제안이 잡음이 아닌 신호인 경우, 신호를 어떻게 확장하는가?
     * 이 새로운 검색 엔진 물결의 사업 모델은 무엇인가?
     * 큐레이터는 누가 큐레이션하나?
     * (새로운) 검색 엔진을 처음엔 어떻게 찾아야 하나?

   글 제목이 흥미로워 나중에 읽으면서 요약해야지 했는데, C-Rocket 에서 잘 요약해주셨네요!
"
"https://news.hada.io/topic?id=6618","스테이블하고 싶었지만 그러지못한 알고리즘 스테이블코인들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     스테이블하고 싶었지만 그러지못한 알고리즘 스테이블코인들

     * 베이시스(Basis)
          + 2017년 8월 시작한 첫 알고리즘 스테이블코인 실험 중 하나
          + 규제 당국 개입으로 KYC 및 검증된 투자자들에게만 발행해야 한다고 요구
          + 베이시스는 자금을 투자자들에게 돌려줬고 프로토콜을 출시하지 않았음
     * 엠프티 셋 달러(Empty Set Dollar)
          + 2020년, 스스로를 디파이 영역에서 리저브 통화(the reserve currency)로 행동할 알고리즘 스테이블코인으로 묘사
          + 2020년 4분기엔 1달러 근처였지만, 마지막에는 0.005달러
     * 베이시스 캐시(Basis Cash)
          + 약 2주 동안만 1달러 근처에서 거래
          + 2021년 첫 6개월 동안 90% 이상 무너졌고, 마지막에는 0.008달러에 거래
     * 앰플포스(Ampleforth)
          + 베이시스에서 영감을 얻었던 또 다른 알고리즘 스테이블코인
          + 2019년 중반 공개, 0.4 달러까지 떨어졌다가 2019.11~2020.02 까지는 1달러로 회복
          + 2020년 2/3분기에 2달러에서 0.7을 왔다 갔다
          + 현재는 1.1달러로 하루 거래규모 220만 달러
     * 뉴트리노 USD(Neutrino USD)
          + 2022년 2월 공개하고 빠르게 논쟁거리가 됨
          + 4월 초 익명 트위터 계정이 뉴트리노 팀이 웨이브스(WAVES)를 펌핑하고 USDN 시가 총액을 끌어올리기 위해 바이레스(Vires) 머니 마켓 프로토콜을 사용한다고 주장
          + 이후 웨이브스 가격이 붕괴하고, USDN도 페깅이 깨짐
          + 지난달초 0.6 이었다가 현재는 0.98 과 0.99 달러 사이에서 거래중
     * UST(테라)가 고생했던 극심한 변동성은 알고리즘 코인도 페깅이 깨지는 결과로 이어질 수 있다는 것을 보여주는 증거임
"
"https://news.hada.io/topic?id=6543","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   2년만의 출장에서 집으로 복귀합니다. 간만의 출장이고 줌으로만 얼굴보고 일했던 동료도보니 좋더군요. 더 좋은건 집으로 돌아가는 좋은 기분을 다시 느끼는것이구요.

   최근 너무 바쁘게 살다보니 좀 휴식의 시간이 필요할거같아서,,
   이번 주말은 운동하고 집에서 푹 쉴 예정입니다!
   시간되면 여름을 대비한 옷정리도 좀 하려구요

   여럿 모이는 외부 모임 제한이 풀려서요.
   꽤 오래 만나지 못했던 IT 업계 지인들과 만나는 모임을 재개되어 거기에 나갔다 올 예정입니다. 두근두근

   그리고, 긱뉴스에 올릴 긴 글들이 좀 밀려서 주말엔 그거 번역을 해야 할 것 같아요.
"
"https://news.hada.io/topic?id=6536","State oftate of CSS 2022

   Google I/O 에서 발표한
   2022년 CSS의 상황에 대한 발표입니다.

   이렇게 모아두니 2022년에도 개선된 게 정말 많군요!
"
"https://news.hada.io/topic?id=6514","구글, 커스터마이징 가능한 Roboto Flex 폰트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글, 커스터마이징 가능한 Roboto Flex 폰트 공개

     * 사용자가 유연하게 설정해서 사용가능
     * 무려 12개의 axe를 가진 Variable Font(가변폰트)
       → User Axes : Weight, Width, Slant(Italic), Grade, Optical Size
       → Parametric Axes : Counter Width, Thin Stroke, Lowercase Height, Uppercase Height, Ascender Height, Descender Depth, Figure Height

   예전에 사용자 PC의 폰트가 설치되어 있지 않을 때 대체폰트 정책 때문에 레이아웃이 많이 깨진 적이 있는데요. 이걸 사용해서 너비나 높이가 동일한 폰트를 만들 수 있다면 꽤나 괜찮을 것 같다는 생각을 했습니다.

   구글 Variable Fonts 지원 시작
   Variable Font - 배리어블 폰트
   Variable Fonts Primer - 가변 글꼴 입문서
"
"https://news.hada.io/topic?id=6603","2022년의 크립토씬, 어디까지 왔는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2022년의 크립토씬, 어디까지 왔는가?

   a16z의 2022 State of Crypto 보고서 번역
    1. 지금은 가격-혁신 4번째 사이클의 한 가운데에 와 있습니다.
    2. 크리에이터들에게, 웹 2.0보다 웹 3.0이 압도적으로 좋은 환경이 될겁니다.
    3. 크립토 프로젝트가 점점 실생활과 가까워집니다.
    4. 이더리움은 확실한 선구자이나, 여러 경쟁 프로젝트가 나타나고 있습니다.
    5. 그럼에도 불구하고, 이 시장은 여전히 초기 단계입니다.

   Web3에 대한 나의 첫인상
   Web3는 그냥 비싼 P2P입니다
   귀도 반 로섬 : Web3는 불타서 죽어버리게 두세요
   웹2.0 창시자 ""웹3에 흥분하기엔 너무 이르다"" 왜?

   Web3 에 대해서는 다양한 의견이 있습니다. 양쪽 의견들을 다 들어보시면 좋을 것 같아요.
   근데 Web3 옹호쪽 의견은 다양하게 번역되는 데에 반해, 반대쪽 의견들은 국내에서 잘 번역 및 공유가 안되는 듯 해서 긱뉴스에 반대쪽 의견글이 더 많은 것 처럼 보이는 효과가 있는듯 합니다. ^^;
"
"https://news.hada.io/topic?id=6615","Blaze: A Rust-based vectorized accelerator to speed up your Spark jobs ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Blaze: A Rust-based vectorized accelerator to speed up your Spark jobs
"
"https://news.hada.io/topic?id=6624","리눅스 커널 해커가 뒤져본 Fuchsia OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       리눅스 커널 해커가 뒤져본 Fuchsia OS

     * 구글의 새 범용 오픈소스 OS를 공격자 관점에서 평가
     * Fuchsia의 오버뷰 및 보안 아키텍처 리뷰
     * Zircon 마이크로 커널
          + 워크플로우 설명 및 GDB/QEMU로 디버깅하기
          + Exploit 개발 실험 : Fuzzing, Memory Corruption, Kernel 제어흐름 하이재킹 , 루트킷 설치

   Google Fuchsia OS 오픈소스 모델 변경
   구글 Fuchsia OS, Nest Hub를 통해 공식 릴리즈
"
"https://news.hada.io/topic?id=6548","일런 머스크, 트위터 딜 잠시 중단 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          일런 머스크, 트위터 딜 잠시 중단

     * 트위터의 1사분기 발표에서 일 활동 계정의 5%가 스팸/가짜 계정이라는 추정 때문
     * 하지만, 자신은 아직 트위터 인수에 전념하고 있다고

   인수를 정말로 중단할 경우 위약금이 1조 2천억원(10억달러)여서.. 핑계를 찾은 것 같기도 합니다만..
"
"https://news.hada.io/topic?id=6531","USB Cheat Sheetheat Sheet

     * USB 1.1 부터 USB4 까지의 스펙들 정리
       → 공식 명칭, 별명, Signal Gbps, Signal MiB/s
     * USB-A/B/C 커넥터 핀을 그림으로 정리

   그림에서 Type-B도 Type-A로 잘못 표기가 되어 있군요

   이거 보니까 생각나는 USB Type-C 설명하는 만화:
   https://m.ruliweb.com/community/board/300143/read/41417913
"
"https://news.hada.io/topic?id=6541","2022 파이썬 언어 써밋 : Python without the GIL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                2022 파이썬 언어 써밋 : Python without the GIL

     * GIL(Global Interpreter Lock)이 없는 파이썬을 만들어 보려는 nogil 현재 상황 정리
     * Sam Gross가 10월 2021년 PoC 코드(GIL 없는 멀티쓰레디드 파이썬)를 공개
     * 2022 서밋에서 파이썬 3.12에 새로운 컴파일러 플래그를 제안(기존 제안은 런타임 플래그)
          + 코어 개발자들로 부터 흥분 과 질문이 뒤섞인 반응
          + 샘 그로스는 nogil이 CPython의 별도 포크로 가는 것은 반대

     ""파이썬의 가치는 에코시스템이고, 그렇게 하는 것은 성공으로 가는 길이 아님. GIL을 없애는 것은 정말 혁신적인 시도임. 대부분의 파이썬 프로그램은 멀티코어에서 실행시에 쓰레드를 사용하지 않음. nogil이 성공하려면 커뮤니티 전체가 이를 받아들여야 함""

   런타임 플래그가 아니라 설치 시 컴파일 플래그로 nogil을 넣는건 확실히 언어의 버전이 올라갈수록 더 복잡한 언어가 될 수도 있을 것 같아서 힘들어보이네요
     * [Python] GIL (Global Interpreter Lock) 이해하기 https://it-eldorado.tistory.com/160
     * Sam Gross 의 Multithreaded Python without the GIL 디자인에 대한 설명 문서
       https://docs.google.com/document/d/…
"
"https://news.hada.io/topic?id=6563","Aspect - React용 Visual IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Aspect - React용 Visual IDE

     * React 컴포넌트를 비쥬얼하게 디자인하고 코드베이스에 동기화
          + HTML 엘리먼트를 드래그앤 드롭
          + MaterialUI 및 Tailwind 지원 예정
     * Aspect CLI로 컴퍼넌트를 코드에 동기화
     * Figma, Sketch, AdobeXD 에서 디자인 임포트 지원 예정
"
"https://news.hada.io/topic?id=6510","패스워드 없는 미래가 오고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           패스워드 없는 미래가 오고 있다

     * 애플, 구글, 마이크로소프트가 ""Passkey"" 표준으로 암호를 없애려는 ""공동 노력""을 시작
     * FIDO 및 W3C에서 만든 ""암호 없는 로그인 표준""의 지원을 확대
     * 사용하는 OS 플랫폼 이나 브라우저 상관없이 지원
       → 새 장치를 포함, 많은 장치에서 모든 계정을 다시 등록할 필요없이 FIDO 로그인 자격증명(Passkey)에 자동으로 접근 가능
       → 모바일 기기에서 FIDO인증을 사용해서 가까이에 있는 기기에서 앱/웹사이트 로그인 가능

   현재 구글이나 애플에서 신뢰할수 있는 기기로 모바일 기기를 선택하는 방식과 비슷합니다.

   글 제목은 Protocol의 기사 The password-free future is coming 에서 가져왔습니다.
   상세 내용은 FIDO Alliance 것이 더 좋네요.
"
"https://news.hada.io/topic?id=6569","Wazero - Go 개발자를 위한 종속성 없는 WebAssembly 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Wazero - Go 개발자를 위한 종속성 없는 WebAssembly 런타임

     * WebAssembly 1.0 스펙 호환
     * 어떤 것에도 종속성이 없고, CGO에 의존하지 않음
       → 즉, 다른 언어로 애플리케이션을 실행하면서도 크로스컴파일 유지 가능
     * Go 어플리케이션에서 Wazero를 임포트 하고 다른 언어로 작성된 코드를 실행
     * 1.0은 2022/Q3 출시 예정
     * 인터프리터/컴파일러 두가지 런타임으로 제공되며 맥/리눅스/윈도우 지원
"
"https://news.hada.io/topic?id=6577","Beautify GitHub Profile","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Beautify GitHub Profile

     * 깃헙 프로필을 이쁘게 꾸며주는 각종 도구 및 Repo들 모음
     * 뱃지 : 기술, 방문자, StackOverflow, 통계..
     * Widget : Todoist, GitHub Stat, Wakatime, Profile Activity, Metric,..
"
"https://news.hada.io/topic?id=6627","Imagen-pytorch - 구글 Imagen을 Pytorch로 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Imagen-pytorch - 구글 Imagen을 Pytorch로 구현

     * 구글이 공개한 Text-to-Image 모델인 Imagen은 논문과 예시 이미지만 공개했음
     * 해당 논문의 내용을 가지고 PyTorch로 그대로 구현해 본 오픈소스
     * T5(Text-to-Text Transfer Transformer)는 Huggingface 이용
"
"https://news.hada.io/topic?id=6560","`curl wttr.in` - 터미널에서 날씨 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      `curl wttr.in` - 터미널에서 날씨 보기

     * 콘솔 중심 일기 예보 서비스 (브라우저 및 API로도 가능)
     * 현재 위치/언어 기반으로 날씨 전송
     * 특정 도시 / 3자리 공항코드 / 랜드마크(에펠탑) 등으로 조회 지원
     * 여러 포맷 지원
          + 터미널 : ANSI curl wttr.in/Seoul
          + 터미널 & 스크립트 : Plain-text curl wttr.in/icn?T
          + 브라우저 : HTML https://wttr.in/~Eiffel+Tower
          + 그래픽 뷰어 : PNG wget wttr.in/Seoul.png
          + 스크립트 & API : JSON curl wttr.in/Seoul?format=j1
          + Prometheus Metric : curl wttr.in/Seoul?format=p1

   이런 것도 있네요.

   터미널$ finger seoul@graph.no
"
"https://news.hada.io/topic?id=6546","밍치 궈, 애플이 아이폰 15부터는 USB-C를 도입할 것이라고 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 밍치 궈, 애플이 아이폰 15부터는 USB-C를 도입할 것이라고 주장

     * 2023년 하반기에 나올 예정인 아이폰 15 부터는 USB-C를 도입할 것
     * 기존에는 MiFi 및 방수 문제로 라이트닝을 고수할 것이라고 얘기했지만, EU가 애플에 압력을 가하는등의 이유로 애플이 어조를 바꿨다고
     * iPad에서는 이미 USB-C로 사용하고 있음
     * 초기에는 애플이 MagSafe로 전환하면서 아예 포트를 제거할 수 있을때 까지 라이트닝을 유지할 것이라고 봤지만, EU의 압력으로 인해 변경될 수 있을 것이라고
"
"https://news.hada.io/topic?id=6507","JSPyBridge - Node.js와 Python의 상호운용을 위한 브릿지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               JSPyBridge - Node.js와 Python의 상호운용을 위한 브릿지

     * Node에서 파이썬을 실행하고, 파이썬에서 Node.js 실행 가능
     * 비동기/동기 함수를 호출하고, 객체 속성을 네이티브처럼 가져오기
     * 내장 가비지 컬렉션
     * 임의인자 포함한 양방향 콜백
     * Iteration 및 예외 처리 지원
     * (JS에서 파이썬 호출) Python class extension and inheritance : Pytorch,Tensorflow 예제
     * (파이썬에서 JS호출) Native Decorator based Event-Emitter 지원
     * (파이썬에서 JS호출) First-class Jupyter Notebook/Google Colab support
"
"https://news.hada.io/topic?id=6632","GoodWill 랜섬웨어, 감염된 피해자에게 기부 및 좋은 행동을 강요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GoodWill 랜섬웨어, 감염된 피해자에게 기부 및 좋은 행동을 강요

     * 감염된 PC의 파일을 암호화 한 뒤 해독키를 요구하면서 3가지 사회 활동을 시킴
          + 노숙자에게 새 옷을 기부하고, 영상으로 기록한 뒤 소셜미디어에 게시
          + 5명의 불우한 아이들을 도미노/피자헛/KFC에 데려가 음식을 사주고, 사진/비디오로 기록해서 소셜미디어에 게시
          + 긴급한 치료가 필요하지만 비용을 감당못하는 환자에게 재정 지원을 해주고, 그 과정을 오디오로 녹음한 걸 자신들에게 보낼 것
     * GoodWill 랜섬웨어 분석
          + .NET으로 작성되고 UPX로 압축되어 있음
          + 동적 분석을 방해하기 위해 722.45초간 슬립
          + AES_Encrypt 로 암호화
          + ""GetCurrentCityAsync"" 함수를 이용해서 현재 도시를 알아내려고 함
          + 감염되면 문서, 사진, 비디오, DB등을 암호화하고 해독 키 없이 접근 불가능하게 만듦
          + 암호해독 키를 얻기 위해서는 위의 3가지 행위를 순서대로 하는 걸 요구
          + 아마도 인도의 누군가가 오픈소스 랜섬웨어인 HiddenTear를 수정한 것으로 보임

   대단하내

   굉장허네
"
"https://news.hada.io/topic?id=6513","가장 많이 사용하는 셀프호스트 어플리케이션은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       가장 많이 사용하는 셀프호스트 어플리케이션은?

     * Nginx Proxy Manager
     * Portainer : Docker 관리자
     * Ghost : 웹 콘텐츠 플랫폼
     * FileBrowser : 웹 기반 파일 관리자
     * BookStack : 개인 위키
     * HumHub : (개인용으로 사용 가능한) 오픈소스 페이스북. 메모/사진/비디오 등을 마이크로 블로그 스타일로 포스팅
     * AzuraCast : 24시간 음악 재생. Proxmox + Echo Show
     * Tube Archivist : 셀프호스트 Youtube 미디어 서버(어떤 콘텐츠를 보여줄지 관리 가능)
     * Grafana
     * Umami : 설치형 웹 분석 도구
     * Linkding : 북마크 관리자
     * Audiobookshelf : 오디오 북 & 팟캐스트 호스팅
     * Emby : 홈 비디오 서버

   대부분을 Proxmox 하이퍼바이저로 관리

   Outline이라는 설치형 오픈소스 Notion도 있습니다

   Bookstack은 위키처럼 쓸 수 있긴 하지만 정확히 말하면 일종의 경량 책 저작툴정도 됩니다.
   다른무엇보다 Depth 제한이 있어서 Book - Chapter - Page까지만 만들 수 있습니다.

   좋은 서비스가 많네요.

   Proxmox 좋아요. 홈랩용 클러스터 구성엔 이만한게 없네요 ㅎ

   처음들어보는데 셋업과 유스케이스 알려주세요!

   유명한 Type-1 하이퍼바이저로, VMWare ESXi의 오픈소스 대용품입니다.
   VMware Workstation이나 버추얼박스와 다르게 순수하게 VM들을 돌리기 위한 전용 리눅스 OS입니다.
   그 자체로는 데스크탑 환경도 없는 매우 경량화된 OS이고, Web GUI로 연결해서 VM들을 관리합니다.

   그 자체로 아무것도 하지 않는 OS이기 때문에 오히려 VM들에게 하드웨어 리소스 주기가 용이합니다.
   특히 PCI Passthrough 기능이 매우 간단하기 때문에, Proxmox위에다가 하드웨어 GPU가 통째로 할당된 윈도우 VM을 돌릴 수 있어요.

   또한 클러스터 관리 기능이 뛰어난데, 여러대 컴퓨터에 Proxmox 를 설치하고 VM 을 각 컴터 이리저리 왔다갔다 하면서 돌리기도 용이합니다. 그래서 홈랩용 쿠버네티스를 설치해서 운용하기도 편해요.

   셋업은 유투브에 Proxmox 검색해보시면 많이 나와요 ㅎ
   https://youtu.be/azORbxrItOo

   HN 원글의 댓글에도 다른 도구들 추천이 많습니다.
   https://news.ycombinator.com/item?id=31260061
     * Nextcloud - for caldav and carddav calendar, contacts, and tasks
     * Xbrowsersync - sync bookmarks across device
     * Synchthing - backup data from my phone. I use Neo Backup to take a snapshot of all apps, so the phone should theoretically be restorable from scratch.
     * Jellyfin - Spotify replacement. The Finamp app is fantastic.
     * Home Assistant - automate my media center, as well as control outdoor lights and door locks, and check if any doors or windows are open or unlocked when I'm away.
     * OPNSense on a protectli box - amazing open source gateway software that does everything.
     * AdGuard Home (on OPNSense) - DNS based ad blocking
     * Wireguard (on OPNSense) - allows me to have an always on partial tunnel VPN on my phone and laptops that allows access to home services while remote, and also allows me to use my Ad Guard DNS.
     * HAProxy + LetsEncrypt (on OPNSense) - setup to provide subdomains for each of the services at home. Only a couple are public (contacts and calendar), but the rest become available when the VPN is on.
     * Smokeping - use it to collect data to rub into Spectrums face when they go down.
     * Pintry - Pinterest clone
     * cadvisor - simple graphs of resource consumption, insights per docker stack
     * cyberchef - a LOT of handy operations packed into one small app. Encode/decode any secrets you need and don't bother about privacy
     * dozzle - logs browser from all docker stacks
     * gogs - git mirror
     * heimdall - all apps main panel
     * minio - private S3 for my side projects
     * nextcloud - private google drive / dropbox
     * photoprism - photo management
     * pypiserver - private pypi
     * registry - docker registry (with UI)
     * traefik - reverse proxy of all these services
     * portainer - easily manage all of the above.

   도커 이미지들
     * adguard/adguardhome - Blocks ads on devices that don't support ad block extensions
     * charlocharlie/epicgames-freegames - Bot that will automatically ""purchase"" free games from the epic game store. I have it setup to telegram me a link to enter the captcha.
     * chuckmacdev/adrfinder - Checks for Disney dining reservations and emails a link to reserve
     * fusengine/apaxy - Decent web file browser
     * linuxserver/*arr - ya'll know why :)
     * linuxserver/smokeping - Really useful to troubleshoot network issues
     * plexinc/pms-docker - I want to switch to jellyfin but I have so much data in Plex now it'll probably be a huge pain
     * jlesage/nginx-proxy-manager - I'm lazy and hate setting up reverse proxies
     * jlesage/qdirstat - Pretty useful when dealing with a server that has as much data as mine does
     * adolfintel/speedtest - Good for troubleshooting networks that might preferentially give speedtest.net better speeds, also good for internal network testing
     * linuxserver/sabnzbd - Obvious
     * haugene/transmission-openvpn - I don't feel comfortable downloading any torrent unless it goes through a vpn
     * Router - pfSense - https://www.pfsense.org/
     * Movies/TV/Home Videos - Plex
     * Minecraft Server - AMP - https://cubecoders.com/AMPInstall
     * Music - Roon - https://roonlabs.com/
     * Automation - HomeAssistant - https://www.home-assistant.io/
     * Unifi Controller
     * Email - Zimbra - https://www.zimbra.com/downloads/
     * Files - Synology
"
"https://news.hada.io/topic?id=6633","Proton은 당신의 데이터를 이용하지 않는 Google이 되려한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Proton은 당신의 데이터를 이용하지 않는 Google이 되려한다

     * 프라이버시를 보장하는 암호화 이메일 서비스 ProtonMail이 Proton으로 이름을 변경
     * 캘린더, 드라이브, VPN도 묶어서 제공하며 구글과 경쟁하게 될 것
     * 대만 출신 Andy Yen CEO와의 인터뷰
     * 스위스 제네바에 있으며, 현재 400명의 직원과 7천만명의 사용자
"
"https://news.hada.io/topic?id=6554","iOS용 KDE Connect Now 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        iOS용 KDE Connect Now 공개

     * 리눅스 데스크탑과 iOS 간의 연동을 위한 오픈소스 앱
     * 기기간 클립보드 공유
     * 모바일에서 파일/URL을 리눅스 데스크탑으로 보내기
     * 모바일 화면을 가상 터치패드로 사용하기
     * 프리젠테이션 리모트 컨트롤
     * 모바일에서 컴퓨터에 명령 실행
     * GPLv3 라이센스 지만 App Store ToS에 맞게 일부를 수정

   오호 7년전에 Objective-C로 되어 있던 것을 일부 감싸서 SwiftUI로 다시 구현했네요
   예전 저장소도 남아있네요 https://invent.kde.org/wxiao/kdeconnect-ios

   공식 Repo : https://invent.kde.org/network/kdeconnect-ios
"
"https://news.hada.io/topic?id=6622","Ask GN: 좋은 VC란 어떤 걸까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 좋은 VC란 어떤 걸까요?

   그냥 막연하게 투자한 회사들이 다들 성공하고 유니콘 되고 그러면 좋은 VC라고 생각했는데, 좀 더 생각해보니 투자자로써 최고의 VC이긴 해도, 좋은 VC라고 말하긴 어렵다는 생각이 들었습니다.

   예를 들면, 전교 1~2등 하는 학생들만 받아서 매번 서울대 보내는 과외 선생님이 최고의 과외 선생님 일수는 있어도, 공부에 손 놓은 학생을 공부에 흥미를 가지게 하고, 수능 이후 그 뒤에도 계속 그걸 가지고 가게 하는 선생님보다는 덜 훌륭하지 않나 하는 생각이 들더라고요.

   그런 기준에서, 좋은 VC란 어떤 건지 궁금합니다.

   스타트업 창업자분도, 스타트업에 계신 분도, 심지어 VC에서 근무하시는 분도 많이 계실거 같아 올려봅니다.

   안녕하세요. 저는 SW개발자로 일을 하다 지금은 VC로 일을 하고 있습니다.
   항상 좋은 글들을 많이 보아오다가 댓글을 달아봅니다.

   말씀하신대로 투자를 안 받고 성장하시는게 가장 좋은 방법입니다.
   저야 SW를 개발하는 회사에 투자하고 그런 회사를 많이 만나는데, 투자 안 받으시고 당기순이익도 나면서 그 이익으로 회사에 재투자 되고, 임직원분들께 인센티브도 나가는 좋은 회사들도 찾아보면 꽤 있더라고요.

   하지만 SW 회사들을 보았을 때, 공공이나 금융 등 특정 산업 군에 이미 잘 개발된 프로덕트로 꾸준하게 매출과 이익이 나는 회사들도 있지만,
   성장 없이는 회사의 지속가능한 경영이 불가능 회사들도 많고,
   새로운 기술과 BM으로 성장하려는 스타트업들이 대부분입니다.

   스타트업의 사업에는 타이밍이라는 것이 있고, 성장을 하기위해 많은 리소스가 필요합니다.
   스타트업에 성장하는데 시간이 x축이라면 투자를 받아 리소스를 확보하고 x축을 크게 단축시키는 것이 투자 유치라고 생각됩니다.

   그러면 투자금을 유치해야하는데, 투자금은 계약서에 적힌대로 누구에게 받냐 다 똑같습니다만
   그 투자금에 따른 부가적인 서비스(?)가 될지 걸림돌(?)이 될지가 어떤 VC로 부터 투자를 받느냐인거 같습니다.
   투자를 검토할 때부터 회사의 창업팀과 함께 비전을 공유하고 함께 성장을 도모할 수 있는 VC를 찾으시는게 좋습니다.
   만약 그것이 어렵다면, 아직 많은 VC를 만나보시지 못했거나, 혹은 그만큼 회사가 매력적으로 보이지 않기 때문일 수 있습니다.

   VC는 보통 펀드를 통해 투자를 하기 때문에 시한부 결혼 생활(?)과 같습니다.
   VC의 펀드도 여러 출자자들의 투자금을 받아와서 스타트업에 투자를 하는 거라
   펀드의 기한에 따라 Exit을 하려면 회사의 로드맵과 타이밍이 다를 수 있습니다.
   그런 것들도 미리 파악해서 서로 꽃길(?)을 걸을 수 있는 투자자를 찾아보심을 추천 드립니다.

   저는 비록 창업은 안 해봤지만 SW를 개발하는 여러 회사들을 많이 만나고 투자하면서 비슷한 감정을 느끼고 생각을 해봤었는데, 마침 좋은 질문 글이 있어 매번 눈팅만 하다 긴 댓글 남겨봅니다.

   즐거운 연휴 보내세요 :)

   그리고 좋은 VC도 많이 있고, 도움도 안 되는 VC도 많이 있습니다.
   그런데 좋고, 도움이 되고 안 되는 성향은 그 회사와의 케미에 따라 또 다르더라고요.

   창업자시라면, 성장이 필요하여 빠른 성장을 위해 시간을 투자금으로 단축시키고 싶으시다면,
   회사와 창업자에 맞는 VC를 찾길 바랍니다.

   초기에 CFO나 CSO가 없다면 같이 이 부분 고민해줄 수 있는 해당 사업이나 산업 경력 많은 VC
   향후 큰 투자 라운드 준비 시 다른 투자자들 데려올 수 있는 네트워크 좋은 VC
   회사 인사, 내부 운영 등에 도움 받을 수 있는 VC
   해당 산업 내 정보나 경쟁사 동향 등을 알아올 수 있는 VC
   협업할 수 있는 회사 연결이나 잠재 고객 소싱해오는 BD같은 VC 등등
   사업적으로나 인간적으로 가까이 할 수 있고 도움 받을 수 있는 VC 많습니다.

   반대로 애매하게 알면서 훈장질만 하는 VC, 아무것도 모르는 VC, 태클만 거는 VC들도 있어요.
   이건 VC들이 투자 검토하면서 창업자 분들이 투자 받으면 어떨지 예상이 되실거 같습니다.
   그런 분들 잘 골라내시면 되요.

   별로 인터렉션 없이 대충 검토하고 투자하겠다고 하는게 좋지 않은거 같아요.
   성향을 전혀 알 수 없으니깐요.
   무조건 OK만 하는 VC, 무관심한 VC는 크게 도움 안 되고, 중간에 구주 Exit할 확률도 있고요.

   VC도 사람이라 창업자분들과 함께 고민하고 성장하는 것에 큰 가치를 두는 사람들도 많습니다.
   회사와 창업자에 맞는 VC들 많이 만나보시고 파악하시면 투자 유치에 도움될 것입니다.

   이글을 쓰며 저도 좋은 VC가 되기 위해 더 열심히 해야겠네요 ㅎㅎ
   여기에는 VC분들은 많이 안 계시는거 같아 주절 주절 댓글 달아봤습니다 :)

   '투자는 안 받는게 좋다' 라는 생각을 깨는 VC를 좋은 VC라고 생각할 수도 있을 것 같네요

   관점에 따라 다르다고 생각해요.
   좋고 나쁘다고 판단하는 것은 판단을 하는 사람의 마음먹기에 달려있지 않을까요?

   그렇긴 합니다. 그래도 일반적인 기준은 있을거 같아서요. 좋은 음악에 대한 관점은 모두 각각 다르지만, 그래도 '좋은 음악은 뭐에요?'라고 물어 봤을 때 이야기 해줄만한 기준은 있는 것처럼요.

   답변이라기 보다는 그냥 생각들을 적어 봅니다.

   스타트업 단계별로 좋은 VC의 기준이 다른거 같아요. 기초를 잡게 해주고, 성장을 도와주고, 후속 투자를 끌어들이고, 엑싯을 준비하고 등등.. 모든 단계에서 다 잘하기는 어려우니 자신이 잘하는 것을 잘 알고, 다른 단계에 도달하면 적절하게 행동하는 VC가 좋다고 봅니다. 흔히 얘기하는 낄끼빠빠를 잘해야 하는데.. 성장에 전혀 도움이 안되기도 하고, 회사 키워야 하는 시점에 먼저 주식 팔고 빠져 버리는 등..

   VC들 평가하는 사이트에서 후기 쓴 것들을 읽어보면, 첫 IR부터 전혀 케미 안 맞는데가 많아서 욕하는 글이 많은데요. 실제 투자 받아본 대표들하고 얘기해보면, 처음에는 좋지만 나중에 가면 종종 서로 안 맞는거 같다는 얘기들도 나오게 됩니다. 스타트업 경영진도, VC도 모두 자신에 잘 맞는 단계가 있다고 생각하면 편합니다.

   그리고 기술과 도메인에 대한 지식을 가지려고 노력하는 VC가 더 좋습니다. 빠르게 바뀌는 분야 특성상 다 이해하면서 투자하긴 어렵겠지만, 적어도 노력은 해야죠. ""그래서 그게 전망이 있어요?"" ""이 도메인은 하나도 모르겠어요"" 라는 얘기하면 정말 기운빠져요. 만날 약속을 잡았으면 그래도 조금은 알아보고는 와야 하지 않을까 하는데, 실제로 그렇지 않더라고요.

   하지만.. 투자는 안 받는게 제일 좋습니다. 투자 안 받고도 매출내고 잘 성장할 수 있는 능력과 그렇게 각자 알아서 클 수 있도록 도와주는 에코시스템이 더 만들어져야 한다고 생각해요.

   덧붙여서, 사실 스타트업 관점에 '좋은 VC란 어떤 것인가'라기 보다는 전반적인 관점이 궁금했습니다.

   '좋은 영화란 무엇인가?'라는 질문에, 영화 제작사는 돈 적게 쓰고 돈 많이 벌 가능성이 큰 영화, 배급사는 대박 날 수 있는 영화, 평론가는 영화적으로 감명 받거나 신선한 영화가 그런 것이겠고, 참여자들은 야근 안하고, 월급 안 밀리는 영화 등등 다양하게 나올 수 있는 것처럼요.

   전세계 박스오피스 역대 2위인 ""어벤져스: 엔드게임""은 좋은 영화였나? 라는 질문에 매출은 1/1000도 안되지만 더 훌륭한 영화들이 많이 생각나는 것처럼, VC도 그런게 있나 궁금했습니다ㅠ

   좋은 답변 감사 드립니다!

   다들 투자는 안 받는게 제일 좋다는 이야기를 많이 들은거 같은데, 매번 들을 때마다 ""필요악인가?"", ""그 정도 인가?""라는 생각이 드는 것 같습니다.
"
"https://news.hada.io/topic?id=6542","Cloudflare Workers 오픈소스로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Cloudflare Workers 오픈소스로 공개

   서비스 공개 후 5년만에 Workers Runtime을 Apache 2.0 라이센스로 오픈소스 릴리즈

   이번주가 Cloudflare 가 각종 신기술을 공개하는 Platform Week 라 여러 소식들이 같이 쏟아져 나왔는데, 그 중에 가장 큰 소식이 아닐까 싶네요.
"
"https://news.hada.io/topic?id=6540","Flutter 3 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Flutter 3 공개

     * 모바일에서 멀티플랫폼 프레임워크로 가는 완성
       → iOS/Android/웹/윈도우/맥/리눅스
     * 애플 실리콘 지원(유니버설 바이너리)
     * Material Design 3
     * Flutter/Firebase 연동이 Firebase 코어에 통합(소스 및 문서)되어 더 많은 지원을 받게 될 것
     * Flutter Casual Games Toolkit 출시

   2.0 나온지 얼마 안된것같은데.. 벌써...

   Flutter가 가장 인기 있는 크로스 플랫폼 모바일 SDK인 이유
   Flutter 2.0 공개
"
"https://news.hada.io/topic?id=6553","Cloudflare, Workers 용 SQL 데이터베이스 D1 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Cloudflare, Workers 용 SQL 데이터베이스 D1 공개

     * SQLite 기반으로 API 그대로 지원
     * 읽기용 클론을 만들어서 최신으로 자동 업데이트
     * 배치 API로 여러 개의 SQL문장을 한번에 실행(트랜잭션)
     * egress 비용 무료
     * R2 저장소에 스냅샷을 주기적으로 자동 저장

   SQLite 는 원래가 서버리스(라이브러리)니까 서버리스인 Worker에는 잘 어울리는 듯 한데..
   뭔가 세부내용이 너무 없긴 하네요. 각 엣지에서 돌아가면 어떻게 글로벌 동기화가 되는지 등등

   D1은 Durable Objects의 Transactional Storage API를 활용합니다.

   Durable Objects는 특정 인스턴스가 글로벌 네트워크에서 동시에 단 한 곳에서만 유지되는 것을 클라우드플레어가 보장해주기 때문에, 분산으로 인한 일관성 문제가 발생하진 않아요.

   요컨데 프로비저닝이 최소화된 DX 중점적인 제품이라고 보시면 될 것 같습니다. 아직은요 ㅎㅎ

   관련해서 CEO인 매튜가 아주 흥미로운 스포일러를 남겼습니다.

   https://twitter.com/eastdakota/status/1524770651764146176

   D0(Durable Objects, 기호를 통한 말장난), D1 (SQL Database), 그럼 D2는?

   ㅎㅎ 재미나네요. 과연 뭐가 되려나요.
"
"https://news.hada.io/topic?id=6599","GitHub, 마크다운으로 수학식 작성 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GitHub, 마크다운으로 수학식 작성 가능

     * LaTeX 스타일 문법으로 인라인($) 또는 블럭($$) 에서 수학식 작성 가능
       $\sqrt{3x-1}+(1+x)^2$
     * 오픈소스인 MathJax를 이용해서 다양한 LaTeX 매크로 및 접근성 지원

   와우!

   와!

   정말 필요한 기능이었어요..

   와! 드디어!
"
"https://news.hada.io/topic?id=6583","OutHorse Your Email","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OutHorse Your Email

     * 아이슬란드로 여행올 때, 업무용 메일에 대한 회신은 ""아이슬란드의 말들이 회신""하게 하세요
     * 실제 아이슬란드 말들이 대형 키보드 위에서 타이핑한 내용을 회신할 수 있음

   아이슬란드 관광을 홍보하기 위해 만든 사이트 이긴 합니다만..
   https://vimeo.com/710288765
   진짜로 말들용 키보드를 만들었.. 덕중의 덕은 양덕이라는 말이 괜히 나오는게 아닙니다..

   테스트 해봤는데.. Hekla frá Þorkellshóli 이름의 말을 선택하니 아래와 같은 문장이 만들어 집니다.

     xguru is away on vacation and not able to respond to your email. Meanwhile,xguru has OutHorsed all emails to an Icelandic horse called Hekla frá Þorkellshóli, who is trained in corporate communications.

     Aælkj5hbyiu89 n89u ð´'i2+ji hð9 u3boæjrk2 n 9089ui qeægj eronbqo ð gnjqergni8h aq fear i
     Qfiuoq4uhhæ 34 4 4 ædoifuuuuuuuuua q34o

     This email was composed by an Icelandic horse using a giant keyboard for horses. Seriously.
     Outhorse your email at: outhorseyouremail.com
     xguru will return to work on 06/03/2022.
"
"https://news.hada.io/topic?id=6573","내가 구글 WebAssembly 팀에서 그만둔 이유와 나를 아프게 한 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                내가 구글 WebAssembly 팀에서 그만둔 이유와 나를 아프게 한 것

     * 2015년 구글의 V8팀에 WebAssembly 스펙 초기 저자로 조인한 Katelyn Gadd의 이야기
     * 구글은 일해본 곳 중 최악이고, 나의 뇌에 손상을 줬음
     * 모질라와 구글이 같이 웹어셈블리를 만들려고 했지만
          + 프로젝트가 너무 복잡했고
          + 각 회사의 전문가들이 서로 의견에 동의하지 않고 다툼
          + 하지만 이걸 해결해줄 PM은 없었고, 소셜/조직적인 문제가 발생했으나, 그런걸 해결해보지 못한 엔지니어에게 맡겨짐
          + 과로한 리더들은 이걸 변화시킬 힘이 부족했음
          + 리더들은 자신이 보고 하는 사람으로부터의 지원이 필요하지만, 그런 도움은 받지 못했음
          + V8팀은 크롬 조직의 리더에게 보고해야 했고, (부주의한 그는) 전체 회사에서 최악의 승인 빈도 였음
          + 내 경력에서 관리자들이 우는 걸 여러번 봤는데, 여기가 그곳 중 하나
          + WebAssembly 스펙은 불분명하고 부적합한 기술을 기반으로 구축되었고, 이로 인해서 사람들이 참여하기가 더 어려웠음
     * 구글에서 보낸 2년간
          + 종종 적대적인 동료를 대하며 회의를 진행하는 비공식 PM의 역할을 하면서 끊임없이 스트레스를 받았음
          + 고맙게도 다른 멤버들이 같은 이슈를 해결하기 위해 노력했지만, 많은 대가를 치뤘음
          + 나중엔 중/단기 기억을 잃어버려서 주차장에서 차를 못 찾거나, 대화 전체를 기억하지 못하는 일이 발생
          + 그래서 매우 자세하게 메모를 남겨야 했음
          + 의사가 강제 병가를 내게 했고, 그만두라고 강력히 조언했음 (하지만 이때가 아닌 나중에 이 조언을 받아들임)
     * 이 프로세스가 거의 끝나갈 무렵, 예전에 해봤지만 전혀 효과가 없는 일을 다시 함
          + 경영진과 미팅을 잡음
          + 모든 팀은 Advocate가 필요하지만 우린 없었고, 내가 시도할 수 있는 마지막 방법이었음
          + 하지만 그 미팅은 좋지 않았음
     * 내가 다녔던 모든 직장은 나쁜 경영진 리더십의 결과였으며, 이번에도 같았음
          + Google의 리더에게 WebAssembly 팀이 조직의 지원이 없이 어떻게 어려움을 겪고 있는지, 사람들이 어떻게 프로젝트를 떠나는지 설명했음
          + 그는 내 평가에 동의했고, 아무것도 바뀌지 않을 것이라고 얘기함
          + 결국 팀은 스스로 상황을 바꿨음
     * 구글에서의 나의 시간은 드라마 없이 조용히 끝남
          + 강제 병가를 마치고 돌아오니, WebAssembly 팀은 해산 되었음
          + 여러 명이 그만두었고, 다른 사람들은 다른 부서로 도피했음
          + 나의 새 매니저는 이제 내가 크롬의 익숙하지 않은 부분에서 다른 사람들과 일하게 될 것이라고 얘기함
          + 나는 퇴사 통지를 하고 엑싯 인터뷰를 했음. 내 마지막 근무일은 나의 차기 주식 베스팅 1주일 전이었음
          + 다음 몇 년을 실직 상태로 보냈고, 때때로 코딩도 하면서 건강을 회복하기 위해 의사와 노력했음
     * 현재는 부분적으로 회복해서, 오픈소스 작업으로 급여를 받고 있음. 하지만 나는 결코 예전과 같지 않을 것

     나는 당신이 내가 한 일을 결코 경험하지 않기를 바랍니다. 그리고 번창하시고 꿈의 경력을 쌓기를 기원합니다.

   최근 1, 2 년 사이 WebAssembly 에 참가한 사람들의 변화를 자주 보네요.

   베스팅 1주일 전에 그만 둔 게 많이 아쉽네요.
   저런 x고생을 하고 ㅠㅠ

   세계 최고 직장에서 이런 일이 발생하다니.. 안타깝네요.

   내가 구글을 떠난 이유 : 워크-라이프-밸런스 와는 또 다른 이유로 그만둔 사람 이야기네요.
   HN 댓글도 같이 보세요 https://news.ycombinator.com/item?id=31341442
"
"https://news.hada.io/topic?id=6606","fclones - 효율적인 중복 파일 파인더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        fclones - 효율적인 중복 파일 파인더

     * 똑같은 파일을 찾아서 제거해주는 커맨드라인 유틸리티
     * 다양한 옵션 지원
          + 중복 파일 찾기 : N개 이상의 중복 파일, 단일 파일, N개 이하인 파일
          + 검색할 파일들 선택 : 여러 폴더, 파일 리스트, 재귀, glob 필터링, 파일 크기
     * Unix 유틸들과 연동되며, JSON으로 결과 출력
     * dry-run 옵션 지원
     * Rust 오픈소스
     * 다양한 OS에서 작동하지만 Linux에서 가장 잘 동작

   별개로 Windows에서 쭉 보기에는 https://www.voidtools.com/ko-kr/ Everything에서 ""sizedupe:"" 로 검색하면 좋습니다. 해시 검사하는 것은 아니지만 보통 제거 대상인 사진이나 영상 같은 큰 파일은 용량 같으면 99% 이상 같은 파일이니까요
"
"https://news.hada.io/topic?id=6612","Nvidia - 컴퓨팅 파워의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Nvidia - 컴퓨팅 파워의 미래

    1. 세 줄로 요약하는 엔비디아
    2. 한 눈에 살펴보기
    3. 사업 분야
         1. 게이밍
         2. 데이터 센터
         3. 전문가용 비주얼 플랫폼
    4. 핵심인물은?
    5. 엔비디아의 미래는?
"
"https://news.hada.io/topic?id=6517","Ask GN: 1년 이상 지난 GN News 중 가장 인상깊었던 뉴스는 무엇인가요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Ask GN: 1년 이상 지난 GN News 중 가장 인상깊었던 뉴스는 무엇인가요?

   가끔 엄청 좋았던 뉴스가 너무 오래되어 묻혔는데. 글은 존재하니까 다시 올리기는 좀 그런 경우가 많았다고 생각해요. 이 뉴스를 못본 분들이 꽤 많은 거라고 생각하면서도요.

   그래서 GN 유저분들에게 1년 이상 지난 뉴스 중 가장 좋아하는 것들을 소개 받고 싶습니다! 여러분의 최애 뉴스는 어떤 게 있으셨나요?

   저는 (실패하지 않는) 뉴욕타임스 가 인상 깊었어요~

   몇 가지 있지만, 지난 1년치 중에서 하나만 꼽으라면 Clean Code 라는 건 없습니다가 생각납니다.

   비개발이면서 데이터쪽 일하는 입장에서
   스타트업에서 데이터 팀 만들기
   이 글 정말 재밌게 읽었습니다!

   지난 1년간 올라온 글중에는 케빈켈리의 조언, 그리고 최선을 다한다는 것 을 비롯한 폴 그레이엄들의 글들이 좋았습니다.

   제가 공유한 글 중에서는 나같은 사람이 수학에 무슨 기여를 할 수 있을까요? 를 제일 좋아해요.

   저도 폴 그레이엄의 글이 좋았습니다.

   xguru님께서도 꼽아주셨지만
   https://news.hada.io/topic?id=4558 SQLite 정말 너무 감명깊게 읽었습니다.

   저도 제 생각에 중요한 뉴스들은 올리고나서 위클리에 꼭 소개를 별도로 하고 있어서,
   긱뉴스 처음 오시는 분들은 GeekNews Weekly의 첫 부분 글만 챙겨보시면 좋을 것 같아요.

   그리고 이 기회에 한번 검색해보니, 기억에 남는 글들은 확실히 upvote 수가 많네요.
   아래는 모두 45점 이상 받은 글들입니다.
     * 1인 기술 스타트업의 아키텍쳐 스택
     * 2022년 우리의 커리어를 형성할 트렌드들
     * 내가 소프트웨어 업계에서 45년간 배운 것
     * 1인 유니콘 기업의 등장
     * SQLite의 알려지지 않은 이야기
     * 최고의 엔지니어를 쫓아내는 방법
     * SaaS를 1년 운영해보고 배운 것
     * 1인 SaaS 개발자를 위한 도구 추천

   (... 6달 이내로 슬쩍 바꿔봅니다... )

   케빈 켈리의 68가지 조언 - 주기적으로 곱씹어보는 글입니다.

   억만장자 만들기 - 폴 그레이엄옹의 YC가 어떤 철학으로 운영되는지 알 수 있었습니다.

   아마존의 도큐먼트 문화 - 제가 내부 회의 때 사용하는 PPTX를 반대하고 줄글을 사랑하게 된 계기를 제공한 글이었습니다.
"
"https://news.hada.io/topic?id=6568","Obsidian Dataview - 옵시디언 마크다운 저장소를 쿼리하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Obsidian Dataview - 옵시디언 마크다운 저장소를 쿼리하기

     * 노트 도구인 Obsidian의 저장소를 DB처럼 쿼리하게 만들어주는 오픈소스
     * 각 마크다운 페이지에 Annotation 가능
     * JavaScript API 와 파이프라인 기반 쿼리 언어(DQL)로 마크다운 페이지를 필터/정렬/추출 가능
          + TABLE file.name AS ""File"", rating AS ""Rating"" FROM #book
          + dv.taskList(dv.pages().file.tasks.where(t => !t.completed));

   쏠쏠하게 잘 쓰고 있는 확장 기능입니다.

   Obsidian - MarkDown 기반 데스크탑 지식정리 도구(Knowledge Base)
"
"https://news.hada.io/topic?id=6524","맥 Preview 앱의 잘 안 알려진 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        맥 Preview 앱의 잘 안 알려진 기능들

    1. 이미지를 특정 크기로 리사이즈
    2. 아이콘 반전
    3. 이미지 배경 제거
    4. PDF 페이지 순서 정렬
    5. 기존 PDF에서 새로운 PDF 분할 생성하기
    6. PDF 합치기
    7. PDF에 싸인하기
    8. 사진에서 위치정보 제거하기
    9. 클립보드에서 이미지 생성하기
   10. App icon 접근하기

   https://news.ycombinator.com/item?id=31315110 댓글의 추가 항목들
     * 스캐너로 문서 생성하기도 가능
     * Import from Iphone > Scan Documents 로 문서 스캔하기
       → 이 기능은 파인더 에서도 우클릭하면 동작합니다. 자신의 (애플계정에 연결된) 아이폰에서 바로 스캔화면이 떠서 편합니다.
"
"https://news.hada.io/topic?id=6527","Bubble Tea - 강력한 TUI 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Bubble Tea - 강력한 TUI 프레임워크

     * 재미있고 기능적이며 Stateful하게 터미널 앱을 개발 지원
     * The Elm Architecture(모델/뷰/업데이트)에 기반한 Go 프레임워크
     * 인라인 같은 간단한 것부터 전체화면 처럼 복잡한 것까지 모두 가능 (복합 포함)
"
"https://news.hada.io/topic?id=6539","Google I/O 2022 키노트 18분 요약 by Verge","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google I/O 2022 키노트 18분 요약 by Verge

     * 픽셀 워치
     * 픽셀 7 / 7 Pro / 6A
     * 픽셀 버즈 프로
     * 픽셀 타블렛
     * 구글 검색 (Scene exploration)
     * 구글 어시스턴트 (Look and talk, Quick phrases)
     * 안드로이드 13
     * 구글 월렛
     * 폰허브 & Fast Pair
     * AR 글래스

   영상만 보면 하드웨어만 한참 나와서 삼성이나 애플 행사라고 해도 어색하지 않아보이네요

   Phone hub는 KDE connect와 동일한 기능을 하는 건가보네요.

   Verge 가 보통 한국어 자막도 잘 넣어주는데, 아직인가 보네요.
"
"https://news.hada.io/topic?id=6586","스탠포드 온라인 철학 백과사전의 작동모델(번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스탠포드 온라인 철학 백과사전의 작동모델(번역)

   -스탠포드 철학 백과사전 Stanford Encyclopedia of Philosophy (SEP) 는 1995년 철학자 에드워드 잘타가 시작한 온라인 백과사전임.

   -SEP는 어떻게 하면 신빙성있고, 종합적이고, 최신의 정보를 독자에게 제공할 수 있을까 하는 문제를 해결하는 프로젝트.

  다른 백과사전의 부족한 부분

   -책은 신빙성이 있지만 종합적인 내용을 책에 모두 담기는 힘들고, 시간이 지나면 구식 정보가 됨.

   -위키백과식의 사용자참여 모델은 최신정보를 담고 있지만 신빙성이 떨어지고 피상적인 정보만 담고 있음

   -스택오버플로나 쿼라같은 사용자 투표 모델은 기존 사용자참여모델보다 좀 더 믿을만하지만 여전히 답변자의 신원을 검증할 수 없다는 불확실성이 있음.

  SEP의 해법

   -SEP는 권위를 담보하기 위해 주제별 편집자들이 '고대철학'이나 '형식인식론' 같은 폭넓은 분야를 책임지고 자격 있는 철학자들에게 항목 작성을 의뢰함.

   -SEP 가 종합적이기 위해서 편집 집행부는 각각의 글들이 자기 완결적이게끔(특정 주제를 이해하기 위해 관련 용어를 정의한 페이지를 꼬리에 꼬리를 물고 끝없이 열어야 되는 상황이 발생하지 않도록) 글을 써달라고 요청함.

   -또한 개별 글들 뿐만 아니라 백과사전 전체적으로 종합적이기 위해 길어서 쪼개야할 항목은 없는지, 하나로 합쳐야할 항목은 없는지 확인함.

   -최신 정보를 담기 위해서 필자는 글을 작성한 후 4년 뒤에 그 주제에 대해서 가장 최신의 정보를 담은 글을 다시 제출해야함. SEP 의 새 소식 페이지는 매일 수정되고 추가된 내용이 무엇인지를 알려줌.

   -SEP 의 접근법에선 글에 저자의 개성이 반영됨. 위키백과같은 사용자 참여 모델은 논란을 피하는 식으로 작성되지만, SEP 는 저자의 확고한 목소리를 담고 있고 더 많은 소수견해가 노출됨.

  SEP는 어떻게 운영되는가

   -SEP에서 유급직원은 단 세명뿐이고, 자기 업무시간의 20%를 할애해서 기술지원을 해주는 스탠포드 직원 다섯명이 있음. 수십명의 각 주제별 편집자들과 개별 필진들은 단 한푼의 돈도 받지 않음.

   -편집자와 기고자는 SEP 글을 작성하면서 해당 분야의 흥미로운 사항들을 따라갈 수 있게 되고, 이런 작업은 그들이 즐기는 일임.

   -또한 SEP는 강단의 철학자들로 하여금 더 많은 청중을 만나도록 해줌. 덕분에 철학자들은 인지도를 얻고, 대학이나 학회 밖 세상에서도 중요하다고 여기는 개념을 사람들에게 알릴 수 있음.

   -결과적으로 SEP에 기여함으로써 철학이라는 사업을 증진하고자 하는 것.

   -SEP는 운영자금을 모으기 위해 대학도서관들한테 일회성 기부를 요청. 도서관들은 백과사전에 자기 학교의 브랜드를 붙인다든지 전체 아카이브를 저장한다든지 하는 “멤버십 혜택”을 누릴 수 있음.

   -도서관의 기부금은 스탠포드 기부금 운영자산에 포함돼서, SEP 가 망하게 되면 원금에 이자를 더해 도서관에게 돌려주는 구조. 이런식으로 200만 달러를 모금.

   -여기에 추가적으로 스탠포드 대학이 100만달러를 후원.

   -후원금의 일부는 개인후원자에게서 옴. 후원자는 SEP 항목을 정리된 pdf 파일로 다운받아 보관할 수 있음.

   -위와 같은 구조를 통해 SEP는 20년 넘게 존속할 수 있었음.

   -“우리가 가진 것은 이 일을 해내는 데 일편단심으로 매진한 몇 명의 사람들이었습니다. 적절한 사람들만 갖고 있다면, 우리 모델이 다른 데서도 재현될 수 있을 거라 생각합니다.”

   요약을 보고 번역 링크 가서 봤는데 잘 봤습니다. 흥미롭네요.

   음… 그나마 MDN 정도면 이것과 비슷한 면이 있지 않을까요?
     * 권위 있는가: 웹 브라우저를 개발하는 개발자가 참여하는 레퍼런스 문서
     * 종합적인가: 웹 프론트엔드 개발과 관련된 주제 망라
     * 최신 정보인가: 지속적으로 활발하게 갱신되고 있음

   SEP 에는 비단 철학뿐만 아니라 튜링머신, 양자역학, 계산복잡도 등 사람의 인지와 관련돼 있는 수많은 항목들이 존재합니다. preprint 같은데선 인용해도 될 정도로 신빙성 있는 매체로 인식되고 있구요.

   기업이 후원하는 오픈소스 모델의 조상격이란 생각이 들어서 요약해 봤습니다

   원글보다도 요약 하신게 훨씬 이해가 쉽네요. 고맙습니다! 덕분에 재미난 프로젝트를 알게되었어요.
"
"https://news.hada.io/topic?id=6508","같은 회사에 84년간 근무해서 세계 기록을 세운 100세의 브라질인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 같은 회사에 84년간 근무해서 세계 기록을 세운 100세의 브라질인

     * Walter Orthmann은 1938년 1월 17일, 15살의 나이로 섬유회사에서 근무를 시작
     * 올해 1월 6일 기준으로 84년 9일간의 근무기록을 세워 기네스 기록을 경신
     * 올해 4월 19일 회사에서 동료, 친구, 가족들과 함께 100세 생일 파티
     * 현재도 건강이 좋고 기억력이 뛰어나서 매일 사무실로 운전해서 출근 중
"
"https://news.hada.io/topic?id=6590","안드로이드 오픈소스 FairEmail 앱 개발자, 구글이 앱을 Spyware로 플래그 해서 개발 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        안드로이드 오픈소스 FairEmail 앱 개발자, 구글이 앱을 Spyware로 플래그 해서 개발 중단

     * 구글이 이메일 앱 내에서 콘택트 리스트를 업로드 한다는 이유로 Spyware로 지정
     * Spyware로 인식한게 어떤 기능때문인지 얘기 하지 않지만,
       아마도 해당 기능은 이메일 주소의 도메인에서 favicon을 읽어오는 기능으로 콘택트 리스트를 업로드 하는 것은 아님
     * 개발자가 기능을 뺀 새 버전을 업로드 하고 계속 어필 했지만..
     * 끝내 개발을 완전히 중단하고, 자신의 모든 앱들을 Play Store에서 삭제

   https://email.faircode.eu/ 공식 사이트에도 해당 내용으로 개발을 중단한다고 적었네요.
   관련해서 FAQ도 올려뒀구요. https://faircode.eu/faq.html

   HN에서는 코드를 살펴본 사람들이 하는 이런 저런 이야기도 있습니다만..
   https://news.ycombinator.com/item?id=31432334

   하여튼 결론적으로 개발자는 이래저래 많이 화가 나서.. 그냥 삭제하고 떠나기로 한 것 같네요.
   (앱 사용자 리뷰에서 이 이슈 때문에 안 좋은 말을 쓴 사람도 꽤 있었나 봅니다)
   개발 중단에 대해서 여러 얘기가 있지만, 오픈 소스앱을 유지보수 한다는 건 참 어려운듯 합니다.
"
"https://news.hada.io/topic?id=6557","저는 서버사이드 SQLite에 올인합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         저는 서버사이드 SQLite에 올인합니다

     * BoltDB(임베디드 키밸류 DB)를 만든 벤 존슨이 이제 FlyIO에서 Litestream 개발중
     * 풀스택 어플리케이션의 상식적인 구조는 n-Tier : 앱서버 + DB서버
       → 이 아키텍처에서 SQLite는 유닛테스트용으로만 사용했지만, 이제는 데이터 및 지속 레이어로 충분히 사용 가능
     * Litestream 은 Replication을 통해서 SQLite를 풀스택 어플리케이션에 사용가능하게 만들어주는 오픈소스

어플리케이션 데이터베이스의 간략한 역사

     * 50년이 긴 시간이 아니지만, 소프트웨어가 데이터를 관리하는 방법은 엄청난 변화가 있었음
       → 70년대에는 관계형 데이터베이스라는 것을 정의한 ""Codd의 법칙"" 이 있었음
       → 모든 데이터는 테이블에 있고, CRUD, 스키마, SQL 언어 등
       → 80년대와 90년대에는 Oracle/DB2/Postgres/MySQL등 SQL 데이터베이스가 폭발적으로 많아짐
       → 2000년대의 XML 데이터베이스는 안 좋았고, 같은 시간대에 훌륭한 컬럼 DB들이 등장
       → 2010년대에는 대규모 오픈소스 분산 DB 프로젝트들이 출시되고, 이제는 누구나 클러스터를 만들고 테라바이트 단위의 데이터를 쿼리 가능
     * 데이터베이스가 진화하면서, DB를 어플리케이션에 연결하는 전략도 발전
       → Codd 이후로 티어로 분리
       → 가장 처음엔 데이터베이스 티어
       → 그다음엔 memcached 와 Redis의 캐슁 티어
       → 백그라운드 잡 티어(Sidekiq), 라우팅 티어(PgBouncer), Distribution 티어 등
       → 많은 튜토리얼이 3-Tier 인 것 처럼 얘기하지만, 얼마나 많은 티어들이 들어올지 모르니 ""n-Tier""라고 부르고 있음
     * 50년의 시간동안 CPU,메모리,디스크가 수백배 빠르고 저렴해지는 것도 보았음
       → 2010년대 데이터베이스 혁신을 실제 정의하는 단어는 ""빅데이터""임
       → 하지만 하드웨어 개선으로 2020년에 와서는 그 컨셉도 유지하기 어려워졌음
       → 1996년에 1GB DB 관리는 정말 큰 일이었지만, 2022년엔 노트북이나 t3.micro에서도 운영해도 충분
     * 우리가 새로운 DB 아키텍처에 대해 생각할 때, 확장성 제한때문에 최면이 걸림
       → 페타바이트 또는 최소 테라바이트 단위를 데이터를 처리하지 못하면 대화에 끼지도 못함
       → 하지만 대부분의 어플리케이션은 성공하더라도 테라바이트의 데이터를 보기 어려움
       → 우린 못을 박기 위해 착암기(JackHammer)를 쓰고 있는 것

SQLite의 달콤한 릴리즈

     * 이런 경향을 잘 반영하는 데이터베이스가 있음
     * 세계에서 가장 유명한 SQL DB중 하나이고, 미국 의회 도서관의 공식 보관 형식이며, 신뢰성과 가늠하기 어려운 크기의 테스트 스위트로 유명하고, 성능도 너무 훌륭
     * 이 정도면 이름을 말할 필요도 없겠지만.. 뒤에서 손들고 있는 분을 위해.. 이건 바로 SQLite 이야기임

     * SQLite는 임베디드 DB임. 일반적인 아키텍처 티어에선 존재하지 않는, 당신의 어플리케이션 서버 프로세스에 링크되는 그냥 라이브러리 임
       → 다른 서버에 의존하지 않고 혼자 실행 되는 ""싱글 프로세스 어플리케이션""

     * 내가 DB를 만드는 사람이기 때문에 이런 종류의 어플리케이션에 관심을 가짐
     * 나는 Go 에코시스템에서 유명한 임베디드 Key/Value DB인 BoltDB를 만들었음
     * BoltDB는 안정적이고, 인프로세스 DB에서 기대하는 것처럼 Nitro가 달린 장난감 자동차 같은 성능을 보여줌
     * 하지만, BoltDB는 제한점이 있음
       → 스키마가 Go코드로 정의되기 때문에 DB 마이그레이션이 어려움. 직접 당신이 도구를 만들어야 함. 심지어 REPL도 없음

     * 당신이 조심만 한다면, 이런 종류의 DB를 쓰면 엄청난 성능을 얻을 수 있음
     * 하지만 일반적인 용도로는 이런 DB를 운영하기 원하지 않을 것
     * 나는 BoltDB를 더 많은 어플리케이션에서 사용가능하게 만들기 위해 뭘 해야할지를 고민했는데, 내가 도달한 결론은 ""SQLite가 딱 그것을 위해 만들어졌다는 것""

     * SQLite에도 물론 제약이 있음. 가장 큰것은 단일 프로세스 어플리케이션은 SPOF(Single Point of Failure)가 있다는 것: 서버를 잃어버리면 데이터베이스도 잃어버림. 이것은 SQLite의 결함이 아니라 디자인이 원래 그렇게 된 것

Enter Litestream

     * 많은 사람들이 SQLite를 기본으로 사용하지 않는 두가지 큰 이유는
       → 첫째 스토리지 오류에 대한 복원력(Resilience)
       → 둘째 규모가 클 때의 동시성(Concurrency)
     * Litestream이 이 두가지 문제에 대해서 할 말이 있음

     * Litestream은 SQLite 의 WAL(Write Ahead Log) 모드 저널링을 제어함으로써 동작
     * WAL모드에서는 쓰기 오퍼레이션들이 SQLite의 메인 DB 파일외의 별도 로그파일에 추가됨
     * Reader들은 쿼리를 충족시키기 위해 WAL 파일과 메인DB를 모두 확인함
     * 일반적으로 SQLite는 자동으로 WAL에서 메인 DB로 페이지를 자동 체크포인트를 실행함
     * Litestream은 이 중단단계에서 끼어들어 자동 체크포인트를 방지하는 무한 읽기 트랜잭션을 오픈하고, WAL업데이트를 직접 캡쳐하고 복제하고, 스스로 체크포인트를 트리거함

     Litestream에 이해해야 하는 가장 중요한 것은 그냥 SQLite라는 것. 애플리케이션은 표준 SQLite를 사용하며, 종속성을 추가하거나 쿼리를 분석하거나 프록시 동작을 하는게 아님. 그냥 SQLite가 가진 저널링 및 동시성 기능을 활용하는 것. 대부분의 경우 당신의 코드는 Litestream의 존재를 인식하지 못할 수도 있음

     * 복잡해 보이지만, 실제로는 엄청 간단함. 써보면 그냥 ""just works""라는 걸 알수 있음
       $ litestream replicate fruits.db s3://my-bukkit:9000/fruits.db
       $ litestream restore -o fruits-replica.db s3://my-bukkit:9000/fruits.db

     * 일반적으로 사람들은 SQLite DB를 복제해서 S3에 저장하는 용도로 사용
     * 운영상 큰 이점을 줌. 당신의 DB는 탄력적이고 쉽게 옮기거나 마이그레이션 가능해짐

     * 하지만 Litestream으로 더 많은 것들을 할 수 있음.
     * 다음 버전에서는 SQLite DB간에 실시간 복제가 가능해져서, 분산 Read Replica 와 Write-Leader DB를 셋업하는게 가능해 짐
       → Read Replica는 Write를 캐치해서 Leader에게 Redirect 가능
       → 많은 어플리케이션들은 Read-heavy니까 이 셋업은 어플리케이션에게 글로벌하게 스케일 가능한 DB를 제공할수 있게 되는 것

당신은 이 옵션(어플리케이션 DB로 SQLite를 사용하는 것)을 더 심각하게 받아들여야 함

     * 나의 초창기 IT 직업중 하나는 2000년대 초 오라클DBA 였음
     * 나는 오라클에 대해서 배우기 위해 수많은 책과 문서들을 읽는데 시간을 보냈음
     * 관리자 매뉴얼은 거의 천페이지 가량이었고, 그건 수백개의 문서중 하나였음

     * 쿼리를 최적화 하거나 쓰기를 개선하기 위해 뭘 해야 하는 지를 배우면 그 당시에는 큰 차이를 만들어냈음
     * 초당 수십메가를 읽는 하드디스크가 있으므로, 더 나은 인덱스를 활용하면 5분 걸리는 쿼리를 30초 짜리 쿼리로 바꿔줄수 있음

     * 하지만 DB최적화는 점점 일반 어플리케이션엔 중요하지 않아짐
     * 1GB DB를 가지고 있다면 NVMe디스크는 1초 이내에 모든 것을 메모리에 담을 수 있음
     * SQL 쿼리 최적화를 좋아하지만, 많은 어플리케이션 개발자들에게 이건 죽어가는 기술이 되고 있음
     * 제대로 튜닝되지 않은 쿼리라도 많은 데이터베이스에서 1초이내에 실행 가능

     * 최신 Postgres는 기적임. 수년간 그 코드를 읽으면서 많은 것들을 배웠음
     * 쿼리 옵티마이저, 행단위 보안 정책, 6가지 유형의 인덱스 등
     * 이런 기능을 원한다면 필요하겠지만, 대부분은 그렇지 않음

     * 그리고 만약 이런 Postgres 기능을 원하지 않는다면, 책임이 뒤따름
     * 여러개의 계정을 사용하지 않더라고 호스 기반 인증을 구성해야 하고, 방화벽을 해제해야함
     * 더 많은 기능은 더 많은 문서를 의미하므로 실제로 당신이 운영중인 소프트웨어에 대해 알기 어려움
     * Postgre14 의 문서는 거의 3천페이지임

     * SQLite는 Postgres 기능의 서브셋을 가짐. 하지만 내가 일반적으로 원하는 기능의 99.9% 임
     * 뛰어난 SQL 지원, 윈도우 기능, CTE, 전문 검색, JSON 지원 등
     * 기능이 부족하자면 데이터가 내 애플리케이션 옆에 있으므로 가져와서 처리하기에 오버헤드가 별로 없음

     * 한편 정말 해결해야 하는 복잡한 문제는 핵심 데이터베이스 기능으로는 해결되지 않음
     * 대신 레이턴시와 개발자 경험 두가지만 최적화 하고 싶음

     * 따라서, SQLite를 진지하게 고려해야 하는 한가지 이유는 운영이 정말 간단하기 때문
     * 데이터베이스 계층을 설계하지 않고 그냥 어플리케이션 코드 작성에 시간을 쓰는 것이 가능
     * 하지만 다른 문제가 있음

빛은 너무 느리다 : The Light is Too Damn Slow

     * 이론적인 한계에 부딪히기 시작. 진공상태에서 빛은 1밀리초에 186마일을 이동(필라델피아에서 뉴욕까지 왕복 거리)
     * 네트워크 스위치, 방화벽 및 애플리케이션 프로토콜 레이어를 추가하면 더 느려짐

     * 단일 AWS 리젼내에서 Postgres 쿼리에 대한 레이턴시 오버헤드는 최대 1밀리초 이내
     * 이것은 Postgres가 느리다는 것이 아니라 데이터 이동 속도의 한계에 도달한 것
     * 최신 어플리케이션은 HTTP 요청을 처리하며, 여러개의 데이터베이스 쿼리와 비즈니스 로직 또는 렌더링 하기 전에 이미 10ms를 소모함

     * 애플리케이션 레이턴시에는 매직 넘버가 있음 : 100ms 이하의 응답은 거의 즉시처럼 느껴 진다는 것
     * 즉시 응답하는(Snappy) 어플리케이션은 행복한 사용자를 만듦
     * 100ms는 많은 것 같지만 무심코 먹어버리기 쉬움
     * 100ms 임계값은 매우 중요하기 때문에 사람들은 레이턴시를 줄이기 위해 페이지를 프리렌더링하고 CDN에 태움

     * 우린 데이터를 어플리케이션 가까이로 옮기는게 좋음. 얼마나? 정말 가깝게

     * SQLite는 당신의 어플리케이션과 같은 머신에 있는 것만이 아니라, 당신의 어플리케이션 프로세스 안에 포함됨
     * 데이터를 어플리케이션 옆에 두면 쿼리당 레이턴시가 10~20 마이크로세컨드(μ)로 떨어지는 것을 볼수 있음
     * 즉 동일 리젼내의 Postgres 쿼리보다 50~100x 빠름

     * 하지만, 더 많은 것이 있음. 쿼리당 지연시간을 효율적으로 제거했음. 우리 어플리케이션이 빠르면서도 더 간단함
     * 큰 쿼리들을 더 작은 관리 가능한 쿼리로 분할할 수 있고, 새로운 기능을 구축하기 위해 N+1 쿼리 패턴을 찾는데 시간을 더 할애할 수 있음

     * 레이턴시를 최소화 하는 것은 프로덕션만을 위한 것은 아님. 기존 클라이언트/서버 DB와 연통 테스트를 하는 것은 로컬에서 몇분씩 걸릴 정도로 곧 잘 늘어나며, CI로 푸시해도 고통은 계속 됨
     * 코드 변경에서 테스트 완료까지의 피드백 루프를 줄이면 시간이 절약되고 개발하는 동안 포커스를 유지할 수 있음
     * SQLite에서 한 줄 변경하는 것은 메모리에서 실행해서 통합 테스트를 몇 초 이내에 실행 가능

작고, 빠르고, 신뢰할수 있고, 글로벌 분산되어 있고 : 이 중에서 4개를 선택하세요

     * Litestream 은 분산 되어있고, 복제되며, 가장 중요한 것은 이해하기 쉬움
     * 진지하게, ""한번 시도해 보세요"" 알아야할 것이 별로 없습니다

     * 내 주장은 이겁니다 :
          + SQLite를 위한 안정적이고 사용하기 쉬운 복제를 구축하면, SQLite에서만 운영되는 풀스택 어플리케이션을 매력적으로 만든다는 것
          + 예전 ""Rails로 Blog로 만들기 튜토리얼""이 작성되었던 시절엔 이 옵션을 간과했지만, 요즘의 SQLite는 대부분의 어플리케이션 쓰기 부하를 견딜수 있으며, 복제본을 통해서 수많은 인스턴스에서 읽어갈수 있도록 로드밸런싱이 가능

     * Litestream에도 제약이 있음
          + 싱글 노드 어플리케이션을 위해 만들었기 때문에, 서버리스 플랫폼이나 롤링 배포에는 잘 동작하지 않음
          + 모든 변경사항을 순차적으로 복원해야 하므로 DB 리스토어에 몇분가량 걸릴수 있음
          + 우리는 실시간 복제 기능을 준비하고 있지만, 별도 프로세스 모델은 복제 보장에 대한 세부제어 부분에서 제약이 있음

     * 더 잘할 수 있음
          + 지난 1년간 내가 해온 일은 Litestream의 핵심을 정하고 정확성에 초점을 맞추는 것
          + 현재 도착한 위치에 만족함
          + 단순한 스트리밍 백업 도구로 시작했지만, 점차 안정적이고 분산된 데이터베이스로 발전 중
          + 나의 Fly.io에서의 일은 이걸 더 빠르고 심리스하게 만드는 것
          + Fly.io 와 상관없이 Litestream에 더 많은 개선들이 추가 될 것

     * Litestream 은 Fly.io에서 새 집을 꾸렸지만, 계속 오픈소스 프로젝트 일 것
     * 차후 몇년간 내 계획은 어플리케이션이 어디서 실행되는 지와 상관없이, 더 유용하게 만들고, SQLite 모델이 어디까지 나아갈수 있을지 확인하는 것

   다시 한 번 제대로 읽어보고 싶어졌습니다.

   비슷한 생각을 해 본적이 있는데, 훨씬 본격적이고 진지하네요. 읽으면서 감탄했습니다. Litestream도 써보고 싶군요.

   리모트에서 쿼리질의가 되면 더 좋으련만... ㅠㅠ

   elixir가 떠오르는 순간이네요. 임베딩 분산 db와 오케스트레이션이 언어 레벨로 제공되는 도구인데 미래인지는 잘 모르겠습니다.

   재미있게 읽었습니다!

   간단히 읽고 요약하려고 했는데, 하다보니 재미나서 길어졌네요.

   Litestream - SQLite 스트리밍 복제 도구

   SQLite를 Primary DB로 사용해보신 분? 질문과 연계해서 보시면 좋을 것 같아요.

   몇일전 공개된 Cloudflare, Workers 용 SQL 데이터베이스 D1 공개 와도 연결 고리가 있을듯 하네요.

   HN의 댓글들도 참고하세요 https://news.ycombinator.com/item?id=31318708
"
"https://news.hada.io/topic?id=6575","LetsMarkdown - 마크다운 동시 편집 협업도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  LetsMarkdown - 마크다운 동시 편집 협업도구 오픈소스

     * 구글닥스와 비슷한 실시간 협동 편집모드로 마크다운 작성 및 미리보기 지원
     * VSCode 와 비슷한 편집기 : 구문강조, 자동완성, 테마..
     * 로그인 필요없음 : URL로 공유하고 바로 같이 편집 가능
     * Rust + WebAssembly 백엔드 + React + Chakra UI + Monaco + Markdown-it
     * 다크모드, 이모지 지원
     * 커서 추적, 스크롤 동기화, 주석 등 지원 예정
"
"https://news.hada.io/topic?id=6579","Ask GN: xx 의 open source 찾아주는 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Ask GN: xx 의 open source 찾아주는 사이트

   안녕하세요,
   특정 유료 제품의 open source alternative 를 찾아주는 사이트가 어딘가 있었던 것으로 기억하는데요, 혹시 아시는 분 계실까요?
   예를 들면, salesforce 의 오픈소스 alternative list 같은걸 알려주는 사이트요!

   stack share를 추천 드립니다.

   https://stackshare.io/

   예전에는 구글에서 OOO Alternatives 하면 잘 나왔는데, 이것도 SEO Spam들이 너무 많아져서..
   요즘은 해커뉴스의 검색을 활용하기도 합니다. 해커뉴스 검색은 검색 스타트업인 Algolia에서 별도로 만들어서 제공해줍니다(둘다 YC 관계사라서..)

   HN에서 Salesforce Alternative 를 검색한 결과입니다.
   https://hn.algolia.com//…

   와 감사합니다! 맞아요. 그냥 검색으로는 스팸이 많아서 신뢰가 떨어졌는데 hn 에서 검색하는 방법이 있었네요!

   https://alternativeto.net 에서 검색후에 license에서 open source로 하시면 나올거에요.

   감사합니다! 제 기억속에 흐릿하게 있던 사이트가 이거였어요 ㅎㅎㅎ 찾아주셔서 고맙습니다!
"
"https://news.hada.io/topic?id=6529","Nvidia open source 커널 모듈 드라이버 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Nvidia open source 커널 모듈 드라이버 공개

   관련해서 이게 정말 좋은 일인가? 에 대해서는 많은 의견이 있네요.
   https://news.ycombinator.com/item?id=31344981

   드라이버가 아니라 커널 모듈만 공개한 것에 대한 비판도 있고요.

   그래서인지 모든 엔비디아 그래픽카드의 채굴락이 풀렸다는 소식이...
   https://github.com/trexminer/T-Rex/releases/tag/0.26.1

   Github repo: https://github.com/NVIDIA/open-gpu-kernel-modules
"
"https://news.hada.io/topic?id=6608","Airflow를 대규모로 운영하며 배운 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Airflow를 대규모로 운영하며 배운 교훈

   Shopify는 데이터 추출, 머신러닝모델 훈련, 아파치 Iceberg 테이블 메인터넌스, DBT기반 데이터 모델링 등에 활용중
    1. 클라우드 저장소를 사용할 때 파일 접근이 느릴 수 있음
       → GCS + NFS 로 성능 개선
    2. 메타데이터 볼륨이 커지면 Aiflow 오퍼레이션이 느려질 수 있음
       → 리텐션 정책 활용해서 28일로 지정
    3. DAG들은 사용자 & 팀과 연결하기 어려울 수 있음
       → 중앙 집중식 메타데이터 저장소 사용
    4. DAG 작성자들이 많은 권한을 가짐
       → DAG policy 활용
    5. 일관적인 부하 분산을 보장하는 것은 어려움
       → 표준화된 일정을 생성해서 트래픽 버스트를 줄이기
    6. 여러 리소스 경합 지점들이 있음
       → Pools, Priority Weight, Celerey Queue 와 Isolated Workers 활용
"
"https://news.hada.io/topic?id=6564","Product-Market Fit 의 4가지 종류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Product-Market Fit 의 4가지 종류

     * Product-Problem Fit : 다수의 개별 고객 세그먼트에 대한 중요한 문제를 응집력 있게 해결하는 기능 모음
     * Solution-Market Fit : 전체 시장의 큰 부분 또는 작은 세그먼트에서 의미 있게 차별화된 광범위한 제품을 제공
     * Feature-Problem Fit : 중요한 유스케이스에 대해서 매력적인 가치를 제공하는 작은 기능 모음
     * Solution-Segment Fit : 일부 세그먼트의 요구사항을 아주 잘 충족시키는 제품군 및 서비스를 광범위하게 제공
"
"https://news.hada.io/topic?id=6512","Windmill - 파이썬 기반 회사 내부용 앱 작성 및 자동화 플랫폼 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Windmill - 파이썬 기반 회사 내부용 앱 작성 및 자동화 플랫폼 오픈소스

     * 간단한 파이썬 스크립트 만으로 회사 내부용 도구들 이나 자동화 워크플로우를 작성 가능
     * 스크립트에서 UI는 자동 생성
     * 스크립트 및 플로우는 스케줄러로 실행
     * 셀프호스팅 가능
     * 버저닝 지원
     * GitHub CI/CD로 자동 배포
     * 워크스페이스는 Tarball로 Export 가능 : No Lock-in
     * Rust 오픈소스

   HN에 누군가 뉴스로 올렸는데, 개발자가 아직 여기엔 올릴 준비가 안되었다면서 10분후 YC 인터뷰 볼꺼에요! 하더니.. YC 통과 했다고 댓글을 적었네요.
   https://news.ycombinator.com/item?id=31272793
"
"https://news.hada.io/topic?id=6594","Playwright 1.22.0, React/Vue/Svelte 컴포넌트 테스트 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Playwright 1.22.0, React/Vue/Svelte 컴포넌트 테스트 가능

     * Playwright Test 로 웹 컴포넌트 테스트
          + 모든 기능(병렬화, 에뮬레이션, 디버깅 등) 사용 가능
          + React, Vue.js, Svelte 지원
          + 컴포넌트 테스트용 index.html을 자동 생성
          + 브라우저가 실제로 로딩하고, 테스트는 Node.js에서 실행
          + Vite 사용
     * .toHaveScreenshot() assert 추가
     * ARIA role/attr 등으로 선택 가능

   역시 경쟁은 좋은거네요. Puppeteer 쓰고 있는데, 언제 Playwright로 갈아탈까 고민 중입니다.

   버전이 1.2.2가 아니라 1.22.0 이네요

   앗 고맙습니다. 수정했습니다
"
"https://news.hada.io/topic?id=6581","SQLite의 Temporary Table 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SQLite의 Temporary Table 활용하기

   여러 개의 테이블을 하나로 묶어서 쿼리할 때 선택할 수 있는 옵션은 3가지 : CTE, View, 임시테이블
     * CTE : 서브쿼리들을 묶어서 실시간으로 계속 계산되기 때문에 서브쿼리가 느리면 같이 느려짐
     * View : CTE 처럼 동작하지만 레퍼런스 가능하고 서브쿼리를 계속 반복하지는 않음. 하지만 역시나 계속 실시간 계산. PostgreSQL 같은 경우는 디스크에 저장하는 Materialized View가 있지만 SQLite에는 없음
     * Temporary Table : 실제 테이블 처럼 디스크에 데이터를 저장하고 인덱스 생성도 가능. 하지만 DB 커넥션이 살아있는 동안에만 존재함.
          + SQLite는 임시 테이블을 별도의 temp 데이터 베이스에 저장함
          + temp db는 아예 디스크에서 별도의 파일로 관리하며 현재 DB 커넥션에게만 보임
          + 커넥션이 종료되면 자동으로 삭제
     * 임시테이블은 데이터에 대해 뭔가를 알아보고 실험하기에 좋으니 편하게 활용 가능
"
