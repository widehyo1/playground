"https://news.hada.io/topic?id=2047","Matrix, 모든 개인 대화에 E2E 암호화를 기본값으로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Matrix, 모든 개인 대화에 E2E 암호화를 기본값으로

   - 공식 클라이언트인 Riot 에서 베타 시작한지 3년만
   - Cross-Signing
   - QR코드 인증
   - non-E2EE 지원을 위한 프록시 Pantalaimon
   - 암호화된 채팅방 검색 및 인덱싱

   보안에 신경을 쓴다면 요즘 가장 추천하는 솔루션은
   - Matrix https://matrix.org/ - Slack/IRC 대체. 서버간 페더레이션 및 브릿지 가능(슬랙,IRC,XMPP,텔레그렘,행아웃,시그널등)
   - Signal https://signal.org/ko/ - 카카오톡/라인/텔레그램 대체. 가입시 전화번호 필요

   상세 구현은 Riot 블로그에 있습니다. 관련 링크를 잘 정리해놔서 보기 편합니다.
   https://blog.riot.im/e2e-encryption-by-default-cross-signing-is-here/

   matrix - 탈중앙화 방식의 오픈소스 실시간 커뮤니케이션 네트워크 https://news.hada.io/topic?id=1109
   모질라 재단, 내부 메시징 도구를 IRC에서 Riot/Matrix로 변경하겠다고 발표 https://news.hada.io/topic?id=1110
"
"https://news.hada.io/topic?id=2056","EdenSCM - 크로스플랫폼 고확장성 버전 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     EdenSCM - 크로스플랫폼 고확장성 버전 관리 도구

   - 페이스북의 자체 버전 관리 툴. Mercurial 기반으로 작성했지만 자신들에 맞게 확장.
   - 3개의 컴포넌트로 구성
   ㅤ→ eden : CLI도구. 윈/맥/리눅스
   ㅤ→ Mononoke : 분산형이 아닌 SCM서버. 거대 Repo를 지원하기 위해 체크아웃시 전체가 아닌 일부만 다운로드하고 필요할때 추가 다운로드. 리눅스 온리. Rust Cargo 지원예정
   ㅤ→ EdenFS : 체크아웃을 관리하기 위한 가상 파일 시스템. 거대 Repo에서 빠르게 체크아웃 하기 위해 사용. Sparse Checkout 과 비슷하지만 별도 리스트 관리 필요 없어서 사용자에게 훨씬 편리한 방식. Watchman과도 연동. 리눅스/맥/윈도우
   - 페이스북의 거대한 Monorepo 코드베이스를 지원하기 위해서 만든거라 페이스북 외부지원은 아직 실험중.

   * MS 는 Git을 확장한 VFS for Git https://vfsforgit.org/
   * Google 은 Piper https://cacm.acm.org/magazines/2016/…
   * 페이스북이 Mercurial 기반을 선택한 이유 https://engineering.fb.com/core-data/scaling-mercurial-at-facebook/
   윈도우/구글/페북 모두 초대형 Monorepo 라서, 그 시절(2010년대 초반)의 Git은 적절하지 않으니 자신들의 길을 간거라고 보면 될 듯.
   ㅤ→ 구글이 2016년 기준 86TB, 20억 라인, 9백만개의 소스코드 파일에 3500만개의 커밋
   ㅤ→ 페이스북이 2013년 기준 1700만 라인에, 44000개의 소스코드 파일
   지금은 Git 도 2.25 부터 Sparse Checkout 을 지원하긴 하지만 아직 초기단계라고 볼수 있으니까요.
   Git 2.25 릴리즈 - 주요 변경 사항들 https://news.hada.io/topic?id=1309
"
"https://news.hada.io/topic?id=1989","뉴욕타임즈, 사용자계정을 삭제하는 대신 메일주소와 계정명 뒤에 '1000'을 붙여서 관리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           뉴욕타임즈, 사용자계정을 삭제하는 대신 메일주소와 계정명 뒤에 '1000'을 붙여서 관리

   NYT 고객지원팀과 대화도중 알아낸 것.
   실제 사용자를 삭제하지 않고 사용자명과 이메일주소 뒤에 '1000'을 붙이고 있다고..

   예전에 사용자 계정뒤에 _deleted 붙여서 삭체처리했던게 기억나네요 ㅎㅎ

"https://news.hada.io/topic?id=1979","RepoPeek - 클론전에 GitHub Repo 정보 확인하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RepoPeek - 클론전에 GitHub Repo 정보 확인하기
   실제로 서비스를 만들어 운영하다보면 사용자 정보,결제 정보,게시글 등 다양한 항목들을 삭제해야 하는 시점/방식때문에 골치가 아프긴 합니다.

   저렇게 처리하면
   - 정보 확인 후에 Clone 진행하는 Python 스크립트
   - deleted 컬럼 같은걸 만들어서 처리하는 것 보다 간편
   - Repo의 정보들 : 기본 브랜치, 전체 크기, 라이센스, 개발 언어, 기본 통계(Fork,Watcher,Issues,Stars), URL들
   - 서비스 레거시 코드에 별도 작업 안하고도 사용자 삭제된 것처럼 적용이 가능
   - GitHub API 이용 ( Auth 없이 사용하는거라 시간당 60회 제한 )

   - 법률상 얼마간 보관해야 하는 규칙들을 지킬 수 있음 => 국가별, 서비스별로 다르니 주의 필요.
   리파지토리 크기는 정말 클론전에 알았으면 하는 정보인데 왜 아직도 깃헙 기본 UI상에서 표현이 안되는지..
   하여튼 이런 저런 장점으로 실전에서도 사용하는 방식이긴 합니다.
   코드가 얼마 안되어서.. Rust로 CLI를 만들어 보면 좋겠다 싶은 유틸이네요.
   (우버는 초기에 계정 삭제요청하면 void 를 뒤에 붙였다고..)
"
   개발자 관점에서는 이게 뭐야! 싶지만 세상일이 다 뜻대로 되지 않죠.
   아마도 NYT는 레거시 코드때문에 저런 방식을 편법으로 사용한게 아닐까 추측해 봅니다.
   국내에서는 개인정보의 경우 아래 법령들을 참고 해야합니다.
   ① 개인정보 보호법 제21조(개인정보의 파기) - http://www.law.go.kr/법령/개인정보보호법/(20171019,14839,20170726)/제21조
   ② 정보통신망법 제29조(개인정보의 파기) - http://law.go.kr/법령/…(20190625,16021,20181224)/제29조

   엇 URL Link 변환 정규식이 () 를 처리 못하는 군요. 이건 수정해야겠네요.
   ① 개인정보 보호법 제21조(개인정보의 파기) - https://j.mp/3bNzTWH
   ② 정보통신망법 제29조(개인정보의 파기) - https://bit.ly/3bLVEGl
"
"https://news.hada.io/topic?id=2014","(마케터 머리 꼭대기에 있는) Z세대가 광고 보는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (마케터 머리 꼭대기에 있는) Z세대가 광고 보는 법

   1. Z세대는 인스타 피드에 뜨는 맞춤형 광고를 이용하고,
   2. 유튜버 돈 벌라고 영상 앞에 달린 광고를 Skip 없이 끝까지 시청하며,
   3. 광고주 보라고 유료 광고 영상에 폭풍 칭찬 댓글을 달고
   4. 사고 싶은 게 생기면 광고(리뷰)를 제 손으로 찾아본다.

   재작년 자료긴하지만, '밀레니얼, 그리고 Z세대가 말하는 유튜브의 모든 것'이라는 인포그래픽도 한 번 보시면 좋을 것 같아 링크 남깁니다
   https://www.20slab.org/Archives/29165

   CEO,마케터,개발자 누구든 한 번 읽어보시면 좋을듯 합니다. 소비자 트렌드의 파악은 중요하니까요.
   확실히 요즘 세대의 광고 소비는 다르긴 한 듯
"
"https://news.hada.io/topic?id=1967","MS Word, 마침표 뒤 공백 2칸을 수정하도록 맞춤법 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MS Word, 마침표 뒤 공백 2칸을 수정하도록 맞춤법 제안

   마이크로소프트는 MS Word의 맞춤법 교정 기능을 업데이트하여, 마침표 뒤 공백이 2칸씩 들어가 있는 경우 이를 수정하도록 제안하게끔 하였습니다.
   과거 타자기를 쓰던 시절에는 마침표 뒤에 스페이스를 2칸씩 찍는 관행이 퍼져 있었다고 합니다. 이는 타자기와 같이 고정폭 글꼴을 사용하는 환경에서 가독성을 올려주는 것으로 간주되었습니다. 지금까지도 이 관행을 따르는 사람들이 소수나마 남아 있었기 때문에, MS Word에서는 이를 잘못된 맞춤법이 아니라고 용인하고 있었지요.
   그러나 현대의 WYSIWYG 워드프로세서에서는 기본적으로 가변폭 글꼴을 사용하며, 또한 이러한 오래된 관행이 실제로는 가독성을 그리 증진시키는 것도 아니라고 합니다. 게다가 마침표 뒤의 공간이 너무 넓으면 시각적으로 보기 싫기도 하지요. 이미 대세는 스페이스 1칸입니다.
   지금까지는 MS Word에서 마침표 뒤에 스페이스를 2칸씩 찍어도 틀린 것으로 간주되지 않았으나, 이제부터는 맞춤법 검사에서 이를 지적하게 됩니다. 정 원한다면 옵션 설정으로 이 지적을 끌 수는 있으나, 그럴 필요는 없어 보이는군요.
   참고 :
   https://theverge.com/2018/4/…

   공백 2칸이 타자기때부터 내려오던 컨벤션이었군요. 마크다운이나 latex에서 가끔 본 것 같습니다.

   신기하네요. 전 2칸은 찍어본적이 없는데 ㅎㅎ
"
"https://news.hada.io/topic?id=2057","Mario - 쉘에서 Python 코드로 파이프라인 하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Mario - 쉘에서 Python 코드로 파이프라인 하기

   - 쉘에서 파이썬 코드를 실행
   - 파이썬 객체를 다중 pipe로 전달
   - 플러그인 기능
   - eval,apply,chain,filter,map,reduce
   - async 함수 지원 async-map, async-filter
   - csv,json,yaml,toml,xml 을 읽고 쓰기
"
"https://news.hada.io/topic?id=1999","Working Copy - iOS용 Git Client","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Working Copy - iOS용 Git Client

   - Git Clone/Commit/Push/Resolve
   - 웹 미리보기 가능한 IDE로 앱내 편집가능
   - iOS 단축키 앱과 x-callback-url 로 자동화 지원
   - 외부 앱과 드래그앤 드랍 및 파일연동 지원
   - Repo 검색, LFS, GPG 서명 커밋 지원
   - Push는 IAP로 구매가능한 Pro 버전에서만 가능 ($19.99)

   안드로이드용 Git Client는
   - Pocket Git http://pocketgit.com/
   - mgit https://github.com/maks/MGit
"
"https://news.hada.io/topic?id=1990","Retro CSS 프레임워크들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Retro CSS 프레임워크들

   98.css: Win98 테마
   BOOTSTRA.386: 80년대 도스 터미널
   PSOne.css: 플스1
   NES.css: 닌텐도 NES
   new-dawn: 올드 맥 ( Mac OS 8.1 )
   RPGUI: 도트 RPG 게임 스타일
   StarWarsIntro.css: 스타워즈 시작 화면
   AnderShell 3000: 녹색 CRT 터미널
"
"https://news.hada.io/topic?id=2029","Director of Engineering 은 무슨 일을 하나요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Director of Engineering 은 무슨 일을 하나요 ?

   보통 CTO에게 직보하는 DoE(기술이사)의 업무 범위 이야기
   - 피플 리더십
   ㅤ→ 1대1 미팅 진행
   ㅤ→ 리크루팅
   ㅤ→ 기술 성장 로드맵 정의
   ㅤ→ 핵심 가치 추구
   ㅤ→ 미션 수행
   - 프로세스 관리
   ㅤ→ Software Development Lifecycle
   ㅤ→ 팀 스케일링
   ㅤ→ 기술 전략 수립
   ㅤ→ EOS(Entrepreneurial Operating System)
   - 제품의 방향
   ㅤ→ 로드맵을 위한 자원관리
   ㅤ→ 배포 관리
   ㅤ→ 전체적인 감독
   ㅤ→ 접근 권한 관리
   ㅤ→ 특정 기능을 개발할 것인지, 구매할 것인지 결정

   일반적으로 작은 규모의 스타트업이라면 CTO가 해야할 일들이겠지만, 회사 규모가 좀 커지기 시작하면
   CTO는 리더십,비즈니스 연계 등 더 윗선에서 봐야할 것들을 보게 되니까
   DoE가 CTO를 도와서 할 일들을 잘 정리한 문서인듯 합니다.
   CTO/VPE 가 첫 90일동안 해야할 일 https://news.hada.io/topic?id=1686 글과 비교하면서 보세요.
   글에 설명 안 된 몇개 단어들
   What is EOS? https://www.eosworldwide.com/what-is-eos
   L10 Meeting https://www.eosworldwide.com/blog/what-the-heck-is-a-level-10-meeting

   읽으면서 그럼 CTO는 뭐하지? 했는데 답이 여기 있었네요.. ㅎㅎ
"
"https://news.hada.io/topic?id=2031","AWS부사장, 아마존을 비판하며 블로그로 퇴사 선언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AWS부사장, 아마존을 비판하며 블로그로 퇴사 선언

   - 지난 4월, 창고 근로자에 대한 아마존의 코로나 대응을 비판한 디자이너 2명 해고
   - AWS의 VP이자 영향력 있는 엔지니어로 알려진 팀 브레이(Tim Bray)가 이를 비판하며 퇴사를 선언
"
"https://news.hada.io/topic?id=2023","The Wayland Protocol이 무료로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      The Wayland Protocol이 무료로 공개

   리눅스 디스플레이 서버 프로토콜인 Wayland에 대해 Wayland Compositor Libary인 wlroots와 Wayland Compositor인 sway의 개발자 Drew Devault가 쓴 책인 The Wayland Protocol이 무료로 공개
"
"https://news.hada.io/topic?id=1980","Times New Arial","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Times New Arial

   - Variable Font로 만들어서 값에 따라 Times 와 Arial 사이를 오가는 가변형 폰트
   - 화면에서 마우스를 움직여서 값 조정
   - 클릭하면 예제 화면에서 적용 및 조정 가능

   Variable Font - 배리어블 폰트 https://news.hada.io/topic?id=1664
   구글 Variable Fonts 지원 시작 https://news.hada.io/topic?id=608
   Variable Fonts Primer - 가변 글꼴 입문서 https://news.hada.io/topic?id=1673
   가변 폰트의 퍼포먼스 장점 https://news.hada.io/topic?id=1696
"
"https://news.hada.io/topic?id=1972","거꾸로 가는 퀴비 (feat.틱톡)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          거꾸로 가는 퀴비 (feat.틱톡)

   제프리 카젠버그가 새롭게 시작한 모바일 영상 스트리밍 플랫폼인 ‘퀴비(Quibi)’
   테크크런치 리뷰 기사의 요약 및 번역
   ""퀴비는 틱톡과는 상반되는 서비스이며, 이는 좋은 게 아니다.""
   - 퀴비의 실수들: 헐리우드가 결정하는 내용, 화면캡쳐 불허, 느린 전개, 소셜에 반하는 비디오 클립

   넷플릭스랑 틱톡을 합치려다 이도저도 아니게 된것 같네요.

   요즘 시대에 소셜 공유 기능을 제대로 활용 안하는 건 정말 의외긴 하네요.
   Shameless plug : 여기 긱뉴스는 https://social.hada.io/ 기능을 통해 동적으로 소셜이미지를 생성하고 있습니다. 페북,트위터 등으로 긱뉴스 기사를 공유하시면 이미지를 보실수 있습니다
"
"https://news.hada.io/topic?id=2002","Rust/WinRT Public Preview 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rust/WinRT Public Preview 공개

   - C++/WinRT와 마찬가지로 윈도우즈 런타임 API를 표준 언어에서 사용 가능하도록 만드는 언어 프로젝션
   - 메타데이터를 통해 과거/현재/미래의 모든 WinRT API를 호출 가능
   - MS는 오랫동안 C++을 백본으로 의존해 왔지만, 보안 및 안전성 측면에서는 Rust가 우수하고 C++의 문제를 해결할 수 있을 것으로 기대
   - 현재 COM API를 지원하는 com-rs Crate와도 심리스하게 연동할 예정

   C++/WinRT 소개(한국어)
   https://docs.microsoft.com/ko-kr/windows/…
"
"https://news.hada.io/topic?id=1977","대부분의 안티바이러스 프로그램으로 임의의 파일을 제거할 수 있는 취약점 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               대부분의 안티바이러스 프로그램으로 임의의 파일을 제거할 수 있는 취약점 공개

   안티바이러스 프로그램이 악성 파일을 격리 조치하는 메커니즘을 역으로 악용하여, 임의의 파일을 제거할 수 있는 취약점이 발표되었습니다. (영어) 이 취약점은 2018년 가을에 호스팅 업체인 RACK911의 보안 부서에서 발견하였으며, 지금은 주요 안티바이러스 개발사에서 이를 패치했다고 합니다.
   이 취약점은 기본적으로 안티바이러스 프로그램의 실시간 감시 기능이 악성 파일을 발견한 뒤 격리 조치하기까지 약간의 지연 시간이 있다는 것과, 파일 시스템에 있는 파일/디렉터리 연결 기능(Linux나 macOS에서는 Symbolic link, Windows에서는 Directory Junction을 사용)을 응용한 것입니다. 간단히 말하자면, 일부러 안티바이러스 프로그램의 실시간 감시 기능에 걸리는 파일(예를 들면 EICAR 테스트 파일)을 준비한 다음 안티바이러스가 이를 감지하면 파일이 격리되기 전에 없애버리고 싶은 파일의 심볼릭 링크로 슬쩍 대체해버리는 것입니다. 그러면 안티바이러스는 멀쩡한 파일을 격리소로 옮겨버리게 되겠지요. 이렇게 격리된 파일이 운영체제의 중요 파일이라면 시스템에 대한 서비스 거부 공격이 될 것이고, 안티바이러스 작동에 필요한 파일이라면 보안 시스템을
   마비시킨 것이 됩니다. 이 기법은 타이밍이 중요하긴 하지만, 배치 파일에 의한 단순 반복으로도 충분히 성공할 수 있었던 모양입니다.
   Windows용 개념 증명 영상 :
   https://www.youtube.com/watch?v=MblUiyazdAc
   macOS용 개념 증명 영상 :
   https://www.youtube.com/watch?v=iVC_QJLOVt8
"
"https://news.hada.io/topic?id=2041","ink - React로 CLI만들기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ink - React로 CLI만들기

   - create-ink-app 으로 Scaffold 생성
   - 최종 렌더링 결과가 DOM이 아니라 터미널 출력용 문자열
   - 페이스북 Yoga엔진으로 터미널에서 Flexbox 레이아웃을 지원
   - Box, Color, Text, Transform, AppContext, StdinContext, StdoutContext 등의 기본 컴포넌트
   - Link, Spinner, Gradient, Image, Tab, Multiselect, ProgressBar, Table, Markdown 등의 확장 컴포넌트
   - useInput, useApp, useStdin, useStdout, useStdoutDimensions 등의 Hook 지원
   - Gatsby, Parcel 등에서 사용중
"
"https://news.hada.io/topic?id=1993","My Personal Kanban","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           My Personal Kanban

   - 1페이지 웹앱으로 개발된 개인용 칸반 보드
   - 여러개 칸반 보드 지원, 2~10개까지의 컬럼
   - 기존 칸반을 템플릿으로 하여 생성 가능
   - 브라우저 로컬스토리지에 저장
   - JSON 임포트/익스포트
   - 클라우드 연동 기능 제공 (업로드/다운로드)

   비슷하면서 CLI 형태로 https://taskell.app/ 이라는 것도 있습니다.

   1인 개발자용으로 간편히 쓰기 좋은 칸반 솔루션 인듯
   비슷한 용도로 개발된 Nullboard 도 있음 https://github.com/apankrat/nullboard
   이전에 공유된 Kanban 글들
   DevShop, 게임으로 배우는 Kanban https://news.hada.io/topic?id=886
   Kanboard - 오픈소스 칸반 https://news.hada.io/topic?id=1907
"
"https://news.hada.io/topic?id=1986","Memories - 256바이트 데모씬 우승작품","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Memories - 256바이트 데모씬 우승작품

   - Revision 2020 ""PC 256 Byte"" 부문 우승
   - 어셈블리로 작성된 DOS용 256바이트 COM실행파일
   - 7개 화면과 음악으로 구성
   - 개발자의 각 코드 라인별 주석과 관련한 기법 설명

   실제 동작화면 https://www.youtube.com/watch?v=Imquk_3oFf4
   맥OS에선 brew + nasm & doxbox로 실행가능
   brew install dosbox nasm
   nasm memories.asm -fbin -o memories.com
   dosbox
   mount D ~/Development/memories (or whatever)
   D:
   memories
   윈도우에선 https://nasm.us/ + https://www.dosbox.com/ 설치하고 실행
   cd c:\temp\demo
   nasm.exe memories.asm -fbin -o memories.com
   mount d c:\temp\demo
   d:
   memories
"
"https://news.hada.io/topic?id=1996","Insomnia Designer - API설계용 협업도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Insomnia Designer - API설계용 협업도구

   - Spec-First 개발을 위한 데스크탑 툴
   - API 스펙을 만들고, Swagger로 프리뷰하고, Git으로 공유
   - GraphSQL 지원
   - Oauth 1/2, Digest/Basic/NTLM
   - Multipart Form / Query Param builder
   - Proxy 설정가능
   - 맥,윈,리눅스
   - 오픈소스
"
"https://news.hada.io/topic?id=2035","iOS 와 Android 앱의 디자인 차이점 32가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     iOS 와 Android 앱의 디자인 차이점 32가지

   단순 비교만이 아니라, 각 OS UI의 특장점을 이해하는데 좋은 글
   기본 차이점
   1. HIG vs. Material Design
   2. 단위: pt vs. dp
   3. 스크린: 320pt x 568pt vs. 360dp x 640dp
   4. 폰트 : San Francisco vs. Roboto
   5. 안드로이드 네비게이션 바
   6. 매터리얼 디자인의 Shadow와 Elevation
   7. Naming:
   ㅤ→ Tab bar vs. Bottom Navigation Bar
   ㅤ→ Navigation Bar vs. Top App Bar,
   ㅤ→ Segmented Controls vs. Tabs
   ㅤ→ Alerts vs. Dialogs
   ㅤ→ Touch ID vs. Android Fingerprint
   8. 탑 레벨 내비게이션 방법
   9. 탭바와 하단 네비게이션 바의 차이
   10. 안드로이드 탭의 특별한 기능
   11. 하위 페이지 보이는 방법의 차이
   12. 네비게이션 서랍(Drawer) 호출 패턴
   13. 스크롤시의 동작 차이
   14. 검색 동작의 차이
   컴포넌트(UI) 차이점
   15. iOS에 없는 것들
   ㅤ→ Navigation Drawer, Backdrops, Banner, Snackbar, Chips, Bottom App Bar, FABs(Floating Action Button), Bottom Navigation Drawer, Side Sheet, Expanding Bottom Sheet, Standard Bottom Sheet,
   16. Android에 없는 것들
   ㅤ→ Page Control, Toolbars, Steppers, Popovers
   17. 같지만 다른 Status Bar
   18. Refresh Content Control vs. Swipe to refresh
   19. 컨트롤들의 비주얼 차이점
   20. 뒤로 가기 화살표의 모양과 헤더포지션 차이
   21. ""점 세개"" 아이콘의 차이점
   22. Pickers : iOS 날짜선택은 드럼타입, 안드로이드는 일반 달력 모양
   23. 텍스트 필드의 차이
   ㅤ→ iOS 는 레이블을 필드위에 보여주고 입력시 사라짐, 안드로이드는 입력시 위로 이동
   ㅤ→ 내용 Clear 버튼은 비슷
   ㅤ→ 매터리얼 디자인은 입력시 밑줄을 Primary색상으로 강조
   24. Context Menus vs. Menus
   25. Action View/Activity View vs. Modal Bottom Sheet
   26. Edit Menus vs. Text Selection Toolbar
   27. 디바이더 사이즈 크기 : iOS 0.5pt vs. Android 1dp
   다른 차이점
   28. 탭 존 크기 : iOS 44x44pt , Android 48x48dp
   29. App Store vs. Google Play
   30. iOS의 특이한 Undo/Redo : 사용자가 폰을 흔들면 Undo 기능 동작
   31. 런치 화면의 차이 : 매터리얼은 런치화면에 앱로고를 허용하지만, HIG는 런치화면에을 마케팅용도로 사용하는것은 추천하지 않음. 플레이스 홀더로만 사용
   32. 매터리얼 디자인의 추가 요소 : Data Format, Data Visualization, Empty States, Offline States 등

   스타트업인데 앱은 뭘로 개발해야 하나요? 라는 질문에 저의 기본 대답은
   #1 앱이 꼭 필요없는 서비스라면, 모바일 웹만 먼저 잘 만들어도 됩니다.
   #2 앱이 꼭 필요하다면 초기엔 React Native 나 Flutter 로 iOS/Android 플랫폼을 동시 지원하세요.
   #3 사용자 많아지고 개발자도 늘고 자금도 생기면, 각 OS에 최적화된 네이티브앱으로 바꿔도 좋습니다. (Swift & Kotlin)
   근데, 이거 10년 전과 대답이 똑같습니다.
   그때는 HTML5, Hybrid(Phonegap) , Objective C++ & Java 였을 뿐..
   지금은 웹을 React로 만들면 React Native 때문에 조금 편하긴 하겠네요.
   #1은 무조건, #2를 추천하고, #3은 선택
   이 UI 비교 글은 #3번일 때는 잘 이해해야 하고, #2일때도 봐두면 좋은 글입니다.

   xguru님이 남긴 댓글에 이어서
   단 카메라, GPS, 가속 센서 등이 하드웨어를 많이 타는 서비스이라면, 바로 3번으로 가십시요.
   (ex. 실시간 비디오 필터앱을 만들겠다 -> #3으로...)
"
"https://news.hada.io/topic?id=2045","XP 실천을 위한 페어 프로그래밍과 TDD 경험담","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      XP 실천을 위한 페어 프로그래밍과 TDD 경험담

   개발자 부부가 코로나19로 대만 여행을 취소한 뒤 연휴 기간 동안 사흘간 블로그 백엔드 API 서버를 개발하는 토이 프로젝트를 진행한 기록 및 회고입니다. (한국어) 특히 아내가 드라이버 역할을 맡고 남편이 내비게이터가 되는 페어 프로그래밍을 실천하였고, 여기에 TDD(Test-Driven Development)를 더하여 XP(eXtreme Programming)의 주된 원칙을 실천하고자 한 것이 특징입니다.
   해당 프로젝트의 Github 주소:
   https://github.com/StellaKim1230/myblog-backend
"
"https://news.hada.io/topic?id=1994","Termux - 안드로이드용 터미널 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Termux - 안드로이드용 터미널 앱

   - ssh, bash/fish/zsh, emacs/vim, grep, curl, rsync 등 지원
   - apt로 추가 패키지 설치가능
   - Perl, Pyton, Ruby, Node.js 지원
   - 다양한 애드온 :
   ㅤ→ API: 안드로이드 & 크롬 하드웨어 기능 접근
   ㅤ→ Boot: 부팅시 특정 스크립트 실행
   ㅤ→ Float: 플로팅 윈도우로 Termux 실행
   ㅤ→ Styling: 컬러스킴 / 폰트 커스터마이징
   ㅤ→ Tasker: Tasker에서 Termux 내부 호출 지원
   ㅤ→ Widget: 홈 화면에서 스크립트 실행가능

   iOS에서는 지원 불가능한 애드온 기능들이 맘에 드네요.
   iOS용 터미널들
   iSH - iOS용 리눅스 쉘앱 https://news.hada.io/topic?id=1742
   a-Shell - iOS용 무료 쉘 https://news.hada.io/topic?id=1983
"
"https://news.hada.io/topic?id=2063","Awesome AWS Workshops","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Awesome AWS Workshops

   - AWS를 쉽게 배우는 워크샵 모음 (현재 총 191개)
   - 카테고리별 정리
   AI and ML
   Alexa
   Application Modernization
   BlockChain
   Connect
   Containers
   Databases
   DataLake and Analytics
   Development and CI/CD
   End User Computing
   Enterprise Customers
   Event Driven
   HPC
   Infrastructure as Code
   Infrastructure
   IoT
   Management Tools and Governance
   Media
   Microsoft
   Networking
   Security
   Serverless
   Storage

   한국어로 된 자료들
   AWS 시작하기 리소스 센터 - https://aws.amazon.com/ko/getting-started/
   AWS Training & Certification의 한국어 디지털 과정들 - https://aws.training/LearningLibrary/…
   AWS 생활코딩 - https://opentutorials.org/course/2717
   아마존 웹 서비스를 다루는 기술: 실무에서 필요한 AWS 클라우드의 모든 것! http://pyrasis.com/book/TheArtOfAmazonWebServices
"
"https://news.hada.io/topic?id=1953","PyTorch 1.5 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PyTorch 1.5 릴리즈

   - [Stable] C++ Frontend API, 분산 RPC API
   - [Experimental]
   ㅤ커스텀 C+++ 클래스
   ㅤCV를 위한 Channels Last 메모리 포맷
"https://news.hada.io/topic?id=1985","bat - Syntax Highlighting 되는 cat","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    bat - Syntax Highlighting 되는 cat
   ㅤautograd용 고수준 api 추가 (jacobian,hessian,jvp, vjp, hvp 등 지원)

   - Python 2 지원 중단
   - 문법강조 되도록 cat 명령어를 확장
   - torch_xla 1.5
   - git 연동으로 수정 부분 확인가능 : 왼쪽에 라인번호 및 ~+- 표시
"
   - -A 옵션으로 안보이는 문자들 출력 가능(탭/빈칸/CR/LF/ESC/BS)
   - 자동 페이징 지원
   - 맥/윈/리눅스 바이너리 및 설치옵션 제공

   라즈베리 파이의 우분투 리눅스에 `sudo apt install bat`으로 이걸 설치했는데, 이상하게 `bat` 명령어가 안 먹혀서 잠깐 삽질했네요. 결론부터 말하자면 일부 시스템에서는 이걸 설치했을 때 `batcat`이라는 다른 이름으로 실행해야 합니다. 그래서 alias를 따로 잡아줘야 했네요.

   https://news.hada.io/topic?id=1891
   여기에도 포함되어있습니다!

   한번 쓰고 나면 다시는 cat을 안쓰게 됩니다

   오~ 쥑이네요... 한번 써보고 cat을 alias로 교체!!
"
"https://news.hada.io/topic?id=2050","'새 n번방 금지법'에 우리가 “NO” 해야 하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     '새 n번방 금지법'에 우리가 “NO” 해야 하는 이유

   얼마 전 만천하에 드러나서 전 국민의 공분을 산 일명 “n번방” 사건에 대해서는 다들 알고 계실 것입니다. 이러한 국민적 공분은 입법부에서 새로운 법을 제정해야 한다는 압박으로 작용하였고, 실제로 소위 “n번방 금지법”이라 불리는 일련의 법 개정안들이 나오고 있습니다. 그런데 이 기사에서는 그 중 일부 개정안을 ‘n번방 금지법2’라고 구분하여, 해당 개정안에 대해서는 반대하는 주장을 하고 있습니다. (한국어)
   문제의 개정안은 국회 과학기술정보방송통신위원회에서 논의중인 정보통신망법·전기통신사업법 개정안으로, 인터넷 플랫폼 사업자에게 각종 ‘불법음란물’ 유통을 막기 위한 여러 가지 의무들을 부과하는 것입니다. 특히 이 의무 중에는 [전기통신사업법 시행령]에 명시된 ‘기술적 의무’(제30조의 3)가 포함되어 있는데, 이 기술적 의무란 사업자가 ‘불법음란정보’를 식별하여 이용자가 해당 정보들을 검색하거나 전송하는 것을 막고 전송을 시도한 사람에게 경고 메시지를 보내며 관련 로그를 2년간 남겨야 한다는 것입니다. 이를 어길 경우 해당 개정안에서는 사업자 매출의 3/100 이하 또는 10억원 이하의 과징금을 부과할 수 있도록 하고 있습니다.
   가장 문제가 되는 것은 사업자가 ‘불법음란정보’를 식별하는 것 그 자체입니다. 예를 들어 메신저로 오가는 동영상이나 파일이 어떤 내용인지 확인하여 불법이면 차단한다는 것은 명백한 [검열]이지요. 당연히 사생활 침해 문제가 불거질 수 있습니다. 불법음란물의 판단기준 또한 모호합니다. ‘살색이 많이 나오는 사진을 차단시켰더니 스모 시합 사진이 짤리더라’는 이야기처럼 불법음란정보가 아닌데도 차단되는 오탐지 문제도 발생할 수 있겠지요. 만약에 E2EE(종단간 암호화)가 적용된 경우라면 또 어떨까요? 종단간 암호화가 제대로 적용되었다면, 사업자 측이 그 내용을 전혀 들여다보지 못하는 것이 정상입니다. 설령 법대로 불법음란물을 식별하고 싶다고 해도 할 수조차 없는 것이죠.
   다른 문제는 국내 기업에만 부담이 전가된다는 것입니다. 일단 해당 입법에서는 역외적용 규정을 도입하여 해외 사업자에게도 이러한 의무를 부과시키겠다고는 하지만, 국내에 법인이 없는 해외 사업자의 경우 이런 의무를 따르지 않는다고 해도 warning.or.kr을 띄우는 것 외에는 무슨 실질적인 강제 방안이 있을 수가 있을까요. 애초에 ‘n번방’이 있었던 텔레그램은 어떤 국가의 기관에도 정보를 제공하지 않겠다는 정책으로 유명해진 곳입니다. 그리고 기업에게만 부담을 지우는 것 자체도 문제입니다. 성범죄를 막기 위해서는 차라리 성범죄에 대한 솜방망이식 처벌을 없애는 것이 더 낫지 않을까요?
   그렇다 하더라도 정말로 사업자가 어떠한 조치도 할 수 없지는 않을 것입니다. 예를 들어 클라우드 파일 저장 및 공유 서비스인 MEGA는 업로드된 파일의 해시값을 알려진 아동포르노의 해시값과 대조하여 일치할 경우 사법기관에 신고한다고 합니다. 이런 방식을 응용하면 아동포르노나 리벤지 포르노 등의 유통을 어느 정도 억제할 수 있겠죠. 클라이언트단에서 Perceptual hashing 기법을 적용하여 해시값만 쿼리하는 방식이라면 프라이버시 침해를 최소화하면서도 리벤지 포르노 범죄 피해을 줄일 수 있지 않을까 생각합니다. 다만 그만큼 처리 속도는 떨어질 것이고, DB 운영 비용이 발생하며, 데이터베이스에 해시값이 등록되지 않은 영상이라면 차단도 되지 않는 결점이 있을 것입니다. 또 이미 데이터베이스에 등록된 영상이라 해도 마음먹고 해싱을 우회하려면
   못 할 것도 없겠죠. 애초에 이런 류의 범죄자들이 추적이 용이한 국내 플랫폼을 사용할지도 의문입니다. 완벽한 차단이란 애초에 있을 수 없는 것이죠. 그러므로, 이런 기술적 조치는 근본적 해결책과는 거리가 멉니다.
   이 사안은 인터넷 플랫폼 사업자의 책임과 의무는 과연 어디까지여야 하는지, 또 프라이버시 보호는 어디까지여야 하는지를 묻고 있습니다. 한 가지 확실한 것은, 이건 순전히 개별 기업에 책임을 떠넘기는 것만으로는 해결되지 않을 사안이라는 점입니다. 일단 입법된 법이 제대로 집행되어 이러한 종류의 성범죄자들이 솜방망이 처벌을 받지 않게끔 해야 할 것입니다. 또한 정부에서도 뭔가 부담을 해야 할 것이 있지 않을까 하네요. 예를 들면 만약 정말로 각 사업자가 해시값 기반으로 검열을 해야 한다면 문제가 되는 동영상에 대한 해시값 데이터베이스를 국가에서 통합 운영하여 각 사업자에게 제공하고, 동영상 유출로 피해를 본 사람이 신고하면 이 데이터베이스에 즉각 등록하도록 하는 것은 어떨까요. 적어도 이 정도는 국가에서 부담해야 각 플랫폼
   업체에 검열을 강요하는 것에 최소한의 명분이라도 생기지 않을까 생각합니다.
   ※ 원래 이 공간이 정치나 입법과 관련된 민감한 내용을 올리기에 적합하지 않은 곳이긴 하지만, 이 기사는 IT 관련 입법과 직접적으로 맞닿아 있어 예외라고 생각하여 올린 것이므로 양해 부탁드립니다.
   * 전기통신사업법 일부개정법률안(이원욱의원 등 13인): http://likms.assembly.go.kr/bill/billDetail.do/…
   * 정보통신망 이용촉진 및 정보보호 등에 관한 법률 일부개정법률안(이원욱의원 등 13인): http://likms.assembly.go.kr/bill/billDetail.do/…
   * 전기통신사업법 시행령 제30조의 3: http://law.go.kr/%EB%B2%95%EB%A0%B9/…(20200303,30509,20200303)/%EC%A0%9C30%EC%A1%B0%EC%9D%983
   * ZDNet Korea의 인터넷 역차별과 관련한 기사: https://m.zdnet.co.kr/news_view.asp?article_id=20200504012041

   관련 협회에서 국회에 질의서를 보냈내요.
   https://www.yna.co.kr/view/AKR20200508148851017

   IT 관련 입법을 소개하는 것과, 그에 대해 찬/반 주장을 펼치는 것은 다르다고 생각합니다.
   양쪽의 의견을 균형있게 올려주셨더라면 더 좋았을 것 같습니다.

   ""어떤 것을 올리지 말아야 하나요?
   정치,종교,사건사고,스포츠 등에 관련한 많은 것들은 다루지 않습니다.
   포털 뉴스란에 나올 법한 것들은 대부분 여기랑 맞지 않습니다.""
   GeekNews 사이트 이용법(https://news.hada.io/guidelines)에도 나오는 내용입니다.
   올리신 글에 기술적인 내용이 없다는 것이 아니라, 그 외의 다른 내용(정치적 의견, 개인적 사견 등)이 포함되어 있다는 부분에서 위 이용법에 어긋나는 부분이 있지 않나 생각합니다.
   이러한 논지에서 양쪽의 의견을 균형있게 올리셨더라면 더 좋았을 것 같다는 의견을 말씀드립니다.

   “포털 뉴스란에 나올 법한 것들은 대부분 여기랑 맞지 않습니다.”라는 규칙이 ‘포털 뉴스란에 나온 뉴스라면 무조건 여기에 올려서는 안 된다’를 의미하지는 않는다고 봅니다. 또, 이 규칙이 본문에서의 의견 개진을 원천적으로 금지하거나 무조건적인 기계적 중립을 요구하는 것으로 보기도 힘들다고 생각합니다. “정치/종교/이념 등의 싸움을 위해 사용하지 말아주세요.”라는 규칙도 있습니다만, 비판하는 것은 감정적으로 싸움을 거는 것과는 구분된다고 생각합니다.
   양쪽의 의견을 균형있게 다루는 것에 대해서는, 일단 저는 현 시점에서 이 글을 읽는 대다수의 사람들이 n번방 사건이라는 맥락을 이미 알고 있으며 n번방과 같은 성범죄가 근절되어야 한다는 공감대를 가지고 있다고 가정하고 본문을 썼습니다. 따라서 ‘n번방과 같은 성범죄를 없애기 위해 인터넷 플랫폼 사업자에게 검열 의무를 부과하자’라는 법안을 소개하는 것이 그 자체로 찬성 의견을 온전히 함축하고 있다고 보고 있습니다. 따라서 이를 구구절절히 더 늘리는 것은 동어반복이라 생각하여 일부러 추가하지 않았습니다. 검열 방법과 관련된 기술적인 논의가 특정 기법에만 한정되어 부족한 것은 제 지식이 딸려서 그런 것이니 양해를 부탁드립니다. 가능하면 댓글로 기술적 논의가 이어져도 좋겠지요.

   예외조항이 있네요. 그보다는 이런 이슈에 있어 어떻게 하면 불법 음란물을 차단하는데 기술적으로 기여할 수 있을까 고민하는게 여기 어울리지 않을까요.
   제95조의2에 제1호의2 및 제호의3을 각각 다음과 같이 신설한다.
   1의2. 제22조의5제1항에 따라 불법촬영물등의 삭제, 접속차단 등 유 통방지에 필요한 조치를 취하지 아니한 자. 다만 불법촬영물등 을 인식한 경우 지체 없이 해당 정보의 삭제, 접속차단 등 유통 방지에 필요한 조치를 취하기 위해 상당한 주의를 게을리하지 아니하였거나 기술적으로 현저히 곤란한 경우에는 그러하지 아니하다.
   1의3. 제22조의5제2항에 따른 기술적·관리적 조치를 하지 아니한 자.
   다만 제22조의5제2항에 따른 기술적·관리적 조치를 하기 위하여 상당한 주의를 게을리하지 아니하였거나 기술적으로 현저히 곤 란한 경우에는 그러하지 아니하다.

   불법 음란물 차단에 대한 기술적인 고민도 본문에 안 들어간 것은 아닌데, 그걸로는 부족하게 느껴지시나 보군요. 개인적으로는 Perceptual hashing에 기반한 방법이 현재로서는 그나마 가장 현실적이지 않나 생각합니다.
"
"https://news.hada.io/topic?id=2020","Backblaze B2, S3 호환 API 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Backblaze B2, S3 호환 API 공개

   B2는 S3/GCS와 유사한 기능을 가졌지만 가격이 훨씬 저렴
   ( S3대비 약 20% 정도의 비용 )
   용량 $/GB/M : B2 $0.005, S3 $0.021, GCS $0.020
   전송 $/GB : B2 $0.01, S3 0.05+, GCS $0.08+
   S3 호환 API를 공개함으로써, S3가 사용되는 많은 곳에 B2로 대체해서 적용 가능

   예전에 개인적인 용도로 S3 가격을 계산해본 적이 있었는데, 생각보다 너무 비싸게 나와서 포기한 적이 있거든요. 이런 걸 쓰면 괜찮을 것도 같군요.

   B2의 단점은 멀티리전 지원이 안 된다는 것
   하지만 B2의 장점중 하나는 Cloudflare 와 함께 Bandwidth-Alliance 로 묶여서 얼라이언스 멤버간에 Egress 비용이 무료
   그래서 아래와 같은 서비스 만들기가 가능
   Backblaze B2 와 Cloudflare 를 이용한 개인 무료 이미지 호스팅 만들기 https://news.hada.io/topic?id=406
   Bandwidth-Alliance : https://www.cloudflare.com/bandwidth-alliance/
   Azure, GCP, DigitalOcean, Alibaba, Tencent, Automattic, Backblaze, Vultr, Vapor, Packet등
"
"https://news.hada.io/topic?id=1968","Ubuntu 20.04에서 Snap을 끄는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ubuntu 20.04에서 Snap을 끄는 방법

   우분투에 기본으로 적용된 샌드박스 방식 앱 배포 시스템 Snap
   편한점도 있지만 성능이 안좋고, 사용자 폴더 ~/snap 생성하는 등 여러 문제가 있음
   (실제로 Flatpak 이 성능 및 성숙도 면에서 더 나음)
   Snap 제거 방법
   1. 기존 Snaps들 제거
   2. Snap Core 언마운트
   3. snapd 패키지 삭제
   4. snap 관련 폴더들 삭제

   유니티는 그놈이라는 걸출한 친구가 있어서 얼마 못 버틸거라 생각했지만, 스냅은 요즘 대세인 샌드박싱형 패키지 관리자라 꽤 미래가 있어 보입니다.

   Snap이 생각보다 성능이 꽤 떨어지나 봐요?

   샌드박싱이 이상한지 앱 뜨는데 간단한 앱 뜨는데도 오래 걸리는 경우가 속출한다더군요.

   우분투 똥고집... 유니티 똥고집 접고 스냅 똥꼬집

   Flatpak - 샌드박스형 리눅스 앱 배포 플랫폼 https://news.hada.io/topic?id=1877
"
"https://news.hada.io/topic?id=2032","Hue Jumper - 최소 2KB밖에 되지 않는 자바스크립트 레이싱 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Hue Jumper - 최소 2KB밖에 되지 않는 자바스크립트 레이싱 게임

   코드 골프(Code Golf)라는 것이 있습니다. 누가누가 더 코드의 용량을 잘 줄이나 하는 것을 겨루는 대회인데, 여기에서 파생된 것 중 하나가 제한된 아주 작은 용량 안에서 무언가를 구현하는 종류의 대회입니다. 예를 들면 256바이트 용량 안에서 그래픽과 음악을 출력하는 데모( https://news.hada.io/topic?id=1986 )가 있지요.
   이런 종류의 대회인 2kPlus Jam( https://itch.io/jam/2kplus-jam )에 출품되었던 게임인 Hue Jumper를 소개합니다. (영어) 1980년대의 자동차 경주 게임을 오마쥬한 간단한 레이싱 게임으로, minify된 2k 버전의 파일을 압축하면 용량이 2킬로바이트 아래로 내려갑니다. JavaScript로 되어 있어서 웹 브라우저에서 바로 실행할 수 있지요.
   2k 버전 : https://killedbyapixel.github.io/HueJumper2k/a.htm
   풀버전 : https://killedbyapixel.github.io/HueJumper2k/
   CodePen의 주석 달린 소스코드 : https://codepen.io/KilledByAPixel/pen/poJdLwB
   소스코드에 대한 제작자의 설명 : http://frankforce.com/?p=7427
   게임 방법은 단순합니다. 플레이어는 장애물이 곳곳에 흩어진 도로를 제한된 시간 안에 1000미터 이동해야 합니다. 처음 출발하면 20초의 시간이 주어지고, 그 시간 안에 체크포인트를 통과하면 10초의 시간이 추가로 주어집니다. 도로를 벗어나거나 장애물에 부딪치면 속도가 느려지거나 일시적으로 멈춥니다. 마우스를 움직이면 차의 진행방향이 바뀌고, 더블클릭하면 점프를 할 수 있습니다. 풀버전에서는 몇몇 키보드 키 기능이 추가되었습니다.
"
"https://news.hada.io/topic?id=2012","데이터 분석가 인터뷰를 위한 SQL질문 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        데이터 분석가 인터뷰를 위한 SQL질문 모음

   여러 회사 인터뷰를 진행했던 지원자의 스터디 노트
   - Self-join
   ㅤ→ MAU MoM
   ㅤ→ Tree 구조 레이블링
   ㅤ→ 사용자 리텐션
   ㅤ→ 누적 캐쉬플로우
   ㅤ→ 이동 평균
   ㅤ→ 멀티조인
   - Window Function
   ㅤ→ 최대 연봉자 찾기
   ㅤ→ 부서별 평균 연봉
   - 그외
   ㅤ→ 히스토그램
   ㅤ→ 크로스 조인
   ㅤ→ 고급 카운팅

   문제의 정의가 스타트업에서 많이 쓰일법한 것들이라 재미나게 봤습니다.
   SQL 입문가이드 용으로 추천한 Select Star SQL https://selectstarsql.com/ 사이트도 훌륭하네요.
   브라우저에서 SQLite를 올려서 인터랙티브한 SQL 쿼리가 가능하게 만들어뒀습니다.
   https://github.com/zichongkao/selectstarsql
"
"https://news.hada.io/topic?id=1959","맥북프로가 뜨겁거나 kernel_task의 CPU 사용량이 높다면 왼쪽말고 오른쪽으로 충전하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         맥북프로가 뜨겁거나 kernel_task의 CPU 사용량이 높다면 왼쪽말고 오른쪽으로 충전하세요

   kernel_task 프로세스의 CPU 사용량이 높은건, 왼쪽 썬더볼트 포트 사용시 충전으로 인한 chassis 의 온도가 높아지기 때문
   ㅤ→ 전원선을 오른쪽으로 옮기거나, 충전기가 두개 있다면 양쪽에 꼽으세요
   ㅤ→ 하지만 모든걸 다 오른쪽에 꼽지는 마세요
   ㅤ→ 배터리 완충될 때까지 왼쪽에선 빼두세요
   iStatMenus 로 실제 CPU 사용량 테스트 그래프를 첨부
   - 왼쪽에 전원,USB,HDMI를 꼽고 충전 시작하면 몇분후 kernel_task 가 높은 CPU 사용량을 보이기 시작
   - 오른쪽으로 전원만 옮겨도 kernel_task 의 CPU 사용량이 15초 안에 없어짐
   - 실제로는 OS가 우측에서 발생하는 열은 무시하는듯 하다는 듯. 모든걸 다 오른쪽에 꼽아버리면 팬도 돌지않고 온도만 올라가고, kernel_task 문제도 없지만, 그 때문에 뭔가 시스템이 쓰로틀링 걸려서 사용 불가능 한 것처럼 된다고
   - 2017 15"" Macbook Pro 로 테스트

   와... 정말 바로 해결되었어요... 미 문제 때문에 몇년 동안 고생했는데, 정말 감사합니다ㅜ

   USB-C 포트 1개밖에 없는 맥북 유저는 해당 사항이 없겠죠…?

   2019년에 올라온 글로 HN에서 이슈가 된거 같은데, 정작 저는 썬더볼트3 지원하는 맥북프로가 아니어서 확인이 불가능하네요.
   2018년에도 관련 글이 있었군요.
   https://igorkromin.net/index.php/2018/…
"
"https://news.hada.io/topic?id=2021","AR Cut & Paste - 신 개념 물체사진 붙여넣기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AR Cut & Paste - 신 개념 물체사진 붙여넣기

   AR과 ML을 이용해서 폰에서 찍은 물체 사진을, 배경제거한후 카메라가 보고 있는 컴퓨터 화면의 문서에 즉시 삽입하는 프로토타입
   전체 소스코드는 깃헙에 공개
   모바일 앱: React Native
   로컬 서버: 모바일앱과 포토샵간의 인터페이스. OpenCV + 파이썬
   ㅤ→ Screenpoint 로 스마트폰 카메라가 보는 모니터 위치를 파악
   ㅤ→ 현재 물체 인식은 별도 BASNet 서버 실행해서 연결. 앱내에서 TensorFlow Lite 의 DeepLab을 이용하는 것도 가능할 듯

   스마트폰의 AR과 ML성능이 점점 개선 되고 있으니, 이런 인터페이스는 많아 질거 같네요.
   GitHub : https://github.com/cyrildiagne/ar-cutpaste
"
"https://news.hada.io/topic?id=1973","Paketo Buildpacks - 언어 지원 빌드팩 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Paketo Buildpacks - 언어 지원 빌드팩 모음

   - Cloud Native Buildpacks 표준 기반
   - Node.js, Java, Go, .Net Core, PHP 언어의 패키지를 환경별로 다양하게 지원해서 최신 언어환경을 쉽게 적용
   - 위 언어들로 된 앱을 쿠버네티스에 배포할 때 최적
   * Buildpacks : Dockerfile 없이 소스코드에서 컨테이너 이미지를 더 빠르고 안전하게 생성. 재사용 가능하게 빌드를 모듈화하고, 이미지 레이어를 최소화
   ㅤ빌드팩은 Heroku에서 처음 만들었고, 나중에 Cloud Foundry 및 여러 PaaS에서 도입
   ㅤCloud Native Buildpacks 는 Heroku와 Pivotal이 빌드팩 에코시스템을 통합하고 여러 클라우드 환경에서 도입 가능하도록 표준화
   ㅤ최신 컨테이너 표준들을 적용 : OCI 이미지 포맷, Cross-Repository Blob Mounting, 이미지 레이어 rebasing 기능 등을 도입
   Paketo의 언어별 빌드팩들. 환경에 맞는걸로 선택해서 사용.
   * Node.js : Node Engine, NPM, Yarn
   * Java : OpenJDK, Build-System, Apache-Tomcat, Spring-boot, Googlestackdriver, JMX, Executable-jar, Eclipse-Open9, Amazon Corretto 등
   * Go : Compiler, Dep, Modules,
   * .NET Core : Runtime, ASP.NET Core, SDK, Source Build, Configuration
   * PHP : Distribution, Web, Composer, Apache HTTPD, NGINX
"
"https://news.hada.io/topic?id=1991","Vidact - React 코드를 Virtual DOM없는 VanillaJS로 컴파일하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Vidact - React 코드를 Virtual DOM없는 VanillaJS로 컴파일하기

   - JSX 코드를 순수 JS코드로 컴파일하는 바벨 플러그인
   - Svelte와 비슷하지만 새 문법은 없음
   - 작은 프로젝트에서 좀 더 빠른 성능을 내고자 할 때 사용하는 것을 목표로 개발
   - 현재는 알파상태
"
"https://news.hada.io/topic?id=2026","WWDC20 6월 22일에 온라인으로 개최","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WWDC20 6월 22일에 온라인으로 개최

   - 애플 개발자 앱을 다운 받아서 누구나 참석 가능
   - Swift Student Challenge 도 같이 개최
   ㅤ→ 13세 이상 학생 누구나 참여 가능 (나라별 차이는 있음)
   ㅤ→ Swift playground 로 만든 코드 제출
"
"https://news.hada.io/topic?id=2048","Selecto.js - 마우스/터치로 드래그해서 선택하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Selecto.js - 마우스/터치로 드래그해서 선택하기

   - 드래그 동작으로 아이템 선택기능을 지원하는 라이브러리
   - 실시간으로 아이템 선택 및 토글 가능
   - 스크롤 하면서도 가능
   - react,vue,svelte,angular,preact 용 패키지 제공

   Moveable - 개체 사이즈 모든 방향으로 조정하는 JS 라이브러리 https://news.hada.io/topic?id=689
   개발하신 최연규(Daybrush) 님의 프로젝트
   https://github.com/daybrush/scena 에서 Scene.js, Moveable , Selecto, Guides, Ruler 등 다양한 컴포넌트랑 같이 보세요.
"
"https://news.hada.io/topic?id=1937","마크 안드레센: IT’S TIME TO BUILD (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    마크 안드레센: IT’S TIME TO BUILD (번역)

   ""서양의 모든 조직과 기구들은 코로나바이러스에 대해 전혀 준비되어 있지 않았습니다.
   - 이 위기는 우리가 자초한 것입니다.
   - 우리가 만들지 않기로 한 것들, 사회 전반에 만연합니다.
   - 왜일까요. 무엇이 문제일까요.
   만드는 것. 빌드(build). 우리가 해야 할 것은 이것입니다.""
"
"https://news.hada.io/topic?id=2025","Rich - 터미널을 화려하게 포매팅하는 파이썬 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Rich - 터미널을 화려하게 포매팅하는 파이썬 라이브러리

   - CLI 만들때 다채로운 색상, 스타일(두껍게,이탤릭,밑줄 등) 적용
   - 테이블, 프로그레스 바, 마크다운, 코드 구문강조, traceback 출력 지원
   - 기본 print 대신 rich print() 메소드 적용만으로 아름다운 출력 가능
   - console 객체에서 bbcode 와 비슷한 형식으로 스타일 적용
   - console.log 는 현재시간,호출한 파일을 자동 출력하고, 파이썬 구조체나 repr 문자열을 구문강조 처리. 로컬변수 출력기능 지원
   - emoji 는 :smiley 형태로 지원
   - 깜빡이지 않는 Progress Bar 지원
   - pygments 라이브러리로 Syntax Highlighting
"
"https://news.hada.io/topic?id=1948","SVG Favicon 사용 태그 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          SVG Favicon 사용 태그 정리

   - 크롬,사파리,엣지,FF 대부분의 브라우저에서 SVG 파비콘 지원중
   - 기본 SVG는 rel=""icon"" 으로 가능
   - 사파리는 rel=""mask-icon"" color='#000000'
   - 다크모드에서 색상 변경 가능
   모바일 브라우저용은 예전처럼
   - iOS: rel=""apple-touch-icon""
   - 안드로이드&크롬: manifest.json 에 아이콘,컬러 등 지정 필요

   본문에는 image/svg+xml 은 필요없다고 나와 있는데,
   https://caniuse.com/#feat=link-icon-svg 에는 크롬 과 엣지등에선 image/svg+xml 필요하다고 나와 있습니다. 테스트 필요할 듯.
"
"https://news.hada.io/topic?id=2059","AWS EC2 가격 인하 - Saving Plans 및 표준 RI 대상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AWS EC2 가격 인하 - Saving Plans 및 표준 RI 대상

   - 리전 및 인스턴스 종류별로 1~18% 인하
   - 서울 리전 기준 인하폭
   ㅤ1년 : C5 는 7%
   ㅤ3년 : M5 6% , C5 12%, R5 5%

   이미 요금표엔 내린 가격이 다 반영이 된거여서 다른 인스턴스 타입들은 얼마가 인하 된건지 보기가 힘드네요.
"
"https://news.hada.io/topic?id=2024","Inkscape 1.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Inkscape 1.0 릴리즈

   오픈소스 그래픽에디터 Inkspace가 16년 만에 1.0 정식버전을 출시

   Inkscape 1.0 Beta 1 릴리즈 https://news.hada.io/topic?id=547
   7개월 전에 베타1 이 나왔는데, 이제 정식버전이군요.
"
"https://news.hada.io/topic?id=2040","Zoom이 Keybase를 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Zoom이 Keybase를 인수

   - 키 디렉토리, e2e 암호화 채팅, 파일공유 서비스 등을 제공하던 Keybase를 줌이 인수
   - Keybase팀은 줌의 보안을 더욱 강화하는 것을 최우선 과제로

   보안 측면에서 극과 극의 이미지였던 두 회사였는데 이렇게 되니 뭔가 황망스럽네요. 처음에 뉴스 보고 다른 Keybase가 또 있었나 고민해봤는데 링크 눌러보고 헐- 이었습니다.

   이것 참...
   gpg키를 이걸로 관리하고 있는데 이걸 사가버리니..
   어떤 방법을 써야될지 고민이네요...

   Keybase를 대체할만한 오픈소스 https://keys.pub/

   Zoom이 최근 전세계적으로 뜨면서 3억의 사용자를 가지게 되었지만..
   터져나온 여러 보안 이슈와, 메인 개발팀이 중국에 있는 것때문에 별로 안 좋아하는 시각들도 많았는데요.
   개발자들이 그나마 좋아하던 Keybase가 줌에 인수된다고 하니 그것마저도 색안경을 끼고 보는 시각이 많네요.

   HN에 올라온 주요 댓글들 https://news.ycombinator.com/item?id=23102430
   ""Keybase 계속 유료화 좀 하라고 해도 창업자인 Chris Coyne이 계속 싫다고 거절하더니 이제 와서 뭐냐""
   ""Chris, 넌 OkCupid도 버리고 가더니, Keybase도 버리는 구나. 맨날 새 기술만 즐기다 싫증나면 버리네.""
   ""Keybase 죽일꺼면 서버 오픈소스로 공개해라"" https://github.com/keybase/client/issues/24105
"
"https://news.hada.io/topic?id=2028","Caddy 2 릴리즈 - 성능 좋고 간편한 HTTPS 자동 지원 웹서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Caddy 2 릴리즈 - 성능 좋고 간편한 HTTPS 자동 지원 웹서버

   - Let's Encrypt 인증서 관련 기능을 내장. 자동으로 인증서 발급 및 갱신. HTTPS가 기본
   - 읽기 쉬운 Caddyfile 로 빠르고 편한 설정. JSON 포맷으로 상세 설정
   - Go로 작성된 의존성 없는 싱글 바이너리
   - 리버스 프록시, 사이드카 프록시, 로드밸런서, API Gateway 등으로 사용 가능
   - 웹 서버 설정용 REST API 제공 -> 테스팅 등 자동화에 편리
   - nginx.conf 를 직접 읽어서 설정값으로 사용 가능

   v1 때는 라이센스가 조금 독특해서, 코드는 Apache 2.0 이었지만
   바이너리는 유료 서비스에 사용 하려면 서브스크립션을 구매해야 하는 구조라 직접 빌드하거나 했어야 했는데,
   작년 10월에 Go 관련 교육을 제공하는 Ardan Labs와 파트너 계약을 하면서 그런 제약이 사라졌습니다.
   https://github.com/caddyserver/caddy/issues/2786
   v1 과는 완전히 다른 코드베이스로 재개발되어 하위호환 되지는 않지만 세팅은 거의 비슷
   https://caddyserver.com/docs/v2-upgrade
"
"https://news.hada.io/topic?id=2009","Xfce가 Gitlab으로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Xfce가 Gitlab으로 전환

   리눅스 경량 데스크탑 환경인 Xfce가 GNOME,KDE에 이어 Gitlab으로 전환

   리눅스쪽 오픈소스들이 GitLab 채택하는게 계속 되는거 같네요.
   KDE 가 GitLab 을 채택 https://news.hada.io/topic?id=629
   KDE : https://invent.kde.org/public/
   GNOME : https://gitlab.gnome.org/explore/
   FreeDesktop : https://gitlab.freedesktop.org/explore/
   Devian : https://salsa.debian.org/public
   Haskell : https://gitlab.haskell.org/public
"
"https://news.hada.io/topic?id=2006","Valve, SteamVR의 macOS지원 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Valve, SteamVR의 macOS지원 종료

   - 맥 지원 종료하고 윈도우/리눅스에만 집중
   - 2017년 애플이 Metal for VR을 출시하며 Valve와 협업을 강조했지만, 애플기기 사용자들이 VR게임을 거의 안하는게 원인인듯
   - 페이스북의 Oculus Rift는 애초부터 맥지원이 없었음
   - 애플은 2022년에 자신들의 VR/AR 헤드셋, 2023년에 AR글래스를 내놓을 것이라는 루머가 있음

   사실 맥이 좋은건 모바일,웹 개발뿐이고..
   iOS용 게임을 만들지 않는한 Windows, Linux, Android, PS4, Switch, XBox One 용 게임이 모두 개발되는 윈도우를 선택하는게 맞는 선택일듯
"
"https://news.hada.io/topic?id=1983","a-Shell - iOS용 무료 쉘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          a-Shell - iOS용 무료 쉘

   - iOS용 터미널 : 오픈소스,앱스토어 다운가능
   - vim,ping,sftp,curl 등 내장
   - Lua, Python, JavaScript, C/C++ 개발 및 실행 가능
   - 폴더생성,이동,압축,수정 및 iOS 파일 공유 기능 지원
   ㅤ→ 다른 앱 파일 열기, TeX/Python 실행, 결과 보내기 등
   - iOS13 의 멀티 윈도우 기능 지원(한쪽창에서 편집하고 한쪽창에서 실행 등)
   - pip install 가능 (순수 파이썬만)
   - clang/clang++ 이 C/C++ 파일을 WebAssembly 로 컴파일해서 실행 가능 (Wasmer / wasi 내장)

   실제로 sh,bash 같은 쉘을 iOS용으로 변환하는건 거의 불가능해서 터미널스러운 Text UI 를 구현했다고 보면 됩니다.
   iOS는 system() 함수가 불가능 해서 ios_system() 을 만들어서 대체해서 사용합니다.
   지원하는 쉘코맨드들은 https://github.com/holzschu/ios_system/blob/master/README.md 에 나와있습니다.
   awk, curl, scp, sftp, tar, python, lua, TeX, ping, nslookup, telnet,
   egrep, fgrep, grep, gzip, gunzip, cat, chflag, compress, cp, date, echo, env, link, ln, printenv, pwd, ed, sed, tar, uncompress, uptime, chgrp, chksum, chmod, chown, df, du, groups, id, ls, mkdir, mv, readlink, rm, rmdir, stat, sum, touch, tr, uname, wc, whoami

   에뮬레이터로 실행하는 ish 하고는 약간 다른 접근방식 입니다.
   iSH - iOS용 리눅스 쉘앱 https://news.hada.io/topic?id=1742
   iSH 는 테스트 플라이트로만 설치가능해서 현재로선 a-Shell이 사용하기가 더 좋아요. 속도도 더 빠릅니다.

   비슷한 iOS용 libterm 도 있습니다. https://libterm.app/
   이거는 C 코드를 LLVM IR 포맷으로 컴파일 하네요

   안드로이드로 비슷한 터미널은 Termux https://termux.com/
"
"https://news.hada.io/topic?id=1982","Rust Analyzer First Release","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rust Analyzer First Release

   - Language Server Protocol(LSP)을 구현한 Rust 언어의 IDE 백엔드
   - VSCode를 비롯, 많은 IDE에서 스마트 자동완성을 지원 (Vim,Emacs)
   - 이미 다들 사용중이었지만.. 릴리즈를 한적이 없어서 이번이 첫번째 알파 릴리즈
   RA가 가져다 주는 주요 기능들 (VSCode 기준)
   * Run 버튼(기본 키 바인딩 없음. Ctrl+r 추천) 커서 위치의 함수/모듈/메인함수를 즉시 실행
   * F12 : Go to definition 지원. mod submodule 에서 누르면 submodule.rs 파일로 이동
   - 부모 모듈로 가기 (기본 키 바인딩 없음)
   - Ctrl+T : 워크스페이스의 모든 심볼 검색(Structs,Enum,Functions,Field)
   - Ctrl+Shift+0 : 현재 문서의 심볼 검색
   - Ctrl+F12 : Go to implementation
   - Syntax Highlighting
   - Punctuation-aware 코드 자동완성
   * Shift+Alt+→ : 선택 확장. Expression 및 문장, 아이템 단위로 선택을 점점 확장해주는 단축키. 멀티 커서 상태에서도 잘 동작. 함수 중간에서 여러번 누른 다음에 ← 누르면 맨 앞으로 가는 부수적인 기능도
   * 없는 모듈 만들기 : mod 파일명 적고 ctrl + . 눌러서 파일 자체를 생성
   - 다양한 코드 어시스트(전구 모양 버튼)

   Rust가 Rust Analyzer를 통해 IDE친화적으로 변하고 있다 https://news.hada.io/topic?id=1437
"
"https://news.hada.io/topic?id=1971","[동영상] 파이썬 기반 주식매매 자동화 강좌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [동영상] 파이썬 기반 주식매매 자동화 강좌

   장용준이라는 분이 『손가락 하나 까딱하지 않는 주식 거래 시스템 구축: 파이썬을 이용한 데이터 수집과 차트 분석, 매매 자동화까지』(위키북스, 2020)라는 책을 내면서 해당 책에서 다루는 내용을 동영상으로 강의하여 YouTube에 올렸습니다. (한국어) 해당 책에서는 파이썬 기반으로 키움증권 API를 통해 정해진 규칙에 따라 주식을 사고 파는(알고리즘 트레이딩) 프로그램을 구현합니다.
"
"https://news.hada.io/topic?id=2042","GeckoView for Android","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GeckoView for Android

   - 안드로이드 기본 WebView를 대체할 수 있는 모질라의 웹뷰 엔진
   - 새 버전 Mobile Firefox를 위해 개발됨
   - 기본 웹뷰보다 빠르고, 다양한 Web API 및 보안기능(안티 트래킹,안티 핑거프린팅등) 지원
   - 앱내에 임베드 가능

   현재 Firefox Preview를 설치하면 써보실수 있습니다.
   https://play.google.com/store/apps/details?id=org.mozilla.fenix&hl=ko
   임베드 하는 방식이라 약 30~40MB정도 APK 사이즈가 커지게 됩니다.
   OS의 브라우저 버전과 상관없이 사용 가능해서 올드 디바이스에 새 브라우저 기능이 필요하거나, 임베디드 기기에 내장할 앱들 같은 특정 용도로는 최적.
"
"https://news.hada.io/topic?id=1956","Kolibri - 어셈블리로 개발된 OS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Kolibri - 어셈블리로 개발된 OS

   - 1MB디스크 & 8MB램 위에서 실행되는 초경량 GUI OS
   - 워드프로세서,이미지 뷰어/편집기,웹브라우저,게임
   - 풀 FAT16/32지원, NTFS & EXT2/3/4 읽기 지원
   - 다양한 비디오/사운드/네트워크 드라이버 지원
   - FASM(Flat Assembler)로 개발

   Virtual x86 에서 테스트 가능
   https://copy.sh/v86/?profile=kolibrios
   Virtual X86 - 브라우저에서 각종 OS실행해보기 https://news.hada.io/topic?id=1908
"
"https://news.hada.io/topic?id=2038","바닐라 아이스크림에 알레르기가 있는 자동차","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        바닐라 아이스크림에 알레르기가 있는 자동차

   GM에 접수된 고객 클레임
   ""새 폰티악을 몰고 아이스크림을 사러가서, 다른 아이스크림은 상관없지만 바닐라 아이스크림을 고르면 시동이 걸리지 않아요""
   그래서 엔지니어가 모든 데이터를 분석하여 찾은 문제는 ""Vapor Lock""
   ""아무리 미친 것 같은 문제라도 가끔은 진짜다.""

   최신 고성능 안드로이드폰일수록 메모리가 부족하다
   https://twitter.com/0x1a21b01/status/1258053111857311744

   500마일 이메일 문제 https://edykim.com/ko/post/500-mile-email-problem/
   “500 마일 (역주. 800km 가량) 이상 되는 거리엔 메일을 보낼 수가 없어요.”

   아 저도 이거 떠올랐어요
"
"https://news.hada.io/topic?id=1955","깔끔한 문장을 위해 버려야 할 번역투 표현들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        깔끔한 문장을 위해 버려야 할 번역투 표현들

   - 대명사 남발
   - 피동
   - '~의'
   - '~경우'
   - '~관하여,~대하여'
   - '~하는 중이다'
   - '~을/를 가지다'
   - '~로부터'
   - '~통해/~에도 불구하고'
   - '~에 있어'
   - '~하기 위해'
   - '~들'

   반대로 구글 등의 온라인 번역기를 쓸 때 일부러 번역투 문장을 쓰면 번역이 조금 더 정확하게 되기도 합니다? (경험담)

   위의 몇몇 부분은 맞춤법 검사기가 잡아주기도 합니다.
   단디 - 한국어 맞춤법 검사기 for VS Code https://news.hada.io/topic?id=1674

   한글 문장 linter가 있으면 좋겠어요.
"
"https://news.hada.io/topic?id=1988","각종 오픈소스들의 데이터베이스 스키마 갤러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        각종 오픈소스들의 데이터베이스 스키마 갤러리

   - 웹용 DB 다이어그램 편집기인 drawSQL이 각 오픈소스 및 실제 서비스들의 DB스키마를 갤러리화
   - 다른 서비스들의 스키마를 쉽게 확인하고, 복사해서 템플릿으로 사용가능
   - Wordpress,Laravel,Django 등의 프레임워크
   - FeedBin(RSS리더), Lobsters(해커뉴스 클론), Pixelfed(이미지 공유), Diaspora(SNS)
   - 해커뉴스,AirBnb,트위터 등은 클론들을 통해서 유추한 간단버전
"
"https://news.hada.io/topic?id=1997","Jukebox - 노래를 자동 생성하는 신경망 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Jukebox - 노래를 자동 생성하는 신경망

   - 장르,가수,가사를 넣으면 그 가수의 목소리로 노래한 음악을 생성
   - OpenAI가 논문과 모델&코드를 오픈소스로 공개
   - 샘플 가수들 : 락(엘비스 프레슬리, 이글스),팝(케이티 페리,셀린디온),클래식팝(프랭크 시나트라) 등
   - 새로운 가사를 주고 노래를 작성하기, 기존 노래 가사를 주고 다른 노래를 만들기, 원곡 12초 정도를 주고 나머지를 완성시키기
   - 120만곡의 노래와 가사, 가수, 장르, 년도 등의 메타데이터를 포함한 데이터셋을 생성

   작년엔 MuseNet 으로 10개 악기로 작성된 음악 생성하는걸 시도하더니, 이제는 보컬을 포함한 노래까지 왔네요.
   https://openai.com/blog/musenet/

   https://jukebox.openai.com/ 에서 작성된 7131개의 예제들을 다 볼수 있습니다.
   Eagles의 Hotel California를 앞 12초만 주고 나머지 부분을 만든게 듣기에 재미나네요.
   https://jukebox.openai.com/?song=787728628
"
"https://news.hada.io/topic?id=1946","CodeSandbox - GitHub 연동 웹 개발 IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CodeSandbox - GitHub 연동 웹 개발 IDE

   - 어디서나 웹 개발 가능
   - GitHub 및 Zeit 와 연동
   - NPM 및 모듈 핫로딩
   - 컨테이너, 터미널 지원 ( 백엔드 개발 )
   - 자신의 블로그나 웹사이트에 Embed 도 가능
   - GitHub PR에 연동한 CI
   - 팀단위 동시 편집 지원 및 채팅 기능
   - 다크모드 지원
"
"https://news.hada.io/topic?id=1939","구글, 쇼핑 검색 무료화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구글, 쇼핑 검색 무료화

   구글 쇼핑 탭에 무료로 상품이 검색되도록 변경 ( 원래는 Pay Per Click )
   미국은 4월말까지 변경, 연말까지 전세계 확대 목표
   기존 Merchant Center 및 쇼핑 광고 사용자들은 자동으로 검색에 노출
   Paypal 계정도 연동되도록 지원
   Shopify,WooCommerce,BigCommerce 등과도 연계해서 편하게 관리할수 있게 될 것

   무료로 검색되지만 상위 노출에는 돈을 받는 구조로 가나보내요.
   배민이 했던 오픈서비스와 비슷한 듯.
"
"https://news.hada.io/topic?id=2046","NeutralinoJs - JS/HTML/CSS로 크로스플랫폼 앱 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                NeutralinoJs - JS/HTML/CSS로 크로스플랫폼 앱 만들기

   - Electron / NW.js 와 비슷하지만 초경량 & 빠름
   ㅤ→ 메모리 7MB 내외. 앱 크기 1MB 이하(압축)
   - Node와 크로미움을 내장하지 않고, 플랫폼 브라우저 이용 & C++서버를 XHR로 호출하여 사용
   - 개발환경 구축이 빠르고 쉬움. 별도 의존성 없음
   - 윈/맥/리눅스
   - OS 레벨 API 제공 : FileSystem, runCommand 등

   간단한 프로그램 만들기엔 더없이 좋네요

   옛날에 만들었던 앱스프레소와 동일한 방식이네요... 아득하네요... 앱스프레소

   물론 아직 일렉트론 보다는 덜 성숙한 상태.
   다만 예전 같았으면 윈도우에서 IE에 의존하는 상황때문에 약간 호환성 문제가 있었겠지만,
   이제 Edge가 크로미움 기반으로 완전히 이전하면 Neutralino 가 일렉트론보다 가볍게 쓰기 좋을듯.
"
"https://news.hada.io/topic?id=1992","다국어화(i18n)를 위한 CSS정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          다국어화(i18n)를 위한 CSS정리

   - :lang() pseudo-class selector
   - [lang=] attr selector
   - list-style-type: hangul(가나다라), hangul-consonant(ㄱㄴㄷㄹ), korean-hangul-formal (일이삼사), cjk-ideographic(一二三) 등
   - writing-mode: horizontal-tb, vertical-rl/lr, sideways-rl/lr
   - text-orientation: mixed,upright,sideways
   - text-emphasis : 이탤릭이 없는 아시안 언어들을 위한 강조
   - font-variant-east-asian, font-variant-ligatures 등

   text-emphasis 속성이 흥미롭네요.
   filled,open,dot,circle,double-circle,triangle,sesame,string,color 등 다양하게 강조 가능
   https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis
"
"https://news.hada.io/topic?id=2037","iPhone SE에 미쳐버린 사람 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         iPhone SE에 미쳐버린 사람 이야기

   @lqez 님의 애플 아이폰SE 홈페이지 스크롤 애니메이션 분석
   Canvas 에 8x8 단위로 타일링한 이미지를 뿌리는 방식
   ""결국 Motion JPEG을 스크립트로 구현한 셈""
"
"https://news.hada.io/topic?id=1952","Box-Line-Text : 간단한 화이트보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Box-Line-Text : 간단한 화이트보드

   - 클릭후 직선(선긋기), 대각선(박스)
   - 아무곳이나 텍스트입력 및 수정
   - Shift 누르고 마우스 이동: 지우기
   - Undo 가능
   - 협업시 임시 칠판기능으로 빠르게 사용
"
"https://news.hada.io/topic?id=1970","SmileBASIC 4 for Switch","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        SmileBASIC 4 for Switch

   - 닌텐도 스위치용 프로그래밍 소프트웨어
   - 게임을 만드는데 적합한 SmileBASIC 언어
   - 만든 걸 서버에 올리면 다른 사용자가 다운받아 실행 가능 (자신이 재사용도 가능)
   - 1280x720 해상도 지원
   - Joy-Con의 모든 기능 및 다양한 Toy-Con 지원
   - USB 키보드 마우스 사용가능
   - 디버깅 지원(trace)
   - 키워드 자동완성
   - 100개 이상의 사운드 효과음과 40개의 배경음악 내장
   - 가격: $25
   - 자신의 작업을 서버에 올리거나, 무제한으로 남의 작업을 다운로드 하려면 서버티켓을 구매해야함 ($5)
   ㅤ→ 서버티켓은 expire 하지는 않으며, 1장 이상의 티켓이 있다면 10*티켓수 만큼의 프로젝트 업로드가 가능해짐
   ㅤ→ 여러개의 작품을 올리지 않는 이상 기존 작품을 내리고 올리는 방식으로 사용한다면 한장의 서버티켓 만 구매하면 됨

   닌텐도 온라인 멤버쉽은 필요 없고, 티켓을 사용한 자체 서버 유료화 방식이 재미있네요.
   기억해뒀다가 다른 서비스에 적용해봐야할듯
"
"https://news.hada.io/topic?id=2064","WebRecorder - 오픈소스 웹페이지 녹화 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WebRecorder - 오픈소스 웹페이지 녹화 도구

   - 크롤링 방식이 아닌 브라우저의 네트웍 트래픽 캡쳐방식
   ㅤ→ 로그인된 상태로 모든 미디어 파일 및 복잡한 자바스크립트, 동적 컨텐츠까지 캡쳐가능
   - WARC 표준으로 녹화해서 나중에 인터랙티브하게 다시 보기 가능
   - AutoPilot 으로 유명 웹사이트의 캡쳐 자동화
   - 온라인 버전 및 Electron 으로 된 Desktop용 실행파일 / Player 제공 (윈/맥/리눅스)

   와 이런 것도 표준이 있었다니... 근데 네트워크 방식이면 ssl 지원이 되나요?

   이것도 표준 규격이 있었군요?
   예전에 파이어폭스 개발자 도구에 비슷한 기능이 추가되었던 걸로 기억하는데, 문제는 제 맥북에서는 너무 느려서 도무지 쓰기가 힘들더라고요. 파일 크기도 정말 크고. 이건 좀 나을지 모르겠습니다.

   인스타그램은 AutoPilot 적용하면 자동으로 스크롤하면서 유저피드를 주루룩 캡쳐합니다.
   무한 스크롤되는 페이지에는 완전 적합하진 않아서, 이번에 변경된 페이스북은 캡쳐가 잘 안되네요.
   WARC 표준 https://iipc.github.io/warc-specifications/
"
"https://news.hada.io/topic?id=1963","R 4.0 릴리즈릴리즈

   - 모든 패키지 재설치 필요
   - stringsAsFactors = FALSE 가 default
   ㅤ→ data.frame() 과 read.table() 이 더 이상 문자열을 factors로 변환 하지 않음
   - matrix가 array도 상속
   - C++과 비슷한 R""()"" 형태의 Raw 문자열 상수 지원
   - PCRE2를 사용하게 변경
   - 그외 여러개의 신 기능들
"
"https://news.hada.io/topic?id=2007","프리랜서 AI엔지니어로 일한 첫1년","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          프리랜서 AI엔지니어로 일한 첫1년

   - Rakuten과 Duolingo에 근무했던 NLP/ML 엔지니어가 프리랜서로 일한 경험을 공유
   - 시간 단위 빌링 : 기본 $200/H, 주당 10시간 이상시에는 $150/H
   - 고객은 주로 인적네트웍을 통해 찾고, 컨퍼런스등에서 발표하거나 해서 가능성있는 클라이언트를 찾음. 많은 회사들, 특히 스타트업들이 원격근무나 파트타임으로 기여하는것에 열려있는 편
   - 뽀모도로를 좋아하고, 주40시간 근무하며, 업무시간엔 Freedom(PC) 과 Stay Focused(폰)로 시간 뺏는 웹사이트를 차단하고 일함.
   - 요즘 머신러닝 업무는 파트타임 기여에 적합하다고 생각함. 대형 모델로 작업할때 트레이닝에 몇시간씩 걸리지만, 풀타임 근무자는 다른 프로젝트가 있지 않는한 그냥 기다리는 수 밖에 없지만, 프리랜서는 다른 고객으로 바꿔서 일하면 됨.
   - ML프리랜서 의 GPU 사용 전략 : AWS Spot Instance(p3.2xlarge)
   - AI에서 일한다면 개인 학습 및 개발에 시간을 투자해야 하고, 풀타임이라면 하루 업무의 일부분이지만 프리랜서는 그렇지 않음. 당신은 고객의 문제를 해결하기 위해 고용된 전문가라는걸 인식하고, 다른 시간을 투자해야함.
   - 1인 LLC 회사를 설립 (미국 외의 고객들이 회사인것을 선호)

   이 글 자체도 자신을 홍보하기 위한 하나의 방법일듯.
   - 이건 2월에 적은 글인데, 그 이후 찾는데가 많아져서 $250/시간 으로 금액을 올렸다고 ( 그래도 한명의 고객도 놓치지 않음 )
   - 코로나 영향은 거의 없다고. 일본/미국 주로 교육쪽 고객들
   작성자가 추천하는 책 ""The Win Without Pitching Manifesto""
   프리랜서 또는 자영업자가 피칭 하지 않고 적절한 가격으로 일을 따는 법을 설명한 책인듯.
   https://www.winwithoutpitching.com/the-manifesto/
"
"https://news.hada.io/topic?id=2033","MS Surface Go 2, Surface Book 3 등 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MS Surface Go 2, Surface Book 3 등 공개

   - Go 2 : 10.5” 1920x1280, 8GB, 128GB SSD, 8세대 인텔 m3, USB-C, 544g
   - Book 3 : 13.5” 3000x2000 / 15” 3240x 2160, 8/16/32GB, 10세대 인텔 i5/i7, 1.53kg/1.9kg
   - Headphones 2 : 블루투스5.0, AptX지원, 노이즈캔슬링 단계 조절 및 사람 목소리 대응 기능 추가
   - Earbuds : 작년에 발표는 했지만, 이제 판매 시작. 발표당시보다 $50 저렴해진 $199

   Surface Go 2 는 Go 1보다는 베젤이 확실히 줄어서 좋아보입니다. 근데 최고사양이 8GB, 128GB는 너무 한듯..
   서피스북3는 아직도 썬더볼트3가 없다는게 흠이라면 흠.
"
"https://news.hada.io/topic?id=2008","Causal - 스타트업/전략/마케팅을 위한 수치 모델링 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Causal - 스타트업/전략/마케팅을 위한 수치 모델링 도구

   - 예상 매출,가격 모델 수립,사용자 추세,비용 예측등을 할때 Excel 입력하듯이 하면 인터랙티브한 데이터/대쉬보드를 만들어주는 도구
   - 구글닥스,구글Ads,Salesforce,Shopify,Zapier등과 연동
   - 템플릿
   ㅤ→ SaaS Model : 평균매출,마진율,CAC,Growth Rate,Chrun 값에 따른 예측 (MRR, C-MRR, R-MRR 등)
   ㅤ→ Runway : 가진 현금과 직원수,급여,비용등을 고려할 때 우리는 얼마나 버틸수 있나 ?
   ㅤ→ 퍼포먼스 마케팅 : 월 예산, 전환당 매출, 전환율, CPC에 따른 예상 매출 추이 보기
   ㅤ→ 이커머스 : 평균 주문가격, 매출 원가, 배송원가, 성장율, 전환율에 따른 매출 추이 보기
"
"https://news.hada.io/topic?id=1975","phelia - Reactive Slack App Framework","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 phelia - Reactive Slack App Framework

   - 웹훅/JSON 고민 없이 React 만으로 인터랙티브 Slack 앱 개발 가능
   - 커스텀 React-Reconciler 로 리액트 컴포넌트를 슬랙 메시지로 변환
   - 슬랙의 Surface / Block 컴포넌트 대부분 지원
   ㅤ→ Message,Home,Modal
   ㅤ→ Action,Context,Divider,Image,Input,Section
   ㅤ→ Text,CheckBoxes,TextField,DatePicker,Select Menu 등

   이거 너무좋네요! 바로 쓰겠습니다!
"
"https://news.hada.io/topic?id=2013","Liftbridge - 가볍고 Fault-Tolerant한 메시지 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Liftbridge - 가볍고 Fault-Tolerant한 메시지 서버

   - Kafka/Pulsar 와 비슷하지만 훨씬 간단하고 클라우드에 적합한 구현체
   - Zookeeper/JVM등 복잡한 의존성 및 설정 필요없는 16MB짜리 싱글 Go 바이너리
   - 클라이언트는 gRPC사용
   - NATS를 확장해서 기존 NATS환경의 코드변경 없이 안정적인 스트리밍,Pub/Sub Log API 추가 가능
   - Wildcard Subscription 지원
   - Key-value & 헤더 지원 → WAL, Write Ahead Logging 에 적합
   - 로그 보관 및 키 기반 압축

   NATS - 심플하고 안전한 고성능 오픈소스 메시징 시스템 : https://nats.io/
   NATS의 한글 소개글 https://medium.com/@goinhacker/nats-a63fba865d6f
   기존에 로그기반 메시징 솔루션으로 NATS Streaming이 있지만 그건 NATS와는 별도의 프로토콜 구현방식,
   Liftbridge 는 NATS를 보완해서 그 기반위에서 간단하지만 안전한 전송을 보장하도록 구현하는 ""Bridge""
   그래서 기존 코드의 변경없이 추가하여 사용 가능.
   Liftbridge vs NATS Streaming vs Apache Kafka vs Apache Pulsar
   https://liftbridge.io/docs/feature-comparison.html
   Liftbridge 개발자인 Tyler Treat 가 2017~2018년에 분산 로그시스템 구현에 대해 적은 시리즈 글을 참고하세요.
   Building a Distributed Log from Scratch
   - Part 1: Storage Mechanics https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-…
   - Part 2: Data Replication https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-…
   - Part 3: Scaling Message Delivery https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-…
   - Part 4: Trade-Offs and Lessons Learned https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-…
   - Part 5: Sketching a New System https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-…

   * Write Ahead Logging 이란 ? : https://postgresql.kr/docs/9.6/wal-intro.html
"
"https://news.hada.io/topic?id=1957","Moloch - 대규모 풀 패킷 캡쳐 & 검색 솔루션 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Moloch - 대규모 풀 패킷 캡쳐 & 검색 솔루션 오픈소스

   - AOL이 네트웍의 모든 패킷을 캡쳐후 검색하기 위해 개발 (상용시스템 대체)
   - 내부 네트웍 트래픽을 표준 PCAP 포맷으로 저장하고 인덱싱, Wireshark 등으로 PCAP 분석 가능
   - API로 PCAP 데이터와 JSON으로 포맷된 세션 데이터에 접근 지원
   - 대규모 시스템에서 초당 기가비트 단위의 데이터를 처리하기 위해 설계됨
   - 3개의 컴포넌트로 구성
   ㅤ→ Capture : C로된 멀티쓰레드 앱이 네트웍 트래픽을 모니터링하고 PCAP으로 저장. 캡쳐된 패킷을 분석하여 ElasticSearch로 메타 데이터 전송
   ㅤ→ Viewer : 캡쳐머신당 실행되는 Node.js 어플리케이션. 웹 인터페이스와 PCAP 파일 전송을 담당
   ㅤ→ ElasticSearch : 검색

   NHN엔터테인먼트 인프라보안팀의 소개글 ""오픈소스 Moloch을 소개합니다"" https://meetup.toast.com/posts/96

   몰록 이름의 유래
   ""몰록은 이스라엘의 이웃인 암몬족이 숭배한 무시무시한 신. 갓난아기를 몰록에게 제물로 바쳤다""
   https://terms.naver.com/entry.nhn/…
   아마도, 다른 보안 도구인 SATAN (Security Administrator Tool for Analyzing Networks) 이 이미 있어서 이런 이름을 선택한 듯?
   http://www.porcupine.org/satan/

   비교해볼만한 다른 Full Packet Capture 시스템들 (오픈소스 및 상용)
   https://molo.ch/otherfpc
"
"https://news.hada.io/topic?id=2027","Modern PHP 살펴보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Modern PHP 살펴보기

   올해로 25주년. 전세계 웹사이트 78%가 사용중. 7.4.5 출시
   - PHP OOP의 진화
   - 의존성 관리와 써드파티 확장들 : PEAR,PECL에서 Composer로
   - FFI(외부 함수 인터페이스) : 타 언어와의 연계가 쉬워져서 TensorFlow Bindings for PHP 같은 것들이 가능해짐
   - 보안을 덜 모호하게
   - 지속적인 성능 개선 : 7.4 는 5.6대비 3배의 Req처리 성능. 프리로딩 지원. JIT 추가(8에서 공식 릴리즈 예정)

   PHP글이 올라오면 HN댓글창은 전쟁터. 500개가 넘는 댓글이..
   https://news.ycombinator.com/item?id=23077367
   PHP in 2019 https://news.hada.io/topic?id=92
   PHP 5.6, 7.0, 7.1, 7.2, 7.3, 7.4 벤치마크 https://news.hada.io/topic?id=1278
   PHP 8 의 새 기능들 https://news.hada.io/topic?id=1438
"
"https://news.hada.io/topic?id=1942","넷플릭스, 안전하고 빠른 스트리밍을 위해 TLS 1.3 지원 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  넷플릭스, 안전하고 빠른 스트리밍을 위해 TLS 1.3 지원 시작

   TLS 1.3
   ㅤ→ PFS 지원 안하는 키교환 알고리즘들 제거
   ㅤ→ AEAD 암호화만 사용
   ㅤ→ 빠른 핸드쉐이크(1-RTT, 0-RTT Early Data)
   A/B테스트 결과
   ㅤ→ 재생 시작 시간이 4.5%~8.2% 까지 감소
   ㅤ→ 미디어 리버퍼가 7.4% 개선 : TLS 1.3 + 0-RTT 가 CPU부하를 줄인다는 것

   관련된 기술들을 설명한 한국어 글들 모음
   Hello, TLS 1.3 https://www.buzzvil.com/ko/2019/02/11/atech-blog-hello-tls-1-3/
   PFS(Perfect Forward Secrecy)란 무엇인가? https://rsec.kr/?p=465
   AEAD 암호화 https://blog.naver.com/vjhh0712v/221533578238
"
"https://news.hada.io/topic?id=1969","Pl@antNet - 식물 이름 알려주는 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Pl@antNet - 식물 이름 알려주는 앱

   - 사진 한장으로 식물이름을 알려주는 모바일 앱
   - 나무,꽃,잔디,양치류,덩굴,선인장,구과식물(방울열매를 만드는 침엽수) 등 약 2만종 인식
   - 아이폰/안드로이드/웹
   - 찍은 사진들은 지역별 식물들 연구 목적으로 사용

   지구상에는 약 36만종의 식물이 있는데 그중에 2만종 정도를 인식한다고 하네요.
   비슷한 앱으로 Seek by iNaturalist : https://www.inaturalist.org/pages/seek_app
   근데, 한국사람들한테는 다음 앱의 꽃 검색이 가장 편리한듯 합니다.
   http://magazine.channel.daum.net/daumapp_notice/search_flower

   한국에서는 네이처링에 물어보면 박사님들이 대답해주십니다 ㅋㅋ https://www.naturing.net/
"
"https://news.hada.io/topic?id=1951","CastleDB - Structured Static DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CastleDB - Structured Static DB

   - 게임 아이템/몬스터 리스트 같은 구조화된 데이터 입력을 위한 DB
   - 각 Sheet가 데이터모델을 가지고 있는 엑셀과 비슷한 형태
   - 2D Map 에디터 내장
   - XML/JSON 형태로 저장
   - 컬럼타입 : 기본형 외에 색상,Enum,Flags,레퍼런스,File,Image,Tile,List,Dynamic 등
   - 크로스 플랫폼 언어/컴파일러인 Haxe 로 개발됨
"
"https://news.hada.io/topic?id=1987","Rocket - Mac용 쉬운 Emoji 입력 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Rocket - Mac용 쉬운 Emoji 입력 도구

   - Slack의 이모지 입력창과 비슷한 기능을 맥 어디에서나 사용 가능
   - "":"" 키를 누르면 이모지 선택 & 검색창이 실행. 화살표 및 엔터로 선택
   - 스킨톤 선택가능, 다크모드 지원
   - VoiceOver 지원해서 시각장애인도 사용가능
   - 기본 무료. 유료버전에서는 탐색창 및 커스텀 이모지/GIF 등 지원

   저는 CTRL + COMMAND + SPACE로 입력하는 편인데... 이런 앱이 나오는군요 ㅎㅎ

   그게 아는 사람만 아는 단축키라.. ㅎㅎ
   울나라에선 맥=개발자 느낌이지만, 저쪽은 누구나 다 쓰는 장비다 보니 그런게 아닐까 생각이 됩니다.

   원래 이모지가 지원되는 Slack/HipChat 이나 XCode/Terminal/iTerm2/SublimeText 앱들은 Disable 처리 되어있습니다.
   github.com / trello.com / slack.com 웹사이트도 마찬가지로 Disable 이 기본 (크롬&사파리에서)
   설정에서 원하는 앱들만 지정해서 사용하는게 편합니다.
"
"https://news.hada.io/topic?id=2034","GitHub Codespaces 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GitHub Codespaces 공개

   - 깃헙내에서 VS Codespaces 사용 (예전 Visual Studio Online)
   - 컨테이너 & 클라우드 기반 IDE
   - 코드,빌드,테스트,디버그,배포를 브라우저에서
   - VS Code 로컬에서도 연결해서 개발 가능
   - 얼리억세스 통해서 베타 신청 받는중

   부끄럽지만 구름IDE(https://ide.goorm.io)도 꾸준히 성장하고 있습니다!

   특별한 환경을 필요로 하는 오픈소스들의 경우엔 개발환경을 로컬에 구축하지 않고도 쉽고 빠르게 컨트리뷰트 하기 좋은 환경이 될듯
   또한 iPad에서 잘 실행되는 개발환경이기도 해서 어디서나 개발가능!

   Github Codespaces는 VS Codespaces 와 같은 기술을 사용하지만 GitHub 관련 기능을 포함하고 있는 거라고 보심 됩니다.
   GitHub Actions 가 하단에서는 Azure Pipelines 를 활용하듯, MS의 클라우드 제품들이 차곡차곡 GitHub에 적용중.
   아직은 가격이 공개 안 됐는데, GA전에 가격도 공개 예정.
   지난 달에 MS가 Visual Studio Online 을 VS Codespaces로 이름 변경하면서, 가격을 50% 정도 내린바 있습니다.
   VS Codespaces 의 변경된 가격이 시간당
   - 베이직 $0.085 ( 2코어, 4G, 64GB SSD )
   - 스탠다드 $0.169 ( 4코어, 8G, 64GB SSD )
   - 프리미엄 $0.339 ( 8코어, 16G, 64GB SSD )
   인데.. GitHub Codespaces가 이거보다 더 싸지는 않을듯 ?
"
"https://news.hada.io/topic?id=2001","ICANN, .ORG 판매에 대해서 거부하기로 최종 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ICANN, .ORG 판매에 대해서 거부하기로 최종 결정

   약 6개월간 끌어온 .org 관리단체 PIR의 매각에 대해서 최종적으로 거부
   철저한 실사와 브리핑, 캘리포니아 법무장관 및 스테이크홀더들의 서신 등을 고려해서 결정했다고

   최종적으로는 잘된 일이긴 합니다만, ICANN이 지속해서 이런 논란에 빠지는 것을 방지하기 위한 다른 고민이 필요한 게 아닐까 생각이 듭니다.
   관련 기사들
   .org TLD를 관리하는 비영리단체 PIR이 사모펀드에 매각됨 https://news.hada.io/topic?id=912
   ICA 가 ICANN 에 .org 관리단체 매각에 대해 항의서한 보내 https://news.hada.io/topic?id=924
   Save.ORG - PIR 매각을 중단해달라는 서명 사이트 https://news.hada.io/topic?id=959
   ISOC가 .org 도메인을 매각한 금액은 1조3천억원 https://news.hada.io/topic?id=993
   .ORG Fire Sale : 어떻게 절반도 안되는 가격으로 팔렸을까 https://news.hada.io/topic?id=1012
   ICANN이 .ORG 거래건 승인을 지연하고 추가 자료 요청 https://news.hada.io/topic?id=1090
   캘리포니아 법무장관이 .org 도메인 판매를 연기 https://news.hada.io/topic?id=1423
   ICANN이 .org TLD 판매 결정을 5/4일로 다시 한번 더 연기 https://news.hada.io/topic?id=1913
"
"https://news.hada.io/topic?id=1976","아마존이 금융 분야에서 하는 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          아마존이 금융 분야에서 하는 모든 것

   1. 아마존의 금융 서비스 제품 전략
   ""더 빠르고 편한 결제, 더 많은 사람이 다양한 장소에서 사용하게, 대출로 더 많은 거래를 일으키게""
   아마존은 All-in 전에 여러 군데에 베팅해보는 것으로 유명
   다양한 Trial & Error를 통해 확장. 금융도 마찬가지
   - Payments : Amazon Pay를 앱/웹/오프라인에 사용 가능한 디지털 지갑으로
   ㅤ→ 실패들: Checkout, WebPay, PayPhrase, Local Register
   ㅤ→ Worldpay 와 제휴 ( 300종 이상의 결제방식 지원, 120개 통화, 년 400억회 트랜잭션 )
   ㅤ→ Amazon Go ""Just Walk Out"" 기술로 오프라인 매장에도 진출
   ㅤ→ Prime Day에는 Amazon Pay 결제 시 30% 캐쉬백 제공해서 결제 습관 들이기
   - Amazon Cash
   ㅤ→ 온라인 커머스와 오프라인 커머스를 연결하는 브릿지
   ㅤ→ 현금을 넣어놓고 바코드를 편의점 등에서 보여주고 사용하는 방식
   ㅤ→ 계좌 없는 은행 서비스처럼 동작. for unbanked(계좌 없는)/underbanked(금융서비스에서 소외된)
   ㅤ→ Coinstar 키오스크와 연동. 현금 사용 후 잔돈을 아마존캐쉬에 넣는 것을 지원 (전국 2만개)
   ㅤ→ PayCode : 웨스턴 유니언과 연동하여 16개국에서 아마존캐쉬에 현금을 넣고 사용토록 지원
   ㅤ→ Amazon Allowance : 부모가 아이들 계정에 돈을 자동으로 일정 금액까지 채워줘서 아마존 캐쉬로 사용 가능
   ㅤ→ 어린 소비자를 위한 현금카드를 만드는 Greenlight Financial에도 투자
   - Amazon Lending (대출)
   ㅤ→ SMB : 2011년부터 2만개가 넘는 소상공인을 위한 대출 진행 (약 50억달러 이상)
   ㅤㅤ2018년부터는 Bank of America가 파트너가 되었고, Amex와 협업해서 법인카드용 대출도 시작
   ㅤ→ 소비자 대출 : 다양한 Amazon Card 들 ( Prime 고객 및 일반 고객)
   ㅤㅤ신용카드(Visa/Chase) : 아마존/Wholefood 에서 3~5%, 주유소/식당/약국 2%, 기타 1% 캐시백
   ㅤㅤStore카드(Synchrony) : Prime 고객은 5% 캐쉬백, 6~12개월 무이자
   ㅤㅤAmazon Reload : 계좌와 연동되어서 자동으로 충전되는 카드. 2% 캐쉬백
   ㅤㅤAmazon Credit Builder : 돈을 넣어두고 쓰는 담보형 신용 카드 ($100~$1000)
   ㅤ→ Chase Freedom, Discover Cash Match, Amex Blue Cash 등의 포인트를 아마존에서 사용 가능
   - 결제,현금,대출 다음 진출할 금융서비스 분야는 뭐가 될까 ? (예상)
   ㅤ→ Checking Account (거래 계좌) 개설 : JPMorgan & Capital One과 같이 할 것이라는 루머
   ㅤ→ 보험 : 예전 UK에서 했던 Amazon Protect, 인도에서 자동차 보험사인 Acko 등에 투자
   2. 미국 외의 마켓 전략
   - 인도 : 아마존에게 중요한 지역.
   ㅤ→ 아마존이 핀테크관련 투자는 전세계에서 9곳인데 모두 인도
   ㅤ→ 마스터카드와 함께 비접촉결제 솔루션 ToneTag에 투자. Amazon Pay에 연동 예정
   ㅤ→ 대출/보험등에도 투자
   - 멕시코 : 인도와 비슷한 전략을 진행
   ㅤ→ Amazon Prime, Amazon Cash, Amazon Cash 현금 카드를 런치
   3. 아마존은 그 다음에 뭘 할까?
   아마존한테 배운게 하나 있다면 ""it's never say never"" 아무것도 단정할 수 없음.
   루머들: 아마존이 Go를 공항과 극장에?, 부동산 매매업 진출? 가정용 보험?, 거래계좌?, 건강보험?, 해외송금?
   CLOSING THOUGHTS
   아마존의 금융 전략은 핵심전략 목표인 ""아마존에서 구매자&판매자 참여를 늘리는 것"" 를 지원하는 것에 집중
   AWS가 그랬던 것처럼 자신 내부에서 사용하는 것을 만들고 그걸 외부에 공개한 방식을 따라 가지 않을까 ?
"
"https://news.hada.io/topic?id=1936","GitHub Actions로 TIL README 인덱스 자동 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GitHub Actions로 TIL README 인덱스 자동 생성하기

   - TIL : Today I Learned
   - 새로운 TIL이 추가될때마다 자동으로 첫화면 README에 해당 항목이 추가
   1. 변경시 자동 체크아웃후 SQLite에 저장후 리드미 생성
   2. SQLite DB를 Datesette + Zeit Now 로 검색 가능하도록 배포

   TILs
   https://til.hashrocket.com/
   https://www.sarasoueidan.com/today-i-learned/
   https://til.cybertec-postgresql.com/
   https://til.secretgeek.net/
   https://github.com/cheese10yun/TIL
   https://junwoo45til.netlify.app/#/

   5년동안 적었다는 Josh Branchaud 의 TIL 이 많은 사람들에게 영감을 주는듯. (현재 약 909개의 항목)
   https://github.com/jbranchaud/til

   비슷하지만 좀 더 간단한 구현도 있음. 이건 README만 자동 생성
   https://github.com/aicioara/til/blob/master/github/github-actions.md
   이거는 Develop 브랜치에 커밋하면, Master로 옮겨서 README를 생성
   https://github.com/mlpetersen/til/…
"
"https://news.hada.io/topic?id=2018","Glance Back - 하루에 한번 무슨 생각하는지 사진과 함께 남기기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Glance Back - 하루에 한번 무슨 생각하는지 사진과 함께 남기기

   크롬에서 새 탭을 열 때, 하루에 한번 셀프캠으로 자신의 사진과 함께 지금 무슨 생각하는지 짧은글을 남기게 해주는 크롬 확장
   사진과 글은 브라우저의 로컬 스토리지에만 저장
   사진은 설정페이지에서 별도 다운로드 가능
"
"https://news.hada.io/topic?id=2065","GifRun - 유튜브,인스타그램 비디오를 GIF로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GifRun - 유튜브,인스타그램 비디오를 GIF로 만들기

   - 비디오 링크에서 일부분 가져와서 글자 넣고 GIF로 추출하는 웹 도구
   - 최대 10초. 100~520px 크기
   - 다양한 폰트 및 설정 지원
   - Youtube, TikTok, Facebook, Instagram, Twitter, Vimeo 가능
"
"https://news.hada.io/topic?id=1958","eBPF rethinking the Linux Kernel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    eBPF rethinking the Linux Kernel

   eBPF의 개념과 장점, 현황을 이해하기 쉽게 설명한 슬라이드
   JavaScript가 단순 Markup이었던 HTML을 프로그래밍 가능한 플랫폼이 되도록 만든 것처럼, eBPF 가 리눅스 커널을 바꾸고 있음
   - 안전하고, Continuous Delivery 가능하고, JIT로 성능도 뛰어남
   ""eBPF is turing the Linux kernel into a microkernel""
   ""eBPF could enable the Linux kernel hotpatching we always dreamed about.""
   * BPF : Berkeley Packet Filter

   BPF : 새로운 타입의 소프트웨어 - https://news.hada.io/topic?id=1011
   bpf를 이용한 성능분석 - https://news.hada.io/topic?id=88
"
"https://news.hada.io/topic?id=1984","Hack-A-Sat : 우주 보안 챌린지 2020","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Hack-A-Sat : 우주 보안 챌린지 2020

   - 미 공군과 국방부 DDS가 진행하는 인공위성 해킹 대회
   - Capture the Flag(CTF) 방식으로 진행
   - 5/22 예선 (온라인) : Jeopardy 형식의 CTF. 48시간
   - 8/7 결승 (라스베가스, DEF CON 28) : FlatSat CTF
   * Jeopardy : 제시된 여러개 문제들을 해결해서 점수를 얻는 방식
   * FlatSat : 인공위성 만들 때 보통 3~4개의 같은 위성을 만드는데, FlatSat도 그중의 하나. 다른 인공위성 하드웨어없이 보드판에 만들어지는 풀 워킹 프로토타입을 의미. 처음에 문제점을 발견하는데도 쓰이지만, 나중에 실제로 우주에 발사된 위성의 트러블슈팅 하는데도 사용되는 장비.
   * 예선 상품 수령 및 결승 진출하려면 예선에서 해결한 문제중 적어도 5개 이상에 대한 솔루션을 설명한 Technical Paper 제출해야함
   * 문서 통과까지 한 최종 10개의 팀이 결승 진출

   CTF Field Guide - https://trailofbits.github.io/ctf/
"
"https://news.hada.io/topic?id=2000","Awesome-BareMetal : 베어메탈 관련 정보 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Awesome-BareMetal : 베어메탈 관련 정보 모음

   - Self-hosted : 직접 베어메탈을 구성 및 관리하기 위한 솔루션들
   - Networking for Bare-metal Cloud
   - Bare-metal cloud : Alibaba,AWS,Vultr 등
"
"https://news.hada.io/topic?id=2004","이집트 가상투어 : 파라오 람세스 6세의 무덤과 피라미드들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    이집트 가상투어 : 파라오 람세스 6세의 무덤과 피라미드들

   - 이집트 관광유물부가 집에서 고대 유적을 경험해보라고 시리즈로 공개
   - 증강현실로 부동산 정보를 제공하는 미국 프롭테크기업 매터포트의 3D 솔루션을 이용
   - 여왕 메레상크 3세 무덤, 붉은 수도원, 술탄 Barquq의 사원, 벤 에즈라 회당, Kom El Shoqafa 지하묘지, Wahti 무덤, 콥트 박물관, 기자의 동물학 박물관, 조세르의 피라미드, Unas왕의 피라미드 등

   미국에서 부동산용으로 쓰는 솔루션을 유적투어에 사용하기로 한 이집트 관광유물부의 결정이 놀랍군요.
   ( 올해 내각개편으로 관광부+유물부가 합친 정부 부처랍니다. )
   이집트 관광유물부의 공식 홈페이지 - https://egymonuments.gov.eg/news/
   전체 VR 리스트
   * Tomb of Queen Meresankh III https://my.matterport.com/show/?m=d42fuVA21To&mls=1
   * Red Monastery in Sohag https://my.matterport.com/show/?m=Yyw1F5eGxxZ&mls=1
   * The Mosque, Madrasa and Khanqa of Sultan Barquq https://my.matterport.com/show/?m=bN9MbB6cdzi&mls=1
   * Ben Ezra Synagogue https://my.matterport.com/show/?m=9sXzU9yY1gw&mls=1
   * Tomb of Kheti in Beni Hasan https://my.matterport.com/show/?m=QaGBAsT6yg4&mls=1
   * Catacombs of Kom al-Shoqafa https://my.matterport.com/show/?m=ui3dfrQDqB2&mls=1
   * Tomb of Ramesses VI https://my.matterport.com/show/?m=NeiMEZa9d93&mls=1
   * Tomb of Wahti https://my.matterport.com/show/?m=BsXpwTSYSyN
   ㅤ→ 이례적으로 4400년간 잘 보존 되었다는 와티무덤 관련기사 https://www.bbc.com/korean/international-46582714
   * The Coptic Museum https://mpembed.com/show/?m=yMMHWqMJZbY&mpu=497
   * Zoological Museum, at the Giza Zoo https://my.matterport.com/show/?m=t4bfsRUsXEK&help=2&play=1
   * Tomb of Mehu https://my.matterport.com/show/?m=xmDbt2rfa82
   * Tomb of the Two Brothers https://my.matterport.com/show/?m=PKxweZaPG3P
   * Step Pyramid Complex of Djoser https://my.matterport.com/show/?m=zBpDdPqxTKz
   * The Funerary Complex of King Unas https://my.matterport.com/show/?m=o5Ex5Xo7UkE
"
"https://news.hada.io/topic?id=1941","Project MONAI - 오픈소스 헬스케어 AI 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Project MONAI - 오픈소스 헬스케어 AI 프레임워크

   NVIDIA와 King's College London 대학이 공동으로 개발한 헬스케어 이미징 AI 프레임워크
   PyTorch 기반으로 오픈소스로 공개.
"
"https://news.hada.io/topic?id=2052","Fast or Slow - 웹사이트 속도 측정 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Fast or Slow - 웹사이트 속도 측정 도구

   - 전셰계 10개 위치에서 웹사이트의 FCP,FMP,TBT,TTI,RTT 등을 측정
   ㅤ→ US SE/NE/NW/Central,영국,독일,네덜란드,일본,호주,브라질
   - 측정 결과에 이메일 주소 입력하면 정기 모니터링 가능
   - 결과는 약 90일간 저장되고, 예전 결과도 볼 수 있음

   메일로 정기 모니터링 결과를 보내주는 부분이 좋네요.

   구글 PageSpeed Insights랑 결과는 비슷한데, 다양한 장소에서 테스트한 결과를 보여주는게 좋네요.
   https://developers.google.com/speed/pagespeed/insights/
   First Contentful Paint (FCP)
   First Meaningful Paint (FMP)
   Total Blocking Time (TBT)
   Time To Interactive (TTI)
   Round-trip time (RTT)
"
"https://news.hada.io/topic?id=2015","애플, 신형 13인치 맥북프로 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          애플, 신형 13인치 맥북프로 출시

   - 16인치와 같은 분리된 esc와 함께하는 가위식 매직 키보드 탑재
   - 10세대 인텔 cpu 탑재
   - 중급형 이상 모델은 기본 메모리 LPDDR4 16기가 구성 (최대 32기가)
   - 중급형 이상 모델에 기본 512기가 ssd
   - 돌비 애트모스 와이드 스피커
   - 보급형 모델은 가위식 키보드 이외에는 전작과 상당부분 동일

   루머의 14인치가 아니어서 약간 아쉽긴 한데..
   1.4kg 라 새 맥북에어랑 110g 차이밖에 안나는군요.
"
"https://news.hada.io/topic?id=2017","CSS Media Query 5 의 새 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CSS Media Query 5 의 새 기능들

   - light-level : dim,washed,normal 화면 밝기에 따른 조정가능 (아직 브라우저 미지원)
   - inverted-colors : 반전 (Safari만 지원)
   - 개인화
   ㅤ→ prefers-contrast : 접근성 대응
   ㅤ→ prefers-reduced-motion : 애니메니션 최소화
   ㅤ→ prefers-reduced-transparency : 투명화 감소
   ㅤ→ prefers-reduced-data : 셀룰러/로밍 상태나 이미지 많은 사이트에서 데이터 전송 최소화
   - 스크립트 가능한 Custom Media Query
   ㅤ→ @custom-media 로 변수 선언하여 연결 가능
   ㅤ→ 변수 선언 자체도 스크립트 가능하게 만들 예정
"
"https://news.hada.io/topic?id=1954","CS Unplugged - 컴퓨터없이 배우는 Computer Science","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CS Unplugged - 컴퓨터없이 배우는 Computer Science

   - 5~14세 어린이들에게 게임과 퍼즐로 CS를 가르치는 교재 모음
   - 출력물&동영상을 제공. 카드/실/크래용 등으로 원리 이해하기
   - 2진수, 오류 검출과 정정, KidBots, 검색 알고리즘, DB, 정렬, 라우팅과 데드락, 유한 오토마타, 암호화 프로토콜, 튜링 테스트 ..

   한국에서도 지역에 따라 이런 걸 하는 곳이 있긴 합니다. 제 동생이 이런 거 가르치는 방과후 강사 계약직이었거든요. 교재 구경해 보니까 정말 코드는 진짜 1줄도 안 나오더군요. 프로그래밍 실습도 있긴 있는데 스크래치로 하는 모양이었고, 로봇 키트도 커리큘럼에 있다고 들었습니다.

   오 좋네요. 그냥 프로그래밍만 다짜고짜 가르치는 것보다 나은듯 합니다.

   근데 문제는 실제로 아이들을 가르치는 동생 자신은 CS에 대한 배경이 하나도 없는 채로 약 1달간의 속성 교육만을 받은 상태로 일을 시작했다는 것입니다. 동생이 말하길 정말 다행스럽게도 자신은 지금까지는 초등학생만을 대상으로 간단한 것만을 가르쳤다고는 하는데… 동생 자신도 자신감이 없고 정말 이래도 괜찮은 건지 의문스러워하더라고요. 동생에게 교육을 한 교수님은 직접 외국에 나가 CS Unplugged 관련 내용을 제대로 배워오신 분이라고는 합니다.

   뉴질랜드 캔터베리 대학의 팀 벨 교수가 처음 제안한 컴퓨터과학 교수학습 방법이자 전략으로, 컴퓨터 없이 컴퓨터 과학의 원리를 배우기 위해 주변에서 쉽게 사용할 수 있는 저렴한 도구를 이용하여 놀이나 게임 형태로 활동에 참여하면서 원리를 이해합니다.
   유치원 아이들에게 컴퓨터 과학의 원리를 설명하기 위한 극단의 경험(유치원 1일 교사)을 한 뒤 나온 아이디어라, 처음 컴퓨터 과학을 접하는 누구에게나 사용할 수 있습니다.

   기존에 있었던 사이트 https://classic.csunplugged.org/ 를 좀 더 보기쉽게 꾸민 사이트
   Activity 들은 Classic 쪽에 훨씬 다양하게 많습니다.
   한글 번역본은 http://statkclee.github.io/website-csunplugged/ 에 있습니다. (일부분)
   243페이지 짜리 책 PDF도 다운받을수 있습니다.
   https://classic.csunplugged.org/wp-content/uploads/…
"
"https://news.hada.io/topic?id=2043","delta - git/diff Syntax-Highlighter","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  delta - git/diff Syntax-Highlighter

   - git diff 의 출력을 구문강조 해주는 유틸
   - 설치후 .gitconfig 에서 pager로 delta를 지정하면
   ㅤgit diff/show/log/stash/reflog/add 등 대부분의 명령이 구문강조 됨
   - Line내에서 추가/삭제 부분을 여러개까지 인식해서 표시
   - diff 와 pipe 해서 보여주는 용도로도 사용

   bat 에서 지원하는 구문강조 테마를 그대로 지원합니다. 세트로 쓰면 깔끔.
   bat - Syntax Highlighting 되는 cat https://news.hada.io/topic?id=1985
"
"https://news.hada.io/topic?id=1978","일본 국립과학박물관, 내부를 3D/VR로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       일본 국립과학박물관, 내부를 3D/VR로 공개

   일본 도쿄의 우에노 공원 안에는 1877년부터 문을 연 국립과학박물관이 있습니다. 약 11,300 ㎡의 전시공간에 470만 점에 달하는 표본이 있는 커다란 박물관이지요. 현재 이 박물관은 코로나19 때문에 계속 휴관 중인데, 사회적 거리두기로 집 안에만 있는 사람들을 위하여 건물 내부를 고해상도 VR 컨텐츠로 만들어 홈페이지에 공개했습니다. (일본어) VR 장비가 없어도 스트리트 뷰처럼 볼 수 있으니, 자연사나 과학기술사에 관심이 많은 분이라면 이번 기회에 일본에서 최고로 손꼽힌다는 이 박물관을 이렇게라도 둘러보는 것도 좋겠습니다.

   꽤 잘 만들었네요. 스윽스윽 돌아다녀볼만 합니다.
   대부분의 전시품 소개는 제목만 영어로 번역해둬서 아쉽 (벽에 붙어있는 판넬에서는 가끔 한글로 된 설명도 있긴 합니다)
"
"https://news.hada.io/topic?id=2039","GitLens - VSCode 용 추천 플러그인 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GitLens - VSCode 용 추천 플러그인 [동영상]

   개발자들에게 제일 가볍고 좋은 VSCode에 GitLens는 정말 좋은 플러그인입니다.

   Code Runner : 코드 실행을 해줌. 선택된 부분만 가지고도 실행 가능. HTML, Python, Javascript, c# 등 다양한 언어 지원. 개인적으로 HTML 테이블 부분만 보고 싶을 때 많이 사용.
   Live Server Preview : 브라우저 없이 HTML 화면을 미리 볼 수 있음.
   REST Client : API 호출 가능. 테스트 용도로 사용.

   Better Comments - https://marketplace.visualstudio.com/items/…
   Code Snap - https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap
   위 2개도 추천합니다.

   indent-rainbow, Project manager, bracket pair colorizer 추천드립니다

   bracket pair colorizer 정말 좋네요... 감사합니다

   bracket pair colorizer : 요건 2가 나왔어요. ㅋㅋ

   오오 indent-rainbow 랑 bracket pair colorizer 완전 좋네요. 코드 가독성이 완전 높아졌습니다.

   프로젝트 매니저는 작업 폴더나 워크스페이스를 따로 저장할 수 있는데, 이러면 최근 폴더에서 찾는 수고를 덜 수 있습니다 ㅎㅎ
   그 외 setting sync도 있는데 vscode 설정+익스텐션 설정을 전부 github gist에 저장, 동기화 시켜줍니다

   제목이 명확한 내용을 보이도록 수정하였습니다.

   단순히 좋다는 말보다는 어떤 점이 좋다는 점도 요약 설명에 같이 있었으면 좋을 것 같습니다 :)
"
"https://news.hada.io/topic?id=1944","Figma는 어떻게 Ship하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Figma는 어떻게 Ship하는가

   Figma는 매주 전체 매니저들 미팅을 통해 모든 프로젝트 현황을 관리.
   효율적 미팅 진행 및 1개의 문서만을 다 같이 보고 빠르게 판단하기 위해
   ""Product Roadmap"" 을 1개의 Coda 문서로 관리
   이 페이지 자체가 해당 로드맵 Coda 문서이면서, 기능을 설명하고 누구나 복사해서 사용가능한 Coda 템플릿
   문서는 4개의 섹션(탭)으로 구성.
   - Active Projects : 전체 프로젝트에 대한 현황판. 프로젝트당 한줄
   - Launch Cal : 지난 2주간의 런칭 내역 캘린더
   - Team Pages : 각 팀별로 담당하고 있는 프로젝트들 보기 (현재/예정)
   - Data : 이 문서를 구성하기 위한 각종 데이터들 ( 프로젝트, 업데이트, 팀들 )
   1. 토론이 필요한 것에만 집중
   ㅤ매주 진행되는 매니저들 ""Coordinator Meeting"" 에서 처음 10분동안 각자 Active Projects 의 전체 내용을 읽음
   ㅤ각 프로젝트에는 한줄 단위로 현재 프로젝트 상세 내용이 간단히 정리되어 있음.
   ㅤ프로젝트별로 🙋🏻 버튼이 있어서 미팅에서 질문 또는 토론해야 할 것등이 있다면 클릭하고 토론 진행
   ㅤ
   2. Reflection 문화를 만들기
   ㅤ빠르게 움직이다 보면 런칭에만 집중하고, 그 이후의 결과를 돌아보는 것을 까먹게 됨.
   ㅤ이를 위해 최근 2주간 런칭한 내역을 Launch Cal 에 달력 형태로 보임.
   ㅤ""How did it do?"" 컬럼을 통해 런칭한 내역들을 정리
   ㅤ런칭 후 반응은 어땠는지, 잘못되거나 수정한 내역, 사용자들이 얼마나 사용하고 있는지 등
   3. 책임감 부여
   ㅤ매주 월요일 오전에 팀 리드 들은 Active Projects 에 자신이 담당하는 프로젝트 항목을 업데이트 해야함
   ㅤ자동으로 스크립트가 실행되고, 지난 주의 업데이트가 자동으로 한줄에 보이도록 복사
   ㅤ주간 단위로 일이 어떻게 진행되어 가는지 한눈에 보이게 함
   4. 축하하기
   ㅤActive Projects 에는 🙋🏻 버튼 옆에 ❤️ 버튼이 있어서 좋아요/훌륭해! 표시 가능

   CODA https://coda.io/ 는 프로젝트 관리용도로 많이 쓰는 협업 도구로
   로드맵관리, 백로그, 브레인스토밍, 프로젝트 추적, OKR 등을 정리하는 용도로 많이 사용합니다.
   문서+스프레드쉬트+자동화코드 를 합친 도구로, 스프레드쉬트가 메인처럼 보이는 Airtable 과 달리 탭달린 형태의 ""문서""가 메인이라고 보면 됩니다.
   구글 캘린더와 연동하고, 지라 이슈를 리스팅해서 보고, 슬랙으로 리마인더 보내는 등의 기능이 문서내에 쉽게 첨부가 가능합니다.
"
"https://news.hada.io/topic?id=1964","Amazon AppFlow 출시 – SaaS 데이터 연동 및 자동화 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Amazon AppFlow 출시 – SaaS 데이터 연동 및 자동화 서비스

   - SaaS의 데이터를 코딩없이 AWS(RedShift, S3)로 보내거나, 반대로 AWS 데이터를 SaaS로 전송
   - Google Analytics, Amplitude, DataDog, Marketo, Salesforce, Slack, Snowflake, Zendesk 등
   ㅤ→ 13종으로 시작하지만 계속 늘려갈 예정
   - 자동 스케일링, 한 번의 플로우에서 100GB까지 전송
   - 한번 실행에 $0.001, 데이터 GB당 $0.08 (서울 리전 기준, AWS PrivateLink 로 연결된 경우)

   Stitch/Fivetran/MS Power Automate 에는 이미 몇백개 단위의 integration들이 구현되어 있는데 14개면 초라해 보이긴 합니다만
   AWS가 늘 그렇듯이 자신들의 다른 자원들과 더 쉽게 연동하는 것들을 만들어내지 않을까 싶네요.
   클라우드 서비스는 다 자기네가 직접 만들려고 하는듯..
   https://www.stitchdata.com/
   https://fivetran.com/
   https://flow.microsoft.com/ko-kr/
"
"https://news.hada.io/topic?id=1949","98.css - Windows 98 테마 CSS 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    98.css - Windows 98 테마 CSS 라이브러리

   - 레트로 스타일 UI
   - No Class CSS Framework
   - JS 사용하지 않아서 React 및 Vanilla JS 어디든 쉽게 사용 가능
   - 버튼,체크박스,옵션버튼,텍스트,드롭다운,윈도우(타이틀),트리뷰 컴포넌트

   CSS Bed : No-Class CSS Frameworks https://news.hada.io/topic?id=1896
   MVP.css - A minimalist stylesheet https://news.hada.io/topic?id=1773
"
"https://news.hada.io/topic?id=2062","Google Cloud Buildpacks ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Google Cloud Buildpacks

   - 구글 Cloud Run, GKE, Anthos, GCE with Container-Optimized OS 용 빌더 & 빌드팩 모음
   - App Engine 과 Cloud Functions 빌드 시스템으로도 사용
   - CNCF Buildpacks 호환
   - 개발 언어 자동인식해서 지원 : Go, Node.js, Python, Java, .Net

   Paketo Buildpacks - 언어 지원 빌드팩 모음 https://news.hada.io/topic?id=1973
"
"https://news.hada.io/topic?id=2061","Thunderbolt 결함을 이용해 운영체제 보안 회피 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Thunderbolt 결함을 이용해 운영체제 보안 회피 가능

   - 비밀번호로 잠긴 운영체제가 설치된 노트북의 하부 케이스를 열어 Thunderbolt 포트 칩의 펌웨어를 직접 바꿔치기하는 방식으로 운영체제 권한을 획득
   - 노트북이 잠겨있거나, 암호화가 된 드라이브라도 공격 대상에 포함

   서피스북3가 아직 썬더볼트3를 지원 안하는 이유가 보안 때문이라고 할때 무슨 소리인가 했는데 이런게 있었군요.
   딱 이거 때문은 아니지만, 맥은 잘 쓰는거로 봐서는 썬더볼트와 윈도우의 궁합 문제일지도..
   https://theverge.com/2020/4/…

   인텔 측에서는 이미 대응 완료된 취약점이라고 해명했네요.
   https://blogs.intel.com/technology/2020/…
   더 자세한 설명은 Wired에서 읽으실 수 있습니다.
   https://www.wired.com/story/thunderspy-thunderbolt-evil-maid-hacking/
"
"https://news.hada.io/topic?id=2053","Pose Animator - 텐서플로우로 2D 일러스트를 애니메이션 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Pose Animator - 텐서플로우로 2D 일러스트를 애니메이션 하기

   - PoseNet 과 FaceMesh를 이용. 웹캠으로 찍은 사람의 동작을 인식하여 2D 벡터 일러스트를 애니메이트
   - Skeleton 기반 애니메이션을 캐릭터 벡터에 적용한 것
   - TensorFlow.js + SVG 로 크롬/iOS 사파리 에서 동작

   2019년 Emmy상 기술부분을 수상한 Adobe Character Animator 랑 비슷
   https://www.adobe.com/products/character-animator.html
"
"https://news.hada.io/topic?id=2036","Axiom - 코딩없이 브라우저 봇 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Axiom - 코딩없이 브라우저 봇 만들기

   - 클릭만으로 웹에서 반복작업/자동화 만들기 지원
   - 웹페이지 데이터 추출(멀티페이지), 데이터 자동 입력, 버튼/링크 클릭
   ㅤ데이터 필터링 및 변환, 파일 다운로드/업로드, 구글 쉬트 읽고 쓰기
   - 데스크탑 (크롬확장+별도 실행파일), 클라우드 (지원예정)
   - 일반인을 위한 No-Code RPA(Robotic Process Automation) 도구

   개발자들은 Puppeteer 같은 걸로 비슷한 작업을 할 수는 있겠지만, 코딩 모르는 사람도 반복 작업들을 쉽게 해주는 도구
   No-Code 관련 챙겨볼 기사들
   No Code is New Programming https://news.hada.io/topic?id=1099
   Low-Code / No-Code 개발 플랫폼들 리뷰 https://news.hada.io/topic?id=1799
   ""No Code"" 소프트웨어 리스트 https://news.hada.io/topic?id=374
   Y컴비네이터 W20 참가 197개 스타트업들 https://news.hada.io/topic?id=1751
"
"https://news.hada.io/topic?id=2044","Sequoia의 제품 가격 결정 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Sequoia의 제품 가격 결정 가이드

   ""가격은 수학 문제가 아니라 판단의 문제""
   - 인식 가치 올리기 : 가격과 (고객이 생각하는) 가치의 갭을 고려
   ㅤ→ 에버노트는 국가별로 프리미엄 가격을 다르게 설정 ( 소득 수준이 다르므로, 가치의 기준이 다름 )
   ㅤ→ Ebay는 판매자들이 상품 리스트에 사진을 추가하는 기능을 처음부터 25센트에 제공했지만, 사람들이 많이 사용하지 않음. ( 그 가치를 모르니까 ) 하지만 이 기능을 사용한 판매자가 더 높은 클릭률과 더 높은 가격을 받는 경향이 있는 것으로 나타났고, 이걸 ""데이터로 기능과 함께 제공""함으로써 기능의 인식 가치를 높임. 실제로 이베이가 이 사진 호스팅 비용에 25센트가 드는 것은 아니어서, 다른 옵션들과 함께 수억 달러의 순이익을 창출.
   - Let your price tell a story : 가격이 얘기하게 만들기
   ㅤ→ 제품에 설정한 가격은 인식 가치에 영향을 주게 됨. 사람들은 50달러짜리 와인이 10달러짜리 와인보다 좋은 거라고 가정. 즉, 가격은 품질에 대한 프록시(대리인)
   ㅤ→ 고객 기반을 확장하는 방법의 하나는, 같은 가격대에 여러 입맛에 맞는 제품을 구비하는 것 ( 5 색상 iPhone 같은 )
   ㅤ→ 또 다른 방법은 여러 가지 가격대에서 다양한 버전을 제공하는 것
   ㅤ→ 아무리 많은 조사를 하더라도, 고객이 무엇을 원하는지는 확신할 수 없음.
   ㅤ→ 고객이 자신만의 패키지를 구성할 수 있게 하면, 가격 및 제품군에 대한 실시간 피드백을 받을 수 있음.
   - Know your pinch points : 핀치 포인트를 알자
   ㅤ→ 두 명의 고객이 있을 때 그들은 서로 다른 가치로 상품을 인식.
   ㅤ→ 이 다른 그룹들을 이해하면, 이런 것은 비용을 지불하고 써야지 하고 생각하는 ""핀치 포인트""가 뭔지 알 수 있음.
   ㅤ→ Linkedin은 유료화 시작하던 2005년에 고객의 90%가 사용하지 않는 기능들을 리스트하고, 그것들이 헤비유저들에게 좀 더 가치가 있다고 판단한 뒤 별도로 분리. 이중 ""파워 검색""과 ""다른 멤버에게 연락하기"" 기능은 링크드인 프리미엄 계정의 기초가 되었음.
   - Design for snap judgments : 빠른 판단이 가능하도록 만들기
   ㅤ→ 전통적인 경제방식으로는 가격을 책정할 수 없음. ""사람들은 합리적으로 행동하지 않음""
   ㅤ→ 구매할 때 논리와 이성이 끼어들기도 전에 ""아주 짧은 시간"" 동안에 먼저 결정을 하게 됨. 새로운 것의 가치를 평가하는 노력을 기울이기보다는, 자신이 내린 판단이 올바르다고 생각하는 방식으로 쉬운 길을 택함.
   ㅤ→ 온라인에서 로퍼(Loafer, 구두의 일종) 같은 신발을 볼 때, 후드와 찢어진 청바지를 입은 모델이 신은 것이 서류 가방을 든 회사원이 신은 것보다 싸다고 생각하게 됨. 신발을 만들 때 들어가는 재료나 박음질 등에 대한 고민 없이 쉬운 질문을 선택. ""학생 & 회사원은 로퍼에 돈을 얼마나 쓸까?"" 그 값이 이 로퍼의 가격이 비싼지 아니면 할인하는지를 판단하는 기준이 됨.
   ㅤ→ 웹사이트를 만들어주는 Weebly 도구는 처음에 ""무료이고 쉬워요.""라는 걸 강조했지만, 사람들은 이걸 ""기능 없는 싼 티 나는 제품""으로 인식함. ""당신처럼 독특한 사이트를 만들어 보세요.""라는 문구로 바꾸고, 수백만 달러가 들어간 것처럼 보이는 웹사이트를 데모로 보여주기 시작.
   ㅤ→ 에버노트는 SWAG(막 나눠주는 기념품 같은 물품들)을 금지. 싸구려 민트사탕이나 스트레스 볼(꾹꾹 눌러보는 고무공) 같은 것과 에버노트를 연관 짓지 못하도록. 나이키와 애플은 자신들의 제품이 아닌 것에는 로고를 넣지 않음. MacHeist 같은 소프트웨어 번들 딜 프로모션도 금지하는 대신, Moleskine 같은 노트북 (실제로 서비스보다 더 비싼 금액인)과의 연계 상품을 만듦.
   - Decoy Pricing : 미끼 상품 만들기
   ㅤ→ Economist 잡지가 온라인 $59, 인쇄본 $125, 인쇄본+온라인을 $125에 팔았을 때,
   ㅤㅤ100명의 학생 중 84명이 $125콤보를 선택하고, 16명은 온라인 버전을 선택
   ㅤㅤ하지만, 인쇄본 전용 옵션을 제거했을 때는 68명이 더 싼 버전인 $59를 선택.
   ㅤㅤ즉 인쇄본은 패키지로서는 가치가 없지만, 소비자가 Snap Judgement 할 때 영향을 줌.
   ㅤ→ 미끼 상품은 다른 상품을 더 좋게 보이는 효과가 있음.
   ㅤ→ B2B 제품에서도 마찬가지. 10 사용자당 월 $500, 25 사용자당 월 $1000 일 때, 무제한 사용자 대상 월 $1200로 설정. 그러면 대부분 $1000 대신 $1200을 선택.
   - 가격에 대한 가설 세우기
   ㅤ→ Pricing Worksheet 를 파일로 제공. 4개의 필드 채우기
   ㅤ(1) 고객이 당신의 제품을 처음 볼 때 생각나야 할 것들 : 왼쪽에는 당신 제품의 대체제가 될 만한것, 오른쪽에는 같이 사용할만한 보완제.
   ㅤ(2) 순간 판단 요소와 상세 분석에 따른 결과로 알 수 있는 요소들
   ㅤ(3) 인식 가치를 시각화. 다른 대체제 및 보완제들의 가격에 기반.
   ㅤ(4) 누구를 대상으로 마케팅 할 것인가

   세콰이어 캐피탈에서 만든지 꽤 오래된 가이드지만 기초중의 기초라서 살짝 요약해 봤습니다.
   Pricing Worksheet 파일 : https://www.dropbox.com/s/c943j7h3hkgdi68/Pricing-Worksheet.pdf
"
"https://news.hada.io/topic?id=1945","GithubBox - 깃헙 Repo를 바로 CodeSandbox에서 열기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GithubBox - 깃헙 Repo를 바로 CodeSandbox에서 열기

   GitHub url에 box만 붙이면 CodeSandbox에서 즉시 편집 및 개발가능하게 만들어주는 브릿지 도구
   깃헙 브랜치/태그/파일Blob 에서도 동작
   * CodeSandbox : 빠른 웹개발을 위한 웹용 IDE(VS Code 기반)

   CodeSandbox - GitHub 연동 웹 개발 IDE https://news.hada.io/topic?id=1946
"
"https://news.hada.io/topic?id=1981","Interface in Game - 게임 인터페이스 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Interface in Game - 게임 인터페이스 모음

   - 200 개 이상 게임들의 UI와 동작화면 동영상 모음
   - 장르, 테마 및 태깅 정보를 통해서 모아보기 가능
   ㅤ→ 캐릭터, 크레딧, 대화, 게임오버, 인벤토리, 지도, 점수판, 로딩, 퀘스트, 스킬트리, 스탯, 튜토리얼, 설정 화면 등
   - 약 7천개의 스크린샷&동영상

   앱이나 웹 UI 모음은 많이 봤는데, 게임 모음은 좀 독특하네요.
   많은 부분이 동영상이라 둘러보기에도 재미납니다.
"
"https://news.hada.io/topic?id=1966","내가 지금껏 작성해 본 가장 어려운 프로그램 (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    내가 지금껏 작성해 본 가장 어려운 프로그램 (2015)

   Dart 프로그래밍 언어 (https://dart.dev) 의 공식 코드 포매터 `dartfmt`의 저자가 작성한 포매터 작성 과정, 만난 장애물과 해결 방법 등에 대한 포스팅. (잘못 들어간 링크로 인한 재업로드)

   링크를 잘못 올려서 삭제 후 다시 올렸는데, 트위터와 페이스북 등에 처음 올린 글도 이미 올라가서 결과적으로 두 번씩 포스팅이 되어버렸네요. 죄송합니다 ㅜㅜ

   지워진 글의 페북과 트위터 글은 삭제하였습니다~
   슬랙은 아마도 뒷글이 바로 보이니 괜찮을거 같습니다.
   삭제보다는 모더레이터를 통해서 수정되도록 해야할거 같아요.
   좋은 글 고맙습니다!
"
"https://news.hada.io/topic?id=1998","MsQuic - Microsoft의 QUIC 프로토콜 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MsQuic - Microsoft의 QUIC 프로토콜 구현체

   - HTTP/3의 기본 프로토콜인 QUIC을 C로 구현한 크로스플랫폼 라이브러리
   - 클라이언트/서버 , 최대 처리량/최소 대기시간을 위한 최적화
   - Async IO
   - Receive Side Scaling(RSS) 지원
   - UDP 전송/수신 통합(coalescing) 지원
   - TLS 1.3 지원을 위해 Win10은 Schannel, Linux는 OpenSSL에 의존

   회사별로 다른 언어로 QUIC 구현체를 만들고 있네요. 누가 누가 잘하나..
   Quiche - 클라우드플레어가 RUST로 만든 QUIC 구현체 https://github.com/cloudflare/quiche
   mvfst(Move Fast) - 페이스북이 C++로 만든 QUIC 구현체 https://github.com/facebookincubator/mvfst
   HTTP/3와 QUIC
   HTTP/3의 현재상태 https://news.hada.io/topic?id=1296
   HTTP/3는 왜 UDP를 선택한 것일까? https://news.hada.io/topic?id=682
   HTTP/3 와 HTTP/2의 퍼포먼스 비교 https://news.hada.io/topic?id=1893
   Cloudflare, QUIC 과 HTTP/3 지원 시작 https://news.hada.io/topic?id=604
   Receive-Side Scaling (RSS) : 멀티프로세서 시스템에서 도착한 패킷들을 각 CPU가 병렬처리하여 네트워크 수신 처리 부담을 효율적으로 분산가능한 기법
   https://docs.microsoft.com/en-us/windows-hardware/…
"
"https://news.hada.io/topic?id=2054","blessed - node.js용 터미널 UI 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    blessed - node.js용 터미널 UI 라이브러리

   - terminfo/termcap을 파싱하여 ncurses를 재구현. 어떤 터미널에서든 출력가능
   - 터미널용 최적화된 Widget API 제공
   ㅤ→ Box,List,Form,Prompt,Image 등의 컴포넌트
   ㅤ→ 쉬운 UI 제어를 위한 다양한 이벤트/메소드 지원
   - CSR (change-scroll-region, 특정 부분만 스크롤), BCE (back-color-erase, 현재 배경색으로 지우기) 지원하여 효율적인 화면 출력
"
"https://news.hada.io/topic?id=2005","하버드대 와이드너 도서관, 내부를 3D/VR로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      하버드대 와이드너 도서관, 내부를 3D/VR로 공개

   미국 하버드대학교에는 무려 수십 곳의 도서관이 있지만, 그 중에서도 으뜸가는 도서관은 바로 “해리 엘킨스 와이드너 기념 도서관”(Harry Elkins Widener Memorial Library)입니다. 보통 줄여서 “와이드너 도서관”이라고 하지요. 미국에서 도서관이 가장 큰 대학인 하버드대에서도 최고로 꼽히는 이곳은 타이타닉호 사고로 목숨을 잃은 하버드대 출신 애서가 해리 와이드너를 기리기 위해 그의 어머니 엘레너 와이드너(Eleanor Widener)가 장서와 거금을 하버드대에 기부하여 1915년에 설립되었습니다. 건물 규모부터가 웅장하고, 설령 없는 책이 있으면 72시간 안에 구해다 줄 수 있으며, 구텐베르크의 42행 성서나 셰익스피어 초간본과 같은 귀중본조차 볼 수 있는 대단한 도서관입니다. 하지만 하버드대 소속이 아니면 이용할 수 없지요.
   이곳의 내부를 이제 VR로나마 엿볼 수 있게 되었습니다. (영어) 들어가 보면 각 지점마다 설명 캡션을 달아뒀기 때문에 아주 흥미롭지요. 비록 베타 버전이긴 합니다만, 문헌정보학 전공자나 이런 거 좋아하시는 분들은 관람할 가치가 충분합니다.
"
"https://news.hada.io/topic?id=1950","Go 개발자 설문조사 2019 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Go 개발자 설문조사 2019 결과

   - 주 용도는 API/RPC 서비스와 CLI 개발
   - 웹,DB,네트웍,시스템,DevOps 분야에 주로 사용
   - 기술회사들이 많이 사용하지만 금융/미디어 산업등에서도 확장중
   - 3~10년차 개발자들이 많이 사용하고, 2년 이하의 새 유저가 56%
   - C/Python에 익숙한 개발자들이 다수
   - 주 개발OS: Linux(66%) > mac(53%) > 윈(20%)
   - IDE : VS Code(41%) > GoLand / IntelliJ (34%) > Vim(14%)
   - 다음 프로젝트에도 Go 사용할 것 (89%), Go가 회사의 성공에 핵심(59%)
   - 중요도/만족도 조사 : Reliablilty , Concurreny , Security, Build Speed, Memory Footprint
   ㅤ→ 불만족 포인트 : 디버깅, 클라우드 이용, Binary size
   - Go 새 버전 나오면 5개월안에 업그레이드 하는 팀이 75%
   - Cloud : AWS(42%) > GCP(24%) > Digital Ocean(8%) > Azure(7%)
   ㅤ→ EC2 > K8s > Azure VM > Azure K8s > GCE > Lambda
   ㅤ→ 클라우드 만족도 AWS > GCP > Azure : 특히 Azure 의 불만족도가 높음
   - 현재 없지만 꼭 필요한 Go 언어 기능 : Generics > Better Error Handling > Functional Programming
   - Go 관련 답변 얻는 곳 : Stack Overflow > Godoc.org > 소스코드 > golang.org
"
"https://news.hada.io/topic?id=2011","GitOps 툴 비교 : FluxCD vs ArgoCD vs Jenkins X","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GitOps 툴 비교 : FluxCD vs ArgoCD vs Jenkins X

   * GitOps = Git 기반 워크플로우로 서비스/인프라를 관리. ""Operations by Pull Request""
   - FluxCD : 가볍고 쉬운 설치. 배포중점
   - ArgoCD : 많은 기능. 멀티 테넌시 지원. 훌륭한 웹UI
   - Jenkins X : GitHub기반 CI/CD 전체 지원. ChatOps. 멀티팀 지원예정

   GitOps 의 3가지 문제점 https://news.hada.io/topic?id=1835
"
"https://news.hada.io/topic?id=1962","Progressive Web App Store","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Progressive Web App Store

   - PWA 들을 모아놓은 웹 앱 스토어
   - iOS/Android/Desktop(크롬) 지원

   비슷한 https://appsco.pe/ 라는 사이트도 있습니다.
   이런 웹앱스토어 시도는 많았는데, 기본적으로 오래 유지되지가 않는게 문제인듯.
   이유는 PWA 스토어로 수익을 내는 것등이 불가능하기 때문이라고 생각합니다.
   수익이 나오지 않는데, 지속적으로 관리하기가 쉽지 않죠.
   PWA 스토어가 제대로 역할을 할 수 있으려면, 적절한 유료모델이 붙어야 하는데
   정작 PWA 앱들은 앱스토어의 수수료를 피하기 위한게 많은데 이런 PWA 스토어에 입점 할리가 없구요.
   그래서 아이러니컬 하게도 웹앱스토어의 가장 성공한 모델은 WeChat 의 Mini Program (小程序) 인듯
   - 아이폰/안드로이드폰 어디서든 사용 가능
   - 수 많은 사용자 : 3억명 DAU ( 2018)
   - 자체 결제 모델 : 2019년 결제금액 800b yuan (USD 1150억달러)
   - 2백만개 이상의 웹앱들
   https://wechatwiki.com/wechat-resources/…
"
"https://news.hada.io/topic?id=2019","Prototypr - 디자이너를 위한 큐레이션 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Prototypr - 디자이너를 위한 큐레이션 플랫폼

   - 계속 추가되는 약 1000+개의 디자인 도구
   - 매일 매일 손으로 큐레이션 해서 올리는 디자인 관련 글들
   - 주간 뉴스레터 발행

   디자이너를 위한 긱뉴스 라고 보면 되겠군요 ^^
"
"https://news.hada.io/topic?id=2060","케빈 켈리의 68가지 조언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             케빈 켈리의 68가지 조언

   Wired 창립 편집장 케빈 켈리(KK)가 올해 68세 생일날 블로그에 올린 훌륭한 조언들 간단 번역
   • Learn how to learn from those you disagree with, or even offend you. See if you can find the truth in what they believe.
   - 당신이 동의하지 않거나, 심지어 당신을 기분 상하게 하는 사람에게서도 배우는 방법을 익히세요. 그들이 믿는 것에서 진실을 찾을 수 있는지 보세요.
   • Being enthusiastic is worth 25 IQ points.
   - 열정적인 것은 IQ 25의 가치가 있습니다.
   • Always demand a deadline. A deadline weeds out the extraneous and the ordinary. It prevents you from trying to make it perfect, so you have to make it different. Different is better.
   - 항상 데드라인을 요구하세요. 데드라인은 관계없거나 평범한 것들을 제거합니다. 데드라인이 ""완벽하게"" 만들지 못하게 방해해주니까, ""다르게"" 만들어야 합니다. 다른 것이 좋습니다.
   • Don’t be afraid to ask a question that may sound stupid because 99% of the time everyone else is thinking of the same question and is too embarrassed to ask it.
   - 99%의 사람들은 같은 질문을 생각하니까, 멍청한 질문이라고 생각되는 것이라도 두려워하지 마세요.
   • Being able to listen well is a superpower. While listening to someone you love keep asking them “Is there more?”, until there is no more.
   - 잘 들을 수 있는 것은 초능력입니다. 당신이 좋아하는 사람의 말을 들을 때, 그 사람이 더 말할 게 없을 때까지 ""더 없어?""라고 물어보세요.
   • A worthy goal for a year is to learn enough about a subject so that you can’t believe how ignorant you were a year earlier.
   - 한해동안 가치 있을 만한 목표는 ""1년 전에는 어쩜 이걸 몰랐을까?"" 싶은 주제에 대해 배우는 것입니다.
   • Gratitude will unlock all other virtues and is something you can get better at.
   - 감사하는 것은 다른 모든 미덕의 시작이며, 당신이 더 나아지도록 합니다.
   • Treating a person to a meal never fails, and is so easy to do. It’s powerful with old friends and a great way to make new friends.
   - 사람들에게 식사를 대접하는 것은 실행하기도 쉽고 절대 실패하지 않습니다. 오랜 친구에게도 강력하고 새로운 친구를 사귀기에도 좋은 방법입니다.
   • Don’t trust all-purpose glue.
   - 다목적 접착제는 믿지 마세요
   • Reading to your children regularly will bond you together and kickstart their imaginations.
   - 아이들에게 정기적으로 책을 읽어주면 당신과 끈끈해지고 상상력을 길러줄 수 있습니다.
   • Never use a credit card for credit. The only kind of credit, or debt, that is acceptable is debt to acquire something whose exchange value is extremely likely to increase, like in a home. The exchange value of most things diminishes or vanishes the moment you purchase them. Don’t be in debt to losers.
   - 신용카드를 사용하지 마세요. 허용 가능한 유일한 부채는 '집'처럼 가격이 끝내는 오를만한 것을 사려고 할 때뿐입니다. 대부분 물건의 가치는 구입순간부터 감소하거나 사라집니다. 빚지지 마세요.
   • Pros are just amateurs who know how to gracefully recover from their mistakes.
   - 전문가(Pro)는 실수로부터 우아하게 회복할 방법을 아는 아마추어일 뿐입니다.
   • Extraordinary claims should require extraordinary evidence to be believed.
   - 특별한 주장은 믿을만한 특별한 증거를 요구하는 게 좋습니다.
   • Don’t be the smartest person in the room. Hangout with, and learn from, people smarter than yourself. Even better, find smart people who will disagree with you.
   - 방에서 가장 똑똑한 사람이 되지 마세요. 자신보다 더 똑똑한 사람들과 만나고 배우세요. 더 나아가 당신에게 동의하지 않는 똑똑한 사람들을 찾으세요.
   • Rule of 3 in conversation. To get to the real reason, ask a person to go deeper than what they just said. Then again, and once more. The third time’s answer is close to the truth.
   - 대화에서의 3의 법칙. 진짜 이유를 들으려면 누군가가 말한 것에 대해 좀 더 깊이 얘기해 달라고 하세요. 그리고 한번, 다시 한번 더. 세번째 대답이 진실에 가깝습니다.
   • Don’t be the best. Be the only.
   - 최고가 되지 말고, 유일한 사람이 되세요.
   • Everyone is shy. Other people are waiting for you to introduce yourself to them, they are waiting for you to send them an email, they are waiting for you to ask them on a date. Go ahead.
   - 모두 부끄러워합니다. 다른 사람들은 당신이 자신을 소개해주기를, 이메일을 보내주기를, 데이트를 요청해주기를 기다리고 있어요. 지금 실행하세요.
   • Don’t take it personally when someone turns you down. Assume they are like you: busy, occupied, distracted. Try again later. It’s amazing how often a second try works.
   - 누군가 당신을 거절할 때 그걸 개인적으로 받아들이지 마세요. 그들도 당신과 같다고 생각하세요. 바쁘고, 뭔가에 점유되어 있고, 산만합니다. 나중에 다시 시도하세요. 두 번째 시도가 얼마나 잘 성공하는지 놀라실걸요.
   • The purpose of a habit is to remove that action from self-negotiation. You no longer expend energy deciding whether to do it. You just do it. Good habits can range from telling the truth, to flossing.
   - 습관의 목적은 자기 자신과 타협하는 행동을 제거하는 것입니다. 할지 말지 고민하는 데 에너지를 쓰지 마세요. 그냥 하세요. 좋은 습관은 진실을 말하는 것부터 치실(flossing)을 하는 것까지 다양합니다.
   • Promptness is a sign of respect.
   - 신속함은 존중의 표시입니다.
   • When you are young spend at least 6 months to one year living as poor as you can, owning as little as you possibly can, eating beans and rice in a tiny room or tent, to experience what your “worst” lifestyle might be. That way any time you have to risk something in the future you won’t be afraid of the worst case scenario.
   - 젊었을 때 가능하다면 적어도 6개월에서 1년까지 아주 작은 방이나 텐트에서 콩과 쌀만 먹으며 빈곤하게 생활해보세요. ""가장 나쁜"" 생활이 어떨지 한번 경험해보세요. 그러면 미래에 뭔가 위험을 감수해야 할 때, 최악의 시나리오를 두려워하지 않을 것입니다.
   • Trust me: There is no “them”.
   - 저를 믿으세요: ""그들""이란 건 없습니다. (역주: 뭔가 내 의견에 반하는 '사람들'이 있는게 아니고 우린 모두 다른 의견을 가진 거라고 생각하고 번역했습니다.)
   • The more you are interested in others, the more interesting they find you. To be interesting, be interested.
   - 다른 사람들에게 관심을 가질수록, 다른 사람들도 당신에게 흥미를 느끼게 됩니다. 흥미로워지려면 관심을 가지세요.
   • Optimize your generosity. No one on their deathbed has ever regretted giving too much away.
   - 관대함을 최적화하세요. 죽을 때 너무 많이 나눠줬다고 후회하는 사람은 없습니다.
   • To make something good, just do it. To make something great, just re-do it, re-do it, re-do it. The secret to making fine things is in remaking them.
   - 좋은 것을 만들려면 그냥 하세요. 위대한 것을 만들려면 다시 하고, 다시 하고, 다시 하세요. 훌륭한 것을 만드는 비결은 다시 만들어 보는 것입니다.
   • The Golden Rule will never fail you. It is the foundation of all other virtues.
   - 황금률 (The Golden Rule, 다른 사람이 해 주었으면 하는 행위를 하라 [1])은 절대 실망하게 하지 않습니다. 그것은 다른 모든 미덕의 기초입니다.
   • If you are looking for something in your house, and you finally find it, when you’re done with it, don’t put it back where you found it. Put it back where you first looked for it.
   - 집에서 뭔가를 찾고 있을 때 마침내 찾았다면 그 자리에 다시 두지 말고, 맨 처음 찾아봤던 곳에 두세요.
   • Saving money and investing money are both good habits. Small amounts of money invested regularly for many decades without deliberation is one path to wealth.
   - 돈을 절약하고 투자하는것은 좋은 습관입니다. 아주 깊이 생각지 않고, 수십년간 소량의 돈을 정기적으로 투자하는 것은 부자가 되는 방법중 하나 입니다.
   • To make mistakes is human. To own your mistakes is divine. Nothing elevates a person higher than quickly admitting and taking personal responsibility for the mistakes you make and then fixing them fairly. If you mess up, fess up. It’s astounding how powerful this ownership is.
   - 실수를 하는 것이 인간입니다. 당신이 실수한다는 것은 매우 신성한 것입니다. 자신이 저지른 실수에 대해 신속하게 인정하고, 공정하게 바로 잡는것 보다 사람을 훌륭하게 만들어주는 것은 없습니다. 뭔가를 망쳤다면, 털어 놓으세요. 이 ""실수에 대한 소유권""이 얼마나 강력한지 놀랄겁니다.
   - Never get involved in a land war in Asia ( 아시아에서 내전에 관여하지 마십시오 = 분에 넘치는 일은 하지 마세요 )
   ( 역주: 몽고메리/맥아더가 썻다고 알려진 표현 입니다. 주석에 링크 달겠습니다 [2] )
   • You can obsess about serving your customers/audience/clients, or you can obsess about beating the competition. Both work, but of the two, obsessing about your customers will take you further.
   - 고객/청중/사용자에게 집중하거나, 경쟁에서 이기는 것에 집중할 수 있습니다. 두가지 다 동작하지만, 고객에 집중하는 것이 더 멀리 갈 수 있습니다.
   • Show up. Keep showing up. Somebody successful said: 99% of success is just showing up.
   - 보여주세요. 뭔가를 계속 보여주세요. 성공한 사람이 말하길: 99%의 성공은 그저 보여주는 것입니다. ( 역주: Show up 은 뭔가를 만들어서 보여주는 것, 어딘가에 참석해서 보여주는 것 의 의미도 있지만 [3]의 글을 참고하시면 뭔가를 시작하는 것으로도 이해할수 있습니다. 헬스장에 등록하고 가는 것도 시작, 매일 글을 쓰는 것, 수업에 참석하는 것, 프로젝트에 참여하는 등 뭔가를 시작하는 것을 보여주는 것이라고 이해하면 될 것 같습니다.)
   • Separate the processes of creation from improving. You can’t write and edit, or sculpt and polish, or make and analyze at the same time. If you do, the editor stops the creator. While you invent, don’t select. While you sketch, don’t inspect. While you write the first draft, don’t reflect. At the start, the creator mind must be unleashed from judgement.
   - 창작과 개선과정을 분리하세요. 쓰는것과 편집하는것, 조각하고 다듬는 것, 만들고 분석하는 것을 동시에 할수는 없습니다. 동시에 한다면 내 안의 편집자가 창작자를 막게 됩니다. 발명하는 동안 선택하지 마세요. 스케치 하는동안 검사하지 마세요. 초안 작성중에는 반영하지 마세요. 처음에는 창작자의 마음이 판단으로부터 해방되어야 합니다.
   • If you are not falling down occasionally, you are just coasting.
   - 당신이 가끔 쓰러지지 않는다면, 설렁 설렁하고 있는 것입니다.
   • Perhaps the most counter-intuitive truth of the universe is that the more you give to others, the more you’ll get. Understanding this is the beginning of wisdom.
   - 아마도 우주의 진리중 가장 반직관적인 것은 ""남에게 더 많이 줄수록, 더 많이 얻게 된다는 것"" 입니다. 이것을 이해하는 것이 지혜의 시작입니다.

   • Friends are better than money. Almost anything money can do, friends can do better. In so many ways a friend with a boat is better than owning a boat.
   - 친구가 돈보다 낫습니다. 돈이 할 수 있는 거의 모든 것은, 대부분 친구들이 더 잘합니다. 여러가지면에서 배를 소유하는 것보다, 배를 가진 친구가 낫습니다.
   • This is true: It’s hard to cheat an honest man.
   - 분명한 사실: 정직한 사람을 속이는 것은 어렵습니다.
   • When an object is lost, 95% of the time it is hiding within arm’s reach of where it was last seen. Search in all possible locations in that radius and you’ll find it.
   - 물건을 잃어버렸을 때, 95%는 마지막으로 본 곳에서 팔 닿는곳에 있습니다. 해당 반경내에서 모든 곳을 뒤져보면 찾을수 있습니다.
   • You are what you do. Not what you say, not what you believe, not how you vote, but what you spend your time on.
   - 당신은 당신이 하는 일로 표현됩니다. 당신이 하는 말이 아니라, 믿는 것이 아니라, 투표하는 방식이 아니라, 당신이 시간을 쓰는 그 것이 당신을 말해줍니다.
   • If you lose or forget to bring a cable, adapter or charger, check with your hotel. Most hotels now have a drawer full of cables, adapters and chargers others have left behind, and probably have the one you are missing. You can often claim it after borrowing it.
   - 케이블,어댑터,충전기를 잃어버리거나 안 가져왔을 때 호텔에 문의하세요. 대부분의 호텔은 누군가 놓고간 케이블, 어댑터 및 충전기로 가득찬 서랍을 가지고 있을겁니다. 당신이 잃어버린게 거기 있을지도 몰라요.
   • Hatred is a curse that does not affect the hated. It only poisons the hater. Release a grudge as if it was a poison.
   - 증오는 미움 받는 사람(the hated)에게는 영향을 주지 않는 저주입니다. 증오하는 본인(the hater)만 아프게 하는 독약과 같습니다. 독약인 것 처럼 원한을 놓아버리세요.
   • There is no limit on better. Talent is distributed unfairly, but there is no limit on how much we can improve what we start with.
   - 더 잘 하는 것 (better) 에는 제한이 없습니다. 재능은 불공평하게 분배되지만, 우리가 가지고 시작한 것을 얼마나 향상시킬 수 있는지는 제한이 없습니다.
   • Be prepared: When you are 90% done any large project (a house, a film, an event, an app) the rest of the myriad details will take a second 90% to complete.
   - 준비하세요: 큰 프로젝트 (집, 영화, 이벤트, 앱)를 90% 완료하면, 무수한 세부사항의 나머지를 완료하는데 두번째 90%가 걸립니다.
   • When you die you take absolutely nothing with you except your reputation.
   - 당신이 죽을 때 평판외에는 아무것도 가져가지 못합니다.
   • Before you are old, attend as many funerals as you can bear, and listen. Nobody talks about the departed’s achievements. The only thing people will remember is what kind of person you were while you were achieving.
   - 나이가 들기전에 가능한 많은 장례식에 참여하고 들으세요. 떠난 사람의 업적에 대해 얘기하는 사람은 없습니다. 사람들이 유일하게 기억하는 것은 당신이 업적을 달성하는 동안 어떤 사람이었나 하는 것 뿐입니다.
   • For every dollar you spend purchasing something substantial, expect to pay a dollar in repairs, maintenance, or disposal by the end of its life.
   - 뭔가 비용을 들여서 큰 것을 구매할 때마다, 그것의 수명이 다할때까지 수리, 유지보수, 폐기하는데에도 같은 비용이 들어갈 것을 예상하세요.
   • Anything real begins with the fiction of what could be. Imagination is therefore the most potent force in the universe, and a skill you can get better at. It’s the one skill in life that benefits from ignoring what everyone else knows.
   - 현실은 있을법한 허구에서 시작합니다. 그러므로 상상력은 우주에서 가장 강력한 힘이며, 당신이 더 향상시킬수 있는 기술입니다. 그건 다른 사람들이 모두 다 아는 것을 무시함으로써 혜택을 얻는 유일한 기술 입니다.
   • When crisis and disaster strike, don’t waste them. No problems, no progress.
   - 위기와 재난이 닥쳤을때, 그걸 낭비하지 마세요. 문제가 없다면 진보도 없습니다.
   • On vacation go to the most remote place on your itinerary first, bypassing the cities. You’ll maximize the shock of otherness in the remote, and then later you’ll welcome the familiar comforts of a city on the way back.
   - 휴가를 갈 땐, 도시를 벗어나 일정상 가장 먼곳으로 먼저 가세요. 멀리 떨어진 곳에서 타인이 되어보는 충격을 최대화 하면, 돌아올 때 도시의 친숙한 편안함을 즐기게 될겁니다.
   • When you get an invitation to do something in the future, ask yourself: would you accept this if it was scheduled for tomorrow? Not too many promises will pass that immediacy filter.
   - 미래에 뭔가 해달라는 초대를 받았을 때 자신에게 물어보세요: 만약 그게 내일로 예정된 것이라면 수락할 것인가요? 많은 약속들이 이 빠른 필터를 통과하지 못합니다.
   • Don’t say anything about someone in email you would not be comfortable saying to them directly, because eventually they will read it.
   - 누군가에게 직접 말하는 게 불편한 내용은 이메일에서도 언급하지 마세요. 그 사람은 결국 그걸 읽게 될테니까요.
   • If you desperately need a job, you are just another problem for a boss; if you can solve many of the problems the boss has right now, you are hired. To be hired, think like your boss.
   - 당신이 정말 직업이 필요한거라면, 보스에겐 당신은 또 다른 문제일 뿐입니다. 당신이 보스가 지금 당면한 문제들을 해결해 줄 수 있다면 당신을 뽑을 겁니다. 채용되려면 당신의 보스처럼 생각하세요.
   • Art is in what you leave out.
   - 생략한 것이 예술이 됩니다.
   • Acquiring things will rarely bring you deep satisfaction. But acquiring experiences will.
   - 물건을 얻는 것은 가끔 깊은 만족감을 주기도 합니다. 하지만 경험을 얻는 것은 항상 깊은 만족감을 줍니다.
   • Rule of 7 in research. You can find out anything if you are willing to go seven levels. If the first source you ask doesn’t know, ask them who you should ask next, and so on down the line. If you are willing to go to the 7th source, you’ll almost always get your answer.
   - 조사할 때 7의 법칙. 7단계를 갈 수 있다면 무엇이든 찾을 수 있습니다. 첫번째 물어본 사람이 모르면, 그 사람에게 다음으로 누구한테 물어야 할지를 물어보고 계속 하세요. 7번째 까지 가려고 할때면 거의 항상 답을 얻을 것입니다.
   • How to apologize: Quickly, specifically, sincerely.
   - 사과 하는법 : 신속하게, 구체적으로, 진심을 담아.
   • Don’t ever respond to a solicitation or a proposal on the phone. The urgency is a disguise.
   - 전화로 오는 요청이나 제안에 응답하지 마세요. 긴급함은 위장입니다.
   • When someone is nasty, rude, hateful, or mean with you, pretend they have a disease. That makes it easier to have empathy toward them which can soften the conflict.
   - 누군가가 당신에게 불쾌하고 무례하거나 증오하고 심술맞게 굴때 그들이 병에 걸렸다고 생각하세요. 그들에게 공감하는걸 쉽게 만들어서, 갈등을 완화시키는데 도움이 됩니다.
   • Eliminating clutter makes room for your true treasures.
   - 주변의 어지러운 것들을 제거하면, 진정한 보물을 위한 공간이 만들어집니다.
   • You really don’t want to be famous. Read the biography of any famous person.
   - 당신은 진짜로 유명해지고 싶지는 않을꺼에요. 누구든 유명한 사람의 전기를 한번 읽어보세요.
   • Experience is overrated. When hiring, hire for aptitude, train for skills. Most really amazing or great things are done by people doing them for the first time.
   - 경험은 과대평가 되고 있습니다. 누군가를 고용할 때, 적성을 보고 뽑고, 기술은 가르치세요. 사람들이 하는 가장 놀랍거나 위대한 일들은 보통 처음 해보는 것들입니다.
   • A vacation + a disaster = an adventure.
   - 휴가 + 재난 = 모험
   • Buying tools: Start by buying the absolute cheapest tools you can find. Upgrade the ones you use a lot. If you wind up using some tool for a job, buy the very best you can afford.
   - 도구를 살때: 가장 싼 도구를 사서 시작하세요. 많이 쓰는 도구를 업그레이드 하세요. 만약 어떤 도구를 사용하여 일을 마무리했을 때, 당신이 감당할 수 있는 최상의 것을 사세요.
   • Learn how to take a 20-minute power nap without embarrassment.
   - 부끄러워 하지 않고 20분동안 Power Nap(에너지를 보충하는 짧은 낮잠) 자는 법을 익히세요.
   • Following your bliss is a recipe for paralysis if you don’t know what you are passionate about. A better motto for most youth is “master something, anything”. Through mastery of one thing, you can drift towards extensions of that mastery that bring you more joy, and eventually discover where your bliss is.
   - 어떤 것에 열정을 가지고 있는지 모른 체 단순히 행복만을 좇다보면 무기력해지게 됩니다. 많은 젊은이들을 위한 좀 더 좋은 모토는 ""뭔가를 마스터하세요. 어떤것이라도"" 입니다. 한 가지 숙달하는 것을 통해서 더 큰 기쁨을 주는 다른 것으로 확장해 갈 수 있고, 결국엔 행복이 어디에 있는지 알게 됩니다.
   • I’m positive that in 100 years much of what I take to be true today will be proved to be wrong, maybe even embarrassingly wrong, and I try really hard to identify what it is that I am wrong about today.
   - 나는 100년안에 오늘 내가 진실이라고 믿는 것의 대부분이 틀렸다고 밝혀지거나, 난처할 정도로 잘못한 것이 될 것임을 확신하고, 오늘 내가 틀린것이 무엇인지 확인하기 위해 열심히 노력합니다.
   • Over the long term, the future is decided by optimists. To be an optimist you don’t have to ignore all the many problems we create; you just have to imagine improving our capacity to solve problems.
   - 장기적으로 미래는 낙관론자 들에 의해 결정됩니다. 낙관론자가 되기 위해 우리가 만드는 많은 문제를 무시할 필요는 없습니다. 문제를 해결하는 능력을 향상시키도록 계속 꿈꿔야 합니다.
   • The universe is conspiring behind your back to make you a success. This will be much easier to do if you embrace this pronoia.
   - 온 우주가 당신을 성공시키기 위해 뒤에서 협력하고 있습니다. 이 낙관적 믿음(Pronoia)을 받아들이면, 훨씬 쉬워질겁니다.

   중간에 치실 이야기가 나와서 문득 생각난 것인데, 근래에 읽었던 어느 치과의사의 Q&A에 따르면 치실보다는 치간칫솔을 쓰는 편이 더 낫다고 하더군요. 치실은 치아에 움푹한 부분이 있을 때 그 안쪽을 닦기 어렵다고 합니다. 그 이야기를 듣고 L자형 치간칫솔을 사용하기 시작했는데, 치실보다 사용하기도 훨씬 편리하여 좋더군요.

   감사히 읽었습니다. 작은 커뮤니티에서 이야기를 나누다 번역에 보충이 될까 싶은 이야기들이 있어서 공유합니다.
   ""보여주세요. 뭔가를 계속 보여주세요. 성공한 사람이 말하길: 99%의 성공은 그저 보여주는 것입니다.""
   - 이건 해본다, 참여한다. 참석한다는 의미로 보는게 더 좋겠다 싶습니다.
   - https://tompeters.com/2008/06/eighty-percent-of-success-is-showing-up/
   황금율 보다는 (서양이 동양을 비하하는 의미로 느껴지는) 실버룰이 더 나아 보입니다.
   http://m.blog.daum.net/spaceandtime/5186

   아 저도 번역하면서 이게 약간 중의적이겠거니 하면서 그냥 넘겼는데, 해당 글을 보니 더 확실해 지네요.
   이거는 단어를 바꾸기는 뭐하니, 뒤에다 역주를 달아두겠습니다. 고맙습니다.
   [3] https://tompeters.com/2008/06/eighty-percent-of-success-is-showing-up/

   @John_Grib 님의 활용법 : https://twitter.com/John_Grib/status/1259837047868620801
   ""케빈 켈리의 68가지 조언을 읽어보았고, 너무 좋아서 fortune 명령어로 사용할 수 있게 vim 매크로로 작업해서 로컬 저장소에 넣어뒀다. 이제 터미널 열 때마다 케빈 켈리의 조언도 나온다.""
   https://johngrib.github.io/wiki/fortune-cmd/…

   음, 다시 해보니 그냥 zshrc 의 다른 설정들 때문에 느린것 같네요 ㅎㅎ;

   fortune 명령어 실행이 너무 느린 것 같습니다. 그냥 각 명언을 한 줄로 적어놓고, 빌트인 명령어로 처리하는게 빨라서 저는 아래와 같이 세팅해 두었습니다.
cat advices.txt | sort -R | head -1

   와 글 소개에 이어서... 활용법(!) 소개까지 감사합니다

   많은 인사이트를 주는 교훈들이네요! 번역 감사합니다!!

   도메인이 멋지네요

   안녕하세요. 번역 감사합니다.
   ""당신에 무엇에 열정적인지 모른다면, 행복을 따라가는 것이 무기력을 없애는 방법입니다"" 이 문장은 달리 옮겨야 할 듯 합니다. ""Following your bliss is a recipe for paralysis [..] A better motto for most youth is ...""를 보아서는, 단순히 행복을 좇는 건 무기력을 향한 길이며, 오히려 대부분 젊은이를 위한 나은 모토는 이거다.. 하는 뜻이 아닐지 싶습니다.

   앗 그게 맞네요. 수정해두겠습니다!

   번역 감사합니다 :)

   ""나 이제 68살이니까! 하고 싶은 조언 좀 할께"" 하고 시작하는 글인데 ㅎㅎ 내용이 정말 좋네요.
   KK의 생일은 4월 28일인데 아직 한국어 번역은 블로그에 링크가 없는거 같아서 제가 번역해봤습니다.
   추상적이고 함축적인 표현이 많아서 원문의 의미를 다 살리기가 힘들기도 하고, 제 실력이 딸려서 오역이 있을 수 있으니 참고 바랍니다.
   가능하시면 영문 원문도 꼭 한번 읽어보시길 추천드립니다.
   번역하면서도 정말 즐거웠습니다. 기억에 오래 남을거 같아요. Long Live Kevin!
   원글의 첫번째 댓글이 세스 고딘이라는 점도 재미나네요.
   ""이 리스트의 비선형성은 마법같다. 100년 후에 우리 세대의 많은 넌센스 들이 잊혀진다고 해도 KK와 그의 지혜를 기억할 것. 그는 다른 별에서 온게 아니라 미래에서 왔다.""
   [1] 황금률 https://ko.wikipedia.org/wiki/황금률
   [2] Never get involved in a land war in Asia. https://en.wiktionary.org/wiki/never_fight_a_land_war_in_Asia
"
"https://news.hada.io/topic?id=1943","pattern.css - CSS만으로 배경 패턴 채우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     pattern.css - CSS만으로 배경 패턴 채우기

   - JS 없이 CSS만으로 구현
   - S,M,L,XL 사이즈
   - 체크,Grid,Dot,Cross-Dot,직선,사선,Stripe,삼각형,Zigzag 패턴
   - 색상 마음대로 변경 가능
   - < 1KB minified & gzipped

   비슷한 배경 패턴 사이트들
   Hero Patterns (SVG) http://www.heropatterns.com/
   Subtle Patterns https://www.toptal.com/designers/subtlepatterns/
   Transparent Textures https://www.transparenttextures.com/
   CSS3 Patterns https://leaverou.github.io/css3patterns/
"
"https://news.hada.io/topic?id=1961","Rosetta - 초소형 i18n 지원 JS 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Rosetta - 초소형 i18n 지원 JS 라이브러리

   - 간단하고 쉬운 다국어화 지원 API
   - 디펜던시 포함 292바이트
   - rosetta.t('hello','ko')
   - 변환될 언어 값에는
   ㅤ→ {} 로 템플릿 파라미터 지원
   ㅤ→ JS함수로 문자열을 마음대로 조정 가능
"
"https://news.hada.io/topic?id=1995","Suitcase - macOS UI를 만들어주는 CLI도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Suitcase - macOS UI를 만들어주는 CLI도구

   - iOS Shorcut과 비슷한 기능을 macOS에서 구현시 사용
   - CLI 명령으로 SwiftUI 인터페이스를 동적생성, 사용자 입력 받아 다른 프로그램을 실행
   - 윈도우/버튼/메뉴/텍스트 필드 생성
   - .command 파일로 export 가능
   - 다크모드 지원
"
"https://news.hada.io/topic?id=1960","Crank.js - JSX와 함수기반 웹 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Crank.js - JSX와 함수기반 웹 프레임워크

   - React 처럼 JSX를 사용
   - 클래스,훅,프록시,템플릿 없이 순수 JavaScript 함수/Generator 함수/Promise 만 사용
   - React의 API 형태들이 아쉬워서 좀 더 JS스러운 Async 스타일로 개발
   ㅤ→ 컴포넌트에 직접 async/await 사용 가능

   ""Preact는 사이즈를 줄인 React, Inferno는 속도를 빠르게 한 React, Crank는 API형태를 개선한 React""
   왜 개발했는지에 대한 개발자의 상세한 설명 https://crank.js.org/blog/introducing-crank
   Promise/Observable 같이 비동기로 처리하는 로직에 대해서 React 팀은 ""Suspense 가 모든걸 해결할꺼야!"" 라고 했지만,
   Suspense 자체가 구현이 너무 이상해서 Crank 프레임워크를 개발하는 티핑포인트가 되었다고 하는군요.
   아직 초기단계라 복잡한 앱들 짜기엔 부족해 보입니다만, 눈여겨 봐야 할듯 싶네요.
   저는 아직 리액트 헤비유저는 아니긴 한데.. 리액트 코드를 볼 때 마다 약간 오버엔지니어링 되지 않았나? 싶긴 합니다.
"
"https://news.hada.io/topic?id=1947","우분투우분투 20.04 LTS

   - 커널 5.4
   - OEM 벤더 부팅 로고
   - 부팅 성능 개선
   - 새 다크 테마
   - 그놈 3.36
   - 성능 향상
   - 새 로그인 & 잠금 화면 디자인
   - snap 기반 우분투 소프트웨어
   - 그놈 쉘 성능 향상
   - ZFS 지원 개선
   - 화면 확대 배율 세분화(125/150/175%)

   그러나...
   리눅스용 GUI 응용프로그램 생태계가 괴사상태...
   브라우저/electron 기반 앱들로 버티고 있지만...
   리눅스 데스크탑은 점점...(먼산 )

   궁국의 GUI는 터미널 아니겠습니까(?)
   저도 업무용으로는 ubuntu가 제일 안정적이고 좋네요.

   리눅스 GUI 개발이 활발했던 적이 있긴한가요 ㅎㅎ 오히려 전 요즘 electron덕분에 살맛나요. 업무용으로 ubuntu가 제일 좋은 것 같아요.
"
"https://news.hada.io/topic?id=2016","뉴욕타임즈 CTO의 4년 회고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            뉴욕타임즈 CTO의 4년 회고

   - 재직기간중 온라인 구독자 1백만->5백만
   - 기술조직은 회사의 비즈니스 지표에 따라 평가되어야 한다
   - Growth 기반 사고와 실천을 NYT에 도입한게 가장 큰 일이라고 생각
   ㅤ→ Growth 관련 똑똑한 사람들을 모셔서 배움(사내 강의) : 앤드류첸(a16z),브라이언 발포(Reforge) 등
   ㅤ→ 마케팅 기술 플랫폼에 투자 : ActionIQ를 이용한 CDP(고객 데이터 플랫폼) 구축
   ㅤ→ Paywall 용 Meter 서비스 재개발하여 전환율을 높임
   ㅤ→ 가격변동 시험을 쉽게 할 수 있도록 개선
   - 데이터 인프라 스트럭처 개선: 하둡 및 자체 솔루션에서 순수 GCP 데이터 스택으로 (BigQuery)
   - 클라우드 도입: 4개 데이터센터에서 GKE기반으로. Kafka,GraphQL,React,Swift 등으로 대부분을 재개발
   - 문화:
   ㅤ→ 성과중심 문화를 만든게 전체 문화에 도움이 되었음.
   ㅤ→ 조인했을때 나보다 팀이 더 많이 알고 있었고, 그들에게 많이 배우고 협업해서, 팀이 잘하는 것을 하도록 도와준 것이 중요했음.
   - R&D 와 신규 서비스
   ㅤ→ R&D팀을 리빌딩 하고, 연구개발이 실제 비즈니스에 기여할수 있는 기반을 조성. 조직내 어디서나 혁신이 가능하도록.

   ""기술조직은 회사의 비즈니스 지표에 따라 평가되어야 한다"" 이 부분 원문내용을 조금 더 적어서 보충하면
   1. 생산성/퍼포먼스 지표들도 중간에는 쓰이겠지만, 끝내는 비즈니스 결과로 평가되는 수 밖에 없음 (예: 구독자 증가율 )
   2. 목표와 얼라인이 중요.
   회사의 목표와 상관 없이 기술적 성취를 위해서만 나가는 경우를 종종 봐서.. 많이 공감 됩니다.
"
"https://news.hada.io/topic?id=2058","MS Flight Simulator 2020 vs 실제 풍경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MS Flight Simulator 2020 vs 실제 풍경

   곧 출시 예정인 플라이트 시뮬레이터 2020으로 비행하는 풍경과 실제 비슷한 위치에서 찍은 사진을 비교
   몇 몇 사진은 실제와 구분이 안될 정도.
   스위스 루체른 호수, 프랑스 샹보르성, 뉴질랜드 나우루호에 산, 프랑스 아작시오, 러시아 모스크바, 뉴욕 자유의 여신상..

   몇몇 장면은 게임 화면이 더 나아보이기도 하군요.

   2페타 짜리 전세계 모델링 기대중입니다.
   특히나 올해 나올 XBox Series X 에서 네이티브 4K 120FPS 로 돌리면 정말 환상적일 듯
   MS Flight Simulator 미리보기 - 전 세계를 실제처럼 날아보기 https://news.hada.io/topic?id=676
   플라이트 시뮬레이터 공식 홈페이지 - https://www.xbox.com/ko-KR/games/microsoft-flight-simulator
   XBox Series X 공식 사양 공개 https://news.hada.io/topic?id=1730
"
"https://news.hada.io/topic?id=2022","deno v1.0.0-rc1 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          deno v1.0.0-rc1 릴리즈

   - A secure runtime for JavaScript and TypeScript
   - https://deno.land/
   - 5월 13일에 스테이블 출시 예정

   node를 뒤집어서 deno라니 작명센스가 참 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=2010","Tara - 무료 JIRA 대체도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tara - 무료 JIRA 대체도구

   - 스프린트 단위 개발에 적합한 이슈관리 툴
   - 요구사항과 Task를 한눈에 보고 빠른 Task 입력 가능
   - 주간,격주간,월간 반복 스프린트 관리
   - GitHub 연동 : 이슈,커밋,릴리즈,PR
   - 에픽,스토리,멀티스프린트,훌륭한 개인별 대시보드

   Slack 과 Y컴비네이터에서 투자를 받은 회사네요.
   작은 회사에서는 써보니 괜찮다는 평이 있는거 같은데, 과연 아틀라시안과 경쟁이 될수 있을지 기대해 봅니다.
   나중에 유료화를 어찌 할지는 모르겠지만 현재는 아예 Freemium 모델도 아니고 그냥 무료네요.
   ㅤ
   그외에 Jira/Trello 를 제외하고 종종 얘기되는 프로젝트/이슈 관리 도구들
   * ClubHouse https://clubhouse.io/ - 프로젝트관리+다양한 연동으로 현재 시장에서 가장 좋은 평을 받는 서비스. Write라는 Knowledge Base 도구를 베타시작 (위키 엔진과 비슷)
   * Phabricator https://phacility.com/ - 코드리뷰,이슈트래커,위키 등을 포함하는 협업도구. PHP로 작성되고 10년이나 되었다보니 여러 부분에서 다소 올드한 PHP스러움이 묻어납니다.
   * Basecamp https://basecamp.com/ - ToDo,위키,마일스톤 관리,파일 공유,메시징 기능등을 가진 프로젝트관리+내부 커뮤니케이션 툴. 원격근무회사들에 잘 어울리죠.
   * Treenga https://treenga.com/ - Task관리에만 집중한 도구
"
"https://news.hada.io/topic?id=1974","middy - AWS Lambda용 Node.jS 미들웨어 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  middy - AWS Lambda용 Node.jS 미들웨어 엔진

   - 람다 코드 작성시 비즈니스 로직 개발에만 집중하게 도와줌
   - 인증,권한관리,캐슁,데이터 유효성 검사,직렬화 등을 처리
   - Express/Fastify 등을 사용할 때와 비슷하게 람다 개발 가능
   - Terraform,CloudFormation,AWS SAM,Serverless Framework 등과 잘 연동
"
"https://news.hada.io/topic?id=1938","마지막 Python 2 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            마지막 Python 2 릴리즈

   - 11년 동안 릴리즈 되었던 Python 2의 지원 종료
   - 마지막 Python 2 버전은 2.7.18

   더 자세한 사항은 파이썬 메일링 리스트에서 볼 수 있습니다.
   https://mail.python.org/archives/list/…
"
"https://news.hada.io/topic?id=1940","TracePrivately - 애플&구글의 접촉추적API활용한 앱 샘플코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               TracePrivately - 애플&구글의 접촉추적API활용한 앱 샘플코드

   Covid-19 대응을 위해 공개된 Contact Tracing 스펙으로 Mock만들어서 개발한 샘플앱 오픈소스
   정부 기관 앱등에서 참고해서 활용가능하도록
   ㅤ→ iOS의 보안/개인정보보호 원칙에 맞게 구현
   ㅤ→ KeyServer 프로토타입 포함
   로컬라이즈 가능

   유튜브 영상을 보면 동작 단계를 쉽게 확인 가능 https://youtu.be/EAT3p-v2y9k
   I have COVID-19 버튼 누를때 진짜로 확진자인지 확인 가능하도록 하게만 만들면 될 듯
   ( 질본이 확인한다거나 등등 )
"
"https://news.hada.io/topic?id=2003","i18n Ally - 다국어화 개발지원 VS Code 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    i18n Ally - 다국어화 개발지원 VS Code 확장

   - i18n 작업을 쉽게
   - Vue,React,Angular,Flutter,Laravel,Rails 등 자동 지원
   - 마우스 호버시 다국어 보기 및 즉시 수정 팝업
   - 구글 자동번역 지원
   - 협업 가능한 에디터UI 와 리뷰시스템
   - 인라인 주석으로 각 언어 바로 보기
   - 미번역 문구 알림 기능
"
"https://news.hada.io/topic?id=2030","Firefox 76 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Firefox 76 릴리즈

   - Firefox Lockwise 로 저장한 암호를 더 안전하게
   ㅤ→ 정보 누출 사고 있는 웹사이트 경고 기능
   ㅤ→ 저장된 암호를 마스터 패스워드 또는 로그인 암호로 보호
   - PIP 에서 더블클릭으로 전체화면 전환 가능
   - 웹 VR/게임을 위한 Audio Worklet 지원 : Zoom 대화시 추가 설치 필요 없어짐
   - 향상된 그래픽 렌더링용 WebRender(Servo) 를 Win10 작은화면(
"
"https://news.hada.io/topic?id=2055","Async-GraphQL - Rust로 구현된 GraphQL 서버 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Async-GraphQL - Rust로 구현된 GraphQL 서버 라이브러리

   - async/await, Type-Safe, Subscription, Custom Scalar, Cursor Connections, Multipart Request
   ㅤ→ GraphQL의 최신 스펙들을 대부분 지원
   - Apollo Tracing/Federation 확장 지원
   - Actix-Web, Warp, Tide 웹 프페임워크들과 연동

   기존 Rust 기반 GraphQL 서버라이브러리 인 Juniper 랑 비교해서 더 많은 기능을 내장
   https://github.com/graphql-rust/juniper
   몇년된 Juniper와 달리 이 프로젝트는 2020.03.01에 첫 커밋해서 두달 조금 넘었는데..
   엄청난 속도로 개발중. 커밋 로그 보면 하루에 몇개씩 올리고 있네요.
"
"https://news.hada.io/topic?id=2049","Facebook의 테크스택 재구축 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Facebook의 테크스택 재구축 이야기

   간단한 PHP로 시작한 페이스북이 이번 새 디자인에 맞게 React + Relay(GraphQL) 로 바꿔온 과정과 교훈
   CSS,JS,Data,Navigation 각각에 빠른 앱을 위한 기본원칙 적용
   1. 필요한 자원만 최대한 빨리 전송
   2. 사용자 경험을 위한 엔지니어링 경험
   CSS
   - Atomic CSS로 CSS를 80%줄이고, 필요없는 CSS는 다운받지 않게 변경
   - 접근성을 위해 rems 사용, px → rems 수동 변환할때의 버그를 줄이기 위해 빌드도구에서 이를 자동 변환
   - Theming(다크모드)를 위해 CSS 변수 사용
   - 깜박임 방지를 위해 Inline SVG 사용(img 에 SVG파일 넣는 대신). 이를통해 색상 변경도 런타임에서 가능해짐
   JS
   - 3단계 Code-splitting 한 JS를 단계별로 전송
   ㅤTier 1. 로딩시 UI Skeleton을 빠르게 보이기 위한 베이직 레이아웃
   ㅤTier 2. 화면에 보이는 모든 콘텐츠를 완전히 렌더링 하기 위한 JS. 완전히 동작가능하고, Tier 2 이후에 코드가 로딩되더라도 화면 구성이 바뀌면 안됨
   ㅤTier 3. 화면 출력후 필요한 모든 것. 로깅코드, 실시간 업데이트 구독 등.
   - 500KB의 JS가 50KB Tier 1, 150KB Tier 2, 300KB Tier 3 로 분할 → 로딩 및 화면 표시가 매우 빨리 끝나는 효과
   - 분할 덕분에 A/B 테스트 시에도 양쪽에서 필요한 코드만 받게 설정이 가능해짐
   - Data-Driven React 앱을 만들도록 도와주는 Relay 의 기능을 이용, 어떤 데이터를 가져올 지에 따라 필요한 컴포넌트만 로딩하게 변경
   - Product별 JS Budget(예산) 제도를 도입. 성능 목표, 기술적 제약 및 제품 고려사항을 기반으로 예산을 설정. 시간이 흐른뒤에도 코드가 늘어나는 것을 방지.
   Data
   - Relay 를 이용, 모든 데이터 페칭을 GraphQL 로을 이용하도록 표준화
   - Realy 덕분에 페이지 요청단계부터 먼저 필요한 데이터를 병렬로 다운로드. 화면에 빠르게 보여주도록 가능
   - GraphQL 내부 확장인 @stream을 이용해서 뉴스피드 같은 걸 여러번의 라운드트립없이 한번의 쿼리로 데이터를 차례차례 보내게 함
   - @defer + React Suspense 로 당장 필요하지 않은 데이터는 나중에 로딩하도록
   Navigation
   - SPA 네비게이션시 새 페이지 로딩할때 자원 로딩 시간및 라운드트립을 줄이기 위해 Route Map을 구성
   - 필요할 때마다 최대한 빨리 Route Map에 Route 정보를 분할하여 로딩
   - 자원은 가능한 빨리 먼저 프리페칭 (호버시 프리페치, 마우스 다운시 코드와 데이터 가져오고, 클릭이 일어나면 React 상태 변경)
   - 네비게이션 간에 빈화면을 보여주는 것 대신, React Suspense 트랜지션을 활용하여 새 Route 가져오기 전에 기존 Route 를 지속해서 보여주기
   - EntryPoints ( 코드 분기 포인트 와 데이터 쿼리를 Wrapping 한 작은 파일) 를 이용해서 코드 및 데이터 다운로드를 병렬화

   페이스북 새 디자인의 CSS에서 알게된 것들 https://news.hada.io/topic?id=1819
   글도 같이 참고하시면 좋습니다.

   Relay - The production-ready GraphQL client for React https://relay.dev/
"
