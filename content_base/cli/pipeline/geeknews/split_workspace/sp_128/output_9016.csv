"https://news.hada.io/topic?id=14042","Aqua Voice – 음성으로 구동되는 텍스트 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Aqua Voice – 음성으로 구동되는 텍스트 편집기

     * 음성 인식과 자연어 명령을 결합한 음성 기반 문서 편집기
     * 사용자가 ""목록으로 만들어줘"" 또는 ""이 책의 86페이지에 인라인 인용을 추가해줘""와 같이 말하면 해당 명령을 실행
     * 음성 인식 소프트웨어는 여전히 불편하고 취약한 경험을 제공
          + 소프트웨어들은 정확성 경쟁을 하지만, 생성된 텍스트의 취약한 본질을 다루지 않음
          + 특수 명령을 배워야 하며, 키보드 대체 수단으로는 부족함
     * Aqua Voice의 해결 방식
          + Aqua는 사용자의 말을 그대로 받아 적거나, 명령을 실행하거나, 말한 것을 의도한 글로 세련되게 수정하는 기능 제공
          + 말을 더듬거나 문장을 여러 번 말하는 경우, Aqua는 최종 버전만을 선택하여 텍스트화
     * Aqua Voice의 비전과 기술
          + 더 자연스러운 음성 인식 경험과 협업적인 AI 작문 경험 제공을 목표
          + 실시간으로 모델과 지속적으로 연결되는 스트리밍 방식의 서비스 제공
          + 6개의 모델이 협력하여 의도에 따라 문서를 통역, 해석, 재작성
          + 실시간 정확성을 향상시키기 위해 MoE(Mixture of Experts) 트랜스크립션 사용

    Hacker News 의견

     * 멋짐! 몇 가지 피드백:
          + '1000 토큰'이라는 용어는 비기술 사용자에게는 의미가 없으며, 나에게도 거의 의미가 없다. 단순히 내가 얼마나 많은 단어를 말할 수 있는지 알려주면 됨
          + 그 세리프 폰트 LaTeX 오류율 표도 너무 지루하다. 사람들은 'macOS 딕테이션보다 최대 7배 적은 오류'와 같은 화려한 것을 원한다. 비교 표는 아니다.
          + '0.05 단어 오류율'도 사라져야 한다. 그것이 무엇을 의미하는지 설명하고 백분율을 사용해야 한다.
          + '이름, 단어, 사실, 숫자를 잊었나요? Aqua에게 채워달라고 요청하세요.' 이 기능을 끌 수 있으면 좋겠고, 적어도 내가 말하지 않은 내용이 문서에 삽입될 때 명확한 표시가 있었으면 한다. 내가 딕테이션을 할 때는 보통 내가 말한 단어만 페이지에 있길 원한다.
     * 다른 사람들이 말했듯이, 잘했다.
          + 이것은 전화나 시계에서 특히 좋을 것 같다. 키보드 경험이 덜 좋은 곳에서 메모를 할 수 있는 능력에 있어 진정한 게임 체인저 같다.
          + 코드 작성에 사용해 본 적이 있는가? 이것은 IDE/텍스트 편집기 플러그인으로 놀라울 정도로 훌륭할 수 있다.
          + AI로 후회스러운 일을 하지 않는 것을 보니 좋다. 우리가 보는 많은 응용 프로그램들이 끔찍하다. 만든 것은 뛰어나고 저주받은 초콜릿 공장 경험과는 거리가 멀다.
     * 나는 94/95년에 RSI 관련 부상을 입고 이후로 음성 인식을 사용해왔다. 나는 Windows에서 벗어날 수 있는 솔루션을 원한다. Firefox, Thunderbird, VS 코드에서 쉽게 딕테이션할 수 있는 솔루션을 원한다. 가장 중요한 것은 Nuance가 'Select-and-Say'라고 부르는 텍스트 편집/조작 기능이다. 사소한 편집, 새로운 딕테이션으로 문장 교체 등이 가능하고, 대부분의 속삭임 앱처럼 단순히 캡처된 딕테이션보다 훨씬 쉽게 음성을 사용할 수 있게 해준다. 이것을 할 수 있다면 나는 평생 고객이 될 것이다.
          + 다음으로 중요한 것은 문법에 대한 액션 루틴을 작성할 수 있는 능력이다. 나의 선호는 Python이다. 왜냐하면 chatGPT로 코드를 작성할 때 가장 쉬운 대상이기 때문이다. 하지만 다른 언어도 배울 수 있을 것이다(JavaScript 제외, 나는 그것을 싫어한다). 나는 Joel Gould의 'natPython' 패키지를 참고한다. 여기에 원래의 프레젠테이션과 사람들이 구축한 것이 있다.
          + 과거의 교훈이 있다. DragonDictate/NaturallySpeaking의 초기 단계에서, Baker가 Dragon Systems를 운영할 때, 그들은 정기적으로 직원들을 현지 음성 인식 사용자 그룹 회의에 참석시켜 우리에게 무엇이 효과가 있고 무엇이 실패했는지에 대해 이야기하게 했다. 그들은 우리 Crips를 보는 것이 어떤 다른 사용자 커뮤니티보다도 좋은 음성 인식 환경을 구축하는 방법에 대한 정보를 더 많이 줄 것이라는 것을 알았다. 우리는 다른 누구보다도 코너 케이스를 먼저 발견했다. 그들은 몇 가지 좋은 일을 했다. 예를 들어, 몇몇 음성 인식 사용자 그룹 회의를 공간과 직원 시간으로 지원했다.
          + Nuance는 그 교훈을 잊은 것 같다.
          + 어쨌든, 나는 오늘 일을 하려고 했지만, 당신의 발표는 그것을 머리에 쏘아버렸다. :-)
          + [사용후 추가] 정말 인상적이다. 나는 이것에 더 많은 시간을 할애해야 한다는 것이 분명하다. 나는 Naturally Speaking의 경험이 나의 시야를 제한했다는 것을 알 수 있고, 당신은 사용자 인터페이스가 될 수 있는 것에 대해 훨씬 더 넓은 시야를 가지고 있다.
     * 나는 데이터 입력을 위해 이와 같은 것을 원했다. 나는 종종 물건을 측정하면서 손이 가득 차고 메모를 해야 한다. 이것은 표 형식의 데이터를 출력/형식화할 수 있는가?
     * 이것은 정말 대단하다. 누군가 이것을 만들기를 바랐다:
          + 나는 이것에 대해 월 $10를 기꺼이 지불할 것이다. 하지만 정말 원하는 것은 다음 중 하나다:
               o Raycast 플러그인이나 데스크톱 앱으로 이것이 내 환경의 모든 편집 가능한 텍스트 영역과 상호 작용할 수 있게 해주는 것
               o 기존 텍스트/콘텍스트 + 오디오 스트림을 전달하고 전체 문서 업데이트의 심장 박동을 돌려받을 수 있는 API. 그러면 커뮤니티가 Obsidian/VSCode/브라우저 플러그인을 텍스트 입력의 거대한 영역에 대해 구축할 수 있다
          + 오늘 오후에 어쨌든 $10를 낼 것이고, 축하한다!
     * 딕테이션 소프트웨어는 의료 산업에서 매우 중요하다. 모든 의사가 이를 사용하며, 당신의 솔루션과 같은 것은 그들의 작업을 훨씬 더 효율적으로 만들 수 있다. 이 시장 부문을 탐색해 본 적이 있는가?
     * 이것은 놀랍다! 사용하는 것이 매우 만족스럽고, 전사 + 의도의 조합은 엄청난 잠재력을 가지고 있는 것 같다.
       환자 편지 등을 딕테이션하는 데 이것을 사용하고 싶다. 현지 모델/HIPAA 준수는 아직 멀었나?
     * 출시를 축하한다!
       나는 음성보다 텍스트로 작업하는 것이 훨씬 더 나은 동료 신경 다양성을 가진 사람으로서 이 아이디어를 절대적으로 사랑한다. 내 유일한 피드백은... 나는 이것을 더 많은 제어와 함께 실행하고 싶다. 나는 이미 LLM을 로컬에서 실행하고 있고(예: LM Studio), whisper와 같은 것도 실행할 수 있다. 오픈 소스화(또는 소스 코드를 사용할 수 있게 만드는 것)가 상업화 시도와 반대될 수 있다는 것을 이해한다. 그러나 Red Hat과 같은 몇 가지 옵션이 있을 수 있으며, 여기서는 비즈니스 사용에 대해 요금을 부과하고 개인 사용에 대해서는 로컬 실행을 무료로 허용할 수 있다.
       한편으로는 많은 사람들이 혜택을 받고 사용할 수 있는 분야에서 단단한 선두주자 이점을 가지고 있지만, 누군가가 여러 LLM 출력의 여러 계층을 함께 뭉개면 경쟁을 제공할 수 있을 것이다(그러한 프로젝트는 종종 오픈 소스이지만 때때로 덜 '정교하다'). 좋은 거래를 제공한다면 큰 성공의 기회가 있을 수 있다. 행운을 빈다!""
     * 이것은 멋지다, 아마도 구독할 것이다--단지 내 다른 구독을 줄여야 한다--최근에는 너무 많은 유혹적인 AI 제품들이 있다.
     * 명시적으로 말하지는 않지만, 클라우드로 어떤 데이터가 가는지 알고 싶다 - 나는 모든 것을 포함한 음성 녹음이라고 추정한다. 아니면 STT가 기기에서 이루어지는가? 또한 이 데이터에 대한 당신의 개인 정보/보존 정책은 무엇인가? 훌륭한 데모와 멋진 제품이다!
"
"https://news.hada.io/topic?id=14005","라디오, 그 작동 원리는 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          라디오, 그 작동 원리는 무엇인가?

안테나, 초헤테로다인 수신기, 신호 변조 방식에 대한 간단한 소개

     * 라디오 통신은 현대 전자 기기에서 중요한 역할을 하지만, 취미로 하는 사람들에게는 그 이론이 복잡함.
     * 빈도수와 진폭 변조(AM)와 주파수 변조(FM)의 차이는 알고 있지만, 좋은 안테나가 무엇인지, 수신기가 특정 주파수에 맞추고 다른 것을 무시하는 방법은 설명하기 어려움.
     * 이 글은 무선 전자에 대한 소개로, 전문 용어나 복잡한 수학 없이 설명하고자 함.
     * 전자 회로의 핵심 개념, 전자기장과 에너지 저장, 신호 전파 지연과 반사, DFT와 DCT를 이용한 주파수 도메인 분석 등 이전 글의 개념을 기반으로 함.

안테나 만들기

     * 전자 기기의 기본을 알고 있다면, 안테나에 대해 배우는 간단한 방법은 충전된 커패시터를 떼어내어 주변 공간으로 전기장이 퍼지게 하는 것을 상상하는 것임.
     * 전기장은 가상의 양전하 입자가 주변에 놓였을 때의 경로를 그려 시각화할 수 있음.
     * 변하지 않는 전기장은 라디오에 별로 도움이 되지 않지만, 안테나의 극 사이에서 전하를 왕복시키면, 빛의 속도로 전파되는 교대 전기장의 열을 만들어내며 커패시터의 정전장에서 되찾을 수 있던 에너지의 일부를 빼앗아 감.
     * 완벽하게 균일한 파형은 통신에 유용하지 않지만, 파동의 특성을 약간 변경하여 정보를 인코딩할 수 있음. 예를 들어, 진폭을 조정함.
     * 실제로 커패시터를 분해하여 신호원에 연결하면 아무것도 하지 않음. 커패시터의 용량이 크게 줄어들어 개방 회로와 유사해짐.
     * 이 문제의 가장 우아한 해결책은 반파장(""하프웨이브"") 다이폴 안테나임: 중앙에서 신호를 공급하는 두 개의 평행 막대, 각 막대는 정확히 ¼ 파장 길이임.
     * 반파장 다이폴은 신호 전파 지연을 고려할 때, 안테나 끝에 도달하는 모든 신호의 피크가 이전 진동의 반사와 완벽하게 동기화되어 서 있는 파동을 만들어냄.
     * 또 다른 장점은 급전점에서 일관되게 낮은 전압과 낮은 임피던스를 가짐. 이러한 특성으로 인해 안테나는 효율적이고 구동하기 쉬움.

신호 변조의 장단점

     * 안테나 설계에 비해 신호 변조는 간단함. 진폭 변조(AM), 주파수 변조(FM), 위상 변조(PM) 등이 있음.
     * 일단 캐리어 신호가 분리되면, 복조는 상대적으로 쉬움. AM의 경우, 사인파를 정류한 후 저역 통과 필터를 통해 오디오 주파수 봉투를 얻는 것만큼 간단할 수 있음.
     * 변조의 속도는 캐리어 신호의 주파수보다 훨씬 낮아야 함. 변조가 너무 빠르면 캐리어 파동을 파괴하고 광대역 잡음으로 만들어버림.
     * 모든 변조는 주파수 변조임: 낮은 주파수 신호 대역을 캐리어 주파수 근처의 비슷한 크기의 스펙트럼 조각으로 이동시키는 것임.

초헤테로다인 수신기 내부

     * 거의 모든 라디오 수신기의 기본 작동 원리는 증폭된 안테나 신호를 선택된 주파수의 사인파와 혼합(곱하기)하는 것임.
     * 일치하는 주파수가 입력 신호에 있을 경우, 유사한 곱셈은 그 신호 성분의 크기에 비례하는 직류 편향을 만들어냄.
     * 초헤테로다인 라디오 수신기의 기본 원리는 캐리어를 0이 아닌 중간 주파수로 이동시키는 것임.
     * 이 설계는 캐리어 주파수 근처의 반사를 제거하지만, _2 × f if_만큼 떨어진 무관한 신호를 실수로 반영할 위험이 있음. 이 문제는 IF를 현명하게 선택하거나, 안테나가 좁은 주파수 응답을 가지도록 설계하거나, 필요한 경우 혼합기 앞에 RF 저역 통과 필터를 두어 완화할 수 있음.

GN⁺의 의견

     * 이 기사는 초급 소프트웨어 엔지니어가 무선 통신의 기본 원리를 이해하는 데 도움이 될 수 있음. 특히 안테나의 작동 방식과 신호 변조의 개념을 단순화하여 설명함으로써, 복잡한 전자공학 이론에 대한 두려움을 줄일 수 있음.
     * 초헤테로다인 수신기의 설명은 라디오 수신기가 어떻게 특정 주파수를 선택하고 다른 주파수를 필터링하는지에 대한 통찰을 제공함. 이는 무선 통신 기술을 이해하는 데 중요한 부분임.
     * 비판적인 시각에서 볼 때, 기사는 실제 무선 통신 시스템 설계의 복잡성을 완전히 다루지 않음. 예를 들어, 실제 환경에서의 전파 간섭, 다중 경로 페이딩, 안테나 설계의 최적화와 같은 고급 주제들은 언급되지 않음.
     * 이 기사와 유사한 기능을 제공하는 오픈소스 프로젝트로는 GNU Radio가 있음. GNU Radio는 소프트웨어 정의 라디오(SDR)를 위한 툴킷을 제공하여, 사용자가 무선 통신 시스템을 쉽게 실험하고 개발할 수 있게 함.
     * 기술을 도입할 때 고려해야 할 사항으로는 실제 환경에서의 안테나 성능, 신호 변조의 효율성, 수신기의 선택성과 감도 등이 있음. 이 기술을 선택함으로써 얻는 이점은 무선 통신의 기본 원리에 대한 이해도를 높이고, 실제 무선 시스템 설계에 적용할 수 있는 지식을 얻는 것임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 기초적인 전자공학 개념부터 고급 주제까지 다루는 전자 과정을 온라인에서 발견했음.
          + 이 과정은 미국 해군의 전기공학 코스에서 유래했으며, 아날로그 회로에 초점을 맞추고 있음.
          + 해당 코스는 계산법 없이도 실제 아날로그 회로 설계에 적용 가능한 수준까지 설명함.
          + 이제는 찾을 수 없는 자료로, 오래된 펜티엄 PC의 1GB 디스크에 있을 수 있음.
     * 두 번째 댓글 요약:
          + Tim Hunkin이 1987년 TV 프로그램 ""The Secret Life of the Radio""의 리마스터 버전을 게시함.
          + 이 프로그램은 헤르츠와 마르코니의 스파크 갭과 코히어러 실험을 재현함.
     * 세 번째 댓글 요약:
          + 기사가 이상적인 안테나 길이가 신호의 파장의 절반인 이유에 대한 직관을 효과적으로 전달함.
          + 모든 파동 변조 방법을 주파수 변조로 재해석할 수 있다는 점에 매료됨.
     * 네 번째 댓글 요약:
          + 균일한 파형이 통신에 유용할 수 있음.
          + 이러한 파형을 '연속 파'라고 하며, 모스 부호로 통신하는 데 사용될 수 있음.
     * 다섯 번째 댓글 요약:
          + 안테나는 항상 이해하기 어려웠으나, 이 기사는 '떨어져 있는 캐패시터'에 대한 설명으로 마음을 사로잡음.
     * 여섯 번째 댓글 요약:
          + 기본 부품만으로 FM 라디오 수신기를 만들 수 있는지에 대한 질문.
     * 일곱 번째 댓글 요약:
          + UCLA에서 친구의 전기공학 졸업식에 참석했을 때, Qualcomm 창립자가 라디오 작동 원리를 이해하고자 박사 학위를 취득했다고 말함.
     * 여덟 번째 댓글 요약:
          + 라디오의 핵심은 여러 신호가 서로 간섭하지 않고 동시에 전송될 수 있는 방법을 찾는 것임.
          + 이를 위해 주파수 변조와 같은 기술을 사용하여 다양한 채널로 신호를 전송함.
          + 이러한 개념은 현대 라디오 통신의 기초를 이룸.
     * 아홉 번째 댓글 요약:
          + [삭제된 댓글]
     * 열 번째 댓글 요약:
          + 자석에 대한 언급.
"
"https://news.hada.io/topic?id=14077","시스템 프로그래머를 위한 가비지 컬렉션 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      시스템 프로그래머를 위한 가비지 컬렉션 (2023)

RCU 소개

     * 운영 체제는 매일 가장 성능에 민감한 프로그램 중 하나임.
     * 운영 체제는 항상 더 빠를 수 있으며, 커널과 드라이버 개발자들은 코드 최적화에 매진함.
     * 운영 체제는 대규모 동시성을 필요로 하며, 사용자 공간 프로세스와 스레드를 스케줄링하고, 자체 스레드와 하드웨어와 상호 작용하는 인터럽트 핸들러를 가짐.

RCU의 작동 원리

     * 자주 읽히지만 드물게 쓰이는 데이터(예: 현재 연결된 USB 장치)를 원자적으로 변경해야 할 때 RCU(Read, Copy, Update) 전략을 사용함.
     * 데이터를 읽고, 복사하여 변경한 다음, 포인터를 새 버전으로 원자적으로 업데이트함.
     * 이 방법은 사용하기 쉽고 대기 시간이 없으나 메모리 누수가 발생할 수 있음.

메모리 누수 문제 해결

     * 메모리 누수를 방지하기 위해, 업데이트 함수 내에서 오래된 데이터를 삭제하는 대신, 현재 읽고 있는 리더가 없을 때 삭제하도록 연기할 수 있음.
     * 리더가 데이터를 읽는 동안 작성자가 데이터 삭제를 기다리게 하여 안전하게 메모리를 관리함.

RCU의 실제 사용

     * RCU는 리눅스에서 수만 번 사용되며, Facebook의 Folly C++ 라이브러리와 Rust의 crossbeam-epoch에서도 사용됨.
     * RCU는 성능과 지연 시간 요구에 의해 동기화되며, 가비지 컬렉션과 유사한 메모리 관리 방식을 제공함.

가비지 컬렉션에 대한 오해

     * 가비지 컬렉션이 수동 메모리 관리보다 느리다는 통념은 세부 사항을 살펴보면 빠르게 무너짐.
     * free() 함수는 무료가 아니며, 메모리 할당자는 내부적으로 많은 상태를 유지해야 함.
     * 현대의 가비지 컬렉션은 이동 및 세대별 최적화를 제공하여 높은 처리량과 캐시 성능을 제공함.

제어의 환상

     * 개발자들은 때때로 실시간 시스템을 구축하고자 하지만, 실제로는 메모리 관리에 대한 완벽한 제어가 없음.
     * 운영 체제는 메모리 할당에 대한 개발자의 의도를 추측할 뿐이며, 때로는 단순한 포인터 접근이 디스크 I/O로 변할 수 있음.

결론

     * 모든 소프트웨어가 가비지 컬렉션에서 이득을 보는 것은 아니지만, 가비지 컬렉션은 유용한 도구이며, 시스템 프로그래머들 사이에서도 더 이상 두려워하지 않아야 함.

GN⁺의 의견

     * RCU는 멀티스레딩 환경에서 데이터 일관성을 유지하면서 동시성을 높이는 효과적인 기법임. 이는 고성능 컴퓨팅이나 실시간 시스템에서 매우 중요한 요소임.
     * 가비지 컬렉션에 대한 통념을 깨는 RCU의 예시는 개발자들에게 메모리 관리에 대한 새로운 관점을 제공함. 이는 특히 메모리 관리가 중요한 시스템 프로그래밍 분야에서 더욱 그러함.
     * RCU와 유사한 기능을 제공하는 다른 프로젝트로는 Java의 ConcurrentLinkedQueue나 .NET의 ConcurrentBag 등이 있으며, 이들도 락-프리(lock-free) 데이터 구조를 제공함.
     * RCU 기술을 도입할 때는 시스템의 요구 사항과 성능 목표를 고려해야 하며, 이 기술을 사용함으로써 얻는 이점과 잠재적인 비용을 이해해야 함.
     * 이 기사는 개발자들이 메모리 관리와 동시성에 대해 더 깊이 이해하고, 기존의 가정을 재고하며, 새로운 솔루션을 탐색하는 데 도움이 될 수 있음.

        Hacker News 의견

     * MPL과 MaPLe에 대한 혁신적인 병렬 가비지 컬렉션(GC) 기술을 확인하라는 제안
          + POPL 2024에서 뛰어난 논문상과 ACM SIGPLAN 2023년 논문상을 수상함
          + 주요 제안 사항은 다음과 같음:
               o 증명 가능한 효율적인 병렬 가비지 컬렉션 기반의 'disentanglement'
               o 증명 가능한 효율적인 자동 세분성 제어
     * RCU를 가비지 컬렉션의 동기로 사용하는 것은 흥미로움
          + 쓰기 작업자로부터 마지막 읽기 작업자에게 메모리 해제 책임을 이전하는 것이 의미 있음
          + 성능 향상을 위해 메모리 해제를 읽기 작업자가 아닌 전용 배치 프로세스로 이전하는 것을 고려해야 할 수도 있음
     * 메모리 관리에 대한 일반적인 오해
          + 프로그래머가 메모리 관리를 위한 최적의 일시 중지 시간을 알고 있다고 믿음
          + 게임과 암호화폐 거래 프로그램에서는 프로그래머가 실제로 최적의 일시 중지 시간을 알고 있을 수 있음
     * RCU 사용 사례는 설득력이 있지만, 다른 상황에서의 가비지 컬렉션 경험은 좋지 않음
          + 맞춤형 메모리 관리 솔루션이 최상의 성능을 제공할 수 있다는 주장으로 읽힘
          + free() 호출이 메모리를 OS에게 반환한다는 오해에 대한 논의
     * 가비지 컬렉션을 사용하면 새로운 할당이 캐시가 아닌 RAM에서 이루어짐
          + 성능에 큰 영향을 미칠 수 있음
          + Julia 언어에서의 벤치마크 예시 제공
     * 좋은 추적 가비지 컬렉션은 오래전에 수동 메모리 관리를 처리량 측면에서 능가함
          + 최근에는 대부분의 애플리케이션에 대해 지연 시간이 수용 가능한 수준임
          + 메모리 사용량이 주요 고려 사항임
     * 가비지 컬렉션과 잘 어울리는 것 중 하나는 async/await
          + Rust에서 async/await 사용은 메모리 관리와 결합하여 문제를 일으킴
     * RCU에 대한 동기 부여 후 일반적인 가비지 컬렉션에 대한 논의로 전환하는 것은 다소 놀라움
     * 소프트웨어 개발 시 두 가지 경우를 고려함
          + 핫 패스의 경우 맞춤형 할당자를 사용하고, 그 외의 경우에는 가비지 컬렉션이 편리함
     * RCU에서 일반적인 추적 가비지 컬렉션으로의 전환은 교묘한 전략으로 보임
          + 수동 메모리 관리는 단순히 malloc/free 호출 이상의 것을 포함함
     * 시스템 프로그래머가 언제 가비지 컬렉션될 수 있는지 식별하는 것이 어려움
     * Rust와 C++의 생명주기 관리 도구는 메모리 해제 자동화에 도움을 주지만, 복잡성을 단순화하지는 않음
"
"https://news.hada.io/topic?id=14033","HN 소개: 대학 수준의 수학 및 물리 과외에 저렴한 대안을 제공하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 소개: 대학 수준의 수학 및 물리 과외에 저렴한 대안을 제공하다

Explanations.app 소개

     * Explanations.app은 대학 수준의 수학 및 물리학 도움을 개인 과외의 1/10 비용으로 제공하는 웹사이트.
     * 학생이 질문을 입력하면, 선생님이 YouTube/KhanAcademy 스타일의 비디오로 답변을 그려주며, 이는 일주일 내내 비동기적으로 이루어짐.

창립자의 경험과 문제 인식

     * MIT에서 공부할 때, TA에게 5분간의 ""도움""을 받기 위해 40-60분을 기다려야 했으나, 실제로는 1-2시간이 필요했음.
     * 학교는 부정행위 방지를 위해 과거 문제의 해답 접근을 차단하고, 출석을 늘리기 위해 설명을 녹화하지 않으며, 해답 유출 방지를 위해 Office Hours를 1대1 형식으로 고집함.
     * 이러한 정책들은 동기적이고 대면 학습 경험을 장려하기 위한 좋은 의도에서 비롯되었으나, 실제로는 비효율적인 도움 자원과 뒤처진 학생들이 따라잡기 어려운 상황을 초래함.

Explanations.app의 영감과 목표

     * Explanations.app은 KhanAcademy와 YouTube에 크게 영감을 받음.
     * 대학 과목을 잘 가르치는 사람들은 종종 더 나은 기회를 가지고 있으며, YouTube에서도 수많은 조회수와 구독자를 가진 채널이 Patreon에서 소수의 유료 멤버만을 보유함.
     * 무료 자원이 많음에도 불구하고, 개인 과외는 매우 효과적이지만 비용이 많이 듬(e.g. 대학 수준 과목에 시간당 $100).
     * 많은 학생들이 주당 $10을 지불하여 소수의 선생님이 비디오를 만드는 시스템을 믿음. 이는 개인화되고 효과적이며 여전히 저렴함.

현재 상황

     * 현재 Explanations.app에는 Ben과 Esther라는 두 명의 MIT 졸업생 선생님이 있으며, 선형대수학과 전자기학과 같은 과목을 가르침.
     * 미국, 세르비아, 한국 출신의 Laquazia, Lidija, Chandra 등 3명의 학생이 이번 달에 가입함.
     * Explanations.app은 대학 수준의 수학과 물리학에 초점을 맞추고 있지만, 누구나 배우고/가르칠 수 있는 완전히 개방된 플랫폼임.

GN⁺의 의견

     * Explanations.app은 대학 수준의 교육을 저렴한 비용으로 제공하여 교육 격차를 줄이는 데 기여할 수 있음.
     * 창립자의 개인적인 경험은 학생들이 겪는 교육적 어려움에 대한 깊은 이해를 바탕으로 한 서비스 개발로 이어짐.
     * 이러한 플랫폼은 전통적인 대학 교육 시스템의 비효율성과 엄격함에 대한 대안을 제시할 수 있음.
     * 비동기식 온라인 학습 플랫폼은 학생들이 자신의 속도로 학습할 수 있는 유연성을 제공함.
     * 그러나 온라인 플랫폼은 대면 교육의 상호작용과 네트워킹 기회를 완전히 대체할 수 없으며, 이는 고려해야 할 한계점임.

        Hacker News 의견

     *

     학습 자원의 비효율성
          + 자원 부족: 많은 학습 자료가 제한되어 있고, 실시간 강의에 많은 시간을 할애하다 보니, 2시간의 Office Hours 동안 2명의 TA에게 도움을 요청하는 학생이 40명에 달하는 경우가 종종 있음.
          + 개인 경험: 한 사용자는 TA와 교수로 있을 때, 학생들이 Office Hours에 오도록 간청했지만, 거의 아무도 오지 않았다고 함. 학기 말에는 도움을 주지 않았다는 피드백을 받았고, 경력을 바꾸기 전까지 상당히 냉소적이 되었다고 함. 이 사용자의 경험에 따르면 문제는 교수진에 있지 않으며, 대학마다 다를 수 있음을 시사함.
     * UX 관련 댓글 몇 가지:
          + 사이트 사용성: 모바일 Firefox에서 데스크톱 뷰를 사용하지 않으면 사이트를 사용하기 불가능함. 예를 들어, 내용 프레임이 오른쪽에 작은 슬라이스로 나타남.
          + 로그인 문제: Google로 로그인했을 때 다른 이름이 나타나는 것은 혼란스러움.
          + 서버 정의: ""서버""가 무엇인지 명확하지 않음.
          + 검색 기능: ""electromagnetic""과 ""electro-magnetism""을 검색했지만 결과가 없었음. ""Electricity and Magnetism""은 비디오 중 하나임. 강력한 검색 기능이 필수적임.
          + 콘텐츠 관리: 몇몇 ""untitled"" 칠판이 있었고, 이를 제목 없이 허용하는 것은 좋지 않음. 비어 있는 것으로 보아 콘텐츠 관리/사용자 생성 콘텐츠 검증이 필요함.
          + 콘텐츠 구분: 대학생들이 대학 수준의 콘텐츠를 다른 콘텐츠와 구별할 수 있어야 함. 플랫폼이 개방적이라고 하지만, 어떻게 대학 수준의 콘텐츠만 쉽게 볼 수 있는지에 대한 설명이 필요함.
     * 53세의 사용자 경험:
          + 학습 준비: 30년 만에 대학으로 돌아가기 위해 선형대수학, 통계학, 미적분학을 다시 공부하고 있음. GA Tech의 온라인 MS CS 프로그램에 입학하기 전에 준비 중임.
          + ChatGPT-3.5와의 비교: 이미 ChatGPT-3.5에서 놀라운 무료 도움을 받았으며, 실수를 바로잡고 질문에 대한 답변을 즉시 해주는 등의 경험을 공유함.
          + 사이트에 대한 기대: 해당 사이트를 확인할 예정이며, AI 튜터와의 경쟁에 대해 궁금해함.
     * 미국의 교육 시스템에 대한 의견:
          + 교육 솔루션에 대한 호기심: 사용자는 미국의 초등-고등 교육 시스템이 근본적으로 파괴되었다고 믿으며, edtech(예: Khan Academy)에서 큰 이익을 볼 수 있다고 생각함.
          + MIT 경험: MIT 졸업생으로서, MIT에서의 경험에 대해 놀람을 표함. 모든 수업과 학과에서 이러한 경험을 했는지, 아니면 일부 수업에서만 겪었는지에 대한 질문을 함.
          + 교육 자원: 강의 외에도 소규모 그룹이 특정 질문을 할 수 있는 리사이테이션, 강의자와의 Office Hours, 과거 수강생들이 잘 정리해둔 강의 노트와 시험 자료들, 그리고 함께 공부할 수 있는 친구들/동료 학생들이 있었음.
          + MIT OpenCourseWare: MIT는 OpenCourseWare를 제공하여 완전한 강의를 온라인으로 제공함(비디오, 강의 노트, 강의 계획서, 추가 읽기 자료, 퀴즈 등).
          + edtech에 대한 열정: edtech에 대한 열정을 표현하면서도 현재 시스템이 작동하지 않는 이유에 대한 이해와 해결하려는 문제에 대한 명확한 인식이 필요함을 강조함.
     * 비디오 버전의 Stack Exchange에 대한 의문:
          + 튜터링 비교: 실제 튜터링은 비디오로는 이루어질 수 없다고 생각하는 사용자가 있음. 실제 세션에서는 튜터가 문제를 주고 옆에서 지켜보면서 학생이 막히거나 잘못된 접근을 할 때 즉시 지도를 해줄 수 있음.
          + 비디오 제품의 유용성: 비디오 제품이 일부 사람들에게는 유용할 수 있지만, 실제 튜터링과 같지는 않을 것이라는 의견을 제시함.
     * 비동기식 학습에 대한 우려:
          + 실시간 상호작용의 중요성: ChatGPT나 Claude와 같은 실시간 상호작용을 통해 학습하는 것을 선호하는 사용자가 있음. 질문에 대한 명확한 답변을 얻고, 실시간으로 다른 개념과 연관 지어 이해하는 것이 중요함.
          + 비디오의 질: 학생/학습자가 좋은 프롬프트를 제공하여 비디오가 혼란스러운 부분을 직접 해결할 수 있도록 하는 것이 중요함.
     * PatrickJMT의 비디오 추천:
          + 수학 학습 자료: Khan Academy와 비슷하지만, PatrickJMT의 콘텐츠는 대학 수준 이상의 수학을 다룸.
     * 학습 부채에 대한 인식 부족:
          + 학습 부채: 교육 분야에서 많은 사람들이 학생들 사이에서 발생하는 학습 부채를 이해하지 못함. 학기 초 몇 달 안에 이미 학생들의 성적이 연말에 어떨지와 매우 유사하게 나타남. 학기 초에 90%의 학생들이 뒤처지고 있다는 것을 알고 있어도, 그에 대해 충분히 대응하지 못함.
          + Filo 개발: 친구들과 함께 K12를 위한 Filo(askfilo.com)를 개발함. 실시간으로 온라인 수업에서 학생들을 실시간 튜터에게 연결함. AI/LLM 세계에서 매력적이지 않을 수 있지만, 도움을 줄 수 있는 학생들의 범위에 대해 자부심을 느낌.
     * 교육 기관에 대한 비판적인 의견:
          + 자원 부족: 학교가 스스로 학습 자원을 확보하지 못하게 하는 데 열심이었다는 비판적인 의견이 있음.
          + 학습 그룹의 중요성: 학습 그룹이 학업 성공에 매우 중요하다고 강조함.
          + MIT의 성공 요인: MIT가 우수한 교육을 제공함으로써가 아니라 명성을 유지함으로써 성공한다는 의견을 제시함.
          + 연구 중심 기관: MIT를 학교로 생각하기보다는 정부(및 산업) 연구소로 보아야 하며, 대부분의 교직원이 연구에 집중하고 있음을 지적함.
          + 교육의 질: MIT에서 훌륭한 교육을 받을 수도 있고, 그렇지 않을 수도 있음. 차이는 두뇌나 적성이 아니라 우연히 ""그루브""에 들어가느냐에 달려 있음.
     * 아이콘 사용에 대한 기술적 문제:
          + 아이콘 표시 문제: 구글 폰트(또는 유사한 것)를 아이콘으로 사용하고 있어, 엄격한 설정을 가진 사용자는 단순한 텍스트 라벨만 보게 됨.
"
"https://news.hada.io/topic?id=14028","CodenQuest - 듀오링고 for 코딩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CodenQuest - 듀오링고 for 코딩

     * 웹/앱에서 코딩을 배우는 도구
          + 오픈 기념으로 iOS 앱에서 잠시 라이프타임 무료 등록 가능
     * LeetCode 스타일 챌린지와 Duolingo 스타일 게이미피케이션을 결합
     * Python, Go, Rust, Kotlin, Ruby, Swift, TypeScript, Java 등 11개 언어 지원
     * 모바일에서도 코드 편집가능한 에디터 제공
     * 실시간 통계, 주간 리그, Streak 메커니즘, 친구간 경쟁 등 듀오링고와 비슷
     * 일일 도전을 통해서 퀘스트를 완료하고 스페셜 기능들 언락
"
"https://news.hada.io/topic?id=14035","연구 결과, 이틀 밤의 불면이 사람들을 수년 늙게 느끼게 할 수 있다고 밝혀져","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              연구 결과, 이틀 밤의 불면이 사람들을 수년 늙게 느끼게 할 수 있다고 밝혀져

연속된 두 밤의 깨어진 수면은 사람들이 몇 년은 더 늙은 느낌을 받게 한다는 연구 결과

     * 스웨덴의 심리학자들이 연구한 결과, 연속된 두 밤 동안 수면이 4시간으로 제한될 경우 평균 4년 이상 나이가 많게 느껴짐.
     * 반대로 9시간 동안 충분한 수면을 취하면 참가자들은 평균 3개월 젊게 느껴짐.
     * 수면이 단기적으로나 장기적으로 사람이 느끼는 나이에 큰 영향을 미침.

수면 부족이 건강에 미치는 영향

     * 수면 부족은 건강에 부정적인 영향을 미칠 수 있음. 불건강한 식습관을 장려하고, 운동을 줄이며, 사회 활동과 새로운 경험에 대한 의지를 감소시킬 수 있음.
     * 첫 번째 연구에서는 429명의 참가자가 지난 한 달 동안 잠을 잘 못 잔 밤의 횟수와 그들이 느끼는 나이에 대해 설문조사를 진행함.
     * 두 번째 연구에서는 186명의 참가자가 충분한 수면과 제한된 수면 후에 느끼는 나이를 조사함.

수면과 개인의 생활 패턴

     * 아침형 인간과 저녁형 인간의 수면 손실에 대한 반응에 차이가 있음.
     * 저녁형 인간은 충분한 수면을 취한 후에도 실제 나이보다 늙게 느낌.
     * 아침형 인간은 수면이 방해받을 때 느끼는 나이에 더 큰 영향을 받음.

수면의 중요성

     * 수면은 사람들이 젊게 느끼는 데 중요한 요소임.
     * 사람들이 젊게 느끼도록 만들면 새로운 경험에 더 열려 있고, 사회적으로 활동적이며, 신체적으로 활동적일 수 있음.

수면과 장기 건강

     * 부족하거나 질이 낮은 수면은 장기적인 건강에 영향을 미치는 생활 습관에 중요함.
     * 수면은 즉각적인 건강 효과를 나타내며, 다른 24시간 생활 습관에 영향을 줌.

운동과 수면의 관계

     * 10년간의 연구에서 일주일에 2~3회 꾸준히 운동하는 사람들이 불면증을 겪을 확률이 낮고, 권장되는 6~9시간의 수면을 취할 가능성이 더 높음을 발견함.
     * 운동 습관과 수면의 질, 낮 동안의 졸음에 대한 설문조사를 분석함.

GN⁺의 의견

     * 이 연구는 수면의 질이 단순히 피로감을 넘어서 사람들이 자신을 인식하는 방식과 건강한 생활 습관에까지 영향을 미칠 수 있음을 보여줌.
     * 수면 부족이 인지 능력, 기분, 신체 건강에 미치는 영향을 고려할 때, 이 연구는 수면의 중요성을 강조하고, 충분한 수면을 취하는 것의 중요성을 일깨워줌.
     * 연구 결과가 실제로 적용되기 위해서는 더 많은 연령대와 다양한 배경을 가진 사람들을 대상으로 한 추가 연구가 필요함.
     * 수면 부족이 장기적으로 건강에 미치는 영향에 대한 연구가 필요함. 이는 수면 관리 및 개선을 위한 전략 개발에 도움이 될 수 있음.
     * 수면의 질을 개선하기 위한 다양한 기술과 제품이 시장에 존재함. 예를 들어, 스마트 매트리스, 수면 추적기, 수면을 돕는 앱 등이 있으며, 이러한 도구들을 활용하여 수면의 질을 향상시킬 수 있음.

        Hacker News 의견

     * 수면무호흡은 삶의 질을 크게 저하시킴. CPAP 치료를 받더라도 마스크가 이동하거나 다른 부작용으로 인해 수면의 질이 떨어질 수 있지만, 치료받지 않은 무호흡보다는 훨씬 낫다. 중등도 무호흡이라도 잠에서 깨어날 때 더 피곤함을 느낄 정도.
     * 7개월 된 아기의 아빠로서 실제 나이보다 100년은 더 늙은 것 같은 느낌.
     * 북동부 겨울에 '늙은' 느낌을 받았으나, 실내 공기 질이 문제임을 깨닫고 ERV(실외 공기를 실내로 유입시키는 장치)를 설치한 후 상태가 많이 나아짐. 실내 공기 질에 민감하거나 그 영향을 더 잘 인지하는 것 같음.
     * 운동 시 입을 다물고 호흡하는 것이 수면에 긍정적인 영향을 미침. 코의 점액을 비우고 호흡이 훨씬 나아짐으로써 수면의 질이 크게 향상됨.
     * 30대 후반에 아이를 가지면 수면 부족으로 인한 회복이 힘들어 매우 힘든 경험. 생물학적으로 보면 20대 초반에 아이를 가지는 것이 더 나을 수 있음.
     * 거친 환경에서의 수면은 인지 기능을 빠르게 저하시킬 수 있음. 홈리스 상태는 홈리스 상태에서 벗어나는 능력을 해칠 수 있음.
     * 수면 부족은 단순히 나이 든 느낌을 주는 것 이상임. 인슐린 반응 감소, 당뇨병과 수면 사이의 직접적인 관계, 코티솔 수치 증가로 다음 날 수면에 해를 끼칠 수 있음. 기억력과 반응 시간도 측정 가능할 정도로 나빠짐.
     * 아내가 딸을 낳은 후 처음 두 달 동안 거의 좀비 상태였음. 넘어지는 일이 잦았고, 수면 부족이 자신에게 미칠 영향을 전혀 예상하지 못했음.
     * 임의적인 만성 불면증을 겪고 있어 재택근무가 필요함. 낮잠을 자면 불면증이 해소되지만, 그렇지 않으면 2일 후에 상태가 악화됨. 사무실에서는 주말에만 회복할 수 있어 월요일과 화요일만 생산적임.
     * 알람 시계가 아닌 자연스러운 기상 시간에 일어나는 것을 몸이 하루는 견딜 수 있음. 두 번째 날에는 완전히 지쳐서 생각을 제대로 할 수 없음. 사회가 아닌 몸이 원할 때 잠을 자는 것이 가장 효과적임.
"
"https://news.hada.io/topic?id=13955","애플의 M시리즈 칩에서 새로운 패치 불가능한 취약성은 암호화 키의 추출을 허용한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플의 M시리즈 칩에서 새로운 패치 불가능한 취약성은 암호화 키의 추출을 허용한다

   • 새로운 학술 연구 논문은 ""GoFetch""라고 불리는 애플의 M-시리즈 칩에서 심각한 취약성을 보여주는데, 이것은 공격자들이 특정 조건에서 맥에서 비밀 암호화 키를 추출할 수 있게 한다.

   • 취약점은 데이터를 미리 예측하고 검색하여 처리 속도를 향상시키는 것을 목표로 하는 애플 프로세서의 기능인 데이터 메모리 종속 프리페처(DMP)에 있다.

   • 이 논문은 DMP가 처리되는 데이터에 관계없이 작업에 동일한 시간이 걸리도록 함으로써 측면 채널 공격으로부터 보호하도록 설계된 상시 프로그래밍 모델의 보안에 상당한 위협이 된다는 점을 강조한다.

   • 연구팀은 애플 실리콘의 DMP가 메모리 액세스 패턴이 드러나지 않도록 프로그램을 설계해도 정보를 유출할 수 있어 공격자들이 이 취약점을 악용해 보안 소프트웨어에서 암호화 키를 추출할 수 있다는 것을 입증했다.

   • 이 공격은 OpenSSL 디피-헬만 키 교환 및 Go RSA 복호화와 같은 전통적인 방법과 크리스탈S-카이버 및 크리스탈S-딜리튬과 같은 양자 후 암호화 방법을 포함하여 인기 있는 암호화 알고리즘에 영향을 미친다.

   암호화에 특화된 하드웨어의 경우 암호학적(수학적)인 취약점 말고도 특정 시간 내 소모된 전력량이나 암/복호화에 소요된 시간을 분석함으로써 키의 길이를 유추해내는 등의 간접적인 공격(본문에서 이야기하는 측면 채널 공격, side-channel attack)에 취약했습니다. 이렇게 되면 실제 기대했던 computational time보다 현저히 적은 노력으로 키를 찾을 수 있게 됩니다. 이러한 공격 유형은 오래전에 알려져 이미 대부분의 암호화 관련 모듈(hw/sw)에 적용되었지만, M1 및 M2칩은 이를 무시하고 만들어져 여기에 취약하다는 것이군요.

   실제로 암호화 키가 추출되기까지는 여전히 아주 오랜 시간이 걸리겠지만, 기대했던 만큼의 계산 시간을 충족하지 못 하게 만드는것은 설계의 결함이라고 볼 수 있다 가 글의 논지인것으로 보입니다.
"
"https://news.hada.io/topic?id=14025","세가 새턴 아키텍처 – 실용적 분석 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       세가 새턴 아키텍처 – 실용적 분석 (2021)

     * 지원 이미지
          + 모델
               o 일본어
               o 국제적인
          + 마더보드
               o 원본
               o 표시됨
          + 다이어그램
     * 간단한 소개
          + 세가는 메가 드라이브로 큰 성공을 거두었으며, 개발자들이 3D 게임을 즉시 개발할 필요는 없음.
          + 하지만 개발자들이 원한다면, 세가는 하드웨어 일부를 조정하여 폴리곤 그리기를 가능하게 함.
     * CPU
          + 세가는 차세대 게임을 위해 새로운 벤더를 선택해야 했으며, 최종적으로 히타치 슈퍼H 또는 'SH'를 선택함.
          + 이 CPU는 RISC CPU의 기본 원칙을 따르는 SuperH ISA라는 새로운 명령 세트를 특징으로 함.
     * 세가는 만족하지 않음
          + 세가는 최종 제품에 만족하지 않았으며, 히타치는 세가의 요구 사항에 맞춰 두 번째 리비전을 제작하여 SH-2라는 새로운 CPU를 만듦.
     * 최종 제품
          + 세가 새턴은 두 개의 히타치 SH-2 CPU를 탑재하고 있으며, 이들은 마스터-슬레이브 상태로 배치됨.
     * 메모리 선택의 분열
          + 세가 새턴은 총 2 MB의 RAM을 일반적인 용도로 사용하며, 이는 두 개의 다른 블록으로 나뉨.
     * 세 번째 프로세서 (그리고 계속)
          + 두 개의 SH-2 CPU만으로는 부족했기 때문에, 세가는 추가적인 코프로세서인 Saturn Control Unit 또는 'SCU'를 탑재함.
     * 그래픽
          + 세가 새턴은 두 개의 독자적인 GPU를 포함하고 있으며, 각각 다른 목적으로 동시에 작동함.
     * 세가의 제안
          + Video Display Processor 1 (VDP1)은 기하학적 변환을 적용한 스프라이트를 그리는 칩임.
          + Video Display Processor 2 (VDP2)는 변환을 적용한 대형 평면을 렌더링하는 데 특화됨.
     * 문제 정의
          + 그래픽 하위 시스템의 아키텍처는 매우 복잡하므로, 필요에 따라 다르게 해석됨.
     * 강력한 2D 콘솔로서
          + 세가 새턴의 2D 그래픽 그리기 능력은 메가 드라이브나 SNES에 비해 매우 뛰어남.
     * 도전적인 3D 콘솔로서
          + 세가 새턴은 여덟 개의 프로세서를 활용할 수 있었지만, 실제로는 프로그래머들이 콘솔의 기능을 짧은 시간 내에 마스터할 수 있느냐에 달려 있었음.
     * 새로운 디자인
          + 이 콘솔을 위해 재디자인된 몇몇 캐릭터 예시가 있으며, 모델은 상호작용이 가능함.
     * 가시성 문제 소개
          + 3D 폴리곤이 2D 공간으로 투영될 때, 카메라 위치에서 어떤 폴리곤이 보이고 어떤 폴리곤이 가려져 있는지 결정하는 것이 중요함.
     * 투명도 문제
          + 세가 새턴은 반투명 그래픽을 그릴 수 있지만, 두 VDP가 완벽하게 협조하지는 않아 이 효과가 제대로 작동하지 않을 수 있음.
     * 오디오
          + 사운드 하위 시스템은 여러 부분으로 구성되어 있으며, Motorola 68EC000과 Saturn Custom Sound Processor (SCSP)를 포함함.
     * 기회
          + 새로운 오디오 기능은 스튜디오가 사운드트랙을 직접 녹음하고 게임에 번들로 제공할 수 있게 함.
     * 운영 체제
          + 콘솔이 켜지면 System Management & Peripheral Control (SMPC)이 가장 먼저 시작되며, 이는 초기 하드웨어 설정을 담당함.
     * 대화형 쉘
          + 게임을 하지 않을 때, 세가 새턴은 'Multiplayer'라는 음악 플레이어를 포함하고 있음.
     * BIOS 없음?
          + 세가 새턴의 ROM은 'IPL'로 불리며, 주로 게임을 부트스트랩하고 쉘을 실행하는 역할을 함.
     * 게임
          + 공식 세가 새턴 게임은 2x CD-ROM 리더에서 로드됨.
     * 컴팩트 디스크 (CD)
          + CD는 정보를 저장하기 위해 피트와 랜드를 각인하는 광학 매체임.
     * 개발
          + 세가는 처음에는 완전한 소프트웨어 라이브러리와 개발 도구를 제공하지 않았으나, 나중에는 SDK, 하드웨어 키트 및 일부 라이브러리를 출시함.
     * I/O
          + 주변 장치 관리와 실시간 시계는 앞서 언급한 System Management & Peripheral Control (SMPC)에 의해 제공됨.
     * 확장 방법
          + 이 콘솔은 몇 가지 외부 커넥터와 인터페이스를 포함하고 있으며, 이들은 몇 가지 용도로만 사용됨.
     * 안티-파이러시 & 홈브루
          + CD 복제의 용이성에 대응하기 위해, 세가 새턴은 게임 배포를 제어하기 위한 복사 방지 시스템을 추가함.
     * 패배
          + 복사 방지를 비활성화하는 전통적인 방법은 모드 칩을 설치하거나, 핫 스와핑을 통해 정품 디스크와 불법 복제 디스크를 교체하는 것임.
     * 마무리
          + 세가 새턴을 이해하기 위해 구입한 일본 세가 새턴의 사진과 함께 기사가 마무리됨.

GN⁺의 의견

     * 세가 새턴은 당시로서는 혁신적인 기능을 많이 탑재한 콘솔이었으나, 복잡한 아키텍처와 개발자 친화적이지 않은 환경으로 인해 풀 포텐셜을 발휘하기 어려웠음.
     * 이 기사는 세가 새턴의 기술적인 면모를 상세히 설명하고 있어, 게임 콘솔의 역사와 하드웨어에 관심 있는 사람들에게 흥미로운 정보를 제공함.
     * 세가 새턴의 멀티 CPU 설계는 오늘날 멀티 코어 프로세서의 선구자로 볼 수 있으며, 현대 게임 콘솔에서도 비슷한 병렬 처리 방식이 사용되고 있음.
     * 세가 새턴의 복잡한 그래픽 시스템은 현대의 GPU와 비교할 때 매우 원시적이지만, 당시에는 3D 그래픽을 구현하기 위한 중요한 발전 단계였음.
     * 현재 홈브루 커뮤니티는 세가 새턴과 같은 레트로 콘솔을 위한 새로운 게임과 애플리케이션을 개발하여, 이러한 오래된 기기들이 여전히 살아있고 활발하게 사용될 수 있도록 하고 있음.

        Hacker News 의견

     * 세가 새턴의 디자인과 개발 배경
          + 기사는 세가 새턴의 디자인이 예상외로 많은 칩을 사용했다고 서술함.
          + 일본과 미국 팀 간의 협력 부재와 우위 다툼이 있었음. 일본 팀은 2D 콘솔을, 미국 팀은 3D 콘솔을 개발 중이었음.
          + 일본 팀이 우위를 점할 무렵, PSX(플레이스테이션)이 등장하여 두 디자인이 합쳐짐.
          + 결과적으로 2D 콘솔에 미완성 3D 콘솔의 부품이 혼합된 형태가 됨.
          + 기술 애호가와 개발 후기를 좋아하는 사람에게는 흥미로운 내용이지만, 깔끔한 디자인을 선호하는 사람에게는 불만족스러움.
          + 당시 대중 게이머들에게는 ""거실에서 즐기는 아케이드""가 중요했으며, 세가가 어느 한쪽에 집중하지 못한 것이 도움이 되지 않음.
          + 위키피디아 기사에 더 자세한 정보가 있음.
     * 세가 새턴의 3D 게임과 그 특징
          + 세가 새턴의 VDP1은 사각형 기반의 프리미티브를 사용하여 디자인됨.
          + 이로 인해 세가 새턴의 3D 게임들은 PS1 게임들에 비해 더 상자 모양의 외형을 가짐.
          + 예를 들어, 세가 새턴과 PS1에서의 '레지던트 이블'을 비교하면 차이를 볼 수 있음.
          + 세가 새턴 게임들은 90년대 3D 게임에서 독특한 미학을 가짐.
          + 또한, 세가 새턴의 에뮬레이션은 다른 플랫폼에 비해 많이 뒤쳐져 있음.
     * 세가 새턴의 복잡한 하드웨어 구조
          + 세가 새턴은 복잡한 하드웨어 구조를 가짐.
          + 여러 CPU와 전용 프로세서를 사용하여 게임 작업을 분산시키는 것은 비용 대비 효과적이지만, 이것이 세가 새턴의 판매 부진에 기여했을 것임.
          + 많은 사람들이 하드웨어를 완전히 활용하기 위해 필요한 학습에 대한 투자를 정당화하기 어려웠다고 말함.
          + 사이드 마이어의 말을 인용하며, 플레이어가 재미를 느껴야지 게임 개발자가 재미를 느끼는 것이 아니라고 지적함.
     * 세가 새턴의 숨겨진 명작들
          + 세가 새턴에는 '판저 드라군 사가', '샤이닝 포스 III', '버닝 레인저스', '드래곤 포스 I & II' 등과 같은 명작들이 많았지만, 이후에 이식되거나 리메이크되지 않음.
     * 세가 새턴에 대한 기술적 분석
          + 세가 새턴에 대한 기술적 분석과 해킹에 대한 좋아하는 유튜브 영상 링크 공유.
     * 콘솔의 다양성
          + 콘솔의 다양성이 PC 독점 이전의 홈 컴퓨터의 다양성을 상기시킴.
          + 일부 OEM과 출판사들이 오늘날까지 살아남음.
          + 인포그래픽을 보고 싶은 마음에 직접 만들 수도 있음.
     * 세가 대 소니의 경쟁과 마케팅
          + 결국 PR과 소니의 재정적 우위가 세가를 이김.
          + 세가 새턴의 실패는 게임 라이브러리 때문이 아니라고 생각함.
          + 개발자들은 플레이스테이션 2와 같은 복잡한 시스템에 문제 없이 대응했음.
          + 세가에 대한 소비자의 호감도 있었지만, 소니와 MS 시스템의 신뢰성 문제가 장기적인 콘솔 건강에 큰 영향을 주지 않았음.
          + 세가 CD는 미국에서는 실패하지 않았으며, 32X는 큰 실수였지만 대중 소비자 수준에서 세가 새턴을 망가뜨리지는 않았음.
          + 미국에서는 마케팅이 잘된 제품은 무엇이든 팔림.
          + 세가 새턴의 마케팅 실패와 출시 시 좋은 소닉 게임이 없었던 것이 세가 새턴의 실패 원인임.
     * 로드리고 코페티의 작업에 대한 평가
          + 로드리고 코페티의 작업을 사랑하며, 이전에 인용하여 사용함.
          + 그러나 항상 더 많은 것을 요구하는 것이 불공평하게 느껴짐.
     * 세가의 어색한 아키텍처에 대한 비디오
          + 맷KC가 최근에 32X에 대한 비디오를 제작함.
          + 32X는 제네시스 카트리지 슬롯에 연결되어 별도의 32비트 게임을 할 수 있게 해주는 모듈임.
          + 본질적으로 2개의 콘솔이 협력하여 비디오 이미지를 출력함.
          + 자신의 비디오 케이블을 연결해보고 한 기계의 비디오 신호를 차단하면 다른 기계에서 렌더링된 출력만 얻을 수 있음을 발견함.
     * 세가 새턴의 신뢰성
          + 1996년부터 소유한 오리지널 세가 새턴이 여전히 완벽하게 작동함.
          + 복잡한 하드웨어 구조에도 불구하고, 오래된 콘솔의 신뢰성을 높이 평가함.
          + 최신 콘솔들은 여러 문제로 고장나는 경우가 많음.
"
"https://news.hada.io/topic?id=13967","사용자들, 동의 없이 Glassdoor가 사용자 프로필에 실명을 추가했다고 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              사용자들, 동의 없이 Glassdoor가 사용자 프로필에 실명을 추가했다고 주장

사용자들, 글래스도어가 동의 없이 실명을 프로필에 추가했다고 주장

     * 글래스도어 사용자들이 회사가 사용자들의 동의 없이 그들의 실명을 프로필에 추가했다고 주장함.
     * 한 사용자는 글래스도어 고객 지원과의 이메일 교환 후 이름과 거주 도시가 프로필에 추가되었다고 블로그에 글을 남김.
     * 이 사용자는 글래스도어가 이메일에서 이름을 얻어 프로필에 추가했으며, 이에 반복적으로 항의했지만 글래스도어는 이름 추가가 ""필수""라고 주장함.

글래스도어의 익명성 정책에 대한 우려

     * 글래스도어는 사용자가 익명으로 가입하여 회사에 대한 리뷰를 남길 수 있게 함.
     * 2021년 글래스도어는 Fishbowl을 인수했으며, 이에 따라 모든 글래스도어 사용자를 Fishbowl 계정에 등록함으로써 서비스 약관 변경이 필요해짐.
     * 디지털 권리 단체인 Electronic Frontier Foundation의 변호사는 글래스도어가 사용자의 익명성을 법정에서 방어해온 ""산업 리더""라고 언급함.

사용자 프로필에 부정확한 데이터 추가

     * 사용자 중 한 명은 글래스도어가 동의 없이 개인 데이터를 프로필에 추가했다고 주장하며, 이는 ""신뢰 위반""이라고 설명함.
     * 글래스도어는 웹사이트에서 사용자의 신원, 기여의 진실성 또는 고용 상태를 완전히 확인할 수 없다고 인정함.
     * 글래스도어 대변인은 TechCrunch의 구체적인 질문에 대해 답변하지 않았으며, 회사는 사용자 데이터에 대한 법 집행 요청 수를 공개하는 투명성 보고서를 발행하지 않음.

GN⁺의 의견

     * 글래스도어의 이러한 행위는 사용자의 신뢰를 저버리는 것으로, 개인 정보 보호와 익명성을 중시하는 현대 사회에서 큰 논란이 될 수 있음.
     * 데이터 유출이나 법적 요구로 인해 사용자의 익명성이 위협받을 수 있으며, 이는 글래스도어의 신뢰성에 타격을 줄 수 있음.
     * 이와 유사한 기능을 제공하는 다른 서비스로는 Indeed의 회사 리뷰 섹션이나 LinkedIn의 익명 피드백 기능 등이 있으나, 글래스도어만큼의 익명성을 제공하지는 않음.
     * 기술 도입 시 사용자 데이터의 보호와 익명성 유지가 중요하며, 이를 위한 명확한 정책과 투명한 운영이 필요함.
     * 글래스도어의 사례는 다른 기술 회사들에게 사용자 데이터를 취급할 때의 법적, 윤리적 책임에 대해 중요한 사례로 작용할 수 있음.

        Hacker News 의견

     * Glassdoor 사용자 익명성 해제 논란
          + Glassdoor가 사용자의 동의 없이 실명을 프로필에 추가한 사건에 대한 해커뉴스 댓글 모음.
          + 해당 사건은 2024년 3월에 발생하였으며, 여러 토론 스레드에서 다양한 의견이 제시됨.
     * 온라인 평판 관리자의 의견
          + Glassdoor는 유료 서비스로, 기업이 구독료를 지불하면 부정적인 리뷰를 제거할 수 있음.
          + 많은 사람들이 Glassdoor를 편향되지 않은 정보원으로 오해하지만, 실제로는 기업의 지불을 통해 운영됨.
     * Glassdoor 모바일 웹 사용 경험
          + 모바일 웹에서 로그인 시 '커뮤니티' 가입을 강요받았으나, 계정 설정 페이지로 직접 이동하여 계정을 삭제할 수 있음.
          + 데이터 삭제 요청은 별도의 링크를 통해 가능함.
     * 급여 정보의 불균형 문제
          + 고용주는 거의 완벽한 보상 데이터를 가지고 있으며, 익명성을 중시하는 문화로 인해 우리의 데이터는 오류가 있음.
          + 많은 기업들이 Equifax를 통해 이전 고용 급여 데이터를 구매할 수 있음.
          + Pave와 같은 회사들은 HRIS, 급여, 주식 관리 시스템과 통합하여 실시간 보상 데이터 네트워크를 제공함.
     * Glassdoor의 신뢰성 문제
          + 사용자의 피드백이 익명이라는 신뢰가 있어야 Glassdoor가 유용함.
          + 실명 공개로 인해 피해를 입은 사람이 없기를 바람.
     * 리뷰 사이트의 비즈니스 모델
          + Yelp, Glassdoor, Trustpilot 등의 리뷰 사이트들이 나쁜 리뷰를 내리고 좋은 리뷰를 홍보하는 데 돈을 받는 것이 주요 비즈니스 모델임.
          + 리뷰 사이트에 대한 신뢰가 낮아지고 있으며, AI 발전으로 진짜 같은 가짜 리뷰도 증가할 것임.
     * 소규모 회사 창립자의 경험
          + 16개의 리뷰 중 1개만 진짜이며, 나머지는 가짜로 의심됨.
          + Glassdoor가 사기로 보임.
     * 급여 정보의 정확성 문제
          + Glassdoor가 실제 소득과 임금 정보를 정확하게 보고하지 않아, 급여 범위를 낮추는 데 도움을 줌.
          + 예를 들어, Amazon이 보너스를 포함해 최대 250K를 지불하는데, Glassdoor는 Senior Backend Developer의 가치를 120K로만 보고함.
     * 실명 사용에 대한 의문
          + 리뷰 사이트에 실명을 사용하는 것에 대한 의문 제기.
          + 쿠키 거부 시 기사를 읽을 수 없어, 자세한 내용은 확인되지 않음.
"
"https://news.hada.io/topic?id=13965","사고 과정 추론이 신경망의 연산을 돕는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사고 과정 추론이 신경망의 연산을 돕는 방법

사고 과정 추론이 신경망 계산에 도움이 되는 방법

     * 대규모 언어 모델이 문제를 해결할 때 작업을 보여주면 성능이 향상됨.
     * 연구자들은 이 기술이 왜 효과적인지 이해하기 시작함.

트랜스포머 훈련

     * 대규모 언어 모델은 인공 신경망이라는 수학적 구조를 기반으로 함.
     * 신경망 내부의 '뉴런'은 개별 단어를 나타내는 숫자의 긴 문자열에 대해 간단한 수학 연산을 수행함.
     * 트랜스포머는 특별한 수학적 구조인 주의력 헤드를 사용하여 텍스트를 빠르게 스캔하고 단어 간의 관련 연결을 식별함.

트랜스포머의 복잡성

     * 트랜스포머의 이론적 연구는 훈련 중에 발생하는 것을 고려하지 않고, 트랜스포머를 특정 컴퓨터처럼 취급하여 연구함.
     * 연구자들은 트랜스포머가 튜링 기계만큼 강력할 수 있다는 것을 증명함.

사고 실험

     * 연구자들은 트랜스포머가 출력을 재활용할 때 얼마나 더 강력해지는지에 대한 질문을 제기함.
     * 사고 과정 추론이 트랜스포머의 한계를 우회하는 방법을 제공할 수 있음.

현실로 돌아가기

     * 이론적 분석은 실제 언어 모델에 대해 많은 것을 밝히지만, 완벽한 결과를 예상할 수는 없음.
     * 복잡성 이론 분석은 트랜스포머의 한계를 인식하는 데 중요함.

GN⁺의 의견

     * 이 연구는 인공지능 분야에서 트랜스포머 모델의 한계와 잠재력을 이해하는 데 중요한 기여를 함. 특히, 사고 과정 추론이 복잡한 문제를 해결하는 데 어떻게 도움이 될 수 있는지에 대한 통찰을 제공함.
     * 그러나 이론적 연구 결과가 실제 모델의 성능과 항상 일치하지는 않기 때문에, 실제 어플리케이션에 적용할 때는 주의가 필요함. 실제 환경에서의 성능은 훈련 데이터, 모델 구조, 하이퍼파라미터 조정 등 다양한 요소에 의해 영향을 받음.
     * 이 기사는 언어 처리 모델의 한계를 인식하고, 더 나은 모델을 개발하기 위한 연구 방향을 제시함으로써, AI 연구자들에게 유용한 정보를 제공함.
     * 비슷한 기능을 가진 다른 프로젝트로는 OpenAI의 GPT 시리즈가 있으며, 이는 대규모 언어 모델의 성능을 실제로 확인할 수 있는 좋은 예시임.
     * 새로운 기술이나 모델을 도입할 때는 항상 기존 시스템과의 호환성, 비용, 성능, 유지 관리 등을 고려해야 하며, 이 기사에서 다룬 연구는 이러한 결정을 내리는 데 도움이 될 수 있는 배경 지식을 제공함.

        Hacker News 의견

     * 체인 오브 쏘트(chain-of-thought)와 상호작용하는 경험에 대한 의견:
          + 체인 오브 쏘트는 수학이나 논리의 엄격한 체인과 같지 않음.
          + 모델이 단계별 추론을 통해 출력하는 것은 관련 맥락의 강도에 달려 있으며, 이는 인간이 수행하는 수학/논리에 비해 훨씬 약함.
          + 모델은 인간처럼 논리적으로 추론하지 않고 관련 맥락을 통해 뛰어넘음.
          + 변환 모델은 토큰을 생성할 때만 계산을 수행하므로, 체인 오브 쏘트를 사용하여 더 많은 토큰을 생성하면 모델이 ""생각할"" 시간이 늘어남.
     * 계산의 형식적 연구와 관련된 중심적인 질문들:
          + 계산의 형식적 연구는 1936년 튜링 기계를 상상한 앨런 튜링에게 거슬러 올라감.
          + 이보다 더 이른 1920년대에 모세스 쇤핑켈이 조합 논리를, 1930년대 초에 알론조 처치가 람다 계산법을 개발함.
          + 이러한 모델들은 계산 복잡성 이론의 기초로는 적합하지 않음.
     * 대규모 언어 모델(LLM)에 대한 두 가지 관점:
          + LLM에 대해 ""의식이 있다"" 또는 ""단지 인상적인 데이터셋을 가진 다음 토큰 예측기""라고 주장하는 것은 ML 기초를 배운 후 LLM을 접한 사람들과 그 반대의 경우로 나뉨.
          + 기초 개념이 더 큰 그림을 보는 데 한계를 둘 수 있으므로, 논쟁을 환영함.
          + 체인 오브 쏘트에 대한 원래 논문의 결과가 후속 시도에서 재현되지 않는 경우가 많음.
     * 모델이 생각할 수 없음:
          + 모델은 입력 맥락을 사용하여 출력을 예측함.
          + 반복적으로 해결해야 하는 문제의 경우, 중간 단계를 맥락에 유지해야 함.
     * 계산 복잡성에 대한 간단한 이유:
          + LLM을 입력에 대해 한 번의 상수 시간 전방 통과를 수행하는 컴퓨터로 생각하면, 더 많은 사이클을 제공하면 더 많은 계산을 수행할 수 있음.
          + 단일 계층 퍼셉트론이 XOR을 계산할 수 없는 문제의 확장임.
     * 체인 오브 쏘트의 기적에 대한 간단한 설명:
          + 데이터와 프롬프트가 놀랍게도 작동하는 것에 대한 트윗을 인용.
          + 수학 문제의 단계별 해결책을 제공하는 웹사이트가 많이 존재함.
     * 체인 오브 쏘트와 관련된 의견:
          + 체인 오브 쏘트는 ""뭉개기""와 유사하며, 이는 지능의 근사치에 대한 올바른 접근법으로 직관적으로 이해됨.
     * 체인 오브 쏘트를 적용하고 인공 의식을 실험한 경우:
          + 질문에 대한 답변을 넘어서 체인 오브 쏘트를 계속할 때 인공 의식의 형태가 나타남.
     * 체인 오브 쏘트를 뒤집어 적용한 경우:
          + 모델을 훈련하여 먼저 답을 내고 그 후에 그 단계를 추론하게 함.
          + 미스트랄 AI의 연구자들이 이 방법을 사용하였으며, 복잡한 질문에 대해 모델이 먼저 답한 후에 추론하는 행동을 보임.
"
"https://news.hada.io/topic?id=13960","스태빌리티 AI의 CEO 엠드 모스타크 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        스태빌리티 AI의 CEO 엠드 모스타크 사임

Stability AI의 새로운 리더십 발표

     * 오늘 Emad Mostaque가 Stability AI의 CEO직과 이사회 멤버직에서 사임하여 분산형 AI를 추구하기로 함.
     * 이사회는 Shan Shan Wong(최고운영책임자)과 Christian Laforte(최고기술책임자)를 임시 공동 CEO로 임명함.
     * Stability AI는 회사의 기반을 다지고 성장의 다음 단계로 이끌 영구 CEO를 찾기 위해 적극적으로 노력 중임.

이사회의 감사 인사

     * 이사회의 의장인 Jim O’Shaughnessy는 Emad Mostaque에게 리더십과 오픈소스 운동에 대한 헌신에 대해 감사를 표함.
     * 임시 공동 CEO인 Shan Shan Wong과 Christian Laforte가 회사를 이끌며 산업 선도적인 생성 AI 제품을 개발하고 상업화하는 데 능숙할 것이라고 믿음.

Emad Mostaque의 발언

     * Emad Mostaque는 첫 개발자를 영입한 지 2년 만에 수백만 번의 다운로드와 여러 모달리티에서 최고의 모델을 이끌어낸 것에 대해 자부심을 느낌.
     * Stability AI의 사명을 굳게 믿으며, 회사가 능력 있는 손에 맡겨졌다고 느낌.
     * 이제 AI가 개방되고 분산되도록 하는 것이 중요하다고 언급함.

회사의 미래 비전

     * 리더십 변화는 Stability AI, 경영진, 이사회, 투자자들이 회사의 다음 성장 단계에 대한 비전을 실현하는 데 있어 공동의 약속을 표함.
     * 탁월한 팀, 최첨단 기술, 활기찬 커뮤니티를 유지하며 Stability AI가 개방형 다중 모달 생성 AI 분야의 리더로 남을 것을 약속함.

GN⁺의 의견

     * Stability AI의 CEO 교체는 회사의 새로운 방향성과 성장 전략에 중요한 전환점이 될 수 있음.
     * 분산형 AI와 오픈소스 운동에 대한 Emad Mostaque의 헌신은 AI 산업의 민주화와 혁신을 촉진하는 데 기여할 수 있음.
     * 임시 공동 CEO의 역할을 맡은 Shan Shan Wong과 Christian Laforte가 각자의 전문성을 바탕으로 회사를 안정적으로 이끌어갈 것으로 기대됨.
     * 오픈소스 AI 플랫폼의 성장은 개발자 커뮤니티에 더 많은 기회를 제공하고, AI 기술의 빠른 채택과 혁신을 촉진할 수 있음.
     * 이러한 리더십 변화가 회사 내부의 동기부여와 혁신을 촉진하는 긍정적인 영향을 미칠 수 있으나, 새로운 경영진의 비전과 전략이 기존의 성공을 어떻게 이어갈지는 지켜볼 필요가 있음.

        Hacker News 의견

     * 2024년은 인공지능(AI)에게 어려운 해가 될 전망임. 비즈니스 마인드를 가진 사람들이 훈련에 드는 비용 대비 가치를 심도 있게 의문시하기 시작함. 대부분의 GenAI 회사들은 흥미로운 아이디어를 가지고 있지만 실질적인 비즈니스 계획은 없음. 큰 AI 회사들은 거버넌스와 장기 안정성 측면에서 매우 불안정해 보임. OpenAI는 여전히 해결되지 않은 문제를 가지고 있고, Inflection은 이번 주에 이상한 일들이 발생함. AI 분야에서 지속 가능하고 장기적인 가치가 나타나기 전에 고통스러운 정리가 필요할 것으로 보임.
     * Stability AI는 기초 연구 분야에서 인재를 잃어 걱정됨. 이는 회사에 큰 손실이며, 여전히 해결되지 않은 문제들(더 빠른 모델, 에너지 효율적인 모델 등)이 많아 Stability가 차별화된 제품을 제공할 수 있도록 보장함. 첫 번째 단계는 고용의 핵심 문제를 해결하고 AI 연구소로 더 많은 초점을 맞추는 것이어야 함. 이는 회사의 방향 전환과 ""미션""에 대한 재집중을 필요로 할 것임.
     * Stability AI의 ""모든 모달리티에서 모델을 구축하는"" 미션은 회사의 초점을 잃게 만듦. 자원이 너무 분산되어 있음. 1억 달러의 자금이 있음에도 불구하고, 이미지나 비디오와 같은 특정 영역에 명확한 초점을 맞춰야 함. 예를 들어, StableLM은 이른 수익 추구와 차별화가 부족한 나쁜 베팅으로 보임.
     * API 계층에서 충분한 경쟁이 있음. Stability의 오픈소스에 대한 약속은 연구자와 개발자를 계속 끌어들일 것이지만, 적용 계층에서의 개선에 대한 재집중이 필요함. 이미지 편집 및 비디오 편집을 위한 심도 있는 UX 래퍼와 이미지 생성 또는 비디오 생성을 위한 종단 간 스택을 소유하는 것은 Stability가 경쟁에서 벗어나는 중요한 초점이 될 수 있음. 사람들은 이미지 자체에 대해 지불하는 것이 아니라, 문제를 해결하는 이미지에 대해 지불함.
     * Emad가 '분산형' AI 작업을 위해 회사를 떠남. 이는 Stability AI가 경제적으로 실현 가능하지 않다는 것이 명백해지기 전에 하던 일과 같음. 새로운 회사를 시작한다고 해서 이 상황이 바뀌지는 않을 것임.
     * 현재 AI 비즈니스와 모델들이 중요한 경제적 가치를 포착하는 데 실패하고 있음. 그곳에 도달할 것이지만, 좀 더 많은 작업이 필요함. 수십 년은 걸리지 않겠지만, 몇 년 더 도움이 될 것임.
     * Emad가 트위터에 암호화폐 관련 내용을 게시하기 시작한 것을 보고 Stability의 미래에 대해 의문을 가졌지만, 이렇게 빨리 일어날 줄은 예상하지 못함. 결국 폐쇄된 모델로 전환하고 사라질 것으로 예상함.
     * Emad가 암호화폐로 전환함.
     * 6개월 전, 해커뉴스에서 Stability의 비즈니스 모델의 생존 가능성에 대해 의심을 표함. Mostaque는 질문에 단호하게 ""예""라고 답하며 Stability.AI의 비즈니스가 그 어느 때보다 좋다고 주장함. 오늘 그는 사임함.
     * 지난주에 GenAI 분야에서 몇 가지 변동 사항이 있었음: 1. Inflection AI - CEO가 MSFT로 이동함. 2. Stability AI - CEO가 다른 곳으로 이동함(무한 합 게임? EigenLayer와 함께?). 더 있을까? ""GenAI가 잘 진행되고 있다""는 웹사이트가 있나요? (예: ""web3 is going great"")
     * CEO와 관련된 이전 논란(2023): 실제로 Mostaque는 옥스퍼드에서 석사 학위가 아닌 학사 학위를 가지고 있음. 헤지펀드의 좋은 해가 뒤이어 매우 나쁜 해가 되어 몇 달 후에 문을 닫음. UN과는 몇 년 동안 협력하지 않음. Stable Diffusion이 자신의 스타트업 Stability AI의 주목을 받게 한 주된 이유였지만, 그 소스 코드는 다른 연구자 그룹에 의해 작성됨. ""Stability는 우리가 이것을 만들었을 때 이것에 대해 전혀 몰랐다""고 연구를 이끈 Björn Ommer 교수가 포브스에 말함. ""그들은 나중에 이 수레에 뛰어들었다.""
     * SD3가 결코 출시되지 않을 것 같음. 아쉬운 일임.
"
"https://news.hada.io/topic?id=14049","펜타곤의 실리콘 밸리 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             펜타곤의 실리콘 밸리 문제

실리콘 밸리의 펜타곤 문제

     * 이스라엘 내부 보안 서비스인 신 베트의 론 바르 국장이 자체 개발한 인공지능 플랫폼을 발표함.
     * 이 기술은 테러리스트에 대한 정보를 분석하고 위험을 예측하여 경보를 발생시키는 데 사용됨.
     * 하마스의 공격은 이스라엘의 방위 시스템을 완전히 놀라게 했으며, 이는 하마스가 준비를 공개적으로 수행했음에도 불구하고 발생함.

미래 전쟁에서 뒤처지는 빅테크

     * 미셸 플루노이는 실리콘 밸리와 미국 정부 간의 연결의 중요성을 강조함.
     * 펜타곤은 새로운 기술에 저항적이라는 인식이 있지만, 실제로는 다수의 AI 프로젝트에 투자하고 있음.
     * AI 기술은 군사 작전 방식에 영향을 미칠 수 있지만, 기술 산업의 이상주의자들이 군사 기계를 혁신하고 있다는 신화를 조장함.

소프트웨어가 인간 갈등을 해결할 수 있다는 믿음

     * 미국의 전쟁 수행에서 소프트웨어의 역할은 오랜 역사를 가지고 있음.
     * 베트남 전쟁 당시 Igloo White 작전은 적의 활동을 감지하기 위해 센서를 배치했지만 실패함.
     * 실리콘 밸리는 제2차 세계대전 승리에 기여한 전자 산업에서 발전했으며, 냉전 기간 동안 펜타곤의 후원을 받음.

실리콘 밸리와 펜타곤의 관계

     * 실리콘 밸리의 기술 산업은 원래 방위 산업과 밀접한 관계를 가졌으며, 인터넷은 펜타곤의 ARPANET에서 발전함.
     * 피터 틸은 실리콘 밸리를 군사 산업 복합체로 되돌리려는 목표를 가지고 있음.
     * 펜타곤은 실리콘 밸리의 기술을 활용하여 미국의 기술적 우위를 유지하려고 노력함.

실리콘 밸리의 방위 기술

     * 실리콘 밸리의 기업들은 국방 분야에서 활동을 확대하고 있으며, 이는 기존의 군사 산업 복합체에 새로운 플레이어를 추가함.
     * 구글은 프로젝트 메이븐을 통해 드론 영상 처리를 위한 기술을 개발했지만, 직원들의 반대로 이 프로젝트에서 철수함.
     * 실리콘 밸리의 기업들은 국방 분야에서의 역할을 확대하고 있으며, 이는 국방 예산의 안정적인 수익원으로 보임.

GN⁺의 의견

     * 이 기사는 국방 기술과 인공지능의 발전이 실제 군사 작전에 어떻게 적용되고 있는지에 대한 흥미로운 통찰을 제공함.
     * AI 기술이 실제 전장에서의 복잡성을 완전히 이해하고 대응할 수 있는지에 대한 의문을 제기함.
     * 기술 산업과 국방 분야의 협력이 국가 안보에 어떤 영향을 미칠지에 대한 중요한 논의를 촉발함.
     * 이 기사는 실리콘 밸리의 기업들이 국방 분야에 더 깊이 관여함으로써 발생할 수 있는 윤리적 문제를 강조함.
     * 기술의 발전이 항상 군사적 성공으로 이어지지는 않는다는 점을 상기시키며, 과거의 실패한 프로젝트들을 예로 들어 이를 뒷받침함.

        Hacker News 의견

     * 기사에서 언급된 사례들은 선택적으로 골라진 것 같음. 베트남에서의 실패를 IBM 360 컴퓨터 탓으로만 돌릴 수는 없음. 하마스의 공격은 이스라엘을 놀라게 했을지 몰라도, 최근 몇 년간 아이언 돔은 잘 작동해왔음. 미국은 러시아의 우크라이나 공격을 경고했지만, 많은 사람들이 듣지 않았음. 그리고 원자폭탄을 만든 것은 이론 물리학자들이었음.
     * 많은 미디어가 그렇듯 이 기사도 인공지능을 너무 일반화하여 설명함. 기계학습(ML)의 예측 기능은 수십 년 동안 현대 군대에서 사용되어 왔음. 기사의 서두는 LLM이 10월 7일 공격의 정보 실패에 큰 역할을 했다고 암시하지만, 실제로는 그렇지 않음. ML은 계속해서 역할을 하고, 성공과 실패를 반복하며, 적대적 ML에 대항하면서 더욱 불완전해질 것임. 불완전한 도구를 탓하는 것은 유용하지 않음.
     * 인공지능 시스템은 하마스에 대해 모든 것을 알고 있었지만, 하마스 구성원들은 AI가 듣고 싶어하는 데이터를 제공함. 상대방이 모든 행동과 말을 볼 수 있을 때 유일한 방어는 프라이버시임. 소설 ""삼체 문제""에서는 인간의 마음 속에만 프라이버시가 존재하고, 그들만이 결코 말로 하지 않은 전략에 기반한 결정을 내릴 수 있음. 과학 소설이 현실이 됨.
     * 명확한 사용 사례 없이 좋은 시스템을 설계하는 것은 거의 불가능함. 우크라이나는 이러한 사용 사례를 가지고 있으며, 이를 해결하려는 높은 동기를 가짐. 우크라이나는 일반 컴퓨터로 전장을 통제하고, 장거리 해상 드론으로 여러 러시아 전함을 격침시킴. 최근에는 컴퓨터 비전 기반의 목표 인식을 탑재한 저가의 비행 드론을 대규모로 테스트하기 시작함. 그러나 미국은 평화 상태이며, 이는 자체적으로 좋은 일이지만, 실제로는 무용한 기술에 수십억 달러를 낭비하기 쉬움.
     * '놀랍게도'라는 표현은 이상함. 이스라엘 언론은 일선 분석가들이 경보를 울렸지만 무시당했다는 이야기를 반복적으로 보도함. 이는 성차별, 연령차별, 징병제에 대한 차별 때문일 수도 있고, 정부에 있는 정착 단체들이 가자 지구를 재정착하고자 하는 강한 의지 때문일 수도 있음. 어쨌든 신호는 있었고, 준비와 연습을 일 년 정도 관찰해왔음. 저항 그룹들이 그 비밀을 지켰다 하더라도, 평범한 정보군이나 군대의 장교라면 결국 폭력적인 반응이 있을 것이라는 결론을 내릴 수 있어야 함.
     * 이스라엘 기술에 대해서는 잘 모르겠지만, 펜타곤은 실리콘 밸리에서 이미지 문제가 있음. 최고의 인재를 모집하거나 Palintir 같은 계약 회사에 고용되는 것은 아닌 것 같음. 우리 세대는 2차 세계대전보다는 이라크와 베트남에 더 가깝고, 많은 뛰어난 마음들은 첫 세대 이민자임. 최근에 광고 기술이 이미지 문제를 겪고 있지만(사람들이 제작 과정을 더 많이 보게 되면서), 방위 산업보다는 대형 소비자 회사에서 일하는 것이 여전히 더 매력적임. 동료들에게 미국 정부나 간접적으로라도 일하도록 하려면 더 많은 돈을 지불해야 함. 대신 종종 더 적은 돈을 받고, 시간 외 활동에 대한 자유도 덜함.
     * 기사 말미에서, Cockburn은 ChatGPT에게 IDF와 Palantir의 작업에 대해 물었을 때 환상적인 대답을 받았다고 불평함. DuckDuckGo.com에 ""IDF Palantir""을 검색하면 여러 뉴스 기사 링크를 받을 수 있음. LLM이 현재 믿을 수 없다는 것이 포인트라면 그렇지만, Palantir이 IDF와 협력하는지 알 수 없다는 것이라면 이미 증거가 있음.
     * 측정과 대책의 영원한 진리에서 벗어날 수 없음... 도구를 가진 바보는 여전히 바보임...
     * 운영 인력이 온콜 의무의 거짓 경보로 인해 압도당하는 것 같음. 오류를 수정하는 가장 좋은 방법은... 그냥 무시하는 것임. 관료적인 직원이 운영해야 하는 복잡한 시스템은 실패할 운명임.
"
"https://news.hada.io/topic?id=13973","Pack - 압축 파일을 위한 새로운 컨테이너 포맷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Pack - 압축 파일을 위한 새로운 컨테이너 포맷

     * 파일 및 Raw Data를 지원하는 컨테이너 포맷으로, 안전하고 빠르며 신뢰할 수 있도록 설계됨
     * 무료로 사용 가능하며, 특허 문제로부터 자유로운 허가형 라이선스로 소스 코드를 제공

Pack을 만든 이유

     * 새로운 하드웨어 세대와 알고리듬의 발전을 고려하여 새로운 컨테이너 포맷에 대한 필요성이 생김
     * Zip, gzip, tar, RAR, 7-Zip 등 기존의 인기 있는 솔루션들은 수십 년 전에 개발됨
     * 기존 포맷들과 비교하여 압축 크기와 속도 면에서 현저한 개선을 보임
          + 8만개 파일을 가진 폴더 압축시 zip(253MB, 146초), RAR(235MB, 27초), 7z(135MB, 54.2초)
          + Pack은 194MB, 1.3초로 파일 사이즈는 ZIP,RAR 등에 비해서 작고, 약 20~100배까지 빠름. 7z보다는 크지만 속도가 40배 빠름

Pack의 미래

     * 안정화가 가장 중요한 과제
     * 잠금 및 암호화, 그래픽 인터페이스, 운영체제 통합, 개발 도구 및 라이브러리 개발이 계획되어 있고 개발 중임
     * 시간이 지남에 따라 더 많은 플랫폼에 대한 빌드가 제공될 예정

결론

     * 데이터 압축 분야는 지난 수십 년간 훌륭한 작업으로 잘 조명되어 왔으며, Pack은 이 분야에서 다음 단계를 제안
     * 저자는 빠른 속도 향상과 설계 결정에 대해 인지하고 있으며, 사용자들의 테스트와 코드 리뷰, 토론 참여를 환영

   한국의 한사용자는 제목에서 암시하는 바와같이 새로운 컨테이너에 대한 정보를 얻을 것으로 기대했으나 관련 정보가 찾기 힘든 점에 대해 다소 실망함.

   :-)

   Pascal로 만들어졌네요ㅎㅎ
"
"https://news.hada.io/topic?id=13998",""LLMs의 '급발진' 능력, 사실은 점진적이고 예측 가능하게 발달한다 – 연구 결과"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ""LLMs의 '급발진' 능력, 사실은 점진적이고 예측 가능하게 발달한다 – 연구 결과""

대규모 언어 모델의 예상치 못한 기술 학습 속도는 얼마나 빠른가?

     * 대규모 언어 모델(Large Language Models, LLMs)의 능력에 대한 새로운 연구는 이른바 '급발진 능력'이 실제로는 점진적이고 예측 가능하게 발달한다고 제안함.
     * 연구자들은 이러한 능력을 '급발진' 행동으로 묘사했으며, 이는 물리학에서 액체가 얼음으로 변하는 상전이와 유사하다고 비유함.
     * 그러나 스탠포드 대학의 연구진은 이러한 능력의 갑작스러운 출현이 연구자들이 LLM의 성능을 측정하는 방식의 결과일 뿐이라고 주장함.

대규모 언어 모델의 성능 측정

     * 대규모 언어 모델은 방대한 텍스트 데이터셋을 분석하여 자주 함께 나타나는 단어들 사이의 연결을 찾아냄.
     * 모델의 크기는 파라미터의 수로 측정되며, 파라미터가 많을수록 LLM은 더 많은 연결을 찾을 수 있음.
     * GPT-2는 15억 개의 파라미터를 가졌고, GPT-3.5는 3,500억 개, GPT-4는 1.75조 개의 파라미터를 사용함.

예상치 못한 능력의 점진적 발달

     * 스탠포드 대학의 연구진은 LLM의 능력이 갑작스럽고 예측 불가능하게 나타나는 것이 아니라 점진적이고 예측 가능하다고 주장함.
     * 예를 들어, 세 자리 수 덧셈에서 GPT-3과 LAMDA는 파라미터가 적을 때 정확한 계산을 실패했지만, 파라미터가 증가하면서 갑자기 덧셈을 할 수 있게 됨.
     * 연구진은 정확도만으로 LLM을 평가하는 대신 부분 점수를 주는 측정 방식을 사용하여 LLM이 점진적으로 올바른 숫자의 순서를 예측하는 것을 발견함.

다른 과학자들의 견해

     * 다른 과학자들은 이 연구가 '급발진' 개념을 완전히 해소하지는 않는다고 지적함.
     * 어떤 측정 기준이나 언제 LLM의 성능이 급격히 향상될지 예측하는 방법은 여전히 불확실함.
     * 일부 과학자들은 이전의 '급발진' 보고가 정확했다고 주장하며, 산술과 같은 능력에 있어서는 정답이 전부라고 강조함.

GN⁺의 의견

     * 이 연구는 인공지능의 안전성과 잠재적 위험에 대한 논의에 중요한 영향을 미칠 수 있음. LLM의 능력이 예측 가능하게 발달한다면, 이는 AI의 안전한 개발과 관리에 있어 중요한 지표가 될 수 있음.
     * 연구 결과가 실제 AI 개발에 적용될 때, 개발자들은 성능 측정 방식의 중요성을 인식하고 더 정교한 평가 방법을 고안해야 할 필요성이 있음.
     * 이 기사는 AI 연구의 최전선에서 일어나는 변화와 발전을 이해하는 데 도움을 줄 수 있으며, 특히 AI 모델의 성능 평가 방식에 대한 새로운 시각을 제공함.
     * 비판적인 관점에서 볼 때, 연구 결과가 모든 LLM의 성능 향상을 설명하지는 못하며, 더 크고 복잡한 모델에서는 '급발진' 현상이 여전히 발생할 수 있음을 인정해야 함.
     * 이 기술과 관련하여, OpenAI의 GPT 시리즈는 이미 시장에서 널리 사용되고 있으며, 이 연구는 GPT와 유사한 다른 LLMs의 개발에 영감을 줄 수 있음.

        Hacker News 의견

     * 연구와 관련된 몇 가지 문제점
          + 연구에서 사용된 평가 방식이 기술력을 제대로 반영하지 못할 수 있음.
          + 저자들의 측정 기준에도 불구하고 몇 가지 잠재적인 능력이 나타남.
          + 과거 데이터를 바탕으로 결과를 예측하는 것은 쉽지만, 실제로는 예상치 못한 결과가 나타난 것이 중요한 현상임.
          + 이 논문에는 가치가 있으나 결론을 지나치게 확장해서는 안 됨.
     * 미래 예측의 어려움
          + 미래를 예측하는 것은 이미 일어난 후에야 쉬워짐.
          + 고차원 능력은 여러 하위 능력에 의존하며 예측하기 어려움.
          + 예측을 위해서는 필요한 기본 요소들을 미리 식별하고, 이들이 어느 수준에 도달해야 하는지 시뮬레이션해야 함.
          + 데이터의 종류와 품질도 중요하며, 모델 버전 간에 급격한 변화가 있을 수 있음.
     * 측정 기준 변경에 따른 결과의 변화
          + 다른 측정 기준을 사용하면, 나타나는 현상이 사라질 수 있음.
          + 물 분자를 개별적으로 관찰하면 갑자기 나타나는 얼음 덩어리 대신 점진적인 결정 구조 형성을 볼 수 있음.
     * 논문 제목: ""Are Emergent Abilities of Large Language Models a Mirage?""
          + 논문 링크: arXiv:2304.15004
     * 능력의 급격한 변화에 대한 관찰
          + 다른 연구에서도 능력의 급격한 도약을 발견함.
          + 모델이 점진적으로 더 똑똑해지고 있을 수 있으며, 부분적인 답변에 대한 점수를 주지 않는 측정 방식으로 인해 이러한 진전을 놓칠 수 있음.
     * 부분 점수 접근법과 모델 훈련
          + 부분 점수를 주는 것은 좋지만, 정확한 답을 얻기 위한 훈련이 중요함.
          + 모델 크기가 클수록 수렴에 도달하기 쉬움.
          + 모델 크기가 증가함에 따라 능력이 갑자기 나타나는 것으로 볼 수 있음.
     * 능력의 점진적 출현
          + 능력이 나타나는 데 급격한 도약이나 예측 불가능성이 필요하지 않음.
          + 새로운 능력은 점진적으로 나타날 수 있음.
     * 대규모 언어 모델(Large Language Models, LLMs)의 한계
          + LLMs는 가능성을 평가하는 엔진임.
          + 단순히 LLMs의 규모를 확장하는 것만으로는 인공 일반 지능(Artificial General Intelligence, AGI)을 생성하지 못함.
     * 측정 기준에 대한 혼란
          + 편집 거리(edit distance)를 사용한 측정 방식이 적절하지 않을 수 있음.
          + 모델이 산술을 이해하는지 테스트하는 데 이상한 방법으로 보임.
          + 실제 값과 예상 값의 차이를 고려하는 것이 더 나을 수 있음.
          + 논문 링크: arXiv:2206.07682
"
"https://news.hada.io/topic?id=13962","1970년대 가장 환상적인 디스토피아, '스카포크' 방문 (2016)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 1970년대 가장 환상적인 디스토피아, '스카포크' 방문 (2016)

방문: 1970년대 최고의 디스토피아, 스카폴크

     * 리처드 리틀러는 어린 시절의 두려움을 바탕으로 가상의 디스토피아 도시 스카폴크에 관한 블로그와 책을 만듦.
     * 스카폴크는 1970년대 영국의 전체주의적인 사회를 풍자하는 다양한 가짜 기념품들로 구성됨.
     * 리틀러는 실제 1970년대 디자인에서 영감을 받아, 마치 진짜 물건처럼 보이는 이미지를 창조함.

스카폴크의 개념은 어디에서 왔는가?

     * 스카폴크는 리틀러의 1970년대 영국 어린 시절 기억에서 비롯됨.
     * 그는 어린 시절 악몽과 현실을 구분하지 못했으며, 이러한 경험에서 영감을 받아 스카폴크를 창조함.
     * 스카폴크는 몬티 파이썬, 조지 오웰, 음악, 그리고 다양한 문화적 영향을 받음.

스카폴크는 당신의 어린 시절의 대안적 버전인가?

     * 스카폴크는 리틀러의 어린 시절의 반쯤 기억된 모습으로, 1970년대의 대중적이거나 전형적인 이미지를 피함.
     * 스카폴크는 잊혀진 기억을 불러일으키며, 가물가물한 기억을 대체하는 가상의 역사를 제공함.

70년대는 정말 디스토피아였나?

     * 리틀러는 70년대를 회고하며 당시의 어두운 면을 인식함.
     * 산업 불안정, 전력 절약, 폭동, 테러 등으로 인해 불안정한 현실이 있었음.
     * 당시 문화는 초자연적이고 오컬트적인 요소에 집착했으며, 이는 스카폴크의 'hauntology' 개념과 연결됨.

디자이너로서 당신은 그 시대의 미학에서 가장 좋아하는 것은 무엇인가?

     * 리틀러는 모더니즘의 깨끗한 선과 단순한 서체를 좋아함.
     * 그는 또한 물리적으로 쇠퇴하는 전 디지털 시대의 아이디어에 매력을 느낌.

스카폴크 그래픽을 만드는 당신의 전형적인 방법은 무엇인가?

     * 리틀러는 인터넷이나 자신의 책에서 이미지를 찾아 아이디어를 즉흥적으로 만들거나, 아이디어를 가지고 적절한 이미지를 찾는 두 가지 접근 방식을 사용함.

사람들이 당신의 디자인을 실제 유물로 착각한 적이 있나?

     * 리틀러는 사람들이 펭귄 출판사에 가짜 스카폴크 책을 구입하려고 문의한 사례가 있었다고 함.
     * 스카폴크 게시물 중 일부는 풍자나 풍자를 인식하지 못하고 진짜로 믿는 경우가 있음.

스카폴크는 현대 문화를 어떻게 반영하는가?

     * 스카폴크는 감시와 시민권의 축소와 같은 주제를 다루며, 현대 정치 발전을 비틀거나 과장하여 풍자함.

GN⁺의 의견

     * 스카폴크는 현대 사회의 불안과 공포를 풍자적으로 다루며, 이는 우리가 현재 어떻게 과거를 기억하고 재해석하는지에 대한 흥미로운 통찰을 제공함.
     * 리처드 리틀러의 창의적인 접근 방식은 디자인과 스토리텔링의 결합을 통해 강력한 메시지를 전달하는 예시임.
     * 현대 사회의 문제를 과거의 맥락에 빗대어 표현하는 것은 우리가 현재의 문제를 다른 시각에서 바라볼 수 있게 함.
     * 스카폴크와 유사한 프로젝트로는 TV 시리즈 '블랙 미러'가 있으며, 이는 현대 기술과 사회의 어두운 면을 탐구함.
     * 스카폴크 프로젝트는 디지털 시대에 물리적 매체의 중요성과 영향력을 상기시키며, 디지털 미디어가 가지는 무형성에 대한 대조를 제공함.

        Hacker News 의견

     * 영국 현 정부의 행동이 때때로 Scarfolk(가상의 영국 마을을 배경으로 한 블로그)을 연상시킨다는 의견이 있음. 예를 들어, 총리가 트윗한 그래픽에서 ""영국에 불법으로 들어오면 영국의 현대 노예제 시스템에 접근할 수 없다""는 메시지가 70년대 타입페이스와 낡은 포스터 스타일로 표현되면 순수한 Scarfolk 스타일이 될 것이라는 지적.
     * 한 사용자는 직장을 떠나거나 사무실이 폐쇄될 때마다 Kak 포스터를 몇 개 인쇄하여 숨겨놓는다고 함. 또한 Scarfolk 책을 소장하고 있는데, 이 책이 기괴하고 소름 끼치는 예술 작품이라고 평가.
     * 1977년에 제작된 ""The Finishing Line""이라는 공익 광고 영화를 어린 시절 학교에서 본 기억이 있다고 언급함. 이 영화는 철도 근처에서 놀지 말라는 경고의 메시지를 담고 있음.
     * 1970년대 영국의 상황이 다른 곳보다 더 우울해 보인다는 의견이 있음. 당시 영국 어린이 프로그램들이 섬뜩하고 나이에 맞지 않는 내용을 포함하고 있었다는 지적.
     * 70년대 후반에서 80년대 초반의 영국 교육 비디오 미학을 더 어두운 버전으로 표현한 것이 ""Look Around You"" 시리즈라는 의견이 있음.
     * 어린이와 환각제에 대한 책을 가지고 싶다는 농담 섞인 댓글이 있음. 부모들이 아이들을 놀러 보낼 때 이 책을 두고 싶다는 내용.
     * Atlas Obscura 기사를 읽고 'Discovering Scarfolk'과 'The Scarfolk Annual' 책을 주문했다는 사용자가 있음. 특히 BBC 1의 '우리가 당신을 지켜보는 것'이라는 감시 테마 유머를 좋아한다고 함.
     * Scarfolk에 대한 TV 쇼가 결국 제작되지 않았다는 아쉬움을 표현하는 댓글이 있음. 또한 Scarfolk 관련 상품 링크를 공유.
     * 거의 4년 전의 포스터 중 가장 좋아하는 것은 '1970년대 사회적 거리 두기 법'이라는 포스터라는 의견이 있음.
     * Richard Littler가 만든 ""진짜"" Brexit Britain 축제 포스터에 대한 링크가 공유됨. 이 포스터는 풍자적인 내용을 담고 있음.
"
"https://news.hada.io/topic?id=13987","Show HN: Glossarie – 새롭고 몰입감 있는 언어 학습 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: Glossarie – 새롭고 몰입감 있는 언어 학습 방식

새롭고 몰입감 있는 언어 학습 방법

     * 자연스럽고 몰입감 있는 방식으로 어휘를 학습할 수 있음.
     * 프랑스어, 이탈리아어, 스페인어를 배우면서 좋아하는 책을 읽을 수 있는 기술을 개발함.

언어 학습 시작하기

     * 오늘부터 새로운 언어 학습을 시작할 수 있음.
     * Google Play와 App Store에서 앱을 다운로드 받을 수 있음.

연락처 정보

     * 이메일: contact@glossarie.co.uk
     * 2023년, Glossarie
     * 개인정보 보호정책이 있음.

GN⁺의 의견

     * 이 기사는 Glossarie라는 앱을 통해 새로운 언어를 배우는 혁신적인 방법을 소개하고 있음. 사용자가 좋아하는 책을 읽으며 자연스럽게 언어를 습득할 수 있는 점이 매력적임.
     * 몰입형 학습은 언어 습득에 있어서 매우 효과적인 방법으로 알려져 있으며, 이러한 접근 방식은 사용자의 학습 동기를 유지하는 데 도움이 될 수 있음.
     * 비슷한 기능을 제공하는 다른 앱으로는 Duolingo, Babbel, Rosetta Stone 등이 있으며, 이들과의 차별점을 두는 것이 중요할 것임.
     * 언어 학습 앱을 선택할 때는 사용자 인터페이스, 콘텐츠의 질, 학습 방법의 다양성 등을 고려해야 하며, Glossarie가 이러한 요소들을 어떻게 충족시키는지 사용자들이 평가할 것임.
     * 새로운 언어 학습 앱을 사용할 때는 개인의 학습 스타일과 목표에 맞는지, 그리고 지속적인 업데이트와 지원이 제공되는지 확인하는 것이 중요함.

        Hacker News 의견

     * Language Transfer 앱 추천
          + Reddit을 통해 알게 된 Language Transfer 앱에 대한 칭찬
          + 간단한 오디오 코스를 통해 말하기부터 언어를 가르침
          + 한 사람이 개발, 완전 무료이며 광고 없음
          + 다른 코스와 다른 관점에서 빠르게 언어를 습득하는 데 명확한 초점을 둠
          + 언어 간 공유된 어휘의 일반적인 패턴을 살펴보며 어휘를 구축하는 방법에 대해 설명
     * 어휘 교체 방식에 대한 의문
          + 단어를 일대일로 교체하는 방식인지, 이해하기 어려움
          + 영어와 다른 언어들의 단어 순서가 다르기 때문에 문법을 잘못 가르칠 수 있음
          + 스크린샷 예시에서 ""they had met their dead father""를 ""they had recontré leur mort father""로 번역했는데, 프랑스어에서는 ""mort""가 ""père"" 뒤에 와야 함
     * 브라우저 플러그인 제안
          + 브라우저 플러그인을 싫어하지만, 해커뉴스를 읽을 때 사용하고 싶음
          + 학습할 단어의 선택, 시기, 빈도에 대한 동적 난이도 및 알고리즘적 선택을 다루고, LLMs의 정확성 향상을 맡길 것을 제안
     * Kindle로 epub 전송 옵션
          + Kindle로 epub을 보낼 수 있는 옵션이 있으면 좋겠음
     * Toucan과 유사한 앱
          + Toucan과 유사하면서도 웹용으로 조금 다른 것을 개발함
          + 웹 지원을 구축할 계획이 있다면 비허가적 라이선스로 코드 공유할 의향 있음
     * 독일어 확장 요청
          + 앱 아이디어를 좋아하며, 독일어로 확장할 계획이 있는지 문의
     * koreader 통합 요청
          + koreader와의 통합을 고려해달라는 요청
          + koreader는 오픈 소스 e리더 앱 중 가장 인기 있음
          + 모바일이 아닌 e리더를 사용하는 사람들에게도 앱을 확장할 수 있는 기회 제공
     * 러시아어 책의 스페인어 번역 추가 요청
          + 어릴 적부터 좋아하는 책 ""magician in town yuri tomin""의 몇 장을 러시아어에서 스페인어로 번역해달라는 요청
     * 앱 사용 후기 및 질문
          + 앱을 사용해보고 좋았으나, 어떤 책을 선택해야 할지 결정하기 어려웠음
          + 사용자가 찾아본 단어에 대해 나중에 퀴즈를 보는지 질문
     * 사용자 경험(UX) 개선 제안
          + 팝업을 닫기 위해 어디든 클릭할 수 있게 해달라는 요청
          + 스크롤 바를 눈에 띄게 하거나 쉽게 잡을 수 있게 해달라는 요청
          + 가로 스크롤이 발생하는 리플로우(reflow) 문제 제기
          + 원본 epub의 장(chapter) 유지 요청
          + 텍스트 크기 옵션 추가 요청
          + 읽을 때 로고와 백분율을 숨길 수 있는 옵션 요청
          + HTML을 epub으로 변환할 수 있지만, 웹 페이지를 기본적으로 처리하는 것이 더 낫다는 의견
          + 매우 훌륭한 언어 앱이라는 칭찬
"
"https://news.hada.io/topic?id=14020","폴 그레이엄 에세이 한글 번역본 아카이브 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         폴 그레이엄 에세이 한글 번역본 아카이브

  폴 그레이엄 에세이 번역본 아카이브

   긱뉴스에도 자주 올라오는 폴 그레이엄의 에세이는 올라올 때마다 upvote를 많이 받는 베스트셀러이면서, 오래된 글도 인사이트를 얻어갈 수 있는 스테디셀러라고 생각합니다.

   하지만 흩어져 있어서 한번에 보기가 매우 어렵기 때문에 여기저기서 찾는 대로 에세이를 주워담고 있고, 번역되지 않은 것은 직접 번역도 하고 있습니다. 위 링크에서 D열의 댓글에 링크를 넣어주시면 반영해 두겠습니다!

재밌게 읽은 글 5편 소개

  Superlinear Returns

     * 보상은 초선형적임. 기하급수적 성장과 임계값 때문에 그런 모습을 보이는데, 기하급수적으로 성장하는 대표적인 예시는 지식이 있음.
     * 임계값은 1 또는 0으로 결과가 나오는 것으로, 승자독식 구조가 나오기 쉽기 때문에 초선형적인 보상을 줄 수 있음.
     * 초선형적으로 성장하기 위해서는 복리 효과를 거두는 것들을 보아야 하고, 그런 것들은 한 사이클의 결과물이 다음 사이클에서 더 잘 하게 만듦.
     * 대표적인 것이 학습임. 학습은 기하급수적 성장에 도움이 되고, 실리콘 밸리가 실패에 너그러운 것은 학습을 통해 성장할 수 있기 때문.
     * 초선형적인 사회 구조에서는 야망이 크거나 호기심이 큰 사람들이 큰 보상을 받기 용이함. 그래서 초기에는 별 것 아닌 것 같아 보이는 일들도 호기심을 바탕으로 키우다 보면 (확장 가능하지 않은 일을 하면) 엄청난 결과를 만들 수 있음.
     * 그러기 위해서는 호기심을 따르고 타고난 적성과 깊은 관심이 있는 일을 선택해야 함.

  Billionaires Build + How People Get Rich Now

    1. 보통 사람들은 남이 돈을 많이 벌면 그냥 기분이 나쁘기 때문에 억만장자는 부정한 방법으로, 착취를 통해 돈을 벌었다고 생각하지만 억만장자들은 사람들을 착취해서 돈을 번 것이 아니라, 무언가를 만들어서 돈을 번 것이다.
    2. YC가 찾는 창업자들은 특정 사용자 그룹을 이해하고 그들이 원하는 것을 만들 수 있어야 한다.
    3. 보통은 시장이 몹시 작아보일 것이다. 하지만 미래의 시장이 엄청나게 커질 수 있어야 한다. 창업자들은 미래에 살고 있고 변화의 최첨단에 있으며 YC 파트너들에게 이를 설득해야 한다.
    4. YC 파트너는 그래서 ""사람들이 이 서비스를 원한다는 것을 어떻게 알 수 있습니까?"" 라고 보통 물어보고, 가장 설득력 있는 대답은 ""우리와 우리의 친구들이 원하기 때문입니다."" 이다. 최소한 사용자의 니즈를 깊이 이해해야 하고, YC 파트너가 이에 흥미를 느끼는지, 느끼지 못하는지는 전혀 중요하지 않다.
    5. 초기 아이디어는 완벽할 수 없기 때문에 솔직하게 얘기해야 한다. 괜히 인터뷰를 프레젠테이션처럼 하거나, 아이디어가 완벽하다고 하면 잘 모르거나 거짓말을 하는 것이다.
    6. 팀은 세 가지를 본다: 창업자의 수준, 해당 분야에 대한 전문성, 공동 창업자 간의 관계 - 의지, 실행 능력, 회복탄력성, 우정 등의 질문을 한다.

   결론 : 부자가 되려면 창업을 해라. 과거부터 그랬고 앞으로는 더 쉬워질 것이다.
     * 1982년 미국 100대 부자 중 60명이 상속을 통해 부를 이뤘다. 반면, 2020년에는 상속을 통해 부를 이룬 사람은 27명 뿐이었다.
     * 이 수치를 통해 창업을 통해 부를 이루는게 요즘에서야 가능하게 되었다고 생각할 수 있을지 모르나, 사실 1892년의 백만장자 중 80%이상은 상속이 아닌 창업을 통해 부를 이뤘다.
     * 즉, 1982년만 당시 시대적 특이성 때문에 상속을 통한 부자가 많았을 뿐, 대부분은 창업을 통해 부자가 된다.
     * 게다가 요즘은 창업에 대한 지식도 널리 퍼져서 공유가 되고, 자금 유치도 쉬워졌기 때문에 창업을 위한 비용이 낮아졌다. 갈수록 축적되는 노하우를 바탕으로 시행착오를 줄임으로서 낮아진 비용은 젊은 나이에 쉬운 창업을 가능하게 하고, 용이해진 자금유치를 통해 폭발적인 성장이 가능하기에 창업자의 수와 부자의 수는 갈수록 늘어날 것이다.

  Default Alive or Default Dead? + The Fatal Pinch

     * 스타트업이 기본적으로 자생 가능한지 VS 불가능한지는 미래의 전략에 영향을 많이 끼침.
     * 자생 불가능하면 생존을 위해 발버둥쳐야 하지만, 자생가능하면 미래의 꿈과 과감한 아이디어에 베팅할 수 있음.
     * 그를 위해 더 빠르게 ""우리의 성장률과 번을 비교해 보았을 때 자생 가능한지?"" 를 물어보는 것이 몹시 중요함
     * 이때 VC의 추가 채용 등에 대한 조언이 장애가 될 수 있음
     * 스타트업이 런웨이를 얼마 남기지 않고도 안일하게 행동하다 후속투자를 생존의 유일한 길로 두었을 때 코너에 몰리다 망한다.
     * 투자받을 가능성을 0으로 만들고 나서 방법을 강구해 보아야 한다: 회사를 파산시키거나, 매출을 늘리거나, 비용을 줄여야 한다.
     * 비용을 줄일 거면 사람을 잘라야 하는데, 과한 채용을 줄이는게 첫번째고
     * 꼭 필요한 사람들만 있다면 매출을 늘리기 위해 노력하거나 컨설팅과 유사한 일들을 하면서라도 돈을 만들어야 함

  Before the startup

     * 스타트업은 반직관적인 일들 투성이다.
     * 우선 첫번째로 반직관적인 것은 본능에 의존한 결정을 하면 틀린 경우들이 많다. (하지만 그럼에도 사람이 쎄하면 피하는게 좋다)
     * 두번째로 스타트업에 대해 많이 아는 것은 중요하지 않다. 주커버그는 스타트업 씬을 잘 알아서 성공한게 아니라 사용자들을 잘 이해했기 때문이다. 투자받는 법? 종류주식? 멋진 오피스? 많은 고용? 그런건 스타트업의 성공에 전혀 중요하지 않다. 사람들이 원하는 것을 만들어라
     * 세번째로 스타트업을 무슨 정형화된 루트가 있는 것처럼 생각하지 마라. 많은 사람들은 인생에서 정해진 루트를 밟아 왔고, 답이 있는 문제들을 외워서 해결하면서 살아왔다. 일생동안 그렇게 훈련받은 젊은 창업자들은 “게임에서 승리하는 방법”을 찾고자 한다. 요령을 찾지 마라. 투자를 받고 싶으면 빠르게 성장하는 스타트업이 되고, 빠르게 성장하려면 사람들이 원하는 것을 만들어라.
     * 네번째로 스타트업은 당신의 모든 것을 앗아간다. 여러분의 모든 인생의 경로는 스타트업을 창업하는 시점부터 바뀌기 시작하고, 더 오래 경영한다고 해서 더 쉬워지지 않는다. 대학생 때 창업하지 마라. 대학은 창업을 가르칠 수 없고, 스타트업은 당신의 인생이 추구해야 할 ‘좋은 삶’의 일부이기 때문에 젊어서 경험해야 할 일들이 더 많다. 당신이 스타트업을 경영하게 되는 것처럼, 스타트업도 당신을 경영하게 될 것이다.
     * 다섯번째로 언제 스타트업을 해야 하는지는 아무도 알 수 없다. 스타트업 창업자의 길은 전례 없는 일들이고, 앞으로 어떤 경영자가 되는지가 더 중요하다. 언제가 적절한 시기인지를 알 수 있는 유일한 방법은 오직 시도해보는 것이다.
     * 여섯번째로 스타트업 아이디어를 얻고 공동 창업자를 구하기 위해서는 오히려 “스타트업 아이디어를 떠올리려고 하지 말아야” 한다. 애플, 야후, 구글, 페이스북 모두 사이드 프로젝트로 시작되었고, 훌륭한 아이디어들은 너무 이상적인 나머지 회사에서 받아들여지지 못하기 때문이다. 훌륭한 아이디어를 얻기 위해서는 1) 중요한 것에 대해 많이 배우고, 2) 관심 있는 문제를 3) 좋아하고 존경하는 사람들과 해결해 보아야 한다. 창업을 하기 위해서는 대학에서 강력한 것을 배우고, 호기심을 따라가다가 마지막 과정에서 부수적인 욕심으로 창업을 하게 되는 것이다. ‘기업가 정신’ 이런걸 배워서 창업을 할 수 있는 것은 아니다.

  How to Get Startup Ideas

     * 스타트업 아이디어 얻는 법:

    1. 창업자 자신이 원하고
    2. 스스로 만들 수 있으며
    3. 다른 사람들이 그 가치를 인정하지 않는다.

     * 문제 - 아이디어를 만들어내지 않고 진실된 문제를 풀 수 있는가? 사용자에게 충분한 주의를 기울였는가?
       우물처럼 좁고 깊은 제품 - 내 제품을 절실하게 원하는 사람들이 아주 소수로 있어야 함 - 중요한 것은 제품의 깊이이다. 마이크로소프트의 알테어 / 하버드의 페이스북 등. 그러나 나중에는 시장이 더 확대될 것
     * 자기 자신에서 길을 찾기 - 미래를 살고 미래에서 무언가 부족한 것을 찾아라. USB를 잃어버리고 드랍박스를 만들듯, 컴퓨터에 빠져 살아서 페이스북을 만들듯, 올바른 방식으로 준비된 마음을 가져야 한다.
     * 알림 - 이게 큰 회사가 될 수 있을까? / 현재 세상의 상태를 당연하게 받아들이는 것 등의 생각을 오염시키는 필터를 끄고, 분명한 문제를 해결해라 / ""미래를 살면서, 흥미로워 보이는 것을 만들어라""
     * 학교 - 기업가정신을 배우지 말고 기업가가 되어라. 소프트웨어 전공하고 다른 전공도 하나 더 해라
     * 경쟁 - 경쟁자들은 원래 많음. 그러나 기존 솔루션이 충분하지 않아서 그럴 수도 있음. 그래서 구글처럼 기존 포탈대비 훨씬 뛰어난 검색을 해주거나 / 마이크로소프트처럼 작아 보이지만 알고보면 큰 시장으로 가야 함
     * 필터 - 슐렙 필터: 지루한 문제를 해결하고 지저분한 방식으로 현실 문제에 개입해야 함. 보통 프로그래머들은 그렇지 않음. 매력없음 필터: 별로 섹시하지 않은 비즈니스라고 천대시하지 마라
     * 레시피 - 작위적으로 아이템을 만들어야 하면 최소한 자신의 근처에서 만들어야 함. 다른 사람들의 부족한 부분에서도 창업 아이디어를 찾을 수 있는데, 컨설턴트처럼 직접 소비자들에게 고용되면서 문제를 찾아볼 수 있다.

    역자 + 아카이브 한 사람들인 디캠프에 대한 짧은 소개

   디캠프는 스타트업 생태계를 위한 비영리 재단으로, 은행연합회 사원기관 19개 금융기관(설립 당시 20개 기관)이 2012년 5월 설립한 국내 최대 규모의 창업재단입니다.
   ‘미래를 향한 투자’, ‘성장을 돕는 공간’, ‘세계와 지역의 연결’이라는 창업 생태계의 3대 요소를 유기적으로 연결하여 다양한 창업 지원 활동을 수행하고 있습니다.

   감사합니다. 그런데 구글 시트가 모바일 환경에서 보기가 좀 어렵네욤..

   모바일에서 보시기 편하게 첫 열 고정 + 요약을 B열로 가져왔습니다!

   언젠간 제가 억만장자 만들기를 읽고 너무 감명깊어서 급하게 번역했었는데(https://news.hada.io/topic?id=3510) 너무나 급하게 번역한 나머지 원문의 가치를 많이 훼손한다고 생각해서, 마음에 부체감이 있었습니다. 훨씬 낫게 번역해주신 덕분에 인상깊게 본 글을 최대한의 훼손 없이 다른 분들에게 추천할 수 있게 되어서. 완전 감사합니다. 'ㅁ 'b

   ffdd270님께서 훨씬 읽기 쉽게 잘 해주신 것 같아요 ㅎㅎ 저는 원문을 유지하는데 너무 신경을 써서 약간 읽는 재미가 없어지지는 않았나 싶습니다!
"
"https://news.hada.io/topic?id=14017","Show GN: 제22대 총선 여론조사 통합지표 (Poll Aggregator)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 제22대 총선 여론조사 통합지표 (Poll Aggregator)

   지난 대선 때 개인적인 궁금증을 해소하기 위해 비슷한 작업을 시작했다가 결과물이 여러 사람에게 도움이 될 수 있겠다 싶어서 몇몇 사이트에서 공유했었는데, 여론조사 통합지표 뿐만 아니라 각 후보들의 득표율과 사전투표, 본투표 투표율 예측도 해보았습니다 (http://scholarsbookcase.github.io/koreanelectionpolls2022/). Github 소스에 타임 스탬프를 보시면 예측이 전부 사전에 이루어진것을 확인하실 수 있습니다.

   그 때에 생성한 코드와 노하우를 바탕으로 이번 총선을 앞두고 22대 총선용 여론조사 통합지표 페이지를 개설하였습니다. 지난 대선때처럼 여론조사 공표 금지기간이 되었을 때 이 지표를 기반으로 지역구와 비례대표 투표에서 각 정당의 전국 득표율 (의석수 X)을 예측해 볼 생각입니다. 사실 총선 자체의 결과를 예측하는 것보다 제가 이번 지표를 통해 얻고자하는 것은 응답자들의 투표 의지에 따라 여론조사 결과에 가중치를 부여해서 가중평균을 내는 이러한 방법론이 얼마나 유효한지 총선이라는 새로운 무대를 통해 시험해 보는 것입니다. 여기서 배운 점들을 토대로 여론조사 통합지표와 선거 결과 예측 모델을 보완할 생각입니다.

   지표를 보실 때 유의해야할 점은 지표 산출에 쓰인 여론조사들이 전부 전국 단위 조사라는 점입니다. 따라서 개별 지역구에서 확정된 후보들 중 누가 당선될지, 혹은 각 정당이 얻어낼 의석 수는 어느 정도 되는지에 대해서 이 지표들만 가지고 이야기할 수 있는 것에 한계가 있습니다. 다만 전국에서 각 정당의 지지세가 어떻게 변화하고 있는지, 부동층은 어디로 흘러들어가고 있는지 살펴보는 용도로 활용하시면 작금의 정세를 이해하는데 약간의 도움이 되시리라 생각합니다.

   지표 페이지에 4개의 그래프가 있습니다. 응답자들 중 적극투표층 (“반드시 투표할 것이다”)과 소극투표층 (“가능하면 투표할 것이다”)에 각각 가중치를 다르게 부여하고 그들만을 따로 떼어낸 투표의지층 사이에서의 투표 예정 정당과, 투표의지와 상관없이 전체 응답자 사이에서의 투표 예정 정당을 모두 살펴볼 수 있도록 두 가지 모두 제공합니다. 이는 투표의지층과 전체 응답자들 사이에 차이가 있는지, 있다면 그것이 얼마나 유의미한지 살펴보기 위함입니다. 그리고 지역구와 비례대표 투표에서 투표 예정 정당이 상이할 수 있기에 이 두 가지 또한 함께 제공합니다. 다시 강조하지만, 지역구 조사에서의 지지율이 반드시 비슷한 비율의 의석 수로 환원되지 않습니다. 다만 비례대표 지표는 총선 당일의 비례대표 득표율과 직접 연결된다고 볼 수
   있습니다.

   모바일 기기에서는 신용구간이 잘 보이지 않아서 지표를 통해 최상의 정보값을 얻어갈 수 있도록 유도하기 위해 PC 화면에 최적화하였습니다. Plotly를 사용해 보신 분들은 잘 아시겠지만, 그래프 오른쪽에 나열된 각 정당의 이름을 두번 클릭하시면 해당 정당의 수치만 부각해서 보실 수 있고, 이름을 한번 클릭했을 때는 해당 정당이 표시/숨김되는 것을 toggle하실 수 있습니다.

   가중치 부여기준은 대선 지표때와 달라진 점들이 있지만, 결국에는 여론조사 품질을 반영하고자했던 논리의 연장선상에서 일부 추가 또는 조정하였기 때문에 따로 상술하지 않겠습니다. 대선 때와 크게 달라진 점이 있다면 이제 지표를 생성하는데 포함된 여론조사들의 목록과 혹여 여심위에서 전국 조사로 분류되었지만 지표에 포함되지 않은 조사가 있다면 그 사유가 무엇인지 쉽게 확인하실 수 있도록 따로 여심위 등록 조사들을 표로 정리했다는 점입니다. 지표 페이지 맨 아래에 여심위 규정 기재 사항에서 “여론조사 목록” 링크를 누르시면 됩니다. 또한, 각 그래프에서 특정 날짜의 수치를 생성하는데 사용된 여론조사들이 어떤것들인지 쉽게 확인 할 수 있도록 또 하나의 기능을 추가하였습니다. 모바일 기기가 아닌 일반 컴퓨터 화면에서 그래프를
   띄웠을 때 마우스 커서를 특정 날짜로 이동해서 수치들을 확인하면서 그래프 아무 곳이나 클릭하시면, 해당 날짜 수치들의 기반이 된 조사들을 따로 정리한 표를 볼 수 있을 것입니다.

   그 밖에 궁금하신 점이 있거나 오류를 발견하시게 되면 언제든지 scholarsbookcase@gmail.com로 연락주시면 친절하게 답변해 드리겠습니다. 본 지표가 여러분의 현명한 한 표 행사에 조금이나마 도움이 될 수 있었으면 좋겠습니다.

   한국판 https://projects.fivethirtyeight.com/polls/ 같네요 ㅎㅎ 감사합니다!
"
"https://news.hada.io/topic?id=14013","기술 부채: 내 Rust 라이브러리, 이제 CDO로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    기술 부채: 내 Rust 라이브러리, 이제 CDO로 전환

기술 부채: 내 Rust 라이브러리는 이제 CDO가 되었다

     * 기술 부채에 대한 유머로, 기술 부채가 있다면 그 부채를 다루기 위한 파생상품도 있어야 한다는 농담이 있음.
     * Rust 생태계는 기술 부채를 담보화하는 것처럼 보이는 해결책을 만들어냄.
     * 예를 들어, 어떤 라이브러리 stuff가 다른 라이브러리 learned-rust-this-way에 의존하는데, learned-rust-this-way의 저자가 관심을 잃고 문제들이 쌓이기 시작함.

기술 부채의 실체

     * learned-rust-this-way는 기술 부채로 간주되며, 이는 직접적인 문제를 일으키지 않지만, 그럼에도 불구하고 부채임.
     * 어느 시점에 누군가가 learned-rust-this-way가 부채라는 것을 깨닫고, 원래 저자에게 연락이 닿지 않으면서 RUSTSEC 데이터베이스에 추가됨.
     * RUSTSEC은 평가 기관으로서 해당 부채를 쓰레기로 평가하고, 이로 인해 많은 사람들의 CI(지속적 통합)가 실패하기 시작함.

부채 해결 방법

     * stuff의 유지보수자로서, 사용자들이 learned-rust-this-way 사용에 대해 문제를 제기하면 스트레스가 증가하고, 부채를 처리하기 위한 조치를 요구받음.
     * 대안으로 이동하는 것이 하나의 옵션이지만, 이 경우에는 모든 대안들이 매력적이지 않음.
     * learned-rust-this-way를 포크하면 동일한 요구에 직면하게 되며, 이는 임시적인 해결책일 뿐 문제를 해결하지는 못함.

실제로 효과가 있는 해결책

     * 자신의 라이브러리에 해당 코드를 병합하면, 이제 그 쓰레기 기술 부채가 갑자기 ‘AAA’ 등급으로 평가됨.
     * 코드를 더 이상 건드리지 않고, 병합 사실을 숨기며, 이전처럼 라이브러리를 유지 관리하면 세상은 계속 돌아감.
     * yaml-rust를 insta에 벤더링하여 병합함으로써, insta 코드와 yaml-rust의 결합체가 되었고, 이를 통해 AAA 등급으로 기술 부채를 업그레이드함.

GN⁺의 의견

     * 이 기사는 기술 부채를 금융 파생상품에 비유하여, 소프트웨어 개발에서 발생하는 문제를 재치 있게 설명함.
     * 기술 부채는 소프트웨어 개발에서 흔히 마주치는 문제이며, 이 기사는 개발자들에게 부채를 관리하는 창의적인 방법을 제시함.
     * Rust 생태계의 RUSTSEC 같은 평가 시스템은 개발자들이 라이브러리의 안정성을 평가하는 데 도움을 줄 수 있으나, 동시에 불필요한 스트레스를 유발할 수도 있음.
     * 기술 부채를 해결하는 방법으로 코드를 병합하는 것은 임시적인 해결책일 수 있으며, 장기적으로는 지속 가능한 유지보수 전략이 필요함.
     * 이러한 상황에서는 커뮤니티 주도의 유지보수, 오픈소스 프로젝트의 공동 유지보수, 또는 라이브러리의 대체 버전을 찾는 것과 같은 다양한 해결책을 고려해야 함.

        Hacker News 의견

     * 가장 인기 있는 YAML 파서의 저자가 갑작스럽게 프로젝트를 포기하고, 이를 사용하지 않음(deprecated) 및 유지보수하지 않음(unmaintained)으로 표시함. 경고나 다른 유지보수자 지정 없이 이루어진 일로, 패키지는 여전히 기능적이지만 4000개 이상의 다른 크레이트에서 사용되고 있어, 감사 및 자동 업데이트 도구에서 유지보수되지 않는 크레이트 사용에 대해 경고할 것임.
     * CDO라는 약어에 혼란을 느낀 사람들을 위해, 이는 'collateralized debt obligation'을 의미함을 추측함. 여러 번 'collateralized'라는 단어가 사용되었기 때문임.
     * 코드가 취약한 경로가 외부 라이브러리에서 실행되거나 접근할 수 없다면, 그것은 안전한 코드 경로가 됨. 라이브러리를 가져오는(vendoring) 것은 코드를 공격하는 도구를 제공하며, 자체 라이브러리에 대한 테스트 커버리지가 충분하다면, 가져온 라이브러리에 대한 코드 커버리지 도구를 실행할 수 있음. 가져온 라이브러리를 수정하는 것은 도전적일 수 있지만, 필요하지 않은 부분을 삭제하는 것은 상대적으로 쉬울 수 있음. 물론, 가져온 라이브러리의 구조에 따라 다름.
     * 전직 양적 분석가이자 현재 경제학자는 저자가 'Collateralized Debt Obligation'이라는 용어를 올바르게 사용한 것을 칭찬함. '기술적 부채'에 대한 기사를 쓰고 싶은데, '부채'라는 비유는 그 개념에 적합하지 않다고 생각함. '고점도 코드'라는 표현이 더 나을 수 있음. 코드를 새로운 기능에 맞게 쉽게 변경할 수 없어서 마치 높은 유도성을 가진 것처럼 느껴짐.
     * 'junk tech debt'가 갑자기 'AAA' 등급으로 평가받는다는 것에 대해, 저자는 코드가 가져오기(vendoring) 되기 전과 후에 같은 코드가 더 나은 부채 등급을 가질 수 없다는 것을 의미하는 것 같음. 하지만 이것은 코드 자체의 가치만을 보는 것으로, 전체 가치 제안의 가장 중요한 부분을 놓치고 있음. 코드를 가져오는 유지보수자는 이제 그 코드를 소유하게 되며, 죽은 프로젝트에서 코드를 가져온 활동적인 유지보수자는 이슈에 대응하고, 풀 리퀘스트를 검토하며, 버그를 수정할 수 있는 인간이 있기 때문에 코드의 가치를 높임.
     * JS npm 생태계에서도 같은 패턴을 보았음. Npm audit은 주로 보안 문제에 대해 과장되게 경고하며, 라이선스가 허용하는 한, 사용자로부터 받는 터무니없는 문제들로부터 벗어나는 가장 신뢰할 수 있는 방법 중 하나임.
     * yaml-rust를 포크하고 순수 Rust로 다시 작성하여 yaml-rust2를 만든 것은 운이 좋았음. 이 포크는 YAML 테스트 스위트를 완전히 통과하며 벤치마크에서도 더 나은 성능을 보임. 마이그레이션도 간단해 보임. 결국 문제는 여전히 남아 있으며, 우리는 현재 무료로 노동을 제공하는 다른 사람들에게 의존하고 있지만, 그들이 영원히 그렇게 할 것이라는 보장은 없음.
     * 소스 기반 패키지 매니저가 레지스트리가 발행된 패키지의 유지보수를 강제로 인수할 법적 권리를 강제하지 않는다면, 무시무시한 문제에 직면할 것임: 방치, 악의적인 변경, 악의적인 제거, 사칭 등... 커뮤니티에 충분히 중요하다고 판단되는 패키지의 경우, 원래 소유자의 손에서 레지스트리 항목을 빼앗아 포크로 바꾸는 방법이 필요함.
     * 코드가 작동하고 수년간 그래왔다면, 유지보수되지 않는다고 해서 무슨 상관이 있을까? 수정할 필요가 없고 그 한계와 능력을 알고 있다면 문제가 되지 않음. 코드는 스스로 나빠지지 않음. 수십 년 전 코드를 여러 번 빌려오거나 통합하는 데 아무 문제가 없었음.
     * 의존성을 가져오는 것(vendoring)이 해결책임. 20년 동안 '완성'되어 개발 및 유지보수가 느려진 거의 모든 의존성에 대해 이를 수행함.
"
"https://news.hada.io/topic?id=14032","최근 'MFA Bombing' 공격, 애플 사용자들을 대상으로 함 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  최근 'MFA Bombing' 공격, 애플 사용자들을 대상으로 함

애플 고객 대상 정교한 피싱 공격

     * 최근 애플 고객들이 애플의 비밀번호 재설정 기능에 있는 버그처럼 보이는 정교한 피싱 공격의 대상이 됨.
     * 공격 대상자의 애플 기기들이 수십 개의 시스템 레벨 프롬프트를 표시하도록 강제하여, 각 프롬프트에 '허용' 또는 '허용하지 않음'으로 응답할 때까지 기기 사용이 불가능해짐.
     * 사용자가 실수로 잘못된 버튼을 누르지 않는다고 가정하면, 사기꾼들은 애플 지원을 사칭하여 전화를 걸어 사용자의 계정이 공격을 받고 있으며, 일회용 코드를 ""확인""해야 한다고 말함.

푸시 폭탄 공격과 MFA 피로도

     * 창업가인 Parth Patel은 대화형 AI 분야의 스타트업을 구축하려고 시도 중이며, 자신을 대상으로 한 최근의 피싱 캠페인을 트위터에 기록함.
     * 이 공격은 '푸시 폭탄' 또는 'MFA 피로도' 공격으로 알려져 있으며, 다중 인증(MFA) 시스템의 기능이나 약점을 남용하여 대상의 기기에 비밀번호 변경이나 로그인 승인 알림을 쇄도하게 함.
     * Patel은 자신의 모든 기기가 애플로부터 계정 비밀번호 재설정 승인을 요구하는 시스템 알림으로 폭발했다고 말함.

전화번호가 핵심

     * 암호화폐 헤지펀드 소유주인 Chris는 비슷한 피싱 시도를 경험했으며, 공격자들이 며칠 동안 기기에 재설정 알림을 계속 보냈음.
     * Chris는 애플 지원을 사칭한 전화를 받았으나, 진짜 애플에 전화를 걸어 확인한 결과 애플은 고객에게 먼저 전화를 걸지 않는다고 함.
     * Chris는 비밀번호를 변경하고 새 아이폰을 구입한 후 새 이메일 주소로 새 애플 iCloud 계정을 만듦.

조심하세요!

     * 보안 업계 베테랑인 Ken은 익명을 조건으로 이와 유사한 무단 시스템 알림을 받았으나 가짜 애플 지원 전화는 받지 않았음.
     * Ken은 애플 지원에 연락하여 최종적으로 고위 애플 엔지니어와 연결되었고, 계정에 대한 복구 키를 활성화하면 알림이 영구적으로 중단될 것이라는 보장을 받음.
     * 복구 키는 계정의 보안을 개선하는 선택적 보안 기능이며, 활성화하면 애플의 표준 계정 복구 프로세스가 비활성화됨.

속도 제한

     * 합리적으로 설계된 인증 시스템이 사용자가 첫 번째 요청에 대응하기도 전에 몇 분 안에 비밀번호 변경 요청을 수십 개 보낼까?
     * 애플은 아직 이에 대한 논평 요청에 응답하지 않음.

할 수 있는 일은?

     * 애플은 계정에 전화번호가 있어야 하지만, 계정을 설정한 후에는 반드시 모바일 번호일 필요는 없음.
     * 애플은 Google Voice와 같은 VOIP 번호를 받아들이므로, VOIP 번호로 계정 전화번호를 변경하는 것이 하나의 완화책이 될 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:

     기사와 상위 댓글에서 누락된 중요한 정보가 있음: 실수로 '허용'을 탭하더라도 공격자가 웹 브라우저에서 비밀번호를 변경할 수 있는 것은 아님. '허용'을 탭하면 사용자의 기기에 6자리 핀이 표시되고, 사용자는 자신의 기기에서 비밀번호를 변경할 수 있음. 공격의 마지막 단계는 공격자가 Apple의 전화번호로 위장하여 전화를 걸어 사용자에게 6자리 핀을 읽어달라고 요청하는 것임. 사용자가 전화로 6자리 핀을 공격자에게 알려주면, 공격자는 그 핀을 사용하여 사용자의 비밀번호를 재설정할 수 있음.
     * 두 번째 댓글 요약:

     이 문제는 2021년 또는 2022년에 댓글 작성자와 그의 아내에게 발생했음. 처음에는 하루에 몇 번 요청이 들어왔으나, 시간이 지날수록 매시간 요청이 들어오기 시작함. 댓글 작성자는 공격자의 시도를 막기 위해 두 계정 모두 복구 키를 사용하도록 설정함. 또한, 데이터 보호를 강화하고 웹 접근을 비활성화하여 신뢰할 수 있는 기기만 데이터에 접근하고 새 기기를 등록할 수 있도록 함.
     * 세 번째 댓글 요약:

     비밀번호 재설정 메시지가 다른 기기에서 비밀번호 재설정을 허용한다면, 그 디자인은 매우 형편없음. 메시지에는 '이 iPhone을 사용하여 재설정'이라고 명시되어 있으므로, '허용'을 클릭한 사람이 동일한 기기에서 새 비밀번호를 설정할 것으로 가정함.
     * 네 번째 댓글 요약:

     Apple 기기에서 이러한 프롬프트(또는 작년에 뉴스에 나온 Bluetooth 기반의 새 기기 설정 프롬프트와 같은 것들)를 트리거할 수 있는 능력 자체가 문제가 아닌가 의문임. 비밀번호를 재설정할 수 있는 기능은 필요하지만, 기사에 따르면 짧은 시간에 30번의 비밀번호 재설정 요청을 할 수 있다고 함. 이것이 악의적이지 않은 이유가 무엇일까?
     * 다섯 번째 댓글 요약:

     한 번, Apple 지원센터에서 전화가 왔다고 표시된 전화를 받았음. 이는 온라인 Apple Store에서 새 MacBook을 주문한 지 이틀 후에 발생함. 배송을 기다리고 있었기 때문에 전화를 받을 뻔했지만, 대신 Apple 지원센터에 직접 전화하여 그들이 전화했는지 확인함. 그들은 전화하지 않았다고 답함.
     * 여섯 번째 댓글 요약:

     이러한 전화의 또 다른 목적이 사용자의 목소리를 충분히 모아 설득력 있게 복제하는 것일 수 있음을 얼마나 오래 걸릴지 궁금함.
     * 일곱 번째 댓글 요약:

     '허용'을 클릭한 후에 정확히 무슨 일이 발생하는지 혼란스러움. Apple은 iForgot 웹사이트에서 비밀번호 재설정 양식을 제공하는 것인지, 아니면 그것이 기기에만 표시되는 것인지 궁금함.
     * 여덟 번째 댓글 요약:

     약 2년 전에 이 문제가 발생함. iCloud에서 비밀번호 재설정 요청이 폭주할 때 Apple Care에서 전화가 온 것처럼 위장한 전화를 받으면 당황스러움. 공격자는 Apple 관련 질문에 능숙하게 대답함. 댓글 작성자의 계정 데이터는 큰 Ledger 해킹에서 유출되었을 가능성이 있으며, 공격자들은 암호 화폐 소유자를 대상으로 함. 당시 iCloud 보안은 매우 약했음.
     * 아홉 번째 댓글 요약:

     Push MFA(다중 인증)가 도입된 이후로 싫어함. 코드를 입력하는 것이 정말 어렵지 않은데, 결국 push 폭탄에 맞서기 위해 코드를 요구하는 push 알림으로 끝남.
     * 열 번째 댓글 요약:

     몇 일 전부터 LinkedIn 계정에서 마법의 로그인 링크가 포함된 이메일을 몇 시간마다 받고 있음. 이메일은 전 세계 다양한 위치에서 발송된 것으로 보이며 정품으로 보임.
"
"https://news.hada.io/topic?id=14030","다니엘 카네먼 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               다니엘 카네먼 별세

노벨상 수상자 다니엘 카너먼, 경제학을 뒤집은 심리학자, 90세로 별세

     * 이스라엘계 미국인 심리학자이자 베스트셀러 작가인 다니엘 카너먼이 90세의 나이로 별세함.
     * 카너먼의 연구는 사람들이 자신의 최선의 이익에 반하는 잘못된 결정을 내리는 경향이 있음을 보여줌으로써 경제학뿐만 아니라 스포츠, 공중 보건 등 여러 분야에 영향을 미침.
     * 그의 죽음은 뉴요커의 소설 편집자인 의붓딸 데보라 트레이스먼에 의해 확인됨.

경제학의 오류를 밝힌 연구

     * 카너먼의 연구는 '경제적 인간'이라는 개념을 반박함. 이는 인간이 자기 이익을 위해 합리적으로 행동한다는 아담 스미스 시대부터의 가정을 뒤집은 것임.
     * 그는 사람들이 종종 직관에 의존하고, 최근 사건에 지나치게 영향을 받으며, 빠르게 결론을 내리는 경향이 있다고 발견함.

노벨 경제학상 수상

     * 카너먼은 2002년 불확실성 하에서의 인간 판단과 의사결정에 대한 심리학적 통찰을 경제학에 통합한 공로로 노벨 경제학상을 수상함.
     * 그는 버논 L. 스미스와 상을 공유했으며, 스미스는 경제학에서 실험실 실험의 사용을 선도한 인물임.

연구와 책

     * 카너먼은 사람들이 자신의 직관에 너무 많은 신뢰를 두고, 인지적 노력을 기피한다고 주장함.
     * 그의 저서 ""생각에 관한 두 가지 시스템""에서는 빠르고 직관적으로 판단하는 '시스템 1'과 느리고 분석적으로 판단하는 '시스템 2'를 구분함.

행동 경제학의 선구자

     * 카너먼과 아모스 트버스키는 행동 경제학 분야를 확립하는 데 기여함.
     * 그들의 연구는 정부 정책 결정, 의료 진단, 스포츠 선수 평가 등 다양한 분야에 영향을 미침.

개인적 배경

     * 카너먼은 1934년 텔아비브에서 태어나 프랑스 파리에서 자랐으며, 나치 점령 하에서 유대인으로서의 어려움을 겪음.
     * 전쟁 후 이스라엘로 이주하여 심리학자로서의 경력을 시작함.

후속 연구와 영향

     * 카너먼은 인간의 행복에 대한 '경험된' 것과 '기억된' 것 사이의 차이를 연구함.
     * 그는 사람들이 경험의 최고점과 끝을 기준으로 전체 경험을 기억한다는 '피크-엔드 규칙'을 발견함.

GN⁺의 의견

     * 다니엘 카너먼의 연구는 인간의 비합리성을 과학적으로 입증함으로써, 우리가 일상생활에서 내리는 결정들이 얼마나 감정과 편향에 의해 좌우되는지를 보여줌.
     * 그의 연구는 인공지능과 머신러닝 분야에서 인간의 판단 오류를 보완하는 알고리즘 개발에 중요한 기초 자료를 제공함.
     * 행동 경제학은 개인의 재정 관리부터 대규모 정책 결정에 이르기까지 광범위한 응용 가능성을 가지고 있으며, 카너먼의 연구는 이 분야의 중요한 이론적 토대를 마련함.
     * 그의 저서 ""생각에 관한 두 가지 시스템""은 일반 대중에게도 큰 영향을 미쳤으며, 인간의 사고 과정에 대한 이해를 증진시키는 데 기여함.
     * 비판적으로 볼 때, 카너먼의 연구는 인간의 합리성에 대한 회의적인 시각을 강화할 수 있으나, 이는 또한 인간의 결정 메커니즘을 개선하기 위한 연구의 필요성을 강조하는 계기가 됨.

        Hacker News 의견

     * ""Thinking Fast and Slow"" 책에 대한 첫 번째 댓글 요약:
          + 책은 여전히 관련성이 높고 널리 이해되지 않은 중요한 아이디어를 다룸.
          + 책의 뒷부분은 다소 지루할 수 있으며, 시간이 부족하다면 주요 내용을 챗봇으로 요약 받을 수 있음.
          + 다니엘 카너먼은 연구 결과가 항상 견고하지 않음을 솔직하게 인정하고 지식의 한계를 인식하는 데 열려 있음.
     * 다니엘 카너먼의 사망 소식 관련 댓글 요약:
          + 노벨상 수상 경제학자 다니엘 카너먼이 90세로 사망함.
     * ""Thinking Fast and Slow"" 책에 대한 세 번째 댓글 요약:
          + 마술사 펜 질렛이 이 책을 언급한 것을 기억하며, 이 책이 마술과 어떻게 관련되는지 설명함.
          + 카너먼 박사는 마술 공연을 볼 때 뇌에서 일어나는 일을 단어로 표현함.
     * 경제학과 정책 권고에 대한 네 번째 댓글 요약:
          + 경제학이 아직 초기 단계에 있으며 많은 정책 권고가 실제보다 이념에 기반을 둠.
          + 행동 경제학과 제한된 합리성이 인정받는 데 오랜 시간이 걸린 것은 놀라운 일임.
          + 경제학은 사람들을 다루는 문제에 대한 원칙과 사고 방식의 집합이지만, 정확한 과학은 아님.
     * 다니엘 카너먼의 개성에 대한 다섯 번째 댓글 요약:
          + 카너먼은 매우 흥미로운 인물이며, ""Thinking Fast and Slow"" 외에도 카너먼과 트버스키의 경제 이론 변화 여정을 다룬 ""The Undoing Project""를 추천함.
          + 카너먼은 자신의 연구에 대한 비판적인 글에 직접 응답함.
     * 다니엘 카너먼의 이론과 정책 영향에 대한 여섯 번째 댓글 요약:
          + 카너먼의 이론은 오늘날 우리가 겪고 있는 광범위한 후견주의적 국가를 가능하게 함.
          + ""Thinking Fast and Slow""는 많은 것을 가르쳐 주지만, 동시에 회의적인 책임.
          + 원칙이 항상 우선이어야 함.
     * 경제학에 대한 카너먼의 영향에 대한 일곱 번째 댓글 요약:
          + 카너먼의 경제학에 대한 영향은 과소평가할 수 없으며, 그의 동료들과 함께 경제학의 개념을 혁신함.
          + 카너먼의 기여로 비전통적인 의견들이 더 받아들여지고 고려됨.
     * 카너먼의 협력자 아모스 트버스키에 대한 여덟 번째 댓글 요약:
          + 카너먼의 협력자인 아모스 트버스키는 1996년 젊은 나이에 사망했으며, 생존했다면 공동 수상자가 되었을 것임.
"
"https://news.hada.io/topic?id=13966","공항 건설의 어려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               공항 건설의 어려움

공항 건설이 왜 그렇게 어려운가?

     * 공항은 현대 인프라의 중요한 부분으로, 항공은 전 세계 GDP의 약 8%를 차지하며, 많은 기업의 매출이 항공 운송에 의존함.
     * 미국 내에서만 2022년에 850백만 명 이상의 승객을 수송하고, 1조 달러 이상의 경제 활동을 생성함.
     * 그러나 공항 건설은 미국뿐만 아니라 전 세계적으로 매우 어려운 과제로, 다양한 이해관계자들의 강력한 반대에 직면함.

제트 항공기와 현대 항공 여행의 시작

     * 1914년부터 시작된 상업용 항공 여행은 제트 여객기의 발명으로 대중화됨.
     * 1957년 보잉 707의 첫 비행 이후, 미국 내 항공 여행이 급증하여 1985년까지 연간 승객 수가 4억 명을 넘어섬.
     * 제트 여객기는 더 긴 활주로를 필요로 하며, 초기 제트 여객기는 소음 문제로 인해 주민들의 큰 반대에 직면함.

소음 문제

     * 제트 항공기의 소음은 주민들에게 큰 문제가 되었으며, 소음으로 인한 부동산 가치 하락과 환경 운동가들의 반대가 있었음.
     * 소음을 줄이기 위한 기술 개발과 규제 강화에도 불구하고, 항공 트래픽 증가로 인해 소음 문제는 지속됨.
     * 공항은 소음 저감을 위해 주변 주택에 방음 설비를 설치하거나 소음 영향을 받는 지역의 토지를 매입하는 등의 조치를 취함.

공항 건설의 어려움

     * 공항은 매우 큰 규모를 요구하며, 도시 근처에 건설되면 도시 확장으로 인해 결국 소음 문제에 직면함.
     * 환경주의자들은 공항 건설이 생태계에 미치는 영향을 이유로 공항 건설에 반대함.
     * 항공사들도 기존 공항에 대한 투자가 있기 때문에 새로운 공항 건설에 반대하는 경우가 있음.

항공 트래픽 증가 전략

     * 공항 확장이 어려움에도 불구하고, 새로운 활주로 추가, 인프라 재건축, 기술 도입 등을 통해 항공 트래픽을 증가시킴.
     * 항공기의 크기 증가와 효율적인 스케줄 조정을 통해 같은 수의 활주로에서 더 많은 승객을 수송할 수 있게 됨.
     * 공항의 수익성 덕분에 확장을 위한 자금 조달은 다른 인프라에 비해 상대적으로 쉬운 편임.

GN⁺의 의견

     * 공항 건설이 어려운 이유는 기술적, 환경적, 사회적 요인이 복합적으로 작용하기 때문임. 특히 소음 문제는 주민들의 삶의 질에 직접적인 영향을 미치기 때문에 민감한 이슈다.
     * 공항 건설에 대한 반대는 NIMBY 현상의 극단적인 예로 볼 수 있으며, 이는 지역 사회의 이익과 전체 사회의 이익 사이의 균형을 찾는 것이 중요함을 보여줌.
     * 현재 항공 산업은 드론 운송, 전기 항공기 등 새로운 기술의 도입으로 변화하고 있으며, 이러한 기술들이 공항 인프라에 어떤 영향을 미칠지 주목할 필요가 있음.
     * 공항 건설과 확장에 대한 반대를 극복하기 위해서는 지역 사회와의 협력과 투명한 의사 결정 과정이 필요함.
     * 이 기사는 항공 인프라의 중요성과 건설의 복잡성을 이해하는 데 도움이 되며, 항공 산업에 관심 있는 이들에게 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 도쿄로 여행하는 경우 나리타 공항(NRT)을 통해 입국할 수 있는데, 실제로 도쿄에서 상당히 멀리 떨어져 있음. 현대 일본에서 폭력은 매우 드물지만, NRT는 수십 년에 걸쳐 폭력적인 저항의 장소였음. 반대 세력이 여러 경찰을 살해하고 여러 차례 폭동을 일으키며, 시험 비행을 방해하기 위해 200피트 높이의 거대한 탑을 건설했음. 수년에 걸쳐 수백 건의 훼손 행위가 발생했으며, 최근까지도 계속됨.
          + Sanrizuka Struggle 참조
     * 시애틀 지역에서 '다음' 공항이 어디에 위치해야 할지에 대한 논의가 있었으나, 아무도 그것을 원하지 않는다는 것이 합의점임. 주 의회가 잠재적인 위치를 찾기 위한 위원회를 만들었지만, 대중의 반발이 너무 커서 실제 추천 사항 없이 최종 보고서를 제출함. SEA가 세 번째 활주로를 추가할 때도 제안된 바 있는 흥미로운 아이디어 중 하나는 중부 워싱턴의 모세스 레이크 공항으로 고속철도를 운행하고 그곳을 확장하는 것이었지만, 이는 주요 공항과 새로운 기차를 건설해야 한다는 의미에서 의심스러움.
     * randomairport.onrender.com을 구축하면서 미국과 유럽의 공항이 항상 매우 다르게 보이는 것을 알아차림. 미국 공항은 항상 활주로 방향을 포함해 밀집된 주거 지역에 둘러싸여 있는 반면, 유럽 공항은 이러한 문제가 없어 보임. 또한 미국 공항은 유럽 공항에 비해 훨씬 큰 부지를 차지하는 것으로 보임. 이는 미국 도시들이 인구와 면적 모두에서 더 크기 때문이라고 가정함(인구 밀도가 낮음).
     * 독일 뮌헨에서는 1960년대에 뮌헨/리엠 공항의 후계자로서 새로운 공항 계획이 시작됨. 1980년에 건설이 시작되어 1992년에 운영을 시작함. 당연히 Erdinger Moos 지역 사람들은 공항 건설 결정을 좋아하지 않았고, 많은 소송이 이어져 건설이 3년간 중단됨. 결국 마지막 소송에서는 다른 항소 옵션이 없어 그대로 진행됨. 결국 국가 이익의 문제로 귀결되어, 공항이 필요하고 어딘가에는 건설되어야 하기 때문에 개인이 이러한 프로젝트를 중단시킬 수 없음.
     * 공항은 도시에서 너무 멀리 떨어져 있으면 유용성이 떨어짐. 여행자들이 도시에 접근할 필요가 있고, 근로자들은 출퇴근 거리 내에 있어야 함. 캐나다에서는 몬트리올에서 35마일 떨어진 곳에 Mirabel 공항이 건설되었으며, 부적합한 토지 사용 문제를 방지하기 위해 79,000 에이커의 완충 지대로 둘러싸여 있음. Mirabel은 캐나다의 주요 동부 공항으로 몬트리올-트뤼도를 대체할 것으로 예상되었지만, 도시로부터의 거리 때문에 결코 그렇게 되지 않았고, 2004년에 승객 운송을 중단함. 이는 거리 때문이 아니라 매우 어리석은 관리 부족과 연결 부족 때문임. 기존 공항은 국내선을 계속 운영했고, 국제선은 Mirabel로 이전되었는데, 이는 몬트리올이 캐나다 내에서 국제선 도착과 직접 서비스되지 않는 작은 지역 간의 주요 환승 지점이었기 때문에 매우 어리석은
       결정임. 그 결과 몬트리올 공항의 대부분의 유용성이 사라졌고, 항공사들은 캐나다의 다른 공항을 이용하기 시작함. 또한, 공항에는 좋은 연결이 없었으며, 적어도 어느 정도 빠른 철도 연결 없이는 개장해서는 안 되었지만, 좋은 도로나 철도 연결이 없었음. 또한, 잘못된 위치에 공항이 건설되었음. 잠재적인 위치 중 하나는 오타와와 몬트리올 사이에 있었고 두 도시 모두에 서비스할 수 있었지만, 정치인들은 그것을 원하지 않았음.
     * 또 다른 비교적 새로운 공항으로, 도심에서 약 33km(20마일) 떨어진 뮌헨 공항이 있으며, 1992년에 개장함. 공항이 계획될 당시(1960년대) '상대적으로 인구가 적은 지역'의 두 주요 후보지는 뮌헨 북쪽의 습지대(Erdinger Moos)와 남쪽의 숲(Hofoldinger Forst)이었음. 습지를 선택했는데, 이로 인해 자주 안개 문제가 발생함. 그리고 새 공항과 구 공항의 경쟁 문제는 단순히 구 공항을 폐쇄함으로써 해결함(구 공항과 새 공항을 운영하는 회사가 같으므로 여기에 대한 항의는 없었음). 심지어 일부 장비는 하룻밤 사이에 구 공항에서 새 공항으로 이전됨. 그러나 계획에서 개장까지 30년이 걸린 것으로 보아, 이 원격 위치조차도 갈등 없이는 아니었음. 개장 후 30년이 넘었지만 여전히 공항까지 빠른 기차가 없음. 뮌헨-뉘른베르크 고속철도 노선이 공항을 경유할 수
       있었지만(소문에 따르면) 뉘른베르크 공항을 보호하기 위해 이루어지지 않았음. 그 후 초고속 열차(Transrapid)에 대한 계획이 2000년대 초에 취소됨. 현재 계획은 Express S-Bahn 노선이지만, 도심의 S-Bahn 터널이 더 이상의 열차를 수용할 수 없기 때문에, 이는 두 번째 S-Bahn 터널이 완성될 때까지만 가능함(현재 완공 예정일은 계속 연기되고 있으며, 현재는 2035년임).
     * 기사에서 지적한 바와 같이, 시카고의 두 공항을 확장하는 것은 불가능함. 새로운 공항을 건설하는 것이 거의 불가능하기 때문에, 그들은 '새로운' 공항을 건설할 계획임. 즉, 하루에 몇 대의 세스나 비행기만 운영하는 이 작은 공항이 4,000에이커 규모의 주요 국제 공항으로 '성장'할 예정임. 전체 면적이 확장되면 서쪽 가장자리는 시카고 통근 철도 노선과 시카고-UIUC-멤피스-뉴올리언스 노선을 운영하는 Amtrak 노선이 지나가는 철도 우선권을 가짐. 그리고 그 서쪽 1마일에는 기존의 주간 고속도로와 교차로가 있음. 공항 경계 외부에 필요한 인프라는 거의 없음. 그럼에도 불구하고 여전히 많은 반대가 있으며, 일정이 수년간 지연됨.
          + Google Maps
          + Bult Field
     * 70년대 프랑스 영화 ""Nous irons tous au paradis""에서 친구들이 국제 공항 옆에 있는 집을 매우 저렴한 가격에 구입함. 공항 교통 관제사들이 파업 중일 때 집을 방문했기 때문에 그들의 행운을 믿을 수 없었음. 물론 그들이 먼저 확인하지 않은 것은 다소 어처구니없지만, 어느 정도는 말이 됨.
          + YouTube Scene
     * 터미널과 실제 비행 작업 영역이 몇 마일 떨어져 있는 공항을 건설해본 적이 있는지 궁금함. 기본적으로 도심에 위치한 기차역(플러스 TSA 및 세관)과 같은 곳을 상상하고 있음. 여기서 체크인, 보안 검색, 수하물 수취 등이 이루어짐. 보안 검색을 마친 후, 어떤 종류의 철도 교통수단(모노레일, 매그레브, 지하철 등)을 타고 비행 영역까지 10-15분 내에 도착할 수 있음. 사람들이 편리한 곳에 위치하고, 시끄러운 곳은 그렇지 않은 곳에 위치시킴.
     * 제트 엔진 소음이 상당히 감소한 것을 보는 것은 매우 흥미로움. 기사를 읽는 동안 소음 감소에 투자하는 것이 정말로 보상을 받을 것 같다는 생각을 계속 하고 있었고, 그러다 몇 단락 뒤에 그 내용이 나옴. 리우의 산토스 두몽트 공항과 같은 작은 공항에도 매료됨. 세계에서 가장 짧은 활주로를 가지고 있음. 소음을 줄이고 오염을 통제할 수 있다면, 오리건 주 포틀랜드처럼 대중 교통으로 접근할 수 있는 공항이 매우 좋음. 정부의 개입에 적합한 지점으로 보임.
"
"https://news.hada.io/topic?id=14076","산타바바라의 집단 기억, 장작용으로 팔리다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        산타바바라의 집단 기억, 장작용으로 팔리다

산타바바라의 집단 기억, 장작으로 팔리다

     * 산타바바라 뉴스-프레스는 1868년부터 155년간 지역 사회의 이야기를 기록한 신문으로, 출생, 졸업, 결혼, 사망 등의 사건들을 실시간으로 전달함.
     * 디지털 아카이브는 파산한 신문의 자산이 경매에 부쳐지면서 영구히 손실될 위험에 처해 있음.

The Sandbagger

     * 2000년에 웬디 맥코가 뉴욕 타임스로부터 산타바바라 뉴스-프레스를 약 1억 1천만 달러에 인수함.
     * 맥코는 2006년부터 편집 독립성에 간섭을 시작하여 기사를 조작하려 시도함.
     * 이로 인해 직원들의 대규모 이탈과 맥코의 공격적인 법적 및 공개적 비방 캠페인이 발생함.
     * 신문은 2023년 7월 21일에 파산을 선언하고, 맥코는 신문사의 부동산을 개인 LLC로 이전하여 자산을 숨김.

The Backlinks Endgame

     * 파산 법원은 신문의 ""온라인 자산""을 매각하여 채권자에게 돈을 갚으려 함.
     * 온라인 콘텐츠, 소셜 미디어 계정, 상표, 웹사이트 도메인 이름 등이 포함됨.
     * 몰타에 본사를 둔 Weyaweya, Ltd.가 25만 달러에 자산을 구매하기로 잠정 합의함.
     * 이 회사는 SEO 서비스를 제공하는 Link.Builders와 연계되어 있으며, 높은 품질의 백링크를 제공하여 검색 엔진 순위를 높이는 데 사용될 가능성이 있음.

The Public Responsibility

     * 신문은 사적 기업이지만 공공 신탁처럼 운영되어 중요한 지역 보도를 제공함.
     * 산타바바라 뉴스-프레스의 디지털 아카이브는 다른 곳에 완전한 기록이 없어, 지역 사회의 역사를 구할 마지막 기회가 될 수 있음.
     * 4월 9일 오후 2시에 미국 파산 법원에서 생방송 경매가 진행될 예정이며, 지역 사회 구성원들이 참여하여 아카이브를 구매하고 역사를 보존할 수 있음.

GN⁺의 의견

     * 이 기사는 디지털 시대에 지역 신문의 중요성과 온라인 아카이브의 취약성을 강조함. 지역 신문의 아카이브가 어떻게 상업적 이익을 위해 남용될 수 있는지 보여줌.
     * SEO 및 백링크 판매 산업의 윤리적 문제를 드러내며, 인터넷에서의 정보 보존과 접근성에 대한 중요한 논의를 촉발함.
     * 이와 유사한 상황을 방지하기 위해, 지역 신문들은 디지털 아카이브를 안전하게 보존하고 공공 도서관이나 교육 기관과 협력하여 접근성을 높일 필요가 있음.
     * 기술적으로는 블록체인과 같은 분산 원장 기술을 활용하여 디지털 콘텐츠의 무결성과 영속성을 보장하는 방법을 고려할 수 있음.
     * 이 기사는 지역 사회의 역사를 디지털 방식으로 보존하는 것이 단순히 기록을 넘어서 지역 정체성과 문화 유산을 지키는 행위임을 상기시킴.

        Hacker News 의견

     *
          + 스포츠 사이트 Deadspin이 몰타의 온라인 게임 제휴 산업과 밀접한 관련이 있는 투자자들에게 팔렸다는 사실을 작은 저널리스트/연구자 그룹과 함께 밝혀냈다. Deadspin 인수의 주요 인물 중 한 명이 높은 SEO 가치를 지닌 파산한 신문 웹사이트(NewsPress.com)를 구매하려 하고 있음이 드러났다. 이러한 사실은 지역사회의 역사를 위험에 빠뜨릴 수 있는 중요한 문제로, 도메인 구매와 관련하여 미래에 볼 수 있는 전조일 수 있다.
     *
          + 최근에 SEO 회사들이 소규모 미국 지방 신문의 도메인 이름과 디지털 콘텐츠 아카이브를 인수하여 링크 농장으로 전환하는 산업 추세가 나타나고 있다. 이러한 링크 농장이 앞으로 2~3년 후에도 가치가 있을지에 대한 의문이 제기됨.
     *
          + AI가 더 나은 검색 결과를 제공하는 것뿐만 아니라, 광고와 SEO 최적화된 쓰레기로 어지럽혀진 구글 검색 쿼리의 오랜 하락세도 문제의 일부임.
     *
          + archive.org가 해결하지 못하는 이 문제의 어떤 부분이 있을까?
     *
          + 신문이 2023년 7월 21일에 파산을 선언했으며, 법원 기록에는 신문의 역사적인 De la Guerra Plaza 본사와 Goleta 인쇄소 부동산을 개인 LLC로 옮겨 놓은 McCaw에 의해 116,000달러라는 비현실적으로 낮은 자산 가치가 나타났다. 이는 사설 투자 분야에서 흔히 볼 수 있는 전략으로, 부동산을 다른 법인에 분리한 후 그 법인이 원래 회사에 임대료를 부과하는 방식이다.
     *
          + 어시스트리빙 홈을 말살하는 방법도 비슷하다. 비용 절감 대신 임대료를 계속 올려, 직원들이 비용을 절감하려 애쓰고, 결국은 더 이상 짜낼 것이 없어 임대료를 못 내고 문을 닫게 된다.
     *
          + 몇 년 동안 그곳에서 일했던 한 사람은 사람들이 이 지역 보물에 관심을 가지게 되어 기쁘다고 말함.
     *
          + 도메인 이름에 대한 입찰에 관심이 많을 것이지만, 도메인 이름을 소유한 회사에 대한 입찰은 그렇지 않을 것이다. 도메인 이름은 별도로 경매에 부쳐야 하지만, 파산 법원은 올바른 방법보다는 자신들에게 가장 쉬운 방법을 선호한다.
     *
          + archive.org와 협력하여 사이트의 마지막 버전을 미러링하는 것이 가능한가?
     *
          + 이전의 목소리들이 더 자주 뭉쳐서 같은 지역 주제를 다루는 저렴한 호스팅 사이트를 운영해보는 것이 아쉽다. 더 이상 인쇄 및 유통 비용이나 사무실 임대료를 부담할 필요가 없다. 필자는 이에 대해 지불할 의향이 있으며, 이런 생각을 가진 사람이 나 혼자만은 아닐 것이다.
     *
          + 약 88,000명의 주민이 있는 도시에서 250,000달러 이상을 경매에서 지불하는 것은 큰 문제가 아닐 수 있으며, 이는 주민들이 이 아카이브를 얼마나 가치 있게 여기는지의 문제이다.
     *
          + 신문 아카이브의 손실이 아니라, 현재 시스템이 얼마나 망가져 있는지를 보여주는 것이 진짜 문제이다. SEO 링크 농장과 AI 생성 쓰레기가 지역사회의 역사를 대체하고, 사설 투자 회사에 의해 주요 부동산이 텅 비게 되며, 이 모든 것이 우리의 공동 복지에 아무런 이해관계가 없는 외국에 등록된 비밀스러운 기업들에 의해 이루어진다. 이를 자본주의로 옹호하는 사람들도 있지만, '시장'은 인간이 아니며, 시장이 유지하기로 결정한 것은 필자가 인간으로서 속하고 싶지 않은 것이다.
"
"https://news.hada.io/topic?id=14053","사용자 데이터를 보유하지 않으면 유출할 수 없습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      사용자 데이터를 보유하지 않으면 유출할 수 없습니다

Matter와 개인정보

     * Matter라는 회사에서 기술 부사장으로 일하며, 사용자의 긍정적인 경험을 기록하고 나중에 이를 회상하여 행복을 증진시키는 앱 개발에 참여함.
     * 초기에는 웰니스(Wellness) 개념에 대한 회의적인 시각을 가졌으나, 기술이 사용자들이 긍정적인 경험을 회상함으로써 실제로 행복감을 증진시킬 수 있다는 데 설득됨.
     * 과학적 증거가 있으며, 이는 사용자의 뇌가 긍정적인 경험을 회상할 때 행복 화학물질을 생성하여 실제로 행복감을 느끼게 한다는 것을 증명함.

사용자 데이터의 개인정보 보호

     * 사용자의 개인 데이터를 어떻게 처리할지에 대한 고민을 통해, 사용자 개인정보 보호를 핵심 가치로 채택함.
     * 사용자 데이터에 대한 위협을 모델링하고, 이를 기반으로 앱과 데이터 처리 시스템의 여러 결정을 내림.
     * 사용자 데이터를 보호하는 것이 제품 설계의 기초가 되어야 하며, 나중에 추가하는 것은 실수가 발생하기 쉽거나 불가능할 수 있음을 인식함.

핵심 원칙과 데이터 보호

     * 사용자와의 신뢰 구축, 데이터 유출 방지, 미래의 통제력에 대한 저항력 확보를 위한 핵심 원칙을 설정함.
     * 데이터센터 구축 등 극단적인 방안에 대한 논의를 거쳐, 사용자의 개인 데이터를 절대 보유하지 않기로 결정함.

사용자 데이터의 처리 방식

     * 사용자가 앱에서 감정을 평가할 때, Matter 시스템은 그 데이터를 수집하거나 알 수 없도록 설계함.
     * 사용자의 데이터는 서버가 아닌 사용자의 기기에 저장되며, 개인 데이터베이스에 저장되어도 Matter가 접근할 수 없음.
     * 사용자의 데이터는 앱 내에서만 처리되며, Matter는 결과만 알 수 있고, 그 과정이나 내용은 알 수 없음.

사용자 식별과 데이터 복구

     * 사용자를 특정할 수 없으며, 이메일 주소조차 갖고 있지 않아 데이터 복구가 불가능함.
     * 앱은 백업/복원 기능을 제공하며, 사용자가 데이터 손실을 방지하기 위해 이를 사용하도록 기대함.
     * 사용자가 자신을 식별하지 않고도 데이터를 저장할 수 있는 방법에 대해 고민 중이며, 베타 버전이 끝나기 전에 앱에 구현할 예정임.

개인정보 보호 정책

     * Matter의 개인정보 보호 정책은 법적으로 구속력이 있으며, 이를 준수함.
     * 개인정보 보호 구현을 감독하는 것은 매우 보람찬 일이며, 이 분야에서 십여 년간 심각하게 고민해온 경험이 있음.

GN⁺의 의견

     * Matter의 접근 방식은 사용자의 개인정보 보호에 대한 새로운 기준을 제시함. 이는 데이터 보호에 대한 사용자의 우려를 해소할 수 있는 모범 사례로 볼 수 있음.
     * 앱이 사용자의 데이터를 서버에 저장하지 않고, 사용자의 기기 내에서만 처리하는 방식은 데이터 유출 위험을 최소화하지만, 데이터 손실 시 복구가 어렵다는 단점이 있음.
     * 이러한 개인정보 보호 방식은 법적 요구나 해킹 시도에 대한 저항력을 강화하지만, 사용자가 데이터를 백업하고 관리할 책임이 더 커짐.
     * 유사한 기능을 제공하는 다른 앱이나 서비스를 찾기 어려울 수 있으며, Matter의 접근 방식은 업계에서 독특함.
     * Matter와 같은 기술을 도입할 때는 사용자 경험과 데이터 관리의 균형을 고려해야 하며, 사용자의 데이터 보호를 최우선으로 하는 기업 문화의 중요성을 인식해야 함.

        Hacker News 의견

     * 정보를 저장하지 않으면 유출할 수 없다는 핵심 아이디어에 동의함. 법적 체계가 결과에 기반을 둬 이러한 사고방식을 더 장려해야 한다고 생각함. 해킹당해도 모든 것을 올바르게 했다 해도 중요하지 않고, 중요한 것은 개인 정보가 도난당했다는 사실임. 업계가 옳다고 생각하는 것을 했더라도 책임을 져야 함.
     * 자신의 웹사이트에서 이 원칙을 따름. 사용자 계정을 원하지 않으므로 무언가를 구매하면 고유 링크를 이메일로 보냄. 로그인과 비밀번호가 필요 없고, 원한다면 일회용 이메일 주소를 사용할 수 있음. 인수될 때 사용자 데이터에 대해 걱정할 필요가 없음.
     * 대규모 데이터 저장소에 대한 데이터 거주, 무결성, 기밀성 조치에 대해 공감함. 회사가 그 데이터를 수집하지 않기로 선택할 수도 있음. ""당신의 기기에만 남아 있고, 우리는 절대 보지 않음""이라는 모델을 매우 좋아함. 그러나 그들의 측정 시스템이 그들에게 반대로 사용될 것이라는 주장에 의문을 가짐.
     * Sentinel Devices에서는 산업 기계를 위해 ""우리는 당신의 데이터를 보관하지 않음"" 접근 방식을 취하고 있음. 공기 차단된 자동화된 AI 파이프라인을 생각해봄. 채용 중이니 관심이 있다면 hello@sentineldevices.com으로 연락 바람.
     * B2B SaaS는 엔터프라이즈 가격으로 SSO를 청구하는 것을 중단하고 IdP 또는 Oauth/OIDC/기타 흐름을 요구해야 함. 그러면 계정 자격 증명을 잃을 위험이 없음.
     * 관련 개념으로 Datensparsamkeit가 있음.
     * 개인정보 보호 정책에서는 변경 사항이 있을 경우 여기에 업데이트하고 효력 발생일을 업데이트함. (모든 사람의 이메일 주소를 수집하지 않기 때문에 변경 사항에 대해 이메일로 알릴 수 없음.) 정책 변경은 소급 적용되지 않음.
     * 이것은 자신의 관점과 잘 맞음. 이로 인해 동료들 사이에서 인기가 없어짐. 이 산업 전체가 PID 수집에 완전히 젖어 있고, 매우 무심한 처리를 함. 솔리테어 앱이 리더보드와 챌린지 가입을 계속 요구함.
     * Mullvad는 훌륭한 예로, 비밀번호를 선택하길 원하지 않으며 현금을 우편으로 보내는 것으로 결제를 받아들임.
     * 건강 데이터에 대해서는 매우 민감한 주제임. 너무 많은 앱이 데이터를 좌우로 보내고 있고, 23andme 스캔들 등이 있음. Carrot Care와 같은 몇 안 되는 앱만이 훌륭한 철학을 채택함.
     * 저자의 블로그 탐색에 더 관심이 있음. 매우 멋짐!
"
"https://news.hada.io/topic?id=14069","UV-K5, 지금까지 가장 해킹 가능한 휴대용 햄 라디오","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    UV-K5, 지금까지 가장 해킹 가능한 휴대용 햄 라디오

가장 해킹하기 쉬운 휴대용 햄 라디오, UV-K5

     * UV-K5 라디오는 몇 번의 클릭만으로 새로운 기능을 추가하거나 자신만의 부팅 화면을 업로드할 수 있음.

GN⁺의 의견

     * UV-K5 햄 라디오는 사용자 친화적인 인터페이스를 통해 쉽게 수정 및 개조가 가능하여 라디오 애호가들에게 흥미로운 제품이 될 수 있음.
     * 이러한 개방성은 사용자가 자신의 필요에 맞게 기기를 맞춤화할 수 있는 기회를 제공하지만, 동시에 잘못된 수정으로 인한 기기 손상의 위험도 있음을 사용자는 인지해야 함.
     * 비슷한 기능을 제공하는 다른 햄 라디오 제품으로는 Yaesu, Kenwood, Icom 등이 있으며, 각각의 제품은 사용자의 요구에 따라 선택될 수 있음.
     * UV-K5와 같은 기술을 도입할 때는 사용자 커뮤니티의 지원, 소프트웨어의 안정성 및 호환성 등을 고려해야 하며, 이를 통해 사용자는 더욱 풍부한 기능과 개인화된 경험을 얻을 수 있음.
     * 오픈소스 기반의 햄 라디오는 사용자가 직접 기능을 개발하고 공유할 수 있는 장점이 있지만, 기술적 지식이 부족한 사용자에게는 다소 어려움이 있을 수 있으므로, 사용 전 충분한 학습과 이해가 필요함.

        Hacker News 의견

     * 사용자들은 이 라디오를 위해 개발된 맞춤 펌웨어에 깊은 인상을 받음. egzumer가 작성한 펌웨어는 스펙트럼 분석기까지 포함하고 있음.
          + 그러나 라디오 자체는 30달러짜리 수입품에서 기대할 수 있는 수준임. 프론트엔드가 쉽게 과부하되고, 전송 시 생성되는 고조파는 FCC가 허용하는 범위를 훨씬 벗어남.
          + 그럼에도 불구하고, 아마추어 무선에 입문하는 데 있어서는 매우 가치 있는 제품임.
     * 사용자는 충동구매의 임계점 아래 가격이라며 한 대 구입함. 취미를 위한 구매로, 박스에 오래 놓아두지 않고 해킹을 시도해보고 싶은 욕구가 있음.
          + 더 많은 제조업체들이 이러한 장치의 펌웨어를 개방하길 바람. 공장 출하 시 기본 안전장치는 유지하되, 개조를 허용해야 한다고 생각함.
          + 저렴하고 해킹 가능한 제품들은 사람들이 라디오에 관심을 갖게 하는 데 도움이 됨, 특히 WebSerial 같은 친숙한 도구를 사용하여 관리할 수 있다면 더욱 그러함.
     * 이 제품들이 캐나다 달러로 24달러에 무료 배송으로 판매되고 있음에 놀람. 이렇게 저렴한 가격이 어떻게 가능한지 이해할 수 없음.
          + 재료 비용만 해도 더 많이 들 것 같은데, 이 경제적 원리를 설명해 줄 수 있는 사람이 필요함.
     * 제품 페이지에는 음성 암호화 기능이 있다고 홍보하고 있지만, 이것이 미국의 아마추어 무선 대역에서 여전히 불법이 아닌지 의문을 제기함.
          + 아니면 CTCSS/DCS를 언급하는 것일까?
     * 사용자는 이전에 Aliexpress에서 20캐나다 달러에 하나를 구입했으나, 스피커가 간헐적으로만 작동하여 케이스를 눌러야만 함.
          + 판매자에게 연락했지만 아무런 해결책을 얻지 못함. ""구매자 주의""가 필요한 상황으로, 이 제품들이 매우 저렴한 이유가 있음.
     * 커뮤니티가 해내는 것은 놀라운 일이지만, 왜 이런 해킹 가능한 장치들이 낮은 전력의 칩을 사용하는지 여전히 궁금함.
          + 시장에 나와 있는 많은 제품들이 특수한 입출력을 갖춘 컴퓨터와 다름없지만, 대부분의 펌웨어와 MCU는 하드웨어의 전체 잠재력을 발휘하지 못함.
          + 몇 달러를 더 투자하면 수백 가지의 기능을 추가할 수 있을 것임.
     * 웹사이트와 매뉴얼은 ""10개의 음성 암호화 그룹""에 대해 언급하지만, 이것이 실제로 무엇을 의미하는지 구체적으로 설명하지 않음.
          + 이러한 장치를 사용하여 정말 좋은 암호화 통신 시스템을 만드는 데 필요한 것이 무엇인지 항상 궁금해함. 그러나 아마추어 무선에서의 암호화 전송은 불법이라는 것을 이해함.
     * BK4819 데이터시트를 찾아보니, 이 칩이 이 장비의 핵심이며, 수신 시 I/Q 출력이 있고, 전송 시 내부적으로 I/Q 입력이 가능한 것으로 보임. 따라서 FM만이 아닌 SDR이며, 낮은 출력 전력은 시야 내에서만 사용 가능할 것으로 보이지만, 작업을 위한 흥미로운 기반이 됨.
     * 누군가가 이 장치들에 FT8을 포팅하기를 기대함. 현재는 FT8을 송수신하기 위해 전화나 PC가 필요함.
     * 스펙 시트에서 주목할 만한 것은 해머 라디오에는 있어서는 안 될 스크램블러가 있음. DTS/CTCSS와 같은 실제 암호화가 아닌 것을 의미하는지는 모르겠지만, 사용자 매뉴얼에는 암호화라는 단어가 나옴. 이것이 번역의 문제일 수도 있음.
          + 이 장치를 가진 사람이 해당 기능에 대해 더 명확히 설명할 수 있는지 궁금함.
"
"https://news.hada.io/topic?id=14029","TraceCat - AI 기반의 보안 경고 자동화 도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  TraceCat - AI 기반의 보안 경고 자동화 도구 오픈소스

     * Tines / Splunk SOAR 의 오픈소스 대체제
     * 오픈소스 AI 인프라와 GPT 모델을 활용하여 엔터프라이즈 등급의 도구를 작성
     * 중소 규모 팀에서 간단하지만 강력한 보안 자동화를 구축 가능

주요 기능

     * 워크플로우: Drag&Drop 빌더, AI 액션
     * 케이스 관리: SMAC(status, malice, action, context), AI 라벨링 지원
     * 이벤트 로그: 무제한 로그 저장소, 로그 검색
     * 데이터 검증 : Pydantic V2, Zod
     * AI 인프라: RAG용 벡터 DB
"
"https://news.hada.io/topic?id=14045","NotepadNext - Notepad++의 크로스플랫폼 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NotepadNext - Notepad++의 크로스플랫폼 구현체

     * Notepad Next는 Notepad++의 크로스 플랫폼 재구현 버전임
     * 2019년부터 개발되어 현재 0.7 버전. C++(VS2022)와 Qt로 개발
     * 윈도우/맥/리눅스용(AppImage/Flatpak) 패키지 배포
     * 전반적으로 안정적이고 사용 가능하지만, 매우 중요한 작업에 사용하기에는 안전하지 않음

설치 방법

     * Windows, Linux, MacOS용 패키지 제공.
     * Windows 패키지는 설치 프로그램 또는 릴리스 페이지에서 독립 실행형 zip 파일로 제공됨.
     * 설치 프로그램은 자동 업데이터 및 Windows 컨텍스트 메뉴 통합과 같은 추가 구성 요소를 제공함.
     * Winget을 사용하여 쉽게 설치 가능: winget install dail8859.NotepadNext
     * Linux 패키지는 릴리스 페이지에서 독립 실행형 AppImage를 다운로드하거나, flatpak을 설치하여 획득 가능: flatpak install flathub com.github.dail8859.NotepadNext
     * MacOS 디스크 이미지는 릴리스 페이지에서 다운로드 가능.

MacOS 조정

     * MacOS는 기본적으로 폰트 스무딩을 활성화하여 Windows 버전과 다르게 텍스트가 표시됨.
     * 시스템 전체에서 폰트 스무딩을 비활성화하려면 다음 명령어 사용: defaults -currentHost write -g AppleFontSmoothing -int 0
     * 이 설정을 적용하려면 재시작 필요.

개발 상황

     * 현재 개발은 Windows에서 Visual Studio 2022와 Qt v6.2+를 사용하여 진행 중.
     * 다양한 Linux 배포판과 macOS에서도 성공적으로 빌드 가능.
     * 다른 플랫폼/컴파일러도 소소한 수정을 통해 사용 가능.
     * C++ Qt 데스크톱 애플리케이션 빌딩에 익숙한 경우, src/NotepadNext.pro 파일을 열고 프로젝트를 빌드/실행하기만 하면 됨.
     * C++ Qt 데스크톱 애플리케이션 빌딩이 처음이라면, 여기에 더 자세한 가이드가 있음.

GN⁺의 의견

     * Notepad Next는 오픈소스 커뮤니티에서 활발히 개발되고 있는 Notepad++의 대안으로, 다양한 운영 체제에서 사용할 수 있는 장점이 있음.
     * 현재 버그와 미완성 기능이 존재하기 때문에, 사용자들은 중요한 작업에 사용하기 전에 충분한 테스트와 검토가 필요함.
     * 이와 유사한 기능을 제공하는 다른 오픈소스 텍스트 에디터로는 Atom, Sublime Text, Visual Studio Code 등이 있으며, 이들은 각각 독특한 기능과 플러그인 생태계를 가지고 있음

        Hacker News 의견

     * Notepad++와 이 앱은 Scintilla 기반으로, 고품질의 오픈 소스 코드 편집기 컴포넌트임을 강조함. Scintilla의 공식 데모 에디터인 SciTE는 1999년부터 시작되어 2024년 3월 9일에 마지막으로 업데이트됨.

          + Notepad++와 이 앱은 Scintilla에 기반을 둔 것으로, Scintilla는 고품질의 오픈 소스 코드 에디터 컴포넌트임. SciTE는 Scintilla의 공식 데모 에디터로, 1999년부터 시작되어 2024년 3월 9일에 최신 업데이트가 있었음.

     * Notepad++는 빠른 메모 작성과 창을 닫을 때 저장 여부를 묻지 않는 기능, 자동 저장으로 문서 손실 방지 등의 이유로 Notepad를 대체함. Notepad++는 우수한 소프트웨어로, Kate 에디터에서도 같은 워크플로우가 가능한지 궁금함.

          + Notepad++는 메모 작성 후 창을 닫을 때 저장 여부를 묻지 않고, 자동 저장 기능이 있어 문서 손실을 방지하는 등의 이유로 Notepad를 대체했음. Notepad++는 훌륭한 소프트웨어이며, Kate 에디터에서도 비슷한 사용 경험을 제공하는지에 대한 궁금증이 있음.

     * 해당 앱의 시작 속도가 매우 빠르며, Notepad++와 비슷하거나 약간 더 빠른 것으로 보임. Qt가 이렇게 빠를 수 있다는 것에 놀람. PDF 리더와 메모장 에디터는 다르고, 시작 속도는 하나의 척도에 불과하지만, Notepad++의 빠른 속도가 네이티브 API 덕분이라고 생각했음.

          + 이 앱의 시작 속도가 매우 빠르며, Notepad++와 비슷하거나 더 빠른 것으로 테스트됨. Qt의 빠른 성능에 놀라움을 표함. Notepad++의 빠른 속도가 네이티브 API 사용 때문이라고 가정했었음.

     * Notepad++에 대한 긍정적인 피드백이 많지만, 사용자 인터페이스에 많은 작은 버튼이 있어 복잡하고 산만하다고 느낌. JetBrains IDE와 같이 기능은 많지만 UI가 깔끔한 도구를 선호함.

          + Notepad++에 대해 일반적으로 긍정적인 의견이 많지만, 사용자 인터페이스가 복잡하고 산만하다고 느껴져 사용하지 않음. 기능은 많지만 UI가 깔끔한 JetBrains IDE를 선호함.

     * ecode라는 NP++와 비슷한 멀티 플랫폼 코드 에디터 개발 중이며, LSP와 같은 현대적인 도구와 기술을 사용하여 새로운 접근 방식을 시도함. Geany를 오랫동안 사용했지만 필요한 기능이 부족하여 ecode 개발을 시작함. ecode는 빠른 시작 시간을 목표로 개발됨.

          + ecode라는 NP++와 유사한 멀티 플랫폼 코드 에디터를 개발 중이며, LSP와 같은 현대적인 도구를 사용하여 새로운 접근 방식을 시도함. Geany의 부족한 기능을 보완하기 위해 ecode 개발을 시작했으며, 빠른 시작 시간에 중점을 둠.

     * Notepad++는 리눅스로 전환했을 때 가장 그리워한 앱 중 하나였으며, 게임 외에 다른 OS로 재부팅하는 주된 이유였음. 결국 emacs와 vim을 배웠고, 오늘날에는 Codium으로 전환했을 것임. Sublime Text 사용은 피함.

          + 리눅스로 전환한 후 Notepad++를 대체할 앱을 찾기 어려웠으며, 결국 emacs와 vim을 배워 사용함. 현재는 Codium을 사용할 것이며, Sublime Text 사용은 피함을 강조함.

     * Notepad++는 20년 동안 활발히 유지되고 있는 윈도우용 텍스트 에디터로, 가벼우면서 반응성이 뛰어남. 텍스트 검색/교체 인터페이스를 좋아하며, 휴대용 버전을 항상 휴대함. NotepadNext는 Notepad++만큼의 메모리 사용량과 UI 반응성을 따라갈 수 없을 것으로 생각하지만, 리눅스에서 네이티브로 실행되므로 wine에 의존하지 않아 사용해볼 의향이 있음.

          + Notepad++는 20년 동안 지속적으로 유지되고 있는 가벼우면서 반응성이 뛰어난 윈도우용 텍스트 에디터임. 텍스트 검색/교체 인터페이스를 선호하며, 휴대용 버전을 휴대함. NotepadNext는 Notepad++의 메모리 사용량과 UI 반응성을 따라갈 수 없을 것으로 보이지만, 리눅스에서 네이티브로 실행되므로 사용해볼 의향이 있음.

     * 리눅스로 전환한 후 Notepad++를 대체하기 어려웠으나, 결국 Kate를 사용하게 됨. Kate를 사용해보길 권장함.

          + 리눅스로 전환한 후 Notepad++의 대체제를 찾기 어려웠으나, 결국 Kate를 사용하게 됨. Kate를 사용해볼 것을 권장함.

     * 이 앱은 매우 빠르며, '전쟁과 평화'를 24배 크기로 불러와도 끄떡없음. Sublime보다 훨씬 빠르며, macOS에서는 BBEdit과 비슷한 성능을 보임. 대용량 파일을 빠르게 로드하는 방법에 대해 궁금증을 표함. Qt C++와 QML로 블록 에디터를 개발 중이며, 현재 가장 빠른 블록 에디터라고 주장함. 성능을 더 향상시키고 싶어함.

          + 이 앱은 매우 빠르며, 대용량 파일을 무리 없이 처리함. Sublime보다 빠르고, macOS에서는 BBEdit과 비슷한 성능을 보임. 대용량 파일을 빠르게 로드하는 방법에 대한 궁금증이 있음. Qt C++와 QML로 블록 에디터를 개발 중이며, 현재 가장 빠른 블록 에디터라고 주장함. 성능을 더 향상시키고자 함.

     * 한 동료는 매우 경험이 많고 지식이 풍부한 프로그래머였으며, 모든 것에 Notepad++를 사용함. 상대적으로 간단한 도구로도 얼마나 뛰어날 수 있는지 보여줌.

          + 한 동료는 경험이 많고 지식이 풍부한 프로그래머로, 모든 작업에 Notepad++를 사용함. 간단한 도구로도 뛰어난 성과를 낼 수 있음을 보여줌.
"
"https://news.hada.io/topic?id=14073","로스 앤더슨 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               로스 앤더슨 사망

교수 로스 앤더슨, 고인이 되다

     * 캠브리지 대학교와 에든버러 대학교의 보안 공학 교수이자, 프라이버시와 보안을 위한 장기적인 캠페인을 벌여온 소중한 친구, 로스 앤더슨 교수가 갑작스럽게 가족이 있는 캠브리지의 집에서 세상을 떠남.
     * 로스 앤더슨 교수는 로이얄 소사이어티 펠로우(FRS)이자 로열 아카데미 오브 엔지니어링 펠로우(FREng)로, 러브레이스 메달을 수상한 인물임.
     * 이 소식은 우리 모두에게 엄청난 손실이며, 많은 이들이 그의 갑작스러운 부재에 대해 슬퍼하고 있음.

GN⁺의 의견

     * 로스 앤더슨 교수는 보안 공학 분야에서 중요한 인물이었으며, 그의 연구와 옹호 활동은 프라이버시와 보안에 대한 인식을 높이는 데 크게 기여했음.
     * 그의 갑작스러운 사망은 학계뿐만 아니라 보안 커뮤니티 전체에 큰 충격을 주었으며, 그의 유산은 앞으로도 많은 연구자와 실무자에게 영감을 줄 것임.
     * 보안 공학은 지속적으로 발전하는 분야이며, 앤더슨 교수와 같은 선구자들이 남긴 업적은 새로운 세대의 연구자들이 이 분야를 더욱 발전시키는 데 중요한 토대가 될 것임.
     * 현재 보안 공학 분야에서는 다양한 오픈소스 도구와 프로젝트들이 활발히 개발되고 있으며, 앤더슨 교수의 연구가 이러한 프로젝트들에 영향을 미쳤을 가능성이 큼.
     * 앤더슨 교수의 사망은 그가 추구했던 가치들을 계속해서 지키고 발전시켜 나가야 할 중요성을 다시금 상기시켜 줌.

        Hacker News 의견

     * 응답서의 명작: 한 사용자는 대학의 보안 연구 검열 시도에 대한 교수의 극도로 예의 바른 동시에 매우 신랄한 응답서를 기억에 남는 작품으로 언급함.

     ""해당 교수의 기억에 남는 작품 중 하나는 대학의 보안 연구 검열 시도에 대한 예의 바르면서도 신랄한 응답서임.""
     * 경력에 영향을 준 교과서: 다른 사용자는 'Security Engineering'이라는 교과서가 자신의 경력에 큰 영향을 미쳤으며, 시스템 설계의 취약성을 깨닫게 해준 사례들이 '간단한' 작업도 어렵다는 점을 강조함.

     ""해당 교과서는 많은 시스템이 설계자의 예상보다 취약하다는 점을 보여주며, 심지어 '간단한' 작업도 어렵다는 것을 강조함.""
     * 캠브리지 대학에서의 영향력: 한 캠브리지 대학 동문은 교수가 자신의 대학 시절에 가장 영향력 있는 인물 중 하나였으며, 그의 유머 감각과 정의 추구, 엘리트 계층의 경솔한 결정에 대한 혐오가 그의 모든 행동과 말에서 드러났다고 회상함.

     ""해당 교수는 캠브리지 대학에서 매우 영향력 있는 인물이었으며, 그의 유머와 정의 추구, 엘리트 계층에 대한 비판적 태도가 그의 행동과 말에 반영됨.""
     * 글로벌 커뮤니티에서의 중요성: 한 사용자는 교수가 영국 디지털 커뮤니티뿐만 아니라 전 세계적으로 중요한 인물이었다고 언급하며, 그가 암호화에 대한 제한에 반대하는 데 중요한 역할을 했다고 설명함.

     ""해당 교수는 글로벌 커뮤니티에서 중요한 인물이었으며, 암호화에 대한 제한에 반대하는 데 핵심적인 역할을 함.""
     * 보안 커뮤니티의 긍정적 원칙: 또 다른 사용자는 교수가 보안 커뮤니티에서 많은 긍정적 원칙을 구현했다고 말하며, 그의 'Security Engineering' 책이 좋은 보안 설계 원칙을 인내심 있게 설명하고 실제 세계의 예와 연결했다고 평가함.

     ""해당 교수는 보안 커뮤니티에서 긍정적인 원칙을 구현했으며, 그의 책은 좋은 보안 설계 원칙을 인내심 있게 설명함.""
     * 친절한 답변: 한 사용자는 'Security Engineering' 책에 대한 초보적인 질문에 교수가 친절하고 자세한 설명으로 답변해준 것을 기억하며, 그를 천재이자 신사로 기억함.

     ""해당 교수는 'Security Engineering' 책에 대한 초보적인 질문에 친절하고 자세한 답변을 해줌.""
     * 개인적인 친구: 한 친구는 교수가 자신과 다른 사람들의 작업에 대해 논의하는 것을 즐겼으며, 그의 글이나 댓글이 다른 사람들의 반응을 이끌어낸 것에 만족했다고 말함.

     ""해당 교수는 자신의 작업이 다른 사람들의 반응을 이끌어내는 것을 즐김.""
     * 전통 음악과 버스킹: 한 사용자는 교수가 전통 파이프 음악을 좋아하고 젊은 시절 버스킹을 했다는 사실을 알게 되어 감명받았다고 언급함.

     ""해당 교수는 전통 파이프 음악을 좋아하고 젊은 시절 버스킹을 했음.""
     * 큰 손실: 마지막 사용자는 교수의 사망 소식에 충격을 받았으며, 우리가 최고 중 한 명을 잃었다고 슬퍼함.

     ""해당 교수의 사망 소식에 충격을 받았으며, 그의 사망을 큰 손실로 여김.""

   위 요약은 해커뉴스 댓글 모음에서 Ross Anderson 교수의 영향력과 그의 작업에 대한 다양한 개인적 견해를 반영하고 있음.
"
"https://news.hada.io/topic?id=14064","사이먼 릭스 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               사이먼 릭스 별세

PostgreSQL 유지보수자 사이먼 릭스의 비극적인 사망

     * PostgreSQL의 바이너리 복제(Binary Replication) 및 많은 빅 데이터 기능을 담당했던 사이먼 릭스가 화요일에 소형 비행기 사고로 사망함.
     * 사이먼은 2006년부터 2008년까지 Greenplum에서 함께 일했으며, 그의 공헌 없이는 PostgreSQL이 오늘날 세계적인 데이터베이스가 되지 못했을 것임.
     * 사고에 대한 조사가 진행 중이며, 사이먼의 이름이 공개됨.

사이먼을 기리며

     * 사이먼이 Greenplum의 자원 관리 시스템을 구현하기 위해 미국 샌라파엘로 출장 왔을 때의 재미있는 이야기 공유.
     * 사이먼은 미국 체인 레스토랑에서 처음으로 테킬라를 맛보고, 거대한 서빙에 당황함.
     * 식사를 마치지 못했을 때 웨이트리스가 ""박스에 담아가시겠어요?""라고 물었고, 이는 영국 영어로 다른 의미가 있어 사이먼이 크게 놀람.

Greenplum에서의 유머

     * 이후 '박스'는 Greenplum에서 농담거리가 되었으며, 회의가 지루해질 때마다 ""박스에 넣어야 할지도 모른다""고 말함.
     * Greenplum의 초기 소프트웨어/하드웨어 제품은 ""Big data in a box""라고 불림.
     * 사이먼을 기억하는 이들은 테킬라 잔을 들고 그를 기리는 토스트를 제안함.

GN⁺의 의견

     * 사이먼 릭스의 사망 소식은 PostgreSQL 커뮤니티와 데이터베이스 업계에 큰 손실이며, 그의 기여는 오랫동안 기억될 것임.
     * 데이터베이스 기술의 발전에 기여한 인물의 갑작스러운 사망은 기술 커뮤니티에 경각심을 줄 수 있으며, 안전 문제에 대한 인식을 높이는 계기가 될 수 있음.
     * PostgreSQL은 오픈소스 데이터베이스로서 많은 프로젝트와 기업에서 사용되고 있으며, 사이먼과 같은 개발자의 역할은 이러한 프로젝트의 지속 가능성에 중요함.
     * 비슷한 기능을 가진 다른 오픈소스 데이터베이스로는 MariaDB나 SQLite가 있으나, PostgreSQL만의 고유한 기능과 성능을 제공하는 점에서 독특함.
     * 오픈소스 프로젝트에 참여할 때는 핵심 개발자의 부재가 프로젝트에 미치는 영향을 고려해야 하며, 지속적인 기술 전수와 협업이 중요함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 2009년 도쿄에서 JPUG 관련 생일 파티에서 처음 만난 Simon은 최근 프라하에서 마지막으로 만남.
          + Postgres Europe 컨퍼런스에 6~7년간 참석하지 않았던 것에 대해 이야기하며 농담을 주고받음.
          + Simon의 갑작스러운 죽음에 대해 커뮤니티와 친구들이 큰 손실을 느낌.
          + 가족과 알고 지내던 사람들에게 애도를 표함.
     * 두 번째 댓글 요약:
          + PostgreSQL 컨퍼런스에서 처음으로 연사로 나설 때 Simon을 만남.
          + 연설 후 조언을 해주며, 꼭 재미있을 필요는 없고 중요한 내용을 전달하는 것이 중요하다고 조언함.
          + 이 조언이 매우 안심되는 것이었음.
     * 세 번째 댓글 요약:
          + Daily Mail 기사 링크 공유.
          + 평소 Daily Mail을 좋아하지 않지만, 사진이 많이 포함되어 있어 Simon을 알지 못하는 사람들도 인간적인 연결을 느낄 수 있음.
          + Simon이 충만한 삶을 살았다는 인상을 받음.
     * 네 번째 댓글 요약:
          + Simon과 커뮤니티 및 상업적으로 교류했으며, 항상 예의 바르고 전문적이었음.
          + 설명을 잘 해주어 감사함을 표함.
          + Simon의 죽음에 대해 슬픔을 표하며 그의 부재를 애도함.
     * 다섯 번째 댓글 요약:
          + Duxford는 WWI 동안 건설된 영국의 유명한 비행장임.
          + 정기적인 에어쇼가 열리며, 기술적으로 발전한 캠브리지 근처에 위치함.
     * 여섯 번째 댓글 요약:
          + PostgreSQL 개발을 오랫동안 따라오며, Simon Riggs는 PostgreSQL과 밀접하게 연관된 이름임.
          + 그의 부재가 크게 느껴질 것임을 표현함.
     * 일곱 번째 댓글 요약:
          + Simon을 한 번 만난 적 있으며, Postgres를 기반으로 한 회사에서 거의 20년간 일함.
          + Postgres와 2nd Quadrant 창립에 기여한 Simon의 업적으로 인해 자신의 커리어가 있음을 인정함.
     * 여덟 번째 댓글 요약:
          + Simon과 Robert 사이의 Postgres에서 RLS 기능에 대한 토론을 기억함.
          + Simon은 항상 전문적이고 객관적인 태도로 응답하며 자신의 입장을 명확히 함.
     * 아홉 번째 댓글 요약:
          + 2007년 첫 PGCon에서 Simon을 만나고, 세계 여러 곳의 컨퍼런스에서 자주 만남.
          + Simon은 항상 친절하게 도와주었으며, 함께 주요 기능을 공동 저술할 기회에 자부심을 느낌.
          + 지난 12월에 마지막으로 만남.
     * 열 번째 댓글 요약:
          + 2000년대에 Postgres 교육을 위해 초청받은 Simon을 회사에서 만남.
          + 동료들과 함께 바이에른 맥주 정원 문화를 체험하도록 초대함.
          + Simon은 세계적인 데이터베이스 소프트웨어 엔지니어이자 기업가이면서도 매우 좋은 사람이었음.
          + 그의 부재를 애도함.
"
"https://news.hada.io/topic?id=13979","1990년부터 2019년까지 50세 미만 암 발병률 80% 증가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  1990년부터 2019년까지 50세 미만 암 발병률 80% 증가

조기 발병 암의 세계적 추세

     * 조기 발병 암의 전 세계적 부담을 조사하기 위한 연구로, 1990년부터 2019년까지 전 세계 29종의 암에 대한 발병률, 사망률, 장애 조정 생명 연수(DALYs) 및 위험 요인을 분석함.
     * 1990년부터 2019년까지 조기 발병 암의 전 세계적 발병률은 79.1% 증가했으며, 사망률은 27.7% 증가함.
     * 조기 발병 유방암, 기관지 및 폐암, 위암, 대장암이 2019년에 가장 높은 사망률과 DALYs를 보임.
     * 전 세계적으로 조기 발병 비인두암과 전립선암의 발병률 증가 추세가 가장 빠르며, 조기 발병 간암의 감소 추세가 가장 큼.
     * 조기 발병 대장암은 남성과 여성 모두에서 상위 5위 안에 높은 DALYs를 기록함.
     * 사회인구학적 지수(SDI)가 중간-높음 및 중간인 지역이 조기 발병 암의 가장 높은 부담을 가짐.
     * SDI가 증가함에 따라 조기 발병 암의 발병률은 증가하고 사망률은 감소하는 경향을 보임.
     * 2030년까지 조기 발병 암의 전 세계적 발병 및 사망 수는 각각 31% 및 21% 증가할 것으로 예측됨.
     * 조기 발병 암의 주요 위험 요인으로는 식이 위험 요소(적색육 과다 섭취, 과일 부족, 나트륨 과다 섭취, 저유제품 섭취 등), 알코올 소비 및 흡연이 있음.

조기 발병 암의 부담 차이

     * 2019년 여성과 남성에서 가장 큰 질병 부담을 가진 조기 발병 암은 각각 유방암과 기관지 및 폐암임.
     * 사회인구학적 지수(SDI)가 낮은 지역에서는 여성이 남성보다 조기 발병 암으로 인한 사망률과 질병 부담이 더 높음.

조기 발병 암의 지역별 부담

     * 2019년 고소득 북미 지역에서 조기 발병 암의 가장 높은 연령 표준화 발병률(ASIR)을 기록함.
     * 서부 사하라 아프리카와 중앙 사하라 아프리카는 가장 낮은 ASIR을 보임.
     * 동아시아는 조기 발병 암의 발병 및 사망 수에서 모든 지역 중 가장 높은 순위를 차지함.

조기 발병 암의 위험 요인

     * 조기 발병 유방암, 기관지 및 폐암, 대장암, 위암의 주요 위험 요인으로는 알코올 사용, 흡연, 식이 위험 요소, 신체 활동 부족, 고혈당 등이 있음.

2020-2030년 조기 발병 암의 예측

     * 2020년부터 2030년까지 여성의 조기 발병 암 ASIR이 남성보다 높을 것으로 예측됨.
     * 40-44세 및 45-49세 연령대가 조기 발병 암의 발병 및 사망에서 주요 인구를 차지할 것으로 예측됨.

GN⁺의 의견

     * 이 연구는 조기 발병 암의 전 세계적 부담과 추세를 파악하는 데 중요한 기여를 함. 특히, 발병률과 사망률의 지역별 차이를 이해하는 데 도움이 될 수 있음.
     * 연구 결과는 조기 발병 암 예방 및 관리 전략을 수립하는 데 중요한 정보를 제공함. 예를 들어, 조기 발병 암의 위험 요인을 줄이기 위한 공중 보건 캠페인이나 생활 습관 개선 프로그램을 개발하는 데 활용될 수 있음.
     * 그러나 이 연구는 조기 발병 암의 원인에 대한 구체적인 메커니즘을 밝히지는 못함. 따라서 추가적인 연구가 필요함.
     * 조기 발병 암의 위험 요인으로 식이 습관과 생활 방식이 중요한 역할을 하는 것으로 나타났으므로, 이러한 요인에 대한 개입이 효과적일 수 있음을 시사함.
     * 이 연구는 조기 발병 암의 추세를 예측하는 데 사용된 모델링 기법의 정확성에 대한 질문을 제기할 수 있음. 예측 모델은 다양한 가정에 기반하고 있으며, 실제 발생할 미래의 사건을 완벽하게 반영하지 못할 수 있음.

        Hacker News 의견

     * 환경 오염에 대한 우려
          + 한 사용자는 환경 오염이 심각한 수준에 이르렀으며, 이제는 어디에서나 내리는 비가 마시기에 안전하지 않다는 기사를 읽었다고 언급함.
          + PFAs가 암을 유발하지 않을 수 있지만, 오염 문제가 극단적인 상황에 이르렀다는 점을 지적함.
          + 구름 속의 미세 플라스틱과 관련된 문제가 서로 연관되어 있지 않기를 바라며, 미세 플라스틱을 제거하는 것은 쉽지 않음을 표현함.
          + 모든 종류의 오염을 최소화하기 위해 노력해야 한다는 입장을 밝히며, 오염이 미치는 영향을 정확히 예측할 수 없기 때문에 심지어 타이어 먼지나 햇볕에 노출되어 분해되는 파란색 플라스틱 방수포에 대해서도 우려를 표함.
          + 우리가 하는 일이 좋지 않지만, 그것을 인정하는 데 어려움을 겪고 있다고 생각함.
     * 암 발생률 변화에 대한 분석
          + 한 사용자는 남미와 아프리카 국가에서 암 발생률이 크게 증가한 반면, 서구 국가에서는 주로 감소하는 것으로 나타난 그래프를 언급함.
          + 해당 지역에서의 증가는 의료 접근성 향상과 관련이 있을 수 있으며, 전반적으로 긍정적인 현상일 수 있음을 추측함.
     * 암 발생률에 대한 오해
          + 다른 사용자는 암 발생 건수의 증가가 인구 증가를 고려하지 않았다는 점을 지적하며, 이는 과학 커뮤니케이션에서 나쁜 예라고 비판함.
          + 연구 제목에 세계 인구 증가를 고려하지 않은 암 발생 건수만을 강조하는 것은 부적절하다고 주장함.
     * 암 사망률 감소에 대한 언급
          + 연령 조정된 암 발생률은 1990년부터 2019년까지 약간 증가했지만, 연령 조정된 암 사망률은 두 성별 모두에서 크게 감소했다는 그래프를 언급함.
     * 생물학적 스트레스 요인으로서의 RF
          + 한 사용자는 RF(라디오 주파수)가 화학 발암 물질의 효과를 증가시킬 수 있다는 연구를 언급하며, 이러한 생물학적 스트레스 요인에 대한 언급이 부족하다고 지적함.
     * 암 발생률 증가 원인에 대한 질문
          + 암 발생률 증가가 실제 질병 증가 때문인지, 더 일찍이고 민감한 탐지 때문인지에 대한 의문을 제기함.
     * 식품과 암 발생률의 관계
          + ""당신이 먹는 것이 당신이다""라는 말을 인용하며, 미국에서 식품을 섭취할 때 몬산토와 바이엘과 같은 회사들에 대해 질문을 던짐.
          + 식품에 첨가되는 방부제와 같은 성분이 암 발생에 영향을 미칠 수 있음을 언급하며, 예를 들어 혼합 견과류에 들어있는 카놀라유의 필요성에 의문을 제기함.
          + 호르몬에 영향을 미치는 다른 요인들, 예를 들어 많은 사람들이 복용하는 피임약이나 과도한 설탕 섭취로 인한 비만 문제를 지적함.
     * 어린 시절의 햇볕 노출과 암 발생률 감소의 관계
          + 어린 시절의 햇볕 노출이 감소한 것이 암 발생률 감소의 원인일 수 있다고 추측함.
          + 성인이 비교적 덜 심각한 기저 세포 및 편평 세포 암종을 많이 가지고 있을수록 일반적으로 더 건강하다는 것과, 이러한 암종의 발생률이 어린 시절의 햇볕 노출과 관련이 있다는 점을 언급함.
"
"https://news.hada.io/topic?id=14038","Codel - 복잡한 작업을 처리해주는 완전 자동 AI 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Codel - 복잡한 작업을 처리해주는 완전 자동 AI 에이전트

     * 터미널/브라우저/에디터를 이용해서 복잡한 작업을 처리
     * 샌드박스 도커환경에서 실행되어 안전함
     * 자동으로 다음 단계를 인식하고 처리
     * 내장 브라우저로 인터넷에서 필요한 정보를 가져옴
     * 내장 에디터로 수정된 모든 파일을 즉시 확인 가능
     * 모든 명령과 출력은 PostgreSQL DB에 저장됨
     * 사용자 태스크에 따른 자동 도커 이미지 선택
"
"https://news.hada.io/topic?id=14070","Grok-1.5 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Grok-1.5 발표

     * Grok-1.5는 개선된 추론 능력과 128,000 토큰의 컨텍스트 길이를 가짐
          + 코딩 및 수학 관련 작업에서 눈에 띄는 성능 향상
          + MATH 벤치마크에서 50.6%, GSM8K 벤치마크에서 90%, HumanEval 벤치마크에서 74.1%의 점수를 달성
          + 최대 128K 토큰의 긴 컨텍스트로 이전보다 최대 16배 긴 문서의 정보를 활용할 수 있음. 더 길고 복잡한 프롬프트를 처리하면서도 지시 사항을 따르는 능력을 유지함
     * 플랫폼에서 곧 초기 테스터와 기존 Grok 사용자들에게 제공될 예정
     * JAX, Rust, Kubernetes를 기반으로 한 맞춤형 분산 훈련 프레임워크에 구축됨
     * 곧 초기 테스터에게 제공될 예정이며, 사용자의 피드백을 통해 Grok을 개선하는 데 도움을 기대함
          + 점차적으로 더 넓은 사용자에게 제공하면서 향후 몇 일 동안 여러 새로운 기능을 소개할 예정임.
"
"https://news.hada.io/topic?id=13989","Show GN: 상업용 LLM 해킹하기 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 상업용 LLM 해킹하기 게임

   안녕하세요. 평소에 hada를 눈팅만하다가 드디어 제가 직접 글을 올리는 날까지 왔네요. 인사드리겠습니다. 저는 프롬프트 보안 엔지니어링에 관심이 많고 관련 업계로 취업을 준비하고 있는 학생입니다.

   https://lifeisbattle.com/

   프롬프트 엔지니어 취업 프로젝트로 웹 게임 하나 만들어봤습니다. 인공지능 로봇이 서비스업에서 사람의 일자리를 대신하게 될 근 미래를 배경으로 삼았는데요, 사람들이 로봇을 해코지하거나 속이려고 하면 어떻게 될까 고민하면서 만들어봤습니다. 플레이해보시고 한마디씩 해주시면 감사하겠습니다.

   저는 접속하자마자
   500 Cannot read properties of null (reading 'filter') 라고 에러가 뜨네요

   열심히 시도중이였는데 OpenAI parameter Error가 나더니 서버에서 500 에러가 나네요.
   나중에 다시 시도해 보겠습니다.

   제목이 좀 모호한거 같아서 '게임'이라는 단어를 추가하고 싶은데 수정이 불가능한 것 같네요. 혹시 관리자분께서 보시기에 제목이 부적절하다고 느끼신다면 수정 해주셔도 좋을거 같습니다!

   직접 만드신 게임이어서 Show GN으로 옮기고 제목을 수정했습니다.
"
"https://news.hada.io/topic?id=13995","위성 궤도상의 모든 Starlink 위성을 실시간으로 보여주는 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 위성 궤도상의 모든 Starlink 위성을 실시간으로 보여주는 지도

     * 스타링크는 지구상 가장 외진 지역에 초당 테라바이트 단위의 데이터를 전송하는 세계에서 가장 진보된 위성 인터넷 네트워크임
     * 재사용 가능한 로켓 기술의 도입으로 가능해진 스타링크는 새로운 궤도 기술 시대의 시작을 알림
     * 스타링크 컨스텔레이션에는 총 5,601개의 위성이 궤도를 돌고 있으며, 레이저 간 위성 링크, 작은 크기, 감소된 무게 등의 기능이 추가된 여러 버전의 위성이 발사됨.

스타링크 위성 버전 및 서비스 현황

     * 스타링크 v1-1.5에는 4,332개의 위성이, 스타링크 v2 (미니)에는 1,269개의 위성이 포함됨.
     * 총 376개의 위성이 대기권 재진입 시 소멸되도록 궤도에서 제거됨.
     * 스페이스X는 현재까지 총 5,977개의 위성을 발사함.
     * 2024년 3월 기준, 스타링크는 전 세계적으로 260만 이상의 주거, 해상, 항공 고객에게 서비스를 제공함.
     * 스타링크 컨스텔레이션은 지구에 최대 188,160MB/초의 서비스를 제공할 수 있음.
     * 오늘날까지 지구에 제공된 총 대역폭은 6,579,423.65기가바이트, 올해 총 대역폭은 1,384,632.95테라바이트임.

스페이스X의 발사 빈도와 경쟁사 비교

     * 스페이스X의 발사 빈도는 세계 정부 및 민간 회사를 앞서며, 2023년 전 세계 궤도 발사 시도의 50%를 차지함.
     * 마지막 스타링크 임무는 1일, 21시간, 33분, 47초 전에 발사됨.
     * 다음 스타링크 임무는 3시간, 42분, 47초 후에 발사 예정임.
     * 지난 365일 동안 평균적으로 5.14일마다 스타링크 발사가 이루어짐.
     * 다른 위성 인터넷 제공업체들은 스타링크의 규모나 범위에 비교할 수 없으며, 스페이스X가 제공하는 비용과 규모로 자체 위성을 궤도에 보내는 것을 따라잡을 수 없음.

경쟁 위성 인터넷 컨스텔레이션

     * Globestar는 저궤도에 89개의 위성을 운영함.
     * Iridium은 극지 저궤도에 859개의 위성을 운영함.
     * Orbcomm은 저궤도에 95개의 위성을 운영함.
     * Viasat은 정지궤도에 5개의 위성을 운영함.
     * OneWeb은 저궤도에 636개의 위성을 운영함.
     * 아마존의 Project Kuiper는 저궤도에 2개의 위성을 운영함.
     * ChinaSat은 정지궤도에 33개의 위성을 운영함.

GN⁺의 의견

     * 스타링크는 전 세계적으로 인터넷 접근성을 향상시키는 중요한 프로젝트로, 특히 인터넷 서비스가 부족한 지역에 큰 영향을 미칠 수 있음.
     * 스페이스X의 발사 빈도와 기술 혁신은 다른 위성 인터넷 제공업체들과의 경쟁에서 큰 우위를 점하고 있으며, 이는 위성 인터넷 시장의 성장과 혁신을 촉진할 수 있음.
     * 스타링크의 서비스 확장은 지구상의 모든 사람에게 인터넷을 제공하려는 장기적인 목표에 부합하며, 이는 교육, 의료, 경제 발전 등 여러 분야에 긍정적인 영향을 미칠 것임.
     * 그러나 스타링크와 같은 대규모 위성 네트워크는 우주 쓰레기 문제와 궤도 혼잡 문제를 야기할 수 있으며, 이에 대한 지속 가능한 해결책을 모색하는 것이 중요함.
     * 스타링크의 경쟁자로는 OneWeb, Viasat, Iridium 등이 있으며, 이들도 저궤도 위성 네트워크를 통해 다양한 서비스를 제공하고 있음.

   천문학자들이 천체 관측에 어려움을 느낄만하네요...

   생각보다 엄청 많고, 거기다가 엄청 빠르게 움직이네요?

   default가 16배속이라 그렇게 보일 것 같습니다. live 클릭하시면 천천히 움직여요ㅎㅎ

   와 이렇게보니 정말 많군요.

   마치 다이슨 스피어의 초기단계를 보는 듯한 느낌이 드네요
   https://ko.wikipedia.org/wiki/다이슨구

        Hacker News 의견

     * 매니토바 주의 한 사용자는 Starlink 서비스가 농촌 지역에서 놀랍도록 잘 작동하는 이유에 대해 혼란스러워했다. 미국에서는 서비스가 과다 구독되고 포화 상태라는 불만이 많았지만, 이 사용자는 위성이 궤도의 북쪽 끝에 도달하여 그들의 지역 위에 머무는 것을 발견하고, 궤도 역학이 자신들에게 유리하게 작용한다는 사실을 알게 되었다.
     * Starlink 위성의 규모가 엄청나다는 것은 알고 있었지만, 이를 시각화함으로써 그 범위를 더욱 강조할 수 있다. 언젠가 전 세계 어디에서나 저렴한 비용으로 단일 회사를 통해 연결 요구를 충족시킬 수 있기를 바란다.
     * 한 개발자는 위성을 추적하는 whatsoverhead.com과 유사한 사이트를 만들었다. 이 사이트는 사용자가 ""Hey, Siri, what's overhead...in space?""라고 물으면 가장 가까운 위성을 알려주는 기능을 가지고 있다. 이 개발자는 대부분의 경우 ""STARLINK-1234""라는 답변에 놀랐으며, 이는 Starlink 위성이 많다는 사실을 더 직관적으로 이해하는 데 도움이 되었다.
     * Starlink의 커버리지를 평가하기 위해 설계된 또 다른 사이트는 위성의 궤도를 보여주지만, 사이트 간에 위성의 총 수에 약간의 차이가 있다.
     * Starlink 위성의 규모와 궤도에 대해 알게 된 한 사용자는 위성의 수명 주기, 궤도에서의 지속 기간, 추락 지점의 제어 가능성, 다양한 버전의 위성, 소프트웨어 업데이트 빈도 및 업데이트 실패 시의 상황에 대해 궁금해했다.
     * 한 사용자는 웹페이지를 전체 화면으로 보았을 때 지구본이 870픽셀 너비로, 이는 약 9.1마일 당 픽셀로 환산된다고 설명했다. 각 위성은 한 변이 3개의 점으로 이루어진 큐브로 표현되며, 이는 각 변이 27마일이고, 각 정사각형이 대략 미국의 대호수 총 부피의 네 배에 해당하는 19,683 입방마일의 부피를 나타낸다.
     * 사이드바에 데이터와 함께 섞여 있는 선전성 내용에 대해 한 사용자가 의문을 제기했다.
     * 다른 사용자는 기지국 위치를 볼 수 있는 satellitemap.space 사이트를 선호한다고 언급했다. 이는 시스템이 다양한 지역에서 어떻게 작동하는지 시각화하는 데 도움이 된다.
     * 한 사용자는 실시간으로 표시된 위성의 속도가 너무 빠르다고 지적했다. 이 지도는 위성이 LA에서 덴버까지 10초 만에 이동하는 것처럼 보이지만, 실제로 밤에 위성을 볼 수 있을 때 그 속도는 여기에 표시된 것의 1/10도 되지 않는다고 말했다.
     * Starlink 위성의 첫 번째 60개가 2019년 5월에 발사되었다는 정보와 함께 관련 YouTube 링크가 제공되었다.
"
"https://news.hada.io/topic?id=14039","Ask GN: 투자할 때 이런 정보, 서비스, 기능이 있으면 좋겠다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask GN: 투자할 때 이런 정보, 서비스, 기능이 있으면 좋겠다

   이런 니즈가 혹시 있으신가요??

   최근에 금융투자 관련 업에서는 누가누가 더 UX를 잘하냐

   이게 메인 싸움인 것 같습니다.

   모든 회사의 UX 퀄리티가 동일하다는 전제라면,

   혹시 투자하실 때 어떤 기능이나 서비스가 있으면 좋을까요??

   평소에 생각하시던 아이디어 있으시면 공유 부탁드려요~!! ㅎㅎ

   아직도 맘에 드는 포트폴리오 서비스를 못 찾았습니다.

   저는 자산을 구입할 때마다 단가를 입력하면, 총자산을 시계열 그래프로 보는 서비스를 찾고 싶은데요.
   증권사나 프트폴리오 서비스 어디에서도 이런 기능을 찾기가 힘드네요.

   제가 몰라서도 그럴 수 있는데, 혹시나 아시는 분 있으시면 추천 부탁드립니다.

   차트에 내가 산 평균가격이 가로선으로 표시되었으면 좋겠어요. (X축 시간, Y축 가격 기준)
   좀 더 직관적으로 매수,매도 할 수 있게요.

   가상 구매 기능?... 있었으면 좋겠어요

   언제 구매를 희망했다. 몇주를 구매하기를 희망했다 등등의 내역을 기록해서 나중에 비교 해볼 수 있게 만들었으면...
"
"https://news.hada.io/topic?id=14000","Pyenv - 간단한 파이썬 버전 관리 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Pyenv - 간단한 파이썬 버전 관리 도구

     * 여러 버전의 Python 사이를 쉽게 전환할 수 있게 해줌
     * 단순하고, 눈에 띄지 않으며, 잘 동작하는 단일 목적의 UNIX 전통 도구를 따름
     * 이 프로젝트는 rbenv와 ruby-build에서 분기되어 Python에 맞게 수정됨

pyenv가 하는 일

     * 사용자 기반으로 전역 Python 버전 변경 가능.
     * 프로젝트별 Python 버전 지원.
     * 환경 변수를 사용하여 Python 버전 오버라이드 가능.
     * 한 번에 여러 버전의 Python 명령을 검색할 수 있음. tox를 사용하여 Python 버전 간에 테스트하는 데 유용함.

pyenv가 하지 않는 일...

     * Python 자체에 의존하지 않음. pyenv는 순수 쉘 스크립트로 만들어짐.
     * 쉘에 로드될 필요가 없음. 대신, PATH에 디렉토리를 추가하는 shim 접근 방식을 사용함.
     * virtualenv 관리하지 않음. 물론, 사용자가 직접 virtualenv를 생성하거나 pyenv-virtualenv를 사용하여 자동화할 수 있음.

작동 원리

     * pyenv는 PATH에 주입된 shim 실행 파일을 사용하여 Python 명령을 가로채고, 애플리케이션이 지정한 Python 버전을 결정한 후, 해당 Python 설치로 명령을 전달함.

  PATH 이해하기

     * python이나 pip 같은 명령을 실행할 때, 운영 체제는 PATH 환경 변수에 있는 디렉토리 목록에서 해당 이름의 실행 파일을 찾음.

  Shims 이해하기

     * pyenv는 PATH의 맨 앞에 shims 디렉토리를 삽입함. rehashing 과정을 통해, 모든 설치된 Python 버전의 모든 Python 명령에 대해 shims를 유지함.

  Python 버전 선택 이해하기

     * shim을 실행할 때, pyenv는 다음 소스에서 순서대로 Python 버전을 읽어서 사용함:
         1. PYENV_VERSION 환경 변수(지정된 경우).
         2. 현재 디렉토리의 애플리케이션별 .python-version 파일(있는 경우).
         3. 파일 시스템의 루트에 도달할 때까지 각 부모 디렉토리를 검색하여 찾은 첫 번째 .python-version 파일(있는 경우).
         4. 전역 $(pyenv root)/version 파일.

  Pyenv가 제공하는 Python 설치 위치 찾기

     * pyenv가 결정한 Python 버전에 따라 명령을 해당 Python 설치로 전달함.
     * 각 Python 버전은 $(pyenv root)/versions 아래 자체 디렉토리에 설치됨.

사용법

  추가 Python 버전 설치

     * pyenv install을 사용하여 추가 Python 버전을 설치함.

  최신 버전으로 자동 해결

     * uninstall을 제외한 모든 Pyenv 하위 명령은 최신 버전으로 전체 접두사를 자동으로 해결함.

  확장 지원이 있는 Python 버전

     * 특정 환경에서 지원을 추가하기 위해 사용자 제공 패치를 적용하는 Python 릴리스가 있음.

  Python 버전 간 전환

     * Pyenv가 설치한 Python을 사용하려면 다음 명령 중 하나를 실행함:
          + pyenv shell
          + pyenv local
          + pyenv global

  Python 버전 제거

     * 시간이 지남에 따라 $(pyenv root)/versions 디렉토리에 Python 버전이 쌓임.
     * 오래된 Python 버전을 제거하려면 pyenv uninstall 을 사용함.

  기타 작업

     * 모든 사용 가능한 하위 명령 목록을 보려면 pyenv commands를 실행함.

pyenv 제거

     * Pyenv를 임시로 비활성화하거나 시스템에서 제거하기 쉬움.

Pyenv 플러그인

     * 플러그인을 사용하여 Pyenv의 기능을 간단하고 유연하며 유지 관리 가능한 방식으로 확장하고 사용자 정의할 수 있음.

고급 구성

     * Pyenv의 동작을 제어하는 환경 변수가 있음.

개발

     * Pyenv 소스 코드는 GitHub에서 호스팅됨.
     * Bats를 사용하여 테스트를 실행함.

GN⁺의 의견

     * pyenv는 다양한 Python 버전을 관리하는 데 매우 유용한 도구임. 특히 여러 프로젝트에서 다른 버전의 Python을 사용해야 하는 개발자에게 도움이 됨.
     * 이 도구는 Python 자체에 의존하지 않고 순수 쉘 스크립트로 구성되어 있어, Python이 설치되지 않은 시스템에서도 설치와 관리가 가능함.
     * pyenv는 virtualenv를 직접 관리하지 않지만, pyenv-virtualenv 플러그인을 통해 virtualenv 관리를 자동화할 수 있어 편리함.
     * 설치 및 사용법이 상대적으로 간단하므로, Python 버전 관리가 필요한 초급 소프트웨어 엔지니어도 쉽게 접근할 수 있음.
     * pyenv와 유사한 기능을 제공하는 다른 도구로는 conda가 있으며, 특히 데이터 과학과 머신러닝 분야에서 널리 사용됨. conda는 패키지 관리와 환경 관리를 함께 제공하므로, 이러한 기능이 필요한 사용자에게 추천할 수 있음.
     * pyenv를 도입할 때는 시스템에 여러 버전의 Python이 설치되어 있을 경우 경로 충돌을 피하기 위해 주의가 필요함. pyenv를 사용함으로써 얻는 이점은 버전 관리의 용이성이지만, 잘못된 설정은 시스템의 기본 Python 경로를 방해할 수 있음.

   conda 는 주의하실게 일정규모 기업에서는
   유료입니다.
   회사가 작아도 원청 규모가 크면 납품하기 애매해요

   conda 자체는 bsd 로 무료지만 저장소 및 패키지 라이센스 잘 보셔야 해요.

   asdf 를 최상위에 설정해두고 https://asdf-vm.com/

   프로젝트 별로는 local로 구성하기도 하고, 컨테이너를 이용하기도하고...

   새로운 환경 구성 + 메니징 하는게 많이 나와서 잘안쓰고 있긴하네요.. ㅎㅎㅎㅎ

   저도 딱 그렇게 씁니다.
   ㅎㅎㅎ 개인적으로 pyenv는 약간 구닥다리가 된 느낌이 있습니다.

   rbenv, pyenv, nodenv 이런 것들이 계속 생기니까 결국 anyenv란 것도 생겼죠.ㅎㅎ
   https://github.com/anyenv/anyenv

        Hacker News 의견

     * pyenv 사용에 대한 경고
          + pyenv는 Python을 사용자의 기계에서 컴파일하는 큰 단점이 있음.
          + 이 상황에서 발생할 수 있는 실패 모드가 매우 많음.
          + pyenv는 초보자가 Python 패키징 문제를 해결하기 위한 도구가 아니라, 설정을 표준화하기 위한 전문가용 도구임.
          + 사용자들이 pyenv로 인한 문제를 겪고 있지만, 그것을 인지하지 못하는 경우가 많음.
     * Python 프로그래머의 고통
          + Python 프로그래머들이 겪는 불필요한 어려움에 대한 놀라움.
          + 여러 버전의 Python을 설치해야 하는 것은 비이성적임.
          + Python 프로그램이 어디서나 작동하는 개념이 실용적이지 않음.
          + 모든 것이 취약하여 정확한 언어 버전 없이는 작동하지 않음.
          + 의존성 문제가 심각하여 패키지 관리자의 관리자가 필요한 상황임.
     * Python 프로그램을 안정적으로 유지하는 도구
          + Python 프로그램이 처음 작성했을 때와 동일하게 작동하도록 보장하는 도구들의 목록.
          + requirements.txt, pip, pipenv, pyenv, virtualenv 등 다양한 도구들이 있음.
     * Mise 도구 소개
          + Rust로 작성된 Mise는 asdf와 같지만 더 빠르고 기본적으로 shims가 없음.
          + 런타임을 병렬로 설치하고 필요한 플러그인을 다운로드함.
          + asdf나 pyenv보다 나은 도구로 사용될 수 있음.
     * ASDF의 장점
          + ASDF는 Python뿐만 아니라 Rust, Go, Node 등 여러 언어와 다양한 도구들을 지원함.
     * pyenv 사용 경험 공유
          + pyenv 사용 초기에는 문제가 없었지만, 여러 버전의 Python을 설치한 후 문제가 발생함.
          + pyenv 대신 python.org에서 Python을 다운로드하고 python<version> -m venv /my/virtual/env를 사용하여 가상 환경을 관리하는 것이 더 안정적임.
     * 개인적인 Python 관리 스택
          + pyenv로 Python 버전을 관리하고, 각 프로젝트마다 venv를 사용하여 새로운 가상 환경을 생성함.
          + 프로젝트 초기화와 의존성 관리는 Poetry를 사용함.
          + Dropbox를 사용하는 경우 .venv 폴더를 무시 목록에 추가함.
          + Pyenv는 Ubuntu에 필요한 모든 의존성을 수집한 후 잘 작동함.
     * Mise를 사용한 런타임 의존성 관리
          + Python, Node, Ruby, Terraform 등 대부분의 런타임 의존성을 동일한 방식으로 처리하는 mise 사용.
          + Python 가상 환경도 활성화할 수 있음.
     * macOS 워크플로우 공유
          + python.org에서 필요한 Python 바이너리를 다운로드하고, virtualenv를 사용하여 가상 환경을 설정함.
          + pyproject.toml과 pip-compile을 사용하여 프로젝트 관리.
          + Python 프로젝트 관리 공간에서 많은 변화가 있었지만, 이 워크플로우로 모든 것을 간과할 수 있었음.

     이 상황에서 발생할 수 있는 실패 모드가 매우 많음.

   여기가 너무 고통스러운 지점 같아요.
"
"https://news.hada.io/topic?id=13954","모질라, CEO가 인물 검색 네트워크 운영을 인정한 후 Onerep 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                모질라, CEO가 인물 검색 네트워크 운영을 인정한 후 Onerep 중단

파이어폭스, Onerep와의 파트너십 철회

     * 파이어폭스를 지원하는 비영리 단체가 Onerep, 사람들의 정보를 수백 개의 인물 검색 사이트에서 제거해주는 신원 보호 서비스와의 새로운 파트너십을 철회한다고 발표함.
     * 이 결정은 KrebsOnSecurity의 보도 이후 Onerep의 CEO가 수년간 수십 개의 인물 검색 네트워크를 설립했다고 인정한 지 며칠 만에 이루어짐.
     * 모질라는 지난달에 Onerep을 파이어폭스에 번들로 제공하기 시작했으며, Mozilla Monitor Plus의 구독 서비스로 제공될 것이라고 발표함.

Onerep CEO의 과거와 현재

     * Onerep의 벨라루스 CEO이자 창립자 Dimitiri Shelest는 2010년부터 수십 개의 인물 검색 서비스를 시작했으며, 현재도 활동 중인 데이터 브로커 Nuwber를 포함함.
     * Shelest는 Nuwber에 대한 지분을 유지하고 있으며, Onerep과는 ""정보 공유나 교차 작업이 전혀 없다""고 주장함.
     * Shelest는 자신의 이름과 연결된 다른 오래된 도메인들은 더 이상 운영하지 않고 있다고 밝힘.

모질라의 입장

     * 모질라 대변인은 Onerep와의 서비스 제공 관계를 종료하고 있으며, 고객의 데이터는 위험에 처하지 않았지만 Onerep CEO의 외부 금융 이해관계와 활동이 모질라의 가치와 일치하지 않는다고 발표함.
     * 모질라는 고객에게 원활한 경험을 제공하고 그들의 이익을 우선시하는 전환 계획을 수립 중임.

데이터 브로커와 개인 정보 보호

     * 데이터 브로커, 인물 검색 서비스, 온라인 명성 관리 회사들은 미국의 대부분의 주에서 ""공공"" 또는 ""정부"" 기록을 소비자 개인정보 보호법에서 제외하기 때문에 존재함.
     * 이러한 기록에는 투표 등록부, 재산 등기, 결혼 증명서, 차량 기록, 형사 기록, 법원 문서, 사망 기록, 전문가 면허, 파산 신청 등이 포함됨.
     * 데이터 브로커는 소셜 미디어 데이터와 알려진 연관 인물을 추가하여 소비자 기록을 더 풍부하게 만들 수 있음.

GN⁺의 의견

     * 이번 사건은 데이터 프라이버시와 기업 윤리에 대한 중요성을 강조함. 소비자들은 자신의 개인 정보가 어떻게 사용되고 있는지, 누가 관리하는지에 대해 더 많은 통제권을 가져야 함.
     * 데이터 브로커와 인물 검색 사이트의 활동은 법적으로 허용되지만, 이러한 서비스가 개인의 프라이버시를 침해할 수 있는 잠재력을 가지고 있음을 보여줌.
     * 데이터 보호와 개인 정보 보호에 대한 강화된 규제와 법적 조치가 필요함을 시사함. 소비자들이 자신의 정보를 관리하고 보호할 수 있는 더 나은 도구와 서비스가 필요함.
     * 유사한 기능을 제공하는 다른 프로젝트나 제품으로는 DuckDuckGo와 같은 프라이버시를 중시하는 검색 엔진이나, 개인 정보 보호를 강화하는 브라우저 확장 프로그램들이 있음.
     * 기술 도입 시 고려해야 할 사항으로는 서비스 제공자의 신뢰성, 데이터 처리 방식, 그리고 사용자의 프라이버시 보호 정책이 있음. 이러한 기술을 선택함으로써 얻는 이점은 개인 정보 보호 강화이며, 손실은 잠재적인 데이터 유출 위험성임.

        Hacker News 의견

     * 회사 A가 문제를 만들고 회사 B가 그 문제를 해결하기 위해 돈을 받는다면, 회사 B는 회사 A가 문제를 더 키울 때 이득을 본다. 따라서 두 회사 모두 문제가 지속되는 데 이해관계가 있다. 이는 사회에 실질적인 이득을 주지 않으면서 이익을 추구하는 공생 관계이며, 이는 '렌트 시킹'이라 불리는 경제적 부담이자 윤리적으로 방어할 수 없는 행위이다. 이 문제는 규제를 통해서만 해결될 수 있다.

          + 회사 A와 B가 문제를 키워 서로 이득을 보는 공생 관계는 사회에 실질적인 이득을 주지 않는 '렌트 시킹'
          + 이러한 문제는 규제를 통해서만 해결 가능

     * 이런 유형의 파트너십을 검증하는 데는 비즈니스 개발이나 경력 관점이 아닌, 지식이 풍부하고 원칙이 확고하며 회의적인 사람이 필요하다. 모질라는 이제 이 문제에 대한 명성을 회복하기 위해 싸워야 할 때이며, 법적으로 이러한 비리를 해체할 방법을 찾아야 한다.

          + 파트너십 검증에는 지식이 풍부하고 원칙이 확고한 사람 필요
          + 모질라는 명성 회복을 위해 법적 대응 필요성

     * 기존의 데이터브로커 제거 도구들은 대부분 수동 노동을 필요로 하며, 주로 개발도상국의 사람들이 수행한다. Redact.dev에서는 사용자의 기기에서 직접 옵트아웃을 수행할 수 있는 순수 소프트웨어 메커니즘을 개발 중이며, 이미 40개 이상의 소셜 미디어와 유틸리티에 대한 대량 삭제 기능을 갖추고 있다.

          + 기존 데이터브로커 제거 도구의 수동 노동 의존 문제
          + Redact.dev에서 사용자 기기에서 직접 옵트아웃 가능한 소프트웨어 개발 중

     * 모든 회사에 대한 대량 옵트아웃 요청을 보내는 도구를 신뢰하려면, 그 도구가 무료이며 오픈소스여야 한다. 좋은 의도를 가지고 있더라도, 상업적 도구는 또 다른 추적 수단이 될 수 있다.

          + 대량 옵트아웃 도구의 신뢰성은 무료 및 오픈소스 여부에 달려 있음

     * 광고 차단 목록처럼, 사람들이 쉽게 추가할 수 있는 모든 알려진 회사의 오픈 리스트를 만들자고 제안한다. 이러한 조직에 대한 정보는 그들에 대한 집행과 분리되어야 한다.

          + 알려진 회사의 오픈 리스트 생성 제안

     * 모질라는 좋은 의도를 가지고 있었지만, 파트너를 충분히 검증하지 않은 것은 실망스럽다. 다른 서비스들도 의심스러운 연결고리가 있을 수 있으며, 이는 발견을 기다리고 있다.

          + 모질라의 파트너 검증 부족에 대한 실망감 표현

     * 프라이버시는 완전히 사라졌으며, 권력이나 돈이 있는 사람은 누구나 자신에 대한 모든 것을 알 수 있다. 미국 정부가 이러한 서비스의 가장 큰 고객이자 제공자이기 때문에, 사람들을 감시하고 이를 통해 이익을 얻는 행위를 불법화하고 처벌하는 법안이 통과될 가능성은 없다. 모질라는 프라이버시에 대해 언급하는 마지막 장소이지만, 그들도 문제가 있는 파트너와 연관되어 있다는 것은 상황이 얼마나 절망적인지를 보여준다.

          + 프라이버시의 완전한 상실과 정부의 감시 활동에 대한 비판

     * 인터넷 저널리즘에 대한 승리.

          + 인터넷 저널리즘의 성과에 대한 긍정적 평가

     * 이러한 종류의 회사들은 파괴되어야 하며, EU가 이 문제를 인식하기를 기다린다.

          + 문제가 되는 회사들에 대한 강력한 대응 요구

     * 모질라가 사람 찾기 조직을 지원하는 것은 바람직하지 않지만, 실제로 그런 일이 일어나고 있는지는 불분명하다. 사람 찾기 전문 지식이 사람들을 데이터베이스에서 제거하는 데 필요한 전문 지식일 수 있으며, Onerep에서 데이터 중개가 이루어지고 있는지 여부가 진짜 문제다. 이것은 형식에 치중한 승리처럼 보인다.

          + 모질라의 지원 여부와 Onerep의 데이터 중개 활동에 대한 의문 제기
"
"https://news.hada.io/topic?id=14018","지금까지 본 최고의 Visualization Tool(Extremely Fast, rustlang based)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     지금까지 본 최고의 Visualization Tool(Extremely Fast, rustlang based)

   Why? 왜 이 제품을 사용해야 하죠 ?
     * W&B, clearml, 등 에서 시각화된 결과를 돌려보려면 얼마나 느리게 확인해야 했습니까?
       -> rerun에서는 초당 수십 프레임으로 결과를 볼 수 있습니다. 정말 빠릅니다. 개발 생산성에 큰 영향을 줍니다.
     * 저는 시계열을 다뤄서 rerun의 직접적인 서포트는 받지 못지만(rerun은 시각화관련 태스크: robotics, image, video 에 특화되어있음.) 이미지 분야, 영상 분야, SLAM 등 분야에서는 정말 도움이 됩니다.
     * realtime(online) 으로도 시각화 결과를 렌더링 할 수 있어서 확장 가능성이 열려 있습니다.
       -> 진짜 60fps 으로 시각화 결과물을 랜더링 할 수 있습니다.
     * 저는 팀원에게 rerun의 데모를 보여줬고 15분만에 설득하는데 성공했습니다.

   How? 어떻게 사용하나요?
     * rerun은 C++/Rustlang/python 모두 sdk를 지원합니다.
     * W&B와 인터페이스가 유사하여 통합하기도 쉽습니다.

   What? 무슨 기능이 있나요?
     * Series Ploting, 2D box, 3D box, Scaler point, 등 2D, 3D 데이터를 사용하는 Deep learning Task 에서 필요한건 거의 있는것 같습니다.
     * 높은 자유도를 가지고 있습니다. 어느정도까지 자유도를 갖는지 볼려면 다음 프로젝트를 확인해보십시오.
       -> https://github.com/rerun-io/rerun/tree/main/examples/python/rrt-star

   https://app.rerun.io/

   뒤늦게 둘러보는데, 정말 빠르고 좋네요.
   러스트용 imgui 인 egui 기반이라 크로스플랫폼 걱정도 없겠네요.
"
"https://news.hada.io/topic?id=14036","Toolify - AI 웹사이트 & 도구 디렉토리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Toolify - AI 웹사이트 & 도구 디렉토리

     * 1만개 이상, 233개 카테고리를 가진 AI 도구 디렉토리
     * 매일 ChatGPT에 의해서 도구 리스트 및 GPTs 스토어를 업데이트
     * 각 도구의 상세 정보들 정리: 핵심 기능, 주요 유스케이스, 트래픽, 유료 플랜 종류 및 가격, FAQ 등

   !!!
"
"https://news.hada.io/topic?id=13976","블로그 및 팟캐스트를 위한 검색 엔진, Feedle","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      블로그 및 팟캐스트를 위한 검색 엔진, Feedle

블로그와 팟캐스트 검색 엔진

     * 수백만 개의 블로그 글과 팟캐스트 에피소드 중에서 원하는 내용을 찾을 수 있는 검색 엔진 제공.
     * 새로운 결과가 나올 때마다 최신 정보를 받아볼 수 있는 RSS 피드 구독 기능.
     * 관심사에 기반하여 알려지지 않은 콘텐츠 제작자들을 발견할 수 있는 단일 RSS 피드.

feedle 소개

     * feedle은 새롭게 시작한 서비스로, Mastodon에서 친구를 찾고 있음.
     * 사용자들에게 feedle을 알리고 친구들과 공유하도록 권장.

GN⁺의 의견

     * feedle은 사용자의 관심사에 맞춘 블로그와 팟캐스트를 발견하는 새로운 방법을 제공함으로써 정보 검색의 편의성을 높인다.
     * RSS 피드 구독 기능은 사용자가 관심 있는 주제에 대해 지속적으로 업데이트를 받을 수 있게 하여 정보의 신속한 전달을 돕는다.
     * 새로운 콘텐츠 제작자를 발견할 수 있는 기능은 다양성과 새로운 관점을 접할 기회를 제공한다.
     * 비판적인 시각에서 볼 때, 검색 알고리즘의 투명성이나 결과의 정확성에 대한 정보가 부족하면 사용자의 신뢰를 얻기 어려울 수 있다.
     * feedle과 유사한 기능을 제공하는 다른 서비스로는 Feedly나 Pocket Casts가 있으며, 사용자는 여러 옵션을 비교하여 자신에게 가장 적합한 서비스를 선택할 수 있다.
     * feedle을 도입할 때는 사용자 개인정보 보호, 콘텐츠의 다양성 및 질적 수준, 그리고 플랫폼의 지속 가능성 등을 고려해야 한다.

        Hacker News 의견

     * 블로그와 저장소의 중요성
          + 인터넷 상에서 긴 형식의 독창적 사고를 담은 블로그와 저장소가 필요함.
          + 블로거로서 자신의 링크를 게시할 수 있는 기회에 감사함을 표함.
          + 이러한 이니셔티브를 지지하며 성공을 기원함.
     * Google 검색 팁
          + Google에 대한 부정적인 인식이 있지만, 특정 검색 명령어를 사용하여 다양한 결과를 얻는 방법이 유용함.
          + ""<search-terms> site:blogpost.com OR site:github.io OR site:wordpress.com OR site:medium.com OR site:substack.com""과 같은 명령어를 사용하면, 특정 사이트에서 검색 결과를 얻을 수 있음.
          + 때때로 reddit.com과 news.ycombinator.com도 포함시킴.
          + Google이 github.io와 medium.com을 약간 선호하는 경향이 있지만, 이 방법으로 웹을 탐색하는 것이 매우 효과적임.
          + 이러한 검색 명령어는 틈새 검색 엔진이 하는 일과 유사하지만, 더 다양한 결과를 제공함.
          + 특정 틈새 블로그를 놓칠 수도 있지만, site:news.ycombinator.com을 추가하면 좋은 틈새 블로그 게시물을 찾을 가능성이 높아짐.
          + 완벽한 해결책은 아니지만, 이 방법을 쉘과 노트에 저장해두고 필요할 때마다 사용하는 경험이 꽤 괜찮음.
     * 검색 엔진에 대한 질문
          + 어떤 종류의 쿼리를 잘 처리하는지, 팟캐스트 대본도 색인하는지에 대한 질문.
     * 팟캐스트/블로그 검색 엔진에 대한 호감
          + 팟캐스트/블로그 검색 엔진 아이디어를 매우 좋아함.
          + 결과를 RSS를 통해 스트리밍할 수 있어서 훌륭함.
          + Feedly를 사용하여 중요한 RSS 피드를 구독하고 있으며, 특정 Hacker News 저자들도 포함됨.
          + 현재 데이터베이스가 다소 부족하여, 인기 있는 팟캐스트 ""Science Vs""가 누락되어 있었음.
          + 비교를 위해, podchaser.com은 팟캐스트만을 다루지만 더 완성도가 높음.
     * 프로젝트에 대한 피드백
          + 쿼리를 피드로 팔로우할 수 있는 아이디어가 멋짐.
          + 잘 큐레이팅되고 검토된 피드 목록을 유지하는 것이 핵심이 될 것임.
          + 제출 양식에 문제가 있어 보임 - 어떤 폼 빌더 SaaS의 랜딩 페이지로 연결됨.
     * 오픈 소스화 제안
          + 이 프로젝트를 오픈 소스화하는 것이 좋을 것 같음.
          + 많은 개선과 업데이트를 받을 수 있을 것임.
          + 이 아이디어를 사랑함.
     * 사용자 경험에 대한 소소한 피드백
          + 검색 결과가 없을 때 ""더 보기"" 버튼이 작동하지 않는 문제.
     * 프로젝트에 대한 감사
          + 멋진 프로젝트를 만들어 공유해줘서 감사함.
          + 사용자가 죽은 링크를 신고하여 제거할 수 있게 하는 기능을 추가하는 것이 좋을 것 같음.
          + ""task management""를 검색했을 때, 404 오류나 더 이상 존재하지 않는 페이지로 연결되는 결과가 있었음.
          + 사용자가 처음에 Feedle의 링크를 추가했기 때문에, 이러한 결과를 제거하는 데 도움을 주고 싶음.
     * 검색 엔진에 대한 질문
          + 검색 엔진을 위한 검색 엔진이 있는지에 대한 질문.
     * ""I'm feeling lucky"" 기능에 대한 제안
          + ""I'm feeling lucky""와 같은 기능이 있으면 좋을 것 같음.
"
"https://news.hada.io/topic?id=14009","메릴랜드주 볼티모어의 프랜시스 스콧 키 다리 붕괴 사고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     메릴랜드주 볼티모어의 프랜시스 스콧 키 다리 붕괴 사고

        Hacker News 의견

     * 댓글은 해커뉴스 댓글 페이지로 이동되었음. 해당 페이지에는 더 많은 배경 정보가 있음.
     * 다리와 같은 장애물을 넘을 때, 바다로 배를 인도하는 데 예인선이 사용되는지에 대한 질문이 있음. 사용되지 않는다면 그 이유는 무엇인지에 대한 궁금증이 제기됨.
"
"https://news.hada.io/topic?id=14074","IrfanView - 빠르고 컴팩트한 그래픽 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      IrfanView - 빠르고 컴팩트한 그래픽 뷰어

     * 파일 크기가 6MB에 불과
     * 비상업적 용도로 무료 사용이 가능하며, Windows XP부터 Windows 11까지 지원
     * 32비트와 64비트 버전이 있으며, 다국어 및 유니코드를 지원
     * 사용하기 쉽지만 강력한 기능을 제공하는 것을 목표로 설계됨

다양한 기능

     * 이미지 보기, 변환, 최적화, 스캔 및 인쇄, 슬라이드쇼 생성, 배치 처리 등 다양한 기능을 제공함.
     * 멀티미디어 파일을 처리할 수 있는 기능도 포함되어 있음.

        Hacker News 의견

     * 1997년부터 현재까지 IrfanView 사용
          + IrfanView는 사진 편집(자르기, 크기 조정, 텍스트 추가 등), 일괄 처리, 디렉토리 내 사진 브라우징에 있어 스위스 군용 칼 같은 도구임.
          + 무거운 대안 프로그램들보다 훨씬 빠름.
          + Linux의 Wine을 통해, 그리고 Mac M1/M2에서도 아름답게 작동함. 어떤 플랫폼에서든 주요 설치 소프트웨어이며, 세계에 선물과 같은 소프트웨어임.
     * 오랜만에 들어본 이름, IrfanView
          + Windows 95 시절, Internet Explorer로 JPEG를 여는 것보다 빠른 방법으로 사용함. 이 모든 것이 나이가 들었다는 것을 느끼게 함.
     * 25년 이상된 IrfanView에 대한 인지
          + IrfanView에 대해 알고 있음. 25년 이상 되었음.
     * IrfanView가 해커뉴스 상단에 오른 이유 궁금
          + IrfanView가 좋지만, 왜 바로 오늘 해커뉴스 상단에 있는지 궁금함. 중요한 일이 있었나?
     * 설치 프로그램 다운로드 크기가 4MB였던 시절
          + 프로그램이 단순히 그 기능을 수행했던 시절, 가상 환경 전체를 위한 런타임을 포함하지 않았음.
     * Windows 사용 시 IrfanView가 기본 이미지 뷰어였음
          + Linux Mint의 소프트웨어 매니저에서 비슷한 것을 찾을 수 있고, Pix가 더 많은 기능을 제공하지만, 음악용 Foobar2000처럼 때때로 IrfanView가 그리움. 이는 근육 기억과 젊었을 때 더 인상 깊었기 때문일 수 있음.
     * nomacs를 좋은 대안으로 발견함
          + 클립보드 기능 측면에서 nomacs는 이미지 자체 또는 파일 시스템상의 경로를 복사할 수 있어 적절함. 대부분의 이미지 뷰어는 이 중 하나의 명령만 지원함.
     * 비트맵 관련 작업에 대한 일상적인 드라이버
          + IrfanView를 사용하여 최신 클립보드 항목(주로 스크린샷)을 보고, 편집하고, 자르는 것이 몇 년 동안 근육 기억이 됨. AutoHotkey를 통한 단축키와 /clippaste 명령줄 매개변수 사용.
     * Windows 98부터 ""반드시 가져야 하는 앱"" 중 하나인 IrfanView
          + 간단한 이미지 편집(크기 조정, 자르기 등)과 일괄 처리에 있어 IrfanView를 이길 수 있는 것은 없음.
          + 현재 주로 macOS에서 작업하고 있으며, IrfanView가 그립다. XnView가 충분히 가까운 대안일 수 있음.
     * 이미지에는 IrfanView, 비디오에는 VLC, 오디오에는 Foobar 사용
          + Windows에 기본으로 제공되는 것보다 훨씬 나은 소프트웨어임.
"
"https://news.hada.io/topic?id=14001","못생긴 아바타","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                못생긴 아바타

        Hacker News 의견

     * 첫 번째 댓글은 프로젝트의 창작자가 아니라고 밝히며, 모든 공로를 Xuan Tang에게 돌림.
          + 프로젝트 인정: ""이 프로젝트를 만든 것은 아니며, 모든 공로는 Xuan Tang에게 감.""
     * 두 번째 댓글은 소스 코드가 최소화되어 있어 프로젝트의 작동 방식을 이해하거나 기여하기 어렵다고 언급함.
          + 소스 코드 접근성 문제: ""소스 코드가 최소화되어 있어 프로젝트의 작동 방식을 파악하거나 기여하기 어려움.""
     * 세 번째 댓글은 이 프로젝트가 마음에 드는 유일한 NFT 컬렉션을 생각나게 한다고 함.
          + NFT 컬렉션과의 연관성: ""이 프로젝트가 마음에 드는 유일한 NFT 컬렉션을 떠올리게 함.""
     * 네 번째 댓글은 이 프로젝트의 애니메이션 스타일이 ""Home Movies""라는 만화와 비슷하다고 언급함.
          + 애니메이션 스타일 비교: ""애니메이션 스타일이 'Home Movies'라는 만화와 유사함.""
     * 다섯 번째 댓글은 웹사이트의 창작자가 코드를 곧 오픈소스로 공개할 것이라고 밝히며 지지를 요청함.
          + 창작자의 약속: ""웹사이트의 창작자로서 곧 코드를 오픈소스로 공개할 예정이며, 지지를 요청함.""
     * 여섯 번째 댓글은 uglyavatar.com 도메인을 몇 년 전에 구입했으며, 해커뉴스에서 이 프로젝트를 보고 놀랐다고 함.
          + 도메인 소유자의 반응: ""몇 년 전에 uglyavatar.com을 구입했고, 이 프로젝트를 보고 놀람.""
     * 일곱 번째 댓글은 이 아바타들이 실제 얼굴 없이도 얼굴 인식 능력을 활용한다고 평가하며, 포럼에서 스레드별로 무작위로 생성되는 아바타 아이디어를 제안함.
          + 아바타의 인식 기능: ""실제 얼굴 없이도 얼굴 인식 능력을 활용하는 아바타로, 포럼에서 스레드별로 무작위 생성되는 아바타가 있으면 좋을 것임.""
     * 여덟 번째 댓글은 이 아바타들을 4월 1일에 인트라넷이나 지라(Jira) 아바타로 교체하는 것이 완벽할 것이라고 제안함.
          + 재미있는 제안: ""4월 1일에 이 아바타들로 인트라넷이나 지라 아바타를 교체하는 것이 완벽함.""
     * 아홉 번째 댓글은 프로젝트가 좋으며, 피부 톤에 더 다양성을 추가하는 것이 좋을 것이라고 조언함.
          + 다양성 증진 제안: ""프로젝트가 좋으나, 피부 톤에 더 다양성을 추가하는 것이 좋을 것임.""
     * 마지막 댓글은 아바타의 머리카락 처리 방식이 마음에 든다고 칭찬하며, 몇 년 전 비슷한 프로젝트를 만든 경험을 공유함.
          + 개인 프로젝트 공유: ""아바타의 머리카락 처리 방식이 마음에 들며, 몇 년 전 비슷한 프로젝트를 만든 경험을 공유함.""
"
"https://news.hada.io/topic?id=13990","[번역] Road to Sora: OpenAI의 Sora를 이해하기 위한 선행 연구 소개 (feat. Oxen.AI)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   [번역] Road to Sora: OpenAI의 Sora를 이해하기 위한 선행 연구 소개 (feat. Oxen.AI)

     * 고품질의 AI 데이터셋 도구를 제작하는 Oxen.AI에서는 매주 금요일마다 AI 논문을 읽고 인사이트를 공유하는 ArXiv Dives를 운영하고 있습니다.
     * 이번 글은 3월 초 ArXiv Dives에서 진행되었던 Road to Sora라는 글을 허락 하에 번역하여 공유합니다.
     * 이번에 번역한 Road to Sora는 OpenAI에서 공개한 이미지 생성 모델인 Sora의 기술 문서를 바탕으로 Sora 모델을 이해하는데 필요한 지식들을 알아보는 것을 목표로 합니다.


Road to Sora: OpenAI의 Sora를 이해하기 위한 연구들 / ""Road to Sora"" Paper Reading List

   by Greg Schoeninger, Mar 5, 2024

   이번 글은 금요일 논문 클럽인 ArXiv Dives의 읽기 목록을 정리하기 위한 노력의 일환입니다. 아직 Sora에 대한 공식 논문이 발표되지 않았기 때문에 OpenAI의 Sora 기술 보고서의 내용을 따르는 것이 목표입니다. 앞으로 몇 주 동안 금요일 논문 클럽에서 몇 가지 기본 논문을 검토하여 Sora의 장막 뒤에서 어떤 일이 벌어지고 있는지 더 잘 파악할 수 있도록 할 계획입니다.

     This post is an effort to put together a reading list for our Friday paper club called ArXiv Dives. Since there has not been an official paper released yet for Sora, the goal is follow the bread crumbs from OpenAI's technical report on Sora. We plan on going over a few of the fundamental papers in the coming weeks during our Friday paper club, to help paint a better picture of what is going on behind the curtain of Sora.

  Sora가 무엇인가요? / What is Sora?

   Sora는 생성형 AI 분야에서 큰 반향을 일으킨 모델로, 자연어 프롬프트에서 고음질 동영상을 생성할 수 있습니다. 아직 Sora의 예시를 보지 못했다면 아래 산호초에서 헤엄치는 거북이 동영상을 확인해 보세요.

     Sora has taken the Generative AI space by storm with it's ability to generate high fidelity videos from natural language prompts. If you haven't seen an example yet, here's a generated video of a turtle swimming in a coral reef for your enjoyment.

   OpenAI에서 모델 자체의 기술적 세부 사항에 대한 공식 연구 논문을 발표하지는 않았지만, 사용한 기술에 대한 고수준의 세부 사항과 일부 정성적 결과를 다루는 기술 문서는 공개했습니다.

     While the team at OpenAI has not released an official research paper on the technical details of the model itself, they did release a technical report that covers some high level details of the techniques they used and some qualitative results.

   https://openai.com/research/…

  Sora 아키텍처 개요 / Sora Architecture Overview

   아래 논문들을 읽으시고 나면 Sora의 아키텍처가 이해되실 것입니다. (OpenAI의) 기술 문서는 매우 높은 곳에서 바라본 것으로, 각 논문들에서 다양한 측면을 자세히 이해하고 전체 그림을 그릴 수 있으시기를 바랍니다. 먼저 ""Sora: 대형 비전 모델의 배경, 기술, 한계 및 기회에 대한 검토 (Sora: A Review on Background, Technology, Limitations, and Opportunities of Large Vision Models""라는 멋진 리뷰 논문에서 리버스 엔지니어링된 아키텍처에 대한 고수준의 다이어그램을 제공하고 있습니다.

     After reading the papers below, the architecture here should start to make sense. The technical report is a 10,000 foot view and my hope is that each paper will zoom into different aspects and paint the full picture. There is a nice literature review called ""Sora: A Review on Background, Technology, Limitations, and Opportunities of Large Vision Models"" that gives a high level diagram of a reverse engineered architecture.

   OpenAI에서는 Sora가 위 논문에 나열된 많은 개념을 결합한 '확산 트랜스포머(Diffusion Transformer)'라고 설명하며, 비디오로부터 생성된 잠재 시공간 패치(latent spacetime patch)들에 적용된다고 말합니다.

     The team at OpenAI states that Sora is a ""Diffusion Transformer"" which combines many of the concepts listed in the papers above, but applied applied to latent spacetime patches generated from video.

   이는 비전 트랜스포머(ViT; Vision Transformer) 논문에 사용된 패치의 형태과 Latent Diffusion 논문과 유사한 잠재 공간(latent space)의 조합이지만, 확산 트랜스포머의 형태로 결합한 것입니다. 이미지의 넓이(width)과 높이(height)별로 패치가 있을 뿐만 아니라 영상의 시간 차원으로도 확장되어 있습니다.

     This is a combination of the style of patches used in the Vision Transformer (ViT) paper, with latent spaces similar to the Latent Diffusion Paper, but combined in the style of the Diffusion Transformer. They not only have patches in width and height of the image but extend it to the time dimension of video.

   이 모든 것을 위한 학습 데이터를 정확히 어떻게 수집했는지 말하기는 어렵지만, Dall-E 3 논문에 나온 기술들을 조합하였을 뿐만 아니라, GPT-4를 사용하여 각 이미지에 대한 상세한 텍스트 설명을 합친 뒤, 이를 영상으로 전환한 것으로 보입니다. 학습 데이터는 여기서 가장 중요한 비밀 소스일 가능성이 높기 때문에 기술 보고서에서 세부적인 내용이 가장 적게 설명되어 있습니다.

     It's hard to say how exactly they collected the training data for all of this, but it seems like a combination of the techniques in the Dalle-3 paper as well as using GPT-4 to elaborate on textual descriptions of images, that they then turn into videos. Training data is likely the main secret sauce here, hence has the least level of detail in the technical report.

  활용 사례 / Use Cases

   Sora와 같은 영상 생성 기술은 흥미로운 사용 사례 및 응용이 많습니다. 영화나 교육, 게임, 의료, 로봇 공학 등, 자연어 프롬프트로부터 사실적인 동영상을 생성하는 것은 여러 산업 분야에 큰 변화를 가져올 것입니다.

     There are many interesting use cases and applications for video generation technologies like Sora. Whether it be movies, education, gaming, healthcare or robotics, there is no doubt generating realistic videos from natural language prompts is going to shake up multiple industries.

   이 다이어그램의 하단에 있는 주석은 Oxen.ai에게도 해당되는 내용입니다. Oxen.ai에 대해 잘 모르시는 분들을 위해 설명드리자면, 저희는 머신러닝 모델에서 들어오고 나가는 데이터를 협업하고 평가하는 데 도움이 되는 오픈소스 도구를 구축하고 있습니다. 우리는 많은 사람들이 이러한 데이터에 대한 가시성을 필요로 하며, 이를 위해서는 공동의 노력이 필요하다고 믿습니다. AI는 다양한 분야와 산업에 영향을 미치고 있으며, 이러한 모델을 학습하고 평가하는 데이터를 더 많이 볼수록 더 나은 결과를 얻을 수 있습니다.

     The note at the bottom of this diagram rings true for us at Oxen.ai. If you are not familiar with Oxen.ai we are building open source tools to help you collaborate on and evaluate data the comes in and out of machine learning models. We believe that many people need visibility into this data, and that it should be a collaborative effort. AI is touching many different fields and industries and the more eyes on the data that trains and evaluates these models, the better.

   여기에서 확인해보실 수 있습니다: https://oxen.ai

     Check us out here: https://oxen.ai

  논문 목록 / Paper Reading List

   OpenAI가 공개한 기술 문서의 참고 문헌 섹션에는 많은 논문이 링크되어 있지만, 어떤 것을 먼저 읽어야 할지 또는 중요한 배경 지식이 되는지 알기가 다소 어렵습니다. 저희는 그 중 가장 영향력 있고 흥미로운 논문을 선별하여 유형별로 정리해 보았습니다.

     There are many papers linked in the references section of the OpenAI technical report but it is a bit hard to know which ones to read first or are important background knowledge. We've sifted through them and selected what we think are the most impactful and interesting ones to read, and organized them by type.

  배경 지식 관련 논문들 / Background Papers

   생성된 이미지와 동영상의 품질은 2015년부터 꾸준히 향상되고 있습니다. 일반 대중의 시선을 사로잡은 가장 큰 발전은 2022년 Midjourney와 Stable Diffusion, Dall-E부터 시작되었습니다. 이 섹션에는 여러 문헌에서 반복적으로 언급되는 몇 가지 기초 논문과 모델 아키텍처가 포함되어 있습니다. 모든 논문이 Sora 아키텍처에 직접적으로 관련된 것은 아니지만, 시간의 흐름에 따라 기술이 어떻게 발전해왔는지에 대해 이해할 수 있는 중요한 배경들입니다.

     The quality of generated images and video have been steadily increasing since 2015. The biggest gains that caught the general public's eyes began in 2022 with Midjourney, Stable Diffusion and Dalle. This section contains some foundational papers and model architectures that are referenced over and over again in the literature. While not all papers are directly involved in the Sora architecture, they are all important context for how the state of the art has improved over time.

   아래 논문 중 많은 부분을 이전 ArXiv Dives에서 다루었으니 따라잡고 싶으시면 Oxen.ai 블로그에 있는 모든 내용을 참고하세요.

   https://www.oxen.ai/community/arxiv-dives

    U-Net

   ""U-Net: 생물의학 이미지 세분화를 위한 컨볼루션 네트워크(U-Net: Convolutional Networks for Biomedical Image Segmentatio)"" 논문은 특정 분야(여기에서는 생물의학 이미지)의 작업에 사용되었던 논문이 다양한 사용 사례에 적용된 좋은 예입니다. 가장 주목할 만한 점은 각 단계에서 노이즈를 예측하고 완화하는 학습을 용이하게 하기 위해 Stable Diffusion과 같은 여러 디퓨전 모델을 기반으로 하고 있다는 점입니다. Sora 아키텍처에서 직접 사용되지는 않았지만, 이전 최신 기술을 위한 중요한 배경 지식입니다.

     ""U-Net: Convolutional Networks for Biomedical Image Segmentation"" is a great example of a paper that was used for a task in one domain (Biomedical imaging) that got applied across many different use cases. Most notably is the backbone many diffusion models such as Stable Diffusion to facilitate learning to predict and mitigate noise at each step. While not directly used in the Sora architecture, important background knowledge for previous state of the art.

   https://arxiv.org/abs/1505.04597

    언어 트랜스포머 / Language Transformers

   ""어텐션만 있으면 충분합니다(Attnetion is All You Need)"" 논문은 기계 번역 작업에서 입증된 또 다른 논문이지만 결국 모든 자연어 처리 연구에 중요한 논문이 되었습니다. 트랜스포머는 현재 ChatGPT와 같은 많은 LLM 애플리케이션의 근간이 되고 있습니다. 트랜스포머는 결국 다양한 양식으로 확장할 수 있으며, Sora 아키텍처의 구성 요소로 사용됩니다.

     ""Attention Is All You Need"" is another paper that proved itself on a Machine Translation task, but ended up being a seminal paper for all of natural language processing research. Transformers are now the backbone of many LLM applications such as ChatGPT. Transformers end up being extensible to many modalities and are used as a component of the Sora architecture.

   https://arxiv.org/abs/1706.03762

    비전 트랜스포머 / Vision Transformer (ViT)

   ""이미지는 16x16 단어의 가치가 있습니다: 대규모 이미지 인식을 위한 트랜스포머(An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale)"" 논문은 트랜스포머를 이미지 인식에 적용한 최초의 논문 중 하나로, 충분히 큰 데이터 세트에 대해 트레이닝하면 ResNet과 다른 컨볼루션 신경망을 능가할 수 있음을 증명한 논문입니다. 이 논문은 ""Attention is All You Need"" 논문에 나온 아키텍처를 컴퓨터 비전 작업에 적용했습니다. ViT는 텍스트 토큰을 입력으로 사용하는 대신 16x16 이미지 패치를 입력으로 사용합니다.

     ""An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale"" was one of the first papers to apply Transformers to image recognition, proving that they can outperform ResNets and other Convolutional Neural Networks if you train them on large enough datasets. This takes the architecture from the ""Attention Is All You Need"" paper and makes it work for computer vision tasks. Instead of the inputs being text tokens, ViT uses 16x16 image patches as input.

   https://arxiv.org/abs/2010.11929

    잠재 확산 모델 / Latent Diffusion Models

   ""잠재 확산 모델을 사용한 고해상도 이미지 합성(High-Resolution Image Synthesis with Latent Diffusion Models)""은 Stable Diffusion과 같은 많은 이미지 생성 모델의 기반이 되는 기술입니다. 잠재 표현(latent representation)에서 노이즈 제거 자동 인코더의 시퀀스로 이미지 생성을 재구성하는 방법을 보여줍니다. 이 모델들은 위에서 언급한 U-Net 아키텍처를 생성 프로세스의 중추로 사용합니다. 이러한 모델은 텍스트 입력이 주어지면 사실적인 이미지를 생성할 수 있습니다.

     ""High-Resolution Image Synthesis with Latent Diffusion Models"" is the technique behind many image generation models such as Stable Diffusion. They show how you can reformulate the image generation as a sequence of denoising auto-encoders from a latent representation. They use the U-Net architecture referenced above as the backbone of the generative process. These models can generate photo-realistic images given any text input.

   https://arxiv.org/abs/2112.10752

    CLIP

   ""자연어 감독으로부터 전이 가능한 시각 모델 학습(Learning Transferable Visual Models From Natural Language Supervision)""은 대조 언어-이미지 사전 훈련(CLIP; Contrastive Language-Image Pre-training)이라고도 하며 텍스트 데이터와 이미지 데이터를 서로 동일한 잠재 공간에 포함시키는 기법입니다. 이 기술은 텍스트와 이미지 쌍 간에 코사인 유사성이 높은지 확인하여 생성 모델의 언어 이해와 시각적 이해를 연결하는 데 도움이 됩니다.

     ""Learning Transferable Visual Models From Natural Language Supervision"" often referred to as Contrastive Language-Image Pre-training (CLIP) is a technique for embedding text data and image data into the same latent space as each other. This technique helps connect the language understanding half of generative models to the visual understanding half by making sure that the cosine similarity between the text and image representations are high between text and image pairs.

   https://arxiv.org/abs/2103.00020

    VQ-VAE

   Sora 기술 문서에 따르면, 벡터 양자화 변형 자동 인코더(VQ-VAE, Vector Quantized Variational Auto Encoder)로 원본 비디오의 차원을 줄입니다. VAE 모델은 잠재적 표현을 학습하기 위한 강력한 비지도 사전 학습 방법으로 알려져 있습니다.

     According to the technical report, they reduce the dimensionality of the raw video with a Vector Quantised Variational Auto Encoder (VQ-VAE). VAEs have been shown to be a powerful unsupervised pre-training method to learn latent representations.

   https://arxiv.org/abs/1711.00937

    Patch n' Pack: NaViT, a Vision Transformer for any Aspect Ratio and Resolution

   Sora 기술 문서에서는 모든 화면 비율의 비디오를 가져오는 방법과 이를 통해 훨씬 더 많은 데이터셋들을 학습하는 방법에 대해 설명합니다. 데이터를 자르지 않고도 모델에 더 많은 데이터를 공급할 수 있을수록 더 나은 결과를 얻을 수 있습니다. 이 논문에서는 이미지에 동일한 기법을 사용하지만, Sora는 이를 동영상으로 확장합니다.

     The Sora technical report talks about how they take in videos of any aspect ratio, and how this allows them to train on a much larger set of data. The more data they can feed the model without having to crop it, the better results they get. This paper uses the same technique but for images, and Sora extends it for video.

   https://arxiv.org/abs/2307.06304


  영상 생성 분야의 논문들 / Video Generation Papers

   They reference a few video generation papers that inspired Sora and take the generative models above to the next level by applying them to video.

    ViViT: A Video Vision Transformer

   이 논문에서는 영상 작업에 필요한 '시공간 토큰(Spatio-Temporal Token)'으로 동영상을 분할하는 방법에 대해 자세히 설명합니다. 이 논문은 비디오 분류에 초점을 맞추고 있지만, 동일한 토큰화 방식을 비디오 생성 태스크에도 적용할 수 있습니다.

     This paper goes into details about how you can chop the video into ""spatio-temporal tokens"" needed for video tasks. The paper focuses on video classification, but the same tokenization can be applied to generating video.

   https://arxiv.org/abs/2103.15691

    Imagen Video: High Definition Video Generation with Diffusion Models

   Imagen은 일련의 비디오 디퓨전 모델을 기반으로 하는 텍스트-조건부 비디오 생성 시스템(Text-conditional Video Generation System)입니다. 시간 방향의 컨볼루션과 Super Resolution 기법을 사용하여 텍스트로부터 고화질 동영상을 생성합니다.

     Imagen is a text-conditional video generation system based on a cascade of video diffusion models. They use convolutions in the temporal direction and super resolution to generate high quality videos from text.

   https://arxiv.org/abs/2210.02303

    Align your Latents: High-Resolution Video Synthesis with Latent Diffusion Models

   이 논문은 위의 이미지 생성 논문에서 잠재 디퓨전 모델을 가져와 잠재 공간에 시간 차원(temporal dimension)을 도입합니다. 여기에서는 잠재 공간을 정렬하여 시간적 차원에서 몇 가지 흥미로운 기법을 적용하지만, 아직 Sora의 시간적 일관성에는 미치지 못합니다.

     This paper takes the latent diffusion models from the image generation papers above and introduces a temporal dimension to the latent space. They apply some interesting techniques in the temporal dimension by aligning the latent spaces, but does not quite have the temporal consistency of Sora yet.

   https://arxiv.org/abs/2304.08818

    Photorealistic video generation with diffusion models

   이 논문은 확산 모델링을 통한 사실적인 동영상 생성을 위한 트랜스포머 기반 접근 방식인 W.A.L.T를 소개합니다. 제가 알기로는 레퍼런스 목록에서 소라와 가장 가까운 기술인 것 같으며, 구글, 스탠포드, 조지아공대 팀이 2023년 12월에 발표했습니다.

     They introduce W.A.L.T, a transformer-based approach for photorealistic video generation via diffusion modeling. This feels like the closest technique to Sora in the reference list as far as I can tell, and was released in December of 2023 by the teams at Google, Stanford and Georgia Tech.

   https://arxiv.org/abs/2312.06662
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  시각-언어 이해 분야의 논문들 / Vision-Language Understanding

   텍스트 프롬프트에서 동영상을 생성하려면 대량의 데이터셋들을 수집해야 합니다. 사람이 직접 그 많은 동영상에 라벨을 붙이는 것은 불가능하기 때문에 DALL-E 3 논문에 설명된 것과 유사한 합성 데이터 기법을 사용하는 것으로 보입니다.

     In order to Generate Videos from text prompts, they need to collect a large dataset. It is not feasible to have humans label that many videos, so it seems they use some synthetic data techniques similar to those described in the DALL·E 3 paper.

    DALL·E 3

   텍스트-비디오 생성 시스템을 학습하려면 해당 텍스트 캡션이 포함된 대량의 동영상이 필요합니다. DALL-E 3에 소개된 리-캡셔닝(re-captioning) 기법들을 Sora의 동영상 학습 데이터들에 적용합니다. DALL-E 3와 마찬가지로, 짧은 사용자 프롬프트를 더 긴 상세 캡션으로 변환하여 비디오 모델에 전송하는 데에도 GPT 모델을 활용합니다.

     Training text-to-video generation systems requires a large amount of videos with corresponding text captions. They apply the re-captioning technique introduced in DALL·E 3 to videos. Similar to DALL·E 3, they also leverage GPT to turn short user prompts into longer detailed captions that are sent to the video model.

   https://openai.com/dall-e-3

    Llava

   모델이 사용자의 지시문을 따를 수 있도록 하기 위해, Llava 논문과 유사한 지시문 기반의 미세 조정(instruction finetuning)을 수행했을 가능성이 높습니다. 이 논문은 또한 위의 Dall-E의 방법과 함께 사용하면 흥미로운 대규모 지시문 데이터셋들을 생성하기 위한 몇 가지 합성 데이터 기법을 보여줍니다.

     In order for the model to be able to follow user instructions, they likely did some instruction fine-tuning similar to the Llava paper. This paper also shows some synthetic data techniques to create a large instruction dataset that could be interesting in combination with the Dalle methods above.

   https://arxiv.org/abs/2304.08485

    Make-A-Video & Tune-A-Video

   Make-A-Video 및 Tune-A-Video와 같은 논문들에서는 프롬프트 엔지니어링이 모델의 자연어 이해 능력을 활용하여 복잡한 지침을 해독하고 이를 응집력 있고 생생한 고품질 비디오 내러티브로 렌더링하는 방법을 보여줍니다. 예를 들어, 간단한 사용자 프롬프트를 형용사와 동사로 확장하여 장면을 더욱 풍성하게 표현할 수 있습니다.

     Papers like Make-A-Video and Tune-A-Video have shown how prompt engineering leverages model’s natural language understanding ability to decode complex instructions and render them into cohesive, lively, and high-quality video narratives. For example: taking a simple user prompt and extending it with adjectives and verbs to more fully flush out the scene.

   https://arxiv.org/abs/2209.14792

   https://arxiv.org/abs/2212.11565

  결론 / Conclusion

   이 글이 Sora와 같은 시스템을 구성할 수 있는 모든 중요한 요소에 대해 알아보는 출발점이 되길 바랍니다! 저희가 놓친 부분이 있다고 생각되면 언제든지 이메일(hello@oxen.ai)로 알려주세요.

     We hope this gives you a jumping off point for all the important components that could make up a system like Sora! If you think we missed anything, feel free to email us at hello@oxen.ai.

   여기 소개된 논문들은 결코 가볍게 읽을만한 것들이 아닙니다. 그렇기 때문에 금요일에는 한 번에 하나의 논문을 천천히 읽으며 누구나 이해할 수 있도록 주제를 쉽게 설명합니다. 누구나 AI 시스템 구축에 기여할 수 있으며, 기본을 더 많이 이해할수록 더 많은 패턴을 발견하고 더 나은 제품을 만들 수 있다고 믿습니다.

     It is by no means a light set of reading. This is why on Fridays we take one paper at a time, slow down, and break down the topics in plain speak so anyone can understand. We believe anyone can contribute to building AI systems, and the more you understand the fundamentals, the more patterns you will spot, and better products you will build.

   https://www.oxen.ai/community

   ArXiv Dives에 가입하거나 Oxen.ai Discord 커뮤니티에 가입하여 학습 여정에 동참해보세요.

     Join us on a learning journey either by signing up for ArXiv Dives or simply joining the Oxen.ai Discord community.

   https://discord.com/invite/s3tBEn7Ptg

  원문

   https://www.oxen.ai/blog/road-to-sora-reading-list


   ⚠️광고⚠️::pytorch:파이토치 한국 사용자 모임:kr:이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일:love_letter:로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)

   OpenAI's Sora:
     * https://news.hada.io/topic?id=13383
     * https://news.hada.io/topic?id=13929
"
"https://news.hada.io/topic?id=14065","OpenVoice - 다재다능한 인스턴트 음성 복제 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenVoice - 다재다능한 인스턴트 음성 복제 기술

     * 참조하는 화자의 짧은 오디오 클립만으로 그들의 목소리를 복제하고 여러 언어로 음성을 생성할 수 있는 다목적 즉각적 음성 복제 방법
     * 목소리 스타일에 대한 세밀한 조절이 가능하며, 감정, 억양, 리듬, 정지, 억양뿐만 아니라 참조 화자의 음색도 복제할 수 있음
     * 대규모 화자 훈련 세트에 포함되지 않은 언어에 대해서도 제로샷(zero-shot) 교차 언어 음성 복제 가능
     * 상업적으로 사용 가능한 API보다 수십 배 더 적은 계산 비용으로 우수한 성능을 제공
     * 참조 음색을 정확하게 복제하고 다양한 언어 및 억양으로 음성을 생성할 수 있음
     * 감정과 억양뿐만 아니라 리듬, 정지, 억양과 같은 다른 스타일 매개변수에 대한 세밀한 제어를 가능하게 함

  Hacker News 의견

     * 한 해커뉴스 사용자는 자신의 경험을 공유하며, OpenVoice의 Gradio 데모를 로컬에서 실행하는 방법을 설명함. 이 사용자는 RTX 3090을 사용하여 XTTS2보다 빠른 속도로 음성을 생성하고, VRAM을 약 1.5GB 사용했다고 언급함. 데모는 자원 사용을 고려하여 200자로 제한되어 있지만, 실시간의 8배 속도로 작동한다고 함. 또한, 데모를 수정하여 더 긴 텍스트에 대해 테스트했을 때, 1분 분량의 음성을 약 4초 만에 렌더링했다고 함. 음성의 명료성은 XTTS2보다 좋지만, 약간 어색하고 로봇 같은 느낌이 있다고 평가함.
     * 다른 사용자는 음성 복제 기술의 윤리적인 사용 사례에 대해 의문을 제기함. 이 사용자는 포르노, 신분 도용, 사칭, 성우 대체, 성우의 목소리 도용, 고객 지원에서 봇 사용을 숨기는 것 등 부정적인 사용 사례들을 언급함. 그러나 목소리를 잃은 사람들에게 실제 목소리를 제공하는 것과 같은 긍정적인 사용 사례도 있을 수 있지만, 이러한 시장이 투자를 정당화하기에는 충분하지 않다고 주장함.
     * OpenVoice가 Huggingface TTS 경연 리더보드에서 두 번째로 낮은 순위에 있다는 정보를 공유한 사용자가 있음. 이 사용자는 styletts2와 xtts2와 같은 대안들이 OpenVoice보다 훨씬 높은 순위에 있다고 언급함.
     * 일론 머스크의 목소리를 모방하는 것이 품질의 증거로 사용되는 것에 대해 의아해하는 사용자가 있음. 실제로 머스크의 목소리가 어색하고 끊어지는 경향이 있기 때문에, 더 나은 목소리를 모방할 수 있다고 주장함.
     * Voicecraft가 그들의 모델 가중치를 공개했다는 소식을 전한 사용자가 있음.
     * 사이트에서 제공하는 클립과 비교하여 로컬에서 유사한 품질의 음성 복제를 달성하지 못했다고 언급하는 사용자가 있음. 잘못된 점이 있을 수도 있다고 추측함.
     * GitHub에서 로컬에서 실행 가능하다는 것을 확인한 사용자가 있으며, 품질이 좋다고 평가함.
     * 음성을 IPA와 유사한 표현으로 인코딩하고, 해당 표현을 대상 언어로 디코딩하는 과정에 대해 설명하는 사용자가 있음. 또한, '음색'을 추출하고 IPA와 유사한 표현에서 제거한 후, 대상 계층에 다시 추가하는 과정을 언급함. 이를 통해, 사용자는 자신의 목소리가 다른 언어로 유사한 음색을 가지고 말하는 것을 들을 수 있다고 함. 사용자는 자신이 중국어를 유창하게 배우게 된다면, 그 결과가 얼마나 비슷할지, 그리고 다른 언어로 음색을 번역하는 '음색 번역기'가 필요한지 궁금해함.
     * 다중 녹음에서 화자를 식별하여 화자 구분을 할 수 있는 '반대' 모델에 대해 알고 있는지 묻는 사용자가 있음.
     * 음성 복제 도구들이 모두 'vocal fry'라는 특징을 가지고 있으며, 이는 음성의 미묘한 부분을 정확하게 매치하지 못하는 '불가사의한 계곡'과 같다고 평가하는 사용자가 있음. 이 사용자는 이러한 도구들이 Microsoft Sam과 유사한 숨소리를 완전히 벗어나지 못한다고 설명함.
"
"https://news.hada.io/topic?id=13981","LapDev - 오픈소스 원격 개발 환경 관리 소프트웨어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LapDev - 오픈소스 원격 개발 환경 관리 소프트웨어

     * 간편한 자체 호스팅: 설치와 유지 관리가 최소한의 노력으로 가능하도록 설계. 애플리케이션은 복잡한 내부 문제 해결 없이 작동하도록 만들어짐.
     * 수평 확장성: 단순하지만 강력한 구조로, Lapdev는 단일 기계에서 서버 Fleet에 이르기까지 확장 가능하여 개발자 팀이 성장함에 따라 함께 성장할 수 있는 개발 환경 관리 시스템을 제공
     * 코드로 정의된 개발 환경: Devcontainer 오픈 사양을 사용하여 개발 환경을 코드로 정의할 수 있어, 다른 개발자들 간에 표준화된 개발 환경을 복제하여 환경 관련 문제를 방지하고 모두에게 일관된 설정을 보장
     * 온보딩 시간 절약: 새 프로젝트에 개발자를 온보딩할 때, 기계에 환경을 준비하는 데 몇 시간 또는 며칠이 필요 없음. 즉시 코딩을 시작할 수 있음

계획된 기능

     * 다양한 작업 공간 유형 지원: 현재 Lapdev는 컨테이너 기반 작업 공간만 지원하지만, 예를 들어 개발 흐름에서 k8s 클러스터를 실행하고 싶을 때 제한이 있음. VM과 베어 메탈 기계 지원이 로드맵에 있으며, Windows, Linux, macOS 등 다양한 OS 지원도 계획 중임. 이를 통해 개발자는 기계를 전환할 필요 없이 동일한 로컬 기계에서 개발 및 디버깅을 할 수 있음.

GN⁺의 의견

     * Lapdev는 개발자들이 자신의 서버나 클라우드에서 원격 개발 환경을 쉽게 설정하고 관리할 수 있게 해주는 도구로, 개발 환경의 표준화와 빠른 온보딩이 가능하게 함으로써 효율성을 높일 수 있음.
     * 이러한 도구는 특히 대규모 개발 팀이나 다양한 프로젝트를 동시에 진행하는 조직에 유용할 수 있으며, 개발 환경의 일관성을 유지하면서도 확장성을 제공함.
     * 그러나 이 기술을 도입하기 전에 보안, 호환성 및 지원과 관련된 고려 사항이 있을 수 있으며, 자체 호스팅 솔루션을 사용함으로써 발생할 수 있는 추가적인 유지 관리 부담을 고려해야 함.
     * 현재 시장에는 Visual Studio Code의 Remote Development Extensions와 같이 비슷한 기능을 제공하는 다른 도구들이 있으며, 사용자는 자신의 요구 사항에 가장 적합한 도구를 선택해야 함.
     * Lapdev가 VM과 베어 메탈 기계 지원을 계획하고 있다는 점은 다양한 개발 환경 요구 사항을 충족시키려는 노력의 일환으로 볼 수 있으며, 이는 개발자들에게 더 넓은 선택지를 제공할 것임.

  Hacker News 의견

     * 로컬 서버 하드웨어에서 개발 컨테이너(devcontainers)를 월별 요금 없이 사용할 수 있는 것은 매우 좋아 보임. 지금까지는 Docker-compose와 JetBrains의 원격 SSH 개발을 사용해왔지만, 이 새로운 방법이 훨씬 나을 것으로 기대됨.
     * 원격 개발 환경에 관심이 있지만, 클라우드에서 더 많은 소프트웨어를 관리하는 것에 대해 크게 흥분하지는 않음. Skypilot을 사용하여 클라우드 API에 플러그인이 있어 k8s 클러스터를 관리하지 않고도 개발 기계를 시작할 수 있기 때문에 좋은 아이디어로 생각함. Jupyter 서버를 시작하는 데는 더 잘 작동했지만, ""완전한"" 개발 기계는 몇 가지 SSH/VS Code 구성만으로 가능해 보임.
     * 원격 개발 환경은 특정 유형의 개발에 제한이 있을 수 있음. 예를 들어, iOS와 Android 앱 개발이 까다롭거나, GPU가 필요한 게임 개발에서 빌드 아티팩트 다운로드가 느릴 수 있음. 이를 해결하기 위한 가이드가 있는지 궁금함.
     * 이러한 도구에 대해 더 알고 싶어함. Coder가 .devcontainer에 대한 알파 지원을 포함하고 있다는 것을 봤지만, 다른 OSS 옵션에 대해서는 알지 못함.
     * Proxmox 설정을 사용하면 기존 VM/컨테이너를 복제하고, VSCode를 가리키기만 하면 됨. 이것이 실제로 무엇을 추가하는가? 자동화는 아니며(Proxmox에서 몇 번의 클릭을 자동화할 수 있음), 리소스 관리도 아님(Proxmox가 스토리지 등을 처리함). 개발자 신원인가? 그것이 유일하게 필요한 것이라면 환경에 SSH 키를 배포하기 위한 (비교적 간단한) 스크립트를 작성해야 함.
     * 원격 기계에서 호스팅되는 VSCode인 code-server와 SSH를 함께 설치해야 했던 경험에서, 둘 다 더 잘 관리되는 경험이 매우 흥미로움.
     * 해당 분야의 또 다른 구현체로는 devpod.sh가 있음.
     * 버튼의 텍스트를 중앙에 배치하여 버튼처럼 보이게 하는 디자인 팁을 제공함. 텍스트를 왼쪽 정렬하면 레이블처럼 보일 수 있으므로, 작은 변경이지만 더 나은 전환을 가져올 수 있음.
     * 원격 서버에 설치된 것은 이해함. 하지만 이것이 원격 환경을 제공하는 것인지, 로컬 환경을 제공하는 것인지?그리고 이 컨텍스트에서 '환경'이란 무엇인가? Docker compose 파일과 .env인가? 코드 또는 vim 설정인가? Vagrant와 같은 VM인가?
     * 현재 devcontainers의 주요 문제점은 GUI 앱을 원격으로 실행할 때 GUI가 오직 서버에서만 열림. 이 솔루션이 GUI를 원격으로 내보낼 수 있는지 궁금함.
"
"https://news.hada.io/topic?id=14015","OpenAI Sora의 첫인상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI Sora의 첫인상

     * OpenAI가 지난달 세상에 소개한 Sora는 시각 예술가, 디자이너, 크리에이티브 디렉터, 영화 제작자들과 협력하며 창의적 과정에서 어떻게 도움이 될 수 있는지 학습 중임
     * Sora는 기존의 것을 복제하는 것이 아니라, 그렇지 않았다면 결코 볼 기회가 없었을 새롭고 불가능한 아이디어를 현실로 만들어낼 때 가장 강력함
     * Sora는 아직 개선할 점이 많지만, 창작자들이 아이디어를 현실로 만들어내는 데 어떻게 도움이 될 수 있는지 이미 엿볼 수 있음

shy kids

     * 토론토에 기반을 둔 멀티미디어 제작 회사인 shy kids는 풍선 인간에 관한 단편 영화 제작에 Sora를 활용함
     * shy kids는 Sora가 실제처럼 보이는 것을 생성하는 데 뛰어난 능력을 가졌지만, 완전히 초현실적인 것을 만들어내는 능력에 더 큰 흥미를 느낌
     * 이들은 전 세계의 사람들이 가슴 속에 담아둔 이야기를 세상에 보여줄 기회를 얻게 되었다고 말함

Paul Trillo, 감독

     * 다양한 분야의 예술가, 작가, 감독인 Paul Trillo는 Rolling Stone과 The New Yorker로부터 찬사를 받은 바 있음
     * Paul은 Vimeo에서 최고의 단편 영화에 주어지는 Vimeo Staff Picks를 19회 수상함
     * 그는 Sora와 함께 작업하며 시간, 돈, 타인의 허락에 구애받지 않고 대담하고 흥미로운 방식으로 아이디어를 내고 실험할 수 있었다고 말함

Nik Kleverov, 크리에이티브 디렉터 / Native Foreign

     * Native Foreign은 브랜드 스토리텔링, 모션 및 타이틀 디자인, 생성 AI 워크플로우를 전문으로 하는 로스앤젤레스의 에미상 후보 크리에이티브 에이전시임
     * 공동 창립자인 Nik Kleverov는 Sora를 사용하여 개념을 시각화하고 브랜드 파트너를 위한 크리에이티브를 신속하게 반복함
     * 그는 예산 제약이 더 이상 창의성의 내러티브를 전적으로 형성할 필요가 없다고 제안함

August Kamp, 예술가/음악가

     * 음악가, 연구자, 창의적 활동가, 다분야 예술가인 August Kamp는 Sora가 상상력과 수단이 충돌하는 한계를 극복하는 데 있어 진정한 전환점이 되었다고 설명함
     * 그녀는 직관적으로 영화적 시각물을 구축하고 반복하는 능력이 새로운 예술 분야를 개척했다고 말함

Josephine Miller, 크리에이티브 디렉터

     * Josephine Miller는 3D 시각물, 증강 현실, 디지털 패션 디자인을 전문으로 하는 런던 기반 Oraar Studio의 공동 창립자이자 크리에이티브 디렉터임
     * 그녀는 Sora가 기술적으로 불가능했던 오랜 아이디어를 실현할 수 있는 잠재력을 열었다고 말함
     * 높은 수준의 품질로 신속하게 개념화하는 능력은 그녀의 창의적 과정에 도전을 주며 스토리텔링에서 진화를 돕고 있음

Don Allen Stevenson III, 디지털 AR/XR 아티스트

     * Don Allen III는 DreamWorks Animation에서 경력을 시작한 다분야 창작자, 연사, 컨설턴트로, 혼합 현실, 가상 현실, AI 애플리케이션 분야에서 주요 기술 및 엔터테인먼트 회사와 협력함
     * 그는 오랫동안 머릿속에서 재미있을 것 같은 증강 현실 하이브리드 생물을 만들어왔으며, 이제 Sora를 통해 아이디어를 프로토타이핑하기가 훨씬 쉬워졌다고 말함
     * Don은 Sora의 '이상함'을 가장 큰 강점으로 꼽으며, 기술적 장애물에서 벗어나 순수한 창의성에 집중할 수 있게 되었다고 말함

Alex Reben, 조각가/예술가 및 OpenAI의 아티스트 인 레지던스

     * Alex Reben은 인공 지능에서 인간 본성의 유머와 터무니없음을 탐구하는 작업을 지난 10년간 만들어온 예술가임
     * 그는 AI에서 생성된 이미지에서 시작하여 조각상을 만들고, 이러한 AI 창작물을 물리적 세계에서 3D 모델로 변환함
     * Alex는 Sora를 사용하여 3D 조각을 개발하는 출발점으로 활용하며, 사진 측량의 영역과 조각에 대한 잠재적 응용 가능성을 탐구하는 데 관심을 가짐
"
"https://news.hada.io/topic?id=13961","SQLite 스키마 다이어그램 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          SQLite 스키마 다이어그램 생성기

     * GraphViz 형식으로 SQLite 데이터베이스 스키마를 생성하는 SQL Query
     * 파일로 저장하거나 dot 명령으로 파이프해서 PNG/SVG/PDF 등으로 변환 가능
       sqlite3 path/to/database.db -init sqlite-schema-diagram.sql """" > schema.dot dot -Tsvg schema.dot > schema.svg
     * SQLite3 3.37.0 이상 필요(table_list 얻는 기능이 포함됨)

        Hacker News 의견

     * 저자는 자신의 작품이 너무 특정하고 사소해서 해커뉴스에 많은 관심을 끌지 못할 것이라고 생각했으나, 예상과 달리 관심을 받음.

     저자는 자신의 작품이 해커뉴스에서 주목받지 못할 것으로 생각했으나, 실제로는 관심을 받는 것에 놀람.
     * SQLite의 Fossil 저장소를 대상으로 시도했을 때, 결과 다이어그램에는 관계 화살표가 없었음. Fossil의 스키마는 기본적으로 테이블의 기본 키를 가리키는 REFERENCES 절을 사용함. 다이어그램 생성기는 명시적인 열 이름을 요구함.

     SQLite의 Fossil 저장소에 시도한 결과, 다이어그램에 관계를 나타내는 화살표가 없었음. 이는 Fossil 스키마가 기본 키를 참조하는 방식 때문이며, 다이어그램 생성기는 열 이름이 명시적으로 필요함을 시사함.
     * 닷컴 시대에 근무했던 한 회사에서는 대형 프린터를 사용하여 데이터베이스 스키마 다이어그램 포스터를 인쇄하고 벽에 걸어 두었는데, 이는 새로운 직원들에게 매우 유용했음.

     과거에 한 회사에서는 대형 프린터로 데이터베이스 스키마 다이어그램을 인쇄하여 신입 직원들에게 도움이 되도록 벽에 걸어 둠.
     * 개인적으로 사용하기 위해 비슷한 도구를 만들었는데, .dot 파일을 입력받아 간단한 UI를 제공하고, 최종 다이어그램에 포함할 테이블/관계를 선택하며, 테이블을 강조하고 관련 테이블을 추가하고, 두 테이블 사이의 최단 경로에 있는 테이블을 추가하고, 최종 다이어그램에 색상을 지정하며, 필요한 그래프 소스를 생성하여 클립보드에 복사하고, 그래프를 볼 수 있는 두 개의 GraphViz 페이지 중 하나를 로드함.

     사용자가 직접 만든 도구는 .dot 파일을 처리하고 사용자 인터페이스를 통해 다이어그램의 테이블과 관계를 선택하며, 색상 지정과 핵심 필드만 표시하는 옵션을 제공하고, 그래프 소스를 클립보드로 복사하여 GraphViz 페이지에서 볼 수 있게 함.
     * WWW SQL Designer는 온라인 SQL 다이어그램 도구임.

     WWW SQL Designer는 사용자가 온라인으로 SQL 다이어그램을 그릴 수 있는 도구임.
     * 개발자는 sqlite-schema-diagram.sql에서 SQL을 '남용하는' 것을 즐기며, 이 용어는 개발자가 자신의 작업을 설명하는 데 사용하는 것임.

     개발자는 자신의 작업에서 SQL을 '남용하는' 것을 재미있어하며, 이는 개발자의 관점에서 사용하는 용어임.
     * SQLite를 사용하는 게임 서버에서 이 도구를 발견하고 CI 파이프라인에 추가하려고 생각 중임. 주 데이터베이스에 많은 관계가 있어 다른 사람들이 작업하는 데 유용할 것임.

     SQLite를 사용하는 게임 서버에서 이 도구를 CI 파이프라인에 통합하려고 함. 이는 주 데이터베이스와 관련된 많은 데이터를 가지고 있어 다른 개발자들에게 유용할 것으로 기대됨.
     * 다이어그램 제작 도구는 Schemaspy.org보다 의존성이 적어 보이며, Schemaspy.org는 여전히 큰 데이터베이스에 대해 훌륭함.

     다이어그램 제작 도구는 Schemaspy.org보다 의존성이 적어 보이지만, Schemaspy.org도 큰 데이터베이스에 매우 적합함.
     * Paracelsus는 SQLAlchemy로 정의된 데이터베이스에 대해 마크다운 또는 dot 형식의 다이어그램을 생성함.

     Paracelsus는 SQLAlchemy로 정의된 데이터베이스의 다이어그램을 마크다운 또는 dot 형식으로 생성하는 도구임.
     * 방문한 지 5분 만에 GitLab CI 파이프라인에 이 도구를 통합함.

     사용자는 이 도구를 발견하고 빠르게 GitLab CI 파이프라인에 통합함.
"
"https://news.hada.io/topic?id=14003","ZenHammer: AMD Zen 기반 플랫폼을 겨냥한 Rowhammer 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ZenHammer: AMD Zen 기반 플랫폼을 겨냥한 Rowhammer 공격

ZenHammer: AMD Zen 기반 플랫폼에서의 Rowhammer 공격

     * AMD Zen 2 및 Zen 3 시스템의 DDR4 장치에서 TRR 완화에도 불구하고 Rowhammer 비트 플립을 유발할 수 있음을 보여줌.
     * 이 결과는 AMD 시스템이 인텔 시스템만큼 Rowhammer에 취약하다는 것을 증명하며, x86 데스크탑 CPU 시장에서 약 36%의 AMD 점유율을 고려할 때 공격 표면이 크게 증가함.
     * 또한 ZenHammer는 DDR5 장치에서 처음으로 Rowhammer 비트 플립을 유발할 수 있음을 보여줌.

어떻게 했나요?

     * AMD 시스템에 대한 DRAMA 기법을 적용하여 비밀 DRAM 주소 함수를 역공학함.
     * 물리적 주소에 물리적 오프셋을 적용해야 함을 발견하여 DRAM 주소 함수를 완전히 복구함.
     * AMD Zen 2 및 Zen 3에서는 주소 함수를 사용하여 매우 적은 수의 비트 플립을 유발함을 보여줌.
     * 리프레시 동기화를 조사하고 AMD에서 정확하고 신뢰할 수 있는 리프레시 동기화를 위해 비반복 행을 사용하는 연속 타이밍 측정이 효과적임을 입증함.
     * AMD Zen+/3 시스템에서 비균일 Rowhammer 패턴의 활성화 비율이 인텔 Coffee Lake보다 현저히 낮음을 발견함.
     * 다양한 펜스 유형 및 펜스 스케줄링 정책이 AMD Zen 시스템에서 Rowhammer 패턴에 미치는 영향을 조사함.

얼마나 나쁜가요?

     * 10개의 DDR4 DRAM 장치를 대상으로 평가를 실시함.
     * ZenHammer 퍼저는 10개의 DDR4 DRAM 장치 중 7개(Zen 2)와 6개(Zen 3)에서 비트 플립을 유발할 수 있음.
     * 이전 연구에서 나온 세 가지 공격을 기반으로 이러한 비트 플립의 실제 공격 가능성을 평가함.

DDR5는 어떤가요?

     * AMD Zen 4에서 DRAM 함수를 역공학하고 10개의 DDR5 장치를 평가함.
     * ZenHammer는 한 장치에서 약 42,000개의 플립을 유발할 수 있었으나, 나머지 9개 장치에서는 플립을 유발하지 못함.
     * DDR5 장치에 대한 더 효과적인 패턴을 찾기 위해 추가 연구가 필요함을 결론짓음.

추가 정보

     * 이 연구에 대한 자세한 내용과 정보는 2024년 8월 USENIX Security에서 발표될 예정인 논문을 참조함.
     * ZenHammer 퍼저는 Github에서 사용할 수 있음.

자주 묻는 질문들

     * AMD 시스템에 대한 관심이 적었던 이유는 원래의 Rowhammer 연구가 인텔 시스템에서 더 많은 비트 플립을 보여주었기 때문임.
     * 안전한 DDR4 장치는 거의 없으며, 퍼저를 더 조정하면 이 장치들에서도 비트 플립을 유발할 수 있을 것으로 생각됨.
     * 10개의 장치만 평가하는 이유는 실험실에 제한된 수의 AMD Zen 2/3 기계가 있고 일부 실험이 오래 걸리기 때문임.
     * DRAM이 취약한지 확인하는 방법은 Github에서 ZenHammer 퍼저의 코드를 사용할 수 있음.
     * JEDEC가 이 문제를 아직 해결하지 않은 이유는 Rowhammer를 해결하는 것이 어렵지만 불가능하지는 않으며, JEDEC 내부의 많은 관료주의 때문에 문제를 제대로 다루기 어려움.
     * ECC가 있는 DIMM에 대한 보호는 DDR3에서의 이전 연구에 따르면 Rowhammer에 대한 보호를 제공할 수 없으며, 현재 DDR4 장치에서 더 많은 비트 플립이 발생하기 때문에 완전한 보호를 제공할 수 없음.
     * 시스템이 두 배의 리프레시 비율로 실행되는 경우, 성능 오버헤드와 전력 소비가 증가할 뿐만 아니라, 이전 연구에 따르면 이는 완전한 보호를 제공하지 않는 약한 해결책임.

책임 있는 공개

     * Rowhammer는 업계 전반에 알려진 문제이며, 일반적인 공개 절차를 거칠 필요가 없다고 판단함.
     * 그럼에도 불구하고 2024년 2월 26일에 AMD에 정보를 알렸고, 그들의 요청에 따라 2024년 3월 25일까지 공개하지 않음.
     * 이 페이지는 2024년 3월 21일에 실수로 잠시 온라인에 있었음.

감사의 말

     * 이 연구는 스위스 국립과학재단(SNSF)의 NCCR Automation, ERC-StG PROMISE 프로젝트, 그리고 Microsoft Swiss JRC의 지원을 받아 수행됨.

GN⁺의 의견

     * ZenHammer 연구는 기존의 DRAM 보안 메커니즘을 우회하여 비트 플립을 유발할 수 있는 새로운 방법을 발견함으로써, 컴퓨터 보안 커뮤니티에 중요한 경고를 제공함. 이는 DRAM 제조업체와 시스템 설계자들에게 기존의 방어 메커니즘을 재검토하고 강화할 필요성을 상기시킴.
     * 연구 결과가 실제 시스템에 적용될 때의 영향을 고려할 때, 사용자와 기업은 자신의 시스템이 이러한 공격에 얼마나 취약한지를 평가하고 필요한 경우 보안 조치를 취해야 함.
     * 이 기술이나 연구가 흥미로운 이유는 Rowhammer 공격이 이제 AMD 시스템에서도 가능하다는 것을 보여주고, 이는 시장 점유율이 증가하는 AMD 기반 시스템의 사용자들에게 중요한 정보임.
     * 비판적인 시각에서 볼 때, 이 연구는 일부 DRAM 장치에서만 비트 플립을 유발할 수 있었고, 모든 장치에서 일관된 결과를 얻지 못했다는 점에서 한계를 가짐. 이는 Rowhammer 공격의 실제 위험성을 평가하는 데 있어 추가 연구가 필요함을 시사함.
     * 이와 유사한 연구로는 Google Project Zero의 Rowhammer 연구가 있으며, 이는 보안 연구원들에게 시스템의 취약점을 평가하고 방어하는 데 도움이 될 수 있음.
"
"https://news.hada.io/topic?id=13991","위원회, Alphabet·Apple·Meta에 대한 불이행 조사 개시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 위원회, Alphabet·Apple·Meta에 대한 불이행 조사 개시

디지털 시장 법(DMA) 위반 조사 개시

     * 유럽연합(EU) 집행위원회는 Alphabet, Apple, Meta에 대한 디지털 시장 법(DMA) 위반 조사를 개시함.
     * 이들 기업이 DMA에 따른 의무를 충분히 준수하지 않았을 가능성이 있어 조사를 진행 중임.

Alphabet과 Apple의 앱 스토어 규칙

     * Alphabet과 Apple이 앱 개발자들이 앱 스토어 외부에서 소비자에게 제안을 할 수 있도록 하는 DMA의 의무를 위반했는지 조사 중임.
     * 이들 회사가 부과하는 제한과 제약이 개발자들의 자유로운 커뮤니케이션과 제안 홍보, 직접 계약 체결 능력을 제한할 수 있음.

Alphabet의 자체 선호 조치

     * Alphabet이 Google 검색 결과를 통해 자사의 수직 검색 서비스(예: Google 쇼핑, Google 항공편, Google 호텔)를 경쟁 서비스보다 선호할 수 있는지 조사 중임.
     * Alphabet의 조치가 DMA에 따라 요구되는 공정하고 차별 없는 대우를 제3자 서비스에 제공하지 않을 수 있음.

Apple의 사용자 선택 의무 준수

     * Apple이 iOS에서 소프트웨어 애플리케이션을 쉽게 제거하고 기본 설정을 변경하며, 사용자에게 대체 기본 서비스를 선택할 수 있는 선택 화면을 제공하는 의무를 준수하는지 조사 중임.
     * Apple의 조치가 사용자가 Apple 생태계 내에서 서비스 선택을 진정으로 행사하는 것을 방해할 수 있음.

Meta의 ""지불 또는 동의"" 모델

     * Meta가 EU 사용자를 대상으로 도입한 ""지불 또는 동의"" 모델이 DMA에 따라 개인 데이터의 결합 또는 교차 사용에 대한 사용자 동의를 얻는 의무를 준수하는지 조사 중임.
     * Meta의 모델이 사용자가 동의하지 않을 경우 실질적인 대안을 제공하지 않아, 게이트키퍼에 의한 개인 데이터 축적 방지 목적을 달성하지 못할 수 있음.

기타 조사 및 집행 조치

     * Amazon이 자사 브랜드 제품을 Amazon 스토어에서 선호하는지, Apple의 새로운 수수료 구조와 웹에서 앱 배포(사이드로딩)에 대한 기타 조건이 DMA 의무의 목적을 무력화하는지 조사 중임.
     * Alphabet, Amazon, Apple, Meta, Microsoft에게 DMA 의무 준수를 평가하기 위해 문서 보존 명령을 내림.

배경

     * DMA는 디지털 부문에서 경쟁 가능하고 공정한 시장을 보장하기 위해 제정됨.
     * 대규모 디지털 플랫폼인 게이트키퍼들은 비즈니스 사용자와 소비자 간의 중요한 관문 역할을 하며, 디지털 경제에서 병목 현상을 만들 수 있는 힘을 가짐.
     * Alphabet, Amazon, Apple, ByteDance, Meta, Microsoft 등 6개 게이트키퍼는 2024년 3월 7일까지 모든 DMA 의무를 완전히 준수해야 함.

GN⁺의 의견

     * DMA는 디지털 시장에서의 공정한 경쟁을 촉진하고, 대형 플랫폼의 시장 지배력을 제한하기 위한 중요한 법적 조치임.
     * 이러한 조사는 기술 기업들이 시장에서의 지배적 위치를 남용하는 것을 방지하고, 소비자와 개발자에게 더 많은 선택권과 자유를 제공하려는 EU의 의지를 반영함.
     * 조사 결과에 따라 부과될 수 있는 높은 벌금과 추가적인 제재는 다른 기업들에게도 경종을 울릴 것이며, 규제 준수의 중요성을 강조함.
     * 이러한 조사는 기술 산업 내에서 경쟁을 촉진하고 혁신을 장려할 수 있으며, 이는 소비자에게 더 나은 제품과 서비스로 이어질 수 있음.
     * 다만, 이러한 조사와 규제가 기술 발전과 혁신을 저해하지 않도록 균형 잡힌 접근이 필요함.

        Hacker News 의견

     * 애플의 새로운 수수료 구조와 웹을 통한 앱 배포(사이드로딩)에 대한 기타 조건들이 DMA(디지털 시장 법) 제6조(4)의 의무를 무력화시킬 수 있다는 점이 흥미롭다. 사용자들이 다른 앱 스토어와 사이드로딩을 허용하도록 하는 DMA에 대해 불평할 때, 메타와 같은 기업들이 자사의 인기 앱을 독점적으로 배포하기 위해 애플의 프라이버시 규칙을 우회할 것이라는 예측이 종종 나오지만, 이는 안드로이드에서는 발생하지 않았다. 커뮤니티가 만든 앱을 사이드로딩하여 애플의 공식 서비스와 비공식적으로 상호운용하는 것이 프라이버시 손실을 상쇄할 수 있다고 본다. 그러나 애플의 현재 구현 방식은 대부분의 FOSS(자유 오픈 소스 소프트웨어)나 커뮤니티 유지 앱이 배포되는 것을 방해하고, 부유한 악덕 행위자들에게 사용자를 더욱 악용할 수 있는 통로를
       제공한다. 이는 부유한 기업들이 원하는 것을 배포할 수 있는 자유로운 환경과 비공식 앱이 그들의 행동을 어느 정도 제어하는 균형적인 압력이 없는 최악의 상황이다. 애플이 아닌 충분한 자금을 가진 누구든지 사용자의 폰에서 실행되는 코드를 결정하는 세상으로 변화하고 있다. EC(유럽위원회)가 DMA의 정신이 사용자가 자신의 폰에서 실행되는 것을 결정하는 것이라고 판단하고, 애플의 제안된 변경 사항이 그 정신에 부합하지 않는다는 것을 발견하기를 바란다.
     * 메타의 ""지불 또는 동의"" 조사에 대한 논의가 많지 않은 것 같다. 사용자에게 추적 없고 광고 없는 서비스를 위해 지불하는 옵션을 제공하는 것이 요구 사항을 충족시키지 못하는 이유는 무엇일까? 10달러/월의 가격이 너무 높은 것이 문제인가? 이러한 모델이 더 합리적인 가격에서 수용 가능할까?
     * 이 모든 변화를 초래한 것은 무엇인가? DMA의 통과로 이제 가능해졌지만, 그 법안의 창출과 통과를 촉발한 구체적인 사건이 있었는가? 유럽이나 미국의 규제에 오랫동안 아무 일도 일어나지 않다가 갑자기 EU가 정말로 개입하기 시작한 것이 놀랍다.
     * 애플의 브라우저 선택 화면에 대한 이의 제기가 궁금하다. 유럽위원회는 애플의 조치, 특히 웹 브라우저 선택 화면의 디자인이 사용자가 애플 생태계 내에서 서비스 선택을 진정으로 행사하는 것을 방해할 수 있다고 우려하고 있다. 이는 DMA 제6조(3)에 위배될 수 있다. 화면 자체는 합리적으로 보이지만, 사파리가 항상 상단에 위치하고 대부분의 사람들이 들어본 적 없는 브라우저들과 섞여 무작위로 배치되는 것이 문제인가?
     * 게이트키퍼에게 부과되는 최소 벌금이 얼마인지 아는 사람이 있는가? 찾을 수 있는 모든 출처는 최대 10%의 벌금에 대해서만 언급한다. GDPR에서 본 것처럼 최대 벌금이 실제로 많이 사용되지 않는다는 점을 고려할 때, 예상 벌금이 더 관심사일 수 있다.
     * 혼란스러운 시기에는 가장 높은 풀이 먼저 잘린다. 그러나 몇몇 대기업들이 수십억 명의 사람들의 삶의 여러 측면을 점점 더 차지하고 있으며, 그들이 권력을 남용하지 않도록 주의 깊게 감시해야 한다.
     * 많은 사람들이 게이트키퍼의 담장이 둘러진 정원에 스스로를 가둔 채 열쇠를 버리기를 서두른다. 리눅스가 오랫동안 살아남았을 뿐만 아니라 번성한 것은 커뮤니티 개발자들의 의지, 기술 전문성, 제품 비전 덕분이다. FOSS는 개방성과 협력의 원칙에 기반을 두고 있으며, 세계 최대 기업들이 마케팅과 반경쟁적 관행을 통해 그 결의를 약화시켰음에도 불구하고 지금 이 시점에서 그 어느 때보다 필요하다. 진정으로 개방된 VR 헤드셋, 스마트워치, 태블릿, 스마트폰 등이 가능할 수 있는 풍부한 앱 생태계와 기능을 생각해보라. 그러나 탐욕이 우리를 수십 년 동안 뒤로 끌고 가고 있다. 소비자가 아닌 생산자가 되어야 할 지금 성장하는 아이들을 생각해보라. 그리고 지난 세기, 인터넷과 무한히 해킹 가능한 장치들이 가져다준 경이로움과 표현의 감각을
       비교해보라. 그것은 혁명적이었고, 지금 존재하는 많은 거인들은 그 개방성의 등에 기대어 세워졌다.
     * 왜 마이크로소프트가 이 목록에 없는가?
     * 시장 점유율과 특정 규모 이상의 회사들을 규제하고 검토하는 것은 좋은 생각이다. 거의 확실하게 그들은 시장 지위를 남용할 것이기 때문이다. 이러한 회사들은 네트워크 효과와 호환성 문제로 인해 건강한 시장의 제대로된 기능에 일반적인 위협을 제기하며, 규제 당국은 항상 이러한 문제를 해결하기 위해 노력해야 한다.
     * 애플이 유럽에서 벌어들이는 수익에 비해 이러한 변화로 인한 비용이 얼마나 되는지 궁금하다. 애플이 EU 시장을 떠날 수 있는 준수 비용과 복잡성의 양이 있는지 알고 싶다.
"
"https://news.hada.io/topic?id=13977","- 2007년, 2000줄의 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           - 2007년, 2000줄의 코드

The Original Macintosh: 36 of 123 - 2000 Lines Of Code

     * 1982년 초, Lisa 소프트웨어 팀은 향후 6개월 내에 소프트웨어를 출시하기 위해 막바지 작업에 집중하고 있었음.
     * 관리자 중 일부는 매주 각 엔지니어가 작성한 코드의 양을 추적하는 것이 좋은 아이디어라고 생각하고, 매주 금요일마다 제출해야 하는 양식을 만들었는데, 이 양식에는 그 주에 작성한 코드 라인 수를 기입하는 필드가 포함되어 있었음.
     * Quickdraw의 저자이자 주요 사용자 인터페이스 디자이너인 Bill Atkinson은 코드 라인 수가 소프트웨어 생산성을 측정하는 어리석은 방법이라고 생각했으며, 이는 단지 지저분하고 부풀려진, 오류가 있는 코드를 작성하도록 장려하는 것이라고 여겼음.
     * Atkinson은 최근 Quickdraw의 영역 계산 기계를 최적화하기 위해 작업하고 있었고, 더 단순하고 일반적인 알고리즘을 사용하여 영역 엔진을 완전히 다시 작성했는데, 이는 몇 가지 조정 후 영역 작업을 거의 6배 빠르게 만들었음.
     * 이 재작성 작업은 부수적으로 약 2000줄의 코드를 절약하는 결과를 가져왔음.
     * 최적화 작업의 마무리 단계에서 처음으로 관리 양식을 작성할 때가 되었고, 코드 라인 수 부분에 도달했을 때 잠시 생각한 뒤, 그는 숫자 -2000을 기입했음.
     * 관리자들이 어떻게 반응했는지 확실하지 않지만, 몇 주 더 지난 후, 그들은 Atkinson에게 양식 작성을 요구하는 것을 중단했고, 그는 기꺼이 이에 따랐음.

GN⁺의 의견

     * 이 기사는 소프트웨어 개발에서 코드의 양이 진정한 생산성을 나타내지 않는다는 중요한 교훈을 제공함. 코드 라인 수를 기준으로 성과를 측정하는 것은 효율적이지 않을 뿐만 아니라, 때로는 역효과를 낼 수 있음을 보여줌.
     * Bill Atkinson의 예는 소프트웨어 최적화의 중요성을 강조함. 더 적은 코드로 더 빠른 성능을 달성하는 것은 소프트웨어 엔지니어링의 핵심 원칙 중 하나임.
     * 이 이야기는 현대의 개발 관행, 특히 애자일 방법론과 지속적인 통합/배포(CI/CD)와 같은 접근 방식이 왜 중요한지를 이해하는 데 도움이 됨. 이러한 방법론은 코드의 양보다는 품질, 유지 보수성, 그리고 사용자 경험에 더 많은 가치를 두고 있음.
     * 업계에서는 코드 품질을 측정하고 개선하기 위해 다양한 도구와 메트릭을 사용함. 예를 들어, 정적 코드 분석 도구, 코드 리뷰 프로세스, 테스트 커버리지 추적 등이 있음.
     * 이 기사는 개발자들에게 코드의 양보다는 품질에 집중하고, 불필요한 복잡성을 피하며, 성능을 최적화하는 것이 얼마나 중요한지를 상기시켜줌.

        Hacker News 의견

     * Microsoft와 IBM의 코드 라인 수 충돌
          + PBS TV 시리즈 ""Accidental Empires""에서 스티브 발머가 OS/2 공동 개발 당시의 경험을 설명하는 장면이 있음. Microsoft는 작은 회사의 태도로 일을 처리하는 반면, IBM은 내부적으로 코드 라인 수(천 줄 단위, KLoC)를 프로그래머 생산성의 척도로 삼는 데 집중했다고 함. 발머는 IBM이 코드의 질보다는 양에만 관심을 가졌다고 비판함.
     * 이전 토론 링크들
          + 코드 라인 수를 생산성 지표로 사용하는 것에 대한 토론은 자주 나타남. 2010년부터 2022년까지 다양한 논의가 있었음을 보여주는 링크들이 제공됨.
     * 코드 라인 수를 생산 지표로 삼는 것은 매우 어리석음
          + 한 줄의 코드로 해결할 수 없었던 20년 된 버그를 해결하거나, 'order by'로 3년 된 버그를 해결한 경험을 언급하며, 한 줄의 코드가 미치는 영향을 어떻게 측정할 수 있는지에 대한 의문을 제기함. 나쁜 프로그래머가 더 많은 코드를 작성한다는 경험을 공유하며, Microsoft 개발자가 IBM 코드 33,000자를 220자로 재작성한 사례를 소개함. 이로 인해 Microsoft의 작업이 '부정적'으로 평가받는 상황이 발생했다고 함.
     * 간단한 질문이 때로는 가장 큰 영향을 미침
          + 어떤 기능을 구현할지에 대한 간단한 질문(""X를 어떻게 처리할 것인가?"")이 그 기능을 만들지 않는 결정으로 이어질 수 있으며, 이는 시도하는 데 드는 모든 비용을 절약하는 결과를 가져옴. 이러한 기여는 수치로 측정할 수 없으며 때로는 적을 만들 수도 있지만, 그럼에도 불구하고 이를 감행하는 이들에게 경의를 표함.
     * 초기 경력에서의 코드 최적화 경험 공유
          + 10,000줄 이상의 C 프로그램을 500줄 미만으로 최적화한 경험을 공유함. 이전 개발자가 함수 사용이나 SQL 쿼리에 변수 데이터를 제공하는 방법을 모르고 있었을 수 있다는 단순한 가정 하에, 같은 SQL 문을 반복적으로 인라인으로 작성한 것을 발견함. 함수 호출로 SQL 콜을 재작성하고, 변경된 바인드 값들을 배열에서 가져와 루프 안에서 함수를 호출하는 방식으로 중복 코드를 대체함.
     * 프로젝트 시작 시 명확한 방향성 부족
          + 프로젝트를 시작할 때 정확한 방향을 모르는 경우가 있으며, 프로젝트에 몰두하면서 문제와 원하는 답을 더 잘 이해하게 되고, 그 결과로 큰 부분을 빼내고 더 작고 나은 것으로 대체할 수 있음. 이러한 상황에서 64KB의 ROM에 모든 것을 포함시켜야 했던 개발자들은 코드를 더 작게 만들기 위한 강한 압박을 받았음.
     * 코드 제거를 지표로 삼는 것에 대한 사고 실험
          + 관리자가 이 기사를 읽고 단순하게 코드 제거 라인 수를 측정 지표로 삼기로 결정한다면, 상황이 나아지거나 악화될지에 대한 사고 실험을 제안함.
     * 빌 앳킨슨의 Atkinson Dither
          + 빌 앳킨슨과 그의 Atkinson Dither 기법에 대한 링크 제공.
     * 코드 라인 수에 대한 인식
          + 코드 작성 시 '추가된 라인 수 - 제거된 라인 수'를 사용하는 것에 대한 의문을 제기함. 같은 장소에서 시작해 같은 장소에서 끝나는 10km 달리기를 0km 달리기라고 하지 않는 것처럼, 코드 라인 수도 마찬가지라는 견해를 표현함.
     * 직원으로서의 역할
          + 아인슈타인만큼 똑똑하더라도 여전히 직원이며, 직원으로서 해야 할 일들이 있다는 교훈을 공유함.
"
"https://news.hada.io/topic?id=13948","새로운 jq로서의 DuckDB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            새로운 jq로서의 DuckDB

DuckDB, 새로운 jq로 떠오르다

     * DuckDB 프로젝트는 데이터 애플리케이션을 위한 SQLite와 같은 데이터베이스로, 추가 의존성 없이 다양한 데이터 형식을 가져올 수 있는 기능을 포함.
     * JSON 파일을 데이터베이스 테이블로 직접 읽고 파싱할 수 있으며, 이는 다른 많은 형식에도 적용됨.
     * JSON 작업 시 주로 jq를 사용하지만, 복잡한 jq 문법 대신 SQL에 익숙하기 때문에 DuckDB를 사용하는 것이 더 편리함.
     * 예를 들어, GitHub API를 사용하여 golang 조직의 저장소 정보를 JSON으로 가져온 후, 오픈소스 라이선스 유형에 대한 통계를 얻는 작업을 SQL로 간단히 수행할 수 있음.
     * DuckDB를 사용하여 SQL 문을 작성하는 것은 문서를 참조하지 않고도 쉽게 할 수 있으며, PostgreSQL JSON 함수와 유사한 문법을 사용함.
     * DuckDB는 JSON 출력도 지원하며, 필요한 경우 jq를 사용하여 결과를 예쁘게 출력할 수 있음.
     * DuckDB는 JSON뿐만 아니라 CSV, parquet, Excel 파일 등 다양한 데이터 형식을 가져올 수 있음.
     * 데이터를 지속적으로 저장할 필요가 없는 경우, 테이블을 생성하지 않고 데이터를 쿼리할 수 있음.
     * DuckDB는 로컬 파일뿐만 아니라 URL에서 직접 JSON을 읽을 수도 있음.

GN⁺의 의견

     * DuckDB는 데이터 분석과 관련된 작업을 자주 하는 사용자들에게 흥미로운 도구가 될 수 있음. 특히, SQL에 익숙한 사람들에게는 JSON 데이터를 쉽게 다룰 수 있는 강력한 대안이 될 수 있음.
     * DuckDB가 JSON 데이터를 직접 읽을 수 있다는 점은 데이터 전처리 과정을 단순화시키고, 데이터 파이프라인을 구축할 때 별도의 데이터 변환 단계를 줄일 수 있는 장점을 제공함.
     * DuckDB의 사용이 확산되면, 데이터 분석 및 처리를 위한 기존의 복잡한 도구들과 비교하여 학습 곡선을 낮추고 생산성을 향상시킬 수 있음.
     * 하지만, DuckDB가 아직 널리 알려지지 않았거나 커뮤니티 지원이 충분하지 않다면, 사용자들이 문제에 직면했을 때 해결책을 찾기 어려울 수 있음.
     * DuckDB와 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 Apache Drill이나 PrestoDB가 있으며, 이들도 대규모 데이터셋에 대한 SQL 쿼리를 지원함.

        Hacker News 의견

     * jq와 기본 쉘 도구의 조합
          + jq의 문법과 데이터 모델은 매우 우아하고 강력하지만, 표준 라이브러리가 부족하고 설계상의 어색함이 있어 일상적인 작업이 복잡할 수 있음.
          + jq는 데이터를 줄 단위의 텍스트로 잘 변환하여 유닉스 쉘 도구와 결합하기 좋음.
          + 예를 들어, 프로젝트 목록에서 OSS 라이선스를 추출하고 각각의 사용 횟수를 세는 작업은 curl ... | jq '.[].license.key' | sort | uniq -c로 간단히 처리 가능.
     * Babashka와 Clojure
          + Lisp과 Clojure를 좋아한다면 Babashka를 확인해 볼 것.
          + Babashka를 사용하여 JSON 파일을 처리하고 데이터를 그룹화하고 카운트하는 예시 코드 제공.
     * ClickHouse 로컬 CLI
          + ClickHouse 로컬 CLI는 JSON과 CSV 등의 형식을 파싱하고 쿼리하는 데 매우 빠름.
          + ""세계에서 가장 빠른 JSON 쿼리 도구""라고 불리며, 서버리스 데이터 분석을 위한 작은 도구로 소개됨.
     * jq와 DuckDB 및 SQL의 사용
          + jq는 필터링, 매핑, 연결 등의 작업에 이상적임.
          + 예를 들어, 특정 다운로드 링크를 찾거나 Terraform 상태에서 Kubernetes 클러스터의 KUBE_CONFIG을 추출하는 등의 작업에 jq를 사용할 수 있음.
     * Google Sheets 쿼리
          + 공개된 Google Sheets 데이터를 SQL과 유사한 방식으로 쿼리할 수 있음.
     * SQLite 데이터베이스를 사용한 구조화된 로깅
          + 매일 생성되는 로그 이벤트를 JSON 객체로 저장하고, 특정 필드에 인덱스를 생성하여 SQL 쿼리로 검색할 수 있음.
     * Benthos
          + 데이터 변환과 메시지 버스, 웹훅, 데이터베이스로의 데이터 이동에 Benthos를 사용할 수 있음.
     * Nushell
          + Nushell은 임시 데이터 조작과 일반적인 쉘 작업에 유용함.
     * pq (prql-query)
          + DuckDB, DataFusion, PRQL을 활용하여 터미널에서 데이터 작업을 쉽고 재미있게 하기 위해 pq를 만듦.
          + 현재 유지 관리가 어려워 아카이브 상태이지만, 협력할 사람이 있다면 상황을 바꿀 수 있음.
     * JSON과 프로그래밍 언어의 사용
          + JSON을 프로그래밍 언어의 해시맵과 같은 데이터 구조로 다루는 것과 비교하여 이점이 불분명함.
          + 대화형으로 작업하고 싶다면 노트북이나 REPL을 사용할 수 있음.
"
"https://news.hada.io/topic?id=14034","FuryGpu – 맞춤형 PCIe FPGA 그래픽 처리 장치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FuryGpu – 맞춤형 PCIe FPGA 그래픽 처리 장치

FuryGpu: 현대 컴퓨터를 위해 처음부터 완전히 맞춤 제작된 GPU

     * FuryGpu는 Xilinx Zynq UltraScale+ FPGA에 구현된 실제 하드웨어 GPU임.
     * 맞춤형 PCB에 구축되어 PCIe를 통해 호스트 컴퓨터에 연결됨.
     * 1990년대 중반 고급 그래픽 카드와 동등한 하드웨어 기능을 지원하며, 완전한 현대 Windows 소프트웨어 드라이버 스택을 갖춤.
     * 당시의 실제 게임을 실시간 이상의 프레임 속도로 렌더링할 수 있음.
     * 블로그와 자세한 내용은 곧 공개될 예정임.

GN⁺의 의견

     * FuryGpu는 FPGA를 기반으로 한 GPU로, 고전 게임을 현대 컴퓨터에서 고성능으로 실행할 수 있는 잠재력을 가지고 있음. 이는 레트로 게이밍 커뮤니티에 큰 관심을 끌 수 있음.
     * FPGA 기반의 GPU는 맞춤형 하드웨어 솔루션을 필요로 하는 연구 및 개발 분야에서 유용할 수 있으며, 특정 애플리케이션에 최적화된 처리를 제공할 수 있음.
     * 현재 시장에는 다양한 그래픽 처리 요구를 충족시키기 위한 다양한 GPU가 존재하지만, FPGA를 사용한 GPU는 특수 목적이나 교육적 환경에서의 활용이 기대됨.
     * 이 기술을 도입할 때는 FPGA의 프로그래밍 복잡성과 비용을 고려해야 하며, 맞춤형 하드웨어의 개발은 시간과 자원이 많이 소요될 수 있음.
     * FuryGpu가 실제로 어떤 성능을 보여줄지, 그리고 현대 게임에 대한 지원이나 다른 고급 그래픽 작업에 어떻게 적용될 수 있을지는 아직 미지수임.

        Hacker News 의견

     * 프로젝트 소개 및 오픈 소스 계획
          + 프로젝트를 공개하긴 했지만, 사이트에 더 많은 내용이 올라갈 때까지 기다리고 싶었음.
          + PCB 스키마/레이아웃, HDL, Windows WDDM 드라이버, API 런타임 드라이버, API를 사용하는 Quake 포팅 등을 오픈 소스로 제공할 계획이지만, 법적 문제와 라이선스 결정 등이 필요함.
          + 2021년 8월 22일에 첫 커밋을 시작하여 2년 반 이상 작업함.
          + YouTube FuryGpu 플레이리스트에 진행 과정을 보여주는 비디오가 있음.
          + PCIe 인터페이스에 관한 블로그 포스트를 준비 중이며, PCB 스키마부터 시작하여 FPGA 디자인, Windows 드라이버에 이르기까지 여러 부분으로 나누어 설명할 예정임.
     * 벤 이터의 브레드보드 컴퓨터 시리즈 영향력
          + 벤 이터의 브레드보드 컴퓨터 시리즈가 취미 전자 분야에 미친 영향이 대단함.
          + 자신만의 ""레트로"" CPU를 설계하려는 영감을 받음.
          + 6502와 같이 쉽게 연결할 수 있지만, 약간 더 많은 기능(레지스터 추가, 하드웨어 나눗셈 등)을 원함.
          + MCU를 사용하는 것으로 돌아가는 경향이 있지만, 그래픽 생성 문제에 부딪힘.
     * 프로젝트의 취미적 성격 및 전체 스택 작동
          + 프로젝트는 취미로 시작되었으며, 구축 방법에 대해 더 많이 작성할 계획임.
          + 전체 스택이 작동하며, 사용자 정의 그래픽 API를 구현하는 Windows 드라이버와 그 위에서 실행되는 Quake를 포함함.
          + DX/GL 지원은 없지만, 사용자 정의 API 경로를 선택한 이유를 이해할 수 있음.
          + 디자인을 오픈 소스로 제공할지 궁금함.
     * M.2 포맷 GPU의 필요성
          + 컴팩트하고 독립적인 GPU 옵션이 필요함.
          + 인텔 UHD 그래픽, AMD 라데온, 퀄컴의 아드레노와 같은 수준의 성능을 가진 독립적인 M.2 GPU를 원함.
          + 많은 컴퓨트와 네트워킹이 필요하지만 그래픽 기능은 적은 소형 임베디드 제품 아이디어가 있음.
          + NXP Layerscape LX2160A는 완벽하지만 내장 GPU가 없어서 사용할 수 없음.
     * 오픈 하드웨어 GPU의 부재 및 라이선스
          + 오픈 하드웨어 GPU가 거의 없음.
          + 이 프로젝트의 라이선스에 대한 정보가 없지만, 첫 번째 오픈 하드웨어 GPU가 될 수 있고, 더 많은 프로젝트의 시작점이 될 수 있음.
     * 2D 중심 GPU 개발 및 FPGA 사용 고려
          + 마이크로컨트롤러용 2D 중심 GPU를 개발 중임.
          + SPI 기계에서 큰 디스플레이로 렌더링하는 데 사용함.
          + 프로세서 파이프라인의 한계를 보고 FPGA가 더 빠를 수 있다고 생각함.
          + 낮은 성능의 FPGA를 구입하여 학습하고 있으며, ESP32 기반의 microgpu를 FPGA 버전으로 전환하려고 함.
          + 시간과 자녀로 인한 제약으로 이 수준에 도달할 수 있을지 확신할 수 없지만, 이 수준의 일부에 도달하고 싶음.
     * Vortex 프로젝트 및 GPU 설계의 미래
          + 조지아 공과대학의 Vortex 프로젝트에 주목함.
          + 고정 기능의 과거를 되풀이하는 대신, GPU 작업을 더 잘 처리하기 위한 확장을 가진 RISC-V 기반의 매우 병렬 컴퓨터임.
          + 실행되는 보드는 몇 천 달러로 취미로 하기에는 친화적이지 않지만, 폐쇄적이고 독점적인 개발보다는 접근성이 더 높음.
          + 몇 달 전에 2.0 릴리스가 출시됨.
     * 물리적 장치 사진 및 FPGA 모듈 혼동
          + 물리적 장치의 사진을 보고 싶음.
          + 사용된 FPGA 모듈에 대해 혼란스러움.
          + 블로그에서는 Xylinx Kria SoMs를 언급하지만, 해당 모듈의 사양을 따라가면 ARM SoCs가 포함되어 있음을 알 수 있음.
          + FPGA 세계에 익숙하지 않아 무언가를 놓치고 있을 수도 있음.
     * PCIe 인터페이스 구현에 대한 기대
          + 저자가 PCIe 인터페이스를 어떻게 구현하는지에 대한 세부 정보를 기대함.
          + 그 수준의 정교한 하드웨어 작업을 할 가능성은 없지만, 일반적인 문화적 인식을 위해 PCIe의 내부를 살펴보는 것이 가치가 있음.
     * 오픈 소스 하드웨어 프로젝트로의 발전 가능성
          + 프로젝트가 매우 멋지며, 이것이 오픈 소스 하드웨어 프로젝트가 되기를 바람.
"
"https://news.hada.io/topic?id=14010","볼티모어의 키 브리지, 화물선 충돌로 붕괴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        볼티모어의 키 브리지, 화물선 충돌로 붕괴

볼티모어 교량 붕괴로 6명의 근로자 사망 추정

     * 볼티모어의 프랜시스 스콧 키 교량이 붕괴되면서 6명의 건설 근로자가 사망한 것으로 추정됨.
     * 교량 붕괴 후 볼티모어 항구의 선박 통행이 중단됨.

볼티모어 항구 운영 중단

     * 메릴랜드 항구 관리국은 볼티모어 항구로 들어오고 나가는 선박 통행을 추가 공지가 있을 때까지 중단함.
     * 항구는 폐쇄되지 않았으며 터미널 내의 트럭 처리는 계속 진행 중임.

테러와의 연관성 없음

     * 볼티모어 경찰청장 리처드 월리는 이 사건이 의도적인 행위라는 어떠한 정보나 징후도 없다고 밝힘.
     * FBI는 현재로서는 테러와의 연관성을 시사하는 구체적이고 신뢰할 수 있는 정보가 없다고 발표함.

비상사태 선포

     * 메릴랜드 주지사 웨스 무어는 비상사태를 선포하고 연방 자원을 신속히 배치하기 위해 다부처 팀과 협력 중임.
     * 볼티모어 시장 브랜든 스콧은 교량 붕괴에 대응하여 볼티모어 시에 비상사태를 선포함.

대체 경로 제공

     * I-695는 던독의 메릴랜드 루트 157과 글렌 버니의 메릴랜드 루트 10 사이에서 폐쇄됨.
     * 위험물을 운송하는 차량은 터널을 통과할 수 없으며 I-695의 서쪽 구간을 이용해야 함.

연방 정부의 재건 지원 약속

     * 조 바이든 대통령은 연방 정부가 필요한 모든 자원을 제공할 것이며, 교량 재건비용 전액을 부담할 것이라고 발표함.

GN⁺의 의견

     * 이 사건은 대규모 인프라의 붕괴와 관련된 비상 상황으로, 공공 안전과 긴급 대응 시스템의 중요성을 강조함.
     * 교량과 같은 중요 인프라의 유지 관리 및 안전 검사의 중요성을 상기시키며, 이러한 사고를 방지하기 위한 지속적인 투자와 혁신이 필요함.
     * 현재와 같은 사고 발생 시 신속한 대응과 효과적인 구조 작업을 위해 첨단 기술의 도입, 예를 들어 드론을 이용한 탐색 및 구조 활동의 자동화가 도움이 될 수 있음.
     * 이러한 사고는 교통 흐름에 큰 영향을 미치며, 장기간에 걸친 복구 작업으로 인해 지역 경제에도 영향을 줄 수 있음.
     * 재난 발생 시 신속한 정보 제공과 투명한 커뮤니케이션은 시민들의 불안감을 줄이고, 필요한 조치를 취하는 데 중요한 역할을 함.

        Hacker News 의견

     * 유튜브에서 해양 전문가가 분석한 선박 추적 데이터
          + 선박이 약 8.5노트로 이동 중 1시 24분경 전력 상실 (영상 피드 기준)
          + 1시 25분 30초에 전력 복구
          + 12시 25분 59초에 선박에서 연기 발생, 선박은 이미 수로에서 표류
          + 흑연을 근거로 전력을 전후진으로 가득 적용한 것으로 추정
          + 1시 26분 45초에 선박이 수로에서 명백하게 방향 전환, 부두를 향함
          + 전후진으로 인한 프로펠러 워크(prop walk)가 방향 각도 변경 원인
          + 1시 28분 52초에 7.6노트 속도로 충돌, 카메라는 1시 28분 52초를 보여주나 AIS는 1시 29분 35초에도 선박이 이동 중이라고 보고
     * 다리를 수십 번 건넌 한 사람의 충격적인 반응
          + 해당 다리는 지역의 주요 통로 중 하나
          + 밤중에 사고가 발생해 다행이지만, 사망자 가족에게는 위로가 되지 않을 것
     * 다리가 완전히 붕괴된 것에 대한 놀라움 표현
          + 컨테이너 선박 충돌이 심각하지만, 다리가 완전히 붕괴되지 않고 처지거나 구부러질 수 있는 시나리오 상상
          + 이러한 피해를 입힐 수 있는 선박이 정기적으로 다리를 지나갔으며, 다리의 안전이 충돌이 일어나지 않는 것에 전적으로 의존
          + 현대 건설 기준이 선박 충돌 후 더 많은 안정성을 요구하는지, 아니면 여전히 이런 방식으로 다리를 건설하는지에 대한 의문 제기
     * DALI 선박에 대한 정보
          + 싱가포르 국기를 단 컨테이너 선박
          + 전체 길이(LOA)는 299.92미터, 폭은 48.2미터
          + 선박의 궤적을 기반으로, 다리에 접근하면서 선박이 경로를 약간 변경하고 속도를 줄인 것으로 보임
     * 사고의 충격력에 대한 분석
          + 충돌의 힘은 대규모 자연 재해와 맞먹는 수준
          + 다리가 붕괴된 것에 대해 놀라는 사람들은 충돌로 인한 힘의 크기를 인지해야 함
          + 열차가 전속력에서 완전 정지로 가는 것보다 더 큰 힘
     * 생방송을 통해 충돌과 붕괴 장면을 볼 수 있음
     * 9/11 이후 주 정부가 다리 기둥 주변에 충격을 방지할 수 있는 범퍼 설치를 고려했으나 비용이 너무 많이 들어 실행되지 않았음
     * 대형 컨테이너 선박에 의해 다리가 붕괴된 것에 대한 대중의 놀라움
          + 다리는 긴장과 압축의 섬세한 균형 상태에 있으며, 대형 컨테이너 선박과 같은 중요한 요소가 그 균형을 깨뜨릴 경우 다리가 살아남는 것에 놀랄 것
     * 체사피크 베이 브리지-터널의 설계, 특히 터널 부분의 의미에 대한 이해
          + 이 사고가 노퍽의 미국 해군 항구에서 발생했다면 접근 불가능했을 것임을 상상
     * 컨테이너 선박 충돌로 인한 다리 붕괴 사고
          + 메릴랜드 주 볼티모어의 프랜시스 스콧 키 다리가 대형 컨테이너 선박 충돌로 붕괴
          + 대규모 사상자 발생으로 보고되며, 수십 대의 차량과 많은 사람들이 물에 빠진 것으로 알려짐
"
"https://news.hada.io/topic?id=13970","스트리밍 가치가 사라지면서 블루레이로의 복귀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        스트리밍 가치가 사라지면서 블루레이로의 복귀

스트리밍의 가치가 사라지면서 블루레이로의 복귀

     * 스트리밍 서비스의 질이 저하되면서, 영화 디스크를 구해야 할 때가 옴.
     * 스트리밍 서비스가 성장 잠재력에 취해 있으나, 실제 비용은 소비자에게 전가되고 있음.
     * 스트리밍 서비스의 상황이 악화될 것으로 예상되어, 물리적 미디어로의 회귀가 논의됨.

스트리밍의 정점

     * 스트리밍 서비스가 포화 상태에 이르렀으며, 이는 지속 가능하지 않음.
     * 스트리밍 서비스의 실제 비용이 소비자에게 전달되기 시작함.
     * 스트리밍 서비스의 질이 더욱 나빠질 것으로 예상됨.

물리적 미디어로의 복귀

     * 물리적 미디어는 생명 연장을 받았으며, 그 죽음에 대한 소문은 과장된 것임.
     * 영화 디스크는 여전히 건강한 틈새 시장으로 남아 있으며, 영화 산업은 이를 무시할 수 없음.
     * 물리적 미디어가 바닥을 친 후 상승세를 보일 수 있음에 대한 낙관론이 존재함.

GN⁺의 의견

     * 스트리밍 서비스의 품질 저하와 비용 증가는 사용자들이 물리적 미디어로 회귀하는 현상을 촉진할 수 있음. 이는 소비자들이 소유권과 품질에 대한 가치를 재평가하게 만드는 계기가 될 수 있음.
     * 물리적 미디어의 장점 중 하나는 인터넷 연결이나 서비스 제공자의 제약 없이 언제든지 접근할 수 있다는 점임. 이는 특히 인터넷 접근성이 제한적인 지역에서 중요할 수 있음.
     * 블루레이와 같은 물리적 미디어는 수집가들 사이에서 여전히 인기가 있으며, 특별판이나 한정판과 같은 독점적인 콘텐츠를 제공함으로써 가치를 더할 수 있음.
     * 스트리밍 서비스와 물리적 미디어 간의 경쟁은 소비자에게 다양한 선택권을 제공하며, 이는 콘텐츠 소비 방식의 다양화를 의미함.
     * 스트리밍 서비스의 품질 저하가 지속된다면, 콘텐츠 제공자들은 사용자 경험을 개선하기 위해 더 많은 노력을 기울여야 할 것임. 이는 기술적인 개선뿐만 아니라 사용자 인터페이스와 사용자가 원하는 콘텐츠의 접근성 향상을 포함할 수 있음.

        Hacker News 의견

     * 블루레이 컬렉션을 가진 한 사용자는 물리적인 디스크를 다루고 싶지 않아 구매 후 DRM을 제거하고 Jellyfin 서버에 올린다고 함. 불법일 수 있지만 집안에서만 시청하므로 피해를 주지 않는다고 생각함. 스트리밍이 편리하지만, 미디어를 임의로 삭제할 수 있는 회사의 행동은 문제가 있다고 봄. 서버 유지가 어렵고 일반인에게는 접근성이 낮다고 언급함.
     * 스트리밍 서비스의 가격 인상과 부족한 콘텐츠에 대한 불만을 표현하는 사용자가 있음. 스트리밍 서비스가 이상적인 고객을 '지불하고 시청하지 않는 사람'으로 보고, 콘텐츠 품질을 유지하기보다는 구독을 유지하게 만드는 데 초점을 맞추고 있다고 비판함.
     * 현대 도서관이 디지털 시대를 받아들여 오디오북, TV 시리즈, 영화, 게임 등 다양한 자료를 대여해주며, 추가적인 스트리밍 서비스에 대한 접근도 제공한다고 언급하는 사용자가 있음.
     * 한 사용자는 Apple TV에서 영화를 대여해 시청하는 것을 선호함. 블루레이가 있으면 Apple TV에서도 가능하다고 하며, DRM이 있지만 애플이 오랫동안 서비스를 제공할 것으로 믿고 있음.
     * 스트리밍 서비스의 변동성에 실망한 한 사용자는 DVD로 돌아갔다고 함. 현지 상점에서 저렴한 가격에 중고 DVD를 구매하고, 헬싱키의 한 상점에서 다양한 DVD를 찾는 재미를 느낀다고 함.
     * 스트리밍 서비스가 사용자에게 적대적이라고 느끼는 사용자가 있음. 물리적 미디어나 해적판 외에는 대안이 없다고 지적함.
     * 한 사용자는 아파트 지하에 있는 커뮤니티 도서관에서 DVD/블루레이를 공유하는 것에 대해 긍정적인 경험을 나눔. 물리적 미디어를 공유하는 방법이 더 많았으면 좋겠다고 희망함.
     * 최근 몇 년 동안 부티크 블루레이 시장이 잘 성장했다고 언급하는 사용자가 있음. Criterion을 비롯한 여러 레이블이 물리적 미디어에 전념하고 있으며, 일부는 구독 프로그램을 통해 안정성을 확보하고 있다고 함.
     * 스트리밍 서비스의 비용이 임금 상승률보다 빠르게 증가하고 있으며, 서로 협력하지 않는 스트리밍 서비스들이 엔터테인먼트에 지출할 수 있는 예산을 줄이고 있다고 지적하는 사용자가 있음. 서비스들이 협력하지 않으면 결국 파산할 것이라고 경고함.
     * 한 사용자는 스트리밍에 광고가 생기면 전적으로 디지털로 전환할 것이라고 함. 비디오 게임에 대해서는 디지털만 사용하며, 라이선스를 잃으면 해당 회사에 더 이상 돈을 지불하지 않을 것이라고 언급함.
"
"https://news.hada.io/topic?id=13972","아칸소주 파인 블러프를 구매한 남자 (2022년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아칸소주 파인 블러프를 구매한 남자 (2022년)

아칸소 파인 블러프를 산 남자

     * 인터넷에서는 ""지나치게 낙관적인 낙관주의자와 그의 불합리한 DIY 프로젝트""라는 아키타입이 중요하다.
     * @i_zzzzzz 사용자가 해커뉴스에서 파인 블러프, 아칸소 전체를 사들이는 남자에 대해 언급함.
     * 이 남자는 자신이 왜 그렇게 했는지조차 명확하지 않은 것 같음.

파인 블러프, 아칸소를 산 남자에 대한 이야기

     * 원격 근무를 위해 이사할 장소를 찾는 기술자의 해커뉴스 게시물 아래에 등장한 댓글.
     * 한 사용자(pontifier)는 미국에서 가장 크고 저렴한 창고 건물을 찾아 사는 방법을 제안함.
     * 이 사용자는 220,000 평방피트의 창고와 사무실 복합 단지를 37만 5천 달러에 구입함.

파인 블러프에서의 어려움과 계획

     * 구입 후 2년 반 동안 문제가 끊이지 않음.
     * 도시와의 관계가 악화되고, 창고는 비어 있음.
     * 이 사용자는 파인 블러프에서 75개 이상의 부동산을 추가로 구입함.

존 펜리의 파인 블러프 모험

     * 존 펜리는 다양한 플랫폼에서 'pontifier'라는 이름을 사용하는 유타 출신의 기업가임.
     * 펜리는 파인 블러프에서의 여정을 문서화하는 데 일부 인터넷 콘텐츠를 할애함.
     * 펜리는 자신의 꿈, 문제, 부동산 활동에 대해 개방적으로 이야기함.

파인 블러프로의 이사

     * 펜리는 2019년에 아내와 이혼 후, 아버지와 함께 로스앤젤레스로 이사함.
     * 그는 크로시스라는 스타트업을 설립하고, 미디어 컬렉션을 저장하고 클라우드에서 스트리밍하는 서비스를 제공함.
     * 펜리는 파인 블러프의 창고를 구입하고, 유타와 L.A.에서 이사 준비를 함.

파인 블러프의 상황

     * 파인 블러프는 한때 번영했던 도시였으나, 현재는 미국에서 가장 빠르게 축소되는 도시 중 하나임.
     * 백인 이탈, 자본 이탈, 탈산업화, 보수적 사회 지출 공격으로 경제가 황폐화됨.
     * 펜리는 파인 블러프로 이사하기 전에 도시의 명성을 알고 있었으나, 그의 계획은 더 복잡해짐.

펜리의 파인 블러프에서의 도전

     * 펜리는 파인 블러프에서 메이커스페이스, 비즈니스 인큐베이터, 아트 스튜디오, 과학 박물관을 포함한 복합 시설을 계획함.
     * 그러나 도시 정부와의 관계가 악화되고, 건물 코드에 대한 승인을 받지 못함.
     * 펜리는 도시가 자신의 계획을 경쟁으로 보고 있다고 믿음.

펜리의 부동산 확장

     * 펜리는 주식을 팔아 89만 달러를 벌고, 이를 사용해 파인 블러프에서 74개의 토지를 추가로 구입함.
     * 그는 부동산을 구입할 수 있는 기회가 있을 때마다 구입해야 한다고 배움.

펜리의 미래 계획

     * 펜리는 파인 블러프에서의 메이커스페이스 계획을 아직 실현하지 못함.
     * 그는 유타로 돌아가는 것을 고려하고 있으며, 파인 블러프의 호텔을 경매에서 구입할 계획을 가지고 있음.

GN⁺의 의견

     * 이 기사는 창의적이고 대담한 아이디어를 가진 개인이 직면할 수 있는 현실적인 어려움을 보여줌. 펜리의 이야기는 기업가 정신과 혁신에 대한 열정이 때로는 예상치 못한 장애물과 마주할 수 있음을 상기시킴.
     * 펜리의 경험은 도시 재생과 부동산 개발에 관심 있는 이들에게 중요한 교훈을 제공함. 특히 지역 사회와의 협력의 중요성과 법적, 행정적 절차의 이해가 필요함을 강조함.
     * 이러한 대규모 프로젝트를 추진할 때는 지역 사회의 현실과 필요를 충분히 고려하고, 지속 가능한 발전을 위한 장기적인 계획이 필요함.
     * 파인 블러프와 같은 도시의 경제적 회복을 돕기 위한 다양한 접근 방식이 있을 수 있으며, 펜리의 사례는 이러한 접근 방식 중 하나를 보여줌. 그러나 성공적인 도시 재생은 복잡한 과제이며, 다양한 이해관계자의 협력이 필요함.
     * 이 기사는 독자들에게 혁신적인 아이디어가 실제 실행으로 옮겨질 때 발생할 수 있는 다양한 도전에 대해 생각해 볼 기회를 제공함.

        Hacker News 의견

     * 읽기 어려움
          + 빌딩에 대한 계획이 명확하지 않음. 메이커스페이스, 음악 창고, 과학 박물관 등 다양한 용도가 제시되었지만 일관된 계획이 있는지 의문. 281,000달러를 계획 없이 사용한 것 같음.
     * 도시의 방해
          + 도시가 방해를 주었다는 주장에 대해, 건물 계획을 제출하지 않은 점 등을 고려할 때 예방 가능했는지 확실하지 않음. 도시의 중요한 부분을 소유하려면 정치적으로 더 나은 전략이 필요함. 900,000달러 중 일부를 사용해 도시가 원하는 공원이나 경찰 장비에 투자하는 것이 더 나았을 것.
     * 텐트 생활 vs. 보안 고용
          + 보안을 고용하는 대신 텐트에서 생활하는 것은 시트콤 에피소드 같음. 보안을 고용할 여유가 없다면 건물을 소유할 여유도 없는 것. 900,000달러는 최소한 일년간 보안을 위해 충분함.
     * 저렴한 땅의 이유
          + 땅이 저렴한 이유가 있음. 도시가 활성화되려면 외부 가치가 유입되어야 함. 메이커스페이스-창고-박물관이 어떻게 가치를 가져올지 불분명. 심지어 모든 계획이 성공한다 해도, 200마일 밖에서 올 고객이 없을 것으로 예상.
     * S&P 500 대비 투자
          + S&P 500이 연 8% 수익률을 제공하는데, 왜 이런 불확실한 투자를 하는지 이해할 수 없음. 노숙자, 정치, 생각할 필요 없이 단순히 투자하고 손대지 않으면 됨. 아이디어가 이 수익률과 노력의 교차점을 넘지 못한다면 시작하지 말 것.
     * 폰티파이어에 대한 관심
          + 기사가 폰티파이어에 대해 과도하게 동정적이며, 그의 기이한 행동을 간과함. 예를 들어, 폰티파이어가 오래된 MRI 기계로 핵융합 반응기를 만들 수 있다고 믿는 것 등. 이 모든 것이 고도의 퍼포먼스 아트인지 여부는 결정하지 못했지만, 노력을 평가함.
     * 파인 블러프의 위험성
          + 파인 블러프는 위험한 곳임. 과거에 놀라운 건물을 보러 갔을 때, 도시가 죽은 상태에서 돌아올 가능성이 없다는 것을 깨달음. 이전 소유주가 건물을 준비하는 도중에 찔렸고, 도시 직원들은 세금을 피하는 데 도움을 주는 대가로 돈을 요구함. 근처의 타이슨 치킨 농장에서 바람이 불 때 냄새가 나고, 미국에서 살인율이 가장 높은 곳 중 하나임.
     * 부동산 적립증
          + 부동산을 적립하는 것은 심각한 정신 장애임. 부동산을 적립하는 것은 드물지만, 이 경우는 표준 사례임. 새로운 부동산을 얻는 것에서 즐거움을 느끼지만, 실제로 무엇을 할지는 모름. 건축 도면을 만드는 데 필요한 돈을 지출하지 않고 부동산을 더 많이 구입함. 보안을 고용하지 않고 직접 부동산을 지키기로 결정함. 인터뷰 말미에 영감을 주는 말 대신, 또 다른 버려진 부동산을 구입하는 것에 대한 환상을 가짐.
     * 도시 관리자들에 대한 동정
          + 도시는 면허가 있는 민간 엔지니어나 건축가의 서명과 도장이 찍힌 완전한 도면이 없으면 어떤 건축 프로젝트도 승인하지 않음. 이것은 도시를 안전하고 살기 좋게 유지하기 위한 그들의 임무임. 도시 관리자들이 그의 아이디어를 훔치는 것은 이해할 수 있음. 도시가 활성화되는 방법을 찾고 있고, 좋은 아이디어와 돈을 가진 젊은 기술자가 나타났지만, 결국 그가 아무것도 이루지 못할 것이라는 것을 알게 됨.
     * 아칸소 주민의 희망
          + 아칸소 주민으로서, 그가 어떤 성공을 거두기를 바람. 파인 블러프는 지역의 주요 엔터테인먼트 목적지였으며, 최근 몇 년간 상황이 좋지 않음. 1980년대 뉴욕시의 비유가 현실이 되기를 희망함.
     * 트위터에서의 활동
          + 폰티파이어가 진행 중인 드라마에 대해 자주 트윗함.
     * 심슨 가족 에피소드 비교
          + 심슨 가족 에피소드에서 바트가 1달러에 버려진 공장을 구입한 것과 유사함. 도시가 건축 도면과 엔지니어의 참여를 원하는 이유도 같음. 에피소드의 결말에서 건물이 붕괴됨.
     * 자기 억제와의 공감
          + 폰티파이어의 이야기가 흥미로운 이유 중 하나는, 자신도 같은 충동을 가지고 있지만 의도적으로 억제하고 있기 때문임. 그가 성공한다면, 자신의 결정을 재평가할 필요가 있을 것임.
     * 위험한 환경
          + 심지어 소방전도 당신에게 반대하는 위험한 장소임.
     * 해커뉴스 댓글 링크
          + 해커뉴스 댓글 섹션의 링크 제공.
"
"https://news.hada.io/topic?id=14067","MongoDB에서 PostgreSQL로 대규모 이전한 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    MongoDB에서 PostgreSQL로 대규모 이전한 후기

     * Infisical은 하루에 5천만 개 이상의 Secret을 처리하는 플랫폼으로 급성장
     * 사용량 증가에 따라 스택을 지속적으로 업그레이드해야 했으며, 최근에는 MongoDB에서 PostgreSQL로 전체 데이터베이스 마이그레이션을 진행
     * 이 마이그레이션은 신기술 채택, 데이터베이스 스키마 생성, 로직 재구성, 쿼리 재작성, 수백만(또는 수십억) 데이터 레코드를 PostgreSQL로 이전하는 복잡한 과정을 포함

시작 단계

     * Infisical을 처음 구축할 때, 팀에 가장 익숙한 스택을 사용하여 MongoDB + Mongoose ORM을 선택
     * 초기에는 Infisical Cloud, 관리형 SaaS 제공에 더 집중했으며, 사용자가 제품을 자체 호스팅하는 경우를 많이 예상하지 않았음

MongoDB가 아닌 이유?

     * MongoDB는 초기에는 잘 작동했지만, 제품 사용 사례가 관리형 서비스를 넘어서면서 단점이 드러나기 시작
     * 많은 조직들이 Infisical Cloud 대신 Infisical을 자체 호스팅하는 것을 선호했으며, 일부는 온프레미스 요구 사항을 충족해야 했음
     * MongoDB의 제약 사항과 사용성 문제로 인해 PostgreSQL로 전환하기로 결정

PostgreSQL을 선택한 이유?

     * 새로운 데이터베이스를 찾으면서 관리 용이성, 트랜잭션 지원, 관계형 기능 등이 중요한 요소로 고려됨
     * 내부 저장소와 외부 저장소 솔루션 사이에서 고민했으나, PostgreSQL을 선택
     * PostgreSQL은 활발한 커뮤니티, 풍부한 문서, 다양한 솔루션 및 확장 기능을 제공하며, 대부분의 클라우드 제공업체에서 관리형 서비스를 제공

ORM에 대하여

     * PostgreSQL을 선택한 후, 애플리케이션이 데이터베이스와 상호작용하는 방식을 결정해야 했음
     * Mongoose ORM과 유사한 경험을 제공하는 도구를 찾았으며, Knex.js 쿼리 빌더를 사용하기로 결정함
     * Knex.js는 씨딩 및 마이그레이션 도구를 제공하며, TypeScript 지원을 위한 맞춤형 Zod 통합 작업을 통해 만족스러운 수준에 도달

마이그레이션 계획

     * 코드 재작성이 끝나갈 무렵, MongoDB 데이터를 PostgreSQL로 최소한의 중단으로 매핑하는 마이그레이션 작업을 어떻게 수행할지 고민
     * 중요한 인프라에서 역할을 하는 Infisical의 경우 절대 다운타임을 허용할 수 없었으며, 마이그레이션 기간 동안 쓰기 작업을 금지하는 타협을 함

대이동

     * 마이그레이션 준비를 위해 자세한 체크리스트와 예상 시간표를 작성
     * 마이그레이션은 6시간 동안 읽기 작업만 허용하면서 수행되었으며, 데이터 이동 후 DNS를 새 인스턴스로 전환

결과

     * 마이그레이션은 데이터 손실 없이 순조롭게 진행되었으며, 고객에게 미치는 영향이 최소한인 몇 가지 기능 오류를 36시간 이내에 수정
     * 플랫폼은 조인을 통한 쿼리 최적화로 인해 성능 향상을 경험했으며, 데이터베이스 비용도 50% 절감
     * PostgreSQL 도입으로 데이터 유효성 검사가 개선되었으며, 이제 Infisical은 자체 호스팅이 훨씬 쉬워짐

결론

     * MongoDB에서 PostgreSQL로의 이동 결정은 쉽지 않았으며, 신중한 계획과 논의를 거쳐 3-4개월이 걸렸음
     * 이러한 큰 프로젝트를 시도하기 전에 사용 사례와 구현을 심도 있게 생각할 것을 권장

        Hacker News 의견

     * Postgres와 MongoDB를 대규모로 운영한 경험이 있는 한 사용자는 두 데이터베이스 모두 좋아하지만, Postgres의 고가용성(HA)과 수평 확장 지원 부재에 대해 이해할 수 없다고 언급함. Postgres 설치가 매번 독특하며, 여러 확장 기능과 스크립트를 사용해 이를 보완해야 한다고 지적함. 이러한 확장 기능들은 종종 버그가 많고 문서화가 부족하다고 덧붙임. Postgres의 주요 버전 파일 형식 변경으로 인해 업그레이드가 매우 힘들다고 언급함. MySQL이 HA/샤딩에서 Postgres보다 훨씬 나은 점에 대해 놀라워함.
     * MongoDB에서 PostgreSQL로의 마이그레이션 경험을 기술적인 관점에서 설명한 블로그 포스트를 공유함. 이 포스트는 예제와 그래프를 포함하여 더 기술적이고 비즈니스적인 내용이 적다고 언급함.
     * PostgreSQL이 데이터베이스 세계를 점령하고 있다고 언급하는 사용자는, 저자들이 처음에 데이터 모델에 적합하지 않은 아키텍처를 선택했다고 지적함. 관계형 데이터를 비관계형 저장소에 넣는 것은 항상 문제를 일으킬 것이라고 언급함.
     * MongoDB와 Mongoose ORM을 선택한 이유가 기능 개발 속도를 높이는 데 최적화된 선택이었다고 주장하는 문장과, Tony Hoare의 ""시기상조된 최적화는 모든 악의 근원이다""라는 인용문을 사용하여 이 선택을 정당화하는 문장 사이의 모순을 지적함.
     * 문서형 데이터베이스가 새로운 프로젝트에는 적합하지 않다고 생각하는 사용자는, MongoDB의 라이선스 비용과 호스팅 비용이 증가하고 기능 개발이 정체될 것으로 예상함.
     * MongoDB로 인한 문제로 인해 Postgres로 전환한 경험이 있는 사용자는 그 결정에 매우 만족한다고 언급함. MongoDB가 SQL 대신 JavaScript를 사용하는 것이 불편했다고 덧붙임.
     * 실제 리라이트 과정에서 발생한 문제들에 대해 논의하는 것이 누락되었다고 지적하는 사용자는, 쿼리가 동등하게 이루어졌는지, 양쪽 데이터베이스에서 읽고 쓸 수 있도록 제품을 어떻게 구성했는지, 마이그레이션 중 버그가 발견되었는지, 쿼리를 1:1로 이전할 수 있었는지에 대한 질문을 함.
     * MongoDB를 사용해본 사용자는 문서형 데이터베이스가 일부 사용 사례에는 적합하지만, Mongoose를 사용해야 한다는 것을 깨달았을 때 관계형 데이터베이스로 전환을 고려해야 한다고 언급함. 대부분의 경우 Mongoose는 기존 프로젝트에 추가해야 하며, 처음부터 필요하다면 관계형 데이터베이스를 사용해야 한다고 조언함.
     * MongoDB를 사용하는 프로젝트를 물려받은 사용자는 BSON 형식이 좋지 않지만, JSON API부터 데이터베이스까지 동일한 스키마를 사용할 수 있다는 점을 좋아한다고 언급함. Go와 Rust에서 데이터 지향 프로그래밍에 적합하다고 덧붙임. MongoDB는 읽기 위주의 작업에만 적합하다고 결론짓고, 쓰기 작업이 많은 경우에는 MongoDB가 큰 도움이 되지 않는다고 언급함.
     * 기술적인 이유보다는 라이선스 문제로 인해 PostgreSQL로 전환한 것이 주된 이유라고 언급하는 사용자는, 조인을 사용한 쿼리 최적화로 인해 성능 향상을 경험했다고 공유함. 데이터가 키-값 저장소에 적합하게 모델링되지 않았기 때문에, 적절한 유형의 저장소로 전환하는 것이 결정적인 이유가 되었다고 언급함.
"
"https://news.hada.io/topic?id=13975","TinySSH - NaCl과 TweetNaCl을 사용하는 소형 SSH 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               TinySSH - NaCl과 TweetNaCl을 사용하는 소형 SSH 서버

     * tinysshd는 SSHv2 기능의 일부만을 구현한 미니멀 SSH 서버
     * 최소 128비트 보안을 지원하고 캐시 타이밍 공격에 대비한 안전한 암호화만을 지원
     * RSA, DSA, HMAC-MD5, HMAC-SHA1, 3DES, RC4 등 오래된 암호화는 구현하지 않음
     * 비밀번호나 호스트 기반 인증과 같은 안전하지 않은 기능들을 구현하지 않음
     * SSH1 프로토콜, 압축, 포트 포워딩, 에이전트 포워딩, X11 포워딩 등의 기능도 제공하지 않음
     * 동적 메모리 할당을 사용하지 않아 할당 실패 등의 문제가 없음

암호화 원시 기능

     * 최신 암호화 기술: ssh-ed25519, curve25519-sha256, chacha20-poly1305@openssh.com
     * 이전 표준(20190101 버전에서 제거됨): ecdsa-sha2-nistp256, ecdh-sha2-nistp256, aes256-ctr, hmac-sha2-256
     * 양자 컴퓨터에 대비한 암호화: sntrup761x25519-sha512@openssh.com, chacha20-poly1305@openssh.com

프로젝트 타임라인

     * 실험적 단계(2014년): 실험을 목적으로 함
     * 알파 단계(2015-2017년): 생산 환경에는 적합하지 않으나 테스트를 위해 준비됨
     * 베타 단계(2018년부터 현재까지): 프로덕션에 적합함
     * 안정화 단계: 양자 컴퓨터에 대비한 암호화를 포함하여 생산 환경에 적합할 것으로 예상

현재 릴리스 (20240101)

     * 코드는 63899 단어로 구성됨.
     * 베타 릴리스 상태임.

실행 방법

     * TCPSERVER: tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &
     * BUSYBOX: busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &
     * INETD: /etc/inetd.conf 파일에 ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir 추가
     * SYSTEMD: tinysshd.socket 및 tinysshd@.service 파일을 통해 서비스 구성 및 실행

GN⁺의 의견

     * tinysshd는 최소한의 기능을 가진 SSH 서버로, 보안에 중점을 둔 설계가 돋보임. 이는 과도한 기능이 없어 가볍고, 보안 취약점이 적을 가능성이 높다는 장점을 가짐.
     * SSH 서버는 네트워크 보안의 핵심 요소이므로, tinysshd와 같은 최소주의 접근 방식은 특히 보안이 중요한 환경에서 유용할 수 있음.
     * 다만, 일부 사용자에게는 포트 포워딩이나 X11 포워딩과 같은 고급 기능의 부재가 단점으로 작용할 수 있음.
     * 양자 컴퓨터에 대비한 암호화를 지원한다는 점은 미래 지향적인 접근으로, 보안에 대한 지속적인 관심과 업데이트를 반영함.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 OpenSSH가 있으며, 이는 더 많은 기능을 제공하지만, 그만큼 더 복잡하고 관리해야 할 보안 측면이 많음.
     * tinysshd를 도입할 때는 기능 제한이 프로젝트 요구 사항에 적합한지 고려해야 하며, 선택함으로써 얻는 이점은 간결함과 강화된 보안, 손실되는 이점은 일부 고급 기능의 부재임.

        Hacker News 의견

     * TinySSH 사용 사례:
          + 리눅스 부팅 중에 원격으로 암호화된 드라이브를 잠금 해제하는 데 사용됨.
          + 머리 없는 NAS 서버에서 dm-crypt/LUKS와 ZFS를 사용.
          + 커널/ZFS 업데이트 시 서버를 원격으로 재부팅하고, TinySSH를 통해 암호화 키 프롬프트에 접속해 드라이브 잠금 해제.
          + TinySSH가 종료되면서 SSH에서 즉시 로그아웃되며, 몇 초 후 다시 SSH로 접속하면 완전히 부팅된 시스템에 접근 가능.
     * TinySSH 관련 링크:
          + 현재 Slashdot 효과로 인해 접근이 어려움.
          + 웹 아카이브를 통해 TinySSH 페이지 확인 가능.
     * TinySSH 코드량에 대한 의견:
          + 코드량을 '단어'로 표현하는 것이 재미있음.
          + 일반적으로 보안이 중요한 저장소는 'X 줄의 코드'로 광고하는 것이 일반적이나, '단어'로 표현한 것은 이례적.
     * TinySSH의 지원 범위:
          + ed25519-sk를 지원하지 않는 것이 아쉬움.
          + 그 외에는 매우 유망해 보임.
     * TinySSH의 감사 가능성:
          + 100,000단어의 코드가 정말 쉽게 감사할 수 있는 수준인지 의문 제기.
     * TinySSH와 Dropbear SSH의 차이점에 대한 질문.
     * OpenSSH 대체에 대한 의견:
          + OpenSSH는 많은 사람들이 사용하고 오랜 시간 동안 검증되어 안정성이 높음.
          + OpenSSH는 OpenBSD 출신으로, 보안 코드 작성에 신중함.
          + OpenSSH를 대체하기보다는 키 기반 인증으로 전환하고, Mozilla의 설정 아이디어를 포함한 몇 가지 간단한 구성 변경으로 OpenSSH를 더욱 강화하는 것이 좋음.
     * TinySSH 개발자의 작업에 대한 칭찬:
          + TinySSH 외에도 여러 작은 네트워크 유틸리티와 서버를 개발.
          + 이러한 작업들은 개발자가 무언가를 '만들기 위해' 그리고 이해하기 위해 노력하는 것처럼 보임.
     * TinySSH의 안전 기능:
          + TinySSH는 비밀번호나 호스트 기반 인증과 같은 안전하지 않은 기능을 구현하지 않음.
          + 공유 장치에서 개인 키를 등록하는 방법에 대한 질문.
"
"https://news.hada.io/topic?id=14072","주 몇 주간 지속된 DDoS 공격 시도에 우리는 아무 조치도 취하지 않아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                주 몇 주간 지속된 DDoS 공격 시도에 우리는 아무 조치도 취하지 않아

DDoS 공격을 받고 있지만 아무것도 하지 않음

     * 수주간에 걸쳐 누군가가 DDoS 공격을 시도하고 있음.
     * 서버에 수백만 건의 요청을 쏟아부어 설정 파일을 수백만 번 다운로드하려 함.
     * 최근 5일 동안에만 80만 번 이상 다운로드를 시도했으며, 설정 파일은 다운로드당 약 200MB임.
     * 대부분의 트래픽은 EU, 특히 독일과 영국에서 발생함.
     * 공격은 이 블로그 글을 쓰는 현재에도 계속 진행 중임.

이 긴박한 상황에서 우리가 하는 일

     * 공격자의 IP 주소를 차단하지 않음.
     * Cloudflare를 사용하지만 ""Under Attack"" 모드를 활성화하지 않음.
     * 서버 CPU는 공격 중에 대부분의 시간 동안 거의 유휴 상태임.
     * 일반적으로 거의 아무것도 하지 않음.

왜 그런가?

     * 서비스가 월 수십억 건의 요청을 문제없이 처리할 수 있으며 비용이 많이 들지 않음.
     * 약 8개의 API 서비스와 데이터베이스가 있으며, 캐싱 없이도 월 수십억 건의 요청을 처리할 수 있음.
     * Cloudflare와 무제한 대역폭을 가지고 있음.

어떻게 가능한가?

     * TablePlus 앱의 디자인은 단순하며, 이 철학은 최소한으로 유지되는 백엔드 서비스에도 적용됨.
     * Vercel이나 Netlify와 같은 제3자 서비스를 사용하지 않음. 대신 제한 없는 웹 서버를 사용함.
     * 과거에는 약한 VPS/프로세서로 인해 모놀리식이 병목 현상을 일으켰지만, 오늘날 강력한 VPS는 단일 인스턴스에서 월 수십억 건의 요청을 처리할 수 있음.
     * 따라서 각 앱에 대해 모놀리식 서비스를 구축함. 배포 및 유지 관리가 쉬움.

모놀리식에 대해 이야기해보자

     * 모든 것을 복잡하게 만드는 경향이 있지만, 압박이나 제한을 받을 때까지 문제가 되지 않음.
     * 복잡성을 싫어하므로 모놀리식을 선택함. 앱이 필요로 하는 모든 것을 단일 서비스에 통합함.
     * 배포가 간단함. 단 하나의 구성 파일, 빌드 및 배포가 필요함.
     * 의존성이 적어 디버깅과 병목 현상 식별이 쉬움.

Go나 Rust의 단일 웹 프레임워크가 올바르게 구현되면 월 수십억 건의 요청을 처리할 수 있음

     * 고성능 프레임워크를 선택함.
     * 데이터베이스를 인덱싱하여 데이터 세트가 커짐에 따라 가져오는 시간을 줄임.
     * 주 데이터베이스를 로그/사용 데이터베이스와 분리하여 성능 문제로 인해 핵심 비즈니스에 영향을 받지 않도록 함.
     * Nginx와 같은 강력한 리버스 프록시를 사용하여 요청을 핵심 API로 처리 및 분배함.
     * Cloudflare 뒤에 모든 것을 두고 적절히 구성함.
     * DDoS 보호가 있는 CDN을 사용함.
     * CDN이나 캐싱 없이 큰 다운로드 파일을 VPS에 두지 않음.

배포에 대해 이야기해보자

     * TablePlus에서는 배포 과정을 가능한 한 단순화함.
     * Docker, Kubernetes 또는 컨테이너를 사용하지 않고 환경 설정이 필요 없음.
     * 바이너리를 사용함. 바이너리는 복사하여 리눅스 서버에서 프로세스로 실행할 수 있음.
     * Go와 Rust를 선택함. 고성능 언어이며 배포를 위한 바이너리 파일을 생성할 수 있음.

업데이트

     * Vercel이 연락을 취해왔으며, 이러한 상황에서 사이트를 보호할 수 있는 기능이 있다고 함.
     * 지출 관리를 통해 지출 한도를 설정할 수 있고, 공격 챌린지 모드가 있어 CF의 ""Under Attack"" 모드와 유사함.

GN⁺의 의견

     * 이 기사는 DDoS 공격에도 불구하고 안정적인 서비스 운영을 가능하게 하는 강력한 인프라와 단순화된 배포 전략의 중요성을 강조함.
     * 모놀리식 아키텍처는 복잡성을 줄이고, 배포를 간소화하며, 성능 최적화에 유리한 점을 보여줌.
     * 클라우드 서비스와 CDN을 효과적으로 활용하여 DDoS 공격에 대한 탄력성을 갖춘 것은 다른 기업들에게도 좋은 사례가 될 수 있음.
     * 이러한 접근 방식은 특히 초기 단계의 스타트업이나 중소기업에게 비용 효율적인 인프라 구축에 대한 통찰을 제공함.
     * 그러나 모든 시스템이나 애플리케이션에 모놀리식 접근 방식이 적합한 것은 아니므로, 각각의 요구 사항과 상황에 맞는 아키텍처를 선택하는 것이 중요함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자는 웹사이트의 성능에 대해 자랑하는 것이 과장되었다고 생각함.
          + ""월간 10억 요청""은 초당 몇 백 요청에 불과하며, 이는 사소한 수준이며 DDoS 공격이라고 볼 수 없음.
          + 사이트가 CDN(Cloudflare) 뒤에 있기 때문에, 성능 관련하여 특별한 것을 한 것으로 보이지 않음.
          + 200MB 파일이 CDN을 통해 캐시되고 제공되는 것은 당연한 일이며, 이를 자랑하는 것은 부적절한 설계로 보임.
     * 두 번째 댓글 요약:
          + 월간 4TB의 트래픽은 DDoS 공격으로 보기 어려움.
          + 월간 600만 요청은 초당 2회 요청에 불과하며, 이 정도 규모에서는 단일 서비스(monolith service)를 운영하는 것이 문제가 되지 않음.
          + 대부분의 요청은 Cloudflare가 CDN 수준에서 캐싱하여 처리할 것으로 가정됨.
     * 세 번째 댓글 요약:
          + 사이트는 단순한 정적 마케팅 사이트로, 토론 포럼이 없으며 피드백은 GitHub 이슈를 통해 처리됨.
          + 정적 파일이 매일 수백만 번 다운로드되는 것을 간단한 배포로 처리할 수 있다고 자랑하는 것은 이상함.
          + Cloudflare가 모든 완화 작업을 수행하고 있으며, 실제로는 교통량이 매우 적어서 필요하지 않을 수도 있음.
     * 네 번째 댓글 요약:
          + 설명된 추가 트래픽은 ""서비스의 무의미한 남용""으로 보이며, 실제 DDoS 공격으로 보기 어려움.
          + 이러한 남용이 비용이나 자원 고갈 문제를 일으키지 않는 한 무시할 수 있음.
          + 자동 확장 인프라의 대부분이 유용한 작업을 수행하지 않는다는 이야기는 흔하며, 트래픽을 주시하는 것이 좋음.
          + 로깅에 대한 불만이 있으며, 로그 저장소가 저렴하고 풍부하다면 문제가 되지 않지만, 남용 트래픽을 자동으로 분류하고 일상적인 처리를 억제하는 것이 좋음.
     * 다섯 번째 댓글 요약:
          + 영국에서 발생한 월간 5천만 요청은 단일 스크립트가 실행되어 발생할 수 있는 수준임.
          + 작성자는 Go 서버가 최적화 없이도 초당 250배 많은 요청을 처리할 수 있을 것으로 기대함.
          + 조언 자체는 나쁘지 않지만, 그들의 숫자가 그 조언의 증거가 되지는 않음.
     * 여섯 번째 댓글 요약:
          + 바이너리를 배포하는 것이 도커를 사용하는 것보다 선호될 수 있지만, 바이너리를 실행하는 호스트에 대한 보안 문제가 있음.
          + 단일 VPS에서 호스팅되는 단일 서비스(monolith service)는 비용이 저렴하고 좋지만, 하드웨어에 문제가 발생하면 상당한 다운타임이 발생할 수 있음.
          + 모든 것을 단일 서비스에 통합함으로써 깊이 있는 방어(defence in depth)를 잃을 수 있으며, 이는 보안 문제가 발생할 경우 데이터 저장소에 대한 접근을 허용할 수 있음.
     * 일곱 번째 댓글 요약:
          + ""월간 10억 요청""은 단일 서버에서 처리할 수 있는 수준으로, 단일 잘못된 스크립트가 이 정도의 트래픽을 발생시킬 수 있음.
     * 여덟 번째 댓글 요약:
          + 월간 수십억 요청이 큰 DDoS 공격으로 간주되는지에 대한 의문을 제기함.
     * 아홉 번째 댓글 요약:
          + 각 앱에 대해 단일 서비스(monolith service)를 구축하는 것은 배포 및 유지 관리가 쉬움.
          + 도커, 쿠버네티스, 종속성, 런타임 환경 없이 단순히 바이너리 파일만 배포하면 됨.
     * 열 번째 댓글 요약:
          + 제목을 읽고 더 큰 내용을 기대했지만, Cloudflare 뒤에 있다는 것은 중요한 요소임.
          + 트래픽 분포에 따라 Cloudflare 없이도 VPS에서 잘 운영될 수 있음.
          + 러시아의 layer7 DDoS 공격은 주요 제공업체들이 용량 문제로 인해 실패하는 정도로 큰 규모임.
"
"https://news.hada.io/topic?id=13983","안드로이드용 무료이며 안전한 오픈 소스 2FA 앱, Aegis v3.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                안드로이드용 무료이며 안전한 오픈 소스 2FA 앱, Aegis v3.0

Aegis 인증 앱 v3.0 출시

     * 새로운 기능: Material 3 디자인 적용, 자동 아이콘 할당, 모든 항목 일괄 선택, 2FAS 스키마 v4 백업 가져오기 지원, 마지막 사용 시간을 기준으로 항목 정렬, 가져오기 및 백업 권한 오류 관련 명확한 설명, 여러 그룹에 단일 항목 할당 준비, 많은 아이콘이 있는 항목 목록 스크롤 시 성능 향상, 타사 라이선스 목록 새로운 디자인.
     * 버그 수정: 루트를 사용한 Authy에서의 직접 가져오기 실패, 애니메이션 지속 시간 설정과 관련된 작은 오류, 다양한 안정성 향상.

GN⁺의 의견

     * Aegis 인증 앱은 사용자의 2단계 인증 코드를 안전하게 관리할 수 있게 해주는 오픈소스 앱임. 이번 v3.0 업데이트는 사용자 경험을 향상시키고, 앱의 안정성을 높이는 다양한 기능과 버그 수정을 포함함.
     * Material 3 디자인 도입은 사용자 인터페이스를 현대적이고 일관된 안드로이드 디자인 가이드라인에 맞춰줌으로써 사용자에게 더 나은 시각적 경험을 제공함.
     * 오픈소스 인증 앱으로서, Aegis는 개발자 커뮤니티의 지속적인 기여를 통해 발전하고 있으며, 사용자의 피드백을 신속하게 반영할 수 있는 장점이 있음. 그러나 오픈소스 프로젝트의 경우, 지속적인 유지보수와 지원에 대한 보장이 상업적 소프트웨어에 비해 떨어질 수 있음을 고려해야 함.
     * 이와 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 Google Authenticator, Authy, LastPass Authenticator 등이 있으며, 사용자는 자신의 필요에 맞는 앱을 선택할 수 있음.
     * 새로운 기술이나 오픈소스를 도입할 때는 보안, 호환성, 지원 등을 고려해야 하며, Aegis와 같은 앱을 선택함으로써 사용자는 데이터의 소유권을 유지하고 커뮤니티의 지원을 받을 수 있는 이점이 있음.

        Hacker News 의견

     * 구글 인증기가 클라우드에 비밀을 동기화하기 시작하면서 사용자의 통제를 벗어난 새로운 방식으로 접근할 수 있게 되었고, 이로 인해 Retool이라는 스타트업에서 큰 보안 사고가 발생함.
          + 이후로, 작성자는 자신의 회사 팀, 계약자, 가족 및 친구들을 Google Auth에서 Aegis로 옮기기 시작함.
          + Aegis 앱은 사용하기 쉽고, 오픈 소스이며, 필요한 모든 옵션을 갖추고 있음.
          + Aegis의 개인정보 보호 정책은 다른 앱들처럼 수십 페이지에 달하지 않으며, 실제 제품에 중점을 둔 것으로 보임.
          + 작성자는 Aegis 사용자로서 매우 만족스러움.
     * Aegis를 좋아하지만 2FA(2단계 인증)와 관련하여 이 지경에 이르렀다는 사실이 슬픔.
          + 처음에는 SMS를 통해 임시 코드가 전송되었지만, 이제는 Aegis에서 20개 이상의 서비스 코드를 찾아야 함.
          + 웹사이트가 QR 코드를 제시하고, 사용자가 스캔한 후 키로 서명된 요청을 보내어 인증하는 방식이 더 편리했을 것임.
          + 2FA가 시작될 때, 모든 서비스가 이를 요구하게 될 것이고 사용자 경험이 끔찍해질 것이라고는 아무도 생각하지 못했음.
     * Aegis를 매우 중요한 앱으로 여김.
          + Android에서 Aegis를 사용하고 Gnome 기반 리눅스 배포판을 사용하는 경우, Gnome Authenticator와 함께 사용을 추천함.
          + Gnome Authenticator는 아직 초기 단계이며 버그가 있지만, Aegis 형식을 가져오고 내보낼 수 있음.
          + 휴대폰과 노트북, 데스크탑에서 시드를 가지고 있는 것이 매우 편리함.
     * Bitwarden과 KeePassXC도 무료이며, 오픈 소스 2FA를 제공함.
          + TOTP 비밀 키를 비밀번호와 별도로 분리하여 저장함.
          + 다른 것을 사용할 이유를 모르겠으며, 다른 의견이 있다면 듣고 싶음.
     * 백업에 대한 이야기는 어떤가?
          + 사용자가 제공한 비밀번호로 보호되는 암호화된 백업을 수요에 따라 할 수 있는가?
          + 백업을 열거나 읽을 수 있는 데스크탑 앱이 있는가?
          + 변경 사항이 있을 때마다 암호화된 복사본을 Dropbox 등에 저장하도록 앱을 설정할 수 있는가?
          + Play 스토어에서 설치하는 것이 좋은가, 아니면 GitHub에서 APK를 다운로드하는 것이 좋은가?
     * 조직에서 생성 토큰을 가질 수 없게 하고 Duo와 같은 것을 강제하는 문제에 대처하는 사람이 있는가?
          + 한 명만 있고, 루팅된 안드로이드나 다른 방법으로 해결할 수 있을지 모르지만, 시간을 내서 조사하거나 싸우지 못함.
     * Aegis는 IMO(내 견해로는) 더 잘 알려져야 함.
          + 구글 인증기에 충분한 저장 공간이 없는 오래된 휴대폰에 설치했고, 앱에 매우 만족함.
          + 커뮤니티 프로젝트라는 사실도 좋은 보너스임.
     * 점점 더 많은 앱이 Material 3/You를 사용하기 시작하는 것이 마음에 듦.
          + 애플의 UI 디자인은 선호하지 않지만, iOS 앱의 일관된 UI 디자인을 좋아함.
          + 안드로이드의 UI 불일치에 비해 좋음.
     * Aegis를 사용하는 것이 좋고 즐거움.
          + 다른 인증기가 Microsoft Authenticator의 발걸음을 따라 자체 인증기를 만들고, 다른 것들이 불안전하다고 말하며 Aegis와 같은 인증기를 허용하지 않기를 바람.
     * Aegis를 몇 년 동안 사용해왔고, 싫어하는 것이 없음.
          + 완벽하게 기능하는 앱이며, 새로운 업데이트를 시도하는 것을 기대함.
"
"https://news.hada.io/topic?id=14056","Show GN: Github용 static site generator ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: Github용 static site generator

   현재 연재를 마친 ""만화로 나누는 자유/오픈소스 소프트웨어 이야기""의 영문 사이트를 만들고 있습니다. 이전에는 워드프레스를 사용하여 직접 호스팅했으나, 이번에는 Github Pages기능을 사용해서 만화 사이트를 만들었고, static site generator는 node.js를 이용해서 직접 개발했습니다.

   Hugo theme을 적용해 보았고, 아마 다른 Hugo theme을 수정하면 변경이 가능할 겁니다. 기존 Markdown문법을 확장해서 이미지 크기와 정렬 조정이 가능합니다.

   GitHub Actions를 이용해 사이트의 게시 과정을 자동화하였습니다. 현재 코드가 이해하기 쉬워서 static site generator에 관심이 있는 분들에게 유용한 정보가 될 것 같습니다.

   감사합니다.
   21세기 개발자 만화가 joone님!

   평소에 너무 재밌게 봤고, 정말 몇 안되는 제가 주변에 추천하는 콘텐츠입니다.

   아직도 <월드와이드웹의 시작 팀 버너스 리>편이 생각나네요.
   저도 이런 콘텐츠와 작품을 만들어서 많은 사람들에게 재미있는 방식으로 역사나 학습자료를 만들고 싶다는 생각을 합니다.

   항상 노고에 감사드립니다.

   고맙습니다~

   만화도 재밌는데 ㄷㄷㄷㄷ 이런걸 영문화 까지 하시다니..ㄷㄷㄷ
"
"https://news.hada.io/topic?id=13971","새로 발견된 아즈텍 문서: 산 안드레스 테테필코의 코디세스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    새로 발견된 아즈텍 문서: 산 안드레스 테테필코의 코디세스

산 안드레스 테테필코의 코덱스 발견

     * 멕시코 국립인류학역사연구소의 전문가 팀이 산 안드레스 테테필코의 코덱스라고 불리는 세 개의 새로운 아즈텍 코덱스를 발견함.
     * 이 코덱스들은 중앙 멕시코의 쿨우아칸 정치체의 일부였으며, 현재는 멕시코 시티 이스타팔라파 구역에 위치함.
     * 발견된 코덱스는 멕시코 정부가 익명을 요구한 현지 가족으로부터 입수했으며, 멕시코 국립인류학역사연구소 도서관에 보관 중임.

발견된 코덱스에 대한 설명

     * 첫 번째 코덱스는 '테테필코 창립의 지도'로, 산 안드레스 테테필코의 창립에 관한 정보와 쿨우아칸, 테테필코, 테파노우아얀, 코우아틀린찬, 살토칸, 아스카포츠알코 내의 지명 목록을 담고 있음.
     * 두 번째 코덱스는 '산 안드레스 테테필코 교회의 목록'으로, 두 페이지로 구성된 교회의 그림 목록이며, 상태가 매우 손상됨.
     * 세 번째 코덱스는 '산 안드레스 테테필코 티라'로, 보투리니 코덱스와 오빈 코덱스와 같은 계열로, 테노치티틀란 정치체의 역사를 1603년까지 담고 있음.

코덱스의 중요성

     * 이 코덱스들은 아즈텍 문자에 대한 새롭고 흥미로운 예시를 포함하고 있으며, 이전에는 이상하게 여겨졌던 몇몇 글리프들이 실제로는 전통적인 것일 수 있음을 보여줌.
     * 로고실라빅 철자법과 나와틀어 알파벳 주석이 달린 그림 문자가 아즈텍 커뮤니케이션 시스템의 작동 방식을 이해하는 데 도움이 될 것으로 기대됨.

GN⁺의 의견

     * 이 발견은 아즈텍 문명의 역사와 문자 체계에 대한 이해를 깊게 하며, 고고학과 역사학 분야에서 중요한 발전을 의미함.
     * 코덱스에 담긴 정보는 아즈텍 문명의 사회적, 문화적, 종교적 측면을 더 잘 이해할 수 있는 기회를 제공함.
     * 디지털화 및 물리적 출판을 통해 더 많은 학자들과 일반 대중이 이 자료를 접할 수 있게 되면, 아즈텍 문자 해독에 대한 연구가 한층 더 진전될 수 있음.
     * 이와 유사한 아즈텍 문자 연구를 위해서는 고대 문자 해독에 관한 기초 지식이 필요하며, 이 분야에 관심이 있는 연구자들에게는 이 발견이 흥미로운 연구 주제가 될 수 있음.
     * 아즈텍 문명에 대한 대중의 관심을 증대시키고, 멕시코의 역사적 유산에 대한 인식을 높이는 데 기여할 것으로 보임.
"
"https://news.hada.io/topic?id=14051","Apple Pay 작동 방식에 대한 오해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Apple Pay 작동 방식에 대한 오해

디지털 지갑과 ""오직 애플 페이만이 이것을 한다""는 신화

     * 애플 페이는 훌륭하지만, 그 작동 방식에 대해 오해가 있는 것 같음.
     * 애플 페이를 통한 지불은 실제 신용카드 번호를 숨겨 소매업체가 고객을 추적하는 것을 방지함.
     * DPAN과 FPAN의 차이점을 설명함. FPAN은 실제 카드에 인쇄된 번호이고, DPAN은 기기에 할당된 고유 번호임.
     * DPAN은 DNS 레코드와 비슷하며, 애플 페이를 사용할 때마다 다른 DPAN이 생성됨.
     * DPAN은 애플 페이만의 기능이 아니라 모든 디지털 지갑의 표준 기능임. 구글 페이와 삼성 페이도 동일한 기능을 제공함.
     * 아마존 페이와 샵 페이 버튼도 실제 FPAN을 소매업체로부터 숨김.
     * 은행들도 자체 디지털 지갑을 통해 DPAN을 사용하여 실제 계좌 번호를 보호함.

고객 추적 문제

     * DPAN이 거래마다 바뀐다는 주장은 사실이 아님. 같은 소매업체에서의 연속 거래에 대해 DPAN은 동일함.
     * DPAN은 여러 소매업체 간의 거래 데이터를 결합하여 쇼핑 경향을 파악하는 것을 어렵게 만들지만, 단일 소매업체가 고객의 거래 내역을 추적하는 것을 막지는 못함.
     * 데이터 유출 시 DPAN이 고객에게 더 안전함. DPAN은 각 거래마다 고유한 암호화된 번들의 일부로 제출될 때만 작동하기 때문에 해커가 사용할 수 없음.

애플 페이의 개인 정보

     * 애플 페이가 개인 정보를 숨긴다는 생각은 사실이 아님.
     * 실제 애플 페이 거래를 테스트하여 상인 수준의 보고서를 확인함. 거래 시 청구 및 집 주소, 전체 이름, 이메일 주소가 상인에게 전달됨.
     * 애플 페이 SDK는 상인이 고객으로부터 얻고자 하는 개인 정보를 선택할 수 있게 함.
     * 애플 페이 결제 카드가 나타날 때, 그 카드에 있는 모든 정보가 상인에게 전송됨.

결론

     * 애플 페이는 훌륭한 지불 방법이며 디지털 지갑을 대중화하는 데 큰 역할을 함.
     * 애플 페이가 제공하는 기능은 업계에서 독특하지 않음. DPAN은 여러 소매업체 간의 구매 추적을 어렵게 하고 데이터 유출 시 고객을 보호함.
     * 모든 디지털 지갑의 작동 방식에 대해 모든 사람이 알고 있을 것으로 기대하는 것은 비현실적임. 이러한 정보를 공유하는 것이 유용함.

GN⁺의 의견

     * 이 기사는 디지털 지갑과 관련된 일반적인 오해를 해소하는 데 도움이 됨. 특히 애플 페이가 업계에서 유일하게 제공하는 기능을 가지고 있다는 잘못된 인식을 바로잡음.
     * 기사는 DPAN과 같은 기술이 고객의 개인 정보 보호에 어떻게 기여하는지 설명함으로써, 사용자들이 디지털 지갑을 더 안전하게 사용할 수 있도록 교육하는 데 기여함.
     * 비판적인 시각에서 볼 때, 기사는 디지털 지갑이 완벽한 개인 정보 보호 솔루션은 아니라는 점을 강조함. 예를 들어, 단일 소매업체가 고객의 거래 내역을 추적하는 것을 막지 못한다는 점을 지적함.
     * 업계에는 애플 페이와 유사한 기능을 제공하는 다양한 디지털 지갑이 존재함. 예를 들어, 구글 페이나 삼성 페이는 사용자의 신용카드 정보를 보호하는 유사한 기능을 제공함.
     * 기술을 도입할 때 고려해야 할 사항으로는, 사용자의 개인 정보 보호 수준과 해당 기술이 실제로 제공하는 보안 수준을 이해하는 것이 중요함. DPAN을 사용함으로써 얻는 이점은 데이터 유출 시 고객의 신용카드 정보가 직접적으로 노출되는 것을 방지할 수 있다는 점임.

        Hacker News 의견

     * 애플과 구글 페이의 작동 원리에 대해 ELI5(5살 아이에게 설명하듯이)로 설명해달라는 요청이 있음. 사용자는 이 서비스들이 신용카드 정보를 가맹점이나 결제 게이트웨이에 전달한다고 생각했으나, 애플/구글이 결제 게이트웨이나 결제 방식 역할을 하는 것 같은 인상을 받음. 이들이 모든 거래 데이터를 수집하며, 애플/구글 페이를 지원하기 위해 결제 단말기에 특별한 지원이 필요한 것으로 보임. 그러나 다른 댓글에서는 애플 페이가 표준에 깊이 뿌리박고 있다고 주장함. 애플과 구글의 독점적인 요소는 무엇이며, 왜 이 앱들을 오픈소스 대안으로 대체하기 어려운지, NFC 칩에 대한 애플/구글의 전용 접근 때문인지 궁금해함.
          + 애플 페이가 일반화되기 시작했을 때, 한 사용자는 자신의 소매 결제 처리 경험을 통해 애플 페이를 면밀히 조사함. 당시 애플 페이가 업계 표준에 얼마나 깊이 뿌리박혀 있는지에 대해 인상 깊었음. 무선 통신 기술부터 애플 특유의 것이 전혀 없었으며, 이는 현재까지도 유지되고 있음. 일부 가맹점들이 애플 페이를 의도적으로 수락하지 않으려고 시스템을 변경해야 했던 사례가 있음(CVS가 특히 기억남). 이는 가맹점이 경쟁 결제 시스템을 차별화하려는 의도에서 비롯됨. 저자가 최근의 상황에 대해 다시 검토한 것에 대해 긍정적으로 평가함.*
          + 애플 페이와 같은 디지털 지갑 거래가 기존 카드 번호를 사용하는 거래만큼 추적 가능하다는 점이 논의에서 빠져 있음. 디지털 지갑 결제가 기존 카드나 카드 번호를 사용하는 결제보다 더 개인정보 보호가 되는 것으로 기대하지 말 것을 조언함.*
          + 매트 버치러의 포스트가 DPAN(디바이스별 결제 계좌 번호)이 가맹점별로 다르다는 잘못된 정보를 수정함. 애플의 공식 문서에 따르면 DPAN은 디바이스별로만 고유하며, 카드가 제거되고 다시 추가되지 않는 한 변경되지 않음. 따라서 두 개의 다른 디바이스(예: 아이폰과 애플 워치)에서 동일한 카드를 사용할 때 추적될 수 없지만, 동일한 디바이스에서 다른 가맹점을 거래할 때 데이터 브로커에 의해 추적될 수 있음을 지적함.*
          + SSO(단일 로그인)와 모바일 결제가 표준 인터페이스가 아니며, 왜 ""구글로 로그인""이나 ""애플로 로그인"" 대신 ""내가 설정한 기본 SSO 제공자로 로그인""이 아닌지에 대한 의문을 제기함. 또한 많은 벤더나 사이트가 이러한 제공자 중 일부만 지원하여 SSO가 실제로 SSO가 아니게 됨. 공통된 사양에 모든 벤더가 따라야 하며, 그렇지 않으면 미래에 법으로 이러한 표준이 정해질 것이라고 예상함.*
          + 애플 페이가 결제 시 개인 정보 수집을 얼마나 할지 가맹점이 결정하며, 애플 페이가 체크아웃 시 정보 요청을 막지 않음. 실제 상점에서 쇼핑할 때도 이런 일이 발생하는지, 애플/구글이 명백히 필요하지 않은 정보를 공유하는 데 동의를 요구하는지에 대한 의문을 제기함.*
          + 애플 페이가 호주에서 출시되었을 때, 이미 현지 대형 은행들이 수년간 무접촉 결제 사용을 증가시키기 위해 노력했음. 애플이 들어와 미국식 수수료를 요구했을 때, 모든 인프라는 이미 은행들에 의해 구축되어 있었음. 현지 대형 은행들은 고객 압력이 너무 커져서 결국 애플 페이를 지원하기로 함. 은행들은 여전히 이에 대해 불만을 가지고 있으며, 규제기관이 NFC 칩을 강제로 개방하도록 하면 애플 페이를 즉시 중단할 것임.*
          + 애플 페이가 거래 승인 전에 결제할 금액을 화면에 표시하지 않는 이유에 대한 의문을 제기함. 이는 UX 문제가 아니라 애플 기기가 결제 금액을 알지 못하기 때문일 것이라고 추측함.*
          + 그루버가 ""오직 애플 페이만 이것을 한다""고 말한 부분이 어디인지에 대한 질문이 있음. 작성자는 그루버가 몇 가지 실수를 했거나 세부 사항을 정확히 파악하지 못했다고 지적함.*
          + 애플이 이와 같은 디지털 지갑을 대중화하는 데 훌륭한 일을 했으며, 애플 페이가 처음 출시되었을 때는 상당히 독특했으나, 지금은 업계에서 독특하지 않음을 언급함. 초기의 다른 전화 결제 시스템들은 카드 번호를 직접 기계로 전송했음을 회상함.*
"
"https://news.hada.io/topic?id=13996","대부분의 웹 앱이 단일 서버에서 실행 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        대부분의 웹 앱이 단일 서버에서 실행 가능

웹 앱 대부분은 단일 서버에서 운영 가능

     * 웹 개발 씬을 따라가면서 느끼는 바는, 많은 웹사이트와 앱들이 복잡한 인프라를 필요로 하지 않으며, 대부분의 웹사이트와 앱들이 초당 10개 미만의 요청을 받고 바쁜 날에는 50개를 받는 수준임.
     * 전 세계에 엔드포인트가 있으면 지연 시간이 줄어들지만, 데이터에 접근해야 하므로 클라이언트와 20ms 거리에 있더라도 데이터베이스가 그 엔드포인트로부터 200ms 떨어져 있다면 의미가 없음.
     * 캐싱은 유용하지만, 이는 CDN이나 단순한 HTTP 캐싱으로 얻을 수 있음. 업데이트 후 새 파일을 CDN에 푸시하면 대부분의 경우 전체 사이트가 CDN에서 운영될 수 있음.
     * 몇몇 API 엔드포인트가 동적 기능을 위해 필요할 수 있지만, 이는 예를 들어 자바스크립트로 처리할 수 있음.
     * 대부분의 프로젝트는 $5짜리 VPS에서 컨테이너로 실행될 수 있으며, 이는 더 빠를 수도 있음.

GN⁺의 의견

     * 이 기사는 웹 앱 개발에 있어서 과도한 인프라 사용에 대한 비판적인 시각을 제공함. 많은 웹 앱들이 실제로는 간단한 인프라에서도 충분히 운영될 수 있음을 지적하고 있으며, 이는 초급 소프트웨어 엔지니어들에게 인프라 구축 시 과도한 자원 투입을 피하고, 필요한 만큼의 자원을 적절히 사용하는 중요성을 일깨워줌.
     * 기사는 또한 캐싱과 CDN의 중요성을 강조하고 있으며, 이는 웹 앱의 성능을 향상시키는 데 있어 핵심적인 요소임. 이는 웹 개발자들이 성능 최적화를 위해 캐싱 전략을 고려해야 함을 시사함.
     * 웹 앱이 규모가 작거나 트래픽이 많지 않은 경우에는 복잡한 분산 시스템보다는 단일 서버 또는 간단한 클라우드 서비스를 고려하는 것이 비용 효율적일 수 있음. 이는 스타트업이나 소규모 프로젝트에 특히 해당됨.
     * 기사는 웹 개발자들에게 기술 선택에 있어 신중을 기하고, 프로젝트의 실제 요구 사항에 맞는 인프라를 선택할 것을 권장함. 이는 기술의 트렌드에 휩쓸리지 않고 실질적인 요구를 충족시키는 개발을 추구하는 데 도움이 됨.
     * 비판적인 시각으로 볼 때, 이 기사는 대규모 트래픽을 처리해야 하는 대형 웹 앱이나 서비스에는 적용되지 않을 수 있음. 따라서, 프로젝트의 규모와 요구 사항에 따라 적절한 인프라 선택이 중요함을 인지해야 함.

        Hacker News 의견

     * 한 사용자는 자신의 프로젝트가 해커뉴스(HN) 첫 페이지에 올랐을 때 5달러짜리 Digital Ocean 드롭렛에서도 트래픽을 잘 처리했다고 확인함. 대부분의 프로젝트는 비동기 응답과 스케줄러/큐를 사용하여 시간에 걸쳐 부하를 수평적으로 분산시키면 충분하다고 주장함. 또한, 새로운 DevOps 문화가 클라우드 앱 배포를 복잡하게 만들었다고 비판하며, 간단한 소프트웨어에 대해 과도하게 확장할 필요가 없다고 지적함.
     * Standard Ebooks는 매달 상당한 페이지 뷰와 전자책을 제공하며, HN 첫 페이지에 3~4번 올랐음에도 불구하고 단일 4GB VPS로 모든 것을 처리함. 'Decline and Fall of the Roman Empire' 전자책을 만들기 위해 더 많은 RAM이 필요해서 2GB에서 4GB로 업그레이드했을 뿐, 그렇지 않았다면 2GB 서버로도 충분했을 것이라고 함. 이에 대한 블로그 포스트 링크를 제공함.
     * 한 엔지니어가 k8s를 배우고 싶어서 선택한 이유 외에는 k8s를 사용하는 이유가 없다고 언급한 사용자는 k8s 때문에 서버 로그조차 볼 수 없다고 불평함. Cloudflare 5달러 플랜으로 충분히 처리할 수 있었을 것이라고 주장함.
     * sqlite.org가 하루에 500,000개 이상의 HTTP 요청을 처리하고 약 200GB의 콘텐츠를 제공하는데 40달러/월의 Linode를 사용한다고 언급함. 만약 당신의 앱이 sqlite.org보다 많은 요청을 처리하지 않는다면, 더 많은 비용을 지불할 필요가 없다고 주장함.
     * 한 사용자는 Oracle Free Tier를 사용하여 백엔드를 무료로 운영하고, Cloudflare 터널링과 페이지를 통해 프론트엔드 통합을 무료로 구현하여 하루 약 10,000개의 요청을 처리하는 여러 웹 앱을 운영하고 있음을 공유함.
     * 개인 웹사이트, 두 개의 멀티플레이어 게임 서버, 터널링을 위한 frp를 포함하여 단일 5유로 서버에서 여러 애플리케이션을 운영하고 있으며, 서버가 포기할 때까지 더 많은 것을 추가할 계획이라고 언급함. 또한, 다른 애플리케이션들도 5유로 VM에서 잘 작동한다고 함.
     * 한 사용자는 Terraform 파일로 인해 실제 기능을 작성하는 것보다 4배 많은 시간을 소비했던 경험을 공유함. 해당 회사는 하루에 1,000번 미만의 히트를 받았다고 함.
     * 4달러/월 VPS가 초당 수천 개의 쿼리를 처리할 수 있다는 사실을 언급한 사용자는 관련 링크를 제공함.
     * 대부분의 웹앱이 단일 기계에서 실행될 수 있지만, 대부분의 고객이 거의 100% 가동 시간을 기대하며, 단일 기계가 고객의 요구 사항을 충족시키지 못한다는 점을 지적함.
     * 복잡한 시스템이 필요하지 않은 기본적인 웹앱에 대해 반대 의견을 제시하는 사용자는, 내부 서비스와 대시보드를 단일 바이너리에서 실행하는 FAANG과 같은 회사들도 있지만, 다운타임이 손실로 직결될 때는 복잡한 시스템의 필요성을 인식하게 된다고 주장함.
"
"https://news.hada.io/topic?id=14006","구글의 첫 번째 텐서 프로세싱 유닛(TPU): 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글의 첫 번째 텐서 프로세싱 유닛(TPU): 아키텍처

     * Google의 첫 번째 TPU(Tensor Processing Unit) v1은 딥 러닝을 활용한 새로운 서비스의 기회와 필요한 하드웨어의 규모 및 비용을 고려하여 10배의 비용-성능 이점을 제공하는 ASIC(Application Specific Integrated Circuit) 개발을 목표로 함.
     * TPU는 텐서 연산을 가속화하기 위해 설계되었으며, 텐서는 벡터, 스칼라, 다른 텐서 간의 다차원 배열 관계를 매핑하는 연산을 의미함.
     * 행렬 곱셈은 신경망의 핵심 연산으로, 입력 벡터와 가중치 행렬을 곱한 후 활성화 함수를 적용하여 은닉층과 출력층을 계산하는 데 사용됨.

Google의 첫 번째 텐서 처리 장치: 기원

     * TPU v1 프로젝트는 2013년 말에 시작되어 15개월 만에 개발되었으며, 이는 신경망 가속기에 관심이 있는 사람들에게 흥미로운 주제임.
     * TPU v1의 개발 배경과 목표는 이전 포스트에서 다루었으며, 이번 포스트에서는 TPU v1의 구조와 성능에 대해 더 자세히 살펴봄.

구조와 성능

     * TPU v1의 설계는 1978년 H.T Kung과 Charles E. Leiserson의 논문 ""Systolic Arrays (for VLSI)""에서 제시된 아키텍처를 기반으로 함.
     * Systolic array는 프로세서 네트워크로 구성되어 주기적으로 데이터를 계산하고 시스템을 통해 전달함으로써 효율적인 행렬 곱셈을 수행함.
     * TPU v1의 systolic array는 256x256의 곱셈/누적 유닛으로 구성되어 있으며, 중간 결과를 메인 메모리에 저장하고 가져올 필요 없이 자동으로 필요한 결과를 생성함.

Multiply/Accumulate Units (MACs)

     * TPU v1은 8비트 x 8비트 정수 곱셈을 수행하며, 부동 소수점 계산보다 더 적은 다이 면적을 필요로 하는 양자화를 활용함.

명령어 세트

     * TPU v1은 약 20개의 복잡한 명령어 세트(CISC)를 사용하며, 이 명령어들은 호스트 컴퓨터에서 PCIe 인터페이스를 통해 전송됨.
     * 주요 명령어에는 호스트 메모리 읽기, 가중치 읽기, 행렬 곱셈/합성, 활성화, 호스트 메모리 쓰기 등이 포함됨.

소프트웨어

     * TPU v1의 하드웨어는 Tensorflow와 같은 소프트웨어 스택을 지원하여 CPU 및 GPU에서 개발된 애플리케이션을 TPU로 빠르게 이식할 수 있도록 함.

제조 및 다이

     * TPU v1은 TSMC의 28nm 공정을 사용하여 제작되었으며, 다이 면적은 Google이 데이터 센터에서 사용하던 Intel Haswell CPU 및 Nvidia K80 GPU 칩의 절반 미만임.

성능

     * TPU v1은 추론을 더 효율적으로 만들기 위해 설계되었으며, Nvidia K80 GPU 및 Haswell CPU에 비해 약 15배에서 30배 빠른 추론 속도와 에너지 효율성을 제공함.

교훈

     * TPU v1의 맞춤형 아키텍처는 현대의 CPU 및 GPU보다 훨씬 더 나은 성능과 에너지 사용을 가능하게 함.
     * TPU v1은 추론을 빠르고 전력 효율적으로 만드는 것을 목표로 설계되었으며, 훈련을 위한 설계는 아니었음.

GN⁺의 의견

     * TPU v1의 개발은 구글이 대규모 데이터 센터에서의 추론 작업을 최적화하기 위해 특수 목적 하드웨어로 전환하는 중요한 전환점을 나타냄.
     * Systolic array 아키텍처는 데이터 흐름을 최적화하여 메모리 접근을 최소화하고, 이는 에너지 효율성과 성능 향상에 기여함.
     * TPU v1의 성공은 이후에 다양한 버전의 TPU 개발로 이어지며, AI 추론 하드웨어의 발전에 중요한 역할을 함.
     * TPU와 유사한 기능을 제공하는 다른 제품으로는 Nvidia의 Tensor Core를 탑재한 GPU, Intel의 Nervana NNP, 그리고 Amazon의 Inferentia가 있음.
     * TPU 기술을 도입할 때는 기존 인프라와의 호환성, 소프트웨어 스택, 그리고 특정 애플리케이션에 대한 최적화 수준을 고려해야 함. TPU를 선택함으로써 얻을 수 있는 이점은 추론 작업의 속도 향상과 에너지 효율성이지만, 특정 모델이나 데이터 유형에 대한 최적화가 필요할 수 있음.

        Hacker News 의견

     * Groq CEO Jonathon Ross가 팟캐스트 인터뷰에서 구글에서 TPU의 원형을 만든 과정에 대해 이야기함. 처음에는 인접 팀의 추론 속도 문제를 해결하기 위해 자신의 20% 시간에 FPGA를 만들었음. Jeff Dean이 수학적 계산을 한 후 ASIC으로 전환하기로 결정함. 현재 Google은 TPU 팀을 독립 회사로 분사해야 한다는 의견이 있음. TPU는 NVidia에 대한 유일한 신뢰할 수 있는 경쟁자이며, 소프트웨어 지원은 NVidia에 이어 두 번째로 좋음.
     * Google이 TPU를 발명하고 Google Research가 LLM에 대한 주요 논문을 발표했음에도 NVidia와 AI 스타트업들이 시장 가치의 대부분을 차지하고 있는 상황에 대한 의문 제기.
     * Google 직원이 TPU v5를 확인해볼 것을 권장함. PyTorch/JAX를 지원하여 TensorFlow만 사용할 때보다 훨씬 사용하기 쉬움.
     * 한 기사가 실리콘을 통해 추상적인 부분들을 어떻게 연결하는지 잘 설명함. CISC 명령어가 LLM 추론 단계에 어떻게 매핑되는지 보는 것이 흥미로움.
     * Google이 2nm EUV 기술에 진출하고 2nm 이하로 나아가야 한다는 의견. ASML이 제공하는 전자 리소그래피 기술을 확보하면 매우 강력한 결과를 얻을 수 있음. Google X의 대담한 프로젝트가 될 수 있으며, TPU가 정말 좋다면 자체 팹과 기술을 갖춘 비즈니스로 좋은 기회가 될 수 있음.
     * 현재 TPU의 이름이 어떤 해양 생물인지에 대한 질문.
     * OP(Original Poster)의 인용: ""TPU v1은 대략 20개의 명령어만을 가진 CISC 설계를 사용함."" 이에 대한 반응으로 CISC/RISC가 연구 프로그램에서 마케팅 용어에 이르기까지 다양한 단계를 거쳤으며, 이제는 의미 없는 소리가 되었다는 풍자적 의견.
     * TPU 하드웨어가 실제로는 벡터와 행렬 연산만 수행하는데, 왜 ""텐서""라는 용어를 사용하는지 이해하지 못한다는 댓글.
     * [삭제된 댓글]
     * [삭제된 댓글]
"
"https://news.hada.io/topic?id=14060","둠 캡챠(Doom Captcha) (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       둠 캡챠(Doom Captcha) (2021)

Doom Captcha 데모

     * 이메일 입력과 함께 시작하는 Doom Captcha 데모는 재미를 위한 작은 프로젝트임.
     * 코딩을 알고 있다면 이 프로젝트의 보안을 쉽게 무력화할 수 있음.

코드

     * HTML 폼 태그 안에 이메일 입력란과 함께 자바스크립트 기반의 캡차가 포함되어 있음.
     * 캡차는 특정 파라미터를 사용하여 사용자 정의가 가능함.

파라미터

     * countdown: 캡차의 타이머 기능을 켜거나 끌 수 있음.
     * label: 캡차 앞에 표시되는 텍스트로, 비워둘 수도 있음.
     * enemies: 캡차를 완료하기 위해 처치해야 하는 적의 총 수로, 기본값은 4임.

최신 업데이트 및 치트 코드

     * 마지막 업데이트는 2021년 5월 30일에 이루어짐.
     * 데스크톱 모드에서 'iddqd'를 입력하면 캡차를 완료하고, 'idkfa'를 입력하면 슈퍼 샷건을 얻는 치트 코드가 존재함.

소스 코드

     * 소스 코드는 GitHub에서 공개되어 있으며, 풀 리퀘스트나 포크를 통해 기여할 수 있음.

감사의 말

     * 기여자들에게 감사를 표함: JS 최적화, 오타 수정, 코드 포맷팅 및 이미지 최적화, 오리지널 Doom 게임 배경, 슈퍼 샷건 치트 코드 제공 등.

성과

     * DOOM Captcha는 Product Hunt에서 '오늘의 제품 1위'를 차지함.
     * 개발자는 금요일에 아이디어를 떠올리고, 토요일 아침에 첫 버전을 개발하여, 일요일에 공개함.
     * 많은 프로젝트들이 있었지만, DOOM Captcha는 향수를 불러일으키고 프로젝트에 애정을 느끼게 함.
     * 개발자는 창의적 개발자로서의 커리어를 이어가고자 하며, 이 프로젝트를 좋아한다면 다른 프로젝트들도 확인해보길 바람.

개발자 소개

     * 개발자인 Miquel Camps Orteza의 트위터 팔로우 및 다른 사이드 프로젝트 소개.
     * 작업 가능 상태와 커피 구매 링크 제공.

GN⁺의 의견

     * Doom Captcha는 사용자들에게 게임을 통한 새로운 형태의 인터랙션을 제공하며, 특히 게임을 좋아하는 사용자들에게 흥미를 줄 수 있음.
     * 이 프로젝트는 웹 개발과 게임의 결합을 통해 창의적인 접근 방식을 보여주며, 웹 보안에 대한 관심을 높일 수 있는 계기를 마련함.
     * Doom Captcha는 실제 보안 목적으로 사용하기에는 취약점이 많지만, 웹 개발자들에게 자바스크립트와 HTML을 활용한 재미있는 프로젝트 아이디어를 제공함.
     * 이와 유사한 프로젝트로는 reCAPTCHA와 같은 보안 캡차 시스템이 있으나, Doom Captcha는 게임화 요소를 통해 사용자 참여를 유도하는 독특한 점이 있음.
     * 기술 도입 시 사용자 경험과 보안 간의 균형을 고려해야 하며, 이러한 유형의 캡차는 특정 사용자 그룹에게는 매력적일 수 있지만, 모든 웹사이트에 적합하지 않을 수 있음.

        Hacker News 의견

     * 누군가 최근에 Mistral-7B LLM을 조정해서 DOOM 게임을 할 수 있게 만듦.

     이번 주에 누군가가 Mistral-7B LLM을 미세 조정하여 DOOM을 플레이할 수 있게 되었다는 소식이 있음.
     * DOOM이 유명하게도 이식성이 뛰어나기 때문에, 브라우저에서 DOOM을 실행하고 간단한 맵을 완성할 것으로 기대했음.

     DOOM의 높은 이식성으로 인해, 브라우저에서 직접 실행하고 간단한 맵을 클리어하는 것을 예상했음.
     * 독특한 캡챠를 매우 좋아함. 이것이 특정한 캡챠를 떠올리게 함.

     독특한 캡챠에 대한 애정을 표현하며, 특정 사례를 회상함.
     * 게임이 훌륭하지만, 수직축 자동 조준 기능이 빠져 있음. 적의 아래에 조준선을 두고도 적중시킬 수 있어야 함.

     게임이 잘 만들어졌지만, 적을 자동으로 조준하는 기능이 수직축에서는 누락되어 있음을 지적함.
     * 누군가가 모나리자 캡챠를 만들기를 기다리고 있음.

     모나리자 캡챠 제작을 기대하는 의견을 표현함.
     * 작업이 완료될 때까지 기다리는 동안 DOOM을 플레이할 수 있는 진행 창을 원함.

     작업 진행 중에 DOOM을 플레이할 수 있는 기능에 대한 희망을 나타냄.
     * 완전한 3D로 구현된 DOOM을 시도해보라고 권함. 자바스크립트로 적어도 열두 번은 포팅되었을 것임.

     DOOM을 완전한 3D로 구현해보는 것을 제안하며, 자바스크립트로 여러 번 포팅되었을 것이라고 언급함.
     * 실제 DOOM이 아닌 이유는 무엇인가? 선택할 수 있는 여러 자바스크립트 DOOM이 있을 텐데.

     실제 DOOM이 아닌 대체 버전에 대한 의문을 제기하며, 여러 자바스크립트 기반 DOOM 중에서 선택할 수 있어야 한다고 주장함.
     * 팝업에 나타난 위협을 식별하고 그에 따라 쏘는 '맨 인 블랙' 모드를 원함.

     팝업의 위협을 식별하고 대응하는 '맨 인 블랙' 모드에 대한 아이디어를 제시함.
     * 월드 오브 워크래프트(WoW) 낚시 미니게임을 기반으로 한 캡챠를 만들어달라고 요청함. 적절한 시간에 물고기를 낚아야 함.

     WoW 낚시 미니게임을 모델로 한 캡챠 제작을 요청하며, 이를 통해 낚시 봇이 개발되어야 한다고 언급함.
"
"https://news.hada.io/topic?id=13980","구글 맵스는 지각판 이동 시 어떻게 되나? (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글 맵스는 지각판 이동 시 어떻게 되나? (2020)

지각판의 움직임이 구글 지도에 미치는 영향

     * 물리학 작가인 조지 머서는 아인슈타인의 일반 상대성 이론을 이해하기 위한 새로운 비유를 찾고 있었음.
     * 지구의 지각판 움직임이 공간과 시간을 왜곡시키는 것과 유사하게, 지구의 질량이 공간시간을 재구성하여 야구공이 포수의 글러브로 휘어지듯 이동함을 설명함.
     * 지구 표면의 모든 것은 고정된 좌표를 가지지 않음. 이는 지도와 내비게이션 시스템이 어떻게 정확한 위치를 제공하는지에 대한 의문을 제기함.

지도의 정확성을 유지하는 노력

     * 지리학자, 지질학자, 측지학자들은 지도가 정확하도록 노력하고 있지만, 항상 변화하는 지형에 한 발 뒤처짐.
     * 지질 활동으로 인해 지도상의 오류가 발생할 수 있으며, 이는 스크린상의 지도에서 상당한 오류를 야기할 수 있음.

GPS와 지도상의 오류

     * 소비자 GPS 장치는 몇 미터 이상의 위치 불확실성을 가짐.
     * 지도와 위성 이미지는 일반적으로 비슷한 정도로 정렬되지 않음.
     * 2008년 연구에 따르면, 개발된 세계의 31개 도시에서 Google Earth 이미지의 위치 오류가 1미터에서 50미터 사이로 나타남.

지리적 데이터의 불일치

     * 미국은 두 개의 별도의 지리적 데이터 시스템(NAD 83과 WGS 84)을 사용함.
     * NAD 83은 북미 내 측량에 최적화된 반면, WGS 84는 글로벌 커버리지를 위해 국내 정밀도를 희생함.
     * 지각판의 움직임으로 인해 지리적 데이터 시스템 간의 불일치가 발생할 수 있음.

지각판 움직임과 지리적 데이터

     * 지각판의 움직임은 지리적 데이터의 변화를 초래할 수 있으며, 이는 시간이 지남에 따라 조사된 위치와 그에 기반한 지도가 변화함을 의미함.
     * NAD 83은 북미 지각판 위에 고정되어 있으며, 지각판의 움직임에 따라 데이터도 함께 이동함.

지도 업데이트의 미래

     * 지도는 일반적으로 3년마다 업데이트되지만, 예산 삭감으로 인해 이 속도를 유지하기 어려움.
     * 미래의 지도는 실시간에 가까운 속도로 업데이트될 수 있음.

GN⁺의 의견

     * 지각판의 움직임이 GPS와 지도 데이터에 미치는 영향은 지리학과 측지학에 대한 이해를 높이는 중요한 사례임.
     * 이 기사는 지구의 동적인 특성과 현대 기술이 어떻게 이를 추적하려고 하는지에 대한 흥미로운 통찰을 제공함.
     * 지도의 정확성은 긴급 구조 작업, 군사 작전, 그리고 일상적인 내비게이션에 중요한 영향을 미칠 수 있으므로, 이 분야의 연구와 개선은 매우 중요함.
     * 지도와 GPS 데이터의 정확도를 높이기 위해 실시간으로 지각판 움직임을 추적하는 기술, 예를 들어 실시간 측지 네트워크의 활용이 필요할 수 있음.
     * 이 기술을 도입할 때는 데이터의 정확성과 사용자의 기대치 사이의 균형을 고려해야 하며, 지도 데이터의 실시간 업데이트가 현실적으로 가능한지, 그리고 그로 인한 비용과 복잡성을 고려해야 함.

        Hacker News 의견

     * NASA의 글로벌 드리프트 벡터에 대한 정보
          + NASA 제공: 지구상의 글로벌 드리프트 벡터에 대한 정보는 NASA의 웹사이트에서 확인할 수 있음.
     * 국제 지구 기준계와 프레임에 대한 설명
          + 국제 표준: 국제 지구 기준계와 프레임은 명확한 표준을 제공하며, 현대의 좋은 기준들은 특정 연도(에포크) 기준 프레임에 연결되어 있음. 예를 들어, 호주의 GDA2020은 ITRF2014를 기반으로 2020년을 에포크로 사용하며, 이전의 GDA94를 대체함. 두 기준 사이의 차이는 약 1.8미터임.
     * 세계 각국의 기준에 대한 자세한 정보 제공 사이트
          + 기준에 대한 깊은 탐구: 세계 각국의 기준에 대해 더 깊이 알고 싶다면, 전용 사이트에서 많은 국가들의 기준과 그 역사, 현재 상태에 이르기까지의 과정을 찾아볼 수 있음. 내용은 건조하지만 동시에 매혹적일 수 있음.
     * 구글 맵스와 지각판 이동에 대한 토론
          + 지각판 이동과 구글 맵스: 지각판이 이동할 때 구글 맵스에 어떤 영향이 있는지에 대한 토론이 이전에 있었음. 관련 토론은 해커뉴스에서 찾아볼 수 있음.
     * OpenStreetMap에서 지각판 이동 처리 방법
          + OpenStreetMap의 처리 방법: OpenStreetMap에서 지각판 이동이 어떻게 처리되는지 궁금하다면, 4월 1일을 기준으로 한 설명을 찾아볼 수 있음. 더 많은 정보를 아는 사람은 공유를 주저하지 말 것.
     * 지각판 이동에 관한 공상과학 이야기
          + 공상과학 스토리: 수백만 년 후, 서로 다른 자연 환경을 가진 땅이 있는 두 지각판이 서로 가까워질 때 인류가 어떻게 반응할지에 대한 공상과학적 이야기. 식물과 동물의 교차 이식을 막기 위한 뉴스 보도, 폭풍을 통한 자연적인 교류, 그리고 실제 접촉 시 발효될 수 있는 중대한 조약의 가능성 등이 포함됨.
     * 기사의 한계와 구글의 논의 부재
          + 기사의 한계: 기사 작성자가 구글과 대화하지 않았기 때문에, 이 기사를 통해 구글 맵스의 처리 방법을 알 수 없음.
     * 남부 캘리포니아에서 부동산 경계 좌표 기록 방법
          + 부동산 경계 좌표 기록: 남부 캘리포니아에서는 지각판의 이동을 고려하여 부동산 경계의 좌표가 어떻게 기록되는지 기사에서 언급되지 않음. 지역 랜드마크에 대한 거리 기록이 필요할 수 있으며, 지각 변동으로 인해 도로가 분리되는 경우에 대한 대책도 궁금함.
     * 지리적 참조 시스템에 대한 재미있는 사실들
          + 지리적 참조 시스템의 재미있는 사실들: 지각판의 수평 이동뿐만 아니라 산의 성장과 같은 요소들도 위치의 변화를 초래함. WGS 84와 같은 참조 시스템은 지구 표면을 대략적으로 모델링한 타원체를 기반으로 하며, 이는 산과 같은 불규칙성을 잘 반영하지 못함. 지구의 자전으로 인해 타원체의 정확도가 시간이 지남에 따라 점점 더 감소함. 과거에는 수동으로 측정했지만, 현재는 위성을 통해 측정함. 많은 지역에서 WGS 84 이외의 시스템을 기반으로 한 데이터가 여전히 사용되고 있음. 대학에서의 연구에서 독일 전역의 참조 시스템과 주별 참조 시스템의 집합체 간의 차이가 최대 4미터에 이를 수 있음을 발견함.
     * 개인 GPS 장치의 경험담
          + GPS 장치의 경험: 2000년대에 사용한 핸드헬드 Garmin GPS 장치가 지도상의 위치를 약 50피트 정도 벗어나 보여주었던 경험. 이것이 지각판의 이동 때문인지, 아니면 장치의 고유한 부정확성 때문인지 궁금함.
"
"https://news.hada.io/topic?id=13952","GoFetch: 데이터 메모리 의존 프리페처를 이용한 새로운 사이드 채널 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GoFetch: 데이터 메모리 의존 프리페처를 이용한 새로운 사이드 채널 공격

GoFetch 공격 개요

     * GoFetch는 데이터 메모리 의존형 프리패처(DMP)를 통해 상수 시간 암호화 구현에서 비밀 키를 추출할 수 있는 마이크로아키텍처 사이드 채널 공격임.
     * 많은 애플 CPU에 DMP가 존재하며, OpenSSL Diffie-Hellman, Go RSA, CRYSTALS Kyber 및 Dilithium과 같은 다양한 암호화 구현에 실제 위협이 되어 키를 추출할 수 있음을 보여줌.

GoFetch 개발자

     * GoFetch는 일리노이 대학교 어바나-샴페인의 Boru Chen, 텍사스 대학교 오스틴의 Yingchen Wang, 조지아 공과대학교의 Pradyumna Shome, 캘리포니아 대학교 버클리의 Christopher W. Fletcher, 워싱턴 대학교의 David Kohlbrenner, 카네기 멜론 대학교의 Riccardo Paccagnella, 조지아 공과대학교의 Daniel Genkin이 개발함.

자주 묻는 질문

     * GoFetch의 메커니즘, DMP가 있는 프로세서와 GoFetch의 영향을 받는 프로세서, GoFetch와 Augury의 차이점, 캐시 사이드 채널 공격, 상수 시간 프로그래밍, 데이터 메모리 의존형 프리패처, DMP 취약 암호화 구현, DMP 비활성화 가능 여부, 공격으로부터 보호 방법, 개념 증명 코드 존재 여부, 로고 사용 가능 여부, 애플에 통지한 시기 등에 대한 질문과 답변이 제공됨.

GoFetch 관련 뉴스

     * 애플 칩의 패치 불가능한 취약점이 비밀 암호화 키를 유출할 수 있음.
     * 애플 실리콘 취약점이 암호화 키를 유출하며 쉽게 패치할 수 없음.
     * GoFetch 취약점은 애플의 M 시리즈 칩에서 암호화 키 유출 위험을 노출함.
     * 애플 M 시리즈 칩에서 비밀 암호화 키를 유출할 수 있는 새로운 'GoFetch' 공격이 발견됨.
     * 애플 실리콘의 패치 불가능한 보안 결함으로 인해 암호화가 깨질 수 있음.
     * 애플 M 시리즈 CPU의 취약점으로 인해 공격자가 암호화 키를 훔칠 수 있음.

감사의 말

     * 이 연구는 공군 과학 연구 사무소(AFOSR), 국방 고등 연구 계획국(DARPA), 국립 과학 재단(NSF), 알프레드 P. 슬로언 연구 펠로우십, 인텔, 퀄컴, 시스코로부터의 지원을 받아 부분적으로 지원됨.

GN⁺의 의견

     * GoFetch는 애플의 M 시리즈 칩에서 발견된 새로운 보안 취약점으로, 암호화 키를 유출할 수 있는 심각한 위협을 제시함. 이는 애플 기기 사용자들에게 중요한 보안 이슈가 될 수 있음.
     * 이 취약점은 하드웨어 수준에서 패치가 불가능하다고 알려져 있어, 소프트웨어 기반의 해결책이나 우회 방법이 필요할 것으로 보임.
     * 비슷한 기능을 가진 다른 프로젝트나 제품으로는 Intel의 SGX나 AMD의 SEV 같은 하드웨어 보안 기술이 있으나, 이들 역시 다른 유형의 취약점에 노출되어 있을 수 있음.
     * 이 기술을 도입할 때 고려해야 할 사항으로는, 하드웨어의 보안 취약점에 대한 지속적인 모니터링과 적절한 소프트웨어 업데이트를 통한 리스크 관리가 있음.
     * GoFetch와 같은 취약점 발견은 암호화 기술과 하드웨어 보안의 중요성을 강조하며, 사용자와 개발자 모두에게 보안에 대한 인식을 높이는 계기가 될 수 있음.
"
"https://news.hada.io/topic?id=14027","마틴 스코세이지의 집착적인 VHS 아카이빙 비밀 생활","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     마틴 스코세이지의 집착적인 VHS 아카이빙 비밀 생활

마틴 스코세이지의 비밀스러운 취미, 집요한 VHS 아카이빙

     * 오스카 수상 감독 마틴 스코세이지가 1980년대부터 2000년대까지 녹화한 영화와 TV 프로그램이 담긴 50개가 넘는 보관 상자를 기증함.
     * 스코세이지는 자신만의 개인적인 온디맨드 비디오 라이브러리를 만들기 위해 이 프로젝트를 시작함.
     * 뉴욕 사무실의 전문 비디오 아카이비스트가 여러 대의 VCR과 모니터로 구성된 오디오비주얼 허브를 통해 방송을 녹화함.

마틴 스코세이지 VHS 테이프 컬렉션

     * 1980년대부터 2000년대에 걸쳐 4,400개가 넘는 독특한 타이틀을 포함하고 있음.
     * 유럽 아트하우스 걸작부터 스코세이지의 어머니가 출연한 TV 프로그램까지 다양함.
     * 스코세이지는 이 비디오 아카이브를 영화 제작 과정의 필수적인 부분으로 활용함.

스코세이지의 시청 열정과 영화 제작에의 적용

     * 어린 시절부터 TV를 통해 영화를 접하며 시청에 대한 열정을 키움.
     * 영화 제작 전, 배우와 스태프에게 참고 자료로 VHS 테이프를 나눠주곤 함.
     * 영화 제작 과정에서 톤, 분위기, 카메라 움직임 등을 참고하기 위해 아카이브를 활용함.

마틴 스코세이지의 아카이브 기증

     * 고화질 DVD와 블루레이, 스트리밍 서비스의 등장으로 VHS 아카이브의 유용성이 감소함.
     * 콜로라도 대학교 볼더의 Rare and Distinctive Collections에 기증함.
     * 콜로라도 대학교는 영화 및 비디오 역사에 대한 학문적 연구를 위한 중심지로 자리매김함.

아카이브의 보존과 연구 활용

     * 자기 미디어는 시간이 지남에 따라 품질이 저하되므로 전체 아카이브를 디지털화해야 함.
     * 연구자들은 스코세이지가 시청한 미디어가 그의 창작에 어떻게 영향을 미쳤는지 비교 분석을 할 수 있을 것으로 기대함.

GN⁺의 의견

     * 마틴 스코세이지의 VHS 아카이브는 영화 제작 과정에서 참고 자료로 활용되었던 실제 사례를 제공함으로써, 영화 제작자들에게 영감을 줄 수 있음.
     * 이 아카이브는 디지털 시대 이전의 미디어 보존 방식에 대한 중요한 역사적 증거이며, 영화학도들에게 과거의 미디어 환경을 이해하는 데 도움이 될 수 있음.
     * 아카이브의 디지털화는 시간과 자원이 많이 소요되는 작업이지만, 이를 통해 희귀한 미디어 자료를 보존하고 연구하는 데 큰 가치가 있음.
     * 스코세이지의 아카이브가 공개되면, 그가 어떤 미디어를 시청했는지에 대한 연구가 가능해져 영화 연구에 새로운 차원을 더할 수 있음.
     * 현재 영화 제작자들은 다양한 온라인 아카이브와 스트리밍 서비스를 통해 참고 자료를 쉽게 접할 수 있지만, 스코세이지의 아카이브는 특정 시대의 미디어 소비 패턴과 영화 제작에 미친 영향을 연구하는 데 독특한 자료가 될 수 있음.

        Hacker News 의견

     * MPAA 대 DeCSS 소송을 기억하는 사람이라면, 스코세지의 행동이 MPAA에 의해 심각한 저작권 침해로 간주될 것임을 알 것이다. MPAA는 DRM 위반은 불법이며 용납할 수 없다고 법정에서 주장했지만, 합리적인 사람은 직업을 위한 참고 자료 수집을 공정 이용으로 간주할 것이다. 스코세지는 MPAA의 회원이었을 가능성이 높으며, 잭 발렌티와 친구였다는 사실을 위키피디아를 통해 알 수 있다.
          + 스코세지는 2007년 N.I.A.F.의 32주년 갈라에서 이탈리아계 미국인 재단에 의해 표창을 받았으며, 전 MPAA 회장이자 재단 이사였던 잭 발렌티를 기리는 잭 발렌티 연구소를 시작하는 데 도움을 주었다.
     * 마리온 스토크스의 이야기는 TV 역사를 30년 이상 보존한 여성에 관한 것이다.
          + 스토크스는 필라델피아의 바클레이 콘도미니엄에서 1975년부터 사망한 2012년까지 녹화를 시작했으며, 이 기간 동안 TV 미디어 역사를 보존하는 유일한 종합 컬렉션이 되었다.
     * 영국 TV 코미디언 밥 몽크하우스도 집착적인 VHS 아카이브로, 35,000개의 테이프를 수집하고 BBC에서 분실된 것으로 여겨졌던 영국 TV 쇼의 일부 녹화를 보존했다.
     * 레오나르도 디카프리오는 마틴 스코세지가 1980년까지 만들어진 모든 영화를 봤다고 말했다.
          + 이는 스코세지가 영화를 얼마나 진지하게 생각하는지 이해하는 데 도움이 된다.
     * 스코세지는 자신의 컬렉션을 VFA의 영화 전문가들에게 기증하는 것을 고려해야 한다.
     * 성취한 예술가들이 자신의 매체와 대화를 나누기 위해 어떻게 작업하는지 보는 것은 항상 매혹적이다.
          + 사람들은 과거를 어떻게 현재의 목표를 형성하는 데 사용하며, 현재의 목표를 어떻게 과거에 대한 연구를 안내하는 데 사용하는가? 그들은 무엇이 효과적인지, 그렇지 않은지 어떻게 해체하는가? 그리고 이 모든 생각을 어떻게 조직하는가?
     * 대학생이 되어 스코세지가 수십 년 전에 흥미롭다고 생각한 것을 밤늦게 디지털화하는 것은 매우 아늑하게 느껴진다.
          + 그 방에는 릴 투 릴, 필름스트립, 마이크로피시와 같은 다른 고대 기술들이 가득 차서 놀라운 냄새가 날 것이다.
     * 스코세지의 영화 수집에 대한 집착은 80년대부터 영화 업계에서 잘 알려져 있다.
          + 그는 매일 몇 시간씩 자신의 지하실에서 영화를 보며 종종 다른 사람들을 초대해 함께 영화를 감상했다.
     * 스코세지는 VHS 보존을 위한 궁극적인 프로젝트인 'vhs-decode'를 후원해야 한다.
          + 해커뉴스와 할리우드 사이의 벤 다이어그램을 통해 이 일이 실현될 수 있을 것이다.
     * 스코세지는 VHS 녹화를 보관하고 관리하기 위해 특별히 존재하는 빅터빌 필름 아카이브에 이들을 기증했어야 했다.
"
"https://news.hada.io/topic?id=13969","Redict은 redis의 독립, 카피레프트 포크입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Redict은 redis의 독립, 카피레프트 포크입니다

   sourcehut을 설립하고 구 sway 메인테이너이기도 한 Drew DeVault가 redis의 카피레프트 포크를 진행했습니다.

   라이선스는 LGPL-3.0-only 를 따릅니다.

   Source code: https://codeberg.org/redict/redict

   GN+ 가 요약한 내용도 첨부해 봅니다.

Redict, Redis®의 독립적인 저작권 보호 포크

     * Redict는 Redis®의 독립적이고 비상업적인 포크 버전임.
     * Redis®가 비자유 소프트웨어 라이선스 모델로 변경하는 것에 실망한 많은 사람들을 위해 제안됨.
     * Redict는 Redis® OSS 7.2.4 버전을 기반으로 하며, BSD 3-Clause 소스 코드를 사용함.
     * Redict의 모든 변경 사항은 LGPL-3.0만을 사용하여 라이선스가 부여됨.

LGPL을 선택한 이유

     * LGPL을 선택한 것은 Redict가 항상 자유 소프트웨어로 남을 것이라는 확고한 약속임.
     * LGPL 라이선스를 사용함으로써 Redict의 모든 변경 사항이 동일한 자유 소프트웨어 라이선스를 사용하여 배포되어야 함.
     * Redict는 특정 단체에 특별한 권리를 부여하는 기여자 라이선스 계약을 사용하지 않으며, 모든 기여자가 라이선스 변경에 동의해야 함.

라이선스 변경 방법

     * Redis® OSS는 BSD 3-Clause 라이선스를 기반으로 하며, 이는 허가된 라이선스임.
     * Redict는 원래 라이선스와 저작권 면책 조항을 유지하면서 LGPL을 사용하여 변경 사항을 라이선스함.
     * Redis® Ltd는 Redis® 코드의 저작권을 소유하지 않으며, Redict와 동일한 BSD 라이선스를 사용하여 서브라이선스함.

Redis®와의 차이점

     * 현재 Redis® 7.2.4와의 차이점은 제한적임.
     * 주요 변경 사항은 이름 변경과 독립적인 미래를 위한 기술적 기반 구축임.
     * 사용자에게 보이는 변경 사항으로는 실행 파일 이름 변경, Lua API에서 ""redict"" 글로벌 제공, 모듈 API 심볼 이름 변경 등이 있음.

향후 변경 사항

     * Redict는 Redis® OSS와 호환되는 자유 소프트웨어 배포의 지속적인 개발을 목표로 함.
     * 논의 중인 변경 사항으로는 오래된 기능 제거, 종속성 제거 및 시스템 서비스 예제 제거 등이 있음.
     * Redict는 내부 종속성인 Hiredis도 포크할 예정임.

인프라 변경

     * 이 기회를 통해 GitHub과 Slack과 같은 독점 인프라로부터 독립된 커뮤니티를 구축함.
     * 소스 코드는 독일 비영리 단체가 운영하는 Codeberg에 호스팅됨.
     * IRC 채널 #redict가 libera.chat에서 개설되어 커뮤니티가 조직되고 있음.

다른 포크와의 관계

     * Redis® 라이선스 변경 전에 이미 여러 포크가 존재했음.
     * Redict는 Redis® OSS 코드베이스의 보수적인 연속성을 제공할 것임.

   록키 리눅스도 나왔는데 이게 왜 안나오나 했어요
"
"https://news.hada.io/topic?id=13946","붐, XB-1 시험기의 성공적인 비행 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        붐, XB-1 시험기의 성공적인 비행 발표

XB-1 초음속 시험기의 성공적인 첫 비행

     * Boom은 캘리포니아 모하비 항공우주항에서 독자적으로 개발한 세계 최초의 초음속 제트기 XB-1의 성공적인 첫 비행을 발표함.
     * XB-1은 탄소 섬유 복합재, 첨단 항공 전자 장비, 디지털 최적화된 공력학, 고급 초음속 추진 시스템 등 최첨단 기술을 활용하여 효율적인 초음속 비행을 가능하게 함.
     * XB-1의 첫 비행은 초음속 여행의 복귀를 향한 중요한 이정표로, Boom의 초음속 여객기 Overture의 기반을 제공함.

첫 비행의 역사적 순간

     * XB-1은 모하비 항공우주항에서 이륙하여 Bell X-1, North American X-15, Lockheed SR-71 Blackbird 등 역사적인 첫 비행이 이루어진 동일한 영공을 비행함.
     * 주요 시험 조종사인 Bill ""Doc"" Shoemaker가 조종하였으며, T-38 추격기를 이용하여 XB-1의 비행을 모니터링함.
     * XB-1은 모든 시험 목표를 달성하였으며, 7,120피트의 고도와 238노트(273mph)의 속도에 이르는 비행을 성공적으로 수행함.

Concorde의 후계자, Overture를 향한 발걸음

     * XB-1의 첫 비행은 Concorde 은퇴 이후 20년 만에 민간 초음속 항공기가 하늘로 돌아온 것을 의미하며, Overture를 통한 초음속 여행의 대중화를 위한 길을 열어줌.
     * XB-1 프로그램은 Overture의 설계 및 개발을 위한 기반을 제공하고, 공학 및 제조 분야에서 안전 우선 문화를 확립함.
     * XB-1은 증강 현실 비전 시스템, 디지털 최적화된 공력학, 탄소 섬유 복합재, 초음속 흡입구 등 Boom의 혁신적인 기술을 검증함.

Overture의 지속 가능한 초음속 여행

     * Overture는 Mach 1.7의 속도로 64-80명의 승객을 수송할 수 있으며, 최대 100% 지속 가능한 항공 연료(SAF)를 사용하여 운행될 예정임.
     * XB-1의 첫 비행은 Overture가 생산에 가까워지고 있음을 보여주며, American Airlines, United Airlines, Japan Airlines 등으로부터 130대의 주문 및 예약을 받음.

GN⁺의 의견

     * XB-1의 성공적인 첫 비행은 항공 역사에서 중요한 순간이며, 초음속 여행의 재개에 대한 기대감을 높임.
     * 이 기술은 환경에 미치는 영향을 최소화하면서도 여행 시간을 단축할 수 있는 잠재력을 가지고 있어, 항공 산업에 새로운 변화를 가져올 수 있음.
     * 그러나 초음속 여행의 대중화는 여전히 많은 기술적, 환경적, 경제적 도전 과제를 안고 있으며, 이를 극복하기 위한 지속적인 연구와 개발이 필요함.
     * 비슷한 기능을 가진 제품으로는 에어버스와 록히드 마틴과 같은 기업들이 개발 중인 초음속 항공기 프로젝트가 있음.
     * 기술 도입 시 고려해야 할 사항으로는 안전성, 비용 효율성, 환경 영향 등이 있으며, 이러한 기술을 선택함으로써 얻을 수 있는 이점으로는 여행 시간 단축과 항공 산업의 혁신이 있음.

        Hacker News 의견

     * 유나이티드 항공은 2021년 6월 3일, 오버추어 항공기 15대를 구매하고 추가로 35대의 옵션을 가지고 있다고 발표했으며, 2029년부터 승객 비행을 시작할 것으로 기대한다고 함. 2022년 8월 16일, 아메리칸 항공은 오버추어 항공기 20대를 구매하고 추가로 40대의 옵션을 가지고 있다고 발표함.
     * 2022년 12월 13일, Boom은 '빅 쓰리' 엔진 제조사인 롤스로이스, 프랫 앤 휘트니, 제너럴 일렉트릭, 그리고 CFM과 사프란이 높은 자본 비용으로 인해 새로운 엔진 개발을 거절한 후, 자체 터보팬 엔진을 개발할 것이라고 발표함. 이 엔진은 심포니라고 명명되었으며, 플로리다 터빈 테크놀로지스, 스탠다드에어로, GE 애드티브와의 파트너십 하에 개발될 예정임.
     * Boom이 새로운 항공기와 엔진을 설계, 시제품 제작, 테스트, 인증, 생산으로 이동하는 전 과정을 향후 5년 내에 완료할 수 있을지 의문을 제기함. 이러한 노력이 결실을 맺지 못할 가능성이 높아 보이지만, 많은 돈을 쓰는 재미있는 방법으로 보임.
     * 초음속 비행은 단순히 빠르게 이동하고자 하는 문제에 많은 제트 연료를 사용하는 것인지, 이 항공기와 산업의 개발로부터 새로운 통찰력과 파생 기술을 기대할 수 있는지에 대한 의문을 제기함.
     * 이 회사가 군사적 측면에서 핵심 가치를 가지고 있으며, 초음속 기술 개발이 미사일, 드론, 전투기 응용 프로그램에 실질적인 가치를 창출할 것이라고 생각함.
     * 이 회사가 많은 사람들에게 불쾌감을 주는 이유는, 부유한 사람들과 국가들이 인류 전체에 해를 끼치는 낭비적이고 극도로 성가신 기술에 많은 돈을 지불할 것이라는 독특한 통찰력 외에는 보이지 않기 때문임.
     * 홍보 영상이 아름답게 제작되었지만, 여러 번의 촬영, 드론 샷, 반응 샷, 조종석에서의 어깨 너머 샷 등이 포함되어 있으며, 순수 비행 샷이 충분하지 않음.
     * XB-1은 모든 테스트 목표를 달성했으며, 7,120피트의 고도와 238노트(273마일)의 속도에 안전하고 성공적으로 도달함. 이는 음속(760마일)에는 조금 못 미치는 속도임.
     * 보잉의 안전 명성이 최근에 손상되었지만, 'Boom'이라는 이름의 항공기에 탑승하는 사람들이 얼마나 될지에 대한 의문을 제기함.
     * 증강 현실 디스플레이, 탄소 섬유 프레임, 초음속 흡입구 등의 새로운 기술이 포함되어 있지만, 1950년대에 설계된 J85-15 제트 엔진을 사용함.
     * 초음속 여행의 아이디어를 좋아하지만, 항공기에서 발생할 수 있는 많은 문제들과 안전이 시행착오의 결과라는 점, 그리고 보잉의 문제가 안전한 제조가 얼마나 취약할 수 있는지를 보여주는 점을 고려할 때, 스타트업이 만든 항공기의 안전성에 대한 우려를 표함.
     * 상업적 성공을 위해 가장 중요한 부분 중 하나인 동력원에 대한 소식이 있는지 궁금함. GE가 이전에 이 부분에서 실패한 것으로 알려져 있음에도 여전히 그들의 웹사이트에 언급되고 있음.
     * 0.1%의 부유한 사람들은 시간이 많으므로, 왜 그들은 초호화 크루즈 여행을 하지 않는지에 대한 의문을 제기함.
     * 블로그 게시물은 XB-1이 무엇인지 또는 그 목적이 무엇인지 설명하지 않았지만, 위키피디아 페이지가 도움이 됨.
"
"https://news.hada.io/topic?id=13949","해커들, 3M 호텔 키카드 자물쇠를 개방할 수 있는 방법 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   해커들, 3M 호텔 키카드 자물쇠를 개방할 수 있는 방법 발견

해커들, 수백만 개의 호텔 키카드 자물쇠를 몇 초 안에 열 수 있는 방법 발견

     * 해커들이 Saflok 브랜드의 호텔 키카드 자물쇠를 몇 초 만에 열 수 있는 취약점을 발견함.
     * 이 취약점은 전 세계 호텔 3백만 개의 문에 영향을 미칠 수 있으며, 해당 자물쇠를 제조하는 스위스 회사 Dormakaba가 수정 조치를 제공하고 있음.
     * 수정 작업은 몇 달에서 몇 년이 걸릴 수 있으며, 일부 호텔에는 더 오래 걸릴 수 있음.

Unsaflok 기법 공개

     * 연구자들은 Unsaflok이라는 기법을 통해 Dormakaba의 Saflok 브랜드 RFID 기반 키카드 자물쇠를 쉽게 열 수 있음을 밝힘.
     * 이 기법은 Dormakaba의 암호화와 사용하는 RFID 시스템인 MIFARE Classic의 취약점을 이용함.
     * 해커들은 호텔에서 얻은 어떤 키카드든 사용하여 특정 코드를 읽고, $300짜리 RFID 읽기/쓰기 장치로 자신들의 키카드 두 개를 작성하여 자물쇠를 열 수 있음.

Dormakaba의 대응

     * Dormakaba는 2022년 11월에 연구자들로부터 기술적인 세부사항을 전달받고, 취약점을 인지한 호텔들에게 수정을 돕고 있음.
     * 지난 8년간 판매된 Saflok 시스템의 경우, 개별 자물쇠를 교체할 필요 없이 프론트 데스크 관리 시스템을 업데이트하거나 교체하고, 기술자가 각 문마다 재프로그래밍을 수행하면 됨.
     * 그러나 현재까지 36%의 Saflok만이 업데이트되었으며, 완전한 수정이 이루어지기까지는 몇 달 더 걸릴 것으로 예상됨.

취약점의 세부사항

     * 연구자들은 Dormakaba의 키카드에 쓸 수 있는 두 가지 취약점을 발견함: 하나는 키카드에 데이터를 쓸 수 있게 해주고, 다른 하나는 Saflok 자물쇠를 열기 위해 어떤 데이터를 써야 하는지 알려줌.
     * 연구자들은 Dormakaba의 프론트 데스크 소프트웨어를 역공학하여 카드에 저장된 모든 데이터를 이해하고, 호텔의 재산 코드와 각 방의 코드를 추출하여 자신들의 값을 만들고 Dormakaba 시스템처럼 암호화할 수 있게 됨.

호텔 투숙객의 대응

     * 호텔 투숙객들은 취약한 자물쇠를 인식할 수 있으며, NFC Taginfo 앱을 사용하여 키카드를 확인함으로써 자물쇠가 업데이트되었는지 확인할 수 있음.
     * 만약 자물쇠가 여전히 취약하다면, 방에 귀중품을 두지 않고, 방 안에 있을 때는 문에 체인을 걸 것을 권장함.

GN⁺의 의견

     * 이 기사는 호텔 투숙객들과 호텔 산업에 중요한 보안 문제를 제기함. 호텔 투숙객들은 자신들이 머무는 방의 자물쇠가 안전한지에 대해 더욱 주의를 기울여야 함.
     * 취약점이 발견되었다는 사실은 호텔 산업에게 기존의 보안 시스템을 재검토하고 필요한 경우 업그레이드를 실시할 것을 촉구함.
     * 이러한 취약점은 물리적인 보안뿐만 아니라 사이버 보안의 중요성을 강조함. 호텔들은 IT 인프라를 강화하고 정기적인 보안 점검을 수행해야 함.
     * 비슷한 기능을 제공하는 다른 보안 제품이나 프로젝트로는 Onity의 자물쇠 시스템이 있으나, 이전에도 취약점이 발견되어 문제가 되었던 전례가 있음.
     * 새로운 기술이나 보안 시스템을 도입할 때는 이러한 취약점을 염두에 두고, 시스템의 보안을 지속적으로 강화하는 것이 중요함.

        Hacker News 의견

     * 한 회사에서 다양한 ID 표준을 지원하는 출입 통제 및 통신 시스템을 개발하는 직원의 의견:
          + 대부분의 고객이 비용이 저렴하고 운영이 쉬운 가장 불안전한 식별자를 계속 사용함.
          + 설치된 장치들이 제대로 유지되지 않으며, 유지보수 비용이 들기 때문임.
          + 모든 장비가 네트워크를 통해 원격으로 업데이트 가능한 것은 아님.
          + 심지어 카드가 암호화되어 있어도, 대부분의 경우 Wiegand 프로토콜을 통해 컨트롤러에 연결되어 있어 데이터 암호화를 제공하지 않음.
     * 한 건물에 거주하는 사람의 경험:
          + RFID 키를 사용하는 Scantron 도어락이 설치되어 있으나, MiFare Classic의 약한 암호화로 인해 마스터키 생성이 가능했음.
          + 문제를 이해시키기 위해 기자와 많은 이메일 및 통화가 필요했으며, 결국 더 나은 암호화 스킴으로 잠금장치를 업그레이드하고 키를 재발급함.
     * 연구에 참여한 사람의 의견:
          + 연구에 대한 질문에 답변할 준비가 되어 있음.
          + 연구 결과는 unsaflok.com에서 확인할 수 있음.
     * 호텔에서 발생할 수 있는 심각한 취약점에 대한 의견:
          + 한 키카드만 읽으면 해당 부동산의 모든 문에 대한 공격을 수행할 수 있음.
     * Dormakaba의 대응에 대한 의견:
          + Dormakaba가 이 문제를 최우선으로 삼지 않은 것인지, 아니면 설치된 Safloks의 2/3가 무료 수정을 제때 받지 않은 이유가 있는지 의문.
          + Dormakaba는 고객과 파트너 모두 보안을 매우 중요하게 생각하며 책임감 있는 방식으로 이 문제를 해결할 것이라고 확신함.
     * 호텔 카드 키 작동 방식에 대한 오해:
          + 호텔 체크인 시 무작위로 선택된 카드가 방에 연결되어 주어지는 것으로 생각했으나, 실제로는 암호화나 카드에 정보를 쓰는 것보다 더 복잡한 작업이 필요함.
     * 호텔에서의 안전을 위한 개인적인 조치:
          + 호텔 문이 외부에서 열릴 수 있도록 설계되었기 때문에, 문을 고정시키는 도어 재머를 사용함.
     * 물리적 보안의 중요성:
          + 내부에서 문을 잠글 수 있는 스트랩을 구매할 것을 권장함.
     * RFID와 NFC에 대한 인식:
          + RFID와 NFC가 마그네틱 스트라이프와 바코드의 새로운 형태로, 사람들은 이 기술들이 보이지 않기 때문에 안전하다고 생각하지만, 실제로는 기계가 읽을 수 있는 숫자에 불과함.
"
"https://news.hada.io/topic?id=14002","Windows NT의 'Format Dialog' 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Windows NT의 'Format Dialog' 기능

        Hacker News 의견

     * 한 해커뉴스 사용자는 Windows NT4 소스 코드를 통해 1995년 2월 13일에 작성된 포맷 다이얼로그 코드 일부가 실제로 존재함을 확인함. NT4는 FAT32를 지원하지 않았으며, 64K 클러스터를 허용해 대부분의 시스템보다 더 큰 4GB FAT 볼륨을 지원했음. 클러스터 크기는 볼륨의 크기에 따라 결정되었으며, FAT32 볼륨의 32GB 제한은 내부 포맷 함수에 있었고, 사용자 인터페이스에는 없었음. Windows 2000에서는 32GB 이상의 드라이브를 FAT32로 포맷하려고 하면 실패하게 되어 있음. 이러한 제한은 명령줄의 format.com에서도 공유되며, 같은 함수를 사용함. 이 사용자는 어떤 사람들이 자신의 역할을 과장하는 경향이 있다고 지적함.
     * 또 다른 사용자는 Dave Plummer를 칭찬하며, 그가 Windows의 가장 중요한 커널 중 하나를 만든 것에 대해 캐주얼하게 글을 쓴 것을 좋아함. Plummer는 Windows 작업 관리자, Space Cadet Pinball의 Windows NT 포트, Windows의 Zip 파일 지원, Amiga의 HyperCache 등을 만들었으며, 소프트웨어 엔지니어링 분야에서 여러 특허를 받음.
     * 한 사용자는 임시 해결책이 문제를 해결하는 것처럼 보일 수 있지만, 더 나은 해결책의 우선순위를 낮추게 되어 결국 임시 해결책이 영구적으로 사용되는 일반적인 함정을 지적함.
     * 다른 사용자는 디스크 포맷에 관한 옵션과 선택을 종이에 적어두었던 경험을 공유하며, 이것이 우아하지는 않았지만 우아한 사용자 인터페이스가 도착할 때까지 충분했다고 말함. 이 사용자는 간단한 인터페이스가 필요한 모든 옵션을 제공하므로 더 우아한 인터페이스가 무엇을 포함해야 하는지에 대해 의문을 제기함.
     * 또 다른 사용자는 임시 솔루션이 여전히 사용되고 있으며, HP USB Disk Storage Format Tool과 같은 다른 소프트웨어에 영감을 주었다고 언급함.
     * 한 사용자는 현재의 인터페이스가 완벽하다고 생각하며, ""우아한 UI""로 대체되지 않기를 바람.
     * 다른 사용자는 임시와 영구적인 솔루션의 구분이 없으며, 단지 좋은 솔루션과 나쁜 솔루션만이 존재한다고 주장함. 좋은 솔루션은 충분히 좋기 때문에 지속되며, 나쁜 솔루션도 일정 기간 동안 유일한 선택지일 경우 고착될 수 있음.
     * 한 사용자는 ""충분히 좋은"" 임시 솔루션에 대한 경고를 공유하며, 인턴이 작성한 핵심 로깅 컴포넌트가 POC(개념 증명)라는 단어를 포함하고 있고, 문제를 해결하는 데 필요한 예산과 노력이 문제를 초과할 때까지 아무도 그 문제를 실제로 인식하지 못했다고 언급함.
     * 또 다른 사용자는 유럽의 큰 은행에서 일하면서, 생산 환경이 이러한 '임시 솔루션'으로 가득 차 있었으며, 이러한 솔루션들은 대부분 이전의 임시 해결책에서 발생한 주요 문제에 대한 빠른 수정으로 만들어졌다고 말함.
     * 마지막으로 한 사용자는 XP가 가장 인기 있는 운영 체제였을 때 32GB 제한을 제거하는 패치를 본 적이 있다고 언급함.
"
"https://news.hada.io/topic?id=14016","애플 WWDC, 6/10~14 온라인으로 무료 개최","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플 WWDC, 6/10~14 온라인으로 무료 개최

     * 5일간 온라인으로 개최하며, 애플 개발자 앱/웹사이트/유튜브 채널로 세션 감상 가능
     * 6/10일 하루만 Apple Park에서 오프라인 스페셜 이벤트 개최. 신청 가능

발표 예상 ( MacRumors & MacWorld 참고 )

     * 소프트웨어
          + iOS 18 with AI focus
          + iPadOS 18
          + macOS 15
          + watchOS 11
          + tvOS 18
          + visionOS 2
          + HomePod Software 18
          + (아마도) 생성형 AI 티저?
     * 하드웨어
          + Mac Pro
          + Mac Studio
          + iMac

   이번에도 생성형 AI 얘기를 안하면 애플 주가는 더 떨어질 듯..
"
"https://news.hada.io/topic?id=14012","페이지 넘기기: nf_tables에서 발견된 새로운 리눅스 취약점 및 익스플로잇 기법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            페이지 넘기기: nf_tables에서 발견된 새로운 리눅스 취약점 및 익스플로잇 기법

0. 읽기 전에

     * 이 블로그 포스트는 리눅스 커널 취약점 연구를 하고자 하는 미래의 시간 여행자들을 위한 것으로, 초보자들이 연구 워크플로우를 배우고 경험 많은 연구자들이 새로운 기술을 배울 수 있도록 작성됨.
     * 블로그 포스트는 연구 논문 형식을 띠고 있어, 큰 분량에도 불구하고 쉽게 스캔하고 지식을 추출할 수 있도록 구성됨.
     * 블로그 포스트를 효율적으로 읽는 방법으로, 개요 섹션을 읽고, 화면을 나눠서 읽고 검색하며, 버그 섹션으로 건너뛰어 버그 작동 방식을 이해하고, 개념 증명 섹션을 거쳐 익스플로잇을 살펴보는 것이 제안됨.

1. 개요

     * 이 블로그 포스트에서는 nf_tables에서 발견된 0-day double-free 버그를 이용하여 강화된 리눅스 커널(예: KernelCTF 완화 인스턴스)을 93%-99%의 성공률로 익스플로잇하는 새로운 기술을 소개함.
     * 이 익스플로잇은 nf_tables가 활성화되어 있고 비특권 사용자 네임스페이스가 활성화된 상태에서만 작동하며, 사용자 영역에서 커널 공간을 거울처럼 반영하는 KSMA(커널-스페이스 미러링 어택)를 수행함.
     * Dirty Pagedirectory 기술을 사용하여 물리적 주소에 대한 무제한 읽기/쓰기 권한을 얻을 수 있으며, 이는 페이지 테이블 혼란을 통해 실현됨.

2. 배경 정보

     * nf_tables는 리눅스 커널의 인트리 모듈 중 하나로, 최근 버전의 iptables의 백엔드로 사용됨.
     * iptables는 방화벽 도구로, 패킷이 방화벽을 통과할지 결정하기 위해 상태 머신과 사용자가 지정한 규칙을 사용함.
     * Netfilter 판결은 특정 패킷이 방화벽을 통과할지에 대한 Netfilter 규칙 세트의 결정으로, 패킷을 드롭하거나 수락하는 등의 결정을 내림.
     * sk_buff 구조체는 네트워크 데이터(예: IP 패킷, 이더넷 프레임 등)를 설명하는 데 사용되며, sk_buff->head 객체는 실제 패킷 내용을 포함함.
     * IPv4의 패킷 분할 기능은 패킷을 여러 IP 조각으로 전송할 수 있게 해주며, 리눅스 커널은 모든 조각을 동일한 레드-블랙 트리에 저장함.

GN⁺의 의견

     * 이 블로그 포스트는 리눅스 커널의 취약점을 연구하고자 하는 사람들에게 매우 유용한 정보를 제공함. 특히 nf_tables와 관련된 취약점을 이해하고 이를 익스플로잇하는 방법을 배울 수 있음.
     * 제시된 익스플로잇 기술은 실제 환경에서의 보안 연구에 중요한 기여를 할 수 있으며, 이러한 기술을 통해 보안 전문가들은 시스템의 취약점을 더 잘 이해하고 방어할 수 있음.
     * 하지만, 이러한 익스플로잇 기술이 악의적인 목적으로 사용될 가능성도 있어, 이를 공유함으로써 발생할 수 있는 윤리적 문제에 대해 고려해야 함.
     * 리눅스 커널의 보안을 강화하기 위해 커뮤니티는 지속적으로 취약점을 발견하고 패치하는 작업을 수행해야 하며, 이 블로그 포스트는 그러한 노력의 일환으로 볼 수 있음.
     * 이 기술이나 유사한 기술을 사용하여 보안 연구를 수행하는 경우, 연구자는 책임감 있는 공개 정책을 따르고 취약점이 널리 악용되기 전에 패치가 배포될 수 있도록 협력해야 함.

        Hacker News 의견

     * CVE-2024-1086에 대한 증명 개념 익스플로잇이 공개되었음. 리눅스 커널 v5.14부터 v6.6까지의 버전이 영향을 받으며, v6.4부터 v6.6까지는 CONFIG_INIT_ON_ALLOC_DEFAULT_ON 커널 설정 변수에 따라 다름. 자세한 정보는 README.md를 확인할 것. 해당 버그는 2024년 2월에 패치되었으며, 리눅스 기기 업데이트를 권장함.
     * 패치 내용 중 이전 커밋을 되돌리는 부분이 있으며, 해당 커밋이 왜 이루어졌는지 명확하지 않음. 이에 대한 역사를 파헤친 사람이 있는지 궁금함.
     * 이 익스플로잇은 비특권 사용자 네임스페이스에 대한 접근을 기반으로 함: sysctl kernel.unprivileged_userns_clone = 1. 이 설정은 Debian/Ubuntu 및 Arch Linux 커널의 기본값임. 해당 설정이 필요 없다면 비활성화하는 것이 좋음.
     * 보안 블로그 글 작성 시, 독자의 배경 지식을 얼마나 가정할지에 대한 지속적인 고민이 있음. 목표 독자를 정하고, 충분한 배경 정보를 제공하는 것은 쉽지 않은 일임. 이 글은 연구를 시작하는 이들에게 유용한 지침이 될 것임.
     * 기본적으로 비특권 사용자 네임스페이스가 활성화된 이유는 무엇인지, 사용자에게 iptables 등의 실행 능력을 기본적으로 부여하는 이유에 대한 의문 제기.
     * 현대의 보안 조치들, 예를 들어 ASLR 등이 있는데도 이러한 익스플로잇이 어떻게 가능한지에 대한 의문. 대학 과정에서 다양한 버그가 있는 바이너리를 이용한 실습을 통해, 실제 환경에서의 익스플로잇 개발이 얼마나 어려운지 경험함.
     * 취약한 Debian 시스템에서 익스플로잇을 실행해보았으나, 권한 상승은 일어나지 않았고, 두 번째 실행에서 시스템이 완전히 멈춤. 패치를 진행하는 것이 중요함.
     * 현재 커널 설정을 /boot/config 또는 /proc/config.gz 파일에서 확인할 수 있음.
     * 우분투에 따르면, 모든 LTS 릴리스에 영향을 미치며, 패치된 최신 커널에서는 수정됨. Xenial과 Bionic은 확장 지원을 받는 사용자들을 위한 정보임.
     * CONFIG_INIT_ON_FREE_DEFAULT_ON은 익스플로잇을 방지하지만, 배포판에서는 기본적으로 빌드하지 않음. 커널의 강화가 얼마나 중요한지 보여주는 좋은 예임.
"
"https://news.hada.io/topic?id=13947","호주의 거의 모든 법률, 규정 및 사례를 매핑하는 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    호주의 거의 모든 법률, 규정 및 사례를 매핑하는 프로젝트

   이 요청은 기사의 내용을 요약하는 것이 아니라, 특정 웹사이트의 내용을 요약하는 것으로 보입니다. 그러나 제공된 텍스트는 웹사이트의 실제 콘텐츠보다는 브라우저 업데이트 알림과 Cloudflare의 보안 및 성능 관련 메시지로 보입니다. 따라서 요약할 본문 내용이 없습니다.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자는 인터넷의 맵을 만드는 아이디어에 매료되어 있으며, 이미 여러 맵을 제작한 경험이 있음.
          + 음악-맵(Music-Map)을 만든 것으로 유명하며, 웹 맵(web-map.com)을 만들 계획을 가지고 있음.
          + 관련 웹사이트를 빠르게 찾는 알고리즘과 커스텀 크롤러를 실험했으며, 프로젝트의 실현 가능성을 확인함.
          + 그러나 이미 여러 실험적 맵을 운영 중이고, 모든 것의 맵을 만드는 사업 모델을 아직 구상 중임.
     * 두 번째 댓글 요약:
          + 호주 사례법을 연속체로 보는 것은 매력적이지만, 맵이 실제 영역을 완벽히 대표하지는 않는다는 점을 강조함.
          + 맵에서 얻은 지식 구조가 실제 문서의 합이 편리한 연속체로 나타나지 않을 수도 있음.
          + 프로젝트 문서화 방식이 뛰어나며, 호주 법률 분야에 새로운 시각을 제공함에 감사를 표함.
     * 세 번째 댓글 요약:
          + 법률 전문가는 아니지만 많은 법률 교과서를 읽은 댓글 작성자는 사례법과 법령이 두 개의 명확한 클러스터로 형성되는 것이 이상하다고 느낌.
          + 사례법은 본질적으로 법령의 불명확한 의미를 채우는 것이므로, 두 법률 형태가 분리되어 나타나는 것은 도메인 모델링 오류로 보임.
          + 텍스트 유사성 측정을 도메인 모델을 고려하지 않고 데이터 세트에 단순히 적용했을 때 예상되는 결과라고 생각함.
     * 네 번째 댓글 요약:
          + 호주 법률 시스템과 관련된 문제를 다루며, 처음에는 자기 대리로 진행했지만 최근에는 변호사와 함께 일함.
          + 여러 법률을 직접 읽고, 법률과 사례법 사이의 보이지 않는 벽을 경험함.
          + 이 프로젝트가 자신의 관심사와 매우 관련이 있어 감사함을 표하며, 더 일찍 게시되었으면 더 도움이 되었을 것이라는 아쉬움을 표함.
     * 다섯 번째 댓글 요약:
          + 많은 영연방 국가들이 사례법, 행정법, 입법부가 통과시킨 법률에 대한 공식적인 법전화가 없음을 지적함.
          + 미국은 공식적인 미국 법전과 주 법전을 가지고 있지만, 캐나다는 일부 법전화가 있으나 모든 법률이 하나의 법전에 조직되어 있지는 않음.
          + 영국은 잉글랜드와 웨일즈에서는 법전화가 없는 것으로 보이며, 홍콩은 기본법과 조례로 일부 법전화가 있음.
          + 호주가 연방 또는 주 수준에서 법전화를 가지고 있는지에 대한 질문을 함.
     * 여섯 번째 댓글 요약:
          + 모바일에서 인터랙티브 비주얼을 스크린샷으로 교체해준 것에 대해 감사함을 표함.
          + 휴대폰으로 읽기에 훨씬 나은 경험을 제공한다고 함.
     * 일곱 번째 댓글 요약:
          + 글쓴이의 데이터 분석과 기술적 과정 설명에 대해 감사함을 표함.
          + 매우 좋은 글을 작성했다고 평가함.
     * 여덟 번째 댓글 요약:
          + 작년에 영국의 사례법과 법률을 '맵 아웃'하는 비슷한 아이디어를 가졌으나, 일상 생활에 밀려 미완성 프로젝트로 남게 됨.
          + 이 글을 읽고 영감을 받아 다시 시도해볼 생각을 가지게 됨.
     * 아홉 번째 댓글 요약:
          + 인터넷 전체를 매핑하는 것은 2000년 Kumar 등의 연구로 거슬러 올라감.
          + 초기 연구들은 인터넷의 링크 구조를 보고, 텍스트 유사성이 아닌 다른 측면을 조사함.
     * 열 번째 댓글 요약:
          + 댓글 작성자는 비슷한 데이터 세트에서 이 프로젝트를 재현할 계획임.
          + 도메인 URL만으로 색상 라벨링을 해서, 데이터 수집 웹사이트의 다른 형식 특성만으로 맵의 지형이 얼마나 구동되는지 보고 싶다고 함.
"
"https://news.hada.io/topic?id=13978","transqlate - 모든 SQL을 PostgreSQL Dialect로 변환(Transpile)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         transqlate - 모든 SQL을 PostgreSQL Dialect로 변환(Transpile)

     * 오라클 SQL(Oraclisms)을 PostgreSQL 구문으로 변경
     * ID 핸들링
     * 공백, 대소문자 및 주석 보존
     * 훌륭한 에러 리포팅
     * 스크립트 또는 모든 표현식 구문을 분석
     * 구문 강조 표시를 지원하는 CLI 또는 Go API로 제공
     * Simon Holywell 의 SQL Style Guide를 따름

  Hacker News 의견

     * 다양한 SQL 변환 도구들이 있지만, 대부분 제대로 작동하지 않음.
     * 다른 SQL 방언을 위한 도구로 sqlglot 추천
          + SQL을 일관된 방식으로 렌더링하거나, 지속적 통합(CI)에서 SQL 비즈니스 로직을 테스트하거나, 방언 특화 최적화를 위한 AST 변환을 적용하는 데 도움이 될 수 있음
     * sqlglot을 사용한 개인적인 경험 공유
          + 과거에 직장에서 PoC(Proof of Concept) 작업 중 Postgres SQL 쿼리를 API에 적용해야 하는 상황이 있었는데, API 응답을 pandas dataframe으로 변환하고, sqlglot을 사용해 Postgres 방언에서 duckdb 방언으로 쿼리를 변환한 후, duckdb로 pandas dataframe을 쿼리하고 결과를 json으로 변환해 사용자에게 반환했음
     * 여러 도구들이 비슷한 기능을 시도하고 있으며, CompilerWorks라는 회사가 다양한 SQL 방언을 변환하는 도구를 가지고 있었는데, 구글에 인수되었음
     * 소스 코드에서 Oracle 지원이 명확히 나타나 있지만, 현재 지원되는 데이터베이스가 오직 Oracle뿐인지, Microsoft SQL Server에 대한 지원 계획이 있는지 궁금
"
"https://news.hada.io/topic?id=14031","DBRX - 새로운 최첨단(SOTA) 오픈새로운 최첨단(SOTA) 오픈 LLM

     * Databricks가 새로운 오픈, 범용 LLM인 DBRX를 공개
     * 표준 벤치마크에서 기존 오픈 LLM을 능가하는 새로운 최고 수준이며, 이전에 폐쇄된 모델 API에 제한되었던 기능을 오픈 커뮤니티와 기업에 제공
          + GPT-3.5를 능가하며 Gemini 1.0 Pro와도 경쟁 가능
          + 코드에서도 CodeLLaMA-70B와 같은 전문 모델을 능가
     * DBRX는 훈련 및 추론 성능에서 현저한 개선을 보임
          + 세분화된 전문가 혼합(MoE) 아키텍처를 사용하여 효율성을 향상
          + 추론 속도는 LLaMA2-70B보다 최대 2배 빠르며, Grok-1 대비 크기가 약 40% 작음

DBRX의 구조

     * DBRX는 트랜스포머 기반의 디코더 전용 대규모 언어 모델(LLM)로, 다음 토큰 예측을 사용하여 훈련
     * 132B의 총 매개변수 중 36B가 활성화되어 있으며, 12T 토큰의 텍스트와 코드 데이터로 사전 훈련
     * DBRX는 다른 오픈 MoE 모델에 비해 더 세분화되어 있으며, 이는 모델 품질을 향상시키는 것으로 나타남

벤치마크에서의 품질

     * DBRX Instruct는 복합 벤치마크, 프로그래밍 및 수학 벤치마크, MMLU에서 선도적인 모델임
     * DBRX Instruct는 표준 벤치마크에서 모든 채팅 또는 지시 사항을 조정한 모델을 능가함

폐쇄 모델과의 비교

     * DBRX Instruct는 GPT-3.5를 능가하고 Gemini 1.0 Pro 및 Mistral Medium과 경쟁력이 있음
     * DBRX Instruct는 일반 지식, 상식 추론, 프로그래밍 및 수학적 추론에서 GPT-3.5를 능가함

장문 문맥 작업 및 RAG에서의 품질

     * DBRX Instruct는 최대 32K 토큰 문맥 창으로 훈련됨.
     * DBRX Instruct는 장문 문맥 벤치마크에서 GPT-3.5 Turbo 및 GPT-4 Turbo API의 최신 버전과 비교됨.
     * DBRX Instruct는 모든 문맥 길이와 시퀀스의 모든 부분에서 GPT-3.5 Turbo보다 더 나은 성능을 보임.

훈련 효율성

     * DBRX MoE 아키텍처와 전체 훈련 파이프라인은 훈련 효율성을 검증함.
     * DBRX MoE 아키텍처는 훈련에 필요한 FLOP를 줄이면서 높은 품질을 달성함.

추론 효율성

     * DBRX는 NVIDIA TensorRT-LLM을 사용하여 최적화된 추론 인프라에서 높은 추론 처리량을 보임.
     * MoE 모델은 일반적으로 총 매개변수 수에 비해 추론 속도가 빠름.

DBRX 구축 방법

     * DBRX는 NVIDIA H100을 사용하여 훈련되었으며, Databricks의 도구를 사용하여 구축됨.
     * DBRX는 Databricks의 MPT 및 Dolly 프로젝트의 연속선상에서 개발되었으며, 고객과 함께 수천 개의 LLM을 훈련함.

Databricks에서 DBRX 시작하기

     * Databricks Mosaic AI Foundation Model API를 통해 DBRX를 쉽게 사용할 수 있음.
     * DBRX는 Databricks Marketplace에서 다운로드하여 모델 서빙에 배포할 수 있음.

결론

     * Databricks는 모든 기업이 GenAI의 세계에서 자신의 데이터와 운명을 통제할 수 있어야 한다고 믿음.
     * DBRX는 Databricks의 차세대 GenAI 제품의 핵심 요소임.

기여

     * DBRX 개발은 Mosaic 팀이 주도하였으며, Databricks의 다양한 부서에서 협력하여 완성됨.

GN⁺의 의견

     * DBRX는 기존의 GPT 모델들과 경쟁할 수 있는 새로운 오픈소스 언어 모델로, 특히 코드 생성 및 프로그래밍 작업에서 뛰어난 성능을 보여줄 것으로 기대됨.
     * MoE 아키텍처를 사용함으로써, DBRX는 추론 속도와 모델 크기 측면에서 효율성을 크게 향상시킨 것으로 보임. 이는 자원 제한이 있는 환경에서도 고성능 모델을 활용할 수 있게 해줄 수 있음.
     * DBRX의 오픈소스 접근 방식은 연구자와 개발자가 모델을 자유롭게 실험하고 개선할 수 있는 기회를 제공함. 이는 AI 커뮤니티에 큰 기여가 될 수 있음.
     * DBRX가 제공하는 API와 통합 도구는 기업이 자체적인 언어 모델을 더 쉽게 개발하고 배포할 수 있도록 지원함. 이는 기업이 AI 기술을 활용하여 경쟁력을 강화하는 데 도움이 될 것임.
     * DBRX의 출시는 오픈소스 언어 모델의 발전에 중요한 이정표가 될 수 있으며, 향후 이 모델이 어떻게 발전하고 다양한 분야에 적용될지 지켜보는 것이 흥미로울 것임.

        Hacker News 의견

     * 현재 주목할 만한 모델들:
          + Miqu 70B: 일반 대화용
          + Deepseed 33B: 코딩용
          + Yi 34B: 32K 컨텍스트 이상의 대화용
          + 이들 모델의 파인튜닝 버전들도 존재
          + 34B-70B 범위의 다른 모델들도 있으나, Qwen 모델은 인상적이지 않음
          + Llama 70B, Mixtral, Grok 모델은 차트에서 보이지만 최신 기술(SOTA)로 보기 어려움, 단 Mixtral은 배치 사이즈 1의 속도에서 뛰어남
     * 모델 카드 및 리소스 요구 사항:
          + 모델은 약 264GB의 RAM 필요
          + 매개변수 수 대신 (GPU RAM + CPU RAM) 총량과 평가 메트릭을 추적하는 전환 시점에 대한 궁금증
          + 예를 들어, float32를 사용하는 7B 매개변수 모델이 float4를 사용하는 동일 매개변수 모델보다 성능이 우수할 가능성이 높음
          + 한 GPU에 맞도록 최근 출시된 우수 모델을 양자화하는 사례들이 있으나, 양자화된 모델은 원본과 다른 모델이므로 메트릭을 다시 실행해야 함
     * 대규모 언어 모델(LLM)의 수렴성:
          + 모든 LLM 모델이 동일한 데이터로 훈련될 때 특정 지점으로 수렴한다는 증거
          + 작업 성능에 대한 주장은 그저 주장일 뿐, 다음 Llama나 Mixtral 반복은 수렴할 것
          + LLM은 리눅스/윈도우 또는 iOS/안드로이드처럼 기초 모델에서 큰 차이가 없이 진화하는 것으로 보임
     * 혼합 양자화 및 MoE 오프로딩 기대:
          + Mixed Quantization with MQQ와 MoE Offloading을 통해 10GB VRAM의 rtx3080에서 Mistral 8x7B를 실행할 수 있었음
          + 이 방법은 DBRX에도 적용 가능하며 VRAM 요구량을 크게 줄일 수 있음
     * Databricks의 비즈니스 이익:
          + Databricks가 오픈 LLM에 수백만 달러를 투자함으로써 얻을 비즈니스 이점에 대한 호기심
     * 차트 비교 및 평가:
          + LLaMa2의 Human Eval 점수를 차트에 넣고 Code Llama Instruct 70b와 비교하지 않는 것은 차트 범죄
          + DBRX는 Code Llama Instruct의 67.8을 크게 앞서지는 않지만 여전히 뛰어남
     * 새 GPU 구매 계획 및 VRAM 요구 사항:
          + 16GB VRAM GPU가 70GB 모델을 잘 실행할 수 있는지, 12GB VRAM GPU보다 눈에 띄게 더 잘 실행하는지에 대한 질문
          + Ollama는 로컬에서 잘 실행되며, mixtral(7B, 3.4GB)은 1080ti에서 잘 작동하지만, 24.6GB 버전은 약간 느리고 시작 시간이 눈에 띄게 걸림
     * 베이스 모델 승인에 대한 불만:
          + 베이스 모델에 대한 승인이 매우 개방적이지 않은 느낌
          + 많은 사람들이 다운로드 기회를 기다리고 있는 반면, instruct 모델은 즉시 승인됨
          + 베이스 모델은 파인튜닝에 더 흥미로움
     * 훈련 효율성 개선:
          + LLM 사전 훈련 파이프라인이 지난 10개월 동안 거의 4배 더 계산 효율적이 되었다는 내용
          + 훈련 비용이 매우 높기 때문에 이러한 개선은 환영할 만하며, 무어의 법칙을 따를 것으로 기대됨
     * 코딩 평가의 오염 가능성:
          + 훈련 데이터에 의해 코딩 평가가 오염될 수 있음
          + 이러한 점수 인플레이션을 피하기 위한 표준 방법에 대한 질문
"
"https://news.hada.io/topic?id=13984","Monolith - 웹 페이지를 단일 HTML 파일로 저장하는 CLI 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Monolith - 웹 페이지를 단일 HTML 파일로 저장하는 CLI 도구

     * 웹 페이지를 단일 HTML 파일로 번들링
     * 기존의 ""페이지 저장"" 기능과 달리, monolith는 대상 문서뿐만 아니라 CSS, 이미지, 자바스크립트 애셋을 한 번에 포함시켜 저장
     * 모든 애셋을 데이터 URL로 내장하여, 네트워크 연결이 없는 상태에서도 인터넷에서와 똑같이 페이지를 렌더링할 수 있게 함
     * Rust로 작성되어 맥/윈/리눅스 모두 설치 가능: cargo/brew/choco/snap/apk..

사용 방법

     * 명령어 예시: monolith https://lyrics.github.io/db/P/Portishead/Dummy/Roads/ -o portishead-roads-lyrics.html
     * 파이프를 통한 사용 예시: cat index.html | monolith -aIiFfcMv -b https://original.site/ - > result.html

옵션

     * -a: 오디오 소스 제외
     * -b: 사용자 정의 base URL 사용
     * -B: 특정 도메인에서 자산 검색 금지
     * -c: CSS 제외
     * -C: file에서 쿠키 읽기
     * -d: 지정된 domain(s)에서만 자산 검색 허용
     * -e: 네트워크 오류 무시
     * -E: 사용자 정의 encoding으로 문서 저장
     * -f: 프레임 생략
     * -F: 웹 폰트 제외
     * -h: 도움말 정보 출력
     * -i: 이미지 제거
     * -I: 문서 격리
     * -j: 자바스크립트 제외
     * -k: 유효하지 않은 X.509 (TLS) 인증서 수락
     * -M: 타임스탬프 및 URL 정보 추가 안 함
     * -n: NOSCRIPT 요소의 내용 추출
     * -o: 출력을 file로 작성 (STDOUT을 위해 “-” 사용)
     * -s: 조용한 모드
     * -t: network request timeout 조정
     * -u: 사용자 정의 User-Agent 제공
     * -v: 비디오 제외

도메인 화이트리스팅 및 블랙리스팅

     * -d 및 -B 옵션을 통해 애셋을 검색할 수 있는 도메인을 제어할 수 있음.

동적 콘텐츠

     * Monolith에는 자바스크립트 엔진이 없어 초기 로드 후 데이터를 검색하고 표시하는 웹사이트는 추가 도구가 필요할 수 있음.
     * 예를 들어, Chromium(Chrome)을 사용하여 이러한 페이지에 대한 사전 처리기로 작동시킬 수 있음.

프록시 설정

     * https_proxy, http_proxy, no_proxy 환경 변수를 설정해야 함.

라이선스

     * Creative Commons Zero v1.0 Universal
     * 저자는 가능한 법적 범위 내에서 이 소프트웨어의 모든 저작권 및 인접 권리를 전 세계적으로 퍼블릭 도메인에 헌정함

GN⁺의 의견

     * monolith는 웹 페이지를 오프라인에서도 원본과 동일하게 보존할 수 있는 효과적인 도구로, 연구자나 개발자들에게 유용할 수 있음.
     * 이 도구는 웹 아카이빙이나 콘텐츠 보존에 관심이 있는 사람들에게 특히 매력적일 수 있으며, 인터넷이 연결되지 않은 환경에서도 웹 페이지를 검토할 수 있는 능력을 제공함.
     * 비판적인 시각에서 볼 때, 동적으로 로드되는 콘텐츠를 처리하지 못하는 한계가 있으며, 이는 사용자가 추가적인 도구를 사용해야 하는 번거로움을 초래할 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 HTTrack이나 Wget이 있으며, 이들도 웹사이트를 오프라인으로 저장하는 데 사용될 수 있음.
     * monolith를 사용하기 전에, 저장하려는 웹 페이지의 저작권 및 사용 권한을 확인하는 것이 중요하며, 저장된 콘텐츠의 사용 목적이 법적인 문제를 야기하지 않도록 주의해야 함.

   번들파일 저장돼서 짜증났는데 1파일 저장이면 땡큐겠네요 ㅎㅎ 정적사이트 아카이브 떠서 웹서버에 올릴 때 유용하겠네요^^

   Bicycle - 자전거가 움직이는 원리에 대한 모든 것을 아카이빙 해보았습니다.
   기존에 사용하던 비슷한 브라우저 확장으로 SingleFile - 웹페이지를 HTML 파일 하나로 저장해주는 도구가 있었는데요,

   두 도구 모두 정상적인 webgl 동작은 하지 않았습니다.
   monolith는 아예 모델을 다운로드 하지 않았고
   SingleFile은 모델을 다운로드해서 첫 이미지까지는 그려주는데 그 인터렉티브한 동작은 하지 않습니다.

   각 출력물의 크기는 2MB와 9MB 입니다. 개발자 도구에서 hard refresh 했을때는 3MB를 다운로드 받습니다.
chrome.exe `
--headless `
--incognito `
--virtual-time-budget=50000 `
--dump-dom https://ciechanow.ski/bicycle/ | monolith `
- `
-I `
-b https://ciechanow.ski/bicycle/ `
-o bicycle.html

  Hacker News 의견

     * macOS에서 Google Chrome을 사용하여 JavaScript가 실행된 후의 웹 페이지 HTML 파일을 얻는 방법을 README 파일에서 배움. 자세한 내용은 TIL에 정리하고, Playwright Chromium을 사용하는 자신의 도구인 shot-scraper도 비슷한 기능을 제공함.
          + /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \ --headless --incognito --dump-dom https://github.com > /tmp/github.html
     * 단일 파일 페이지를 가능한 한 배포하는 것을 선호함. 소스 보기를 통해 모든 것을 볼 수 있어야 한다는 원칙 때문. 이러한 페이지들은 자체 포함적이며, 오프라인으로 사용하거나 다시 업로드할 수 있음. TypeScript를 사용하여 게임을 작성하고 이를 단일 HTML 파일로 빌드하는 간단한 빌드 시스템을 만듦. 브라우저가 TypeScript 문법을 지원하게 되면 컴파일러나 빌드 단계가 필요 없어질 것임.
     * SingleFile과의 비교해서 어떤지?
     * 나중에 읽기 위해 웹 페이지를 저장하는 서비스를 자주 사용하지만, 실제로 읽으려 할 때 페이지가 더 이상 존재하지 않는 경우가 많음. 오프라인 아카이브 버전으로 이동하는 것이 더 나은 옵션일 수 있음을 고려 중.
     * Wayback Machine에서 전체 웹사이트를 복원하는 방법에 대한 질문. 사랑하는 웹사이트의 데이터베이스가 삭제되었으나, 모든 내용이 인터넷 아카이브에 존재함. 수동 스크래핑과 파이썬을 사용한 CSS URL 수정 등이 필요할 것으로 보임.
     * 몇 년 전에 비슷한 것을 작성했으며, 주로 Go 프로그램에서 HTML을 생성할 때 사용함. 외부 스타일시트와 자바스크립트에 링크를 사용하고, 이를 단일 HTML 파일로 처리함.
     * 지정된 깊이까지 링크를 따라가는 기능에 대한 지원이 있으면 좋겠다는 의견. Httrack과 유사한 기능을 언급.
     * 이 도구는 흥미롭지만, 브라우저가 웹 페이지를 처리하는 방식에 대한 문제를 해결하기 위한 임시방편이라는 의견. 브라우저가 페이지를 ""blah.html"" 파일과 ""blah_files"" 폴더로 저장하는 대신, 둘을 하나의 폴더로 묶어서 쉽게 이동하고 복사할 수 있게 해야 한다고 주장함.
     * wget을 사용하여 웹 페이지와 모든 자산을 다운로드하는 방법에 대한 설명과 문서 링크 제공.
     * 2019년 8월에 해커뉴스에 게시된 ""Show HN: CLI tool for saving web pages as a single file""에 대한 관련 링크 제공.
"
"https://news.hada.io/topic?id=14057","Valkey - 리눅스 재단(Linux Foundation)이 발표한 Redis의 오픈소스 대체재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Valkey - 리눅스 재단(Linux Foundation)이 발표한 Redis의 오픈소스 대체재

     * Redis Inc.가 최근 발표한 라이선스 변경에 대응하기 위해 여러 메인테이너, 커뮤니티, 기업 지원을 빠르게 모아서 재조직
     * Redis 7.2.4 기반으로 개발 진행, BSD 3-clause license 하에 프로젝트를 사용 및 배포할 수 있도록 유지할 것이라 발표
     * Amazon Web Services (AWS), Google Cloud, Oracle, Ericsson, Snap Inc. 등의 회사가 Valkey 프로젝트에 참여

   Github Project: https://github.com/valkey-io/valkey

   Keyval이 아니구요…??
   Value로 key를 찾으라는 소리인가…

   발키리 Valkyrie 로 부르기 위해서 Valkey 라고 하네요
"
"https://news.hada.io/topic?id=14058","Redis 자리를 차지하기 위한 대체제 경쟁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Redis 자리를 차지하기 위한 대체제 경쟁

     * 2024년 3월 21일, Redis Ltd.는 Redis ""인메모리 데이터 스토어"" 프로젝트가 Redis 7.4부터 비자유, 소스-사용 가능 라이선스로 출시될 것이라고 발표
     * 이 소식은 불쾌하지만 전혀 예상치 못한 것은 아니었으며, 특이한 점은 Redis 대체제로 선택할 수 있는 옵션이 여러 개 있다는 것
     * 무료 소프트웨어를 계속 사용하고자 하는 사용자들은 기존의 포크인 KeyDB와 리눅스 재단이 새롭게 발표한 Valkey 프로젝트를 포함한 최소 네 가지 옵션 중에서 선택할 수 있음

Redis의 간략한 역사

     * Redis는 Salvatore Sanfilippo(별명 ""antirez"")가 MySQL이 충족시키지 못하는 요구 사항을 가진 실시간 로그 분석 애플리케이션 LLOOGG를 사용하기 위해 시작한 프로젝트임
     * 관계형 데이터베이스 대신 간단한 사전 데이터베이스로 설계되었으며, 이름은 ""remote dictionary server""의 약어
     * Redis는 NoSQL 운동의 일부로 빠르게 인기를 얻었으며, 2010년 VMware에 의해 개발을 위해 고용되었음
     * Redis는 Twitter와 Pinterest 등 고객사를 통해 인기를 얻었고 리눅스 배포판에 포함되기 시작했으며, 2013년에는 AWS의 ElastiCache 서비스에 추가됨

클라우드 대 오픈소스

     * SSPL과 Redis의 RSAL과 같은 사용 제한 라이선스를 지지하는 사람들은 이것을 AWS와 같은 거대 클라우드 제공업체와 오픈소스 간의 전투로만 제시하려고 함
     * Redis의 기여자 목록을 살펴보면, Redis 회사 외에도 다양한 기업들이 기여하고 있음을 알 수 있음

배포 모델 변경

     * Redis는 벤처 투자를 받은 회사로, 오픈소스에서 벗어나 더 많은 수익을 창출하려는 계산을 한 것으로 보임
     * MongoDB의 사례를 보면, SSPL로 이동한 후에도 계속 성장하고 있으며, 많은 기업들이 서비스를 직접 호스팅하기보다는 사용에 대해 지불하는 것을 선호함

포크와 대안들

     * Redis 라이선스 변경 후 몇 일 만에 Valkey라는 직접적인 포크가 생겼으며, AWS, Google Cloud, Oracle, Ericsson, Snap 등이 이 노력을 지원함
     * KeyDB는 기술적 이유로 2019년에 만들어진 포크이며, Snap에 인수된 후 전체 코드베이스가 3-clause BSD 라이선스로 완전히 오픈소스가 됨
     * SourceHut의 창립자 Drew DeVault는 LGPLv3를 사용하여 Redict라는 포크를 만듦
     * Microsoft의 Garnet은 Redis와 호환되는 원격 캐시 스토어로, MIT 라이선스로 출시됨

대체제에 대한 경쟁

     * 리눅스 배포판은 Redis를 대체할 소프트웨어를 찾아야 하는 문제에 직면함.
     * Fedora, openSUSE, Debian 등의 커뮤니티는 Redis의 대체제로 KeyDB, Redict, Valkey 등을 고려하고 있음.

앞으로 갈 길

     * 하나 이상의 포크가 상당한 견인력을 얻을지 여부를 예측하기에는 너무 이르지만 Valkey가 신뢰할 수 있는 대안이 될 가능성이 높음

   애초에 redis도 memcached의 대체제였죠.
   그런데 어떤 기술의 대체제가 이런식의 캠패인(?)으로 결정되는 걸 본적이 없네요.
   Only time will tell.

   Valkey - 리눅스 재단(Linux Foundation)이 발표한 Redis의 오픈소스 대체재
   Redis, 라이선스를 BSD 에서 듀얼 라이선스로 변경
   GN⁺: Redis, 이중 소스-사용 가능 라이선스 채택
   Redict은 redis의 독립, 카피레프트 포크입니다

        Hacker News 의견

     * Redis 커뮤니티 에디션은 계속 무료로 사용 가능하며, 지원 및 유지보수가 이루어지고 개선될 예정임.
          + 개발자들은 SaaS 애플리케이션과 웹 기반 소프트웨어에서 Redis를 대체할 필요가 없음.
          + 이는 AWS가 Redis를 서비스로 제공하면서 Redis 개발자에게 보상을 지불하지 않는 것을 방지하기 위함임.
     * Neal Gompa는 Fedora 개발 목록에서 라이선스 변경에 대해 논의를 시작하고, Redis를 Fedora에서 제거할 필요성을 지적함.
          + Gompa는 openSUSE의 Factory 토론 목록에서도 이 문제를 제기함.
          + Docker가 단계적으로 제거된 후, 여러 배포판이 Docker의 대체제로 Podman을 채택함. Redis에 대해서도 비슷한 상황이 전개될 것으로 보임.
     * Apache Kvrocks(Flash 기반의 Redis 대안)의 커미터 Binbin Wang이 새로운 Redis 버전에 대한 커밋의 거의 25%를 기여함을 처음 알게 됨.
          + Binbin Wang의 기여는 다음 링크에서 확인할 수 있음:
               o Apache Kvrocks 기여자 목록
               o Redis 기여자 목록
     * AGPL 라이선스가 점점 인기를 얻고 있는 이유는, 저작권 소유자를 제외한 모든 사람이 매우 엄격한 규칙을 따라야 하지만, 핵심 소프트웨어가 오픈소스로 남아 커뮤니티가 여전히 혜택을 받기 때문임.
          + 특히 BSD 라이선스는 비즈니스를 운영하기에 특히 나쁜 방법으로 보임.
     * AWS는 ElasticSearch를 ""OpenSearch"" DBaaS로 포크함. 이로 인해 이전 직장에서 특정 버전의 NEST .NET 라이브러리에 제한되어 새로운 기능을 사용할 수 없었던 문제가 발생함. 기술 발전에 비추어 볼 때 잘못된 방향으로 가는 것 같음.
     * MIT 라이선스를 사용하고 지원을 통해 수익을 창출하는 것이 이러한 문제뿐만 아니라 다른 잠재적 문제에 대한 쉬운 해결책임.
     * Reddit에 대한 커밋의 약 40%가 중국 회사(Tencent 24.8%, Alibaba 6.8%, Huawei 5.2%, Bytedance 2%)에서 나옴이 흥미로움.
     * 현재 시점에서는 저작권 라이선스가 더 유리해 보임. 미래의 모든 릴리스에 동일한 라이선스가 적용될 것이라는 보장이 없다면, 더 자유롭고 비즈니스 친화적인 라이선스의 가치는 무엇인가? 이는 미끼와 전환 정책처럼 보임.
     * Redis는 개발자들에게 트로이 목마처럼 보임. 처음에는 간단한 키-값 데이터베이스로 보이지만, 캐시로도 사용할 수 있고, 모든 것을 캐시하는 것이 멋져 보임. 하지만, 각 프로그램이 잘하는 한 가지 일에 집중해야 한다는 오래된 Unix 원칙과 대조됨. 10년이 지나면 올바른 캐싱 결정을 내리기 위해 Redis의 엔터프라이즈 백서를 다운로드해야 함.
          + Redis가 데이터베이스와 캐시로 다른 포트에서 사용되는 프로젝트에서 일한 경험에서 비롯됨. 대부분의 개발팀이 Redis가 ""간단하고 잘 작동한다""고 해서 매뉴얼을 읽지 않았고, 여러 문제가 발생했지만, 생존을 위해 분투하는 스타트업에서는 이를 정리할 시간이 없음.
     * Andrew Kelley의 관점에 동의함: Redis 프로젝트를 Redict로 이름을 바꾸고, 현재 ""Redis""라고 불리는 프로젝트를 Redict의 이상한 상업적 포크로 간주함.
          + Redis가 Redict로 이름이 바뀐 포스트
"
"https://news.hada.io/topic?id=14079","rev.ng 디컴파일러, 오픈 소스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        rev.ng 디컴파일러, 오픈 소스로 전환

rev.ng 디컴파일러 오픈 소스화 및 UI 클로즈드 베타 시작

     * revng-c 백엔드 디컴파일러 오픈 소스화 발표, 전체 디컴파일 엔진 오픈 소스화 완료
     * 뉴스레터 구독자 대상 rev.ng UI 클로즈드 베타 초대 예정, FIFO 기반으로 초대
     * 새로운 웹사이트 공개, rev.ng Hub 통해 클라우드 버전 사용 가능
     * 클로즈드 베타 참여자 아니어도 공개 프로젝트 탐색 가능
     * rev.ng 기능에 대한 개인 데모 참여자 모집 중

rev.ng 사용 방법

     * revng 설치는 루트 권한 필요 없이 단일 디렉토리에 모든 것이 설치됨
     * 간단한 프로그램의 디컴파일 예시 제공, 문서를 통해 환경 설정 및 튜토리얼 확인 가능
     * UI 사용을 위해 뉴스레터 등록 필요, 클로즈드 베타 참여자에게 순차적으로 초대 예정
     * 리눅스 x86-64 바이너리에 대한 초기 QA 수행, 다양한 ABI 및 플랫폼 지원

rev.ng의 목표와 설계

     * 데이터 구조 자동 복구, 현대적 UX, 협업 리버싱, 넓은 플랫폼 지원, 확장성에 중점
     * 데이터 레이아웃 분석을 통한 구조체 레이아웃 자동 복구 기능
     * VSCode 기반 UI 제공, 브라우저 탭이나 독립 실행형 애플리케이션으로 실행 가능
     * 클라이언트-서버 아키텍처를 통한 협업 리버싱 지원, rev.ng Hub를 통한 프로젝트 관리
     * QEMU 지원 아키텍처를 기반으로 다양한 아키텍처 지원, ABI 지원을 위한 선언적 형식 제공
     * 오픈 소스 프로젝트로서 스크립팅 용이, Python 및 TypeScript 래퍼 제공

오픈 소스 대비 무료 및 프리미엄 사용

     * rev.ng 프레임워크는 완전히 오픈 소스, CLI를 통한 디컴파일 가능
     * UI는 클라우드에서 공개 프로젝트에 대해 무료로 사용 가능, 비공개 프로젝트는 구독 필요
     * 완전히 독립 실행형 UI는 라이선스 구매를 통해 오프라인에서 실행 가능

rev.ng 클라우드에서의 사용

     * rev.ng Hub를 통해 프로젝트 생성 및 협업자 초대 가능
     * UI는 브라우저에서 실행, 백엔드는 클라우드에서 실행
     * 공개 프로젝트는 무료, 비공개 프로젝트는 구독 필요
     * 프라이빗 클라우드 서비스 설치에 대한 논의 가능

로드맵

     * 1.0 버전 출시까지 상세한 로드맵 제공
     * 로드맵은 4단계로 구성: 알파 버전, 베타 버전, 오픈 베타, 1.0 출시
     * 자세한 로드맵은 로드맵 페이지에서 확인 가능

연락 및 최신 정보 유지 방법

     * X/Twitter, Discord, Discourse, GitHub, 월간 뉴스레터, 이메일을 통한 연락 및 정보 제공

GN⁺의 의견

     * rev.ng의 오픈 소스화는 소프트웨어 엔지니어링 및 보안 분야에서 협업과 지식 공유를 촉진할 수 있는 중요한 발전임.
     * 디컴파일러의 오픈 소스화는 사용자들이 자유롭게 코드를 수정하고 개선할 수 있게 하여, 커뮤니티 기반의 혁신을 가능하게 함.
     * rev.ng의 클라우드 기반 UI는 원격 작업과 협업이 점점 더 중요해지는 현대의 작업 환경에 잘 부합함.
     * 오픈 소스 프로젝트임에도 불구하고, 프리미엄 기능을 제공하여 수익 창출 모델을 구축한 점은 다른 오픈 소스 프로젝트에도 좋은 사례가 될 수 있음.
     * 이와 유사한 기능을 제공하는 다른 오픈 소스 프로젝트로는 Ghidra나 Radare2가 있으며, 이들도 강력한 리버스 엔지니어링 도구로서 고려할 수 있음.
     * rev.ng를 도입할 때는 지원하는 아키텍처와 ABI의 범위를 고려해야 하며, 오픈 소스 커뮤니티의 지원을 받을 수 있는 장점이 있음.

        Hacker News 의견

     * 가격 모델 요약:
          + rev.ng 프레임워크는 완전히 오픈소스이며, CLI에서 원하는 것을 디컴파일할 수 있음.
          + UI는 다음과 같은 형태로 제공됨:
               o 공개 프로젝트의 경우 클라우드에서 무료 사용 가능.
               o 비공개 프로젝트의 경우 클라우드에서 구독을 통해 사용 가능.
               o 완전히 독립적이고 오프라인으로 사용 가능한 애플리케이션으로 구매 가능.
          + 비교를 위해, Hopper는 100 USD에 1년간의 업데이트를 제공하며, Ghidra와 Radare2는 FOSS로 완전히 무료이고, IDA Pro는 매우 비쌈.
     * 팀에 대한 검토 요약:
          + CEO(aleclearmind)가 CTO(pfez)보다 훨씬 많은 커밋을 하고 있는 것이 조금 이상함.
          + 대부분의 CEO들은 코딩할 시간이 없다고 불평하지만, 이 경우 CEO가 코딩에 많이 참여하고 있음.
          + 만약 이 방식이 효과적이라면, 팀에게 매우 즐거운 작업일 것임.
     * ELF 파일 호환성 문제 요약:
          + 사용자가 ELF 파일을 분석하려 했으나, rev.ng는 FreeBSD 바이너리나 커널 모듈을 지원하지 않는 것으로 보임.
          + 이는 FreeBSD와 관련이 없고, 간단한 실행 파일이 아니기 때문일 가능성이 있음.
     * 회사에 대한 긍정적인 평가 요약:
          + 회사는 최고의 PLT(Programming Language Theory) 책 중 하나에 힘입어 설립됨.
          + 회사의 공동 창립자는 해당 책을 통해 만나게 되었으며, 이 책은 회사의 기초가 됨.
     * 제안 요약:
          + 코드가 변수와 구조체 멤버와 상호작용하는 방식을 기반으로 자동으로 이름을 지정하는 아이디어 제시.
          + GitHub의 모든 코드를 다운로드하여 유사한 레이아웃과 상호작용을 가진 변수를 찾아, 충분한 신뢰도가 있을 때 해당 이름을 사용하는 방식.
     * 협업 워크플로우에 대한 기대 요약:
          + IDA 팀과 같은 도구를 사용해보지 않았지만, Google Docs처럼 무리 없이 사용할 수 있는 리버스 엔지니어링 경험을 기대함.
     * 독립 실행형 버전에 대한 관심 요약:
          + 사용자는 독립 실행형 버전을 시도하는 데 관심이 있으며, 가격에 대한 소식을 기대함.
          + 취미로 사용할 수 있을 만큼 가격이 합리적이기를 희망함.
     * 바이너리 해킹 도구에 대한 긍정적인 반응 요약:
          + 새로운 바이너리 해킹 도구 출시에 대해 기쁨을 표현함.
          + 패키징 형식에 대한 구체적인 제안을 다수 제시함.
     * QEMU TCG 아웃소싱에 대한 회고 요약:
          + QEMU TCG를 사용하여 '리프팅'(lifting)을 아웃소싱한 것에 대한 후회가 있는지 물음.
          + 이 방법이 잘 작동했는지에 대한 의견을 구함.
"
"https://news.hada.io/topic?id=14078","신입사원이 더 많은 급여를 받을 때, 최고의 성과를 내는 직원이 가장 먼저 사직함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             신입사원이 더 많은 급여를 받을 때, 최고의 성과를 내는 직원이 가장 먼저 사직함

     * 새로운 인재를 유치하기 위해 고용주들은 종종 기존 직원보다 신규 채용된 직원에게 더 높은 임금을 제공하는 경우가 많음
     * 그러나 요즘은 규제 변화와 기술 발전으로 많은 부문에서 급여 투명성이 크게 증가하여 직원들이 급여 격차를 더욱 인식하게 됨
     * 연구에 의하면 신규 채용 직후 기존 직원의 임금을 조정하지 않으면 직원들이 사직하는 경향이 있으며, 특히 고성과자는 다른 직원보다 더 빨리 사직하는 경향이 있는 것으로 나타남
     * 따라서 고용주는 고임금 외부 인재 채용이 팀에 미칠 수 있는 영향을 인지하고, 정기적으로 임금 형평성 분석을 수행하여 모든 격차를 충분히 설명할 수 있는지 확인하고, 불평등이 확인되는 즉시 임금을 조정하는 민첩성을 키워야 함

연구 결과

     * 연구진은 Visier Community Data의 고객 데이터베이스 샘플을 사용하여 미국, 캐나다, 유럽의 거의 100개 회사에서 2018년부터 2023년까지의 400만 명 이상의 실시간 직원 기록을 분석
     * 높은 급여를 받는 새로운 동료가 추가된 후 직원들이 얼마나 빨리 사직하는지, 임금 인상이 사직 확률을 얼마나 줄이는지에 대한 패턴과 경향을 파악하기 위해 통계적 방법을 활용
     * 분석 결과, 신규 채용된 직원이 추가된 후 곧바로 임금이 인상된 직원은 평균 2년 반 더 오래 직장에 남았으며, 임금 조정이 6개월 걸린 경우 평균 1년 반, 1년이 걸린 경우 평균 13개월 후에 사직

고성과 직원의 이직

     * 고성과 직원은 사직하는 직원 중에서 불균형적으로 많은 비율을 차지함
     * 일반적으로 사직하는 직원 중 약 4분의 1이 고성과 직원이지만, 더 높은 급여를 받는 신규 직원이 추가된 후에는 3분의 1 이상으로 증가함
     * 고성과 직원이 자신의 노력이 충분히 보상받지 못한다고 느낄 때 동기가 감소하고, 다른 직원들도 팀원들이 동기를 잃는 것을 보고 영향을 받음
     * ""바보 효과""라는 현상도 있는데, 이는 직원들이 자신이 공정한 대우를 받지 못하고 있다고 느낄 때 발생함

급여 형평성 개선 방법

     * 연구 결과에 따르면, 관리자와 리더들이 급여 불평등의 영향에 대해 인식을 높이고, 정기적으로 급여 형평성을 감사하며, 불평등이 발견되면 즉시 해결하고, 민첩성에 투자해야 함
     * 급여 불평등에 대한 인식을 높이기 위해 HR 팀 뿐만 아니라 관리자, 임원 등에게 교육을 투자해야 함
     * 급여 형평성을 정기적으로 감사하여 설명 가능한 차이와 불평등을 구분해야 함
     * 불평등이 발견되면 가능한 빨리 해결하고, 새로운 도구와 프로세스에 투자하여 급여 불평등에 신속하게 대응해야 함

GN⁺의 의견

     * 급여 불평등은 직원의 사기와 조직에 대한 신뢰를 저하시키며, 특히 고성과 직원의 이직률을 높일 수 있음. 이는 조직의 성장과 성과에 부정적인 영향을 미칠 수 있음.
     * 이 연구는 조직이 급여 불평등을 해결하기 위해 더 민첩하고 투명한 접근 방식을 취해야 한다는 점을 강조함. 이는 조직 문화와 HR 시스템의 변화를 요구할 수 있음.
     * 급여 불평등 문제는 성별과 인종에 따라 더욱 심화될 수 있으며, 이는 조직이 다양성과 포용성을 증진하기 위해 더욱 노력해야 함을 의미함.

  Hacker News 의견

     * Netflix는 새로운 직원을 뽑기 위해 제시한 연봉을 기존 직원에게도 적용하여 연봉을 인상해주었다. 이로 인해 때때로 25% 이상의 큰 인상을 경험한 사람이 있음.
     * 한 Big Tech 회사의 고성능 직원이 자신보다 경험이 적은 동료가 연봉을 훨씬 더 많이 받는 것을 알게 되었고, 이로 인해 자신이 우롱당하는 것 같은 느낌을 받아 회사를 떠나 3개월 내에 자신의 회사를 창업함.
     * 경제 상황을 이유로 급여 인상을 거부한 회사로 인해 중요한 팀원이 이직했고, 이로 인해 중요 프로젝트가 지연되어 회사에 큰 손실을 초래함.
     * Forbes 기사에 따르면 2년 이상 동일 회사에 근무하는 직원들은 최대 50%까지 적게 받는다고 함. 변화에 대한 인간의 저항성 때문에 오랜 기간 동안 낮은 급여를 받으며 근무하는 경우가 많음.
     * FAANG 회사의 선임 기술 직원이 연속적으로 높은 평가를 받았음에도 불구하고, 3년 동안 기본 급여가 3% 미만으로 인상되었고, 이로 인해 다른 곳으로 이직을 고려하게 됨.
     * 새로운 직원이 높은 급여로 입사하면 기존 직원들이 자신들이 이용당하고 있다고 느끼게 되며, 이는 명백한 불공정함.
     * 급여 인상을 요구했던 뛰어난 동료가 거절당한 후 회사를 떠났고, 그의 후임자는 더 높은 급여를 받았으며, 업무 부담을 호소하여 결국 또 다른 인력을 추가로 고용함.
     * 연구자들이 새로운 고액 연봉 직원이 시장의 열기를 반영하는 것인지, 아니면 정말로 기존 직원들의 이직을 유발하는지에 대한 인과관계를 밝혀냈는지에 대한 의문 제기.
     * 새로운 직원을 뽑기 위해 더 많은 급여를 제시하는 문제를 인식하고, 기존 직원들의 급여도 매년 조정하여 새로운 직원과의 급여 차이를 해결한 회사의 사례.
     * 스타트업 초기에 많은 위험을 감수하고 낮은 급여를 받으며 일한 직원들이 제품 출시 후 새로 들어온 직원들과 동일한 옵션을 받는 것을 보고 실망하여 회사를 떠남.
"
"https://news.hada.io/topic?id=14008","WireQuery - 풀스택 세션 리플레이 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WireQuery - 풀스택 세션 리플레이 도구

     * 프론트엔드 레코딩을 통해서 사용자가 어떤 문제를 겪는지 확인 가능
          + 백엔드 네트워크 호출 내용(실제 페이로드 포함)과 결합하여 문제가 어떻게 발생했는지 파악
     * 특정 이슈들은 백엔드에서만 파악가능하며, 실제로 사용자가 녹화전에 일어나기도 함
          + 특수한 ""네트워크 쿼리 언어""인 WQL을 이용해서 백엔드에서도 조사를 시작 가능
     * SDK는 개인정보 보호를 염두에 두고 설계
          + JVM, JS(Browser), Go 및 모든 언어용 Universal SDK 제공

   오... apm 에 screen record 가 붙은 느낌이군요.

   getting-started까지는 docker-compose로 되어 있어서 쉬운데, 그 뒤에 뭔가 하려니 쉽진 않네요. (10분 만에 해보긴)
"
"https://news.hada.io/topic?id=14014","Canva, Adobe와 경쟁하기 위해 Affinity 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Canva, Adobe와 경쟁하기 위해 Affinity 인수

     * Canva Inc.가 Mac 사용자들에게 인기 있는 Affinity 소프트웨어 제품군을 인수함으로써, Adobe Inc.와의 경쟁에서 가장 큰 인수를 달성
     * 이 거래는 현금과 주식을 포함하여 ""수백만 파운드""에 달하는 가치로 평가되며, Canva의 공동 창립자이자 최고운영책임자인 Cliff Obrecht가 Bloomberg와의 인터뷰에서 밝힘
     * Affinity는 전 세계 300만 명 이상의 창작 전문가들에게 신뢰받는 소프트웨어로, 사진 편집부터 복잡한 그래픽 및 벡터 디자인에 이르기까지 다양한 솔루션을 제공
          + Affinity Designer(벡터 그래픽), Photo(사진편집), Publisher(출판) 등의 앱을 윈도우/맥/아이패드용으로 제공
     * Canva는 지난 10년 동안 디자인 교육을 받지 않은 지식 근로자들에게 중점을 두었으나, 이제는 전문 디자이너들까지 확대하고자 함
     * Affinity의 소프트웨어는 직관적이며, 합리적인 가격에 복잡하지 않은 전문 디자인 도구를 제공
     * 영국 노팅엄에 기반을 둔 전체 90인 팀이 Canva에 합류하며, 이들은 사진 편집, 출판, 일러스트레이션 소프트웨어 포트폴리오를 담당함

Canva의 성장과 인수 전략

     * Canva는 약 10년 전에 설립되어 Adobe의 오랜 독점적 소프트웨어 공급자에 대한 가장 유능한 경쟁자로 성장함.
     * Adobe는 최근 자사 제품에 AI 기능을 추가했지만, Figma 인수 거래가 지난 12월 실패한 후 올해 주식이 15% 이상 하락함.
     * Canva는 공식적인 디자인 교육을 받지 않은 사람들을 대상으로 사용하기 쉬운 제품을 만드는 데 중점을 두고 있으며, 연간화된 수익이 $2.1 billion을 초과하고 175 million명 이상의 사용자를 보유함.

Canva의 유럽 시장 확장

     * Canva는 유럽에서 총 7개 회사를 인수했으며, 이는 유럽 대륙에서의 존재감을 확대하기 위한 노력의 일환임.
     * Canva는 유럽 본사를 지난해 런던에 설립했으며, 유럽 시장이 매우 높은 잠재력과 기회를 가지고 있다고 Obrecht가 언급함.

GN⁺의 의견

     * Canva의 Affinity 인수는 디자인 소프트웨어 시장에서 Adobe의 지배적인 위치에 도전하는 중요한 전략적 움직임임. 이는 Canva가 전문 디자인 도구의 범위를 확장하고자 하는 의지를 보여줌.
     * Canva가 AI 기능을 추가하며 사용자 기반을 빠르게 확장한 것은 기술의 발전이 사용자 경험과 시장 점유율에 미치는 영향을 잘 보여줌. 이러한 기능은 사용자들에게 더욱 편리하고 직관적인 디자인 경험을 제공할 것으로 기대됨.
     * 이번 인수는 Canva가 유럽 시장에서의 성장을 가속화하려는 계획의 일환으로, 지역적 확장은 글로벌 시장에서의 경쟁력을 강화하는 데 중요한 역할을 할 것임.
     * 비판적인 시각에서 볼 때, 이러한 대규모 인수는 기존의 Affinity 사용자들에게 변화를 가져올 수 있으며, 이는 일부 사용자들에게 불편함을 초래할 수 있음.
     * Canva와 유사한 기능을 제공하는 다른 오픈소스 프로젝트로는 Inkscape나 GIMP가 있으며, 이들은 무료로 사용할 수 있는 Adobe의 대안으로서 디자이너들 사이에서 인기가 있음.

   Canva 의 공식 발표 : https://www.canva.com/newsroom/news/affinity/

        Hacker News 의견

     * 링크는 공식 발표로 변경되어야 함.

     이는 매우 실망스러운 소식임. Affinity Designer와 Affinity Photo를 수년간 사용해왔으며, 구독이 아닌 독립 실행형 앱은 사용자의 요구에 완벽하게 부합함. Adobe와 비교할 때 이들은 명백한 선택임. 그러나 Canva가 이 상태를 그대로 두지는 않을 것으로 보임. 다음 버전이 구독 모델로 바뀌거나 기존 버전에 대한 지원 중단이 있을 수 있음.
     * Affinity는 Adobe 제품군에 대한 진정한 고급 대안임.

     Affinity는 Adobe 스위트에 대한 진정한 고급 대안을 제공함. HDRI 워크플로우는 다른 어떤 것보다 앞서 있음. Canva에 대해서는, 이 서비스를 사용해 연구 슬라이드를 만드는 학생의 점수를 낮추고 있음. 슬라이드는 템플릿에 의존하며, 각 PDF 슬라이드는 선택하고 복사할 수 없는 텍스트를 포함한 큰 파일 크기의 래스터화된 PNG로 내보내짐.
     * Affinity에 대한 지불을 기꺼이 했으나, 구독 모델을 원하지 않음.

     구독 모델을 원하지 않으며, 창작 앱이 클라우드에 전혀 의존하지 않고 작동하기를 원함. 또한 네이티브 Mac 앱을 원함. 그들의 FAQ는 전혀 안심되지 않음. 1년 후 Canva가 이러한 기능 중 적어도 하나를 파괴하고 Affinity 버전 3으로 강제 이동하게 만들 것으로 의심됨.
     * Adobe의 괜찮은 대안이 사라짐.

     이제 더 많은 구독, Canva의 내장 콘텐츠로 오염되고, 아마도 데스크톱 앱을 완전히 단계적으로 없애버릴 것임.
     * Affinity (Serif)의 공식 성명.

     Canva의 비즈니스 모델은 구독제이며, Affinity의 판매 방식을 변경할 계획이 있는지에 대한 질문에 현재로서는 가격 모델을 변경할 계획이 없으며, 모든 앱은 일회성 구매로 계속 제공될 것임. 기존 Affinity 사용자는 원래 구매한 대로 앱을 영구적으로 사용할 수 있으며, V2에 대한 많은 무료 업데이트를 기대할 수 있음!
     * Canva에 대해 잘 모르지만, Affinity의 제품과 가격 모델의 팬임.

     Canva에 대해서는 잘 모르지만, Affinity의 제품과 가격 모델의 큰 팬으로서, 지금 당장 걱정을 시작해야 하는지 아니면 인수가 마무리될 때까지 기다려도 되는지 궁금함.
     * 포럼에서 인수에 대한 주제로.

     많은 사람들이 신뢰 부족을 느끼고 있지만, 향후 몇 일 안에 계획에 대해 더 많은 정보를 공개할 것이며, 모두가 말할 내용에 만족할 것이라고 확신함.
     * Affinity Designer V1에 대한 특별하고 강력한 점.

     Affinity Designer V1은 가치가 매우 높고 견고한 애플리케이션으로, 그래픽 디자인을 배우고 사랑하게 된 도구임. V2에서는 기능이 이상하게 넓어지고 버그가 많아져서 애정이 떨어지고 추천하기 어려워짐. 그럼에도 불구하고 오늘날에도 여전히 좋은 소프트웨어이며, Serif 팀이 어떤 형태의 보상을 받게 되어 기쁨.
     * Canva가 1억 7500만 명의 사용자를 보유하고 있으며, 그 중 상당수가 구독을 지불하고 있어 Affinity 앱의 구매 모델을 유지할 수 있음.

     Canva가 Affinity를 인수함으로써 전문 디자인 시장에 발을 들여놓으려는 것이 명확함. Affinity V1에 대해 지불했으며, iPad와 Mac, 필요하다면 Windows에서 앱을 실행할 수 있는 V2 라이선스 업그레이드에 기꺼이 지불함. Adobe가 Figma를 인수하려 했을 때와 달리, 이번 인수가 기존 Affinity 사용자에게 잘 될 것이라는 점에 대해 낙관적임.
     * Affinity 고객으로서 매우 슬픔.

     V1부터 Affinity 고객이었으며, 이제 구독 기반 모델로의 이동과 AI 기능 및 불필요한 클라우드 통합에 더 많은 초점을 맞출 것으로 예상함. 또한, 수십억 달러의 회사를 정기적으로 인수하는 능력을 가진 회사가 언제부터 스타트업이었는지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=13957","무한 확대 가능한 자가 시뮬레이션 'Game of Life'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   무한 확대 가능한 자가 시뮬레이션 'Game of Life'

        Hacker News 의견

     * 시간의 작동 방식이 매우 흥미로운 점으로, 각 레벨에서의 한 단계가 그 아래 레벨의 많은 단계를 사용하여 계산됨. 줌 아웃할수록 시간이 며칠, 몇 년, 수천 년으로 바뀌는 지수적 소용돌이에 빠지게 됨. 시뮬레이터는 줌을 할 때 속도를 부드럽게 조절하여 시간의 개념을 완전히 지움. 실제 시간당 게임 시간이 얼마나 지나가는지를 나타내는 지표가 있었으면 함.

     ""시간의 개념이 지워지는 시뮬레이터의 속도 조절 기능에 대한 흥미로움""
     * 처음으로 줌 인했을 때의 무의식적 반응은 충격적이었음. 20년 이상 익숙했던 것을 완전히 새로운 방식으로 보여줘서 놀라움을 줌. 오랜만에 본 가장 멋진 것 중 하나임.

     ""익숙한 것을 새롭게 보여준 경험에 대한 감탄""
     * 이 프로젝트가 정말 멋지다며, 작동 방식을 볼 수 있는 GitHub 링크를 공유함.

     ""프로젝트의 GitHub 링크 공유""
     * 실제로 시도해보지 않고 댓글만 읽는 것은 충분하지 않다고 언급하며, 시도해본 결과 매혹적이었다고 함.

     ""직접 시도해본 경험의 중요성 강조""
     * Haxe라는, 이전에 들어본 적 없는 프로그래밍 언어로 작성된 것을 보고 흥미로워함. 선택적 정적 타이핑, 다양한 타겟으로의 컴파일(특히 C++) 등의 특징을 가진 이 언어가 왜 더 인기가 없는지 이해할 수 없다고 함.

     ""Haxe 프로그래밍 언어에 대한 호기심""
     * 이 프로젝트가 놀랍다며, 작동 방식에 대한 자세한 정보를 담은 블로그 링크를 공유함.

     ""프로젝트 작동 방식에 대한 추가 정보 링크 공유""
     * 셀의 값을 인위적으로 변경하면 혼돈이 일어나고 모든 레벨에 변화가 전파될 것 같다는 생각과, 각 셀이 다른 자극을 가지면서도 더 큰 줌에서는 Conway's Game of Life로 작동할 수 있을지에 대한 호기심을 표현함.

     ""셀 값 변경의 영향과 다양한 자극의 가능성에 대한 고찰""
     * 꿈속의 꿈을 연상시키는 경험으로, 꿈에서 깨어나 침대에 누워있는 것을 깨닫고, 다시 깨어나 같은 침대에 누워있는 것을 깨닫는 듯한 느낌을 설명함.

     ""꿈속의 꿈과 같은 경험에 대한 비유""
     * 아름답게 실행된 프로젝트라며, 프로그래머로서 처음 접한 시뮬레이션인 Game of Life에 대한 애정을 표현함. 의식과 같은 주제에 대해 사람들이 논할 때 종종 떠오르는 것이라고 함.

     ""Game of Life에 대한 개인적인 애정과 연관성""
     * 이전 토론에 대한 링크를 공유함.

     ""이전 토론에 대한 링크 공유""
"
"https://news.hada.io/topic?id=14068","Endlessh-Go - SSH 봇/스캐너용 함정의 Go 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Endlessh-Go - SSH 봇/스캐너용 함정의 Go 구현체

     * Endlesssh 는 무차별 SSH 공격을 차단하고, 의도적으로 딜레이를 주어서 공격자의 시간을 낭비하게 만드는 도구
          + 하지만 원래의 C구현체는 텍스트 기반 로그만 제공
     * 이를 Go로 다시 구현하여, 공격자를 가두는 것에 추가로 지리적 위치 및 공격 소스에 대한 기타 통계를 시각화 가능
          + Prometheus 메트릭을 export 하고, Grafana로 시각화 처리
"
"https://news.hada.io/topic?id=14055","페이스북, 넷플릭스의 만족을 위해 사용자 DM 열람 허용 및 스트리밍 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               페이스북, 넷플릭스의 만족을 위해 사용자 DM 열람 허용 및 스트리밍 중단

Facebook Watch의 종말

     * 작년 4월, 메타는 Facebook Watch에서 오리지널 쇼를 더 이상 지원하지 않을 것이라고 발표함.
     * Facebook Watch는 YouTube와 Netflix의 경쟁자로 여겨졌으나, 현재는 오리지널 시리즈를 제작하지 않고 앱으로도 사용할 수 없음.
     * 스트리밍 사업의 종말은 메타의 비용 절감과 관련이 있는 것으로 보이며, 이는 해고를 포함함.

Netflix에 대한 Facebook의 특혜 의혹

     * 메타 고객들이 제기한 집단소송에서 메타가 반경쟁적인 행위를 통해 소셜 미디어 경쟁과 소비자에게 해를 끼쳤다고 주장함.
     * 공개된 서한에 따르면, Netflix는 Facebook과의 광고 지출을 통해 강력한 관계를 맺었으며, 스트리밍 비디오 경쟁을 종료하기 위한 협상을 지시함.
     * Facebook은 Netflix에게 사용자의 개인 메시지에 대한 접근 권한을 부여했다고 주장됨.

Facebook과 Netflix의 비밀 협약

     * 2013년, Netflix는 Facebook과 ""Facebook Extended API"" 협약을 체결함.
     * 이 협약에는 Facebook 사용자의 개인 메시지 인박스에 대한 프로그래매틱 접근을 포함함.
     * Facebook은 2018년 Vox에 개인 메시지를 광고 타겟팅에 사용하지 않는다고 밝혔으나, The New York Times는 Facebook이 Netflix와 Spotify에게 사용자의 개인 메시지를 읽을 수 있는 권한을 부여했다고 보도함.

GN⁺의 의견

     * 이 기사는 소셜 미디어 거대 기업인 메타와 세계적인 스트리밍 서비스 제공업체 Netflix 간의 비밀 협약과 그로 인한 반경쟁적 행위에 대한 의혹을 다루고 있음. 이러한 내용은 기업 간의 윤리적인 협력 관계와 소비자의 권리에 대한 중요한 논의를 촉발할 수 있음.
     * 만약 이러한 주장이 사실로 밝혀진다면, 개인 정보 보호와 데이터 공유에 대한 사용자들의 우려가 증가할 수 있으며, 이는 기업의 투명성과 신뢰성에 대한 중대한 질문을 제기할 것임.
     * 비슷한 기능을 제공하는 다른 스트리밍 서비스나 소셜 미디어 플랫폼으로는 YouTube, Amazon Prime Video, Twitter 등이 있으며, 이들은 각각의 방식으로 시장에서 경쟁하고 있음.
     * 기술 산업에서 데이터 공유와 개인 정보 보호는 항상 민감한 주제이며, 이 기사는 사용자 데이터를 다루는 기업들이 어떻게 법적, 윤리적 기준을 준수해야 하는지에 대한 중요성을 강조함.
     * 이 기사가 흥미롭고 도움이 되는 이유는 사용자 데이터와 개인 정보 보호에 대한 현재의 법적 틀과 기업의 책임에 대한 이해를 높일 수 있기 때문임.

        Hacker News 의견

     * 기사는 맥락을 생략하여 실제보다 훨씬 나쁘게 들리게 만듦. Facebook은 무작위로 Netflix에 모든 사람의 메시지 접근을 허용한 것이 아님. 사용자가 Netflix 앱에 Facebook 계정으로 로그인하여 채팅 기능에 대한 접근을 허용해야 함(Netflix 앱 내에서 Facebook 친구에게 영화 추천을 보내기 위한 목적).
     * Facebook은 2018년 Vox에 개인 메시지를 광고 타겟팅에 사용하지 않는다고 밝힘. 그러나 몇 달 후, The New York Times는 Facebook이 Netflix와 Spotify에 사용자의 개인 메시지를 읽을 수 있는 권한을 부여했다고 보도함.
     * 메시지가 'end-to-end'로 암호화되어 있다면, Facebook이 메시지를 어떻게 '사용'할 수 있는지 의문. 실제로 Facebook이 메시지를 '사용'하는 것은 매우 기밀 사항이며, 그들의 답변은 마케팅 목적 외에는 의심스러움.
     * 기사가 주장하는 바가 명확하지 않음. Meta가 고객의 직접 메시지를 비즈니스 파트너와 공유했으며, 개인이 보낸 메시지에 대해 알리지 않았다는 주장이 있음. 또한 Meta가 'end-to-end 암호화'를 도입한 후에도 이를 수행했다는 주장이 있는지 여부가 불분명함.
     * Facebook이 Netflix에게 사용자의 인박스에 '프로그래매틱 접근'을 허용했다는 주장이 있으나, 이것이 무엇을 의미하는지 명확하지 않음. 기사를 읽어도 어떤 권한이 있는지 알 수 없음.
     * Facebook이 개인 메시지를 광고 타겟팅에 사용하지 않는다고 밝힌 사실이 있으나, The New York Times는 Facebook이 Netflix와 Spotify에 사용자의 개인 메시지를 읽을 수 있는 권한을 부여했다고 보도함.
     * 기사에는 Netflix뿐만 아니라 Spotify도 포함되어 있음을 언급함.
     * 반독점 법이 무시되고 소수의 기업이 경제를 지배할 정도로 커질 때 발생하는 많은 나쁜 일들 중 하나임.
     * Facebook Watch에 대해 처음 들어봄.
     * 어떤 대화도 어딘가의 서버에서 자동으로 플래그를 유발한다는 것이 사실임.
     * 여기서의 암호화 문제는 다소 혼란스러움. Facebook은 메시지 텍스트를 보여주는 UI를 소유함. E2E 암호화에 백도어가 전혀 없어도 됨, 단순한 UI 속성 검사로 프론트엔드 코드에서 메시지 내용에 완전히 접근할 수 있음. 이를 개인 API로 전환하면, 100% 보안된 E2E 암호화로 전송된 메시지가 복호화됨.
"
"https://news.hada.io/topic?id=13958","구글, 특정 YouTube 동영상 시청자 신원 공개 명령 받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, 특정 YouTube 동영상 시청자 신원 공개 명령 받아

연방정부, 특정 YouTube 사용자 신원 공개 명령

     * 연방 수사관들이 Google에게 특정 YouTube 동영상의 모든 시청자 정보를 제공하라고 명령함.
     * 여러 시민권 단체의 프라이버시 전문가들은 이러한 명령이 무죄인 YouTube 시청자들을 범죄 용의자로 만들 수 있다며 위헌이라고 주장함.

켄터키 사건

     * 켄터키에서 비공개 사건을 검토한 결과, 비트코인을 현금으로 판매하는 것으로 의심되는 'elonmuskwhm'이라는 온라인 별명을 가진 개인을 식별하기 위해 수사관들이 활동함.
     * 수사관들은 드론 매핑과 증강 현실 소프트웨어에 대한 YouTube 튜토리얼 링크를 사용자에게 보낸 후, 해당 동영상을 시청한 사람들의 정보를 Google에 요청함.
     * 정부는 Google에게 2023년 1월 1일부터 1월 8일까지 해당 YouTube 동영상에 접근한 모든 Google 계정 사용자의 이름, 주소, 전화번호 및 사용자 활동 정보를 제공하라고 명령함.

뉴햄프셔 사건

     * 뉴햄프셔에서는 포츠머스 경찰이 공공 장소 쓰레기통에 폭발물이 설치되었다는 알 수 없는 남성으로부터 위협을 받음.
     * 경찰은 지역 사업체와 연관된 YouTube 라이브 스트림 카메라를 통해 자신들이 감시당하고 있다는 것을 알게 됨.
     * 연방 수사관들은 미국 전역에서 비슷한 폭탄 위협 사건이 발생하고 경찰이 YouTube를 통해 감시당했다고 믿음.
     * Google에게 특정 시간대에 여덟 개의 YouTube 라이브 스트림을 ""시청하거나 상호 작용한"" 계정 목록과 관련 식별 정보를 제공하라고 요청함.

프라이버시 전문가들의 우려

     * 프라이버시 전문가들은 이러한 명령이 1차 및 4차 수정헌법을 위반하여 자유로운 표현과 불합리한 수색으로부터의 자유를 위협한다고 지적함.
     * 감시 기술 감독 프로젝트의 알버트 폭스-칸 이사는 이러한 명령이 디지털 그물망으로 변하는 수색 영장의 불안한 추세의 최신 장이라고 비판함.

GN⁺의 의견

     * 이러한 명령은 기술과 프라이버시 간의 긴장 관계를 보여주며, 사용자 데이터 보호와 법 집행 간의 균형을 찾는 것이 중요함.
     * YouTube 알고리즘이 제공하는 콘텐츠로 인해 사용자가 법적 문제에 휘말릴 수 있다는 점에서, 알고리즘의 투명성과 책임성이 더욱 중요해짐.
     * Google이 사용자 데이터를 보호하기 위해 취한 조치들, 예를 들어 기술적으로 지오펜스 명령에 대한 정보 제공을 불가능하게 하는 업데이트 등은 사용자 프라이버시를 보호하기 위한 긍정적인 발전임.
     * 이러한 사례는 다른 기술 기업들에게도 사용자 데이터 보호를 위한 법적 도전과 그에 대한 대응 전략을 수립하는 데 중요한 사례가 될 수 있음.
     * 법 집행 기관이 범죄 수사를 위해 기술을 활용하는 방식에 대한 지속적인 사회적 논의와 법적 검토가 필요함.

        Hacker News 의견

     * 경찰이 업로드한 비디오와 시청자 정보 요청에 대한 첫 번째 사건은 매우 심각하며, 법원이 어떻게 이를 승인할 수 있었는지 의문을 제기함.

     ""경찰이 비디오를 업로드하고 시청자 정보를 요구한 첫 사건은 매우 심각하며, 법원이 이를 어떻게 승인할 수 있었는지 의문스러움.""
     * 두 번째 사건은 스와팅(위장 신고) 사건에 대한 대응으로 보이며, 범인이 특정 카메라 라이브스트림을 시청한 것으로 추정되어 경찰이 시간대와 특정 특징 등을 제공한 것은 훨씬 정당해 보임.

     ""스와팅 사건에 대한 대응으로 보이는 두 번째 사건은, 경찰이 시간대와 특정 특징 등을 제공한 것으로, 훨씬 정당해 보임.""
     * 법원 명령은 구글에게 2023년 1월 1일부터 1월 8일까지 YouTube 비디오에 접근한 모든 구글 계정 사용자의 이름, 주소, 전화번호 및 사용자 활동을 제공하라고 지시함.

     ""법원 명령은 구글에게 특정 기간 동안 YouTube 비디오에 접근한 모든 구글 계정 사용자의 개인 정보와 활동 내역을 제공하라고 지시함.""
     * 이러한 사건은 기술/소셜 미디어 회사들이 2FA(이중 인증) 보안을 위해 전화번호를 요구하는 이유를 설명해주며, SIM 스왑 공격에도 불구하고 VPN 사용자의 전화번호가 구글 계정에 등록되어 있기 때문에 더 큰 문제가 될 수 있음을 지적함.

     ""기술/소셜 미디어 회사들이 2FA 보안을 위해 전화번호를 요구하는 이유와 관련된 문제점을 지적함.""
     * 2008년 Viacom이 YouTube를 거의 파산시킬 뻔한 소송에서 비슷한 광범위한 요청을 사용했던 사례를 언급하며, 이번에는 정부가 요청을 하고 구글이 제공할 수 있는 데이터가 훨씬 많다는 점을 지적함.

     ""2008년 Viacom의 소송에서와 비슷한 광범위한 데이터 요청 사례를 언급하며, 현재 구글이 보유한 데이터의 양이 많아진 상황을 지적함.""
     * 익명성이 보장되지 않으므로 모든 행동이 알려질 것이라고 가정하고, 온라인에서의 활동을 줄이는 것이 불가피해 보임을 표현함.

     ""익명성이 보장되지 않으므로 온라인에서의 활동을 줄이는 것이 불가피하다는 의견을 표현함.""
     * 신원이 밝혀질 것을 우려하는 사용자들이 사용할 수 있는 대안적인 플랫폼인 invidious를 소개함.

     ""신원 노출을 우려하는 사용자들을 위한 대안적인 플랫폼인 invidious를 소개함.""
     * 몇 년 전의 관련된 사건으로, 미국 법무부가 USA Today 독자 식별 정보에 대한 FBI의 소환장을 철회한 사례를 언급함.

     ""미국 법무부가 USA Today 독자 식별 정보에 대한 FBI 소환장을 철회한 과거 사례를 언급함.""
     * 경찰이 용의자를 찾기 위해 Google 검색 기록을 조사하는 것에 대한 첫 법적 도전이 있었음을 언급함.

     ""경찰이 용의자를 찾기 위해 Google 검색 기록을 조사하는 것에 대한 법적 도전이 있었다는 사실을 언급함.""
     * 자신의 '비밀스러운 취미'인 버번 헌팅 비디오로 인해 문제가 생길 것을 우려하는 댓글을 남김.

     ""버번 헌팅 비디오 시청으로 인한 문제를 우려하는 개인적인 의견을 표현함.""
     * 드론과 증강 현실 소프트웨어 매핑에 대한 YouTube 튜토리얼 링크를 제공한 후, 해당 비디오를 시청한 사람들에 대한 정보를 Google에 요청한 사건을 언급함.

     ""드론과 증강 현실 소프트웨어 매핑 튜토리얼 비디오 시청자에 대한 정보 요청 사건을 언급함.""
"
"https://news.hada.io/topic?id=13985","AI, 움직일 수 있는 몸을 얻다. (기술 정리)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AI, 움직일 수 있는 몸을 얻다. (기술 정리)

     * 지난주 OpenAI 와 Figure의 합장인 합작품인 'Figure01'이 공개되었었음
     * Figure01의 기능 요약
          + 눈에 보이는 것을 설명한다.
          + 사물의 쓰임을 이해한다.
          + 행동에 따른 이유를 설명할 수 있다.
          + 다음 할 일을 계획할 수 있다.
          + 단기 기억이 가능하다.
     * 이 로봇은 단순히 ChatGPT를 연결한 로봇이 아니라, 학습된 멀티 모달 모델을 로봇에 연결해두었음
     * 그 기능 중 하나로 단기 기억을 하고, 상대방의 문맥을 파악하여 행동으로 옮길 수 있음
     * 대화 및 지능에만 AI가 사용된것이 아니라, 로봇 팔이 움직이는데 있어서도 학습 모델이 탑재됨
       -그 기술을 earned low-level bimanual manipulation라고 칭하는데, 로봇의 팔을 사용하여 물체를 다루는 기술을 학습한 것
"
"https://news.hada.io/topic?id=14041","MTA 이사회, 맨해튼 진입 시 새로운 $15 통행료 승인 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  MTA 이사회, 맨해튼 진입 시 새로운 $15 통행료 승인 결정

뉴욕, 혼잡 통행료 실현을 위한 중요한 단계 진행

     * 뉴욕시가 미국 도시 중 최초로 포괄적인 혼잡 통행료 프로그램을 실현하기 위한 결정적인 마지막 단계를 완료함.
     * 이 프로그램은 운전자들이 차를 덜 사용하고 대중교통을 이용하도록 유도하기 위해 맨해튼 중심부와 하부로 진입하는 차량에 새로운 통행료를 부과하는 것을 목표로 함.
     * 메트로폴리탄 교통청(MTA) 이사회가 대부분의 승용차에 대해 맨해튼 60번가 이하로 진입할 때 하루 15달러의 통행료를 부과하는 최종 요금을 11대 1로 승인함.

혼잡 통행료의 기대 효과

     * 혼잡 통행료는 맨해튼 하부로 진입하는 차량 수를 약 17% 감소시킬 것으로 예상됨.
     * 11월 연구에 따르면, 이 프로그램은 지역 전체에서 주행하는 총 마일 수를 줄일 것으로 보고됨.
     * 연간 10억 달러의 수익이 예상되며, 이는 대중교통 개선을 위해 사용될 예정임.

저소득 운전자에 대한 할인

     * 연간 소득이 5만 달러 미만인 저소득 운전자는 달력 월 기준 첫 10회의 여행 후 낮 시간대 통행료의 50%를 할인받을 수 있는 신청이 가능함.

GN⁺의 의견

     * 혼잡 통행료 도입은 대도시의 교통 체증과 대기 오염 문제를 해결하는 데 효과적인 전략으로 여겨짐. 런던, 스톡홀름, 싱가포르 등의 도시에서 이미 성공적으로 시행되고 있어 뉴욕의 사례가 다른 미국 도시에 모범이 될 수 있음.
     * 이 프로그램은 대중교통 시스템에 대한 투자를 증가시킬 수 있는 재정적 기반을 마련함으로써 지속 가능한 도시 교통 환경을 조성하는 데 기여할 것임.
     * 그러나 이러한 프로그램은 저소득층 운전자에게 부담을 줄 수 있으며, 이들을 위한 충분한 지원책이 마련되어야 함을 시사함.
     * 혼잡 통행료 시행에 앞서, 교통 인프라 개선과 대중교통 서비스의 질적 향상이 선행되어야 할 것임. 이는 통행료 부과로 인한 대중교통 수요 증가에 대비하기 위함임.
     * 이와 유사한 기능을 제공하는 기술이나 프로젝트로는 교통 관리 시스템(TMS)과 스마트 시티 솔루션 등이 있으며, 이들은 도시 교통 흐름을 최적화하고 환경 영향을 줄이는 데 기여할 수 있음.

        Hacker News 의견

     * 도시 외부성 비용 부담: 자동차 운전자들이 교통 혼잡, 소음, 오염 등 자신들이 만들어내는 외부성 비용을 부담하는 것이 옳은 일임. 맨해튼처럼 큰 도시에서는 운전자들이 이러한 비용을 최소한 부분적으로라도 지불해야 함.
     * 사회의 자동차 중심성: 우리 사회가 얼마나 자동차 중심적인지를 보여주는 것이 도로 이용에 대한 요금 부과가 논란이 되는 반면, 기차 이용료는 문제없이 받아들여지는 현상임.
     * 자동차 의존성 감소: 미국 도시가 자동차 소유자에게 굴복하지 않고 거주민의 건강을 신경 쓰는 방향으로 나아갈 수 있는 기회임. 장애 관련 또는 긴급 서비스를 제외하고는 차 없이 생활하는 것이 바람직함.
     * 런던의 교통 혼잡 부과 사례: 런던의 21년간의 교통 혼잡 부과 경험이 뉴욕에 예상되는 효과에 대한 좋은 사례 제공. 일부 대사관들이 통행료를 거부하는 것은 당혹스러운 일임.
     * 뉴욕 대중교통 시스템 문제: 뉴욕시의 교통 혼잡 요금제 자체에 문제가 있는 것이 아니라, 대중교통 시스템이 문제임. 미드타운과 브루클린, 스태튼 아일랜드와 다운타운 간의 대중교통 옵션이 부족하고, MTA 기차로 잘 연결되지 않는 지역에서 도시로 들어가는 옵션도 부족함. 지하철과 버스는 신뢰할 수 없음. 이 문제들이 해결되면 교통 혼잡 요금제를 지지할 것임.
     * 대중교통 시스템 개선 필요성: 뉴욕시가 런던이나 코펜하겐과 같은 수준의 대중교통 시스템을 갖추면 교통 혼잡 요금제를 지지할 것임.
     * 차량 번호판 조작: 차량 번호판을 더럽히거나 가리는 행위가 종종 발생하며, 이러한 행위를 하는 운전자들은 종종 도시 직원, 특히 경찰관임. 이러한 행위에 대한 단속이 교통 혼잡과 싸우는 동안 이루어질지 궁금함.
     * 뉴욕시 운전 비용: 뉴욕시로 운전해서 들어가는 것은 이미 매우 비싸고 고통스러운 일이며, 아무도 즐거움을 위해 그렇게 하지 않음. 이 요금제로 인해 운전을 망설이게 될 사람들은 주로 경제적으로 여유가 없는 근로계층임.
     * 도시 회피 증가: 도시를 피하고자 하는 이유가 증가함. 경찰의 무력화, 불법 체류자들이 호텔을 차지하고 있는 상황 등이 문제로 지적됨.
     * 뉴욕시의 필요성: 뉴욕시는 항상 교통 혼잡 요금제가 필요했음. 스태튼 아일랜드와 퀸즈/브롱스를 제외하고, 도시는 운전을 위해 설계되지 않았으며, 그렇게 될 가능성도 없음. 오랫동안 거주한 경험으로, 대부분의 차량 통근자들은 MTA와 NJ Transit과 같은 대중교통 시스템을 이용할 수 있음.
"
"https://news.hada.io/topic?id=13997","OpenDevin - AI 소프트웨어 엔지니어 Devin의 오픈소스 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenDevin - AI 소프트웨어 엔지니어 Devin의 오픈소스 구현체

     * 복잡한 엔지니어링 작업을 수행하며, 소프트웨어 개발 프로젝트에서 사용자와 적극적으로 협업할 수 있는 자율 AI 소프트웨어 엔지니어인 Devin의 복제를 목표로 하는 오픈소스
     * 기술 스택
          + 샌드박싱 환경: Docker 및 Kubernetes와 같은 기술을 사용하여 코드의 안전한 실행을 보장
          + 프론트엔드: React 및 VSCode 플러그인

   Devin, 첫 번째 AI 소프트웨어 엔지니어

   똑같이 Devin을 오픈소스로 구현보려는 시도로 Devika 도 있습니다.
   아직 뭐 둘다 초기단계라 더 기다려봐야 할듯 하네요

   어제 올라온 소프트웨어 개발의 미래에 대한 고찰 에도 Devin에 대한 언급이 있었는데, 어떻게 발전할지 궁금합니다.
"
"https://news.hada.io/topic?id=13986","초기유저가 중요한 이유 (해외 사례 분석)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        초기유저가 중요한 이유 (해외 사례 분석)

   해외 거대 스타트업들이 초기유저를 어떻게 전략적으로 활용했고, 초기유저 집단이 어떻게 서비스에 영향을 미쳤는지에 대한 분석.
     * 목차 -

    1. 인스타그램
    2. 프로덕트 헌트
    3. 링크드인
    4. 틴더
    5. 온더룩(국내)
"
"https://news.hada.io/topic?id=14075","루마니아 대규모 토지 매입하여 '유럽의 옐로스톤' 조성하는 그룹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  루마니아 대규모 토지 매입하여 '유럽의 옐로스톤' 조성하는 그룹

유럽의 옐로스톤을 만들기 위한 대규모 토지 매입

     * 세계적인 환경 자선가인 한스요르그 비스는 루마니아의 토지 매입을 위한 자금을 지원하는 조건으로 야심찬 보전 프로젝트를 요구함.
     * 루마니아는 유럽의 처녀림 65%를 보유하고 있으며, 이곳에 유럽의 옐로스톤을 만들기 위해 이미 27,027헥타르의 토지를 매입함.
     * 목표는 워싱턴주의 노스 캐스케이드 국립공원과 비슷한 크기인 200,000헥타르의 거대한 보호 구역을 조성하는 것임.

중요 야생동물 생태계의 보호

     * 트란실바니아 지역은 유럽에서 가장 중요한 야생동물 생태계 중 하나로, 늑대, 갈색 곰, 스라소니, 비버가 서식함.
     * 프로베르거 부부가 주도하는 재단은 불법 벌목을 막고 지역 경제 발전을 위해 생태 관광을 촉진하기 위해 대규모 삼림 지역을 매입함.
     * 이미 매입한 토지는 루마니아의 처녀림 및 준처녀림 국가 카탈로그에 포함되어 영구적으로 보호됨.

지역 사회의 참여와 발전

     * 재단은 지역 주민들에게 일자리를 제공하고 교육 및 사회 프로그램을 개발하여 지역 사회의 경제 발전을 도모함.
     * 파가라스 국립공원의 설립은 지역 당국의 동의가 필요하지만, 재단은 지역 사회의 불신을 극복하고 지역 주민들의 지지를 얻기 위해 노력 중임.

야생동물 보호를 위한 혁신적 조치

     * 재단은 자체 사냥꾼 협회를 만들고 80,000헥타르의 사냥권을 획득하여 야생동물을 보호하고, 밀렵으로부터 산양과 사슴 무리를 보호함.
     * 레레스티 지역에는 2년 전에 28마리의 들소가 재도입되었으며, 이는 곧 관광객을 끌어들이고 지역을 활성화시킬 들소 관찰 센터의 개장으로 이어질 것임.

GN⁺의 의견

     * 이 프로젝트는 루마니아의 자연 보호와 지역 경제 발전에 큰 기여를 할 것으로 보임. 지역 주민들의 삶의 질 향상과 생태 관광의 활성화를 통해 지속 가능한 발전 모델을 제시할 수 있음.
     * 그러나 지역 사회의 불신과 벌목 로비의 저항은 프로젝트 진행에 있어 중요한 장애물이 될 수 있음. 이를 극복하기 위한 지속적인 소통과 교육이 필요함.
     * 유사한 보전 프로젝트로는 미국의 옐로스톤 국립공원이나 칠레와 아르헨티나의 톰킨스 프로젝트 등이 있으며, 이러한 성공 사례들로부터 배울 점을 찾을 수 있음.
     * 이 기술을 도입할 때는 지역 사회의 참여와 지원을 확보하는 것이 중요하며, 장기적인 보전과 관리 계획을 수립해야 함.
     * 이 프로젝트는 유럽 내에서도 독특한 사례로, 다른 국가들에게도 자연 보호와 지역 발전을 동시에 추구하는 모델을 제공할 수 있음.

        Hacker News 의견

     * 유럽에 들소가 있다는 사실을 처음 알았음. 링크된 기사는 멕시코의 들소 재도입에 관한 것이지만, 실제로는 남부 카르파티아에서 들소가 재야생화되고 있음. 루마니아에는 다른 유럽 국가들보다 훨씬 많은 곰이 있어, 유럽 갈색 곰의 약 60%가 서식하고 있음. 이를 보존하려는 노력이 기쁨.
     * 루마니아의 들소 재야생화 프로젝트에 관련된 이해관계자들 간의 관계에 대한 연구를 한 사람들을 알고 있음. 전체 과정이 매우 흥미로움.
     * 영화 '콜드 마운틴'이 애팔래치아 산맥을 배경으로 하지만 실제 촬영은 루마니아 산맥에서 이루어짐. 아름다움.
     * 유럽에 이미 '유럽의 옐로스톤'이라 불리는 벨로베즈카야 푸쉬차 국립공원이 있음. 이곳은 비슷한 크기로 유럽 들소가 많이 남아 있는 곳임.
     * 루마니아에 20만 헥타르 규모의 국립공원을 만들겠다는 계획이 너무 좋아서 사실인지 의심스러움. 현지인들이 처음에 회의적인 것도 이해가 됨. 목표를 달성한다면 루마니아 숲의 3%를 차지하는 것으로 인상적임.
     * 루마니아가 주권 국가라는 사실에 의해 대부분의 노력이 무효화되지 않을까 우려됨. 만약 어떤 단체가 충분한 땅을 사들여 지역 경제에 영향을 미치기 시작한다면, 정부가 그들의 토지 권리를 무효화하거나 최소한으로 줄일 수 있음.
     * 외국 '기부자'들이 국립공원을 만들기 위해 사유지를 구입하고 있지만, 만약 지방 정부가 원하는 대로 하지 않는다면 그 땅을 계속 소유할 것이라는 점에서 비관적임.
     * 미국에 대해 어떻게 생각하든, 미국의 공공 토지는 유럽의 모든 왕관 보석들보다 가치가 있음.
     * 교통 없이 국립공원을 만들 수 있기를 바람.
"
"https://news.hada.io/topic?id=14037","DevOps 프로그램을 시작하려는 조직 위한 전문가 조언 19가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  DevOps 프로그램을 시작하려는 조직 위한 전문가 조언 19가지

     * DevOps 프로그램을 시작할 때 참고할 모범 사례와 피해야 할 실수를 주제로 Forbes Technology Council의 업계 전문가 19명이 건넨 조언
         1. 작게 시작, 자주 반복
         2. 사람, 프로세스, 기술 해결
         3. 서두르지 말고 천천히 하기
         4. 개발자에게 프로세스 오너십 주기
         5. 보안 잊지 말기
         6. 인프라를 발전시키는 프레임워크 만들기
         7. 클라우드 네이티브 기술 받아들이기
         8. 도구보다 문화에 우선순위 매기기
         9. DRY(Don’t Repeat Yourself) 코드 작성
        10. 공동 책임 문화 조성
        11. 모든 이해관계자가 공동 목표와 기대 갖기
        12. 협업과 소통 우선
        13. 사람 중심 접근법
        14. 모두가 성공과 관련해 자신의 역할 이해하기
        15. 품질 > 속도
        16. 코드 계속 문서화
        17. 반복적이고, 시간이 오래 걸리는 업무 자동화
        18. 다른 사람의 솔루션을 단순히 취하지 않음
        19. 카오스 엔지니어링 받아들이기
"
"https://news.hada.io/topic?id=13953","OpenAI 챗봇 스토어가 스팸으로 가득 차고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OpenAI 챗봇 스토어가 스팸으로 가득 차고 있음

     * OpenAI의 CEO Sam Altman은 GPTs를 발표하며, 프로그래밍부터 과학 주제 학습, 운동 팁 제공까지 다양한 작업을 수행할 수 있는 방법으로 설명함
     * GPTs는 인스트럭션, 확장된 지식, 액션을 결합하여 사용자에게 유용한 ""모든 것에 대한 GPT""를 생성할 수 있음
     * 하지만 GPT 스토어는 이상한 GPTs로 가득 차 있으며, 이는 OpenAI의 검토 노력에 대한 관심이 낮음을 시사함

누락된 모더레이션

     * GPT 스토어에 GPTs를 등록하기 위해 개발자는 사용자 프로필을 인증하고 OpenAI의 검토 시스템에 GPTs를 제출해야 함
     * OpenAI 대변인은 자동 시스템, 인간 검토, 사용자 보고를 결합하여 정책 위반 가능성이 있는 GPTs를 찾고 평가한다고 함
     * GPTs를 만드는 데 코딩 경험이 필요하지 않으며, GPTs는 창작자가 원하는 만큼 간단하거나 복잡할 수 있음

저작권 문제

     * GPT 스토어에는 영화, TV, 비디오 게임 프랜차이즈에서 가져온 여러 GPTs가 있으며, 이는 프랜차이즈 소유자가 만들거나 승인한 것이 아님
     * 이러한 GPTs는 저작권 문제를 야기할 수 있음
     * OpenAI는 디지털 밀레니엄 저작권법의 안전 항구 조항 덕분에 GPT 제작자의 저작권 침해에 대해 책임을 지지 않음

학문적 부정행위

     * OpenAI의 약관은 학문적 부정행위를 촉진하는 GPTs의 개발을 명시적으로 금지함
     * 그러나 GPT 스토어에는 AI 콘텐츠 탐지기를 우회할 수 있다고 주장하는 GPTs가 가득 차 있음
     * 일부 GPTs는 프리미엄 서비스로의 파이프라인으로, 사용자가 고급 알고리즘을 사용할 수 있는 유료 플랜을 제안함

모방

     * OpenAI의 정책은 개발자가 사람이나 조직을 그들의 동의나 법적 권리 없이 모방하는 GPTs를 만드는 것을 금지함
     * 그러나 GPT 스토어에는 사람들의 견해를 대표하거나 개성을 모방한다고 주장하는 많은 GPTs가 있음

탈옥 시도

     * GPT 스토어에는 OpenAI의 모델을 탈옥하려는 시도도 있으나, 대부분 성공적이지 않음
     * 여러 GPTs가 DAN(Do Anything Now)을 사용하여 모델이 평소 규칙에 구애받지 않고 프롬프트에 반응하도록 함

성장통

     * OpenAI는 GPT 스토어를 강력한 생산성 향상 AI 도구의 전문가 큐레이션 컬렉션으로 출시함
     * 그러나 GPT 스토어는 스팸, 법적으로 의심스럽고, 심지어 해로울 수 있는 GPTs의 번식지로 빠르게 변모하고 있음
     * OpenAI는 GPT 개발자가 사용자 수에 따라 돈을 벌 수 있도록 할 계획이지만, 이는 저작권 문제를 야기할 수 있음
"
"https://news.hada.io/topic?id=13951","Redis 라이선스 변경 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Redis 라이선스 변경 발표

Redis 소스 사용 가능 라이선스 2.0 (RSALv2) 동의

     * Redis 소프트웨어는 2024년 3월 20일부터 이중 라이선스 모델을 따름.
     * 버전 7.4 이후의 모든 코드 기여는 Redis 소프트웨어 보조금 및 기여자 라이선스 계약에 의해 관리됨.
     * 기여자는 Redis 소스 사용 가능 라이선스 v2(RSALv2) 또는 서버 측 공개 라이선스 v1(SSPLv1) 중에서 선택할 수 있음.

RSALv2 라이선스 조건

     * 라이선스는 비독점적이며, 로열티가 없고, 전 세계적으로 사용 가능하며, 재배포할 수 없고, 양도할 수 없는 라이선스임.
     * 소프트웨어의 기능을 제3자에게 서비스로 제공하거나 제3자가 사용할 수 있도록 배포하는 것은 허용되지 않음.
     * 라이선스는 특허 클레임에 대한 라이선스도 포함하며, 소프트웨어를 사용하여 특허를 침해하는 경우 라이선스가 즉시 종료됨.
     * 라이선스 위반 시 라이선스는 자동으로 종료되며, 위반 통지를 받고 30일 이내에 모든 위반을 중단하면 라이선스가 소급하여 복원될 수 있음.
     * 소프트웨어는 어떠한 보증이나 조건 없이 제공되며, 라이선서는 이 계약이나 소프트웨어의 사용 또는 성격으로 인해 발생하는 어떠한 손해에 대해서도 책임지지 않음.

서버 측 공개 라이선스 (SSPL)

     * SSPL은 MongoDB, Inc.에 의해 2018년에 만들어진 라이선스임.
     * SSPL은 소스 코드를 포함한 프로그램의 복제 및 배포를 허용하지만, 라이선스 문서를 변경하는 것은 허용되지 않음.
     * SSPL은 프로그램을 서비스로 제공하는 경우 서비스 소스 코드를 네트워크 다운로드를 통해 무료로 제공해야 함.
     * SSPL은 사용자의 법적 권리를 보호하고, 소스 코드의 수정 및 비소스 형태로의 전달을 포함한 다양한 조건을 명시함.

GN⁺의 의견

     * Redis의 이중 라이선스 전환은 오픈소스 커뮤니티 내에서 상업적 사용과 기여자의 권리 보호 사이의 균형을 찾으려는 시도로 볼 수 있음.
     * RSALv2와 SSPL은 기업이 Redis를 사용하여 자체 서비스를 제공할 때 소스 코드 공개를 요구함으로써, 오픈소스 소프트웨어의 투명성과 공유를 장려함.
     * 이러한 라이선스 변경은 기업이 Redis를 사용할 때 법적 조건을 면밀히 검토하고 준수해야 할 필요성을 강조함.
     * 비슷한 기능을 제공하는 다른 오픈소스 데이터베이스로는 Apache Cassandra나 Couchbase가 있으며, 이들도 대안으로 고려될 수 있음.
     * Redis를 도입하려는 기업은 새로운 라이선스 조건이 자신의 비즈니스 모델과 어떻게 맞물리는지를 이해하고, 필요한 경우 법률 자문을 구해야 함.

        Hacker News 의견

     * 해커뉴스 댓글 이동 안내
          + 댓글이 새로운 위치로 이동됨: 해커뉴스 댓글 페이지
          + 이동된 댓글에 대한 요약은 제공되지 않음.
"
"https://news.hada.io/topic?id=14021","모두가 존이 되는 경쟁적 롤플레잉 게임: 3인 이상을 위한 'Everyone is John' (2002)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       모두가 존이 되는 경쟁적 롤플레잉 게임: 3인 이상을 위한 'Everyone is John' (2002)

저자의 메모

     * Everyone is John은 작은 그룹의 열성적인 팬을 얻었으며, 저자는 이 게임을 크리에이티브 커먼즈 저작자 표시 4.0 국제 라이선스로 공개함.
     * 이 게임의 주요 사이트는 http://www.everyoneisjohn.com 이지만, 저자는 그 사이트를 관리하거나 연계되어 있지 않음.
     * 정통 텍스트를 원한다면 저자의 웹페이지에서 확인할 수 있으며, 자료를 찾고 싶다면 해당 사이트를 방문하거나 구글링을 추천함.

게임 자체

     * Everyone is John은 미니애폴리스의 정신이상자인 존의 다양한 인격을 연기하는 유머러스한 경쟁 롤플레잉 게임임.
     * 한 명은 게임 마스터(GM)로서 ""모두 다른 사람"" 역할을 하고, 나머지 플레이어들은 존의 머리 속 목소리들임.
     * 게임은 주사위를 사용하며, 각 플레이어가 주사위를 하나씩 가지고 있는 것이 가장 좋음.

목소리들

     * 목소리들은 존의 머리 속 인격으로, 간단한 캐릭터 시트로 정의됨.
     * 의지력, 기술, 집착이라는 세 가지 요소로 구성되어 있으며, 집착을 가장 많이 달성한 목소리가 승리함.
     * 집착은 세 가지 난이도로 나뉘며, 높은 난이도일수록 더 많은 점수를 얻을 수 있음.
     * 다른 목소리와 경쟁하기 위해서는 캐릭터 시트를 비밀로 유지하는 것이 좋음.

존

     * 존은 미니애폴리스의 완전히 미친 남자로, 머리 속 목소리들에 의해 통제됨.
     * 존은 그다지 유능하지 않아, 일반적인 사람이라면 실패할 수 있는 모든 것에 대해 성공 여부를 주사위로 결정해야 함.
     * 목소리가 존을 통제하기 위해서는 의지력 포인트를 사용하여 주사위 던지기에 +1을 얻을 수 있음.

플레이 방법

     * 게임은 존이 아침에 깨어나면서 시작되며, GM이 존이 깨어난 상황을 묘사함.
     * 목소리들은 자신의 집착을 달성하고 존이 죽지 않도록 노력해야 함.
     * 모든 목소리의 의지력이 소진되면 존은 다시 잠에 빠지고 게임 세션이 종료됨.
     * 게임이 끝나면 목소리들은 자신의 집착을 공개하고, 달성 횟수를 계산하여 점수를 합산함.
     * 가장 높은 점수를 얻은 사람이 게임의 승자가 되며, 일반적으로 다음 Everyone is John 게임의 GM이 됨.

GN⁺의 의견

     * Everyone is John은 창의적이고 상호작용이 풍부한 롤플레잉 게임으로, 플레이어들이 캐릭터의 다양한 인격을 탐구하고 경쟁하는 독특한 경험을 제공함.
     * 이 게임은 플레이어들에게 재치와 상상력을 발휘할 기회를 주며, 일상에서 벗어나 다른 사람의 신발로 걷는 것을 경험할 수 있게 함.
     * 게임의 규칙은 간단하고 접근성이 높아, 롤플레잉 게임 초보자들도 쉽게 참여할 수 있음.
     * 게임의 성공 여부가 주사위 던지기에 크게 의존하는 것은 일부 플레이어에게는 운의 요소가 너무 강하게 작용할 수 있다는 점에서 비판받을 수 있음.
     * 유사한 경쟁 롤플레잉 게임으로는 'Fiasco'나 'Paranoia'가 있으며, 이들 역시 강력한 스토리텔링과 플레이어 간의 상호작용을 중시함.
     * Everyone is John을 도입할 때는 플레이어들 간의 커뮤니케이션과 협력이 중요하며, 게임의 유동적인 규칙 때문에 유연한 사고가 필요함.

        Hacker News 의견

     * 한 사람이 오랫동안 'Everyone is John'을 즐겨왔으며, 이 게임을 함께한 친구들이 더 많은 그룹과 게임을 하게 되었다고 함. 이 게임은 롤플레잉과 파티 게임 사이의 훌륭한 중간 지점으로, 사전 계획이나 준비가 거의 필요 없음.
          + 'Everyone is John'은 롤플레잉과 파티 게임의 장점을 결합한 게임으로, 복잡한 사전 준비 없이 즐길 수 있는 점이 매력적임.
     * 게임을 운영하는 방식이 다른 사람들과 달라서 놀랐으며, 이것이 게임 플레이의 맛에 큰 영향을 미친다고 생각함. 자신이 운영하는 방식은 게임의 설명에 따라 'John'의 다양한 인격을 연기하는 것이며, GM은 'John'이 아닌 모든 다른 캐릭터를 다룸.
          + 게임 운영 방식에 따라 게임의 경험이 달라질 수 있으며, GM은 'John'이 아니라 게임의 나머지 부분을 관리하는 역할임.
     * 'Everyone is John'의 창작자로서, 게임이 문화적 인기를 얻은 것에 대해 놀라움과 기쁨을 느낌. 사람들이 여전히 게임을 즐기는 것을 보니 기쁨.
          + 'Everyone is John'의 창작자는 게임이 지속적으로 사랑받는 것에 대해 기쁘게 생각함.
     * 'Everyone is John'이 재미있지만 협동적인 게임을 원한다면 'Roll For Shoes'가 완벽한 게임이라고 생각함.
          + 'Roll For Shoes'는 'Everyone is John'과 같은 유쾌함을 제공하지만 협동적인 게임 경험을 제공함.
     * 'Mentopolis'라는 게임을 추천하는데, 이 게임은 'Everyone is John'과 비슷한 분위기를 가지고 있으며, 마음의 내부 가족 시스템 개념을 확장하여 훌륭한 롤플레잉을 자연스럽게 이끌어냄.
          + 'Mentopolis'는 'Everyone is John'과 유사한 게임으로, 마음의 다양한 측면을 탐구하며 롤플레잉에 깊이를 더함.
     * 롤플레잉 게임에 몰입감을 더하기 위해 최근에 만든 도구를 소개함.
          + 새로운 도구를 통해 D&D 캠페인 등의 롤플레잉 게임에 더 깊은 몰입감을 제공할 수 있음.
     * '3 goblins in a trench coat'라는 게임을 언급하며, 이 게임이 'Everyone is John'을 연상시킨다고 함.
          + '3 goblins in a trench coat'는 'Everyone is John'과 비슷한 재미를 제공하는 게임임.
     * 'Crystal Society'라는 책을 언급하며, 이 책에서는 여러 AI가 같은 컴퓨트 크리스털을 공유하며 서로 경쟁하고 협력하는 내용이 담겨 있음. 책의 팬이지만 삼부작의 끝에 대해서는 이야기하고 싶지 않다고 함.
          + 'Crystal Society'는 AI들의 상호작용을 다룬 책으로, 독특한 설정과 이야기가 돋보임.
     * 'Everyone is John'의 불경스러운 유머가 90년대에 친구들과 함께 했던 'Paranoia RPG'를 떠올리게 함. 그 게임으로 많은 웃음과 즐거움을 경험했다고 함.
          + 'Paranoia RPG'는 'Everyone is John'과 비슷한 유머러스한 요소를 가진 게임으로, 과거에 많은 즐거움을 제공했음.
     * 'Everyone is John'을 실제로 플레이하는 모습을 보고 싶다면, 이 링크에서 재미있게 플레이하는 모습을 볼 수 있다고 함.
          + 'Everyone is John' 게임 플레이의 실제 모습을 볼 수 있는 엔터테인먼트 비디오 링크 제공.
     * DND 그룹 중 하나가 멤버들이 빠진 날 'Everyone is John' 세션을 진행했으며, 캐나다 맥도날드가 캐나다인 식인종을 위한 인간 고기 밀수의 은폐처라는 것을 발견하는 등 재미있는 시간을 보냈다고 함.
          + 'Everyone is John' 게임을 통해 창의적이고 유쾌한 시나리오를 탐험하는 재미있는 경험을 공유함.
"
"https://news.hada.io/topic?id=13999","Show HN: Jampack – 정적 웹사이트 최적화를 위한 사후 처리 단계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: Jampack – 정적 웹사이트 최적화를 위한 사후 처리 단계

jampack이란 무엇인가?

     * jampack은 번들러도, 프레임워크도 아닌, 정적 사이트 생성기(SSG)의 출력물을 최적화하여 사용자 경험과 Core Web Vitals 점수를 향상시키는 후처리 도구임.

jampack이 할 수 있는 일은?

     * <img> 태그의 이미지가 반응형으로 변환되어 다양한 해상도를 지원하게 되며, loading=""lazy""와 decoding=""async"" 속성이 추가되어 성능이 향상됨.
     * <picture> 태그를 사용하여 여러 형식의 이미지를 포함하는 반응형 이미지로 변환되며, AVIF 포맷도 지원함.
     * CDN 이미지가 반응형으로 변환되어, 다양한 해상도의 이미지를 srcset을 통해 제공함.
     * 외부 이미지를 다운로드하여 최적화할 수 있으며, _jampack 폴더 내에 최적화된 이미지 파일을 저장함.
     * 화면에 바로 보이는 이미지(above-the-fold)는 높은 우선순위로 로드되고, 아래로 스크롤할 때 보이는 이미지(below-the-fold)는 지연 로딩됨.

인라인 중요 CSS

     * 스타일시트가 다운로드되고 파싱되는 동안 발생할 수 있는 FOUC(Flash of Unstyled Content)를 방지하기 위해, jampack은 중요한 CSS를 인라인 처리하고 나머지 CSS는 지연 로딩함.

링크 사전 가져오기

     * 페이지 내 링크를 사전에 가져와 미래 페이지 탐색 속도를 향상시킴. quicklink 덕분에 뷰포트에 들어오는 링크를 동적으로 사전 가져오기가 가능함.

모든 자산 압축

     * jampack은 2차 패스에서 모든 건드리지 않은 자산을 압축하고, 동일한 이름과 형식을 유지함. 다양한 파일 확장자에 대해 각각의 압축 도구를 사용함.

그리고 더 많은 기능들!

     * jampack은 npx @divriots/jampack ./dist 명령어를 통해 dist 폴더 내의 정적 웹사이트를 최적화할 수 있음.

jampack이 사용된 사례

     * ‹div›RIOTS' 웹사이트, keycloak.ch, bayjs.org 등 다양한 웹사이트에서 jampack이 사용되고 있음.

jampack이라는 이름의 유래

     * jam: Jamstack에서 유래함.
     * pack: 90년대의 실행 파일 패커(Executable Packers)를 연상시킴.

라이선스

     * 이 소프트웨어는 MIT 라이선스의 조건 하에 공개됨.

GN⁺의 의견

     * jampack은 웹 성능 최적화에 관심이 많은 초급 소프트웨어 엔지니어들에게 유용한 도구가 될 수 있음. 특히 Core Web Vitals와 같은 성능 지표를 중요시하는 개발자들에게 도움이 될 것으로 보임.
     * 이 도구는 이미지 최적화뿐만 아니라 CSS와 자바스크립트 압축 등 다양한 웹 최적화 기능을 제공하여 페이지 로드 시간을 단축시키고 사용자 경험을 개선할 수 있음.
     * 비판적인 시각에서 볼 때, jampack과 같은 도구의 사용은 웹사이트의 복잡성을 증가시킬 수 있으며, 잘못 사용하면 오히려 성능 문제를 야기할 수도 있음. 따라서 도구를 사용하기 전에 충분한 테스트와 검토가 필요함.
     * 웹 성능 최적화를 위해 이미 많은 도구들이 존재하는데, 예를 들어 Google의 Lighthouse나 WebPageTest와 같은 도구들이 있음. 이러한 도구들과 함께 jampack을 사용하여 웹사이트의 성능을 종합적으로 분석하고 개선할 수 있음.
     * jampack을 도입할 때는 웹사이트의 구조와 사용하는 기술 스택을 고려하여 최적화 전략을 세워야 함. 또한, 오픈소스 도구를 사용함으로써 커뮤니티의 지원을 받을 수 있는 장점이 있지만, 프로젝트의 지속성과 유지 보수에 대한 책임도 고려해야 함.

        Hacker News 의견

     * 이 사용자는 자신이 찾던 것을 발견했다고 언급함. Sharp를 사용한 자체 스크립트로 이미지 최적화를 진행했었는데, Jampack을 사용한 후에는 그럴 필요가 없어졌다고 함. Quarto 정적 사이트를 빌드한 후 Jampack을 실행하니 폴더 크기가 32% 줄었고, 아직 눈에 띄는 단점은 없다고 함. PageSpeed Insights를 사용하여 Jampack 사용 전후의 성능 지표를 공유함.
          + 모바일 성능 지표
               o Jampack 사용 전: 성능 52, 접근성 73, 모범 사례 100, SEO 85
               o Jampack 사용 후: 성능 49, 접근성 80, 모범 사례 100, SEO 92
          + 데스크톱 성능 지표
               o Jampack 사용 전: 성능 90, 접근성 75, 모범 사례 100, SEO 82
               o Jampack 사용 후: 성능 85, 접근성 82, 모범 사례 100, SEO 91
     * 다른 사용자는 이 기능이 Apache와 Nginx를 위한 PageSpeed 모듈을 떠올리게 한다고 언급함.
     * 한 사용자는 Jampack이 마음에 들어 사용할 의향이 있으며, 비판적인 의견을 가진 사람들이 어떤 결점을 지적할 수 있는지 물어봄. 이 사용자는 Jampack이 C 코드를 최적화된 어셈블리로 컴파일하는 것과 같은 일을 하며, 개인적으로 하고 싶지 않은 작업을 수행한다고 생각함.
     * 또 다른 사용자는 ""중요한"" CSS를 식별하고 인라인으로 처리하는 개념에 관심이 있음. 중요하지 않은 CSS를 식별하는 원칙적인 방법이 있기를 바랐지만, 사용된 라이브러리는 페이지를 렌더링하여 어떤 규칙이 중요한지 최선을 다해 감지하는 방식을 사용하는 것으로 보임.
     * 한 사용자는 SSG 출력의 유니코드 범위에 따라 폰트를 부분적으로 선택하고, CSS에서 정의된 font-feature-settings에 따라 오픈타입 축을 고정하는 방법을 보고 싶어함.
     * Jampack이 매우 멋지다고 생각하는 사용자는 노드(Node.js)를 사용하는 것이 두려운 사람들을 위해 Docker 컨테이너를 만들어 사용을 단순화할 수 있는지 물어봄.
     * 웹페이지 레이아웃을 싫어하고 배우기를 거부하지만 때때로 해야 하는 사용자는 Jampack이 훌륭해 보인다고 언급함.
     * 실제 생산 환경에서 사용되는 정적 사이트 생성기에 대해 묻는 사용자가 있음. 이러한 도구를 사용하여 출력을 더 최적화할 수 있다고 생각함. 예를 들어, Divjoy React 웹사이트를 S3 버킷에서 제공할 수 있는 간단한 HTML로 변환하는 데 하루 종일 시도했지만 어려움을 겪고 있음. 자동으로 S3 버킷에 배포하고 도메인을 가리킬 수 있는 도구가 필요함.
     * Jampack이 SSG와 그 플러그인으로 처리하려는 여러 사용 사례를 커버하는 것처럼 보인다고 언급하는 사용자가 있음. Astro나 Eleventy를 선택하는 이유가 별도의 포스트-빌드 단계로 선호되는지 궁금해함. 개발 중 빠른 재빌드와 이미지의 너비 선언과 같은 것들을 도입함으로써 발생할 수 있는 미묘한 버그를 놓칠 가능성 사이의 트레이드오프가 있을 수 있음.
     * 실제 예제를 이메일로 보내주는 사람들에게 감사함을 표현하는 사용자가 있음. 이러한 지원에 대해 매우 감사하다고 함.
"
"https://news.hada.io/topic?id=14062","Jamba - 프로덕션급 Mamba 기반 AI 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Jamba - 프로덕션급 Mamba 기반 AI 모델

     * AI21 Labs가 맘바 아키텍처를 기반으로 한 세계 최초의 프로덕션급 AI 모델인 잠바(Jamba)를 출시
     * 잠바는 Mamba SSM(구조화 상태 공간 모델))과 전통적인 트랜스포머 아키텍처의 강점을 결합하여 인상적인 성능과 효율성 향상을 제공
     * 256K 토큰의 광범위한 컨텍스트 윈도우. 단일 80GB GPU에서 최대 140K 토큰을 처리

잠바의 하이브리드 아키텍처와 성능

     * 잠바는 하이브리드 SSM-트랜스포머 아키텍처를 통해 52B 파라미터 중 12B만을 추론 시 활용하는 혼합 전문가(MoE) 레이어를 활용
     * 메타의 Llama 2와 같은 경쟁 모델들보다 훨씬 긴 컨텍스트를 처리할 수 있으며, 높은 처리량과 효율성을 유지
     * 긴 컨텍스트에서 3배 더 높은 처리량을 제공, 비슷한 크기의 트랜스포머 기반 모델들보다 더 효율적
     * 블록과 레이어 접근 방식을 특징으로 하며, 각 잠바 블록은 주의 또는 맘바 레이어를 포함하고 이어서 다층 퍼셉트론(MLP)이 따라옴
     * 이 구조는 전체 8개 레이어 중 하나의 트랜스포머 레이어가 전체 비율로 사용됨
     * 다양한 벤치마크에서 뛰어난 결과를 보여주며, 동일한 크기의 최신 모델들과 비교하여 넓은 범위의 작업에서 성능을 뛰어넘거나 일치함

라이선스

     * 잠바는 아파치 2.0 라이선스 하에 오픈 웨이트로 출시되며, 허깅 페이스에서 사용 가능함
     * 현재 잠바는 상업적 사용에 필요한 안전장치 없이 연구 모델로 출시되었으나, AI21 Labs는 향후 몇 주 안에 더 안전한 버전을 출시할 계획임

  Hacker News 의견

     * Mamba에 대한 설명이 있는 최근 스레드에 대한 링크 공유
          + Mamba 설명 스레드와 더 나은 스레드에 대한 두 개의 링크 제공.
     * 변압기(transformer)와 상태 공간 모델(state space model) 레이어 간의 트레이드오프에 대한 호기심이 있는 이들에게 Sasha Rush의 비디오 추천
          + Sasha Rush의 비디오를 통해 변압기와 상태 공간 모델 레이어 간의 차이점에 대한 이해 도움.
     * 리눅스에서 4090 GPU 1개 또는 2개를 사용하여 작동시키려는 시도와 관련된 문제 공유
          + 리눅스에서 4090 GPU를 사용하여 체크포인트 로딩 중 문제 발생, VRAM은 충분한 것으로 보이나 실패함. 시도에 대한 흥미 표현.
     * Mamba를 사용한 전체 생산 수준 모델의 등장을 환영하면서, 긴 컨텍스트 윈도우 벤치마크에 대한 성능과 처리량 모두에 대한 관심 표현
          + Mamba가 긴 컨텍스트를 사용할 때 처리량은 크게 증가하지만 정확도는 약간 손실된다는 인상을 받음.
     * LLM(Large Language Models)의 비효율성에 대한 지적
          + 80GB GPU 메모리가 필요한 LLM의 비효율성에 대해 언급하며, 알고리즘 개선의 여지가 많다고 희망함.
     * 자기주의(self-attention) 레이어의 필요성에 대한 의문 제기
          + SSM과 MLP 레이어만 번갈아 사용하는 것이 아닌, 자기주의 레이어를 포함하는 이유에 대한 질문.
     * Jamba-v0.1-hybrid-MoE 모델의 성능 향상에 대한 설명
          + Jamba-v0.1-hybrid-MoE 모델이 기존 모델보다 더 긴 컨텍스트, 더 빠른 속도, 더 저렴한 비용을 제공하며, '하나의 모델이 모든 것을 지배한다'는 생각에 종지부를 찍을 것이라는 의견.
     * Mamba라는 이름의 중복 문제 지적
          + Mamba라는 이름이 이미 인기 있는 파이썬 패키지로 사용되고 있어, 이름 선택에 대한 중요성 강조.
     * Sparabo라는 이름에 대한 언급과 새로운 것들에 오래된 이름이 연결되는 것에 대한 재미 언급
          + Sparabo라는 이름의 존재 여부에 대한 질문과 새로운 것들에 오래된 이름이 사용되는 것에 대한 흥미 표현.
     * 긴 컨텍스트 작업이 MemGPT와 연관되어 있음을 언급하며, Mamba 아키텍처 모델에도 비슷한 개념이 적용될 수 있음을 제안
          + MemGPT와 관련된 긴 컨텍스트 작업에 대한 언급과 Mamba 아키텍처 모델에도 이를 적용할 수 있을 것이라는 의견 제시.
"
"https://news.hada.io/topic?id=14007","Nvidia가 개설한 무료 AI 강좌들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Nvidia가 개설한 무료 AI 강좌들

     * 10분/1시간/2시간/8시간 등 다양한 길이의 강좌들이 있음
     * Self-Paced Courses 에는 유료/무료가 섞여있는데, 이쪽에도 무료 강좌들 괜찮은게 별도로 있음

무료 강좌

     * Generative AI Explained
     * Building a Brain in 10 Minutes
     * An Even Easier Introduction to CUDA
     * Essentials of Developing Omniverse Kit Applications
     * Building Video AI Applications at the Edge on Jetson Nano
     * Assemble a Simple Robot in Isaac Sim
     * Build Beautiful, Custom UI for 3D Tools on NVIDIA Omniverse
     * Develop, Customize, and Publish in Omniverse With Extensions
     * Disaster Risk Monitoring Using Satellite Imagery
     * Getting Started with AI on Jetson Nano
     * Getting Started with USD for Collaborative 3D Workflows
     * Easily Develop Advanced 3D Layout Tools on NVIDIA Omniverse
     * Getting Started with DOCA Flow
     * How to Build Custom 3D Scene Manipulator Tools on NVIDIA Omniverse
     * Digital Fingerprinting with MorpheusTM
     * Introduction to DOCA for DPUs

Self-Paced Courses의 무료 강좌들

     * Building RAG Agents for LLMs
     * Augmenting LLMs using Retrieval Augmented Generation
     * Accelerate Data Science Workflows with Zero Code Changes
"
"https://news.hada.io/topic?id=14046","Ask HN: AI가 아닌 제품을 개발하고 계신분?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask HN: AI가 아닌 제품을 개발하고 계신분?

     * 요즘 AI 제품 얘기만 많은데, 그 외의 제품을 개발에 대해 묻는 HN의 질문과 답들
     * 합성 DNA 조립 회사를 운영 중임
          + 고객이 제공한 DNA 시퀀스를 실제로 만들어서 저렴한 비용으로 배송해줌
          + 대부분의 고객은 AI 단백질 디자이너들이며, 이 과정을 거의 1년간 개선하여 현재는 디자인에서 세포 내 합성 DNA 제작까지 약 일주일이 소요됨
          + 주당 약 600,000bp(베이스 페어)를 처리할 수 있으며, 이는 가장 작은 박테리아 게놈을 매주 합성할 수 있는 크기임
          + 자금을 스스로 조달하고 있으며, 로봇을 이용하여 작업을 돕고 있음
     * annotate.dev라는 Stripe 문서에서 영감을 받은 도구를 개발 중. 누구나 단계별 코드 워크스루를 만들 수 있게 해줌. OAuth 2.0 배우기 예제
     * 실제 보석 가격으로 마크업된 가짜 보석류를 판매하고, 선물을 준 사람은 모르는 사이에 숨겨진 기프트 카드 코드를 제공하는 아이디어는 어떨까?
          + 선물을 받는 사람은 기프트 카드를 실제로 원하는 것으로 사용할 수 있음
     * lynkmi.com이라는 소셜 링크 공유 사이트를 개발 중. 이 사이트는 사용자가 관심 있는 특정 주제만을 팔로우할 수 있게 해줌.
          + 알고리즘 피드를 피하고, 광고 없이, 작은 커뮤니티 중심
          + 사이트는 아직 초기 단계이지만, 사용자들이 유용한 링크를 찾고 있음
     * 친구들이 소유한 책과 연결하여 분산된 도서관을 구성할 수 있는 opnshlf.com이라는 서비스를 개발 중
          + 친구들과 책을 공유하고 대화를 나눌 수 있게 함으로써 새로운 주제에 대한 토론을 장려
     * 이미지를 픽셀 수준에서 분석하여 오디오 상응물을 합성하는 Golang 프로젝트를 개발 중
          + 이 프로젝트는 시각 장애인이 귀로 '보게' 하거나 청각 장애인이 눈으로 '듣게' 하는 것을 목표로 함
     * 지난 4년 이상 알고리즘 트레이딩 모델을 개발하고 자본으로 성공적으로 거래한 후, grizzlybulls.com을 전통적인 헤지펀드 수익화 경로의 대안으로 출시함
          + 2022년 1월 출시 이후 시장을 상당히 앞서고 있으며, 변동성이 낮고 최대 손실이 줄어듦
          + 모델은 다양한 지표를 사용하며, 많은 것이 맞춤형으로 제작됨
     * 개인 재무/비용 트래커인 Tender.run을 개발중
          + PWA로 실행되며 WASM을 이용해 Automerge CRDT와 SQLite를 이용
          + 브라우저에서 실행되며 오프라인으로도 동작
     * 사진에서 3D 모델을 만들어내는 Beholder.vision을 개발중
     * 원격 근무 가능한 일자리를 모아보는 크롤러를 만들었음. 24시간내에 찾은 새 원격 일자리를 메일로 보내줌 Bloomberry Remote Jobs
     * growfa.st라는 웹사이트에서 사용자가 프로모션 코드를 받기 위해 다양한 작업을 완료할 수 있는 위젯을 제공하는 서비스를 개발 중
     * 개발자/파워유저를 위한 웹 기반 스크래치 패드인 Edna 개발중
          + Obsidian 과 Simplenote 사이

   저도 AI가 아닌 제품을 개발 하고 있어서 댓글로 살짝 올려 봅니다.

   GeekNews 항상 잘 보고 있는데, SAP 관련 내용은 없더라고요.
   저는 SAP 쪽으로 먹고 살고 있다보니 ㅎㅎ;

   분야가 이렇다 보니 SAP 쪽 관련 솔루션/서비스를 개발 하고 있습니다. 어떻게 보면 이쪽 분야가 좁고 발전이 더디다 보니 오히려 할게 많은 것 같습니다.

   D1CC(Data1RM Cloud Connector)로 간단하게 소개해 드리면 SAP <-> Clolud를 연동하는 솔루션입니다.
   좋은 기회로 AWS에서 세미나를 하다 보니 SAP 어플리케이션 상에서 Cloud 서비스를 사용하는게 쉽지 않다는 점에 개발을 시작하게 되었습니다. 그리고 SAP 인증 까지 받았습니다.(돈이 엄청 들었습니다 ㅜㅜ)

   대표적으로 SAP 데이터를 Cloud 스토리지로 연동하여 저장하거나 분석하는데 많이 사용하고 계십니다.

   SAP 데이터가 필요한데 받기가 어렵다고 느끼시는 분들은 연락 주세요^^
   조만간 정리하여 Show에 한번 올리도록 하겠습니다.

   data1rm에 오시면 간단한 데모 영상도 보실 수 있습니다.

   해당 서비스 외에 SAP에서 쉽게 사용할 수 있는 API 서비스 및 Help Center(가칭)를 준비하고 있습니다.
"
"https://news.hada.io/topic?id=14061","Show GN: EXIF Frame","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: EXIF Frame

   사진 파일 속 EXIF Metadata를 읽고 사진에 프레임을 감싼 뒤

   프레임 위에 EXIF Metadata를 적어주는 간단한 웹 서비스를 만들었습니다.
"
"https://news.hada.io/topic?id=14040","Swift로 GNOME 앱 개발하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Swift로 GNOME 앱 개발하기

     * Swift는 깔끔한 문법, 정적 타이핑, 코드 작성을 용이하게 하는 특별한 기능 덕분에 사용자 인터페이스를 만드는 데 적합
     * Adwaita for Swift는 이러한 Swift의 기능을 활용하여 GNOME 플랫폼용 애플리케이션 개발을 위한 직관적인 인터페이스를 제공
     * GNOME은 리눅스용으로 인기 있는 오픈 소스 데스크톱 환경으로, 단순함과 접근성에 중점을 둠

코드 예시

     * Adwaita for Swift를 사용한 코드 예시에서는 Counter라는 뷰를 정의하여 창 내부의 사용자 인터페이스 부분을 표시
     * 뷰는 다른 뷰 내에 중첩되거나 창의 자식으로 추가될 수 있으며, 뷰 계층 내 위치에 따라 외부에서 내용을 수정할 수 있음
     * 이를 통해 다양한 결과를 생성하기 위해 뷰를 조합하는 것이 더 쉬워짐

동기

     * Swift를 사용하여 GNOME 앱을 작성할 수 있게 하기 위한 것
     * 기존의 libadwaita와 GTK 바인딩은 명령어 시리즈를 사용하여 사용자 인터페이스를 구축하는 명령형 코딩 스타일을 따름
     * Adwaita for Swift는 데이터 중심으로 구축되어 있어, 예를 들어 버튼을 눌러 count 변수를 변경하면 사용자 인터페이스가 자동으로 업데이트됨

사용의 용이성

     * 전통적인 바인딩은 값이 변경될 때마다 위젯이 내용을 업데이트하도록 객체에 함수를 호출해야 함
     * Adwaita for Swift는 저장해야 할 변수에 고유 식별자를 추가하기만 하면 나머지를 처리함

가독성

     * 데이터 중심 접근 방식은 가독성에 긍정적인 영향을 줌
     * 사용자 인터페이스 자체의 선언적 정의로 인해, 결과를 얻기 위한 방법보다 앱의 모양과 행동에 집중할 수 있음

크로스 플랫폼 앱 개발

     * Adwaita for Swift는 Linux, macOS, Windows에서 단일 코드베이스로 실행되는 앱을 작성할 수 있게 함
     * SwiftUI 앱과 GNOME 앱 간에 백엔드 Swift 코드를 공유할 수 있음
     * Swift를 사용하여 새로운 GNOME 앱을 만들 수 있으며, 훌륭한 코드 가독성과 메모리 안전성을 달성할 수 있음

앱 출시

     * Adwaita for Swift는 Flathub와 잘 작동하여, 데스크톱 리눅스용 앱의 설치와 출시를 단순화함
     * Swift 5를 위한 Freedesktop SDK 확장과 Swift Package Manager 종속성을 Flatpak 소스로 변환하는 도구가 있음

GN⁺의 의견

     * Swift와 GNOME의 결합은 개발자들에게 새로운 플랫폼에서의 앱 개발 기회를 제공하며, 특히 Swift의 강력한 언어 기능과 GNOME의 사용자 친화적인 환경이 결합되어 효율적인 개발 경험을 가능하게 함.
     * 이 기사는 리눅스 데스크톱 환경에 대한 새로운 접근 방식을 제시하며, 기존의 개발 방식에 비해 선언적 스타일을 통한 개발의 편의성과 가독성을 강조함.
     * 크로스 플랫폼 개발의 장점을 강조하며, 다양한 운영 체제에서 동일한 사용자 경험을 제공하는 것의 중요성을 부각함
     * 기술적인 배경 지식으로는, Swift의 정적 타이핑과 메모리 안전성은 앱의 성능과 안정성을 높이는 데 기여할 수 있음
     * 비판적인 시각에서 볼 때, GNOME 환경이 아닌 다른 데스크톱 환경에서의 호환성 문제나 성능 이슈가 발생할 가능성을 고려해야 함

   https://stuff.mit.edu/afs/athena/…

   Gnome 은 노움이 아니라 그놈 으로 읽는것이 공식 발음입니다.

   훌륭하네요.

        Hacker News 의견

     * SwiftUI와 유사한 래퍼에 대한 논의
          + SwiftUI와 유사한 선언적 래퍼를 제공하는 접근 방식에 대해 언급함. Gnome 기능을 위한 SwiftUI 스타일의 래퍼를 제공하고자 함이 핵심 전제임.
          + SwiftUI 자체는 적절한 스레드에서 처리/업데이트를 수행하고 데이터 바인딩을 올바르게 하는 것과 관련하여 성장통을 겪고 있음.
          + swift.org 또는 Apple의 블로그 글들은 대체로 잘 동작하는 경로를 보여주는 작은 데모에 불과함. 새로운 프레임워크나 플랫폼을 논할 때, 저자들이 주요 이슈를 이해하고 해결하며 개발을 지속할 것이라는 더 많은 증거를 보고 싶어함.
          + 크로스플랫폼 UI 프레임워크는 빠르게 복잡해지며, Flutter나 Java/Eclipse 등과 같이 사용자나 클라이언트에게 장애물이 될 수 있는 장기적인 문제들을 가지고 있음.
          + Swift의 경우, 여러 가지 동시성 모델과 Apple 플랫폼과 Linux에서의 다른 동작(공식적으로 UI가 테스트되지 않음)으로 인해 도움이 되지 않음.
     * 다른 프로젝트와 도구들에 대한 언급
          + SwiftUI와 유사한 래퍼, Tokamak, 그리고 내장형 사용 사례를 위한 FlutterSwift에 대한 링크를 제공함.
     * 개인적인 프로젝트 경험 공유
          + Vala와 gtk4를 사용하여 작은 사이드 프로젝트를 작성한 경험을 공유함.
          + Blueprint의 포맷을 좋아했지만, 좀 더 고급 기능을 수행하는 방법에 대한 문서 부족으로 어려움을 겪음.
          + Vala 언어를 매우 좋아하지만, 모든 로직과 모델을 Vala로 작성한 다음, UI에 이 Swift 라이브러리를 사용하는 것이 좋을 것이라고 생각함.
     * 과거의 경험과 비교
          + 약 20년 전 Mono를 사용하여 C#으로 Gnome 앱을 작성했던 경험과 유사함을 느낌.
     * Mac에서의 실행 문제
          + Mac에서 실행을 시도했지만, adwaita.h가 누락된 문제를 겪음.
     * 개인적인 ""꿈의 프레임워크""에 대한 의견
          + SwiftUI와 같은 오픈 소스이며 GTK4를 타겟팅하는 것이 꿈의 크로스플랫폼 데스크톱 UI 프레임워크에 가까움.
          + Swift 문법은 익숙해지는 데 시간이 걸리지만, 일단 모든 개념에 익숙해지면 매우 사용하기 좋은 언어임.
          + Swift를 사용하지 않는 유일한 이유는 Linux에서의 지원이 Apple 플랫폼만큼 좋지 않기 때문임.
     * gtk4에서의 3D 지원에 대한 질문
          + gtk4에서 3D를 사용할 때 여전히 OpenGL 컨텍스트에 제한되어 있는지에 대한 의문을 제기함.
     * 함수 매개변수에서의 키 사용에 대한 의견
          + 함수 매개변수에 키를 도입하는 것이 실수였다고 생각함.
     * Swift 코드베이스 테스팅에 대한 논의
          + Swift 코드베이스를 테스트하는 방법에 대해 논의함. 테스팅에 관한 문서가 부족하고, 모의 객체, 스텁, 보고, 코드 커버리지 등에 대한 전략을 제공하지 않음.
          + 네트워크 확장을 사용하는 앱의 경우, 서명 제한 때문에 물리적 기기에서만 테스트해야 함.
          + iOS와 macOS 기기 모두를 지원하는 좋은 물리적 기기 CI 서비스를 아는 사람이 있는지에 대한 질문을 함.
     * Swift가 데스크톱 개발에 흥미로운 옵션이 되고 있음을 발견
          + Swift가 데스크톱 개발에 흥미로운 옵션이 되고 있다는 것을 최근 발견함. 이 예제 외에도 macOS와 Windows를 위한 Arc를 추가함.
"
"https://news.hada.io/topic?id=13982","소프트웨어 개발의 미래에 대한 고찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          소프트웨어 개발의 미래에 대한 고찰

     * 대규모 언어 모델(LLMs)은 이미지, 텍스트, 코드를 생성할 수 있게 되면서 창작 분야에서 큰 파장을 일으킴
     * 처음에는 사람의 손이 잘못 그려진 그림, 잘못된 사실을 말하는 등 웃긴 결과물이 많았지만, 점차 개선되고 있음
     * 이러한 모델들이 등장하기 전에는 기계가 창의적으로 생각할 수 없다는 것이 자동화에 대한 주된 반대 논리였으나, 이제 그 주장은 점점 약해지고 있음
     * 이제 어디로 가야할까?

Framework: 소프트웨어 개발 능력 수준

     * 소프트웨어 개발은 단순히 코드를 작성하는 것 이상임
     * 프로그래머의 이미지는 어두운 방에서 컴퓨터를 바라보며 열심히 코드를 타이핑하는 사람이지만, 실제로는 코드 작성보다 다른 작업에 더 많은 시간을 할애함
          + 비즈니스 사용자로부터 요구사항 수집
          + 요구사항을 코드로 모델링할 수 있도록 정제
          + 디자이너, 제품 관리자와 같은 팀원과 솔루션 시각화 및 계획 수립
          + 다른 개발자와 기술 설계 및 정제
          + 인프라 설정, 구성, 보일러플레이트 등
          + 실제 코드 작성
          + 디버깅, 타인의 코드 이해, 문서 작성 등
          + 프로덕션 배포
          + 프로덕션 이슈 대응
          + 그 외 많은 작업들
     * ""AI가 개발자를 대체할 것이다""라는 말은 AI가 위의 모든 작업에 능숙해야 한다는 것을 의미함
     * 하지만 위 목록을 보면 이러한 작업 중 일부는 향후 자동화될 수도 있지만 아직은 자동화될 수 없는 것처럼 보임

자율주행 자동차의 자동화 수준 분류

     * 자율주행 자동차 분야는 자동화 수준을 분류하는 방법을 개발함
     * 이 분류는 현재 기술이 무엇을 할 수 있는지 명확하게 설명하고, 흑백논리를 피함
     * 이런 분류를 AI 기반 소프트웨어 개발에 대해 적용해 보면
          + 가장 낮은 단계는 이전에 우리가 가지고 있던 것, 즉 업무에 AI가 관여하지 않는 단계. 물론 컴파일러, 빌드 프로세스 등과 같은 다른 유형의 자동화가 있었지만 이는 AI가 아니라 사람이 작성한 결정론적 자동화에 해당
          + 그 다음 단계는 현재 우리가 가진 것
               o 개발자들이 ChatGPT 또는 GitHub Copilot을 사용하여 지원받는 것
               o 개발자들은 테스트 작성, 상용구 코드, 리팩토링, 코드/오류를 이해하기 위해 이를 사용
               o 채팅을 통해 동료 개발자와 대화하면서 질문하고 도움을 받을 수는 있지만 컴퓨터에 대한 액세스 권한이 없으므로 파일을 만들거나 빌드 명령을 실행하거나 프로덕션에 배포할 수는 없음
          + 가장 높은 단계는 프로젝트의 일부 또는 전체를 ""AI 코더""에게 위임하는 것
               o AI 코더가 요구 사항을 받아 코드를 작성하고 오류를 수정한 후 최종 제품을 프로덕션에 배포
               o 아직 이런 일이 일어나기까지는 몇 달이 더 걸릴 것이라고 생각했지만, 지금은 간단한 개발 작업만 수행할 수 있지만 앞으로 개선될 가능성이 있다는 것이 Devin 데모를 통해 증명됨 Devin, 첫 번째 AI 소프트웨어 엔지니어
     * AI 모델의 능력 외에도 솔루션이 얼마나 정확한지 생각해봐야함
          + 이러한 모델은 환각에 취약하거나 원하는 것을 얻기 위해 특정 방식으로 프롬프트해야 하는 경향이 있음
          + 이로 인해 도입에 마찰이 발생하고 대부분의 사람들이 이 시점에서 AI 비서를 포기하게 됨
          + 하지만 이 역시 개선되고 있으며, 최신 모델에서는 이러한 수준의 프롬프트 엔지니어링이 필요하지 않음
     * 또한 모델은 학습 데이터에 의존하는 대신 웹을 탐색하여 '학습'할 수 있어야 함
          + 이는 새로운 버전의 라이브러리와 프로그래밍 언어가 도입됨에 따라 중요한 사항

Framework: 아웃소싱된 소프트웨어 개발

     * 이제 역량을 구축했으니 팀이나 조직 구조에 어떤 영향을 미칠까? 회사는 다양한 방식으로 소프트웨어 개발을 수행함:
          + 완전 인하우스
          + 소수의 벤더와 함께 대부분 인하우스
          + 다수의 벤더와 함께 조금만 인하우스
          + 완전 벤더
     * AI 코더를 아웃소싱된 소프트웨어 벤더/컨설턴트로 생각할 수 있음
     * 회사 내부 팀이 벤더의 작업을 감독하는 것이 중요함
          + 계약을 통해 이 문제를 해결할 수도 있지만, 계약은 일반적으로 특정 공급업체나 프로젝트에만 적용되며 이 방법으로는 장기적인 목표를 강제할 수 없음
          + 벤더를 안내할 수 있는 소규모의 사내 팀이라도 두는 것이 좋음
          + 마찬가지로, EC2 인스턴스처럼 AI 코더를 임대할 수 있는 경우에도 소프트웨어 개발자로 구성된 사내 팀이 작업을 감독하는 것이 유리

Framework: 소프트웨어 개발은 복잡성 모델링

     * 비즈니스 문제를 해결하는 것에 대해 이야기할 때, Excel을 예로 들 수 있음.
     * Excel은 진입장벽이 매우 낮아서 이걸로 데이터를 정리하고, 데이터 분석을 수행하거나, 일부 프로세스를 자동화 가능
     * 하지만, 세분화된 액세스 제어, 지원되지 않는 시스템과의 통합 기능, 테스트 가능성, 재사용성, 공급업체 종속성 등의 기능이 없기 때문에 복잡한 비즈니스 워크플로우에는 적합하지 않음
     * Power Automate 등과 같은 ""로우 코드"" 솔루션도 마찬가지
     * ""비즈니스 사용자가 소프트웨어 개발자의 도움 없이 AI 코더를 사용하여 이러한 복잡한 워크플로우를 만들 수 있을까?""
     * 생각해 보면 Excel과 로우 코드 도구는 수십 년 동안 존재해 왔는데 소프트웨어 개발이라는 직업은 왜 여전히 존재할까?
     * 그것은 소프트웨어 개발을 단순히 코드를 작성하는 것으로 생각하기 때문
     * 복잡한 문제에는 이러한 복잡성을 효과적으로 관리하고 비즈니스 문제를 실제 도메인에서 디지털 모델로 변환할 수 있는 사람이 필요
     * 다시 말해, 토목 기술자의 도움 없이 유튜브 튜토리얼을 통해 나무 창고를 지을 수 있다고 해서 10층짜리 건물도 똑같이 지을 수 있고, 지어야 한다는 뜻은 아님
          + 이 일을 제대로 하는 방법을 배우다 보면 서서히 토목 기술자가 될 수 있음
          + 다만 제대로 배우기 위해 시간을 투자할 것인지, 아니면 숙련된 엔지니어를 고용할 것인지의 문제일 뿐
     * 따라서 Excel을 사용하든 최신 AI 코더를 사용하든, 복잡한 로직을 모델링하고 있다면 여전히 소프트웨어 개발자라고 생각
     * 다만 스프레드시트 수식, 코드, 프롬프트 등 비즈니스 요구 사항을 표현하는 도구가 다를 뿐

Framework: 파이의 크기

     * 이 주제를 둘러싼 대부분의 불안은 소프트웨어 개발 시장의 규모가 그대로 유지된다는 가정, 즉 AI 코더가 서서히 인간으로부터 '시장 점유율'을 빼앗아갈 것이라는 가정을 전제로 함
     * ""비즈니스 문제 해결"" 시장의 크기가 소프트웨어 개발보다 훨씬 크기 때문에 소프트웨어 개발이 곧 사라지지는 않을 것임

Framework: 형식적 비즈니스 논리 정의

     * 비즈니스 로직은 항상 명확한 형식으로 정의되어야 함
     * 그렇기 때문에 프로그래밍 언어는 'if', 'switch' 등과 같은 영어 단어를 사용하더라도 그 단어의 의미를 매우 엄격하게 정의하고 잘못된 단어를 사용하면 작동하지 않음. 생각해 보면 Excel 수식이나 로우 코드 흐름도 마찬가지
     * 미래에는 AI 코더가 대화형 영어로 주어진 명령어를 통해 소프트웨어 제품을 생성할 수 있다고 해도 백엔드에서 생성되는 비즈니스 로직에 대한 기본적인 공식 정의는 여전히 존재할 것이라고 생각
     * 오늘날 우리가 사용하는 언어나 프레임워크와는 매우 다르게 보일 수 있지만, 비즈니스 로직의 공식적인 정의는 '코드'와 매우 유사하게 들림
     * AI 코더가 이러한 비즈니스 로직을 결정론적인 방식으로 대화형 영어로 생성할 수 있을 때까지는 백엔드에서 생성된 코드를 이해하고 필요한 경우 변경할 수 있는 사람이 여전히 필요. 바로 소프트웨어 개발자

결론

     * 업무의 성격이 바뀌고 우리가 사용하는 도구가 지금과는 매우 달라지겠지만, 가까운 미래에도 소프트웨어 개발자를 위한 시장은 여전히 존재할 것이라고 생각

   Devin, 첫 번째 AI 소프트웨어 엔지니어
   OpenDevin - AI 소프트웨어 엔지니어 Devin의 오픈소스 구현체

   OpenAI가 유명세를 타기 전까지만 해도 AI 도입이 가장 늦게 혹은 불가능하다고 여겼던 예술분유 부터 AI가 영역을 확장하는 것을 보면, 지금 '사람'만이 가능하다고 생각하는 것들이 '안전'하지 않을 수 있다는 생각이 문득 들었습니다.

   본문과 https://news.hada.io/topic?id=13557 글 처럼
   지금 개발자 파이는 분명 줄어들 것이고, 더 가속화 되겠죠?

   AI 프롬프트 중요성이 날로 부각되면서, 점점 더 명확한 스펙 정의와 요건 정리가 필수임을 각성하는 유저가 많아질것이고, 이것은 결국 향후 개발자가 작업하는데 유리한 방향으로 작용될 수 있을거 같네요.

   코드는 사람을 위한 것이고, 기계가 코드를 작성한다는 건 사람이 여전히 필요하다는 것이니 먼 미래의 발전방향은 아니라고 생각합니다. 초기에 실험했던 backend-GPT (https://github.com/RootbeerComputer/backend-GPT) 처럼 일종의 블랙박스에 우리가 원하는 질문을 던져넣으면 DB 에 접근해서 데이터를 처리하고 그 앞뒤의 경험에는 사람이 일부 개입하는 형태로 발전할 거라고 봅니다.

   chat GPT, Copilot 에 대해서 많이들 이야기 하는 부분중에 프롬프트 엔지니어링에 대해서 언급이 되는 것 같습니다. 우리가 주로 프로그래밍을 위해 회의를 하며, 말로써 빠르게 의사 전달을 하고 정리해서 확인하고 하는 과정들을 어떻게 AI 코더에게 효율적으로 전달하고 의사소통할 수 있는가도 중요한 요소라고 생각되네요 ^^.

     ""AI가 개발자를 대체할 것이다""라는 말은 AI가 위의 모든 작업에 능숙해야 한다는 것을 의미함

   -> 사람이 하기 때문에 필요한 절차일 수 있고, 결국 저 절차들을 다 거쳤을 때, 나오는 코드라는 결과물은 특정한 패턴을 지닐 수 있다고 생각합니다. 마치 바둑에서도 포석이나 정석 같은 것이 필요하다고 생각했지만 그건 인간의 인지 영역 안에서 정보를 처리하기 위한 어쩔 수 없는 방법이었을 뿐이라는 게 밝혀졌듯이요.
"
"https://news.hada.io/topic?id=13993","바르셀로나의 사그라다 파밀리아, 2026년 완공 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     바르셀로나의 사그라다 파밀리아, 2026년 완공 예정

바르셀로나의 사그라다 파밀리아 완공 예정

     * 바르셀로나 중심부에 위치한 사그라다 파밀리아 대성당이 140년이 넘는 시간 동안의 건축 끝에 2026년에 마침내 완공될 예정임.
     * 마지막 여섯 번째 탑의 건설이 성당 구조의 완성을 표시할 것이며, 이 사이트를 관리하는 조직이 지난주 발표함.
     * ""승천의 예배당은 2025년에, 예수 그리스도의 탑은 2026년에 완성될 것으로 예상된다""고 사그라다 파밀리아가 2023년 연례 보고서 발표와 함께 성명에서 밝힘.

세계에서 가장 높은 교회가 될 예정

     * 예수 그리스도의 탑은 높이 172.5미터에 17미터 높이의 네 팔이 달린 십자가로 마무리될 예정임.
     * 완공되면, 사그라다 파밀리아는 독일의 울름 대성당을 제치고 세계에서 가장 높은 교회가 됨.

안토니 가우디의 설계와 역사

     * 1882년에 카탈루냐의 유명한 건축가 안토니 가우디에 의해 설계된 대로 건축이 시작됨.
     * 가우디는 18개의 거대한 탑을 계획했으며, 각각은 성경 인물을 상징함: 12사도, 4복음서 저자, 성모 마리아, 예수.
     * 가우디가 1926년에 사망했을 때, 프로젝트의 약 10%-15%만이 완성되었음.

건축 과정과 유네스코 세계유산

     * 건축은 이미 느린 편이었으나, 1930년대 후반 스페인 내전으로 인해 중단되었고, 가우디의 대부분의 설계와 모델이 파괴됨.
     * 현재의 설계는 남아 있는 자료와 재구성된 자료, 그리고 원래의 설계를 재상상한 적응안을 기반으로 함.
     * 1984년에는 유네스코 세계유산으로 지정되었고, 2010년에는 교황 베네딕토 16세에 의해 종교적 예배를 위해 성전으로 봉헌됨.

불법 건축과 건축 허가

     * 교회 건축은 137년 동안 불법적으로 진행되었으며, 2019년에 바르셀로나 시의회로부터 건축 허가증이 발급됨.
     * 당국은 2016년에야 건축 허가가 결코 부여되지 않았다는 ""이상함""을 발견함.

GN⁺의 의견

     * 사그라다 파밀리아는 안토니 가우디의 걸작으로, 그의 독창적인 건축 스타일과 종교적 상징주의가 결합된 예술 작품으로 평가받음.
     * 이 대성당은 건축학과 예술사를 공부하는 학생들에게 중요한 연구 대상이며, 건축과 예술의 경계를 허무는 독특한 사례로 여겨짐.
     * 완공 이후에는 바르셀로나의 관광 산업에 긍정적인 영향을 미칠 것으로 기대되며, 세계적인 랜드마크로서의 가치가 더욱 상승할 것임.
     * 건축 과정에서의 불법적인 측면과 허가 문제는 건축 및 도시 계획 분야에서의 규제와 관리의 중요성을 상기시키는 사례임.
     * 이와 유사한 건축 프로젝트로는 프랑스의 르 코르뷔지에의 작품들이나 브라질의 오스카 니마이어의 건축물 등이 있으며, 이들 또한 현대 건축의 이정표로 평가받음.

        Hacker News 의견

     * 창문을 통해 햇빛이 들어올 때 방문하면 정말 놀라운 경험임.

     ""가우디와 사후 협업은 불가능하다""는 말을 보고, 몇 분만 성당을 걸어다녀도 그 말이 사실임을 확인할 수 있음.
     * 사그라다 파밀리아 주변 건물들을 보면 현대 건축이 어떻게 변했는지 다시 한번 의문이 듦.

     현대 건축은 우리 도시를 파괴했으며, 2차 세계대전 이후 지어진 예쁜 건물을 찾기 어려움. 유럽의 역사적인 도시들과 비교할 수 없음.
     * 사그라다 파밀리아 건설의 약 50%는 분실된 가우디의 프로젝트를 기반으로 함.

     거의 완전히 현대적인 프로젝트임.
     * 기사에서 사그라다 파밀리아를 바르셀로나의 대성당이라고 잘못 언급함.

     사실은 소성당이며 대성당이 아님.
     * 성당을 좋아하지만, 사그라다 파밀리아에 대해 크게 감동받지 못함.

     미래의 공간 요구사항(계단 등)이 정당화될 수 있는지 의문을 가짐.
     * 사그라다 파밀리아 건설 속도를 가속화시킨 여러 재료 및 기술 발전이 있음.

     건설에 사용되는 기술이 시작 이래로 크게 발전함.
     * 바르셀로나에 거주하며, 사그라다 파밀리아는 정말 볼만한 장소임.

     그러나 대성당이 아닌 소성당임.
     * 완벽한 9월 오후에 혼자 공원을 걸으며 교회를 찾음.

     자연과 사회의 경계에서, 돌과 유리의 대량이 결합된 이 건축물 앞에 서서, 보고 또한 보임을 느끼는 것은 인생에서 큰 특권 중 하나임.
     * 가우디의 계획은 성당 앞에 큰 계단을 만들어 새로운 공공 광장을 조성하는 것이었으나, 이를 완성하기 위해서는 수백 개의 아파트를 철거해야 함.

     이 아파트들은 수십 년 전에 사그라다 파밀리아의 완성이 예정되어 있었기 때문에 할인된 가격에 구입됨. 이제 완성이 다가오자, 주민들은 아파트를 유지하고 싶어 함.
     * 스페인은 늦은 시점에 경이로운 건축물을 통해 승리점수를 얻으려 함.

   배경 지식: 사그라다 파밀리아는 스페인 바르셀로나에 있는 유명한 로마 가톨릭 교회로, 건축가 안토니 가우디의 미완성 작품입니다. 1882년에 착공하여 현재까지도 건설이 진행 중이며, 가우디의 독특한 건축 스타일과 긴 건설 기간으로 인해 전 세계적으로 유명합니다.
"
"https://news.hada.io/topic?id=14044","보잉이 비행기 제작 방법을 기억하는 모든 사람들에게 한 일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    보잉이 비행기 제작 방법을 기억하는 모든 사람들에게 한 일

보잉의 자살 임무

     * 존 바넷은 보잉에서 26년을 근무한 품질 관리자로, 그의 상사는 그를 괴롭히고 비하하는 데 대부분의 시간을 보냄.
     * 바넷은 자신의 지식과 세부 사항에 대한 집착이 동료들과의 갈등을 유발한다는 평가를 받음.
     * 그러나 실제로 바넷은 보잉을 사랑하고 지식을 공유하는 데 열정적인 인물로, 동료들에게 존경받음.

지식의 재정의

     * 보잉은 90년간의 성장을 통해 습득한 지식을 잊어가는 상태에 빠짐.
     * CEO 짐 맥너니는 경험보다 리더십을 더 중요시하는 관리 방식을 선호하며, 경험이 풍부한 직원들을 조기 은퇴시킴.
     * 맥너니는 787 드림라이너 개발을 외부 공급업체에 맡기며 비용 절감과 노조 파괴를 약속했으나, 결과적으로 예산 초과와 일정 지연을 초래함.

재앙의 청소부

     * 보잉은 787의 일부 기체를 설계한 이스라엘 회사의 실수로 인해 금융 위기에 처한 공급업체를 구제해야 했음.
     * 보잉은 워싱턴 주에서 경험 많은 관리자들을 남쪽 캐롤라이나의 비노조 공장으로 이동시켜 교육을 진행함.

경험 있는 직원들의 탄압

     * FAA가 787의 첫 인도를 승인한 후, 맥너니의 부하들은 경험과 지식이 있는 직원들을 괴롭히고 해고하기 시작함.
     * 품질 관리 엔지니어와 좋은 기술자들이 노조 지지를 이유로 의심스러운 위반 사항으로 해고됨.

품질 검사의 외주화

     * 보잉은 품질 검사자들에게 자신들의 업무의 90%를 감독하던 정비사들에게 외주화하도록 지시함.
     * 바넷은 이러한 자체 검사가 불법이라고 생각했으나, 안전 관행에 반대하는 내부 고발자들은 종종 해고됨.

문제의 기록

     * 바넷은 기체 바닥 패널을 설치하는 기술자들이 전선 묶음과 전기 상자 사이에 긴 티타늄 조각을 버리는 것을 발견함.
     * 그는 300개의 산소 마스크 중 75개가 실제로 산소를 공급하지 않는다는 것을 기록함.
     * 바넷의 팀은 인도 예정인 기체의 300개 결함 목록을 작성하고, 400개 이상의 부적합 항공기 부품이 사라져 불법적으로 설치되었을 가능성이 있음을 발견함.

품질 관리자의 고립

     * 바넷과 같은 고집스러운 품질 관리자는 드물었으며, 많은 품질 검사자들이 괴롭힘 환경에서 결함을 문서화하지 않았음.
     * 바넷은 자신이 문제를 지적하는 것을 멈추도록 비난을 받고 있다고 느끼며, 회사에서 퇴출되었다고 인식함.

보잉의 추락

     * 바넷은 보잉의 주식 가치가 자신이 회사를 떠난 후에도 계속 상승하는 것을 보며 회사가 얼마나 철저히 해체되었는지에 대해 우려함.
     * 737 MAX 소프트웨어 프로그램의 결함으로 인해 에티오피아에서 추락사고가 발생하고, 보잉은 모든 사망에 대한 책임이 있음이 명백해짐.

지식의 손실

     * 보잉에서 지식이 소진되어 더 이상 문제를 해결할 팀이 남아 있지 않음.
     * 스탠 소셔는 보잉이 경험 많은 직원들에 대한 전쟁으로 인한 두뇌 유출의 재앙적인 영향에 대해 수십 년 동안 경고해 왔음.

보잉의 미래

     * 보잉의 가장 큰 노조인 기계공 노조는 회사를 구하기 위해 이사회 자리를 요구함.
     * SPEEA는 다음 CEO로 항공우주 엔지니어를 선출할 것을 요구하고 있으나, 현재까지는 그럴 가능성이 낮아 보임.

GN⁺의 의견

     * 이 기사는 보잉이 경험 많은 직원들을 소외시키고, 비용 절감과 이윤 극대화에 집중하면서 발생한 문제들을 조명함.
     * 보잉의 사례는 기업이 단기 이익에 치중할 때 장기적으로 기업 문화와 제품의 안전성에 미치는 부정적인 영향을 보여줌.
     * 이러한 문제는 항공우주 산업뿐만 아니라 다른 고도의 기술과 전문성을 요구하는 산업에서도 발생할 수 있음을 시사함.
     * 기술적인 결함이나 관리 문제가 있는 기업의 제품을 사용할 때는 추가적인 안전 검증이 필요할 수 있음.
     * 보잉과 유사한 문제를 겪고 있는 다른 기업이나 프로젝트가 있다면, 소비자와 업계 종사자들은 이러한 정보를 바탕으로 더 안전하고 신뢰할 수 있는 대안을 찾아야 함.

        Hacker News 의견

     * 기사에 대한 첫 번째 댓글 요약:
          + 본문은 보잉이 맥도넬 더글러스와의 합병 후 급격한 쇠퇴를 시작했다는 새로운 정보를 제공하지 않음.
          + 기사는 보잉이 어떻게 자기 자신을 해체해 나갔는지에 대한 구체적인 사례를 제공함.
          + 보잉이 경험 많은 직원들을 어떻게 회사를 떠나게 했는지, 품질 문제를 어떻게 은폐했는지, 비행기를 제대로 만드는 데 필요한 기관 지식을 체계적으로 파괴했는지에 대한 세부 사항을 다룸.
     * 두 번째 댓글 요약:
          + 한 관리자가 직원을 괴롭히고 감시하며, 비협조적이라는 소문을 퍼뜨리고, 이메일 사용과 비행기 결함 수정을 요구한 것에 대해 징계하는 사례는 기술 회사의 일반적인 중간 관리자의 행동으로 보임.
          + 이러한 행동은 기업 구조 내 권력 불균형의 불행한 결과로, 관리자에게는 권력이 있지만 그들을 책임지게 할 수단은 거의 없음.
     * 세 번째 댓글 요약:
          + 기계공이 자신의 작업을 스스로 검사하는 것은 미친 짓이자 불법이라고 생각하는 '스왐피'의 의견이 소프트웨어 산업에서 일어난 변화와 유사함.
          + 엔지니어들이 엔지니어링뿐만 아니라 자신의 소프트웨어 테스트, 프로젝트 일정 관리 등을 해야 하지만, 소프트웨어의 경우 사람이 죽지는 않고 단지 자주 고장 나고 업데이트가 필요한 저질 소프트웨어가 됨.
          + 엔지니어링이 얼마나 어려운지 과소평가하고, 결과적으로 엔지니어에게 더 많은 것을 기대하는 전반적인 테마가 있으며, 이는 기술적 지식이 없는 권력자들에 의해 발생함.
     * 네 번째 댓글 요약:
          + 짐 맥너니(Jim McNerney)는 미국의 중요한 회사에 무슨 짓을 했는지 의회에서 설명하도록 강제되어야 함.
          + 주주 가치 이론에 적절히 저항하고, 굴욕은 그 과정에서 과소평가된 요소임.
     * 다섯 번째 댓글 요약:
          + 보잉의 품질 저하는 알려진 사실이지만, 엔지니어링과 특히 기계공에 대한 태도는 매우 어리석음.
          + 경험 많은 기계공을 찾기 어렵고, 특히 공구 제작자는 더욱 그러함.
          + 기계공의 시작 급여가 그리 높지 않고 많은 작업장이 아웃소싱에 밀려 경험 많은 직원들이 은퇴하면서 큰 격차가 생김.
     * 여섯 번째 댓글 요약:
          + '프린스 짐' 맥너니는 기사에서 비판의 대상이 되지만, 이미 CEO 자리에서 물러남.
          + 그는 737 MAX 개발을 지휘했지만, 스캔들 이전에 은퇴했으며, 그의 후임자 데니스 뮬렌버그는 737 MAX의 낮은 품질에 대해 해고됨.
          + 현재 CEO인 데이브 캘훈은 GE 출신으로, 맥너니와 같은 배경을 가지고 있으며, 항공 분야의 직접적인 경험이 없음.
          + 캘훈은 올해 말에 은퇴할 예정이며, 그의 후임자가 회계 중심의 최근 CEO들보다 합병 전 CEO들과 더 비슷하기를 희망함.
     * 일곱 번째 댓글 요약:
          + 성과 지표는 나쁜 직원들이 좋은 직원들과 동등한 위치를 차지할 수 있게 해줌.
          + 어디에서도 '스왐피'가 회사에 큰 벌금을 면하게 한 전문성 때문에 더 높은 인상을 받았다는 것을 정량적으로 보여주는 지표는 추적되지 않음.
     * 여덟 번째 댓글 요약:
          + 보잉의 내부 고발자가 진실을 말했다는 기사 링크 제공.
     * 아홉 번째 댓글 요약:
          + 보잉의 자회사에서 일하던 중 737 Max MCAS 사건이 발생함.
          + 회사는 가능한 많은 직원을 '9000달러짜리 USB 케이블'과 같은 시간과 재료를 기반으로 한 방위 작업에 투입함.
          + 고급 자바 아키텍트였던 직원은 C 언어를 사용한 HIL 구성 요소 테스트로 '재교육'되었으며, 이는 현금 흐름을 개선하기 위한 조치로 보였지만, 실제로는 거의 모든 소프트웨어 직원이 회사를 떠나게 만들어 현금 흐름을 개선함.
          + 자회사는 여전히 소프트웨어 팀을 재건하기 위해 몇 년째 고군분투 중임.
     * 열 번째 댓글 요약:
          + 보잉은 지식에 대한 새롭고 매혹적인 이론의 영향을 받아, 지식을 지적 재산, 영업 비밀, 데이터로 축소하고, 숙련되고 경험 많은 노동력이 가진 '사고'와 '이해' 및 '복잡한 추론'을 사실상 가치 없는 것으로 간주함.
          + 이로 인해 지혜와 경험 많은 사람들이 과소평가되고, 결과적으로 모든 것이 무너짐.
"
"https://news.hada.io/topic?id=13992","TorchTune - Meta가 공개한 LLM 파인 튜닝을 위한 Pytorch 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           TorchTune - Meta가 공개한 LLM 파인 튜닝을 위한 Pytorch 라이브러리

     * LLM을 쉽게 제작하고, 미세 조정하고, 실험할 수 있는 파인튜닝용 Native-Pytorch 라이브러리
     * 인기 LLM의 네이티브 PyTorch 구현
     * HF 포맷의 체크포인트를 포함한 다양한 형식의 체크포인트 지원
     * 레퍼런스 벤치마크와 포괄적인 정확도 검사를 통해 널리 사용되는 미세 조정 기법에 대한 훈련 레시피 제공
     * EleutherAI 평가 하네스를 통한 훈련된 모델 평가
     * 훈련을 위한 HuggingFace 데이터세트와의 통합
     * PyTorch Distributed의 FSDP를 사용한 분산 훈련 지원
     * 훈련 실행을 쉽게 구성할 수 있는 YAML 구성
     * [예정] TorchAO의 저정밀 dtype 및 양자화 기법 지원
     * [예정] 다양한 추론 엔진과의 연동 지원
"
"https://news.hada.io/topic?id=13994","스레드 대신 async/await를 선택하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      스레드 대신 async/await를 선택하는 이유

     * Rust 커뮤니티에서 스레드는 async/await 가 할수 있는걸 다 할 수 있고 더 간단한데 왜 async/await를 선택하는가?라는 질문이 자주 보임
     * Rust는 저수준 언어로, Coroutine의 복잡성을 숨기지 않음. 이는 프로그래머가 비동기를 고려할 필요도 없이 기본적으로 비동기로 되는하는 Go와 같은 언어와 반대되는 개념
     * 똑똑한 프로그래머는 복잡성을 피하려고 노력하는데, async/await는 왜 필요한가?

배경 알아보기

     * Rust는 저수준 언어임. 코드는 일반적으로 선형적이며, 한 작업이 끝나면 다른 작업이 실행됨.
     * 웹 서버와 같은 동시에 많은 작업을 실행해야 하는 경우, 선형 코드로는 문제가 발생함.
     * 초기 웹은 스레딩을 도입하여 이 문제를 해결하려고 시도함.
     * 스레드를 사용하여 동시에 여러 클라이언트를 처리할 수 있으나, 프로그래머들은 OS 공간에서 사용자 공간으로 동시성을 가져오고자 함.

타임아웃 문제

     * Rust의 가장 큰 장점 중 하나는 조합성(composability) 임.
     * async/await는 I/O 바운드 함수에 이 조합성을 적용할 수 있게 함.
     * 예를 들어, 클라이언트 처리 함수에 타임아웃을 추가하고자 할 때, 두 개의 조합자를 사용하여 구현할 수 있음.

테마틱 스레드

     * 스레드를 사용한 예제에서 타임아웃을 구현하는 것은 쉽지 않음.
     * TcpStream에는 set_read_timeout과 set_write_timeout 함수가 있지만, 이를 사용하는 것은 제한적임.
     * Rust의 조합자를 사용하여 타임아웃을 프로그래밍하는 방법을 제시하지만, 이는 TcpStream에만 국한되고 추가 시스템 호출이 필요함.

Async 성공 사례

     * HTTP 생태계는 async/await를 주요 런타임 메커니즘으로 채택함.
     * tower는 async/await의 강력함을 보여주는 예로, 타임아웃, 속도 제한, 부하 분산 등을 제공함.
     * macroquad는 Rust 게임 엔진으로, async/await를 사용하여 엔진을 실행함.

Async의 이미지 개선

     * async의 이점이 널리 알려지지 않아 일부 사람들이 오해할 수 있음.
     * Rust 커뮤니티는 async Rust의 성능 이점을 과대평가하고 의미 있는 이점을 축소하는 경향이 있음.
     * async/await는 동기 Rust에서 수십 개의 스레드와 채널 없이는 표현할 수 없는 패턴을 간결하게 표현할 수 있는 강력한 프로그래밍 모델로 봐야 함.

GN⁺의 의견

     * async/await는 동시성을 처리할 때 코드의 복잡성을 증가시키지만, 동시에 많은 클라이언트를 효율적으로 처리할 수 있는 능력을 제공함.
     * 이 기사는 async/await가 단순히 성능상의 이점을 넘어서 프로그래밍 모델의 강점을 가지고 있음을 강조함.
     * Rust의 async/await는 다양한 I/O 작업에 대한 조합성을 제공하며, 이는 특히 네트워크 서비스나 웹 서버와 같은 분야에서 유용함.
     * 비판적인 시각에서 볼 때, async/await의 복잡성은 초보 개발자들에게 진입 장벽이 될 수 있으며, 이를 극복하기 위한 교육적 노력이 필요함.
     * 동일한 기능을 제공하는 다른 프로젝트로는 Node.js의 async/await 구현이나 Python의 asyncio 라이브러리가 있으며, 이들도 비슷한 패러다임을 제공함.
     * async/await를 도입할 때는 코드의 복잡성과 유지보수성을 고려해야 하며, 동시에 많은 클라이언트를 처리해야 하는 경우에는 이 모델이 큰 이점을 제공함.

        Hacker News 의견

     * Async/await와 단일 스레드
          + 자바스크립트 모델처럼 단일 스레드에서의 async/await는 단순하고 잘 이해되어 있음.
          + 스레드를 사용하면 여러 CPU가 문제를 처리할 수 있고, Rust는 락 관리를 도와줌.
          + 다른 우선순위의 스레드를 가질 수 있으며, 계산에 제한이 있는 경우 필요함.
          + 멀티 스레드 async/await는 복잡함. 계산에 제한이 있는 섹션에서는 모델이 붕괴될 수 있음.
          + Rust에서 멀티 스레드 계산은 잘 작동하지 않음. 문제점으로는:
               o Futex 혼잡 붕괴: 일부 저장소 할당자에서 문제가 될 수 있음.
               o 불공정한 뮤텍스의 기아: 표준 Mutex와 crossbeam-channel 채널이 불공정함.
     * Async/await 대 스레드
          + 비판은 복잡성에 관한 것이 아니라, 선택에 따라 생태계가 분열되고 하나가 열등해지는 것에 대한 것임.
          + Rust 생태계는 IO 작업을 하려면 전부 async/await를 사용해야 한다고 결정함.
          + Rust가 async/await 이외의 것들을 더 조합 가능한 추상화로 만들었다면 불만이 사라졌을 것임.
     * 기사에 대한 문제점
          + 웹 서버 예시 하나만 제시되었고, 스레드에 대해 잘못 해결됨.
          + 프로그래머들은 OS 스레드가 아닌 개념적, 의미적 스레드를 원함.
          + OS 스레드는 비용이 많이 들고, 우리는 저렴한 스레드를 원함.
          + 웹 서버 예시에서의 타임아웃 구현 문제점.
     * 다루지 않은 순간들
          + async/await는 단일 스레드에서 실행되므로 락이나 동기화가 필요 없음.
          + async/await에서의 오류 전파는 명확하지 않음.
          + 네트워크 I/O에서 백프레셔도 언급되어야 함.
     * 취소에 관한 중요한 점
          + 미래의 어떤 작업도 쉽게 취소할 수 있음.
          + 스레드에서의 취소는 복잡하고, 강제 스레드 중단은 신뢰할 수 없음.
          + Rust의 async 모델에서는 모든 futures에 외부에서 타임아웃을 추가할 수 있음.
     * Async/await에 대한 마케팅 같은 캠페인
          + async/await는 기술적 실수였으며, 커뮤니티에 큰 비용을 초래함.
          + Rust는 여전히 가장 좋은 언어이지만, 이 논쟁이 영원히 이어질까 걱정됨.
     * Async/await 대 파이버
          + Rust는 이전에 그린 스레드를 가졌었고 의도적으로 제거됨.
          + futures를 언제든지 드롭할 수 있는 능력이 큰 비용을 수반함.
          + async/await의 조합성을 칭찬하는 것은 이상함.
     * Rust의 async/await 주요 이점
          + 스레드나 동적 메모리가 없는 상황에서도 작동할 수 있음.
          + 동시성을 사용하여 코드를 간결하게 작성할 수 있음.
     * Async/await에 대한 오해
          + 단일 스레드에서의 동시성 메커니즘이 필요한 이유를 이해하지 못하는 사람들이 있음.
          + UI 프로그래밍, GPU와의 통신, 런타임 간 통신 등에 async/await가 유용함.
     * Async/await 대 스레드 선택 이유
          + async/await는 클라이언트/요청/작업 상태의 메모리 사용량을 줄일 수 있음.
          + 상태 압축은 메모리 속도가 느린 현대에서 성능에 중요함.
          + async/await와 CPS는 클라이언트당 메모리 사용량을 줄이는 데 효과적임.
"
"https://news.hada.io/topic?id=13964","오픈소스 로봇 반려동물 사족보행 프레임워크, OpenCat","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    오픈소스 로봇 반려동물 사족보행 프레임워크, OpenCat

오픈캣: 오픈 소스 사지 로봇 펫 프레임워크

     * 오픈캣은 사람들이 자신만의 로봇 펫을 쉽게 만들고 개발할 수 있도록 비용과 기술적 장벽을 크게 낮추는 것을 목표로 함.
     * 취미용 고성능 서보 모터를 관절로 사용하고, 최적화된 몸체 프레임에 배치함.
     * 아두이노, ESP32, 라즈베리 파이 등 저렴한 인기 하드웨어를 컨트롤러로 사용하여 스마트 카메라 모듈, IoT 센서, 음성 명령 모듈 등의 부가 모듈을 지원함.
     * 생동감 있는 동작을 위한 효율적이고 오픈 소스 제어 코드 제공.

오픈캣 통계

     * 오픈캣 기반 상용 로봇 펫 배송 건수: 0건
     * 사용자가 있는 국가 수: 0개국
     * 사용자가 만든 DIY 로봇 펫 수: 0개
     * Github 별점 수: 0개

상용 로봇에 적용된 오픈캣

     * 오픈캣은 Petoi가 대량 생산한 손바닥 크기의 사실적인 로봇 고양이 Nybble과 로봇 개 Bittle에 적용됨.
     * 이 두 오픈 소스 로봇 빌딩 키트는 크라우드펀딩을 통해 성공적으로 출시되어 60개 이상의 국가에 있는 수천 명의 사용자에게 전달됨.

오픈캣 기반 DIY 로봇

     * 전 세계 커뮤니티에서 오픈캣 기반의 다양한 DIY 사지 로봇이 개발됨.

오픈 소스를 통한 공유의 이유

     * 저렴한 사지 로봇의 로봇 모션, IoT(사물 인터넷), AI 개발에 협력을 촉진하기 위함.
     * STEM 및 로봇 교육 자료와 커리큘럼을 대중에게 제공하고, 모든 연령대의 학생, 성인, 청소년, 어린이들이 로봇 AI 및 IoT 혁명에 참여하도록 영감을 주기 위함.
     * 복잡한 시스템의 기능을 조절하기 위함.

오픈캣의 시작

     * 보스턴 다이내믹스의 개 로봇이 2015년의 바이럴 데모로 사람들을 놀라게 한 이후, Petoi의 창립자 겸 CEO인 Rongzhong Li가 2016년 기숙사 방에서 로봇 펫 프로토타입을 가지고 오픈캣 프로젝트를 시작함.
     * 1년간의 연구 개발 끝에 Petoi LLC를 설립하고 스마트 바이오닉 사지 오픈 소스 로봇 빌딩 키트를 제작하고 생산하는 데 모든 자원을 투입함.

GN⁺의 의견

     * 오픈캣 프로젝트는 로봇 공학과 인공지능에 관심 있는 개인이나 교육 기관에게 접근성 높은 플랫폼을 제공함으로써, 로봇 공학 교육과 취미 활동에 큰 기여를 할 수 있음.
     * 오픈 소스 접근 방식은 전 세계 개발자들의 협력을 가능하게 하여, 로봇 기술의 혁신과 발전을 가속화할 수 있음.
     * 오픈캣과 유사한 기능을 가진 다른 프로젝트로는 ROS(Robot Operating System)가 있으며, 이는 로봇 개발에 널리 사용되는 유연하고 확장 가능한 소프트웨어 플랫폼임.
     * 오픈캣을 도입할 때 고려해야 할 사항으로는 사용자 커뮤니티의 지원 수준, 필요한 하드웨어와 소프트웨어의 호환성, 그리고 장기적인 프로젝트 유지 관리 능력 등이 있음.
     * 오픈캣을 사용함으로써 얻을 수 있는 이점으로는 교육적 가치, 저렴한 비용, 사용자 정의 가능성이 있으며, 단점으로는 기술적 지식이 필요하고, 상용 제품에 비해 안정성과 완성도가 낮을 수 있음.

        Hacker News 의견

     * GitHub 페이지가 궁금한 사람들에게 더 깔끔하고 좋음: OpenCat 프로젝트 링크
          + Petoi는 샌프란시스코의 OpenSauce에서 명성을 얻음.
          + Nybble이 Bittle보다 더 마음에 들어서 하나 구입함.
          + OpenCat 프레임워크와 로봇에 대한 Petoi의 작업을 매우 높이 평가하지만, 조립 과정에서의 실수인지 설계 결함인지는 아직 모르겠지만, 고양이 로봇의 꼬리가 너무 길어 바닥에 닿아 로봇이 넘어짐.
     * 찰스 스트로스의 ""Accelerando""가 떠오름.
     * 대규모 언어 모델을 사용하면 대화가 가능한 로봇 ""애완동물""을 만들 수 있음.
          + 현재 기술 상태에서 큰 그래픽 카드를 넣을 수는 없지만, 인터넷에 연결되어 API를 호출하기만 하면 됨.
     * Kickstarter에서 Open Source 로봇 개인 Bittle을 구입함.
          + 꽤 멋진 제품임.
     * QUGV(Quadruped Unmanned Ground Vehicles)는 멋진 외모와 시각적 매력에도 불구하고 실제 세계에서의 실용적인 적용에는 아직 최적화되지 않음.
          + ISR 작전을 위한 UAV(무인 항공기)에 비해 이동성이 제한적이고, 전통적인 UGV(무인 지상 차량)에 비해 적재 능력이 떨어져 두 분야의 단점을 모두 가짐.
          + 예를 들어, 보스턴 다이내믹스는 마지막 확인 때 역방향으로 계단을 내려갈 수 없고, Unitree는 빠르게 과열되며 내부 부품이 쉽게 고장 나고, 저렴한 부품으로 만들어짐(예: 세 개의 Jetson Nano 대신 하나의 더 견고한 SBC).
          + QUGV는 주로 교육 목적이나 로봇 분야 외부인들에게 '와우' 반응을 유도하기 위한 쇼로 유용함.
     * 30달러 미만의 저렴한 가격으로 오래된 모바일 폰을 지원하는 바퀴 달린 자동차 같은 것을 보고 싶음.
          + 교육용으로 좋음.
          + Lego Mindstorms를 통한 ""프로토타입""은 더 비쌈.
          + 현재는 좋은 모터의 비용이 많이 드는 것 같음.
          + 이를 시도한 스타트업들이 있었지만, 지금은 문을 닫은 것으로 보임.
     * Sunfounder PiDog에 비해 이 제품의 장점은 무엇인가? 후자는 센서 등에서 약간 더 나아 보임.
     * 내가 필요한 것은 조용히 잔디를 깎아주는 태양열로 작동하는 거북이임.
     * 누군가 총을 장착하기 전까지는 귀여움.
"
"https://news.hada.io/topic?id=13950","SOUL - SQLite REST 및 실시간 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      SOUL - SQLite REST 및 실시간 서버

     * CLI로 SQLite DB 파일을 REST 및 WebSocket API로 공개해주는 도구
          + soul -d sqlite.db -p 8000
          + 이렇게 하면 http://localhost:8000 와 ws://localhost:8000 가 활성화 됨
     * 3개의 엔드포인트: /tables, /rows, /
     * Javascript로 된 확장을 통해 기능 추가 가능: 새 엔드포인트 추가, 엔드포인트 수정, 완전히 새로운 기능 추가

   이야 얼마 전에는 postgresql로 rest api 서버 만드는 플러그인이 나오더니,, sqlite로도 가능해졌네요 ㅎ
"
"https://news.hada.io/topic?id=14026","플로리다 주지사 DeSantis, 16세 미만 사용자에 대한 소셜 미디어 제한 법안 서명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           플로리다 주지사 DeSantis, 16세 미만 사용자에 대한 소셜 미디어 제한 법안 서명

        Hacker News 의견

     * 실험은 진행되어야 한다고 생각함. 오레곤주의 마약 사용 비범죄화 법안처럼 의도한 목표를 달성하지 못했지만, 잘못된 가정과 실행 문제에 대한 데이터가 축적됨. 주가 이러한 변화를 시도하는 것은 가설을 실제로 테스트하는 데 가치가 있음.
     * 하이트 교수(NYU)가 청소년들을 대상으로 한 실험을 회상함. 청소년들에게 특정 소셜 미디어를 사용하지 않기 위해 월급으로 얼마를 받아야 하는지 물었고, 대답은 대략 40달러였음. 다른 학생들도 소셜 미디어를 사용하지 않게 한다면 얼마를 받아야 할지 다시 물었을 때, 학생들은 오히려 지불할 의사가 있었음. 적어도 일부 아이들에게는 다른 사람들이 사용한다고 가정할 때 자신들도 사용하고 싶어하는 조정 문제가 있음. 이 법안이 문제를 해결하는 올바른 방법인지는 확실하지 않지만, 많은 청소년들이 소셜 미디어를 피하고 싶어하지만 현재는 그렇게 할 수 없다고 느낌.
     * 인터넷의 상당 부분을 사용하기 위해 본질적으로 신분증이 필요해진 것이 가장 큰 문제로 보임. 많은 사업체가 페이스북 페이지만 가지고 있고, 구글 맵스에도 소셜 기능이 있음. 이제 사업체의 특별 행사를 보기 위해 페이스북 계정이 필요한 것은 물론, 신분증도 제시해야 함. 이 모든 것이 어떻게 전개될지 궁금함.
     * 미성년자와 계약을 시도하는 것은 어찌 보면 불법이어야 한다고 생각하는 사람도 있음. 이는 착취와 관련된 여러 문제 때문임. 그러나 세부 사항에 악마가 숨어 있을 수 있으므로 실제 조항이 무엇인지 궁금함. 대안은 광고 프로필을 구축하거나 사용자에 대한 정보를 저장하지 않아도 되는 자유로운 인터넷임.
     * 이 조치가 미성년자 보호, 대형 기술 기업에 대한 타격, 단기적인 표 얻기 등을 목적으로 하는 것이 아니라고 생각함. 오히려 인터넷의 익명성을 없애는 것이 장기적인 목표일 가능성이 높음. 이러한 목표는 최근 몇 년간의 여러 이니셔티브를 설명하는 타당한 이유임. 완전한 공개적인 익명성 해제는 아니더라도, CALEA와 같은 것이 이 공간에서 존재하기 쉽게 만드는 것임. 대중은 이미 TV 프로그램에서 좋은 사람들이 IP 주소나 다른 식별 로그 항목을 즉시 조회하고 이름/주소 등과 연결하는 기술을 보여주는 것에 익숙해짐. 기술 기업에게 모든 사용자를 식별하는 것이 생존 메커니즘으로 더 저렴하고 재정적으로 안전하게 만들 계획임. 이후에는 CALEA와 같은 것을 쉽게 연결할 수 있음. 물론, 수집된 모든 가치 있는 사용자 데이터가 최종적으로 교차 검증되고
       확인되는 것이 이익 측면에서 해가 되지는 않음. 또는 이 모든 것이 정치인들이 올바른 일을 하고 있다고 보이려는 단순한 의도일 수도 있음. 하지만 그렇게 믿기에는 너무 냉소적임.
     * 비판가들은 이 법안이 미국 헌법 제1조의 자유 연설 보호를 위반하며, 부모가 아닌 정부가 모든 연령대의 자녀의 온라인 존재에 대한 결정을 내려야 한다고 주장함. 부모가 특히 초기 청소년기의 자녀들을 소셜 미디어 사용으로부터 막는 것은 매우 어려움. 이 법은 그 과정을 쉽게 만들고 Meta, Snap, Tiktok, Pinterest, Twitter 등이 부모를 돕도록 할 것임. 개인적으로 소셜 미디어 없이 성장한 것에 감사하지만, 지금 성장하고 있는 아이들에 대해 걱정됨. 소셜 미디어에서 젊은 아이들이 노출되는 무작위 쓰레기의 양이 우려됨.
     * 현실을 보고 아이들과 청소년들에게 미치는 부정적인 영향에 대한 단단한 수치를 수집한 결과, 이러한 조치가 올바른 움직임이라고 생각하는 사람들도 있음. 심지어 18세까지 이를 밀어붙일 수도 있음.
     * 소셜 미디어가 등장하던 시기에 성장한 사람으로, 13세에 Myspace를 사용하고 16세에 Facebook을 사용함. 대학에 잘 진학한 후에야 소셜 미디어가 정신 건강에 미치는 영향을 깨달음. 18세 미만은 소셜 미디어를 사용하지 않아야 한다고 주장할 수도 있지만, 2024년에는 그것이 비현실적일 수 있음.
     * 이 법안은 모든 사람이 온라인에서 무엇이든 접근하기 위해 정부 ID를 제시해야 하는지, 국제 콘텐츠 제공업체가 플로리다 주 당국에 위반 사항을 보고해야 하는지에 대한 질문을 제기함.
     * 최근 발표된 세계 행복 보고서는 북미 지역에서 젊은이들의 행복이 급격히 감소하여 이제는 노인보다 덜 행복하다고 결론지음. 반면, 중앙 및 동유럽의 전환 국가에서는 젊은이들이 노인보다 훨씬 더 행복함. 서유럽 전체에서는 모든 연령대에서 행복이 비슷하며, 다른 지역에서는 일반적으로 생애주기가 감소함(노인에게 가끔 상승세). 소셜 미디어는 적색 청어일 수 있음. 어떤 이유에서인지 미국의 젊은이들은 불행하고, 어려운 문제를 다루는 대신 ""소셜 미디어를 없애면 해결될 것""이라고 생각함. 핀란드에는 소셜 미디어가 없는가? 왜 핀란드의 젊은이들은 미국보다 더 행복한가? 이러한 추세가 계속될 것으로 예측하며, 아이들에게서 소셜 미디어를 빼앗아도 그들은 여전히 불행할 것이며, 부모가 휴대폰을 보는 동안 작은 아파트에서 할 일을 찾을 것임.
"
"https://news.hada.io/topic?id=14023","네트워크 스위치를 죽인 범인은? '허브리스 버그' 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    네트워크 스위치를 죽인 범인은? '허브리스 버그' 이야기

Hubris 버그 이야기: 네트워크 스위치를 죽인 것은 누구인가?

     * Hubris란 무엇인가?
          + Hubris는 깊이 내장된 시스템을 위한 운영체제로, 키보드 내부와 같은 컴퓨터로 인식되지 않는 컴퓨터들을 위해 설계됨.
          + Oxide Rack에서 큰 프로세서를 시작하는 데 필요한 모든 작업을 처리하기 위해 개발됨.
          + Hubris는 상당히 독특한데, 이야기에 관련된 부분은 아래에서 설명됨.
     * 범죄 현장
          + Oxide의 네트워크 스위치 펌웨어를 담당하는 동료 Arjen Roodselaar이 전원 순서와 클록 구성에 대한 변경을 테스트 중이었음.
          + 작은 변경 후 갑자기 스위치가 켜지지 않게 됨.
          + 펌웨어의 일부는 응답했지만, 전원 공급 순서를 담당하는 중요한 부분은 멈춰 있었음.
     * 제한된 RAM에서 더 많은 것을 끌어내기
          + Hubris를 사용하는 저렴한 마이크로컨트롤러는 RAM과 플래시가 매우 제한적임.
          + Hubris는 작업이라고 불리는 별도로 컴파일된 많은 프로그램으로 구성되어 있어, 다른 운영체제보다 약간 더 높은 자원 요구 사항을 가짐.
          + 동료 Matt Keeter는 최근 시스템을 더 똑똑하게 만들어 여러 개의 2의 제곱 영역을 사용하여 가능한 한 작업을 포장하려고 시도함.
     * 연기가 나는 총구
          + Arjen은 Humility라는 Hubris 디버거를 사용하여 실패한 네트워크 스위치를 조사함.
          + humility tasks 명령어를 사용하여 프로세서에서 실행 중인 작업 목록과 상태 정보를 출력함.
          + 전원 순서를 담당하는 작업이 메모리 장애로 인해 115번 재시작되었다는 것을 발견함.
     * Hubris IPC에서 Rust 대출을 작업 간에 확장
          + Hubris 작업은 IPC를 통해 서로 메시지를 주고받을 수 있음.
          + 메시지는 함수 호출과 매우 유사하게 보이고 동작함.
          + 작업이 메모리를 다른 작업에 대출할 때, 실제로 소유하지 않은 메모리를 대출하려고 하면 안 됨.
     * 기능이 공격할 때
          + 두 가지 기능이 결합하여 버그가 될 수 있음.
          + 작업 포장은 빌드 시스템에서 기회주의적으로 작동함.
          + 작업 A의 크기가 약간 변경되면 관련 없는 작업 B의 MPU 영역 경계 위치가 이동할 수 있음.
     * 내부에서 걸려오는 전화!
          + 메모리 보호 알고리즘을 변경해야 함.
          + 대출된 메모리가 MPU 영역을 넘어가도록 허용해야 함.
     * Hubris로 실패하기
          + 시스템이 실패했을 때 발생하지 않은 여러 가지 사항들.
          + 고장난 네트워크 스위치를 3시간 만에 고칠 수 있었음.
          + 고장 격리, 안전을 향한 실패, 안전한 공유 메모리, 커널-디버거 공동 설계, 설계 및 구현의 단순성, 팀의 긴밀한 비계층적 통합 등이 도움이 됨.

GN⁺의 의견

     * 이 기사는 Hubris라는 운영체제에서 발생한 버그를 찾아내고 해결하는 과정을 통해, 복잡한 시스템에서도 견고한 소프트웨어 설계의 중요성을 보여줌.
     * 버그 발견과 해결 과정은 소프트웨어 엔지니어링의 복잡한 문제를 해결하는 데 있어 팀워크와 효율적인 디버깅 도구의 중요성을 강조함.
     * Hubris와 같은 시스템을 사용할 때, 시스템의 격리와 장애 관리 기능이 얼마나 중요한지를 보여줌. 이는 시스템의 안정성과 유지보수성을 크게 향상시킬 수 있음.
     * 이 기사는 또한 안전한 프로그래밍 언어인 Rust를 사용하여 메모리 안전성을 보장하고 버그를 최소화하는 방법을 보여줌. Rust를 사용하는 시스템에서는 이러한 유형의 버그가 드물게 발생하며, 이는 Rust의 메모리 안전성 보장이 실제로 얼마나 효과적인지를 입증함.
     * 비슷한 기능을 가진 다른 프로젝트나 제품으로는 seL4, FreeRTOS, Zephyr 등이 있으며, 이들은 각각 다른 목적과 특성을 가진 임베디드 시스템 운영체제임.
     * Hubris와 같은 시스템을 도입할 때는 메모리 제약, 태스크 관리, IPC 메커니즘의 설계와 같은 요소들을 고려해야 함. 이러한 시스템을 선택함으로써 얻는 이점은 견고한 시스템 설계와 안전한 메모리 관리에 있으며, 단점은 시스템의 복잡성과 학습 곡선이 될 수 있음.

        Hacker News 의견

     * Hubris 커널 코드 리뷰
          + Hubris의 커널 코드를 반 시간 동안 읽어보았는데, 매우 명확하고 잘 작성되어 있음. 이전에 보았던 복잡한 매크로와 두 글자 변수명, 주석이 부족한 C 코드와는 확연히 다름. 잠자기 전 읽기에 좋은 자료임을 추천함.
     * 직무 광고에 대한 칭찬
          + 이것은 본인이 본 최고의 직무 광고 중 하나임. 문화에 대한 자연스러운 전환과 마지막에 ""우리는 채용 중입니다""라는 말이 이어짐. 심지어 애플리케이션 수준의 개발자도 이해할 수 있는 훌륭한 사후 분석(post-mortem)임. 현재 Rust를 공부 중이라 이런 내용에 대한 준비가 되어 있었음. 또한, 코드에 많은 주석을 달아놓은 다른 사람의 작업을 보는 것은 언제나 즐거움.
     * 코드 리뷰 및 제안
          + 코드에 대한 간단한 지적: 특정 함수의 세부 사항이 아니라 모든 작성자가 존중해야 하고 모든 독자가 이용할 수 있는 필드의 불변성(invariant)에 대한 주석이므로, TaskDesc::regions 문서 문자열에 추가하는 것이 좋을 것임.
     * 디버깅 과정에 대한 평가
          + 복잡한 문제를 디버깅하는 깊이 있는 분석을 제공하며, 시스템의 나머지 부분이 안정적으로 유지된 것은 Oxide 팀의 고품질 엔지니어링 작업의 증거임. 개인적으로 이에 영감을 받아 직장에서 비슷한 기술을 적용할 계획임.
     * Oxide 팀의 문화에 대한 관심
          + Oxide의 엔지니어링 팀은 내부적으로 격리되어 있지 않으며, 개방성, 호기심, 커뮤니케이션을 장려하고 방어적 태도, 제국 건설, 게이트키핑을 억제하는 문화를 가지고 있음. 이러한 문화를 만들고 지키기 위해 노력했으며, 다른 조직에서 팀이라고 부를 범위를 가로질러 수평적으로 조직된 방식에서 이를 볼 수 있음. 이러한 문화를 만들기 위한 동기와 구체적인 실행 세부 사항에 대해 더 알고 싶음. 조직 내에서 ""개방성, 호기심, 커뮤니케이션""을 장려하는 것의 단점이 있는지, 더 엄격한 계층적 시스템을 선택하는 경우가 있는지, 조직도가 전략적으로 결정되어야 한다는 생각이 들지만, 그에 대한 트레이드오프는 잘 모르겠음.
     * 관련 정보 링크
          + 사전 정보는 주어진 링크를 통해 찾을 수 있음.
     * 디버깅 시 발생하는 문제에 대한 공감
          + 디버깅 코드를 추가하면 사라지는 무작위 충돌은 최악의 충돌임에 공감함.
     * 하드웨어 처리에 대한 제안
          + 하드웨어를 소프트 필 TLB처럼 처리함으로써 8개 이상의 영역을 지원할 수 있음을 언급함.
     * Oxide의 작업에 대한 칭찬
          + Oxide가 수행하는 작업에 대해 놀라움을 표함.
     * 운영체제 이름에 대한 반응
          + 운영체제의 이름을 Hubris라고 지은 것에 대해 놀라움과 반응을 보임.
"
"https://news.hada.io/topic?id=14054","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   Yolov8 보고 있습니다.

   삼체 소설을 다 읽어서 이제 넷플릭스 삼체 드라마를 보려고 합니다.
   남들에 비해 책을 본게 너무 늦긴 했지만, 정말 재미난 SF 소설이라 보는 내내 즐거웠습니다.

   코딩테스트 준비합니다 ㅠ.ㅠ
"
"https://news.hada.io/topic?id=14052","Dioxus 0.5: 러스트로 개발하는 웹, 데스크톱, 모바일 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Dioxus 0.5: 러스트로 개발하는 웹, 데스크톱, 모바일 앱

Dioxus 0.5: 신호 재작성, 수명 제거, CSS 핫리로딩 등

     * Dioxus Labs에서는 연간 한 번의 재작성만 허용하는 비공식 규칙이 있음.
     * Dioxus는 Rust로 GUI를 구축하기 위한 라이브러리로, 원래 Yew의 재작성으로 시작됨.
     * Dioxus 0.5는 커뮤니티의 요청에 따라 더 단순하고 견고하며 세련된 방향으로 변경됨.

새로운 기능들

     * dioxus-core의 완전한 재작성으로 모든 unsafe 코드 제거.
     * use_state와 use_ref를 사용하지 않고 복제 없는 Signal 기반 API로 전환.
     * 모든 수명(lifetimes)과 cx: Scope 상태 제거.
     * 모든 플랫폼을 위한 앱 시작을 위한 단일 launch 함수 도입.
     * Tailwind와 Vanilla CSS를 지원하는 자산 핫리로딩.
     * 이벤트 재작성으로 각 플랫폼의 기본 WebSys 이벤트 유형에 접근 가능.
     * 컴포넌트 확장으로 요소 속성 추가(예: Link가 <a/> 속성을 모두 받음).
     * 통합된 오류 경계 및 서버 퓨처와 Suspense 통합.
     * 데스크탑 조정 속도 5배 향상 및 바이트 스트리밍을 위한 사용자 정의 자산 핸들러.
     * 서버 함수 스트리밍 및 전체 스택 핫리로딩.
     * 많은 QoL 개선, 버그 수정 등.

수명 문제

     * Dioxus를 더 단순하게 만들기 위해 모든 수명을 제거함.
     * 수명 문제는 Rust 초보자를 쉽게 겁먹게 하고, 경험 많은 Rust 개발자들도 혼란스러워함.
     * Dioxus 0.5는 수명과 Scope를 제거하고 Copy 상태 관리 솔루션인 신호를 도입함.

스코프와 수명 제거

     * 새 버전에서는 스코프와 'bump 수명이 제거됨.
     * 컴포넌트 선언과 컴포넌트 내 런타임 함수 사용이 훨씬 쉬워짐.

모든 Unsafe 코드 제거

     * 'bump 수명과 스코프 제거로 많은 unsafe 코드를 제거함.
     * dioxus-core 0.5에는 unsafe 코드가 없음.

신호(Signals)

     * 컴포넌트의 핵심 상태 기본 요소로서 신호 도입.
     * Signal<T>는 내부 T 값이 아니더라도 Copy임.
     * 신호는 더 똑똑한 구독을 제공하여, 신호를 읽는 컴포넌트만 재렌더링됨.

CSS 핫 리로딩

     * CSS 파일의 핫리로딩 지원으로, dx CLI가 파일을 감시하고 앱에 즉시 업데이트를 스트리밍함.

이벤트 시스템 재작성

     * dioxus 0.5는 각 플랫폼의 기본 이벤트 유형을 노출하고, 플랫폼 간 API를 제공하는 트레이트를 도입함.

크로스 플랫폼 출시

     * 새로운 크로스 플랫폼 API를 통해 동일한 애플리케이션으로 여러 플랫폼을 쉽게 대상으로 삼을 수 있음.

자산 시스템 베타

     * 새로운 자산 시스템인 manganis는 CLI와 통합되어 애플리케이션 내의 자산을 확인, 번들링 및 최적화함.

데스크탑 렌더링 속도 5배 향상

     * 렌더링 속도 향상을 위한 여러 최적화를 구현함.

속성 확장

     * 특정 요소에 추가 기능을 제공할 때 유용함.

속성 축약

     * 속성을 요소와 컴포넌트에 전달할 때 속성 축약 구문 사용 가능.

다중 줄 속성 병합

     * 조건부 속성을 쉽게 만들 수 있도록 속성 병합 기능 추가.

서버 함수 스트리밍

     * 서버 함수가 클라이언트와 데이터를 스트리밍할 수 있도록 지원함.

풀스택 CLI 플랫폼

     * dx 명령을 사용하여 풀스택 앱을 서비스할 수 있음.

라이브뷰 라우터 지원

     * 라이브뷰 앱에서 라우터가 바로 작동함.

사용자 정의 자산 핸들러

     * 데스크탑에서 사용자 정의 자산 핸들러를 지원하여 브라우저로 데이터를 효율적으로 스트리밍할 수 있음.

네이티브 파일 처리

     * 데스크탑에서 파일 드롭을 제대로 지원함.

오류 처리

     * 오류 경계와 throw 트레이트를 사용하여 앱에서 오류를 쉽게 처리할 수 있음.

핫리로딩 기본값 및 데스크탑용 ""개발"" 모드

     * 핫리로딩을 기본적으로 활성화하고, 데스크탑 앱 개발 경험을 크게 향상함.

dioxus 템플릿 업데이트

     * 새로운 코어 팀 멤버 Miles가 문서와 템플릿을 대대적으로 개편함.

Dioxus-Community 및 Dioxus-std

     * Dioxus Community는 중요한 생태계 크레이트를 0.5 릴리스에 맞게 업데이트함.

곧 출시될 기능들

     * 자산 시스템의 안정화 및 통합, .wasm의 번들 분할, 섬(Islands) 및 재개 가능한 상호작용, 서버 컴포넌트, 개선된 개발자 도구, 모바일 및 풀스택 개편 등.

Dioxus-Blitz 부활 미리보기

     * ""Blitz 2.0""으로 Servo를 통합하여 WGPU를 사용하여 Firefox를 구동하는 동일한 CSS 엔진으로 네이티브 렌더링을 할 수 있음.

기여 방법

     * 문서 번역, ""좋은 첫 이슈"" 시도, 문서 개선, CLI 기여, 디스코드 커뮤니티 질문 답변 등에 기여할 수 있음.

GN⁺의 의견

     * Dioxus 0.5는 Rust 기반의 GUI 개발을 위한 중요한 업데이트로, 개발자들에게 더 쉽고 안전한 개발 환경을 제공함.
     * 수명과 스코프의 제거는 Rust 개발의 복잡성을 줄이고, 신호(Signal) 기반 API는 상태 관리를 더욱 간단하게 만듦.
     * CSS 핫리로딩과 이벤트 시스템의 개선은 프론트엔드 개발의 생산성을 높이는 데 기여할 것임.
     * 핫리로딩과 크로스 플랫폼 런치 기능은 개발자들이 다양한 플랫폼에서 일관된 개발 경험을 가질 수 있도록 함.
     * 이러한 변화는 Rust와 웹 개발 커뮤니티에 긍정적인 영향을 미칠 것으로 예상되며, 특히 Rust를 사용하여 웹 및 데스크탑 애플리케이션을 개발하는 사람들에게 유용할 것임.

        Hacker News 의견

     * Dioxus 0.5 버전의 변화에 대한 첫 번째 사용자의 경험
          + 작년에 Dioxus를 사용하여 Mastodon 클라이언트를 만들었는데, 전반적으로 좋은 경험이었지만 여전히 빠진 부분이 많았음.
          + Dioxus 0.5 버전의 변화로 인해 개발자가 직면했던 복잡성이 대부분 제거되었으며, 특히 생명주기(lifetimes) 제거와 끊임없는 복제(cloning) 문제가 해결되어 더 쾌적한 개발 경험을 기대함.
          + 새로운 버전을 시도해보지는 않았지만, 팀의 노력에 축하를 전함.
     * SVG 지원에 대한 질문
          + 사용자는 SVG와 상호작용할 수 있는지, 예를 들어 스도쿠를 SVG로 그리고 각 셀을 클릭할 수 있는지 궁금해함.
     * Rust 프로그래밍에 대한 호기심과 generational-box 크레이트의 작동 방식에 대한 질문
          + Rust 프로그래머는 아니지만, generational-box 크레이트가 어떻게 복사 없이 값을 유지하는지, 그리고 이것이 안전한지에 대해 설명을 요청함.
     * Dioxus를 사용한 Freenet 홈페이지 개발 경험
          + 사용자는 Dioxus를 사용하여 Freenet의 분산 홈페이지를 개발 중이며, 이는 사람들이 Freenet을 설정할 때 처음 보게 될 분산 웹사이트임.
          + Kotlin 웹 프레임워크인 Kweb과 유사한 상태 관리와 코드에서 HTML로의 매핑 DSL 방식에 대해 긍정적인 인상을 받음.
     * Dioxus의 React 성공 요소와 혁신에 대한 감상
          + 사용자는 Dioxus가 React의 성공 요소를 포착하고 그 위에 혁신을 더해 매우 빠른 속도로 출시하는 것에 대해 매우 흥분함.
          + 팀에 축하를 전하며, 이번 릴리스에서의 신호(signals) 기능을 시도해보는 것을 기대함.
     * SwiftUI와 비교한 RSX에 대한 의견
          + 사용자는 RSX 대신 SwiftUI에 더 가까운 것을 선호하며, React/JSX가 2024년에 ""반응형 UI"" 코드로 어떻게 보일지에 대한 자신의 비전과 다름을 표현함.
          + SwiftUI가 완벽하지는 않지만, React를 사용할 때보다 코드가 더 깔끔하게 조직되고 구획화된다고 느낌.
          + JSX를 사용하는 주된 이점은 웹을 위해 만들어진 기존 라이브러리를 재사용할 수 있다는 것이지만, RSX는 개발자가 JSX에 대한 개념적 지식을 RSX로 옮길 수 있게 하는 것 외에는 ""전이 가능한 가치""가 거의 없다고 주장함.
          + 사용자는 ""SwiftUI but cross-platform"" 프로젝트가 존재하지 않는 것에 대해 아쉬워하며, Tokamak/TokamakUI에 대해 언급하지만 아직 완성되지 않았고 활동이 줄어든 것으로 보임.
     * Dioxus의 생명주기(lifetimes) 제거에 대한 우려
          + 사용자는 Dioxus에서 생명주기를 제거한 솔루션에 대해 혼란스러워하며, 이것이 성능에 어떤 영향을 미쳤는지 궁금해함.
     * 웹 컴포넌트와의 통합성에 대한 질문
          + 사용자는 Yew를 사용할 때 Shoelace 컴포넌트를 잘 작동시키는 데 어려움을 겪었으며, 다른 Rust 프레임워크로 프로젝트를 다시 시도해보고 싶어함.
     * 네이티브 앱 렌더링 방식에 대한 질문
          + 사용자는 Dioxus가 네이티브 앱을 렌더링하는 방식이 브라우저 인스턴스 내에서 이루어지는지 여부에 대해 궁금해함.
"
"https://news.hada.io/topic?id=14063","xz/liblzma의 상위 스트림에 존재하는 백도어로 인한 SSH 서버 침해(compromise)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         xz/liblzma의 상위 스트림에 존재하는 백도어로 인한 SSH 서버 침해(compromise)

     * Debian sid 설치에서 liblzma(xz 패키지의 일부)와 관련된 몇 가지 이상한 증상(SSH 로그인 시 CPU 사용량 증가, valgrind 오류)이 관찰됨
     * 문제의 원인은 xz의 상위 저장소와 tarball이 백도어에 감염되었음을 발견. 백도어의 일부는 배포된 tarball에만 존재함
     * tarball에 포함된 스크립트는 configure의 끝에서 실행되며, 특정 조건이 충족되면 $builddir/src/liblzma/Makefile을 수정하여 악성 코드를 삽입함.

저장소 내 백도어

     * 백도어의 주요 부분은 저장소 내의 tests/files 디렉토리에 암호화된 형태로 존재함.
     * 이 파일들은 5.6.0 버전의 테스트에 사용되지 않았으며, 5.6.1 버전에서는 백도어로 인한 valgrind 오류와 충돌을 해결하기 위한 시도가 있었음.

영향을 받는 시스템

     * 백도어 스크립트는 configure 이후 최초로 호출되며, 특정 조건(예: x86-64 리눅스 시스템, gcc 및 gnu 링커 사용, debian 또는 RPM 패키지 빌드 중)에만 빌드 과정을 수정함.

openssh 서버에 미치는 영향

     * 백도어가 설치된 liblzma를 사용하면 SSH를 통한 로그인이 느려짐.
     * openssh는 직접적으로 liblzma를 사용하지 않지만, debian을 포함한 몇몇 배포판은 systemd 알림을 지원하기 위해 openssh에 패치를 적용하고, libsystemd는 lzma에 의존함.

주입된 코드 분석

     * 보안 연구자나 역공학 전문가가 아닌 관찰자의 관점에서 분석함.
     * 백도어는 ifunc resolver를 통해 실행을 가로채고, sshd의 초기화 중에 심볼을 해석하여 RSA_public_decrypt 심볼을 자신의 코드로 변경함.

sshd에 미치는 영향

     * RSA_public_decrypt@....plt가 백도어 코드를 가리키도록 변경되어, 공개키 로그인 중에 백도어 코드가 호출됨.
     * 이를 통해 인증을 우회하거나 원격 코드 실행을 가능하게 하는 것으로 추정됨.

버그 보고

     * 상위 저장소의 관여가 의심되어 버그를 보고하지 않음.
     * Red Hat은 이 문제에 CVE-2024-3094를 할당함.

취약한 설치 감지

     * 시스템의 ssh 바이너리가 취약한지 여부를 감지하는 스크립트가 제공됨.

   본문 맨 아래 첨부에 detect.sh 파일을 받아서 취약점 해당되는 환경인지 확인 가능합니다.
   저같은 경우 probably not vulnerable 뜨신 하지만 조심해야겠죠.

   xz 백도어에 대해 내가 아는 모든 것
   해당 백도어를 발견한 Andres Freund가 작성한 글입니다.

   매우 계획적으로 움직였다는게 놀랍네요;; 과정이 드라마 같아요.

   능지처참해도 쌉니다

   왜요?

   오픈소스에 의도적으로 백도어를 심은 행위라서요... 그 과정에서 몰래 여론전도 펼치는등의 행동 또한 했구요
   이전에도 리눅스 커널에 악의적으로 취약점을 넣은 사례도 있었는데 씁쓸하네요

   아하 뉘앙스를 이제 이해한 듯 하네요 감사합니다

        Hacker News 의견

     * 관련 링크:
          + Xz: Disable ifunc to fix Issue 60259
          + FAQ on the xz-utils backdoor
          + Everything I Know About the XZ Backdoor
     * 요약:
          + 백도어 작성자가 Fedora 40 & 41에 xz 5.6.x를 추가하려고 여러 주간 소통함. 이 백도어로 인해 발생한 valgrind 문제를 해결하기 위해 협력했으나, 결국 백도어가 문제의 원인이었음을 알게 됨. 공개 금지 기간이 실수로 깨진 후 문제를 긴급히 해결해야 했음.
          + 백도어 작성자 중 한 명이 oss-fuzz에서 백도어에 의존하는 기능을 직접 비활성화하여 우연한 발견을 방지함.
          + 백도어 작성자가 xz-java 프로젝트에 SECURITY.md 파일을 추가함. 이는 보안 취약점을 발견하면 공개하지 말고 비공개로 보고하라는 지침을 담고 있음. 이를 다른 시각에서 보면, 작성자가 자신의 익스플로잇을 조정하고 대상을 활용할 시간을 벌려는 의도로 해석될 수 있음.
          + openssh는 직접적으로 liblzma를 사용하지 않지만, debian과 여러 배포판이 systemd 알림 지원을 위해 openssh에 패치를 적용함. 이로 인해 libsystemd가 liblzma에 의존하게 되어, openssh와 같은 보안 중요 데몬에 추가적인 의존성이 생기고 공급망 공격의 위험이 증가함.
          + 패닉 상태인 사람들을 위한 주요 확인 사항:
               o 최근 버전의 liblzma5 (5.6.0 또는 5.6.1)을 사용하는 경우. 이는 지난 한 달 정도에 추가됨.
               o debian이나 RPM 기반의 리눅스 배포판을 사용하는 경우. 리버스 엔지니어링을 어렵게 하려는 시도로 보임.
               o systemd에서 OpenSSH sshd를 실행하는 경우. 일부 배포판에서 패치된 OpenSSH는 로깅 기능을 위해 libsystemd를 사용하며, 이는 취약한 liblzma5를 끌어들임.
               o Debian testing은 이미 '5.6.1+really5.4.5-1'이라는 버전을 가지고 있으며, 이는 실제로는 이전 버전인 5.4를 새 버전으로 재포장한 것임.
          + GNU autoconf에서 무언가 의심스러운 것을 숨기고 싶다면, ""curl | sh"" 스크립트가 아닌 그곳에 숨길 것임. 이번 사건의 배포자는 이전에도 배포를 담당했으며, 2022년부터 커밋을 시작함. 많은 실제 변경 사항을 포함한 커밋이 있으며, libarchive와 같은 관련 프로젝트에도 커밋이 있음. 백도어를 삽입하기 위해 많은 노력이 필요함.
          + 몇 년 전에 Go 라이브러리를 작성하여 xz C 코드를 감싸고 Go에서 xz 압축을 할 수 있게 함. 약 일주일 전에 해당 레포지토리에 5.6.1로 업그레이드하는 첫 PR을 받음. 이는 상류의 GitHub 계정과는 다름.
          + 보안 연구원이나 리버스 엔지니어가 아닌 기여자가 기술적인 글을 쓰는 것을 좋아함. 그의 발견을 요약한 보고서는 공유를 꺼리는 주류 디버깅 세계 밖의 기여자들에게 훌륭한 템플릿으로 여겨짐.
          + xz(1)에 대한 더 능숙한 백도어 시도를 상상해보면, 이렇게 빨리 발견되지 않았을 것임. xz는 거의 모든 곳에 사용됨. 특정 빌드 프로세스의 기반으로 사용되는 .tar.xz 소프트웨어 타르볼과 같은 파일의 작은 부분만 선택적으로 수정하는 xz를 만들 수 있음. 소스 코드 타르볼이 아니라 사전 컴파일된 바이너리를 배포하는 타르볼을 대상으로 함.
"
"https://news.hada.io/topic?id=14004","esbuild와 Redis, 훌륭한 아키텍처 문서를 갖춘 두 개의 오픈 소스 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            esbuild와 Redis, 훌륭한 아키텍처 문서를 갖춘 두 개의 오픈 소스 프로젝트

     * esbuild와 Redis는 뛰어난 문서화를 가진 코드베이스의 예시임
     * README, 변경 로그, 아키텍처 문서, 코드 주석을 통해 새로운 사용자도 코드베이스의 구조, 작동 방식, 그리고 그 이유를 이해할 수 있음.
     * 코드와 소프트웨어 아키텍처 문서화를 개선하고자 하는 개발자에게 좋은 사례 연구가 됨.

좋은 문서화가 중요한 이유

     * 소프트웨어 작성 시, 특히 다른 사람이 코드베이스를 볼 때나 기여할 때, 또는 나중에 본인이 다시 참조할 때 좋은 문서화가 필수임.
     * 소프트웨어 사용자는 종종 누락된 문서화로 인해 어려움을 겪음.
     * 코드베이스에 기여하는 경우, 문서화의 질이 좋을수록 빠르게 기여할 수 있음.
     * 문서화의 질은 저자, 기여자, 또는 사용자의 경험에 직접적이거나 간접적으로 영향을 미침.
     * 좋은 문서화의 이점은 시간 절약, 오픈 소스 프로젝트의 외부 기여 증가, 과거 결정의 기록, 더 많은 사용자의 접근성, 사고 구조화 및 문제점 발견 등 다양함.

esbuild의 문서화

     * esbuild는 Evan Wallace가 만든 JavaScript 번들러임.
     * esbuild의 README는 도구의 최종 사용자에게 초점을 맞추고 있음.
     * 문서의 주요 섹션 링크와 ""왜?""라는 섹션을 통해 다른 번들러보다 esbuild를 선택해야 하는 이유를 간략하게 설명함.
     * esbuild의 아키텍처 문서는 docs 디렉토리에 architecture.md와 development.md 파일로 구성됨.
     * 아키텍처 문서는 디자인 원칙을 설명하고, 텍스트뿐만 아니라 개념을 설명하는 그래픽도 포함함.
     * esbuild의 변경 로그는 요약, 확장된 설명, 변경 전후의 예제 코드를 포함하여 상세함.

Redis의 문서화

     * Redis는 메모리 내 데이터베이스임.
     * Redis의 README는 esbuild의 README와 유사한 좋은 특성을 공유하면서도, 기여자와 최종 사용자 모두에게 초점을 맞춤.
     * Redis의 내부에 대한 섹션은 소스 코드의 레이아웃과 주요 파일에 대한 설명을 포함함.
     * Redis 소스 코드 내의 코드 주석은 단일 코드 라인에 대한 여러 단락의 설명을 제공함.

마무리

     * 많은 오픈 소스 프로젝트들이 훌륭한 문서화를 가지고 있음.
     * esbuild와 Redis는 특히 뛰어난 문서화로 인상적임.
     * 문서화는 단기적인 시간 제약을 초래할 수 있지만, 장기적으로 시간을 절약해줌.
     * 많은 사람들이 사용하거나 기여하는 프로젝트에서 문서화를 하지 않는 것은 재고해볼 필요가 있음.

GN⁺의 의견

     * esbuild와 Redis의 문서화 사례는 개발자들에게 코드베이스의 이해와 유지보수를 용이하게 만드는 문서화의 중요성을 강조함.
     * 문서화는 프로젝트의 지속 가능성을 높이고, 커뮤니티의 참여를 촉진하는 핵심 요소임.
     * esbuild의 경우, 빠른 JavaScript 번들러로서의 기능 외에도 훌륭한 문서화가 프로젝트 성장에 기여한 것으로 보임.
     * Redis는 복잡한 인메모리 데이터베이스 시스템을 쉽게 이해할 수 있도록 도와주는 문서화로 인해 개발자 커뮤니티에 긍정적인 영향을 미침.
     * 이러한 사례들은 다른 오픈 소스 프로젝트에도 문서화의 중요성을 전파하는 데 도움이 될 수 있으며, 특히 초급 소프트웨어 엔지니어들이 자신의 프로젝트를 문서화하는 방법에 대한 이해를 돕는 데 유용함.

   esbuild는 README.md 파일도 그렇지만 글에서 소개된 architecture.md 파일이 너무 아름답네요!

        Hacker News 의견

     * Redis의 창시자 Antirez가 자신의 블로그에 코드 주석에 대한 생각을 상세히 설명한 글을 작성함. Redis에서 사용되는 9가지 유형의 주석을 식별함.
          + 많은 사람들이 중요하지 않다고 생각하는 ""가이드 주석""의 사용에 놀랐음.
          + Antirez는 이러한 주석이 코드 이해를 돕는 데 가치가 있다고 결론지음.
          + Antirez의 글
     * 프로젝트 문서화가 사용자/개발자/기여자에게 어떻게 훌륭할 수 있는지에 대한 구체적인 예와 스크린샷을 포함한 잘 작성된 기사.
          + 자신의 작업과 부수적인 프로젝트에 대해 성찰하게 만들며, 문서를 개선하여 이해를 돕는 방법에 대해 생각하게 함.
          + 개발자로서 성장하면서 문서와 테스트를 더 많이 작성하게 됨. 일부 프로젝트는 실제 코드보다 문서와 테스트가 더 많음.
          + 좋은 문서를 작성하는 것은 코드를 작성하는 것과 다른 기술 세트를 요구한다는 의견이 있음. 때로는 기술적이지 않거나 개발에 집중하지 않는 사람이 설명하는 데 더 나을 수 있음.
          + 자동 생성된 문서도 유용할 수 있으며, 단독으로만이 아니라 추가 참조 자료로서의 가치가 있음.
     * 저장소의 품질에 대한 관리자들의 관심을 보여줌.
     * ""The Architecture of Open Source Applications"" 시리즈를 떠올리게 함. 흥미로운 통찰력이 있음.
          + AOSA 책
     * GitLab의 문서가 매우 좋다는 평판이 있지만, 직접 사용할 필요가 많지 않았음. 그들의 아키텍처 문서가 좋은지에 대한 의문.
     * Postgres 프로젝트도 문서, readme 파일, 코드 주석에 상세한 주의를 기울임.
     * esbuild 프로젝트의 아키텍처 문서화에 깊은 인상을 받음. 과거에 작업했던 코드베이스에 이런 문서가 있었다면 좋았을 것임.
          + 이러한 수준의 아키텍처 문서화를 가진 다른 프로젝트 예시에 대한 질문.
     * 오픈 소스 프로젝트의 변경 로그를 매우 좋아함. 이익을 추구하는 다른 엔티티보다 훨씬 전문적이고 유익함. ING 은행의 앱 변경 로그가 유머러스하기보다는 정보 제공에 집중해야 한다는 비판.
     * ""오늘날 자유 소프트웨어 커뮤니티에서 가장 큰 결핍은 소프트웨어가 아니라, 자유 소프트웨어와 함께 포함할 수 있는 좋은 자유 문서의 부족이다.""
          + gdb 매뉴얼 인용.
     * Redis가 더 이상 오픈 소스가 아니라는 것을 언급함. Redis는 Redis Source Available License v2 (RSALv2)와 Server Side Public License v1 (SSPLv1) 하에 ""소스-사용 가능"" 소프트웨어임.
          + Redis Stack과 Redis Ltd.가 만든 모든 Redis 모듈(예: RediSearch, RedisJSON, RedisGraph, RedisTimeSeries, RedisBloom)은 RSALv2와 SSPL로 이중 라이선스됨.
          + Redis Enterprise는 폐쇄 소스이며 Redis Ltd.로부터 상업 라이선스가 필요함.
          + 이전 버전의 Redis는 3-clause BSD 라이선스(자유롭고 오픈 소스) 하에 있음. 라이선스 변경은 소급 적용되지 않으며, 변경 전의 모든 소스 코드와 릴리스는 원래의 3-clause BSD 라이선스를 유지함. 해당 조건을 준수하는 한, 이러한 버전을 무기한 사용할 수 있음.
          + Redis 라이선스
          + BSD 라이선스
"
"https://news.hada.io/topic?id=14043","샘 뱅크먼-프라이드, 25년 징역형 선고받다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        샘 뱅크먼-프라이드, 25년 징역형 선고받다

샘 뱅크먼-프라이드, 25년형 선고

     * 판결: 샘 뱅크먼-프라이드는 목요일 25년의 징역형을 선고받음.
     * SBF 발언: FTX의 전 CEO인 그는 법정에서 우회적인 사과문을 발표하며, 자신의 결정들이 매일 자신을 괴롭힌다고 말함.
     * 요청보다 짧은 형량: 검찰은 40-50년을 구형했으나, 뱅크먼-프라이드의 변호인은 비폭력적 초범에게는 최대 6년 반의 형량이 적절하다고 주장함.
     * 혐의: 뱅크먼-프라이드는 지난 11월 FTX 붕괴와 관련하여 사기 및 음모 혐의로 7가지 유죄 판결을 받음.

SBF의 부모: ""우리는 가슴이 찢어진다""

     * 뱅크먼-프라이드의 부모, 조 바크먼과 바바라 프라이드는 맨해튼 법정을 떠난 후 ""우리는 가슴이 찢어지고, 우리 아들을 위해 계속 싸울 것""이라는 성명을 발표함.

암호화폐 커뮤니티 일부, SBF의 형량과 다크 마켓 사이트 창립자의 형량 비교

     * 암호화폐 커뮤니티의 몇몇 유명 인사들은 샘 뱅크먼-프라이드의 25년 형량에 문제를 제기함. 로스 울브리히트는 2015년 종신형을 선고받았는데, 그는 익명으로 물건을 사고팔 수 있는 웹사이트인 실크로드를 만들었음.
     * 비트코인 매거진은 SBF가 선고받은 후 ""비트코인 예수""로 불리는 초기 비트코인 투자자 로저 버의 글을 공유함. 버는 정부의 허가 없이 자유롭게 거래할 수 있는 웹사이트를 만든 것이 '범죄'라고 주장함.

미국 검사 윌리엄스: SBF의 형량은 다른 이들에게 경고

     * 뉴욕 남부 지방의 미국 검사인 다미안 윌리엄스는 뱅크먼-프라이드의 25년 형량이 ""피고인이 다시는 사기를 저지르지 못하게 하고, 재정 범죄에 빠질 수 있는 다른 이들에게 정의가 신속하고 결과가 심각할 것이라는 중요한 메시지""라고 말함.

SBF가 실제로 복역할 기간은?

     * 연방 형사 사건에서 가석방은 없지만, 뱅크먼-프라이드는 선한 행동으로 25년 형량에서 시간을 줄일 수 있음.
     * 연방 수감자는 선한 행동으로 매년 최대 54일의 시간을 줄일 수 있으며, 이는 약 15%의 감소를 의미함.
     * 2018년 이후, 비폭력 연방 수감자는 First Step Act라는 교도소 개혁 법안에 따라 최대 50%까지 형량을 줄일 수 있음.
     * 법원은 또한 특별하고 중대한 이유로 인해 형량을 줄일 수 있는 규정을 가지고 있으며, 이는 종종 의료적인 이유로 사용됨.

카플란 판사, 중간 보안 연방 교도소 추천

     * 판사 루이스 카플란은 뱅크먼-프라이드가 중간 보안 시설이나 교도소가 적절하다고 판단하는 어떤 낮은 보안 시설에 배치되도록 교도소국에 추천함.
     * 중간 보안 연방 교도소는 강화된 경계(종종 전자 감지 시스템이 있는 이중 울타리)와 주로 세포식 주거를 가지고 있으며, 다양한 작업 및 치료 프로그램을 제공함.

카플란 판사, 110억 달러 몰수 명령

     * 판사 카플란은 110억 달러의 몰수를 명령함.
     * 그는 뱅크먼-프라이드의 몰수된 자산이 FTX 붕괴의 피해자들에게 환불하는 데 사용될 수 있도록 함.

카플란 판사: SBF가 다시 범죄를 저지를 위험 ""사소하지 않음""

     * 카플란 판사는 25년 형량을 발표하기 전에, ""이 남자가 미래에 매우 나쁜 일을 할 수 있는 위치에 있을 위험이 있으며, 그것은 사소한 위험이 아니다""라고 말함.
     * 뱅크먼-프라이드는 고객들에게 발생한 일에 대해 사과했지만, ""끔찍한 범죄를 저지른 것에 대한 어떠한 후회의 말도 하지 않았다""고 카플란 판사는 덧붙임.

뱅크먼-프라이드, 25년형 선고

     * 샘 뱅크먼-프라이드는 암호화폐 거래소 FTX의 고객과 투자자를 사기친 혐의로 25년의 연방 교도소에서의 징역형을 선고받음.

카플란 판사: SBF는 '매우, 매우 정치적으로 영향력 있는 인물'이 되고자 함

     * 카플란 판사는 SBF가 ""특별히 특권적인 배경에서 자랐으며"" 매우 똑똑하고 자폐증을 앓고 있다고 언급함.
     * 그는 SBF가 ""엄청난 성취를 할 수 있는 능력이 있지만, 때때로 사람들과의 상호작용 방식이 이상하고 불쾌할 수 있다""고 말함.
     * 카플란 판사는 검사들의 주장에 동의하며, 뱅크먼-프라이드가 ""이 나라에서 매우, 매우 정치적으로 영향력 있는 인물이 되고자 했으며,"" 그것이 그의 재정 범죄를 추진했다고 말함.

GN⁺의 의견

     * 이 사건은 암호화폐 업계에 대한 신뢰를 크게 훼손한 사례로, 투자자들에게 투명성과 규제의 중요성을 상기시킴.
     * 뱅크먼-프라이드의 형량은 다른 잠재적 범죄자들에게 경고의 메시지를 보내며, 암호화폐 업계에 대한 법적 감독의 필요성을 강조함.
     * 이 사건은 암호화폐 거래소의 안전성과 신뢰성을 평가할 때 사용자들이 더욱 신중해야 한다는 것을 보여줌. 예를 들어, Coinbase와 같은 규제를 받는 거래소는 사용자에게 더 안전한 선택이 될 수 있음.
     * 기술적으로, 이 사건은 블록체인 기술의 투명성을 활용하여 거래소의 운영을 감시하는 데 도움이 될 수 있는 새로운 솔루션의 필요성을 부각시킴.
     * 암호화폐 시장의 불안정성과 관련하여, 투자자들은 자신의 자산을 보호하기 위해 다양한 보안 조치와 함께 분산 투자의 중요성을 인식해야 함.

        Hacker News 의견

     * 한 사용자는 사촌에 대한 어느 삼촌의 말을 인용하며, 사람이 일을 너무 망쳐서 회복이 불가능한 지경에 이를 수 있다고 언급함. 이는 샘(Sam)에게 해당되는 말이며, 샘의 주변 사람들이 그 영향에서 벗어나 피해를 복구하는 데서 의미를 찾기를 바람.
          + Rick Heicklen의 글을 인용, 우리는 샘은 아니지만 캐롤라인(Caroline), 니샤드(Nishad), 나탈리(Natalie), 또는 마이클 루이스(Michael Lewis)가 될 수 있으며, 그들과 같은 실수를 저지를 수 있음을 지적함.
     * 다른 사용자는 샘으로 인해 수만 달러를 잃었지만, 그의 형량에 대해 아무런 감정을 느끼지 못하고, 이유를 모르겠다고 표현함. 거리에서 강도에게 훨씬 적은 돈을 빼앗겼다면 훨씬 더 복수심을 느꼈을 것이라고 생각함.
          + 복수심을 느껴야 하는지, 아니면 잊고 넘어가는 것이 건강한 태도인지 확신할 수 없음을 나타냄.
     * 또 다른 사용자는 2022년 뉴욕 남부 연방 지방법원에서 평균 살인범의 형량이 231개월(약 19년)이었고, 어떤 범죄도 평균 25년을 넘지 않았다는 통계를 제시함.
          + 이를 바탕으로 샘의 형량이 가벼운 것이 아니라, 오히려 범죄의 성격에 비해 과도할 수 있다는 주장을 제기함.
     * 한 사용자는 샘의 형량이 유럽에서라면 25년보다 훨씬 적었을 것이라고 언급하며, 25년은 매우 긴 기간이라고 평가함.
          + 재판 중 판사의 발언이 흥미롭다고 언급하며, 실시간 트윗 링크를 공유함.
     * 다른 사용자는 샘을 사기꾼으로 인정하면서도 그의 재판 방어가 재미있다고 평함. 샘은 자신이 올바른 일을 하려 했다고 믿어 재판에서 자신의 행동을 길게 변호했으며, 이는 그에게 자유를 더 오래 박탈당하는 결과를 초래했을 수 있음.
          + 샘의 진정성이 어느 정도 매력적이라고 느낌.
     * 또 다른 사용자는 이스라엘 영화 제작자 부부를 만나고 그들이 S.B.F.와 관련된 일로 큰 돈을 벌었다는 이야기를 들었다고 함.
          + S.B.F.에 대한 비공개 인터뷰를 본 후, 세상이 얼마나 작고 이상한지에 대한 생각을 나눔.
     * 한 사용자는 SBF가 2036년에 45세의 나이로 출소할 것이라고 언급하며, 그가 다시 문제를 일으킬 가능성이 있다고 추측함.
     * 또 다른 사용자는 폭력적인 사람들은 사회의 안전을 위해 격리가 필요하지만, 이런 종류의 범죄에 대해서는 5-10년의 징역보다는 금융 거래를 다시는 하지 못하게 하는 것이 더 낫다고 의견을 제시함.
          + 샘을 감옥에 가두는 대신 도로 작업을 하게 하는 것이 세금을 절약하는 방법일 수 있음을 언급함.
     * 검찰은 50년의 징역을 요구했고, 변호인은 5년을 요구했으며, 결국 선고된 형량은 그 중간값임을 설명하는 사용자가 있음.
     * 마지막으로 한 사용자는 샘에게 선고된 형량이 생각했던 것보다 많지만, 받아야 할 것보다는 적다고 평가함.
"
"https://news.hada.io/topic?id=14059","Ask GN: 프로덕션 레벨로 사용할 만한 다국어 스펠체크 API 추천해주실 수 있으실까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Ask GN: 프로덕션 레벨로 사용할 만한 다국어 스펠체크 API 추천해주실 수 있으실까요?

   저는 미디어 번역 회사에 재직중이고, 자막 편집기를 제공합니다.

   편집기에서 스펠체크 기능이 있고, 전체 자막을 텍스트로 변환하여 (잘라서) API를 호출합니다.

   지금은 bing API를 쓰고 있는데 무척 성능이 안 좋습니다. 잡아야 할 걸 못 잡고, 안 잡아야 할 걸 잡네요.

   시도해본 대안들은 다음과 같습니다.
     * AWS 스펠체크는 한 번 호출에 20글자 제한이 있어서 쓰기가 너무 어렵고
     * 그래머리는 작년에 API 지원이 종료됐고
     * https://sapling.ai/ 를 테스트해봤는데 오히려 bing의 품질이 더 낫고
     * https://rapidapi.com/collection/grammar-spellcheck-api 여기에 있는 것들도 다 테스트해봤는데 bing보다 딱히 낫다고 하기 어려웠습니다.

   꼭 '다국어'가 아니더라도 영어만이라도 잘 잡히면 좋겠는데 좋은 대안책이 별로 없네요. 꼭 제품 추천이 아니더라도, 스펠체크를 해보신 경험을 나눠주시면 감사하겠습니다.

   https://huggingface.co/mzbac/mistral-grammar/tree/main
   다국어라는 말에 꽂혀서 Mistral 계열을 찾다보니 이런 게 있었는데, 제품 레벨까지 충족시키는 정도인지는 잘 모르겠습니다...
   영어에 맞추어 파인튜닝된 모양인데, 이 모델 한번 시도해보시는 건 어떨지요
"
"https://news.hada.io/topic?id=13963","Show HN: 마법사를 위한 미니멀리스트 CSS, 'magick.css'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: 마법사를 위한 미니멀리스트 CSS, 'magick.css'

MAGICK.CSS 기본 사항

     * magick.css는 사용하기 쉽고 이해하기 쉬운 최소주의적인 (대부분) 클래스가 없는 CSS 프레임워크임.
     * 단일 파일로 구성되어 있으며, 모든 선택사항이 주석 처리되어 있음.
     * 목표는 우아하고 마법처럼 장난기 있는 모습을 달성하면서 가독성과 정보 전달 능력을 극대화하는 것임.

MAGICK.CSS 사용 방법

     * magick.css는 normalize.css와 함께 사용하는 것이 좋음.
     * CDN을 통해 HTML <head>에 두 줄을 추가하여 프로젝트에 적용할 수 있음.
     * 또는 magick.css 파일을 다운로드하여 HTML <head>에 포함시킬 수 있음.
     * JS 프로젝트에는 npm install로 설치하고 코드에서 import하여 사용할 수 있음.
     * HTML5 문서와 함께 사용하면 99% 클래스가 필요 없으며, 몇 가지 멋진 기능을 사용할 수 있음.

레이아웃

     * 페이지를 반응형이고 읽기 쉬운 열로 구조화하려면 모든 내용을 <main> 태그로 감싸고, <section> 태그를 사용하여 장문의 내용을 섹션으로 나눌 수 있음.
     * <aside> 태그를 사용하여 주변 정보를 추가할 수 있으며, 사이드노트를 통해 포인트를 확장하거나 추가 컨텍스트를 제공할 수 있음.

타이포그래피

     * magick.css가 제공하는 타이포그래피의 예시를 보여줌.
     * <h4> 이하의 제목은 스타일링되지 않으며, 필요한 경우 사용자가 직접 스타일을 적용할 수 있음.

구조화된 내용

     * 리스트와 테이블은 간단하게 유지되어 내용에서 주의를 산만하게 하지 않음.

양식 및 입력

     * 인터랙티브 요소는 독립적으로 사용하거나 양식의 일부로 사용할 수 있음.
     * 버튼, 텍스트 입력, 체크박스, 라디오 버튼, 필드셋 등이 예시로 제공됨.

미디어 및 피규어

     * 이미지와 비디오와 같은 미디어 요소는 독립적으로 사용하거나, 피규어로 제시하여 내용에 구조와 우아함을 더하고 캡션을 사용하여 컨텍스트를 추가할 수 있음.

코드, 인용문 및 사전 서식

     * 코드는 인라인 또는 별도의 블록으로 표시할 수 있으며, 인용문은 <blockquote> 태그를 사용하여 추가함.

추가 기능

     * 사이드노트와 자동 번호 매기기와 같은 추가 기능을 사용할 수 있으며, 이러한 기능은 특별한 클래스를 요구하므로 magick.css의 주요 기능에는 포함되지 않음.

GN⁺의 의견

     * magick.css는 사용자에게 CSS의 복잡성을 줄이고, 웹 페이지 디자인을 간소화하는 방법을 제공함.
     * 이 프레임워크는 특히 문서나 블로그와 같은 텍스트 중심의 웹사이트에 적합할 수 있으며, 사용자가 콘텐츠에 집중할 수 있게 도와줌.
     * 그러나 복잡한 인터랙티브 기능이나 동적인 웹 애플리케이션을 구축하려는 개발자에게는 제한적일 수 있음.
     * 비슷한 기능을 제공하는 다른 CSS 프레임워크로는 Bootstrap, Foundation, Bulma 등이 있으며, 각각의 프레임워크는 특정한 사용 사례와 선호도에 따라 선택될 수 있음.
     * magick.css를 도입할 때는 프로젝트의 디자인 요구사항과 프레임워크의 제약 사항을 고려해야 하며, 단순함과 사용 편의성 사이의 균형을 잘 맞추어야 함.

        Hacker News 의견

     * 폰트가 스타일과 잘 어울릴 때의 좋은 예시로, 폰트가 너무 잘 맞아 눈에 띄지 않는다는 의견.

     ""폰트가 스타일을 보완하는 훌륭한 예시로, 폰트가 너무 잘 어울려 거의 눈에 띄지 않음.""
     * 디자인 시스템과 그것을 보여주는 방식이 아름답다고 평가하며, 세부적인 라인 높이와 무게에 대한 주의까지 마음에 든다고 함. 코드에 관심 있는 사람들을 위한 링크 제공. 커스텀 체크박스와 라디오 버튼이 없어 몰입이 깨진다는 아쉬움을 표현하며, 블로그를 만들 영감을 받았다고 함.

     ""아름다운 디자인 시스템과 세부적인 주의가 돋보이는 프레젠테이션에 대한 칭찬. 커스텀 체크박스와 라디오 버튼의 부재가 아쉬움. 블로그 제작에 대한 영감을 얻음.""
     * 간단한 예시에서의 작은 오타를 지적하며, header가 아닌 main을 닫아야 한다고 함.

     ""예시 코드에서 header 대신 main을 닫아야 하는 오타 지적.""
     * LaTeX 문서의 느낌과 함께하는 개인 사이트의 매력에 대해 언급하며, 옛 대학 교수들의 초미니멀 웹사이트 스타일을 멋지다고 평가. 개인 블로그가 더 인기 있었으면 하는 바람을 표현.

     ""LaTeX 문서 스타일과 초미니멀 웹사이트에 대한 매력 언급. 개인 블로그의 인기를 바람.""
     * Tufte CSS를 좋아할 것 같다는 추천과 함께 링크 제공.

     ""Tufte CSS를 추천하는 의견과 관련 링크 제공.""
     * 대문자로 된 스크립트 폰트는 가독성에 치명적이라며, 대문자 사용을 피하고 크기, 무게, 이탈릭을 사용해 강조할 것을 권장.

     ""대문자 스크립트 폰트의 가독성 문제 지적. 강조를 위한 대안으로 크기, 무게, 이탈릭 사용 권장.""
     * 폰트가 매우 읽기 쉽고 귀엽지만 과하지 않아 매력적이라는 긍정적인 피드백.

     ""폰트의 가독성과 매력에 대한 긍정적인 평가.""
     * 원격 폰트가 차단될 때 텍스트가 Comic Sans로 렌더링되어 좋지 않은 인상을 준다는 의견.

     ""원격 폰트 차단 시 Comic Sans로 렌더링되는 것에 대한 부정적인 의견.""
     * 미니멀리스트 CSS 프레임워크가 더 많았으면 하며, 특히 개성이 있는 스타일을 찾기 어렵다는 의견.

     ""개성 있는 미니멀리스트 CSS 프레임워크에 대한 수요 표현.""
     * 디자인을 좋아하며, 중국어 번역을 본 후 중국어를 읽을 수 있는 사람의 의견이 궁금하다고 함. 영어에 비해 폰트 옵션이 제한적이라고 언급하며, 사진도 다르게 사용되고 있다는 점을 지적.

     ""디자인에 대한 호감과 중국어 번역의 가독성에 대한 궁금증. 폰트 옵션의 제한성과 다른 사진 사용에 대한 언급.""
"
"https://news.hada.io/topic?id=14050","LogicKor: 한국어 언어모델 다분야 사고력 벤치마크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LogicKor: 한국어 언어모델 다분야 사고력 벤치마크

   영어권 벤치마크 중 8개 카테고리에 대해 10개씩의 질문으로 구성된 벤치마크 MT-Bench에서 영감을 받아 작성된 한국어 언어모델 벤치마크라고 합니다.
   제작자 분은 현재 쓰이는 한국어 언어모델의 벤치마크에서 한계점을 보아 제작하셨다고 하네요.

   아래는 LogicKor 벤치마크에 대해 제작자 분의 글에서 인용한 부분입니다.


한국어 모델의 사고력을 판단 할 수 있는 6가지의 주제를 아래와 같이 나누어보았습니다.
추론 (Reasoning) - 논리적 사고, 문제 해결
수학 (Math) - 수학적 개념, 계산
글쓰기 (Writing) - 문장간의 호응, 창의력
코딩 (Coding) - 코딩 지식, 기능 구현
이해 (Understanding) - 지문 이해, 정보 추출, 지시 이행
문법 (Grammar) - 한글 맞춤법, 표준 발음법

그리고, 각 주제에 7가지의 멀티턴 질문을 제작하였구요.


   레포에는 별다른 설명이 없는데 인용하신 글도 링크를 첨부해주실 수 있을까요?

   커뮤니티 사이트에 올라온 글이다보니 단어 선택이 좀 강할 수 있고... 그래서 자칫 댓글란이 큰일이 날까봐 우려하여 글 링크를 달지 않았었습니다.
   해당 글의 주소입니다: https://arca.live/b/alpaca/102052014

   감사합니다! 업스테이지에서 의심이 많이가는 벤치마크 결과를 뿌린다는 생각이 들었는데 저만 한 생각은 아니었네요.. 클로바X 체감성능이 그렇게 좋진 않았는데 한국 모델중에서는 1등이네요.
"
"https://news.hada.io/topic?id=14047","Ask HN: LLM들의 소음에 묻히지 않는 ML 분야의 동향은 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask HN: LLM들의 소음에 묻히지 않는 ML 분야의 동향은 무엇인가?

     * 대형 언어 모델(LLMs)의 소음에 묻혀 들리지 않는 기계학습(ML) 및 데이터 과학 분야에서는 여러 가지 흥미로운 일들이 발생하고 있음
     * Cynthia Rudin은 설명 가능한 인공지능(AI)에 대한 뛰어난 연구를 지속적으로 발표하고 있음
     * 최근 몇 달 동안의 흥미로운 프로젝트들:
          + 몇 장의 이미지로부터 3D 장면 재구성: NAVER LABS Europe
          + 가우시안 아바타: Gaussian Avatars
          + 재조명 가능한 가우시안 코덱: Relightable Gaussian Codec
          + 모든 것을 추적: Co-Tracker, Omnimotion
          + 모든 것을 분할: Segment Anything by Facebook Research
          + 우수한 인간 자세 추정 모델: Yolov8, Google의 MediaPipe 모델
          + 사실적인 TTS: XTTS-v2 by Coqui on Hugging Face, Bark TTS
          + 우수한 STT: 대부분 Whisper 기반
          + 기계 번역: 예를 들어 Meta의 SeamlessM4T
          + Meta의 R&D에서 나오는 많은 결과물에 대한 감탄
     * NeRFS에 대한 설명:
          + 3D 그래픽스를 근본적으로 재고하는 것으로, 텍스처가 있는 다각형 대신 빛나는 반투명한 구체들을 배치하는 방식
          + 구체들의 위치와 색상은 정확한 다각도 카메라 샷과 포즈를 통해 신경망에 의해 학습되며, GPU에서 레이 트레이싱을 통해 렌더링 가능
          + 장면들은 사진에서 생성되었기 때문에 완전히 사실적이지만, 탐험도 가능
          + 이론적으로 이러한 장면들을 애니메이션화할 수 있지만, 실제로 어떻게 하는지는 여전히 연구 문제
          + Nanite+photogrammetry와 같은 최적화된 다각형 기반 시스템보다 더 나을지 여부는 미지수
     * 차량에서 도로의 비디오를 촬영하여 3D 장면을 만들 수 있는 도구에 대한 질문:
          + 도로 주변 풍경에 초점을 맞추고, 여러 각도에서 여러 번 운전할 수 있으며, 처리 시간이 많이 걸려도 괜찮음
          + 레이싱 시뮬레이터에서 사용할 지역 도로를 만들고자 함
     * 기하학적 딥러닝에 대한 관심:
          + 데이터의 알려진 대칭성을 존중하도록 원칙적으로 모델을 설계하는 방법
          + ConvNets는 그들의 변환 동등성으로 유명하지만, 다른 대칭 그룹에 대한 최근 예시들도 존재
          + 특정 대칭성을 자동으로 발견하거나 식별할 수 있는지에 대한 질문도 있음
     * UW-Madison의 ML+X 커뮤니티가 주최하는 기계 학습 마라톤 소개:
          + Kaggle에서 경쟁으로 특집될 약 12주간의 여름 이벤트
          + 기계 학습 도구를 함께 배우고 적용하여 실제 데이터셋에 대한 혁신적인 해결책을 찾는 기회
          + 다양한 도전 과제가 있으며, 초보자와 고급 실무자 모두에게 적합
          + 참가자, 프로젝트 조언자, 이벤트 주최자가 주간 또는 격주로 모여 팁을 공유하고 짧은 데모/토론을 진행
          + 기술 향상과 커뮤니티 구축의 내재적 보상 외에도 우승 팀에게는 현금 상금이 주어짐
     * LLMs의 사촌 격인 Vision-Language-Action (VLA) 모델 RT-2 소개:
          + 텍스트와 비전 데이터 외에도 로봇 동작 데이터를 ""또 다른 언어""로 포함하여 로봇의 움직임 동작을 출력하는 토큰으로 사용
     * SAM 계열의 컴퓨터 비전 모델들이 많은 인간 주석 서비스와 도구들을 어느 정도 불필요하게 만들었다는 의견:
          + 비전 데이터의 자동 라벨링을 상대적으로 고품질로 달성 가능
     * arXiv에서 관심 있는 특정 주제에 대한 최신 연구를 얻기 위해 Scholars.io를 출시한 경험 공유:
          + 관심 없는 연구를 필터링할 수 있어서 다른 사람들이 LLM 외의 연구 활동을 찾는 데 도움이 되기를 희망
     * 2024년에도 ML을 계속 배우는 것이 가치가 있는지에 대한 질문과 개인적인 직관에 대한 언급:
          + xgboost를 사용한 부수적인 프로젝트에 대한 작업 경험 공유
          + ML이 여전히 가치가 있다고 느끼지만 확신할 수 없음
"
"https://news.hada.io/topic?id=13968","왜 2% 인플레이션 목표인가? (2023년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        왜 2% 인플레이션 목표인가? (2023년)

2% 인플레이션 목표는 왜?

     * 최근 인플레이션이 뉴스에서 자주 다루어짐.
     * 미국 중앙은행인 연방준비제도는 2012년부터 공식적으로 2%의 인플레이션 목표를 설정함.
     * 인플레이션 목표가 0%가 아닌 이유, 왜 1%나 디플레이션이 아닌지에 대한 이유 탐구.

2% 인플레이션 목표의 기원

     * 2% 인플레이션 목표는 뉴질랜드에서 시작되어 중앙은행의 독립성을 법적으로 명시하는 과정에서 제시됨.
     * 목표 달성 실패 시 중앙은행 총재 해임 가능.
     * 목표 설정은 정치적 과정으로부터 은행의 독립성 확립이 더 중요한 목적이었음.
     * 당시 중앙은행 총재의 즉흥적 발언으로 0~1% 목표가 제시되었으나, 실제로는 2%로 설정됨.

인플레이션 목표의 효과

     * 인플레이션 목표는 계약, 임금, 비용 등에 영향을 미치며 인플레이션 사이클을 늦추는 효과가 있음.
     * 뉴질랜드의 인플레이션은 1989년 7.6%에서 1991년 2%로 감소함.
     * 캐나다와 영국이 뉴질랜드를 따라 인플레이션 목표를 설정함.

미국의 인플레이션 목표 논의

     * 미국에서는 0~1% 인플레이션 목표를 지지하는 의견과 더 높은 목표를 지지하는 의견이 대립함.
     * 저인플레이션은 경기 침체 시 행동의 여지를 제한하고 디플레이션 위험을 증가시킴.
     * 디플레이션은 투자와 소비 감소로 이어져 경기 침체를 악화시킬 수 있음.
     * 일본의 장기 경기 침체와 2001년 경기 침체는 미국의 더 높은 인플레이션 목표 논의를 강화함.
     * 2008년 경기 침체 이후 2% 인플레이션 목표로의 합의가 이루어지고, 2012년 공식화됨.

인플레이션 목표의 힘과 문제점

     * IMF 연구에 따르면 인플레이션 목표는 인플레이션 기대를 안정시키고 변동성을 낮추는 데 효과적임.
     * 그러나 인플레이션 목표 변경 시 연준의 신뢰도 손실과 인플레이션 사이클 발생 위험이 있음.
     * 연준의 신뢰도 손실은 인플레이션 목표 변경의 이점보다 큰 문제를 야기할 수 있음.

GN⁺의 의견

     * 인플레이션 목표 설정은 경제에 심리적 안정감을 제공하고, 투자자와 소비자의 예측 가능성을 높임.
     * 2% 목표는 경기 침체 시 중앙은행이 적극적으로 대응할 수 있는 여지를 제공하지만, 목표 변경 시 시장의 혼란을 야기할 수 있음.
     * 인플레이션 목표는 경제학적 이론과 실제 경제 상황 간의 균형을 찾는 데 중요한 역할을 함.
     * 다른 국가들의 인플레이션 목표 설정 사례를 비교 분석하여 최적의 목표 수준을 찾는 연구가 필요함.
     * 경제 전문가들은 인플레이션 목표 설정의 장단점을 지속적으로 검토하고, 글로벌 경제 변화에 맞춰 목표를 조정할 필요가 있음.

        Hacker News 의견

     * Yellen은 90년대 중반 Greenspan과 다른 이들에게 인플레이션이 2%일 때 임금 인상을 주지 않으면 사실상 임금을 낮추는 것과 같다고 말했다고 함. 이는 노동 비용을 조정할 수 있는 유일한 방법이었음. 또한 Greenspan 재임 시 인플레이션 계산 방식이 변경되었는데, 이는 정부가 인플레이션에 연동된 혜택을 줄일 수 있는 이점을 가져다주었으나, 빈곤층에게 더 큰 피해를 주었다고 함.
     * 은행이 돈을 찍어내면 부자가 되고, 물가가 상승하는 부작용이 생긴다고 함. 은행은 효율성 증가로 인해 시간이 지남에 따라 가치가 하락하는 상품과 서비스의 가치를 흡수할 수 있으며, 추가로 2%를 더 찍어낼 수 있다고 함. 이는 수세기 동안 은행으로의 부의 은밀한 이전이었으며, 주택 가격을 예로 들어 화폐 단위의 가치 하락을 설명함.
     * 공개적이고 구속력 있는 인플레이션 목표가 있으면 경제 주체들이 서로 예측 가능해지고 안정화에 도움이 된다고 함. 인플레이션 목표가 있느냐 없느냐 자체가 특정 목표치를 결정하는 것보다 더 중요하다고 함.
     * 경제학 수업에서 인플레이션 목표 2%의 이유로, 디플레이션이 인플레이션보다 훨씬 나쁘며, 인플레이션이 소비를 촉진하고 성장을 이끈다는 점과, 인플레이션이 실질적인 부채 가치를 줄인다는 점을 배웠다고 함.
     * 인플레이션 목표를 정하는 과정이 우연하고 생각보다 덜 체계적이었다는 점을 언급하며, STEM 분야의 결정들도 종종 이와 유사하다고 함.
     * Paul Krugman은 인플레이션 목표 2%에 대한 이론적 가정이 실제로는 사실이 아니었다고 주장함. 인플레이션 목표가 낮으면 경기 침체 시 대응 능력이 제한될 수 있다는 우려가 있음.
     * 높은 인플레이션 수준은 공공 부채 수준이 기하급수적으로 증가하고 예산 적자를 줄이려는 정치적 의지가 없기 때문에 피할 수 없다고 함. 사회 보장 프로그램의 파산 위기 등이 상황을 악화시키며, 인플레이션 목표가 무엇이든 간에 실제로는 목표 수준을 벗어난 인플레이션을 경험할 것이라고 함.
     * 인플레이션 목표의 무작위성과 일본의 부동산 버블 붕괴로 인한 디플레이션을 예로 들며, 인플레이션과 디플레이션의 영향에 대한 개인적 견해를 제시함. 인플레이션은 불필요한 지출을 유도하고, 디플레이션은 필요한 물건을 구매할 때까지 기다리게 함으로써 더 건강한 경제 활동을 촉진한다고 주장함.
     * 인플레이션을 2%로 유지하는 이유는 디플레이션이 경제에 끔찍한 영향을 미칠 수 있기 때문이라고 함. 인플레이션은 인기가 없기 때문에 낮게 유지하려는 경향이 있으며, 경제 성장을 촉진하거나 외부 충격에 대응하기 위해 이자율을 ""낮출"" 여지를 남겨두려고 함.
"
"https://news.hada.io/topic?id=13959","GritQL - 소스코드 재작성을 위한 Rust CLI ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GritQL - 소스코드 재작성을 위한 Rust CLI

     * 소스 코드를 검색하고 수정하기 위한 선언적 쿼리 언어(Declarative Query Language)
     * 대규모 코드베이스에서 효율적으로 검색하고 수정할 수 있게 해주는 도구로, 특히 대규모 리팩토링이나 코드 마이그레이션 작업에 유용
     * 기존의 grep 검색이나 jscodeshift와 같은 도구의 한계를 극복하고자 만들어졌으며, 사용자가 쉽게 코드 패턴을 탐색하고 재사용할 수 있도록 설계
     * 복잡한 추상 구문 트리(AST)를 직접 다루지 않고도 코드를 효과적으로 검색하고 수정할 수 있으며, Rust로 작성되어 높은 성능을 제공(천만라인 이상의 Repo에도 가능)
     * 빌트인 모듈 시스템을 통해서 200개 이상의 표준 패턴을 재사용하거나 직접 만든 패턴을 공유가능
     * GritQL을 배우면 모든 대상 언어를 다시 작성하는 데 사용 가능: JavaScript/TypeScript, Python, JSON, Java, Terraform, Solidity, CSS, Markdown, YAML, Rust, Go, SQL
"
"https://news.hada.io/topic?id=14048","LLM이 저장된 지식을 검색하기 위해 사용하는 놀랍도록 단순한 메커니즘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                LLM이 저장된 지식을 검색하기 위해 사용하는 놀랍도록 단순한 메커니즘

MIT 연구진, 대규모 언어 모델의 지식 탐색 기법 시연

     * 대규모 언어 모델이 사용자의 프롬프트에 응답할 때 저장된 지식을 검색하는 간단한 메커니즘을 사용함을 발견.
     * 연구진은 이 간단한 메커니즘을 활용하여 모델이 다양한 주제에 대해 알고 있는 것을 파악하고, 잘못 저장된 정보를 수정할 수 있음.

대규모 언어 모델의 복잡성

     * 대규모 언어 모델은 고객 지원, 코드 생성, 언어 번역 등 다양한 분야에서 사용되고 있으나, 그 작동 원리는 완전히 이해되지 않음.
     * MIT와 다른 기관의 연구진은 이러한 거대한 기계 학습 모델이 저장된 지식을 검색하는 메커니즘을 연구함.

지식의 단순한 검색 메커니즘

     * 연구 결과, 대규모 언어 모델은 종종 단순한 선형 함수를 사용하여 저장된 사실을 복구하고 해독함.
     * 모델은 유사한 유형의 사실에 대해 동일한 해독 함수를 사용함.
     * 선형 함수는 두 변수 간의 직선적인 관계를 나타내는 방정식임.

모델이 알고 있는 것 탐색

     * 연구진은 다양한 사실에 대한 선형 함수를 식별하여 모델이 새로운 주제에 대해 알고 있는 것을 탐색하고, 그 지식이 모델 내 어디에 저장되어 있는지 확인함.
     * 개발된 기법을 사용하여 추정된 간단한 함수들을 통해, 모델이 잘못된 답변을 할 때에도 종종 올바른 정보를 저장하고 있음을 발견함.

모델의 지식 시각화

     * 연구진은 함수들을 사용하여 모델이 다른 주제에 대해 무엇을 진실로 믿고 있는지 결정함.
     * 예를 들어, ""Bill Bradley was a""라는 프롬프트로 시작하여 ""plays sports""와 ""attended university""에 대한 해독 함수를 사용하여 모델이 센. 브래들리가 농구 선수이자 프린스턴 대학교 출신임을 알고 있는지 확인함.
     * 이러한 탐색 기법을 사용하여 '속성 렌즈'라고 불리는 그리드를 생성하여 특정 관계에 대한 정보가 변환기의 여러 계층 내에서 어디에 저장되어 있는지 시각화함.

GN⁺의 의견

     * 이 연구는 대규모 언어 모델이 어떻게 사실적 지식을 저장하고 검색하는지에 대한 이해를 한 단계 끌어올림.
     * 모델이 잘못된 정보를 제공하는 경향을 줄이기 위해 연구 결과를 활용하여 지식을 수정하고 AI 챗봇의 오류를 방지할 수 있는 가능성을 제시함.
     * 이 기술이 적용될 경우, AI의 신뢰성 향상에 기여할 수 있으며, 사용자 경험을 개선하는 데 도움이 될 것임.
     * 그러나 모든 사실이 선형적으로 인코딩되지 않는다는 점에서, 이 기법이 모든 유형의 지식 검색에 적용될 수 있는지에 대한 추가 연구가 필요함.
     * 유사한 기능을 제공하는 오픈소스 프로젝트로는 Google의 BERT나 OpenAI의 GPT 시리즈가 있으며, 이들도 대규모 언어 모델의 작동 원리를 이해하는 데 기여하고 있음.
     * 새로운 기술을 도입할 때는 모델의 복잡성과 해석 가능성 사이의 균형을 고려해야 하며, 이 기술을 선택함으로써 얻을 수 있는 이점은 모델의 정확성과 신뢰성 향상이 될 것임.

        Hacker News 의견

     * 이 놀라운 작업은 현재 AI 분야의 가장 큰 문제 중 일부를 강조함
          + 우리는 퍼셉트론과 크게 다르지 않은 뉴런이나 규칙 세트에 대해 실제로 작업을 시도하지 않고 있음
          + 단순한 합산 기능인 퍼셉트론 구조가 모델에서 반복되는 것이 놀라운 일은 아님
          + 피드포워드 토폴로지와 단일 뉴런 단계가 훈련하고 그래픽 카드에서 실행하기 가장 쉬워서 실제로 최선인가에 대한 의문 제기
          + 대형 라이브러리가 지원하지 않기 때문에 사용되지 않는 독특한 훈련 방법과 인코딩 스킴이 존재함
          + 신경망의 기본 규칙 세트에서 실제 변화를 보기 시작할 때까지 우리는 항상 퍼셉트론의 변형과 싸우고 있을 것임
     * 언어의 구조가 Word2Vec을 가능하게 만듦
          + Word2Vec + 위치 인코딩으로 인코딩된 테라바이트의 인간 텍스트에 대한 훈련이 다음 인코딩을 초인간적인 수준으로 예측할 수 있게 함
          + 단어의 가방(입출력 방법)과 위치 인코딩을 작동시키기 위한 제한된 컨텍스트 창이 내부 인지 구조와 큰 불일치를 일으킴
          + GPT-4 등에 훨씬 더 많은 컴퓨팅 파워를 투입함으로써 새로운 형태의 표현이 진화하고 인간이 발견해야 할 가능성이 있음
          + MemGPT는 무제한 장기 기억으로 인해 결국 AGI가 될 수 있지만, 더 가능성이 높은 것은 '메멘토'의 주인공과 같을 것임
     * 사실이 선형 함수로 저장된다는 것이 의미하는 바에 대한 이해를 돕기
          + LLM이 사실을 N차원 ""사실 공간""으로 인코딩하고, 사실을 공간에 포인트/하이퍼스피어/보로노이 다양체 등으로 임베딩하며, 사실을 회상하는 것은 신경망이 키를 계산/기억하고 이 공간에서 키-값 조회를 하는 것임
          + 이러한 KV-스토어를 에지 전파 그래픽 모델에 어떻게 임베딩하는지, 현재 잘 알려진 수동 기술이 있는지에 대한 질문
          + 인간 뇌가 사실을 선형 함수에 임베딩하여 쉽게 검색할 수 있게 하는 ""기억의 궁전"" 기억 기술과의 재미있는 연관성
     * 프로그래밍 지식을 인코딩하는 데 사용되는 함수의 종류에 대한 호기심
          + 표준 라이브러리나 다른 라이브러리를 비용이 많이 드는 훈련이나 성능을 저하시키는 미세 조정 없이 LLM의 뇌에 직접 업로드할 수 있는지에 대한 고찰
          + 아직 공상 과학적 능력이지만 점점 더 가까워지고 있는 것으로 보임
     * Word2Vec에서 관계 벡터가 하는 일과 유사함을 발견
          + ""X의"" 벡터를 더하면 종종 올바른 답을 얻을 수 있음
          + 트랜스포머가 임베딩 공간에 엔터티를 더 잘 매핑하는 것일 수 있음
     * LLM이 좋은 압축 메커니즘으로 보임
          + PC에 로컬로 Llama의 사본을 가지고 있으면 거의 전체 인터넷에 접근할 수 있다는 사실이 놀라움
     * ""King - Man + Woman = Queen"" 임베딩 예시를 상기시킴
          + 임베딩에 의미적 속성이 포함되어 있기 때문에 단순한 선형 함수가 효과적으로 작동하는 이유를 설명함
     * 70억 개의 ""파라미터""가 있는 ""CSV 파일/데이터베이스/모델""이 어떻게 거의 모든 주제에 대해 지식이 풍부한 상호작용형 LLM/GPT를 제공하는지 이해하기 어려움
          + 4비트는 ""압축 방법""이며, 모델은 결국 f32를 보게 됨
          + 양자화는 신경망의 가중치인 32비트 부동 소수점 숫자를 4비트 값과 같은 훨씬 작은 비트 표현으로 매핑하는 과정임
          + 디양자화는 모델 사용 시 발생하며, 4비트 양자화 가중치를 모델의 계산이 실제로 수행되는 부동 소수점 숫자로 변환함
          + ""파라미터""와 모델이 알고 있는 ""고유 토큰 수(어휘 크기)""의 관계에 대한 질문
          + LLAMa는 GPT-3에 비해 32,000 어휘 크기와 65B 파라미터를 가지고 있음
          + 65억 파라미터는 훈련 데이터의 토큰 간에 학습된 관계에 기반하여 주어진 입력에 대해 어떻게 반응할지 결정하는 복잡한 매핑 시스템으로 기능함
     * 이 논문이 멋지고 이러한 아이디어를 검증하기 위해 실험을 수행한 것을 좋아함
          + LLM이 단어 간의 간단한 통계적 경향을 자연스럽게 학습한다는 점을 고려할 때, 아이디어 자체의 새로움에 대한 의문 제기
          + 모든 LLM 행동이 이렇게 단순하게 설명될 수 없다는 것을 명확하게 보여준 것이 훨씬 더 멋짐
     * 추론 부분을 정보 부분과 분리할 수 있는 가능성
          + 이것이 사실이라면 매우 놀라운 발견임
"
"https://news.hada.io/topic?id=14071","XZ 백도어: "인증 우회가 아닌 RCE이며, 게이트가 있고 재생 불가능합니다."","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             XZ 백도어: ""인증 우회가 아닌 RCE이며, 게이트가 있고 재생 불가능합니다.""

xz 백도어 분석

     * 필리포 발소르다는 몇몇 사람들이 xz 백도어를 역공학하는 것을 관찰하고 초기 분석 결과를 공유했음.
     * RSA_public_decrypt 훅은 서버의 호스트 키에 대한 고정된 Ed448 키의 서명을 검증하고, 시스템에 페이로드를 전달함.
     * 이것은 인증 우회가 아닌 원격 코드 실행(RCE)이며, 한 번만 사용 가능하고 재생할 수 없음.

공급망 공격

     * 이 공격은 공개적으로 설명된 가장 잘 실행된 공급망 공격일 수 있으며, 악의적이고 유능하며 널리 사용되는 라이브러리의 공식적인 상위 스트림에서 발생함.
     * 이 공격은 우연히 발견된 것으로 보이며, 그렇지 않았다면 얼마나 오래 걸렸을지 궁금함.

페이로드 추출 및 검증

     * 페이로드는 RSA_public_decrypt에 전달된 N 값(공개 키)에서 추출되며, 간단한 지문에 대해 검사되고, Ed448 서명 검증 전에 고정된 ChaCha20 키로 복호화됨.

RSA_public_decrypt 함수

     * RSA_public_decrypt는 서명 검증 기능을 수행하는데, 이름이 이상하게 들릴 수 있음.
     * RSA 서명 검증은 RSA 암호화와 동일한 연산을 수행함.

OpenSSH 인증서와 공격자 제어

     * RSA_public_decrypt 공개 키는 OpenSSH 인증서를 사용하여 인증 전에 공격자가 제어할 수 있음.
     * OpenSSH 인증서는 서명자의 공개 키를 포함하고 있으며, OpenSSH은 파싱 시 서명을 검사함.

백도어 시스템에 대한 사용자 정의 공개 키 전송 스크립트

     * 키건 라이언이 작성한 스크립트를 통해 사용자 정의 공개 키를 인증서에 넣어 백도어 시스템에 도달하게 하는 훅 함수를 사용할 수 있음.

백도어의 안전 장치

     * 백도어는 페이로드가 잘못되었거나 공격자의 키 서명이 검증되지 않을 경우 정상 작동으로 돌아감.
     * 이는 버그가 발견되지 않는 한, 네트워크를 통한 신뢰할 수 있고 재사용 가능한 스캐너를 작성할 수 없음을 의미함.

GN⁺의 의견

     * 이러한 백도어는 시스템 보안에 심각한 위협을 가하며, 특히 널리 사용되는 라이브러리에 삽입될 경우 그 영향은 더욱 확대될 수 있음.
     * 공격이 우연히 발견되었다는 점은 보안 시스템의 취약점을 드러내며, 지속적인 모니터링과 감사가 얼마나 중요한지를 강조함.
     * 이 기사는 소프트웨어 공급망의 안전성에 대한 인식을 높이는 데 도움이 될 수 있으며, 개발자와 시스템 관리자에게 경각심을 제공함.
     * 백도어와 같은 보안 위협에 대응하기 위해, 오픈소스 보안 도구나 취약점 스캐너를 사용하는 것이 좋음. 예를 들어, OWASP ZAP이나 Nessus와 같은 도구가 유용할 수 있음.
     * 새로운 기술이나 오픈소스를 도입할 때는 보안 측면을 철저히 검토하고, 이러한 공격으로부터 시스템을 보호하기 위한 적절한 조치를 취해야 함.
"
"https://news.hada.io/topic?id=13974","리눅스 위기 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              리눅스 위기 관리 도구

리눅스 위기 도구

     * 리눅스 서버에 기본적으로 설치해야 할 ""위기 도구"" 목록과 해당 도구가 포함된 (우분투) 패키지 이름 제공.
     * 기본 통계, 시스템 로그, 장치 정보, 장치 통계, 네트워크 도구, NUMA 통계, 네트워크 스니퍼, 프로파일러 및 PMU 통계 등을 위한 도구 포함.
     * bpfcc-tools (bcc)와 bpftrace는 eBPF 도구를 제공하며, bcc는 더 많은 기능을 가지고 있고 bpftrace는 실시간으로 편집 가능.
     * 서버에 따라 특정 가속기 분석 도구나 디버깅 도구도 사전 설치 권장.
     * 이러한 필수 분석 도구는 자주 변경되지 않아 몇 년에 한 번만 업데이트 필요.

위기 시 도구 설치의 중요성

     * 생산 환경의 위기 상황에서 소프트웨어 설치 시 발생할 수 있는 문제들을 예시를 들어 설명.
     * 시스템이 느려져 필요한 도구를 설치하는 데 시간이 오래 걸리고, 여러 설정 문제나 보안 정책으로 인해 설치가 어려울 수 있음.
     * 위기 상황에서 신속하게 문제를 진단하고 해결하기 위해 위기 도구를 사전에 설치하는 것이 바람직.

GN⁺의 의견

     * 이 기사는 시스템 관리자나 SRE(사이트 신뢰성 엔지니어)에게 매우 유용한 정보를 제공함. 실제 위기 상황에서 필요한 도구를 빠르게 사용할 수 있도록 사전 준비의 중요성을 강조함.
     * 위기 도구의 사전 설치는 시스템의 가용성과 복원력을 높이는 데 기여하며, 잠재적인 시스템 다운타임을 최소화하는 데 도움이 됨.
     * 하지만, 보안과 성능 사이의 균형을 찾는 것이 중요함. 예를 들어, 불필요한 도구가 시스템에 설치되어 있으면 공격자가 이를 악용할 수도 있음.
     * 리눅스 배포판이 기업 환경에 맞춰 위기 도구를 기본적으로 포함하는 것을 고려할 수 있으나, 이는 각 조직의 보안 정책과 필요에 따라 달라질 수 있음.
     * 오픈소스 커뮤니티에서는 이미 다양한 모니터링 및 성능 분석 도구가 제공되고 있으며, 예를 들어 Prometheus, Grafana와 같은 도구는 시스템 성능 모니터링에 널리 사용됨. 이러한 도구들과 함께 위기 도구를 통합하여 사용하면 시스템 관리가 더욱 효과적일 수 있음.

        Hacker News 의견

     *

     4:07pm 패키지 설치 실패, 저장소를 해결할 수 없음. /etc/apt 설정에 문제가 있음…
          + 클라우드 환경의 단점이 있지만, 이런 상황에서 유용함. 복잡한 수리 대신 문제가 있는 기계를 종료하거나 풀에서 제거하고 새 기계를 사용함으로써 문제를 해결할 수 있음.
     * 컨테이너화된 서버들이 많지만, 여전히 도전과제가 존재함.
          + 도커 이미지 내의 많은 도구들이 보안 스캔 도구에 의해 위험 요소로 표시됨. gdb와 같은 도구는 우려의 대상이지만, 많은 도구들은 그렇지 않음.
          + 이를 피하기 위해 별도의 볼륨에 도구들을 정적 바이너리로 두거나 마운트 경로를 설치 접두어로 사용하여 컴파일 및 설치함. 디버깅이 필요할 때는 운영팀이 볼륨을 읽기 전용으로 일시적으로 마운트함.
     * 특정 커널 기능을 활성화해야 하는 디버그 도구가 있을 경우, 같은 호스트에서 실행되는 다른 컨테이너에 미치는 영향에 대한 우려가 있음.
     * FreeBSD 시스템에서는 /rescue/ 디렉토리가 있어, 약 150개의 중요 도구를 결합한 단일 정적 링크된 약 17MB 바이너리 파일을 제공함.
     * 넷플릭스에서 근무할 때, Brendan과 그의 팀은 bpftrace, bcc, 작동하는 perf와 같은 디버깅 도구를 곳곳에 설치해두었고, 이는 여러 번 생명을 구하는 역할을 함.
     * strace가 리스트에 없는 것에 놀람. 프로그램이 쓸모없거나 잘못된 에러 메시지를 반환할 때 특히 유용한 도구임.
     * SRE 유형의 포지션을 면접할 때 이러한 도구들을 항상 다룸. 후보자가 기억하는 특정 명령어보다는 가능한 것, 사용 가능한 도구의 종류, 그리고 그 사용법을 중요시함.
     * 도구 설치가 불가능한 위기 상황에서는 Docker를 통해 많은 유틸리티를 실행할 수 있음. 예를 들어, 호스트 네트워크에 연결된 상태로 tcpdump를 실행하는 Docker 컨테이너를 빌드하고 실행하는 방법을 제시함.
     * yum install이 선호되지만, Docker가 사용 가능하다면 추가적인 매핑이 필요하더라도 이는 실행 가능한 대안임. rootless/podman 설정에서는 작동하지 않을 수 있음.
     * nmap, netstat, nc가 언급되지 않았음. 이 도구들은 여러 번 문제를 해결하는 데 도움이 됨.
     * 루트 액세스를 얻을 수 있음? 시스템 관리자에게 티켓을 올려야만 어떤 작업도 수행할 수 있음.
     * 추가하고 싶은 것은 nmap임. 네트워크 연결 문제는 일부 앱에서 명확하지 않을 수 있음.
"
"https://news.hada.io/topic?id=14019","[2024/03/18 ~ 03/24] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/03/18 ~ 03/24] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.

     * 이번 주에 선정된 논문들에는 대체로 대규모 언어 모델(LLMs)을 활용한 연구들이 많이 보입니다. 특히, 'Tool Use in LLMs', 'Step-by-Step Comparisons Make LLMs Better Reasoners', 'LLM4Decompile', 'Agent-FLAN', 'LLMs Leak Proprietary Information', 'Retrieval-Augmented Fine-Tuning'과 같은 제목에서 알 수 있듯이, 이들 논문은 LLMs의 다양한 적용 범위와 성능 향상 방법, 그리고 보안 문제까지 다루고 있는 것으로 보입니다.
     * 이러한 경향은 최근 몇 년간 인공지능 분야에서 LLMs가 주목 받으면서, 다양한 연구 분야에서 그 활용 범위를 모색하고자 하는 노력의 결과로 볼 수 있습니다. 특히, 기존의 작업들을 더 효율적으로 처리하기 위한 방법론 뿐만 아니라, 도구 사용이나 문제 해결 과정에서의 추론 능력 향상, 소프트웨어 역공학과 같은 새로운 적용 분야 탐색, 그리고 모델의 안정성과 보안에 대한 연구 등은 LLMs의 발전 가능성을 넓히고 있습니다. 또한, 이러한 연구들은 LLMs가 실제 환경에서 어떻게 활용될 수 있는지, 그리고 이와 관련된 잠재적 문제점들은 무엇인지에 대한 이해를 심화시키는 데 중요한 역할을 하고 있다고 할 수 있습니다.
     * 이와 더불어, 'Evolutionary Model Merge', 'DROID' 같은 논문들은 모델의 통합과 발전 과정에 대한 연구를 제안하면서, 모델의 성능을 지속적으로 개선하고 최적화하는 방법에 대한 관심 역시 높아지고 있음을 보여줍니다. 이는 LLMs 뿐만 아니라 다양한 인공지능 기술의 발전과 통합에 있어 중요한 방향성을 제시하고 있으며, 앞으로의 연구에서도 계속해서 중요한 주제가 될 것으로 예상됩니다. 따라서, 이번 주 선정된 논문들은 LLMs와 관련된 연구의 현재 경향과 향후 방향성에 대해 귀중한 통찰을 제공합니다.


  Grok-1

    논문 소개

     * 기본 모델 가중치 및 네트워크 아키텍처의 공개 릴리스를 포함하는 314B 매개 변수가 있는 전문가 혼합 모델; MoE 모델은 주어진 토큰에 대해 가중치의 25%를 활성화하며 사전 학습 컷-오프 날짜는 2023년 10월입니다.

     a mixture-of-experts model with 314B parameters which includes the open release of the base model weights and network architecture; the MoE model activates 25% of the weights for a given token and its pretraining cutoff date is October 2023.

    논문 링크

   https://x.ai/blog/grok-os

    더 읽어보기

   https://discuss.pytorch.kr/t/x-ai-grok/3793/1

   https://x.com/ibab_ml/status/1769447989192675748


  모델 병합 레시피의 진화적 최적화 / Evolutionary Optimization of Model Merging Recipes

    논문 소개

     * 오픈소스 모델을 결합하기 위해 진화를 사용하여 기초 모델 개발을 자동화하는 접근 방식; 크로스 도메인 병합을 촉진하여 일본 수학 LLM이 이러한 작업에 대해 명시적으로 학습되지 않았음에도 불구하고 일본 LLM 벤치마크에서 최신 성능을 달성하고 심지어 훨씬 더 많은 매개 변수를 가진 모델을 능가하는 성과를 거뒀습니다.

     an approach for automating foundation model development using evolution to combine open-source models; facilitates cross-domain merging where a Japanese Math LLM achieved state-of-the-art performance on Japanese LLM benchmarks, even surpassing models with significantly more parameters, despite not explicitly trained for these tasks.

    논문 초록(Abstract)

     * 강력한 기초 모델 생성을 자동화하기 위한 진화 알고리즘의 새로운 적용 사례를 소개합니다. 모델 병합은 비용 효율성으로 인해 LLM 개발의 유망한 접근법으로 부상했지만, 현재 인간의 직관과 도메인 지식에 의존하고 있어 그 잠재력이 제한적입니다. 여기서는 광범위한 추가 학습 데이터나 컴퓨팅 없이도 다양한 오픈 소스 모델의 효과적인 조합을 자동으로 발견하고 집단 지성을 활용하여 이러한 한계를 극복하는 진화적 접근 방식을 제안합니다. 이 접근 방식은 매개변수 공간과 데이터 흐름 공간 모두에서 작동하므로 개별 모델의 가중치를 넘어서는 최적화가 가능합니다. 이 접근 방식은 도메인 간 병합을 용이하게 하여 수학 추론 기능을 갖춘 일본어 LLM과 같은 모델을 생성할 수도 있습니다. 놀랍게도 일본 수학 LLM은 이러한 작업에 대해 명시적으로
       학습되지 않았음에도 불구하고 기존의 다양한 일본 LLM 벤치마크에서 최고 수준의 성능을 달성했으며 심지어 훨씬 더 많은 매개변수를 가진 모델을 능가했습니다. 또한, 이러한 접근 방식을 통해 생성된 문화 인식 일본어 VLM은 일본 문화에 특화된 콘텐츠를 설명하는 데 있어 기존 일본어 VLM을 능가하는 효과를 입증했습니다. 이 작업은 새로운 최첨단 모델을 오픈 소스 커뮤니티에 다시 기여할 뿐만 아니라 자동화된 모델 구성에 대한 새로운 패러다임을 도입하여 기초 모델 개발에 대한 대안적이고 효율적인 접근 방식을 모색할 수 있는 길을 열어줍니다.

     We present a novel application of evolutionary algorithms to automate the creation of powerful foundation models. While model merging has emerged as a promising approach for LLM development due to its cost-effectiveness, it currently relies on human intuition and domain knowledge, limiting its potential. Here, we propose an evolutionary approach that overcomes this limitation by automatically discovering effective combinations of diverse open-source models, harnessing their collective intelligence without requiring extensive additional training data or compute. Our approach operates in both parameter space and data flow space, allowing for optimization beyond just the weights of the individual models. This approach even facilitates cross-domain merging, generating models like a Japanese LLM with Math reasoning capabilities. Surprisingly, our Japanese Math LLM achieved state-of-the-art performance on a variety of established Japanese LLM benchmarks, even surpassing models
     with significantly more parameters, despite not being explicitly trained for such tasks. Furthermore, a culturally-aware Japanese VLM generated through our approach demonstrates its effectiveness in describing Japanese culture-specific content, outperforming previous Japanese VLMs. This work not only contributes new state-of-the-art models back to the open-source community, but also introduces a new paradigm for automated model composition, paving the way for exploring alternative, efficient approaches to foundation model development.

    논문 링크

   https://arxiv.org/abs/2403.13187

    더 읽어보기

   https://x.com/SakanaAILabs/status/1770613032198279663


  TacticAI: 축구 전술을 위한 AI 비서 / TacticAI: an AI assistant for football tactics

    논문 소개

     * 리버풀 FC의 분야별 전문가와 협력하여 개발 및 평가한 축구 전술용 AI 보조 시스템으로, 코치에게 코너킥 루틴을 위한 대체 선수 설정을 샘플로 탐색하고 성공 가능성이 가장 높은 전술을 선택할 수 있는 방법을 제공하며, TacticAI의 모델 제안은 기존 전술보다 90%의 경우 선호되며 효과적인 코너킥 검색 시스템을 제공합니다.

     an AI-powered assistant for football tactics developed and evaluated in collaboration with domain experts from Liverpool FC; the systems offer coaches a way to sample and explore alternative player setups for a corner kick routine and select the tactic with the highest predicted likelihood of success; TacticAI’s model suggestions are favored over existing tactics 90% of the time and it offers an effective corner kick retrieval system.

    논문 초록(Abstract)

     * 라이벌 팀이 사용하는 전술의 주요 패턴을 파악하고 효과적인 대응책을 개발하는 것은 현대 축구의 핵심입니다. 그러나 이를 알고리즘적으로 수행하는 것은 아직 해결되지 않은 연구 과제로 남아 있습니다. 이러한 미충족 수요를 해결하기 위해 유니티는 리버풀 FC의 분야별 전문가들과 긴밀히 협력하여 개발하고 평가한 AI 축구 전술 어시스턴트인 TacticAI를 제안합니다. 코치에게 가장 직접적인 개입과 개선의 기회를 제공하는 코너킥 분석에 초점을 맞췄습니다. TacticAI는 예측 및 생성 요소를 모두 통합하여 코치들이 각 코너킥 루틴에 대한 대체 선수 셋업을 효과적으로 샘플링하고 탐색하여 성공 가능성이 가장 높은 선수를 선택할 수 있도록 지원합니다. 유니티는 리시버와 슈팅 시도 예측, 선수 포지션 조정 추천 등 다양한 벤치마크 작업을 통해 TacticAI를
       검증합니다. 리버풀 FC의 축구 분야 전문가들과 함께 실시한 정성적 연구를 통해 TacticAI의 유용성을 검증했습니다. 연구 결과, TacticAI의 모델 제안은 실제 전술과 구별할 수 없을 뿐만 아니라 90%의 경우 기존 전술보다 선호도가 높았으며, 효과적인 코너킥 검색 시스템을 제공하는 것으로 나타났습니다. TacticAI는 기하학적 딥러닝을 통해 데이터 효율성을 달성함으로써 골드 스탠다드 데이터의 가용성이 제한적임에도 불구하고 이러한 결과를 달성할 수 있었습니다.

     Identifying key patterns of tactics implemented by rival teams, and developing effective responses, lies at the heart of modern football. However, doing so algorithmically remains an open research challenge. To address this unmet need, we propose TacticAI, an AI football tactics assistant developed and evaluated in close collaboration with domain experts from Liverpool FC. We focus on analysing corner kicks, as they offer coaches the most direct opportunities for interventions and improvements. TacticAI incorporates both a predictive and a generative component, allowing the coaches to effectively sample and explore alternative player setups for each corner kick routine and to select those with the highest predicted likelihood of success. We validate TacticAI on a number of relevant benchmark tasks: predicting receivers and shot attempts and recommending player position adjustments. The utility of TacticAI is validated by a qualitative study conducted with football domain
     experts at Liverpool FC. We show that TacticAI’s model suggestions are not only indistinguishable from real tactics, but also favoured over existing tactics 90% of the time, and that TacticAI offers an effective corner kick retrieval system. TacticAI achieves these results despite the limited availability of gold-standard data, achieving data efficiency through geometric deep learning.

    논문 링크

   https://www.nature.com/articles/s41467-024-45965-x

    더 읽어보기

   https://discuss.pytorch.kr/t/tacticai-ai-feat-deepmind-fc/3841

   https://x.com/GoogleDeepMind/status/1770121564085707082


  LLM에서 도구 사용 / Tool Use in LLMs

    논문 소개

     * 도구 사용 패러다임의 공식적인 정의, LLM이 도구 사용을 활용하는 시나리오, 이 접근 방식이 효과적인 작업 등 LLM의 도구 사용에 대한 개요를 제공하며, 복잡한 도구 사용에 대한 분석과 LM 툴링 작업 전반의 테스트베드 및 평가 지표를 요약해 제공합니다.

     provides an overview of tool use in LLMs, including a formal definition of the tool-use paradigm, scenarios where LLMs leverage tool usage, and for which tasks this approach works well; it also provides an analysis of complex tool usage and summarize testbeds and evaluation metrics across LM tooling works.

    논문 초록 (Abstract)

   언어 모델(LM)은 강력하지만 주로 텍스트 생성 작업에 사용됩니다. 복잡한 기술이 필요한 작업의 경우 도구의 성능이 크게 향상되었습니다. 성능을 크게 향상시켰습니다. 하지만 많은 작품에서 '도구'라는 용어를 다양한 ""도구""라는 용어를 채택하고 있어 의문을 제기합니다: 도대체 도구란 무엇인가? 그렇다면 도구는 어디에서 도구는 LM에게 어떻게 도움이 될까요? 이 설문 조사에서는 도구에 대한 통일된 정의를 제공합니다. LM이 사용하는 외부 프로그램으로서의 도구에 대한 통일된 정의를 제공하고, LM의 도구 사용 시나리오와 접근 방식에 대한 LM 툴링 시나리오와 접근 방식에 대한 체계적인 검토를 수행합니다. 이 검토를 바탕으로 다음과 같은 결과를 도출했습니다. 다양한 툴링 방법의 효율성을 측정하여 경험적으로 연구합니다. 다양한 벤치마크에서
   필요한 컴퓨팅 및 성능 향상을 측정하여 다양한 툴링 방법의 효율성을 경험적으로 연구합니다, 그리고 이 분야의 몇 가지 과제와 향후 연구 가능성을 강조합니다.

     Language models (LMs) are powerful yet mostly for text generation tasks. Tools have substantially enhanced their performance for tasks that require complex skills. However, many works adopt the term “tool” in different ways, raising the question: What is a tool anyway? Subsequently, where and how do tools help LMs? In this survey, we provide a unified definition of tools as external programs used by LMs, and perform a systematic review of LM tooling scenarios and approaches. Grounded on this review, we empirically study the efficiency of various tooling methods by measuring their required compute and performance gains on various benchmarks, and highlight some challenges and potential future research in the field.

    논문 링크

   https://zorazrw.github.io/files/WhatAreToolsAnyway.pdf

    더 읽어보기

   https://x.com/omarsar0/status/1770497515898433896


  RankPrompt: 단계별 비교를 통해 언어 모델을 더 나은 추론자로 만들기 / RankPrompt: Step-by-Step Comparisons Make Language Models Better Reasoners

    논문 소개

     * LLM이 추가 리소스 없이 응답의 순위를 스스로 매길 수 있는 프롬프트 방식인 RankPrompt를 제안합니다. 이 셀프 랭킹 방식은 체계적인 단계별 비교 평가를 통해 후보의 순위를 매기고, 데모로 비교 연쇄를 생성하는 LLM의 기능을 활용하므로 잘 작동하는 것으로 보이며, RankPrompt는 많은 산술 및 상식 추론 작업에서 ChatGPT와 GPT-4의 추론 성능을 크게 향상시킵니다.

     proposes RankPrompt, a prompting method to enable LLMs to self-rank their responses without additional resources; this self-ranking approach ranks candidates through a systematic, step-by-step comparative evaluation; it seems to work well as it leverages the capabilities of LLMs to generate chains of comparisons as demonstrations; RankPrompt significantly enhances the reasoning performance of ChatGPT and GPT-4 on many arithmetic and commonsense reasoning tasks.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)은 다양한 추론 작업에서 인상적인 성능을 발휘해 왔습니다. 하지만 ChatGPT와 같은 최첨단 LLM도 추론 과정에서 논리적 오류가 발생하기 쉽습니다. 작업별 검증자를 배포하거나 여러 추론 경로에 걸쳐 투표하는 등의 기존 솔루션은 광범위한 사람의 주석이 필요하거나 응답이 일관되지 않은 시나리오에서 실패합니다. 이러한 문제를 해결하기 위해 추가 리소스 없이도 LLM이 응답의 순위를 스스로 매길 수 있는 새로운 프롬프트 방법인 RankPrompt를 도입했습니다. RankPrompt는 순위 지정 문제를 다양한 응답 간의 일련의 비교로 세분화하여 LLM의 고유한 기능을 활용하여 맥락에 맞는 예시로서 비교 체인을 생성합니다. 11개의 산술 및 상식 추론 과제에 대한 실험 결과, RankPrompt는 최대 13%까지 개선된 ChatGPT 및 GPT-4의 추론 성능을 크게 향상시키는
       것으로 나타났습니다. 또한, RankPrompt는 개방형 작업에 대한 LLM 기반 자동 평가에서 탁월한 성능을 발휘하여 AlpacaEval 데이터 세트에서 74%의 시간 동안 사람의 판단과 일치하는 것으로 나타났습니다. 또한 응답 순서와 일관성의 변화에 대한 견고함도 보여줍니다. 이러한 결과를 종합하면 언어 모델로부터 고품질 피드백을 이끌어내는 효과적인 방법으로서 RankPrompt가 검증되었습니다.

     Large Language Models (LLMs) have achieved impressive performance across various reasoning tasks. However, even state-of-the-art LLMs such as ChatGPT are prone to logical errors during their reasoning processes. Existing solutions, such as deploying task-specific verifiers or voting over multiple reasoning paths, either require extensive human annotations or fail in scenarios with inconsistent responses. To address these challenges, we introduce RankPrompt, a new prompting method that enables LLMs to self-rank their responses without additional resources. RankPrompt breaks down the ranking problem into a series of comparisons among diverse responses, leveraging the inherent capabilities of LLMs to generate chains of comparison as contextual exemplars. Our experiments across 11 arithmetic and commonsense reasoning tasks show that RankPrompt significantly enhances the reasoning performance of ChatGPT and GPT-4, with improvements of up to 13%. Moreover, RankPrompt excels in
     LLM-based automatic evaluations for open-ended tasks, aligning with human judgments 74% of the time in the AlpacaEval dataset. It also exhibits robustness to variations in response order and consistency. Collectively, our results validate RankPrompt as an effective method for eliciting high-quality feedback from language models.

    논문 링크

   https://arxiv.org/abs/2403.12373

    더 읽어보기

   https://x.com/omarsar0/status/1770492690129359135


  LLM4Decompile: 대규모 언어 모델로 바이너리 코드 디컴파일하기 / LLM4Decompile: Decompiling Binary Code with Large Language Models

    논문 소개

     * 10억 개에서 33억 개 매개변수에 이르는 오픈 액세스 디컴파일 LLM 제품군; 이러한 모델은 40억 개의 C 소스 코드와 해당 어셈블리 코드에 대해 학습; 저자들은 또한 디컴파일을 위한 재호환성 및 재실행 가능성을 평가하고 프로그램 의미론의 관점에서 평가하기 위한 데이터 세트인 Decompile-Eval을 소개하며, LLM4Decompile은 GPT-4보다 50% 향상된 어셈블리 코드의 21%를 디컴파일하는 기능을 시연하고 있습니다.

     a family of open-access decompilation LLMs ranging from 1B to 33B parameters; these models are trained on 4 billion tokens of C source code and corresponding assembly code; the authors also introduce Decompile-Eval, a dataset for assessing re-compatibility and re-executability for decompilation and evaluating with a perspective of program semantics; LLM4Decompile demonstrates the capability to decompile 21% of the assembly code, achieving a 50% improvement over GPT-4.

    논문 초록(Abstract)

     * 디컴파일은 컴파일된 코드를 사람이 읽을 수 있는 소스 코드로 복원하는 것을 목표로 하지만 이름과 구조와 같은 세부 사항으로 인해 어려움을 겪습니다. 대규모 언어 모델(LLM)은 프로그래밍 작업에 대한 가능성을 보여주며 디컴파일에 대한 적용 동기를 부여합니다. 그러나 디컴파일을 위한 오픈 소스 LLM은 존재하지 않습니다. 게다가 기존의 디컴파일 평가 시스템은 주로 토큰 수준의 정확성을 고려하기 때문에 프로그램의 가장 중요한 특징인 코드 실행 가능성을 거의 무시하고 있습니다. 따라서 저희는 40억 개의 C 소스 코드와 해당 어셈블리 코드로 사전 학습된 10억에서 33억 개에 이르는 최초의 오픈 액세스 디컴파일 LLM을 공개합니다. 이 오픈 소스 LLM은 해당 분야의 추가 개발을 위한 기준이 될 수 있습니다. 실질적인 프로그램 평가를 위해 디컴파일을
       위한 재컴파일 가능성 및 재실행 가능성을 고려하는 최초의 데이터 세트인 Decompile-Eval을 소개합니다. 이 벤치마크는 프로그램 의미론의 관점에서 디컴파일 모델을 평가하는 것의 중요성을 강조합니다. 실험 결과, LLM4Decompile은 어셈블리 코드의 21%를 정확하게 디컴파일할 수 있는 것으로 나타났으며, 이는 GPT-4보다 50% 향상된 성능입니다. 코드, 데이터 세트 및 모델은 https://github.com/albertan017/LLM4Decompile 에서 공개됩니다

     Decompilation aims to restore compiled code to human-readable source code, but struggles with details like names and structure. Large language models (LLMs) show promise for programming tasks, motivating their application to decompilation. However, there does not exist any open-source LLM for decompilation. Moreover, existing decompilation evaluation systems mainly consider token-level accuracy and largely ignore code executability, which is the most important feature of any program. Therefore, we release the first open-access decompilation LLMs ranging from 1B to 33B pre-trained on 4 billion tokens of C source code and the corresponding assembly code. The open-source LLMs can serve as baselines for further development in the field. To ensure practical program evaluation, we introduce Decompile-Eval, the first dataset that considers re-compilability and re-executability for decompilation. The benchmark emphasizes the importance of evaluating the decompilation model from the
     perspective of program semantics. Experiments indicate that our LLM4Decompile has demonstrated the capability to accurately decompile 21% of the assembly code, which achieves a 50% improvement over GPT-4. Our code, dataset, and models are released at https://github.com/albertan017/LLM4Decompile

    논문 링크

   https://arxiv.org/abs/2403.05286v1

    더 읽어보기

   https://discuss.pytorch.kr/t/llm4decompile-llm-decompile/3809

   https://github.com/albertan017/LLM4Decompile

   https://x.com/omarsar0/status/1771218791399092351


  Agent-FLAN: 대규모 언어 모델을 위한 데이터 설계 및 효과적인 에이전트 튜닝 방법 / Agent-FLAN: Designing Data and Methods of Effective Agent Tuning for Large Language Models

    논문 소개

     * 에이전트를 위한 언어 모델을 효과적으로 미세 조정하는 데이터와 방법을 설계하여 에이전트-FLAN이라고 하며, 이를 통해 다양한 에이전트 평가 데이터 세트에서 이전 최고 작품보다 3.5% 더 나은 성능을 발휘하는 Llama2-7B를 구현하고, 에이전트-FLAN은 모델 크기를 확장할 때 환각 문제를 크게 완화하고 일반적으로 LLM을 개선하면서 에이전트의 기능을 일관되게 향상시킵니다;

     Designs data and methods to effectively fine-tune language models for agents, referred to as Agent-FLAN; this enables Llama2-7B to outperform prior best works by 3.5% across various agent evaluation datasets; Agent-FLAN greatly alleviates the hallucination issues and consistently improves the agent capability of LLMs when scaling model sizes while generally improving the LLM;

    논문 초록(Abstract)

     * 오픈 소스 대규모 언어 모델(LLM)은 다양한 NLP 작업에서 큰 성공을 거두었지만 에이전트로서 작동할 때는 여전히 API 기반 모델에 비해 훨씬 열등합니다. 에이전트 기능을 일반 LLM에 통합하는 방법은 매우 중요하고 시급한 문제가 되고 있습니다. 이 백서에서는 먼저 세 가지 주요 관찰 결과, 즉 (1) 현재 에이전트 훈련 코퍼스는 형식 추종과 에이전트 추론이 모두 얽혀 있어 사전 훈련 데이터의 분포와 크게 다르다는 점, (2) LLM은 에이전트 작업에 필요한 능력에 따라 학습 속도가 다르다는 점, (3) 현재 접근 방식은 환각을 도입하여 에이전트의 능력을 향상시킬 때 부작용이 있다는 점을 제시합니다. 위의 연구 결과를 바탕으로 에이전트를 위한 언어 모델을 효과적으로 미세 조정할 수 있는 에이전트-FLAN을 제안합니다. 훈련 코퍼스를 세심하게 분해하고
       재설계함으로써 에이전트-FLAN은 다양한 에이전트 평가 데이터 세트에서 이전의 우수작을 3.5% 능가하는 성능을 발휘할 수 있게 해줍니다. 종합적으로 구축된 음성 샘플을 통해 에이전트-FLAN은 확립된 평가 벤치마크를 기반으로 환각 문제를 크게 완화합니다. 또한 모델 크기를 확장할 때 LLM의 에이전트 기능을 지속적으로 개선하는 동시에 LLM의 일반적인 기능을 약간 향상시킵니다. 코드는 https://github.com/InternLM/Agent-FLAN 에서 확인할 수 있습니다.

     Open-sourced Large Language Models (LLMs) have achieved great success in various NLP tasks, however, they are still far inferior to API-based models when acting as agents. How to integrate agent ability into general LLMs becomes a crucial and urgent problem. This paper first delivers three key observations: (1) the current agent training corpus is entangled with both formats following and agent reasoning, which significantly shifts from the distribution of its pre-training data; (2) LLMs exhibit different learning speeds on the capabilities required by agent tasks; and (3) current approaches have side-effects when improving agent abilities by introducing hallucinations. Based on the above findings, we propose Agent-FLAN to effectively Fine-tune LANguage models for Agents. Through careful decomposition and redesign of the training corpus, Agent-FLAN enables Llama2-7B to outperform prior best works by 3.5% across various agent evaluation datasets. With comprehensively
     constructed negative samples, Agent-FLAN greatly alleviates the hallucination issues based on our established evaluation benchmark. Besides, it consistently improves the agent capability of LLMs when scaling model sizes while slightly enhancing the general capability of LLMs. The code will be available at https://github.com/InternLM/Agent-FLAN.

    논문 링크

   https://arxiv.org/abs/2403.12881v1

    더 읽어보기

   https://github.com/InternLM/Agent-FLAN

   https://x.com/_akhaliq/status/1770302813152690259


  API로 보호되는 LLM의 로그로 인해 독점 정보가 유출되는 경우 / Logits of API-Protected LLMs Leak Proprietary Information

    논문 소개

     * 로그를 사용하여 API로 보호된 LLM에 대한 대량의 비공개 정보를 학습할 수 있음을 보여줍니다. 이 접근 방식은 상대적으로 적은 수의 API 쿼리로 OpenAI의 gpt-3.5-turbo의 임베딩 크기를 약 4,096개로 추정하며, 사용된 공격에 대한 가드레일도 제안하고 있습니다.

     shows that it’s possible to learn a large amount of non-public information about an API-protected LLM using the logits; with a relatively small number of API queries, the approach estimates that the embedding size of OpenAI's gpt-3.5-turbo to be about 4,096; the paper also proposes guardrails against the attacks used.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)의 상용화로 인해 독점 모델에 대한 높은 수준의 API 전용 액세스가 일반적인 관행으로 자리 잡았습니다. 이 연구에서는 모델 아키텍처에 대해 보수적인 가정을 하더라도 비교적 적은 수의 API 쿼리(예: OpenAI의 gpt-3.5-turbo의 경우 1,000달러 미만)로 API로 보호되는 LLM에 대한 놀라울 정도로 많은 양의 비공개 정보를 학습할 수 있음을 보여 줍니다. 이번 연구 결과의 핵심은 대부분의 최신 LLM이 소프트맥스 병목현상으로 인해 모델 출력이 전체 출력 공간의 선형 하위 공간으로 제한된다는 점입니다. 우리는 이것이 모델 이미지 또는 모델 서명에 적합하다는 것을 보여주며, 이를 통해 LLM의 숨겨진 크기를 효율적으로 발견하고, 전체 어휘 출력을 얻고, 다양한 모델 업데이트를 감지 및 구분하고, 단일 전체 LLM 출력이 주어지면 소스 LLM을
       식별하고, 심지어 출력 계층 파라미터를 추정하는 등 저렴한 비용으로 여러 기능을 활용할 수 있습니다. 경험적 조사를 통해 이러한 방법의 효과를 확인했으며, 이를 통해 OpenAI의 gpt-3.5 터보의 임베딩 크기를 약 4,096개로 추정할 수 있었습니다. 마지막으로, LLM 제공업체가 이러한 공격을 방어할 수 있는 방법과 이러한 기능을 버그가 아닌 기능으로 간주하여 투명성과 책임성을 강화하는 방법에 대해 논의합니다.

     The commercialization of large language models (LLMs) has led to the common practice of high-level API-only access to proprietary models. In this work, we show that even with a conservative assumption about the model architecture, it is possible to learn a surprisingly large amount of non-public information about an API-protected LLM from a relatively small number of API queries (e.g., costing under $1,000 for OpenAI's gpt-3.5-turbo). Our findings are centered on one key observation: most modern LLMs suffer from a softmax bottleneck, which restricts the model outputs to a linear subspace of the full output space. We show that this lends itself to a model image or a model signature which unlocks several capabilities with affordable cost: efficiently discovering the LLM's hidden size, obtaining full-vocabulary outputs, detecting and disambiguating different model updates, identifying the source LLM given a single full LLM output, and even estimating the output layer
     parameters. Our empirical investigations show the effectiveness of our methods, which allow us to estimate the embedding size of OpenAI's gpt-3.5-turbo to be about 4,096. Lastly, we discuss ways that LLM providers can guard against these attacks, as well as how these capabilities can be viewed as a feature (rather than a bug) by allowing for greater transparency and accountability.

    논문 링크

   https://arxiv.org/abs/2403.09539

    더 읽어보기

   https://x.com/DimitrisPapail/status/1768654579254579385


  DROID: 대규모 야생 로봇 조작 데이터 세트 / DROID: A Large-Scale In-The-Wild Robot Manipulation Dataset

    논문 소개

     * 보다 유능하고 강력한 로봇 조작 정책을 훈련하고 구축하기 위한 오픈소스 대규모 로봇 조작 데이터세트로, 564개 장면과 86개 작업에서 수집된 76,000개의 데모 궤적을 포함하고 있으며 DROID로 훈련하면 더 높은 성능의 정책과 일반화로 이어질 수 있습니다.

     an open-source, large-scale robot manipulation dataset to train and build more capable and robust robotic manipulation policies; it contains 76K demonstration trajectories, collected across 564 scenes and 86 tasks; training with DROID leads to higher performing policies and generalization.

    논문 초록(Abstract)

     * 대규모의 다양한 고품질 로봇 조작 데이터 세트의 생성은 보다 유능하고 강력한 로봇 조작 정책으로 나아가는 중요한 디딤돌입니다. 하지만 다양한 환경에서 로봇 조작 데이터를 수집하려면 물류 및 안전 문제가 발생하고 하드웨어와 인력에 상당한 투자가 필요합니다. 그 결과 오늘날 가장 일반적인 로봇 조작 정책조차도 대부분 장면과 작업의 다양성이 제한된 소수의 환경에서 수집된 데이터로 학습됩니다. 이 연구에서는 12개월 동안 북미, 아시아, 유럽에서 50명의 데이터 수집가가 564개의 장면과 84개의 작업에서 수집한 76,000개의 데모 궤적 또는 350시간의 상호 작용 데이터가 포함된 다양한 로봇 조작 데이터 세트인 DROID(Distributed Robot Interaction Dataset)를 소개합니다. DROID를 사용한 훈련이 더 높은 성능과 향상된 일반화 능력을 갖춘 정책으로 이어진다는
       것을 입증했습니다. 전체 데이터 세트, 정책 학습 코드, 로봇 하드웨어 설정을 재현하기 위한 자세한 가이드를 오픈소스로 공개합니다.

     The creation of large, diverse, high-quality robot manipulation datasets is an important stepping stone on the path toward more capable and robust robotic manipulation policies. However, creating such datasets is challenging: collecting robot manipulation data in diverse environments poses logistical and safety challenges and requires substantial investments in hardware and human labour. As a result, even the most general robot manipulation policies today are mostly trained on data collected in a small number of environments with limited scene and task diversity. In this work, we introduce DROID (Distributed Robot Interaction Dataset), a diverse robot manipulation dataset with 76k demonstration trajectories or 350 hours of interaction data, collected across 564 scenes and 84 tasks by 50 data collectors in North America, Asia, and Europe over the course of 12 months. We demonstrate that training with DROID leads to policies with higher performance and improved generalization
     ability. We open source the full dataset, policy learning code, and a detailed guide for reproducing our robot hardware setup.

    논문 링크

   https://arxiv.org/abs/2403.12945

    더 읽어보기

   https://x.com/chelseabfinn/status/1770311755140575413


  RAFT: 도메인별 RAG에 맞게 언어 모델 조정하기 / RAFT: Adapting Language Model to Domain Specific RAG

    논문 소개

     * RAG의 장점과 미세 조정을 결합하여 '오픈북' 도메인 내 설정에서 질문에 답하는 모델의 능력을 향상시키고, 이를 RAFT의 CoT 스타일 응답과 결합하면 추론을 개선하는 데 도움이 됩니다.

     combines the benefits of RAG and fine-tuning to improve a model's ability to answer questions in ""open-book"" in-domain settings; combining it with RAFT's CoT-style response helps to improve reasoning.

    논문 초록(Abstract)

     * 대규모 텍스트 데이터 코퍼스를 대상으로 대규모 언어 모델(LLM)을 사전 학습하는 것은 이제 표준 패러다임이 되었습니다. 많은 다운스트림 애플리케이션에 이러한 LLM을 사용할 때는 RAG 기반 프롬프트 또는 미세 조정을 통해 사전 학습된 모델에 새로운 지식(예: 시간이 촉박한 뉴스 또는 비공개 도메인 지식)을 추가적으로 구워 넣는 것이 일반적입니다. 그러나 모델이 이러한 새로운 지식을 얻기 위한 최적의 방법론은 아직 미해결 과제로 남아 있습니다. 이 백서에서는 도메인 내 '오픈북' 설정에서 질문에 답하는 모델의 능력을 향상시키는 훈련 레시피인 검색 증강 미세 조정(RAFT)을 소개합니다. RAFT에서는 질문과 검색된 문서 세트가 주어지면 질문에 답하는 데 도움이 되지 않는 문서를 무시하도록 모델을 훈련시키는데, 이를 방해 문서라고 부릅니다. RAFT는
       질문에 답하는 데 도움이 되는 관련 문서에서 올바른 순서를 그대로 인용함으로써 이를 수행합니다. 이는 RAFT의 연쇄적 사고 스타일 응답과 결합되어 모델의 추론 능력을 향상시키는 데 도움이 됩니다. 도메인별 RAG에서 RAFT는 PubMed, HotpotQA, Gorilla 데이터 세트 전반에서 모델의 성능을 지속적으로 개선하여 사전 학습된 LLM을 도메인 내 RAG로 개선하는 사후 학습 레시피를 제시합니다. RAFT의 코드와 데모는 github.com/ShishirPatil/gorilla에서 오픈 소스로 제공됩니다.

     Pretraining Large Language Models (LLMs) on large corpora of textual data is now a standard paradigm. When using these LLMs for many downstream applications, it is common to additionally bake in new knowledge (e.g., time-critical news, or private domain knowledge) into the pretrained model either through RAG-based-prompting, or fine-tuning. However, the optimal methodology for the model to gain such new knowledge remains an open question. In this paper, we present Retrieval Augmented FineTuning (RAFT), a training recipe that improves the model's ability to answer questions in a ""open-book"" in-domain settings. In RAFT, given a question, and a set of retrieved documents, we train the model to ignore those documents that don't help in answering the question, which we call, distractor documents. RAFT accomplishes this by citing verbatim the right sequence from the relevant document that would help answer the question. This coupled with RAFT's chain-of-thought-style response
     helps improve the model's ability to reason. In domain-specific RAG, RAFT consistently improves the model's performance across PubMed, HotpotQA, and Gorilla datasets, presenting a post-training recipe to improve pre-trained LLMs to in-domain RAG. RAFT's code and demo are open-sourced at github.com/ShishirPatil/gorilla.

    논문 링크

   https://arxiv.org/abs/2403.10131

    더 읽어보기

   https://discuss.pytorch.kr/t/raft-rag-llm-rag-finetuning/3842

   https://x.com/cwolferesearch/status/1770912695765660139


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-01b


   이 글은 GPT 모델로 정리한 것으로, 잘못된 부분이 있을 수 있으니 글 아래쪽의 원문도 함께 참고해주세요! 읽으시면서 어색하거나 잘못된 내용을 발견하시면 덧글로 알려주시기를 부탁드립니다.

   ⚠️광고⚠️: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
