"https://news.hada.io/topic?id=12502","장기적으로 우리 모두는 'Dad'가 됩니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        장기적으로 우리 모두는 'Dad'가 됩니다

장기적으로 보면, 우리 모두 아버지가 된다

     * 2023년 2월, 샌프란시스코의 한 생식 클리닉 대기실에서 자신의 정액을 든 컵을 들고 앉아 있던 경험.
     * 성경 속 오난의 이야기와 그로 인해 시작된 종교적인 정자 낭비에 대한 분노에 대한 현대 학자들의 해석.
     * 정자 한 번의 사정으로 미국 인구만큼의 사람을 낳을 수 있는 잠재력에 대한 상상.

II.

     * 여성의 몸이 두 아이를 낳도록 설계되지 않았으며, 임신 중 겪는 여러 가지 어려움.
     * 아내의 임신 초기 증상과 그로 인한 고통, 그리고 이름을 짓는 과정에서 고려해야 할 요소들.
     * 이름이 사람의 미래에 미치는 영향에 대한 연구와 통계, 그리고 자신의 아이들에게 온라인에서 사용할 별명을 지어주는 이야기.

III.

     * 2023년 12월 13일, 두 아이의 탄생과 그들이 처음 경험하는 세상에 대한 반응.
     * 아이들이 세상을 이해하고 예측하는 과정과 그들의 삶의 두 가지 중요한 목표: 예측 오류 최소화와 적극적 추론.
     * 아이들이 이미 충치 예방을 위한 유전자 변형 박테리아의 실험 대상이 되었으며, 인류의 삶을 개선하는 데 기여할 수 있는 가능성.

IV.

     * 쌍둥이 부모, 의료 전공자, Alexey Guzey만 아는 비밀: 인간은 사실 잠이 필요 없다는 농담.
     * 쌍둥이를 돌보는 새로운 일상과 그들이 사용하는 기술, 그리고 아이들의 성장.
     * 아이들이 역사의 중심에서 중요한 역할을 할 것이라는 부모의 기대와 그들에게 전달하고자 하는 메시지.

  GN⁺의 의견

     * 이 글은 새로운 부모가 되는 경험과 그로 인해 생기는 다양한 감정과 생각을 공유함으로써, 독자들에게 인간의 삶과 부모가 되는 것의 의미에 대해 성찰할 기회를 제공함.
     * 글쓴이는 자신의 아이들이 세상에 가져올 변화와 그들이 직면할 미래에 대한 희망을 표현하며, 이는 독자들에게 긍정적이고 흥미로운 메시지를 전달함.
     * 아이들의 탄생을 통해 인류의 진보와 기술 발전이 어떻게 개인의 삶을 변화시키는지를 보여주며, 이는 독자들에게 교육적이고 매력적인 내용을 제공함.

        Hacker News 의견

     *

     부모는 자녀들이 세상을 헤쳐 나갈 수 있는 기술을 가르쳐야 한다고 한다. 이것은 이미 다소 구식으로 느껴지며, 곧 완전히 희망이 없어질 것이다. 우리가 가는 길에는 도로가 없다.
          + 부모의 역할이 변화하고 있음을 느낀다. 구체적인 기술을 가르치는 것보다 자녀들에게 비판적 사고, 자기 모니터링, 피드백 수용, 잡음 필터링, 패턴 인식 등의 메타 기술을 가르쳐야 한다는 생각에 동의함.
     *

     좋은 글쓰기 조언에 따르면, 각 문장은 단 하나의 목표를 가져야 한다. 그 목표는 독자를 끌어들이고, 다음 문장을 읽게 만드는 것이다.
          + 이 글은 독자를 끌어들이는 데 탁월함을 보여준다. 제목과 첫 문장이 그 역할을 잘 수행함.
     *

     이 남자가 글을 쓸 시간이 있다는 것에 감탄한다.
          + 자녀를 키우는 일이 매우 힘든 일임을 경험을 통해 알고 있음. 특히 쌍둥이를 키우는 것은 엄청난 노력이 필요함을 강조함.
     *

     이것을 ""현대 학자들""이 설명해야 했나? 원래 이야기에서도 이미 명백했다...
          + 고대 이야기에서 이미 분명했던 내용을 현대 학자들이 설명하는 것에 대해 의문을 제기함.
     *

     그에게 축하를. 쌍둥이 중 30-50%가 IVF를 통해 태어난다는 통계를 봤다. 그 결과에 대해 크게 놀라지는 않음.
          + 쌍둥이의 IVF 출산 비율과 1800년대 5세 미만 아동 사망률에 대한 통계에 대해 언급함.
     *

     ""Jennifer""라는 이름이 ""새로운 이름""으로 분류된 것을 보고 슬프다. 이 이름은 세기가 넘은 오래된 철자이며, 아서왕 전설에 나오는 Guinevere의 새로운 철자일 뿐이다.
          + ""Jennifer""라는 이름이 새롭다고 여겨지는 것에 대해 아쉬움을 표함. 이 이름은 역사적으로 오래된 이름임을 설명함.
     *

     이 기사의 제목은 그것이 완전히 진지하지 않을 수 있으며, 농담이 포함되어 있을지도 모른다는 기대를 갖게 해야 한다.
          + 기사의 제목이 가벼운 톤을 가지고 있으며, 일부 농담이 포함되어 있을 수 있음을 시사함.
     *

     왜 사람들은 이것을 신고하는가?
          + 기사가 신고되었던 이유에 대해 궁금해함.
     *

     쌍둥이 부모, 의료 전공자, Alexey Guzey만 아는 비밀이 있다: 인간의 몸은 실제로 수면이 필요 없다.
          + 재치 있는 표현으로 수면 부족에 대한 경험을 공유하며, Snoo 같은 아기 수면 보조 기기에 대한 의견을 제시함.
     *

     모든 부분을 사랑한다. 새로운 부모에게 축하를. 세 자녀의 아버지로서, ""pronatalist influencer conspiracy""에 대한 언급에서 가장 큰 웃음을 얻었다.
          + 기사의 유머러스한 부분을 즐기며, 새 부모가 된 이들에게 축하의 메시지를 전함.
"
"https://news.hada.io/topic?id=12548","웹사이트 검색이 상처를 주는 감정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           웹사이트 검색이 상처를 주는 감정

온라인 쇼핑의 복잡성과 한계

     * 온라인 쇼핑에서 제품을 가격/품질 또는 무게별로 정렬할 수 없는 문제에 대한 불만이 존재함.
     * 제품 검색 시 다양한 분류(facets)가 나타나는데, 이 분류들이 어떤 가치를 추가하는지 이해하기 어려움.
     * 예를 들어, '쌀'을 검색했을 때 나타나는 분류 중 비건, 락토스 프리(lactose-free), 글루텐 프리(gluten-free)가 아닌 쌀에 대한 흥미로움.

온라인 쇼핑 사이트의 이상한 검색 결과

     * 코스트코(Costco)에서 '쌀'을 검색하면 25개의 결과가 나오는데, 이 중 일부는 비건, 락토스 프리, 글루텐 프리가 아닌 것으로 표시됨.
     * 검색 결과의 정렬은 위키(wiki)를 확인하게 만들며, 코스트코의 매출이 2420억 달러임을 알게 됨.
     * 정보 이론에서 이러한 현상을 설명할 수 있는 용어가 있을 것임.
     * 검색 결과 중 두 번째 결과도 알코올 프리임을 알 수 없으나, 실제로 처음 10개 결과 모두 알코올 프리임.

필리핀의 전자상거래

     * 필리핀의 전자상거래가 발전할 여지가 많음을 지적함.
     * 검색 결과의 첫 페이지에서 세탁 세제 외에도 많은 다른 제품들이 판매되고 있음을 보여줌.

닌텐도의 온라인 필터링 한계

     * 닌텐도의 웹사이트는 2+ 플레이어 필터를 제공하지만, 이는 단일 시스템, 로컬 무선 및 온라인을 모두 포함함.
     * 쿠치 협동(couch coop)을 지원하는 게임 목록을 얻는 방법이 없으며, 1680개의 게임을 모두 확인해야 함.
     * 검색은 1000개 이상의 기록을 반환하지 않음.
     * 닌텐도 웹사이트에서 'Games > Nintendo Switch Games'로 이동하면 120개의 게임만 표시되며, 스위치 게임 목록이 이 카테고리에 포함되지 않음.
     * 이 120개의 게임이 공통적으로 가지고 있는 특징과 특별한 대우를 받는 이유를 파악하는 데 실패함.

GN⁺의 의견

     * 온라인 쇼핑 플랫폼들이 제공하는 검색 및 필터링 기능의 한계와 사용자 경험에 대한 문제가 중요함.
     * 사용자가 원하는 정보를 정확하고 효율적으로 찾을 수 있도록 시스템을 개선할 필요가 있음.
     * 이 글은 온라인 쇼핑과 관련된 사용자 인터페이스의 중요성과 전자상거래 플랫폼의 발전 가능성에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     *
          + 한 소프트웨어 회사의 창업 경험
          + 약 15년 전, 친구와 함께 전자상거래를 위한 제품 검색 서비스를 제공하는 회사를 시작함.
          + 문제의 한 측면은 페이싯(faceting)이었지만, 비영어권 국가에서는 변화하는 어미와 오타, 특히 악센트 문자를 입력하지 않는 사용자들의 오타를 처리할 방법이 필요했음.
          + 이 문제들을 해결하고, 전자상거래 사이트에 쉽게 통합할 수 있는 꽤 좋은 SaaS(Software as a Service) 제품을 만듦.
          + 그러나 훌륭한 제품을 가지고 있어도 판매는 전혀 다른 문제였으며, 이 문제는 해결하지 못함.
          + 고객(전자상거래 사이트)은 제품을 개선하여 고객 경험을 크게 향상시킬 수도 있었지만, 마케팅 예산으로 고객 획득에 투자하여 단기적으로 수익을 늘릴 수도 있었음. 후자의 접근 방식이 승리함.
          + 고객 경험이 그다지 중요하지 않을 수도 있다는 것을 깨달음. 사람들은 열악한 웹사이트에 익숙해져 있고, 가격이 낮다면 온갖 불편을 감수함.
          + 많은 잠재 고객들은 고객 경험을 개선하기보다는 고객 리드(가격 비교 사이트)에 돈을 지불하고 낮은 가격을 제공하는 것을 선호함. 요즘에는 고객 충성도가 반드시 중요한 것은 아님.
          + 주요 고객 획득 채널이 가격 비교 사이트인 경우, 검색에 대해 신경 쓰지 않음. 고객은 제품 페이지에 직접 착륙하고, 열악한 검색을 견디며 카트에 물건을 추가함.
          + 몇 년 동안 제품을 사용하며 만족하는 고객들을 확보했지만, 판매를 시도하는 것을 중단하고 다른 일로 전환함. 판매하기가 너무 어려웠음.
          + 다시 말해, OP(원 게시자)의 훌륭한 기사에 대한 응답으로, 상처받은 감정은 그다지 중요하지 않고, 고객 획득 경로가 작동하고 수익이 꾸준히 증가하는 한 아무도 신경 쓰지 않음.
     *
          + 검색 관련성 컨설턴트의 경험
          + 검색 관련성 컨설턴트로 일한 경험이 있으며, 이 기사에서 언급된 문제들이 실제로 작업하는 문제들임.
          + 검색을 수정하는 일은 대부분 감사받지 못하는 일임. 사람들은 검색이 잘 작동하기를 기대하며, 잘 작동하면 당연하게 여기지만, 그렇지 않을 경우 명성과 브랜드에 손상을 줌.
          + 웹사이트 검색 관련성을 개선하고 싶다면, Manning에서 출판한 ""Relevant Search""와 ""AI Powered Search""라는 책을 추천함.
     *
          + 대규모 전자상거래 사이트에서의 경험
          + 많은 팀이 인력 부족, 과로 및 목표 불일치로 인해 검색 개선이 우선순위가 아님.
          + 동시에 많은 사람들이 능력 배분의 비효율성으로 인해 지루함을 느낌.
          + 검색에 대한 사용 가능한 분석 데이터가 없음은 데이터 수집이 어렵기 때문임.
          + 검색이 실제로 괜찮을 수도 있지만, 카탈로그 데이터의 품질이 악몽과 같음.
          + 카탈로그는 소수의 과로하고 저임금을 받는 팀이 유지 관리함.
          + 더욱이, 명확한 책임이 설정되지 않았고, 5개 부서와 몇몇 벤더가 ""내 문제가 아니다""라고 주장함.
          + 때때로 카탈로그의 10-30%가 매년 새로워지고, 문제를 보고하는 것을 오래전에 포기함.
     *
          + 넷플릭스 검색에 대한 인상
          + 넷플릭스 검색이 인상적임. 특정 영화가 없어도 비슷한 영화, 같은 배우나 감독의 영화를 제안함.
          + 이 기능이 꽤 영리하지만, 결과 선택의 이유를 더 명확히 보여주었으면 함.
     *
          + 일부 불만에 대한 의견
          + 전반적인 주장은 타당하지만, 일부 불만은 말이 되지 않음.
          + 예를 들어 ""쌀""을 검색하면, 백미, 즉석 콩과 쌀, 치킨과 쌀 캔 스프, 쌀 푸딩 등이 나올 수 있으며, 이러한 페이싯은 완벽하게 의미가 있음.
          + 한정된 사용 경로로 인터페이스를 판단할 수 없음.
          + 특정 사용 사례에 대해 인터페이스를 너무 많이 맞춤화하면, 작업 간 일관성이 부족하여 사용하기 혼란스러워짐.
     *
          + 웹사이트 검색의 목적에 대한 의견
          + 상업 사이트에서 웹사이트 검색의 목적은 사용자가 찾고 있는 것을 돕는 것이 아니라, 다른 관련 제품을 눈앞에 두는 것임.
          + 대부분의 사이트에서는 세 번째나 네 번째 제한을 선택한 후에 검색이 무너짐.
          + 사이트가 세 개나 네 개의 명확한 선택을 제공하는 것이 아니라, 열 개 이상의 관련성이 떨어지는 항목을 제공하는 것처럼 보임.
          + 마케터와 관리자를 사이트 디자인에서 멀리해야 함.
     *
          + 검색 실패 모드에 대한 경험
          + 엘라스틱서치(Elasticsearch)나 타입센스(Typesense)에서 물건을 단순하게 색인하는 표준 방법이 실패하는 상황에 도달한 적이 없음.
          + 특히 우산 예시처럼 실패하는 경우는 무엇인가?
          + ""자신의 데이터를 소유하는"" 마이크로서비스가 실패 모드인가?
     *
          + 홍콩의 레스토랑 웹사이트 검색 경험
          + 지역별로 검색할 수 있지만, 상위 결과에는 광고비를 낸 레스토랑이 표시됨.
          + 검색 결과에는 몇 시간 떨어진 레스토랑이 자주 포함됨.
     *
          + 해리스 티터(Harris Teeter) 웹사이트를 통한 식료품 쇼핑 경험
          + 웹사이트 검색이 관련 없는 항목을 선택하고, 다른 항목은 놓침.
          + 재고 관리 및 대체품에 대해서도 불만이 있지만, 매장 내 쇼핑자도 같은 재고를 사용하기 때문에 항상 100% 정확할 수는 없음.
          + 그 크기의 체인이라면 더 나은 성능을 기대할 수 있지만, 경쟁이 적고 더 나은 상태도 아니기 때문에 큰 동기가 없을 것임.
     *
          + 좋은 검색 도구에 대한 요구
          + 연구 논문을 검색할 때 사용하는 도구와 같은 좋은 검색 도구를 제공해달라는 요청.
          + 대학원 시절 좋은 검색 도구에 익숙해졌고, 그 이후로는 구글을 사용하며 결과 샐러드를 얻는 것 이상은 경험하지 못함.
          + Nerac과 같은 회사들은 좋은 검색 도구를 제공하지만, 검색을 대신 수행해주는 사람과 함께 일해야 함.
"
"https://news.hada.io/topic?id=12498","1988년 국제 난독화 C 코드 대회 우승작, Xmas.c","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    1988년 국제 난독화 C 코드 대회 우승작, Xmas.c

xmas.c 코드 분석

     * 1988년에 만들어진 xmas.c라는 C 코드는 국제 난독화 C 코드 대회에서 우승함.
     * 이 코드는 출력물보다 작은 크기로, 텍스트 압축 표준에 새로운 방향을 제시함.
     * 코드를 컴파일하고 실행하면 파라미터 없이 작동하며, 재미있게도 타자기 키를 무작위로 두드린 것처럼 보임.

코드의 출력

     * 코드를 실행하면 ""크리스마스의 열두 날"" 노래 가사가 출력됨.
     * 출력 내용은 크리스마스 첫째 날부터 열두째 날까지의 선물을 나열한 가사임.

분석

     * 코드를 이해하기 위해서는 더 읽기 쉬운 형태로 재작성해야 함.
     * 재작성 과정에서 특정 문자열을 사용하여 치환 암호를 해독하는 방식이 드러남.
     * 변수 t는 재귀의 방향을 제어하는 데 중요한 역할을 함.
     * 코드는 재귀를 통해 치환 암호를 해독하고, 크리스마스 노래 가사를 출력함.

간소화

     * 프로그램을 이해하고 나면, 일부 반복문과 C 문자열 라이브러리 함수를 사용하여 코드를 간소화할 수 있음.
     * 최종적으로 코드를 간소화하면 단순히 가사를 출력하는 것으로 축소될 수 있음.

GN⁺의 의견

     * 창의성의 극치: xmas.c 코드는 치환 암호와 재귀를 사용하여 난독화된 코드를 작성한 훌륭한 예시임. 이는 프로그래밍에서 창의성이 어떻게 표현될 수 있는지 보여줌.
     * 교육적 가치: 코드를 분석하고 이해하는 과정은 초급 소프트웨어 엔지니어에게 프로그래밍 기술을 향상시키는 좋은 연습이 될 수 있음.
     * 재미와 흥미: 이 코드는 프로그래밍의 재미를 발견하고, 복잡한 문제를 해결하는 즐거움을 경험할 수 있는 기회를 제공함.

        Hacker News 의견

     * TeX 세계의 유사한 예로 xii.tex가 있음:
          + TeX 문서에 복잡해 보이는 코드를 넣고 pdftex을 실행하면, 예상과 다른 결과를 얻을 수 있음. 이는 shreevatsa.net에서 확인 가능.
     * 이 코드는 콜모고로프 복잡성을 생각나게 함:
          + 이해하기 어려운 코드가 원하는 결과를 만들어내는 것을 보고, 더 짧으면서도 같은 결과를 내는 프로그램이 있을지, 그리고 그것을 어떻게 찾을지에 대한 호기심을 자극함.
     * 원래 발행됐을 때 이 코드를 받았지만, 파일 이름이 다름:
          + ""carol.c""라는 이름으로 저장되어 있었고, 최신 시스템에서 컴파일 및 실행해보니 컴파일러에서 경고 메시지가 출력됨.
     * IOCCC(International Obfuscated C Code Contest)가 2023년에도 여전히 활발함:
          + IOCCC에 대한 설명이 훌륭하며, www.ioccc.org에서 확인할 수 있음.
     * 경고를 끄면 최신 코드 저장소(trunk)에서도 작동함:
          + compiler-explorer.com에서 해당 코드의 작동 여부를 확인할 수 있음.
     * Rosetta Code에도 비슷한 작업이 있음:
          + ""Old Lady Swallowed a Fly""라는 점점 길어지는 노래를 반복적으로 생성하는 프로그램 예제가 있음. rosettacode.org에서 확인 가능.
     * 대학교 마지막 학기에 교수님이 이 코드 조각을 강의 시작 부분에서 보여준 좋은 기억이 있음:
          + 2022년 당시 교수님의 강의에서 이 코드를 처음 접한 경험을 회상함.
     * 대학 시절 C 언어에 대한 인쇄된 학습 자료에 이 코드가 있어서, 한 번 직접 타이핑해본 기억이 있음:
          + C 언어를 배울 때 실제로 이 코드를 직접 입력해봄으로써 기억에 남는 경험을 함.
     * 이 코드는 매우 오래된 버전의 C 언어를 사용함:
          + main 함수의 시그니처가 오래된 K&R 스타일을 사용하고 있어서, 현재는 컴파일되지 않을 것이라는 의견을 제시함.
     * IOCCC에서 래리 월이 두 번이나 우승한 것과 그가 Perl을 설계한 것 사이의 연관성이 흥미로운 점 중 하나임:
          + Perl의 설계자가 IOCCC에서 수상한 이력이 Perl 언어의 특징을 설명해주는 듯한 인상을 줌.
"
"https://news.hada.io/topic?id=12517","영어에 '당신'의 공식적인 버전이 존재했었나? (2011)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    영어에 '당신'의 공식적인 버전이 존재했었나? (2011)

영어에는 정중한 ""you""의 형태가 있었나?

     * 영어에는 정중한 ""you""의 형태가 있었음.
          + 초기 현대 영어에서 'thou'는 단수형, 'you'는 복수형이었음.
          + 복수형 'you'가 정중한 호칭으로 사용되기 시작했고, 시간이 지나며 단수 'thou'를 완전히 대체함.
          + 쿠에이커들은 계급 구분을 반대하여 모두를 'thou'로 호칭했으나, 오늘날에는 'thou'가 오히려 고리타분하고 정중한 형태로 인식됨.
          + PIE(원인도유럽어)에서 정중함을 나타내는 구분이 있었는지는 확실하지 않으며, 현대 유럽 언어들의 이러한 구분은 PIE로부터 물려받은 것이 아님.
          + 비IE(인도유럽) 언어들, 예를 들어 태국어와 일본어에서는 상호작용하는 사람들 간의 사회적 관계의 본질에 따라 다양한 대명사를 사용함.

영어의 ""thou""와 ""you""의 변화

     * 영어의 ""thou""와 ""you""의 변화에 대한 설명.
          + 'you'는 원래 정중하고 복수형이었으며, 'thou'는 비공식적인 단수형이었음.
          + 시간이 지나면서 'thou'는 무례한 비공식적 형태로 여겨지게 되었고, 현재는 거의 사용되지 않으며 주로 예배 언어에서만 남아있음.

중세 영어의 정중한 호칭 발달

     * 중세 영어에서 정중한 호칭의 발달.
          + 중세 영어에서 'you'와 'thou' 사이의 정중한 호칭 구분이 생겨남.
          + 'you'는 원래 'thou'의 복수형이었으며, 복수형이 더 정중하게 여겨지는 경향이 있음.
          + 현재의 정중한 대명사는 상대적으로 현대적이며, 유럽 언어들에서 독립적으로 발전한 것으로 보임.

영어와 독일어의 유사한 변화

     * 영어와 독일어에서 비슷한 변화가 있었음.
          + 1500년경 영어와 독일어 모두 단수와 복수의 2인칭 대명사가 있었음.
          + 귀족들이 더 많은 예의를 요구하면서, 사람들은 이에 맞춰 대응함.
          + 3인칭 형태를 사용하는 것이 더 정중하다고 여겨졌고, 복수형을 사용하는 것도 마찬가지로 더 정중하게 여겨짐.

영어의 ""you""가 복수형이었던 역사

     * 영어의 ""you""가 복수형이었던 역사에 대한 설명.
          + 'you'는 원래 목적격 복수형이었음.
          + 'thou'와 'ye'는 각각 단수와 복수의 주격 형태였으며, 나중에 'you'가 'ye'의 자리를 대체함.
          + 'thou'와 'ye'는 'you'에 의해 대체되어 현재는 'you'가 단수와 복수, 주격과 목적격 모두에서 사용됨.

GN⁺의 의견

     * 가장 중요한 내용은 영어에서 'thou'와 'you'의 사용 변화임.
          + 영어에서 정중한 호칭의 역사는 언어가 사회적 상호작용과 계급 구조에 어떻게 반응하는지를 보여줌.
          + 'thou'가 오늘날에는 고리타분하고 정중한 형태로 여겨지는 것은 언어의 인식이 어떻게 시간에 따라 변할 수 있는지를 보여주는 예임.
          + 이 주제는 언어학, 역사, 사회학에 관심 있는 사람들에게 흥미로울 수 있으며, 언어가 문화와 어떻게 상호작용하는지에 대한 통찰을 제공함.

        Hacker News 의견

     * T-V 구별 문화에서 온 한 사람의 의견:
          + T(비공식)와 V(공식) 구별은 반쯤 낯선 사람과의 대화에서 혼란을 야기함.
          + 예를 들어, 직장에서 누구에게 어떤 방식으로 말해야 할지 알기 어려움.
          + T를 사용하면 상대를 동등하게 여기는 것이 될 수 있으나, 이는 상대가 자신을 우월하게 여기길 원할 때 모욕적으로 받아들여질 수 있음.
          + 때문에 대화를 피하고 자신의 생각을 간직하는 것이 V를 사용해 열등한 위치에 놓이거나 T를 사용해 모욕을 줄 위험을 감수하는 것보다 낫다고 느낌.
          + 영어가 비즈니스에서 지배적인 언어가 된 이유 중 하나로, 영어는 형태론이 단순하고 대화에 참여하기 쉬우며 비영어권 사람들이 받아들이기에 더 높은 가능성을 제공함.
     * 전통적인 쿠에이커(Quaker)의 언어 사용에 대한 의견:
          + 쿠에이커는 계급 구별을 반대하여 모든 사람을 'thou'로 호칭함.
          + 오늘날 'thou'는 고대의 공식적인 언어로 여겨지지만, 원래의 의도는 더 비공식적인 것이었음.
          + 독일어에서는 공식적인 호칭이 비공식적인 호칭으로 사라지는 추세임.
          + 영어에서는 이 구별이 공식적인 호칭으로 사라진 최초의 언어인지도 모름.
     * 해커뉴스(HN) 상단에 자신의 글이 오른 것에 대한 기쁨을 표현한 의견:
          + 크리스마스 선물처럼 기쁜 일이라고 느낌.
     * 'you'가 'thou'의 인쇄 오류일 수 있다는 가능성에 대한 의견:
          + 'ye olde shoppe'가 'the old shop'으로 발음되었던 것처럼 'you'가 'thou'의 인쇄 오류일 수 있다는 재미있는 생각을 함.
          + 다른 의견들은 이것이 일어나지 않았다고 제안하지만, 재미있는 생각이었다고 함.
     * 'Thee'와 'Thou'의 사용에 대한 의견:
          + 'Thee'와 'Thou'는 여전히 영국 북부에서 사용되고 있으며, 주로 노인들에 의해 사용됨.
     * 상급자에게 사용되는 존경어 체계가 있는 언어에 대한 의견:
          + 이미 존재하는 언어 체계에 대해 상상해봄.
     * 텍사스 영어에서 'y'all'의 사용에 대한 의견:
          + 'y'all'은 'you'의 공손한 단수형으로 사용될 수 있으며, 낯선 사람에게 인사할 때 사용함.
          + 'howdy'는 'how do ye'의 축약형이며, 인사이자 질문으로 간주될 수 있음.
     * 다른 버전의 언어를 사용하는 나라에서 온 사람의 의견:
          + 적절한 호칭을 고민하게 만드는 것이 싫음.
          + 비공식 호칭을 새로운 사람들에게 사용하여 즉각적인 유대감을 형성하는 것을 고려 중임.
          + 존경어를 싫어하는 사람들도 있을 것이고, 그런 사람들은 처음부터 시간을 낭비하지 않는 것이 낫다고 생각함.
          + 성별 대명사가 없어서 그 문제는 피할 수 있음.
          + 'you'나 '대명사'에 어떤 함축도 없는 언어가 가장 좋고 확장 가능하다고 생각함.
     * 유럽 포르투갈어 학습자의 의견:
          + 유럽 포르투갈어에는 여전히 공식적 vs 비공식적 구별이 존재함.
          + 'Você'라는 공식적인 호칭을 사용하는 것이 상대방을 늙었다고 생각하는 것으로 받아들여져 모욕적일 수 있음.
          + 문화적 언어 규칙을 탐색하는 것은 어려울 수 있음.
"
"https://news.hada.io/topic?id=12568","4년간의 캠페인, 고급 익스플로잇을 사용하여 아이폰에 백도어 설치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  4년간의 캠페인, 고급 익스플로잇을 사용하여 아이폰에 백도어 설치

특별한 취약점이 아닌 — 4년간의 캠페인으로 아이폰에 백도어 설치, 아마도 가장 고급스러운 익스플로잇 사용

     * 모스크바 기반의 카스퍼스키 직원들의 아이폰 수십 대가 감염됨.
     * 알려지지 않은 공격자들이 애플과 칩 공급업체들조차 잘 알지 못하는 하드웨어 기능의 취약점을 이용함.
     * 카스퍼스키 연구원들은 공격자들이 이 기능을 어떻게 알게 되었는지, 그리고 그 기능의 정확한 목적이 무엇인지 아직 모름.

수년간 이용된 네 개의 제로데이 취약점

     * 공격자들은 알려지지 않은 하드웨어 기능을 이용하여 고급 하드웨어 기반 메모리 보호를 우회함.
     * 이 보호 기능은 애플의 M1과 M2 CPU에도 존재함.
     * 카스퍼스키 연구원들은 감염된 기기를 광범위하게 역공학한 후에 비밀 하드웨어 기능을 발견함.

미스터리 아이폰 기능, 트라이앵글레이션의 성공에 결정적

     * 공격자들은 메모리 매핑된 입출력(MMIO)을 이용하여 메모리 보호를 우회함.
     * 연구원들은 공격자들이 사용한 MMIO 주소가 어떤 장치 트리에도 식별되지 않았다는 것을 발견함.
     * 소스 코드, 커널 이미지, 펌웨어를 조사해도 MMIO 주소에 대한 언급을 찾을 수 없었음.

  GN⁺의 의견

     * 이 기사는 고급 기술을 사용한 사이버 보안 공격에 대한 흥미로운 사례를 제공함. 특히, 애플의 하드웨어 기능을 악용한 것은 보안 연구원들에게 큰 관심사임.
     * 제로데이 취약점의 발견과 이용은 기업과 개인 모두에게 중요한 경각심을 일깨워줌. 사용자들은 운영체제와 애플리케이션을 최신 상태로 유지하는 것의 중요성을 인식해야 함.
     * 이 사건은 하드웨어와 소프트웨어의 복잡한 상호작용을 이해하고, 잠재적인 보안 위협을 식별하는 데 있어 역공학의 가치를 강조함.
"
"https://news.hada.io/topic?id=12521","Generals.io - 적 장군을 포획하여 패배시키다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Generals.io - 적 장군을 포획하여 패배시키다

새로운 업데이트: v29.0

     * 커스텀 로비에서 사용 가능한 수정자(모디파이어) 추가
     * 일부 수정자는 서포터만 사용 가능
     * 초기 수정자 세트에는 Leapfrog, City-State, Misty Veal, Crystal Clear, Silent War 포함
     * 소규모 버그 수정 및 성능 향상
     * 현재 개발자: Lazerpent, matt, pasghetti
     * Discord 참여 또는 버전 이력 확인 권장

새로운 업데이트: v28.7.0

     * 연속 줌 기능 및 줌 설정 추가
     * 새로운 키보드 단축키:
          + c로 지도 중앙 정렬 및 화면에 맞춤
          + g로 장군 선택 및 중앙 정렬
          + 1, 2, 3으로 옵션의 접근성 탭에서 설정 가능한 줌 프리셋으로 설정
     * 소규모 버그 수정 및 성능 향상
     * 현재 개발자: Lazerpent, matt, pasghetti
     * Discord 참여 또는 버전 이력 확인 권장

시즌 23 챔피언십 결과

     * MeltedToast가 1v1 시즌 종료 챔피언십에서 연속 3회 우승을 차지한 것을 축하
     * 현재 이벤트 챔피언:
          + FFA: WeatherBoy
          + 1v1: Mithraaaa
          + 2v2: 4ever Lan & Tingcial
          + 커스텀: blahajblahaj & -Sheou- & Seo Seung Jae & Spraget

새로운 업데이트: v28.6.2

     * 1v1 큐에 리매치 기능 추가
     * 현재 개발자: Lazerpent, matt, pasghetti
     * Discord 참여 또는 버전 이력 확인 권장

새로운 업데이트: v28.6.1

     * 메인 메뉴 및 리더보드 단순화
     * 현재 이벤트 챔피언의 사용자 이름에 배지 추가
     * 공지 섹션 추가
     * 리플레이 컨트롤에 소규모 조정 추가
     * 현재 개발자: Lazerpent, matt, pasghetti
     * Discord 참여 또는 버전 이력 확인 권장

커스텀 (2022년 6월) 결과

     * ☻☺, beef boss, bilibili-fui, -Sheou-, mashiro에게 축하
     * 다음 토너먼트는 7월 9일에 열리는 1v1 시즌 챔피언십임을 상기
     * 현재 이벤트 챔피언:
          + FFA: WeatherBoy
          + 1v1: Mithraaaa
          + 2v2: 4ever Lan & Tingcial
          + 커스텀: blahajblahaj & -Sheou- & Seo Seung Jae & Spraget

새로운 업데이트: v28.6.0

     * 1v1에서 AFK 항복이 이제 턴 60이 아닌 턴 25 후에 적용
     * 리플레이 되감기 및 25턴 단위로 이동 가능
     * 현재 개발자: Lazerpent, matt, pasghetti
     * Discord 참여 또는 버전 이력 확인 권장

GN⁺의 의견

     * 연속 우승의 의미: MeltedToast의 연속 3회 우승은 게임 내에서의 지속적인 기량과 전략의 우수성을 나타냄.
     * 개발자 커뮤니티의 중요성: Lazerpent, matt, pasghetti와 같은 개발자들의 지속적인 업데이트와 커뮤니티 참여는 게임의 성장과 유지에 중요한 역할을 함.
     * 플레이어 참여의 증대: 새로운 기능과 이벤트 챔피언 배지 추가는 플레이어들의 참여를 유도하고 게임에 대한 흥미를 높이는 요소임.

        Hacker News 의견

     * generals.io의 원작자 의견
          + 대학 시절에 만든 게임이 여전히 사람들에게 즐거움을 주고 있는 것을 보니 기쁨.
          + 시간이 부족하여 몇 년 전에 게임을 팔았고, 새로운 소유주가 게임을 계속 운영해줘서 감사함.
          + 과거 해커뉴스 스레드 링크 제공.
     * 게임에 중독된 사용자
          + 2020년부터 게임이 도파민 함정이 되어 뇌에 안 좋은 영향을 미침.
          + 게임을 하지 못하게 하기 위해 /etc/hosts에 가짜 항목을 추가했지만, 자주 비활성화하고 게임을 함.
     * 과거에 게임을 즐겼던 사용자
          + 게임이 오랜만에 게시된 것을 보고 반가움.
          + 미니 RTS와 같은 게임으로, 빠르게 게임에 들어가거나 나올 수 있어 좋음.
          + 최대 10분만 투자하면 됨.
     * 사용자 경험(UX)이 뛰어난 게임
          + 온보딩 UX가 매우 훌륭함.
          + 턴 기반이지만 실시간으로 진행되는 점이 흥미로움.
          + 모바일 버전에 대한 문의가 있음.
     * 키보드 단축키에 대한 사용자 의견
          + 키보드 단축키가 실제 키 위치가 아닌 문자에 매칭되어 있어서 불편함.
          + 대체 키보드 레이아웃 사용자에게는 약간 성가심.
          + 그럼에도 게임은 멋짐.
     * 8인 플레이어 전략 분석
          + 게임의 초기 전략에 대한 분석을 rot13 암호로 제공.
          + 3가지 기본 전략과 각 전략 간의 상호작용에 대한 설명.
          + 8인 플레이어 게임에서 운이 중요하지만, 전략적으로 플레이하는 것도 중요함.
     * 과거에 게임을 즐겼던 사용자의 경험
          + 게임을 처음 해커뉴스에 게시했을 때 많이 했으며, 8v8 미국 리더보드에서 2위에 올랐음.
          + 비슷한 게임인 Starjack을 만들었고, 2019년에 동시 접속자 수 1천 명을 달성했음.
          + 게임은 주로 다른 플레이어의 행동을 읽고 적절히 반응하는 것에 관한 것임.
          + 고급 전략에 대한 추가 설명과 게임의 핵심 요소에 대한 분석.
     * Empire Attack 게임의 클론
          + Empire Attack 게임의 클론으로, 10일간 진행되는 변형 게임이 재미있었음.
     * 게임을 좋아하는 사용자
          + 2016/17년에 게임에 푹 빠져서 글로벌 1v1 리더보드에서 상위권에 올랐음.
          + 게임이 여전히 운영되고 있는 것을 보고 기쁨.
     * AFK로 인식되어 게임에서 패배하는 사용자
          + 유닛을 움직이고 있음에도 불구하고 ""AFK로 간주되어"" 게임에서 지속적으로 패배함.
          + AFK로 간주되는 기준에 대한 질문과 이로 인한 좌절감 표현.
"
"https://news.hada.io/topic?id=12546","모든 프로그래머가 도전해야 할 프로젝트들 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     모든 프로그래머가 도전해야 할 프로젝트들 (2019)

텍스트 에디터

     * 텍스트 에디터는 매일 사용하지만, 실제로 어떻게 작동하는지 알고 있는가? 기본적인 기능을 구현하는 것부터 시작.
     * 텍스트 문서를 메모리에 어떻게 저장할지가 가장 큰 도전. 배열 사용은 성능 문제가 있으며, 이를 해결하기 위한 다양한 데이터 구조 학습 필요.
     * 텍스트 커서의 동작 방식 학습, 기본 에디터 구현 후에는 undo/redo와 단어 자동 줄바꿈 기능 구현에 도전.

2D 게임 - 스페이스 인베이더스

     * 간단한 게임이라도 특별한 데이터 구조와 디자인 패턴 필요. 게임 디자인과 아트에 집중하기보다는 게임의 전체적인 구현에 초점.
     * 화면 그리기, 게임 루프, 사용자 입력 처리, 동적 객체 생성 및 관리, 게임 로직 적용 등의 학습.
     * 기본 게임 구현 후에는 타이틀 화면 메뉴, 게임 오버 화면 추가, 다양한 컴퓨터에서 동일한 속도 유지, AI 적용 등으로 확장 가능.

컴파일러 - Tiny BASIC

     * 컴파일러 구현은 프로그래밍에 대한 깊은 이해를 요구하는 프로젝트. Tiny BASIC과 같은 간단한 언어로 컴파일러 작성을 시작.
     * 코드를 토큰화하는 방법(lexical analysis), 파싱(구조 확인 및 트리 생성), 의미 분석, 코드 생성 등의 과정을 학습.
     * 기본 컴파일러 구현 후 표준 라이브러리 추가, 최적화 단계 추가, 오류 메시지 개선 등으로 확장 가능.

미니 운영 체제

     * 운영 체제의 기본 개념은 다양한 분야에 적용 가능. 운영 체제 구현을 통해 하드웨어에 대한 이해 증진.
     * 하드웨어에 의존적인 학습 곡선이 있지만, 책이나 튜토리얼을 따라하면 부팅 가능한 OS를 만들 수 있음.

스프레드시트

     * 스프레드시트 애플리케이션은 텍스트 에디터와 컴파일러의 도전을 결합. 셀 내용을 메모리에 표현하는 방법과 수식을 위한 프로그래밍 언어의 인터프리터 구현을 학습.

비디오 게임 콘솔 에뮬레이터

     * 에뮬레이터 작성은 컴파일러, 운영 체제, 컴파일러 작성의 도전을 하나로 결합. 실제 게임을 에뮬레이터로 플레이하는 것은 보람찬 경험.
     * 실제 비디오 게임 콘솔을 에뮬레이트하는 것은 해당 CPU 및 기타 하드웨어 구성 요소처럼 작동하는 가상 머신 작성을 의미.

GN⁺의 의견

     * 프로그래밍 기초를 다지는 데 있어 텍스트 에디터나 간단한 게임 구현은 실제로 사용하는 소프트웨어의 내부 작동 원리를 이해하는 데 큰 도움이 됨.
     * 컴파일러나 운영 체제와 같은 복잡한 프로젝트는 프로그래밍 언어와 컴퓨터 아키텍처에 대한 깊은 이해를 요구하며, 이는 고급 소프트웨어 엔지니어링 기술을 개발하는 데 필수적.
     * 이러한 프로젝트들은 프로그래머가 새로운 언어나 프레임워크를 배우거나, 기존 지식을 심화시키는 데 있어 흥미롭고 도전적인 경험을 제공함.

        Hacker News 의견

     * 텍스트 편집기, 컴파일러, 운영 체제, 레이트레이서와 같은 프로젝트를 진행하는 것이 프로그래밍 실력을 향상시킬 수 있지만, 소프트웨어 엔지니어링 능력을 향상시키는 것은 아님. 실제로 이러한 프로젝트는 ""여기서 발명되지 않음(Not Invented Here)""이라는 재앙적인 원칙을 내포하고 있어 소프트웨어 엔지니어링에 있어서는 역효과를 낼 수 있음.
          + 라이브러리에서 가져올 것인지, 직접 작성할 것인지 결정하는 능력
          + 프로젝트 요구 사항에 맞는 고품질 라이브러리 및 프레임워크 식별 능력
          + 최적화가 가치 있는 곳과 그렇지 않은 곳을 결정하는 능력
          + 몇 년 후에도 여전히 읽을 수 있는 코드 작성 능력
          + 프로젝트를 대규모 복잡한 시스템으로 생각하며 소프트웨어 및 비소프트웨어 의존성 고려 능력
          + 대안적인 도전으로 웹 검색 엔진 만들기를 제안. 문자열 매칭 알고리즘 등은 이미 다른 사람들이 해결했으므로, 실제로 작동하는 검색 엔진(및 크롤러)을 만드는 것이 목표임.
     * UI/웹 기반 프로젝트로는 다음과 같은 것들을 추천함:
          + Unity나 Unreal을 사용한 간단한 비디오 게임 (게임에서 30-60fps가 중요하기 때문에 다른 곳에서도 성능이 좋은 인터페이스를 만드는 데 도움이 됨)
          + React와 유사한 간단한 자바스크립트 프레임워크 (데이터 흐름 및 이벤트 처리 이해에 도움이 됨)
          + XMLHTTPRequest 주위에 http 라이브러리 래퍼 (fetch가 존재하지만, HTTP 요청을 처음부터 어떻게 보내고 읽는지 이해하는 것은 CORS 문제, OPTIONS 요청 등을 디버깅할 때 도움이 됨)
     * 미니 운영 체제에 대한 긍정적인 의견. 애플리케이션 개발자로서 운영 체제의 기능(메모리 관리, 파일 시스템 등)에 의존하고 있으며, 어떻게 이런 것들이 뒤에서 작동하는지 궁금해질 것임. xv6를 사용하여 여가 시간에 다양한 프로세스 스케줄링 알고리즘을 학습하고 구현하는 것은 매우 유익하고 재미있는 경험임.
     * 물리적인 것에 손을 대보고 싶은 욕구, 예를 들어 로봇이나 자동 조종 장치가 있는 드론, 프로그래밍 가능한 GNC 매개변수를 가진 우주 비행기의 비행 역학에 대한 정확한 시뮬레이션 등. ""Fundamentals of Astrodynamics""라는 책을 가지고 있으며 이번 휴가 시즌에 이를 활용하고 싶음. GNC(유도, 항법 및 제어)에 대한 좋은 정보를 얻고 싶음.
     * 개인적인 취향과 상황에 따라 다르지만, 아이디어를 찾고 있다면 좋은 시작점이 될 수 있는 목록. Sinclair ZX Spectrum을 사용하여 음악 스태프 편집기와 트래커, 2D 게임(스페이스 인베이더) 등을 만들었음. 첫 번째 컴퓨터(386)로는 허프만 압축기, B-Tree 인덱스, OOP 폼 생성기, 다이얼업용 이메일 체커, 수동 파서 등을 만들었음.
     * 텍스트 편집기에 대한 논의: 텍스트 문서를 메모리에 어떻게 저장할지가 가장 큰 도전임. 배열을 사용하는 것이 첫 번째 생각이었지만, 문서의 끝이 아닌 곳에 텍스트를 삽입할 때 성능이 매우 나쁨. 하지만 자바스크립트 문자열을 사용하고 2년 이상 편집기를 사용하는 동안 성능 문제가 없었음. 물론 다른 많은 문제들이 있었음, 예를 들어 긴 수평선을 렌더링하는 것은 최적화 접근 방식이 단일 라인 렌더링이 저렴할 것이라고 가정했기 때문에 문제가 됨.
     * 간단한 장난감 레이트레이서를 시도해보는 것도 좋은 생각임. 비트맵 그래픽의 구와 확산 및 반사 반사를 수행하는 레이트레이서를 만드는 것은 프로젝트를 너무 복잡하게 하지 않는 한 상대적으로 제한된 프로젝트가 될 수 있음.
     * 스페이스 인베이더를 작성하기 위해 ""팩토리 패턴""이 필요하다고 생각한다면, 문제가 있는 것임. 원래 게임에서 그런 디자인 개념이 사용되었다고 확신할 수 없음.
     * 배열을 데이터 구조로 사용하는 텍스트 편집기에 대한 의견. 타이핑하는 동안 빠른 속도가 필요하며, 한 줄만 변경하면 됨. 새로운 줄을 입력할 때, 엔터를 누른 후 배열을 재구성하는 데 필요한 추가 지연은 수백만 줄에 대해서는 눈에 띄지 않음. 텍스트 편집기의 더 도전적인 부분은 사용자가 보는 것만 렌더링하는 것을 확실히 하는 것임.
"
"https://news.hada.io/topic?id=12606","HN에 묻다: 경험 많은 코더를 위한 프로그래밍 강좌?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN에 묻다: 경험 많은 코더를 위한 프로그래밍 강좌?

Elixir 학습 경험 공유

     * Elixir를 최근에 배우기 시작함.
     * 대부분의 인기 있는 학습 자료들이 초보자를 대상으로 하고 있어, 10년 이상 코딩 경험이 있는 사람에게는 다소 지루함.
     * 좀 더 경험 많은 개발자를 위한 인기 있는 프로그래밍 책이나 강좌가 있는지에 대한 질문.

GN⁺의 의견

     * 프로그래밍 언어 Elixir에 대한 학습은 다양한 수준의 개발자들에게 필요한 과정임.
     * 경험 많은 개발자들을 위한 고급 자료의 필요성이 강조됨.
     * 이 글은 Elixir 학습 자료에 대한 수요와 개발자 커뮤니티 내에서의 경험 공유의 중요성을 보여줌.

        Hacker News 의견

     * 소프트웨어 엔지니어링 분야에서 고급 자료의 부족 문제
          + 시장 경제가 공동선에 반하는 경우가 있음.
          + 지식을 가진 사람들이 초보자용 자료를 만드는 것에 더 많은 동기를 부여받음.
          + 고급 사용자를 대상으로 한 자료는 잠재 고객이 급격히 줄어들어 가격을 대폭 올려야 함.
          + 사람들은 지식의 가치에 상관없이 비싼 책을 구매하지 않음.
          + 고급 자료를 인식하는 데 어려움이 있음(Blub Paradox 참조).
          + 다양한 코드베이스를 읽고 아이디어를 배우며, 문제 해결을 위한 지식 라이브러리를 구축함.
          + 비정상적인 장소에서도 유용한 지식을 발견할 수 있음.
     * David Beazley의 고급 프로그래밍 코스 추천
          + ""Rafting Trip""과 ""Write a Compiler"" 코스를 수강함.
          + 경험이 많은 프로그래머를 대상으로 함.
          + 대부분의 수강생이 Raft 라이브러리나 컴파일러를 만들어냄.
     * Casey Muratori의 성능 중심 프로그래밍 코스와 관련 도서 추천
          + 성능 문제에 대한 거의 산업 선도적인 이해를 제공함.
          + ""Hacker's Delight Second Edition""과 ""What Every Programmer Should Know About Memory""를 유용한 참고자료로 언급함.
     * LearnXinYMinutes 웹사이트를 통한 빠른 학습 경험 공유
          + MatLab/Octave를 몇 시간 만에 배워 CS 과정에서 면제받음.
          + 공식 튜토리얼과 함께 사용할 때 특히 유용함.
     * Peter Norvig의 10년 전 프로그래밍 코스 언급
          + ""경험 필요 없음""이라고 표시되어 있지만 실제로는 중급-고급 수준임.
     * 새로운 언어를 배울 때 인기 있는 프레임워크/라이브러리 코드베이스를 깊이 파고들기
          + 실제 사용 사례를 통해 핵심 개념을 심화 학습하고 고급 패턴에 노출됨.
     * 컴퓨터 보안 산업에서의 교육 방식을 소프트웨어 산업이 따라야 한다는 의견
          + 주말부터 일주일 간의 집중 코스가 필요함.
          + Karpathy의 신경망 코스와 Gamozolabs의 fuzz week 등 무료 자료 언급.
     * Go 언어로 작은 애플리케이션을 작성할 때 Chat GPT를 사용한 경험 공유
          + 필요한 패키지와 상호작용 방법을 알아내는 데 도움이 됨.
     * Jeremy Koppel의 ""Advanced Software Design Course""를 통한 성장 경험 공유
          + 22년 경력의 개발자도 성장할 수 있는 과정임.
     * 경험이 많은 프로그래머를 위한 교육 자료 부족 문제
          + 경제적 이유로 인해 고급 엔지니어와 좋은 교사의 교집합이 매우 작음.
          + 경험이 많은 개발자는 교육하기 어렵고, 초보자는 거의 모든 자료를 소비할 준비가 되어 있음.
"
"https://news.hada.io/topic?id=12516","왕관 수줍음왕관 수줍음

나무 군락의 '왕관 수줍음' 현상

     * '왕관 수줍음'은 일부 나무 종에서 관찰되는 현상으로, 완전히 자란 나무들의 나뭇가지가 서로 닿지 않고, 대신 채널과 같은 틈을 형성하는 캐노피를 만듦.
     * 이 현상은 같은 종의 나무들 사이에서 가장 흔하지만, 서로 다른 종의 나무들 사이에서도 발생함.
     * 왕관 수줍음이 적응적 행동인 이유에 대한 여러 가설이 있으며, 연구에 따르면 이 현상이 잎을 먹는 곤충 유충의 확산을 억제할 수 있음을 시사함.

가능한 생리학적 설명

     * 왕관 수줍음의 정확한 생리학적 기반은 불확실함.
     * 과학 문헌에서 1920년대부터 논의되어 왔으며, 다양한 가설과 실험 결과는 서로 다른 종에서 여러 메커니즘이 존재할 수 있음을 시사함.
     * 나뭇가지의 상호 침투로 인한 '상호 가지치기' 가설이 있으며, 바람이 많이 부는 지역에서 나무들이 충돌하여 물리적 손상을 입음으로써 왕관 수줍음 반응을 유발함.
     * 성장 노드에서의 지속적인 마모가 싹 조직을 방해하여 가지의 측면 성장을 중단시킬 수 있음.
     * 인접 식물 간의 상호 광 감지에 관한 가설도 있으며, 식물은 광수용체를 통해 이웃 식물의 근접성을 감지할 수 있음.
     * 왕관 수줍음은 이웃 식물에 대한 응답으로 잘 이해되는 그늘 회피 반응의 결과일 수 있음.

관찰되는 종

     * 왕관 수줍음 패턴을 보이는 나무 종에는 Dryobalanops 속의 여러 종, 일부 유칼립투스 종, Pinus contorta, Avicennia germinans, Schefflera pittieri, Clusia alata 등이 포함됨.
     * 다양한 종의 나무 그룹에서도 왕관 수줍음이 관찰되었음.

   GN⁺의 의견
     * 왕관 수줍음은 나무들 사이의 상호작용과 생태계 내에서의 적응적 행동에 대한 흥미로운 예시임.
     * 이 현상은 식물 생리학, 생태학, 그리고 진화론적 관점에서 다양한 연구 주제를 제공함.
     * 나무들이 서로의 성장을 방해하지 않고 공존하는 방식을 이해함으로써, 우리는 숲의 구조와 동적인 상호작용에 대해 더 깊이 이해할 수 있음.

        Hacker News 의견

     * 나무의 왕관 수줍음에 대한 최근 연구
          + 나무의 왕관 수줍음과 나무의 가늘기, 잎 모양 사이에 긍정적 상관관계가 있음.
          + 이는 나무가 단순히 빛의 가용성에 반응하는 것 이상으로 자원 관리 전략을 사용한다는 것을 시사함.
          + 잎 모양과의 상관관계는 바람 피해와 같은 다른 환경 스트레스에 대한 적응일 수 있음.
          + 더 많은 질문이 생기는 상황임.
     * 게임 이론 관점에서 본 나무의 왕관 수줍음
          + 같은 종의 나무들은 유사한 유전자를 공유하며, 왕관 수줍음을 보이지 않는 유전자는 장기적으로 왕관 수줍음을 코드화하는 유전자에 비해 불리함.
          + 이는 죄수의 딜레마와 유사하며, 수줍음은 '협력'을, 수줍음이 없는 것은 '배반'을 의미함.
          + 협력적인 전략을 가진 나무 집단이 개별적으로 비협력적인 나무를 이길 수 있음.
     * 관련 링크 및 논의
          + 나무의 왕관 수줍음에 대한 이전 해커뉴스 토론 링크 제공.
     * 왕관 수줍음을 주제로 한 레스토랑
          + 'Crown Shy'라는 이름의 레스토랑을 즐겨 찾으며, 그 장소의 비밀을 널리 퍼뜨리지 말 것을 권함.
     * 왕관 수줍음에 대한 책
          + ""A Prayer for the Crown Shy""라는 책을 통해 왕관 수줍음에 대해 알게 됨.
     * 수학적 관점에서 본 숲의 캐노피
          + 모든 숲의 캐노피는 보로노이 분할이어야 한다는 수학적 결론과, 일부 단일 종 숲에서 실제로 관찰되는 현상에 대한 설명.
          + 북미 북동부의 혼합 숲에서는 왕관 수줍음이 눈에 띄지 않지만, 수학을 신뢰하고 있음.
     * 나무 사이의 사회적 거리두기
          + 나무들 사이의 사회적 거리두기로 비유한 왕관 수줍음 현상에 대한 언급.
     * 왕관 수줍음에 대한 새로운 발견
          + 이전에 들어본 적 없는 놀라운 현상으로, 신경과 같은 구조가 다른 맥락에서도 반복되는 것에 대한 감탄.
     * 나무 간의 잎 상호작용
          + 나무 내부에서 잎이 서로 방해하지 않도록 진화했으며, 이러한 데이터가 나무 간에도 적용되는 것으로 보임.
     * 환경 퍼즐
          + 왕관 수줍음 현상이 환경 퍼즐과 같다는 의견.
"
"https://news.hada.io/topic?id=12536","GTA 5 소스 코드 온라인 유출소스 코드 온라인 유출

GTA 5 소스 코드 크리스마스에 온라인 유출, 록스타에게 큰 타격: 보고서

     * 인섬니악 게임즈의 최근 유출 사건 이후, GTA 5 개발사 록스타 게임즈가 유출자들의 다음 타깃이 됨.
     * 인기 있는 유튜버 SKizzleAXE의 보고에 따르면, 2023년 12월 24일, 그랜드 테프트 오토 5(GTA 5)의 전체 소스 코드가 공개적으로 유출됨.
     * 유출된 데이터에는 Bully 2와 다음 그랜드 테프트 오토 타이틀인 Project Americas와 관련된 정보도 포함됨.

GTA 5 소스 코드 유출, 록스타 게임즈와 팬들에게 크리스마스를 망칠 수도 있음

     * SKizzleAXE는 유출된 GTA 5 소스 코드의 스크린샷을 공유하며 보고서의 진위를 확인함.
     * 록스타가 Bully 비디오 게임의 후속작을 작업 중이라는 내용도 포함됨.
     * 다른 보고서에 따르면, 소스 코드가 이름이 공개되지 않은 디스코드 서버에서 유출됨.

GTA 5 소스 코드 유출로 인한 영향

     * GTA 5의 소스 코드는 작년에 영상과 함께 유출되었으나, 지금까지 공개되지 않았음.
     * 이번 유출은 개발자에게 큰 데이터 손실을 의미하며, 시리즈의 현재 및 미래 플레이어에게 영향을 줄 수 있음.
     * 온라인 리포터 Gaming Detective는 유출된 소스 코드로 인해 록스타 게임즈의 그랜드 테프트 오토 6 출시가 지연될 수도 있다고 강조함.

개발자와 게이머에게 최악의 휴가 시즌

     * 록스타 게임즈는 아직 유출에 대해 언급하지 않음.
     * 인섬니악 게임즈는 최근 완전히 다운로드 가능한 미발매 울버린 비디오 게임과 다가오는 타이틀에 대한 상세 정보가 담긴 큰 데이터 유출 사건에 직면함.
     * GTA 6 논란과 인섬니악 데이터 유출로 전 세계 개발자와 게이머에게 최악의 휴가 시즌이 될 것으로 보임.

GN⁺의 의견

     * 이번 GTA 5 소스 코드 유출은 게임 개발사에게 심각한 보안 위협이 될 수 있으며, 향후 게임 개발 및 출시에 중대한 영향을 미칠 수 있음.
     * 유출된 정보가 게임의 미래 개발에 대한 통찰을 제공할 수 있으나, 동시에 저작권 침해 및 불법 복제와 같은 문제를 야기할 수 있음.
     * 이 사건은 게임 산업 전반에 걸쳐 보안 강화의 중요성을 강조하며, 개발자와 게이머 모두에게 경각심을 일깨우는 계기가 됨.

        Hacker News 의견

     * 4chan에 따르면, 현재 세 가지 유형의 유출이 돌고 있다고 함:
          + 3.3GB 크기의 소스 코드만 있는 유출
          + 17GB 크기의 소스 코드와 일부 자산이 포함된 유출
          + 1TB 크기의 소스 코드와 전체 자산이 포함된 유출
          + 소스 코드를 공유하는 게임이 더 많았으면 좋겠다는 의견. 저작권 기간이 짧았으면 하며, 소프트웨어 프로젝트가 보호를 받기 위해 소스 코드 제출을 요구하는 것이 바람직하다고 생각함. 저작권이 만료된 후에는 소스 코드가 공공 도메인에 속하게 되어 역공학을 통한 시간 낭비를 줄일 수 있을 것이라는 희망사항을 표현함.
     * GTA5 온라인을 좋아하는 사람들이 많고, 이 유출로 인해 록스타가 서비스를 중단하더라도 개인 서버를 만들 수 있는 모든 것이 포함되어 있기를 바람. 또한, 팬이 제출한 패치로 인해 GTA5의 성능이 40% 향상되었다는 미래의 헤드라인을 상상함.
     * Mt. Chiliad Mystery가 마침내 해결될 수도 있음을 기대하는 댓글.
     * 모드 제작 커뮤니티와 GTA 온라인 해커들 외에는 누가 이 유출에 관심을 가질까 하는 의문을 제기함. 경쟁사들이 이 유출에서 가치를 찾을 것이라고 생각하지 않음.
     * 정품 게임의 자산을 사용하지만 불필요한 런처 소프트웨어 없이 작동하는 완전한 오픈 소스 재구현이 있었으면 좋겠다는 의견.
     * 더 많은 AAA 게임들이 aarch64 리눅스에서 네이티브로 실행될 수 있기를 바라며, 소스 코드 유출이 이를 가능하게 하는 문을 열 수 있음을 언급함.
     * Nvidia 하드웨어 회사를 해킹한 혐의로 보석 중인 Kurtaj가 경찰 보호를 받으며 호텔에 머물면서, 컴퓨터 없이 스마트폰, 아마존 파이어스틱, 호텔 방의 TV를 사용해 록스타에 해킹을 시도한 사건에 대한 언급.
     * 록스타가 최근 많은 공격을 받고 있는데, 이것이 내부자에 의한 일인지, 관리 미흡인지, 부적절한 고용 때문인지, 혹은 전혀 다른 이유인지 확실하지 않음. GTA6 유출 이후 보안 조치를 강화했어야 한다고 생각함.
     * 이번 사건이 재미있긴 하지만, 돈을 받고 코드를 작성하는 사람에게는 전혀 쓸모가 없음. 접근조차 하고 싶지 않다는 의견.
     * GTA5 온라인 PC 버전이 계속 유지된다면, 코드를 오픈 소스로 공개하고 커뮤니티가 취약점을 보고하고 수정할 수 있게 하는 것이 가장 현명한 조치일 것이라는 의견.
"
"https://news.hada.io/topic?id=12503","redb - Pure Rust로 작성된 임베디드 키/밸류 스토어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  redb - Pure Rust로 작성된 임베디드 키/밸류 스토어

     * 심플, 포터블, 고성능, ACID 호환 트랜잭션 지원
     * 데이터는 Copy-on-Write B-Tree 컬렉션에 저장
     * Zero-copy, thread-safe, BTreeMap 기반 API가
     * 블로킹 없는 동시 읽기/쓰기를 위한 MVCC 지원
     * 기본 Crash-Safe
     * Savepoints 와 Rollback 지원
"
"https://news.hada.io/topic?id=12600","HTML5 리메이크 버전 '로드 러너'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HTML5 리메이크 버전 '로드 러너'

        Hacker News 의견

     * 브뢰더번드 트리플 크라운에 대한 추억
          + 1990년대 초반, 작성자는 자신의 마을 메인 스트리트에 있는 반지하 소프트웨어 가게를 자주 방문했음.
          + PC Magazine에서 새 게임 소식을 접하고, 출시 여부를 확인하기 위해 거의 매일 가게를 방문했음.
          + 출시일이 불분명했기 때문에, 새 게임이 진열대에 나타나기까지 몇 달간의 고통스러운 방문이 이어졌음.
          + 어느 토요일 아침, 가게에서 Turbo C 박스를 발견하고 아버지가 구매해줌으로써 프로그래밍에 관심을 가지게 됨.
          + 아버지는 FORTRAN 이후의 코딩 경험이 없어 도움을 주려 했지만, 9살이었던 작성자에게는 맞지 않았음.
          + 결국 Turbo C는 선반 위로 돌아갔고, 작성자는 다크 포스와 스톰트루퍼를 상대하는 데 집중함.
     * Lode Runner: The Legend Returns에 대한 추억
          + 작성자는 원작을 플레이하지 않았지만, Lode Runner: The Legend Returns를 가장 좋아하는 게임 중 하나로 꼽음.
          + 후반 레벨이 매우 도전적이었으며, 최종 단계에 도달한 기억은 없지만 중독성이 강했음.
          + 게임의 충실한 리메이크를 다운로드할 수 있는 링크를 공유함.
     * Lode Runner의 게임 메커니즘과 레벨 빌더에 대한 인상
          + Lode Runner는 게임 메커니즘과 레벨 빌더로 인상을 남겼으며, 매우 우아한 게임이었음.
          + 현재의 상위 10개 게임 목록에는 들지 않겠지만, 출시 당시의 상위 10개 게임 목록에는 들었을 것임.
     * Lode Runner의 소스 코드
          + Lode Runner의 소스 코드가 공개되어 있음을 알리는 링크 제공.
     * 원본 Lode Runner의 로딩 속도와 게임 플레이에 대한 비교
          + 원본 게임은 거의 즉시 로딩되었으며, 긴 로딩 화면이 없었음.
          + 원본에서는 데이터 수집을 시도하지 않았고, 이름을 입력하는 대화 상자가 없었음.
          + 새 게임에서는 계속 이동하기 위해 키를 누르고 있어야 하지만, 원본에서는 플레이어가 계속 달렸음.
          + 원본의 키보드 레이아웃을 공유함.
     * Lode Runner: The Legend Returns를 어린 시절 즐겼던 경험
          + 작성자는 어린 시절 Lode Runner: The Legend Returns를 많은 시간 동안 플레이했으나, 게임을 어디서 얻었는지 기억나지 않음.
          + 당시 Compaq Presario 컴퓨터에 Sierra 디스크가 포함되어 있었을 가능성이 있음.
     * Lode Runner에 대한 추억과 레벨 디자인 경험
          + 작성자는 어린 시절 PC에서 Lode Runner를 즐겼으며, 자신의 레벨을 디자인할 수 있는 첫 게임이었음.
          + 학교 컴퓨터실에서 친구들과 서로 도전할 수 있는 커스텀 레벨을 만드는 것이 즐거웠음.
     * 브뢰더번드 트리플 크라운과 Turbo C에 대한 추억
          + 브뢰더번드 트리플 크라운에 대한 추억은 90년대 초반 컴퓨터 소프트웨어 가게의 매력을 떠올리게 함.
          + 새 게임 출시에 대한 기대감, 몇 달간의 기다림, 최첨단 기술에 대한 매력이 그 시대의 본질을 포착함.
          + Turbo C와의 우연한 만남은 코딩 세계로 뛰어들고자 하는 희망찬 야망을 반영함.
          + 9살의 작성자에게는 다크 포스와 스톰트루퍼의 유혹이 더 강했으며, 과거로의 여행과 '될 수 있었던 것들'에 대한 생각을 자아냄.
     * Lode Runner의 레벨 에디터에 대한 경험
          + 작성자는 학교에서 친구들과 함께 Lode Runner의 레벨 에디터를 깊이 탐구했음.
          + 에지 케이스를 활용하여 기본 레벨보다 훨씬 복잡하고 어려운 레벨을 만들었음.
          + 사람들에게 도구를 제공하는 것이 창의성을 촉진한다는 것을 상기시킴.
     * Macintosh 128K에서 Lode Runner를 즐겼던 추억
          + 작성자는 Macintosh 128K에서 Lode Runner를 가장 좋아하는 게임으로 기억함.
          + 조카가 이탈리아로 가져가서 계속 플레이할 수 있도록 했으며, 다른 컴퓨터에서는 플레이한 적이 없음.
"
"https://news.hada.io/topic?id=12590","2024년, Firefox로의 전환을 부탁드립니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2024년, Firefox로의 전환을 부탁드립니다

2024년에는 Firefox로 전환하세요

     * Firefox는 광고 수익이나 개인 데이터 판매로 돈을 벌지 않는 유일한 주요 웹 브라우저임.
     * 웹사이트가 쿠키, 지문 인식 등의 기술을 사용해 사용자를 추적하는 것에 대한 많은 논의가 있었으나, Google, Apple, Microsoft와 같은 회사가 브라우저를 소유함으로써 이러한 기술 없이도 사용자 데이터에 접근할 수 있는 위치에 있음.
     * 독립적인 브라우저 사용의 필요성, 현재로서는 Firefox가 그 대안임.

브라우저 엔진 독점

     * Wikipedia에 따르면 현재 활성화된 브라우저 엔진은 네 가지임.
     * 브라우저 엔진은 웹 페이지의 코드를 화면에 표시하는 역할을 함.
     * 이상적으로는 W3C 표준을 준수하며, 모든 요소를 표준에 맞게 표시함으로써 웹 개발자가 모든 브라우저에서 작동하는 사이트를 쉽게 작성할 수 있음.

    이전에도 일어난 일

     * 2000년대 초, Internet Explorer는 95%의 시장 점유율을 가졌으며, 많은 사이트가 IE에서만 작동하도록 개발됨.
     * IE가 지원하는 실험적 기능을 사용하고 공식 HTML 표준을 무시하는 상황이 발생했으며, 이는 월드 와이드 웹의 발전을 저해하는 매우 나쁜 상황이었음.
     * 현재 Chrome, Safari, Edge는 밀접하게 관련된 Webkit과 Blink 엔진의 변형을 사용하고 있음.
     * 브라우저 엔진 독점을 피하려면 Firefox와 그것의 ""Gecko"" 엔진을 지원해야 함.

Firefox는 실제로 매우 좋음

     * Firefox가 나쁜 브라우저라면 전환을 추천하지 않을 것임.
     * 빠르고, 사용자 인터페이스가 좋으며, 경쟁사와 마찬가지로 현대적이고 우아함.
     * 웹 개발자로서 여러 브라우저를 사용하지만, 웹에서 무언가를 검색할 때는 Firefox를 선택함.
     * 웹을 구하기 위해 최고의 브라우저를 사용하는 것은 쉬운 일이며 큰 차이를 만듦.

  GN⁺의 의견

     * Firefox의 독립성과 개인 정보 보호 기능은 사용자들이 자신의 데이터를 보호하고 인터넷 생태계의 다양성을 유지하는 데 중요함.
     * 브라우저 엔진의 다양성은 웹 표준의 발전과 호환성을 촉진하며, 개발자들이 더 나은 웹 경험을 제공할 수 있게 함.
     * 이 글은 Firefox의 장점을 강조하며, 사용자들이 웹 브라우저 선택에 있어서 단순히 기능뿐만 아니라 윤리적인 측면을 고려하도록 독려하는 흥미로운 관점을 제공함.

        Hacker News 의견

     * 한 사용자는 작년에 파이어폭스로 전환했으며, 크롬과 성능 차이를 느끼지 못함. IRS 사이트가 크롬에서 작동하지 않아 파이어폭스로 세금 신고를 해야 했던 경험을 계기로 완전히 전환함.
     * 애플 생태계에 있는 또 다른 사용자는 파이어폭스가 매력적이지 않다고 느낌. 데스크탑에서 파이어폭스를 사용하려 시도했지만, 설정 변경과 느린 속도 때문에 만족하지 못함. 연구 프로젝트에서 파이어폭스가 대규모 그래프 처리에 어려움을 겪었으며, 사파리가 더 나은 성능을 보임.
     * 구글을 계속 사용하면 결국 제3자의 인증 없이는 인터넷을 탐색할 수 없게 될 것이라는 우려를 표함.
     * 한 사용자는 크롬 사용을 중단하고 파이어폭스로 전환했으며, 안드로이드에서의 파이어폭스 성능에 만족함. 브라우저의 모든 것을 제어할 수 있는 능력을 높이 평가함.
     * 파이어폭스를 주 브라우저로 사용하는 사용자는 여전히 크롬을 설치해야 하지만, 크롬 사용자는 파이어폭스를 설치할 필요가 없다는 점을 지적함. 파이어폭스가 크롬과의 호환성을 개선해야 한다고 주장함.
     * 파이어폭스가 과거에는 더 나은 브라우저였지만, 현재는 사파리가 배터리 수명과 프라이버시 측면에서 더 나은 선택으로 보임.
     * 파이어폭스가 PWA(Progressive Web Apps)를 구현하지 않기로 결정했기 때문에 한 사용자는 파이어폭스로 전환하지 않음.
     * 파이어폭스의 Pocket ""리디자인""이 사용자에게 적대적이라고 느끼는 사용자가 있음. 업데이트로 인해 사용성이 크게 저하됨.
     * macOS 사용자는 파이어폭스가 macOS 플랫폼에 대한 지원을 충분히 제공하지 않아 사용을 중단함. macOS에서의 사용 경험이 좋지 않음.
     * 파이어폭스가 미국 사용자의 DNS 조회를 Cloudflare로 전환한 것에 대해 비판하는 사용자가 있음. 이 결정이 사용자의 동의 없이 이루어졌으며, Cloudflare의 프라이버시 보호에 대한 신뢰성에 의문을 제기함.
"
"https://news.hada.io/topic?id=12533","차량 브랜드별 결함 분석: 테슬라, 꼴찌로 다시아 대체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     차량 브랜드별 결함 분석: 테슬라, 꼴찌로 다시아 대체

정기적인 서비스가 차이를 만든다

     * 현대 자동차는 최소한의 여유 공간, 활성 후드, 새로운 재료, 새로운 구동 기술 등을 통해 안전, 배출가스, 편안함, 고객 요구 사항을 극한까지 밀어붙임.
     * 독일 도로 위의 차량들은 안전하며, 이는 TÜV-Verband가 발표한 새로운 TÜV 보고서 결과로 새롭게 확인됨.
     * 중대한 결함 비율은 0.3% 포인트 증가한 20.5%로, 테슬라가 다시아를 밑도는 결과를 보여줌.

차량 소유주들은 신뢰할 수 있는 차량 유지 관리

     * 폭스바겐, 마쓰다, 메르세데스, 아우디 등의 브랜드는 서비스 센터 네트워크가 잘 구축되어 있으며, 이들 차량은 정기적인 서비스 필요성을 운전자에게 자동으로 알림.
     * 전문 정비소에서의 서비스는 차체, 전기 시스템, 엔진, 변속 시스템 검사 및 오일 교환을 포함함.

전기차에는 오일 교환이 필요 없음

     * 테슬라는 2019년 서비스 간격을 정의하지 않고 서비스 센터 네트워크가 잘 구축되어 있지 않음.
     * 테슬라는 원격 진단과 공중을 통한 업데이트에 의존하며, 테슬라 모델 3는 평균 결함률 14.7%로 최하위를 기록함.

정체된 자동차 시장

     * 인플레이션, 높은 이자율, 디젤 차량 금지 등으로 인해 많은 운전자들이 새 차량 구매 대신 기존 차량을 계속 사용하는 경향이 있음.
     * 독일 도로 위 차량의 평균 연령은 10년으로 새로운 최고치에 도달함.

테슬라, 다시아를 최하위에서 밀어내다

     * 테슬라 모델 3는 다시아 로건을 제치고 중대한 결함 비율에서 최하위를 기록함.

오펠 칼, ""미니"" 카테고리에서 최고

     * 오펠 칼은 ""미니"" 카테고리에서 가장 낮은 결함 비율을 기록함.

작센, 가장 낮은 결함 비율을 기록한 TÜV SÜD 지역

     * 독일의 여러 주를 대상으로 한 분석에서 작센이 가장 낮은 결함 비율을 보임.

   GN⁺의 의견
     * 이 기사는 정기적인 차량 유지 관리의 중요성을 강조하며, 특히 전기차량의 유지 관리에 대한 일반적인 오해를 해소하는 데 중요함.
     * 테슬라 모델 3의 예상치 못한 낮은 성능은 전기차량에 대한 서비스 네트워크의 중요성을 부각시키며, 전기차량도 정기적인 서비스가 필요하다는 점을 시사함.
     * 차량의 평균 연령이 증가함에 따라, 오래된 차량의 안전성과 신뢰성이 더욱 중요해지고 있으며, 이는 중고차 시장에도 영향을 미칠 수 있음.

        Hacker News 의견

     * 테슬라의 산업 경험 부족

     테슬라가 기존 자동차 산업의 수십 년 경험을 갑자기 새로운 기술과 정부 보조금으로 대체할 수 없음을 지적. 신생 기업들이 자동차 제작에 필요한 요소들을 재발견하고 있으며, 새로운 구동 시스템만으로는 부족함을 강조.
     * 테슬라 모델 3 소유자의 불만

     테슬라 모델 3 소유자가 저품질 부품과 제작 품질에 대한 불만을 표현. 소프트웨어도 마찬가지로 실망스러움을 나타냄.
     * 정기 검사 중 발견된 결함에 대한 해석

     정기 검사에서 발견된 결함이 반드시 품질 문제를 의미하는 것은 아니며, 테슬라와 같이 유지보수 간격이 긴 차량에서는 더 많은 결함이 발견될 수 있음을 설명.
     * 테슬라 차량의 신뢰성 문제

     테슬라의 구동 시스템과 배터리는 신뢰할 수 있지만, 그 외의 부분에서 제작 품질이나 소음 문제가 발생하여 서비스 센터 방문이 잦음을 경험담을 통해 전달.
     * 테슬라 차량 소유자의 긍정적 경험

     4대의 테슬라 차량을 소유한 경험에서 심각한 문제가 없었으며, 발생한 문제는 즉시 해결됨. 네덜란드에서는 모든 차량에 대한 정기 검사가 의무적이며, 테슬라 차량의 품질이 점차 개선되고 있음을 언급.
     * 모델 Y 소유자의 경험

     모델 Y의 소프트웨어 품질, 내비게이션, 조향 보조 기능에 대한 만족도를 표현. 그러나 테슬라에 대한 신뢰 문제, 배터리 주행 거리, 가격 인하, 차량의 소음 문제 등에 대한 불만을 제기.
     * 서비스 간격 부재에 대한 불만

     모델 Y 소유자가 정기적인 서비스 간격이 없어 차량의 안전과 신뢰성을 유지하기 위한 서비스를 받지 못하는 것에 대한 불만을 표현.
     * 테슬라 TÜV 검사의 결함 문제

     테슬라 차량의 TÜV 검사에서 발견되는 결함 대부분이 브레이크 디스크의 표면 부식과 관련되어 있으며, 이는 재생 에너지를 과도하게 사용함으로써 발생. 독일에서는 이러한 문제가 검사 불합격의 원인이 됨을 지적하고 소프트웨어 업데이트를 통한 해결책을 제안.
     * 테슬라의 서비스 센터 부족 문제

     테슬라가 서비스 센터가 부족하여 차량의 문제를 적절히 수리하지 못한다는 비판을 제기. OTA(Over-The-Air) 업데이트로는 해결할 수 없는 문제들이 존재함을 언급.
     * 독일에서의 차량 유지보수 관행

     이웃 국가에서는 차량을 정기적으로 서비스 센터에 가져가 유지보수를 받는 관행이 있으며, 이를 통해 공식 검사에서 불합격하지 않도록 함. 테슬라의 경우 이러한 관행이 적용되지 않는지, 운전자가 모든 교체 시기를 알아야 하는지에 대한 의문을 제기.
"
"https://news.hada.io/topic?id=12532","웹사이트에 꼭 추가해야할 3가지 최신 CSS 속성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      웹사이트에 꼭 추가해야할 3가지 최신 CSS 속성

color-scheme

     * 웹사이트가 다크 모드를 지원함에도 스크롤바가 하얀색으로 밝게 빛나는 문제가 있음
     * color-scheme 속성을 dark light로 설정하면 브라우저에게 페이지가 다크 모드와 라이트 모드를 모두 처리할 수 있음을 알리고, 스크롤바도 어두워짐
     * 메타 태그를 사용하여 문서에 color-scheme을 적용할 수 있으며, 이는 CSS를 로딩하기 전에 브라우저가 사용자의 선호도를 알 수 있게 함
     * prefers-color-scheme 미디어 기능과 함께 사용하면 사용자의 선호에 따라 변경할 부분을 완벽하게 제어할 수 있음
     * :has() 선택자를 사용하여 body에 dark 클래스가 있을 때 루트 요소에 color-scheme 속성을 적용할 수 있음

text-wrap

     * 제목이나 캡션의 줄바꿈이 이상하게 되어 마지막 줄에 단어 하나만 오는 경우가 있음
     * text-wrap 속성에 balance 값을 사용하면 웹사이트의 제목을 균형 있게 만들 수 있음
     * 이 기능은 브라우저에 구애받지 않으며, 현대적인 설정에서 잘 작동하면서 오래된 설정에서도 우아하게 성능이 저하됨

Scroll-margin

     * 웹페이지에서 앵커 링크를 사용할 때, 고정된 헤더 때문에 대상 요소가 가려지는 문제가 발생함
     * scroll-margin CSS 속성을 사용하여 scroll-margin-top 값을 고정 헤더의 높이에 맞추면 이 문제를 해결 가능
     * :is 선택자를 사용하여 h2, h3, h4 등 여러 요소에 대해 동일한 처리를 적용할 수 있으며, ex나 lh와 같은 단위를 사용하여 동적 간격을 설정할 수 있음

   이건 정말 꿀팁이네요 감사합니다

   스크롤바 좋네요

   스크롤바 하얀색은 많이 튀네요. 긱뉴스에도 dark light로 바로 적용했습니다. 쉬운 방법이 있었군요

   네이버랑 비교해보니 차이가 크네요. 네이버도 못(?)하는 걸 긱뉴스가 해냈습니다...!
"
"https://news.hada.io/topic?id=12552","Heynote - 개발자를 위한 전용 연습장(Scratchpad)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Heynote - 개발자를 위한 전용 연습장(Scratchpad)

     * 맥/윈/리눅스 지원 오픈소스
     * 여러개의 블록으로 구성된 1개의 크고 영구적인 텍스트 버퍼
     * 하나의 문서로 보이지만, 블록내에서만 편집하는게 가능
          + ⌘-Enter로 새 블록 생성, ⌘-A는 블록내의 전체 내용 선택
          + ⌘-↑↓로 블록간 이동
     * 각 블록당 다른 언어로 Syntax Highlighting 및 자동 포맷 지원 ⌘-L
     * Math 블록은 간단한 자동 계산 기능을 제공. 기본 연산 및 변수, 함수, 단위/통화 변환
     * 멀티 커서 편집 지원 : ⌘ + ⌥ + ↑↓ 로 위 아래에 커서 추가
     * 기본 또는 Emacs와 비슷한 키바인딩 지원
     * CodeMirror + Vue + Electron + Math.js + Prettier

   dropbox나 onedrive 동기화 될 수 있게 파일 저장 위치 옮기는 기능이 추가되었네요!
   폴더 경로 설정 하고 편집한 번 하면 설정된 폴더에 텍스트 파일이 하나 생깁니다.

   괜찮네요. 쓰다보니 Kotlin하고 Swift가 없길래 작업해서 PR 보냈는데, 막 merge 해줬네요

   쓸만해 보입니다.
   저는 블록 별로 빨리 찾아가는 기능과 vim 입력이 있으면 주력으로 사용 할 수 있겠네요.

   Keep in Dock!

   좋네요!! vim 에디터 기능만 지원해주면 좋겠는데;

   폰트도 바꿀 수 있으면 좋을 것 같네요 (고정폭 ㅜㅜ)

   https://github.com/heyman/heynote/pull/33
   곧 추가될 것 같네요!

   좋은거 소개 감사합니다

   Jupyter Notebook이 떠오르네요.

   너무 마음에 드는군요..
   흩어져 있던 메모들은 이제 하나로 어셈블 할수 있을듯한..

   와 이거 너무 좋네요. 저도 맥에 바로 Keep In Dock 시켰습니다. 윈도우에서도 계속 쓰게 될듯
   코드를 실행하는 기능등이 추가되면 정말 편할것 같고,
   텍스트 형태라 기본 버퍼 저장 위치만 드랍박스같은 곳으로 옮기게만 해줘도 동기화는 가능할듯 (1.50 부터는 symlink 지원될 예정이라고 합니다)
   오픈소스라 앞으로 잘 발전할 것 같아요.

   개발자용 노트북에 Numi - 깔끔한 맥용 계산기 앱 같은게 결합된거도 좋네요
"
"https://news.hada.io/topic?id=12494","유튜브의 규모는 얼마나 될까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            유튜브의 규모는 얼마나 될까?

   이 요청에 대한 내용을 요약할 수 없음. 제공된 기사의 내용이 ""403 Forbiddennginx""라는 오류 메시지로, 실제 기사의 내용이 아닌 접근 권한이 없음을 나타내는 HTTP 상태 코드임. 이는 일반적으로 웹 서버가 요청을 이해했지만, 그 요청을 수행할 권한이 없을 때 발생하는 오류임.

GN⁺의 의견

     * ""403 Forbidden"" 오류는 웹 개발자나 시스템 관리자에게 익숙한 문제로, 권한 설정이나 서버 구성 오류로 인해 발생할 수 있음.
     * 이 오류 메시지는 사용자가 웹사이트의 특정 부분에 접근하려 할 때 서버가 접근을 거부했음을 의미함.
     * 이러한 오류는 웹 보안과 관련이 깊으며, 사용자가 적절한 권한 없이 민감한 정보에 접근하는 것을 방지하는 중요한 기능임.

        Hacker News 의견

     *
          + 이것은 샘플링을 하는 매우 영리한 방법이며, 저자들에게 박수를 보낸다. Pew에서 일할 때 YouTube를 API의 ""관련 동영상"" 엔드포인트를 통한 무작위 탐색으로 매핑하려고 시도했었는데, 1년 후에 포화 상태에 도달한 것처럼 보였다. 그러나 여기서 설명한 크기는 레이더 아래에서 날아가는 긴 꼬리가 있다는 것을 시사한다. 우리가 연구를 발표한 직후 Google은 API를 거의 즉시 잠그기 시작했지만, 사람들이 여전히 구식 스크래핑으로 연구를 추구하는 것을 보니 기쁘다. 우리의 분석은 채널 수준에서 이루어졌고 인기 있는 채널에만 초점을 맞췄지만, TubeStats의 일부 수치가 우리가 발견한 것과 상당히 가깝다는 것이 흥미롭다(예: 언어 분포).*
          + 영리한 샘플링 방법에 대한 칭찬과, Pew에서의 유사한 연구 경험 공유
          + Google이 API 접근을 제한했지만, 스크래핑을 통한 연구가 계속되는 것에 대한 긍정적인 반응
          + 자신의 연구와 TubeStats의 데이터가 유사한 점에 대한 언급
     *
          + 이것은 독일 탱크 문제에 대한 완화 공격 방법으로 흥미롭다. 최적의 해결책은 주소 공간을 늘려 무작위 샘플이 통계적으로 유의미한 결론에 도달하는 데 필요한 데이터를 수집하는 것을 방지하는 것일 것이다. 다른 좋은 해결책도 있겠지만, 진정으로 무작위 샘플은 그런 방향을 제한할 것이다.*
          + 독일 탱크 문제에 대한 참조와 함께 데이터 수집을 방지하기 위한 주소 공간 확장 제안
     *
          + ""YouTube 싫어요"" 데이터셋을 확인할 것을 추천한다. 이 데이터셋은 싫어요 기능이 제거되기 전에 정보를 수집하기 위한 보관 노력으로 만들어졌다. 이를 사용하여 가장 논란이 많은 동영상, 특정 언어로 설명된 상위 동영상 등을 찾을 수 있다.*
          + YouTube 싫어요 데이터셋을 활용한 분석 가능성에 대한 정보 제공
     *
          + YouTube가 얼마나 많은 데이터를 가지고 있는지 알아보려고 했지만, 그 숫자는 나오지 않았다. 평균 동영상 길이를 500초로, 비트레이트를 400 KB/s로 가정하고, 13억 개의 동영상을 기준으로 2.7엑사바이트를 계산했다. 이는 YouTube가 인기 있는 동영상을 여러 데이터센터에 저장하고, VP9 및 AV1 형식으로 저장한다는 점을 고려하면 저장소에 필요한 양보다 낮은 추정이다. YouTube가 인기 없는 동영상을 압축하거나 다른 형식에서 온디맨드로 트랜스코딩할 가능성이 있지만, 이는 추정치를 높게 만들 수 있으나, 그렇다고 생각하지 않는다.*
          + YouTube 데이터의 양에 대한 추정치 제공 및 저장 방식에 대한 추측
     *
          + Google은 일부 포지션에 대해 YouTube의 확장 문제를 묻곤 했다. 종종 성장하는 분산 인프라에서 로그 데이터를 동기화하는 것에 대한 빅-O 복잡도 질문으로 이어졌다. 결과는 거의 설명할 수 없을 정도로 복잡한 빅-O(f(n)) 함수였다. 재미있었다.*
          + Google 인터뷰 경험을 바탕으로 한 YouTube 확장성 문제에 대한 언급
     *
          + 이 기사의 결과는 다음과 같은 동반 웹사이트이다: TubeStats.org*
          + 기사와 관련된 웹사이트 링크 제공
     *
          + 너무 크다. 어제 밤에 내 전화로 YouTube 앱을 업데이트하라는 알림이 왔다. 문제는 그것이 내 전화에서 실행되는 마지막 버전이라는 것이다. 적어도 웹은 아직 작동한다.*
          + YouTube 앱의 크기와 업데이트 문제에 대한 개인적 경험 공유
     *
          + 이 데이터셋은 재미있다. 논문은 채널 통계에 대해 약간의 잘못된 인상을 준다: 샘플링 경향을 수정하여 구독자 수를 재조정하지 않는다면, 주어진 채널이 나타날 확률이 해당 채널의 공개 동영상 수에 비례하기 때문에 채널 당 동영상 수에 대해 ~1/#로 가중치를 두어야 한다.*
          + 채널 통계에 대한 데이터셋의 오해 가능성과 샘플링 방법에 대한 설명
     *
          + 샘플링 함수는 모든 ""지역 코드""에 동일한 수의 사용 가능한 번호가 포함되어 있다고 가정하는가? 일부 큰 사이트(예: 트위터 등)의 경우, 더 많이 요청되는 데이터를 보유한 샤드는 훨씬 밀도가 낮을 수 있다. 예를 들어, 저스틴 비버가 있는 지역 코드에는 번호가 더 적을 것이다. 이것은 상당히 왜곡될 수 있다.*
          + 샘플링 방법에 대한 의문 제기 및 특정 데이터 샤드의 밀도 차이가 결과에 미치는 영향에 대한 지적
     *
          + 이것은 내가 본 것 중 최고다. Redditmap.social*
          + 특정 웹사이트에 대한 감탄 표현
"
"https://news.hada.io/topic?id=12582","30년 전에 사용했던 IDEs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            30년 전에 사용했던 IDEs

30년 전에 가졌던 IDE들... 그리고 우리가 잃어버린 것들

     * 1980년대 후반에서 1990년대 초반에 프로그래밍을 배우기 시작했던 경험.
     * 당시의 하드웨어 제약에도 불구하고 인상적이었던 순수 텍스트 기반 IDE들.
     * Windows가 PC 산업을 잠식하기 전의 텍스트 모드 편집기들과 현재의 IDE 비교.

첫 편집기와 TUI들

     * 1990년대 대부분의 DOS 프로그램은 전체 화면 텍스트 사용자 인터페이스(TUI)를 사용.
     * MS-DOS 편집기(EDIT.COM)는 메뉴 바, 대화 상자, 단축키 상태 바를 포함한 풍부한 인터페이스 제공.
     * 각 프로그램은 고유한 인터페이스를 가졌지만, 사용성과 발견성에 큰 지장이 없었음.
     * SideKick Plus와 같은 개인 정보 관리(PIM) 시스템은 TSR 프로그램으로, Ctrl+Alt를 눌러 언제든지 호출 가능.

Borland Turbo 시리즈

     * Borland Turbo 시리즈는 언어별로 특화된 강력한 전체 화면 TUI를 가진 IDE였음.
     * Turbo C++는 구문 강조, 컴파일러 통합 및 진단, 통합 프로젝트 및 빌드 시스템 관리, 디버거, 전체 참조 매뉴얼 등을 제공.
     * 1990년대 초반에 이미 이러한 기능들을 제공했음.

당시의 리눅스는 어떠했나?

     * 초기 리눅스에서는 대부분의 프로그램이 텍스트 기반으로, 전체 화면 TUI를 제공하지 않았음.
     * Vim과 Emacs는 강력했지만, Borland IDE 제품군처럼 직관적이고 통합된 경험을 제공하지는 못했음.

현대의 TUI IDE들

     * RHIDE는 Borland Turbo C++ 환경과 매우 유사하지만, DOS 전용이며 개발이 중단된 상태.
     * Free Pascal과 QB64는 오래된 경험을 현대적인 코드베이스로 제공하지만, 오늘날 관심을 끌지 못하는 언어를 사용.

""진짜"" 현대 콘솔 IDE들

     * Neovim, Doom Emacs, Helix 등은 강력하지만, Borland 제품들이 제공했던 경험과는 다름.
     * GNU Nano는 IDE가 아니며, 과거의 워드 프로세서 경험을 연상시킴.

TUI IDE가 왜 중요한가?

     * 원격 기계에서 작업할 때 TUI IDE가 그래픽 OS보다 우수할 수 있음.
     * VSCode의 원격 확장 기능은 오픈 소스가 아니며, 일부 OS에서는 작동하지 않음.
     * 자원 소비가 적음.

곳곳에 있는 ""부풀기""

     * Borland Turbo C++는 설치 후 9MB 미만이며, 640kb의 RAM에서 실행됨.
     * 현대의 IDE는 더 나은 리팩토링 도구와 기능을 제공하지만, 근본적으로 많이 변하지 않았음.
     * AI 보조 코딩이 새로운 차이점을 제공할 수 있음.

GN⁺의 의견

     * 이 글은 30년 전의 IDE와 현재의 개발 환경을 비교하며, 과거의 기능들이 현대에 어떻게 다시 등장하고 있는지를 탐구함.
     * 특히, 과거의 TUI 기반 IDE들이 제공했던 통합된 개발 환경과 직관적인 사용자 경험은 오늘날의 많은 IDE들이 여전히 따라잡지 못하는 부분임.
     * 이 글은 소프트웨어 개발의 역사에 대한 향수를 자극하고, 현대의 개발 도구들이 어떻게 발전해 왔는지에 대한 통찰력을 제공함.

   만약 마스터 부트섹터를 코딩하려 한다면 여전히 터보C가 유효하죠...디스크 한 구석에 보관하고 안꺼내본지가 몇십년 째인지 ㅋㅋ

   Borland Turbo 오랜만에 보네요 ㅎㅎ

   아 추억이네요.

   여기에 포함되지는 않았는데, 91년에 나왔던 Visual Basic for DOS 가 그 시절엔 진짜 충격적이었습니다.
   https://winworldpc.com/product/microsoft-visual-bas/10-for-dos

   TUI인데, GUI에서 보던 각종 컨트롤들을 포함하고 있어서, TUI앱을 엄청 쉽게 만들수 있었어요.
   30년이 지난 지금도 이것처럼 TUI 개발을 쉽게 해주는 도구는 거의 못본듯

        Hacker News 의견

     * Visual Basic 6의 속도와 효율성

     한 사용자는 Visual Basic 6가 제공하는 데스크탑 GUI 개발의 속도와 효율성을 현대의 웹 및 모바일 개발 도구들이 따라잡지 못하고 있다고 지적함. VB6로 할 수 있었던 작업들이 왜 현재로서는 더 느리게 진행되는지 의문을 제기함.
     * Metrowerks CodeWarrior의 추억

     다른 사용자는 29년 전 출시된 Metrowerks CodeWarrior를 회상하며, 당시 받았던 티셔츠를 오랫동안 입었다고 언급함. CodeWarrior IDE가 DOS 화면보다 훨씬 사용하기 쉬웠다고 회고함.
     * Turbo Pascal 7.0 IDE의 강력한 기능

     Turbo Pascal 7.0 IDE가 제공했던 강력한 기능들에 대해 설명함. 객체지향 프로그래밍(OOP) 트리, 인라인 및 외부 어셈블러 코드 편집, 레지스터 창 등이 포함되어 있었으며, 이는 당시의 IBM PC에서도 작동할 수 있었던 완전한 개발 및 디버깅 환경을 제공했음.
     * Turbo Pascal에 대한 애정

     한 사용자는 Turbo Pascal에 대한 애정을 표현하며, 인터넷이 크게 활성화되기 전에는 매뉴얼과 책, 잡지, BBS 등을 통해 문제를 해결하고 지식을 습득해야 했다고 회상함. 현재는 문제가 생기면 구글링하거나 라이브러리를 사용하지만, 과거에는 스택의 대부분을 이해할 수 있었다고 언급함.
     * VSCode와 TUI IDE의 비교

     한 사용자는 TUI(Text-based User Interface) IDE가 원격 작업에 더 적합하다고 주장하지만, 다른 사용자는 VSCode가 원격 서버에서 작업할 때 훨씬 더 편리했다고 반박함. VSCode의 웹 기반 구조 덕분에 프론트엔드를 로컬 컴퓨터에서 실행하면서 백엔드를 원격으로 실행할 수 있어, 대부분의 작업이 더 빠르고 효율적이라고 설명함.
     * Eclipse의 미평가된 가치

     Eclipse가 전체적인 기능을 갖춘 IDE임에도 불구하고 종종 간과된다고 지적함. Eclipse는 VSCode보다 적은 리소스를 사용하면서도 다양한 도구를 실행할 수 있으며, 코드 작성부터 git, CI/CD, 원격 개발까지 다룰 수 있다고 언급함.
     * Visual Studio와 Jetbrains IDE의 Borland 계승

     Borland 도구의 현대적 후계자로 Visual Studio와 Jetbrains IDE를 꼽으며, 이들이 디버깅에 초점을 맞춘 포괄적인 설계를 가지고 있다고 평가함. 현대 FAANG 스타일 개발의 터미널 기반 접근이 도구 개발을 저해했다고 생각하지만, 이를 경험하지 않은 사람들에게 설명하기 어렵다고 느낌.
     * Delphi의 황금기

     Delphi가 Borland 도구 중 최고점이었다고 주장하며, Electron을 사용한 GUI 개발이 쉽다는 말을 들을 때마다 Delphi의 전성기를 경험했으면 좋겠다고 바람. YouTube에서 Delphi의 간단한 데모를 볼 수 있다고 함.
     * BRIEF 개발 환경의 우수성

     BRIEF가 IDE는 아니었지만 프로그래밍 편집기로서 소프트웨어 개발에 매우 훌륭했다고 회고함.
     * Neovim에 대한 충성

     Neovim의 사용자 정의 가능성, 모달 방식, 오픈소스 특성을 높이 평가하며, VSCode나 다른 IDE가 제공하는 기능이 Neovim을 능가한다 해도 전환하지 않을 것이라고 강조함. 소프트웨어 엔지니어링 경험을 통해 사람마다 다른 작업 흐름을 선호한다는 것을 배웠으며, 각자가 원하는 도구로 자신만의 작업 환경을 구축하게 해주는 것이 중요하다고 믿음.

   uscd-pascal의 통합 개발환경도 훌륭했는데...(응?)

   애플 파스칼은 심지어 OS까지 통합되어 있었죠.

   어르신! (저도 애플 파스칼 생각했...)
"
"https://news.hada.io/topic?id=12592","Little File Explorer - 안드로이드 1.0+ 기기에서 사용가능한 파일 매니저 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Little File Explorer - 안드로이드 1.0+ 기기에서 사용가능한 파일 매니저 오픈소스

     * 호환성을 염두에 두고 개발한 작고, 간단한 파일 탐색기 (40KB)
     * 기본 파일 관리(Cut,Copy,Paste,Rename,Delete)
     * 파일 이름 필터, 이름/시간 정렬
     * SDCard 와 내부 저장소간 쉬운 스위치
     * 멀티 파일 공유
     * 다크모드 지원
"
"https://news.hada.io/topic?id=12602","M3 MacBook 업그레이드 여부 결정을 위한 개발자 빌드 시간 추적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                M3 MacBook 업그레이드 여부 결정을 위한 개발자 빌드 시간 추적

M3 맥북 업그레이드의 가치는 무엇인가?

     * M1/M2 칩에서 M3로 개발자 기계를 업그레이드하는 것이 가치가 있는지 알아보기 위함.
     * 개발자 생산성을 정량화하는 것은 어려움.
     * 빠른 피드백 루프가 개발자의 효율성을 높임.

빌드 텔레메트리 수집

     * Go 핫 리로더를 사용하여 개발자 노트북에서 빌드 텔레메트리 추적.
     * 시스템 차원, 런타임 메트릭, 빌드 텔레메트리 등을 추적하기 위해 자체 빌드 도구 개발.
     * 데이터 웨어하우스로 텔레메트리 이벤트 전송.

데이터 분석

     * 고품질 데이터를 생성하고 충분한 데이터셋을 구축한 후 분석 시작.
     * 빌드 시간이 시스템마다 다르게 나타날 수 있으므로 단순 평균 비교는 불가능.
     * OpenAI의 새로운 코드 해석기를 사용하여 데이터 분석.

OpenAI 어시스턴트 생성

     * 데이터를 CSV로 내보내고 OpenAI 어시스턴트에 제공하여 분석.
     * gpt-4-1106-preview 모델을 사용하여 데이터 분석.

데이터 정제 (전원 출처, 취소 등)

     * 실패하거나 취소된 빌드 제외.
     * 배터리 전원에서 실행되는 빌드는 성능 저하 가능성으로 AC 전원에서 실행된 빌드만 고려.

모든 빌드가 동일하지 않음

     * Go 프로젝트는 다양한 '패키지'로 구성되어 있으며, 컴파일러는 변경 사항이 있는 경우에만 재컴파일.
     * 빌드 시간은 즉각적(<3초), 빠름(<30초), 중간(30초-1분), 느림(1분+)으로 분류됨.

M1과 M2 비교

     * AC 전원과 성공적인 빌드 데이터를 정제한 후 M1과 M2 플랫폼 비교.
     * M2 Max가 M1 Pro보다 빌드 속도에서 월등히 빠름.

M3 내부 비교

     * M2 Pro 16GB와 M2 Max 32GB의 빌드 시간 비교를 통해 메모리가 큰 영향을 미치지 않음을 확인.
     * M3 Pro와 M3 Max의 성능 차이가 가격 차이를 정당화하지 못함.

M1, M2, M3 종합 비교

     * M1, M2, M3 플랫폼 간 빌드 시간 비교를 통해 M2가 M1에 비해 큰 향상을 보임.
     * M3는 M2에 비해 소폭 개선됨.

메모리가 정말 차이를 만들지 않는가?

     * 메모리가 빌드 시간에 큰 영향을 미치지 않는 것으로 나타남.
     * 링커 시간에 대한 데이터 분석을 통해 메모리가 링킹 성능에 영향을 미침을 확인.

M3 맥북이 오고 있다!

     * 새로운 Space Black M3 Pro 노트북이 개발자의 생산성 향상에 도움이 될 것으로 결정.
     * M1 사용자는 36GB 메모리를 탑재한 M3 Pro로 업그레이드할 예정.
     * M2 사용자는 현재 성능이 좋으므로 업그레이드를 기다림.

GN⁺의 의견

     * 이 연구는 개발자의 빌드 시간을 줄이는 것이 생산성 향상에 직접적인 영향을 미친다는 것을 보여줌.
     * 메모리가 빌드 시간에 큰 영향을 미치지 않지만, 링커 시간에는 영향을 미칠 수 있음을 발견한 것은 흥미로움.
     * OpenAI를 사용한 데이터 분석 방법은 다른 기업이나 개발자들에게도 유용한 사례가 될 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 글이 잘 쓰여졌으며 데이터 수집과 분석 방법이 다양함.
          + 하지만 랩탑을 나란히 두고 동일한 시나리오에서 컴파일 시간을 측정하는 것이 더 간단하고 정확했을 것.
          + 회사 전체 통계를 수집하는 것은 편향을 초래할 수 있음. 예를 들어, 신입 직원과 오래된 직원이 사용하는 랩탑의 차이가 있을 수 있음.
          + 샘플링이 완전히 무작위적이고 대표적이지 않을 수 있음을 지적.
     * 두 번째 댓글 요약:
          + 과학자로서 프로그래머들이 데이터를 다루는 방식에 관심이 많음.
          + 아름다운 그래프를 그렸고, ChatGPT를 사용하여 분석을 빠르게 자동화함.
          + 그러나 메모리와 칩 유형에 따른 변동성이 있었음에도 선형 회귀를 사용하지 않음.
          + 히스토그램을 그렸지만 비교하기 어려움. 평균값과 오차 막대를 추가하거나 누적 분포 함수를 사용할 수 있었음.
     * 세 번째 댓글 요약:
          + 개발자 생산성 향상을 위해 새 랩탑 대신 AWS 상에 개발 스택을 오프로딩하는 프로젝트를 진행했던 경험 공유.
          + 이는 여러 해에 걸친 프로젝트였으며, 결국 랩탑을 업그레이드하는 것이 더 나았을 것이라는 결론.
     * 네 번째 댓글 요약:
          + Chromium과 Node.js의 전직 핵심 기여자이자 현재 gRPC Core/C++의 핵심 기여자.
          + 빌드 시간에 크게 신경 쓰지 않음. 중요한 것은 화면 크기와 품질, 저장 장치의 속도.
          + 개인 프로젝트에는 Bazel을 사용하며, CPU 발전보다 빌드 시스템이 더 큰 영향을 미침.
     * 다섯 번째 댓글 요약:
          + iOS 개발에 대한 개인적 연구 결과 공유.
          + M2 Pro와 M1 Pro의 성능 차이가 크지 않음. M3 Pro는 M2 Pro와 비슷한 수준.
          + 결과적으로 사용한 M1 Pro를 구입하여 만족함. 비용 대비 성능이 우수함.
     * 여섯 번째 댓글 요약:
          + AI를 데이터 분석에 사용하는 것에 대한 조언.
          + R이나 Stata와 같은 도구를 사용하는 것이 더 간단하고 재현 가능함.
          + 데이터를 이해하고 생성 메커니즘을 파악하는 것이 데이터 분석에서 가장 어려운 작업.
          + 현재 AI 기술이 이를 수행할 수 있는지에 대한 의문 제기.
     * 일곱 번째 댓글 요약:
          + 개발자들이 로컬 랩탑에서 전체 환경을 실행할 수 있는 것이 큰 성과.
          + 회사에서 전체 시스템을 단일 기계에서 실행할 수 있는 경험은 드물다고 언급.
     * 여덟 번째 댓글 요약:
          + 글의 저자로부터의 댓글.
          + Go 컴파일 프로파일링, 핫-리로더 구축, AI를 사용한 빌드 데이터셋 분석 등에 대한 내용.
          + M1에서 M3 Pro로 업그레이드하는 것이 가치가 있다고 결론 내림. M2와 M3의 차이는 크지 않아 업그레이드할 가치가 없음.
     * 아홉 번째 댓글 요약:
          + 데이터를 CSV로 내보내고, 목적을 설명하는 프롬프트와 함께 '어시스턴트'를 생성하는 과정에 대한 설명.
          + Microsoft가 Excel에 이 과정을 통합하면 큰 변화가 될 것이라는 의견.
     * 열 번째 댓글 요약:
          + M3 Pro가 M2보다 약간 더 나은 성능을 보이며, M1 Pro보다는 훨씬 더 나음.
          + M3의 성능 대비 전력 효율과 렌더링 성능이 더 우수하지만, 더 많은 메모리 대역폭을 가진 M3 Ultra가 나올 때까지 업그레이드를 기다리기로 결정.
"
"https://news.hada.io/topic?id=12518","연구: 틱톡 글로벌 플랫폼의 이상 현상이 중국 공산당의 지정학적 목표와 일치 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            연구: 틱톡 글로벌 플랫폼의 이상 현상이 중국 공산당의 지정학적 목표와 일치 [PDF]
"
"https://news.hada.io/topic?id=12577","Ask GN: 이번 주말에 뭐 하시나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   저는 뭔가 하기도 그렇고 안하기도 그래서 조용히 책이나 영화를 보면서, 회고 블로그 글을 쓰려고 합니다!

   SolidJS로 유용할만한 웹 사이트를 만들어보려고 합니다

   송년회 주간으로 정신없는 몇주를 보내서, 이번 주말은 집에서 푹 쉬려고 합니다.

   긱뉴스를 좋아해 주시는 모든 분들 올 한해 고맙습니다.
   즐거운 연말연시 되시기 바랍니다!

   2023년 마지막 송년회가 남았습니다~
   지난 주에는 지인들과 연말 모임하면서 템플릿 하나 받아서 연말회고 했었습니다.
   올해의 음식, 공간, 콘텐츠 등등의 소주제를 돌아가며 얘기하니 1년 되돌아 보는 시간이 되어 좋았어요.

   긱뉴스 분들 좋은 글, 의견들 많이 올려주셔서 올 한해도 열심히 눈팅하며 보냈어요. 고맙습니다.
   즐겁고 뜻깊은 연말연시 보내시길 바랍니다!
"
"https://news.hada.io/topic?id=12573",""오퍼레이션 트라이앵귤레이션: 연구원들의 아이폰을 공격할 때 얻게 되는 것"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ""오퍼레이션 트라이앵귤레이션: 연구원들의 아이폰을 공격할 때 얻게 되는 것""

'Operation Triangulation' 공격 체인

     * 악의적인 iMessage 첨부 파일을 보내어 사용자 모르게 애플리케이션에서 처리함.
     * 이 첨부 파일은 문서화되지 않은, 애플 전용 ADJUST TrueType 폰트 명령어의 원격 코드 실행 취약점 CVE-2023-41990을 이용함.
     * 반환/점프 지향 프로그래밍과 NSExpression/NSPredicate 쿼리 언어로 작성된 다단계를 사용하여 JavaScriptCore 라이브러리 환경을 패치하고 JavaScript로 작성된 권한 상승 익스플로잇을 실행함.
     * JavaScript 익스플로잇은 완전히 읽을 수 없게 난독화되어 있으며 크기를 최소화하고 있음. 약 11,000줄의 코드가 주로 JavaScriptCore와 커널 메모리 파싱 및 조작에 할애됨.
     * JavaScriptCore의 디버깅 기능 DollarVM($vm)을 이용하여 스크립트에서 JavaScriptCore의 메모리를 조작하고 네이티브 API 함수를 실행할 수 있는 능력을 획득함.
     * 구형 및 신형 아이폰 모두를 지원하도록 설계되었으며, 최신 모델의 취약점을 이용하기 위한 Pointer Authentication Code(PAC) 우회를 포함함.
     * XNU의 메모리 매핑 시스템 호출(mach_make_memory_entry 및 vm_map)의 정수 오버플로 취약점 CVE-2023-32434을 이용하여 사용자 수준에서 장치의 전체 물리 메모리에 대한 읽기/쓰기 접근을 획득함.
     * 하드웨어 메모리 매핑 I/O(MMIO) 레지스터를 사용하여 Page Protection Layer(PPL)를 우회함. 이는 CVE-2023-38606으로 완화됨.
     * 모든 취약점을 이용한 후 JavaScript 익스플로잇은 장치에서 원하는 작업을 수행할 수 있으며, 스파이웨어를 실행하는 대신 IMAgent 프로세스를 시작하고 장치에서 익스플로잇 흔적을 지우는 페이로드를 주입하거나 Safari 프로세스를 보이지 않는 모드로 실행하여 다음 단계가 있는 웹 페이지로 전달함.
     * 웹 페이지에는 피해자를 확인하는 스크립트가 있으며, 검사를 통과하면 다음 단계인 Safari 익스플로잇을 받음.
     * Safari 익스플로잇은 CVE-2023-32435를 사용하여 쉘코드를 실행함.
     * 쉘코드는 Mach 객체 파일 형태의 또 다른 커널 익스플로잇을 실행함. 이는 CVE-2023-32434 및 CVE-2023-38606과 동일한 취약점을 사용함. 크기와 기능 면에서 방대하지만 JavaScript로 작성된 커널 익스플로잇과는 완전히 다름. 관련된 부분은 두 익스플로잇이 공유하지만, 대부분의 코드는 커널 메모리 파싱 및 조작에 할애됨. 다양한 사후 침투 유틸리티를 포함하고 있으나 대부분 사용되지 않음.
     * 익스플로잇은 루트 권한을 획득하고 스파이웨어를 로드하는 다른 단계를 실행함.

미스터리와 CVE-2023-38606 취약점

     * 최근 아이폰 모델에는 커널 메모리의 민감한 영역에 대한 추가적인 하드웨어 기반 보안 보호 기능이 있음.
     * 이 보호 기능은 공격자가 커널 메모리를 읽고 쓸 수 있게 되더라도 장치를 완전히 제어할 수 없도록 방지함.
     * 공격자는 애플이 설계한 SoC의 또 다른 하드웨어 기능을 사용하여 이 하드웨어 기반 보안 보호를 우회함.
     * 공격자는 데이터, 목적지 주소, 데이터 해시를 펌웨어에서 사용하지 않는 칩의 알려지지 않은 하드웨어 레지스터에 쓰는 방식으로 하드웨어 기반 메모리 보호를 우회함.
     * 이 알려지지 않은 하드웨어 기능은 아마도 애플 엔지니어나 공장에서 디버깅이나 테스트 목적으로 사용하려고 의도했거나 실수로 포함된 것으로 추정됨.

기술적 세부 사항

     * SoC에 있는 다양한 주변 장치는 CPU가 이 장치들을 작동시키기 위해 사용할 수 있는 특수 하드웨어 레지스터를 제공함.
     * 이러한 하드웨어 레지스터는 CPU가 접근할 수 있는 메모리에 매핑되어 있으며, ""메모리 매핑 I/O(MMIO)""로 알려져 있음.
     * 애플 제품(iPhone, Mac 등)의 주변 장치 MMIO 주소 범위는 DeviceTree라는 특수 파일 형식에 저장됨.
     * 공격에 사용된 대부분의 MMIO는 DeviceTree에 정의된 어떠한 MMIO 범위에도 속하지 않음.
     * 공격자가 펌웨어에서 사용하지 않는 MMIO를 어떻게 알아냈는지, 어떤 주변 장치가 이 MMIO 주소에 속하는지는 불명확함.
     * 이 MMIO 레지스터들은 GPU 코프로세서에 속하는 것으로 확인됨.
     * 공격자들은 이 MMIO 레지스터들을 사용하여 Page Protection Layer(PPL)를 우회하고, 페이지 테이블 항목을 패치하는 데 사용함.
     * 해시 계산 방법은 공격에 사용된 하드웨어 기능이 데이터를 요청된 위치에 직접 메모리 액세스(DMA) 작업을 수행하도록 함.

GN⁺의 의견

     * 이 연구는 아이폰을 대상으로 한 매우 정교한 공격 체인을 밝혀냄. 이는 보안 연구자들에게 매우 중요한 발견이며, 애플 제품의 보안을 강화하는 데 기여할 수 있음.
     * 공격자들이 펌웨어에서 사용되지 않는 하드웨어 기능을 어떻게 알아냈는지는 여전히 미스터리로 남아 있음. 이는 하드웨어 보안 연구의 중요성을 강조함.
     * 이 글은 소프트웨어 및 하드웨어 보안에 관심 있는 사람들에게 매우 흥미로운 내용을 제공함. 고도로 복잡한 공격 방법과 이를 분석하는 과정은 보안 연구의 깊이와 필요성을 보여줌.

        Hacker News 의견

     * MMIO 남용에 대한 놀라운 점
          + 공격자들이 매우 뛰어난 연구 능력을 가지고 있거나, 더 가능성이 높게는 애플을 해킹하여 내부 하드웨어 문서를 획득했을 것임.
          + 애플은 해당 기능이 위험하다는 것을 알고 있었으며, 이를 숨기고 디지털 서명 기능으로 추가 보호했음.
          + 실리콘 분해와 역공학 없이는 이 기능을 찾는 것이 불가능하므로, 개발자를 해킹하여 내부 문서를 훔칠 가능성이 있음.
          + 사파리를 통해 다른 취약점 체인을 사용하여 재해킹하는 방식은 내부적으로 매우 분리된 대규모 조직을 시사함.
          + 연구원들이 러시아인이라는 점을 고려할 때, 이는 NSA나 GCHQ의 작업일 가능성이 높음.
          + 맬웨어는 광고 추적을 활성화할 수 있으며, 보안 연구자들이 자주 사용하는 클라우드 iPhone 서비스 호스팅을 감지할 수 있음.
          + iOS/macOS 맬웨어 플랫폼은 10년 이상 개발되어 왔으며, 이미지 바이트를 업로드하지 않고 기기에서 사진의 객체 인식과 OCR을 위해 ML을 사용함.
          + 보안을 통한 은폐가 효과가 없다는 주장에는 동의하지 않음. 이 플랫폼은 10년 동안 알려지지 않고 사용되어 왔음.
     * Steve Weis의 트위터 요약
          + iMessage 취약점은 놀라운데, 90년대부터 존재하는 TrueType 취약점, 2개의 커널 취약점, 브라우저 취약점, 그리고 출시된 소프트웨어에서 사용되지 않은 문서화되지 않은 하드웨어 기능이 포함됨.
     * Coresight에 대한 설명
          + Coresight는 백도어가 아니라 모든 ARM CPU의 디버그 기능임.
          + 애플의 메모리 보호 기능과 함께 작동하기 위해 필요한 Coresight의 확장으로 보임.
          + 공개 문서가 없음에도 수천 명의 애플 엔지니어가 이를 활용할 수 있는 수정된 gdb나 다른 도구에 접근할 수 있을 것임.
     * MMIO 레지스터 발견 가능성에 대한 추측
          + 무작위로 모든 레지스터 주소를 탐색하여 MMIO 레지스터를 발견할 수 있었을 가능성에 대한 질문.
          + 타이밍 차이만으로 유효한 주소임을 알 수 있었을 것이며, 20비트 해시로서 해시도 무차별 대입으로 풀 수 있었을 것임.
     * 칩 디버깅 기능에서 데이터 해시 사용 여부에 대한 의문
          + 생산에서 비활성화되어야 하는 디버깅 기능에서 해시 사용의 목적에 대한 의문.
          + 전자 엔지니어가 아니지만, 디버깅 기능은 간단하고 빠르게 작동하여 간섭을 최소화하는 것이 최선임.
          + 공급망 공격자가 모든 애플 칩에 이를 심을 수 있었을 가능성은 매우 낮음.
     * 해시 알고리즘의 특징에 대한 관찰
          + 모든 데이터가 0일 때 해시 값이 0이고, 단일 비트에 대해서는 sbox 테이블에서 단일 값을 가짐.
          + 이러한 해시 알고리즘은 내부 문서 없이도 역공학이 가능했을 수 있음.
     * 공격자의 노력에 대한 감탄
          + 이러한 공격자들이 자신들의 작업에 대해 인정받지 못하는 것에 대한 불만을 느낄지에 대한 궁금증.
     * 공격자가 이용한 기능에 대한 설명
          + 공격자들은 하드웨어 기반 메모리 보호를 우회하여 특정 물리적 주소에 데이터를 쓸 수 있음.
          + 펌웨어에서 사용되지 않는 칩의 알려지지 않은 하드웨어 레지스터에 데이터, 목적지 주소, 데이터 해시를 쓰는 방식임.
     * 새로 발견된 취약점의 중요성
          + 새로 발견된 취약점을 얻는 것보다 자신의 취약점이 타협될 수 있는지 아는 것이 더 중요함.
          + 반정보 작전을 방지할 수 있음.
"
"https://news.hada.io/topic?id=12613","tbmk - 터미널용 커맨드 북마커 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          tbmk - 터미널용 커맨드 북마커

     * 자주 쓰는 특정 커맨드를 쉽게 저장하고 불러쓸수 있게 해주는 도구
     * Linux bash/zsh, Mac zsh 지원
     * 단어 입력후 ctrl + space 를 눌러서 명령어 검색 가능
     * ctrl + t 로 추가하고 ctrl + d 로 삭제
     * 설정데이터는 ~/.tbmk에 저장

   https://github.com/knqyf263/pet
   저는 이것도 추천 드립니다
"
"https://news.hada.io/topic?id=12504","Color Lisa - 유명 아티스트들의 컬러 팔레트 보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Color Lisa - 유명 아티스트들의 컬러 팔레트 보기

     * 세계 최고의 예술가들의 명작을 바탕으로 엄선된 컬러 팔레트 목록
     * 각 팔레트는 색에 집착하는 디자이너, 예술가, 박물관 큐레이터, 색채 이론의 대가들이 공들여 제작
     * 디자인을 다채롭고 신선하게 유지할 수 있도록 팔레트가 지속적으로 추가 중

팔레트 작품 예시

     * Andy Warhol : Flowers, Marilyn Monroe, Mick Jagger
     * Van Gogh : The Starry Night, Self-Portrait with a Straw Hat
     * Pablo Picasso : Les Demoiselles D'Avignon, The Dream
     * Mondrian : Broadway Boogie Woogie
"
"https://news.hada.io/topic?id=12525","HN 소개: 전자책을 위한 오픈소스, 자체 호스팅 가능한 동기화 내레이션 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HN 소개: 전자책을 위한 오픈소스, 자체 호스팅 가능한 동기화 내레이션 플랫폼

Storyteller: 오디오북과 전자책 자동 동기화 플랫폼

     * Storyteller는 오디오북과 전자책을 자동으로 동기화하는 자체 호스팅 플랫폼임.
     * 이 플랫폼은 EPUB 3 표준을 준수하는 전자책 파일을 생성하여, EPUB 미디어 오버레이를 지원하는 모든 전자책 리더(소프트웨어 또는 하드웨어)로 읽거나 전용 Storyteller 모바일 앱을 사용할 수 있음.
     * Storyteller는 완전히 자체 호스팅되며, 모든 책은 사용자의 하드웨어에 저장되어 필요에 따라 이동, 복사, 백업이 자유로움.

GN⁺의 의견

     * Storyteller는 사용자의 독서 경험을 개선하기 위해 오디오북과 전자책을 쉽게 동기화할 수 있는 플랫폼을 제공함으로써 중요함.
     * 사용자가 자신의 데이터를 완전히 통제할 수 있는 자체 호스팅 기능은 개인 정보 보호와 데이터 소유권에 대한 현대적인 관심사에 부합함.
     * EPUB 3 표준 준수는 사용자가 다양한 디바이스와 소프트웨어에서 책을 읽을 수 있게 하여 호환성과 접근성을 높이는데 기여함.

        Hacker News 의견

     * 유사한 전자책-오디오북 정렬 도구를 과거에 만든 경험이 있음. 당시에는 텍스트 정렬 방식(머신러닝 포함)이 계산 집약적이고 긴 텍스트에 부적합하다고 판단해 텍스트를 합성하고 오디오 시퀀스 두 개를 정렬하는 방식을 선택함. Storyteller가 텍스트를 정렬하는 방식으로 작동하는 것으로 보이는데, 책을 동기화하는 데 얼마나 걸리는지 궁금함. 또한, 오디오와 텍스트 버전이 종종 많이 다른 경우(예: 오디오에는 텍스트에 없는 인트로가 있는 경우)가 있는데, Storyteller가 이런 경우를 어떻게 처리하는지, 수동 오디오/텍스트 편집이 필요한지 아니면 자동으로 차이를 처리하는지 알고 싶음.
          + 과거에 비슷한 오디오북과 전자책을 정렬하는 도구를 만든 경험이 있으며, Storyteller가 텍스트를 정렬하여 동기화하는 시간과 오디오와 텍스트의 차이를 어떻게 처리하는지에 대해 궁금해함.
     * 이 프로젝트를 매우 좋아함. 하지만 아내와 아이들이 코보 전자책 리더기에서 EPUB을 읽기 때문에, 코보에서 마지막으로 읽은 페이지를 Storyteller와 동기화하여 나중에 오디오북에서 이어서 들을 수 있으면 좋겠음. 필요하다면 코보에 koreader를 설치하는 것에도 반대하지 않음. koreader가 epub3 미디어 오버레이를 지원하지 않지만 동기화 기능은 있음.
          + 코보 전자책 리더기를 사용하는 가족을 위해 마지막으로 읽은 페이지를 Storyteller와 동기화하는 기능을 원하며, 이를 위해 koreader 설치도 고려 중임.
     * 이 프로젝트가 정말 인기를 끌고 있음! 여기에 질문하고 피드백을 주신 모든 분들께 감사함. 이 설정을 시도하는 데 시간을 할애하는 사람이 있다면, Gitter 채널에 들어와 인사하거나 지원을 요청하거나 피드백을 주시기 바람.
          + 프로젝트에 대한 관심과 피드백에 감사를 표하며, 사용자들이 Gitter 채널을 통해 지원을 받거나 피드백을 줄 수 있음을 알림.
     * 이 아이디어는 정말 멋짐. 출퇴근 시 오디오북을 듣고 밤에는 읽는데, 현재 audiobookshelf를 사용하여 전자책을 듣고 있음. audiobookshelf가 EPUB을 읽을 수 있는지에 대한 논의에 댓글을 추가함.
          + 출퇴근 시 오디오북을 듣고 밤에는 읽는 사용자로서, audiobookshelf를 사용하고 있으며, 이 서비스가 EPUB을 지원할 수 있는지에 대해 관심을 표함.
     * e-ink 전자책 리더기와 호환되는지 궁금함. 아마존을 벗어나고 싶지만 화면으로 돌아가고 싶지는 않음.
          + e-ink 전자책 리더기와의 호환성에 대해 궁금해하며, 아마존에 대한 대안을 찾고 있음을 나타냄.
     * 프로젝트에 대한 더 많은 정보가 필요함. iOS 앱 링크나 스크린샷, 프로젝트의 기능 등에 대한 정보가 있으면 좋겠음. 이것이 audiobookshelf와 같은 전자책/오디오북 라이브러리인지, 아니면 단순히 동기화 기능만 있는 것인지 궁금함.
          + 프로젝트에 대한 추가 정보를 원하며, 특히 iOS 앱, 스크린샷, 기능 등에 대한 세부사항에 대해 관심을 보임.
     * 프로젝트가 정말 멋짐. AI를 사용하여 오디오를 생성하는 기능이 추가되면 더욱 멋질 것임. Audible을 몇 번이나 탈퇴했는데, 고품질 오디오북이 매우 적고, 저자가 직접 읽은 오디오북조차도 나쁨(대부분 전문 낭독자가 아님). 좋은 AI는 몇 시간 동안 지치지 않고 같은 에너지와 억양, 속도로 말할 수 있기 때문에 놀라울 것임.
          + AI를 사용하여 오디오를 생성하는 기능에 대한 추가가 프로젝트를 더욱 흥미롭게 만들 것이라고 생각하며, 고품질 오디오북의 부족에 대한 해결책으로 AI의 가능성을 언급함.
     * 이 프로젝트는 흥미로움. 과거에 책 내용을 타임스탬프에 맞춰 동기화하고, 말한 단어를 문장으로 나누어 LJSPEECH 데이터셋을 생성하는 비슷한 프로젝트를 진행함. aeneas를 사용했는데 설정이 조금 까다로웠지만, 독일어와 같은 비영어권 언어도 80% 이상의 정확도로 매핑할 수 있었음. LJSPEECH 데이터셋은 좋았지만 당시 TTS 기술은 아직 준비되지 않았음. XTTS와 같은 새로운 모델링 접근 방식을 사용하여 이 프로젝트를 부활시킬 때가 됐을지도 모름.
          + 오디오북과 전자책을 결합하여 사용자가 좋아하는 내레이터의 목소리를 합성하고, 오디오북으로 출판되지 않은 책을 ""출판""할 수 있는 프로젝트를 만든 경험이 있으며, 새로운 TTS 기술을 사용하여 프로젝트를 재개할 수 있을지 고려 중임.
     * 링크를 포함하지 않았음: Storyteller. 전체적으로 매우 멋진 프로젝트이며, 다음 단계는 동기화된 전자책 관리 시스템을 구축하는 것임.
          + Storyteller 프로젝트에 대한 링크를 공유하며, 동기화된 전자책 관리 시스템 구축을 다음 목표로 제시함.
     * 이 기능을 공유해주어 감사함. WhisperSync 기능은 하루에 여러 번 모드를 전환할 수 있게 해주어 많은 독서를 가능하게 하는 게임 체인저임. 이 기능이 아마존/오디블과 같은 독점적이고 DRM이 적용된 플랫폼에만 국한되지 않고 널리 퍼지길 바람.
          + WhisperSync 기능을 높이 평가하며, 이러한 기능이 아마존이나 오디블과 같은 독점적인 플랫폼에만 국한되지 않고 널리 사용될 수 있기를 희망함.
"
"https://news.hada.io/topic?id=12490","'Nursing Home Inspect' 도구로 알아보는 요양원 소유주","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                'Nursing Home Inspect' 도구로 알아보는 요양원 소유주

ProPublica, 요양원 데이터베이스에 소유 정보 추가

     * ProPublica의 Nursing Home Inspect 도구가 요양원의 소유주와 운영 책임자에 대한 자세한 정보를 제공함.
     * 요양원의 질적 관리에 대한 최종 책임자를 파악하기 어려움이 있었으나, 이제 이 도구를 통해 소유주 정보를 확인할 수 있음.
     * 소유주가 다른 요양원에서의 성과를 통해 새로운 요양원의 운영 방향을 예측할 수 있는 중요한 정보를 제공함.

ProPublica의 데이터베이스 업그레이드

     * ProPublica의 데이터베이스는 Medicare & Medicaid Services에서 제공하는 'affiliated entities' 정보를 기반으로 함.
     * 이 데이터베이스는 소유주나 운영자가 관련된 모든 요양원의 성과를 이해하는 데 도움을 줌.
     * 사용자는 각 소유주나 운영자에 대한 데이터를 쉽게 탐색하고, 관련된 요양원과 그곳에서 발견된 심각한 결함을 확인할 수 있음.

개선된 검색 기능

     * 데이터베이스의 고급 검색 기능 확장으로, 기자 및 관심 있는 사람들이 심각한 결함이나 문제가 있는 소유주를 신속하게 식별할 수 있음.
     * F-tags를 사용하여 CMS 검사 중 발견될 수 있는 특정 유형의 준수 문제를 지정할 수 있어, 검색 범위를 좁힐 수 있음.

독립 저널리즘 보호

     * ProPublica는 비영리 뉴스룸으로, 권력을 가진 사람들에게 책임을 묻고 실질적인 변화를 이끌어내는 조사 보도를 제공함.
     * 2008년에 설립되어 저널리즘의 공백을 메우고, 깊이 있는 보도를 통해 민주주의와 시민 생활에 필수적인 역할을 수행함.
     * 독자들의 기부를 통해 운영되며, 기후 위기, 민주주의 위협, 부의 불평등 등 중요한 이슈를 다루는 데 전념함.

  GN⁺의 의견

     * ProPublica의 Nursing Home Inspect 도구는 요양원 소유주와 운영자에 대한 투명성을 높여, 요양원의 질 관리에 대한 책임 소재를 명확히 함.
     * 이 도구는 요양원 선택 시 중요한 정보를 제공하여, 사용자들이 더 나은 결정을 내릴 수 있도록 돕는 유용한 자원임.
     * ProPublica의 독립적인 저널리즘은 사회적 정의와 변화를 추구하는 중요한 역할을 수행하며, 이러한 데이터베이스 개선은 그들의 노력을 더욱 강화시킴.

        Hacker News 의견

     * 요양원 산업에 대한 비판

     요양원 산업이 이윤을 추구하며 노인들과 그 가족들로부터 최대한의 이익을 취하는 것은 비윤리적임. 이러한 상황을 개선하기 위해 비영리 요양원을 선택하는 것이 한 가지 해결책이 될 수 있음.
     * 언론의 중요성 강조

     ProPublica와 Consumer Reports와 같은 독립적인 감시 기관에 기부하는 것이 규제 체계에 없는 시민 감시 역할을 하는 것으로 보임.
     * 비즈니스 문화에 대한 비판

     취약한 노인들로부터 이익을 창출하는 비즈니스 문화에 대한 비판적인 시각을 제시함. 이러한 행위가 사회적으로 용납되지 않아야 한다는 의견을 표현함.
     * 요양원 평가 정보 제공

     Medicare의 요양원 평가 정보를 다운로드할 수 있는 링크 제공, 이를 통해 요양원의 질을 평가할 수 있는 자료를 얻을 수 있음.
     * 대안적 요양 시설 소개

     ""Adult Family Home"" 또는 ""Adult Foster Home""과 같은 장기 요양 서비스를 제공하는 대안적인 시설에 대한 정보를 공유함. 이러한 시설이 요양원보다 나은 선택지일 수 있음을 언급함.
     * 요양원 전환 사업에 대한 경고

     요양원으로 전환되는 주택 사업이 번성하고 있으나, 이러한 사업에 대한 신중한 접근을 권장함. 서비스 품질이 크게 다를 수 있으므로 가족을 요양원에 맡기기 전에 충분한 조사가 필요함을 강조함.
     * 보조 생활 시설에 대한 언급 부족

     ""보조 생활 시설""이라고 불리는 요양원의 경량 버전에 대한 정보가 포함되지 않았다는 점을 지적함.
     * 어린이 보육 시설에 대한 동일한 도구 요청

     요양원 평가 도구와 유사한 어린이 보육 시설 평가 도구의 필요성을 언급함.
     * 미국 비즈니스의 문제점 지적

     미국 비즈니스의 복잡한 구조가 기본적인 서비스 제공에 있어서 문제가 되고 있음을 비판함. 기본적인 서비스 제공자와 직접 대면할 수 없는 상황에 대한 우려를 표현함.
     * ProPublica에 대한 감사와 혼란 표현

     ProPublica의 노력에 감사를 표하면서도, 동일한 서비스를 제공하는 두 곳 중 하나만 목록에 포함된 이유에 대해 혼란스러움을 표현함. 정보 접근성의 어려움을 지적함.
"
"https://news.hada.io/topic?id=12609","미국 정부의 아빠 개그 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          미국 정부의 아빠 개그 데이터베이스

아버지의 끔찍하리만큼 사랑스러운 유머 축하

     * 아버지들은 자녀의 삶에서 중요한 역할을 함.
     * 단순한 아빠 유머조차도 큰 차이를 만들어냄.
     * 훌륭한 농담은 아닐지라도, 자녀와 나쁜 농담을 공유할 때마다 멋진 순간을 만들어냄.

  GN⁺의 의견

     * 아버지와 자녀 간의 유대감은 종종 소소한 일상의 유머에서 비롯됨.
     * 아빠 유머는 그 자체로 특별한 문화적 현상이며, 가족 내에서 긍정적인 상호작용을 촉진함.
     * 이 기사는 아빠 유머가 단순한 농담 이상의 의미를 가질 수 있음을 보여주며, 이는 많은 사람들에게 흥미로운 주제임.

        Hacker News 의견

     * 사용자는 자신이 읽은 아빠 개그를 18살 딸에게 들려주었고, 예상대로 딸은 한숨을 쉬며 웃었다고 함. 이 사용자는 아빠 개그에 별 다섯 개를 주며 추천함.

     ""아빠 개그를 딸에게 들려줬더니 예상대로의 반응을 얻었어요. 별 다섯 개짜리 추천입니다!""
     * HTTP 504 Gateway Time-out 오류가 치료를 받는 이유에 대한 농담이 있음. 이 오류가 치료를 받는 이유는 해결되지 않은 문제들이 계속 끌려왔기 때문이라는 농담임.

     ""HTTP 504 Gateway Time-out 오류가 치료를 받는 이유는 끝나지 않는 문제들 때문이라는 농담이 있어요.""
     * 해당 사이트가 어떤 법안의 자금으로 만들어졌는지 추측하기 어렵다는 댓글이 있음. 실제로는 2005년 적자 감축 법안에 의해 자금이 지원되었다고 함.

     ""이 사이트는 2005년 적자 감축 법안에 의해 자금이 지원되었어요.""
     * 한 사용자는 몇 년 동안 자신의 쉘 프로필에서 아빠 개그 사이트를 사용해왔다고 함.

     ""제 쉘 프로필에서 몇 년간 아빠 개그 사이트를 사용해왔어요.""
     * ""Dadabase""라는 단어 놀이에 대한 언급이 있음. 이는 ""Database""와 ""Dad""를 결합한 말장난임.

     ""'Dadabase'라는 단어 놀이가 있었네요.""
     * 아빠 개그 API에 대한 관련 정보가 있음. 여러 API 엔드포인트가 소개되어 있음.

     ""아빠 개그 API에 대한 정보가 있어요.""
     * ""National Responsible Fatherhood Clearinghouse""라는 용어에 대해 디스토피아적인 느낌을 받는다는 의견이 있음.

     ""국가 책임 아버지 지원 센터라는 용어가 디스토피아적으로 느껴진다는 의견이 있어요.""
     * 아빠 개그를 저장하는 데 사용되는 백엔드 데이터베이스가 무엇인지 궁금해하는 댓글이 있음.

     ""아빠 개그를 저장하는 백엔드 데이터베이스가 무엇인지 궁금하다는 댓글이 있어요.""
     * 서버의 가동 시간에 대해 걱정하는 댓글이 있음. 서버의 날들이 셀 수 있을 정도로 많지 않다는 농담이 포함되어 있음.

     ""서버의 가동 시간에 대해 걱정하는 댓글이 있어요. 서버의 날들이 적다는 농담이 있네요.""
"
"https://news.hada.io/topic?id=12556","Show GN: AI 뉴스 큐레이션 및 요약 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: AI 뉴스 큐레이션 및 요약 서비스

   GPT-4를 활용해서 여러 뉴스 소스에서 정보를 큐레이션하고 요약해서 이메일로 보내주는 서비스를 만들어 봤습니다.

   큐레이션과 요약에는 GPT-4 Turbo를 사용하고 있습니다. 인공지능 분야의 뉴스와 유튜브 외에도 테크 뉴스도 함께 제공합니다.

   구독을 하시면 매일 아침 오전 8시 큐레이션한 뉴스를 보내드립니다. 무료이고 언제든지 구독취소할 수 있습니다.

   저의 경우 빠르게 AI 분야의 정보를 습득하는데 굉장히 유용하게 사용하고 있습니다.

   상세 보기에서는 원본 출처를 함께 표시하고 요약을 읽은 후 필요한 경우 원문으로 이동해서 자세히 읽을 수 있습니다.

   PS) 웹 링크나 유튜브 링크를 입력하면 바로 요약을 제공하는 기능도 있습니다. 이 기능은 빠른 요약을 위해 GPT-3.5 Turbo를 사용하고 있습니다.

   한번 활용해 보세요~!

   좋아보여서 바로 구독했습니다~ 다크모드가 되면 좋겠네요 ㅎㅎ

   감사합니다. dlehals2 님! ㅎㅎ
"
"https://news.hada.io/topic?id=12550","Midjourney v6 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Midjourney v6 릴리즈

     * 훨씬 더 정확하게 프롬프트를 따름. 좀 더 긴 프롬프트 지원(현재 40~80단어)
     * 일관성 및 모델에 대한 지식 향상
     * 이미지 프롬프팅 및 리믹스 모드 개선
     * 마이너한 텍스트 그리기 기능 추가 - 특정 문구를 """"로 묶어서 넣으면 그대로 표시
     * Upscaler 2배 개선 (subtle/creative 모드)

   오... 역시 미드저니인가요? 이미지 품질이 엄청 뛰어나네요.

   결과물은 각각의 포스트에서 볼 수 있는데 품질이 정말 대박입니다.
     * https://mid-journey.ai/midjourney-v6-insights/
     * https://mid-journey.ai/midjourney-v6-capabilities/
     * https://mid-journey.ai/remixing-in-midjourney-v6/
"
"https://news.hada.io/topic?id=12560","뉴욕 타임즈, 저작권 침해 혐의로 OpenAI와 마이크로소프트를 고소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 뉴욕 타임즈, 저작권 침해 혐의로 OpenAI와 마이크로소프트를 고소

     * 뉴욕 타임즈가 OpenAI와 마이크로소프트를 저작권 침해 혐의로 고소
     * 이들 회사가 뉴욕 타임즈의 수백만 기사를 복사하여 ChatGPT와 Copilot을 구동하는 언어 모델을 훈련시켰다고 주장
     * 이로 인해 뉴욕 타임즈의 독자와의 관계가 손상되고, 구독, 라이선싱, 광고, 제휴 수익이 감소했다고 함

고소장 주장 내용

     * 고소장에 따르면, 이 AI 모델들이 뉴욕 타임즈의 콘텐츠를 그대로 인용하거나, 요약하고, 표현 스타일을 모방하여 고품질 저널리즘을 위협함
     * 뉴욕 타임즈는 몇 달간 협상을 시도했으나 해결책에 도달하지 못했다고 주장
     * OpenAI 대변인은 AI 기술과 새로운 수익 모델로부터 콘텐츠 제작자들이 혜택을 받을 수 있도록 노력하고 있다고 밝힘

관련 소식

     * 뉴욕 타임즈는 OpenAI의 웹 크롤러를 차단하여 사이트에서 콘텐츠를 계속 스크랩하는 것을 방지함
     * BBC, CNN, 로이터 등 다른 뉴스 매체들도 OpenAI의 웹 크롤러를 차단함
     * 반면, Axel Springer는 OpenAI와 협약을 맺고 ChatGPT가 _Politico_와 _Business Insider_의 정보를 직접 사용할 수 있도록 함

GN⁺의 의견

     * 이 사건은 AI 기술의 발전과 저작권 문제가 충돌하는 현대적 이슈를 반영함.
     * 저작권 침해 소송은 AI가 인간의 창작물을 어떻게 활용해야 하는지에 대한 중요한 법적, 윤리적 논의를 촉발할 수 있음.
     * 뉴욕 타임즈와 같은 대형 뉴스 매체가 AI 기업에 맞서는 것은 AI 기술의 미래와 콘텐츠 제작자의 권리 보호에 대한 중대한 전환점이 될 수 있음.

   다른 기사에 따르면 고소장 내용에는 뉴욕타임즈의 자료를 사용하여 훈련한 모든 GPT 인스턴스의 삭제와 훈련에 사용된 데이터 셋의 파기를 요구 하고 있습니다. 또한 향후 유사한 행위를 방지하기 위해 영구적인 금지 명령도 요청하고요.
   거기다 엄청난 비용을 요구하는 부분도 포함되어있습니다. ""법정 손해배상, 보상적 손해배상, 배상, 징벌적 손해배상 및 법이나 형평성에 의해 허용될 수 있는 기타 모든 구제책""

        Hacker News 의견

     * 뉴욕타임스(NYT)를 지지하는 입장
          + 창의적인 조직들이 현대 검색 엔진의 탄생 때와 마찬가지로 다시 한 번 경쟁에서 뒤처지는 것 같음.
          + OpenAI가 초기에 라이선스 계약 없이 모델을 훈련한 결정을 비난하지는 않음. 그렇게 하지 않았다면 AI 혁명은 일어나지 않았을 수도 있음.
          + 하지만 이제는 OpenAI가 콘텐츠 창작자들에게 빚진 것을 인정하고 바로잡아야 한다고 생각함. 그렇지 않으면 더 큰 손실을 입고 경쟁자에게 기회를 줄 수 있음.
     * 저작권 콘텐츠를 소비하고 새로운 것으로 재생산하는 LLM에 대한 복잡한 감정
          + 소프트웨어 개발자이자 저자로서, LLM의 발전은 흥미롭지만 저작물이 LLM에 의해 사용된 것에 대해 우려함.
          + 현재 LLM은 원본 연구 없이 콘텐츠를 재작성하는 하위 웹사이트와 유사함. 이는 기술적으로 합법적이지만 가치를 더하지 않는 기생적인 행위임.
          + 전문가들에게는 LLM의 오류와 인용 부족이 문제가 되며, 일반인들은 SEO를 위한 저노력 콘텐츠 생성에 LLM을 사용할 것이며, 이는 LLM의 품질 저하로 이어질 수 있음.
     * AI 훈련을 위한 공정 이용의 확장을 희망
          + AI 훈련을 위한 공정 이용은 단일 미디어 아웃렛보다 인류의 미래에 더 중요함.
          + NYT가 사라져도 대체할 수 있는 매체가 많지만, AI가 초기에 지적 재산권(IP) 분쟁으로 인해 손상되면 중요한 발전을 저해할 수 있음.
     * 뉴욕타임스 스타일 모방에 대한 약한 주장과 OpenAI에 대한 부정적인 전망
          + 뉴욕타임스의 콘텐츠를 그대로 내보내는 것은 OpenAI에게 불리함.
          + LLM이 특정 콘텐츠를 제거하는 것은 어려움이 있으며, 이는 LLM의 수명이 짧을 것임을 시사함.
     * LLM에 대한 저작권 침해를 기반으로 한 차단이 과학과 유용한 예술의 진보를 촉진하지 않음
          + LLM은 규제가 필요하지만, 저작권이 아닌 다른 형태의 규제가 필요함.
          + OpenAI의 초기 개방형 개념은 좋았지만, 이제는 공공의 개입이 필요함.
     * 한 기업이 모든 인간의 산출물을 독점하는 것에 대한 비판
          + 이러한 행위는 적어도 뻔뻔하고 잘못되었으며, 아마도 불명예스러울 수 있음.
          + OpenAI는 너무 많은 피해자가 있어 소송이 비현실적이므로 법원이 피해자에게 보상하지 않기로 사전에 결정할 것임.
     * 인터넷에 공개된 콘텐츠에 대한 자유로운 접근과 기계에 의한 데이터 사용의 정당성
          + 인간이 접근할 수 있는 콘텐츠는 기계도 접근할 수 있어야 함.
          + 기계는 인간이 할 수 있는 일을 대신하여 더 흥미로운 일에 시간을 할애할 수 있게 함.
     * LLM의 기생적인 행위와 특허 트롤과의 비교
          + LLM은 창작자가 사용하지 않던 텍스트 코퍼스의 언어 패턴을 활용하여 훈련에 사용함.
          + 이는 사회에 이득이 되지 않고 오직 트롤에게만 이익을 줌. 법원이 이를 강제할 이유가 없음.
     * 뉴욕타임스가 OpenAI와 마이크로소프트를 소송한 사건에 대한 언급
          + 뉴욕타임스가 자신들의 기사 수백만 건을 복사하고 사용하여 AI 모델을 구축했다고 주장함.
"
"https://news.hada.io/topic?id=12530","HN에 묻다: 2023년 12월 나만의 문서로 맞춤형 LLM/ChatGPT를 어떻게 훈련시키나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN에 묻다: 2023년 12월 나만의 문서로 맞춤형 LLM/ChatGPT를 어떻게 훈련시키나요?

LLM에 맞춤형 문서 세트 제공 방법

     * LLM(Large Language Models)에 사용자의 문서 세트를 제공하여 비현실적인 결과 없이 적절한 답변을 얻는 최선의 방법에 대한 논의.
     * LLM에 특정 문서 세트를 ""가르치는"" 방법에 초점을 맞춤. 이는 반드시 자체 모델을 훈련시키는 것을 의미하지 않으며, RAG(Retrieval-Augmented Generation)와 같은 접근법도 포함됨.
     * 5개월 전의 스레드가 있으나, 2023년 12월 현재 상황에 맞는 정보가 필요함.

GN⁺의 의견

     * LLM을 사용하여 특정 문서 세트로부터 정확한 정보를 추출하는 것은 기술의 발전과 함께 중요해지고 있음.
     * 이러한 기술은 사용자가 원하는 맞춤형 결과를 얻을 수 있도록 하는 데 도움이 되며, 이는 비즈니스 인텔리전스, 연구, 교육 등 다양한 분야에서 응용될 수 있음.
     * RAG와 같은 기존의 접근법을 활용하거나 새로운 방법을 모색하는 것이 중요하며, 이는 LLM의 활용도를 높이고 더 정확하고 신뢰할 수 있는 결과를 얻는 데 기여할 것임.

        Hacker News 의견

     * 문서에 대한 훈련은 실제로 이루어지지 않으며, 많은 스타트업들이 이 용어를 사용하고 있지만 실제로는 RAG(Retrieval-Augmented Generation)를 사용함.
          + Llamaindex가 가장 좋은 옵션으로 여겨짐.
          + 문서에 대한 훈련을 주장하는 스타트업들 대부분이 실제로는 RAG를 사용함.
          + qLoRA를 사용하여 질문과 답변 쌍을 자동으로 생성하는 스크립트를 찾아보라고 권장함.
          + 개인 문서 지식베이스에 성공적으로 사용된 사례는 드물며, 주로 수학, 추론, 파이썬 등의 기술에 사용됨.
          + 문서 세트를 단순히 미세조정에 투입하는 것은 효과가 없음을 경험적으로 증명함.
     * 문서의 양에 따라 다른 접근 방식을 고려해야 함.
          + RAG는 작은 데이터셋에 잘 작동하며, Llamaindex가 이 분야에서 많은 엔지니어링을 수행함.
          + 미세조정과 RAG의 결합은 인터넷에서 쉽게 찾을 수 있는 지식을 가진 대규모 데이터셋에 효과적임.
          + 지속적인 사전 훈련은 매우 큰 데이터셋과 독점적인 지식을 가진 경우에 필요함.
     * AWS Bedrock는 사용하기 쉬우며, 문서를 S3에 업로드하고 벡터 데이터베이스에 동기화하여 API를 통해 사용할 수 있음.
          + Bedrock는 다양한 모델과 공통 API를 제공하는 제품임.
     * h2ogpt는 다양한 형식의 문서를 처리하고 다양한 모델 호스팅 구현을 지원하는 기능이 완비된 RAG 구현체임.
     * ChatGPT 계정을 구매하여 자신의 문서를 업로드할 수 있으며, 이를 통해 맞춤형 대화형 AI를 생성할 수 있음.
     * GPT4 Assistants는 현재 RAG를 기본적으로 처리할 수 있으며, PrivateGPT는 이를 위한 잘 알려진 옵션 중 하나임.
     * Microsoft Office의 Copilot Builder는 사용자가 기본 URL, 업로드된 파일 등을 지정하여 몇 초 만에 AI Copilot을 생성할 수 있게 해줌.
     * Cheshire Cat은 문서를 ""기억""으로 저장하여 나중에 검색할 수 있는 AI 보조 프레임워크임.
     * Mistral 7B를 QLoRA로 미세조정하는 방법에 대한 비디오 가이드가 있으며, RAG 기술이 더 바람직할 수 있음을 언급함.
"
"https://news.hada.io/topic?id=12501","로그인 없이도 이용 가능해진 게시물, 프로필, 사용자 검색 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  로그인 없이도 이용 가능해진 게시물, 프로필, 사용자 검색 기능

새 로고 발표

     * Bluesky 앱 버전 1.60이 출시되었음.
     * 새로운 로고가 도입되었으며, 구름에서 나온 나비 모양으로 변신함.
     * 로고 변경 이유에 대한 자세한 내용은 Bluesky 블로그에서 확인 가능함.

로그인 없이 게시물, 프로필 및 사용자 검색 가능

     * 로그인 없이도 게시물, 프로필 및 사용자 검색 기능을 사용할 수 있게 됨.
     * 그룹 채팅이나 기사에서 고품질 게시물을 공유할 수 있음.
     * 로그아웃 상태의 사용자에게 게시물을 보이지 않게 하려면, 관리 탭에서 선택 해제할 수 있음.

프로필용 RSS 피드

     * 프로필 링크를 RSS 피드 리더에 붙여넣으면 게시물에 접근할 수 있는 RSS 피드가 자동으로 발견됨.

버그 수정

     * 전체 네트워크 트래픽 감소.
     * 고정된 탭이 내용과 동기화되지 않는 문제 수정.
     * '항소 라벨' 인터페이스 문제 수정, 이제 게시물의 드롭다운 메뉴에서 나타남.

추가 버그 수정

     * 모달이 화면 상단으로 이동하는 문제 수정.
     * 안드로이드 포스트 작성기가 압축되는 문제 수정.

GN⁺의 의견

     * 이 업데이트는 사용자 경험을 향상시키기 위한 중요한 단계임. 특히 로그인 없이 콘텐츠에 접근할 수 있게 되어 사용자 기반을 확대할 수 있는 잠재력을 가짐.
     * 새로운 로고는 브랜드 이미지를 강화하고, 사용자들에게 더욱 친숙하게 다가갈 수 있는 기회를 제공함.
     * RSS 피드 지원은 사용자들이 자신의 콘텐츠를 다른 플랫폼과 쉽게 공유할 수 있게 하여, Bluesky의 영향력을 넓히는 데 기여할 것임.

   페디버스류의 서비스들을 몇 개 이용해봤는데 결국 사람이 적어서 할 맛 안나더라구요.
   블루스카이도 초반에 입소문 탈때 노를 저었어야 하는데 초대장 시스템이..

        Hacker News 의견

     * Bluesky는 초기의 동력을 잃었지만 아직 죽지 않았음. 많은 사람들이 여전히 Bluesky가 결국 대중의 관심을 끌 것이라 기대하고 있음. Bluesky는 ""그냥 트위터인데 사용자가 직접 글을 쓰고 클라이언트와 피드 알고리즘을 사용할 수 있다""는 매력적인 제안을 하고 있음.
     * Bluesky는 아직 공개 피드가 없어서 개별 게시물만 볼 수 있음. 초대받은 사용자로서, Bluesky에는 Twitter나 Threads보다 활동이 적고, 내용도 더 나쁨. 초대제를 통해 질 높은 컨텐츠를 유지하려 했을 것이라 생각하지만, 사이트 전체에 가치 있는 것이 없어 보임.
     * Twitter 대안을 여러 개 시도해본 사용자로서, Bluesky는 그저 또 다른 Twitter처럼 느껴짐. 다른 네트워크에서 다른 스타일이나 맛을 기대했지만, 어디를 가든 참여자들의 컨텐츠 패턴은 동일함. 이러한 스타일의 소셜 미디어 앱에 참여하고 싶지 않은 기분이 들기도 함.
     * 이 릴리스의 RSS 부분에 작은 역할을 한 사용자로서, 피드에서 제목 없는 항목을 사용하도록 권장함. Bluesky 초대 코드가 필요한 사람은 연락할 수 있음.
     * 앱을 받았지만 계정 없이는 아무것도 볼 수 없어서 사용하지 않음. 로그인 페이지 뒤에 숨겨두면 사람들이 사용하지 않는다는 것은 사용자 유치의 기본임.
     * Bluesky는 Twitter를 떠나려는 대규모 관심사 이벤트를 4-5번 놓쳤고, 이제는 어떤 관심이라도 잡으려고 안간힘을 쓰고 있음.
     * Bluesky의 큰 매력은 오픈 프로토콜을 사용한다는 것이지만, 아무도 사용하지 않는 자체 개발 프로토콜임. 반면 Threads는 작동하는 ActivityPub를 가지고 있으며, Mastodon에서 Threads 게시물을 볼 수 있음.
     * Bluesky는 Threads가 잘 진행되고 있는 것을 보고 Twitter 대안으로서의 기회를 놓친 것 같음. Zuckerberg가 어떻게든 망칠 것이지만 Bluesky에게는 험난한 길이 될 것임.
     * 초대장을 받고 싶은 사람들이 있으나, 왜 그렇게 까다롭게 초대장을 주는지 이해할 수 없음.
     * Twitter에서는 30개 계정만 팔로우하며 원하는 것만 보는 작은 버블 안에 있음. 하지만 Bluesky, Mastodon, Threads를 새 계정으로 시도할 때마다 미국 정치에 관한 같은 내용만 보임. Mastodon조차도 분노를 유발하는 컨텐츠를 밀어붙이고 있음. 평균적인 사용자가 이러한 서비스를 시도할 때 이런 것들을 보게 된다면 세상이 점점 나빠지는 것도 놀랄 일이 아님.
"
"https://news.hada.io/topic?id=12571","Tanuki - LLM 기반의 앱을 쉽게 개발하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Tanuki - LLM 기반의 앱을 쉽게 개발하기

     * 파이썬에서 함수 대신 LLM을 쉽게 호출하여, 손으로 구현한 함수에서 기대할 수 있는 것과 동일한 매개변수와 출력을 제공
          + LLM기반 함수는 Well-Typed, Reliable, Stateless 하며 프로덕션 앱에 바로 추가 가능
     * 함수를 많이 사용할 수록 자동 모델 증류(Distillation)을 통해서 최대 9~10배까지 저렴해짐
     * RAG 및 Output Align 지원
"
"https://news.hada.io/topic?id=12542","a16z의 2024 기술분야 빅 아이디어들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        a16z의 2024 기술분야 빅 아이디어들

     * a16z가 예상한 내년의 큼직한 아이디어들
     * 구성원별로 의견을 낸 것을 정리한 글이라 해석 및 신뢰도에 있어서는 주의 필요
     * 하지만 현재 컨슈머, 바이오+헬스, 크립토, 핀테크, 게임, 인프라+엔터프라이즈, 성장중인 기술 분야등에서 현재 상황 및 다양한 아이디어를 얻을 수 있음

[Consumer Tech]

  Voice-First App이 우리 생활의 필수 요소가 될 것

     * AI는 내년에 마침내 음성 우선 앱, 특히 컴패니언 및 생산성 카테고리에서 음성 우선 앱의 잠금을 해제할 것
     * 음성은 가장 오래되고 가장 일반적인 인간 커뮤니케이션 형태임에도 불구하고, 기술과의 소통을 위한 인터페이스로서 제대로 작동한 적이 없음
     * 지금까지 사람들은 스마트 스피커를 음악 재생이나 날씨 확인과 같은 간단한 작업에만 사용했을 뿐, 음성 대화에서 의미 있는 가치를 이끌어내지 못했음
     * 하지만 이제는 대규모 언어 모델을 통해 가상 비서가 인간 수준의 대화 기능을 구현할 수 있게 됨
     * 중요한 점은 음성은 상호작용의 방식이 매우 다양하기 때문에 기존 앱은 이러한 경험을 구축할 수 없다는 것
          + 예를 들어, 당연한 AI 이메일 기능이 Gmail에 통합되는 것은 불가피하지만, 받은 편지함에 AI 음성 인터페이스가 도입될 가능성은 낮음
     * 2024년에는 음성 애플리케이션이 더욱 유용해지고 우리 생활에 통합될 것으로 예상

  목적에 맞게 세분화된 맞춤형 AI

     * 2024년에는 더 좁은 범위의 AI 솔루션이 등장할 것
     * ChatGPT가 훌륭한 일반 AI 비서가 될 수는 있지만, 모든 작업에서 '승리'하지는 못할 것
          + 몇 가지 예를 들자면 연구자를 위해 특별히 설계된 AI 플랫폼, 저널리스트를 위한 글쓰기 생성 도구, 디자이너를 위한 렌더링 플랫폼 등이 등장할 것
     * 장기적으로는 사람들이 일상적으로 사용하는 제품이 독점적인 기본 모델이나 이를 중심으로 구축된 특별한 워크플로우 등 사용 사례에 맞게 맞춤화될 것
     * 이러한 기업들은 새로운 기술 시대를 위해 데이터와 워크플로우를 '소유'할 기회를 갖게 될 것이며, 한 가지 카테고리에 집중한 다음 확장해 나가야 함
     * 초기 제품의 경우 범위는 좁을수록 좋음

  아이들을 가르치는 AI 도구

     * 2023년에 대학생의 약 30%가 학교 공부에 ChatGPT와 같은 도구를 사용했음(설문조사 인걸 고려하면 실제로는 더 높을 것)
     * 하지만 내년부터는 제너레이티브 AI가 조기 교육의 환경을 변화시키기 시작할 것
     * 제너레이티브 AI는 혁신을 촉진하고 상상력을 자극하는 등 젊은 인재들에게 엄청난 잠재력을 제공
     * 학업 성취도에 대한 우려가 지배적인 고등 교육과 달리, 조기 교육은 AI를 활용하여 무한한 탐구의 샌드박스를 만들 수 있음
     * 여기서 핵심은 어린 학습자의 참여를 유도할 뿐만 아니라 보호할 수 있는 제품을 설계하는 것
     * 이를 위해서는 콘텐츠 조절, 사용자 중심의 제한, 연령에 적합한 인터페이스의 고유한 조합이 필요
     * 2024년에는 어린이를 위해 세심하고 꼼꼼하게 설계된 획기적인 새로운 AI 도구가 등장하여, 어린이들이 AI와 인터넷의 광범위한 기능을 안전하게 활용할 수 있도록 지원할 것

  코드가 필요 없는 AI 제너레이터가 새로운 행동을 유발할 것

     * 최첨단 제너레이티브 AI 기술로 제작 한계 비용이 거의 0에 가까워짐에 따라 완전히 새로운 소비자 행동이 등장할 것
     * 이미 Midjourney와 Ideogram과 같은 플랫폼을 통해 이전에는 몇 시간이 걸리고 수천 달러의 비용이 들었던 놀라운 이미지를 제작할 수 있게 됨
     * ElevenLabs는 음성 복제와 오디오 더빙을 통해 수십 개 언어로 콘텐츠를 단 몇 초 만에 번역할 수 있음
     * 이제 개발자가 아니더라도 코딩 기술 없이 일련의 제너레이티브 AI 도구를 조합하여 놀라운 결과물을 만들 수 있게 됨
          + 예를 들어, Glif는 사용자가 간단한 프롬프트만으로 아트, 만화, 셀카 등을 생성할 수 있는 멀티미디어 플랫폼

  창의력 향상

     * AI 크리에이티브 도구는 아이디어와 실행 사이의 간극을 좁혀줌
     * 아름다운 그림이나 시, 노래를 창작하기 위해 전문적인 기술이나 수년간의 훈련이 필요하지 않음
     * 하지만 초기 제품들은 주로 이미지를 만들거나, 에세이를 작성하거나, 트랙을 작곡하는 등 단순한 창작 행위에 초점을 맞췄음
     * 오늘날의 기본적인 인페인팅/아웃페인팅 기능을 훨씬 뛰어넘어 창의적인 부조종사(Copilot) 역할을 하고 AI와의 진정한 대화를 가능하게 하는 대화형 도구에 대한 잠재력은 무궁무진함
          + 예를 들어, 이러한 제품은 편집 가능한 결과물을 생성하고 반복적인 프로세스에 참여하여 작업을 다듬을 수 있음
          + 특정 스타일, 주제 또는 캐릭터에 대해 모델을 훈련시켜 시간이 지나도 일관된 결과물을 생성할 수 있음
          + 또는 사진에 애니메이션을 적용하거나, 실제 동영상을 애니메이션으로 바꾸거나, 2D 이미지를 3D 메쉬로 변환하는 등 기존 콘텐츠를 새로운 것으로 변환하는 데 도움을 줄 수 있음

[Growth-Stage Tech]

  텍스트 기반 채팅을 넘어선 새로운 방식의 스토리텔링

     * Character.AI의 CEO 노암 셰이저는 엔터테인먼트를 ""AGI의 첫 번째 사용 사례""라고 함
     * AI를 사용하여 텍스트, 오디오, 시각적 형식에 걸쳐 스토리를 전달하는 능력은 빠른 속도로 계속 향상되는 중
     * 내년에는 AI가 텍스트 기반 채팅을 넘어 멀티모달 모델로 발전할 것
     * 사용자에 의한 개인화 및 미세 조정의 계층화는 우리가 AI와 상호 작용하는 방식을 더욱 심화시키고 더욱 흥미롭고 재미있으며 매력적인 경험을 가능하게 할 것

  인공지능 데이터 수집으로 강화되는 CRM

     * 영업 담당자(Sales Rep)의 데이터는 GTM 조직의의 기초 단위이며, 잘못된 데이터는 거의 모든 GTM 리더들에게 문제가 됨
     * CRM 플랫폼에 아무리 많은 도구나 플러그인을 사용하더라도 영업 담당자가 정확한 데이터를 입력해야 한다는 근본적인 문제는 여전히 동일함
          + 담당자가 엉터리 데이터를 입력하면 엉터리 결과를 얻게 됨
     * 일부 영업 기술 회사에서 제너레이티브 AI를 실험하고 있지만, 차세대 영업 기술에서는 제너레이티브 AI를 사용하여 이 핵심 데이터 문제를 정면으로 해결할 것
     * AI 네이티브 기업들은 고객 미팅에 대한 담당자의 기억이나 해석에 의존하는 대신 미팅 노트, 이메일, 통화 녹음 등 실제 고객과의 상호작용에서 자동으로 캡처되거나 AI가 생성한 원천 데이터를 기반으로 구축될 것
     * 이러한 영업 도구는 생산성을 크게 향상시킬 수 있기 때문에 상향식으로 대규모로 채택될 가능성이 높음
     * 결국, 이러한 새로운 AI 네이티브 영업 기술 회사들은 완전한 AI 네이티브 CRM을 위한 길을 열어줄 수 있음

  소비자 AI 전장이 모델에서 UX로 이동

     * 2023년에 들었던 말: ""모델을 구축하지 않는 1분은 낭비하는 1분임. 최고의 모델을 구축하면 사용자가 찾아올 것""
     * 지금까지 가장 인기 있는 소비자 AI 기업들은 ChatGPT, Character, Bard, Midjourney와 같이 자체 모델을 제작하는 회사였음
          + 각자의 영역에서 최고의 모델이 되는 것이 차별화 포인트
          + Midjourney는 이미지, Character는 엔터테인먼트, ChatGPT는 전체 텍스트에 중점을 둠
          + UX는 주로 모델을 사용자에게 가장 빠르게 전달할 수 있는 방법에 따라 결정
     * 하지만 칩 부족 완화, API를 통한 대부분의 기초 모델 가용성, 점점 더 강력해지는 오픈 소스 모델 등 여러 가지 요인이 복합적으로 작용하여 다른 사람의 모델을 기반으로 획기적인 소비자 앱을 구축할 수 있는 기반이 마련됨
     * 2024년 소비자 AI 앱은 모델 성능에만 의존하지 않고 고유한 사용 사례를 중심으로 최고의 사용자 경험을 제공함으로써 혁신을 이룰 것
          + 특히 공유 경험과 멀티플레이어 모드를 포함하거나, 여러 모델을 단일 인터페이스로 통합하거나, 워크플로우와 프로세스가 가치를 창출하는 보다 집중적인 솔루션을 구축하는 소비자 AI 앱에 대한 기대가 큼
     * LLM은 차별화의 원천이 될 수 있음
     * 오늘날에는 퍼스트 무버의 이점을 제공할 수 있지만 네트워크 효과, 높은 전환 비용, 규모, 브랜드와 같은 구식 해자가 여전히 장기적으로 이길 가능성이 높음

[Infra + Enterprise]

  AI Interpretability

     * Interpretability(해석가능성)은 **AI 모델을 '리버스 엔지니어링'**하는 것을 달리 표현한 것으로, 2024년에 큰 화두가 될 것
     * 지난 몇 년 동안 AI는 엄청난 양의 컴퓨팅과 데이터를 투입해 모델을 학습시키면 어떤 결과를 얻을 수 있는지에 대한 탐구, 즉 확장이 주를 이루었음
     * 이제 이러한 모델이 실제 상황에 배포되기 시작하면서 가장 큰 문제는 '왜'라는 질문임
          + 이 모델들은 왜 그런 말을 할까?
          + 어떤 프롬프트가 다른 프롬프트보다 더 나은 결과를 내는 이유는 무엇일까?
          + 그리고 가장 중요한 것은 이러한 모델을 어떻게 제어할 수 있을까?

  재창조된 창의성

     * 창의성은 인간의 가장 본질적인 표현 방식이지만, 아이디어는 추상적이기 때문에 이를 명확하게 표현하는 데는 시간과 기술이 필요
     * 생성형 AI는 창작 수단을 진정으로 대중화할 수 있는 길을 만들었음
          + 글쓰기부터 그림 그리기, 영화 제작에 이르기까지 한 팀이 몇 달이 걸리던 작업을 이제 몇 초는 아니더라도 몇 분이면 끝낼 수 있음
          + 숙련 여부와 상관없이 누구나 창작할 수 있는 능력을 갖게 된 것
     * 크리에이티브 워크플로우가 근본적으로 개선됨
          + 프로토타이핑과 아이디어 발상이 놀랍도록 상호 작용하고,
          + Copilot과 함께 반복하여 작가의 벽(글을 쓰지 못하는 증상)을 해결할 수 있으며,
          + 반복이 아닌 반복을 통해 예술적 기술을 연마할 수 있음
     * 이 새로운 패러다임에서는 창의성을 다차원적으로 표현할 수 있는 새로운 도구가 등장하는 중
          + 핵심은 텍스트, 시각적 형식, 오디오 등 다양한 방식으로 창작하는 방법을 학습하는 것
     * 2024년에는 이러한 새로운 AI 놀이터를 통해 창의적인 표현을 더욱 폭넓게 활용할 수 있게 될 것

  워크플로우에 내장된 B2B AI 제품

     * 2024년에는 AI 네이티브 제품이 워크플로우에 더 많이 내장되어 사용자의 간단한 승인 후 선제적으로 댓글을 남기고, 기록을 업데이트하고, 작업 항목을 완료하는 등의 작업을 수행하게 될 것
     * 이미 워크플로우 네이티브 AI 제품이 사용자를 대신해 보다 직접적인 작업을 수행하고 있음
          + 예를 들어, 사용자가 긴 문서에서 관련 정보를 찾을 때까지 기다리는 대신 AI 도구가 주요 섹션에 선제적으로 플래그를 지정
     * B2B 제품에서도 채팅 UX가 변화할 것
          + 채팅은 LLM의 유용성을 입증하는 데 도움이 되었지만, 프롬프트 인터페이스는 궁극적으로는 사용자의 워크플로우를 단절시킴
          + 2024년에는 사용자가 이미 있는 곳에서 이용할 수 있도록 설계된 혁신적인 AI 제품을 보게 될 것

  로보틱 프로세스 자동화 시스템을 발전시키는 LLM

     * 2024년에는 LLM 기반의 로보틱 프로세스 자동화(RPA) 기업이 도약할 것
     * 레거시 소프트웨어 시스템에서 수동 프로세스를 수행하는 경우, 이 시스템들은 뜯어내어 교체하거나 심층적인 통합을 구축하기에는 너무 어려움
          + 이러한 상황에서는 데이터 입력과 같은 반복적인 작업을 자동화하기 위해 소규모 '봇'을 배포하는 RPA가 현재 최고의 솔루션
          + 하지만 RPA는 여전히 매우 수동적이고 자주 중단되는 경우가 많으며, 제대로 작동하려면 많은 사용자 지정 구현과 서비스가 필요함
     * LLM을 사용하면 입력과 작업을 상황에 맞게 이해할 수 있고, 동적으로 조정하여 더욱 강력한 솔루션을 제공해주는 보다 지능적인 RPA 시스템을 구축 가능
     * 재무 조직, 송장 처리, 지원 조직, 고객 서비스 문의 대응 등 특정 유형의 자동화 작업에 맞춰진 여러 수직화된 솔루션이 등장할 것

[Fintech]

  금융 서비스 구매자로서의 개발자의 부상

     * 2024년에는 개발자가 금융 서비스 인프라 구매에 있어 가장 중요한 영향력을 행사하는 주체가 될 것
     * 역사적으로 금융 서비스 인프라 구매는 대부분 경제적 구매자(""ROI는 얼마인가?"")나 비즈니스 책임자(""이것이 나의 사용 사례를 해결할 수 있는가?"")가 주도했지만, 이제는 개발자의 영향력이 커짐
     * 모든 규모의 금융 서비스 회사에서 구매자로서의 개발자의 부상은 신규 진입자에게 유리하게 작용
     * 우수한 개발자 경험을 자랑하는 핀테크 기업에게는 유리하게 작용할 것
     * 핀테크 기업들은 이미 고객이 '구매하기 전에 사용해 볼 수 있는' 개발자 샌드박스를 우선적으로 만들고 있으며, 솔루션의 일부를 오픈소스로 공개하는 중
     * 인프라를 판매하는 대형 금융 기관의 경우, 개발자에게 어필하는 것은 제품 아키텍처의 개선(최신 문서 포함!)을 필요로 하는 새로운 근육이 될 것

  커뮤니티 및 지역 은행의 경쟁을 돕는 기술

     * SVB와 퍼스트 리퍼블릭의 여파로 커뮤니티 은행과 지역 은행은 고금리 환경으로 인한 상당한 규제 압력과 마진 압박에 직면
     * 핀테크 기업들이 여러 분야에서 앞장서는 모습을 볼 수 있기를 바람
          + 은행 생태계가 대형 기관과 경쟁
          + 대차대조표 리스크를 효과적으로 관리
          + 고객에게 더 나은 서비스를 제공할 수 있도록 필요한 도구와 기술을 제공

  소프트웨어로 더욱 강력해진 금융 전문 서비스

     * 회계사, 세무사, 자산 관리자, 투자 은행가 등 금융 서비스 전문직의 업무가 변화할 것
     * 이들은 일반적으로 학습한 전문 지식을 연구하고 적용하는 것은 물론 고객 관리까지 담당
     * 지금까지는 주로 일부 분석 도구(예: 회계의 거래 분류)를 사용하여 워크플로우를 추적하는 데 도움을 주었음
     * 제너레이티브 AI와 LLM의 발전으로 관리 작업, 리서치 프로세스(데이터 수집 및 수집, 정보 검색), 인사이트 요약 및 표시, 보고서 생성 등 더 많은 작업을 자동화 가능해짐
     * 세무사는 더 쉽게 판례를 찾아 질문에 답하고, 회계사는 재무제표를 자동으로 생성하며, 자산 관리사는 더 광범위한 데이터 세트에 걸쳐 시나리오 계획을 세울 수 있음
     * 언젠가는 소프트웨어가 이 작업을 완전히 자동화할 수도 있겠지만, 현재로서는 사람이 해야 할 일은 전문 지식, 생성된 작업의 검토, 고객 대면 업무로 옮겨갈 것
     * 이미 금융 전문가와 관계를 구축한 기존 업체는 소프트웨어에 AI를 통합해야 하고, 최신 소프트웨어 역량을 갖춘 스타트업은 새로운 고객을 발굴하고 신뢰를 구축해야 함

  새로운 '기본 고객 단위'를 확보하는 LLM

     * 운영 체제는 **기초 고객 단위(FCU)**라고 부르는 데이터를 소유하고 있어 그 가치가 매우 높음
     * 역사적으로 특정 유형의 비정형 데이터는 운영 체제에서 수집하기 어려웠음(이메일, PDF, 스프레드시트 등)
     * 2024년에는 LLM을 활용하는 스타트업이 기존에 수집하기 어려웠던 데이터를 캡처하고 자동으로 태그를 지정하여 저장할 것
     * 이러한 스타트업이 기존 플랫폼의 업스트림에서 FCU를 캡처하면 소프트웨어 과점 기업이 서비스를 제공하던 영역이 새로운 시대로 전환되는 것을 볼 수 있을 것

  뱅킹과 트레이딩을 위한 새로운 도구들

     * 2024년에는 야심찬 창업자들이 금융 기관이 해결해야 하는 가장 복잡한 문제들을 해결하는 것을 보게 될 것
     * 투자 은행 및 트레이딩 서비스 시장은 전 세계적으로 약 3,500억 달러의 연간 수익을 창출하지만, 여전히 1980년대에 온프레미스로 구축된 시스템과 소프트웨어에 크게 의존
     * 은행들이 클라우드 기반 솔루션(CRM을 위한 Salesforce, 클라우드 컴퓨팅을 위한 Azure, 레이크하우스 아키텍처를 위한 Databricks)을 구매하기 시작했지만, 은행 및 트레이딩 비즈니스에서 위험을 모델링하고 거래를 확인/정산/청산하며 고객 주문을 기록하기 위해 수직적으로 배포되는 도구는 여전히 수동(Excel)이거나 오래되었거나 둘 다인 경우가 많음
     * 이런 기관의 구매 행동도 변화고, 새로운 도구를 사용하려는 의지가 그 어느 때보다 높음

  ROE를 높이는 열쇠가 될 AI

     * 내년에는 금융 기관이 다양한 운영 워크플로우에 걸쳐 AI 네이티브 애플리케이션을 도입하는 것을 보게 될 것
     * 수익 창출과 중간 및 백오피스 기능 모두에 걸쳐 기회가 있지만, 2024년에는 엔지니어링, 조달, 법무, 규정 준수 및 위험 관리 전반에 걸친 사용 사례에 초점을 맞춰 도입이 이루어질 것

[Games]

  게임: Alpha Geek 기술이 초기 제품 시장에 안착

     * 인공지능, 가상현실/증강현실, 웹 3.0 등 많은 신기술이 등장하고 있으며, 이러한 신기술의 성공 여부는 비디오 게임의 수용 여부에 따라 결정될 것
     * 이들 신기술은 게임을 변화시키기도 하지만 게임에 의해 변화되기도 함
     * 생성형 AI의 경우 텍스트와 이미지에 이어 다음 단계는 3D와 비디오가 될 것
     * 오디오, 인터랙티브 기능 및 기타 요소와 결합하여 궁극적으로 게임 개발 비용이 기존 대비 1/1,000로 줄어들고 소비자가 자신만의 게임 경험을 만들 수 있게 될 것
     * VR/AR은 멀티플레이어 게임 경험을 원하는 어린이와 청소년을 타겟으로 하는 것이 제품/시장에 가장 적합
     * 차세대 헤드셋은 수요가 적은 생산성 도구로 뛰어들기보다는 수백만 명의 소비자를 확보하여 두 배로 성장하는 것이 더 효과적일 것
     * 웹 3.0의 경우, 각 웨이브는 NFT, DeFi 등 주요 사용 사례에 의해 추진되었음
          + 다음 웨이브는 게이머가 가상 아이템을 구매하는 방법으로 웹 3.0을 도입하는 재미있는 메인스트림 게임에서 나올 것

  끝이 없는 AI 퍼스트 게임

     * 2024년에는 크리에이터가 대규모 모델을 활용하여 새로운 게임 시스템과 메커니즘을 구현하는 첫 번째 AI 퍼스트 게임군을 보게 될 것
     * 게임 내 생성형 AI에 대한 초기 담론의 대부분은 AI가 게임 크리에이터의 효율성을 높이는 방법에 초점을 맞추었지만, 장기적으로 가장 큰 기회는 AI를 활용하여 게임의 본질을 완전히 재창조하는 것, 즉 사용자의 참여를 유도하고 오랫동안 유지할 수 있는 네버엔딩 게임을 개발하는 데 있음
     * LLM으로 구동되는 생성형 에이전트는 놀랍도록 생생한 동료와 새로운 사회적 행동을 생성하여 NPC(비플레이어 캐릭터)로 게임의 몰입도를 높일 것
     * 개인화된 캐릭터 빌더와 내러티브 시스템을 통해 모든 플레이어는 자신이 좋아하는 게임을 독특하고 개인화된 방식으로 플레이할 수 있게 될 것
     * 게임 월드 자체는 더 이상 렌더링되지 않고 신경망을 사용하여 런타임에 생성
     * 새로운 플레이어 온보딩도 새롭게 재창조될 것
     * 모든 게임은 ""혼자서도 좋고, AI와 함께하면 더 좋고, 친구와 함께하면 더 좋다""는 모토를 가진 AI 부조종사를 중심으로 설계될 것

  게임이 ""모든 것의 시뮬레이터""가 되다

     * 게임은 수집(포켓몬), 포식자/피식자(tag), 양육(AdoptMe), 탐험(마인크래프트) 등 인간의 기본적인 생물학적 원초적 욕구를 충족시키는 시뮬레이션
     * 게임 엔진은 시뮬레이션의 법칙을 촉진시켜 왔지만 최근까지도 인간의 생각, 행동, 말, 목표 등 복잡하고 즉흥적인 특성은 효율적으로 시뮬레이션할 수 없었음
     * 이제 LLM과 에이전트 프레임워크의 획기적인 발전으로 게임에서 사실적인 목표, 행동, 대화를 가진 현실적인 캐릭터를 구현할 수 있게 됨
     * 게임 디자이너는 사회적 역학을 시뮬레이션할 수 있는 새로운 툴을 얻게 된 것
     * 2024년에는 매 순간 강압, 속임수, 유혹, 동맹, 리더십, 또래의 압력, 영향력, 도덕성 등 다양한 요소가 개입되는 게임을 만나볼 수 있을 것
     * 사교하고, 협력하고, 사랑을 찾고자 하는 인간의 본능적인 욕구가 시뮬레이션의 변덕에 휘둘리는 등 모든 생물학적 원초적 본능이 공정한 게임이 될 것

  챗봇에서 아바타까지: 3D로 진화하는 AI 컴패니언

     * 2023년이 문자로 대화하는 AI 컴패니언의 해였다면, 내년에는 실시간으로 말로 대화하는 3D 아바타를 통해 이러한 관계가 현실화될 것
     * Character AI와 같은 AI 컴패니언 앱은 이미 수백만 명의 월간 활성 사용자가 가상의 엘론 머스크, 슈퍼 마리오, 심리학자 같은 챗봇과 소통하고 있음
     * 내년에는 이러한 대화가 FaceTime 대화처럼 자연스럽게 느껴질 것
     * 지연 시간이 짧은 응답, 텍스트 음성 변환의 발전, 오디오 기반 얼굴 애니메이션을 통해 AI 컴패니언과의 대화는 점점 더 현실감 있고, 현재적이며, 개인화된 느낌을 줄 것
     * 엔터테인먼트는 수동적인 경험에서 능동적인 경험으로 계속 전환될 것이며, 선형적인 TV와 인터랙티브 게임 사이의 경계가 모호해질 것

  차세대 디즈니는 게임 회사

     * 최근 디즈니가 비디오 게임에 다시 진출하는 것에 대해 많은 논평이 있었지만, 다음 디즈니는 비디오 게임 회사가 될 것
     * 2023년은 영화와 TV에서 게임이 큰 성공을 거둔 해
          + 슈퍼 마리오 브라더스 무비는 바비를 제치고 1위를 차지했으며, 라스트 오브 어스 시리즈는 지난 10년간 두 번째로 좋은 성적을 거둔 HBO 시리즈
          + 할리우드는 문화적으로 큰 성공을 거두었지만, 글로벌 게임 시장은 그 어느 때보다 강세를 보이고 있음
          + 올해 전 세계 게임 매출은 1,880억 달러에 달할 것으로 예상되는 반면, 글로벌 박스오피스는 345억 달러에 그칠 것으로 전망됨
     * 게임에 익숙한 젊은 세대가 로블록스, 포트나이트, 클래시 오브 클랜, 발로란트 등을 플레이하면서 점점 더 많은 사람들이 게임을 IP로 선택중
          + 게임은 가장 깊이 있는 스토리와 세계를 제공하고, 수동적이지 않고 상호 작용하며, 매력적인 소셜 경험을 제공하기 때문
          + 스튜디오들은 게임 제작에 활력을 불어넣는 AI를 도입하고 있음
     * 라이엇 게임즈가 리그 오브 레전드를 기반으로 한 Arcane 시리즈를 출시했을 때, 이 시리즈는 넷플릭스에서 가장 많이 시청하고 최고 평점을 받은 시리즈가 됨
     * 라이엇, 에픽, 슈퍼셀, 그리고 새로운 차세대 게임 회사들은 게임이 영화를 대체하는 ""차세대 디즈니""의 핵심으로 떠오르며 차세대 엔터테인먼트 거물이 될 준비를 하고 있음
     * 변화는 이미 주류가 알아채지 못하는 사이에 일어나고 있으며 2024년에는 더욱 가속화될 것

  애니메이션 게임의 주류화

     * 애니메이션은 사용자당 평균 수익으로 계산할 때 가장 높은 수익을 올리는 장르 중 하나가 됨
     * 2022년 미호요는 '원신', '붕괴: 스타 레일' 등의 출시로 38억 달러 이상의 수익을 올렸으며, 올해 초 Nintendo는 젤다: 왕국의 눈물을 출시
     * 2024년에도 애니메이션의 모멘텀은 계속될 것
     * 애니메이션은 어린이와 성인이 모두 쉽게 접근할 수 있는 독특한 예술 스타일이며, 다양한 스토리의 원형을 만들어낼 수 있는 매체
     * 애니메이션 게임에는 플레이어의 깊은 몰입을 유도하는 모험 요소, 로맨스 고리, 소셜 루프가 있음
     * 원신은 다양한 디바이스 유형, GPU, 프레임워크에 걸쳐 완벽한 크로스 플랫폼 성능을 갖춘 게임의 새로운 기준을 세움

  새로운 세대의 UGC 게임 개발자 등장

     * 제작 예산이 증가하고 플레이어의 기대치가 높아지면서 게임 개발자로서 성공하기가 어려워졌음
     * 하지만 새로운 사용자 제작 콘텐츠(UGC) 플랫폼과 AI 기반 크리에이터 툴은 이러한 장벽을 허물 수 있는 가능성을 보여줌
     * 2023년 1분기에 로블록스 개발자들은 2022년에 비해 약 17% 증가한 1억 8,200만 달러의 수익을 올림
     * 에픽게임즈도 포트나이트 크리에이티브 개발자를 재정적으로 지원하기 시작했으며, 2023년에는 1억 달러를 넘어설 것으로 예상
     * UGC 플랫폼 간의 경쟁이 치열해지면서 개발자들은 더 많은 인센티브를 받을 수 있게 됨
     * 특히, 메타의 호라이즌 월드는 2023년에 모바일로 확장될 예정
     * 더 나은 재정적 지원과 함께, UGC 게임 개발자는 이제 제너레이티브 AI로 구동되는 더 강력한 툴을 이용할 수 있음
          + 에픽은 이러한 기술을 공개적으로 지지해 왔으며, Roblox는 이미 몇 가지 제너레이티브 AI 툴을 발표
     * 이 두 가지 요소가 결합되어 내년에 수백만 명의 새로운 크리에이터가 탄생할 것

  마인크래프트 세대가 서바이벌 크래프팅 장르에 불을 붙이다

     * 마인크래프트는 내년에 출시 13주년을 맞이하여 'Crafting(제작)' 게임에서 성장한 플레이어 세대가 성인용 게임 카테고리로 전환하는 이정표가 될 것
     * 하지만 이들의 관심을 끌 만한 뚜렷한 게임이나 경험은 아직 없음
          + 한쪽에서는 2013년에 처음 출시된 치열한 경쟁의 '제작 서바이벌' 서비스형 게임(GaaS)인 Rust가 있음
          + 좀 더 친근한 게임인 2021년 출시작 Valheim 은, 이 게임은 상업적 예상을 깨고 많은 개발자가 이 게임의 성공을 모방헸으며, 이제 많은 개발자가 이 장르의 혼합을 GaaS로 구현하는 중
          + Valheim의 열기는 ""마인크래프트 세대""의 성숙해진 취향에 부합하는 수십억 달러 규모의 새로운 IP를 탄생시키는 촉매제가 될 수 있음

[Bio + Health]

  ""기적의 약""의 대중화

     * 2023년에는 GLP-1, Curative Cell 및 유전자 치료법 등 기적의 약으로 칭송받는 치료법이 환자들의 삶에 큰 영향을 미쳤음
     * 현재 보험 시스템에선 이러한 치료법의 비용을 부담하거나, 의료 서비스 제공자가 이러한 치료법의 완전한 혜택을 실현하는 데 필요한 복잡한 물류, 데이터 수집 및 임상 운영을 관리할 준비가 되어 있지 않음
     * 정책, 바이오의약품 제조, 자금 조달, 임상 운영의 교차점에서 혁신을 도모하여 시스템을 파산시키거나 파괴하지 않고도 이러한 '기적의 약'을 시장에 출시할 수 있는 실행 가능한 수단을 확보할 수 있기를 기대

  의학의 마지막 개척지 : 프로그래밍

     * 생명공학의 재사용 가능한 로켓은 어디에 있을까? 전통적인 신약 개발은 시간이 많이 걸리고, 위험하며, 비용이 많이 듦
     * 또한 기존 로켓처럼 한 분자가 다음 분자를 개발하는 데 영향을 미치지 않고 한 번만 사용되기 때문에 매우 맞춤화되어 있음
     * 하지만 이제는 달라지고 있음. SpaceX의 로켓 재사용성은 우주 여행을 혁신하여 비용을 낮추고 지평을 넓혔음
     * 마찬가지로 유전자 치료와 같은 잠재적 치료 프로그램 가능 의약품은 특정 세포를 표적으로 삼는 데 사용되는 전달체와 같은 구성 요소를 재사용하면서 유전자 화물을 교체할 수 있고, 다음 임무에서는 동일한 로켓을 사용하여 새로운 목적지에 다른 탑재물을 전달할 수 있음
     * FDA는 항공 안전에 대한 미국 FAA(연방항공청)의 접근 방식(엄격하면서도 적응력 있는)을 참고하여 최근 새로운 치료제품국을 출범하고, 희귀질환을 위한 워프 스피드 작전을 시범 운영하여 '프로그래밍 가능한 의약품을 평가하고 승인하는 프로세스'를 만들고 있음
     * 재혁신/재창조가 아니라 재배치하는 미래를 상상해 볼 것. 이는 의약품을 만드는 방법과 이러한 의약품이 우리를 어디로 데려갈 수 있는지를 혁신적으로 변화시킬 것

  의료 인력이 더 많은 일을 할 수 있도록 지원

     * 의료진의 역량을 근본적으로 강화하는 소프트웨어와 데이터 플랫폼에 대한 기대가 큼
     * EHR 내 주변 메모 작성부터 상시 환자 분류의 지능형 자동화, 정밀 치료 계획에 이르기까지, AI가 의사들의 번아웃과 관리 부담을 줄이고 환자에게 가장 자비로운 최상의 진료를 제공할 수 있는 능력을 최적화할 수 있는 다양한 방법이 있음
     * 이 아이디어에서 한 걸음 더 나아가, AI 기반 플랫폼이 가치 기반 치료의 채택을 확대하는 열쇠가 될 수 있음
          + 지금까지 가치 기반 진료는 그 잠재력을 충분히 발휘하지 못했지만, AI가 제공하는 가능성은 그 궤도를 더 나은 방향으로 바꿀 수 있음

  건강의 미래를 바꿀 AI

     * 과학과 의료 분야는 소프트웨어 도입에 있어 오랫동안 뒤처져 있었음
     * 하지만 AI가 기존 소프트웨어를 뛰어넘어 의료 기술을 혁신함에 따라 한때 부담으로 작용했던 것이 이제는 기회가 되고 있음
     * 호출기, 팩스, 수많은 사람이 수동으로 데이터를 입력해야 하는 의료 분야는 AI를 도입할 준비가 되어 있음
     * FDA의 규제 프레임워크에서 AI에 대한 기존 규정이 있는 유일한 산업이 의료 분야라는 사실은 이러한 혁신을 더욱 쉽게 만들어 줌
     * 2024년에는 이러한 도약의 순간이 과학 및 의료 산업 전반에 걸쳐 일어나 의료진과 환자의 삶이 크게 개선되기를 기대

[Crypto]

  탈중앙화의 새로운 시대로의 진입

     * 강력한 시스템이나 플랫폼의 통제권이 소수의 리더에게만 집중되어 있으면 사용자의 자유가 침해되기 쉬움
     * 탈중앙화가 중요: 탈중앙화는 신뢰할 수 있는 중립적이고 구성 가능한 인터넷 인프라를 가능하게 하고, 경쟁과 생태계의 다양성을 촉진하며, 사용자에게 더 많은 선택권과 소유권을 부여함으로써 시스템을 민주화할 수 있는 도구이기 때문
          + 하지만 탈중앙화는 중앙집중식 시스템의 효율성과 안정성에 부딪혀 실제로 대규모로 달성하기 어려웠음
     * 대부분의 웹3.0 거버넌스 모델은 직접 민주주의나 기업 거버넌스에 기반한 단순하지만 부담스러운 거버넌스 모델을 사용하는 DAO(탈중앙화 자율 조직)를 포함하는데, 이는 탈중앙화 거버넌스의 사회정치적 현실에 적합하지 않은 모델
          + 지난 몇 년 동안 웹3.0의 '살아있는 실험실' 덕분에 탈중앙화를 위한 모범 사례가 더 많이 등장하고 있음
          + 더 풍부한 기능을 갖춘 애플리케이션을 수용할 수 있는 탈중앙화 모델과 마키아벨리즘 원칙을 수용하여 리더십에 책임을 지우는 보다 효과적인 탈중앙화 거버넌스를 설계하는 DAO와 같은 방법도 포함
     * 이러한 모델이 발전함에 따라 우리는 곧 전례 없는 수준의 탈중앙화 조정, 운영 기능, 혁신을 보게 될 것

  미래의 UX로 리셋

     * 암호화폐 사용자 경험의 기본은 2016년 이후 실제로 크게 달라지지 않았음
     * 비밀 키 자체 보관, 지갑과 탈중앙화 애플리케이션(dApp) 연결, 서명된 트랜잭션을 점점 더 많은 네트워크 엔드포인트로 전송하는 등 여전히 너무 복잡
     * 현재 개발자들은 내년에 암호화폐에 대한 프론트엔드 UX(사용자 경험)를 재설정할 수 있는 새로운 도구를 적극적으로 테스트하고 배포하고 있음
          + 사용자 기기에서 앱과 웹사이트에 간편하게 로그인할 수 있는 패스키: 암호화된 방식으로 자동으로 생성됨
          + 계정 자체를 프로그래밍할 수 있어 관리가 간편한 스마트 계정
          + 애플리케이션에 내장되어 있어 온보딩을 원활하게 해주는 임베디드 지갑
          + 제3자가 사용자의 키를 보관하지 않고도 서명을 쉽게 지원할 수 있는 MPC(다자간 계산)
          + 사용자가 원하는 것을 인식하고 부족한 부분을 채워줄 수 있는 고급 RPC(원격 프로시저 호출) 엔드포인트
     * 이 모든 것이 웹3가 주류로 자리 잡는 데 도움이 될 뿐만 아니라 웹2보다 더 우수하고 안전한 UX를 제공할 수 있음

  모듈형 기술 스택의 부상

     * 네트워크의 세계에서는 네트워크 효과라는 한 가지 힘이 항상 다른 모든 힘을 지배
     * 네트워크 효과는 매우 강력하기 때문에 네트워크 효과를 확장하고 강화하는 모듈성과 네트워크 효과를 세분화하고 약화시키는 모듈성, 두 가지 종류의 모듈성만 존재
          + 극히 드문 경우를 제외하고는, 특히 오픈소스의 경우 전자의 경우만 의미가 있음
     * 모놀리식 아키텍처는 모듈화된 경계를 넘어 심층적인 통합과 최적화가 가능하여 적어도 초기에는 더 나은 성능으로 이어질 수 있다는 장점이 있음
     * 하지만 오픈소스 모듈형 기술 스택의 가장 큰 장점은 허가 없는 혁신을 가능하게 하고, 참여자들이 전문성을 발휘할 수 있게 하며, 더 많은 경쟁을 장려한다는 점

  AI + 블록체인의 결합

     * 탈중앙화된 블록체인은 중앙화된 AI에 대항하는 힘
          + ChatGPT와 같은 AI 모델은 현재 소수의 거대 기술 기업만이 훈련하고 운영할 수 있는데, 그 이유는 필요한 컴퓨팅과 훈련 데이터가 소규모 기업에게는 감당할 수 없는 수준이기 때문
          + 하지만 Crypto를 사용하면 누구나 컴퓨팅이나 새로운 데이터 세트를 필요로 하는 누군가를 위해 네트워크에 기여하고 보상을 받을 수 있는 다면적이고 글로벌한 허가 없는 시장을 만들 수 있음
          + 롱테일 리소스를 활용하여 AI의 비용을 낮추고 접근성을 높일 수 있음
     * 그러나 AI가 정보를 생산하는 방식을 혁신하여 사회, 문화, 정치, 경제를 변화시키면서 딥페이크 등 AI로 생성된 콘텐츠가 넘쳐나는 세상도 만들어지고 있음
          + 여기서도 암호화 기술을 사용하여 블랙박스를 열고, 온라인에서 보는 것의 출처를 추적하는 등의 작업을 수행할 수 있음
          + 또한, 생성형 AI를 탈중앙화하고 민주적으로 관리하여 한 행위자가 다른 모든 행위자를 결정할 수 있는 권한을 갖지 않도록 하는 방법을 찾아야 하는데, Web3는 그 방법을 연구하는 실험실
     * 탈중앙화된 오픈 소스 암호화 네트워크는 AI 혁신을 민주화(또는 집중화)하여 궁극적으로 소비자에게 더 안전한 환경을 제공할 것

  Play to Earn 이 Play and Earn이 되다

     * ""P2E"" 게임에서는 플레이어가 게임을 플레이하는 시간과 노력에 따라 가상이 아닌 실제 돈을 버는 경우가 많음
          + 이러한 추세는 크리에이터 경제의 부상부터 사람과 플랫폼 간의 관계 변화에 이르기까지 게임과 그 너머를 변화시키고 있는 광범위한 변화와 관련이 있음
          + 웹3.0은 게임 플레이와 거래의 모든 수익이 게임사에게만 돌아가는 현재의 관행에 대항할 수 있음
          + 사용자들은 플랫폼에서 많은 시간을 보내고 많은 가치를 창출하기 때문에 그에 상응하는 보상을 받을 자격이 있음
     * 하지만 게임이 반드시 직장이 되도록 설계된 것은 아님(적어도 대다수의 플레이어에게는 그렇지 않음)
          + 우리에게 진정으로 필요한 것은 재미있게 플레이할 수 있는 동시에 플레이어가 더 많은 가치를 창출할 수 있는 게임
          + 따라서 P2E는 점점 더 'Play and Earn'로 변화하고 있으며, 게임과 직장을 구분하는 중요한 기준이 되고 있음
          + P2E가 초기의 성장통을 딛고 진화함에 따라 게임 경제를 관리하는 방식도 계속 변화할 것
     * 궁극적으로 이는 별도의 트렌드가 아니라 게임의 일부가 될 것

  AI가 게임 제작자가 될 때, 암호화폐는 보증을 제공

     * 게임 내 AI 에이전트가 특정 모델을 기반으로 하고, 그 모델이 손상 없이 실행된다는 보장이 있어야 한다는 것은 분명함. 그렇지 않으면 게임은 무결성을 잃게 됨
     * 로어, 지형, 내러티브, 논리가 모두 절차적으로 생성될 때, 즉 AI가 게임 제작자가 될 때, 우리는 게임 제작자가 신뢰할 수 있을 정도로 중립적인지 알고 싶을 것
     * 우리는 그 세계가 보증을 통해 구축되었다는 것을 알고 싶을 것
     * Crypto가 제공하는 가장 중요한 것은 AI에 문제가 생겼을 때 이를 이해하고, 진단하고, 처벌할 수 있는 능력과 같은 보장
     * 이런 의미에서 'AI 조정'은 인간 에이전트를 다루는 것이 인센티브 설계의 문제인 것처럼, 암호화폐의 핵심은 인센티브 설계의 문제

  형식적인 검증은 점점 더 형식화되고 있음

     * Formal Method는 하드웨어 시스템을 검증하는 데 널리 사용되지만 소프트웨어 개발에서는 덜 일반적임
     * 하드 시스템이나 안전이 중요한 시스템을 제외한 대부분의 개발자에게 이러한 방법은 너무 복잡하고 상당한 비용과 지연을 초래할 수 있음
     * 하지만 스마트 컨트랙트 개발자는 다른 요구 사항을 가지고 있음:
          + 이들이 개발하는 시스템은 수십억 달러를 다루고, 버그는 치명적인 결과를 초래할 수 있으며, 일반적으로 핫픽스가 불가능함
          + 따라서 소프트웨어, 특히 스마트 컨트랙트 개발에서 보다 접근하기 쉬운 공식적인 검증 방법이 필요
     * 작년에 기존의 형식적 시스템보다 훨씬 더 나은 개발자 경험을 제공하는 새로운 도구들이 등장
          + 스마트 컨트랙트가 원자적이고 결정론적인 실행, 동시성이나 예외 없음, 작은 메모리 사용량과 적은 루핑 등 일반 소프트웨어보다 구조적으로 더 단순하다는 사실을 활용
          + 도구의 성능 또한 최근의 획기적인 SMT 솔버 성능을 활용하여 빠르게 개선되고 있음
     * 개발자와 보안 전문가들 사이에서 공식적 방법에서 영감을 얻은 도구의 채택이 증가함에 따라, 차세대 스마트 계약 프로토콜은 더욱 견고하고, 비용이 많이 드는 해킹에 덜 취약해질 것으로 예상

  NFT는 유비쿼터스 브랜드 자산이 됨

     * 점점 더 많은 기존 브랜드가 주류 소비자에게 NFT의 형태로 디지털 자산을 도입중
          + 스타벅스는 참가자들이 스타벅스의 커피 제품을 탐험하면서 디지털 자산을 수집하는 게임형 로열티 프로그램을 도입
          + 나이키와 레딧은 디지털 수집용 대체불가토큰을 개발하여 광범위한 잠재고객을 대상으로 마케팅을 진행
     * 하지만 브랜드는 훨씬 더 많은 일을 할 수 있음
          + NFT를 사용하여 고객 정체성과 커뮤니티 소속감을 표현하고 강화할 수 있으며, 실제 상품과 디지털 표현을 연결하고, 심지어 가장 열성적인 팬들과 함께 새로운 제품과 경험을 공동 제작할 수도 있음
          + 작년에는 소비재로서 대규모 수집을 위한 저렴한 대체불가토큰이 증가하는 추세를 보았는데, 이는 종종 커스터디 월렛이나 거래 비용이 낮은 '레이어 2' 블록체인을 통해 관리
     * 다양한 기업과 커뮤니티에서 디지털 브랜드 자산으로서 NFT가 보편화될 수 있는 많은 조건이 갖춰짐

  SNARK가 메인스트림으로

     * 기술자들은 역사적으로 컴퓨팅 워크로드를 검증하기 위해 다음과 같은 전략을 사용해 왔음
          +
              1. 신뢰할 수 있는 컴퓨터에서 컴퓨팅을 재실행하거나
          +
              2. 작업에 특화된 컴퓨터(일명 TEE 신뢰 실행 환경)에서 컴퓨팅을 실행하거나
          +
              3. 블록체인과 같이 신뢰할 수 있는 중립적인 인프라에서 컴퓨팅을 실행하는 것
     * 각 전략은 비용이나 네트워크 확장성 측면에서 한계가 있었지만, 이제는 SNARK(Succinct Non-interactive ARguments of Knowledge, 간결한 비대화형 지식 논증)의 활용도가 높아지고 있음
     * SNARK를 사용하면 위조가 불가능한 신뢰할 수 없는 '증명자'가 일부 컴퓨팅 작업량의 '암호화 영수증'을 계산할 수 있음
     * 과거에는 이러한 영수증을 계산하는 데 원래 컴퓨팅보다 10^9의 작업 오버헤드가 발생했지만, 최근의 발전으로 이 수치는 10^6에 가까워지고 있음
     * 10^6의 오버헤드를 감당할 수 있고 클라이언트가 초기 데이터를 재실행하거나 저장할 수 없는 상황에서 SNARK를 사용 가능
     * 사용 사례는 다양
          + 사물 인터넷의 엣지 디바이스가 업그레이드를 검증
          + 미디어 편집 소프트웨어는 콘텐츠 진위 여부와 변환 데이터를 포함
          + 리믹스된 밈은 초기 소스에 대한 경의를 표할 수 있음
          + LLM 추론에는 진위 여부 정보가 포함될 수 있음
          + 국세청 양식의 자체 검증, 위조 불가능한 은행 감사 등 소비자에게 혜택을 주는 더 많은 용도로 활용 가능

[American Dynamism]

  21세기 공공안전

     * 기술발전으로 생활수준이 높아지면서 안전한 사회에 대한 기대치도 높아짐
     * 소비자와 기업은 기술의 혜택을 받고 있지만, 공공안전은 훨씬 뒤처짐
          + 왜 911 상담원과 FaceTime / WhatsApp 으로 연결해서 현장 사진/동영상을 쉽게 공유할 수 없을까 ?
          + 드론이 사고현장에 더 빨리 도착해서 출동중인 응급구조대원에게 '하늘에서 내려다 보는' 시야를 제공할 수 있는데 왜 응급차량이 도착할때 까지 기다릴까 ?
     * 얼리 어답터 도시에는 이미 적용되어 범죄율을 크게 감소 시켰지만, 더 많은 도시에 도입되어야 함
     * 공공 안전시스템을 전국적으로 업그레이드 해야할 때

  스마트 그리드가 점점 더 전기화되는 세상에 동력을 공급할 것

     * 미국은 에너지 집약적인 부문을 시급히 활성화해야 함
     * 스마트 그리드 기술은 기존의 배선 인프라를 우회함으로써 점점 더 복잡해지는 전력망에 대한 해결책을 제시
     * 가정용 태양광, 가정용 에너지 저장 장치, 심지어 소형 모듈형 원자로와 같은 분산형 에너지 자원은 안정적인 개인용 전력이나 그리드 복원력을 제공할 뿐만 아니라 잉여 전력을 그리드에 다시 판매할 수 있는 능력도 제공
     * 그러나 이를 대규모로 구현하려면 전력망이 대형 발전소에서 소비자에 이르는 단방향 전력 흐름 모델에서 다양한 공급원과 위치로부터의 양방향 흐름을 지원하는 '스마트 그리드'로 전환해야 함

  비용 효율적인 방어용 군집 비행

     * 미국은 미래의 분쟁에 대비하기 위해 적의 방어를 압도할 수 있도록 설계된 공중, 해상, 지상 드론과 같은 무인 시스템에 투자해 왔음
     * 그러나 비용 효율적인 Swarming이 없다면, 경제적 관점에서 볼 때 손실이 불가피한 무인 항공기 및 기타 부대를 통해 적을 압도하는 데는 한계가 있음
     * 스워밍은 국방부의 전력을 하나의 자산(항공모함 등)에 여러 명의 운용자가 배치되는 방식에서, 한 명의 운용자가 여러 자산을 함께 제어하는 진정한 시스템 오브 시스템 운영 모델로 전환하는 데 필요한 필수 요소
     * 자율 시스템 네트워크가 협업하고, 소통하고, 조율하면 국방의 새로운 패러다임이 열릴 것

  Tech-First 인수를 통해 Atom들을 흡수하는 소프트웨어

     * 앞으로 더 많은 기업이 인수를 통해 소프트웨어 우위의 규모를 확장**하고 인수 후 소프트웨어 우위를 구현하는 것을 보게 될 것
     * 기업들이 이러한 전략을 추구하는 주요 이유
          + 운영 역량과 유통의 형태로 규모를 확보하기 위해(예: Metropolis의 SP Plus 비공개 인수)
          + 제품 플랫폼을 확장하기 위해(예: 안두릴의 다양한 하드웨어 시스템 인수)
     * 기존/잠재 고객사 인수, 파편화된 시장 통합, 제품 중심의 전략적 인수 등 다양한 형태로 이루어질 수 있음
     * 이러한 기술 주도형 인수의 경우, 공통점은 인수자가 주로 기술 우위를 바탕으로 피인수 기업의 인지도를 높인다는 점
     * 왜 지금일까? 운영이 많은 비즈니스의 수익과 서비스 확장성을 획기적으로 향상시키는 현재의 AI 물결의 힘

  컴퓨터 비전과 비디오 인텔리전스를 위한 새로운 애플리케이션

     * 2024년에는 컴퓨터 비전과 비디오 인텔리전스가 실제 세계에 새롭게 적용되는 모습을 보게 될 것
     * 기업이 더 나은 정보에 기반한 비즈니스 의사결정을 내릴 수 있도록 비디오 데이터에서 인사이트를 활용하는 것은 기업에서 보편화됨
     * 그러나 여전히 비디오를 캡처하고 이해할 수 있는 최신 시스템이 부족
          + 고객들은 기존 비디오 인프라가 없거나 최신 소프트웨어와 통합하기 어려운 레거시 비디오 시스템을 사용하는 경우가 많음
     * 기업들은 비디오 하드웨어 카메라와 소프트웨어를 함께 판매하는 하드웨어+소프트웨어 모델을 활용하여 이 문제를 해결중
     * 이러한 기업들은 특정 고객을 타겟팅하고 그들의 특정 요구 사항을 가장 잘 충족할 수 있도록 시장 진출 방식을 맞춤화하는 경우가 많음
          + 예를 들어, Flock Safety와 Ambient 같은 회사는 모두 실제 세계에서 컴퓨터 비전을 활용하고 있음
          + 도로 및 항만과 같은 운송, 플랜트 및 공장과 같은 산업, 농업, 광업 등 다른 산업에서도 동일한 성공을 거둘 수 있을 것

  해양 탐험의 새로운 시대

     * 수 세대 전, 우리 조상들은 탐험을 위해 바다로 나섰지만 오늘날 우리는 지구의 해저에 대해 아는 것보다 화성 표면에 대해 더 많이 알고 있음
     * 이제 새로운 해양 탐험의 시대가 열리면서 창업자들이 그 변화를 주도하고 있음
     * 해양은 항공우주와 유사한 신뢰성 및 엔지니어링 과제에 직면해 있으며, 최신 우주 시대에 개척된 많은 기술을 쉽게 적용할 수 있을 뿐만 아니라 상업 및 방위 시장의 규모와 중요성으로 인해 상당한 보상을 제공
     * Flexport, Saildrone, Saronic 등의 기업은 이미 해양 현대화를 시작했으며, 지정학적, 공급망 및 기후 혼란이 지속되면 변화에 대한 요구가 더욱 가속화될 것으로 예상
     * AI, 하드웨어, 컴퓨터 비전의 발전은 자율적이고 현대화된 페리, 컨테이너선, 어선을 통해 도시, 항구, 무역 네트워크를 혁신할 수 있는 기회를 제공합니다. 로봇은 해저에서 귀중한 자원을 지속 가능하게 채굴하고, 수로를 지도화하고 측량하며, 생태계의 건강 상태를 모니터링하는 데 도움을 줄 것입니다. 새로운 세대의 해군 및 해안 경비대 함정, 선박, 잠수함은 우리의 공급망과 해안을 보호할 것
     * 기술이 다시 한 번 해양으로 돌아오고 있음

   개인적으로 2024는 시대의 분기점이 될 거라 생각합니다.

   아주 길어서 시간이 될 때 읽어봐야겠지만,

   전 AI와 문화 측면에서 새로운 형태의 소설은 언제 나오려나 기다려지네요.

   작가가 기본적인 세계관과 스토리 라인을 그리고 있으면,
   독자는 그 세계 속에서 AI를 통해 작가가 쓰지 않은 다른 시각에서 소설을 지켜보거나,
   특정 캐릭터를 추가하거나 약간의 if 스토리를 전개하는 식으로...

   AI 소설이 이미 존재하긴 하지만, 비교적 과거? 기술이기도 하고 (너무 빠르게 발전해서...) 그 한계가 명확한 시점에서
   더 발전한 첨단의 LLM을 통해 이런 플랫폼이 생기면 재밌겠다는 생각을 계속 합니다.

   아, AI 시대니까 기다리는게 아니라 직접 만들어야 하는 건가...? @_@

   https://twitter.com/Xletter_Labs/ 여기 한번 둘러보세요

   원문에서의 챕터 순서는 뭔가 우리와 관련없거나 재미없는 부분이 앞쪽이라 순서만 살짝 조정해서 정리해봤습니다.
"
"https://news.hada.io/topic?id=12612","위키백과 일일 최다 조회 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           위키백과 일일 최다 조회 페이지

프로젝트별 가장 많이 본 페이지 분석

     * 날짜 유형: 월간, 일간, 연간 데이터를 선택할 수 있음.
     * 프로젝트: 다양한 프로젝트의 데이터를 볼 수 있음.
     * 플랫폼: 모든 플랫폼, 데스크톱, 모바일 앱, 모바일 웹 등을 기준으로 데이터를 필터링할 수 있음.
     * 제외된 페이지: 주요 공간(main space) 페이지만 보여주거나 모바일 비율만 보여주는 옵션 제공.
     * 검색: 특정 페이지를 검색할 수 있는 기능.
     * 고정 링크: 현재 보고 있는 데이터의 고정 링크 제공.
     * 다운로드: 데이터를 다운로드할 수 있는 옵션.

가장 많이 본 페이지 순위

     * 1위: Dee Dee Blanchard의 살인 사건 페이지가 877,654회의 페이지뷰를 기록함.
     * 2위: Joe Flacco 관련 페이지가 448,487회의 페이지뷰를 기록함.
     * 3위: 'Saltburn'이라는 영화 페이지가 412,369회의 페이지뷰를 기록함.
     * 4위: 'Salaar: Part 1 – Ceasefire' 페이지가 377,560회의 페이지뷰를 기록함.
     * 5위: Vijayakanth 관련 페이지가 374,869회의 페이지뷰를 기록함.
     * 6위: 'Dunki'라는 영화 페이지가 256,415회의 페이지뷰를 기록함.
     * 7위: YouTube 페이지가 195,760회의 페이지뷰를 기록함.
     * 8위: XXXTentacion 관련 페이지가 195,549회의 페이지뷰를 기록함.
     * 9위: Cleopatra 페이지가 151,205회의 페이지뷰를 기록함.
     * 10위: 'Animal' (2023년 영화) 페이지가 148,444회의 페이지뷰를 기록함.
     * 나머지 순위의 페이지들도 페이지뷰 수에 따라 나열됨.

GN⁺의 의견

     * 이 데이터는 웹사이트나 플랫폼 관리자들에게 어떤 콘텐츠가 인기 있는지 파악하는 데 매우 유용함.
     * 페이지뷰 수치는 마케팅 전략을 세우거나 콘텐츠의 트렌드를 분석하는 데 중요한 지표가 될 수 있음.
     * 특히 문화나 엔터테인먼트 관련 페이지들이 상위권에 많이 포진해 있어, 이 분야에 대한 대중의 관심과 인기를 반영하는 것으로 보임.

        Hacker News 의견

     * 한 사용자는 자신이 잠든 사이에 스페인어 위키백과의 클레오파트라 페이지를 열었다는 것을 발견했음. 이는 구글 어시스턴트의 예시 쿼리 중 하나로, 많은 사람들이 의도치 않게 방문하는 것으로 추정됨.

     ""오늘 아침에 일어나서 휴대폰을 확인했는데, 스페인어 위키백과의 클레오파트라 페이지가 열려 있었어요. 저는 의도적으로 열지 않았지만, 잠든 사이에 링크를 눌렀나 봐요. 그런데 이 페이지가 스페인어 위키백과에서 가장 많이 방문하는 페이지 중 하나라는 걸 알게 되었죠. 구글 어시스턴트의 예시 쿼리 중 하나라서 그런 것 같아요. 저처럼 많은 사람들이 매일 의도치 않게 방문하고 있네요. 정말 흥미로워요.""
     * 인도의 인터넷 사용 증가는 저렴한 인터넷 서비스 제공업체인 Reliance Jio와 저렴한 안드로이드 스마트폰의 보급 때문이라는 의견이 있음.

     ""인도 관련 페이지 방문이 많은 이유는 Reliance Jio가 제공하는 저렴한 인터넷 때문일 거예요. 추측이지만, Reliance Jio 이후로 인도인들의 인터넷 활동이 늘어난 것 같아요. 그리고 저렴한 안드로이드 스마트폰도 쉽게 구할 수 있죠. 14억 인구가 있는데, 이런 현상이 일어나는 건 시간 문제였을 거고, 저렴한 인터넷과 스마트폰이 촉매제 역할을 했다고 생각해요.""
     * Dee Dee Blanchard 살인 사건에 대한 위키백과 페이지가 오늘 방문자 수가 두 배 가까이 많은데, 그 이유가 그녀의 딸이 오늘 감옥에서 석방되었기 때문임.

     ""오늘 Dee Dee Blanchard 살인 사건에 대한 위키백과 페이지 방문자 수가 왜 이렇게 많은지 아시는 분 있나요? 거의 두 배에 가까운데... 아, 그녀의 딸이 오늘 감옥에서 석방되었군요.""
     * 위키백과의 유튜브, 포르노허브, 페이스북, 인스타그램 페이지가 정말로 자주 읽히는지, 아니면 검색 결과 페이지에서의 실수 클릭인지에 대한 의문을 제기함.

     ""사람들이 정말로 유튜브, 포르노허브, 페이스북, 인스타그램 페이지를 이렇게 자주 읽고 있는 건가요, 아니면 검색 결과 페이지에서 실수로 클릭한 건가요?""
     * 최근 주제들이 상위 결과에 자주 나타나는 것은 흥미롭다는 의견이 있음. 대부분의 경우, 뉴스나 다른 시의적인 사건, 미디어에서 본 것에 대한 배경을 얻기 위한 것으로 보임.

     ""상위 결과에 최근 주제들이 자주 나타나는 것이 흥미롭네요. 대부분은 뉴스나 다른 시의적인 사건에 대한 배경을 얻기 위한 것 같아요. 배우, 가수, 최근 영화 등에 대해 알고 싶어하는 것이 반영된 것 같습니다.""
     * 크리스마스에 대한 대중의 관심을 알아보기 위해 사용자가 발견한 도구들을 공유함. 위키 페이지 조회수를 여러 언어로 시간에 따라 비교할 수 있는 도구, 구글 트렌드, 위키백과 페이지 조회수의 지리적 분포를 보여주는 도구 등이 있음.

     ""크리스마스에 대한 대중의 관심을 알아보려고 이런 도구들을 찾았어요. 위키 페이지 조회수를 여러 언어로 시간에 따라 비교할 수 있는 도구, 구글 트렌드, 위키백과 페이지 조회수의 지리적 분포를 보여주는 도구 등이 있습니다. 다른 도구를 아시면 공유해주세요.""
     * ""gingering""과 ""figging""이라는 항목이 인기 있는 레딧 스레드에 링크되어 있었기 때문에 31번째와 34번째 항목으로 등장함.

     ""어제 인기 있던 레딧 스레드에 'gingering'과 'figging'이라는 항목이 링크되어 있었네요. 그래서 31번째와 34번째 항목으로 나타난 것 같아요.""
     * 위키백과가 주로 유명인사, 미디어, 오타 등에 대한 정보를 담고 있지만, 다른 많은 내용도 포함하고 있으며, 다른 인터넷 사이트와 달리 원하는 정보를 직접 검색할 수 있음.

     ""위키백과는 주로 유명인사, 미디어, 오타 등에 대한 정보를 담고 있지만, 다른 많은 내용도 포함하고 있어요. 다른 인터넷 사이트와 달리, 원하는 정보를 직접 검색할 수 있죠. '추천 콘텐츠'에 폭격을 당하지 않아서 좋아요. 위키백과가 아직 매일 활성 사용자 수를 극대화하려는 유인이 없어서 다행이에요. 그렇지 않으면 모든 것이 바뀔 거예요.""
     * 영화와 TV 쇼에 대한 정보를 찾을 때 IMDB 대신 위키백과를 사용하는 경향이 있는데, IMDB가 사용하기 불편하고 개선될 기미가 보이지 않기 때문임.

     ""영화와 TV 쇼에 대한 정보를 찾을 때 IMDB 대신 위키백과를 사용하는 사람들이 많은 것 같아요. IMDB가 사용하기 불편하고 개선될 기미가 보이지 않아서 그런 것 같네요. IMDB는 경쟁이 없다고 생각하는 것 같아요. 그래서 사람들이 위키백과에 같은 정보를 추가하기 시작했죠.""
     * ""웹 호스팅 서비스"" 페이지가 최근 가장 많이 방문된 페이지였는데, 모바일 방문자가 거의 없었음. 이는 봇 팜이 위키백과를 방문한 것일 수도 있음.

     ""2일 전 '웹 호스팅 서비스' 페이지가 가장 많이 방문된 페이지였어요. 모바일 방문자가 거의 없었죠. 이게 무슨 일 때문일까요? 아니면 봇 팜이 위키백과를 방문한 걸까요? 이상하네요. 사용자 에이전트를 기반으로 약 300만 '자동화된' 조회수도 있었어요. 아마도 어떤 봇 스크립트가 잘못 작동했을 수도 있겠네요.""
"
"https://news.hada.io/topic?id=12540","Zilla - 멀티 프로토콜 이벤트-네이티브 엣지/서비스 프록시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Zilla - 멀티 프로토콜 이벤트-네이티브 엣지/서비스 프록시

     * 선언적/Stateless API를 통해 웹앱, IoT기기, 마이크로서비스를 Apache Kafka에 연결해주는 프록시
     * Kafka 토픽을 REST, SSE, MQTT, gRPC API등을 통해서 안전하고 안정적으로 Expose
     * 외부 종속성이 없으며, Kafka의 Consumer/Product API 및 Kafka Connect에 의존하지 않음
          + Kafka Wire Protocol을 네이티브하게 지원하며, ""Advanced Procotol Mediation""을 이용하여 카프카에 대한 Stateless API 엔드포인트를 설정
     * 데이터 경로에 대해서 보안을 강제하고, Observability 및 커넥션 오프로딩 지원
     * 즉, Zilla를 Apache Kafka®와 함께 배포하면 어떤 어플리케이션/서비스 든 심리스하게 이벤트 드리븐하게 만들수 있음
"
"https://news.hada.io/topic?id=12611","아마존의 '침묵의 해고' 사태","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            아마존의 '침묵의 해고' 사태

아마존의 조용한 해고

     * 아마존에는 주식 문제가 있음.
     * 2023년 아마존은 27,000명 이상을 해고함, 이는 전체 직원 1.6백만 명 중 1.7%에 불과함.
     * 대부분의 해고는 소매 부문에서 발생했으며, AWS에서는 수익을 창출하지 않거나 마진이 낮은 부문이 대상이었음.
     * 연초 주식이 낮았고, 운영 비용이 높았을 때 대규모 해고가 있었음.
     * RTO(사무실 복귀) 정책이 시행되었으나, 실제로는 변화가 없었음.
     * 해고로 인한 부정적인 언론은 좋지 않았지만, 운영 비용을 줄이는 가장 효과적인 방법은 고비용 인력을 줄이는 것이었음.
     * RTO 시행으로 많은 사람들이 회사를 떠났고, 남아있는 사람들도 다른 일자리를 찾거나 RSU 지급을 기다리고 있었음.
     * L7 이하의 직원들은 대부분 회사를 떠나고 싶어 했으며, 이는 주로 보상 때문이었음.

Day 2에 오신 것을 환영합니다

     * 고객들이 비용을 절감함에 따라 AWS에 지출하는 $1의 가치가 예전보다 떨어짐.
     * 모든 추세선은 여전히 상승하고 있지만, 성장은 둔화되고 있음.
     * 고객들은 VM이나 비싼 네트워크가 아닌, AWS가 역사적으로 제공하는 데 어려움을 겪었던 더 높은 수준의 추상화를 원함.
     * 아마존은 AI 분야에서 뒤처져 있으며, 비용을 줄이는 것이 성장하는 가장 효과적인 방법임.
     * 아마존의 많은 팀들이 1년 이상 채용 동결 상태였으며, 이제는 현재 직원들을 내보내고 있음.
     * 아마존은 선도자에서 추종자로 전환했으며, 이는 잘 진행되고 있지 않은 것으로 보임.

더 이상의 피자 팀은 없음

     * 아마존에서 일을 시작했을 때 서비스 팀이 독립적이라는 점에 감명받았음.
     * 그러나 이러한 독립성은 매우 비용이 많이 드는 것으로 밝혀짐.
     * 서비스 팀의 모든 구성 요소는 해당 팀의 일부로 자체 포함되어 있으며, 이는 매우 비싼 조직 구조임.
     * RTO로 인해 많은 서비스 팀들이 기관 지식을 상실했으며, 팀들은 2023년 이전에도 이미 날씬했지만, 이제는 더욱 약해짐.
     * 비용을 줄이기 위한 다음 단계는 전문 지식을 중앙 집중화하는 것임.
     * 아마존은 플랫폼 엔지니어링 팀이나 SRE를 가지고 있지 않았지만, 2024년에는 더 중앙 집중화된 조직 구조로 재편될 것으로 예상됨.

앞으로의 중단 사태

     * 2024년에 AWS에서 큰 중단 사태가 발생할 것으로 예상됨.
     * 아마존은 이미 여러 대규모 사건(LSE)의 증가를 경험했으며, 이는 RTO와 수천 명의 조용한 해고의 직접적인 결과임.
     * 아마존은 LSE를 공개적으로 공유할 동기가 없으며, 고객이 인지하는 중단 사태만 대시보드 업데이트에 포함됨.
     * 아마존은 운영적으로 강한 회사이지만, 이러한 운영 관행은 사람들에게 의존함.

아마존은 나를 해고하지 않을 것임

     * 2023년 9월 1일, 나의 팀과 인접 팀이 해체된다는 소식을 들음.
     * 관리자들은 우리 모두가 아마존에 남기를 원했지만, 역할은 없다고 주장함.
     * 나는 관리자들의 커뮤니케이션 방식에 의심을 품었고, 퇴직금이 옵션인지 물어봄.
     * 나는 다른 역할을 찾으라는 지시를 받았고, 모든 역할에는 상당한 단점이 있었음.
     * 관리자들은 나에게 다른 역할을 맡게 하려 했지만, 실제로는 해고를 할 수 없었음.
     * 나는 2개월 반 동안 매주 고용 및 퇴직금 패키지에 대한 업데이트를 요청했지만, 응답을 받지 못하거나 다양한 변명을 들었음.
     * 현재는 12월 30일이며, 여전히 아마존에 고용되어 있음.
     * 이러한 상황은 내 팀뿐만 아니라 아마존의 여러 부문에서 발생하고 있으며, 다른 대기업들에서도 비슷한 전략이 사용되고 있음.

GN⁺의 의견

     * 아마존의 조용한 해고 전략은 직원들에게 퇴직금을 지급하지 않고도 인력을 줄일 수 있는 방법으로, 기업의 단기 이익을 우선시하는 경향을 보여줌.
     * 이러한 전략은 직원들의 불만과 이직을 유발하며, 장기적으로는 회사의 운영 효율성과 혁신 능력에 부정적인 영향을 미칠 수 있음.
     * 아마존의 이러한 상황은 기업 문화와 노동 시장에 대한 광범위한 토론을 촉발시킬 수 있으며, 다른 기업들의 인력 관리 전략에도 영향을 미칠 수 있음.

        Hacker News 의견

     * Silicon Valley의 태도 변화
          + 과거에는 직원들을 믿고, 성장과 성공의 원천으로 여겼으나, 이제는 비용을 최소화하고 분기별 이익에 부담을 주는 존재로 여기는 경향이 있음.
          + 게임룸, 개인 프로젝트, 스시 등의 혜택은 과거의 태도에서 비롯된 것으로, 현재는 새로운 시대정신이 강조되고 있음.
          + 협력, 타인에 대한 믿음과 연민, 선을 행하는 것이 구시대적으로 여겨지고 있음.
          + 변화를 이끌어낼 수 있는 사람들을 믿고, 많은 노력과 위험을 감수하면 세상을 바꿀 수 있다는 믿음이 필요함.
     * 장기적인 역할에서 '관리적 배제' 경험
          + 장기적인 역할에서 배제되는 것은 매우 충격적인 경험일 수 있음.
          + 관리진이 의도적으로 상황을 악화시키는 동안 직원은 상황을 개선하려는 진정한 의도를 가지고 접근할 수 있음.
          + 최선의 해결책은 때로는 냉소적으로 게임을 플레이하며 가능한 최선의 조건을 얻어내는 것임.
     * Amazon의 문화와 경영
          + Amazon은 무능한 엔지니어와 리더들로 가득 차 있으며, 빛나는 순간들이 회사가 완전히 실패로 치닫는 것을 막고 있음.
          + 수익성이 떨어지는 부서의 직원들을 해고하는 대신, AI 분야와 같이 성장 잠재력이 있는 새로운 분야로 이동시키는 것이 더 현명한 전략일 수 있음.
          + Amazon은 인도에서 개발자 역할에 대한 채용을 크게 늘리고 있으며, 인도 지사는 상대적으로 원격 근무에 친화적임.
     * Amazon의 AI 분야에서의 지위
          + Amazon이 AI 분야에서 뒤처지고 있다고 느끼는 것은 흥미로움.
          + 오픈 소스를 재포장하고 인프라에 통합하는 것 이상의 노력이 필요할 때, 회사는 손을 놓고 있음.
     * 기업의 재정 관리와 문화
          + 금융위기 이후 일부 은행은 예산 부족으로 해고 대신 직원들을 계속 고용함.
          + 이로 인해 실제로 일을 하지 않는 직원들이 생겨나며, 이는 Amazon이 최근에 겪고 있는 상황과 유사함.
     * Amazon 내부의 정책과 직원 해고
          + Amazon이 직원을 해고하지 않는다는 정책이 여전히 유효한지 의문.
          + 회사가 해고 대신 사람들이 자발적으로 퇴사하도록 유도하는 전략을 채택할 가능성이 있음.
     * Amazon에서의 경험
          + 한 친구는 Amazon에서 '벤치'에 앉아 있으면서 중요한 업무를 맡지 못하고, 팀 내에서 인원이 확보될 때까지 중요한 프로젝트 업무를 약속받았으나 현실적으로는 전망이 없었음.
          + 성과 평가가 부정적이고 인플레이션을 따라잡지 못하는 임금 인상으로 결국 회사를 떠나 Amazon 내부 지식을 가지고 감.
"
"https://news.hada.io/topic?id=12531","루비 3.3 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               루비 3.3 출시

Ruby 3.3.0 출시

     * Ruby 3.3.0 버전이 출시됨. 새로운 파서인 Prism 도입, 파서 생성기로 Lrama 사용, 순수 Ruby로 작성된 JIT 컴파일러 RJIT 추가, 특히 YJIT의 성능 개선이 이루어짐.

  Prism 파서

     * Prism은 Ruby 언어를 위한 이식 가능하고, 오류에 강하며, 유지보수가 용이한 재귀 하향 파서로 기본 gem으로 제공됨.
     * Prism은 생산 환경에 적합하며 활발히 유지보수되고 있으며, Ripper를 대체하여 사용 가능함.
     * Prism 사용법에 대한 상세한 문서 제공됨.
     * Prism은 CRuby 내부에서 사용되는 C 라이브러리이자 Ruby 코드를 파싱할 필요가 있는 모든 도구에서 사용할 수 있는 Ruby gem임.
     * Prism API의 주요 메소드로는 Prism.parse(source), Prism.parse_comments(source), Prism.parse_success?(source) 등이 있음.
     * Prism 저장소에 직접 pull request나 이슈를 제출하여 기여할 수 있음.
     * Prism 컴파일러를 실험적으로 사용하려면 ruby --parser=prism 또는 RUBYOPT=""--parser=prism""를 사용할 수 있으나, 디버깅 목적으로만 사용해야 함.

  Lrama 파서 생성기

     * Bison을 Lrama LALR 파서 생성기로 대체함.
     * Ruby의 파서에 대한 미래 비전을 참조하면 관심 있는 사람들이 확인할 수 있음.
     * 유지보수를 위해 내부 Lrama 파서가 Racc에 의해 생성된 LR 파서로 교체됨.
     * 파라미터화 규칙 (?, *, +) 지원, Ruby parse.y에서 사용될 예정임.

  YJIT

     * Ruby 3.2 대비 주요 성능 개선 사항이 있음.
     * splat 및 rest 인자에 대한 지원이 개선됨.
     * 가상 머신의 스택 작업에 대해 레지스터가 할당됨.
     * 선택적 인자가 있는 더 많은 호출이 컴파일됨. 예외 처리기도 컴파일됨.
     * 지원되지 않는 호출 유형 및 메가모픽 호출 사이트는 더 이상 인터프리터로 나가지 않음.
     * Rails의 #blank? 및 특수한 #present?와 같은 기본 메소드가 인라인 처리됨.
     * Integer#*, Integer#!=, String#!=, String#getbyte, Kernel#block_given?, Kernel#is_a?, Kernel#instance_of?, Module#=== 등이 특별히 최적화됨.
     * 컴파일 속도가 Ruby 3.2보다 약간 빨라짐.
     * Optcarrot에서 인터프리터보다 3배 이상 빠름!
     * Ruby 3.2 대비 메모리 사용량이 크게 개선됨.
     * 컴파일된 코드의 메타데이터가 훨씬 적은 메모리를 사용함.
     * --yjit-call-threshold가 30에서 40,000개 이상의 ISEQ가 있는 애플리케이션의 경우 120으로 자동으로 상승됨.
     * --yjit-cold-threshold가 추가되어 냉각된 ISEQ의 컴파일을 건너뜀.
     * Arm64에서 더 컴팩트한 코드가 생성됨.
     * 코드 GC는 기본적으로 비활성화됨.
     * --yjit-exec-mem-size는 새 코드 컴파일이 중단되는 하드 리밋으로 처리됨.
     * 코드 GC로 인한 성능 저하가 없으며, Pitchfork를 사용하여 서버가 리포킹할 때 더 나은 복사-쓰기 동작을 보임.
     * 원하는 경우 --yjit-code-gc로 코드 GC를 활성화할 수 있음.
     * RubyVM::YJIT.enable을 추가하여 실행 시간에 YJIT를 활성화할 수 있음.
     * Rails 7.2는 이 방법을 사용하여 기본적으로 YJIT를 활성화할 예정임.
     * 애플리케이션이 부팅을 완료한 후에만 YJIT를 활성화하려면 이 방법을 사용할 수 있음.
     * 부팅 시 YJIT를 비활성화하면서 다른 YJIT 옵션을 사용하려면 --yjit-disable을 사용할 수 있음.
     * 기본적으로 더 많은 YJIT 통계가 제공됨.
     * yjit_alloc_size 및 여러 메타데이터 관련 통계가 기본적으로 제공됨.
     * --yjit-stats에 의해 생성된 ratio_in_yjit 통계가 릴리스 빌드에서 사용 가능함. 특별한 통계 또는 개발 빌드가 더 이상 필요하지 않음.
     * 더 많은 프로파일링 기능이 추가됨.
     * --yjit-perf가 Linux perf와 함께 프로파일링을 용이하게 하기 위해 추가됨.
     * --yjit-trace-exits가 --yjit-trace-exits-sample-rate=N을 사용한 샘플링을 지원함.
     * 더 철저한 테스트와 다수의 버그 수정이 이루어짐.

  RJIT

     * 순수 Ruby로 작성된 JIT 컴파일러 RJIT이 도입되고 MJIT이 대체됨.
     * RJIT은 Unix 플랫폼의 x86-64 아키텍처에서만 지원됨.
     * MJIT과 달리, 런타임에 C 컴파일러가 필요하지 않음.
     * RJIT은 실험적인 목적으로만 존재함.
     * 생산 환경에서는 YJIT을 계속 사용해야 함.
     * Ruby JIT 개발에 관심이 있는 경우, RubyKaigi의 3일차에 있는 k0kubun의 발표를 확인할 것을 권장함.

  M:N 스레드 스케줄러

     * M:N 스레드 스케줄러가 도입됨.
     * M Ruby 스레드가 N 네이티브 스레드(운영 체제 스레드)에 의해 관리되므로 스레드 생성 및 관리 비용이 감소함.
     * M:N 스레드 스케줄러는 C 확장과 호환성을 깰 수 있으므로 기본적으로 메인 Ractor에서 비활성화됨.
     * RUBY_MN_THREADS=1 환경 변수를 사용하여 메인 Ractor에서 M:N 스레드를 활성화할 수 있음.
     * 비메인 Ractor에서는 항상 M:N 스레드가 활성화됨.
     * RUBY_MAX_CPU=n 환경 변수는 N의 최대 개수(네이티브 스레드의 최대 개수)를 설정함. 기본값은 8임.
     * Ractor당 하나의 Ruby 스레드만 실행될 수 있으므로, 싱글 Ractor 애플리케이션(대부분의 애플리케이션)은 1개의 네이티브 스레드만 사용함.
     * 차단 작업을 지원하기 위해 N보다 많은 네이티브 스레드가 사용될 수 있음.

  성능 개선

     * defined?(@ivar)가 Object Shapes를 사용하여 최적화됨.
     * Socket.getaddrinfo와 같은 이름 해석이 이제 인터럽트될 수 있음(사용 가능한 환경에서 pthreads가 있는 경우).
     * 가비지 컬렉터에 대한 여러 성능 개선 사항이 있음.
          + 젊은 객체가 노인 객체에 의해 참조되면 즉시 노인 세대로 승격되지 않아 주요 GC 수집 빈도가 크게 감소함.
          + 주요 GC 수집을 유발하는 보호되지 않은 객체의 수를 제어하는 새로운 REMEMBERED_WB_UNPROTECTED_OBJECTS_LIMIT_RATIO 조정 변수가 도입됨. 기본값은 0.01(1%)로 설정되어 주요 GC 수집 빈도가 크게 감소함.
          + Write Barriers가 누락된 많은 핵심 유형에 대해 구현됨. 이로 인해 소규모 GC 수집 시간과 주요 GC 수집 빈도가 크게 감소함.
          + 대부분의 핵심 클래스가 이제 Variable Width Allocation을 사용함. 이로 인해 이러한 클래스의 할당 및 해제가 더 빨라지고 메모리 사용량이 줄어들며 힙 단편화가 감소함.
          + 가비지 컬렉터에 약한 참조 지원이 추가됨.

  기타 주목할 만한 변경 사항

     * IRB는 고급 irb:rdbg 통합, ls, show_source 및 show_cmds 명령에 대한 페이저 지원, ls 및 show_source 명령에 의해 제공되는 정보의 정확성 및 유용성 향상, 타입 분석을 사용한 실험적 자동 완성 등을 포함하여 여러 개선 사항을 받음.
     * IRB는 또한 향후 개선을 용이하게 하기 위해 광범위한 리팩토링을 거치고 수십 개의 버그 수정을 받음.

  호환성 문제

     * 인자 없이 블록 내에서 it 호출은 더 이상 사용되지 않으며, Ruby 3.4에서는 첫 번째 블록 매개변수를 참조하게 됨.
     * 사용되지 않는 환경 변수가 제거됨.

  표준 라이브러리 업데이트

     * RubyGems과 Bundler는 사용자가 Gemfile이나 gemspec에 추가하지 않고 다음 gem을 요구할 경우 경고를 표시함. 이는 해당 gem들이 미래 버전의 Ruby에서 번들 gem이 될 예정이기 때문임.
     * 다음과 같은 기본 gem이 추가되거나 업데이트됨: prism 0.19.0, RubyGems 3.5.3, abbrev 0.1.2 등 다수.
     * 다음과 같은 번들 gem이 기본 gem에서 승격되거나 업데이트됨: racc 1.7.3, minitest 5.20.0 등 다수.

  GN⁺의 의견

     * Prism 파서 도입: Ruby 3.3.0의 가장 중요한 특징 중 하나는 새로운 Prism 파서의 도입이다. 이는 Ruby 코드를 더 효율적으로 파싱하고, 오류에 강하며, 유지보수가 쉬운 파서를 제공함으로써 Ruby 개발자들에게 큰 도움이 될 것이다.
     * YJIT의 성능 개선: YJIT의 주요 성능 개선은 Ruby 애플리케이션의 실행 속도를 크게 향상시킬 것이며, 특히 메모리 사용량 감소와 GC 최적화는 대규모 Ruby 애플리케이션의 성능과 안정성에 긍정적인 영향을 미칠 것이다.
     * M:N 스레드 스케줄러: M:N 스레드 스케줄러의 도입은 멀티스레딩 Ruby 애플리케이션의 성능을 개선할 수 있는 잠재력을 가지고 있다. 이는 스레드 관리 비용을 줄이고, 더 효율적인 병렬 처리를 가능하게 할 것이다.

        Hacker News 의견

     * Ruby 3.3의 등장으로, 개발자의 행복을 중시하는 언어인 Ruby가 이전의 느린 이미지를 벗어나 빠른 속도를 자랑함.
          + YJIT 기술과 객체 형태, GC 최적화 등의 혁신을 통해 Ruby의 성능이 크게 향상됨.
          + Shopify와 같은 대형 Ruby 사용 업체들이 Ruby 3.3의 성능 개선을 경험하고 있음.
          + Ruby의 미래에 대해 개인적으로 매우 기대하고 있으며, Ruby 3.3을 고객의 프로덕션 사이트에 적용하는 데 기대감을 표함.
     * Ruby 3.3은 지난 10년간 가장 중요하고 기능이 풍부한 릴리스로, Python보다 먼저 JIT를 출시한 것에 대해 놀라움을 표함.
          + Prism, Lrama, IRB 등 다양한 기능들이 이전 해커뉴스 제출에서 논의됨.
          + Ractor, M:N 스레드 스케줄러, Fibre, Async와 같은 기능들이 Rails의 맥락에서 충분히 언급되지 않았으며, 이 기능들을 프로덕션에서 사용하는 사람들의 경험을 듣고 싶어함.
     * Heroku에서 Ruby 3.3을 사용할 수 있음을 알림.
     * 매년 크리스마스마다 Ruby 언어는 새로운 릴리스를 출시함.
     * Python과 NodeJS를 이미 알고 있는 경우, Ruby를 배우는 것이 가치가 있는지에 대한 질문을 함. Ruby를 매력적이지만 어렵게 느낌.
     * Socket.getaddrinfo와 같은 이름 해석이 중단될 수 있음. 이름 해석이 필요할 때마다 워커 pthread를 생성하고 getaddrinfo(3)를 실행함.
          + 다른 언어 런타임도 비슷한 작업을 하는지에 대한 질문을 함. 스레드 생성이 무겁게 느껴질 수 있지만, 벤치마크에 따르면 오버헤드는 최소화되어 있음.
     * Prism이 흥미로움. Ruby 코드 분석 도구로 Prism을 사용하는 예가 있는지에 대한 질문을 함.
     * RUBY_MAX_CPU=n 환경 변수가 네이티브 스레드의 최대 수를 설정함. 기본값은 8임.
          + 기본값이 논리 코어의 수와 같아야 하는지에 대한 의문을 제기함. Rust의 Tokio와 많은 다른 M:N 런타임들처럼.
     * Prism을 사용한 좋은 예제에 대한 링크를 찾고 있음. 릴리스 페이지에서 ""주목할 만한 API"" 외에는 별다른 것을 보지 못해 실망함을 표함.
     * 완벽한 크리스마스 선물이라고 언급함.
"
"https://news.hada.io/topic?id=12493","Netflix Data Engineering Summit 영상 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Netflix Data Engineering Summit 영상 공개

     * 올 여름, 넷플릭스가 처음으로 진행했던 데이터 엔지니어링 서밋의 발표 영상 플레이 리스트
     * The Netflix Data Engineering Stack (31분)
     * Data Processing Patterns (23분)
     * Streaming SQL on Data Mesh (18분)
     * Building Reliable Data Pipelines (30분)
     * Knowledge Management - Leveraging Institutional Data (36분)
     * Psyberg, An Incremental ETL Framework Using Iceberg (21분)
     * Start Stop Continue for optimizing complex ETL jobs (17분)
     * Media Data for ML Studio Creative Production (34분)
"
"https://news.hada.io/topic?id=12567","Stirling-PDF - PDF파일 수정용 로컬 웹앱 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Stirling-PDF - PDF파일 수정용 로컬 웹앱 오픈소스

     * PDF파일에 대한 다양한 작업을 지원
          + 분할, 병합, 크롭, 순서 정렬, 페이지 삭제, 회전, 압축 (GUI 제공)
          + 페이지 넘버 추가하기, 컬러/대비 조절, 이미지 to PDF, PDF to 이미지, 이미지 추가 및 추출
          + Doc, PNG, XLS, PPT, TXT, HTML, 마크다운 등 파일을 PDF로 변환
          + 워터마크 추가, 메타데이터 및 권한 변경
          + 암호 추가 또는 삭제
          + 사인 추가/생성/작성
          + 빈페이지 인식 및 자동 제거
     * 도커로 로컬에서 호스팅하여 사용하는 웹앱
     * 처음에 ChatGPT를 통해서 만들기 시작해서 다양한 기능을 추가한 것
     * Spring Boot + Thymeleaf + PDFBox + LibreOffice + OcrMyPDF + PDF.js + PDF-LIB.js
"
"https://news.hada.io/topic?id=12576","Valetudo - 클라우드 연결없이 로컬 전용 운영을 위한 로봇 청소기 소프트웨어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Valetudo - 클라우드 연결없이 로컬 전용 운영을 위한 로봇 청소기 소프트웨어

     * 클라우드 없이 작동하는 로봇 청소기를 위한 소프트웨어 솔루션
     * 2018년에 시작되어 신뢰할 수 있는 솔루션으로 성장

Valetudo의 사용 이유

     * 공급업체에 구애받지 않음
     * 클라우드 연동을 제거
          + 서버 종속성 제거(회사가 망하거나 매각해도 유지 가능)
          + 강제 업데이트 없음(유료화 되거나 기능 제거)
          + 계정이 필요없음

Valetudo의 단점

     * Opionated Software임
     * 기존 클라우드 연결이 중지되므로, 공급업체가 제공하는 앱도 사용 불가. 둘을 동시에 사용할수 없음
     * 루팅을 통해 Valetudo를 설치하게 되므로, 일부 모델을 제외하고 원래대로 돌아갈 수 없음
     * 특정 로봇만 지원되며, 다층/멀티맵을 지원하지 않음
     * 영어만 지원됨

지원되는 로봇

     * Xiaomi : V1, 1C, 1T, X10 Plus, Vacuum-Mop P/2 Ultra
     * Dreame : D9, D9 Pro, F9, L10 Pro, Z10 Pro, W10, W10 Pro, L10s Ultra, D10s Pro, D10s Plus
     * Roborock : S5, S6, S6 Pure, S4, S4 Max, S5 Max, S7, S7 Pro Ultra, Q7 Max
     * MOVA : Z500
     * Viomi : V6, SE
     * Cecotec : Conga 3290, Conga 3790
     * Proscenic : M6 Pro
     * Commodore : CVR 200

Valetudo는 정원과 같음

     * Valetudo 프로젝트는 인터넷상의 한 사람의 취미로, 상업화하거나 확장할 의도가 없음
     * Valetudo를 개인 소유의 공공 정원으로 생각하며, 무료로 방문하고 즐길 수 있음
     * 정원에 대한 변경을 요구할 근거가 없으며, 정원의 개방은 모두에게 선물로 여겨져야 함

GN⁺의 의견

     * Valetudo는 사용자의 프라이버시를 존중하고 클라우드 의존성을 없애는 로봇 청소기 솔루션으로 중요함.
     * 오픈소스 라이선스를 통해 사용자가 기기의 작동을 이해하고 필요에 따라 수정할 수 있는 자유를 제공하는 점이 매력적임.
     * 개인이 운영하는 프로젝트로서 사용자들에게 무료로 제공되는 것이 흥미롭고, 이러한 커뮤니티 기반의 개발 방식이 소프트웨어 산업에 긍정적인 영향을 미칠 수 있음.

        Hacker News 의견

     * 이 프로젝트는 오픈 소스이면서 일반인들에게 접근 가능하려고 노력하고 있으며, 어느 정도 성공하고 있음.
          + 최종 사용자를 위해 유럽에서 판매되는 일반 로봇을 루팅하기 위한 표준화된 PCB를 공유할 수 있는 텔레그램 그룹이 있음.
          + 프로젝트의 주 개발자가 직접 그룹에서 활동적으로 도움을 주고 있음.
          + 그러나 포크(fork)나 맞춤형 PCB에 대한 논의는 비개발자들을 혼란스럽게 할 수 있으므로 좋지 않게 보임.
     * 개발자 측면에서는, 쉽고 표준화된 것을 만들기 위해 로봇 특정 기능을 지원하지 않는 등의 타협이 필요했음.
          + 이는 파워 유저라면 아마 자신만의 포크를 운영할 것임을 의미함.
     * Valetudo를 설치하는 것은 중국의 폐쇄적인 소스에서 유럽의 소스가 가능한 정원으로 옮겨가는 것과 같음.
          + 그럼에도 불구하고, 개인적으로 지원되지 않는 포크를 Dreame W10에서 운영하는 것에 매우 만족함.
     * Dreame Z10 pro에서 1년 이상 Valetudo를 사용해왔으며, 훌륭한 경험임.
          + Valetudo 호환성이 없는 로봇 진공 청소기는 절대 구매하지 않을 것임.
          + 아직 많이 사용하지는 않았지만, HomeAssistant와의 비교적 간단한 통합도 감사함.
     * 지원되는 로봇 목록에 대한 직접 링크 제공.
     * 37c3에서 진행된 최근 강연을 볼 수 있으며, 다양한 플랫폼에서 루트 권한을 얻는 과정에 관심이 있다면 시청 권장.
     * Neato Robotics Botvac Connected를 소유하고 있으나, Neato가 서비스를 중단함에 따라 클라우드 의존 기능이 무용지물이 됨(원격 시작, 아이폰 앱 등).
          + 불행히도 Valetudo와 호환되지 않음.
          + 중국의 $Mi 로봇들은 Neato가 가진 흡입력을 갖추지 못함.
          + Dyson 제품은 좋아 보이지만 너무 비쌈.
     * 주제에서 벗어난 이야기지만, 바우하우스 스타일의 캔틸레버 의자를 좋아하지만 로봇들이 그 위에 올라가려 하고 갇히거나 시끄러운 문제가 있었음.
          + 비전/라이다 로봇들이 이러한 문제를 피할 수 있는지 궁금함.
     * Apache-2.0 라이선스는 매우 허용적인 라이선스로, 많은 작업이 무료로 공유되고 있음.
          + 사람들이 Valetudo를 판매하거나 자신의 작업으로 속이는 것을 신뢰함.
          + Tivoization의 위험에 처한 프로젝트의 완벽한 예로, OEM들이 쉽게 자신들의 진공 청소기에 Valetudo를 적용하고 펌웨어 변경을 사용자와 개발자가 할 수 없게 만들 수 있음.
          + 이를 방지하기 위해 GPLv3가 발명됨.
     * iOS에서 Valetudo를 실행하는 방법을 찾을 수 없어 아쉬움.
          + 기본 앱이 때때로 너무 느림.
     * Roomba 하드웨어는 잠겨 있어 지원되지 않음.
          + 그러나 이것은 정말 멋진 일로, Roomba가 집의 평면도를 가지고 있고 앱에서 지속적으로 추가 구매를 유도하는 것을 좋아하지 않음.
          + HA 통합은 예를 들어 더 동적인 스케줄링을 가능하게 함(집에 아무도 없을 때 청소 시작, 이 방을 저 방보다 우선시하기, 사람들이 돌아올 때 기지로 돌아가기, 쓰레기 수거일 전날 비우거나 교체할 것을 알림).
     * 오직 오래된 모델만 지원하며 대부분의 경우 복잡한 전체 분해와 브레이크아웃 보드/PCB 지식이 필요함.
          + 이러한 것이 존재하는 것은 훌륭하지만, ""평균"" 고급 사용자에게는 해당되지 않음.
"
"https://news.hada.io/topic?id=12596","세대 쓰레기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 세대 쓰레기

소비자의 실망

     * 약 5년 전, 7달러에 구입한 오래된 감귤 주스기는 가스 폭발과 망치 공격을 견딜 수 있을 것 같은 견고함을 가지고 있었음.
     * 이 주스기는 1940년대 제품으로, 70년이 지난 지금도 마치 새 것처럼 완벽하게 작동함.
     * 반면, 최근 구입한 커피 분쇄기들은 1년 이내에 고장 나고, 냉장고, 진공 청소기, 계량컵 등도 곧 고장이 나거나 사용하기 어려워짐.

일상 속 불편함

     * 타겟에서 구입한 귀여운 노란 장갑은 두 번째 착용 때 풀어짐.
     * 가득 찼을 때 서 있지 못하는 새 여행 가방, 보증 기간이 지난 후 고장 나는 노트북 컴퓨터, 고속도로에서 모든 동력을 잃은 하이브리드 세단 등이 문제를 일으킴.

품질 저하에 대한 고찰

     * 트위터를 통해 수집한 2,000개의 답변에서 세탁기, 건조기, 청바지 등의 품질 저하에 대한 불만이 많음.
     * 일부는 환경 규제, 중국과의 무역 관계, 자본주의 등을 문제의 원인으로 지목함.
     * 물건들이 점점 더 빨리 고장 나고, 이는 생태학적으로도 손실이라는 의견이 있음.

품질 저하의 영향

     * 일부는 물건들이 저렴해지길 원하기 때문에 품질이 떨어진다고 주장하지만, 실제로는 인플레이션을 고려하면 예전과 같은 품질을 유지하고 있다고 반박함.
     * 저렴한 물건들은 종종 가치가 없으며, 구매하고 반품하는 데 드는 에너지와 자원 낭비를 고려하면 실제로는 부정적 가치를 가짐.

디지털 세계로의 전환

     * 세상이 디지털화되고 있으며, 미래에는 디지털 부동산과 디지털 의류, 디지털 주스 등이 등장할 것임.
     * 물리적인 주스기는 여전히 작동할 수 있지만, 다른 주방 기구들은 고장 날 것이며, 물건들이 오래가지 않아 미래에 대한 믿음과 관심을 잃게 됨.

GN⁺의 의견

     * 현대 제품들의 품질 저하는 소비자들에게 큰 실망을 안겨주고 있으며, 이는 환경적, 경제적 손실로 이어짐.
     * 제품의 내구성 문제는 단순한 불편함을 넘어서 사회적, 정신적 삶의 질에 영향을 미칠 수 있음.
     * 이 글은 현대 사회에서 물건의 가치와 지속 가능성에 대한 중요한 질문을 던지며, 소비자들이 어떻게 더 나은 품질의 제품을 요구하고 선택할 수 있는지에 대한 흥미로운 토론을 제공함.

        Hacker News 의견

     * 이 기사는 우리가 예전에 구입한 많은 제품들이 더 오래 지속되도록 만들어졌고 실제로 더 오래 지속되었다고 암시함.
          + 주방 가전 제품이 초기 예시로 언급됨.
          + 트위터에서 불만을 모집한 스레드에 대한 사람들의 반응이 증거로 제시됨.
          + 하이브리드 세단 언급 시, 현대 자동차가 과거 어느 시점의 자동차보다 훨씬 더 신뢰할 수 있고 내구성이 있다는 데이터 인지.
     * 새 집을 위해 많은 가구와 다른 물건들을 구매해야 했는데, 모든 제품 카테고리가 저가형 쓰레기와 고급 부티크로 양분되어 있다는 점이 눈에 띔.
          + 기능이나 장식이 기본적이면서도 고품질인 중간 시장 제품이 거의 없음.
          + 1,000달러 미만의 저품질 소파와 5,000달러 이상의 고급 소파 사이에 가격대가 있지만 대부분 과대평가된 쓰레기임.
          + 식탁, 찬장, 창문 처리, 요리 기구 등 다른 제품들도 마찬가지 상황.
          + 가능한 한 ""빈티지"" 상품을 찾아 헤매는 일이 마치 또 다른 전일제 직업처럼 느껴짐.
     * 소프트웨어 개발자가 되기 전, 9년간 HVAC 기술자로 일했고, 그 중 5년은 설치자로 일함.
          + 때때로 60-80년 된 난방기/보일러를 제거하는 일을 함.
          + 오래된 시스템을 제거할 때마다 집주인은 ""이것이 다음 60년 동안 지속되겠지?""라고 물음.
          + 가장 비싼 가정용 기기조차도 가능한 한 저렴하게 만들어짐.
          + 1920년대 보일러를 제거하는 날은 가장 힘든 날 중 하나임.
     * 저자가 선택 편향을 간과함: 1년, 5년, 10년 후에 고장 난 골동품은 오래전에 매립지로 갔음.
          + 할아버지(1922-2006)는 ""예전처럼 만들어지지 않는다고 사람들이 말하지만, 50마일이나 100마일마다 고장 나던 구식 차들을 기억함.
          + 현대 자동차를 선호하며, 비록 스스로 고칠 수 없더라도 더 좋아함.
     * 전자 제품의 짧은 전원 코드는 변호사들과 각 전선에 붙어 있는 무수한 스티커 때문임.
          + 사람들은 저렴한 가격에 일정 수준의 기능을 원함.
          + 제조업체들은 매우 저렴한 가격으로 기능의 모방품을 제공하는 방법을 알아냄.
          + 고품질 제품을 만드는 데는 많은 시간과 비용이 듬.
          + 고품질 제품을 저렴한 가격에 대량으로 생산하는 제조업체는 성공함(일본 및 한국 제조업체를 생각해보라).
     * 친구들이 새로운 세탁기와 건조기 세트에 3,000달러를 지출했지만 세탁기가 이미 문에서 새기 시작함.
          + 보증 수리를 추구하는 것은 큰 번거로움.
          + 90년대 후반의 세탁기와 건조기 세트를 사용하고 있으며, 이는 서비스를 염두에 두고 설계된 것으로 보임.
     * 생존자 편향: 아직 작동하는 오래된 가전 제품은 작동하는 것들뿐임.
          + 투자가 집중되고 있는 제품은 품질이 뛰어나고, 생명주기의 끝을 향해 가는 제품은 마지막 몇몇 모서리가 잘려나가고 있음.
          + 품질 좋은 제품을 원한다면 그에 상응하는 비용을 지불해야 함.
     * 조부모님이 살고 있는 100년 이상 된 농가는 처음에 전기가 없었음.
          + 모든 전기 콘센트는 분해가 가능하고, 케이블을 쉽게 교체할 수 있음.
          + 케이블 끝의 가전 제품도 마찬가지로 쉽게 분해 및 조립 가능.
          + 내부 부품 대부분이 표준이어서 필요한 경우 교체가 용이함.
     * Miele 가전 제품, Liebherr 냉장고, Dyson 진공청소기 등을 구매할 수 있음.
          + 스테인리스 스틸 드럼 세탁기와 사출 성형 플라스틱 드럼 세탁기 중 선택 가능.
          + 스테인리스 스틸 부품을 만드는 것은 플라스틱 몰드를 만드는 것보다 훨씬 어렵고 비쌈.
     * 1950년대에 토스터를 구입하는 것은 가족에게 큰 투자였고, 2023년에 2,000달러를 들여 고급 토스터를 구입하면 그것도 아마 매우 좋을 것임.
"
"https://news.hada.io/topic?id=12603","Blot - 폴더를 웹사이트로 변환하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Blot - 폴더를 웹사이트로 변환하기

     * 폴더를 웹사이트로 변환하여, 폴더 내 파일들이 웹사이트의 게시물이 됨
     * 텍스트, 마크다운, 이미지, 워드 문서, 구글 문서, 북마크, HTML, Org Mode 파일 지원
     * 폴더 동기화 이용 가능 : Dropbox, Git, Google Drive
     * 이름이 밑줄로 시작하는 파일과 폴더는 게시물이나 페이지가 되지 않음(게시물 내에서 링크하거나 삽입 가능 : 이미지 파일등)
     * 사이트 폴더 내의 파일들은 공개적으로 접근 가능
     * 이미지, 비디오, 오디오 파일을 게시물에 삽입하거나 파일을 방문자와 공유하는 데 유용
     * Nginx + Node.js Server + Redis

   GitHub 저장소 : https://github.com/davidmerfield/blot

        Hacker News 의견

     * Blot의 발표와 목표
          + Blot은 약 10년 전 해커뉴스에서 처음 발표되었으며, 많은 도움을 받아 시작됨.
          + Blot의 목적은 정적 사이트 생성기(static site generator)의 이점을 정적 사이트 생성기에 익숙하지 않은 사람들에게 제공하는 것임.
          + Blot은 인터페이스가 없는 블로깅 플랫폼으로, 폴더를 웹사이트로 변환함.
     * Blot의 기능과 사용자 경험
          + Blot은 파일을 HTML로 변환하고 결과를 제공하는 Express 애플리케이션임.
          + Blot의 개발자 David는 웹 개발에 익숙하지 않은 사용자도 쉽게 사용할 수 있도록 목표를 설정함.
          + 한 사용자는 자신의 정적 Hugo 블로그를 Blot으로 이전했으며, Blot을 통해 계획했던 사진 사이트를 성공적으로 구축함.
     * Blot의 개발과 기여
          + Blot의 코드는 공개 도메인이며, David는 지속적으로 Blot을 개발하고 있음.
          + Blot의 진행 상황과 변경 로그는 git 커밋과 직접 연결되어 있어 개발 과정을 볼 수 있음.
     * Blot과 유사한 기술의 순환
          + 기술은 종종 전통적인 방식으로 회귀하는 경향이 있음.
          + 사람들은 종종 처음에 올바른 방법을 찾았다고 주장함.
          + 기술에 대한 관심이 사그라들면, 그 해결책이 확장성이 없다는 블로그 글이 등장함.
          + 이러한 순환은 기술의 발전과 함께 계속됨.
     * Blot과 유사한 서비스
          + tiiny.host와 같은 비슷한 서비스도 있으며, 사용자들은 이를 선호함.
     * Blot에 대한 개인적인 반응
          + 한 웹 개발자는 10년 이상의 경력에도 불구하고 Blot을 처음 들어보았으며, 관리가 거의 필요 없는 콘텐츠를 게시하고 싶을 때 이상적이라고 생각함.
"
"https://news.hada.io/topic?id=12610","애플 실리콘 VM들이 왜 이렇게 다른가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플 실리콘 VM들이 왜 이렇게 다른가?

애플 실리콘 VM이 왜 다른가?

     * 애플 실리콘 맥에서 macOS 가상 머신(VM)을 실행하는 것은 인기가 없어 보일 수 있지만, 애플에게 오랫동안 중요한 목표 중 하나임.
     * M시리즈 맥에서 가상화 프로그램을 사용하면, 인텔 맥에서 macOS 및 기타 운영 체제를 가상화하는 것과 얼마나 다른지 알 수 있음.
     * 가상화가 왜 중요하고, 어떻게 그렇게 달라졌는지 설명하는 내용.

애플 실리콘의 세 가지 기둥

     * 2020년 6월 WWDC에서 크레이그 페더리기가 애플 실리콘의 세 가지 기둥을 발표함: 양쪽 아키텍처에서 실행되는 유니버설 앱, 인텔 코드를 Arm 명령어로 번역하는 로제타 2, 그리고 가상화.
     * 애플이 개발자 전환 키트를 출시하기도 전에, 안드레아스 벤드커가 리눅스를 게스트로 실행하는 Parallels Desktop의 사전 출시 버전을 시연했지만, 윈도우에 대한 언급은 없었음.

가상화의 초기

     * 가상화 초기에는 하드웨어에서 직접 실행되는 타입 1 하이퍼바이저와, 하드웨어 위에 주 운영 체제를 실행하고 그 위에서 하이퍼바이저가 실행되는 타입 2(호스티드)로 구분됨.
     * 데스크탑 컴퓨터에서는 VMware Fusion, Parallels Desktop, Oracle VirtualBox와 같은 타입 2 가상화 제품이 더 흔함.

하드웨어 지원과 가상화

     * 하이퍼바이저에 대한 하드웨어 지원이 있으면 수정되지 않은 게스트 운영 체제를 실행하기가 더 쉬움.
     * 인텔의 VT-x 기능 세트 또는 Arm CPU의 AArch64 가상화를 사용할 수 있음.
     * 장치 지원 문제는 가상화 프레임워크에서 해결하거나 가상화 프로그램이 처리할 수 있음.

애플 실리콘 칩의 독특함

     * 애플 실리콘 칩의 모든 하드웨어 장치는 인텔 맥의 해당 장치와 다름.
     * 애플이 외부 사용을 위해 완전히 문서화하고 싶어도, 인텔 맥의 장치 지원에 필요한 엔지니어링 노력은 제3자에게 너무 비쌌을 것임.
     * 따라서 하이퍼바이저로 시작하여 완전한 가상화 소프트웨어를 구축하기를 기대하는 것은 실행 가능하지 않았으며, 애플과 사용자가 기대하는 높은 성능을 달성하기도 어려웠음.

Virtio 드라이버와 가상화

     * 애플은 대신 macOS에 장치 지원을 내장하는 형태로 Virtio 드라이버를 구축함.
     * Virtio는 I/O 장치에 대한 추상화 계층을 제공하는 표준으로, 게스트 운영 체제가 파일을 열려고 할 때, 이를 Virtio 프론트엔드 스토리지 장치 파라 드라이버로 전달하고, 거기서 Virtio 백엔드 드라이버를 통해 스토리지 장치와 상호 작용함.
     * 가상화 앱을 만드는 것은 필요한 Virtio 장치를 구성하고 열어 게스트, Virtio, 호스트가 작업을 처리하게 하는 것임.

애플의 Virtio 선택

     * 애플의 Virtio 선택은 리눅스가 이미 좋은 Virtio 지원을 가지고 있었기 때문에 영향을 받았으나, 당시 macOS는 Virtio 지원이 없었음.
     * 애플 엔지니어들은 Monterey 출시 전 몇 년 동안 macOS에 Virtio 지원을 구축함.
     * macOS의 Virtio 구현은 키보드와 포인팅 장치, 공유 클립보드('Spice'), Metal 및 GPU 지원을 통한 고성능 그래픽을 지원하는 확장 기능을 포함함.

Virtio 모델의 장점

     * Virtio 모델에서는 운영 체제가 지원을 제공하는 것이며, 이는 VMware와 Parallels와 같은 벤더들에게 개발 비용을 줄여주고, 그들의 제품의 상업적 가치를 감소시킴.
     * 애플은 애플 실리콘에서 가상화가 지원하는 하드웨어와 기능을 결정함.

가상화의 미래와 유연성

     * VM에서 이전 버전의 macOS를 실행하면 사용자가 현재 macOS에서 로제타 2 지원이 중단된 후에도 인텔 전용 앱을 실행할 수 있음.
     * 애플 실리콘 맥에서 최소 macOS 버전과 호환되지 않는 소프트웨어를 실행할 수 있음.
     * 리눅스 또는 macOS를 사용하여 개발자는 Docker와 같은 경량 VM 패키지를 배포할 수 있음.

GN⁺의 의견

     * 애플 실리콘 맥에서의 가상화는 기존 인텔 기반 가상화와 다른 접근 방식을 취하고 있으며, 이는 애플이 하드웨어와 소프트웨어 통합을 강화하려는 전략의 일부로 보임.
     * Virtio를 통한 가상화는 개발자들에게 비용 효율적인 솔루션을 제공하며, 애플의 통제 하에 성능 최적화를 가능하게 함.
     * 가상화 기술의 발전은 애플 실리콘 맥 사용자들에게 장기적으로 다양한 소프트웨어 환경을 제공할 수 있는 가능성을 열어줌, 특히 오래된 애플리케이션과 시스템을 지원하는 데 유용할 것으로 예상됨.

   가상화의 미래 부분은 좀 이상해 보입니다.
   가상화가 가능하다고 무조건 기존 시스템을 호환할 수 있는 것은 아닙니다. 결국 어딘가에선 x86 명령어를 arm 명령어로 변환해 주어야 합니다.
   이것을 HW나 OS(로제타?)에서 지원해 주지 않는다면, 결국 VM 단에서 에뮬레이션 할 수 밖에 없단 것인데, 이럴 경우 성능 저하가 매우 심합니다.
   지금도 애플 실리콘 Mac에서 x86용 linux를 설치할 수는 있습니다만, 성능은 미칠듯이 느립니다. (작년인가에 x86 용 바이너리가 필요해 빌드용으로 설치해 봤다가 바로 포기했습니다.)

        Hacker News 의견

     * 윈도우즈는 하이퍼-V에 의존하는 기능이 많으며, 이를 활성화하면 윈도우즈가 직접 부팅되지 않고 하이퍼-V가 시작되어 주 윈도우즈 시스템이 특권을 가진 VM에서 실행됨.
     * 애플 실리콘에서 x86-64 윈도우즈/리눅스 가상화의 현재 상태에 대한 정보를 찾는 사람이 있으며, 이에 대한 중요한 응용 프로그램에 대해 기사가 언급하지 않음을 아쉬워함.
     * 모든 OS 사용자가 OS의 격리된 VM에 로그인하기를 바라며, 이를 통해 사용자는 자신의 애플 컴퓨터의 소유권을 유지할 수 있음.
     * macOS는 동시에 두 개의 VM만 실행할 수 있으므로, 맥 미니를 빌드 서버로 사용하려는 경우 가장 저렴한 모델을 구매하는 것이 좋음.
     * Parallels를 사용하여 MacOS VM을 개발에 사용하고 싶었지만, 애플 ID로 로그인할 수 없어 사용에 제한이 있음.
     * 도커가 리눅스/amd64 플랫폼에서 거의 네이티브 성능으로 빠르게 동작하는 반면, x86 UTM VM이 훨씬 느린 이유에 대해 혼란스러워함.
     * 윈도우즈를 위한 virtio 레이어의 진행 상황이나 누가 개발하고 있는지, 그리고 가까운 미래에 작동할 가능성이 있는지에 대한 질문이 있음.
     * 러스티 러셀이 작성한 드라이버에 대한 언급이 있는데, 그는 소프트웨어 개발에 대한 깊은 통찰력을 공유하므로 트위터에서 팔로우할 것을 권장함.
     * 모든 상용 데스크탑 VM(VMWare Fusion/Parallels/UTM/Vimy)이 이제 virtio 모델을 사용하는지, 그리고 이론적으로는 ARM64 윈도우즈가 모두 비슷하게 동작해야 하는지에 대한 의문이 있음.
     * M2 애플 실리콘 칩에서 Qemu VM을 한 명령으로 만드는 방법을 약 1년간 찾으려고 시도했지만, 맥OS나 AsahiLinux에서 Alpine Linux + Sway WM을 Qemu로 실행하는 것이 x86-64에서는 상대적으로 간단한 반면, 어려움을 겪고 있음.
"
"https://news.hada.io/topic?id=12598",""파티클 라이프" 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ""파티클 라이프"" 기술

입자 생명 시뮬레이션

     * 원자와 같은 입자들 사이의 단순한 인력과 척력의 규칙을 사용하여 원시 인공 생명을 시뮬레이션하는 간단한 프로그램.
     * GUI 요소를 제외하고 코드는 한 페이지 미만임.
     * 비디오 튜토리얼과 안내는 아래에서 확인 가능함.

자세히 알아보기 (YouTube 비디오 튜토리얼)

     * YouTube 비디오 튜토리얼 링크 제공.

온라인 데모 (JavaScript 버전)

     * 2D 및 3D 라이브 데모 링크 제공.

인터페이스 (C++ 버전)

예시 결과

재현할 수 있는 몇 가지 흥미로운 패턴

     * 이 패턴들을 재현하기 위해 매개변수를 정확히 일치시킬 필요는 없음.
     * 흥미로운 패턴을 얻는 가장 좋은 방법은 먼저 무작위 매개변수 탐색을 시도하는 것.
     * 흥미로운 패턴을 발견하면 점진적으로 미세 조정을 시도함.
     * 국소 최대치에 머무르지 않기 위해 가끔 큰 매개변수 점프를 할 수 있음.

사용 방법

     * 이 저장소를 다운로드하고 압축을 풀어 /particle_life/bin/ 폴더로 이동한 다음 particle_life.exe를 클릭함.

코드

     * 소스 코드는 C++, JavaScript, Python으로 제공됨.
     * YouTube 비디오 튜토리얼 링크 제공.
     * C++ 프로그램에 기여하고 싶다면 핵심 알고리즘은 ""/particle_life/src/ofApp.cpp""의 처음 100줄에 있음.
     * 나머지는 openFrameworks 라이브러리에 의해 제공되는 GUI 구성 요소 및 렌더링 컨트롤임.
     * 시작하려면 이 저장소와 openFrameworks 라이브러리를 다운로드하고, openFramework의 projectGenerator를 사용하여 /particle_life/ 폴더를 프로젝트에 가져옴.
     * 또는 새 openFramework 프로젝트를 생성하고 ofxGui를 추가한 후, 생성된 프로젝트 파일을 여기서 제공하는 /src/ 폴더로 교체함.
     * 이제 C++ 코드를 컴파일할 수 있음.

다른 포트

     * Godot, Rust, Go-1, Go-2, Go-3, Python, Lua, QB64-PE, WebGL, Java, C# Winforms, FreeBasic 등 다양한 언어로 포팅된 버전 목록 제공.

JavaScript 코드 예시

     * JavaScript 코드 예시와 최적화된 버전인 particle_life.html 파일을 확인할 수 있음.

관련 주제

     * 입자 생명 시뮬레이션, 원시국물 - 진화, 콘웨이의 생명 게임, 셀룰러 오토마타, 자기 조직화 패턴 등에 대한 설명.
     * 이 프로젝트는 Jeffery Ventrella의 Clusters에서 영감을 받았으며, 충돌 감지를 구현하지 않아 실시간으로 수천 개의 입자를 시뮬레이션할 수 있었음.
     * GUI 컨트롤을 추가하여 매개변수를 실시간으로 쉽게 미세 조정하고 탐색할 수 있게 함으로써, 매우 단순한 관계 모델에서 본 적 없는 패턴이 나타나게 됨.
     * 이 코드는 교육 자료로 시작되었으며, 복잡성이 단순성에서 비롯될 수 있음을 증명하기 위해 비프로그래머와 일반 대중을 대상으로 함.

할 일 목록

    1. 매개변수를 저장하고 불러올 수 있는 기능 추가 (사람들이 흥미로운 모델을 쉽게 공유할 수 있도록)
    2. 더 많은 입자 유형을 추가할 수 있는 기능 (현재는 네 가지 입자 유형으로 고정)
    3. 현재 가장 큰 병목 현상은 모든 입자 간의 쌍별 거리를 계산하는 중첩된 for 루프로, 계산 복잡도가 이차적임.
    4. 3번 항목의 대안으로, 쌍별 거리 계산은 GPU에서 계산할 수 있을 정도로 병렬 처리가 가능함.
    5. 화면 크기를 조정하는 기능 추가 및 경계 검사 개선 (많은 빠른 움직임을 가진 입자들이 화면 경계를 벗어날 수 있음).
    6. 매개변수에 대한 더 세밀한 제어를 가능하게 하는 더 직관적인 UI 추가.
    7. 무작위 버튼 추가 또는 더 나은 방법으로, 초기 규칙을 지속적으로 변화시키는 간단한 메타 규칙을 가짐으로써 패턴이 국소 최대치에 머무르지 않고 계속 변화하게 함.
    8. 매개변수를 선택하고 최적화하기 위해 진화 알고리즘을 사용하는 것이 더 나은 방법이지만, 이를 위해서는 적합도 함수를 작성해야 함. 현재 이 프로그램의 영역에서 적합도 함수가 무엇인지 알지 못함.

GN⁺의 의견

     * 이 프로젝트는 복잡한 생명 현상이 단순한 규칙에서 어떻게 발생할 수 있는지를 시각적으로 보여주는 데 큰 가치가 있음.
     * 프로그래밍과 인공 생명 연구에 관심이 있는 초급 소프트웨어 엔지니어에게 흥미로운 입문 자료가 될 수 있음.
     * 다양한 언어로 포팅된 버전이 있어서, 다양한 프로그래밍 언어에 대한 이해를 넓히는 데 도움이 될 수 있음.

        Hacker News 의견

     * 학교에서 처음 코딩 프로젝트로 Conway의 생명 게임을 했는데, 흑백이 지루해서 RGB ""유전자""를 도입하고 부모의 색을 조합하여 변이를 주었음. 보드를 점령하는 ""파벌""을 보는 것이 재미있음.
          + 데모: genetic-life.surge.sh
          + 소스 코드 (C++에서 Rust/WASM으로 포팅됨): github.com/franky47/genetic-life
     * 가장 흥미로운 결과물은 한동안 크고 불안정한 덩어리와 안정된 덩어리가 형성되고, 그 상태로 정지하는 것이었음. 그 전에는 기대했던 대로 물체들이 만나고 합쳐지는 현상을 관찰함.
          + 링크: hunar4321.github.io/particle-life
     * 최근 비슷한 것을 만들었는데, 이 버전은 모든 것을 WebGL 셰이더로 처리하고 시뮬레이션 상태를 텍스처/유니폼에 유지함. 더 많은 입자를 시뮬레이션하고 그릴 수 있지만, 일부 지원되지 않는 WebGL 확장 기능을 사용하기 때문에 모든 장치에서 실행되지 않을 수 있음.
          + 링크: webgl-particle-life.netlify.app
          + 소스 코드: github.com/ath92/particle-life
     * 이것은 John Conway의 생명 게임보다 더 복잡한 버전으로, 작은 스케일에서 쉽게 생명과 같은 형태가 형성되는 것이 놀랍고, 우리 우주의 매개변수가 생명 형성을 어렵게 만든 것처럼 보임.
     * 관련 링크:
          + ""Particle Life Emerges from Simplicity"" - news.ycombinator.com/item?id=34156592 - 2022년 12월 (1개의 댓글)
          + ""Particle Life Simulation"" - news.ycombinator.com/item?id=33680845 - 2022년 11월 (1개의 댓글)
          + ""Particle Life"" - news.ycombinator.com/item?id=21875720 - 2019년 12월 (7개의 댓글)
     * Conway의 생명 게임에 다채로운 '유전자'를 섞는 것은 마치 무지개 팔레트로 코딩하는 것 같고, 덩어리들은 자신들만의 작은 드라마를 연출한 후 그냥 휴식을 취하는 것 같음. 시뮬레이션에서는 멋진 동작과 형태가 나타나는데, 마치 캐릭터 대신 형태를 가진 미니 슈퍼히어로 영화 같음.
     * ""Altphy""라는 3D 실험을 시작했지만, 실시간 처리에는 너무 복잡해서 의도대로 작동하지 않음. 코드의 일부나 아이디어가 언젠가 발전할 수 있을 것 같아 공유함.
          + 소스 코드: github.com/aDeveloperCase/altphy
     * Godot 4에서 컴퓨트 셰이더를 사용하여 이와 유사한 작업을 시도했음. 관심이 있다면 확인해볼 것을 추천함.
          + 소스 코드: github.com/jasonjmcghee/compute-shaders
     * 3D JS 버전을 보고 있으며, 이것은 원래 Conway의 생명 게임이나 90년대 Primordial Life 스크린 세이버 이후로 가장 좋아하는 것일 수 있음. 셰이더 지원을 추가하는 것을 고려해볼 것을 제안함. 느리고 ""더 블로비한"" 버전을 전체 화면으로 실행하는 것을 보고 싶음. 아마도 맥을 난로로 만들 수도 있지만, 지금은 그것도 보너스임.
     * 매우 멋진 작업이지만, 이를 벽에 걸린 TV에서 실행할 수 없어서 아쉬움. ""Particle Life""를 물리학자를 위한 티셔츠 브랜드로 오해했는데, 티셔츠에는 ""당신의 말을 듣고 나니, 당신은 그저 양자장에서의 불운한 진동에 불과하므로, 당신이 하는 모든 말을 무시해도 정당하다고 느낀다""와 같은 슬로건이 있을 것으로 기대했음.
"
"https://news.hada.io/topic?id=12529","HN에 알림: 메리 크리스마스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            HN에 알림: 메리 크리스마스

        Hacker News 의견

     * 한 해커뉴스(HN) 사용자는 자신의 삶에서 많은 변화가 있었음에도 불구하고 HN이 유일한 일관된 요소였다고 말하며, 이 사이트를 만드는 모든 사람들에게 감사의 인사를 전하고 메리 크리스마스를 기원함.
     * 다른 사용자는 산타클로스의 썰매 비밀이 풀렸다고 농담하며, 산타가 양자 현상이어서 모든 집에 동시에 있지만 누군가가 그를 보면 확률 함수가 붕괴되어 오직 한 집만 장난감을 받는다고 말함. 크리스마스를 즐기되 산타를 보지 말라고 덧붙임.
     * 또 다른 사용자는 올해가 자신에게 끔찍했다고 언급하며, 일자리를 찾지 못하고 중요한 자산을 팔아야 했다고 말함. iOS의 자동수정 기능이 여전히 끔찍하다고 불평하면서 내년이 더 나아지길 희망함.
     * 하루도 빠짐없이 HN을 방문하는 사용자는 18세 때부터 매일 사이트를 방문했으며, 중요하게 생각하는 게시물과 댓글의 스크린샷을 수천 개 찍어 태그를 붙여 정리하고 싶어함. 이러한 스크린샷은 개인적인 행위이며, 대부분을 의미 있게 사용하지 않을 수도 있지만, 그 순간 중요하거나 영향력 있었음. HN은 자신의 성장에 매우 중요했으며, 다양한 사람들이 참여하는 것에 감사함을 표시하며 메리 크리스마스를 기원함.
     * 한 사용자는 2023년이 자신에게 끔찍한 해였지만 HN이 주의를 끌고 삶을 구하는 데 도움이 되었다고 말함. 웃음, 흥미로운 제출물, 멋진 이야기, 몰입도 높은 토론에 대해 HN 커뮤니티에 감사함을 표시함.
     * 다른 사용자는 지난 몇 년간 가족의 암 투병과 사업 문제 등 많은 어려움을 겪었지만, 이를 통해 강인함과 진정한 친구의 중요성을 배웠다고 말함. 2024년에는 정상으로 돌아가고 더 나은 건강을 기대하며, 치유와 성장, 밝은 날들을 기원함.
     * 전 소련 출신의 사용자는 서양 동료들과 원격 근무를 하면서 처음 몇 년간 12월 어느 날 동료들이 없는 것에 놀랐지만, 그날이 크리스마스임을 저녁에야 기억했다고 말함. 메리 크리스마스를 기원함.
     * 컴퓨터 과학(CS) 학생이었을 때 HN에 대해 알게 되었다는 사용자는 그 이후로 매일 사이트를 둘러보며 좋은 추억을 갖게 되었다고 말함.
     * 한 사용자는 모두의 호출기가 조용하기를 바라며 메리 크리스마스를 기원함.
     * 베트남에서 메리 크리스마스를 기원하는 사용자는 HN을 거의 매일 읽으며, 이 스레드에서 전 세계의 사람들을 보는 것이 좋다고 말함. 2024년에 모두에게 최고의 일이 일어나길 바람.
"
"https://news.hada.io/topic?id=12512","스트림디퓨전: 실시간 상호작용 생성을 위한 파이프라인 수준 솔루션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스트림디퓨전: 실시간 상호작용 생성을 위한 파이프라인 수준 솔루션

StreamDiffusion: 실시간 상호작용 생성을 위한 파이프라인 수준 솔루션

     * 주요 특징
          + 스트림 배치: 효율적인 배치 작업을 통한 간소화된 데이터 처리.
          + 잔여 분류 없는 가이던스: 계산 중복을 최소화하는 개선된 가이던스 메커니즘.
          + 확률적 유사성 필터: 고급 필터링 기술을 통해 GPU 활용 효율성 향상.
          + 입출력 큐: 입력 및 출력 작업을 효율적으로 관리하여 원활한 실행 지원.
          + KV-캐시를 위한 사전 계산: 가속화된 처리를 위한 캐싱 전략 최적화.
          + 모델 가속화 도구: 모델 최적화 및 성능 향상을 위한 다양한 도구 활용.
     * 성능
          + GPU: RTX 4090, CPU: Core i9-13900K, OS: Ubuntu 22.04.3 LTS 환경에서 StreamDiffusion 파이프라인을 사용하여 이미지 생성 시 성능.
               o SD-turbo 모델: Denoising Step 1에서 Txt2Img 106.16fps, Img2Img 93.897fps.
               o LCM-LoRA + KohakuV2 모델: Denoising Step 4에서 Txt2Img 38.023fps, Img2Img 37.133fps.
     * 설치 방법
          + 환경 구축: pip, conda, Docker를 통해 StreamDiffusion 설치 가능.
          + PyTorch 설치: 시스템에 맞는 버전 선택 후 설치.
          + StreamDiffusion 설치: 사용자와 개발자를 위한 설치 방법 제공.
          + Docker 설치: TensorRT 준비된 Docker 이미지 빌드 및 실행 방법 안내.
     * 빠른 시작
          + examples 디렉토리에서 StreamDiffusion 시도 가능.
          + 실시간 Txt2Img 데모와 사용 예시 제공.
          + 이미지-이미지 및 텍스트-이미지 변환 예제 코드 포함.
     * 선택적 기능
          + 확률적 유사성 필터: 비디오 입력 시 처리량 감소를 위한 기능.
          + 잔여 CFG (RCFG): CFG를 사용하지 않는 경우와 비교하여 경쟁력 있는 계산 복잡성을 가진 메서드.
     * 개발 팀
          + 개발에 참여한 팀원들의 명단.
     * 감사의 말
          + 비디오 및 이미지 데모 생성에 사용된 LCM-LoRA + KohakuV2 및 SD-Turbo에 대한 감사.

GN⁺의 의견

     * 가장 중요한 점: StreamDiffusion은 실시간 상호작용 이미지 생성을 위한 혁신적인 파이프라인으로, 기존 확산 기반 이미지 생성 기술에 비해 상당한 성능 향상을 제공함.
     * 흥미로운 이유: 이 기술은 실시간으로 고품질의 이미지를 생성할 수 있게 하여, 예술, 게임 개발, 그래픽 디자인 등 다양한 분야에서 창의적인 작업을 가능하게 함.
     * 재미있는 점: 사용자와 개발자 모두를 위한 다양한 설치 및 사용 방법이 제공되며, 실제로 코드를 실행하여 결과를 볼 수 있는 데모가 포함되어 있어, 기술에 대한 실질적인 이해를 돕고 직접 실험해볼 수 있는 기회를 제공함.
"
"https://news.hada.io/topic?id=12555","Vertical AI - 지속 가능한 AI 앱을 위해 수직적 접근방식이 중요한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Vertical AI - 지속 가능한 AI 앱을 위해 수직적 접근방식이 중요한 이유

버티컬 AI의 중요성

     * 지난 10년 동안 버티컬 SaaS(Vertical SaaS)는 업계별 맞춤형 소프트웨어의 힘을 입증했고, Toast, Shopify, Procore, ServiceTitan 같은 여러 성공 사례가 있음
     * 여전히 버티컬 SaaS가 미처 서비스하지 못하는 시장이 많음
          + 기술 혁신에 본질적인 장벽이 있는 기반 산업(예: 비정형 데이터, 제한된 TAM, 느린 판매 주기, 낮은 연간 계약 금액, 까다로운 기존 고객)
          + 이제 막 등장했거나 큰 변화를 겪고 있는 분야(예: 에너지의 전기화)
     * 이제 비정형 데이터를 처리할 수 있는 인공 지능이 등장하고, 버티컬 SaaS를 수직적 소프트웨어로 재정의 하는 주요 발전으로 인해 이런 곳에도 서비스 가능한 소프트웨 구축이 가능해짐
     * 이전 기술 시대에는 버티컬 SaaS가 체계적인 데이터를 가진 현대적인 기술 스택을 가진 회사에만 적용될 수 있었음
     * LLM은 비구조화된 데이터를 다룰 수 있어 AI가 기술적으로 뒤처진 산업을 현대 시대로 끌어들일 수 있는 누락된 조각이 될 수 있음
     * 버티컬 중심의 스타트업들은 전통적인 SaaS 모델을 넘어서 임베디드 결제(Toast, Shopify), 광고(Pepper, Provi), B2B 마켓플레이스(Faire, Novi)와 같은 전략을 채택함

# 버티컬 AI 투자 프레임워크

  Data: Better Data Over Better Models (더 나은 데이터가 더 나은 모델보다 중요)

     * AI 응용 프로그램을 구축하는 데 있어 데이터는 차별화된 위치를 구축하는 데 있어 아마도 가장 중요한 부분임
     * 스타트업은 매우 큰 데이터 코퍼스가 필요한지, 독점적인 데이터 자산을 구축할 기회가 있는지 식별해야 함
     * 많은 업종에서 데이터는 지저분하고 사일로화된 레거시 시스템에 존재하기 때문에 데이터 추출에 도전하는 기업이 특히 반가움
          + 데이터 요약 및 생성 기능에 대한 진전에 비해 데이터 추출은 고통스럽고 해결되지 않은 문제임
          + 차별화 요소는 동급 최고의 감사, 라벨링 및 지속적으로 업데이트되는 데이터를 보유하는 것
     * 더 강력한 데이터 포지션은 제품 사용 자체가 데이터 세트를 생성하는 경우
          + 예: 고객이 자신의 데이터에 라벨을 붙이거나 제품과의 상호 작용에 대한 데이터 세트를 개발하는 경우
     * 데이터에 대한 초기 접근은 예비 해자(Moat)로서의 중요성이 있지만, 궁극적으로는 고객이 제품을 사용하면서 생성하는 데이터가 장기적인 해자를 제공한다고 생각함

  TAM(Total Addressable Market): Market Size vs Market Penetration (시장 규모 대 시장 침투)

     * 수직적 시장을 추구하지 않는 가장 큰 위험이자 이유는 수평적 접근 방식에 비해 TAM이 작다는 점이지만, 이는 단점이자 장점이 될 수 있음
     * 소규모 시장일수록 자금력을 갖춘 경쟁자가 적고, 집중할 수 있는 범위가 좁아져 유통의 이점을 얻고 시장 집중도를 높일 수 있기 때문
     * 의료/금융 서비스처럼 세분화 정도가 높은 기반 산업에서는 섹터 내에서 많은 기회가 있을 수 있음
     * 업종에 진입할 수 있는 진입점을 찾으려면 경쟁업체가 진출하지 않았고, AI에 대한 수요가 입증되었으며, LLM 기반 도구에 가장 적합하고, 개인적으로 가장 잘 제공할 수 있는 하위 분야를 파악하는 것이 중요

  ACV: Multiple Products and Revenue Streams (다중 제품 및 수익 스트림)

     * 단일 SaaS 제품이 여섯 자리 수의 ACV(Annual Contract Value)를 달성하는 최선의 접근 방식은 아님
     * 버티컬 중심의 스타트업은 다중 제품으로 확장하고 핵심 제품을 넘어 추가 수익원을 창출할 수 있음
     * 핵심 제품에 새로운 제품 라인을 추가하면 시간이 지남에 따라 번들링 및 상향 판매가 가능해져 결국 조직의 여러 지점에서 고정적인 위치를 차지할 수 있음
          + 레스토랑 결제 플랫폼인 Toast는 급여 및 인력 관리 기능을 추가하여 다중 제품 전략을 실행
          + B2B 마켓플레이스인 Provi와 Pepper는 광고로 추가 수익원을 창출
          + 태양광 설치 플랫폼인 Aurora Solar는 금융 옵션을 제공하는 제품을 통해 추가 수익을 창출
          + 건설 서비스 플랫폼인 Procore는 최근 건설 프로젝트의 수명 주기 전반에 걸친 데이터 인사이트를 활용하여 보험을 제공하기 시작

  Founder(s): Product Builders With Domain Experience (창업자: 도메인 경험을 가진 제품 빌더)

     * 도메인 경험과 기술 배경을 모두 가진 창업 팀은 순수 기술자보다 버티컬 AI를 구축할 때 유리함
     * 한 번에 수십, 수백 개의 서로 다른 조직과 장기 계약을 맺는 경우가 많은 헬스케어와 같은 업종의 기존 조직에 판매하려는 스타트업의 경우 이러한 문제가 더욱 두드러짐
     * 이러한 복잡성을 잘 이해하는 것은 올바른 시장 진출 전략을 수립하고, 판매 일정을 계획하고, 직원을 채용하는 데 매우 중요

  GTM: Create Urgency (시장 진입 전략: 긴급성 창출)

     * 버티컬 판매 주기는 길 수 있으며, 기술 구매자가 덜 정교한 대규모 기존 산업에서는 더욱 그러함
     * 중요한 유통 채널을 장악하기 위해서는 GTM 전략에 긴박감을 조성할 수 있는 고유한 방법이나 경로가 있어야 함
          + AI에 대한 관심이 높아지면서 새로운 제품을 시도해야 한다는 절박함이 생겼지만, 이는 역풍이 될 수도 있고 순풍이 될 수도 있음
          + 모든 구매자가 AI를 염두에 두고 있기 때문에 신규 기업이 잠재 고객에게 전화를 걸어 평가판을 사용해 보도록 유도하는 것은 쉬움. 그러나 여러 파일럿을 비교하는 데 지친 사용자에게는 파일럿을 고객으로 전환하는 것이 특히 어려울 수 있음
          + 즉, 구매자가 제품을 고려하고 전환하여 사용할 수 있도록 긴급한 상황을 만드는 것이 중요
     * 신속한 전환을 위해서는 핵심 가치 제안을 고려해야 함
          + 인력 효율성 향상이나 '혁신'을 약속하는 것만으로는 충분하지 않음
          + 제품이 어떻게 매출을 증가시키거나 비용을 확실히 절감할 수 있는지 보여주는 것이 더 효과적

  Product: Beyond Copilot (제품: Copilot을 넘어서)

     * 현재의 지배적인 패러다임은 인간과 AI Copilot이 짝을 이루는 것
          + 인간이 대부분의 작업을 수행하고 AI 조종사가 인간의 능력을 향상/보강
     * 향후 몇 년 안에 AI 에이전트가 주요 작업을 수행하고 인간이 결과를 확인하고 편집하는 반대 모델을 더 많이 볼 것으로 예상
     * Copilot은 이미 유통을 소유하고 있는 현재 업체가 주도할 수 있는 반면, AI 에이전트는 보다 새로운 영역에 도전할 수 있는 기회이기 때문에 스타트업의 진입점으로 알맞음
     * 패러다임의 변화는 미래의 비즈니스에 엄청난 영향을 미칠 것
          + AI 에이전트가 더 많은 숙련된 노동력을 대체함에 따라 소프트웨어에 대한 지출이 인건비를 대체할 것
          + 새로운 사용량 또는 성과 기반 가격 모델이 등장할 것으로 예상되며, 이는 더 알아봐야 할 Archetype이 될 것

# 버티컬 기회

     * AI는 거의 모든 산업 버티컬에서 변혁을 일으킬 것으로 예상됨

  Professional Service(전문 서비스)

     * 법률 서비스, 회계, 컨설팅 등 수동적인 작업이 많은 다양한 분야에서 전문가들이 중요한 정보를 읽고 해석하여 분석, 고객 소통, 메모, 보고서 등으로 응답하는데 상당한 시간을 할애함
     * 법률 서비스 분야는 언어가 핵심 제품이고, 대규모 언어 모델이 오늘날의 플랫폼 변화의 기반이 됨
     * 미국 내 법률 시장은 3000억 달러 이상이며, AI 도입에 대한 관심이 입증됨
          + Harvey, EvenUp, Eve, Spellbook과 같은 AI 우선 기업이 탄생
          + 톰슨 로이터, Relativity, 아이언클래드 같은 기존 기업들도 AI를 인수하거나 기존 제품에 통합
     * 컨설팅 및 회계는 AI를 수용할 준비가 된 또 다른 분야임
          + 빅4 컨설팅 회사는 각각 수만 명의 컨설턴트와 회계사를 고용하고 있으며, 이는 AI로 대규모로 보강할 수 있는 막대한 인력
          + KPMG와 PwC는 각각 5년 동안 AI 제품에 20억 달러, 3년 동안 생성 AI에 10억 달러를 투자할 계획임
          + 하버드 비즈니스 스쿨과 BCG의 공동 연구에 따르면 GPT-4를 사용하는 컨설턴트는 25% 더 빠르게 작업을 완료하고 결과물의 품질은 40% 향상되는 것으로 나타남
          + 회계사들은 규칙과 정책을 이해하고 이를 계산에 적용하는 데 시간을 할애함
          + 회계 전문가와의 인터뷰에서 수익 인식(revenue recognition)은 가장 힘들고 반복적(매월)이면서도 가장 자동화할 수 있는 사용 사례 중 하나로 꼽힘

  금융 서비스

     * 금융 서비스는 AI에 적합한 여러 특성을 가짐
     * 미국 내 시장 규모만 해도 11조 달러에 달하며, AI 도구에 대한 수요가 입증됨
          + 블룸버그 GPT의 출시, 모건 스탠리의 OpenAI와의 파트너십, 알파센스의 시장 인텔리전스 플랫폼에 AI 기반 검색 및 요약 도구 추가
     * 투자 전문가와 재무 고문의 일상 업무를 보면 AI가 어떻게 적용될 수 있는지 쉽게 알 수 있음
          + 내부 데이터 및 실시간 시장 데이터와 뉴스 처리, 재무 모델링 및 계산 등
     * Hebbia, Sixfold, Hyperexponential, Portrait Analytics와 같은 AI 기반 스타트업들이 진전을 이루고 있음

  헬스케어

     * AI가 헬스케어에 미칠 잠재적 영향에 대해 오랫동안 논의되어 왔으나, 지금까지와 같은 현실적인 영향은 없었음
          + LLM은 진단이나 의사 결정 모델을 개선하고 보험금 청구를 자동화하는 플랫폼을 개발할 수 있으며, 의료 데이터의 전반적인 관리를 개선할 수 있음
     * LLM 기반 애플리케이션은 과거 세대의 AI 도구를 크게 개선할 수 있으며, 구조화되지 않은 데이터를 구조화된 데이터로 변환하는 등의 고부가가치 사용 사례를 해제하는 데 중요함
     * Google의 Med-PaLM 2는 복잡한 의학적 질문에 대답하는 능력이 있으며, 의학 자격증 시험에서 질문에 성공적으로 답변함
     * 의학 LLM의 구축은 상당한 시간과 자원이 필요한 매우 야심찬 사업임
"
"https://news.hada.io/topic?id=12491","대마초 단순 소지 또는 사용에 대한 사면 부여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       대마초 단순 소지 또는 사용에 대한 사면 부여

대마초 단순 소지 범죄에 대한 사면 선포

     * 2022년 10월 6일 선포된 10467호 선포문을 통해, 조셉 R. 바이든 주니어 대통령은 미국 헌법 아래 대마초 단순 소지 범죄로 기소되거나 유죄 판결을 받은 개인에게 사면을 선언함.
     * 대마초 단순 소지, 시도, 사용으로 인한 불필요한 부수적 결과를 경험하는 추가 인물들에게 사면을 부여함으로써, 고용, 주거, 교육 기회에 대한 장벽을 없애고자 함.
     * 이 사면은 미국 시민과 합법적 영주권자를 대상으로 하며, 대마초 단순 소지, 시도, 사용에 대한 연방 및 워싱턴 D.C. 법률과 연방 규정에 근거하여 이루어짐.

사면의 범위와 한계

     * 사면은 대마초 단순 소지, 시도, 사용에 한정되며, 다른 통제된 물질이나 대마초 단순 소지 이외의 활동에 대한 범죄는 포함되지 않음.
     * 대마초 소지의 의도적 분배나 대마초 영향 하에 운전 등과 같은 다른 범죄에 대해서는 사면이 적용되지 않음.
     * 범죄 당시 미국에 합법적으로 체류하지 않은 비시민권자는 이 사면 대상에서 제외됨.

사면 절차

     * 법무장관은 사면 변호사를 통해 적절하게 제출된 사면 증명서 신청을 검토하고, 자격이 있는 신청자에게 사면 증명서를 발급할 예정임.

GN⁺의 의견

     * 이 사면 선포는 대마초 관련 범죄에 대한 미국 사회의 인식 변화를 반영하는 중요한 조치임.
     * 대마초 단순 소지로 인한 범죄 기록이 사람들의 삶에 미치는 부정적인 영향을 줄이는 데 기여할 것으로 기대됨.
     * 이러한 사면은 법적 및 사회적 장벽을 해소하고, 재활과 사회 통합을 촉진하는 데 중요한 역할을 할 것임.

        Hacker News 의견

     * 대마초 단순 소지로 연방 구금된 사람은 2022년 1월 기준으로 없음. 대마초가 계획 I에 남아있는 것은 법 전체에 대한 조롱.
     * 대통령의 사면 권한은 연방법 위반자에게만 적용되며, 대부분의 대마초 소지자는 주 법으로 기소되어 주 법원에서 재판을 받음. 대통령은 주 법원의 판결에 대한 사면 권한이 없음.
     * 알코올/대마초와 같은 기호용 약물의 합법화가 중독자에게 미치는 해악 증가 가능성에 대한 도덕적 위험 존재. 알코올은 합법이고 대마초는 불법인 것에 논리적 모순이 있으나, 양쪽 모두 통제되거나 불법이 되어야 하는지는 불확실.
     * 경미한 혐의가 있는 경우, 경찰이 다른 범죄를 확신하지만 증거 부족으로 기소할 수 없을 때 대마초 소지로 기소되는 경우가 있음.
     * 대통령의 사면이 좋은 일이긴 하지만, 이러한 일이 내일 다시 발생하는 것을 막지는 못함. DEA가 대마초를 재분류해야 함.
     * 합법적으로 구매할 수 있는 물건 때문에 수천 명이 감옥에 있는 것은 기괴함.
     * 사적인 장소에서 대마초 소비는 사실상 합법이지만, 공공장소에서는 그렇지 않음. 공원에서 아이들이 대마초 흡연자와 함께 있기를 원하지 않음. 알코올과 담배도 마찬가지임.
     * 대마초를 알코올과 같은 조건으로 합법화하는 것에 동의함. 그러나 불법 사용을 없애지는 못할 것임.
     * 대마초를 사용하지 않지만, 대마초 소지에 대한 일괄 사면을 매우 기쁘게 생각함. 알코올 소비가 사회에 더 많은 해를 끼쳤음에도 공공장소에서 마시는 것이 문제가 되지 않는 것은 미친 일임.
     * 사면은 연방 ""소지 또는 사용""에만 적용되며, 이는 거의 발생하지 않음. ""소지 또는 사용""으로 기소된 사람들은 실제로는 판매, 유통, 제조 등의 혐의로 기소된 경우가 대부분임.
     * 외국인이나 더 이상 거주하지 않는 사람들을 제외하는 것은 이상함. 모든 유죄 판결을 받은 사람들에게 사면을 해주면 됨.
     * 대마초 소지로 인한 해악을 인정하기 시작한 것은 시기적절함. 약물을 금지하려면 공급자와 판매를 위해 생산하는 사람들을 기소해야 함. 개인의 사적 소비는 해를 끼치지 않으므로 기소하지 말아야 함. 공공장소에서 위험을 초래하는 소비는 불법으로 할 수 있음.
"
"https://news.hada.io/topic?id=12515","macOS 앱 스튜디오 사업 운영 비용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         macOS 앱 스튜디오 사업 운영 비용

macOS 앱 스튜디오 비즈니스 운영 비용

     * 시간이 가장 큰 비용임. 가족과 보낼 수 있는 시간을 고객 지원 이메일에 할애함.
     * 앱 스토어에서 3개의 앱 판매: rcmd, Grila, Gamma Dimmer.
          + 2023년 총 판매액: $14.9k
          + 실수령액: $11.5k
          + 비용: $3.4k
               o 앱 스토어 수수료 (소규모 사업 15%): $2.3k
               o 부가가치세(VAT), 판매세, 외환 수수료: $1.1k

Paddle을 통한 독립 앱 출판

     * 앱 스토어의 엄격한 제한으로 인해 Paddle을 통해 독립적으로 앱 출판함.
     * Paddle은 세금 처리를 대행함.
          + 2023년 총 판매액: $93.5k
          + 실수령액: $73.3k
          + 비용: $20.2k
               o Paddle 수수료 (5%): $4.7k
               o 부가가치세(VAT), 판매세, 외환 수수료: $15.5k

루마니아 법인 소득세

     * 2023년 총 수입: $108.4k
     * 각종 수수료와 플랫폼 비용을 제외한 후 남은 금액: $84.8k
     * 루마니아 법인 소득세와 기타 의무적인 비용을 지불한 후 남은 금액: $71.8k

최종 결과

     * macOS 앱 비즈니스 관련 지출:
          + Hetzner 서버: $600
          + IPStack 구독: $140
          + Apple 개발자 멤버십: $100
     * 기타 개발 관련 비용과 환전 손실로 인한 추가 지출: 최소 $1k
     * 순이익: $69,960
     * 최종적으로 월 $5800의 순수입을 얻음. 컨설팅 일로 더 많은 수입을 얻을 수 있지만, 자신의 앱을 만드는 데에 시간을 더 투자하기로 결정함.

   GN⁺의 의견
     * 이 기사는 개인이 macOS 앱 개발을 통해 수익을 창출하는 과정과 그에 따른 비용을 상세히 설명함.
     * 앱 스토어와 Paddle을 통한 판매 방식의 차이점과 각각의 수수료 구조에 대한 통찰을 제공함.
     * 개인 개발자가 컨설팅과 같은 고수익 직업 대신 자신의 창작물에 시간을 투자하는 선택을 한 점이 흥미로움. 이는 창작에 대한 열정과 자유로운 생활 방식을 추구하는 현대인의 가치관을 반영함.

        Hacker News 의견

     *
          + 인생과 시간 판매에 대한 감동적인 글에 대한 댓글로, 39세의 한 사람이 자신의 시간을 팔아야 하는 것에 대한 불만과 타인의 일정에 맞춰 일하는 것의 불편함을 표현함. 자유롭게 시간을 보낼 수 있는 것은 돈을 조금 덜 벌더라도 그만한 가치가 있다는 의견을 나타냄.
     *
          + 컴퓨터, 휴대폰 등의 하드웨어 구매에 대해, 이러한 비용은 반복되지 않으므로 회계상에서 고려하지 않는다고 언급함. 미국에서는 이러한 항목들이 자본 자산으로 간주되어 감가상각을 통해 시간에 걸쳐 비용으로 인식됨을 설명함. 루마니아의 회계 관행도 비슷한 것으로 보임.
     *
          + Merchant of Record를 사용하는 단점에 대해, VAT를 연말에 환급받을 수 없다는 점을 지적함. 이는 B2B 관계에서 상품을 0% VAT로 판매한 후, Merchant of Record가 재판매하며 세금을 징수하기 때문임. 그러나 VAT 책임의 중요성을 강조하며, 소규모 기업에게는 VAT 책임이 큰 차이를 만들 수 있지만 종종 언급되지 않는다고 언급함.
     *
          + Lunar와 Rcmd의 유료 사용자로서, 앱과 웹사이트 디자인이 독특하고 매력적이라고 평가함. 다음 제품에 대한 기대감을 표현하며, 해당 링크가 Reddit 등에 올라올 때마다 관심을 가지고 살펴본다고 함.
     *
          + 재정적 위험을 감수하면서도 자신이 원하는 것을 알고 실행할 수 있는 사람들에 대한 존경심을 표현함. 자신의 가치, 욕망, 그리고 행동력을 명확히 아는 것이 다른 사람들에게 영감을 준다고 함.
     *
          + 루마니아의 생활비가 미국보다 약 45% 저렴하다는 맥락을 추가하여, 해당 수입으로 매우 편안한 생활을 할 수 있을 것이라는 의견을 제시함.
     *
          + 자신의 소규모 사업을 운영한 경험을 공유하며, 항상 켜져 있는 느낌에 지쳐 현재는 프로젝트마다 계약자로 일하고 있음을 밝힘. 이전 사업을 다시 시도할지 고민 중이며, 딸이 대학에서 애니메이션과 비디오 게임을 공부할 예정이므로, 언젠가 프로그래머가 필요할 때 도와줄 수 있을 것이라는 희망을 나타냄.
     *
          + 수익에서 비용을 공제하는 것이 아니라 이익 이전에 공제하는 것에 대한 의문을 제기함. 루마니아의 법인세가 일반적인 것과 다른지, 아니면 원래 작성자가 잘못하고 있는 것인지에 대한 질문을 함.
     *
          + 간단한 애플리케이션에서 많은 수익을 창출할 수 있다는 사실에 놀라움을 표현함.
     *
          + $12k의 차이로 시간을 구매한다고 믿는다는 의견을 제시함. 앱에서 발생하는 수동적인 수입이 매달 조금씩 저축할 수 있게 해주고, 인생에서 더 나은 것들에 시간을 쓸 수 있다면, 그것이 좋은 선택이라고 생각함. 많은 돈을 벌어서 나중에 일하지 않아도 되는 시스템이 잘 작동하지만, 시간을 어떻게 쓸지 결정하는 것은 더 어려운 문제라고 함.
"
"https://news.hada.io/topic?id=12535","별 – 아서 C. 클라크별 – 아서 C. 클라크 (1967) [PDF]
"
"https://news.hada.io/topic?id=12604","고성능 컴퓨팅의 예술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              고성능 컴퓨팅의 예술

과학 컴퓨팅의 기초

     * 과학적 컴퓨팅에 대한 일반적인 배경 지식을 다루는 책으로, 컴퓨터 구조, 병렬 컴퓨터 구조, 컴퓨터 산술, 선형 대수, ODE/PDEs 등이 포함되어 있음.
     * 큰 계산에서 모든 것이 어떻게 결합되는지에 대한 내용도 포함.

병렬 프로그래밍을 위한 과학과 공학

     * 과학 컴퓨팅의 많은 부분이 어떤 형태로든 병렬 프로그래밍을 포함함.
     * MPI와 OpenMP의 현대 버전에 대한 최고의 소개서로, PETSc, Kokkos, Sycl, Co-array Fortran에 대한 짧은 섹션도 포함.
     * C, Fortran, C++, 그리고 (MPI의 경우) Python에서 MPI와 OpenMP의 커버리지로 주목받음.

과학 프로그래밍 소개

     * 과학 및 공학 프로그래밍은 주로 C/C++ 및 Fortran에서 수행됨.
     * 현대 C++17(요즘 C보다 선호됨)과 Fortran2008을 가르치는 책.
     * 과학 프로그래밍에 대한 제로부터의 소개 또는 ""C 프로그래머를 위한 C++""으로 읽을 수 있음.
     * 다양한 긴 프로그래밍 프로젝트가 포함되어 있음.

HPC 목공예

     * 과학 컴퓨팅의 생태계는 단지 프로그래밍 언어와 병렬 프로그래밍 시스템 이상의 것을 포함함.
     * 컴파일러, 빌드 시스템, 소스 코드 관리 등에 대한 이해가 필요하며, 이 책은 이 모든 것의 집대성을 목표로 하지 않고, 과학적 워크플로우에 편향된 일련의 소개를 제공함.

Victor에 대하여

     * Victor Eijkhout는 텍사스 고급 컴퓨팅 센터의 연구 과학자임.
     * 이 교재들은 텍사스 대학교 오스틴 캠퍼스에서 다양한 과정을 가르치면서 만들어짐.
     * 이 책들을 공개함으로써 그가 의무를 넘어선 노력을 했다고 생각된다면, 커피를 사주는 것도 좋은 방법임.

   GN⁺의 의견
     * Victor Eijkhout의 HPC 교재 시리즈는 과학 컴퓨팅의 기초부터 병렬 프로그래밍, 과학 프로그래밍의 실제 적용에 이르기까지 포괄적인 지식을 제공함.
     * 이 시리즈는 초급 소프트웨어 엔지니어가 고성능 컴퓨팅(HPC)의 세계에 입문하는 데 필수적인 자료가 될 수 있음.
     * 과학 및 공학 분야에서 컴퓨팅 기술이 점점 중요해지는 현재, 이러한 교재들은 해당 분야 전문가들에게 매우 유익하고 흥미로운 자료가 될 것임.

        Hacker News 의견

     * 하드웨어 및 데이터센터 측면의 이야기
          + AWS에서 소프트웨어/서비스 쪽 일을 하던 한 사용자는 데이터센터 직원들의 이야기를 듣고, 데이터센터의 컴퓨팅 파워 증가가 실제 컴퓨팅 문제보다 열역학 문제라는 것을 깨달음.
          + 노드가 매우 조밀해져서 전력을 공급하고 열을 배출하는 것이 매우 어려운 문제가 되었으며, 비효율을 발견하더라도 소프트웨어 업데이트로 해결할 수 없음.
          + 이러한 상황은 약 10년 전의 것이며, 아마존이 인터넷 서점에서 시작해 열역학 문제를 해결하는 최첨단에 있음이 놀랍다고 함.
     * 고성능 컴퓨팅(HPC)의 하드웨어와의 거리감
          + HPC가 하드웨어로부터 얼마나 추상화되어 있는지에 대한 흥미로운 점을 지적함.
          + 책들은 SPMD 프로그래밍, 알고리즘, 데이터 구조, 태스크 병렬성, 동기화 등에 초점을 맞추고 있지만, 슈퍼컴퓨터 메모리 시스템, 고대역폭 인터커넥트(CXL), GPU 아키텍처 등의 컴퓨터 아키텍처 세부 사항에 대해서는 거의 다루지 않음.
          + 추상화와 도구가 이미 충분히 좋아서 이러한 세부 사항을 걱정할 필요가 없는지, HPC 실무자들이 성능을 끌어내기 위해 많은 '블랙박스' 조정을 해야 하는지 궁금함을 표현함.
     * 빅터의 자료집에 대한 칭찬
          + 한 사용자는 빅터가 만든 자료집에 감탄하며, 자신은 빅터를 개인적으로 알지는 못하지만, 1990년대 UT Austin에서 박사 과정을 하며 TACC의 자원을 사용했음을 언급함.
          + 당시 프로그래머는 자신의 코드를 병렬화해야 했으며, 하드웨어에 대한 이해가 필요했음. 이는 분야가 아직 초기 단계였기 때문이며, 문제 해결은 Cray 링 바인더와 Gropp 등의 자료를 읽음으로써 이루어졌음.
     * HPC의 하드웨어 관리 측면에 대한 관심
          + 한 사용자는 HPC에서 문제를 감지하고 진단하며, 재부팅/재설치/수리와 같은 조치를 취하고, 이를 최적화하여 최상의 서비스 수준을 제공하는 방법에 대해 관심을 표함.
          + 노드 가용성 대비 전체 처리량과 같이 동시에 여러 목표를 최적화해야 할 때, 다른 토폴로지가 이러한 문제에 미치는 영향, 기타 제약 조건 등에 대한 정보를 찾기 어려웠다고 언급함.
     * C++ 교육 방법에 대한 의견 요청
          + 경험 많은 Python 프로그래머가 C++ 교육 방법에 대한 사람들의 생각을 물으며, 특정 단점이 있는지 궁금해함.
          + 해당 사용자는 자신의 C++ 기술을 향상시키고 싶어하며, 책 3권이 자신에게 적합한 수준으로 보임을 언급함.
     * 저자의 무료 교재 제공에 대한 감탄
          + 한 사용자는 저자가 C++과 Unix 도구를 포함한 포괄적인 책 세트를 만들고 무료로 공유한 것에 대해 감탄함.
          + 모든 프로그래머(고성능 컴퓨팅에 특화된 것이 아니더라도)에게 유익한 내용이라고 언급함.
     * 과학 컴퓨팅 수업에 대한 회고
          + 2013년에 과학 컴퓨팅 수업을 들었던 사용자는 해당 분야가 넓어서 많은 주제가 간략하게 다뤄졌다고 회고함.
          + 병렬 컴퓨팅에 대한 전문적인 학기별 과정이 있었다면 도움이 되었을 것이라고 언급하며, 이러한 책들이 그러한 과정의 일부로 매우 가치 있었을 것이라고 평가함.
     * HPC 대학원 과정의 TA 제안에 대한 경험
          + 한 사용자는 10년 전 HPC 대학원 과정의 TA 역할을 제안받았으나 거절했음을 언급함.
          + 당시 이 책이 있었다면 기회를 잡았을 것이라고 말하며, 저자의 업적을 칭찬함.
     * UT Austin에 대한 칭찬
          + UT Austin이 HPC와 계산 방법에 있어 뛰어난 기관임을 언급함.
     * 프로그래머를 위한 좋은 내용
          + 책의 내용이 모든 프로그래머에게 유익하며, 특히 세 번째 권에서 C++17과 Fortran2008을 가르치는 대조적인 접근 방식에 대해 언급함.
"
"https://news.hada.io/topic?id=12554","모더나의 mRNA 암 백신, 예상보다 더 효과적임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모더나의 mRNA 암 백신, 예상보다 더 효과적임

Moderna의 mRNA 암 백신, 생각보다 더 효과적

     * Moderna와 Merck가 개발 중인 mRNA 기반 암 백신인 mRNA-4157(V940)은 고위험성 흑색종을 제거한 사람들을 대상으로 함.
     * 이 백신은 최대 34개의 '네오안티젠'을 만들도록 몸에 지시함으로써, 면역 체계가 새로운 암 세포를 신속하게 식별하고 공격하도록 준비시킴.
     * 백신은 각 수령인의 암 세포에만 있는 단백질에 대한 지시를 담아 개인화하여 제공됨.

새로운 연구 결과

     * 진행 중인 2b상 KEYNOTE-942 연구에서, Moderna와 Merck는 Keytruda와 결합한 암 백신의 효과를 Keytruda 단독으로 비교함.
     * 2022년에는 조합 요법이 고위험 환자의 재발 또는 사망 위험을 치료 후 2년간 44% 감소시킨 것으로 보고됨.
     * 최근 발표에 따르면, 두 치료법을 모두 받은 사람들은 Keytruda만 받은 그룹에 비해 치료 후 평균 3년 후에 재발 또는 사망 위험이 49% 낮았으며, 먼 곳으로의 전이 또는 사망 위험은 62% 낮았음.

향후 전망

     * KEYNOTE-942 연구는 참가자가 157명으로 상대적으로 작지만, Moderna와 Merck는 1,000명 이상의 고위험 흑색종 환자를 포함할 3상 시험을 이미 시작함.
     * 이 회사들은 흑색종뿐만 아니라 비소세포 폐암 환자를 대상으로 한 3상 시험도 시작함.
     * 시험이 잘 진행되면, 이 개인화된 치료법이 환자들에게 빠르게 도달할 수 있을 것으로 기대되며, 일부 국가에서는 2025년까지 가속 승인을 통해 제품이 출시될 수 있음.

GN⁺의 의견

     * Moderna의 mRNA 암 백신은 기존의 흑색종 치료법에 비해 상당한 개선을 보여주며, 재발 및 사망 위험을 크게 감소시키는 것으로 나타남.
     * 이 백신은 개인의 암 세포에 특화된 네오안티젠을 목표로 하여 면역 체계의 암 세포 인식 능력을 강화하는 혁신적인 접근법을 사용함.
     * 이 연구는 mRNA 기술이 암 치료 분야에서도 중요한 역할을 할 수 있음을 보여주며, 향후 암 치료의 패러다임을 바꿀 잠재력을 가지고 있음.

        Hacker News 의견

     * 과거 mRNA 암 백신이 임상 시험을 통과하지 못한 것은 효과가 없어서가 아니라 부작용이 심각했기 때문임. 시간이 지남에 따라 mRNA 백신의 부작용은 점점 줄어들고 있으나, 이 백신의 진정한 효과는 3상 임상시험에서 드러날 것임.
     * 이 백신이 약속대로 효과가 있다면, 이상적인 세계에서는 모더나가 전 세계 국가들로부터 큰 자금을 유치하고, 세부 정보를 공개하며 모든 특허를 포기하여 전 세계적으로 생산이 가능하고 모두가 저렴한 가격으로 치료를 받을 수 있게 될 것임.
     * mRNA 기반 플랫폼과 함께 전통적인 단백질 기반 플랫폼이 왜 시험되지 않는지가 중요한 질문임.
     * 이것을 ""백신""이라고 부르는 것이 적절한지 의문이며, 유전자 치료나 면역 치료 등이 실제로 하는 일에 더 가까운 표현일 수 있음. 또한, 시장에 출시되면 사람들이 주기적인 재치료가 필요한지, 혜택을 받을 수 있는지에 대한 부분도 흥미롭게 지켜볼 부분임.
     * 제목이 클릭베이트에 가까움. 주제는 암 백신이 아니라 피부암 백신임.
     * 자신의 건강을 맡길 마지막 회사라고 생각함. 이런 종류의 기사가 자주 홈페이지에 올라옴.
     * (삭제된 댓글)
     * (삭제된 댓글)
     * (신고로 인해 숨겨진 댓글)
     * 백신을 매달 구독해야 하는지, 아니면 더 오래 지속되는지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=12565","스위스에서의 갑상선종의 저주","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스위스에서의 갑상선종의 저주

스위스의 고질병

     * 스위스 베른 대학의 의학사 연구소의 다락방에 잠겨 있던 48개의 상자 파일에는 손대기 어려울 정도로 연약한 신문 스크랩, 유리판 네거티브, 주석이 달린 재판본, 회의록, 수기 편지 등이 담겨 있음.
     * 20세기 초, 스위스는 전국적으로 80% 이상의 지역에서 풍토병으로 인한 이상 의학적 상태에 시달림.
     * 1921년, 스위스의 19세 징병 대상자 중 거의 30%가 갑상선종을 앓고 있었으며, 루체른과 오블발덴 주에서는 갑상선종으로 인해 군 복무를 면제받은 남성이 4명 중 1명에 달함.

고질병과의 싸움

     * 갑상선종과 크레틴병은 19세기 유럽의 큰 의학적 미스터리 중 하나였으며, 그 지리적 특이성과 상태 간의 중첩으로 많은 관심을 끌었음.
     * 과학자들은 갑상선종의 원인을 밝히기 위해 다양한 이론을 제시했으나, 1876년에 발표된 가장 유망한 이론 목록에는 40가지 가설이 포함됨.

요오드 결핍의 발견

     * 갑상선은 몸의 거의 모든 생리적 과정에 영향을 미치는 호르몬을 생성하는데, 이 호르몬은 요오드를 포함하고 있음.
     * 요오드는 식품, 음료, 호흡하는 공기에서 얻을 수 있으며, 성인은 하루에 150마이크로그램이 필요함.
     * 스위스의 경우, 마지막 빙하기 동안 알프스에 형성된 빙상이 녹으면서 스위스 중앙 고원의 표토를 씻어내 요오드가 결핍된 상태가 됨.

요오드화된 소금의 도입

     * 1914년, 헨리히 훈치커 박사는 요오드 결핍이 갑상선종과 크레틴병의 원인이라는 이론을 제시함.
     * 훈치커는 요오드화된 소금을 통해 스위스 국민에게 매일 소량의 요오드를 제공하는 것이 해결책이라고 주장함.

요오드화된 소금의 성공

     * 오토 바이어드 박사는 훈치커의 이론을 검증하기 위해 요오드화된 소금을 다양한 농도로 준비하여 실험을 진행함.
     * 바이어드의 실험 결과, 요오드화된 소금을 섭취한 가족들의 갑상선종이 줄어들었음을 확인함.
     * 스위스 갑상선종 위원회는 바이어드의 실험 결과를 바탕으로 요오드화된 소금을 권장하기로 결정함.

스위스의 변화

     * 1922년부터 요오드화된 소금이 스위스 전역에서 판매되기 시작함.
     * 1930년까지 스위스에서는 갑상선종이 거의 사라졌으며, 청각 장애 출생률이 크게 감소함.

GN⁺의 의견

     * 이 기사는 스위스에서 갑상선종과 크레틴병이라는 풍토병을 극복한 역사적 사건을 다루고 있음.
     * 요오드화된 소금을 통한 공중 보건 개선 조치는 전 세계적으로 성공적인 사례로 평가받고 있으며, 이는 과학적 발견과 혁신이 어떻게 사회에 긍정적인 변화를 가져올 수 있는지 보여줌.
     * 이 글은 과학과 의학의 발전이 인류의 삶을 어떻게 변화시킬 수 있는지에 대한 흥미로운 사례를 제공하며, 특히 공중 보건 분야에서의 혁신이 얼마나 중요한지를 강조함.

   한국에서는 김을 많이 먹어서 오히려 요오드 과다인 경우가 많으니 굳이 소금에 넣을 필요가 없다고 하더라고요

        Hacker News 의견

     * 스위스에 사는 한 사용자는 요오드 첨가 소금에 대한 친구들의 토론을 재미있게 지켜보며, 역사가 반복되는 것이 재미있다고 언급함.

     스위스 거주자로서, 친구들 사이에서 요오드 첨가 소금에 대한 토론을 보며, 일부는 첨가물 없는 '자연 소금'을 선호한다는 점이 재미있다고 느낌. 역사가 반복되는 것 같음.
     * 한 기사가 비타민 C와 괴혈병의 관계를 상기시키며, 괴혈병이 1750년경에는 잘 이해되었지만, 1911년까지 잘못된 이론으로 대체되거나 잊혀졌다고 언급함.

     괴혈병과 비타민 C의 관계를 상기시키는 기사로, 괴혈병에 대한 이해가 1750년경에는 널리 퍼졌지만, 1911년까지 잘못된 이론으로 대체되거나 잊혀진 사례를 언급함.
     * 한 사용자는 자신의 아버지가 1920년대 디트로이트에서 자랄 때 갑상선종이 흔했지만, 자신의 세대에서는 전혀 알려지지 않았다고 회상함. 또한, 각 세대가 발전함에 따라 암이나 알츠하이머병을 경험하지 않는 날이 오기를 희망함.

     아버지가 1920년대 디트로이트에서 자랄 때 갑상선종이 흔했지만, 현재 세대에서는 알려지지 않았다고 회상함. 각 세대가 발전하면서 암이나 알츠하이머병을 경험하지 않는 날이 오길 희망함.
     * 갑상선이 약간 부풀어 오른 것을 발견한 의사에게 감사함을 표하는 사용자는, TSH 검사를 통해 합성 갑상선 호르몬이 필요하다는 것을 알게 되었다고 함. 요오드 결핍이 갑상선종의 한 원인이지만 유일한 원인은 아니라고 언급함.

     갑상선이 약간 부풀어 오른 것을 발견한 의사 덕분에 TSH 검사를 받고 합성 갑상선 호르몬이 필요하다는 것을 알게 됨. 요오드 결핍이 갑상선종의 원인 중 하나지만 유일한 원인은 아님.
     * 해안가가 아닌 지역, 특히 미국 중부와 같은 내륙 지역에서 갑상선종이 많이 발생했다고 생각하는 사용자는, 해안의 매력 중 하나가 공기 중의 요오드 때문일 수도 있다고 추측함. 해안 지역이 성공적인 국가를 많이 배출한 것은 주로 무역과 물류의 이점 때문이지만, 공기 중의 요오드가 또 다른 숨겨진 이점일 수 있다고 생각함.

     내륙 지역, 특히 미국 중부에서 갑상선종이 많이 발생했다고 생각함. 해안의 매력이 공기 중의 요오드 때문일 수도 있으며, 이것이 해안 지역의 성공에 숨겨진 이점일 수 있음을 추측함.
     * Iodine Global Network의 작업을 추천하며, 이 단체가 정치인과 산업계와 협력하여 요오드화 소금 사용을 증가시키는 데 필요한 관계, 조건, 이해를 만들어내는 효과적인 자선 단체라고 설명하는 사용자. 매우 적은 자금으로 인구 규모의 변화를 만들어내며, 요오드 섭취에 대한 글로벌 상황을 매핑하는 데도 많은 노력을 기울이고 있다고 언급함.

     Iodine Global Network의 작업을 추천하며, 이 단체가 요오드화 소금 사용을 증가시키기 위해 정치인과 산업계와 협력하는 효과적인 자선 단체임을 설명함. 적은 자금으로 인구 규모의 변화를 만들어내며, 요오드 섭취에 대한 글로벌 상황을 매핑하는 데도 많은 노력을 기울임.
     * 독일어로 번역된 긴 버전의 기사를 언급하며, 원문 기사에 비해 이미지가 적다고 지적하는 사용자. 독일어 기사에서 번역된 이미지 캡션과 함께 추가 이미지 링크를 제공함.

     독일어로 번역된 긴 버전의 기사를 언급하며, 원문 기사에 비해 이미지가 적다고 지적함. 독일어 기사에서 번역된 이미지 캡션과 함께 추가 이미지 링크를 제공함.
     * 할아버지가 중국 상하이 지역에서 요오드화 소금 공장에 투자했다는 가족 이야기를 회상하는 사용자. 사업이 잘 되지 않았지만, 갑상선종을 피하기 위해 요오드화 소금을 사용하는 것이 중요하다고 느낌.

     중국 상하이 지역에서 요오드화 소금 공장에 투자했던 할아버지의 이야기를 회상함. 사업이 잘 되지 않았지만, 갑상선종을 피하기 위해 요오드화 소금을 사용하는 것이 중요하다고 느낌.
     * 갑상선 호르몬 T1, T2, T3, T4가 요오드 저장소 역할을 한다고 생각하는 사용자. 요오드가 필요할 때 T4에서 요오드를 제거하여 T3로 변환되며, 이는 'T3가 활성 형태'라는 문헌의 주장과 다르다고 주장함. 요오드가 필요한 다른 조직도 있으며, 갑상선이 사용할 수 있는 양에만 기반한 요오드 섭취 권장량 설정은 큰 실수라고 생각함.

     갑상선 호르몬이 요오드 저장소 역할을 한다고 생각함. 요오드가 필요할 때 T4에서 요오드를 제거하여 T3로 변환되며, 이는 'T3가 활성 형태'라는 주장과 다름. 요오드가 필요한 다른 조직도 있으며, 갑상선이 사용할 수 있는 양에만 기반한 요오드 섭취 권장량 설정은 큰 실수라고 생각함.
     * 브라질에서 자란 사용자는 자국에서 천연 요오드가 풍부함에도 불구하고 정부가 요오드 과다 섭취의 위험을 무시하고 국제 기준을 초과하는 요오드를 소금에 첨가했다고 언급함. 이로 인해 요오드 과다 섭취로 인한 갑상선 기능 저하증을 겪고 있음을 밝힘.

     브라질에서 자란 사용자는 천연 요오드가 풍부함에도 불구하고 정부가 요오드 과다 섭취의 위험을 무시하고 국제 기준을 초과하는 요오드를 소금에 첨가했다고 언급함. 이로 인해 요오드 과다 섭취로 인한 갑상선 기능 저하증을 겪고 있음.
"
"https://news.hada.io/topic?id=12485","오픈소스 자동화 타워 디펜스 게임 'Mindustry'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     오픈소스 자동화 타워 디펜스 게임 'Mindustry'

Github Trello Discord WikiGoogle Play F-Droid App Store itch.ioMindustry: 샌드박스 타워 디펜스 게임

     * Mindustry는 샌드박스 타워 디펜스 게임임.
     * 강력한 적의 공격으로부터 기지를 방어하는 것이 주요 목표임.
     * 재료를 처리하기 위한 복잡한 디자인을 구축할 수 있음.
     * 멀티플레이어 서버에서 다른 플레이어들과 함께 건설하고 싸울 수 있음.

GN⁺의 의견

     * Mindustry는 창의적인 건설과 전략적 방어를 결합한 게임으로, 플레이어들에게 도전적이고 창의적인 경험을 제공함.
     * 멀티플레이어 기능은 플레이어들이 협력하거나 경쟁하면서 커뮤니티를 형성할 수 있는 기회를 제공함.
     * 이 게임은 다양한 플랫폼에서 접근 가능하여, 많은 게이머들이 쉽게 접근하고 즐길 수 있는 장점이 있음.

        Hacker News 의견

     * Mindustry는 정말 훌륭한 게임이다. 나와 친구는 캠페인에서 수많은 시간을 보냈다.
          + Mindustry는 Factorio와 비교했을 때 자동화는 적고 전투가 더 많음.
          + Mindustry 맵을 완성하는 데는 50시간이 아닌 몇 시간이 소요되며, 때로는 여러 번 시도해야 할 수도 있음.
          + 공간이 Factorio에 비해 제한적이므로, 특히 방어를 위해 공간 효율적인 디자인이 중요함.
          + 다양한 적을 물리치기 위해 서로 다른 조합의 타워가 필요함.
          + 전반적으로 매우 잘 만들어진 게임이며 중독성이 강함.
     * 이 게임은 정말 빠져들게 만든다. 휴일에 즐기기에 좋은 게임이다.
          + ""Factorio lite""로 묘사되어 처음 플레이해본 후, Factorio만큼 깊지는 않지만 비슷한 매력을 가지고 있음을 느낌.
     * Steam에서 게임을 판매하면서 Github에 실제 소스를 링크하는 새로운 추세가 흥미롭다.
          + 개발자와 관심 있는 사람들을 위해 무료로 제공되는 것이 공정하다고 생각함.
          + 직접 기부 모델이 대중화되기를 선호하지만, 이 링크는 다양한 옵션과 무료 버전을 직접 제공함.
     * Mindustry에 대한 이전 토론 링크 제공. (Mindustry – 오픈 소스 게임, 135개의 댓글)
          + 중독성이 강한 훌륭한 게임임.
     * 오픈 소스 버전을 플레이한 후 이 게임을 구매했다.
          + Factorio는 방어에 초점을 맞추지 않았지만, Mindustry는 그렇게 함.
          + 게임은 큰 개편을 거쳐 훨씬 더 완성도가 높아짐.
          + 캠페인을 완료하기 위해 다시 플레이해보고 싶음.
     * 감옥에서 태블릿을 통해 이 게임을 수감자에게 유료로 제공하는 것이 합법인지에 대한 의문.
          + AccessCorrections 또는 Access 무언가를 통해 제공되며, 다른 오픈 소스 프로젝트에도 비용을 부과함.
     * Mindustry는 환상적인 게임이다. Erekir 캠페인을 두 번 플레이했다.
          + Serpulo 캠페인은 마음에 들지 않았음.
          + Erekir은 자동화와 실시간 전략(RTS)의 조합, Serpulo는 자동화와 타워 디펜스의 조합으로 거의 두 가지 다른 게임처럼 느껴짐.
     * PvP 모드도 훌륭하다.
          + 공급 라인을 구축하여 방어와 공격을 모두 완수할 수 있음.
          + 상대방의 공급 라인을 기습하여 전선에서 유리한 위치를 점할 수 있으며, 상대가 전력 시설과 물류 시스템의 중단을 감지하기 전에 중요한 이점을 얻을 수 있음.
          + 상대방의 컨베이어 벨트에서 비싼 부품을 훔칠 수 있다면 더 좋을 것임.
     * 관련 링크 제공. (Mindustry – 오픈 소스 게임, 2022년 8월 135개의 댓글)
          + Mindustry: 오픈 소스 샌드박스 타워 디펜스 게임, 2021년 1월 6개의 댓글.
     * OSS(오픈 소스 소프트웨어)인 줄 몰랐다. 그럼에도 게임에 대한 지불에 전혀 후회가 없다.
          + 게임이 놀라울 정도로 멋짐.
"
"https://news.hada.io/topic?id=12587","냉혈한 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               냉혈한 소프트웨어

차가운 혈액을 가진 소프트웨어

     * 2004년, 컴퓨터 과학 전공자인 저자가 자연사 강의를 듣는 중 교수가 냉동된 아기 물감거북을 보여줌.
     * 이 거북은 냉동 상태에서도 생존할 수 있는 몇 안 되는 종 중 하나로, 저온에서 대사를 조절할 수 있는 차가운 혈액 동물임.
     * 강의 동안 거북이 서서히 움직이며 생명을 되찾는 모습을 관찰함으로써 차가운 혈액 동물에 대한 이해를 깊게 함.

소프트웨어 프로젝트의 디코토미

     * 소프트웨어 프로젝트도 따뜻한 혈액과 차가운 혈액 프로젝트로 나뉠 수 있음.
     * 따뜻한 혈액 프로젝트는 지속적인 활동이 필요하며, 활동이 멈추면 문제가 발생함.
     * 차가운 혈액 프로젝트는 활동이 뜸해도 재개할 때 이전 상태에서 바로 시작할 수 있음.

블로그의 차가운 혈액 소프트웨어

     * 저자의 블로그를 구동하는 소프트웨어는 차가운 혈액 소프트웨어임.
     * 12년 전에 시작된 이 프로젝트는 단순하고, 외부 서비스에 의존하지 않으며, 모든 의존성이 프로젝트 저장소에 포함됨.
     * 몇 가지 작은 개선을 제외하고는 수정 없이 잘 작동하며, 앞으로도 12년간 작동할 것으로 기대됨.

GN⁺의 의견

     * 차가운 혈액 소프트웨어의 개념은 프로젝트의 지속 가능성과 유지 보수성에 중요한 영향을 미침.
     * 이 글은 기술 스택의 선택이 프로젝트의 생명력에 어떻게 영향을 미치는지에 대한 통찰을 제공함.
     * 저자의 경험은 소프트웨어 개발자들에게 장기적으로 안정적인 시스템을 구축하는 방법에 대한 교훈을 줌.

        Hacker News 의견

     * Node 및 JavaScript 생태계에서 Express 웹 프레임워크가 있음. 현재 주요 버전인 4.x.x 브랜치는 10년 이상 되었으며, 매주 1700만 번 이상 다운로드됨. 일부 기능이 부족하고 성능이 최고는 아니지만, 빠르고 안정적인 개발을 가능하게 하고 API 변경이나 보안 패치 부족 걱정 없이 장기 계획을 세울 수 있어서 많은 개발자들이 선호함. Go 언어는 넓은 표준 라이브러리와 호환성 약속 덕분에 10년 이상된 프로그램도 실행할 수 있는 더 나은 안정성을 제공함.
     * 소프트웨어가 업데이트 없이도 잘 작동하는 경우는 처음부터 올바르게 만들어진 경우임. 개인적으로 사용하는 소프트웨어는 취향이 크게 변하지 않기 때문에 상대적으로 쉬움. 그러나 다른 사람들이 사용하는 소프트웨어를 작성할 때는 요구 사항이 다를 수 있고, 예상치 못한 문제가 발생할 수 있음. 예를 들어, 큰 파일 처리 시 충돌이 발생할 수 있으며, 이를 수정하기 위해 소프트웨어의 절반을 다시 작성해야 할 수도 있음. 이는 소프트웨어가 자주 변경되지 않는다고 해서 반드시 더 낫다는 주장에 대한 가장 큰 반론임.
     * Python은 지속적인 호환성 파괴 변경으로 인해 좋지 않은 예임. 반면 Go나 Java는 10년 된 코드도 현대 도구로 잘 작동함. Perl은 30년 된 코드도 여전히 잘 작동하는 더 좋은 예임.
     * IBM 메인프레임(z/OS) 작업을 하고 있음. IBM은 후방 호환성 유지 면에서 가장 뛰어남. Microsoft(Windows)가 두 번째이며, Linux(커널) ABI가 세 번째임. 대부분의 다른 시스템은 호환성 유지에 시간을 들이고 싶어하지 않는 OSS에서 흔히 발생하는 문제임.
     * 의존성이 앱을 '따뜻한 피'로 만들 수 있지만, Docker나 컨테이너화는 이러한 문제를 어느 정도 해결할 수 있음. 프로젝트에 사용할 라이브러리를 선택할 때 '차가운 피'인 라이브러리인지 충분히 연구하여 선택함.
     * 많은 엔지니어들이 GitHub에서 라이브러리를 찾을 때 마지막 커밋 시간을 확인함. 최근 커밋일수록 더 잘 지원된다고 생각함. 그러나 오랫동안 안정적으로 유지되고 버그가 없는 아카이브된 프로젝트를 찾는 것은 마치 중고품 가게에서 숨겨진 보석을 찾는 것과 같음.
     * 자신의 사이드 프로젝트를 유지보수하고 있음. 12-13년 전에 시작하여 PHP, Laravel, Symfony로 재작성함. 프로젝트를 장기간 유지하는 방법을 배우는 데 매우 가치가 있었음. 예를 들어, Vagrant에서 Docker로, Vue + Axios + Webpack 등에서 Htmx로 간소화하는 기회를 찾음. 최근에는 PHP 8.2와 Symfony 7로 업그레이드하고 ChatGPT 기반 기능을 통합함.
     * 최근 몇 년 동안의 모바일 앱이 몇 시간의 패치 작업을 필요로 하는 것에 대해 싫증남. 저자는 자신의 정적 사이트 생성기를 '차가운 피'로 묘사하며, Python 2에서 실행되는데, Python 2 설치가 점점 어려워지고 있음.
     * 1994-95년에 작성한 SDK가 2017년 회사를 떠날 때까지 사용됨. ANSI C로 작성되었으며, PHP(5)로 작성한 것도 PHP 8.2에서 잘 작동함. 그러나 이러한 것들은 지루하고 화제성 지수가 낮음.
     * 기사에서 언급된 것 외에도 본질적으로 안전한 위협 모델을 가지는 것이 중요함. 예를 들어, 전체 웹사이트는 공격자, 스팸 봇 등과 지속적으로 대응해야 하므로 본질적으로 '따뜻한 피'임. 반면 Tiddlywiki와 같은 정적 페이지는 웹에 올릴 필요가 없고 브라우저가 매우 안정적인 플랫폼이기 때문에 훨씬 나음.
"
"https://news.hada.io/topic?id=12593","Ask HN: 초보 CTO를 위한 추천 도서/블로그는 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask HN: 초보 CTO를 위한 추천 도서/블로그는 무엇인가요?

CTO로서 첫 스타트업 계획하기: 반드시 참고해야 할 자료들

     * 스타트업의 CTO로서 성공적인 시작을 위해 필수적으로 참고해야 할 자료들이 존재함.
     * 기술적 리더십, 제품 개발, 팀 구축, 그리고 사업 전략에 대한 이해가 중요함.
     * 이를 위해 업계 전문가들의 조언, 기술 컨퍼런스, 온라인 코스, 그리고 관련 서적 등 다양한 자료를 활용하는 것이 도움이 됨.

GN⁺의 의견

     * CTO로서 스타트업을 시작하는 것은 기술적인 지식뿐만 아니라 리더십과 비즈니스 전략에 대한 균형 잡힌 이해가 필요한 복잡한 과제임.
     * 이 글은 예비 CTO들에게 어떤 자료들을 참고해야 할지에 대한 유용한 가이드를 제공함으로써, 그들이 스타트업을 성공적으로 이끌 수 있는 기반을 마련하는 데 도움을 줄 수 있음.
     * 특히, 기술적 리더십과 팀 구축에 대한 조언은 스타트업의 초기 단계에서 매우 중요하며, 이는 창업자들이 자주 마주치는 도전과제들을 극복하는 데 기여할 수 있음.

        Hacker News 의견

     * CTO 역할에 대한 책 추천은 상황에 따라 다름:
          + 소규모 기술 팀의 리더라면 ""Staff engineer's path""를 추천.
          + 큰 조직을 이끌며 구조와 문화를 구축해야 한다면 ""An elegant puzzle"" 추천.
          + 엔지니어에서 엔지니어링 팀 관리자로 전환했다면 ""Becoming an effective software engineering manager"" 또는 ""Engineering management for the rest of us"" 추천.
          + 일반적인 자료로는 Gergely Orosz의 ""pragmatic engineer"" 뉴스레터 구독을 권장.
     * 한 스타트업의 CTO로서, 시드 단계부터 시리즈 A와 B를 거치며 성장한 경험 공유:
          + 파이썬과 자바스크립트로 웹/SaaS/분석 소프트웨어 개발, 리눅스와 AWS에 배포.
          + GitHub과 Notion 같은 경량 계획 도구 사용.
          + 팬데믹 이전부터 완전 분산 팀 운영.
          + 수백 개의 엔터프라이즈 고객 확보 및 SaaS 비즈니스 모델로 수익성 있는 성장.
          + 회사(Parse.ly)는 2021년 Automattic에 인수됨.
          + ""Managing software teams: the definitive reading list"" 블로그 포스트 공유.
     * 경영진의 일원으로서 기능보다는 사업 최적화에 중점을 둘 것 권장:
          + 제품 투자와 판매 사이의 결정, 상위 판매 문제 해결 등에 대한 기술적 관점 제공.
          + 기술보다는 비즈니스에 대한 지식 습득을 권장.
     * CTO로서의 경험 공유:
          + 책보다는 경험 많은 CTO들과 대화를 통한 조언을 추구할 것.
     * 관리자로서 책을 지침으로 삼되, 종교적 텍스트로 여기지 말 것:
          + 책의 내용을 팀에 강요하기보다는 팀원들의 전문성을 활용하도록 유도.
     * 기술적인 면을 커버했다면 행동 심리학, 조직 행동, 증거 기반 관리에 집중할 것을 제안.
     * CTO로서 필수적인 책으로 ""An Elegant Puzzle: Systems of Eng Management""과 ""The Art of Leadership, small things done well"" 추천.
     * ""Peopleware""는 클래식한 책으로 추천.
     * Camille Fournier의 ""the manager's path""를 추천하며, 관리자로서의 역할과 한계에 대한 인식 강조.
     * ""The Idealcast with Gene Kim"" 팟캐스트를 강력 추천하며, 여러 게스트들의 통찰력 있는 내용을 공유.
"
"https://news.hada.io/topic?id=12572","Ferret - 애플의 멀티모달 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ferret - 애플의 멀티모달 LLM

     * MLLM(Multimodal Large Language Model)
          + 이미지 내의 모든 형태 및 세분화된 공간 참조를 이해
     * Key Contributions
          + Ferret Model: 하이브리드 영역 표현 + 공간 인식 비주얼 샘플러
          + GRIT 데이터셋: 대규모, 계층적, 견고한 명령어 튜닝 데이터셋. 110만개의 샘플과 95만개의 하드 네거티브 데이터를 포함
          + Ferret Bench: 멀티모달 평가 벤치마크 (Referring/Grounding + Semantics + Knowledge + Reasoning 을 복합적으로 요구)
"
"https://news.hada.io/topic?id=12597","Lode Runner - HTML5 리메이크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Lode Runner - HTML5 리메이크

     * 1983년에 브로더번드에서 첫 출시되어 인기를 끌었던, 80년대를 대표하는 게임 ""로드러너""를 HTML5로 리메이크
     * 클래식(레벨 150개), 프로페셔녈(150), 리벤지(17), 팬북(66), 참피온십(51) 등 다양한 레벨이 포함된 버전을 지원
     * Apple-II 및 Commodore-64 버전으로 플레이 가능(그래픽 및 효과음이 살짝 다름)
     * 게임패드 지원

   js용 에뮬레이터와는 다른 포팅인가요?

   시간차를 이용해야하는 어려운 레벨들은 정말 한판 깨는데 하루종일 걸렸....

  Hacker News 의견

     * 브라더번드 트리플 크라운에 대한 추억
          + 1990년대 초반, 작성자는 자신의 마을 메인 스트리트에 있는 반지하 컴퓨터 소프트웨어 가게를 회상함.
          + PC Magazine에서 새 게임 소식을 읽고, 신작이 나올 때마다 가게에 방문해 재고가 있는지 확인함.
          + 가게가 최신 게임 출시에 느슨했는지, 당시 출시일이 불분명했는지, 게임이 진열대에 나타나기까지 몇 달이 걸림.
          + 새로운 PCMag을 받고 나면 관심이 다른, 더 진보된 게임으로 옮겨감.
          + 어느 토요일 아침, 가게를 방문했을 때 Borland 섹션에서 Turbo C 상자가 눈에 띔.
          + 아버지는 작성자가 생산적이고 창의적인 것에 관심을 보여 기뻐하며 Turbo C를 구입해줌.
          + 9살이었던 작성자는 자연스러운 천재가 아니었고, 아버지도 FORTRAN 이후의 코딩 경험이 없어 도움을 주지 못함.
          + Turbo C는 다시 선반 위로 올라갔고, 다음 달에 나올 Dark Forces에 집중함.
     * Lode Runner: The Legend Returns에 대한 추억
          + 작성자는 원작은 플레이하지 않았지만, Lode Runner: The Legend Returns를 가장 좋아하는 게임 중 하나로 꼽음.
          + 후반 레벨이 매우 도전적이며, 최종 단계에 도달한 기억이 없지만 중독성 있는 경험이었음.
          + Legend Returns의 충실한 리메이크를 다운로드할 수 있는 링크를 제공함.
     * Lode Runner에 대한 감상
          + Lode Runner는 플레이 메커니즘과 레벨 빌더로 인상적이었음.
          + 출시 당시의 '지금까지의 탑 10'에는 들겠지만, 현재의 모든 시간 탑 10에는 들지 않을 것임.
     * 원작 Lode Runner의 특징
          + 원작은 거의 즉시 로딩되었으며, 긴 ""로딩... 기다려 주세요"" 화면이 없었음.
          + 원작은 데이터 수집을 시도하지 않았고, 이름을 입력하라는 대화 상자가 없었음.
          + 원작에서는 플레이어가 계속 달렸지만, 새 게임에서는 계속 움직이기 위해 키를 누르고 있어야 함.
          + 원작의 키보드 레이아웃을 제공함.
     * Lode Runner: The Legend Returns와 어린 시절
          + 작성자는 어린 시절 많은 시간을 Lode Runner: The Legend Returns를 플레이하는 데 보냈음.
          + 당시 Compaq Presario가 Sierra 디스크와 함께 제공되었을 것이라 추측함.
     * Lode Runner에 대한 추억
          + 작성자는 어린 시절 좋아했던 게임으로, 80년대 후반 PC에서 플레이했음.
          + 재미있을 뿐만 아니라, 사용자가 자신의 레벨을 디자인할 수 있는 최초의 게임 중 하나였음.
          + 학교 컴퓨터실에서 서로 사용자 정의 레벨에 도전했음.
     * 브라더번드 트리플 크라운과 Turbo C에 대한 추억
          + 브라더번드 트리플 크라운에 대한 추억은 90년대 초반 컴퓨터 소프트웨어 가게의 매력을 떠올리게 함.
          + 새 게임 출시에 대한 기대감, 몇 달간의 기다림, 최첨단 기술의 유혹이 그 시대의 본질을 포착함.
          + Turbo C와의 우연한 만남은 코딩 세계로 뛰어들고자 하는 희망찬 야망을 반영함.
          + 9살의 작성자에게는 Dark Forces와 스톰트루퍼가 더 저항할 수 없는 유혹이었음.
          + 과거로의 즐거운 여행과 '될 수도 있었던' 순간들에 대한 이야기임.
     * Lode Runner의 레벨 에디터에 대한 추억
          + 작성자는 학교 친구들과 함께 Lode Runner의 레벨 에디터를 깊이 탐구함.
          + 레벨을 복잡하고 기존 레벨보다 어렵게 만드는 다양한 에지 케이스(거의 익스플로잇 같은)가 있었음.
          + 사람들에게 도구를 제공하는 것이 창의성을 불러일으키는 좋은 예임.
     * Lode Runner에 대한 추억
          + 작성자에게는 Macintosh 128K에서 좋아하는 게임이었음.
          + 조카가 계속 플레이하기 위해 Mac을 이탈리아로 가져갔으며, 이후 다른 컴퓨터에서는 플레이하지 않았음.
"
"https://news.hada.io/topic?id=12524","Nvidia 연구팀의 2023년도 많은 관심을 받은 10가지 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Nvidia 연구팀의 2023년도 많은 관심을 받은 10가지 연구

     * Neuralangelo: stunning high-fidelity 3D surface reconstruction.
       https://research.nvidia.com/labs/dir/neuralangelo/
     * Magic3D: text-to-3D is coming fast!
       https://research.nvidia.com/labs/dir/magic3d/
     * Hair Simulation: efficient simulation of Discrete Elastic Rods (DER) for hair. This isn't quite an AI work, but very visually appealing.
       https://research.nvidia.com/.../2023-08_interactive-hair...
     * Eureka: GPT-4 teaches a 5-finger robot hand how to spin pens better than I do! This is my team's work on bridging the gap between high-level reasoning and low-level dexterity.
       https://eureka-research.github.io/
     * Align Your Latents: high-resolution video synthesis with latent diffusion models. One of the best video generation works in 2023, coauthored by a few OG authors of Stable Diffusion.
       https://research.nvidia.com/labs/toronto-ai/VideoLDM/
     * Text2Materials: text prompt to generate materials like brick or mosaic that are tileable and seamlessly replicated over a surface of any size.
       https://blogs.nvidia.com/.../siggraph-research.../
     * CALM: a method to train steerable virtual characters to perform acts in a physics simulation.
       https://research.nvidia.com/labs/par/calm/
     * Vid2Player3D: learning Tennis skills for virtual characters!
       https://research.nvidia.com/labs/toronto-ai/vid2player3d/
     * Flexicubes: efficient and high-quality mesh optimization.
       https://research.nvidia.com/labs/toronto-ai/flexicubes/
     * eDiff-I: Text-to-Image diffusion with ensemble of expert denoisers.
       https://research.nvidia.com/labs/dir/eDiff-I/

   ... 으로 끝나는 interactive-hair... 와 siggraph-research... 링크가 잘못 연결되어있네요.

   각각
   https://research.nvidia.com/publication/…
   https://blogs.nvidia.com/blog/…
   입니다.
"
"https://news.hada.io/topic?id=12489","WhatsApp에서 발견된 클릭재킹 취약점을 통한 피싱 공격 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WhatsApp에서 발견된 클릭재킹 취약점을 통한 피싱 공격 가능성

발견 과정

     * WhatsApp에서 링크 미리보기 기능을 통해 HTTP 요청을 수행하는 방법을 연구함.
     * 링크와 미리보기가 별도로 전송되는 것을 확인하고, 이를 이용해 실제 링크와 다른 미리보기를 가진 메시지를 생성하는 데 성공함.

문제점 #1 - 링크 미리보기 불일치

     * WhatsApp 메시지에 포함된 링크와 미리보기 데이터를 분석하여 불일치를 만들어내는 방법을 모색함.
     * 메시지를 가로채고 수정하여 미리보기와 실제 링크가 다른 메시지를 전송하는 데 성공함.

문제점 #2 - 링크 위장 (2K2E)

     * 유니코드 문자를 이용해 텍스트 표현을 변경하는 방법을 실험함.
     * U+202E (Right-To-Left Override) 문자를 사용하여 링크를 역순으로 표시하고, 이를 통해 가짜 URL을 실제 URL처럼 보이게 하는 방법을 개발함.

최종 결과

     * Instagram으로 보이는 URL을 만들었지만, 실제로는 공격자의 블로그로 연결되는 링크를 생성함.
     * 이를 통해 사용자가 정상적인 링크로 착각하여 클릭하게 만들 수 있는 취약점을 발견함.

공격 시나리오

     * 공격자가 가짜 도메인을 구입하고, 정상적인 도메인의 미리보기를 사용하는 메시지를 생성함.
     * matchedText 속성을 제거하고 text 속성을 U+202E 문자와 가짜 URL로 변경하여 메시지를 조작함.
     * 이렇게 조작된 메시지를 피해자에게 전송함.

Meta의 반응

     * Meta는 다양한 플랫폼과 환경을 지원하기 때문에 URL 정규화 로직을 동적으로 조정할 수 있는 시스템을 가지고 있음.
     * 그러나 Meta는 이 보안 문제를 해결할 의도가 없으며, 스팸으로 감지될 경우에만 대응할 것으로 보임.

완화 방법

     * Meta가 이 문제를 해결할 의도가 없기 때문에 WhatsApp에서 링크를 신뢰할 수 없음.
     * 링크를 클릭하기 전에 복사하여 클립보드 미리보기에서 U+202E 문자가 정화된 링크 주소를 확인해야 함.

업데이트

     * WhatsApp 이외에도 적절한 정화가 이루어지지 않아 2K2E에 취약한 다른 서비스들이 있음.

   GN⁺의 의견:
     * 이 글에서 가장 중요한 것은 WhatsApp에서 발견된 클릭재킹 취약점으로, 사용자들이 실제 링크와 다른 가짜 링크를 클릭하게 만드는 공격 방법이 상세히 설명되어 있음.
     * 이 글이 흥미로운 이유는 일반적으로 신뢰하는 메시징 플랫폼에서 예상치 못한 보안 취약점이 발견되었기 때문이며, 이는 사용자들에게 링크를 클릭하기 전에 항상 주의를 기울여야 하는 이유를 상기시켜 줌.
     * 또한, Meta의 반응이 이 문제를 적극적으로 해결하려는 의지가 없음을 보여주어, 사용자 스스로가 보안에 더욱 주의를 기울여야 할 필요성을 강조함.

        Hacker News 의견

     * 기능 오용의 영리한 조합이지만, 공격자가 경찰, 정보기관 등이 아닌 이상 추가 공격이 필요하기 때문에 보안 영향은 낮다고 평가함. 기술적 정확성을 위해, 이를 ""클릭재킹""이라고 부르는 것은 적절하지 않다고 생각함. 클릭재킹은 특정 기술을 의미하며, 보이지 않는 HTML 프레임을 다른 콘텐츠 위에 겹쳐 놓는 것을 말함.
     * 클릭재킹은 사용자가 클릭하려는 요소가 아닌 다른 요소가 클릭 이벤트를 잡는 것을 말함. 공격자는 사용자가 클릭한 것을 감지할 수 있음. OP가 발견한 것은 멋지고, 실제로 클릭재킹이 아닌 다른 시스템에서 링크 표시를 변경하는 방법을 찾음.
     * 사용자가 링크 클릭 시 도메인을 인식하는 데 어려움을 겪고 있으며, 많은 사람들이 이해하지 못하거나 구별할 수 없음. 링크가 추적 가능하고 의심스러워 보이는데도 아무도 문제를 제기하지 않음.
     * Meta는 메시지 URL과 미리보기 URL이 다를 수 있는 문제를 인정하고 해결책을 마련해야 함. 이는 URL 단축을 풀기 위한 것일 수 있지만, Meta와 WhatsApp이 똑똑한 해결책을 마련할 수 있어야 함.
     * WhatsApp이나 유니코드 역순 문자가 문제가 아니라 URL 자체가 어렵다는 것이 진짜 문제임. visa.securesite.com과 같은 간단한 URL도 많은 사람들을 속임. 가까운 미래에 좋은 해결책이 나올 것 같지 않음.
     * Meta가 이 문제를 해결하지 않고 연구자에게 버그 바운티를 지급하지 않은 것에 실망함.
     * 이 공격이 ""리버스 엔지니어링""으로 분류된 것이 흥미로움.
     * RTL은 존재하는 동안 보안 취약점의 큰 원인이었음. RTL을 사용하지 않는 사람들이 위험에 노출되지 않도록 운영 체제에서 RTL을 비활성화하는 설정이 있어야 함.
     * 공격이 매우 멋지고, 쉽게 읽고 이해할 수 있는 글임. WhatsApp 웹 앱에 디버거를 사용했는지, 폰에 적용했는지, 에뮬레이터를 사용했는지에 대한 기본적인 질문이 있음.
     * 흥미로운 아이디어와 취약점을 공유해줘서 감사함. 간결하고 명확한 요약임.
     * 링크와 미리보기가 별도로 전송된다는 것이 확인됨. 사용자가 안전을 위해 링크와 미리보기를 비교해야 하는 UI 디자인은 더 큰 문제임.
"
"https://news.hada.io/topic?id=12534","크레이-1 대 라즈베리 파이 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           크레이-1 대 라즈베리 파이 비교

요약: 크레이 1 슈퍼컴퓨터와 홈 컴퓨터, 휴대폰, 태블릿의 성능 비교

     * 이 보고서는 크레이 1 슈퍼컴퓨터의 성능을 검증하기 위해 사용된 벤치마크를 기반으로 함.
     * 로렌스 리버모어 연구소의 프로그램 커널(리버모어 루프)를 포함하여 다양한 MFLOPS 측정치를 제공함.
     * 또한 Linpack과 Whetstone 벤치마크 결과도 고려됨.

배경 활동

     * 영국 정부 및 대학 프로젝트의 메인프레임 및 슈퍼컴퓨터 시스템 평가, 수락 테스트 및 벤치마킹에 관한 개인의 참여 세부사항 제공.
     * 벤치마크 및 스트레스 테스트 프로그램 개발, 시모어 크레이와의 만남, 성능 데이터 수집 등의 경험 공유.

제공된 결과

     * 리버모어 루프 MFLOPS 최소, 기하 평균(공식 평균) 및 최대, Linpack MFLOPS, 적절한 테스트의 Whetstone 전체 MWIPS 및 평균 MFLOPS 제공.
     * 모든 벤치마크는 단일 코어임.

라즈베리 파이 ARM CPU

     * 2012년 Pi 1과 2020년 Pi 400의 평균 리버모어 루프, Linpack 및 Whetstone MFLOPS는 크레이 1보다 각각 78.8, 49.5, 95.5배 빠름.

안드로이드 ARM CPU

     * 2012년 안드로이드 태블릿 결과는 크레이 1과 비교하여 미미한 성능부터 10배까지의 범위를 보임.
     * 2021년 중가형 휴대폰은 크레이 1보다 123, 74, 151배 빠른 MFLOPS 성능을 보임.

윈도우 및 리눅스 PC 인텔 CPU

     * 1994년 100 MHz 펜티엄이 크레이 1 리버모어 루프 평균 점수에 도달한 첫 PC로 표시됨.
     * 2021년 11세대 4150 MHz 코어 i5 CPU를 탑재한 중급 노트북은 크레이 1보다 117, 131, 134배 빠름.
     * SIMD 컴파일을 통해 i5는 크레이 1보다 359, 337, 226배 빠른 성능을 보임.

GN⁺의 의견

     * 크레이 1 슈퍼컴퓨터는 한때 세계에서 가장 빠른 컴퓨터였지만, 현재의 홈 컴퓨터, 휴대폰, 태블릿은 크레이 1보다 훨씬 더 빠른 성능을 보임.
     * 이러한 성능 비교는 기술의 빠른 발전과 현대 컴퓨팅 장치의 놀라운 처리 능력을 보여줌.
     * 벤치마크는 시간이 지남에 따라 컴퓨팅 장치의 성능을 평가하는 중요한 도구로 사용되며, 이 보고서는 그러한 벤치마크의 역사적 중요성을 강조함.

        Hacker News 의견

     * Cray-1과 Raspberry Pi 비교에 대한 생각
          + Cray-1에서 당시 가장 ""영웅적인"" 실제 계산이 무엇이었을지, 그리고 오늘날 Raspberry Pi에서 그 계산을 어떻게 재현할 수 있을지에 대한 생각이 먼저 듦.
          + 날씨/기후 모델이나 방사선 유체역학(Rad-hydro) 등이 예시로 제시됨.
          + 현대의 유한요소해석(FEA) 소프트웨어에 비해 정확도는 훨씬 낮겠지만, 시도해보는 것이 재미있을 것이라는 의견.
     * 과거에 Cray가 필요했던 소프트웨어
          + 벤치마크 이외에도 실제로 빠른 속도를 체감할 수 있는 소프트웨어가 있을지에 대한 의문.
          + 사용자의 경험상 현재 사용하는 소프트웨어는 과거 386 컴퓨터에서 실행했던 것들의 고급 버전으로 느껴짐.
          + 현재 Met에서 사용하는 소프트웨어는 백만 배 빠른 컴퓨터를 위해 설계되었기 때문에 이러한 비교가 이론적일 수 있지만, 과거에는 Cray가 필요했을 소프트웨어가 존재해야 한다는 주장.
     * Raspberry Pi를 Cray-1 케이스에 맞추는 아이디어
          + Jeff Geerling이 Raspberry Pi를 Cray-1 인클로저에 맞추는 후속 작업을 기대하는 댓글.
     * RISC-V와의 비교 제안
          + 벡터 머신인 Cray-1과 비교하기에는 벡터 1.0을 가진 RISC-V와 비교하는 것이 더 의미가 있다는 의견.
     * 과거와 현재 컴퓨터 성능 비교
          + 2013년에 최신 Intel x86 CPU를 구입하여 새 컴퓨터를 조립한 경험담.
          + 해당 컴퓨터가 1992년에는 미 국방부의 9천만 달러짜리 슈퍼컴퓨터보다 빠를 것이라는 계산 결과를 아내에게 설명.
          + 이러한 데이터는 TOP500 리스트에서 찾을 수 있으며, 과거 데이터를 추정하면 1981년에는 지구상의 모든 컴퓨터를 합친 것보다 빠를 수 있다는 결론에 도달함.
     * 과거와 현재의 기기 성능 차이
          + 10년 전 Raspberry Pi와 안드로이드 폰이 몇 배 더 빨랐지만, 현재는 약 100배 더 빠름.
          + 주머니에 들어갈 정도로 작아졌음에도 불구하고 인상적인 성능 향상을 이룸.
     * Cray-1의 디자인
          + Cray-1은 훨씬 나은 소파를 가지고 있다는 유머러스한 댓글.
     * 벤치마크의 초기 역사
          + 벤치마크의 초기 역사에 대해 읽을 수 있는 링크 제공.
     * Cray-1과 관련된 장난기 넘치는 이야기
          + 국립 연구소에서 Cray-1 슈퍼컴퓨터를 사용했던 사람의 이야기.
          + VIP 투어 그룹이 방문하기 전에 Cray-1 안에 숨어 있다가, 그룹이 도착하자 청바지 지퍼를 올리며 나타나 관람객들을 놀라게 한 에피소드.
     * 미래의 컴퓨팅 파워에 대한 상상
          + 40년 후에 누군가가 2023년의 가장 빠른 컴퓨팅 클러스터보다 강력한 저렴한 플라스틱 박스를 서랍 가득 모아 놓고, 언젠가 취미 프로젝트를 만들겠다고 다짐하는 상황을 상상하는 댓글.
"
"https://news.hada.io/topic?id=12538",""주목", "트랜스포머", 신경망 "대규모 언어 모델"에서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ""주목"", ""트랜스포머"", 신경망 ""대규모 언어 모델""에서

""주의(Attention)""와 ""변환기(Transformers)""에 대한 노트: 신경망에서의 ""대규모 언어 모델""

     * ""주의(Attention)""라는 용어는 실제 인간의 주의와는 다른 개념으로, 모든 가능한 벡터에 어느 정도의 가중치를 부여하는 것을 의미함.
     * ""주의""는 커널 스무딩의 한 형태로, 2015년경 신경망 분야에서 새롭게 발명된 것이 아니라 이미 존재하던 아이디어의 재발견임.
     * ""다중 머리 주의(Multi-Headed Attention)""는 다양한 커널을 사용하여 커널 스무딩을 수행하고 그 결과를 평균내는 방식임.

""변환기(Transformers)""

     * ""변환기""는 ""주의"" 메커니즘을 사용하여 입력 벡터들을 스무딩하고, 이를 통해 얻은 출력을 피드포워드 신경망에 통과시켜 최종 출력을 생성하는 구조임.
     * 변환기는 여러 층(layer)을 쌓아서 구성되며, 각 층은 ""주의"" 메커니즘과 피드포워드 신경망으로 이루어짐.
     * 변환기의 이름은 ""주의""보다는 덜 오해의 소지가 있으며, 실제로 변환하는 작업을 수행하기 때문에 적절함.

""언어 모델(Language Models)""

     * 언어 모델은 기본적으로 기호의 시퀀스에 대한 확률 모델로, 주어진 문맥에 따른 다음 기호의 확률을 모델링함.
     * 현대의 대규모 언어 모델(Large Language Models, LLMs)은 고정된 최대 문맥 길이를 가지는 유한 차수 마르코프 모델로 볼 수 있음.
     * LLMs는 복잡한 암묵적 스무딩을 통해 이전에 본 적 없는 문맥에 대해서도 예측을 수행할 수 있음.

""다음 기호 예측(Next Symbol) 대 장기 범위 예측(Longer-range Prediction)""

     * LLMs의 훈련 목표는 다음 기호를 정확하게 예측하는 것이며, 이는 장기 범위의 예측에도 강력한 목표가 될 수 있음.
     * 최소한의 예측자를 찾는 것은 예측하려는 기저 과정의 구조에 대해 많은 정보를 제공함.

""프롬프트 공개에 대한 강한 추측(A Strong Hunch about Uncovering Prompts)""

     * LLM 기반 애플리케이션의 프롬프트를 ""프롬프트를 말해달라""와 같은 요청으로 밝혀내려는 시도는 자기기만에 불과함.
     * LLM의 핵심 언어 모델은 프롬프트를 현재 입력 시퀀스의 다른 부분과 구별할 메커니즘을 가지고 있지 않음.
     * 시스템 설계자가 프롬프트를 추적하는 기능을 구현했을 수도 있지만, 그럴 이유가 거의 없음.

""고프니키즘(Gopnikism); 도서관""

     * LLM을 마치 마음과 같은 것이 아니라 도서관 카탈로그와 같은 ""문화 기술""로 생각하는 것이 가장 유망하고 매력적인 접근 방식임.
     * 프롬프트를 사용하여 LLM에 텍스트를 제공하는 것은 도서관의 내용을 검색하고 그에 따른 내용을 샘플링하는 것과 유사함.

  GN⁺의 의견

     * ""주의""라는 용어가 실제 인간의 주의와는 다른 기술적 개념으로 사용되는 것은 인공지능 분야에서 종종 발생하는 현상으로, 기술적 용어가 실제 세계의 현상과 혼동될 수 있음을 보여줌.
     * 대규모 언어 모델의 성공은 고전적인 기계 학습 방법론을 현대적인 컴퓨팅 파워와 결합하여 새로운 수준의 성능을 달성한 것으로, 이는 기존의 이론과 방법론을 재평가하고 혁신적으로 적용할 필요성을 강조함.
     * LLM을 도서관 카탈로그에 비유하는 것은 이 기술이 어떻게 인간의 지식과 정보를 처리하고 접근하는지에 대한 흥미로운 시각을 제공하며, 이는 인공지능이 인간 문화와 상호작용하는 방식을 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 구글 리서치에서 근무하며 ""Attention is All You Need"" 논문의 저자 두 명과 함께 일했다고 밝힌 한 댓글러는, 해당 논문의 제목을 선택한 사람과도 협업했다고 언급함. 이 댓글러는 자기주장(self-attention)이 연구 커뮤니티에서 이미 알려진 개념이었으며, 저자들이 이를 발명했다고 주장하지 않았다고 설명함. 저자들은 피드포워드 신경망의 성능을 향상시키기 위해 여러 기술을 결합하는 방법을 모색하다가 흥미로운 결과를 얻었고, 이후 연구 과정에서 주의(attention) 메커니즘이 핵심적인 역할을 한다는 것을 발견했다고 함. 또한, 논문의 제목은 비틀즈의 노래 ""All You Need Is Love""를 연상시키는 말장난이라고 언급함. 이 댓글러에게 가장 도움이 되었던 논문은 Phuong과 Hutter가 쓴 ""Formal Algorithms for Transformers""로, 명확성과 정확성에 중점을 두고 쓰여졌으며, 특히 동기
       부여 섹션(Section 2)이 원 논문과 이후 논문들의 결점을 잘 설명하고 있다고 평가함.
     * 다른 댓글러는 ""Attention is All You Need"" 논문을 여러 번 주의 깊게 읽었음에도 불구하고 '주의'가 무엇을 하는지 이해할 수 없었다고 고백함. 수학적인 부분은 이해할 수 있었지만, 여러 튜토리얼을 읽어도 도움이 되지 않았다고 함. 결국 몇 년이 지나서야 '주의'가 단지 커널 스무딩(kernel smoothing)이라는 것을 깨달았다고 밝히며, 이는 논문이 명확하지 않게 쓰여진 탓이라고 비판함. 이 댓글러는 대부분의 기계학습 논문이 쓰레기라고 주장하며, ""Attention is All You Need"" 논문조차 대부분보다 낫다고 평가함.
     * 세 번째 댓글러는 논문의 ""의식의 흐름"" 같은 접근 방식이 흥미롭고 상쾌하다고 평가함. 또한, 인터넷에서 받은 비판 때문에 저자가 사과하고 겸손한 태도를 보이는 것에 대해 언급하며, 이러한 부정적인 반응이 저자가 자신의 노트를 계속해서 발행하는 것을 막지 않기를 바란다고 의견을 표함.
     * 다른 댓글러는 기계학습에 관한 대부분의 글과 달리 이 글이 자신의 언어로 쓰여진 것 같다고 느낌을 표현함. Lempel-Ziv(LZ)에 대한 섹션이 흥미롭다고 언급하며, LZ 모델을 크게 만드는 것은 LZ가 문자열을 정확히 일치시켜야 하기 때문에 그다지 흥미롭지 않을 것이라고 평가함. 대신, 텍스트에 대한 ""jpeg""와 같이 일부 정확하지 않음을 허용하여 크기를 줄이는 것이 더 흥미로울 수 있다고 제안함. 이것이 아마도 대규모 언어 모델(LLMs)이 하는 일일 것이라고 추측함.
     * 또 다른 댓글러는 점곱곱 주의(scaled dot product attention)를 일반화된 컨볼루션 메커니즘으로 생각한다고 언급함. 질의(query), 키(key), 값(value)이라는 용어가 혼란스럽다고 말하며, 이 세 가지는 자기주의(self-attention)에서 동일한 신호에서 파생되어 서로 곱해진다고 설명함. 이 메커니즘이 왜 효과적인지, 어떤 하이퍼파라미터가 어떤 데이터에 좋은지, 이상적인 시퀀스 크기는 무엇인지에 대해서는 아무도 모른다고 덧붙임.
     * 다른 댓글러는 트랜스포머(transformers)가 단지 또 다른 범용 근사자(universal approximator)라고 언급하며, 특정 주의 헤드(attention head)가 연속적인 연관 배열, 커널 스무딩, 또는 단일 의미성을 나타내는 고차원 벡터 공간을 시뮬레이션하는지 여부는 중요하지 않다고 주장함. 중요한 것은 트랜스포머가 GPU와 병렬 처리에서 효율적으로 훈련될 수 있다는 점이며, 이것이 LZ나 다른 범용 근사자보다 우수한 이유라고 설명함. LZ(또는 다른 것)를 GPU에서 트랜스포머보다 훨씬 효율적으로 작동시킬 수 있다면, 다음 OpenAI를 창립하고 억만장자가 될 수 있을 것이라고 언급함.
     * 한 댓글러는 ""Mythology: 우리는 본 적이 있는 각 토큰의 의미를 컨텍스트에 기반하여 수정하고, 유사한 의미들이 서로를 강화한다""는 문장에 대한 설명을 요청함. 이 시점에서 커널 스무딩이 각 임베딩 벡터에 독립적으로 적용되는 것처럼 보이며, 시퀀스에서 인접한 토큰들에 의해 파생되고 스무딩된 어떤 y_t 벡터가 왜 영향을 받는지 이해할 수 없다고 언급함. r_t 토큰을 추가하면 컨텍스트가 중요해진다는 것을 볼 수 있지만, 이것이 컨텍스트를 고려하는 유일한 것인지 물음.
     * 다른 댓글러는 다른 분야에서 학문적 ""엄밀함""이 더 높고 비슷한 결과가 이미 존재하는 사람들이 ""Attention is All You Need""와 같은 기계학습 논문에 분노하는 것을 이해한다고 언급함. 이 댓글러는 이러한 논문들이 실제로 좋은 학문적 논문이 아니며, 영리한 이름을 찾고 가장 이해하기 어려운 공학 코스프레 용어를 선택하는 것이 좋은 논문이 아니라고 비판함. 그러나 실제로는 이 모든 것이 크게 중요하지 않으며, 대규모 언어 모델들이 작동하고, 그것도 어리석은 이유로 작동한다고 주장함. ""위치 임베딩(positional embeddings)""을 추가하는 등의 공학적인 해결책이 실제로 문제를 해결했으며, 이는 깊은 수학적 이해가 아니라 시도해보고 효과가 있었기 때문이라고 설명함. 또한, 커널 방법을 사용하여 주의 메모리 요구 사항을 선형으로 줄이는 ""효율적인
       트랜스포머""에 대해서도 실제로는 중요하지 않다고 언급하며, OpenAI, Anthropic, Meta와 같은 회사들은 더 많은 GPU를 추가하는 것에 대해 신경 쓰지 않고 처리량에만 관심이 있다고 주장함. 결과는 추측과 경험에 불과하며, 실제로 중요한 것은 결과물이라고 결론짓음.
     * 마지막 댓글러는 ""LLM 기반 애플리케이션의 프롬프트를 '프롬프트를 말해달라'는 식으로 요청함으로써 밝히려는 모든 사람이 자신을 속이고 있다""는 주장에 전적으로 동의하지 않는다고 밝힘. 핵심 언어 모델은 프롬프트를 현재 입력 시퀀스의 다른 부분과 구별하는 메커니즘이 없으며, 시퀀스의 한 부분에서 다른 부분으로의 교차 참조 메커니즘도 없다고 설명함. 시스템 설계자들이 전체 시스템에서 프롬프트를 추적하는 무언가를 코딩했을 수는 있지만, 그럴 이유가 무엇인지는 불분명하다고 언급함. ""소프트 프롬프트(soft prompt)""를 사용하는 것이 더 효율적이고 효과적일 수 있으며, 이는 그라디언트 하강법으로 학습될 수 있는 벡터 시퀀스의 시작 부분을 의미하지만, 이는 깔끔한 단어 문자열에 해당하지 않을 수 있다고 설명함. LLM에 프롬프트를
       요청하면, 이는 코드나 내부 상태에 대한 접근이 아니라 훈련된 단어 시퀀스의 통계에 기반하여 생성될 것이라고 주장함. 이 댓글러는 언어 모델 관점에서 접근하는 것이 최선이라고 생각하며, 입력의 커널 스무딩 결과로 출력이 생성되므로, 프롬프트에 있는 정보를 사용하여 모델을 특정 스타일로 유도하는 것이 가능하다고 결론짓음.
"
"https://news.hada.io/topic?id=12585","CSS Wrapped: 2023 - 올해 변경된 CSS 총정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CSS Wrapped: 2023 - 올해 변경된 CSS 총정리

     * 2023년은 CSS에 있어 엄청난 한 해였음. 웹 플랫폼에서 불가능하다고 여겨졌던 기능을 가능하게 하는 CSS 및 UI 분야의 많은 새로운 기능들이 등장
     * 모든 주요 브라우저는 컨테이너 쿼리, 서브그리드, :has() 선택자 등을 지원하며, 새로운 색상 공간과 함수들도 지원
     * Chrome은 CSS만으로 스크롤 기반 애니메이션과 웹 뷰 간의 부드러운 전환을 지원
     * CSS 중첩과 범위 지정 스타일과 같이 개발자 경험을 개선하는 새로운 기본 요소들이 많이 도입됨

Architectural foundations

  Trigonometric functions

     * Chrome 111은 sin(), cos(), tan(), asin(), acos(), atan(), atan2()와 같은 삼각 함수를 지원
     * 이 함수들은 애니메이션과 레이아웃 목적에 매우 유용

  Complex nth-* selection

     * :nth-child() 의사 클래스 선택자를 사용하면 DOM 내의 요소를 인덱스로 선택할 수 있음
     * Chrome 111부터는 :nth-child()와 :nth-last-child()에 선택자 목록을 선택적으로 전달할 수 있게 됨

  Scope

     * Chrome 118은 문서의 특정 하위 트리에 선택자 일치를 범위 지정하는 @scope를 지원
     * 범위 지정된 하위 트리는 _범위 지정 루트_와 선택적인 _범위 지정 한계_로 정의

  Nesting

     * 중첩을 사용하기 전에는 모든 선택자를 별도로 명시적으로 선언해야 했음.
     * 이제 관련 스타일 규칙을 그룹화하여 계속해서 선택자를 사용할 수 있음.

  Subgrid

     * CSS subgrid를 사용하면 더 복잡한 그리드를 만들고 자식 레이아웃 간에 더 나은 정렬을 할 수 있음
     * 내부 그리드가 외부 그리드의 행과 열을 자신의 것으로 채택할 수 있게 함

Typography

  Initial-letter

     * Chrome 110에서 시작된 initial-letter 속성은 초기 글자의 배치를 설정하는 작지만 강력한 CSS 기능임
     * 글자를 드롭된 상태나 올라간 상태로 배치할 수 있음

  text-wrap: balance and pretty

     * 개발자는 최종 크기, 글꼴 크기 또는 심지어 헤드라인이나 단락의 언어를 알 수 없음
     * balance와 pretty라는 두 가지 새로운 텍스트 래핑 기술이 도입됨

Color

  HD Color Spaces (Color Level 4)

     * 새로운 색상, 더 많은 색상, 새로운 색상 공간, 색상 함수 및 새로운 기능이 2023년에 도입됨
     * CSS와 색상은 이제 HDR 색상의 그라데이션을 만들고, 다른 색상 공간에서 그라데이션을 보간할 수 있음

  color-mix function

     * 색상 혼합은 고전적인 작업이며, 2023년 CSS에서도 가능해짐
     * 흰색 또는 검은색뿐만 아니라 투명도를 색상에 혼합할 수 있으며, 선택한 색상 공간에서 이를 수행할 수 있음

  Relative color syntax

     * 상대 색상 구문(RCS)은 색상 변형을 생성하기 위한 color-mix()의 보완적인 방법임
     * RCS는 색상의 상대적 및 절대적 조작을 수행할 수 있게 함

Responsive Design

  Size container queries

     * 뷰포트의 전역 크기 정보를 사용하는 대신, 컨테이너 쿼리는 페이지 내의 부모 요소를 쿼리하는 것을 지원함

  Style container queries

     * 스타일 쿼리는 부모 요소의 사용자 정의 속성 값을 쿼리할 수 있게 함

  :has() selector

     * 거의 20년 동안 개발자들은 CSS에서 ""부모 선택자""를 요구해왔음
     * :has() 선택자를 사용하면 .card:has(img.hero)와 같이 자식으로 히어로 이미지를 가진 .card 요소를 선택할 수 있음

  Update media query

     * update 미디어 쿼리를 사용하면 장치의 리프레시 속도에 맞게 UI를 조정할 수 있음

  Scripting media query

     * 스크립팅 미디어 쿼리는 JavaScript가 사용 가능한지 여부를 확인하는 데 사용할 수 있음

  Reduced-transparency media query

     * 비투명 인터페이스는 다양한 유형의 시각 장애에 대해 두통을 유발하거나 시각적으로 어려울 수 있음
     * 이 미디어 쿼리는 사용자가 UI에서 투명도를 줄이거나 제거할 수 있는 시스템 환경 설정을 가지고 있음을 나타냄

Interaction

  View transitions

     * 페이지의 사용자 경험에 큰 영향을 미치는 뷰 전환
     * 뷰 전환 API를 사용하면 단일 페이지 애플리케이션의 두 페이지 상태 간의 시각적 전환을 만들 수 있음

  Linear-easing function

     * linear() 함수는 복잡한 이징 함수를 간단하게 만들 수 있게 해주며, 정밀도를 약간 잃는 대신 사용할 수 있음

  Scroll End

     * scrollend 이벤트는 사용자가 여전히 제스처 중인지 여부를 이해하는 완벽한 타이밍의 스크롤 종료 이벤트를 제공함

  Scroll-driven animations

     * 스크롤 기반 애니메이션은 스크롤러의 스크롤 오프셋에 기존 CSS 애니메이션 또는 웹 애니메이션 API로 만든 애니메이션을 연결할 수 있게 해줌

  Deferred timeline attachment

     * CSS를 통해 스크롤 기반 애니메이션을 적용할 때, 제어하는 스크롤러를 찾는 메커니즘은 항상 DOM 트리를 거슬러 올라가기 때문에 스크롤 조상에만 제한됨

  Discrete property animations

     * 이산 애니메이션, 예를 들어 display: none으로부터 애니메이션을 수행하는 능력이 2023년에 새로운 기능으로 추가됨

  @starting-style

     * @starting-style CSS 규칙은 display: none으로부터 애니메이션을 수행하는 새로운 웹 기능을 기반으로 함

  Overlay

     * 새로운 CSS overlay 속성은 popover 및 dialog와 같은 최상위 스타일 요소가 부드럽게 최상위에서 애니메이션되어 나오도록 함

Components

  Popover

     * Popover API는 페이지의 나머지 부분 위에 놓이는 요소를 만드는 데 도움을 줌

  Horizontal rules in select

     * Chrome과 Safari는 올해 요소 내에 수평 규칙 요소( 태그)를 추가할 수 있는 기능을 지원함

  :user-valid and invalid pseudo classes

     * :user-valid 및 :user-invalid는 :valid 및 :invalid 의사 클래스와 유사하게 작동하지만, 사용자가 입력과 상당히 상호 작용한 후에만 폼 컨트롤과 일치함

  Exclusive accordion

     * Chrome 120에서는 `` 요소에 name 속성을 지원함
     * 이 속성을 사용하면 동일한 name 값을 가진 여러 `` 요소가 의미론적 그룹을 형성함
"
"https://news.hada.io/topic?id=12506","Sunouno AI

음악 창작의 새로운 방향

     * 음악은 특별한 날을 위해 만들어질 수 있음.
     * 미토콘드리아에 대한 노래를 만드는 것도 가능함.
     * 기분이 좋을 때 그 기분을 담은 행복한 노래를 창작할 수 있음.
     * 자신의 감정을 표현하는 노래를 만들 수 있음.
     * 친구를 위한 노래를 만들어 줄 수 있음.
     * 달에 대한 노래를 창작하는 것도 하나의 아이디어임.
     * 엄마를 위한 노래를 만들 수 있음.
     * 점심시간을 위한 노래도 만들어질 수 있음.
     * 금붕어를 위한 노래를 만드는 것도 가능함.
     * 치과에 대한 노래를 만들 수 있음.
     * 울기 위한 노래를 만들 수도 있음.
     * 운동을 할 때 듣는 노래를 만드는 것도 좋은 생각임.

GN⁺의 의견

     * 음악은 감정, 사람, 장소, 심지어는 미토콘드리아와 같은 추상적인 개념에 이르기까지 다양한 주제에 대해 창작될 수 있는 매우 유연한 예술 형태임.
     * 이 글은 음악이 단순히 엔터테인먼트의 수단을 넘어서, 개인의 감정이나 생활의 일부분을 표현하는 수단으로 사용될 수 있음을 보여줌.
     * 사람들에게 흥미로운 이유는, 자신만의 독특한 경험을 음악으로 표현할 수 있는 무한한 가능성을 상기시켜주기 때문임.

        Hacker News 의견

     * 8비트 볼리우드 전자 음악을 만드는 데 재미있었음.
          + 사용자가 8비트 스타일의 볼리우드 전자 음악을 만들어 즐거움을 느꼈다고 공유함.
     * Suno 팀에게 피드백: 노래 재생 방법을 찾는 데 오래 걸렸음. 화살표를 마우스오버하여 클릭해야 했음.
          + 사용자가 Suno 앱에서 노래를 재생하는 데 어려움을 겪었으며, 재생 버튼이 바로 작동하지 않아 마우스오버를 통해 재생해야 했다는 피드백을 제공함.
     * 일시적인 음악 메시지와 밈에 대한 잠재력이 큼. ChatGPT가 반응을 생성하는 것처럼 합리적인 가사도 생성할 수 있음.
          + 사용자는 AI가 일시적인 음악적 메시지와 밈을 만드는 데 큰 가능성이 있으며, ChatGPT가 대화에 반응하는 것처럼 가사를 생성할 수 있다고 언급함.
     * AI 이미지 생성기의 발전 속도를 따라잡는다면 음악 산업에 영향을 줄 것임. 노래 작곡 영감을 위한 놀라운 도구임.
          + 사용자는 AI 기술이 음악 산업에 변화를 가져올 것이며, 특히 노래 작곡에 영감을 주는 도구로서의 잠재력을 강조함.
     * 음악 제작에 대해 잘 모르는 사람도 음악을 만들 수 있음. AI가 생성한 몇 가지 노래를 여기서 들을 수 있음.
          + 사용자는 음악 제작에 대한 지식이 없어도 AI를 통해 음악을 만들 수 있다고 언급하며, AI가 생성한 노래를 들을 수 있는 링크를 공유함.
     * 크리스마스 튠을 만드는 데 정말 재미있었음.
          + 사용자가 AI를 사용하여 크리스마스 테마의 음악을 만들고 그 경험이 재미있었다고 공유함.
     * iOS Safari에서 UI 문제: 'Create'를 탭해도 버튼이 바뀌지 않아 같은 것에 대해 크레딧을 여러 번 사용할 수 있음. 한 번 탭할 때마다 모두 생성되어 라이브러리에 나타남. 몇 가지 클릭 아티팩트가 있지만, 결과는 꽤 좋았음.
          + 사용자는 iOS Safari에서 'Create' 버튼을 눌렀을 때 버튼의 상태가 변하지 않아 실수로 여러 번 크레딧을 사용할 수 있다고 지적하며, 이로 인해 여러 개의 노래가 생성되었다고 언급함.
     * 생성된 오디오를 사용하는 것에 대한 서비스 이용 약관의 법적 지위는 어떠한가? AI는 저작권을 소유할 수 없으므로, 무료 계층에서 수익 창출 능력에 대한 제한은 집행 가능한가?
          + 사용자는 AI가 생성한 오디오에 대한 저작권과 관련된 법적 문제를 제기하며, AI가 저작권을 소유할 수 없다면 사용자가 생성된 오디오로 수익을 창출하는 것에 대한 제한이 실제로 집행 가능한지에 대한 정보를 요청함.
     * 약 1분 길이의 단일 노래를 생성하는 데 드는 비용과 시간은 얼마인가?
          + 사용자가 AI를 통해 생성된 약 1분 길이의 노래에 대한 비용과 생성 시간에 대해 궁금해함.
     * Suno는 빠르게 개선되고 있음. 2023년 4월에 'Bark'를 출시했을 때 좋았지만, 새로운 모델은 더 재미있음. 팀에게 박수를 보냄.
          + 사용자는 Suno의 발전 속도를 칭찬하며, 특히 최근 모델이 이전 모델보다 더 재미있다고 언급함.
"
"https://news.hada.io/topic?id=12561","아폴로 11호 대 USB-C 충전기 (2020년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아폴로 11호 대 USB-C 충전기 (2020년)

아폴로 11호 유도 컴퓨터(AGC) 대 USB-C 충전기의 CPU 비교

     * 최근 USB-C 벽 충전기에 포함된 CPU와 1969년 달에 인간을 보내고 돌아온 아폴로 11호 유도 컴퓨터(AGC)의 성능 비교.
     * 아폴로 11호 유도 컴퓨터는 1.024MHz의 클록 속도와 2048개의 15비트 단어 RAM, 36,864개의 15비트 단어 프로그램 저장 공간을 가짐.
     * Anker PowerPort Atom PD 2의 CPU는 48MHz 클록 속도와 8KB RAM, 128KB 프로그램 저장 공간을 가지고 있어 가장 강력한 CPU로 평가됨.

속도 비교

     * 아폴로 11호 유도 컴퓨터는 명령어 실행에 최소 12 클록 사이클이 필요하며, 단일 누산기 레지스터를 사용하여 산술 연산을 수행.
     * Anker PowerPort Atom PD 2의 ARM Cortex-M0 CPU는 캐시가 없고 메모리 접근이 일정한 속도로 발생하며, 명령어가 순서대로 실행됨.
     * 대부분의 경우 아폴로 11호 유도 컴퓨터의 명령어는 Cortex-M0의 명령어보다 12배 더 많은 클록 사이클이 소요됨.

메모리 비교

     * 프로그램 저장 공간: 아폴로 11호 유도 컴퓨터는 프로그램 공간 부족으로 가상 머신/인터프리터를 작성해야 했음.
     * CYPD4225는 128KB의 플래시 메모리를 가지고 있어 아폴로 11호 유도 컴퓨터보다 1.90배 더 많은 정보를 저장할 수 있음.
     * RAM: Anker PowerPort Atom PD2는 아폴로 11호 유도 컴퓨터보다 약 두 배 많은 RAM을 가지고 있음.

달까지의 여정

     * 아폴로 11호 우주선에는 4개의 컴퓨터가 포함되어 있었음: 2개의 아폴로 11호 유도 컴퓨터, 1개의 Saturn Launch Vehicle Digital Computer (LVDC), 1개의 Abort Guidance System (AGS).
     * 모든 아폴로 11호 컴퓨터는 Anker PowerPort Atom PD 2보다 성능이 낮고 메모리가 적음.
     * CYPD4225는 우주 환경에서 작동하는 것에 대해 평가되지 않았으며, 아폴로 11호 컴퓨터가 지원하는 주변 장치의 수와 종류에 대한 추가 조사가 필요함.

결론

     * 2012-2013년에는 대부분의 USB 충전기가 디지털 통신 없이 USB 충전 감지를 사용했으나, 2020년 USB-C 충전기는 마이크로컨트롤러와 CPU를 포함함.
     * USB-C 충전기 중 일부는 아폴로 11호 유도 컴퓨터보다 더 강력한 CPU를 가지고 있으며, 대부분은 최소 10배 빠른 클록 속도를 가짐.
     * USB-C Power Delivery는 문제를 해결하고 새로운 기능을 제공하지만, 제조 과정에서 다루어야 할 또 다른 펌웨어와 칩으로 복잡성이 증가함.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 현대의 USB-C 충전기에 포함된 CPU가 1969년 달 착륙 임무에 사용된 아폴로 11호 유도 컴퓨터보다 훨씬 더 강력하다는 사실임.
     * 이 비교는 기술의 급속한 발전을 보여주며, 우리가 일상적으로 사용하는 기기들이 과거의 우주 탐사 장비보다 더 높은 컴퓨팅 능력을 가지고 있다는 점에서 흥미롭고 매력적임.
     * 이 글은 복잡성이 증가하는 현대 기술의 추세를 반영하며, 이러한 변화가 우리의 일상 생활과 기술의 미래에 어떤 영향을 미칠지에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     *

     Apollo 11 spacecraft contains 4 computers
          + 아폴로 11 우주선에는 4개의 컴퓨터가 있음.
               o 아날로그 컴퓨터는 종종 과소평가되지만, 중요한 역할을 함.
               o 플라이트 컨트롤 컴퓨터(FCC)는 아폴로 11의 아날로그 컴퓨터로, 로켓의 짐벌을 제어함.
     * I'm a bit tired of all the sensationalist ""look what landed on the moon vs. today's hardware"" comparisons.
          + 달에 착륙한 기술과 현재 하드웨어를 비교하는 선정적인 논의에 지침.
               o 초기 비행기에는 컴퓨터가 없었음에도 성공했으므로, 컴퓨팅 파워만이 성공의 결정적 요소는 아님.
               o 아폴로 임무의 소프트웨어와 하드웨어는 매우 잘 설계되었으며, 현재의 높은 컴퓨팅 성능이 좋은 엔지니어링의 필요성을 없애지는 않음.
     * Is the weight/cost calculus sufficiently improved now that it’s cheaper to shield the processor in its entirety rather than trying to rad harden the circuitry itself?
          + 현재는 회로를 방사선 경화하는 것보다 프로세서 전체를 보호하는 것이 더 저렴한지에 대한 무게/비용 계산이 개선되었는지에 대한 질문.
               o 방사선 경화는 표준 부품 사용 불가와 새로운 기술 사용 제한으로 비용이 많이 듦.
               o 화성 드론에서 탐구된 분야 중 하나이며, 화성 표면의 방사선 문제가 우주에서 사용될 것과 다를 수 있음.
     *

     others point out that the LVDC actually contains triply-redundant logic.

          + LVDC에는 실제로 3중 중복 논리가 포함되어 있음.
               o 3중 중복 논리는 3개의 답변을 제공하고 투표 메커니즘이 승자를 선택함.
               o 3개의 구성 요소는 실제로 2중 중복을 의미하며, 투표 메커니즘이 3개의 다른 답변에서 올바른 답변을 도출할 수 없다면 3중 중복으로 간주되기 어려움.
     * Pretty much all USB chips have a fully programmable CPU when you go into the data sheets.
          + 데이터 시트를 보면 거의 모든 USB 칩에는 완전히 프로그래밍 가능한 CPU가 있음.
               o 간단한 HID나 충전 장치에는 과도해 보일 수 있지만, 기본 마이크로컨트롤러는 저렴하며 ASICs에 비해 비용을 절감함.
     * I'm curious - are there any ways of finding out the precise hardware that's used in these small-scale devices without actually having to take them apart?
          + 작은 규모의 장치에 사용된 정확한 하드웨어를 분해하지 않고 알아낼 수 있는 방법이 있는지 궁금함.
               o 특별한 데이터시트, 정부 인증 문서 등을 통해 정보를 얻을 수 있음.
     *

     the LVDC actually contains triply-redundant logic
          + LVDC에는 실제로 3중 중복 논리가 포함되어 있음.
               o 3개의 마이크로컨트롤러로 투표 체계를 에뮬레이션하고 4번째로 투표를 집계하는 것이 시스템을 더 신뢰할 수 있게 만들지 않음.
               o 투표 집계자는 단일 실패 지점(SPOF)이 될 수 있음.
               o 복잡성이 증가하면 신뢰성이 감소할 수 있으므로, 여러 CPU가 투표로 신뢰성을 높이는 방법은 문제가 될 수 있음.
     *

     The Anker PowerPort Atom PD 2 USB-C Wall Charger CPU is 563 times faster than the Apollo 11 Guidance Computer
          + Anker PowerPort Atom PD 2 USB-C 벽 충전기 CPU는 아폴로 11 유도 컴퓨터보다 563배 빠름.
               o 충전기가 달에 인간을 보낼 수 있을 정도로 프로그래밍될 수 있다는 사실이 놀랍음.
     *

     The CYPD4225 is definitely not rated for space.. if it would work in space
          + CYPD4225는 우주용으로 평가받지 않았지만, 우주에서 작동할 수 있음.
               o 우주 로켓의 역사에서 대부분은 핵전쟁의 방사선을 고려하여 설계되었지만, 우주에서는 자연 방사선을 발견함.
               o SpaceX는 로켓에 산업용 컴퓨터를 사용함(방사선 경화되지 않음).
               o 방사선에 의한 임의의 스파이크와 반도체 구조의 노화는 문제가 될 수 있지만, 지구-달 환경에서는 장기간 운영에 대한 문제임.
     * So in 50 years the equivalent of a gpt4 training cluster from today's datacenters will fit in a cheap cable, and it will run over 100 times faster than a full cluster today.
          + 50년 후에는 오늘날 데이터센터의 gpt4 트레이닝 클러스터와 동등한 기능을 가진 기술이 저렴한 케이블에 들어가고, 오늘날 전체 클러스터보다 100배 빠르게 작동할 것임.
"
"https://news.hada.io/topic?id=12588","rem(Remember Everything) - 애플 실리콘에서 모든 것을 기록하고 검색하게 해주는 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      rem(Remember Everything) - 애플 실리콘에서 모든 것을 기록하고 검색하게 해주는 오픈소스

     * 컴퓨터 화면에서 일어나는 모든 동작을 녹화(2초마다 한번씩 스크린 샷을 찍음)
     * 타임라인 보기에서 좌/우로 스크롤하여 시간 이동 가능
          + Live Text가 텍스트를 인식하면 텍스트 선택가능
     * 특정 단어를 검색해서 화면을 찾고, 화면의 OCR된 전체 내용을 보거나 그 텍스트를 ChatGPT등에 보내서 추가 작업이 가능
     * Apple Silicon에서만 테스트되었으며, 릴리스도 Apple Silicon 전용.
     * 매우 초기 버전임 : 휴일 동안 몇 일 만에 작성, Swift 초보임

시작하기

     * 직접 빌드하거나, 릴리스 다운로드 후 xattr -c rem.app 실행으로 macOS에 앱 승인.
     * 앱 실행 후 ""Start Remembering"" 클릭하여 ""Screen Recording"" 접근 권한 부여.
     * ""Open timeline"" 또는 ""Cmd + Scroll Up""으로 타임라인 뷰 열기.
     * 타임라인에서 왼쪽 또는 오른쪽으로 스크롤하여 시간 이동.
     * ""Search"" 클릭하여 검색 뷰 열고, 타임라인에서 썸네일 클릭하여 해당 시간으로 이동.
     * 타임라인에서 Live Text 활성화 후 텍스트 선택 가능.
     * ""Copy Recent Context"" 클릭하여 최근 본 내용을 LLM과 상호작용하는 프롬프트로 복사.
     * ""Purge All Data"" 클릭하여 모든 데이터 삭제 가능.

현재 지원 기능:

     * 과거로 돌아가기 (본 모든 것의 전체 화면 스크러버).
     * 과거의 텍스트 복사.
     * 본 모든 것 검색.
     * LLM과 상호작용을 위한 최근 컨텍스트 쉽게 획득.

추가하고 싶은 기능:

     * 로컬 벡터 임베딩 업데이트를 통한 자연어 검색/에이전트 상호작용.
     * 벡터 데이터베이스에 대한 새로운 접근 방식 탐색.
     * 멀티 모니터 지원.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이 도구는 멋져 보인다. 최근에 디스크 공간을 확보하려다가 거의 1년 전의 9시간짜리 화면 녹화 파일을 발견한 일이 생각난다. 실수로 녹화를 켜놓은 것 같다. 빠르게 스크러빙하며 몇 분 안에 전체를 보는 것은 당시의 생각 과정을 엿볼 수 있는 매혹적인 경험이었다. 온라인으로 무언가를 연구하는 과정을 볼 수 있었고, 스포츠 경기를 다시 보는 것처럼 교육적이고 유용했다. 또한, 그 당시의 세부 사항을 다시 보는 것은 변화를 가져왔다. 나는 'DownloadNet'이라는 도구를 만들었는데, 방문한 모든 페이지를 오프라인으로 보관하고 완전히 색인화한다. 북마크한 페이지만 보관하도록 설정하는 것도 가능하다. 이 도구는 오픈 소스이므로 확인해보길 바란다: DownloadNet GitHub 링크
          + 저장된 영상에서 텍스트를 복사하는 것은 놀라운 일이다.
     * 두 번째 댓글 요약:
          + 과거에 나는 TimeSnapper Classic이라는 유틸리티를 사용해 일정 시간마다 스크린샷을 찍었다. 하지만 스크린샷이 디스크를 채우기 시작하고, 대부분의 스크린샷이 거의 동일해 보였다. 이미지 시퀀스에 최적화된 코덱을 만들어야겠다고 생각했고, 결국 GIF/비디오 코덱을 재발명한 것을 깨달았다. 그래서 ImageMagick으로 이미지에 타임스탬프를 넣고 ffmpeg으로 비디오로 변환하는 스크립트를 작성했다. 이로 인해 파일 크기가 99.9% 줄었다.
     * 세 번째 댓글 요약:
          + 오래전에 나는 몇 초마다 스크린샷을 찍어 자동으로 정보를 추출하는 프로젝트를 진행했다. PNG DB를 만들어 PNG 이미지를 여러 블록으로 나누고 각 블록을 데이터베이스에 저장했다. 동일한 블록은 한 번만 저장되며, 해시 테이블을 통해 빠른 검색이 가능했다. 이 PNG DB로 약 400-500%의 압축률을 달성했다. PNG DB GitHub 링크 그러나 스크린샷을 분석하는 스크립트는 결국 크게 성공적이지 못했다. screenshooting GitHub 링크 이 경험은 다른 프로젝트로 이어졌고, 그곳에서는 사용 중인 앱이나 열린 파일 정보를 더 직접적으로 저장했다. timecapture GitHub 링크
     * 네 번째 댓글 요약:
          + 개인 정보와 보안을 중요하게 생각하는 사람으로 보이는데, 폐쇄 소스 웹 브라우저(Arc Browser)를 사용하는 것이 흥미롭다.
     * 다섯 번째 댓글 요약:
          + 진정으로 다중 플랫폼이며 로컬에서 작동하는 이러한 도구를 원한다. 리눅스와 윈도우는 필수이며, 인터넷 없이도 사용할 수 있는 100% 오프라인이어야 한다. 매년 주요 버전당 60달러를 기꺼이 지불할 의향이 있다. 허용적인 오픈 소스 라이선스를 추가하면 평생 고객이 될 것이다. 아마도 다른 사람들도 관심이 있다면 직접 만들어야 할지도 모른다.
     * 여섯 번째 댓글 요약:
          + 'Remember Everything'에 대해: 나는 Chrome과 FireFox에서 본 모든 웹페이지의 복사본을 저장하는 'singleFile' 브라우저 확장 프로그램을 사용한다. 또한, 'AutomaticScreenshotter' 프로그램을 사용해 브라우저 활동이 아닌 다른 화면 활동을 기록한다. 이를 통해 과거 어느 날짜에 PC에서 무엇을 했는지 알 수 있다. 모든 파일은 연도/월/일 디렉토리 구조로 저장된다. 현재는 윈도우 검색을 사용하여 파일을 찾는다. 나는 'ditto'를 사용해 모든 복사 및 붙여넣기를 mysqldb에 저장한다. 이러한 디렉토리 구조는 2010년 이전부터 사용해왔고, 확장 프로그램과 스크린샷은 약 3-4년 전부터 시작했다. 포렌식 PC 조사 도구를 사용하거나 수정하여 PC 활동의 타임라인을 만드는 데 도움이 될지 궁금하다.
     * 일곱 번째 댓글 요약:
          + 이 기술들이 앞으로 5년 혹은 10년 후에 어떻게 사용될지 보는 것은 흥미로울 것이다. 우리는 지금까지 가장 강력한 기억 장치를 가지고 있지만, 그것을 사용하지 않으려고 끊임없이 시도한다는 것이 궁금하다. 더 심각한 측면에서, 이러한 도구들이 창의성을 방해할 수도 있다고 생각한다. 직접 기억하는 것이 아니라 이러한 도구에 의존하는 습관을 형성할 수 있으며, 창의성은 과거의 기억을 미래의 것들과 재결합하는 능력이기 때문이다.
     * 여덟 번째 댓글 요약:
          + OP의 데모는 매우 멋지다. 왜 이것이 애플 실리콘 전용인지 궁금하다. 윈도우보다 뛰어난 ML 지원 때문인가? Olama는 윈도우에서 사용할 수 없다는 것이 안타깝다. 나는 애플 실리콘 노트북이 없고, 애플 인텔과 강력한 윈도우만 가지고 있어서 이것을 테스트할 수 없다. 나는 기본 프로그래머이거나 Swift 프로그래밍 언어 없이 이런 것을 어떻게 처음부터 만드는지 아이디어가 부족하다. 내가 OP라면 Swift 튜토리얼부터 많이 해볼 것이다. 이것을 리눅스나 윈도우에서 작동하도록 Java나 C#으로 클론을 만드는 것은 희망 사항이지만, ML이나 DirectX API, 리눅스 데스크탑 API에 대한 경험이 전혀 없다. 프로젝트를 시작하기 전에 익숙해져야 할 API와 도구가 많다. OP는 Swift 경험이 없는데 어떻게 이것을 만들었는지, 애플 실리콘에서 프로젝트를 만드는 것이 더 쉬운
            것인지 궁금하다. 나는 4년의 경험이 있고 Java와 C#으로 웹 API와 WinForm/DevExpress 작업을 하고 있다.
     * 아홉 번째 댓글 요약:
          + 이것을 사용하여 자신을 책임감 있게 관리하는 방법으로 활용할 수도 있다고 생각한다. 스크린샷을 ""시간 낭비""와 ""생산적인"" 활동으로 쉽게 분류할 수 있는지 궁금하다(아마도 ML 모델을 통해 가능할 것이다). 통계를 게임화하는 것도 옵션이 될 수 있다. 예를 들어, 지난 한 시간 동안 78% 생산적, 12% 해커뉴스, 10% 비활동적이었다는 통계를 볼 수 있다. 자신만의 최고 점수를 달성하려고 할 수도 있다(예: 하루에 3번 100% 생산적인 시간을 가지는 것은 아마도 훌륭한 날이 될 것이다!). 비디오 데모를 좋아한다. 30초 미만으로 이 도구가 무엇을 하는지 이해할 수 있었다. 감사하다! PPS: (매우 부차적인) 비디오 속도 조절기(브라우저 애드온)가 이제 loom 비디오와 함께 작동한다 - 몇 달 전에는 그렇지 않았다.
     * 열 번째 댓글 요약:
          + 이러한 기술의 잠재적인 악몽 시나리오가 있다. 고용주들은 직원들을 완전히 감시하는 데 이런 종류의 도구를 사용하는 것을 좋아할 것이다. AI에 연결하면 모든 사람이 하는 모든 것을 실시간으로 모니터링하고 경고를 받을 수 있다.
"
"https://news.hada.io/topic?id=12544","HN에 물어보세요: 2023년 가장 좋아하는 소프트웨어 블로그 게시물 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN에 물어보세요: 2023년 가장 좋아하는 소프트웨어 블로그 게시물 공유

소프트웨어 엔지니어링 블로그 포스트 추천 요청

     * 소프트웨어 엔지니어링에 관한 뛰어난 블로그 포스트 탐색 중
     * 시스템 스케일링, 창의적인 아키텍처, 최적화, 프로그래밍 언어, 멋진 기능 등에 관심
     * 오픈소스 프로젝트, 회사, 개인이 작성한 기술 인사이트를 제공하는 최고의 블로그 추천 요청
     * 2023년 기술 인사이트를 얻을 수 있는 최고의 블로그에 대한 정보 공유 요청

축제 인사

     * 메리 크리스마스와 행복한 휴일 보내기를 바람

GN⁺의 의견

     * 2023년에 주목할 만한 소프트웨어 엔지니어링 블로그를 찾는 것은 기술의 최신 동향을 파악하고, 새로운 아이디어를 얻으며, 업계에서 중요하게 여기는 주제들을 이해하는 데 도움이 됨.
     * 시스템 스케일링, 아키텍처, 최적화 등은 소프트웨어 개발에서 중요한 요소이며, 이러한 주제에 대한 고품질의 블로그 포스트는 개발자들에게 실질적인 가치를 제공함.
     * 개인적으로도 기술 블로그를 통해 배움을 얻고, 커뮤니티와 지식을 공유하는 것은 지속적인 학습과 성장에 매우 중요하다고 생각함.

        Hacker News 의견

     * Kieran Egan의 'Educated Mind'에 대한 서평
          + 교육과 학교에 대해 많이 생각해보지 않았지만, 이 책 리뷰를 읽고 관심이 생김.
     * Bartosz Ciechanowski의 자전거에 관한 글
          + Bartosz는 여러 훌륭한 블로그 포스트를 작성했으며, 특히 2022년에 발표한 기계식 시계에 관한 글이 유명함.
     * Discovery Trees를 활용한 작업
          + Paige Watson이 FaST Agile에 대해 발표한 것을 보고, 팀에서 고수준의 제품 요구사항을 실행 가능한 작업으로 전환하는 데 Discovery Trees를 성공적으로 활용함.
     * James Kettle의 웹 보안 연구
          + 웹 경쟁 조건의 진정한 잠재력을 파헤치는 연구로, 다른 사람들이 문제의 가능성조차 보지 못하는 곳에서 새로운 취약점 클래스를 발견함.
     * Simonw의 임베딩에 관한 포스트
          + 임베딩에 대한 내용을 다룬 포스트.
     * SciPy의 Windows용 Python 3.12 빌드
          + SciPy가 Windows에서 Python 3.12로 빌드되는 것은 작은 기적으로, 이 과정에서 Flang 컴파일러가 사용됨.
     * TDD에 대한 오해
          + TDD(Test-Driven Development)에 대한 오해를 다룬 글.
     * 기본 원리에 관한 글들
          + 시간 추정, 시스템 이론의 레버리지 포인트, 프로젝트 포트폴리오를 형성하기 위한 켈리 기준 사용, 시스템 관찰 가능성, 진화 등에 대한 글을 많이 썼지만, 인기를 얻지 못함. 가장 인기 있었던 글은 달 착륙 소프트웨어 개발에 대한 Bill Tindall의 접근 방식에 관한 짧은 노트였음.
     * 뉴스레터 구독
          + 올해는 특별히 마음에 드는 글을 찾지 못했지만, 다양한 뉴스레터를 구독하며 시간을 보냄. 업계 통찰력, 홈 오피스 설정 공유, 최신 기술 기사, 리더십, 주간 해커뉴스 요약, 기술과 관련된 제품 및 비즈니스에 대한 깊은 분석을 제공하는 뉴스레터들임.
     * 해커뉴스 사용자들의 주의 부족
          + 이 포스트는 해커뉴스 사용자들이 실제 내용에 얼마나 적게 주의를 기울이는지에 대한 재미있는 예시임. 특정 포스트를 요청하는 명확한 제목에도 불구하고, 대부분의 댓글은 전체 블로그로 연결됨.
"
"https://news.hada.io/topic?id=12511","HTTPS를 통한 SSH 연결를 통한 SSH 연결

SSH를 HTTPS를 통해 전송하기

     * SSH를 HTTPS를 통해 전송하려면 클라이언트와 서버 양쪽을 조정해야 함.
     * 클라이언트 설정 예시에서는 ~/.ssh/config 파일에 ProxyCommand과 ServerAliveInterval을 설정함.
     * 사용하는 ~/.ssh/https-tunnel.bash 스크립트는 CONNECT 메서드를 헤더로 보내면서 socat을 사용해 TLS 연결을 생성함.

서버 설정 예시

     * 아파치2 HTTPS 서버 설정에서는 proxy_connect_module을 로드하고 AllowCONNECT 지시어를 사용해 특정 대상에 대한 CONNECT HTTP 메서드 사용을 허용함.
     * 서버 측에서는 https-server에서 단일 대상인 ssh-server 호스트만을 위해 CONNECT 메서드를 사용할 수 있도록 설정함.

배경

     * 병원에 머무르면서 대부분의 연결 유형이 차단된 병원 Wi-fi를 통해 원격으로 작업을 하고자 함.
     * 병원 네트워크는 HTTP와 HTTPS 연결만 허용하며, SSH는 완전히 차단됨.
     * SSH를 HTTP 또는 HTTPS를 통해 전송하는 방법에 대한 탐색.

가능한 방법들

     * 단일 포트에서 SSH와 HTTPS 프로토콜을 공동 호스팅하고 투명하게 분배하는 sslh 프로젝트.
     * sslh는 프로토콜을 다른 프로토콜에 포함시키지 않고, 다양한 휴리스틱을 사용해 실제 백엔드로 리디렉션함.
     * openssh의 ProxyCommand 지시어를 사용해 SSH 프로토콜을 다른 프로토콜에 완전히 포함시키는 방법.

SSH over HTTP

     * 간단한 SSH over HTTP 시도를 위해 아파치2를 설정해 CONNECT 메서드를 단일 대상 ssh-server:22에 대해 허용함.
     * 클라이언트 측은 socat을 사용해 쉽게 조정됨.
     * ServerAliveInterval을 사용해 HTTP 연결이 유휴 상태에서도 끊기지 않도록 함.

SSH over HTTPS

     * socat은 HTTPS 프록시를 지원하지 않으나 TLS 캡슐화는 지원함.
     * CONNECT 기반 메서드를 수동으로 구현하기 쉬움.
     * ~/.ssh/https-tunnel.bash 스크립트를 사용해 SSH over HTTPS 터널링을 구현함.

마무리

     * HTTPS의 보편적인 존재는 매우 제한적인 중간 장치를 통해 데이터를 전송할 수 있게 해줌.
     * CONNECT 메서드는 TCP 페이로드 스트림을 TLS 호스트 스트림으로 래핑하는 유용한 해킹임.
     * ServerAliveInterval은 유휴 연결에 친화적이지 않은 하위 전송에 대해 연결을 유지하는 데 사용됨.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 제한적인 네트워크 환경에서도 SSH 연결을 가능하게 하는 창의적인 해결책을 제시했다는 점임.
     * SSH와 HTTPS를 결합하는 방법은 네트워크 보안과 관련된 전문 지식을 가진 사람들에게 특히 흥미로울 수 있음.
     * ProxyCommand와 ServerAliveInterval 설정을 통해 네트워크 제한을 우회하는 방법은 네트워크 관리자나 보안 전문가들에게 유용한 정보를 제공함.

        Hacker News 의견

     * 네덜란드의 인터넷 제공업체 XS4ALL은 과거에 SSH 접속을 포트 80을 통해 제공했음. 이 기능은 호텔 와이파이 등에서 다른 포트가 차단되었을 때 유용하게 사용됨.
     * HTTPS의 보편적인 존재는 매우 제한적인 중간 장치를 통해 데이터를 전송할 수 있게 해줌. 이것이 SSL VPN이라 불리는 독점적인 VPN 프로토콜들이 HTTPS를 통해 터널을 시작하는 모드를 구현하는 주된 이유임.
     * SSH를 포트 80이나 443에 두고 다른 호스트를 통해 ProxyJump를 사용하거나, SOCKS를 통해 덜 제한된 인터넷 연결을 얻는 방법도 있음. DNS를 TLS를 통해 SSH 연결로 포워딩하는 것도 가능함.
     * Adaptive라는 회사에서는 HTTP3를 통해 SSH 및 다양한 프로토콜을 제공하는 데이터 보안 인프라를 구축 중임. 이를 통해 사용자는 외부 포트를 통해 데이터베이스, 서버 및 기타 리소스에 연결할 수 있음.
     * 실제로 대부분의 방화벽은 단순히 openssh가 포트 443에서 수신하는 것만으로도 우회할 수 있음.
     * CONNECT 메서드를 전달 프록시가 아닌 역방향 프록시처럼 생각하는 것은 흥미로운 점임. 하지만, CONNECT만으로는 충분하지 않아 웹소켓을 통해 SSH를 사용하여 기업 프록시를 우회함.
     * ""새로운"" 해결책에 대한 게시물의 빈번함이 불편함. 이러한 아이디어들은 새롭지 않으며, 많은 사람들이 이미 알고 있는 내용임.
     * SSH와 유사한 신원 관리 시스템이 브라우저에 내장되어 있으면 좋겠음. hobo라는 공개 키 HTTP 인증 제안에 대해 처음 읽었을 때 흥분했지만, 서버 구현이 없고 클라이언트(브라우저) 구현도 존재하지 않음을 알게 됨.
     * 약 20년 전에 기업 방화벽을 통과하기 위해 corkscrew이라는 도구를 사용했음. 이 도구에 대한 독립적인 구현과 설명이 인상적임.
     * HTTP2를 통한 터널링은 훌륭한 선택임. HTTP2 위에 구축된 RPC 프로토콜인 gRPC가 있음. HTTP2는 TCP 연결을 이용해 여러 데이터 구조를 동시에 전송하고 수신하는 데 탁월함. 그러나 HTTP3를 사용할 필요는 없을 수도 있음, QUIC 자체가 이미 멀티플렉싱을 제공하기 때문임.
"
"https://news.hada.io/topic?id=12575","GPTs를 기반으로 AI가 스스로 스토리생성부터 비디오까지 무인 자동 제작 도전기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GPTs를 기반으로 AI가 스스로 스토리생성부터 비디오까지 무인 자동 제작 도전기

   누구나 스토리텔링을 만드는 것이 매우 중요하지만 어려운 부분이다.
   뭐니뭐니해도 좋은 스토리를 창작하는게 핵심이다.
   챗GPT가 등장하면서 AI를 이용한 스토리 생성에 혁신이 이뤄졌지만 아직도
   갈길은 요원하다고 본다.

   거의 1년 전쯤 챗GPT와 스테이블디퓨전을 이용한 동화책을 만들어,
   카카오 브런치에 게재를 하였던 경험이 있어 이번에는 좀더 멀티모달을
   만들어 보기로 했다.

   목표는 최초 설정 후 ""사람이 배제된 채 99% 이상 AI 스스로 최종 결과물까지
   만들게 하는 무인화가 핵심""으로 잡았다.
   물론, 참신하고 개연성 있는 스토리가 인과관계로 연결되어야 한다는 것은 필수다.

   이에따라 ""아동용 유튜브 콘텐츠""를 실행 목표로 설정했다.
   아동용으로 설정한 이유는,
    1. 스토리 다루기가 상대적으로 쉬울것
    2. 비디오의 품질 대비 기대효과가 클것으로 예상
    3. 아동용 콘텐츠는 처음이라 만들어 보고 싶다는 생각

   [구체적인 실행 방안(아키텍쳐)을 구상하고 직접 빌드하기]
    1. 스토리 생성 로직은 ""일관성을 유지하면서 계속 새로운 에피소드가 추가 되는
       구조로 설계해야 지속성이 생길것""이라고 보았다.
    2. 이에따라 아동용 스토리텔링 전용 GPTs를 만들었다.(현재는 나만 보기로 설정)
       GPTs의 인스트럭션은 약 A4 1페이지 분량으로 아주 세세하게(""전체 컨셉과 맥락을
       유지할 수 있게하는 것이 목적"") 설정하였다.
       인스트럭션에 모든 작성글의 서두와 말미에 지정한 키워드들을 반드시 사용(이 영상을 처음보는 사람이라도 어떤 컨셉과 배경인지를 인식 시키고, 다음편을 기대하게 만들기위한 텍스트적 설정)하게 하였다.
       본문은 자연스러운 시간의 흐름에따라 위기, 갈등, 해결의 축으로 진행함에 있어
       세부적인 예시들을 다수 설정하여 맥락을 유지한채로 새로운 에피소스 생성 역시
       그 룰을 따르게 하였다.
       *""토리의 모험""이란 컨셉을 ""매일 매일 자고나면 얼굴이 변하는 소년""으로 설정한
       이유는 이미지 생성시 시드 유지가 곤란한 특성이 있기에, 아에 단점을 장점으로
       변모 시키려는 의도이며, 매번 새로운 에피소드가 생성되기에 오히려 더 좋다고
       판단하였다.
    3. GPTs에서 생성된 스크립트를 Zapier를 통해 후속 가공 및 멀티모달 생성을 위해
       Actions를 api로 연결하였다.

   *GPTs Actions 설정 상세 방법은 본인이 작성한 카카오 브런치 링크를 참조
   https://brunch.co.kr/@seawolf/9
    4. GPTs에 연결하면, GPTs는 나에게 ""새로운 에피소드의 주제 키워드""를 묻게 하였다. 단지 사람이 결정할 일은 그것뿐이다. 물론 이것도 랜덤하게 할 수 있지만 말이다.
       '주제 키워드' 도출방법은 인스트럭션에 설정한 바대로 다음 절차를 따른다.

    1. 검색 포털을 통해 '아동'들이 선호(검색 키워드의 유입량 등으로 판단)하는 최신
       '키워드'(막상 해보니 게임, 놀이 등이 역시나 압도적이다.)를 추출해 제시하게 하였다.
    2. 제시받은 키워드중 마음에 드는것을 선택하면
    3. 인스트럭션에 지정된 로직대로 단박에 한페이지 분량의 새로운 스토리를 개연성
       있게 출력한다.
    4. 대부분 마음에 드는 참신한 내용이지만, 프롬프트로 약간의 부분 변경이나 삭제를 요청할 수 있다.
    5. 최종 확정된 텍스트는 Actions를 통해 ""내 이메일이나 api로 전송"" 하라는 명령을 하면 즉시 전송되어지고 트리거가 발생한다.

    5. 이제 GPTs로부터 호출되고 전송값(텍스트)을 넘겨받은 Zapier에서는 내가 설정
       해 놓은 순서대로 API가 호출되며 데이터 가공, 융합 및 생성 등이 이루어진다.
    6. 최종 비디오 생성까지 멀티모달 구성 요소(API 및 여러 서비스 플랫폼 활용)

    1. 최적화된 텍스트 스크립트
    2. 텍스트 TO 음성 생성
    3. 스크립트 말뭉치들(통상 1문장에서 3문장까지를 하나의 덩어리로 규정)의
       문맥과 키워드가 자동추출되어 이미지 생성
    4. 음악, 음향, 이모티콘 등 부가 악세사리들도 문맥에 맞게 자동 배치
    5. 생성된 음성을 자막으로 출력
    6. 최종 비디오 렌더링
    7. 선택 사항으로 ""다국어 언어 변환""

    6. 완성본 다운로드로 완료
    7. 유튜브 콘텐츠로 등록

   소요시간을 측정해 보니(점점 빨라진다.),
    1. GPTs를 통해 새로운 스토리 생성 전 과정: 1분 미만
    2. Actions 호출을 통한 백엔드 api들이 후속 처리: 1~2분 남짓
    3. 최종 완성된 멀티모달 비디오 자동 생성까지 약 3분
    4. 이 부분에서 사람이 확인하여 수정할 부분에 대해 약간의 리터칭을
       해주면 퀄리티는 매우 상승함(단순 리터칭 한다고 하면 3분 남짓)
    5. 최종 렌더링: 3~5분(비디오 사이즈에 따라 다름)
       즉, 10분이면 꽤 괜찮은 수준의 3D 모델링 배경의 탄탄하고 재밌는
       아동용 비디오 한편이 만들어 지는 것이다.
       비용이래봤자 OPENAI를 포함한 몇가지 유료 API들 이용료와 호스팅 비용
       다 합쳐도 3분 이내 영상 하나 만드는데 원가측면에서 분당 1천원 미만일것이다.

   [완성된 결과물 보기 링크]
   ""토리의 모험"" 에피소드 1: K-POP 스타 변신(한국어)
   https://www.youtube.com/watch?v=m4U-pQPXQc8&t=15s

   ""토리의 모험"" 에피소드 1: K-POP 스타 변신(영어 버젼)
   https://www.youtube.com/watch?v=CT3KHU7BvIs

   ""토리의 모험"" 에피소드 2: 슈퍼히어로 변신(한국어)
   https://www.youtube.com/watch?v=U4n_W22zWaY&t=7s

   ""토리의 모험"" 에피소드 3: 산타클로스 변신(한국어/ 3D모델링 버전)
   https://www.youtube.com/watch?v=wl2RWAqOXtY

   공정의 90% 이상은 무인 자동화를 달성했다고 본다.
   이 실험을 통해 여러 응용 분야를 발견하고 정보를
   공유하는 차원에서 글을 올립니다.

   더 많은 정보를 원하신다면 커뮤니티에 참여하세요.
   [ 커뮤니티(카카오톡 오픈채팅) 참여 링크 ]
   https://open.kakao.com/o/gE6hK9Vf

   많은 분들께 조금이나마 도움이 되었으면 합니다.
"
"https://news.hada.io/topic?id=12492","V8이 더 빠르고 안전해 졌습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           V8이 더 빠르고 안전해 졌습니다

     * 2023년 V8 엔진의 인상적인 개선 성과 요약
     * 새로운 중간 단계 컴파일러 도입과 상위 단계 컴파일러, 런타임, 가비지 컬렉터의 개선을 통해 전반적인 속도 향상
     * 자바스크립트와 WebAssembly에 대한 새로운 기능 추가 및 WebAssembly 가비지 컬렉션(WasmGC)으로 웹에 효율적으로 가비지 컬렉션 프로그래밍 언어를 가져옴
     * 안전성 향상을 위해 샌드박싱 인프라 개선 및 V8에 제어 흐름 무결성(CFI) 도입

Maglev: 새로운 중간 단계 최적화 컴파일러

     * 새로운 최적화 컴파일러 Maglev 도입, Sparkplug과 TurboFan 사이에서 작동
     * Maglev는 Sparkplug보다 약 20배 느리게 코드를 생성하지만, TurboFan보다는 10~100배 빠르게 코드를 생성
     * JetStream에서 8.2%, Speedometer에서 6%의 성능 향상 관찰
     * Maglev의 빠른 컴파일 속도와 TurboFan에 대한 의존도 감소로 인한 에너지 절감 효과

Turboshaft: 상위 단계 최적화 컴파일러의 새로운 구조

     * 상위 단계 최적화 컴파일러 TurboFan의 새로운 내부 구조 Turboshaft 도입
     * 새로운 최적화 추가와 더 빠른 컴파일 가능
     * Chrome 120부터 CPU-agnostic 백엔드 단계 모두 Turboshaft 사용, 이전보다 약 두 배 빠른 컴파일

더 빠른 HTML 파서

     * HTML 파싱에 소요되는 시간 감소를 위해 Blink에 더 빠른 HTML 파서 추가
     * Speedometer 점수에서 3.4% 증가
     * WebKit 프로젝트가 이 변경 사항을 즉시 통합

더 빠른 DOM 할당

     * DOM 측면에서의 투자와 최적화
     * Oilpan 할당자에 페이지 풀 추가로 커널과의 왕복 비용 감소
     * 압축 및 비압축 포인터 지원과 Blink에서 고빈도 필드의 압축 방지
     * 자주 할당되는 클래스의 oilpanization으로 할당 작업 3배 가속화 및 DOM 중심 벤치마크 성능 향상

새로운 자바스크립트 기능

     * 새로 표준화된 자바스크립트 기능 배포.
     * resizable ArrayBuffers, ArrayBuffer transfer, String isWellFormed 및 toWellFormed, RegExp v 플래그, JSON.parse with source, Array grouping, Promise.withResolvers, Array.fromAsync 등 추가
     * Iterator 도우미 기능은 웹 호환성 문제로 인해 일시적으로 철회 후 재배포 예정
     * ES6+ 자바스크립트 코드의 성능 향상을 위한 일부 불필요한 임시 죽은 지역 검사 생략

WebAssembly 업데이트

     * Wasm에 대한 새로운 기능과 성능 향상
     * 멀티 메모리, 꼬리 호출, 완화된 SIMD 지원으로 성능 향상
     * 메모리64 구현 완료 및 제안이 4단계에 도달하면 배포 예정
     * 예외 처리 제안의 최신 업데이트 반영 및 이전 형식 지원
     * JSPI 투자로 웹에서 더 큰 클래스의 애플리케이션 활성화

WebAssembly 가비지 컬렉션

     * WasmGC 배포로 V8의 기존 가비지 컬렉터에 의해 관리되는 객체와 배열 할당 가능
     * Java, Kotlin, Dart 등의 가비지 컬렉션 언어로 작성된 애플리케이션을 Wasm으로 컴파일할 때 자바스크립트로 컴파일하는 것보다 약 두 배 빠른 실행

보안

     * 샌드박싱, 퍼징, CFI가 올해의 주요 보안 주제
     * 샌드박싱 인프라 구축, 퍼징 인프라 투자 및 언어 커버리지 개선
     * CFI 아키텍처 기반 마련 및 다양한 플랫폼에서 구현 가능
     * the_hole 주변 인기 있는 익스플로잇 기술 완화 및 V8CTF 형태의 새로운 익스플로잇 현상금 프로그램 시작

결론

     * 작은 성능 향상 프로젝트들의 결합된 영향으로 상당한 성과
     * 2023년 V8의 성능 향상을 보여주는 벤치마크 점수는 JetStream에서 14%, Speedometer에서 34% 성장
     * V8은 이제 더 빠르고 안전하며, 빠르고 격렬한 웹으로의 여정은 이제 시작임
     * V8 팀은 모두에게 빠르고 안전하며 멋진 웹 탐색 경험을 기원
"
"https://news.hada.io/topic?id=12586","2023년 최고의 블로그 게시글을 공유해주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2023년 최고의 블로그 게시글을 공유해주세요

   HN에 올라온 질문과 답변들 정리
     * Bicycle by Bartosz Ciechanowski
     * How Instagram scaled to 14 million users with only 3 engineers - 긱뉴스 요약글 인스타그램이 오직 3명의 엔지니어로 1400만 사용자를 확보한 방법
     * GPU Computing Explained - 긱뉴스 요약글 모든 개발자가 알아야 할 GPU 컴퓨팅에 대한 정보
     * Meta’s new Serverless platform - 긱뉴스 요약글 XFaaS: 매일 수조(Trillion)건 호출을 처리하는 Meta의 서버리스 플랫폼
     * Embeddings: What they are and why they matter - 긱뉴스 요약글 임베딩(Embeddings)은 무엇이고 왜 중요한가
     * Building and operating S3
     * Where LLMs are headed
     * SwiftUI at Airbnb
     * Smashing the state machine: the true potential of web race conditions
     * Working With Discovery Trees
     * The Big TDD Misunderstanding
     * The 'eu' in eucatastrophe – Why SciPy builds for Python 3.12 on Windows are a minor miracle
     * A slightly longer Lean 4 proof tour
     * Ask yourself dumb questions – and answer them!
     * My favorite C compiler flags during development
     * Real-time Messaging by Slack
     * Migrating Netflix to GraphQL Safely
"
"https://news.hada.io/topic?id=12520","Huh - 터미널용 인터랙티브 폼/프롬프트 작성용 Go 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Huh - 터미널용 인터랙티브 폼/프롬프트 작성용 Go 라이브러리

     * 스탠드얼론 또는 Bubble Tea 어플리케이션에 연동 가능
     * 스크린리더용 접근성 모드 지원
     * 싱글라인/멀티라인 입력, 셀렉트/멀티셀렉트, Yes/No 선택창등을 쉽게 구현
     * 스탠드얼론 스피너 패키지 포함
     * 테마 지원: 기본 테마 5종 및 커스텀 테마 가능

   Bubble Tea - 강력한 TUI 프레임워크
"
"https://news.hada.io/topic?id=12537","Notesnook - E2E 암호화 지원하는 에버노트 대체용 노트 작성 도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Notesnook - E2E 암호화 지원하는 에버노트 대체용 노트 작성 도구 오픈소스

     * Zero Knowloedge: 기기의 모든 내용을 XChaCha20-Poly1305 & Argon2 로 암호화
     * JavaScript/TypeScript + React(웹) + React Native(모바일) + Electron(데스크탑)
     * Monorepo: 웹/데스크탑/모바일/에디터/모든 코드 포함
     * 동기화 서버의 코드는 공개되어 있지만 아직 셀프호스팅은 불가능(작업중)

   오... 셀프 호스팅까지 된다면 이게 제가 찾던 노트 앱이 될 수 있겠네요.
"
"https://news.hada.io/topic?id=12601","2023년에 잘 알려지지 않았던 66가지 긍정적인 뉴스 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2023년에 잘 알려지지 않았던 66가지 긍정적인 뉴스 이야기

     * 뉴스는 세계에서 일어나는 일을 전달하려고 하지만, 실제로는 주로 잘못된 일들을 보여줌
     * 상업적 압박, 인지적 편향, 문화적 습관으로 인해 뉴스 기관들은 인류의 최악의 모습만을 집중적으로 다루는 '파국의 기계'가 되어버림
     * 저널리즘은 권력에 진실을 말해야 하고, 끔찍한 일이 발생할 때 외면해서는 안 되지만, 파국의 이야기만 듣게 되면 가능성의 이야기를 보지 못하는 문제가 발생
     * 미국의 저널리스트 크리스타 티펫은 재난과 기능 장애의 언어에 이미 충분히 익숙해졌다고 말하며, '생산적인 서사'가 더 많이 필요하다고 주장
     * 올해, 2,000개 이상의 이러한 이야기를 발견하여 매주 이메일을 통해 수만 명의 독자와 공유
     * 이 이야기들은 단순한 일상적인 사건이 아니라, 수백만 명의 삶의 개선, 인권 승리, 질병 퇴치, 배출량 감소, 지구의 광대한 지역 보호, 전체 종의 구조 등 세계를 변화시키는 진정한 내용을 담고 있음
     * 가장 좋아하는 이야기를 모아 최종적으로 66개의 목록을 작성
     * 이 중 많은 이야기들이 당신을 놀라게 할 것이며, 몇몇은 세계에 대한 당신의 생각을 바꿀 수도 있음
     * 올해는 어려운 한 해였지만, 여러 방면에서 많은 진전을 이루었음

질병 퇴치에서의 기록적인 성과

     * 이집트는 세계 최초로 C형 간염을 퇴치함.
     * 몰디브는 세계 최초로 나병을 퇴치함.
     * 방글라데시는 흑열병과 코끼리다리병을 퇴치함.
     * 니제르는 아프리카 최초로 강맹아리병을 퇴치함.
     * 베닌, 말리, 이라크는 트라코마를 퇴치함.
     * 동티모르, 부탄, 북한은 풍진을 퇴치함.
     * 가나는 수면병을, 아제르바이잔, 타지키스탄, 벨리즈는 말라리아를 퇴치함.

암과의 싸움에서의 진전

     * 유럽에서 2023년 암 사망률이 2018년 대비 남성은 6.5%, 여성은 3.7% 감소함.
     * 미국은 지난 30년 동안 암 사망률이 1/3 감소했다고 보고함.
     * 호주는 40세 미만에서 피부암 감소를 보고함.
     * 대장암, 피부암, 방광암, 자궁경부암 치료법에서 중요한 돌파구가 있음.
     * 화이자는 저소득 국가의 12억 인구에게 특허받은 암 치료제를 원가에 제공하기로 함.

아프리카에 도착한 말라리아 백신

     * 말라리아 백신은 글로벌 보건의 성배임.
     * 70년 이상 시도해온 말라리아 백신이 이제 두 종류로 출시됨.
     * 첫 번째 백신 Mosquirix는 아프리카 9개국에 도착함(심각한 말라리아를 22% 감소, 모든 원인으로 인한 사망률 13% 감소).
     * 10월, WHO는 두 번째, 더 저렴한 버전인 R21/Matrix-M을 승인함.

비만 치료 방식의 새로운 변화

     * 비만은 공중 보건 위기임.
     * 미국에서는 약 70%의 성인이 체중 초과에 영향을 받음.
     * 올해, 새로운 치료법 클래스, 특히 Ozempic과 Wegovy가 중요한 체중 감소뿐만 아니라 심부전 증상과 심장 마비 및 뇌졸중 위험 감소를 보여줌.

모성 및 아동 건강에서의 밝은 전망

     * 인도, 케냐, 르완다, 우간다, 모잠비크, 에티오피아, 라이베리아, 가나, 말라위, 탄자니아, 시에라리온 및 전체 동남아시아 지역에서 모성 및 아동 사망률이 크게 감소함.
     * WHO는 전 세계적으로 지난 10년 동안 독점적 모유 수유가 38%에서 48%로 증가했다고 보고함.
     * UNICEF는 이제 전 세계 10명 중 8명의 아이가 건강 시설에서 훈련받은 전문가에 의해 태어남을 보고함.

에이즈와의 전쟁에서의 승리

     * 20년 전, 에이즈는 매년 200만 명을 죽이며 무차별적으로 보였음.
     * 유엔은 2022년 에이즈로 인한 사망이 63만 명으로 감소했으며, 새로운 감염은 130만 건, 어린이 감염은 1980년대 이후 최저라고 발표함.

흡연 감소에 대한 미평가 진전

     * 전 세계적으로 56억 명이 흡연 감소를 돕는 최소 한 가지 정책에 의해 보호받음.
     * 최근 15년간 시행된 조치가 없었다면, 세계에는 3억 명이 더 많은 흡연자가 있을 것임.

어린이 예방 접종의 정상화

     * 우즈베키스탄, 필리핀, 말라위, 카메룬, 마다가스카르, 차드, 가나, 니제르, 브라질, 중앙아프리카공화국, 기니, 소말리아, 남수단, 콩고민주공화국에서 기록적인 예방 접종 드라이브가 진행됨.
     * WHO는 2022년 접종을 받지 못한 어린이 수가 1,430만 명으로 감소, 팬데믹 이전 수준에 거의 근접했다고 보고함.

소아마비와 기니 벌레 퇴치에 가까워짐

     * 소아마비는 이제 파키스탄의 7개 지구와 아프가니스탄의 2개 주에만 국한됨.
     * 세계 지도자들은 2026년까지 완전한 퇴치를 목표로 '마지막 마일' 노력에 5,900만 달러를 약속함.

결핵과의 싸움에서의 회복

     * 결핵은 세계에서 가장 치명적인 전염병임.
     * 올해, 한 세계적인 제약 회사는 생명을 구하는 결핵약의 제네릭 버전을 44개 저소득 국가에 공급할 것이라고 발표함.
     * WHO는 2022년 결핵 사망자 수가 2021년 대비 10만 명 이상 감소했다고 발표함.

새로운 의약품에서의 돌파구

     * 알츠하이머 치료를 위한 두 가지 강력한 신약, 도나네맙과 레카네맙이 등장함.
     * 세계 3대 인슐린 제조사가 가격을 낮추면서 인슐린 가격 인하를 위한 수십 년간의 캠페인이 큰 승리를 거둠.
     * 새로운 수막염 백신이 매년 약 25만 명을 죽이는 병에 대한 희망을 높임.
     * 호주는 심리 치료제로서의 환각제를 세계 최초로 승인함.

자궁경부암에서의 전환점

     * 세계 최대 백신 제조사인 인도의 세럼 연구소가 올해 HPV 백신의 새롭고 저렴한 버전을 발표함.
     * 지난 3년 동안 30개국이 HPV 백신을 도입함으로써 WHO의 2030년까지 95% 커버리지 목표 달성이 가능해짐.
     * 전 세계 소녀들의 HPV 백신 커버리지가 21%로 증가하여 팬데믹 이전 수준을 처음으로 넘어섬.

CRISPR 유전자 편집의 성숙

     * 2023년을 되돌아볼 때, 미래 세대는 이를 올해의 가장 큰 보건 이슈로 결정할 수도 있음.
     * 발견 11년 만에, CRISPR은 영국, 바레인, 미국에서 지중해 빈혈과 겸상 적혈구병 치료를 위해 승인받음.

청정 에너지 분야에서의 최고의 해

     * 풍력과 태양광의 엄청난 수요로 인해 에너지 연구가들은 이전의 모든 예측을 폐기함.
     * 국제에너지기구(IEA)는 올해 전 세계 화석 연료 사용량이 정점에 도달할 수 있다고 발표함.
     * 중국과 미국을 포함한 120개국 이상이 재생 에너지 증대와 에너지 효율성 2배 증가를 목표로 함.

태양광 설치가 기후 미래를 변화시킴

     * 올해 인류는 놀랍게도 413GW의 태양광을 설치함.
     * 이는 태양광 발전이 역사상 가장 빠르게 성장하는 에너지 기술임을 의미함.
     * IEA는 태양광 발전 설비가 2050년까지 탄소 중립을 달성하기 위한 궤도를 앞서고 있다고 발표함.

중국의 탄소 배출 감소 예상

     * 중국은 세계 최대의 탄소 배출국으로, 올해 탄소 배출 감소가 예상됨.
     * 2023년에는 태양광과 풍력의 전례 없는 건설로 이루어짐.
     * 이는 인류 역사상 단일 연도 에너지 배치 중 가장 큰 것임.

미국에서의 녹색 제조 붐

     * 인플레이션 감축법은 차세대 에너지 경제에서의 리더십을 위한 정부의 가장 큰 약속임.
     * 이 법률은 미국에서 2차 세계대전 이후 가장 큰 제조 드라이브를 가져옴.
     * 조지아, 미시간, 텍사스, 테네시, 켄터키가 이 분야를 선도함.

유럽의 탈탄소화 시간 단축

     * 2023년 유럽에서 석탄 발전이 급격히 감소함.
     * 이로 인해 화석 연료의 전기 생산 비율이 사상 최저인 17%로 떨어짐.
     * 유럽은 러시아 화석 연료에 대한 의존을 끊어내고 있음.

많은 국가에서의 청정 에너지 혁명 가속화

     * 호주에서는 옥상 태양광이 석탄을 추월해 전력 생산의 가장 큰 원천이 됨.
     * 필리핀에서는 해상 풍력이 급성장함.
     * 남아프리카 공화국의 옥상 태양광 부문은 세계에서 가장 빠르게 성장함.
     * 브라질, 영국, 베트남 등 여러 국가에서 청정 에너지 발전이 빠르게 진행됨.

전기 자동차 감소세 없음

     * 올해 글로벌 전기차 판매는 36% 증가하여 총 4,100만 대에 이르렀음.
     * 이는 전기차 판매가 넷 제로 시나리오를 앞서고 있음을 나타냄.
     * 미국에서는 올해 전기차 판매가 50% 증가했으며, 중국에서는 더욱 폭발적인 성장을 보임.

배터리 기술의 큰 진전

     * 세계 최대 배터리 제조사 CATL이 테슬라 배터리의 두 배 밀도를 가진 새로운 배터리를 발표함.
     * 도요타는 1,000km 이상의 주행 가능 범위를 가진 고체 상태 배터리를 개발했다고 주장함.
     * 스웨덴의 Northvolt가 리튬보다 저렴하고 풍부한 나트륨 배터리에서 돌파구를 발표함.

전환을 위한 원자재 발견

     * 수년간의 우려 끝에 미국에서 대규모 리튬 매장지와 노르웨이에서 인산염 매장지가 발견됨.
     * 새로운 광산과 가공 공장으로 인해 리튬과 코발트 가격이 급락함.
     * 세계는 청정 에너지 전환을 위한 충분한 재료를 보유하고 있음이 밝혀짐.

지열 에너지의 돌파구

     * 지열이 청정 에너지 혁명에서 암말의 다크호스로 경쟁력을 갖추고 있음이 밝혀짐.
     * 네바다에서 탄소 없는 전기를 생산하는 차세대 지열 발전소가 가동됨.

미국과 유럽의 전력 전송에 대한 진지한 접근

     * 미국 정부는 전국적인 전력망에 대한 새로운 연결 규제를 승인하고, 고전압 전력선 구축을 시작함.
     * 유럽위원회도 유럽의 전력망에 대한 투자 확대 계획을 수립함.

BYD, 세계 최대 전기차 제조사로 부상

     * 중국의 자동차 제조업체 BYD가 글로벌 자동차 산업에 도전장을 던짐.
     * BYD는 2023년 11월까지 200,000대의 차량을 생산함.

유럽과 미국의 메탄에 대한 진지한 대응

     * 메탄은 기후 변화의 두 번째 가장 큰 원인으로, EU는 탄소가 포함된 수입품에 대한 대륙 전역의 세금을 도입함.
     * 미국은 COP28 직전 세계에서 가장 엄격한 메탄 오염 제한을 시행함.

석탄, 가스, 석유에 대한 금융의 이탈

     * OECD 국가의 3/4 이상의 석탄 발전소가 2030년까지 폐쇄될 예정임.
     * 다양한 금융 기관들이 화석 연료 자금 조달을 중단하거나 감축하는 방침을 세움.

해운 및 철강 산업의 전망 개선

     * 지난해 청정 연료를 사용할 수 있는 새로운 선박 주문이 기록적으로 증가함.
     * 세계 최대 해운 회사인 Maersk가 그린 메탄올로 구동되는 첫 번째 컨테이너 선박을 공개함.
     * 철강 탈탄소화를 위한 대규모 투자가 스웨덴, 미국, 일본에서 발표됨.

글로벌 빈곤 감소가 다시 정상 궤도에

     * 세계은행은 대부분의 저소득 및 중간 소득 국가들이 2023년에 빈곤 감소를 경험할 것이라고 발표함.
     * 인도와 인도네시아는 수백만 명을 빈곤에서 벗어나게 함.
     * 방글라데시, 캄보디아, 멕시코, 우간다, 토고 등 여러 국가에서 빈곤 감소 성과를 보고함.

자살률 감소

     * 지난 30년 동안 전 세계 자살률은 1/3 이상 감소함.
     * 인도와 중국에서 자살률이 각각 1/3, 1/2 이상 감소함.
     * 스리랑카와 방글라데시에서는 위험한 농약 금지로 인해 자살률이 크게 감소함.

여학생 교육 참여 증가

     * UNICEF 보고에 따르면, 오늘날 학교에 다니는 여학생 수가 2015년 대비 5천만 명 증가함.
     * 이 기간 동안, 여학생의 초등학교 졸업률은 86%에서 89%로, 고등학교는 54%에서 61%로 증가함.
     * 매년 모든 교육 단계를 완료하는 여학생 수가 7년 전에 비해 500만 명 더 늘어남.

학교 급식을 통한 어린이 영양 개선

     * 세계식량계획(WFP)에 따르면, 학교 급식 혜택을 받는 어린이 수가 전 세계적으로 4억 1,800만 명에 달하며, 이는 팬데믹 이전인 2020년 초보다 3천만 명 증가한 수치임.
     * 이는 지난 2년 동안 부유한 국가와 가난한 국가 모두에서 학교 급식 프로그램에 대한 국내 자금 지원을 대폭 늘린 덕분임.

미국의 범죄율 급감

     * 2023년 초반 데이터에 따르면, 미국의 살인율이 거의 13% 감소하여 역대 가장 큰 연간 감소 중 하나임.
     * 모든 주요 범죄 유형 중 자동차 절도를 제외하고 감소함. 폭력 범죄는 50년 이상 최저 수준으로, 재산 범죄는 1960년대 이래 최저 수준으로 떨어짐.
     * 또한, 국가의 교도소 인구는 2009년 정점 대비 25% 감소함. 뉴저지와 뉴욕을 포함한 대다수 주에서 교도소 인구를 그 이상으로 줄임.

국제 세금 시스템의 공정성 증가

     * 2015년에는 글로벌 GDP의 9%에 해당하는 금액이 탈세처로 이동했으나, 은행 정보의 자동 교환 덕분에 현재 이 비율은 약 3%로 감소함.
     * 11월에는 유엔 총회가 더 공정하고 포괄적인 국제 세금 정책 시스템을 개발하기 위한 결의안에 찬성하여, 글로벌 세금 규칙 설정 방식에 극적인 변화가 예상됨.

물, 위생 및 위생 개선 진전

     * WHO는 식수, 위생 및 위생에 대한 접근에 관한 새로운 데이터를 발표함.
     * 2000년부터 2022년 사이에 21억 명이 안전한 식수에 접근할 수 있게 되었고, 25억 명이 안전하게 관리되는 위생 시설에 접근함.

여성 보호를 위한 법률 제정

     * 우즈베키스탄은 여성에 대한 성별 기반 폭력에 대한 법적 보호 강화 법률을 통과시킴.
     * 네덜란드와 스위스는 동의 기반 강간 정의를 도입하는 법률을 개정함.
     * 시에라리온은 여성 권리를 발전시키는 획기적인 입법을 통과시킴.

생리 및 생식권리의 진전

     * 멕시코 대법원은 전국적으로 낙태를 비범죄화함.
     * 프랑스는 헌법에 ""어떤 여성도 임신 종료 권리를 박탈당해서는 안 된다""는 문구를 추가함.
     * 아르헨티나는 비상 피임약 구입에 처방전이 필요하지 않도록 요구 사항을 제거함.

미국에서 생식권리 활동가들의 대응

     * 위스콘신, 미네소타, 네브래스카, 버지니아, 오하이오는 생식권리를 보호함.
     * FDA는 카운터 사용을 위한 첫 구두 피임약을 승인하고, 심각한 산후 우울증을 치료하기 위한 첫 구두 약물을 승인함.

어린이 시절 기회의 증가

     * 인도는 15년 동안 18세 이전에 결혼한 여자아이들의 비율이 46%에서 23%로 감소했다고 보고함.
     * 필리핀은 아동 결혼 금지에 대한 작년의 획기적인 금지령에 이어 5년 동안 청소년 임신이 8.6%에서 5.4%로 감소했다고 보고함.

교육 분야의 밝은 면

     * 파키스탄 펀자브에서는 지난 20년 동안 1300만 명의 여자아이가 교육에 접근할 수 있게 됨.
     * 네팔은 지난 5년 동안 학교 밖 아동 수가 6.7% 감소했다고 보고함.
     * 에티오피아에서는 유아 교육 접근이 5.3%에서 44%로 증가함.

LGBTQ 권리에 대한 좋은 소식

     * 에스토니아는 동성 결혼을 합법화한 35번째 국가가 됨.
     * 태국 내각은 동성 결혼을 허용하는 민법 개정안을 승인함.
     * 페루 고등법원은 동성 결혼을 법적으로 등록하라고 명령함.

많은 국가에서 법적으로 관용 증진

     * 모리셔스와 쿡 제도는 동성애를 비범죄화함.
     * 스리랑카 정부는 동일한 법안을 지지함.
     * 일본은 LGBTQ 시민에 대한 이해를 증진하기 위한 법률을 통과시킴.

전기 접근 증가

     * 올해 전기가 없는 사람의 수가 7억 4500만 명으로 감소할 것으로 예상됨.
     * 사하라 사막 이남 아프리카에서는 최근 남부 및 동부 아프리카에서 수천만 명이 최근 전기에 접근함으로써 전기가 없는 사람의 수가 안정될 것으로 예상됨.

미국의 경제 기적

     * 2022년에 경제학자들은 미국이 1년 내에 경기 침체에 빠질 것이라고 100% 확신함.
     * 이는 발생하지 않았으며, GDP 성장은 모든 선진 경제국 중 가장 빠름.

아동 성장 지연 감소

     * 인도네시아, 페루, 세네갈, 태국, 케냐, 우간다, 브라질, 캄보디아, 가나는 모두 여러 해 동안 지속적인 감소를 보고함.
     * UNICEF는 2000년 이후 성장 지연이 3분의 1 감소했으며, 이는 6000만 명의 영양실조 아동이 감소한 것을 의미한다고 말함.

기타 인권 승리

     * 말레이시아와 가나는 사형을 금지함.
     * 멕시코는 노인과 장애인이 스스로 결정할 수 있도록 하는 국가 민사 및 가족 절차 코드를 구현함.

대부분의 지역이 예전보다 더 안전해짐

     * 세계은행은 최근 글로벌 살인율 데이터를 발표함.
     * 지난 20년 동안 전 세계 살인율은 17% 감소함.

역사적인 해양 보호 조치

     * 올해 3월 193개국은 세계 해양을 보호하기 위한 획기적인 협약에 도달함.
     * UN 고해양 조약은 1982년 이후 해양 보호에 관한 첫 국제 협약으로, 지구 표면의 절반에 대한 공동 관리를 제공함.

강과 호수 복원의 또 다른 위대한 해

     * 파키스탄의 울라르 호수 복원으로 수천 마리의 철새가 되돌아옴.
     * 인도의 칠리카 호수는 20년의 작업 끝에 회복됨.
     * 네덜란드에서는 유럽 최대의 담수호 중 하나를 복원하는 프로젝트가 시작됨.

원주민 보존을 위한 큰 축하

     * 브라질은 여덟 개의 원주민 영토를 인정함.
     * 콜롬비아는 세 영토를 확장함.
     * 에쿠아도르는 야수니 국립공원에서의 석유 시추 중단에 투표함.
     * 일본에서는 아이누 민족이 역사적 어업권을 되찾음.
     * 에티오피아의 타마 야생동물 보호구역은 원주민 공동체에 소유권을 부여받음.
     * 2015년 이후 원주민 공동체가 법적으로 소유하거나 관리하는 땅이 이집트 크기만큼 증가함.

자연을 위한 빚 탕감 활성화

     * 에쿠아도르는 해양 보호를 위한 16억 달러 규모의 자연 대 빚 탕감 거래를 발표함.
     * 가봉은 해양 생태계 보호 강화를 통해 국가 부채 4억 5천만 달러를 탕감함.

도시의 녹색 전환

     * 상파울루는 연간 150만 그루의 묘목을 생산하여 소외 지역에 식재함.
     * 뉴욕은 할렘 강변을 습지로 변모시킴.
     * 메델린의 녹색 복도 프로그램은 도시 온도를 2°C 낮춤.
     * 리스본, 밀라노, 스톡홀름은 도심 내 차량 통행 금지를 발표함.
     * 런던은 저배출 구역을 도시 전체로 확장함.
     * 파리는 전철로 사용되던 지역을 반야생 오아시스로 변모시킴.
     * 마드리드는 6차선 고속도로를 강변 공원으로 전환함.
     * 싱가포르는 폐철로를 녹색 복도로 변모시킴.
     * 샌프란시스코는 48개의 순환 수자원 시스템을 운영 중임.

유럽의 환경 보호를 위한 새로운 법률 제정

     * 유럽 규제 당국은 벌을 죽이는 농약 사용에 대한 예외를 종료함.
     * 산림 파괴 제품의 수입을 중단하는 새로운 규정을 시행함.
     * EU는 30년 만에 최초의 주요 생물다양성 보호 법률인 자연 복원 법률을 통과시킴.
     * EU는 대규모 환경 훼손을 '생태학적 살인'에 비견할 수 있는 범죄로 규정함.

미국의 주목할만한 환경 보호 조치

     * 텍사스는 주립공원을 위한 10억 달러 기금을 지원함.
     * 뉴욕은 벌을 죽이는 농약 사용을 금지하는 최초의 주가 됨.
     * 캘리포니아는 4가지 식품 첨가제 사용을 금지함.
     * 연방정부는 북극 국립야생동물보호구역에서 모든

   시추를 금지함.
     * 15억 달러 규모의 도시 식수 프로그램을 시작함.
     * 40,000명 이상이 참여한 신규 기후 코어 프로그램을 출범함.

해양 보호를 위한 획기적인 해

     * 파나마, 칠레, 파푸아뉴기니, 도미니카, 콩고, 케냐, 뉴칼레도니아, 아일랜드, 영국, 호주 등의 해안에서 100만 제곱킬로미터 이상의 해양 보호구역이 설정됨.
     * 20억 달러 이상의 자금이 해양 보호에 투입됨.
     * 칠레, 프랑스, 코스타리카가 이끄는 국가 연합이 심해 채굴 금지 논의를 시도함.

동물권리를 위한 중대한 승리

     * 미국은 신약 테스트에 동물 사용 요구를 철회함.
     * 캐나다는 화학 독성 검사 단계적 중단을 발표함.
     * 부탄은 전체 유기견 인구를 완전히 중성화하고 백신 접종함.
     * 뉴질랜드는 살아있는 동물 수출을 금지함.
     * 웨일스는 덫과 접착 함정 사용을 금지함.
     * 리투아니아는 유럽에서 14번째로 모피 농장을 금지한 국가가 됨.

섬 복원의 가능성

     * 보호구역 확장과 다양한 복원 프로젝트가 성공적으로 수행됨.
     * 뉴질랜드의 머큐리 섬은 육식 동물 없는 상태로 유지됨.
     * 갈라파고스의 플로리아나 섬은 ""역사상 가장 위대한 보존 개입 중 하나""로 시작됨.

새로운 보호 지역 지정

     * 중국은 전체 티베트 고원을 보호 지역으로 지정함.
     * 멕시코는 13개의 새로운 보호 구역을 발표함.
     * 미국은 알래스카의 통가스 국립숲 보호를 재개하고 네바다 남부와 애리조나 북부에 새로운 국립 기념물을 만듦.

나무 심기와 삼림 복원 노력 지속

     * 인도네시아는 약 50만 에이커의 야자유 농장을 복원할 계획을 발표함.
     * 케냐는 첫 국가 나무 심기 휴일을 기념함.
     * 말라위는 2015년 이후 약 170만 헥타르를 복원함.

해양 플라스틱 쓰레기의 감소

     * 네덜란드 연구자들은 해양 플라스틱 쓰레기가 320만 톤에 불과하다고 발표함.
     * 일본 과학자들은 플라스틱을 분해하는 박테리아를 발견함.

북미 원주민의 대승리

     * 캘리포니아에서는 세계 최대의 댐 철거 프로젝트가 시작됨.
     * 메인주의 페노보스코트 국가에게 12,500헥타르가 복원됨.
     * 미네소타의 원주민들은 300만 에이커에 대한 관리 권한을 얻음.
     * 브리티시컬럼비아에서는 10억 달러 규모의 '자연 협정'이 체결되어 원주민과 협력하여 보전 관행을 변혁함.
     * 몬태나, 사우스다코타, 앨버타에서는 들소 복원 작업이 시작됨.
     * Ḵwiḵwa̱sut'inux̱w Ha̱xwa’mis 국가는 밴쿠버 섬 북쪽에 새로운 40,000헥타르 보호 지역을 지정함.

맹그로브 숲의 밝은 전망

     * 전 세계적으로 맹그로브 숲이 위기에 처해 있지만, 모든 곳이 그런 것은 아님.
     * 중국에서는 지난 20년간 맹그로브 면적이 증가함.
     * 인도네시아는 2024년까지 60만 헥타르를 복원하는 프로그램을 운영 중임.
     * 오만은 블루 카본 프로젝트의 일환으로 350만 개 이상의 맹그로브 씨앗을 심음.
     * 아부다비는 2천만 개의 씨앗을 심고 맹그로브 면적을 6,400헥타르 증가시킴.
     * 파키스탄과 멕시코의 바하 캘리포니아 수르에서는 대규모 맹그로브 복원 프로젝트가 진행 중임.

역대 최대의 물 보존 약속

     * 3월, UN 물 회의에 참석한 10,000명이 수십억 달러를 약속하고 700개 이상의 약속을 통해 물 안전한 미래를 보장하기 위한 노력을 함.
     * 가장 큰 약속은 신선한 물 도전으로, 세계 수로 300,000킬로미터와 습지 3억 5천만 헥타르(인도보다 큰 면적)를 2030년까지 복원하는 것을 목표로 함.

100개국 이상의 플라스틱 금지

     * 올해 뉴질랜드는 느슨한 과일과 채소에 대한 플라스틱 봉지 금지를 세계 최초로 시행함.
     * 잉글랜드는 플라스틱 식기, 풍선 막대, 스티로폼 컵 금지를 시행함.
     * 자메이카는 3년 된 플라스틱 금지 조치가 플라스틱 빨대와 봉투, 스티로폼 상자 및 컵을 대부분 없앰.
     * 미국은 공공 땅에서 일회용 플라스틱을 단계적으로 없애겠다고 발표함.
     * UAE는 2024년 1월부터 일회용 플라스틱 쇼핑백 금지를 시행할 예정임.

회복 중인 멸종 위기 종

     * 아프리카 사자, 아프리카 코끼리, 미국 악어, 아메리칸 비슨, 아시아 사자, 대서양 퍼핀, 아조레스 참새, 대머리 독수리, 발리 꾀꼬리, 검은 코뿔소, 검은발 족제비, 검은맥 나비, 흰긴수염고래, 보르네오 오랑우탄, 중국 철갑상어, 다윈 파리잡이새, 동태평양 녹색 바다거북, 동방 줄무늬 주머니쥐, 유라시아 갈색 곰, 유라시아 비버, 유라시아 늑대 등 다양한 종이 회복 중임.

   인류가 발전하고 있다고 느껴지는 뉴스네요. +_+

   좋은 뉴스 감사합니다.

   감사합니다

   감사합니다 :)

   :)
"
"https://news.hada.io/topic?id=12510","뉴욕 주지사, '논컴피트 조항 금지' 거부하고 'LLC 투명성 법안' 약화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               뉴욕 주지사, '논컴피트 조항 금지' 거부하고 'LLC 투명성 법안' 약화

뉴욕 주지사, 비경쟁 조항 금지 거부 및 LLC 투명성 법안 약화

     * 뉴욕 주지사 캐시 호츨이 비경쟁 조항 금지에 대한 거부권을 행사함.
     * LLC(유한책임회사) 투명성 법안을 약화시키는 수정을 단행함.
     * 이러한 결정은 뉴욕 주의 법적 환경에 영향을 미칠 것으로 예상됨.

GN⁺의 의견

     * 비경쟁 조항 금지 거부는 뉴욕 주의 고용 계약 관행에 중요한 영향을 미칠 수 있음.
     * LLC 투명성 법안의 약화는 기업의 운영 방식과 관련된 법적 요구사항에 변화를 가져올 것임.
     * 이러한 법적 결정들은 뉴욕 주의 비즈니스 환경과 노동 시장에 지속적인 영향을 끼칠 것으로 보임, 특히 기업과 직원 간의 계약 조건 및 기업의 법적 책임에 대한 이해에 중요함.

        Hacker News 의견

     * 비경쟁 조항의 필요성을 이해하지만, 슬로베니아에서는 회사가 비경쟁 조항에 서명하게 하려면 기간과 금전적 보상을 명시해야 함. 법적 용어는 다소 모호하지만, 이런 절충안이 흥미롭고 조금만 조정하면 더 나아질 수 있음.

     슬로베니아의 비경쟁 조항 관련 절충안에 대한 설명으로, 회사가 비경쟁 조항을 요구할 경우, 그 기간과 금전적 보상을 명시해야 한다는 내용.
     * 캘리포니아는 1872년부터 비경쟁 조항을 금지하고 있으며, 이로 인해 혁신이 죽거나 비즈니스가 파괴되지 않음.

     캘리포니아에서 비경쟁 조항이 금지된 사실과 그로 인한 부정적인 영향이 없었다는 의견.
     * LLC(유한책임회사)의 소유주 공개에 대한 투명성 문제를 지적하며, 특히 실제 회사가 아닌 '특수 목적 차량' LLC의 경우 더욱 문제가 됨.

     LLC의 소유주 정보 공개의 중요성과 특수 목적 차량 LLC에 대한 비판.
     * 주지사가 입법자들이 승인한 법안의 절반을 거부하는 것은 법률 제정 과정에 큰 문제가 있다는 신호로 보임.

     주지사에 의한 법안 거부 비율이 높은 것에 대한 우려 표명.
     * 비경쟁 조항은 고용주에게만 의무를 부여하고, 고용인에게는 그렇지 않음. 비경쟁 조항을 시행하려면 최소한 고용주가 그 시점까지 지속적으로 최소 임금을 지불해야 함.

     비경쟁 조항의 불공정성과 고용주의 의무에 대한 제안.
     * 비경쟁 조항에 대한 타협안 제시: 소득 한도 설정, 지적재산권이나 독점적 지식과 연계, 고용 계약과 연계해야 함.

     비경쟁 조항에 대한 합리적인 타협안에 대한 제안.
     * 뉴욕과 캘리포니아의 비즈니스 환경 차이를 지적하며, 뉴욕의 금융 중심 기업들이 비경쟁 조항을 유지하려는 이유를 설명함.

     뉴욕의 금융 기업들이 비경쟁 조항을 선호하는 이유에 대한 분석.
     * 비경쟁 조항이 왜 필요한지에 대한 의문 제기, 이는 오직 사업주에게만 이익을 주는 것으로 보임.

     비경쟁 조항의 필요성에 대한 의문.
     * 비경쟁 조항에 대한 반대 의견으로, 고객 유치 금지, 기밀 유지, 지적재산권 할당 등 다른 계약이 이미 존재하기 때문에 비경쟁 조항이 필요 없다는 주장.

     기존의 다른 법적 계약들로 인해 비경쟁 조항이 불필요하다는 주장.
"
"https://news.hada.io/topic?id=12541","Meta가 Threads의 인프라를 구축한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Meta가 Threads의 인프라를 구축한 방법

     * 2023년 7월에 런칭한 Threads는 첫 5일간 1억명 가입
     * 소규모의 민첩한 엔지니어 팀이 단 5개월의 기술 작업을 통해 Thread를 구축
     * 많은 사람이 가입하는 과정에서 경험한 무리 없는 확장은 10년 이상의 인프라 및 제품 개발 노력의 결과임
     * Threads를 위해 특별히 구축된 인프라가 아니라, 메타의 수많은 제품을 위해 이미 구축된 인프라를 활용함
     * 실제로는 엄청난 수의 인프라가 사용되지만, 가장 중요한 분산 키밸류 스토어 ZippyDB와 비동기 서버리스 함수 플랫폼 Async를 소개

ZippyDB: Threads를 위한 Keyspace 확장

     * ZippyDB는 메타의 인프라를 활용하여 처음부터 구축된 분산 키/밸류 데이터베이스로, 엔지니어들이 이를 기반으로 구축할 수 있는 완전 관리형 서비스
     * ZippyDB에 호스팅된 키스페이스는 상대적으로 쉽게 확장 및 축소가 가능하며, 다수의 데이터 센터에 유연하게 배치될 수 있음.
     * 소셜 그래프 저장소로는 MySQL 기반의 TAO(The Associations and Objects)가 사용됨
     * ZippyDB는 MySQL에 대응하는 키/밸류 데이터베이스로, 카운터, 피드 순위/상태, 검색 등에 사용

  ZippyDB 최적화 및 제품 출시

     * ZippyDB의 리샤딩 프로토콜을 통해 클라이언트에 영향을 주지 않고 완전한 일관성과 정확성을 유지하면서 ZippyDB 사용 사례의 샤딩 요소를 신속하게 증가시킬 수 있음
     * 새로운 물리적 샤드 세트를 프로비저닝하고 클라이언트에 새로운 논리적-물리적 샤드 매핑을 라이브 구성 변경을 통해 설치함으로써, 다운타임 없이 리샤딩을 수행
     * 리샤딩 작업을 수평적으로 확장 가능하게 설계하여, Threads 출시와 같은 필요 시 리샤딩 속도를 높일 수 있음
     * 갑작스러운 사용 사례 성장을 쉽게 처리할 수 있는 일련의 비상 운영자 도구를 개발함

  Async: Threads를 위한 워크로드 실행 확장

     * Async(또는 XFaaS)는 서버리스 함수 플랫폼으로, 엔지니어가 솔루션 개념부터 생산 배포까지의 시간을 단축할 수 있게 해줌
     * Async는 현재 하루에 수조 개의 함수 호출을 처리하며, HackLang, Python, Haskell, Erlang 등 다양한 프로그래밍 언어를 지원
     * 배포, 큐잉, 스케줄링, 확장, 재해 복구 및 준비의 세부 사항을 추상화하여 개발자가 핵심 비즈니스 로직에 집중할 수 있게 함
     * Async는 사용자 경험을 방해하지 않고 몇 초에서 몇 시간 후에 수행할 수 있는 작업에 주로 사용됨
     * Threads에서 사용자가 Instagram에서 이미 팔로우하는 사람들을 Threads에서도 팔로우할 수 있게 함으로써 커뮤니티 구축을 빠르게 지원하는 데 중요한 역할을 함
     * 5일 동안 1억 명의 사용자를 처리하기 위해 상당한 처리 능력이 필요했으며, Async는 증가된 부하를 우아하게 흡수하고 제어된 실행을 위해 큐잉함

인프라와 문화의 만남

     * 단 5개월의 기술 작업 기간 내에 Threads의 신속한 개발은 메타의 인프라와 엔지니어링 문화의 강점을 잘 보여줌
     * 메타의 제품은 오랜 시간 테스트를 견뎌욘 공유 인프라를 활용하여 제품 팀이 빠르게 움직이고 성공적인 제품을 신속하게 확장할 수 있게 함
     * 이 인프라는 자동화 수준이 높아, 단기간에 용량을 확보하는 노력을 제외하고는 작업 부하의 자동 재분배, 로드 밸런싱 및 확장이 원활하고 투명하게 이루어짐
     * 메타는 빠르게 움직이는 엔지니어링 문화를 추구하며, 엔지니어들은 강한 소유권을 가지고 협력하여 대규모 공동 목표를 효율적으로 달성함

   짱머시따

   인지용~

   대한민국 IT에서 Async는 죄악입니다.
"
"https://news.hada.io/topic?id=12528","Ruby 3.3 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Ruby 3.3 릴리스

     * 새로운 Prism 파서 추가 : 재귀 하향 파서로 프로덕션에서 사용 가능. Ripper를 대체
     * 파서 생성기를 Bison에서 Lrama로 교체 : Error-Tolerant로 사용성이 좋고, 유지보수가 쉬우며, 다른 도구에서 사용 가능한 Universal 파서
     * YJIT 성능 개선 : 속도 개선 및 메모리를 적게 사용
     * 순수 Ruby JIT 컴파일러인 RJIT를 도입하고 MJIT를 대체 : x86-64만 지원하지만, MJIT와 달리 런타임에 C컴파일러 필요없음. 아직은 실험용도이며 프로덕션에서는 YJIT를 사용해야함
     * M:N 스레드 스케줄러 추가 : M개의 Ruby 스레드를 N개의 네이티브 스레드(OS 스레드)로 관리하므로 스레드의 생성, 관리 비용이 절감

   RUBY_GC_HEAP_INIT_SLOTS도 RUBY_GC_HEAP_INIT_SIZE_%d_SLOTS으로 대체되는군요. GC 튜닝했던 곳들은 바꾸어야겠네요

   https://bugs.ruby-lang.org/issues/19785

   매년 12/25일에 출시하는 전통에 따라 올해도 3.3이 나왔습니다.
"
"https://news.hada.io/topic?id=12486","낸드에서 테트리스까지 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           낸드에서 테트리스까지 (2017)

Nand to Tetris 웹사이트 소개

     * Nand to Tetris 과정과 관련 서적인 The Elements of Computing Systems의 공식 웹사이트임.
     * 웹사이트에는 일반 목적의 컴퓨터 시스템과 현대 소프트웨어 계층을 처음부터 구축하기 위한 강의, 프로젝트 자료, 도구들이 포함되어 있음.
     * 자료들은 학생, 강사, 자가 학습자를 대상으로 하며, 비영리 교육 환경에서 사용한다면 모든 것이 무료이고 오픈 소스임.

온라인 강좌 및 사용자

     * 두 개의 온라인 강좌를 지원: Nand2Tetris Part I (하드웨어 프로젝트/1-6장), Nand2Tetris Part II (소프트웨어 프로젝트/7-12장).
     * 이 과정들은 전 세계 400개 이상의 대학, 고등학교, 부트캠프에서 가르쳐지고 있으며, 고등학생부터 박사과정 학생, 구글 엔지니어에 이르기까지 다양한 학습자들이 수강함.

추가 자료 및 연락처

     * 강사들은 추가 코스 자료를 위해 schocken@gmail.com으로 연락할 수 있음.

GN⁺의 의견

     * 혁신적인 학습 방식: Nand to Tetris 과정은 컴퓨터 시스템과 소프트웨어를 기본 원리부터 직접 만들어보는 실습 중심의 학습 방식을 제공함으로써, 이론과 실제를 결합한 교육의 중요성을 강조함.
     * 폭넓은 접근성: 다양한 배경을 가진 학습자들이 무료로 접근할 수 있고, 오픈 소스 자료를 활용할 수 있다는 점은 교육의 접근성을 높이고, 지식 공유의 가치를 실현함.
     * 실용적인 커리큘럼: 실제 엔지니어링 문제를 해결하면서 컴퓨터 과학의 근본적인 개념을 배울 수 있는 커리큘럼은 학생들에게 실용적인 기술과 문제 해결 능력을 함양시키는데 매우 유익함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 대학 졸업 후 7년 전에 처음 시도했으나, 다른 부수적인 프로젝트로 인해 중단함.
          + 3개월 전에 다시 시작하여 현재 8장까지 진행 중이며, 논리 게이트, ALU, CPU, 어셈블러, 가상 머신의 절반을 완성함.
          + 각 장이 도전적이지만, 작동할 때의 만족감이 큼.
          + 교육적 목적의 부수적인 프로젝트로서 매우 보람차고 많은 것을 배움.
     * 두 번째 댓글 요약:
          + 컴퓨터와 관련된 일을 하지만 저수준 컴퓨터 과학 수업을 듣지 않은 사람에게 강력히 추천함.
          + 컴퓨터가 어떻게 작동하는지에 대한 직관적 이해를 제공하며, 스택과 힙의 차이를 이해하는 데 큰 통찰을 줌.
          + 간단한 회로에서 시작하여 점차 복잡한 기계를 구축하는 과정이 매우 재미있음.
          + 강사들이 어셈블리 언어 등을 너무 단순화하지 않으면서 빠르게 이해할 수 있도록 잘 설명함.
     * 세 번째 댓글 요약:
          + Ben Eater의 8비트 컴퓨터 시리즈를 마친 후 nand2tetris 프로젝트를 시작함으로써 컴퓨터 설계의 기본 개념을 잘 이해함.
     * 네 번째 댓글 요약:
          + ETH Zürich의 디지털 디자인 및 컴퓨터 아키텍처 강의를 추천함.
     * 다섯 번째 댓글 요약:
          + nand2tetris 과정에서 영감을 받은 Nand 게임을 소개함.
     * 여섯 번째 댓글 요약:
          + 논리 게이트를 NAND로만 구성할 수 있다는 아이디어를 여자친구와 커피숍에서 논의하고, 실제로 시도해보며 재미를 느낌.
          + 책을 구매하여 저수준에 대한 이해를 도움받음.
     * 일곱 번째 댓글 요약:
          + George Hotz가 만든 저장소를 소개함.
     * 여덟 번째 댓글 요약:
          + ""sand2nand""라는 전작이 DIY 프로젝트로 가능할지 궁금해함.
     * 아홉 번째 댓글 요약:
          + 데이터 분석가로 일하다가 이 과정을 듣고 커리어를 변경하기로 결심함.
     * 열 번째 댓글 요약:
          + 계산 가능성 이론에 대한 비슷한 자료가 있었으면 좋겠음.
          + 이론 컴퓨터 과학 교수들은 논리 회로보다 추상적인 기계에 대해 더 많이 언급함.
          + 논리 게이트가 실제 컴퓨터 작동 방식과 더 밀접하게 연관되어 있음에도 불구하고, 이를 계산 모델로 무시하는 이유에 대한 의문을 제기함.
          + ""NAND에서 튜링 머신까지""라는 주제로 이론 컴퓨터 과학에 대한 코스나 책이 있었으면 함.
"
"https://news.hada.io/topic?id=12562","Emu2 - Gemini와 비슷한 오픈소스 37B 멀티모달 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Emu2 - Gemini와 비슷한 오픈소스 37B 멀티모달 모델

     * 베이징 인공지능 아카데미(BAAI)에서 개발한 최신 생성형 멀티모달 모델
     * 최소한의 예제와 간단한 지침으로 다양한 양식의 작업을 처리하도록 설계
     * Few-Shot 멀티모달 이해 작업에서 Flamingo-80B 같은 대규모 모델보다 우수한 성능을 냄
     * 개발자를 위한 다용도 기본 모델로, 멀티모달 앱 제작을 위한 유연한 플랫폼을 제공

   HN의 소개글 참고 : https://news.ycombinator.com/item?id=38730143
"
"https://news.hada.io/topic?id=12591","프로그래머를 위한 이상적인 모니터 회전 설정 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    프로그래머를 위한 이상적인 모니터 회전 설정 (2021)

시작은 이 툿(toot)에서부터였다

     * Aurynn의 툿에서 시작된 실험: 한 화면을 세로 모드로 두는 것이 필요한가?
     * 세로 디스플레이 사용의 경험: 텍스트를 많이 표시할 수 있는 장점이 있음.

지루하지만

     * 소프트웨어 개발에 최적화된 디스플레이인지 평가.
     * 0° 회전: 대부분의 애플리케이션과 비디오 콘텐츠에 적합하지만, 웹사이트와 문서에는 여백이 많이 생김.
     * 90° 회전: 텍스트 문서에 적합하지만, 영화 시청에는 부적합하고 시야각 문제가 있음.

조금 이상하지만 괜찮아

     * xrandr 도구를 사용하여 원하는 각도로 화면 회전 가능.
     * macOS에서는 작동하지 않았지만, 리눅스 데스크탑에서는 문제 없음.
     * 1° 회전: 책상이 약간 기울어져 있을 때 유용하지만, 글꼴 렌더링에 이상이 있음.
     * 45° 회전: 세로와 가로의 중간 지점이지만, 정사각형이 아닌 화면 비율에는 잘 맞지 않음.

완벽한 회전

     * 22° 회전: 소프트웨어 개발에 가장 적합한 모니터 방향으로 생각됨.
     * 가장 긴 라인 길이를 제공하며, 80열 제한에 대한 걱정이 없어짐.

이것을 어떻게 하나요?

     * xorg에서만 작동하며, wayland는 아직 지원하지 않음.
     * xrandr --output HDMI-3 --transform ... 명령어를 사용하여 화면 위치를 조정하고 회전시킴.
     * 회전과 이동을 위한 기본 문법: cos(x), -sin(x), shift_left, sin(x), cos(x), shift_up, 0, 0, 1
     * 예시 명령어들 제공.

계산기

     * 자바스크립트 계산기를 사용하여 주어진 입력값에 대한 xrandr 명령어 생성.
     * 각도, X 이동, Y 이동 입력 후 결과로 xrandr 명령어 출력.

   GN⁺의 의견
     * 이 글은 소프트웨어 개발자들에게 흥미로울 수 있는 모니터 회전에 대한 실험적 접근을 보여줌.
     * 특히 리눅스 사용자들에게 xrandr 도구의 유연성을 활용한 화면 회전 기능은 새로운 작업 환경을 제공할 수 있음.
     * 22° 회전이 소프트웨어 개발에 최적화된 방향이라는 주장은 개발자 커뮤니티 내에서 흥미로운 토론 주제가 될 수 있음.

        Hacker News 의견

     * 모니터 회전에 대한 다양한 의견
          + 초광폭 모니터를 가지고 있다면, 화면을 회전시켜 지속적인 시각 효과를 내는 원형 디스플레이를 만들어보는 것은 어떨까? 이는 GPU가 끊임없이 화면을 다시 그려야 하는 열을 분산시키는 팬 역할도 할 수 있음.
               o 초광폭 모니터를 가진 사용자는 화면을 회전시켜 원형 디스플레이와 같은 효과를 내며, GPU의 열을 분산시키는 방법을 시도해볼 수 있음.
          + 이 기사는 유머러스하게 제시되었지만, 실제로 일부 항공 교통 관제 시스템은 대각선으로 회전된 화면을 사용하며, 이는 공항으로 향하는 주요 접근 경로와 일치함. 내가 본 설정에는 스타일러스 입력이 가능한 큰 화면이 포함되어 있었음.
               o 항공 교통 관제 시스템 중 일부는 실제로 대각선으로 회전된 화면을 사용하여 주요 접근 경로를 따라 긴 선을 맞추는 방식을 채택함.
          + 관련된 생각: 초광폭보다는 큰 4K 모니터를 선택하라는 조언. 더 많은 픽셀을 더 저렴한 가격에 얻을 수 있음.
               o 초광폭 모니터보다는 큰 4K 모니터를 선택하는 것이 더 많은 픽셀을 저렴한 가격에 제공함.
          + 이상적인 것은 모니터가 약 54.74도의 '마법의 각도'에서 회전하여 이방성 상호작용의 영향을 없애는 것임.
               o 모니터가 특정 각도에서 회전하여 특정 물리적 상호작용을 최소화하는 것이 이상적임.
          + 최대 선 길이를 위한 실제 '이상적' 회전은 22도보다는 23도에 가까움, 왜냐하면 Atan(9/21) = 23.20도이기 때문임.
               o 화면의 최대 선 길이를 위한 이상적인 회전 각도는 23도에 더 가까움.
          + 90도 회전이 내 Go 코드에 가장 적합함. 이렇게 하면 훨씬 더 많은 ""if err != nil"" 블록을 맞출 수 있음.
               o 90도로 회전된 모니터가 특정 프로그래밍 코드를 더 많이 표시하는 데 적합함.
          + 3:2 비율의 디스플레이가 더 많았으면 좋겠다는 바람. 인간의 중앙 시야 비율이 3:2에 가까우나, 경제적인 이유로 16:9가 더 저렴하고 흔함.
               o 3:2 비율의 디스플레이가 인간의 시야에 더 적합하지만, 16:9 비율이 경제적인 이유로 더 일반적임.
          + 48인치 모니터를 주 모니터로 구매함. 회전에 대한 걱정 없이 거대한 화면을 사용함.
               o 큰 모니터를 사용하면 회전에 대한 걱정 없이 효율적인 화면 활용이 가능함.
          + 43인치 4K 모니터(또는 TV)를 지난 4년간 사용해옴. 이중 모니터의 물리적 제한 없이 충분한 화면 공간을 제공함.
               o 큰 단일 모니터가 이중 모니터의 물리적 제약을 해결하며 충분한 작업 공간을 제공함.
          + 아직 언급되지 않은 설정이지만, 나는 두 개의 디스플레이를 사용함; 왼쪽에는 LG SDQHD 28인치 8:9 2560x2880, 오른쪽에는 LG 49인치 21:9 5120x2160 초광폭 커브드 모니터를 '경첩'처럼 약간의 각도로 연결함.
               o 두 개의 다른 비율과 해상도를 가진 모니터를 사용하여 효율적인 작업 환경을 구성함.
"
"https://news.hada.io/topic?id=12584","서버 없이 SharedWorker를 활용하여 윈도우 간 상태 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  서버 없이 SharedWorker를 활용하여 윈도우 간 상태 공유

     * 소개
          + 서버 없이 SharedWorker를 사용하여서 윈도우 간 상태 공유를 함.
          + 브라우저 API를 통해서 윈도우 간 상태를 공유할 수 있다는 것에 의의를 가질 수 있음.
     * 원리
          + 각 윈도우를 식별함
          + 온라인 된 모든 윈도우 상태를 추적함
          + 윈도우의 상태가 변경되면 다시 그리도록 다른 창에 알려줌.
     * 추가 의견
          + 현재 글에는 포함되어 있지 않지만, Broadcast Channel API 를 사용하면 더 효율적으로 윈도우 간 상태 공유 가능(https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)

   Inter-process communication

   이거와 꽤나 유사하군요

   앗 windows가 아니고 window 였네요 ㅋㅋㅋ

   신기한 기능이군요

   ㅋㅋㅋㅋㅋㅋ 맞습니다! browser window 입니다
"
"https://news.hada.io/topic?id=12522","LibreChat - 향상된 ChatGPT 클론 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LibreChat - 향상된 ChatGPT 클론

     * ChatGPT 와 비슷한 UI 제공. 스트리밍 지원
     * OpenAI, GPT-4 Vision, Bing, Anthropic, OpenRouter, PaLM 2 등의 AI 모델 스위칭 가능
     * 커스텀 프리셋 생성/저장/공유
     * 대화 분기를 포함한 대화 수정/재전송/계속하기 등 지원
     * 메시지/대화 검색 기능
     * DALL-E 3를 이용한 이미지 생성, 웹 접근등 플러그인 이용 가능
     * 도커-컴포즈로 윈/맥/리눅스에 설치

   몇시간동안 세팅 시도해 봤는데 Connection error만 나고 API 연결되는게 없네요. 아직 불안정한가봅니다.

   OpenAI기준
   docker-compose 파일에서 UID/GID 부분 삭제, .env파일에 엔드포인트, api키, 시크릿키, iv 등 넣으니까 작동하네요
"
"https://news.hada.io/topic?id=12614","파케, 아이스버그 및 데이터 레이크하우스 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       파케, 아이스버그 및 데이터 레이크하우스 이해

이해하기: Parquet, Iceberg 그리고 BroadIn의 데이터 레이크하우스

     * 데이터 저장 방식(파일 및 메모리 내)
          + 데이터 액세스 및 저장을 위한 다양한 파일 형식 존재
          + 일부 시스템은 폐쇄적인 데이터 형식을 주로 사용하지만, 대부분의 시스템은 오픈 데이터 형식을 지원
          + 주요 오픈 소스 파일 형식에는 Apache Avro, Parquet, ORC, Arrow, Feather, Protobuf 등이 있음
          + 이러한 형식들은 데이터를 실제 이진 레이아웃에 어떻게 배열할지에 대한 사양을 제공
          + Parquet는 압축을 잘 지원하고, Avro는 특정 행 블록을 읽는 데 적합
          + 스키마 진화와 파일 분할을 지원하여 병렬 처리에 필수적임
          + 다양한 프로그래밍 언어와 도구에서 이러한 형식으로 작업 가능
     * 대규모 데이터 관리 - Iceberg와 Delta Lake
          + 다양한 테이블을 저장하고 개별 스키마를 진화시키며, 효율적으로 데이터를 파티셔닝하고 외부 도구가 스키마를 쉽게 읽을 수 있도록 하는 방법 필요
          + Hive, Iceberg, Delta Lake는 모두 스키마 레지스트리 또는 메타스토어를 지원
          + Iceberg와 Delta Lake는 Parquet을 개별 파일 형식으로 사용
          + Iceberg와 Delta Lake는 쿼리 또는 스토리지 엔진이 아니라 쿼리 엔진이 작업을 수행할 수 있도록 하는 오픈 사양
          + 파티셔닝 진화, 스키마 진화, 데이터 압축, ACID 트랜잭션, 효율적인 쿼리 최적화, 시간 여행 등의 기능을 가능하게 함
     * 데이터 레이크와 데이터 레이크하우스는 무엇인가?
          + 데이터 레이크는 회사들이 OCR, Parquet 또는 CSV 파일과 같은 원시 형식으로 대량의 데이터를 저장하는 곳
          + 데이터 레이크하우스는 데이터 레이크 위에 SQL 쿼리 실행, 배치 작업 설정, 데이터 거버넌스 구성 등을 가능하게 하는 기능의 결합
          + 데이터 레이크하우스는 개방형 데이터 웨어하우스의 버전으로 볼 수 있음
          + Snowflake와 BigQuery와 같은 데이터 웨어하우스가 Iceberg와 같은 오픈 데이터 형식을 지원함에 따라 데이터 웨어하우스와 데이터 레이크하우스 간의 경계가 모호해지고 있음

GN⁺의 의견

     * Iceberg와 Delta Lake는 대규모 데이터 세트를 관리하기 위한 메타데이터 레이어로서 중요한 역할을 함. 이들은 데이터의 효율적인 관리와 쿼리 최적화를 가능하게 하여 데이터 과학자와 엔지니어에게 유용함.
     * 데이터 레이크하우스는 데이터 레이크와 데이터 웨어하우스의 장점을 결합하여, 데이터 관리와 분석을 위한 새로운 패러다임을 제시함. 이는 데이터 기반 의사결정을 더욱 강화할 수 있는 기회를 제공함.
     * Iceberg의 지원이 증가함에 따라, 데이터 관리 및 분석 시스템은 점차 표준화되고 상호 운용 가능해질 것으로 예상됨. 이는 데이터 플랫폼의 선택과 사용에 있어서 더 많은 유연성과 효율성을 가져올 것임.

   아이스버그와 델타레이크 비교 하고 있었는데 이렇게 정리 깔끔하게 됐군요.
   제가 보고있던 견해와 의견이 거의 비슷합니다.
   온라인에서 실행된 벤치마크는 Spark 를 사용한것이고 벤치마크는 참고할만 하지만, 큰 의미는 없다고 Tabular 의 Head DevRel 이 글을 썼습니다.
   오픈소스로서 선택하려면 iceberg 가 유일해 보입니다
   요약은 좋으나 참고한 링크도 있다면 좋겠습니다

        Hacker News 의견

     * Apache Iceberg과 Delta Lake은 종종 오픈 테이블 포맷으로 언급되지만, 실제로는 차이가 있음.
          + Apache Iceberg 테이블 포맷 사양은 데이터베이스 시스템에 익숙한 사람이라면 Iceberg 테이블을 구축하고 질의하는 데 큰 어려움이 없을 정도로 명확함.
          + 반면, Delta Lake 사양은 현재 사양을 완전히 구현하거나 지속적으로 업데이트하는 데 필요한 노력을 파악하기 어려움.
          + Delta Lake 사양은 Databricks가 Hadoop에 실망한 Fortune 1000 기업을 대상으로 레이크하우스를 구축하기 위해 내부적으로 결정한 구현 방식을 역설계한 것처럼 보임.
          + Delta Lake가 진정으로 개방된 생태계로서의 가치가 있는지에 대한 확신이 서지 않음.
     * 데이터베이스 세계에서는 Delta, Iceberg, Hudi가 S3 같은 스토리지에 오픈 소스 포맷으로 데이터를 저장하는 것이 큰 변화를 의미함.
          + 이는 스토리지와 처리의 많은 부분이 표준화되어 데이터베이스 간의 이동이 용이해지고, 대부분의 도구들이 트랜잭션적으로 안정적인 방식으로 동일한 파일 세트와 작업할 수 있게 됨.
          + 예를 들어, Snowflake가 파일에 쓰는 동안 데이터 과학자가 Jupyter 노트북에서 실시간으로 데이터를 질의하고, ClickHouse가 동일한 데이터에 대해 사용자 중심의 분석을 제공할 수 있음.
          + 비즈니스가 Snowflake에서 Databricks로 전환하기로 결정하더라도 큰 문제가 되지 않음.
          + 현재 S3에서 이러한 포맷을 질의하는 속도는 네이티브 수집만큼 빠르지는 않지만, 시장의 압력으로 모든 데이터베이스 벤더가 성능을 최적화하게 될 것임.
          + 오픈 소스와 개방성에 대한 큰 승리이며, 비즈니스가 데이터를 개방적이고 이동 가능한 포맷으로 가질 수 있게 됨.
          + 레이크하우스도 비슷한 영향을 미침. 많은 회사들이 데이터 레이크와 데이터 웨어하우스를 가지고 있으며, 두 시스템 간에 데이터를 복사해야 함. 동일한 데이터 세트를 질의하고 하나의 시스템만 관리하는 것은 마찬가지로 중요함.
     * Parquet 파일을 S3에서 수년간 작업해왔지만, Iceberg가 무엇인지 정확히 이해하지 못했음. 하지만 해당 기사가 Iceberg를 잘 설명함.
          + Iceberg는 기본 데이터 세트에 대한 데이터베이스 메타데이터 포맷으로, 스키마, 파티셔닝 등을 설명함.
          + 전통적인 DBMS에서는 스키마, 질의 엔진, 스토리지 포맷이 하나의 패키지로 제공됨.
          + 하지만 빅데이터에서는 데이터베이스 구성 요소를 처음부터 구축하고, 혼합 및 매치할 수 있음. Iceberg를 메타데이터 포맷으로, DuckDB를 질의 엔진으로, Parquet를 스토리지 포맷으로, S3를 스토리지 매체로 사용할 수 있음.
     * Apache Arrow 데이터프레임을 디스크에 파일로 저장하는 최선의 방법은 Feather를 사용하는 것이지만, Apache Parquet 포맷으로 변환하는 것도 가능함.
          + 자신만의 비-JVM 레이크하우스를 구축하려면 Iceberg를 메타데이터로, Parquet를 데이터로 사용하고, Arrow 테이블을 사용하여 DuckDB로 질의하며, Arrow->Pandas 또는 Polars를 통해 데이터를 처리할 수 있음.
          + Feather를 혼합하면 현재 Python 레이크하우스 스택이 작동하지 않음.
     * 데이터 레이크에 대해 들어봤지만, ""데이터 레이크하우스""는 상류층 데이터가 여름에 데이터 보트로 데이터 낚시를 가는 곳처럼 들림.
     * GCP에서 약 100TB 데이터를 다루고 있으며, BigQuery를 질의 엔진으로 사용하고 간단한 Hive 파티셔닝을 사용함. 모든 질의를 실행할 수 있고 비용이 매우 저렴함에 만족하지만, 대기 시간이 상당히 높아짐(회사에 큰 문제는 아님).
          + Iceberg를 구현하면 이를 개선할 수 있는지 궁금함. Iceberg를 사용해본 경험이 있는지 물음.
     * Iceberg에 대해 매우 흥분되지만, 마지막으로 조사했을 때 Spark 라이브러리만이 구현체였고, Trino의 Iceberg 커넥터는 Hive에 강한 의존성이 있었음.
          + 전체 산업이 MapReduce, Hive, Spark와 같은 레거시 기술과 이혼하는 데 어려움을 겪고 있음.
          + Iceberg에 대해 다시 조사할 계획이며, 이 분야가 발전하기를 기대함. 오늘날 우리는 레거시 기술 없이 데이터를 처리할 수 있는 도구와 컴퓨팅 파워를 가지고 있으며, 모든 데이터가 빅데이터는 아님.
          + 결과적으로 ""데이터 엔지니어링""은 점점 더 일반적인 백엔드 개발과 유사해지고 있으며, 일반적인 개발 관행이 적용되고 있음.
          + 순수 Python Iceberg 라이브러리가 매우 곧 나오길 바라는 마음.
     * 이 모든 것을 더 구체적인 아이디어로 설명할 수 있는 사람이 없는 이유에 대해 의문을 제기함. 데이터를 저장하는 방법, 연결 및 질의하는 방법, 그리고 질의 속도(트랜잭션 속도 대비 ""분석"" 속도)에 대해 설명해야 함.
     * 온라인에서 본 모든 벤치마크에서 Delta Lake 포맷이 Iceberg보다 훨씬 더 나은 성능을 보임.
          + 이것이 사양에 근본적인 것인지, 아니면 Iceberg가 격차를 좁힐 수 있는 가능성이 있는지에 대한 질문.
     * 블로그 포스트가 100% 포괄적이거나 대부분의 사람들에게 최선의 출발점이 되지는 않을 것이라는 점을 인정함.
          + 새로운 것을 배우는 가장 좋은 방법은 다른 사람들에게 다시 설명하는 것이라는 태도를 좋아하고, 자신도 웹사이트의 노트에 적용하기 시작함.
"
"https://news.hada.io/topic?id=12539","별자리는 대륙보다 젊다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              별자리는 대륙보다 젊다

별자리는 대륙보다 젊음

     * 별자리는 대륙의 생성과 소멸을 목격하지 않았음. 별자리는 대륙보다 젊은 존재.
     * 대륙이 변화하는 시간 척도는 수천만 년에서 수억 년에 달함.
     * 태양 크기의 별이 살고 죽는 시간 척도는 수십억 년으로, 별들은 대륙보다 오래됨.

별자리는 별들의 패턴

     * 별자리는 별이나 별들의 집합이 아니라 밤하늘에서 별들이 만드는 패턴.
     * 일부 별자리의 별들은 우주 공간에서 가까이 있고 중력으로 묶여 있음. 예를 들어 플레이아데스는 수억 년 동안 함께 있을 것으로 보임.
     * 대부분의 별자리는 2D 밤하늘 투영에서 가까워 보이지만 실제 거리는 매우 다름.

별자리의 변화 시간 척도

     * 별자리는 수십만 년에서 수십만 년의 시간 척도로 변화함. 이는 대륙의 움직임보다 훨씬 빠름.
     * 오리온 별자리는 밝은 7개의 별 위치가 다른 별자리보다 느리게 변화함.

오리온 별자리의 특징

     * 오리온의 많은 별들은 서로 관련이 있고, 비슷한 시기에 형성되어 비슷한 방식으로 움직이며 약한 중력 상호작용을 함.
     * 오리온 별자리의 별들은 젊으며, 가장 밝은 별 리겔은 800만 년, 알닐람은 600만 년, 알니탁은 700만 년, 사이프는 1100만 년의 나이를 가짐.

베텔게우스의 특징

     * 베텔게우스는 보통 오리온에서 두 번째로 밝은 별이며, 눈에 띄게 붉고 밝기가 크게 변함.
     * 베텔게우스는 약 800만 년 전에 형성되었으나 이제 오리온을 떠나고 있음.
     * 약 10만 년 내에 초신성이 되어 약 3개월 동안 반달만큼 밝게 빛날 것임.

별자리와 대륙의 변화

     * 대부분의 별자리는 별들이 서로 대비하여 움직이면서 수십만 년에서 수십만 년의 시간 척도로 변화함.
     * 오리온은 수백만 년 동안 지속될 것이지만, 그 밝은 별들은 타버리고 초신성이 될 것임.
     * 이러한 시간은 대륙이 생성되고 사라지는 것을 목격하기에는 충분하지 않음.

GN⁺의 의견

     * 이 글은 별자리와 대륙의 생성 및 소멸에 대한 시간 척도의 차이를 흥미롭게 설명함.
     * 특히 오리온 별자리의 별들이 서로 관련이 있고 비슷한 방식으로 움직인다는 점은 별자리에 대한 일반적인 이해와 다른 흥미로운 사실임.
     * 베텔게우스가 곧 초신성이 될 것이라는 점은 천문학에 대한 관심을 불러일으키며, 이러한 천문학적 사건이 인류에게 어떤 의미를 가질 수 있는지에 대한 궁금증을 자아냄.

        Hacker News 의견

     * 천문학자들은 플레이아데스 성단에 대한 흥미로운 이론을 제시함. 이 성단은 하늘에서 두드러지게 보이며 적도에 가까워 지구상 모든 문화권에서 볼 수 있음. 대부분의 문화에서는 이 성단과 관련된 일곱 가지 사물(예: 일곱 자매, 일곱 소년 등)에 대한 이야기를 가지고 있으며, 나머지 문화권에서는 여섯 가지 사물에 대한 이야기를 가짐. 일부 문화에서는 원래 일곱 개였지만 하나가 사라진 이야기를 가지고 있음(예: 그리스 신화의 엘렉트라). 이 성단 내 두 별이 매우 가까워 맨눈으로 구분하기 어렵지만, 수만 년 전에는 이 두 별이 눈으로 구분될 만큼 충분히 멀어져 있었다는 것이 밝혀짐. 이는 초기 인류가 일곱 개의 별로 플레이아데스를 인식했고, 이것이 수만 년 동안 대부분 문화의 신화에 남아 있었음을 시사함.
     * 북극성(Polaris)은 상어보다 젊은 별임을 나타냄. 이 사실은 시간 척도에 대한 일반적인 관찰로는 그다지 흥미롭지 않지만, 북극성이 상대적으로 젊은 별이고 상어가 오래된 생명체라는 점을 강조함.
     * 태양이 은하수를 한 바퀴 도는 데 약 2억 1200만 년이 걸린다는 사실은 항상 놀라움을 줌. 이는 태양이 빅뱅 이후 지금까지 존재했다면, 겨우 63번 정도만 은하 중심인 사수자리 A* 주위를 완전히 돌았을 것임을 의미함. 은하의 생성을 고려하면 이 숫자는 더 낮아짐.
     * 판게아 대륙이 지금까지 적어도 다섯 번 형성되고 분열되었다고 믿어짐에 놀람.
     * 칼 세이건의 '코스모스' 에피소드 중 하나에서 별자리가 시간에 따라 변하는 것을 보여주는 멋진 시뮬레이션을 볼 수 있음. 이 시뮬레이션에서는 시차(parallax)와 다른 중요한 현상들을 설명함.
     * 인류는 언젠가 별들을 히치하이킹하여 은하계 전역으로 퍼져나갈 수 있을 것임. 물론, 우리가 자멸하거나 재앙에 의해 파괴되지 않는다고 가정할 때임. 가능한 한 많은 태양계 내 위치에 퍼져나가는 것이 현명할 것임.
     * 천문학 시뮬레이션 소프트웨어인 '레드시프트(Redshift)'에 대한 추억을 되살림. 해커뉴스 이야기를 따라가다 보면, 종종 그들의 새로운/현대적 버전을 발견하게 됨. 레드시프트의 유명한 타이틀들에 대한 간략한 역사와 구 버전 다운로드 링크를 찾을 수 있음.
     * 베텔게우스 별이 언제 폭발할지 정확히 예측할 수 있는지, 그리고 신뢰 구간은 어떻게 되는지에 대한 질문을 제기함.
     * 유럽우주국(ESA)의 가이아(GAIA) 데이터를 이용한 별의 움직임 애니메이션 링크를 공유함.
"
"https://news.hada.io/topic?id=12487","Rough.js: 손으로 그린 듯한 스케치 효과의 그래픽 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Rough.js: 손으로 그린 듯한 스케치 효과의 그래픽 생성

Rough.js

     * Rough.js는 스케치 같은 수제 드로잉 스타일로 그래픽을 그릴 수 있는 작은 그래픽 라이브러리임.
     * 선, 곡선, 호, 다각형, 원, 타원을 그릴 수 있는 기본 도형을 정의하며, SVG 경로를 그리는 것도 지원함.
     * Rough.js는 캔버스와 SVG 모두에서 작동함.

설치

     * npm을 통해 설치: npm install --save roughjs
     * 코드에서 사용: import rough from 'roughjs';

사용법

     * 전체 Rough.js API는 Github에서 확인 가능함.
     * 캔버스 사용 예: const rc = rough.canvas(document.getElementById('canvas')); rc.rectangle(10, 10, 200, 200);
     * SVG 사용 예: const rc = rough.svg(svg); let node = rc.rectangle(10, 10, 200, 200); svg.appendChild(node);

선과 타원

     * 원과 타원, 선을 그리는 예: rc.circle(80, 120, 50); rc.ellipse(300, 100, 150, 80); rc.line(80, 120, 300, 100);

채우기

     * 채우기 스타일에는 hachure (기본), solid, zigzag, cross-hatch, dots, sunburst, dashed, zigzag-line 등이 있음.
     * 채우기 예: rc.circle(50, 50, 80, { fill: 'red' }); rc.rectangle(120, 15, 80, 80, { fill: 'red' });

스케치 스타일

     * 스케치 스타일 조정 예: rc.rectangle(15, 15, 80, 80, { roughness: 0.5, fill: 'red' }); rc.rectangle(220, 15, 80, 80, { bowing: 6, stroke: 'green', strokeWidth: 3 });

SVG 경로

     * SVG 경로 그리기 예: rc.path('M80 80 A 45 45, 0, 0, 0, 125 125 L 125 80 Z', { fill: 'green' });

예시

     * 여기서 예시 확인 가능.

API & 문서

     * 전체 Rough.js API

크레딧

     * 선과 타원 윤곽을 그리는 핵심 알고리즘은 handyprocessing 라이브러리에서 적용됨.
     * SVG 호를 캔버스로 변환하는 알고리즘은 Mozilla 코드베이스에서 적용됨.

이 프로젝트 지원하기

     * Github Sponsors나 Open Collective를 통해 이 프로젝트를 지원할 수 있음.
     * 이 프로젝트는 Excalidraw, Cube, Diagrams.net, Terrastruct, SheetJS, Poster Maker, Chartle 등의 지원을 받고 있음.

라이선스

     * MIT 라이선스, Preet Shihn 저작권.


    GN⁺의 의견

     * Rough.js는 사용자가 간단하게 수제 드로잉 스타일의 그래픽을 웹에서 구현할 수 있게 해주는 혁신적인 라이브러리임.
     * 다양한 채우기 스타일과 스케치 스타일을 조정할 수 있는 기능은 웹 기반 그래픽 디자인에 새로운 차원을 제공함.
     * 이 라이브러리는 오픈 소스 커뮤니티의 지원을 받으며, 다양한 웹 기반 도구와 통합되어 사용자 경험을 풍부하게 만드는 데 기여하고 있음.

        Hacker News 의견

     * RoughNotation & RoughJS 사용 사례
          + RoughJS를 사용하여 밑줄, 강조 등을 지원하는 RoughNotation에 대한 언급.
          + 자신의 웹사이트에서 영감을 받아 구현한 예시로, 하이라이트된 제목에 마우스를 올리면 작동 방식을 요약한 글을 참조하도록 안내.
          + 관련된 해커뉴스 게시물들과 그들의 댓글 수를 나열하여 RoughJS의 인기와 사용 사례를 보여줌.
     * Wired Elements & svg2roughjs
          + RoughJS를 사용하여 스케치 스타일로 렌더링하는 웹 컴포넌트 세트인 Wired Elements 소개.
          + SVG 파일을 스케치로 변환하는 svg2roughjs 래퍼를 만든 경험 공유.
     * RoughJS를 활용한 인터랙티브 목업 생성
          + WiredJS와 함께 사용하여 인터랙티브 목업을 만드는 사례 소개.
          + 목업 예시와 소스 코드 링크 제공.
     * RoughJS의 다양한 활용
          + Excalidraw와 비교하며 RoughJS의 효과를 좋아한다는 의견.
          + horserecords.info에서 RoughJS를 사용한 사례.
          + Boxy SVG 내의 ""Sketchify"" 생성기 구현 경험을 공유하며, RoughJS가 의존성이 거의 없고 웹 워커 내에서 실행될 수 있다는 장점을 강조.
          + 라이브러리의 사용 용이성과 시간에 견딘 안정성을 칭찬하며, usdc.cool에서 차트를 만드는 데 사용했다는 사례.
          + Rough.js에 감사를 표하며, Hatch 프로젝트에 추가할 수 있는 Sketchy Shapes를 만들고, 실시간으로 파라미터를 조정하는 것이 재미있다는 의견.

   이 요약은 해커뉴스 댓글에서 RoughJS 및 관련 도구들의 다양한 활용 사례와 사용자들의 긍정적인 경험을 보여줌. RoughJS는 손으로 그린 듯한 스케치 스타일의 그래픽을 만들 수 있는 자바스크립트 라이브러리로, 웹 개발자들 사이에서 인기가 있으며, 목업, 차트, 인터랙티브 요소 등 다양한 웹 컴포넌트를 만드는 데 사용됨.
"
"https://news.hada.io/topic?id=12583","Microsoft Copilot for Android 앱 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Microsoft Copilot for Android 앱 공개

     * ChatGPT 앱과 거의 비슷
          + 챗봇 기능 및 DALL-E 3를 이용한 이미지 생성 기능 제공
          + 이메일/문서등의 초안 작성에 이용 가능
     * OpenAI의 GPT-4 모델을 무료로 이용 가능
"
"https://news.hada.io/topic?id=12495","HN에 묻다: "효과가 있으면 어리석지 않다"는 당신의 이야기는 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN에 묻다: ""효과가 있으면 어리석지 않다""는 당신의 이야기는 무엇인가요?

GN⁺의 의견

     * 이 글은 소프트웨어와 기술을 창의적이고 때로는 비정상적인 방법으로 사용하여 원하는 결과를 얻는 '저주받은 해킹'에 대한 것임.
     * 기술 애호가들과 소프트웨어 엔지니어들에게는 이러한 해킹이 기술의 한계를 넘어서는 창의성을 발휘할 수 있는 영감을 제공함.
     * 이 주제는 기술의 유연성과 사용자의 창의적 해결책을 찾는 능력을 강조하며, 때로는 기술을 의도하지 않은 방식으로 사용하여 놀라운 결과를 이끌어내는 사례들을 탐구하는 데 흥미를 느끼게 함.

        Hacker News 의견

     * 스타트업이 Microsoft Outlook용 플러그인을 개발했으며, 이는 성공적이었다. 고객들은 Outlook Express용 동일한 기능을 원했지만, OE는 플러그인 아키텍처가 없었다. 그러나 Windows 훅과 DLL 인젝션을 사용하여 매크로 시스템을 구축할 수 있었다. 이 시스템은 화면에서 모든 동작을 볼 수 있었지만, 완벽하게 작동했다. 점심시간에 누군가가 화면을 보지 않도록 OE 사용자를 설득하자고 농담했고, 이 아이디어는 실제로 작동했다. 전체 데스크톱의 스크린샷을 찍어 전체 화면으로 표시하고, GUI 조작을 숨긴 후 OE가 업데이트될 때까지 기다린 다음 전체 화면 오버레이를 종료하는 방식이었다.
     * 1999년에 터키의 인기 있는 소셜 플랫폼인 Eksi Sozluk을 단일 텍스트 파일을 사용하여 데이터베이스로 만들었다. 단 3시간 만에 웹 프레임워크 없이 Delphi로 작성된 EXE 파일로 사이트를 구축했다. 현재는 .NET/MySQL을 사용하고 있으며, 터키 정부에 의해 ""국가 안보""와 같은 이유로 금지되었지만 여전히 인기가 있으며, 금지된 도메인에도 불구하고 여전히 합법적인 사업체로 남아 있어 세금을 내고 콘텐츠 삭제 요청을 수락하고 있다.
     * 90년대 HBO에서 컨설팅을 했을 때, MS Mail on Mac 서버에서 MS Exchange on PC로의 마이그레이션 작업을 진행했다. 문제는 Mac의 MS Mail에 주소록 내보내기 기능이 없어 개인 비서들이 연락처를 일일이 복사해야 했다. 이 문제를 해결하기 위해 화면 핫키 도구를 실험했고, 전체 프로그래밍 언어를 갖춘 도구를 사용하여 연락처를 자동으로 CSV 파일로 변환하여 Exchange로 가져올 수 있는 도구를 개발했다.
     * Google Chrome 초기에 Windows 스크린 리더와 호환되도록 만드는 작업을 맡았다. Chrome의 설계는 Firefox나 IE와 달랐기 때문에, 접근성 API를 올바르게 구현하는 것이 도전적이었다. 정적 웹 페이지에서 작동하도록 시도했지만, 스크린 리더가 Chrome에서 웹 특정 기능을 활성화하지 않았다. 결국 Chrome의 실행 파일 이름을 firefox.exe로 변경한 후 실행했을 때 모든 기능이 작동하기 시작했다. 이후 스크린 리더 벤더와 연락하여 Chrome을 웹 브라우저로 처리해달라고 요청했다.
     * 15년 이상 전에 모바일 CPU에서 기가바이트 단위의 텍스트를 색인화하는 작업을 했다. 단어 정규화 로직이 매우 느렸기 때문에 캐시를 사용하여 속도를 크게 향상시켰다. 캐시 삭제 로직을 개발할 때, 데스크톱 시뮬레이터에서는 빨라졌지만 임베디드 장치에서는 느려졌다. 결국 가장 단순한 삭제 로직을 사용하여 출시했다.
     * 데이터베이스가 부팅-크래시 루프에 빠져 있었고, 특정 테이블에 대한 innodb_history_list가 손상되었다. 데이터베이스가 즉시 충돌하기 때문에 세션을 열고 테이블을 삭제하는 것이 불가능했다. 여러 터미널 창을 열고 ""while true; do mysql -e 'drop table xyz;' done""을 실행하여 수백만 번의 시도 끝에 데이터베이스에 연결에 성공했다.
     * 첫 컴퓨터의 CD 드라이브가 고장 났을 때, 새로운 것을 살 여유가 없어서 거의 1년 동안 플로피 디스크를 사용했다. 결국 드라이브를 분해하여 문제를 발견했고, 폴란드 소시지인 키엘바사를 사용하여 기어에 윤활유를 바르고 드라이브를 고쳤다.
     * 30년 된 천연가스 히터가 스마트 온도 조절기를 지원하지 않았기 때문에, 플라스틱 기어를 온도 조절 바퀴에 붙이고 라즈베리 파이에 연결된 서보로 온도를 조절할 수 있는 시스템을 만들었다.
     * 소매 외환에서 근무할 때, 고객들이 보고 있는 가격과 주문이 입력된 가격에 대해 이의를 제기하는 경우가 많았다. 이 문제를 해결하기 위해 거래 버튼을 클릭할 때 가격을 로그로 기록하는 솔루션을 개발했다. 로그 파일에는 Java Swing GUI 요소들을 ASCII 아트로 변환하여 기록했다.
     * 프로덕션 서비스에서 SSD 전체를 mmap하여 C++ 데이터 구조로 캐스팅하는 방식을 사용했다. 해당 SSD에는 파일 시스템이 없었고, 데이터로 가득 찬 거대한 구조체 배열을 직접 저장했다. SSD가 고장 나면 백업에서 모든 데이터를 복구해야 했지만, 이 방식은 놀랍도록 빠르고 저렴했다.
"
"https://news.hada.io/topic?id=12496","LED 산업용 피어싱산업용 피어싱

LED 산업용 피어싱

     * 친구의 귀에 걸쳐진 바 형태의 산업용 피어싱에 LED를 채우는 아이디어를 가짐.
     * 런던 해커스페이스 폐쇄 전 여러 프로젝트를 서두르며, 밀링 머신 없이는 주사바늘에 구멍을 뚫기 어려움.

디자인

     * 2022년 여름 친구의 귀 사진을 찍고, 주사바늘에 LED를 채울 수 있는지 고민함.
     * 16 게이지 주사바늘은 적당한 직경과 얇은 벽을 가지고 있어 이상적임.
     * OpenSCAD로 초기 디자인을 하고, Photoshop으로 사진과 오버레이하여 LED 간격과 오프셋을 정확하게 조정함.
     * 유연한 PCB를 사용하여 가능한 가장 얇은 보드를 제작함.

금속 작업

     * 작은 황동 V-블록을 만든 후, 주사바늘에 구멍을 뚫는 데 5분이 채 걸리지 않음.
     * 엔드밀로 구멍을 뚫어 정확한 평평한 바닥을 만듦.
     * 배터리 홀더로 사용할 귀걸이의 금속 케이스가 긍정적인 배터리 단자 역할을 함.

회로

     * 회로 기판이 도착하자마자 조립하고, 약 1년 후에 보드에 전원을 공급하고 깜박이는 패턴을 작동시킴.
     * 마이크로컨트롤러는 ATtiny44를 사용하며, 오늘날에는 CH32V003을 사용할 것임.
     * 회로를 케이스 안에 넣으면 거의 완성된 모습을 보임.
     * 소프트웨어는 챨리플렉싱 방식으로 LED를 제어하며, 약 3분 동안 반복되는 패턴을 사용함.

조립

     * 배터리 케이스로 사용된 저가 귀걸이는 스테인리스가 아닌 니켈 도금 황동임.
     * 모든 것이 완벽하게 작동하는 것처럼 보이므로, 구멍을 메우기 위해 투명한 식품 등급 에폭시를 준비함.
     * 에폭시가 굳은 후 한 개의 LED가 작동을 멈춤.

엔드 캡

     * 디자인에 하나 이상의 엔드 캡을 추가할 계획이었으나, 아직 실행하지 않음.
     * 마이크로폰이나 IR 수신기와 같은 다양한 인터페이스를 제공할 수 있음.

케이스

     * 케이스는 OpenSCAD로 모델링되었으며, 필렛과 챔퍼를 만드는 것은 까다로움.
     * 죽은 LED로 인해 빠르게 마무리하고 싶었지만, 케이스는 잘 만들어져 장치를 완벽하게 보호함.

모델링

     * 살아있는 사람을 매크로 렌즈로 촬영한 지 오래되었으며, 노출을 맞추기가 까다로움.
     * 플래시가 LED를 압도하여 임상적인 느낌을 줌.

배터리 수명

     * 전류 소모량을 3mA 이상으로 측정함.
     * LR521 배터리는 최대 10mA의 용량을 가지고 있어, 이론적으로 약 3시간의 배터리 수명을 가짐.
     * SR521이라는 같은 형태의 배터리는 더 긴 수명과 더 평평한 방전 곡선을 가짐.

결론

     * 프로젝트에서 특별히 어려운 부분은 없었으며, 다음 피어싱은 더 작고 0201 LED를 사용할 필요가 있음.
     * 결과에 만족하지만, LED가 죽은 것에 대해 실망함.
     * 이 피어싱을 소유하고 싶다면, 착용자의 귀 크기에 맞게 제작해야 하므로 쉽지 않음.

GN⁺의 의견

     * 이 프로젝트는 기존의 산업용 피어싱에 혁신적인 기술을 접목하여 독특한 패션 액세서리를 만들어냄.
     * OpenSCAD와 같은 3D 모델링 소프트웨어와 유연한 PCB 기술을 활용하여 매우 작은 공간에 전자 회로를 통합하는 능력을 보여줌.
     * 이 기사는 기술과 예술이 만나 새로운 형태의 창작물을 만들어낼 수 있음을 보여주는 흥미로운 사례임.

        Hacker News 의견

     * 해커 스페이스의 쇠퇴에 대한 우려

     한 사용자는 자신이 프로젝트를 만들 때 사용했던 마커 공간과 장비에 대한 접근을 잃은 것에 대해 안타까워함. 특히 산업 및 금속 작업 장비를 갖춘 해커 스페이스가 감소하고 있는 것 같다고 느낌. 이것이 SF Bay 지역의 TechShop의 비극에 대한 과잉 해석인지, 다른 지역에서도 이러한 현상을 관찰하는지 궁금해함.
     * UV 보호 부적 프로젝트에 대한 팬

     이 사용자는 UV 보호 부적 프로젝트를 통해 해당 개발자를 알게 되었으며, 그의 작업에 대해 큰 팬임을 밝힘.
     * 전자 나침반 아이디어 제안

     끝부분에 전자 나침반을 넣어 머리를 돌릴 때 주요 방향을 지나면 클릭 소리가 나게 하는 아이디어를 제안함. 강력한 자석을 사용하면 훈련을 통해 방향 감각을 키울 수도 있음을 언급함.
     * 회로의 전류 소모에 대한 기술적 제안

     3mA의 전류 소모가 이 회로에는 높게 느껴진다고 언급하며, LED를 상시 듀티 사이클 PWM으로 설정하여 전류 소비를 줄이는 방안을 제안함. 또한, 배터리와 마이크로컨트롤러 사이에 시리즈 저항을 추가하여 허용 가능한 전압 범위의 하단으로 낮추어 배터리 수명을 연장할 수 있는지 궁금해함.
     * LED 빛의 확산에 대한 아이디어

     미첼라가 공유하는 내용에 대해 감사함을 표현하면서도, 맨눈에 LED 빛이 직접 닿는 것에 대해 안타까움을 표현함. 피부를 통해 LED 빛을 확산시키는 아이디어에 대해 생각해보고, 미묘하게 빛나는 귀, 코, 입 등을 상상함.
     * 현재 진행 중인 프로젝트에 대한 칭찬

     이 사용자는 개발자가 현재 멋진 프로젝트들을 많이 만들어내고 있으며, 사무실용 위성 시계 키트를 구입해 매우 만족하고 있음을 언급함.
     * 웹사이트의 인터랙티브 모델에 대한 호평

     사용자가 웹사이트에서 회전하고 이동할 수 있는 모델이 매우 잘 작동한다고 칭찬함.
     * 개인화된 귀걸이에 대한 관심과 아이디어

     블루투스를 추가하거나 다양한 패턴을 플래시하거나 심지어 작은 화면을 장착하는 등의 개인화된 귀걸이에 대해 생각해봤지만, 아직 실제로 제작된 제품을 찾지 못함. 큰 게이지의 귀걸이에 화면을 넣는 것이 가능할지, 판매와 사이징에 대한 고려사항을 언급함.
     * 창의성과 영감에 대한 칭찬

     개발자의 겸손함을 칭찬하며, 그의 창의적이고 영감을 주는 작업에 대해 아름답다고 평가함.
     * 제목 오해와 긍정적 반응

     한 사용자는 제목을 'LED Industrial Pricing'으로 잘못 읽었지만, 내용을 보고 실망하지 않았다고 언급함.
"
"https://news.hada.io/topic?id=12484","Show HN: 개발자를 위한 전용 스크래치패드, Heynote","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show HN: 개발자를 위한 전용 스크래치패드, Heynote

Heynote의 핵심 기능

     * Heynote는 개발자를 위한 전용 스크래치패드로, 크고 지속적인 텍스트 버퍼를 여러 블록으로 나누어 제공함.
     * 새로운 블록 생성은 Ctrl-Enter를 누르는 것만큼 간단하며, 특정 블록 내에서 Ctrl-A를 누르면 해당 블록의 내용만 선택됨.
     * Slack 메시지, API 응답, 회의 노트, 일일 할 일 목록 등을 작성할 때 실수로 전송하지 않도록 도움을 줌.

문법 강조 및 자동 포맷 기능

     * 각 블록은 자신만의 언어 설정을 가질 수 있으며 (예: JavaScript, JSON, Markdown 등), 문법 강조와 자동 포맷 기능을 제공함.
     * Heynote는 다양한 프로그래밍 언어를 지원함.

계산기 스크래치패드

     * 수학 블록은 간단한 계산을 위한 계산기 스크래치패드로 사용될 수 있으며, 변수, 함수, 단위 변환(통화 포함)을 지원함.
     * 간단한 계산을 위한 훌륭한 도구임.

GN⁺의 의견

     * Heynote는 개발자들이 코드를 작성하거나 메모를 할 때 실수를 줄이고 효율성을 높일 수 있는 도구임.
     * 다양한 프로그래밍 언어에 대한 지원과 문법 강조 기능은 코드 작성 시 가독성을 향상시키는 데 기여함.
     * 계산기 기능은 개발 중 간단한 수치 계산이 필요할 때 빠르고 편리하게 사용할 수 있어 실용적임.

        Hacker News 의견

     * 이 스크래치 패드는 정말 탁월하며, 사용자의 뇌 작동 방식에 잘 맞는 UX를 갖추었으면 한다는 특별한 요청이 있음. 새로운 블록이 페이지 상단에 추가되어 시간이 지남에 따라 아래로 ""퇴화""되는 방식을 선호함. 또한, 기능 요청 대부분을 무시하고 단순함을 유지할 것을 권장함.
     * 블록 아이디어가 멋지고, Electron에 대한 많은 댓글이 있지만, Rust로 만들어진 Electron 대안인 Tauri를 소개함. Tauri는 시스템 웹뷰를 사용하여 번들 크기와 메모리 사용량을 줄임. 코드를 보고 Electron 코드가 많지 않아 Rust로 전환하기 쉬울 것 같다는 의견을 제시함.
     * 이 스크래치 패드는 매우 좋으며, 독에 영구적으로 자리잡음. 코드 블록을 실행하여 출력을 생성할 수 있는 기능을 추가해달라는 요청이 있음. 브라우저 콘솔에서 JS를 테스트하는 것과 같은 작업을 노트 옆에서 할 수 있으면 좋겠다는 의견임.
     * 이 스크래치 패드는 간단하고 견고한 실행으로 매우 마음에 듦. 비슷한 것을 만들고 싶었는데, 오픈 소스 덕분에 포크해서 실험해볼 수 있음. 캡처를 매우 쉽게 만드는 것이 장점이지만, 다시 찾는 것이 단점임. 블록에 태그나 제목을 달고 태그나 제목으로 검색할 수 있는 기능이 좋을 것 같음. 더욱 야심차게는 LLM과 임베딩을 사용하여 블록을 자동으로 태그, 요약, 분류, 클러스터링하는 것을 실험해볼 수 있음. 다양한 방향으로 발전할 수 있지만, 기능을 너무 많이 추가하여 단순함을 잃지 않도록 주의해야 한다는 의견도 있음. 또한, 많은 양의 데이터를 처리할 때 성능을 어떻게 처리하는지에 대한 질문이 있음.
     * 스크래치 패드를 다운로드하고 설치한 후 인상적이라고 평가함. 수학 블록 개념이 마음에 들지만, 새 블록을 수학 블록으로 변경하는 방법을 알아내는 데 몇 초가 걸림. 블록 언어 변경에 대한 안내가 명확하지 않아 약간의 재구성을 제안함.
     * 이 스크래치 패드가 정확히 필요한 것이라고 평가하며, 지금까지 이 목적으로 개인 WhatsApp 그룹을 사용해왔음. 아치 리눅스 패키지, 수학 결과를 buffer.txt에 포함시키고 복사 기능, 폰트와 색상 테마 변경, 마크다운 블록 내 이미지 및 미디어 지원, 블록에 타임스탬프 추가, 파일 재로딩 지원, 모바일 지원 가능성에 대한 기능 요청이 있음.
     * 이 스크래치 패드를 마음에 들지 않을 것으로 예상했지만, 실제로는 꽤 멋진 것으로 평가함. Emacs의 스크래치 버퍼를 사용하던 것을 그리워하며, Obsidian과 Trillium을 사용해왔지만, Heynote를 스크래치패드/빠른 노트용으로 사용해보고 저장할 가치가 있는 내용은 복사할 계획임. 블록 내보내기 기능에 대한 요청이 있으나 복잡하지 않게 구현되기를 바람.
     * 노트 옆에 계산을 할 수 있는 기능이 Ink and Switch의 ""Potluck"" 데모에서 본 ""동적 주석""을 연상시킴. 노트에서 구조화된 데이터로의 점진적인 향상은 유용함.
     * 이 스크래치 패드는 org-mode를 많이 연상시킴. 코드 블록을 평가하는 등 org-mode와 같은 기능을 추가할 계획이 있는지 질문함. 개인적으로는 org-mode에서 벗어나지 않겠지만, Emacs를 사용하기 꺼려하는 사람들에게 추천할 수 있는 대안이 있으면 좋겠다는 의견임.
     * 스크래치 패드가 멋져 보이며, 처음 시작할 때 GitHub과 currencies.heynote.com에 연결하는 것을 Little Snitch가 알려줌. 스크래치 패드가 왜 집으로 전화를 걸어야 하는지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=12564","2016년 이후 첫 미국 신규 원자로 가동 개시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2016년 이후 첫 미국 신규 원자로 가동 개시

미국의 새로운 원자로 가동 개시

     * 조지아 주의 보글 원자력 발전소에 새로운 원자로가 상업 운전을 시작함.
     * 이는 2016년 이후 미국에서 처음으로 가동을 시작한 새로운 원자로임.
     * 보글 발전소의 새로운 1,114 메가와트(MW) 규모의 3호기는 기존의 두 원자로와 합쳐져 운영될 예정임.

건설 및 비용 초과

     * 두 개의 새로운 원자로 건설은 2009년에 시작되었으며, 원래 2016년과 2017년에 상업 운전을 시작할 예정이었음.
     * 그러나 건설 지연과 비용 초과로 인해 프로젝트 총 비용은 현재 300억 달러 이상으로 추정됨.

새로운 원자로 기술

     * 보글 유닛 3과 4는 웨스팅하우스 AP1000이라는 새로운 원자로 설계를 사용함.
     * 이 세대의 고급 원자로는 이전 세대의 원자로 기술보다 작은 면적과 더 단순한 설계를 가짐.
     * 또한 외부 전원이나 운영자의 조작 없이도 원자로를 정지시킬 수 있는 강력한 수동 안전 시스템을 갖추고 있음.

미국의 원자력 발전 현황

     * 미국은 95,881 MW의 원자력 발전 용량을 가진 93개의 상업용 원자로를 운영하고 있으며, 이는 세계에서 가장 많은 용량임.
     * 원자력 발전소는 미국 전기의 거의 20%를 생산함.
     * 최근 몇 년간 여러 원자로가 퇴역했음에도 불구하고, 원자력 발전에 대한 관심이 증가하고 있음.

미국의 원자력 에너지 지원 법안

     * 양당 인프라 법과 인플레이션 감축 법과 같은 최근 입법은 미국의 원자력 에너지를 깨끗한 에너지, 제로 탄소 발전 포트폴리오의 일부로 지원함.

GN⁺의 의견

     * 이 기사는 미국에서 새로운 원자로가 가동을 시작한 중요한 사건을 다루고 있으며, 이는 원자력 발전의 미래와 관련된 기술적 진보를 보여줌.
     * 웨스팅하우스 AP1000 원자로의 채택은 원자력 안전성과 효율성에 대한 새로운 기준을 제시함.
     * 원자력 발전이 미국의 에너지 믹스에서 중요한 역할을 계속할 것이며, 이는 탄소 배출을 줄이는 데 기여할 수 있는 중요한 전략으로 여겨짐.

        Hacker News 의견

     *
          + 미국에서 가장 최근에 가동을 시작한 원자로는 조지아주의 Vogtle Unit 3이며, 그 이전에는 테네시주의 Watts Bar Unit 2였음. Watts Bar 2의 건설은 1973년에 시작되었지만 1985년에 중단되었고, 2007년에 재개되어 2016년에 온라인으로 전환됨.
          + Watts Bar Nuclear Plant에 대한 추가 정보
     *
          + Vogtle 프로젝트의 비용 초과로 인해 조지아 주민들이 경제적 부담을 지게 됨. 전기 요금 청구서에 '원자력 건설 비용 회수' 항목이 있어 전기가 더 비싸짐.
     *
          + Vogtle 4가 미국에서 지어지는 마지막 원자로가 될 것이라는 베팅을 할 것임. 태양광과 배터리가 너무 저렴해서 원자력과 경쟁할 수 없음. 곧 세계는 매년 1테라와트의 태양광 용량을 설치할 것임.
          + (연구용이나 군사용 원자로는 제외)
     *
          + 태양광과 배터리만으로 미래를 예측하는 사람들은 일조량이 부족한 지역에 살지 않는 것 같음. 일부 지역에서 겨울을 버틸 만큼 큰 배터리 팩을 건설하는 것은 현실적이지 않음. 날씨로 인한 중단을 원자력이 처리하면서 다양한 발전 방식을 혼합하는 것이 가장 안정적인 전력망을 제공할 것임.
     *
          + ""미래는 X이고 Y일 수 없다""는 모든 주장에 대해, 이것은 잘못된 이분법임. 에너지는 사회의 가장 중요한 기둥 중 하나이며, 매우 중요하기 때문에 다양한 방법으로 보호되어야 함. 단일 방법에 모든 것을 걸 수는 없음. 지속 가능한 에너지 발전과 연구를 모두 지지함. 더 많은 원자력 발전소와 태양광/풍력이 필요하며, 아마도 지열, 조력 등 아직 잘 모르는 다른 것들도 필요함.
     *
          + 8년 동안 원자력 엔지니어로 일했던 경험을 바탕으로, 원자력 산업의 현실을 완전히 무시하는 많은 원자력 지지자들의 비현실적인 생각에 대해 지적함. 원자력이 기후 변화에 대한 유일한 실용적 해결책이라고 주장하는 사람들에게 이 보도자료를 보여줄 수 있음.
     *
          + 유명한 EPR(European Pressurized Reactor)에 대한 기다림이 계속되고 있음. 핀란드의 Olkiluoto에서 건설을 시작한 첫 번째 EPR 유닛은 2009년에 가동될 예정이었지만 2023년에 상업 운영을 시작함. 프랑스의 Flamanville에서 건설을 시작한 두 번째 EPR 유닛도 가동 예정일에서 10년 이상 지연됨. 영국의 Hinkley Point에서 승인된 두 유닛 중 첫 번째는 2027년에 가동을 시작할 예정임.
          + EPR에 대한 추가 정보
     *
          + 첫 번째로 비용을 지불한 우리는 N번째로 얻는 보상을 받아야 함. 모든 석탄 발전 용량을 AP1000으로 대체해야 함.
     *
          + 기사는 2023년 12월 26일자이지만, 조지아 파워로부터의 링크된 발표는 2023년 7월 31일자임.
"
"https://news.hada.io/topic?id=12523","bifrost - 모듈러 네트워킹 데몬 & 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     bifrost - 모듈러 네트워킹 데몬 & 라이브러리

     * Pluggable Transport를 지원하는 P2P 통신 엔진
          + 크로스 플랫폼: 웹브라우저, 서버, 데스크탑, 모바일,..
          + 효율적: 하나의 연결로 여러개의 동시 스트림을 멀티 플렉싱
          + 암호화: 피어 간의 각 링크를 식별,인증,암호화
          + 유연성: 여러 개의 트랜스포트 및 프로토콜을 동시에 같이 사용
          + 메시기능: 서킷을 통해서 원하는 대상 피어로의 멀티 홉 라우팅 지원
          + PubSub: 플러그 가능한 구현체를 통해서 채널 Pub/Sub 가능
          + Robust: 안정적인 연결을 위해 Quic을 사용
     * libp2p, noise, drpc, starpc, nats 같은 네트워킹/PubSub/RPC 라이브러리등과 연동
     * Go 라이브러리로 사용하거나 CLI 및 Daemon 으로 이용 가능
"
"https://news.hada.io/topic?id=12578","4B If 문장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                4B If 문장

40억 개의 if 문

     * 최근 소셜 미디어를 조사하던 중 기차 안에서 이 스크린샷을 발견함.
     * 이 코드는 시간-메모리 트레이드오프의 완벽한 예시임.
     * C 언어로 구현하여 성능을 높이고자 함.

코드 구성

     * C 언어로 짝수와 홀수를 판별하는 코드를 작성함.
     * 최적화를 비활성화하여 컴파일함.
     * 0부터 10까지의 숫자에 대해 정상 작동하지만 그 이상의 숫자에서는 문제 발생함.

메타 프로그래밍

     * Python을 사용하여 if 문을 메타 프로그래밍함.
     * 8비트 정수에 대해 짝수와 홀수를 판별하는 프로그램을 생성함.

16비트 확장

     * 16비트 정수에 대해 동일한 방식으로 프로그램을 확장함.
     * 약 130k 줄의 C 파일을 생성하고 컴파일함.

32비트 도전

     * 32비트 정수에 대해 프로그램을 확장하려 시도함.
     * 330GB 크기의 C 파일을 생성했으나 컴파일러가 힙 공간 부족으로 실패함.
     * Portable Executable 형식의 한계로 인해 4GB 이상의 파일을 처리할 수 없음.

직접 기계어 코드 작성

     * x86-64 어셈블리 언어로 직접 IsEven 함수를 작성함.
     * Python을 사용하여 기계어 코드를 수동으로 컴파일함.

실행 파일 생성

     * 40GB 크기의 파일을 생성하여 모든 32비트 정수에 대해 짝수와 홀수를 판별함.
     * 파일을 메모리에 매핑하고 함수 포인터를 사용하여 코드를 실행함.

최종 버그 수정

     * strtoul 함수로 교체하여 부호 없는 정수 파싱 문제를 해결함.
     * 프로그램은 매우 빠르며, 대용량 숫자에 대해서도 10초 이내에 결과를 반환함.

    GN⁺의 의견

     * 중요성: 이 글은 프로그래밍의 기본 개념인 시간-메모리 트레이드오프를 이해하는 데 도움이 됨. 또한, 최적화되지 않은 코드가 실제 성능에 미치는 영향을 보여주는 좋은 사례임.
     * 흥미로움: 프로그래밍 언어 간의 성능 차이와 컴파일러의 한계를 실험적으로 탐구하는 과정이 흥미로움. 특히, Python과 C 언어를 비교하며 성능을 향상시키려는 시도가 재미있음.
     * 교훈: 이 글은 복잡한 문제를 해결하기 위해 때로는 비효율적으로 보일 수 있는 접근 방식이 실제로는 유용할 수 있음을 보여줌. 또한, 컴퓨터 과학에서 창의적인 해결책을 모색하는 것의 중요성을 강조함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 1996년, 16세 때 처음 작성한 프로그램에 대한 추억.
          + 선형대수학 책의 컴퓨터 그래픽 부록을 보고 회전하는 와이어프레임을 그리는 프로그램에 몰두.
          + 배열을 몰라 변수를 하드코딩하고, 회전 행렬의 각 항목도 변수로 설정.
          + 포인터는 알아 화면에 그리기 위해 메모리 주소에 직접 쓰기를 함.
     * 두 번째 댓글 요약:
          + 코드 생성을 통한 복잡한 접근 대신 간단한 ""for loop""로 해결 가능한 예시 제시.
     * 세 번째 댓글 요약:
          + is-even과 is-odd npm 패키지에 대한 농담.
          + npm install을 사용하면 40GB 크기의 패키지가 다운로드되는 상상.
     * 네 번째 댓글 요약:
          + 짝수와 홀수를 분류하기 위해 데이터베이스 사용을 제안.
          + SQLite 데이터베이스에 숫자와 그 분류를 매핑하여 프로그램 업데이트 필요 없음.
     * 다섯 번째 댓글 요약:
          + 기사가 매우 재미있다고 평가.
          + 소스 코드를 온라인에 공개하여 ChatGPT가 학습할 수 있게 해야 한다는 의견.
     * 여섯 번째 댓글 요약:
          + 분산 버전에 대한 아이디어 제시.
          + 각 호스트가 자신의 도메인 이름과 일치하는지 확인하고 결과를 반환하는 방식.
     * 일곱 번째 댓글 요약:
          + AWS에 이 기술을 판매하여 AWS EvenOrOdd API로 제공하라는 제안.
          + 클라우드의 힘을 이용하면 프로그램이 더 강력해질 것이라는 의견.
     * 여덟 번째 댓글 요약:
          + 40GB의 명령어를 800MB/s * 10초의 디스크 읽기 속도로 처리하는 방법에 대한 의문.
          + OS 레벨의 스마트 캐싱이나 CPU가 명령어를 건너뛰는 최적화가 있을 것이라는 추측.
     * 아홉 번째 댓글 요약:
          + 룩업 테이블을 사용하여 비용이 많이 드는 연산을 피하는 기술에 대한 설명.
          + libdivide 라이브러리의 예시와 함께 8비트 정수 나눗셈을 룩업 테이블로 대체한 경험 공유.
     * 열 번째 댓글 요약:
          + 이진 탐색을 사용한 최적화 제안.
          + 중첩된 if-else 문을 사용하여 O(logN)의 시간 복잡도로 실행되도록 하는 방법에 대한 농담.
"
"https://news.hada.io/topic?id=12509","전자공학의 예술전자공학의 예술 (2015)

책에 대한 찬사

     * 존 윌리슨이 30년 간의 경험에서 마주한 모든 회로 아티팩트가 5장에 자세하고 실용적이며 직관적인 방식으로 설명됨.
     * 그는 책이 자신의 개인적인 무역 비밀로 생각했던 많은 주제들을 그래픽으로 자세히 설명하고 실제 부품 번호를 공개한 것에 대해 약간의 불편함을 느낌.
     * 책의 데이터 제시 방식이 독자에게 많은 정보를 한눈에 제공하여 훌륭한 관점을 제공한다고 평가함.

위조품 경고 및 책 정보

     * 2015년 12월, 온라인에서 판매되는 저품질 복사본(위조품으로 확인)에 대한 경고가 있음.
     * 이러한 위조품은 제본 상태가 나쁘고 텍스트 오류(예: ""Wineld Hill""과 같은 저자 페이지의 리가처 ""fi""가 누락)로 인식 가능함.
     * Kindle이 유일하게 승인된 전자책 버전임.

책 구매 정보

     * 책은 1220페이지의 대형 포맷으로, 약 1650개의 구성 요소를 나열한 80개의 표와 1470개의 그림 및 90개의 오실로스코프 스크린샷을 포함함.
     * 실용적인 조언, 즉석에서의 기술, 철저한 색인이 제공됨.
     * 책은 케임브리지 대학 출판사, 아마존, 에이다프루트 산업, 반스 앤 노블, 아마존 UK, 포일스(UK), 북 디파지토리(전 세계) 등에서 구매 가능함.

GN⁺의 의견

     * 이 책은 전자공학 분야에서 매우 중요하며, 30년 경력의 전문가조차도 새로운 지식을 얻을 수 있음을 시사함.
     * 위조품에 대한 경고는 소비자들이 진품을 구매할 때 주의해야 할 필요성을 강조함.
     * 책의 포괄적인 내용과 실용적인 조언은 초급 소프트웨어 엔지니어뿐만 아니라 모든 전자공학도에게 유익한 자료임.

        Hacker News 의견

     * 청소년 시절 나의 바이블이었음. 책장에서 꺼내며 전선과 납 덩어리들이 책상 위로 떨어짐. 특히 10장(미니컴퓨터)과 12장(구축 기법)이 돋보임. 이 책 덕분에 '마이크로프로세서 시스템 디자인'으로 나아갈 수 있었고, 첫 68000 디자인을 작동시킬 수 있었음. 세상에 멋진 선물을 준 Horowitz와 Hill에게 감사함.
     * 이 책은 내게 중요한 전환점이었음. 대학원에서 지도교수가 추천해주었고, 회로 설계에 대한 대학원 수준의 코스였음. 산업계로 진출했을 때 무수히 도움이 됨. Horowitz가 강연을 위해 구글 캠브리지에 왔을 때, 나는 아마존에서 실수로 구매한 위조본을 가지고 있었고, 진짜 본을 얻은 후에 그가 서명해줌. 개인적으로 이 책의 두 번째와 세 번째 판을 모두 소유하는 것이 가치 있다고 생각함.
     * 오랜만에 이 책을 열어봤는데, 도서관에서 빌린 책이었음. 내용을 이해하지 못해 당황했고, 마치 할머니의 요리책을 보는 것 같았음. 무언가를 놓친 건가? 다시 살펴봐야 할까?
     * ARRL 핸드북을 추천함. 원자 구조부터 FPGA 프로그래밍, 안테나 설계, 변조/복조 원리, 디지털 신호 처리까지 모든 것을 다룸. 2023년판은 여섯 권으로 구성됨.
     * 이 책을 구매하려고 생각 중이지만, 가격이 만만치 않아서 망설여짐. 초보자에게 세 번째 판이 두 번째 판의 좋은 중고본보다 훨씬 필요하고 최신인가? 구식이고 현재와 관련 없는 것들을 배우게 될까?
     * 두 번째 판을 학생용 매뉴얼과 함께 읽었음. 몇몇 까다로운 개념에 대한 추가 설명과 추가 연습 문제가 있음. 아무 지식이 없거나 최소한의 지식에서 시작해 핵심 개념의 좋은 개요를 갖게 되는 시작점으로 추천함. 두 번째 판은 최신 디지털 기술(현대 마이크로컨트롤러, USB, FPGA 등)을 다루지 않지만, 그에 대한 훌륭한 무료 온라인 자료가 많음.
     * 이 책은 아마존에서 내가 처음 구매한 책임. 1999년 5월 24일, EECS로 전공을 변경하기로 결정하고 하드웨어에 대한 집중 과정을 원했음. 여름 동안 책을 읽고 결코 돌아보지 않음.
     * 제목에는 2015년이 포함되어야 함. 훌륭한 작업이지만, 방대한 정오표를 확인해야 함.
     * 훌륭한 참고서임. 트랜지스터 섹션 어딘가에서 읽기가 꽤 힘들어졌음. 나쁜 소식은 여전히 전자공학에 서툴다는 것. 좋은 소식은 이 책을 참고서로 가지고 있다는 것. 더 좋거나 나쁘거나, 요즘은 IC 베이비로도 상당히 멀리 갈 수 있음. 데이터 시트 참조 다이어그램을 모방하여 핀 A를 핀 B에 연결하는 것. 전자공학의 기초는 IC를 설계하는 사람에게만 필수적임.
     * 이 책은 초보자에게 좋은 책인가? 전자공학 초보자에게 좋은 다른 책은 무엇인가? 가능하다면 이 책보다 저렴한 것으로.
"
"https://news.hada.io/topic?id=12513","Show GN: Open World Puzzle Game 소개합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: Open World Puzzle Game 소개합니다.

   오픈 월드 퍼즐 게임을 소개합니다

   Game
     * Emoji Puzzle match 이모지 퍼즐
     * 땅 점유
     * MineSweeper 지뢰찾기 & 지뢰심기

   부가기능
     * 팔로우 및 채팅 기능 제공
     * 화상미팅 기능 제공
     * 화면공유 기능 제공
     * 유튜브 영상 공유

   Beta서비스라 버그가 있을 수 있으며, 피드백 주시면 정말 감사드립니다
   (튜토리얼을 준비를 하긴 했는데 설명이 제가 보기에도 부족해 보여서 얼른 보완하겠습니다.)

   앱 출시도 하려고 했는데 Google Play의 새로운 개인 개발자는 앱 출시에 20명 이상의 테스터가 2주이상 앱을 테스트해줘야 배포 가능하다고 해서 걱정입니다 :(
"
"https://news.hada.io/topic?id=12553","Gokrazy - Go 프로그램을 라즈베리 파이에 배포하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Gokrazy - Go 프로그램을 라즈베리 파이에 배포하기

     * Go로 작성한 프로그램을 Appliance 처럼 라즈베리 파이/PC 등에 배포 가능
          + Raspberry Pi 4B/3B/Zero 2 및 PC Engines APU
     * 필요없는 부분을 다 걷어내서 리눅스 관리등의 복잡성을 줄이고 단순화
          + 리눅스 커널 + 라즈베리 파이 펌웨어 + Go 컴파일러와 스탠다드 라이브러리
          + Gokrazy 시스템(최소화된 Init 시스템, 업데이터, DHCP, NTP,..)
     * Go 컴파일러를 제외한 모든 것이 Go 모듈로 관리됨
     * Go Replace Directive를 활용하여 모든 시스템을 같은 워크플로우로 수정 가능
     * systemctl 대신 편리한 웹 인터페이스를 제공해서 프로세스 상태 보기 및 관리
     * A/B 파티셔닝 스킴으로 gok update 명령 만으로 쉽게 업데이트 가능

   와우.. 라즈베리파이를 Go 서버로 운용하기 엄청 편하겠는데요..
"
"https://news.hada.io/topic?id=12497","페럿: 다중 모달 대형 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           페럿: 다중 모달 대형 언어 모델

Ferret 모델 개요

     * Ferret 모델은 하이브리드 영역 표현 및 공간 인식 시각 샘플러를 통해 세밀하고 개방된 어휘로 참조 및 정밀 위치 지정이 가능함.
     * GRIT 데이터셋(~1.1M)은 대규모, 계층적이며 강건한 지시어 튜닝 데이터셋임.
     * Ferret-Bench는 참조/위치 지정, 의미, 지식, 추론을 동시에 요구하는 다중 모달 평가 벤치마크임.

Ferret 모델 출시

     * [12/14] 7B, 13B 체크포인트 출시.
     * [10/30] FERRET 모델과 Ferret-Bench 코드 출시.
     * 데이터와 코드는 연구 목적으로만 사용되며, LLaMA, Vicuna, GPT-4의 라이선스 협약을 따름.
     * 데이터셋은 CC BY NC 4.0(비상업적 사용만 허용)이며, 이 데이터셋을 사용하여 훈련된 모델은 연구 목적 외에는 사용할 수 없음.

설치 및 사용법

     * FERRET 저장소를 복제하고 해당 폴더로 이동 후 필요한 패키지 설치.
     * 추가 패키지 설치는 특정 훈련 사례에 필요함.

훈련

     * FERRET은 8개의 A100 GPU(각각 80GB 메모리)에서 훈련됨.
     * 적은 수의 GPU에서 훈련 시 per_device_train_batch_size를 줄이고 gradient_accumulation_steps를 증가시켜야 함.
     * Vicuna 체크포인트와 LLaVA의 프로젝터 준비 필요.
     * 훈련 스크립트 제공.

평가

     * 자세한 내용은 문서 참조.

체크포인트

     * 사전 훈련된 모델과 Vicuna 사이의 delta 추출.
     * Vicuna의 가중치 다운로드 후, 준비된 가중치 오프셋 다운로드 및 적용.

데모

     * FERRET 훈련 후, 로컬에서 체크포인트 사용하여 데모 실행.
     * Gradio 웹 UI 사용.
     * 컨트롤러, 그라디오 웹 서버, 모델 워커 순차적으로 실행.

인용

     * Ferret을 유용하게 사용한다면, 다음 BibTeX로 인용.

감사의 말

     * LLaVA: 기반 코드베이스.
     * Vicuna: LLM 코드베이스.


    GN⁺의 의견

     * 혁신적인 기술: Ferret 모델은 다양한 어휘를 사용하여 세밀한 참조 및 위치 지정을 가능하게 하는 혁신적인 기술을 제시함.
     * 연구의 중요성: 이 모델과 데이터셋은 인공지능 분야에서 참조 및 위치 지정 작업의 연구를 촉진할 수 있는 중요한 자원임.
     * 다양한 응용 가능성: 이 기술은 이미지 및 텍스트를 결합한 다양한 응용 프로그램에 활용될 수 있으며, 이는 인공지능의 시각적 이해와 상호작용을 한 단계 끌어올릴 수 있음.
"
"https://news.hada.io/topic?id=12589","Ask GN: 2023년 베스트 스타트업을 뽑는다면 어디가 있을까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask GN: 2023년 베스트 스타트업을 뽑는다면 어디가 있을까요?

   2023년 올해의 베스트 어워드를 정해서 블로그 글을 쓰려고 준비 중인데요.
   스타트업 관련해서는 2023년에 크게 생각 나는 곳이 없네요.
   혹시 제가 놓쳤거나 까먹을 수도 있을 듯 하여, 여기에 설문겸 질문을 드립니다.

   참고로 작년에 제가 정했던 곳은 Stability.ai 였고요.
   이전에 비해 2023년에 크게 성장하거나, 큰 업적을 내는 기준이기에 OpenAI 같은 경우도 후보 탈락에서 제외 되었습니다.

   “후보탈락에서 제외” 면 후보란 뜻인가요?

   새벽에 폰으로 쓰다보니 이상하게 써놨었군요ㅠ 후보 탈락이라고 써놓고 뒤에 제외를 또 붙였어서. 후보가 아니란 말이란 의미 였습니다ㅠ
"
"https://news.hada.io/topic?id=12514","마이크로소프트 플라이트 시뮬레이터가 비행 학습에 도움이 되거나 더 나은 조종사로 만들 수 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         마이크로소프트 플라이트 시뮬레이터가 비행 학습에 도움이 되거나 더 나은 조종사로 만들 수 있을까?

마이크로소프트 플라이트 시뮬레이터가 비행 학습에 도움이 될 수 있나요? (또는 더 나은 조종사가 될 수 있나요?)

     * 마이크로소프트 플라이트 시뮬레이터(Microsoft Flight Simulator)에는 가상 비행 교관과 함께하는 ""비행 교훈""이 포함되어 있음.
     * 이 시뮬레이터들은 현실감이 높아지고 있으며, 주제에 대한 소개로서 유용할 수 있음.
     * 실제 비행 훈련 중에 가르치는 개념들을 가르치는 경우가 있음.
     * 실제 조종사가 되기로 결정한 사람에게 이 경험이 도움이 되거나 해가 될 수 있는지, 실제 훈련 환경에서 학생/교관에게 도움이 될 수 있는 도구인지에 대한 질문.

시뮬레이터의 한계와 유용성

     * 시뮬레이터는 이륙, 착륙, 특정 기동 등을 배우기 위한 도구로 사용해서는 안 됨.
     * 시뮬레이터 설정에 많은 시간을 할애하고, 현실성을 높이기 위해 설정을 조정해야 함.
     * 날씨 설정을 현실 세계 데이터로 구성하거나 다양한 날씨 조건을 추가하여 실제 비행과 유사한 환경을 만들어야 함.
     * 시뮬레이터는 비상 절차 연습에 ""약간"" 도움이 될 수 있음.
     * 시뮬레이터는 절차 연습, 항법 연습, 계기 해석 연습에 도움이 될 수 있음.
     * 지상에서의 활동, 비행기 바깥에서의 활동, 라디오 사용 등은 시뮬레이터로 연습하기 어려움.

실제 비행 경험과의 비교

     * 실제 비행기를 조종할 때는 시뮬레이터에서 배운 것과 다른 경험을 할 수 있음.
     * 시뮬레이터는 실제 비행 중에 느낄 수 있는 감정적 반응이나 ""좌석의 감각""을 제공하지 못함.
     * 시뮬레이터는 비행의 기술적 측면을 이해하는 데 도움을 줄 수 있지만, 좋은 조종사가 되기 위한 모든 요소를 제공하지는 못함.

GN⁺의 의견

     * 마이크로소프트 플라이트 시뮬레이터는 실제 비행 훈련의 보조 도구로 유용할 수 있으나, 실제 비행의 모든 측면을 대체할 수는 없음.
     * 시뮬레이터는 특히 절차 연습, 계기 해석, 항법 연습에 도움이 되며, 이는 비행 훈련 비용을 절감하는 데 기여할 수 있음.
     * 시뮬레이터의 한계를 인식하고 실제 비행 경험과의 차이를 이해하는 것이 중요하며, 이는 비행 학습에 있어서 시뮬레이터를 효과적으로 활용하는 데 중요한 요소임.

        Hacker News 의견

     * 항공기 조종사 겸 강사의 의견
          + 비행 시뮬레이터에서 수천 시간을 보낸 사람은 비행에 대한 정보를 최대한 흡수하려는 타입일 가능성이 높음.
          + 이런 사람은 실제 비행을 배울 때 잘할 가능성이 있으나, 악습을 깨야 할 것이 많음.
          + 시뮬레이터를 사용해 VFR 훈련을 하는 것은 시간 낭비라고 생각함.
          + IFR 훈련에는 시뮬레이터가 유용하지만, 악습을 피하기 위해 강사의 지도 하에 사용할 것을 권장함.
     * VR 설정을 사용하는 조종사의 경험
          + VR 설정과 힘을 전달하는 러더와 조이스틱을 사용하면 꼬리바퀴 조종과 기본 조종 기술에 도움이 됨.
          + 시뮬레이터에서는 이륙 시 엔진 고장과 같은 비상 상황을 안전하게 시뮬레이션할 수 있음.
          + 가상의 공항 교통 관제(ATC)와의 무선 통신 연습은 초보 조종사에게 큰 이점임.
     * PPL 취득 경험을 공유하는 조종사
          + PPL을 취득한 후 학생들을 대상으로 조사를 했을 때, 시뮬레이터를 사용한 학생들이 더 적은 비행 시간으로 면허를 취득한 것으로 나타남.
     * 개인 조종사 면허(PPL)에 대한 조언
          + PPL은 비행기의 ""느낌""과 창밖을 보는 것에 대해 배우는 것이 중요하며, 시뮬레이터 사용은 나쁜 습관을 더 많이 배울 수 있음.
          + PPL 취득 후에는 시뮬레이터를 사용해 낯선 경로나 공항에 익숙해지는 데 도움이 될 수 있음.
          + 계기 조종사 면허를 위해서는 좋은 시뮬레이터가 매우 유용함.
     * 계기 조종사 면허 취득 경험
          + MSFS와 X-plane, PilotEdge를 사용하여 계기 조종사 면허를 취득함.
          + 시뮬레이터는 통신 내용을 기록하고, 다양한 접근 방식을 연습하는 데 도움이 됨.
          + 실제 비행과 함께 시뮬레이터를 보충 학습으로 사용하는 것이 중요함.
     * 비디오 게임으로 비행기를 조종한 사례
          + 비디오 게임만으로 비행기를 조종하고 곡예 비행을 한 사례가 있으나, 이에 대한 회의적인 견해도 존재함.
     * 비행 시뮬레이터의 영향력
          + 비행 시뮬레이터 사용 경험이 실제 비행기 조종사가 되는 데 영감을 줌.
          + 시뮬레이터는 실제 비행기 착륙과 같은 경험을 대체할 수는 없지만, 기본적인 비행 기술을 익히는 데 도움이 됨.
     * 시뮬레이터의 유용성에 대한 조언
          + 시뮬레이터 경험이 실제로 유용하려면, 고도의 몰입이 필요함.
          + 실제 비행 경험과 시뮬레이터를 병행하면 특히 비행 계획, 체크리스트 등을 연습하는 데 도움이 됨.
     * 비행의 책임감
          + 조종사는 사람들의 생명을 책임지며, 결정력이 중요함.
          + 시뮬레이터에서 자가 학습으로 나쁜 습관을 배울 수 있으나, 과잉 자신감이 더 큰 문제가 될 수 있음.
          + 좋은 조종사가 되기 위해서는 글라이더 훈련과 Cessna 고정익 항공기 외의 다른 항공기 훈련을 권장함.
     * 공군용 비행 시뮬레이터 개발 경험
          + 시뮬레이터는 비행의 물리적 기술을 배우는 데는 적합하지 않으나, 복잡한 절차를 배우는 데는 매우 유용함.
          + 시뮬레이터는 학습 환경을 제어하고 효과적인 학습을 가능하게 함.
"
"https://news.hada.io/topic?id=12549","Hacker News의 비공개 기능 및 동작 목록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Hacker News의 비공개 기능 및 동작 목록

Hacker News Undocumented Features

     * 비문서화된 기능
          + 모더레이터: Hacker News에는 현재 한 명의 전임 모더레이터인 Dan Gackle(dang)이 있으며, 이전에는 Scott Bell(sctb)이 있었음. 모더레이션에 대한 의사 기록을 제공하는 그들의 댓글 답변.
          + 댓글 다운보팅: 사용자가 501 카르마를 달성하면 다른 댓글을 다운보트할 수 있는 능력을 얻음. 다운보트된 댓글은 순위가 낮아지고 다른 사용자에게 흐릿하게 표시됨.
          + 플래그/보증: 사용자가 31 카르마를 가지고 있으면 제출물을 플래그할 수 있음. 충분한 플래그는 제출물의 순위를 크게 낮추거나 완전히 삭제할 수 있음.
          + 상단 바 색상: 사용자가 251 카르마를 가지고 있으면 프로필 설정에서 상단 바의 색상을 설정할 수 있음.
          + 메리 크리스마스!: 크리스마스(12월 25일) UTC 기간 동안 Hacker News의 첫 페이지에는 크리스마스 테마가 적용됨.
          + 투표 조작 방지: 투표 링 검출기를 사용하여 적발된 제출물이 첫 페이지에 오르지 못하게 함.
          + 화염전 감지기: 과열된 토론을 다운랭크하는 소프트웨어가 있음.
          + 두 번째 기회 풀: 모더레이터가 제출물에 대한 두 번째 기회를 제공하고 제출 시간을 재설정할 수 있음.
          + 편집/삭제 시간 제한: 게시물이나 댓글은 작성 후 2시간 이내에 편집할 수 있으며, 답글이 없는 경우에만 삭제할 수 있음.
          + 투표 취소 시간 제한: 투표 후 1시간 이내에 취소할 수 있음.
          + 댓글 접기: 가독성을 향상시키기 위해 댓글을 접을 수 있음.
          + 쉐도우밴: 사용자와 도메인 모두 쉐도우밴을 당할 수 있으며, 그들의 게시물/댓글은 [dead] 상태가 되어 투표나 댓글을 받을 수 없음.
          + 숨겨진 답글 링크: 댓글 깊이가 3 이상인 경우 답글 링크가 일정 시간 동안 숨겨짐.
          + 녹색 사용자 이름: 2주 미만의 계정은 녹색 사용자 이름으로 표시됨.
          + 얇은 검은색 바: 중요한 기술/과학 커뮤니티 인물의 사망을 애도하기 위해 상단 바 상단에 얇은 검은색 바가 표시됨.
     * 동작
          + 정치적 내용의 암묵적 다운랭크: 대부분의 정치적 토론은 주제에서 벗어난 것으로 간주됨.
          + 다양성 및 포용성 주제의 암묵적 다운랭크: 기술 내 다양성과 포용성에 대한 토론은 사용자에 의해 플래그될 수 있음.
          + URL 없는 게시물의 암묵적 다운랭크: URL이 없는 게시물은 페널티를 받음.
     * 보너스 기능
          + Hacker News Classic: 초기 사용자의 투표만을 고려하는 오래된 첫 페이지 순위 알고리즘을 사용할 수 있음.
          + Hacker News Wayback: 특정 시점의 첫 페이지를 볼 수 있음.
          + Hacker News on BigQuery: 대량의 Hacker News 데이터를 분석하려면 BigQuery의 Hacker News 데이터셋을 사용함.
          + Hacker News Lists: 특정 유형의 콘텐츠에 대한 기본 필터링을 허용하는 유용한 링크 목록을 유지함.
          + 공개 URLS: 사용자 생성 콘텐츠가 포함된 다양한 공개 URLS.
          + 공식 RSS 피드: Hacker News의 첫 페이지와 Show HN 페이지를 매핑하는 RSS 피드.
          + Hacker News 검색: 실시간 전문 검색을 제공하는 웹 앱.
          + 특정 점수 이하의 게시물 필터링: 특정 임계값 이하의 모든 게시물을 필터링하는 URL 매개변수.

GN⁺의 의견

     * 중요성: Hacker News는 기술 커뮤니티에서 중요한 플랫폼이며, 이 문서화되지 않은 기능과 동작들은 사용자 경험에 큰 영향을 미칠 수 있음. 특히 모더레이션과 관련된 기능은 커뮤니티의 건강성을 유지하는 데 중요함.
     * 흥미로움: 이러한 숨겨진 기능들은 일반 사용자가 알지 못하는 Hacker News의 '비밀'을 드러내며, 커뮤니티의 내부 작동 방식에 대한 통찰력을 제공함.
     * 재미: 크리스마스 테마 적용이나 얇은 검은색 바와 같은 시각적 요소는 사용자들에게 작은 즐거움을 줄 수 있으며, 커뮤니티에 대한 애착을 높일 수 있음.

   실제로 긱뉴스의 여러 기능들도 이 Undocumented HackerNews를 많이 참고했습니다 ^^

   긱뉴스도 카르마가 500이 넘어야 downvote 되나요..?

   계산 로직이 있어서 정확한 점수를 알려드릴수는 없는데, 그거보다는 낮습니다.

        Hacker News 의견

     * ""오늘 리스트를 업데이트할게요. '하이라이트'가 빠져 있네요. 제가 댓글을 단 후에 이 기능을 알게 되었어요. 제 글이 리스트에 올라간 것을 보고 놀랐죠.""
          + 해커뉴스의 '하이라이트' 기능을 최근에 알게 된 사용자의 경험 공유.
     * ""Dang에게 언급하고 싶어요. 이곳을 이성적이고 문명적으로 유지하는 데 훌륭한 일을 하고 있어요. 그가 어떻게 그렇게 많은 댓글을 빠르게 읽고 반응할 수 있는지 궁금해요.""
          + Dang이라는 사용자가 해커뉴스 커뮤니티 관리에 기여하는 것에 대한 칭찬과 궁금증.
     * ""문서화되지 않았지만, 제출된 링크의 URL이 가끔 경로나 검색 파라미터 부분에서 잘리거나 완전히 제거되는 것을 봤어요.""
          + 해커뉴스에서 링크 제출 시 URL이 변경되는 현상에 대한 사용자의 관찰.
     * ""문서화되지 않은 또 다른 규칙은, 같은 도메인에 반복해서 제출하면 특히 토론 활동이 없으면 자동으로 그림자 밴을 당할 수 있다는 거예요.""
          + 반복적인 도메인 제출로 인한 자동 그림자 밴 현상에 대한 사용자의 경험담.
     * ""사용자가 설정한 색상의 전체 목록이라고 주장하는데, 제가 설정한 색상(#64BFBD)은 포함되어 있지 않아요.""
          + 해커뉴스의 사용자 색상 목록이 완전하지 않다는 한 사용자의 지적.
     * ""카르마를 어떻게 더 얻을 수 있는지 알아봐야겠어요. 저는 주로 구경만 해서 이 사이트에 더 많은 기능이 있다는 걸 몰랐어요.""
          + 카르마 점수와 관련된 사이트 기능에 대한 사용자의 관심.
     * ""해커뉴스가 YC 로고에 'topcolor'를 적용하기 시작한 건 언제죠? 오늘 처음 봤는데, 얼마나 됐는지 궁금해요.""
          + 해커뉴스의 로고 색상 변경에 대한 사용자의 궁금증.
     * ""두 번째 기회 풀에서 이메일을 받고 다시 제출하라는 메시지를 받았을 때 정말 놀랐어요. 글이 주목받지 못하면 그냥 그런 거라고 생각했거든요.""
          + 해커뉴스의 '두 번째 기회 풀' 기능에 대한 사용자의 놀라움과 경험 공유.
     * ""이 리스트를 만들어줘서 고마워요. 2007년부터 사이트를 사용했지만 클래식 페이지를 본 적이 없어요(옛날 스타일시트 정도로 생각했죠). 그리고 몇몇 특별한 URL에 대해서도 몰랐어요.""
          + 해커뉴스의 다양한 기능과 특별한 URL에 대한 사용자의 발견과 감사의 표현.
"
"https://news.hada.io/topic?id=12508","DSM 6이 역사속으로 사라지다 - DSM 6.2의 EoL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    DSM 6이 역사속으로 사라지다 - DSM 6.2의 EoL

   Synology는 10월 2일 마지막 DSM 6 버전인 6.2의 지원을 내년 10월 1일부로 종료하겠다고 밝힘. 이는 보안 업데이트를 포함하며, 추후 지원을 받지 못함을 암시함.
   그리고 오늘, DSM 6을 사용하는 것으로 추정되는 사용자에게 이메일로 통지함.

   업그레이드에 제한이 생기는 모델은 다음과 같음.
     * 11~12 시리즈 (DSx11~ DSx12 등등)
       해당 모델은 DSM 7 업그레이드를 제공하지 않음.
       DSM 6.2의 최신 버전으로 업데이트하기를 권장함.
     * 13~15 시리즈 (DSx13 ~ DSx15 등등)
       해당 모델은 DSM 7.1까지의 업그레이드를 제공.
     * 16~21 시리즈 (DSx16 ~ DSx21 등등)
       해당 모델은 DSM 7.2까지의 업그레이드를 제공.

   620을 잘 사용 중인데…
   앞으로 7-8년 정도 남았다고 보면 되겠군요?

   저는 Synology DSx5 시리즈를 쓰다가 DSM 4 이후로 업데이트가 안되기도 해서 그냥 구석에서 먼지만 먹고 있네요. Synology는 용도에 비해 소프트웨어 지원 기간이 짧은듯한 느낌
"
"https://news.hada.io/topic?id=12527","미국 컴퓨터 잡지의 시대가 막을 내렸다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         미국 컴퓨터 잡지의 시대가 막을 내렸다

미국 컴퓨터 잡지의 시대가 막을 내리다

     * 미국 컴퓨터 잡지 'Maximum PC'를 공항에서 장거리 여행을 갈 때마다 구매해온 경험.
     * 주로 맥 사용자이지만, 'Maximum PC' 잡지를 통해 PC 하드웨어 세계의 최신 상황을 파악.
     * 올해 봄 보스턴으로 여행 갔을 때, 공항에서 잡지를 찾을 수 없었음.

잡지의 종말

     * 'Technologizer'의 포스트를 통해 'Maximum PC'와 'MacLife'가 인쇄를 중단하며, 미국 컴퓨터 잡지의 '종이 시대'가 끝났음을 알게 됨.
     * 1982년 크리스마스에 첫 홈 컴퓨터를 받은 이후 컴퓨터 잡지를 구독하며 읽어옴.
     * 인터넷 이전에는 이런 잡지들이 새로운 소프트웨어, 하드웨어, 시스템에 대한 정보의 주요 출처였음.

영국 컴퓨터 잡지는 여전히 존재

     * 영국 컴퓨터 잡지 사업은 여전히 일정 부분 유지되고 있음.
     * 'Retro Gamer' 잡지를 구독하며 ZX Spectrum, BBC Micro, Amstrad CPC 등에 대해 많이 배움.
     * 미국과 영국의 홈 컴퓨터 시스템은 상당히 달랐고, 미국 잡지가 본인에게 더 영향을 미침.

잡지 컬렉션과 추억

     * 보유한 잡지들을 아껴두었으며, 빈티지 컴퓨터 컬렉션을 시작한 이후로도 몇몇 잡지를 추가로 획득.
     * 가끔 오래된 잡지를 넘겨보는 것은 빈티지 컴퓨팅 취미의 일부로 여전히 즐김.
     * 이제 더 이상 잡지 선반에 새로운 잡지가 추가될 일은 없을 것으로 보임.

GN⁺의 의견

     * 미국 컴퓨터 잡지의 종말은 디지털 시대로의 전환을 상징하며, 많은 이들에게 추억과 정보의 원천이었던 종이 잡지의 중요성을 상기시킴.
     * 영국의 컴퓨터 잡지가 여전히 존재한다는 점은 문화적 차이와 시장의 다양성을 보여줌.
     * 개인적인 컬렉션과 추억을 소중히 여기는 문화는 디지털 시대에도 변함없이 중요한 가치를 지님.

        Hacker News 의견

     * 컴퓨터 잡지에 대한 향수를 느낌
          + 1970년대 후반과 1980년대 초반, 10세 때부터 컴퓨팅을 배움
          + K-Mart와 같은 상점에서 실제 컴퓨터를 사용하는 것이 유일한 경험
          + ZX-80 키트를 보고 아버지에게 간청함
          + ZX-81과 Timex-Sinclair 1000이 출시되어 아버지가 구입 가능해짐
          + 키보드, 테이프 카세트 입력, 16k 램 팩 충돌에도 불구하고 소유한 컴퓨터에 만족함
          + 대학에 거의 다니지 않았지만, Byte 잡지가 더 나은 교육이었음
     * 사우디아라비아에서 태어나 인터넷이 없었지만 게임 제작에 몰두함
          + .bmp 파일을 게임에 로드하고 싶었으나 형식을 이해하지 못함
          + 아버지가 가진 PC Mag에서 BMP 형식에 대한 정보를 얻어 VGA 화면에 이미지를 표시하는 데 성공함
          + 인터넷이 등장하고 파일 형식에 대한 정보를 쉽게 얻을 수 있게 됨
     * 정보를 얻기 위해 잡지에 의존했던 시절
          + 1980년대 초, BASIC 게임을 잡지에서 복사하여 프로그래밍을 시작함
          + IBM 호환 컴퓨터 구매를 꿈꿈
          + Dr. Dobbs Journal이 심오한 컴퓨터 과학/공학을 열어줌
          + Linux Format과 게임 잡지가 2000년대 초반에 좋았지만, 모든 좋은 것들은 발전함
          + 젊은이들이 마법만 보고 내부 작동 원리를 배우지 않는 것에 대한 우려
          + Scratch와 Minecraft가 자신의 것을 만드는 데 도움이 됨
          + 인간이 이러한 놀라운 것들을 만들 수 있다면, 기후 변화에 대처할 수 있을 것임
     * 전 세계적으로 컴퓨터 잡지가 사라짐
          + 잡지 기사가 온라인 기사보다 잘 쓰여짐
          + 뉴스를 며칠 또는 몇 주 후에 읽는 것은 의미가 없음
          + 대부분의 사람들은 즉각적인 만족을 추구함
          + 인쇄된 언론과 주요 뉴스 매체의 쇠퇴를 경험 중임
          + YouTube 채널이나 TikTok 사용자가 전통적인 뉴스 매체보다 더 큰 관객을 가질 수 있음
     * Playboy 잡지가 온라인 전용이 되면서 주류 인쇄 잡지 시대가 끝남
          + 많은 훌륭한 틈새 잡지가 여전히 인쇄되고 있음
          + 잡지 백과사전을 운영하며 많은 인쇄 잡지를 접함
     * 1978년 또는 1979년 Radio Shack의 컴퓨터 카탈로그로 시작함
          + 1980년에 BYTE Magazine을 처음 접함
          + 1999년 BYTE가 갑작스럽게 출판을 중단함
          + 온라인 사이트에 대한 기여자들로는 문화와 작가, 편집자 팀을 구축하기 어려움
          + Ars Technica, Phoronix, lwn.net과 같은 기관을 지원할 것을 권장함
     * 인기 있는 컴퓨터 잡지의 아카이브를 제공하는 링크 공유
          + Zinio를 통해 온라인으로 잡지를 구독함
          + MagPi 잡지는 인쇄 및 온라인으로 제공되며 Raspberry Pi에 중점을 둠
     * 13세 때 잡지를 구입하며 깊이 있는 리뷰와 기술 설명을 즐김
          + 인터넷 미디어는 인쇄 미디어가 편집과 패키징 품질 면에서 달성한 높이에 도달하지 못함
          + 인터넷은 기술에 대해 소통하는 새로운 방법을 허용함
     * 컴퓨터를 구입할 여유가 없을 때 컴퓨터 잡지를 구입함
          + 인터넷, BBS, 플로피 디스크 이전에 잡지가 프로그램을 배포하는 방법이었음
          + 잡지에 실린 BASIC 소스 코드를 입력하여 새로운 프로그램을 실행함
          + archive.org의 컬렉션을 둘러보며 많은 추억이 떠오름
"
"https://news.hada.io/topic?id=12595","모질라 2023 연차 보고서: CEO 급여 급등, Firefox 시장 점유율 급락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             모질라 2023 연차 보고서: CEO 급여 급등, Firefox 시장 점유율 급락

모질라 CEO 보수 급증, 파이어폭스 시장 점유율 급감

     * 모질라 재단의 최신 연례 보고서에 따르면, 모질라 CEO의 보수가 수백만 달러로 급증함.
     * 모질라의 수익은 감소했으며, 파이어폭스의 시장 점유율도 크게 하락함.
     * 이러한 현상이 처음에는 불균형해 보이지만, 모질라의 관점에서는 의도된 전략일 수 있음.

모질라 CEO 보수 인상

     * 2022년 모질라 CEO는 약 690만 달러의 보수를 받았으며, 이는 전년 대비 130만 달러의 인상임.
     * CEO의 보수 인상에도 불구하고 모질라의 전체 수익은 2021년 6억 달러에서 2022년 5억 9300만 달러로 소폭 감소함.

파이어폭스의 급락

     * 2021년 말부터 2022년 말까지 파이어폭스의 시장 점유율은 3.79%에서 3.04%로 크게 하락함.
     * 파이어폭스 시장 점유율의 감소와 CEO 보수의 증가 사이에는 역관계가 있는 것처럼 보임.

모질라의 두 가지 목표

     * 모질라의 목표는 전체 기업 재산의 지속적 증가와 파이어폭스에서의 이탈임.
     * 2022년 모질라의 전체 자산은 13억 달러로 증가했으며, 이는 전년 대비 1억 5700만 달러 증가한 수치임.

모질라의 디-파이어폭스화

     * ""로열티"" 수익이 크게 감소했으나, ""구독 및 광고 수익""은 5600만 달러에서 7500만 달러로 증가함.
     * 모질라는 파이어폭스에 대한 의존도를 줄이고 인공지능 서비스에 투자하는 전략을 추구하고 있음.

모질라의 미래

     * 모질라는 파이어폭스의 성공과 의존도 감소를 보상하는 경영진을 선호하며, 이는 향후 파이어폭스 개발과 홍보에 대한 투자 감소를 의미할 수 있음.
     * 모질라는 인공지능에 초점을 맞추고 있으며, 이는 향후 인공지능 투자 및 서비스 증가를 예상하게 함.
     * 이러한 전략이 유지된다면 모질라 CEO는 향후 연례 보고서에서 추가 인상을 받을 수 있음.

GN⁺의 의견

     * 모질라 CEO의 보수 인상과 파이어폭스 시장 점유율의 감소는 모질라의 장기 전략과 밀접한 관련이 있음. 이는 단순한 우연이 아니라 의도된 변화의 일부로 보임.
     * 모질라의 인공지능 및 기타 구독 서비스로의 전환은 기술 산업 내에서 일반적인 추세를 반영하며, 이는 다른 기술 기업들도 유사한 전략을 취할 가능성이 있음을 시사함.
     * 이 기사는 파이어폭스 사용자들에게는 다소 우려스러운 미래를 예고하지만, 기술 산업의 미래와 관련된 변화와 혁신에 관심이 있는 사람들에게는 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 파이어폭스의 시장 점유율 감소는 개인정보 보호 기능 강화와 관련이 있을 수 있음. 파이어폭스 사용자로서 모질라의 장기적 건강과 재정적 생존에 관심이 있음. 파이어폭스 없이는 모질라 VPN과 AI 제품들이 경쟁이 치열한 시장에서 돋보이지 못할 것임.
     * 파이어폭스의 시장 점유율 감소는 회사에 위험을 초래할 수 있는 상황임. 모질라가 이를 인식하지 못하는 것이 우울함.
     * 모질라의 미래 초점은 인공지능 서비스에 맞춰져 있음을 감지함.
     * CEO의 성과가 부진하고, 모질라가 문제를 인식하지 못하면 현재의 시장 점유율로도 운영이 지속될 것임. 변화에 대한 관심이나 동기가 없음.
     * 정부가 웹/네이티브/모바일 앱을 만들고 있으며, 이는 가속화되고 있음. 파이어폭스는 계속해서 힘겹게 나아가고 있으며, EU가 파이어폭스를 포크하고 프라이버시 중심의 대안으로 발전시키는 것을 자금 지원하는 것이 유럽의 디지털 인프라 의존도를 줄이고, 웹 혁신에 대한 미국의 영향력을 균형있게 하며, EU의 개인정보 보호 가치를 지원하고, 유럽의 경제 및 기술 독립을 강화하는 데 도움이 될 것임.
     * 모질라 CEO의 보상에 대한 걱정은 무의미함. 모질라는 구글의 자금 지원에 의존하고 있으며, 다양한 수익원을 개발하는 것이 필요함.
     * 모질라는 인공지능에 집중할 계획이며, 인공지능 서비스에 대한 투자를 늘릴 것으로 예상됨. 그러나 고객이 누구인지는 불분명함.
     * 모질라의 재무 보고서에 직접 링크 제공.
     * 위키미디어는 모질라보다 나은 보상 체계를 가지고 있음. 모질라에서는 한 사람이 거의 700만 달러를 받고 있음.
     * CEO의 보상을 승인하는 이사회에 문제가 있을 수 있음. 이사회의 구성원들이 얼마나 유능하고 독립적인지 불분명함. 파이어폭스를 포크하고 아파치 재단의 후원을 받는 것이 최선의 선택일 수 있음. 파이어폭스의 미래에 대해 걱정함.
"
"https://news.hada.io/topic?id=12488","Dokémon - 사용하기 쉬운 도커 컨테이너 관리용 GUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Dokémon - 사용하기 쉬운 도커 컨테이너 관리용 GUI

     * 하나의 인스턴스로 여러대의 서버를 관리 가능
     * 각각의 환경을 위한 변수 관리 지원
     * Compose 프로젝트 Deploy
     * 컨테이너, 이미지, 볼륨, 네트워크 관리
     * 가능하면 프라이빗 네트워크에서 실행하고, 퍼블릭 액세스 가능한 VPS에서 실행하는 경우는 Dokémon 앞에 SSL이 활성화된 역방향 프록시(Traefik)를 사용할 것

   도케몬 ㅎㅎ

   이름이 웃기네요 ㅋㅋㅋㅋㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=12570","게임 보이 / 컬러 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            게임 보이 / 컬러 아키텍처

지원 이미지

     * 모델
          + 원본
          + 컬러

모델

     * 원래의 게임 보이는 일본에서 1989년 4월 21일, 미국에서 1989년 7월 31일, 유럽에서 1990년 9월 28일에 출시됨.
     * 다음 세대의 후속작인 게임 보이 컬러는 일본에서 1998년 10월 21일, 북미에서 1998년 11월 18일, 유럽에서 1998년 11월 23일에 출시됨.

마더보드

     * 원본
          + 마킹됨

다이어그램

     * 원래 게임 보이의 주요 아키텍처 다이어그램

간단한 소개

     * 게임 보이는 제한된 성능을 가진 휴대용 NES로 상상할 수 있으나, 매우 흥미로운 새로운 기능을 포함하고 있음.

무지개 분석

     * 이 콘솔의 엄청난 인기로 인해 다양한 리비전(예: 게임 보이 포켓, 라이트, 슈퍼 닌텐도 카트리지 형태 등)이 등장함.
     * 게임 보이 브랜드는 두 세대를 아우름.
     * 4세대에는 흑백 게임 보이와 그 리비전이 있고, 다음 세대에는 게임 보이 컬러가 있음(버추얼 보이의 종말 후 출시됨).
     * 이 글은 두 세대 모두를 다루므로 결국 게임 보이의 작동 방식과 기술이 어떻게 진화하여 게임 보이 컬러가 되었는지에 대한 좋은 이해를 얻게 될 것임.

CPU

     * 닌텐도는 여러 개의 현장에서 구할 수 있는 칩을 마더보드에 배치하는 대신, 대부분의 구성 요소를 담고(숨기고) 있는 단일 칩 디자인을 선택함.
     * 이러한 칩을 System On Chip (SoC)이라고 하며, 이 경우에는 이 콘솔을 위해 특별히 제작되어 닌텐도의 요구 사항(전력 효율, 안티-파이러시, 추가 I/O 등)에 맞춤.
     * 이 칩은 소매 카탈로그에서 찾을 수 없으므로 당시 경쟁자들이 클론을 만드는 데 더 어려움을 겪음.
     * 게임 보이에 사용된 SoC는 DMG-CPU 또는 Sharp LR35902로 불리며, Sharp Corporation에서 제조함.
     * 이 회사는 닌텐도와 밀접한 관계를 유지하고 있음.

CPU 코어

     * DMG-CPU 내부의 주요 프로세서는 Sharp SM83이며, Z80(세가 마스터 시스템에 사용된 CPU)과 인텔 8080 사이의 혼합임.
     * 약 4.19 MHz의 속도로 작동하며, 이는 평균 1-MHz CPU보다 빠름.
     * SM83은 Z80의 IX 또는 IY 레지스터나 8080의 IN 또는 OUT 명령어를 포함하지 않음. 즉, I/O 포트를 사용할 수 없음.
     * 인텔 8080의 레지스터 세트만 구현되어 있으므로, Z80의 16개 레지스터와 달리 8개의 범용 레지스터만 있음.
     * Z80의 확장 명령어 세트 중 일부(비트 조작 명령어만)를 포함함.
     * Sharp는 Z80이나 8080에 없는 몇 가지 새로운 명령어를 추가함. 이는 닌텐도/Sharp가 하드웨어를 구성한 방식과 관련된 특정 작업을 최적화함.

컬러 효과

     * 거의 10년 후, 버추얼 보이와 그 혁신적인 하드웨어를 버린 후, 겸손한 후속작인 게임 보이 컬러가 등장함.
     * 내부에는 몇 가지 추가 사항을 포함한 새로운 SoC인 CPU CGB가 있으며, SM83 CPU 코어는 동일하나 클록 속도가 두 배로 증가함(이제 ~8.38 MHz에서 작동).
     * 개발자들은 새 콘솔을 프로그래밍하기 위해 현재의 기술을 재사용할 수 있고, 새로운 아키텍처에 맞게 시스템을 재설계할 필요 없이 비용을 절약할 수 있으며, 상당한 노력 없이도 하위 호환성을 가능하게 함.
     * CPU CGB는 두 가지 작동 모드를 구현함:
          + 일반 모드: SM83이 ~4.19 MHz에서 작동함.
          + 듀얼-스피드 모드: SM83이 ~8.38 MHz에서 작동함.

하드웨어 액세스

     * SM83은 8비트 데이터 버스와 16비트 주소 버스를 유지하므로 최대 64 KB의 메모리를 주소 지정할 수 있음.
     * 메모리 맵은 주로 다음 엔드포인트로 구성됨:
          + 게임 팩(게임 카트리지) 공간.
          + 작업 RAM(WRAM), 고 RAM(HRAM) 및 디스플레이 RAM(VRAM).
          + I/O(조이패드, 오디오, 그래픽, LCD).
          + 인터럽트 컨트롤.

메모리 사용 가능

     * 닌텐도는 마더보드에 8 KB의 RAM을 장착함. 이는 일반적인 용도로 사용됨(이를 Work RAM 또는 'WRAM'이라고 함).
     * SoC 내부에는 추가로 127 B의 RAM이 있으며, 이는 즉각적인 접근이 필요한 데이터를 위한 작은 공간을 제공함(예: 스택).

그래픽

     * 모든 그래픽 계산은 CPU에서 수행되며, 그 후 Picture Processing Unit 또는 'PPU'가 이를 렌더링함.
     * 통합 LCD 화면에 표시되며, 해상도는 160×144 픽셀이고, 흑백 게임 보이의 경우 4가지 회색 음영(흰색, 밝은 회색, 어두운 회색, 검정색)을 표시함.

내용 구성

     * PPU는 8 KB의 VRAM 또는 '디스플레이 RAM'에 연결되어 있으며, CPU에게도 조정된 접근을 제공함.
     * 게임은 다양한 영역에 올바른 유형의 데이터를 채우는 책임이 있음.

프레임 구성

     * PPU가 화면에 물건을 그리는 방법을 살펴보면, _슈퍼 마리오 랜드 2_를 예로 들 수 있음.

타일

     * PPU는 그래픽을 렌더링하기 위한 기본 재료로 타일을 사용함.
     * 타일은 8x8 비트맵으로 VRAM의 타일 세트 또는 '타일 패턴 테이블'이라는 영역에 저장됨.

배경 레이어

     * 배경 레이어는 256x256 픽셀 (32x32 타일) 맵으로 정적 타일을 포함함.
     * 화면에 표시되는 부분은 게임이 선택하며, 게임 플레이 중에 보이는 영역을 이동시킬 수 있음.

윈도우

     * 윈도우는 배경과 스프라이트 위에 표시되는 160x144 픽셀 레이어로, 이 레이어는 스크롤되지 않음.

스프라이트

     * 스프라이트는 화면 주위를 독립적으로 이동할 수 있는 타일임.
     * 이 레이어는 투명이라는 추가 색상을 사용/요구함.

결과

     * 프레임이 완성되면 다음 프레임으로 넘어감.

비밀과 제한 사항

     * 윈도우 레이어와 추가 인터럽트의 도입으로 새로운 유형의 콘텐츠와 효과가 가능해짐.

컬러 추가 사항

     * 게임 보이 컬러의 PPU는 원본의 상위 집합으로 작동함.

오디오

     * 오디오 시스템은 Audio Processing Unit (APU), 4채널의 PSG 칩으로 수행됨.

기능

     * 네 채널 각각은 단일 유형의 파형에 예약됨:
          + 펄스
          + 노이즈
          + 웨이브

비밀과 제한 사항

     * 믹서는 스테레오 사운드를 출력하므로 채널을 왼쪽 또는 오른쪽에 할당할 수 있음.

운영 체제

     * NES와 달리 게임 보이는 항상 내부 256 바이트 ROM에서 부팅하도록 설계되었으며, 그 후에 게임 코드로 점프함.

게임

     * 게임은 어셈블리로 작성되며 최대 크기는 32 KB임.

외부 통신

     * 게임 보이 링크 케이블을 사용하여 다른 게임 보이와 통신할 수 있음.

안티-파이러시

     * 콘솔은 게임을 바로 실행하지 않고, 비인가 카트리지의 실행을 방지하고 카트리지가 올바르게 삽입되었는지 확인하는 일련의 검사를 수행함.

GN⁺의 의견

     * 게임 보이의 기술적 진화는 휴대용 게임 콘솔의 역사에서 중요한 발전을 나타냄.
     * 닌텐도의 SoC 접근 방식은 하드웨어 설계에서 혁신적이었으며, 경쟁사들이 클론을 만드는 것을 어렵게 만듦.
     * 게임 보이 컬러의 하위 호환성은 개발자와 사용자 모두에게 큰 이점을 제공함.

        Hacker News 의견

     * 오리지널 게임 보이 개발의 놀라운 점은 당시 구페이 요코이의 팀이 상당한 의심을 받았다는 것임. 버스나 화장실에서 게임을 하는 것이 불편할 것이라는 의견이 있었음. 그들의 비전은 단순한 기술을 사용하여 간단하고 짧은 게임을 제공하는 기기를 만드는 것이었음. 이 팀은 모바일 게임을 시작한 주역임.
     * 게임 보이 컬러에 대한 언급이 있었지만, 카트리지 크기가 1MB라는 부분은 수정되지 않았음. 일부 GBC 게임은 4MB 크기에 달함. 또한, 8MB 크기의 기차 게임도 있으며, 짧은 비디오와 고화질 이미지가 포함되어 있음.
     * 포켓몬 오디오를 사용한 데모에 감사함. 추억의 여행이었음.
     * 게임 보이는 지금까지 가장 좋아하는 콘솔임. 현재 ASM(어셈블리 언어)으로 핀볼 던전 크롤러 게임을 개발 중임. 하드웨어는 이해하기 쉽고, 제한 사항이 창의성을 요구함.
     * 현재 우리는 누구나 필요한 부품과 PCB를 구입하여 게임 보이를 재현할 수 있는 시대에 살고 있는지 궁금함.
     * 게임 보이 아키텍처를 배움으로써 무엇을 할 수 있을지, 혹시 지구를 해킹할 계획인가?
     * 게임 보이에 대한 전체 책이 있으나, 아쉽게도 영어로 번역되지 않았음. 스페인어로 구입함. 창작자들의 독특한 인터뷰가 수록되어 있음.
"
"https://news.hada.io/topic?id=12563","소프트웨어 개발자가 학습에 대해 알아야 할 10가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소프트웨어 개발자가 학습에 대해 알아야 할 10가지

     * 학습은 소프트웨어 개발자에게 필수적임. 기술은 끊임없이 변화하고 새로운 기술이 자주 발명되며, 오래된 기술은 반복적으로 업데이트됨.
     * 학습 방법에 대한 이해가 부족함. 사람들은 기억과 학습의 작동 방식을 직관적으로 이해하지 못함
     * 학습 스타일에 대한 믿음은 종종 과학적 합의와 반대되며, 효과적인 교육은 학습 스타일이 아닌 내용에 맞춰야 함
     * 인지 심리학, 교육, 프로그래밍 교육에 대한 수십 년간의 연구는 학습 방법에 대한 통찰력을 제공함

1. 인간의 기억은 비트로 이루어져 있지 않음

     * 인간의 기억은 학습의 핵심이며, 컴퓨터 메모리와 유사하지만 정확성과 신뢰성에서 차이가 있음.
     * 인간의 기억은 ""읽고 업데이트""하는 작업을 하며, 기억을 불러오는 과정에서 강화되거나 수정될 수 있음.
     * ""확산 활성화""는 기억이 서로 연결된 신경 경로에 저장되어 있으며, 이는 문제 해결에 도움이 될 수 있음.

2. 인간의 기억은 한정된 시스템과 무한한 시스템으로 구성됨

     * 장기 기억은 정보가 영구적으로 저장되는 곳이며, 실질적으로 무한함.
     * 작업 기억은 문제를 해결하기 위해 정보를 의식적으로 처리하는 데 사용되며, 용량이 제한적임.
     * 정보를 ""청크""로 묶어서 작업 기억에서 다룰 수 있는 정보의 양을 증가시킬 수 있음.

3. 전문가는 인식하고, 초보자는 추론함

     * 전문가와 초보자의 주요 차이점 중 하나는 전문가는 경험을 통해 패턴을 인식할 수 있음.
     * 전문가는 프로그램 코드에서 일반적인 패턴을 암기하여 인식함으로써 인지 능력을 해방시킬 수 있음.

4. 개념 이해는 추상에서 구체적으로, 그리고 다시 추상으로 이동함

     * 전문가는 초보자와 달리 개념을 다루는 방식이 다름.
     * 전문가는 세부 사항에 초점을 맞추지 않고 일반적이고 추상적인 용어를 사용함.
     * 새로운 개념을 배울 때는 추상적인 특징과 구체적인 세부 사항 및 예시를 모두 이해하는 것이 유익함.

5. 간격과 반복이 중요함

     * 학습 효과를 극대화하기 위해 연습을 여러 세션, 여러 날, 이상적으로는 여러 주에 걸쳐 분산시키는 것이 좋음.
     * 집중적인 코딩 부트캠프는 이상적이지 않지만, 학습 효과를 극대화하기 위한 전략을 적용할 수 있음.

6. 인터넷은 학습을 쓸모없게 만들지 않음

     * 인터넷의 등장으로 프로그래밍 지식의 접근성이 변화함.
     * 인터넷이나 AI 도구를 통해 쉽게 찾을 수 있다고 해서 학습이 쓸모없어진 것은 아님.

7. 문제 해결은 일반적인 기술이 아님

     * 문제 해결은 프로그래밍의 큰 부분을 차지하지만, 일반적인 기술로 직접 가르치는 것은 효과적이지 않음.
     * 문제 해결 능력은 특정 분야에 특화되어 있으며, 다른 분야로의 전이는 효과적이지 않음.

8. 전문가가 되는 것은 일부 상황에서 문제가 될 수 있음

     * 전문가가 되는 것은 학습과 성능에 도움이 되지만, 때로는 문제를 일으킬 수 있음.
     * 전문가는 초보자와 다르게 생각하기 때문에 초보자를 훈련시키는 데 어려움을 겪을 수 있음.

9. 프로그래밍 능력의 예측은 불분명함

     * 프로그래밍 학습의 성공은 타고난 소질과 연습의 혼합물임.
     * 프로그래밍 능력을 예측하는 것은 매우 어렵고, 프로그래머는 어떤 배경이나 인구 통계에서도 나올 수 있음.

10. 마음가짐이 중요함

     * 프로그래밍 능력에 대한 이분법적인 견해는 학습과 가르침에 영향을 미침.
     * 성장 마인드셋은 능력이 변할 수 있다는 관점을 지지하며, 새로운 과제에 직면했을 때 더 꾸준히 노력하고 실패를 극복하는 데 도움이 됨.

GN⁺의 의견

     * 인간의 기억과 학습의 복잡성: 이 글은 인간의 기억이 단순한 데이터 저장소가 아니라 복잡한 신경망으로 구성되어 있으며, 이는 학습과 문제 해결에 중요한 역할을 한다는 것을 강조함. 이는 소프트웨어 개발자들이 새로운 기술을 배우고 적용하는 데 있어 중요한 통찰력을 제공함.
     * 학습 방법의 중요성: 개발자들이 효과적으로 학습하기 위해서는 단순히 정보를 암기하는 것이 아니라, 정보를 어떻게 체계적으로 연결하고 적용할지에 대한 전략이 필요함을 보여줌. 이는 개발자들이 지속적인 자기 개발을 추구하는 데 있어 유용한 지침을 제공함.
     * 성장 마인드셋의 가치: 이 글은 성장 마인드셋이 학습과 개발에 있어 중요한 역할을 한다고 주장함. 이는 개발자들이 자신의 능력을 개발하고 확장하는 데 있어 긍정적인 태도를 갖는 것이 중요함을 시사함.

   요새 유튜브에서 박문호 박사님의 공부법이 떠서 보고 있는데, 맥락이 비슷하네요 ㅎㅎ

        Hacker News 의견

     * ""학습 스타일"" 개념에 대한 간결하고 상세한 설명에 대한 감사함
          + 자신을 시각적 학습자로 여겨왔으나, 이것이 실제로는 중요하지 않다는 주장에 대해 의문을 가졌음
          + 효과적인 교육은 학습 스타일이 아닌 교육 내용에 맞춰야 한다는 설명에 동의함
          + 예를 들어, 과학 수업에서는 데이터를 그래프로 보여주는 것이 말로 설명하는 것보다 낫다는 점을 인정함
     * 다니엘 카너먼의 ""시스템 1""과 ""시스템 2""에 대한 경고
          + ""시스템 1""과 ""시스템 2""는 뇌에 실제로 존재하는 두 시스템이 아니라는 점을 강조함
          + 이 용어들을 사용하는 이유는 우리의 사고방식에 부합하고 도움이 되기 때문임
          + 이 개념에 대한 배경을 설명하기 위해 조슈아 포어의 ""문워킹 위드 아인슈타인""이라는 책을 추천함
     * 학습의 상관 개념인 교육에 대한 논의 부족
          + 개인의 학습 스타일을 넘어서는 교육/훈련 산업에 대한 다양한 접근 방식이 존재함
          + 교육 과정 구성, 교육 목표 및 핵심 학습 포인트, 학생 평가 방법, 피드백 제공 등에 대한 이론이 많음
          + 지식과 기술의 유지, 학습 가능성의 한계 등에 대한 이해가 중요함
     * 문제 해결 능력에 대한 논의
          + 특정 분야에서의 문제 해결과 일반적인 문제 해결 사이에는 차이가 있음
          + 소프트웨어 엔지니어링 분야에서는 이러한 차이를 이해하는 것이 중요함
          + 일반적인 문제 해결 능력은 유동적 지능과 IQ와 밀접한 관련이 있음
          + 모든 문제 해결 능력은 서로 긍정적인 상관관계를 가짐
     * 전문가가 초보자를 교육하는 데 있어서의 한계
          + 전문가가 항상 초보자를 훈련시키는 데 최선이 아닐 수 있음
          + 면접 시 두뇌 퍼즐을 사용하지 말 것을 강조함
          + 면접관의 관찰이나 동시에 말하는 요구는 수행 능력을 저하시킬 수 있는 인지 부하와 스트레스를 증가시킴
     * 컴퓨터 과학 교육 연구자들에 대한 칭찬
          + 세 명의 저자 모두 뛰어난 컴퓨터 과학 교육 연구자임
          + ""Semantic Wave""에 대해 처음 들어봄
          + 유익한 공유에 대한 감사함
     * 자녀 교육에 대한 부모의 고민
          + 자녀가 실수를 할 때 즉시 정답을 알려줄지, 스스로 깨닫게 할지에 대한 논의
          + 학습자의 마인드셋에 대한 새로운 관점 제공
          + 성장 마인드셋과 고정 마인드셋에 대한 설명
          + 성공을 칭찬하고 실패를 용인함으로써 성장 마인드셋을 육성할 것을 제안함
     * 재현 가능하지 않은 연구가 더 많이 인용되는 현상
          + 흥미로운 결과 때문에 재현 불가능한 논문이 더 많이 인용됨
          + 심리학 분야에서는 실험의 39%만이 성공적으로 재현됨
     * 전문가와 초보자의 인식과 추론 차이
          + 시스템 1은 빠르고 인식에 의존하며, 장기 기억 속 패턴 인식에 기반함
          + 시스템 2는 느리고 추론에 집중하며, 작업 기억에서 더 많은 처리를 요구함
          + LLMs는 약한 시스템 1을 보완하고 시스템 2를 강화하는 데 도움을 줌
     * 기사에 대한 긍정적인 평가
          + 읽은 내용에 대부분 동의하며, 보통 이런 유형의 기사에는 동의하지 않을 것임
"
"https://news.hada.io/topic?id=12569","Three.js를 이용한 신주쿠역의 3D 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Three.js를 이용한 신주쿠역의 3D 지도

新宿駅周辺屋内地図データ

     * 일본 국토교통성에서 제공하는 '신주쿠역 주변 실내 지도 데이터'는 신주쿠역과 그 주변 건물의 실내를 상세하게 나타낸 지도 정보임.
     * 이 데이터는 신주쿠역의 다양한 층(4F, 3F, 2F, 1F, 0, B1, B2, B3)의 구조와 보행자 네트워크를 포함하고 있음.
     * 해당 지도 데이터는 웹사이트 'geospatial.jp'를 통해 접근 가능하며, 공공 데이터로서 활용될 수 있음.

   GN⁺의 의견:
     * 신주쿠역 주변 실내 지도 데이터는 대중교통 이용객과 방문자에게 매우 유용한 정보를 제공함.
     * 복잡한 신주쿠역의 내부 구조를 이해하는 데 도움을 줄 수 있어, 효율적인 이동 계획에 기여할 수 있음.
     * 공공 데이터로서의 가치가 높으며, 도시 계획, 긴급 대응, 관광 산업 등 다양한 분야에서 활용될 잠재력을 가지고 있음.

        Hacker News 의견

     * 일본 지하철역의 복잡한 복도를 탐색하며 8번 출구를 찾는 게임을 시작했는데, 매우 사실적인 느낌이 든다고 함.

     ""일본 지하철역의 복도를 탐색하는 게임에 대한 체험: 사실적인 분위기""
     * 게임이 실제 역의 주요 특징인 철로와 승강장으로 가는 계단/에스컬레이터를 포함하지 않아 아쉽다고 언급함.

     ""게임의 누락된 요소: 철로와 승강장""
     * 일본의 캡슐 호텔에 머물렀던 경험을 공유하며, 일본에 대한 그리움을 표현함.

     ""캡슐 호텔 체험과 일본에 대한 그리움""
     * 지도에 기차 노선이 표시되지 않아 혼란스럽고, 미라이나 타워 출구 주변이 실제보다 작게 보이는 등 일관성이 없다고 지적함.

     ""지도의 혼란과 일관성 부족 문제""
     * 3D 지도가 현실을 과장된 방식으로 표현한다고 느낌을 공유함.

     ""3D 지도의 현실 과장""
     * 첫 일본 방문 때 신주쿠역 입구에서 에어비앤비 호스트를 만나기로 한 경험담을 공유함.

     ""일본 신주쿠역에서의 에어비앤비 호스트 만남 경험담""
     * 지도를 움직이는 마우스 컨트롤이 반대로 되어야 한다는 의견을 제시함.

     ""지도 조작의 마우스 컨트롤 개선 필요성""
     * 도쿄 신주쿠에서 호텔에 머무르며 지하철 시스템 사용에 익숙해졌지만, 외국인에게는 친절하지 않다고 평가함. 서울 지하철 시스템과 비교하며 도쿄의 복잡성을 설명함.

     ""도쿄 지하철 시스템의 복잡성과 외국인 사용자 경험""
     * 기술적인 글(일본어)을 링크로 공유함.

     ""기술적 글 공유: 일본어로 작성됨""
     * 기술적인 글을 일본어를 모르고도 코드를 통해 이해할 수 있었다는 경험을 공유하며, 미래에 프로그래밍 언어가 보편적인 의사소통 수단이 될 수 있음을 제안함.

     ""프로그래밍 언어를 통한 의사소통 가능성에 대한 흥미로운 관점""
"
"https://news.hada.io/topic?id=12547","일본, 애플과 구글 앱 스토어 독점에 대한 단속 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     일본, 애플과 구글 앱 스토어 독점에 대한 단속 강화

     * 일본 정부가 애플과 구글의 모바일 운영 체제에서 외부 앱 스토어와 결제 시스템을 허용하도록 요구하는 규제를 준비 중
     * 2024년 의회에 제출될 예정인 법안은 플랫폼 운영자가 자체 생태계 내에서 사용자를 유지하고 경쟁자를 배제하는 행위를 제한할 계획
     * 주로 앱 스토어와 결제, 검색, 브라우저, 운영 체제의 네 가지 영역에 초점을 맞춤

법적 조치와 예상 영향

     * 일본 공정거래위원회가 위반 사항에 대해 벌금을 부과할 수 있도록 하는 방안이 검토 중
     * 벌금은 기존 반독점법을 모델로 할 경우 문제가 된 활동에서 발생한 수익의 약 6%에 해당할 것으로 예상
     * 법안 적용 대상 기업은 매출과 사용자 수 등의 기준에 따라 정부가 결정할 예정이며, 주로 다국적 대기업에 영향을 미칠 것으로 보임

앱 스토어와 결제 시스템의 현재 상황

     * 애플은 아이폰에 앱을 다운로드할 수 있는 유일한 경로로 자체 앱 스토어를 사용하도록 하고 있으며, 앱 내 결제도 애플 시스템을 통해 이루어짐
     * 구글은 제3자 앱 배포 플랫폼을 허용하지만, 일반적으로 앱이 구글의 결제 시스템을 사용하도록 요구함
     * 이러한 결제 시스템 독점은 사용자가 모바일 기기에서 PC보다 더 많은 비용을 지불하게 만들 수 있음

일본 정부의 입장과 시장 전망

     * 일본 정부는 이러한 모델이 모바일 시장에서 기업들의 지배력을 공고히 하는 것으로 보고 있으며, 법안은 보안이 유지되고 사용자 개인정보가 보호되는 한 제3자 앱 스토어와 결제 시스템의 사용을 강제할 목적임
     * 일본 기업들은 iOS 기기에서 전용 게임 스토어를 운영하고, 일본 핀테크 기업의 낮은 수수료 결제 시스템을 사용할 수 있게 될 것
     * 일본 내무성에 따르면, 일본의 모바일 앱 시장은 2023년에 292억 달러로 확대될 것으로 예측되며, 이는 2018년 대비 약 50% 증가한 수치

검색 관련 법안 조항

     * 제안된 법안의 검색 관련 조항은 검색 엔진 운영자가 자사 서비스에 우대 조치를 취하는 것을 금지함.
     * 예를 들어, 구글이 항상 자체 항공권 예약이나 레스토랑 예약 도구를 검색 결과 상단에 배치하는 것을 금지할 수 있음

국제적인 조치와 비교

     * 일본의 계획은 유럽연합의 디지털 시장 법안과 같은 조치를 따르고 있으며, 해당 법안은 2024년 전면 시행 예정으로, '게이트키퍼'가 검색 결과에서 자사 도구를 우대하는 것을 금지하고, 위반 시 전년도 글로벌 매출의 최대 10%에 해당하는 벌금을 부과함
     * 미국에서는 구글이 앱 스토어와 관련된 반독점 사건에서 7억 달러의 합의금을 지불하기로 한 것으로 지난주 보도됨

GN⁺의 의견

     * 일본 정부의 이번 조치는 글로벌 IT 기업들의 시장 지배력에 대한 중요한 제한으로 볼 수 있으며, 이는 다른 국가들에게도 영향을 미칠 수 있는 선례가 될 수 있음
     * 이 법안은 사용자의 선택권을 넓히고, 비용을 절감하며, 혁신을 촉진하는 긍정적인 변화를 가져올 수 있음
     * 특히, 일본 내 핀테크 기업과 게임 스토어 운영자들에게 새로운 기회를 제공할 것으로 기대되며, 이는 일본의 디지털 경제 성장에 기여할 수 있음

        Hacker News 의견

     * 구글이 애플의 결제 제한 정책을 모방한 것은 전략적 실수라고 생각함. 구글은 앱을 사이드로드하고 다른 앱 스토어를 사용할 수 있으며, 자신의 앱을 자신의 기기에서 실행하기 위해 구독료를 지불하지 않아도 개발자 모드를 활성화할 수 있기 때문에 애플보다 훨씬 덜 독점적이라고 봄. 그러나 결제 제한은 분명히 독점적인 남용임. 이 정책을 따르지 않았다면 구글은 현재와 같은 법적 문제에 직면하지 않았을 것임.
     * 구글이 애플보다 훨씬 덜 제한적임에도 불구하고 애플은 에픽과의 소송에서 승리했고 구글은 패배한 것이 놀랍다고 함. 구글 임원들이 반경쟁적 행동에 대한 증거를 문서화했기 때문에 패배한 것으로 보임. iron하게, 구글이 처음부터 애플처럼 엄격하고 통제적이었다면 경쟁을 억제하기 위해 사람들을 매수하거나 거래를 할 필요가 없었을 것임.
     * 웹 애플리케이션을 가지고 있으며 사용자들은 웹 사용에 만족하지만, 더 나은 수익화 옵션 때문에 때때로 네이티브 모바일 앱을 만들 생각을 함. 몇 년 전 안드로이드 앱을 만들려고 했지만, 많은 양의 도구가 필요했고, iOS 앱은 맥을 소유해야 할 것 같아 시도조차 하지 않았음. 현재 리눅스 명령줄 도구를 사용하여 웹 앱을 안드로이드/iOS 앱 스토어에 올릴 수 있는 앱으로 변환할 수 있는지 궁금함.
     * 일본 시장은 애플에게 매우 유리하며, 특정 기능을 지원해야 함. 애플은 이러한 기능들을 구글보다 빠르게 구현함. 예를 들어, 일본의 교통 시스템에서 사용하는 비접촉식 결제 카드에 사용되는 Felica 프로토콜을 지원함. 이모지도 처음에는 일본에서만 사용되었으나, 서양인들이 관심을 가지기 시작하면서 키보드가 없는 것을 우회하는 앱이 등장함.
     * 닌텐도 eShop과 플레이스테이션 스토어도 개방해야 한다는 의견 제시.
     * 구글이 제3자 앱 배포 플랫폼을 허용하지만, 여전히 자체 결제 시스템을 사용하도록 요구한다는 점에 대해 설명 요청. 대체 앱 스토어에서 앱을 다운로드한 경우 구글이 어떻게 PayPal과 같은 API 호출을 방지할 수 있는지 의문 제기.
     * 앱 스토어에서의 '가챠' 시스템에 대한 흥분 표현.
     * 한국에서는 구글과 애플이 여전히 거래의 26%를 수수료로 부과할 수 있어, 대안적 결제 방식에 대한 변경이 실질적으로 의미가 없을 수도 있음을 지적.
     * 웹 플랫폼은 이미 상당히 안전하고 프라이버시 지향적이지만, 애플과 구글은 자체 네이티브 앱을 밀어붙이고 있어 웹 앱을 휴대폰에 설치하는 것이 불가능함. 많은 앱이 웹 뷰를 사용하고 있음에도 불구하고 자원에 대한 우려가 제기됨.
     * 제3자 앱 스토어가 실제로 실행 가능할지, 품질을 통제하는 게이트키퍼들이 가치를 더했는지, 얼마나 많은 유망한 앱들이 반경쟁적인 이유로 시장에서 배제되었는지, 더 공정한 수익 분배가 어떤 모습일지에 대한 궁금증 표현.
     * 스파이웨어와 쓰레기 앱을 걸러내는 것을 원치 않지만, Steam과 앱 스토어를 통해 같은 확장팩을 두 번 구매해야 하는 상황에 대한 불만을 표현. 애플이나 구글이 Valve와 파트너십을 맺는다면 충분한 호의를 얻을 수 있을지, 아니면 모든 기기가 '레몬 시장'이 될 때까지 아무도 만족하지 않을지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=12551","닌텐도 네트워크 서비스 종료 - 종말의 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        닌텐도 네트워크 서비스 종료 - 종말의 시작

닌텐도 네트워크 종료 - 끝의 시작

     * 서론: 블로그 포스팅 부족에 대한 사과. 앞으로 블로그를 더 자주 사용할 계획.
     * 종료: 2023년 10월 닌텐도, 2024년 4월 닌텐도 네트워크 종료 발표. 구체적인 날짜와 시간은 아직 미정.
     * 슈퍼 마리오 메이커: 2023년 12월 초부터 접속 오류 발생. 서버 중 일부가 작동 중단된 것으로 추정.
     * 새 계정 (필수 사항): 닌텐도는 NEX 계정이라는 내부 계정 시스템 사용. 2023년 12월 말부터 새 계정으로 게임 온라인 접속 불가.
     * 결론: 닌텐도 고객 지원에 문제를 제기하지 말 것을 요청. 이는 조기 종료를 초래할 수 있음.

GN⁺의 의견

     * 중요성: 닌텐도 네트워크의 종료는 3DS와 Wii U 사용자들에게 큰 영향을 미칠 것이며, 이는 게임 산업에서 서비스 종료가 사용자 경험에 미치는 영향에 대한 중요한 사례임.
     * 흥미로움: 닌텐도가 자체 개발한 것이 아닌 기존의 Rendez-Vous 라이브러리를 기반으로 한 NEX 시스템을 사용한다는 점은 게임 개발과 서버 관리의 복잡성을 보여줌.
     * 재미: 이러한 기술적 문제와 네트워크 종료 과정이 게임 커뮤니티 내에서 어떻게 다뤄지고 있는지 관찰하는 것은 게임과 기술에 관심 있는 사람들에게 흥미로운 주제임.

        Hacker News 의견

     * 닌텐도 스위치의 백엔드 인프라 지원 기간에 대한 궁금증
          + 스위치는 다운로드 전용 게임 판매로 백엔드 서비스에 더욱 의존하게 됨.
          + 이전 콘솔들은 기본적인 온라인 서비스를 제공했으며, 일부는 닌텐도가 아닌 제3자에 의해 개발 및 유지되었음.
          + 백엔드 서비스를 윈도우나 macOS처럼 무기한 유지하고 발전시켜야 한다는 의견 제시.
          + 다운로드 게임 지원을 위해 온라인 상점은 어떤 식으로든 유지해야 할 필요성이 있음.
          + 스위치의 후속 모델이 2024년이나 2025년에 나올 것이라는 소문이 있으며, Wii의 백엔드가 종료된 것을 기억함으로써 이 문제에 대한 관심이 증가함.
     * 닌텐도의 반복된 실수에 대한 지적
          + Wii는 GameSpy를 사용했으며, GameSpy 인수 후 서버 호스팅 비용이 크게 증가하여 Wii 온라인 서비스가 종료됨.
          + 닌텐도는 서버를 호스팅하면서 타사 소프트웨어를 사용했으며, Wii U와 3DS 시스템을 종료하는 이유 중 하나는 더 이상 지원하기 어려운 시스템을 유지하고 싶지 않기 때문일 수 있음.
          + 스위치의 온라인 시스템이 올바르게 구축되었기를 희망함.
     * 온라인 서비스가 필수인 게임들의 미래에 대한 우려
          + 슈퍼 마리오 메이커 등 많은 게임들이 온라인 서비스 없이는 제대로 작동하지 않음.
          + 게임과 서버/데이터베이스를 아카이브하는 것이 이상적이지만, 닌텐도나 대형 출판사가 이를 수행할 가능성은 낮음.
          + 단기적인 해결책이 있는지, 아니면 이러한 게임과 데이터가 영원히 손실될지에 대한 의문 제기.
     * StreetPass 기능이 서비스 종료 후에도 작동한다는 소식에 대한 긍정적 반응
          + 전 세계의 낯선 사람들로부터 Mii 캐릭터를 만날 수 있는 재미있는 기능임.
          + 국제 공항에 잠시 머무는 것만으로도 Mii 큐를 다양한 캐릭터로 채울 수 있음.
     * 온라인 카탈로그의 종료로 인한 게임 손실 문제에 대한 해결책 제안
          + 온라인 카탈로그에서 구매한 게임을 일회용 빈 카트리지에 구워서 보관할 수 있는 기능 필요성.
          + 게임 회사는 디지털로 게임을 전액 판매하고, 카트리지 판매로 추가 수익을 얻을 수 있으며, 게이머는 서버가 종료되더라도 물리적 매체에 게임을 보존할 수 있는 보안을 갖게 됨.
     * 서비스 의존성에 대한 명확한 정보 제공의 중요성
          + 제품이 서비스에 의존하고 있음을 구매 시 명확히 인지하고 있으면, 게임과 콘텐츠가 사라지거나 기기가 무용지물이 되는 것에 대해 수용 가능.
          + 게임과 기기는 일정 기간 동안 99.9% 가동을 보장하는 서비스 수준 협약(SLA)이 필요.
          + 회사가 문을 닫거나 SLA 기간이 끝나면 모든 서버 소프트웨어를 공개하겠다는 약속이 추가 보너스.
          + 현재 게임 구매는 소유가 아닌 임대 개념임을 인식하고, 이에 동의하지 않는다면 거래에 참여하지 않아야 함.
     * 저렴한 인터넷 서버 대역폭을 이용한 서비스 유지 가능성에 대한 의견
          + VPS 비용이 매우 저렴하여, 아무도 사용하지 않는 서비스라면 유지 비용이 매우 낮을 수 있음.
          + 사람들이 사용하고 있어 유지 비용이 크다면, 서비스를 종료하기에는 너무 이르다는 명확한 신호임.
          + 서비스를 종료하는 유일한 논리적 이유는 사람들을 새로운 기기로 유도하기 위함일 수 있음.
     * 스팀 게임의 장기적인 보유와 사용에 대한 만족감
          + 첫 스팀 게임을 여전히 소유하고 있으며 때때로 플레이함.
          + 거의 모든 게임이 소유한 모든 기기에서 작동함.
          + 콘솔 제공 업체가 더 나은 가성비를 제공한다고 주장할 수 있음.
          + 사람들이 닫힌 생태계에 자발적으로 참여하는 이유를 이해하지 못함.
     * 서비스의 가치와 유지 비용 간의 균형에 대한 실용적 관점
          + 사용자에게 제공하는 가치가 유지 비용보다 낮아지면 서비스는 지속될 수 없음.
          + 반복되는 비용이 없거나, 여전히 개발 및 판매되는 게임과 같은 추가 가치를 제공하지 않는 서비스는 오래 지속되기 어려움.
     * 소비자의 선택권과 닌텐도에 대한 비판적 시각
          + 소비자들이 지갑으로 투표해야 하며, 문제가 있는 회사에 돈을 계속 지불하는 것에 대한 의문 제기.
"
"https://news.hada.io/topic?id=12608","모든 주요 약국 체인, 정부에게 영장 없는 의료 기록 접근 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  모든 주요 약국 체인, 정부에게 영장 없는 의료 기록 접근 허용

   이 요청은 실제 기사의 내용을 요약하는 것이 아니라, 주어진 웹 페이지의 기술적인 메시지를 다루고 있습니다. 그러므로 요약할 기사 내용이 제공되지 않았기 때문에 요약할 내용이 없습니다.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 약물 유용 조사 경험: 댓글 작성자는 처방 약물이 의도된 의료 목적 외에 사용될 때 조사를 진행했음. 이는 의사가 비의료적 목적으로 처방약을 판매하거나 의료진이 약을 훔치는 경우를 포함함.
          + 처방 사기의 중요성: 가장 큰 문제는 사람들이 의사의 처방전을 훔치거나 위조하는 처방 사기였음. 일부는 이를 더 미묘하게 접근함.
          + 의심스러운 처방의 발견: 30mg 옥시코돈 90정 처방은 일반적으로 심각한 통증을 겪고 있거나 죽어가는 환자에게 처방됨. 건강한 20대가 이를 처방받으면 의심을 삼.
          + 처방 모니터링 프로그램: 모든 처방은 처방 모니터링 프로그램에 기록되며, 의사는 자신의 이름으로 처방된 모든 약물의 목록을 볼 수 있음. 이는 조사에 매우 중요한 도구였음.
          + 조사 과정: 의심스러운 처방을 발견하면 관련 의사들과 연락을 취해 진위를 확인하고, 이 과정에서 더 많은 의심스러운 처방을 발견함.
          + 법적 권한과 개인 정보 보호: 법적으로 의심스러운 활동이 보고된 경우에만 의료 기록을 조사할 수 있음. 무작위 문서 요청이나 개인 정보 조회는 불법임.
          + 약국 기록 요청: 주 법은 영장 없이 약국 기록을 요청할 수 있는 권한을 부여함. 대부분의 약사는 주저 없이 협조함.
     * 두 번째 댓글 요약:
          + 전직 연방 법 집행관의 경험: 댓글 작성자는 과거에 영장 없이 의료 기록에 접근한 경험이 있음.
          + 공공 안전과 범죄 법률: 해안 경비대에서 근무하며 공공 안전과 범죄에 관한 두 가지 법률 하에 법 집행 권한을 가졌음.
          + 사건 조사와 소환장: 연방 수역에서 사고가 발생하면 공공 안전 위협을 조사하는 것이 첫 번째 임무였으며, 이는 소환장 발급 권한을 포함함.
          + 법적 권리와 조사 전환: 공공 안전 조사가 개인의 범죄 책임 가능성으로 넘어가면 조사가 범죄 조사로 전환되었음을 개인에게 고지해야 하며, 이때부터는 영장이 필요함.
          + 병원에서의 조사: 사고에 연루된 개인이 병원에 있을 때, 그들의 이야기를 듣고 부상을 확인하기 위해 병원을 방문해야 했음.
          + 남용 가능성 인정: 법 집행 공동체 대부분이 직무를 수행하려고 하지만, 이러한 권한이 자주 남용될 가능성을 인정함.
     * 세 번째와 네 번째 댓글은 해커뉴스의 관련 스레드와 TechDirt의 기사 링크를 제공함.
     * 다섯 번째 댓글 요약:
          + 정부의 권한 남용: 정부가 제3자를 통해 권한을 남용할 수 있다는 의견을 표현함.
     * 여섯 번째 댓글 요약:
          + 의료 산업의 통합 문제: 의료 산업의 통합이 매우 나쁜 현상이라고 지적하며, 이러한 추세의 최종 결과에 대해 우려를 표함.
     * 일곱 번째 댓글 요약:
          + 피임약 처방에 대한 법적 문제: 일부 주에서 피임약 처방을 불법화하고 이를 처방받은 사람들을 소급적으로 처벌할 수 있다는 우려를 표함.
          + 약물 합법화와 중독 치료: 모든 약물을 합법화하고 중독 문제가 있는 사람들이 쉽게 도움을 받을 수 있어야 한다고 주장함.
          + 약국의 개인 정보 보호: 약국이 의사의 처방을 쉽게 확인할 수 있어야 하며, 모든 관련자의 개인 정보를 침해하지 않아야 함을 강조함.
          + 처방전 처리 시간 문제: 2023년에도 처방전을 처리하는 데 30분이 걸리는 것에 대한 불만을 표현함.
"
"https://news.hada.io/topic?id=12594","심리작전에 당한 당신 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           심리작전에 당한 당신 [비디오]

군사 및 정부의 심리작전 역사

     * 군사 및 정부의 심리작전(PSYOPS)이 어떻게 인공지능(AI)과 생성 미디어의 미래를 설명하는지에 대한 역사적 관점 제공.
     * 마음을 조종하고, UFO, 마법, 원격 조종 좀비 등의 주제를 다루며, 이러한 주제를 탐구하는 CTF/ARG 게임 'CYCLOPS' 참여 코드 제공.

PSYOP 자본주의 시대

     * 인터넷과 시장에서 AI 생성 콘텐츠, 소셜 미디어 영향력 작전, 마이크로 타게팅 광고, 만연한 감시가 일반적이 되면서, PSYOP 자본주의 시대에 진입함.
     * 이 시대는 각 개인을 '타겟된 개인'으로 변모시키기 위한 인식 조작을 통한 환각을 설계함.
     * 현실을 변형하는 군사 및 정보 프로그램의 비밀 역사를 탐구하며, 이는 환상적인 현재의 선구자임.

게임 ""CYCLOPS""

     * 참석자들에게 제공되는 등록 코드를 통해 ""CYCLOPS""라는 CTF/ARG 게임 참여 가능.
     * 게임은 심리작전과 마음 조종의 주제를 상호작용하는 파라픽셔널(parafictional) 내러티브를 통해 탐구함.
     * 게임은 냉전 초기 CIA의 은폐된 인지전 프로그램의 맥락에서 진행됨.

GN⁺의 의견

     * 이 기사는 심리작전과 인공지능, 생성 미디어의 미래에 대한 흥미로운 역사적 관점을 제공함.
     * PSYOP 자본주의 시대에 대한 설명은 현대 사회에서 개인의 인식이 어떻게 조작될 수 있는지에 대한 중요한 통찰을 제공함.
     * ""CYCLOPS"" 게임은 참가자들에게 교육적이고 상호작용적인 경험을 제공하며, 복잡한 주제를 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 기술에 대한 과도한 신뢰

     기술에 대해 배운 것 중 하나는 사람들이 기술에 너무 많은 믿음을 두고 있다는 것임. 광고 시뮬라크르를 구축할 수 있는 충분한 기술이 있다고 믿고 싶어 하며, 정부와 대형 기술 회사가 전지전능한 단일체라고 생각하고 싶어 함. 하지만 실제로 그렇다면 증거를 남기고 몇 달 전에 폭로하는 내부고발자들을 어떻게 잡지 못할까?
     * 30C3 컨퍼런스와 심리전

     30C3에서 'Seeing The Secret State: Six Landscapes'라는 발표를 듣고 매료되었음. 최근 발표에서 심리전에 대한 흥미로운 생각들이 있었지만, 발표가 좀 더 길고 깊이 있었으면 좋겠다는 바람. 추가적인 자료 추천을 요청함.
     * 희망을 주는 비디오

     Veratasium의 'What The Prisoner's Dilemma Reveals About Life, The Universe, and Everything' 비디오를 보고 적어도 약간의 희망을 느낌. 인지 편향을 인식하는 연습이 필요하며, 위키피디아에서 시작할 수 있음.
     * 근거 없는 추측

     터무니없는 추측에 대한 비판. 예를 들어, 악의적인 기업들이 AI 여자친구를 통해 몬스터 에너지 음료 구매를 제안하게 할 것이라는 주장. 해커뉴스에 이런 종류의 음모론자들이 많다는 것이 부끄러움.
     * 다운로드 가능한 비디오와 오디오에 대한 감사

     CCC에 감사를 표하며, 비행 중에 볼 수 있도록 비디오와 오디오를 다운로드함. (단, 승객이며 조종사가 아님.)
     * 발표 자료

     발표의 전사본 링크 제공.
     * 가짜 리뷰 문제

     구글 지도에서 '딥 티슈 마사지'를 검색했을 때 가장 관련성 높은 리뷰가 처음에는 정상적으로 보였으나 마지막 단락에서 가짜 리뷰임을 알게 됨. 구글이 분명한 가짜 리뷰를 감지하고 필터링하는 데 어려움을 겪고 있다면, 사회 전반에 좋지 않은 징조임.
     * 애니메이션 효과에 대한 관심

     체인이 끊어지는 애니메이션 효과가 멋졌음. 누가/어떻게 만들었는지, 점진적 효과에 대한 호감을 표함.
     * 발표의 부족한 내용

     발표에서 실질적인 내용이 거의 없으며, 무서운 비디오와 사진을 보여주고 생각하지 않으면 합리적으로 보일 수 있는 극단적인 주장을 함. 예를 들어, ""AI 콘텐츠 생성 이후 구글은 기본적으로 쓸모없게 되었다""고 말하는데, 지난 10년 동안 덜 유용해졌다고는 할 수 있지만 ""기본적으로 쓸모없다""는 과장된 표현임.
     * Q&A 섹션의 발언

     발표자가 Q&A 섹션에서 발표의 일부에서 조금 연기를 하려고 했다고 언급함. 발표자의 배경은 예술 분야이며, 형식과 내용이 같은 것으로 생각하려고 노력함. 발표가 매우 재미있고 잘 실행되었다고 평가함.
"
"https://news.hada.io/topic?id=12558","Marmot - 분산 SQLite Replicator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Marmot - 분산 SQLite Replicator

     * Leaderless 이면서 Eventual Consistency를 유지하는 분산 SQLite 리플리케이터
          + 기존 rqlite,dqlite,LiteFS등과 달리 프라이머리가 없음. 모든 노드가 로컬 DB를 변경 가능
     * Fault-Tolerant인 NATS JetStream 기반으로 만들어진 CDC 및 복제 파이프라인으로 노드간 Robust 한 복제 DB 구축
          + 트리거를 이용하여 변경사항을 캡쳐하고 NATS로 스트리밍
     * SQLite 기반으로 부하가 많은 사이트를 운영중이라면, 복제 노드를 추가하여 쉽게 확장 할 수 있음
     * 기존 SQLite 어플리케이션 로직을 변경할 필요가 없음
"
"https://news.hada.io/topic?id=12574","개발자의 학습과 성장 - 글 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           개발자의 학습과 성장 - 글 버전

   이전에 이미 긱뉴스에 공유된 발표 자료(https://news.hada.io/topic?id=6797)를 글로 정리해봤습니다.
     * 개발자의 고민
          + 무엇을 공부해야 할까?
          + 일정 계산은 어떻게 할까?
          + 잘하는 개발자란 뭘까?
          + 내가 공부한 것을 어떻게 활용해야 할까?
          + 내가 성장하고 있는게 맞을까?
     * 전략적인 학습 필요
          + 진단, 학습, 산출물
     * 진단
          + 개발의 세 가지 영역
               o 사고, 기술, 과학
               o 사고 : 논리적, 추상적, 구조적 사고에 대한 영역
               o 기술 : 생각한 것을 그대로 코드로 잘 옮길 수 있는 능력
               o 과학 : 컴퓨터 과학에 대한 지식
          + 세 가지 영역은 서로에게 시너지 효과를 준다
               o 추상화, 예외 처리, 최적화 등
          + 부족한 부분을 파악할 필요가 있다
               o 어떠한 문제가 반복된다면 내가 부족한 부분이라는 뜻
     * 학습
          + 사고
               o 항상 의심하고 비교하고 분석하는 것을 통해 연습 가능
          + 기술
               o 코드를 잘 짜고 싶다면 최대한 많이 코드를 작성하는 것이 중요, 라이브러리, 프레임워크 같은 도구는 공부할 때 공식 문서를 볼 것
          + 과학
               o 기반 지식이기 때문에 쉽고 빠르게 익힐 방법이 없음
               o 꾸준히 학습하되 나에게 어떤 도움이 되는지 알아두는 것이 중요
          + 패턴 학습
               o 업무에서 반복적으로 사용되는 패턴
               o 패턴을 눈치채면 그 즉시 정리해서 기록하기
               o 안 해봤던 것 하기
               o 공개된 소스 참고하기
               o 실제로 적용하기
     * 산출물
          + 지식을 정리하는 것과 무언가를 만드는 것
          + 지식을 정리하는 것은 내가 추상적으로 아는 것을 더 구체화하는 과정
               o 다른 사람에게 공개해야 한다는 불편함이 성장을 돕는다
          + 무언가를 만드는 것은 내가 배운 지식을 실제로 활용해 보는 경험
               o 실제 사례를 간접 체험할 수 있다는 것
     * 글의 주제에서 벗어나지만 소프트 스킬 또한 중요하다

   주니어들 교육용으로 참 좋은 내용

   감사합니다 !
"
"https://news.hada.io/topic?id=12507","휴먼라이츠워치 주장: 메타, 전 세계적으로 친팔레스타인 의견 검열","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  휴먼라이츠워치 주장: 메타, 전 세계적으로 친팔레스타인 의견 검열

메타, 팔레스타인 지지 내용에 대한 전 세계적 검열 주장

     * 인권단체는 페이스북과 인스타그램이 팔레스타인을 지지하는 내용에 대해 '여섯 가지 주요 검열 패턴'에 일관되게 참여한다고 주장함.
     * 메타가 이스라엘-가자 전쟁 발발 이후 팔레스타인 지지 콘텐츠에 대한 ""체계적이고 전 세계적인"" 검열에 참여했다고 인권 감시단체가 보고함.
     * 보고서는 메타가 게시물, 스토리, 댓글 삭제, 계정 비활성화, 다른 사용자의 게시물과의 상호작용 제한, 그리고 '섀도우 배닝'을 포함한 팔레스타인 지지 콘텐츠에 대한 부당한 검열 패턴을 보여준다고 지적함.

메타의 반응

     * 메타는 실수를 인정하면서도 자신들이 특정 목소리를 의도적이고 체계적으로 억압한다는 주장은 거짓이라고 반박함.
     * 메타는 이스라엘과 팔레스타인과 관련된 문제에 대한 인권 실사를 공개적으로 발표한 유일한 회사라고 주장함.
     * 메타는 자사의 정책이 모든 사람에게 목소리를 제공하면서 동시에 플랫폼을 안전하게 유지하도록 설계되었다고 강조함.

기술적 편향 문제

     * 메타 제품 사용자들은 프로-이스라엘 콘텐츠에 유리하고 프로-팔레스타인 게시물에 불리한 기술적 편향을 문서화했다고 주장함.
     * 인스타그램의 번역 소프트웨어는 ""팔레스타인""이라는 단어 뒤에 오는 아랍어 구절을 영어로 ""팔레스타인 테러리스트""로 잘못 번역함.
     * 왓츠앱의 AI는 팔레스타인 소년과 소녀들의 이미지를 생성할 때 총을 든 만화 캐릭터를 만들었지만, 이스라엘 어린이들의 이미지에는 무기가 포함되지 않았음.

GN⁺의 의견

     * 이 보고서는 소셜 미디어 플랫폼에서의 표현의 자유와 검열 문제에 대한 중요한 논의를 제기함. 이는 사용자들이 자신의 목소리를 자유롭게 나눌 수 있는 권리와 플랫폼의 콘텐츠 관리 책임 사이의 균형을 찾는 것이 얼마나 복잡한지를 보여줌.
     * 기술적 편향 문제는 인공지능과 자동화된 시스템이 사회적, 문화적 맥락을 어떻게 잘못 해석할 수 있는지에 대한 예시를 제공함. 이는 기술 개발에 있어서 인간의 감독과 지속적인 검토의 중요성을 강조함.
     * 이 기사는 전 세계적으로 영향력이 큰 기업들이 어떻게 국제적인 갈등에 연루될 수 있는지, 그리고 그들의 정책과 행동이 전 세계 사용자들에게 어떤 영향을 미치는지에 대한 흥미로운 사례를 제공함.
"
"https://news.hada.io/topic?id=12500","그들은 당신이 영화가 어떤 모습인지 잊게 하고 싶어합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    그들은 당신이 영화가 어떤 모습인지 잊게 하고 싶어합니다

영화의 본래 모습을 잊게 만드는 사람들

     * 최근 '트루 라이즈(True Lies)'의 영상 전송은 일부 사람들이 딥러닝 알고리즘을 사용하는 것을 중단해야 함을 보여줌.
     * AI 업스케일러를 통해 오래된 영상이 처리되는 것은 대체로 끔찍한 결과를 초래함.
     * 이러한 영상은 때로 색상이 추가되거나 초당 60프레임으로 보간되기도 하지만, 일관되게 형편없는 결과물이 됨.

'트루 라이즈'의 변형된 전송

     * '트루 라이즈'는 아놀드 슈워제네거가 주연한 1994년의 액션 코미디 영화임.
     * 이 영화의 최근 전송은 인공지능이 생성한 이미지의 불쾌한 특징을 드러냄.
     * 영화의 피부나 사물의 표면이 너무 매끄럽고 날카로워 보이는 등의 문제가 발생함.

다른 영화들의 전송 상태

     * '에일리언스(Aliens)'와 '어비스(The Abyss)'의 전송은 '트루 라이즈'보다는 낫지만 여전히 문제가 있음.
     * '타이타닉(Titanic)'의 최근 전송도 비슷한 처리를 받아 온라인에서 혼합된 반응을 얻음.

기계 학습의 과도한 사용

     * 이러한 '복원' 작업을 담당한 곳은 피터 잭슨의 윙넛 필름스(WingNut Films)의 자회사인 파크 로드 포스트(Park Road Post)임.
     * 잭슨의 '그들은 다시 오래되지 않을(They Shall Not Grow Old)'과 '비틀즈: 겟 백(The Beatles: Get Back)' 다큐멘터리에서 기계 학습의 공격적인 사용이 있었음.
     * 이러한 작업들은 시간이 지남에 따라 점점 더 나빠 보이는 경향이 있음.

AI 기술의 부적절한 사용

     * AI 기술은 적절한 영상 소스 처리 대신에 사용되는 경우가 많으며, 이는 전문가들에게도 형편없는 결과로 보임.
     * 좋은 아카이브 작업은 많은 지식과 노동을 필요로 하며, 잘 수행될 때 예술적임.

'트루 라이즈'의 AI 처리 불필요성

     * '트루 라이즈'는 AI를 통과할 필요가 없었음에도 불구하고 AI 처리를 거침.
     * 이는 영화를 더 나은 방향으로 개선하는 것이 아니라 기술을 사용하기 위한 목적으로 보임.

감독의 영화에 대한 잘못된 판단

     * 때때로 감독들이 자신의 영화가 어떻게 보여야 하는지에 대해 잘못된 판단을 내리는 경우가 있음.
     * 제임스 카메론은 이러한 복원 작업을 직접 승인했음.

영화 복원의 본질

     * 영화 복원의 본질은 다양하며, 때로는 새로운 기술에 의해 복원이 아닌 파괴적인 작업이 될 수 있음.
     * 영화 보존을 이윤 추구와 분리하는 것이 필요할 수 있음.

GN⁺의 의견

     * 최근의 영화 전송은 AI 기술의 과도한 사용으로 인해 영화의 본래 모습을 훼손하는 결과를 초래함.
     * 이러한 문제는 영화 제작자들이 기술에 의존하여 영화의 진정한 가치를 잃어버리는 경향이 있음을 보여줌.
     * 영화 복원과 보존은 기술의 발전과 함께 신중하게 접근해야 하며, 영화의 원래 모습과 질감을 존중하는 것이 중요함.

        Hacker News 의견

     * 한 사용자는 자신이 영화 전문가는 아니지만 취향이 있다고 생각하며, 최근 비틀즈 프로젝트를 보고 여러 번 눈물을 흘렸다고 말함. 이 사용자는 자신의 취향에 대해 의문을 제기하며, 블로그 작성자가 비교 이미지를 제공하지 않아 독자들이 직접 판단할 기회를 갖지 못한 것에 대해 비판함. 그러나 이 사용자는 업스케일링과 색상화된 영상을 개인적으로 좋아하며, 이는 그의 가족에게 크리스마스 전통과 같다고 언급함.

          + 영화에 대한 전문 지식은 없지만, 자신의 취향이 있다고 생각하는 사용자의 경험.
          + 비틀즈 프로젝트에 감동받아 눈물을 흘린 경험 공유.
          + 블로그 작성자가 비교 이미지를 제공하지 않아 독자들이 직접 판단할 기회를 주지 않았다고 비판.
          + 업스케일링과 색상화된 영상에 대한 개인적인 애정 표현.

     * 또 다른 사용자는 영상 처리 기술에 대해 설명하며, 노이즈 제거, 업스케일링, 얼굴 교체 등 세 가지 기술이 언급된 영상에 모두 사용되지 않았다고 지적함. 특히 'They Shall Not Grow Old'는 색상화와 시간 조정이 이루어졌다고 언급하며, 100년 전 영상의 특성에 대해 설명함.

          + 영상 처리 기술에 대한 설명: 노이즈 제거, 업스케일링, 얼굴 교체.
          + 'They Shall Not Grow Old' 영화의 색상화와 시간 조정에 대한 언급.

     * 세 번째 사용자는 영화 애호가를 위한 글처럼 느껴지며, 저자가 문제점을 보여주는 비디오로 시작했어야 한다고 말함. 비틀즈의 'Now and Then' 비디오를 보고 나서야 글의 내용을 이해했다고 언급함.

          + 영화 애호가를 대상으로 한 글의 느낌.
          + 문제점을 시각적으로 보여주는 것의 중요성.

     * 네 번째 사용자는 '취향'보다는 '순수성'과 '진실성'의 관점에서 접근하며, AI 업스케일링과 색상화, 보간 등은 원본에 없던 정보를 추가하는 것이라고 지적함. 이는 진정한 미디어를 보는 것이 아니라고 주장함.

          + AI 업스케일링과 색상화가 원본에 없던 정보를 추가한다는 비판.
          + 순수성과 진실성에 대한 중요성 강조.

     * 다섯 번째 사용자는 영화 산업이 해적판에 뒤처지고 있다고 언급하며, 과거에는 고해상도 스크린에 맞춰 필터링과 업스케일링이 유행했지만, 이제는 예술적 결정이 중요하다고 강조함. 많은 사람들이 취향이 없으며, 품질보다는 제품에 대한 관심이 중요하다고 비판함.

          + 영화 산업과 해적판의 비교.
          + 예술적 결정과 취향의 중요성에 대한 강조.

     * 여섯 번째 사용자는 AI 업스케일링이 강력한 노이즈 제거 과정을 공유한다고 언급하며, 이로 인해 영화가 '왁스 같은' 느낌을 준다고 말함. 또한, 4K 스트리밍 서비스의 비트레이트에 대해 설명하며, 스마트폰의 자동 노이즈 제거가 일부 비전문가들의 반발 부족에 기여했을 수 있다고 언급함.

          + AI 업스케일링과 노이즈 제거 과정에 대한 설명.
          + 스트리밍 서비스의 비트레이트와 스마트폰의 영향에 대한 언급.

     * 일곱 번째 사용자는 UHD Blu-ray 재스캔에 대한 시장에서의 경험을 공유하며, 잘 전송된 영상이 숨막힐 정도로 아름답다고 언급함. 좋은 아카이브 관행은 많은 지식과 노동을 필요로 하며, 잘 수행될 때 예술이라고 말함.

          + UHD Blu-ray 재스캔에 대한 개인적인 경험.
          + 아카이브 관행의 중요성과 예술성에 대한 언급.

     * 여덟 번째 사용자는 업스케일링이 다른 시대의 삶에 대한 생각 실험으로 재미있을 수 있으며, 원본 영화에 큰 영향을 미치지 않는다고 생각함. 또한, 'They Shall Not Grow Old'는 최근 AI 붐 이전에 만들어진 실험적이고 야심찬 영화였으며, 오늘날 더 잘 만들어질 수 있을 것이라고 언급함.

          + 업스케일링에 대한 개인적인 견해.
          + 'They Shall Not Grow Old' 영화의 제작 시기와 가능성에 대한 언급.

     * 아홉 번째 사용자는 물리적 미디어를 디지털 라이브러리로 변환할 때 영화 전송의 압축 문제를 즉시 알아차릴 수 있다고 말함. 필름의 곡물과 노이즈가 잘 압축되지 않기 때문에, AI 업스케일링된 영화가 스트리밍 서비스의 대역폭을 절약하기 위해 만들어졌을 가능성이 있다고 추측함.

          + 디지털 라이브러리로의 변환과 압축 문제에 대한 경험.
          + AI 업스케일링된 영화의 목적에 대한 추측.

     * 열 번째 사용자는 블로그 포스트의 의견에 대해 강한 감정은 없지만, 저자의 글쓰기를 칭찬함. 개인적으로 관심이 없는 주제에 대해 처음부터 끝까지 읽은 글이라고 언급함.

          + 저자의 글쓰기에 대한 칭찬.
          + 주제에 대한 개인적인 관심 부족에도 불구하고 글을 읽게 된 경험 공유.
"
"https://news.hada.io/topic?id=12519","Endurain: 자체 호스팅이 가능한 Strava 형 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Endurain: 자체 호스팅이 가능한 Strava 형 서비스

프론트엔드 환경 변수

     * 프론트엔드에 필요한 환경 변수와 기본값, 필수 여부를 나타내는 표.
     * BACKEND_PROTOCOL, BACKEND_HOST 등의 변수 포함.
     * 필수가 아닌 변수는 오류를 방지하기 위해 설정 권장.

백엔드 환경 변수

     * 백엔드 설정을 위한 환경 변수와 기본값, 필수 여부를 나타내는 표.
     * DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE 등의 변수 포함.
     * SECRET_KEY, STRAVA_CLIENT_ID, STRAVA_CLIENT_SECRET, STRAVA_AUTH_CODE는 필수로 설정해야 함.

MariaDB 컨테이너 환경 변수

     * MariaDB 컨테이너 설정을 위한 필수 환경 변수와 기본값을 나타내는 표.
     * MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD 등의 변수 포함.
     * 백엔드 컨테이너에 설정한 값과 일치해야 함.

Strava 통합

     * Strava API 통합을 위해 인터넷에 엔드포인트가 공개되어야 함.
     * Strava 계정을 사용하여 API 애플리케이션 생성 필요.
     * Strava 개발자 문서에서 추가 정보 제공.

   GN⁺의 의견
     * Endurain은 개인 호스팅이 가능한 Strava와 유사한 서비스로, 다양한 기술 스택을 활용하여 개발됨.
     * 프론트엔드와 백엔드에 필요한 환경 변수 설정이 중요하며, 이는 서비스의 안정적인 운영을 위해 필수적임.
     * Strava 통합 기능은 사용자들에게 더 많은 편의를 제공하며, 이는 Endurain 서비스의 매력적인 특징 중 하나임.

        Hacker News 의견

     * 사용자가 기부 기반의 ""오픈 소스""로 간주되는 https://intervals.icu로 서서히 이동하고 있음을 언급함. Strava보다 훨씬 낫다고 평가.
     * 웹 앱으로는 스마트워치에 의해 기록된 활동을 자동 추적하는 것이 불가능하다는 문제점을 지적함. Strava에 자동으로 가져온 후 Strava를 Endurain에 연결하는 것이 해결책으로 보임.
     * 개발자가 아닌 한 사용자가 ChatGPT의 도움을 받아 새로운 기술과 개념을 배우기 위해 시스템을 만들었으며, 실수를 했을 때 나중에 문제가 될 수 있다는 우려를 표함.
     * Endurain이라는 이름이 스페인의 유명한 사이클 선수 Miguel Induráin의 이름과 지구력(endurance)을 결합한 것으로 보임.
     * Endurain이 Strava에 데이터를 제공하기 전에 백업을 포함한 대체 프론트엔드로 보인다는 의견 제시.
     * Strava에 의존하지 않고 사용자가 만든 GPX 툴을 홍보하는 댓글. 이 툴은 GPX 트레이스가 있는 폴더에서 CLI 명령을 실행하고, 사용자가 JSON 파일에 정의한 세그먼트별로 성능을 나열할 수 있음.
     * Strava의 핵심 기능 중 하나는 세그먼트라고 언급. 사용자들은 최고 기록(KOMs)을 얻는 것에 관심이 없어도 시간이 지남에 따라 특정 도로 구간에서의 진행 상황을 비교하는 것이 유용하다고 느낌.
     * Gadgetbridge와 같은 모바일 툴과의 호환성에 대한 질문. 이 앱은 스마트워치용 독점 앱을 우회하고 상업 서비스에 건강 및 위치 데이터를 업로드하지 않아도 됨. 그러나 Garmin의 주요 스포츠 시계는 지원하지 않으며, USB를 통해 시계를 연결하고 컴퓨터에서 트랙에 접근해야 함(모바일 지원 없음).
     * Strava의 소셜 네트워크 측면이 주된 사용 이유라며, Fediverse와의 통합 여부를 묻는 댓글. Garmin Connect가 Strava보다 더 나은 분석 도구를 가지고 있지만 Endurain은 아직 시도해보지 않았다고 언급.
     * 개발자들이 서비스의 대안으로 오픈 소스를 제작하는 경향이 있지만, 그들의 README에는 제공하는 대안이 실제로 무엇인지에 대한 설명이 없다는 경향을 지적함. 대안이 무엇인지 모르는 사람은 운이 없다고 느낄 수 있음.
"
"https://news.hada.io/topic?id=12545","애플, 클라우드가 아닌 자체 하드웨어에서 직접 실행되는 AI를 원해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 애플, 클라우드가 아닌 자체 하드웨어에서 직접 실행되는 AI를 원해

Apple, AI를 클라우드가 아닌 하드웨어에서 직접 실행하려 함

     * Apple이 최근 연구를 통해 스마트폰에서 대규모 언어 모델을 실행하는 방법을 제시함으로써, 인공지능 분야에서 경쟁사들을 따라잡으려는 계획을 밝힘
     * 연구 논문 ""LLM in a Flash""는 현재의 계산 병목 현상에 대한 해결책을 제시하며, 제한된 메모리를 가진 기기에서 LLM을 효과적으로 추론하는 방법을 개척함
     * 이러한 접근 방식은 ChatGPT와 같은 앱을 구동하는 대규모 데이터 저장소가 사용자의 질문에 어떻게 반응하는지, 즉 추론하는 방법에 대한 길을 열어줌

Apple의 AI 연구와 시장 전망

     * Apple은 이미지 생성 모델인 Stable Diffusion을 자체 칩에서 실행할 수 있도록 하는 등, AI 연구에 있어서 새로운 움직임을 보임
     * 스마트폰 제조사와 칩 제조사들은 새로운 AI 기능이 스마트폰 시장을 부흥시킬 것으로 기대하고 있으며, Counterpoint Research에 따르면 2024년에는 AI 중심의 스마트폰이 1억 대 이상 출하될 것으로 예상됨
     * Apple은 Siri를 2011년에 출시했음에도 불구하고, OpenAI의 ChatGPT 출시 이후 Silicon Valley를 휩쓴 인공지능에 대한 열기에서 다소 소외되었다는 인식이 있음

기술적 도전과 개인정보 보호

     * 개인 기기에서 ChatGPT나 Google의 Bard와 같은 대규모 AI 모델을 실행하는 것은 기술적으로 매우 도전적인 일로, 스마트폰은 데이터 센터와 같은 방대한 컴퓨팅 자원과 에너지를 갖추고 있지 않음
     * 이 문제를 해결하면 AI 비서가 클라우드보다 더 빠르게 반응하고 오프라인에서도 작동할 수 있으며, 개인 기기에서 질문에 답함으로써 데이터를 클라우드로 보내지 않아도 되므로 개인정보 보호에도 도움이 될 수 있음

논문의 결론

     * Apple 연구원들은 논문 결론에서 다음과 같이 이야기함

     “우리의 연구는 현재의 컴퓨터 병목 현상에 대한 해결책을 제공할 뿐만 아니라 향후 연구를 위한 선례를 제시합니다. 우리는 LLM의 규모와 복잡성이 지속적으로 증가함에 따라 이 작업과 같은 접근 방식이 광범위한 장치 및 응용 프로그램에서 LLM의 잠재력을 최대한 활용하는 데 필수적이라고 믿습니다”

GN⁺의 의견

     * Apple의 이번 연구는 스마트폰 사용자들에게 더 빠르고 개인적인 AI 경험을 제공할 수 있는 가능성을 열어줌.
     * 개인정보 보호에 대한 사용자들의 우려를 감안할 때, 데이터를 클라우드가 아닌 개인 기기에서 처리하는 것은 많은 사람들에게 매력적인 대안이 될 수 있음.
     * 이 기술이 상용화되면, 사용자는 인터넷 연결 없이도 고급 AI 기능을 사용할 수 있게 되어, 스마트폰의 사용성과 편의성이 크게 향상될 것으로 기대됨.

        Hacker News 의견

     * 애플이 인공지능(AI) 분야에서 뒤처졌다고 말하는 것은 미친 짓이다.
          + OpenAI가 주목받고 있지만, 검색은 링크 광고와 데이터 판매에 기반을 두고 있어 AI에게 덜 유망하다.
          + 현재 ""큰"" AI는 훈련을 위한 클라우드 비용에 발목 잡혀 있으며, 대형 플레이어들은 소프트웨어를 하드웨어로 옮기기 위해 안간힘을 쓰고 있다.
          + OpenAI는 전 세계 상업 파트너들과 협력하며 AGI(일반 인공지능)에 대해 이야기하지만, 이는 중앙은행을 대체하는 암호화폐만큼 현실적이지 않다.
          + 한편, 애플은 4년 이상 기기에 신경 프로세서를 탑재해왔으며, AI 기능은 모든 마케팅 캠페인에 포함되어 있다.
          + VisionOS 증강현실은 AI 유틸리티를 위한 새로운 영역을 제공하며, 재미뿐만 아니라 원격 근무가 규칙이 되는 업무에도 목표를 두고 있다.
          + 애플은 존재하는 유일한 안전하고 개인정보를 보호하는 생태계이다.
     * 최신 iOS의 일부로 AI가 하드웨어에서 실행되는 것은 기쁘게 생각한다.
          + 운전 중 메시지를 받았을 때 Siri가 사진의 내용을 정확히 설명해준 경험을 공유한다.
          + 이 기능은 끝단에서 끝단까지(E2E) 암호화되어 있으므로, 메시지가 전송되는 동안이 아닌 로컬에서 식별되었을 것이다.
          + 이는 품질 향상 업데이트로서 흥미롭고, AI가 하드웨어에서 더 많은 처리를 할 수 있게 되면서 성장할 가능성에 대해 기대감을 표현한다.
     * Mistral 7B를 모바일 기기에서 사용해보라고 권장한다.
          + iPhone 15에서 해당 앱을 사용해보고 성능이 매우 좋다고 평가한다.
          + 단점은 앱이 전화기의 거의 모든 메모리를 필요로 하며, 다른 앱으로 전환하고 돌아오면 상태가 초기화되고 모델을 처음부터 다시 불러와야 한다.
     * 강력한 휴대폰/기기가 있는 현 세계에서 AI를 기기에서 실행하는 것이 다음 단계라고 생각한다.
          + 2021년 모델의 강력한 스펙을 가진 휴대폰을 사용하며, 애플이 비싼 AI 앱을 이러한 강력한 사용자 기기로 오프로드하길 원할 것으로 본다.
          + 이는 개인 데이터가 훈련에 사용되는 것을 원하지 않는 사람들에게 프라이버시 승리로 보이며, 사용하는 모델과 모델이 따르는 윤리에 대한 통제를 선호한다.
     * 애플의 CoreML 라이브러리는 몇 년 동안 존재해왔으며, BERT 모델을 포함한다.
          + iOS와 iPadOS에 BERT보다 더 발전된 트랜스포머 모델을 도입하기를 기대한다.
          + iPad Pro에는 16GB RAM이 있으며, 13B 모델을 실행할 수 있다.
          + 32GB Mac Mini를 구입한 후 6주 동안 실행할 수 있는 모델이 크게 향상되었다고 느낀다.
          + 미래에 대한 기대가 높다.
     * AI가 스마트폰의 새로운 업그레이드 주기를 만들어낼 수 있는 잠재력을 가지고 있다는 것이 흥미롭다.
          + AI 기능이 실제로 업그레이드를 정당화할지 여부는 미지수이며, 배터리 수명에 영향을 미칠 경우 가치 제안이 크게 변하지 않을 수도 있다.
     * AI가 개인정보 보호 위험을 제시하는 상황에서 로컬에서 실행하는 것이 최선의 방법이라고 생각한다.
          + 미래에 AI로 인지 능력을 10배 향상시키길 원하며, 이를 위해서는 정보가 뇌와 실시간으로 교환되어야 한다.
          + 클라우드 데이터 싱크에 연결하여 광고주와 스파이 기관이 생각을 엿보는 것을 원하지 않는다.
     * 애플이 AI/ML 옵션을 아이폰 사용자에게 제공하기 위해 인프라를 운영하는 비용을 절감한다.
          + 이는 계산을 분산시켜 비용을 절약하고 기기 제조에 이미 지출한 비용을 활용한다.
          + 데이터가 전화기를 떠나지 않으므로 소비자의 프라이버시를 제공한다.
     * 기기에서 AI가 주류가 되면 OpenAI와 같은 회사들이 어떻게 대응할지 궁금하다.
          + 비즈니스 모델이 API 접근에 기반을 두고 있으므로, 오프라인 모델을 판매하기 시작할 수도 있다.
          + 그러나 그렇게 되면 해적판 문제가 발생할 수 있다.
     * 애플이 최신 세대에서 신경 엔진에 대한 증분 다이 공간을 거의 할당하지 않았음에도 불구하고 기기에서 AI를 실행하려는 명시적인 의도를 밝혔다.
          + 이에 대한 몇 가지 가능한 설명이 있으며, 어떤 것이 사실인지 더 잘 아는 사람의 관점이 궁금하다.
          + 기존 하드웨어가 충분히 강력하다고 생각할 수도 있고, ANE의 활용도가 증가된 자원을 정당화하지 않을 수도 있다.
          + AI 계산을 벡터 연산과 같은 것들을 통해 다시 일반화할 계획일 수도 있다.
          + 가장 비관적인 시나리오로, 업그레이드를 강제할 필요가 있을 때 큰 증가를 위해 저장하고 있을 수도 있다.
"
"https://news.hada.io/topic?id=12599","게임용 무료 아이콘 제공 사이트 Game-icons.net","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    게임용 무료 아이콘 제공 사이트 Game-icons.net

프로젝트 소개

     * 무료 게임 아이콘의 지속적인 성장 컬렉션
     * 매주 새로운 심볼이 추가되며 직관적인 카테고리로 구성
     * 트위터 팔로우나 RSS 피드를 통해 최신 정보 업데이트 가능

SVG를 통한 쉬운 스타일링

     * 벡터 형식으로 다운로드 가능하여 색상, 회전 조정 및 효과 추가 용이
     * 무한 확대 및 저 메모리로 고해상도 인터페이스, 로고, 스텐실 등에 사용 가능

커뮤니티 지향

     * 비디오 게임 및 보드 게임 디자이너의 다양한 요구 사항을 GitHub 트래커를 통해 공유

열정 주도

     * 자체 제품을 사용하는 사람들에 의해 만들어져 깔끔한 경험 제공

저자 및 라이선스

     * Lorc, Delapouite 및 기여자들에 의해 제작
     * CC BY 3.0 라이선스 하에 배포

다운로드 및 태그

     * game-icons.net.zip 파일로 모든 아이콘 다운로드 가능
     * 건물, 동물, 무기, 상징, 몸 등 다양한 카테고리의 태그 제공

아이디어 및 요청

     * 최근 아이콘, 자주 묻는 질문, 무작위 아이콘 등의 정보 제공

   GN⁺의 의견:
     * 이 프로젝트는 게임 개발자와 취미로 게임을 만드는 사람들에게 무료로 아이콘을 제공하여 창의적인 작업을 지원함.
     * SVG 형식의 아이콘은 사용자가 쉽게 맞춤화할 수 있어 디자인의 유연성을 크게 향상시킴.
     * 오픈 소스와 커뮤니티 중심의 접근 방식은 사용자의 요구에 빠르게 반응하고 지속적으로 개선할 수 있는 기반을 마련함.

        Hacker News 의견

     * 한 사용자는 코딩을 배우기 시작했던 초기의 추억을 공유함. 중고등학교 시절인 90년대 후반과 2000년대 초반에 포럼과 메시지 보드에 몰두했으며, 이를 커스터마이징하는 것이 코딩을 스스로 배우는 주요 방법이었음. 친구들과 함께 RPG 기능을 구축했는데, 상점, 전투 시스템 등 다양한 커뮤니티 기능을 포함했음. XMLHttpRequest가 널리 알려지지 않았기 때문에 모든 동작은 전체 페이지를 새로고침해야 했음. 또한, CC 라이선스가 부여된 게임 자산 컬렉션이 없었지만, rpg-icons.com이라는 사이트에서 다양한 게임, 주로 RPG의 자산을 찾아 사용했음. 이러한 자산을 사용해 창의적인 작업을 하는 것은 법적으로 완전히 합법적이지는 않았지만 매우 즐거웠음. 이 사용자는 거의 20년 동안 게임 관련 작업을 하지 않았지만, 경력의 대부분은 웹 관련 작업임. 현재 코딩을
       배우는 아이들을 위해 CC 라이선스가 부여된 게임 자산이 존재하는 것에 대해 기쁨을 표현함.
     * 다른 사용자는 무료 2D 게임 자산을 제공하는 kenney.nl/assets를 추천함. 이 사용자는 해당 사이트와 아무런 관련이 없지만, 만족스럽고 감사한 사용자임.
     * 또 다른 사용자는 game-icons.net에서 제공하는 ""Studio""를 통해 아이콘을 더 많이 커스터마이징할 수 있다고 언급함. 이 도구는 데스크톱 브라우저를 사용할 때 활용할 수 있으며, 기본 아이콘을 필요에 맞게 조정할 수 있음. 그러나 복잡한 작업은 inkScape와 같은 전문 편집기를 사용해야 함을 강조함.
     * 한 기여자는 PromptFont에 정기적으로 기여하고 있으며, 게임에서 사용할 수 있는 다양한 게임패드 아이콘을 SVG 형식으로 제공함. 또한, 아이콘을 쉽게 볼 수 있는 웹사이트도 있음.
     * 한 사용자는 게임을 만들어본 적은 없지만, 내부 애플리케이션의 프로토타이핑을 위해 이 자원을 많이 사용했다고 함. MVP 이후에도 많은 아이콘이 여전히 사용되고 있음.
     * 다른 사용자는 opengameart.org와 openclipart.org를 추가적인 자원으로 추천함.
     * 한 사용자는 자신의 아이콘 검색 사이트를 홍보하며, 이 사이트에서 다양한 아이콘을 검색할 수 있음을 알림.
     * 한 사용자는 game-icons.net의 라이선스 조건에 대해 궁금해하며, 일본 외 지역에서 라이선스가 부여되지 않아 대부분의 세계에서 자유롭게 사용할 수 있는지에 대한 질문을 함.
     * 또 다른 사용자는 game-icons.net을 자주 사용하며, 펜 앤 페이퍼 게임에서 캐릭터나 진영의 로고/엠블럼을 만드는 데 유용하다고 함. PNG(투명 배경 옵션 포함)와 SVG 모두를 내보낼 수 있는 옵션이 있어 아이콘을 거의 바로 사용할 수 있음을 좋아함.
     * 한 사용자는 이모지를 사용해 게임을 만드는 데 약간 중독되었다고 공유함. 이러한 게임은 친숙하고 캐주얼한 느낌을 주며, 대부분 완성되지 않았지만 몇몇 게임은 잘 작동함.
"
"https://news.hada.io/topic?id=12559","DeskHop – 빠른 데스크탑 전환 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        DeskHop – 빠른 데스크탑 전환 기능

DeskHop - 빠른 데스크탑 전환

     * 무료이며 오픈 소스
     * 전환 시 지연이 거의 없음
     * 마우스 포인터를 컴퓨터 간에 드래그하여 전환 가능
     * 소프트웨어 설치 불필요
     * 저렴하고 구하기 쉬운 부품 사용 (15유로 미만)
     * 3D 프린터로 출력 가능한 스냅핏 케이스
     * 출력 간 완전한 갈바닉 절연
     * 리눅스, macOS, 윈도우에서 작동

작동 원리

     * 장치는 키보드/마우스와 컴퓨터 사이의 중개자 역할을 하며, 두 컴퓨터와 동시에 연결을 유지함
     * 사용자의 선택에 따라 마우스와 키 입력을 어느 컴퓨터로 전달할지 결정
     * 마우스를 다른 데스크탑으로 드래그하면 키보드도 자동으로 전환됨

마우스

     * 마우스 HID 리포트 디스크립터를 절대 좌표를 사용하도록 변경하고, 마우스 리포트(상대 이동)를 내부적으로 누적하여 정확한 위치를 유지
     * 다른 모니터 방향으로 모니터 영역을 벗어나려고 하면 Y 좌표를 유지하고 최대 X를 최소 X로 바꾼 후 출력을 전환
     * 커서가 다른 모니터에서 같은 높이에 나타나도록 하여 부드러운 전환 인식

키보드

     * USB 호스트로서 키보드를 주기적으로 조회하고, 사전에 설정된 단축키(Caps Lock 등)를 찾아 다른 출력으로 문자를 전달
     * 어느 출력을 사용하고 있는지 시각적으로 알 수 있도록 키보드 LED를 재활용하여 피드백 제공
     * 각 컴퓨터의 LED 상태를 기억하여 이전 상태 그대로 작업을 이어갈 수 있음

미리 빌드된 이미지 사용

     * 미리 빌드된 이미지 사용 가능
     * Pico 보드를 PCB의 A 슬롯에 연결하고 케이블을 연결하는 동안 보드의 버튼을 누르고 있으면 시스템에 USB 드라이브로 나타남
     * 해당하는 board_A.uf2 파일을 복사하고 B에 대해서도 반복

펌웨어 업그레이드

     * 옵션 1: 케이스를 열고, 각 Pico를 연결하는 동안 버튼을 누르고 있는 상태에서 올바른 uf2 파일을 복사
     * 옵션 2: 특정 키 조합(Right Shift, P, H, X, Left Shift)을 사용하여 BOOTSEL 모드로 전환하여 Picos를 부트로더 업그레이드 모드로 전환

기타 기능

     * 마우스를 미세하게 조정할 필요가 있을 때 Right ALT를 누르고 있는 동안 마우스를 움직이면 마우스 속도가 상당히 느려져 정밀한 작업 수행 가능

하드웨어

     * 회로는 저렴하고(개당 4.10유로), 수작업으로 납땜 가능하며, 대부분의 공급업체가 재고를 가지고 있는 두 개의 라즈베리 파이 Pico 보드를 기반으로 함
     * Picos는 아날로그 디바이스 ADuM1201 듀얼 채널 디지털 아이솔레이터(~3유로)를 사용하여 UART로 연결됨
     * RP2040의 프로그래머블 IO 마법을 사용하여 USB를 구현하는 놀라운 프로젝트 덕분에 USB 호스트와 디바이스로 작동할 수 있음

PCB

     * DIY 빌드를 가능한 한 간단하게 유지하기 위해 트레이스를 한쪽 면에만 두고 부품 수를 최소한으로 유지
     * USB D+/D- 차동 라인은 길이가 동일해야 하지만, 전체 길이가 일치하도록 PICO PCB 자체에 해당하는 GPIO 트레이스 길이 차이를 상쇄하기 위해 의도적으로 약간 비대칭

케이스

     * 3D 모델링에 능숙하지 않아 케이스는 간단하고 기본적이지만 목적에 부합
     * 인쇄하기 쉽고, 약 33g의 필라멘트를 사용하며, 몇 시간이면 완성
     * 수평 PCB 이동은 구멍을 통과하는 핀으로 막고, 수직 이동은 측면의 스냅핏 돌기로 막아 나사가 필요 없음
     * 마이크로 USB 커넥터는 케이스의 옆면에서 벗어나므로 약간 큰 구멍을 뚫으면 케이블이 들어갈 수 있음
     * 뚜껑은 스냅핏 디자인으로, 스크루드라이버 슬롯이 있어 열 수 있음
     * 상단의 표시는 오목하게 되어 있어 크레용 등으로 마감하여 대비를 높일 수 있음(또는 그대로 둘 수 있음)

재료 목록

     * 라즈베리 파이 Pico 2개, ADuM1201BRZ 1개, Cap 1206 SMD 100nF 2개, USB-A PCB 커넥터 2개, Headers 2.54 1x03 2개
     * 총 가격: 11.53유로
     * USB-A 커넥터는 Molex MX-67643-0910 또는 동일한 치수를 공유하는 더 저렴한 대체품 사용 가능
     * 추가 단계: PCB 제작(Gerber 제공, JLC가 몇 달러에 제작, 1.6mm 두께 선택), 케이스 3D 프린팅(stl 파일 제공, 약 33g 필라멘트 필요)

FAQ

    1. PCB와 아이솔레이터 없이 두 개의 Pico만 가지고 있으면 작동하나요?
          + 아이솔레이터가 권장되지만 없어도 작동할 수 있음.
    2. 모니터의 해상도가 다르면 어떻게 되나요?
          + 마우스 이동은 추상적 좌표 공간에서 이루어지며 컴퓨터가 물리적 화면과의 대응을 계산하므로 문제없이 작동해야 함.
    3. 이 제품을 어디서 살 수 있나요?
          + 판매하지 않으며 개인적인 비상업적 취미 프로젝트임.
    4. 마우스로 활성화된 화면이 변경될 때 키보드도 따라가나요(반대의 경우도 마찬가지)?
          + 예, 마치 하나의 컴퓨터처럼 작동하도록 만들어짐.
    5. 로지텍 유니파잉 리시버와 같은 키보드/마우스 콤보 동글과 함께 작동하나요?
          + 현재 버전에서는 마우스가 다른 포트에 연결되어 있다고 가정하므로 작동하지 않음. 로지텍 유니파잉 리시버의 동작을 조사하고 지원을 구현해야 함.
    6. 마우스와 키보드에 각각 별도의 무선 리시버가 있는 무선 마우스 및 키보드와 함께 작동하나요?
          + 이러한 경우에 대해 테스트되지 않았으므로 예상치 못한 문제가 발생할 수 있지만 이론적으로는 바로 작동해야 함.

단점

     * 주의: 이 기능을 사용하려면 두 컴퓨터가 연결되어 있고 켜져 있어야 함(각 보드는 연결된 컴퓨터로부터 전원을 공급받음).
     * 코드 정리, 리팩토링 등이 필요함.
     * 가끔 버그와 이상한 동작이 발생함.
     * 다양한 장치와 테스트되지 않아 사용자의 하드웨어에서 어떻게 작동할지 알 수 없음.
     * Pico-PIO-USB는 키보드 LED 제어를 지원하기 위해 패치되었으며, 일반적으로 이는 호스트 모드에서 TinyUSB에 의해 처리됨.

면책 조항

     * 이 프로젝트를 시도하는 사람은 모든 부상, 손해 또는 기타 결과에 대해 본인이 책임을 지지 않음을 이해하고 인정해야 함.
     * 안전이 중요하므로 필요한 예방 조치를 취하고 프로젝트 전반에 걸쳐 본인의 안녕을 책임지는 것이 중요함.
     * 감전, 화상, 스트레스 또는 화를 내지 말고 즐겁게 작업하고 즐기길 바람.

   GN⁺의 의견:
     * 이 기사는 두 대의 컴퓨터를 사용하는 사람들에게 매우 유용할 수 있음. 특히 하나의 키보드와 마우스를 공유하면서 작업 효율성을 높이고 싶은 사용자에게 매력적임.
     * 오픈 소스이며 DIY 접근 방식은 기술에 관심 있는 사람들에게 흥미로운 프로젝트가 될 수 있음. 사용자는 자신의 필요에 맞게 시스템을 조정하고 개선할 수 있음.
     * 이 프로젝트는 기술적 문제를 해결하려는 커뮤니티의 혁신적인 정신을 보여줌. 사용자가 직접 문제를 해결하고 그 과정을 공유함으로써 다른 사람들도 이점을 얻을 수 있음.

        Hacker News 의견

     * 클라이언트 소프트웨어 없이도 가장자리를 감지할 수 있다는 점이 주목할 만함.
          + 마우스 커서가 마법처럼 화면을 넘나들게 하기 위해 마우스 HID 보고서 디스크립터를 절대 좌표를 사용하도록 변경하고, 상대적인 움직임으로 들어오는 마우스 보고서는 내부적으로 누적되어 정확한 위치를 유지함.
          + SynergyKM/Barrier와 유사하게 작동하지만 클립보드 기능이나 클라이언트 소프트웨어는 필요하지 않음.
     * Synergy라는 소프트웨어 솔루션을 십여 년 넘게 사용해왔음. Wi-Fi를 통해 즉시 전환되며 Windows/Mac/Linux 간에도 작동함.
     * YouTube에서 특정 위치로 슬라이더를 정확하게 이동하려 할 때 마우스가 너무 민감하게 움직여서 손을 매우 조심스럽게 움직이는 경우가 있음.
          + YouTube에서는 커스텀 하드웨어 없이도 쉼표(,)와 마침표(.) 키를 사용하여 비디오를 프레임별로 스크럽할 수 있음.
     * Windows에서는 Microsoft Garage에서 개발하고 이제 Windows PowerToys의 일부인 Mouse Without Borders라는 도구를 사용할 수 있음.
     * 다른 유사한 프로젝트에 영감을 받아 자신만의 버전을 만들었음.
          + 한 프로그램은 Linux 데스크톱에서 실행되어 Linux 입력 서브시스템(evdev)에서 입력 이벤트를 수신함. 특정 키를 누르면 모든 이벤트를 소비하고 USB 시리얼을 통해 RPI Pico로 보냄. 키를 다시 누르면 수동 청취 모드로 전환됨.
          + RPI Pico는 Linux evdev 이벤트를 USB HID 이벤트로 변환하여 다른 Windows PC로 전송하도록 프로그래밍됨.
          + 결과적으로 Linux PC와 선택한 OS를 실행하는 PC 간에 즉시 전환할 수 있는 KM 스위치가 됨.
          + 하드웨어 초보자로서 단 2개의 전선만 필요했기 때문에 이 프로젝트가 다른 하드웨어 초보자들에게 좋은 시작 프로젝트라고 생각함.
     * USB 허브 4개를 구입해 키보드와 마우스를 전환했지만, 대부분의 장치가 너무 끔찍해서 하루에 여러 번 물리적으로 허브를 분리해야 함.
          + Synergy 소프트웨어를 사용하고 있으며 잘 작동하지만, 웹캠, 마이크, 오디오 등을 허용하는 제대로 된 KVM을 원함.
          + KVM 사용자는 확실히 더 나은 서비스를 받아야 함.
     * USB 3.0 스위치를 사용하여 두 PC 간에 마우스 및 키보드 입력을 전환하는 것이 큰 불만 중 하나임.
          + 팀즈 콜 미팅 중에 이름이 언급되거나 메시지를 받으면 갑자기 입력을 팀즈가 실행 중인 PC로 전환하기 위해 버튼을 찾아 헤매게 됨.
          + ESP32나 Rpi Pico W를 USB 스위치의 버튼 핀에 연결하고 HTTP 엔드포인트를 통해 두 기계 간의 입력을 전환할 수 있는 아이디어가 있었지만, 어떤 입력이 활성화되어 있는지 결정하는 방법을 찾지 못해 포기함.
     * 현재 KVM 스위치를 사용하고 있으며 전환하는 데 2-3초가 걸리기 때문에 대부분 다른 컴퓨터로 SSH 접속하여 tmux 세션을 사용함.
     * 이것은 놀라운 발전임.
          + Lin-Mac-Win 박스를 왼쪽에서 오른쪽으로 배열한 데스크톱 설정을 오랫동안 사용해온 사용자로서, SoC 디자인이 최근 몇 년 동안 확산됨에 따라 이러한 설정이 더 쉬워짐.
          + 현재 설정은 심천에서 직접 온 2x $250 Ryzen SoC Mac-mini 복제품과 M1 MBP로 구성됨.
          + 한때 번성했던 오픈 소스 KVM 솔루션의 세계가 비용 없이 작동하는 멀티플랫폼 오픈 소스 소프트웨어 KVM을 얻기 어려운 포크의 재귀적 악몽으로 퇴화한 것이 안타까움.
          + 현재 설정은 좋은 '올드' KVM 스위치를 사용하지만 버튼을 누르는 것이 방해가 됨.
     * Synergy는 소프트웨어만으로 이 문제를 잘 해결함. 무료 또는 오픈 소스는 아니지만 비교적 저렴함.
"
"https://news.hada.io/topic?id=12579","NY 타임즈 저작권 소송, OpenAI에 모든 GPT 인스턴스 삭제 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                NY 타임즈 저작권 소송, OpenAI에 모든 GPT 인스턴스 삭제 요구

뉴욕 타임즈, OpenAI에 저작권 소송 제기

     * 뉴욕 타임즈가 OpenAI 및 그 파트너사인 마이크로소프트를 대상으로 저작권 침해 소송을 제기함.
     * OpenAI가 개발한 GPT 기반 시스템이 뉴욕 타임즈의 기사를 재생산할 수 있다는 증거 제시.
     * 뉴욕 타임즈는 협상이 원활하지 않자 라이선스 문제로 OpenAI를 고소하기로 결정.

저널리즘은 비용이 많이 듦

     * 뉴욕 타임즈는 다양한 분야의 기자들을 통해 중요한 탐사 저널리즘을 수행하는 등 많은 비용을 지출함.
     * 신문사는 강력한 유료 벽을 통해 수익을 창출하며, 저작권 통지 및 이용 약관을 통해 저작물의 사용을 제한함.
     * OpenAI가 개발한 도구들이 이러한 수익 창출 방식을 침해하고 있다고 소송에서 주장.

훈련뿐만 아니라

     * 저작권이 있는 자료를 AI 시스템 훈련에 사용하는 것에 대한 여러 소송이 제기됨.
     * 뉴욕 타임즈의 소송은 훈련 중에 흡수된 자료가 사용 중에 어떻게 다시 나타나는지를 보여줌.
     * GPT-4가 뉴욕 타임즈의 기사를 거의 그대로 재생산하는 사례가 소송에 포함됨.

명성 및 기타 피해

     * AI의 '환각'으로 인해 뉴욕 타임즈의 명성에 피해를 주고, 인간의 건강에 부정적인 영향을 줄 수 있다고 소송에서 지적.
     * 뉴욕 타임즈 소유의 Wirecutter 기사에서도 저작권이 있는 내용이 무단으로 사용되고 수익 창출 링크가 제거됨.
     * 소송은 OpenAI와 마이크로소프트를 대상으로 저작권 침해, DMCA 및 상표권 위반 등을 주장함.

   GN⁺의 의견:
     * 이 기사는 AI 기술의 발전이 저작권과 같은 기존 법적 프레임워크와 충돌할 때 발생하는 문제를 잘 보여줌.
     * 저작권 소유자와 AI 개발자 간의 긴장 관계는 AI의 미래와 관련된 중요한 법적 및 윤리적 논의를 촉발할 수 있음.
     * 뉴욕 타임즈와 같은 주요 언론 매체가 AI 기술에 대해 법적 조치를 취하는 것은 AI의 콘텐츠 생성 및 배포 방식에 대한 규제와 지침을 설정하는 데 중요한 전례가 될 수 있음.

        Hacker News 의견

     * 뉴욕타임즈(NYT) 기사를 스크랩하여 제품을 만드는 것이 공정 이용에 해당하는지에 대한 질문
          + 법적으로 스크랩한 NYT 기사를 이용해 제품을 만들고, 이를 요약 및 재작성하여 유료로 제공하는 행위가 공정 이용에 해당하는지 의문을 제기함.
          + 검색 엔진과의 차이점을 언급하며, 검색 엔진은 원본을 대체하지 않고 참조를 제공하는 반면, 요약 제품은 NYT 구독 대신 사용될 수 있음을 지적함.
     * NYT의 저작권 소송에 대한 전망
          + 차세대 LLM(대규모 언어 모델)은 저작권이 없는 '합성' 데이터로만 훈련될 것이며, 저작권 침해 문제가 없을 것이라는 주장.
          + 미국이 이러한 기술 발전을 막을 수 없으며, 다른 국가들이 앞서 나갈 것이라는 의견.
          + AI 모델의 복잡한 진화와 데이터 출처의 불명확성으로 인해 저작권법이 이를 따라잡기 어려울 것이라는 관점 제시.
     * ChatGPT/Bing Copilot의 NYT 저작물 복사에 대한 평가
          + ChatGPT와 Bing Copilot가 NYT 기사를 그대로 복사하는 사례가 공정 이용에 해당하지 않는다고 생각함.
          + 소송은 단순한 복사뿐만 아니라 LLM 훈련을 위한 기사의 무단 복사가 저작권을 침해한다고 주장함.
          + 모델이 '변형적'일 수 있는지에 대한 법적 문제에 초점을 맞춰야 한다는 의견.
     * 소송에서 제기된 '공정 이용'에 대한 우려
          + 소수의 기업이 인터넷의 가치를 독점하게 될 위험성에 대한 우려 표명.
          + 법원이 이 분야에 대한 규칙을 설정하기를 바라는 의견.
     * NYT 저작권 소송 문서 링크 및 내용 요약
          + ChatGPT가 저작권이 있는 자료를 그대로 인용하는 사례를 명확히 보여주는 문서 링크 제공.
          + 저작권이 있는 자료를 얼마나 변형해야 저작권이 더 이상 적용되지 않을지에 대한 질문 제기.
          + OpenAI가 웹 인터페이스를 통해 저작권이 있는 자료의 유출을 차단할 수 있는 가능성에 대한 토론.
     * LLM이 인간과 유사하다는 개발자들의 인식에 대한 비판
          + LLM이 인간처럼 교육적 자료로 NYT 기사를 사용한다는 개발자들의 인식에 대한 비판.
          + LLM이 복잡하다는 사실이 저작권이 있는 콘텐츠가 소스 코드에 통합되었다는 사실을 변화시키지 않음을 지적.
     * 콘텐츠 회사들의 수익 창출 기대
          + NYT를 포함한 콘텐츠 회사들이 LLM 훈련에 자신들의 콘텐츠를 사용하는 것에 대해 수수료를 기대함.
          + Reddit, Discord, Twitter 등이 AI 훈련용 콘텐츠 판매를 고려하거나 이미 진행 중임을 언급.
     * NYT의 LLM 사용에 대한 법적 주장
          + NYT가 LLM의 훈련에 사용되는 방식이 저작권 침해에 해당한다고 주장하는 것에 대한 분석.
          + 대형 기업이 LLM 접근을 판매하는 것에 대한 비판과 개인이나 학술 연구 목적으로 사용하는 것에 대한 관용적 태도를 비교함.
     * 미래의 LLM 사용에 대한 예측
          + 미래에 LLM이 물리적 세계와 상호작용하는 기계체에 통합될 때, 저작권이 있는 자료를 읽는 것이 불법이 될 것이라는 주장.
          + 로봇이 TV 시청, 도서관 책 읽기, 인터넷 검색 등을 통해 저작권이 있는 콘텐츠를 기억할 수 없게 될 것이라는 관점 제시.
     * LLM이 '변형적 작업'으로 공정 이용에 해당해야 한다는 의견
          + LLM이 변형적 작업으로 공정 이용에 해당한다고 주장하는 개인적 의견.
          + 법적 시스템이 이에 대해 어떤 판단을 내릴지에 대한 관심 표현.
"
"https://news.hada.io/topic?id=12566","아마존 프라임 비디오, 1월 29일부터 광고 시작 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     아마존 프라임 비디오, 1월 29일부터 광고 시작 예정

아마존 프라임 비디오, 1월 29일부터 광고 시작

     * 아마존의 스트리밍 서비스인 프라임 비디오가 1월부터 영화와 TV 프로그램에 광고를 삽입하기 시작함.
     * 추가 요금을 지불하는 고객은 광고 없이 서비스를 이용할 수 있음.
     * 아마존은 이러한 변화를 통해 장기적으로 매력적인 콘텐츠에 대한 투자를 지속적으로 늘릴 수 있을 것이라고 밝힘.

프라임 비디오 구독료 변동 없으나 광고 회피 시 추가 비용 발생

     * 프라임 비디오 구독료는 변동이 없으나, 광고를 피하고자 하는 고객은 월 $2.99의 추가 비용을 지불해야 함.
     * 아마존은 또한 Freevee라는 무료 광고 지원 스트리밍 서비스도 운영 중임.
     * 경쟁 스트리밍 서비스들이 구독료를 인상하고 가장 저렴한 요금제에 광고를 도입하는 가운데, 아마존도 이러한 변화를 시행함.

프라임 멤버십의 다양한 혜택 강조

     * 프라임 멤버십은 무료 배송, 독점 스트리밍 비디오 콘텐츠, 다양한 구독 채널, 빠른 배송 옵션, 전용 쇼핑 이벤트, 광고 없는 음악 청취 등 다양한 혜택을 제공함.
     * 아마존은 약국 서비스, 건강 관리, 신선 식품 배달, 무제한 사진 저장, 게임 혜택, 독서 자료 등을 포함하여 프라임 멤버십의 가치를 강조함.
     * 추가적인 기능과 프로그램이 미래에 프라임 멤버들을 위해 추가될 예정임.

   GN⁺의 의견:
     * 아마존 프라임 비디오의 광고 도입은 스트리밍 서비스 시장에서 광고 모델이 점점 더 일반화되고 있음을 보여줌.
     * 이러한 변화는 사용자 경험에 영향을 미칠 수 있으며, 일부 사용자는 추가 비용을 지불하거나 다른 서비스로 이동할 수도 있음.
     * 아마존이 제공하는 다양한 멤버십 혜택은 고객 유지를 위한 전략으로 보이며, 이는 다른 스트리밍 서비스와의 경쟁에서 아마존이 가지는 독특한 이점임.
"
"https://news.hada.io/topic?id=12581","파이어폭스 싱크 실제 작동 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           파이어폭스 싱크 실제 작동 확인

크롬 동기화의 문제점

     * 크롬 동기화는 북마크, 비밀번호, 브라우징 기록, 탭, 결제 정보, 개인 정보, 설정 등을 동일한 구글 계정으로 로그인한 여러 기기에 걸쳐 동기화하는 기능.
     * 주소창에서 기록을 검색할 때 페이지가 제대로 나타나지 않는 문제와 탭 동기화 기능의 지연 문제 경험.

파이어폭스 동기화의 구원

     * 파이어폭스 동기화는 크롬 동기화와 기본적으로 같은 기능을 제공하지만, 실제로 잘 작동함.
     * 웹 페이지 이름을 주소창에 입력하면 기록에 있는 페이지가 바로 나타나고, 모든 기기의 기록을 포함함.
     * 탭 동기화가 매우 빠르며, 다른 기기의 탭을 즉시 볼 수 있음.

   GN⁺의 의견:
     * 이 기사는 웹 브라우저 간의 동기화 기능 비교를 통해 파이어폭스의 우수성을 강조함.
     * 사용자들이 기기 간 원활한 전환을 중요시하는 현대 디지털 환경에서 파이어폭스 동기화 기능의 신뢰성은 매우 중요한 장점임.
     * 크롬 사용자들이 경험할 수 있는 동기화 관련 문제들을 파이어폭스가 어떻게 해결하는지에 대한 구체적인 예시는 사용자들이 브라우저 선택에 있어 중요한 참고 자료가 될 수 있음.

   Hacker News 의견에 나온 것처럼 북마크를 무조건 고정된 디렉터리 구조로 사용해야 한다는 점만 빼면 정말 좋은 기능이에요.

        Hacker News 의견

     * Firefox Sync의 암호화 기능
          + Firefox Sync는 클라이언트 측에서 암호화되어 Mozilla가 복호화할 수 없는 암호화된 데이터를 저장함.
          + 법 집행 기관이 브라우징 기록을 얻기 위해 데이터 요청을 하지만 암호화 덕분에 거절당함.
          + 전 Mozilla 보안 직원의 주장
     * Firefox Sync의 북마크 분리 문제
          + Firefox Sync는 모바일과 PC 북마크를 분리하여 사용자 경험에 혼란을 줌.
          + 모바일에서 추가한 북마크가 별도의 모바일 북마크 폴더에 저장됨.
     * Firefox Sync의 갑작스러운 비밀번호 손실
          + Firefox Sync 사용 중 갑자기 대부분의 비밀번호가 사라짐.
          + 패턴이나 이유를 알 수 없으며, 리눅스 랩톱에서 전체 세트를 복구하여 문제 해결.
          + 이러한 손실은 발생해서는 안 됨.
     * Firefox Sync 사용 회피 및 프로필 구성
          + 클라우드에 브라우저 기록을 저장하고 싶지 않아 Firefox Sync를 피함.
          + 애드온과 userjs 플래그와 같은 프로필 구성만 원함.
          + .config 디렉토리의 구성과 내용이 혼합되어 있어 백업을 시도하지 않음.
     * 브라우저 동기화의 개인 정보 보호 및 보안 평가
          + Chrome Sync와 Firefox Sync의 개인 정보 보호 및 보안에 대한 평가를 참조할 것.
          + 관련 링크 제공: Chrome Sync privacy is still very bad 및 Can Chrome Sync or Firefox Sync be trusted with sensitive data?
     * Google 계정과 Chrome Sync의 문제
          + 개인, 비즈니스, 스팸용으로 세 개의 Google 계정을 사용함.
          + Chrome은 계정 전환 시 모든 새 탭에 영향을 미쳐 불편함.
          + Firefox는 Google 계정 정보에 접근해도 Firefox 로그인에 영향을 주지 않아 동기화가 더 잘 작동함.
     * 클라우드 없는 수동 동기화 메커니즘의 필요성
          + 클라우드 없이 수동으로 파일을 복사하여 동기화할 수 있는 메커니즘을 선호함.
          + 모바일 장치에서는 파일 시스템이 없어 이 방식이 작동하지 않지만, 클라우드를 거치지 않고 파일을 직접 가져오길 원함.
     * iOS Firefox 동기화 문제의 해결 여부
          + iOS 버전 Firefox의 동기화 문제가 해결되었는지 장기 사용자의 의견을 요청함.
          + 동기화 문제와 UI의 지속적인 변경으로 4년 전 Safari로 전환함.
     * 비밀번호 관리와 브라우저 동기화의 필요성
          + 비밀번호는 전용 비밀번호 관리자에 속함.
          + 탭 동기화를 비활성화하여 이전 세션의 작업이 현재 작업에 방해되지 않도록 함.
          + 브라우저는 매번 빈 상태로 시작되어 HTML과 JavaScript를 렌더링하는 단순한 도구여야 함.
     * Firefox Sync의 부정적 경험
          + Firefox Sync 사용 중 북마크 데이터베이스가 두 번 손상됨.
          + 손상된 데이터베이스 파일을 수동으로 삭제하고 동기화를 비활성화해야 했음.
          + 이 문제로 인해 Firefox에 대한 신뢰가 손상되었으며, Mozilla의 우선순위 부족으로 다시 사용하는 데 주저함.
"
"https://news.hada.io/topic?id=12580","아마존, 미신고 성분이 포함된 보충제에 대한 FDA 경고장 수령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아마존, 미신고 성분이 포함된 보충제에 대한 FDA 경고장 수령

경고장: 아마존에 대한 FDA의 위반 통보

     * 아마존이 미국 식품의약국(FDA)의 규정을 위반하여 미승인 신약 및 오인광고 약품을 유통함.
     * FDA가 아마존 웹사이트에서 구매한 에너지 증진 보조제 및 식품에 미신고 유해 활성 제약 성분이 포함되어 있음을 실험실 분석을 통해 확인함.
     * 해당 제품들은 미승인 신약으로 분류되며, 제품 라벨에 성분이 명시되지 않아 오인광고 약품으로 간주됨.

미승인 신약

     * 아마존에서 판매된 'MANNERS Energy Boost', 'Round 2', 'WeFun', 'Genergy', 'Big Guys Male Energy Supplement', 'Mens Maximum Energy Supplement' 등의 제품들이 식품의약품안전처(FDA)의 승인을 받지 않은 새로운 약품으로 분류됨.
     * 이 제품들은 질병의 진단, 치료, 완화, 예방 또는 신체 기능에 영향을 주는 것을 목적으로 하기 때문에 약품으로 간주됨.
     * 이러한 제품들은 안전하고 효과적이라고 일반적으로 인정받지 않으며, FDA의 사전 승인 없이는 불법적으로 유통될 수 없음.

오인광고 약품

     * 제품 라벨에는 포함된 PDE-5 억제제가 명시되어 있지 않아, 라벨이 오해의 소지가 있거나 소비자에게 중요한 정보를 제공하지 않는 경우 오인광고 약품으로 분류됨.
     * PDE-5 억제제는 심각한 안전 문제와 심각한 부작용 위험을 가지고 있으며, 특히 기저 질환이 있는 소비자들에게 위험할 수 있음.
     * 제품 라벨에 적절한 사용 방법이나 경고가 없어 사용자 보호를 위한 충분한 정보를 제공하지 못함으로써 오인광고 약품으로 간주됨.

섹션 301(ll)에 따른 금지 행위

     * FDA는 'X Max Triple Shot Energy Honey' 제품에 미신고된 타다라필이 포함되어 있음을 확인함.
     * 섹션 301(ll)에 따라, FDA 승인을 받은 약품이 첨가된 식품을 유통하는 것은 금지된 행위임.

GN⁺의 의견

     * 이 경고장은 아마존이 식품 및 보조제 시장에서 소비자의 안전을 보장하기 위한 규제를 준수해야 하는 중요성을 강조함.
     * FDA의 실험실 분석을 통해 확인된 미신고 약품 성분의 존재는 소비자들에게 잠재적인 건강 위험을 알리는 중대한 사안임.
     * 이 사건은 온라인 마켓플레이스가 제품의 안전성과 규제 준수에 대한 책임을 어떻게 관리해야 하는지에 대한 논의를 촉발할 수 있음.

        Hacker News 의견

     * FDA의 경고장이 특정 제품 목록에만 적용되지 않는다는 결론에 만족함. 그렇지 않으면 아마존이 언급된 제품을 제거하고 FDA가 계속 문제를 해결해야 할 수도 있음. 평균 소비자가 스스로를 보호하기 어려운 상황에서 FDA와 같은 규제 기관의 필요성을 강조함.
     * 아마존에서 구매한 제품은 섭취하거나 피부에 바르거나 몸과 장기간 접촉하지 않아야 함을 강조. 가짜 샴푸로 인한 심각한 두피 화상 경험을 통해 이를 배움.
     * 아마존에서 구입한 비타민 C 보충제가 순백색이고 무취/무미였으며, 분명 가짜 충전재였음에도 아마존이 리뷰를 부정확하다며 삭제함. 아마존이 검증 없이 무작위 수출업체가 제품을 판매하도록 허용하는 것은 안전하지 않음.
     * 아마존이 치약, 샴푸, 가글제 등 일반 제품의 성분 목록을 제거한 것을 발견함. 이 변경의 의도가 불분명하지만, 아마존이 의도적으로 성분 목록을 제거하여 문제가 생길 경우 책임을 회피할 수 있도록 하는 것으로 의심됨.
     * 아마존이 시장으로서의 보호를 받아서는 안 된다고 주장. 공동 배송(co-mingling)과 리뷰의 이전 가능성에 대해 알게 된 이후, 아마존이 가짜 제품에 대한 책임을 져야 한다고 생각함. 이베이, 리버브, 페이스북과는 다른 입장을 취함.
     * NFL 팀의 영양 관리자가 말한 이야기를 들음. 선수들이 때때로 메스암페타민 양성 반응을 보이는데, 이는 새로운 보충제 때문이며, 그들이 팀 동료에게 추천함. 그저 보충제 사용을 중단하라고 조언함.
     * 아마존이 보충제 판매를 완전히 금지해야 한다고 생각함. 아마존의 통제가 너무 느슨해서 단백질 파우더나 비타민 알약에 무엇이 들어있는지 알 수 없음. 심지어 정품 브랜드 제품조차 가짜일 수 있음.
     * 아마존을 사기 사이트로 지칭하며, 이제부터 책은 인디고(캐나다)에서, 전자제품은 코스트코, 베스트바이, 월마트에서 구매할 것임. 아마존 오디오북 서비스인 Audible은 아직 취소할 생각이 없음에도 불구하고 아마존을 신뢰하지 않음.
     * 아마존이 이미 해당 제품을 제거했기 때문에, 경고장에서 언급된 보충제 중 하나인 ""X Max Triple Shot Energy Honey""에 대한 링크를 제공함. 해당 회사는 등록된 주소나 연락처가 없고, HAACP(안전 식품 동맹) 인증을 받았다고 주장하는 수많은 ""남성 에너지"" 보충제를 나열함.
     * 미국의 식료품점이 더 나은 통제를 가지고 있는지, 아니면 그들의 중개 모델이 우연히 문제가 되는 제품을 걸러내는지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12605","창조적 AI를 위한 상황이 악화될 전망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         창조적 AI를 위한 상황이 악화될 전망

창작 AI에 대한 전망 암울

     * 창작 AI 시스템들은 저작권이 있는 자료들을 학습하여 저작권 침해 가능성이 있는 자료를 생성할 수 있음.
     * OpenAI는 자신들의 시스템이 어떤 자료들을 학습했는지에 대해 투명하지 않음.
     * 사용자들은 생성된 이미지의 출처에 대한 정보 없이 저작권을 침해할 수 있음.

시스템의 한계

     * DALL-E와 ChatGPT와 같은 시스템은 본질적으로 '블랙박스'로, 출처를 추적하거나 제공하는 능력이 현재로서는 부족함.
     * 출처 추적이 가능한 새로운 아키텍처가 개발되기 전까지는 사용자의 의도와 상관없이 저작권 침해가 계속될 것임.

법적 위험과 재정적 위험

     * 뉴욕 타임즈의 소송은 창작 AI에 대한 많은 소송 중 첫 번째일 뿐이며, 해결되더라도 그 가치는 수백만 달러 이상일 것으로 예상됨.
     * OpenAI 뿐만 아니라, Bing을 통해 Dall-E를 사용하는 Microsoft도 법적 위험에 처해 있음.

GN⁺의 의견

     * 창작 AI 기술의 발전은 저작권 침해의 위험을 증가시키고 있으며, 이는 기술과 법적 체계 간의 긴장을 불러일으키는 중요한 문제임.
     * 사용자들이 생성한 콘텐츠의 출처를 알 수 없다는 점은 AI 윤리와 투명성에 대한 논의를 촉발시키는 핵심 요소임.
     * 이 기사는 AI 기술의 빠른 발전이 가져올 수 있는 예상치 못한 부작용과 관련 산업에 미칠 영향에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 디즈니가 성공한 이유 중 하나는 세대를 거쳐 전해진 민담과 같은 기존의 이야기를 적응한 데 있음.
          + 문화는 공동체의 재산으로서, 공동의 스토리텔링과 재해석을 통해 진화하고 성장함.
          + AI와 저작권 침해에 대한 현재 논쟁은 이러한 문화적 진화의 근본적인 측면을 간과하는 경향이 있음.
          + 창조적인 사회의 본질을 이해하는 데 있어 법적 함의와 문화적 스토리텔링의 역사적 맥락을 무시하면 안 됨.
     * 두 번째 댓글 요약:
          + 유럽연합(EU)에서는 ""디지털 단일 시장 저작권 지침""의 제3조와 제4조가 이 문제를 이미 규제하고 있음.
          + 상업적 기계학습(ML) 개발자를 포함한 모든 이들은 저작권자가 텍스트 및 데이터 마이닝 목적으로 사용을 명시적으로 예약하지 않은 경우에만 법적으로 접근 가능한 작품을 사용할 수 있음.
          + ""로봇.txt""와 같은 것을 사용하여 훈련용이 아닌 것을 표시하는 것이 논의되고 있으며, 최종 사용자는 생성된 콘텐츠의 사용에 주의해야 함.
     * 세 번째 댓글 요약:
          + 저작권이 있는 자료로 훈련된 AI가 유사한 결과물을 만들어낼 수 있다는 것은 이미 알려진 사실임.
          + 대규모 기업들이 이미 이 방식을 채택하고 있으며, 이제는 이를 되돌릴 수 없는 상황임.
          + AI의 제작 방식이나 저작권에 대해 일반 대중이 잘 알지 못하기 때문에, 이제 중요한 질문은 '이제 어떻게 할 것인가'임.
     * 네 번째 댓글 요약:
          + 저작권을 침해하지 않도록 보장하는 책임은 작품을 출판하는 사람에게 있음.
          + ChatGPT나 다른 도구가 저작권이 있는 콘텐츠를 생성하지 않을 것이라고 가정하는 것은 순진한 생각임.
     * 다섯 번째 댓글 요약:
          + 예술과 출판의 핵심 목적은 문화와 사회에 영향을 미치는 것이어야 하며, 단지 돈을 벌기 위한 것이 아님.
          + 창작물은 보호가 필요하지만, 공공 도메인으로의 이전이 훨씬 빨리 이루어져 창의성과 영감을 불어넣어야 함.
     * 여섯 번째 댓글 요약:
          + 문제 해결은 그리 어렵지 않아 보임.
          + ""비디오 게임 배관공""과 같은 표현은 특정한 엔티티를 지칭하는 약어로, 대부분의 사람들이 이를 ""마리오""와 동일시함.
          + AI 도구를 사용하여 마리오와 유사한 이미지를 설명하고, ""비디오 게임 배관공""을 요청하는 결과에서 이러한 결과를 제거하는 것은 어렵지 않음.
     * 일곱 번째 댓글 요약:
          + 생성 AI에 대한 법적 선례는 구글이 웹사이트를 스크랩하여 검색을 위해 색인화하는 것과 같음.
          + 구글이 웹사이트의 원본 콘텐츠를 그대로 표시하는 것이 저작권 침해라고 말하는 사람은 없음.
          + 생성 AI가 문화적 참조와 인기 있는 지적 재산(IP)을 모두 제거해야 한다면 무용지물이 될 것임.
     * 여덟 번째 댓글 요약:
          + 세션 뮤지션을 고용하여 유명한 곡의 일부를 연주하게 하고, 이를 샘플로 사용하는 경우의 저작권 침해 문제에 대한 고려임.
          + 누가 저작권 침해에 대한 책임을 져야 하는지에 대한 질문이 제기됨.
     * 아홉 번째 댓글 요약:
          + 뉴욕 타임즈가 자신들의 데이터로 훈련된 모든 대규모 언어 모델(LLMs)의 파괴를 요구하는 관련 진행 중인 스레드에 대한 언급임.
     * 열 번째 댓글 요약:
          + Llama2 모델이 텍스트를 얼마나 잘 압축하는지에 대한 실험을 통해, 해당 모델이 해리 포터 책의 첫 장을 상당 부분 포함하고 있음을 발견함.
"
"https://news.hada.io/topic?id=12505","2024년의 아이콘 디자인 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2024년의 아이콘 디자인 트렌드

     * 미니멀리즘
     * 3차원 형태 및 사실감
     * 추상주의 및 기하학
     * 마이크로인터랙션 & 애니메이션
     * 아트 데코
     * 오가닉 & 지속가능성
     * 거친 에스테틱
     * 아이콘 디자인 모범 사례
          + 단순하게 유지하기: 군더더기나 불필요한 세부 사항은 피할 것
          + 명확성을 우선시: 모든 요소를 즉시 알아볼 수 있고 이해할 수 있어야 함
          + 일관성에 집중: 모든 세트에서 일관된 디자인 언어를 유지할 것
          + 확장성 테스트 실시: 다양한 크기에서 디자인이 잘 보이는지 확인할 것
          + 사용자 피드백 받기: 사용자의 의견에 귀 기울여 콘셉트를 구체화할 것
"
"https://news.hada.io/topic?id=12607","젠투(Gentoo) 바이너리 버전 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         젠투(Gentoo) 바이너리 버전 출시

Gentoo, 바이너리 패키지 지원 시작!

     * Gentoo Linux가 소스 기반 배포판으로 잘 알려져 있지만, 패키지 관리자인 Portage가 이미 수년간 바이너리 패키지도 지원하고 있으며, 소스 기반과 바이너리 기반 패키지 설치를 자유롭게 혼합할 수 있음.
     * 하드웨어 성능이 낮은 경우나 편의성을 위해 이제 바이너리 패키지를 다운로드하여 직접 설치할 수 있는 옵션을 제공함.
     * 대부분의 아키텍처에서는 핵심 시스템과 주간 업데이트에 한정되지만, amd64와 arm64에서는 LibreOffice부터 KDE Plasma, Gnome, Docker에 이르기까지 20GB 이상의 패키지를 제공하며, Gentoo stable은 매일 업데이트됨.

질문과 답변

     * 기존 Gentoo 설치에서 바이너리 패키지를 사용하려면 /etc/portage/binrepos.conf/에 설정 파일을 생성해야 함.
     * 새로운 설치의 경우, 적절한 /etc/portage/binrepos.conf/gentoobinhost.conf가 포함되어 있으며, 로컬 미러로 src-uri 설정을 변경할 수 있음.
     * amd64 패키지는 -march=x86-64 -mtune=generic -O2 -pipe로 컴파일되며, arm64 패키지는 -O2 -pipe로 컴파일되어 각각의 아키텍처에서 사용 가능함.
     * 다른 아키텍처와 ABI의 패키지 설정은 스테이지 빌드와 연결되어 있으며, 현재로서는 추가 확장 계획이 없음.
     * 패키지는 스테이지와 동일한 키로 암호화 서명되며, 설치 전 서명이 검증됨.
     * 서명 검증에 실패하면 설치가 거부되지만, 기본 설정에서는 서명되지 않은 XPAK 패키지도 설치할 수 있음.
     * 서명된 패키지만 사용하려면 make.conf에 FEATURES=""binpkg-request-signature""를 설정해야 함.
     * 서명 검증 오류가 발생하면 루트 권한으로 Gentoo Trust Tool getuto를 실행해야 함.
     * 자체 제작한 바이너리 패키지를 사용하려면 서명 키를 설정하고 /etc/portage/gnupg의 앵커에 해당 키를 신뢰해야 함.
     * 다운로드가 느리면 로컬 미러를 사용하도록 /etc/portage/binrepos.conf를 편집할 수 있음.
     * Portage는 여전히 소스 기반으로 컴파일을 원하며, 바이너리 패키지와 혼합 사용이 가능함.
     * 문제가 발견되면 IRC, 포럼, 메일링 리스트에서 조언을 구하거나 버그를 제출해야 함.

GN⁺의 의견

     * Gentoo가 바이너리 패키지 지원을 시작한 것은 사용자들에게 더 빠른 설치와 편의성을 제공하는 중요한 변화임.
     * 이러한 변화는 특히 성능이 낮은 하드웨어를 사용하는 사용자나 빠른 설치를 원하는 사용자에게 매력적일 수 있음.
     * 바이너리 패키지의 암호화 서명과 검증은 사용자들에게 안전한 소프트웨어 설치를 보장하는 중요한 기능임.

        Hacker News 의견

     * 젠투(Gentoo) 팬임을 밝힌 사용자의 의견:
          + 젠투의 매력은 소스 코드로부터 모든 것을 컴파일하는 것이 아니라, 거의 모든 하드웨어에서 원하는 것을 설치할 수 있는 자유, 훌륭한 문서화, 최소한의 장애물을 제공하는 것임.
          + 젠투는 사용자에게 다양한 선택을 제공하며, 다른 배포판들이 사용자의 선택권을 제거하는 것과 대조적임.
          + 젠투는 17개 이상의 다른 stage 3 tarballs과 35개의 eselect 프로파일 중에서 선택할 수 있는 유연성을 제공함.
          + 현대 하드웨어에서는 소스 코드 컴파일이 문제가 되지 않으며, 이것이 젠투의 판매 포인트임.
     * 젠투의 Portage 시스템을 선호하는 사용자의 의견:
          + Portage는 단순한 빌드 환경과 의존성 관리를 넘어서, 빌드 시 발생할 수 있는 다양한 케이스를 처리하는 훌륭한 도구와 Eclasses를 지원함.
          + Ebuilds(젠투 패키지) 개발은 실제 소프트웨어 프로젝트를 진행하는 것과 같은 느낌을 주며, 공식 저장소에 없는 패키지를 실험하고 싶은 사람들에게 좋음.
          + 이러한 개발은 젠투를 더 많은 사람들에게 접근 가능하게 만들 것이나, 공식 바이너리와 일치하지 않는 빌드 구성을 사용하는 사용자에게는 해당되지 않음.
     * 젠투를 사용하며 소프트웨어 패키징과 최적화에 대해 배운 사용자의 의견:
          + 젠투는 소프트웨어 패키징, 분산 컴파일, 컴파일 시 최적화 등을 배우는 데 많은 재미를 제공함.
          + 젠투 커뮤니티는 기억에 남는 좋은 문서를 제공했으며, 사용자의 패치가 여전히 일부 릴리스에 남아 있을 수 있음.
          + 최적화와 최신 소프트웨어에 많은 시간을 할애하는 것이 가치가 없다는 것을 깨달았을 때, Slackware가 젠투만큼 빠르게 동작한다는 것을 발견함.
     * 젠투를 사용하며 시간을 낭비했다고 느끼는 사용자의 의견:
          + 사용자는 젠투 시스템을 컴파일하고 미세 조정하는 데 많은 시간을 소비했으나, 결국 다음 날 새로 도착한 우분투(Ubuntu) CD로 포맷하여 설치함.
     * 젠투를 통해 리눅스에 대해 배운 사용자의 의견:
          + 젠투의 USE 플래그를 통해 특정 패키지가 다른 라이브러리/패키지와 어떻게 통합되는지 알게 되었으며, 이는 readline과 같은 ""보이지 않는"" 라이브러리에 대한 이해를 도움.
          + 젠투는 사용자에게 적절한 시기에 매우 가치 있는 학습 도구임.
     * 젠투를 일상적으로 사용하는 사용자의 의견:
          + 많은 사용자들이 젠투를 시도했거나 사용했었다고 언급하는 반면, 현재도 젠투를 주력으로 사용하고 있음.
          + 사용자는 젠투가 자신에게 최적인 이유를 궁금해하며, 바이너리 패키지를 활성화할 의사가 없음.
     * 젠투에 대한 비판적인 사용자의 의견:
          + 젠투에서 바이너리 패키지를 제공하지 않았던 것이 15년 전에 FreeBSD로 전환한 이유 중 하나였음.
          + 단일 CPU 코어와 1GB RAM을 가진 시절에는 게임 체인저였으나, 오늘날에는 그렇게 중요하지 않을 수 있음.
     * 젠투의 유지보수 용이성을 칭찬하는 사용자의 의견:
          + 젠투는 사용자가 시스템에 원하는 작은 조정을 쉽게 추가하고 유지보수할 수 있도록 설계되었음.
          + 다른 배포판들은 기본적으로 더 잘 작동하지만, 정해진 경로에서 벗어나면 문제가 발생함.
          + 잘 조정된 젠투 시스템은 사용자에게 필요한 의미에서 ""그냥 작동""함.
          + 상위 바이너리 패키지는 이러한 자유의 또 다른 확장임.
     * 젠투의 소스 컴파일에 대한 환경적 영향을 우려하는 사용자의 의견:
          + 동일한 소프트웨어를 반복적으로 컴파일함으로써 발생하는 높은 전기 요금과 온실가스 배출에 대해 우려함.
     * 젠투의 이점을 설명하는 사용자의 의견:
          + 젠투는 소스 컴파일이나 ""성능"" 향상, 운영 체제를 며칠 동안 조정하는 것에 관한 것이 아님.
          + 공식적으로 지원되는 binhost가 있으므로, 원하지 않는다면 아무것도 컴파일할 필요가 없음.
          + 젠투는 사용자가 ""안정적"" 또는 ""불안정적"" 소프트웨어 버전을 패키지별로 선택할 수 있는 이점을 제공함.
          + 젠투 커뮤니티는 개방적이며, 개발자가 아니어도 기여할 수 있고, 질문이나 지침이 필요할 때 개발자와 직접 상호 작용할 수 있음.
"
"https://news.hada.io/topic?id=12499","구글, 지속되는 스팸 공격 대응에 어려움 겪는 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글, 지속되는 스팸 공격 대응에 어려움 겪는 중

Google 검색, 대규모 스팸 공격에 압도당해

     * Google의 검색 결과가 지난 며칠간 스팸 공격을 받아 완전히 제어가 불가능한 상태.
     * 많은 도메인들이 수십만 개의 키워드마다 순위를 차지하고 있어, 이 공격의 규모가 수백만 개의 키워드 구문에 이를 수 있음.

Google의 알고리즘이 어떻게 이용될 수 있는가

     * 스팸 사이트들은 Google이 웹사이트를 순위에 매기는 방식의 적어도 세 가지 기회를 이용하는 것으로 보임.
     * 스팸 사이트들이 순위에 오르는 검색 쿼리는 경쟁이 낮아 순위를 매기기 쉬움.
     * 로컬 검색 알고리즘과 롱테일 키워드, 그리고 새로 등록된 도메인이 이용하는 기회들이 있음.
     * 새로운 사이트들은 Google의 알고리즘이 사이트를 파악하는 동안 짧은 기간 동안 검색 쿼리에 대해 순위를 매길 수 있는 이점을 가짐.

링크가 Google이 스팸 사이트를 찾는 데 도움이 됨

     * Bill Hartzer가 Majestic 백링크 도구를 사용하여 여러 스팸 사이트의 링크 네트워크를 드러내는 포스트를 통해 이 사실을 알게 됨.
     * 백링크 네트워크를 만드는 데 많은 노력을 기울였지만, 링크가 높은 순위를 결정하는 데 실제로 책임이 있는 것은 아님.
     * 링크는 Google이 새로운 스팸 사이트를 발견하고 크롤링하여 결국 순위를 매기는 데 도움이 됨.

Google SERPs에서 제어 불가능한 스팸

     * 여러 사이트들이 순위를 매기기 쉬운 롱테일 구문과 로컬 검색 구성 요소가 있는 구문에 대해 순위를 매김.
     * 롱테일 개념은 거의 20년 전부터 있었으며, 2006년 출간된 ""The Long Tail""이라는 책에 의해 대중화됨.
     * 스팸 사이트들은 경쟁이 적은 구문에 대해 순위를 매길 수 있으며, 이를 이용하여 짧은 시간 내에 수십만 개의 키워드에 대해 순위를 매김.

스팸 페이지의 모습

     * 스팸 페이지를 브라우저로 방문하는 것은 불가능함.
     * 스팸 사이트들은 다른 도메인으로 자동 리디렉션됨.
     * Google의 Rich Results 테스터를 사용하여 스팸 사이트를 방문하고 페이지의 HTML을 기록함.

한 도메인이 300,000개 이상의 키워드에 대해 순위를 매김

     * Bill이 보낸 스프레드시트에는 한 스팸 사이트가 순위를 매긴 키워드 구문 목록이 포함됨.
     * 한 스팸 사이트가 300,000개 이상의 키워드 구문에 대해 순위를 매김.

이 스팸 기법이 효과적인 이유

     * 로컬 검색은 비로컬 알고리즘과 다른 알고리즘을 사용함.
     * 로컬 검색 알고리즘은 로컬 유형의 사이트가 순위를 매길 수 있도록 더 허용적임.
     * Google은 이 스팸 문제를 적어도 12월 19일부터 알고 있었으며, Danny Sullivan의 트윗을 통해 확인됨.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 Google 검색 결과가 대규모 스팸 공격에 취약하다는 점이며, 이는 검색 엔진의 신뢰성에 영향을 줄 수 있음.
     * 스팸 공격이 효과적인 이유는 Google 알고리즘의 특정 취약점을 이용하기 때문이며, 이는 Google이 알고리즘을 개선해야 할 필요성을 강조함.
     * 이 글이 흥미로운 이유는 기술적인 측면뿐만 아니라, Google과 같은 대형 기술 회사가 여전히 예상치 못한 문제에 직면할 수 있다는 것을 보여주기 때문임.

   구글 스팸 신고 웹문서 스팸신고 하실때 abc.abc.uk/trashasda 이런도메인이다 하면 abc.uk 이렇게 해서 신고하시고, abc.abc.uk/sitemap.xml 을 문제를 정확하게 알수있는 검색어에 넣어 신고하시면 됩니다. 이미 솔루션으로 다져진 웹인데 일반 유저 접근시 바로 파생문서를 다시 만드는 구조로 되어있는 것으로 보입니다. 대응하는 방법은 적극적인 신고를 해주시는게 맞고 구글에서 눌린만큼 또 다시 스팸페이지가 만들어지고, google.com/url image.google.com/url naver redirect 등과 같이 봇이 접근하게만들어 또다시 생성된 스팸페이지로 이동하는 과정이 있으니 누르진 마시고 링크만 따서 신고하심 됩니다. google.com/url 로 명시되어 리다이렉싱하는 알고리즘이 철폐되지 않는 이상은 현행 문제가 계속 발현될 것으로 보입니다.
     * 웹문서 신고 : https://search.google.com/search-console/report-spam?hl=ko
       (스팸, 스팸웹문서 신고)
     * 피싱사이트신고 : https://safebrowsing.google.com/safebrowsing/report_phish/?hl=ko

   위 스팸솔루션에 해당하는 웹문서 신고하시는 경우
   총 5개의 칸에 첫번째에는 주도메인, 4개의 추가 URL에는 이에 파생되어 만들어진 문서 리스트를 적어주시는게 맞고, 해당 도메인의 사이트맵을 검색어에 넣어주시는게 좋습니다. 사이트맵 열어보면 /new/asdasd 와 같이 접근하자마자 생성하게만드는 전략을 취해둬서 신고문서 작성하면 결국 구글이 열람시 도망가는 문서를 추가적으로 생성하게 만들어둔 치밀한 녀석인지라 도메인 자체로 신고하셔야 합니다.

   저의 경우
   (h는 x로, /는 |로 바꾸었습니다)

   xttp:||baddomain.com
   xttp:||baddomain.com/blogs
   xttp:||baddomain.com/blogs/asdasd1
   xttp:||baddomain.com/asdasd1
   xttp:||baddomain.com/asdasd2

   이렇게 신고서 작성 후

   서브 도메인부터 썩어들어간 녀석이라면, site:*baddomain.com
   키워드에 이렇게 신고서 작성해서 보냅니다.

   이후 사이트 자체가 완전히 스팸성이면, 피싱사이트신고서도 같이 날려줍니다.

   해당 스팸 웹사이트들의 소프트웨어들은 아이러니하게도 태그매니저들이 연동되어 있으며, https://picsum.photos 와 같은 사이트가 사용됨에도 불구하고 색인이 정상적으로 이루어지고 있습니다. 구글에서 검수 안한다는 의미기도 합니다. 스팸활동에 대한 정상적인 범주를 넘어섰음에도 스팸웹문서 + 애드워즈 광고가 걸려있는 상태라면 더욱더 신고해도 광고 유입수 만큼 파생문서가 빠르게 만들어집니다. 태그매니저를 스팸 웹사이트들이 정상적으로 쓰고 있다는 것이 소름 돋는 대목입니다.

   한달째 스팸신고서 넣고하는데 스팸문서, 사기문서로 신고하시면서 피싱사이트 신고 페이지에서 같이 신고해주시면 보다 빨리 정리됩니다. 해당 페이지도 넣지만 최상위 도메인인 abc.abc.uk 라면 abc.uk 라고 입력해주어야 도메인 자체를 정리하는데 도움 됩니다. 웹마스터들에게 숙제가 되버린 일상 입니다.

   안 그래도 구글은 예전부터 검색 결과의 질이 전반적으로 떨어지는 게 눈에 보였는데 이런 식으로 단기간에 대량으로 공격을 받으면 많은 사람들이 구글 검색 결과를 더욱 신뢰하지 못하게 되겠지요.

        Hacker News 의견

     * 스팸 사이트가 Googlebot의 IP 주소를 확인함
          + Googlebot으로 확인되면 해당 페이지에서 콘텐츠를 보여줌
          + 다른 방문자들은 의심스러운 콘텐츠가 있는 다른 도메인으로 리다이렉트됨
          + 과거에 Google은 Googlebot과 일반 사용자에게 다른 콘텐츠를 보여주는 사이트를 허용하지 않았으며, 이를 위반할 경우 큰 패널티를 부과했음
          + 이 정책은 사라졌지만, 자동화된 도구가 잘 작동한다면 여전히 유용할 수 있음
     * Kagi 검색 엔진으로 전환한 사용자의 경험
          + 가끔 좋은 검색 결과를 얻기 어려울 때가 있지만, Google에서도 결과가 더 나은 것은 아님
          + 사용자는 도메인을 '부스트'하고 '핀'하여 검색 결과를 개인 취향에 맞게 조정함
          + 여전히 Gmail과 Google Maps 등 다른 Google 서비스는 사용 중이지만 검색은 더 이상 사용하지 않음
     * 간단한 질문에 대답하기 위해 과도한 양의 텍스트를 제공하는 사이트 증가
          + 실제 답변은 페이지 하단에 위치함
          + 표면적으로는 관련성이 있는 것처럼 보이지만, 실제로는 일반적인 내용임
     * Google 검색 결과의 품질 저하에 대한 관찰
          + 이러한 추세가 언제부터 시작되었는지는 확실하지 않으나, 오랜 시간 동안 충분한 주목을 받지 못했을 수 있음
          + 스팸 공격이 마지막 단계일 수도 있음
     * 검색 엔진에 대한 의문 제기
          + 웹 크롤링에 기반한 단일 목적의 검색 엔진 개념이 사라질 수도 있음
          + 특정 목적에 맞는 여러 시스템으로 Google을 대체하는 것이 더 나을 수 있음
          + 예를 들어 기술적 질문은 StackOverflow와 Github에서 직접 검색, 지역 장소 검색은 신뢰할 수 있는 데이터베이스에서 검색 등
          + 검색 엔진이 LLM(대규모 언어 모델)을 활용하여 검색 유형을 추측하고, 큐레이션된 특화된 검색으로 이동하는 방향으로 발전할 수 있음
     * Google의 검색 엔진 알고리즘 변경에 대한 지적
          + Google은 때때로 알고리즘을 변경하여 사이트 순위에 영향을 줌
          + 이러한 변경은 특정 쿼리에 대해 낮은 품질의 결과가 상위에 오르게 할 수 있음
          + 과거에는 SEO 관련 사이트에서 이러한 알고리즘 업데이트를 모니터링하고 토론하는 것이 중요했음
     * Google의 유기적 검색 포기에 대한 주장
          + SEO에 능숙한 사용자조차 Google 검색 결과의 순위 결정 이유를 이해하기 어려움
          + Google은 유료 결과를 더 가치 있게 만들어 사용자가 유료 광고를 클릭하도록 유도함
     * Google의 검색 엔진 한계에 대한 지적
          + 특정한 것을 찾을 때는 유용하지만, 그 외에는 Bing, ChatGPT, Phind 등을 사용함
          + 사용자의 게임은 Bing과 다른 검색 엔진에서 상위 결과에 나타나지만, Google에서는 스팸 광고 사이트가 우선함
     * Bing으로의 전환 경험 공유
          + ChatGPT를 활용한 Bing의 발전으로 Google 대신 Bing을 사용하기 시작함
          + 완벽하지는 않지만, Google과 비교했을 때 더 만족스러운 결과를 제공함
     * Google의 광고 회사로서의 행태에 대한 비판
          + 새로운 Gmail 계정을 만들고 아무에게도 알리지 않았음에도 불구하고 스팸 메일을 받음
          + Google이 자체 이메일 주소 목록을 판매한다고 추정하는 것은 합리적임
"
