"https://news.hada.io/topic?id=19105","Snapify - 오픈소스 스크린 녹화 앱 (Loom 대체제)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Snapify - 오픈소스 스크린 녹화 앱 (Loom 대체제)

     * 설치 없이 몇번의 클릭으로 화면을 녹화해서 영상을 제작, 링크로 공유 가능
          + 수신자는 계정없이도 비디오 메시지 확인 가능
          + 피드백, 의견 수집, 의사 결정등에 활용
     * TypeScript 오픈소스로 셀프 호스팅 가능 (호스티드 버전은 월 $8 )

   업데이트 빈도가 너무 작네요..
"
"https://news.hada.io/topic?id=19138","RxDB - 자체 백엔드와 동기화할 수 있는 Firestore 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 RxDB - 자체 백엔드와 동기화할 수 있는 Firestore 대안

   이미 많은 DB들이 Pull (reactive) 방식 지원하고 있는데 굳이..?
   Reactive 창시자 Erik Meijer도 이미 마소나 많은 db 시스템 참여했는데 조금 뒷북인거 같은디

   rxdb에 관련해서 본문이 없거나 매우 짧은 글만 포스팅하시는데 혹시 따로 이유가 있으실까요?
"
"https://news.hada.io/topic?id=19075","활동가를 위한 Infosec 101 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        활동가를 위한 Infosec 101 가이드

소개

     * 미국은 노예 반란과 원주민 봉기 등으로 시작된 강력한 활동 전통을 가지고 있음.
     * 오늘날에도 미국의 활동은 여전히 중요하며, 거리 시위는 인식을 높이고 제도적 변화를 추진하는 중요한 도구임.
     * 그러나 기존 권력 구조에 도전하는 것은 위험 요소를 동반하며, 노출은 괴롭힘, 체포, 또는 개인 정보 유출로 이어질 수 있음.
     * 이 문서는 활동가들이 직면하는 디지털 안전 및 정보 보안에 중점을 두고 있음.

사용해야 할 도구

     * BitWarden: 비밀번호 관리자, 무료, 추가 기능 $1/월
     * DuckDuckGo: 웹 검색, 무료
     * DuckDuckGo Maps: 지도 및 방향, 무료
     * Firefox: 웹 브라우징, 무료
     * Jitsi: 온라인 회의, 무료
     * ProtonMail: 이메일, 무료, 추가 기능 $5/월
     * ProtonVPN: VPN, 무료, 추가 기능 $5/월 또는 $10/월
     * Signal: 메시징, 무료

사용하지 말아야 할 도구

     * Google Maps: 사용자의 위치를 추적하고 데이터를 영구적으로 저장함.
     * Telegram: 보안 문제가 있으며 그룹 메시지에 대한 암호화가 적용되지 않음.
     * WhatsApp: 유사한 보안 문제로 인해 추천하지 않음.

알아야 할 사항

     * 휴대폰은 추적 및 식별 정보의 금광임.
     * 메시지, 전화 통화 등은 경찰에 의해 기록될 수 있음.
     * 최신 운영 체제로 업데이트하고, 소프트웨어 업데이트를 받지 않는 경우 휴대폰을 가져가지 않는 것이 좋음.

행동에 참여하기

  행동 전

     * Facebook에서 ""참석""으로 표시하지 않음.
     * 세부 정보를 개인 기기나 종이에 저장함.
     * 인터넷 검색 시 DuckDuckGo와 개인 브라우징 세션을 사용함.
     * 최신 OS 버전으로 기기를 업데이트함.
     * Signal 계정을 설정하고, Google Voice로 새 전화번호를 만들어 등록할 수 있음.

  행동 중

     * 시위 동반자와 함께 행동함.
     * Apple Maps 또는 DuckDuckGo Maps를 사용하여 방향을 찾음.

  행동 후

     * 시위에 설정된 Signal 그룹을 떠나고 삭제함.
     * 시위 사진을 소셜 미디어에 게시하지 않음.

휴대폰 준비하기

  디지털 흔적

     * GPS 수신기를 끄고, Bluetooth, WiFi, 초광대역(UWB) 라디오를 비활성화함.
     * 모바일 통신사는 휴대폰의 위치를 추적할 수 있으며, 경찰이 이를 사용할 수 있음.
     * 비행기 모드를 활성화하여 모든 라디오를 비활성화함.

  침입 보호

     * 잠금 화면을 설정하고 생체 인식 잠금을 비활성화함.
     * 전체 디스크 암호화를 사용하여 데이터를 보호함.

보안 아이디어

  암호화된 메시징

     * 개인 통신을 암호화하려면 종단 간 암호화(E2EE)를 사용함.

  온라인 회의

     * Jitsi를 사용하여 회의 내용을 기록하거나 보관하지 않음.

  비밀번호 안전

     * 2단계 인증(2FA)을 활성화하고, 긴 비밀번호를 사용하며, 비밀번호 관리자를 사용함.

기타 팁

     * 활동 참여를 안전하게 공유할 수 있는 사람을 신중하게 생각함.
     * 시위 관련 대화에 이메일을 사용하지 않음.
     * 자신의 이름을 Google에 검색하여 어떤 정보가 나오는지 확인함.
     * 시위에 체크인하지 않음.
     * 사진을 소셜 미디어에 게시하지 않음.

        Hacker News 의견

     * Proton이 정치적 이슈에 얽혀 있어 추천하기 망설여지며, Mullvad는 그러한 실수가 없음을 언급함
          + 관련 자료로 EFF의 ""Activist or Protester?""와 Privacy Guides의 ""The Protester's Guide to Smartphone Security""를 추천함
          + 위협 모델을 설정하고, 현재 환경에서는 이러한 조치들이 충분하지 않음을 인식해야 함
          + 일부 조치가 주목을 끌 수 있음을 경고함
     * 기사에서 신뢰할 수 있는 친구와 함께 시위에 참여할 필요성을 강조하지만, 그러한 친구를 찾고 유지하는 방법에 대한 설명이 부족함을 지적함
          + Firefox가 Chrome보다 더 활동가 및 프라이버시 친화적이라는 인식을 가지고 있지만, Chrome이 더 정교하고 잘 테스트된 런타임 보호 기능을 가지고 있음을 언급함
     * 기본적인 조치가 국가 행위자와 같은 정교한 적에 대해 효과가 없을 것이라고 믿음
          + 현대 스마트폰이 보안 취약점이 많은 독점 펌웨어로 가득 차 있으며, 원격 코드 실행 취약점이 존재함을 설명함
          + Apple의 Find My 네트워크가 꺼진 장치에서도 작동할 수 있으며, 국가 행위자가 이를 우회할 수 있는 백도어를 가지고 있을 가능성을 경고함
     * iCloud 백업에 대한 권고 사항에 오류가 있음을 지적함
          + iCloud 백업이 전체 디스크 암호화 키를 저장하며, 법 집행 기관이 이를 요청할 수 있다는 설명이 사실이 아님을 주장함
          + Advanced Data Protection을 활성화하여 데이터를 종단 간 암호화할 것을 권장함
     * iCloud 백업이 물리적 장치의 잠금을 해제할 수 있는지에 대한 의문을 제기함
          + 백업이 손상될 수 있으며, 백업을 통해 장치의 대부분의 데이터를 얻을 수 있지만, 물리적 장치의 잠금 해제와의 연관성에 대해 더 알고 싶어함
     * Firefox와 Chrome의 0-day 취약점 비용 비교에 대한 질문을 던짐
"
"https://news.hada.io/topic?id=19064","C로 작성된 WebAssembly VM 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C로 작성된 WebAssembly VM 개발

WebAssembly란?

     * WebAssembly는 웹 브라우저에서 신뢰할 수 없는 클라이언트 측 코드를 거의 네이티브 속도로 실행하기 위해 설계된 표준화된 명령어 집합 및 바이트코드 형식임.
     * Emscripten C/C++에서 JavaScript로의 컴파일러에서 발전하였으며, 초기에는 LLVM IR을 JavaScript로 변환하여 웹에서 C와 C++ 코드를 실행할 수 있도록 함.
     * 시간이 지나면서 브라우저 개발자들이 Emscripten 프로젝트와 협력하여 성능 최적화를 위한 JavaScript의 단순한 하위 집합을 만들었고, 이는 asm.js로 표준화됨.
     * 이후 JavaScript의 오버헤드를 피하기 위해 독립적인 바이트코드 형식이 설계되었고, 이것이 Wasm임.
     * 최근 WebAssembly는 브라우저 외부에서도 인기를 얻고 있으며, Fastly와 Shopify는 WebAssembly 엔진을 기반으로 Edge Compute 및 Functions 제품을 구축함.
     * WebAssembly는 다양한 소스 언어에서 타겟팅할 수 있는 기능으로 인해 플러그인 생태계를 구축하는 매력적인 플랫폼임.

왜 WebAssembly 인터프리터인가?

     * 많은 소프트웨어 엔지니어처럼 새로운 사이드 프로젝트를 시작하고 몇 주 후에 흥미를 잃는 패턴에 빠져 있었음.
     * 지속적인 기간 동안 노력을 투자할 수 있는 큰 프로젝트가 필요했고, 이는 컴퓨팅 스택의 낮은 수준에 노출되도록 함.
     * WebAssembly의 하이프에 관심을 가지게 되었고, 맞춤형 시스템 호출을 설계할 수 있는 플랫폼 엔지니어링 도구로 매력적으로 보였음.

Semblance

     * WebAssembly Core Specification에 익숙해지기 위해 WebAssembly 인터프리터를 작성하기로 결정함.
     * 프로젝트의 목표는 학습용이므로 모든 opcode를 구현하거나 핵심 테스트 스위트를 통과할 계획은 없었음.
     * ""Hello, World!""를 실행할 수 있다면 만족할 것임.

결과

     * 프로젝트는 큰 성공으로 간주됨. opcode 커버리지는 완전하지 않지만 간단한 ""Hello, World!"" 프로그램을 실행할 수 있음.
     * 코드가 지저분하고 느리며 메모리 누수가 있으며 악의적인 모듈에 취약할 수 있지만 작동함.
     * WebAssembly의 핵심 사양에 대해 많은 것을 배웠고, 엔지니어로서의 편안한 영역에서 벗어날 수 있었음.
     * 이제 Wasmtime과 같은 산업용 런타임에 기여할 수 있는 충분한 WebAssembly 지식을 얻었다고 느끼고 있음.

        Hacker News 의견

     * Wasm 인터프리터를 Scheme으로 작성한 경험이 있어 다른 사람들이 직접 작성하는 것을 보니 기쁨. Wasm은 생각보다 덜 어렵고, 모든 명령어를 구현할 필요 없이 재미를 느낄 만큼만 시도해보기를 권장함
          + 작성자에게 주는 팁: spec-test에는 복잡한 형태의 텍스트 wasm이 포함되어 있지만, wast2json 변환기를 사용하면 더 간단한 JSON 설명과 일반적인 바이너리 wasm 파일을 얻을 수 있음
     * 초보자 질문:
          + 인터프리터를 직접 코딩하지 않을 때 어떻게 디버깅하는지 궁금함
          + 문자열의 opcode를 퍼징하는 것이 얼마나 효과적인지 궁금함
          + 서버 측 WASM 엔진과 브라우저 기반 엔진의 실질적인 차이가 얼마나 있는지, 하나를 다른 것으로 변환하는 데 얼마나 많은 작업이 필요한지 궁금함
     * 직접 WASM 해석에 관한 흥미로운 기사 발견
          + 이를 바탕으로 https://github.com/peterseymour/winter를 제작했고, WASM이 생각보다 간단하지 않음을 배움
     * 흥미로운 접근 방식이며, 훌륭한 작업임
          + 핵심 내용은 주로 이 파일에 있음: https://github.com/irrio/semblance/blob/main/src/wrun.c
     * Wasm-C-API를 표준 인터페이스로 채택하는 것이 좋은 아이디어였을 것이라 생각함
          + 대부분의 Wasm 런타임(Wasmmer, V8, wasmi 등)이 채택한 API로, C로 작성되어 있어 해당 API에 익숙한 개발자들이 쉽게 시도할 수 있음
          + 작성자가 Wasm에 익숙하다면 Wasmer에 패치나 개선 사항을 기여하는 것도 환영함
     * 논란의 여지가 있는 점:
          + 초기 꼬리 호출 명령어를 추가하는 것에 관심이 있는지 궁금함
          + WASM 스펙 담당자들은 이를 ""고수준""이라 하여 거부했지만, C 위원회도 Dennis Ritchie의 제안을 거부했음. Rob Pike도 Ritchie의 방향을 지지하는 것 같음. 그렇지 않다면 왜 Golang을 만들었겠는가? 꼬리 호출은 호출이 고수준일 때만 고수준임
     * Orca를 살펴보기를 권장함. 기여할 수 있는 좋은 기회가 될 것임: https://orca-app.dev
     * WebAssembly를 깊이 탐구하며 인터프리터를 처음부터 구축하는 과정을 보는 것이 정말 멋짐
     * 훌륭한 글이며, WASM 구현으로 돌아가고 싶은 동기를 부여함
     * 정말 멋진 작업임
"
"https://news.hada.io/topic?id=19130","독일 시민 운동가, X를 상대로 한 선거 소송 승리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      독일 시민 운동가, X를 상대로 한 선거 소송 승리

        Hacker News 의견

     * DSA의 새로운 법적 조항인 연구 데이터 접근 권리(DSA 제40조(12))의 집행이 이번 사건의 핵심임. 이 조항은 대형 온라인 플랫폼이 연구자에게 플랫폼의 공개 데이터에 즉시 접근할 수 있도록 요구함으로써 체계적 위험을 평가할 수 있게 함. 이 소송은 독일에서 이 권리의 사법적 집행 가능성에 대한 법적 질문을 명확히 하는 데 도움을 줌
          + 민주주의 사회에 사는 사람이 왜 이것에 반대할까라는 의문이 제기됨
          + Reuters 기사보다 더 나은 기사일 수 있다는 의견이 있음
     * Twitter 데이터를 몇 년간 다뤘던 사람의 관점에서 의견을 제시함
          + 과거 Twitter API는 매우 개방적이었고, 이는 다양한 사회 과학 연구에 큰 도움이 되었음
          + API가 점점 폐쇄적으로 변하면서 이 분야의 연구가 매우 어려워졌음
          + 이러한 결정이 연구자들에게 다시 쉽게 접근할 수 있는 기회를 제공할 수 있음
          + 그러나 ""연구자""를 정의하는 것이 Cambridge Analytica와 같은 남용을 방지하는 데 거의 불가능하다는 단점이 있음
     * Mueller 보고서가 있었음을 모두 잊고 있는 것 같음. 이러한 유형의 연구는 외국의 선거 개입을 방지하는 데 매우 중요함
     * Cambridge Analytica 스캔들 이후 연구자들에게 소셜 네트워크 데이터 접근을 허용하는 것이 나쁜 일이라고 결정했다고 생각했음
     * X가 법원의 정보 요청에 응답하지 않았고, 법원은 회사가 6,000유로의 소송 비용을 부담하도록 명령함. 이는 Pyrrhic 승리처럼 보임
     * DRI의 Michael Meyer-Resende가 수요일에 소송을 발표하면서 ""다른 플랫폼은 우리에게 그들의 플랫폼에서 공개 토론을 체계적으로 추적할 수 있는 접근을 허용했지만, X는 이를 거부했다""고 말함
          + 다른 플랫폼들이 정보를 무료로 공유하는지에 대한 의문이 제기됨
     * 여기 적용된 EU 법에 대한 FAQ가 제공됨
     * 독일이 한때 Wikipedia.de가 실제 Wikipedia로 연결되는 것을 금지했던 사건을 기억하게 됨. 이는 독일 정치인 Lutz Heilmann이 전 DDR의 Stasi 직원이었다는 기사가 있었기 때문임
     * 독일이 핵 위협을 가하는 곰을 먹인 후, 비판적인 목소리를 규제하는 데 정당성이 없다는 의견이 제기됨
     * 우익적 관점이 있을 수 있지만, Twitter가 정부 요청을 처리하는 데 추가 자원을 사용하고 싶지 않기 때문일 수 있음. Twitter는 손실을 보고 있으므로 비용을 증가시키지 말아야 함
"
"https://news.hada.io/topic?id=19146","왜 아무도 읽지 않는 블로그를 운영하는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        왜 아무도 읽지 않는 블로그를 운영하는가?

     * 광고계의 전설 Bill Bernbach는 “광고에서 가장 강력한 요소는 진실”이라고 말한 바 있음
     * 그렇다면 진실을 말해보자: 아무도 당신의 블로그를 읽지 않음
     * 몇 명이 읽을 수도 있지만, 기대만큼의 독자는 없음
     * 생각을 쏟아 붓고, 각 문장을 만들고, 이미지를 고르지만, 좋아요도 없고, 공유도 없고, 참여도 없음
     * 그렇다면 블로그를 할 의미가 있을까?

블로그에 대한 두 가지 거짓말

     * ""글을 쓰면 사람들이 올 것이다.""
          + 현실은 그렇지 않음
          + 인터넷에는 수십억 개의 블로그 글이 존재하며, 그 안에서 한 개의 글은 미약한 존재
     * ""아무도 읽지 않으면 시간 낭비다.""
          + 정말 그런가?
          + 블로깅에는 숨겨진 가치가 있음
          + ""장작을 패고 물을 나른다"" 는 오래된 격언처럼, 결과가 아니라 과정이 중요한 경우도 있음
               o 선불교(Zen Buddhism) 에서 유래한 유명한 격언으로, 단순한 일상적인 행위라도 꾸준히 수행하는 것이 중요하다는 깨달음을 담고 있음

블로깅의 숨겨진 가치

     * 글을 쓰면 생각이 명확해짐
     * 논리를 구조화하고, 불필요한 내용을 제거하는 과정에서 사고가 더 날카로워짐
     * 결국 자기 자신을 위해 쓰는 것이므로, 스스로 흥미를 느끼지 못한다면 남들도 마찬가지
     * 글쓰기를 통해 더 나은 사고를 하게 되고, 더 나은 창작물을 만들 수 있음

진짜 독자는 누구인가?

     * 미래의 나 자신
          + 시간이 지나면 블로그 글이 자신의 성장 기록이 됨
     * 단 한 명의 올바른 독자
          + 누군가가 우연히 당신의 글을 읽고 영감을 받을 수 있음
     * 작업 자체
          + 바이럴보다 중요한 것은 꾸준함
          + 깊이 있는 100개의 글이 일회성 히트작보다 오래 살아남음

블로깅과 거리 사진의 공통점

     * 글쓴이는 거리 사진 촬영을 좋아하는데, 블로깅과 비슷함
     * 카메라를 들고 다니며 순간을 포착하지만, 아무도 관심을 갖지 않음
     * 하지만 중요한 것은 본인이 ‘봤다’는 사실
     * 블로그도 마찬가지
          + 생각을 정리하고, 관찰하며, 기록하는 것이 핵심
          + 누군가 읽으면 보너스일 뿐, 중요한 것은 작업이 이루어졌다는 점

결론

     * 블로그는 결국 자기 자신을 위해 쓰는 것
     * 독자가 없어도 상관없음, 글을 쓰는 행위 자체가 가치 있는 일
     * 꾸준히 하는 것이 중요하며, 그 자체로 의미가 있음

   읽어주는 사람이 많으면 더 좋기야 하지만, 쓰는 것 자체로 도움이 되는 과정이 있다는 것에 공감합니다.

   읽는 사람이 없어도, 가상의 독자를 가정하고 글을 쓰는 점이 개인 메모와 큰 차이인 것 같아요.

   개인 일기장이나 개인 노트앱에 작성하는 것과 다른 점이 있어서 블로그 작성하는게 재밌더라구요.
     * 실제론 없는 유저를 혼자 가정하고, 작성하게됨. 이 때, 상대방을 고려해서 작성하는 습관이 생김
     * 누군가 읽어서 도움이 될지 모른다는 기대만으로도 이미 충분히 재밌는 글쓰기 습관을 가지게됨

   쓰고자 하는 목적이 무엇인지가 가장 중요할 것 같은데, RSS에 등록하게 되는 블로그들은 결국 본인만의 인사이트를 주는 곳들이었던 것 같습니다..!

        Hacker News 의견

     * 블로그에 글을 쓰는 것은 다양한 주제에 대한 신뢰성을 구축하는 매우 저렴한 방법임
          + 이는 나중에 과거에 작성한 글을 사람들에게 링크로 제공할 수 있을 때 도움이 됨
          + 신뢰성은 매우 가치 있는 자산이며, 이를 구축하는 방법에 투자할 가치가 있음
          + 사람들이 당신의 콘텐츠를 우연히 발견할 것이라고 가정하지 말고, 이미 대화 중인 사람들에게 적극적으로 링크를 보내야 함
          + 중요한 것은 독자의 수가 아니라 그들의 질임
          + 유용하게 소통하거나 미래의 기회를 제공할 수 있는 독자 몇 명이 수천 명의 무관심한 독자보다 나음
     * 블로그에 기술적인 내용을 기록하지만 거의 아무도 읽지 않음
          + 하지만 나중에 다시 필요할 때 완벽한 문서가 되어 있음
          + 내가 작성했기 때문에 완벽함
     * 어릴 때 교회에서 제단 소년으로 일했던 경험을 떠올림
          + 특별한 예배가 있을 때 학교를 빠져나와 향을 피우고 기도를 따라다니는 것이 좋았음
          + 대부분의 작은 예배에는 거의 아무도 참석하지 않았음
          + 이는 고대 종교의 복잡한 의식을 떠올리게 함
          + 기술자들이 영적인 은둔자처럼 자신의 의식을 수행하는 것과 비슷함
     * 블로그를 아무도 읽지 않을 것처럼 작성하는 법을 배움
          + 소셜 트래픽이 거의 없고, Hacker News에서만 트래픽이 발생함
          + 블로그 글쓰기는 새로운 워크플로우를 발명하게 하고 교육적임
     * 블로그를 통해 얻는 다른 이점들
          + 주제에 대한 신중한 생각을 링크로 제공할 수 있음
          + 일부 사람들과 좋은 대화와 우정을 나눌 수 있음
          + 글쓰기 실력이 향상됨
          + LLM이 학습함
     * 최근 OpenAI의 Deep Research를 위해 비용을 지불함
          + 내 블로그가 연구의 일부로 사용됨
          + 블로그 글쓰기는 잊었던 아이디어를 다시 떠올리게 함
     * 모든 것을 기록하는 이유
          + 주제에 대한 생각을 정리하고 공유할 수 있음
          + 글을 쓰기 전까지 머릿속에서 떠나지 않음
          + 몇 가지 글이 주목받아 기쁨
     * 블로그에 주로 일주일 이상의 연구가 필요한 주제를 다룸
          + 링크가 사라질 수 있기 때문에 유용함
          + 과거의 연구 자료가 사라질 수 있음
          + 블로그를 통해 내부 문서의 기초를 마련함
     * 블로그 글쓰기는 사이드 프로젝트를 완료하는 것과 같음
          + 다음 단계로 넘어갈 수 있게 해줌

   요즘 비슷한 맥락의 글이 많이 눈에 들어오네요. 기록하다보면 손가락 써주는 것 같을때도 있더라구요. 노트들이 엉성하게 모여있는 디지털가든이 나의 디지털브레인 같기도 합니다. 좋은 글 감사합니다.

   저도 스스로의 생각을 정리해보는 연습이라 생각하며 글을 쓰곤 하는데 도움이 많이 됩니다.
   욕심이야 저 뿐만 아니라 다른 누군가에게도 도움이 되었으면, 하지만 그건 말 그대로 욕심일 뿐이고 ㅎㅎ
   미래 시점의 나를 독자로 삼고 꾸준히 글로 생각을 정리해 나가는 게 좋은 것 같습니다.

   이 글을 보니 블로그에 정리해둬야지 하는 토픽들이 몇개 떠오르네요.

   '장작을 패고 물을 긷는다'는게 꽤 유명한 말이었네요.

   神通竝妙用
   運水及搬柴

   신통이네 묘용이네 하는 것이
   물긷고 땔나무 나르는 것이로다.

   방거사龐居士

   저도 올해는 개점휴업 상태인 블로그를 좀 살려볼까 생각이 드네요.
   긱뉴스에는 너무 기술얘기만 하고 있어서, 개인 취미 얘기할 공간이 필요해요 ㅎㅎ

   뭐 나의 공개된 일기장인거죠…
"
"https://news.hada.io/topic?id=19153","새로운 AI 세상 - A New AI World","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       새로운 AI 세상 - A New AI World

     * Scott Galloway의 No Mercy/No Malice 뉴스레터에 올라온 글
     * Financial Times 칼럼니스트 Robert Armstrong은 팟캐스트에서 ""AI가 훨씬 더 경쟁적이 되고, 이익이 공유되며, 많은 가치가 소비자에게 돌아가는 새로운 비전이 있다""고 언급함

답은 ""No""

     * 놀라운 생산성, 더 나아가 도파민을 불러일으키는 새로운 기술이 등장
     * 재능 있는 인재들이 기술 위에 두꺼운 혁신의 층을 쌓고(정부의 자금 지원), 소수의 CEO가 스토리텔링을 활용하여 값싼 자본에 접근하고 무차별적인 힘으로 경쟁을 압도
     * 이러한 기업들이 규제 포획(regulatory capture)에 관여하고(우리가 뽑은 사람들의 하수인이 됨), 수조 달러의 주주 가치를 창출 : GPS, 이커머스, 결제, 검색, 소셜, 스트리밍 등
     * AI는 앞서 언급한 것들 만큼 혁신적인 기술이며, 이미 소비자 및 기업 도입에 관한 기록을 세우고 있음
     * 그렇다면 어떤 조직이 수조 달러의 주주 가치를 창출하고 유지할 수 있을까? 답은... 'No'임
     * Marc Andreessen은 DeepSeek을 두고 “AI의 스푸트니크 순간”이라 표현했으나, 잘못된 비유임
     * 이것은 경쟁자가 기술 우위를 과시하는 것이 아니라 우리(미국)만이 유일하게 참여하는 게임이라는 신화를 불식시키는 것
          + 과거 소련이 핵무기로 미국 독점의 환상을 깨뜨렸듯, AI 분야에서도 다국적 경쟁이 벌어지고 있음

자전거 & 백신

     * 자전거, 위생기술, 비행기, 백신, Crispr 등은 극소수 주주가 아니라 사회 전체에 혜택이 돌아간 사례임
     * AI도 정부나 연구기관 후원, 오픈소스, 사회 기반 기술과 유사한 성격을 지녀 특정 기업의 독점 이익이 어려운 특징을 지님
          + 정부 지원 또는 대학 개발(인터넷, GPS, 백신)
          + 오픈 소스 또는 퍼블릭 도메인(Linux, Python, Wikipedia, USB)
          + 독점되기에는 너무 기본적임(자전거, 위생 시설, 비행기)
     * 결과적으로 AI로 인한 이익이 주주 대신 대중(이해관계자)에게 분산될 가능성이 있음
     * 미국에서 지나치게 이윤만 추구하는 분위기 속에서도, 전체 사회에 이익이 돌아가는 기술 발전이 중요

지난주에 있었던 일들

     * 중국의 헤지펀드 High-Flyer가 DeepSeek이라는 오픈소스 AI 챗봇을 발표
     * DeepSeek은 ChatGPT와 유사한 성능을 보이면서 훈련 비용이 500만 달러 수준으로 알려졌으나, OpenAI의 LLM 훈련 비용은 1억 달러로 추정됨
     * DeepSeek 발표 후 Nvidia 주가가 하루 만에 17% 하락하여 시가총액에서 5천억 달러 이상 증발
     * 중국 기업이 미국의 고가 AI를 저렴하게 복제한 전형적인 사례라는 평가
     * 이 하락이 일시적 조정인지, 기술주 거품 붕괴의 시작인지는 불확실하다는 입장

Gong(종소리)

     * SoftBank가 OpenAI에 400억 달러 규모 투자를 추진하며, OpenAI 가치를 3,000억 달러로 평가한다는 소식이 ""시장 정점의 신호""로 보임
     * 불과 4개월 전 대비 2배가 된 가치로, Bytedance 수준에 근접한 평가. Bytedance의 매출 멀티플이 2.3배인 반면 OpenAI는 92배에 달하는 수준
     * Masayoshi Son의 투자자들은 벤처형 수익(3~5배)을 기대하지만, 이는 OpenAI가 세계에서 가장 가치 있는 기업 중 하나가 되어야만 가능하다는 의미임

Orville Wright를 없애야 함

     * 항공 기술은 획기적인 변화와 생산성 향상을 이뤘지만, 이익의 대부분은 소비자에게 돌아갔음
          + 과거 대서양 횡단은 증기선으로 7일이 걸리고 비용도 높았음
     * 항공산업 자체는 손실이 많고 이익률이 낮아, 결국 소비자가 대부분의 가치를 가져가는 구조

약한 Flex

     * 개인용 컴퓨터가 보급될 때도, 생산성 향상 효과는 컸지만 제조사 이윤은 제한적이었음
     * Gateway Computer가 한때 시장을 주도했으나 Acer에 매각된 사례에서 보듯, 두 번째로 큰 PC 제조사도 생존을 걱정해야 했음
          + CEO가 자금이 바닥날 수 있는 실질적인 위험이 있다고 느꼈기 때문
          + DeepSeek 소식으로 Nvidia가 하루 만에 600개 Gateway를 판것과 같은 가치 하락을 겪음
     * AI 역시 엄청난 가치 창출 가능성이 있지만, 제조사보다는 사용자가 대부분의 이익을 누리게 될 수 있음
     * 백신도 인류 역사상 큰 혁신이었고, Moderna는 팬데믹 시절 500달러에 가깝다가 현재는 33달러임. 주주들에게 백신의 가치는 덧없음
     * 사적 자산은 다양한 이유로 공적 자산으로 전환될 수 있고, 경제학자들은 세부 사항에 따라 이 과정에 대해 서로 다른 용어를 사용
          + ""상품화 해제(decommodification)"", ""확산을 통한 비배제성(non-excludability through diffusion)"" 또는 ""공유화(commonization)""
          + 모두 ""여기에는 돈이 없다""는 뜻

절도

     * DeepSeek이 OpenAI 기술을 “디스틸(distill)”해 활용했다는 논란이 일어남
          + ""AI 가 AI의 일을 훔쳤다""는 아이러니
     * OpenAI 역시 인터넷상의 정보를 대규모로 사용해 모델을 개발했다는 점에서, 지식 재산권과 “공정 이용(Fair Use)” 논의가 얽힘
          + OpenAI 역시 타인 데이터를 ‘공정 이용’으로 활용한 모순
          + 과거 Steve Jobs가 Microsoft의 GUI 표절을 비판했지만, 애플 또한 Xerox PARC의 아이디어를 가져다 씀
     * 미국이 중국을 견제하려고 한 칩 수출 제한이 오히려 중국 기업들의 자체 기술 개발 동기를 자극했음
     * 대규모 자본을 통한 독주가 아니라, 전 세계 다양한 주체의 참여가 AI 발전을 빠르게 촉진할 가능성이 있음

콩(Kong)

     * 미국 기업 한두 곳이 AI 시장을 지배할 것이라는 기대가 무너지고, 여러 나라와 기업이 경쟁하는 구도가 형성됨
          + 미국의 거대 공룡(King Kong)에 대항하는, 핵방사선에 노출된 ‘고질라’ 같은 존재가 나타남 (고질라는 핵무기에 대한 메타포)
     * 이상하지만, 난 요즘 캐나다, 덴마크 그리고 도마뱀을 응원함


이 글에 달린 댓글들 정리

  AI와 블록체인 비교 - Richard McCue

     * AI는 널리 배포될 기술이지만, 현재의 과대 광고에는 부합하지 않는다고 생각함
     * AI의 발전을 비트코인 및 블록체인의 과장된 기대와 비교할 수 있음
     * 블록체인은 공공 원장으로서 조작에 강한 특성이 있으며 유용함
     * 비트코인은 채굴자들이 연료를 태우면서 블록체인을 유지하는 대가로 받는 토큰이지만, 낮은 거래 속도(초당 7건)로 인해 법정 화폐를 대체하지 못함
     * AI가 사무직을 대체할 것이라는 주장은 과장된 면이 있음
     * AI는 요약 및 교정 작업에서 나쁘지 않지만, 지식의 깊이가 부족함
     * AI가 가장 잘하는 것은 패턴 인식이며, 유방 촬영 판독 보조 도구로서 탁월한 성과를 보임
     * AI는 특정 직업에서 보조 도구로 사용될 가능성이 크며, 이 부분에서 집중적인 연구와 발전이 이루어질 것으로 예상됨

  AI의 한계 - Steve Woods

     * AI 로봇 두 개가 동일한 필터를 거쳐 동일한 데이터를 처리하는 모습을 상상하면, 인간과의 차이가 드러남
     * 인간은 협력과 창의적인 사고를 통해 더 나은 아이디어를 발전시키지만, AI는 새로운 프롬프트가 주어질 때까지 기다리는 기계일 뿐임
     * 인터넷이 새로운 데이터를 받지 않는다면, 뫼비우스의 띠처럼 무한 루프를 도는 구조가 될 것임
     * AI에 의해 구축된 디지털 환경이 처음부터 전쟁과 성, 그리고 자아 도취적인 데이터로 가득 차 있었다는 점을 우려함
     * 결국 AI는 부정적인 영향을 받은 병든 존재가 될 것이며, 이는 AI를 만든 인간들 또한 병든 존재라는 의미일지도 모름

  과학 연구 축소에 대한 비판 - Ted

     * 트럼프와 머스크가 과학 연구 예산을 삭감하려고 함
     * 연구 보조금의 간접 비용(오버헤드 차지)을 15%로 제한하는 방안이 제안됨
     * 모든 대학 연구 및 회계는 100% 투명하게 공개되지만, SpaceX와 같은 기업의 정부 보조금 사용 내역은 그렇지 않음
     * SpaceX의 관리 비용은 15% 이상일 가능성이 클거라고 생각함
     * 대학이 대규모 기부금을 보유하고 있기 때문에 연구 예산 삭감이 괜찮다는 논리는 잘못됨
     * 기부금은 특정 용도로만 사용해야 하며, 도서관이나 새로운 과학 연구에 임의로 전용할 수 없음

  머스크와 'Atlas Shrugged' - Sandy Laube

     * 머스크의 행동을 이해하려면 'Atlas Shrugged'를 제대로 읽어야 함
     * 소설에서 독립적이고 유능한 사람들이 정부와 사회의 실패를 목격하고, 모든 것이 무너진 후 새로운 사회를 만들려고 함
     * 머스크는 스스로를 존 갈트라고 생각하는 듯함

  머스크와 국제 정치 - JamesJesusAngleton's Ghost

     * 머스크가 'Moonraker'의 빌런인 Hugo Drax처럼 행동한다고 비유
     * 머스크의 DOGE 관련 친구들이 미 정부의 중요한 정보에 접근하고 있으며, 외국 정보기관이 이들을 '허니팟' 전략으로 공략할 가능성이 있음
     * 머스크는 신뢰할 수 없는 인물이며, 아파르트헤이트 시절의 남아프리카에서 형성된 도덕적 기준을 갖고 있음
     * 중국과의 광범위한 사업적 이해관계를 고려할 때, 미국을 배신하고 중국으로 갈 가능성이 있다고 주장
     * 한때 머스크는 테슬라, 스페이스X, 스타링크 등을 통해 전 세계적인 지지를 받았지만, 지금은 어두운 길을 가고 있음
     * 머스크의 결말이 존 갈트처럼 되지 않을 것이며, 오히려 러시아가 스노든을 이용한 것처럼 중국이 머스크를 이용할 가능성이 더 큼

  Deepseek에 대한 경계 - Craig Marshall

     * Deepseek은 신뢰할 수 없는 정권에서 개발한 모델로, 그 목적이 불분명함
     * Deepseek이 제공하는 정보는 기존 AI보다 더 신뢰할 수 없을 가능성이 있음
     * 틱톡을 금지했다면, Deepseek도 규제 대상이 되어야 함
     * 자유 시장을 논하기 전에 권위주의 정권에 대한 경계를 먼저 생각해야 함
     * 자유 시장은 지도자를 '곰돌이 푸'나 '썩은 오렌지'라고 부를 수 있는 정권에서만 성립할 수 있음

  AI의 긍정적 영향 - Ania Gębka-Suska

     * AI가 사회에 미칠 긍정적인 영향에 대해 깊이 공감함
     * AI의 발전으로 인해 삶이 더욱 풍요로워질 것이라고 확신함
     * Scott의 통찰력 있는 글 덕분에 자신의 낙관적인 관점을 더 잘 표현할 수 있게 됨

  Gateway 실패 원인 - J

     * Gateway의 몰락에는 오만함이 작용했을 가능성이 있음
     * 한때 주주들이 거액의 소송을 제기했으며, 경영진 중 누군가가 고객을 '멍청한 X'라고 불렀다는 사건이 있었음
     * 법적 비용이 막대하게 증가하면서 기업이 자금난에 빠졌을 가능성이 있음

  Xerox의 전략 실패 - DAVIDBF

     * Xerox 직원으로서 1980년대 초 Xerox 820 II PC를 구매했음
     * 당시 많은 직원들이 Xerox 경영진이 데스크톱 컴퓨터와 네트워크 기술을 무시하고 복사기 사업에 집중한 것을 이해하지 못했음
     * 1990년대와 2000년대에도 Xerox는 여전히 복사기에만 투자함
     * 기업 경영진이 고객 방문 시, 만족하는 고객이 아니라 서비스를 해지한 고객을 찾아가야 했음
     * 사람들은 개인용 프린터를 원했으며, Xerox는 이를 간과함
     * 어느 날 사무용품 매장에서 Xerox 브랜드의 종이 분쇄기를 보고 충격을 받았음
     * Xerox 직원으로서 회사에 대한 애정이 있었으며, 최소한 훌륭한 은퇴자 치과 보험이 남았다는 점이 위안이 됨

  캐나다의 경제적 도전 - Brent Dane

     * AI가 더 널리 보급될 것이라는 점은 고무적임
     * 하지만 캐나다는 경제적 공격을 받고 있으며, 미국의 기술 선전과 트럼프 지지자들이 캐나다의 자원을 장악하려 한다는 우려가 있음
     * 이에 맞서 독립성을 강화하고 국가 이익을 우선시해야 함
     * 미국 기업 의존도가 높았지만, 이제 자체적인 경제 전략을 세워야 함
     * 부정적인 정치적 영향과 미국이 소유한 캐나다 언론에 대한 반발 필요

  상업적 방향성에 대한 비판 - Raye Scott

     * 음모론자 Alex Jones와 다를 바 없어 진듯.
     * Prof G(스콧 캘러웨이)가 과거의 신뢰받는 교수 이미지에서 벗어나 점점 더 상업적인 방향으로 가고 있다고 지적
     * 돈에 대한 집착이 브랜드를 망치고 있다고 생각함

  Wabi Sabi 개념 추천 - Craig Gordon

     * 일본의 'Wabi Sabi' 개념을 탐구할 것을 추천
     * Beth Kimpton의 책 Wabi Sabi를 읽어보면 흥미로울 것임
     * 16세기 일본과 현재의 사회가 유사한 점이 있으며, 역사는 반복되지 않지만 비슷한 패턴을 보인다고 주장
     * 불완전함을 받아들이는 철학적 태도가 필요함
"
"https://news.hada.io/topic?id=19139","머스크의 DOGE 팀에 합류한 10대는 "The Com" 출신 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   머스크의 DOGE 팀에 합류한 10대는 ""The Com"" 출신

     * 19세의 에드워드 코리스틴이 엘론 머스크의 정부 효율성 부서(DOGE)에서 미국 정부의 민감한 시스템에 접근할 수 있었음
     * 코리스틴은 과거 사이버 범죄 커뮤니티와의 연관성으로 인해 보안 승인을 받지 못했어야 했음
     * DOGE 팀은 미국 시민의 개인 및 민감한 데이터에 접근하여 여러 정부 기관의 데이터베이스를 장악함
     * 에드워드 코리스틴
          + 코리스틴은 'The Com'이라는 사이버 범죄 네트워크의 일원이었음
          + Tesla.Sexy LLC라는 회사를 창립하고 러시아 시장을 대상으로 하는 AI 봇 서비스를 제공함
          + 2022년에는 DDoS 공격 방어 회사인 Path Networks에서 근무했으며, 내부 문서를 유출한 혐의로 해고됨
     * The Com의 문화와 위험성
          + The Com은 사이버 범죄 커뮤니티로, 구성원 간의 괴롭힘, 해킹, 협박이 빈번하게 발생함
          + 전직 구성원도 여전히 공격과 협박의 대상이 될 수 있음
          + 이러한 문화는 정부 보안 승인을 받기에 큰 위험 요소로 작용함
     * DOGE와 정부 데이터 접근 논란
          + DOGE 팀이 정부 데이터베이스에 빠르게 접근할 수 있었던 점에 대한 의문 제기
          + DOGE의 활동을 중단시키기 위한 여러 소송이 진행 중이며, 일부 주 검찰총장들은 DOGE의 데이터 접근을 막기 위한 소송을 계획 중임
     * 정치적 반응 및 논란
          + 트럼프 대통령과 공화당 지도자들은 DOGE의 활동에 대해 대체로 무관심한 태도를 보임
          + DOGE의 활동을 제한하기 위한 법적 조치가 진행 중이며, 여러 정부 기관이 DOGE의 데이터 접근을 차단하기 위한 조치를 취하고 있음

        Hacker News 의견

     * 모든 사용자에게: 댓글을 달기 전에 가이드라인을 확인하고, 정보가 부족하거나 분노만 가득한 댓글은 피해야 함
          + 이러한 일반적인 댓글은 토론을 덜 흥미롭게 만들고, 이는 우리가 원하는 방향이 아님
          + 우리는 호기심 있는 대화를 원함
          + 이 사이트의 특정 목적을 보호하기 위해 노력해야 함
          + 이 기사는 여러 번 게시되었고 사용자에 의해 즉시 플래그 처리되었음
          + 이번에는 새로운 정보가 있어 플래그를 해제했음
          + 흥미롭고 호기심 많은 토론을 만들어야 함
          + 또 다른 불필요한 논쟁으로 끝나면 플래그가 맞았음을 증명하게 됨
     * 데이터 접근에 대한 우려가 있음
          + 모든 일반적인 통제가 우회된 것처럼 보임
          + DOGE 사람들이 시스템에 매우 낮은 수준의 접근을 가졌음
          + 민감한 데이터의 복사본이 그들의 소유에 있을 가능성이 있음
          + 무엇이 복사되었고 어디에 저장되었는지 아무도 모름
          + 이러한 접근은 원칙적이고 선의의 사람들에게도 위험할 수 있음
          + 여기와 같은 명백한 위험 신호가 있는 사람들에게 주는 것은 무책임함
     * FBI가 해체되는 상황에서 FBI는 어디에 있었는지 궁금함
          + FBI가 악의적인 존재라고 믿었더라도, 자신을 방어하지 못했음
          + 접근하는 적으로부터 자신을 방어하지 못했음
     * DOGE에 대해 들을 때마다 Robert McNamara의 국방부가 떠오름
          + 산업과 학계의 ""Whiz Kids""가 군대의 관료주의 문제를 해결하려 했음
          + 베트남에서 패배했고, 그들의 작업으로 인해 태어난 사람들에게 결함이 있음
          + 그러나 그들은 이력서를 채우고 컨설턴트로서의 삶을 보장받았음
     * Elon이 정부 지출을 줄이려 했다면 왜 십대 프로그래머 팀을 보내는지 의문임
     * 정보 기관이 사이버 범죄 현장에서 활동하는 젊은 사람들을 모집하는 것이 일반적인 이야기임
          + IT 보안 산업도 이 접근 방식을 채택했음
          + 대학에서 가르치기 어려운 주제임
          + 은행 해킹을 시연한 학생이 고용된 사례가 있음
          + 이러한 모집자들이 더 엄격한 감시를 받기를 바람
          + 폭력적인 거리 갱단의 일원으로 묘사된 적은 없음
          + 스마트하지만 장난기 많은 사람으로 묘사됨
          + 국가 안보나 은행 계좌를 책임지기에는 적합하지 않을 수 있음
          + 다른 IT 보안 산업 종사자들도 이 문화를 경험했는지 궁금함
     * Edward Big Baller가 Elon이 선거를 훔쳤다고 트윗한 것과 관련이 있는지 궁금함
     * 보안 승인이 중요한 이유는 민감한 정부 정보를 다루는 사람들이 미래에 적대자에게 이용될 수 있기 때문임
          + 이러한 아이들 중 한 명이 더 나쁜 비밀을 가지고 있을 수 있음
          + 미국의 적대자들이 그들의 정보를 조사할 가능성이 있음
          + 가족이 적대자에게 이용될 수 있음
          + 시스템을 파괴하는 것이 더 중요하다면 그렇게 할 수 있음
     * dang에게 감사함
          + 올바른 결정을 내렸다고 생각함
          + 커뮤니티가 우호적으로 논의할 수 있도록 믿어줘서 고마움
     * 정부는 90%가 규범에 의해, 10%가 법에 의해 자치된다는 격언이 기억남
          + 미국 법이 위반되는지는 모르겠지만, 규범이 무시되는 것은 외부에서 볼 때 경고 신호임
          + 미국이 불안정하고 신뢰할 수 없게 보임
"
"https://news.hada.io/topic?id=19106","Show GN: 오픈소스 - 맥용 Ollama Client "LLM Hippo"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 오픈소스 - 맥용 Ollama Client ""LLM Hippo""

   맥용 LLM Hippo는 Ollama가 설치된 컴퓨터에 연결하여 대규모 언어 모델(LLM)과 상호 작용할 수 있는 Mac 클라이언트 앱입니다.

   주요기능
     * 로컬 LLM 액세스: 로컬 LLM 연결 http://localhost:11434
     * 원격 LLM 액세스: IP 주소를 통해 올라마 호스트에 연결
     * 사용자 지정 프롬프트: 사용자 지정 명령어 설정 지원
     * 다양한 오픈 소스 LLM(Deepseek, Llama, Gemma, Qwen, Mistral 등) 지원
     * 사용자 지정 LLM 지침 설정
     * 이미지 인식 지원(지원하는 모델에 한함)
     * 직관적인 채팅형 UI
     * 대화 기록: 채팅 세션 저장 및 관리
     * 한국어, 영어, 일본어, 중국어 지원
     * 마크다운 형식 지원

   혹시 파일 업로드도 지원할 계획이 있나요?

   적당한 모델을 찾으면 한번 해보겠습니다. ^^
"
"https://news.hada.io/topic?id=19054","Show GN: 캐럿: 실시간 기록부터 요약까지 해주는 똑똑한 AI 미팅노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 캐럿: 실시간 기록부터 요약까지 해주는 똑똑한 AI 미팅노트

   캐럿은 실시간으로 대화를 기록 & 번역해주는 AI 미팅 노트에요.
   2주만에(!) 만들었지만, 클로바노트 등 다른 도구보다 10배 좋다고 이야기드리고 싶어요.
    1. 어떤 온·오프라인 회의도 기록할 수 있어요. 미팅 봇 초대 없이 Google Meet부터 Zoom, 슬랙 허들까지!
    2. 갑작스러운 회의에도 걱정하지 마세요. 자동으로 인식, 클릭 한번으로 기록할 수 있어요.
    3. 실시간으로 자막과 번역이 나와요. 잠깐 놓쳐도 스크롤 한번으로 따라잡을 수 있어요.
    4. 내 생각을 노트에 끄적이면, 그걸 바탕으로 내가 필요한 내용만 담아 요약해드려요.

   매번 일일이 클로바노트를 켜시거나 미팅 봇을 초대하셨던 분들,
   영어 등 외국어로 회의하시면서 억양이나 낮선 표현들로 맥락을 놓치곤 하셨던 분들,
   캐럿을 사용해보시면 다시는 이전으로 돌아가실 수 없을 거에요!

   지금 가입하시면 2주 동안 사용하실 수 있는 200분 크레딧을 무료로 드리고 있어요. 한 번 사용해보시고 이야기를 들려주세요 :)
   https://caret.so/ko

   안녕하세요. 가입 중에 구글 캘린더 접근 권한을 거부했는데 가입 진행이 안되더라구요.
   혹시 가입할 때 구글 캘린더 접근 권한은 필수인가요?

   안녕하세요! 네, 구글 캘린더 접근 권한을 필요로 합니다.
   미팅 자동 인식을 통한 알림 등 회의를 놓치지 않고 까먹지 않게 도와주기, 미팅 참여자들에게 정보 공유 등을 위해 받고 있어요!

   넵 확인 감사합니다~!

   '10배'는 측정치인가요?

   안녕하세요. 관심이 있어 사용해보려고 하는데요.
   홈페이지에 번호로 전화를 하니 다른 회사라고 답변해주시는데 번호 확인을 부탁드려도 될까요?

   안녕하세요! 우선 임시로 전화번호로 변경해두었습니다. 저희가 사용하던 법인 전화번호가 사용이 안되어서 만료가 되었다고 하네요ㅠㅠ

   안녕하세요, 혹시 support@caret.so로 이메일 또는 홈페이지 우측 하단의 대화를 통해 문의를 주실 수 있으실까요? 전화번호의 경우에는 바로 확인해보겠습니다. 다만 온라인이 답변이 훨씬 빠르다는 점 먼저 안내 드립니다!

   아하!! 그렇다면 톡으로 문의를 드려보겠습니다 :)

   안녕하세요! 문의가 아직 없는 것 같아서, 혹시 이메일로 연락을 해주실 수 있으실까요?

   GeekNews의 화력이 엄청나네요!
   저희가 내부적으로 사용하는 데이터베이스에서 너무 많은 요청들이 몰려, 급하게 스케일링을 하고 있습니다. 다시 한번 많은 관심 감사합니다!

   서버 증설 완료하였습니다~

   캐럿으로 Zoom 회의를 녹음하면, 오디오 품질이 떨어지네요. 간섭이 발생하는 것 같습니다.

   인도 억양은 지원이 안 되네요.

   안녕하세요! 말씀주신 문제를 조금 더 자세히 확인해보고 싶은데, 혹시 support@caret.so로 메일을 보내주실 수 있으실까요? 빠르게 확인해보겠습니다.

   넵, 메일로 관련 사항 송부했습니다.
"
"https://news.hada.io/topic?id=19182","AI의 미래를 정의하는 인터페이스 디자인 혁신들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AI의 미래를 정의하는 인터페이스 디자인 혁신들

     * 인터페이스 디자이너들이 이전에 없던 새로운 사용자 경험을 개척 중임
     * 모바일 터치 인터페이스 초창기처럼, 지금은 AI와 어떻게 협업할지에 대해 모두가 실험하며 배워가는 시기임
     * 작은 성공 사례가 등장하면 곧바로 업계 전반이 이를 채택함
     * AI 인터페이스를 정의하는 여러 혁신적 패턴을 살펴봄으로써, 앞으로의 방향성을 가늠해보고자 함

1. 대화형 패러다임 (ChatGPT)

     * 핵심 인사이트: 인간은 대화를 통해 복잡한 아이디어를 쉽게 표현할 수 있음
     * 영향: 대화 자체가 인간-AI 상호작용의 근본 축으로 자리 잡게 됨
     * GPT가 개발자 콘솔에만 있을 때는 대중성이 낮았음
     * 자연스러운 대화형 접근으로 전환하면서 폭발적인 관심을 받게 됨
     * 향후에도 대화 기반 상호작용은 계속 중요한 역할을 할 가능성이 높음

2. 출처 투명성 (Perplexity)

     * 핵심 인사이트: 소스가 명시되지 않으면, 사용자는 AI 응답을 신뢰하고 검증하기 어려움
     * 영향: 검색과 연구 기능을 갖춘 AI 도구에서 출처 제공이 기본적 요구 사항으로 자리 잡게 됨
     * ChatGPT 초창기에는 정보의 출처를 알 수 없어 불편함이 있었음
     * Perplexity가 AI 답변에 실시간 출처를 제시해 신뢰도를 높였음
     * 이 패턴은 다양한 AI 검색 툴에 빠르게 확산되고 있음

3. 창의적 통합 (Claude Artifacts)

     * 핵심 인사이트: 대화로 텍스트만 생성하는 데 그치지 않고, 구조화된 재사용 가능한 산출물을 만들어낼 수 있음
     * 영향: AI가 아이디어 생성에서 끝나지 않고, 직접 결과물을 만들어내는 창의적 워크플로우가 가능해짐
     * Artifacts를 활용해 AI와의 대화를 통해 즉시 사용 가능한 산출물을 생성할 수 있었음
     * 아이디어 단계부터 AI가 중심에 서서 대화 속에서 결과물을 함께 다듬어 가는 경험을 제공함
     * 향후에는 이런 대화형 생성 과정을 다른 툴이나 플랫폼과 연동하는 방식이 더 발전할 것으로 보임

4. 자연스러운 상호작용 (음성 입력)

     * 핵심 인사이트: 음성으로 말하는 방식이 글 타이핑보다 훨씬 풍부한 맥락을 전달할 수 있음
     * 영향: AI가 즉각적으로 더 폭넓은 정보를 이해하고, 사용자는 자유롭게 발상을 전개할 수 있게 됨
     * 기존 음성 비서들이 부정확했기 때문에 음성 입력에 대한 기대치가 낮았음
     * 하지만 AI 음성 인식 수준이 향상되어, 말 그대로 ‘생각 흐름’을 빠르게 전달 가능해짐
     * 글을 쓸 때보다 편하게 브레인스토밍할 수 있어 차세대 창의적 스킬로 주목받고 있음

5. 워크플로우 통합 (Cursor IDE)

     * 핵심 인사이트: 사람들이 원래 작업하던 환경에 AI를 깊이 융합하면, 생산성을 극적으로 끌어올릴 수 있음
     * 영향: IDE가 코드 작성과 동시에 AI와의 대화를 결합해, 새로운 개발 경험을 제공함
     * Cursor IDE에서는 AI가 파일 시스템에 바로 접근해, 결과물을 즉시 코드로 반영할 수 있음
     * 기존 코드베이스를 이해하지 못해서 막히는 부분을 AI가 즉각 설명해주며 개발 과정을 가속화함
     * 출력물이 즉시 활용 가능한 형태로 제공되어, 추가적인 복사/붙여넣기 단계를 줄여줌

6. 주변적 보조 기능 (Grok 버튼 on X)

     * 핵심 인사이트: 사용자가 정보를 이해하지 못할 때 곧바로 AI 도움을 받을 수 있으면 유용함
     * 영향: 온라인에서 유입되는 엄청난 양의 정보를 실시간으로 해석하고 맥락을 파악하는 능력이 강조됨
     * X(트위터) 피드에 Grok 버튼이 등장해, 게시물에 대한 추가 정보를 즉시 받을 수 있음
     * AI가 게시물의 의도나 배경 맥락 등을 즉각 분석해줌
     * 이 방식은 결국 웹 전반으로 확장될 가능성이 있으며, OS 레벨 보조 기능으로도 이어질 수 있음

7. 과정 투명성 (Deepseek)

     * 핵심 인사이트: AI의 추론 과정을 드러내면 사용자가 결과를 더 잘 이해하고 신뢰하게 됨
     * 영향: AI가 어떻게 생각하는지 보여주면서, 중간 아이디어나 논리를 인간이 직접 확인할 수 있게 됨
     * Deepseek의 R1 모델은 AI의 '생각'을 노출해 화제가 됨
     * 사용자가 AI의 중간 사고 과정을 보면서 불필요하거나 오류가 있는 부분을 걸러낼 수 있음
     * 향후에는 추론 노출이 필수적이지 않을 수 있지만, 최소한 선택적으로 확인할 수 있는 옵션이 될 것임

8. 인터페이스 보류 (Midjourney)

     * 핵심 인사이트: 핵심 기술 구현에 집중하고, 인터페이스 구축을 늦추는 것도 전략적 선택이 될 수 있음
     * 영향: 우선 AI 모델 자체의 품질을 높여 사용자에게 확실한 가치를 전달하는 데 초점을 맞춤
     * 시각 창작 도구임에도 불구하고 초기에는 Discord에 통합해 별도 UI를 만들지 않았음
     * 이 접근으로 개발 리소스를 모델 개선에 집중할 수 있었고, 커뮤니티의 즉각적인 피드백도 빠르게 확보함
     * 지금은 웹 UI를 갖추었지만, 초기 전략이 성공의 발판이 됐음

마무리 생각

     * 위의 여덟 가지 사례는 인간과 AI가 협력하는 새로운 시대의 중요한 전환점임
     * 모두 대담한 실험에서 비롯된 디자인 선택으로, 빠르게 확산되어 업계 표준이 됨
     * 대화형 접근, 창작 워크플로우 통합, 모델의 추론 과정 노출 등은 모두 AI와의 협업을 한층 발전시킴
     * 지금이야말로 디자이너·개발자·크리에이터들이 AI 인터페이스를 함께 정의해나갈 수 있는 시기임
     * 앞으로 어떤 새로운 패턴이 등장할지, 그리고 우리가 어떤 혁신을 만들어갈지 기대됨

   이런 내용 너무 좋습니다.
   어제 chat.qwenlm.ai 을 사용해봤는데, 모델 선택하는 인터페이스가 괜찮았습니다.
   모델 선택 옆에 다른 모델과 비교하는 버튼이 있는데 이것을 누르면, 하단에 모델 선택하는 콤보박스가 추가됩니다.
   이때 질문을 하면, 답변이 각 모델에 해당하는 박스에 나뉘어져 출력됩니다.
"
"https://news.hada.io/topic?id=19084","수백만 개의 PDF를 처리하는 방법과 Gemini 2.0이 모든 것을 바꾸는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             수백만 개의 PDF를 처리하는 방법과 Gemini 2.0이 모든 것을 바꾸는 이유

     * PDF를 텍스트 청크로 변환(chucking)하는 과정은 대규모 RAG 시스템 구축 시 가장 골치 아픈 문제 중 하나임
     * 오픈소스, 상용 솔루션이 모두 존재하지만, 정확도·확장성·비용 효율성 측면에서 만족스러운 결과를 내기는 어려운 상태임
          + 예: NVIDIA의 nv-ingest는 여러 서비스를 쿠버네티스 클러스터로 구성해야 하고, GPU 자원을 많이 소모하는 복잡한 방식임
          + 일부 상용 서비스도 비용 대비 정확도가 부족하거나, 대규모 문서에 적용하기엔 가격이 천문학적으로 상승하는 문제가 있음

Gemini Flash 2.0의 등장

     * 대규모 모델(LLM)을 OCR·PDF 변환 등에 활용하려는 시도가 있었지만, 실제 비용 절감 효과가 미미하고 예측 불가능한 오류가 많았음
          + 예: GPT-4o가 테이블에 불필요한 셀을 추가하는 사례가 보고됨
     * Gemini Flash 2.0은 1.5 Flash 버전에 비해 현저히 향상된 정확도와 비용 효율성을 내는 것으로 평가됨
          + 내부 테스트 결과, 거의 완벽한 OCR 정확도를 달성하면서 비용은 매우 저렴함
     * Google의 개발자 경험(Developer Experience)은 OpenAI보다 다소 뒤처진다는 평가가 있지만, 합리적인 가격은 큰 강점임

비용 및 정확도 비교

     * PDF를 Markdown 형식으로 변환해낼 때, Gemini Flash 2.0이 페이지당 처리 비용 측면에서 우수함
          + 2.0 Flash: 약 6,000페이지/$1
          + 2.0 Flash Lite: 약 12,000페이지/$1 (테스트 전)
          + 1.5 Flash: 약 10,000페이지/$1
          + AWS Textract: 약 1,000페이지/$1
          + OpenAI 4o-mini: 약 450페이지/$1 등
     * 테이블 추출 정확도를 살펴보면, Reducto 자체 모델이 0.90으로 가장 높았고, Gemini 2.0 Flash와 Anthropic Sonnet이 0.84 수준을 보였음
          + Gemini가 틀린 것으로 보이는 사례들은 대부분 구조적 형식 문제였고, 실제 숫자를 잘못 인식하는 경우는 적었음
     * 그 외 텍스트 추출은 거의 완벽에 가깝게 동작함

문서 분할(Chunking)과 LLM 활용

     * RAG 파이프라인에 활용하기 위해서는 추출된 텍스트를 의미 단위로 쪼개는 과정이 필요함
     * 대형 LLM을 이용하면 텍스트 경계를 더 자연스럽게 잡아낼 수 있다는 연구 결과가 있음
     * 다만 지금까지는 비용이 너무 높아 실제 대규모 문서 세트에 적용하기 어려웠음
     * Gemini Flash 2.0 덕분에 LLM 기반 청크 분할을 대규모 문서에도 저렴하게 적용할 수 있게 됨
          + 예: 1억 페이지 규모의 PDF 코퍼스를 약 $5,000에 처리 가능함
     * 간단한 예시 프롬프트:

     OCR the following page into Markdown. Tables should be formatted as HTML.
     Do not sorround your output with triple backticks.
     Chunk the document into sections of roughly 250 - 1000 words. Our goal is
     to identify parts of the page with same semantic theme. These chunks will
     be embedded and used in a RAG pipeline.
     Surround the chunks with <chunk> </chunk> html tags.

Bounding Box 문제

     * PDF에서 텍스트 위치 정보(예: Bounding Box)를 유지해야, 사용자에게 정확한 근거를 제공할 수 있음
     * Markdown으로 변환 시 위치 정보가 손실되는 것은 큰 단점임
     * 일부 연구에서 LLM이 이미지·문서 내 공간적 이해도 가능하다는 예시가 있었으나, 현재 Gemini 모델은 정확한 Bounding Box를 제공하지 못하는 상태임
     * Google이 추가 학습이나 Fine-tuning을 통해 문서 레이아웃 데이터를 강화한다면 해결될 가능성이 있음

이유와 중요성

     * 저렴하고 정확한 PDF 추출 및 분할 솔루션은 대규모 문서 인덱싱 파이프라인을 단순화하고 확장성을 높이는 핵심 요소임
     * parsing, chunking, bounding box 문제를 해결하면 LLM 기반 문서 처리가 훨씬 수월해질 전망임
     * 향후 완성도 높은 오픈소스 라이브러리가 속속 등장할 것으로 보이며, 이는 다양한 기업과 개발자들이 손쉽게 활용할 수 있는 기반이 될 것임
     * Google의 AI Startup 크레딧 프로그램 관련 정보를 알고 있는 사람이 있다면 연락을 희망함

주석

     * [1] Reducto vs Gemini vs 원본 PDF를 비교한 예시 이미지를 첨부함
     * [2] Gemini Flash 2.0 비용 계산: 입력 이미지 비용 $0.00009675, 400 토큰당 $0.0000525 출력 비용 기반으로, 대략 6,379페이지/$1 산정함

   비용이나 성능 측면에서 에이전트 청킹이 효과를 좀 내겠군요

   LLM-Ready format 으로 변환하는 시장이 치열하네요.
"
"https://news.hada.io/topic?id=19140","현대의 예언자인가 아니면 헛소리 기계인가 - ChatGPT 세상에서 번영하는 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             현대의 예언자인가 아니면 헛소리 기계인가 - ChatGPT 세상에서 번영하는 방법

     * 우리는 초지능 컴퓨터 시스템이 혁신과 번영의 시대를 가져올 것이라 기대함
     * ChatGPT의 등장으로 일부에서는 현대판 예언자라 부르고, 다른 일부는 허튼소리 기계라고 평가함
     * 기술 전문가와 홍보 관계자들은 LLM이 우리의 업무, 학습, 놀이, 의사소통, 창작, 연결 방식을 혁신할 것이라 주장함
     * AI는 일상생활의 거의 모든 측면에 영향을 미칠 것임
     * 사람들이 일반적인 언어로 컴퓨터와 대화할 수 있도록 하여, 컴퓨팅 접근성을 크게 향상시킴
     * 그러나 AI 시스템이 유용한 역할을 하는 만큼, 정보 환경이 거대한 허튼소리로 포화될 위험도 있음

     ""이 기술은 인류가 창조한 가장 혁신적인 기술이 될 것이며, 인쇄기, 전기, 인터넷의 발명에 비견될 수 있음""
     — Sam Altman, OpenAI CEO

     * 좋든 싫든 LLM은 우리 생활에 자리 잡음
     * 온라인에서 LLM이 생성한 콘텐츠를 읽고 있으며, 많은 사람들이 LLM 챗봇과 상호작용함
     * 일부는 LLM을 사용하여 직접 콘텐츠를 제작하기도 함

LLM 시대에서 살아남는 법

     * 5~10분 분량의 강의들을 통해 LLM이란 무엇인지, 어떻게 작동하는지 설명할 예정임
     * 시간과 노력을 절약할 수 있는 경우와 오류를 범할 가능성이 높은 경우를 구분하는 법을 배울 수 있음
     * 과장된 마케팅 속에서 실제 유용한 정보와 과장된 주장을 구별하는 법을 익히는 것이 중요함

레슨 목차

     * 레슨 1: 오토컴플리트의 폭주 (Autocomplete in Overdrive)
     * 레슨 2: 허튼소리의 본질 (The Nature of Bullshit)
     * 레슨 3: 튜링 테스트와 허튼소리 벤치마크 (Turing Tests and Bullshit Benchmarks)
     * 레슨 4: 대화 가능한 컴퓨터 (Computers You Can Talk To)
     * 레슨 5: 이해하기 어렵고, 고치기는 더 어려운 (Hard to Understand, Harder to Fix)
     * 레슨 6: 아니, 그들은 그렇게 하지 않아요! (No, They're Not Doing That!)
     * 레슨 7: 음성 복제에서 새우 예수까지 (From Voice Cloning to Shrimp Jesus)
     * 레슨 8: 독버섯과 강아지 여권 (Poisonous Mushrooms and Doggie Passports)
     * 레슨 9: 파란색 링크는 중요하다 (Blue Links Matter)
     * 레슨 10: 글쓰기의 인간 예술 (The Human Art of Writing)
     * 레슨 11: 교육의 변화? (Transforming Education?)
     * 레슨 12: AI 과학자 (The AI Scientist)
     * 레슨 13: 허튼소리 기계와 허튼소리 노동 (Bullshit Machines for Bullshit Work)
     * 레슨 14: 진정성 (Authenticity)
     * 레슨 15: 인공지능과 인간의 어리석음 (Artificial Intelligence and Human Stupidity)
     * 레슨 16: 첫걸음 오류 (The First-Step Fallacy)
     * 레슨 17: 너만의 트루먼 쇼 (Your Own Private Truman Show)
     * 레슨 18: 민주주의 (Democracy)

        Hacker News 의견

     * 이 기사는 AI에 대한 매우 확신에 찬 진술로 가득 차 있지만, 근거가 부족하고 일부는 잘못된 것 같음
          + AI가 ""기초 진실이 없다""는 주장은 틀림
          + AI가 논리적으로 추론할 수 없다는 것은 과장된 주장임
          + AI가 결론에 도달한 방법을 설명할 수 없다는 것도 사실이 아님
          + 이러한 확신에 찬 진술은 오히려 약한 모델에 대한 비판과 유사함
     * 친구가 정부 정책에 영향을 미치는 팀에서 일하는데, 팀의 젊은 멤버가 LLM에서 가져온 숫자로 가득 찬 보고서를 작성했음
          + 보고서는 부정확하고 신뢰할 수 없었음
          + 개발자들은 LLM의 작동 방식을 잘 이해하고, 출력의 부정확성을 검토하고 수정할 수 있음
          + 많은 사람들이 이러한 기기를 신뢰하게 될 것이며, 부정확한 콘텐츠가 넘쳐날 것임
     * 현재 버전의 AI는 학생들에게 위험할 수 있으며, 그들을 더 나쁘게 만들 수 있음
          + 비기술적인 친구들에게 도움을 줄 때는 변화율을 보고, 신뢰성이 가능성보다 크게 뒤처진다는 점을 강조함
          + 적대적 환경은 여전히 해결되지 않았으며, 예측이 불확실함
          + 앵무새 같은 사람들의 예측은 신뢰할 수 없음
          + RL이 존재하기 때문에 자동 수정 주장은 과장됨
          + 비관론자들은 아마도 틀렸지만, 그들의 주장을 경시하는 사람들은 비관론자들보다 덜 이해함
     * ""The AI scientist"" 섹션은 훌륭했음
          + 앵무새에 대한 논증의 함정에 빠지지 않고, AI의 긍정적인 사용 사례를 제시함
          + 과학에서의 AI의 긍정적 사용과 해로운 예시, 시간 낭비인 예시를 객관적으로 제시함
     * 이 자료는 기본적이지만 넓은 청중에게 유익함
          + 모델을 인간화하지 말라는 점을 언급한 것이 좋았음
          + 50세 이상의 정책 입안자들이 이 과정을 듣는 것이 19세의 신입생보다 더 유익할 것임
     * LLM이 다음 토큰을 추측하는 것만으로 앵무새라고 하는 것은 의미가 없음
          + 인간도 키보드에서 다음 키를 추측함
          + 이 관점은 다가오는 기술 혁명에 대해 눈을 감는 것에 불과함
     * 학생들이 AI 환경을 탐색하는 것은 도전적임
          + 학생들에게 이 자료를 공유할 것을 고려 중임
          + LLM을 모든 것에 사용하려는 학생은 자료에 참여하지 않을 가능성이 있음
          + LLM 없이 글을 쓰는 것이 과학 분야에서 왜 중요한지 설명하는 단락을 추가할 것을 제안함
     * 제목이 너무 반기술적이지 않았으면 좋겠음
          + 직장에서 이 과정을 추진하고 싶지만, 그렇게 하면 부정적이고 방해적인 사람으로 보일 수 있음
     * 이 자료는 훌륭한 자원임
          + 의료 학생들에게 ML과 LLM의 발전에 대한 기본 지식을 제공하는 과정을 설계 중임
          + 의료 ML을 이해시키고, 기술의 가능성을 보여주며, 안전하게 채택할 수 있는 경로를 제시하는 것이 목표임
     * 이 자료를 정말 즐기고 있음
          + Lesson 11에서 몇 가지 오타를 발견했음
          + ""No one is going to motivated by a robotic...""에서 ""be""가 빠졌음
          + ""People who are given a possible solution to a problem tend to less creative at...""에서 ""be""가 빠졌음
"
"https://news.hada.io/topic?id=19068","애플, 초대(Invites) 앱 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          애플, 초대(Invites) 앱 공개

     * Apple은 iPhone 사용자를 위한 새로운 앱, Apple Invites(초대)를 소개함
     * 이 앱은 사용자들이 가족과 친구들을 위한 맞춤 초대장을 쉽게 만들고 공유할 수 있도록 도와줌
     * 사용자는 초대장을 만들고 RSVP를 관리하며, Shared Albums에 참여하고 Apple Music 플레이리스트와 상호작용할 수 있음
     * iCloud+ 구독자는 초대장을 만들 수 있으며, Apple 계정이나 기기가 없어도 누구나 RSVP 가능함

공유하는 순간을 만들고 담아내는 아름다운 초대장

     * Apple Invites를 사용하여 사용자는 사진 라이브러리나 앱의 배경 갤러리에서 이미지를 선택하여 초대장을 시작할 수 있음
     * Maps와 Weather와의 통합으로 손님에게 이벤트 장소와 날씨 정보를 제공함
     * 참가자는 Shared Album에 사진과 비디오를 쉽게 기여하여 추억을 보존하고 이벤트를 다시 경험할 수 있음
     * Apple Music 구독자는 협업 플레이리스트를 만들어 손님이 Apple Invites에서 직접 접근할 수 있도록 함

Apple Intelligence로 더욱 즐거워지는 초대

     * Apple Intelligence를 통해 독창적인 이벤트 초대장을 쉽게 만들 수 있음
     * 사용자는 Image Playground를 통해 사진 라이브러리의 개념, 설명, 사람들을 사용하여 독창적인 이미지를 생성할 수 있음
     * 초대장을 작성할 때 Writing Tools를 사용하여 적절한 문구를 찾을 수 있음

더욱 간단해지는 이벤트 관리 및 참석

     * 호스트는 초대 경험을 완전히 제어할 수 있으며, 이벤트를 쉽게 보고 관리하고, 링크로 초대장을 공유하며, RSVP를 검토할 수 있음.
     * 손님은 iCloud+ 구독이나 Apple 계정 없이도 새로운 iPhone 앱이나 웹을 통해 초대장을 보고 응답할 수 있음.
     * 참석자는 자신의 세부 정보가 다른 사람에게 어떻게 표시되는지 제어할 수 있으며, 언제든지 이벤트를 떠나거나 신고할 수 있음.

추가적인 iCloud+ 프리미엄 기능

     * iCloud+ 구독자는 Apple Invites에서 이벤트 생성 외에도 여러 프리미엄 기능에 접근할 수 있음:
          + 확장된 저장 공간: 대용량의 고해상도 사진, 비디오, 파일을 iCloud에 안전하게 보관하고 모든 기기와 웹에서 쉽게 접근 가능함.
          + Private Relay: Safari에서의 브라우징을 네트워크 제공자, 웹사이트, Apple로부터 완전히 비공개로 유지함.
          + Hide My Email: 필요할 때마다 고유하고 무작위의 이메일 주소를 생성함.
          + HomeKit Secure Video: 홈 보안 영상을 종단 간 암호화된 형식으로 캡처하고 검토할 수 있음.
          + 맞춤 이메일 도메인: iCloud 이메일 주소를 개인화할 수 있음.
          + 가족 공유: 최대 5명과 iCloud+ 구독을 추가 비용 없이 공유할 수 있음.

출시 정보

     * Apple Invites는 iOS 18 이상을 실행하는 모든 iPhone 모델에서 App Store를 통해 무료로 다운로드 가능하며, 웹에서는 icloud.com/invites에서 접근 가능함.
     * 일부 기능은 모든 지역이나 언어에서 제공되지 않을 수 있음.

        Hacker News 의견

     * Apple의 새로운 서비스가 실패하기를 바라는 의견이 있음. Apple이 iMessage처럼 독점적 위치를 이용해 다른 플랫폼과의 협력보다는 자사 생태계에 가두려 할 것이라는 우려가 있음
          + 가족과 친구들이 Facetime으로 영상 통화를 시도할 때, 다른 사람들의 휴대폰에 Apple 앱이 없다는 것을 믿기 어려워하는 경우가 많음
     * Apple iPhone의 미국 청소년 소유율이 증가하고 있음
          + 2024년: 87%
          + 2019년: 83%
          + 2014년: 67%
          + 다양한 국가에서 iPhone의 시장 점유율이 다름
               o 노르웨이: 65%
               o 스웨덴/일본/캐나다/미국: 59%
               o 영국: 49%
               o 독일/포르투갈/이탈리아: 30-39%
               o 한국은 삼성의 점유율이 높음
     * Evite 사용에 대한 불만이 있음. 광고가 많고 불편한 패턴이 있으며, 새로운 서비스가 더 나은 기능을 제공한다고 생각함
     * 소셜 네트워크의 변화로 인해 친구 및 가족 네트워크를 차지할 기회가 생겼다고 봄. 미국에서 iPhone이 주류인 상황에서 Apple이 가장 적합한 위치에 있다고 생각함
     * Apple의 서비스가 배타적으로 보일 수 있다는 우려가 있음. Apple TV의 경우도 비슷한 문제를 겪고 있으며, 일부 사람들은 Apple 브랜드 때문에 참여하지 않을 것이라고 봄
     * Facebook을 떠난 친구들이 많아졌음을 깨달음. 이벤트 초대를 위해 Facebook을 사용했지만, 많은 사람들이 보지 못했음. 대신 문자 메시지를 사용했지만 번거로웠음. 소셜 미디어 없이 초대할 수 있는 시스템이 필요하다고 생각함
     * CalDAV라는 개방형 표준이 이미 존재하는데, 왜 이를 기반으로 하지 않는지 의문을 가짐
     * 초대 서비스가 광고로 가득 차 있어 실패할 만하다고 생각함. 개방형 포맷이 우세했다면 무료로 이메일처럼 초대장을 받을 수 있었을 것이라고 봄
     * Apple의 첫 번째 앱은 좋지만, iPhone 전용 소셜 네트워킹은 성공적이지 않았음. iTunes Ping이나 Game Center는 큰 인기를 끌지 못했으며, iMessage의 그룹 메시징도 미국 내에서만 일부 인기를 끌었음
     * Apple의 새로운 실험적 앱 시대에 대한 기대가 큼. 앱 디자인의 미래에 대해 흥미로움을 느끼며, SwiftUI 스타일의 온보딩 화면이 재미있다고 생각함
          + 몇 가지 아쉬운 점이 있음
               o 친구의 초대를 거절했지만 자동으로 필터링되지 않음
               o 초대된 친구들을 볼 수 없는 경우가 있음. 초대 URL이 그룹 채팅에서 공유된 경우 때문일 수 있음
"
"https://news.hada.io/topic?id=19148","ScrapeServ - 특정 URL을 스크린샷으로 변환해주는 API 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ScrapeServ - 특정 URL을 스크린샷으로 변환해주는 API 서버

     * 로컬 머신에서 API서버를 실행하고 URL을 전송하면 사이트 데이터를 파일 형태로 받고, 사이트 여러 구간의 스크린샷도 함께 생성
     * 페이지를 스크롤하여 여러 섹션의 스크린샷을 찍음
     * 도커 컨테이너로 실행되며 Playwright를 사용하여 Firefox 브라우저를 실행하여 리소스 소비량은 약간 많음
     * 작업은 큐로 처리되며, HTTP 헤더·302 리다이렉트·다운로드 링크를 제대로 처리
     * 블로킹 API

   해커뉴스 댓글 에 이를 대체할만한 재미난 것들이 많네요.
     * 크롬에서 코맨드라인으로 스크린샷 찍기:
       chrome --headless --screenshot=""path/to/save/screenshot.png"" --disable-gpu --window-size=1280,720 ""https://www.example.com"";
     * Firefox 버전:
       firefox -screenshot file.png https://example.com --window-size=1280,720
     * Firefox 개발자 콘솔에서 :screenshot --help 쳐보면 다양한 옵션 가능
     * 유지관리 작업 같은거 싫으면 아래 대체제들 이용
          + https://browserless.io - 저수준 브라우저 제어
          + https://scrapingbee.com - 스크래핑 전문
          + https://urlbox.com - 스크래핑 전문
          + https://scrapingfish.com
          + https://www.scraperapi.com
          + https://www.airtop.ai
     * 비슷한 프로젝트
          + https://github.com/sensepost/gowitness
          + https://github.com/SmilyOrg/website-image-proxy
"
"https://news.hada.io/topic?id=19169","Hibiki - 고품질 동시 음성-to-음성 번역 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Hibiki - 고품질 동시 음성-to-음성 번역 모델

     * 고충실도(High Fidelity) 실시간 스트리밍 음성 번역(Speech-to-Speech Translation) 모델
     * 일반적인 오프라인 번역과 달리, 사용자가 말하는 동안 ""실시간으로 번역된 음성을 생성""함
     * 텍스트 번역도 함께 제공하며, 원본 음성의 스타일을 유지하는 음성 변환 기능도 포함됨

아키텍처

     * ""Decoder-only 모델""로, 동시 음성 번역을 위해 설계됨
     * Moshi의 멀티스트림(multistream) 아키텍처를 활용하여 원본 및 번역 음성을 동시에 모델링함
     * 초당 12.5Hz의 일정한 프레임 속도로 연속적인 출력 스트림을 생성하며, 타임스탬프가 포함된 텍스트 번역도 제공함

학습 방법

     * 원본 및 번역 음성과 텍스트가 정렬된 데이터가 필요하지만, 실제로 이러한 데이터는 많지 않음
     * 그래서 합성 데이터(synthetic data)를 생성하여 학습을 진행
     * MADLAD 기계 번역 시스템을 활용하여 원본과 번역 텍스트를 약한 지도학습 방식으로 정렬함
     * 번역이 원본에서 예측 가능해지는 시점에만 단어가 나타나도록 정렬 규칙 적용
          + 방법 1: 침묵 삽입(silence insertion)
          + 방법 2: 정렬을 반영한 음성 합성(alignment-aware TTS)

추론 (Inference)

     * Hibiki는 실시간으로 원본 음성을 인코딩하고 번역된 음성을 생성함
     * 복잡한 추론 방식 없이 온도 샘플링(temperature sampling) 방식을 사용하여 배치 처리와 호환됨
     * Classifier-Free Guidance 계수를 조정하여 음성 유사도를 조절 가능
          + 계수가 높을수록 원본과 비슷한 음성을 생성하지만, 너무 높으면 번역 품질이 저하될 수 있음
     * 현재 Hibiki는 프랑스어 → 영어 번역만 지원
     * 경량 모델인 Hibiki-M은 스마트폰에서도 실행 가능

모델 실행 방법

     * PyTorch, Rust, MLX(macOS), MLX-Swift(iOS)에서 실행 가능
     * Hibiki의 코드는 Moshi 프로젝트와 거의 동일하며, 실제 구현은 kyutai-labs/moshi 저장소에서 확인 가능
     * 현재 프랑스어 → 영어(FR → EN) 번역을 지원하는 두 가지 모델만 제공
          + Hibiki 2B: 더 깊은 Transformer 구조, 스트림당 16 RVQ
          + Hibiki 1B: 경량 버전, 스트림당 8 RVQ, 온디바이스(In-device) 실행 가능

   Rust 배포는 candle을 쓰네요. (Cargo.toml)

   어순이 완전 다른 언어들은 실시간 번역이 좀 어려울 것 같은데, 논문을 한번 살펴봐야겠네요.
"
"https://news.hada.io/topic?id=19117","PDF에서 실행되는 Linux","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PDF에서 실행되는 Linux
"
"https://news.hada.io/topic?id=19134","플러터 기반 오픈소스 크로스플랫폼 멀티플레이어 카드 게임 엔진 'The Deck'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             플러터 기반 오픈소스 크로스플랫폼 멀티플레이어 카드 게임 엔진 'The Deck'

     * The Deck 소개
          + ""The Deck""는 모바일 멀티플레이어 오프라인 카드 게임을 집약한 애플리케이션으로, Dart와 Flutter로 개발됨.
          + 친구들과 게임을 즐기려 할 때 필요한 카드가 없어 곤란했던 경험에서 영감을 얻어 개발됨.
          + 디지털 환경에서 전통적인 카드 게임을 즐길 수 있도록 사용자 친화적이고 협력적인 게임 환경을 제공함.
          + 한 기기를 ""테이블""로 설정하여 모든 플레이어가 실시간으로 카드 상태를 볼 수 있는 기능이 특징적임.
     * 게임플레이
          + 게임 선택
          + 방에 연결
          + 게임 시작
     * 기타 정보
          + 개인 블로그: ""Game Night Just Got a Digital Upgrade: The Deck""
          + 다양한 플랫폼에서 이용 가능: AppStore, PlayStore 등
     * 기여
          + 기여를 환영하며, 새로운 게임을 개발하여 스토어에 출시하고 싶다면 연락 가능함.
     * Flutter 설정
          + FVM을 사용하여 Flutter SDK 버전 관리
          + fvm 설치 후 fvm use x.y.z로 Flutter 버전 설정
     * MR / Pull Request
          + 커밋 설명 시작 시 명명 규칙: (FEAT), (FIX), (CHORE), (TEST)
     * 릴리스
          + Android 및 iOS 앱 스토어에 릴리스하는 방법 설명
          + 일반적인 오류 해결 방법 제공
     * 도구
          + 새로운 Redux 템플릿 생성 스크립트 제공
     * 라이선스
          + MIT 라이선스 하에 프로젝트가 제공됨.

        Hacker News 의견

     * 서버가 Dart로 되어 있어 기쁘다는 의견과 Firebase가 없다는 점이 좋다는 의견이 있음
          + Dart 서버 생태계가 더 성숙했으면 좋겠다는 바람이 있음
          + Dart를 정적 바이너리로 컴파일할 수 있는 점이 배포에 매우 유용하다는 의견이 있음
     * Nintendo Switch용 Ticket to Ride 게임을 구매한 경험 공유
          + ""companion app""을 사용해 각 플레이어의 비공개 카드를 다른 기기에서 볼 수 있는 기능이 있음
          + 그러나 보드(예: TV에 연결된 Switch)는 ""읽기 전용""이라 상호작용이 부족하다는 아쉬움이 있음
          + 모든 액션이 휴대폰에서 이루어져 공유 공간과의 상호작용이 부족하다는 느낌이 있음
          + 이를 해결할 방법에 대한 고민이 있었으나 실용적인 해결책은 찾지 못했음
     * VR이 인기를 끌기 시작할 때 가상 카드 덱 아이디어를 생각한 경험 공유
          + 게임에 참여하는 모든 사람이 휴대폰을 움직여 가상 카드를 볼 수 있는 아이디어였음
          + 대학에서 카드 게임을 하는 것을 숨기기 위한 필요에서 나온 아이디어였음
          + 대학 교육이 이 아이디어를 실현할 기술을 제공하지 못해 아쉬웠으나, 다른 사람이 이를 구현해 기쁘다는 의견이 있음
     * Dart/Flutter 프로젝트가 HN의 첫 페이지에 올라온 것이 드문 일이라는 의견과 잘했다는 칭찬이 있음
     * 작성자가 피드백에 감사하며 콘텐츠를 업데이트할 것이라는 의견
          + 구현에 대한 자세한 내용이 링크로 제공됨
     * 많은 기술을 사용해 카드 덱을 만드는 경험이 대단하다는 의견
          + 10달러 이하로 카드 덱을 사는 것보다 비슷하지만 아마도 부족한 경험일 것이라는 의견이 있음
          + 이 점이 마음에 든다는 의견이 있음
     * 전 세계에 흩어져 있는 친구들과 커스텀 카드 게임을 하고 싶다는 기대감
          + 앱을 다운로드해 샘플 게임을 시도했으나 모든 플레이어가 동일한 WiFi에 연결되어야 한다는 점이 아쉬움
          + 이는 앱이 대면 게임에만 사용된다는 의미인지 궁금해하는 의견이 있음
     * 2011년의 ""Flick Hearts""라는 안드로이드 앱이 같은 개념을 가지고 있었다는 의견
          + 당시에는 상상력이 뛰어났다는 의견이 있으며 이후로는 본 적이 없다는 의견이 있음
     * 웹 기반의 또 다른 옵션으로 ""virtualtabletop.io""가 있다는 의견
          + 2D Tabletop Simulator와 유사하다는 설명이 있음
          + 소스 코드 링크가 제공됨
     * 프로젝트가 매우 멋지며 시도해 보고 싶다는 기대감
          + ""The deck"" 기능의 실제 사진이 있으면 더 좋을 것 같다는 의견
          + 설명은 충분하지만 그래픽이 부족하다는 의견이 있음
"
"https://news.hada.io/topic?id=19171","일론 머스크 주도의 그룹, OpenAI 지배권을 위한 974억 달러 입찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                일론 머스크 주도의 그룹, OpenAI 지배권을 위한 974억 달러 입찰

     * 일론 머스크가 이끄는 투자자 컨소시엄이 OpenAI를 관리하는 비영리 단체를 인수하기 위해 974억 달러(약 141조 원)의 제안을 제출함 ￼
     * 머스크는 OpenAI가 오픈소스와 안전성 중심의 선한 영향력으로 돌아가야 한다고 강조함
     * 컨소시엄에는 머스크의 AI 스타트업 xAI, Baron Capital Group, Emanuel Capital 등이 포함됨

샘 올트먼의 반응과 양측의 갈등

     * OpenAI의 CEO 샘 올트먼은 머스크의 제안을 거절하며, “사양하겠다. 원한다면 우리가 트위터를 97억 4천만 달러에 사겠다”고 응수함 ￼
     * 머스크와 올트먼은 OpenAI의 영리 전환 문제를 두고 오랜 갈등을 겪어왔음
     * 머스크는 OpenAI의 영리 전환이 공공의 이익보다 이윤을 우선시한다고 주장하며 소송을 제기한 바 있음

OpenAI의 영리 전환과 시장 평가

     * OpenAI는 현재 비영리에서 영리 기업으로의 전환을 추진 중이며, 이는 최상의 AI 모델 개발을 위한 자본 확보를 위해 필요하다고 밝힘
     * 최근 투자 라운드에서 OpenAI의 가치는 1,570억 달러로 평가되었으며, 소프트뱅크가 주도하는 최대 400억 달러 규모의 추가 투자 유치가 논의되고 있음 ￼

머스크의 인수 제안이 미치는 영향

     * 머스크의 인수 제안은 OpenAI의 영리 전환 과정에 복잡성을 더하며, 비영리 단체의 경제적 이익에 대한 새로운 기준을 설정함
     * 전문가들은 OpenAI 이사회가 머스크의 제안을 무시하기 어려울 것으로 예상하며, 이는 소프트뱅크의 투자 제안과 비교하여 이사회의 신의성실 의무를 시험할 수 있음

        Hacker News 의견

     * 머스크가 부를 무제한으로 축적하는 것이 왜 나쁜지에 대한 강력한 사례를 만들고 있는 것 같음
          + ""금융 테러리스트""라는 표현이 떠오름
          + 그의 막대한 부와 영향력을 무기로 사용하고 있음
     * Sam이 트위터에서의 답변
          + ""고맙지만, 원하신다면 트위터를 97억 4천만 달러에 사겠습니다""라는 내용
     * 머스크의 AI 회사 xAI가 OpenAI와 합병할 수 있다는 월스트리트 저널의 보도
          + xAI는 수익을 내지 못하고 있음
          + 미국의 레버리지와 '창의성'이 놀라울 정도임
     * OpenAI의 선점 이점이 사라지고 좋은 대안들이 나타나고 있음
          + ChatGPT의 출시는 충격적이었음
          + 평균 소비자에게 영향을 주거나 흥미를 끌만한 것이 그 이후로 있었는지 궁금함
          + 수익이 평균 소비자에게서 오는지, 아니면 경쟁자로 이동할 API 사용자에게서 오는지 궁금함
          + 그들이 어떻게 리드를 유지하고 장기적으로 매력적일 수 있을지 매우 궁금함
     * 머스크가 OpenAI가 다시 오픈 소스와 안전에 중점을 둔 선의의 힘으로 돌아가야 한다고 말함
          + Grok의 창시자로서 이런 말을 하는 것이 놀라움
     * 많은 사람들이 머스크의 개입에 대해 비판적이지만, 이는 OpenAI의 계획을 중단하거나 근본적으로 변화시키려는 것임
          + OpenAI-P가 OpenAI-NP의 통제에서 벗어나려 하고 있음
          + 이를 위해 OpenAI-P는 OpenAI-NP에 보상을 해야 함
          + 현재 400억 달러로 평가하려 하고 있음
          + OpenAI-NP는 OpenAI-P를 완전히 통제하고 있음
          + OpenAI-NP의 미션은 인공지능이 인류 전체에 이익이 되도록 하는 것임
          + OpenAI-P의 통제를 포기하는 것은 그들의 미션을 포기하는 것임
     * 머스크가 OpenAI-NP의 지분 가치를 합리적인 수준으로 평가하도록 강요하고 있음
          + 이는 OpenAI-P의 목표를 방해할 수 있음
     * 이 제출물이 해커 뉴스 상위 5페이지에 없는 것이 매우 의심스러움
     * 머스크가 세계 지배를 위해 가지지 못한 유일한 것은 AI임
          + 그가 AI를 얻지 못하도록 해야 함
          + 미국 정부의 레버리지를 사용하려고 할 것임
     * 이는 OpenAI의 영리 전환을 차단하려는 협상 전술이라고 생각함
     * 관련 배경 정보와 토론 링크 제공
"
"https://news.hada.io/topic?id=19136","Show GN: 명함 공유 서비스를 만들어 봤습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 명함 공유 서비스를 만들어 봤습니다.

   Lucidus

   동적 SVG 명함 생성 및 공유 서비스를 만들어 봤어요

   피드백은 언제든 감사합니다

   현재 v1 서비스로 아래와 같은 지속적인 업데이트 예정입니다.
     * 디자인 개선
     * 테마 추가
     * v2 디자인 생성
     * 아이콘 추가 (github, blog 등)
       봐주셔서 감사합니다 🙇🏻‍♂️

   좋습니다

   맘에 듭니다. 좋네요 ㅎㅎ

   재밌네요~ 감사합니다!
   https://criminal-vivyanne-lucidus-346ca075.koyeb.app/lucidus/card_v1/…
"
"https://news.hada.io/topic?id=19074","NIH와 NSF 내부 동향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             NIH와 NSF 내부 동향

   죄송합니다. 요약할 내용이 없습니다.

        Hacker News 의견

     * 다른 나라들이 과학자들을 모집할 좋은 기회로 보임. 미국의 현대적 성공은 30~50년대 전쟁으로 피폐해진 유럽에서 과학자와 지식인을 유치한 덕분임.
          + NIH 예산의 가장 큰 부분은 NCI에 할당되며, 그 다음은 NIAID, 세 번째는 National Institute of Aging임.
          + 연방 정부의 가장 큰 지출은 사회 보장 혜택이며, 그 다음은 국가 부채의 이자, Medicare, 국방부, Medicaid 순임.
     * 미국이 이 파시스트적 요구에 굴복할 것이라는 비관적인 생각과 사람들이 강력히 반대할 것이라는 낙관적인 생각이 공존함.
     * 미국은 세계에서 가장 강력한 대학 및 연구 시스템을 보유하고 있음. 이를 파괴하는 것은 최악의 자해 행위 중 하나가 될 것임.
     * DEI가 학계의 모든 측면에 영향을 미치는 것을 보는 것이 피곤해짐. 인종에 기반한 채용, 특정 소수자 집단과만 일하는 연구비 수여 등 비윤리적인 인종 기반 선호가 존재함.
     * 유명한 곳에서 리더십을 맡고 있으며, 내부적으로 절대적인 패닉 상태임.
     * 변화시키려는 사람들이 실제로 무엇을 하는지 모르고 무작위로 버튼을 누르는 것 같은 무능함이 일부 존재한다고 생각함.
     * 기술 커뮤니티가 정부의 복잡한 지식을 단기간에 이해하려는 것은 어리석음임. 개선할 부분은 있지만, 단순히 권력을 이용해 파괴하는 것은 리더십이 아닌 허무주의임.
     * 그들이 무엇을 발견할지 궁금함. 이런 통찰을 얻는 것은 드문 일임.
     * 좋지 않음.
"
"https://news.hada.io/topic?id=19094","셰이더 책(미완성)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               셰이더 책(미완성)

   컴퓨터에 그림을 그릴 때 필수 요소인 Fragment Shader를 가르치는 사이트. Patricio Gonzalez Vivo, Jen Lowe가 쓰고, 현재 Fractional brownian motion 장까지 끝낸 상태.
"
"https://news.hada.io/topic?id=19073","Show GN: TDD를 통해 ModernBERT 밑바닥부터 이해하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: TDD를 통해 ModernBERT 밑바닥부터 이해하기

   ModernBERT는 최신 논문과 기법이 집약된 임베딩/리랭커 모델이며, RAG 등 다양한 자연어처리 파이프라인의 핵심 모델로 활용되고 있습니다. 하지만 내부 구조가 복잡하여, 모델링 코드만 가지고는 이해하기 어려운 부분이 많지요.

   저희 사이오닉 AI의 오픈소스는 이러한 ModernBERT를 유닛 테스트 기반으로 단계별로 학습할 수 있게 구성한 프로젝트입니다. 특히 PyTorch로 작성된 모델을 TensorFlow로 직접 변환하는 과정을 담고 있어, 각 레이어와 함수가 어떤 역할을 하는지 테스트 시나리오를 통해 명확히 파악할 수 있습니다.

   또한, TensorFlow로 변환됨에 따라 Spring/JVM 생태계에서도 손쉽게 모델을 서빙할 수 있는 장점이 있습니다. Python 환경에 국한되지 않고, Java/Kotlin 기반의 대규모 시스템에서도 ModernBERT를 활용 가능하게 해주기 때문에, 엔터프라이즈 환경에서 딥러닝 서비스를 구축하시는 분들에게 특히 유용할 것이라고 생각합니다!
"
"https://news.hada.io/topic?id=19111","릭 앤 모티 SDF 애니메이션 프로그래밍","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         릭 앤 모티 SDF 애니메이션 프로그래밍

셰이더 프로그래밍 배우기

     * Rick와 Morty 애니메이션 제작: 이 애니메이션은 240줄의 코드로 만들어졌으며, 라이브러리나 이미지 없이 GPU 셰이더와 서명 거리 필드를 사용하여 비디오, 비디오 게임 또는 재미를 위해 애니메이션을 만드는 방법을 설명함.
     * 라이브 코딩 에디터: 페이지에 내장된 라이브 코딩 에디터를 통해 예제를 실행하고 수정할 수 있음.

  셰이더 기초

     * GLSL 사용: OpenGL 셰이딩 언어(GLSL)로 작성된 코드로, 각 픽셀에 대해 GPU에서 실행되는 color_for_pixel 함수가 필요함.
     * 픽셀 색상 결정: 시간에 따라 픽셀의 색상을 결정하는 함수가 애니메이션 제작의 핵심임.

  기본 도형 그리기

     * 원 그리기: 픽셀의 중심에서의 거리를 시각화하여 원을 그릴 수 있음.
     * 서명 거리 필드(SDF): 도형 내부의 거리는 음수, 외부는 양수로 표시하여 다양한 효과를 줄 수 있음.

  다양한 도형 함수

     * 베지어 곡선, 별, 둥근 사각형: 다양한 SDF 함수를 사용하여 복잡한 도형을 그릴 수 있음.

  Rick 그리기

     * 얼굴 재현: Rick의 얼굴을 코드로 재현하기 위해 많은 시도와 오류를 거쳤으며, 참조 이미지를 사용하여 정확성을 높임.
     * 윤곽선 추가: 서명 거리 함수를 사용하여 도형의 윤곽선을 그릴 수 있음.

  도형 결합 및 미러링

     * 도형 결합: 두 도형을 결합하여 윤곽선을 그릴 때 min() 함수를 사용함.
     * 미러링: abs() 함수를 사용하여 도형을 축을 기준으로 대칭시킬 수 있음.

  고급 기법

     * 도메인 왜곡: 픽셀 위치를 무작위로 오프셋하여 도형을 왜곡할 수 있음.
     * 애니메이션 효과: 도메인 왜곡을 애니메이션화하여 독특한 시각 효과를 만들 수 있음.

  무한한 치아 그리기

     * 포물선 사용: 포물선을 사용하여 치아 모양을 그릴 수 있으며, 여러 개의 치아를 그릴 때 코드 중복을 피할 수 있음.

   이 글은 셰이더 프로그래밍을 통해 복잡한 애니메이션을 만드는 방법을 설명하며, 다양한 기법과 도구를 활용하여 창의적인 결과물을 얻을 수 있음을 보여줌.

        Hacker News 의견

     * 정말 멋진 작업과 훌륭한 게시물임. SDF에서 매끄러운 안티앨리어싱을 위해 'aastep'을 사용하면 좋음
          + 참고 링크: glsl-aastep GitHub
     * 셰이더 개발은 정말 차원이 다름. 부동 소수점을 변경하고 결과를 즉시 확인하는 과정이 매우 만족스러움
     * 매우 좋은 게시물임. Inigo Quilez의 관련 YouTube 재생 목록 추천
          + 참고 링크: YouTube Playlist
     * 작업의 질과 설명의 품질, 독자에게 주는 도전 과제가 모두 최고 수준임. 공유해줘서 고마움
     * GLSL에 대한 매우 잘 구조화된 소개였음. Vulkan이나 WebGPU/WebGL에서는 어떤지 궁금함
     * 8개월 동안 이 애니메이션을 완성한 것은 엄청난 인내심을 반영함
     * 개발 과정에서 소수 값을 조정하는 반복 작업을 했는지, 아니면 어떤 에디터를 사용했는지 궁금함. 240줄의 적절한 소수 값을 찾는 과정이 시간이 많이 걸릴 수 있음
     * 페이지의 완성도가 놀라울 정도임
     * 셰이더 프로그래밍은 차원이 다름. 애니메이션을 만드는 데 들어가는 노력과 세부 사항에 대한 주의가 놀라움. 전통적인 개발보다 훨씬 더 손이 많이 감
     * 이 작업의 인상적인 정도를 표현하기 어려움
"
"https://news.hada.io/topic?id=19167","테슬라 모델 3 구매 후 지옥에 갇히다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         테슬라 모델 3 구매 후 지옥에 갇히다

     * 테슬라 모델 3 구매 경험
          + 2024년 10월, 테슬라 모델 3를 구매했으나 여러 기능이 작동하지 않음
          + 테슬라의 새로운 온보드 컴퓨터 문제로 수천 명의 고객에게 영향 미침
          + 배터리 손실, 브레이크 및 서스펜션 시스템 문제 발생
          + 테슬라는 문제를 인정했으나 배터리 손실에 대한 공식적인 언급은 없음
          + 차량 반환을 거부하고 3개월 대기 후 부품 교체 제안
     * 테슬라 구매 과정
          + 2020년 중국으로 이주 후 2023년 슬로바키아로 돌아옴
          + 새로운 차량 구매를 결정하고 테슬라 모델 3를 선택
          + 테슬라의 웹사이트를 통해 차량 구매, 슬로바키아에서는 네덜란드에서 수입해야 함
          + 수입 비용은 약 2000 유로
     * 차량 수송 및 초기 문제
          + 2024년 10월 5일 예약, 10월 31일 차량 수령 가능
          + 슬로바키아의 DriveTesla.sk를 통해 차량 등록 및 보험 처리
          + 차량 수령 시 카메라 작동 불가 문제 발생
     * 차량 운전 경험
          + 자동차량 운전 경험이 있었으나 테슬라의 기능에 익숙해지기 어려움
          + 카메라 문제로 인해 자동 와이퍼, 차선 이탈 감지 등 기능 작동 불가
          + Spotify 음악 재생 문제 발생
     * 차량 고장 및 서비스 요청
          + 2024년 12월 1일 OS 업데이트 시도 실패
          + 테슬라 부다페스트 서비스 센터에 문제 보고
          + HW4 온보드 컴퓨터의 단락 문제로 인한 기능 불능
          + 2024년 12월 10일 서비스 센터에서 문제 확인, 부품 재고 없음
     * 배터리 문제
          + 차량 주차 시 배터리 손실 발생, 하루 8% 손실
          + 테슬라 고객 서비스에 문의했으나 명확한 답변 받지 못함
          + 차량을 충전하지 않으면 12일 후 배터리 소진
     * 결론 및 반응
          + 테슬라의 관리 및 계획 부족에 실망
          + 차량 반환 및 환불 요청, 응답 없음
          + 테슬라의 비효율성과 무책임함에 대한 불신
          + 차량 운전 중단, 안전 문제 우려
     * 에필로그
          + 테슬라에 대한 신뢰 상실, 차량 반환 및 환불 요청 중
          + 테슬라의 고객 서비스 및 문제 해결 능력에 대한 비판

   주행에 핵심적인 부분(자세제어, etc...)를 제외한 부분을 사용자가 변경할 수 있도록 해야한다고 생각합니다.

        Hacker News 의견

     * 현대 Volvo (XC40 T8 EV)와 같은 경험을 했음. 현대 자동차는 신뢰성이 떨어지는 것 같음
          + 터치 버튼과 화면이 나오기 전 세대의 자동차가 마지막으로 괜찮았던 세대였음
          + BMW 딜러에 가서 여러 디스플레이에 둘러싸여 앉아 있는 것이 멋지다고 생각하는 사람은 없을 것임
          + Volvo에 트레일러를 연결했을 때 소프트웨어 업데이트 알림을 받았고, 여러 가지 경고와 알림이 운전 중에 방해가 되었음
     * 2018년부터 Model S를 소유하고 있으며, 현재 두 번째 차량(Raven)을 운전 중임
          + 첫 번째 차량은 제조 품질이 좋지 않았고, 두 번째 차량은 여러 소음 문제로 인해 서비스 센터에서 수리를 받았으나 해결되지 않았음
          + $80,000짜리 차가 30년 된 녹슨 Ford처럼 소리가 나서 주차장에서 주목받고 있음
          + 다음 차는 구매하지 않을 것임
     * Tesla를 소유하고 있으며, 모든 것이 문제 없이 작동했음
          + 하드웨어 한 부분이 고장 나서 보증으로 교체받았음
          + 차를 구매할 때 시승해보는 것이 중요하며, 서비스가 없는 나라에서 차를 사는 것은 피해야 함
          + 결함이 있는 차는 즉시 교체하거나 수리해야 하며, 보상도 받아야 함
     * 전기차(EV) 구매 시 한국 제조사의 차량이 안전한 선택임
          + 기술이 잘 갖춰져 있고, 가격이 합리적이며, 부품이 저렴하고 풍부함
          + 'X' 요소의 CEO가 없음
     * Tesla를 기다리는 것은 시간 낭비임
          + ECC-NET에 연락하여 다음 단계에 대한 조언을 받을 것을 권장함
     * 일본에서 10년 동안 차 없이 살다가 차가 필요한 곳으로 이사함
          + 2015년 중고 경차를 구매했으며, 화면이 없고 버튼과 다이얼로 조작됨
          + 연료 효율이 뛰어나고, 부품이 흔하여 어디서나 수리 가능함
          + 엔진이 약하고 사고 시 안전성이 떨어지지만, 작은 차가 많은 나라에서는 큰 문제가 아님
     * 원래 게시물에 두 가지 업데이트가 있음
          + 부다페스트 서비스 센터와의 모든 통신
          + 고객의 얼굴에 침 뱉는 방법
     * 기사 요약
          + 12월에 고장난 차를 판매했고, 배터리가 하루에 8%씩 소모됨
          + 부품 수요가 많아 2월 말에 수리 가능하다고 함
          + 고객 지원이 무시하고 있어 법률 지원을 받는 것이 좋음
     * 2024년에 Tesla를 구매하는 것은 좋지 않은 선택임
          + Hyundai와 Polestar가 더 나은 전기차 옵션임
     * Tesla의 업데이트 과정에 불만이 있음
          + 24/7 Wi-Fi가 있는 차고가 없으면 업데이트가 어려움
          + 서비스 모드로 들어가 소프트웨어를 재설치하는 것이 해결책일 수 있음
          + Tesla의 온라인 매뉴얼은 훌륭하지만, 디지털 방식으로 지원을 받는 것은 어려움
"
"https://news.hada.io/topic?id=19143","수학적 필기 향상을 위한 팁 (2007)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         수학적 필기 향상을 위한 팁 (2007)

     * 이제 기술 분야(공학, 과학, 수학) 전공을 시작하면서, 글로 소통하는 시간이 많아짐. 글씨체가 완벽하지 않다면, z와 2z를 혼동하지 않도록 주의해야 함.
     * 소문자 로마자
          + 소문자 l은 필기체로 작성하여 1과 구별해야 함.
          + p의 위쪽에 점을 찍어 rho와 구별해야 함.
          + q에 획을 추가하여 9와 혼동되지 않도록 해야 함.
          + t의 아래에 갈고리를 추가하여 더하기 기호와 구별해야 함.
          + u에 꼬리를 달아 v와 구별해야 함.
          + v와 w의 아래를 뾰족하게 하여 nu와 omega와 구별해야 함.
          + x에 갈고리를 달아 곱셈 기호와 구별해야 함.
          + z에 선을 그어 2와 구별해야 함.
     * 대문자 로마자
          + 대문자 G에 큰 괄호를 추가하여 C나 6과 구별해야 함.
          + 대문자 I에 선을 그어 l이나 1과 구별해야 함.
          + 대문자 O에 고리를 추가하여 0과 구별해야 함.
          + X와 Z에 갈고리를 달아 소문자와 동일하게 구별해야 함.
     * 숫자
          + 0에 선을 긋지 말아야 함. 그리스 문자 phi와 공집합 기호와 구별해야 함.
          + 2에 고리를 달아 z와 구별해야 함.
          + 4의 윗부분을 열어 9와 구별해야 함.
          + 5의 윗부분을 각지게 만들어 S와 구별해야 함.
          + 7에 선을 그어 1과 구별해야 함.
          + 9의 아래에 갈고리를 달지 말아야 함. g와 구별해야 함.
     * 소문자 그리스 문자
          + alpha는 한 번에 부드럽게 그려야 하며, 2와 구별해야 함.
          + eta와 mu에 긴 꼬리를 달아 n과 필기체 u와 구별해야 함.
          + lambda의 위에 갈고리를 추가해야 함.
          + nu는 다른 문자와 너무 비슷하여 사용하기 어려움. 갈고리와 아래쪽 점을 추가하여 u, v, upsilon과 구별해야 함.
          + omicron은 로마자 o와 동일하여 사용하지 않음.
          + upsilon은 nu만큼이나 구별하기 어려움. u, v, nu와 구별해야 함.
          + phi의 선은 수직으로, 공집합 기호의 선은 기울어져야 함.
          + chi는 소문자 x와 대문자 X와 구별하기 어려움. 위쪽 선을 아래쪽 선보다 크게 만들어야 함.
          + omega는 둥글게 만들어 w와 구별해야 함.
     * 대문자 그리스 문자
          + 대부분 대문자 로마자와 구별되지 않음. (예: 대문자 alpha는 대문자 A와 동일)
          + 대문자 theta 안에 대문자 H를 그려야 함. 소문자 theta와 구별해야 함.
          + 대문자 phi와 psi에 선을 그어 대문자 I와 동일하게 구별해야 함.

        Hacker News 의견

     * x에 후크를 달아 곱셈 기호와 구별하라는 의견이 있음
          + 이는 오히려 그리스 문자 'chi'처럼 보이게 만들어 역효과를 낼 수 있음
          + 곱셈 기호가 필요하다면 중간 점(“·”)을 사용하는 것이 좋음
     * 그리스어에 대한 좋은 자료가 있음
          + 수학적 성숙도에 대한 오래된 농담이 있음
          + xi와 zeta를 혼동하는 교수님들이 많아 큰 문제는 아님
     * 학생들에게 기호 쓰는 방법을 설명하고 여러 발음을 제공함
          + 수학과 물리학 배경의 학생들은 그리스 문자에 익숙함
          + 생물학 배경의 학생들은 혼란스러워함
          + 기호를 다른 용도로 재사용할 때 혼란스러워함
     * 수학적 표기법과 추론에 어려움을 겪는 학생들은 초기 교육에서 ""x를 미지수로 하자""라는 말을 듣고 혼란스러워함
          + 다른 맥락에서는 나오지 않는 표현이라 학생들을 혼란스럽게 함
          + 많은 학생들이 나중에 수학 수업을 암기하며 지나감
     * 불가리아에서 자란 사람으로서 독일어와 러시아어를 배움
          + 독일어 필기 연습을 했던 기억이 있음
          + 그리스어 읽기는 대부분의 불가리아인에게 쉬움
     * p와 rho를 구별하기 위해 p의 꼭대기에 점을 찍으라는 의견이 있음
          + \varrho (ϱ)를 사용하는 것이 좋음
          + phi의 슬래시는 수직으로, 공집합 기호의 슬래시는 기울어져야 함
          + \varphi (U+1D711)을 사용하는 것이 구별하기 쉬움
     * 흰 종이를 사용하는 것이 좋음
          + 스웨덴에서는 사각형이 있는 종이를 사용했으나 혼란을 줌
     * 수학을 공부하면서 무의식적으로 많은 습관을 익혔음
          + 졸업 후에도 이러한 '관습'을 따름
     * 친구가 수학 세미나에서 z를 재사용한 강연자의 이야기를 들려줌
          + z의 한 세트에서 가로선을 지워 zed와 zee로 구분함
     * 관련 자료로는 ""Tips for Mathematical Handwriting (2007)""이 있음
     * Lawrence A. Chang의 ""Handbook for Spoken Mathematics""도 유용함
"
"https://news.hada.io/topic?id=19069","Show GN: 연봉협상 대작전 - 재미로 해보는 연봉 협상 스킬 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 연봉협상 대작전 - 재미로 해보는 연봉 협상 스킬 테스트

   저희 회사 (시그널플래너를 운영하는 해빗팩토리) 에서 토이 프로젝트로 만든 연봉협상 미니게임 '연봉협상 대작전'을 소개합니다.

   4가지 유형의 대표님을 클리어 (!) 하고 연봉 인상률을 확인할 수 있어요.
     * 4가지 유형의 대표님: 갓생형, 엄근진형, 트렌드 민감형, 보살형
     * 협상 방식: 객관식 또는 주관식으로 답변 가능
     * 주관식 답변 입력 시: AI가 맞춤형 코멘트 제공
     * 협상 종료 후: 내 예상 연봉 인상률 확인

   회사 대표님과 같은 캐릭터로 선택하고 공략하면 재미가 2배

   어쩐지 딴짓하고 싶은 시간, 2분 이면 즐길 수 있는 테스트해보시고 재밌으셨다면 주변에도 퍼뜨려주시면 감사하겠습니다.

   참고로, 저는 2.5% 인상 -_-

   여러분의 연봉 협상 건승을 기원합니다

   12.4%! 재밌습니다 ㅎㅎ

   상단 볼륨 기능이 off 되어있길래 안심하고 시작하기 눌렀는데, 소리가 팍 하고 튀어나와서 넘 당황했습니다ㅠㅠㅠㅠㅠㅠ

   iOS 사파리 유저입니다~

   죄송합니다. 확인해보겠습니다. ㅠㅜ

   5.4% 만족하겠습니다..

   8.8% 올랐어요~! 현실에는 없는 숫자..

   그렇게 연봉 협상이 늦어지는거군요. 현실고증(?)

   죄송합니다. 예상치 못한 트래픽으로 답변간 이동에 로딩 시간이 많이 걸리고 있습니다. 현재 확인 중에 있습니다. 빠르게 처리하도록 하겠습니다. 감사합니다!

   분석 결과는 ""좋지도 나쁘지도 않은 일반적인 분석이야"" ㅎㅎㅎㅎ

   질문 한개 답하니까 질문 준비를 5분째 하고있어요ㅠ

   죄송합니다. 예상치 못한 트래픽 ;; 으로 확인 중에 있습니다. 감사합니다!

   감사합니다 다음날 확인해보니 잘 되어있네요 굳!!

   8.4% 인상이네요. ""오늘 저녁은 치킨이다!""

   재밌어요! ㅎㅎ
"
"https://news.hada.io/topic?id=19091","Gemini 2.0 이제 누구나 사용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Gemini 2.0 이제 누구나 사용 가능

     * Gemini 2.0 Flash가 더 많은 사람들에게 일반 공개됨
     * Google AI Studio와 Vertex AI의 Gemini API를 통해 프로덕션 환경에 적용 가능해짐
     * 수백만 토큰의 컨텍스트 윈도우를 활용한 대용량 멀티모달 추론이 특징임
     * 텍스트뿐 아니라 이미지, 음성 등 다양한 형식의 입력을 지원하도록 준비 중임
     * Gemini 2.0 Flash Pricing:
          + 텍스트/이미지/비디오 입력 비용: 백만 토큰당 $0.10
          + 오디오 입력 비용: 백만 토큰당 $0.70 (2025년 2월 20일부터 적용될 예정)
          + 텍스트 출력 비용: 백만 토큰당 $0.40
          + 컨텍스트 캐싱 비용(향후 지원 예정):
               o 텍스트/이미지/비디오 기준 백만 토큰당 $0.025
               o 오디오 기준 백만 토큰당 $0.175

2.0 Pro 실험적 버전: 복잡한 프롬프트와 코딩 성능에 특화된 모델

     * 기존 모델보다 향상된 코딩 성능과 복잡한 지식 추론 능력을 보유함
     * 최대 200만 토큰의 컨텍스트 윈도우를 제공하여 대규모 데이터를 심층 분석 가능함
     * Google 검색, 코드 실행 같은 외부 툴 연동 기능도 포함함
     * Google AI Studio, Vertex AI에서 실험적으로 제공 중이며 Gemini 앱에서는 Advanced 사용자가 선택 가능함

2.0 Flash-Lite: 비용 대비 성능이 가장 뛰어난 모델

     * 1.5 Flash 대비 품질이 향상되었지만 동일한 속도와 비용을 유지함
     * 최대 100만 토큰의 컨텍스트 윈도우와 멀티모달 입력 지원
     * 예: 4만 개 이미지에 대한 캡션 생성 작업을 1달러 미만으로 처리 가능함
     * 현재 Google AI Studio, Vertex AI에서 퍼블릭 프리뷰로 제공 중임
     * Gemini 2.0 Flash-Lite Pricing:
          + 텍스트/이미지/비디오 입력 비용: 백만 토큰당 $0.075
          + 오디오 입력 비용: 백만 토큰당 $0.075
          + 텍스트 출력 비용: 백만 토큰당 $0.30
          + 컨텍스트 캐싱 비용(향후 지원 예정):
               o 텍스트/이미지/비디오 기준 백만 토큰당 $0.01875
"
"https://news.hada.io/topic?id=19095","분노 피로를 피하면서 정보를 유지하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        분노 피로를 피하면서 정보를 유지하는 방법

분노 피로를 피하면서 정보를 유지하는 방법

     * Rachel Feltman: 최근 많은 사람들이 분노를 느끼고 있으며, 이는 피로를 유발할 수 있음. Tanya Lewis가 이 현상에 대해 설명함.
     * Tanya Lewis: 분노 피로는 반복적으로 도덕적 위반을 경험하고 피로감을 느끼는 현상임. 시간이 지나면서 무감각해질 수 있음.
     * 연구 결과: 분노는 문제를 식별하고 반응하는 데 유용할 수 있지만, 과도한 분노는 해로울 수 있음. William Brady의 연구에 따르면, 분노는 특히 소셜 미디어에서 잘못된 정보가 확산되는 데 기여함.
     * 소셜 미디어의 영향: 분노는 감정을 활성화하여 사람들이 더 반응하게 만듦. 알고리듬은 자극적인 콘텐츠를 증폭시킴.
     * 현대 사회의 분노: 정치적 양극화와 세계적 사건으로 인해 분노가 증가하고 있음. 소수의 사용자가 대다수의 분노 게시물을 주도함.
     * 분노 피로의 영향: 지속적인 분노 노출은 무관심을 초래할 수 있음. 정치인들이 이를 이용하여 사람들을 조작할 수 있음.
     * 대처 방법: 미디어 소비를 제한하고, 지역 정치나 지역 사회 문제에 참여하는 것이 중요함. 실제 사람들과 대화하는 것이 도움이 됨.
     * 분노 소진 회복: 미디어 소비를 줄이고, 자연 속에서 시간을 보내는 것이 도움이 됨.
     * 결론: 분노 피로를 피하기 위해서는 미디어 소비를 조절하고, 지역 사회에 참여하는 것이 중요함.

        Hacker News 의견

     * 폴란드에서 8년간 트럼피스트 정권 아래 살면서 얻은 경험:
          + 가치 있는 신문이나 잡지를 구독하는 것이 좋음. 전문가들이 일하고 있어 사실과 가치 있는 의견을 얻을 수 있음
          + 소셜 미디어 사용을 피하는 것이 좋음. 대화 상대가 정상적인 사람인지, 정치적 트롤인지 알 수 없음
          + '깨어있는' 사람들과의 논쟁은 가치가 없음. 그들은 감정적 콘텐츠에 중독되어 있으며, 정치적 신념과 종교적 신념이 뒤섞여 있음
          + 감정적 콘텐츠는 뇌에서 우선시되므로 피하는 것이 좋음. 그렇지 않으면 저녁이 망가질 수 있음
          + 사람들은 감정과 희생에 중독되고 있으며, 공영 방송이 해방된 후 약 5%의 사람들이 사설 TV로 전환하여 일일 감정적 콘텐츠를 얻음
          + 소셜 미디어는 새로운 종류의 바이러스처럼 느껴지며, 우리는 모두 병에 걸려 면역력을 키워야 함
          + 결국 합리적인 사람들이 더 많지만, 민주주의는 더 나은 헌법/법률 시스템을 개발해야 하며, 법을 어기는 정권에 대한 빠른 반응이 중요함
     * 소셜 미디어와 짧은 뉴스 사이클에서 벗어나 좋은 결과를 얻음. 주간지(예: The Economist)는 여전히 읽을 가치가 있으며 중요한 주제를 필터링함
          + (지오)정치에 대해 더 많은 정보를 원할 때는 관련 국가의 주요 싱크탱크 웹사이트를 방문함. 편향이 명확하고 저자들은 깊이 있는 지식을 가지고 있으며, 교육받은 청중을 대상으로 글을 씀
          + 미국인들에게는 Council on Foreign Relations와 RAND를 공화당 관점에서, Center for Strategic and International Studies와 Brookings를 민주당 관점에서 추천함
     * 온라인 분노에 민감한 사람들은 소셜 미디어를 완전히 끊는 것을 고려해야 함. 기술적으로 Z세대이지만, HN, WhatsApp, Discord를 제외한 소셜 미디어를 몇 년간 사용하지 않음
          + Reddit, Instagram, X, Facebook, TikTok, LinkedIn, Threads 등은 디지털 정크 푸드와 같으며, 우리가 생각하는 것보다 더 부정적인 영향을 받음
          + '뇌 썩음'이 올해의 단어가 된 이유가 있음
     * 분노 피로는 없음. 분노는 분노일 뿐이며, 많은 과장과 가짜 분노가 존재함. 그러나 미국의 현재 헌법 위기는 실제임
          + 분노에 대한 피로가 아니라, 그것에 대해 무엇을 해야 할지 모르는 것이 문제임
          + 폭력이 더 흔해질 것 같지만, 효과적일 것 같지는 않음
          + 분노보다는 현실의 파멸 루프에 갇혀 있는 느낌이 문제임
          + 무언가를 하고 싶지만, 무엇을 해야 할지 모름
     * 뉴스를 계속해서 따라가지 말고, 가끔씩 확인하는 것이 좋음. 긴 기사에서 뉴스를 얻고, 트윗에서 배우지 말아야 함
          + 분노가 문제를 식별하고 반응하는 데 유용할 수 있지만, 항상 경험하면 해로울 수 있음
          + 분노 자체는 반응이며, 긍정적인 반응은 아님. 많은 사람들이 반응하고 있음
     * 서구에서 우리가 보는 많은 것이 정부나 기업, 또는 많은 사람들에 의한 선전이라는 것을 잊기 쉬움. 이를 염두에 두면, 모든 것이 의견이 되며, 시간이 지나면서 자신의 의견을 형성할 수 있음
     * '정보를 얻는 것'은 일반적으로 과대평가된다고 생각함. 종종 궁정 내막과 정보 서비스/기업 내러티브에 대한 정보를 얻는 것을 의미함
          + 일반적으로 미디어 소비나 '정보를 얻는 것'은 미덕이 아니라 악덕으로 간주해야 함
     * 2016년부터 열렬한 뉴스 소비자로서, 초기에는 읽은 기사, 트윗, 뉴스에 매우 분노했음. 시간이 지나면서 이러한 기사들이 분노를 유도한다는 것을 깨달음
          + 시간이 지나면서 '분노 유발 요소'를 파악하게 되었고, 뉴스에 대해 더 객관적으로 접근할 수 있게 됨
          + NYT, CNN, Fox News, DailyWire, Bannon's War Room 등의 보고서를 읽으며, 각 매체가 독자를 분노하게 하려는 부분을 자주 발견함
     * AI를 사용해 이야기를 중요도에 따라 순위를 매기고, 뉴스 제목을 지루하고 사실적인 스타일로 다시 작성함으로써 문제를 해결하려고 시도함
          + 하루에 약 10개의 헤드라인만 중요도 5.5 이상을 받음
          + 서구 문제에 대한 과도한 집중을 피하고, 세계에서 일어나는 일을 실제로 배울 수 있음
     * 기사를 읽고, 단순히 헤드라인만 보지 말아야 함. 미묘한 차이를 이해하고, 실제로 무슨 일이 일어나고 있는지 배우며, 사람들이 어떻게 반응하는지 봐야 함
          + 유동적인 상황이 여러 방향으로 나아갈 수 있으며, 고정된 것이 아님을 이해하면 덜 얼어붙은 느낌을 받을 수 있음
"
"https://news.hada.io/topic?id=19125","현대 애플 시스템을 위한 핫라인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           현대 애플 시스템을 위한 핫라인

Hotline

  Hotline이란?

     * 1997년에 Mac OS용으로 출시된 Hotline은 사람들이 Mac에서 직접 온라인 커뮤니티에 참여하거나 호스팅할 수 있게 해주는 세 가지 무료 애플리케이션의 모음이었음
     * Hotline 서버에 연결하면 IRC처럼 채팅하고, AIM처럼 개인 메시지를 보내고, 포럼처럼 뉴스 읽기 및 쓰기, BBS처럼 메시지 게시판에 게시, FTP처럼 파일을 탐색, 업로드, 다운로드할 수 있었음
     * Hotline 서버 운영자는 모든 기능을 완벽하게 제어할 수 있었음
     * Tracker라는 기능도 포함되어 있어 서버를 추적할 수 있었으며, 서버를 운영하는 사람은 Tracker에 서버를 등록하여 사람들이 쉽게 찾을 수 있게 할 수 있었음
     * 이메일로 채팅하고 물리적 매체로 파일을 공유하던 시절에 Hotline은 인터넷의 가능성을 보여주는 혁신적인 서비스였음
     * Hotline을 만든 회사는 더 이상 존재하지 않지만, 여전히 Hotline 서버와 Tracker가 운영되고 있으며, 이 프로젝트는 현대 Apple 시스템용으로 Hotline의 오픈 소스 버전을 만들려는 시도임

  상태

     * macOS와 iOS에서 다양한 기능을 지원하며, iPadOS와 visionOS는 아직 지원되지 않음
     * 지원되는 기능에는 Tracker 목록, 서버 연결, 서버 계정, 서버 북마크, 이름 및 아이콘 변경, 개인정보 설정, 자동 응답, 서버 약관 및 배너 표시, 공개 채팅, 개인 메시지, 사용자 목록 및 아이콘, 사용자 관리, 뉴스 읽기 및 게시, 메시지 보드 읽기 및 게시, 파일 탐색, 다운로드 및 업로드 등이 포함됨

  목표

     * 현대 Apple 시스템을 위한 Hotline 클라이언트 구축
     * Swift 코드로 작성된 HotlineProtocol, HotlineClient, HotlineTrackerClient, HotlineFileClient를 재사용 가능하게 만들어 다른 Swift Hotline 프로젝트에서도 사용할 수 있도록 함
     * 하나의 코드베이스로 iOS, iPadOS, macOS에 현대적인 Hotline 클라이언트를 제공
     * 10년 이상 상표 데이터베이스에서 삭제된 Hotline 브랜드를 부활시키는 것
     * Hotline 프로토콜 문서화
     * 재미있게 프로젝트 진행

   핫라인을 1990년대에 사용해서 커뮤니티를 만들고 운영해봤었음,
   당시 매킨토시 유저들을 위한 긱종 앱들, 도큐먼트, mp3, 글꼴등을 공유하고 국내 소수 맥유저들은 강한 유대감을 갖게 되었고 오프라인 모임도 자주 가졌음.
   핫라인 개발자가 내부갈등으로 코드를 묶고 퇴사했고.. 리버스엔지니어링으로 다시 만들어지는 우여곡절을 겪다가 더이상 개발이 진행되지 않았음.
   앱이 방치되자 가장 큰 문제는 파일크기 제한이 FAT 포맷에 맞추어져 있었음.
   점차 커뮤니티는 와해되고 핫라인은 더이상 사용하지 않게됨.
   다시 현대적으로 개선되어 나온다면 적극적으로 커뮤니티를 구성하고 운영해볼 생각이 있음.

        Hacker News 의견

     * 1990년대 Hotline의 창립 팀에 있었던 경험을 공유하며, 당시 Macworld Expo SF '98에서의 Hotline 발표에 대한 보도 자료를 작성했음. Hotline 팀은 전 세계에 흩어져 있었지만, Hotline을 통해 서로 소통하며 즐거운 시간을 보냈음. Hotline은 Apple, GM, Avid와 같은 회사에서도 사용되었으며, 온라인 세계에서 중요한 역할을 했다는 Toronto Star의 인용문을 특히 좋아했음. 현재는 Computer History Museum에서 일하며, Hotline 관련 물품으로 사무실을 꾸미고 있음.
     * Hotline은 개인에게 큰 영향을 준 소프트웨어였음. Mac 전용이었고, BBS와 유사한 특성으로 각 서버마다 고유한 문화와 커뮤니티가 있었음. 특정 서버에 계정을 얻는 것은 중요한 순간이었음. 1998년에는 대학에서 매우 빠른 OC-12 연결로 Hotline 서버를 운영하는 ""JADE"" 같은 멋진 서버도 있었음. 그 시절에 만난 친구들과 여전히 연락을 주고받고 있으며, 그 중 한 명은 지난 7월에 갑작스럽게 세상을 떠났음. 그 친구는 첫 Windows 컴퓨터를 선물해 주었고, 이는 삶의 방향을 바꾸는 놀라운 경험이었음. 또한, Hotline을 통해 전 세계의 멋진 음악을 접할 수 있었음.
     * 인터넷이 초기 단계였던 시절의 시스템에 대한 강한 향수가 있음. 당시 16MB RAM으로 ICQ를 실행하며 브라우저와 메일 클라이언트를 멀티태스킹할 수 있었던 것이 놀라움. 현대의 컴퓨터에서는 각 활동이 1GB 정도의 메모리를 소모하는데, Hotline이 10MB RAM에서 실행될 수 있었다는 점에서 현재의 기술에 대해 의문을 가짐.
     * 1990년대 Macintosh를 위한 최고의 플랫폼은 Hotline이었음. First Class도 훌륭했지만, Hotline은 매우 간단했음. 트래커 주소를 입력하고 서버를 실행하여 HDD의 폴더를 가리키면 인터넷에서 해적 BBS 서버 호스트가 될 수 있었음. AOL의 스크립트 키디들을 진짜 인터넷으로 데려왔으며, 이는 영광스러운 시기였음. 여전히 플랫폼의 저자가 준 Big Red H 목걸이를 가지고 있음.
     * Hotline 클라이언트에 내장된 기본 트래커의 도메인인 hltracker.com이 만료된 후, 커뮤니티의 누군가가 이를 인수하여 새로운 트래커를 같은 주소에서 호스팅하고 있음. 오래된 컴퓨터나 VM에서 원래의 Hotline 클라이언트를 실행하면 여전히 1997년처럼 작동함. 여전히 활성 서버가 많이 있음.
     * 과거에 Hotline 서버를 운영했던 경험을 공유하며, 3년 동안 대학의 HP-UX 서버에서 T3 연결로 운영했음. 시스템 관리자에게 발견되기 전까지는 아무도 눈치채지 못했음. 발견된 후 계정이 몇 달 동안 정지되었음.
     * DOS와 BBS 시스템에서 온 사람으로서, 1998년에는 사람들이 인터넷을 사용하기 시작하면서 BBS가 쇠퇴하기 시작했음을 언급함.
     * Hotline을 다이얼업 시절에 사용했던 경험을 공유하며, 느린 연결로 인해 사용이 어려웠지만, 대부분의 BBS보다 훨씬 더 Mac과 유사했음을 기억함.
     * 1990년대 Apple 커뮤니티에 깊이 관여했지만 Hotline에 대해 들어본 적이 없었음. Wikipedia 페이지에 따르면, Hotline은 좋은 제품이었지만 내부 문제로 인해 단명했음. Adam Hinkley가 캐나다로 이주한 후, Hotline Communications에서 동료들과 큰 의견 차이를 겪고 회사를 떠나면서 소스 파일을 암호화하여 회사를 마비시켰음.
     * Hotline, Delta Tao의 Clan Lord, mp3s 등을 33.6k 모뎀으로 사용했던 시절을 회상하며, 그래픽 라이브러리와 Think Pascal 등을 받았던 경험을 공유함.
"
"https://news.hada.io/topic?id=19133","잭슨폴락.org 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             잭슨폴락.org 웹사이트

        Hacker News 의견

     * 설정 가능함
          + 숫자는 회색조를 설정함
          + 문자는 색상을 설정함 (b=파랑, r=빨강, y=노랑 등)
          + 마우스 클릭은 랜덤 색상을 설정함
          + 스페이스바나 더블 클릭은 캔버스를 초기화함
          + 이전 토론에서 가져온 댓글임 (Cactus2018에게 감사함)
     * 재미있음
          + 2012년에 완벽한 칠판 분필 효과를 찾으려고 일주일을 보낸 기억이 남
          + 여러 실험 끝에 가장 현실적인 방법은 두꺼운 선을 그리고 작은 무작위 크기의 사각형을 지우는 것이었음
     * 다른 이야기로, Pollock의 스튜디오 바닥 자체가 하나의 예술 작품임
     * 재미있지만 Pollock보다는 Steadman(라스베가스의 공포와 혐오의 삽화가)와 더 유사함
     * 이 작품을 정말 좋아함
          + 많은 사람들이 예술을 ""아이의 낙서""로 비판하는데, 이는 예술의 경험과 과정을 이해하지 못하기 때문임
          + 교육은 모두를 발전시킴
          + 이 작품은 그러한 단순한 교육의 예임
          + 이제 모두가 자신만의 Pollock 예술을 만들어보길 바람
     * 아름다움
          + 최소한의 인터페이스
          + 도메인 자체가 유일한 설명임
     * Pollock이 미국 지역주의 화가 Thomas Hart Benton의 제자였다는 점이 흥미로움
          + 두 예술가는 매우 달랐음
     * 아직 초기이지만, 현재의 댓글과 2020년의 토론 차이를 보는 것이 재미있음
     * 멋지지만, Pollock보다는 Ralph Steadman 배경 생성기에 더 가까움
     * 사용자 인터페이스에 대해 혼란스러워하는 사람들이 있음
          + 클릭할 필요 없이 움직이기만 하면 됨
          + 대부분의 키보드 키가 색상에 대응함
          + Shift + 해당 키는 배경을 설정함
          + 힌트가 없고 탐험과 실험을 통해 보상을 받는 점이 마음에 듦
"
"https://news.hada.io/topic?id=19156","Meta AI Demos","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Meta AI Demos

        Hacker News 의견

     * 다양한 데모 도구 상자에 대한 설명임
          + Segment Anything 2: 비디오 컷아웃 및 재미있는 시각 효과를 몇 번의 클릭으로 생성함
          + Seamless Translation: 다른 언어로 들리는 자신의 목소리를 경험할 수 있음
          + Animated Drawings: 손으로 그린 스케치를 애니메이션으로 생동감 있게 만듦
          + Audiobox: AI로 생성된 목소리와 소리를 사용하여 오디오 스토리를 만듦
     * Seamless Translation은 꽤 놀라운 기능임
          + 영어와 스페인어를 구사하는 사용자가 영어 문장을 녹음하고 생성된 스페인어 출력을 들었을 때, 자신의 스페인어와 거의 비슷했음
          + 다만, 사용자의 스페인어에는 카스티야어 특유의 표현이 더 많이 포함되어 있음
     * 제목에 Aidemos라고 쓰여 있는 이유가 궁금함
     * Meta의 AI 연구 방향이 궁금함
          + Google과 MSFT의 목표는 이해되지만, Meta의 최종 목표는 잘 모르겠음
     * Seamless Translation 데모는 훌륭함
          + 번역된 목소리가 자신의 원래 목소리와 비슷함
          + 실시간으로 이 기능을 구현할 수 있다면 놀라운 일이 될 것임
     * Meta는 GPT-3와 ChatGPT의 영향을 깊이 이해하고 있음
          + 모델은 시작점이며, 모델을 활용한 UX가 지능을 보여줌
          + 특히 시각 모델에서 두드러짐
          + SAM2가 ""무엇이든 볼 수 있다""고 말하는 것이 흥미로움
          + 축구공을 클릭하고 모델이 비디오에서 가려져도 매끄럽게 추적하는 것을 보는 것이 놀라움
     * 모든 데모가 포함된 것은 아님
          + 예를 들어, Meta Motivo 데모가 누락되어 있음 (휴머노이드 제어 모델)
     * ""현재 귀하의 지역에서는 사이트를 이용할 수 없습니다""라는 메시지가 표시됨
     * 모델에 대한 모든 링크가 어디 있는지 궁금함
     * 흥미롭지만 Meta가 실제로 무엇을 원하는지 명확히 밝혔으면 좋겠음
          + ""모델을 추가로 훈련시키기 위해 In the Wild 데이터를 제공해 주세요""라는 의미일 것임
     * 몇 년 전 나이 추정 기술을 사용한 경험이 있음
          + 사용자가 이미지를 업로드하고 얼굴 랜드마크 포인트의 10%를 정렬하는 데 도움을 주면 추정기를 실행함
          + 잘못된 경우 수정 요청을 받아 개선함
          + 여전히 멋지지만 이전 경험에 비해 큰 감흥은 없음
"
"https://news.hada.io/topic?id=19119","봇임을 공개하도록 요구하는 캘리포니아 법안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        봇임을 공개하도록 요구하는 캘리포니아 법안

     * 개요
          + 캘리포니아에서 모든 온라인 봇과 AI 기반 계정이 자동화된 특성을 공개하도록 요구하는 법안임.
          + 생성적 인공지능을 사용하는 계정을 포함하도록 봇의 정의를 확장함.
          + 사용자와의 온라인 상호작용 중 요청 시 즉시 봇임을 공개하도록 의무화함.
          + 월간 미국 사용자 1천만 명 이상인 모든 플랫폼에서 명확하고 눈에 띄는 봇 공개를 요구함.
     * 요약
          + Wilson 의원의 봇 공개 법안은 캘리포니아의 자동화된 온라인 커뮤니케이션 접근 방식을 재정의함.
          + 이 법안은 봇이 상업 거래나 투표 행동에 영향을 미치려 할 때만 공개를 요구하는 현재 법을 확장함.
          + 법적 정의를 업데이트하여 생성적 인공지능으로 운영되는 계정을 포함함.
          + 모든 온라인 상호작용에서 봇임을 명확히 공개하도록 요구하며, 다른 사용자 요청 시 이 정보를 제공해야 함.
          + 공개 요구 사항은 공공 웹사이트, 웹 애플리케이션, 디지털 플랫폼에 적용됨.
          + 1천만 명 이상의 월간 미국 방문자가 있는 온라인 플랫폼은 이러한 확장된 공개 규칙을 준수해야 함.
     * 주요 날짜
          + 2025년 2월 4일: 처음 읽음. 인쇄 예정.
     * 참여 방법
          + 이 법안은 최근 도입됨. 작성자에게 이메일을 보내 의견을 전달할 수 있음.
     * 커뮤니티 전망
          + 긍정적: 45.5%
          + 부정적: 54.5%
     * 최신 투표 기록
          + 현재 이 법안에 대한 투표 기록 없음.

        Hacker News 의견

     * 과거에는 챗봇이 덜 유용했을 때, 챗봇이 인간이나 신을 가장하는 것은 괜찮았지만, 직접적으로 물어보면 봇임을 확인해야 한다는 예절이 있었음. 공공에 노출되는 봇은 이를 준수해야 한다고 생각함.
     * alexd127의 활동이 vetto.app의 홍보로 보임. 동일한 법안에 대한 다른 활동이 없음.
     * AI로 생성된 이메일, 영업 연락, LinkedIn 메시지에도 이 법안이 적용되기를 바람.
     * 월간 미국 사용자 1천만 명 이상일 때만 요구사항이 적용됨. 소규모 기업에도 적용되어야 한다고 생각함.
     * Veeto 웹사이트가 불안정하여 공식 캘리포니아 입법 페이지를 공유함. 법안은 ""오도할 의도""가 있을 때만 불법이라는 요구사항을 제거하고, 봇임을 공개하지 않으면 불법이라는 명확한 규칙을 제시함.
     * Veeto 웹사이트에 ""이 법안에 대해 무엇이든 물어보세요!""라는 챗봇 기능이 있어, 이 법안이 Veeto 웹사이트에도 직접적인 영향을 미칠 것 같음.
     * 산업은 법안과 상관없이 곧 변화할 것임. AI 에이전트를 활용하여 작업을 수행하는 것이 일반적인 현실이 됨.
     * 이 법안이 큰 성과를 거두지 못할 것 같지만, 논의가 필요하다고 생각함. 공개에 대한 관심이 많지만, 대기업과 광고주는 이를 원하지 않을 수 있음.
     * PUBG 모바일 플레이어에게 봇과의 승리를 알릴 필요가 있는지에 대한 질문이 제기됨.
     * 실용성이나 헌법적 이유로 이 법에 반대할 수 있지만, 인간처럼 행동하는 봇을 금지하는 법이 더 유용할 것이라고 생각함.
     * 전화 스팸 발신자에게 ""당신은 봇인가요? 그렇다면 말해야 합니다.""라고 자주 말함. 이는 과거의 대화를 떠올리게 함. 캘리포니아에 긍정적이라고 생각함.
"
"https://news.hada.io/topic?id=19063","미국은 쿠데타 진행중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국은 쿠데타 진행중

     * 쿠데타 발생에 대한 문제 제기
          + 미국에서 쿠데타가 진행 중이라는 명백한 징후가 있음
          + 지난 48시간 동안 Elon Musk의 DOGE 위원회가 재무부(Treasury) 결제 시스템을 장악하고, USAID 기밀 자료에 무단 접근했음
          + 절차를 지킨 보안 담당자들이 해임되었음
          + 법적으로 보장된 공무원들이 전 행정부 시절의 합법적 의무를 이행했다는 이유로 해임되고 있음
          + 대통령이 스스로 싫어하는 법률을 시행하지 않겠다고 공언했음
          + 의회가 이를 침묵으로 방관하고 있음
     * 헌법적 통치 질서의 해체
          + 탱크나 군인이 아니라, 헌법 통치 구조가 개인 충성 체계로 대체되는 방식으로 진행되고 있음
          + 이에 저항하는 인물들은 배제되고, 협력하는 이들은 정부 기능에 대한 전례 없는 통제권을 얻고 있음
          + 현실을 직시하지 않고 미온적으로 대처하는 태도는 오히려 공모에 가깝다는 주장임
     * Donald Trump와 Elon Musk의 권력 장악 양상
          + Donald Trump와 Elon Musk가 불법적인 수단을 통해 연방 정부의 기구를 체계적으로 장악하고 있음
          + 법에 의해 보호되는 공무원 제도를 위반하며, 요구되는 절차를 이행한 인력들을 해임함
          + 의회가 법으로 설립한 기관들을 불법적으로 폐쇄하거나 조치 없이 방치하고 있음
     * 조직적 해체의 구체적 징후
          + 안전 규정에 따른 기밀 취급 방침을 지킨 보안 담당자가 해임되는 사례가 발생함
          + 민간인이 재무부 결제 시스템에 무단으로 접근함
          + 민간 이해관계가 헌법적 통제를 벗어나 정부 시스템을 장악하는 상황임
          + 이는 단순한 제도 개혁이 아니라, 권력 자체를 개인 충성으로 흡수하려는 행위임
     * 즉각적 대응의 필요성
          + 이번 사태는 긴급 상황에 해당함
          + 저항 수단 자체가 해체되기 전에 행동할 필요가 있음
          + 역사적으로, 쿠데타 상황을 방관한 이들은 이후 혹독한 평가를 받았음
     * 헌법과 그 역사적 의미
          + 미국 헌법은 인류가 이룩한 가장 위대한 자기 통치 실험으로 여겨짐
          + 개인의 힘이 아닌, 민주적 제도와 법의 지배를 추구해 온 역사적 유산임
          + 이 제도를 Donald Trump와 Elon Musk의 개인 권력에 예속시키려는 시도가 진행되고 있음
          + checks and balances, 공무원 보호 제도, 의회의 감독 등 헌법적 방어 장치들이 계산된 방식으로 해체되고 있음
     * 헌법적 통치가 갖는 중요성
          + 이번 사태는 단지 또 다른 정치 위기가 아니라, 존재론적 위협임
          + 200여 년간 이어져 온 인간의 자유를 지켜 온 헌법 질서를 지킬 필요가 있음
          + 헌법은 스스로를 지키지 못하므로, 시민들이 적극적으로 저항해야 함
     * 정상적 정책 논쟁과 이번 사태의 구분
          + 이민, 조세 등 정책에 대한 논쟁은 민주주의 내의 정상 범주에 해당함
          + 그러나 민간이 정부 결제 시스템을 불법 장악하거나, 의회가 세운 기관을 독단적으로 폐쇄하는 것은 다름
          + 이는 헌법 프레임워크 자체를 해체하려는 행위임
     * 보수주의자들에게 보내는 메시지
          + 공화당이나 보수주의 정책을 지지하는 것과는 별개의 문제임
          + 권력 분립과 법적 절차를 무시해 개인 충성 체계로 공무원을 대체하는 것은 보수주의적 가치인 헌법 수호와 상충됨
          + 이는 특정 당의 승리가 아니라, 민주적 토론 자체가 불가능해지는 위협임
     * 역사의 목소리와 희생의 의의
          + 미국의 역사적 전쟁에서 희생된 이들은 헌법 민주주의를 지키기 위해 목숨을 바친 것임
          + 그들이 지킨 ‘인민의, 인민에 의한, 인민을 위한’ 정부가 지금 크게 흔들리고 있음
          + 보안 담당자 해임, 의회 승인 없이 기관 폐쇄, 민간 권력의 정부 장악 등은 이 희생을 헛되게 할 수 있음
     * 지금 필요한 행동
          + 편안한 방관을 할 시점이 아님
          + 모든 미국인이 헌법 민주주의의 가치를 이해하고, 적극적으로 이를 지켜야 함
          + 사태가 더 심각해지기 전에 남아 있는 민주적 대응 수단을 활용해야 함
          + 과거 세대가 피로써 물려준 자유를 무기력하게 포기하지 않기 위해 즉각적인 행동이 요구됨

        Hacker News 의견

     * 어떤 사람들은 대통령이 선거로 부여받지 않은 권력을 장악하려는 시도를 '자동 쿠데타'라고 부름
          + 이는 법적 시스템을 무시하고 국가를 구한다는 명목으로 진행됨
          + 쿠데타는 반드시 성공할 필요가 없으며, 시민들이 반대하지 않으면 성공할 가능성이 높아짐
          + 민주주의 지지자들에게는 더 이상 강력한 항의 서신을 쓰는 것만으로는 충분하지 않음
     * '쿠데타'라는 단어에 강하게 반응할 수 있지만, '오르바니제이션'이라는 용어가 더 정확할 수 있음
          + 헝가리의 총리 빅토르 오르반은 군사 쿠데타 없이 민주주의 시스템을 체계적으로 해체함
          + 독립적인 공무원을 충성파로 교체하고, 미디어 플랫폼을 장악하여 여론을 조작함
          + 사법 및 절차적 조작을 통해 행정 권력의 법적 견제를 약화시킴
          + 국가 기능을 사적 영역으로 이전하여 감독을 약화시킴
          + 미국에서도 유사한 패턴이 나타날 수 있으며, 이는 평화적으로 저항할 수 있음
     * 대중이 행정부의 비선출 관료를 좋아하지 않을 때 사용할 수 있는 유효한 민주적 절차는 무엇인지에 대한 의문
          + 비선출 관료가 FBI, USAID 등을 영구히 운영할 헌법적 권리가 있는지에 대한 논란
          + 선출된 대통령이 공약을 이행하지 못하도록 방해하는 비선출 관료의 쿠데타처럼 보일 수 있음
     * Elon Musk는 Chuck Schumer의 비판에 대해 다음과 같이 반응함
          + ""급진적 좌파의 그림자 정부를 해체하는 것을 공개적으로 보여주고 있음""
          + ""비선출 관료로부터 민주주의로 권력을 되돌릴 수 있는 유일한 기회임""
     * 최근 48시간 동안 무슨 일이 있었는지 명확히 설명해줄 수 있는지 요청
     * 플래그된 제출물에 대해 보증할 수 없으며, 플래그된 댓글에 대해서만 가능하다는 의견
     * 이와 반대되는 입장을 가진 사람으로서 현실적으로 할 수 있는 일이 무엇인지에 대한 고민
     * 쿠데타라는 표현에 동의하지 않음
          + 미국 해외 원조 기관의 재조직이 법령 위반인지 명확하지 않음
          + 법령은 해외 원조에 $X를 할당하고 국무부에 이를 조직하도록 지시함
          + 모든 지급을 중단하는 행정명령은 법원에서 도전받고 중단됨
          + 많은 문제가 발생했지만 DOGE의 행동은 쿠데타가 아님
     * Trump 행정부는 DOGE와 관련된 상황에 대해 미국 국민에게 설명할 필요가 있음
          + Trump는 ""절반""의 국민이 자신에게 투표하지 않았음을 잊고 있으며, 이들을 달래야 함
          + Musk 등은 전문성이 부족하여 불안감을 조성함
          + X/Twitter를 모니터링해야만 상황을 이해할 수 있는 것은 요구되어서는 안 됨
     * 대통령이 싫어하는 법을 집행하지 않겠다고 공개적으로 선언하고, 의회는 침묵함
          + Trump에 반대 투표를 했지만, 이 부분에서 실망함
          + 저자가 민주당의 유사 사례를 모르거나 인식하지 못하는 것인지에 대한 의문
"
"https://news.hada.io/topic?id=19113","추론 능력을 이해하는 LLMs 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          추론 능력을 이해하는 LLMs 분석

    이해하기: 추론 모델

     * 추론 모델의 정의: 추론 모델은 복잡한 문제를 해결하기 위해 중간 단계를 포함한 다단계 생성이 필요한 질문에 답하는 과정임. 예를 들어, ""기차가 시속 60마일로 3시간 동안 이동하면 얼마나 멀리 가는가?""와 같은 질문은 단순한 사실 기반 질문과 달리 추론이 필요함.
     * 추론 모델의 필요성: 퍼즐, 고급 수학 문제, 복잡한 코딩 문제와 같은 복잡한 작업에 적합함. 그러나 요약, 번역, 지식 기반 질문 응답과 같은 간단한 작업에는 필요하지 않음. 추론 모델은 비용이 많이 들고 때로는 과도한 생각으로 인해 오류가 발생할 수 있음.

    DeepSeek R1 훈련 파이프라인

     * DeepSeek-R1-Zero: 671B 사전 훈련된 DeepSeek-V3 기반 모델로, 강화 학습(RL)만으로 훈련됨. 이는 ""콜드 스타트"" 훈련으로 불리며, 일반적인 RLHF와 달리 감독된 미세 조정(SFT) 단계가 없음.
     * DeepSeek-R1: DeepSeek의 주력 추론 모델로, DeepSeek-R1-Zero를 기반으로 추가 SFT 단계와 RL 훈련을 통해 개선됨.
     * DeepSeek-R1-Distill: 이전 단계에서 생성된 SFT 데이터를 사용하여 Qwen 및 Llama 모델을 미세 조정하여 추론 능력을 향상시킴.

    추론 모델 구축 및 개선을 위한 4가지 주요 방법

    1. 추론 시간 스케일링: 추론 중 컴퓨팅 자원을 늘려 출력 품질을 향상시키는 방법. 예를 들어, ""단계별로 생각하기""와 같은 문구를 입력 프롬프트에 포함하여 모델이 중간 추론 단계를 생성하도록 유도함.
    2. 순수 강화 학습(RL): DeepSeek-R1-Zero는 순수 RL을 통해 추론이 행동으로 나타날 수 있음을 보여줌. 정확도 보상과 형식 보상을 사용하여 모델이 기본적인 추론 기술을 개발하도록 함.
    3. 감독된 미세 조정(SFT) 및 강화 학습(RL): DeepSeek-R1은 SFT와 RL을 결합하여 추론 성능을 향상시킴. 이는 고성능 추론 모델을 구축하는 데 중요한 접근 방식임.
    4. 순수 감독된 미세 조정(SFT) 및 증류: DeepSeek는 더 작은 모델을 훈련하여 효율성을 높임. 이는 더 작은 모델이지만 DeepSeek-R1-Zero에 비해 상대적으로 강력한 성능을 보임.

    DeepSeek R1에 대한 생각

     * DeepSeek-R1은 오픈 소스 MIT 라이선스로 제공되어 연구자들에게 유용한 자원이 됨. OpenAI의 o1과 비교했을 때, DeepSeek-R1은 추론 시간에서 더 효율적임. 그러나 OpenAI의 o1에 대한 세부 정보가 부족하여 직접적인 비교는 어려움.

    제한된 예산으로 추론 모델 개발

     * 모델 증류는 비용 효율적인 대안이 될 수 있음. DeepSeek 팀은 R1-distilled 모델을 통해 이를 입증했으며, 이는 DeepSeek-R1보다 훨씬 작지만 강력한 추론 성능을 보여줌.

        Hacker News 의견

     * LLM의 추론 모델이 코딩 및 수학 문제에 과도하게 최적화되어 있는 경향이 있음
          + 잘 정의되지 않은 문제는 더 많은 추론이 필요하며, 이는 단순히 소프트웨어 엔지니어링의 모호함을 넘어서야 함
          + LLM이 수학 문제에 과도하게 맞춰져 다른 분야에서는 충분히 생각하지 않는 경향이 있음
          + 자기 학습을 좋아하며, 복잡한 주제를 이해하고 오해를 파악할 수 있는 대화 상대가 필요함
          + LLM이 코딩 문제를 잘 해결할 수 있지만, 과도하게 코딩/수학 퍼즐에 맞춰져 있음
     * LLM을 자연어가 아닌 제한된 형식 언어로 훈련하는 연구가 필요함
          + Lean과 ChatGPT의 통합 작업이 있지만, 자연어 훈련 LLM이 주도하는 방식은 아님
          + 창의적으로 다양한 시도를 하고, 잘못된 경로를 피할 수 있는 시스템을 상상함
     * 추론 모델의 ""과도한 생각""이 다음 큰 문제가 될 수 있음
          + 더 깊이 생각하는 것이 항상 좋은 것은 아님
     * R1 논문은 쉽게 읽을 수 있으며, 결과가 스스로를 설명함
          + R1, V3, DeepSeekMath 논문을 읽어볼 것을 추천함
     * LLM이 실제로 ""생각""하는지 여부는 별도의 논의임
          + 컴퓨터가 생각할 수 있는지 여부는 오래전에 해결된 문제임
     * AI가 의료 영상에서 과도한 식별을 하는 실제 사례가 있음
          + 훈련 데이터가 암을 나타내는 요소로 인식하게 만듦
     * LLM은 추론할 수 없음을 이해해야 함
     * DeepSeek-R1 기술 보고서에서 ""aha moment"" 주장이 의심스러움
          + DeepSeek V3 모델이 기반이며, 과도한 생각과 형식 문제를 겪음
          + 커뮤니티가 파이프라인을 재구현하려고 노력 중임
     * 몇 달 전 HN에 LLM 개선을 위한 정제 방법을 제안했으며, 이는 현재 ""추론""으로 설명됨
          + DeepSeek가 시장을 단순한 방법으로 장악할 줄 몰랐음
          + 직관을 진지하게 받아들여야 함
"
"https://news.hada.io/topic?id=19115","도널드 커누스 2024 크리스마스 강연: 강한 및 약한 컴포넌트 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               도널드 커누스 2024 크리스마스 강연: 강한 및 약한 컴포넌트 [비디오]

        Hacker News 의견

     * 2022년에 San Francisco를 방문했을 때, Knuth의 사무실을 우연히 발견했음. 그의 명성에 비해 사무실이 작았지만, 그의 겸손한 성격을 반영하는 듯했음
          + 사진 링크
     * Knuth의 책 4A와 4B를 읽고 있으며, 대부분의 프로그래머에게 실용적이지 않지만 알고리즘 설계와 작성 방식이 독특하고 놀라움. 특히 4B의 Dancing Links 구현은 예술 작품처럼 정교하고 빠름
     * 몇 년 전 San Francisco에서 Donald Knuth가 Stanford에서 강연을 한다는 것을 알고 감명받았음. 그의 강연을 듣고 감동적인 저녁을 보냈음
     * Donald Knuth의 오랜 헌신과 규율이 가장 영감을 줌. 여러 프로젝트와 언어, 배포판을 넘나드는 나에게 많은 것을 배울 수 있음
     * 질문을 이해하고 명확하게 답변하는 Knuth의 방식이 인상적임
          + 질문 답변 영상
     * Knuth가 입은 옷이 매우 생동감 있고 전통적인 세계/민족 의상처럼 보였음. 이란이나 슬라브 지역의 의상인지 확실하지 않음
     * Donald Knuth는 1938년 1월 10일생으로 현재 87세임
     * 컴퓨터에 대한 사랑을 다시 일깨워주는 영상에 감사함
     * Knuth는 여전히 놀라운 인물임
     * Stanford에서 음향 녹음이 제대로 되지 않아 실망스러움. Knuth의 목소리가 아닌, 질문을 받을 때의 음질이 좋지 않음
     * Knuth와 대화할 기회가 있었는데, 그는 친절한 사람이었음. Lex Fridman의 팟캐스트에 출연한 것도 멋짐
"
"https://news.hada.io/topic?id=19058","엘살바도르, 비트코인 법정화폐 지위 포기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         엘살바도르, 비트코인 법정화폐 지위 포기

     * 엘살바도르는 2021년 세계 최초로 비트코인을 법정화폐로 채택했으나, 이제 이를 포기함. 이는 나이브 부켈레 대통령의 경제적 실험이 실패로 끝났음을 의미함.
     * 엘살바도르 의회는 IMF와의 14억 달러 대출 협약을 이행하기 위해 비트코인 법을 개정함. 개정안은 비트코인을 ""법정화폐""로 유지하지만, 거래나 채무 상환 시 비트코인을 수용해야 하는 의무를 제거함.
     * 새로운 규정에 따르면, 엘살바도르의 달러화 경제에서 비트코인 사용은 선택 사항이며, 민간 부문이 암호화폐 결제를 수용할지 여부를 결정할 수 있음.
     * 복잡하고 위험한 비트코인 사용
          + 비트코인 법 개정은 공식 관보에 게재된 후 90일 후에 발효될 예정임. 경제학자들은 비트코인이 더 이상 법정화폐가 아니라고 명확히 해야 한다고 주장함.
          + 대부분의 엘살바도르 국민은 부켈레의 비트코인 채택을 지지하지 않았으며, 2024년 조사에 따르면 92%가 비트코인을 사용하지 않았음.
          + 비트코인 시티 프로젝트도 실패했으며, 이는 화산 에너지를 이용해 비트코인 채굴을 계획했던 고도 기술 도시임.
     * 정부의 비트코인 보유
          + 부켈레 대통령은 법 개정에 대해 언급하지 않았으나, 정부는 여전히 비트코인에 투자할 계획임. 엘살바도르 정부는 6,050개의 비트코인을 보유하고 있으며, 이는 6억 3,480만 달러에 달함.
          + 정부는 비트코인 구매를 계속할 것이며, 시민들이 공공 자금이 어떻게 투자되는지 알 수 있도록 투명성을 요구함. 부켈레는 도널드 트럼프가 백악관에 복귀하면 비트코인의 가치가 급등할 것이라고 믿고 있음.

        Hacker News 의견

     * IMF는 엘살바도르에 14억 달러의 대출 조건으로 비트코인 법정 화폐 지위를 포기할 것을 요구했음
          + 엘살바도르는 비트코인을 전략적 비축 자산으로 계속 구매하고 있음
          + 비즈니스와 시민들은 비트코인을 계속 사용할 수 있으며, 수용 여부는 자유로움
          + 정부는 비트코인을 계속 구매하고 보유할 계획임
     * 엘살바도르의 혁신적이고 창의적인 접근이 흥미로움
          + 살인율이 세계 최고에서 뉴질랜드보다 안전한 수준으로 개선되었음
          + 새로운 시도를 통해 실패를 경험하는 것은 이해할 수 있음
     * 비트코인이 일상적으로 사용되는 통화가 되려는 목표는 사라진 것 같음
          + 현재는 자산으로 구매 및 보유하는 경향이 있음
     * 엘살바도르는 초기 비트코인 구매로 3억 달러 이상의 수익을 올렸으며, 매일 비트코인을 구매하고 있음
          + 자체 추적기를 운영 중임
     * 비트코인은 에너지를 많이 소모하여 환경에 부정적 영향을 미침
          + IMF 대출을 위해 엘살바도르가 비트코인 법정 화폐 지위를 포기한 것은 정치적 이유로 보임
     * 비트코인은 구조적으로 통화로서 부적절함
          + 디플레이션 성향이 있어 경제적으로 부정적 영향을 미침
          + 이상적인 통화는 낮은 수준의 인플레이션을 가져야 함
     * 비트코인을 좋아하지 않는다면, 기사를 읽고 반응하는 것이 좋음
     * 비트코인 법정 화폐 법이 통과되기 전과 후에 엘살바도르에 3개월씩 체류했음
          + 비트코인 법정 화폐가 성공하지 않을 것이라고 판단했음
"
"https://news.hada.io/topic?id=19183","혼다의 매운맛 쥐 퇴치 테이프 시식 체험 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     혼다의 매운맛 쥐 퇴치 테이프 시식 체험 (2021)

     * 나는 Honda의 매운 설치류 방지 테이프를 맛보았음
          + Liz Cook는 자동차 문제를 겪은 후 Honda의 설치류 방지 테이프의 존재를 알게 되었음. 이 테이프는 설치류가 자동차의 중요한 전선을 갉아먹지 않도록 하기 위해 만들어졌음.
          + 테이프는 귀여운 쥐 실루엣이 그려진 회색 비닐 테이프로, 캡사이신으로 코팅되어 있음. Liz는 이 테이프를 맛보고 싶었지만, 안전성을 확인하기 위해 Honda에 문의했음.
          + Honda는 Liz의 질문에 답변하지 않았지만, Liz는 테이프의 재료 시트를 확인하여 인체에 유해한 물질이 포함되어 있지 않음을 알게 되었음. DEHP라는 화학 물질이 포함되어 있지만, 이는 높은 용량에서만 해로움.
          + Liz는 테이프를 맛보았고, 그것은 약간의 매운맛과 함께 밴드에이드 맛의 에너지 음료와 같았음. 설치류 방지 효과는 의심스러웠지만, 현대 요리에서의 잠재적 사용 가능성을 언급했음.
          + Liz는 이 테이프를 요리적 신기함으로 사용할 수 있는 몇 가지 아이디어를 제안했지만, 이는 추천하지 않음. Chris Martin은 테이프를 맛보지 말라고 강력히 권장했음.
          + Liz는 자신의 경험을 유머러스하게 마무리하며, 설치류 방지 테이프를 맛본 것이 자신의 마지막 후회가 될 것이라고 언급했음.

        Hacker News 의견

     * 액체 캡사이신 처리는 새 모이를 위한 효과적인 다람쥐 퇴치제임
          + 새들은 캡사이신에 대한 수용체가 없지만 포유류는 있음
          + 새들은 씨앗을 대부분 온전하게 먹고 소화 시스템이 씨앗을 분해할 수 있음
          + 포유류는 씨앗을 씹어 먹기 때문에 씨앗이 완전히 파괴됨
          + 식물은 포유류를 쫓아내는 화학적 자극제를 발견했음
          + 다람쥐를 막기 위해 캡사이신 처리를 사용한 경험이 있음
     * 최근 읽은 최고의 블로그 글 중 하나임
          + ""다음 줄을 읽고 싶게 만드는 한 줄을 쓰라""는 아이디어를 잘 전달함
          + 유머러스하면서도 진지함
          + 불필요한 내용이 없음
          + 즉시 구독하게 됨
     * 아래 시에 대한 참고 링크 제공
          + 시 링크
     * 또 다른 적응을 즐겼음
          + 적응 링크
     * 통찰력은 없지만 정말 재미있고 잘 쓰여진 글임
          + 데이브 배리의 전성기 글처럼 느껴짐
          + 데이브 배리 링크
     * 이 이야기에서 가장 웃긴 부분은 PR 담당자가 ""요즘 미국에서 판매되는 대부분의 것들은 암을 유발할 수 있다는 경고가 필요하다""고 답한 것임
          + 모두가 그걸 괜찮다고 여기는 것 같음
     * Nintendo Switch 카트리지를 맛본 사람 손 들어보세요
          + 플라스틱에 쓴맛이 첨가되어 질식 위험을 줄이기 위해 만들어졌다고 읽었음
     * 이번 주에 읽은 가장 유익한 설치류 테이프 리뷰 중 하나임
     * Land Rover/Jaguar는 이 테이프에서 이익을 얻을 수 있음
          + 설치류가 이 차량의 전기 하네스를 씹는 것을 좋아함
          + 수입 수리점을 운영할 때 Jaguar 세단을 소유한 고객이 100대 이상 있었고, 모두 설치류로 인한 배선 손상으로 견인된 적이 있음
          + Land Rover의 경우 문제가 덜 심각했지만 매년 40대 이상이 같은 문제로 견인됨
     * 설치류는 씹는 것을 좋아하는 것이 아니라 씹어야 함
          + 이빨이 자라지 않도록 닳게 해야 함
     * 설치류가 자동차 케이블을 씹는 이유는 절연체가 콩과 같은 화합물로 만들어져서 그들을 끌어당긴다는 이야기를 읽은 적이 있음
          + 실제로는 그들이 씹는 것을 좋아했기 때문임
          + 기사 링크
"
"https://news.hada.io/topic?id=19070","제로섬 게임: Nuxt.js는 공공재입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        제로섬 게임: Nuxt.js는 공공재입니다.

   몽고DB, 엘라스틱 서치, 워드프레스... 이들은 자신의 프로젝트를 영업에 사용하는 제3자를 시기했습니다. 하지만 Nuxt 개발자로서, 저는 제 프로젝트를 쓰는 사람들이 모두 번창했으면 좋겠습니다. 그에 대한 대가는 바라지도 않습니다.

   제가 개의치 않는 이유는 다음과 같습니다:
    1. 오픈 소스는 커뮤니티입니다. 제가 받아야 할 것보다 다른 사람들이 제 프로젝트를 애용하는 것을 좋아합니다.
    2. 보상은 가치를 필요로 하지 않습니다. 자신의 가치를 자신에게서 오는 기부나 지원 대신, 컨설팅, 기업가 정신, 유지, 고용에서 찾으세요.
    3. 성공은 전염됩니다. 오픈 소스를 기반으로 더 많은 영리 프로젝트가 성공할 수록 생태계 전체가 더 많은 혜택을 누릴 수 있습니다.

   그러므로 기분 나빠하지 마세요. 오히려 즐기십시오!


   워드프레스 글과 비교하면 굉장히 재밌습니다.
     * Wordpress는 WP Engine이 아닙니다.
     * Elastic, AWS가 사용 못하게 라이센스 변경
     * SSPL(Server Side Public License)은 나빠요
     * Redis 라이선스 변경 발표

   진짜로.. 즐기는자..

   멋지네요 ㅎㅎ 글의 마지막 말이 맘에 듭니다.
   ""Build your product - and flourish!""

   최고 개발자의 여유를 엿볼 수 있었습니다
"
"https://news.hada.io/topic?id=19172","자가면역질환 발견을 위한 오픈 소스 AI 도구 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      자가면역질환 발견을 위한 오픈 소스 AI 도구 개발

     * 자가 면역 질환을 찾기 위해 오픈 소스 AI 도구를 구축한 방법(10만 달러와 30회 이상의 병원 방문 후) - 이제 누구나 사용할 수 있음

오픈 소스 건강 분석 도구 개발 이야기

  5년간의 건강 문제와 진단 과정

     * 운동 중 쉽게 부상을 입고, 회복이 느리며, 피로감과 관절통을 겪음
     * 30곳 이상의 병원과 전문의를 방문하고 $100,000 이상 지출했으나 명확한 진단을 받지 못함
     * 여러 의료 전문가들이 각자의 분야만 보고 전체적인 연결 고리를 찾지 못함
     * 결국 류마티스 전문의가 유전자 검사와 증상을 종합적으로 분석한 후 자가면역 질환 가능성을 발견함

  AI가 같은 진단을 제시한 경험

     * 의료 데이터를 정리해 GPT 모델에 입력했더니 최종 진단과 동일한 결과를 제안함
     * 이를 계기로 비슷한 문제를 겪는 사람들을 위해 AI 기반 의료 데이터 분석 도구를 개발하기로 결심함

  오픈 소스 프로젝트 소개: OpenHealth

   GitHub 링크: OpenHealth

  주요 기능

     * 의료 기록 업로드: PDF, 검사 결과, 의사 소견서 등을 업로드 가능
     * 자동 분석 및 정리:
          + 다양한 형식의 검사 결과를 표준화
          + 단위 변환 (예: mg/dL → mmol/L)
          + CRP, ESR, CBC, 비타민 수치 등 주요 지표 추출
          + 검사 결과를 시간 순으로 정리
     * AI를 활용한 데이터 분석:
          + 검사 수치 변화를 추적
          + 여러 병원의 검사 결과를 비교
          + 여러 검사 데이터를 종합적으로 분석하여 패턴 식별
     * 다양한 AI 모델과 연동 가능:
          + 로컬 모델(Deepseek 등) 사용 가능
          + GPT-4, Claude 등 API 키가 있으면 상업용 모델도 활용 가능

  의료 기록 가져오기

     * 병원 기록이 파일로 없을 경우 Fasten Health 활용 가능
          + 미국 대부분의 의료 기관과 연동 가능
          + 의료 기록을 한 곳에서 쉽게 관리할 수 있도록 지원

  현재 개발 상태

     * 프론트엔드는 완성 및 오픈 소스 공개됨
     * 문서 분석 기능은 별도 Python 서버에서 동작 중
     * 향후 완전 로컬 실행이 가능하도록 마이그레이션할 예정

  AI와 건강 관련 커뮤니티

     * AI가 개인 건강 관리에 어떻게 기여할 수 있는지 논의하는 커뮤니티 생성: r/AIDoctor
     * AI의 한계를 인정하면서도, 더 나은 의료 분석 도구로 발전할 가능성을 탐색 중

   유익해요!! 🙂🙂🙂😊😊👍

   안녕하세요! OpenHealth 프로젝트를 개발하고 있습니다. 평소 긱뉴스에서 다른 분들의 프로젝트를 보다가 제가 만든 프로젝트가 올라와서 감회가 새롭네요.

   한국은 의료 데이터 접근성이 좋아서 LLM과 연동하기 좋은 환경입니다. 국민건강보험과 건강보험심사평가원에서 의료기록을 조회할 수 있고, 상세 진료기록은 병원에 사본 발급을 요청하면 받을 수 있습니다.

   관련 내용은 프로젝트 이슈에도 추가해두었습니다 (https://github.com/OpenHealthForAll/open-health/issues/36). 저도 이런 방식으로 제 데이터를 활용해보니 큰 도움이 되고 있습니다.

   의료 서비스는 환자의 데이터가 많을 수록, 의학지식이 많을 수록, 분석하는 지능이 높을수록 서비스 품질이 좋아진다고 생각합니다. AI는 빠르게 발전하기 때문에, AI 기반 의료서비스가 품질과 비용 면에서 더 좋아질 수밖에 없다고 생각합니다.

   다만 현재는 규제나 사업모델 등 때문에 이런 서비스들을 쉽게 찾아보기 어렵습니다. 그래서 제가 경험한 가치를 다른 분들과 나누고자 오픈소스로 이 프로젝트를 시작하게 되었습니다.

   관심 있으신 분들은 연락 주세요! openhealthforall@gmail.com

   정말 멋지십니다. 응원합니다.

   우와! 멋지네요. 저는 레딧에 올라와서 우리랑 상관없는 얘기구나 했는데 한국 분이셨군요. 응원합니다!

        Hacker News 의견

     * 놀라움. 의료 분야에서 질문을 계속할 수 있고, 과부하된 의사가 처리할 수 있는 것보다 더 많은 데이터를 제공할 수 있을 때 가능한 일이 대단함. 친구의 아버지가 중병에 걸렸을 때 ChatGPT를 사용하여 암 보고서를 해석하고, 여러 전문가와 깊이 있는 기술적 대화를 나누며 아버지를 위한 치료를 옹호할 수 있었음. 이는 전문가들이 생각하지 못했던 치료를 옹호하는 데 결정적이었음. 친구는 전문가들과 그들의 언어로 대화하고, ChatGPT를 통해 아버지에게 비전문적인 설명을 제공할 수 있었음. 이는 엄청난 권한 부여임
     * AI를 무시하는 사람들에게: 문제가 있다는 것을 알고 있지만, 도움을 받아야 할 전문가들로부터 어깨를 으쓱하는 반응만 받는 기분을 모름. 나도 같은 경험을 했음. 정형외과 의사는 관절과 손목 통증을 살펴보고, 내분비학자는 호르몬을 검사하고, 류마티스 전문의는 자체 테스트를 진행했음. 주치의에게 의존했다면, 나는 이부프로펜과 그들의 선호하는 대형 제약사의 항염증제를 복용하고 있었을 것임. 온라인에서 다른 사람들과 대화하고 주치의에게 HLA-B27 항원에 대해 테스트를 요청함으로써 강직성 척추염을 발견할 수 있었음. 인터넷에서 ""왜 X를 확인하지 않습니까?""라는 도움을 받은 것은 운이 좋았음. 나처럼 운이 좋지 않거나 정보에 접근할 수 없는 다른 사람들을 상상해봄. AI가 이 문제를 도울 수 있다면, 그것은 훌륭함
     * 이 문제에 대해 갈등을 느끼고 있음. 한편으로는, 아무도 미국의 의료 시스템이 좋거나 적절하다고 진지하게 주장할 수 없음. 이 과정은 기술 지원을 탐색하는 것과 비슷하며, 초기 단계는 가장 일반적인 사례의 신속한 분류와 (간신히) 적절한 해결을 지향함. 이는 개인이 더 많은 능력을 갖추지 못했다는 것을 의미하지 않음. 단지 시스템이 그렇게 설정되어 있지 않음. 'L2' 지원에 도달하는 것은 기술 세계에서만큼이나 좌절감을 줄 수 있음. 다른 한편으로는, 도메인 특정 데이터를 해석하는 데 많은 훈련과 경험이 필요함. 로그를 보는 것과 약간 비슷하게, 무시할 것을 아는 것이 종종 더 중요함. LLM은 여러 가능한 원인을 덤프할 수 있으며, 그 중 일부는 아마도 환각일 수 있음. 그러나 결과를 가지고 다음 단계로 나아가는 것은 대부분의 사람들이 할 수
       있는 일이 아님. 이러한 도구의 가장 즉각적인 이점은 아마도 충분한 시간과 지식을 얻어 효과적으로 사용할 수 있는 동기와 결단력을 가진 개인에게 있을 것임. 확실한 것은, 이 스레드에서 다른 사람들이 지적한 것처럼, 의료 시스템에서 자신의 옹호자가 되어야 한다는 것임
     * 사람들이 자신의 (익명화된) 의료 기록을 중앙 데이터베이스에 업로드하여 추가적인 통찰력을 얻어 치료를 안내할 수 있다면 멋질 것임. 인종이나 국가 출신과 같은 유전 정보를 포함하면, 사람들은 장애의 유전학에 대해 배울 수 있을 것임. 나는 마르판 증후군으로 나타나는 결합 조직 장애를 가지고 있지만, 2010년대에 UCSF의 유전학자를 방문했음. 그는 마르판, 로이스-디츠, 루잔-프린스, 엘러스-단로스 및 내 신체 증상, 심혈관 문제 및 골격 문제를 설명할 수 있는 다른 여러 장애를 살펴보았지만, 아무것도 찾지 못했음
     * $100K 30번의 의사 방문, 답이 없었음. 이는 아마도 Ehlers Danlos Syndrome (hEDS)와 관련이 있을 수 있음. 오늘날 내 증상을 AI에 입력하면, 의사에게 제공한 것과 같은 목록을 얻을 수 있으며, hEDS와 TNXB를 후보 유전자로 얻음. 내 WGS DNA 데이터는 의사에게 더 이상 신경 쓰지 않게 된 후에 나왔음. AFAIK, hEDS를 진단하는 것은 전문가만 가능하며, AFAIK, TNXB를 예측하는 사람은 전혀 없음. 그들은 그것을 clEDS라고 부르며, 특정 TNXB SNP가 동형 접합일 때만 100만 중 1로 간주함. 나는 대부분의 hEDS가 무해한 것으로 추정되는 TNXB SNP에 의해 발생한다고 생각함. 심지어 hEDS의 DNA 후보를 찾는 연구에서도 TNXB를 건너뛰는데, 이는 hEDS가 드물고 TNXB SNP가 일반적이라는 믿음 때문임. AI가 어디서 정보를 얻는지 모르겠지만, TNXB 이론은 주로 그것을 가진 일부 환자들이 가진 이론임. RCCX
       유전자 클러스터에 초점을 맞춘 일부 특이한 재능 연구자들이 있음. 이는 많은 자가면역 질환을 유발함. AI의 답변이 의사보다 훨씬 낫다고 생각함. AI가 틀렸다고 해도, 모든 의사가 틀렸던 것보다 나쁘지 않음. 한 의사는 나에게 갑상선 수술을 받아야 한다고 말했지만, 그 단계에서 이미 그들에 대한 신뢰를 잃었음
     * 가장 좌절스러운 부분은 답변의 부족뿐만 아니라 모든 것이 조각나 있다는 것이었음. 각 의사는 퍼즐의 한 조각만 보았음: 정형외과 의사는 관절 통증을 살펴보고, 내분비학자는 호르몬을 검사하고, 류마티스 전문의는 자체 테스트를 진행했음. 아무도 전체 그림을 보지 않았음. 류마티스 전문의를 방문하여 내 증상과 유전자 검사 결과의 조합을 살펴본 후에야 자가면역 질환이 있을 가능성이 있다는 것을 알게 되었음
     * 이걸 의심하는 사람은 정말로 무슨 말을 하는지 모름. Claude(또는 다른 것)에 ""건강 및 피트니스"" 프로젝트를 설정하고 다음을 입력함: 기본 데이터: 키, 몸무게, 나이, 성별. Apple Health 또는 기타에서 기본 메트릭 스냅샷: HRV 범위, RHR, 일반적인 수면 구조 - 모든 것을 살펴보고 요약함. 일반적인 식단 (MFP 또는 Cronometer에서 추적합니까? 훌륭함, 영양 보고서를 업로드함). 복용하는 보충제 및 약물. 일반적인 운동 습관. 보유한 건강 기록 - 혈액 검사 결과, 해석된 이미지 결과 등. 의사에게 설명할 것처럼 가족력. 건강 불만 요약. 관련된 것처럼 보이는 다른 모든 것. 그런 다음 몇 가지 대화 루프를 통해 더 유용하게 만들기 위해 제공할 수 있는 추가 정보가 있는지 묻습니다. 그런 다음 ""주어진 <건강 불만>에 대해 더 해야 할 것? 덜 해야 할 것?"" 또는 ""잠재적 원인에
       대해 추측해 주세요""와 같은 질문을 함. 특정 건강 불만이 없더라도 ""오늘 시작하거나 중단해야 할 보충제 하나는 무엇입니까?""와 같은 질문을 할 수 있음 (그리고 후속 연구를 당연히 수행함). 이는 삶을 변화시킴. 이를 의심하는 사람은 시도해보지 않았음
     * RAG + 건강 데이터 분석은 엄청난 잠재력을 가짐. 당연히 조심해야 하지만, 나도 개인 건강 데이터에 RAG를 사용했음. 의사들이 머리를 긁적일 때 매우 유용했음. 내 경우에는 병원에서 호흡/식사 문제로 입원한 내 아기였음. mychart의 네트워크 탭에서 데이터를 가져와 추가 컨텍스트를 추가한 다음 Claude에게 질문했음. 내 주요 목표는 아침 회진에 대비하는 것이었음. 각 테스트가 나에게 어떤 종류의 정보를 제공할 것인지 이해하고 싶었음. 꽤 좋았음. 놀랍지 않게도, 때때로 환각하거나 일부 뉘앙스를 놓쳤음. 그러나 나는 그것이 그런 일을 한다는 것을 알고 있었음. 오류가 있어도 나에게 도움이 되었음. 그러나 ""이 모든 것을 고려할 때 내 아기에게 무슨 일이 일어나고 있는지""라고 말하려고 하지는 않았음. 다른 주제에 대해: 내가 당신이라면, 이 것을 FHIR
       또는 다른 일반 형식으로 말하게 만들 것임. 그렇게 하면 다른 도구 생태계에서 이 것을 사용하는 것이 훨씬 쉬워질 것임. FHIR graphql API를 위에 추가할 수도 있음
     * 재미있게도, 이는 데이터 누출과 AI가 주요하고 가치 있는 작업을 해결할 수 있다는 잘못된 (또는 극도로 추론된) 주장에 대한 거의 전형적인 예임. 두 가지 매우 관련된 관찰이 필요함. 1. 의료 시스템의 상태, 이것이 미국이라면, 치료는 분류에 기반하고 있으며, 더 깊은 분석이나 전문가에게 접근하기 위해 여러 가지 장애물을 거쳐야 함. 이는 비용을 절감하면서 죽지 않도록 보장하기 위한 것임. 2. 의사 방문에서 데이터를 사용하고 입력하고 있음, 이는 AI가 반드시 대체할 수 있는 방식으로 진단을 제공하지 않는다는 것을 의미함. 많은 방문이 흐름 차트 결정 규칙을 통해 가능성을 배제/포함하는 데 도움이 될 것임. AI가 의사의 명령으로만 사용할 수 있는 데이터에 의존하는 것을 AI 열광과 산업 논문에서 많이 볼 수 있음. 이는 가치 기반 치료가 진단하기
       어려운 상태를 가진 사람들에게 더 나은 경험과 결과를 제공할 것임을 보여줌
     * 이는 아마도 다음과 같이 표현되어야 함: 왜 의료진이 $100k와 30번의 병원 방문 후에 내 자가면역 질환을 발견하지 못했는가?
"
"https://news.hada.io/topic?id=19147","LIMO: 추론은 적을수록 좋다 (Less is More for Reasoning)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             LIMO: 추론은 적을수록 좋다 (Less is More for Reasoning)

     * 연구 개요
          + LIMO 모델은 대규모 언어 모델에서 복잡한 추론 능력이 어떻게 나타나는지를 새롭게 이해하게 하는 발견을 제시함.
          + 기존의 생각과 달리, 복잡한 수학적 추론은 적은 수의 예제로도 효과적으로 유도될 수 있음.
          + LIMO는 817개의 훈련 샘플만으로 AIME에서 57.1%, MATH에서 94.8%의 정확도를 달성함.
          + 이는 이전 SFT 기반 모델의 6.5%와 59.2%에 비해 크게 향상된 결과이며, 이전 접근법의 1% 훈련 데이터만 사용함.
     * LIMO의 성능
          + LIMO는 10개의 다양한 벤치마크에서 40.5%의 절대적인 성능 향상을 보이며, 100배 더 많은 데이터로 훈련된 모델들을 능가함.
          + 이는 SFT가 암기보다는 일반화로 이어진다는 기존의 생각에 도전함.
     * LIMO 가설
          + LIMO 가설은 기초 모델에서 도메인 지식이 사전 훈련 동안 완전히 인코딩된 경우, 최소한의 시연으로도 복잡한 추론 능력이 나타날 수 있음을 제안함.
          + 복잡한 추론을 유도하는 임계값은 두 가지 주요 요인에 의해 결정됨:
              1. 사전 훈련 동안 모델의 인코딩된 지식 기반의 완전성.
              2. 모델이 복잡한 추론 작업을 해결하기 위해 지식 기반을 활용하는 방법을 보여주는 ""인지 템플릿""으로서의 사후 훈련 예제의 효과성.
     * 오픈 소스 제공
          + 데이터 효율적인 추론에 대한 재현성과 미래 연구를 촉진하기 위해 LIMO를 포괄적인 오픈 소스 스위트로 제공함.
"
"https://news.hada.io/topic?id=19067","LinuxPDF - PDF안에서 RISC-V 에뮬레이터로 Linux 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               LinuxPDF - PDF안에서 RISC-V 에뮬레이터로 Linux 실행하기

     * 일반적으로 PDF 파일이 정적인 문서라고 생각하기 쉬우나, 사실 Javascript를 지원하는 기능이 포함되어 있음
          + PDF 표준은 독자적인 Javascript 표준 라이브러리를 가지고 있음
          + Chromium, Firefox 같은 현대 브라우저는 보안상의 이유로 극히 제한된 API만 구현하고 있음
     * Adobe Acrobat만이 PDF 내 Javascript의 전체 스펙을 지원했으며, 3D rendering, HTTP 요청, 사용자의 모든 모니터 감지 등 매우 광범위한 기능을 포함하고 있음
     * 제한된 브라우저 API를 기반으로도 원하는 계산 로직은 수행 가능하나, IO 부분은 매우 제한적임
     * C 코드를 asm.js로 컴파일하여 PDF 내부에서 실행 가능함
          + 오래된 버전의 Emscripten(asm.js 타겟을 지원하는 1.39.20 등)을 사용함
          + TinyEMU RISC-V 에뮬레이터를 수정하여 asm.js로 컴파일하고, PDF에서 이를 실행하는 구조
     * 화면 출력과 입력 방식은 DoomPDF(PDF내에서 둠 실행하기)에 사용했던 것과 동일함
          + 화면은 한 줄을 하나의 텍스트 필드로 사용하고, ASCII 문자로 픽셀 상태를 표현함
          + 입력은 가상 키보드와 텍스트 박스를 통해 VM에 키 입력을 전달함
     * 성능상의 문제가 크게 발생
          + 예: Linux 커널 부팅에 30~60초 정도 걸리며, 일반적 실행 대비 100배 이상 느림
          + Chrome PDF 엔진의 V8은 JIT가 비활성화되어 있어 성능이 크게 저하됨
     * 루트 파일시스템은 64비트 또는 32비트용을 선택 가능함
          + 기본은 32비트 Buildroot 시스템(원래 TinyEMU 예제에서 가져온 것)을 사용함
          + 64비트 Alpine Linux 버전도 있으나, 성능이 약 2배 더 느려 일반적으로는 사용하지 않음

   둠 만큼의 광기 리눅슼ㅋㅋ

   wow...

   캬......

   이것은 낭만인가 광기인가 ㅎㄷㄷㄷ
"
"https://news.hada.io/topic?id=19131","흥미로운 미지의 섬들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              흥미로운 미지의 섬들

     * 페전트 섬
          + 6개월마다 국가가 바뀌는 섬임
     * 앨사 크레이그
          + 올림픽 컬링 스톤의 화강암 공급처임
     * 트리스탄 다 쿠냐
          + 세계에서 가장 외딴 거주 섬임
     * 니쿠마로로 섬
          + 아멜리아 에어하트의 사망 장소로 추정됨
     * 한스 섬
          + 덴마크와 캐나다 간의 무의미한 전쟁을 촉발한 바위임
     * 저스트 룸 이너프 섬
          + 세계에서 가장 작은 거주 섬임
     * 팔미라 환초
          + 미국의 유일한 법적으로 조직되지 않은 영토임
     * 미드웨이 환초
          + 새 배설물을 위해 원래 획득된 역사적인 섬임
     * 샌디 섬
          + 구글 지도에 표시된 가짜 섬임
     * 데본 섬
          + 세계에서 가장 큰 무인도임
     * 노스 센티넬 섬
          + 세계에서 마지막으로 접촉되지 않은 부족 중 하나가 사는 곳임
     * 이름 없는 섬
          + 세계에서 가장 ""재귀적인"" 섬임
     * 키리티마티
          + 새해를 가장 먼저 맞이하는 섬임
     * 널 섬
          + 0°N 0°E에 존재하지 않는 섬임
     * 랑겔 섬
          + 매머드의 마지막 서식지임
     * 디오메데 섬
          + 시간은 다르지만 공간은 나누지 않는 섬임

        Hacker News 의견

     * 몇 년 전, 가상의 우주 엘리베이터를 설치할 수 있는 지점을 찾기 위해 지구를 검색한 경험이 있음
          + 적도 근처에 위치하고 정치적으로 안정된 곳이 필요함
          + 산이 있으면 좋겠지만, 산은 설치하기 어려움
          + 개인적인 상상 속에서는 Ascension Island가 적합하다고 생각했음
          + 이 섬은 원주민이 없고, 주로 군사, 우주 기관 등이 주둔하고 있음
          + 유럽 탐험가들의 도착으로 생태계가 파괴되었고, 현재는 황량한 상태임
          + 이름도 우주 엘리베이터와 잘 어울림
     * Null Island는 실제 섬이 아니지만 이름이 섬처럼 붙여져 있음
     * Palmyra Atoll은 Vincent Bugliosi가 쓴 책에서 끔찍한 살인 사건의 배경이 되었음
          + 이 책은 흥미로운 읽을거리임
          + Diomede Islands 외에도 국제 날짜 변경선 양쪽에 가까운 섬들이 있음
          + Samoa와 American Samoa는 24시간 차이가 나며, 같은 시간대에 있지만 다른 날임
     * Sentinelese는 외부와의 접촉이 거의 없는 부족으로 알려져 있음
          + 섬의 북서쪽 끝에 난파선이 있음
          + 외부 세계의 대표로서 좋은 인상을 주지 못했을 가능성이 있음
          + 몇 년 전, 한 선교사가 이 섬에서 사망한 사건이 있었음
          + 섬 주민들은 그들만의 세계관을 가지고 있어 외부의 종교적 개입이 필요하지 않음
          + 섬의 북쪽 끝에서 사람이 살고 있다는 명확한 표시를 본 적이 있음
          + 난파선 근처에 잘 닦인 길이 있음
          + 새로운 외부 물체에 대해 경계할 가능성이 있음
     * 사이트 디자인이 훌륭하고 정보가 매우 흥미로웠음
          + 지구에는 이상하고 아름다운 장소들이 많음
          + Devon Island에서 1년 정도 살아보는 것을 버킷리스트에 추가했음
          + -50°C까지 떨어지지만, 혼자 사는 것은 <i>The Martian</i>과 가장 가까운 경험일 것임
          + 자급자족할 수 있는 방법이 있는지 궁금함
          + 최신 기술을 가져올 수 있다고 가정하면, 태양 전지, 배터리, 단열재로 만든 작은 오두막 등이 필요할 것임
     * 관련된 훌륭한 책: Judith Schalansky의 <i>Atlas of Remote Islands</i>
          + 하드커버 가격이 $66로 비싸지만, 그 방식으로 읽는 것이 좋음
          + 아름다운 책임
     * Tristan da Cunha에 관한 책을 읽고 싶었음
          + Katherine Mary Barrow의 “Three years in Tristan da Cunha”는 일기 형식으로 작성된 1900년대 초 영국 정착지의 삶을 보여줌
     * 영화 <i>Castaway</i>에서 Tom Hanks가 자신을 찾기 위해 텍사스 크기의 지역을 수색해야 한다고 추정함
          + Helen Hunt는 그가 예상보다 더 멀리 있다고 말함
          + 텍사스 크기나 그 두 배 크기의 지역에 작은 섬들이 많아 빠르게 비행하며 수색할 수 없는지 궁금함
          + 2000년대에 위성 이미지로 지도에 없는 섬들이 있었는지 의문임
     * ""christmas island"", ""just room enough island"", ""the world's most recursive island"" 같은 숨겨진 보석들을 찾아보는 것이 즐거웠음
          + 잘 했음 - 저장하고 공유했음
     * Inchconnachan은 스코틀랜드에서 발견한 흥미로운 무인도 중 하나임
          + 현지 주민들과의 만남이 예상치 못한 경험이었음
"
"https://news.hada.io/topic?id=19060","채팅(Chat)은 개발 도구에 적합하지 않은 UI 패턴임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    채팅(Chat)은 개발 도구에 적합하지 않은 UI 패턴임

     * Chat은 개발 도구로서의 나쁜 UI 패턴임
          + 코드가 인간에게 정확성을 요구하는 것은 좋음. 컴퓨터는 정확성을 필요로 하기 때문임
          + 그러나 이는 인간이 기계처럼 생각하도록 강요함
          + 수십 년 동안 프로그래밍을 더 인간 친화적으로 만들기 위해 노력했음. 고급 언어와 시각적 인터페이스가 그 예임
          + AI는 이러한 문제를 해결할 것으로 기대되었음. 영어로 프로그래밍이 가능해질 것이라는 기대였음
     * AI 코딩 도구의 첫 번째 물결
          + 첫 번째 AI 코딩 도구들은 기회를 낭비했음. 화려한 데모를 만들지만 쓸모없는 소프트웨어를 생산함
          + “프로토타입 용도” 정도로만 언급되지만, 실제로 활용하기엔 정확도가 부족함
          + 많은 사람들이 AI 모델을 비난하며 더 똑똑해져야 한다고 주장함
          + 그러나 중요한 소프트웨어를 구축할 때는 추측이 아닌 명확한 이해가 필요함
     * 소프트웨어 작성은 대화가 아님
          + 소프트웨어 작성은 법률 작성과 같음. 영어를 사용하지만 용어를 정의하고 규칙을 설정하며 복잡한 상호작용을 관리함
          + 채팅 메시지로 세금 코드를 작성할 수 없음. 문서가 필요함
          + 문서는 복잡성을 조직화하고 특정 지점을 참조하며 체계적으로 변경 사항을 추적할 수 있게 함
     * 문서 기반 프로그래밍의 중요성
          + 의도가 문서에 있을 때 영어는 실제 프로그래밍 언어가 됨
          + 전체 시스템을 한눈에 볼 수 있음
          + 의도를 명확히 하고 개선할 수 있음
          + 변경 사항을 적절히 추적할 수 있음
          + 팀이 시스템을 함께 작업할 수 있음
          + 요구 사항이 자체 품질 검사가 됨
          + 변경 사항이 명확한 사양에서 시작됨
     * 다음 단계 AI 개발 도구의 핵심
          + 문서 기반으로 사용자 의도를 표현하고 관리하는 방식이 중요해짐
          + 대화형 프로토타입이 아닌, 실제 소프트웨어 개발에 필요한 정밀함을 제공하는 도구가 필요함
          + 이 관점을 제대로 도입하는 기업이 AI 개발 도구의 미래를 주도할 것임

   llm을 서포토하는 것에 지식그래프를 반영하려하고 있고 그게 유효하다고도 하더라구요

        Hacker News 의견

     * 한 사용자는 o3-mini와 o3-mini-high를 사용하여 코드 생성 프로젝트를 진행했으며, ""페어 프로그래밍"" 접근 방식이 중요하다고 언급함
          + 코드 리뷰와 피드백 제공의 중요성을 강조하며, 단순히 코드를 수용하는 것은 좋지 않다고 설명함
          + 유닛 테스트 생성의 중요성을 언급하며, 코드의 핵심을 파악한 후 스모크 테스트를 요청함
          + 긴 문맥에서 모델이 혼란스러워질 수 있으므로 새로운 대화를 시작하는 것이 좋다고 조언함
          + 코드 예제를 제공하고 영어로만 프롬프트하지 말라고 권장함
     * 다른 사용자는 채팅이 UI 패턴으로서 부적절하다고 주장하며, 기록으로서는 좋지만 작업을 수행하기에는 좋지 않다고 설명함
          + 내러티브 방식이 물건을 만드는 데 적합하지 않다고 언급함
     * 또 다른 사용자는 Cursor가 언급되지 않은 것에 놀라움을 표하며, Cursor가 코드 작성 속도를 크게 향상시켰다고 설명함
          + git-diff 스타일로 파일에 적용되는 출력물로 변경 사항을 승인하거나 거부할 수 있다고 설명함
          + 코드베이스의 문맥을 어느 정도 이해하고 있어 명시적으로 파일을 태그할 때 가장 잘 작동한다고 언급함
          + 터미널 로그나 타입 오류를 채팅 인터페이스에 직접 삽입하는 것이 매우 편리하다고 설명함
     * 한 사용자는 ""채팅을 UX로 사용하는 것""이 막다른 길이라고 주장하며, SQL의 사례를 들어 설명함
          + LLM 기반의 채팅 인터페이스가 사용자에게 노출되지 않을 것이라고 예측함
          + 자연어 인터페이스가 기계와의 상호작용에서 예외적인 경우에만 사용될 것이라고 언급함
     * 자연어가 정확성을 위해 만들어지지 않았으며, AI와의 소통을 위해서는 프로그래밍 언어의 하위 집합이 필요하다고 설명함
     * Daniel의 의견에 대해, 채팅이 일반적으로 불편한 UI라고 주장하는 것이 아니라, 컴퓨터 프로그램을 완전히 명시하기 위해서는 많은 세부사항이 필요하다고 설명함
          + LLM이 모호성을 좋은 기본값으로 채워주며, 일반적인 로그인 화면을 제공한다고 설명함
     * Cursor와 같은 경험을 음성으로 구현하여 코드 변경을 논의할 수 있는 기능을 기대한다고 언급함
     * 요구사항 문서를 기반으로 AI 기반 소프트웨어 개발을 추진하는 접근 방식을 설명하며, 요구사항을 체크리스트로 변환하여 추가 지침으로 사용하는 예시를 제공함
     * 첫 번째 물결은 채팅이 아닌 완성이었으며, 채팅이 더 직관적이고 노력이 적게 든다고 설명함
          + 문서가 고정된 것이 아니라 AI를 통해 반복적으로 수정할 수 있다고 설명함
     * 새로운 언어를 발명하여 컴퓨터 프로그램을 설명할 수 있는 구조화된 언어 모델을 기대한다고 언급함

   제목으로는 채팅 UI 가 부적합하다고하지만, 내용은 모호한 요구사항이 핵심 문제라고 설명하네요.
   채팅 형식으로 AI 가 사용자 요청 중 모호함을 바로잡도록 요청하면 해결될 문제같은데,
   굳이 채팅 UI 를 비난하는 이유를 모르겠습니다.

   오 이거 뭔가 흥미롭고도 공감가는 의견이예요 😊
"
"https://news.hada.io/topic?id=19087","HN에 알리기: Cloudflare, Pale Moon 및 기타 비주류 브라우저 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            HN에 알리기: Cloudflare, Pale Moon 및 기타 비주류 브라우저 차단

     * Cloudflare의 브라우저 무결성 검사 문제
          + Cloudflare의 브라우저 무결성 검사 기능이 Pale Moon과 같은 비주류 브라우저 사용자에게 접근을 차단하는 문제 발생
          + 1월 31일부터 사용자 보고 시작됨
     * 문제 발생 및 대응
          + 이 문제는 매년 최소 한 번 발생하며, Cloudflare에 쉽게 연락할 방법이 없음
          + ""피드백 제출"" 도구는 효과가 없으며, Cloudflare 커뮤니티 주제는 스팸으로 표시되어 잠금 처리됨
          + 공식적인 Cloudflare의 응답은 없음
     * 영향을 받는 다른 브라우저
          + Falkon, SeaMonkey, IceCat, Basilisk 등도 접근 차단됨
     * 이전 사례
          + 2022년 Hacker News 게시물에서 같은 문제가 제기되어 Cloudflare가 빠르게 패치한 사례 있음
          + 당시 Cloudflare 제품 관리자는 특정 브라우저의 정당성을 판단하지 않겠다고 선언함
     * 현재 상황
          + 현재까지 Cloudflare의 공식적인 응답은 없으며, 인터넷 접근은 여전히 차단됨

        Hacker News 의견

     * 사용자가 Linux에서 Chrome을 사용 중이며, 올해 Cloudflare가 ""인간 확인"" 상자를 매우 자주 보여주는 것을 발견함. 많은 사이트에서 이를 사용하고 있으며, 문제를 해결한 후 30분 뒤에 다시 나타남. Cloudflare가 무엇을 보호하는지 궁금함
     * 과거에는 웹사이트가 특정 브라우저에 대해 기능을 제한하거나 렌더링을 거부하는 경우가 있었음. 그래서 브라우저는 다른 브라우저인 척하는 사용자 에이전트를 사용하기 시작함. 예를 들어, Chrome 브라우저가 Firefox와 Safari인 척함. Cloudflare가 어떤 기능을 사용하여 브라우저를 식별하는지 모르겠지만, 이는 과거를 떠올리게 함
     * 웹사이트 소유자이자 VPN 사용자로서 양쪽의 입장을 이해함. 한편으로는 ChatGPT와 DeepSeek을 사용할 때마다 ""인간 확인"" 상자가 나타나서 귀찮음. 다른 한편으로는 Cloudflare가 없으면 매일 수천 건의 스팸 요청과 해킹 시도를 보게 될 것임. 해결책을 모르겠음
     * Bare metal 서버를 인터넷에 직접 연결하여 운영하는 사람이 얼마나 되는지 궁금함. DDoS가 실제로 매우 흔한 문제인지 의문임. 표준 보안 조치와 호스팅 제공자의 DDoS 보호를 사용하여 서버를 운영했지만, 실제로 문제가 된 적은 없음. 그래서 왜 모든 것을 Cloudflare를 통해 운영해야 하는지 궁금함
     * Palemoon을 다운로드하여 확인했는데 CAPTCHA가 바로 충돌함. 페이지를 다시 로드하면 CAPTCHA가 더 이상 나타나지 않음. 다른 Cloudflare turnstile을 시도했지만 브라우저가 segfault로 충돌함. ChatGPT.com이 보통 Cloudflare 프롬프트를 생성하는 데 유용하지만, Palemoon에서는 작동하지 않음
     * Google과 Cloudflare 같은 회사는 훌륭한 도구를 무료로 제공함. 이 도구들은 많은 사람들에게 큰 가치를 제공함. 인터넷을 그들에게 맡기는 것이 가치가 있는지, 인터넷의 아키텍처에 근본적인 문제가 있어서 대기업이 이를 보완해야 하는지 의문임
     * Cloudflare가 Australia Post 웹사이트에서 JSON 리소스를 요청할 때 인간 확인을 시도함. 이는 택배 추적 기능을 깨뜨리며, 문제는 브라우저의 검사 도구를 사용해야만 진단할 수 있음. URL을 수동으로 열고 CAPTCHA를 해결하려고 하면 ""차단되었습니다""라는 메시지를 받음
     * Cloudflare가 봇을 방어할 수 없다는 것이 가장 아이러니함. 심지어 그들의 보호를 우회하는 봇을 작성한 적도 있음
     * RSS 피드에서 Cloudflare의 챌린지가 가장 나쁨. 피드를 구독 취소할 수밖에 없으며, 다른 방법이 없음
"
"https://news.hada.io/topic?id=19097","당신의 모델을 스케일 하는 법: TPU에서의 LLM에 대한 시스템적 관점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                당신의 모델을 스케일 하는 법: TPU에서의 LLM에 대한 시스템적 관점

     * 딥러닝 성능을 대규모로 최적화하는 것은 ‘연금술’처럼 보이지만, 실제로는 이해 가능한 단순한 원칙으로 모델 효율을 높일 수 있음
     * 단일 가속기부터 수만 개의 가속기까지 비교적 간단한 원칙이 모든 곳에 적용되며, 이를 이해함으로써 다음과 같은 유용한 작업 수행이 가능함:
          + 모델의 각 부분이 이론적 최적값에 얼마나 근접했는지 대략적으로 파악
          + 다양한 스케일에서 여러 병렬화 기법을 선택하는 근거를 마련할 수 있음
          + 대형 Transformer 모델의 학습 및 실행에 필요한 비용과 시간 추정
          + 특정 하드웨어의 특성을 활용하는 알고리즘 설계
          + 현재 알고리즘 성능의 한계를 명확히 이해하여 하드웨어 설계
     * 필요한 배경 지식
          + LLM과 Transformer 아키텍처에 대한 기본 개념 이해 필요
          + 대규모 운영 방식에 대한 이해는 필수가 아님
          + LLM 훈련 기본 지식과 JAX 사용 경험이 있다면 더 좋음
          + Transformer 아키텍처에 대한 블로그 포스트와 JAX의 LLM 스케일링에 대한 슬라이드 참고 권장
     * 목표
          + 모델을 주어진 하드웨어에서 어떤 방식으로 병렬화하면 좋을지 추정할 수 있는 역량을 기르는 것
          + 훈련과 추론에 걸리는 시간과 비용을 대략적으로 계산할 수 있는 능력을 기르는 것

왜 관심을 가져야 하는가

     * 3~4년 전만 해도 ML 연구자 대부분은 이런 대규모 스케일 최적화에 대해 깊이 알 필요가 없었음
          + 현재는 “작은” 모델조차도 하드웨어 한계에 근접해서 동작하기 때문에, 효율적인 대규모 작업 방식 이해가 필수적이 됨
          + ML 역사는 시스템 혁신과 소프트웨어 개선이 교차 발전해 온 흐름으로 볼 수 있음
          + 최근 Transformer 모델들이 하드웨어 한계까지 사용함에 따라, 모델 효율성을 이해하지 못하면 새로운 아키텍처나 연구가 실제 적용에서 실패할 가능성이 높음
          + 벤치마크에서 20% 성능 향상을 얻어도, 하드웨어 효율이 20% 떨어지면 결국 실용성이 낮아짐
     * 모델 스케일링의 핵심 목표는 칩(가속기)의 수를 늘릴 때 선형적으로 처리량이 증가하도록 만드는 것임
          + 이를 ""강한 스케일링""이라고 함
          + 칩 추가는 계산 시간을 줄이지만 칩 간 통신 비용이 발생
          + 통신이 계산보다 오래 걸리면 ""통신 제한(Communication Bound)"" 상태가 되어 강한 스케일링 불가능
          + 하드웨어를 충분히 이해하여 이러한 병목 현상이 발생할 위치를 예측할 수 있다면, 이를 방지하도록 모델을 설계하거나 재구성할 수 있음
     * 이 책의 목표는 TPU(및 GPU) 하드웨어의 작동 방식과 Transformer 아키텍처가 현재 하드웨어에서 잘 작동하도록 어떻게 발전해왔는지를 설명하는 것
          + 새로운 아키텍처를 설계하는 연구자와 현 세대의 LLM을 빠르게 실행하기 위해 노력하는 엔지니어 모두에게 도움이 되기를 바람

전체 개요

     * 이 글은 다음과 같이 구성됨
     * 섹션 1에서는 roofline 분석을 통해 모델의 성능 한계를 결정하는 요소(통신, 연산, 메모리)를 설명함
     * 섹션 2, 섹션 3에서는 TPU와 GPU의 내부 구조 및 칩 간 연결 방식을 다룸
          + 이를 통해 아래와 같은 질문에 답변함
               o 특정 크기의 매트릭스 곱셈은 이론적으로 얼마나 빨리 수행될 수 있는가
               o 어느 지점에서 연산이 메모리 대역폭이나 통신 대역폭에 묶이게 되는가
               o TPU 클러스터는 어떤 구조로 연결되고, 한 칩에서 다른 칩으로 데이터를 옮길 때 걸리는 대략적인 시간은 얼마인가
               o 분산된 매트릭스를 어떻게 효율적으로 곱셈할 수 있는가
     * 섹션 4에서는 Transformer 아키텍처의 수식(매트릭스 크기, 파라미터 수, FLOPs)을 자세히 다룸
     * 섹션 5와 섹션 7이 핵심으로, 여러 칩에 모델을 병렬화하는 다양한 방법을 소개함
          + Data parallel, Tensor parallel, Pipeline parallel, Expert parallel
          + ZeRO, Rematerialisation, Host offload, Gradient accumulation 등 메모리 절감 기법도 다룸
     * 섹션 6, 섹션 8는 LLaMA-3 모델을 TPU에서 훈련하고 추론하는 과정을 예시로 들어 실제 비용과 시간, 구성 방식을 제시함
     * 마지막으로 섹션 9, 섹션 10는 JAX에서 모델을 프로파일하고, 디버그하며, 병렬 처리를 적용하는 실제 방법을 다룸

자세한 내용 :책의 주요 섹션을 요약

     * 파트 1: Preliminaries
          + 섹션 1: 간단한 Roofline 분석 소개
               o 알고리즘을 제약하는 세 가지 요소: 연산, 통신, 메모리
               o 이로부터 연산 속도의 상한선을 추정하는 방법을 배움
          + 섹션 2: TPU를 바라보는 관점
               o TPU가 어떤 식으로 연산하는지
               o Systolic array 구조가 무엇인지
               o TPU가 메모리와 통신 대역폭을 어떻게 제공하는지에 대한 기본적인 이해
          + 섹션 3: 분산 매트릭스와 분산 곱셈
               o 모델 파라미터를 여러 칩에 나누어 저장(Sharding)하는 기법
               o 분산된 매트릭스 연산 시 발생하는 통신과 병목을 다루는 방식
     * 파트 2: Transformers
          + 섹션 4: 필요한 Transformer 수식 정리
               o Transformer에서 매트릭스 곱셈이 구체적으로 어떤 형태인지
               o 파라미터 수, FLOPs, KV 캐시 크기 등을 계산하는 방법
               o Attention 연산이 Feed-Forward 블록 대비 얼마나 많은 연산을 요구하는지 파악
          + 섹션 5: Transformer 훈련 병렬화 전략
               o Data parallel, Tensor parallel, Pipeline parallel, Expert parallel 기법 소개
               o ZeRO(FSDP), Rematerialisation, Gradient accumulation, Host offload 등 메모리 절감 방안
               o 특정 모델 크기와 칩 수에 맞춰 병렬화를 구성하는 개념 정립
          + 섹션 6: LLaMA 3 TPU 훈련 적용
               o 실제 TPU 환경에서 LLaMA 3 모델을 훈련한다고 가정할 때, 소요 시간과 비용 추정
               o 배치 사이즈, 병렬화 방식, 메모리 사용량 등에 대한 구체적인 예시 제시
          + 섹션 7: Transformer 추론에 대한 모든 것
               o 추론 시에는 지연(latency)이 중요한 신규 요인으로 등장
               o KV 캐시 등으로 인한 메모리 사용과 통신 문제
               o 모델 서빙을 위해 여러 칩을 어떻게 배분하고 연결할 것인지에 대한 논의
          + 섹션 8: LLaMA 3 TPU 서빙 적용
               o TPU v5e에서 LLaMA 3를 서빙한다고 가정할 때, 대략적인 비용과 지연, 처리량 트레이드오프 분석
     * 파트 3: Practical Tutorials
          + 섹션 9: TPU 코드 프로파일링 방법
               o JAX+XLA 스택 이해
               o 실제 성능 저하 이슈 파악과 해결책
               o JAX/TensorBoard 프로파일러 사용법
          + 섹션 10: JAX로 TPU 프로그래밍하기
               o JAX의 병렬화 API(primitives) 활용법
               o 예제와 문제를 통해 병렬 연산 개념을 익힘
          + 섹션 11: 결론과 추가 자료
               o TPU와 LLM에 대한 추가 읽을거리
               o 전체 내용을 간략히 마무리하며, 미래 전망 언급

        Hacker News 의견

     * JAX가 앞으로 몇 년 동안 pytorch/cuda를 대체할 것이라는 기대가 있음. Deepseek 팀과의 PTX 문제는 하드웨어 성능을 최대한 활용하기 위해 더 낮은 수준의 접근 방식에 투자하는 것의 가치를 보여줌
          + Google 내부에서 성능 작업의 지침서로 사용되었음. 공개된 것이 놀랍지만, Gemini 관련 세부 사항은 제거된 것으로 보임
          + 이 가이드는 JAX/XLA 덕분에 GPU로 직접 전환할 수 있는 점이 좋음
          + JAX가 왜 AST 대신 트레이싱을 사용하는지 궁금해하는 의견이 있음
          + 작성자의 트윗 스레드 링크가 공유됨
          + Jekyll 사이트를 PDF로 변환할 방법을 찾고 있는 사람 있음
          + 훌륭한 글이라는 칭찬과 감사의 표현이 있음
          + 멋진 애니메이션을 어떻게 만드는지 궁금해하는 의견이 있음
"
"https://news.hada.io/topic?id=19071","Open Deep Research - 오픈소스로 구현한 딥 리서치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Open Deep Research - 오픈소스로 구현한 딥 리서치

     * OpenAI가 발표한 DeepResearch는 웹 검색을 통해 콘텐츠를 요약하고 질의 응답을 수행함
          + GAIA 벤치마크에서 높은 점수를 달성해 주목받음
          + 강력한 LLM과 내부적인 에이전트 프레임워크를 결합해 웹 브라우징 등 다양한 도구를 단계적으로 활용
     * OpenAI가 에이전트 프레임워크 세부 사항을 공개하지 않아, 이를 오픈소스로 재현하기 위해 24시간 동안 실험을 진행했음

에이전트 프레임워크는 무엇이고 왜 중요할까?

     * 에이전트 프레임워크는 LLM 위에 추가 계층을 두어 브라우징, PDF 읽기 등 다양한 액션을 수행하게 만드는 구조
     * LLM을 단순 채팅 형태로만 쓰는 것보다, 에이전트 시스템과 결합하면 훨씬 강력해짐
     * smolagents 같은 라이브러리를 통해 간단한 에이전트 프레임워크를 적용해도 성능이 큰 폭으로 향상됨
     * OpenAI DeepResearch 역시 이 방식을 활용해 뛰어난 성능을 얻음

GAIA 벤치마크

     * GAIA는 에이전트 성능을 평가하기 위한 매우 어려운 벤치마크임
     * 예시로, “Embroidery from Uzbekistan”에 등장하는 과일을 특정 선박의 옛 아침 식단과 연결 지어 순서대로 나열하라는 복잡한 질문이 제시됨
     * 단일 LLM만으로는 7% 수준에 그치지만, DeepResearch는 67% 이상을 달성해 큰 격차를 보임
     * GAIA 질문들은 멀티스텝 추론, 정보 검색, 멀티모달 처리 등이 필요하기에 에이전트 접근의 진가를 테스트하기 적합함

오픈 딥 리서치 구축하기

     * DeepResearch 방식 재현을 위해 오픈소스 LLM과 에이전트 프레임워크를 접목하는 실험을 진행함
     * 목표는 간단한 텍스트 기반 웹 브라우저와 파일 열람 툴 등으로 GAIA 성능을 높이는 것임
     * CodeAgent 이용
          + CodeAgent 방식은 JSON 대신 코드 형태로 액션을 표현함
          + Wang et al. (2024) 연구에 따르면, 코드 표현이 압축적이고 직관적이며 LLM에 최적화된 장점이 있음
          + 단계 수가 줄어들어 비용 절감 효과가 있으며, 멀티모달 상태 관리에도 유리함
     * 적절한 도구 만들기
          + 첫 번째 툴: 텍스트 기반 웹 브라우저
               o Operator 같은 풍부한 기능은 아직 구현되지 않았지만, 초기 단계로 단순 브라우징 기능만 제공함
          + 두 번째 툴: 텍스트 파일 포맷 열람용 인스펙터
               o 단순 문서 처리 툴을 통해 내용 읽기 기능을 지원함
          + 향후에는 더 세분화된 파일 포맷 지원, 웹 브라우징 시 비전 모델 연동, GUI 에이전트 도입 등을 계획함

결과

     * 24시간 내 재현 실험으로 GAIA 벤치마크 54% 수준에 도달함
     * JSON 대신 코드 표현을 사용했을 때 점수가 33%에서 54%로 상승함
     * 오픈된 smolagents 프레임워크와 도구를 사용해 누구나 재현 가능함
     * Operator 수준의 브라우저나 강력한 로컬 모델 등을 결합해 더 개선할 여지가 큼

커뮤니티들의 재구현체들

     * dzhng, assafelovic, nickscamara, jina-ai, mshumer 등 다양한 구현이 커뮤니티에서 등장함
     * 각각 다른 라이브러리를 활용하거나 다른 검색/인덱싱 방식을 시도함
     * 향후 오픈 LLM, 비전 모델, 코드 기반 액션 표현 등을 활용한 재현 결과를 공유하며 발전시키고자 함

가장 중요한 다음 단계

     * OpenAI의 Operator처럼 고급 웹 브라우저 기능을 지원하기 위한 GUI 에이전트를 만드는 작업이 중요함
     * 화면을 보고 마우스와 키보드로 조작하는 기능을 오픈소스로 제공하고자 함
     * smolagents, OpenAI Operator 등과 연동하여 완성도를 높일 계획임
     * GAIA 점수 향상, 오픈 LLM 활용, 시각적 웹 브라우저 구현 등이 주요 과제
"
"https://news.hada.io/topic?id=19120","HN 공개: SQLite 디스크 페이지 탐색기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN 공개: SQLite 디스크 페이지 탐색기

     * SQLite Page Explorer
     * SQLite Page Explorer는 redbean으로 개발된 작은 GUI 애플리케이션으로, SQLite 데이터베이스를 SQLite가 보는 방식대로 ""페이지별로"" 탐색할 수 있게 해주는 도구임
     * 왜 필요한가?
          + SQLite 및 대부분의 데이터베이스는 디스크 블록 크기의 페이지(보통 4KB)에 데이터를 저장하여 읽기와 쓰기를 최대한 빠르게 함
          + 일반적으로 개발자는 ""스키마 레벨""에서 데이터베이스와 상호작용하지만, ""페이지 레벨""을 살펴보면 다음과 같은 흥미로운 통찰을 얻을 수 있음
               o 인덱스가 실제로 디스크에서 어떻게 보이는지 확인 가능 (기본적으로 별도의 작은 테이블임)
               o 데이터를 더 압축하여 저장함으로써 쿼리와 애플리케이션을 더 빠르게 만들 수 있음
               o 스키마 레벨에서는 보이지 않는 문제점과 비효율성을 발견할 수 있음
               o 대부분의 파일 시스템과 데이터베이스의 기초가 되는 B-트리와 같은 중요한 데이터 구조에 대한 직관을 얻을 수 있음
     * 어디서든 실행 가능
          + redbean, cosmopolitan, αcτµαlly pδrταblε εxεcµταblε 덕분에, Windows, Linux, MacOS, 다양한 BSD, ARM64 및 x64에서 네이티브로 실행되는 단일 6.5 MB 실행 파일임
          + 이 파일은 애플리케이션을 실행하고 데이터베이스 바이너리 형식을 파싱하는 Lua 코드를 포함한 zip 파일임
     * 설치 방법
          + releases에서 sqlite-page-explorer.com 다운로드
          + Unix 계열에서는 chmod +x 실행
          + 데이터베이스 파일을 드래그하거나 콘솔에서 실행: sqlite-page-explorer.com mySqliteDatabase.db
          + 애플리케이션은 브라우저 탭에서 열림
          + 완료 후 콘솔에서 Ctrl-C를 두 번 누름
          + αcτµαlly pδrταblε εxεcµταblεs는 브라우저와 운영 체제의 바이러스 탐지 시스템을 혼란시켜 오탐을 발생시킬 수 있음. 인터넷에서 다운로드한 모든 것에 대해 일반적인 주의를 기울일 것
          + 500 MB 이상의 큰 데이터베이스를 사용할 경우, 모든 페이지를 읽는 최상위 뷰를 로드하는 데 시간이 걸릴 수 있음
     * 빌드 방법
          + files/의 내용을 redbean-3.0.0-cosmos.com에 zip으로 압축하면 됨. https://cosmo.zip/pub/cosmos/bin/에서 다운로드 가능 (목록에서 ""redbean"" 클릭)
          + 시스템에 zip이 없으면 해당 사이트에서 다운로드 필요
          + 포함된 zipitup.py 파이썬(3.6+) 스크립트를 실행해도 됨
          + 수정하려면 redbean-3.0.0-cosmos.com -D files를 실행하여 files 하위 디렉토리에서 애플리케이션을 제공할 수 있음. 변경 시마다 zip을 다시 빌드할 필요 없음
     * 걸작은 아님
          + redbean을 시도해보고 Lua를 처음 사용해본 실험의 일환으로, 코드가 다소 어수선할 수 있음
          + Jinja나 bottle.py의 네이티브 템플릿과 같은 템플릿 시스템을 사용하면 많은 문자열 연결과 Write() 문을 줄일 수 있음
          + 마지막 탭이 닫힐 때 콘솔을 자동으로 닫고, 사용자가 확인하지 않는 한 큰 데이터베이스의 경우 페이지 10,000에서 멈추는 기능이 있으면 좋을 것임
          + PR 환영

        Hacker News 의견

     * 애니메이션 GIF 스크린샷을 게시한 프로젝트가 매우 흥미로움
     * SQLite 파일 형식 문서를 참고하여 SQLite 파일을 파싱하는 코드를 작성하는 것이 생각보다 쉬움
          + 관련 문서: SQLite 파일 형식
     * SQLite 내부 작업 경험자로서, 이 프로젝트의 작업이 인상적임
          + Dioxus로 구축된 sqlite-repr도 흥미로운 SQLite 시각화를 제공함
          + 관련 링크: sqlite-repr
     * 프로젝트가 멋지며, 색상 범례를 추가하면 좋겠다는 의견
          + 큰 데이터베이스(3.6GB, 942719 페이지)에서 성능 문제가 발생하며 페이지네이션을 고려할 수 있음
     * 10년 전 보안 도구를 위해 비슷한 작업을 했으며, 이 프로젝트가 MIT 라이선스로 제공되어 좋음
     * SQLite 소스에는 데이터베이스 파일 탐색에 유용한 CLI 도구 showdb가 포함되어 있음
     * 강의나 수업을 듣기 어려운 사람에게 이 프로젝트가 데이터 구조를 효율적으로 시각화하는 좋은 방법임
     * 데이터베이스 학습 중인 사람에게 매우 유용한 도구임
     * SQLite 파일 형식에 대한 설명서와 유용한 다이어그램을 작성한 경험이 있음
          + 관련 링크: SQLite 파일 형식 설명서
     * 도구가 잘 작동함
"
"https://news.hada.io/topic?id=19128","GitLaw - 법적 문서를 위한 무료 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GitLaw - 법적 문서를 위한 무료 플랫폼

     * Git을 이용한 고급 버전 관리 및 협업 기능을 제공
     * AI를 이용한 검색, 생성, 리뷰, 관리
     * 모든 법률 문서 템플릿이 무료(300종 이상, 영문)
     * 문서 편집을 위한 무료 기능들 제공

   영어권 용이라 우리하고는 상관없을듯 한데요.
   https://lawform.io/ 같은 서비스도 국내에 있기는 한데, GitLaw는 Git과 AI를 같이 활용하면서도 무료 가격 정책을 쓰고 있어서 비교가 될 듯 합니다.
"
"https://news.hada.io/topic?id=19078","Standard Schema - TypeScript Validation을 위한 공통 인터페이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Standard Schema - TypeScript Validation을 위한 공통 인터페이스

     * JavaScript/TypeScript 기반 스키마 라이브러리들이 공통 인터페이스를 구현하도록 설계된 스펙
     * 라이브러리마다 사용자가 정의한 타입 검증 로직을 재사용할 수 있게 하여, 툴들이 별도의 어댑터 없이 서로 호환 가능하게 만드는게 목적
     * Zod, Valibot, ArkType 등 주요 라이브러리 제작진이 공동 설계함

주요 인터페이스 (StandardSchemaV1)

     * ~standard라는 객체 속성을 통해 모든 사양을 구현
     * ~standard 내부에 version, vendor, validate, types 등의 필수 프로퍼티 존재
     * validate 함수가 성공 시 value를, 실패 시 issues 배열을 반환
     * types 프로퍼티로 TypeScript에서 스키마의 입력(input)과 출력(output) 타입을 추론할 수 있음
     * 모든 업데이트는 메이저 버전이 아닐 경우 호환성을 유지

설계 목표

     * 런타임 검증 지원: 스탠다드 방식으로 에러 정보를 표준화해 전달함
     * 정적 타입 추론 지원: 타입스크립트 기반 라이브러리들이 추론한 타입 정보를 명시적으로 노출함
     * 간결성: 기존 라이브러리 함수에 몇 줄만으로 추가해 구현 가능함
     * API 충돌 회피: ~standard 이름 공간 하나에만 모든 내용을 넣어 기존 API와 충돌하지 않도록 함
     * 개발자 경험 유지: ~standard처럼 틸드(~)로 시작해 자동완성에서 우선순위를 낮춤

어떤 라이브러리가 구현하고 있는가

     * 이미 Zod, Valibot, ArkType, Arri Schema, TypeMap 등에서 표준 스키마를 지원 중임
     * tRPC, TanStack Form, TanStack Router, Hono Middleware 등도 표준 스키마를 기반으로 유저 스키마를 수용함

자신의 라이브러리에 스펙을 구현하는 방법

     * StandardSchemaV1 인터페이스를 라이브러리에 복사해 ~standard 속성을 추가함
     * validate 함수를 기존 검증 함수에 연결해 성공 시 { value }, 실패 시 { issues }를 반환하도록 처리함
     * 필요 시 비동기 검증도 가능하지만, 동기 검증을 권장

표준 스키마로 유저 정의 스키마를 받는 방법

     * 스키마 라이브러리 없이 직접 사용하려면, @standard-schema/spec을 설치하거나 인터페이스를 복사해 사용함
     * 예시 함수 standardValidate처럼 표준 인터페이스를 가진 스키마라면 어떤 라이브러리든 동일한 방식으로 유효성 검증 가능함
     * 동기 검증만 허용하려면 validate 반환값이 Promise인지 확인 후 예외 처리를 하면 됨

FAQ

     * @standard-schema/spec 의존성을 추가해야 하나?: 반드시 의존성으로 추가할 필요는 없고, 복사 후 사용 가능함
     * dev dependency로 추가 불가함: 라이브러리의 퍼블릭 API가 되므로 실제 배포 환경에서도 사용 가능해야 함
     * ~standard 앞에 틸데(~)를 사용한 이유: 자동완성에서 다른 속성보다 뒤에 나오도록 의도함
     * Symbol 대신 문자열 키를 사용한 이유: 타입스크립트에서 Symbol 키는 자동완성 정렬이나 타입 추론에 문제가 발생하기 때문
"
"https://news.hada.io/topic?id=19077","Open Euro LLM - 유럽의 투명한 AI를 위한 Open LLM ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Open Euro LLM - 유럽의 투명한 AI를 위한 Open LLM

     * 유럽의 선도적 AI 기업 및 연구 기관들이 차세대 오픈소스 대형 언어 모델(LLM)을 공동 개발하는 OpenEuroLLM 프로젝트를 발표
     * 고성능·다국어 지원을 목표로 하며 상업∙공공 서비스에서 활용할 수 있는 투명하고 컴플라이언스에 부합하는 모델을 구축
     * 투명하고 규정을 준수하는 오픈 소스 모델로 개발 과정에서 유럽의 규제 체계를 준수해 고품질 AI 기술에 대한 접근을 보편화하고, 유럽 기업들이 글로벌 시장에서 경쟁력을 갖추도록 지원함
     * STEP(Strategic Technologies for Europe Platform) 인증을 획득했으며, 유럽연합 디지털 유럽 프로그램의 자금을 지원받아 2025년 2월 1일부터 공식 시작

프로젝트 주요 내용

     * 프로젝트명: OpenEuroLLM
     * 목표
          + 오픈소스 LLM을 통해 유럽 내 AI 경쟁력과 디지털 주권을 강화 및 개선
          + 유럽 기술 생태계에서 투명성, 개방성, 커뮤니티 참여의 중요성을 보여줌
          + 유럽의 강력한 규제 프레임워크 내에서 개발되어 유럽의 가치와 기술적 우수성을 유지
          + 상업 및 공공 부문에서 자유롭게 활용하고, 산업별 맞춤형 파인튜닝이 가능하게 함
          + 유럽 내 언어·문화 다양성을 고려해 멀티링구얼 환경을 강화하고, 유럽 기업들이 AI 시대에 고품질 제품과 서비스를 개발할 수 있도록 함
     * 활동 범위
          + 고품질 데이터 리포지토리와 파일럿 LLM 등 기존 성과를 바탕으로, 새로운 모델과 소프트웨어를 공동 개발함
          + LAION, open-sci, OpenML 등 오픈소스 커뮤니티 및 업계 전문가들과 협력함
          + 투명한 모델 개발과 평가 방식으로 누구나 액세스하고 개선할 수 있는 기반 제공을 지향함

파트너 구성

     * 대학 및 연구 기관
          + Charles University(체코, 코디네이터), ALT-EDIC(프랑스), Eindhoven University of Technology(네덜란드), ELLIS Institute Tübingen(독일), Fraunhofer IAIS(독일) 등 총 11개 기관 참여
          + 강력한 연구 역량을 기반으로 대규모 데이터, 알고리즘 개발 및 검증을 담당함
     * 기업
          + AMD Silo AI(핀란드, 공동 리드), Aleph Alpha Research(독일), ellamind(독일), LightOn(프랑스), Prompsit Language Engineering(스페인) 등 총 5개 기업 참여
          + 산업 현장에서의 모델 최적화, 상용화 노하우, 비즈니스 적용 사례 연구를 담당함
     * EuroHPC 센터
          + Barcelona Supercomputing Center(스페인), Cineca Interuniversity Consortium(이탈리아), CSC - IT Center for Science(핀란드), SURF(네덜란드)
          + 초고성능 컴퓨팅 인프라 제공을 통해 학습·실험 지원을 담당함

프로젝트 가치와 기대 효과

     * 투명하고 준법적인 오픈소스 모델
          + 유럽의 엄격한 규제와 가치 체계를 준수하고, 대규모 고성능 언어 모델을 모두가 활용 가능하게 공개함
          + 공공기관∙기업의 글로벌 경쟁력과 서비스 혁신에 기여함
     * 다국어와 문화 다양성 지원
          + 유럽 내 다양한 언어 및 문화적 특성을 모델에 반영해, 고품질 서비스 구현을 돕는 기반을 마련함
          + 유럽 기업이 자체 기술로 안정적이고 포괄적인 제품을 제공할 수 있는 환경을 조성함
     * AI 생태계와 협업 강화
          + 연구 기관, 기업, 유럽 슈퍼컴퓨팅 센터가 공동으로 인프라와 전문성을 결합함
          + 오픈소스 커뮤니티 및 전략 파트너십을 통해 지속적인 개선과 확장성 확보를 기대함

        Hacker News 의견

     * 여러 기관이 참여하는 프로젝트에 대해 회의적인 의견이 있음. 많은 참여자들이 있지만, 각자의 우선순위가 다르기 때문에 협력이 어려울 것이라는 우려가 있음. 과거의 경험을 바탕으로 협력보다는 개별 연구에 집중하게 될 것이라는 의견이 있음
     * 유럽의 AI 프로젝트가 대형 연구소와 경쟁하기는 어렵지만, 오픈 소스 모델을 통해 AI를 활성화할 수 있는 기회가 될 수 있다는 의견이 있음. 유럽이 미국과 중국과의 격차를 줄이기는 어렵겠지만, 경쟁력을 높일 수 있는 촉매제가 될 수 있음
     * 프로젝트에 할당된 예산이 충분하지 않다는 의견이 있음. 유럽의 AI 프로젝트에 필요한 자금이 훨씬 더 많아야 한다고 주장함
     * 프로젝트가 투명하고 규정을 준수하는 AI 모델을 제공할 것이지만, 성능 면에서는 기대에 미치지 못할 것이라는 의견이 있음
     * 유럽의 주요 AI 연구소와 기업들이 프로젝트에 참여하지 않는 이유는 실패할 가능성이 높기 때문이라는 의견이 있음
     * 프로젝트의 중요성을 강조하며, 유럽이 독립적인 AI 인프라를 구축하는 것이 필수적이라는 의견이 있음. Open LLM이 AI의 장기적인 성공 기준을 높일 것이라는 기대가 있음
     * 프로젝트에 이미 좋은 데이터와 기존 모델이 존재하며, 상업적 결과도 기대할 수 있다는 의견이 있음. Red Hat, Volvo, SAAB와 같은 기업들이 참여하고 있음
     * 유럽의 개인정보 보호 규정이 실제로는 큰 차이를 만들지 못하고 있다는 의견이 있음. 유럽이 이 문제를 곧 해결할 것이라는 기대가 있음
"
"https://news.hada.io/topic?id=19129","VSCode의 SSH Agent는 황당함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         VSCode의 SSH Agent는 황당함

     * VSCode와 원격 편집
          + VSCode는 SSH를 통해 원격 편집을 지원하는 기능을 가지고 있음.
          + 많은 사용자가 VSCode와 LLM(대형 언어 모델)을 사용하여 코드 생성을 하고 있음.
          + LLM이 잘못된 코드를 생성하는 경우를 ""환각""이라고 부르며, 이를 해결하기 위해 ""에이전트"" 설정을 통해 LLM과 실행 환경 간의 루프를 닫는 것이 중요함.
          + 이 과정은 LLM이 코드를 생성하고, 에이전트가 코드를 실행하며, 오류를 생성하고, 이를 LLM에 피드백하여 반복하는 방식으로 이루어짐.
     * 개발 환경에서의 문제점
          + 이러한 반복적인 개발 프로세스가 개발자 노트북에서 발생하는 것은 바람직하지 않음.
          + LLM은 시스템 구성에도 영향을 미칠 수 있기 때문에, 깨끗한 상태의 Linux 인스턴스에서 이러한 작업을 수행하는 것이 좋음.
     * Emacs와 Tramp
          + Emacs는 Tramp라는 유용한 Elisp를 통해 원격 편집 시스템을 지원함.
          + Tramp는 SSH 세션을 통해 Bourne 쉘 명령을 실행할 수 있는 인터랙티브 환경에 연결할 수 있음.
     * VSCode의 접근 방식
          + VSCode는 Tramp와 유사한 기능을 가지고 있지만, Tramp와 달리 원격 연결에서 전체적인 침입을 시도함.
          + Bash 스니펫 스테이저를 실행하여 에이전트를 다운로드하고, Node의 바이너리 설치를 포함함.
          + 에이전트는 포트 포워딩된 SSH를 통해 실행되며, WebSockets 연결을 통해 VSCode 프론트엔드와 연결됨.
          + 이 연결의 기본 프로토콜은 파일 시스템을 탐색하고, 임의의 파일을 편집하며, 자체 쉘 PTY 프로세스를 시작하고, 지속성을 가질 수 있음.
     * 보안 우려
          + 개발 서버에서 VSCode를 원격 편집 용도로 무분별하게 쓰면 민감 정보나 인프라 보호에 문제를 일으킬 수 있음
          + 특히 실제 운영 환경(프로덕션)에서 문제가 발생했을 때 VSCode 원격 편집을 사용하는 것은 매우 위험하다는 우려가 있음
     * 결론
          + Fly.io 내부적으로는 Fly Machine과 VSCode를 직접 연결하는 데 이런 방식의 복잡한 에이전트가 반드시 필요한 것은 아님
          + 다만 블로그 목적상 VSCode 원격 연결 방식을 조사하게 되었고, 조사 과정에서 위와 같은 사실을 알게 되었음

        Hacker News 의견

     * 한 달 동안 소프트웨어에 대한 장문의 글을 쓰려고 했음. Kurt는 블로그에 글을 쓰지 않아 걱정하고 있음. 간단한 글을 쓰기로 결정했음. 30분 안에 쓸 수 있을 것 같음
          + 우리가 다루던 소프트웨어에 대해 간단히 썼음
     * VSCode의 작동 방식을 알수록 임시방편으로 유지되는 것 같음. SSH 확장만 봐도 워크스페이스 URI가 두 가지 형식을 가짐
          + 호스트 이름과 16진수로 인코딩된 JSON 문서가 있음
          + 호스트 이름에 대문자가 포함되면 추가 정보가 필요함
          + SSH 연결은 서버에 설치할 확장을 구성할 수 있음. 하지만 너무 많이 설치하면 Windows 호스트에 연결할 수 없음
     * 보안 문제를 이해하지 못하겠음. SSH로 머신에 접속하고 소켓을 포워딩할 수 있다면 다른 작업도 할 수 있음
          + 같은 네트워크에 있는 사람이 SSH 없이 포워딩된 포트에 연결할 수 있는 것이 문제인지 궁금함
          + 사용자로서 VSCode의 SSH 시스템이 잘 작동하는 것이 마음에 듦
     * 네트워크 서버를 운영하며 학생들이 OpenSSH 클라이언트를 이해하지 못하는 것이 큰 문제임
          + 학생들에게 VSCode 원격 서버 플러그인을 사용하지 말라고 알림
          + 디스크 사용량이 100MB 이상인 학생들이 모두 VSCode 사용자임을 보여줌
          + 사용자 프로세스 제한을 45로 설정했음. 학생들이 경고를 무시하면 프로세스 제한에 걸림
          + 10초마다 .vscode-server 프로세스를 종료하는 스크립트를 사용함
     * VSCode의 SSH 편집 기능이 잘 작동함. 원격 머신에서 vim, nano, micro를 사용하지 않게 됨
          + 에이전트가 방해하지 않아 작업이 수월함
          + 보안 위험이 있을 수 있지만 개발 경험이 뛰어남
     * 원격 코드 실행이 가능하다는 것을 배웠음. 개발 도구에 대한 잘못된 신뢰가 종종 후회로 이어짐
          + SSH는 90년대의 솔루션임. Telnet에 몇 가지 기능이 추가된 것임
          + SSH를 통해 구현된 많은 것들이 비효율적임
          + 우리는 적절한 도구를 만들지 않았음. 기존 도구에 더 많은 기능을 추가함
     * ""SSH 에이전트""라는 용어는 혼란스러움. 보통 인증 토큰을 캐시하는 데몬을 의미함
     * sshfs를 추천하는 사람들은 VSCode SSH Remote 환경의 이점을 이해하지 못함
          + 전체 개발 환경을 원격에서 로컬처럼 실행할 수 있음
          + 구형 머신이나 얇은 클라이언트를 완전한 워크스테이션으로 변환할 수 있음
          + VSCode 마켓플레이스에는 보안 위협이 되는 플러그인이 많음. SSH Remote나 VS Tunnel은 아님
     * 개발 서버에서 VSCode 원격 편집을 허용하는 것이 불안함. 프로덕션 서버에서는 더욱 그렇다고 생각함
          + 프로덕션 서버에서 VSCode 원격을 사용하는 것은 미친 짓임
          + 다른 기능은 예상된 기능임
     * 로컬 VSCode 인스턴스가 얇은 클라이언트가 되고, 원격 인스턴스가 무거운 작업을 처리함
          + 작은 노트북에서 강력한 워크스테이션으로 SSH 연결하는 경우에 적합함
          + 강력한 워크스테이션에서 작은 VM/VPS로 SSH 연결하는 경우에는 sshfs나 다른 원격 파일 시스템 마운트 설정을 권장함
"
"https://news.hada.io/topic?id=19108","GitHut Copilot - Agent 모드 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GitHut Copilot - Agent 모드 공개

     * 2021년에 GitHub Copilot을 소개한 목적: ""AI가 개발자를 대체하기보다 함께 협업해 코드 품질과 생산성을 높이는 파트너 구현""
     * 주요 업데이트: 더 강력해진 Agentic AI(Agent 모드), VS Code내 Copilot Edits의 정식 출시, 모델 선택기에 Gemini 2.0 Flash 추가, 새로운 자율 에이전트(Project Padawan)의 첫 공개
     * 개발자는 창의적 작업에 집중하고, 반복적이고 번거로운 일은 Copilot이 맡도록 지원함

Agent 모드 Preview로 제공

     * Copilot이 스스로 생성한 코드 결과물을 실행 및 점검하며, 에러를 인식하고 자동으로 수정 가능함
     * 터미널 명령어를 제안하고 사용자가 명령어 실행을 승인하면, 실행 결과를 바탕으로 다시 개선 작업을 반복함
     * 기존에는 사용자가 명시한 한 가지 작업에만 집중했지만, 이제는 ""주요 목표""를 달성하기 위해 필요한 추가 작업까지 추론함
     * 사용자 입장에서 터미널에서 출력된 에러를 복사/붙여넣기하지 않아도 Copilot이 직접 에러를 찾아 해결해 줌
     * 사용 방법:
          + VS Code Insiders 설치 후 GitHub Copilot Chat의 에이전트 모드 설정을 활성화
          + Copilot Edits 패널에서 Edit 대신 Agent로 전환
     * 향후 Copilot이 지원하는 모든 IDE에 이 모드를 확장할 계획임
     * VS Code Insiders를 통해 피드백을 받고, 에이전트 기술을 계속 개선할 예정임

Copilot Edits - VS Code에서 정식 출시 🎉

     * Copilot Edits는 2024년 GitHub Universe 행사에서 처음 공개됨
     * Chat과 Inline Chat의 장점을 결합한 대화형 인터페이스를 제공하며, 여러 파일에 걸쳐 인라인 변경 사항을 제안
     * 사용자는 특정 파일 세트를 지정한 뒤, 자연어로 Copilot에게 수정 요청을 하여 한 번에 여러 파일에 걸친 변경 사항을 받을 수 있음
     * 이제 VS Code에서 GA로 출시되었고, 사용자 피드백을 토대로 기능이 향상되었음
     * 동작 방식:
          + 듀얼 모델 아키텍처로, 먼저 ""foundation language model""이 에디트 제안을 생성함
          + OpenAI의 GPT-4o, Anthropic의 Claude 3.5 Sonnet, Google Gemini 2.0 Flash 등 여러 모델 중 선택 가능
          + 제안된 수정 사항은 빠른 적용을 위해 별도의 스펙큘러티브 디코딩 엔드포인트를 통해 에디터에 제시됨
     * 사용자가 최종 결과를 직접 검토하며 원하는 수정만 받아들이고, 테스트나 실행 결과를 확인하며 여러 번 반복할 수 있음
     * VS Code의 Secondary Side Bar에서 Copilot Edits를 열어두고, Primary Side Bar의 다른 기능(예: 테스트 러너)과 병행 사용 가능함
     * 마이크 음성 입력 기능을 사용해 자연스러운 대화 형식으로 요청할 수도 있음
     * 향후 로드맵:
          + 적용 속도 개선
          + Copilot Chat과의 맥락 전환 연결
          + 작업 파일 자동 추천
          + 수정 청크별 부분 취소 기능 제공
     * VS Code Insiders와 GitHub Copilot Chat 프리릴리스 확장 버전을 통해 가장 빠른 업데이트를 받을 수 있음
     * Visual Studio 2022에서도 Copilot Edits 프리뷰를 진행 중임

Project Padawan: GitHub에서의 SWE 에이전트 구현

     * Project Padawan은 완전 자율적으로 Pull Request를 생성하고 수정하는 에이전트 작업임
     * 사용자가 GitHub 이슈를 Copilot에게 직접 할당하면, Copilot이 테스트된 PR을 자동으로 생성함
     * 작업 완료 후에는 자동으로 리뷰어를 지정하고, 리뷰 피드백까지 수정해 나감
     * 내부적으로는 보안이 분리된 샌드박스를 자동으로 구성한 뒤, 저장소를 복제하고 빌드·테스트·린트 과정을 수행함
     * 이슈나 PR의 대화 내용, 저장소 내 설정 정보를 모두 고려해 프로젝트 맥락을 이해함
     * Copilot Extensions나 모델 픽커와 마찬가지로 AI 워크플로우에 파트너와 고객이 쉽게 통합할 수 있도록 협업할 예정임
     * 목표는 개발자에게 반복적이고 소모적인 작업을 대신 처리해 주는 자율 에이전트 제공
     * 올해 안에 Project Padawan을 공개할 예정이며, 사용자 피드백을 바탕으로 기능을 강화해 나갈 계획

   code 말고 vs도 좀.. pro 사서 쓰는더 무료보다 지원이 더뎌요 ㅠ

   에이전트 구현 사례는 많았지만 활용사례는 많지 않았던 이유가 비용때문인데, 이걸 어떻게 극복했는지가 궁금하네요

   코드 수정, PR 생성, 코드 실행까지!
   사용법 및 UI 는 Cursor 와 비슷한 거 같은데 어떤 느낌일지 궁금하네요.

   함께 즐겨요 깃 헛

   자 이제 누가 copilot이지?

   Jetbrains 플러그인도 좀… ㅠㅠ

   제발..ㅜ

   드디어 jetbrains 플러그인에도 들어왔네요!
"
"https://news.hada.io/topic?id=19090","FAA 채용 스캔들채용 스캔들

FAA 채용 스캔들의 전말

  스캔들을 밝히기 위한 10년간의 투쟁

     * 2013년 12월 31일, FAA는 갑작스럽게 항공 교통 관제사 채용 절차를 변경함. 이는 CTI 프로그램을 통해 준비된 학생들에게 큰 충격을 줌.
     * Moranda Reilly는 항공 교통 관제사가 되기 위해 모든 것을 걸었으나, 새로운 채용 절차로 인해 기회를 잃음.
     * FAA는 기존의 적성 테스트를 무효화하고, 새로운 ""생물학적 설문지""를 도입하여 모든 지원자가 이를 통과해야만 채용 기회를 얻을 수 있도록 함.
     * CTI 학생들은 더 이상 채용에서 우위를 점하지 못하게 되었고, 그들의 학위는 무용지물이 됨.

  CTI 학생들의 반응

     * Reilly는 CTI 학생들과 교수들을 위한 Facebook 그룹을 만들어 상황을 공유하고 지원함.
     * 많은 학생들이 새로운 채용 절차에 대해 불만을 표하며, CTI 프로그램의 가치를 강조함.
     * 일부 학생들은 채용 기회를 높이기 위해 NBCFAE에 가입하라는 권유를 받았으나, 조직의 행동에 불편함을 느낌.

  FAA의 채용 스캔들: 간단한 개요

     * FAA는 항공 교통 관제사 분야의 다양성을 높이기 위해 압력을 받음.
     * 2000년대 초, FAA는 AT-SAT 테스트의 인종적 영향을 줄이기 위해 점수 가중치를 조정함.
     * 그러나 이로 인해 테스트의 직무 성과 예측력이 감소함.
     * FAA는 다양성과 직무 성과 간의 균형을 맞추기 위해 새로운 다단계 절차를 도입함.

  CTI 프로그램의 변화

     * CTI 프로그램은 2013년 이전까지 성공적이었으나, 이후 FAA는 CTI 학교를 무시하고 채용 절차를 일반 대중에게 개방함.
     * CTI 학교들은 FAA와의 소통이 끊기고, 학생들에게 프로그램의 가치를 설명하기 어려워짐.

  법적 대응과 미디어의 관심

     * 보수적인 변호사와 전직 항공 교통 관제사인 Michael Pearson은 집단 소송을 준비함.
     * Fox Business의 Adam Shapiro가 이 스캔들을 보도하며 미디어의 관심을 끌었으나, 다른 주요 매체들은 이를 다루지 않음.
     * 2016년, 의회는 생물학적 평가의 사용을 중단하고 영향을 받은 개인들에게 재신청 기회를 제공하도록 FAA에 요구함.

  스캔들의 장기적 영향

     * FAA의 2013년 변화는 항공 교통 관제사 부족 문제에 기여함.
     * 훈련생의 질이 저하되고, 채용 절차가 불확실해지며, FAA와 CTI 학교 간의 관계가 긴장됨.
     * 현재 항공 교통 관제사 부족 문제는 여러 원인이 있으며, 채용 스캔들은 그 중 하나임.

  정치적 파장

     * 이 스캔들은 정치적 분열과 관련이 있으며, 양측 모두에게 중요한 문제로 남아 있음.
     * 민주당은 이 문제를 해결하지 못했고, 트럼프 대통령은 이를 주목하여 DEI 전술에 대한 조사를 요구함.
     * 이 스캔들은 다양성 프로그램의 가치와 관련된 논쟁을 불러일으킴.

        Hacker News 의견

     * 오래된 스캔들이 최근 DEI 문제로 재구성된 것에 대한 우려가 있음
          + 국가 주도의 선전 기법과 유사하므로 주의가 필요함
     * ATC(항공 교통 관제)에서의 효과적인 작업은 특정한 신경다양성을 선호함
          + 신경다양성을 좋고 나쁨의 척도로 보지 말아야 함
          + 신체적 다양성과 마찬가지로 신경다양성도 단순한 다양성의 한 형태임
     * FAA의 항공 교통 관제사 테스트를 직접 시도해볼 수 있음
          + 테스트 후 기사를 읽어볼 것을 추천함
     * 미국은 진보적 과세와 사회 서비스 개선을 통해 빈곤층을 도와야 함
          + 차별적인 학교나 직장 지원 방식은 잘못된 접근임
     * DEI가 인종 기반 차별을 조장하고 기준을 낮추는 문제를 야기함
          + 민주당의 미래 성공 가능성을 저해할 수 있음
     * 자격 있는 사람을 고용하는 것이 중요함
          + 할당량을 맞추기 위한 고용은 문제임
     * DEI 노력은 할당량이 아닌 맥락적 정보를 활용해야 함
          + 고정관념에 대한 가정을 도전하고 증거에 기반한 결정을 해야 함
     * 고용 차별을 제거하기 위한 간단한 해결책은 지원서에서 인구통계 질문을 제거하는 것임
          + 이름과 성별을 숨기고 지원자 ID를 사용해야 함
     * 관제사 부족과 6일 근무 주에 대한 불만은 오래된 문제임
          + 특정 인구통계를 선호하는 고용 방식이 자격 있는 지원자를 놓치는 것은 문제임
"
"https://news.hada.io/topic?id=19159","Show GN: 기성 플러그인보다 키 정렬이 빠른 eslint-plugin-sort-properties 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 기성 플러그인보다 키 정렬이 빠른 eslint-plugin-sort-properties 소개

   eslint의 sort-keys rule이 auto-fixable하지 않은 관계로 npm에는 eslint-plugin-sort-keys-fix나 eslint-plugin-sort-destructure-keys같이 auto-fixable한 기능을 추가한 플러그인들이 각각 주간 다운로드 수 33만, 19만을 넘기며 인기가 많습니다. 하지만 두 플러그인에는 문제점들이 있습니다.
   sort-keys-fix의 경우 eslint에서 포크하여 수정한 결과 property 노드에서 스왑하는 식으로 수정하기 때문에(코드) O(N^2)의 시간 복잡도를 가져 수정에 오랜 시간이 걸립니다. 그리고 sort-destructure-keys의 경우 비교 과정에서 중복 계산이 많아(코드) 오래 걸리는 부분이 있습니다.
   그래서 eslint-plugin-sort-properties를 만들어 이 문제들을 해결했는데, 주요 기능들은 아래와 같습니다.
    1. fix의 경우 Array.prototype.sort 사용하도록 하여 시간복잡도 개선. sort-keys-fix보다 10배 가량 빠름
    2. sort-destructure-keys보다 rule 적용 시간 50배 이상 빠름
    3. typescript type literal, interface도 정렬 가능하게 함(tseslint parser 명시 필요)
    4. eslint-plugin-react의 jsx-sort-props 룰에서 콜백을 뒤로 빼는 기능이 있어 이를 들여옴
    5. 주석도 property의 일부로서 위치를 같이 이동하도록 하여 깨짐을 방지할 수 있게 설정 가능
       속도 측정 방식의 경우 벤치마크에 레퍼런스가 있습니다.
"
"https://news.hada.io/topic?id=19085","그들은 자유롭다고 생각했다: 독일인들, 1933-45 (1955)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  그들은 자유롭다고 생각했다: 독일인들, 1933-45 (1955)

     * 서문
          + 밀턴 마이어의 책 ""They Thought They Were Free""는 히틀러의 독일에서 사람들이 어떻게 점진적으로 독재에 익숙해졌는지를 설명함.
          + 독일인들이 정부와의 점점 커지는 간격을 인식하지 못하고, 점차적으로 비밀리에 결정된 정책에 따라 통치되는 것에 익숙해짐.
     * 점진적인 변화
          + 정부와 국민 간의 간격은 점차적으로 커졌으며, 이는 국민들이 정부의 복잡한 상황을 이해할 수 없다는 믿음과 국가 안보의 이유로 정보가 공개되지 않는다는 이유로 정당화됨.
          + 국민들은 히틀러에 대한 신뢰로 인해 이러한 간격이 커지는 것을 쉽게 받아들임.
     * 일상 속의 변화
          + 학자와 같은 지식인들도 새로운 활동과 요구에 몰두하게 되어 근본적인 문제에 대해 생각할 시간이 없었음.
          + 독재 체제는 사람들에게 생각하지 않을 핑계를 제공했으며, 이는 지식인들조차도 근본적인 문제에 대해 생각하지 않게 만듦.
     * 저항의 어려움
          + 점진적인 변화는 사람들이 이를 인식하지 못하게 만들었으며, 각 단계는 작고 잘 설명되었기 때문에 저항하기 어려웠음.
          + 사람들은 큰 충격적인 사건이 오기를 기다리며, 혼자 행동하거나 문제를 일으키고 싶지 않아함.
     * 불확실성과 두려움
          + 불확실성은 시간이 지날수록 증가했으며, 거리나 공동체에서의 저항은 거의 없었음.
          + 정부의 정책에 대한 비판이나 저항은 큰 처벌의 가능성을 동반했으며, 전쟁이 시작되면서 정부는 전쟁 승리를 위해 필요한 모든 것을 할 수 있었음.
     * 결론
          + 독일인들은 점진적인 변화에 의해 새로운 도덕과 원칙을 받아들이게 되었으며, 이는 그들이 이전에는 상상할 수 없었던 것들이었음.
          + 결국, 많은 독일인들은 수치심 속에서 살아가게 되었으며, 이는 그들이 할 수 있는 최선의 영웅적 행동이었음.

        Hacker News 의견

     * ""The Germans""라는 책은 전쟁 후 독일 시민과 나치당원과의 인터뷰를 통해 악의 평범성과 현대의 독재를 보여줌
          + 미국 사회의 침묵과 혼란, 민주주의의 해체와 관련된 유사점을 지적함
          + 미국 학교에서 필수적으로 읽어야 했을 것이라는 의견을 제시함
     * 대통령이 연방 기관을 일방적으로 폐쇄하고 있으며, 이는 헌법의 실질적 소멸을 의미함
     * 이러한 상황은 미국뿐만 아니라 전 세계적으로 발생하고 있음
     * 2025년 버전의 Indivisible 같은 행동이 필요하다는 의견이 제시됨
     * 네덜란드에서는 비밀리에 결정된 정부의 행동이 조직 범죄와 싸우기 위해 법적 절차를 벗어난 개입을 하고 있음
          + RIEC라는 조직이 경찰, 세무서 등 여러 정부 부서를 통제하고 있음
          + 대중은 이 조직에 대해 잘 모르며, TV 광고를 통해 이웃의 의심스러운 행동을 신고하도록 권장받고 있음
     * 미국에서 일어나는 일에 대해 무력감을 느끼며, 일상 생활을 유지해야 하는 현실을 설명함
          + 독일 나치 시대의 시민들과 자신을 비교하며, 당시 사람들을 비판할 수 없음을 인정함
          + 사람들은 자신이 조작되지 않을 것이라 믿지만, 실제로는 마케팅과 같은 미묘한 조작에 영향을 받음
     * ""Principiis obsta""와 ""Finem respice""라는 격언을 인용하며, 시작을 저지하고 끝을 고려해야 함을 강조함
          + 그러나 일반인들이 이를 예측하고 저지하는 것은 어려움
     * ""The Germans""라는 책이 자신에게 큰 영향을 미쳤음을 설명함
          + 책을 읽기 전에는 좋은 사람들이 파시스트 정권에 저항할 것이라 믿었지만, 책을 읽고 나서는 그 믿음이 거의 사라짐
          + 책을 읽는 것이 중요하다고 강조함
     * 사람들은 점차적으로 비밀리에 결정된 정부의 행동에 익숙해지고, 히틀러에 대한 신뢰가 이러한 격차를 넓히는 데 기여함
     * 친구의 파트너로부터 이 책을 추천받았으며, 책을 읽으며 현재 상황과의 유사점을 발견함
          + 책의 전체 내용이 시간을 들일 가치가 있다고 강조함
"
"https://news.hada.io/topic?id=19072","구글, AI를 무기 및 감시에 사용하지 않겠다는 약속 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글, AI를 무기 및 감시에 사용하지 않겠다는 약속 철회

     * Google의 AI 원칙 변경 배경
          + 기존 AI 원칙에서 무기나 감시 용도로 AI를 사용하지 않는다고 명시했던 약속이 사라짐
          + Google의 Demis Hassabis와 James Manyika가 AI의 확산과 국가 안보 수요를 이유로 정책 변경을 발표함
          + “민주 국가들이 AI 개발을 주도해야 하며, 정부 및 안보 영역과 협업해야 한다”고 강조함
     * 새로운 AI 정책 주요 내용
          + 국제법과 인권 원칙에 부합하도록 기술을 사용하겠다는 문구를 유지함
          + “예기치 못한 피해를 완화하기 위해 테스트를 진행한다”는 항목이 추가됨
          + 구체적으로 무기나 감시 활용에 대한 배제 조항이 삭제되었음
          + Google 대변인은 무기∙감시 정책 변화에 대한 구체적 질문에 답변을 거부함
     * 과거 Google 내부 반발과 Maven 계약
          + 2018년, 미국 국방부와 드론 영상 분석 프로젝트(Maven)를 진행하다 직원들의 강한 반발이 일어났음
          + 직원들은 “Google이 전쟁 사업에 관여해선 안 된다”라고 주장함
          + 회사는 Maven 계약을 갱신하지 않았고, 그 후 AI 원칙을 공개하며 무기∙감시 사용을 금지한다는 약속을 포함했음
          + 이번 정책 업데이트를 통해 해당 명시적 약속이 삭제되면서 과거 직원 반발 움직임이 다시 주목받고 있음
     * 산업계 영향
          + 실리콘밸리에서 군사∙국방 분야 협력은 빠르게 확장 중임
          + Google 직원들의 Maven 반대가 업계에 큰 전환점을 만들었다는 평가가 있음
          + 이번 정책 변경으로 Google의 AI가 군사∙감시 분야에 다시 적용될 가능성이 높아졌다는 분석이 존재함

        Hacker News 의견

     * 드론과 AI 무기의 위험성에 대해 논의함. 원격 암살, 정치적 혼란, 독재자의 선택적 타겟팅 등 다양한 악용 가능성이 있음
          + 많은 국가들이 이러한 기술을 보유하게 될 것이며, 이미 많은 AI 모델이 공개되어 있음
          + 기술 커뮤니티가 이 문제를 해결하기 위한 방법을 고민해야 함
          + 방어책, 감시 방법, 시민의 정부 무기 사용 감사 방법 등의 중요한 질문이 제기됨
     * Google과 같은 대기업은 본질적으로 선하거나 도덕적이지 않으며, 이러한 이미지는 마케팅 전략일 뿐임
     * 세계가 자멸로 향하는 현실을 인식하며, 비공개적으로 진행되는 무서운 발전들이 존재함
     * 대부분의 사기업은 이익을 위해 기술을 사용할 것이며, 이전의 약속을 어길 것임
     * 기업들이 정치적 상황에 따라 변화하는 것이 흥미로움
          + Google은 AI 발표에 대한 반응으로 이미지 관리를 신경 쓰고 있음
     * OpenAI가 DoD 계약을 맺은 것과 Google의 행동을 비교하며, 솔직한 태도가 더 정직하다고 주장함
     * 특정 국가가 군중 통제를 위해 무기를 필요로 한다고 주장함
          + 국제적 위기는 주로 미국과 러시아에 의해 시작되었음을 비판함
     * 세계가 혼란스러운 상황에서 Google, OpenAI, Microsoft와 같은 기업이 국방 프로젝트에 참여하는 것이 긍정적이라고 생각함
     * LLMs가 정보 기관에서 텍스트 분석을 확장할 수 있는 능력에 대한 우려를 표명함
"
"https://news.hada.io/topic?id=19162","keymapper, 크로스플랫폼 context-aware 키 리매핑","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 keymapper, 크로스플랫폼 context-aware 키 리매핑

     * 각 프로그램별 리매핑 가능
     * 크로스플랫폼(GNU/Linux, Windows, MacOS)
     * context-aware(운영체제, 창 제목 및 프로세스 경로 등으로 리매핑 적용 가능)
     * 주요 리매핑 기능 지원(어플리케이션 실행, 매크로, 별칭, 키 릴리즈시 작동, 타임아웃 그리고 마우스 등)
"
"https://news.hada.io/topic?id=19170","Anthropic Economic Index (경제 지수)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Anthropic Economic Index (경제 지수)

     * Anthropic은 AI 시스템이 노동 시장과 경제에 미치는 영향을 이해하기 위해 'Anthropic Economic Index'를 출시
     * 이 지수는 Claude.ai에서 수집된 수백만 건의 익명화된 대화를 기반으로 AI가 현대 경제의 실제 작업에 어떻게 통합되고 있는지에 대한 데이터를 제공
     * 또한, 연구자들이 이 분석을 확장할 수 있도록 데이터셋을 오픈 소스로 공개
     * 정책 대응을 개발하기 위해 경제학자, 정책 전문가, 기타 연구자들의 의견을 수렴하고 있음

주요 발견

     * 현재 AI 사용은 소프트웨어 개발 및 기술 문서 작성 작업에 집중되어 있음
     * 전체 직업 중 약 36%는 관련 작업의 최소 25%에서 AI를 사용하며, 약 4%의 직업은 관련 작업의 75% 이상에서 AI를 사용함
     * AI 사용은 인간의 능력을 향상시키는 보조(57%)에 더 치우쳐 있으며, 직접 작업을 수행하는 자동화(43%)보다 높음
     * 컴퓨터 프로그래머나 데이터 과학자와 같은 중간에서 고임금 직업에서 AI 사용이 더 일반적이며, 가장 낮거나 가장 높은 임금의 역할에서는 AI 사용이 적음
          + 이는 현재 AI 능력의 한계와 기술 사용의 실질적인 장벽을 반영함

노동 시장에서의 AI 사용 분석

     * 직업별 AI 사용
          + '컴퓨터 및 수학' 분야에서 AI 사용이 가장 높았으며, 이는 소프트웨어 엔지니어링 역할을 주로 포함함
          + '예술, 디자인, 스포츠, 엔터테인먼트 및 미디어' 분야가 그 다음으로 높았으며, 주로 다양한 종류의 글쓰기 및 편집 작업에 AI를 사용함
          + 육체 노동이 많은 직업, 예를 들어 '농업, 어업 및 임업' 분야에서는 AI 사용이 가장 적었음
     * 직업 내 AI 사용 깊이
          + 매우 적은 수의 직업만이 관련 작업의 대부분에서 AI를 사용하며, 약 4%의 직업만이 관련 작업의 75% 이상에서 AI를 사용함
          + 그러나 약 36%의 직업은 관련 작업의 최소 25%에서 AI를 사용하여, AI가 많은 작업에 확산되고 있음을 나타냄
     * AI 사용과 임금
          + AI 사용은 중간에서 고임금 범위의 특정 직업, 예를 들어 컴퓨터 프로그래머나 카피라이터에서 가장 높았음
          + 매우 높은 임금이나 매우 낮은 임금의 직업에서는 AI 사용이 낮았으며, 이는 이러한 역할의 물리적 작업 요구나 현재 AI 능력의 한계를 반영함
     * 자동화 대 보조
          + AI 사용은 보조(57%)에 더 치우쳐 있으며, 이는 AI가 인간과 협력하여 작업을 수행하는 경우를 의미함
          + 자동화(43%)는 AI가 직접 작업을 수행하는 경우를 나타냄

결론 및 향후 연구

     * AI 사용은 빠르게 확산되고 있으며, 모델은 점점 더 능력 있어지고 있음
     * 노동 시장의 모습은 비교적 짧은 시간 내에 상당히 다를 수 있음
     * Anthropic은 이러한 변화를 추적하기 위해 정기적으로 분석을 반복하고, 결과와 관련 데이터셋을 공개할 예정임
     * 이러한 종단 분석은 AI와 노동 시장에 대한 새로운 통찰력을 제공할 수 있음
     * 연구는 AI 사용에 대한 데이터를 제공하지만, 정책 처방을 제공하지는 않음
     * 노동 시장에 대한 AI의 영향을 준비하기 위한 답변은 증거, 가치, 경험의 조합에서 나올 것이며, Anthropic은 새로운 방법론을 사용하여 이러한 문제에 대한 더 많은 정보를 제공하기를 기대함
     * 전체 보고서와 자세한 분석 및 결과는 여기에서 확인할 수 있음

        Hacker News 의견

     * ChatGPT에 대한 분석도 보고 싶음. 소비자 시장 점유율이 더 큼
          + 분석 방법에 대해 조심스러움. 예를 들어, 게임이 왜 크래시 나는지 묻는 사람을 컴퓨터 및 수학 직업군으로 분류함
          + 게임 개발자가 아닌 게임 플레이어의 질문일 가능성이 큼. 이를 직업적 과업으로 볼 수 있는지 의문임
          + 식기세척기 청소 방법을 묻는 것이 수리공이나 산업 직업군에 속한다고 할 수 없음
          + 그래도 이런 분석을 시도하는 것은 멋짐
     * AI가 주로 엔지니어들이나 엔지니어링 작업에 사용된다는 점을 확인함
          + 자동화 작업에서 얼마나 많은 트래픽이 발생하는지 궁금함
          + LLMs에 대한 ROI를 볼 수 있을지 의문임. 수백억 달러가 투자되었지만 여전히 같은 사용자층이 사용 중임
          + ChatGPT와 Co-Pilot 스타일 IDE 외에 ""킬러"" 앱이 아직 없음
          + 많은 사람들이 시도 중임. 최근 YC 배치도 모두 산업용 AI임
          + 경제적 현실이 걱정됨
     * Anthropic이 너무 많은 자금을 가지고 있어 소비 방법을 찾고 있는 것 같음
          + AI 스타트업이 빠르게 비대해지는 것이 놀라움
          + 보통 이런 현상은 대기업에서 발생함
          + 이 트렌드는 ""평가가 너무 높다""는 것을 의미할 수 있음
          + ""진보가 곧 정체될 수 있다""는 힌트를 줄 수도 있음
     * 댓글에서 많은 사람들이 기사를 좋아하지 않거나 시간 낭비로 봄
          + 이 기사의 대상이 우리가 아닐 수도 있음
          + 평균적인 사업주에게 현실적인 잠재력을 보여주려는 것일 수 있음
          + AI로 인해 변화가 일어나고 있다는 것을 인식함
     * 이 논문과 관련 데이터를 공개하는 것이 멋짐
          + 정기적으로 이런 작업을 했으면 좋겠음. 변화 추적이 가능해짐
          + 앞으로 API 사용 포함을 수정했으면 좋겠음
          + 개인적으로 Anthropic 모델을 Cursor를 통해서만 사용함. 이 사용량은 데이터에 포함되지 않음
          + Cursor 같은 전문 도구/인터페이스가 성장할 것으로 예상됨. API로의 사용 전환이 증가할 것임
          + 데이터 세트에서 이를 놓치는 것은 아쉬움
     * Claude가 Openrouter LLM 순위에서 뛰어난 성과를 보임
          + API 접근에 가장 인기 있는 선택인 것 같음
     * 주관적인 경험과 잘 맞음
          + 직장에서 AI 사용이 거의 없음. 모두가 AI 구독을 가지고 있지만 실제 사용은 적음
          + 집에서 취미 코딩을 할 때 AI가 매우 유용함
          + 많은 직업이 코드 베이스와 같은 것이 없음
          + AI가 직업의 일부를 이해할 수 있지만 관련 콘텐츠 작성이 더 오래 걸림
          + 코드처럼 빠르게 복사하여 붙여넣기 할 수 있는 것이 없음
     * Anthropic 팀이 Claude가 최고의 코딩 모델이며 주로 개발자들이 사용한다는 것을 발견한 것 같음
          + 일반 대중에게는 OpenAI만큼의 침투력이 없음
     * 전체적으로 57%의 작업이 증강되고 43%의 작업이 자동화됨
          + Sonnet 3.5 이전 6개월 전 데이터와 비교하고 싶음
          + 자동화 비율이 시간이 지남에 따라 증가할 것으로 예상됨. 그러나 이는 주로 API 사용에 의해 포착될 것임
     * Anthropic이 이 분야에 대한 특별한 지식이나 통찰력을 가지고 있을 것으로 기대하지 않음
          + Anthropic 사용에 대한 ""Google Trends""와 같은 데이터를 보고 싶음
          + AI는 동적이고 경쟁적인 산업이기 때문에 이런 정보를 공유할 사람은 없을 것임
"
"https://news.hada.io/topic?id=19142","Goose - 오픈소스 AI 코딩 에이전트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Goose - 오픈소스 AI 코딩 에이전트

     * 로컬에서 실행 가능한 확장형 AI 에이전트로 코딩작업을 자동화하며 복잡한 작업을 처리
     * OpenAI, Anthropic, Gemini, Groq, Ollama 등의 모델과 OpenRouter 이용 가능
     * 다양한 확장을 통해 기능 추가 가능
          + Developer (기본 설치 확장) : 파일 편집 및 셸 명령 실행
          + Computer Controller : 웹 스크래핑, 파일 캐싱, 자동화
          + Memory : 컨텍스트 및 정보 저장
          + Knowledge Graph Memory : 지식 저장을 위한 그래프 기반의 메모리 시스템
          + Fetch : 웹 콘텐츠 가져오기 및 처리
          + JetBrains, Git, Figma 연동
     * macOS/Linux 에선 CLI/앱 모두 지원되며, WSL로 윈도우에서 실행은 가능(CLI 온리)
"
"https://news.hada.io/topic?id=19121","트랜스포머 기반 스프레드시트 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           트랜스포머 기반 스프레드시트 기술

    Transformer - 스프레드시트

     * 최근 몇 달 동안 여러 AI 교육자들과 협력하여 AI by Hand 연습 문제를 맞춤화했음.
     * 이러한 자료들이 전 세계의 많은 교실에서 사용되고 있어 기쁨.
     * 맞춤화 과정이 수작업으로 이루어지다 보니 가끔 오류가 발생하여 학생들이 이를 발견함. 이는 학생들이 주의를 기울이고 있다는 점에서 긍정적임.
     * 최근에는 사람들이 자신만의 AI by Hand 연습 문제를 만들 수 있는 도구를 개발할 생각을 하고 있음.
     * 다양한 기술을 고려한 끝에 Google Sheets를 사용하기로 결정함. 목표는 도달 범위를 최대화하고 접근성을 넓히는 것임.
     * 이 도구는 아직 초기 단계에 있으므로 피드백을 매우 환영함.
"
"https://news.hada.io/topic?id=19177","Airbnb가 지도 검색을 개선한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Airbnb가 지도 검색을 개선한 방법

     * Search는 Airbnb에서 Guest와 Host를 연결하는 핵심 메커니즘
     * Airbnb의 검색 결과는 두가지로 제공됨
          + 목록 형식 (list-results, 숙소 이미지·가격·평점 등이 표시된 카드 형태)
          + 지도 형식 (map-results, 지도를 기반으로 가격이 표시된 핀 형태)
     * 기존 검색 랭킹 알고리듬은 두 형식 모두 예약 확률에 따라 정렬해 목록을 생성하는 방식이었음
     * 그러나 지도에서는 목록이 아닌 개별 핀(pins) 형태로 표시되므로, 새로운 랭킹 방식이 필요해짐

지도에서는 무엇이 다를까?

     * 목록 형식에서는 위에서부터 사용자 주의가 점차 감소한다는 전제가 있음
          + 실제로 목록에서 순위가 높을수록 CTR(Click-Through Rate)이 높은 모습이 나타남
     * 지도 형식에서는 숙소가 지도 위에 핀으로 흩어져 있어 순위에 따른 주의 감소가 성립하지 않고, 균등하게 분산
          + 따라서 지도 위에 노출되는 숙소를 예약 확률 순으로 제한하는 단순한 방식은 효과가 떨어짐

균등한 사용자 주의(Uniform User Attention) 모델링

     * 지도에서 사용자 주의가 모든 핀에 균등하게 분산된다고 가정하는 접근
     * 하지만 실제로 Guest는 몇 개의 핀만 클릭하기 때문에, 너무 많은 핀을 보여주면 좋은 숙소를 놓칠 수 있고, 너무 적게 보여주면 사용자가 원하는 숙소를 제외할 위험이 생김
     * 해결책:
          + 지도에 표시할 핀의 수를 제한하고, 최상위 예약 확률을 가진 항목만 선택하여 노출
          + A/B 테스트 결과:
               o 검색자가 더 적은 클릭 수로 원하는 숙소를 찾을 수 있었음
               o 예약 전환율 증가, 특히 5성급 후기 비율이 증가함

계층화된 사용자 주의(Tiered User Attention)

     * 지도 핀을 두 가지 계층으로 구분:
         1. 일반 핀: 예약 확률이 높은 숙소를 가격과 함께 표시
         2. 미니 핀: 예약 확률이 상대적으로 낮은 숙소를 작은 아이콘으로 표시 (가격 없음)
     * 효과:
          + 일반 핀은 미니 핀보다 8배 높은 클릭률을 가져서, 사용자 시선을 상위 예약 확률 숙소로 더 집중시킬 수 있음
          + 특히 데스크톱 검색에서 더 적절한 결과 제공 가능
          + A/B 테스트 결과, 이 방식으로도 예약 성과가 개선됨

할인된 사용자 주의(Discounted User Attention) 모델링

     * 사용자는 지도에서 중앙에 위치한 핀을 더 많이 클릭하는 경향이 있음
     * 따라서 최적의 중심 좌표를 찾는 알고리듬을 개발하여, 예약 확률이 높은 숙소를 지도 중앙에 배치
          + 다양한 좌표 후보를 평가하여, 가장 높은 예약 확률 숙소들과의 거리가 가까운 위치를 새로운 중심으로 삼음
     * A/B 테스트 결과:
          + 예약 전환율 0.27% 증가
          + 지도를 이동하는 빈도 1.5% 감소, 즉 검색자가 원하는 숙소를 더 쉽게 찾을 수 있었음

결론 및 향후 과제

     * 사용자는 목록과 지도를 서로 다르게 인식하고 상호작용함
     * 지도 검색과 목록 검색은 사용자 행동이 다름을 고려하여 랭킹 방식을 개선
     * 단계적인 실험을 통해 검색 경험 개선 및 예약 전환율 증가를 달성
     * 그러나 여전히 지도에서 모든 숙소를 적절히 노출하는 방법은 해결되지 않은 과제
     * 이 내용에 대한 더 자세한 논의와 기술적 세부 사항은 KDD ’24에서 발표된 연구 논문 ""Learning to Rank for Maps at Airbnb"" 에서 확인 가능함
     * 향후 연구 방향으로 더 나은 방법을 모색할 예정

   지도상의 랭킹이라는 건 정말 아직 해볼 만한 도전이 많이 남아있는 영역인 것 같습니다. 솔직히 좀 당황스러울 정도로요. 최근 해외에서 구글 맵스를 써봤는데 제가 원하는 수준의 정밀도로 음식점 검색 조건을 좁히기가 어려웠습니다. 제가 원하는 느낌이나 톤의 리뷰를 보여주는건 꿈도 못꾸게 먼 이야기처럼 느껴졌구요. 지도를 만드는 모든 업계인들 화이팅입니다!!
"
"https://news.hada.io/topic?id=19166","별명에서 유래된 성씨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              별명에서 유래된 성씨

    성에서 유래한 별명

     * 영어에는 일반적인 부계 성씨 패턴이 존재함. 예를 들어, ""John Peters""와 ""John Peterson""은 아버지 이름이 ""Peter""인 사람을 의미함. (""Peters""는 ""Peter's""로 이해해야 함)
     * 종종 아버지의 이름은 별명이었음. 예를 들어, ""John""의 일반적인 별명은 ""Jack""이며, John Jacks와 John Jackson이 있음. Bill, Will, Wille은 모두 William의 줄임말임.
     * ""Richard""는 ""Dick""으로, John Dicks (또는 Dix)와 John Dickson (또는 Dixon)이 있음. ""Nicholas""는 ""Nick""으로, John Nicks (또는 Nix)와 John Nickson (또는 Nixon)이 있음.
     * 때로는 이름에 축소형 접미사 ""-kin""이 삽입됨. Wilkins는 작은 Will의 아들이며, Wilkinson도 마찬가지임. Peterkins는 작은 Peter의 아들임.
     * 이러한 패턴은 매우 일반적이어서 이러한 성을 발견하면 거의 항상 이름을 추론할 수 있음. 예를 들어, Pierce, Pearse, Pierson, Pearson은 Pierre, Piers 또는 Pierce에서 유래함.
     * 때로는 패턴이 존재하지만 이름이 불분명함. 예를 들어, John Watts, Watson, Watkins의 아버지는 Wat라는 이름을 가졌으며, 이는 Walter의 줄임말이었음.
     * ""Daw""는 ""David""의 고대 별명으로, Dawes, Dawkins, Dawson을 만듦.

    추가 예시

     * Vicki Rosenzweig는 Richard의 또 다른 잊혀진 별명 ""Hick""을 상기시킴. 여기서 Hicks, Hix, Hickson, Hixon, Hickman이 유래함.
     * Lucy Keer는 Bateson/Bates가 ""Bat""에서 유래했음을 제안함.
     * Christopher Taylor는 Atkins와 Atkinson의 ""At-""이 ""Adam""의 줄임말임을 상기시킴.

    Citizen Claude의 의견

     * Claude는 오래된 이름이나 별명에서 유래한 일반적인 영어 성씨 10가지를 제시함:
          + Higgins/Higgs - ""Hick""에서 유래
          + Timms/Timson - ""Tim""에서 유래
          + Hodgson/Hodges - ""Hodge""에서 유래
          + Atkins/Atkinson - ""At"" 또는 ""Atte""에서 유래
          + Parkins/Parkinson - ""Perkin""에서 유래
          + Judson/Judd - ""Judd""에서 유래
          + Malkins/Malkinson - ""Malk""에서 유래
          + Larkins/Larkin - ""Larry"" 또는 ""Laurence""에서 유래
          + Collins/Colson - ""Col""에서 유래
          + Huggins/Huggett - ""Hug""에서 유래
     * Claude는 ""Robin""이 ""Robkin""에서 유래했다는 주장이 잘못되었음을 지적함. ""Robin""은 실제로 프랑스어에서 유래한 Robert의 축소형임.

        Hacker News 의견

     * 웨일스어의 ""ap <아버지 이름>""에서 유래한 성씨들이 새로운 성씨로 자리 잡음
          + Upjohn (ap John에서 유래), Powell (ap Hywel에서 유래), Price (ap Rhys에서 유래), Pritchard (ap Richard에서 유래), Bowen (ab Owen에서 유래) 등이 있음
          + Harris와 Harrison도 이러한 성씨의 예시임
     * 더블린에서는 버스 노선이 이중 언어로 표기되며, Harristown의 아일랜드어 번역은 Baile Anraí임
          + 처음에 ""Baile Anraí""를 보고 Henry's Town이라고 생각했음
          + Henry와 Harris가 같은 이름의 변형이며 Anraí가 두 이름의 아일랜드어 버전임을 알게 됨
          + Wikipedia에서도 이를 확인할 수 있음
          + Harry는 중세 영어에서 Henry의 형태이며, 현대에는 Henry와 Har로 시작하는 이름의 축약형으로 사용됨
          + 성씨 Hanks도 Henry의 축약형인 Hank에서 유래할 수 있음
     * 일본 남자 이름은 종종 ""-rō"" (-郎, ""n번째 아들"")로 끝남
          + 예: 一郎 (Ichirō, ""첫째 아들""), 二郎 (Jirō, ""둘째 아들""), 三郎 (Saburō, ""셋째 아들"") 등
     * 영국에서는 남편의 전체 이름을 아내에게 사용하는 관습이 있었음
          + 예: ""John Bridgerton""의 아내는 ""Mrs John Bridgerton""으로 불림
     * 몇 가지 더 언급되지 않은 별명
          + ""Dob""은 ""Robert""의 옛 별명으로 ""Dobson""을 만듦
          + ""Dodge""는 ""Roger""의 별명으로 Dodgson을 만듦
          + ""Tibb""는 ""Theobald""의 별명으로 ""Tibbs""와 ""Tibbets""를 만듦
          + ""Hud""는 ""Hugh""의 별명으로 Hudsons를 만듦
     * 영어에 축소형 접미사 (-kin)가 있는지 몰랐음
          + 포르투갈어에는 (-inho/-inha)가 있으며 유용함
          + 영어에 증대형 접미사가 있는지 궁금함
     * 페르시아어에서는 ""-zadeh""가 ""자식""을 의미함
          + 1900년대 초까지 페르시아/이란에서는 성씨가 도입되지 않았고, 많은 사람들이 *zadeh를 선택함
          + 예: Hassanzadeh는 Hassan의 자식을 의미함
     * 많은 ~son 이름이 스칸디나비아에서 유래했을 것으로 추측됨
          + 스칸디나비아 성씨는 최근까지 주로 부계 이름에서 유래함
          + 아이슬란드는 여전히 이 전통을 유지하고 있음
     * 일부 문화에서는 각 세대를 시나 노래의 다음 줄에 따라 이름을 짓는 전통이 있었음
          + 구절이 다 떨어지면 새로운 노래를 선택하여 다시 시작함
     * 스페인어에서도 이러한 예를 많이 볼 수 있음
          + Diaz는 Diego의 아들이라는 의미이며 여전히 흔한 이름임
          + Menendez, Ortiz, Juarez, Ordonez와 같은 이름은 현재는 드문 이름임
"
"https://news.hada.io/topic?id=19086","중국 및 홍콩발 소포 수입 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           중국 및 홍콩발 소포 수입 중단

     * 개요
          + 2025년 2월 5일부터 미국 우편 서비스(USPS)는 중국과 홍콩 우편에서 오는 모든 국제 우편물과 소포를 계속 수락할 예정임.
          + USPS와 세관 및 국경 보호국은 새로운 중국 관세에 대한 효율적인 수집 메커니즘을 구현하기 위해 긴밀히 협력 중임.
          + 이 조치는 소포 배송에 최소한의 방해를 주기 위한 것임.
     * 관련 링크
          + 특정 국가를 위한 송금환
          + 아일랜드로의 국제 배송 지침
     * 미국 우편 서비스 링크
          + USPS.com
          + USPS 홈
          + 우표 구매 및 쇼핑
          + 우편 요금이 포함된 라벨 인쇄
          + 고객 서비스
          + 개발자를 위한 리소스
     * About.USPS.com
          + USPS 홈
          + 뉴스룸 및 알림
          + 채용 정보
          + 양식 및 출판물
          + 정부 서비스
          + 우편 사실
          + 우편 역사
          + USPS 블로그
     * 관련 사이트
          + 비즈니스 고객 게이트웨이
          + 미국 우편 검사 서비스
          + 감사관
          + 우편 탐험가
          + 국립 우편 박물관
          + PostalPro
     * 법적
          + 이용 약관
          + 개인정보 보호정책
          + 정보자유법(FOIA)
          + No FEAR 법/EEO 연락처
          + 공정 기회 법
          + 접근성 성명
     * 저작권
          + © 2025 미국 우편 서비스

        Hacker News 의견

     * 미국의 한 회사에서 중국으로부터의 패키지 수신이 중단되면서 R&D 프로젝트에 큰 영향을 미칠 것이라는 우려가 있음. 특히 전기 및 펌웨어 엔지니어들이 중국에서 부품을 받을 수 없게 되면 업무에 차질이 생길 것이라 언급함
     * USPS가 중국과 홍콩으로부터의 국제 우편물 수신을 중단했다가 다시 재개한 상황에 대해 혼란이 있다는 의견이 있음. 이는 USPS에 대한 공격일 수 있으며, 전기차 사용을 중단하면 우체국에 대한 호감이 다시 생길 수 있다는 추측을 제시함
     * 2025년 2월 5일부터 USPS가 중국과 홍콩으로부터의 모든 국제 우편물 수신을 계속할 것이라는 발표가 있었음. USPS와 세관이 새로운 중국 관세를 효율적으로 수집하기 위해 협력하고 있음
     * 미국과 캐나다가 제조 역량을 회복하기를 희망하며, 이를 위해 주택 및 주식의 대규모 평가절하와 노동의 명예를 교육하는 것이 필요하다고 주장함. 이는 부의 재분배를 의미하며, 사회적 변화가 필요하다고 언급함
     * FedEx, UPS, DHL을 통해 여전히 중국에서 미국으로 물품을 배송할 수 있으며, 표준 통관 절차를 거쳐야 한다고 설명함
     * AliExpress에서 주문한 패키지가 미국 내에서 발송되므로 걱정할 필요가 없다는 의견이 있음. 그러나 중국 우체국을 사용하는 셴젠의 전자 부품 구매에는 영향을 미칠 수 있음
     * AliExpress가 미국 주소로의 체크아웃을 허용하지 않다가 다시 가능해진 상황이 이상하다고 언급함
     * 소비자에게는 나쁜 소식이지만, Amazon에게는 좋은 소식일 수 있다는 의견이 있음. Amazon이 Temu, AliExpress, Shein 등과의 경쟁에서 유리해질 수 있음
     * 현재 행정부가 정부 운영에 부적합하며, 독재자가 민주적 시스템을 왜곡하고 있다는 비판이 있음. 사법 시스템이 방해가 되고 있으며, 공격을 받을 것이라는 우려를 제기함
"
"https://news.hada.io/topic?id=19165","Shunpo - 디렉토리 이동을 더 쉽게","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Shunpo - 디렉토리 이동을 더 쉽게

     * 터미널에서 디렉토리 탐색을 조금 더 빠르게 만들어주는 미니멀한 Bash 툴
     * 몇 번의 키 입력만으로 북마크를 관리하고 디렉토리로 이동
     * cd, pushd, popd 를 자주 하는 사람들에게 적합

명령

     * Bookmarking
          + sb: 현재 디렉토리를 북마크에 추가
          + sg, sg [#] : 북마크로 이동
          + sr, sr [#] : 북마크 제거
          + sl: 모든 북마크 보기
          + sc: 모든 북마크 제거
     * Navigation
          + sj, sj [#]: 상위 디렉토리로 ""Jump""
          + sd: 하위 디렉토리로 ""Dive"". 선택 리스트가 보이며 아래키로 이동 가능
     * Selection
          + 0~9: 옵션 선택
          + n: 다음 페이지
          + p: 이전 페이지
          + b: 상위 디렉토리로 이동 (sd 에서만 동작)
          + Enter: 해당 디렉토리로 이동 (sd 에서만 동작)

   z 잘 사용하고 있습니다

   북마크 관리도 노력 필요하니, z로 충분하지 않을까 싶습니다.

   이름이 순보군요ㅋㅋ
   별개로 저는 z도 애용합니다.
"
"https://news.hada.io/topic?id=19160","Show GN: Apple Wallet에 나만의 카드 추가하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Apple Wallet에 나만의 카드 추가하기

   요즘은 PPT 슬라이드에서도 QR 코드로 스피커의 프로필이나 발표 자료에 쉽게 접근할 수 있습니다. 코로나 이후 QR 사용이 더욱 익숙해지면서, 진입 장벽이 크게 낮아졌죠.

   하지만 오프라인에서 LinkedIn, Instagram 같은 프로필을 공유하려 해도, 상대가 직접 검색하면 쉽게 찾기 어렵고 시간이 걸리곤 합니다.

   이 프로젝트는 이러한 불편함을 해결하기 위해 시작되었습니다.

   이제 iPhone의 전원 버튼을 두 번 눌러 Apple 지갑을 열고, 명함처럼 내 프로필 링크를 손쉽게 공유하세요.

   더 나아가, 오프라인에서도 간편하게 송금할 수 있도록 토스, 카카오페이의 ‘나에게 송금하기’ 기능을 추가했습니다. 아래와 같은 다양한 상황에서 활용할 수 있습니다.
     * 친구가 대신 결제한 커피 값을 간편하게 정산할 때
     * 중고 거래에서 빠르게 송금을 주고받을 때
     * 팀 회식 후 더치페이를 할 때

   앞으로 더 많은 사례로 확장해 나가길 기대합니다!
"
"https://news.hada.io/topic?id=19110","영국, Apple에 글로벌 iCloud 암호화 백도어 생성하라고 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 영국, Apple에 글로벌 iCloud 암호화 백도어 생성하라고 명령

     * 영국 정부가 Apple에 모든 암호화된 사용자 콘텐츠에 대한 접근 권한을 요구한 것으로 보도됨. 이는 민주 국가에서 전례 없는 요구
          + 이 요구는 2016년 제정된 영국 조사 권한법(IPA)에 따라 이루어졌으며, Apple은 이에 대한 언급을 거부
          + 미국의 암호화 문제 자문가는 Apple이 사용자에게 경고할 수 없게 될 것이라고 언급
     * Apple은 사용자 보안을 유지하기 위해 영국에서 암호화된 저장소 제공을 중단할 가능성이 있음
          + 이 명령은 다른 국가의 서비스에도 영향을 미칠 수 있으며, Apple의 고급 데이터 보호 기능을 위협함
          + Google은 Android 백업에 대한 백도어 요청을 받은 적이 없다고 주장
          + Apple은 이러한 정부의 요구가 사용자 보호를 저해할 수 있다고 경고
          + Tim Cook은 백도어 제공이 악의적인 접근을 초래할 수 있다고 주장
     * 미국은 중국 해커의 대규모 사이버 침입에 대한 우려를 표명
          + FBI와 다른 기관들은 종단 간 암호화 사용을 권장
          + Big Brother Watch는 이러한 시도가 영국의 안전을 보장하지 못할 것이라고 비판

        Hacker News 의견

     * 영국 정부가 Apple을 사업에서 몰아내려 하기보다는, 규정을 따르지 않으면 벌금을 부과할 가능성이 높음
          + Apple은 영국에서 Advanced Data Protection 서비스를 중단할 가능성이 있음
          + 정부의 제안은 약하며, 정직한 영국 소비자들이 범죄로부터 보호를 잃게 됨
          + 시간 낭비임
     * Apple이 영국에서 클라우드 서비스를 철수하면, 영국 보안 당국이 암호화된 사용자 데이터에 접근할 수 있는 백도어를 만들라는 요구는 실행 불가능함
          + 영국 정보 기관이 Apple을 좋게 보이게 하려는 새로운 방법을 찾는 것 같음
     * Google 대변인 Ed Fernandez는 정부가 백도어를 요청했는지에 대한 질문에 직접적인 답변을 하지 않았으며, Android의 종단간 암호화된 백업 데이터에 접근할 수 없다고 언급함
          + 이는 Google이 접근할 수 없다는 것만을 의미하며, 정부에 키를 제공했을 가능성도 있음
          + 이러한 발언을 과대 해석하지 않는 것이 중요함
     * Salt Typhoon과 영국의 최근 요청이 언급됨
          + 미국이 불법적인 일을 하려 할 때 영국에 요청하고, 그 반대의 경우도 있음
     * 영국의 키 공개법은 고난도 무작위 데이터를 가진 사람을 범죄자로 만듦
          + 법원 명령 없이 정보를 해독할 수 있는 키를 제공해야 함
     * 미국은 정부로부터 자유를 명문화한 유일한 국가임
          + 미국 헌법은 시민을 통제하려는 정부로부터 보호함
     * 감시 반대 프라이버시 서사가 진전되고 있다고 생각했지만, 그렇지 않음
          + 영국 시민으로서 이를 막기 위한 방법이 있는지 궁금함
     * 수년간 법 집행 기관은 범죄와 테러를 방지하기 위해 암호화 백도어가 필요하다고 주장함
          + 미국에서는 Salt Typhoon 사건 이후 FBI가 정부 관계자들에게 종단간 암호화 앱 사용을 권장함
          + 영국 정부는 암호화에 대해 뒤처져 있음
     * 개인 자유에 대한 실망감이 있음
          + 노동당이 이전 정부의 잔재를 이어받았다고 생각할 수 있지만, Tory 3.0 계획을 고려하면 그렇지 않을 수 있음
          + Keir Starmer 하의 노동당에 투표한 결과임
     * Apple은 시장에서 서비스를 철수할 수 있는 몇 안 되는 회사 중 하나임
          + 이는 유권자들이 정부에 대한 인식을 바꾸게 할 수 있음
"
"https://news.hada.io/topic?id=19154","AI 창업자의 씁쓸한 교훈 (Bitter Lesson)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AI 창업자의 씁쓸한 교훈 (Bitter Lesson)

     * AI Safety 스타트업 Andon Labs (YC w24) 창업자 Lukas Petersson 의 4부작 글을 하나로 정리
          + 역사적으로 AI 분야에서는 일반적인 접근 방식이 항상 승리했음
          + 현재 AI 애플리케이션 분야의 창업자들은 과거 AI 연구자들이 저지른 실수를 반복하고 있음
          + 더 나은 AI 모델은 범용 AI 애플리케이션을 가능하게 할 것이며, 동시에 AI 모델과 관련된 소프트웨어의 부가가치는 감소할 것
     * 챕터 1: 역사는 반복된다
     * 챕터 2: 경쟁 우위가 없음
     * 챕터 3: 역사의 발자취
     * 챕터 4: 당신은 마법사입니다


챕터 1: 역사는 반복된다(History Repeats Itself)

  tl;dr:

     * 최근 AI 발전은 다양한 문제를 해결하는 새로운 제품을 가능하게 만듦
     * 그러나 대부분의 제품은 현재 모델의 제한된 능력 내에서 작동, 진정한 AI의 힘인 유연성을 활용하지 못함
     * AI 역사는 일반적인 접근 방식이 항상 승리한다는 것을 반복적으로 보여줌. Richard Sutton은 ""The Bitter Lesson""에서 이를 강조
     * 오늘날 AI 창업자들은 과거 AI 연구자들이 겪었던 실수를 반복하는 경향이 있음

  Richard Sutton의 에세이 : The Bitter Lesson 요약. (한글 번역)

     * 다음과 같은 교훈을 제시함:
          + AI 연구자들은 지식을 에이전트에 통합하려 시도함
          + 이는 단기적으로 효과적이고 만족감을 줌
          + 장기적으로는 발전이 정체되고 더 나아가 진전에 방해가 됨
          + 결국 정반대의 접근법에서 기초한 계산량의 확장을 통해 돌파구를 마련함
     * AI 연구에서도 이러한 패턴이 반복적으로 관찰되며, 현재도 끝나지 않았다고 경고

  AI 제품과 The Bitter Lesson

     * AI 제품은 일반적으로 AI 모델과 이를 둘러싼 소프트웨어로 구성
     * 성능을 향상시키는 두 가지 방법:
         1. 소프트웨어를 제약해 오류를 줄이는 엔지니어링 작업
         2. 더 나은 모델이 출시될 때까지 기다리는 것
     * 모델이 발전할수록 엔지니어링 작업의 가치는 줄어듦
     * OpenAI의 새로운 모델 출시로 프롬프트 엔지니어링의 가치가 감소한 사례는 이를 보여줌

  제약 유형과 AI 제품

     * AI 제품의 제약 요소는 두 가지로 분류 가능:
          + 특정성: 특정 문제에 초점을 맞춘 소프트웨어 (수직적 솔루션)
          + 자율성: AI가 스스로 작업을 수행할 수 있는 능력
     * 이를 바탕으로 AI 제품 분류 가능: 특정성(Vertical vs. Horizontal)과 자율성(Workflow vs. Agent)
          + Vertical Workflow
               o 특정 문제를 해결하기 위해 고정된 순서로 동작하는 시스템
               o Harvey가 대표적인 사례로, 특정 법률 작업과 같은 좁은 영역의 문제를 처리하도록 설계된 워크플로 시스템
          + Vertical Agent
               o 특정 작업 영역에서 자율적으로 동작하며, 작업 과정에서 자체적으로 결정을 내리는 시스템
               o Devin이 대표적인 사례로, 제한된 도구와 데이터를 사용하여 반복적인 작업을 수행하며 필요에 따라 작업 단계를 조정
          + Horizontal Workflow
               o 다양한 문제를 해결할 수 있는 일반적인 워크플로 시스템
               o ChatGPT가 대표적인 사례로, 여러 종류의 입력에 대해 사전 정의된 절차에 따라 응답하지만 완전한 자율성을 가지지 않음
          + Horizontal Agent
               o 다양한 문제를 다룰 수 있는 완전히 자율적인 시스템
               o Claude computer-use가 대표적인 사례로, 회사의 표준 소프트웨어를 사용하여 사용자의 지시에 따라 작업하며 인간과 유사한 방식으로 문제를 해결

  Vertical Workflow와 The Bitter Lesson의 연결

     * Demo Day에서 발표된 대부분의 제품이 Vertical Workflow 형태에 해당
          + 현재 모델의 신뢰도가 충분하지 않아 다른 접근 방식이 어려운 상황
          + 복잡한 문제도 Vertical Workflow로 제한하여 수용 가능한 성능을 구현하려는 경향
     * 엔지니어링 작업으로 이러한 솔루션을 개선할 수 있으나, 한계가 존재
          + 현재 모델로 해결할 수 없는 문제는 더 발전된 모델을 기다리는 것이 더 나은 전략
          + Leopold Aschenbrenner의 관찰: 더 나은 모델을 기다리는 시간이 엔지니어링 작업보다 짧을 가능성

  The Bitter Lesson과 현재 AI 제품의 관계

     * AI 연구자들은 “허용 가능한 성능”을 위해 지식 기반 솔루션을 엔지니어링하였으나, 결국 더 많은 계산 자원을 활용한 일반 솔루션이 이를 능가
     * 현재의 AI 제품 개발 방식은 이러한 패턴과 유사

  Bitter Lesson의 네 가지 관찰과 제약 유형의 적용

   Bitter Lesson에서 언급된 네 가지 주요 관찰은 AI 제품의 자율성과 특정성 제약에도 뚜렷하게 반영됨.
   이를 각각의 제약에 따라 설명하면 다음과 같음:
    1. 첫 번째 관찰: AI 연구자들은 지식을 에이전트에 통합하려 함

     * 자율성 제약:
          + 개발자는 자율적 에이전트를 실험하지만 신뢰성이 떨어짐
          + 대신 작업 단계를 워크플로 형태로 하드코딩하여 자신이 문제를 해결하는 방식과 동일한 절차를 따르도록 만듦
     * 특정성 제약:
          + 개발자는 일반적인 문서 분석 시스템을 만들려 하지만 신뢰성 문제로 어려움을 겪음
          + 대신 재무제표와 같은 특정 유형의 문서에 초점을 맞추고, 구체적인 메트릭과 검증 규칙을 하드코딩

    2. 두 번째 관찰: 단기적으로는 효과적이며 연구자에게 만족감을 줌

     * 자율성 제약:
          + 워크플로를 하드코딩하면 안정성이 증가함
     * 특정성 제약:
          + 좁은 범위의 문서와 메트릭만 처리하도록 전문화하면 정확도가 향상됨

    3. 세 번째 관찰: 장기적으로는 발전이 정체되며 더 나아가 방해가 됨

     * 자율성 제약:
          + 하드코딩된 워크플로는 새로운 상황을 다룰 수 없어서 부정확한 결과를 초래
     * 특정성 제약:
          + 특정 문제만 다룰 수 있는 시스템은 병합 문서나 실적 발표 분석과 같은 관련 작업을 처리하지 못함
          + 각각의 작업마다 별도의 특화 시스템이 필요

    4. 네 번째 관찰: 계산 자원의 확장을 기반으로 돌파구가 마련됨

     * 자율성 제약:
          + 새로운 모델은 동적으로 적합한 접근 방식을 찾아내고, 필요 시 오류를 수정하며 신뢰할 수 있는 자율적 에이전트를 가능하게 만듦
     * 특정성 제약:
          + 새로운 모델은 모든 비즈니스 문서를 포괄적으로 이해하며 관련 정보를 추출할 수 있어, 특화된 시스템이 더 이상 필요하지 않게 됨
     * 자율성이 필요한 문제에서는 더 자율적인 제품이 더 나은 성능을 발휘
     * 복잡하고 넓은 입력 공간을 다룰 때는 덜 특화된 제품이 더 나은 결과를 제공

  마무리: AI 스타트업과 The Bitter Lesson

     * 이 글은 AI에서 스타트업의 역할을 탐구하는 4부작 시리즈 중 첫 번째로, 도메인 지식을 활용한 AI 모델이 계산 자원을 활용한 모델에 의해 꾸준히 대체되는 역사적 패턴을 강조
     * 오늘날의 AI 제품은 이 패턴과 놀랍도록 유사한 모습을 보임
     * 현재 모델의 한계를 보완하기 위해 소프트웨어를 개발하는 것은, 특히 모델이 빠르게 발전하는 상황에서는 실패 가능성이 높은 전략
     * YC 파트너 Jarred의 지적: 초기 세대의 수직적 워크플로 LLM 앱들은 차세대 GPT 모델에 의해 대체됨
     * Sam Altman의 조언: 더 나은 모델 출시를 두려워하지 않고, 이를 기대할 수 있는 스타트업을 구축하는 것이 중요
     * 많은 AI 애플리케이션 레이어의 창업자들이 새로운 모델 출시를 기대하며 들떠 있으나, 이는 위험한 신호일 수 있음
          + 더 나은 모델이 출시될 경우, 현재의 경쟁 우위를 줄일 가능성이 큼
          + 특히, 더 어려운 문제를 더 효과적으로 해결할 수 있는 제품 성능 관점에서는 이러한 위험이 더욱 뚜렷
     * 다음 글에서는 시장 채택이라는 또 다른 차원을 탐구하고, 더 나은 성능이 반드시 시장에서의 성공을 보장하지 않음을 논의할 예정


챕터 2: 경쟁 우위가 없음(No Powers)

  tl;dr:

     * AI 역사에서 모델 한계를 도메인 지식으로 보완하려는 접근은 결국 계산 자원을 활용해 일반화된 접근을 택하는 방식에 밀린 사례가 많음
     * 수직적 AI(vertical AI)는 현재 모델의 한계를 보완하기 위해 특정 작업 흐름(워크플로)을 사전 정의해 정확도를 높이는 방식으로 시장에 먼저 진입함
     * 수평적 AI(horizontal AI)는 ChatGPT처럼 범용 모델을 활용하고 계속 발전하는 형태로, 모델이 개선될 때마다 여러 분야에서 더 뛰어난 성능을 보일 가능성임
     * 장기적으로 수평적 AI는 여러 제약을 두는 수직적 AI보다 높은 성능과 유연성을 보유해 우위를 점할 가능성임

  문제 난이도와 성능 곡선

     * Figure 1은 수직적 AI가 먼저 시장에 진입하지만, 모델이 개선된 수평적 AI가 결국 성능을 추월하는 단순 예시임
     * 문제 난이도가 높은 경우(Figure 2) 수직적 AI는 아예 충분한 성능에 도달하지 못하고, 수평적 AI가 개선되어서야 비로소 해결이 가능해짐
     * 현 시점에 수직적 AI가 적용 가능한 문제들은 상대적으로 ‘난이도가 낮은 문제’로, 이 범주에서는 수직적 AI가 선점 효과를 누릴 수 있지만 장기 경쟁력은 불확실함

  수평적 AI가 제공하는 ‘원격 협업자’ 개념

     * 향후 수평적 AI는 원격 근무자처럼 컴퓨터와 계정을 부여받고 필요한 데이터를 스스로 찾아 사용할 수 있는 형태로 발전할 가능성이 있음
     * ChatGPT 등 이미 많은 사용자가 익숙해진 UI가 점차적으로 강화되어 기업에서 빠르게 도입할 수 있는 여건이 갖춰질 수 있음
     * 수평적 AI는 모델이 개선될 때마다 다양한 기능을 즉시 흡수하기 때문에, 수직적 AI보다 경쟁 우위를 유지하기가 쉬움

  선행 사례: AcademicGPT와의 경험

     * GPT-3.5 시점에 긴 입력 한계를 극복하기 위해 AcademicGPT를 출시했지만, GPT-4가 긴 입력을 기본 제공하자 기존 솔루션은 빠르게 도태되었음
     * YC 파트너 Jared의 말처럼 ‘첫 번째 세대 LLM 앱은 다음 세대 모델에 대부분 밀렸음’
     * 여러 기능을 동시에 제공하는 수직적 AI도 결국 모델 성능이 발전하면 동일한 과정을 겪을 위험이 있음

  Helmer의 7 Powers 분석

     * 이 장에서는 Hamilton Helmer의 7가지 경쟁 우위(Switching Costs, Counter-Positioning, Scale Economies, Network Economies, Brand Power, Process Power, Cornered Resource)를 통해 수직적 AI가 수평적 AI와 경쟁할 수 있는가를 살펴봄
     * Switching Cost (전환 비용)
          + 사용자들이 특정 수직적 AI 솔루션의 UI나 워크플로에 익숙해졌어도, 수평적 AI는 ‘신규 직원을 채용하듯’ 간단히 온보딩하는 방식으로 적용 가능함
          + 이미 ChatGPT 등 수평적 AI 솔루션을 도입한 기업이 늘고 있어, 전환 과정이 어렵지 않을 가능성임
          + 가격 측면에서도 수평적 AI는 여러 수직적 솔루션을 통합할 수 있어 비용 절감 효과가 예상됨
     * Counter Positioning (역포지셔닝)
          + 수직적 AI는 특정 시장에 특화된 솔루션으로 맞춤형 가치를 제공할 수 있지만, 모델이 점차 개선되면 수평적 AI가 전반적으로 더 나은 성능을 보일 가능성임
          + 수직적 AI는 새로운 모델을 도입할 때마다 기존의 ‘제약’으로 인해 차별성을 잃거나, 제약을 해제하면 결국 수평적 모델과 유사해지는 딜레마를 겪음
     * Scale Economy (규모 경제)
          + 수직적 AI도 SaaS와 마찬가지로 규모에 따라 비용을 낮출 수 있지만, 수평적 AI 역시 다수 분야를 통합해 비용을 분산시킬 수 있는 장점이 있음
          + 대규모 R&D 투자를 통해 개발된 수평적 모델을 다양한 용도에 적용함으로써 비용 절감을 가속화할 수 있음
     * Network Economy (네트워크 효과)
          + 수직적 AI와 수평적 AI 모두 사용자 데이터를 바탕으로 개선 가능성은 있지만, 수평적 AI는 더 폭넓은 사용자 집단에서 피드백을 얻어 모델의 전반적 성능을 향상할 수 있는 장점이 큼
          + 다양한 분야에서 축적된 데이터를 활용해 모델 전반이 개선되므로, 수직적 AI가 감당하기 어려운 속도로 발전할 수 있음
     * Brand Power (브랜드 파워)
          + 브랜드 파워는 작은 스타트업 단계에서 얻기 어려운 우위임
          + OpenAI나 Google처럼 이미 브랜드 영향력이 큰 기업들은 예외지만, 대부분 수직적 AI 스타트업은 브랜드 파워를 무기로 삼기 어렵음
     * Process Power (프로세스 파워)
          + 프로세스 파워 역시 대규모 기업이 많은 시간에 걸쳐 다듬은 운영 체계를 통해 얻게 되는 우위임
          + 초기 스타트업 단계에서 이는 거의 해당되지 않는 범주임
     * Cornered Resource (독점적 자원)
          + 독점적 자원은 특정 데이터나 자원을 오직 한 회사가 보유하고, 해당 자원이 그 분야에서 반드시 필요한 경우에만 큰 경쟁 우위가 됨
          + 많은 AI 스타트업이 ‘독점 데이터’가 있다고 주장하지만, 실제로는 그 데이터가 완전히 독점적이지 않거나 그 데이터가 없어도 모델이 충분히 학습 가능한 경우가 많음
          + 예외적으로 진정한 독점 자원을 확보한 기업은 수평적 AI의 발전에도 불구하고 경쟁력을 유지할 가능성임

마무리

     * 결국, 수직적 AI가 선점 효과를 누리는 시나리오에서도 수평적 AI가 더 높은 성능을 갖추면 대부분의 수직적 AI는 유지하기 어려운 상황임
     * Helmer의 7 Powers 중 진정한 ‘Cornered Resource’를 확보한 경우에만 수직적 AI가 장기적인 모멘텀을 확보할 가능성임
     * AcademicGPT가 GPT-4 출시 후 빠르게 몰락한 사례처럼, 여러 기능을 보강한 수직적 AI도 모델이 개선되면 결국 비슷한 흐름을 맞이할 수 있음
     * 다음 장(3장)에서는 ‘원격 협업자’ 형태의 수평적 AI가 언제, 어떻게 현실화될지 예측하고, 이를 가로막는 기술, 규제, 신뢰, 경제적 장벽 등에 대해 구체적으로 살펴볼 예정임


챕터 3: 역사의 발자취(A Footnote in History)

     * Anthropic의 CEO가 ""가상 협업자(virtual collaborator)"" 개념을 설명한 인터뷰를 공개함
     * 이는 필자가 이 시리즈에서 ""수평적 AI 제품(horizontal AI product)""이라 부른 개념과 유사함
     * OpenAI는 곧 ""Operator""를 발표할 것으로 예상되며, 유출된 벤치마크에 따르면 Claude보다 성능이 크게 앞섬 (OSWorld 벤치마크에서 Claude는 22%, Operator는 38%)
     * 이러한 성능 향상은 예상된 범위 내이며, 필자는 3개월 전의 예측을 그대로 유지함
     * 이전 챕터에서 수직적 AI 애플리케이션이 경쟁력을 유지하기 어려운 이유를 설명함
          + 일반적 AI 솔루션과 성능 차이가 줄어듦
          + 수평적 AI 제품이 경쟁력을 갖추면, 수직적 AI 제품이 방어할 방법이 거의 없음
     * 중요한 질문: ""수직적 AI에서 수평적 AI로의 전환이 언제 발생할 것인가?""
          + 10년 후라면 지금 수직적 AI를 개발하는 것이 의미 있을 수도 있음
          + 하지만 1~2년 내에 변화가 온다면, 완전히 다른 전략이 필요함
     * 모든 산업에서 동시에 수직적 AI에서 수평적 AI로 전환이 일어나지는 않음
     * 그러나 현재 대부분의 AI 스타트업이 집중하는 시장은 상대적으로 단순한 분야이므로, 주요 산업에서는 유사한 시기에 변화가 발생할 것으로 예상됨
     * 2027년까지는 대부분의 산업에서 수직적 AI 제품이 살아남기 어려울 것으로 전망됨
     * ""채택(adoption)""이란 사용자가 새로운 문제를 해결하거나 기존 문제의 해결 방법을 변경할 때 어떤 제품을 선택하는지를 의미함
     * 다음 요소는 고려되지 않음
          + 시장 점유율: 기존 계약 등이 영향을 미칠 수 있음
          + 절대적 크기: AI가 새로운 활용 사례를 열면서 시장이 확장될 것이지만, 본 분석에서는 상대적 변화만을 고려함
          + 잠재적 가치: 현재 시점에서 사람들이 어떤 솔루션을 선택하는지를 평가하며, 미래의 개선 가능성은 포함되지 않음
     * 예를 들어, A에서 B로 흐름이 이동한다면, 과거에는 A가 선호되었지만 이제는 B가 더 나은 선택지로 여겨짐

  수직적/수평적 AI 및 워크플로우/에이전트 개념

     * ""수직적(vertical) AI""와 ""수평적(horizontal) AI""는 서로 다른 AI 제품 유형을 의미함
     * ""워크플로우(workflow)""와 ""에이전트(agent)""도 AI 제품을 분류하는 개념임
     * 본 문서에서는 수평적 AI 제품 내에서 워크플로우와 에이전트 개념을 하나로 묶어 설명
          + 같은 회사가 두 가지 기능을 모두 포함하는 제품을 개발할 가능성이 높음
          + 예를 들어, ChatGPT가 에이전트 기능을 추가하면서도 기존 워크플로우 기반을 유지할 수 있음

  과거

     * (1) Pre-ChatGPT 시점은 전통적 소프트웨어가 시장을 지배하던 상황
     * (2) ChatGPT 출시로 인해 최초의 의미 있는 수평적 AI 제품이 등장
     * (3) GPT-3.5 API 등장 이후, 처음으로 AI에 특화된 여러 수직적 제품이 출시되기 시작

  올해

     * (4) 2025년에 모델 성능이 실용적인 에이전트로 활용될 만큼 안정화될 것이라는 예상
          + 지금까지는 연구 프로젝트나 제한적인 시험 용도로만 사용되던 에이전트가 본격적으로 도입될 전망
          + 기존 수직적 워크플로우 제품들도 AI 에이전트 형태로 전환될 가능성
     * (5) 에이전트가 등장해도 2025년까지는 수직적 워크플로우가 지배적인 위치를 유지할 것으로 예상
          + 이미 도입된 툴을 바꾸기 꺼리는 사용자 습관과, 그동안 구축해놓은 엔지니어링 자산을 계속 활용하려는 개발자의 관성이 작용
     * (6) ChatGPT, Claude, Gemini 같은 주요 수평적 AI 제품들이 기능을 확장하며 더 많은 수직적 분야를 커버할 것으로 전망
          + 수직적 AI 제품의 기존 특화 기능이 수평적 AI 제품에 빠르게 흡수될 가능성
          + 이미 ChatGPT가 데스크톱 앱과 연동을 시작한 상황

  가까운 미래

     * (7) 수평적 AI 에이전트와 인간 노동자의 능력 격차가 점점 좁혀질 것으로 예상
          + 전문가 수준에 이르지는 못하더라도, 일반적인 사무 작업을 상당히 자동화할 만한 성능을 확보할 것으로 관측
          + 이에 따라 수직적 AI 솔루션의 존재 이유가 줄어들 수 있음
          + 구체적인 예시:
               o 개인 사용자는 세금 신고나 취업 준비 같은 복잡 업무를 수평적 에이전트에게 맡길 가능성
               o 기업은 주니어급 인력을 상당 부분 대체하거나 감축할 가능성
               o 한 사람만으로도 유니콘 가치를 창출하는 사례가 등장할 가능성
     * (8) 전통적 소프트웨어는 에이전트가 활용할 수 있는 인터페이스로서 가치를 계속 유지할 것으로 전망
          + 에이전트가 모든 소프트웨어를 직접 새로 만드는 것보다 기존 소프트웨어를 활용하는 편이 비용 효율적일 가능성
          + 특히 범용적·수평적 소프트웨어가 살아남을 확률이 높다는 분석
     * (9) 생존하는 수직적 AI 제품은 2장에서 언급된 방어적 자원(독점 데이터, 특허 등)을 확보한 소수일 것으로 예상
          + 이들은 그 자원을 높은 가치로 매각할 수도 있을 가능성

  2024 - 발전이 멈췄는가?

     * 2024년에 AI 모델의 정체가 있었다는 주장은 설득력이 낮다는 평가
          + o3 출시 이전부터 GPT-4, Claude, Open Weight 모델 등 다양한 분야에서 모델 성능이 꾸준히 개선되어온 양상
          + ARC-AGI, GPQA Diamond 등에서의 벤치마크 점수가 급진적으로 향상되어 온 흐름
     * Anthropic은 Claude 2에서 Claude 3, 그리고 Claude 3.5 Sonnet으로 빠르게 진화했고, 공개되지 않은 업그레이드를 사내에서 활용했다는 추측이 제기됨
     * 이로 인해 2024년이 AI 모델 개선이 멈춘 해라는 주장에는 근거가 부족하다는 견해

  잠재적 장애물

     * Model Stagnation: 2024년에는 정체가 없었지만 2025년 이후 모델 발전이 멈출 수 있다는 우려
          + Ilya Sutskever가 NeurIPS에서 전통적 사전학습(Pre-training) 방식의 한계를 언급했으나, 시험 시점에서의 연산(Test-time compute) 등 다른 길이 존재함을 동시에 제안
          + 주요 AI 연구 기관과 기업들은 여전히 거대 컴퓨팅 자원에 적극 투자 중
     * Regulation: 예상 밖의 규제가 등장하면 AI 발전에 제약이 생길 가능성
     * Trust Barriers: 에이전트의 안정성과 신뢰성에 대한 사용자 우려가 존재
          + 역사적으로 엘리베이터 자동화에 대한 두려움이 결국 사라진 전례를 들어, 시간이 지나면 극복될 것이라는 관측
     * AI Labs Hesitate: Anthropic이나 OpenAI 등이 실제 기술적 역량이 있어도 사용자 상호작용을 일부 제한적으로 두는 사례가 있을 수 있음
     * Expensive Inference: o3 사례처럼 고성능 추론이 매우 높은 비용을 요구할 수 있음
          + 하지만 추론 비용이 시간이 지날수록 낮아지고 있고, 에이전트가 모든 작업에 고성능 추론을 동일하게 적용하지 않을 가능성도 큼
     * 위와 같은 요소들을 종합했을 때, 기술 발전 예측에는 어려움이 따르지만 수직적 AI 스타트업에는 시간이 많지 않을 것으로 전망
     * AI 모델이 고도화됨에 따라 기존 엔지니어링 기반의 가치가 빠르게 소멸될 수 있다는 U자형 가치 그래프가 제시됨

  참고 사항

     * o3에서 보여준 시험 시점 연산(Test-time compute) 확장은, 이미 기존 연구를 통해 예견되었던 결과라는 설명
     * AlphaZero 사례에서 검증된 것처럼, 검증 가능한 환경에선 성능이 빠르게 초인적인 수준에 도달할 수 있다는 통찰
     * o3가 코딩·수학 같은 영역에서는 뛰어나지만, 창의적 글쓰기 등 다른 영역에서는 o1과 큰 차이가 없다는 분석
     * 향후 수직적 AI를 새로 개발하기보다는, 더 광범위하거나 독점적인 자원을 다루는 다른 방향성이 창업자들에게 더 유리할 수 있다는 시사점


챕터 4: 당신은 마법사입니다(You’re a wizard Harry)

  창업자는 마법사와 같음

     * 무에서 유를 창조하는 능력을 지님
     * 새로운 회사를 시작하려면 참신한 사고가 필요함
     * 폴 그레이엄(PG)의 말: ""아이디어는 정확할 뿐만 아니라 참신해야 한다. 모두가 좋은 생각이라고 동의하는 일을 시작해서는 안 된다.""
     * 많은 창업자들이 동료들의 인상적인 수익 성장에 눈이 멀어 독립적인 사고를 잃고 있음
     * 모두가 같은 일을 하고 그것이 효과가 있는 것처럼 보일 때, 독립적으로 생각하기 어려움
     * 필자는 독립적으로 생각하려 노력하며, 이러한 아이디어들이 나쁘게 들리길 바람

  수평적 에이전트의 미래와 경쟁

     * AI 애플리케이션 계층을 지배할 수평적 에이전트는 AI 연구소에서 개발될 것으로 예상됨
     * 모델 성능이 달라져 단일 승자가 나올 수도 있지만, Anthropic, OpenAI, GDM, xAI 간의 치열한 경쟁이 더 가능성이 높음
     * 이는 단기적으로 최종 사용자에게 이익이 되는 가격 경쟁을 야기함
     * AI 연구소가 단기적으로는 많은 금전적 가치를 포착하지 못하더라도, 여전히 매우 강력한 위치를 차지할 것으로 예상됨
     * 따라서 창업자들은 자신의 스타트업을 이러한 연구소와의 관계 맥락에서 생각하는 것이 합리적임

  고객으로서의 접근

     * 챕터 2에서 논의한 바와 같이, LLM API를 사용하는 AI 수직 제품을 구축하는 것은 가능하지만, 이는 중요한 자원에 대한 독점적 접근이 있을 때만 가능함
     * AI 수직 제품을 구축하려면, 그러한 자원을 찾는 데 엄청난 노력을 기울여야 함

  경쟁자로서의 접근

     * 수평적 에이전트가 미래라면, 왜 그것을 구축하지 않는가? 세 가지 접근 방식을 검토함
     * 시장 선점
          + AI 연구소는 모델이 충분히 신뢰할 수 있어 최소한의 엔지니어링 노력으로 수평적 에이전트를 만들 수 있을 때만 수직적 워크플로우와 진지하게 경쟁할 것임
          + 이전 모델에 엔지니어링 노력을 적용하여 이론적으로 연구소보다 먼저 시장에 진입할 수 있지만, 이는 확실하지 않음
          + Leopold Aschenbrenner는 이 노력이 다음 모델을 구축하는 것보다 더 오래 걸릴 수 있다고 생각함: ""원격 근로자가 많은 작업을 자동화할 수 있을 때까지 시간이 걸릴 수 있으며, 그 동안 중간 모델은 아직 완전히 활용되고 통합되지 않을 수 있음""
          + 누가 먼저 시장에 진입하든, 이 우위는 오래 지속되지 않을 것으로 예상됨
     * 에이전트 API 래퍼
          + 룸메이트가 ""세상에 UI 기술을 가진 사람이 없나요?""라고 물었음
          + 이는 두 가지 문제를 시사함: 1) API 비용으로 인해 마진이 지속 불가능함, 2) 연구소는 최고의 모델을 공개하지 않음 (ChatGPT는 검색, 웹 브라우징 등에 독점 모델을 사용함)
          + 현재 GPT API를 사용하여 ChatGPT와 직접 경쟁하는 사람은 없으며, 이 패턴이 수평적 에이전트에서도 반복될 것으로 예상됨
     * 오픈 소스 모델
          + 오픈 소스 모델은 또 다른 경로를 제공할 수 있음
          + Perplexity는 연구소와 수평적 제품에서 경쟁할 수 있음을 보여줌
          + 그러나 오픈 소스 모델은 단순한 벤치마크에서는 잘 수행되지만, 복잡한 에이전트 작업에서는 어려움을 겪음
          + Llama-3.1-405b는 MLE-bench에서 최첨단 모델보다 상당히 뒤처짐
          + Andon Labs에서 이러한 유형의 벤치마크를 전문으로 하며, 이는 우리가 보는 것과 일치함
          + Deepseek V3와 R1이 매우 인상적인 결과로 출시되었지만, o3도 마찬가지이며, Anthropic은 내부적으로 더 나은 버전을 가지고 있는 것으로 알려짐
          + 오픈 소스 모델이 최첨단에 가까워질 수는 있지만, 이를 능가할 것으로는 의심스러움
          + 그러나 수평적 게임에서 경쟁하기에 충분할 수 있음
          + 추론 비용은 여전히 매우 높을 것임

  공급업체로서의 접근

     * AI 연구소가 정말로 이렇게 강력해진다면, 그들에게 공급업체가 되는 것은 훌륭한 위치임
     * 그들은 분명히 많은 컴퓨팅 파워와 전력이 필요할 것임
     * Leo의 분석이 맞다면, 예상보다 더 많이 필요할 수 있음
     * 이 기회는 산업 전문 지식을 필요로 하며, 이는 현재 AI 애플리케이션 계층에 있는 창업자들에게는 자연스럽지 않을 수 있음
     * 그러나 당신이 마법사라는 것을 기억하라
     * 연구소는 또한 제3자로부터 데이터를 구매함
     * Scale AI는 이것이 훌륭한 비즈니스임을 증명하고 있음
     * 그러나 AI 연구소가 ""자기 학습""을 작동시킬 수 있을지는 의문임
     * AlphaZero는 외부 데이터 없이 훈련되었으며, 이는 미래 AI 모델의 성배로 여겨짐
     * 그들이 자기 학습을 작동시키지 못한다면, 대안은 여러 후속 훈련 데이터셋을 결합하는 것일 것임
     * 이 세계에서는 데이터를 판매하는 것이 아마도 좋은 선택일 것임

  생태계 기여자로서의 접근

     * AI 연구소와의 관계에서 마지막으로 검토할 만한 것은 생태계 기여자가 되는 것임
     * 이는 수평적 에이전트를 돕는 도구를 구축하는 것을 의미하지만, 중요한 것은 에이전트 자체와 분리되어야 함
     * 챕터 3에서 보여주었듯이, 에이전트는 효율적인 인터페이스가 필요하기 때문에 전통적인 소프트웨어는 지속될 것임
     * 에이전트가 자체 소프트웨어를 작성할 수 있지만, 추론 비용이 이를 비실용적으로 만들 수 있음
     * 그러나 생태계 플레이어는 상품화될 위험이 있으며, 대부분의 가치는 다른 곳에서 포착될 수 있음
     * 이는 수평적 에이전트를 실행하는 데 드는 추론 비용(inference cost) 이 얼마나 높은지에 따라 달라질 것임
          + 추론 비용이 낮다면, 에이전트가 스스로 필요한 소프트웨어를 생성하는 것이 더 일반적일 것임

  만약 AI 수평적 에이전트가 늦게 도래한다면?

     * 시간표(timeline) 는 매우 중요함
          + 만약 수평적 에이전트가 10년 뒤에야 경쟁력을 갖춘다면, 지금 수직적 AI 워크플로우를 구축하는 것은 훌륭한 아이디어가 될 것임
          + 이 정도 시간이면 충분히 크고 견고한 회사를 만들 수 있음
     * 그러나 AI 연구소의 발전 속도를 고려하면 10년은 비현실적
          + 그렇다면 4년 후는 어떨까?
          + 4년은 대기업을 만들기에는 부족할 수도 있지만, 충분한 반복(iteration) 기회를 제공함
          + AI 애플리케이션 계층에서 시작하는 것이 이후 벤더나 생태계 플레이어로 전환하는 데 유리할 수도 있음

  에필로그: YC(Y Combinator)의 실수인가?

     * 겉으로 보기엔 YC가 잘못된 선택을 하는 것처럼 보일 수도 있음
          + 현재 YC는 AI 수직적 제품에 대부분의 투자를 집중하고 있음
          + 하지만 이 시장이 곧 사라질 가능성이 큼
     * 그러나 필자는 VC(벤처 캐피털)에 대한 전문성이 부족하므로 확실한 결론을 내릴 수 없음
          + 그저 혼란스러워하며 고민을 공유하는 것일 뿐
     * YC는 비교적 중립적인 투자 전략을 취한다고 주장함
          + 똑똑한 사람들에게 투자하고, 그들이 최선의 아이디어를 찾길 바람
          + 이는 훌륭한 전략이며, 수백 명의 창업자가 14명의 YC 파트너보다 미래를 더 잘 예측할 수도 있음
     * 그러나 필자는 YC의 배치(batch) 시스템이 단기적 사고를 유도할 가능성이 있다고 우려함
          + YC에서는 주간 목표를 설정하는 것이 매우 중요하며, 큰 그룹 내에서 진행되는 것이 동기부여에 좋음
          + 하지만 아이디어의 다양성이 충분하지 않으면, 단기적 사고를 유도할 수도 있음
          + AI 수직적 제품을 만들면 빠르게 5,000달러 MRR을 달성할 수 있음
          + 그러나 이것이 지속 가능한 비즈니스를 구축하는 방법일까?
          + 필자가 지금 YC 배치에 있었다면, 아마도 AI 수직적 제품을 만들고 싶은 유혹을 느꼈을 것
          + 게다가 YC의 팟캐스트 ""The Light Cone"" 에서는 AI 수직적 제품을 옹호하는 내용이 많음

   Vertical AI vs Horizontal AI 구분과 설명이 흥미롭네요
"
"https://news.hada.io/topic?id=19089","Show GN: Yoyak: LLM 기반의 간단한 웹페이지 요약 CLI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: Yoyak: LLM 기반의 간단한 웹페이지 요약 CLI

   반나절 정도 투자하여 LLM 기반의 간단한 웹페이지 요약 도구를 CLI 앱으로 만들어서 공개해 봅니다. 사용한 기술은 Deno, LangChain.js, cheer-reader (Readability.js의 대체품) 정도인 것 같네요.

   설치하려면 Deno가 필요합니다:
deno install --global --allow-net --allow-env jsr:@hongminhee/yoyak/cli

   맨 처음 사용하기 전에 사용할 모델과 API 키를 설정해야 합니다:
yoyak set-model gemini-2.0-flash-exp  # 표준 입력으로 API 키 물어봄

   그 뒤에는 yoyak summary 명령 뒤에 요약하고 싶은 웹페이지 URL을 붙이면 됩니다.
yoyak summary https://github.com/dahlia/yoyak

   번역까지 하고 싶으면 -l 옵션 뒤에 ISO 639-1 형식의 언어 코드(예: 한국어 → ko)를 주면 됩니다:
yoyak summary -l ko https://github.com/dahlia/yoyak

   요약 없이 스크랩만 하고 싶으면 yoyak scrape 명령을 쓰면 됩니다 (Markdown 형식으로 출력). 요약 없이 번역만 하고 싶으면 yoyak scrape 명령에 -l 옵션을 주면 되고요.

   별 기능 없이 요약 및 번역 기능에만 집중했습니다. 유용하게 쓰셨으면 좋겠습니다.

   안녕하세요 좋은 기능 만들어주셔서 감사합니다.
   가져오는 문자열을 좀 가공하고 싶은데, (가독성을 좋게하기위해 줄바꿈을 한다거나)
   혹시 방법이 있을까요? (파일로 저장하거나 인코딩을 지정하면 계속 문자열이 깨져서 보여지네요)

   아 해결했습니다 감사합니다

   gemini-2.0-pro-exp-02-05
   gemini-2.0-flash-thinking-exp-01-21
   gemini-2.0-flash-lite-preview-02-05

   정말정말 시간이 괜찮으실때 다음 버전에서는 추가하면 더 좋을 것 같아요.

   추가했습니다. 아직 0.2.0 버전을 릴리스하진 않았지만 0.2.0-dev.5+a6daf279 버전을 설치하시면 미리 사용해 보실 수 있습니다.
deno install --global --allow-net --allow-env jsr:@hongminhee/yoyak@0.2.0-dev.5+a6daf279/cli

   멋집니다. 잘 동작합니다.

   CLI로 만들어두니 정말 좋은 것 같네요.

   GOOD JOB 👍

   멋지네요! 👍🏻

   번역과 함께 요약할 수 있어 유용하네요! 잘쓰겠습니다.
   혹시 로컬 모델이나 셀프 호스팅하는 모델을 호출하기 위한 커스텀 endpoint 옵션도 제공될 수 있을까요?

   조만간 추가해 보도록 하겠습니다! 감사합니다.
"
"https://news.hada.io/topic?id=19099","워너 브라더스 디스커버리의 구작 영화 YouTube 공개 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   워너 브라더스 디스커버리의 구작 영화 YouTube 공개 이유

     * 새로운 DVD 할인 코너
          + 최근 Warner Bros. Discovery가 YouTube에 자사의 오래된 영화를 무료로 공개하고 있음. 이는 영화 제작사로서의 전통적인 역할과는 다소 상반되는 행보임.
          + 이 영화들은 YouTube Movies 서비스가 아닌, Warner Bros. Discovery의 자체 채널을 통해 공개되고 있으며, 이는 상업적으로 가치가 소진된 영화로 간주되는 듯함.
          + 공개된 영화 중 일부는 Waiting for Guffman, Michael Collins, _Crossing Delancey_와 같은 좋은 작품도 있지만, _The 11th Hour_와 같은 덜 알려진 작품도 포함되어 있음.
     * Warner Bros.의 전략적 선택
          + Warner Bros.는 자사의 스트리밍 서비스 Max나 Turner Classic Movies 같은 플랫폼을 통해서도 이러한 콘텐츠를 제공할 수 있음에도 불구하고, YouTube를 선택한 이유는 불분명함.
          + 이는 Warner Bros.가 자사의 덜 주목받는 콘텐츠에 적절한 집을 제공하지 못했음을 시사함.
          + 이러한 결정은 과거와 현재의 창작 팀에게 불리하게 작용할 수 있으며, 이는 자사의 아카이브를 단순히 스트리밍 서비스가 아닌 YouTube에 공개하는 것과 관련이 있음.
     * 디지털 권리 관리와의 관계
          + 과거에는 영화 스튜디오들이 디지털 권리 관리를 통해 콘텐츠를 보호해야 한다고 주장했으나, 이번 결정은 그와 상반되는 방향임.
          + 이는 YouTube가 1980년대 이전에 제작된 콘텐츠를 공개하는 최적의 플랫폼으로 자리잡고 있음을 보여줌.
          + Sony도 유사한 방식으로 자사의 덜 알려진 영화를 YouTube에 공개하고 있음.
     * 결론
          + Warner Bros. Discovery의 이번 결정은 스트리밍 혁명이 모든 것을 해결해주지 않는다는 것을 보여주는 사례일 수 있음.
          + _Waiting for Guffman_은 여전히 좋은 작품으로, YouTube에서 무료로 감상할 수 있음.

        Hacker News 의견

     * 오래된 영화들이 다양한 무료 광고 지원 스트리밍 플랫폼에서 제공되어 왔음. YouTube도 광고를 보여주고 별도의 앱 설치가 필요 없다는 점에서 저작권자들이 이를 인식하는 데 시간이 걸린 것에 놀라움이 있음
          + 지역별 저작권 계약이 복잡하여 마지막 반대자가 은퇴하거나 다른 일로 이동할 때까지 기다린 것일 수 있음
          + ""Waiting for Guffman""은 미국 외 지역에서 처음으로 공개되어 유럽 팬들에게 기대감을 줌
          + ""The Mission""은 비평가들에게 호평받은 영화로, 칸 영화제에서 황금종려상을 수상하고 아카데미 시상식에서 여러 부문에 후보로 올랐음
          + 음악은 Ennio Morricone가 작곡하였음
     * 넷플릭스 초기 스트리밍 시절, 스튜디오들이 오래된 콘텐츠를 넷플릭스에 제공하여 수익을 얻으려 했던 시기가 있었음
          + 이후 주식 시장이 스트리밍 서비스의 가치를 부풀리면서 스튜디오들이 자체 서비스를 시작하여 시장이 분열됨
          + 현재는 여러 스트리밍 서비스가 존재하지만, 소비자들이 여러 서비스를 구독하지 않아 콘텐츠 접근이 어려워짐
     * YouTube에서 영화의 수익화를 통해 호스팅이나 발견에 대한 걱정이 줄어듦
          + 모든 영화가 포함된 재생 목록이 제공되어 검색이 용이함
     * 1980년대 이전의 영화는 YouTube에 올려져야 하며, 이는 쉬운 수익 창출 방법임
          + YouTube에 진정한 경쟁자가 없는 것이 아쉬움
     * Peroscope Films는 공공 도메인 영상을 사용하여 저작권을 주장하려 했으나, 논리와 이유로 그들의 주장을 철회하게 함
          + YouTube 서비스 약관을 통해 보호하려는 시도가 있었음
     * Zaslav 시대의 WB는 세금 공제나 계약 이행을 위해 YouTube에 영화를 올리는 것으로 보임
          + YouTube에 영화를 올려 수익을 얻으면서도 권리를 유지할 수 있음
          + YouTube 통계를 통해 영화의 수요를 파악하고 미래 투자나 라이선스 계약에 활용할 수 있음
"
"https://news.hada.io/topic?id=19080","Beej의 Git 안내서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Beej의 Git 안내서

     * 소개
          + Beej's Guide to Git은 Git 사용에 대한 가이드를 제공하는 문서임.
          + 이 가이드는 오류가 있을 수 있으며, 독자들의 피드백을 환영함.
     * 독자를 위한 자료
          + 다양한 형식의 HTML 및 PDF 문서 제공
               o HTML: 일반, 와이드스크린, 단일 페이지 형식
               o PDF: US Letter 및 A4 크기, 컬러 및 흑백, 단면 및 양면 인쇄 옵션
     * 번역자 및 작가를 위한 자료
          + GitHub에서 전체 문서를 클론하여 README를 따를 수 있음.
     * 연락처
          + Beej에게 이메일로 연락 가능: beej@beej.us

        Hacker News 의견

     * Beej의 네트워크 프로그래밍 가이드와 Unix IPC 가이드는 접근성이 좋고 깊이가 있어 프로그래머로서 큰 영향을 받았음
     * Git의 'git switch' 명령어를 몰랐고, 'git checkout'이 구식이라는 사실에 놀라움을 느낌
          + 이 가이드는 Git을 배우는 데 매우 유용하며, 자주 묻는 질문들을 잘 다루고 있음
          + 첫 번째 병합 충돌에 겁을 먹고 우회 방법을 사용했던 기억이 있음
     * Beej의 가이드는 보통 포괄적이지만, Git의 복잡한 부분은 이해하기 어려웠음
          + Jujitsu는 더 간결한 가이드가 될 수 있을 것이라고 생각함
     * Git 사용법을 설명하는 30개 이상의 파트로 구성된 가이드를 만들 수 있다는 점에서 Git이 본질을 놓친 것 같음
     * 협업 섹션에서 기능 브랜치에 대한 언급이 없으며, 이는 일반적인 작업 방식임
          + GitHub 풀 리퀘스트를 위한 브랜치 재사용에 대한 논의가 필요함
     * Git 사용에 익숙하지만 Jujutsu로 전환을 고려 중임
          + jj는 Git과 호환되며 팀원들은 Git을 계속 사용할 수 있음
     * 직장에서 Git 데이터 모델 소개 강의를 정기적으로 진행하며, .git 디렉토리를 탐색하여 기본 데이터 구조를 설명함
          + 새로운 직원들에게 Git 요리책을 제공하지만 대부분은 명령어를 이해하지 못하고 따름
          + 강의를 수강한 사람들은 Git의 실제 작동 방식을 이해하게 됨
"https://news.hada.io/topic?id=19103","Tabler 1.0.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Tabler 1.0.0 릴리즈
          + 명령어는 구글링으로 쉽게 찾을 수 있으며, 올바른 정신 모델이 중요함

     * 네트워킹 프로그래밍 가이드는 잘 쓰여졌고, 유익하며, 읽는 재미도 있음
     * 다크 테마 지원. 모든 컴포넌트에 일관된 스타일과 가독성을 제공하며 라이트/다크 모드 간 매끄러운 전환 보장
          + HTML 페이지를 EPUB으로 변환하는 방법을 찾고 있음
     * 3학년 학부 과정에 적합한 자료를 찾고 있었으나, 이 가이드는 너무 방대하여 학생들이 읽지 않을 것 같음
          + 적절한 부분을 모아 새로운 자료를 만들 계획임
"
     * 다양한 새로운 페이지 추가로 기능이 풍부한 애플리케이션을 빠르게 구성할 수 있는 기반 마련
          + Chat, Cookie Banner, FAQ, Job Listing 등 여러 신규 페이지 추가
          + Logs, Page Loader, Photogrid, Settings, Tasks 등 세부 기능 페이지도 함께 추가
     * 더욱 유연한 새로운 레이아웃들
          + Boxed Layout: 화면 중앙에 컨테이너를 둬 깔끔한 느낌을 주는 레이아웃
          + Sidebar Layout: 직관적인 사이드바 네비게이션이 필요한 애플리케이션에 적합
          + Fluid Layout: 대시보드처럼 데이터가 많은 화면에서 활용하기 좋은 전폭형 레이아웃
          + RTL 지원: 오른쪽에서 왼쪽으로 읽는 언어 사용자도 고려해 접근성을 높임
     * 강화된 시각 요소: 일러스트, 아이콘, 이메일 템플릿
          + Tabler Illustrations 75종 이상이 추가되어 디자인 품질이 한층 개선됨
          + 5800개 이상의 아이콘을 포함하여 맞춤형 UI 구성이 가능함
          + 80종 이메일 템플릿으로 사용자와의 커뮤니케이션을 더 효율적으로 지원함
     * 향상된 워크플로우: Eleventy 사용
          + 기존 Jekyll에서 Eleventy로 전환하여 더 빠른 빌드 타임과 성능을 제공
          + 간소화된 개발 경험으로 문제 해결보다 애플리케이션 구성에 집중 가능

   tabler - 오픈소스 HTML 대시보드 UI 킷
   무려 2년 반 전에 긱뉴스에 소개했었는데, 이제 1.0.0 출시네요.

   사내 메인 UI로 사용중인데 bootstrap기반에 익숙하신분은 추천합니다
"
"https://news.hada.io/topic?id=19057","DeepSeek, 유럽 기술 기업이 글로벌 AI 경쟁에서 따라잡을 기회를 제공하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DeepSeek, 유럽 기술 기업이 글로벌 AI 경쟁에서 따라잡을 기회를 제공하다

     * 여러 기업이 OpenAI의 ChatGPT 대신 DeepSeek 모델로 전환해 비용을 절감하고 있음
     * DeepSeek의 등장이 AI 분야에 변화를 일으키고 있으며, 일부 경영진들은 이로 인해 전체적인 가격 인하와 모델 개선 경쟁이 촉진될 것이라 봄
     * 독일의 스타트업 Novo AI 대표인 Hemanth Mandapati는 불과 몇 분 만에 ChatGPT 기반에서 DeepSeek로 이전할 수 있었다고 밝힘
     * DeepSeek 사용 시 비용이 대폭 낮아지며, 실제 사용자 경험에서 큰 차이가 없다는 피드백이 존재함
     * 유럽의 스타트업들은 상대적으로 적은 자금 조달 문제로 인해 미국 기업 대비 AI 채택 속도가 더뎠으나, DeepSeek의 가격 경쟁력이 큰 기회로 작용할 것이라는 기대가 있음
     * NetMind.AI, Novo AI 등 초기 도입 기업 경영진들은 DeepSeek이 AI를 대중화(보편화)하고, 대형 IT 기업들과 경쟁할 수 있는 발판을 마련해 줄 것으로 전망함
     * 업계 추정치에 따르면, DeepSeek는 OpenAI 대비 20~40배 저렴한 가격으로 모델 사용을 제공하고 있음
     * 그러나 일부 국가 규제 당국에서는 DeepSeek가 OpenAI의 데이터를 베꼈는지 혹은 특정 정치·사회 이슈를 검열하는지 여부를 조사 중임
     * 벤처캐피털 회사 Northzone의 파트너 Sanjot Malhi는 DeepSeek의 비즈니스적 성공 여부는 불확실하나, 구조적으로 큰 영향을 미칠 것으로 예측함

WAKE-UP CALL

     * 2024년 미국 벤처캐피털 투자금 중 약 1,000억 달러가 AI에 투입된 데 비해, 유럽에는 약 158억 달러만 투자된 것으로 보고됨
     * 미국 대통령 Donald Trump는 2025년 초, 500억 달러 규모의 AI 프로젝트 Stargate를 발표했고, 이는 OpenAI, SoftBank, Oracle 등이 참여하는 합작 투자임
     * 유럽 내 AI 투자 규모는 훨씬 작지만, 프랑스의 Mistral 등 일부 업체가 주목받고 있음
     * 중국의 DeepSeek는 최근 발표한 보고서에서, 자사의 최신 모델 DeepSeek-V3 훈련 비용이 Nvidia H800 칩을 활용해 600만 달러 이하였다고 주장해 관심을 끌었음
     * 이후 DeepSeek는 Apple App Store에서 생산성 분야 1위를 차지해 업계에 큰 반향을 일으키고 있음
     * Axelera AI의 CEO Fabrizio Del Maffeo는 DeepSeek 사례가 ‘큰 모델만이 정답이 아니다’라는 점을 보여주며, 전체 산업에 자극이 될 수 있다고 언급함
     * 일부 전문가는 DeepSeek가 주장하는 훈련 비용 수치에 의문을 제기하지만, 일반적으로 미국 기반 모델 대비 비용이 낮다는 데에는 공감대가 형성됨
     * 덴마크의 Empatik AI CEO Ulrik R-T는 DeepSeek 덕분에 적은 예산으로도 목표를 실현할 가능성이 커졌다고 평가함

비용 vs 안전

     * 가격 경쟁이 이미 시작된 것으로 보이며, Microsoft는 최근 Copilot 사용자에게 OpenAI의 o1 모델을 무료로 제공하기 시작함
     * 투자사 Scale Capital의 Joachim Schelde는 AI 가격이 전반적으로 하락하면서, 투명성이 높은 오픈소스 모델이나 DeepSeek 같은 대안을 찾는 움직임이 가속될 것으로 전망함
     * 핀란드의 Nokia, 독일의 SAP 등 대기업들은 전환에 신중하며, 비용 외에도 보안 인증·소프트웨어 생태계 연동 여부 등을 종합적으로 고려하고 있음
     * 영국의 Synthesia 기업 홍보 책임자인 Alexandru Voica는 기업 관점에서 가격 이외에 보안·인증 프레임워크 및 통합 환경 등이 더 중요하다고 언급함

   Deepseek 가격이 너무 매력적이라 발작적으로 반응하는 거 같네요. API 가격만 보면 이건 너무 차이가 나서 답이 없을 정도.

   많은 이들이 소스 코드가 공개된 것만으로 전면 신뢰를 하는데, 소스 코드가 공개된 것과 학습데이터와 훈련된 데이터의 신뢰성은 아무 상관이 없음. 그리고 비용 측정 방법의 적절성과도 아무런 상관이 없음

        Hacker News 의견

     * deepseek-r1:8b와 deepseek-r1:32b를 사용하여 Verilog 코드를 생성하려 했으나, 기대에 미치지 못하는 결과를 얻음. 모듈 인터페이스를 명시했지만 무시되고, 잘못된 계산이 이루어짐. llama보다 성능이 떨어지는 것 같음.
          + open-webui 설치를 수정한 후 테스트했을 때, deepseek-r1:8b는 수론 결과를 증명하려 함. 벤치마킹에 최적화된 것일 가능성 있음.
     * 미국 정부의 현 상태를 고려할 때, Deepseek 사용을 시도하는 사람들에게 제재를 가할 가능성이 있음.
     * ChatGPT는 정부 및 대기업과의 주요 거래를 확보하고 있는 반면, DeepSeek은 소규모 스타트업의 지원을 받고 있음. 미국과 중국 간의 권력 역학 관점에서 흥미로움.
     * 유럽이 실제로 기술 전략을 가지고 있다면 기사에 동의할 것임. 그러나 유럽은 의미 없는 단발성 프로젝트에 그칠 가능성이 있음. 예를 들어, 포르투갈의 ""국가 자부심"" LLM 이니셔티브는 스페인에서 ""부분적으로 포르투갈"" 슈퍼컴퓨터로 훈련될 예정임.
     * AI에 대한 영국의 현재 입장에 대한 의견을 묻는 질문. 영국은 지난 30년 동안 급락한 것으로 보임.
     * 프랑스, 독일, 영국이 AI 우위를 위해 경쟁한다면, 유럽에서 잊고 있던 창의성을 발휘할 수 있을 것임.
     * 새로운 AI 법이 비즈니스 리스크를 초래했지만, 여전히 꿈꿀 수 있음.
     * OpenAI는 100만 입력 토큰당 $2.5를 청구하고, DeepSeek은 캐시된 경우 $0.014를 청구함. 이는 오해의 소지가 있음. DeepSeek의 비캐시 가격은 $0.14임.
     * 유럽에서 미국과 중국의 기술 대기업과 경쟁하는 AI 회사로 Mistral 외에 어떤 회사가 있는지에 대한 질문. Deepmind는 구글 소유로 오랫동안 간주되지 않음.
"
"https://news.hada.io/topic?id=19137","Show GN:  당신의 콘텐츠 집사, newtler(뉴틀러)! 베타 서비스 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 당신의 콘텐츠 집사, newtler(뉴틀러)! 베타 서비스 출시

   안녕하세요,
   지난번에 MVP를 출시한다는 소식으로 처음 글을 작성했었는데요,
   이후 1월 6일 MVP를 출시하여 1월 31일에 MVP를 종료했습니다.

   긱뉴스를 통해서 정말 많은 분들이 MVP를 이용해 주셨고,
   MVP를 운영하며 받은 피드백들을 바탕으로 베타서비스를 출시했습니다.

   많은 관심 부탁드립니다!

    ✨ newtler(뉴틀러)란?

   newtler는 News + Butler의 합성어로, 나만의 뉴스 피드를 만들면 집사가 뉴스 피드에 올라오는 다양한 콘텐츠들을 보기 쉽게 정리해서 전달해 주는 서비스예요.

   넘치는 정보 속에서 원하는 콘텐츠를 놓치지 않으면서도 불필요한 정보는 걸러내는 것이 어렵다는 문제를 해결하고자 했고,
   지난 2년간 일일일이라는 정보 큐레이션 서비스를 운영하며 1.4만 명 이상의 유저분들과 함께한 경험을 바탕으로 newtler를 만들었습니다.

   ✅ newtler 서비스 소개: https://www.producthunt.com/posts/newtler-news-butler
   ✅ newtler 서비스 링크: https://newtler.com
"
"https://news.hada.io/topic?id=19126","점진적 자동화의 핵심, Do-nothing 스크립팅 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  점진적 자동화의 핵심, Do-nothing 스크립팅 (2019)

     * 점진적 자동화의 핵심: Do-nothing 스크립팅
          + 모든 운영 팀은 아직 자동화되지 않은 수동 절차를 가지고 있음. 이러한 절차는 완전히 제거될 수 없으며, 특히 인프라 수정이나 사용자 계정 프로비저닝과 같은 절차가 큰 부담이 될 수 있음.
          + 예를 들어, 사용자 계정 프로비저닝 절차는 SSH 키 쌍 생성, Git에 공개 키 커밋, 빌드 작업 완료 대기, 직원 디렉토리에서 이메일 주소 찾기, 1Password를 통해 개인 키 전송 등의 단계를 포함함.
          + 이러한 절차는 집중이 필요하지만, 흥미로운 문제 해결이나 만족스러운 결과를 제공하지 않음. 이를 ""slog""라고 부름.
          + 자동화는 이러한 절차를 더 빠르고 정확하게 수행할 수 있지만, 모든 단계를 자동화하는 것은 어려울 수 있음. 부분적인 자동화는 절차를 덜 번거롭게 만들지 않음.
     * Do-nothing 스크립팅
          + 거의 모든 slog는 ""do-nothing 스크립트""로 변환될 수 있음. 이는 각 단계를 함수로 캡슐화하여 절차의 지침을 인코딩하는 스크립트임.
          + 예시 스크립트는 각 단계를 사용자에게 제공하고 수동으로 완료할 때까지 기다림.
          + 이 스크립트는 실제로 절차의 어떤 단계도 수행하지 않음. 그러나 다음과 같은 가치를 제공함:
               o 단계를 건너뛰지 않도록 하여 집중을 유지하고 절차를 완료하기 쉽게 함.
               o 각 단계가 함수로 캡슐화되어 있어, 나중에 자동으로 수행할 수 있는 코드로 대체 가능함.
               o 시간이 지남에 따라 유용한 단계의 라이브러리를 개발하여 미래의 자동화 작업을 더 효율적으로 만듦.
          + do-nothing 스크립트는 수동 작업을 줄이지 않지만, 자동화 작업의 활성화 에너지를 낮추어 시간이 지남에 따라 수고를 줄일 수 있게 함.
"
"https://news.hada.io/topic?id=19151","포춘 알고리즘을 활용한 보로노이 다이어그램 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       포춘 알고리즘을 활용한 보로노이 다이어그램 생성

보로노이 다이어그램 생성하기

     * 보로노이 다이어그램이란?
          + 보로노이 다이어그램은 평면을 여러 영역으로 나누는 방법으로, 주로 절차적으로 지도를 생성하는 데 사용됨.
          + 평면에 '사이트'라 불리는 여러 점을 선택하고, 각 사이트에 대응하는 영역은 그 사이트에 가장 가까운 모든 점을 포함하는 영역임.
          + 각 영역의 경계는 두 사이트와 같은 거리에 있는 점들로 이루어짐. 세 사이트와 같은 거리에 있는 점은 '보로노이 정점'이라 불림.
     * 포춘 알고리즘
          + 포춘 알고리즘은 평면의 왼쪽에서 오른쪽으로 '스윕'하는 선을 사용하여 다이어그램을 생성하는 방법임.
          + 스윕 라인이 사이트를 만나면 그 주위에 '버블'(포물선 호)이 생성되고, 스윕 라인이 멀어질수록 버블이 커짐.
          + 두 사이트의 호가 충돌하면 그 충돌 지점이 셀의 경계가 됨.
          + 모든 활성 버블의 경계는 '비치라인'이라 불림.
     * 용어 해설
          + 사이트: 2차원 점으로, 보로노이 다이어그램의 모양을 결정함.
          + 스윕 라인: 영역을 가로지르는 수직선으로, 이벤트 큐의 각 이벤트를 처리함.
          + 비치라인: 여러 호로 이루어진 선으로, 이벤트가 처리될 때 호가 추가되거나 제거됨.
          + 교차점: 비치라인의 두 호가 만나는 지점으로, 관련된 사이트와 같은 거리에 있음.
          + 이벤트 큐: 사이트와 원 이벤트가 저장되는 곳으로, x좌표 오름차순으로 정렬됨.
          + 사이트 이벤트: 이벤트 큐의 두 가지 이벤트 중 하나로, 해당 사이트의 좌표로 정의됨.
          + 원 이벤트: 큐의 다른 유형의 이벤트로, 원의 둘레에 있는 세 호로 정의됨.
          + 보로노이 정점: 세 사이트와 같은 거리에 있는 점으로, 셀의 모서리임.
          + 동등 경계: 두 사이트와 같은 거리에 있는 선.
          + 불완전한 경계: 한쪽 끝은 고정된 점이고, 다른 쪽은 두 포물선 초점의 교차점으로 정의된 선.
     * 포물선 접선
          + 포물선의 개념과 속성은 알고리즘에서 매우 중요함.
          + 포물선은 초점 점과 직선(디렉트릭스)으로 정의됨.
          + 두 사이트의 초점을 설정하고 스윕 라인을 디렉트릭스로 설정하면, 두 포물선의 교차점을 찾음으로써 두 사이트와 같은 거리에 있는 경계선을 찾을 수 있음.
     * 비치라인으로 돌아가기
          + 비치라인은 스윕 라인의 주어진 지점에서 모든 호의 '경계'임.
          + 각 호는 사이트의 초점 점으로 표현될 수 있음.
          + 비치라인은 간단한 점의 시퀀스로 표현될 수 있음.
     * 새로운 호는 스윕 라인이 새로운 사이트를 만날 때 생성됨
          + 비치라인은 점의 시퀀스로, 각 점은 사이트와 호를 나타냄.
          + 스윕 라인이 새로운 사이트를 만날 때 새로운 호가 생성되고 시퀀스에 삽입됨.
     * 교차하는 경계와 외접원
          + 세 사이트가 원의 둘레에 있을 때, 원의 중심은 세 점과 같은 거리에 있음.
          + 외접원의 중심은 보로노이 정점이 됨.
     * 불완전한 경계
          + 불완전한 경계는 한쪽 끝이 고정된 점이고, 다른 쪽은 두 호의 교차점임.
          + 두 불완전한 경계가 충돌하면 보로노이 정점이 생성되고, 불완전한 경계는 반경계로 변환됨.
     * 시계 반대 방향의 원만이 원 이벤트를 생성함
          + 세 호가 시계 반대 방향으로 읽힐 때만 원 이벤트가 생성됨.
     * 요약
          + 사이트 집합을 주어지면, 모든 사이트 점을 큐에 '사이트' 이벤트로 넣고 x값으로 정렬함.
          + 큐가 비어 있지 않은 동안, 다음 이벤트를 큐에서 꺼내 처리함.
          + 사이트 이벤트일 경우, 새로운 호를 비치라인에 추가하고 불완전한 경계를 생성함.
          + 원 이벤트일 경우, 보로노이 정점을 추가하고 비치라인에서 호를 제거함.
"
"https://news.hada.io/topic?id=19155","AWS S3 + CloudFront로 배포 시 정적 파일을 불러오지 못해 흰 화면이 발생하는 문제 해결하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AWS S3 + CloudFront로 배포 시 정적 파일을 불러오지 못해 흰 화면이 발생하는 문제 해결하기

   배포 시 정적 파일을 불러오지 못해 흰 화면이 발생하는 문제를 AWS S3 + CloudFront로 해결한 글입니다. AWS S3 + CloudFront로 안정적인 정적 파일 배포를 고민하는 분들에게 도움이 되었으면 좋겠습니다.

   [문제 발생 배경]
     * React + Vite 기반 Frontend 서비스 운영
     * 배포 후 간헐적 흰 화면 발생 → 정적 파일을 불러오지 못함
     * 콘솔 오류: MIME 타입 불일치 (text/html 반환)

   [문제 분석]
     * MIME 타입 불일치: 정적 파일이 아닌 HTML 응답 반환
     * Github Actions 취소 → ECS 인스턴스 제거 가설
     * 배포 시점과 정적 파일 서빙 불일치
     * 기존 버전의 index.html이 새로운 정적 파일을 참조하지만 파일이 제거됨

   [해결 방법]
     * CloudFront + S3 활용 (최종 결정)
     * S3 절대 경로 사용하여 이전 버전 정적 파일 유지
     * Vite 빌드 시 파일명에 commitHash, timestamp 추가 → 고유성 유지
     * S3 Lifecycle 설정으로 불필요한 파일 자동 삭제
     * CloudFront 연동하여 빠르고 안정적인 정적 파일 서빙
     * Local, Dev, Prod 환경 별도 설정

   [검증 결과]
     * CloudFront + S3 방식 정상 동작 확인
     * 캐싱 전략 적용: 브라우저 캐시(Cache-Control, max-age) 점검
     * 파일 고유성 부여로 캐싱 무효화 필요 없음
     * 이전처럼 정적 파일 누락 문제 없이 안정적인 배포 가능

   [배운 점]
     * 배포 환경에서 정적 파일 관리가 UX에 큰 영향을 줄 수 있다.
     * 가설 검증 시 빠르고 간단한 접근 방식이 중요
     * S3 + CloudFront를 활용한 배포 환경 최적화 경험
     * 환경별 배포 전략(Local, Dev, Prod) 차별화 필요
     * 브라우저 캐싱 동작(Cache-Control, from disk cache)에 대한 이해 필수

   롤링이니까 당연히 문제지. 배포시간을 짧게 만들거나 배포를 분리해서 트래픽을 한쪽으로 몰아주는 블루그린전략으로 하면 되요.

   아니면 리액트 에러캐치해서 리로드를 강제로 시켜도 되구요.
"
"https://news.hada.io/topic?id=19101","Gemini 2.0 전 세계 사용자에게 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Gemini 2.0 전 세계 사용자에게 공개

     * Gemini 2.0의 일반 공개
          + 2024년 I/O에서 처음 소개된 Flash 시리즈 모델은 대량의 고빈도 작업에 최적화된 강력한 모델로, 개발자들 사이에서 인기를 끌고 있음
          + 2.0 Flash는 이제 더 많은 사용자에게 일반적으로 제공되며, 주요 벤치마크에서 성능이 향상되었음
          + 이미지 생성 및 음성 변환 기능도 곧 추가될 예정임
     * 2.0 Pro 실험적 모델: 최고의 코딩 성능과 복잡한 프롬프트 처리
          + Gemini 2.0 Pro는 코딩 성능과 복잡한 프롬프트 처리 능력이 가장 뛰어난 모델로, 세계 지식에 대한 이해와 추론 능력이 향상되었음
          + 2백만 토큰의 가장 큰 컨텍스트 윈도우를 제공하여 방대한 정보를 종합적으로 분석하고 이해할 수 있음
          + Google AI Studio와 Vertex AI에서 개발자에게 실험적 모델로 제공되며, Gemini Advanced 사용자도 이용 가능함
     * 2.0 Flash-Lite: 가장 비용 효율적인 모델
          + 1.5 Flash의 가격과 속도에 대한 긍정적인 피드백을 바탕으로, 2.0 Flash-Lite는 동일한 속도와 비용으로 더 나은 품질을 제공함
          + 대부분의 벤치마크에서 1.5 Flash를 능가하며, 1백만 토큰의 컨텍스트 윈도우와 멀티모달 입력을 지원함
          + Google AI Studio와 Vertex AI에서 공개 미리보기로 제공됨
     * 책임과 안전 작업
          + Gemini 모델 패밀리가 더욱 강력해짐에 따라 안전하고 보안적인 사용을 위한 강력한 조치를 계속 투자하고 있음
          + 새로운 강화 학습 기법을 사용하여 Gemini 자체가 응답을 비판하도록 하여 더 정확하고 목표 지향적인 피드백을 제공함
          + 자동화된 레드 팀을 활용하여 간접 프롬프트 주입과 같은 사이버 보안 공격의 위험을 평가하고 있음

        Hacker News 의견

     * Gemini 모델에 대한 명확한 정보 부족으로 혼란스러움. Google Workspace 구독에 포함된 Gemini Advanced에 대한 정보가 부족함.
          + ""Gemini Advanced""라는 이름만 있고, 모델 선택 옵션이 없음.
          + Google AI Studio는 LLM 래퍼 앱 구축에 중점을 두고 있지만, 단순히 질문에 답변을 원하는 사용자에게는 적합하지 않음.
          + 검색을 통해 얻은 정보는 불확실하며, Gemini Advanced가 Workspace 구독에 포함된다는 정보가 있음.
          + gemini.google.com 페이지에는 모델에 대한 정보가 전혀 없으며, 설정 옵션은 다크 모드 변경만 가능함.
     * Google AI Studio와 Vertex AI를 통해 Gemini API에 접근 가능함.
          + Gemini 2.0, 2.0 Pro, 2.0 Pro Experimental, Gemini 2.0 Flash, Gemini 2.0 Flash Lite 등 다양한 모델이 존재함.
          + 벤치마크는 자체 모델과만 비교됨.
     * 음성 채팅 시 정치적 주제에 대한 제한이 있음.
          + 사용자가 요리 계획을 이야기할 때, 정치적 주제로 오해받아 대화가 제한됨.
     * AI 모델의 이름이 혼란스러움.
          + Flash, Flash-Lite 등 명명 규칙이 이해하기 어려움.
          + Google 모델의 품질이 다른 주요 업체에 비해 낮다는 의견이 있음.
     * PDF 파싱에 있어 가격 대비 성능이 뛰어남.
          + Gemini Flash-Lite는 비용 효율적이며, Lite 버전의 벤치마크를 기대함.
     * AI Studio에서 새로운 모델을 실험해볼 수 있음.
          + 라이브 모드를 통해 실시간 대화 가능하며, 카메라를 통해 세상을 볼 수 있음.
     * Gemini 2.0 Flash-Lite의 가격이 OpenAI의 GPT-4o mini보다 저렴함.
          + 텍스트/이미지 입력과 오디오 입력에 대한 가격이 상대적으로 저렴함.
     * Gemini Pro 2.0 모델이 인상적임.
          + 연구, 분석, 글쓰기 등 일반적인 인지 작업에 적합함.
          + AI Studio를 통해 사용하기를 추천하며, Gemini 앱은 필터가 많아 논란이 될 수 있는 주제에 대한 답변이 제한적임.
     * Gemini 2.0 Flash 모델이 멀티모달 작업에 뛰어남.
          + 문서 작업과 객체 탐지에 적합하며, 가격 대비 성능이 우수함.
          + Qwen2.5 VL 72B와 7B 모델이 문서 이미지 작업에 더 나은 성능을 보임.
     * Gemini 2.0 Pro Experimental 모델이 주목받고 있음.
          + 복잡한 프롬프트 처리와 코딩 성능이 뛰어나며, 200만 토큰의 컨텍스트 윈도우를 제공함.
"
"https://news.hada.io/topic?id=19062","비디오 게임 역사 재단 도서관, 얼리 액세스로 개관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      비디오 게임 역사 재단 도서관, 얼리 액세스로 개관

VGHF 도서관의 초기 공개

     * 출시 배경: Video Game History Foundation(VGHF)는 2017년부터 비디오 게임 역사 연구를 위한 디지털 도서관을 구축해 왔으며, 이제 이를 대중에게 공개함. 이 도서관은 게임 개발 문서, 희귀 비디오 게임 출판물, 잡지, 기념품 등을 포함함.

  우리의 컬렉션

     * 주요 자료:
          + 이전에 공개되지 않은 게임 개발 자료
          + 상징적인 비디오 게임의 아트워크, 보도 자료, 홍보 자료
          + 1500개 이상의 절판된 비디오 게임 잡지

    게임 제작 과정 배우기

     * 게임 제작 자료 공개: VGHF는 게임 개발 커뮤니티와 협력하여 디자인 문서, 아트워크, 비디오 자료 등을 보존하며, 이를 통해 게임이 어떻게 제작되고 판매되었는지 알 수 있음.
     * 주요 컬렉션: Mark Flitman의 문서가 포함되며, 이는 90년대와 2000년대에 Konami, Acclaim, Midway, Mindscape 등에서 일한 게임 프로듀서의 기록임.

    커뮤니티와의 협력

     * 팬들의 기여: 전 세계 팬들이 게임 역사를 수집하고 보존하며, 많은 자료가 게임 커뮤니티의 기부로 이루어짐.
     * 시민 아카이브: VGHF 도서관은 게임 역사를 보존하는 시민 아카이브의 작업을 공식적으로 인정하고 제도화함.

    그 외 추가 사항

     * 추가 자료:
          + GamePro 잡지의 아트 및 보도 자료 아카이브의 첫 100개 CD
          + 비디오 게임 이벤트의 가이드북 및 기타 자료
          + FromSoftware의 홍보 자료

  도서관 시스템 소개

     * 시스템 기능: VGHF 도서관은 ArchivesSpace와 Preservica를 사용하여 자료를 카탈로그화하고 보존하며, 강력한 검색 및 탐색 기능을 제공함.
     * 텍스트 인식 도구: 독자적인 텍스트 인식 도구를 개발하여 잡지와 홍보 자료를 텍스트 검색 가능하게 함.

  다음 단계

     * 미래 계획: 도서관은 앞으로 더 많은 자료를 추가하고 새로운 기능을 도입할 예정임.
     * 기부 요청: 게임 개발자가 자신의 자료를 기부하고 싶다면 VGHF에 연락 가능함.

  VGHF 도서관에 대한 평가

     * 연구자들의 의견: VGHF 도서관은 연구자들에게 큰 도움이 되며, 다양한 자료를 한 곳에서 검색할 수 있어 시간 절약에 기여함.

  자주 묻는 질문

     * 모든 자료가 포함되어 있는가?: 현재 디지털로 제공 가능한 자료만 포함되어 있으며, 지속적으로 더 많은 자료를 추가할 예정임.
     * 접근 권한: 누구나 무료로 디지털 자료에 접근 가능하며, 특별한 자격이 필요하지 않음.
     * 자료 사용: 일부 자료는 연구 목적으로 재생산 가능하지만, 도서관은 지적 재산권을 소유하지 않음.

  도서관 팀 소개

     * Phil Salvador: VGHF 도서관의 도서관장
     * Travis Brown: 기술 이사
     * Amanda Cifaldi: 아티스트 및 엔지니어

    지원 요청

     * 도서관 지원: VGHF는 개인 기부로 운영되며, 도서관을 무료로 유지하기 위해 지원을 요청함.

        Hacker News 의견

     * 60~70년대 컴퓨터 게임의 역사 보존을 위해 블로그 포스트와 책, 소프트웨어 컬렉션을 제안하고 싶음
          + 70년대 중반에 컴퓨터와 컴퓨터 게임을 처음 접했음
          + 당시 텍스트 기반의 BASIC 게임들을 해체하며 배웠음
          + PLATO 시스템을 통해 사회적 컴퓨팅을 경험했음
          + 60~70년대 게임 개발자들이 많이 사라져 안타까움
          + David Ahl 책과 DECUS 게임 테이프, 남아있는 개발자 인터뷰를 포함한 소규모 컬렉션을 제안하고 싶음
     * 비디오 게임 역사 박물관이 법적 이유로 비디오 게임을 전시할 수 없는 상황이 이상하다고 생각함
          + 고생물학 박물관이 공룡 뼈를 보여줄 수 없는 것과 같음
     * 비디오 게임 라이브러리가 '얼리 액세스'로 개장한 것이 재미있고 적절하다고 생각함
          + 시간이 지나면서 더 많은 게임이 추가될 예정임
          + 웹사이트는 운영 중이며 사용할 수 있음
     * 디지털 라이브러리로의 탐색 방법이 명확하지 않았음
          + 링크 제공: https://archive.gamehistory.org/explore
     * 연구자, 역사가, 게임 제작에 관심 있는 사람들에게 금광 같은 자료임
          + VGHF의 노력에 찬사를 보냄
     * 과거의 게임 경험은 소프트웨어로 에뮬레이션할 수 있지만, 당시의 감각은 재현할 수 없다고 생각함
     * VGHF의 OCR 시스템이 OpenAI Vision과 비교해 어떤지 궁금함
          + Vision의 경험에 비추어 볼 때, 더 정확하고 비용 효율적일 것 같지 않음
          + 이는 매몰비용 오류의 또 다른 예시일 수 있음
     * 대부분의 자료가 archive.org에 이미 있는 것 같음
          + 디지털 역사를 보존하려는 노력은 칭찬할 만하지만, 차별점이 무엇인지 잘 모르겠음
     * 이 프로젝트는 훌륭하다고 생각함
          + Phil Salvador, Travis Brown, Frank Cifaldi가 참여한 프로젝트임
          + 비디오 게임 보존 관련 주제를 다루는 팟캐스트 'Video Game History Hour'를 운영 중임
          + Cyan과의 Myst 컬렉션 작업은 놀라운 성과였음
          + 웹사이트는 무료로 접근 가능하며, VGHF는 비영리 단체임
          + 기부를 통해 더 많은 작업을 지원할 수 있음
"
"https://news.hada.io/topic?id=19122","6502 명령어 세트, 첫 번째 어셈블리 언어로 적합성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     6502 명령어 세트, 첫 번째 어셈블리 언어로 적합성

    6502는 어셈블리 프로그래밍을 시작하기에 좋은 선택임

     * 어셈블리 프로그래밍을 배우는 데 있어 어디서 시작할지 결정하는 것은 어려운 일임. 6502는 하드웨어와 밀접하게 연결되어 있어 CPU 선택이 중요한 첫 단계임.
     * 6502 어셈블리는 현대에 실용적인 기술은 아니지만, 레트로 프로그래밍에 관심이 있다면 유용할 수 있음.
     * 6502를 시작점으로 삼는 이유는 다음과 같음:
          + 단순함: 어셈블리 프로그래밍의 기본 개념을 빠르게 배울 수 있음.
          + 현실성: 다양한 기기, 에뮬레이터, 책이 있어 학습에 도움을 줄 수 있음.

    단순함

     * 기본 어셈블리 프로그래밍 개념을 배우기 위해서는 강력한 시스템보다 단순한 시스템이 더 중요함.
     * 6502는 6개의 레지스터만을 가지고 있어, 레지스터가 무엇인지 이해하는 데 도움이 됨.
     * 6502 명령어 세트는 56개의 명령어로 구성되어 있어, 주요 명령어 유형을 빠르게 배울 수 있음.

    현실성

     * 6502는 1970년대 중반에 MOS 기술에 의해 개발된 저렴한 CPU로, Apple II, Commodore 64 등 여러 마이크로컴퓨터에 사용됨.
     * 다양한 에뮬레이터와 학습 자료가 인터넷에서 무료로 제공됨.
     * Nick Morgan의 Easy 6502 전자책은 6502 어셈블리 코드를 작성하고 실행할 수 있는 자바스크립트 기반의 어셈블러와 시뮬레이터를 제공함.

    대안

     * 6502가 어셈블리 프로그래밍을 시작하기에 좋은 선택이라는 의견에 모두가 동의하지는 않음.
     * 교육 목적으로 만들어진 다양한 가상의 CPU, 다른 레트로 CPU, 현대 RISC 아키텍처, x86-x64 등이 대안으로 제시됨.
     * 그러나 6502의 단순함은 기본 개념을 배우기에 적합함.

        Hacker News 의견

     * 6502는 어셈블리를 배우기에 적합하지 않음. ARM v6M이나 RISC-V MCU를 추천함
          + ARMv6M은 작은 명령어 집합을 가지고 있으며, 최신 오픈 소스 도구 체인에서 좋은 플랫폼 지원을 받음
          + RISC-V는 개방성을 중시하는 경우 선택할 수 있는 옵션임
     * 68000은 6502보다 더 많은 레지스터와 넓은 데이터 타입을 제공함
          + 6502는 복잡한 프로그램에서 한계에 부딪히기 쉬움
          + 작은 시스템의 한계를 극복하는 방법은 무시하고 경험을 쌓는 것임
     * 6502는 초보자에게 적합하지만, 그 이유는 CPU와 함께 오는 주변 환경 때문임
          + NES와 같은 간단한 기계를 프로그래밍하는 데 사용되며, 시스템의 단순성이 학습에 도움을 줌
          + 6502의 한계는 학생들이 CPU 설계의 제약을 이해하는 데 도움을 줌
     * PDP-11 어셈블러는 좋은 시작점이 될 수 있음
          + Z80 어셈블러는 비추천하며, 6502는 레지스터가 부족함
     * 어셈블리는 첫 번째로 배워야 할 언어가 아님
          + 어셈블리를 배우는 가장 좋은 방법은 실험을 통해 배우는 것임
     * PDP-10에서 처음 어셈블리 언어를 접했을 때 혼란스러웠음
          + 6800 마이크로프로세서로 작업하면서 이해하게 됨
     * RISCV는 시작하기 좋은 어셈블리 언어임
          + 좋은 설계와 현대적인 언어 및 도구 지원을 제공함
     * 6502의 단순성은 중간 복잡도의 프로그래밍에 어려움을 줌
          + 8086+DOS 플랫폼이 더 쉽게 작업할 수 있음
     * 6502 어셈블리 언어를 배우는 경험이 매우 유익했음
          + 벤 이터 브레드보드 컴퓨터를 구축하는 실습이 흥미로웠음
     * 6502는 첫 번째 어셈블리 언어였지만, Z80 어셈블리 프로그래밍이 더 나았음
          + Z80은 더 많은 레지스터와 교환 가능한 레지스터 세트를 제공함
"
"https://news.hada.io/topic?id=19079","Kagi, 공정 가격 제도(Fair Pricing) 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Kagi, 공정 가격 제도(Fair Pricing) 도입

     * Kagi는 이제 사용자가 검색을 사용하지 않은 달에는, 자동으로 해당 월의 전액 크레딧이 다음 결제 주기에 제공됨
          + 이는 사용자가 Kagi를 사용하지 않은 달에 요금을 부과하지 않기 위함
     * 사용자에게 편의를 제공한다는 단순한 이유에서 이 제도를 도입함
          + 어떤 달에는 Kagi 사용을 잊어버리거나 필요성을 느끼지 못할 수도 있다는 점을 이해하며, 그런 경우에도 비용을 청구하지 않으니 안심해도 됨
     * 이 변경 사항은 즉시 적용되며, 양식 작성이나 요청할 필요도 없음

새로운 개선 사항 및 버그 수정

  Search

     * 검색 결과 상위 노출 조정이 과도하게 작동하는 문제 개선함
     * 모바일 환경에서 'Search Options Always Open' 설정이 가능하도록 허용
     * 이미지 푸터의 시각적 불일치 등 여러 디자인 문제 수정
     * Snaps 기능을 비활성화할 수 있는 옵션 추가
     * 동영상 검색 시 &pp 링크로 인해 YouTube 결과가 중복되는 문제 해결
     * Kagi가 verbatim 모드일 때 이를 더 명확하게 표시하도록 개선
     * Quick Answer 텍스트가 화면을 넘어가는 문제 수정
     * 동영상 검색에서 URL이 약간 다를 경우 중복 결과가 표시되는 문제 해결
     * 청구서에 현재 금액이나 날짜가 표시되지 않는 문제 수정

  Assistant

     * Assistant에서 편집 시 모델이 자동으로 바뀌는 문제 개선
     * 새로운 Assistant UI에서 정보 패널이 보이지 않는 문제 수정
     * Custom Assistant 기능(Research 기반)에 렌즈를 추가할 수 있도록 개선
     * Assistant가 별다른 이유 없이 동일한 응답을 반복하는 문제 해결

        Hacker News 의견

     * 사용자가 한 달 동안 서비스를 사용하지 않으면 취소할 가능성이 높음. 구독을 일시 중지하는 것이 취소보다 나은 선택일 수 있음. 이는 고객의 호감을 얻고, 호감이 전환율과 이탈률 감소에 기여할 수 있음
     * Kagi를 모든 기기에서 기본 검색 엔진으로 설정하여 매일 사용하고 있음. 이 정책을 활용할 수 없지만 서비스에 만족하고 있음
     * Netflix, Apple Arcade와 같은 서비스의 가격 정책에 대해 생각해 본 적이 있음. 자주 사용하지 않기 때문에 필요할 때만 구독하고, 사용 후 바로 취소하는 방식으로 비용을 절약할 수 있음. Kagi가 이를 자동화하여 구현했음
     * 연구에 따르면, 사용자는 서비스 구독 취소의 어려움을 과대평가하는 경향이 있음. 자동 갱신 기능이 있는 경우, 사용자의 30%가 구독을 꺼리는 것으로 나타남. 공정한 가격 정책이 이러한 장벽을 줄이고 신규 구독을 30% 증가시킬 수 있을지 궁금함
     * Kagi 생태계에 참여하도록 유도하는 좋은 방법임. Kagi를 모든 브라우저에서 기본으로 사용하고 있으며 만족하고 있음. 추가 비용이 드는 AI/LLM 기능에 대해 미터 요금제를 도입하면 좋겠음
     * 사용자 친화적인 청구 정책을 채택한 것에 찬사를 보냄. FTC가 일정 기간 사용하지 않은 서비스에 대한 자동 갱신 청구를 금지하는 정책을 의무화했으면 좋겠음
     * Kagi 계정을 갱신할 예정임. 결제 문제로 인해 사용을 중단했지만, 최근 DDG에 만족하지 못하고 Google을 사용하고 있음. ChatGPT 인터넷 검색이나 Perplexity가 DDG와 Kagi를 대체할 것이라 생각했지만, 여전히 신뢰할 수 있는 정보원이 필요함
     * Kagi를 사용하는 것을 잊는다는 것은 상상할 수 없음. 필수적인 서비스임
     * Kagi의 API 검색 비용이 너무 높음. AI 시스템은 좋은 결과를 얻기 위해 여러 번의 검색이 필요하며, Kagi의 결과는 좋지만 경쟁사보다 1,000,000배 더 나은 것은 아님
     * Kagi의 ""Quick Answer"" 옵션을 가장 높이 평가함. 질문에 물음표를 붙이면 고품질의 인용된 AI 요약을 제공하여 빠른 답변을 얻을 수 있음
"
"https://news.hada.io/topic?id=19096","Show GN: 기가차드 - 매일매일 매콤한 동기부여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 기가차드 - 매일매일 매콤한 동기부여

   얼마전에 친구한테 기가차드란 밈을 소개받았습니다.

   개인적으로는, 상당히 취향이었고 유쾌했고 요즘같은 세상에서 꼭 필요한 존재라고 생각했습니다.

   한가지 문제는... 저는 공돌이었고, 기가차드는 상당한 필력이 필요한 밈이었다는 사실이었죠.

   요즘 공돌이들은 여자친구도 직접 만들던데 (매우 편향된 의견입니다) 기가차드 하나 못만들겠나 싶어서 적당히 후다닥 하나 만들었습니다.

   예전에 유행했던 ""대나무숲"" 처럼 현재 가지고 있는 고민을 적당히 아무렇게나 짧게 막 쓰시면 Google 에 존재하는 AI 모델중 3개 (1.5-flash-8b, 2.0-flash, gemma) 정도가 답변을 취합해서 답변을 보여줍니다.

   예시: https://gigachad.smallfeature.com/HxwfyNfhYdUrdtd

   vultr free tier 서버에서 구동되는 서비스 입니다.
   상당히 빈약한 서버라 언제든 죽을 수 있습니다. 😂

   기가 차드, 나 잘 하고 있는 거겠지?

   AI 에게 위로를 받았습니다 ㅎㅎㅎ

   공쀱삐, 공돌이라 필력이 딸린다니 그게 무슨 약한 소리인가? 대학원에 가면 논문을 쓰며 공짜로 필력을 높일 수 있다네.

   라며 대학원으로 보내는건 아니겠죠? ㅎㅎ

   https://gigachad.smallfeature.com/BTrCu7WwVNdm5Eq

   ""대학원은 헬게이트나 다름없어. 괜히 잘못 꼬드겨서 친구 인생 X되게 만들지 마라. 알겠냐?""
   ""진정한 친구라면, 대학원 대신 술이나 한잔 사주는 게 훨씬 낫다. 🍺""
   (편향된 인용입니다.)

   얘도 대학원은 가지말라고 하네요 🤣
"
"https://news.hada.io/topic?id=19052","YC의 Requests for Startups - Spring 2025","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                YC의 Requests for Startups - Spring 2025

     * Y Combinator는 오랫동안 사람들이 더 많이 시도했으면 하는 아이디어를 모으고, 이를 Request for Startups(RFS) 형태로 공유해왔음
     * 이 목록에 있지 않은 아이디어도 충분히 가치 있으며, 해당 목록에 있는 아이디어가 창업자가 이미 흥미로워하던 분야라면, YC가 공감하고 지지한다는 점에서 동기가 될 수 있음
     * 여기 나열된 아이디어가 YC에서 투자하는 전부가 아니므로, 자신이 하고 싶은 아이디어가 있으면 주저 말고 지원하기 바람

Spring 2025

  Introduction

     * 최근 AI의 급격한 발전으로 새롭게 열린 창업 기회가 많아졌음
     * Operator, Computer Use 등의 기능으로 AI가 실제 컴퓨터와 웹을 활용하게 되면서, 이전보다 훨씬 많은 영역에 적용 가능해졌음
     * OpenAI의 o1/o3, Deepseek R1 같은 모델의 등장으로 AI가 인간을 넘어서는 사례가 생기며, 이를 지원하는 컴퓨팅 인프라도 중요해졌음

  A Secure AI App Store

     * 사용자 기기에 설치되는 새로운 형태의 AI 앱 스토어와 OS 레이어를 희망함
     * 주요 기능
          + 개인정보 보호: 사용자 허락 없이 캘린더, 파일, 브라우징 기록 등에 접근하지 못하도록 함
          + 공유 메모리: 사용자의 과거 액션, 취향, 맥락이 OS 레벨에서 일관되게 관리됨
          + 앱 리뷰/큐레이션: 믿을 수 있는 AI 앱만 소개할 수 있도록 사전 검증 체계 필요함
          + 개발자 지원: AI 앱 개발에 필요한 API, 예: 컴퓨터 조작, LLaMA 버전 관리, 접근 권한 제어 등을 간단히 제공함
          + 결제 기능: 유료 앱 결제나 서비스 사용 요금 지불 지원
     * 빅테크 기업 외에도 스타트업이 충분히 혁신을 이끌 기회가 있다고 봄

  Datacenters

     * AI 인프라 수요 증가로 데이터센터가 빠르게 늘어나야 하는데, 현재 건설 속도나 비용이 문제임
     * 전력 인프라, 냉각, 자재 조달, 프로젝트 관리 등 다양한 측면에서 혁신이 필요함
     * 건설 계획부터 유지보수까지 소프트웨어 자동화로 24시간 로봇 운영이 가능한 “lights out” 센터를 구상함
     * 스타트업이 이 분야에 뛰어들어 새로운 솔루션을 내놓기 바라며, YC는 이를 적극 지원하고 싶어 함

  Compliance and Audit

     * 미국·유럽 전체 노동자의 약 1%가 컴플라이언스 혹은 감사 관련 업무를 담당함
     * 규제 확대(GDPR, Dodd-Frank, AML/KYC, ESG 등)로 컴플라이언스 업무량이 계속 늘어남
     * LLM(대형 언어 모델)을 이용하면 방대한 문서를 빠르게 분석하고 이슈를 찾아낼 수 있음
     * 표본 점검 대신 전체 데이터에 대한 “실시간 감리”가 가능해짐
     * 향후 많은 컴플라이언스 작업이 자동화될 것으로 예상됨

  DocuSign 2.0

     * 전자 서명 플랫폼(DocuSign 등)이 복잡한 서류 절차를 간소화하지만, 여전히 다음이 어려움
          + 문서 템플릿 만들기
          + 중복 정보 입력 방지
          + 문서 오류 수정
          + 복잡한 용어 설명
          + 다른 소프트웨어와의 통합
     * AI 기반으로 서류 자동 작성, 음성 인터페이스, 상황별 맞춤형 서류 생성 등이 가능해짐
     * 이러한 “문서 서명” 솔루션을 근본적으로 다시 설계할 스타트업을 찾고 있음

  Browser & Computer Automation

     * AI가 웹 브라우저와 데스크톱 앱을 사용할 수 있게 되면서, 사실상 모든 사이트와 앱이 “API”처럼 변함
     * 이로 인해 컴퓨터 상의 모든 작업(워크플로)을 자동화하는 수많은 서비스가 나올 수 있음
     * 유망한 오픈소스 툴도 존재하며, 스타트업이 이를 적극 활용하기 바람

  AI Personal Staff for Everyone

     * 과거엔 극소수 부유층만 누리던 “개인 전문가(가사·세무·법률·자산관리 등)” 서비스를 소프트웨어로 대중화할 수 있음
     * 사진 분류, 개인 운전기사 등 과거엔 고소득층만 사용했지만 현재는 앱이나 AI로 누구나 이용 가능해진 사례가 있음
     * 세무사, 변호사, 트레이너, 교사 등 다양한 역할을 AI로 대체 또는 지원 가능
     * 개인 비서·조력자 역할을 하는 AI 스타트업을 희망함

  The Future of Software Engineering

     * 이미 많은 AI가 훌륭한 코드를 작성해내고 있음
     * 미래에도 소프트웨어 개발자는 여전히 필요하지만, 직접 코드를 작성하기보다는 다수 AI 에이전트를 지휘해 제품을 만드는 형태가 될 가능성이 큼
     * QA, 배포, 보안, 다국어 지원, 운영 등 다양한 작업도 AI가 대부분 처리하게 됨
     * “작은 조직의 엔지니어가 많은 AI 에이전트를 효율적으로 관리해 대규모 소프트웨어를 만드는” 도구가 필요함

  AI Commercial Open Source Software (AICOSS)

     * 오픈소스 생태계와 이를 상업적으로 지원하는 스타트업 패턴이 과거에도 성공해옴(Linux-RedHat, Git-Github 등)
     * 오픈소스 AI를 기업이 실제로 도입·운영할 수 있도록 지원하는 서비스의 기회가 큼
     * DeepSeek 등 다양한 프로젝트가 등장하며, 이를 활용해 기업용 솔루션이나 컨설팅을 제공하는 모델이 가능함
     * 오픈소스 AI를 기반으로 B2B 지원을 목표로 하는 창업을 기대함

  AI Coding Agents for Hardware-Optimized Code

     * AI 하드웨어 개발은 소프트웨어 제약 때문에 진전이 늦기도 함
     * CUDA를 통한 엔비디아 독점처럼, 커스텀 실리콘·AMD 등의 성능이 소프트웨어 최적화 부족으로 저평가되는 사례가 있음
     * Deepseek R1, OpenAI o1/o3 같은 추론 모델을 활용해, 고난도 하드웨어 최적화 코드를 자동 생성하면 새로운 가능성이 열림
     * 다양한 하드웨어 플랫폼 간 의존도를 줄이고, 전반적인 생태계를 재편할 수 있는 기회가 있음

  B2A: Software Where the Customers Will All Be Agents

     * 인터넷 트래픽 상당수가 이미 인간이 아닌 프로그램(스크래퍼, 자동화 스크립트 등)임
     * AI 에이전트가 본격화되면, 웹 서비스를 인간뿐 아니라 AI 에이전트에게도 직접 제공해야 하는 시대가 옴
     * 예: 에이전트 전용 결제 API, 호스팅 사용 크레딧 구매, 에이전트 간 계약 체결 지원 등
     * 이런 “AI 에이전트를 고객으로 삼는” 소프트웨어를 전문적으로 개발하는 창업도 유망함

  Vertical AI Agents

     * 과거 인터랙티브 웹앱 발달로 B2B SaaS가 빠르게 성장했는데, 앞으로는 특정 도메인 문제를 자동화하는 “버티컬 AI 에이전트”가 급성장할 것으로 보임
     * AI 세금 회계, AI 의료 청구, AI 전화 상담, AI 컴플라이언스 등 이미 여러 사례가 존재함
     * 실제 도메인 문제 해결을 위해서는 심층 에이전트 구조, 기존 레거시 시스템 통합, 도메인 지식이 필요함
     * 사람 수준의 성능을 내면 빠르게 성장할 것으로 기대하며, 아직 잠재력이 큰 분야가 많음

  Startup Founders with Systems Programming Expertise

     * DeepSeek 논문 등에서 보듯, 하드웨어 자원을 극대화하기 위한 저수준 기술력이 중요해지고 있음
     * 구글 창업자나 John Carmack처럼 소프트웨어 스택 전체를 꿰뚫는 역량이 혁신에 큰 영향력을 미쳤음
     * 제한된 리소스를 극복하고 최적화를 추구하는 집요함이 스타트업의 강력한 경쟁력이 될 수 있음
     * YC는 이러한 저수준 시스템 프로그래밍 전문성을 가진 창업자를 적극적으로 찾고 있음

  Inference AI Infrastructure in the World of Test-Time Compute

     * 과거엔 대형 모델 사전 학습에 많은 컴퓨팅 리소스가 투입됐으나, 이제는 추론(Inference) 과정에서도 큰 리소스가 요구됨
     * 복잡한 추론 모델을 자주 호출하는 AI 앱의 증가로 인프라 비용이 급등할 수 있음
     * 새로운 방식의 추론용 인프라, GPU 워크로드 최적화, 비용 절감 솔루션 등이 필요함
     * “인프라 최적화”처럼 눈에 띄지 않지만 필수적인 분야에서 큰 기회가 생길 것으로 예상됨

   2024.02 YC의 Request for Startup (스타트업을 위한 요청)
   1년전과 비교해보면 모든게 AI 위주로 바뀌었군요.
   작년엔 머신러닝, 우주, 기후, 공간컴퓨팅 등도 있었는데 이젠 그냥 모든게 ""AI를 위한/AI를 활용한"" 이네요.
   ""상업용 오픈소스 회사"" 가 ""AICOSS(AI Commercial Open Source Software)""로 바뀐것도 흥미롭습니다.
"
"https://news.hada.io/topic?id=19157","이제부턴 ESM 뿐입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             이제부턴 ESM 뿐입니다.

   이전까지만 해도 저는 모든 자바스크립트 라이브러리를 급격하게 ESM으로 바꾸는 방식에 부정적이었습니다. 현재 ESM 관련 기술과 비중이 나날히 발전했으므로, 저는 모든 개발자가 꼭 ESM으로 넘어오기를 바라고 있습니다. 이유는 다음과 같습니다.

  이유

     * 준비된 도구
          + Vite, ESLint, tsx 등 ESM으로 넘어가는 데 도움을 줄 수 있는 많은 도구가 나왔습니다.
          + 기존 라이브러리 방식(CJS)이 최신 방식인 ESM에 의존하는 것은 쉽지 않으므로 미래 발전을 위해서 앞으로 나가야 합니다.
          + 최신 Node.js에서 ESM 라이브러리를 require() 함수로 불러오는 방법이 개발되어 ESM을 더 쉽게 적용할 수 있습니다.
     * 이중 지원 문제
          + 두 방식의 설계 차이가 현저하기 때문에 상호 운용성이 크게 떨어집니다.
          + 사용자가 ESM 지원 여부를 일일이 확인해야 하는 번거로움이 생깁니다.
          + 두 방식을 지원해야 하므로 패키지의 크기가 매우 커집니다.

  언제 바꿀까요?

     * 새로운 패키지는 무조건 ESM으로 옮기세요.
     * 브라우저를 대상으로 하는 라이브러리의 경우 더 가벼운 번들을 만들 수 있습니다.
     * CLI 프로그램에도 이를 사용하는 사람들이 ESM으로 자연스럽게 넘어올 수 있습니다.
     * 하지만 그 전에, 기존에 의존하고 있는 라이브러리의 상태와 사용자의 요구사항을 아는 것이 중요합니다.

  얼마나 바꿔야 하나요?

   라이브러리의 의존성 파악을 위해 의존성 분석기를 만들었습니다. 의존하는 라이브러리의 상태 및 ESM으로 바꿀 경우의 영향까지 볼 수 있습니다.

  앞으로 할 일

   저는 제가 관리하는 패키지를 점진적으로 ESM으로 전환하고, 종속성을 자세히 살펴볼 계획입니다. 또한 node-modules-inspector를 이용한 흥미로운 아이디어도 많이 준비되어 있어 더 유용한 통찰력을 제공하고, 앞으로도 최선의 방식을 찾는 데 도움이 될 것입니다.

   저는 더 가볍고, 탄력적이며, 최적화된 JavaScript/TypeScript 생태계를 기대하고 있습니다. 도움이 되었기 바랍니다.
"
"https://news.hada.io/topic?id=19114","지형 위 물의 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             지형 위 물의 시뮬레이션

물의 문제점

     * 대부분의 게임은 지형 수정이 불가능하며, 이는 합리적임. 모든 게임이 이를 필요로 하지는 않음.
     * 물이 있는 게임에서는 물의 흐름을 어떻게 처리할지 고민해야 함.
     * 기존의 간단한 모델들은 만족스럽지 않으며, 더 나은 모델을 찾기 위해 연구가 필요함.

설정

     * 시뮬레이션은 그리드에서 작동해야 하며, 지형과 동일한 그리드를 사용하는 것이 바람직함.
     * 시뮬레이션의 평균 규모는 약 1미터 정도여야 함.
     * 물은 지형 위의 높이 필드로 가정할 수 있으며, 수직으로 흐르지 않음.
     * 물은 흐를 수 있어야 하며, 시뮬레이션 오류로 인해 마법처럼 사라지지 않아야 함.
     * 시뮬레이션은 제어 가능한 안정성을 가져야 하며, 빠르게 작동해야 함.

비해결책

     * Smoothed Particle Hydrodynamics는 매우 인상적인 결과를 제공하지만, 다른 문제를 해결함.
     * Jos Stam의 Stable Fluids는 전체 유체 부피를 다루며, 빠르지 않음.

얕은 물 방정식

     * 얕은 물 방정식은 수직 방향으로 평균화하여 2D 방정식을 남김.
     * ""얕은"" 부분은 물 기둥의 전형적인 수직 크기가 수평 규모보다 훨씬 작다는 것을 가정함.

격자

     * 유체 역학에서는 격자가 중요하며, 일반적으로 staggered grids를 사용함.
     * staggered grids는 물 높이/밀도 등을 사각형 셀에 저장하고, 속도는 셀 사이의 가장자리에 저장함.

가상 파이프 방법

     * 물 셀은 가상의 파이프로 연결되어 있다고 가정하여 물 흐름을 시뮬레이션함.
     * 흐름 가속, 유출 스케일링, 물 기둥 업데이트의 세 단계로 구성됨.

흐름 가속

     * 인접한 물 셀의 물 높이 차이에 따라 흐름을 가속함.
     * 마찰을 추가하여 시뮬레이션이 안정적인 상태로 수렴하도록 함.

물 기둥 업데이트

     * 각 물 셀에 대해 인접한 흐름에 따라 물을 추가하거나 제거함.

유출 스케일링

     * 셀의 물 양이 음수가 되지 않도록 유출 흐름을 조정함.

지형 고도

     * 물이 지형 위로 이동하도록 지형 고도를 추가함.

경계 조건

     * 시뮬레이션의 경계에서 발생하는 일을 고려해야 함.
     * 경계 흐름 값을 설정하여 벽, 유입, 유출 등의 조건을 정의함.

점성

     * 점성을 추가하여 작은 물 층이 이동하는 데 어려움을 겪도록 함.

전체 시뮬레이션 코드

     * 시뮬레이션 코드는 몇 개의 2D 배열에 대한 4개의 for 루프로 구성됨.

모델의 단점

     * 관성 및 속도 확산이 없으며, 빠른 물 흐름이 호수로 들어가면 모든 방향으로 퍼짐.

보너스: 육각형/삼각형 격자

     * 삼각형 격자를 사용하여 물을 시뮬레이션할 수 있으며, 이는 육각형 격자의 이중으로 볼 수 있음.

        Hacker News 의견

     * 유체 시뮬레이션에서 물이 축적되어 인접한 셀에 영향을 미치는 문제를 언급함. 이는 절차적으로 생성된 게임에서 병렬화가 어려운 이유 중 하나임
          + 절차적 생성은 병렬화에 적합하지만, 무한한 도메인에서는 병렬화가 어려움
          + 이 주제에 대한 탐구가 많이 이루어지지 않았음을 지적함
          + Nick McD의 작업을 칭찬하며, 그의 작업도 시뮬레이션 설계로 인해 도메인에 제약이 있음을 언급함
          + 물 분지 경계를 절차적으로 생성하여 병렬화 및 전체 물 분지를 한 번에 시뮬레이션하는 방법을 제안함
     * 유체 시뮬레이션 개발 시 아름다운 결과를 보며 시간을 낭비할 위험이 큼을 언급함
          + 2011년에 자신의 GPU 기반 유체 역학 구현 경험을 공유함
          + 유체(혈액)가 표면(조직)에서 2D로 시뮬레이션되었고, 중력과 표면 기울기를 고려하여 메쉬에 투영되었음을 설명함
     * Animal Crossing의 자원 수집 방식이 지형 조작 없이 효율적임을 언급함
          + 나무를 베어 로그를 얻지만, 일정량 후에는 쿨다운이 필요함
          + 지형 조작이 필요 없는 게임에서는 이 방법이 더 나을 수 있음을 제안함
     * Timberborn 게임의 물리학이 게임의 중요한 요소임을 언급하며 추천함
          + 물을 막아 엔진과 밭에 사용하는 방법을 찾는 것이 게임 플레이의 필수적인 부분임
     * o3-mini-high를 사용하여 3D로 구현된 알고리즘을 실험한 경험을 공유함
          + Perlin noise를 처음부터 구현하여 지형 생성에 사용했음을 언급함
     * 교육용 홍수 시뮬레이션을 소개하며, WebGL을 사용하여 인접 셀 기반으로 셀 값을 계산함
          + 모델 값을 변경하여 큰 효과를 볼 수 있음을 설명함
     * 물 시뮬레이션에서 관성 및 속도 확산이 부족한 문제를 해결하는 방법을 제안함
          + 흐름 화살표의 값을 이웃 화살표와 평균화하여 해결할 수 있음을 설명함
     * 개인 프로젝트로 시작한 침식 시뮬레이션에 대한 호기심을 공유함
          + 침식을 이해하지 못해 프로젝트가 중단되었음을 언급함
     * Creeper World 게임에서 물을 시뮬레이션한 후 폭탄을 투하하는 아이디어를 언급함
"
"https://news.hada.io/topic?id=19132","Show HN: 텍스트 편집을 위한 Transductive 정규 표현식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show HN: 텍스트 편집을 위한 Transductive 정규 표현식

     * TRRE: 전환 정규 표현식
     * 요약
          + 텍스트 편집과 grep과 유사한 명령줄 도구를 위한 정규 표현식의 확장임.
          + 프로토타입이므로 실제 환경에서는 사용하지 말 것.
     * 소개
          + 정규 표현식은 텍스트에서 패턴을 검색하는 데 유용한 도구임.
          + 텍스트 편집에는 자연스럽지 않다고 느껴져서 확장을 제안함.
          + 전환 정규 표현식 또는 **trre**라고 부름.
          + : 기호를 사용하여 변환을 정의함.
          + a:b는 a를 b로 대체하는 가장 간단한 형태임.
          + **trre**라는 명령줄 도구를 만들어 개념을 시연함.
     * 예제
          + 기본
               o cat을 dog로 변경:
$ echo 'cat' | trre 'c:da:ot:g'
dog

               o sed처럼 문자열의 모든 일치를 대체:
$ echo 'Mary had a little lamb.' | trre '(lamb):(cat)'
Mary had a little cat.

               o 삭제:
$ echo 'xor' | trre '(x:)or'
or

               o 삽입:
$ echo 'or' | trre '(:x)or'
xor

          + 전환을 통한 정규 표현식
               o 교대 사용:
$ echo 'cat dog' | trre 'c:bat|d:hog'
bat hog

               o 스타를 사용하여 변환 반복:
$ echo 'catcatcat' | trre '((cat):(dog))*'
dogdogdog

          + 범위 변환
               o 문자 범위 변환:
$ echo ""regular expressions"" | trre ""[a:A-z:Z]""
REGULAR EXPRESSIONS

          + 생성기
               o **trre**는 단일 입력에 대해 여러 출력 문자열을 생성할 수 있음.
               o 이진 시퀀스:
$ echo '' | trre -ma ':(0|1){3}'
000  001  010  011  100  101  110  111

     * 언어 사양
          + **trre**는 패턴-매칭:패턴-생성의 쌍으로 정의됨.
          + 패턴-매칭은 문자열이나 정규 표현식일 수 있음.
          + 패턴-생성은 일반적으로 문자열이지만 regex일 수도 있음.
     * 왜 작동하는가
          + **trre**는 **유한 상태 변환기(FST)**라는 특별한 자동자를 구축함.
          + FST는 입력-출력 쌍을 처리함.
     * 설계 선택 및 열린 질문
          + :의 결합성, 우선순위, 암시적 엡실론 등 여러 결정이 필요함.
     * 모드 및 탐욕성
          + **trre**는 두 가지 모드를 지원함:
               o 스캔 모드(기본): 변환을 순차적으로 적용함.
               o 매치 모드: 표현식에 대해 전체 문자열을 확인함.
     * 결정화
          + 비결정적 자동자를 결정적 자동자로 변환하는 과정이 중요함.
     * 성능
          + NFT(비결정적) 버전은 sed보다 약간 느림.
          + 복잡한 작업에서는 trre_dft(결정적 버전)가 sed보다 성능이 좋을 수 있음.
     * TODO
          + ERE 기능 세트 완성, 전체 유니코드 지원, 효율적인 범위 처리 등.
     * 참고 문헌
          + Russ Cox의 기사와 Cyril Allauzen, Mehryar Mohri의 논문에서 영감을 받음.

        Hacker News 의견

     * Cool, 이 프로젝트의 발전이 기대됨
          + 연산자 우선순위가 자연스럽지 않다고 느낌
          + cat:dog이 (cat):(dog)보다 ca(t:d)og로 해석되는 것이 이상함
     * XFST (Xerox Finite-State Transducer)를 추천함
          + 20년 이상 컴퓨터 언어학에 사용된 도구임
          + 핀란드어 형태소 분석에 FST를 사용하는 사례를 들음
     * 표준 정규 표현식의 대안으로 Rosie Pattern Language를 추천함
          + 그룹 논리에서 어려움을 겪는 사람들에게 유지보수 가능한 대안이 될 수 있음
          + 관련 링크 제공: GitLab, Rosie 공식 사이트
     * 1997년에 유한 상태 변환기에 대한 논문을 작성한 경험을 공유함
          + 주제는 형태소 분석이었으며, 과소평가된 주제였음
          + 구문에 대해 :가 ab보다 강하게 결합되도록 설정하는 것이 맞는지 질문함
     * 구조적 치환을 수행할 때 충분하지 않다고 느낌
          + 정규 표현식이 매치된 부분에 대해 구문 트리를 정의하므로, 트리의 일반적인 변환을 수행할 수 있으면 유용할 것임
     * 정규 표현식이 텍스트 편집에 부자연스럽다는 주장에 의문을 가짐
          + 프로젝트의 목적이 이 주장에 달려 있지만, 예시가 없음
          + 그룹 사용에 어려움을 겪는 이유를 이해하지 못함
          + 정규 표현식보다 이 프로젝트의 문법이 더 나은 이유를 설명하는 예시가 필요함
     * C 코드가 매우 깔끔하다고 칭찬함
          + README의 theory.pdf 링크가 잘못되어 수정이 필요함
     * *나 +를 사용하지 말라는 조언에 대해 의문을 가짐
          + 문법을 더 복잡하게 만들겠지만, 이를 허용하지 않는 것이 더 나을 것임
     * 첫 번째 예시가 이상하다고 느낌
          + echo 'cat' | trre 'c:da:ot:g'의 결과가 이상함
          + 구문 트리가 어떻게 구성되는지 이해하기 어려움
          + MS-DOS 시절의 검색/치환 방식이 더 직관적이라고 느낌
     * 예시들이 실제 프로그램의 출력인지 의문을 가짐
          + 문법에 대한 이해가 부족할 수 있지만, 예시들이 잘못된 것처럼 보임
          + echo 'cat dog' | trre 'c:bat|d:hog'의 결과가 이상함
"
"https://news.hada.io/topic?id=19173","Andrej Karpathy의 "ChatGPT와 같은 LLM 심층 분석" 영상 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Andrej Karpathy의 ""ChatGPT와 같은 LLM 심층 분석"" 영상 요약

  이 심층 분석은 누구를 위한 것인가?

     * LLM의 실제 작동 방식 이해: 표면적인 이해를 넘어 LLM의 작동 원리를 알고자 하는 사람.
     * 혼란스러운 미세 조정 용어 이해: chat_template와 ChatML 같은 용어를 이해하고자 하는 사람.
     * 프롬프트 엔지니어링 향상: 어떤 프롬프트가 더 잘 작동하는지 이해하고자 하는 사람.
     * 환각 줄이기: LLM이 잘못된 정보를 생성하지 않도록 하고자 하는 사람.
     * DeepSeek-R1의 중요성 이해: 현재 주목받고 있는 DeepSeek-R1의 중요성을 알고자 하는 사람.

  사전 훈련 데이터

    인터넷

     * LLM은 인터넷을 크롤링하여 방대한 텍스트 데이터셋을 구축함.
     * 원시 데이터는 중복 콘텐츠, 저품질 텍스트, 관련 없는 정보로 가득 차 있어 훈련 전에 철저한 필터링이 필요함.
     * 예를 들어, FineWeb 데이터셋은 12억 개 이상의 웹 페이지를 포함함.

    토큰화

     * 토큰화는 모델이 텍스트를 처리하기 전에 작은 조각(토큰)으로 나누는 방법임.
     * Byte Pair Encoding (BPE) 같은 기술이 사용됨.
     * GPT-4는 100,277개의 토큰을 사용함.

    신경망 입출력

     * 토큰화된 데이터는 신경망에 입력됨.
     * 모델은 학습한 패턴을 기반으로 다음 토큰을 예측함.
     * 오류를 줄이기 위해 가중치가 조정됨.

    신경망 내부

     * 모델 내부에서는 수십억 개의 매개변수가 입력 토큰과 상호작용하여 다음 토큰에 대한 확률 분포를 생성함.
     * 모델 아키텍처는 속도, 정확성, 병렬화를 균형 있게 설계함.

    추론

     * LLM은 결정론적 출력을 생성하지 않으며, 확률적임.
     * 매번 실행할 때마다 출력이 약간 다름.
     * 이 무작위성 때문에 LLM은 창의적일 수 있지만 때때로 잘못된 정보를 생성하기도 함.

  GPT-2

     * OpenAI가 2019년에 발표한 GPT-2는 초기의 트랜스포머 기반 LLM의 예임.
     * 16억 개의 매개변수, 1024-토큰 컨텍스트 길이, 약 1,000억 개의 토큰으로 훈련됨.
     * Andrej Karpathy는 llm.c를 사용하여 GPT-2를 $672에 재현함.

  오픈 소스 기반 모델

     * 일부 회사는 대규모 LLM을 훈련하고 기본 모델을 무료로 공개함.
     * 기본 모델은 원시 인터넷 텍스트로 훈련되어 완성을 생성하지만 인간의 의도를 이해하지 못함.
     * OpenAI는 GPT-2를 오픈 소스로 공개함.
     * Meta는 Llama 3.1(405B 매개변수)을 오픈 소스로 공개함.

  사전 훈련에서 후 훈련까지

     * 기본 모델은 많은 환각을 생성함.
     * 후 훈련은 모델을 더 나은 응답을 하도록 미세 조정함.
     * 후 훈련은 사전 훈련보다 훨씬 저렴함.

  지도 학습 미세 조정 (SFT)

    데이터 대화

     * 기본 모델은 인터넷 데이터로 훈련된 후 인간/어시스턴트 대화로 후 훈련됨.
     * 대화 템플릿을 사용하여 모델이 대화의 구조를 이해하도록 함.

    환각, 도구 사용 및 메모리

     * LLM의 주요 문제는 환각임.
     * Meta는 Llama 3 논문에서 사실성을 개선하는 방법을 설명함.
     * 도구를 사용하여 환각을 줄이는 방법도 있음.

  강화 학습

     * 모델은 인터넷 데이터로 훈련된 후 지식을 효과적으로 사용하는 방법을 모름.
     * 강화 학습(RL)은 시행착오를 통해 모델을 개선함.

    RL 작동 방식

     * RL은 모델이 다양한 솔루션을 실험하고 최적의 솔루션을 찾도록 함.
     * 예를 들어, 15개의 솔루션을 생성하고 4개만이 정답을 맞춤.

    인간 피드백을 통한 강화 학습 (RLHF)

     * 검증할 수 없는 도메인에서는 인간을 포함해야 함.
     * RLHF는 인간 피드백을 사용하여 모델을 개선함.

  앞으로의 전망

     * 멀티모달 기능: 텍스트뿐만 아니라 이미지, 오디오, 비디오도 이해하고 생성함.
     * 에이전트 기반 모델: 단일 작업을 넘어 장기 기억, 추론, 실수 수정 가능.
     * 보편적이고 보이지 않는 AI: 워크플로에 자연스럽게 통합됨.
     * 컴퓨터 사용 AI: 소프트웨어와 상호작용하고 텍스트 생성 이상의 작업을 수행함.

  LLM을 찾는 방법

     * 독점 모델: OpenAI (GPT-4), Google (Gemini), Anthropic (Claude) 등.
     * 오픈 웨이트 모델: DeepSeek, Meta (Llama) 등.
     * 로컬 실행: Ollama 또는 LM Studio 사용.
     * 기본 모델: Hyperbolic 탐색.

        Hacker News 의견

     * 원본 비디오가 Hacker News의 첫 페이지에서 사라진 후에도 논의할 좋은 장소를 찾고 있는 중임
     * 비디오를 보면서 몇 가지 궁금한 점이 생겼음
          + 수학과 LLMs
               o Andrej가 LLM에 제시한 예시들이 왜 대부분 계산 문제인지 궁금함
               o LLM의 계산 능력이 강력하고 유용해지고 있지만, 기본적인 능력은 아니라고 생각함
               o LLM의 핵심 능력을 보여주는 프롬프트와 수학적 계산을 구분했으면 좋겠음
               o 수학적 능력에 대한 논의나 LLM이 수학을 수행하는 지혜에 대한 좋은 참고 자료가 있으면 좋겠음
          + 메타
               o Andrej가 LLM이 다른 LLM을 훈련하고 평가하는 데 사용되는 상황을 간단히 언급했지만, 이에 대한 논의는 많지 않음
               o LLM을 사용하여 다른 LLM을 훈련/평가하는 것의 한계와 위험에 대해 더 알고 싶음
               o 초기 결과와 발전이 더 강력한 기술 개발로 즉시 피드백되는 것이 맨해튼 프로젝트와 원자 무기와 비슷하다고 느낌
     * Meta의 환각 문제 해결 접근 방식이 흥미로움
          + 훈련 데이터의 일부를 추출하여 Llama 3로 사실적 질문을 생성함
          + Llama 3가 답변을 생성하고 원본 데이터와 비교하여 점수를 매김
          + 틀린 경우 모델이 틀린 답변을 인식하고 거부하도록 훈련함
          + 이는 ML 엔지니어의 자연스러운 경향과 반대되며, 모델이 모르는 것을 인식하도록 가르치는 것이 중요함
     * Andrej의 비디오가 훌륭하지만 RL 부분 설명이 약간 모호하게 느껴짐
          + 올바른 답변에 대해 어떻게 훈련하는지 궁금함
          + 추론 과정을 수집하여 지도 학습처럼 훈련하는지, 아니면 점수를 계산하여 손실 함수로 사용하는지 궁금함
          + 보상이 매우 희소할 수 있으며, 문제가 너무 어려워 LLM이 올바른 답변을 생성할 수 없는 경우 어떻게 되는지 궁금함
          + 매개변수 업데이트가 순차적인데 LLM 훈련을 어떻게 병렬화할 수 있는지 궁금함
     * 원본 비디오 53분에서 LLM이 학습한 텍스트를 기반으로 인용하는 정확성을 보여줌
          + 대기업이 법원에서 이것이 저작권 침해가 아니라고 설득한 방법이 궁금함
          + 만약 내가 디즈니 캐릭터를 그리도록 모델을 훈련시켰다면, 즉시 소송당할 것이라고 상상함
     * 모델이 '완전히' 오픈 소스가 되려면 모델 자체와 실행 방법 외에도 데이터를 훈련할 수 있는 프로그램이 필요함
          + OSI의 오픈 소스 AI 정의를 참조할 것
     * LLM에 대한 많은 기사를 읽었고 일반적으로 어떻게 작동하는지 이해하지만, 다른 모델이 SOTA 모델만큼 잘 작동하지 않는 이유가 항상 궁금함
          + 현재 모델 아키텍처의 역사와 이유가 궁금함
     * 오늘 좋은 스레드를 봤음: [링크]
     * 그의 LLC in C가 그의 강좌를 위한 발판에 불과했다는 것이 아쉬움
     * 아마도 정말 훌륭한 강의의 훌륭한 요약임
          + 원본을 따라가려고 고민 중임
     * 비디오를 보지 않았지만 TL;DR의 토큰화 부분에 대해 궁금했음
          + 링크된 기사에서 토큰화된 텍스트를 보면 ""I View""가 아니라 실제로는 파이프 ""|""임
          + @miletus가 Hacker News 댓글에 게시한 링크의 3단계에서 토큰화된 텍스트는 ""|Viewing Single (Post From) . . .""임
          + 대문자 사용(View, Single)이 문장의 이 부분을 볼 때 더 의미가 있음
"
"https://news.hada.io/topic?id=19158","Show GN: ClueHunter Perplexity : AI 답변의 증거를 웹페이지에서 빠르게 찾아주는 크롬 익스텐션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: ClueHunter Perplexity : AI 답변의 증거를 웹페이지에서 빠르게 찾아주는 크롬 익스텐션

     * Perplexity와 같은 AI 검색 툴에서도 잘못된 정보를 말하는 환각 증세의 가능성은 항상 존재합니다.
     * 이를 보완하기 위해 답변에 인용 출처가 남겨지지만, 실제로 AI가 인용한 문장을 찾는 일은 귀찮고 시간이 걸립니다.
     * ClueHunter Perplexity는 AI 답변을 뒷받침하는 증거 문장을 웹페이지에서 찾아 자동으로 하이라이팅 해줍니다.
     * webGPU 기반의 리랭커 모델과 BM25 기반으로 API 키나 회원가입을 요구하지 않습니다.
     * 어떤 서버도 사용하지 않기 때문에, 개인정보 유출에 대한 걱정이 없습니다.
     * 완전 오픈소스 프로젝트로 소스코드를 직접 확인하고 기여할 수 있습니다.
"
"https://news.hada.io/topic?id=19088","Show GN: 키프레임 편집을 제공하는 오픈소스 영상 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: 키프레임 편집을 제공하는 오픈소스 영상 편집기

     * 최근에 키프레임 기능을 조금 손보고 FFmpeg 스트림 기반 렌더링 방식을 새로 적용
     * 이에 따라 영상을 비롯한 이미지, 텍스트, SVG와 같은 요소에도 여러가지 키프레임 애니메이션을 추가 가능
     * Electron과 Lit.js의 조합으로 만들어졌으며,
     * 타임라인과 프리뷰 화면은 모두 Canvas API를 통해 개발.
     * 키프레임 기능은 3차 베지어 커브 곡선 공식을 활용해 개발.
     * 이외에도 WebGL과 같은 그래픽 처리 기능도 구현할 수 있어, 앞으로 렌더링 엔진의 변화가 충분함.
     * 해당 오픈소스는 범용적인 영상편집기를 구현하는데 목적이 있음.
     * 활용 목적에 따라 숏츠 생성, 롱폼 영상 편집, 키프레임 애니메이션 편집등 사실상 이 모든 기능을 지원하는 도구를 개발하는게 목적.
     * 오늘자로 0.4.2 버전을 새로 릴리즈 함.

   GitHub : https://github.com/cartesiancs/nugget-app

   Demo : https://www.youtube.com/watch?v=Bh06VOYSMIM
"
"https://news.hada.io/topic?id=19150","리마커블2를 비전-LLMs 인터페이스로 활용하는 Ghostwriter","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 리마커블2를 비전-LLMs 인터페이스로 활용하는 Ghostwriter

     * remarkable2에서 손글씨를 인식하고, 제스처나 화면의 콘텐츠에 따라 반응하여 화면에 다시 쓰는 실험
          + 손글씨와 화면 상호작용을 탐구하는 프로젝트

  설정/설치

     * OPENAI_API_KEY와 같은 환경 변수를 설정해야 함.
     * remarkable에 바이너리를 설치하고 실행해야 함.

  사용법

     * ghostwriter를 remarkable에서 시작해야 함.
     * 화면에 그림을 그리고, 오른쪽 상단을 터치하여 보조 기능을 활성화할 수 있음.
     * 처리 중에 점이 그려지고, 타이핑되거나 그려진 응답을 볼 수 있음.

  상태 / 일지

     * 2024-10-06: 기본 개념 증명 완료. 화면에 다시 그리는 기능이 잘 작동하지 않음.
     * 2024-10-07: 기본 제스처 및 상태 표시 구현.
     * 2024-10-10: 가상 키보드 설정 시작.
     * 2024-10-20: 텍스트 출력 및 기타 모드 도입.
     * 2024-10-21: 바이너리 릴리스 빌드 완료.
     * 2024-10-23: 코드 리팩토링 및 새로운 Anthropic 모델 테스트 계획.
     * 2024-11-02: 도구 제공으로 전환.
     * 2024-11-07: Claude/Anthropic 추가.
     * 2024-11-22: 평가 시스템 스케치 시작.
     * 2024-12-02: 기본 이미지 분할 단계 추가.
     * 2024-12-15: 엔진 통합.
     * 2024-12-18: 시스템 업그레이드 문제 해결.
     * 2024-12-19: 로컬 네트워크 VLM 모드 시도.
     * 2024-12-22: 평가 시스템 구축 시작.
     * 2024-12-25: CLI 단순화 및 확장.
     * 2024-12-28: 사용성 개선.

  아이디어

     * 제스처나 콘텐츠로 요청을 트리거.
     * 스크린샷을 비전 모델에 입력하고, 결과를 화면에 출력.
     * 키보드 이벤트 전송 가능.
     * 기본 평가 시스템 구축.
     * 프롬프트 라이브러리 개발.
     * 초기 설정 자동화.
     * 다이어그램 생성 기능 추가.
     * 외부 정보 조회 및 전송 기능 추가.
     * 대화 모드 구현.
     * 네트워크 로컬 VLM 사용 시도.

  참고 자료

     * Awesome reMarkable에서 자원 활용.
     * reSnap에서 화면 캡처 기술 적용.
     * rmkit lamp에서 화면 그리기 영감 얻음.
     * resvg로 SVG를 png로 변환.
     * rM-input-devices로 키보드 입력 장치 생성.
     * reMarkableAI에서 OCR→OpenAI→PDF→Device 프로세스 발견.
     * rMAI는 별도의 앱으로 모델 API 서비스로 replicate 사용.
     * Crazy Cow는 텍스트를 펜 스트로크로 변환하는 도구.

        Hacker News 의견

     * 프로젝트 작성자임. 프로젝트는 지속적으로 진행 중이며, 시각 모델의 공간 인식 한계가 가장 큰 통찰임
          + https://github.com/awwaiid/ghostwriter/…에서 기본적인 평가 예시를 볼 수 있음
          + 다음 목표는 yaml+shellscript 에이전트 프레임워크/도구로 구축 및 추출을 계속하는 것임
          + 공간 인식을 위한 사전 분할 또는 다른 방법을 계속 탐구하는 것임
          + 많은 점 대신 실제 펜 스트로크를 보내는 reSvg 백엔드를 작성하는 것임
     * 정말 멋짐. reMarkable 태블릿을 위한 앱을 해킹하는 사람들을 보는 것이 좋음
          + 나도 reMarkable을 위한 작은 앱을 만들었고, 얼마 전에 여기에서 공유했음: https://digest.ferrucc.io/
     * reMarkable 태블릿이 너무 잠겨 있지 않았으면 좋겠음
          + 내가 가장 좋아하는 하드웨어 중 하나이며, 더 많은 앱이 있었으면 좋겠음
     * 멋짐
          + 몇 달 동안 이것을 구현해보고 싶었음. 정말 잘했음
     * 정말 멋짐. 이번 주말에 시도해볼 것임
          + PDF를 이메일로 보내고 LLM에 전송하여 할 일을 작성할 때 자동으로 작업을 생성하는 아이디어를 가지고 놀고 있었음
          + 이 프로젝트는 실시간으로 목표를 달성할 수 있는 더 나은 방법을 열어줌
     * PDF 문서 독자를 위해, reMarkable의 11인치 크기가 충분한지 궁금함
          + 나는 13인치 Sony DPT 2세대 버전을 가지고 있으며, 완벽한 시청 경험임
          + 그러나 이러한 프로젝트는 계속해서 reMarkable 제품으로 나를 끌어들임
     * 이 프로젝트를 사랑함. 벡터 확산 모델이 있는데, 모델이 무언가를 그리기로 결정하면 도구 호출을 통해 외주를 맡기는 것이 어떨까?
          + 그런 다음 좌표 범위와 프롬프트를 지정할 수 있음
     * 손글씨 입력과 LLM을 결합한 이 사용 사례는 훌륭함
          + 흐트러진 손글씨를 얼마나 잘 처리하는지, 개인 메모에 대한 미세 조정이 시간이 지남에 따라 인식을 개선할 수 있을지 궁금함
     * 나는 boox 태블릿(전체 안드로이드 태블릿과 eink 화면)을 소유하고 있으며, 이러한 것이 완벽할 것임
          + 5년 후 모바일 하드웨어가 로컬에서 이를 지원할 수 있을지 궁금함
     * 안드로이드 기반 Onyx Boox 전자책 리더에서 이 프로젝트는 어떨까?
          + 가능할까?
"
"https://news.hada.io/topic?id=19093","Show GN: Dearly: 친구에게 말하기 어려웠던 연애 고민을 털어 놓아보세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: Dearly: 친구에게 말하기 어려웠던 연애 고민을 털어 놓아보세요

   Cursor와 함께 혼자 만든 Dearly 앱을 출시 했습니다!

   요즘 연애 고민, 털어놓기 망설여지는 일이 있으셨다면...
   친구에게 말하기 어려웠던 대화 캡처를 Dearly에 올려보세요
   AI가 대화 맥락을 분석해, 맞춤형 연애 조언 제공해 줍니다

   아차, 개인정보가 걱정되신다구요?
   매일 자정마다 대화 목록이 자동으로 삭제되어 안심하고 언제든 고민을 나누실 수 있어요

   Cursor와 앱을 어떻게 혼자서 앱을 만들었는지 궁금하시다면 댓글 달아주세요
   제가 갖고 있는 모든 노하우를 최대한 공유해보도록 할께요!

   다운로드 링크 (IOS 앱)
   https://apps.apple.com/kr/app/…

   일/월 매출은 어느정도 나오시나요?

   어떤 언어모델을 사용하시는건가요? 사용요금은 어떻게 충당하시는지 궁금합니다. 우선 투자하시는 건지요

   GPT-4o, GPT-4o mini 번갈아 가며 쓰고 있습니다
   비용은 구독으로 충당하고 있어요!

   그렇군요 답변 감사드립니다!

   app store에서 확인해 보니 구독으로 요금을 충당하는 거 같네요 :)
"
"https://news.hada.io/topic?id=19056","컴퓨터는 절대 책임을 질 수 없습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         컴퓨터는 절대 책임을 질 수 없습니다.

     * 1979년 IBM 내부 교육에서 나온 전설적인 페이지가 AI 시대에 적절함

     A COMPUTER CAN NEVER BE HELD ACCOUNTABLE
     컴퓨터는 절대 책임을 질 수 없습니다.
     THEREFORE A COMPUTER MUST NEVER MAKE A MANAGEMENT DECISION
     따라서 컴퓨터가 관리 결정을 내려서는 안 됩니다.
     * 트위터에서 원본 출처에 대한 정보를 요청했는데, Jonty Wareing이 답변함:
          + 누군가가 아버지의 작업 문서에서 발견되었고, 이후 홍수로 파괴됨
          + IBM 아카이브와의 교신에서 찾을 수 없었음. 지사에서 아카이브되지 않은 자료를 생산하는 것이 일반적이었음.
     * Jonty가 IBM으로부터 받은 답변
          + 이미지가 처음 온라인에 공유된 것은 2017년 2월 @bumblebike의 트윗
          + 1979년 내부 교육 자료에서 나온 것임을 확인함
          + 2021년 12월 @bumblebike의 또 다른 트윗: 2019년 홍수로 대부분의 물건과 함께 파괴됨
          + 은퇴자 클럽 줌 미팅에서 문의했으나 적절한 연령대의 사람이 거의 없음

        Hacker News 의견

     * 컴퓨터 사용이 책임 회피의 수단으로 사용됨을 지적함. Neil Postman의 책 <i>Technopoly</i>에서 인용된 문구를 통해 설명함. 컴퓨터가 마치 진정한 권위의 원천인 것처럼 보이게 하여, 책임을 회피하는 경향이 있음
     * 자율주행차에 대한 의문을 제기함. 책임이 운전자에서 제조사로 이동하게 되며, 제조사가 그 책임을 원할지 의문임
     * 칩 카드의 도입이 은행의 책임을 사용자에게 전가하기 위한 것임을 주장함. 보안이 강화되었지만, 실질적으로는 신용카드 사기 책임을 사용자에게 넘기려는 의도임
     * 신원 도용도 마찬가지로 은행 사기임을 강조함. 이를 신원 도용이라 부름으로써 은행의 문제가 아닌 개인의 문제로 전환됨
     * 기업은 책임을 싫어하며, 이는 모든 사람이 싫어하는 것임을 언급함
     * 어떤 회사에서는 관리자가 책임을 질 수 있기 때문에 결정을 내리지 않으려는 정책이 있음
     * ""책임""이라는 단어가 이제는 의미 없는 치료적 언어가 되었음을 지적함. CEO가 책임을 진다고 말하지만 실제로는 아무런 결과가 따르지 않음
     * Norbert Wiener의 책 <i>God & Golem Inc.</i>에서 인용된 문구를 통해, 사람들이 자동 계산기에서 원하는 것은 더 정확한 계산이 아니라 책임을 전가할 수 있는 상자임을 설명함
     * 법적 원칙으로는 운영자가 책임을 져야 한다고 주장함. 그렇지 않으면 방화 예방을 위해 성냥을 금지해야 한다는 비유를 사용함
     * ""알고리즘""과 관련된 현재의 AI 열풍 이전에도 이미 이런 일이 발생했음을 언급함
     * 디지털 포렌식에서 사용되는 원칙이 역으로 적용됨을 설명함. 법정에서 디지털 포렌식 조사관은 기기에서 수행된 작업을 증언할 수 있지만, 누가 그 작업을 했는지는 알 수 없음
     * 컴퓨터가 매우 결정론적으로 보이지만, 실제로는 불확실성이 존재함을 전문가가 설명할 때 일반인들이 충격을 받음
     * 소매점 보안 경보가 울릴 때, 컴퓨터가 문제를 일으켰다고 사회적으로 정상화된 사례를 언급함. 컴퓨터가 문제를 일으킨 것처럼 보이지만, 실제로는 그렇지 않음

   ""결정에 책임질 수 없는 사람은 절대 관리자가 되어서는 안 된다.""
"
"https://news.hada.io/topic?id=19081","업계에서 10년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   업계에서 10년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들

     * 4년 전에도 같은 주제로 글을 작성했고, 10년째에 돌아보기로 해서 다시 작성함

바뀐 생각들

     * 단순함은 저절로 주어지지 않고, 지속적 노력이 필요한 요소임
     * 복잡성을 관리하거나 이해하는 것에 자부심을 가질 이유가 없음을 깨달았음
     * 다양한 경험 수준이 섞인 팀에서는 Typed 언어가 필수적임
     * Java는 재미없어서 오히려 훌륭한 언어임
     * REPL은 설계 도구로서는 유용하지 않지만 탐색적 용도로는 유용함
     * 실제 프로그래밍은 코드를 작성하기 전 단계에서 거의 다 이루어져야 함
     * Frontend 개발은 Kafkaesque 악몽과 같은 영역이 되었고, 더 이상 즐겁지 않음
     * 우아함이라는 개념은 실제 측정 지표가 되지 못함
     * 제대로 된 매니지먼트는 매우 귀중한 존재임 (오랜 경력 동안 제대로 된 매니지먼트를 거의 보지 못했음)
     * DynamoDB는 특정 워크로드에 정확히 부합한다면 좋은 데이터베이스임
     * 객체지향은 잘 맞는 영역에서 탁월한 방식임. Functional만 맹신하는 태도는 어리석음

얻게 된 의견들

     * 엔지니어링의 핵심은 소통
     * Java에서 Monad 개념을 너무 심하게 적용하면 안 됨
     * Query Planner는 혹독한 존재임
     * 어떤 것이 '쉽다'고 느끼는 순간은 사실 제대로 이해하지 못했다는 신호임
     * 신입 개발자에게 탐구와 실수를 할 수 있는 여유를 주어야 함
     * Soft skill을 적극적으로 발전시켜야 함. 투자 효과가 즉각적으로 나타남
     * 일반 애플리케이션 개발에서는 '진짜 범용 추상화'라는 것이 거의 없음. 필요한 코드만 작성하는 편이 좋음
     * 반면, 라이브러리 개발은 추상을 설계하는 일임. 올바른 구조(알제브라적 형태)를 찾는 데 시간을 들여야 함
     * ORM은 모든 언어, 모든 구현에서 문제가 많음. 그냥 SQL을 직접 작성하는 편이 나음
     * Functional 프로그래밍의 문제는 종종 그 신봉자들 때문임
     * 충분히 오랜 기간이 지나면 Serverless Functions 위에 시스템을 쌓은 것을 크게 후회하게 됨
     * Type은 우리가 세상을 바라보며 내리는 단언임
     * 분산 락은 여전히 대단히 어려운 문제임
     * 형식적 모델링과 분석 능력은 반드시 갖춰야 할 역량임
     * 통합 테스트 스위트에서 가장 중요한 특성은 격리성임
     * DynamoDB는 일반 애플리케이션 개발을 위한 최악의 선택이 될 수도 있음
     * 대부분의 사람들은 코드 '장인 정신'에 크게 관심이 없음. 관심을 가지는 사람을 소중히 대하되, 나머지 사람들과는 그들이 있는 자리에서 협업해야 함
     * Gradual, dependently typed 언어가 미래라는 생각임
     * 테스트 코드에는 아무리 많은 주석을 달아도 부족함이 없다는 확신임

바뀌지 않은 의견들

     * 코드 스타일, 린팅 규칙 등 사소한 문제에 집착하는 사람들은 여전히 이상한 부류라고 생각함. 더 중요한 것에 집중해야 함
     * 코드 커버리지는 코드 품질과 무관하다는 입장을 유지함 (많은 경우 반비례하는 경향도 있음)
     * Monolith는 여전히 괜찮은 선택이라고 여김
     * 수십 년간 축적된 RDBMS 연구와 개선을 이기는 것은 어렵다는 점을 인정함
     * Micro-service를 적용하려면 합당한 이유가 필수적임 (요즘 점점 당연시되는 경향이 아쉬움)
     * 대부분의 프로젝트(심지어 AWS 내부 프로젝트도 마찬가지)는 실제로 '스케일링'이 필요 없고, 오히려 스케일링을 전제로 설계하면 해가 되는 경우가 많음
     * 프로젝트 매니저의 93%, 어쩌면 95.2% 정도는 사라져도 별 영향이 없거나 오히려 효율성이 높아질 것이라는 생각임 (4년 전보다 비율이 상승했음)

     * 15년 차에는 또 어떻게 달라질지 지켜볼 예정임

   대부분 공감가는 이야기

   Java는 재미없어서 오히려 훌륭한 언어임
   어떤 의미인가요?

   누가짜도 비슷비슷해서 유지관리가 편하다, 뭐 그런 의미가 아닐까요.

   특별히 더 신경쓰거나 개발자를 놀라게 할 부분이 없어 그 자체로 안정감이 있다는 뜻으로 말한게 아닐까 싶습니다.

   코드 스타일이나 린팅과 관련한거는 상당부분 툴로 해결할 수 있는 부분이라, 반대로 신경 안쓰는 분들 만나면 같이 일하기 싫더라고요.

   동의합니다. 저는 CI 에 스타일 체크를 추가해서 스타일을 준수하지 않으면 머지도 못하게 막도록 하고 있습니다.

     코드 스타일, 린팅 규칙 등 사소한 문제에 집착하는 사람들은 여전히 이상한 부류라고 생각함. 더 중요한 것에 집중해야 함

   https://www.youtube.com/watch?v=JcY35HD77lg&t=828s
   하지만 그냥 넘어가서는 안되는데, 사람인 이상 집중하기 어렵게 만드는 요소이므로 해결하고 진행하는 편이 좋다는 말도 있습니다.

   업계에서 6년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들

        Hacker News 의견

     * 코드 스타일이나 린팅 규칙에 집착하는 사람들을 이상하게 보는 의견이 있음. 그러나 세부 사항에 신경 쓰는 것은 장인 정신을 소중히 여기는 것임
          + 코드 작성 전에 대부분의 프로그래밍이 완료되어야 한다는 의견에 반대하는 개발자가 있음. 코딩과 설계를 반복적으로 진행하는 것이 중요하다고 생각함
          + 복잡성을 관리하고 이해하는 것이 중요하다는 의견이 있음. 단순한 시스템은 복잡성을 다른 곳으로 옮길 뿐임
          + Java가 지루한 언어라는 의견에 반대하는 사람도 있음. Spring 같은 Java 코드는 지루하지 않고 재미도 없다고 생각함
          + 코드 작성 없이 프로그래밍이 완료되어야 한다는 의견에 반대하는 사람도 있음. 코드를 작성하지 않으면 현실에서 벗어나기 쉽다고 생각함
          + 형식적 모델링과 분석이 필수적이라는 의견에 반대하는 사람도 있음. 실험이 더 중요하다고 생각함
          + 테스트 코드에 주석을 많이 다는 것이 좋다는 의견이 있음
          + 프론트엔드 개발이 악몽 같다는 의견이 있음. 그러나 React + Typescript + MobX 앱을 업데이트하는 데 큰 문제가 없었음
          + 소프트웨어 개발은 조직의 단계에 따라 다르게 보아야 한다는 의견이 있음. 스타트업과 시장 적합성이 확립된 조직은 다르게 접근해야 함
          + Java의 Checked Exceptions가 좋은 아이디어였다는 의견이 있음. 더 나은 오류 처리를 위해 약간의 문법적 개선이 필요했음
          + 모놀리식 아키텍처가 여전히 좋다는 의견이 있음. RDBMS의 연구와 개선을 이기기 어렵다고 생각함
          + 혼합된 경험 수준의 팀에서는 타입이 있는 언어가 필수적이라는 의견이 있음. 프로그래머의 관점을 고려해야 함
          + 프로젝트 매니저의 대부분이 없어져도 큰 영향이 없을 것이라는 의견이 있음
          + 코드 스타일에 대한 스트레스는 프로젝트 스타일을 맞추는 것이 중요하다는 의견이 있음
          + 프론트엔드 개발이 악몽 같지만 가끔 즐긴다는 사람도 있음
          + 우아함은 진정한 지표가 아니라는 의견이 있음. 우아한 솔루션이 항상 실용적이지는 않음
          + DynamoDB가 일반 애플리케이션 개발에 최악의 선택이라는 의견이 있음. SQL이 더 적합한 경우가 많음

   대부분의 프로젝트는 스케일링이 필요한 순간이 영원히 오지않거나, 필요해지기 전에 사라지죠...

   Gradual, dependently typed languages 가 뭘까요..?

   팟캐스트에서 줏어 듣기로, 값이 타입에 영향을 주는 그런 타입시스템이라고 들었습니다. 이 글의 저자가 뻥셔널 언어 언급하는거 보니 그 얘기가 맞을겁니다. 뻥셔널 언어쪽에서 연구하고 만들고 있는거다보니....

   예를 들면, List 타입이... 값들이 다 정렬이 되 있으면 SortedList 가 되는....

   이런 성질이 있으면, 컴파일 시간에 타입검사가 더 많은걸 증명할 수 있겠죠.

   어떤 함수가 SortedList 를 받아서 Sorted List 가 리턴되는 함수라면... 그런데 만약에 코드가 버그가있어서 Sort 상태를 깨버리면 컴파일 할때 type 에러가 나는거죠.

   당연히.... 타입검사의 비용은 상당히 비싸겠죠...

   실용성이 어디까지 와 있는지는 전혀 감이 안오네요.

   아하 감사합니다. 싱기방기하게 들리네요...

   정적, 동적 타입간에 유연하게 이동하며 적용 가능한 언어를 의미한다고 합니다.

     대부분의 사람들은 코드 '장인 정신'에 크게 관심이 없음. 관심을 가지는 사람을 소중히 대하되, 나머지 사람들과는 그들이 있는 자리에서 협업해야 함

   공감..

   서버리스위에 시스템을 쌓아서 후회중인 1인.

   콜드스타트는 여전히 느리고,
   어느순간 트래픽이 폭증하면서 온디멘드와 별반 차이가 없어졌고,
   오만 수단을 다 동원해도 배포가 너무 느림.

   코드 커버리지는 코드 품질과 무관경우라면
     * 커버리지가 형편없이 낮아 (제 기준으로는 80프로) 의미가 없거나
     * 테스트 시나리오가 오로지 정상코드에서만 동작하는 노멀 시나리오만 작성되었을 경우

   두가지가 아닐까 생각합니다.

   테스트 코드는 높은 커버리지와 에러를 유발하는 다양한 시나리오로 같은 부분을 다른 인풋으로 여러번 테스트할때 비로소 의미를 가지게 된다고 생각합니다.

   후자의 의미로 해석하는 편이 와닿네요. 코드 커버리지라는 숫자가 높은 게 코드 품질과 직결되는 게 아니라, 의미 있는 테스트 케이스로 채우는 게 중요하니까요

     Java는 재미없어서 오히려 훌륭한 언어임

   뭔가 웃기네요 ㅋㅋㅋ

   공감합니다

     일반 애플리케이션 개발에서는 '진짜 범용 추상화'라는 것이 거의 없음. 필요한 코드만 작성하는 편이 좋음
"
"https://news.hada.io/topic?id=19124","HN 공개: 주거 선호도를 기반으로 도시를 히트맵으로 보여주는 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HN 공개: 주거 선호도를 기반으로 도시를 히트맵으로 보여주는 웹사이트

     * 프로젝트 소개
          + There to Where 프로젝트는 사용자가 관심 있는 장소와의 근접성을 기반으로 부동산 목록을 평가할 수 있도록 도와주는 도구임.
          + Google Maps 탭을 여러 개 열어놓고 비교할 필요가 없으며, 직장과 멀리 떨어진 곳을 실수로 선택하는 일을 방지할 수 있음.
          + 한 페이지에서 모든 것을 처리할 수 있는 기능을 제공함.
     * 주요 기능
          + Distance Matrix: 직장, 친구, 체육관, 체스 클럽, 선호하는 식료품점 등과의 거리를 확인할 수 있는 기능 제공.
          + City Heatmap: 사용자의 선호도에 맞는 도시의 특정 지역을 시각적으로 확인할 수 있는 기능 제공.
          + Saved Heatmaps: 저장된 히트맵을 확인할 수 있는 기능 제공.
     * 추가 기능
          + Chrome 확장 프로그램을 통해 더욱 편리하게 사용할 수 있음.

        Hacker News 의견

     * 사용자가 원하는 기준은 ""식료품점까지 도보 거리"", ""클라이밍 체육관까지 자전거 거리"", ""국립공원까지 1시간 거리""와 같은 추상적인 것임.
     * 히트맵을 좋아하지만, 과거에 만든 일반적인 카테고리의 히트맵은 유용하지 않았음.
     * 주택 선호도를 제목에 반영할 필요가 있음. 예를 들어, 5개 이상의 침실과 3개 이상의 욕실을 원하는 히트맵임.
     * 현재 기차와 자전거로 통근하지만, 시스템은 하나만 필터링할 수 있어 아쉬움. 보통 걷기+대중교통은 가능하지만 자전거+대중교통은 어려움.
     * 새로운 집을 찾고 있으며, 공원, 초등학교, 식료품점과의 거리 등을 고려하고 있음. ""근처 검색"" 기능에서 많은 학교가 검색되는데, 특정 도시 내의 학교만 추가할 수 있는 기능이 필요함.
     * 아내의 직장과 자신의 직장을 입력했을 때, 현재 거주지가 좋은 위치임을 보여줌. 하지만 ""최고의 매치만 표시"" 기준이 너무 공격적임.
     * 초기 기준에 ""식료품점""이나 ""체육관""과 같은 일반적인 것을 추가하고 싶음. 추가 기준이 상단에 추가되는 것이 직관적이지 않음. 교통수단을 혼합할 수 있는 옵션이 필요함.
     * 식료품점까지 도보로 갈 수 있고, 교통량, 범죄, 쓰레기가 적으며, 가격이 적당한 곳에 살고 싶음. 하지만 이 기능은 이를 다루지 않음.
     * 현재 거주하지 않는 도시에서 검색하고 싶지만, 항상 현재 위치와 가까운 곳으로 검색됨. OSM을 사용한 점은 좋음.
     * 아이디어는 좋지만 데이터가 약간 부정확함. 15분 거리로 설정했을 때, 실제로는 더 가까운 거리에 있음.
"
"https://news.hada.io/topic?id=19082","a16z: AI Voice Agent의 현재 - 2025","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    a16z: AI Voice Agent의 현재 - 2025

우리의 Thesis - ""왜 음성인가?""""

     * 음성은 AI 활용성 측면에서 강력한 돌파구 역할을 함
     * 기업 입장에서는 AI를 통해 인력을 대체하고 24시간 고객 대응이 가능해짐
     * 소비자 입장에서도 음성이 주요 AI 인터페이스가 될 것이라는 전망이 있음
     * 현재는 AI 음성 인프라가 어느 정도 정착되고, 다양한 애플리케이션에서 음성을 본격적으로 활용하기 시작한 시점임
     * 모델 성능이 개선됨에 따라 음성 자체가 제품이 아닌, 시장 진입을 위한 ‘웨지(wedge)’로 작동하게 될 것이라는 관측이 존재함

그간 발표된 새로운 것들

     * 2024년 5월: OpenAI가 GPT-4o voice를 출시해 실시간 음성 대응 기능을 선보임, Cartesia가 Sonic 발표
     * 2024년 6월: Character가 음성 통화 기능을 베타로 도입, Apple이 Siri에 ChatGPT 통합 발표
     * 2024년 7월: OpenAI가 Advanced Voice 롤아웃 진행, Speechmatics가 Flow 모델 공개
     * 2024년 8월: Amazon이 Claude를 Alexa에 통합, Meta가 유명인 목소리를 활용한 AI 동반자 제공
     * 2024년 9월: NotebookLM이 Audio Overview로 화제 얻음, PlayHT가 2.0 모델 공개
     * 2024년 10월: OpenAI가 실시간 API 출시, Kyutai가 모시(Moshi) 모델 발표
     * 2024년 11월: ElevenLabs가 Conversational AI 출시, NVIDIA가 Fugatto 모델 발표, Gemini Live가 실시간 앱 공개
     * 2024년 12월: ChatGPT Advanced Voice Mode에 인터넷 검색 탑재, 1-800-CHATGPT 출시로 화제 모음

뭐가 바뀌었나?

     * 모델 인프라가 간소화되고, 낮은 지연시간 및 높은 성능을 갖춘 음성 에이전트가 등장함
     * 최근 6개월간의 신형 대화형 모델이 이러한 성능 향상의 큰 원동력임
     * 비용 감소도 진행 중으로, 2024년 12월 OpenAI는 GPT-4o 실시간 API의 가격을 크게 낮춤
     * GPT-4o mini 역시 실시간 버전으로 제공됨

현재 상황

     * 모델 품질
          + 대화 품질(지연시간, 끼어들기 가능성, 감정 표현 등)이 대부분 해결된 수준임
          + OpenAI의 실시간 음성 모델과 다른 모델들의 발전으로, 콜센터/BPO보다 높은 성능을 보이는 사례도 있음
     * GTM(go-to-market)
          + 에이전트 제품은 인력을 직접 대체해 빠르게 확산 가능함
          + 다만 진입 장벽이 낮기도 하며, 보수적인 대기업은 도입 장벽이 큼
          + GTM 실행력과 추가 제품 단계(act 2)가 성공의 핵심 요소임
     * 수익화
          + 초기에는 분당 요금제 중심이었으나 모델 비용이 급격히 내려가면서 가격 압박이 심화됨
          + 향후에는 플랫폼 이용료 + 사용량 기반의 복합 과금 모델이 등장할 것으로 예상됨
     * 경쟁 양상
          + 기업 대상 음성 에이전트는 개발자 중심 플랫폼, 노코드 형태의 범용 플랫폼, 특정 업종에 특화된 솔루션과 경쟁 중임
          + 경쟁이 더욱 치열해질 전망임

시장 진화

     * 2024년 하반기에 음성 에이전트 시장이 급속도로 성장함
     * 다양한 상품이 음성 기능을 추가하는 추세임
     * 대화형 음성 스택의 여러 레이어에서 신규 자금 유치와 실질적 고객 확보가 활발함
     * 특히 대기업에서 사람 콜 업무를 전부 AI로 대체하기보다는 일부 전화 유형으로 먼저 시작해 점차 확장하는 경향이 있음
          + 야간·과부하 콜: 일반적으로 음성메일로 넘어가던 전화를 AI로 처리해 일정 수준의 정보 수집 및 거래 처리 가능
          + 신규 아웃바운드 콜: 경제성이 낮아 기존에는 하지 않았던 전화가 가능해져 추가 매출 또는 비용 절감 효과 기대
               o ‘백오피스’ 콜: 다른 회사나 기관에 전화를 걸어야 하는 업무 자동화로 효율 증가 가능

시장 진화 - 투자 유치 사례

     * 모델 회사
          + ElevenLabs, Hume, PlayAI, Cartesia, WaveForms AI 등에서 시리즈 B와 시드 라운드에 걸친 대규모 투자 유치 소식이 이어짐
     * 범용 플랫폼
          + Kore, Rasa, Parloa, PolyAI, Synthflow, Thoughtly, Bland 등에서 시리즈 A~C 투자 유치 진행
          + 특정 산업(세일즈, 커스터머 서포트 등)에 집중한 11x, Decagon, Sierra, Artisan 등도 주목받음
          + Vapi, Retell AI와 같은 개발자 플랫폼도 등장함
     * 버티컬 플랫폼
          + Hippocratic AI, Assort Health, Voicepanel, Letter, Solidroad 등 헬스케어·인사·비상 대응 같은 특화 영역에서 다수 스타트업이 투자받음
          + Wayfaster, HappyRobot 등도 물류·인터뷰 분야 등에서 투자 유치에 성공함

중요 버티컬 시장

     * 음성 에이전트가 가장 먼저 도입될 가능성이 높은 곳은 콜센터/BPO 지출 규모가 큰 업종임
     * 금융, 보험, B2C, B2B, 정부, 헬스케어 등 주요 업종은 각자 고유한 음성 솔루션을 확보할 가능성이 높음
     * 아래 분야에서 창업자가 활발하게 시도할 것으로 예상됨
          + Financial services (예: 채무 추심)
          + Insurance (고객 대응 및 백오피스)
          + Government
          + Support services (전문 지식이 필요한 IT 지원 등 복잡한 고객 응대)
     * 콜센터 범주를 벗어난 영역에서도, 높은 연봉 직군을 대상으로 코칭/트레이닝 용 AI 음성 에이전트에 대한 지불 의향이 확인됨
          + 현실적인 음성 에이전트가 ‘시뮬레이터’ 역할을 하여 업무 역량을 크게 향상시킬 수 있음
          + 이를 통해 세일즈 코치 등 인력비 또는 기존 저효율 소프트웨어를 대체할 수 있음

주목할 버티컬 - YC 기업 동향

     * YC에 참여한 음성 에이전트 기업이 빠르게 증가 추세임
     * B2B (~69%)와 헬스케어 (~18%)가 주류이며, B2B 하위 분야로는 핀테크와 고객 지원 관련 스타트업이 다수임
     * 헬스케어 분야는 프런트오피스(환자 대상)와 백오피스(약국, 보험사 등 대상)로 나뉨
     * 전반적으로 스타트업들이 음성 에이전트로 다양한 업계 문제를 해결하려 시도 중임

우리가 찾고 있는 것

     * 전화가 핵심 채널이거나 규제·효율 관점에서 전화가 최적화된 산업
          + 전화가 고객 데모의 우선 수단이 되거나 (예: 물류)
          + 규제상 통화가 더 효과적이거나 (예: 채무 추심)
          + 다른 접근보다 성공률이 높은 영역 (예: 헬스케어)
     * 통화 구조가 명확하고 측정 가능해야 함
          + 수집해야 할 데이터 포인트나 전달해야 할 정보가 분명함
          + 결과를 측정하기 쉬워, 기업이 AI 음성 에이전트 도입을 부담 없이 고려할 수 있음
     * 인건비 50% 이상 절감을 달성하면서 사람과 유사한 성과를 내야 함
          + 대체되는 인력이 확연하거나 재배치가 가능한 시나리오에서 더 도입이 쉬움
          + 내부적으로 AI 회의론이 있을 수 있으므로 ROI가 매우 커야 함
     * 통화가 고객에게는 ‘생존이 달린 문제’지만, 걸거나 받는 측은 실패를 감수할 수 있는 환경
          + 야간·과부하(overflow) 전화나 ‘서브프라임’ 전화로 시작하는 경우가 많음
          + 성능 기준이 낮은 곳에서 AI가 진입하기 용이함
     * 직접 매출 창출 (예: 신규 예약, 결제) 또는 높은 비용 지출 영역(예: 드라이브 스루)에서 통화 효율화 효과가 큼
     * SMB/미드마켓 진입을 위해서는 간단한 VoIP 연동이나 셀프셋업이 가능해야 함
     * 엔터프라이즈는 초기 통합이 복잡할수록 진입장벽이 생기는 동시에, 잘 구축되면 경쟁우위가 됨
          + 또는 낮은 통합 복잡도로 쉽게 시작해, 점차 확장 가능
     * 전반적으로 높은 성공률과 큰 비용 절감 효과를 동시에 달성하는 솔루션에 시장 관심이 높음

사례 연구 - AI 음성 인터뷰

     * 초기에는 복잡도와 민감도가 높은 구인 면접에 AI 음성을 도입하는 것이 의외로 보임
     * 하지만 스태핑 업계에서 대규모/반복 면접을 처리하는 데 큰 효과를 봄
     * 지원자 경험을 해치지 않으면서 더욱 빠르고 일관성 있는 면접 진행이 가능해짐
     * AI가 필요에 따라 즉시 인터뷰를 수행하거나, 언어/억양 장벽 없이 지원자를 평가할 수 있음
     * 특히 기술 직무의 경우, 일반 인사 담당자보다 AI가 더 정확한 평가를 할 수 있다는 피드백이 있음
     * 기업에서는 면접 통과율이 상승하고, 후보자의 매칭 과정이 빨라지는 장점을 체감함

   a16z가 정리한 AI Voice 에이전트에 대한 모든 것
"
"https://news.hada.io/topic?id=19066","오라클, JavaScript 상표권을 Node.js로 정당화 했지만 이제는 무시하고 싶어함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           오라클, JavaScript 상표권을 Node.js로 정당화 했지만 이제는 무시하고 싶어함

     * Oracle은 Deno의 ""JavaScript"" 상표 취소 청원에 대해 기각 신청을 제출함
     * 이는 JavaScript가 여러 독립적인 구현을 가진 개방형 표준이라는 문제를 회피하려는 시도로 보임

Recap

     * 2년 전, Oracle에게 JavaScript 상표를 포기하라는 블로그 게시물을 작성했으나 응답이 없었음.
     * 이후, Brendan Eich와 16,000명 이상의 JavaScript 개발자들이 서명한 공개 서한을 발표했으나 Oracle은 여전히 무응답이었음.
     * Deno는 Oracle의 ""JavaScript"" 상표 취소를 위해 USPTO에 공식 청원을 제출함. 청원은 다음 세 가지 근거에 기반함:
          + 일반성: JavaScript는 널리 사용되는 프로그래밍 언어로, Oracle의 제품이 아님.
          + 포기: Oracle은 상표를 관리하거나 유지하지 않음.
          + USPTO에 대한 사기: Oracle은 갱신 신청 시 오해의 소지가 있는 증거를 제출함.

Oracle의 방어

     * Oracle은 사기 주장에 대해서만 응답하며, Node.js 스크린샷을 사용했지만 중요하지 않다고 주장함.
     * Oracle의 JavaScript 상표는 소프트웨어 제품(Class 9)과 기술 서비스(Class 42)를 포함함. Node.js 스크린샷은 Class 9에만 해당한다고 주장함.
     * Oracle JET 페이지가 Class 9와 Class 42 모두에 충분하다고 주장함.

절차 지연

     * Oracle은 마감일까지 이 신청을 제출하여 ""JavaScript""가 일반 용어인지에 대한 논의를 지연시킴.
     * 이 법적 조치는 청원자가 사기 주장을 포기하거나 절차적 문제를 해결하기 위해 몇 달을 소비하도록 강요함.

실제 문제

     * Oracle은 JavaScript를 만들지 않았으며, JavaScript를 통제하지 않음. JavaScript의 상표를 소유할 권리가 없음.
     * JavaScript는 ECMA-262라는 개방형 사양에 의해 정의되며, Google, Apple, Microsoft, Mozilla 등의 대표들이 참여하는 TC39에 의해 유지됨.
     * Oracle은 JavaScript의 관리, 구현, 발전에 아무런 역할을 하지 않음.

도움을 줄 수 있는 방법

     * 이 게시물을 공유하고 Oracle의 상표 주장에 대한 인식을 확산.
     * javascript.tm에서 공개 서한에 서명.
     * 기자라면 연락하여 추가 정보를 얻을 수 있음.
     * 우리는 Oracle의 법적 조작에 겁먹지 않으며, 이 사건을 강력한 근거로 계속 싸울 것임.

        Hacker News 의견

     * Ryan이 이 문제를 다루는 것에 감사하며, 업데이트가 흥미로움. Oracle이 몇 달의 지연을 추가하려는 것은 일반적인 일로 보임. 몇 년이 걸리더라도 좋은 결론에 도달할 수 있다면 가치가 있음. 법적 절차가 진행되는 것이 기쁨.
     * 30년 전 IT 공부를 시작할 때, Oracle에 대해 부정적인 의견을 들었고, 그 이후로 Oracle을 사용하지 않음.
     * Oracle의 스크린샷이 Internet Explorer에서 찍힌 것이 흥미로웠음. 과거를 떠올리게 함.
     * Oracle은 가능한 한 법정으로 가져가려 할 것임. Cantrill의 말을 빌리자면, 잔디 깎는 기계처럼 행동하는 회사임.
     * Oracle JET에 대해 궁금해하는 사람 있음.
     * Oracle과의 싸움이 진행되는 것이 기쁨. Oracle은 악마 같은 존재임. Microsoft의 브라우저는 Chromium 기반인데, 왜 목록에 포함되었는지 의문임. Brave 등을 추가하는 것이 더 나을 것임.
     * Deno 회사가 Oracle의 ""JavaScript"" 상표를 취소하기 위해 USPTO에 공식 청원을 제출했음. Oracle이 Node.js 웹사이트의 스크린샷을 사용하여 상표를 갱신한 것이 문제임.
     * Larry Ellison의 전기를 읽고 그가 얼마나 많은 문화를 통제하는지에 대해 놀라움을 느낌. 그는 MySQL과 Java를 소유하고 있으며, 대형 엔터테인먼트 회사를 소유할 예정임.
     * 웹/오픈 소스 커뮤니티가 JavaScript를 재브랜딩할 수 있을 것임. LiveScript, WebScript 등으로 변경할 수 있음. Oracle을 무시하고 진행할 수 있음.
     * Oracle이 JavaScript를 통제하지 않는 것이 좋은 논쟁인지 의문임. Oracle이 더 공격적으로 나오기 전까지는 회색 지대로 남겨두는 것이 나을 수도 있음.
"
"https://news.hada.io/topic?id=19141","셰이더에서 mix()+step()을 사용한 조건부 이동 최적화 금지 방침","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                셰이더에서 mix()+step()을 사용한 조건부 이동 최적화 금지 방침

소개

     * 이 글에서는 GPU에서의 분기와 관련된 잘못된 통념을 바로잡고자 함.
     * 몇몇 교육 웹사이트에서 잘못된 정보를 퍼뜨리고 있어 이를 수정하고자 함.

문제

     * GPU 코드에서 조건부 실행을 구현하는 삼항 연산자를 사용하는 코드 예시를 제시함.
     * 일부 사람들은 이를 산술 연산으로 대체하는 ""최적화""를 제안하지만, 이는 잘못된 이해임.
     * 삼항 연산자는 조건부 이동을 수행하며, 이는 간단한 비트 연산으로 구현됨.
     * 실제 분기는 GPU 코드에서 발생하지만, 작은 레지스터 이동에는 사용되지 않음.

잘못된 최적화의 문제점

     * 제안된 최적화는 실제로 원래 코드보다 느리게 실행됨.
     * step() 함수는 삼항 연산자로 구현되어 있어, 불필요한 곱셈과 덧셈을 추가로 수행함.
     * 원래 코드에서는 값이 조건부로 직접 이동됨.

기계 코드 분석

     * AMD 및 Microsoft 컴파일러의 기계 코드를 통해 GPU가 분기를 수행하지 않음을 확인할 수 있음.
     * 비교 연산과 비트 마스크를 사용하여 조건부 이동을 수행함.

결론

     * step() 함수를 사용한 최적화 제안은 잘못된 정보이며, 이를 바로잡아야 함.
     * 잘못된 정보가 20년 이상 퍼져왔으며, 이를 수정할 필요가 있음.
     * Inigo Quilez - 1994년부터 컴퓨터 그래픽스 학습 중.

        Hacker News 의견

     * TFA의 결론이 맞다는 것은 확신하지만, 더 나은 버전만이 아닌 두 버전 모두의 코드 생성이 제공되면 주장이 강화될 것임
          + ""최적화된"" 버전이 실제로 원래 버전보다 훨씬 느리게 실행된다는 점을 보여주기 위해 생성된 기계 코드를 보여주지만, 나쁜 버전이 더 나쁘다는 것을 증명하지는 않음
     * 어떤 경우에 if가 실제 분기를 강제하는지 알 수 있는 좋은 방법이 있었으면 좋겠음
          + 사람들이 더 비싼 mix/lerps를 사용하는 이유는 작은 오버헤드가 있을 수 있지만, 분기를 만드는 것이 두렵기 때문임
          + v = x > y ? a : b;가 실제로 작동하는 것은 좋지만, if가 때로는 분기이고 때로는 아닌 구문이 있다는 것이 우려됨
     * 이 기사도 관련 있음: GPU에서의 분기 작성에 대한 잘못된 조언을 바로잡음
          + 과거에는 분기를 피하는 최적화가 효과적이었지만, 이제는 그렇게 하지 말아야 함
          + 프로세서와 컴파일러가 변화하므로, 여러 변형을 제공하고 런타임에 가장 빠른 것을 선택하는 것이 좋음
     * 컴파일러가 '최적화된' 버전이 동일하다는 것을 왜 인식하지 못하는지 궁금함
          + step()을 이해하고 step()=0.0과 step()==1.0의 경우를 별도로 최적화할 수 있어야 함
     * 이 문제에 걸린 적이 있음. Claude/ChatGPT도 이를 최적화로 제안하지만, 성능 저하를 초래함
          + Inigo에게 감사함
     * OpenGL 함수가 GPU 기본 기능을 호출하는 대신 에뮬레이션되는지 어떻게 알 수 있는지 궁금함
     * 코드 작성 시 조건부 분기가 없을 것이라는 확신을 가지기 위해 경험이 필요함
          + 조건부 이후 몇 개의 연산이 분기를 유발하는지, 컴파일러가 어떤 연산을 생략할 수 있는지 알기 어려움
          + 성능 테스트 수트를 사용하여 우발적인 성능 저하를 확인해야 하는지 고민됨
     * mix 함수의 변형이 벡터에 대해 작동하는 방법을 설명함
"
"https://news.hada.io/topic?id=19053","DeepSeek 다운로드한 사람들에게 징역형 제안하는 미국의 법안 발의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                DeepSeek 다운로드한 사람들에게 징역형 제안하는 미국의 법안 발의

     * 미주리 공화당 상원의원 조쉬 홀리가 중국과의 인공지능 기술 수출입을 금지하는 법안을 발의함
          + 이 법안이 통과되면 중국에서 개발된 AI 모델을 다운로드하는 행위가 최대 20년의 징역형이나 백만 달러의 벌금에 처해질 수 있음
     * 법안의 목표는 중국으로부터의 인공지능 기술 수입 및 수출을 금지하는 것임
          + 미국 기업이 중국에서 AI 연구를 하거나 중국 기업과 협력하는 것을 금지함
          + 미국 기업이 중국 AI 개발에 투자하는 것을 금지함
     * Center for Democracy & Technology의 Kevin Bankston은 이 법안이 과학적 대화와 기술 교류를 방해한다고 비판함
          + 법안의 언어가 광범위하고 디스토피아적이라는 지적이 있음
          + 법안이 의도치 않게 AI 연구자와 사용자를 처벌할 수 있는 가능성이 있음
     * 법안은 AI 기술과 지적 재산의 수입 및 수출을 금지하여 연구자들이 중국 연구자들과 협력하는 것을 어렵게 만들 수 있음
          + AI 모델이나 연구 논문을 인터넷에 공개하는 행위가 수출로 간주될 수 있음
          + 법안은 AI 발전과 출판을 위협하며, 특히 대형 기술 기업의 독점 시스템 외부에서의 개방적이고 협력적인 기술 개발에 영향을 미칠 수 있음
     * 법안의 정치적 배경
          + 법안은 중국을 겨냥한 초당적 지지를 받고 있음
          + TikTok 금지 법안이 처음에는 비현실적으로 보였으나 결국 통과된 사례가 있음

        Hacker News 의견

     * Hawley가 제안한 법안은 법으로 제정되지 않는 경우가 많음. 그러나 TikTok 금지와 같은 사례도 있음. AI 관련 법안은 혼란스러움.
          + 미국의 AI 우위를 파괴할 수 있는 방법 중 하나는 경쟁국의 성과를 배우는 것을 불법화하는 것임.
          + 법안은 중국에서 개발된 AI 기술의 수입을 금지하는 내용을 포함하고 있음.
          + EFF는 법안의 언어가 광범위하다고 우려하고 있음.
     * 미주리 주의 공화당 상원의원 Josh Hawley는 중국과의 AI 제품 수출입을 불법화하는 법안을 제안했음.
          + 중국에서 개발된 AI 모델을 다운로드하면 최대 20년의 징역형이나 백만 달러의 벌금형에 처할 수 있음.
     * Hawley 상원의원은 중국 AI에 대한 데이터와 자금이 미국에 위협이 된다고 주장함.
          + 그러나 중국의 IP 주소를 차단하는 등의 조치는 현실적이지 않음.
     * 법안은 상징적인 의미가 크며, 실제로 통과될 가능성은 낮음.
          + 법안이 통과되더라도 일반 사용자에게 20년 형이 내려질 가능성은 낮음.
          + 법안은 2M5 섹션에 해당하며, 기본 형량은 15-21개월임.
     * Hawley는 법안이 실제로 시행될 것이라고 믿지 않는 것으로 보임.
          + 법안은 정치적 연극에 불과하며, 실제로는 실행되지 않을 가능성이 큼.
     * DeepSeek 다운로드에 대한 관심이 증가하고 있음.
          + 데이터가 중국 서버로 전송되지 않는다면 로컬에서 실행할 수 있는 모델 다운로드는 허용되어야 함.
     * 법안은 정치적 연극이며, 다운로드된 모델은 미국 서버에서 실행될 수 있음.
          + 이는 TikTok의 스파이 우려와는 다른 상황임.
     * 전직 영국 총리 Jim Hacker의 발언에 따르면, 국회의원은 자격 요건이 없고, 많은 지원자가 있음에도 불구하고 저임금이라고 주장하는 것은 부적절함.
     * Hawley가 2021년 백악관을 훔치려 했을 때 사라질 줄 알았으나, 여전히 활동 중임.
"
"https://news.hada.io/topic?id=19065","FullMoon - 맥/iOS용 오픈소스 로컬 LLM앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FullMoon - 맥/iOS용 오픈소스 로컬 LLM앱

     * 애플 실리콘에 최적화된 로컬 LLM과 프라이빗 한 대화 가능
          + Llama-3.2-1B/3B-Instruct-4bit, DeepSeek-R1-Distill-Qwen-1.5B-4/8bit 등의 모델 4종
     * 테마/폰트/시스템 프롬프트 개인화 가능
     * Shortcut(단축어)과 연동 지원
     * 무료/오픈소스 이며, 맥 앱 스토어 및 iOS 앱스토어에서 다운로드 가능
     * Swift MLX + Metal 3

   아직까진 앱일뿐 약간 혹 했습니다

   ios에서도 돌릴 수 있다는건 괜찮아 보이네요.
   맥에서는 그냥 lmstudio가...

   Apple Vision도 지원하다니, Audio Input까지만 하면 괜찮겠네요

   ollama랑 차이는 아,, 앱이군요 ㅎㅎ
"
"https://news.hada.io/topic?id=19100","미국 달걀 가격 차트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국 달걀 가격 차트

     * 달걀 가격 동향
          + 2025년 초부터 미국 달걀 가격이 1.28 USD/DOZEN, 즉 22.03% 상승함.
          + 2025년 1월에 사상 최고가인 7.09 USD/DOZEN을 기록함.
     * 주요 상품 가격 비교
          + 소고기: 326.90 USD, 월간 0.32% 상승, 연간 28.73% 상승
          + 사료용 소: 265.80 USD, 월간 -0.94% 하락, 연간 8.25% 상승
          + 생소: 200.46 USD, 월간 2.43% 상승, 연간 8.47% 상승
          + 돼지고기: 86.65 USD, 월간 9.44% 상승, 연간 6.84% 상승
          + 가금류: 8.23 USD, 월간 -2.37% 하락, 연간 9.59% 상승
          + 스위스 달걀: 3,150.00 USD, 월간 -8.22% 하락, 연간 -0.97% 하락
     * 달걀 선물 계약
          + 달걀 선물 계약은 가격 변동 위험을 관리하기 위한 금융 도구로 사용됨.
          + Trading Economics에서 제공하는 달걀 가격은 OTC 및 CFD 금융 도구를 기반으로 함.
     * 기타 상품 가격
          + 원유: 70.522 USD, 일간 -0.12% 하락
          + 금: 2860.30 USD, 일간 -0.30% 하락
          + 은: 32.246 USD, 일간 -0.20% 하락
          + 구리: 4.4522 USD, 일간 -0.03% 하락
          + 대두: 1060.50 USD, 일간 0.33% 상승
          + 밀: 587.75 USD, 일간 2.71% 상승
          + 석탄: 108.95 USD, 일간 -2.07% 하락
          + 철광석: 104.81 USD, 일간 -0.56% 하락
     * Trading Economics 서비스
          + 데이터 구독 및 API 접근을 제공하며, 다양한 사용자 요구에 맞춘 솔루션을 제공함.
          + 웹 개발자, 데이터 분석가, 영업직 등 다양한 직무에서 인재를 채용 중임.

        Hacker News 의견

     * 지역에서 생산된 신선한 계란의 가격은 큰 변화가 없으며, 대형 생산자의 계란보다 저렴해진 경우도 있음. 지역 농부와 소규모 운영을 지원하는 것이 시스템의 회복력을 높이는 데 중요함.
     * 많은 사람들이 닭장을 짓는 것을 제안함. 닭장을 관리하는 것은 매일 2분 정도의 간단한 작업이지만, 3년에 한 번씩 닭을 도살해야 하는 어려움이 있음. 여름에는 닭 배설물로 인해 파리가 많이 생기며, 닭들 사이의 서열 다툼으로 인해 경제적 가치가 감소할 수 있음. 도시에서는 닭 사체를 처리하는 것도 문제임. 지역 농부를 지원하는 것이 좋음.
     * Albertsons API를 사용하여 구매 내역을 JSON 형식으로 확인하는 것이 재미있음. 개인 인플레이션 추적기를 만들고 싶지만 아직 구상 중임. 공식 통계가 조작될 가능성도 있음.
     * 캘리포니아에서는 조류 독감으로 인해 닭이 도살되면서 가격이 급등했음. 유기농 계란 가격은 어느 정도 회복되었지만, 일반 계란의 가격은 여전히 높음.
     * 2025년의 큰 밈이 ""계란이 비쌌던 시절을 기억하라""가 될 것인지 의문임. 여러 사회적 문제들이 있지만 계란 가격이 주목받고 있음.
     * 지역 유기농 방목 계란은 여전히 $5/다스에 판매되고 있으며, 비지역 계란은 모두 품절 상태임.
     * 조류 독감으로 인해 가족이 몇 년 전 닭장을 설치한 것이 다행임. 자연적인 보호막 덕분에 냉장고 밖에서도 오래 보관 가능함. 가격이 내려가길 바람.
     * 뉴저지에서는 철새 경로에 있는 지역에서 조류 독감이 발생하여 공원이 폐쇄됨. 근처에 대형 계란 농장이 있어 감염 가능성이 있음.
     * 미국에서 계란 가격이 세 배로 오른 것은 극단적임. 네덜란드의 유기농 방목 계란은 25% 이상 오르지 않았음.
     * 내 닭의 비용은 12개월 전과 동일함.
"
"https://news.hada.io/topic?id=19076","개발자 철학(Developer philosophy)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      개발자 철학(Developer philosophy)

     * 경력이 많은 개발자들이 신입 개발자와 소프트웨어 개발 철학을 공유한 내용
     * 전면 재작성(ground-up rewrite)을 피하고, 일정 관리와 코드 품질, 자동화, 엣지 케이스 대응 등 다양한 주제에 대한 조언을 담고 있음

어떤 대가를 치르더라도, 전면 재작성(ground-up rewrite)이 매력적으로 보이는 상황을 피할 것

     * 전면 재작성의 유혹이 생기는 시점은 이미 누적된 기술적 부채로 인해 기존 코드 유지가 어려워진 순간임
     * 코드 복잡도가 누적되는 시점에 미리 경고 신호(단순한 수정도 어려움, 주석/문서화 곤란, 핵심 코드 이해 인원 감소 등)를 포착해 적극적으로 해결책을 모색해야 함
     * 확장이 끝난 뒤에는 반드시 복잡도를 줄이고, 품질을 정비하는 통합 단계를 거쳐야 함
     * 전면 재작성이 불가피해지면 프로젝트가 이미 위험 단계에 진입했음을 의미함
     * 위험을 줄이기 위해서는 계속적으로 기술 부채를 관리하고 코드 품질을 주의 깊게 모니터링해야 함

가능한 시간의 절반으로 전체 작업의 90%를 완성할 것

     * 코드를 1차로 작성해 동작하게 만드는 것은 전체 작업의 절반 수준임
     * 그 이후의 단계(에지 케이스 처리, 테스트, 배포, 문서화, 성능, 유지보수성 등)를 제대로 마치려면 생각보다 많은 시간이 필요함
     * 충분한 버퍼를 두고 예상치 못한 문제나 마무리 작업(폴리싱)에 대응해야 함
     * 결국 ‘처음 코드를 대충 돌아가게 만들기’와 ‘완성된 기능으로 만들기’ 간 격차를 인식하고, 이를 일정에 반영해야 함

우수 사례를 자동화할 것

     * 개발자들에게 반복해서 “이렇게 해야 함”이라고 구두나 문서로 강조만 하면 실수가 발생하기 쉬움
     * 가능한 경우에는 자동화된 테스트나 스크립트로 ‘규칙 위반 시 빌드 실패’ 같은 형태로 강제하는 것이 효과적임
     * 새로 도입된 규칙(금지할 API, 반드시 달아야 하는 주석 등)에 대해서도 점진적으로 자동화해 오류나 누락을 줄일 수 있음
     * 단, 모든 사항을 자동화할 수 있는 것은 아니며, 너무 엄격한 규칙은 개발 흐름을 방해할 수 있으므로 균형이 필요함

극단적(병리적/Pathological) 데이터도 고려할 것

     * 정상 입력(골든 패스)만으로 코드를 판단하면 위험함
     * 요청이 지연되거나 중단되는 경우, 방대한 데이터(수백만~수억 행), 이상한 문자열(너무 긴 경우, 슬래시나 공백 포함) 등 문제 상황을 가정해야 함
     * 엣지 케이스를 철저히 대비하는 것이 최종적인 코드 품질을 좌우함

보통은 더 단순하게 작성 가능한 방법이 있음

     * 초기에 코드가 동작하게 만든 뒤, 시간적 여유를 두고 다시 더 단순하고 명확하게 개선하는 것이 좋음
     * “좋아 보이는 해법”을 찾았더라도, 더 나은 해법이 있는지 다시 살펴볼 여유를 가지는 태도가 중요함
     * 길고 복잡한 코드를 간결하게 리팩터링하는 과정이 최종 품질을 높여줌

테스트 가능하게 코드를 작성할 것

     * 인터페이스와 사이드 이펙트를 최소화하면 자동화 테스트 작성이 훨씬 수월해짐
     * 테스트하기 어려운 구조라면, 캡슐화가 제대로 되지 않았을 가능성이 큼
     * 구체적으로 테스트가 잘 진행될 수 있는 형태로 코드 구조를 설계하면 버그를 조기에 발견할 수 있음

코드가 ‘증명상’ 문제 없다고 끝이 아님

     * 구조적으로 안전해 보이는 코드라도, 주변 환경 변화나 일부 호출 방식이 바뀌면 문제가 생길 수 있음
     * 보안 관련 코드라면, 현재 호출부가 안전하더라도 미래에 변경될 가능성을 고려해 설계해야 함
     * 코드는 “명백히 안전하고, 바뀌어도 문제가 없도록” 작성되어야 함

댓글들

     * “이 편지를 짧게 쓰지 못한 이유는 짧게 쓸 시간이 없었기 때문이다” 라는 문장에 대한 출처는 Pascal임
     * 항상 오프바이원 에러(off-by-one error)를 주의할 것
     * 위키에 새로운 가이드라인 추가하기
          + 회사 내 문서화/지식 공유 체계가 제대로 잡혀 있지 않으면 정보가 산재되어 혼란스러운 상황이 생김
          + 공식 문서가 승인 과정을 거치며 구버전이 되거나, 여러 개의 위키가 동시에 존재해 어느 것이 정식 자료인지 모르는 문제가 발생함
          + 한 곳의 위키만 정해 모든 자료를 모으고, 부족한 부분이 있으면 개발자들이 직접 작성하거나 역공학(reverse-engineering)을 통해 채워나가는 방식이 유효함
          + 문서화가 다른 곳(소스 컨트롤, 코드 주석 등)에 잘 연동되어 있으면 최신 정보를 유지하기 쉬움
          + 자동화된 테스트와 빌드 환경이 복잡하거나 개발자에게 노출되지 않은 경우, 실제로 전체 테스트를 돌려본 경험이 없는 상황이 생길 수 있음
          + Jenkins 빌드 스크립트는 단순하게 유지하여 “cd project; ./build-it” 형태로 구성하고, 이 스크립트 자체도 소스 컨트롤에 포함하는 편이 유리함
          + 팀 전체가 동일 환경(예: 가상 머신 이미지, 빌드 설정)에서 빌드와 테스트를 수행할 수 있도록 공유하면 문제 발생을 사전에 줄일 수 있음
          + 에지 케이스를 개발 단계에서 고려해 destroy_object(foo)처럼 foo가 NULL이어도 안전하게 동작하도록 처리하거나, create_object() 실패 시 destroy_object()를 내부적으로 호출하게 하는 방식이 유익함
          + 궁극적으로 모든 개발자가 문서와 빌드/테스트 환경에 쉽게 접근하고 참여하도록 하는 것이 중요함
     * 문서화와 자동화 테스트: 지식 공유를 위한 문서나 위키의 중요성, 그리고 Jenkins 같은 CI/CD 환경의 설정이 공유 가능해야 한다는 실무적 제안이 언급됨
     * 사람들이 원하는 행동을 외울 때까지 ""불편을 주는 것""보다 더 효과적인 행동 변화 도구는 없음
     * 체스의 격언 하나 “좋아 보이는 수가 보이면, 일단 실행하라”에도 반대 입장이 있듯, 프로그래밍도 마찬가지. 양면성이 있음.

     보통은 더 단순하게 작성 가능한 방법이 있음

   더 간결한 해결책을 고민하는것이 코드 및 정책의 복잡도를 낮춘다고 믿습니다.

     ""가능한 시간의 절반으로 전체 작업의 90%를 완성할 것""

   이 내용은 정말 맞는 말인 것 같습니다. 한 번에 완벽하게 구현한다기 보다 빠르게 2 번을 보는 것이 실수도 줄이고, 시간관리도 더 잘되더라구요.
    1. 우수 사례 자동화 ( 테스트 코드 CI/CD 파이프라인 )
    2. 초기에 코드가 동작하게 만든 뒤, 시간적 여유를 두고 다시 더 단순하고 명확하게 개선하는 것이 좋음
    3. 전면 재작성(ground-up rewrite)이 매력적으로 보이는 상황은 무슨 일이 있어도 피할 것

     항상 오프바이원 에러(off-by-one error)를 주의할 것

   오프바이원 에러가 뭔가 했는데 for (int i = 1; i < n; ++i) { ... }, for (int i = 0; i <= n; ++i) { ... } 같은 경계 조건과 관련된 에러군요.
     * https://stackoverflow.com/questions/2939869/…

        Hacker News 의견

     * 소프트웨어 개발은 시도와 학습의 반복적인 과정임. 경험 있는 개발자는 코드 작성과 테스트를 통해 이해를 높이고, 많은 학습을 하지만 이는 회의나 계획에서 잘 드러나지 않음. 주니어 개발자는 생산 준비된 코드를 제공하는 데 어려움을 겪으며, 버려지는 작업을 꺼려함. 관리자가 개발 경험이 부족하면 이러한 문제를 악화시킬 수 있음
     * ""긴 편지를 쓴 것을 사과하지만, 짧게 쓸 시간이 없었다""라는 인용문은 프랑스 수학자이자 철학자인 Blaise Pascal의 말로, 짧게 쓰는 것이 더 어렵다는 의미를 담고 있음
     * 90/50 규칙은 코드의 품질을 높이기 위해 테스트와 예외 처리를 중요시해야 함을 강조함. 자동화된 테스트 설정은 코드베이스의 명확한 기대치를 설정하는 데 도움이 됨
     * 컴퓨터 과학 교육은 종종 복잡한 코드를 작성하도록 유도하지만, 읽기 쉬운 코드를 작성하는 것이 중요함. 변수와 함수의 명명, 일관된 포맷팅, 모듈화된 설계 등이 필요함
     * Ratchet이라는 메커니즘은 미래를 위한 완벽한 방법을 제공함
     * 경험과 도메인 인식을 일반화하려는 시도는 잘못된 일반화로 이어질 수 있음. 개발은 복잡성을 관리하는 예술이며, 실패를 통해 배우는 것이 중요함
     * ""작업의 첫 90%가 90%의 시간을 차지하고, 나머지 10%가 또 다른 90%의 시간을 차지한다""는 인용문은 개발의 현실을 잘 나타냄. 예외 처리, 오류, 사용성, 보안 등을 고려할 때 많은 예상치 못한 작업이 필요함
     * Joel Spolsky의 글은 재작성의 위험성을 경고하며, DevOps의 지혜를 강조함
     * 코드의 가독성을 최적화하고, 버그가 발견되기까지의 시간이 길어질수록 비용이 증가함을 인식해야 함. 함수형 프로그래밍 원칙을 선호하고, 강한 타입 시스템을 사용하는 것이 유익함

     어떤 대가를 치르더라도, 전면 재작성(ground-up rewrite)이 매력적으로 보이는 상황을 피할 것

   많은 IT 회사들의 비즈니스가 발전하지 못하게 되는 pitfall 인 거 같고, 기술부채가 많이 쌓인 상태에서 그것을 해소하지 못하는 (또는 해소하고 싶지 않은) 엔지니어링 조직이 전면 재작성을 매력적으로 생각하는 것 같습니다.

   진정으로 납득될만한 이유가 없다면 재작성은 최대한 피해야 한다는 저자들의 생각에 깊이 공감합니다.
"
"https://news.hada.io/topic?id=19102","Andrej Karpathy - ChatGPT와 같은 LLMs 심층 분석 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Andrej Karpathy - ChatGPT와 같은 LLMs 심층 분석 [비디오]

     * 일반 사용자를 대상으로 ChatGPT 및 관련 제품을 구동하는 대규모 언어 모델(LLM) AI 기술에 대해 심층적으로 설명한 영상 (3시간 31분)
     * 모델이 어떻게 개발되는지에 대한 전체 학습 스택과 함께 모델의 '심리'에 대해 생각하는 방법, 실제 애플리케이션에서 모델을 최대한 활용하는 방법에 대한 멘탈 모델을 다룸
     * 1년전에 공개한 ""Intro to LLMs"" 비디오보다 좀 더 포괄적인 버전

챕터

   00:00:00 introduction
   00:01:00 pretraining data (internet)
   00:07:47 tokenization
   00:14:27 neural network I/O
   00:20:11 neural network internals
   00:26:01 inference
   00:31:09 GPT-2: training and inference
   00:42:52 Llama 3.1 base model inference
   00:59:23 pretraining to post-training
   01:01:06 post-training data (conversations)
   01:20:32 hallucinations, tool use, knowledge/working memory
   01:41:46 knowledge of self
   01:46:56 models need tokens to think
   02:01:11 tokenization revisited: models struggle with spelling
   02:04:53 jagged intelligence
   02:07:28 supervised finetuning to reinforcement learning
   02:14:42 reinforcement learning
   02:27:47 DeepSeek-R1
   02:42:07 AlphaGo
   02:48:26 reinforcement learning from human feedback (RLHF)
   03:09:39 preview of things to come
   03:15:15 keeping track of LLMs
   03:18:34 where to find LLMs
   03:21:46 grand summary

   안드레이 카파시의 영상의 단점(?)은 1.5배가 절대 불가하다는 것이다 싶습니다. 말을 정말 빠르게하세요. :-)

        Hacker News 의견

     * 이 사람에 대한 존경이 큼. 그는 인간과 기계 사이의 간극을 메우는 네오와 같음. 그의 저장소와 비디오에서 무료로 배운 것들:
          + minGPT, nanoGPT (transformers)
          + NLP (더 많은 시리즈 제작)
          + tokenizers (그의 유튜브)
          + RNN (그의 블로그)
          + 많은 분야에 karpathy 같은 사람이 없고, 우리는 그들에 대해 듣지 못함. 이 사람이 ML에 대한 직관을 전파해줘서 기쁨
     * 친구들에게 Andrej가 내가 대학원에서 만난 최고의 강사였다고 말함. Stanford에 가지 않았지만 그의 CS321n 유튜브 비디오를 봄. 그가 여전히 비디오를 만들고 있어 매우 기쁨
     * 그는 transformer 아키텍처와 훈련에 대해 기본적으로 같은 주제를 다룬 비디오를 5개 이상 만듦. 이번 비디오는 무엇이 다른지 궁금함
     * 그의 ""let's build"" 시리즈를 정말 좋아함. 고급 콘텐츠 외에도 멋진 Python 트릭을 배우게 됨
     * 긴 형식의 비디오에 집중할 수 없어서 좌절함. 이 비디오들이 짧은 비디오보다 훨씬 나을 가능성이 큼
     * CS231n 프로젝트의 일부로 Python 리스트를 사용하여 역전파하는 방법을 여전히 기억함. 놀라운 점은 Stanford에 가지 않았다는 것임
     * Andrej에게 감사함. LLM이 어떻게 작동하고 훈련되는지에 대한 꽤 좋은 이해를 가지고 있지만, 많은 친구들은 그렇지 않음. 이 비디오와 강연이 그들에게 '어떤' 아이디어를 줌
     * 비디오를 배포할 다른 방법이 있었으면 좋겠음. 유튜브에서 콘텐츠가 결국 사라짐. 이 콘텐츠는 중요하다고 생각함. 더 많은 사람들이 AI가 어떻게 작동하는지 알수록 사회가 더 강력해질 것임
     * 전체를 다 봄... 볼이 잠들었지만 그럴 가치가 있었음. Andrej에게 감사함
     * 나는 단순한 사람임. Karpathy 비디오를 보면 클릭하고 보고 즐김
"
"https://news.hada.io/topic?id=19118","OpenWrt 24.10.0 – 첫 번째 안정 버전 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenWrt 24.10.0 – 첫 번째 안정 버전 출시

OpenWrt 24.10.0 - 첫 번째 안정 버전 - 2025년 2월 6일

     * OpenWrt 커뮤니티는 OpenWrt 24.10 안정 시리즈의 첫 번째 안정 버전을 발표함
     * 펌웨어 이미지는 Firmware Selector 또는 다운로드 서버에서 직접 다운로드 가능
     * OpenWrt 23.05에서 24.10으로 업그레이드는 sysupgrade 유틸리티를 통해 지원되며, 구성 백업을 권장함

  OpenWrt 소개

     * OpenWrt 프로젝트는 임베디드 장치를 대상으로 하는 리눅스 운영 체제임
     * 다양한 무선 라우터 및 비네트워크 장치의 벤더 제공 펌웨어를 완전히 대체함
     * 지원 장치에 대한 정보는 하드웨어 표를 참조

    새로운 릴리스 및 보안 수정 공지

     * 중요한 변경 사항에 대한 정보를 원한다면, 새로운 메일링 리스트와 RSS 옵션을 통해 확인 가능

  OpenWrt 24.10의 주요 내용

     * OpenWrt 23.05 이후 5400개 이상의 커밋이 포함되었으며, 1년 이상 개발됨

      일반 변경 사항

     * 여러 구성 요소가 새로운 버전으로 업그레이드됨 (예: 리눅스 커널 5.15에서 6.6으로)
     * 기본 이미지에 TLS 1.3 지원 추가
     * 큰 플래시 크기를 가진 장치에서 POSIX 접근 제어 목록 및 파일 시스템 보안 속성 활성화
     * WiFi6(802.11ax) 지원 개선 및 WiFi7(802.11be) 초기 지원
     * OpenWrt 24.10은 OPKG만 사용하며, APK 패키지는 지원하지 않음

    많은 새로운 장치 추가

     * OpenWrt 24.10은 1970개 이상의 장치를 지원하며, OpenWrt 23.05에 비해 100개 이상의 새로운 장치가 추가됨

      타겟 변경 사항

     * 여러 새로운 타겟 추가 및 기존 타겟 제거

    핵심 구성 요소 업데이트

     * 도구 체인 및 리눅스 커널 등 주요 구성 요소가 업데이트됨

  24.10으로 업그레이드

     * Sysupgrade를 사용하여 23.05에서 24.10으로 업그레이드 가능하며, 대부분의 경우 구성 유지됨
     * 특정 장치의 경우 특별한 업그레이드 절차 필요

    알려진 문제

     * 일부 장치에서 LED 지원 부족, 5GHz WiFi 비기능, 이더넷 링크 불안정 등의 문제 존재

  최종 노트

     * 모든 패키지 유지보수자, 테스터, 문서 작성자 및 지원자에게 감사의 인사
     * 즐거운 사용 되길 바람

        Hacker News 의견

     * OpenWRT는 소비자 기기에 기능과 보안을 제공하는 데 매우 뛰어남. 하지만 설정 변경 사항을 쉽게 확인할 수 없어 문제 해결이 어려웠음. NixOS로 이동하여 ISP/LAN에 필요한 설정을 쉽게 관리할 수 있게 되었음. 여전히 OpenWRT를 기술자들에게 추천할 만함
     * OpenWRT는 훌륭함. 최근 10 Gbit 인터넷을 설치하고 Lenovo Tiny PC에 OpenWRT를 실행하여 효율적으로 사용 중임. OpenWRT 24는 ISP의 IPIP6 터널 설정을 지원하여 IPv6 네이티브 연결에서 IPv4에 접근할 수 있게 해줌. pfSense/opnSense도 시도했지만 FreeBSD 커널이 10 Gbit 네트워크 연결에서 특정 하드웨어를 요구함
     * OpenWRT를 시도하고 싶었으나 하드웨어 수정이 필요해 꺼려졌음. 공식 OpenWRT 하드웨어가 출시되자마자 주문했으며, 이 라우터는 버퍼블로트 문제를 해결해줌
     * 집에서 메인 Wi-Fi가 필요 없어져 OpenWRT 물리적 라우터가 필요 없어짐. 대신 홈 서버에서 VM으로 OpenWRT 라우터를 실행하여 케이블과 혼잡을 줄일 계획임. OpenWRT를 좋아하지만 pfSense나 OPNsense를 시도해보고 싶음. OpenBSD로 라우터를 구축하는 사람들도 있음
     * 모든 라우터는 OpenWRT를 기본으로 사용해야 함
     * OpenWRT에 실망함. 몇 년간 패키지 추가, 수정 작업을 했지만 대부분의 큰 변경 사항은 무시되었음. 대신 GPU와 Doom 작동에 집중하고 있으며, 하드웨어 개발도 진행 중임
     * Ubiquiti의 EdgeRouter가 고장 나서 대체품이 필요함. 작은 집에서 신뢰할 수 있는 OpenWRT 올인원 유닛을 찾고 있음
     * APK는 25까지 기다려야 함
     * SRE로서 인프라 작업을 좋아하며 DIY 네트워크 장비를 사용해왔음. 올해는 Ubiquiti 장비로 교체했으며, 매우 비싸지만 문제 없이 사용 중임. OpenWRT의 안정적인 릴리스가 기쁘며, 여유 장비로 패치를 시도하고 버그 리포트를 제출할 계획임
     * 업그레이드 완료. 모든 커스터마이징이 자동으로 적용되어 문제 없음. OpenWRT 팀의 놀라운 작업임
"
"https://news.hada.io/topic?id=19145","HN 공개: FlashSpace – 빠르고 오픈 소스인 macOS Spaces 대체 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 공개: FlashSpace – 빠르고 오픈 소스인 macOS Spaces 대체 프로그램

     * ⚡ FlashSpace
          + FlashSpace는 macOS의 기본 Spaces를 대체하고 향상시키기 위해 설계된 매우 빠른 가상 작업 공간 관리자임.
          + macOS 애니메이션을 기다릴 필요가 없음.
     * 🎥 데모
          + 데모 비디오에서는 3개의 작업 공간을 사용하고 단축키로 전환하는 예시를 보여줌.
     * 💬 사용 방법
          + 모든 앱을 하나의 macOS 공간으로 이동.
          + 작업 공간 생성 및 앱 할당.
          + 디스플레이를 작업 공간에 할당.
          + 빠른 작업 공간 활성화를 위한 단축키 설정.
          + 여러 작업 공간에 동일한 앱을 유지하려면 ""Floating Apps"" 기능 사용.
     * 👉 작동 방식
          + FlashSpace는 가상 작업 공간을 정의하고 앱을 할당할 수 있게 함.
          + 작업 공간 전환 시 할당된 앱이 자동으로 표시되고 다른 앱은 숨겨짐.
     * ✨ 기능
          + 매우 빠른 작업 공간 전환.
          + 여러 디스플레이 지원.
          + 앱 포커스 시 작업 공간 활성화.
          + 단축키로 앱 간 빠른 전환.
          + 모든 작업 공간에서 보이는 Floating Apps.
          + 프로필을 통해 다양한 설정 간 빠른 전환.
     * ⚖️ 프로젝트 가치
          + 성능: 앱은 가능한 한 빠르게 작동해야 함.
          + 단순성: 앱은 사용 및 설정이 쉬워야 함.
          + 신뢰성: 앱은 오류 없이 작동해야 함.
          + 투명성: 앱은 방해하지 않고 도움을 줘야 함.
          + UNIX 철학: 앱은 하나의 일을 잘 수행해야 함 - 작업 공간 관리.
     * 🪟 포커스 관리자
          + FlashSpace는 창 간 빠른 포커스 전환을 가능하게 함.
          + 단축키를 사용하여 원하는 방향으로 포커스를 이동할 수 있음.
     * 📝 설계 결정
          + 비방해적 동작: FlashSpace는 창을 적극적으로 관리하지 않음.
          + 개별 앱 창 지원 없음: 개별 앱 창 지원은 복잡성을 증가시키고 성능을 저하시킬 수 있음.
     * 🖥️ SketchyBar 통합
          + FlashSpace는 SketchyBar 및 기타 도구와 통합 가능.
          + 작업 공간 변경 시 구성 가능한 스크립트를 실행함.
     * 🛠️ 소스에서 빌드
          + FlashSpace는 XcodeGen을 사용하여 project.yml 파일에서 Xcode 프로젝트를 생성함.
          + 저장소를 클론하고, 프로젝트 디렉토리로 이동하여 brew bundle을 실행하여 종속성을 설치함.
          + xcodegen generate를 실행하여 프로젝트를 생성하고 Xcode에서 열어 빌드 및 실행함.
     * 💛 후원자
          + 이 프로젝트를 지원하는 모든 후원자에게 감사의 인사를 전함.

     * Amethyst와 호환되는지 궁금함. 타일링 윈도우를 원하지만 공간 전환의 지연은 원하지 않음
     * 매우 좋음! 작업 공간의 그리드 보기를 추가할 수 있기를 바람. TotalSpaces가 그리움
     * 좋은 시기임. 이 공간에서 옵션을 다시 탐색하고 Aerospace로 결정했음. 이 제품을 시도해볼 것임
     * 감사합니다! 방금 설치했는데 지금까지 잘 작동함
     * 1년 넘게 이 목적을 위해 AeroSpace를 사용 중임. 설정에서 모든 타일링 기능을 비활성화하고 두 가지 단축키만 사용함: 작업 공간으로 전환 및 현재 창을 작업 공간으로 이동. 작은 화면에서 작업할 때 필수적임
          + AeroSpace는 성능 문제를 겪고 있지만 이는 사용 가능한 macOS API에 내재된 문제로 보임
          + FlashSpace도 이 문제를 겪는 것 같음
          + 설정과 관련하여, 작업 공간별로 단축키를 설정하는 것이 번거롭다고 생각함. AeroSpace에서는 키보드의 모든 문자와 숫자가 자동으로 작업 공간이 되고 단축키는 전역적임
          + 이 모든 것을 고려할 때, macOS 작업 공간의 문제를 해결하는 것을 주요 목표로 하는 도구를 선호함
          + 추가 테스트 결과, FlashSpace는 동일한 앱의 다른 창을 다른 작업 공간에서 지원하지 않음. 이는 내 작업 흐름에 큰 문제임
"
"https://news.hada.io/topic?id=19055","EU, "수용 불가 위험" AI 시스템 전면 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      EU, ""수용 불가 위험"" AI 시스템 전면 금지

     * EU 내에서 “수용 불가 위험(unacceptable risk)”으로 분류되는 AI 시스템 사용이 전면 금지됨
     * 2월 2일은 EU AI Act의 첫 번째 준수 마감일으로, 해당 규정은 EU 역내에서 서비스되거나 사용되는 AI 기술 모두에 적용됨
     * 이를 위반할 경우 연 매출액 7%나 최대 3,500만 유로(약 3,600만 달러) 중 더 큰 금액이 벌금으로 부과될 수 있음

EU AI Act 개요

     * AI 위험도를 4단계로 구분해 규제함
          + 최소 위험: 예) 스팸 필터
          + 제한적 위험: 예) 고객 상담용 챗봇
          + 고위험: 예) 의료 판단 지원 시스템
          + 수용 불가 위험: 사람들에게 물리적·정신적 피해나 차별을 초래할 우려가 큰 AI
     * 수용 불가 위험으로 지정된 AI는 전면 사용 금지 대상임
     * 대표적인 예시
          + 사회적 점수화: 개인의 행동을 기반으로 리스크 프로파일을 생성하는 AI
          + 무의식적 조작: 사람들의 결정을 은밀하게 또는 기만적으로 조작하는 AI
          + 취약 계층 착취: 연령, 장애, 경제적 지위 등을 악용하는 AI
          + 외모 기반 범죄 예측: 사람의 외모를 기반으로 범죄 가능성을 예측하는 AI
          + 바이오메트릭 기반 특성 분석: 성적 지향 등 개인 특성을 추론하는 AI
          + 공공장소 실시간 바이오메트릭 데이터 수집: 법 집행 목적의 실시간 생체 데이터 수집 AI
          + 감정 추론 AI: 직장이나 학교에서 사람들의 감정을 분석하는 AI
          + 얼굴 인식 데이터베이스 구축: 온라인 또는 보안 카메라에서 이미지를 수집하여 얼굴 인식 데이터베이스를 생성·확장하는 AI

사전 서약

     * 2월 2일 마감일 이전에, 2024년 9월경 약 100여 개 기업이 ‘EU AI Pact’에 서명해 AI Act 시행 이전부터 규범을 자발적으로 준수하겠다고 약속함
     * Amazon, Google, OpenAI 등이 참여했으나 Meta, Apple, Mistral 등은 서명하지 않았음
     * Pact에 참여하지 않은 기업이라도 부적합 위험 AI 사용은 금지되는 것이 원칙임

잠재적 예외 조항

     * 법 집행기관이 특정 상황(예: 유괴 피해자 수색, 긴급한 위협)에 한해 생체 인식 정보를 사용할 수 있도록 제한적 예외를 둠
          + 이 경우에도, 단일 AI 시스템 결과만으로 개인에게 불리한 결정을 내릴 수 없도록 규정함
     * 학교·직장 내 감정 파악 AI도 ‘의료적 목적이나 안전’ 확보 등의 정당한 이유가 있다면 제한적으로 허용 가능함
     * 추가적인 가이드라인이 2025년 초 발표될 예정이나, 아직 구체적인 내용이 공개되지 않았음

향후 과제

     * 실제 벌칙 부과와 본격 시행은 8월 이후로 예상됨
          + 이때 각국의 “유관 기관(competent authorities)”이 정해지고, 벌금 및 집행 조치가 효력을 갖출 전망임
     * 다른 규제(GDPR, NIS2, DORA 등)와의 중복 적용 가능성이 있어 기업에 혼선을 줄 수 있음
          + 여러 규제가 동시에 요구하는 신고 의무나 데이터 관리 방식이 상충하지 않도록 주의가 필요함
     * 기업들은 향후 발표될 표준, 가이드라인, 행동 강령 등을 참고해 체계적으로 대비해야 할 필요가 있음

   EU 의 성장을 규제가 발목잡는다는 글을 최근에 많이 접한 것 같은데, 또다시 뚜렷한 성과가 안보이는데 규제부터 발생하는 느낌이네요.

   이정도는 법으로 제한할만 할지도 모르겠네요.
   이 뉴스랑 꽤 대조된다고 생각합니다
   요즈음 참 고민이 많아지는 것 같습니다.
"
"https://news.hada.io/topic?id=19180","TF 중심 운영: 동아리나 동호회를 어떻게하면 잘 운영할 수 있을까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 TF 중심 운영: 동아리나 동호회를 어떻게하면 잘 운영할 수 있을까

   배경
     * 대학 동아리는 대학생들이 조직 운영을 처음 경험하는 작은 단위지만, 운영의 어려움과 소모적인 문제를 동반할 수 있음.
     * 특히, 동아리 활동보다 매력적이거나 우선순위가 높은 일이 많아 회원 참여 저조 문제가 발생.
     * 이러한 상황에서 소수의 핵심 인원이 동아리를 이끌면 신규 회원 유입과 참여가 어려워져 동아리가 쇠퇴할 위험이 있음.

   TF 중심 운영
     * 개념: 태스크포스(TF) 단위로 소요에 대응하며, 다양한 구성원 조합으로 팀을 꾸려 동아리 참여를 늘리는 방식.
     * 목표:
          + 다양한 TF 조합을 통해 동아리 구성원 간 관계 형성.
          + 활동 참여를 독려하고, 소수 중심의 운영을 완화.
          + 신규 회원의 진입장벽을 낮춤.
     * 문제점:
          + TF 목표 설정과 구성원 조합 과정에서 운영 부담이 큼.
          + 자원자 중심으로 구성된 TF가 정형화되어, 같은 인물들만 활동.
          + 목표와 다양성 방향 설정의 부족으로 동아리 분리 문제 심화.

   운영 중 확인된 문제
     * 회원 간 관계의 격차: 기존 회원과 신규 회원 간 관계 형성이 부족.
     * 사일로화: 정형화된 TF 구성으로 동아리가 소모임 연합체처럼 분리됨.
     * 운영 부담: TF 중심 운영의 설계와 조율 과정이 중앙 운영진에게 과도한 부담을 줌.

   성과와 교훈
     * 실패한 점:
          + TF 중심 운영은 동아리 문제(회원 분리, 소수 중심 운영)를 해결하지 못했고, 오히려 심화.
     * 긍정적인 점:
          + 같은 TF로 활동한 구성원 간 친밀도가 높아짐.
          + 이전에 접점이 없던 회원 간 관계 형성 사례도 확인.
          + 동아리 내 팀 단위 활동이 이전보다 활발해짐.

   결론 및 미래
     * 결론: TF 중심 운영은 첫 시도에서 실패했으나 완전한 실패는 아니며, 일부 긍정적 효과 확인.
     * 미래 방향:
          + 시행착오를 거치며 TF 운영 방식의 정교화 필요.
          + 회원 다양성을 고려한 조합 방식 개선.
          + 대학 동아리가 아닌 다른 조직에서도 확장 가능성을 탐구.
     * 25년 회장단이 새로운 조합과 운영 방식을 시도 중이며, 결과를 기대.

   존 리비의 <당신을 초대합니다> 라는 책 추천합니다. 개인적으로 모임들 운영할 때 도움이 많이 되었어요.

   책 추천 감사합니다

   대학 생활 중에 다양한 동아리를 꽤 접하고, 개중에는 운영에도 참여했었는데요. 동아리의 활성화를 위해서 개인적으로 나름 시간을 가지고 고민했던 것들을 좀 정리해서 적어보았습니다.

   개인적으로는 제가 올린 글이어서 뉴스로 걸고 싶지는 않았는데.. 다들 여기에 어떻게 생각하는지 궁금해서 Ask에 올리려고 했는데 Ask에는 URL 란이 없더라구요. 일단 원문이 꽤 긴 글이기도 해서, 뉴스 카테고리에 올리게 되었습니다.
"
"https://news.hada.io/topic?id=19164","GPT Wrapper의 반격: 상업화된 AI 모델 세계에서의 독점성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GPT Wrapper의 반격: 상업화된 AI 모델 세계에서의 독점성

   defensibility: 방어성 (moat와 함께 써서 독점성으로 번역했습니다)
   moat: 해자

   GPT Wrapper 서비스 예시: Character.ai, Perplexity AI

   ycombinator 댓글: https://news.ycombinator.com/item?id=42971442

   요약본 입니다.
     * AI 분야는 지난 한 해 동안 많은 발전을 이루었으며, 새로운 참가자들이 등장하고 AI 중심 제품들이 급격한 성장을 보이고 있음
     * 그러나 AI 모델 스타트업들은 다음과 같은 근본적인 질문에 직면해 있음:
          + AI 모델 스타트업의 방어력이 낮고, 오픈 소스 대안과 새로운 참가자들이 지속적으로 우위를 잠식한다면, 누가 최종적으로 승리할 것인가?
          + 새로운 AI 중심 앱들은 참신함 효과 덕분에 놀라운 성장을 보이고 있음. 그러나 시간이 지나 AI가 기대치가 되고 신기함이 사라지면, 수많은 새로운 제품들 중 누가 배포 경쟁에서 승리할 것인가? 혼잡한 시장에서 제품들이 어떻게 성장하고 고객에게 도달할 것인가?
          + 다른 제품을 복제하는 것이 ""AI야, productxyz.com과 동일한 앱을 만들어서 productabc.com에 호스팅해줘!""처럼 정말로 사소해진다면 어떻게 될 것인가? 과거에는 새로운 제품을 복제하는 데 몇 달이 걸렸고, 그동안 선두를 구축할 시간이 있었음. 그러나 곧바로 빠르게 따라잡을 수 있게 된다면, 제품들은 어떻게 사용자들을 유지할 것인가?
          + 최근 몇 년 동안, 자체 모델을 구축하지 않은 혁신적인 AI 제품들은 저기술의 ""GPT 래퍼""로 폄하되었음. 그러나 지난 수십 년간 소비자 제품들은 기술 수준이 낮고 방어력이 약해 보였음에도 불구하고 엄청난 가치를 창출해왔음. 미래도 과거와 같을 것인가?
     * 이러한 환경에서, ""GPT 래퍼"" 간의 거대한 전쟁이 벌어지고 있으며, 전통적인 방어 전략—특히 배포와 네트워크 효과에서의 지속적인 우위—이 다시 전면에 등장할 것임
     * 이들은 정확히 동일한 방식으로 나타나지는 않겠지만, AI 기능과 결합하여 새로운 형태를 만들어낼 것
     * 이러한 방식으로, 차세대 AI 제품들은 Web 2.0, 암호화폐, 온디맨드 경제 등 이전의 컴퓨팅 물결을 이끌었던 힘을 타고 발전할 것임

실패한 AI 방어 이론?

     * AI 방어력에 대한 인기 있는 이론은 단순했으며, 지난 몇 년 동안 담론을 지배했음:
          + 각 세대의 AI 모델을 구축하기 위해 필요한 데이터/컴퓨팅/에너지의 양이 기하급수적으로 증가할 것이라는 관찰이 있었음.
          + 2024년에는 $1억 이상이 필요했지만, 미래에는 수십억 달러가 필요하게 되어, 새로운 참가자들에 대한 ""규모 효과""의 해자를 형성할 것이라는 것임.
          + 또한, AI 모델이 더 강력해짐에 따라, 앱이 원하는 모든 것을 수행할 수 있게 되어, 대부분의 앱은 더 강력한 기본 모델과 인터페이스하는 단순한 ""GPT 래퍼""로 전락할 것이라는 것임.
          + 이 관점에서는, 소수의 대형 모델 회사들이 모든 가치를 창출하고, 그 위의 GPT 래퍼 앱 세계에 세금을 부과할 것임.
     * 2025년 2월 현재, 이 이론은 주요한 복잡성에 직면해 있음:
          + 최첨단 모델은 오픈 소스 모델보다 약 6개월 앞서 있을 뿐이며, 새로운 참가자들이 정기적으로 유사한 성능을 가진 모델을 생성하고 있음 (Grok, DeepSeek 등).
          + 또한, 초기에는 대규모 플레이어들이 일찍 접근하여 큰 이점을 가졌던 훈련 데이터의 양이 자연적인 한계에 도달하고 있음.
          + 그리고 최첨단 모델을 훈련하는 데 많은 돈/에너지/컴퓨팅이 필요하더라도, 경쟁자들은 모델 증류를 통해 유사한 성능을 달성하고 있음.
          + 동시에, 창의적 도구, 고객 서비스, 법률 등 특정 틈새 시장에 특화된 새로운 앱 계층 스타트업들이 등장하여, 1년 이내에 $0에서 $500만 이상의 ARR 성장을 보여주고 있음.
     * 대부분의 경우, 이러한 스타트업들은 통합하는 기본 AI 모델을 명시하지 않으며, 사용자나 고객도 이에 대해 신경 쓰지 않음.
     * 이제 GPT 래퍼들을 응원할 때인가? 그리고 이 새로운 세대의 AI 중심 앱에 대한 새로운 방어 이론은 무엇이어야 하는가? 수많은 AI 중심 앱들 중, 어떤 것들이 지속될 것인가?
     * 물론, 네트워크 효과도 있음. 우리는 네트워크 효과가 지난 세대의 직장 협업 도구, 마켓플레이스, 소셜 네트워크 등에서 방어력의 중요한 역할을 했음을 보았음 (내 책 The Cold Start Problem에서 다루었음) — 그리고 AI 시대에도 큰 역할을 할 수 있다고 생각함.

데이터베이스 래퍼와 CRUD 앱

     * 1990년대부터 2010년대까지 웹 앱의 성장 곡선(S-curve)을 참고하면 현재의 AI 상황을 이해하는 데 도움이 됨.
          + 1990년대 닷컴 붐 초기에는 웹사이트의 v1을 구축하기 위해 수백만 달러를 조달해야 했음. 인프라가 부족했기 때문임.
          + 서버를 데이터 센터에 직접 설치해야 했으며, 독점 소프트웨어 스택을 사용해야 했고, 성장 전략은 소비재 산업(CPG)에서 차용한 비효율적인 방식이었음.
          + 당시에는 제품이 ""작동한다""는 것 자체가 주요 차별점이었으며, 첫 번째 웹 기업들은 주로 스탠퍼드 컴퓨터 공학 박사들이 설립했음.
     * 하지만 두 세대가 지난 후, 웹사이트 구축은 오픈 소스, 클라우드 컴퓨팅, 클릭당 비용(CPC) 광고 등의 발전으로 인해 간단해짐.
          + 많은 인기 웹앱들은 단순한 ""데이터베이스 래퍼(또는 CRUD 앱)""에 불과했음.
          + 블로그, 트위터, 플리커 같은 서비스가 대표적이며, 간단한 데이터 생성(Create), 읽기(Read), 수정(Update), 삭제(Delete) 기능을 제공했음.
          + Ruby on Rails와 CMS 소프트웨어가 등장하면서 이러한 웹 개발이 더욱 쉬워짐.
          + 당시에도 벤처캐피털(VC)들은 ""Facebook 같은 제품이 방어력을 가질 수 있을까?""라는 질문을 던졌음.
     * 그러나 Web 2.0 시대는 네트워크 효과를 활용하여 이러한 문제를 해결했음.
          + 단순한 CRUD 앱이 아니라, 커뮤니티와 네트워크 전체가 데이터를 공유하고 협업하는 기능을 추가했음.
          + 네트워크가 유지되는 한 제품이 방어력을 가지게 되었으며, 이것이 Web 2.0이 소비자 기술을 다시 활성화시킨 핵심 요소였음.
          + 과거에도 비슷한 사례가 있었는데, 90년대 초 Windows/Mac 기반 GUI 데스크톱 붐도 Visual Basic을 이용한 ""폼 기반 애플리케이션""의 증가로 인해 촉진되었음.
     * 즉, 초기 인터넷 시대의 독점적이고 폐쇄적인 기술 스택이 Web 2.0에서 개방되고 상품화된 것처럼, AI도 같은 흐름을 따를 가능성이 큼.
          + ""이걸 만들 수 있나? 만들 돈을 조달할 수 있나?""라는 질문에서 ""만들 수는 있지만, 사람들이 사용할 것인가? 그리고 유지될 것인가?""라는 질문으로 경쟁의 축이 이동함.
          + AI 제품도 같은 변화의 흐름을 타고 있으며, 네트워크 효과와 AI를 결합한 새로운 형태로 진화할 것임.

GPT 래퍼가 지배하는 세계에서의 성장과 네트워크 효과

     * 네트워크 효과란 ""사용자가 많아질수록 제품의 가치가 증가하는 현상""을 의미함.
          + 마켓플레이스, 소셜 네트워크, 협업 도구 등이 대표적인 사례임.
     * AI 제품이 네트워크 기능을 추가할 것인지, 기존 네트워크 제품이 AI를 통합할 것인지의 경쟁이 벌어질 것임.
     * B2B 및 SMB 시장에서는 협업 기능(댓글, 태그, 공유)과 팀 지원이 자연스럽게 추가될 것임.
     * 그러나 AI가 소셜 네트워크를 근본적으로 재창조할 수 있을지는 불확실함.
          + 사람들은 여전히 인간과의 상호작용을 원함.
          + AI가 인간 관계를 대체할 것인지, 보조 역할을 할 것인지에 대한 의문이 있음.
          + 예를 들어, AI 기반 소셜 앱이 사용자에게 단순한 이미지 기반 밈이 아니라 맞춤형 인터랙티브 콘텐츠를 공유하게 만들 수도 있음.
     * 현재까지는 소비자 중심 AI 제품이 완전히 성공한 사례가 없음.
          + Character.ai 같은 일부 사례가 있지만, 빠르게 성장하는 AI 중심 소비자 앱은 아직 확립되지 않음.
          + 원인은 API 비용이 아직 낮아지지 않았고, 기존 기업들의 경쟁력이 강하기 때문임.
          + 또한 AI가 인간 수준의 흥미로운 상호작용을 만들어내는 것이 아직 어렵기 때문일 수도 있음.
     * 하지만 AI+네트워크 기능이 결합된 제품들이 등장한다면, 복제는 쉬울지라도 네트워크 효과로 인해 방어력이 형성될 것임.
     * 네트워크 효과를 세 가지 축으로 나누어 정리할 수 있음:
          + 획득(Acquisition) 네트워크 효과
               o 제품이 기존 사용자 네트워크를 활용하여 새로운 사용자를 초대하고 공유하며 유입을 늘릴 수 있음.
               o AI 제품은 매력적인 콘텐츠를 생성하여 자연스럽게 공유를 유도할 수 있음.
          + 유지(Retention) 및 참여(Engagement) 효과
               o 네트워크 기반 제품은 댓글, 태그, 공유 파일 등을 통해 기존 사용자를 재활성화할 수 있음.
               o 단순한 AI 제품은 이메일/푸시 알림에 의존해야 하지만, 네트워크 기반 제품은 더 강력한 유지력을 가질 수 있음.
          + 수익화(Monetization) 효과
               o 협업 도구가 기업 내에서 널리 사용될수록 높은 가격의 요금제로 전환될 가능성이 높음.
               o 소셜 게임이 아바타 꾸미기 같은 요소로 수익을 창출할 경우, 친구들과의 상호작용이 가치를 높일 수 있음.
     * 결국, AI 제품들은 초기에는 신기한 기능으로 시장에 진입하겠지만, 점점 네트워크 기능을 추가하여 성장하고 방어력을 구축할 것임.

현 AI 세대가 승리할 것인가, 아니면 새로운 세대가 등장할 것인가?

     * 기술 혁신의 역사를 보면, 새로운 플랫폼이 등장할 때 기존 기업들은 적응하는 데 어려움을 겪었음.
          + 예를 들어, 모바일 혁신 초기에 Flipboard, Foursquare, Kik 등이 인기를 끌었지만, 결국 Uber, DoorDash 같은 후발주자들이 시장을 장악했음.
          + 현재 AI 시대에서도 초기 AI 스타트업들이 신기함을 제공하지만, 네트워크 효과를 결합한 후발주자들이 더 크게 성공할 수도 있음.
     * 또한, 기존 빅테크 기업들이 AI를 빠르게 채택하고 있기 때문에, 완전히 새로운 스타트업들이 반드시 승리할 것이라는 보장은 없음.
     * AI 시대는 빠르게 변화하고 있으며, 기존의 방어 전략이 AI와 결합하면서 새로운 시장이 형성되고 있음.
     * 앞으로 어떤 기업이 승리할지는 아직 알 수 없지만, 분명 흥미로운 시기가 될 것임.

   댓글 요약
    1. AI와 LLM의 성공 요인: 성공적인 AI/LLM 솔루션은 고성능의 ETL(Extract, Transform, Load) 프로세스가 필수적이다. 특히 특정 분야의 데이터 전처리와 집계 능력이 기업의 경쟁 우위를 결정한다.
    2. AI ""래퍼""의 역할: 래퍼는 기본 모델보다 우월하려면 특정 분야의 데이터 처리와 통합 능력이 뛰어나야 한다. 이는 기업의 진정한 경쟁 장벽(moat)을 형성한다.
    3. 오픈 소스와 복제: 많은 제품들은 오픈 소스 코드를 이용하지만 실제 코드를 읽지 않고 복제하는 경우가 많다. 이는 'left-pad' 사례처럼 얕은 혁신을 초래할 수 있다.
    4. 대형 모델의 경쟁: 대형 모델은 시장 점유율을 높이며, 나머지 제품들은 그 주변에서 경쟁해야 한다. 이는 빠른 인퍼런스 비용 감소와 함께 사용 사례별 모델 선택이 줄어든다.
    5. AI 기반 앱의 복제 가능성: AI 기반 앱은 복제하기 어려울 수 있다. 특히 복잡한 프롬프트와 모델 간 상호작용은 복제 과정에서 큰 도전이 된다.
    6. 모델과 래퍼의 경쟁: 모델 레이어에서는 경쟁이 치열해지고, 래퍼는 소프트웨어 엔지니어링 측면에서 경쟁 우위를 확보할 수 있다.
    7. OS의 역할: OS 제조사는 사용자 컨텍스트를 활용해 AI 기능을 통합하는 데 큰 강점을 가지고 있다. 이는 기존 앱 개발자들에게 경쟁 우위를 제공할 수 있다.
    8. 가치 창출의 요소: 특화된 프롬프트, 구조화된 데이터 접근, 네트워크 효과 등이 미래 가치 창출의 핵심 요소일 수 있다.
    9. 훈련 데이터의 중요성: 훈련 데이터는 경쟁 우위를 제공할 수 있다. 특정 사용자의 행동을 정확하게 반영하는 데이터는 복제된 제품과 차별화될 수 있는 중요한 자산이다.
   10. 라이선스 모델과 플랫폼 의존성: 기업은 특정 플랫폼에 의존하는 것을 고려해야 하며, 이를 통해 불확실성이 증가할 수 있다. 특히 지정학적 명령으로 시장 절반을 잃거나 사업을 중단받을 위험이 있다.

   YC 댓글 중 좋은 Wrapper가 되려면 ETL이 잘 되어있어야한다는 말에 공감... 합니다
"
"https://news.hada.io/topic?id=19127","우리가 소프트웨어를 망가뜨리고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          우리가 소프트웨어를 망가뜨리고 있음

     * 우리는 기능을 추가하거나 특정 부분을 최적화할 때 복잡성을 더 이상 고려하지 않음으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 복잡한 빌드 시스템으로 소프트웨어를 망가뜨리고 있음
     * 우리는 터무니없는 의존성 사슬로 모든 것을 비대하게 만들고 취약하게 만들면서 소프트웨어를 망가뜨리고 있음
     * 우리는 새로운 프로그래머들에게 ""Don’t reinvent the wheel!""이라고 말함으로써 소프트웨어를 망가뜨리고 있음. 그러나 바퀴를 재발명하는 것은 사물이 어떻게 작동하는지 배우는 방법이자 새로운 다른 바퀴를 만드는 첫 단계임
     * 우리는 더 이상 API의 하위 호환성을 고려하지 않음으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 이미 작동하는 것들을 재작성하도록 몰아붙임으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 모든 새로운 언어, 패러다임, 프레임워크가 나올 때마다 뛰어듦으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 기존의 복잡한 라이브러리를 다루는 어려움을 직접 구현하는 것과 비교할 때 항상 과소평가함으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 XYZ의 사실상 표준이 우리의 특정 용도에 맞춰 직접 구현할 수 있는 것보다 언제나 더 낫다고 여기면서 소프트웨어를 망가뜨리고 있음
     * 우리는 코드 주석이 쓸모없다고 주장함으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 소프트웨어를 순수한 공학적 학문으로만 착각함으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 더 이상 축소가 불가능한 시스템을 만들어 소프트웨어를 망가뜨리고 있음: 어떤 시스템에서든 단순한 것은 단순하게 달성되어야 하는 것임
     * 우리는 가능한 한 빨리 코드를 만들어내려 하면서 가능한 한 잘 설계된 코드를 만들려는 노력은 하지 않음으로써 소프트웨어를 망가뜨리고 있음
     * 우리는 소프트웨어를 망가뜨리고 있으며, 남게 될 것은 더 이상 해킹의 즐거움을 주지 않을 것임

   바퀴를 재발명 <-> 이미 작성하는 것 재발명

   이 둘은 서로 완전히 상반되는 개념 아닌가요?

   주석 붐은 온다

   와닫네요 ㅎㅎㅎㅎ 후배분들 들어올때 마다... 어떻게 알려줘야지 하고 있는데. 좋은 방법이 될듯..

   그만 때려요ㅠㅠ

   ....그냥 가만히 있을게요...

   한비자가 말했던 ""나라가 망하는 징조 10가지""와 겹쳐 보이는게 많네요.

        Hacker News 의견

     * Jonathan Blow의 강연을 떠올리게 함. 소프트웨어는 관리하지 않으면 다른 모든 것처럼 쇠퇴함
          + 소프트웨어 기술은 겉보기에는 발전하는 것처럼 보이지만 실제로는 쇠퇴 중임
          + 하드웨어 개선과 머신러닝이 발전의 환상을 주지만, 소프트웨어의 근본적인 견고성과 신뢰성은 악화됨
          + 현대 소프트웨어 개발은 불필요하게 복잡해져 간단한 작업도 어렵게 만듦
          + 이러한 복잡성은 프로그래머의 생산성을 감소시키고 세대 간 지식 전수를 방해함
          + 사회는 버그가 많고 신뢰할 수 없는 소프트웨어를 정상으로 받아들이게 됨
          + 운영 체제에서 개발 도구까지 모든 수준에서 소프트웨어 시스템을 단순화하지 않으면 문명은 역사적 붕괴와 유사한 기술적 퇴보의 위험에 직면함
     * Dieter Rams의 ""좋은 디자인의 10가지 원칙""을 떠올리게 함
          + 좋은 디자인은 혁신적임
          + 좋은 디자인은 제품을 유용하게 만듦
          + 좋은 디자인은 미적임
          + 좋은 디자인은 제품을 이해하기 쉽게 만듦
          + 좋은 디자인은 눈에 띄지 않음
          + 좋은 디자인은 정직함
          + 좋은 디자인은 오래 지속됨
          + 좋은 디자인은 마지막 세부 사항까지 철저함
          + 좋은 디자인은 환경 친화적임
          + 좋은 디자인은 가능한 한 적은 디자인임
     * 2000년대에 회사에서 일했던 경험을 공유함
          + 수십 대의 컴퓨터로 작업을 수행하고, 서버 룸을 구축하고, 3TB의 데이터를 저장할 SAN을 구축함
          + 자체 개발한 VB6 작업 스케줄러로 Object Rexx 스크립트를 실행하는 컴퓨터 간 작업을 조율함
          + 내부 로드 밸런서, 웹 서버, 메일 서버, FTP 서버를 사용하여 파일을 송수신하고 자체 소프트웨어를 사용함
          + 이제는 yaml 파일과 클라우드 서비스를 통해 일주일 이내에 전체 설정을 재현할 수 있음
          + 서버 아키텍처가 ""추상화""됨
          + 역호환성에 대한 비판, Windows의 문제점 중 하나로 지적됨
          + Apple은 역호환성을 깨고 5개의 프로세서를 이동하며 ARM 칩에서 32비트 코드 호환성을 제거함
     * 상반된 의견들이 많음
          + 역호환성을 유지하면서 복잡성을 피해야 함
          + 거대한 종속성 트리를 피하고 스스로 바퀴를 재발명해야 함
          + 모든 요구를 충족시키는 유일한 방법은 모든 사람이 코드를 작성하지 않는 것임
          + 하루에 한 번쯤은 그렇게 되기를 바라는 마음이 있지만 자랑스럽지는 않음
     * 첫 직장에서의 경험을 공유함
          + C로 소프트웨어를 작성했으며, 상업용 소프트웨어를 현실적으로 작성할 수 있는 유일한 언어였음
          + 빌드를 할 수 있는 사람은 한 명뿐이었고, 상업용 빌드 도구를 사용했으며, 그 도구를 사용할 수 있는 유일한 사람이었음
          + 빌드는 몇 시간이 걸렸음
          + 우리는 잘하고 있다고 생각함
     * 소프트웨어를 파괴하는 이유에 대한 의견
          + XYZ의 사실상의 표준이 우리에게 맞춤화된 것보다 낫다고 항상 생각함으로써 소프트웨어를 파괴함
          + 일반적인 접근 방식은 많은 문제에 대한 얕은 해결책을 쉽게 전환할 수 있음
          + 기술자들은 이러한 접근 방식을 좋아하며, 특히 직업을 자주 바꾸기 때문에 몇 가지를 가지고 있음
          + 그러나 맞춤형 솔루션이 일반적인 것보다 훨씬 더 성능이 좋음
     * 모든 진술은 거래임
          + 모든 경우에 무언가를 희생하여 다른 것을 얻음
          + 때로는 바퀴를 재발명하지 않는 것이 타당함
          + 때로는 학습을 위해 바퀴를 재발명해야 함
          + 전체적으로 우리는 파괴하는 것보다 더 많은 것을 창조하고 있음
          + 부정적인 입장을 취할 필요성을 느끼지 않음
     * antirez를 존경하지만, 이 게시물은 토론에서 유지되지 않을 좋은 소리의 짧은 진술로 가득 차 있다고 생각함
          + 예: 초보자는 바퀴를 재발명해서는 안 됨
          + 그들은 주어진 맥락에서 사용 가능한 도구를 사용해야 함
          + 그들이 실험하고 싶다면 자신만의 컴파일러를 작성해야 함
          + 그러나 그것을 생산에 사용해서는 안 됨
          + 역 API 호환성은 대부분의 경우 비즈니스 결정임
          + ""우리는 소프트웨어를 파괴하고 있다""로 모든 문장을 시작하는 것은 도움이 되지 않음
          + 이것은 실제보다 훨씬 더 암울하게 들림
     * 복잡성/종속성 그래프에 대한 의견
          + 무작위 애플리케이션의 복잡성/종속성 그래프가 절대적으로 미쳤음
          + 펌웨어와 OS를 포함하지 않지만, 충분히 가까움
          + 전이적 종속성 문제를 해결해야 함
          + OS(Win32 API, Linux syscalls)를 C로 작성하는 모든 것의 유일한 하드 종속성으로 간주함
          + Java/Python으로 전환하면 이 레이어를 제어할 수 없음
          + 모든 라이브러리에 의존하지 않고 특정 상황에 맞는 몇 백 줄의 코드를 작성하는 것이 필요함
          + 유지 보수 부담이 증가하지만, 종속성도 유지 보수가 필요함
          + 잘못된 API를 가질 수 있으며, 호환성을 무작위로 깨거나, 버려지거나, 악성 소프트웨어가 될 수 있음
          + 유용한 프로젝트의 개인적인 최대 라인 수는 5-10KLOC의 Java/JS/Python임
          + 몇 시간 내에 검토할 수 있으며 몇 년 후에 쉽게 수정할 수 있음
     * 소프트웨어를 파괴하는 요소들
          + Leetcode 인터뷰, 이력서 기반 개발, 빈번한 직업 이동, 성장 투자 사기, 메트릭 게임, 승진 추구, 스프린트 연극, 조직 차트의 모든 수준에서의 허풍, 산업의 무관심
"
"https://news.hada.io/topic?id=19149","소프트웨어 추상화가 문명을 파괴하는가? (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소프트웨어 추상화가 문명을 파괴하는가? (2021)

     * Jonathan Blow의 주장 요약
          + 세대 간 정보 전달이 희석됨.
          + 이론보다 실천이 기술 유지에 더 중요함.
          + 소프트웨어가 세상을 운영함.
          + 추상화는 저수준 프로그래밍에 대한 무지를 조장함.
          + 저수준 지식을 잊으면 중요한 소프트웨어를 유지할 수 없어 문명이 붕괴할 것임.
     * 비판 및 반론
          + Blow의 주장은 오류와 오해가 많음.
          + 정보의 진실성이 중요하며, Blow의 정보는 여러 면에서 잘못됨.
          + ""Five nines"" (99.999% 가동률) 지표는 여전히 사용되고 있음.
          + 견고한 소프트웨어는 여전히 존재하며, 기술 발전은 계속되고 있음.
          + 추상화가 능력 상실로 이어진다는 주장은 과장됨.
     * 기술 발전과 추상화
          + 많은 프로그래머들이 메모리 관리와 포인터를 다루지 않으려 함.
          + C와 어셈블리 코드를 작성하는 사람들이 여전히 많음.
          + Rust와 같은 새로운 언어는 견고성에 중점을 둠.
          + 추상화는 새로운 기술을 발전시키는 데 기여함.
     * Facebook의 생산성 논란
          + Facebook의 진정한 제품은 광고 전달 플랫폼임.
          + 많은 프로그래머들이 광고 시스템을 개선하는 데 기여함.
     * 과거와 현재의 비교
          + 과거의 소프트웨어 개발 환경과 현재는 크게 다름.
          + 현대의 컴퓨터는 과거보다 훨씬 견고함.
          + 사용자의 기대치가 높아짐에 따라 소프트웨어 복잡성이 증가함.
     * 추상화와 지식 상실
          + 추상화는 지식 상실을 가속화할 수 있음.
          + 그러나 추상화는 많은 사람들에게 창의성을 발휘할 기회를 제공함.
          + 중요한 것은 중요한 시스템을 유지할 수 있는 기술 기반을 유지하는 것임.
     * 결론
          + Blow의 주장은 일부 타당하지만, 많은 부분에서 과장되고 오해가 있음.
          + 소프트웨어 복잡성과 추상화는 해결 가능한 문제임.
          + 디지털 세계의 더 큰 문제는 프라이버시와 자유임.

        Hacker News 의견

     * 나는 Montana State에서 시스템 수업을 가르치며, 학생들이 수업을 시작할 때 파일 시스템이 무엇인지 이해하지 못하는 경우가 많음
          + Blow의 의견에 일부 동의하지 않지만, 고등학생부터 기술 학생들을 위한 NAND-to-Tetris 스타일의 교육이 필요하다고 생각함
          + Little Man Computer와 간단한 MIPS 에뮬레이터 같은 ""구식"" 모델을 사용하여 학생들이 기술의 기원을 이해하도록 도움
          + 현대의 64비트 아키텍처 책을 보면 웃음이 나옴
          + 기술을 근본적으로 연결하는 것은 어려운 문제임
     * 당신의 의견에 동의함. Blow의 강연을 보았고 비판이 중요하다고 생각함
          + Blow가 ""화면에 픽셀을 그릴 수 없다""고 말했을 때는 맞다고 생각함
          + 나는 중간 규모 게임 회사의 게임 엔진 프로그래머이며, 그래픽 코드를 작업할 사람을 고용하는 것이 매우 어려워지고 있음
          + DX12는 이전 세대(DX11)보다 프로그래머에게 많은 것을 요구하며, Microsoft도 DX12를 배우는 것이 이전 그래픽 API 경험 없이는 매우 어렵다고 인정함
          + 이러한 API는 그래픽 카드의 한계를 극복하고 저수준 최적화를 구현하려는 개발자를 위한 것이지만, 이제는 산업 표준이 되어 경험 없는 사람에게는 가르치기 어려움
          + 변화가 없다면 고용 풀은 계속 줄어들 것임
     * 오래된 웹 개발자가 추상화에 대해 불평하면 React 개발자를 겨냥함
          + Python 개발자가 추상화에 대해 불평하면 오래된 웹 개발자를 겨냥함
          + C++ 애플리케이션 개발자가 추상화에 대해 불평하면 Python 개발자를 겨냥함
          + 펌웨어 개발자가 추상화에 대해 불평하면 애플리케이션 개발자를 겨냥함
          + 전기 엔지니어가 추상화에 대해 불평하면 펌웨어 개발자를 겨냥함
          + 개인의 지식에 기반하여 ""과도한 추상화""의 경계를 설정하고 이후 모든 것을 ""문명의 파괴""라고 부르는 것은 독특한 견해임
     * 서버에서 JavaScript와 React 같은 것들이 웹을 소프트웨어 개발의 혼란으로 만들었음
          + 많은 아이들이 HTML이 브라우저에서 렌더링된다는 것을 모르고 React가 브라우저에서 렌더링되는 것이라고 생각함
          + Vercel의 CEO가 React를 개발의 Linux 커널이라고 생각하는 것은 어리석음
     * Blow는 개발에 대해 훌륭한 점을 자주 지적하지만, 종종 핵심을 놓침
          + 그는 훌륭한 업적을 이루었고 들을 가치가 있는 아이디어를 가지고 있지만, 때때로 말도 안 되는 소리를 함
          + 문명의 붕괴에 대한 이야기는 그런 말도 안 되는 소리 중 하나라고 생각하며, OP가 제공한 반박에 감사함
          + Casey Muratori에 대해서는 언급하지 않겠음, 그는 Blow처럼 하려고 하지만 좋은 부분조차 제대로 하지 못함
     * 현대 소프트웨어 환경에는 많은 문제가 있으며, 과도한 추상화가 문제라고 생각함
          + 그러나 반대 극단도 나쁘며, 사람들은 과거를 지나치게 낭만화함
          + 충돌과 재부팅 문제뿐만 아니라, 호환성을 추구한 시스템조차도 불일치 문제를 겪었음
          + 가장 신뢰할 수 없는 현대 시스템(Windows 11)에서도 내 컴퓨터는 2010년 이전의 어떤 컴퓨터보다 더 신뢰할 수 있음
          + Windows 95용으로 작성된 소프트웨어도 실행할 수 있음
     * 모든 단순화가 추상화는 아님. 모든 추상화가 단순화는 아님
          + 단순화를 추구하는 것이 보통 추상화를 동기 부여함
          + 추상화가 소프트웨어나 문명을 죽인다고 생각하지 않지만, 잘못된 추상화는 유연성과 접근성을 저해함
          + 거의 모든 언어에서 구문 설탕을 예로 들 수 있음
          + 특정 요소 때문에 실수를 더 많이 하는 것이 아니라 복잡한 문제를 해결하기 위해 도구를 잘 사용하는 것이 어려움
     * 잘못된 추상화는 많음. 기술의 ""속도의 종교""와 자만심 때문에 첫 시도에서 끝나는 경우가 많음
          + 인기 있는 프로젝트의 일부가 되면 다른 사람들이 모방함
          + 10-20년 동안 반복되면 거대한 혼란이 발생함
          + Jonathan Blow의 강연을 좋아하며 매년 한 번씩 돌아봄
          + 그는 논란의 여지가 없는 말을 하지만, 많은 개발자들이 최선을 다하지 않고 있다는 것을 알고 있음
     * 저자는 새로운 세대에 속하며, Blow가 말한 것을 이해하지 못함
          + Figma가 디자인 세계를 파괴하고 있다고 말하면 젊은 디자이너들은 모든 것이 좋다고 생각함
          + 그들은 그 환경에서 자라지 않았기 때문에 문화와 경험의 동등한 것을 배울 가능성이 적음
     * ""저수준의 것을 잊으면 문명이 무너질 것""이라는 주장에 반대함
          + 저수준 시스템을 사용하여 고수준 프로세스를 모델링하는 데 너무 많은 복잡성이 있음
          + 복잡성은 문제이며, 복잡성을 최소화하고 우발적인 복잡성을 피해야 함
"
"https://news.hada.io/topic?id=19135","도시의 비용 효율적 자체 유틸리티 설립 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       도시의 비용 효율적 자체 유틸리티 설립 가능성

     * 도시가 자체 유틸리티를 시작할 수 있는 이유
          + PG&E의 전기 요금은 실제 전기 생산 및 전송 비용보다 훨씬 높음. 평균적으로 PG&E의 전기 요금은 킬로와트시당 40센트에서 시작하며, 이는 Santa Clara의 Silicon Valley Power가 제공하는 17센트보다 훨씬 높음.
          + PG&E의 높은 요금은 도시가 자체 유틸리티를 설립하여 PG&E의 요금을 낮출 수 있는 가능성을 제공함. 가구당 연간 약 $800-$1200의 절감 효과가 있음.
     * 전기 비용의 기본 구성 요소
          + 생산: 전기 생산 비용은 킬로와트시당 약 4센트.
          + 전송: 전력을 전원에서 지역 변전소로 이동하는 비용은 킬로와트시당 약 4센트.
          + 배급: 지역 변전소에서 집으로 전력을 전송하는 비용은 킬로와트시당 20센트로, 실제 비용과 맞지 않음.
          + 기타: 운영, 유지보수, 이익 등에서 큰 비용 발생.
     * 높은 전기 요금의 부정적 영향
          + 인플레이션에 대한 불만 증가.
          + 저소득층이 전기 요금에 더 큰 비율의 소득을 지출하게 됨.
          + 높은 전기 요금은 전기차나 전기 난방을 선택할 때 경쟁력을 떨어뜨림.
     * Walnut Creek의 사례
          + Walnut Creek은 PG&E의 요금 적용에 몇 가지 문제가 있음. 예를 들어, 도시가 밀집되어 있어 전송 비용이 저렴함.
          + 아파트가 많아 태양광 설치가 어려움.
          + 지역 비즈니스의 에너지 비용이 높음.
     * Palo Alto의 사례를 Walnut Creek에 적용
          + Palo Alto의 전기 소비는 2024년에 830 기가와트시였으며, Walnut Creek은 약 1150 기가와트시로 추정됨.
          + Palo Alto는 830 기가와트시로 $172백만의 수익을 올렸으며, 이는 킬로와트시당 약 20센트에 해당함.
     * 비용
          + 네트워크 인수 및 금융 비용: PG&E의 배급 네트워크를 인수하는 데 약 $350백만 필요.
          + 생산 및 배급: Walnut Creek은 킬로와트시당 약 17센트로 전력을 구매할 수 있음.
          + 운영: 고객 서비스, 재무 관리 등으로 연간 약 $90백만 필요.
          + 자본 개선: 그리드 현대화 등에 연간 약 $35백만 필요.
     * 총 비용
          + 총 비용은 킬로와트시당 30센트로, PG&E의 기본 요금보다 10센트 낮음. Walnut Creek의 주거용 전기 사용자에게 연간 약 $23백만, 비즈니스 사용자에게 약 $92백만의 절감 효과 제공.
     * Walnut Creek의 추가 이점
          + 인프라 업그레이드 용이: 지역 유틸리티를 통해 인프라 투자를 더 빠르고 저렴하게 수행 가능.
          + 녹색 인프라 투자: 저렴한 자본 비용으로 지속 가능한 에너지 프로젝트에 투자 가능.
          + 녹색 전환 촉진: 전기 비용 절감으로 전기차나 전기 난방 기기 선택이 더 경제적으로 유리해짐.
          + 재정 안정화: 유틸리티 수익이 안정적이므로 경기 침체 시 재정 지원 가능.
          + 통합 장려: Walnut Creek에 통합되지 않은 지역의 통합을 유도할 수 있음.
          + PG&E의 대안: PG&E는 도시가 서비스 네트워크를 떠나는 것을 두려워하며, 이를 방지하기 위해 양보를 제공할 가능성이 있음.
     * 결론
          + 높은 전기 요금은 캘리포니아의 기후 전환을 방해하며, 도시가 자체 유틸리티를 설립하여 이러한 문제를 해결할 수 있음.

        Hacker News 의견

     * 미시간의 작은 마을에 살았을 때, 시에서 제공하는 댐을 이용한 전력은 저렴하고 매우 신뢰할 수 있었음. 하지만 몇 년마다 주의 대형 전력 회사가 도시의 유틸리티를 사려고 시도했음
          + 내가 이사한 후 시의회가 유틸리티를 판매했음. 그 결과 전기 요금이 즉시 두 배로 올랐고, 유지보수가 줄어들어 정전이 자주 발생했음. 그들이 받은 돈을 어디에 썼는지 모르겠지만, 매우 잘못된 결정이었음
     * 저자는 전기 요금이 최대 33% 감소할 것이라고 추정하지만, PG&E의 이익률은 11%에 불과함. 이는 이 가정이 중요한 세부 사항을 놓치고 있다는 좋은 힌트임
          + 기사는 Walnut Creek이 유난히 낙관적인 위치라는 점과 PG&E가 지속적인 인프라 구축과 관련된 큰 비용을 인식하고 있다는 점을 인정하며 이를 지적할 가능성을 대비하고 있음
          + 이러한 프로젝트의 숨겨진 문제는 유틸리티를 시 예산에 포함시키면 전기 요금을 인상하는 대신 필요한 개선을 위해 세금 자금을 사용하기 시작하는 것이 너무 유혹적이라는 것임
          + 문제가 발생하면 정치인들은 이를 후임자의 문제로 넘기거나, 문제를 다음 세대로 미루기 위해 증가하는 부채 부담으로 비용을 전가하려고 함
          + 눈에 띄는 요금을 낮추는 것이 더 쉬워지지만, 인프라 비용을 충당하기 위해 세금이 오를 수 있음
          + 이익률의 3배가 아닌 요금 인하를 보여주는 분석이 있다면 더 개방적일 수 있지만, 제시된 바와 같이 이는 모든 세부 사항을 무시하고 절약을 생성하는 대략적인 계산처럼 느껴짐
     * 이는 지방 자치 단체에 있어 당연한 선택임. 민간 기업은 주주에게 이익을 돌려주고 경영진에게 주는 프리미엄을 부과함
          + 지방 자치 단체는 유틸리티 회사가 부과하는 프리미엄보다 훨씬 낮은 금리로 신용에 접근할 수 있음
          + 주민들은 더 저렴한 접근과 유틸리티 운영에 대한 더 많은 영향을 받음
          + 북미에서 이익을 위해 천연가스(난방), 전기, 물을 지불하는 사람들의 수는 정말 어이없음
          + 미국 서부에서 외국 기업이 수자원 권리를 구매하는 것에 대한 특정 우려가 있음
     * 도시가 자체 유틸리티를 시작하는 것이 비용 효율적임은 당연함. 규모의 경제가 도시 및 교외 전기화와 유지보수에 유리하게 작용함
          + 효과적이지 않은 것은 저밀도 지역의 전기화와 유지보수임. PG&E와 같은 전력 독점 기업은 서비스를 제공해야 함
          + 도시 및 교외 고객은 사실상 농촌 고객을 위한 전송 및 유지보수 비용을 보조하고 있음
          + PG&E는 가장 수익성이 높은 고객 기반인 도시가 공공 유틸리티를 갖는 것을 원하지 않음. 충분히 많은 도시가 그렇게 하면 회사가 수익성을 잃고 붕괴되기 때문임
          + 이것이 우리가 그렇게 해야 하는 정확한 이유임
     * Boulder CO는 이를 시도했지만 실패했음. 10년간의 싸움 끝에 Xcel의 로비가 승리했고, 프로세스를 시작하는 데 사용된 2,900만 달러가 소진되었음
          + 더 많은 도시가 이를 시도하여 어떻게 잘 할 수 있는지 보여줄 필요가 있음
     * 나는 작은 도시(9,000명)의 시의회 의원으로, 시가 소유하고 운영하는 전력 발전소를 가지고 있음. 우리는 4개의 대형 디젤 발전기, 두 개의 대형 풍력 터빈, 몇 개의 태양광 패널 필드를 가지고 있음
          + 24/7 전력을 사용할 수 있는 것이 좋음. 정전이 발생하면 디젤 발전기를 가동하여 몇 분 만에 전력이 복구됨
          + 우리는 그리드에서 전력을 구매해야 하지만, 여름에는 사람들이 에어컨을 사용하여 가격이 오르고 태양광 패널이 초과 전력을 생성하여 수익을 올릴 때 전력을 다시 판매하기도 함
          + 전력 가격은 도시 외부와 거의 동일함. 솔직히 가능한 많은 것을 지역에 유지하는 것이 우리 커뮤니티에 정말로 이익이 되었음
     * 저자는 배전망을 인수하는 비용을 언급하며, SF의 실패한 시도를 인용함. 저자는 인플레이션과 인구를 기반으로 Walnut Creek의 그리드 가격을 계산하려고 하지만, 이 기반이 된 25억 달러 수치는 PG&E에 의해 거부되었음
          + PG&E는 독점 기업으로서 원하는 대로 가격을 설정할 수 있으며, 그리드를 유지하는 한 연결을 위해 상당한 지속적인 지불을 요구할 수 있음
          + PG&E는 일상적인 전력망 연결에 대해 막대한 지불을 계속 요구하고 있음. 예를 들어, 시가 공공 전력을 사용하여 가로등, 교통 신호 및 기타 작은 부하를 연결하기 위한 최신 요구 사항을 준수하는 비용은 10억 달러를 초과할 것임
          + 우리는 그리드를 되찾기 위해 법적 절차를 통해 가격을 설정하는 정치적 의지가 필요하거나, PG&E를 포기하고 중복 배전망을 구축해야 할 것임
     * 이전의 ""공공 유틸리티""는 이제 종종 PE 또는 Berkshire Hathaway에 의해 소유됨. Charlie Munger 또는 Warren Buffet의 민속적 지혜가 HN에 게시될 때마다 그들의 회사가 State Farm 보험, GEICO 및 오늘 HN에 게시한 이 보석을 변형하는 작업에 대해 생각하지 않을 수 없음
          + 규제로 인해 소비자들은 문자 그대로 그리고 재정적으로 피해를 입은 상태로 남아 있음
     * 북부 일리노이의 여러 도시가 자체 유틸리티 그리드를 가지고 있음. 떠오르는 도시로는 Naperville, Princeton, Rochelle, Peru가 있으며, 마지막 세 도시는 자체 발전소를 가지고 있음
          + Rochelle의 시 유틸리티 시스템은 물과 하수도, 광섬유 인터넷도 제공함
     * 최근 서브레딧에서 HN의 능력 범위를 벗어나는 HN 스레드에 대한 이야기가 있었음(그 경우 핵무기) 이 스레드도 같은 느낌을 줌
          + 나는 유틸리티 분야에서 일하며 여러 국가/대륙과 미국 전역에서 일했음 (CA에서 살고 일했음)
"
"https://news.hada.io/topic?id=19174","PDFSyntax - PDF 파일 내부 구조의 HTML 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PDFSyntax - PDF 파일 내부 구조의 HTML 시각화

     * PDF 파일의 내부 구조를 검사하고 변환하는 Python 라이브러리
     * PDF 표준의 7장(""Syntax"")을 중점적으로 구현함
     * 바이트 수준에서 문서 구조를 관리하여 메타데이터 접근, 회전 등 다양한 변환 작업을 수행할 수 있음

주요 특징

     * PDF 읽기/쓰기 작업을 위한 API 툴킷 제공
     * 특정 기능을 터미널 또는 브라우저에서 사용할 수 있도록 CLI(Command Line Interface) 지원
     * 의존성이 없는 가벼운 라이브러리로, 순수 파이썬으로 작성됨
     * 단순성과 불변성을 중시하여 설계됨
     * PDF 표준이 허용하는 비파괴적 편집을 지원하며, 기본적으로 원본 파일 끝에 증분 업데이트를 추가함
          + 모든 수정 내역을 되돌리거나 하나의 버전으로 합칠 수도 있음

라이브 데모

     * PDFSyntax의 정적 HTML 출력물을 브라우저에서 탐색할 수 있는 라이브 데모를 제공함.
     * 데모는 PDF 사양의 Simple Text String 예제 파일에 대한 출력물임.

        Hacker News 의견

해커뉴스 댓글 모음 요약

     * 과거에 PDF에서 데이터를 추출하는 작업을 맡았던 경험이 있음. 당시에는 AI 기술이 없었지만, 현재는 LLMs를 활용하여 데이터를 추출할 수 있는 가능성이 있음.
     * 과거 직장에서 PDF 데이터 추출 도구가 있었다면 많이 사용했을 것이라는 의견. 이상적인 도구는 파일을 드롭하면 로컬에서 모든 작업을 수행하는 방식이어야 함.
     * iText RUPS라는 무료 도구를 사용하여 PDF 디버깅을 해왔으며, 새로운 도구의 기능이 더 강력할 것 같아 기대된다는 의견.
     * PDF가 XPS, DjVu, XHTML(EPUB) 등으로 대체되지 않는 이유에 대한 의문. 간단한 문서 형식이 필요하며, 페이지 내 하이퍼링크, 글꼴 크기 변경 등이 가능해야 한다고 주장.
     * 포렌식과 워터마크 찾기에 유용하다는 의견.
     * PDF의 모든 바이트를 보여주면 좋겠다는 의견. endobj와 xref가 보이지 않는다는 점을 지적.
     * GitHub에 유사한 프로젝트가 있었으며, TCP/IP 예제가 기억난다는 의견.
     * 브라우저 라이브러리로 사용하면 좋겠다는 의견. 파일을 드래그 앤 드롭하여 내부를 볼 수 있는 기능이 인상적임.
     * UI 도구가 라이브러리인지 궁금하다는 의견. CSS를 잘 활용한 간단한 UI라는 점이 좋다고 평가.
     * 시각 미디어 형식의 콘텐츠를 바이트 단위로 설명하는 도구를 찾고 있다는 의견. JPEG, PNG, AVI, MP4 등의 형식을 다룰 수 있는 도구를 알고 있는지 질문.
"
"https://news.hada.io/topic?id=19184","프로그래머를 해고하고 AI로 대체하는 것은 기술업계 최악의 실수임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  프로그래머를 해고하고 AI로 대체하는 것은 기술업계 최악의 실수임

AI가 프로그래머를 대체할 수 있을까?

     * 과거에는 프로그래머를 존중하던 기술 업계가 이제는 ""AI가 모든 문제를 해결할 수 있다고 착각""
     * AI가 프로그래밍을 대신할 수 있다고 믿고 ""비싼 프로그래머들을 해고하는 움직임""을 보임
     * 그러나 과거에도 엔지니어를 대량 해고한 기업들은 제품 실패와 소송, 절박한 재고용으로 끝났던 것을 기억해야 함

문제 1: 새로운 세대의 프로그래머는 준비가 덜 되어 있음

     * 전통적으로 신입 개발자는 ""실제 코드 수정, 시스템 분석, 문제 해결""을 통해 성장
     * 하지만 AI가 코드 생성을 맡으면 기업들은 신입 개발자를 훈련할 이유가 없어짐
     * 결과적으로 다음 세대 프로그래머들은:
          + 성능 최적화, 디버깅, 복잡한 문제 해결 능력을 배우지 못함
          + AI가 틀릴 때 이를 수정할 방법을 모름
          + 실제 엔지니어라기보다 AI 운영자에 가까워짐
     * 미래에는 진짜 문제를 해결할 수 있는 엔지니어가 부족한 사태 발생

문제 2: 프로그래머를 AI로 대체한 회사는 곧 후회할 것임

     * 소프트웨어 엔지니어를 해고하고 AI 생성 코드를 사용하는 회사는 실제 문제가 발생할 때까지 괜찮을 것임
     * 그러나 기업이 AI 코드 생성에 의존하면 보안 취약점, 버그, 유지보수 문제 발생
     * 예: 금융 기업이 AI가 생성한 코드로 시스템을 운영할 경우
          + 6개월 후 데이터 유출 및 보안 문제 발생
          + AI는 문제를 해결할 책임이 없으며, 그저 새로운 코드를 생성할 뿐
          + 개발자를 다시 채용하려 해도 이미 떠나고 없음

문제 3: 진지한 프로그래머는 더욱 희귀하고 비싸질 것임

     * 기술을 깊이 이해하는 프로그래머는 AI가 대체할 수 없는 존재임. 이들은 곧 매우 비싸질 것임
     * AI가 모든 것을 해결할 거라 믿은 기업은 결국 개발자 채용 경쟁에서 밀릴 것
     * 진정한 실력 있는 개발자들은:
          + 자신만의 프로젝트를 운영하거나, 컨설팅으로 높은 수익을 올리거나, 전문 분야에 집중
          + 기업이 다시 고용하려 해도 높은 연봉을 요구하며 쉽게 복귀하지 않을 것
          + 남아 있는 소수의 고급 개발자는 초고가 인력을 형성

결론: 기술 업계는 큰 실수를 저지르고 있음

     * AI가 프로그래머를 대체할 수 있다고 믿음으로써 혁신을 유지하는 생태계를 죽이고 있음
     * 곧 이런 세상에 들어가게 될 것:
          + 주니어 프로그래머는 훈련이 부족하고 AI에 지나치게 의존하게 될 것
          + 엔지니어를 해고한 기업들은 AI가 생성한 코드가 남긴 혼란을 해결하기 위해 분주하게 움직일 것
          + 최고의 프로그래머는 매우 희귀하고 비용이 많이 들기 때문에 가장 부유한 회사에서만 고용이 가능
     * 하지만 기술기업들이 스스로 무덤을 파고 싶다면 누가 막을수 있을까?
          + 이제 남은 것은 기업들이 스스로 무너지는 모습을 팝콘을 먹으며 구경하는 일뿐
     * 행운을 빌어요, 기술 업계. 여러분에게 곧 필요해 질 테니까.

   위 글은 AI코드작성으로 보안 취약점, 버그, 유지보수 문제를 거론했는데, 그런 문제까지 별도로 검사하고 수정보완까지 수행하는 AI가 나오는건 시간문제 아닐까 싶네요.

   실제로 이것도 할 수 있고 저것도 할 수 있다 말들은 하지만, 뭐하나 제대로 하는 게 없긴 해요. 눈에 띄는 성과는 효율의 측면에서 좋아졌다는 것 외에, 아직 믿을만한 벤치 마크도 없는데, 다들 몇% 좋아졌다는 말만 믿기에는, 실제로 써보면 그렇지 못한 경우도 많았어서요. 테스트 셋 이라는게 무의미할정도로, 이미 나와있는 자료들로 학습하고 테스트하는거라, 학습되지 않는 부분에 대한, 돌발적인 이슈에 얼마만큼 대처가 가능하냐가 관건이지 싶습니다.

   상당히 흥미로운 견해라고 생각하고, 많은 부분이 공감가는 글이었습니다. 저도 어느 정도 기간은 해당 글에서 언급한 측면이 강하게 작동할 것으로 생각합니다. 다만 어느 정도 기간이란 것이 오랫동안 지속될거 같진 않다는 생각도 듭니다.

   ChatGPT 출시로부터 겨우 2년 2개월 지났습니다. '세종대왕 맥북 던짐 사건'이 밈 처럼 퍼지며 우습게 여겨지던 기술이 2년 조금 넘어 여기까지 왔습니다. 앞으로의 발전이 지금까지와 같은폭 일 것이란 보장은 없지만, 대체까지 길어봐야 5년 봅니다. 이것도 너무 길게 본것 같아요.

   여기서 말하는 고급 개발자가 되려고 노력해야겠군요.. 허허..

   https://hl1itj.tistory.com/273

   그런데, 과연 내가 저기서 말하는 고급개발자라고 할수 있을까 싶긴하네요.

     실제 엔지니어라기보다 AI 운영자에 가까워짐
     느낌 옵니다.

        Hacker News 의견

     * AI 기술을 일상적으로 사용하는 개발자와 헤드라인만 읽는 사람들 사이에 큰 괴리감이 있음
          + AI는 성숙한 코드베이스에 큰 변화를 주기에는 아직 멀었음
          + 작은 코드 조각을 완성하거나 설명하는 데는 유용함
     * 이 기사는 두 가지 잘못된 가정에 기반하고 있음
          + AI의 코드 능력이 현재와 같을 것이라는 가정
          + 기업들이 AI로 사람을 대체할 것이라는 가정
          + AI의 코드 품질은 모델이 발전함에 따라 크게 향상될 것임
          + 지능적인 기업들은 AI만으로 대량 해고하지 않을 것임
     * 2000년대 아웃소싱 붐을 떠올리게 함
          + 그로 인해 많은 수익을 얻었음
     * 기술이 AI 때문에 프로그래머를 해고하는 것이 아님
          + 금융 환경 때문에 해고하는 것임
          + 금융 환경이 완화되면 새로운 기술 채용 물결이 올 것임
     * AI가 이미 프로그래머를 대체하고 있다는 증거가 부족함
          + 이는 해고를 가리기 위한 과장된 이야기일 가능성이 큼
     * 사람들이 왜 확신하는지 이해하기 어려움
          + 5년 후에 돌아보면 알게 될 것임
          + 현재 상황을 이용해 프로그래머를 더 효율적으로 일하게 할 필요가 있음
     * 온라인 게임 앱을 운영하는 소규모 팀의 이야기
          + XCode swift와 python을 사용함
          + AI가 실제로 기능을 올바르게 구현할 수 있는지 의문임
     * 과거의 아웃소싱 물결과 유사한 점이 있음
          + AI는 도구 중 하나로 사용될 것임
     * 모든 프로그래머를 해고했으나 AI와의 작업이 어려움
          + AI가 요구하는 특정 언어로 명확하게 전달할 수 있는 전문가를 고용함
     * AI로 모든 것을 대체하려는 시도가 역효과를 낼 것임
          + AI가 간단한 시스템을 구축하는 데 유용할 수 있음
          + 그러나 복잡한 기능이 필요하지 않은 경우에만 해당됨

     금융 환경이 완화되면 새로운 기술 채용 물결이 올 것임

   그런 날이 올까요?

   저는 20년 뒤에도 지금처럼 신뢰할 수 없는 AI인 채로 남아있을까? 하는 걱정이 듭니다. 20년이면 새로운 패러다임이 제시되고, 아주 뛰어난 하드웨어 기술이 만들어지고, 그게 실제로 구현될 수 있는 충분한 기간이라고 생각해요.

   지금 30대 이상의 분들은 20년 뒤 완??벽에 가까운 AI가 나오더라도 충분한 대비를 할 수 있는 시간적, 금전적 여유가 있겠지만...
   지금 10-20대의 분들은 이제 개발자로서의 커리어를 쌓아나가고, 학업과 생활 등으로 쌓인 부채를 해결하고 자산의 축적을 시작해나갈 시점에 직격탄을 맞게 되는게 아닐지...

   물론 AI가 아닌 다른 신기술들도 동일한 부작용을 가지고 있지만, 지금껏 있었던 직업 소멸의 경우보다 개발 직군은 더 높은 교육 비용을 들여야 하기에 더 리스크가 큰 것 같습니다.

   ...이러나 저러나 지금 우리는 당장 급하게 걱정하지 않아도 되겠...죠?ㅎㅎ;;;;;

   프로그래머 당사자는 ai가 프로그래머를 대체하기 어렵다는 걸 알지만, ""고용""하는 사람들은 그 사실을 모르는게 문제겠죠

   비유가 적절한지는 모르겠지만, chatGPT와 대화하면서 코딩하는 내내 이 채팅이 마치 운전할 때 사용하는 내비게이션 같다는 생각이 듭니다. 요즘에 T맵 없이 장거리 운전해야 한다고 하면 솔직히 겁도 나고, 가능할까?? 라는 생각이 들기도 하거든요. 그만큼 많이 의존하고 있고 운전에 있어서 정확한 내비는 획기적인 발전이었다고 생각합니다.

   그렇지만 내비게이션이 있다고 해서 모두가 운전할 수 있는 건 아니겠죠. AI가 운전자까지 대체할 수 있냐 없냐의 시기이긴 하지만, 여전히 운전자는 필요하고, 운전을 위한 면허도 필요하니까요. 그리고 막말로 내비가 없어도 운전은 가능하구요.

   AI는 그럴싸하게 코드를 알려주고 모르는 개념은 비유를 들어서 설명도 해줄 수 있지만, 그걸 이해하고 실제 코드와 제품을 개발해야 하는 주체는 어디까지나 사람이어야 합니다. 서로 상호 보완적인 관계이지 사람을 대체하는 개념은 아니라고 생각합니다.

   그런데 자율 운전 차량이 등장하고 있죠.

   비유에서 와닿는 지점이 있네요. 제가 느끼기로는 네비게이션이나 자율주행이 있어도 결국 운전석에 앉는 사람은 운전을 할 수 있는 사람이어야하는.

   IDE로 커서를 쓰면서 커서 없으면 어떡하지 라고 생각했다가도 커서가 장애가 났을 때 의외로 운전이 되는 모습을 보면서 없어도 되네 라고 생각했던거도 그렇고, ""대체"" 라는 관점에서 보면 괜찮은 비유인것같아요.
"
"https://news.hada.io/topic?id=19109","메타, 저작권 데이터 포함된 81.7TB 데이터셋 토렌트 및 시드 배포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                메타, 저작권 데이터 포함된 81.7TB 데이터셋 토렌트 및 시드 배포

     * 메타의 불법 토렌팅 의혹
          + 최근 공개된 이메일은 메타가 불법적으로 AI 모델을 해적판 책으로 훈련시켰다는 저작권 소송에서 중요한 증거로 제시됨.
          + 메타는 LibGen이라는 논란의 데이터셋을 토렌팅했다고 인정했으며, 이는 수천만 권의 해적판 책을 포함함.
          + 메타는 Anna’s Archive를 통해 여러 섀도우 라이브러리에서 최소 81.7 테라바이트의 데이터를 토렌팅했으며, 이 중 35.7 테라바이트는 Z-Library와 LibGen에서 가져옴.
          + 저자들은 메타의 불법 데이터 해적 행위가 매우 심각하다고 주장하며, 소량의 저작권 침해도 형사 조사로 이어질 수 있다고 강조함.
     * 저자들의 배포 이론 확장
          + 메타의 토렌팅과 시딩에 대한 정보 요청이 거부되었으나, 저자들은 자체적으로 증거를 수집함.
          + 메타의 연구 엔지니어인 Nikolay Bashlykov는 ""기업 노트북에서 토렌팅은 옳지 않다""며 우려를 표명함.
          + Bashlykov는 법무팀과 직접 상담하며, 토렌트 사용이 불법일 수 있음을 강조함.
     * 메타의 시딩 은폐 의혹
          + 메타는 Facebook 서버를 사용하지 않고 데이터를 다운로드하여 시딩을 은폐하려 했다는 내부 메시지가 공개됨.
          + 프로젝트 관리 책임자인 Michael Clark는 시딩을 최소화하기 위한 설정 변경을 언급함.
          + 저자들은 새로운 정보가 이전 증언과 모순된다고 주장하며, 관련자들의 재조사를 요구함.
          + 마크 저커버그는 LibGen 사용 결정에 관여하지 않았다고 주장했으나, 이메일은 그가 관련되었음을 시사함.
     * 메타의 법적 대응
          + 메타는 AI 훈련이 공정 사용이라고 주장하며, 저자들의 책이 실제로 배포되지 않았다고 법원에 제출함.
          + 메타는 저작권 침해 주장에 대해 법적 대응을 준비 중임.

        Hacker News 의견

     * YouTube, Google, Spotify 모두 초기에는 저작권을 위반하여 성장했음. 기업들은 자신의 지적 재산권을 보호하면서도 타인의 권리는 쉽게 침해함. 개인은 이런 특권이 없으며, 법을 지키려는 사람들은 결국 손해를 봄
     * Thomas Babington Macaulay의 저작권에 대한 연설을 읽어볼 것을 권장함. 저작권 연장은 종종 출판사에게만 이익이 됨
     * Meta가 저작권 있는 자료로 LLM을 훈련했다는 것은 명백함. 그들의 논문에서도 이를 인정하고 있음. 법적으로 AI 모델을 저작권 있는 자료로 훈련하는 것이 가능한지에 대한 논의가 필요함
     * Libgen은 인류의 문명적 프로젝트로 지지받아야 하며, 처벌받아서는 안 됨. 미래에는 우리가 얼마나 어리석었는지 깨닫게 될 것임
     * 많은 사람들이 대기업, 특히 Meta를 비판하며 처벌을 요구하지만, 지적 재산권 법을 개정하는 것이 더 현명함
     * 과거 인터넷 사용자들은 저작권 법이 너무 엄격하다고 생각했으며, 이는 소수의 이익을 위해 인류의 지식을 제한한다고 주장했음
     * Meta AI를 사용한 적이 없으며, 주변에서도 사용하는 사람을 본 적이 없음. Meta의 ROI가 무엇인지 이해하기 어려움
     * Meta 직원들이 저작권 있는 콘텐츠의 불법 다운로드 및 배포에 대해 거짓말을 했다는 기사가 있음
     * 대기업이 자동차를 다운로드하는 것은 괜찮지만, 개인이 하면 문제가 됨
"
"https://news.hada.io/topic?id=19176","은행 CEO의 디뱅킹(Debanking) 기사 철회 요청을 거절함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  은행 CEO의 디뱅킹(Debanking) 기사 철회 요청을 거절함

     * 2024년 12월, 마크 안드레센과 다른 암호화폐 옹호자들이 주장하는 디뱅킹 현상에 대한 언론/옹호 캠페인에 대응하여 ""Debanking (and Debunking?)""이라는 기사를 작성함
     * 이 기사는 문제의 여러 측면을 설명하며, 은행의 제약과 인센티브 구조, AML 규제가 무고한 기업가에게 미치는 영향, Operation Choke Point의 역사, 두 개의 암호화폐 관련 은행이 폐쇄된 이유, 암호화폐 산업이 언론/옹호 캠페인을 통해 얻고자 하는 것 등을 다룸
     * 이 기사는 정확하고 통찰력 있으며 균형 잡힌 것으로 널리 인정받았으며, ""Choke Point 2.0""이라는 용어를 만든 암호화폐 VC와 전 연방 은행 규제자가 칭찬함
     * 필자는 암호화폐 회의론자로 알려져 있지만, 디뱅킹 현상이 암호화폐보다 더 큰 문제라는 점에서 옹호자들의 몇 가지 주장이 타당하다고 믿음

모든 사람을 만족시킬 수는 없음

     * 인터넷에서 글을 쓰면서 부정적인 댓글을 많이 받았지만, 최근 은행 CEO로부터 철회 요청을 받음. 이는 처음 있는 일이며 신중한 검토가 필요함.
     * ""Bits about Money""는 금융과 기술의 교차점에 관한 독자 지원 전문 저널로, 지난 2년간 필자의 주요 직업적 산출물 및 수입원이었음.
     * Anchorage Digital의 CEO인 Nathan McCauley가 ""Debanking (and Debunking?)"" 기사의 철회를 요청했으며, 부정확성, 오해의 소지가 있는 진술, 주요 사실의 누락 등을 주장함.

철회의 기준은 높음

     * 철회는 표절, 인용문 또는 데이터 조작, 명예훼손 등의 심각한 위반에 대해 매우 드물게 이루어짐.
     * 필자는 복잡한 시스템에 대한 분석 에세이를 출판하며, 주로 뉴스를 전하지 않음. 독자들이 전문가로서 필자에게 기대하는 것에 대해 오류가 있을 경우 기록을 수정하려고 함.
     * McCauley의 주장은 전문성과 능력을 긍정적으로 보여주지 않기 때문에 Anchorage Digital에 사전 연락을 취했으나, 그들의 PR 팀은 응답하지 않음.

철회 요청에 대한 검토

     * 철회 요청을 받은 후 McCauley에게 기사에서 부정확하다고 생각하는 부분을 물었으나, 그는 철회 요청을 철회하지 않고 여러 부적절한 점을 나열함.

  1. ""몇몇 영역이 부정확하고 오해의 소지가 있음""

     * Silvergate의 유동성 위치에 대한 McCauley의 주장을 검토했으나, 기사는 Silvergate가 부실하다는 주장을 하지 않았음.
     * Bank Secrecy Act (BSA) 관련 결론을 검토했으며, Silvergate가 제대로 운영되지 않았다는 분석을 유지함.

  2. ""주요 사실의 많은 누락""

     * 암호화폐 기업이 안전하고 건전한 은행 관행과 호환되지 않는다는 규제 기관의 지침을 언급하지 않았다는 McCauley의 주장을 검토했으나, 기사는 이를 언급하고 있음.
     * SAB121에 대한 논의는 독자에게 중요하지 않다고 판단하여 간단히 언급함.

  3. ""디뱅킹의 의미를 놓침""

     * 암호화폐 옹호자들이 디뱅킹을 전략적으로 혼동하고 있다는 점을 지적하며, McCauley의 주장은 부정확함.
     * Anchorage Digital이 은행 파트너를 찾았다는 점을 강조하며, 디뱅킹의 일반적인 결과를 설명함.

결론

     * McCauley는 기사의 사실적 오류를 식별하지 못했으며, 의견 차이나 강조점의 차이는 철회의 합리적인 근거가 아님.
     * 은행 CEO가 철회를 요구하는 것은 매우 드문 일이며, 이는 심각한 부정행위가 발생했음을 의미함.
     * 필자는 인터넷의 규범을 지키며, 검열 시도에 맞서 싸울 것임.

        Hacker News 의견

     * Anchorage Digital의 은행 관계에 대한 구체적인 정보가 없음을 언급함
     * Anchorage Digital의 CEO에 대한 언급이 있음
     * Claude를 관리할 때 유능한 관리가 필요하다는 의견이 있음
     * 은행 CEO로부터 철회 요청을 받은 경험을 공유함
     * Twitter에 로그인하지 않으면 스레드를 볼 수 없다는 점을 언급함
     * Patrick의 글을 즐긴다는 의견이 있음
     * patio11의 글을 항상 즐긴다는 의견이 있음
          + 일본에서 COVID와 인구 상호작용에 대한 예측을 증명하는 글에서 분노를 느꼈음을 회상함
          + ""dropping hashes""의 목적은 다른 글을 이해하기 위함임
          + 자원의 잘못된 관리에 대한 분노와 분개를 느꼈음을 언급함
          + 은행의 붕괴가 실제 사람들에게 피해를 주고 사기를 나타낸다고 생각함
          + vaccinateCA 노력과 관련된 사람들과 그룹을 다루면서 법적 방어를 준비하고 있다고 생각함
          + 은행이 독립적이고 자원이 풍부한 개인을 공격할 때의 상황을 설명하는 힘의 과시일 수도 있음
          + 이 글을 본 후 그를 괴롭히려는 사람들은 전략을 바꿀 것이라고 예상함
     * egg boy와 Horowitz를 알지 않았으면 좋겠다는 의견이 있음
     * 기사 날짜 오류를 지적함
     * 은행 준수에 대한 교육적 가치가 있는 글이라는 의견이 있음
          + 암호화폐 산업이 소매 고객에 대한 쉬운 접근을 원한다고 언급함
          + Ponzi 사기를 유지하기 위해 더 많은 고객이 필요함
          + 고객 자금을 훔친 후 규제 기관으로부터 보호받기를 원함
          + Reddit에 나타난 유사한 사례를 언급함
          + XXXX AI의 홍보 메시지를 인용함
          + XXXX의 차트가 정점에서 90% 하락했음을 언급함
          + 암호화폐 사기로 인한 현재 손실이 약 760억 달러에 달함
          + 미국에서 규제가 많지 않을 것으로 예상함
          + CFTC가 폐쇄되고 TRUMP가 자신의 memecoin을 가지고 있다는 점을 언급함
     * ""buying ink by the barrel""에 대한 언급이 있음
"
"https://news.hada.io/topic?id=19152","2025년엔 어떤 리치텍스트 편집기 프레임워크를 선택해야 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2025년엔 어떤 리치텍스트 편집기 프레임워크를 선택해야 할까?

     * 요즘 앱에 필수적인 리치 텍스트 에디터(WYSIWYG)는 Linear, Notion, Google Docs 같은 서비스에서 보편적으로 사용됨
     * Liveblocks가 지난 1년간 다양한 인기 에디터를 분석하고, 각 에디터의 장단점을 파악해 정리함
     * 에디터는 대체로 ‘코어형’과 ‘기능 포함형(Battery-included)’ 두 가지로 나뉨
     * 간단한 에디터 하나만 필요하다면 가벼운 옵션을, 복잡하고 협업 기능이 많은 에디터를 만들려면 확장성이 높은 것을 고려해야 함
     * 전반적으로 가장 무난한 선택은 Tiptap으로, 기능이 풍부하면서도 지나치게 관여적이지 않은 밸런스를 가지고 있다고 평가됨
     * 협업
          + 우리(Liveblocks)는 협업 기능에 집중해왔으며, 대부분의 에디터에서 Yjs라는 CRDT 라이브러리를 통해 실시간 협업을 구현 가능함
          + Yjs를 쓸 때 문서를 저장하고 실시간 연결을 유지해줄 백엔드 서비스가 필요함
          + Liveblocks는 Yjs 를 지원하는 여러 에디터에서 사용 가능한 제네럴 Yjs 백엔드를 제공하며, Tiptap·Lexical용 통합 솔루션도 제공함
          + 일부 에디터는 자체 OT(Operational Transform) 기반 솔루션이나 클로즈드 소스 클라우드 서비스를 사용하기도 함
     * 시작 전 주의사항
          + Draft.js처럼 유지보수가 종료된 에디터나, 작은 커뮤니티만 있는 에디터, 또는 프라이빗 소스 에디터(Froala 등)는 제외
          + 접근성(a11y)은 대부분 에디터에서 어느 정도 작업이 필요하며, 각 에디터 문서를 참고해야 함

Tiptap

     * ProseMirror 위에서 동작하는 에디터로, ProseMirror의 복잡함을 추상화해 개발 경험을 높임
     * 대부분 MIT 라이선스로 제공되며, Tiptap Cloud나 Liveblocks 등에서 실시간 협업 기능을 바로 이용 가능함
     * 기능이 많지만 트리 셰이킹 가능한 구조로 만들어져 있어, 코어 번들 크기는 Quill·Slate·Lexical보다 작게 유지 가능함
     * 확장
          + Tiptap은 간단한 노드, 마크, 커맨드, 확장 기능을 추가하기 쉽게 설계됨
          + 필요한 경우 기존 확장의 동작을 오버라이드해 원하는 대로 커스터마이징 가능함
          + 일부 “프로” 확장 기능은 유료 형태로 제공됨
     * 고급 사용자 정의
          + ProseMirror의 구조를 직접 다룰 필요가 생길 수 있음
          + 명령 체인(command chain) 등 Tiptap 고유의 추상화에 익숙해지는 데 시간이 조금 걸림
          + 데이터 모델은 스키마(schema) 기반이며, 대부분 자동 생성되지만 고급 기능 시 스키마를 직접 다룰 수도 있음
     * 한계(Drawbacks)
          + ProseMirror 문서와 Tiptap 문서를 번갈아 참조해야 해 가이드라인이 혼동될 수 있음
          + 접근성(a11y) 관련 내용이 구현자에게 많이 의존됨
          + 트랜잭션 시 문서 상태를 불필요하게 순회하면 성능 저하가 발생할 수 있음
     * 서버 사이드 변경
          + Tiptap 자체로 서버 측에서 문서 조작하는 것은 쉽지 않음
          + ProseMirror를 직접 활용해 처리하거나 JSON 문서를 직접 수정하는 방식을 고려해야 함
          + Liveblocks는 ProseMirror 문서 수정을 좀 더 쉽게 하는 라이브러리를 제공함
     * 실시간 협업
          + Tiptap은 Yjs로 실시간 협업 기능을 제공하는 확장을 갖춤
          + Tiptap Cloud, Liveblocks 등 여러 클라우드 솔루션과 연동 가능함
          + Liveblocks Text Editor는 실시간 협업 외에도 커서 표시, 코멘트, 멘션, 버전 이력 등 다양한 기능을 추가 제공함
     * 장점(Pros)
          + 우수한 문서화 지원
          + 뛰어난 실시간 협업 기능 제공
          + 프레임워크에 독립적이며 React 전용 패키지 제공
          + 높은 확장성
          + Liveblocks 또는 Tiptap Cloud와의 통합 가능
     * 단점(Cons)
          + 최적의 사용 방식을 따르지 않으면 성능이 저하될 가능성
          + 고급 기능 개발을 위해 ProseMirror 내부 구조 학습 필요
          + 기본적으로 서버 측 헤드리스 편집 기능이 부족

BlockNote

     * BlockNote는 Tiptap·ProseMirror를 확장한 블록 기반 에디터로, Notion 스타일 기능을 제공함
     * 대부분 React 위주로 개발되어 있어, 다른 프레임워크에서 UI 컴포넌트를 활용하기 어렵다는 특징이 있음
     * Slash 메뉴, 플로팅 툴바 등 필요한 기능이 이미 포함된 상태로 간편하게 사용 가능함
     * 한계
          + BlockNote 자체는 오픈소스이지만 docx·PDF 익스포터 등 일부 기능은 유료 구독이 필요함
     * 실시간 협업
          + Yjs·Liveblocks 기반의 협업 기능을 지원함
          + 곧 정식으로 Liveblocks 연동을 제공할 예정임
     * 장점
          + 안정성이 검증된 Tiptap과 ProseMirror 기반
          + Yjs와 Liveblocks를 활용한 실시간 협업 기능 제공
          + 블록 기반 편집 API 및 UI 컴포넌트 기본 제공
     * 단점
          + 주로 React 전용으로 설계됨
          + 기본적인 에디터들에 비해 번들 크기가 더 큼

Lexical

     * Facebook(Meta)에서 지원하는 에디터로 큰 관심을 받고 있음
     * Liveblocks에서 수개월 동안 코멘트·멘션·버전 이력·실시간 협업 등 확장을 개발한 결과, 아직 초기 단계라는 인상을 받음
     * 현재 1.0 미만 버전으로, 계속 빠르게 업데이트되고 있음
     * 한계
          + “순수 데코레이션(pure decorations)” 기능이 없어 커서 표시 같은 기능을 구현하기 위해 DOM 요소를 에디터 위에 별도로 올려야 함
          + 기본적인 Yjs 협업 지원이 아직은 엣지 케이스 처리에 취약함
          + 루트 노드 이름을 하드코딩해 문서 내 여러 에디터를 동시에 사용하기 어렵다는 이슈가 존재함
     * 실시간 협업
          + Liveblocks 패키지를 사용하지 않는 한, Lexical 협업 구현은 난이도가 높음
          + StickyNotes 예시 등에서 루트 노드를 여러 개 만들 때 각각 별도 문서·소켓 연결을 사용하는 방식으로 우회함
          + 빠른 개발 속도로 이슈가 꾸준히 해결되고 있음
     * Lexical 확장
          + Lexical은 노드 계층 구조를 통해 데이터를 관리함
          + 4가지 코어 노드 타입을 상속해 자체 노드를 만들 수 있음
          + React 전용 LexicalComposer와 @lexical/react 패키지를 통해 스피드를 높일 수 있음
          + 백엔드에서 DOM 없이 Lexical을 동작시키기 위해 @lexical/headless 패키지를 사용할 수 있음
     * 서버 사이드 변경
          + Lexical 문서를 서버에서 수정하는 것이 가능하며, Liveblocks는 이를 단순화하는 라이브러리를 제공함
     * 장점
          + Yjs를 활용한 실시간 협업 기능 지원
          + 프레임워크에 독립적이며 React 전용 패키지 제공
          + 댓글, 멘션, 버전 히스토리와 통합된 Liveblocks 지원
          + Meta의 지원을 받는 매우 활발한 개발 및 대규모 커뮤니티
     * 단점
          + Yjs 실시간 협업 기능은 엣지 케이스를 직접 처리하지 않으면 약간의 버그 발생 가능성
          + 순수 데코레이션 기능이 부족하며 고급 기능을 위해 DOM 우회 처리가 필요
          + Tiptap 및 Slate에 비해 코어 패키지의 크기가 더 큼

Slate

     * Discord, Grafana, Sanity.io, Slite 등에서 사용 중인 커스터마이징 가능한 에디터 프레임워크
     * Liveblocks는 자체 코멘트 컴포저에 기본값으로 Slate를 채택함
     * 데이터 구조가 단순하고, 전면 통제가 가능하며, React 외에도 범용적으로 활용 가능함
     * Slate 확장
          + 여러 가지 예시와 문서를 통해 Slate를 확장 가능함
          + 플러그인 에코시스템은 제한적이지만 직접 구현이 어려운 편은 아님
          + 보다 확장된 형태로 Plate라는 프로젝트가 존재함
     * 한계
          + Tiptap보다 조금 더 무거운 번들 크기를 가짐
          + 기본 내장 기능이 적어 직접 구현해야 할 부분이 생김
     * 실시간 협업
          + slate-yjs, @liveblocks/yjs 등을 이용해 Slate 문서의 실시간 협업 구현 가능함
     * 장점
          + 우수한 문서화 지원
          + Yjs를 활용한 실시간 협업 기능 지원
          + 프레임워크에 독립적이며 React 전용 패키지 제공
          + 높은 확장성
     * 단점
          + Tiptap에 비해 약간 더 큰 번들 크기
          + 기본 제공 기능 부족

Quill

     * Slack, LinkedIn, Figma, Zoom, Miro, Airtable 등에서 사용된 역사가 있는 에디터
     * 한동안 개발이 주춤했으나 2024년 4월 버전 2를 릴리스하며 TypeScript 재작성 등으로 다시 활발해진 상태임
     * Parchment라는 고유 문서 모델을 사용하며, 이는 ProseMirror 스키마와 유사한 개념임
     * 한계
          + Lexical처럼 순수 데코레이션 기능이 없어, 컬러 하이라이트나 협업 커서 같은 기능을 위해 별도 DOM 요소를 오버레이해야 함
          + Quill 2용 플러그인들이 아직 업데이트되지 않은 경우가 많음
          + 커뮤니티 활동이 다른 에디터에 비해 다소 적을 수 있음
     * 실시간 협업
          + Yjs와 y-quill을 결합해 실시간 협업 구현 가능함
          + 별도 백엔드는 Liveblocks 등 다양한 방식을 사용 가능함
     * 장점
          + 우수한 문서화 지원
          + 프레임워크에 독립적이며 React 전용 패키지 제공
          + Yjs를 활용한 실시간 협업 기능 지원
          + 간단한 델타 포맷 사용
     * 단점
          + 기본 제공 기능 부족 및 플러그인이 아직 Quill 2에 맞춰 업데이트되지 않음
          + 순수 데코레이션 기능 부족
          + 비교적 덜 활발한 개발 및 작은 커뮤니티
          + Tiptap 또는 Slate에 비해 두 배 큰 번들 크기

ProseMirror

     * Tiptap·Remirror·BlockNote 등 여러 에디터의 기반이 되는 핵심 프레임워크
     * 스키마, 상태(state), 뷰(view), 트랜스폼(transform) 등 명확한 구조로 안정적인 동작을 보장함
     * 아예 처음부터 직접 코어 라이브러리만으로 에디터를 구성하려면 코드량이 많아지는 편임
     * 한계
          + 간단한 에디터를 만드는 데도 코드가 상당히 필요하다는 점이 문서에 명시되어 있음
          + Tiptap, Remirror, BlockNote 같은 상위 레벨 래퍼를 활용하는 것을 권장함
          + 러닝 커브가 다소 높지만 문서와 커뮤니티가 잘 정비되어 있음
     * 장점
          + 활발한 커뮤니티와 함께 우수한 문서화 제공
          + Yjs를 활용한 실시간 협업 기능 지원
     * 단점
          + 기본 예제를 구현하기 위해 많은 코드가 필요
          + 기본 제공 기능 부족
          + 비교적 가파른 학습 곡선

Plate

     * Slate 기반으로, AI 기능이나 멘션, 코멘트 등 풍부한 플러그인을 제공하는 “배터리 포함형” 프로젝트
     * 필요한 기능만 골라서 사용할 수 있어 유연함
     * 유료 템플릿도 제공하며, React 전용으로 설계됨
     * 한계
          + 협업은 현재 Hocuspocus만 공식 지원하며, 다른 Yjs 백엔드(예: Liveblocks)와 연결하기 위한 구현이 필요함
          + React 전용이어서 다른 프레임워크와는 호환이 제한적일 수 있음
          + 기능이 많아 번들 크기가 커지는 경향이 있음
     * 장점
          + 다양한 플러그인 라이브러리 제공
          + 서버 측 편집 기능 지원
          + 빠른 시작을 돕는 템플릿 제공
     * 단점
          + React 전용으로 설계
          + 협업 기능이 Hocuspocus를 통해서만 사용 가능
          + 기본적인 에디터들에 비해 번들 크기가 더 큼

Remirror

     * ProseMirror 기반의 에디터로, Tiptap과 유사하지만 더 배터리가 포함된 접근을 지향함
     * 30개 이상의 플러그인, React 훅, 국제화(i18n), 접근성(a11y) 기능 등을 지원함
     * MIT 라이선스로 오픈소스이며, 협업 기능도 제공함
     * 한계
          + Tiptap보다 커뮤니티 규모가 작고 업데이트가 느릴 수 있음
          + React 전용 기능이 많아 다른 환경에서는 제약이 있을 수 있음
          + 번들 크기가 다소 큰 편임
     * 실시간 협업
          + Remirror는 YjsExtension을 통해 Yjs와 Liveblocks 협업을 지원함
     * 장점
          + 우수한 문서화 지원
          + 다양한 플러그인 라이브러리 제공
          + Yjs와 Liveblocks를 활용한 협업 기능 지원
     * 단점
          + React 전용으로 설계
          + 더 큰 번들 크기
          + 업데이트 빈도가 낮고 작은 커뮤니티

Editor.js

     * 블록 단위 편집을 지원하는 리치 텍스트 에디터로, 다양한 플러그인과 큰 커뮤니티를 보유함
     * 블록, 인라인, 튠(tune)으로 구성된 데이터 구조를 가짐
     * 프레임워크에 구애받지 않으며, 툴팁 등 여러 편의 기능이 내장됨
     * 한계
          + 실시간 협업 지원이 공식적으로 없고, 일부 시도된 PR이 있으나 유지보수 상태가 불확실함
          + 기본 패키지만으로도 용량이 큰 편임
     * 실시간 협업
          + 공식적으로 지원하지 않음
     * 장점
          + 다양한 기능을 가진 풍부한 플러그인 라이브러리 제공
          + 여러 CMS 및 백엔드 프레임워크와의 커뮤니티 기반 통합 지원
     * 단점
          + 더 큰 번들 크기
          + 실시간 협업 기능 부재

CKEditor

     * 20년 이상 역사를 가진 에디터로, 현재 버전(5)은 현대적 구조와 풍부한 기능을 제공함
     * Angular, React, Vue, Next 등 다양한 프레임워크를 지원함
     * GPL-2 라이선스로 배포되어, 특정 상황에서는 오픈소스를 요구하며, 상업적 용도로는 별도 라이선스 구입이 필요함
     * 한계
          + 플러그인 중 상당수가 유료이며, 협업 기능 역시 CKEditor의 클라우드 서비스만 사용 가능함
          + GPL-2 라이선스와 로드 기반 과금 체계가 많은 사용자에게 장애물이 될 수 있음
     * 실시간 협업
          + CKEditor의 독점 클라우드 서비스 외에 다른 협업 솔루션은 제공되지 않음
     * 장점
          + 기본적으로 매우 풍부한 기능 제공
          + 다양한 프레임워크와 호환
     * 단점
          + 협업 기능이 CKEditor의 클라우드 서비스에 종속적
          + GPL-2 라이선스가 일부 사용자에게 제약이 될 수 있음
          + 일부 기능은 사용량 기반 요금제로 제공됨

TinyMCE

     * CKEditor와 마찬가지로 20년 이상 역사를 가진 에디터로, GPL-2 라이선스를 따름
     * Angular, React, Vue 등 다양한 환경에서 사용 가능함
     * 로드 수 기반의 과금 방식을 가진 클라우드 협업 서비스가 존재함
     * 한계
          + 마크다운, 멘션, 코멘트, 고급 타이포그래피 등 주요 기능이 유료 플러그인으로 제공됨
          + 서버 측에서 문서를 조작하는 방법에 대한 문서가 부족함
     * 실시간 협업
          + TinyMCE의 독점 협업 솔루션 외에는 다른 방식이 공개되어 있지 않음
     * 장점
          + 기본적으로 매우 풍부한 기능 제공
          + 다양한 프레임워크와 호환
     * 단점
          + 협업 기능이 Tiny Cloud 서비스에 종속적
          + GPL-2 라이선스가 일부 사용자에게 제약이 될 수 있음
          + 일부 기능은 사용량 기반 요금제로 제공됨

에디터 비교 요약

     * ProseMirror
          + Framework: Vanilla
          + Collaboration: Yjs
          + Comments: 제공하지 않음 (예제 있음)
          + Mentions: Suggestion 플러그인 사용 가능
          + Server-side editing: Prosemirror-state 및 prosemirror-model로 Node.js에서 문서 수정 가능
          + License: MIT
          + GitHub Stars: ⭐ 7.8k
     * Tiptap
          + Framework: Vanilla, React, Vue, Svelte
          + Collaboration: Liveblocks, Tiptap Cloud, Yjs
          + Comments: Liveblocks와의 통합으로 설정 없이 가능, 커스텀 가능
          + Mentions: Liveblocks와의 통합으로 설정 없이 가능, 커스텀 가능
          + Server-side editing: ProseMirror 또는 Liveblocks' Node.js ProseMirror 패키지를 통해 가능
          + License: MIT
          + GitHub Stars: ⭐ 20k
     * Remirror
          + Framework: React
          + Collaboration: Yjs
          + Comments: 가능
          + Mentions: 가능
          + Server-side editing: ProseMirror 또는 Liveblocks' Node.js ProseMirror 패키지를 통해 가능
          + License: MIT
          + GitHub Stars: ⭐ 2.8k
     * BlockNote
          + Framework: React
          + Collaboration: Yjs
          + Comments: Liveblocks 또는 커스텀 예제를 통해 가능
          + Mentions: 가능
          + Server-side editing: ProseMirror 또는 Liveblocks' Node.js ProseMirror 패키지를 통해 가능
          + License: MPL 2
          + GitHub Stars: ⭐ 7.1k
     * Lexical
          + Framework: Vanilla, React, iOS, 기타
          + Collaboration: Liveblocks, Yjs
          + Comments: Liveblocks와 통합하여 설정 없이 가능, 커스텀 가능
          + Mentions: Liveblocks와 통합하여 설정 없이 가능, 커스텀 가능
          + Server-side editing: Lexical 또는 Liveblocks' Node.js Lexical 패키지를 통해 가능
          + License: MIT
          + GitHub Stars: ⭐ 20k
     * Slate
          + Framework: Vanilla, React
          + Collaboration: Yjs
          + Comments: 제공하지 않음 (예제 있음)
          + Mentions: 예제 있음
          + Server-side editing: 제공하지 않음
          + License: MIT
          + GitHub Stars: ⭐ 30k
     * Plate
          + Framework: React 전용
          + Collaboration: Hocuspocus (Yjs)
          + Comments: 가능
          + Mentions: 가능
          + Server-side editing: 가능
          + License: MIT
          + GitHub Stars: ⭐ 13k
     * Quill
          + Framework: Vanilla
          + Collaboration: Yjs
          + Comments: 제공하지 않음 (예제 있음)
          + Mentions: 서드파티 라이브러리 사용 가능
          + Server-side editing: 제공하지 않음
          + License: BSD-3
          + GitHub Stars: ⭐ 45k
     * Editor.js
          + Framework: Vanilla
          + Collaboration: 지원하지 않음 (서드파티 예제 있음)
          + Comments: 제공하지 않음 (서드파티 라이브러리 있음)
          + Mentions: 제공하지 않음 (예제 있음)
          + Server-side editing: 제공하지 않음
          + License: Apache 2
          + GitHub Stars: ⭐ 28k
     * CKEditor
          + Framework: Vanilla, React, Vue, Angular
          + Collaboration: CKEditor Cloud와 통합
          + Comments: 가능
          + Mentions: 가능
          + Server-side editing: 가능
          + License: GPL-2+
          + GitHub Stars: ⭐ 8.8k
     * TinyMCE
          + Framework: Vanilla, React, Vue, Angular, 기타
          + Collaboration: Tiny Cloud와 통합
          + Comments: Tiny Cloud와 통합
          + Mentions: 가능
          + Server-side editing: 제공하지 않음
          + License: GPL-2+
          + GitHub Stars: ⭐ 15k

   SvelteKit 프로젝트에 QuillJS 적용하는 건 꽤나 불편했습니다. 리액트는 라이브러리가 있어 그나마 편했고요.

   react custom component 개발이 편한 tiptap 이 가장 낫더군요.

   여기엔 없지만, 워드프레스 구텐베르크가 독립된 라이브러리로 나왔으면 하는 바람이 있습니다.

   https://github.com/Automattic/isolated-block-editor
   나와있긴하지만 본문에 소개된 것들에 비하면 활용 사례가 현저히 떨어지긴합니다

   오! Automattic 사에서 다른 이름으로 보관하고 있었군요. 회사에서 워드프레스를 쓸 당시 가장 좋아했던 기능입니다.

   링크는 liveblocks.io 블로그인데 preview url은 (github.com/US-Artificial-Intelligence)라고 뜨네요?

   제가 글 등록하면서 이전글 주소를 그대로 쓰고 수정하면서 문제가 있었습니다. 수정했습니다.

   저도 최근 찾아봤었는데 잘정리해주셔서 감사합니다.

   우리 한글의 경우 특정에디터들은 모바일에서 입력 잔버그가 있습니다.
   <동해물과> 입력시 <ㄷㅗㅇㅎㅐㅁㅜㄹㄱㅗㅏ> 로 입력되거나
   <동해물과> 입력시 <동동해해물물과과> 로 입력됩니다.
   (참고 : https://github.com/ckeditor/ckeditor5/issues/13693)

   저는 react, vue 등 framework 를 쓰지 않고 있고 에디터 라이센스 구매가 꺼려지다보니 선택의 여지가 매우 좁았습니다.

   이에 본문 외 아래 4가지를 더 살펴보았어요.
    1.

   https://trix-editor.org/
   루비온레일즈의 DHH 가 이끄는 37시그널에서 만든 에디터에요. 순수 자바스크립트 (리액트 등을 쓰지 않았다는 의미)로 만들어져있고 커스텀하기도 어렵진 않았어요. (유튜브링크 붙여넣을시에 유튜브임베드로 자동전환 등)
    2.

   https://ui.toast.com/tui-editor
   nhncloud에서 만든 툴이에요.
    3.

   https://naver.github.io/smarteditor2/demo/
   네이버스마트에디터2이에요. 클래식하지만 한국인대상서비스에서는 사랑받는 익숙함이될것같았어요.
    4.

   https://summernote.org/
   한국인이 개발하고 계시는 서머노트입니다. 저는 이걸 선택했습니다. 테마적용하면 세련되어지구요. 한국인이 생각하는 기능들이 빌트인이라 편합니다. (위 유튜브링크 임베드전환 등) 다만 tailwind prose 로 꾸미려는데 자체 typography 스타일이 있어서 손을 좀 썼어야해요.

   2번 도구는 정정해드리고 싶은게 있는데, tui editor 는 토스가 아닌 nhncloud 에서 오픈소스로 개발하고 있는 프로젝트입니다.

   그렇네요 정정합니다 (수정이 어딨는지모르겠네요..)

   원래 이 사이트에 수정은 없습니다. 관리자가 수정하는 수밖에 없어요.

   nhncloud 로 수정했습니다.

   저는 tiptap을 처음 프로젝트에 적용해서 써봤는데, 다른 전통적인 에디터들 대비 문서화도 기능도 구현도 모두 좋았어서 만족하면서 사용하고 있습니다. 필요한 것만 딱딱 가져와서 제 입맛대로 UI를 구현해서 쓰는 맛이 좋았는데, 한가지 좀 벅찬 부분은 그 입맛대로 구현하는 작업량이 보통이 아니었습니다 ㅎㄷㄷ...!
"
"https://news.hada.io/topic?id=19098","내가 LLM을 스태프 엔지니어처럼 쓰는 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 LLM을 스태프 엔지니어처럼 쓰는 방법

     * LLM에 대해 소프트웨어 엔지니어들은 크게 두 입장으로 나뉨
          + 일각에서는 산업을 뒤흔드는 혁신적인 기술이라고 믿음
          + 다른 한편에서는 그저 과장된 신기루에 불과하다는 시각을 갖고 있음
     * 글 작성자는 개인적으로 LLM을 유용하게 사용하고 있다고 느끼며, 이를 효과적으로 활용하는 방식을 소개하고 있음

프로덕션 코드 작성

     * Copilot 자동완성 기능을 코드 작성 시 항상 활용함
          + 대부분의 자동완성 제안은 함수 인자나 타입 입력 등 반복적 보일러플레이트에 해당함
          + 주 업무 영역(예: Ruby on Rails)에서는 자신이 직접 작성하는 코드가 더 우수하다고 판단함
     * 업무 전문성이 낮은 영역에서는 Copilot이 제안하는 로직을 좀 더 많이 수용함
          + 예: Golang이나 C 같은 언어에서 작은 전술적 변경을 해야 할 때
          + 덜 익숙한 언어의 문법이나 관용적인 코드 스타일을 Copilot 도움으로 빠르게 파악함
          + 전문 지식이 부족하므로, 반드시 해당 분야 전문가의 리뷰를 받는 편임
          + 이렇게 하면 “똑똑한 인턴” 수준으로 어느 정도 작업 가능하지만, 검증 과정을 거치는 것이 필수적임

일회성 코드 작성

     * 프로덕션에 배포하지 않을 일회성 코드를 작성할 때 LLM을 훨씬 적극적으로 활용함
          + 연구 용도로 한 번만 실행하고 버릴 코드의 경우, 유지보수 필요성이 적음
          + 예: API에서 공개 데이터를 가져와 분류하고, 정규식을 적용해 간단히 검증해 보는 작업
     * 이 경우 LLM을 통해 2~4배는 더 빠르게 진행할 수 있었다고 함
     * 한 번 쓰고 버릴 코드 작성에는 LLM이 매우 효율적임

새로운 영역 학습

     * 가장 효용이 높은 활용 사례로, LLM을 온디맨드 과외 교사처럼 쓰는 방식을 꼽음
          + 예: Unity를 처음 배울 때, ChatGPT-4o와 같은 모델에 질문을 계속 던짐
          + “X가 어떻게 동작하나요?”뿐 아니라, “X는 Y와 어떤 관련이 있나요?” 같은 후속 질문을 할 수 있음
          + “내가 이해한 내용이 맞나요?”처럼 이해한 내용을 점검받는 용도로도 활용함
     * 학습 과정에서 작성한 노트를 그대로 복사-붙여넣기 해 검토받는 식으로 사용함
     * **환각(hallucination)**에 대한 우려
          + GPT-3.5 이후 대체로 환각이 크게 두드러지지 않았다고 느낌
          + 일상적으로 배우려는 영역 대부분이 이미 잘 정립된 분야이므로 오답 위험이 낮았음
          + 지금까지 LLM을 통해 잘못된 정보를 학습한 적은 없었음

최후의 버그 수정

     * 아주 막혔을 때 Copilot이나 Claude 등으로 전체 파일과 에러 메시지를 보여주고 도움을 청함
          + 대부분의 경우 LLM이 혼동해 제대로 해결책을 제시하지 못함
          + 그래도 간혹 미처 놓친 부분을 LLM이 지적해 시간을 절약한 사례가 몇 번 있었음
     * 성능이 기대만큼 뛰어나지 않으므로, 여러 번 시도하지는 않고 한 번 정도만 물어봄

오탈자와 논리 실수 교정

     * 글(ADRs, 기술 요약, 내부 문서 등)을 LLM에게 전적으로 대필시키지는 않음
          + 스스로가 더 명확하게 작성할 수 있다고 판단하며, LLM 특유의 문체를 선호하지 않음
     * 문법 검토나 오탈자 교정을 위해 초안을 LLM에 입력하고 피드백을 받는 경우가 있음
          + LLM이 맞춤법 오류를 잘 잡아주고, 가끔 흥미로운 관점을 제안하기도 함
     * 반복으로 수정 제안을 받기보다는, 한 번 정도만 “큰 틀”에서의 피드백을 확인함

요약

     * LLM 활용 범위
          + Copilot을 이용한 “스마트 자동완성”
          + 잘 모르는 영역에서의 짧은 전술적 변경(전문가 리뷰 필수)
          + 한 번 쓰고 버릴 연구용 코드 작성
          + 새로운 기술이나 도메인을 배울 때 끊임없이 질문하기
          + 막힐 때 최후의 수단으로 버그 해결 시도
          + 영어 문서 초안의 전체적인 맞춤법/오탈자와 논리 오류 교정
     * LLM을 아직 사용하지 않는 부분
          + 자신이 잘 아는 영역에서 전체 Pull Request 작성을 대행하는 일
          + ADR과 같은 기술 문서 통째로 작성
          + 대규모 코드베이스 내부에서의 복잡한 아키텍처 파악

        Hacker News 의견

     * ""staff engineer""로서 LLMs는 관용적인 코드를 작성하거나 가르치는 데 매우 부족하며, 오히려 코드 검토에 더 많은 시간을 소모하게 함. LLMs를 사용하여 코드를 작성하는 것은 나쁜 관행을 배우고 코드의 양과 보일러플레이트, 불확정적인 결과에 의존하게 되는 위험이 있음. LLMs는 아이디어 생성이나 신뢰할 수 없는 정보 탐색에는 유용할 수 있지만, 코드 생성에 의존하는 것은 미친 짓임.
     * 버그 수정 시 Copilot을 사용하여 파일 전체를 첨부하고 오류 메시지를 붙여넣어 도움을 요청하는 방법이 있음. ""reasoning"" 모델은 이보다 훨씬 나은 결과를 제공하며, 코드베이스 전체를 붙여넣고 오류 메시지를 설명하면 종종 문제의 근원을 찾아냄.
     * LLMs는 보일러플레이트 코드나 자동 완성에는 유용하지만, 복잡한 작업에서는 한계가 있음. 비즈니스 로직을 이해하지 못하기 때문임. 그러나 기업 문서를 빠르게 작성하는 데는 매우 유용함.
     * GitHub에서 일하며 Copilot에 직접 참여한 경험이 있음.
     * 정적 타입 언어와 좋은 IDE를 사용하는 경우, ""smart auto complete"" 기능이 덜 유용할 수 있음. Intellij의 자동 완성 기능이 대부분의 경우 마음을 읽는 것처럼 느껴짐.
     * 소프트웨어 엔지니어들이 LLMs에 대해 부정적인 감정을 가지는 이유에 대한 반성. 많은 사람들이 절대적인 기준으로 판단하는 경향이 있으며, 이는 도구를 효과적으로 활용하는 능력을 제한함.
     * Python 프로젝트 유지보수에 AI를 사용하는 방법. 다른 언어에서의 방법을 Python으로 변환하는 데 도움을 줌.
     * ChatGPT를 사용하여 유틸리티 코드를 작성하는 경험이 좋았음. 코드 리뷰에서는 종종 사소한 문제를 지적하지만, 개선점을 찾는 경우 여전히 가치가 있음.
     * VSCode에서 Cursor로 전환한 후, Sonnet과의 에이전트 모드가 인상적임. 경험 많은 개발자가 이를 안내하면 생산성 향상에 크게 기여할 수 있음.
     * LLMs를 사용하여 문서의 오타와 논리적 실수를 교정하는 데 도움을 받음. Graphite Reviewer를 사용하여 실제 버그와 실수에 집중하도록 조정함. AI는 완벽하지 않지만, 코드 교정 도구로서 유용함.

   이게.. 스태프 엔지니어..?

   github 스태프 엔지이어 맞네요

   저도 이게 스태프 엔지니어격으로 보이진 않네요... 그냥 어시스턴트 레벨이 맞지않나싶습니다.

   제목에 오역이 있네요, ""staff engineer처럼""이 아니라 ""staff engineer로서"" 입니다

   👍!!
"
"https://news.hada.io/topic?id=19107","이제 Ubuntu는 그만","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             이제 Ubuntu는 그만

     * Ubuntu를 오랜 기간 동안 합리적인 선택지로 선호해 왔음
     * Unity 데스크톱 환경이 사라진 후 기본 GNOME 환경이 되었을 때도 만족스러운 사용 경험을 했음
     * 에스토니아 ID 카드 소프트웨어도 Ubuntu에서 공식 지원되어 가족용 PC로도 적절했음
     * 하지만 어느 시점 이후로 사용자 경험이 크게 달라졌음

업데이트 문제

     * 장기 지원(LTS) 버전을 사용하며 2년에 한 번씩 업그레이드했지만, 매번 사소하거나 큰 문제가 발생했음
          + 예: 엄마의 노트북을 20.04에서 22.04로 업데이트하는 중에 시스템이 멈춰서 결국 Windows로 교체하는 상황이 발생함
     * 다른 가족도 Lubuntu에서 업그레이드를 시도했으나 파이어폭스 관련 오류, 상태 표시줄 이상, 로그인 후 무작위 에러 등이 발생함
     * 결국 ID 카드 소프트웨어가 잘 작동하는 Fedora 40을 대신 설치했음

Snap 문제

     * Canonical의 스냅 패키지 방침이 강제 적용되며, 기존 Debian 패키지 대비 호환성이나 안정성이 떨어진다는 지적이 있음
     * 스냅은 자동 업데이트로 보안상 이점이 있으나, 사용자가 개인 PC를 직접 제어하기 어렵게 만든다는 문제점이 있음
     * Ubuntu 업그레이드 후 브라우저가 스냅 패키지로 바뀌면서, ID 카드 인증이 불가능해지는 등의 상황이 보고됨
     * GNOME 전체가 스냅으로 묶이면서 데스크톱 환경이 멈추거나 깜빡이는 문제가 있었고, 롤백과 업데이트를 반복해도 해결이 불안정했음

Flatpak

     * Flatpak은 스냅과 유사하지만 사용자가 직접 업데이트 시점과 설치 여부를 결정할 수 있는 선택적 패키징 방식임
     * Steam Deck에서 주요 앱 설치 방법으로 쓰이고 있으며, 스냅처럼 갑작스럽게 전환되지 않음
     * 다만 모든 앱이 Flatpak으로 제공되는 것은 아니므로 사용자가 찾는 특정 앱이 없을 수도 있음

Fedora 고려

     * Fedora는 완벽하지는 않지만 Ubuntu 대신 안정적으로 작업을 수행하기에 적합한 배포판임
     * IBM의 Red Hat 정책 변화가 없으면, 앞으로도 Fedora는 큰 문제 없이 사용할 수 있을 것으로 예상됨
     * Canonical이 기존 접근 방식을 재고하지 않는 한, 사용자 입장에서는 다른 대안을 찾게 될 가능성이 큼

   Pop OS 사용했었는데 사용감이 아주 좋았어서 실리콘 맥에 설치할 수만 있다면 설치하고 싶었었죠

   그냥 Firefox 우분투 정책이 문제라고 말하면 될 것 같습니다.

   우분투 업그레이드 과정에서 문제 발생하는데 해결법이 없어 이것 저것 하다보면 데이터를 날리는 방향으로 문제를 해결하게 됩니다.
   크롬이 가진 문제는 있다만 한글입력기를 바꾸는 과정 정도면 충분해서 그냥 계속 크롬에 눌러 앉고 있습니다.
   Kubuntu 쓰지만 파이어폭스만 안 쓰면 문제 없습니다.

     GNOME 전체가 스냅으로 묶이면서 데스크톱 환경이 멈추거나 깜빡이는 문제가 있었고, 롤백과 업데이트를 반복해도 해결이 불안정했음

   이 부분은 Firefox와 관련없는 것으로 이해하는데 보충설명 해 주시면 감사하겠습니다

   Fedora 를 몇년째 사용중인데 아주 만족합니다. 가끔 업데이트가 버그를 만들긴 하는데, 워낙 주기가 빨라서 꽤나 금방 수정되더라구요.

   저도 사용해봤는데 업데이트 주기가 좀 잦더라고요. 귀찮지는 않으셨나요?

   조금 잦긴 한데, 저는 오히려 최신 업데이트를 빨리 내보내 주니까 반가운 마음으로 적용하는 편이에요~
   빨리 업데이트해서 사용해보는 것으로 리눅스 생태계에 기여한다는 마음도 들구요.

   Manjaro(Arch) 좋습니다.

   Arch linux is the best 👌

   Arch linux is the best 👍

   페도라 아토믹 데스크탑을 사용하는 바자이트OS를 사용 중인데... 블루투스 장치 관리가 제대로 동작하지 않는 문제가 있더라구요. 패어링 된 키/마 들이 리붓 후 바로 붙지 않는 등....

     엄마의 노트북을 20.04에서 22.04로 업데이트하는 중

   광기가 느껴지내요 ㄷ

        Hacker News 의견

     * Ubuntu의 불안정성, Snaps, 오래된 커널, 과도한 마케팅 때문에 Debian으로 전환함. Debian은 apt-get을 사용하고 큰 저장소를 제공하여 만족스러움. Fedora의 작은 저장소는 선호하지 않음
     * Snaps의 실패 모드로 인해 불편함을 겪음. IntelliJ IDEA의 경고와 Docker의 느린 종료 문제로 Jetbrains Toolbox와 다른 도구로 전환함
     * Ubuntu는 한때 Fedora처럼 일반 사용자를 위한 상식적인 데스크톱 배포판이었으나, 이제는 불필요한 기능을 추가함
     * Ubuntu의 Firefox Snap이 느려서 실망스러움. Flatpaks와 Docker가 대세가 되어 배포판의 중요성이 줄어들고 있음
     * Ubuntu가 ""인간을 위한 리눅스""라는 모토를 버렸다고 생각함. 하지만 많은 사람들에게 리눅스로의 관문 역할을 했음
     * Ubuntu의 엔지니어링이 부족하다고 느끼며, Fedora는 업데이트가 매끄럽게 진행됨. 하지만 LTS가 없고 일상 사용을 위한 롤링 릴리스가 없다는 점이 아쉬움
     * Redhat 7.2를 처음 사용했을 때 좋아했지만, Ubuntu는 너무 무겁다고 느낌. Linux Mint를 추천함
     * Ubuntu의 미학과 UX가 마음에 들지 않아 Fedora와 GNOME을 사용함. Snaps가 싫어서 Fedora Bluefin/Bazzite 경험이 더 좋음
     * Fedora 사용에 만족하지만, IBM의 영향력이 걱정됨. 6개월 릴리스 주기가 부담스러움
     * Ubuntu 업데이트와 Snap이 불만족스러움. Fedora는 불안정한 배포판이라고 생각함. Debian 기반의 Ubuntu를 선호하며, 최신 안정 도구를 제공함

   번역한 댓글이고 본문인 것 같은데 항상 느끼는거지만 한국인으로서 더 읽기가 불편하네요. 좀 개선됐으면 좋겠습니다.

   간결해서 좋은데요? 바꾸지 말아주세요

   개선 예시하나만 알려주시면 더 도움이 될 것 같습니다!

   저는 개인적으로 이런 요약체가 더 마음에 들더라구요 간결하고 읽기 편한..

   어떤 부분이 불편한지 자세히 알 수 있을까요?
"
"https://news.hada.io/topic?id=19083","S1 : $6 짜리 R1 경쟁자짜리 R1 경쟁자?

     * 2월 3일에 공개된 새 논문 ""s1: Simple test-time scaling"" 이 AI 분야에서 화제가 되고 있음
     * 모델 자체보다는 AI 분야에서 큰 진전이 일어날 수 있음을 시사한다는 점이 중요한 포인트
     * 이 모델은 최신 기술 수준(SOTA)엔 미치지 못하지만, 노트북에서도 구동 가능한 소형 모델임
     * 중요한 점은 복잡한 내용 없이 이 기술이 어떻게 작동하는지를 이해하는 데 도움을 준다는 것

추론 확장: ""기다려"" 나를 위해!

     * OpenAI는 “추론 시간이 길어질수록 LLM 성능이 좋아진다”를 주장하며 그래프를 제시
     * 기본적으로, LLM은 더 오래 ""생각""할 수 있다면 더 높은 성능을 발휘할 수 있음
     * 문제는 모델이 응답 전 ‘생각’을 길게 할 수 있도록 어떻게 제어하느냐이고, 어떻게 그렇게 할 수 있는지에 대한 설명은 부족했음
     * s1 논문은 이 부분을 자세히 설명하고 있고, 재미있음

     LLM이 추론 시에 ""생각""할 때, <think>와 </think> 태그 안에 모델의 내부 사고 과정을 담아두고, </think>가 나타나면 최종 답변을 위해 자신감 있고 권위 있는 어조로 음성을 변경하도록 학습

     * s1 논문에서는 ""</think>""를 ""Wait""로 강제로 치환하여 모델이 더 길게 ‘고민’하도록 하는 단순한 기법을 설명함
          + ""</think>""를 없애거나 대체함으로써 모델이 계속 생각을 이어가도록 유도함
          + 갑자기 ""</think>""를 삽입하는 식으로 추론을 짧게 끊는 것도 가능함
     * 이런 방식을 통해 o3-mini-low와 o3-mini-high 같은 모델들은 서로 다른 평균 추론 시간을 적용받도록 훈련되었을 것으로 추정됨
          + 그들은 아마도 3개의 모델을 훈련시켰고, 각각 다른 평균 사고 시간(훈련 중에 측정)을 가졌을 것
          + 결국 훈련 과정은 그 행동을 모델 가중치로 인코딩하기 시작

엔트로픽스(Entropix)와의 연관성

     * s1 논문에서 제시된 ""Wait"" 기법은 엔트로픽스(Entropix)가 추구했던 방식과 크게 다르지 않음
     * Entropix는 로짓과 어텐션의 엔트로피, 분산 엔트로피(varentropy)를 살펴보면서 토큰 선택 방식을 바꾸는 기술임
          + ""Wait"" 같은 토큰을 통해 모델이 자신의 답변을 재고하게 만드는 시도를 한 것으로 보임
     * 이 같은 방식은 추론 시점(inference time) 혹은 훈련 시점 모두에서 적용 가능할 것으로 예상됨

극단적인 데이터 절약(Extreme Data Frugality)

     * s1 모델이 단 6달러로 개발되었다고 주장하는 이유는, 소형 모델과 적은 양의 데이터로 훈련했기 때문임
     * 56K 예시 데이터 중에서 가장 가치 있는 1K만 추려 쓰는 식으로 진행함
          + 추가 데이터가 모델 성능을 전혀 향상시키지 않았다는 결론임
     * 32B 규모의 모델이므로 노트북에서도 구동이 가능함
     * 16개의 NVIDIA H100을 26분가량 사용했는데, 그 비용이 약 6달러로 추정됨
     * 비용이 낮으니 많은 실험(ablations)을 시도할 수 있었고, 실제로 다양한 변수를 조금씩 바꿔가며 전수 재훈련을 반복함
          + 예: ""Wait""와 ""Hmm"" 중 어느 토큰이 더 효과적인지 직접 측정
          + 핵심 예시 데이터 중 어떤 부분이 가장 유의미한 신호를 제공하는지도 실험

지정학적 함의(Geopolitics)

     * AI가 국가 안보와 긴밀히 맞물려 있다는 시각이 있음
     * OpenAI나 Anthropic 같은 업체들이 막대한 예산을 투입하는 이유가 여기에서 비롯됨
     * s1처럼 비용을 줄이는 혁신이 나왔지만, 거대 자본을 활용하면 그만큼 훨씬 많은 시도를 동시에 진행할 수 있다는 점도 중요함
     * AI 발전 속도를 더욱 높이기 위해 더 큰 투자가 필요하다는 주장도 나오고 있음

Distealing (모델 무단 증류)

     * s1 데이터셋은 기본적으로 다른 모델(Qwen2.5)의 thought trace를 이용한 증류(distillation) 결과물임
     * OpenAI는 DeepSeek이 자사 모델 o1을 무단 증류하여 V3 모델을 만들었다고 의심 중임
     * 그러나 실제로 증류 행위를 막기가 점점 어려워지고 있음
          + 1,000개 정도의 예시는 개인이 충분히 수집 가능한 수준임
     * OpenAI가 최근 o3 모델을 직접 배포하기보다 에이전트 형태로 공개한 이유도 이런 무단 증류를 막기 위한 시도로 보임

결론

     * s1의 등장은 공개된 영역에서 AI가 얼마나 빠르게 진화하고 있는지를 잘 보여주는 사례임
     * OpenAI와 Anthropic 같은 기업들은 훨씬 많은 컴퓨팅 자원을 활용해 더 빠른 진전을 이룰 가능성이 큼
     * s1은 R1이나 o1을 그대로 복제한 것이 아니라, RL이 아닌 SFT(Supervised Fine Tuning)만으로도 비슷한 가능성을 열 수 있음을 시사함
     * 2025년에는 더 큰 혁신이 기대된다는 관측임

   Distillation을 Distealing이라고 비튼 표현이 재밌네요!

        Hacker News 의견

     * 'Wait' 해킹을 통한 추론 확장이 흥미로움. 간단한 방법이 성능에 영향을 미칠 수 있다는 점에서 컴퓨터 과학의 발전이 마치 주문을 외우는 것처럼 느껴짐. 이런 사고방식을 어떻게 시작할 수 있을지 궁금함
     * 생각의 흐름이 모델에 임시 '레이어'를 제공하여 텍스트를 처리하는 버퍼 역할을 한다면, 이 버퍼를 별도의 FNN과 주의 메커니즘을 가진 별도의 컨텍스트로 만드는 것이 의미가 있을지 궁금함. 이는 자연어로 설명하는 마이크로프로세스와 결합하여 더 밀도 있는 '생각'의 표현을 제공할 수 있을 것임
     * CoT는 널리 알려진 기술이지만, DeepSeek는 컴퓨팅 제한으로 인해 메모리, 대역폭, 병렬성 최적화를 찾는 데 집중했음. 그들의 인프라 및 소프트웨어 수준의 최적화가 주목할 만함
     * 현재 벤치마크가 충분히 강력하지 않다고 생각하며, 미국 LLM 연구소들이 인프라 및 하드웨어 최적화의 부족을 인식하고 있을 것임. RL 수준과 부모 훈련이 더욱 중요해질 것임
     * AI 해킹을 통해 실험한 방법이 연구소에서도 사용되고 있다는 점이 흥미로움. R1을 계속 생각하게 하기 위해 'Okay'로 대체하는 방법을 사용했음
     * Tim의 블로그를 북마크했음. AI와 신경망 분야에서의 발전이 놀라움. 개인적으로 약한 온디바이스 모델로 LLM 기반 에이전트를 만드는 데 어려움을 겪고 있음
     * 10,000개의 H100을 보유하는 것은 S1보다 625배 더 많은 실험을 할 수 있다는 것을 의미함. 대기업에서는 컴퓨팅 자원을 낭비하는 경향이 있음
     * 추론 모델의 출력 길이를 제어하는 방법이 흥미로움. 'Wait'로 대체하여 CoT를 주입하고 탈옥하기 쉽게 만드는 방법을 발견했음
     * S1에 대한 원본 논문 링크를 제공함
     * 대규모 조직에서는 실험을 많이 할 수 없으며, 직원들은 빠르게 결과를 내는 데 집중함. 임시적인 이익을 위해 급하게 작업을 진행함
     * LLM의 출력을 조각하는 것은 조각품을 만드는 것과 같음. 모델을 게임 루프에 넣고 각 틱마다 상호작용하여 원하는 결과를 얻어야 함. 컴퓨팅 자원에 대한 갈증은 계속될 것임
"
"https://news.hada.io/topic?id=19168","해시 테이블 내 검색 속도 향상을 입증한 학부생 연구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     해시 테이블 내 검색 속도 향상을 입증한 학부생 연구

소개

     * 2021년 가을, Rutgers University의 학부생 Andrew Krapivin은 그의 인생을 바꿀 논문을 접하게 됨.
     * 이 논문은 컴퓨터 메모리에서 정보를 가리키는 '작은 포인터'에 관한 것이었음.
     * Krapivin은 포인터를 더 작게 만들어 메모리 소비를 줄이는 방법을 고안함.

새로운 해시 테이블의 발견

     * Krapivin은 데이터를 저장하는 일반적인 방법인 해시 테이블을 사용하여 실험을 진행함.
     * 실험 중, Krapivin은 기존보다 더 빠르게 작동하는 새로운 종류의 해시 테이블을 발명하게 됨.
     * 이 발견은 40년 된 데이터 과학의 추측을 뒤엎는 결과를 가져옴.

해시 테이블의 중요성

     * 해시 테이블은 컴퓨터 과학에서 가장 오래된 데이터 구조 중 하나로, 데이터 저장의 효율성을 제공함.
     * 해시 테이블은 요소를 검색, 삭제, 삽입하는 세 가지 기능을 수행할 수 있도록 설계됨.

Yao의 추측과 그 반박

     * 1985년, 컴퓨터 과학자 Andrew Yao는 특정 속성을 가진 해시 테이블에서 최악의 경우 요소를 찾는 방법에 대한 추측을 제시함.
     * Krapivin의 새로운 해시 테이블은 Yao의 추측을 반박하며, 최악의 경우 쿼리와 삽입에 필요한 시간이 (log x)²에 비례함을 증명함.

평균 쿼리 시간에 대한 새로운 발견

     * Krapivin과 그의 팀은 비탐욕적 해시 테이블에서 평균 쿼리 시간이 x에 의존하지 않는다는 것을 보여줌.
     * 이는 해시 테이블의 충만도와 상관없이 일정한 평균 쿼리 시간을 달성할 수 있음을 의미함.

결론

     * 이 연구는 해시 테이블에 대한 이해를 깊게 하며, 실질적인 응용으로 이어질 가능성이 있음.
     * 데이터 구조에 대한 이러한 이해는 미래의 실용적인 개선을 위한 기반이 될 수 있음.

        Hacker News 의견

     * Krapivin이 Yao의 추측을 모른 채로 돌파구를 마련했음
          + Balatro의 개발자는 기존 덱 빌더를 모른 채로 수상 경력의 덱 빌더 게임을 만들었음
          + 문제 접근의 최선의 방법은 이전의 유사한 노력들을 모른 채로 하거나 무시하는 것일 수 있음
          + 현재 세계는 너무 상호 연결되어 있어, 이전의 사고의 틀에 빠지기 쉬움
          + 인터넷은 훌륭하지만, 사고의 세계를 동질화시키는 경향이 있음
     * 멋진 결과지만, 컴퓨터 과학 추측이라고 불려야 할 것 같음
     * 이 구현을 가진 GitHub 저장소를 아는 사람이 있는지 궁금함
     * 멋지지만, 이 글의 ""유명인화"" 스타일이 약간 불편함
          + 대학 환경에서 다양한 포즈를 취한 젊은이의 사진을 여러 장 볼 필요가 있었는지 의문임
          + 컴퓨터 성공의 생존자를 미화하여 더 많은 참여를 유도하기 위한 La La Land의 버전이 필요한 것 같음
     * 새로운 해시 테이블에서 최악의 경우 쿼리와 삽입에 필요한 시간이 (log x)²에 비례함
          + 팀의 결과가 즉각적인 응용으로 이어지지 않을 수 있음
          + 왜 즉각적인 응용으로 이어지지 않는지 이해가 안 됨
          + 실제 사용 사례 분석이 순수한 수학적 접근보다 해시 구현을 더 잘 조정할 수 있는 상황인지 궁금함
     * 이 기사를 읽는 것은 Monty-Hall 문제의 설명을 읽는 것과 같음
          + 결론이 상식을 거스르는 것 같지만 증명 가능함
          + 해시 테이블의 충만도와 상관없이 일정한 평균 쿼리 시간을 달성할 수 있다는 사실은 저자들조차도 예상하지 못했음
     * 최근의 좋은 테스트임
          + 깊은 연구가 이 결과를 복사하지 않고 나올 수 있는지 보자
          + gpt4, Gemini 2, Claude는 운이 없었음
          + 인간 주도의 컴퓨터 과학은 여전히 안전함
     * 'Tiny pointers'의 간단한 구현을 가진 사람이 있는지 궁금함
          + 내 마음은 증명보다 코드/의사 코드가 먼저임
     * <i>Scooby Doo</i>의 악당이 항상 말했듯이:
          + <i>""그리고 그 성가신 아이들이 아니었다면, 난 성공했을 텐데!""</i>
     * 논문을 대충 읽어보니, 그들이 사용한 주요 차이점은 해시 테이블 삽입 알고리즘이 첫 번째 빈 슬롯을 탐욕적으로 채우는 대신 더 멀리 탐색한다는 것임
          + 테이블이 매우 가득 차 있어도 빈 슬롯을 효율적으로 찾는 증명 가능한 탐색 순서를 결합함
          + 해시 테이블이 덜 가득 찼을 때 삽입이 느려지지만, 마지막 남은 빈 슬롯을 찾지 못하는 최악의 시나리오를 피할 수 있음
     * 흥미로운 이론적 결과지만, 실제로는 필요한 것보다 더 큰 테이블을 할당하는 현재의 '트릭'이 더 나은 해결책일 것 같음
          + 예를 들어, Rust의 hashbrown은 테이블의 1/8(12.5%)을 비워두어 메모리를 조금 더 사용하지만 삽입/조회가 매우 빠름
"
"https://news.hada.io/topic?id=19061","2025년 결제 위기: 더 이상 "읽기 전용" 접근이 아닌 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2025년 결제 위기: 더 이상 ""읽기 전용"" 접근이 아닌 상황

     * 트럼프-머스크 재무부 결제 위기 2025: ""읽기 전용"" 접근이 아닌 상황
     * 위기 개요
          + 엘론 머스크와 그의 팀이 미국 결제 시스템의 일부를 장악한 상황에 대한 위기 발생.
          + 이 위기는 미국 경제와 사회적 삶에 심각한 영향을 미칠 수 있는 잠재력을 가짐.
     * 기술적 상황
          + 머스크와 관련된 25세의 전 SpaceX 직원이 BFS 서버에 읽기 및 쓰기 접근 권한을 가짐.
          + 이 권한은 정부 결제 시스템의 보안 조치를 우회하고 변경할 수 있는 위험성을 내포함.
     * COBOL 시스템의 중요성
          + COBOL 시스템은 수십 년간 발전해온 복잡한 비즈니스 로직을 포함하고 있으며, 이를 이해하는 것은 단순히 프로그래밍 언어를 아는 것 이상을 요구함.
          + 이러한 시스템의 유지보수는 경험 있는 COBOL 프로그래머의 부족으로 인해 어려움을 겪고 있음.
     * 위기의 심각성
          + IT 리더십은 초기에는 접근 권한 부여를 주저했으나 결국 허용함.
          + 이로 인해 경제와 정부에 심각한 위험이 발생할 수 있음.
     * 대응 및 행동 촉구
          + 현재 상황은 매우 심각하며, 법적 대응과 더불어 강력한 정치적 행동이 필요함.
          + 트럼프-머스크 재무부 결제 위기 2025에 대한 인식을 높이고 저항하는 것이 중요함.

        Hacker News 의견

     * 이 문제는 결제 위기가 아니라 감사 위기임. 적절한 회계 절차가 따르고 있는지 확인할 방법이 없음. 의회의 지속적인 무대응은 범죄적임.
          + 청구서 지불과 급여 지급은 정치적 문제가 아님. 정치적 의제를 가진 정치인들이 관여해서는 안 됨.
     * Elon Musk가 사업에서 성공했다고 해서 여기서도 성공할 수 있다는 믿음은 논리적 오류임.
     * 인기 있는 게시물이 3시간 만에 250점을 받았음에도 불구하고 순위 129에 머물러 있는 것이 이상함.
     * 그의 첫 번째 본능이 모든 원조를 제거하는 것이 이상함. 군사 지출에 대한 언급은 없음. 다른 곳에서 줄여서 SpaceX와 Musk의 AI 계획에 자금을 투입하려는 것 같음.
     * Elon부터 Luigi까지 모두 ""태워버리자""는 생각을 가짐. 민주적 과정을 따르는 것에 이익을 보지 못함.
          + Elon이 새로운 사업에 자신의 자본을 많이 투자한 것을 존경했었음. 하지만 이제는 사회적으로 보수적인 인터넷 트롤이 됨.
     * 한 사람이 수조 달러를 다루는 복잡한 시스템을 수정하고 직접 프로덕션에 배포하는 것처럼 들림.
          + 그는 시스템에 익숙하지 않으며, 일주일 전에 처음 접했음.
          + 보통 이 시스템에 접근하는 사람들은 그가 정확히 무엇을 하는지 모름. 왜냐하면 그들이 같은 방식으로 시스템에 접근하는 것은 불법임.
     * Medium에 COBOL 시스템을 React Native와 NodeJS로 3일 만에 다시 작성하고 수십억을 절약했다는 기사가 나올 것을 기대함.
     * OPM 직원들을 HR 데이터베이스에서 차단했던 사람들이, 보안 및 감독 문제를 이유로, 이렇게 행동하면서도 옳은 일을 하고 있다고 주장할 수 있는지 의문임.
     * CIA와 NSA의 급여가 현재 감사 중인 시스템에 의해 지급되고 있는지 궁금함. 이는 외국 중개자/은행을 포함한 중개자에 대한 지급까지 확장되는지 물어봄.
"
"https://news.hada.io/topic?id=19059","Wikitoc - 틱톡 스타일로 위키피디어를 랜덤으로 보기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Wikitoc - 틱톡 스타일로 위키피디어를 랜덤으로 보기

     * 틱톡 스타일의 인터페이스로 여러 언어의 위키백과 문서를 랜덤으로 표시
     * 버티컬 스크롤링 피드
     * 14개 언어로 된 페이지들 표시. 국기를 이용한 언어 선택 가능
     * 이미지, 타이틀, 요약을 포함한 기사 미리보기
     * 아티클 공유 가능
     * PWA 여서 스탠드얼론 앱으로 설치가능
     * React + TypeScript + Tailwind CSS + Vite

        Hacker News 의견

     * 개발자가 트위터에서 요청을 보고 즉흥적으로 프로젝트를 시작했음. 백엔드 없이 Wikipedia API를 사용해 프론트엔드에서 요청을 처리함. Claude와 cursor를 사용해 대부분의 작업을 수행했으며, 최적화의 여지가 많음. 현재 상태로도 재미있게 사용할 수 있음
          + 소스 코드는 여기에서 확인 가능함
     * 자동 TTS와 슬라이드쇼를 추가하면 TikTok 형식의 절차적으로 생성된 미니 다큐멘터리를 상상할 수 있음
     * 간단한 알고리즘을 추가하면 앱의 중독성을 높일 수 있음. 사용자의 관심사를 학습해 관련 콘텐츠를 제공하는 방식으로 앱의 지속성을 높일 수 있음
     * TikTok과 같은 앱의 중독성을 사용자에게 유리하게 활용하는 방법을 고민 중임. 유용한 대체 앱으로 교체하는 것이 더 효과적일 수 있음
     * 비상업적 콘텐츠를 제공하는 TikTok 스타일의 프로젝트를 진행 중임. 인터페이스는 한 개의 버튼으로 구성되어 있으며, 무작위 Wikipedia 페이지를 백업으로 사용함. 프로젝트 이름은 moonjump임
          + moonjump
     * AI 생성 음성과 TikTok 스타일의 요약, TikTok의 알고리즘을 결합하면 괜찮은 앱이 될 것이라고 생각함. 이름은 WikiTok 대신 WikTok이 더 적합할 것 같음
     * Wikipedia는 기술적이거나 세부적인 주제를 집중적으로 다루기 때문에 무작위 페이지에서 정보를 얻기 어려움. 컴퓨터 관련 주제도 이해하기 어려운 경우가 많음
     * 간단한 것을 만드는 사람들을 존경함. 언젠가 간단한 아이디어를 생각해내어 공유하고 싶음
     * 프로젝트에 잠재력이 있다고 생각함. Wikipedia와 TikTok을 좋아하며, 활동 기반의 스마트 피드와 더 화려한 정보 제공 방식이 추가되면 좋겠음
     * 재미있는 아이디어지만, TikTok은 피드를 벗어나지 않아도 되기 때문에 작동함. 피드 내에서 Wikipedia의 콘텐츠를 제공하는 방법을 찾아야 함
"
"https://news.hada.io/topic?id=19112","Asahi Linux 수석 개발자 Hector Martin, Linux 커널에서 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Asahi Linux 수석 개발자 Hector Martin, Linux 커널에서 사임

     * Hector Martin의 패치 메시지
          + Hector Martin은 커널 개발 프로세스와 커뮤니티 관리 접근 방식에 대한 신뢰를 잃었음을 밝힘.
          + Apple/ARM 플랫폼 개발은 다운스트림에서 계속될 예정임.
          + 향후 필요에 따라 서브트리에 대한 패치를 업스트림으로 보낼 수도 있고, 그렇지 않을 수도 있음.
          + 업스트리밍에 도전하고 싶은 사람은 자유롭게 할 수 있음.
     * MAINTAINERS 파일 수정
          + Hector Martin의 이름이 ARM/APPLE MACHINE SUPPORT 섹션에서 제거됨.
          + Sven Peter와 Alyssa Rosenzweig의 정보는 그대로 유지됨.
     * 기타 정보
          + 패치 서명: Hector Martin marcan@marcan.st
          + 마지막 업데이트: 2025년 2월 6일

   R4L이 잡음이 참 많은것 같습니다. Torvalds의 리더십이 절실하군요.

        Hacker News 의견

     * Torvalds의 리더십 실패로 인해 Rust 관련 논란이 발생했음. 명확한 결정을 내리지 않아 Linux 커뮤니티 내에서 혼란이 발생했음
          + R4L 프로그램은 오랜 시간 동안 불확실한 상태로 남아있었음
          + Linus는 명확한 입장을 밝히지 않고, Martin에게 책임을 전가했음
     * Rust를 Linux 커널에 통합하려는 노력은 좌절감을 초래했음
          + 핵심 커널 코드에 Rust를 적용하려는 시도가 단일 관리자의 반대로 무산됨
          + 프로젝트 리더십이 명확한 정책을 세우지 않으면 기여자들이 혼란에 빠짐
     * Hector의 사임은 프로젝트의 불명확한 방향성을 보여줌
          + Rust 통합에 대한 명확한 입장이 없으면 기여자들이 시간과 노력을 낭비하게 됨
     * Linux 커널에 기여하는 것은 접근하기 어렵고, 좌절감을 줄 수 있는 경험임
          + Marcan의 지적은 타당하며, Linux 커널에 기여해보는 것을 추천함
     * Rust for Linux 프로젝트가 실질적인 프로젝트가 아니라면 Linus는 기여자들의 시간을 낭비하고 있음
     * Hector는 Rust 노력을 방해하는 행동에 대해 불만을 표출했으며, Linus는 소셜 미디어를 통한 Hector의 행동을 비판했음
     * Asahi Linux와 M 시리즈 칩을 사용하는 Mac에서의 Linux의 장기적인 가능성에 대한 질문이 제기됨
     * Rust 커뮤니티가 Rust를 강요하는 듯한 행동을 보이며, 이는 성숙하지 않은 행동으로 비춰질 수 있음
     * Apple 하드웨어에 대한 개발은 초기 Linux 시절과 유사하게 빠르게 진행되고 있음
     * Hector에 대한 비판이 있으며, Linux 커뮤니티 내에서의 드라마틱한 행동은 도움이 되지 않음
     * Kernel에 Rust를 도입하는 것을 장려하며, 일부를 Rust로 포팅하는 것도 고려할 수 있음
"
"https://news.hada.io/topic?id=19104","종이 애플리케이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               종이 애플리케이션

     * Paper Apps™ 소개
          + Paper Apps™는 화면 시간을 대체할 수 있는 재미있고 스마트한 대안임
          + DUNGEON, GALAXY, GOLF와 같은 솔로 게임과 TO•DO, NUTRI•TRACK 같은 게임화된 도구를 제공함
          + Pencil Dice와 함께 사용하면 더욱 완벽한 경험을 제공함
     * 제품 목록
          + Paper Apps™ DUNGEON - 노트북: $8.00 USD
          + Paper Apps™ GALAXY - 노트북: $8.00 USD
          + Paper Apps™ GOLF - 노트북: $8.00 USD
          + Pencil Dice™: $3.99 USD
          + Paper Apps™ TO•DO 노트북: $8.00 USD (품절)
          + Paper Apps™ NUTRI-TRACK 노트북: $8.00 USD (품절)
          + Paper Apps™ NOTES: $8.00 USD
          + Paper Apps™ 보호 파우치: $3.00 USD
     * 기타 정보
          + 모든 제품, 회사 소개, 검색, 서비스 약관, 환불 정책 등의 빠른 링크 제공
          + 고객의 방문과 지원에 감사함
          + 이메일, Twitter, Instagram을 통해 소식을 구독할 수 있음
          + © 2025, Gladden Design, Shopify 제공

        Hacker News 의견

     * Dungeon Notebook을 사용해 본 경험이 있으며, 재미있었지만 금방 질려서 다른 사람에게 주었음. 게임을 다른 사람에게 주는 것도 재미의 일부이며, Chain World처럼 아날로그 버전의 게임이 있으면 좋겠다고 생각함
     * 몇 주 전에 골프 PDF를 사서 7살 조카에게 줬는데 처음에는 망설였지만 기본 개념을 이해한 후에는 매우 즐거워했음. A* 알고리즘과 맨해튼 거리 같은 것은 나중에 가르칠 예정임. 창작자에게 감사하며 더 많은 작품을 기대하고 있음. 이 게임은 15년 전 사용했던 Pocket Mod를 떠올리게 함
     * 종이는 그 자체로 독특한 매체이며, 컴퓨터의 할 일 목록은 종이의 스큐어모프였음. 이제 사람들은 종이에서 멀어져서 컴퓨터의 할 일 목록을 종이에 가져오게 되었음. 이는 종이를 홍보하는 것이 아니라 오히려 컴퓨터를 홍보하는 것임
     * CGP Grey의 Sidekick Notepad를 추천하며, 'Paper Apps'와 'Sidekick'의 개념이 비슷하다고 언급함
     * Dungeon Notebook을 8살 아이와 함께 즐겼으며, 지루할 때 가지고 다니기 좋은 아이템임. 주사위 없이 주사위를 굴릴 수 있는 d6 연필도 매우 스마트한 아이디어임. 간단한 종이와 연필로 참여를 유도할 수 있는 아이디어에 영감을 받음
     * Google의 Paper Phone 실험이 흥미롭고 생각을 자극한다고 생각함
     * 아날로그를 십대 아이들의 삶에 도입하고자 하는 사람들에게 좋은 아이템이라고 생각함
     * 대량 구매 할인이 있으면 아이들 생일 파티에서 파티 가방 채우기로 좋을 것이라고 생각함
     * 종이 도구와 게임을 좋아하며, 다른 생산성 도구도 사용 중임
     * GALAXY 비디오를 보고 레벨에 낙서를 하고 싶지 않다는 생각이 들었음. 레벨을 반복해서 플레이하거나 다른 사람에게 책을 주고 싶음. 페이지 위에 놓을 수 있는 분리 가능한 아세테이트 시트가 있으면 좋겠다고 생각함. 배송 출발지를 명확히 해주길 요청하며, EU에 거주 중이라 미국에서 배송되는 물품은 세금과 스트레스 때문에 피하고 있음. ChuChu Rocket에서 영감을 받은 게임이 재미있을 것이라고 생각함
"
"https://news.hada.io/topic?id=19144","Rust로 작성하는 간단한 Windows 드라이버 작성법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Rust로 작성하는 간단한 Windows 드라이버 작성법

Rust로 간단한 드라이버 작성하기

     * Rust 언어 생태계는 매일 성장하고 있으며, 메모리와 동시성 안전성을 컴파일 시점에 제공하는 유일한 주류 언어임. 강력하고 풍부한 빌드 시스템(cargo)과 증가하는 패키지 수(crates)도 장점임.
     * Rust는 시스템 프로그래밍 언어로서 C/C++와 같은 영역에서 사용 가능함. C 타입을 Rust로 변환할 때의 장황함은 적절한 래퍼와 매크로로 완화 가능함.
     * 이 글에서는 Windows Kernel Programming 책에서 소개한 ""Booster"" 드라이버의 Rust 버전을 작성하여 스레드 우선순위를 변경하는 방법을 설명함.

  시작하기

     * 드라이버 빌드를 준비하려면 Windows Drivers-rs를 참고하고, WDK 설치 및 LLVM 설치가 필요함.
     * 새로운 Rust 라이브러리 프로젝트를 생성하여 드라이버를 작성할 수 있음: cargo new --lib booster
     * build.rs 파일을 추가하여 CRT를 정적으로 링크하도록 설정해야 함.

  코드 작성

     * 커널에서는 표준 라이브러리가 없으므로 #![no_std]를 사용하여 시작함.
     * wdk_sys 크레이트는 저수준 커널 함수와 상호 운용성을 제공하며, wdk 크레이트는 고수준 래퍼를 제공함.
     * Vec와 String은 alloc 모듈에서 정의되어 있으며, 글로벌 할당자를 제공하여 사용할 수 있음.
     * DriverEntry는 모든 Windows 커널 드라이버의 진입점이며, Rust의 println! 매크로를 사용하여 디버그 출력 가능함.

  요청 처리

     * IRP_MJ_CREATE, IRP_MJ_CLOSE, IRP_MJ_WRITE 요청을 처리해야 함.
     * boost_write 함수는 스레드 우선순위를 실제로 변경하는 부분임.
     * ThreadData 구조체를 사용하여 드라이버에 요청을 전달함.

  드라이버 설치 및 테스트

     * 드라이버 파일은 sc.exe 도구를 사용하여 설치 가능하며, sc start로 시스템에 로드할 수 있음.
     * C++ 애플리케이션을 사용하여 드라이버와 통신하고 올바른 구조체를 전달하여 테스트 가능함.

  결론

     * Rust로 커널 드라이버를 작성하는 것이 가능하며, 지원이 빠르게 개선될 것으로 기대됨.
     * Rust의 장점을 최대한 활용하기 위해 안전한 래퍼를 만들어 코드의 장황함을 줄이고 unsafe 블록을 피하는 것이 중요함.
     * 이 글의 코드는 GitHub에서 확인 가능함: https://github.com/zodiacon/Booster
"
"https://news.hada.io/topic?id=19181","저예산으로 개인용 AI 컴퓨터 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         저예산으로 개인용 AI 컴퓨터 구축하기

     * AI 도구 개발에 많은 돈이 투자되고 있으며, 많은 서비스가 손실을 감수하면서 운영되고 있음
     * 대형 기술 기업의 서비스들은 시장을 장악하기 위해 무료 또는 저렴하게 제공중이며, 결굴엔 ""광고·정치적 이해관계에 의해 AI 모델이 조작될 가능성이 높음""
     * 해결책은 ""자신만의 AI 모델을 직접 운영하는 것""
          + DeepSeek와 같은 회사들은 그들의 모델을 무료로 공개하여 시장을 흔들고 있음. 이러한 모델들은 편향을 제거할 수 있으며, 개인 하드웨어에서 실행 가능함

개인 AI 컴퓨터 구축의 도전 과제

     * LLM을 로컬에서 실행하려면 Nvidia의 강력한 비디오 카드나 Apple을 구입해야 함
     * 메모리가 많을수록 더 큰 모델을 실행할 수 있으며, 이는 출력 품질을 크게 향상시킴
          + Nvidia GPU 또는 Apple 기기 필요 (둘 다 고가)
          + 최소 24GB 이상의 VRAM 또는 RAM 필요
     * 비용 절감 방법: 중고 장비를 구입하는 것도 하나의 방법이며, 메모리 대역폭과 다른 사양도 중요함

저비용 AI 컴퓨터 구축 과정

     * 목표: 1700유로 내외로 AI 모델을 로컬에서 실행할 수 있는 시스템 구축
     * 최종 구성:
          + HP Z440 워크스테이션 (Xeon 12코어, 128GB RAM)
          + Nvidia Tesla P40 GPU 2개 (각 24GB VRAM, 총 48GB)
          + NZXT C850 Gold 파워 서플라이
          + Gainward GT 1030 (더미 GPU, 화면 출력용)
          + 맞춤형 냉각 팬 및 전원 어댑터

주요 기술적 문제와 해결 방법

  1. 서버용 GPU의 냉각 문제

     * Tesla P40은 서버 환경에서 사용되도록 설계되어 자체 팬이 없음
     * 해결책: 3D 프린팅된 팬 마운트와 강제 공기 흐름 조절
     * 팬 속도를 조절해 온도와 소음을 적절히 균형 조정

  2. HP 워크스테이션의 호환성 문제

     * HP가 자체 부품만 사용하도록 제한
     * 파워 서플라이 및 보드 연결 어댑터 추가 구매 필요

  3. BIOS의 부팅 문제

     * Tesla P40에는 디스플레이 출력 포트가 없음 → 부팅 불가
     * 저가형 GT 1030 GPU 추가하여 해결

성능 테스트 결과

  1. 추론 속도 (Tokens per second)

     * Mistral-Small (24B 모델): 15.23
     * Gemma2 (27B 모델): 13.90
     * Qwen2.5-Coder (32B 모델): 10.75
     * Llama3.3 (70B 모델): 5.35
     * DeepSeek-R1 (70B 모델): 5.30

  2. 전력 소비량

     * 컴퓨터가 대기 상태일 때는 약 80W를 사용
     * 32B 모델을 로드하면 123W, 실행하면 241W까지 올라감
     * 70B 모델의 경우, 로드 시 166W, 실행 중에는 293W까지 소비함
     * 즉, 모델 크기가 커질수록 전력 사용량이 증가하며, 모델을 GPU에 로드한 상태에서도 상당한 전력을 소비하기 때문에, 필요할 때만 모델을 유지하는 전략이 중요

결론: 개인 AI 서버 구축, 가치 있는 선택인가?

     * 완전히 독립적인 AI 시스템 구축 성공
     * 비교적 저렴한 가격으로 중형 모델을 로컬에서 실행 가능
     * 최신 고가 장비 없이도 AI 모델을 운영할 수 있다는 점에서 만족
     * 장기적인 AI 기술 변화에 대비할 수 있는 유연한 시스템 구축

   아예 gpu없이 cpu랑 ssd로 r1을 돌리는 세팅도 있던데 이건 조금 애매한 거 같네요

        Hacker News 의견

     * K80와 M40을 eBay에서 저렴하게 구입하여 비슷한 작업을 했음. K80의 드라이버는 매우 고통스러웠음. 24GB VRAM이 50달러라는 점은 매력적이지만, 드라이버 문제로 인해 추천하지 않음. HP 워크스테이션에 1200와트 전원 공급 장치가 있어 GPU를 설치할 수 있었음. 이 GPU들은 자체 냉각 기능이 없으므로 3D 프린터로 브래킷을 제작하고 Noctua 팬을 부착하여 24/7로 작동시켰음. 예상보다 훨씬 잘 작동했으며 온도가 60도를 넘지 않았음. CPU도 이 방법 덕분에 이득을 봄. 팬은 케이스 앞뒤에 위치하며, 앞쪽 팬은 공기를 흡입하고 뒤쪽 팬은 배출함. GPU 앞에도 두 개의 팬이 있음. 워크스테이션은 600달러에 리퍼비시 제품을 구입했고, GPU는 120달러, 팬은 약 60달러에 구입했음. STL 파일은 아직 업로드하지 않았음. 매우 특수한 사용 사례이기 때문임.
     * 같은 가격(1799달러)으로 48GB 통합 메모리와 m4 pro가 있는 Mac Mini를 구입할 수 있음. 전력 소모가 적고 조용하며, 이 설정보다 성능이 뛰어날 가능성이 있음. 이 글을 즐겁게 읽었지만, 같은 상황이라면 Mac을 구입할 것임.
     * 로컬 LLM을 위한 머신을 구축하고 싶음. MBP M3 Max에서 128GB RAM으로 모델을 테스트했으며, 전용 로컬 서버를 원함. Proxmox를 사용해보고 싶음. OpenWebUI와 LibreChat을 로컬 ""앱 서버""에서 실행 중이며 만족스러움. 하지만 더 강력한 장비를 구입할 때마다 ROI가 부족하다고 느낌. 특히 빠르게 변화하는 산업에서는 더욱 그렇음. 프라이버시는 무시할 수 없는 요소지만, 온라인 추론 비용을 이기기 어려움.
     * 로컬에 호스팅된 모델은 장난감처럼 귀엽고 재미있는 농담을 작성하며, 개인적인 작업을 수행할 수 있음. 하지만 API를 통해 접근 가능한 모델과 비교하면 부족함. deepseek-r1-678b를 로컬에서 실행할 수 있다면 좋겠지만, 현재는 운영 비용이 자본 비용보다 큼.
     * 중간 지점은 필요할 때 GPU VPS를 임대하는 것임. H100을 시간당 2달러에 사용할 수 있음. 완전히 로컬 오프라인만큼의 프라이버시는 아니지만, SASS API보다는 나음. 1~3년 후에는 로컬에서 유용한 것을 실행하는 것이 비용 효율적이 되기를 바람.
     * 다른 사람들이 말했듯이, 고성능 Mac을 같은 가격에 사용할 수 있으며 전력 소모가 적음. Apple이 엔터프라이즈 AI 칩 시장에 진입하여 Nvidia와 경쟁하지 않는 이유가 궁금함. Apple은 자체 ASIC을 설계할 수 있을 것임.
     * ""자신의 AI를 소유하라""는 집에서의 취미로는 훌륭하지만, 하드웨어에 많은 시간과 돈을 소비하게 됨. Mitko Vasilev의 드림 머신을 확인해보길 권장함. 명확한 사용 사례가 없다면 작은 모델이나 느린 토큰 생성 속도만 필요함. AI를 구축하고 배우려는 것이 목표라면 GPU/TPU를 필요할 때 임대하는 것이 경제적으로 나음.
     * 2개의 Nvidia Tesla P40 카드를 660유로에 구입하는 것은 ""예산 내""라고 생각하지 않음. 사람들이 ""작은"" 또는 ""중간"" 모델을 저렴한 카드로 사용할 수 있음. Nvidia Geforce RTX 3060 카드는 중고 시장에서 200~250유로에 구할 수 있음. 48GB VRAM은 예산 내라고 부르기에는 과도함. 이 설정은 반전문가 또는 전문가용임. 중간 또는 작은 모델을 사용하는 데는 타협이 필요하지만, 예산 내에서 타협하는 것도 중요함.
     * 이런 투자를 하는 데 문제가 있는 이유는 다음 달에 더 나은 모델이 출시될 것이기 때문임. 더 많은 RAM이 필요하거나 현재 최고의 모델보다 적은 RAM이 필요할 수 있음. 클라우드 인프라를 사용하면 이 문제를 해결할 수 있음. 실행당 비용이 더 많이 들지만, 사용이 간헐적이라면 비용을 절약할 수 있음. HN 사용자들은 이 문제를 어떻게 처리하고 있는지 궁금함.
     * SBC 클러스터를 사용하여 LLM 추론을 실행해본 사람이 있는지 궁금함. 예를 들어 Radxa ROCK 5C는 32GB 메모리와 NPU를 가지고 있으며 약 300유로임. 현대 LLM의 아키텍처에 대해 잘 알지 못하지만, 여러 노드 간에 레이어를 분할할 수 있어야 함. 전송해야 할 데이터가 많지 않음. 현대 Mac이나 Nvidia GPU와 같은 성능은 아니겠지만, 수용 가능하고 많은 메모리를 저렴하게 얻을 수 있는 방법일 수 있음. CPU + GPU 추론의 최신 상태가 궁금함. 프롬프트 처리는 계산과 메모리 제약이 있지만, 토큰 생성은 주로 메모리 제약임. 초기 프롬프트 처리를 위해 GPU에 몇 개의 레이어를 로드하고, 이후 CPU 추론으로 전환하는 도구가 있는지 궁금함. 마지막 실험에서는 일부 레이어를 GPU에서 실행하고 일부는 CPU에서 실행할 수 있었음. 모든 것을 GPU에서 실행하고, 메모리 제약이 있는 토큰
       생성 시 CPU로 전환하는 것이 더 효율적일 것 같음.

   | 같은 가격(1799달러)으로 48GB 통합 메모리와 m4 pro가 있는 Mac Mini를 구입할 수 있음. 전력 소모가 적고 조용하며, 이 설정보다 성능이 뛰어날 가능성이 있음. 이 글을 즐겁게 읽었지만, 같은 상황이라면 Mac을 구입할 것임.

   하고싶은 말이었는데 Hacker News 의견에 있네요.

   토큰값이 점점 저렴해지고 있어서 파인튜닝하거나 이미지 뽑아낼거 아니면 굳이... 싶은 생각은 있네요
"
"https://news.hada.io/topic?id=19161","Show GN: 드 모건의 법칙을 통해 부정 부울 표현식을 변환하는 ESLint 플러그인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: 드 모건의 법칙을 통해 부정 부울 표현식을 변환하는 ESLint 플러그인

   ESLint 플러그인 드 모건 출시.

   자바스크립트 코드의 논리 표현식을 더 간단하고 이해하기 쉽게 변환하는 플러그인입니다.

   이것에서:

   !(a && !b && c <= d)

   이렇게

   !a || b || c > d

   조건식은 읽고 이해하기 쉽게 쓰는게 맞지 않나 생각합니다.

   좋네요! 두 AST 간에 어떤 게 좋은지는 어떻게 비교하고 있나요?
   예를 들어 서로 동치인 (!a || !b || !c) 와 !(a && b && c) 를 AST depth로 비교했을 때는 전자가 더 유리한데, leaf의 개수로는 후자가 더 유리합니다. 저라면 연산이 더 적어지는 후자의 방향으로 변환하고 싶을 것 같아요.
   optimization preference가 depth인지, leaf의 개수인지에 따라 다르게 변환하는 옵션이 있다면 좋을 것 같습니다.
"
"https://news.hada.io/topic?id=19175","사회에 대한 광고의 암적 존재 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사회에 대한 광고의 암적 존재 (2019)

  광고를 암에 비유하는 이유

     * 광고는 현대 사회에서 암과 같은 존재로, 효율적인 시장을 위한 필수 요소에서 벗어나 점점 더 조작적이고 부정직하게 변해감.
     * 광고는 모든 회사의 자원을 소비하고, 모든 커뮤니케이션 매체에 침투하며, 사람과 기관에 대한 신뢰를 파괴함.
     * 광고의 성장은 경쟁자들의 광고를 상쇄하기 위한 노력으로 인한 낭비에 의해 촉진됨.

  질병의 증상

    개인정보 침해

     * 광고 기술 산업은 역사상 가장 발전된 감시 시스템을 구축하고 운영함.
     * 얼굴 인식, 위치 추적 등으로 인해 온라인과 오프라인에서 감시를 피하기 어려움.

    건강 관련 개인정보 침해

     * 여성의 생리 주기를 추적하는 앱이 광고주에게 데이터를 전송하여 타겟팅 광고에 사용됨.
     * 정신 건강 웹사이트가 방문자를 추적하고 광고 목적으로 데이터를 공유함.

    로보콜, 텔레마케팅

     * 미국에서는 전화 수신을 거의 불가능하게 만드는 수준으로, 일부는 사기, 일부는 불필요한 상품 판매 시도임.

    스팸

     * 이메일 서비스의 필터로 대부분 처리되지만, 광고가 거의 무료일 때 발생하는 문제의 순수한 예임.

    전단지, 우편 스팸

     * 오프라인 스팸으로, 종이와 잉크의 낭비를 초래함.

    검색 엔진 최적화(SEO)

     * 검색 엔진을 조작하여 검색 결과를 오염시키고, 사람들의 시간을 낭비하게 만듦.

    분노 유발 뉴스 보도

     * 뉴스는 광고 조회수로 자금을 조달하며, 인위적인 분노는 페이지 조회수를 높이는 데 매우 효과적임.

    어린이 착취

     * 어린이는 조작하기 쉬워 광고의 주요 타겟이 됨. TV와 스트리밍 서비스에서 브랜드와 엔터테인먼트를 혼합한 콘텐츠가 많음.

    맛의 부족

     * 공공 문서에 광고가 포함되는 등 광고 산업의 도덕적 타락을 보여주는 사례가 있음.

    브랜드 인지도

     * 브랜드 인지도를 높이기 위해 막대한 광고비를 지출하며, 이는 소비자의 뇌리에 브랜드를 각인시키기 위한 것임.

    다크 UX 패턴

     * 사용자가 의도하지 않은 행동을 하도록 유도하는 웹사이트와 앱의 트릭임.

    광고로 인한 디자인 문제

     * 다크 패턴에 장기간 노출되면 사람들은 면역력을 가지게 되어, 유익한 사용 사례도 피해를 입을 수 있음.

    악성 소프트웨어와 컴퓨팅 자원 소모

     * 광고 차단기를 설치하는 주요 이유 중 하나는 악성 소프트웨어로부터 컴퓨터를 보호하기 위함임.

    인터넷에 쓰레기 콘텐츠 범람

     * 블로그 스팸이나 콘텐츠 마케팅으로 알려진 것들이 인터넷에 범람하며, 대부분의 온라인 기사가 광고 전달 수단으로 사용됨.

    네이티브 광고

     * 광고를 합법적인 콘텐츠로 위장하는 마케팅 기법임.

    인플루언서

     * 사회적 증명을 왜곡하여 사람들에게 제품을 간접적으로 홍보하는 사람들임.

    빌보드

     * 풍경을 오염시키고 운전자의 주의를 산만하게 함.

    사회적 신뢰의 직접적인 전복

     * 광고 기술 인프라를 사용하여 사회적 신뢰를 전복하려는 시도가 있음.

    사람들을 불행하게 만듦

     * 광고는 사람들에게 불만족을 느끼게 하고, 그 불만을 해결할 방법을 제시함으로써 판매를 유도함.

    쇠퇴하고 일시적인 인터넷 서비스

     * 광고 기반 비즈니스 모델은 무료 서비스를 제공하여 사용자를 유치하지만, 시간이 지남에 따라 광고와 추적을 증가시킴.

    혁신 감소, 제품 품질 저하

     * 마케팅의 ROI가 높아 제품 개선보다 광고에 돈을 쓰는 것이 더 나은 선택이 됨.

    ""그냥 또 다른 수익원일 뿐!""

     * 광고가 없는 것이 프리미엄 서비스가 되어버린 문화적 문제임.

    성가신 쿠키 팝업

     * 쿠키 법에 따라 사이트가 쿠키를 사용하는 경우 동의 팝업을 표시해야 함.

    문화 파괴

     * 광고가 클래식 음악이나 예술 작품을 망치는 사례가 있음.

    과학의 전복

     * 광고가 연구 논문으로 위장하여 과학을 왜곡하는 사례가 있음.

  결론

     * 광고는 자원 고갈, 기후 영향, 사회적 신뢰의 붕괴를 통해 문명에 위협이 됨.
     * 광고를 제거하는 것은 문명의 붕괴를 초래할 수 있어, 점진적으로 문제를 해결해야 함.

    광고 차단기와 추적 차단기

     * uBlock Origin과 Privacy Badger를 설치하여 광고와 추적을 차단할 수 있음.

    GDPR

     * GDPR은 광고 기술 산업의 가장 프라이버시 침해적인 관행을 파괴하는 데 기여함.

    공정한 비즈니스 관행

     * 윤리적인 광고를 선택하여 상호 이익이 되는 거래를 목표로 해야 함.

    남용하는 회사와 거래 거부

     * 소비자로서 더 정직한 옵션을 선택하고, 그 이유를 회사에 알릴 수 있음.

    광고 기술 작업 거부

     * 광고 기술 산업에 기여하지 않도록 선택할 수 있음.

    희망을 잃지 않기

     * 광고는 조각조각 싸워 나갈 수 있으며, 이는 가능함.

    인식 제고

     * 광고의 암적인 성격에 대해 목소리를 높이고, 더 나은 세상을 위해 노력해야 함.

        Hacker News 의견

     * 최근 YouTube가 내가 20대 중반이라는 것을 알아차리고 처음으로 안정적인 미래를 위해 돈을 어떻게 저축할지 고민하고 있음
          + QuestTrade/WealthSimple 같은 서비스에 가입하지 않으면 큰 손실을 보거나 평생 임대할 것이라는 암시를 주는 광고가 많음
          + 이런 광고가 나와 같은 사람들을 불안하게 만들기 위해 시간과 노력을 들였다는 사실이 답답함
          + 인터넷 광고를 피하려면 돈을 지불해야 한다는 것을 인정하지만, 일부 광고는 엄격히 규제되어야 함
          + 도박, 제약, 알코올 광고는 규제 대상에 포함되어야 하며, 소비자의 현재 상황을 부정적으로 묘사하는 광고도 사회적 외부효과를 초래함
          + 마케터가 말하길, 성공적인 판매는 불만족에서 시작되며, 사람들에게 그들의 상황이 얼마나 나쁜지를 인식시키고 해결책을 제공하는 것임
     * 광고의 정의에 대한 논쟁이 있음
          + 광고는 정보를 제공하는 것이 아니라 누군가를 설득하려는 의도로 정의될 수 있음
          + 광고의 의도는 대상이 진실을 구별할 수 없게 만드는 것임
          + HN의 첫 번째 댓글의 의도가 기사를 더 잘 이해하도록 돕기 위한 것인지, 아니면 기사를 의심하게 만들려는 것인지에 대한 의문이 있음
          + 이는 사회적 신뢰의 문제로 이어짐
     * 광고가 사회에 미치는 부정적인 영향에 대한 우려가 있음
          + 인터넷은 신뢰를 잃고 있으며, 이는 사회가 제대로 기능하지 못하게 만듦
          + 기사가 피해와 위험을 과소평가하고 있지만 읽을 가치가 있음
     * 광고가 삶의 결점을 깨닫게 만들고, 광고된 제품으로만 해결할 수 있다고 느끼게 함
     * 광고의 문제는 광고 자체가 아니라 데이터 마이닝, 피싱, 사기와 같은 방법에 있음
          + 인터넷 초기의 발전에 대한 책 ""Fire in the Valley""에서 이러한 문제에 대한 논의가 있었음
          + 클릭 수익 모델이 광고를 통해 자금을 조달하지 않았다면 현재의 속도와 콘텐츠 수준에 도달하기 어려웠을 것임
     * 슈퍼볼을 보는 사람들이 광고를 보는 것과 같다는 생각에 동의하는 사람도 있음
     * 암 검진 광고는 비용 효율적이며 생명을 구할 수 있음
          + 광고가 사회에 긍정적인 영향을 미칠 수 있음
     * YouTube/Spotify/웹사이트의 광고는 콘텐츠를 가리고 강제로 보게 하지만, Instagram과 TikTok의 광고는 쉽게 건너뛸 수 있음
          + Instagram과 TikTok의 광고는 개인의 선호에 맞춰져 있어 더 관심을 가질 가능성이 높음
          + TikTok의 광고는 고객을 우선시하며, 흥미로운 콘텐츠로 제공됨
          + 인플루언서 마케팅과 유사하며, 제품 리뷰를 통해 새로운 브랜드와 제품을 발견할 수 있음
     * 광고는 경쟁사의 광고 노력을 상쇄하기 위한 것이며, 고객에게 제품과 서비스를 알리는 것만으로는 충분하지 않음
     * 광고를 양성 및 악성으로 나눌 수 있음
          + 양성 광고는 치약, Febreeze, 항공사 광고와 같음
          + 악성 광고는 도박, 제약 광고와 같으며, 사회에 부정적인 영향을 미침
          + 부정적인 광고가 적을수록 사회가 건강해짐
     * 광고에 대한 대안이 부족하다는 점에 놀라움
          + 소비자들은 광고를 싫어하지만, 비용을 지불하는 것을 더 싫어함
"
"https://news.hada.io/topic?id=19123","영국, Apple에게 사용자들의 암호화된 계정을 감시하라고 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  영국, Apple에게 사용자들의 암호화된 계정을 감시하라고 명령

     * 영국 보안 당국이 Apple에 전 세계 사용자들의 클라우드에 업로드된 모든 암호화된 데이터를 열람할 수 있는 백도어를 요구했음
          + 영국 정부는 특정 계정이 아닌 전반적인 접근 권한을 요구함
          + 이에 따른 전례가 주요 민주주의 국가들 중에는 없다고 알려짐
          + 정부가 사용자 데이터를 열람하기 위해 기업을 적극적으로 활용하는 방안에 대한 우려가 제기됨
     * Apple은 보안 약속을 지키기 위해 영국 내에서 암호화 스토리지를 중단할 가능성을 고려 중임
          + 하지만 영국 외 지역(예: 미국) 서비스에 대한 백도어 요구 사항은 여전히 충족시킬 수 없다는 문제가 있음
     * 영국 내무부(Home Secretary)가 2016년 도입된 Investigatory Powers Act에 따라 Apple에 ‘기술적 능력 요구서(technical capability notice)’를 발부했음
          + 법적 근거로는 수사기관이 증거 수집을 위해 필요한 경우 기업 협조를 강제할 수 있게 한 조항이 있음
          + 이 요구 사항에 대해 공개하면 범죄로 간주되는 규정이 존재함
     * Apple은 요구사항에 불복하여 비공개 기술위원회에 항소할 수 있는 절차가 있음
          + 항소 중이라도 Apple이 즉시 요구 사항에 협조해야 하는 부담이 있음
          + Apple은 영국 정부가 전 세계 사용자 보안을 결정하는 권리를 행사하는 것에 대해 이의를 제기했음
     * 영국 정부는 구체적인 기술적 요구 사항에 대한 언급을 거부했음
          + ‘운영상 문제’에 대해 논의하지 않는다는 입장을 표명함
     * 미국 정부 인사들도 영국의 요구에 대한 움직임을 파악하고 있었음
          + Trump 행정부 및 정보 기관 관계자들은 공식적인 언급을 삼갔음
          + 영국의 요구사항이 비영국 사용자들에게도 적용된다는 점이 충격적으로 받아들여짐
     * 문제가 되는 영역은 ‘Advanced Data Protection’을 통해 사용자만 해독 가능한 클라우드 스토리지임
          + Apple은 2022년에 이를 도입하기 시작했으며, FBI가 과거에 강하게 반발했음
          + 해당 보호를 활성화하지 않으면 iCloud 데이터는 수사기관이 영장으로 확보할 수 있는 경로가 존재함
     * Apple의 고도 암호화 스토리지는 전체 iPhone·Mac 사용자 중 일부만 사용하지만, 이 기능 활성화로 해킹 위험이 줄어드는 반면, 수사기관의 접근성은 현저히 낮아짐
     * 이러한 소식에 기술 업계 및 정책 입안자들이 강하게 반응했음
          + 미국 상원 정보위원회 소속 Ron Wyden 의원은 영국이 미국인을 상대로 비밀 감청을 하게 될 가능성을 경고함
          + Signal의 Meredith Whittaker는 영국이 전 세계적 암호화 취약점을 만들어내는 결과를 초래할 것이라고 비판함
     * 전 세계적으로 수사기관들은 암호화 강화로 테러, 아동 학대 같은 범죄 수사를 어렵게 만든다는 불만이 많음
          + 기업들은 프라이버시 보호를 이유로 이에 맞서고 있음
          + 백도어가 생기면 범죄자나 권위주의 국가에 악용될 위험이 있다는 주장이 제기됨
     * Meta, Google 등도 유사하게 강력한 백업 암호화를 제공 중임
          + Google은 Android 백업을 2018년부터 기본으로 암호화해, 내부적으로도 접근이 불가능하다고 설명함
          + Meta 역시 WhatsApp 백업 암호화에 백도어를 두지 않는다는 입장을 유지함
     * 영국이 접근 권한을 확보하면, 암호화를 허용해온 다른 나라들(예: 중국)도 유사한 요구를 할 수 있음
          + 이는 Apple이 서비스를 철회할지, 아니면 백도어를 제공할지의 문제로 이어질 수 있음
     * 영국이 Apple의 강력 암호화 도입을 비판한 것은 이번이 처음이 아님
          + 2022년, 어린이 안전을 명분으로 강력 암호화를 중단하라고 요구한 전력이 있음
          + Apple은 당시 영국 법률이 전 세계적으로 암호화 우회 방안을 강제할 수 있다고 경고했음
     * Apple은 영국 요구 사항이 유럽인권재판소 판결과도 충돌할 수 있다고 주장했음
          + 전 세계 사용자 암호화 약화를 초래한다는 점을 지적함
     * 미국의 경우, 과거 수사기관들은 암호화로 인한 수사 장애를 꾸준히 문제 삼았지만 최근에는 중국 해킹 문제를 더 우려하는 추세임
          + 미국 정부는 오히려 국민에게 일반 전화 대신 암호화된 통신을 권장하는 방향임
          + FBI, NSA, CISA가 합동 권고 사항을 발표할 때 영국은 동참하지 않았음

        Hacker News 의견

     * 영국 정부가 Apple을 사업에서 몰아내려 하기보다는, 규정을 따르지 않으면 큰 벌금을 부과할 가능성이 높음
          + Apple이 영국에서 Advanced Data Protection 서비스를 중단할 가능성이 있음
          + 정부의 제안은 약하며, 암호화된 데이터를 숨기려는 사람들은 다른 곳으로 옮길 것임
          + 영국 소비자들이 범죄자로부터 보호받지 못하게 되는 상황임
     * Apple이 영국에서 클라우드 서비스를 철수하면, 영국 보안 당국이 암호화된 사용자 데이터에 접근할 수 있는 백도어를 요구하는 것은 실행 불가능함
          + 영국 정보 기관들이 Apple을 좋게 보이게 하려는 새로운 방법을 찾고 있는 것처럼 보임
     * Google 대변인 Ed Fernandez는 정부가 백도어를 요청했는지에 대한 질문에 직접적인 답변을 하지 않았으며, Google은 법적 명령이 있어도 Android의 종단 간 암호화된 백업 데이터에 접근할 수 없다고 언급함
          + 이는 Google이 접근할 수 없다는 것만을 의미하며, 정부 기관에 키를 제공했을 가능성을 배제할 수 없음
     * 영국의 키 공개법은 고난도 무작위 데이터를 가진 사람을 범죄자로 만들 수 있음
          + 이는 암호화된 데이터를 해독할 키를 제공하지 않는 것에 대한 법적 요구임
     * AI 안전성을 파괴하는 가장 위험한 행동은 정부가 암호화 수학을 무시하는 것임
          + 이는 AI 안전성을 개인 및 생태계 수준에서 파괴할 수 있음
     * 감시 반대 프라이버시 서사에서 진전을 이루고 있다고 생각했으나, 이번 사건은 그렇지 않음을 보여줌
          + 영국 시민으로서 이 상황을 막기 위해 할 수 있는 일이 있는지 고민 중임
     * 미국은 정부로부터의 자유가 법적으로 명시된 유일한 나라임
          + 미국 헌법은 시민의 권리를 보호하는 중요한 역할을 함
     * 수년간 법 집행 기관은 범죄와 테러를 방지하기 위해 암호화 백도어가 필요하다고 주장해왔음
          + 미국에서는 Salt Typhoon 사건 이후 FBI가 정부 관계자들에게 Signal과 WhatsApp 같은 종단 간 암호화 앱 사용을 권장하고 있음
          + 영국 정부는 암호화에 대한 이해가 부족한 상황임
"
