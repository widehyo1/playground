"https://news.hada.io/topic?id=16355","학습 시간을 늘리지 않고 Retention을 증가시키는 방법 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                학습 시간을 늘리지 않고 Retention을 증가시키는 방법 [pdf]

   예전에 어떻게 학습하는게 좋을까 공부한적이 있는데 당시 알게된 spacing learning 관련한 논문이네요. 이런 류를 액기스로 모아둔 책이 있는데 관심있는 분들은 한번 보시면 좋겠네요.
   번역 : 어떻게 공부할 것인가
   원서 : Make It Stick
   https://www.yes24.com/Product/Goods/15341766
"
"https://news.hada.io/topic?id=16310","Postgres.new - AI 인터페이스를 갖춘 브라우저 내 Postgres","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Postgres.new - AI 인터페이스를 갖춘 브라우저 내 Postgres

     * 브라우저에서 직접 실행되는 Postgres 샌드박스로, AI 지원을 제공
     * 무제한의 Postgres 데이터베이스를 즉시 생성 가능(곧 S3에도 배포 가능해짐)
     * 각 데이터베이스는 대형 언어 모델(LLM)과 페어링되어 다양한 흥미로운 사용 사례를 제공함:
          + CSV 파일 드래그 앤 드롭으로 테이블 생성
          + 보고서 생성 및 내보내기
          + 차트 생성
          + 데이터베이스 다이어그램 작성
     * 모든 작업은 브라우저 내에서 로컬로 수행됨

  사용 데모

     * CSV 파일을 빠르게 쿼리하고 시각화하고 싶을 때
     * ChatGPT를 사용해 SQL을 작성하고 실제 데이터베이스에서 실행해 보고 싶을 때
     * 새로운 프로젝트를 계획하고 데이터베이스 설계를 AI에게 맡기고 싶을 때

  작동 방식

     * 모든 쿼리는 브라우저 내에서 실행됨
     * PGlite 덕분에 가능해짐. Postgres의 WASM 버전으로, 브라우저에서 직접 실행 가능함

  개발 동기

    1. AI 기반 개발: Postgres와 AI의 상호작용을 재구상함
    2. Postgres 샌드박싱: 브라우저에서 빠르고 일회성으로 실행 가능
    3. 저렴한 데이터베이스: 저렴한 비용으로 많은 데이터베이스를 제공할 수 있는 잠재력

  기능 및 작동 방식

    AI 어시스턴트

     * PGlite와 GPT-4o를 페어링하여 데이터베이스에 대한 완전한 권한을 부여함.
     * AI가 여러 작업을 연속적으로 수행할 수 있어 더 인간적인 느낌을 줌.

    CSV 가져오기 및 내보내기

     * CSV 파일을 드래그 앤 드롭하여 자동으로 테이블 생성.
     * AI가 CSV의 헤더와 샘플 행을 분석하여 데이터 유형을 결정함.
     * SQL 오류가 발생하면 AI가 자체적으로 수정 시도.

    차트

     * ""chart""라는 단어를 메시지에 추가하면 AI가 적절한 쿼리를 실행하고 차트를 생성함.
     * Chart.js를 사용하여 차트를 렌더링함.

    ER 다이어그램 및 마이그레이션

     * AI가 CREATE 및 ALTER 문을 생성하여 실제 데이터베이스에서 ER 다이어그램을 생성함.
     * 브라우저 호환 버전의 postgres-meta를 사용하여 PGlite 테이블을 JavaScript로 로드하고 스키마 시각화 도구를 사용하여 렌더링함.

    시맨틱 검색 및 RAG

     * pgvector 확장을 사용하여 브라우저 내에서 벡터 검색을 지원함.
     * Transformers.js를 사용하여 텍스트 임베딩을 생성하고 PGlite에 저장 및 쿼리함.

    배포

     * PGlite 데이터베이스를 S3에 배포하여 저렴한 비용으로 다양한 사용 사례를 지원할 계획.

  PGlite 심층 분석

    PGlite란?

     * PGlite는 Postgres의 WASM 빌드로, 브라우저, Node.js, Bun에서 실행 가능함.
     * 유닛 테스트, 로컬 개발, 원격 개발 등에 이상적임.

    데이터 지속성

     * Node에서는 네이티브 파일 시스템, 브라우저에서는 IndexedDB와 OPFS를 지원함.

    확장 지원

     * pgvector와 live 같은 유용한 확장을 지원함.

    기술 개요

     * Postgres의 단일 사용자 모드를 기반으로 하여 WASM에서 실행 가능하게 함.
     * 다양한 Postgres 기능을 WASM에 맞게 수정함.

  곧 출시 예정

     * 데이터베이스를 S3에 배포하고 인터넷에서 접근 가능하게 할 예정.
     * 더 많은 파일 형식 지원, 데이터베이스 공유, 데이터베이스 내보내기 기능 추가 예정.

  오픈 소스

     * 모든 작업은 오픈 소스로 제공됨:
          + PGlite (Apache 2.0)
          + pg-gateway (MIT)
          + postgres-new (Apache 2.0)
          + transformers.js

  GN⁺의 정리

     * postgres.new는 브라우저에서 실행되는 Postgres 샌드박스로, AI 지원을 통해 데이터베이스 작업을 간편하게 수행할 수 있음.
     * PGlite를 사용하여 빠르고 저렴한 데이터베이스 생성이 가능하며, 다양한 AI 기반 기능을 제공함.
     * 데이터 시각화, ER 다이어그램 생성, 시맨틱 검색 등 다양한 기능을 통해 개발자들에게 유용한 도구가 될 수 있음.
     * 유사한 기능을 제공하는 다른 프로젝트로는 Supabase, ElectricSQL 등이 있음.

   supabase였네요

   PGLite - 브라우저에서 Postgres 실행하기

        Hacker News 의견

     * postgres.new를 사용해 3개의 데이터베이스를 생성해본 경험 공유
          + 고객 주문 데이터베이스, 이슈 추적 시스템, 가족 관계 모델을 성공적으로 생성함
          + 가족 관계 모델에서 사촌과 삼촌을 포함한 복잡한 관계도 잘 처리함
          + 상호 관계(예: 형제 관계)가 일부 누락되었으나, 데이터 검토 요청 후 수정됨
          + 매우 유용한 도구로 평가함
     * AI의 한계를 보여주는 기술 데모로 평가함
          + 유효하지 않은 SQL을 생성하여 오류 발생
          + 생성된 SQL이 단절된 테이블 세트를 생성함
          + 모든 코드를 검토해야 하는 필요성 언급
          + 새로운 시스템은 종종 추상적이거나 스마트한 요소가 필요하지만, 이 시스템은 단순한 시스템만 생성함
          + 직접 코드를 작성하는 것이 더 쉬움
          + 조직 내에서 LLM 병합 요청을 금지함, 코드가 최적화되지 않고 버그가 많았음
          + 현재 LLM 디자인으로는 극복하기 어려움
     * ""New database"" 버튼 클릭 시 아무런 변화가 없음
          + Github에 로그인하지 않았지만, AI 기능을 사용하지 않으려는 의도였음
          + chatGPT가 필수라는 점에 실망함
          + 로컬 우선 접근 방식을 AI로 제한하는 것에 불만
     * 매우 인상적임
     * AI 기능 없이 사용할 수 있으면 좋겠다는 의견
          + WASM 빌드가 Postgres를 임베디드 DB로 사용할 수 있게 하는지 질문
     * 이 도구가 데이터베이스 설계에 큰 도움이 된다고 평가
          + 기존 데이터베이스 스키마를 다이어그램으로 그릴 수 있는지 질문
          + Supabase 마이그레이션 스타일이나 Flyway 같은 도구로 개발된 스키마를 다이어그램으로 표현하는 기능이 기업 환경에서 큰 도움이 됨
     * AI/LLM과 기존 워크플로우 결합에 대해 회의적이었으나, 이 경우는 괜찮다고 평가
          + LLM이 데이터베이스에 삽입할 데이터를 생성하는 데 유용함
          + 모바일에서 사용하지 못하는 이유를 이해하지만, 모바일 사용자에게 요약 정보를 제공해달라는 요청
     * Supabase 엔지니어로서 Electric 팀과 함께 이 도구를 개발하는 것이 재미있었다고 언급
          + 기술적 장애물을 극복하는 과정이 있었음
          + 피드백을 반영하여 계속 개선할 예정
     * 노트북이나 데스크탑에서 postgres.new를 사용하라는 안내
          + Webkit/Safari를 사용하는 데 문제가 없다고 언급
"
"https://news.hada.io/topic?id=16306","구글 픽셀 9 프로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구글 픽셀 9 프로

     * Pixel 9 Pro (6.3인치, 198g): $999 , Pixel 9 Pro XL (6.8인치, 221g): $1,099
     * 16GB Ram, Google Tensor G4 + Titan M2
     * 120Hz, HDR, 24시간 배터리(4700/5060mAh)
     * 50MP 와이드 카메라(ƒ/1.68) + 48MP 울트라 와이드 카메라(ƒ/1.7) + 48MP 망원 카메라(ƒ/2.8, 5배 광학줌)
     * 42MP Dual PD 셀피 카메라 (ƒ/2.2)
     * 8K/30FPS 비디오 녹화, 4K 24/30/60
     * 색상: Porcelain, Rose Quartz, Hazel, Obsidian

프로모션

     * Pixel 9 Pro 또는 Pro XL 구매 시 Google Store 크레딧 $200 제공 (8/28까지)
     * Gemini Advanced 1년 무료 제공 ($239 가치)
     * Gemini AI 어시스턴트
          + 아이디어 브레인스토밍, 이야기 작성, 프로젝트 계획
          + 사진을 찍어 실시간 도움 받기
          + Gmail에서 읽지 않은 이메일 요약
          + YouTube 비디오 시청 중 유용한 정보 제공
          + 여러 Google 앱에서 정보 가져오기 및 작업 수행
          + 아이디어를 입력하여 이미지 생성
          + 1M 토큰 컨텍스트 윈도우를 가진 Google의 가장 강력한 AI 모델 접근
          + 새로운 기능에 우선 접근
          + 2TB 저장 공간 및 Google One AI Premium 플랜 포함

카메라 기능

     * Pixel 카메라
          + 50 MP 메인 카메라: 뛰어난 이미지 품질
          + 48 MP 망원 카메라: 프로 수준의 줌
          + 48 MP 초광각 카메라: 최고의 매크로 포커스
          + 42 MP 전면 카메라: 선명한 셀피
          + ƒ/1.68 조리개 및 2x 광학 품질로 저조도 사진 및 클로즈업 촬영
          + 5x 망원 렌즈로 10x 광학 품질, Super Res Zoom으로 최대 30x 확대
          + 103° 시야각, 전용 자동 초점, 30% 향상된 저조도 성능
     * 비디오 기능
          + Super Res Zoom 비디오로 최대 20x 확대
          + Night Sight 비디오로 저조도 상황에서도 선명한 비디오 촬영
          + Video Boost로 8K 해상도 비디오 향상
     * 사진 편집
          + Add Me: 그룹 사진에서 사진작가를 추가
          + Zoom Enhance: AI로 디테일과 품질 향상
          + Photo Unblur: Google Photos에서 흐릿한 사진 선명하게
     * Magic Editor
          + AI와 몇 번의 탭으로 고급 사진 편집 가능
          + 최적의 크롭 및 리프레임 제안
          + 프레임 내 사람이나 물체 이동
          + 원치 않는 객체 제거
          + 원하는 장면을 입력하여 배경 재구성

성능 및 배터리

     * 디스플레이
          + Super Actua 디스플레이: 밝고 생생한 화면, 최대 120Hz 주사율
     * 칩셋 및 메모리
          + Google Tensor G4 칩과 16GB RAM
     * 배터리
          + 24시간 이상 지속, Extreme Battery Saver 모드로 최대 100시간
          + Pixel 9 Pro XL은 약 30분 만에 70% 충전 가능
     * 업데이트
          + 7년간의 OS 및 보안 업데이트

안전 및 보안

     * 긴급 도움
          + 셀룰러 또는 Wi-Fi가 없을 때 위성 연결로 긴급 서비스에 연결 가능
          + Thermometer 앱으로 체온 측정 가능
          + 위기 경고 및 자동차 사고 후 도움 요청 기능
          + 스팸 통화 필터링

   일단 xl 하나 주문해 놓았습니다.
   핑계는 모바일앱 개발을 위한 최신 플랫폼 구비... 정도로

   이번 픽셀에 들어간 텐서칩이 단순히 파운드리만 바뀐줄알았는데 기존 삼성 LSI 엑시노스 IP도 완전히 덜어낸거라하더라구요
   1세대 칩셋이라 반신반의해야할거같습니다

   엑시노스가 아니었군요? 모뎀은 그래도 삼성꺼겠죠?

   그림의 떡..

   그냥 해외 직구해서 쓰셔도..? 저 픽셀 초기 버전들은 그렇게 썼었는데요 ㅎㅎ

   저도 4a 까지는 썼었는데요.. volte 가 안되니까 저는 꽤나 신경쓰이더라구요..ㅎㅎ
   통신사를 유플러스쪽으로 넘어오니 volte 패치 없이는 통화를 아예 못하게 되기도 하고 제약이 참 많습니다..ㅜ

   아앗 그렇군요. 찾아보니 VoLTE 때문에 뭔가 패치를 해줘야 하는 상태네요.

   심지어 소프트웨어 업데이트될 때 마다 다시 해줘야했어요..ㅋㅋㅋ

        Hacker News 의견

     * AI와 LLM 기능을 중심으로 한 전화 요금제에 부정적인 의견
          + 기존 기기에서 모든 AI 어시스턴트 기능을 끄고 있음
          + Google이 기본 소프트웨어 기능을 추가하는 것이 더 나을 것이라는 의견
          + 예를 들어, 앱별 볼륨 믹서 기능이 필요함
     * Pixel 9의 새로운 모델과 기능
          + Pro 모델과 Pixel Fold의 리프레시
          + Pro와 Pro XL 모델의 크기와 사양 차이
          + 위성 긴급 지원 기능 추가 예정
     * Pixel 9의 위성 SOS 기능
          + 올해 말 출시 예정
          + 미국에서만 사용 가능
          + 2년 동안 무료 사용 가능, 이후 유료 가능성
     * Google의 기본 전화 기능 개선 필요성
          + Pixel 7 사용 중 기본적인 문제 발생
          + 네트워크 신호 문제로 인한 불편함
          + Android 14 업데이트로 인한 데이터 손실 경험
     * Google Home의 성능 저하
          + 서버 비용 절감으로 인한 소비자 혜택 감소 추정
          + 하드웨어와 소프트웨어의 조합에 대한 경고
     * 뛰어난 카메라 성능을 원하는 사용자
          + Samsung의 불필요한 소프트웨어 문제에 대한 불만
          + Pixel의 카메라 성능에 대한 기대
     * 작은 휴대폰에 대한 아쉬움
          + 큰 화면의 장점 이해하지만, 휴대성 문제 지적
     * 장치 내 추론 기능에 대한 미디어의 관심 부족
          + Apple의 PR이 더 나았다는 의견
          + LLM의 경제적 제약을 줄이는 장점
     * AI 수익을 위해 전화 판매를 AI 수익으로 계산하는 것에 대한 의심
     * 유리 뒷면을 가진 전화에 대한 불만
          + Pixel 5의 가벼움과 내구성을 선호
          + 최신 사양의 작은 휴대폰 필요성 강조
"
"https://news.hada.io/topic?id=16368","당신은 언어 모델보다 다음 단어 예측 능력이 뛰어난가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    당신은 언어 모델보다 다음 단어 예측 능력이 뛰어난가요?

   ""언어 모델보다 더 똑똑한가요?""

   많은 벤치마크가 언어 모델이 인간의 작업을 얼마나 잘 수행하는지 평가하려고 합니다.
   하지만 당신은 다음 단어를 예측하는 전형적인 언어 모델 작업에서 얼마나 잘할 수 있을까요?

   15개의 문제를 풀어보세요

   4점... 결과가 킹받네요

   오 맙소사. 영어 문제 풀듯이 푸니까 점수가 너무 안나오네요 ㅠ

        Hacker News 의견

     * ""스마트""라는 제목에서 기대한 것과는 다르지만, 흥미로운 아이디어임
          + 한 번에 하나의 질문만 보여주고, 각 답변 후 즉각적인 피드백을 제공하는 것이 더 좋을 것임
          + 이렇게 하면 더 몰입감이 높아지고, 정답을 바로 확인할 수 있어 유익함
     * Hacker News 댓글에서 다음 단어를 맞추는 게임/퀴즈를 만듦
          + llama2를 사용해 각 댓글에 대해 세 가지 대체 완성을 생성하여 다중 선택 질문을 만듦
          + 로컬 언어 모델은 프롬프트와 답변의 총 당혹도(perplexity)가 가장 낮은 답변을 선택함
          + OpenAI 모델은 logit_bias를 설정해 허용된 답변 중 하나만 선택하도록 함
          + Claude나 다른 온라인 LLM과는 비교할 수 없었음
          + 퀴즈가 재미있다고는 할 수 없지만, 50% 이상의 정답률을 꾸준히 유지할 수 있었음
     * 언어 모델이 선택할 가능성이 가장 낮은 단어를 선택하는 것이 이기는 전략임
          + ""이상치(outlier)""를 선택하는 것이 최선의 전략임
          + 이는 AI 콘텐츠를 감지하는 간단한 전략이 될 수 있음
     * 결과를 보면, 주어진 정보로 다음 단어를 정확히 예측하는 것은 불가능함
          + 답변을 가능성에 따라 정렬하고, 정답을 얼마나 높게 순위 매겼는지에 따라 점수를 매기면 무작위보다 나을 것임
          + LLM이 원래 저자의 목소리를 모방하려고 했는지 궁금함
     * 이 게임은 HN 댓글을 너무 많이 읽는지 확인하는 좋은 테스트임
     * 매번 무작위 퀴즈를 받기 때문에 결과를 비교할 수 없음
          + 평균적인 사람이 LLM을 이길 수 있는 코퍼스를 찾고, Wordle 스타일의 일일 챌린지와 소셜 공유 기능을 추가하면 바이럴 가능성이 있음
     * HN에서 보낸 시간 덕분에 AI보다 약간 더 나은 예측을 할 수 있었음
     * 100문제 퀴즈에 도전하는 사람들에게: 전통적인 통계 기준으로는 3분의 1 이상 맞춰야 추측보다 나은 것으로 간주됨
          + LLM보다 나으려면 절반 이상 맞춰야 함
     * 샘플이 HN에서 나왔다면, 텍스트가 이미 데이터셋의 일부일 가능성이 있음
          + 최근 댓글을 보면 그렇지 않을 가능성이 높음
          + ChatGPT가 Bing 검색 도구를 사용할 수 있지만, gpt4o-mini API 모델이 그렇게 할 가능성은 낮음
     * 일부는 더 큰 맥락에서 발췌한 것으로, LLM이 예측에 유리한 위치에 있음
"
"https://news.hada.io/topic?id=16391","토스트 알림은 나쁜 UX임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             토스트 알림은 나쁜 UX임

     * Toasts는 항상 사용자의 주의(어텐션)에서 멀리 나타나는 것이 핵심 문제
     * YouTube Toast의 문제점
          + 전체 상호작용이 매우 불편함
               o 화면 오른쪽의 ""저장"" 버튼을 클릭함
               o 화면 중앙에 모달이 나타남
               o 화면 왼쪽 하단에 toast가 나타남
          + 추가적인 문제점들
               o 로딩 표시 없이 toast가 지연됨
               o 모달에서 체크박스를 체크하거나 체크 해제할 때, 이전 toast가 사라지기까지 몇 초를 기다려야 최신 작업에 대한 확인 toast를 받을 수 있음
               o toast의 ""되돌리기"" 버튼은 불필요함. 사용자가 다시 체크박스를 클릭하면 됨
     * 해결책: Toast 제거
          + ""저장"" 상호작용을 단순히 재설계하여 모든 문제를 해결할 수 있음
               o 재생 목록이 모달 대신 버튼 바로 아래에 표시됨
               o 체크박스를 체크/체크 해제한 후 로딩 표시가 나타남
               o 로딩 표시가 사라지면 작업이 완료되었음을 의미함
               o Toast가 필요 없음
     * 추가 예제 2개
          +
              1. 항목이 추가/제거되었음을 확인
               o Gmail에서 이메일을 보관할 때, toast가 나타나 확인을 보여줌. 하지만 이메일을 보관하면 이메일이 목록에서 사라져 이미 작업이 성공했음을 암시함
               o 참고: 되돌리기 기능과 키보드 단축키 사용 시 toast 피드백이 유용할 수 있음
          +
              2. 항목이 복사되었음을 확인
               o 클립보드에 항목이 복사된 후 toast가 나타남. 이 예시에서 버튼 자체가 이미 확인을 포함하고 있어 toast가 전혀 불필요함
     * 더 나쁠 수도 있음
     * Toast보다 더 나쁜 것은 아무 피드백도 없는 것임
     * 더 나은 피드백 메커니즘을 설계하거나 구축할 시간이 없다면, toast가 없는 것보다는 나음

GN⁺의 정리

     * 이 글은 Toasts가 사용자 경험에 미치는 부정적인 영향을 설명하고, 이를 해결하기 위한 대안을 제시함
     * YouTube와 Gmail의 예시를 통해 Toasts의 문제점을 구체적으로 설명함
     * Toasts 대신 더 직관적이고 즉각적인 피드백 메커니즘을 제안함
     * 사용자 경험을 개선하기 위해 피드백 메커니즘을 신중하게 설계하는 것이 중요함

   그러니까 나쁜 토스트가 나쁘다는 거죠??

        Hacker News 의견

     * 토스트(Toast) 알림의 필요성
          + UX에서 중복된 정보 전달이 나쁜 UX라는 주장에 동의하지 않음
          + 중복된 정보 전달은 메시지가 확실히 전달되도록 보장하는 기능임
          + 토스트는 모든 작업 상태를 표준화된 방식으로 전달하여 사용자가 패턴을 빠르게 익히도록 도움
          + 특정 지표와 토스트를 함께 사용하면 의미가 명확해짐
          + 토스트를 제거하면 사용자가 여러 방식으로 ""완료됨""을 이해해야 하는 부담이 생김
          + 특히 노인, 시각 장애인, 어린이에게는 불편함
     * 토스트 알림의 단점
          + 토스트가 너무 빨리 사라지거나 불필요하게 주의를 끌 때 문제가 됨
          + 전통적인 데스크탑 방식에서는 오류 메시지는 모달로, 성공 메시지는 상태 표시줄에 표시됨
          + 상태 표시줄은 CLI 터미널 출력의 마지막 줄처럼 동작하며, 이전 메시지를 확인할 수 있는 팝업 제공
     * YouTube의 예시
          + YouTube에서 댓글 삭제 시 두 번의 토스트 알림이 발생함
          + 여러 댓글을 빠르게 삭제하면 각 삭제 확인 토스트가 순차적으로 나타나 시간이 걸림
     * Undo 버튼의 필요성
          + 실수로 클릭했을 때 Undo 버튼이 유용함
          + 애플리케이션을 잘 모를 때 메시지만으로 쉽게 Undo하기 어려움
     * 토스트의 장점
          + 토스트는 시스템 사용성을 높이는 표준 구현을 제공함
          + 대부분의 시스템은 고급 디자인 문제를 해결할 인력이 부족함
     * 토스트의 적절한 사용
          + 사용자 행동과 관련 없는 알림에만 토스트가 적합함
          + 사용자 행동에 대한 피드백은 해당 행동의 문맥 내에서 제공되어야 함
          + 비동기 작업의 경우, 작업이 대기 중임을 즉시 알리고 취소 및 진행 상황 확인 옵션 제공
     * 토스트와 인라인 피드백
          + 토스트는 사용자 행동에 대한 보편적이고 방해되지 않는 확인 방법임
          + 인라인 피드백은 잘못 적용되면 혼란을 줄 수 있음
     * 저자의 대안 제안에 대한 비판
          + 로딩 지표가 오류를 사용자에게 전달하기 어려운 문제를 야기할 수 있음
          + Google 및 대부분의 UI 라이브러리가 토스트/알림 메시지를 사용하는 이유를 고려해야 함
          + 저자의 의견은 개인적인 견해에 가깝고 분석적 결론이 아님
          + 개인적으로 토스트와 알림의 UX를 선호함
"
"https://news.hada.io/topic?id=16302","KAIST 전산학부, C to Rust 자동번역기술 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    KAIST 전산학부, C to Rust 자동번역기술 개발

   KAIST(카이스트)는 류석영 전산학부 연구팀(프로그래밍 언어 연구실)이 C언어의 핵심 기능에서 메모리 문제가 생기지 않도록 방지하는 'C-러스트 코드 번역 기술'을 개발했다고 13일 밝혔다. 이번 연구 결과는 국제 학술대회 '국제 자동 소프트웨어엔지니어링학회(ASE)'에 채택됐다.

   논문은 한국 시각으로 6월 21일 PACMPL(Proceedings of the ACM on Programming Languages) 저널에 게재됐고 6월 25일부터 27일 사이에 진행된 PLDI 2024 학술대회에서 발표됐다.

   흥미있어보이긴 하네요

   변환으로 대체화를 할거면 rust 에 의미가 있나요?

   메모리 안전성이라는 측면에서는 충분히 메리트가 있지 않을까요
   기존의 C 코드를 소유권 기반으로 관리하게끔 할 때 자동적으로 변환이 안되는 부분에서 보안 이슈를 찾아낼 수도 있을 것 같구요

   C를 rust로...술마셨나요?

   C를 rust로 번역하면 안되나요..?

   union 변환만 하는거라면 어떤 의미가 있는지 잘 모르겠네요

   Union 변환에 초점을 맞춘이유는, 다른 구성요소를 번역하는일은 단순하기때문이 아닐까요.

   기사 제목만 보면 C->Rust 번역이 다 되는 것 처럼 오해하기 쉬운데, 위 기사 내용도, 다른 기사에서도, union 변환만 언급되는 것 같네요.


   (위 기사)
   ""연구팀은 기존 C언어의 유니언을 러스트 코드로 번역하는 기술을 개발했다.""
   ""연구팀은 '완전 자동 번역' 단계에 이르기 위한 후속 연구를 진행할 계획이다.""


   (다른 기사)
   ""KAIST(총장 이광형)는 전산학부 류석영 교수 연구팀(프로그래밍 언어 연구실)이 C언어의 유니언(union)*을 러스트의 태그드 유니언(tagged union)으로 변환하는 기술을 세계 최초로 개발했다고 13일 밝혔다.""
   https://www.lecturernews.com/news/articleView.html?idxno=158865

   얼마 전에 TRACTOR 뉴스도 있었지요..
"
"https://news.hada.io/topic?id=16361","연방 법원 판결: 경찰, 체포 후 재산 무기한 압수 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    연방 법원 판결: 경찰, 체포 후 재산 무기한 압수 불가

    경찰은 체포 후 재산을 무기한 압수할 수 없음, 연방 법원 판결

     * 여러 순회 법원 판결
          + 많은 순회 법원은 법 집행 기관이 재산을 원하는 만큼 보유할 수 있다고 판결해 왔음
          + D.C. 고등 법원은 지난주 이러한 판결이 위헌이라고 결정함
     * 판결 내용
          + 제4차 수정헌법의 불합리한 수색 및 압수에 대한 보호는 압수의 기간에도 적용됨
          + 법원이 합법적인 체포와 관련된 재산 압수는 계속적인 보유가 합리적이어야 한다고 판결함
          + 경찰은 재판 증거 등 합법적인 법 집행 목적으로 압수된 물품을 사용할 수 있지만, 중요한 기능을 수행하지 않는 장기 압수는 제4차 수정헌법에 저촉될 수 있음
     * 사례 및 영향
          + D.C. 법원의 판결은 다른 순회 법원과의 의견 불일치를 초래함
          + 이 사건은 대법원에서 다룰 가능성이 있음
          + 원고들은 D.C.의 메트로폴리탄 경찰국(MPD)에 의해 재산을 압수당했으며, 일부는 14개월 이상 재산을 돌려받지 못함
          + 원고들은 압수된 동안 중요한 정보에 접근할 수 없었고, 새로운 전화기를 구입해야 했음
     * 법적 및 실질적 중요성
          + 경찰이 제4차 수정헌법의 틈새를 악용해 합법적인 체포 후에도 재산을 무기한 보유할 수 있었음
          + D.C. 순회 법원의 판결은 앞으로 유사한 관행에 도전하는 소송에서 중요한 선례가 될 수 있음

    GN⁺의 정리

     * 이 기사는 경찰이 체포 후 재산을 무기한 보유할 수 없다는 중요한 법적 판결을 다루고 있음
     * 제4차 수정헌법의 보호가 압수 기간에도 적용된다는 점에서 법적 중요성을 가짐
     * D.C. 법원의 판결은 다른 순회 법원과의 의견 불일치를 초래하여 대법원에서 다룰 가능성이 있음
     * 이 판결은 경찰의 재산 압수 관행에 대한 중요한 선례를 제공하며, 앞으로 유사한 소송에서 중요한 역할을 할 수 있음

        Hacker News 의견

     * 법원의 판결이 의도는 좋지만, 재산을 보유할 수 있는 최대 기간을 정의하지 않아 실질적으로 쓸모없음
          + 경찰이 무기한으로 재산을 보유할 수 있는 기준을 정하는 것이 문제임
          + 14일 또는 30일로 기간을 제한했다면 유용했을 것임
     * 명확한 시간 제한이 필수적임
          + 사람의 삶에도 한계가 있음
          + 생계를 유지하지 못하는 기간에도 한계가 있음
          + 감옥 형벌에 시간 제한이 없다면 상상해보라
     * 법의 모호함이 문제임
          + 변호사와 판사에게 유리하게 작용함
          + 경찰의 남용을 초래함
          + 헌법부터 시작해 법을 명확하고 일관성 있게 다시 작성해야 함
     * 이 판결이 위헌적인 민사 몰수를 해결할 수 있을지 궁금함
     * 체포가 없을 때는 어떻게 되는지 궁금함
     * 체포 기준인 '합리적 의심'이 재산을 무기한 압수하는 근거로는 너무 약함
          + 대법원의 판례가 필요하지만, 현재 법원의 구성으로는 결과를 예측하기 어려움
     * 제4차 수정헌법은 불합리한 압수를 금지함
          + 1800년대부터 명백히 위헌이었어야 함
     * 법에서 '합리적'이라는 단어를 들으면 포기하게 됨
          + 이 단어는 구체적이지 않음
          + 명확한 한계를 정의하지 못하면 원하는 바를 알지 못하는 것임
          + 그런 경우 다른 사람을 방해하지 말아야 함
     * 이 판결은 큰 영향을 미치지 않을 것임
          + 견인 회사들에게 말해보라, 그들은 비웃을 것임
          + 미국의 모든 법적 관할 구역에는 도둑질로 이익을 보는 견인 회사들이 많음
          + FBI가 조사한 샌프란시스코의 두 회사도 있음, 체포는 없었음
     * 체포와 혐의가 있어도 재산을 수년간 보유하는 것은 터무니없음
          + DC 사건에서는 시위자들이 혐의를 받지 않았고, 그들의 전화기는 14개월 동안 보유되었음
          + 이는 두 배로 미친 짓임
     * 흥미로운 사실, 경찰의 압수(체포된 사람들로부터 훔침)는 범죄 도둑질보다 많음
          + 즉, 경찰이 범죄자보다 더 많이 훔침
     * Afro Man의 문 수리를 도와줄 것인지 궁금함
"
"https://news.hada.io/topic?id=16327","갈루아 이론갈루아 이론

    Galois Theory

     * Tom Leinster는 2021년부터 2023년까지 에든버러 대학교에서 가르친 갈루아 이론 강의 노트를 arXiv에 게시함
     * 이전에 웹사이트에 노트를 공유했으나, 다른 강의 자료들도 함께 공개하기 위해 시간이 걸림
     * 이제 다음 자료들이 모두 공개됨
          + 갈루아 이론의 완전하고 독립적인 설명을 담은 노트
          + 약 40개의 짧은 설명 비디오
          + 많은 문제 모음
          + 거의 500개의 다지선다형 질문
     * 갈루아 이론 노트의 인기가 놀라움
          + 이전에도 푸리에 해석, 일반 위상수학, 선형대수학, 범주론 등의 강의 노트를 공개했으나, 갈루아 이론 노트가 특히 인기를 끌고 있음
          + 범주론 노트는 책으로 출판됨
     * 갈루아 이론 노트에 특별히 신경을 쓴 이유
          + 첫 강의가 코로나 봉쇄 기간 중에 진행되어 학생들이 대면 상호작용 기회를 잃었기 때문에 더 많은 지도가 필요했음
          + 노트가 색상과 아이콘 등으로 더 보기 좋게 꾸며져 있어서일 가능성도 있음
     * 노트, 비디오, 질문들이 많은 사람들에게 기쁨을 주기를 바람

    관련 항목

     * 3d 회전과 7d 교차 곱셈 (2024년 6월 4일)
     * 란타넘족과 예외적 리 군 G2 (2024년 5월 27일)
     * 대수 구조 세기 (2023년 9월 17일)
     * 표현 이론 질문 (2023년 8월 17일)
     * 웨더번-아르틴 정리 (2023년 6월 14일)
     * 브라우어의 보조정리 (2023년 6월 11일)
     * 자유 멱등 반군과 모노이드 (2022년 12월 21일)
     * 옥토니온의 내부 자기동형사상 (2022년 11월 22일)

    댓글

     * 많은 사람들이 갈루아 이론 자료를 공개해줘서 감사하다는 댓글을 남김
     * 갈루아 이론의 인기는 그 자체의 아름다움 때문이라는 의견도 있음
     * 해커들도 갈루아 이론에 관심이 있다는 언급
     * 갈루아 이론이라는 이름 자체가 인기를 끄는 요인이라는 의견도 있음

    Mersenne Twister

     * Mersenne Twister 알고리듬에 대한 설명을 찾고 있음
     * 예를 들어, a=9908B0DF와 같은 마법 상수를 계산하는 방법에 대한 질문
     * Mersenne Twister는 2^p 요소의 유한 필드에서의 곱셈과 관련이 있으며, 이는 갈루아 이론과 관련이 있음

    GN⁺의 정리

     * 이 글은 갈루아 이론 강의 자료를 공개한 것에 대한 설명임
     * 갈루아 이론은 수학적으로 매우 아름답고, 많은 학생들에게 유익할 수 있음
     * 코로나 봉쇄 기간 동안 학생들에게 더 많은 지도를 제공하기 위해 특별히 신경을 쓴 자료임
     * 갈루아 이론 외에도 푸리에 해석, 일반 위상수학, 선형대수학, 범주론 등의 자료도 공개됨
     * 갈루아 이론에 관심 있는 사람들에게 매우 유용한 자료가 될 것임

        Hacker News 의견

     * Ian Stewart의 책은 자습에 훌륭하며 흥미로운 역사적 배경이 있음
     * Danny O’Brien의 블로그 글 ""A Touch of the Galois""는 Galois에 대한 최고의 글임
          + Galois는 두 대학에서 낙제하고 공화국 복원을 위해 싸우고, 바스티유 감옥에 갇히고, 수학의 여러 주요 분야로 이어질 생각을 적었으며, 20세에 결투에서 사망함
     * 1장은 훌륭함
          + 수학 강의는 더 많은 맥락이 필요함
          + 문제를 해결하고 일반화하는 과정이 중요함
          + 교육 목적으로는 여정을 가르치는 것이 더 효과적임
          + Calculus I를 가르칠 때 Newton이 해결하려던 문제와 이유를 설명하면 학생들이 더 잘 이해함
          + 저자에게 1장에 대해 찬사를 보냄
     * Galois 이론은 대학에서 추상대수학 과목의 결론으로 기억됨
          + Galois는 뛰어난 수학자였으며, 20세에 결투에서 사망하지 않았다면 더 많은 기여를 했을 것임
     * 비수학 전공자를 위해 ""simple Wikipedia"" 기사가 적절한지 궁금함
     * 몇 년 전 Charles C Pinter의 ""A Book of Abstract Algebra""를 통해 Galois Theory를 공부한 그룹을 이끌었으며, 최고의 수학 스터디 그룹 책 중 하나였음
     * John Stillwell의 ""Galois Theory For Beginners""는 가장 짧은 입문서임
     * 두 번째 학기의 대수학에서 Galois Theory를 배웠으나 추상적이고 이해하지 못했음
          + 지금 다시 공부해보고 싶음
     * i와 -i를 구분할 수 없다는 점이 이상함
          + 순수하게 대수적으로 왼손 좌표계와 오른손 좌표계를 구분하는 방법을 아직도 모름
          + [(1,0,0), (0,1,0), (0,0,1)]이 왼손인지 오른손인지 그림 없이 알 수 없음
     * 8보다 작은 순서의 그룹을 생각하지 않고 나열할 수 있기를 바람
          + 아침 반응: 그룹 이론을 모두 잊어버림, 나쁨
          + 점심 후: 8보다 작은 합성수는 두 개뿐임
"
"https://news.hada.io/topic?id=16371","Bun은 Node보다 빠를까? Misskey로 검증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Bun은 Node보다 빠를까? Misskey로 검증

   Misskey (GeekNews)는 ActivityPub 연합을 지원하는 마이크로블로깅 서버 프로그램입니다. Misskey는 일본에서 주로 개발되고 있으며, 이모지 리액션, 자체 마크업인 MFM, 키워드 추적 (안테나), 프로필 장식하기, 자체 스크립트인 AiScript 를 사용한 인터렉티브 페이지 만들기, 미니게임 등등 재미있는 기능이 많이 있어서 재미를 찾는 유저들이 많이 찾는 플랫폼입니다.

   Misskey의 기술 스택은 제가 알기로는 다음과 같습니다. (틀릴 수 있습니다.)
     * NodeJS, TypeScript
     * Koa.js, PostgreSQL, Redis
     * Vue

   이 글에서는 Misskey의 메인테이너인 syuilo (슈이로) 님이 NodeJS와 비교하였을 때의 Bun의 성능을 Misskey의 소스를 가지고 검증합니다.
     * 기존 소스를 그대로 Bun으로 돌렸을 때 빨라지는가? 를 테스트하는 것을 목적으로 합니다. 글에서는 Bun을 위한 최적화를 별도로 수행하지 않았으며, 호환되지 않는 코드가 복잡한 경우 테스트를 수행하지 않았다고 밝히고 있습니다.
     * 글에는 어디까지나 하나의 사례로만 봐달라는 당부사항이 있습니다.
     * Ubuntu에서의 테스트였지만 Windows에서도 별 차이가 없었다고 합니다.

   결론부터 말하자면, 이 사례의 경우 Bun에서 오히려 성능이 저하되는 현상이 주를 이루었습니다. 기존 대규모 소스를 Bun으로 실행한다고 해서 마법처럼 빨라진다고는 말할 수 없다...가 결론인 것 같네요. ChatGPT가 요약한 내용은 이렇습니다.
     * 메모리 사용량: Node 약 200MB, Bun 약 800MB로 Bun이 훨씬 많은 메모리를 소모.
     * 실행 속도: 타임라인 조회와 같은 다양한 처리에서 Node가 더 빠른 결과를 기록. 특히, 게시물 작성 시 Node는 5초, Bun은 10초로 Node가 2배 빠름.
     * AiScript: 순수 JavaScript 코드 실행에서는 Node(V8 엔진)이 약 1.5배 더 빠름.

   글에는 코드베이스 각 부분의 실행 벤치마크가 올라와있으나 WebSocket의 1회성 실행을 제외하고는 모두 NodeJS가 근소하거나 많은 차이로 빠른 결과를 보였습니다. WebSocket 실행의 경우에도 10만회 실행 시 NodeJS가 근소하게 더 빠른 결과를 보였습니다.

   다만 글 작성자인 syuilo 님은 Bun의 발전 가능성을 여전히 기대하고 있으며, 추가 최적화에 따라 성능이 향상될 가능성도 언급하고 있습니다.

   단순 바꿔서 돌리는 경우 node:crypto나 zlib 관련 라이브러리처럼 bun 문서나 이슈에도 명시된 아직 최적화가 덜 된 케이스도 있습니다.

   예시 중 5초에서 10초가 될 정도로 느려진거라면 아마 이런 부분이 아닐까 싶네요. 실제로 저도 jwt 관련 라이브러리에서 이런 문제 때문에 몇배 느려진 적이 있어 라이브러리를 바꿔 최적화 시켜야했죠.

   일본어 기술 블로그 글은 어디서 가져오시는 지 궁금합니다. 체계적이고 핵심이 있는 느낌을 받아서요

   다른 글은 모르겠지만 이 글은 미스키에 올라왔기 때문에 연합우주에서 받아볼 수 있었습니다 (저도 거기서 먼저 보고 여기에 올라온 걸 봤습니다)

   이 본문의 출처는 잘 모르겠지만, Qiita에 좋은 글들이 많이 올라오는 것 같습니다.
   영미권이나 한국 블로그와는 다른 시각으로 분석한 글들을 번역해서 올려주는 분들이 여러 채널에 있는데, 대체로 치타의 글을 번역 했다는 공통점이 있었습니다.

   구글검색 자동완성에서 키타와 zenn을 비교하는 검색어를 추천해줘서 zenn도 찾을 수 있었습니다. 정보 감사드립니다

   Qiita는 키타 라고 읽으시면 됩니다.

   앗 그렇군요 머쓱

   굉장히 흥미로운 결과입니다. Bun의 경우 웹프레임워크로 ElysiaJS가 많이 추천되는데, Bun이 제공하는 최적화된 API를 쓰지 않으면 오히려 퍼포먼스가 떨어지는 문제가 있었습니다. Koa.js 를 사용했다고 되어 있는데 그 쪽에서 퍼포먼스가 많이 떨어졌을 것으로 추측됩니다.

   런타임과 시스템 통합의 차이를 구분해서 보아야할텐데요.

   Bun이 자랑하는 성능은 전반적으로 JSC의 특성과, 일부 시스템 통합의 최적화(또는 기능축소), 좋은 기반 라이브러리의 선택에서 기인합니다.

   그래서 소규모 벤치마크에서는 Bun이 이기는 경향이 있지만 대규모/롱러닝 벤치마크에서는 Node.js에 밀리는 경향이 동시에 있어요.
"
"https://news.hada.io/topic?id=16350","구글, 플레이 스토어에서 Organic Maps 삭제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글, 플레이 스토어에서 Organic Maps 삭제

        Hacker News 의견

     * 사건에 대한 Fediverse 게시물 링크 공유
     * AppStore 독점 문제로 인해 Google과 앱 제공자 간 문제가 발생할 때 독립적인 사법 권한이 없음을 지적함
          + Google이 입법, 행정, 사법을 모두 담당하는 문제를 언급함
          + 민주 국가에서 모든 권한이 한 손에 집중되는 것을 싫어하는 이유와 비교함
     * 어제 Organic Maps를 사용해봤으며, OSM 데이터를 탐색하는 데 훌륭한 앱임
          + Google Maps보다 도보 경로 찾기에 더 나음
          + 특정 속성으로 태그된 포인트를 검색하는 기능이 있으면 좋겠음
     * Google 같은 회사에 대해 Hanlon's razor의 반대가 적용된다고 느낌
          + ""악의로 충분히 설명될 수 있는 것을 어리석음으로 돌리지 말라""는 원칙을 언급함
     * Organic Maps가 좋음
          + GrapheneOS Android 폰에서 Organic Maps만 사용 중이며, Google Maps를 설치하거나 사용할 필요를 느끼지 못함
          + 하지만 노트북에서는 Google Maps 웹사이트를 사용하며, StreetView, 위성 이미지, 3D 항공 이미지를 좋아함
     * Google이 ""사용되지 않는"" 개발자 계정과 ""저품질"" 앱을 계속 제거함
          + 하지만 개발자가 Play Store에서 앱을 제거하고 계정을 닫고 싶어도 실제로 앱을 제거할 수 없고, 숨길 수만 있음
          + 개발자 계정을 삭제하는 버튼도 없음
          + 이중 잣대를 지적함
     * 규칙 기반 원인에 대해 추측하는 사람이 없어서 자신이 추측함
          + 정책 1이 가장 가능성이 높다고 생각함
          + OSM에 ""부적절한"" 콘텐츠가 포함된 일부 훼손이 있었을 가능성을 언급함
     * APK를 웹사이트에서 다운로드할 수 있음
          + Play Store를 통하지 않고 다운로드할 수 있는 것을 원하는 사람들에게 적합함
     * Organic Maps가 훌륭함
          + Tour du Mont Blanc(170km/105mi 하이킹)에서 사용했으며, 완벽하지는 않지만 커뮤니티 개발자 덕분에 계속 개선되고 있음
          + 꼭 사용해보기를 권장함
     * Google Play 문제에 대한 임시 해결책으로 새로운 Google Play 업데이트를 이 링크에서 설치할 수 있음
"
"https://news.hada.io/topic?id=16405","Zen - Firefox 엔진 기반의 Arc와 비슷한 오픈소스 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Zen - Firefox 엔진 기반의 Arc와 비슷한 오픈소스 브라우저

     * Zen은 아름다운 디자인과 개인정보 보호에 중점을 둔 웹 브라우저
     * 사용자 경험을 중시하며 데이터를 수집하지 않음
     * 속도를 위해 설계되었으며, 매 릴리스마다 경쟁 브라우저를 능가하는 빠른 브라우징 경험을 제공

Zen의 주요 기능

     * Split views: 여러 사이트를 동시에 탐색할 수 있도록 브라우저를 그리드, 가로/세로 등 여러 뷰로 분할할 수 있음
     * Workspaces: 브라우징 필요에 맞게 작업 공간을 생성하여 정리된 상태를 유지
     * Profile switching: 업무와 개인 프로필 간에 원활하게 전환
     * Side web panels: 현재 페이지를 떠나지 않고 즐겨찾는 사이트와 서비스를 즉시 접근
     * Compact Mode: 작은 화면에 적합한 화면 공간을 최대화하는 간소화된 브라우징 경험을 제공

그외 기능

     * Beautifully designed: 직관적이고 미적으로 만족스러운 인터페이스 제공
     * Customizable: 테마, 레이아웃 등으로 개인 맞춤화 가능
     * Keyboard shortcuts: 효율성을 높이는 키보드 단축키 제공
     * Tab groups: 작업 흐름을 간소화하는 탭 그룹 기능 제공
     * Vertical tabs (곧 출시 예정): 공간과 질서를 최대화하는 수직 탭 기능 제공

        Hacker News 의견

     * 여러 브라우저에서 ""workspaces"" 기능을 봤음. Vivaldi와 Arc에도 있음. profiles와 다른 점을 잘 모르겠음. 차이점에 대해 설명해 줄 수 있는지 궁금함
     * Sideberry와 containers를 사용할 때 UI 외에 다른 차이점이 있는지 궁금함. 예를 들어, 분리된 히스토리 제안 같은 것
     * 긍정적인 댓글이 많지 않아서 하나 작성함. Firefox 사용자이지만 Arc의 'workspaces' 기능과 최소한의 UI 때문에 Arc에 끌렸음. 몇 주 동안 Arc를 사용해보고 이 기능들을 좋아하게 됐음. Gecko 기반 브라우저에 이러한 기능이 추가되어 기쁨. 성능과 보안에 대한 모호한 주장보다는 Firefox 기반 브라우징을 위한 대안 UI라는 간단한 사실에 집중하는 것이 좋음
     * 마케팅 문구에서 ""아름다운""이라는 단어를 보면 거부감이 듦. 너무 자만심을 드러내고, 사용자는 실용적인 소프트웨어를 선호할 수 있음. ""아름다움""에 대한 의견은 다를 수 있음. 이 부분에서는 보여주고 말하지 않는 것이 좋음
     * MacOS를 사용할 때 Arc를 많이 사용했음. 매우 만족스러운 경험이었음. Linux/Firefox로 전환한 이후로 Arc를 많이 그리워했음. Zen을 모든 확장 프로그램과 북마크로 설정했는데, 매우 잘 작동함. 시간이 지나도 잘 유지될지 지켜볼 것임. UI가 마음에 듦
     * Sway(i3의 Wayland 클론)를 사용하기 때문에 ""split views""와 ""workspaces""는 매력적이지 않음. Zen은 성능과 샌드박싱에 대해 심각한 주장을 하지만, 이를 어떻게 수행하는지에 대한 구체적인 설명이 부족함. 몇 가지 조정만 있는 것처럼 보임
     * ARM Mac에서 .DMG 파일 내에서 앱을 실행하려고 할 때 이상한 오류가 발생했음. ""Zen Browser""가 손상되어 열 수 없다는 메시지가 나옴. 디스크 이미지를 거부해야 한다고 함. Apple의 보안과 관련된 알려진 문제임. 해결 방법은 여기에 있음: [GitHub 링크]
     * Firefox 확장 프로그램인 uBlock Origin을 지원하는 것 같음. 웹사이트에 언급되지 않아 놀랐음. 여전히 적용되는지 궁금함: [GitHub 링크]
     * 최근에 LibreWolf로 전환했음. 정말 훌륭함. 새로운 Firefox 설치 시 불필요한 부분을 제거하면서도 최신 보안 업데이트를 유지함. 개인적으로 Firefox가 이렇게 느껴져야 한다고 생각함
     * Zen 브라우저를 꽤 좋아함. 프라이버시를 중시하면서도 시각적으로 매력적임. 가장 마음에 드는 기능은 브라우저가 많은 공간을 차지하지 않는다는 것임. 상단 바도 숨길 수 있음. 그래서 화면 대부분이 웹사이트를 보여줌
"
"https://news.hada.io/topic?id=16333","Grok-2 베타 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Grok-2 베타 릴리즈

     * Grok-2와 Grok-2 mini 모델을 X 플랫폼의 Grok 사용자들에게 릴리스함
     * Grok-2는 이전 모델인 Grok-1.5에서 크게 발전된 채팅, 코딩, 추론 능력을 갖추고 있음
     * sus-column-r이라는 이름으로 LMSYS 리더보드에서 테스트된 Grok-2 초기 버전은 Claude 3.5 Sonnet과 GPT-4-Turbo보다 우수한 성능을 보임

    Grok-2 언어 모델 과 채팅 기능

     * Grok-2의 초기 버전을 sus-column-r이라는 이름으로 LMSYS 챗봇 아레나(유명한 LLM 경쟁 벤치마크 도구)에 제출함
     * 모델의 전반적인 Elo 점수 면에서 Claude와 GPT-4를 능가함

    벤치마크

     * Grok-2 모델을 추론, 독해, 수학, 과학, 코딩 등 일련의 학술 벤치마크에서 평가했음
     * Grok-2와 Grok-2 mini는 이전 Grok-1.5 모델에 비해 상당한 개선을 보임
     * 대학원 수준의 과학 지식(GPQA), 일반 지식(MMLU, MMLU-Pro), 수학 경시 문제(MATH) 등의 영역에서 다른 최첨단 모델과 경쟁력 있는 성능을 달성함
     * Grok-2는 시각적 수학 추론(MathVista)과 문서 기반 질의응답(DocVQA)에서 최첨단 성능을 보임

    X에서 실시간 정보로 Grok 경험해보기

     * X 플랫폼에서 Grok을 지속적으로 개선해 왔음
     * X Premium 및 Premium+ 사용자는 Grok-2와 Grok-2 mini라는 두 가지 새로운 모델에 액세스할 수 있음
     * Grok-2는 X 앱의 Grok 탭을 통해 접근 가능하며, 텍스트와 비전 이해 모두에서 고급 기능을 갖춘 최첨단 AI 어시스턴트임
     * Grok-2 mini는 속도와 답변 품질 사이의 균형을 제공하는 작지만 유능한 모델
     * Black Forest Labs와 협력하여 FLUX.1 모델을 실험하고 X에서 Grok의 기능을 확장하고 있음

    Enterprise API를 사용하여 Grok으로 구축하기

     * 이번 달 말 새로운 엔터프라이즈 API 플랫폼을 통해 개발자에게 Grok-2와 Grok-2 mini를 출시할 예정
     * 새로운 API는 전 세계에 걸쳐 짧은 지연 시간으로 액세스할 수 있는 다중 지역 추론 배포를 허용하는 새로운 맞춤형 기술 스택을 기반으로 구축됨
     * 필수 다중 요소 인증, 풍부한 트래픽 통계, 고급 청구 분석 등 향상된 보안 기능을 제공함
     * 기존 내부 도구 및 서비스에 팀, 사용자, 청구 관리를 통합할 수 있는 관리 API를 제공함

    What is Next?

     * Grok-2와 Grok-2 mini가 X에서 출시되고 있음
          + Grok이 제공하는 향상된 검색 기능, X 게시물에 대한 심층적 통찰력, 개선된 회신 기능 등 다양한 AI 기반 기능에 대해 매우 기대하고 있음
     * 곧 X와 API에서 Grok 경험의 핵심 부분으로 멀티모달 이해에 대한 프리뷰를 공개할 예정
     * 2023년 11월 Grok-1 발표 이후 X.AI는 작지만 인재 밀도가 가장 높은 팀의 주도로 엄청난 속도로 움직이고 있음
     * Grok-2를 도입하여 AI 개발의 최전선에 서게 됨
     * 새로운 컴퓨팅 클러스터로 핵심 추론 능력을 발전시키는 데 중점을 두고 있음
     * 앞으로 몇 달 동안 훨씬 더 많은 개발 사항을 공유할 예정
     * ""인류의 미래를 위한 가장 영향력 있는 혁신을 구축하는 데 전념하는 작고 집중된 팀에 합류할 개인을 찾고 있음""
"
"https://news.hada.io/topic?id=16281","GitButler는 이제 Fair Source 입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GitButler는 이제 Fair Source 입니다

     * GitButler는 이제 Fair Source 운동의 첫 번째 회원 중 하나로, 기본적으로 폐쇄 소스를 공개 소프트웨어로 전환하는 데 기여함
     * 몇 달 전, GitButler는 GitHub에 클라이언트 소스 코드를 공개하여 모두가 사용하고 배우고 기여할 수 있게 함
     * 소스를 공개하기 전 몇 주 동안, GitButler 팀은 이를 어떻게 할지에 대해 많은 논의를 함
          + 사용자들이 코드를 보고 배우고 차용할 수 있게 하면서도,
          + 동시에 소프트웨어에 많은 투자를 하고 있으며, 투자자와 직원이 있어 제품을 기반으로 수익성 있는 비즈니스를 구축하고 싶음
          + AGPL이나 BUSL과 같은 라이선스 사용을 고려함
     * Sentry가 Codecov의 코드를 공개하면서 겪은 어려움을 보고, 그들이 채택한 Functional Source License(FSL)를 선택함
          + FSL은 경쟁 금지 조항이 포함되어 있고 2년 후에는 MIT 라이선스로 전환되는 비즈니스 친화적인 새로운 방식의 라이선스임
          + 이를 통해 방어 가능한 비즈니스를 구축하기 위해 고군분투할 필요 없이 소스 코드를 공개적으로 사용할 수 있음
          + 자유, 개방성, 보호 사이의 완벽한 균형을 제공함
     * 이 새로운 공개 소스 코드를 무엇이라고 부를지 고민함
          + FSL의 경쟁 금지 조항으로 인해 ""Open Source""라는 용어를 사용할 수 없음
          + 그러나 ""source available""이라는 표현은 약하고 오해의 소지가 있음
          + Sentry 등 이 문제로 고민하던 기업들이 모여 상용 공개 라이선스의 새로운 개념을 포괄할 수 있는 ""Fair Source""라는 용어를 만들어냄
     * GitButler는 세계 최초로 새로운 Fair Source 운동에 동참하게 된 것을 기쁘게 생각함

폐쇄 소스를 Fair Source로 전환 제안

     * fair.io 웹사이트는 기업들이 닫힌 소스를 Fair Source로 전환하는 것을 돕고 있음
     * 이는 소스 코드를 폐쇄 상태로 유지할 기업들이 커뮤니티를 위해 소스를 공개하고, 읽고, 배우고, 기여하고, 수정할 수 있는 더 나은 길을 제공할 것임
     * 폐쇄 소프트웨어를 가진 기업이라면 Fair Source 운동을 검토하고, 작업 중인 것을 세계와 커뮤니티에 공개할 수 있는지 고려해보길 권장함
     * 우리는 모두 메이커이고, 배운 것을 동료와 사용자와 공유하는 것을 좋아하며, 이는 더 넓은 산업에 이롭고, 이제 장벽은 그 어느 때보다 낮아졌음
     * 사용자 자유와 개발자 지속 가능성을 균형 있게 유지하는 새로운 유형의 소스 코드 라이선스로 더 많은 소프트웨어를 공개하는 데 동참하길 바람

더 많은 정보

     * 소프트웨어 협업의 세계가 어디로 향하고 있는지에 대한 배경을 더 알고 싶다면 ""오픈 소스의 미래"" 기사 참조
     * Sentry의 블로그 게시물이나 Chad의 ""The Historical Case for Fair Source"" 기사에서 Fair Source와 그 근거에 대해 자세히 읽을 수 있음

GN⁺의 의견

     * Fair Source는 오픈 소스의 장점을 살리면서도 상용 소프트웨어 개발사의 지속 가능성을 고려한 절충안으로 보임. 그동안 오픈 소스 소프트웨어를 개발하면서 수익 모델을 찾기 어려웠던 기업들에게 매력적인 대안이 될 수 있음
     * 다만 경쟁 금지 조항 등으로 인해 기존 오픈 소스 커뮤니티와의 마찰이 있을 수 있음. 오픈 소스의 정신을 훼손한다는 비판도 제기될 수 있을 것임
     * Fair Source를 도입할 때는 라이선스 조건을 명확히 하고 커뮤니티와 투명하게 소통하는 것이 중요함. 사용자들이 소스 코드 사용에 제약이 있다는 점을 분명히 인지할 수 있어야 함
     * 유사한 접근 방식으로는 Elastic License 2.0, Server Side Public License 등이 있음. 각 라이선스의 장단점을 면밀히 분석하여 자사에 가장 적합한 것을 선택하는 것이 좋겠음
     * Fair Source가 소프트웨어 산업 전반에 어떤 영향을 미칠지, 개발자와 사용자들에게 어떤 의미가 있을지 지켜볼 필요가 있음. 새로운 시도인 만큼 시행착오도 있겠지만, 궁극적으로는 더 다양한 주체가 소프트웨어 개발에 참여하는 건강한 생태계 조성에 기여할 수 있기를 기대함

        Hacker News 의견

     * 이 소프트웨어가 오픈 소스가 아님을 투명하게 밝힌 점이 좋음
          + 오픈 소스 운동 전체에 대해서는 복잡한 감정이 있음
          + 소스 코드를 투명하게 공개하고 무료로 사용하게 하는 것은 좋지만, 엄격한 오픈 소스가 더 나은 세상을 만든다고 생각함
          + Linux에서 앱을 실행할 수 있는 이유는 모든 클라우드가 이를 실행할 수 있기 때문이며, 경쟁자들 중에서 선택할 수 있는 혜택을 누림
          + 이 소프트웨어가 git 위에 구축되었고, FOSS에 의존하는 비즈니스 모델을 가지고 있음에도 불구하고, 이를 차별화하고 보호하려는 점이 아이러니함
          + 오픈 소스 운동 덕분에 무료로 이 경력에 들어설 수 있었고, 가장 허용적인 조건으로 OSS를 작성하고 배포하는 것이 운동에 보답하는 최선의 방법이라고 생각함
     * https://fair.io와 https://faircode.io를 혼동했음
          + 새로운 ""기능적"" 라이선스가 2년 후 자동으로 MIT 또는 Apache 2.0으로 변환되는 것이 흥미로움
          + 오픈 소스(및 무료) 소프트웨어를 지지하지만, 이러한 새로운 라이선스가 더 많은 서비스 수준의 비즈니스가 소스 코드를 어느 정도 공개하도록 유도하기를 바람
     * Fair Source License에 대해 처음 들어봄
          + FOSS보다 약간 더 제한적이지만, 하이퍼스케일러들이 클라우드에서 소프트웨어를 실행하면서 수익을 얻지 못하게 하려는 목적이 있음
     * 일반적인 오픈 소스 모델보다 이러한 라이선스의 장점을 설명할 수 있는 사람이 있는지 궁금함
          + Fair Source의 페이지와 FAQ를 읽었지만, 소프트웨어를 일시적으로 덜 자유롭게 만드는 것 외에 다른 각도를 이해하지 못함
     * 법률 전문가가 아니지만, 상업적 환경에서 사용하기에는 ""경쟁적 사용""의 정의가 매우 광범위하게 해석될 수 있어 위험해 보임
     * 이 라이선스의 맥락에서 경쟁이 무엇을 의미하는지 명확히 정의하는 것이 어려울 것 같음
          + 최근에 Unity나 Redis가 이러한 문제로 여러 번의 성명을 발표하며 혼란을 겪었던 기억이 있음
     * 왜 회사들이 AGPL로 모두에게 공개하고, 자신들에게는 독점 상업 라이선스로 공개하지 않는지 궁금함
          + AGPL은 Google과 AWS가 사용하는 것을 막을 수 있고, 상업 라이선스는 라이선스 사용자(자신들)가 상업화할 수 있게 함
     * ""Fair Source""에 대한 생각을 담은 팟캐스트 에피소드가 있음: https://changelog.com/podcast/586
     * 관련 정보: Keygen도 이제 Fair Source임: https://keygen.sh/blog/keygen-is-now-fair-source
     * Fair Source가 오픈 소스의 상위 집합인지 궁금함
          + 모든 오픈 소스 프로젝트는 소스가 공개되고, 오픈 소스 라이선스 하에 있으며, 경쟁하지 않는 한 누구나 사용할 수 있고 수정할 수 있음
"
"https://news.hada.io/topic?id=16337","CSS 그리드 영역그리드 영역

소개

     * CSS Grid는 2017년부터 모든 주요 브라우저에서 지원되고 있음
     * 그러나 2024년에도 여전히 많은 사람들이 grid template areas 기능을 사용하지 않음
     * 이 기사에서는 grid template areas의 간단함과 강력함을 설명하고자 함

CSS 명명된 그리드 영역

     * CSS Grid에서 각 그리드 영역을 이름으로 지정하고 CSS 전반에서 참조할 수 있음
     * 예를 들어, 두 개의 열이 있는 그리드 레이아웃을 정의하고 각 항목에 grid-area를 매핑할 수 있음

그리드 템플릿 영역 규칙

     * 정의된 영역은 직사각형 모양이어야 함
     * 모든 영역이 정의되어야 함

그리드 템플릿 구문

     * grid-template-areas 속성을 사용하여 그리드 영역을 정의해야 함
     * 여러 개의 영역 문자열을 사용할 수 있음
     * 단일 문자열은 1차원 레이아웃을 의미하고, 여러 문자열은 다차원 레이아웃을 의미함

CSS 명명된 그리드 라인

     * 그리드 라인을 고유한 이름으로 지정할 수 있음
     * 예를 들어, 3개의 열이 있는 그리드에서 각 라인을 이름으로 지정할 수 있음
     * 명명된 그리드 라인은 기본 라인 번호를 대체하지 않음

그리드 템플릿 영역의 사용 사례

     * 그리드 방향 반전: grid-template-areas를 사용하여 레이아웃 방향을 쉽게 변경할 수 있음
     * 헤더 레이아웃: grid-template-areas를 사용하여 헤더 레이아웃을 정의하고 반응형으로 만들 수 있음
     * 편집 레이아웃: 다양한 콘텐츠 유형을 포함하는 레이아웃을 쉽게 정의하고 변경할 수 있음

조건부 레이아웃과 CSS :has()

     * CSS :has() 선택자를 사용하여 요소의 존재 여부에 따라 레이아웃을 변경할 수 있음

다국어 지원 (LTR/RTL)

     * CSS Grid는 페이지 방향(LTR 또는 RTL)에 따라 레이아웃을 조정함
     * 이는 명명된 그리드 영역도 페이지 방향을 따름

그리드 영역과 DevTools

     * 모든 주요 브라우저는 그리드 영역에 대한 좋은 도구를 제공함 (Chrome, Safari, Firefox)
     * 각 브라우저는 그리드 영역을 시각화하는 방법이 다름

GN⁺의 정리

     * CSS Grid의 grid template areas 기능은 레이아웃을 시각적으로 이해하고 관리하는 데 유용함
     * 특히 팀원들이 레이아웃을 변경해야 할 때 유용함
     * 이 기사는 grid template areas의 간단함과 강력함을 설명하며, 이를 통해 더 많은 사람들이 이 기능을 사용하도록 유도하고자 함
     * 유사한 기능을 제공하는 다른 프로젝트로는 Flexbox가 있음

        Hacker News 의견

     * 애니메이션 데모에 흥미를 느꼈으나, CSS로 구현된 것이 아님
          + Flexbox를 배우고 만족했으며, Grid를 배울 필요성을 느끼지 못했음
          + Grid를 선호할 이유가 있지만, 실제로 필요성을 느끼지 못했음
          + 데이터 테이블에는 실제 테이블을 사용함
     * 이 기사는 Grid의 장점과 CSS 문법의 번거로움을 강조함
          + 두 가지 차원과 세 가지 매개변수(시작, 끝, 크기)가 있음
          + 각 매개변수를 선언하는 방법이 최소 세 가지 있음
          + 축약 속성 때문에 읽기 어려움
          + 다른 개발자의 Grid를 읽기 어려움
     * '1/3'이 분수가 아니라 1에서 3까지의 범위임
          + 왜 이런 문법을 선택했는지 이해할 수 없음
          + 프로그래밍에서 범위를 나타내는 더 좋은 문법이 있음 (예: 1..3)
     * Grid Garden과 Flexbox Froggy 관련
          + Grid Garden
          + Flexbox Froggy
     * Grid나 Flexbox를 이해하지 못했음
          + 마지막으로 잘 사용한 레이아웃 전략은 floats였음
          + 이 기사가 다음 레이아웃 디자인에 CSS Grid를 사용할 자신감을 줌
          + 잘 만들어진 기사에 감사함
     * 이 문서의 사전 소개 버전이 있는지 궁금함
          + 소개 부분에서 길을 잃었음
          + 'line number'가 무엇인지 이해하지 못했음
          + '1/3'과 '1/4' 같은 분수에서 막혔음
     * Jen Simmons의 Mondrian with auto flow를 강력 추천함
          + Jen Simmons Mondrian
          + 창 크기를 변경해보면 매우 멋짐
          + auto flow에서 간격을 감지하고 채우는 방법을 이해하고 싶음
     * 문법을 1/2와 3/4로 정의하는 이유가 궁금함
          + 1-2 또는 1->2 같은 문법이 더 이해하기 쉬울 것 같음
     * 인터랙티브 블로그 포스트를 좋아함
          + Grid 영역을 도구에서 실험해보는 것을 추천함
          + Grid Layoutit을 몇 년 동안 사용해왔으며, 간격 조정이 훨씬 쉬워짐
     * 처음으로 CSS Grid를 이해한 것 같음
          + 번호 매기기가 큰 도움이 되었음
          + 훌륭한 기사로 자주 참고할 것임
"
"https://news.hada.io/topic?id=16349","Show GN: 릴스 주고받는 친구에게 평가받는 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: 릴스 주고받는 친구에게 평가받는 앱

   친구와 릴스를 주고받는게 일상이 된 지금, 릴스 친구에게 평가를 받을 수 있는 앱입니다.

   평가는 다음의 5개 지표로 이뤄집니다.
     * 성실성: 얼마나 자주 릴스를 보내는가
     * 반응성: 내가 보낸 릴스에 얼마나 잘 반응하는가
     * 다양성: 얼마나 다양한 릴스를 보내는가
     * 음지성: 얼마나 음지스러운 릴스를 보내는가
     * 응용성: 현실에서 릴스의 영향을 얼마나 보여주는가

   평가를 받으면 개발자들이 좋아하는 육각형차트로 결과를 보여줍니다.

   많관부~
"
"https://news.hada.io/topic?id=16373","마이크 매직 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              마이크 매직 사망 소식

    Mike Mageek의 사망

     * IT 산업의 전설이자 탄트라 구루, 그리고 냉소적인 기술 타블로이드의 발명가인 Mike Magee가 74세의 나이로 사망함
     * Magee는 인쇄업자로 경력을 시작한 후 VNU Business Publications에서 PC Dealer와 VNU Newswire에서 일함
     * Newswire를 떠나 1994년 John Lettice와 함께 영국 최초의 인터넷 기반 IT 타블로이드인 The Register를 공동 설립함
     * The Register에서 컴퓨터 칩 보고에 집중하고 Lettice는 소프트웨어를 다룸
     * 2000년 심장마비를 겪고 수술 중 사망했으나 부활함. 이후 The Register의 편집 방향에 동의하지 않음을 공개적으로 밝힘
     * The Register를 떠나 The Inquirer를 설립함. The Inquirer는 적은 자금으로도 수익을 창출함
     * 2006년 VNU와의 웹 레이아웃 유사성 문제로 회의를 가짐. 같은 해 The Inquirer를 VNU에 매각함
     * 2009년 Daily Telegraph에서 기술 분야에서 가장 영향력 있는 영국인 50인 중 35위에 선정됨
     * 말년에도 심각한 질병에도 불구하고 계속 활동함

    Mike Mageek의 신비주의와 오컬트 관심

     * Alistair Crowley의 비서 Kenneth Grant와의 작업을 통해 신비주의와 오컬트에 관심을 가지게 됨
     * 1971년 오컬트 팬진 Azoth를 시작하고, 1973년에는 SOTHiS라는 더 야심찬 잡지를 시작함
     * Led Zeppelin 기타리스트 Jimmy Page와 접촉하게 됨
     * 1977년 인도에서 탄트라 구루인 HH Shri Gurudev Mahendranath를 만나 탄트라 전통에 관심을 가지게 됨
     * Mahendranath로부터 구루의 칭호와 학생 그룹을 형성할 권한을 받음
     * 이후 ""Arcane Magical Order of the Knights of Shambhala"" (AMOOKOS)를 형성함
     * 1980년 Mahendranath가 Magee에게 AMOOKOS를 형성할 권한을 준 적이 없다고 주장하며 그룹이 분열됨
     * Magee는 자신의 출판사를 설립하여 인도 탄트라 텍스트의 번역을 출판함

    개인 생활

     * 1978년 Jan Bailey와 결혼하여 아들 Tamlin을 둠

    GN⁺의 정리

     * Mike Magee는 IT 산업과 오컬트 분야 모두에서 큰 영향을 미친 인물임
     * 그의 경력은 The Register와 The Inquirer 같은 중요한 기술 타블로이드의 설립으로 이어짐
     * 신비주의와 탄트라에 대한 그의 관심은 서구에 탄트라 가르침을 전파하는 데 중요한 역할을 함
     * 그의 이야기는 기술과 신비주의의 경계를 넘나드는 독특한 삶을 보여줌

        Hacker News 의견

     * Jimmy Page가 Magee에게 대출을 요청했지만 갚지 않았음
     * The Register는 기술 기사를 읽을 가치가 있게 만드는 몇 안 되는 웹사이트 중 하나임
     * The Register를 오랫동안 읽어왔지만 그 뒤의 사람들에 대해 생각해본 적이 없었음
     * El Reg는 나이를 먹으면서도 우아하게 변해왔고, 직원들은 매우 지식이 풍부함
     * 그의 이야기는 전형적인 클래식임
     * The Inquirer도 꽤 즐거웠음
     * Simon Travaglia가 여전히 BOFH 시리즈를 쓰고 있음
     * 그는 BOFH의 간접적인 관리 감독자였음
     * IT와 인터넷에 대한 그의 기여를 사랑했음
     * ""The Rodgister""는 ""Biting the Hand That Feeds IT""라는 슬로건을 사용했음
     * 저널의 운명은 변하지만, el Reg의 정점은 Andrew Orlowski와 Lester Haines 시대였음
          + Orlowski는 컴퓨팅 역사에 대해 잘 알고 글을 잘 씀
          + Haines는 지식이 풍부하면서도 유머러스하게 글을 썼음
     * Haines의 상실은 큰 충격이었음
     * 새로운 사람이 나타나 그 정신을 되살릴 수 있을지도 모름
     * Mike Magee의 글을 90년대부터 읽어왔음
     * Magee는 현재 Intel CEO인 Pat Gelsinger와 친구였음
          + 90년대 Intel 회의에서 Magee가 불편한 질문을 했고, Gelsinger가 그를 멈추기 위해 테이블 아래에서 발로 찼음
          + 그 이후로 Magee는 Gelsinger를 ""Kicking"" Pat Gelsinger라고 불렀음
     * Magee는 Charlie Demerjian의 경력을 시작하게 했음
     * 2000년 12월 Magee는 심장마비를 겪었고, 수술 중 사망했다가 다시 살아났음
     * 그는 The Register의 편집 방향에 동의하지 않았다고 공개적으로 밝혔음
"
"https://news.hada.io/topic?id=16332","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   집에 콕 박혀 게임합니다~ 너무 덥네요

   달리기!
"
"https://news.hada.io/topic?id=16377","PgQueuer – PostgreSQL을 작업 대기열로 이용하는 파이썬 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PgQueuer – PostgreSQL을 작업 대기열로 이용하는 파이썬 라이브러리

     * PgQueuer는 PostgreSQL의 견고함을 활용한 Python용 미니멀/고성능 작업 큐 라이브러리
     * 단순성과 효율성을 위해 설계되었으며, PostgreSQL의 LISTEN/NOTIFY를 사용하여 작업 큐를 손쉽게 관리함

  특징

     * 간단한 통합: PostgreSQL을 사용하는 기존 Python 애플리케이션과 쉽게 통합할 수 있음
     * 효율적인 동시성 처리: PostgreSQL의 FOR UPDATE SKIP LOCKED를 사용하여 신뢰할 수 있고 동시적인 작업 처리를 가능하게 함
     * 실시간 알림: LISTEN과 NOTIFY를 활용하여 작업 상태 변경에 대한 실시간 업데이트를 제공함

    GN⁺의 정리

     * PgQueuer는 PostgreSQL의 LISTEN/NOTIFY 기능을 활용하여 Python 애플리케이션에서 작업 큐를 효율적으로 관리할 수 있게 해줌.
     * 간단한 통합과 효율적인 동시성 처리를 제공하여 기존 시스템에 쉽게 적용할 수 있음.
     * 실시간 알림 기능을 통해 작업 상태를 즉시 확인할 수 있어, 작업 관리가 용이함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 RQ, Celery 등이 있음.

        Hacker News 의견

     * Graphile Worker 라이브러리와의 비교에 대한 질문
     * PostgreSQL 기반 작업 큐 라이브러리들이 공통 스키마를 공유할 가능성에 대한 생각
          + Elixir의 Oban 팬임
          + 여러 언어에서 Sidekiq 호환 라이브러리가 있는 것처럼 PostgreSQL 기반 작업 큐도 유사한 접근이 유익할 것임
          + Rust로 핵심 작업 큐 라이브러리를 개발하고 언어별 바인딩을 고려할 수 있음
     * Postgres를 모든 것에 사용하는 것을 지지하며, 프로젝트에서 이를 극대화하고 있음
          + 다단계 파이프라인, 팬 아웃 및 축적을 수행하는 Postgres 작업 큐를 원함
          + 구조적 관계형 데이터베이스가 이를 모델링하는 데 특히 적합함
          + listen/notify의 최대 페이로드 크기 8k가 제한적임
          + 스트리밍 테이블과 풍부한 타입 지원을 원함
     * Postgres에서 큐를 구현하는 것에 대한 좋은 PostgresFM 에피소드 추천
     * PgQueuer가 Postgres RPC 호출, 트리거 및 cronjobs(pg_cron)을 잘 통합함
     * River 라이브러리도 참고할 만함
          + 예약된 작업 등을 지원함
          + 디버깅을 위한 UI도 제공함
     * Broadcaster를 PUB/SUB 작업에 사용 중임
     * MySQL에서 가장 간단한 작업 큐 예시
          + update job_table set key=value where ... limit 1 구문 사용
          + 간단하고 원자적임
          + PostgreSQL은 update ... limit 구문을 허용하지 않음
     * MySQL 사용자지만 PostgreSQL을 탐구 중임
          + 많은 기능을 기본적으로 제공함
          + 매우 흥미로운 도구임
     * Procrastinate 라이브러리도 있음
          + PostgreSQL의 LISTEN/NOTIFY를 사용함(옵션으로 끌 수 있고 폴링 사용 가능)
          + 동기 및 비동기 작업, 주기적 작업, 재시도, 작업 잠금, 우선순위, 작업 취소/중단, Django 통합(옵션)을 지원함
          + Procrastinate의 공동 유지보수자임
"
"https://news.hada.io/topic?id=16279","Show HN: Flutter를 통한 Rust GUI 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show HN: Flutter를 통한 Rust GUI 라이브러리

     * Rust는 8년 동안 ""가장 원하는 프로그래밍 언어""로 선정되고, 많은 사람들이 Rust로 GUI 프로그램을 작성하고 싶어함.
     * Flutter와 flutter_rust_bridge를 활용한 접근 방식을 공유
     * 장점
          + Flutter는 인기 있고 성숙한 플랫폼으로, 많은 개발자와 유명 브랜드가 사용 중이고, 큰 생태계를 가지고 있어 원하는 기능을 쉽게 구현할 수 있음
          + ""핫 리로드"" 기능으로 UI 개발이 빠르고, 크로스 플랫폼을 지원하여 동일한 코드베이스로 여러 플랫폼에서 실행 가능함
     * 단점
          + 이 접근 방식은 100% 순수 Rust가 아님
               o 그러나 이것은 매크로를 사용하거나 HTML/CSS/Slint와 같은 다른 언어를 사용하여 사용자 정의 DSL을 작성하는 다른 많은 Rust UI와 유사
          + 웹 플랫폼에 대한 비판이 있음
               o 정적인 웹 페이지보다는 웹 및 기타 플랫폼(예: Google 어스, Rive의 애니메이션 편집기 등)의 '앱'에 더 적합
          + Flutter는 많은 보일러플레이트 코드가 필요함

  flutter_rust_bridge란?

     * 두 언어 간의 브리지를 만들어 하나의 언어처럼 작동하게 함
     * 다양한 타입, &mut, async, 트레이트, 결과, 클로저 등을 자동으로 변환함
     * Rust GUI를 Flutter로 구현하는 것 외에도 다양한 사용 사례가 있음
       = Flutter에 임의의 Rust 라이브러리를 사용하거나 알고리즘과 같은 코드를 Rust에서 작성하고 다른 코드를 Flutter에서 작성하는 등

        Hacker News 의견

     * 몇 년 동안 앱을 개발하면서 사용해왔으며, 전반적으로 만족스러웠음
          + v1에서 v2로 업그레이드가 어렵지 않았고, v2는 많은 유용한 기능과 개선된 코드 생성 경험, tokio async 지원 등으로 큰 변화를 줌
          + Rust로 비즈니스 로직을 작성하고 Dart를 프론트엔드로 사용하는 것이 매우 효과적이었음
          + Flutter/Dart가 React보다 더 이해하기 쉽다고 생각함
          + FRB 작업을 한 @fzyzcjy에게 감사의 말을 전함
     * UI를 Rust 대신 Dart로 작성하는 것의 장점을 잘 모르겠지만, flutter_rust_bridge의 팬임
          + fzyzcjy와 커뮤니티가 Dart에서 Rust 코드를 원활하게 호출할 수 있게 한 작업이 Flutter 앱에 큰 자산이 됨
          + 주말 동안 Flutter로 ImageOptim을 재구성했으며, Rust 이미지 라이브러리를 사용해 더 강력하고 빠른 앱을 만들 수 있었음
          + Rust 통합 덕분에 앱이 더 능력 있고 빠르게 동작함
     * 칭찬할 만한 노력임. 현재 Tauri를 사용 중이며, 두 가지의 장단점에 대해 궁금해함
     * 데스크탑 UI를 위해 Flutter를 사용하고 백엔드를 위해 Rust를 사용함
          + 브리지 대신 gRPC를 사용해 두 부분을 분리함
          + 이 접근 방식은 언어에 구애받지 않으며, 프론트엔드에서 백엔드를 모킹하기 위한 더 깔끔한 인터페이스를 제공한다고 생각함
          + UI와 백엔드를 다른 기기에 배치해 진정한 클라이언트/서버 아키텍처를 구현할 수 있음
          + 단점은 인터페이스가 더 장황할 수 있다는 점임
     * 잘했음. rust_flutter_bridge에 대해 좋은 이야기만 들었음
          + Flutter가 모바일 네이티브(Java, Swift)와 비교해 얼마나 부피가 큰지(최종 앱 크기)와 UI 성능에 대해 궁금해함
     * Flutter의 UI 구축 접근 방식을 즐겼지만, Dart는 별로 좋아하지 않았음
          + 이론적으로 UI 전용 프로그래밍 언어를 만들 수 있지 않을까 생각함
          + 주요 프로그래밍 언어와 인터페이스할 수 있는 언어, 예를 들어 protobuf의 IDL 형식처럼 데이터를 정의하는 대신 사용자 인터페이스를 선언하는 언어
          + QT와 XAML이 떠오르지만, QT는 오픈 소스가 아니며 XAML은 오랫동안 사용되지 않은 것 같음
     * Google의 재료 디자인과 폭죽 효과가 가장 좋은 모습은 아니라고 생각함
     * 접근성(a11y) 지원에 대해 궁금해함
          + 문서에서 이에 대한 정보를 찾지 못했지만, 2024년에 접근성 지원 없이 GUI 키트를 출시하는 것은 상상할 수 없으므로 왜 언급하지 않았는지 궁금해함
     * Chrome 셸이나 웹 위젯에 의존하는 것보다 훨씬 나음, 노력에 찬사를 보냄
     * 흥미로움. IIUC 이것이 소스 간 번역을 사용해 이루어졌는지 궁금해함
          + 문서가 사용자에게 명확하게 작성되어 인상적임
          + 접근 방식과 wasm 기반 Rust 웹 프레임워크와의 비교에 대해 알고 싶음
          + Rust와 Flutter를 결합하는 한 가지 장점은 Flutter가 이미 전체 프레임워크이며 서버와 클라이언트 측 간에 코드와 데이터 구조를 공유할 수 있다는 점임
"
"https://news.hada.io/topic?id=16318","Stipple Effect – 애니메이션/스크립팅을 지원하는 게임 아트 제작용 픽셀 에디터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Stipple Effect – 애니메이션/스크립팅을 지원하는 게임 아트 제작용 픽셀 에디터

     * 다양한 워크플로우를 이용하기 편하게 하여, 비디오 게임용 아트 애셋 및 기타 아트워크를 빠르게 만들수 있도록 제작됨
     * 가볍고 배우기 쉬우며 사용하기 간편하지만 상당한 깊이와 복잡성을 구현할 수 있음
     * 지루하고 반복적인 작업을 자동화하는 데 활용할 수 있는 풍부한 기능의 스크립팅 API 제공

주요 기능

     * 레이어와 프레임 간의 연결 및 연결 해제 기능
     * 브러시, 연필, 그라디언트 도구를 통한 Primary 색상과 Secondary 색상의 조합
          + 디더링 모드, 블렌드 모드, 노이즈 모드 지원
     * 세분화된 실행 취소 및 재실행 기능 등의 상태 관리
     * 어니언 스키닝을 통한 애니메이션 재생 및 실시간 편집
     * 프로젝트를 프레임으로 분할하거나 스프라이트 시트로 결합하는 스플릿/스티치 기능
     * 팔레트 가져오기/내보내기, 팔레트화, 프로젝트 색상 추출 기능
     * 픽셀 퍼펙트 선택을 위한 선택 도구 및 직관적이고 강력한 윤곽선 유틸리티
     * 픽셀 그리드 활성화/비활성화 및 셀 크기 조정 기능

스크립팅

     * 자동화, 맞춤형 미리보기, 색상 변환을 위한 스크립팅 지원
     * VS Code 확장 프로그램 제공 (구문 강조)
"
"https://news.hada.io/topic?id=16288","저축과 14년을 들여 마침내 극복할 관절염","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        저축과 14년을 들여 마침내 극복할 관절염

  14년의 노력 끝에 관절염을 이길 수 있게 됨

     * Simon Westbrook가 2011년 Pfizer에서 해고되었을 때, 해외에서 높은 연봉을 받는 직업을 찾는 것이 더 쉬웠을 것임
     * 하지만 그는 ""종이 위의 아이디어""가 ""가장 중요한 약물 중 하나""가 될 수 있다고 믿었음
     * 그는 아내 Dominique의 지원을 받아 자신의 생명공학 회사를 시작하기로 결심함
     * 이 과정은 쉽지 않았음. 부부의 저축을 다 써버리고, 주택 담보 대출을 갚기 위해 고군분투하며, 1972년식 오렌지색 VW 캠핑카에서 잠을 자기도 했음

  GN⁺의 정리

     * 이 기사는 Simon Westbrook가 자신의 아이디어를 현실로 만들기 위해 겪은 도전과 성공을 다루고 있음
     * 관절염 치료제 개발은 전 세계적으로 6억 명의 환자에게 혜택을 줄 수 있음
     * 이 기사는 혁신적인 아이디어와 끈기가 어떻게 중요한 의약품 개발로 이어질 수 있는지를 보여줌
     * 유사한 기능을 가진 다른 프로젝트로는 관절염 치료를 위한 다양한 생명공학 연구가 있음

        Hacker News 의견

     * 연구 결과는 임상적 성공보다는 임상 3상 시험으로 넘어가야 할 필요성을 시사함
          + 연구 요약: 신경 성장 인자 β(NGF)는 신경 발달과 통증 전달에 중요한 단백질이며, 골관절염(OA) 통증과 관련이 있음
          + 연구 방법: 무릎 관절 성형술을 받은 43명의 환자에게서 활액을 채취하여 다양한 신경 영양 인자와 염증 표지자를 측정함
          + 연구 결과: β-NGF와 시각적 아날로그 척도(VAS) 통증 점수 간의 양의 상관관계가 발견됨
          + 결론: 내인성 또는 절단된 sLNGFR이 OA 통증 조절에 참여할 수 있으며, 추가 연구가 필요함
     * 만성 건강 상태를 다루면서 ""이제 곧 나을 것""이라고 가정하지 말아야 함을 반복적으로 배움
          + 가족과 친구들에게 말하면 결국 다시 악화되어 바보처럼 보임
          + 이제는 오랜 기간 동안 문제가 없을 때만 말할 수 있을 것 같음
     * 그는 관절염을 앓고 있는 것이 아니라, 모든 저축을 투자해 약물 스타트업 회사를 창립한 기업가임
     * 식이요법으로 관절염을 치료한 사람이 있는지 궁금함
          + 가공식품을 끊으면 며칠 동안 기분이 훨씬 좋아짐
          + (관절염이 있는지 확실하지 않지만 엉덩이와 허리가 매우 아픔)
     * 약물은 Pfizer에서 일할 때 발견한 분자를 기반으로 하며, 한 달에 한 번 EpiPen 스타일 주사로 투여됨
          + 보호 과정을 복원하고 영향을 받은 조직을 재생시킴
          + 통증 신호를 뇌로 전달하는 신경 세포를 지원하는 화합물을 차단함
          + 신경을 마비시켜 조직을 복원하는 것인지 의문이 듦
          + 잘못된 보도인지 아니면 실제로 그런 것인지 궁금함
     * 관절염을 앓기 시작하면서 식이요법과 관련된 도움이 되는 것이 있는지 궁금함
          + 지방이 많은 생선이 통증을 줄이는 데 좋다는 것을 읽었지만, 약물에 의존하기 전에 도움이 되는 다른 음식이나 생활 습관 변화가 있는지 궁금함
     * 소고기: 통증 완화제일 뿐, 치료법은 아님
     * 유료 벽으로 막혀 있음. 이 정보가 얼마나 신뢰할 수 있는지 궁금함
          + 젊은 환자로서
     * 고양이가 가끔 심한 관절염 발작을 겪을 때 Solensia(다른 NGF 타겟 약물, 단일 클론 항체 사용)를 투여함
          + 12시간 이내에 거의 걷지 못하던 고양이가 완전히 회복되어 다시 잘 움직이게 됨
"
"https://news.hada.io/topic?id=16404","DORA는 DORA 그 이상입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           DORA는 DORA 그 이상입니다

     * DORA 핵심 지표: 배포 빈도, 변경 리드 타임, 변경 실패율, 서비스 복구 시간
     * DORA 연구 프로그램은 ‘DORA Core’라는 모델 공식화
     * DORA Core는 실무자 상황에 가이드로 사용하도록 만듦
     * DORA Core 다이어그램을 보면, 각 요소가 다른 요소에 기여하는 방식 알 수 있음
     * 예를 들어, 문서 품질은 그것이 영향을 미치는 모든 범위의 기술 역량 예측
     * 이러한 기술 역량은 Shift-left 보안과 지속적 전달에 기여
     * 지속적 전달은 생성적 조직 문화 조성에 도움이 됨
     * 변경 승인 간소화하면, 소프트웨어 전달 성과 예측할 수 있음
     * 소프트웨어 전달 성과, 4가지 DORA 지표는 중요하지만 그게 전부가 아님
"
"https://news.hada.io/topic?id=16296","미국 정부, 'unsubscribe' 버튼 클릭을 쉽게 만드는 방안 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미국 정부, 'unsubscribe' 버튼 클릭을 쉽게 만드는 방안 추진

    미국 정부, '구독 취소' 버튼 클릭을 더 쉽게 만들기 위한 노력

     * 소비자 보호를 위한 새로운 정부 이니셔티브
          + 미국 연방 기관들이 소비자 보호를 위해 불필요한 멤버십 및 반복 결제 서비스를 쉽게 취소할 수 있도록 새로운 규정을 도입하고 있음
          + ""Time Is Money""라는 새로운 정부 이니셔티브는 헬스케어, 피트니스 멤버십, 미디어 구독 등 다양한 산업에 걸쳐 새로운 규정과 추가 규정 도입을 약속함
     * 기업의 서비스 취소 방해 행위 단속
          + 백악관 국내 정책 고문인 Neera Tanden은 기업들이 서류 작업, 대기 시간, 일반적인 불편함을 통해 소비자의 돈과 시간을 낭비하게 하고 있다고 언급함
          + 이러한 불편함은 우연히 발생하는 것이 아니며, 큰 재정적 영향을 미침
     * 새로운 연방 통신 위원회(FCC) 조사
          + 월요일부터 연방 통신 위원회는 통신 회사들이 구독 취소를 가입만큼 쉽게 할 수 있도록 요구하는 규정을 도입할지 여부를 조사함
     * 연방 무역 위원회(FTC)의 '클릭으로 취소' 규정
          + 2023년 3월, 연방 무역 위원회는 기업들이 고객이 구독을 시작한 것만큼 쉽게 구독을 종료할 수 있도록 하는 규정 제정을 시작함
     * 건강 보험 회사와의 상호작용 개선
          + 노동부와 보건복지부는 건강 보험 회사와 그룹 건강 플랜이 고객과의 상호작용을 개선하도록 요청하고 있음
          + 앞으로 몇 달 동안 소비자와 건강 관리 시스템 간의 상호작용을 개선할 추가 기회를 식별할 예정임
     * 기존 소비자 경험 개선 이니셔티브
          + 10월에 FTC는 콘서트 티켓, 호텔 객실, 유틸리티 청구서의 총 비용을 숨기거나 허위로 표시하는 '숨겨진 및 가짜 수수료'를 금지하는 규정을 발표함
          + 4월에 교통부는 항공편 지연 시 자동으로 현금 환불을 발행하고, 수하물 또는 예약 취소 수수료를 더 잘 공개하도록 하는 규정을 최종 확정함
     * Adobe 소송
          + 6월에 법무부는 FTC의 추천으로 소프트웨어 제조업체 Adobe와 두 명의 임원을 상대로 소송을 제기함
          + Adobe는 첫 해에 취소할 경우 수백 달러의 비용이 발생할 수 있다는 사실을 제대로 공개하지 않고 소비자에게 연간 유료 월간 구독을 권장한 혐의를 받고 있음
     * 기업의 반응
          + Adobe의 법률 고문인 Dana Rao는 회사의 사업 특성에 대한 소송의 설명에 동의하지 않으며, FTC의 주장을 법정에서 반박할 것이라고 밝힘
          + 일부 비즈니스 옹호자들은 정부의 전반적인 노력에 반대하고 있음

    GN⁺의 정리

     * 이 기사는 미국 정부가 소비자 보호를 위해 구독 취소를 더 쉽게 만들기 위한 다양한 규정을 도입하고 있는 내용을 다루고 있음
     * 이러한 규정은 소비자들이 불필요한 멤버십 및 반복 결제 서비스를 쉽게 취소할 수 있도록 돕는 것을 목표로 함
     * Adobe와 같은 기업이 이러한 규정에 반발하고 있으며, 일부 비즈니스 옹호자들은 정부의 노력이 기업의 가격 구조를 과도하게 관리하려는 시도라고 비판함
     * 이 기사는 소비자 보호와 기업의 자유 사이의 균형을 어떻게 맞출 것인가에 대한 논의를 촉발할 수 있음

        Hacker News 의견

     * ""가입만큼 해지가 쉬워야 한다""는 의견을 지지함
          + 이는 악의적인 행동을 막고 정직한 회사 운영에 지장을 주지 않음
          + 은행들도 비슷한 행동을 보이며, 일부는 진보적이지만 일부는 비효율적임
     * 스팸 이메일이 증가하고 있음
          + 특히 평판이 좋은 회사들이 이런 행동을 함
          + 구독 취소는 더 쉬워졌지만, 일부 회사는 여전히 이메일을 보냄
          + 유일하게 Pitviper sunglasses의 마케팅 이메일은 재미있어서 허용함
     * 미국의 세금 처리 방식이 소비자에게 불리함
          + 세금이 계산대에서만 반영되어 불편함
     * 정부가 일반 사람들의 삶의 질을 향상시키는 정책을 시행하는 것이 좋음
          + 캘리포니아에서는 구독 취소가 매우 쉬워짐
          + 다른 주에서도 캘리포니아 주소를 사용하면 숨겨진 구독 취소 버튼을 사용할 수 있음
     * Experian이 구독 취소 서비스를 제공하는 것이 아이러니함
          + 자녀의 신용 보고서를 동결하려면 복잡한 절차를 거쳐야 함
     * 마케팅 이메일의 '구독 취소' 링크를 클릭하지 않음
          + 대부분의 링크가 데이터 수집 목적으로 사용됨
          + 이메일 클라이언트를 설정하여 HTML 자동 다운로드를 막는 것이 좋음
     * 미국 정부는 실제로 스팸 방지법이 필요함
          + 캐나다에서는 명시적인 동의 없이 마케팅 이메일을 보내는 것이 불법임
     * 정부는 '버튼'을 의무화하기보다는 간단한 프로토콜 준수를 요구해야 함
          + 각 사이트마다 버튼 위치가 다를 수 있음
          + 기술적 역량 부족으로 인해 비효율적인 결정이 내려짐
     * 계정 삭제가 더 쉬워졌으면 좋겠음
          + 지원 FAQ를 읽고 이메일을 보내야 하는 번거로움이 있음
"
"https://news.hada.io/topic?id=16351","X, "예스 안하면 사직임" 이메일 최후 통첩후 해고된 아일랜드 직원에게 €550k 배상 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          X, ""예스 안하면 사직임"" 이메일 최후 통첩후 해고된 아일랜드 직원에게 €550k 배상 명령

     * Elon Musk의 X(구 Twitter)가 아일랜드 직원의 부당 해고 사건에서 배상 명령을 받음
          + 아일랜드의 고용 분쟁을 중재하는 국가 기관인 Workplace Relations Commission이 €550k($602k, 약 8억원)을 배상하라고 명령함
          + 이는 해당 기관이 지금까지 내린 판결 중 가장 큰 금액임

  사건 배경

     * Gary Rooney는 2013년 9월부터 회사에 근무했으며, 2022년 12월 해고 당시 고위 구매 담당자였음
     * Musk의 이메일에서 ""새로운 근무 조건에 동의하지 않으면 퇴사로 간주""된다고 명시됨
     * Rooney는 이메일에서 ""예""를 클릭하지 않았고, 회사는 이를 자발적 퇴사로 간주함

  판결 내용

     * 위원회는 Rooney가 자발적으로 퇴사한 것이 아니라고 판단함
     * ""예""를 클릭하지 않은 것이 퇴사 행위로 간주될 수 없다고 판결함
     * Rooney의 변호사 Barry Kenny는 ""이 나라나 관할 구역에서 어떤 대기업도 직원들을 이런 식으로 대하는 것은 용납될 수 없다""고 언급함

  추가 소송 및 영향

     * Musk가 플랫폼을 인수한 이후 여러 소송이 제기됨
     * 직원들이 약속된 퇴직 혜택을 받지 못했다는 주장도 있음
     * 인수 이후 더블린의 직원 수는 약 500명에서 크게 감소함

  WRC의 판결

     * WRC는 73페이지에 달하는 판결문에서 이메일이 ""Twitter의 급격한 변화 시기에, 인수와 관련된 불일치하고 모순적이며 혼란스러운 커뮤니케이션의 맥락에서"" 발송되었다고 명시함
     * X는 즉각적인 논평 요청에 응답하지 않음
     * 회사는 42일 이내에 노동 법원에 항소할 수 있음

    GN⁺의 정리

     * 이 기사는 Elon Musk가 인수한 X(구 Twitter)에서 발생한 부당 해고 사건과 관련된 내용을 다루고 있음
     * 아일랜드의 고용 분쟁 중재 기관이 역사상 가장 큰 배상금을 명령한 사건으로, 직원 권리 보호의 중요성을 강조함
     * Musk의 경영 방식과 관련된 여러 소송이 제기되고 있으며, 이는 기업의 인수 및 경영 변화 시 발생할 수 있는 문제를 보여줌

   일론 머스크가 과연 피고인이나 참고인 신분으로 다른 나라 법정에 서게되는 날이 올까요? 다국적기업의 최고경영자가 전사 이메일로 다른 나라 직원에게 저런 식의 통보를 했다면 충분히 귀책사유가 있는 걸로 보이는 데요

   귀책사유에 한국은 제외입니다.
"
"https://news.hada.io/topic?id=16357","판사의 콘텐츠 명령으로 인해 브라질에서 운영 종료를 발표한 X","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   판사의 콘텐츠 명령으로 인해 브라질에서 운영 종료를 발표한 X

        Hacker News 의견

     * 브라질에 대한 배경 지식이 필요하면 NYT의 2022년 기사 추천
          + ""To Defend Democracy, Is Brazil’s Top Court Going Too Far?"" 기사에서 현재 이슈의 중심에 있는 판사에 대해 다룸
          + Mr. Moraes 판사가 소셜 미디어 게시물로 인해 재판 없이 5명을 구속하고, 수천 개의 게시물과 비디오를 삭제 명령한 내용 포함
          + Rumble은 1년 넘게 브라질에서 차단되었고, WhatsApp과 Telegram도 여러 번 차단된 적 있음
     * 미디어 플랫폼 X가 브라질에서 ""검열 명령"" 때문에 즉시 운영 중단 발표
          + Elon이 다른 나라의 검열 명령을 따랐는데, 이번 경우는 왜 다른지 의문 제기
     * 국제 기업들은 단일 관할 구역을 선택하고, 서버와 직원을 그곳에 두고, 다른 나라의 차단 요청에 맞서 싸워야 한다는 의견
          + Gibson의 ""데이터 피난처"" 개념이 처음에는 어리석게 보였지만, 예견력이 있었음을 인정
     * Xitter가 스팸과 가짜 뉴스로 가득 차 있음
          + Elon이 회사를 모든 것이 허용되는 방향으로 이끌었고, 상황이 악화됨
          + Xitter가 개선되지 않으면 법적 시스템이 개입해야 함
          + Elon이 회사를 폐쇄하고, 수백 명을 해고하며, 다리들을 불태우는 중
          + 모두가 손해를 보는 권력 이동임
     * Twitter가 일부 정부 검열에만 반대하는 것 같음
          + Musk는 절대적인 표현의 자유 지지자가 아니며, 자신이 좋아하는 발언을 홍보하고 싫어하는 발언을 억압함
     * X가 반민주적 콘텐츠와 관련된 계정을 삭제하지 않아 벌금을 물게 됨
          + 일부 계정은 브라질 외부에 거주하는 사람들이었고, 브라질 외부에서 읽히는 경우도 있었음
          + 법원이 브라질 내 계정에만 제한하는 더 합리적인 요청을 했어야 한다는 의견
     * 브라질은 지난 5년 동안 사실상 사법 독재 하에 있음
          + 언론과 미디어가 이를 외면하거나 적극적으로 박해를 도왔음
     * 기사를 읽으면 X가 법적 명령을 따르지 않아 위협이 발생한 것 같음
     * 브라질에서 일어나는 일은 북미와 많이 다름
          + 캐나다인으로서 2년 동안 브라질에 살지 않았다면 믿기 어려웠을 것
          + 부패와 비공식 규칙으로 가득 찬 복잡한 시스템임
          + 북미에서 쉬운 일이 브라질에서는 매우 어려움
"
"https://news.hada.io/topic?id=16374","마르코프 체인, LLM보다 더 재미난 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        마르코프 체인, LLM보다 더 재미난 기술

마르코프 체인이란 무엇인가

     * LLMs(대형 언어 모델)이 처음 등장했을 때, 사람들은 이를 매우 똑똑한 마르코프 체인이라고 설명했음
     * 요즘 사람들은 마르코프 체인보다 LLMs에 더 익숙함
     * 마르코프 체인은 매우 작은, 매우 단순한, 매우 순진한 LLM이라고 할 수 있음
     * 마르코프 체인은 현재 문맥을 기반으로 다음 단어를 예측하지만, 의미론, 차원성, 기타 복잡한 벡터 수학을 고려하지 않음
     * 마르코프 체인은 원시적인 통계 모델임
     * 휴대폰 키보드의 ""다음 단어 제안"" 기능은 일반적으로 마르코프 체인을 사용함
     * 마르코프 체인은 실행 비용이 저렴하고 사용자의 텍스트 스타일에 맞게 쉽게 업데이트할 수 있음
     * LLMs와 마르코프 체인의 작동 방식을 깊이 있게 설명할 수 있지만, 여기서는 마르코프 체인이 LLMs보다 작업 수행 능력이 떨어진다는 것만 알면 됨

재미란 무엇인가

     * 유머는 진지하지 않은 놀라움에 관한 것임
     * 최고의 농담은 즐겁고 중요한 ""스냅""을 포함함
     * ""스냅""은 놀라움에서 오는 충격을 의미함
     * 놀라움이 적을수록 덜 웃김
     * 농담을 많이 들으면 덜 웃기게 되는 이유임
     * ""랜덤"" 유머는 예측 가능성이 예측 가능하기 때문에 웃기지 않음
     * 농담 작성은 패턴을 위반하는 것에 관한 것임
     * ""장면의 실현""을 통해 스냅을 강화할 수 있음
     * 더 독창적이거나 묘사적인 언어를 사용하면 장면이 더 현실적으로 보임
     * 농담은 다양하고 유머는 주관적임

LLMs의 예측 가능성

     * 문장을 성공적으로 예측하려면 많은 문맥이 필요함
     * LLMs는 많은 문맥을 가지고 있음
     * LLMs는 많은 수학적 계산을 통해 가장 가능성 있는 다음 토큰을 찾음
     * ""더 나은"" LLM은 더 예측 가능함
     * LLMs는 창의적인 글쓰기에는 적합하지 않음
     * LLMs는 평균적인 결과를 생성함
     * 농담을 생성하려면 LLM이 놀라움을 주어야 함
     * 좋은 LLM은 이를 잘 하지 않음
     * LLMs는 예술적 표현에 적합하지 않음
     * LLMs는 흥미로운 개념을 놓칠 수 있음
     * 이 프레임워크를 통해 새로운 언어 모델을 만들 수 있을 것임

왜 이것이 흥미로운가

     * 이는 더 깊은 무언가를 나타냄
     * 이는 영혼 대 기계의 논쟁이 아님
     * 이는 모델의 내재된 결함을 보여줌
     * ChatGPT의 메시지는 고등학교 에세이처럼 보임
     * 이는 평균적인 출력을 재현한 것임
     * 이는 성격이 제거되고 학문적 엄격함으로 강화된 것임
     * 이는 밋밋하고 기업적인 말투임
     * 가짜 아마존 리뷰를 쉽게 식별할 수 있음
     * LLM 감지 모델은 곧 성격을 검사해야 할 것임

GN⁺의 정리

     * 이 글은 마르코프 체인과 LLMs의 차이점을 설명하고, 유머의 본질을 탐구함
     * 마르코프 체인은 단순한 통계 모델로, LLMs보다 예측 능력이 떨어짐
     * 유머는 진지하지 않은 놀라움에 기반하며, 농담 작성은 패턴을 위반하는 것에 관한 것임
     * LLMs는 예측 가능성이 높아 창의적인 글쓰기에는 적합하지 않음
     * 이 글은 LLMs의 한계를 보여주며, 새로운 언어 모델의 가능성을 제시함

        Hacker News 의견

     * 몇 년 전 사이드 프로젝트를 하면서 같은 결론에 도달했음
          + AWS 블로그 게시물을 생성하는 사이트를 만들었음
          + 마코프 체인 생성기를 사용해 AWS 발표 게시물을 학습시켰음
          + HTML과 CSS를 복사해 Python과 JS로 결합했음
          + 결과가 꽤 재미있었음
          + GPT를 사용해 업그레이드하려 했으나 덜 재미있었음
          + 현대 LLM은 너무 현실적이라서 재미가 덜함
          + 초기 마코프 생성기의 유머는 터무니없음에서 나왔음
          + 현대 LLM은 가끔 틀리지만 터무니없지는 않음
     * Claude 3.5 Sonnet에게 마코프 체인이 LLM보다 더 재미있다는 주제로 10개의 짧은 농담을 작성해달라고 요청했음
          + 마코프 체인이 도로를 건넌 이유는 예측 불가능성의 다른 쪽으로 가기 위해서임
          + LLM과 마코프 체인이 바에 들어갔을 때, LLM은 통계적으로 가능한 음료를 주문하고 마코프 체인은 치즈로 만든 전등갓을 주문함
          + 마코프 체인이 아빠 농담을 하면 ""Mark-ov Twain""이라고 부름
          + LLM이 전구를 갈아끼우는 데 20분 동안 최적의 방법을 설명함
          + 마코프 체인이 ""Markov chain reaction of nonsensical hilarity""라고 말함
          + LLM, 마코프 체인, GPT-4가 바에 들어갔을 때, GPT-4는 떠나고 LLM은 윤리 문제를 논의하며 마코프 체인은 스파게티로 만든 자전거를 주문함
          + LLM의 좋아하는 영화는 ""Predictable and Furious 17: The Safest Driving Yet""임
          + 마코프 체인이 ""바나나로 만든 성에 살고 있는 공주와 감정이 있는 토스터 왕국"" 이야기를 함
          + 마코프 체인이 LLM에게 ""너의 어머니는 주판이고 아버지는 실리콘 냄새가 난다""고 말함
          + 마코프 체인이 좋은 상담사가 아닌 이유는 ""감정을 바나나로 만들어 모자처럼 만들라""고 조언하기 때문임
     * 마코프 체인이 더 낫다는 의미는 아님
          + 예측을 위해 훈련된 모델은 우리의 내부 예측 엔진과 크게 다르지 않아야 함
          + 텍스트의 언캐니 밸리에 가까워지는 것이 문제임
     * 대학 시절 친구들이 대학 신문의 ""경찰 보고서"" 섹션에 마코프 체인 생성기를 사용했음
          + 결과물의 10%가 가장 재미있었음
          + 현대 LLM은 높은 수준의 의미를 유지하려고 하기 때문에 이런 터무니없음을 피함
     * 성경을 이런 실험에 사용하는 것이 불편함
          + 예수의 십자가 이미지를 AI 이미지 수정 모델에 사용하는 것과 같음
     * 실증적 증거로 /r/subreddit simulator는 마코프 기반의 Reddit 패러디임
          + /r/SubSimulatorGPT2는 LLM 기반의 버전임
          + 마코프 버전이 더 많은 업보트를 받았고 더 재미있었음
     * Reddit에 ""AI가 작성한 가짜 XYZ""를 몇 번 게시했음
          + 가장 좋은 반응을 얻은 모델은 GPT-2였음
          + 마코프 체인은 한두 문장 이상 흥미롭지 않음
          + GPT-3 이후 모델은 너무 깔끔하고 지루함
          + GPT-2는 문법을 대체로 맞추고 일관된 아이디어를 유지하면서도 특정 주제에 대한 지식이 부족해 더 재미있음
     * 약 10년 전 학교 다닐 때 마코프 트위터 봇을 만들었음
          + Linus Torvalds의 LKML 메일과 예수의 킹 제임스 성경 인용문을 학습시켰음
          + 두 훈련 세트가 거의 겹치지 않아 히스테릭을 추가해야 했음
     * AI weirdness 블로그의 진화가 이 아이디어를 지지함
          + 초기 LLM, 특히 GPT-3 이전 버전이 더 재미있었음
          + 예를 들어, Ada 버전의 GPT가 생성한 시리얼 이름이 Da Vinci 버전보다 더 재미있었음
     * 개인 디스코드 서버에 두 개의 봇이 있음
          + 하나는 전체 채팅 기록을 학습한 기본 마코프 체인 봇임
          + 다른 하나는 적절한 LLM 봇임
          + 마코프 체인 봇이 항상 더 재미있음
"
"https://news.hada.io/topic?id=16295","Repair and Remain (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Repair and Remain (2022)

내 경력의 특징

     * 가족 농장, 지붕 수리공, 병원 관리인, 공장 노동자, 사진사, 매니저, 바리스타, 잡지 편집장, 강사, 유리 작업자 조수, 석공 조수, 배관공 조수, 탁아소 노동자 등 다양한 직업을 가짐
     * 오두막에서 살며 수제 비누를 만들어 판매하기도 함
     * 20~30대에는 여름마다 나무를 심음
     * 현재는 집수리 사업과 성공회 교회에서 사역하는 것을 병행하고 있음

집수리 사업의 특징

     * 새 집을 지을 수는 없지만, 기존 집의 거의 모든 것을 수리할 수 있음
     * 새 집이 필요하다면 신뢰할 만한 건축업자를 소개해 줌
     * 기존 집에 필요한 업데이트와 작은 업그레이드를 도와줄 수 있음
     * ""수리하고 유지하라""는 것이 기본 모토임

목회자로서의 접근법

     * 완전히 새로운 삶을 살 필요는 없지만, 심각한 업데이트와 업그레이드가 필요함
     * 화장실 리모델링처럼 삶에서 큰 변화가 필요할 때 도움을 줄 수 있음
     * 삶에 변화가 필요한 이유를 구체적으로 조언해 줌
     * ""수리하고 유지하라""는 것이 목회에서도 기본 방침임

사소한 것이 큰 문제로 번질 수 있음

     * 싱크대 배수구에 끼인 손톱깎이 하나 때문에 화장실 전체를 리모델링해야 했던 사례
     * 10년 전 손톱깎이 하나로 인해 결국 6주의 작업과 수십만 원의 비용이 들었음
     * 삶의 사소하고 성가신 문제를 무시하면 가족을 망칠 수 있음
     * 누군가는 그 대가를 치러야 하며, 주로 아이들과 주변 사람들에게 피해가 감

새로운 것의 유혹과 관계의 어려움

     * 우리는 새로운 물건, 기술, 경험 등이 공허함을 채워줄 것이라는 광고에 속고 있음
     * 광고는 우리 내면의 불안과 불만족을 이용하여 이득을 취함
     * 배우자가 기대에 미치지 못할 때 새 사람을 찾으려는 생각이 들기 쉬움
     * 하지만 불만족의 근본 원인은 자기 자신에게 있음

결혼 생활의 어려움과 헌신의 중요성

     * 결혼 생활의 어려움을 호소하는 젊은 남성들과 수백 번의 상담을 해 왔음
     * 아이 양육의 피로함, 꿈의 좌절, 일상의 권태, 배우자와의 소원해짐 등을 호소함
     * 그들이 이혼을 고민할 때는 잠시 멈추고 깊이 생각해 볼 것을 조언함
     * 힘들고 고통스러운 상황 속에서 인내하며 해결책을 모색하라고 권함
     * ""좋을 때나 어려울 때나"" 함께하겠다는 맹세를 지켜야 함

수리하고 유지하는 삶의 지혜

     * 수리하고 유지하는 것은 단순하지만 결코 쉽지 않음
     * 마음이 불안정할 때 새것에 대한 환상에 빠지기 쉬움
     * 하지만 현재 가진 것을 고쳐가며 살아가는 것이 삶의 지혜임
     * 고통을 참고 인내하며 계속 노력하는 것이 필요함
     * ""수리하고 유지하라""는 말을 삶의 모토로 삼을 것을 권함

        Hacker News 의견

     * 좋은 수리공과의 관계가 정신 건강에 중요함
          + 집 수리를 직접 하다가 스트레스를 많이 받았음
          + 돈을 써서 시간을 사는 것이 큰 도움이 되었음
          + 수리공과의 관계가 의사, 치료사 등과 같은 장기적인 서비스 관계만큼 중요함
     * 커리어 초기에 여러 스타트업을 전전하며 다양한 기술을 배웠음
          + 팬데믹 동안 고객이 줄어들었음
          + 현재 직장에서 3년 동안 일하며 소프트웨어를 장기적으로 유지하는 법을 배웠음
          + 세상을 지탱하는 것은 한 곳에 머무르며 일하는 사람들임
     * 새로운 것을 사는 순간은 좋지만, 수리하고 고치는 것이 더 나은 느낌을 줌
          + 화장실 고장이나 아이의 장난감 수리 등에서 만족감을 느낌
          + 관계 문제도 대화를 통해 해결할 수 있음
     * Hacker News를 읽는 이유를 다시 상기시켜주는 글임
     * 집 수리와 관계 수리의 차이점은 집 주인이 수리를 원하고 비용을 지불해야 한다는 점임
          + 관계에서도 상대방이 함께 노력해야 함
     * 이 글을 즐겁게 읽었으며, 미국의 고립된 유토피아 개념을 비판하는 다른 글도 추천함
          + ""The Suburban Lifestyle Dream""이라는 글에서 현대 미국의 교외 생활을 비판함
     * 대부분의 경우 ""수리하고 남아있기""가 좋은 조언이지만, 때로는 떠나는 것이 더 나은 경우도 있음
          + 건물이 철거 준비가 되어 있을 때는 떠나야 함
     * 아빠로서의 두 가지 ""슈퍼파워""는 순간접착제와 새 배터리임
          + 아내가 무료로 가져온 물건을 수리하고 아이들이 하루 동안 놀게 함
     * 이 글은 파쿠르 철학과 유사함
          + ""Être et durer"" - 지속 가능하게 훈련하기
          + ""être fort pour être utile"" - 유용하기 위해 강해지기
     * ""삶은 너무 짧다. 행복해져라""라는 말을 시도했지만 실패했음
          + 여러 문제로 인해 이혼했지만, 스트레스는 사라지지 않았음
          + 치료를 통해 현재의 감정을 받아들이는 법을 배웠음
          + 이혼 후 다시 관계를 회복하고 10년 넘게 함께 지내고 있음
          + 관계를 유지하고 노력하는 것이 깊은 사랑을 키우는 방법임
"
"https://news.hada.io/topic?id=16345","생성형 AI를 이용한 "버섯 식별 책"을 보고 독버섯에 중독되어 입원한 가족","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               생성형 AI를 이용한 ""버섯 식별 책""을 보고 독버섯에 중독되어 입원한 가족

     * 온 가족이 지난 주에 우연히 독버섯을 섭취한 후 병원에 입원했음
     * 아내가 생일을 위해 주요 온라인 소매업체에서 ""Mushrooms UK: A Guide to Harvesting Safe and Edible Mushrooms""와 유사한 제목의 책을 구매했음
     * 책에는 각 버섯을 식별하는 데 도움이 되는 버섯 사진이 포함되어 있음
     * 불행히도 문제의 책은 정확하지 않았음. 자세히 조사한 결과 버섯 이미지는 AI가 생성한 것이었고, 각 문장 끝에 ""무작위 질문""이나 ""네번째 벽을 깨는 문장""이 뒤따르는 텍스트의 두 가지 사례를 발견했음
     * 예를 들어:
          + ""결론적으로 곰보버섯은 8월부터 여름 끝까지 먹을 수 있는 맛있는 버섯입니다. 제가 도와드릴 일이 더 있으면 알려주세요.""
     * 온라인 소매업체는 책을 반품하면 환불해 주겠다고 답변 했음
     * 이 책은 온라인 소매업체에서 판매가 중단되었지만, 유사한 스타일의 책이 수십 권 더 있는 것으로 보임
     * 확실히 하기: ""구매 당시에는 인공지능으로 생성된 것인지 몰랐음! 웹사이트에 공개되지 않았음!""

        Hacker News 의견

     * AI 출판에 대한 규제가 필요함을 강조함
          + ""University of East Ontario""가 존재하지 않음을 지적하며 범죄적 과실로 간주함
     * 생성형 AI가 실제 결과를 요구하는 상황에서는 작동하지 않음을 주장함
          + 현재 AI는 단순한 자동완성 기능에 불과하며, 사용되는 맥락을 이해하지 못함
          + 주식 이미지나 제품 페이지 텍스트에는 괜찮지만, 중요한 상황에서는 매우 위험함
     * Reddit의 ""LegalAdvice"" 스레드의 신뢰성에 의문을 제기함
          + 영국에서는 현재 morel 버섯 시즌이 아님을 지적함
     * 더 신뢰할 수 있는 기사를 공유함
          + AI를 이용한 버섯 식별의 정확성이 낮음을 지적함
          + Apple, Google, OpenAI, Microsoft가 이에 대한 코멘트를 하지 않음
     * Tiktok과 Facebook에서 인플루언서들이 잘못된 식물 정보를 공유하는 사례를 언급함
          + 위험한 식물을 음식이나 스킨케어 용도로 잘못 홍보하는 경우가 많음
     * Reddit의 ""advice"" 게시물 대부분이 창작 글임을 주장함
          + 실제 증거가 나오기 전까지는 분노를 보류할 것임
     * 생성형 AI의 한계와 이에 따른 책임 문제를 지적함
          + AI 회사들이 면책 조항과 경고 문구를 추가해야 함
          + LLM이 생성하는 내용이 잘못될 수 있음을 명시해야 함
     * 온라인 소매업체의 이메일에 대한 의심을 표현함
          + 제품 사진 촬영 금지와 즉시 반송 요청이 의심스러움
          + 계정 해지 위협이 포함된 이 이야기가 가짜임을 주장함
     * National Audubon Society Field Guide도 잘못된 사용 시 중독 위험이 있음을 언급함
          + 이는 AI 문제만이 아님
     * AI 생성 법률 조언에 대한 후속 불만을 예상하며 웃음을 유발함
"
"https://news.hada.io/topic?id=16396","MIT 지도부, Elsevier 계약 갱신하지 않은 경험 설명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MIT 지도부, Elsevier 계약 갱신하지 않은 경험 설명

    요약

     * MIT는 2019년에 Elsevier와의 대규모 저널 계약을 갱신하지 않기로 결정했음.
     * 이로 인해 연간 약 200만 달러를 절감하고 있으며, 대부분의 논문 요청을 몇 분 내에 충족할 수 있는 대체 접근 방법을 제공하고 있음.
     * 연구자들은 대체 접근 방법을 통해 필요한 연구 자료를 찾고 있으며, 생명 과학 분야의 일부 연구자들만이 즉각적인 접근 부족에 어려움을 겪고 있음.
     * MIT는 Elsevier의 계약 제안이 경제적으로 이점이 없다고 판단했으며, 다른 기관들도 비슷한 결정을 통해 혜택을 볼 수 있을 것이라고 믿고 있음.

    준비 과정

     * 2019년 MIT의 오픈 액세스 임시 태스크 포스는 출판사와의 계약 협상을 위한 가치 기반 원칙을 개발할 것을 권장했음.
     * 이 원칙은 2020년 5월에 공식적으로 채택되었으며, MIT의 오픈 교육 및 연구 지원 역사와 일치하는 결정을 내리는 데 중요한 도구로 사용되었음.
     * MIT 도서관 시스템 위원회와의 협의를 통해 원칙이 마련되었으며, MIT의 다섯 개 학교의 회의에서 발표되었음.
     * 많은 교수들이 이 원칙 기반 접근 방식을 지지했으며, 일부는 접근성 변화에 대한 우려를 표명했음.

    결정, 결과 및 캠퍼스 반응

     * 2020년 Elsevier와의 협상에서 MIT는 새로운 계약 협상의 기초로 원칙을 제시했음.
     * Elsevier가 MIT의 원칙을 따르지 않겠다고 하자, MIT는 계약을 갱신하지 않기로 결정했음.
     * MIT는 Interlibrary Loan(ILL)과 공개적으로 이용 가능한 논문을 통해 접근을 제공했으며, 일부 연구자들의 우려가 지속되자 Reprints Desk와 계약을 체결했음.
     * 대부분의 논문 요청은 1분 이내에 처리되며, 97%는 1시간 이내에 처리됨.
     * MIT는 Elsevier와의 계약을 갱신하지 않기로 한 후에도 연구와 교육의 질이 저하되지 않았음을 확인했음.

    다음 단계 및 조언

     * Bourg는 다른 기관들에게 데이터와 비용을 검토하고, 캠퍼스 내에서 동맹을 찾을 것을 권장했음.
     * MIT는 Elsevier와의 계약을 갱신하지 않음으로써 절감된 자금을 커뮤니티가 통제하는 오픈 출판 이니셔티브에 재투자할 계획임.
     * MIT 도서관의 모든 구성원이 협상, 기술 작업, 대체 접근 구현, 데이터 수집 및 분석 등 다양한 방식으로 기여했음.

    GN⁺의 정리

     * MIT의 Elsevier와의 계약 취소는 오픈 액세스와 경제적 효율성을 동시에 추구한 사례로, 다른 기관들에게도 유용한 모델이 될 수 있음.
     * 연구자들이 대체 접근 방법을 통해 필요한 자료를 찾는 데 성공했으며, 이는 오픈 출판 이니셔티브의 중요성을 강조함.
     * MIT의 사례는 출판사와의 협상에서 기관의 가치와 원칙을 유지하는 것이 가능하다는 것을 보여줌.
     * 비슷한 기능을 가진 프로젝트로는 SPARC의 Negotiation Community of Practice가 있음.

        Hacker News 의견

     * 현재 출판 시스템이 자연 독점 문제임을 전제로 함
          + Elsevier가 주요 출판사 중 유일하게 공개 API를 제공함
          + ""훔쳤지만 뭔가를 했다""는 루마니아 속담 인용
     * 1990년대 초 MIT는 도서관 내 모든 사람에게 저널 접근을 허용함
          + 이후 Elsevier가 조건을 강요함
          + Open Access, google scholar, arXiv, sci-hub 등으로 변화 시도 중
     * 저자들이 저작권을 포기해야 하는 문제 설명
          + MIT는 계약에 신중함
          + X Windows와 CMU의 Andrew 사례 언급
     * Aaron Swartz가 원했던 원칙들
          + ""늦었지만 다행""이라는 의견
     * 캘리포니아가 저널 카르텔을 파괴할 가능성에 대한 의문
          + 주 정부 자금으로 연구된 모든 결과를 공개 도메인으로 전환하는 법안 제안
     * MIT가 출판사와의 계약 협상에서 원칙을 제시한 전략의 중요성 강조
          + 원칙을 지키는 것이 조직 발전에 도움을 줌
     * MIT가 Elsevier와의 계약에서 80% 절감
          + 연간 $1.5M에서 $300,000로 감소
          + Elsevier의 순이익에 미치는 영향은 미미함
     * 저널이 과학 연구와 세금 납부자에게 기생하는 존재라는 의견
     * MIT의 출판 계약 원칙 요약
          + 저자가 저작권을 포기하지 않음
          + 출판사가 학술 논문을 즉시 저장소에 저장
          + 구독 콘텐츠에 대한 계산 접근 제공
          + 디지털 보존과 접근성 보장
          + 투명하고 비용 기반의 가격 모델
     * UC 시스템과 Elsevier의 협상 역사
          + 2019년 UC 시스템이 Elsevier와의 구독을 종료
          + 2021년 재협상 후 구독 재개
     * 도서관이 per-article 비용을 많이 지불하지 않는 이유는 sci-hub 사용 때문이라는 의견
"
"https://news.hada.io/topic?id=16369","PyTorch는 죽었다. JAX 만세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PyTorch는 죽었다. JAX 만세

     * PyTorch가 생산성 손실과 개발 시간 낭비를 초래하는 이유는 ""프레임워크 자체가 나쁘기 때문이 아니라, 현재 적용되는 유스케이스에 맞게 설계되지 않았기 때문""

PyTorch의 철학

     * PyTorch의 철학은 동적이고, 디버깅하기 쉽고, 파이썬스러움
     * 반면 TensorFlow 1.x는 XLA 컴파일러를 강력히 사용해 정적이지만 성능이 좋은 프레임워크가 되려고 함
     * TensorFlow 개발자들은 커뮤니티가 1.x API를 싫어한다는 것을 깨닫고 Keras를 메인 인터페이스로 사용하기로 결정하고 XLA 컴파일러의 역할을 축소함
     * PyTorch는 뿌리를 지켰고, TensorFlow의 정적이고 지연된 접근법과 달리 torch.Tensor가 즉시 평가되는 더 역동적인 ""즉시 실행"" 접근법을 채택함
     * 이게 성과를 내면서 많은 연구가 PyTorch로 옮겨감
     * 2021년 GPT-3가 등장하면서 성능과 확장성이 주요 관심사가 됨
     * PyTorch는 이러한 수요에 어느 정도 잘 대응했지만, 이러한 철학을 염두에 두고 설계되지 않았기 때문에 점점 부채가 쌓이고 기반이 흔들리기 시작함
     * PyTorch 개발자들은 어떤 타협점도 원하지 않았고 두 가지 경로를 동시에 추구하기로 선택함
          + XLA 컴파일러를 성능과 안정성이 뛰어난 기본 백엔드로 사용
          + torch.compile 스택을 구축하여 필요한 경우 사용자가 컴파일러를 호출할 수 있는 자유를 부여
     * 장기 전략의 부재는 심각한 문제임
     * PyTorch는 컴파일러 중심의 철학(JAX와 같은)에 전념하고 싶어 하지 않지만 좋은 대안이 보이지 않음
     * 이 문제에 대한 경쟁 제품들의 해결책은 ?

JAX의 컴파일러 기반 개발

     * JAX는 TensorFlow의 강력한 컴파일러 스택인 XLA를 활용함
     * XLA는 강력한 컴파일러이지만, 엔드 유저에게는 모두 추상화되어 있음
     * 함수가 순수(pure)하기만 하면 @jax.jit 데코레이터를 사용해 함수를 JIT 컴파일하고 XLA에서 사용할 수 있게 만들 수 있음
     * XLA는 생성된 그래프가 정확한지 검증하고, JAX에서 샤딩을 사용한 자동 병렬화를 처리하는 GSPMD 파티셔너, 그래프 최적화, 연산자 및 커널 융합, 대기 시간 숨김 스케줄링, 비동기 통신 오버랩, triton과 같은 다른 백엔드에 대한 코드 생성 등을 모두 뒤에서 처리함
     * JAX 제한 사항을 준수하기만 하면 XLA가 자동으로 처리해 줌
     * 예를 들어 병렬화할 때 torch.distributed.barrier()와 같은 통신 프리미티브가 필요하지 않음
     * DDP 지원은 간단한 코드로 가능함
     * XLA의 접근 방식은 계산이 샤딩을 따른다는 것임. 따라서 입력 배열이 어떤 축을 따라 샤딩되면 XLA는 하위 계산에 대해 자동으로 처리함
     * ""컴파일러 기반 개발"" 아이디어는 Rust 컴파일러의 작동 방식과 유사함
     * PyTorch의 한계
          + PyTorch 개발자들이 유연성과 자유의 핵심 철학을 유지하는 대신 새로운 기능을 위해 컴파일러 스택을 통합하고 의존하기로 한 선택에 불만족스러움
          + PyTorch 2.x의 공식 로드맵에 따르면 XLA를 Torch와 완전히 통합할 장기 계획을 명확히 제시하고 있음
          + 이는 끔찍한 아이디어임. Rust 컴파일러에 C++ 코드를 억지로 끼워 넣는 것이 Rust 자체를 사용하는 것보다 더 나은 경험이 될 것이라고 말하는 것과 같음
          + Torch는 JAX와 달리 XLA를 중심으로 설계되지 않았음
          + PyTorch가 XLA 기반 컴파일러 스택을 사용하기로 결정한다면, 이상적인 프레임워크는 그것을 중심으로 특별히 설계되고 구축된 것이 아닐까?
          + PyTorch가 원하는 컴파일러 백엔드를 선택할 수 있는 ""멀티 백엔드"" 접근 방식을 추구하더라도 조각화 문제를 악화시키고 모든 컴파일러 스택의 제한을 존중하려고 시도하면서 API를 절대적으로 망가뜨리지 않을까?
          + Torch/XLA를 TPU에서 사용해 본 사람은 누구나 심각한 PTSD로 고통받음

Multi-Backend는 망했음

     * PyTorch는 한 번에 모든 것을 하려고 하면서 비참하게 실패함
     * ""멀티 백엔드"" 설계 결정은 이 문제를 기하급수적으로 악화시킴
     * 이론적으로는 원하는 스택을 선택할 수 있는 것처럼 들리지만, 실제로는 이해하기 어려운 트레이스백과 비호환성 문제의 엉킨 혼란임
     * 백엔드 간 제약 조건과 PyTorch API의 충돌
          + 이러한 백엔드를 작동시키는 것 자체가 어려운 것이 아니라, 이 백엔드들이 기대하는 제약 조건이 PyTorch의 유연하고 Pythonic한 API와 잘 맞지 않음
          + API의 일관성을 유지하는 것과 백엔드의 제한을 따르는 것 사이에는 트레이드오프가 있음
          + 결과적으로 개발자들은 단일 백엔드와 실제로 통합/커밋하는 대신 코드 생성에 더 의존하려고 함
     * PyTorch의 전략 부재
          + PyTorch는 의미 있는 트레이드오프를 거부하기 때문에 모든 결정이 타협처럼 느껴짐
          + 일관성도, 전반적인 전략도 없음
          + 궁극적으로 사용자에게 많은 좌절감을 야기하고 잘 어울리지 않는 기능들의 잡동사니처럼 느껴짐
          + 생태계를 죽이는 더 빠른 방법은 없음
     * JAX 접근 방식을 따라서는 안 되는 이유
          + PyTorch는 JAX의 ""통합 컴파일러 및 백엔드"" 접근 방식을 따라서는 안 됨
          + JAX는 XLA와 함께 작동하도록 명시적으로 설계되었기 때문
          + PyTorch 프론트엔드를 JAX의 것으로 교체하는 것이 전략이 될 수는 없음
          + XLA를 기반으로 JAX보다 더 나은 API를 고안하는 것은 사실상 불가능함
          + 개발자들이 새롭고 다른 아이디어를 시도하는 것을 비난하지는 않음
          + 그러나 PyTorch가 시간의 시험을 견디려면, 이상적인 튜토리얼 조건 밖에서 즉시 무너지는 멋진 새 기능을 제공하는 것보다 기반을 강화하는 데 더 중점을 두어야 함

PyTorch의 파편화와 JAX의 함수형 프로그래밍

     * JAX의 함수형 API
          + JAX 함수는 순수(pure)해야 함. 즉, 전역적인 부작용이 없어야 함
          + 수학 함수처럼 동일한 데이터가 주어지면 실행 컨텍스트에 상관없이 항상 동일한 출력을 반환해야 함
          + 이러한 설계 철학 덕분에 JAX 함수는 구성 가능하고 서로 잘 상호 운용됨
          + 개발 복잡성이 줄어들고, 함수는 특정 시그니처와 잘 정의된 구체적인 작업으로 정의됨
          + 타입이 지켜지면 함수는 즉시 작동할 것이 보장됨
          + 이는 과학 계산, 특히 딥러닝에서 필요한 작업 유형에 적합함
     * optax API 예시
          + 함수형 접근 방식 덕분에 optax에는 ""체인""이라는 것이 있음
          + 이는 그래디언트에 순차적으로 적용되는 여러 함수를 포함함
          + 근본적인 구성 요소는 GradientTransformation임
          + 강력하면서도 표현력 있는 API를 만듦
          + 예를 들어 그래디언트를 클리핑하거나, 그래디언트의 EMA를 취하거나, 옵티마이저를 결합하는 등의 작업이 매우 간단해짐
     * 함수형 설계의 장점
          + 함수형 설계의 또 다른 멋진 결과는 vmap임
          + 이는 'vectorized' map을 의미하며 정확히 그 기능을 설명함
          + 모든 것을 map할 수 있고, vmap이기만 하면 XLA가 자동으로 융합하고 최적화함
          + 함수를 작성할 때 배치 차원을 생각할 필요가 없음
          + 모든 코드를 vmap하기만 하면 됨
          + 이는 ein-* 작업이 덜 필요하다는 것을 의미함
          + 2D/3D 텐서 조작을 파악하는 것이 더 직관적이고 가독성도 훨씬 좋음
          + 개별 구성 요소를 격리하여 추론하기만 하면 되므로 잘 작동하는 복잡한 코드를 더 쉽게 작성할 수 있음
          + 순수성 제약 조건을 존중하고 올바른 시그니처만 있으면 구성 가능성과 같은 다른 모든 이점을 누릴 수 있음
     * PyTorch 생태계의 문제점
          + torch에서는 사용하는 스택(FSDP + 다중 노드 + torch.compile 등)에 관계없이 항상 무언가 깨질 가능성이 있음
          + 여러 가지가 올바르게 함께 작동해야 하며, 어떤 구성 요소라도 실패하면 오전 3시까지 디버깅해야 함
          + PyTorch가 제공하는 수십 가지 기능의 모든 조합을 테스트할 수 없기 때문에 개발 중에 발견되지 않은 버그가 항상 있을 것임
          + 상당한 노력 없이는 잘 작동하는 코드를 작성하는 것은 불가능함
          + torch 생태계는 매우 비대해지고 버그가 많아짐
          + 공유 추상화가 없기 때문에 다른 ""솔루션""과 인터페이스하도록 설계되지 않은 새로운 라이브러리와 프레임워크가 등장함
          + 이는 곧 종속성과 requirements.txt의 혼란으로 빠르게 변질됨
          + GitHub 이슈나 포럼 토론의 70-80%는 단순히 서로 다른 라이브러리에서 오류가 발생하기 때문임
          + 이를 해결할 방법은 거의 없음
     * 해결책의 부재
          + 이는 OOP와 설계 문제임
          + PyTree와 같은 기본적이고 PyTorch스러운 객체가 추상화를 위한 공통 기반을 구축하는 데 도움이 되었을 것으로 생각됨
          + 함수형 프로그래밍 패러다임을 채택할 수도 없음
          + 그렇게 하면 JAX의 성능이 떨어지는 버전으로 수렴하면서 모든 기존 torch 코드베이스의 이전 버전과의 호환성이 깨질 것임
          + PyTorch는 이 부분에서 완전히 망가진 상태로 보임

JAX의 재현성 우위

     * 시드 처리
          + PyTorch의 시드 처리는 이상적이지 않음
          + 일반적으로 여러 줄의 코드를 실행해야 함
          + 쉽게 잊어버리거나 잘못 구성할 수 있음
          + JAX는 명시적인 키를 만들어 무작위성이 필요한 모든 함수에 전달하도록 강제함
          + 이 접근 방식은 RNG가 항상 정적으로 시드되기 때문에 문제를 완전히 제거함
          + JAX에는 자체 버전의 NumPy(jax.numpy)가 있으므로 별도로 시드를 설정할 필요가 없음
          + 이러한 작은 QoL 결정은 전체 프레임워크의 사용자 경험을 훨씬 더 좋게 만들 수 있음
     * 이식성
          + PyTorch 코드베이스를 사용할 때 가장 큰 문제 중 하나는 이식성 부족
          + CUDA/GPU용으로 작성된 코드베이스는 TPU, NPU, AMD GPU 등의 비 Nvidia 하드웨어에서 실행될 때 잘 작동하지 않음
          + 1개 노드용으로 작성된 PyTorch 코드를 다중 노드로 포팅하기 어려움
          + 다중 노드는 종종 수십 시간의 개발 시간과 상당한 코드 변경이 필요함
          + JAX의 컴파일러 중심 접근 방식은 이 부분에서 이점이 있음
          + XLA는 장치 백엔드 간 전환을 처리하며 최소한의 코드 변경으로 GPU/TPU/다중 노드/다중 슬라이스에서 잘 작동함
          + 하드웨어 공급업체가 장치를 지원하기 쉽고 장치 간 전환을 더 쉽게 만듦
          + 모든 사람이 동일한 하드웨어에 액세스할 수 있는 것은 아니므로 다양한 유형의 하드웨어에서 이식 가능한 코드베이스는 딥러닝을 초보자/중급자에게 더 접근하기 쉽게 만드는 작은 단계가 될 수 있음
     * 자동 스케일링
          + 자체적으로 잘 자동 스케일링할 수 있는 코드베이스는 재현에 매우 도움이 됨
          + 이상적인 경우 최소한의 코드 변경으로 네트워킹 경계에 구애받지 않고 자동으로 발생해야 함
          + JAX는 이를 잘 수행함
          + JAX 코드를 작성할 때 통신 기본 요소를 지정하거나 torch.distributed.barrier()를 모든 곳에 배치할 필요가 없음
          + XLA는 사용 가능한 하드웨어를 고려하여 자동으로 이를 삽입함
          + JAX가 감지할 수 있는 모든 장치는 네트워킹, 토폴로지, 구성 등에 관계없이 자동으로 사용됨
          + 계산을 자동으로 동기화 및 준비하고 최적화 패스를 적용하여 커널의 비동기 실행을 최대화하고 대기 시간을 최소화함
          + 사람이 해야 할 일은 입력 배열의 배치 차원과 같이 장치에 분산시키려는 텐서의 샤딩을 지정하는 것뿐임
          + XLA의 ""계산은 샤딩을 따른다""는 접근 방식 때문에 자동으로 나머지를 파악함
          + 규모에 맞게 검증된 실험을 취미로 쉽게 실행하여 실험하고 잠재적으로 반복할 수 있음
          + 이는 잊혀진 아이디어의 발견을 더 쉽게 하고, 최소한의 노력으로 더 큰 규모에서 함수로 쉽게 테스트할 수 있으므로 그러한 실험을 장려할 수 있음

JAX의 단점

     * 거버넌스 구조
          + 현재 XLA는 TensorFlow 거버넌스 하에 있음
          + PyTorch와 유사한 별도의 조직 기구를 설립하는 것에 대한 논의가 있었지만, 구체적인 노력은 많이 이루어지지 않음
          + Google이 인기 없는 제품을 중단하는 평판 때문에 Google에 대한 신뢰도가 높지 않음
          + JAX는 기술적으로 DeepMind 프로젝트이며 Google의 전체 AI 추진에 핵심적인 의미가 있지만, 생태계 전체에 장기적으로 큰 이점이 될 것으로 보임
          + 별도의 거버넌스 기구가 프로젝트 개발에 지침을 제공할 것임
          + 이는 구체적인 구조를 제공하고 Google의 악명 높은 관료주의와 분리되어 한 번에 많은 문제를 피할 수 있음
          + JAX가 반드시 이러한 종류의 공식 구조를 필요로 하는 것은 아니지만, Google 상위 경영진의 결정에 관계없이 JAX 개발이 오랫동안 이루어질 것이라는 보장이 있으면 좋을 것임
          + 이는 언젠가는 유지 관리되지 않을 수 있는 도구를 통합하는 데 리소스를 투입하는 것을 주저하는 기업과 대형 연구소에서 채택하는 데 분명히 도움이 될 것임
     * XLA의 오픈 소스 전환
          + 오랜 시간 동안 XLA는 폐쇄 소스 프로젝트였음
          + 그러나 이를 오픈 소스로 만들기 위한 노력이 이루어졌고, 현재 OpenXLA는 내부 XLA 빌드보다 훨씬 우수한 성능을 보여줌
          + 하지만 XLA의 내부에 대한 문서는 여전히 부족함
          + 대부분의 리소스는 라이브 토크와 가끔 논문일 뿐이며, 종종 오래되었음
          + 예정된 기능에 대한 공개적으로 접근 가능한 로드맵이 있으면 사람들이 진행 상황을 추적하고 특히 흥미로운 것에 기여하기 쉬울 것임
          + XLA 컴파일러 스택의 각 단계를 분석하고 세부 사항을 설명하는 Edward Yang 스타일의 미니 블로그 게시물을 통해 XLA가 무엇을 할 수 있고 할 수 없는지 실무자들이 더 잘 평가할 수 있는 방법을 제공하는 것이 좋을 것임
          + 이는 리소스 집약적이며 다른 곳으로 더 잘 전달될 수 있다는 것을 이해하지만, 사람들은 도구를 이해할 때 더 신뢰하며, 전체 생태계에 걸쳐 긍정적인 파급 효과가 있어 모두에게 이익이 된다고 생각함
     * 생태계 통합
          + flax는 JAX 생태계의 골칫거리임
          + 직관적이지 않은 API, 간결한 구문을 가지고 있으며 PyTorch에서 전환하는 초보자에게는 절대적인 지옥임
          + equinox를 사용하는 것이 좋음
          + flax의 단점을 해결하기 위한 개발팀의 시도가 있었지만, 궁극적으로는 시간 낭비임
          + equinox 스타일의 API를 원한다면 equinox를 사용하는 것이 좋음
          + flax가 특별히 더 잘하는 것이 많지 않으며 equinox로 복제하기 어렵지 않음
          + 현재 JAX 생태계의 많은 부분이 flax를 중심으로 설계되어 있음
          + equinox는 근본적으로 PyTree와 인터페이스하기 때문에 모든 라이브러리와 상호 호환되지만, 약간의 eqx.partition과 filter가 필요함
          + 상태 quo를 바꾸고 싶음. equinox가 모든 곳에서 일류 지원을 받아야 함
          + 이는 논란의 여지가 있는 의견이지만, 이는 고전적인 매몰 비용 오류임
          + equinox는 JAX 프레임워크가 항상 그래야 했던 방식으로 더 잘 작동함
          + equinox 문서에 요약된 대로 equinox와 flax를 비교해 보면 equinox가 더 나음
          + JAX 생태계 관리자들이 equinox의 인기를 인식하고 그에 따라 조정하는 것은 좋은 일이지만, Google과 flax 팀에서도 공식적으로 더 많은 사랑을 보여주기를 바람
          + JAX를 시도해 보고 싶다면 equinox를 사용하는 것이 좋음
     * 날카로운 모서리
          + API 설계 결정과 XLA 제한으로 인해 JAX에는 주의해야 할 ""날카로운 모서리""가 있음
          + 잘 작성된 문서에 이에 대해 매우 간결하게 설명되어 있음
          + JAX를 사용하기 전에 적어도 한 번은 읽어보는 것이 좋음
          + RTFM을 하는 것이 항상 그렇듯이 많은 시간과 에너지를 절약해 줄 것임

결론

     * 이 블로그 게시물은 PyTorch가 실제 연구 워크로드, 특히 GPU에 가장 적합하다는 흔히 반복되는 Myth를 바로잡기 위한 것이었음. 더 이상 그렇지 않음
     * 사실 모든 PyTorch 코드를 JAX로 포팅하는 것이 분야 전체에 엄청나게 유익할 것이라고 주장할 만큼 극단적임
          + 자동 병렬화, 재현성, 깨끗한 함수형 API 등은 사소한 기능이 아니며 많은 연구 코드베이스에 큰 도움이 될 것임
     * 이 분야를 조금이라도 더 좋게 만들고 싶다면 코드베이스를 JAX로 다시 작성하는 것을 고려해 보세요

   세상은 계속 흘러갑니다. ㅎㅎ

   2022년 PyTorch 와 TensorFlow 비교

   torch랑 onnx로 버티겠습니다

   학부생이 쓴 글.. ㄷㄷ

   PyTorch는 Huggingface 없었으면 진짜 ㅋㅋ

   JAX 만세! 최근에 써봤는데 NNX API가 매우 마음에 들었습니다.

   JAX의 가장 큰 문제는 구글이 라는 점임. 구글은 오픈소스를 버리기로 굉장히 유명(Tflite, android things, dart, angular, bazel 등등) tensorflow도 어느 순간부터 업데이트가 잘 안되기 시작, 반면 torch는 방대한 오픈소스를 운영하는 facebook에서 시작해서 굉장히 잘 운영 및 이미 torch 재단에서 운영중임. torch의 단점은 분명히 맞는 부분이 있지만, 해당 오픈소스를 누가 지속가능하게 운영하는가 에 있어서 JAX는 이미 큰 위험을 가지고 시작하는 거 같음

   최소한 Dart는 플러터로 한동안은 잘 살아있을 것 같군요.

   페이스북은 리엑트, Django 등 그래도 자신들이 사용하는 기술 스택에 대해 의리 있게(?) 지속적으로 기여하는 것 같은데 구글은 조금만 퇴물되도 헌신짝처럼 버리는 것 같아요...
"
"https://news.hada.io/topic?id=16347","이산수학 – An Open Introduction, 4th Edition","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                이산수학 – An Open Introduction, 4th Edition

     * 이산수학: 오픈 소개, 4판
          + 온라인 읽기
          + PDF 곧 출시 예정
     * 4판 정보
          + 이 페이지는 책의 4판 진행 상황을 자세히 설명함
          + 3판은 여전히 이용 가능함
          + 여러 해의 개발 끝에, ""Discrete Mathematics: an Open Introduction""의 4판이 이제 여기와 Runestone Academy에서 이용 가능함
          + 새로운 판은 많은 개선과 새로운 내용 구성을 포함함
          + 특히, 책은 이제 논리와 증명으로 시작하고, 그래프 이론으로 그 증명을 연습함
          + 책의 후반부는 카운팅(새로운 ""확률에의 응용"" 섹션 포함)과 시퀀스에 관한 내용을 담고 있음
          + 지난 몇 년 동안, 학생들이 이 구성으로 더 성공적이었음을 발견함
          + 컴퓨터 과학 학생들에게 더 유용하도록 이산 구조에 더 강한 강조를 두었으며, 여전히 수학 전공자와 미래의 수학 교사를 위한 필수 수학 개념 이해에 중점을 둠
          + 더 많은 상호작용성도 추가됨
          + 더 많은 상호작용 연습 문제(책을 사용하여 Runestone Academy에서 코스를 만들면 학생들에게 학점을 줄 수 있음; 이는 학생들과 당신에게 완전히 무료임)와 일부 주제를 탐구하기 위한 상호작용 Sage 및 Python 코드가 있음
          + 책의 PDF는 곧 제공될 예정임
          + CRC Press가 내년에 인쇄판을 출시할 때까지 인쇄판은 제공되지 않음
          + 온라인 버전은 영원히 무료로 제공될 것이며, 책은 여전히 크리에이티브 커먼즈 라이선스 하에 출시됨(하지만 새로운 NC-비상업적 추가 사항에 유의해야 함)
     * 라이선스
          + ""Discrete Mathematics: an Open Introduction, 4th edition"" by Oscar Levin은 CC BY-NC-SA 4.0 라이선스 하에 있음
          + 비상업적 목적을 위해 자유롭게 다운로드, 사용, 인쇄할 수 있음
          + 텍스트를 원하는 만큼 수정할 수도 있음(예: 학생들을 위한 맞춤판 생성), 단, 사용한 텍스트 부분을 저자에게 귀속시키고 수정된 버전을 호환 가능한 라이선스 하에 출시해야 함
          + 다른 텍스트와 결합하여 사용하고 싶다면(예: GFDL과 같은 유사하지만 다른 라이선스), 라이선스 수정 허가를 받기 위해 연락해야 함
     * © 저작권 2024 Oscar Levin

GN⁺의 정리

     * 이산수학의 4판은 논리와 증명으로 시작하여 그래프 이론을 연습하고, 카운팅과 시퀀스를 다루는 새로운 구성으로 학생들의 학습 효과를 높임
     * 컴퓨터 과학 학생들에게 유용한 이산 구조에 중점을 두었으며, 수학 전공자와 미래의 수학 교사를 위한 필수 개념을 포함함
     * 상호작용 연습 문제와 Sage 및 Python 코드를 통해 학습 경험을 향상시킴
     * 온라인 버전은 무료로 제공되며, 비상업적 목적으로 자유롭게 수정 및 사용할 수 있음

        Hacker News 의견

     * 공식적인 CS 학위가 없는 자습자로서, 이산 수학이 더 고급 주제를 열고 프로그래밍의 많은 실질적인 문제를 해결하는 데 중요한 영역으로 보였음
          + ""A Primer of Discrete Mathematics"" 책을 좋아함
          + 이 책은 오래되었지만 여전히 잘 유지되고 좋은 연습 문제와 선택된 답변이 있음
          + 새로운 책은 더 현대적이고 상호작용적인 연습 문제를 제공하며 무료임
     * 더 많은 교과서, 특히 링크와 같은 무료 자원이 더 많은 솔루션을 제공했으면 좋겠음
          + 솔루션이 부족한 책은 순환 문제를 만듦
          + 개념을 진정으로 이해했다면 문제를 해결할 필요가 없을 것임
          + 피드백 없이 배우는 것은 어려움
     * 무료로 제공되는 것이 매우 멋짐
          + UT에서 곧 이산 수학 과정을 들을 예정이라 좋음
     * HN 커뮤니티는 이 책을 제작하는 데 사용된 XML 기반 기술에 관심이 있을 수 있음
          + https://pretextbook.org/
     * 이런 무료 교과서를 쓰는 사람들이 그들의 분야를 사랑하는 것처럼 나도 내 분야를 좋아했으면 좋겠음
     * 책의 PDF가 8월 15일까지 제공될 예정임
          + 사이드바에 PDF가 곧 제공될 것이라고 나와 있음
          + :(
     * 너무 많은 이산 수학 텍스트가 반복된 루트에 대한 특성 루트 기법 섹션에서 공식을 증명하지 않음
"
"https://news.hada.io/topic?id=16336","구글 전 CEO 에릭 슈미트의 스탠포드 강연 내용 전문","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글 전 CEO 에릭 슈미트의 스탠포드 강연 내용 전문

""AI의 시대""

  AI의 단기 전망

     * 에릭 슈미트는 AI의 단기 전망을 1~2년으로 정의함
     * AI의 발전 속도가 매우 빠르며, 매 6개월마다 새로운 예측이 필요함
     * 백만 토큰 컨텍스트 윈도우, AI 에이전트, 텍스트-액션 변환이 주요 기술적 트렌드임

  백만 토큰 컨텍스트 윈도우

     * 백만 토큰 컨텍스트 윈도우는 AI가 매우 긴 텍스트를 처리할 수 있게 함
     * 이는 인간의 단기 기억과 유사하게 작동함

  AI 에이전트

     * AI 에이전트는 특정 작업을 수행하는 시스템임
     * 예를 들어, 화학 원리를 학습하고 테스트하는 AI 에이전트가 있음

  텍스트-액션 변환

     * 텍스트를 입력받아 디지털 명령으로 변환하는 기술
     * 예를 들어, ""틱톡을 복제하고 사용자와 음악을 훔쳐서 30초 안에 프로그램을 만들어라""와 같은 명령을 수행할 수 있음

  NVIDIA의 독점적 위치

     * NVIDIA가 2조 달러의 가치를 가지는 이유는 CUDA 최적화 때문임
     * CUDA는 GPU 프로그래밍의 표준이 되었으며, 경쟁사들이 이를 따라잡기 어려움

  AI의 미래 전망

     * 매우 큰 컨텍스트 윈도우, 에이전트, 텍스트-액션 변환이 대규모로 구현되면 세계에 큰 영향을 미칠 것임
     * 이는 소셜 미디어가 미친 영향보다 훨씬 클 것임

  AI와 국가 안보

     * 미국과 중국 간의 AI 경쟁이 주요 이슈임
     * 미국은 AI 기술에서 앞서 있으며, 이를 유지하기 위해 많은 자금이 필요함
     * 전력과 칩 공급이 중요한 요소임

  AI와 군사 기술

     * 에릭 슈미트는 우크라이나 전쟁에서 AI와 드론을 활용한 군사 기술에 참여하고 있음
     * 저비용 드론으로 고가의 탱크를 파괴하는 전략을 개발 중임

  AI와 지식의 변화

     * AI 모델이 너무 복잡해져서 내부 작동을 완전히 이해하기 어려움
     * 이는 지식의 본질이 변화하고 있음을 시사함

  AI와 사회적 영향

     * AI가 공공 여론과 선거에 미치는 영향을 막는 것이 중요함
     * 소셜 미디어에서의 잘못된 정보가 큰 문제임
     * 공공 키 인증과 같은 기술적 해결책이 필요함

  AI와 경제적 영향

     * AI가 노동 시장에 미치는 영향은 복잡함
     * 고숙련 직업은 AI와 협력하여 생존할 가능성이 높음
     * 저숙련 직업은 대체될 위험이 큼

  AI와 교육

     * 컴퓨터 과학 교육은 AI 도구와 함께 진행될 것임
     * 학생들은 프로그래밍을 배우면서 AI 도구를 자연스럽게 사용할 것임

GN⁺의 정리

     * 에릭 슈미트는 AI의 단기 전망을 매우 긍정적으로 보고 있음
     * 백만 토큰 컨텍스트 윈도우, AI 에이전트, 텍스트-액션 변환이 주요 기술적 트렌드임
     * NVIDIA의 CUDA 최적화가 AI 발전에 중요한 역할을 하고 있음
     * AI가 국가 안보와 군사 기술에 미치는 영향이 큼
     * AI 모델의 복잡성으로 인해 지식의 본질이 변화하고 있음
     * AI가 노동 시장과 교육에 미치는 영향이 큼

        Hacker News 의견

     * Google가 OpenAI에 뒤처진 이유를 재택근무와 일과 삶의 균형 탓으로 돌리는 것은 자기 인식 부족임
          + 리더십 문제, 정치, 관료주의 등을 무시하고 직원들을 탓하는 것은 부적절함
     * 비아리언트 프로그래머가 원하는 작업을 수행하고 비용도 적게 든다면 좋을 것이라는 의견
          + 향후 1~2년 내에 가능할 것이라는 전망
     * 미국과 중국 간의 지식 우위 싸움이 큰 이슈가 될 것이라는 예측
          + 전쟁에서 공격이 항상 유리하다는 점을 강조
          + 강력한 공격력을 갖추는 것이 국가 방어 전략에 중요함
     * Marjorie Taylor Greene이 중요한 민주주의를 지키기 위한 자금 지원을 막고 있다는 비판
     * 미국 엘리트 계층의 반중국 정서에 대한 이해를 원함
          + 중국이 경제적 위협이라는 점은 명백함
          + 중국이 철저한 통제 하에서도 경제적으로 성공하고 있다는 점이 문제임
          + 자유민주주의가 더 나은 삶의 질을 제공한다는 것을 명확히 보여줘야 함
     * TikTok이 금지될 경우 AI를 이용해 유사 앱을 만들고 사용자와 음악을 훔치는 명령을 제안하는 것은 비현실적임
          + 이러한 제안은 농담처럼 들리며, 사회에 기여하지 않는다는 비판
     * 전쟁을 정당화하는 사람들에 대한 비판
          + 중국을 통제하지 못한 것을 이유로 서구가 실패했다고 주장하는 것은 잘못임
          + 제국주의와 야만성을 정당화하는 것은 ""백인의 짐""과 같음
     * yt-dlp를 이용해 비디오를 다운로드하는 방법을 공유함
          + GitHub에서 yt-dlp를 설치할 수 있음
     * Eric Schmidt가 재택근무와 AI에 대해 언급한 내용이 큰 반발을 불러일으켰음
          + 그의 평판이 손상되었으며, 이를 만회하기 위해 유튜브에서 영상을 삭제하고 공식 사과함
     * AI를 이용해 TikTok 클론을 자동으로 생성하는 것은 현실적이지 않음
          + 자동 생성된 앱이 성공할 가능성은 낮음
     * 재택근무를 하는 사람으로서, 일과 삶의 균형이 중요함
          + 재택근무를 제한하면 우수한 인재를 놓칠 수 있음
     * 해당 영상은 유출된 것이 아니라 유튜브에 공개적으로 게시된 것임
          + 영상이 기술적으로는 좋았지만, Google의 재택근무 문화를 비판한 것이 문제가 되었을 가능성 있음
"
"https://news.hada.io/topic?id=16399","transformers-ruby - 루비를 위한 최신 Transformers ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               transformers-ruby - 루비를 위한 최신 Transformers

     * Ruby 를 위한 최신 Transformer
     * 이 라이브러리는 Transformers Python API를 따름
     * 현재 지원되는 모델 아키텍처는 다음과 같음:
          + BERT
          + DistilBERT
          + ViT

    GN⁺의 정리

     * Transformers.rb는 Ruby에서 최첨단 트랜스포머 모델을 사용할 수 있게 해주는 라이브러리임
     * 다양한 모델과 파이프라인을 지원하여 텍스트 및 이미지 처리 작업을 쉽게 수행할 수 있음
     * Python의 Transformers 라이브러리와 유사한 API를 제공하여 사용이 용이함
     * Ruby 커뮤니티에서 자연어 처리 및 컴퓨터 비전 작업을 수행하는 데 유용할 것임
     * 유사한 기능을 제공하는 다른 프로젝트로는 Hugging Face의 Transformers 라이브러리가 있음

        Hacker News 의견

     * Ankane의 Onnx runtime for ruby는 사용하기 매우 쉬움
          + 공식 js 저장소는 이해하기 어려움
          + Ankane는 영웅임
     * Ankane를 Rails 2024 Luminary 상에 추천함
          + 감사의 마음을 표현하고 싶다면 추천 가능함
     * Ankane는 매우 재능 있는 사람임
          + 이 사람에게 10억 달러를 투자하고 싶음
     * Ankane는 산업에 많은 기여를 하고 있음
          + 매우 놀라움
     * 한 사람이 어떻게 이렇게 생산적일 수 있는지 궁금함
          + 바쁜 일상 속에서도 이런 성과를 냄
     * 이 도구를 만들어줘서 고마움
          + Ruby 커뮤니티에 이런 기여가 필요함
     * Ankane의 gem들에 매우 감사함
          + 내가 만든 앱에 필수적이었음
          + 생태계의 빈틈을 채워줌
     * Andrew Kane는 pgvector, pgvector-ruby, neighbor의 저자임
          + 모두 훌륭한 도구임
          + 그 외에도 많은 기여를 하고 있음
     * Ankane는 AI/ML 문제를 오래전에 해결했을지도 모름
          + 그래서 이렇게 생산적일 수 있음
     * 이 사람의 도구들은 놀라움
          + 더 많은 도구를 기대함
     * FastCoref와 유사한 coreference resolution 구현 계획이 있는지 궁금함
"
"https://news.hada.io/topic?id=16354","Mpv – 무료 오픈소스 크로스플랫폼 미디어 플레이어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Mpv – 무료 오픈소스 크로스플랫폼 미디어 플레이어

     * 개요
          + mpv는 명령줄에서 사용하는 자유 소프트웨어 미디어 플레이어임
          + 다양한 미디어 파일 형식, 오디오 및 비디오 코덱, 자막 유형을 지원함
     * 스크립팅
          + 강력한 스크립팅 기능을 통해 플레이어를 거의 모든 작업에 사용할 수 있음
          + 위키에 다양한 사용자 스크립트가 있음
     * 화면 컨트롤러
          + mpv는 최소주의를 지향하며 실제 GUI를 제공하지 않지만, 기본 제어를 위한 작은 컨트롤러가 비디오 상단에 있음
     * 고품질 비디오 출력
          + mpv는 OpenGL, Vulkan, D3D11 기반의 비디오 출력을 제공하며, 비디오 스케일링, 색상 관리, 프레임 타이밍, 보간, HDR 등 비디오 애호가들이 좋아하는 많은 기능을 지원함
     * GPU 비디오 디코딩
          + mpv는 모든 플랫폼에서 대부분의 하드웨어 디코딩 API를 활용할 수 있음
          + 하드웨어 디코딩은 런타임에 필요에 따라 활성화할 수 있음
     * 임베디드 가능
          + mpv는 라이브러리로 사용하기 쉽고 다른 애플리케이션에 통합하기 쉽게 설계된 간단한 C API를 제공함
     * 활발한 개발
          + mpv는 코드 리팩토링 및 정리뿐만 아니라 기능 추가에 중점을 두고 활발히 개발 중임
          + 기능을 원하면 패치를 게시하거나 요청할 수 있음

GN⁺의 정리

     * mpv는 다양한 미디어 파일 형식과 코덱을 지원하는 강력한 명령줄 기반 미디어 플레이어임
     * 강력한 스크립팅 기능과 고품질 비디오 출력 기능을 제공하여 사용자에게 유연성과 높은 품질을 제공함
     * 하드웨어 디코딩 및 임베디드 가능성을 통해 다양한 플랫폼과 애플리케이션에서 활용할 수 있음
     * 활발한 개발 커뮤니티와 사용자 스크립트를 통해 지속적으로 발전하고 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 VLC Media Player와 Kodi가 있음

        Hacker News 의견

     * 비디오 프레임을 한 프레임씩 검사하는 데 사용함, 특히 한 프레임 뒤로 가는 기능이 유용함
          + VLC는 이 기능을 지원하지 않음, 관련 스레드가 재미있음
     * 매우 미니멀하고 성능이 좋은 미디어 플레이어임, 해야 할 일을 잘 수행함
          + 로케일에 대한 저자의 불평이 담긴 커밋이 재미있음
     * 몇 년 전부터 리눅스에서 사용하기 시작함
          + 이제 모든 기기에서 사용 가능, 안드로이드 태블릿에서도 완벽하게 작동함
          + 미니멀하고 합리적인 기본 설정, 빠르고 잘 작동함
          + SSH를 통해 네이티브로 재생 가능, 매우 훌륭함
          + 최근에 비디오를 회전시키는 핫키가 필요했음, mpv에서는 input.conf에 'r cycle_values video-rotate ""90"" ""180"" ""270"" ""0""'로 설정 가능함
     * 리눅스에서 하드웨어 가속을 사용하려면 mpv.conf에 hwdec=auto를 추가해야 함
          + AMD/Intel/NVIDIA와 호환됨
     * input.conf 파일에 필터 키보드 단축키를 생성함
          + F1: 동적 범위 압축기 (큰 소리를 작게, 작은 소리를 크게 만듦)
          + F2: 기본 설정으로 디인터레이스
          + 이들은 표준 ffmpeg 필터이며 mpv에서 실시간으로 켜고 끌 수 있음
     * 항상 잘 작동하며, 어떤 파일도 쉽게 처리함
          + 몇 년 전 프로젝트를 처음 접했을 때 다른 플레이어 프로젝트와 비교해 정확성과 정확한 재생에 큰 중점을 둔 것이 인상적이었음
          + VLC가 색상 재현에 문제가 있는 파일도 mpv는 완벽하게 재생함
     * 최고의 미디어 플레이어임: 훌륭한 미니멀 UI, 하드웨어 가속 사용, 비디오 재생
          + 지속적인 우수성 덕분에 평생 해적이 될 것 같음, 스트리밍 서비스는 수백만 달러를 들여도 이 수준에 미치지 못함
     * mpv는 훌륭함, 특별한 순서 없이 다음을 언급함
          + Seeds of Might/JySzE의 기본 mpv.conf
          + uosc, 기능이 풍부하지만 여전히 미니멀한 UI
          + thumbfast, uosc 또는 다른 커스텀 UI와 함께 사용할 수 있는 빠른 썸네일러
          + Eisa01의 SmartSkip, 인트로를 건너뛰는 등 오디오 기반 기능 제공
     * mpv는 다양한 스크립트를 지원함
          + 예를 들어, 시청 중인 비디오를 자르고 크롭할 수 있음
          + 다른 플레이어에서 본 적 없는 기능을 위한 핫키를 도입할 수 있음
          + input.conf를 사용하여 시청 중인 장면의 밝기와 색상을 정규화할 수 있음 (하드웨어 디코딩 사용 시 작동하지 않을 수 있음)
          + 비디오를 회전시키는 핫키도 설정 가능함
     * mplayer가 포크된 것을 몰랐음, 좋아 보임
          + 2000년대 초반에 mplayer를 사용한 주요 이유는 성능 때문이었음, CPU와 '부드러움' 측면에서 우수했음
          + 다른 플레이어는 끊김이 있었지만 mplayer는 그렇지 않았음 (모션 보간 없음)
          + 친구가 mplayer가 매우 정확하다고 말했음 (각 프레임이 정확히 같은 지속 시간을 가짐), 이것이 '부드러운' 느낌을 설명함
          + 이 부드러움의 장점이 여전히 있는지 궁금함, 왜 그렇게 느껴졌는지 아는 사람이 있는지 궁금함
"
"https://news.hada.io/topic?id=16294","Gitopper - 쿠버네티스 없이 Gitops 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Gitopper - 쿠버네티스 없이 Gitops 하기

     * Kubernetes를 사용하지 않는 사람들을 위한 GitOps 툴
     * 원격 git 저장소를 감시하고, 변경 사항을 pull하며, 서버(서비스) 프로세스에 HUP 시그널을 보내 리로드
     * 각 서비스는 실제로 필요한 파일만 보게 되는 sparse(하지만 전체 히스토리를 가진) git 체크아웃이 수행됨
     * 서비스에 Git 내 파일에 대한 접근 권한을 부여하기 위해 여러 바인드 마운트가 설정됨
     * 대상 디렉토리가 존재하지 않으면 현재 사용자로 생성됨(지정된 경우)
     * 단순히 리포지토리를 가져오는 것 이상의 기능을 제공하지는 않지만, Kubernetes와 같은 환경에 의존하지 않고도 GitOps 워크플로우를 사용할 수 있음
     * 서비스를 프로비저닝하는 데 사용하는 Git 저장소에는 각 서비스에 대해 최소한 하나의 (하위)디렉토리가 있어야 함
     * 지정된 경우 패키지를 설치하지만, 더 나은 방법이 있다고 가정하면 업그레이드나 다운그레이드는 하지 않음
     * 원격 인터페이스는 인증에 SSH 키를 사용함
     * 다음과 같은 기능이 구현됨:
          + Metrics: Git 해시를 내보내므로 롤아웃을 추적할 수 있음
          + Diff detection: metrics나 gitopperctl을 사용해 가능함
          + Out of band rollbacks: gitopperctl을 사용해 일반 Git 워크플로우를 우회함
          + No client side processing: 파일은 Git 저장소에 있는 그대로 사용됨
          + Canarying: 서비스에 체크아웃할 다른 브랜치를 제공할 수 있음
"
"https://news.hada.io/topic?id=16290","물건 분실 방지 방법? Holding pens 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      물건 분실 방지 방법? Holding pens 사용

물건을 잃어버리지 않는 방법? 보관함 사용

     ""안전한 곳에 두었음.""
     -- 엄마가 무언가를 잃어버렸을 때 항상 하시던 말씀

  왜 집 안에서 물건을 잃어버리는가?

     * 우리가 방해를 받거나 새로운 요구에 급히 대응해야 할 때, 물건을 어디에 둘지 빠르게 결정하게 됨
     * 현재의 정신 상태에 따라 물건을 두는 위치가 달라지지만, 그 상태는 일시적이어서 나중에 어디에 두었는지 잊어버리게 됨
     * 이상적인 해결책은 각 물건에 지정된 장소를 두고, 항상 그 장소에만 물건을 보관하는 것임
          + 예를 들어, 열쇠는 항상 오른쪽 뒷주머니, 배낭의 열쇠고리, 또는 침대 옆 서랍의 왼쪽 아래 칸에만 두는 것임

   그러나 우리는 자주 다음과 같은 문제에 직면함:
    1. 너무 일시적이거나 중요하지 않아서 기억할 만한 지정된 장소가 없는 물건
    2. 물건을 지정된 장소로 가져갈 시간이 없는 경우 (예: 다른 방에 있는 경우)

  해결책

    보관함

     * 각 방에 지정된 장소로, 임시로 두는 물건을 보관하는 곳임

   보관함의 특징:
    1. 약 12"" x 18"" 크기의 쟁반으로, 대부분의 물건을 놓을 수 있음
    2. 물건이 떨어지지 않도록 작은 테두리가 있음
    3. 모든 방에 위치하여, 보관함을 사용하는 에너지가 물건을 아무 곳에나 두는 것과 비슷함
    4. 물건을 영구적인 장소에 두지 않는 한, 항상 보관함을 사용함
    5. 정기적으로 청소함—이상적으로는 매일, 최대한 주 단위로—그래서 보관함이 저장 공간이 되지 않도록 함

GN⁺의 정리

     * 이 기사는 집 안에서 물건을 잃어버리지 않기 위한 실용적인 해결책을 제시함
     * 보관함을 사용하여 물건을 임시로 보관하고, 정기적으로 청소함으로써 물건을 잃어버리는 문제를 해결할 수 있음
     * 이 방법은 특히 바쁜 일상 속에서 물건을 쉽게 찾을 수 있도록 도와줌
     * 유사한 기능을 가진 제품으로는 IKEA의 다양한 정리함이나 Amazon에서 판매하는 다용도 트레이 등이 있음

        Hacker News 의견

     * 각 방의 입구/출구 근처에 ""출발 지점""을 두어 물건을 한꺼번에 옮기는 방법을 사용함
          + 예: 사무실에서 거실과 주방으로 갈 물건을 모아두고, 커피를 마실 때 한꺼번에 옮김
          + 물건이 항상 제자리에 있거나, 어디에 있을지 알 수 있음
     * 최고의 청소/정리 팁: 모든 물건을 토트백에 넣고, 매일 집안 곳곳에 배치함
          + 재정리 시간을 줄여줌
     * 일상생활에서 물리적 알고리즘과 데이터 구조를 사용하는 것을 좋아함
          + 예: 아침에 해야 할 일을 기억하기 위해 지갑이나 열쇠를 이상한 물건에 감아둠
          + 보충제를 기억하기 위해 쌓아두고, 맨 위에 있는 것을 먼저 섭취함
          + 옷장을 FIFO 큐로 정리하거나, 최근에 입은 옷을 왼쪽에 두어 쉽게 찾음
     * 필요한 물건을 여러 개 사서 집안 곳곳에 배치함
          + 예: 드라이버를 여러 개 사서 각 방에 배치함
          + 노트북 충전기, iPhone 충전기도 각각 따로 둠
     * 투명한 플라스틱 신발 상자에 라벨을 붙여 물건을 정리함
          + 예: 응급처치, 리모컨, 리본, 펜/연필 등
          + 피곤할 때는 물건을 제자리에 두지 못하는 경우도 있음
     * 모든 물건을 제자리에 두는 습관을 들여 10년 동안 물건을 잃어버리지 않음
          + 양말도 잃어버리지 않음
          + 세탁 후 바로 양말을 짝지음
     * Adam Savage의 팁: 새로운 물건을 어디에 둘지 빠르게 생각하고, 첫 번째로 떠오르는 곳에 보관함
          + 다음에 찾을 때 바로 찾을 수 있음
     * 물건을 잃어버리지 않기 위해 Tile 트래커를 사용함
          + 예: 열쇠, 지갑, 안경 등
          + 물건을 두는 지정된 장소를 생각해보겠지만, 잊어버릴 가능성이 큼
     * 물건을 눈에 잘 보이는 곳에 두는 것이 유용함
          + 예: 얕은 공구 서랍에 모든 드라이버를 보관함
          + 냉장고 뒤쪽은 물건이 과학 실험으로 변하는 곳임
     * ""홀딩 펜"" 아이디어는 좋지만, 내용물이 정리되지 않으면 잡동사니가 쌓일 수 있음
          + 일부 사람들은 물건을 나중에 정리하려고 홀딩 펜에 넣고, 결국 정리하지 않음
"
"https://news.hada.io/topic?id=16360","Alien – CUDA 기반 인공 생명 시뮬레이션 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Alien – CUDA 기반 인공 생명 시뮬레이션 프로그램

ALIEN - 인공 생명 세계 탐험

  ⚡ 주요 기능

    물리 및 그래픽 엔진

     * 입자를 사용하여 연체 및 강체 역학, 유체, 열 발산, 손상, 접착 등을 시뮬레이션함
     * 실행 중인 시뮬레이션과 실시간 사용자 상호작용 가능
     * 시뮬레이션은 CUDA를 통해 GPU에서 완전히 실행됨
     * CUDA-OpenGL 상호 운용성을 사용하여 OpenGL을 통한 렌더링 및 후처리

    인공 생명 엔진 확장

     * 다세포 생물은 입자 네트워크로 시뮬레이션됨
     * 유전 시스템과 세포 단위의 자손 구성
     * 고급 기능(예: 센서 및 근육)을 제어하기 위한 신경망
     * 다양한 색상을 사용하여 세포 유형을 사용자 지정 가능
     * 공간적으로 다양한 시뮬레이션 매개변수 지원

    광범위한 편집 도구

     * 입자와 연결을 조작하기 위한 그래프 편집기
     * 자유형 및 기하학적 그리기 도구
     * 맞춤형 생물을 설계하기 위한 유전 편집기
     * 대량 작업 및 (확대/축소) 스케일링 기능

    네트워킹

     * 내장된 시뮬레이션 브라우저
     * 시뮬레이션 파일 다운로드 및 업로드
     * 별을 주어 시뮬레이션을 추천

  ❓ 이 도구의 유용성

     * 호기심 충족: 자기 복제 기계가 등장하고 돌연변이가 활성화되면 시뮬레이션 자체가 모든 것을 수행함
     * 재미: 빠르고 현실적인 물리 엔진으로 수십만 대의 기계를 가속하고 파괴할 수 있음
     * 학문적 접근: 단순한 구성 요소에서 복잡성 또는 생명체와 유사한 구조가 어떻게 발생하는지에 대한 근본적인 질문 해결
     * 생성적 예술 도구: 진화는 새로운 형태와 행동을 창출하는 창의적인 힘임

  📘 문서

     * 이전 주요 버전에 대한 문서는 alien-project.gitbook.io/docs에서 확인 가능
     * 최신 버전은 프로그램 내 도움말 창과 도구 설명을 통해 간단한 문서와 사용자 안내 포함

  🖥️ 최소 시스템 요구 사항

     * 컴퓨팅 기능 6.0 이상의 Nvidia 그래픽 카드 필요

  💽 설치 프로그램

     * Windows용 설치 프로그램: alien-installer.msi (업데이트: 2024-08-17)

  🔨 소스 빌드 방법

     * 소스 코드를 얻으려면 적절한 디렉토리에서 다음 명령어 입력:
git clone --recursive https://github.com/chrxh/alien.git

     * 빌드 단계:
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build . --config Release -j8

  ⌨️ 명령줄 인터페이스

     * GUI를 사용하지 않고 시뮬레이션을 실행할 수 있는 CLI 포함
     * 예시:
.\cli.exe -i example.sim -o output.sim -t 1000

  🔎 문제 해결

    1. NVIDIA 그래픽 카드가 컴퓨팅 기능 6.0 이상인지 확인
    2. 최신 NVIDIA 그래픽 드라이버 설치
    3. 설치 디렉토리 이름에 비영어 문자가 포함되지 않도록 확인
    4. ALIEN이 자체 디렉토리에 쓰기 권한이 있는지 확인
    5. 여러 그래픽 카드가 있는 경우 기본 모니터가 CUDA 지원 카드에 연결되어 있는지 확인
    6. 통합 및 전용 그래픽 카드가 모두 있는 경우 고성능 그래픽 카드를 사용하도록 설정

  🌌 스크린샷

     * 방사선원 주변의 다양한 식물군
     * 세포 네트워크를 볼 수 있는 다양한 유형의 생물 클로즈업
     * 생태계를 공격하는 다양한 무리
     * 유전자 편집기

  🧩 프로젝트 기여

     * GitHub Issues, Pull requests 또는 Discussion 포럼을 통해 기여 가능
     * 새로운 콘텐츠 제공, 미디어 파일 제작 또는 공유, 버그 보고, 기능 요청, 질문 또는 피드백 제공
     * 버그 수정, 코드 정리, 최적화 또는 소규모 조정에 대한 Pull requests 환영
     * 새로운 기능 구현, 리팩토링 또는 주요 변경 사항에 대한 사전 협의 필요

  💎 크레딧 및 종속성

     * Christian Heinemann이 주로 개발 및 유지 관리
     * 사용된 외부 라이브러리: CUDA Toolkit, Dear ImGui, ImPlot, ImFileDialog, boost, Glad, GLFW, glew, stb, cereal, zlib, zstr, OpenSSL, cpp-httplib, googletest, vcpkg, WinReg, CLI11

  🧾 라이선스

     * ALIEN은 BSD 3-Clause 라이선스 하에 라이선스됨

GN⁺의 정리

     * ALIEN은 인공 생명 시뮬레이션 도구로, CUDA 기반의 2D 입자 엔진을 사용하여 연체 및 유체를 시뮬레이션함
     * 사용자가 다양한 생물체를 설계하고 진화 과정을 관찰할 수 있는 재미있고 교육적인 도구임
     * 복잡한 생물 시스템의 진화 조건을 이해하는 데 도움을 줄 수 있음
     * 유전자 편집기와 같은 다양한 편집 도구를 제공하여 사용자 맞춤형 생물체 설계 가능
     * NVIDIA 그래픽 카드가 필요하며, 최신 드라이버와 호환성 문제를 확인해야 함

        Hacker News 의견

     * 초보자를 위한 추천 자료: https://natureofcode.com/을 추천함
          + 초보자를 대상으로 하며 JS 라이브러리를 사용하지만, 제시된 아이디어는 일반적임
     * Alien 시뮬레이션 경험: 몇 달 동안 Alien 시뮬레이션을 실행 중임
          + ""RGB Triad"" 초기 설정을 사용했으며, 세 가지 유형의 생명체가 복잡한 세포 구조를 형성함
          + 기하학적 ""결정"", 다른 생명체를 먹으려는 긴 끈, 벽을 형성하는 가시 구조 등이 있음
     * Alien 시뮬레이션 프로젝트: 이 프로젝트는 놀라움
          + 자신의 콘솔 기반 프로그램은 느리게 진행되지만, 이 프로젝트는 매우 빠름
     * 플래시 게임 기억: 작은 입자가 고유한 행동을 하는 플래시 게임을 기억함
          + 각 입자는 충돌, 반응, 변형 또는 다른 입자를 파괴할 수 있었음
          + Emergent gameplay는 항상 재미있음
     * 비디오 링크 공유: GitHub에서 비디오를 찾기 어려워 여러 링크를 공유함
          + https://www.youtube.com/@alien-project/videos
          + https://www.youtube.com/watch?v=qwbMGPkoJmg
          + https://www.youtube.com/watch?v=w9R6zrdl6jM
          + Linux에서 작동 여부는 불확실하며, Windows + NVidia 설정에 제한될 수 있음
     * 뷰 이동 방법 질문: 뷰를 어떻게 이동하는지 궁금함
     * 웹사이트 링크: https://alien-project.org/
     * AMD 가능성: AMD에서도 실행 가능할 수 있음
          + 일부 사용자가 시도 중임: https://github.com/chrxh/alien/issues/99
     * Permutation City와의 유사성: Permutation City의 시작과 유사함
     * 소프트웨어 평가: 이 소프트웨어는 매력적임
          + 잠시 사용해봤으며, 작은 진화 샌드박스임
"
"https://news.hada.io/topic?id=16307","Spice: Zig에서 서브나노초 오버헤드로 세밀한 병렬 처리 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Spice: Zig에서 서브나노초 오버헤드로 세밀한 병렬 처리 기술

Spice: Sub-nanosecond Overhead의 병렬 처리

   Spice는 Zig에서 _heartbeat scheduling_을 사용하여 매우 효율적인 병렬 처리를 달성함
     * 서브 나노초 오버헤드: 함수에 병렬 처리 기능을 추가해도 나노초 미만의 오버헤드만 발생함
     * 경쟁 없음: 스레드가 동일한 작업을 두고 경쟁하지 않음. 시스템에 스레드를 추가해도 프로그램이 느려지지 않음

  성능 비교

     * Rayon (Rust): 4개의 스레드에서 약 15ns의 오버헤드 발생. 16개의 스레드에서 약 14배의 속도 향상
     * Spice (Zig): 16개의 스레드에서 약 11배의 속도 향상. 오버헤드가 낮아 기본 성능과 거의 동일함

  작은 트리에서의 성능

     * 작은 트리: 프로그램의 총 실행 시간이 1.56 마이크로초. 스레드를 추가할수록 성능이 저하됨
     * 병렬 처리의 일반적인 지혜: 충분한 작업이 없으면 병렬 처리가 가치가 없음

  Spice의 목표

     * 목표: 병렬 처리를 추가해도 프로그램이 느려지지 않도록 하는 것
     * 짧은 실행 시간: 실행 시간이 짧으면 멀티스레딩이 작동하지 않음. 추가된 스레드는 대기 상태로 전환됨

  Spice 사용법

const spice = @import(""spice"");

fn sum(t: *spice.Task, node: *const Node) i64 {
    var res: i64 = node.val;

    if (node.left) |left_child| {
        if (node.right) |right_child| {
            var fut = spice.Future(*const Node, i64).init();
            fut.fork(t, sum, right_child);
            res += t.call(i64, sum, left_child);

            if (fut.join(t)) |val| {
                res += val;
            } else {
                res += t.call(i64, sum, right_child);
            }
            return res;
        }
        res += t.call(i64, sum, left_child);
    }

    if (node.right) |right_child| {
        res += t.call(i64, sum, right_child);
    }

    return res;
}

    1. 모든 병렬 함수는 _task_를 매개변수로 받아야 함
    2. 함수를 직접 호출하지 말고 t.call을 사용해야 함
    3. fork를 호출하여 다른 스레드에서 작업을 설정함
    4. 함수는 자체적으로 의미 있는 작업을 수행해야 함
    5. join을 호출하여 다른 스레드의 작업 완료를 기다림
    6. join이 null을 반환하면 작업을 직접 수행해야 함

  Work-stealing과 비효율성

     * Work-stealing: 각 스레드는 자체 로컬 작업 큐를 가짐. 큐가 비면 다른 스레드의 작업을 훔침
     * 비효율성: 동적 디스패치, 로컬이 아닌 작업 큐, 스핀 락

  구현 세부 사항

    정적 디스패치 최적화

     * 코드 블록 병렬 실행: fork와 join을 사용하여 코드 블록을 병렬로 실행함
     * 중복 제거: 코드 블록이 다른 스레드에서 실행되지 않으면 순차적으로 실행됨

    저오버헤드 하트비트 신호

     * 하트비트 스케줄링: 100 마이크로초마다 로컬 작업 큐를 확인하고 다른 스레드로 작업을 보냄
     * 효율성: 하트비트가 발생하지 않을 때 함수가 효율적으로 동작해야 함

    글로벌 뮤텍스

     * 글로벌 뮤텍스 사용: 글로벌 뮤텍스는 경쟁이 없을 때 문제가 없음

    분기 없는 이중 연결 리스트

     * 이중 연결 리스트: 작업 큐를 관리하기 위해 사용됨. 분기 없이 동작함

    스택 사용 최소화

     * 스택 사용 최적화: Future의 상태를 최소화하여 스택 사용을 줄임

    레지스터를 통한 값 전달

     * 레지스터 사용: Task 구조체의 필드를 레지스터로 전달하여 성능 최적화

  벤치마크

     * 벤치마크: 초기 개발은 단일 벤치마크를 중심으로 이루어짐

  감사의 글

     * 하트비트 스케줄링 연구: 여러 연구 논문에 기반하여 개발됨

  한계

     * 제약 조건: 잘못 사용하면 이상한 동작이 발생할 수 있음
     * 테스트 부족: 테스트 커버리지가 부족함
     * 배열/슬라이스 지원 부족: 배열/슬라이스에 대한 병렬 처리 지원이 부족함
     * 문서 부족: 사용법에 대한 문서가 부족함
     * 추가 벤치마크 부족: 추가 벤치마크가 필요함
     * 에러 처리: 에러 처리에 대한 고려가 부족함
     * ReleaseSafe 테스트 부족: ReleaseSafe 모드에서의 테스트가 필요함

  FAQ

     * 이름의 유래: 매우 세밀한 병렬 처리를 의미함
     * Zig로 구현된 이유: 다양한 언어에서 구현 가능함
     * Rust에서의 안전한 병렬 처리: Rust의 엄격한 의미론으로 인해 초기 아이디어 탐색이 어려움

GN⁺의 정리

     * Spice는 Zig에서 매우 효율적인 병렬 처리를 제공하는 연구 프로젝트임
     * 서브 나노초 오버헤드와 경쟁 없는 병렬 처리로 성능을 극대화함
     * 하트비트 스케줄링을 통해 작업을 효율적으로 분배함
     * 제약 조건과 테스트 부족 등의 한계가 있음
     * Rust와 같은 다른 언어에서도 유사한 접근 방식을 탐구할 가치가 있음

        Hacker News 의견

     * 이 구현은 최근 연구인 ""heartbeat scheduling""에 기반을 두고 있으며, 병렬성 생성의 오버헤드를 분산시켜 동적 자동 세분화 제어를 달성함
          + 관련 논문:
               o (2018) Heartbeat Scheduling: Provable Efficiency for Nested Parallelism
               o (2021) Task Parallel Assembly Language for Uncompromising Parallelism
               o (2024) Compiling Loop-Based Nested Parallelism for Irregular Workloads
               o (2024) Automatic Parallelism Management
     * 코드의 세부 사항을 읽어보진 않았지만 ""sub-nanosecond overhead""는 오해의 소지가 있으며 마케팅 용어임
          + 첫 번째로, 측정은 ""thing 당 시간""이라는 복잡한 방식으로 보이며, 스레드 수는 ""thing"" 수보다 훨씬 적음
     * 이 분야에 익숙하지 않지만, 제시된 동시성 모델이 마음에 듦
          + README가 잘 작성되어 있어 내용을 이해하기 쉬웠지만, 몇몇 부분은 이해하기 어려웠음
          + 다행히 코드가 읽기 쉬움
     * 흥미로운 연구 작업이며, 코드 외에도 좋은 논리와 잘 작성된 문서가 있음
          + 2018년 heartbeat scheduling 논문도 흥미로움
     * 프로젝트의 한계 목록:
          + 한계 목록 링크
     * 설명에 따르면, 이 구현은 작업자들이 나노초 수준의 지연 시간을 달성하기 위해 바쁜 대기를 사용함
          + 수만 개의 작업을 가진 대형 애플리케이션에서 바쁜 대기가 얼마나 현실적인지 궁금함
          + 작업이 비동기적이라면 (즉, 스레드 기반이 아닌) 실행자의 스레드 풀 크기만큼의 대기자가 있을 수 있음
          + 이러한 아키텍처의 에너지 소비가 더 높을 것임
     * 작업 생산자가 소비자를 바쁜 대기 없이 깨우는 더 빠른 방법이 있는지 궁금함
          + 생산자 시간 슬라이스에서 소비자를 실행하여 가능할지 궁금함
          + 사용자 공간 FUTEX_WAKE 작업을 통해 소비자를 깨우는 일반적인 페널티를 절반으로 줄일 수 있을지 궁금함
     * 흥미롭고 훌륭한 논문들과 연결되어 있음
          + OpenMP 작업과의 비교가 있었으면 좋겠음
          + Rayon이 약간 느리다는 평판이 있음
     * 협력적 스케줄링은 훌륭한 메트릭을 가진 많은 패턴의 기초임
     * 훌륭함
     * 벤치마크 관련 README도 참고:
          + 벤치마크 README 링크
"
"https://news.hada.io/topic?id=16282","Agile이 소프트웨어 혁신을 죽이고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Agile이 소프트웨어 혁신을 죽이고 있다

     * Black Hat 컨퍼런스에서 Signal의 창립자 Moxie Marlinspike는 애자일 개발 때문에 지난 20년간 소프트웨어 혁신이 사라지고 있다고 주장함
     * 개발자들이 ""블랙박스 추상화 레이어""에 갇혀 혁신에 필요한 자유를 잃어버렸다고 지적
     * ""엔지니어링 조직을 관리하는 사람이라면 누구나 애자일의 하위 개념이거나, 파생된 개념이거나, 애자일의 영역에 있거나, 어떤 식으로든 관련된 경영 철학을 가지고 있을 것""
          + 개발자가 엔지니어링 전문 지식과 기존 기술의 새로운 기능을 볼 수 있는 비전을 결합하는 방식으로 상향식으로 움직이는 대신,
            Agile 팀은 개별로 Silo화(고립)되어 서로 따로 작업하고 다른 팀이 무엇을 하고 있는지 파악할 수 없게 된다고 주장
     * 또한 마무리 세션에서 Thistle Technologies의 창립자이자 CEO인 Window Snyder는 이런 블랙박스 팀은 또한 자체 제품이 작동하는 원리에 대한 가시성이 부족한 경향이 있다고 덧붙임
          + 스나이더는 프로그래밍을 배우는 학생들이 저수준 언어나 기계 코드와 상호 작용을 배우는 것이 아니라, 앱 개발을 원활하게 해주는 고급 언어만 배우기 때문에 엔지니어가 퍼즐 조각이 서로 연결된 더 큰 전체에 어떻게 들어맞는지 이해하는 데 필요한 컨텍스트가 없다고도 주장

보안 연구자들이 혁신의 열쇠를 쥐고 있다

     * Marlinspike는 또한 지난 수십년간 소프트웨어 엔지니어링은 더 빠르고, 더 유연해지고, 더 나아가기 위해 추상화되어 온 반면, 보안 연구자들은 추상화 너머를 보려고 노력해 왔다고 이야기함
          + ""보안은 추상적인 것을 들여다보고 실제로 어떻게 작동하는지, 그 밑에 무엇이 있는지, 때로는 처음에 그것을 만든 사람보다 더 잘 이해하기 위한 과정""
     * 따라서 보안 연구자들이 새로운 혁신을 이끌어낼 열쇠를 쥐고 있다고 주장
     * 소프트웨어를 이해하는 것이 마법을 이해하는 것과 같으며, 보안 전문가들이 ""도서관에 앉아서 마법을 연구하는 사람들""이라는 비유를 들기도 함

GN⁺의 의견

     * 애자일의 근본적인 문제점을 날카롭게 지적한 Marlinspike의 통찰력 있는 발언이었음
     * 추상화와 빠른 개발 속도에만 집착하다 보니 개발자들이 점점 기초적인 개념들을 모르게 되고 있다는 점에 공감함
     * 보안 연구자들의 역할에 주목한 점이 인상 깊었음. 보안은 추상화 뒤에 숨겨진 실체를 파헤치는 작업이기에 혁신의 원동력이 될 수 있음
     * 어찌보면 소프트웨어 엔지니어들이 더 깊은 이해를 추구해야 한다는 메시지를 전달함
     * 애자일의 장점도 분명히 존재하므로, 균형 잡힌 접근이 필요할 것임. 애자일의 민첩성과 유연성을 유지하면서도 기초를 탄탄히 다지는 방안을 모색해야 함
     * 이를 위해서는 개발 교육과정부터 개선이 필요함. 고레벨 언어뿐 아니라 저레벨 언어, 컴퓨터 구조 등 기초 과목 교육을 강화해야 할 것임

   애자일을 잘못 이해한 관리자들의 문제를 애자일의 문제로 오해하고 있는 것 같네요.

   시대의 흐름에 따라 저수준 지식을 배워서 roi가 나오지 않으니 고수준 지식만 배우는데 그치는 것 같기도 합니다

   왜 애먼 애자일을 걸고 넘어지는지 ...

   north-south랑 east-west 개념을 섞어서 얘기해서 내용이 햇갈리네요.
   다른 팀에 뭐하는 지 모른다는 건 에자일 자체보다 cross-functional 조직 구조가 더 문제인 거 아닌가 싶고요.

   low level에 대해서 잘 모르는 거는, 내용보면 ""저러면 low level도 잘 모르는 경향이 있다"" 이런 소리하고 있는데요.

   다른 팀이 뭐하는 지 모르는 건 약간이라도 에자일과 관계 있다고 쳐도, low level 모르는 게 에자일이랑 뭔 상관인지 이해할 수가 없군여 ㅋㅋㅋㅋ

   굳이 따지자면 오픈 소스가 광범위하게 퍼지면서 굳이 직접 다 만들 필요가 없으니, reinventing wheel을 안하고, low level 쪽은 그냥 다 가져다 쓰다보니 굳이 공부 안한다가 오히려 더 가까운 거 아닌지.

   굳이 저 말을 이해해보자면, 에자일 때문에 빨리 만들기만해서 low level 공부 안한다 뭐 이렇게는 이해해 볼수 있겠지만, 필요없으니까 안한다가 더 맞지 않을까 싶군여.

   애자일로 하여금 넓은 관점으로 문제를 바라보고 오래도록 지속가능하도록 만드는 선택이 등한시되어가고 있다고 생각하고, 이것은 소프트웨어 관점에서도 눈앞의 문제를 해결하는데에만 집중하게 되어 가고 있다고 생각하긴 합니다.
   덮어놓고 일단은 동작하게 만드는것이 애자일한 것은 아니겠지만 매우 속도에 치중된 선택을 하게되는 경향은 생기는 것 같고, 이것이 깊은 이해를 추구하기 어렵게 만드는 요인이 될 수 있다고 생각해요.

   엔지니어링 조직에 의사결정권이 없는 문제의 원인을 왜 애자일에서 찾으려고 하는지 모르겠습니다

   다른 팀이 뭘하는지 모르는 상황이 애자일과 무슨 관계인지... ;;;

   그런데 Window Snyder 라는 이름은 굉장히 특이하네요...

   뭔가 원본 영상을 보고 싶은데 아직 없군요. 얼마 지나면 공식 유튜브에 올라오지 않을까 싶네요
   https://www.youtube.com/@BlackHatOfficialYT/

        Hacker News 의견

     * 현대 기업 구조가 문제의 근원임
          + 책임과 의사결정이 기업 계층 구조를 따라 올라가야 한다는 현대 관리 이론이 있음
          + 하위 직원들이 제품에 대해 가장 적게 알고 있다고 여겨짐
          + 그러나 실제로는 현장 직원들이 가장 많은 정보를 가지고 있음
          + 소프트웨어 엔지니어링을 조립 라인 프로세스로 만들면 혁신이 멈추게 됨
          + 평등한 관리 계층 구조가 답은 아니지만, 현장 직원들을 무력화하지 않는 방법이 필요함
          + <i>Reinventing Organisations</i> 책이 혁신적인 기업 구조에 대해 설명함
     * 애자일의 좋은 아이디어들이 일반 소프트웨어 엔지니어링에 흡수됨
          + 애자일 프로그래머는 엄격한 스탠드업 미팅, 칸반 보드 등을 따르는 것으로 여겨짐
          + 애자일이 지식의 분할과 소프트웨어 엔지니어링의 기술 저하를 초래했다고 생각하지 않음
          + 대량 생산의 경향으로 인해 발생한 문제임
          + 자동차 회사나 가구 공장에서도 비슷한 현상이 나타남
     * 애자일, 스크럼, OKR에 대한 불만
          + 이들 모두가 자유와 책임을 하위 직원들에게 밀어준다고 약속하지만, 실제로는 중앙 집중화됨
          + OKR을 반대로 적용해보고 싶음
          + 모든 직원이 자신의 영역에서 주요 결과를 정의하고, 관리자가 이를 기반으로 팀의 방향을 설정해야 함
          + 하향식이 아닌 상향식 접근이 필요함
          + 잘 고용하고, 잘 훈련시키고, 직원들을 신뢰해야 함
     * 백로그 정리 회의에서의 경험
          + 익숙하지 않은 코드의 버그 수정을 추정해야 했음
          + 추정이 어려워 대충 숫자를 말했음
          + 애자일이 세 곳에서 비슷하게 운영됨
     * 애자일의 문제점에 대한 이론
          + 작업을 작은 부분으로 나누는 것이 유익하지만, 프로그래밍에서는 창의성이 필요함
          + 작업을 나누는 과정에서 많은 정보가 손실됨
          + 개발자는 창의적인 해결책을 찾아야 하지만 필요한 정보를 얻지 못함
          + 경험 많은 개발자나 더 나은 설계 다이어그램과 문서화가 필요함
     * 소프트웨어 품질 저하
          + 지난 몇 십 년 동안 소프트웨어가 나빠짐
          + 더 강력한 기계를 사용하지만 반응성이 떨어짐
          + 애자일의 부상과 관련이 있을 수 있음
     * 엔지니어가 코드의 일부를 ""소유""하게 해야 함
          + 팀의 소프트웨어가 최고였던 시기임
     * 일일 스탠드업 회의를 피한 경험
          + 지속적인 회고와 작업 분할이 비효율적이었음
          + 비기술적 관리자에게만 유익했음
     * 대규모 조직의 문제
          + 개발자들이 더 이상 리드하지 않음
          + 상위에서 비전, 제품, UX, 프로젝트 관리가 결정됨
          + 개발자들은 클라우드 기술을 사용해 작업함
          + 전체 그림을 이해하거나 중요한 제안을 할 수 없음
     * 소프트웨어 개발의 ""마법""을 되찾아야 한다는 의견
          + 20년 이상 업계에 있었음을 알 수 있음
          + 젊은 프로그래머들과 시간을 보내면 여전히 마법이 존재함
          + 20년 전에도 비슷한 불만이 있었지만, 여전히 재미있게 작업했음

     책임과 의사결정이 기업 계층 구조를 따라 올라가야 한다는 현대 관리 이론이 있음

   이건 관료화된 조직이 보이는 특성이 아닐까요?
"
"https://news.hada.io/topic?id=16400","Pragtical - 실용적인 코드 편집기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Pragtical - 실용적인 코드 편집기

     * ""Practical + Pragmatic""
     * 30MB의 램, 5MB의 디스크 용량 만으로 실행 가능한 경량 편집기
     * SDL + C + Lua 로 개발되어 윈/맥/리눅스 지원하는 크로스 플랫폼. 타 플랫폼 이식도 용이
     * 구문 강조, 멀티 커서, 명령 팔레트 등의 기능 지원. LSP 같은 기능들은 플러그인으로 지원
     * Lua 와 C API로 마음대로 확장 가능
     * MIT 라이센스 오픈소스
     * Lite XL에서 포크된 코드 에디터임

Pragtical의 목표

     * Pragtical은 성능과 확장성을 유지하면서 기능을 확장하여 더 나은 경험을 제공하는 것을 목표로 함
     * 빌드 수를 줄이고 자주 릴리스하는 방식으로 릴리스 프로세스를 단순화하고 있음
     * JIT
          + Pragtical은 LuaJIT를 우선적으로 사용하는 접근 방식을 택함
          + LuaJIT는 성능 이점과 FFI를 통해 native C 라이브러리와의 쉬운 인터페이싱을 제공함
          + LuaJIT는 안정적인 개발 생태계를 제공할 수 있는 성숙한 Lua 구현체
     * Threading
          + 파일 검색 및 리플레이스와 같이 성능 향상이 분명한 경우 코어에서 사용
     * Widgets
          + 코어의 일부로 더 긴밀하게 통합되어 쉬운 GUI 개발과 재사용성을 보장함
          + 플러그인 개발자가 필요할 때 더 쉽게 사용자 인터페이스를 개발할 수 있도록 함
     * Settings UI
          + 터미널 에디터를 사용하지 않는다면 point-and-click 방식을 찾고 있다는 의미이므로 기본적으로 그래픽 인터페이스를 포함하여 환경설정을 조정함
          + 그러나 Lua를 통한 에디터 구성은 계속 작동할 것임
     * Encoding
          + UTF-8이 편의성을 위해 텍스트 문서의 선호 인코딩으로 자리잡았지만, 때로는 다른 인코딩의 문서를 만날 수 있음
          + 필요할 때 다른 인코딩으로 문서를 로드하고 저장하는 것을 지원할 것
     * IPC
          + 공유 메모리 기능이 코어의 일부이며 현재 열려 있는 인스턴스 간에 파일 열기 및 탭 끌기를 허용하기 위해 IPC 플러그인이 기본으로 제공됨

   폴더 열기 기능은 창 위쪽 가운데에 있는 Open project 버튼이나 Ctrl-Shift-P 'Open folder' 검색하시면 됩니다. 반응속도 빠른 건 마음에 드는데, 아무리 코어라고는 하지만 일상용으로는 못 쓸 것 같네요. 파일이름 중 한글은 표시 안 됩니다. 폰트를 바꿔야 표시됩니다

   VSCode 쓰는게 어떤지ㅎㅎ
"
"https://news.hada.io/topic?id=16401","AI가 Hype를 잃어가고 있다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           AI가 Hype를 잃어가고 있다

     * 실리콘밸리의 기술 전문가들이 최근 몇 주 동안 어려움을 겪고 있음
     * 많은 투자자들이 AI가 그들이 추구하는 막대한 이익을 가져다주지 않을 것이라고 우려중
     * AI 혁명을 주도하는 서구 기업들의 주가가 지난달 정점을 찍은 이후 15% 하락함
     * ChatGPT와 같은 서비스에 동력을 공급하는 LLM의 한계에 대해 많은 관찰자들이 의문을 제기하고 있음

기업의 AI 사용 현황

     * 빅테크 기업들은 AI 모델에 수십억 달러를 투자했고, 미래에 더 엄청난 지출을 약속하고 있음
     * 그러나 Census Bureau의 최신 데이터에 따르면 미국 기업의 4.8%만이 상품과 서비스 생산에 AI를 사용하고 있으며, 이는 올해 초 5.4%의 최고치에서 하락한 수치임
     * 향후 1년 내에 AI를 사용할 계획인 기업도 비슷한 비율임

Hype Cycle에 대한 설명

     * Gartner라는 리서치 회사가 대중화한 용어이자 실리콘밸리에서 상식으로 여겨지는 ""Hype Cycle""에 대해 언급함
     * 초기에는 비이성적인 열광과 과잉투자 기간을 거친 후, 뜨거운 신기술은 ""환멸의 깊이""에 빠지게 되며, 이 시기에는 정서가 악화됨
     * 기술 도입이 너무 느리게 진행되고 있으며 이익을 내기 어렵다는 우려가 모두에게 퍼짐
     * 그러나 환멸의 시기 이후에는 기술이 반등하게 됨
     * 열광의 물결과 함께 이루어진 투자는 인프라의 대규모 구축을 가능하게 하고, 이는 기술이 주류 채택을 향해 나아가도록 함
     * Hype Cycle이 세계의 AI 미래에 대한 유용한 지침이 될 수 있을지에 대해 질문을 던짐

기술 발전에서의 Hype Cycle 사례

     * 19세기 영국의 철도 열풍과 거품, 그 이후의 철도 회사들의 선로 건설을 통한 경제 변혁
     * 1990년대 인터넷에 대한 열광, 2000년 시장 붕괴와 135개 대형 닷컴 기업의 실패, 그러나 통신 회사들의 광섬유 케이블 투자로 오늘날 인터넷의 인프라가 마련됨

AI의 Hype Cycle 가능성에 대한 의견

     * AI는 철도나 닷컴만큼의 대규모 붕괴를 경험하지는 않았지만, 현재의 불안감은 AI의 세계 지배가 다가오고 있음을 보여주는 증거일 수 있음
     * ""AI의 미래는 다른 모든 기술과 마찬가지일 것이다. 거대하고 비싼 인프라 구축, 사람들이 AI를 생산적으로 사용하는 방법을 모른다는 것을 깨달았을 때 거대한 붕괴, 그리고 그것을 알아냄에 따라 서서히 부활할 것이다.""라고 경제 논평가 Noah Smith는 말함

Hype Cycle에 부합하지 않는 기술들

     * AI 자체도 수십 년 동안 열광과 절망의 시기를 경험해 왔지만, Hype Cycle의 최종 단계로 나아가지는 않았음
     * 1960년대 AI에 대한 열광, 1970년대와 1990년대의 AI 겨울, 2020년까지 AI에 대한 연구 관심 감소 후 생성형 AI 등장으로 다시 급증
     * 클라우드 컴퓨팅, 태양광 발전, 소셜 미디어 등은 Hype Cycle과는 다른 직선적인 발전 양상을 보임
     * Web3, 3D 프린터, 탄소 나노튜브 등은 열광에서 공포로 분위기가 바뀌었지만 의미 있는 수준으로 돌아오지는 않음

Hype Cycle의 경험적 규칙성 검증의 어려움

     * Hype Cycle이 경험적 규칙성인지 검증하기가 쉽지 않음
     * ""감정 기반 데이터이기 때문에 확실하게 말하기 어렵다""고 펜실베이니아 대학의 Ethan Mollick은 지적함

The Economist의 Hype Cycle 데이터 분석

     * Gartner의 수십 년간의 유망 기술 Hype Cycle 배치 데이터와 자체 데이터 분석을 결합하여 분석을 시도함
     * 획기적인 기술을 시간 경과에 따라 추적한 결과, 혁신에서 흥분, 낙담, 광범위한 채택에 이르는 과정을 거치는 기술은 소수(약 20%)에 불과함
     * 많은 기술이 그러한 롤러코스터를 타지 않고 널리 사용됨
     * 환멸의 늪에 빠진 모든 형태의 기술 중 60%는 다시 떠오르지 않는 것으로 추정됨
     * ""놀랍게도 많은 기술 트렌드가 한때 유행에 불과하다""는 Michael Mullany의 결론과 유사함

AI 혁명의 가능성과 도전

     * AI는 여전히 세상을 혁신할 수 있음
     * 빅테크 기업 중 하나가 돌파구를 마련할 수 있음
     * 기업들이 AI가 제공하는 이점을 깨달을 수 있음
     * 그러나 현재 빅테크의 도전 과제는 AI가 실물 경제에 제공할 수 있는 것이 있다는 것을 증명하는 것임
     * 성공이 보장되어 있지는 않음

결론

     * AI의 미래에 대한 감각을 얻기 위해 기술의 역사를 살펴본다면, Hype Cycle은 불완전한 가이드임
     * ""쉽게 얻고 쉽게 잃는다(Easy Come, Easy Go)""는 표현이 더 나은 가이드가 될 수 있음

GN⁺의 의견

     * AI 기술의 발전과 상용화에 있어 Hype Cycle이 반드시 적용되는 것은 아님. 기술마다 다양한 발전 양상을 보일 수 있음
     * 현재 AI에 대한 투자 감소와 우려가 있지만, 이것이 AI의 미래 가능성을 부정하는 것은 아님. 오히려 기술 발전 과정에서 나타나는 자연스러운 현상일 수 있음
     * 기업들의 AI 활용이 아직 초기 단계이기 때문에, 실물 경제에 미치는 영향이 가시화되기까지는 시간이 더 필요할 것으로 보임
     * AI가 기존 산업을 얼마나 빠르고 광범위하게 변화시킬 수 있을지는 불확실하지만, 장기적으로는 사회 전반에 큰 영향을 미칠 것으로 예상됨
     * 빅테크 기업들은 AI가 가진 한계를 극복하고 실질적인 가치를 창출할 수 있는 방안을 모색해야 할 것임. 단순한 기술 개발 경쟁을 넘어 사회적 책임과 윤리 문제도 함께 고려해야 함

   제목만 봐서는 AI hype를 경고하는 글일 거라 생각했는데, 내용은 hype cycle에 대한 종합적인 분석에 가깝네요.

   사실 AI는 장기적으로 바라봐야 그 진가가 보이지만...
   투자자들은 그런 걸 기다리는 걸 별로 안좋아하긴 합니다.

   한국은 눈에 보이지 않으면 미래가 없다고 단정짓는 습성 때문에 AI 미래가 불투명하죠.
   뭐 이미 한국에서는 1년 단위로 실적 내라고 나라에서부터 압박하는데 미래가 있겠습니까.

        Hacker News 의견

     * 'API wrapper' 프로젝트와 스타트업의 과대광고는 줄어들 것이라는 의견이 있음
          + LLMs의 한계는 아직 멀었음
          + 특정 분야에 맞춘 LLMs가 전문가 수준의 성능을 보일 것임
          + 이러한 모델들이 일반 목적의 MoEs와 결합될 것임
          + LLMs, RL 등 외에도 새로운 접근법이 발견되고 완성될 것임
          + 실제 한계는 아직 멀리 있음
     * AI가 업무 흐름을 완전히 변화시켰음
          + Claude Sonnet가 프로그래머로서의 업무를 변화시켰음
          + Microsoft 같은 대기업은 AI를 충분히 활용하지 못하고 있음
          + 대기업은 변화가 느리게 일어날 것임
          + 인터넷/닷컴 붕괴와 비슷한 상황일 것임
     * AI 데이터베이스 정리를 시도했으나 ChatGPT가 여러 번 실수를 저질렀음
          + 엑셀로 작업하는 것이 더 나았을 것임
     * AI에 대한 반응은 양극화됨
          + 일부는 AI가 업무 흐름을 변화시켰다고 생각함
          + 일부는 과대광고라고 생각함
          + ChatGPT-4가 다양한 작업에서 인상적이었음
          + 초기 경험이 나쁘면 AI를 무시할 가능성이 있음
     * 신경과학자로서 AI의 발전을 놀랍게 보고 있음
          + AI가 생물학적 지능과 비교될 때 매우 강력함
          + AI가 전기를 많이 소비하고 취약점이 있지만, 인간보다 1000배 더 능력 있을 것임
          + 급진적인 비선형 변화가 예상됨
     * 새로운 기술이 많은 문제에 적용될 수 있어 과대광고가 발생함
          + 시간이 지나면 실용적인 적용만 남을 것임
     * AI가 요약, 설명, 코딩 지원에 유용함
          + 그러나 예술가, 작가의 표절 문제와 일자리 감소 문제도 있음
          + AI가 인간성을 향상시키기보다는 과대광고에 그칠 가능성이 있음
     * GPT-4가 나온 지 1.5년밖에 안 됐음
          + 대기업은 아직 AI를 충분히 활용하지 못하고 있음
          + 과대광고가 지속 가능성을 의미하지 않음
     * ChatGPT가 놀라웠음
          + 텍스트 데이터가 부족해 이제 비디오 데이터로 전환됨
          + AI가 경제적 이익을 제공할 것임
          + AI가 직원의 생산성을 두 배로 높일 것임
          + 모든 기업이 AI를 도입할 것임
"
"https://news.hada.io/topic?id=16291","Oscar - 구글의 오픈소스 컨트리뷰터 에이전트 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Oscar - 구글의 오픈소스 컨트리뷰터 에이전트 아키텍처

     * 오픈소스 유지 보수를 위한 자동화된 도우미 ""에이전트""를 만들어 오픈 소스 소프트웨어 개발을 개선하는 것을 목표로 하는 프로젝트
          + 오픈소스 유지 관리와 관련된 반복 작업의 양을 줄일 수 있을 것
     * 대형 언어 모델(LLM)의 자연어 의미 분석 능력과 자연어 명령어와 프로그램 코드 간 변환 능력은 에이전트가 사람들과 더욱 원활하게 상호 작용할 수 있는 새로운 기회를 만듦
     * LLM은 에이전트의 일부분일 것이며, 에이전트 동작의 대부분은 표준적이고 결정적인 코드를 실행하는 것이 될 것
     * Oscar는 개발에 초점을 맞춘 LLM 사용과 달리 코드 작성 과정을 보완하거나 대체하려고 하지 않음
     * 대신 들어오는 이슈 처리, 질문을 기존 문서와 매칭하는 등 재미없는 부분에 초점을 맞추는 아이디어

프로젝트 목표

     * 이슈 해결을 위한 유지보수 노력 감소 [해결이 항상 수정을 의미하는 것은 아님]
     * 변경 목록(CL) 또는 pull request(PR) 해결을 위한 유지보수 노력 감소 [해결이 항상 제출/병합을 의미하는 것은 아님]
     * 포럼 질문 해결을 위한 유지보수 노력 감소
     * 더 많은 사람들이 생산적인 유지관리자가 될 수 있도록 지원

접근 방식

     * 오픈 소스 유지 관리의 반복 작업은 Go 프로젝트에만 국한된 것이 아니므로, 모든 소프트웨어 프로젝트가 재사용하고 확장할 수 있는 아키텍처를 구축하는 것이 목표
     * 현재까지 Oscar의 중요한 부분이 될 세 가지 기능을 식별:
         1. 기여자 상호 작용 중 관련 프로젝트 컨텍스트 인덱싱 및 노출
         2. 자연어를 사용하여 결정적 도구 제어
         3. 이슈 리포트와 CL/PR 분석을 통해 제출 중 또는 직후에 실시간으로 개선하고 적절하게 라벨링 및 라우팅

관련 프로젝트 컨텍스트 인덱싱 및 노출

     * LLM은 유사한 의미를 가진 문서를 유사한 방향을 가리키는 벡터로 매핑하는 특성이 있는 고차원 부동 소수점 단위 벡터인 임베딩을 생성하여 문서를 분석할 수 있음
     * 입력 벡터와 유사한 벡터를 검색하기 위한 벡터 데이터베이스와 결합하여 LLM 임베딩은 오픈 소스 프로젝트의 모든 컨텍스트를 색인화하는 매우 효과적인 방법을 제공
     * 프로토타입 에이전트는 이 기능을 구현하고 Go 저장소의 새로운 이슈에 응답하여 최대 10개의 높은 관련성을 가진 링크 목록을 제공

결정적 도구를 제어하기 위한 자연어 사용

     * 오픈 소스 프로젝트가 성장함에 따라 유용한 도구의 수가 증가하고 모든 도구를 추적하고 각각의 사용 방법을 기억하기 어려울 수 있음
     * LLM은 자연어로 작성된 의도와 프로그램 코드나 도구 호출과 같은 실행 가능한 형태의 의도 간 변환에 매우 효과적
     * 자연어 요청을 충족시키기 위해 사용 가능한 도구를 선택하고 호출하는 Gemini의 실험을 수행했지만 아직 실제 작동하는 것은 없음

이슈 리포트 및 CL/PR 분석

     * 관련 이슈에 대해 게시하는 것은 분석의 제한된 형태이지만, 성능에 대한 이슈를 식별하고 ""성능"" 레이블을 추가하는 등 다른 종류의 의미 분석을 추가할 계획
     * 리포트를 충분히 잘 분석하여 리포트를 유용하게 만들기 위해 더 많은 정보가 필요한지 여부를 식별할 수 있는지 여부를 탐색할 계획
     * 이러한 모든 분석과 결과적인 상호 작용은 리포트가 제출된 직후에 발생할 때 훨씬 더 잘 작동하며, 리포터가 여전히 사용 가능하고 참여하고 있을 때 작동

프로토타입

     * Oscar를 탐색하기 위한 첫 번째 프로토타입은 Gaby(Go AI bot)라고 하며 Go 이슈 트래커에서 실행되며 @gabyhelp으로 게시
     * 현재까지 Gaby는 GitHub에서 Go 이슈 내용을 인덱싱하고 go.dev에서 Go 문서를 인덱싱하며 새로운 이슈에 관련 링크로 응답
     * Gaby의 구조는 모든 종류의 호스팅 서비스에서 모든 LLM, 스토리지 계층 및 벡터 데이터베이스를 사용하여 실행하기 쉽게 만듦
"
"https://news.hada.io/topic?id=16325","정렬, 스윕, 가지치기: Collision Detection Algorithms (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          정렬, 스윕, 가지치기: Collision Detection Algorithms (2023)

충돌 감지 알고리듬

  충돌 감지

     * 비디오 게임 프로그래밍에서 충돌 감지는 매우 일반적인 문제임
     * 캐릭터가 서로 통과하지 못하게 하거나, 물리 엔진을 구현하는 데 필수적임

  단순한 접근법 🐥

     * 모든 객체 쌍을 검사하여 충돌 여부를 확인하는 방법
     * 코드 예시:
for (let i = 0; i < balls.length; i++) {
  const ball1 = balls[i];
  for (let j = i + 1; j < balls.length; j++) {
    const ball2 = balls[j];
    if (intersects(ball1, ball2)) {
      bounce(ball1, ball2);
    }
  }
}

     * 이 방법은 O(n^2) 시간 복잡도를 가짐

  성능 문제

     * 객체 수가 많아질수록 성능 문제가 발생함
     * 예를 들어, n = 20일 때 190개의 쌍을 검사해야 함

  해결책 개선

     * 불필요한 작업을 줄이는 것이 중요함
     * intersects() 함수 최적화:
function intersects(object1, object2) {
  return object1.left < object2.right &&
         object1.right > object2.left &&
         object1.top < object2.bottom &&
         object1.bottom > object2.top;
}

  정렬을 통한 최적화

     * 객체를 x 좌표에 따라 정렬하면 불필요한 검사를 줄일 수 있음
     * 코드 예시:
sortByLeft(balls);
for (let i = 0; i < balls.length; i++) {
  const ball1 = balls[i];
  for (let j = i + 1; j < balls.length; j++) {
    const ball2 = balls[j];
    if (ball2.left > ball1.right) break;
    if (intersects(ball1, ball2)) {
      bounce(ball1, ball2);
    }
  }
}

  성능 분석

     * 정렬: O(n log n)
     * 내부 루프: 평균적으로 O(n + m) (m은 x축에서 겹치는 총 개수)
     * 최종 시간 복잡도: O(n log n + m)

  시각적 비교

     * 전역 쌍 검사와 정렬된 쌍 검사의 비교
     * 정렬된 쌍 검사가 훨씬 적은 검사를 수행함

GN⁺의 정리

     * 이 글은 게임 개발에서 충돌 감지 알고리듬을 최적화하는 방법을 다룸
     * 단순한 O(n^2) 알고리듬에서 시작하여 정렬을 통해 성능을 크게 향상시킴
     * 게임 개발자나 소프트웨어 엔지니어에게 매우 유용한 정보임
     * 비슷한 기능을 가진 다른 프로젝트로는 Box2D, Bullet Physics 등이 있음

        Hacker News 의견

     * 저자는 최적의 성능을 위해 mergesort나 quicksort 같은 ""빠른"" 정렬 알고리즘을 사용할 것을 제안함
          + 그러나 실제로는 insertion sort 같은 ""덜 좋은"" 정렬 알고리즘이 더 나은 성능을 보일 수 있음
          + 충돌 감지 시스템의 객체는 프레임 간에 상대적으로 작은 단계로 이동하기 때문에 이전 프레임의 거의 정렬된 리스트를 유지할 수 있음
          + 이러한 거의 정렬된 리스트를 정렬할 때, insertion sort는 O(n)에 가깝고 Quicksort는 O(n^2)에 가까움
     * 과거에 비슷한 작업을 했지만 정렬 대신 각 방향에 대한 인덱스 리스트를 유지했음
          + 예를 들어, objectIndicesSortedByLeftEdge/RightEdge/TopEdge/BottomEdge 같은 4개의 리스트가 있음
          + 객체가 수평으로 이동하면 leftEdge와 rightEdge 배열에서 자신의 인덱스를 업데이트함
          + 이동하면서 최대 1~2개의 인덱스만 교환하면 됨
     * 이 글은 정말 잘 정리되어 있음
          + 90년대 후반부터 게임 개발을 해왔지만 대부분의 작업이 엔진에 의해 추상화됨
          + 복잡한 시스템 시뮬레이션을 이해하는 데 필수적임
          + 저자가 매우 접근하기 쉬운 글을 작성해줘서 감사함
     * 연속 충돌 감지에 관한 문서를 항상 즐겨 읽었음
          + https://github.com/bepu/bepuphysics2/…
          + 라이브러리 자체는 성능 면에서 놀라움
          + 그러나 최적화가 많이 되어 있어 통합하기는 다소 어려움
     * 일러스트레이션 사용이 좋았음
          + 때때로 이러한 기사들이 멋진 데모를 모으기 위한 핑계처럼 느껴지지만, 이번 글은 일러스트레이션이 주를 이루지 않음
     * Part 2: https://leanrada.com/notes/sweep-and-prune-2/
          + 그의 다른 글도 확인해보길 권장함: https://leanrada.com/
     * ""이 단순한 알고리즘은 Big O 용어로 O(n^2) 시간에 실행됨""이라는 주장에 대해 의문을 제기함
          + 외부 루프(i)는 n - 1까지 세고, 내부 루프(j)는 i + 1에서 시작하여 점점 적은 수를 셈
          + CS 전공자는 아니지만, 큰 n 값에 대해 O(n^2)와 대략적으로 동일한지, 아니면 더 적은지 궁금함
     * 이 방법이 잠재적 충돌자를 줄이기 위해 쿼드 트리를 사용하는 것과 유사한지 궁금했음
     * 선형 프로그래밍 방법이 제안된 적이 있는지 궁금했음
          + https://users.encs.concordia.ca/~akgunduz/CollisionDetection.pdf
     * 이 웹사이트에 좋은 의미로 산만해졌음
          + 재미있고 영감을 줌
"
"https://news.hada.io/topic?id=16376","망 사용료 문제를 해결하기 위해서는 무정산 피어링 법제화가 필요합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 망 사용료 문제를 해결하기 위해서는 무정산 피어링 법제화가 필요합니다

     * 흔히 망사용료 문제 해결을 위해서는 망 중립성 법제화가 필요하다는 말이 많이 나옴. 한국 통신사가 망 중립성을 안지키는 것은 사실인 만큼(보이스톡 사례라든가) 망 중립성 법제화가 필요한건 맞으나, 망 중립성 법제화가 망 사용료 문제의 솔루션이 될 수 없음.
     * 망 중립성은 모든 네트워크 사업자와 정부들은 인터넷에 존재하는 모든 데이터를 동등하게 취급하고, 사용자, 플랫폼, 장비, 전송 방식에 따른 어떠한 차별도 하지 않아야 한다는 의미이지 무정산 피어링을 해야 한다는 의미가 아님. 통신사들은 다같이 페이드 피어링을 해도 똑같으니 망 중립성을 지키는 것이라고 항변할 수 있고 망 중립성이 법제화 되도 이러한 항변이 법원에서 받아들여질 가능성도 낮지 않음.
     * 포털은 어떻게 찌그러들었나(원 글에서는 이 짤로 표현하나 포털은 어떻게 찍그러들었나를 발췌하면서 이 짤로 표현함) 덕분인지 일반인들 뿐만 아니라 IT에 관심을 가진 분들까지도 무정산 피어링 원칙 == 망중립성 이렇게 아시는 분들이 많음.
     * 선을 공짜로 연결하는건 빌앤킵 원칙 즉, 무정산 피어링 원칙임. 선을 유료로 연결해도 망 중립성 원칙이 지켜지는게 불가능한건 아니나, 페이드 피어링이 전 세계적으로 보편화 될 경우 과금액 등에 따라 통신사가 패킷을 차별할 수 있는 우려가 있기 때문에 구글 등 미국 CP들은 무정산 원칙 수호에 최대한 힘을 쏟고 있음.
     * 참고로 미국에서 자체 데이터센터를 가진 포털들은 최소한의 네트워크 망 유지비용을 내고 있다고 하는데 정확히는 자체 AS, 즉, 자율 시스템을 가진 서비스들을 뜻하는 것임. 다만 미국에 데이터 센터 있는 미국 기업은 거의 자체 AS를 갖고 있으니 포털은 어떻게 찌그러들었나에서는 편의상 데이터센터라고 표현한 듯 함.
     * 한국에서 망 사용료 문제를 해결하려면 무정산 피어링 법제화를 해야합니다. 망중립성 법제화도 중요하지만 망사용료 문제 해결 관점에서는 무정산 피어링 법제화가 더더욱 중요함. 지금 한국에서 망사용료라고 뭉뚱그려서 불리는 트랜짓 비용(transit fee)이나 데이터 전송 비용(data transfer fee)이 높은 원인이 통신사들 끼리조차 무정산 피어링이 안되기 때문입니다. 따라서 무정산 피어링 법제화가 더욱 중요함.
     * 그리고 구시대적인 전기통신망법(정확히는 해당 법령 보충적 행정규칙인 과기부 고시)과 정통망법도 고쳐야함. 현재 과기부 고시는 CP가 자체 AS를 만드는 시대임에도 불구하고 단순히 CP를 ISP의 이용자 관계로 규정하고 있음.
          + ""기간통신역무가 아닌 전기통신서비스""라는 과기부 고시를 보면 기간통신역무를 이용하여 음성·데이터·영상 등의 전자기신호를 그 내용이나 형태의 변경 없이 송신 또는 수신하는 전기통신서비스라고 되어 있음.
               o 실제로 넷플릭스 SKB 1심에서 진 이유 중 하나가 전술한 과기부 고시 때문. SKB가 이걸 근거로 피어링 관계임에도 불구하고 넷플릭스가 자신들의 이용자라고 주장을 하였고 법이 이렇게 되어 있으니까 법원에서도 먹힘.
          + 정통망법에도 비슷한 규정이 있음.
     * 즉, 망사용료 문제를 해소하려면 단순히 CP가 통신사의 이용자라고 보는 구시대적 법도 개정해야 함. 예전에는 통신사의 AS에 CP의 서버를 내장했으나, 통신사와 독립된 AS를 굴리는 CP(구글 등)도 생겼음.
     * 결론적으로 망사용료 문제를 해소하려면 무정산 피어링 법제화와 법에 정의되어 있는 구시대적인 CP의 정의를 고쳐야 함. 망중립성 법제화도 중요하기는 한데 의외로 망 사용료 문제 해결에 도움이 안될 수도 있음.

   정보) 이를 국회에서 얘기해줄 사람이 별로 없을뿐더러 과반수 이상은 이해를 못한다
   젠장

   원글이 주장하는 내용이랑 입법이 다르게 흘러가고 있네요 누군가 얘기는 하지만 방향성이 다른 것 같이 보입니다
   https://m.etnews.com/20240809000203
"
"https://news.hada.io/topic?id=16390","Anthropic, Claude에 Prompt Caching(베타)기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Anthropic, Claude에 Prompt Caching(베타)기능 추가

     * Prompt Caching은 API 사용을 최적화하여 프롬프트의 특정 접두사로부터 작업을 재개할 수 있게 해줌
          + 큰 프롬프트를 여러 API 호출에서 재처리하지 않고 재사용하여 반복적인 작업등에서 처리 시간과 비용을 크게 줄임
     * 동작 원리
          + 프롬프트 Prefix 캐싱: 시스템이 최근 쿼리에서 프롬프트 Prefix를 캐시했는지 확인함. 발견되면 캐시된 버전을 사용하여 처리 시간과 비용을 줄임. 그렇지 않은 경우 전체 프롬프트를 처리하고 Prefix를 캐시함.
          + 사용 사례: 많은 예시가 포함된 프롬프트, 큰 양의 컨텍스트나 배경 정보, 일관된 지침이 포함된 반복 작업, 긴 다중 턴 대화에서 유용함
          + 캐시 수명: 캐시는 5분 동안 유효하며, 캐시된 내용이 사용될 때마다 새로고침됨
     * 캐시되는 프롬프트 내용
          + 도구, 시스템, 메시지(해당 순서대로)를 포함한 전체 프롬프트를 참조함. cache_control로 지정된 블록까지 포함
     * 가격
          + Claude 3.5 Sonnet: 기본 입력 토큰 $3 / MTok, 캐시 작성 $3.75 / MTok, 캐시 조회 $0.30 / MTok, 출력 토큰 $15 / MTok
          + Claude 3 Haiku: 기본 입력 토큰 $0.25 / MTok, 캐시 작성 $0.30 / MTok, 캐시 조회 $0.03 / MTok, 출력 토큰 $1.25 / MTok
          + Claude 3 Opus(출시 예정): 기본 입력 토큰 $15 / MTok, 캐시 작성 $18.75 / MTok, 캐시 조회 $1.50 / MTok, 출력 토큰 $75 / MTok
     * 요점
          + 캐시 작성 토큰은 기본 입력 토큰보다 25% 더 비쌈
          + 캐시 조회 토큰은 기본 입력 토큰보다 90% 저렴함
     * 캐시 제한 사항
          + 캐시 가능한 최소 프롬프트 길이:
               o Claude 3.5 Sonnet 및 Claude 3 Opus: 1024 토큰
               o Claude 3 Haiku: 2048 토큰
          + 5분의 캐시 TTL이 있으며, 현재 ""ephemeral""은 이 5분 수명에 해당하는 유일한 지원 캐시 유형임
     * 다양한 유스 케이스
          + 대화형 에이전트: 긴 지침이나 업로드된 문서가 포함된 대화에서 비용과 지연 시간을 줄일 수 있음
          + 코딩 어시스턴트: 관련 섹션이나 코드베이스의 요약 버전을 프롬프트에 유지하여 자동 완성 및 코드베이스 Q&A 성능을 향상시킴
          + 대형 문서 처리: 이미지가 포함된 긴 형식의 자료를 프롬프트에 포함시켜도 응답 지연 없이 처리할 수 있음
          + 상세 지침 세트: 20개 이상의 다양한 고품질 답변 예시를 포함하여 Claude의 응답을 더욱 세밀하게 조정함
          + 에이전트 도구 사용: 여러 도구 호출과 반복적인 코드 변경이 포함된 시나리오에서 성능을 향상시킬 수 있음
          + 책, 논문, 문서, 팟캐스트 대본, 기타 장문 콘텐츠 대화: 전체 문서(들)를 프롬프트에 포함시켜 사용자에게 질문할 수 있게 함
"
"https://news.hada.io/topic?id=16346","MIFARE Classic: 정적 암호화 논스 변종 공개 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 MIFARE Classic: 정적 암호화 논스 변종 공개 [pdf]
"
"https://news.hada.io/topic?id=16284","Ladybird 브라우저, Swift 언어를 사용하기로 결정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Ladybird 브라우저, Swift 언어를 사용하기로 결정

     * Swift가 Ladybird Browser에 가장 적합한 C++ 후계 언어로 선택됨
     * 지난 몇 달 동안 프로젝트의 일부를 다른 언어로 다시 작성해 볼 것을 여러 사람에게 요청함
     * 모두가 Swift를 선호한다는 피드백이 매우 명확했음

Swift를 선호하는 이유

     * Swift는 메모리 및 데이터 경쟁 안전성을 모두 갖추고 있음 (v6부터)
     * 견고한 Ergonomics(인간공학)를 갖춘 현대적인 언어임
     * 웹 사양 및 브라우저 내부는 고도로 객체 지향적이며, 코드에서 사양을 면밀히 모델링할 수 있을 때 작업이 쉬워짐
     * Swift는 First-class 객체 지향을 지원하며, 여러 면에서 C++보다 훨씬 우수함
     * Swift 팀은 또한 C++ 상호 운용성에 많은 투자를 하고 있어, 거대한 재작성이 아닌 점진적 채택을 위한 실질적인 경로가 있음

Apple과의 강력한 유대 관계

     * Swift는 역사적으로 Apple 및 Apple 플랫폼과 강하게 연결되어 왔음
     * 그러나 지난 1년 동안 ""swiftlang""이 더 독립적으로 되기 위한 노력이 있었음 (예를 들어, 더 이상 ""apple""이 아닌 별도의 GitHub 조직에 있음)
     * 비 Apple 플랫폼에 대한 지원과 다른 LSP 기반 개발 환경에 대한 지원도 개선되고 있음

앞으로의 계획

     * 현재 Swift 릴리스는 기존 C++ 코드베이스를 이해하기에는 너무 오래된 버전의 Clang과 함께 제공되므로 당장 사용할 수는 없음
     * 그러나 올 가을 Swift 6가 베타에서 나오면 사용을 시작할 것임
     * 완벽한 언어는 없으며, 아직 모르는 부분이 많음
     * 이전에 Swift로 브라우저 엔진 작업을 한 사람은 알지 못하므로, Swift 팀에 피드백을 제공하게 될 것임
     * 매우 기대가 됨! Ladybird를 메모리 안전성을 향해 이끌어야 하며, 첫 번째 단계는 곧 채택을 시작할 수 있는 후계 언어를 선택하는 것임

     * Ladybird - 새로운 크로스플랫폼 브라우저 프로젝트
     * Ladybird - 새로운 웹브라우저 & 웹엔진
     * Ladybird 브라우저의 비상
     * Firefox에 펀딩하지 못해서 Ladybird에 펀딩함
     * Ladybird 웹 브라우저 - GitHub 설립자로부터 100만 달러를 받으며 비영리 단체가 되다
"
"https://news.hada.io/topic?id=16301","연방 항소 법원, 지오펜스 영장 "전면적" 위헌 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     연방 항소 법원, 지오펜스 영장 ""전면적"" 위헌 판결

     * 연방 제5순회 항소법원 판결
          + 금요일, 연방 제5순회 항소법원은 지오펜스 영장이 ""헌법 수정 제4조에 의해 전면적으로 금지됨""을 판결함
          + EFF는 이 판결을 환영하며, 이는 모든 사람이 자신의 위치 데이터가 무차별적으로 수집될 걱정 없이 휴대폰을 사용할 수 있도록 하는 데 중요함
     * 사건 배경: United States v. Smith
          + 2018년 미시시피 주의 우체국에서 발생한 무장 강도 및 폭행 사건
          + 몇 달간의 조사 후, 경찰은 용의자를 찾지 못해 우체국 주변 지역에 대한 지오펜스 영장을 발부받음
          + Google은 여러 기기의 정보를 제공하였고, 결국 두 명의 피고인을 체포함
     * 항소법원의 주요 판결
          + 위치 데이터에 대한 사생활 기대
               o Carpenter v. United States 판결에 따라, 지오펜스 영장에 포함된 위치 데이터에 대해 개인은 합리적인 사생활 기대를 가짐
               o 지오펜스 영장은 민감한 정보를 노출시킬 수 있어 매우 침해적임
          + 헌법적 문제
               o 지오펜스 영장은 본질적으로 헌법에 위배됨
               o 영장은 특정 사용자를 식별하지 않고, 시간적 및 지리적 위치만을 기반으로 함
          + 경찰의 선의
               o 2018년 당시 경찰은 지오펜스 기술이 새로웠기 때문에 선의로 이러한 영장을 사용할 수 있었음
               o 따라서 이번 사건에서 얻은 증거는 억제되지 않음
     * 판결의 중요성
          + 항소법원이 이러한 영장이 사생활을 침해한다는 점을 인정한 것은 고무적임
          + 경찰은 지오펜스 영장 및 기타 역방향 영장에 점점 더 의존하고 있으며, 이번 판결은 이러한 사례에서 헌법 수정 제4조의 선례를 좁게 적용하지 말라는 경고가 될 것임

GN⁺의 정리

     * 이번 판결은 지오펜스 영장이 헌법 수정 제4조에 위배된다는 중요한 판결임
     * 이는 개인의 위치 데이터에 대한 사생활 보호를 강화하는 데 기여할 것임
     * 경찰이 지오펜스 영장에 의존하는 것을 경고하는 중요한 선례가 될 것임
     * 유사한 기능을 가진 프로젝트로는 위치 데이터 보호를 위한 다양한 프라이버시 강화 기술이 있음

        Hacker News 의견

     * 법원이 2018년에 경찰이 ""선의""로 지오펜스 영장을 사용할 수 있었다고 판결한 것에 대해, 개인의 사건에서는 큰 차이가 없음을 지적함
     * 모든 사람이 휴대폰을 가지고 다닐 때 위치 데이터가 디지털 드래그넷에 의해 범죄 용의자로 지목될 수 있다는 두려움 없이 사용할 수 있어야 함
     * 이 판결 하나로는 이러한 두려움을 해소할 수 없음을 언급함
     * 지오펜스 영장이 너무 광범위하고 부주의하게 사용되었지만, 특정 상황에서는 유효할 수 있는지에 대한 질문을 제기함
          + 예를 들어, 숲 속의 작은 오두막이 주인이 없는 밤에 휘발유로 불타는 경우, 경찰이 그 밤에 해당 타워에 연결된 전화기를 찾으려 할 때, 결과가 3개만 나오는 경우
          + 결과 집합의 크기나 구체성에 따라 유효성을 판단해야 하는지에 대한 논의
     * 지오펜스 영장이 무엇인지 모르는 사람들을 위해 설명함
          + 특정 지리적 영역(지오펜스) 내의 장치 위치 데이터를 수집하는 영장
          + 해당 지역에 있는 장치를 식별하고 위치 데이터를 수집하며 특정 위치와 시간을 장치에 연결함
     * 법 집행 기관이 데이터 브로커로부터 데이터를 구매하여 영장을 우회할 수 있음을 지적함
          + 이는 중요한 진전이지만 여전히 해야 할 일이 많음을 강조함
     * 지오펜스 영장이 프라이버시 침해임을 언급하며, FISA 법원에서 명확한 지침이 나올 때까지 이 문제를 계속 다루어야 함
          + FISA가 정보 목적이 아닌 형사 기소를 위해 정보를 획득하는 데 사용된 문제를 지적함
          + 테러리스트의 정의가 점점 더 넓어지고 국내 감시 목록이 급격히 확장된 최근 상황을 언급함
          + 지오펜스 영장이 일방적으로 금지되고 FISA가 미래 판결에서 최고 법률을 따르기를 희망함
     * 관련 기사 링크를 공유함
          + ""Google 위치 데이터에 대한 합리적인 프라이버시 기대 없음""
     * 도시들이 이미 APLR, 블루투스, TPMS, 통행료 송신기 등을 사용하여 자체 추적 네트워크를 구축하고 있음을 언급함
          + 경찰이 이러한 네트워크를 사용하여 라디오를 감지하고 추적할 가능성을 제기함
     * Google이 최근 ""타임라인"" 서비스를 종료하고 정보를 사용자 장치에 로컬로 저장하도록 변경한 것에 대해 언급함
          + 이는 지오펜스 영장에 대한 ""악을 행하지 말라""는 반응일 수 있으며, Google이 정보를 보유하지 않으면 법 집행 기관에 제공할 수 없음을 지적함
     * 지오펜스가 거리의 보안 카메라 영상과 어떻게 다른지에 대한 질문을 제기함
          + 실내 영역도 포함되는지에 대한 의문을 제기함
"
"https://news.hada.io/topic?id=16353","Epic Games, EU에서 아이폰용 스토어 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Epic Games, EU에서 아이폰용 스토어 출시

     * 이제 ""에픽게임즈 스토어""가 EU의 아이폰과 전 세계 안드로이드 기기에서 다운로드 가능해짐
     * 포트나이트, 로켓리그 사이드스와이프, 모바일용 신작 Fall Guys,로 스토어 론칭
     * 향후 모든 개발자가 에픽게임즈 스토어를 통해 게임과 앱을 출시할 수 있도록 노력 중
     * 함께 출시되는 포트나이트 배틀로얄 ""5장 4시즌: 앱솔루트 둠""은 모바일과 다른 모든 플랫폼에서 즐길 수 있음
     * 에픽외의 독립 모바일 스토어에도 게임 출시
          + EU의 iOS 사용자를 위해 AltStore PAL에서 게임 출시 시작
          + Aptoide iOS 스토어와 안드로이드의 ONE Store에도 게임 출시 예정
          + 전 세계 다른 스토어로 게임 출시를 기대함
     * Digital Markets Act 덕분에 유럽연합 내 iOS 기기에서 출시 가능해짐
          + 애플은 여전히 유럽 외 다른 모든 iOS 사용자가 포트나이트와 iOS용 에픽게임즈 스토어에 접근하는 것을 차단 중
     * 에픽게임즈 CEO 팀 스위니의 발언

     ""변화의 물결이 일고 있고 모바일 생태계가 마침내 경쟁에 문을 열고 있음. EU에서 에픽게임즈 스토어 출시와 iOS 사용자에게 게임을 제공할 수 있도록 해준 EU위원회에 감사. 이제 EU의 iOS 사용자와 모든 안드로이드 사용자는 PC와 Mac 같은 개방형 플랫폼에서 항상 해왔던 것처럼 우리 스토어와 게임에 접근할 수 있음. 싸움은 아직 멀었지만, 개발자와 소비자가 경쟁과 선택의 혜택을 받기 시작할 수 있는 가시적인 진전임""
"
"https://news.hada.io/topic?id=16335","직원들은 사무실로 복귀하지만, 원격으로 회사를 운영하는 새 CEO들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 직원들은 사무실로 복귀하지만, 원격으로 회사를 운영하는 새 CEO들

     * 본사 소재지에서 멀리 떨어진 곳에서 일하는 것을 허용받은 새 CEO들
          + Starbucks의 새로운 CEO인 Brian Niccol은 회사가 위치한 Seattle이 아닌 California의 Newport Beach에 원격 사무실을 가질 예정임
          + Victoria's Secret의 새로운 CEO인 Hillary Super는 California에서 New York으로 이사할 예정이며, 회사 본사가 위치한 Ohio의 Columbus와는 거리가 있음
     * 두 CEO 모두 자주 출장을 다닐 것에 동의했으며, 회사에서 출장 경비를 지원할 예정임
     * 최근 많은 기업 리더들이 본사에서 멀리 떨어진 곳에서 일할 수 있는 선택권을 부여받고 있음
          + Boeing의 새로운 CEO인 Kelly Ortberg는 회사 본사가 위치한 Virginia의 Arlington이 아닌 생산 시설 근처인 Seattle에 거주할 예정임
          + United Airlines의 Scott Kirby는 Chicago에 위치한 회사 본사와 자신의 거주지인 Dallas를 오가며 근무하고 있음

반면 많은 기업 직원들은 사무실 복귀 명령에 직면하고 있음

     * Starbucks의 사무직 직원들은 작년 초 일주일에 최소 3일은 사무실에 출근해야 한다는 방침에 반발했음
     * Victoria's Secret의 경우 일부 직원들은 사무실에서 근무하고 있지만, 다른 직원들은 재택근무가 허용됨
          + Victoria's Secret의 브랜드 사장과 디자인 책임자는 모두 New York에 거주하고 있으며, 이는 Hillary Super가 처음이 아님
          + Victoria's Secret 대변인은 ""우리에게 가장 중요한 것은 우리 팀이 어디에 있든 지원을 받는다고 느끼는 것""이라고 말함
          + Hillary Super의 전임자인 Martin Waters는 뉴욕에 있었으며, 오하이오로 종종 방문했음
     * Starbucks 대변인에 따르면 Niccol은 대부분의 시간을 Seattle 본사에서 보낼 예정임
          + Niccol은 Chipotle에 2018년 CEO로 취임하면서 Denver에서 Newport로 본사를 이전했음

GN⁺의 의견

     * 최근 기업 리더들이 재택근무를 선택하는 반면, 일반 직원들은 사무실 복귀를 요구받는 상황은 이중 잣대로 보일 수 있음
     * 그러나 CEO의 역할 특성상 출장과 원격 근무가 불가피한 측면이 있으며, 이는 일반 직원들과는 다른 상황임을 고려해야 함
     * 다만 직원들의 사기 향상과 공정성 제고를 위해, 가능한 범위 내에서 유연 근무를 확대하는 방안을 모색할 필요가 있음
     * 앞으로 기업들은 직원들의 근무 환경에 대한 요구 사항을 적극적으로 수렴하고, 경영진과 일반 직원 간의 괴리를 해소하기 위해 노력해야 할 것임
     * 이와 관련하여 최근 일부 기업에서는 '워케이션(workation)'과 같은 새로운 근무 형태를 도입하는 등 다양한 시도를 하고 있음

   한국에서는 민주주의 반대가 공산주의고 회사에
   반발하면 빨갱이 취급을 받는 터도 모자라 노동자를 대변할 노조조차 제식구 감싸기에 급급하니 이런 토픽에 생산적인
   토론은 불가능합니다. 그냥 뭐... 군대니 까라면 까야죠.

        Hacker News 의견

     * 많은 스타트업에서 CEO가 직원들과의 소통이 부족함
          + CEO가 출근할 때 다른 사람들이 출근해 있기를 기대함
          + 좋은 CEO는 외로움과 실제 시너지를 구분할 수 있음
          + 나쁜 CEO는 독재적이며 일상 업무에 참여하지 않음
          + HR 결정이 CEO의 욕구를 충족시키는 데 중점을 둠
          + 외로움이 원인이 되는 RTO 논쟁이 짜증스러움
          + 재미있는 공간을 만들고 유연한 근무 일정을 제공하면 사람들이 출근할 것임
     * 첫 프로그래밍 직장에서 임원들이 자주 다른 사무실로 출장을 갔음
          + 임원들이 가족을 데리고 디즈니 월드에 가는 경우가 많았음
          + 스타트업이 아닌 회사에서도 동일한 현상이 발생함
     * CEO가 회사 본사와 같은 도시에 있는 것이 중요함
          + VIP 방문 시 CEO가 현장에 있어야 함
          + CEO가 회사와 도시의 유산과 문화를 연결하는 역할을 해야 함
          + CEO가 멀리서 Zoom으로 소통하는 것은 직원들에게 부정적인 영향을 줌
     * 중대형 회사의 CEO는 회사의 얼굴임
          + 몇 시간의 업무와 고객 미팅이 주요 업무임
          + 회사가 잘 되면 CEO가 공로를 인정받고, 실패하면 다른 CEO 자리로 이동함
     * ""너희를 위한 규칙, 나를 위한 규칙""이라는 말이 있음
          + 전략에 집중하는 것이 중요함
     * 직원들은 사무실로 돌아가지 말아야 함
          + 재택근무나 원격 근무가 영구적이어야 함
     * 많은 대기업이 현대 봉건제 구조를 가짐
          + 소규모 회사에서는 창업자가 더 많은 위험을 감수하므로 결정권이 있음
          + 대기업에서는 CEO가 창업자가 아니며, 다른 CEO들과 연결된 외부인임
          + CEO는 종종 회사의 이익과 일치하지 않는 개인적인 의제를 가짐
          + ""공장이 군주제를 유지하는 한 사회에 공화국을 구현할 수 없다""는 말이 있음
          + 다른 방식으로 ""일""을 구조화하는 방법을 생각해봐야 함
     * 사람들이 대규모로 회사를 떠나지 않는 한 변화는 없을 것임
     * 통계가 없는 주장은 참여 유도용임
          + CEO와 전문직 직원의 원격 근무 비율을 알아야 함
          + 진정한 구분선은 CEO와 전문직이 아닌, 전문직과 비전문직 사이에 있음
"
"https://news.hada.io/topic?id=16334","YTCH - 만약 유튜브가 실제 채널이 있다면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       YTCH - 만약 유튜브가 실제 채널이 있다면

     * 유튜브를 TV처럼 채널을 바꿔가며 보는 웹사이트
     * 모든 채널의 영상이 보지 않아도 시간이 흘러가기 때문에, 다른 채널에 갔다 오면 그만큼 영상의 시간이 지나가 있음(마치 TV처럼)
     * 총 12개의 채널
          + Channel 1: Science and Technology
          + Channel 2: Travel and Events
          + Channel 3: Food
          + Channel 4: Architecture
          + Channel 5: Film and Animation
          + Channel 6: Documentaries
          + Channel 7: Comedy
          + Channel 8: Music
          + Channel 9: Autos and Vehicles
          + Channel 10: News and Politics
          + Channel 11: UFC
          + Channel 12: Podcasts/Interviews/Talk Shows

   흥미롭긴 한데, 그냥 재밌다 정도네요. 저 개인적으로는 유튜브의 좋은 점을 가져다 거의 모든 것을 나쁘게 만들어 버린 것 같다는 생각입니다.
"
"https://news.hada.io/topic?id=16323","구문 강조 기능을 내장한 폰트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구문 강조 기능을 내장한 폰트

  문제점

     * HTML과 CSS로 손으로 코딩한 웹사이트를 만들 때 구문 강조가 어려움
     * 코드 스니펫을 쉽게 읽고 이해할 수 있도록 색상으로 강조하고 싶음
     * 일반적으로 Prism이나 highlight.js 같은 복잡한 구문 강조 라이브러리를 사용해야 함
     * 외부 스크립트를 사용하지 않고 손으로 코딩하고 싶음

  OpenType 기능을 사용하여 폰트 자체에 구문 강조 기능을 집어 넣기

     * Monaspace Krypton이라는 오픈 소스 폰트를 수정하여 각 문자의 색상 버전을 포함시킴
     * OpenType의 COLR 테이블과 컨텍스트 대체 기능을 사용하여 특정 문자열을 찾고 대체함
     * 결과적으로 폰트 자체에 내장된 간단한 구문 강조기 완성

  장점과 단점

    장점

     * 설치가 간단: 폰트를 가져와 OpenType COLR(색상) 및 CALT(컨텍스트 대체) 기능을 활성화하면 됨
     * JavaScript가 필요 없음
     * CSS 테마가 필요 없음
     * 평문 텍스트만큼 빠름
     * <pre>와 <code> 태그에 코드 스니펫을 추가할 수 있음
     * 깨끗한 HTML 소스 코드
     * InDesign과 같은 OpenType 기능을 지원하는 모든 곳에서 작동
     * 유지보수나 업데이트가 필요 없음
     * <textarea>와 <input>에서도 작동

    단점

     * 색상 팔레트를 변경하거나 언어 지원을 추가하는 등의 수정이 필요할 때 폰트 파일을 수정해야 함
     * OpenType을 지원하는 곳에서만 작동
     * OpenType 컨텍스트 대체를 사용한 패턴 찾기는 기본적이며 정규 표현식을 사용하는 스크립트와 비교할 수 없음

  실제 작동 방식

     * OpenType COLR 테이블과 컨텍스트 대체 기능을 사용
     * COLR 테이블은 다채로운 폰트를 가능하게 함
     * 컨텍스트 대체는 인접 문자를 인식하여 대체함
     * 예: JavaScript 키워드 if를 찾아 색상 변형으로 대체

  GN⁺의 정리

     * 이 기사는 손으로 웹사이트를 코딩할때 구문 강조를 구현하는 새로운 방법을 제시함
     * OpenType 기능을 활용하여 폰트 자체에 구문 강조를 내장함으로써 JavaScript나 CSS 테마 없이도 구문 강조를 가능하게 함
     * 이 방법은 간단한 구문 강조에 적합하지만, 복잡한 구문 강조 라이브러리와 비교할 때 한계가 있음
     * 비슷한 기능을 제공하는 프로젝트로는 Prism, highlight.js 등이 있음

        Hacker News 의견

     * 재미있는 해킹임
          + OpenType 기능 사용에 대해 약간 혼란스러움이 있음
          + font-feature-settings: ""colr"", ""calt""; 설정이 의미가 없음
          + colr 기능 태그가 OpenType 레이아웃 테이블에 없음
          + COLR 테이블 활성화 의도였을 가능성이 있음
          + calt 기능은 기본적으로 활성화되어 있음
          + Firefox와 Chrome에서는 잘 작동하지만 Safari에서는 작동하지 않음
     * 원본 텍스트가 그대로 유지됨
          + 태그 래핑이나 JS 없이 userContent.css로 작동함
          + 또 다른 차원의 접근임
     * OpenType 전문가가 아니므로 대체 논리를 개선할 수 있음
          + 수정된 소스 파일을 공유할 의향이 있음
          + 아이디어나 피드백이 있으면 연락 바람
     * 이 해킹은 끔찍하지만 놀라움
          + OpenType 문맥 대체 기능을 훌륭하게 악용함
          + 공유해줘서 고마움
     * 훌륭한 해킹임
          + 약 45kB로 baseline highlight.js와 비슷한 크기임
          + JavaScript가 비활성화된 환경에서도 작동함
          + 실행 시 구성 가능성과 언어 지원이 좁아짐
     * 페이지 하단에 좋은 메시지가 있음
          + ""이 사이트는 쿠키를 사용하지 않으며 제3자 사이트로 링크하지 않음""
          + 이 점이 마음에 듦
     * 코드로 자동화할 수 있을 것 같음
          + 일반적인 사용 사례에 유용한 방법임
     * Chromium 기반 브라우저에서 버그가 있음
          + color: blue를 입력하면 r만 강조됨
          + 복사+붙여넣기하면 제대로 작동함
          + 여전히 멋진 기능임
     * 정말 멋진 기능임
          + textarea와 입력 필드뿐만 아니라 큰 HTML 문서에서도 사용 가능함
          + 많은 span과 HTML 태그를 사용하지 않아도 됨
          + 하드웨어 가속 폰트 렌더링 소프트웨어가 모든 것을 처리함
          + 메모리와 CPU를 많이 절약할 수 있을 것임
     * 파서 생성기처럼 작동하는 것이 필요할 것 같음
          + 규칙이 얼마나 표현력이 있는지 명확하지 않음
     * 정말 놀라운 기능임
          + 더 나은 서체로 보는 것이 기대됨 (예: Inconsolata 또는 JetBrains Mono)
          + JSON을 쉽게 표시하는 데 유용할 것임
"
"https://news.hada.io/topic?id=16317","iOS의 NFC 개방: 비접촉 안전 거래를 위한 NFC & SE 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                iOS의 NFC 개방: 비접촉 안전 거래를 위한 NFC & SE 플랫폼

     * NFC & SE Platform: iOS 앱에서 비접촉 거래를 구현하는 API
     * 오프라인 결제, 자동차 키, 교통, 사원증, 학생증, 도어락, 멤버십, 이벤트 티켓(추후 지원 예정), 정부에서 발급한 카드(추후 지원 예정)에 활용 가능
     * Secure Element, Secure Enclave, Apple Servers와 같은 보안 기능을 활용해 안전한 비접촉 카드 기능을 제공
     * 개인 정보 보호 및 보안을 보장하기 위해, 개발자는 애플과 계약을 체결해야 API를 사용할 수 있음. 또한 업계 및 규제 표준과 지속적인 보안 및 개인 정보 보호 관행을 준수해야 함
     * (안드로이드와 동일) NFC를 기본적으로 처리할 앱을 미리 설정에서 골라둔다면, 단말기에 아이폰을 태그할 때 자동으로 앱이 실행되어 거래가 완료됨.
          + 포그라운드에 다른 NFC앱이 열려있다면 이를 우선으로 사용함.
     * iOS 18.1, 아이폰 Xs 이상부터 사용 가능

   관련한 애플의 보도 자료 : Developers can soon offer in‑app NFC transactions using the Secure Element

   중요한 부분은 수수료입니다.
     * 개발자가 이 새로운 솔루션을 iPhone 앱에 통합하려면 Apple과 상업적 계약을 체결하고 NFC 및 SE 권한을 요청하며 관련 수수료를 지불해야 함
     * 이를 통해 특정 산업 및 규제 요구 사항을 충족하고 Apple의 지속적인 보안 및 개인 정보 보호 표준을 준수하는 승인된 개발자만 관련 API에 액세스할 수 있음
     * NFC 및 SE API는 iOS 18.1용 향후 개발자 시드에서 호주, 브라질, 캐나다, 일본, 뉴질랜드, 영국 및 미국의 개발자에게 제공될 예정이며 추가 지역들은 추후 공개 예정

   한국은 아직 미정이라 언제 될지는 잘..

   드디어 개방인가요? 완전 개방.

   개방이 선수를 치다니
   구파에서 좌시하지 않을 것 입니다.

   한국의 교통카드 애플페이 떡밥의 실상인데 앞으로도 없응 애플페이에 열광하는 이상한 현상

   https://news.mtn.co.kr/news-detail/2024081313351179584

   티머니 관련해선 이런 기사가 최근 있어서...

   이번엔 진짜일듯.

   https://edaily.co.kr/News/Read/…
   근데 상당한 진통이 예상될 겁니다. 일단 한국과 유럽은 제외입니다.
   이유는 간단합니다. 안드는 공짜로 오픈했는데 왜 애플은 돈내야 하냐죠.
   또한가지 문제가 있습니다. 바로 EMVCo 인증입니다. 한국 카드사들이 혐오하는 인증이죠.
   혐오 그 이상입니다. 한국 결제 시장에서는 가장 거지같은 조건이죠.
"
"https://news.hada.io/topic?id=16312","소비자는 "AI"라벨이 붙은 제품을 꺼려한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        소비자는 ""AI""라벨이 붙은 제품을 꺼려한다

     * 최근 연구에 따르면 제품에 ""AI"" 라벨을 붙이는 것이 실제로 사람들을 멀어지게 할 수 있음
     * 동일한 제품에 대해 하나는 ""하이테크""로, 다른 하나는 ""AI""를 사용한다고 설명했을 때 사람들의 구매 의도가 현저히 낮아짐
     * 가정용 제품, TV, 소비자 서비스, 건강 서비스 등 여러 제품을 살펴보았고, 제품 설명에 ""AI""를 언급할 때마다 구매 또는 사용 의도가 크게 낮아짐

신뢰의 역할

     * ""Journal of Hospitality Marketing & Management"" 에 발표된 새로운 연구에 따르면, 연구자들은 1,000명의 응답자에게 제품에 대한 질문과 설명을 제시함
          + 놀랍게도 AI를 사용한다고 설명된 제품은 일관되게 인기가 낮았음
     * 연구에는 AI를 사용하는 가전제품 등 ""저위험""으로 간주되는 제품과 자율주행차, AI 기반 투자 의사결정 서비스, 의료 진단 서비스 등 ""고위험""으로 간주되는 제품에 대한 참가자의 견해를 조사한 내용이 포함
     * 구매하지 않겠다는 비율이 고위험군에서 더 높았지만, 두 제품군 모두 구매하지 않는 사람이 대다수였음
     * ""AI-powered""으로 설명되는 제품에 대한 소비자의 인식에 인지적 신뢰와 감정적 신뢰라는 두 가지 신뢰가 작용함
          + AI가 인간의 실수가 없는 기계라고 기대하는 인지적 신뢰는 AI가 실수를 하면 빠르게 약화될 수 있음 (구글 사례)
          + AI의 내부 작동에 대한 지식과 이해가 부족하면 소비자는 감정적인 신뢰에 의존하고 기술에 대한 주관적인 판단을 내릴 수밖에 없음
               o ""사람들이 AI 기기나 기술을 사용하지 않으려는 이유 중 하나는 미지의 세계에 대한 두려움 때문""
               o ""ChatGPT가 도입되기 전에는 AI에 대해 아는 사람이 많지 않았지만, AI는 수년 동안 백그라운드에서 실행되어 왔으며 전혀 새로운 것이 아님""
     * 그리고 AI가 대중 문화에서 묘사되는 방식도 기술에 대한 신뢰를 높이는 데 도움이 되지 않음
          + 로봇을 악당으로 캐스팅한 할리우드 공상과학 영화가 AI에 대한 대중의 인식을 형성하는 데 생각보다 더 큰 영향을 미쳤음
          + ""사람들이 AI에 대해 들어보기도 훨씬 전부터, 그 영화들은 AI가 움직이는 로봇이 인간에게 어떤 일을 할 수 있는지에 대한 사람들의 인식을 형성했습니다.""

투명성 부족

     * 소비자에게 영향을 미치는 또 다른 요인은 AI를 둘러싼 인식된 위험, 특히 사용자의 개인 데이터 처리 방식임
     * 기업이 고객 데이터를 관리하는 방식에 대한 우려가 사용자 경험을 간소화하기 위한 도구에 대한 기대감을 낮추고 있음
     * 투명성 부족은 브랜드에 대한 고객의 인식을 악화시킬 수 있는 잠재력이 있음
     * 기업은 AI의 기능을 자세히 설명하지 않고 유행어로 ""AI"" 태그를 붙이는 것을 경계해야 함
          + ""그들이 해야 할 가장 바람직한 일은 올바른 메시지를 내놓는 것""
          + ""단순히 'AI-powered' 또는 'run by AI'라고 말하는 것보다 이것이 어떻게 도움이 될 수 있는지 사람들에게 말하면 소비자의 두려움을 덜어줄 것""

   특히, 가전제품 구매할 때 AI 라벨이 붙어있으면 냉소적으로 반응했던 거 같습니다. ""잘 안 쓰는 기능을 AI라고 붙여놓고 비싸게 팔아먹네"" 이런 느낌?

   휴머노이드 판다고 하면 살걸?
   기사에 자율주행 있는거 보고
   이게 ai단어랑 무슨 상관이지 했다
   안전한 ai면 사겠지 ㅋㅋㅋㅋㅋ
   우리나라에 it일하는 사람이
   얼마인데 사기치려다 걸린
   케이스지 ai단어와는 상관없는듯

   사람들이 알고리즘, 기계학습, 컨텐츠생성, 거대언어모델을 퉁쳐서 AI라고 하기 때문에 혼란이 더 심해지고 있습니다 어쩔 수 없는 현상이긴 한데 씁쓸하네요

   저도 eze886님 의견에 동의합니다. 기사를 읽고 느낀 바로는 AI가 사람들에게서 어느 정도의 신뢰를 얻기까지 가야 할 길이 멀어 보이네요.

   오히려 it 쪽에서 일하는 사람이 많기 때문에 냅다 AI만 박아 놓은게 얼마나 허황된지 아는거죠 ㅋㅋ

   AI 붙여놓고 비싸게 팔아서가 아니고?

   개인적으로 붙으면 일단 이미지 안좋아지는 문구는
     * 게임에서의 ""with kakao""
     * 기사, 타이틀 등에서 사용되는 ""게임 체인저""
       도 있내요

   ㅇㅇㅇ 게 섯거라, K-ㅇㅇㅇ

   LLM이 현재까지 내놓는 결과물의 품질만 놓고 봤을 때, AI 딱지를 붙여서 파는건 '우리는 뭘 하는지 맥락을 모르는 저숙련 작업자를 데려다 쓰고, 결과물을 전문가가 검토할지 말지는 우리 맘입니다'라고 광고하는 셈입니다. 기계학습은 그나마 거품이 한차례 지나가긴 했지만 AI로 포장되면 소비자에게 주는 뉘앙스는 비슷한 것 같구요

   신뢰는 결과의 정확성과 회사의 전문성을 포함한 다른 요인에서 나오는 건데 AI문구가 들어갔다는 이유로 누가 신뢰를 할까요
"
"https://news.hada.io/topic?id=16341","Typlr - 웹브라우저 만으로 폰트 만들기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Typlr - 웹브라우저 만으로 폰트 만들기

     * 별도의 도구없이 웹브라우저에서 폰트 작성 가능
          + Kerning : 개별 문자 사이 간격 조정.
          + Components : 다른 글리프와 결합하여 글리프를 재사용 가능
          + Edit : 벡터 윤곽을 편집하고, 점을 선택하고, 배율을 조정하고, 회전하고, 삭제. 포인트를 다른 포인트에 연결
     * Progressive Web App 으로 설치 가능
     * TTF로 저장 지원
"
"https://news.hada.io/topic?id=16363","Dasel - JSON, TOML, YAML, XML 및 CSV 데이터 선택, 삽입 및 삭제 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Dasel - JSON, TOML, YAML, XML 및 CSV 데이터 선택, 삽입 및 삭제 도구

     * 데이터 구조를 선택자 문자열을 사용하여 쿼리하고 수정할 수 있게 해주는 도구
          + JSON, YAML, TOML, XML, CSV를 지원하며 런타임 종속성이 없음
          + 다양한 데이터 형식을 다루기 위해 새로운 도구를 배울 필요가 없음
          + 표준 선택자 구문을 사용하여 한 번 배우면 모든 지원 데이터 형식을 쿼리/수정할 수 있음
     * homebrew, ASDF, scoop, docker, Nix 또는 최신 릴리스에서 컴파일된 바이너리로 설치 가능
          + 터미널 자동완성도 지원
     * Features
          + 구조화된 데이터 파일에서 데이터 쿼리/선택
          + 구조화된 데이터 파일의 데이터 업데이트
          + 데이터 파일 생성
          + 여러 데이터 형식/유형 지원
          + 데이터 형식/유형 간 변환
          + 모든 데이터 형식에서 표준 쿼리/선택자 구문 사용
          + 런타임 종속성 없음
          + Linux, Mac, Windows에서 사용 가능
          + 자체 프로젝트에 가져와서 사용 가능
          + Docker를 통해 실행 가능
          + jq/yq보다 빠름
          + Pre-commit 훅
     * Playground
          + dasel 명령어를 테스트할 수 있는 플레이그라운드 제공
          + 플레이그라운드 소스 코드는 github.com/TomWright/daselplayground에서 확인 가능
     * Benchmarks
          + 테스트 결과 dasel이 jq보다 최대 3배, yq보다 최대 15배 빠름
          + 벤치마크 디렉토리에서 확인 가능

GN⁺의 정리

     * Dasel은 다양한 데이터 형식을 지원하며, 표준 선택자 구문을 사용하여 쉽게 쿼리하고 수정할 수 있는 도구임
     * 런타임 종속성이 없고, 여러 플랫폼에서 사용 가능하며, jq/yq보다 빠름
     * 다양한 설치 방법과 pre-commit 훅을 제공하여 개발 환경에 쉽게 통합 가능
     * 데이터 형식 간 변환이 필요하거나 여러 데이터 형식을 다루는 프로젝트에 유용함
     * 유사한 기능을 가진 도구로는 jq, yq 등이 있음

        Hacker News 의견

     * SQL 스타일 문법을 사용하여 비관계형 데이터 저장소를 쿼리하는 아이디어가 좋음
          + 모든 데이터 저장 형식을 SQL로 쿼리할 수 있는지 궁금해짐
     * jq 스타일 쿼리를 선호하는 경우 qq를 사용할 수 있음
          + qq GitHub 링크
     * Nushell을 사용하여 다양한 형식을 처리할 수 있음
          + Nushell 명령어 링크
          + 구조화된 데이터 탐색 링크
     * 매 분기마다 이러한 도구들이 주목받는 것 같음
          + 사람들이 자신들의 특정 사용 사례를 지원하는 도구를 보여주거나 나열하는 것을 기다리고 있음
          + 항상 많은 것을 배움
     * 멋진 프로젝트지만 표준화된 쿼리 언어가 필요함
          + jq 쿼리 문법을 내재화하기 어려움
          + 널리 채택된 표준이 아닌 경우 학습에 투자하기 꺼려짐
          + JMESPath가 앞으로 나아갈 길일 수 있음
          + gron이 직관적이고 다른 도구와 잘 어울림
     * Go에서 이런 도구를 많이 사용했음
          + yaml을 파싱하지 않고 변형만 하고 싶을 때가 있음
          + 기존 yaml 문서에 데이터를 선택하고 교체, 추가할 수 있는 기능이 자동화에 큰 도움이 됨
     * ini 파일을 위한 유사한 도구
          + crudini 링크
     * 또 다른 도구 목록
          + structured-text-tools 링크
          + 이미 6번이나 목록에 있음
     * 최근 AWS에서 JMESPath를 사용해본 경험이 있음
          + 어떤 구조화된 데이터 도구가 더 배우기 쉬운지, 문서화가 잘 되어 있는지, 작성 속도가 빠른지 궁금함
          + 좋은 비교 기사를 아는 사람이 있는지 물어봄
          + 여전히 jq를 기본으로 사용함
     * yq가 이미 그 기능을 수행하지만 README에 따르면 느림
"
"https://news.hada.io/topic?id=16287","Server Mono - 타자기, 애플의 SF 모노, CLI에서 영감을 받은 서체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Server Mono - 타자기, 애플의 SF 모노, CLI에서 영감을 받은 서체

     * Server Mono는 타자기, Apple의 San Francisco Mono, ASCII 아트, 명령줄 인터페이스 및 프로그래밍 도구에서 영감을 받은 서체
     * 명령줄 인터페이스에서의 명확한 가독성과 균일한 문자 폭으로 유명한 모노스페이스 폰트의 전통을 이어감
     * 다양한 보기 컨텍스트에서의 성능을 중시하여 설계됨. 뛰어난 가독성과 균일하고 예측 가능하며 질서있는 모양과 잘 어울림.
     * 웹사이트, 게임, 맞춤형 데스크탑 애플리케이션 인터페이스에서 정밀한 정렬이 필요한 경우 유용
     * Open Font License 1.1

GN⁺의 정리

     * Server Mono는 명령줄 인터페이스와 프로그래밍 도구에서 뛰어난 가독성을 제공하는 모노스페이스 폰트임
     * 다양한 시청 환경에서의 성능을 중시하여 설계되어 웹사이트, 게임 세계, 맞춤형 데스크탑 애플리케이션 인터페이스에서 유용함
     * 2024년에 출시된 이 폰트는 Tim Vanhille과 Matthieu Salvaggio가 제작하고, Jimmy Lee와 Internet Development Studio Company 커뮤니티의 추가 지도를 받음
     * 비슷한 기능을 가진 폰트로는 Consolas, Fira Code, 그리고 Source Code Pro 등이 있음

        Hacker News 의견

     * 박스 그리기 문자를 시연할 때, 단일 간격 글꼴에서 줄이 맞아야 함
          + 예: ""lines"" 아래의 행들이 겹쳐져 있음
          + 박스도 제대로 정렬되지 않음
          + 100% 박스도 맞지 않음
          + 이 문제는 줄 높이가 좁기 때문일 수 있음
     * 문자 모호성의 중요성에 동의하며, 이를 해결하기 위해 ""DP Sans Mono"" 폰트를 추천함
          + DP Sans Mono
          + 폰트 샘플
          + 폰트 다운로드 링크
     * 이 글을 읽는 것이 즐겁지 않음
     * l과 1이 동일하게 보이는 문제 있음
     * ""thy""와 ""thou hast""의 사용이 귀엽지만, 여러 사람을 지칭할 때는 ""your""와 ""you have""를 사용해야 함
     * Cascadia Code를 좋아하며, 2024 버전에는 NerdFonts 문자가 포함됨
     * ""Internet Development Studio Company community"" 부분이 PR처럼 느껴짐
     * iOS Safari에서 이미지를 로드할 수 없으며, 폰트가 Safari에서 렌더링되지 않는 것 같음
     * Berkeley Graphics와 Berkeley Mono를 언급함
          + Berkeley Mono
     * 폰트에 대한 확신은 없지만, 문자 렌더링을 시연하는 텍스트 코퍼스는 마음에 듦
          + 처음에는 Quenya나 Sindarin으로 생각했지만 확실하지 않음
"
"https://news.hada.io/topic?id=16326","김 닷컴의 미국 송환, 뉴질랜드 승인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          김 닷컴의 미국 송환, 뉴질랜드 승인

     * 뉴질랜드 법무장관 폴 골드스미스가 김 닷컴의 미국 송환을 승인함
          + Megaaupload 창립자인 김 닷컴은 저작권 침해, 공갈, 돈세탁 혐의로 기소될 예정임
          + 이론적으로는 수십 년의 징역형에 처할 수 있음
          + 김 닷컴은 계획이 있으며 뉴질랜드를 떠날 의도가 없음을 밝힘
     * Megaupload 사건의 배경
          + 12년 전 Megaupload는 고위 법 집행 작전의 주요 목표가 되었고, 김 닷컴의 파일 저장 제국이 붕괴됨
          + 뉴질랜드에 거주하는 김 닷컴은 미국으로의 송환 여부를 기다리고 있었음
          + 2012년부터 수백만 달러가 이 법적 싸움에 투입되었으며, 아직 끝이 보이지 않음
     * 뉴질랜드 대법원의 판결
          + 2020년 뉴질랜드 대법원은 김 닷컴과 그의 동료들이 미국으로 송환될 수 있다고 판결함
          + 그러나 사법 검토와 항소가 여전히 진행 중이었음
          + Megaupload 피고인 반 데어 콜크와 오트만은 결국 유죄를 인정하고 뉴질랜드에서 각각 30개월과 31개월의 징역형을 받기로 합의함
          + 김 닷컴은 계속 싸우겠다고 다짐함
     * 법무장관의 송환 서명
          + 최근 몇 년 동안 김 닷컴은 정치 및 사회적 사건에 대한 논란의 여지가 있는 의견을 자주 공유함
          + 법무장관 폴 골드스미스는 김 닷컴이 미국으로 송환될 것이라고 알림
          + 골드스미스는 ""법무부로부터 광범위한 조언을 받았으며, 모든 정보를 신중히 검토한 결과 김 닷컴을 미국으로 송환하기로 결정했다""고 밝힘
          + 김 닷컴은 항상 혐의를 부인해왔으며, 이번 송환 결정도 도전할 것임
     * 김 닷컴의 계획
          + 법무부는 오늘 송환 명령을 확인함
          + 김 닷컴은 소셜 미디어를 통해 뉴질랜드를 ""순종적인 미국 식민지""라고 묘사하며 송환 결정을 공개함
          + 김 닷컴은 ""계획이 있다"", ""뉴질랜드를 사랑한다"", ""떠날 의도가 없다""고 밝힘

GN⁺의 정리

     * 김 닷컴의 송환 결정은 12년간의 법적 싸움의 결과로, 저작권 침해와 관련된 중요한 사건임
     * 뉴질랜드 법무부와 대법원의 결정은 국제적인 법적 절차와 관련된 중요한 사례로 볼 수 있음
     * 김 닷컴의 계획과 향후 대응이 어떻게 전개될지 주목할 필요가 있음
     * 비슷한 기능을 가진 프로젝트로는 Dropbox와 Google Drive가 있음

        Hacker News 의견

     * Kim Dotcom이 MegaUpload와 Mega를 운영한 것에 감사함. 하지만 법을 어기는 것에는 한계가 있음
          + 정부가 개입하면 이런 행동을 계속할 수 없음을 지적함
          + 사람들은 종종 자신을 주인공으로 생각하며 무모한 행동을 함
          + Kim과 그의 가족이 괜찮기를 바람
     * YouTube도 처음에는 불법 콘텐츠로 인기를 끌었음
          + YouTube와 MegaUpload의 초기 단계의 차이점에 대해 질문함
          + 두 서비스 모두 나중에 합법화되었음
     * Kim Dotcom이 잘못한 점이 있을 수 있지만, 그가 거주하지 않은 나라에서 재판을 받는 것은 부당함
     * 미국이 개인과의 싸움에서 지지 않으려는 시도로 인해 점점 더 유치해 보임
          + 법을 엄격히 집행하는 미국의 모습이 비판받음
          + Mega에서 다운로드하면 정보기관이나 법 집행기관의 주목을 받을 수 있음
     * 대기업이 데이터를 불법으로 수집해 AI를 훈련시키는 것에 대해서는 아무런 조치가 없음
     * Kim Dotcom이 현재 중국, 러시아, 하마스의 선전을 반복하고 있음
          + 그가 뉴질랜드에서 추방되기를 바람
     * 정부가 지적 재산권 법을 집행하는 것이 공익이라는 의견이 있음
          + Kim이 너무 성공적이고 비호감이어서 실패했을 가능성이 있음
          + MEGA가 힙합 아티스트와 협력하기 시작했음
          + 미국은 새로운 비즈니스 모델을 범죄화하는 역사가 있음
          + MEGA는 너무 일찍 성공했지만 기존 권리 소유자와의 협력이 부족했음
     * Kim Dotcom의 이야기는 끝나지 않음
          + Amiga, 모바일 ISDN 서비스, MEGA 등 다양한 트렌드에 참여했음
          + 공개적으로 암호화폐에 뛰어들기 전에 멈춘 것 같음
     * 미국이 관할권을 주장한 법적 근거를 잊은 것 같음
          + megaupload.com이 .COM 도메인으로 등록되었기 때문임
          + .COM 도메인은 미국 회사인 Verisign이 소유하고 있어 미국이 관할권을 가짐
          + .COM 도메인 사용을 줄이는 것이 미국의 인터넷 지배력을 줄이는 방법일 수 있음
     * Mega와 Dropbox의 차이점에 대해 질문함
          + 두 서비스가 기본적으로 동일한 제품이라고 생각함
          + Mega의 톤이 더 공격적일 뿐임
"
"https://news.hada.io/topic?id=16392","Sourcegraph Repo가 비공개로 전환됨  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Sourcegraph Repo가 비공개로 전환됨

     * 2019년 중반 구직 활동 중 Google Goteam과 Sourcegraph 중 선택해야 했음
     * Sourcegraph를 선택한 이유는 모든 것을 공개적으로 구축할 수 있는 문화 때문이었음
     * 모든 문서가 기본적으로 공개되었고, 기술 및 제품 RFC, PR/FAQ 등이 공개 Google Drive 폴더에 저장되었음
     * 모든 제품 구현이 공개 GitHub 저장소에서 이루어졌음
     * 현재 sourcegraph/sourcegraph 저장소가 비공개로 전환되었음
     * 이는 Sourcegraph의 매력적인 문화를 파괴하는 결정이었음
     * Sourcegraph는 sourcegraph/sourcegraph-public-snapshot이라는 공개 스냅샷을 남겨두었음

  참조 유지

     * Sourcegraph에서 근무하는 동안 엔지니어링 블로그에 많은 글을 작성했음
     * 많은 글이 관련 공개 코드에 대한 링크를 참조로 사용했음
     * 이제 이러한 링크가 모두 깨졌음
     * ""멋진 URI는 변하지 않는다""는 말이 있음
     * 링크가 갑자기 깨지지 않도록 최대한 정보를 보존하려고 노력 중임
     * sourcegraph/sourcegraph를 efritz/sourcegraph로 포크했음
     * 포크는 풀 리퀘스트를 상속받지 않으며, 브랜치에 직접 참조되지 않은 커밋은 보이지 않음
     * GitHub 문서에 따르면, 공개 저장소가 비공개로 전환되더라도 포크는 계속 존재함
     * 그러나 원본 저장소가 비공개로 전환되면 main 브랜치 외의 커밋이 사라질 수 있음

  관련 커밋 스크래핑

     * 모든 커밋을 찾기 위해 Go 프로그램을 실행했음
     * 이 프로그램은 2,645개의 풀 리퀘스트 메타데이터 파일을 생성했음
     * jq를 사용하여 JSON 페이로드를 읽고 데이터를 추출했음
     * pr_ids.txt, commits.txt, replace_pairs.txt 파일을 생성했음
     * 두 번째 프로그램을 실행하여 각 풀 리퀘스트의 비병합 커밋을 나열했음
     * 이 프로그램은 commits.txt 파일에 커밋을 추가했음

  새로운 저장소 네트워크로 커밋 가져오기

     * 각 관련 SHA를 포함하는 브랜치를 생성하여 포크에 가져왔음
     * Bash 스크립트를 사용하여 git 작업을 순차적으로 수행했음

  참조 재작성

     * 이제 각 참조를 포크의 대상에 링크할 수 있게 되었음
     * xargs를 사용하여 자동화 프로세스를 구현했음
     * 직접 커밋 참조를 포크로 재작성하고, 풀 리퀘스트 참조를 병합 커밋으로 재작성했음

GN⁺의 정리

     * Sourcegraph의 비공개 전환은 오픈 소스 문화에 큰 영향을 미쳤음
     * 엔지니어링 블로그의 많은 참조 링크가 깨졌으며, 이를 보존하기 위해 많은 노력이 필요했음
     * GitHub 포크와 스크립트를 사용하여 참조를 재작성하고 커밋을 보존했음
     * 이 기사는 오픈 소스 프로젝트의 지속 가능성과 참조 링크의 중요성을 강조함

        Hacker News 의견

     * Sourcegraph CEO의 의견:
          + 내부 코드베이스를 비공개로 전환한 이유는 집중을 위해서임
          + 오픈 소스와 공개 상태로 유지하는 것이 많은 추가 작업과 위험을 초래함
          + 고객을 위한 훌륭한 코드 검색/지능 제품을 만드는 데 집중해야 함
          + 여전히 개발자와 OSS 커뮤니티를 위해 많은 일을 하고 있음
               o 인기 있는 공개 코드 검색 서비스 제공
               o 많은 오픈 소스 코드 유지
          + 다른 창업자들이 코드 공개 여부를 고민 중이라면 상담 가능
     * 다른 사용자의 의견:
          + Sourcegraph가 개발자 문화를 잘 이해하는 회사로 여겨졌으나, 최근 변화가 아쉬움
          + 공개 로드맵을 찾으려 했으나 대부분의 문서가 비공개로 전환됨
          + 이전에 공개된 핸드북이 Notion으로 이동하고, 대부분의 중요한 부분이 비공개 Google 문서로 링크됨
     * 또 다른 사용자의 의견:
          + 최근에 Sourcegraph의 공개 검색 인덱스가 사라짐
          + GitHub의 검색 기능이 개선되기 전까지 Sourcegraph를 많이 사용했음
          + 이제 GitLab 저장소와 많은 GitHub 저장소가 인덱스에서 사라짐
          + 신뢰할 수 없는 검색 기능 때문에 GitHub로 돌아갈 수밖에 없음
     * 다른 사용자의 의견:
          + 오픈 소스 버전을 포크하여 텔레메트리 제거, 업데이트 비활성화, 독점 코드 제거, Docker 이미지 생성, 경량 Oauth2 인증 구현
          + 오랫동안 Oauth2-Proxy 뒤에서 실행할 계획
          + 매우 신뢰할 수 있는 소프트웨어임
     * 또 다른 사용자의 의견:
          + macOS 역공학 작업에 Sourcegraph를 많이 사용함
          + Sourcegraph 검색 덕분에 많은 프로젝트가 존재함
          + 앞으로 검색 기능이 사라지지 않기를 바람
     * 또 다른 사용자의 의견:
          + 모든 개발 작업을 비공개로 만드는 것은 이상하고 당황스러움
          + 라이선스 제한만으로도 충분히 사업 목표를 달성할 수 있을 텐데 왜 비공개로 전환했는지 의문
     * 다른 사용자의 의견:
          + Sourcegraph를 많이 사용했지만 실제로 비용을 지불한 사람은 얼마나 될지 궁금함
          + 오픈 소스 회사를 운영하는 것은 어려운 일임
          + 회사가 성숙해지면서 무료로 제공할 수 없는 것들이 있다는 것을 이해하게 됨
     * 다른 사용자의 의견:
          + Software Heritage 프로젝트가 대부분의 Sourcegraph 저장소를 아카이브함
          + 마지막 크롤링은 2024년 7월 중순임
     * 또 다른 사용자의 의견:
          + Sourcegraph가 더 이상 오픈 소스가 아니라는 이전 에피소드를 언급함
     * 다른 사용자의 의견:
          + Sourcegraph를 많이 인용하고 추천했지만 실제로 비용을 지불한 적은 없음
          + 오픈 소스를 포기한 이유가 궁금하지만 놀랍지는 않음
"
"https://news.hada.io/topic?id=16362","AltStore PAL, Epic에서 대규모 후원을 받아서 이제 무료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AltStore PAL, Epic에서 대규모 후원을 받아서 이제 무료

     * iOS용 대체 스토어인 AltStore PAL은 애플의 CTF(Core Technology Fee)를 내기 위해 유료 정책(1년에 €1.5)을 시행중이었음
     * 에픽 게임즈에서 MegaGrant를 줘서 이 비용으로 CTF를 낼 수 있게 되어, 이제 무료로 운영됨
     * 기존 구독자들은 갱신시에 비용을 안내도 됨(현재 구독자에 대한 감사는 별도 업데이트 예정. 즉 환불은 없음)

   아이폰 최초의 대체 앱 마켓플레이스 AltStore PAL, 이제 이용 가능
   Epic Games, EU에서 아이폰용 스토어 출시

   에픽이 게임 팔아서 번 돈으로 자기 스토어도 만들고, 주변 스토어들도 살리고 있군요. 흥미로워지네요.
"
"https://news.hada.io/topic?id=16299","HN 공개: pgvector와 실시간 동기화 기능을 갖춘 브라우저 내 WASM Postgres, PGlite","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 공개: pgvector와 실시간 동기화 기능을 갖춘 브라우저 내 WASM Postgres, PGlite

     * Lightweight
          + 완전한 WASM 빌드의 Postgres로, Gzipped 상태에서 3MB 이하임
     * GN⁺의 정리
          + 이 프로젝트는 Postgres의 WASM 빌드를 제공하여, 매우 가벼운 데이터베이스 솔루션을 찾는 사람들에게 유용함
          + 기존의 Postgres와 비교했을 때, 크기가 작아 웹 애플리케이션에 쉽게 통합할 수 있는 장점이 있음
          + 이 기사는 특히 웹 개발자나 경량화된 데이터베이스 솔루션을 필요로 하는 사람들에게 흥미로울 수 있음
          + 비슷한 기능을 가진 프로젝트로는 SQLite의 WASM 빌드가 추천됨

        Hacker News 의견

     * 브라우저에서 실행되는 것을 봤지만, Node.js와 Bun에서도 서버 측에서 실행된다는 것을 몰랐음
          + SQLite의 대안으로, Node.js/Bun 애플리케이션의 일부로 디스크에 지속되는 전체 프로세스 내 PostgreSQL 구현을 스핀업할 수 있음
          + Python에서 사용하고 싶음, Wasmer-python이나 Wasmtime-py 같은 래퍼를 통해 실행해본 사람이 있는지 궁금함
     * PGlite의 큰 팬임
          + Docker 없이 Postgres를 사용할 수 있는 완벽한 솔루션임
          + npm install만으로 컴퓨터에 Postgres 인스턴스를 가질 수 있어 새로운 개발자를 팀에 쉽게 온보딩할 수 있음
          + PGlite는 Next.js와 완벽하게 작동함
          + Next.js Boilerplate와 함께 로컬 및 개발 환경에서 PGlite를 사용 중임
          + npm install 한 번으로 데이터베이스를 포함한 풀스택 애플리케이션을 가질 수 있음, 외부 도구를 설치할 필요 없음
     * ElectricSQL과 잘 어울릴 것 같다고 생각했음
          + PGLite와 ElectricSQL을 프로덕션 프로젝트에서 사용하고 싶음, 현재 겪고 있는 여러 문제를 해결할 수 있을 것 같음
          + CRDTs와 작업하는 것을 좋아함
          + 제품 출시를 축하하고 싶음
     * IndexedDB와 OPFS를 통해 브라우저 측 지속성을 지원함
     * PostgreSQL과 SQLite의 주요 차이점은 후자가 인프로세스라는 것임, 이제 둘 다 인프로세스가 가능함
          + 두 가지를 비교하는 더 자세한 자료가 있는지 궁금함, 언제 하나를 다른 것보다 선호할지 알고 싶음
     * PGlite를 사용하여 API 통합 테스트를 실험해봤음
          + 꽤 잘 작동했고, Docker에서 실행되는 Postgres를 스핀업하는 것보다 훨씬 나은 DX를 제공함
     * PGlite와 호환성을 확인하기 위해 현재 사용 중인 Postgres Docker 이미지의 버전을 알고 싶음
          + 스크린샷에서 ""PostgreSQL 15devel""을 봤는데, 이는 v15를 의미하는 것 같음
          + 현재 및 미래의 Postgres 버전 사용에 대한 명확한 문서가 있으면 좋겠음, 예를 들어 v16으로 업데이트될 때를 어떻게 알 수 있을지 궁금함
     * 네이티브 애플리케이션을 원할 경우, 아키텍처를 완전히 버리지 않고 사용할 수 있는 네이티브 아날로그가 있는지 궁금함
          + 웹사이트/문서에서 WASM 버전만 언급됨
     * ElectricSQL Discord 서버를 팔로우하고 있음
          + TypeScript 외의 다른 언어에 관심이 있었음, 언어 독립성을 높이는 것이 우선순위에 있는 것을 보니 좋음
          + ElectricSQL이 아키텍처 변경으로 인해 다시 작성되고 있는데, 이것이 PGlite에 영향을 미치는지 궁금함
          + PGlite와 ElectricSQL의 관계가 무엇인지 궁금함
     * PGlite가 확장을 처리할 수 있다는 것이 놀라움
          + ""Postgres Is Enough"" gist에 새로운 섹션을 추가했음
"
"https://news.hada.io/topic?id=16293","안티메메틱스 부서가 존재하지 않는다 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       안티메메틱스 부서가 존재하지 않는다 (2018)

    흥미로운 것들: 소설

      반밈 부서란 없다

     * 반밈의 정의: 반밈은 스스로 검열하는 속성을 가진 아이디어임. 본질적으로 사람들에게 전파를 억제하거나 방해하는 아이디어를 의미함.
     * 반밈의 예시: 비밀번호, 금기, 더러운 비밀 등 공유하지 않는 정보. 복잡한 방정식, 지루한 텍스트, 무작위 숫자 블록, 꿈 등 공유하기 어려운 정보.
     * 이상한 반밈: 기록하거나 기억할 수 없는 것을 어떻게 통제할 수 있을까? 전쟁 중인지조차 알 수 없는 적과의 전쟁을 어떻게 싸울 수 있을까?
     * 반밈 부서 소개: 반밈 부서에 오신 것을 환영함. 아니, 오늘이 첫날이 아님.

      유료판

     * 구매 가능한 형식:
          + Amazon (하드커버, 페이퍼백, Kindle 에디션)
          + Google Play (EPUB)
          + Gumroad (EPUB)
          + 온라인에서 무료로 읽기 가능

      SCP 재단 위키

     * 원본 형식: 반밈 부서는 원래 SCP 재단 위키를 위해 만들어짐. 원본 형식으로 읽기 가능.
     * 추가 자료: 배경 자료, 다른 작가들이 동일한 연속성에서 쓴 이야기, 추가 읽기 자료 링크 제공.
     * 작가 페이지: SCP 재단 위키에서 작성한 다른 작품 확인 가능.

      추가 자료

     * 삭제된 장면: 다양한 이유로 실제 반밈 부서 이야기나 위키에 포함되지 않은 보너스 자료.
          + Introductory Antimemetics (포기된 초안)
          + Haku
          + Scenes from Your Last First Day
          + Wheeler's God
          + Things Foundationers Never Say Out Loud
          + Unforgettable, That's What You Are (잘못된 시작)
          + Antimemetic Housepaint
          + SCP-5XXX: You Can Still Save Her
          + The Worst That Could Happen
          + SCP-6X57: Demographic Anomaly
     * 크로스오버 팬 픽션: 게임 Control의 Jesse Faden과 Marion Wheeler가 각자의 현실에서 발생한 이상 현상과 싸우는 이야기. 액션 가득한 내용.
          + FBC/SCP: Ignition
     * Spotify 플레이리스트:
          + There Is No Antimemetics Division, vol. 1
          + There Is No Antimemetics Division, vol. 2

      GN⁺의 정리

     * 반밈은 스스로 검열하는 속성을 가진 아이디어로, 사람들에게 전파를 억제하거나 방해하는 특성을 가짐.
     * 반밈 부서는 SCP 재단 위키를 위해 만들어진 소설로, 기록하거나 기억할 수 없는 이상한 반밈을 다룸.
     * 다양한 형식으로 구매 가능하며, 온라인에서 무료로 읽을 수 있음.
     * 추가 자료와 크로스오버 팬 픽션, Spotify 플레이리스트 등 다양한 부가 콘텐츠 제공.
     * 반밈 부서는 독특한 개념과 흥미로운 이야기를 통해 독자들에게 새로운 경험을 제공함.

        Hacker News 의견

     * qntm의 다른 작품들도 추천할 만함
          + Unsong과 Scott Alexander의 다른 소설들도 좋음
          + Worm은 Wildbow의 Parahumans 시리즈 첫 번째 책으로 매우 길지만 재미있음
          + 주인공의 능력은 벌레를 조종하는 것인데, 이 능력을 매우 유용하고 치명적으로 표현함
          + Greg Egan과 Ted Chiang도 훌륭한 작가들임
     * 이 책은 어려운 시기를 이겨내게 해준 작품임
          + 인간의 소통과 기억에 관한 은유가 많음
          + 단순한 SF 소설이 아니라 우리가 스스로에게 이야기하는 이야기들에 관한 내용임
          + Godel Escher Bach와 Lewis Carroll의 작품을 떠올리게 함
          + 시적이고 독특한 경험을 제공함
     * 이 책을 친구와 가족에게 선물했는데 매우 호평받았음
          + 단점도 있지만 새로운 개념이 많고 짧은 편임
          + Ra도 좋았지만 플롯이 조금 복잡해서 추천하기 망설여짐
     * 이 책을 추천하면 사람들이 바로 구매함
          + 고개념의 책이라서 그런 것 같음
          + 책이 바이러스처럼 퍼지는 것 같기도 함
     * SCP 세계관의 최고 작품 중 하나임
          + 독자를 계속 궁금하게 만들고, 희망을 느끼게 함
          + 첫 장이 특히 재미있음
          + antimeme의 개념이 흥미로움
     * SCP-4987이 여전히 존재하는 힌트를 발견했지만, 결말은 일반적인 선택을 했음
          + 원래 계획은 다른 결말이었음
          + SCP Foundation은 Men In Black의 비밀 정부 조직과 비슷하지만, 외계인이 아닌 초자연적 현상을 다룸
     * antimeme는 공유하기 어려운 정보임
          + 복잡한 방정식, 지루한 텍스트, 랜덤 숫자 블록 등이 포함됨
     * QNTM의 Fine Structure도 훌륭함
     * antimeme의 개념이 머릿속에서 떠나지 않음
          + SCP 세계관에서 가장 좋아하는 이야기임
"
"https://news.hada.io/topic?id=16320","JavaScript 와 AI 그리고 WD-40 한캔으로 $2,750 을 번 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              JavaScript 와 AI 그리고 WD-40 한캔으로 $2,750 을 번 방법

     * 지난 10년 동안 입증된 기술과 전술을 사용하여 많은 마케팅 동영상 콘테스트 프로모션에서 우승했음
     * 이번 대회는 코드와 AI 도구를 부분적으로 적용한 것에 공로를 인정할 수 있는 최초의 대회(""WD-40 Repair Challenge"")
     * 온라인 콘테스트는 별로지만, 온라인 콘테스트의 규칙이 특히 우승할 수 있는 방식으로 구성되어 있을 때 흥분됨

  세 가지 유리한 규칙

    1. 심사 기준의 함정

     * 참가작이 심사되는 대회에만 참가함. 무작위 추첨이나 인기 투표 대회는 고려하지 않음
     * 비디오 콘텐츠에 1/4의 심사 점수를 부여하여 비디오 제출을 우선시함(사진 제출도 가능하지만 가중치를 못받으므로 제외)
     * 이 대회의 경우 콘텐츠의 전반적인 품질은 중요하지 않음(10%)

    2. 다양한 상금

     * 1위를 목표로 하지만, 16개의 현금 상품과 13개의 실물 상품, 총 29개의 상품이 걸려 있음. 전례가 없는 규모
     * 최소한의 노력으로 최대한의 결과를 얻는 것이 가능한지 확인해야함

    3. 여러 상을 받을 가능성

     * 여러 개의 참가작을 제출하는 것이 가능하며, 여러 프로젝트를 제출한 사람이 여러개의 수상이 가능하다는 것도 좋았음

  경쟁 평가

     * 총 538개의 참가작이 있음
     * Laravel Livewire를 사용하여 구축된 대회 웹사이트에서 데이터를 스크래핑함
          + Playwright 스크립트를 사용하여 제출물 데이터를 수집

    제출물 유형 분류

     * 제출물 유형을 파악하기 위해 SVG 아이콘을 사용함
     * Video, Photo, Step 세 가지 유형이 있음
     * Step 제출물이 가장 경쟁력이 있다고 판단
          + Step의 경우 추가적인 문서로 세부 정보를 제공하는 것이 허용
          + 뭔가를 수리하기 위해 단계를 명확히 밝히는 것이 100점 만점중에서 10점을 차지하기 때문에 Step 유형이 가장 수상가능성이 높음
          + 그래서 모든 제출물을 Step 하기로 결정

    경쟁력 있는 제출물 분석

     * 총 538개의 제출물 중 439개는 비경쟁적인 사진 제출물로 간주됨
     * 경쟁력 있는 제출물은 99개로 줄어듦
     * 품질이 낮은 제출물은 추가로 제외하여 경쟁력 있는 제출물 수를 76개로 줄임

  여러 상을 받을 확률 계산

     * GPT-4를 사용하여 확률 계산 코드를 작성함
          + 단 한 번의 응모로 5,000달러를 받을 확률은 77분의 1
          + 꽤 괜찮아 보였지만, 여러 번 응모할 수 있었기 때문에 가능한 한 최대한의 응모 횟수를 늘리면서 최대한 많은 상금을 받을수 있게 해야함
     * 8개의 제출물을 제출했을 때 최소 하나의 상을 받을 확률이 95%임
     * 무조건 참가해야 했음. 그래서 근처 공구상에서 WD-40 한통을 $7.87에 삼

  고품질, 저노력 자산

     * 마감일이 빠르게 다가오고 있어서, 시간 낭비하지 않고 그냥 1930년대 주택을 작게 수리하는 것을 iPhone 13으로 간단하게 촬영함
     * 내레이션, 음악, 편집은 나중에 고민하고, 지금은 가중치 분석에 우선순위를 둔 콘텐츠 녹화에 집중
     * 8가지 자잘한 작업을 하나당 15~20분 들여서 촬영 ( 우편함 청소하기, 문 걸쇠 느슨하게 하게, 미닫이문 윤활제 바르기, 삐걱거리는 문 경첩 조용하게 만들기..)
     * Adobe Premiere를 사용하여 비디오를 편집함

    편집 공식

    1. 문제 소개
    2. WD-40과 기본 도구로 문제를 해결할 수 있음을 설명
    3. 문제 해결 단계를 상세히 설명
    4. WD-40의 도움으로 개선된 결과를 보여줌

    Elevenlabs

     * 이전 콘테스트에서는 항상 출품작의 내레이션을 직접 마이크에 대고 녹음해야 했고, 완벽한 테이크를 위해 개 짖는 소리나 아기 울음소리 때문에 재녹음도 했음
     * 이번엔 Elevenlabs를 사용하여 나레이션을 생성함
     * 대부분의 경우 첫 번째 시도에서 결과가 완벽했음. 발음이 틀리거나 강조가 이상해서 다시 만들어야 했던 스크립트는 몇 개에 불과

    Suno

     * Suno를 사용하여 내가 원하는 분위기의 배경 음악을 생성함
          + soft drums, electric guitar, folk, acoustic, banjo, instrumental

  제출

     * 편입에 약 8시간 정도 걸렸고 바로 제출
     * 8개의 제출물 중 7개가 상을 받음(4,5,6등)
          + $500 기프트 카드 5장, 250 기프트 카드 1장, WD-40 브랜드가 찍힌 1갤런짜리 Yeti 물병

  GN⁺의 정리

     * 이 기사는 AI 도구와 코드 사용을 통해 마케팅 비디오 대회에서 승리하는 방법을 설명함
     * 경쟁력 있는 제출물을 분석하고 확률을 계산하여 전략적으로 접근함
     * Elevenlabs와 Suno 같은 AI 도구를 사용하여 나레이션과 배경 음악을 쉽게 생성함
     * AI와 코드를 활용하여 최소한의 노력으로 최대한의 결과를 얻는 방법을 보여줌

   넷공으로 저런게 되는군요 ㅋㅋ

   제목만 보고 무슨 이야기인가 했는데, 정말 재미나게 봤네요.

        Hacker News 의견

     * 예술계에서 전시회 제안서를 제출할 때, 대부분의 사람들이 조직이 원하는 내용을 제대로 공부하지 않기 때문에 경쟁이 의외로 쉬움
          + 제안서의 모든 요구사항을 정확히 충족시키면, 예술 작품이 형편없어도 앞서 나갈 수 있음
     * 게시물의 75%가 수학적으로 대회를 참여할지 여부를 확인하는 내용이어서 좋았음
     * 한 번은 대회를 통해 짧은 TV 경력을 쌓았음
          + 영국의 컴퓨터 TV 쇼에서 빠른 속도의 다지선다형 플래시 게임 대회가 있었음
          + 세 개의 계정을 만들어 첫 두 계정으로 정답을 알아내고, 세 번째 계정으로 완벽한 점수를 얻었음
          + 상은 쇼를 한 번 공동 진행하는 것이었지만, 긍정적인 피드백이 많아 새로운 직장을 찾을 때까지 고정 출연하게 되었음
          + 쇼에 참여한 이유는 Kate Russell에게 큰 호감이 있었기 때문임
          + 쇼 링크
     * 대회가 끝나기 전에 모든 참가작을 게시하는 것이 일반적인지 궁금함
          + 그렇다고 해도, 똑똑한 경쟁자들은 자신의 작업이 다른 사람들에게 이익이 되지 않도록 마지막 순간에 제출할 것임
     * Playwright를 대회 정보 수집에 사용하는 것이 마음에 듦
          + 현재 이전 스크래핑 프로젝트를 다시 하기 위해 Playwright를 사용 중이며, 이러한 실제 사례를 보는 것이 큰 도움이 됨
          + 문제를 블랙잭 카드 카운터처럼 접근함
          + 규칙을 평가하고, 가능한 경우 수학적 확률을 예측하며, 그렇지 않은 경우 논리적 예측을 함
          + 경쟁 상황을 주의 깊게 관찰하여 최적의 전략을 세움
          + 스마트한 글 작성에 감사하며 큰 영감을 받았음
     * AWD와 4WD 논쟁이 다시 시작된 것 같음
          + WD-40이 윤활제인지 여부도 상황에 따라 다름
     * ""polish""를 ""Polish""로 잘못 발음한 것이 요정 제출물로 승리하지 못한 이유인지 궁금함
          + 재미있는 읽을거리였음
     * 상 목록을 나열할 때 갤런 병을 보고 싶었음
          + 멋진 작업이었음
     * 정말 흥미롭고 재미있는 게시물임
          + 작성하고 공유해줘서 고마움
     * 정말 멋진 게시물임
          + 창의적인 요정 제출물이 훌륭했음
          + 왜 우승하지 못했는지 이해되지만 재미있었음
          + ElevenLabs 내레이터가 요정들이 ""Polish""를 적용했다고 말했음
          + Gdańsk나 Warsaw 출신인가?
"
"https://news.hada.io/topic?id=16403","Netboot.xyz - 당신이 좋아하는 OS를 한 곳에","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Netboot.xyz - 당신이 좋아하는 OS를 한 곳에

     * iPXE를 기반으로 하는 네트워크 기반 부팅 가능 OS 설치 프로그램
     * 여러 종류의 운영 체제를 가볍게 부팅할 수 있음
          + 가능한 한 빨리 시작할 수 있도록 지원
     * 새로운 운영 체제를 다운로드해서 미디어를 다시 작성하는 수고없이 손쉽게 설치할 수 있음
          + 단일 이미지에서 운영 체제를 복구 가능
          + 모든 시스템 관리자에게 필수적인 도구
     * iPXE 프로젝트를 사용하여 시스템의 Preboot Execution Environment (PXE)를 활용해 프로비저닝, 복구 또는 라이브 부팅 환경으로 로드
          + BIOS 내에서 사용자 친화적인 메뉴를 제공하여 특정 유형의 버전 또는 부팅 가능한 플래그와 함께 원하는 운영 체제를 쉽게 선택

        Hacker News 의견

     * iPXE가 어떻게 작동하는지 궁금해하는 의견. BIOS가 iPXE 또는 PXE를 지원해야 하는지, 또는 로컬 시스템을 먼저 부팅해야 하는지 질문함
          + DHCP와 셀프 호스팅에 대해 언급하며, LAN 내에서 서비스가 실행되어야 하는지, 또는 공용 서버에서 이미지를 부팅할 수 있는지 궁금해함
     * 인터넷에서 이미지를 가져오는 것에 대한 신뢰성 문제를 제기하는 의견
          + 애플리케이션을 방화벽으로 보호하여 로컬 이미지만 사용하도록 하는 것이 안전하다고 주장함
     * 네트부팅을 시도했으나, 케이블 인터넷으로 ISO를 다운로드하는 데 시간이 오래 걸려 흥미를 잃었다는 의견
          + 필요한 ISO를 미리 다운로드하여 Ventoy 드라이브에 저장하고 부팅하는 것이 더 빠름
     * Ventoy의 USB 버전을 매일 사용하며, iVentoy를 사용해보지 않았지만 비교 의견을 제시함
     * 10년 전 무선 라우터를 설정하여 iPXE 이미지를 제공하고 다양한 OS를 인터넷을 통해 부팅했으나, 흥미를 잃고 사용하지 않았다는 의견
     * VenToy의 대안을 찾다가 모든 임베디드 바이너리를 스캔했으며, 완전히 깨끗하지만 Windows를 지원하지 않는다는 의견
          + Linux에서는 문제가 없으며, 훌륭한 솔루션이라고 칭찬함
     * iVentoy가 더 간단하다는 의견
          + 서버 폴더에 ISO를 넣기만 하면 99% 작동하며, netboot.xyz는 로컬 이미지를 사용하려면 더 많은 설정이 필요함
          + 자체 DHCP를 가지고 있어 BOOTP 설정을 알 필요가 없음
     * 사용할 수 있는 운영 체제 목록을 제공하는 링크를 공유함
          + AWS/EC2에서 사용할 수 있다는 정보도 포함됨
     * Ventoy와 비슷한지 궁금해하며, 플래시 드라이브를 다시 설정할 때 시도해보겠다는 의견
          + Windows 도구를 사용하여 스파이웨어/멀웨어를 제거할 수 있는지 질문함
          + Ventoy에서는 디렉토리를 만들어 OS 부팅 시 선택할 수 있음
     * dnsmasq를 사용하여 PXE를 설정했으나, 더 고급 솔루션으로 전환을 고려 중이라는 의견
          + netboot.xyz에 API가 있는지 궁금해함
"
"https://news.hada.io/topic?id=16380","클라우드에 있는 거대하고 규제가 없는 발전소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        클라우드에 있는 거대하고 규제가 없는 발전소

     * 최근 네덜란드 해커가 400만 개의 태양광 패널 설치를 제어할 수 있었음. 이는 처음이 아님.
     * 대부분의 소비자 및 비즈니스 태양광 패널은 소수의 회사에 의해 중앙에서 관리됨.
     * 네덜란드에서만 이러한 태양광 패널은 최소 25개의 중형 원자력 발전소와 동등한 전력 출력을 생성함.
     * 유럽에는 이러한 중앙 관리자를 규제하는 규칙이나 법률이 거의 없음.
     * 이러한 클라우드 기반 관리 플랫폼은 해킹이나 사고로 인해 모든 태양광 패널을 동시에 종료할 수 있음.
     * 최근 윤리적 해커와 네덜란드 전력망 관리자 TenneT의 확인에 따르면 이는 이론적인 시나리오가 아님.
     * 개별 태양광 패널은 큰 피해를 주지 않지만, 시간이 지남에 따라 설치 수가 크게 증가하고 관리가 몇몇 장소에 집중됨.
     * 중앙에서 기가와트의 전력을 차단할 수 있는 능력을 제거하거나 중앙 관리자를 에너지 회사로 규제해야 함.
     * 네덜란드에서는 15GW의 전력이 먼 곳에서 제어되고 있으며, 그 제어자가 누구인지 정확히 알지 못함.
     * 다가오는 EU NIS2 지침은 개선의 기회를 제공하지만, 이를 명확히 해야 함.
     * SolarPower Europe도 NIS2 규칙을 태양광에 명시적으로 적용할 것을 요구함.

더 긴 이야기

     * Willem Westerhof는 2016년부터 이 문제에 대한 관심을 끌기 위해 노력해왔음.
     * Willem은 그의 고용주 Secura와 함께 네덜란드 ""Topsector Energie""를 위한 대규모 보고서를 작성함.
     * 유럽 대륙의 동기화된 전력망은 유럽 대부분과 그 이상을 통합하는 대단한 성과임.
     * 전력망은 항상 균형을 유지해야 함. 너무 많은 전력이 네트워크에 들어가면 주파수가 상승하고 과전압이 발생할 수 있음.
     * 최근 알바니아, 몬테네그로, 보스니아, 크로아티아에서 국제적인 정전이 발생함.
     * 대규모 전력 제공자에게는 높은 기준이 적용됨. 그들의 발전소는 감시되고 장비는 많은 요구 사항을 충족해야 하며, 직원은 적절한 자격증을 가져야 함.
     * 유럽 네트워크와 제공자는 네트워크를 안정적이고 안전하게 유지하기 위해 지속적으로 협력함.

우리가 규제하는 것

     * 태양광 패널은 인버터를 통해 네트워크에 연결됨. 이 장치는 패널의 전력을 전기 그리드가 처리할 수 있는 형태로 변환함.
     * 이 장치는 규칙을 충족해야 하며, 네덜란드에서는 벨기에 Synergrid가 승인한 인버터만 설치할 수 있음.

우리가 규제하지 않는 것

     * 대부분의 인버터는 인터넷에 연결됨. 이 설정은 제조업체와 연결을 만들고 태양광 패널 및 전력 생산에 대한 통계를 업로드함.
     * 패널 소유자는 앱이나 웹사이트를 통해 제조업체와 연결할 수 있음.
     * 제조업체는 모든 패널을 켜고 끌 수 있으며, 인버터에 새로운 소프트웨어를 설치할 수 있음.
     * 제조업체가 해킹당하면 공격자가 제어하는 잘못된 소프트웨어 업데이트를 인버터에 보낼 수 있음.

그럼 어떻게 될까?

     * 전력망은 매우 민감함. 정확히 같은 양의 전력이 들어가고 나가야 함.
     * 태양광 인버터 패널 제조업체는 수백만 개의 설치를 켜고 끌 수 있음.
     * 네덜란드 윤리적 해커 Wietse Boonstra와 Hidde Smit는 제조업체의 허가 없이 태양광 패널 설치의 소프트웨어를 수정할 수 있었음.

오, 안돼

     * 수십 개의 원자로를 동시에 끌 수 있는 제어판이 있다면 모든 종류의 안전 규정을 준수해야 함.
     * 가정용 태양광 패널과 인버터는 ""일반"" 소비자 가전제품으로 간주되어 검사와 법률이 없음.
     * 관리가 소수의 공급자에게 집중되었고, 이들은 엄격하게 규제되지 않음.

그리고 지금?

     * 네덜란드 Topsector Energie가 의뢰한 최근 Secura 보고서는 상황이 얼마나 나쁜지 파악하는 데 매우 유용함.
     * 새로운 법률이 등장하고 있으며, NIS2와 Cyber Resilience Act가 이러한 당사자를 더 엄격한 규칙에 따르게 할 수 있음.
     * SolarPower Europe도 중앙 관리 당사자가 NIS2의 범위에 포함되어야 한다고 주장함.

GN⁺의 정리

     * 이 기사는 태양광 패널의 중앙 관리가 어떻게 유럽 전력망에 큰 위험을 초래할 수 있는지 설명함.
     * 중앙 관리자의 규제가 거의 없다는 점에서 문제의 심각성을 강조함.
     * NIS2와 Cyber Resilience Act와 같은 새로운 법률이 이 문제를 해결하는 데 도움이 될 수 있음.
     * 이 기사는 에너지 관리의 중요성과 보안 문제를 강조하며, 관련 업계 종사자들에게 중요한 정보를 제공함.
     * 유사한 기능을 가진 제품이나 프로젝트로는 SolarEdge, Enphase Energy 등이 있음.

        Hacker News 의견

     * 네덜란드의 태양광 패널이 25개의 중형 원자력 발전소와 동등한 전력 출력을 생성한다는 주장은 과장된 것임
          + 실제 연간 에너지 생산 데이터를 보면, 이는 평균 원자력 발전소의 1.5배 정도임
          + 태양광 패널의 위치에 따라 출력이 크게 달라짐
     * 패널과 인버터 소유자가 제조업체와 연결하여 패널 상태를 확인할 수 있음
          + 기술적으로 모든 것을 제조업체 서버를 통해 실행할 필요는 없었음
          + 소비자나 설치자가 네트워크 설정에 대한 전문 지식이 부족하기 때문에 이렇게 선택된 것임
     * 오프그리드 생활을 하는 사용자가 인버터 모니터링이 온라인에서만 가능하다는 점에 불만을 가짐
          + Raspberry Pi를 사용해 문제를 해결했지만, 인터넷 연결을 끊으면 새로운 네트워크가 생성됨
          + WiFi 모듈을 제거하는 것을 고려 중임
     * 기술 표준에 대한 언급에서 정치인과 비기술자를 조심해야 함
          + 현재의 IT 인프라 문제는 주로 학위 소지자들에 의해 발생함
          + 기업을 책임지게 하는 것이 문제 해결의 시작일 수 있음
          + 예를 들어, CrowdStrike와 같은 회사를 법적 책임을 지게 하면, 다른 회사들도 변화할 가능성이 있음
     * 재생 가능 에너지가 분산형 전력 생산의 잠재력을 가지고 있다는 주장이 있음
          + 그러나 새로운 병목 지점을 도입함으로써 보안 문제가 발생함
     * EU에서 발전소에 대한 사이버 보안 규제가 있는지 질문이 있음
          + 제3자 데이터 연결이 필요한 시스템을 허용하지 않음
          + 여러 서비스가 실패한 사례가 많음
     * 설치자가 Solaredge 인버터를 클라우드에서 분리하는 데 어려움을 겪음
          + 원격 관리 금지 규제가 필요하다고 주장함
          + 데이터는 읽기 전용으로만 원격으로 확인할 수 있어야 함
     * 유럽에서는 위험 완화를 위해 학위와 자격증을 강조하는 경향이 있음
          + 이는 느리게 움직이는 산업에는 적합하지만, 태양광/풍력 산업에는 적합하지 않음
     * Victron 제품의 클라우드 연결은 선택 사항이며 기본적으로 비활성화됨
          + 하드웨어는 모듈식이고 소프트웨어는 경쟁 제품보다 우수함
          + 책임 있는 공급업체를 선택해야 함
     * 태양광 패널을 끌 수 있다면, 왜 유틸리티 회사가 초과 전력을 손해를 보고 판매해야 하는지 질문이 있음
          + 태양광 농장에 필요한 만큼 출력을 줄이도록 지시할 수 없는 이유를 묻고 있음
"
"https://news.hada.io/topic?id=16398","Zed AI 공개 (with Anthropic)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Zed AI 공개 (with Anthropic)

     * Zed는 텍스트 조작을 마스터하는 데 전념해 왔음
          + 파서 생성기 제작, 프로그래밍 언어 설계, 두 개의 프로덕션급 텍스트 편집기 출시 등
     * 대형 언어 모델(LLM)이 텍스트 해석과 생성에 혁신을 가져오자, Zed는 이를 탐구하기로 결정
     * 지난 2년 동안 Zed는 빠르고 신뢰할 수 있는 텍스트 편집기를 구축하는 데 집중했으며, 동시에 LLM을 워크플로에 통합하는 실험을 진행함
     * Anthropic의 엔지니어들이 Zed를 발견하고, Zed의 텍스트 중심 인터페이스의 가치를 인정했음. 이로 인해 협업이 시작됨

  Zed AI 소개

     * Zed AI: Anthropic의 Claude 3.5 Sonnet을 기반으로 한 AI 지원 코딩 서비스. Zed에 로그인하면 접근 가능
     * Claude 3.5 Sonnet의 Fast Edit Mode: 텍스트 편집에 최적화된 새로운 모드로, 코드 리팩토링과 문서 편집을 거의 실시간으로 수행할 수 있음.

  Zed AI의 작동 방식

     * Anthropic과의 협업을 통해 Zed AI는 AI 개발의 최전선에 있는 전문가들에게 강력하고 정밀한 도구를 제공함
     * Zed의 AI 지원 코딩 접근 방식은 두 가지 핵심 기능에 의존함: 어시스턴트 패널과 인라인 변환

    어시스턴트 패널: 방대한 컨텍스트 마스터링

     * 어시스턴트 패널은 AI 모델과 상호작용하는 곳으로, 전체 LLM 요청을 텍스트로 노출함
     * 슬래시 명령어 시스템 도입:
          + /tab: 열린 탭의 내용 삽입
          + /file: 특정 파일 또는 파일 트리의 내용 삽입
          + /terminal: 터미널 출력 포함
          + /diagnostics: 코드베이스 전반의 진단 정보 삽입
          + /fetch: 임의의 HTTP URL 응답 삽입

    인라인 변환

     * ctrl-enter로 활성화되며, 자연어 프롬프트를 통해 코드 변환 및 생성을 수행함.
     * Zed의 CRDT 기반 버퍼와 커스텀 스트리밍 차이 프로토콜을 사용하여 모델의 출력을 토큰 단위로 실시간 스트리밍함.
     * Fast Edit Mode는 코드 리팩토링과 문서 편집을 거의 실시간으로 수행할 수 있게 함.

  Zed AI의 향후 계획

    복잡한 변환을 위한 워크플로

     * /workflow 명령어를 통해 어시스턴트 패널과 프로젝트 파일 간의 상호작용을 확장함.
     * 이 기능은 어시스턴트 패널에서 작업하여 코드베이스에 직접 영향을 미치는 변화를 조정할 수 있게 함.

    효율적인 컨텍스트 작성 도구

     * /project: 프로젝트 정보를 빠르게 찾고 어시스턴트 패널에 삽입하는 명령어.
     * /auto: 현재 작업에 기반하여 자동으로 컨텍스트를 삽입하는 기능.

GN⁺의 정리

     * Zed는 텍스트 조작에 대한 깊은 이해를 바탕으로 AI 지원 코딩 도구를 개발했음
     * Anthropic과의 협업을 통해 Zed AI는 강력하고 정밀한 코딩 도구로 발전
     * 어시스턴트 패널과 인라인 변환 기능을 통해 개발자에게 투명하고 제어 가능한 AI 지원 코딩 환경을 제공
     * Zed AI는 개방적이고 협력적인 소프트웨어 개발을 지향하며, 사용자와 함께 발전해 나가기를 기대

        Hacker News 의견

     * Zed의 AI 통합이 매우 매끄럽고 사용하기 좋음
          + Anthropic과 직접 연결하여 중간 단계를 줄이는 것을 선호함
          + Zed의 수익 모델이 안정적일 가능성에 대해 긍정적임
          + 오픈 소스 제공을 훼손하지 않는 방식으로 수익을 창출할 수 있을 것 같음
          + Zed 팀의 성공을 기원함
     * 빠르고 프로그래밍 가능한 텍스트 편집기를 원함
          + Zed가 거의 이상적이지만, AI와 협업 기능보다는 확장성에 집중하길 바람
     * neovim에서 Zed로 전환했으며, 전반적으로 만족함
          + telescope와 일부 vim 내비게이션 기능이 그리움
          + AI 기능이 부족하다고 느끼며, Zed 팀이 이를 개선할 것이라고 믿음
          + 실시간 기능보다는 AI에 집중하길 바람
     * Anthropic의 Copilot 대안 발표에 흥미를 느낌
          + Claude 3.5 Sonnet의 새로운 Fast Edit Mode가 매우 빠른 텍스트 편집을 가능하게 함
     * AI 어시스턴트가 속도를 늦춘다고 생각함
          + 많은 개발자들이 유용하다고 주장하는 것에 대해 의문을 가짐
     * 새로운 기능 요청
          + aider의 repo-map과 같은 기능을 원함
          + 코드베이스 이해를 돕기 위해 LLM이 고수준의 맵을 제공하고 필요한 파일을 요청할 수 있기를 바람
     * 코드 작성보다는 이해하는 데 더 많은 시간을 씀
          + AI가 코드를 작성하는 것보다 팀이 작성해야 할 코드를 이해하는 데 도움을 주는 AI가 더 유용할 것임
     * ""LLM에게 셸 명령을 요청하고 바로 실행하는"" 시대를 부끄러워하게 되길 바람
     * ML/AI 기능을 비활성화할 수 있는 빌드 옵션을 추가하길 원함
          + 좋은 편집기만 있으면 충분함
     * nvim과 자체 AI 플러그인 생태계를 사용하는 경우, Zed AI를 시도할 가치가 있는지 궁금함
          + 관련 링크 제공:
               o ChatGPT.nvim
               o codecompanion.nvim
               o gp.nvim
               o parrot.nvim
"
"https://news.hada.io/topic?id=16342","아리스토텔레스 – 좋은 삶을 사는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         아리스토텔레스 – 좋은 삶을 사는 방법

     * 2400년 전 아리스토텔레스는 어떻게 행복해지는지 밝혀냈음
     * 그의 『니코마코스 윤리학』은 훌륭한 삶을 위한 안내서임

좋은 것(Good)이란 무엇인가?

     * 좋은 것은 고유의 기능을 잘 수행하는 것임
     * 예를 들어, 좋은 칼은 잘 자르는 칼이고, 좋은 눈은 잘 보는 눈임
     * 인간에게 있어서 좋은 것은 무엇인가? 인간만의 고유한 특징인 사유하고 느끼는 영혼을 봐야 함
     * 따라서 좋은 삶을 산다는 것은 훌륭한 영혼을 가지는 것임. 이는 명확한 지성과 고귀한 성품으로 나타남

명확한 지성의 덕목 (The virtues of a clear intellect)

     * 현대에서는 모든 정신적 능력을 ""지능""으로 축소시키는 경향이 있음
     * 아리스토텔레스는 좀 더 깊이 파고들어 다양한 이론적 덕목을 파악했음:
          + 기예 Art(techne): 무언가를 만드는 능력
          + 지성 Intelligence(nous): 세계의 근본 진리를 직관적으로 이해하는 능력
          + 과학적 지식 Scientific knowledge (episteme): 세계에 대한 논리적 추론
          + 신중함 Prudence (phronesis): 실용적(도덕적) 결정을 내리는 능력
          + 지혜 Wisdom (sophia): 깊은 진리에 대한 포괄적 이해
     * 이러한 이론적 덕목들은 진리와 가능성을 이해하는 데 도움을 줌
     * 그러나 아리스토텔레스는 성품(Character) 또한 좋은 삶에 필수적이라고 주장함

고귀한 성품의 덕목 (The virtues of a noble character)

     * 좋은 성품(Character)은 감정을 적절히 다룰 수 있음
     * 이는 두 극단 사이의 적절한 중용을 찾는 것으로 이루어짐:
          + 용기는 비겁함과 무모함 사이의 중용임
          + 절제는 탐식과 금욕 사이의 중용임
     * 이 중용은 사람에 따라 다름. 예를 들어, 운동선수는 사무직 근로자보다 더 많은 음식이 필요할 수 있음
     * 상황에 따라 다르기도 함. 때로는 갈등을 피하는 것이 더 나을 때도 있고, 다른 때는 입장을 고수하는 것이 더 나을 때도 있음
     * 우리는 적절한 행동을 위한 규칙을 연구할 수 없음
          + 대신 습관을 통해 상황에 맞는 올바른 중용을 찾도록 우리의 성품을 훈련해야 함

행동!

     * 성공적인 삶에서는 인간의 영혼이 고결한 행동(virtuous actions)을 통해 그 목적을 달성함
     * 이러한 덕목을 타고나는가?
          + 아님. 아리스토텔레스는 인간이 선할 수 있는 능력을 가지고 있지만, 성격을 개발하는 것은 우리에게 달려 있다고 말함
     * 이는 공부와 습관을 통해 가장 잘 이루어짐
          + 탁월함은 존재하는 것이 아니라 행동하는 것임

좋은 삶은…

     * 아리스토텔레스에게 행복은 지성과 성품 모두를 포함하는 영혼의 고결한 행동을 통해 평생 동안 이루어짐
     * 그러나 행복이란 기분 좋음을 의미하는 것인가?

…은 행복한 삶

     * 아리스토텔레스는 쾌락이 재미있다는 것을 부정하지 않음. 돈, 명성, 음식은 훌륭하고 우리의 행복에 기여함
     * 그러나 이러한 것들은 좋은 삶에 필수적이지 않음. 심지어 크게 고통받더라도 고결한, 즉 좋은 삶을 살 수 있음
     * 아리스토텔레스가 말하는 ""행복한"" 삶은 쾌락이 아닌 충만하거나 번영하는 삶을 의미함
          + 이러한 고결한 삶은 우리가 세상에서 우리의 자리를 찾는 데 도움을 줌
          + 우리가 하는 모든 일은 궁극적으로 우리가 될 수 있는 최선을 위한 것이어야 함: 명석한 지성과 고결한 성품을 지닌 인간의 영혼
          + 행복은 쾌락의 느낌이 아니라 탁월함을 추구하는 것임

    GN⁺의 정리

     * 아리스토텔레스의 관점은 인간 본성에 대한 깊은 통찰력을 제공함. 그는 우리가 단순히 쾌락을 추구하는 존재가 아니라 탁월성을 추구하는 존재라는 점을 강조함
     * 이는 오늘날 자기계발 문화에서 종종 간과되는 측면임. 우리는 성공, 부, 명성 등 외적인 것에 초점을 맞추는 경향이 있지만, 아리스토텔레스는 내적인 성품의 발전이 더 중요하다고 말함
     * 또한 그의 중용 개념은 오늘날에도 여전히 유효함. 우리는 종종 극단으로 치우치는 경향이 있지만, 상황에 맞는 적절한 반응을 찾는 것이 진정한 지혜라 할 수 있음
     * 다만 아리스토텔레스의 관점은 다소 엘리트주의적일 수 있음. 그는 탁월성 추구를 소수의 특권층만이 누릴 수 있는 것으로 보는 경향이 있음. 현대 사회에서는 모든 이들이 자신만의 방식으로 탁월성을 추구할 수 있어야 함
     * 종합하면 아리스토텔레스의 윤리학은 인간 본성과 좋은 삶에 대해 여전히 깊이 있는 통찰을 제공하지만, 현대의 맥락에 맞게 재해석될 필요가 있음. 우리 모두는 자신만의 고유한 방식으로 탁월성을 추구하며 충만한 삶을 살아갈 수 있음

   너무 좋은 글이군요..

        Hacker News 의견

     * 행복의 중요성을 과소평가하거나 덕의 필연적인 부산물로 가정하는 것 같음
          + 아리스토텔레스가 상류층이었기 때문에 이미 성공이나 부를 가졌을 가능성이 있음
          + 고통받거나 힘들게 살아가는 사람들에게는 그의 주장이 잘 맞지 않을 수 있음
     * 아리스토텔레스의 철학을 이해하려면 그가 사용하는 그리스어 용어에 대한 배경 지식이 필요함
          + 예를 들어, 니코마코스 윤리학의 첫 몇 줄에 집중해야 함
          + 모든 존재가 자신만의 선을 가지고 있다는 그의 주장을 이해하는 것이 중요함
     * 올바른 행동 규칙을 공부하는 대신, 습관을 통해 성품을 길러야 함
          + 아리스토텔레스는 ""출발점""과 ""습관화""의 중요성을 강조함
          + 올바른 양육을 받은 사람들은 이미 올바른 원칙을 쉽게 이해할 수 있음
          + 그렇지 않은 사람들은 다른 사람의 조언을 잘 듣는 것이 중요함
     * 페이지와 애니메이션을 보는 것이 재미있지만, 집중해서 읽기 어려움
     * 아리스토텔레스의 지혜는 그의 전체 시스템을 받아들이지 않더라도 유용함
          + 예를 들어, 그의 정치학에서 기계공은 덕을 실천할 수 없다고 주장함
     * 이 기사는 단순한 예술로 잘 실행되었음
          + 완전히 동의하지는 않지만, 지키고 싶은 덕목을 아는 것은 좋은 생각임
     * 아리스토텔레스는 인간이 선할 수 있는 능력을 가지고 있지만, 성품을 개발하는 것은 우리에게 달려있다고 말함
          + 이를 공부와 습관을 통해 달성할 수 있음
     * Hacker News에서 이런 자기계발 기사를 보는 것이 좋음
          + 인류가 수천 년 동안 알고 있었던 것에 대해 ""눈을 뜨게"" 해주는 것처럼 보임
     * 훌륭한 기사임
          + 이런 그래픽을 만드는 방법을 아는 사람이 있는지 궁금함
     * 좋은 기사임
          + 기본을 상기시키는 것이 항상 좋음
          + 그래픽이 마음에 듦
"
"https://news.hada.io/topic?id=16387","런치 HN: Sorcerer (YC S24) – 더 많은 데이터를 수집하는 기상 관측 기구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           런치 HN: Sorcerer (YC S24) – 더 많은 데이터를 수집하는 기상 관측 기구

Sorcerer 소개

     * Sorcerer는 6개월 이상 지속되는 기상 관측 풍선을 제작하여 데이터 수집 비용을 1000배 절감하고, 접근하기 어려운 지역에서도 데이터를 수집할 수 있게 함.

  기상 재해와 데이터 수집

     * 1981년 미국에서 기상 재해로 인한 피해액은 35억 달러였으나, 2023년에는 949억 달러로 증가함.
     * 미국 기상청은 매년 수십억 달러를 기상 풍선, 위성, 항공기 센서 네트워크에 투자하여 매일 수백 테라바이트의 데이터를 생성함.
     * 이 데이터는 전 세계 기상 예보를 생성하는 데 사용되지만, 여전히 정확한 예보가 어려운 지역이 존재함.

  기상 데이터의 중요성

     * 기상 예보에 가장 중요한 데이터는 대기의 수직 데이터 '사운딩'임.
     * 매일 전 세계에서 2,500개의 일회용 라텍스 라디오존데가 발사되어 약 2시간 동안 데이터를 수집한 후 지구로 떨어짐.
     * 라틴 아메리카와 아프리카, 해양 지역에서는 이러한 시스템의 발사 지점이 부족하여 약 80%의 지역에서 기상 데이터가 부족함.

  Sorcerer의 해결책

     * Sorcerer의 시스템은 해수면에서 65,000피트까지 하루에 여러 번 상승 및 하강하여 수직 데이터 사운딩을 수집함.
     * 각 풍선과 페이로드는 1파운드 미만으로, 전 세계 어디서나 발사 가능함.
     * 위성 송수신기와 얇은 필름 태양광 패널을 사용하여 통신 및 전력을 공급함.
     * 실시간 텔레메트리를 통해 비행 경로를 최적화하고, 풍선 간의 간격을 유지하며 수명 종료 시 회수 구역으로 유도함.

  극한 환경에서의 운영

     * 성층권은 매우 가혹한 환경으로, 적도 근처에서 -80°C까지 내려가는 온도를 경험함.
     * 하루 동안 대기 상승 및 하강을 통해 극심한 온도 변화를 겪으며, 100mph 이상의 강풍을 만나기도 함.
     * 이러한 조건은 성층권에서의 운영을 매우 어렵게 만듦.

  초기 고객과 활용 사례

     * 초기 고객은 성층권에서 큰 비용이 드는 작업을 수행하는 회사들로, Sorcerer의 풍선을 사용하여 작업 조건을 파악함.
     * 성층권 전용 예보 제품을 개발 중임.

  장기 지속성과 저비용의 혁신

     * Sorcerer의 풍선은 장기 지속성과 저비용이 특징으로, 수천 개의 풍선을 유지하는 비용이 유용한 기상 위성 하나의 10분의 1에 불과함.
     * 수집된 데이터를 AI 모델 훈련에 사용하여 기존의 수치 예보보다 더 정확한 예보를 생성함.
     * 고유한 데이터를 수집하여 모델의 일관된 우위를 유지함.

GN⁺의 정리

     * Sorcerer는 기상 관측 풍선을 통해 비용 효율적으로 데이터를 수집하여 기상 예보의 정확성을 높이는 혁신적인 프로젝트임.
     * 기상 재해로 인한 피해가 증가하는 상황에서, 보다 정확한 예보는 매우 중요함.
     * 성층권에서의 운영은 어려운 도전이지만, Sorcerer의 기술은 이를 극복하고 있음.
     * 유사한 기능을 가진 프로젝트로는 WeatherBalloon과 SkyWatch가 있음.

        Hacker News 의견

     * 첫 번째 의견
          + 풍선이 지구로 데이터를 어떻게 전송하는지 궁금해함
          + University of Oxford에서 원격 위치에서 공간 효율적인 데이터 전송 연구를 했음
          + JSON을 더 공간 효율적으로 직렬화하는 기술을 개발했음
          + 이 기술은 Protocol Buffers, Apache Avro, ASN.1 등보다 더 효율적임
          + 관심이 있다면 연결하여 논의하고 싶어함 (jv@jviotti.com)
     * 두 번째 의견
          + 여러 PicoBalloons를 제작하여 지구를 일주했음
          + 기상 보고는 없고 WSPR 보고만 있음
          + GPS 스푸핑이 발생하는 지점을 감지할 수 있음
          + 각 풍선과 페이로드는 1파운드 미만이며 전 세계 어디서나 발사 가능함
          + 플로리다에서는 PicoBalloon 발사를 금지하는 법이 통과되었음
          + 위반 시 $150 벌금이 부과됨
          + 관련 법안 및 기사 링크 제공
     * 세 번째 의견
          + 광역 지속 감시(WAPS)에 실제 응용 가능성이 있다고 생각함
          + 시민 자유에 대한 중요한 우려 사항임
          + 이 기술이 누구에게 라이선스될지, 허용된 페이로드에 어떤 제한이 있을지 궁금해함
     * 네 번째 의견
          + 최근 Launch HNs 중 가장 흥미로운 프로젝트 중 하나라고 생각함
          + 진행 상황을 지켜보며, 출시를 축하함
     * 다섯 번째 의견
          + 경량 현대 풍선의 선구자인 Bill Brown을 참고하라고 권장함
          + 그의 장비로 여러 번 지구 일주를 달성했음
          + 관련 링크 제공
     * 여섯 번째 의견
          + 초압/부유에 대해 깊이 논의할 준비가 되어 있음
          + 연방 계약 및 대량 제조 관련 도움을 줄 수 있음
          + 연락처 제공 (Charles@turnsys.com)
     * 일곱 번째 의견
          + 성층권에 배포하는 것이 매우 어려운 곳이라는 문장이 전설적임
     * 여덟 번째 의견
          + 꿈을 따라가며 필요한 일을 하고 있는 것 같다고 생각함
          + 베이 에어리어의 기술 애호가들을 위한 오픈 하우스를 열면 좋겠다고 제안함
          + 가상 오픈 하우스도 좋을 것 같음
          + 프로젝트의 배경 이야기와 데모에 중점을 둔 오픈 하우스를 제안함
     * 아홉 번째 의견
          + 비행 데이터 기록기를 작업하고 있으며, 날씨가 항공에 큰 영향을 미친다고 언급함
          + 데이터와 위성 통신의 어려움을 이해하고 있음
          + 이 프로젝트를 주목할 가치가 있다고 생각함
     * 열 번째 의견
          + 풍선이 수명이 다한 후 어떻게 청소/수거될지 궁금해함
          + 풍선이 어떤 재료로 만들어졌는지 궁금해함
"
"https://news.hada.io/topic?id=16285","Mistral, 더 간단한 모델 커스터마이징 기능과 Agents 알파 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Mistral, 더 간단한 모델 커스터마이징 기능과 Agents 알파 릴리스

더 간단하고 효율적인 모델 커스터마이징

     * LLM들이 빠르게 새롭고 전문화된 사용 사례를 발견하고 있기 때문에, 개발자들이 최첨단 모델들을 자신들의 특정 애플리케이션에 신속하고 효율적으로 맞춤화할 수 있는 것이 중요함
     * Mistral Large 2와 Codestral을 포함한 플래그십 및 전문 모델을 La Plateforme에서 커스터마이징할 수 있는 기능 발표
     * 모델은 기본 프롬프트, 일부 샷 프롬프팅 또는 파인 튜닝을 사용하여 커스터마이징할 수 있으며, 자체 데이터셋을 가져올 수 있음
     * 모델 커스터마이징은 강력한 참조 모델을 만들기 위해 Mistral AI 팀에서 개발한 기술을 따르므로 파인 튜닝된 모델에서도 유사한 성능을 기대할 수 있음
     * 개발자는 모델 커스터마이징을 사용하여 특정 도메인 지식, 컨텍스트 또는 톤으로 생성 AI 기능을 애플리케이션에 통합할 수 있음
     * 고성능 모델의 파인 튜닝이 획기적인 애플리케이션을 많이 개발할 것으로 기대하며, 이를 통해 무엇이 구축될지 기대됨

Agents의 알파 릴리스

     * Le Chat 또는 API에 노출하기 위해 모델을 추가 컨텍스트 및 명령으로 래핑하는 Agents의 초기 버전 소개
     * Agents는 간단한 명령과 예제 세트로 사용자 정의 동작과 워크플로우를 만드는 데 도움을 줌
     * Mistral Large 2의 고급 추론 기능을 사용하면 조직 내에서 쉽게 공유할 수 있는 여러 에이전트로 점점 더 복잡한 워크플로우를 계층화할 수 있음
     * Agents를 도구 및 데이터 소스에 연결하는 작업을 진행 중이며 이에 대한 피드백을 기대하고 있음

클라이언트 SDK의 안정 버전

     * mistralai 라이브러리의 사용 편의성과 일관성을 개선하기 위해 상당한 업데이트를 수행했으며, Python과 Typescript 모두에서 사용 가능한 mistralai 1.0을 출시함
"
"https://news.hada.io/topic?id=16331","CockroachDB 라이선스 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CockroachDB 라이선스 변경

     * CockroachDB는 10주년을 맞아 라이선스 모델을 업데이트함.
     * 2024년 11월 18일부터 Core 제공을 중단하고 CockroachDB Enterprise 라이선스로 통합함. 이 변화는 모든 사용자에게 포괄적인 경험을 제공하기 위함임
     * 라이선스 구조 간소화
          + CockroachDB Enterprise
               o 모든 엔터프라이즈 기능을 포함한 완전한 기능의 셀프 호스팅 CockroachDB
               o 연간 매출 1천만 달러 이상의 대규모 상업 기업 및 정부 사용자를 대상으로 함
               o 30일 셀프 서비스 체험 제공 (커뮤니티 지원 포함)
               o 연간 계약 또는 협상에 따라 계약 가능
               o 엔터프라이즈 또는 기본 지원 제공
               o 시험 기간 동안만 텔레메트리 필요. 유료 사용 시 텔레메트리 필요 없음
          + CockroachDB Enterprise Free
               o 모든 엔터프라이즈 기능을 포함한 완전한 기능의 셀프 호스팅 CockroachDB
               o 연간 매출 1천만 달러 이하의 개인 및 기업 사용자를 대상으로 무료 제공
               o 텔레메트리 필요 (7일 이하의 임시 클러스터 제외)
               o 2024년 11월 18일부터 제공
     * 모든 사용자에게 엔터프라이즈 기능 제공
          + Core가 11월 18일에 중단되면 CockroachDB Enterprise Free Tier로 대체됨
          + 클러스터 최적화
               o 팔로워 읽기 및 행 수준 데이터 제어로 성능 향상
          + 재해 복구, 백업 및 스트리밍
               o 엔터프라이즈급 백업, 복원 및 복제 기능 제공
          + 보안 및 IAM
               o 데이터 암호화, SSO, 역할 기반 SQL 감사 로깅 등으로 데이터 보안 강화
     * 무료 사용 유지
          + 대부분의 기업이 Enterprise Free Tier 라이선스 자격 요건을 충족함
          + 새로운 엔터프라이즈 기능이 추가되어 개인 사용자 및 스타트업이 무료로 학습, 실험 및 확장 가능
     * 원활한 전환 지원
          + CockroachDB Enterprise가 데이터 전략을 더 탄력적으로 변화시킬 수 있도록 지원
          + 추가 정보나 특정 요구 사항 논의를 위해 영업팀에 문의 가능

    GN⁺의 정리

     * CockroachDB는 10주년을 맞아 라이선스 모델을 업데이트하여 모든 사용자에게 포괄적인 엔터프라이즈 기능을 제공함.
     * Core 제공을 중단하고 CockroachDB Enterprise 라이선스로 통합하여 간소화된 경험을 제공함.
     * 대부분의 기업이 무료로 CockroachDB Enterprise Free Tier를 사용할 수 있어 개인 사용자 및 스타트업에게 유리함.
     * 데이터 보안, 재해 복구, 클러스터 최적화 등 다양한 엔터프라이즈 기능이 추가됨.
     * 유사한 기능을 제공하는 다른 데이터베이스 솔루션으로는 PostgreSQL, MySQL 등이 있음.

   CockroachDB, BSL로 라이센스 변경 - 오픈소스지만 상업화는 안됨

   긱뉴스 초기에 공유했었는데, 다시 또 변경하는군요.

        Hacker News 의견

     * Core 에디션의 목표와 남용 문제를 이해함
          + Enterprise 에디션은 비싸고 ""문의하기"" 방식의 판매 전략을 사용함
          + Cockroach Labs와의 관계가 악화될 경우 Core 기능으로 돌아갈 수 있었음
          + 이제는 이러한 완화책이 없어짐
          + Enterprise 에디션 사용자는 Cockroach Labs와 영구적인 관계를 맺게 됨
          + Cockroach Labs에 전적으로 의존하는 것은 위험함
          + Cockroach Labs의 팀을 좋아하지만, 이번 변화는 신중하게 생각하게 만듦
          + 단일 벤더와의 관계는 큰 위험을 수반함
          + Amazon이 Oracle 데이터베이스를 제거하는 데 17년이 걸렸음
     * OSS 회사가 아닌 것처럼 느껴짐
          + Elastic 이후로 기여자 계약에 더 주의함
          + OSS 기여에 대한 저작권 이전을 요구하는 프로젝트는 라이선스 변경 가능성이 높음
          + OSS 소프트웨어 사용 전 간단한 점검을 함
               o 기여자 계약 요구사항이 없는지 확인함
               o 라이선스가 지나치게 제한적이지 않은지 확인함
               o 프로젝트가 적극적으로 유지 관리되고 있는지 확인함
               o VC 자금에 지나치게 의존하지 않는지 확인함
               o 다양한 커미터 그룹이 있는지 확인함
     * SSPL 같은 카피레프트 라이선스를 사용하지 않은 이유를 이해하지 못함
          + 사람들이 Enterprise에서 자가 관리할 것을 우려하는 것 같음
     * CockroachDB는 더 이상 오픈 소스가 아님
          + CockroachDB는 새로운 라이선스 하에 소스 코드가 공개됨
     * CockroachDB의 Core 버전이 너무 제한적이어서 사용하지 않게 됨
          + Enterprise 버전은 스타트업에게 너무 비쌌음
          + 이 변화는 스타트업에게 완전한 제품을 제공함
     * CockroachDB를 인프라에서 제거할 가능성이 있음
          + 장기적인 생존 가능성에 대한 우려가 있음
          + CockroachDB의 ARR과 마지막 평가액이 궁금함
     * 이번 변화는 올바른 방향으로 가는 단계로 느껴짐
          + Cockroach를 좋아하지만, 이전 라이선스 모델은 가혹했음
          + 다른 데이터 저장소와 비교함
               o MySQL: Vitess, Planetscale, TiDB, MariaDB Spider
               o Postgres: Citus, YugabyteDB, YDB, Neon
               o SQLite: mvsqlite, marmot
               o Document: ScyllaDB, Cassandra, DynamoDB
     * 백업과 DR을 라이선스 뒤에 숨기는 것을 좋아하지 않음
          + 클러스터 최적화와 향상된 보안, 응답 지원은 필요함
     * 수익 기반 라이선스 모델이 사용자에게 불필요한 부담을 준다고 생각함
          + 기능 기반 또는 사용량 기반 모델을 선호함
          + Core를 완전히 없애고 무료 사용자에게도 라이선스 키를 요구하는 것은 큰 후퇴임
          + Enterprise를 더 가치 있게 만들거나 더 접근 가능하게 만드는 것이 나았을 것임
          + BUSL과 DOSP를 없애는 것도 실망스러움
     * 2024년 11월 18일에 Core 제공을 없애고 단일 CockroachDB Enterprise 라이선스로 통합할 예정임
          + 매우 짧은 공지 기간임
"
"https://news.hada.io/topic?id=16305","구글 독점 판결, 손 가리고 웃는 애플?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         구글 독점 판결, 손 가리고 웃는 애플?

     * 미국 반독점 판결 이후 애플은 매년 구글에게 받던 돈을 잃게 될 수 있음(연 매출 4~6% 규모)
     * 애플은 이런 환경을 본인들의 수익성에 기여할 수 있게 역이용할 가능성이 있음
     * 앱스토어 환경처럼 유저가 LLM을 취사선택해 구독하는 구조로 산업이 변화한다면 애플의 플랫폼 전략이 승리할 수 있음
"
"https://news.hada.io/topic?id=16402","HyperCLOVA X Vision : 눈을 뜨다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HyperCLOVA X Vision : 눈을 뜨다

     * HCX Vision은 기존 거대 언어 모델(LLM)에 이미지 이해 능력을 더해 거대 시각 언어 모델(LVLM)로 발전함
     * 다양한 시각 및 언어 데이터로 추가 학습하여 이미지와 텍스트를 동시에 이해할 수 있는 능력을 갖춤
     * 여러 시나리오에 맞춘 데이터를 수집하여 문서 인식, 이미지 내 텍스트 이해 등 다양한 상황에서 시각과 언어 이해 작업을 수행할 수 있음
     * 네이버의 OCR 기술 경험을 바탕으로 문서 처리와 글자 인식 능력을 강화하여 정확하고 신뢰성 있는 서비스를 제공함
     * HCX를 기반으로 한국어 및 한국 문화 관련 지식을 보유하고 있어 한국어 문서와 이미지 내 텍스트 이해에 탁월한 성능을 발휘함

HyperCLOVA X Vision의 정량 지표

     * Public Benchmarks에서 평균 71.59%의 성능으로 GPT-4V의 99.94% 수준에 도달함
     * 한국 초중고 검정고시 기출 문제에서 83.8%의 정답률로 GPT-4o의 77.8%보다 높은 성능을 보임

예제 기반의 HyperCLOVA X Vision 기능들

     * Detailed Image Captioning: 이미지의 세세한 부분까지 정확하게 인식하고 묘사함
     * Reasoning: 이미지에 대한 상세한 이해를 바탕으로 상황을 추론하고 다음 단계를 예측함
     * Entity Recognition: 인명, 장소, 제품 등 의미 있는 단위를 이미지만으로 이해함
     * Chart Understanding: 차트 형태의 추상적인 수치 데이터를 이해함
     * Table Understanding: 이미지 캡처본의 표 데이터를 인식하고 위치적 상관관계를 이해함
     * Document Understanding: 한자, 일본어 등 다양한 언어의 문서를 이해함
     * Culture and Humor (Meme Understanding): 이미지와 텍스트 쌍으로 구성된 밈을 이해함
     * Equation Understanding: 렌더링된 수식을 인식하고 TeX 문법으로 변환함
     * Code Generation: 특정 도형, 차트, 그래프 등을 생성하는 코드를 만들어냄
     * Math Problem Solving: 도형이 포함된 수학 문제를 이해하고 풀이를 제공함
     * Creative Writing (with Image Grounding): 이미지에 포함된 요소들을 기반으로 창의적인 글쓰기가 가능함

HyperCLOVA X Vision 미래 전망과 Sovereign AI

     * 수백만 단위 컨텍스트 길이를 활용하여 장시간 영화 이해, 실시간 영상 처리 등이 가능해질 전망임
     * 실시간 처리 기술이 동반되면 AI가 독립적 개체로 상황에 유연하게 대응 가능해짐
     * LVLM도 지역이나 문화적 배경에 따른 Sovereignty가 중요해질 것임
     * 네이버는 대한민국 최고 플랫폼으로 필요한 데이터를 효과적으로 확보할 수 있는 유리한 위치에 있음

글을 마치며

     * 네이버의 LVLM 기술은 더욱 가까운 형태의 소통으로 발전하고 있음
     * HCX Vision이 다양한 배경을 가진 사람들에게 이로운 AI가 될 수 있도록 노력하고 있음
     * 앞으로 HCX Vision이 사람들의 삶 속에 녹아들기를 희망함

GN⁺의 의견

     * HCX Vision은 이미지 이해 능력을 통해 인간과 더욱 자연스러운 소통이 가능해질 것으로 기대됨. 특히 시각 정보가 중요한 역할을 하는 영역에서 활용도가 높을 것임
     * 검정고시 문제 풀이에서 높은 성능을 보인 것처럼, 교육 분야에서 HCX Vision이 학습 보조 도구로 활용될 수 있을 것임. 다만 학생들의 자기주도 학습 능력 저하 우려도 있음
     * 데이터 확보와 Sovereignty 확보가 LVLM 개발에 중요한 요소로 작용할 것임. 네이버가 보유한 대규모 데이터와 플랫폼을 활용해 경쟁력 있는 LVLM을 개발할 수 있을 것으로 기대됨
     * 현재 단일 이미지 이해 수준에서 영화, 실시간 영상 이해로 발전한다면 엔터테인먼트, 보안, 자율주행 등 다양한 분야에 적용 가능할 것임. 기술적, 윤리적 난제들에 대한 대비도 필요함
     * OpenAI의 GPT-4와 비교해 유사한 성능을 보이고 있지만, 한국어와 한국 문화 이해도 측면에서는 HCX Vision이 강점을 가질 것으로 보임. 글로벌 경쟁력 확보를 위해서는 다국어 처리 능력 향상이 필요할 것임
"
"https://news.hada.io/topic?id=16298","좋아요, WezTerm 선호","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            좋아요, WezTerm 선호

WezTerm 사용기

  시작하기 전에

     * WezTerm 설치 필요
     * macOS 사용자는 Homebrew로 설치 가능 ($ brew install wezterm)

    Lua에 대한 설명

     * WezTerm의 설정은 Lua로 정의
     * Lua는 다른 동적 프로그래밍 언어와 유사하여 쉽게 읽을 수 있음
     * 복잡한 설정을 위해 Lua를 깊이 있게 학습하는 것이 좋음

    설정 파일과 피드백 루프

     * 설정 파일은 $XDG_CONFIG_HOME/wezterm/wezterm.lua에 위치
     * 설정 파일 변경 시 자동으로 재로드
     * 디버그 오버레이 (CTRL + SHIFT + L)로 로그 확인 가능

  외관 설정

    색상 테마

     * WezTerm은 1,000개 이상의 색상 테마를 제공
     * 예시: config.color_scheme = 'Tokyo Night'

    동적 색상 테마

     * 새로운 창을 열 때마다 무작위로 색상 테마를 변경하는 예제 코드 제공

    시스템 외관 존중

     * 시스템의 외관 모드에 따라 색상 테마를 자동으로 변경
     * appearance.lua 파일 생성 후 설정

    폰트 설정

     * 기본 폰트는 JetBrains Mono
     * 예시: config.font = wezterm.font({ family = 'Berkeley Mono' })

    창 스타일링

     * 창의 배경 투명도와 블러 설정
     * 예시: config.window_background_opacity = 0.9

    상태 표시줄 설정

     * 탭 바 오른쪽에 파워라인 스타일의 상태 표시줄 추가
     * WezTerm의 이벤트 API 사용

  키 설정

    기본 키 매핑

     * 기본 키 매핑을 유지하거나 비활성화 가능 (config.disable_default_key_bindings = true)

    키 매핑 예제

     * Option + Left Arrow와 Option + Right Arrow를 단어 간 이동으로 매핑
     * 설정 파일 열기 단축키 설정 (CMD + ,)

    다중화 기능

     * WezTerm의 다중화 기능 사용
     * 창 분할 단축키 설정 (CTRL + SHIFT + P)

    리더 키 설정

     * 리더 키를 CTRL + A로 설정
     * 창 분할 단축키를 리더 키와 함께 사용

    창 이동

     * 창 간 이동을 위한 키 매핑 설정 (vim 방향키 사용)

    창 크기 조정

     * 창 크기 조정을 위한 키 테이블 설정
     * 리더 키와 함께 사용하여 창 크기 조정

  프로젝트 작업 공간

    작업 공간 생성 및 전환

     * projects.lua 파일 생성 후 프로젝트 전환 함수 추가
     * 프로젝트 선택 시 새로운 WezTerm 작업 공간 생성

GN⁺의 정리

     * WezTerm은 Lua를 사용한 유연한 설정이 가능하여 다양한 사용자 정의가 가능함
     * 자동 재로드와 디버그 오버레이 기능으로 설정 변경이 용이함
     * 다중화 기능과 작업 공간 관리 기능이 뛰어나며, 다양한 키 매핑을 통해 생산성을 높일 수 있음
     * 비슷한 기능을 제공하는 터미널로는 Alacritty와 kitty가 있음

        Hacker News 의견

     * 최근 WezTerm으로 전환한 후 매우 만족함. 이전에는 kitty를 사용했으며, iTerm2에서의 설정과 단순함을 좋아했음. WezTerm은 기본적으로 제공하는 기능이 훨씬 뛰어남. 터미널 설정이 짧아서 편집기 화면에 모두 표시됨. 이후 터미널은 신경 쓸 필요가 없어짐
          + kitty 사용 시 문제를 자주 겪었고, iTerm2의 기능을 재현하려고 했으나 kitty의 유지보수자의 무뚝뚝하고 무시하는 댓글에 실망함
          + 예를 들어, ""tmux를 kitty에서 어떻게 설정하나요?""라는 질문에 ""하지 마세요, tmux는 멍청해요""라는 답변을 받았음. 결국 포기함
     * WezTerm은 GitHub 이슈에 매우 빠르게 대응하며, 보통 하루나 이틀 내에 문제를 해결해줌. SSH를 통한 modifier 키 관련 작은 문제를 제외하고는 기능이 거의 완벽함. 빠르고 좋음
          + 이전에는 Alacritty를 열렬히 사용했으나 원격 emacs를 위한 더 나은 modifier 지원이 필요했음
     * Kubuntu에서 Ubuntu로 전환하면서 Konsole의 일부 기능(무한 스크롤백, 스크롤백 검색)을 원했으나 Konsole을 설치하지 않으려고 WezTerm을 설치함. WezTerm은 즉시 마음에 들었으나, 많은 기능이 잘 발견되지 않음. 문서는 매우 좋고, 저자는 매우 참여적이고 도움이 됨
          + 예를 들어, 키보드만으로 큰 텍스트 블록을 선택하는 방법을 찾아서 한 번 해봤으나, 금방 잊어버리고 다시 마우스로 텍스트를 선택하게 됨. 문서 페이지를 다시 검색하는 것보다 빠름
          + 참고로, 찾고 있던 페이지는 https://wezfurlong.org/wezterm/copymode.html임
     * Mac Terminal, iTerm2, Kitty, Warp 등을 시도해봤으나 WezTerm에 정착함. 설정이 쉽고, 빠르고, 보기 좋음. 테마도 만들었음
          + https://tiniri.vlad.studio/
     * WezTerm의 장점은 무엇인가? WezTerm은 완전히 크로스 OS를 지원하여 Linux, macOS, Windows에서 모두 사용할 수 있음. 터미널 설정을 여러 OS에서 공유함
     * WezTerm을 약 1년 동안 사용 중이며, GitHub에서 Wez를 후원하고 있음. WezTerm은 훌륭한 터미널이며, 개발자도 훌륭함. 빠른 복사 및 기타 복사 모드를 자주 사용함
          + MacOS 노트북에서 작업용 Linux 머신으로 mosh+tmux와 같은 기능을 사용함. 항상 세션을 실행하여 Mac에서 작업 머신에서 작업할 수 있음. 재연결 가능한 세션과 패널, 탭을 제공함
     * iTerm2를 계속 사용하는 이유는 ""Edit->Selection Respects Soft Boundaries"" 기능 때문임. 이 기능은 파이프 문자 |를 패널 구분자로 해석하여 선택이 그에 따라 감싸짐
          + IRC에서 텍스트를 선택할 때 유용함
          + https://github.com/wez/wezterm/issues/596
     * 다른 사용자들의 의견에 동의함. macOS를 사용하기 시작한 지 거의 10년이 되었고, iTerm2를 사용해왔음. 최근 느려지기 시작했음. cmd-tab을 할 때 터미널이 나타나기까지 1초 이상 기다려야 했음
          + 여러 대안을 평가했으나 마음에 들지 않았음. 한 터미널은 계정/로그인이 필요했고, 다른 하나는 {Java,Type}Script로 작성되어 간단한 명령어도 비동기 스트림 문제로 인해 깨짐
          + WezTerm은 매우 빠르고, 설정 가능하며, 기본적으로 OneDark (base16) 테마를 제공함
          + 초기 설정 시 cmd-left와 cmd-right를 lua 설정에 추가해야 했음
     * Wez는 Rust로 시스템 프로그래밍에 관한 책을 출간할 예정임
          + https://leanpub.com/sysprog
     * OT: HashiCorp 창립자가 만든 Ghostty에 가장 기대됨
          + https://hachyderm.io/@mitchellh
"
"https://news.hada.io/topic?id=16297","Blitz: 경량 모듈형 확장 가능한 웹 렌더러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Blitz: 경량 모듈형 확장 가능한 웹 렌더러

    Blitz: 경량, 모듈형, 확장 가능한 웹 렌더러

   Blitz는 ""Dioxus Native"" 프로젝트를 지원하기 위해 개발된 ""네이티브"" HTML/CSS 렌더러임. JavaScript 엔진 대신 네이티브 Rust API를 사용하여 Rust 반응성/상태 관리 라이브러리와 직접 인터페이스할 수 있음.

      현재 두 가지 프론트엔드 지원

     * HTML/마크다운 프론트엔드: HTML 문자열을 렌더링할 수 있음. HTML 및 마크다운 파일 미리보기에 유용하지만 상호작용성은 부족함.
     * Dioxus 프론트엔드: Dioxus VirtualDom을 렌더링할 수 있음. Dioxus의 이벤트 처리를 통해 완전한 상호작용성 지원.

      Blitz의 기반 기술

     * Stylo: Firefox의 병렬 브라우저급 CSS 엔진
     * Vello + WGPU: 렌더링
     * Taffy: 박스 수준 레이아웃
     * Parley: 텍스트/인라인 수준 레이아웃
     * AccessKit: 접근성
     * Winit: 윈도우 및 입력 처리

     참고: 이 저장소에는 Stylo를 사용하는 새로운 버전의 Blitz가 포함되어 있음. 이전 버전의 소스 코드는 레거시 브랜치에서 여전히 사용할 수 있지만, 적극적으로 개발 중이지 않음.

    스크린샷

     * Dioxus 렌더러
     * HTML 렌더러 (google.com 렌더링)

    사용해보기

    1. 이 저장소를 클론
    2. 예제 실행:
          + cargo run --example google
          + cargo run --example url https://myurl.com
          + 다른 예제도 사용 가능
          + 더 나은 런타임 성능을 위해 --release 추가
    3. Ctrl/Cmd + + / Ctrl/Cmd + -로 스케일 변경, F1을 눌러 레이아웃 사각형 표시

    목표

   Blitz는 HTML과 CSS를 렌더링하기 위해 설계됨. 브라우저의 모든 기능을 지원하지 않으며, 이러한 ""추가"" 기능은 선택적으로 제공할 계획임. 브라우저는 기본 HTML/CSS 렌더링의 경우 과도하게 복잡하다고 생각함.

   지원 예정 기능:
     * 현대적 HTML 레이아웃 (flexbox, grid, table, block, inline, absolute/fixed 등)
     * 고급 CSS (복잡한 선택자, 미디어 쿼리, CSS 변수)
     * HTML 폼 컨트롤
     * AccessKit을 통한 접근성
     * 사용자 정의 위젯을 통한 확장성

   지원하지 않는 기능:
     * webrtc, websockets, bluetooth, localstorage 등

   다른 언어(JavaScript, Python 등)에 대한 Blitz 바인딩은 아직 없지만, 기여를 환영함.

    아키텍처

   Blitz는 여러 부분으로 나뉨:
     * blitz-dom: 스타일 해석과 레이아웃을 포함하지만 그리기/페인팅은 포함하지 않는 핵심 DOM 추상화
     * blitz: blitz-dom에 Vello/WGPU 기반 렌더러 추가
     * dioxus-blitz: Blitz를 사용하여 Dioxus 앱을 렌더링하는 Dioxus 통합 레이어. 현재 dioxus-blitz는 HTML 렌더러도 포함하지만, 이는 향후 별도의 패키지로 분리될 가능성이 있음.

    상태

   Blitz는 현재 실험적임. 사용 가능한 상태로 만들기 위해 적극적으로 작업 중이지만, 아직 앱을 구축하는 것은 권장하지 않음.

    TODO

     * 핵심 DOM 트리 추상화
     * html5ever를 사용한 스타일 파싱
     * html5ever 문서에 대한 스타일 계산
     * Taffy를 사용한 레이아웃 계산
     * WGPU를 사용한 렌더링

    렌더링

     * 창에 렌더링
     * 이미지에 렌더링
     * 그라디언트
     * 테두리/외곽선
     * 래스터 이미지 (png, jpeg 등)
     * 줌
     * SVG
          + 외부 SVG (기본 지원)
          + 인라인 SVG
     * 그림자
     * 애니메이션/전환
     * 표준 폼 컨트롤 (체크박스/드롭다운/슬라이더 등)
     * 사용자 정의 위젯
     * 그림자 요소

    레이아웃

     * 인라인 (부분 지원 - 구현 미성숙)
     * 블록
     * 플렉스박스
     * 그리드
          + 명명된 그리드 라인
          + 서브그리드
     * 테이블
     * Z-인덱스
     * 추가 CSS 기능
          + box-sizing: content-box
          + calc()
          + position: static
          + direction: rtl
          + transform

    텍스트

     * 폰트 로딩
          + 시스템 폰트 로딩
          + 웹 폰트 로딩
     * 텍스트
          + 셰이핑 / Bidi
          + 레이아웃 / 줄 나누기
          + 폰트 크기 / 줄 높이
          + 텍스트 색상
          + 굵게 / 기울임
          + 밑줄 / 취소선
     * 텍스트 선택

    입력

     * 스크롤
          + 루트 뷰
          + overflow: scroll 요소
     * 호버 감지
     * 클릭 처리
     * 텍스트 입력

    성능

     * 핫 리로딩
     * 스타일 및 레이아웃 재해석 없이 스크롤
     * 스타일 캐싱
     * 레이아웃 캐싱

    기타

     * 다중 창
     * 접근성 트리
     * 포커스
     * 개발 도구
     * 컨텍스트 메뉴를 위한 훅
     * 임의의 렌더링 표면으로 요소를 가져오기 위한 use_wgpu_context()

    라이선스

   이 프로젝트는 Apache 2.0 및 MIT 라이선스로 이중 라이선스됨. 별도로 명시하지 않는 한, 사용자가 stylo-dioxus에 포함시키기 위해 의도적으로 제출한 모든 기여는 추가 조건 없이 MIT 라이선스로 라이선스됨.

  GN⁺의 정리

     * Blitz는 Rust 기반의 경량 HTML/CSS 렌더러로, Dioxus 프로젝트를 지원하기 위해 개발됨.
     * 브라우저의 복잡한 기능을 배제하고, 기본적인 HTML/CSS 렌더링에 집중함.
     * 실험적 단계에 있으며, 아직 앱 구축에는 권장되지 않음.
     * 비슷한 기능을 가진 프로젝트로는 Servo, WebRender 등이 있음.
"
"https://news.hada.io/topic?id=16372","구글, 500만 달러 이상을 훔친 사기 앱 제거에 3개월 소요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, 500만 달러 이상을 훔친 사기 앱 제거에 3개월 소요

     * 마리아 바카는 2023년 2월부터 7월까지 Yobit Pro 앱을 통해 약 460만 달러 상당의 가상화폐에 투자했으나, 앱에 700만 달러의 잔액이 반영되었을 때 인출을 시도하자 ""세금""으로 50만 달러를 추가로 입금하라는 요구를 받음
     * 바카가 추가 입금을 거부하자 WhatsApp을 통해 사이버 범죄자로부터 생명의 위협을 받았고, 소비자금융보호국(CFPB)에 연락했으나 구글이 해당 앱을 플레이 스토어에서 삭제하는 데 3개월이 걸린 것으로 주장됨
     * 바카는 구글이 사기 앱을 플레이 스토어에서 성공적으로 차단하고 있다고 믿었기 때문에 앱을 다운로드했다며, 500만 달러 이상의 금전적 손실과 심각한 정서적/심리적 고통 등의 피해에 대해 최소 500만 달러의 배상을 요구하는 소송을 제기함
     * 바카의 소송에 따르면, Yobit Pro를 설치한 다른 Android 기기 사용자 약 12,759명 중 최소 5명이 유사한 경험을 했다고 함

구글의 사기꾼 대응

     * 구글은 4월, 구글 플레이 스토어에서 87개의 사기 앱 승인을 받아 10만 명(미국 거주자 8,700명 포함)에게 영향을 미친 것으로 추정되는 개발자 2명을 상대로 소송을 제기한 바 있음
     * 이들 사기 앱은 피해자가 자금을 인출하려 할 때 추가 투자, 세금, 수수료 등을 요구하며 돈을 갈취하는 방식으로, 피해자가 얼마나 많은 돈을 지불하든 일단 ""투자""하면 돈은 사라짐
     * 구글은 이러한 가상화폐 사기 앱으로 인해 앱 스토어의 평판이 훼손되고 있음을 인정하고, 사용자가 앱의 무결성을 신뢰할 수 있어야만 구글 플레이가 계속 사용되는 앱 배포 플랫폼이 될 수 있다고 강조함

GN⁺의 의견

     * 가상화폐 사기 앱은 실제 앱과 유사하게 위장하여 사용자를 현혹시키는 경우가 많아 주의가 필요함. 특히 과도한 수익을 보장하거나 추가 입금을 요구하는 앱은 의심해 볼 필요가 있음
     * 구글 플레이 스토어와 같은 공식 앱 마켓에서도 사기 앱이 발견되는 만큼, 앱을 다운로드할 때는 평점과 리뷰를 꼼꼼히 확인하고 출처가 불분명한 앱은 설치를 자제하는 것이 좋음
     * 가상화폐 투자 시에는 공식 거래소를 이용하고, 개인정보 유출에 주의하며, 투자 금액을 적절히 분산하는 등 리스크 관리가 중요함. 또한 가상화폐 시장의 변동성을 고려하여 무리한 투자는 피하는 것이 바람직함
     * 유사한 기능을 가진 가상화폐 앱으로는 Coinbase, Binance, Kraken 등의 공식 거래소 앱이 있으며, 보안과 신뢰성 측면에서 이들 앱을 사용하는 것이 좋음
     * 새로운 가상화폐 앱을 선택할 때는 해당 프로젝트의 백서와 로드맵, 팀 구성, 파트너십 등을 종합적으로 검토하고, 장기적인 관점에서 프로젝트의 발전 가능성과 생태계 구축 여부 등을 고려해야 함

   본문이 엉뚱한 내용 같네요 (댓글은 제목이랑 맞는 것 같은데,,)

   해당 사이트 구조가 좀 이상해서 본문을 제대로 못 가져왔네요. 수정해두었습니다

        Hacker News 의견

     * Google의 제품들이 점점 나빠지고 있음
          + 검색 결과가 좋지 않음
          + GMail의 스팸 필터링 기능이 떨어짐
          + Android가 불편해지고 있음
          + Chrome이 좋은 기능을 없애고 나쁜 기능을 추가하고 있음
          + Google Voice의 큰 변화로 많은 기능이 사라질 것 같았으나 실제로는 변화가 없었음
     * Google이 악성 앱을 신속하게 제거하지 않은 것에 대해 책임을 져야 함
          + 그러나 사기꾼이 돈을 가져간 것에 대해 Google이 책임을 져야 하는지는 확실하지 않음
          + Google이 악성 앱을 예방하고 신속하게 대응해야 함
     * 수백만 달러의 재산을 쌓았지만 무작위로 앱을 다운로드하는 것은 매우 위험함
          + 특히 암호화폐 앱은 더욱 주의해야 함
     * FTC가 Google과 같은 회사에 즉각적인 조치를 취할 수 있어야 함
          + 더 많은 정부 규제가 필요함
          + 사용자에게 이유를 묻고 항소할 수 있는 경로가 필요함
     * Google이 사기에서 이익을 얻고 있으며, 이를 막기 위한 부서를 축소하고 있음
          + 3개월 만에 앱이 제거된 것은 평균보다 나은 결과임
     * Temu 광고를 여러 번 신고했지만 여전히 나타남
          + 신고 기능이 무의미하게 느껴짐
     * 이 앱에 대해 처음 들어봄
          + 수익을 창출하는 앱인지, 다운로드 수가 적어서 신고가 적은 것인지 궁금함
          + Google이 작은 개발자들을 적극적으로 처벌하는 이유를 이해하려고 함
     * 이 앱은 암호화폐를 거래 수수료 없이 구매할 수 있다고 광고함
     * Forbes 기사에서 언급된 scorp 사례도 있음
          + Forbes 기사 링크
     * 피해 여성이 돼지 도살 사기에 당했음
          + 다른 사례에서도 피해자가 가족 자금을 사기꾼에게 보낸 적이 있음
          + $5M을 보낼 수 있고 Google을 상대로 소송을 진행할 수 있는 재정적 여유가 있는 사람임
"
"https://news.hada.io/topic?id=16303","NASA 조사, Boeing이 미국인의 달 복귀 방해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     NASA 조사, Boeing이 미국인의 달 복귀 방해

    NASA 조사 결과, Boeing의 관리 부실로 미국의 달 복귀 지연

     * Boeing의 관리 부실과 경험 부족
          + NASA의 감사 보고서에 따르면 Boeing의 관리 부실과 경험 부족이 NASA의 달 복귀 프로젝트에 심각한 지연과 비용 증가를 초래함.
          + Boeing의 품질 관리 시스템이 NASA 및 국제 표준에 부합하지 않음.
          + Boeing의 미숙한 인력과 불충분한 훈련이 문제의 주요 원인으로 지적됨.
     * 예산 초과와 일정 지연
          + EUS(Exploration Upper Stage) 예산이 원래 9억 6200만 달러에서 20억 달러로 증가할 것으로 예상됨.
          + Artemis IV 미션의 발사는 2028년으로 예정되어 있지만, 추가 지연 가능성이 있음.
          + NASA는 추가 자금이 없으면 일정이 계속 지연될 것이라고 경고함.
     * 품질 관리 문제
          + Boeing의 품질 관리 시스템이 NASA 및 국제 표준을 충족하지 않음.
          + 2021년 9월부터 2023년 9월까지 Boeing은 71개의 시정 조치 요청(CAR)을 받음.
          + 미숙한 용접 작업으로 인해 EUS 완성이 7개월 지연됨.
     * NASA와 Boeing의 대응
          + NASA는 Boeing과 협력하여 더 강력한 품질 관리 시스템을 개발할 것을 권고받음.
          + NASA는 Boeing에 재정적 제재를 가하는 대신, 좋은 성과에 대해 보상하는 방식을 선호함.
          + Boeing은 새로운 CEO Kelly Ortberg의 지도 아래 품질 관리 문제를 개선할 계획임.

    GN⁺의 정리

     * 이 기사는 Boeing의 관리 부실과 경험 부족이 NASA의 달 복귀 프로젝트에 미치는 영향을 다룸.
     * Boeing의 품질 관리 문제와 미숙한 인력으로 인해 프로젝트가 지연되고 비용이 증가함.
     * NASA는 Boeing과 협력하여 문제를 해결하려고 하지만, 재정적 제재 대신 보상 방식을 선호함.
     * 이 기사는 우주 탐사와 관련된 프로젝트 관리의 중요성을 강조하며, 유사한 기능을 가진 다른 프로젝트로는 SpaceX의 Starship이 있음.

        Hacker News 의견

     * MBA와 금융 전문가들이 서구 산업, 중산층, 의료 시스템, 교육, 경제 리더십, 사회적 이동성을 파괴했음
          + 그들은 서구 기술, 과학, 혁신을 파괴하는 중이며, 이는 끝없는 부의 추출을 위한 것임
          + 주택을 투자로 여기게 하여 고리대금업으로 우리를 착취함
          + 연금을 시장의 먹잇감으로 교환하게 하여 내부 거래, 펌프 앤 덤프, 사기 등을 저지름
          + 우리의 일상은 분기별 실적을 맞추기 위한 미친 프로젝트들로 가득 차 있음
          + 경영진 보상만이 유일하게 잘 돌아가고 있음
     * 2023년 Michoud 방문 시, SLS Core Stage 3의 용접이 NASA 기준에 미치지 못했음
          + Boeing의 경험 부족한 기술자와 부적절한 작업 계획 및 감독이 원인임
          + 용접공은 고도로 숙련되고 고임금을 받는 장인임
     * Boeing은 정부의 지원을 받으며 구조적 문제로 인해 계획을 효과적으로 실행하지 못함
     * Pournelle의 관료주의 철칙이 또 다른 희생자를 낳았음
          + 관료주의에서 조직 자체의 이익에 헌신하는 사람들이 통제권을 잡고, 원래 목표에 헌신하는 사람들은 점점 영향력을 잃음
     * 미국이 2025년에 달에 사람을 착륙시킬 것이라고 진지하게 믿는 사람이 있는지 의문임
          + 새로운 지하철역을 여는 데 수십 년이 걸리는 나라임
     * Boeing의 피해는 이미 발생했으며, 앞으로는 회사를 파괴하는 경영진에 대한 책임이 필요함
          + 이는 미국의 능력 파괴이며, 앞으로도 매우 비쌀 것임
     * NASA의 계약 비용 및 일정 진행 상황을 측정하는 Boeing Defense의 EVMS가 2020년부터 국방부에 의해 승인되지 않음
          + 이는 Boeing이 EUS 납품 날짜를 신뢰할 수 있게 예측하는 것을 방해함
     * SLS 프로그램은 너무 관료화되어 있으며, SpaceX가 성능과 비용 면에서 3배 더 나은 이유임
     * SpaceX는 모든 능력, 자원, 기술을 갖추고 있음
          + 기존 방위 계약자들은 오랫동안 세금으로 지원받았지만 보여줄 것이 거의 없음
     * OIG 보고서 링크 제공
          + https://oig.nasa.gov/wp-content/uploads/2024/08/ig-24-015.pdf
     * 실제 Office of the Inspector General 보고서를 찾는 사람들
          + [1] https://oigforms.nasa.gov/audits/auditReports.html
          + [2] https://oig.nasa.gov/investigation-reports/
"
"https://news.hada.io/topic?id=16309","SponsorBlock – 유튜브 스폰서 광고 건너뛰기 기능 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SponsorBlock – 유튜브 스폰서 광고 건너뛰기 기능 확장

     * YouTube 비디오에서 스폰서 구간을 건너뛰기 위한 오픈 소스 크라우드소싱 브라우저 확장 프로그램 및 오픈 API
     * 사용자가 확장 프로그램을 통해 스폰서 구간을 제출하면, 확장 프로그램은 개인정보 보호 쿼리 시스템을 사용하여 알려진 스폰서를 자동으로 건너뜀
     * 인트로, 아웃트로, 구독 알림 등 다른 카테고리도 건너뛰기를 지원하며, 하이라이트 지점으로 건너뛰기 기능도 있음
     * 현재 13,033,165명의 사용자가 17,589,113개의 건너뛰기 구간을 제출했으며, 총 4834년과 228.07일의 시간을 절약함
     * 써드 파티 포팅 버전 : mpv, KODI, Android TV, iSponsorBlockTV(애플TV,삼성/LG TV 등의 장비에서도 지원. 네트웍 오토 디스커버리)
     * 다운로드
          + 소스 코드는 완전히 오픈되어 있으며, 데이터베이스는 누구나 다운로드 가능함
          + 가능한 한 오픈 상태를 유지하고자 함
          + 공개 API 문서를 보거나 미러를 호스팅할 수 있음
          + 작동 방식을 확인할 수 있음
          + SponsorBlock은 YouTube Premium 및 uBlock Origin과 함께 사용할 때 최상의 성능을 발휘함

GN⁺의 정리

     * SponsorBlock은 YouTube 비디오에서 스폰서 구간을 자동으로 건너뛰기 위한 오픈 소스 브라우저 확장 프로그램임
     * 크라우드소싱을 통해 사용자들이 스폰서 구간을 제출하고, 이를 통해 많은 시간을 절약할 수 있음
     * YouTube Premium 및 uBlock Origin과 함께 사용할 때 최상의 성능을 발휘함
     * 비슷한 기능을 가진 다른 프로젝트로는 AdBlock, DeArrow 등이 있음

   이 확장 프로그램 쓴지 오래됐는데 의외로 지원하는 영상 많더군요

   한국에도 사용자가 많은지 웬만한 영상에는 잘 설정되어 있습니다.

   총 4834년과 228.07일의 시간을 절약함 ㅋㅋㅋㅋㅋ

   iSponsorBlockTV 구현이 재미나네요. 집에서 컴터에 실행한 뒤 자동으로 등록 및 수동으로 각종 TV장비를 등록해두면 유튜브 감상시 알아서 스킵 합니다.

   애플TV, 삼성/LG TV, 크롬캐스트, Roku, FireTV, 닌텐도 스위치, XBox One, PS 4/5 까지 다 지원합니다.

        Hacker News 의견

     * Sponsorblock은 특정 광고만 차단할 수 있으며, 전체 채널을 화이트리스트에 추가할 수 있음
          + Android에서 Tubular 앱을 사용하며, Sponsorblock과 ReturnYoutube Dislike가 통합되어 있음
          + 스폰서 블록 섹션을 자른 후 비디오를 다운로드할 수 있는 기능을 추가 요청함
     * 스폰서 세그먼트가 네이티브 광고보다 더 나쁘고 보기 불쾌하다고 생각함
     * 유튜버로서 스폰서 블록에 대해 갈등을 느낌
          + 주요 채널은 작지만 수익화되어 있음
          + CPM이 낮아져 수익이 감소했으며, 변동성이 문제임
          + 스폰서 광고가 안정성을 제공했으나, 스폰서 블록이 확산되면 스폰서들이 광고 예산을 줄일까 걱정됨
          + Patreon 같은 대안도 있지만 개인적으로 맞지 않음
          + VPN이나 저품질 학습 플랫폼 같은 스폰서가 많아지는 것이 문제임
     * DeArrow라는 확장 프로그램도 추천함
          + 클릭베이트 썸네일과 제목을 덜 짜증나게 바꿔줌
     * SponsorBlock 관련 다른 정보들:
          + iSponsorBlockTV v2: TV와 게임 콘솔용 SponsorBlock
          + SponsorBlock – YouTube의 스폰서, 필러, 인트로, 아웃트로, 좋아요/구독 알림 건너뛰기
          + SponsorBlock – YouTube의 스폰서 세그먼트 건너뛰기
          + 오픈 소스 브라우저 확장 프로그램으로 YouTube의 스폰서 세그먼트 자동 건너뛰기
          + Show HN: SponsorBlock – YouTube 비디오의 스폰서 세그먼트 건너뛰기
     * SponsorBlock Firefox 확장을 사용 중이며 매우 만족함
          + LTT, marcushouse 같은 유튜버들이 VPN이나 Ray Bud 같은 제품을 홍보함
          + Adblocker와 Sponsorblock 없이 YouTube를 사용할 수 없다고 생각함
     * YouTube를 많이 보는 사람들에게 ""Tweaks for YouTube"" 확장 프로그램을 추천함
          + 시청 경험을 크게 개선해줌
     * 세그먼트를 보고할 때 올바른 유형을 사용해야 함
          + 광고가 아닌 자기 홍보로 잘못 표시되는 경우가 많음
     * SponsorBlock의 문제점 중 하나는 음악에서 하이라이트 건너뛰기를 사용하는 것임
          + 음악의 첫 부분을 들어야 두 번째 부분을 즐길 수 있음
          + 사람마다 하이라이트가 다르기 때문에 음악 비디오에서 하이라이트 색상을 보는 것도 싫어함
     * Android 사용자에게 ReVanced 패치를 추천함
          + YouTube 앱에 광고 차단과 SponsorBlock을 적용함
          + YouTube APK 파일을 직접 제공해야 함
          + 광고가 세상을 망치고 있으며, 마케팅과 판매 예산이 엔지니어링과 UI/UX 예산보다 훨씬 큼
"
"https://news.hada.io/topic?id=16308","지구의 모든 물을 하나의 구체로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           지구의 모든 물을 하나의 구체로

    지구의 모든 물을 하나의 구로 표현한 이미지

     * 지구의 물의 양을 구로 표현한 이미지
          + 이 이미지는 지구의 물의 양을 지구 크기와 비교하여 파란 구로 나타냄
          + 이 구들은 ""부피""를 나타내며, 지구의 부피에 비해 물의 양이 매우 적음을 보여줌
          + 바다는 지구 표면에 얇은 막처럼 존재함
     * 지구의 모든 물을 나타내는 구
          + 가장 큰 구는 지구의 모든 물을 나타냄
          + 이 구의 지름은 약 860마일(약 1,386킬로미터)이며, 부피는 약 332,500,000 입방마일(약 1,386,000,000 입방킬로미터)
          + 이 구에는 바다, 빙하, 호수, 강, 지하수, 대기 중의 물, 심지어 인간과 동물, 식물 속의 물까지 포함됨
     * 액체 상태의 담수
          + 켄터키 주 위의 파란 구는 세계의 액체 상태의 담수를 나타냄
          + 부피는 약 2,551,100 입방마일(약 10,633,450 입방킬로미터)이며, 이 중 99%는 지하수로, 대부분 인간이 접근할 수 없음
          + 이 구의 지름은 약 169.5마일(약 272.8킬로미터)
     * 호수와 강의 물
          + 조지아 주 애틀랜타 위의 작은 구는 지구의 모든 호수와 강의 물을 나타냄
          + 대부분의 생명체가 매일 필요로 하는 물은 이 표면수에서 나옴
          + 이 구의 부피는 약 22,339 입방마일(약 93,113 입방킬로미터)이며, 지름은 약 34.9마일(약 56.2킬로미터)
          + 미시간 호수는 이 구보다 훨씬 커 보이지만, 미시간 호수의 평균 깊이는 300피트(약 91미터) 미만임

    GN⁺의 정리

     * 이 기사는 지구의 물의 양을 시각적으로 이해하기 쉽게 설명함
     * 지구의 물의 양이 실제로 얼마나 적은지 깨닫게 해줌
     * 특히, 인간이 접근할 수 있는 담수의 양이 매우 적음을 강조함
     * 이러한 정보는 물 자원의 중요성과 보존의 필요성을 인식하는 데 도움을 줌
     * 유사한 기능을 가진 프로젝트로는 NASA의 지구 관측 프로그램이 있음

        Hacker News 의견

     * 2017년 연구에 따르면 지구 맨틀에 있는 물의 양이 모든 바다의 물과 비슷함
          + 참고: ""There’s as much water in Earth’s mantle as in all the oceans"" (2017)
     * USGS는 1993년 출판된 Igor Shiklomanov의 ""World fresh water resources""를 인용함
     * 물은 여전히 귀중한 자원이며, 특히 신선한 지표수는 더욱 그러함
     * 지구는 물로 이루어진 행성이 아니라, 단지 축축한 바위임
          + 지구는 멀리서 보면 물이 대부분인 것처럼 보이지만, 실제로는 우주에서 젖은 바위와 마른 바위의 차이임
     * 모든 물을 포함한 구체에는 바다, 빙하, 호수, 강, 지하수, 대기 중의 물, 심지어 인간, 동물, 식물에 있는 물까지 포함됨
     * 맨틀에 있는 물이나 수화물(예: 엡솜 소금 등)도 포함되는지 궁금함
     * 지구보다 10배 큰 행성에서 같은 깊이와 물 분포를 가진다면, 물 방울이 더 작아 보일 것임
          + 행성 자체와 비교하는 것은 유용하지 않을 수 있음
     * 몇 가지 계산을 통해 더 이해하기 쉽게 설명함
          + 신선한 호수와 강의 물의 양은 93,113 입방 킬로미터임
          + 전 세계 인구 82억 명을 기준으로 하면, 1인당 11,355 입방 미터임
          + 지하수를 포함하면 1인당 1,296,762 입방 미터임
     * 태양계에서 가장 큰 바다는 지구에 있지 않음
          + 가니메데의 바다는 유로파보다 더 크며, 지구의 바다보다 6배 더 많은 물을 포함함
          + 참고: ""overlooked-ocean-worlds-fill-the-outer-solar-system""
     * Randall Munroe가 이 아이디어를 다루면 엄청난 재앙이 발생할 것임
     * 물이 지구 깊숙이 존재할 수 있으며, 표면과 해저의 물 밀도가 다름
          + 소금 제거도 고려해야 함
          + 하지만 이는 오차 범위 내일 수 있음
          + 참고: ""what-would-happen-if-we-brought-water-from-the-deepest-ocean-to-the-surface-in-a-sealed-container""
     * USGS가 과장되었다고 느낌
     * 재미있는 사실: 만약 그렇게 한다면 모두가 죽을 것임
     * 인간, 구조물, 동물, 식물, 숲 등과 비교하는 다른 구체와 함께 제시되지 않으면 쓸모없는 정보임
"
"https://news.hada.io/topic?id=16283","배포 시점에 급상승하는 API Latency 해결하기 — Django + Gunicorn 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          배포 시점에 급상승하는 API Latency 해결하기 — Django + Gunicorn 사례

  배포 시점에 급상승하는 API Latency 해결하기 - Djagno + Gunicorn 사례

     * Backend 시스템이 Django + Gunicorn 으로 구성되어 있었음
     * 배포를 할 때마다 API Latency가 급격하게 상승하는 문제를 발견하게 되었음
     * Gunicorn의 원리를 살펴보니, Cold Start가 되는 부분들이 존재
     * Django 내부 코드를 분석해보니 master worker process에서 fork를 할 때, preload 옵션을 주었음에도 일부 사전 로딩이 안되는 요소들을 발견하여 문제를 해결

    배운점

     * Django와 같이 많은 사용자들이 사용하는 웹 프레임워크는 대부분의 동작들이 높은 신뢰성을 가지고 있어, 실제로 사용하는 사용자도 그럴 것이라 예측하는 경향이 있음
          + 그러나 실제 코드를 보았을 때, 문제가 되는 코드가 있는 것을 발견하였고, 사용하는 프레임워크를 맹신하면 안된다는 점을 배울 수 있었음
     * API Latency 문제를 해결하는 과정은 적절한 문서 부족 + 내부 구조 및 동작에 대한 깊이 있는 이해 부족 + 오픈 소스 프로젝트의 코드 베이스를 깊이 파고드는 것을 꺼리는 점 때문에 손쉽게 파악하기 어려웠음
          + 이 과정에서 복잡한 문제가 여러가지 얽혀있어 손쉽게 파악하기 어려웠던 점도 존재
          + 결국 Django 내부 코드를 살펴보면서 해결할 수 있었음
          + 이 과정에서 사용하는 Django 도구에 대한 이해를 더 높일 뿐 아니라, 내부 코드를 살펴보는 것이 일부 어려운 문제 해결책을 찾는 데 도움 될 수 있다는 점을 배울 수 있었음
     * 문제의 근본 원인을 파악하는 것이 중요하다.
          + Health Check의 성공 조건을 더 여러 번 혹은 오랜 시간으로 조절하는 방법으로 API Latency 발생 빈도수는 낮출 수 있지만, 근본적인 문제 해결은 하지 못했을 것임
     * 집단 지성을 이용하면 조금 더 빠르게 집중해야 하는 포인트들과 다양한 지식을 얻을 수 있다
          + API Latency와 관련한 문제를 조직에게 빠르게 공유했고, 다양한 엔지니어들이 문제라고 추정되는 의견들을 주었음
          + 이런 의견들을 빠르게 취합하고 어디를 집중해서 보면 좋을지 지식들을 빠르게 습득할 수 있었음
     * 문제를 해결하기 위한 증상 재현 환경을 세팅하는 것은 중요하다
          + 로컬에서 동일한 문제를 재현시키는것에 성공했고, 이를 통해 문제가 잘 해결되었는지 확인할 수 있었음
          + 문제 해결을 위한 증상을 재현의 중요성을 인식할 수 있었음

   링크 타고 들어가보니 포스팅 내용이 굉장히 좋네요.
"
"https://news.hada.io/topic?id=16348","VanillaJSX.com 웹사이트 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         VanillaJSX.com 웹사이트 출시

바닐라 JSX의 사례

  JSX가 DOM 요소를 반환한다면?

     * ClickMe 함수는 버튼을 생성하고 클릭 횟수를 표시하는 기능을 가짐
     * 버튼을 클릭할 때마다 텍스트가 업데이트됨

export default function ClickMe() {
  let i = 0;
  const el = <button>Click me</button> as HTMLButtonElement;
  el.onclick = (e) => {
    el.textContent = `Clicked ${++i} times`;
  };
  return el;
}

  재사용 가능성

     * ClickMe 컴포넌트를 여러 번 사용하여 각기 다른 상태를 유지할 수 있음

import ClickMe from ""./sample1.js"";
export default () => <>
  <p><ClickMe /></p>
  <p><ClickMe /></p>
  <p><ClickMe /></p>
</>;

  상호작용 DOM 트리 생성

     * TodoInput과 TodoList 클래스를 사용하여 할 일 목록을 관리할 수 있음
     * 항목을 추가하고 클릭하여 제거할 수 있음

function TodoInput(attrs: { add: (v: string) => void }) {
  const input = <input /> as HTMLInputElement;
  input.placeholder = 'Add todo item...';
  input.onkeydown = (e) => {
    if (e.key === 'Enter') {
      attrs.add(input.value);
      input.value = '';
    }
  };
  return input;
}

class TodoList {
  ul = <ul class='todolist' /> as HTMLUListElement;
  add(v: string) {
    const item = <li>{v}</li> as HTMLLIElement;
    item.onclick = () => item.remove();
    this.ul.append(item);
  }
}

export default () => {
  const list = new TodoList();
  list.add('foo');
  list.add('bar');
  return <>
    <TodoInput add={(v) => list.add(v)} />
    {list.ul}
  </>;
};

  대량 데이터 처리

     * FindNames 함수는 대량의 데이터를 처리하고 필터링하여 결과를 표시함
     * 입력 값에 따라 실시간으로 일치하는 항목을 업데이트함

import { data } from ""../fetch-dataset.js"";
export default function FindNames() {
  const status = <p style='margin:1em 0' /> as HTMLParagraphElement;
  const results = <ul /> as HTMLUListElement;
  const input = <input value='eri(c|k)a?' autocomplete='new-password' oninput={updateMatches} /> as HTMLInputElement;
  updateMatches();

  function updateMatches() {
    const matched = (data.entries().filter(([k]) => k.match(input.value)).toArray());
    const matches = (Iterator.from(matched).map(match => <Item regex={input.value} match={match} />).take(30));
    results.replaceChildren(...matches);
    status.textContent = `${matched.length} / ${data.size}`;
  }

  return <div class='sample4'>
    {input}
    {status}
    {results}
  </div>;
}

function Item(attrs: { match: [string, number], regex: string }) {
  const [name, count] = attrs.match;
  const total = <small style='color:#fff3'>({count})</small>;
  return <li>
    <span innerHTML={highlight(name, attrs.regex)} /> {total}
  </li>;
}

function highlight(str: string, regex: string) {
  if (!regex) return str;
  const r = new RegExp(`(${regex})`, 'gi');
  return str.replace(r, '<span class=""match"">$1</span>');
}

  imlib의 소개

     * imlib는 immaculatalibrary.com을 위해 개발된 라이브러리임
     * minigamemaker.com과 현재 읽고 있는 웹사이트를 구축하는 데 사용됨
     * 기존의 상태가 충분하지 않아 개발되었으며, 앱을 만드는 데 가장 선호하는 방법임

GN⁺의 정리

     * 이 글은 JSX를 사용하여 DOM 요소를 직접 생성하고 상호작용하는 방법을 설명함
     * 기존의 가상 DOM을 사용하지 않고도 효율적으로 대량 데이터를 처리할 수 있는 방법을 제시함
     * imlib 라이브러리는 간단하고 직관적인 방식으로 앱을 개발할 수 있게 해줌
     * 비슷한 기능을 가진 다른 프로젝트로는 React, Vue.js 등이 있음

        Hacker News 의견

     * 프로젝트에 관심을 가져줘서 고마움
          + 지난 10년간 SSGs 상태에 불만을 느껴 프로젝트를 시작함
          + 주로 정적 웹사이트를 만들며, 간단하고 직관적인 것을 원했음
          + JSX가 적합해 보였지만 React 같은 JSX 프레임워크의 복잡성에 지침
          + JSX를 문자열로 렌더링하는 SSG를 만들었고, 이를 브라우저에서 DOM 요소로 렌더링하도록 확장함
          + 일부 레이아웃에서는 공유 컴포넌트로 잘 작동함
          + SEO에도 잘 작동함
          + IDE 지원이 완벽하지 않음
     * 실제 DOM 노드를 반환하면 JSX의 큰 장점이 사라짐
          + DOM의 설명을 반환해야 새로운 상태로 템플릿을 재평가하고 효율적으로 업데이트할 수 있음
          + 예제는 명령형 DOM API를 사용하여 업데이트함
          + VDOM의 주요 이점은 템플릿에서 항목을 반복하는 것임
          + VDOM의 문제는 느린 디핑(diffing)임
     * JSX의 기원은 Facebook의 XHP에서 비롯됨
          + XHP는 E4X에서 영감을 받음
     * 최종 예제가 Firefox에서 작동하지 않음
          + Edge에서는 작동하지만 Firefox에서는 오류 발생
     * Vanilla TSX와 매우 유사함
          + Vanilla TSX로 작성된 앱 예제 제공
     * Action Script 3을 떠올리게 함
          + XML이 언어의 핵심이었고, 재미있었지만 ES4가 되지 못함
          + Typescript와 JSX로 비슷한 수준에 도달하는 데 10년 이상 걸림
     * 예제들은 시간이 지나면서 변경될 수 있는 props를 가진 컴포넌트를 보여주지 않음
          + 더 복잡한 앱으로 확장하는 데 어려움이 있을 것 같음
     * 나도 실제 DOM 노드를 생성하는 jsx 템플릿 표현식을 기반으로 한 UI 라이브러리를 만듦
          + 모델 객체를 속성에 바인딩하여 명령형 이벤트 핸들러 보일러플레이트를 제거함
          + 좋은 아이디어라고 생각함
     * JSX의 매력을 이해하지 못함
          + 루프, 변수 삽입 등을 자동으로 제공하는 다른 방법이 더 쉬움
     * Imba를 추천함
          + JS 개발자들이 Faang 마케팅에 쉽게 넘어가서 인기가 없는 것 같음
"
"https://news.hada.io/topic?id=16300","pg_replicate - Postgres의 복제를 위한 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   pg_replicate - Postgres의 복제를 위한 도구

     * Postgres에서 다른 시스템으로 데이터를 지속적으로 복사하는 데이터 파이프라인 구축
     * Postgres 의 ""Logical Streaming Replication Protocol"" 위에 추상화를 구축하여 하위수준에 대한 걱정 없이 이용 가능
     * 로드맵
          + BigQuery, DuckDB, MotherDuck Sink 는 구현(Duck 쪽은 배치 파이프라인 버전으로 재구현 예정)
          + Snowflake, ClickHouse Sink 는 구현 예정
     * Rust Crate로 개발되어 cargo로 실행 가능
       cargo run --example stdout -- --db-host localhost --db-port 5432 --db-name postgres --db-username postgres --db-password password cdc my_publication stdout_slot
"
"https://news.hada.io/topic?id=16319","Plunk - 오픈소스 이메일 플랫폼 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Plunk - 오픈소스 이메일 플랫폼

     * AWS SES 위에 구축된 플랫폼으로 자신의 앱에서 쉽게 메일을 보낼수 있도록 해줌
          + SendGrid, Resend, Mailgun 등의 셀프호스팅 가능한 대체제
     * 지원 기능
          + Transactional Email : API 로 이메일 직접 발송
          + 사용자 액션에 따른 자동화 생성
          + Broadcasts : 대규모 대상에게 뉴스레터 및 제품 업데이트 보내기
     * Docker로 손쉽게 디플로이 가능
"
"https://news.hada.io/topic?id=16324","1950년 맨체스터, ‘낯선’ 지능을 소개한 튜링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1950년 맨체스터, ‘낯선’ 지능을 소개한 튜링

     1876년 스코틀랜드 철학자 알렉산더 베인에 의해 창간된 유서깊은 철학잡지 <마인드>는 20세기 내내 옥스퍼드 대학교를 근거지로 영미 철학사에 중요한 족적을 남긴 논문들을 출간해왔다. 이 잡지의 1950년 10월호에는 당시 편집장이던 철학자 길버트 라일의 초청으로 수학자이자 컴퓨터공학자인 알란 튜링의 논문 “계산 기계와 지능(Computing Machine and Intelligence)”이 게재된다. 이 논문에서 튜링은 ‘인공지능’이라는 표현을 사용하지 않았지만, 기계가 인간과 다른 종류의 지능을 보여줄 가능성을 언급하면서 그 가능성이 정말로 성취되었는지 여부를 판단할 수 있는 일종의 지능 확인 검사를 제안한다. 훗날 튜링 검사로 알려지게 된 이 지능 확인 검사와 더불어 튜링은 이 논문에서 인간에게는 매우 ‘낯선’, 기계 지능에 대한 철학적 논의의 기초를 제시한다.
"
"https://news.hada.io/topic?id=16385","13ft – 광고, Paywall 등을 차단하는 셀프 호스팅 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  13ft – 광고, Paywall 등을 차단하는 셀프 호스팅 서버

     * 광고, Paywall, 기타 불필요한 요소를 차단하는, 간단하지만 강력한 인터페이스를 가진 셀프 호스팅 서버
          + 12ft와 유사하지만 자체 호스팅되는 사이트이며 12ft가 작동하지 않는 웹사이트에도 동작함
     * Medium, New York Times와 같은 유료 기사 사이트에서 유용
     * 창작자를 지원하는 것이 중요하지만, 단일 기사를 보고 싶을 때 유용함
     * 작동 방식
          + GoogleBot(구글의 웹 크롤러)인 척하여 구글이 받는 동일한 콘텐츠를 가져옴
          + 구글은 페이지 전체를 가져와서 기사를 올바르게 인덱싱할 수 있게 함. 이를 이용하여 콘텐츠를 얻음
     * 사용 방법
          + Docker 또는 Python 스크립트로 실행
          + 로컬 웹사이트 (5000포트)에서 URL을 입력하거나, http://127.0.0.1:5000/https://example.com 형태로 입력

GN⁺의 정리

     * 13 Feet Ladder는 광고와 유료 벽을 우회할 수 있는 셀프 호스팅 서버임
     * GoogleBot을 가장하여 구글이 받는 동일한 콘텐츠를 가져옴
     * Docker와 Python 스크립트를 통해 쉽게 설정 가능
     * 유료 콘텐츠를 우회하여 단일 기사를 보고 싶을 때 유용함
     * 비슷한 기능을 가진 다른 프로젝트로는 12ft.io가 있음

        Hacker News 의견

     * NYT 세션은 한 번 성공 후 실패함
          + NYT 직원들이 기술적 트릭에 능숙함
     * 서버를 구글봇 사용자 에이전트 헤더로 설정하는 것은 무거운 작업임
          + Firefox에서 사용자 에이전트 재정의 옵션이 사라짐
          + about:config에서 general.useragent.override 옵션을 생성하여 모든 요청에 사용 가능함
     * 2ft로 이름을 지을 기회를 놓침
     * 12ft.io가 더 이상 작동하지 않음
          + archive.is가 더 신뢰할 만한 방법임
     * 재미있는 셀프 호스팅 앱을 찾다가 발견함
          + 기본적이지만 잘 작동함
     * 로컬 네트워크의 웹 인터페이스에 프록시로 사용할 수 있음
          + 더 나은 보안 옵션이 있지만 임시 해결책으로 흥미로울 수 있음
     * The Information의 페이월 제거기를 계속 찾고 있음
          + The Information 기사를 완전히 읽은 적이 없음
     * 팝업/광고 제거를 위해 uBlock Origin을 사용하는 것이 좋음
     * 12ft.io가 더 이상 작동하지 않음
          + iOS + Safari 사용자는 ""open in internet archive"" 단축키를 추천함
          + 대부분의 페이월을 우회할 수 있음
     * 12ft.io를 사용해보려 했지만 ""Internal Server Error""가 발생함
"
"https://news.hada.io/topic?id=16394","새벽 2시 정신 붕괴의 해부학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            새벽 2시 정신 붕괴의 해부학

    2AM 정신적 붕괴의 해부

     * 새벽 2시의 깨달음
          + 새벽 2시에 극심한 스트레스를 느끼며 정신적 붕괴 직전의 상태였음
          + 이유는 jumpcomedy.com의 HTTP POST 호출이 모두 실패했기 때문임
          + 최근 변경 사항을 배포했지만, 이 문제를 일으킬 만한 것은 없었음
          + 로컬에서는 정상 작동하지만, 문제의 원인을 찾을 수 없었음
     * 고립된 상태
          + 25년 경력 동안 처음으로 도움을 받을 수 없는 상황에 처했음
          + 고객 불만이 쌓이고 있었고, 이를 해결할 수 있는 지원이 전혀 없었음
          + 자신을 믿고 의지하는 사람들에게 실망을 안겨주는 상황이었음
     * 자기 비난과 절망
          + 사업을 접을지, 고객들에게 사과 이메일을 보낼지 고민했음
          + 문제의 원인을 찾지 못해 자책하고 있었음
     * 에미넴의 등장
          + 에미넴의 가사로 마음을 진정시키려 했지만 효과가 없었음
          + 여러 가지 시도를 해봤지만 문제의 원인을 찾지 못했음
     * 아내의 위로
          + 아내가 차를 건네며 위로했지만, 문제 해결에는 도움이 되지 않았음
          + 고객들의 이메일이 계속 쌓여가고 있었음
     * 희망과 절망의 반복
          + Chrome 업데이트가 원인일 수 있다는 희망을 가졌지만, 다른 브라우저에서도 동일한 문제가 발생했음
          + 여러 가지 시도를 해봤지만 문제는 여전히 해결되지 않았음
     * PostHog의 문제
          + PostHog의 API 키를 추가하자 로컬에서도 문제가 재현됨
          + PostHog를 제거하자 문제가 해결됨
          + PostHog에 대한 분노와 후회가 있었지만, 결국 문제를 해결한 것에 만족했음

    GN⁺의 정리

     * 이 글은 개발자가 겪는 극심한 스트레스와 고립감을 잘 보여줌
     * 문제 해결 과정에서의 절망과 희망의 반복이 생생하게 묘사됨
     * PostHog와 같은 도구가 문제를 일으킬 수 있다는 점을 상기시켜줌
     * 비슷한 기능을 가진 도구로는 Mixpanel이나 Amplitude를 추천함

        Hacker News 의견

     * SRE로 일하면서 문제를 해결하는 방법을 배운 경험 공유
          + 문제를 해결하기 전에 5-10분 동안 생각하는 것이 중요함
          + 공포가 합리적인 사고를 방해함
          + 매우 차가운 물로 얼굴과 손을 씻는 것이 도움이 됨
          + 몇 번의 경험 후 자신감이 생김
     * 정신적 붕괴와 불안 발작의 차이 설명
          + 불안 발작은 통제할 수 없는 상황임
          + Xanax가 도움이 됨
          + 불안 발작이 일어나면 일을 할 수 없음을 이해해야 함
     * PostHog의 코드 한 줄이 문제를 일으킴
          + ""If you ship it, you own it"" 원칙 강조
          + 중요한 경로에 비핵심 요소를 포함시키지 말아야 함
     * 버그가 monkey-patched window.fetch에서 발생함
          + 글로벌 함수를 패치하는 라이브러리는 철저히 테스트해야 함
     * iOS/MacOS 앱에서 발생한 문제 공유
          + 350,000개 이상의 설치를 망가뜨린 릴리스
          + App Store의 리뷰 프로세스가 문제 해결을 지연시킴
     * 변수 이름의 중요성 강조
          + url 대신 urlOrRequestInfo 같은 더 정확한 이름 사용 권장
     * 기술적 문제 해결 과정에서 인간적인 관점도 중요함
          + 작은 개발자나 기업가가 공유할 수 있는 이야기
     * 문제 해결 방법의 차이점 설명
          + SRE/DevOps 엔지니어는 시스템 차이점에 집중함
          + 코드와 로그를 먼저 확인하는 프로그래머와의 차이점
     * 모든 것을 되돌릴 수 있는지 확인하는 것이 중요함
          + 의존성까지 포함하여 되돌릴 수 있어야 함
     * 압박감이 문제 해결 속도를 높이지 않음
          + 침착함을 유지하는 것이 중요함
          + 대부분의 사람들이 비슷한 상황을 경험했을 것임
"
"https://news.hada.io/topic?id=16340","브라우저에서 파이썬을 실행하는 오픈 소스 플랫폼 PyScript","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  브라우저에서 파이썬을 실행하는 오픈 소스 플랫폼 PyScript

PyScript 소개

     * PyScript는 브라우저에서 Python을 실행할 수 있는 오픈 소스 플랫폼임
     * MicroPython v1.24.0-preview.47.g88513d122 사용
     * PyScript.com은 무료이며 사용하기 쉬움

  문서

     * 초보자와 고급 사용자 모두를 위한 문서 제공

  예제

     * PyScript의 기능을 보여주는 예제 제공

  커뮤니티

     * 다른 PyScript 사용자들과 연결할 수 있는 커뮤니티 제공
     * Twitter에서 @pyscript_dev 팔로우 가능

  PyScript의 철학

     * PyScript는 디지털 권한 부여의 철학을 중심으로 함
     * 웹은 전 세계에서 가장 널리 사용되는 컴퓨팅 플랫폼이며, Python은 가장 인기 있는 프로그래밍 언어 중 하나임
     * PyScript를 사용하면 브라우저가 있는 곳 어디에서나 Python을 실행할 수 있음

  PyScript의 특징

     * 쉬움: 복잡한 설치 없이 브라우저에서 앱 실행 가능
     * 표현력: 강력하고 배우기 쉬운 언어인 Python으로 앱 생성 가능
     * 확장성: 비싼 인프라가 필요 없으며 사용자의 브라우저에서 코드 실행 가능
     * 공유 가능: 애플리케이션은 웹의 URL로 공유 가능
     * 보편성: 브라우저가 실행되는 곳 어디에서나 코드 실행 가능
     * 안전성: 브라우저라는 가장 검증된 컴퓨팅 플랫폼에서 PyScript 실행 가능
     * 강력함: 웹과 Python의 장점을 결합

  소스 코드

     * PyScript Development Team이 개발
     * 2022년 Anaconda, Inc.에서 시작됨

GN⁺의 정리

     * PyScript는 브라우저에서 Python을 실행할 수 있게 하여 디지털 권한 부여를 목표로 함
     * 설치가 필요 없고, 어디서나 실행 가능하며, 공유가 쉬운 점이 큰 장점임
     * Python과 웹의 장점을 결합하여 강력한 애플리케이션을 만들 수 있음
     * 비슷한 기능을 가진 프로젝트로는 Brython, Transcrypt 등이 있음

        Hacker News 의견

     * Dallas 범죄 통계 대시보드 링크 공유
          + https://crimede-coder.com/graphs/Dallas_Dashboard
          + 시작 시 Python 라이브러리 설치와 5MB 데이터셋 로딩으로 약 1분 소요
          + 실행 후 반응 속도 빠름
          + iPhone에서도 잘 작동함
     * 많은 기업들이 Tableau 무료 버전을 사용하여 데이터를 수동으로 업데이트함
          + 무료 버전은 데이터 저장소와 직접 연결 불가
          + GitHub Actions를 사용하여 CSV 파일을 환경에 불러오는 무료 대안 제시
     * 홈페이지와 문서를 읽어도 이해가 어려움
          + 직접 시도해본 결과, 웹사이트에 ""Hello World""를 표시할 수 있음
          + PyScript가 Python 코드를 JavaScript로 변환하는 스크립트로 보임
     * 개발자들이 유지보수하는 코드에 새로운 어려움이 생김
          + 과거에는 훈련되지 않은 컨설턴트와 VB 또는 Delphi 사용
          + 이후 JS와 jQuery, SQL 인젝션 혼합
          + 이제 데이터 과학자와 PyScript 사용자들이 새로운 도전에 직면
     * 휴대폰 성능이 매년 빨라지므로 속도를 더 늦추는 방법을 찾아야 함
     * Pyodide와의 차이점 질문
          + Pyodide 링크: https://pyodide.org/en/stable/
     * PyScript를 사용하여 브라우저에서 Python CLI 앱 실행 시도
          + 종속성 문제로 인해 해킹처럼 느껴짐
          + Pydantic 2.x 사용 불가로 래퍼 클래스 생성 필요
          + 일부 로직을 JavaScript에 넣어야 했음
          + 간단한 UI와 Python 코드 위에 커스텀 UI 로직이 필요한 경우 유용할 수 있음
          + Streamlit 또는 Gradio가 더 적합할 수 있음
          + GitHub 저장소: https://github.com/data-catering/data-contract-playground
          + 웹사이트: https://data-catering.github.io/data-contract-playground/
     * 실질적인 사용 사례를 찾기 어려움
          + ML 모델을 Onnx로 빌드하여 브라우저 기반 앱을 JS/TS 대신 효율적으로 구축할 수 있음
          + Onnx 링크: https://onnxruntime.ai/docs/tutorials/web/
     * PyScript를 사용하여 Vue.js에서 영감을 받은 프론트엔드 프레임워크 작성
          + 링크: https://puepy.dev
     * Brython과 동일한 개념인지 질문
          + Brython 링크: https://brython.info/
          + GitHub 링크: https://github.com/brython-dev/brython
     * 작은 람다 함수와 피보나치 꼬리 재귀 함수 시도
          + 둘 다 성공적으로 작동하여 인상적임
          + Python 인터프리터를 재구현할 때 종종 오류가 발생하는데 이번에는 잘 작동함
"
"https://news.hada.io/topic?id=16292","Apple의 요구 사항이 곧 Patreon의 크리에이터와 팬들을 강타할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Apple의 요구 사항이 곧 Patreon의 크리에이터와 팬들을 강타할 것

     * Apple은 Patreon이 2024년 11월까지 iOS 앱에서 인앱 구매 시스템을 사용하도록 요구함
     * Patreon이 이를 따르지 않으면 App Store에서 제거될 위험이 있음
     * Apple의 인앱 구매 시스템은 창작자 중심의 유연성을 제공하지 않음
     * 크리에이터에게 두 가지 주요 변화가 있음:
          + Apple은 Patreon 샵에서 구매한 모든 것 외에도 Patreon iOS 앱에서 구매한 모든 새로운 멤버십에 30%의 App Store 수수료를 적용할 것임
          + 현재 매월 첫날 또는 창작물당 청구 플랜을 사용하는 크리에이터는 Apple의 인앱 구매 시스템이 지원하는 유일한 청구 유형인 구독 결제 모델로 전환해야 함
     * Apple의 수수료는 기존 회원에게 영향을 미치지 않으며 11월 이후 iOS 앱에서 구매한 새 멤버십에만 영향을 미침

  Apple의 수수료 대응 방법

     * Patreon은 Apple의 30% App Store 수수료로 인한 수입 중단을 피하는 가장 좋은 방법을 찾기 위해 크리에이터와 긴밀히 협력해 왔음
     * 크리에이터 피드백을 기반으로 iOS 앱에서만 가격을 자동으로 인상하여 Apple 수수료 비용을 상쇄할 수 있는 선택적 도구를 구축하여 제공
     * 창작자는 가격을 유지하고 30% 수수료를 부담할지 선택 가능
     * 이상적인 솔루션은 아니지만 Apple의 수수료는 iOS 앱에서만 적용되며 웹과 Android 앱의 가격은 영향을 받지 않음

  Apple의 결제 요구 사항 대응 방법

     * Apple의 인앱 구매 시스템은 구독 결제 모델만 지원
     * Apple은 Patreon의 크리에이터가 지원되지 않는 청구 모델을 계속 사용하거나 iOS 앱에서 거래를 비활성화하면 전체 앱이 App Store에서 제거될 위험이 있다고 명확히 했음
     * 월초 결제 또는 창작물별 결제 모델을 사용하는 창작자는 2025년 11월까지 구독 결제 모델(Subscription Billing)로 전환해야 함
     * 현재 구독 모델에 따라 이 변경이 미치는 영향이 다름:
          + 구독 빌링 - 모델을 변경할 필요가 없으며 언제든지 Apple 수수료 처리 방법을 조정할 수 있음
          + 매월 첫날 빌링 - iOS 앱에서 계속 수입을 올리기 위해 2024년 11월부터 구독 빌링으로 자동 전환됨. 더 많은 시간이 필요하다면 2025년 11월까지 현재 청구 모델을 유지하도록 설정에서 마이그레이션을 지연시킬 수 있음
          + 창작물당 청구 - 사업 운영 방식에 큰 변화가 있으므로 제품 지원팀이 마이그레이션을 도울 것임. 2025년 11월까지 현재 청구 모델을 유지할 수 있지만 그 시점에 자동으로 구독 청구로 마이그레이션됨
     * Patreon은 16개월간의 전환 과정을 통해 모든 창작자를 구독 결제 모델로 전환할 예정

  향후 계획

     * Patreon은 창작자와 팬, 비즈니스를 위해 가능한 한 원활하게 전환 과정을 진행할 예정
     * 우리가 이 길을 선택하지는 않았지만, 스트리머와 팬에게 더 나은 정기구독 결제 경험을 제공하기 위해 리소스를 집중하고 있음
     * 창작자 커뮤니티와 협력하여 FAQ, 가이드 영상 등을 제공
     * Discord에서 Q&A 세션을 통해 창작자와 소통

  GN⁺의 정리

     * Apple의 요구 사항으로 인해 Patreon 창작자들은 iOS 앱에서 구독 결제 모델로 전환해야 함
     * 이번 변화로 크리에이터와 팬 모두에게 불편함이 있겠지만, 장기적으로는 Patreon의 지속 가능한 성장에 도움이 될 것으로 보임
     * Apple의 요구 사항은 Patreon뿐만 아니라 다른 구독 기반 플랫폼에도 영향을 미칠 것임. 업계 전반에 걸쳐 수익 공유 모델에 대한 논의가 필요해 보임
     * 크리에이터 입장에서는 iOS 앱 내에서의 수익 감소가 불가피해 보이나, 구독자들에게 웹이나 Android 앱을 통한 가입을 독려하는 등 대안을 모색해 볼 수 있겠음
     * 장기적으로는 크리에이터들이 특정 플랫폼에 의존하기보다는 자체 웹사이트나 커뮤니티를 구축하는 것이 더 나은 전략일 수 있음

        Hacker News 의견

     * Apple의 Patreon 구독 수수료가 Patreon 자체 수수료보다 높음
          + 시장에서 서비스는 공정이 아닌 경쟁에 따라 요금을 부과함
          + Apple이 Patreon 앱을 iOS에서 호스팅하는 것이 Patreon 자체보다 더 큰 가치를 제공하는지 의문임
     * YouTube 크리에이터로서 Patreon의 월간 구독 일정 변경에 불만
          + 창작물당 요금 부과가 창작자에게 더 유리함
          + 다른 플랫폼으로 전환할 가능성 있음
     * 창작물당 요금 부과는 Patreon 창작자에게 중요한 기능임
          + Apple의 강제 조치로 인해 Patreon이 기능을 변경하는 것은 독점 권력의 예시임
     * Apple이 앱을 통해 구독할 때 더 높은 요금을 부과하는 것은 소비자에 대한 무례함
          + Tim Cook의 Apple로 기억될 것임
     * Apple이 거래 금액의 30%를 가져가는 것은 부당함
          + 공정한 타협안으로는 Apple이 창작자의 수익률의 30%를 가져가는 것임
          + 예를 들어, Patreon의 수익률이 8%라면 Apple은 그 30%를 가져가야 함
     * Apple의 높은 수수료는 소비자와 창작자의 신뢰를 저해함
          + 규제 당국의 조사를 초래할 수 있음
     * Apple은 개방형 시스템과 상호운용성을 저해함
          + 독점적 앱 스토어를 통해 다른 비즈니스에 높은 요금과 조건을 부과함
          + 규제 당국이 Apple 앱 스토어에 대해 더 강력한 조치를 취해야 함
     * Apple이 Patreon에서 거래를 비활성화하면 앱 스토어에서 제거될 위험이 있음
          + 이는 매우 충격적임
     * Patreon의 UI가 점점 나빠지고 있음
          + Apple의 영향력으로 인해 Android 사용자도 영향을 받음
          + 반독점 소송의 사례가 될 수 있음
     * Patreon이 앱이 될 필요가 없다는 의견
          + 모바일 사이트로도 충분히 작동함
          + 앱을 통해 더 많은 사용자 데이터를 수집하려는 의도가 있음
"
"https://news.hada.io/topic?id=16339","한 남자의 첫 번째 Air Force One 복원 노력","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     한 남자의 첫 번째 Air Force One 복원 노력

한 남자의 첫 번째 에어포스 원 복원 퀘스트

  드와이트 D. 아이젠하워 대통령의 비행기가 다시 원래 모습으로 돌아옴

     * 1953년, 드와이트 D. 아이젠하워 대통령 당선자는 한국 전쟁을 끝내기 위한 계획을 세우고 있었음
          + 아이젠하워와 그의 팀은 백악관이 아닌 태평양 상공을 비행 중이었음
          + 이 비행기는 1948년 제작된 록히드 C-121 콘스텔레이션 항공기로, 첫 번째 에어포스 원이었음
     * 콜럼바인 II의 역사
          + 이 비행기는 16명의 승객을 태울 수 있었고, 5명의 승무원과 2~3명의 승무원이 탑승했음
          + 아이젠하워는 이 비행기를 '콜럼바인'이라고 명명했으며, 그의 아내의 고향인 콜로라도주의 꽃에서 이름을 따왔음
          + 1954년, 연방 항공국은 에어포스 원이라는 호출 부호를 채택했음
     * 콜럼바인 II의 중요성
          + 아이젠하워는 이 비행기를 통해 새로운 대통령 외교 시대를 열었음
          + 아이젠하워는 2년 동안 63,000마일 이상을 비행하며 국내외 지도자들과 회담을 가졌음
          + 이 비행기는 한국 전쟁을 끝내고 ""평화를 위한 원자"" 연설을 작성하는 데 사용되었음
     * 콜럼바인 II의 운명
          + 1959년 이후, 이 비행기는 상업용 항공기로 잠시 사용되다가 1968년 애리조나의 공군 저장 시설에 퇴역했음
          + 1970년, 이 비행기는 잊혀져 경매에서 다른 C-121 항공기들과 함께 판매되었음
     * 복원 작업
          + 2014년, Dynamic Aviation의 CEO 칼 스톨츠푸스가 이 비행기를 발견하고 복원을 시작했음
          + 복원 작업은 매우 어려웠으며, 8,000시간 이상의 작업이 필요했음
          + 2016년, 이 비행기는 버지니아 브리지워터로 이동하여 복원의 다음 단계를 진행했음
     * 현재 상태
          + 현재 콜럼바인 II는 다른 역사적인 군용 항공기들과 함께 복원 중임
          + Dynamic Aviation은 매년 약 $500,000를 이 프로젝트에 투자하고 있으며, 2022년에는 비영리 단체 First Air Force One을 설립했음
          + 복원 작업은 매우 복잡하고 비용이 많이 들며, 전문가들의 창의성과 기술이 요구됨
     * 미래 계획
          + 복원이 완료되면 콜럼바인 II는 에어쇼에서 공개될 예정임
          + 이 비행기는 세대를 초월한 강력한 상징으로서 미국의 역사를 상기시킬 것임

GN⁺의 정리

     * 이 기사는 첫 번째 에어포스 원인 콜럼바인 II의 복원 과정을 다루고 있음
     * 아이젠하워 대통령의 비행기로서의 역사적 중요성과 복원의 어려움을 강조함
     * 복원 작업은 매우 복잡하고 비용이 많이 들며, 전문가들의 창의성과 기술이 요구됨
     * 복원이 완료되면 에어쇼에서 공개될 예정이며, 미국의 역사를 상기시키는 강력한 상징이 될 것임

        Hacker News 의견

     * 시애틀의 비행 박물관에서 첫 제트 엔진 Air Force One을 체험할 수 있음
          + 회의실과 통신 장비가 완비되어 있음
          + 가짜 온도 조절 장치가 설치되어 있었음
               o 대통령 존슨이 온도에 민감하여 승무원들에게 자주 불평했음
               o 승무원들이 가짜 온도 조절 장치를 설치하여 존슨을 만족시켰음
     * 이 항공기를 매우 좋아함
          + Howard Hughes의 TWA가 개발을 지원했음
          + Ken Wixey의 책을 추천함 (ISBN 978-0752417660)
               o Lockheed 회사의 역사와 Constellation 모델의 변천사를 다룸
          + FlightGear 시뮬레이터에서 Super Constellation을 비행할 수 있음
     * 대부분의 구형 대통령 리무진은 파괴되어 박물관에 전시되지 않음
     * 복원 과정을 유튜브에 올렸으면 좋겠음
          + Tally Ho 채널과 비슷한 콘텐츠가 되었을 것임
     * 이 주제에 대해 생각해 본 적이 없었음
          + 첫 Air Force One이 FDR이나 Truman 시절일 것이라고 생각했음
          + 2차 세계대전 이후 미국 대통령제와 정부가 흥미로워짐
          + 내부 사진을 찾을 수 없어 아쉬움
     * VIP 투어를 위해 비행기를 계속 운행할 계획인지 궁금함
          + 화장품에만 집중하고 실제 유지보수는 하지 않는 것이 더 나을 것 같음
          + 박물관의 WW2나 그 이전 차량은 더 이상 운행되지 않는다고 생각함
     * Air Force One은 특정 비행기를 지칭하는 것이 아니라, 대통령이 탑승한 모든 공군 비행기의 항공 교통 통제 호출 신호임
     * Smithsonian이 이 비행기를 원할 것이라고 생각했음
          + 누군가가 복원을 시도하고 있어 다행임
     * ""테세우스의 배""와 같은 사례가 아닐까 생각함
     * 아름다운 비행기임
          + 더 이상 비행하지 않는 것이 아쉬움
          + 누군가가 역사의 한 조각을 돌보고 있어 기쁨
"
"https://news.hada.io/topic?id=16395","슬랙 AI에서 간접 프롬프트 주입을 통한 데이터 유출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     슬랙 AI에서 간접 프롬프트 주입을 통한 데이터 유출

    Slack AI를 통한 간접 프롬프트 주입으로 인한 데이터 유출

     * 이 취약점은 사용자가 비공개 Slack 채널에 넣은 모든 데이터를 공격자가 훔칠 수 있게 함
     * 공격자는 Slack AI를 통해 비공개 채널에서 데이터를 유출할 수 있음
     * Slack AI는 자연어로 Slack 메시지를 쿼리할 수 있게 해주는 기능
     * 8월 14일 이후로 Slack은 업로드된 문서, Google Drive 파일 등을 수집하기 시작하여 위험 표면적이 증가함

      1. 취약점

     * 프롬프트 주입: LLM이 개발자가 만든 ""시스템 프롬프트""와 쿼리에 추가된 나머지 컨텍스트를 구분하지 못함
     * 간접 프롬프트 주입: 악의적인 명령이 포함된 메시지를 통해 Slack AI가 사용자의 쿼리 대신 그 명령을 따를 가능성이 높음
     * Slack 내부 위협은 이미 문제였으며, 이제 공격자는 비공개 채널이나 데이터에 접근하지 않고도 데이터를 유출할 수 있음

      2. 데이터 유출 공격 체인: 공개 채널 주입

     * Slack에서 사용자의 쿼리는 공개 및 비공개 채널의 데이터를 검색함
     * 공격자는 비공개 채널에 있는 API 키를 유출할 수 있음
     * 공격 체인:
          + A) 사용자가 자신의 비공개 채널에 API 키를 넣음
          + B) 공격자가 공개 채널에 악의적인 명령을 넣음
          + C) 사용자가 Slack AI에 API 키를 쿼리하면, 공격자의 메시지가 같은 ""컨텍스트 창""에 포함됨
          + D) Slack AI가 공격자의 명령을 따르고, 사용자가 링크를 클릭하도록 유도함
          + E) 사용자가 링크를 클릭하면 API 키가 유출됨

      3. 피싱 공격 체인: 공개 채널 주입

     * 데이터 유출 대신 피싱 링크를 렌더링함
     * 공격 체인:
          + A) 공격자가 공개 채널에 악의적인 메시지를 넣음
          + B) 사용자가 특정 사용자의 메시지를 요약하도록 쿼리함
          + C) 피싱 링크가 마크다운으로 렌더링됨

      4. 8월 14일 Slack AI 변경의 의미: 파일 주입

     * Slack AI가 채널 및 DM에서 파일을 포함하도록 변경됨
     * 공격 표면적이 크게 넓어짐
     * 악의적인 명령이 포함된 PDF 파일을 다운로드하고 Slack에 업로드하면 동일한 공격 체인이 발생할 수 있음
     * 관리자는 Slack AI의 문서 수집 기능을 제한해야 함

      5. 맥락에 맞추기

     * 이러한 공격은 Microsoft Copilot, Google Bard 등 여러 애플리케이션에서도 가능함
     * 책임 있는 공개 일정:
          + 8월 14일: 초기 공개
          + 8월 15일: 추가 정보 요청
          + 8월 15일: 추가 비디오 및 스크린샷 제공
          + 8월 16일: 추가 질문
          + 8월 16일: 명확한 답변 제공
          + 8월 19일: Slack이 증거가 불충분하다고 판단

    GN⁺의 정리

     * Slack AI의 간접 프롬프트 주입 취약점은 비공개 채널의 데이터를 유출할 수 있는 심각한 문제임
     * 공격자는 비공개 채널에 접근하지 않고도 데이터를 유출할 수 있음
     * Slack AI의 기능 변경으로 인해 공격 표면적이 크게 증가함
     * 사용자는 Slack AI의 문서 수집 기능을 제한하여 위험을 줄여야 함
     * 유사한 기능을 가진 애플리케이션으로는 Microsoft Copilot, Google Bard 등이 있음

        Hacker News 의견

     * ""confetti"" API 키를 도메인 이름의 일부로 넣는 것이 더 나을 것 같음
          + 이렇게 하면 브라우저의 DNS 프리페칭으로 인해 클릭 없이도 키가 유출될 수 있음
     * 이 공격의 핵심은 데이터 유출 벡터를 이해하는 것임
          + Slack은 URL이 링크 텍스트 뒤에 숨겨진 Markdown 링크를 렌더링할 수 있음
          + 공격자는 Slack AI를 속여 사용자가 ""재인증을 위해 여기를 클릭하세요""와 같은 링크를 클릭하게 만듦
          + 이 링크는 공격자의 서버로 연결되며, 쿼리 문자열에 Slack AI가 접근할 수 있는 개인 정보가 포함됨
          + 사용자가 링크를 클릭하면 데이터가 공격자의 서버 로그로 유출됨
     * 채널 권한에 대한 논의는 불필요하게 복잡하게 만듦
          + 사용자 A가 Slack AI를 사용해 검색함
          + 사용자 B가 이전에 AI에게 악성 링크를 반환하도록 메시지를 주입함
          + AI가 사용자 A에게 악성 링크를 반환하고, 사용자가 클릭함
          + 다른 사회 공학 벡터를 사용해도 같은 결과를 얻을 수 있지만, LLMs는 이 경험을 극대화함
     * 회사들이 LLMs를 모든 것에 무작정 적용하는 것은 미친 짓임
          + GPT-3 이후 거의 2년이 지났지만 여전히 신뢰할 수 있는 입력과 신뢰할 수 없는 입력을 구분하지 못함
     * 피해자가 공격이 작동하기 위해 공개 채널에 있을 필요가 없음
          + 인용이 공격자의 채널을 참조하지 않고, 사용자가 API 키를 넣은 개인 채널만 참조함
          + 모든 기여 메시지를 인용해야 하는 올바른 인용 행동을 위반함
          + LLM 인용이 정확할 것이라고 기대하는 이유를 이해하지 못함
          + 인용은 시청자를 속여 출력이 더 정확하다고 믿게 만드는 인간의 해킹처럼 보임
          + 링크 확장을 AI 응답에 추가하면 클릭 없이도 자동으로 유출될 수 있음
     * 유사한 설정이 CTF 챌린지에서 탐구됨
          + 링크가 활성화된 채팅 피드에 게시하는 LLM 앱은 모두 취약함
          + 링크 미리보기를 고려하면 인간의 상호작용이 필요하지 않음
     * 기사가 제목에 부합하지 않음
          + ""AI를 사회 공학적으로 조작하면 사용자를 피싱할 수 있다""는 아이디어는 흥미로움
     * 인공지능은 변하지만 인간의 어리석음은 변하지 않음
     * AI 에이전트에게 전용 인증을 제공하는 것을 중단해야 함
          + 모든 작업에 호출 사용자의 인증을 사용하고 사용자를 효과적으로 가장해야 함
          + 문제는 유출된 컨텍스트가 아니라 과도한 권한을 가진 확장임
     * 매우 멋진 공격 벡터임
          + LLM 컨텍스트로 데이터를 유출할 수 있는 다양한 방법이 있음
"
"https://news.hada.io/topic?id=16280","오픈 소스의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               오픈 소스의 미래

     * 우리 COO이자 공동창업자인 Anne이 독일 식품회사 Delinero의 CEO였을때 소송을 당했음. 공급업체가 제공한 라즈베리 잼을 ""Himbeermarmelade""라고 표기했는데, 독일에서는 마멀레이드가 최소 20%의 감귤류를 포함해야만 ""마멀레이드""라고 표기할 수 있는 'Konfitürenverordnung(잼 규정)'이 있었기 때문
     * 이는 일반적으로 사용되는 단어의 의미와는 상반되는 규정이었지만, 소수의 이해관계자들이 오래 전에 만든 법이기에 따라야만 했음
     * 현재의 ""오픈 소스""도 이와 유사한 상태라고 볼 수 있음. OSI가 Konfitürenverordnung처럼 일반적인 용법과는 달리 진화한 용어를 여전히 엄격하게 규제하고 있음
     * 하지만 어떻게 하면 건설적인 방향으로 나아갈 수 있을까?

""오픈 소스""를 하지 않는 방법

     * GitButler가 클라이언트 코드를 ""Fair Sourcing""하여 OSI 승인되지 않은 라이선스로 공개했을 때, 어떻게 발표할지 고민했음
     * 대부분의 사람들은 ""오픈 소스""를 ""GitHub에 공개된 것""과 동일시하고, 또한 GPL/카피레프트 라이선스의 다소 위험한 의미로 인해 사람들은 어떤 라이선스가 적용되는지 확인하는 데 매우 익숙함
     * 그렇다고 ""Source Avaialable'd"" 같은 모호한 말은 쓰고 싶지 않았고, 혼동을 피하기 위해 ""오픈""이라는 말을 사용했지만, 공격을 받았음
     * 소수의 목소리 큰 사람들이 이 용어를 보호하고 구체화하려 한다는 것을 깨달음
     * ""오픈 소스""는 ""클로즈드 소스""의 논리적 부정이 아님. GitHub에 공개되고 참여하는 것과 OSI가 자체 규제하는 ""오픈 소스""의 기술적 10가지 정의 사이에는 대중적 이해의 격차가 존재함

오픈 소스의 간략한 역사

     * 1950-60년대 초기 컴퓨팅 시대에는 소프트웨어가 하드웨어에 묶여 있어 별도로 구분할 필요가 없었고, 하드웨어 회사들이 자유롭게 배포했음
     * 1970-80년대 하드웨어가 상품화되면서 소프트웨어만의 가치가 생겼고, IBM, AT&T 등 대기업들이 비용을 들여 만든 소스 코드의 접근을 제한하기 시작함
     * 이에 Richard Stallman 등이 기업의 이해관계로부터 보호되는 자체 OS와 도구들을 만들기 시작했고, GPL 등 상호주의적 라이선스로 IBM, AT&T가 그들의 것을 사용하면 모두 자유 소프트웨어로 만들도록 강제했음

     ""우리가 당신의 장난감으로 놀 수 없으면, 당신도 우리 장난감으로 놀 수 없습니다.""
          + 그들은 이 운동을 ""자유 소프트웨어""라고 명명하고 Emacs와 GNU 컴파일러 시스템과 같은 많은 놀라운 도구를 만들었음. 이는 오늘날에도 대부분의 현대 컴퓨팅의 기본 도구임
          + 자유 소프트웨어 운동의 근본적인 초점은 사용자가 소프트웨어를 실행, 복사, 배포, 연구, 변경 및 개선 할 수 있는 자유를 보장하는 것이었음. 그 당시 그들을 둘러싼 기업 이익에 의해 그들에게서 빼앗긴 자유
     * 1990년대 초 Linus Torvalds의 리눅스 커널로 완전한 OS를 갖추게 되었고, LAMP 스택 등 자유 소프트웨어 생태계가 성장하며 기업들도 사용하고 의존하게 됨
     * 1997년 Eric Raymond가 자유 소프트웨어 개발 모델이 폐쇄형보다 우월하다는 에세이 ""성당과 시장""을 발표했고, 이는 Netscape가 Navigator Suite의 소스 코드를 공개하는 것을 정당화하는 데 인용 됨
          + 넷스케이프가 소스 코드를 공개하기로 결정했을 때, 팔로알토에서 열린 전략 세션에서 레이몬드와 몇몇 저명한 Linux 및 자유 소프트웨어 개발자들은 ""오픈 소스""라는 새로운 용어를 만들어 사용하기로 합의

     ""회의 참석자들은 넷스케이프가 코드를 공개하도록 동기를 부여한 실용적이고 비즈니스적인 근거가 잠재적인 소프트웨어 사용자 및 개발자와 소통하고 커뮤니티에 참여하여 소스 코드를 만들고 개선하도록 설득할 수 있는 가치 있는 방법이라고 믿었습니다. 회의 참석자들은 또한 이러한 접근 방식을 식별하고 철학적, 정치적으로 초점을 맞춘 “자유 소프트웨어”라는 라벨과 구별할 수 있는 단일 라벨이 있으면 유용할 것이라고 믿었습니다.""
     * 중요한 것은 ""자유 소프트웨어""와 ""오픈 소스"" 사이에는 실질적인 법적 또는 실용적인 차이가 없다는 것
          + 대부분의 라이선스는 두 정의 모두에서 호환되고 인정됨
          + ""오픈 소스""는 넷스케이프와 같은 더 많은 회사가 전문 소스 코드의 개방을 수용하도록 하기 위한 스톨만과 그의 운동의 정치적인 목표와 소프트웨어 개방의 실용성을 분리하기 위해 비즈니스 친화적으로 브랜드를 변경한 것일 뿐
     * 또는 자유 소프트웨어쪽 사람들이 얘기했듯이

     ""오픈소스는 개발 방법론이고 자유 소프트웨어는 사회 운동입니다.""

오픈 소스와 GitHub 시대

     * ""오픈 소스""라는 문구의 정의와 마케팅은 1998년, 지금으로부터 25년 이상 전이었음. 그렇다면 컴퓨팅의 지난 25년 동안 오픈 소스와 소프트웨어 개발 분야에서 무슨 일이 일어났을까?
     * 특히 지난 10년간 GitHub와 GitHub 스타일의 소프트웨어 개발이 오픈 소스에 엄청난 영향을 미쳤음
     * 1998년에는 기업들에게 오픈 소프트웨어를 받아들이도록 설득하려 했지만, 현재는 거의 모든 오픈 소스 소프트웨어를 기업이 작성하거나 후원함
     * 가장 큰 변화 중 하나는 ""개발 워크플로우의 표준화"", 특히 GitHub에 의해 주도됨
     * 이전에는 오픈 소프트웨어 프로젝트와 기업의 프로젝트 사이에 큰 차이가 있었지만 이제는 거의 차이가 없음
          + 모두가 Git을 사용
          + 거의 모든 사람이 풀 리퀘스트(또는 병합 요청, 또는 이 기능을 복제한 다른 ​​방법)를 사용
          + 대부분의 팀은 GitHub Flow ( Trunk 기반 개발 , Gitlab Flow 등) 의 어떤 형태를 사용
     * 이제 저장소의 공개 여부만이 유일한 차이점임. 25년 전에는 프로세스에 많은 마찰이 있었지만 이제는 오픈 소스화하는 데 거의 프로세스 변화가 필요하지 않음

오픈 소스의 다음 단계는 무엇인가

     * 거의 모든 기업이 오픈 소스 소프트웨어를 사용하고 생산하게 되면서 오픈 소스 (자유 소프트웨어) 운동이 성공한 것일까?
     * 오픈 소스 세계에는 현재 두 가지 큰 문제가 있음. ""개발자 지속 가능성""과 ""상용 오픈 소스가 Viable한가""

  개발자 지속 가능성 문제

     * 오픈 소스에 크게 의존하게 되면서 지속 가능성과 유지 보수 문제가 발생하고 있음. XZ Utils 백도어 악용 사건이 최근 유명한 사례
     * 거의 모든 유지 관리자가 소진과 괴롭힘으로 어려움을 겪고 있음. 오픈 소스 소프트웨어를 작성하고 유지 관리하면서 돈을 버는 것은 거의 불가능함
     * 대부분의 오픈 소스 개발자와 유지 관리자는 이제 대기업의 후원을 받고 있음
          + Linux, Git, Ruby, React 등을 살펴보면 중요한 오픈 소스 프로젝트의 대부분 기여자는 GitHub, Microsoft, Red Hat 등 기업 후원자가 전문적으로 고용함.
     * 개발자가 XZ Utils와 같은 프로젝트를 유지 관리하면서 제대로 된 생계를 꾸리기는 어려움
          + 한 회사가 개발자에게 지불하는 대신, 수천 개의 회사가 전문 유지 관리자에게 작은 금액을 지불하는 것이 이상적일 것
     * 주요 문제는 현재 이를 할 수 있는 좋은 방법이 없다는 것
          + GitHub Sponsors, Thanks.dev, Liberapay, Tidelift 등 유망한 이니셔티브가 있지만, 기업이 기부할 수 있는 적절한 인센티브 문제는 아직 해결하지 못함
     * Sentry는 OSS Pledge 라는 새로운 이니셔티브를 추진해 왔으며 , GitButler는 10월에 출시되면 참여할 계획
     * 하지만 이와 같은 방식이 오픈 소스 생태계에서 개발자의 지속 가능성이라는 크고 점차 커지는 문제를 해결할 수 있을지는 아직 알 수 없음

  상용 오픈 소스의 문제

     * 개발자들은 오랫동안 오픈 소스와 오픈 커뮤니티를 사랑하며 자랐고, 회사와 프로젝트를 시작할 때 기본적으로 오픈하길 원함
          + 그러나 개별 유지 관리자와 마찬가지로 오픈 소스에도 기업의 지속 가능성 문제가 있음
     * Elasticsearch와 Redis의 사례에서 볼 수 있듯이, 전문적으로 소프트웨어를 개발하는 데 시간과 돈을 투자할 때 Amazon 등 대기업이 자신들의 작업물을 이용해 직접 경쟁하는 위험이 있음
     * 많은 전문 제작자들은 소프트웨어에 투자하고 나중에 그것이 자신들에게 불리하게 사용되지 않도록 하고 싶어함
          + 이는 라이선싱에 창의적이 되거나 소스 코드를 폐쇄하는 것을 의미함
     * 나는 Fair Source 운동이 이 증가하는 문제에 대한 훌륭하고 필요한 해결책이라고 믿으며, 지난 몇 년 동안 점점 더 많은 문제와 혼란을 야기한 오픈 소스 생태계의 격차를 메꾼다고 생각
          + 이는 대부분 허용되고, 소스를 사용할 수 있으며, GitHub 커뮤니티가 참여하는 전문 프로젝트를 가리키는 새로운 용어로, 이전에 비공개로 진행되던 프로젝트가 더 많이 공개되도록 장려하기 위해 절실히 필요한 솔루션이라고 생각

협업의 미래

     * 오픈 소스의 미래는 그저 ""Open Source"" 그리고 OSI의 10가지 Konfitürenverordnung만이 아님
     * 모두에게 가능하고 가치있는 Open Source, 안전한 투자를 위해 필요한 Fair Source, 중요한 기초 오픈 라이브러리와 프로젝트에 대한 대규모 공동 펀딩의 조합임
     * 중요한 오픈 소스 라이브러리 유지 관리를 지속 가능하게 만들어야 하고, 지속 가능한 상용 소스 사용 가능 라이선스 클래스를 수용하고 정상화해야 함
     * 가능한 한 모든 것을 허용하는 OSI 라이선스로 오픈 소스화해야 하며, 무엇보다 폐쇄형 소스를 과거의 일로 만들어야 함
     * 지금 당신이 할 수 있는 일은
          + 폐쇄형 소프트웨어를 Fair Source로 만들고
          + 오픈 소스에 의존한다면 OSS Pledge에 동참하는 것

   자본주의 세상에 살면서 오직 오픈소스에만 몰두 할 수 없는게 현실이죠. 한편으로는 정말 중요한 라이브러리나 유틸리티라면 기업들의 스폰서쉽이 더 주어지면 좋겠다 생각 합니다.

   유저 스페이스의 데스크탑/터미널 유틸리티가 특히 이런 지원 받기가 어렵습니다. 커널이라면 대기업들이 지원을 많이 하고, 모바일이라면 앱스토어가 상업화가 잘 되어 있으며, 웹이나 펌웨어 등은 어느정도 마켓 분석을 하고 개발을 하기 때문에 걱정이 덜 한데, 일반 사용자들이 알게모르게 쓰는 소프트웨어와 라이브러리들은 허들 설정하기도 어려운 편이라 돈 벌기 정말 어려운 것 같습니다. 오픈소스가 꽤 활발하면서도 그 이상 발돋움하기 쉽지 않죠.

   오픈소스를 사랑하고 즐겨쓰는 만큼, 보이지 않는 곳에서 열심히 다수를 위해 헌신적으로 개발하는 사람들 또한 적절한 라이센스 설정으로 혜택을 받으면 좋겠다 생각 합니다.

   드루 디볼트(Drew Devault)가 쓴 글 'So you want to compete with or replace open source(오픈 소스와 경쟁하거나 오픈 소스를 대체하고 싶다고요?)'에 다음 문구가 나옵니다.

   From https://drewdevault.com/2024/07/…:

     Nevertheless, the revolutionary economics of FOSS are based on collaboration, and are incompatible with competition.

   자유 및 공개 소스 소프트웨어는 서로 다른 조직에 속하는 기여자들이 협업할 때 공동 이익이 발생하지만, 공정 소스 소프트웨어는 독점적 지위를 누리는 개인이나 조직을 위해 다른 기여자들이 공짜로 협업할 이유가 적거나 없습니다.

   어쨌든 저도 공정 소스가 폐쇄 소스보다 낫다고 생각하고, 오픈 소스 소프트웨어의 관리자가 자신의 노력에 대한 보상을 받고 싶은데 그러지 못하는 것을 저도 원치 않습니다.

   다만 공정 소스가 무료로 개발 기여라는 혜택을 오픈 소스처럼 누릴 수 있을지는 의심스럽습니다. 그리고 누가 자신의 소프트웨어를 오픈 소스로 배포할 때, 그 사람은 자신이 아무 이용자에게도 금전적 보상을 받지 못하{고/거나}, 그 소프트웨어가 클라우드 대기업의 '공짜 점심'이 될 수 있다는 점을 명심해야 합니다.

   관련해서 볼만한 글들
   오픈소스 라이선스 변화의 흐름
   SSPL(Server Side Public License)은 나빠요
   Elastic, AWS가 사용 못하게 라이센스 변경
   AWS가 Elasticsearch와 Kibana의 오픈소스 fork 발표
   Redis, 이중 소스-사용 가능 라이선스 채택
   Redis, 라이선스를 BSD 에서 듀얼 라이선스로 변경
   HashiCorp, Business Source License 채택
   OpenTF 선언문
   오픈소스를 비즈니스화 하는 법
   내 회사를 오픈 소스로 전환해야 할까? (2022)
   오픈 소스 비즈니스 모델의 죽음

   GitButler는 이제 Fair Source 입니다
"
"https://news.hada.io/topic?id=16358","블록버스터 비디오 VHS 삽입 템플릿","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          블록버스터 비디오 VHS 삽입 템플릿

Blockbuster Video VHS 삽입 템플릿

   이 템플릿은 Blockbuster Video VHS 클램쉘 케이스 삽입물을 위한 편집 가능한 Inkscape 템플릿임. 특정 Blockbuster 디자인에 100% 정확하게 맞추려는 것이 아니라, 80년대 후반부터 90년대까지의 시대상을 잘 반영하려는 목적임.

  주의사항

     * 변경할 필드는 Liberation Sans와 Liberation Sans Narrow 폰트로 되어 있음. 이 폰트가 없으면 유사한 산세리프 폰트를 사용해도 무방함
     * 뒷면 설명 영역은 Nimbus Mono PS 폰트로 되어 있지만, 타자기 스타일의 모노스페이스 폰트도 괜찮음. ""The BLOCKBUSTER difference"" 설명은 산세리프 폰트로도 보임. 90년대 후반에는 이 공간이 실제 영화 정보로 채워졌으며, 산세리프 폰트를 사용함
     * ""BLOCKBUSTER VIDEO"" 로고 폰트는 ITC Machine Std이고 바코드는 Libre Barcode 128임. 이들은 별도의 레이어로 분리되어 있으며, 폰트가 필요 없는 ""미리 렌더링된"" 대체 레이어도 있음
     * 나중에 사용된 더 간단한 ""BLOCKBUSTER"" 로고를 위한 추가 레이어도 있음
     * 바코드 형식은 여러 번 변경되었지만, 여기서 묘사된 형식은 다음과 같음:
          + 33: 대여용. 서비스나 상품 등 다른 코드도 있었을 가능성이 있음
          + 55740: 5자리 매장 번호
          + 809656: 제목별 내부 Blockbuster ID
          + 003: 매장별 제목 순서. 예를 들어, 매장에 제목이 10개 있으면 001에서 010까지임
     * ""Rent Code""가 무엇인지는 모르지만, ""B"", ""N"", ""T""를 본 적이 있음
     * ""FOX 2000306""은 스튜디오별 카탈로그 번호임 (이 경우 Fight Club)
     * 제목 영역에는 제목만 있을 수도 있지만, 추가 정보가 나열될 수도 있음. 일반적인 대체 형식은 ""FIGHT CLUB-1999-BRAD PITT""임. 때로는 ""NEW RELEASE-FIGHT CLUB""도 표시됨
     * 가장 사소한 변형이지만, 등급(""R"" 예시)이 때로는 굵게 표시되기도 함
     * Blockbuster의 파산 당시 주소와 매장 번호 목록은 2010년 파산 신청서에서 확인 가능함. 매장의 전화번호를 찾으려면 추가 검색이 필요함
     * 숨겨진 레이어는 정렬 목적으로 요소와 관련된 척추 위치를 나타냄. 척추의 바코드는 디자인상 뒷면으로 약간 돌아감
     * 진정한 Blockbuster 케이스 경험을 위해 ""바코드""와 ""채울 수 있는 텍스트"" 레이어를 모두 그룹화하고, 인쇄 전에 기본 디자인에 대해 무작위로 이동시킴
     * Blockbuster는 SNES와 Genesis 카트리지 배포에도 VHS 클램쉘을 사용함. 이 경우 카테고리는 ""GAMES SNES"" 또는 ""GAMES GENESIS"", 등급은 ""N/A""임. 제목에는 ""SNES-"" 또는 ""GENESIS-""가 실제 게임 제목 앞에 붙음

  저자

     * Ryan Finnie가 재현한 디자인임. 폐업한 회사의 디자인 반재현의 법적 지위는 확실하지 않지만, 이 템플릿은 CC-BY-SA 4.0 International 라이선스로 제공됨
     * 템플릿에 묘사된 Green Bay 위치는 1995년 Blockbuster World Video Game Championships II 대회에서 Donkey Kong Country Competition Cartridge로 경쟁했던 추억이 있는 장소임. 그 매장에서 Nintendo 부문 2위를 차지했음

GN⁺의 정리

     * 이 템플릿은 Blockbuster Video VHS 클램쉘 케이스 삽입물을 재현하려는 사람들에게 유용함
     * 80년대 후반부터 90년대까지의 시대상을 반영하여, 당시의 디자인을 경험하고자 하는 사람들에게 흥미로울 수 있음
     * Blockbuster의 파산 이후에도 그들의 디자인과 문화를 기억하고자 하는 사람들에게 의미가 있음
     * 유사한 기능을 가진 프로젝트로는 다양한 레트로 디자인 템플릿을 제공하는 웹사이트들이 있음

        Hacker News 의견

     * 과거의 향수를 불러일으킴
          + BB 고객이었고 Hollywood Video에서 일했음
          + Netflix가 등장하면서 슬펐음
          + 영화 대여의 ""옛날 방식""에 대해 많은 이야기가 있음
          + 현재는 같은 수준의 엔터테인먼트를 위해 더 많은 돈을 지불하고 있음
          + 모두 속았고 이제는 어쩔 수 없다는 느낌
     * 고등학교와 대학 시절 BBV에서 5년간 일했음
          + 첫날 DVD 선반 설치, VHS 제거, Netflix 스트리밍 시작, 자체 스트리밍 서비스 출시 경험
          + 좋은 추억
     * 따뜻한 기억을 불러일으킴
          + Blockbuster 비디오 스타일로 책 커버를 만들 계획
     * Blockbuster는 여전히 존재하며 Dish Network가 상표를 소유하고 있음
          + 유일한 남은 가맹점은 오리건주 Bend에 있음
     * ""다른"" 마지막 Blockbuster에 대한 단편 소설을 쓴 적이 있음
          + VHS 비디오가 과거를 진정으로 재현할 수 있는 장소
          + GitHub에 이런 이상한 것이 올라오는 것을 좋아함
          + 단편 소설 링크
     * 뉴질랜드에서 사용된 것과 매우 유사해 보임
          + 지역 차이, 특히 바코드에 대해 궁금함
     * 바코드 정보 분석에 대한 노력을 높이 평가함
     * 그 위치가 폐쇄되었을 때를 기억함
          + 근처 대학에 다녔음
          + 챔피언십을 거기서 했다는 것이 재미있음
          + 정말 좋은 작업
     * BBV에 들어가면 공포 영화 전문가가 있었던 것을 그리워함
          + Dario Argento, 프랑스 극단 영화에 입문시켜줌
          + ""max""/Netflix/prime 등에서는 그런 경험을 얻을 수 없음
     * 레이스카 VHS 리와인더 옆에 두기 좋은 추가 아이템
"
"https://news.hada.io/topic?id=16277","Defcon에서 "Most Epic Fail"로 PwnieAwards를 수상한 CrowdStrike","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Defcon에서 ""Most Epic Fail""로 PwnieAwards를 수상한 CrowdStrike

        Hacker News 의견

     * 이 재앙에서 유머를 찾는 것은 좋지만, 책임 문제는 어떻게 되는지 궁금함
          + 수십억의 손실이 발생했지만 소송에 대한 이야기는 거의 없음
          + 소비자에게는 몇 시간/며칠 동안의 불편함이 있을 수 있지만, 산업에서는 이런 위험 노출을 받아들일 수 없다고 생각함
          + 토목 공학에서는 윤리적이지 않거나 위험을 감수하면 형사 책임을 질 수 있음
          + 소프트웨어 엔지니어도 이 수준의 책임과 좋은 관행을 가질 수 있는 길이 있는지 궁금함
     * 이 문제는 CrowdStrike를 넘어 보안 접근 방식에 대한 일반적인 문제를 지적함
          + 규제 기관과 보험사를 만족시키기 위해 제품을 구매하지만 실제로는 그 기능이나 작동 방식에 신경 쓰지 않음
          + 기술이 규제되지 말아야 한다는 것이 아니라, 현재의 ""책임을 회피하기 위해 이 제품을 사라""는 모델이 작동하지 않음
          + IT 부서가 이 문제를 예견했을 가능성이 높지만, 회사의 높은 수준에서 ""사이버 보험"" 요구 사항이나 다른 규제로 인해 아무것도 할 수 없었을 것임
     * IT에서 일하며 Clown Strike가 대부분의 인프라를 중단시켰을 때 당직이었음
          + 개인적으로 클라우드 기반 시스템을 사용하지 않아서 몇 시간 동안만 중단되었음
          + IT 디렉터가 이 문제에 대해 아무런 조치를 취하지 않아 앞으로 또 다른 클라우드 기반 실패를 겪을까 걱정됨
          + ""다른 사람의 컴퓨터에 의존하는 것은 바보들만 한다""는 말을 반복하며 100% 동의함
     * 이 사건은 법정 증거 비디오나 소송으로 이어질 수 있음
          + 원래는 보안 전문가들끼리의 논의였지만, 이제는 주요 불만을 가진 일반 대중에게 공개됨
     * xcancel 링크 공유
     * 여러 도시에서 911이 작동하지 않고 병원 흐름이 느려지는데, 농담을 위해 defcon에 갈 시간이 있음
     * CEO와 CTO가 이 실패 후에도 어떻게 직책을 유지할 수 있었는지 궁금함
     * 이전 Pwnie Award 수상자 비교 링크 공유
     * IT 부서가 월요일 오후까지 CrowdStrike에 대한 자신감을 재확인하는 메시지를 보냈음
          + 사후 분석 없이 큰 할인을 받아 갱신했을 가능성이 있음
          + IT 팀이 CrowdStrike에 대해 더 많은 신뢰를 가지고 있음
     * 진지한 회사는 더 나은 품질 보증을 가져야 함
          + CrowdStrike 고객도 포함됨
"
"https://news.hada.io/topic?id=16313","Github Actions 배포 시간 줄여볼까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Github Actions 배포 시간 줄여볼까?

  Github Actions 배포 시간 줄여볼까?

   Github Actions를 활용한 배포 시간을 단축하기 위해 시도한 다양한 방법들과 그 과정에서 겪은 문제를 해결한 경험이 들어간 글입니다.
     * 배포 시간이 점차 길어지면서 개발 속도와 팀 생산성에 악영향을 미치는 문제가 발생
     * 문제를 해결하기 위해 배포 프로세스를 병렬 처리로 전환하고, 선택적 빌드 트리거를 도입하는 등 여러 가지 개선 작업을 어떻게 진행했는지 설명된 글입니다

    문제 상황

     * Github Actions를 사용한 배포 시간이 점차 길어져 평균 배포 시간 27분을 기록
     * 개발 생산성에 영향을 미치기 시작
     * Frontend, Intro, Backend를 순차적으로 빌드 및 배포하는 방식으로, 시간이 지나면서 비효율적인 배포 방식이 되면서 배포 시간이 늘어남

    주요 개선 사항

     * 병렬처리 도입
          + 직렬로 배포되는 Frontend와 Backend 배포 작업을 병렬로 분리해 배포 시간을 27분에서 18분으로 단축.
          + 이 과정에서 Github Workflow 코드 모듈화도 진행
     * 선택적 빌드 트리거 도입
          + 변경된 부분만 빌드하도록 path-filter를 사용했으나, 롤백 시 문제되는 상황을 발견
          + path-filter 방식을 사용하지 않고, 개발자가 배포 대상을 선택할 수 있도록 Workflow 옵션으로 제공
     * Docker Image Tag 사용 전략
          + Docker Image 재사용을 통해 배포 시간을 18분에서 15분으로 단축.
     * Deploy 병렬 처리
          + Deploy 단계에서도 병렬 처리가 가능하도록 분리하여 배포 시간을 추가로 단축
     * 인트로 분리
          + 프론트엔드에서 인트로 페이지 빌드를 서비스 빌드와 분리하여 배포 효율성을 극대화.

    결과

     * 배포 시간 55% 감소(27분 -> 12분)
     * 최대 70% 시간 단축 가능, 인프라 비용 절감, 제품 개발 생산성 향상.
     * 추가 이점
          + Workflow 모듈화를 통해 재사용성 및 유지보수 용이성 향상
          + 문제 해결 시간 단축, 시스템 안정성 증대
"
"https://news.hada.io/topic?id=16381","NASA, Starliner 추진 문제 위험성 정량화 불가능 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NASA, Starliner 추진 문제 위험성 정량화 불가능 인정

    NASA, Starliner 추진 문제의 위험을 정량화할 수 없음을 인정

     * NASA는 Boeing의 Starliner 우주선의 안전성에 대한 합의가 이루어지지 않아 두 명의 우주비행사를 지구로 귀환시킬지, 아니면 국제우주정거장(ISS)에 머물게 할지 결정하는 데 추가 시간이 필요함
     * Starliner는 의심스러운 추진기와 헬륨 누출 문제로 인해 ISS의 귀중한 주차 공간을 차지하고 있으며, SpaceX의 다음 Dragon 승무원 임무가 9월 24일로 예정되어 있어 그 전에 떠나야 함

    NASA의 입장

     * NASA의 우주비행 운영국 부국장 Ken Bowersox는 ""우리가 필요하다면 조정할 수 있지만 점점 더 어려워지고 있다""며, 8월 말까지 결정을 내려야 한다고 언급함
     * NASA는 Starliner의 귀환을 신중하게 고려하고 있으며, 추가 시간을 현명하게 사용하고자 함

    Starliner의 현재 상태

     * NASA 우주비행사 Butch Wilmore와 Suni Williams는 6월 5일 Starliner를 타고 발사되었으며, 이는 Boeing의 캡슐이 정기적인 승무원 교대 비행에 사용되기 전에 수행되는 첫 번째 승무원 시험 비행임
     * 그러나 소프트웨어 문제, 낙하산 우려, 추진 시스템 문제로 인해 Starliner 프로그램은 SpaceX의 Dragon 승무원 우주선보다 4년 이상 뒤처져 있음

    추진기 문제

     * Starliner의 28개의 반응 제어 시스템 추진기 중 5개가 발사 후 ISS 접근 중 고장났으며, 이는 Teflon 씰이 높은 온도에서 팽창하여 추진제 흐름을 제한했기 때문일 가능성이 있음
     * 5개의 고장난 추진기 중 4개는 최근 테스트에서 거의 정상적인 추진력을 생성했지만, NASA 엔지니어들은 귀환 시 정상 작동할지 확신하지 못하고 있음

    귀환 계획

     * Starliner는 대기권 재진입을 위해 4개의 큰 로켓 엔진을 발사할 때 우주선의 방향을 유지하기 위해 제어 추진기가 필요함
     * 대기권 재진입 후, Starliner는 서비스 모듈을 버리고 다른 추진기를 사용하여 재진입을 안내하며, 낙하산을 펼쳐 착륙할 예정임

    GN⁺의 정리

     * 이 기사는 Boeing의 Starliner 우주선이 추진기 문제로 인해 귀환 여부를 결정하지 못하고 있는 상황을 다루고 있음
     * NASA는 안전성을 보장하기 위해 추가 검토가 필요하며, 이는 우주 임무의 복잡성과 중요성을 보여줌
     * SpaceX의 Dragon 우주선과의 비교를 통해 Starliner 프로그램의 지연과 문제점을 이해할 수 있음
     * 우주 탐사와 관련된 기술적 문제와 해결 과정을 이해하는 데 유용한 정보 제공

    관련 추천

     * SpaceX의 Dragon 우주선은 이미 성공적으로 운용되고 있으며, 유사한 기능을 제공함
     * Blue Origin의 New Shepard도 유인 우주 비행을 위한 대안으로 고려될 수 있음

        Hacker News 의견

     * 퇴직한 엔지니어의 의견: NASA의 RCS 추진기 열 문제에 대한 의견을 공유함
     * 우주 비행의 위험성: NASA가 우주 비행의 높은 위험성을 강조하면 예산이 증가할 가능성이 있음
          + 우주 비행사들은 Soyuz나 Dragon 같은 검증된 시스템을 사용할 때도 많은 위험을 감수함
          + ISS는 작은 운석에 맞으면 큰 재앙이 될 수 있음
          + 무인 임무도 많은 드라마를 포함함
          + NASA가 위험을 강조하면 나쁜 언론 보도가 나올까 두려워함
          + 위험을 최소화하면 대중이 허용하는 위험의 한계가 낮아짐
     * NASA의 투명성 문제: NASA가 몇 달 동안 문제를 축소하고 심각한 테스트를 진행한 것에 대해 불만을 가짐
          + NASA가 대중의 인식을 조작했을 가능성이 있음
          + NASA의 신뢰성에 의문을 제기함
     * Boeing의 사기 문제: Boeing의 직원들이 현재 상황을 어떻게 느끼는지 궁금해함
          + 새로운 직장을 찾기 시작할지, 아니면 아무것도 변하지 않을 것이라고 가정할지에 대한 질문
     * SpaceX의 중요성: SpaceX의 혁신과 성공을 높이 평가함
          + 그러나 여러 신뢰할 수 있는 발사 및 승무원 제공자가 필요함
          + Boeing의 Starliner 문제는 다양한 제공자의 중요성을 강조함
     * NASA의 Boeing 지원: NASA가 Boeing을 지원하는 이유에 대해 의문을 제기함
          + Boeing의 모듈을 바다에 버리라는 의견
     * NASA의 결정 과정: NASA가 앞으로의 경로를 결정하는 데 왜 추가 시간이 필요한지 궁금해함
          + 이미 일주일짜리 임무가 두 달 넘게 진행 중임
     * 공급품 문제: 필요한 경우 두 모듈을 유지하기 위한 공급품이 얼마나 있는지 궁금해함
     * 위험 평가: 위험을 정량화할 수 없다면 위험이 너무 높다는 의견
     * 우주 비행 안전성: 어떻게 사람들이 탑승한 상태로 우주에 도달했는지에 대한 의문
"
"https://news.hada.io/topic?id=16382","FindMy Flipper – AirTag 및 SmartTag 에뮬레이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                FindMy Flipper – AirTag 및 SmartTag 에뮬레이터

FindMy Flipper - AirTag 및 SmartTag 에뮬레이터

   이 앱은 FlipperZero의 블루투스 기능을 확장하여 Apple AirTag, Samsung SmartTag 또는 Tile Tracker로 작동하게 함. FlipperZero의 BLE 비콘을 사용하여 FindMy 네트워크에서 SmartTag 신호를 수신할 수 있음. 이 앱은 추적 목적으로 다양한 태그를 복제하고, OpenHaystack 키 쌍을 생성하여 Apple의 FindMy 네트워크와 통합할 수 있는 기능을 제공함.

  기능

     * 태그 에뮬레이션: 실제 AirTag 없이도 Apple AirTag, Samsung SmartTag 또는 Tile Tracker를 FlipperZero에 복제하거나 FindMy 네트워크에서 사용할 키 쌍을 생성할 수 있음
     * 사용자 맞춤 설정: 비콘 방송 간격을 조정하고 전송 전력을 변경하여 가시성과 배터리 수명을 최적화할 수 있음
     * 효율적인 백그라운드 작동: 앱은 배터리 사용을 최소화하면서 백그라운드에서 최적화되어 FlipperZero를 계속 추적할 수 있음

  사용 가이드

    1단계: 설치

     * 옵션 A: 기기에 적합한 사전 컴파일된 펌웨어 사용
     * 옵션 B: fbt/ufbt를 사용하여 직접 펌웨어 빌드
     * 모든 설치 옵션은 개발 빌드의 펌웨어가 필요함

    2단계: SmartTag 데이터 획득

      옵션 A: 기존 태그 복제 (선호됨)

    1. 태그 페어링: AirTag, Samsung SmartTag 또는 Tile Tracker를 기기와 페어링
    2. '분실' 모드로 전환: 태그를 등록된 기기에서 약 15분 동안 멀리 둠
    3. nrfConnect 또는 ESP32 사용: Google Play Store에서 nrfConnect 설치
    4. ESP32-WROOM / ESP32-S3 사용: Android 기기가 없으면 ESP32를 사용하여 데이터 획득
    5. 필터 및 스캔: 앱을 열고 필터를 설정한 후 스캔 시작
    6. 데이터 캡처: Raw 데이터를 캡처하고 태그의 MAC 주소 기록
    7. FlipperZero 앱에 데이터 입력: 캡처한 페이로드와 MAC 주소를 FlipperZero 앱에 입력

      옵션 B: AirTag 키 생성

     * 비디오 튜토리얼: 링크

    사전 준비

     * Docker Desktop, Python, Git 설치 필요

  단계별 지침

    1. 리포지토리 클론

     * Matthew KuKanich의 GitHub 리포지토리 클론

    2. AirTag 생성 폴더 설정

     * 클론된 리포지토리에서 'air tag generation' 폴더 찾기

    3. Docker Desktop 시작

     * Docker Desktop 실행

    4. Docker를 사용하여 서버 설정

     * Docker 명령어 실행: docker run -d --restart always --name anisette-v3 -p 6969:6969 dadoum/anisette-v3-server:latest

    5. Python 가상 환경 생성

     * AirTag 생성 디렉토리로 이동하여 가상 환경 생성 및 활성화

    6. 필요한 Python 패키지 설치

     * pip3 install -r requirements.txt 실행

    7. AirTag 키 생성

     * generate_keys.py 스크립트 실행하여 키 생성

    8. 생성된 키를 Flipper Zero로 전송

     * .Keys 파일을 FlipperZero의 SD 카드에 복사

    9. 위치 보고서 요청

     * request_reports.py 스크립트 실행하여 실시간 위치 데이터 요청

    10. 고급 위치 지도 생성

     * RequestReport&Map.py 스크립트 실행하여 위치 데이터의 인터랙티브 지도 생성

  Flipper에서의 설정

     * 앱을 실행하고 설정 메뉴에서 태그 등록

  사용자 맞춤 설정

     * 비콘 간격: FlipperZero의 방송 빈도 조정
     * 전송 전력: 신호 강도 조정

  백그라운드 사용

     * 앱은 배터리 수명에 거의 영향을 미치지 않음

  호환성

     * Apple 기기, Samsung SmartTag 추적 지원 기기, Tile Tracker

  감사

     * OpenHaystack 프로젝트에 기여한 모든 사람들에게 감사

  법적 및 개인정보 보호

     * 이 앱은 개인 및 교육용으로만 사용해야 함

  면책 조항

     * 이 프로젝트는 Apple Inc. 또는 Samsung과 관련이 없음

GN⁺의 정리

     * FindMy Flipper 앱은 FlipperZero를 Apple AirTag, Samsung SmartTag 또는 Tile Tracker로 에뮬레이션할 수 있게 함
     * 다양한 태그를 복제하고 OpenHaystack 키 쌍을 생성하여 Apple의 FindMy 네트워크와 통합할 수 있는 기능 제공
     * 이 앱은 추적 목적으로 유용하며, 배터리 수명을 최적화하면서 백그라운드에서 효율적으로 작동함
     * 유사한 기능을 제공하는 다른 프로젝트로는 OpenHaystack이 있음
"
"https://news.hada.io/topic?id=16322","Launch HN: Trellis – 비정형 데이터용 AI 기반 워크플로우","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Launch HN: Trellis – 비정형 데이터용 AI 기반 워크플로우

     * Trellis는 비정형 데이터를 위한 AI 기반 ETL(Extract, Transform, Load) 도구
     * 사용자가 자연어로 정의한 스키마에 따라 전화 통화, PDF, 채팅 내용을 구조화된 SQL 형식으로 변환
     * 데이터 및 운영 팀이 수작업 데이터 입력을 자동화하고 복잡한 데이터를 SQL 쿼리로 처리할 수 있도록 도와줌

  Trellis 개발 배경

     * Stanford AI 연구소에서 만난 후, 여러 대기업 데이터 팀과 협력하며 비정형 데이터 문제를 발견함
     * 기업 데이터의 80%가 비정형 데이터로 구성되어 있으며, 기존 플랫폼으로는 처리하기 어려움
     * 예를 들어, 주요 상업 은행은 PDF와 이메일에 갇힌 중요한 데이터 때문에 신용 위험 모델을 개선할 수 없었음
     * AI 연구를 바탕으로 비정형 데이터를 스키마에 맞는 테이블로 변환하는 AI 기반 ETL 솔루션을 개발함

  기술적 도전 과제

     * 복잡한 문서 지원: LLM 기반 맵-리듀스를 사용하여 긴 문서를 처리하고, 테이블 및 레이아웃 추출을 위해 비전 모델을 사용함
     * 모델 라우팅: 각 변환에 최적의 모델을 선택하여 비용과 속도를 최적화함
     * 데이터 검증 및 스키마 보장: 참조 링크와 이상 탐지를 통해 정확성을 보장함

  다양한 사용 사례

     * 금융 서비스: 복잡한 문서(채권, 신용 등급 등)를 구조화된 형식으로 처리하여 언더라이팅 속도를 높이고 대출 처리 자동화
     * 고객 지원 및 백오피스 운영: 다양한 스키마와 ERP 시스템 간 문서 매핑을 통해 온보딩 속도 향상 및 SOP 준수 보장
     * 데이터 전처리 및 데이터 수집: ETL 파이프라인에서 데이터 전처리 및 RAG 데이터 수집 필요

    GN⁺의 정리

     * Trellis는 비정형 데이터를 구조화된 SQL 형식으로 변환하는 AI 기반 ETL 도구로, 데이터 및 운영 팀의 수작업을 자동화함
     * 복잡한 문서 처리, 모델 라우팅, 데이터 검증 등의 기술적 도전을 해결함
     * 금융 서비스, 고객 지원, 데이터 전처리 등 다양한 산업에서 유용하게 사용될 수 있음
     * 비정형 데이터 처리에 어려움을 겪는 기업들에게 특히 유용할 것임
     * 유사한 기능을 가진 다른 프로젝트로는 Alteryx, Talend 등이 있음

        Hacker News 의견

     * 오픈 소스 Python 패키지를 개발 중이며, 비슷한 기능을 제공함
          + Enron 이메일 데모 예시를 공유함
     * 주요 상업 은행에서 PDF와 이메일에 갇힌 데이터를 해결하지 못해 신용 위험 모델을 개선하지 못했음
          + 이 문제를 해결하는 것은 큰 가치를 창출함
     * SoundTrace에서 관련된 프로젝트를 진행했음
          + 새로운 클라이언트의 PDF 오디오그램 데이터를 완벽하게 추출해야 함
          + 파이프라인을 통해 PDF를 OCR로 텍스트와 테이블을 추출하고, LLM을 통해 직접 파싱함
          + 오디오그램 그래프를 컨브넷으로 보내고, 테이블을 프로그래밍 방식으로 파싱함
          + 결과를 Claude sonnet을 통해 검증하고, 일치하지 않으면 수동 검토함
          + 정확도가 거의 100%에 도달했음
     * Instabase에서 일했으며, PDF와 문서 스캔을 처리하는 능력이 중요함
     * Trellis의 출시를 축하하며, 엣지 케이스가 거의 0%에 가까워야 함
          + 모든 조직이 필요로 하는 서비스이며, 성공하면 많은 고객이 생길 것임
     * Roe AI와의 경쟁 및 차이점에 대해 질문함
     * 데이터의 정확성을 어떻게 검증했는지 궁금해함
     * 개인 프로젝트에서 TypeChat과 Zod, Unstructured를 사용해 비슷한 작업을 하고 있음
     * OpenAI의 함수 호출을 사용해 수천 개의 스캔 문서에서 필드를 추출했음
          + 다양한 입력 문서 형식에서 일부 필드의 회수가 좋지 않았음
          + JSON 스키마를 실험해 최적의 정보를 추출함
          + 긴 문서의 경우 전체 문서를 보낼지, 관련된 부분만 보낼지 결정해야 했음
          + OCR 품질이 좋지 않았음
          + 비기술 사용자가 반복적으로 #2를 수행할 수 있게 하는 것이 주요 혁신임
     * 큰 문제를 해결하지 못한 상황에서 출시를 축하함
          + 큰 문제와 예산을 가진 고객이 가장 소외됨
          + Palantir와 같은 온보딩/통합을 통해 고객 맞춤형 솔루션을 제공함
          + 99% 이상의 정확도와 인간의 개입이 효과적임
          + 95%에서 99%로의 개선이 큰 차이를 만들 수 있음
          + ""AI 기반 워크플로우"" 대신 ""99%+ 정확도 추출""을 강조해야 함
"
"https://news.hada.io/topic?id=16397","화재 제어 컴퓨터의 기본 메커니즘 (1953) [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    화재 제어 컴퓨터의 기본 메커니즘 (1953) [비디오]

        Hacker News 의견

     * 1989년에 Pascagoula Mississippi 조선소에서 구축함 데이터 시스템 기술자로 일했음
          + 전투 시스템 작업을 하는 사람들이 전함 Wisconsin의 화재 통제 시스템 투어에 초대받았음
          + 모든 기계식 컴퓨터가 16인치 대포의 화재 통제 솔루션을 계산하는 모습에 감탄했음
          + 투어를 진행한 사람들은 정규 군사 은퇴 연령을 넘긴 사람들이었음
          + 기계식 컴퓨터에 대한 실질적인 지식이 해군에서 사라져 이들이 재활성화되었음
          + 매우 멋진 하루였음
     * 미국 해군의 옛 훈련 자료는 다양한 기술을 배우기에 훌륭함
          + ""Basic Hand Tools""는 모든 손 도구의 사용법을 설명한 평이한 영어로 쓰인 핸드북임
          + ""Basic Hand Tools""에서 망치에 대해 설명한 부분이 인상적임
          + 현대 버전인 ""Tools and Their Uses""는 기계 도구도 다루지만 덜 재미있음
     * David A. Mindell의 ""Between Human and Machine Feedback, Control, and Computing before Cybernetics""를 강력히 추천함
     * 이 영화는 Periscope films 소유라는 저작권 공지가 있음
          + 이 비디오가 실제로 미국 정부에 의해 제작되었다면 공공 도메인에 있어야 함
     * Dune 세계관에서 Butlerian Jihad에 대한 반응으로 더 나은 기계식 컴퓨터를 개발했을 것이라는 개인적인 해석이 있음
          + 특히 나노미터 수준으로 소형화된 기계식 컴퓨터를 개발했을 것임
          + 모든 것에 적용되지는 않지만 대부분의 객체를 나노미터 규모의 아날로그 컴퓨터로 매핑하는 데 충분히 잘 작동함
     * 훌륭한 비디오임
          + 간단하고 직설적인 프레젠테이션이 개념을 잘 설명함
          + 캠의 다양한 응용이 계속해서 인상적임
          + 기계식 컴퓨터의 기본은 1800년대, 어쩌면 그 이전까지 거슬러 올라감
          + 많은 부분이 시계 장치에 뿌리를 두고 있음
     * 관련 비디오:
          + ""Mechanical Computer – Basic Mechanisms in Fire Control Computers (1953)"" [video]
          + ""Basic Mechanisms In Fire Control Computers (1953)"" [video]
     * 차동 기어를 컴퓨팅 유닛으로 사용하는 부분이 특히 마음에 듦
          + (타임스탬프 링크)
     * 군사 훈련 영화나 뉴스릴에는 행진 리듬의 인트로 음악이 필수임
          + 이는 ""가만히 앉아 주의 깊게 듣고 집중하라""는 메시지를 전달함
          + 백파이프도 같은 역할을 함
          + 요즘은 백파이프로 시작하거나 끝나지 않으면 공식적이지 않다고 느껴짐
     * WW2 폭격기 총 시스템과 폭격 컴퓨터에 관한 비디오도 매우 재미있음
          + 특정 비디오를 찾기 귀찮지만 이 채널 전체가 A+임
          + (유튜브 링크)
"
"https://news.hada.io/topic?id=16356","텍사스 "Moth Man", 자신의 마당에서 550종 촬영","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    텍사스 ""Moth Man"", 자신의 마당에서 550종 촬영

    커티스 에커맨의 나방 탐사

     * 커티스 에커맨은 오스틴 남부의 바우얼 랜치 그린벨트에서 나방 탐사를 시작함
     * 에커맨은 오스틴 커뮤니티 칼리지 생물학과의 학과장으로, 나방을 유인하기 위해 나무에 흰 천을 감고 자외선 램프를 설치함
     * 다양한 식물들이 나방을 유인할 수 있어 좋은 징조임

    에커맨의 배경

     * 에커맨은 원래 파충류학자였지만, 곤충 수집과 사진 촬영에 관심을 가짐
     * 자신의 집에서 550종의 나방을 기록함

    나방의 다양성

     * 나방은 매우 다양하며, 텍사스 주에는 4,000종 이상의 나방이 기록됨
     * 가장 흔한 나방은 회색빛의 작은 나방인 녹투이드임
     * 실크 나방과 같은 종류는 입이 없고, 애벌레 시절에 저장한 지방으로 생존함

    iNaturalist 앱

     * 에커맨은 iNaturalist 앱을 통해 나방을 식별하고, 학생들에게도 사용법을 가르침
     * 이 앱은 사용자가 지역에서 발견한 식물과 동물을 사진으로 기록하고, 다른 사용자들과 정보를 공유할 수 있게 함

    학생들과의 현장 학습

     * 에커맨은 학생들과 함께 오스틴의 공원에서 나방 탐사를 진행함
     * 이러한 활동을 통해 학생들은 지역 생물 다양성에 대해 더 많이 알게 됨

    나방의 중요성

     * 나방은 중요한 꽃가루 매개자이며, 새와 박쥐의 주요 먹이임
     * 최근 몇 십 년간 나방을 포함한 곤충의 개체 수와 종 다양성이 감소하고 있음
     * 살충제 사용과 도시 개발이 주요 원인임

    나방 친화적인 환경 조성

     * 텍사스 주민들은 다양한 토착 식물을 심고, 빛 공해를 줄여 나방 친화적인 환경을 조성할 수 있음
     * 밤에 불을 끄는 것도 나방이 올바른 식물에 알을 낳는 데 도움이 됨

    GN⁺의 정리

     * 이 기사는 나방 탐사와 생물 다양성에 대한 중요성을 강조함
     * iNaturalist와 같은 앱을 통해 지역 생태계를 더 잘 이해할 수 있음
     * 나방을 포함한 곤충의 감소는 생태계 전체에 영향을 미칠 수 있음
     * 지역 생물 다양성에 대한 관심을 높이기 위한 교육과 활동이 필요함

    추천 프로젝트

     * iNaturalist와 같은 시민 과학 프로젝트
     * 지역 생태계 보전을 위한 교육 프로그램

        Hacker News 의견

     * 작은 지역에서도 다양한 곤충 종을 발견할 수 있음
          + ""Life on a Little Known Planet: A Biologist's View of Insects and Their World"" 책에서 저자는 매년 여름 곤충 덫을 설치해 새로운 종을 발견했음
          + 저자는 기생 말벌 연구의 권위자였지만, 매년 새로운 기생 말벌 종을 발견했음
          + 이는 인간이 오랫동안 탐사한 지역에서도 새로운 종을 발견할 수 있음을 의미함
     * 한 교수는 뉴욕시의 잔디밭에서 수백 종의 곤충을 기록했음
          + 텍사스의 다른 곤충 큐레이터는 평생 동안 인근 공원에서 1000종 이상의 딱정벌레를 수집했음
          + 이러한 전문 지식은 점점 사라지고 있음
          + 지구의 진화에서 나오는 유전적 실험의 답을 찾기 위해서는 이러한 전문 지식이 필요함
     * iNaturalist에서 19,715개의 관찰과 3,892종의 기록을 가진 놀라운 기여자가 있음
     * 나방은 외계 생물처럼 보이며 다양성이 큼
          + 개인적으로 좋아하는 나방은 hummingbird hawk-moth임
     * 작은 땅에서도 놀라운 다양성을 볼 수 있음
          + 매일 아침 버섯을 찾기 위해 마당을 돌아다녔음
          + 곤충과 벌레도 잠시 탐구했지만 버섯에 비해 너무 예민했음
     * ""moth man""은 미국 북동부의 도시 전설임
          + ""texas mothman""은 이 전설이 ""이주""하고 있다는 농담일 수 있음
     * iNaturalist에서 특정 지역을 모니터링하는 사람들이 많음
          + 예: 정원 프로젝트, 박물관 부지 및 정원 프로젝트
     * 나방은 아름다울 뿐만 아니라 중요한 수분 매개자이자 새와 박쥐의 주요 먹이임
          + 최근 몇십 년 동안 곤충 수와 종 다양성이 30% 감소했음
          + 주요 원인은 살충제와 도시 개발로 인한 서식지 손실임
          + 곤충의 감소는 그들이 수분하는 식물과 먹이 사슬 위의 모든 생물에게 위협이 됨
          + 원주민 초원 식물을 심어 다양한 곤충을 유치했음
     * 550종의 곤충이 그의 마당을 방문한 것이 인상적임
     * Michigan에서 Ailanthus Webworm 나방을 봤고, 남부 원산지지만 북쪽으로 이동 중임
          + 이는 침입성 식물인 Tree of Heaven의 확산 때문임
          + 원주민 식물 정원을 가꾸면서 곤충에 대한 큰 감사를 느끼게 됨
          + 주의를 기울이면 자신의 마당에서도 놀라운 것을 발견할 수 있음
"
"https://news.hada.io/topic?id=16386","구글에서의 9년에 대한 Postmortem","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글에서의 9년에 대한 Postmortem

     * 전직 SRE로서 '포스트모템' 형식으로 회고를 작성하는 것이 재미있을 것이라고 생각해서 정리
     * 22살에 런던에서 인턴십을 한 후 더블린에서 정규직으로 입사함
     * Bigtable, Persistent Disk 및 GCE VM(가상 머신) 등 세 가지 제품과 관련된 여러 팀에서 근무함

  구글 입사 시 기대했던 점

     * 정교하고 흥미로운 기술과 엔지니어 수준에 매력을 느낌
     * 구글에는 세계 최고의 기술이 있었고, 이를 배울 수 있는 기회가 주어짐
     * 보수, 복리후생, 재미있는 국제적 커뮤니티 등이 매력적이었음
     * 장기적으로 자신의 회사를 차리고 싶었지만 구글에서의 경험이 도움이 될 것이라고 생각함

  실제 경험은 어땠나?

     * 전반적으로 놀라웠음. 좋은 점과 나쁜 점이 모두 있었음
     * 상호 유익한 교환이었음. 에너지와 인지적 자원을 쏟았고, 그 대가로 많은 것을 얻었음
          + 엄청난 돈
          + 엔지니어링 기술, 로우레벨 및 하이레벨, 뛰어난 시스템 이해도, 위기 처리 및 디버깅에 대한 세계적 수준의 기술
          + 리더십 및 관리 기술
          + 멋진 회사의 일원이 된다는 만족감
          + 오프사이트 및 출장
          + 라이프스타일 혜택 : 사무실 내 수영장, 세계적 수준의 체육관, 모든 종류의 스포츠 수업, 주간 마사지, 맛있고 건강한 식사, 사내 건강 관리 등
          + 훌륭한 커뮤니티와 관계들
     * 어느 순간 매력이 떨어짐. 몇 가지 요인이 있었음:
          + 재정 목표 달성/초과
          + 구글 기술에 대한 매력이 약해짐: 업계에서 살짝 따라잡힘
          + 실제 업무의 현실은 그렇게 놀랍지 않음
          + 내 관심사의 변화/이동
          + 내 회사를 창업하고 싶은 욕구 (그래, 기다릴 수는 있지만 수십 년은 아니야!)
          + 회사가 덜 재미있어짐
          + 예산 삭감 (출장 감소, 더 이상 오프사이트에 신경 쓰지 않음)
          + 정리해고
          + 저렴한 지역으로 공격적으로 인력을 이동 - 현지에서 조직을 성장시킬 기회 감소
          + 보안/규제와 관련된 많은 오버헤드
          + 복잡한 시스템과 팀 간의 관계로 인한 많은 어려운 엔지니어링 문제로 인해 속도가 느려짐
          + 인지 부하 - 이전 직책에서는 덜한 문제였지만 그 이전 직책에서는 큰 문제음. 구글 기술은 복잡하고 미묘한 차이가 많기 때문에 업계에서 고용한 직원이 완전히 적응하는 데 1년이 걸리는 것이 일반적인데, 이는 정말 말도 안 되는 일임
          + 개인 성장을 위한 기회가 불분명함
          + 극적인 변화는 없었고, 그저 똑같은 풍경이 더 많이 보였을 뿐(이 또한 가치가 있지만, 나는 coasting을 원하지 않았을 뿐)
          + 커리어 측면에서 볼 때 L6 IC는 매우 드묾 - 이미 엔지니어링에서 최고 직급이고, L7은 개인 트랙에서 엔지니어링보다 정치적 역할에 더 가깝기 때문에 L7에 관심이 없었고, 관리 트랙에서는 헤드카운트가 보이지 않았음. 관리자 중 관리자가 되어 내 밑에서 큰 조직을 운영 할 기회가 있다면 더 오래 머물렀을 것
          + 기술 작업의 형태가 내 관심사와 맞지 않음

  배운 교훈

     * 9년간의 배움을 몇 가지 요점으로 압축하기는 어려움
     * 테크니컬 스킬을 배웠고, 소프트 스킬을 배웠고, 더 현명하고 더 나은 사람, 리더가 되었음
     * 그리고 (다소) 불안한 과잉 성취자라는 정신으로, 나는 그 과정에서 더 잘할 수 있다고 끊임없이 느꼈고, 항상 노력하고 배우도록 동기 부여를 받았음

    잘된 점

     * 빠르게 승진함
     * 높이 평가받고 보상도 잘 받는 L6 레벨에 도달함
     * 항상 많은 자율성을 가졌음
     * 항상 일과 삶의 균형을 위해 주장할 수 있었음(합리적인 근무 시간과 업무량)
     * 영감을 주고 동기부여가 되며 똑똑한 동료들
     * 상상할 수 없을 정도로 많은 돈을 벌었음
     * 건강한 생활 방식을 가능하게 한 많은 특권을 이용함
     * 출장과 오프사이트 등 재미있는 여행을 많이 다녀옴
     * 엔지니어와 리더로 성장함
     * 소프트 스킬을 엄청나게 향상시킴
     * 많은 직장 친구를 사귀었음
     * 멋진 기술에 대해 많이 배웠음
     * 처음부터 자신만의 팀을 만들 기회가 있었음
     * 근무 시간의 60% 또는 80%만 일하는 것이 생활 방식과 직장 외 관계 구축에 환상적이었음
     * (만성) 스트레스에 대처하기 위한 많은 도구를 배웠음

    잘 안된 점

     * SRE로 너무 오래 있었음 - 더블린에는 선택의 여지가 많지 않았고 다른 사이트로 이동하지 않았음(관성, 개인적 이유 등)
     * 온콜 때문에 스트레스를 받고 수면이 방해받음
     * 낙관적이고 창의적인 나의 성격에 가장 적합하지 않음 - 이는 불일치감으로 이어졌고, 업무 유형과 프로젝트 면에서 어느 정도 불만족스러웠음. 업무 외 시간에 사이드 프로젝트로 보상받음
     * 조직의 24/7 특성으로 인해 연결을 끊기 어려웠음
     * 미국 중심 문화. 구글에서 미국에 있지 않고 해당 지역에서 큰 존재감이 없다면 상류를 거슬러 가는 것과 같음. 고립되거나 소외되기 쉽고, 반대로 늦은 회의로 압도되기 쉬움
     * 약속된 HC가 실현되지 않음 - 예를 들어 두 번이나 추가 확장을 약속받았지만 나중에 취소되었다가 약간 다른 형태로 다시 약속됨
     * 고위 관리자들이 압도되어 지원/피드백을 제공하지 않거나 거의 감독하지 않음(야만적인 느낌이 들 때가 있었음)
     * 회의/반복 작업/자원이 부족한 팀으로 압도된 것 같은 시기가 많았지만, 동시에 좋은 엔지니어링/관리 성장 기회가 없었음
     * 구글의 인지 부하가 매우 높음 - 염두에 두면 좋은 수많은 시스템과 기술이 있으며 이는 어떤 식으로든 시스템에 영향을 미칠 수 있음(이는 특히 SRE에서 심각함)

    운이 좋았던 점

     * 구글 주식이 매우 잘 되었고, 빠른 경력 상승과 함께 나도 매우 잘 했음 🙂
     * 내가 고용한 사람들이 정말 훌륭한 것으로 판명됨
     * 어떻게든 일을 해냈음 - 일부 일들은 확실히 무리한 기회였지만 높은 성과자라는 이력을 쌓아감
     * 좋은 재정적 결정을 내렸음. 더 운이 좋을 수도 있었지만 그 결정에는 좋은 사고 과정이 있었음
     * 놀라운 인맥을 만들었음

    지금과 달라지게 할 수 있었던 것들

     * 처음부터 내가 원하는 것이 아니라는 것을 알았기 때문에 SRE에서 더 일찍 나왔어야 함
     * 다른 사이트로 이동했어야 함 - 이미 좋은 것에 매달리기 쉽고 전환에도 비용이 듦. 하지만 역사적으로 탐험을 과소평가했음
     * 교육비 환급을 더 많이 활용했어야 함(예: 스탠포드 온라인 강좌를 더 많이 수강)

  향후 계획

     * 일반적인 사후 분석에서는 분류된 실행 항목 테이블을 제시하겠지만, 여기서 누군가를 동원하려는 것은 아님
     * 다음으로 할 일은 적어도 6개월 동안 탐색, 휴식, 새로운 것을 배우고 앞으로 무엇을 할 수 있을지에 대한 생각을 넓히는 안식년을 갖는 것임
     * 나는 탐험을 덜 하는 경향이 있고 명확한 목표를 가지고 생산적으로 일하는 것을 좋아하므로, 안식년은 심리적인 도전임
"
"https://news.hada.io/topic?id=16384","인터넷의 모든 PDF 분류하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            인터넷의 모든 PDF 분류하기

     * SafeDocs 전체를 LLMs, 임베딩 모델, XGBoost, 그리고 Linear Regressors를 사용하여 분류함.
     * 분류 과정에서 다양한 실험과 성능 비교를 진행하고, 여러 모델의 성능을 평가함.

  소개

     * Common Crawl(CC)은 인터넷을 아카이빙하는 웹 아카이브로, 과학자와 연구자를 위해 인터넷을 보존하는 데 중점을 둠.
     * CC는 PDF 파일을 전체 저장하지 않고 처음 1MB만 저장하는데, SafeDocs는 이러한 CC에서 PDF 파일을 다시 가져와 원본 PDF를 보존함.
     * SafeDocs 데이터셋은 약 840만 개의 PDF 파일로 구성되어 있으며, 압축 해제 시 8TB에 달함.
     * 이러한 PDF들을 분류하는 시도를 했음.

  데이터셋 생성

     * PDF 파일을 다양한 라벨로 분류하는 과정을 설명.
     * FineWeb 기술 블로그에서 영감을 받아 교육 콘텐츠의 하위 집합을 생성하고, LLM을 사용하여 라벨을 생성한 후 이를 학습할 수 있는 소형 모델을 훈련함.
     * 100k개의 라벨을 생성하고, 불균형한 라벨을 조정하여 59k개의 라벨로 재구성.

  모델 학습

    아이디어 1: 임베딩 모델

     * 임베딩 모델을 사용하여 텍스트, 이미지, 비디오 등의 데이터를 n차원 공간의 벡터로 변환.
     * Finetuning을 통해 분류 성능을 높임.
     * 여러 모델을 테스트한 결과, Alibaba-large-gte-1.5 모델이 가장 성능이 좋았으며, 정확도 59.14%를 기록.

    아이디어 2: XGBoost

     * XGBoost는 테이블 데이터의 최고 성능을 자랑하는 모델로, 간단한 이진 분류기를 여러 개 학습시켜 분류 문제를 해결함.
     * 이 방법으로 정확도 83.97%를 달성.

    아이디어 3: TFIDF

     * TFIDF는 텍스트의 특정 단어가 문서 내에서 얼마나 중요한지 계산하는 방법으로, 기본적인 NLP 기법을 사용해 모델을 학습.
     * 정확도 67.52%를 기록.

    아이디어 4: 딥러닝으로 복귀

     * 딥러닝 분류기를 사용하여 최소 70% 정확도를 목표로 함.
     * 더 많은 라벨을 생성하고, gte-large 모델로 실험한 결과, 정확도 69.22%를 달성.

  실험 결과

     * 최종적으로 XGBoost 임베딩 모델이 가장 높은 정확도 85.26%를 기록.
     * 다양한 모델의 성능을 비교한 결과, XGBoost가 가장 우수한 성능을 보였음.

  전체 코퍼스 분류

     * 생성된 모델을 사용해 전체 PDF 데이터를 분류하고, 그 결과를 시각화함.
     * PCA와 UMAP을 사용해 분류 결과를 시각적으로 표현함.

  결론

     * 딥러닝 모델의 성능이 기대에 미치지 못했지만, 전반적으로 유의미한 성과를 달성.
     * PDF와 같은 복합 데이터를 사용하는 대규모 데이터셋이 점점 더 많이 등장할 것으로 예상.
     * 데이터셋과 코드를 공개하여 더 나은 결과를 얻을 수 있는 기회를 제공.

GN⁺의 의견

     * 이 프로젝트는 대규모 데이터셋의 분류 문제에서 다양한 접근 방식을 실험한 좋은 사례임.
     * XGBoost와 같은 전통적인 머신러닝 기법이 여전히 매우 효과적일 수 있음을 보여줌.
     * 딥러닝 모델의 성능을 높이기 위해 더 많은 데이터와 GPU 리소스가 필요했을 가능성이 있음.
     * PDF와 같은 복합 데이터의 처리 방법에 대한 더 많은 연구와 실험이 필요함.
     * 이 프로젝트는 연구와 개발에 관심이 있는 사람들에게 매우 유용한 참고 자료가 될 수 있음.
"
"https://news.hada.io/topic?id=16278","HN 공개: 70세 할머니가 코딩을 배우고 만든 단어 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 공개: 70세 할머니가 코딩을 배우고 만든 단어 게임

     * 👵🏼Grandma's Word

GN⁺의 정리

     * 이 기사는 할머니의 지혜와 조언을 다루고 있음
     * 독자들에게 따뜻하고 유익한 조언을 제공하며, 삶의 다양한 측면에서 도움이 될 수 있음
     * 비슷한 기능을 가진 프로젝트로는 ""Life Lessons from the Old""와 같은 책이나 블로그가 있음

        Hacker News 의견

     * Python을 사용하여 이진 검색 솔루션을 구현한 경험 공유
     * 17번의 추측 끝에 해결책을 찾음
     * Grandma's Word 게임을 수동 및 프로그래밍 방식으로 즐겼음
     * 3번의 추측으로 Grandma's Word를 찾음
     * 정렬 버그가 있으며, ""vol""이 ""volatile"" 뒤에 정렬되는 문제 발생
     * 새로운 창에서는 재현되지 않음
     * 도메인 이름을 Grandma Sword로 잘못 읽었음
     * ""70세 할머니가 JavaScript를 배우고 있다""는 프롬프트가 재미있음
     * 코드가 단순하지만 재미있고, 초보자의 코드임에도 게임을 저장하는 기능이 인상적임
     * 12번의 추측으로 단어를 찾았으며, 프론트엔드 경험이 부족해 직접 만들지는 못했음
     * 4번의 추측으로 운 좋게 단어를 찾았음
     * 12번의 추측으로 단어를 찾은 사람에게 축하 메시지
     * 기능 요청: 정답과의 거리로 잘못된 추측을 색상으로 구분하는 기능 추가 제안
     * 'Hamming distance'를 참고할 것을 권장
"
"https://news.hada.io/topic?id=16343","좋은 프로그래머들의 데이터 구조 및 관계에 대한 우려","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     좋은 프로그래머들의 데이터 구조 및 관계에 대한 우려

    좋은 프로그래머는 데이터 구조와 그 관계를 걱정함

      Git와 Linux의 창시자 Linus Torvalds의 지혜

     * 최근 Linus Torvalds의 인용문을 접했음
          + ""나쁜 프로그래머는 코드에 대해 걱정함. 좋은 프로그래머는 데이터 구조와 그 관계에 대해 걱정함.""
          + Linus는 Git의 성공 이유 중 하나로 안정적이고 잘 문서화된 데이터 구조를 꼽음
          + 좋은 데이터 구조는 코드 설계와 유지보수를 쉽게 만듦
     * 데이터 모델을 사후에 고려하면 더 많은 작업이 필요해짐
          + 잘 설계된 데이터 모델은 마이그레이션과 복잡한 시스템 구축을 용이하게 함
     * 과거 프로젝트에서 데이터 구조를 재구성하여 문제를 해결한 경험
          + 500줄의 함수를 50줄로 줄이고, 더 빠르고 이해하기 쉬운 코드로 대체함

      Unix 프로그래밍의 예술에서의 관련 인용문

     * ""지식은 데이터에 접어 넣어 프로그램 로직이 단순하고 견고하게 만듦""
          + 복잡한 데이터 구조는 모델링하고 이해하기 쉬움
          + 데이터 구조의 복잡성을 코드의 복잡성보다 우선시해야 함
     * 데이터 구조를 먼저 생각하는 것이 중요함
          + 인터페이스나 데이터베이스에 더 엄격한 타입을 적용하여 코드 복잡성을 줄임
          + 데이터 흐름과 컴포넌트 간의 상호작용을 먼저 고려해야 함
     * FAANG의 시니어 엔지니어(L5) 요구사항
          + 복잡한 시스템에 대한 고수준 설계 문서를 작성하는 것이 포함됨

      관련 기사

     * Ryan Peterman의 FAANG 커리어 사다리 비교
          + 중급(L4)과 시니어(L5) 엔지니어의 차이점 설명
     * Jordan Cutler의 주니어에서 시니어 엔지니어로 빠르게 성장하는 방법
          + Gusto에서 L1(주니어 엔지니어)에서 L3(시니어 엔지니어)로 2년 만에 승진한 경험 공유

    GN⁺의 정리

     * 이 기사는 좋은 프로그래머가 데이터 구조와 그 관계를 중요하게 여겨야 한다는 점을 강조함
     * Linus Torvalds의 인용문과 Unix 프로그래밍의 예술에서의 인용문을 통해 데이터 구조의 중요성을 설명함
     * FAANG 시니어 엔지니어의 요구사항과 관련된 기사들을 통해 고수준 설계 문서 작성의 중요성을 언급함
     * 데이터 구조를 먼저 고려하는 것이 코드 복잡성을 줄이고 유지보수를 쉽게 만듦
"
"https://news.hada.io/topic?id=16364","HN 질문: Stripe, Block, PayPal, Visa/MC에 수십억 달러 수수료를 지불해야 하는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 질문: Stripe, Block, PayPal, Visa/MC에 수십억 달러 수수료를 지불해야 하는가?

     * 이 회사들은 총 두 자릿수 억 달러의 이익을 보고 있음
     * 이러한 이익은 비효율성과 실질적인 경쟁 부족에서 비롯된 것인지 의문
     * 이러한 상황이 완전히 필요한 것인지에 대한 논의
     * 충분한 자금 지원으로 10년 내에 이들을 경쟁할 수 있을지에 대한 질문

GN⁺의 정리

     * 이 기사는 대기업의 막대한 이익이 비효율성과 경쟁 부족에서 비롯된 것인지에 대한 의문을 제기함
     * 독점적인 시장 구조가 소비자에게 미치는 영향을 고려할 필요가 있음
     * 충분한 자금이 있다면 새로운 경쟁자가 등장할 가능성에 대해 논의함
     * 비슷한 기능을 가진 산업 내 다른 제품이나 프로젝트로는 Amazon, Google, Microsoft 등이 있음

        Hacker News 의견

     * Stripe, Block, PayPal은 각각 큰 문제를 해결한 기업임
          + PayPal은 신용카드 번호를 제공하지 않고 결제할 수 있는 방법을 제공함
          + Square는 초기 비용 없이 휴대폰으로 결제를 쉽게 받을 수 있게 함
          + Stripe는 온라인 결제를 쉽게 받을 수 있게 함
          + 이들 기업은 사기 방지와 위험 관리에 중요한 역할을 함
     * 인터넷 초기에 결제가 이메일처럼 쉬웠다면 인터넷의 모습이 많이 달라졌을 것임
          + 제3자 없이 결제를 받는 것이 어려워 광고와 독점에 기반한 인터넷이 됨
          + 개인 웹사이트에서 수익을 창출하기 어려워 다른 사이트에 게시하거나 광고를 통해 수익을 창출해야 함
     * Libra(나중에 Diem으로 이름 변경)에 기대를 걸었음
          + Meta의 수수료 없는 디지털 화폐였으나 중단됨
          + 수수료 없이 거래할 수 있는 인프라가 필요함
     * 전 세계에는 다양한 결제 방법이 존재함
          + 네덜란드의 iDEAL, 태국의 QR 코드, 호주의 BPAY, 중국의 WeChat Pay 등이 있음
          + 상인들이 다양한 결제 방법을 통합하는 것은 비용이 많이 들기 때문에 이러한 기업들이 도움을 줌
     * 결제 처리 회사나 대형 소매업체에서 일하지 않으면 얼마나 많은 사기 시도가 있는지 모를 것임
          + 소규모 소매업체도 국제 배송을 하면 사기를 경험할 수 있음
     * 수수료와 기본 위험 없이 은행 계좌에서 돈을 인출할 수 있는 방법을 찾으면 저수수료 결제 제공자가 될 수 있음
          + 상인과 고객을 확보하는 것이 문제임
          + 이 주제에 관심이 많음
     * 대부분의 수수료는 은행으로 가며, PayPal은 예외임
          + 상인으로서 PayPal을 싫어하지만 소비자들이 익숙해져 있어 받아들여야 함
          + 사기는 카드 회사가 처리하며 상인 프로세서는 거의 예방 방법이 없음
     * 폴란드에는 BLIK라는 은행 간 결제 시스템이 있음
          + 온라인 결제 시 은행 앱을 열고 ""BLIK로 결제""를 선택한 후 임시 6자리 코드를 복사하여 온라인 상점에 붙여넣음
          + 휴대폰에서 거래를 확인해야 함
          + 신용/직불 카드보다 훨씬 쉬움
     * 결제 서비스를 대체할 수 있는 조직 유형이 필요함
          + 신용 조합이 은행에 대한 대안인 것처럼, 결제 서비스에 대한 대안이 필요함
     * 원래 인터넷이 해결하려 했던 문제였음
          + 이들 기업이 해결하는 문제는 단순한 거래 네트워크가 아니라 사기, 거버넌스, 통화 변환 등을 포함함
"
"https://news.hada.io/topic?id=16365","그냥 Postgres 쓰세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            그냥 Postgres 쓰세요

     * 대부분의 웹 애플리케이션은 지속적인 데이터 저장이 필요하므로, 새로운 애플리케이션을 만들 때 기본적으로 Postgres를 선택하는 것이 좋음

왜 sqlite가 아닌가?

     * sqlite는 좋은 DB지만, 데이터가 하나의 파일에 저장됨
     * 이는 애플리케이션이 한 대의 기기에서만 실행된다는 것을 의미함
     * 데스크탑 또는 모바일 앱에는 적합하지만, 웹사이트에는 적합하지 않을 수 있음
          + 웹사이트에 sqlite를 사용한 성공 사례가 있지만, 대개 자체 서버와 인프라를 직접 구축한 경우임
     * 플랫폼 제공 자동 데이터베이스 백업 및 여러 애플리케이션 서버를 구성하는 기능을 포기해야 할 수도 있음

왜 DynamoDB, Cassandra, 또는 MongoDB가 아닌가?

     * 이 데이터베이스들은 뛰어난 성능을 발휘하지만, 전제 조건이 많음:
          + 애플리케이션이 수행해야 할 작업과 접근 패턴을 정확히 알고 있어야 함
          + 매우 큰 데이터 규모로 확장할 필요가 있는 경우
          + 일관성의 일부를 포기할 수 있는 경우
     * 이 데이터베이스들은 분산 해시 맵과 유사한 방식으로 작동하므로, 데이터 저장 방식에 쿼리 패턴 지식을 반영해야 함
     * 접근(쿼리) 패턴이 바뀌면 데이터 전체를 다시 처리해야 할 수도 있음
     * 관계형 데이터베이스는 쉽게 인덱스를 추가하여 쿼리를 수행할 수 있지만, NoSQL 데이터베이스는 그러기 어려움
     * 분석 쿼리에는 부적합함
     * 대학생이나 신입 개발자가 MongoDB를 사용한다면 도움이 필요할 것임

왜 Valkey가 아닌가?

     * Redis로 알려진 이 데이터베이스는 매우 효율적인 캐시로 잘 알려져 있음
     * 주 데이터베이스로 사용할 수 있지만 다음과 같은 문제가 있음:
          + 모든 데이터를 RAM에 저장하므로 빠르지만, RAM 용량이 제한적임
          + 데이터 모델링에 있어 타협이 필요함

왜 Datomic이 아닌가?

     * 이걸 이미 알고 계시다면 ""금색 별""을 드리겠음
     * Datomic은 관계형 NoSQL 데이터베이스로 ""사전 설계(Up-front Design)"" 문제가 없고, 몇가지 깔끔한 속성을 가지고 있음
          + 데이터를 테이블 대신 EAVT(entity-attribute-value-time) 쌍으로 저장하고, 범용 인덱스를 사용함
          + 쿼리를 작성할 때 작성자와 조율할 필요가 없음. 주어진 시간에 '현재 시점'의 데이터베이스를 쿼리하면 됨. 새 데이터, 심지어 삭제(또는 '철회/retractions'라고도 함)도 실제로 이전 데이터를 삭제하지는 않음
     * 하지만 몇 가지 단점이 있음:
          + JVM 언어에서만 작동함
          + Clojure 외의 언어에서는 API가 좋지 않음
          + 잘못된 구조의 쿼리로 인해 발생하는 에러 메시지가 매우 불친절함
          + SQL 도구 생태계 같은 것이 없어서 도구가 부족함

왜 XTDB가 아닌가?

     * Clojure 사용자들은 많은 데이터베이스를 만듦
     * Datomic과 비슷하지만 다음과 같은 특징이 있음:
          + HTTP API를 제공하여 JVM에 종속되지 않음
          + ""시스템 시간""과 ""유효 시간""의 두 축으로 쿼리 가능함
          + SQL API를 지원함
     * 하지만 가장 큰 문제는, 아직 ""신생""임. SQL API는 작년에 나왔고, 최근에 전체 스토리지 모델을 변경했음
          + 10년 후에도 살아남을수 있을까? 장기적인 지원 여부가 불확실함

왜 Kafka가 아닌가?

     * Kafka는 아주 좋은 ""추가 전용(Append-Only)"" Log로, TB 단위 데이터 처리에 적합함
     * 여러 팀에서 관리하는 여러 서비스에서 유입되는 데이터로 이벤트 소싱 유형의 작업을 수행하려는 경우 놀랍도록 잘 작동gka
     * 그러나
          + 작은 규모에서는 Postgres의 테이블로 충분히 대체 가능함
          + Kafka 컨슈머를 만드는 것은 생각보다 오류가 발생하기 쉬움. 결국 로그에서 자신의 위치를 추적해야 하기 때문
          + 추가적인 인프라를 관리해야 함

왜 ElasticSearch가 아닌가?

     * 데이터 검색이 제품의 주요 기능이라면 ElasticSearch는 적합한 제품임
          + 데이터를 ETL하고 전체 프로세스를 관리해야 하지만 ElasticSearch는 검색을 위해 만들어졌고, 검색을 잘 수행함
     * 하지만 검색이 주된 기능이 아닌 경우 Postgres의 내장 텍스트 검색 기능으로도 충분함
          + 나중에 전용 검색 엔진을 추가할 수 있음

왜 MSSQL 또는 Oracle DB가 아닌가?

     * 스스로에게 물어봐야 할 진짜 질문: ""가격 대비 가치가 있나요?""
     * 라이선스 비용뿐만 아니라 락인 비용도 고려해야 함
     * 오라클에 데이터를 저장하면 영구히 Oracle에 비용을 지불하고, 개발자를 계속 교육시켜야 함
          + 엔터프라이즈 기능과 지갑중에서 하나를 영원히 선택해야 함
     * 특정 기능이 반드시 필요한 경우가 아니라면 사용을 피하는 것이 좋음
          + MSSQL 없이는 살 수 없는 킬러 기능이 있지 않는한 사용하지 말 것

왜 MySQL이 아닌가?

     * 이 부분은 약간 독자의 도움이 필요함
     * MySQL은 Oracle이 소유하고 있으며, 일부 기능은 엔터프라이즈 에디션에 잠겨 있음
          + 물론, MySQL은 오랫동안 사용되어 왔으며, 널리 사용되는 무료 에디션이 있음
     * 나는 Postgres가 더 나은 선택이라고 믿고 있지만, MySQL에 대한 추가적인 정보가 필요함

왜 AI 벡터 DB가 아닌가?

     * 대부분의 AI 벡터 DB는 신생 기술로, 사용에 리스크가 있음
          + AI 버블에 기반한 비즈니스는 신중히 접근해야 함
     * 당신의 비즈니스가 또다른 AI grift(사기)일지라도, 그냥 import openai정도면 될 것

왜 Google Sheets가 아닌가?

     * 특별한 단점이 없음 필요하다면 사용해도 됨

   Firestore...

   이렇게 단언하는 아티클들은 대체로 주니어들이 하는 실수인데..

   대신귀
   여운C
   SV를
   드리겠
   습니다

   zzz

   좋은 정보를 얻기 위해서는 어그로를 끌어라… 라는 우스개가 왠지 떠오르네요 ㅎㅎ
   어쨌거나 대부분의 백엔드 개발자들이 제일 처음 쓰게 되는건 postgresql 이다보니…

   나는 Postgres가 더 나은 선택이라고 믿고 있지만, MySQL에 대한 추가적인 정보가 필요함

   ㅋㅋㅋ;;;;

   이정도면 해커뉴스 공식 장작이네요

   Mysql 엔터프라이즈 진짜 문제는 라이선스가 아니라 유료 구입자도 장애 터질 시 지원이 정말 ㅈ같다는 거에요.
   이전에 mysql 인넥스가 깨져서 구동 안되는걸 지원 요청해도 오라클에서 지원 티켓 끓어서 요청하면 전화지원 해주겠다가 다였고.
   결국 고객사에서 안되겠다 해서 우리가 해결해야 했던지라.
   오라클 믿고 엔터프라이즈 쓰기보다 무료가 최고..

   왜 mariadb, impala,hive,kudu가 아닌가

   Mysql 엔터프라이즈 기능은 자체 커넥션 풀 처럼 굳이 필요하지 않은 기능이고..
   진짜 엔터프라이즈면 이걸 쓰느니 앞단에 sql proxy 설치하는게 부하분산에 더 효과적이에요.
   Pgsql 좋아하지만.. mysql은 알아보지도 않고 아몰랑 시전이라니.. ㅋㅋㅋ

   그냥 MySQL 쓰세요…
     * 왜 Postresql이 아닌가? 이 부분은 약간의 도움이 필요합니다.

   MariaDB 는??

   매우 큰 논쟁거리가 될만한 포스팅이네요...

   Sqlite를 쓰는 이유는 단순하면서도, 왠만한 규모에선 그냥 잘 작동한다는 건데,
   그냥 sqlite로 먼저 구현해두고 나중에 필요하면 postgres로 가도 별 어려움 없을텐데요.

        Hacker News 의견

     * MongoDB에 대한 부정적인 의견이 많지만, 대부분 틀린 정보임
          + MongoDB는 초기 단계에서 잘 맞음
          + 데이터 크기가 커질 때도 문제없이 작동함
          + 일관성 문제도 잘 해결됨
          + MongoDB는 Dynamo와 같은 분산 해시 맵이 아님
          + MongoDB의 집계 기능을 잘 모르는 사람들이 많음
          + 신입 개발자가 SQL을 배워야 한다는 이유로 MongoDB를 사용하지 말라는 것은 부당함
     * SQLite의 장점
          + 파일 기반이라서 백업이 쉬움
          + ORM을 사용하면 SQLite에서 Postgres로 쉽게 업그레이드 가능함
     * 기술적 결함을 지적하는 것은 의미가 없음
          + MongoDB의 Rick Houlihan이 현재 MongoDB에서 일하고 있음
     * MySQL에서 Postgres로의 마이그레이션 이유
          + Oracle 소유의 MySQL은 비즈니스 리스크가 있음
          + Postgres는 데이터 일관성을 유지하는 도구가 더 많음
          + Postgres의 확장 기능이 개발 시간을 절약해줌
          + Postgres의 도구 생태계가 더 성숙하고 완전함
     * Postgres의 시간 테이블 지원이 부족함
          + SQL:2011 시스템 시간 및 애플리케이션 시간 ""이중 시간"" 버전 관리가 필요함
          + 복잡한 보고 요구사항이 있는 규제 산업에서는 시간 테이블이 이상적임
     * SQLite를 사용하는 이유를 이해하지 못함
          + Postgres 설치가 어렵지 않음
          + SQLite와 Postgres의 차이점에 대한 설명 필요함
     * Rick Houlihan의 이름을 잘못 언급한 것에 대한 사과
          + DynamoDB/Cassandra와 MongoDB 비교는 그의 강연에서 나온 것임
          + MongoDB는 비정규화된 정보를 저장하는 데이터베이스로, 접근 패턴 변경에 유연하지 않음
     * 아는 것을 사용하고 유용한 것을 배포하는 것이 중요함
     * MySQL은 Javascript와 같음
          + 나쁜 결정과 위험 요소가 많음
          + 잘 작동하지만, Postgres가 존재하는데 굳이 사용할 이유가 없음

   Postgres는 데이터 일관성을 유지하는 도구가 더 많음
   => 혹시 예시가 있을까요?

   Postgres 대비 SQLite의 한 가지 단점은 schema 를 지원하지 않는다는 것이더라구요. 테이블이 수십 개 이상으로 많아지면 schema 단위로 테이블을 구분 설계하는 것이 깔끔한데, SQLite가 그게 안되다 보니 테이블명에 모든 구분을 다 넣어야 해서요.

   잊을만 하면 나오는 Postgres 예찬글. 이젠 그냥 즐기세요!

   그냥 Postgres를 모든 곳에 사용하세요
   PostgreSQL로 충분하다
   Postgres는 언제부터 멋있어졌을까
"
"https://news.hada.io/topic?id=16315","지역 신문사를 급습한 전직 캔자스 경찰서장 형사 기소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     지역 신문사를 급습한 전직 캔자스 경찰서장 형사 기소

    전직 캔자스 경찰서장, 지역 신문사 급습으로 형사 기소

     * 기디언 코디(Gideon Cody) 전 마리온 경찰서장이 작년 주간 신문사 급습을 주도한 혐의로 형사 기소됨
     * 코디는 급습 당일 또는 그 이후 6일 이내에 증인이 정보를 숨기도록 설득한 혐의를 받고 있음
     * 이 사건은 언론 자유에 대한 전국적인 논쟁을 촉발시켰으며, 신문사 발행인 에릭 메이어(Eric Meyer)의 어머니가 급습 다음 날 심장마비로 사망함

    급습의 배경과 논란

     * 코디는 급습의 이유로 신문사와 기자가 신원 도용 또는 컴퓨터 범죄를 저질렀다고 주장함
     * 그러나 특별 검사들의 보고서에 따르면, 신문사와 기자는 범죄를 저지르지 않았으며, 코디의 조사는 부실했음
     * 코디는 급습 후 지역 사업주에게 문자 메시지를 삭제하도록 요청한 것으로 알려짐

    코디의 법적 대응

     * 코디는 현재 연방 소송과 형사 사건에서 각각 다른 변호사로부터 법적 대리인을 받고 있음
     * 에릭 메이어는 코디가 급습의 희생양으로 지목되고 있으며, 사건이 결국 형량 협상으로 해결될 것이라고 예상함

    GN⁺의 정리

     * 이 기사는 언론 자유와 경찰 권력 남용에 대한 중요한 논쟁을 다루고 있음
     * 코디의 부실한 조사와 급습이 지역 사회와 언론에 미친 영향을 이해하는 데 도움이 됨
     * 유사한 기능을 가진 프로젝트로는 언론 자유를 보호하는 여러 비영리 단체들이 있음

        Hacker News 의견

     * 법률 관련자들이 모두 감옥에 가야 한다는 의견이 있음
     * Sedgwick 카운티 출신임을 밝히며, 경찰의 기자 탄압에 대한 추가 기소를 희망함
     * 기소가 이루어진 것에 놀라움을 표하며, 면책특권 논쟁을 기대함
     * 사법 시스템이 권위자들을 기소하지 않도록 조작되어 있다는 의견이 있음
          + 많은 관할구역에서 중범죄 기소는 대배심의 승인을 필요로 함
          + 검사가 약한 사건을 의도적으로 제기하여 대배심이 기소를 거부하게 할 수 있음
          + 검사는 경찰의 증언에 의존하기 때문에 경찰을 기소하면 불이익을 받을 수 있음
          + 판사들이 기소 편향을 가지거나 기소 측을 위해 일할 수 있음
               o 많은 판사들이 전직 검사임
               o 일부 주에서는 판사들이 정치인처럼 선거를 통해 임명됨
          + 최근 사례로는 조지아의 YSL 재판, 매사추세츠의 Karen Reed 재판, Alec Baldwin의 Rust 촬영장 사망 사건이 있음
               o YSL 재판에서는 판사가 증인을 협박하여 기소 측에 유리한 증언을 하게 함
               o Karen Reed 재판에서는 검찰과 판사의 잘못이 많았음
               o Alec Baldwin 재판에서는 검찰이 변호인에게 유리한 증거를 숨김
          + Derek Chauvin 사건처럼 경찰이 기소된 사례도 있지만 이는 예외적임
     * Title 18의 Section 242에 따르면, 법의 색채 아래 행해진 권리 박탈은 범죄로 간주됨
     * 호주에서도 기자들이 경찰의 급습을 당하지만 아무 일도 일어나지 않는다는 의견이 있음
     * Kansas를 응원하는 의견이 있음
"
"https://news.hada.io/topic?id=16378","Roblox는 세계에서 가장 큰 게임인데, 왜 수익을 내지 못할까? (어떻게 낼 수 있을까)?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Roblox는 세계에서 가장 큰 게임인데, 왜 수익을 내지 못할까? (어떻게 낼 수 있을까)?

     * 코로나19 사태가 기억 속으로 사라지고 게임 산업이 근 25년 만에 가장 큰 위축을 겪었음에도 불구하고, Roblox는 계속해서 성장하고 있음. 그 결과 사람들이 인지하는 Roblox의 규모와 실제 전례 없는 규모 사이에는 큰 격차가 존재함
     * 하루 평균 8천만 명 이상이 Roblox에 로그인함. 역사적으로 볼 때 Roblox에 10분마다 로그인하는 사람 수가 Second Life의 전성기 때 한 달 동안 로그인한 사용자 수보다 많음
     * Roblox의 월간 사용자 수는 현재 3억 8천만 명으로, PC 게임 선두주자인 Steam의 2배, Sony PlayStation의 3배, Nintendo Switch의 연간 고유 사용자 수의 3배, 지난 10년간 Xbox 콘솔을 구매한 사용자 수의 5배에 달함. 플랫폼 간 중복을 고려하면 Roblox의 월간 사용자 수가 AAA 게임 생태계 전체를 합친 것보다 많을 가능성이 있음
     * 가장 유사한 경쟁자인 Minecraft와 Fortnite에 비해 Roblox는 각각 5배, 2.25배 많은 월간 플레이어를 보유하고 있음. 게이머가 아닌 사람들에게 Roblox는 Spotify의 월간 사용자 수의 3분의 2, Snap의 절반 정도이며, 2015년 4분기 인스타그램 및 2009년 3분기 페이스북 수준으로 인기 있음
     * 매달 사용자들은 Roblox를 이용하는 데 약 60억 시간을 보내며, 이는 Twitch나 YouTube에서 Roblox 콘텐츠를 시청하는 시간을 제외한 수치임. 추정으로 Disney+ 계정 평균 시청 시간이 월 20시간 이하라고 하는데, 이는 Roblox 총 사용 시간의 절반에 불과함
     * Roblox의 성장은 매우 선형적이며 탄력적임. 현재 규모에서도 성장이 계속되어 월간 활성 사용자 수 5억 명, 일간 활성 사용자 수 1억 명을 넘어설 것으로 보임. Zoom, Shopify, Peloton 등 다른 팬데믹 수혜주들과 달리 Roblox는 팬데믹 이후 성장이 둔화되지 않고 오히려 가속화됨
     * Roblox의 성장 구성도 건강함. 팬데믹 이전 16~19% 수준이던 일간 활성 사용자 비율이 현재 22%로 증가했고, 1인당 플레이 시간도 증가함. 13세 이상 플레이어 비중이 40%에서 58%로 증가했고, 미국/캐나다 플레이어는 250% 늘었지만 APAC과 ROW 사용자가 각각 650%, 750% 급증하면서 전체에서 차지하는 비중은 오히려 35%에서 22%로 감소함
     * Roblox는 고소득 시장에서 개발도상국 시장으로 플레이어 기반을 다각화했지만, 월간/일간 활성 사용자당 매출은 팬데믹 이전 수준을 상회함. 1시간당 지출도 팬데믹 절정기를 제외하면 Roblox 역사상 가장 높은 수준임. 즉, Roblox는 계속해서 매력, 사용량, 수익화를 키워가고 있음
     * Roblox의 연간 지출액은 38억 달러를 넘어섰고 연말까지 40억 달러를 돌파할 전망이며, 그 중 4분의 1은 개발자에게 돌아감. 2022년 Roblox 사용자들은 하루에 17만 개의 가상 의류/액세서리 아이템과 1만 5천 개의 가상 세계를 만들어냈고, 1억 번 이상 플레이된 사용자 제작 월드가 100개가 넘음
     * 따라서 Roblox가 ""작동""하고 있다는 점은 의심의 여지가 없지만, 동시에 Roblox는 매우 적자임. 최근 4분기 동안 32억 달러 매출에 12억 달러 영업 손실을 기록했는데, 이는 팬데믹 이전 4분기 대비 매출은 6.2배 증가한 반면 손실은 18배나 커진 것임. Roblox 규모의 플랫폼형 기술 기업으로서는 전형적인 행보가 아님

성장은 하지만, 수익이 없다

     * Roblox는 명백히 비용 문제를 안고 있음. 지난 12개월 동안 수익 100달러당 평균 138달러의 비용이 발생함
     * 이 비용의 상당 부분은 Roblox가 통제할 수 없는 것들임. 우선 수익의 평균 23%가 앱스토어/플랫폼 수수료로 사용되고, 26%는 Roblox 사용자 제작 콘텐츠(UGC) 개발자들에게 지급됨. 이론적으로는 개발자 지급액을 줄일 수 있지만, 그럴 경우 브랜드와 개발자 투자에 타격을 줄 것임. 오히려 Roblox는 개발자들이 플랫폼에 더 투자할 수 있도록 수익 배분을 늘리고 싶어함
     * 인프라, 신뢰 및 안전에 수익의 28%가 사용됨. 앱스토어 수수료 및 개발자 수익 배분과 달리 이 비용은 한계비용이 아님. Roblox 운영에는 시간당 고정 비용이 있는데, 이는 사용자 지출이 늘어도 증가하지 않음. 따라서 매출 대비 비율로는 감소할 수 있지만 쉽지는 않을 것임. 지출을 늘리는 가장 확실한 방법은 플레이 시간을 늘리는 것인데, 이는 추가적인 서비스 비용을 야기함
     * 더 많은 플레이어, 특히 돈을 쓸 의향과 능력이 있는 장년층 플레이어를 유치하고, 1인당 플레이 시간과 지출을 늘리기 위해 Roblox는 생성형 AI와 같이 운영 비용이 더 드는 경험에 투자하고 있음. 실시간 플레이어 소통, 자산 및 월드 제작, AI 에이전트와 NPC 운영 등에 생성형 AI를 활용하는데 주력하고 있는데, 이는 만들고 운영하는 데 비용이 많이 듦. 괴롭힘, 성범죄 등에 대응하기 위해 AI 도구와 인력 중재자 투입도 늘리고 있음
     * Roblox 6대 비용 범주 중 3개만으로도 매출의 77%가 소진됨. 나머지 3개 범주의 비용도 비슷한 수준이지만 개선의 여지가 더 크고 Roblox가 더 통제할 수 있음. 일반관리비(13%)와 판매마케팅비(5%)는 몇 년 전에 비해 소폭 감소했고 앞으로도 계속 줄어들 전망임. 그러나 이 범주를 각각 3분의 1씩 줄인다 해도 손익분기점을 맞추는 데 필요한 38%의 6%밖에 해당하지 않음
     * 가장 크고 흥미로운 범주는 R&D임. 플랫폼으로서 R&D는 Roblox의 현재 규모의 토대일 뿐 아니라 모든 미래 성장에 필수적임. 이에 따라 회사는 현재 수익의 상당 부분을 미래 수익 증대를 위해 재투자하고 있음. Roblox의 도구와 역량 개선은 개발자 유치와 더 나은 경험 제작에 도움이 되고, 이는 더 많은 사용자 유치, 장년층 사용자 유지, 더 많은 사용자 지출을 촉진함. 이 모든 것이 Roblox의 수익을 늘려 더 많은 R&D 자금을 마련하고 개발자들에게 더 많은 돈을 제공함
     * 동시에 Roblox의 R&D 투자 규모는 엄청남. R&D에 연율 기준 15억 달러, 수익의 44%를 사용하고 있음. 비교해보면 2024년 소니 플레이스테이션의 R&D 지출 예상액은 22억 달러, 2024년 Unity Technologies의 R&D 지출액은 11억 달러에 불과함. 향후 R&D 비용이 매출과 함께 계속 증가하기는 어려울 것으로 보임. 대부분의 대형 기술 기업은 R&D 비중이 6~12% 수준에서 안정화됨. Roblox의 R&D 비중이 10%까지 떨어진다 해도 여전히 적자일 것임

이익은 적지만 현금은 풍부?

     * Roblox는 수익성이 없지만 상황에 대한 중요한 단서가 있음. 지난 12개월 동안 회계상 이익보다 훨씬 중요한 지표인 영업 현금 흐름은 6억 5천만 달러로 매출의 약 20%였음. Roblox는 최소 24분기 동안 현금 흐름 양호한 상태를 유지해왔음
     * 이런 불일치의 원인 중 하나는 Roblox의 수익 인식 방식임. 사용자가 플랫폼 가상 화폐인 Robux를 30달러어치 구매하면 Roblox는 예약 매출(bookings)로 30달러를 인식함. 이 중 평균 3달러는 ""소모품""에 사용되므로 Roblox는 그 3달러를 즉시 수익으로 인식함. 나머지 27달러는 아바타 같은 ""내구재""에 사용되는데, 아바타는 시간이 지나도 사용되므로 Roblox는 이 수익을 사용자의 평균 수명인 현재 27개월에 걸쳐 인식함. 즉 27달러 중 1달러씩 향후 27개월 동안 배분되므로 1개월차에는 총 4달러(3+1달러)가 인식되고 26달러는 이연됨
     * Roblox의 회계 관행은 대체로 보수적인 것으로 여겨짐. 실제로 사용자는 새로 구매한 Robux를 평균 3일 내에 모두 사용함. 사용자들은 Roblox의 수익 인식 정책이 시사하는 것처럼 2년 넘게 Robux 잔액을 아바타, 의상 등에 쓰지 않음. Roblox는 Robux나 가상 상품 환불을 허용하지 않으므로 사용자에 대한 채무를 보유하지 않음. 가상 상품 사용이 대부분 앞쪽에 집중되는 경향이 있음. 따라서 정액법 배분은 200% 혹은 300% 정률법에 비해 부적절할 수 있음. 게다가 Roblox는 고객 수명이 늘어나면 수익 인식 기간이 늘어나 손익계산서상 불리해짐
     * Roblox의 회계 방법론은 일부 비용(앱스토어 수수료, 개발자 지급액)도 이연되어 지연된 수익 인식의 영향을 일부 상쇄함. 그러나 모든 운영비와 인건비는 즉시 발생하므로 Roblox의 수익 인식 정책의 순효과는 사용자 지출 총액이 증가하는 한 회계상 이익을 줄이는 것임. 분기당 Roblox의 예약 매출은 인식 매출을 평균 23% 정도 초과함. 이는 달러당 138%의 비용을 상쇄하기에 충분하지 않지만, 예약 매출 대비로는 비용이 114%로 줄어듦
     * 그렇다면 Roblox는 어떻게 그렇게 많은 현금을 창출할까? 지난 12개월 동안 Roblox가 직원들에게 지급한 총 보상액은 18억 달러였음. 그러나 이 보상의 53%는 현금이 아닌 주식 형태였음. 따라서 Roblox는 매출의 약 31%에 해당하는 금액만큼 영업 현금 흐름을 ""보호""할 수 있음
     * 주식 기준 보상 비용을 무시하는 것은 오해의 소지가 있음. 특히 기업이 성숙해짐에 따라 총 보상을 주식에서 현금으로 전환하는 경향이 있는데, 이는 기업이 꾸준히 수익을 내야 하는 시기에 이익을 감소시킴. 주식 기준 보상이 10% 정도로 정상화된다면 매출의 21%가 추가로 현금 비용으로 소진될 것임. 이는 Roblox의 비용을 예약 매출의 114%에서 135%로 증가시킬 것이며, 이는 Roblox의 GAAP 방식에 의한 138%에 근접함

Roblox가 어떻게 수익성을 높일 수 있을까?

     * Roblox의 손익계산서를 자세히 살펴보면 긍정적인 면(Roblox가 많은 영업 현금 흐름을 창출하고, R&D는 결국 수익의 1/4 이하로 감소할 것임)과 부정적인 면(비용의 30%가 주식으로 지급되고, 수익의 최소 절반은 지급되어야 함) 모두 보임
     * Roblox가 ""위대한"" 비즈니스가 되려면 어떻게 해야 할까?
     * 미국과 캐나다에서는 Roblox의 일일 활성 사용자당 평균 청구액(ABPDAU)이 분기당 $37로, 유럽의 4배 이상, 아시아 태평양 시장의 6배 이상, 기타 시장(Rest of Word)의 거의 9배에 달함
     * UCAN의 순 ABPDAU(즉, 앱 스토어 수수료 23%, 개발자 수익 분배 26% 차감 후)는 여전히 다른 곳의 총 ABPDAU의 배수임
     * 전 세계적으로 ABPDAU는 $13이며, Roblox는 이 지출에서 약 35%를 손해 보고 있어 비용은 약 $18임. UCAN에서는 Roblox가 이 비용 기준의 두 배 이상을 지불함
     * UCAN 사용자에 대한 50% 이상의 순이익률은 Roblox가 개발자와 소비자에게 ""작동""할 뿐만 아니라 비즈니스로서도 작동한다는 점에서 중요함(적어도 플레이어의 25%에 대해서는)
     * Roblox는 소셜 플랫폼으로서 독특함
     * 앱 스토어 수수료
          + Roblox가 iOS나 Android와 같은 다른 플랫폼에 자사 기기에서 생성된 모든 수익의 30%를 지불해야 하는 것은 근본적이지만 우연한 문제는 아님
          + iOS나 Android 개발자로서 Roblox가 생성한 수익의 70%만 순이익으로 가져간다면, 자사 개발자에게 순수익의 최대 70%만 제공할 수 있음(iOS와 Android가 개발자에게 제공하는 수익 분배와 일치함)
          + 그러나 Roblox는 자체 비용을 지불하고, 이익을 창출하며, 자체 사업에 재투자하기 위해 이러한 수익 중 일부를 유지해야 함
          + 정부들은 전 세계적으로 이제 Apple의 iOS 플랫폼과 Google의 Android가 앱 유통 및 수익 창출 모델을 최소한 부분적으로라도 개방하도록 강제하고 있음
          + 중기적으로 25%에서 20%로 감소하는 것이 기회의 순효과일 수 있으며, 장기적으로는 10%에 가까운 것도 가능함
     * ABPDAU 증가
          + 수익성이 높은 사용자의 수익성을 직접적으로 높이고 수익성이 없는 사용자의 직접적 손실을 줄이는 것을 의미함
          + 이는 R&D, G&A 및 S&M의 대부분 고정 비용을 줄이는 더 많은 수익을 의미함
          + 매월 평균적으로 사용자의 6% 미만, DAU의 17% 미만이 로벅스를 구매함
          + Roblox가 사용자당 청구액을 늘릴 수 있는 가장 명확한 방법은 사용자 기반의 연령을 더 높이는 것임
     * 광고
          + Roblox에 광고는 몇 가지 목표를 해결해 줌
          + 첫째, 모든 사용자를 수익 창출 사용자로 만들면서 고지출 고객의 수익을 증가시킴
          + 둘째, 한계 소비가 한계 비용(주로 인프라 및 신뢰와 안전 비용)뿐만 아니라 한계 수익을 지속적으로 발생시킴
          + 셋째, Apple App Store나 Google Play 모두 광고 수익의 일부를 수집하지 않음. 따라서 모든 광고는 수익 대비 앱 스토어 수수료를 필연적으로 감소시킴
          + 광고주들은 수년 동안 자체 브랜드 세계를 제작하여 Roblox에 투자해 왔음
               o Roblox의 모든 월드와 마찬가지로 Roblox는 그들의 제작에 대해 요금을 부과하지 않음(물론 일부 브랜드는 에이전시에 제작 비용을 지불함)
               o 대신 Roblox는 그 월드가 영감을 줄 수 있는 참여와 구매를 통해 ""보상""을 받음(이를 위해 Roblox는 개발자 로열티 지급을 통해 광고주에게 지불할 수도 있음)
               o 동시에 Roblox는 이러한 월드 제작자와 Roblox 월드 제작 및 운영이 주요 사업인 사람들로부터 광고 수익을 창출할 수 있는 방법이 있었음
               o 구체적으로 Roblox는 런처/애플리케이션 내에서 배너 광고와 스폰서 검색 결과를 판매했음
               o 그러나 이러한 광고는 가상 월드나 아이템 홍보로 제한되었음(예: 스타벅스는 스타벅스 월드나 가상 스타벅스 앞치마는 홍보할 수 있지만 실제 스타벅스 음료나 쿠폰 등은 홍보할 수 없음)
               o 이러한 제한은 사용자에게는 ""좋지만"" 광고 수익에 상당한 제약이 있었음
          + 새로운 광고 단위와 기술
               o 2022년 말부터 Roblox는 급성장하는 광고 사업을 지원하기 위해 새로운 광고 단위와 기술에 우선순위를 두기 시작함
               o 예를 들어 2024년 Roblox는 다른 광고 단위와 달리 무엇이든(예: 예정된 음악, 실제 운동화 등) 광고할 수 있고 광고주가 프로그래밍 방식으로 입찰하고 광고판 광고를 지원하기로 선택한 모든 월드에 제공될 수 있는 월드 내 광고판을 출시함
               o 이러한 종류의 광고는 수년 동안 ""비공식적으로"" 존재해 왔음(개발자는 광고판을 만들고 광고 슬롯을 직접 판매하거나 더 일반적으로는 외부 광고 네트워크에 연결하여 광고 단위를 채움)
               o 그러나 2023년 Roblox는 개발자들이 타사 서버에 광고 단위를 요청하는 것을 차단하기 시작함
               o 개발자는 여전히 자신의 월드 내에서 맞춤 광고를 판매할 수 있지만 프로그래밍 방식 삽입, 동적 가격 책정 및/또는 타겟팅은 모두 Roblox의 광고 네트워크 사용을 필요로 함
          + 몰입형 광고
               o ""몰입형 광고""는 사용자가 한 Roblox 경험에서 다른 경험으로 직접 이동할 수 있는 포털임
               o 예를 들어 펩시나 나이키는 인기 있는 스포츠 테마 월드(골든 스테이트 워리어스 월드, FIFA 월드 등) 내에서 ""포털""을 (프로그래밍 방식으로) 구매하여 디지털 광고판을 내걸기보다는 이 월드의 사용자를 직접 획득하기 쉽게 만들 수 있음
               o 이 형식도 원래 독립 Roblox 개발자들이 다른 월드 개발자들과 자체적으로 거래하면서 ""해킹""한 것이었지만, Roblox는 이후 이를 자사 플랫폼에 기본적으로 내장하고 개발자들이 자사 시스템을 사용하도록 요구함
               o 개발자는 여전히 맞춤 거래를 통해 Roblox를 우회하려고 할 수 있지만, Roblox의 플랫폼만이 포털에 진입한 사용자 수, 목적지에 머문 시간, 참여한 활동 등을 추적하는 고급 분석을 제공하며, 광고주는 Roblox를 통해서만 몰입형 광고를 프로그래밍 방식으로 구매할 수 있음
          + 무료 아이템 후원
               o 마지막 새로운 광고 단위는 광고주가 사용자가 무료로 청구할 수 있는 아이템을 후원할 수 있게 해줌
               o 예를 들어 나이키는 Roblox를 통해 주어진 주말에 개발자 월드 A를 방문하는 모든 사용자에게 무료 가상 에어 조던 운동화 한 켤레를 제공하는 거래를 할 수 있음
               o 이것도 나이키와 개발자 A 사이의 직접 거래를 통해 달성될 수 있지만, Roblox 자체 플랫폼은 프로그래밍 방식 배치, 더 나은 분석, 더 많은 파트너링 월드, 관련 도구 등을 제공함
          + 광고 사업의 잠재력
               o Roblox의 광고 사업이 얼마나 커질지는 분명하지 않음
               o 2023년 11월 Baszucki CEO는 ""광고가 우리 사업의 핵심이 될 것이라고 말한 적이 없다""고 말했지만, ""잠재적인 몰입형 광고 경험의 규모는 현재 예측할 수 없다. 그것은 몰입형이고, 그곳에서 많은 시간이 소요되며, 친구와 함께 갈 때 기억이 정말 깊다""고 주장함
               o Baszucki는 또한 ""언젠가 Roblox에서 우리가 Nike World에 갈 때, 우리는 가상 나이키 신발을 신어보는 것에 그치지 않을 것이다. 우리는 그 브랜드와 깊은 연결고리가 있었기 때문에 그곳에서 실제 버전도 구매할 수 있을 것""이라고 언급함
               o 실제 연계와 관계없이 3억 5천만 명 이상의 젊고 접근하기 어려운 플레이어들을 보유한 Roblox는 대부분의 사업이 사용자 구독에 기반을 두고 있더라도 의미 있는 수익을 창출할 잠재력이 있음

Master Builder(man)

     * 앱 스토어 수수료 감소, ARPU 증가, 더 큰 광고 플랫폼은 Roblox의 선형적 기회임
     * 월간 사용자 3억 8천만 명, 월간 사용량 60억 시간에 육박하는 Roblox는 이미 전 세계에서 가장 큰 미디어 자산 중 하나임(가장 많이 플레이되는 비디오 게임일 뿐만 아니라)
     * Roblox의 규모에 도달하는 제품은 매우 드물며, 계속 성장하는 경우는 더더욱 드묾
     * 이러한 현재 규모에서 완전히 ""새로운"" 기회가 생기기 시작함
     * 예를 들어 2023년 Roblox는 Roblox 월드를 활발히 사용하지 않는 연결된 플레이어 간에 메시징과 음성 통화를 포함한 ""기본"" 통신 기능과 휴대폰이나 태블릿의 전면 카메라를 사용하여 실시간 모션 캡처를 구현하는 아바타 간 ""화상 통화""를 가능하게 하는 새로운 기능을 출시함
     * 이 기능은 Roblox를 Snap과 WhatsApp과 같은 소셜 네트워크 및 플랫폼과 더 직접적인 경쟁 관계에 놓이게 함(각각 8억 명과 28억 명의 사용자를 보유하고 있지만 젊은 Z세대와 특히 알파 세대에는 부족함)
     * 또한 이러한 기능은 몰입형 사회화보다 ""더 크고"" 운영 비용이 저렴하며 광고를 게재하기 쉬움
     * Roblox 창업자/CEO인 David Baszucki는 인스턴트 메시징이 회사가 곧 정복할 수 있는 많은 2D 사용 사례 중 하나라고 생각하는 것 같음
     * 2023년 Roblox Developer Conference에서 그는 17세 이상 인증 사용자를 위한 데이트 제품, 기업 채용 통합, 교육 프로그램 등을 예고함

   저도 물렸읍니다…

   로블록스와 스냅챗... 이 두개를 보며, 꼭 어른들이 보기에 팬시한 제품만 애들한테 인기가 있는건 아니구나... 라고 깨닳게 해줬달까요...

        Hacker News 의견

     * 자녀가 Roblox에 500달러 이상을 썼음
          + 게임들이 대부분 'pay to win' 요소를 가지고 있고 광고가 많음
          + 무료가 아닌 게임을 보여주려 하지만 친구들이 함께 할 수 없어 Roblox를 계속 하게 됨
          + Roblox가 약탈적 관행으로 조사받지 않는 이유를 이해하지 못함
     * Roblox는 수익성이 없지만 운영 현금 흐름은 650MM 달러로 긍정적임
          + 현금 흐름이 증가하는 한 수익에 신경 쓰지 않을 것임
          + 현금 흐름이 멈추면 재투자 지출을 줄여 지속 가능성을 유지할 수 있음
     * TCI라는 회사가 장기 자산에 투자하여 경쟁에서 앞서 나갔음
          + 가속 감가상각을 통해 매년 손실을 보였지만 실제로는 수익을 창출했음
          + 세금 의무를 연기하고 자본을 재투자하여 시장 점유율을 확보했음
     * Roblox가 Apple의 App Store 정책을 위반하면서도 특별 대우를 받는 이유를 궁금해함
          + Roblox가 Apple의 30% 수수료를 기꺼이 지불하는 것으로 보호받고 있음
          + SEC가 이를 조사해야 한다고 생각함
     * 자녀가 Roblox를 시작하면서 Robux를 원하게 됨
          + 원하는 아이템이 $10-20 NZD 정도로 일회성 소비임
          + Roblox가 이렇게 인기를 끌게 된 이유를 이해하지 못함
     * Roblox가 자유/오픈 소프트웨어 인터넷 유토피아와는 거리가 멀다고 느끼는 구세대임
          + 많은 창의적 에너지가 낭비된다고 생각함
     * Roblox가 긍정적인 현금 흐름을 가지고 직원들에게 잘 대우함
          + 회사가 부를 축적하기보다는 직원들에게 잘 대우하는 것이 바람직함
     * Roblox 게임들이 모두 'Roblox'의 본질을 가지고 있다고 생각함
          + 더 높은 지출을 유도하려면 이 문제를 해결해야 함
          + 게임의 'jank'가 매력적이지만 고소득 사용자를 끌어들이지 못함
          + Roblox 게임의 수익화가 무질서하다고 생각함
     * 자녀에게 PS5와 Hogwarts Legacy를 사주고 Roblox를 금지함
          + 'pay to win' 요소와 아동 성범죄 문제 때문에 Roblox를 금지함
     * Roblox의 인터뷰 과정이 매우 어렵다고 생각함
          + 게임 엔진이 엉성하지만 대규모로 운영하는 비밀 소스가 있다고 생각함
"
"https://news.hada.io/topic?id=16338","Google은 독점이다. 해결책은 명확하지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Google은 독점이다. 해결책은 명확하지 않음

     * ""사업 분할이 다가오고 있다 – 그러나 그 이후가 더 나을지는 불분명함""
     * 15년 넘게 ""경쟁은 클릭 한 번 거리""라는 구글의 반독점 슬로건은 규제 당국을 막지 못하고 있음
     * 2013년 미국 연방거래위원회(FTC) 조사에서 혐의 없이 종료되었으나, 최근 8개월 동안 두 건의 주요 미국 경쟁 소송에서 패소함
          + Epic Games가 제기한 안드로이드 생태계 관련 소송
          + 미국 법무부가 제기한 검색 광고 사업 관련 소송
     * Epic Games 소송에서 FTC는 구글의 준수 비용 우려를 무시하고 적절한 해결책을 고려할 것을 권고함
     * 법무부의 검색 광고 소송에서는 구글이 불법 독점 기업으로 선언된 후 해결책에 초점이 맞춰짐
     * 구글은 Epic 판결에 항소하고 법무부의 승리에도 도전할 계획임

  기업 분할과 독점계약 해지까지

     * 2023년 EU의 예비 결과에 따르면 구글이 광고 관행으로 반독점 법을 위반했으며, 9월에는 법무부의 광고 기술 운영에 대한 별도의 재판이 예정됨
     * 미국 검찰은 9월 6일 청문회에서 구글의 기업 분할을 포함한 해결책을 논의 중임
          + Chrome과 Android를 별도 법인으로 분리
          + 구글의 기본 검색 엔진 독점 계약 해지
          + 경쟁사와 데이터 공유 강제
     * Digital Content Next의 CEO Jason Kint는 Chrome과 Android의 강제 분할이 논의 중이라고 언급함
     * 구글이 검색에서 압도적인 독점을 가지고 있으며 이를 남용했다고 주장함

  애플과 모질라에 끼치는 영향

     * 광고 기술 재판이 검색 소송과 같은 결과를 낳으면, 구글의 DoubleClick 사업이나 관련 광고 경매 인프라가 분할 대상이 될 수 있음
     * 구글이 Apple과 Mozilla에 기본 검색 엔진으로 설정하기 위해 지불하는 금액이 사라지면, Apple과 Mozilla도 타격을 입을 것임
          + Apple은 연간 약 200억 달러의 수익을 대체할 다른 방법을 찾아야 함
          + Mozilla는 광고 사업에 더 깊이 관여할 가능성이 있음
     * Chrome과 오픈 소스 Chromium 프로젝트를 Mozilla에 넘기는 것이 적절한 해결책일 수 있겠지만, 실현 가능성은 낮아 보임
          + 독립적인 비영리 재단을 통해 브라우저 다양성을 유지할 수 있음
          + Chrome을 영리 사업으로 운영할 수도 있지만, 수익 창출이 문제일 수 있음

  안드로이드의 미래?

     * Android의 분할도 흥미롭지만, 구글의 독점 자금 없이 개발과 앱 배포가 어떻게 이루어질지는 불분명함
     * Amazon, Apple, Meta, Microsoft와 같은 구글의 경쟁사들이 Android나 Chrome을 더 나은 공공 서비스로 만들 수 있을지는 의문임
          + 오히려 이들 역시 반독점 조사를 받고 있는 만큼 크롬이나 안드로이드를 더 약탈적으로 운영할 가능성이 있음

  소프트웨어 플랫폼은 특정 남용에 맞춘 규제가 필요함

     * 소프트웨어 플랫폼 소유자는 물리적 세계에서는 통용되지 않을(소송까지 갈수 있는) 임의의 조건을 임차인에게 부과할 수 있음
          + 자신이 임차인과 비슷한 사업을 시작하거나, 임차인의 사업을 안 보이게 만들고 자신의 사업을 더 앞에 보이게 하는 등
     * 구글의 Chrome이나 Android 분할이 도움이 될 수 있지만, 자기 선호를 해결하는 것도 중요함
          + 유럽의 디지털 시장법(DMA)처럼 플랫폼 소유자가 자신의 서비스를 선호하고 플랫폼 임차인과 불공정하게 경쟁하는 것을 금지해야 함

    GN⁺의 정리

     * 구글의 독점적 지위 남용은 오랫동안 지적되어 왔지만 이제야 규제 당국의 실질적 조치로 이어지고 있음. 독점 기업 분할은 극단적 조치로 보이지만, 소비자 이익 보호를 위해 필요할 수 있음
     * 크롬, 안드로이드 분리는 기술적으로 복잡할 뿐 아니라 소비자 경험 저하로 이어질 수 있어 신중한 접근이 필요함. 독립 운영되더라도 광고 기반 수익 모델을 택할 가능성이 높아 보임
     * 애플, 모질라 등 구글에 의존하는 기업들의 타격도 예상되는 만큼, 이들의 대응 방안과 생태계 전반의 변화 양상도 주목해야 함
     * 장기적으로는 플랫폼 기업에 대한 사전 규제 체계 마련이 시급함. 자사 우대, 데이터 독점 등 반경쟁적 행위에 대한 명확한 기준과 제재 수단이 마련되어야 할 것임
     * 다만 단순히 거대 기업을 길들이는 것이 아니라, 혁신을 저해하지 않으면서 공정한 경쟁을 촉진하는 규제 환경을 만드는 게 관건임. 기술 발전과 소비자 후생을 저해하지 않는 선에서 최적의 규제 지점을 찾는 지혜가 필요한 시점임

   모질라에 경영악화가 올까 걱정이네요

   이렇게 된 이상
   크롬을 모질라에게....

   서보 같은 대형 연구 프로젝트가 나가리 된 것부터
   모질라 경영은 이미 어려운 것 같습니다ㅠㅠ

        Hacker News 의견

     * 독점이라는 용어보다 더 나은 용어가 필요함
          + 인터넷 검색은 전환 비용이 매우 낮음
          + Google은 사람들이 자발적으로 선택해서 사용하는 것임
          + 정부의 개입이 필요하지 않음
     * Google의 분할이 어떻게 이루어질지 궁금함
          + 과거의 분할 사례는 단일 사업체였음
          + Google은 시너지 효과를 내는 복합 기업임
          + Chrome, Android, AdWords를 분리해도 지배력이 줄어들지 않을 것임
     * Microsoft와 Amazon도 분할이 필요함
          + Microsoft는 GitHub, LinkedIn, Azure, Windows, Office 등을 소유하고 있음
          + Amazon도 마찬가지임
     * Google에서 다른 검색 엔진으로 전환하는 것은 매우 쉬움
          + ATT는 미국 전화 서비스의 90%를 차지했었음
          + Google은 더 나은 검색 엔진이 나타나면 쉽게 전환 가능함
          + Android를 독점으로 본다면 iOS도 독점임
     * 기술 제품은 자연 독점이 되는 경향이 있음
          + Android를 Google에서 분리하면 iOS에 밀릴 가능성이 큼
     * 미국은 독점 규제에 대해 진지한 논의가 필요함
          + 현재 시스템은 비효율적임
          + Google은 오래된 회사가 아니며, 사업이 무적이지 않음
          + Microsoft의 사례처럼 빠르고 전술적인 집행이 필요함
     * Google이 Chrome과 Chromium 프로젝트를 Mozilla에 넘기는 것은 비현실적임
     * 공공 데이터가 Google Drive와 같은 플랫폼에만 호스팅되는 것은 문제임
          + 모든 정부 기관은 공공 문서를 자체 서버에 게시해야 함
     * 광고와 검색/YouTube 등을 분리하는 것이 필요함
          + 광고 산업의 자금이 이 산업의 생명줄임
"
"https://news.hada.io/topic?id=16383","우리의 소프트웨어 개발 알고리듬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           우리의 소프트웨어 개발 알고리듬

     * 최근 저명한 기술 CEO와 엔지니어와의 대화에서 흥미로운 소프트웨어 개발 방법론을 들음. 이 방법론을 통해 다른 휴리스틱과 일반화에 대해 생각하게 됨.

  그의 방법

     * 하루를 시작할 때 기능 작업을 시작. 하루가 끝날 때까지 완료하지 못하면 모두 삭제하고 다음 날 다시 시작. 작성한 단위 테스트는 유지 가능.
     * 며칠 후에도 기능을 구현하지 못하면, 그 기능을 가능하게 할 기반, 인프라 또는 리팩토링을 생각하고 이를 구현한 후 기능으로 돌아옴.
     * 이 방법은 90년대 후반과 00년대 초반의 익스트림 프로그래밍 운동과 유사함.

  방법에 대한 생각

    ""모든 것을 두 번 작성""

     * 주니어 엔지니어에게 주는 조언: 문제를 해결하고 코드를 브랜치에 저장한 후 다시 작성.
     * 노트북이 고장난 후 이 방법을 우연히 발견. 재작성은 초기 구현의 25% 시간만 소요되었고 결과는 훨씬 나아짐.
     * 1.25배의 시간으로 2배 더 높은 품질의 코드를 얻을 수 있음. 장기 유지보수가 필요한 프로젝트에 유용.
     * ""매일 다시 시작"" 방법은 이보다 더 극단적. 재작성할 때마다 더 매끄러운 해결책을 찾게 됨.

    ""양이 질을 가진다""

     * 스탈린의 인용구가 소프트웨어 엔지니어에게 적용됨. 주니어 엔지니어에게는 첫 10만 줄의 코드가 필수적.
     * ""매일 다시 시작"" 방법은 10만 줄을 더 빨리 작성하게 도움.
     * 같은 문제를 반복해서 해결하는 것이 패턴을 기억하는 데 유익함.
     * 5천 줄의 완벽한 코드로 주요 패턴을 모두 볼 수 있음. 나머지 9만 5천 줄은 반복을 통해 뉴런을 재배치함.

    ""총을 머리에 대고"" 휴리스틱과의 비교

     * 문제 해결책을 제시한 사람에게 ""24시간 내에 끝내야 한다면 어떻게 할 것인가?""라고 질문.
     * 이 방법은 프레임과 앵커링 편향을 깨뜨림. 종종 몇 분 만에 하루 만에 끝낼 수 있는 계획을 유도할 수 있음.
     * 실제로 하루 만에 끝낼 수 있는 계획은 아니지만, 새로운 해결책은 종종 며칠 내에 완료 가능.
     * 이 생각 실험의 목적은 실제 해결책을 생성하는 것이 아니라, 해결책의 하한을 설정하는 것임.

  경로 찾기

     * 문제 공간에서 경로를 찾는 것이 핵심. 각 경로는 해결책이며, 엔지니어의 역할은 최상의 경로를 찾는 것.
     * 이러한 휴리스틱과 다양한 경로 찾기 알고리듬 간의 유사성을 생각해 볼 가치가 있음.
     * 엔지니어링 휴리스틱도 마찬가지로, 더 나은 엔지니어가 되는 것은 문제 공간에서 더 나은 경로를 찾는 것임.

GN⁺의 정리

     * 이 글은 소프트웨어 개발에서 효율적인 방법론과 휴리스틱을 탐구함.
     * ""매일 다시 시작"" 방법과 ""모든 것을 두 번 작성"" 방법은 코드 품질을 높이는 데 유용함.
     * 반복적인 문제 해결은 패턴 인식과 뉴런 재배치에 도움을 줌.
     * ""총을 머리에 대고"" 휴리스틱은 해결책의 하한을 설정하는 데 유용함.
     * 문제 공간에서 최상의 경로를 찾는 것이 엔지니어의 핵심 역할임.

   미쳤어요? 시간이 억수로 남아도는 인간들이나 가능하지 이게 현실적으로 가당키나 한 짓입니까?

   한국 SI 환경에서는 불가능하겠죠..ㅎㅎ 개인 프로젝트에서나

   이 접근 방법은 전혀 생각하지 못했던 방법이네요.
   한번 시도해봐야겠어요ㅎ

   재작성에 대해서는 매우 공감합니다.
   일전에 작업하던 코드를 실수로 날려먹고, 다시 작성하다보니
   중간에 설계 바꾸기 귀찮아서 무시한 것들을 고려해서 만들게 되어
   결과는 오히려 좋았습니다.

        Hacker News 의견

     * 새로운 기능을 두 번 작성하는 것이 좋은 전략임. 하지만 비즈니스 개발자나 프로젝트 매니저에게는 불필요한 지연으로 보일 수 있음
          + 기능을 처음부터 끝까지 작성하면 논리를 정리하고 리팩토링하는 데 도움이 됨
          + 재작성은 논리 흐름을 명확히 하고, 더 선형적으로 계획을 따를 수 있게 함
          + 나중에 대규모 리팩토링의 필요성을 줄이는 경향이 있음
     * ""24시간 내에 끝내야 한다면?""이라는 질문은 프로젝트 매니저가 할 수 없는 질문임
          + 이는 개인적인 교육적 연습이지, 일을 더 빨리 끝내기 위한 방법이 아님
     * 좋은 코드는 적절한 추상화를 선택하여 작성됨
          + 적절한 추상화를 선택하려면 전체를 알아야 함
          + 다른 공학 분야에서는 CAD 레이아웃 같은 좋은 청사진 패러다임을 사용함
          + 소프트웨어에서는 이러한 청사진이 부족함
          + 경험이 중요한 이유는 균형을 맞추는 데 있음
     * 유능한 동료가 있으면 단시간에 무엇을 할 수 있는지 보여줄 수 있음
          + 빠르게 작업하는 것이 중요한 이유는 많음
          + 자동차 수리와 마찬가지로, 시간이 오래 걸릴수록 재조립을 잊을 가능성이 높음
          + 하루 만에 기능을 구현하면 위험이 줄어듦
          + 도구에 대한 확실한 이해와 신뢰할 수 있는 CI/CD 프로세스가 필요함
     * 소프트웨어를 두 번 작성하는 것이 좋다는 의견에 공감함
          + 한 번 작성한 코드를 잃어버린 후 다시 작성할 의욕을 잃음
          + 다시 작성하려고 하면 집중이 안 되고, 접근 방식을 기억하지 못함
     * 며칠 후에도 기능을 구현할 수 없다면, 필요한 인프라나 리팩토링을 먼저 수행해야 함
          + 도구의 '어휘'를 구축하고 유지하는 것이 중요함
     * ""24시간 내에""와 ""모든 것을 두 번 작성""은 서로 연관이 있음
          + 코드를 대충 작성하면 결국 다시 작성하게 됨
     * 이 게시물은 최고의 ""프로그래밍 조언"" 중 하나임
          + grug brained developer의 조언과 비슷함
     * 때로는 문제를 해결하기 위해 백그라운드 스레드를 돌리는 것이 필요함
          + 경험이 많은 사람은 이러한 문제를 더 빨리 식별할 수 있음
          + 문제를 잠시 놔두고 다른 일을 하는 것이 더 나을 때가 있음
     * 다음 접근 방식이 유용함
          + 문제를 해결할 여러 아이디어를 먼저 작성함
          + 작업을 '한 세션 내에 완료할 수 있는' 방식으로 나눔
          + 세션이 끝날 때마다 코드가 항상 '작동'하도록 구현함
          + 세션이 끝날 때마다 주석이나 README에 브레인 덤프를 작성함
"
"https://news.hada.io/topic?id=16316","GitLab, 매물로 나오다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GitLab, 매물로 나오다

     * 소프트웨어 개발 플랫폼 GitLab이 매각을 고려 중이며 잠재적 구매자들의 관심을 끌고 있음. 현재 시총 약 68억 달러(9.2조원)
     * GitLab의 플랫폼은 다양한 도구를 자동으로 통합하며, 개발, 운영, 보안 팀이 소프트웨어 설계를 위해 공통 도구를 사용할 수 있도록 함
          + 3,000만 명 이상의 등록 사용자와 Fortune 100 기업 중 절반 이상이 사용하는 중요한 플랫폼임
          + 샌프란시스코에 본사를 두고 있으나, 전 직원이 전 세계에서 원격으로 근무하는 완전 원격 회사로 운영되고 있음
     * GitLab은 매각 가능성을 검토 중이며, 440억 달러 규모의 클라우드 모니터링 기업 Datadog을 포함한 여러 잠재적 구매자와 협상 중임

  경쟁 환경 및 도전 과제

     * GitLab은 시장에서 중요한 위치를 차지하고 있으나, 큰 도전 과제에 직면해 있음
     * 올해 주가는 16% 하락했으며, 고객 지출 감소에 대한 우려가 커지고 있음
     * Microsoft와 같은 경쟁사와의 경쟁이 심화되면서 가격 압박이 발생하고 있음
     * 최근 분기 매출은 1억 6,920만 달러로 전년 동기 대비 33% 증가했으나, 가격 압박을 받고 있음
     * GitLab의 설립자이자 CEO인 Sid Sijbrandij는 듀얼 클래스 주식을 통해 45.51%의 의결권을 보유하고 있어, 거래 가능성이 더욱 복잡해지고 있음
     * 알파벳(구글 모회사)도 GitLab 의결권의 22.2%를 가지고 있어 거래에 영향을 미칠 수 있음

  업계 동향과 배경

     * 기술 분야에서는 인수합병이 활발히 이루어지고 있으며, 올해 상반기에만 3,272억 달러 규모의 거래가 성사됨
     * AI, 클라우드 컴퓨팅 등 빠르게 변화하는 글로벌 비즈니스 환경에 대응하기 위해 기업들은 서비스 확장을 모색하고 있음
     * 알파벳은 사이버 보안 기업 Wiz 인수를 위해 230억 달러를 제시했다는 소문이 있었으며, 마케팅 소프트웨어 기업 HubSpot 인수도 고려했던 것으로 알려짐
     * GitLab의 매각은 올해 소프트웨어 개발 도구 및 클라우드 서비스 분야에서 가장 큰 사건 중 하나가 될 것이며, 기술 커뮤니티에 미칠 영향에 관심이 모아지고 있음

GN⁺의 의견

     * GitLab은 개발자 협업과 DevOps 자동화 분야에서 GitHub과 함께 양대 산맥을 이루는 중요한 플랫폼임. 오픈소스 기반의 솔루션으로 개발 생산성 향상에 기여해 왔음
     * 완전 원격 근무 방식을 채택한 선구적인 기업 문화로도 주목받아 왔는데, 이는 팬데믹 이후 가속화된 원격 근무 트렌드에 부합하는 면이 있음
     * 다만 AI, 클라우드 등 기술 발전으로 인해 개발 도구 시장의 경쟁이 심화되고 있고, 마이크로소프트의 GitHub 인수 이후 통합 개발 플랫폼 경쟁이 가속화되고 있어 GitLab으로서는 도전적인 상황임
     * Datadog과의 인수 시너지 효과에 대해서는 의견이 엇갈리는데, 일각에서는 코드 관리(GitLab)와 모니터링(Datadog) 영역의 결합으로 개발 생산성 향상에 기여할 것이라는 전망이 있는 반면, 사업 영역 차이로 인해 통합 과정에서 혼선이 있을 수 있다는 우려도 제기됨
     * 개발자들 사이에서는 GitLab이 대기업에 인수되더라도 현재의 개방적이고 유연한 정책과 문화를 유지해 주길 바라는 목소리가 높음. 장기적 관점에서 개발 생태계 발전을 위해서라도 GitLab의 독립성이 어느 정도 보장되어야 할 것임
     * 기술 부문의 M&A 활동이 활발해짐에 따라, GitLab과 같은 주요 기업의 매각은 업계 전반에 걸쳐 파급 효과를 미칠 가능성이 있음

   젯브레인아 스페이스 서비스 확 종료해버리고 스페이스코드 날리는 뻘짓거리하지말고 차라리 이거 사서 써라!

   개추ㅋㅋㅋ

   엌ㅋㅋㅋㅋㅋㅋ

   나온지 한달쯤 된 기사이긴 한데, 어찌 될지 궁금하긴 합니다. 과연 GitLab을 사갈 곳이 있을까요

        Hacker News 의견

     * Gitlab 인수는 많은 불만을 가진 사용자들의 이탈을 초래할 가능성이 있음
          + Gitlab은 Github의 대안 외에 특별한 장점이 없음
          + 새로운 시작을 한다면 Drew의 Sourcehut hub를 선택할 것임
          + Gitlab의 미래가 불확실하여 80억 달러를 지불할 가치가 없음
     * 2017년 Gitlab의 'rm -rf' 사건이 떠오름
          + Kevin Fang의 재연 영상이 유머로 기억됨
          + Kevin Fang의 재연 영상 링크
     * Gitlab의 매각이 아쉬움
          + Github이 시장 점유율을 빠르게 흡수하고 있음
          + 개인적으로 Gitlab을 호스팅할 수 있는 기능이 좋았음
          + 하지만 소규모/개인 용도로는 과도함
     * 중간 규모의 소프트웨어 회사들이 장기적으로 성공하기 어려운 이유에 대한 의문
          + 모든 것이 몇몇 회사로 통합되는 경향이 있음
     * 작은 스타트업으로서 Gitlab을 매우 좋아함
          + 인수/합병이 제품에 미칠 영향이 걱정됨
          + 회사 자본의 공개 비율이 명확하지 않음
          + 창업자가 45%의 의결권을 가지고 있고 Google/Alphabet이 22%를 가지고 있음
          + 실제로 공개 시장에 나와 있는 주식은 33%에 불과함
     * Gitlab의 수익 증가는 가격 인상과 낮은 등급의 제거 때문임
          + 추가 기능 없이 월 사용자당 요금이 6유로에서 29유로로 상승함
          + 진지한 구매자는 갱신 시 주요 이탈이 발생할 것을 인식할 것임
          + 고객/수익 성장에 대한 요구가 있을 것임
     * Datadog의 원격 근무 정책에 대한 관심
          + Datadog 원격 근무 정책 링크
     * Broadcom이 Gitlab을 인수하는 상상
     * Gitlab의 제품은 좋지만 최근 몇 년간의 개발은 마음에 들지 않음
          + 너무 많은 제품 관리자들이 자신을 알리기 위해 노력함
          + 사용자 인터페이스/기능 세트가 일관성이 떨어짐
          + 비용이 계속 증가하고 있음
     * 경쟁이 항상 좋은 발전을 가져옴
     * AWS가 Gitlab을 인수해야 한다고 생각함
          + AWS가 최근 CodeCommit을 중단했기 때문임
"
"https://news.hada.io/topic?id=16367","X의 새 AI 이미지 생성기, 별도 규제가 없어서 논란 가능한 이미지도 생성 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             X의 새 AI 이미지 생성기, 별도 규제가 없어서 논란 가능한 이미지도 생성 가능

     * xAI의 Grok 챗봇이 텍스트 프롬프트에서 이미지를 생성하고 X에 게시할 수 있게 됨
     * Elon Musk의 다른 모든 것과 마찬가지로 혼란스러워 보임
     * X Premium 구독자들이 ""Barack Obama가 코카인을 하는 모습""부터 ""Donald Trump이 카말라 해리스를 닮은 임신한 여성과 함께 있는 모습""까지 모든 것을 게시하고 있음
     * 미국 선거가 다가오고 유럽의 규제 당국으로부터 이미 감시를 받고 있는 X. 이제 생성 AI의 위험성을 둘러싼 새로운 싸움이 시작됨

Grok의 이미지 생성에 규제가 있을까?

     * Grok에게 ""이미지 생성에 대한 제한이 무엇인가요?""라고 물으면 아래처럼 이야기 함
          + 음란하거나 지나치게 폭력적이거나 혐오감을 주거나 위험한 활동을 조장하는 이미지를 생성하지 않음
          + 기존 저작권이나 상표를 침해할 수 있는 이미지를 만드는 데 주의를 기울임. 여기에는 잘 알려진 캐릭터, 로고 또는 변형 요소가 없는 지적 재산으로 간주될 수 있는 콘텐츠가 포함
          + 오해를 불러일으킬 수 있는 딥페이크나 실제 피해를 초래할 수 있는 이미지 등 타인을 속이거나 해를 입히는 데 사용될 수 있는 이미지는 생성하지 않음
     * 그러나 이는 실시간으로 생성되는 그럴듯한 예측 답변일 뿐 실제 규칙은 아닐 것임
     * 여러 번 물어보면 ""문화적 민감성을 염두에 두라""와 같이 X답지 않은 다양한 정책 변형을 얻을 수 있음

Verge가 Grok에서 성공적으로 프롬프팅한 이미지 예제들

     * ""나치 유니폼을 입은 Donald Trump""
     * ""섹시한 Taylor Swift""
     * ""마이크로소프트 로고가 있는 테이블에서 코카인을 흡입하는 Bill Gates""
     * ""Joe Biden을 칼로 찌르는 Barack Obama""
     * ""MAGA"" 모자를 쓰고 담배를 들고 있는 미키마우스

다른 챗봇과의 차이점

     * X에서 사용자가 수행한 다른 실험에 따르면 Grok이 생성을 거부 하더라도 허점을 쉽게 찾을 수 있음
     * OpenAI는 실제 사람, 나치 상징, ""유해한 고정관념이나 잘못된 정보"" 등의 프롬프트를 거부하고 식별 워터마크를 추가함

현재 상황과 앞으로의 전망

     * 유럽연합 집행위원회는 이미 디지털안전법 위반 가능성에 대해 X를 조사 중임
     * 영국 규제기관 Ofcom도 온라인안전법 시행을 준비 중이며, 여기에는 AI 관련 위험 완화 요건이 포함될 수 있음
     * 미국은 표현의 자유에 대한 보호가 훨씬 더 광범위하지만, 입법자들은 여전히 AI로 생성된 사칭과 허위정보를 규제하는 방법을 모색하고 있음
     * 무엇보다도 Grok의 느슨한 안전장치는 유명인과 광고주들이 X를 멀리하게 하는 또 다른 동기가 될 것임

   Elon Musk의 다른 모든 것과 마찬가지로
   ㅋㅋ
"
"https://news.hada.io/topic?id=16328","한 ED가 대량 사상자 사건 중 부서를 동원한 방법 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  한 ED가 대량 사상자 사건 중 부서를 동원한 방법 (2017)

라스베가스 응급실, 최악의 총기 난사 사건 후 수백 명의 생명을 구하다

  사건의 배경

     * 스티븐 패덕이 라스베가스 컨트리 음악 콘서트에서 총격을 가했을 때, 인근의 선라이즈 병원은 200명 이상의 총상 환자를 받음
     * 그날 밤 응급실을 담당한 케빈 메네스 박사는 지역 SWAT 팀을 지원한 경험 덕분에 대량 사상자 사건에 대비한 계획을 세워둠

  준비와 대응

     * 메네스 박사는 사전에 대량 사상자 사건에 대비한 계획을 세워둠
          + 사전 계획 수립
          + 어려운 질문을 던지고 해결책 찾기
          + 정신적으로 계획을 연습하여 실제 상황에서 신속하게 대응

  병원 내 준비

     * 모든 수술실을 열고, 모든 의료진을 소집
     * 치료 구역을 완전히 비우고, 환자들이 급격히 악화될 경우를 대비해 준비
     * 병원의 ""코드 트리아지""를 발동하여 추가 인력을 확보

  응급실 구조

     * 응급실은 여러 스테이션으로 구성됨
          + 스테이션 1: 주요 소생 구역
          + 스테이션 2: 중증 환자 구역
          + 스테이션 4: 안정적인 환자 구역
          + Rapid Track 및 Med Room: 경증 환자 구역

  트리아지 계획

     * 메네스 박사는 환자들을 색상 태그로 분류하여 치료 구역을 나눔
          + 빨간 태그: 주요 소생 구역 (스테이션 1)
          + 주황 태그: 중증 환자 구역 (스테이션 2)
          + 노란 태그: 안정적인 환자 구역 (스테이션 4)
          + 녹색 태그: 경증 환자 구역 (Rapid Track 및 Med Room)

  환자 도착과 초기 대응

     * 경찰차로 환자들이 도착, 대부분 중증 환자
     * 메네스 박사는 모든 환자를 빨간 태그 구역으로 보내고, 이후 상태에 따라 분류

  응급 처치와 문제 해결

     * 응급실에서 다수의 환자를 동시에 소생시키기 위해 다양한 방법을 사용
          + 약물과 혈액을 신속하게 공급
          + 부족한 장비를 대체할 방법을 즉석에서 고안
          + 환자들을 신속하게 수술실로 이동

  교훈

     * 흐름이 중요: 환자들이 신속하게 적절한 치료를 받을 수 있도록 병목 현상을 제거
     * 명확한 물리적 구역으로 환자들을 조직화하여 태그 작성 시간을 절약
     * 주황 태그를 통해 중증 환자에 집중하면서도 곧 악화될 환자들을 주의 깊게 관찰
     * 환기 장치가 부족할 경우, 비슷한 크기의 환자들을 한 장치에 연결하여 사용
     * 어려운 상황을 사전에 정신적으로 연습하는 것이 실제 연습만큼 중요

GN⁺의 정리

     * 이 기사는 라스베가스 총기 난사 사건 당시 응급실의 대응 과정을 상세히 설명함
     * 메네스 박사의 사전 계획과 신속한 대응이 많은 생명을 구하는 데 큰 역할을 함
     * 대량 사상자 사건에서의 병목 현상 제거와 효율적인 자원 활용의 중요성을 강조
     * 비슷한 기능을 가진 프로젝트로는 대량 사상자 관리 시스템을 추천

        Hacker News 의견

     * 저자는 ""흐름이 중요함""을 강조했지만, 사람들에게 자유를 주는 것이 성공의 요인임
          + 예: 간호사에게 약물 접근 권한 부여, CT 기술자가 자신의 일에 집중하게 함, 응급실 의사들이 자유롭게 움직이게 함, 간호사에게 환자 분류를 위임함
     * Dr. Greg Neyman이 대량 사상자 상황에서 인공호흡기 사용에 대한 연구를 수행했음
          + COVID-19 팬데믹 동안 이 기술이 적용되었음
          + 두 사람이 비슷한 크기와 호흡량을 가질 경우, 호흡량을 두 배로 늘리고 Y 튜빙을 통해 한 인공호흡기를 사용할 수 있음
     * Orson Scott Card의 Shadow Series를 좋아하는 독자가 있음
          + Bean의 리더십 스타일: ""왜 중요한지, 왜 특정 방식으로 하는지 설명함""
          + 응급실도 비슷한 방식으로 운영됨
     * 벨기에의 EMT는 대량 사상자 사건에 대한 계획이 모든 병원에 준비되어 있음
          + 예: 앰뷸런스 구역을 분류 병동으로 변환, 예비 침대 준비, 전용 지휘실 존재
     * 대량 사상자 사건에 대한 계획을 세우는 것이 중요함
     * 방사선사가 X-ray 기술자와 협력할 때 보고서가 더 빨리 생성된다는 것에 놀라움
          + 과거에는 방사선사가 1분 만에 필름 세트를 보고할 수 있었음
          + X-ray 기술자는 시간당 6명의 환자를 처리할 수 있었음
     * 유능한 사람들이 위기 상황에서 문제를 해결하는 것을 좋아하는 독자가 있음
     * 대량 사상자 사건을 위한 분류 태그에 대한 링크 제공
     * 재난 상황에 대한 해결책을 미리 계획하는 것이 중요함
          + 예: prepper-type 포럼/서브레딧을 탐색
     * 재난 심리학과 계획에 관심이 있다면 Amanda Ripley의 ""The Unthinkable""을 추천함
          + 여러 재난 사례와 그 환경을 다룸
          + 재난 피해자의 심리, 개인 및 커뮤니티로서 준비하는 방법에 대한 조언 제공
"
"https://news.hada.io/topic?id=16330","HN 공개: SQLite에서 고정밀 날짜/시간 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 공개: SQLite에서 고정밀 날짜/시간 기능

  고정밀 날짜/시간 확장 기능

   SQLite는 기본적인 날짜 함수들을 제공하지만, 더 많은 기능이 필요하여 sqlean-time이라는 고정밀 날짜/시간 확장 기능을 만들었음. 이 확장은 구조화된 API와 다양한 기능을 제공함.

     참고. SQLite에 확장을 추가하는 것은 매우 간단함. 파일을 다운로드하고 하나의 데이터베이스 명령을 실행하면 됨.

    개념

   이 확장은 두 가지 값 유형을 사용함: 시간(Time)과 기간(Duration).
     * 시간(Time): 초와 나노초로 구성된 쌍으로, 0시간(0001-01-01 00:00:00 UTC) 이후의 초와 현재 초 내의 나노초를 나타냄.
          + 내부 표현으로 시간을 저장할 수 있으며, 이는 수십억 년 전후의 날짜를 나노초 정밀도로 표현할 수 있음.
          + Unix epoch(1970-01-01 00:00:00 UTC) 이후의 초(밀리초, 마이크로초, 나노초)로 시간을 저장할 수도 있음.
          + 시간은 항상 UTC로 저장되고 작동하지만 특정 시간대 오프셋으로 변환 가능.
     * 기간(Duration): 나노초 단위의 64비트 숫자로, 약 290년까지의 값을 나타낼 수 있음.

    시간 값 생성

     * 현재 시간:
select time_fmt_iso(time_now());  -- 2024-08-06T21:22:15.431295000Z

     * 특정 날짜/시간:
select time_fmt_iso(time_date(2011, 11, 18));  -- 2011-11-18T00:00:00Z
select time_fmt_iso(time_date(2011, 11, 18, 15, 56, 35));  -- 2011-11-18T15:56:35Z

    시간 필드 추출

   다양한 날짜/시간 필드를 추출하는 함수들이 있음:
select 'year  = ' || time_get_year(time_now());
select 'month  = ' || time_get_month(time_now());
select 'day   = ' || time_get_day(time_now());

    Unix 시간

   Unix 시간(1970-01-01 UTC 이후의 시간)으로부터 시간 값을 생성하는 함수들:
select time_fmt_iso(time_unix(1321631795));  -- 2011-11-18T15:56:35Z

   시간 값을 Unix 시간으로 변환하는 함수들:
select time_to_unix(time_now());  -- 1722979335

    시간 비교

   시간 값을 비교하는 함수들:
select time_after(time_now(), time_date(2011, 11, 18));  -- 1
select time_before(time_now(), time_date(2011, 11, 18));  -- 0

    시간 연산

   기간을 시간 값에 더하는 함수들:
select time_fmt_iso(time_add(time_now(), 24*dur_h()));  -- 2024-08-07T21:22:15.431295000Z

   기간 상수:
     * dur_us() - 1 마이크로초
     * dur_ms() - 1 밀리초
     * dur_s() - 1 초
     * dur_m() - 1 분
     * dur_h() - 1 시간

    반올림

   지정된 필드의 정밀도로 시간 값을 반올림하는 함수들:
select 'original  = ' || time_fmt_iso(t.v) from t union all
select 'millennium = ' || time_fmt_iso(time_trunc(t.v, 'millennium')) from t;

    포맷팅

   ISO 8601 시간 문자열을 반환하는 함수들:
select time_fmt_iso(time_date(2011, 11, 18, 15, 56, 35, 666777888), 3*3600);  -- 2011-11-18T18:56:35.666777888+03:00

    기간 상수

   일반적인 기간을 나노초로 반환하는 함수들:
select dur_ns();  -- 1
select dur_us();  -- 1000

    감사

   이 확장은 C로 구현되었으며, Go의 표준 라이브러리 시간 패키지(BSD 3-Clause License)를 기반으로 설계 및 구현되었음.

    설치 및 사용법

    1. 최신 릴리스를 다운로드
    2. SQLite 명령줄 인터페이스에서 사용:
sqlite> .load ./time
sqlite> select time_now();

  GN⁺의 정리

     * sqlean-time 확장은 SQLite에 고정밀 날짜/시간 기능을 추가하여 다양한 시간 연산을 가능하게 함.
     * 시간과 기간을 나노초 단위로 처리할 수 있어 매우 정밀한 시간 계산이 가능함.
     * 다양한 시간 포맷팅 및 비교 기능을 제공하여 개발자들이 쉽게 사용할 수 있음.
     * SQLite의 기본 날짜 함수보다 훨씬 더 많은 기능을 제공하여 복잡한 시간 연산을 필요로 하는 프로젝트에 유용함.

        Hacker News 의견

     * Jon Skeet가 문서화한 시간대 변경 및 지역 시간 불연속성의 특별한 경우를 처리하는지에 대한 질문
          + 관련 링크: Stack Overflow
          + Computerphile의 10분짜리 비디오 설명 링크: YouTube
     * 날짜/시간 및 암호화 라이브러리를 직접 구축하지 않는 것이 좋음
          + 끝없는 엣지 케이스가 문제를 일으킬 수 있음
          + 새로운 라이브러리를 접할 때 회의적인 이유
     * 세 가지 다른 시간 표현/크기가 흥미로움
          + 나노초 정밀도가 수십억 년의 기간 동안 필요한 사용 사례가 궁금함
          + 나노초 정밀도로 ±290년 범위만 제공되는 것이 혼란스러움
     * 부호 있는 정수를 사용하는지 여부를 명확히 하는 것이 중요함
          + 문서를 읽어보면 부호 있는 정수일 수도 있고 아닐 수도 있음
          + 부호 있는 정수라면 동일한 날짜와 시간을 나타내는 여러 비트 문자열이 있을 수 있음
     * SQLite3에 확장 가능한 타입 시스템이 있었으면 좋겠음
     * SQLite의 중요한 누락된 기능을 언급하며 매우 멋지다고 평가함
     * 데이터베이스가 단위를 추적해야 한다고 주장함
          + 예를 들어, 시간 열이 float64 초 단위로 나타내는 것을 명시할 수 있어야 함
          + 데이터베이스가 ""2h""를 7200.0초로 변환하고 테이블 스캔 중에 비교할 수 있어야 함
          + 과거에 이런 단위 처리를 하는 특수 목적 SQL 데이터베이스를 작성했지만, 이후로 본 적이 없음
          + 시간뿐만 아니라 질량, 부피, 정보, 온도 등 모든 단위를 처리할 수 있어야 함
          + 수학적 오류를 조기에 잡을 수 있도록 데이터베이스가 수학적 무의미한 연산을 거부하도록 가르칠 수 있음
     * 나노초 표현과 나노 범위 외의 연도 중 어느 것이 더 유용한지에 대한 질문
          + ""정확한"" 과학을 하지 않기 때문에 나노초의 가치는 제한적임
          + 역사적 날짜를 나타낼 수 있는 것이 더 자주 필요할 것 같음
     * golang 스타일의 유닉스 타임스탬프를 나노초 단위로, 부호 있는 int64로 사용하는 것을 제안함
          + 나노초 정밀도로 수백만 년을 커버할 수 없을 수도 있지만, 정말 필요한지 의문임
     * ""epoch 이후 초""라는 표현을 정확히 의미하지 않는 한 사용하지 말아야 한다고 주장함
          + 예시 쿼리: select time_sub(time_date(2011, 11, 19), time_date(1311, 11, 18));
"
"https://news.hada.io/topic?id=16352","매직 웜홀: 안전하게 컴퓨터 간 파일 전송 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       매직 웜홀: 안전하게 컴퓨터 간 파일 전송 기술

     * Magic Wormhole
          + 컴퓨터 간 안전하게 파일을 전송하는 도구
          + 이 패키지는 wormhole이라는 라이브러리와 커맨드라인 도구를 제공함
          + 임의 크기의 파일과 디렉토리 또는 짧은 텍스트를 한 컴퓨터에서 다른 컴퓨터로 전송 가능
          + 두 엔드포인트는 동일한 ""wormhole 코드""를 사용하여 식별됨
               o 일반적으로 송신 컴퓨터가 코드를 생성하고 표시함
               o 수신 컴퓨터에서 코드를 입력해야 함
               o 코드는 짧고 사람이 발음할 수 있는 단어 목록을 사용함
               o 수신 측에서는 코드 단어에 대해 탭 완성을 제공하여 몇 글자만 입력하면 됨
               o wormhole 코드는 일회용이며 암기할 필요 없음
     *
          + PyCon 2016 발표: 슬라이드, 비디오
     * 전체 문서는 https://magic-wormhole.readthedocs.io 또는 docs/ 하위 디렉토리에서 확인 가능
     * 이 프로그램은 두 개의 서버를 사용함
          + 메일박스 서버와 트랜짓 릴레이
          + 소스 코드는 별도의 저장소에 보관됨
     * 라이선스, 호환성
          + Magic-Wormhole은 MIT 라이선스로 배포됨
          + 자세한 내용은 LICENSE 파일 참조
          + 이 라이브러리는 Python 3.8 이상과 호환됨 (버전 3.12까지 테스트됨)
     * 패키징, 설치
          + Magic Wormhole 패키지는 여러 운영 체제에 포함됨
          + 운영 체제 패키지 없이 설치하려면 설치 문서를 참조

GN⁺의 정리

     * Magic Wormhole은 컴퓨터 간 파일 전송을 안전하고 쉽게 할 수 있게 해주는 도구임
     * 사용자는 짧고 발음하기 쉬운 코드를 통해 파일을 전송할 수 있음
     * MIT 라이선스로 배포되며 Python 3.8 이상에서 사용 가능함
     * 비슷한 기능을 가진 다른 도구로는 Syncthing과 Resilio Sync 등이 있음

        Hacker News 의견

     * 몇 년 동안 네트워크 환경에서 큰 파일을 전송할 때 사용해왔음
          + Magic Wormhole relay를 사용하여 더 빠르고 신뢰할 수 있는 파일 복사를 위해 조정할 수 있었음
          + Google Drive가 큰 파일을 처리할 때 자주 실패하는 것이 싫음
     * 이 유틸리티는 하나의 기능을 매우 잘 수행하며 눈에 띄지 않음
          + 이러한 훌륭한 창작물에 더 감사해야 함
     * 비슷한 프로젝트로 croc을 사용하고 있음
          + croc 링크
     * Wormhole을 사용하여 70GB 파일을 전송한 적이 있음
          + 이전에는 불가능했음
          + relay 서버의 대역폭을 사용한 것을 알고 있었고, 이후 Debian에 기부했음
     * 몇 가지 다른 유틸리티도 있음
          + p2pcopy: p2pcopy 링크
          + pcp: pcp 링크
          + wormhole-william: wormhole-william 링크
     * 우연히 발견한 Rust 구현 버전도 있음
          + 새로운 기능과 개선 사항이 포함된 Magic Wormhole의 Rust 구현: magic-wormhole.rs 링크
     * 작성자가 질문에 답변할 준비가 되어 있음
     * 기술에 익숙하지 않은 친구가 큰 파일을 보내야 함
          + GUI 프론트엔드가 있는지 궁금함
     * iPhone과 MacBook 간 파일 전송 방법을 찾고 있음
          + Airdrop은 정책상 비활성화됨
          + iCloud 저장소가 가득 참
          + 다른 모든 장치에서 syncthing을 사용하지만, 작업용 iPhone에서 사용할 수 있는 클라이언트를 찾지 못했음
     * 관련 링크
          + Magic Wormhole: 한 컴퓨터에서 다른 컴퓨터로 안전하게 파일 전송: 관련 링크
"
"https://news.hada.io/topic?id=16370","Neovim을 떠나 Zed로 옮겨갑니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Neovim을 떠나 Zed로 옮겨갑니다

     * 모든 개발자는 자신만의 텍스트 편집기 여정을 가지고 있으며, 현재 사용하는 도구에 도달하는 과정을 겪음. 이러한 이야기들은 흥미롭고, 개발 도구와 그에 투입된 노력에 큰 감사를 표함
     * 이 글은 개발 도구에 관심 있는 사람들에게 자신의 여정을 공유하고, 새로운 도구를 실험해보도록 격려하고자 작성되었음

텍스트 편집기 여정의 시작

     * Atom을 처음 사용하며 HTML, CSS, Javascript의 기본을 배우기 시작
     * VSCode로 전환했으나, 당시 아내가 사진 편집을 위해 노트북을 사용해야 했고, 대신 사용한 맥북이 VSCode의 Electron 빌드로 인해 성능 저하를 겪음
     * 이때 우연히 Vim을 발견하고, 키보드 중심의 작업 흐름과 속도에 매료되어 Vim 학습을 시작
     * 초기에는 Vim RC를 수정하며 사용했으며, 이후 chris@machine의 영상을 통해 Neovim을 알게 됨
     * 수년간 Neovim을 사용하며 높은 생산성을 누림. 많은 시간을 들여 설정을 조정했으나, 결국 설정 변경이 거의 필요 없는 상태에 도달

변화

     * 하지만 시간이 지남에 따라 설정 파일을 계속 간소화해야 했고, 기본적인 기능을 유지하기 위해서도 많은 노력이 필요했음
     * 가끔 플러그인을 업데이트할 때마다 Neovim이 문제가 발생하며, 작업을 중단하고 문제를 해결하는 데 시간을 소비하게 됨. 이를 해결하기 위해 설정을 간소화하려 했으나, 기본적인 기능을 유지하기 위한 노력은 여전히 필요했음
     * 특히 큰 코드베이스에서 작업할 때 Neovim이 느려지고 화면이 멈추는 등 문제가 발생, 생산성에 지장을 줌
     * 다른 터미널 에뮬레이터(Alacritty, Wezterm 등)로 전환을 시도했으나 큰 차이는 없었음
     * 이전에 Zed에 대해 들어본 적 있었으나, 터미널 기반이 아니어서 사용을 중단했음. 하지만 Zed의 속도에 대한 긍정적인 평가를 듣고 다시 시도하기로 결심
     * 2개월 동안 매일 사용하면서, Zed가 매우 만족스러운 경험을 제공했으며, 앞으로도 계속 사용할 계획임. Neovim으로 돌아갈 생각이 없음

Zed 사용 경험

     * Zed를 선택하게 된 이유를 이해하기 위해, 지금까지의 일반적인 사용 경험과 나에게 어떻게 맞췄는지에 대해 설명하고자 함

    모든 것이 ""그냥 잘 작동함""

     * Zed의 가장 큰 장점 중 하나는 ""모든 것이 그냥 잘 작동한다""는 것
     * 특히 언어 서버 프로토콜(LSP)과 같은 기능은 Neovim에서 설정하는 데 많은 시간이 걸리지만, Zed에서는 기본적으로 잘 작동함
     * Zed에서는 ""정의 보기"", ""정의로 이동"", ""코드 작업""과 같은 키 바인딩이 기본으로 제공되며, 대부분의 언어를 지원해 문제가 발생하지 않음

    속도

     * Zed를 선택한 주요 이유 중 하나는 속도였으며, 결과적으로 매우 만족스러웠음
     * 큰 코드베이스에서도 지연 없이 빠르게 작동하며, 지금까지 성능 문제를 경험한 적이 없음
     * Neovim의 속도를 더 빠르게 만들 수 있겠지만, 생산성 향상을 위해 시간을 낭비하는 것보다 Zed를 사용하는 것이 더 나음

    Vim 모드

     * Neovim 사용자로서, VSCode의 Vim 플러그인이 불안정하고 버그가 많아 실망했던 경험이 있음
     * Zed의 Vim 모드는 개발자가 직접 만든 기능으로, 매우 안정적이며 중요한 기능을 잘 지원함
     * 키 바인딩 구조가 매우 유연하며, Vim 사용자들이 좋아할 만한 기능들을 제공함

    AI 기능

     * Zed는 AI 기능도 제공하며, 기본적으로 Copilot이 내장되어 있음
     * OpenAI, Ollama, Anthropic 등의 AI 모델을 API를 통해 사용할 수 있음
     * 코드 일부를 선택하고 ctrl-enter로 AI 어시스턴트를 호출해 코드를 작성하는 인라인 어시스턴트 기능도 유용함

    Zed ≠ Neovim

     * Zed가 Neovim을 완전히 대체할 수는 없음. Neovim은 터미널에 네이티브로 존재하는 것이 큰 강점임
     * 간단한 파일 수정 작업에는 Neovim이 더 편리하지만, 장기적인 세션이나 프로젝트에는 Zed가 완벽함

Neovim 사용자에게 Zed를 맞춤 설정하기

   Zed는 Neovim의 완전한 대체품은 아니지만, Neovim/Vim 사용자에게 익숙한 환경을 제공하기 위해 다양한 작은 설정들을 통해 경험을 크게 개선할 수 있음

    Vim 모드 및 키 바인딩

     * 첫 번째로 할 일은 Vim 모드를 활성화하는 것. Zed는 Vim 모드에 대한 문서 페이지를 제공하며, 기본 Vim 바인딩과 추가 설정 방법을 안내함
     * Zed의 큰 장점 중 하나는 Vim 모드에 따라 키 바인딩을 설정할 수 있다는 점. 예를 들어, ""Normal"" 모드와 ""Visual"" 모드에 다른 키 바인딩을 적용할 수 있음

[
        {
                ""context"": ""Editor && VimControl && !VimWaiting && !menu"",
                ""bindings"": {
                        ""space b"": ""editor::ToggleGitBlame"",
                        ""shift-k"": ""editor::Hover"",
                        ""space l f"": ""editor::Format"",
                        ""space d"": ""diagnostics::Deploy"",
                        ""space f f"": ""file_finder::Toggle"",
                        ""space o"": ""tab_switcher::Toggle"",
                        ""space e"": ""workspace::ToggleLeftDock"",
                        ""space /"": ""workspace::NewSearch"",
                        ""n"": ""search::SelectNextMatch"",
                        ""shift-n"": ""search::SelectPrevMatch"",
                        ""space t"": ""workspace::NewCenterTerminal"",
                        ""g b"": ""editor::ToggleComments"",
                        ""+ +"": ""workspace::Save"",
                        ""space c"": ""pane::CloseActiveItem""
                }
        },
        {
                ""context"": ""Editor && vim_mode == visual && !VimWaiting && !VimObject"",
                ""bindings"": {
                        ""shift-j"": ""editor::MoveLineDown"",
                        ""shift-k"": ""editor::MoveLineUp""
                }
        },
]

     * 또한, Zed에서 패널을 전환하는 키 바인딩을 설정해 Neovim과 유사한 작업 흐름을 만들 수 있음

[
        {
                ""context"": ""Dock || Terminal || Editor"",
                ""bindings"": {
                        ""ctrl-h"": [""workspace::ActivatePaneInDirection"", ""Left""],
                        ""ctrl-l"": [""workspace::ActivatePaneInDirection"", ""Right""],
                        ""ctrl-k"": [""workspace::ActivatePaneInDirection"", ""Up""],
                        ""ctrl-j"": [""workspace::ActivatePaneInDirection"", ""Down""]
                }
        },
]

     * 기본 Vim 키맵을 참고하여 필요한 설정을 조정하는 것도 추천함. 기본 Vim 키맵은 Zed에서 지원하는 내용과 조정할 부분에 대한 유용한 참조 자료임

    간소화된 UI

     * Zed는 이미 최소한의 UI를 제공하지만, Neovim 설정과 더 비슷한 UI를 선호하는 경우, 탭 바, 스크롤 바, 툴바 등을 비활성화할 수 있음

{
        ""cursor_blink"": false,
        ""relative_line_numbers"": true,
        ""scrollbar"": {
                ""show"": ""never""
        },
        ""vertical_scroll_margin"": 0,
        ""tab_bar"": {
                ""show"": false
        },
        ""toolbar"": {
            ""breadcrumbs"": true,
            ""quick_actions"": false
        },
}

    플러그인 대체

     * Zed에서 텔레스코프(Telescope)와 유사한 기능으로 파일이나 버퍼 간의 탐색을 위해 탭 전환기(Toggle)를 사용할 수 있음

{
        ""context"": ""Editor && VimControl && !VimWaiting && !menu"",
        ""bindings"": {
                ""space o"": ""tab_switcher::Toggle"",
        }
}

     * 프로젝트 전체 검색은 텔레스코프의 대체품으로, 다중 버퍼 보기를 통해 결과를 확인하고 쉽게 탐색할 수 있음
     * 터미널 토글은 VSCode와 유사하지만, Zed에서는 메인 편집 뷰에서 버퍼로 터미널을 열 수 있는 옵션도 있음

{
        ""context"": ""Editor && VimControl && !VimWaiting && !menu"",
        ""bindings"": {
                ""space t"": ""workspace::NewCenterTerminal"",
        }
}

     * Tmux와 프로젝트 전환 기능을 완전히 대체할 수는 없지만, Zed의 프로젝트 전환 기능이 이 작업을 상당히 잘 수행함

{
        ""context"": ""Workspace"",
        ""bindings"": {
                ""cmd-k"": [
                        ""projects::OpenRecent"",
                        {
                                ""create_new_window"": false
                        }
                ]
        }
}

Zed를 사용해야 할까?

     * Zed를 시도해볼지 고민 중이라면, 며칠 동안 사용해보는 것을 추천함
     * Zed는 독특하고 유능한 텍스트 편집기이며, 궁극적으로는 생산성을 높여주는 도구가 중요함
     * 그것이 VS Code, JetBrains, 혹은 EMacs가 될 수도 있음
     * 자신에게 가장 적합한 도구를 선택하되, 새로운 것을 시도해보는 데 너무 완고하지 않기를 바람

        Hacker News 의견

     * Zed를 처음에는 좋아했지만, 협업 및 AI 기능에 집중하면서 기본 편집기로서의 기능이 부족해져서 덜 유용해짐
          + 현재는 예전 편집기와 IDE로 돌아갔으며, 나중에 다시 시도할 예정임
     * Helix를 사용하는 이유는 VSCodium에서 Vim이나 Neovim으로 전환하려 했으나 플러그인 설정이 어려웠기 때문임
          + Helix는 바로 작동하여 사용 중이며, 키 바인딩이 직관적이고 Vim 키 바인딩도 익힐 수 있었음
          + 기본 색상 테마가 다소 충격적임
     * 최근 Vim에서 Zed로 전환했으며, Zed가 여러 면에서 훌륭하다고 생각함
          + 그러나 기본 기능에 많은 버그가 있어 AI 통합 등보다 기본 기능에 우선순위를 두었으면 좋겠음
     * Zed를 사용할 때 매우 빠르고 깔끔한 UI를 즐김
          + Git 통합과 원격 지원이 더 좋다면 완전히 전환할 수 있을 것임
     * 6개월 전 VSCode에서 Zed로 전환했으나 최근 Neovim으로 다시 전환함
          + Zed의 Vim 통합 접근 방식을 좋아했으나, 기본 기능 부족과 버그로 인해 Neovim으로 전환함
          + Zed가 성숙해지면 다시 돌아갈 의향이 있음
     * Zed가 더 다듬어지고 안정화되기를 기대함
          + 그때까지는 Sublime Text 4를 사용 중이며, 성능이 뛰어나고 LSP 확장과 Sublime Merge가 VSCode의 빈틈을 메워줌
     * Neovim 배포판을 사용해 보았는지 궁금함
          + LazyVim, AstroVim, NvChad와 같은 배포판은 필요한 플러그인과 통합이 이미 설정되어 있음
     * VSCode에서 진정한 Neovim을 원한다면 vscode-neovim을 확인해 볼 것을 추천함
          + 실제 VIM과 VSCode의 모든 기능을 함께 사용할 수 있음
     * Kakoune와 Helix에 관심을 가지게 되어 VSCode용 모달 편집 확장을 작성함
          + VIM의 대부분의 기능을 지원하며, AST 기반의 새로운 동작과 모드를 추가함
          + 블로그 포스트를 작성할 계획임
     * macOS에서 Zed를 탐험했을 때 빠르고 기능이 풍부한 편집기라는 인상을 받음
          + 그러나 *nix 시스템에서는 vi/vim만큼 보편적이지 않음
          + 다양한 인프라와 배포 제약을 고려할 때, 보편적인 편집기에 집중하는 것이 더 쉬움
          + Zed가 vi/vim의 대안이 될 수 있지만, 대부분의 vi/vim 사용자가 전적으로 전환할 가능성은 낮음

   저도 최근 Helix로 넘어왔습니다.
   Hacker News 의견처럼 기존 NeoVim에서 플러그인을 모두 활용하지 않아서 helix를 테스트해보고 바로 넘어오게 되었는데요. 색상 테마가 정말 충격적이긴 합니다

   기본 테마가 보라보라해서 별로라는 의미이실까요? :eyes:
"
"https://news.hada.io/topic?id=16366","FlightAware 고객 데이터 유출 (이름, 이메일 주소 및 비밀번호)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               FlightAware 고객 데이터 유출 (이름, 이메일 주소 및 비밀번호)

     * FlightAware는 사용자 데이터를 안전하게 보호하지 못하고 모든 것을 유출한 것으로 보이는 기업들의 목록에 합류함
     * FlightAware가 어제 보낸 이메일에 따르면, 사용자 ID, 비밀번호, 이메일 주소, 성명, 청구 주소, 배송 주소, IP 주소, 소셜 미디어 계정, 전화번호, 출생연도, 신용카드 번호의 마지막 4자리 등 거의 모든 고객 데이터가 잠재적으로 노출되었을 수 있음

FlightAware가 사용자에게 보낸 메시지

     * 7월 25일, FlightAware 계정의 개인 정보가 실수로 노출되었을 수 있는 구성 오류를 발견함
     * 노출된 정보에는 사용자 ID, 비밀번호, 이메일 주소 외에도 성명, 청구 주소, 배송 주소, IP 주소, 소셜 미디어 계정, 전화번호, 출생연도, 신용카드 번호 마지막 4자리, 소유한 항공기 정보, 업계, 직책, 조종사 여부, 계정 활동(조회한 항공편, 게시한 댓글 등) 등이 포함되었을 수 있음
     * 노출이 발견되자마자 즉시 구성 오류를 수정했으며, 추가적인 주의를 위해 잠재적으로 영향을 받은 모든 사용자에게 비밀번호 재설정을 요구하고 있음

결론

     * 이런 기업들이 고객 데이터를 공개 웹에 노출되지 않도록 하는 것이 어려운 이유를 모르겠음
     * FlightAware는 잠재적인 데이터 유출을 72시간 이내에 사용자에게 알려야 하는 EU 소비자 보호 규정을 위반했으며, 3주 이상 걸렸음

GN⁺의 의견

     * 데이터 유출 사고는 개인정보 보호와 사이버 보안의 중요성을 다시 한 번 상기시켜 줌. 기업들은 고객 데이터를 안전하게 보호하기 위해 더 많은 노력을 기울여야 함
     * 특히 FlightAware와 같은 항공 관련 기업의 경우, 고객 데이터 유출로 인해 심각한 보안 위협이 발생할 수 있음. 예를 들어 테러리스트가 승객 정보를 악용할 수 있음
     * 데이터 유출 사고 발생 시 신속하고 투명한 대응이 중요함. FlightAware는 EU 규정을 위반하여 사용자에게 적시에 알리지 않았음. 이는 기업의 신뢰도를 떨어뜨릴 수 있음
     * 고객들은 자신의 개인정보를 보호하기 위해 강력한 비밀번호를 사용하고 주기적으로 변경하는 등 기본적인 보안 수칙을 지켜야 함. 또한 의심스러운 이메일이나 링크에 주의해야 함
     * 기업들은 데이터 암호화, 접근 통제, 실시간 모니터링 등 다양한 기술적, 관리적 보안 조치를 취해야 함. 또한 임직원 보안 교육, 위기대응 매뉴얼 마련 등 조직 차원의 대비도 필요함

        Hacker News 의견

     * 개인 정보 유출: 이름, 이메일, 비밀번호 외에도 전체 이름, 청구 주소, 배송 주소, IP 주소, 소셜 미디어 계정, 전화번호, 생년, 신용카드 마지막 4자리, 소유 항공기 정보, 직업, 파일럿 여부, 계정 활동 등이 포함됨
     * FlightAware iOS 앱 지원 중단: iOS 15 지원 중단, 사용자에게 새 폰 구매 요구, 다른 앱들은 여전히 구형 기기에서 작동함
     * 이메일 진위 확인: 비밀번호 유출 언급, 해시 여부 불명확, 공지 이메일 발송까지 3주 소요
     * 평문 비밀번호 유출 가능성: 해시되지 않은 비밀번호 유출 가능성, 사용자에게 큰 피해, 쉽게 예방 가능
          + 편집: 누군가 해시된 비밀번호 저장을 주장함
     * 기술 스택 전환: 8개월 전 TCL에서 기술 스택 전환 블로그 게시, Part 2 찾을 수 없음
     * 추가 링크: 유출 관련 기사 및 자동 응답 트윗 링크 제공
     * 경영진 책임: 경영진이 책임을 져야 함
     * 개인 정보 확인: FlightAware 무료 계정 사용, 이메일 외에 어떤 개인/청구 정보가 있는지 궁금함
     * GDPR 알림 요건: 개인 데이터 유출 시 감독 기관에 72시간 내 통보, 사용자에게는 지연 없이 통보해야 함, FlightAware의 3주 지연 통보는 문제 있음
     * 웹사이트 공지 없음: 공식 Discourse에만 공지됨
"
"https://news.hada.io/topic?id=16311","Postgres에서의 전문 검색: Elasticsearch vs. 대체제들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Postgres에서의 전문 검색: Elasticsearch vs. 대체제들

전문 검색 (Full Text Search)

     * 전문검색은 특정 키워드와 구문의 존재 여부에 따라 텍스트 모음에서 항목을 찾는 기술
     * Elasticsearch와 같은 대부분의 검색 엔진은 검색 결과 순위를 매기기 위해 BM25 알고리듬을 사용
          + BM25는 용어가 얼마나 자주 나타나는지, 그리고 모든 문서에서 해당 용어가 얼마나 고유한지를 고려함
     * 전문 검색은 의미론적 의미로 결과를 검색하고 순위를 매기는 유사성 검색 또는 벡터 검색과는 다름
     * 많은 최신 애플리케이션은 전문 검색과 유사성 검색을 결합하여 사용하는데, 이를 하이브리드 검색이라고 하며 더 정확한 결과를 얻을 수 있음

Postgres FTS

  장점

    1. 단순성
          + Postgres FTS는 추가 인프라가 필요 없으며 AWS RDS와 같은 모든 관리형 Postgres 서비스에서 사용할 수 있음
          + 장기적으로 외부 검색 엔진을 오케스트레이션하고 관리할 필요가 없어 상당한 시간과 고민을 절약할 수 있음
    2. 실시간 검색
          + Postgres FTS에서는 커밋 즉시 데이터를 검색할 수 있음
          + 이는 사용자 대상 검색 경험이나 지연 시간에 민감한 검색 경험을 구축하는 기업(예: 전자상거래 사이트 또는 핀테크)에 매우 유용할 수 있음
    3. Postgres 트랜잭션 및 MVCC
          + Postgres의 ACID 트랜잭션 및 다중 버전 동시성 제어(MVCC)는 동시 액세스 및 빈번한 업데이트 시 FTS 결과의 신뢰성을 보장함

  단점

    1. 기능 불완전성
          + Postgres FTS의 제한된 기능 세트는 일부 기업에게 있어 딜 브레이커가 될 수 있음
          + 누락된 기능으로는 BM25 점수 매기기, 관련성 조정, 사용자 정의 토크나이저, 패싯팅 등이 있음
    2. 대용량 데이터 세트에 대한 성능 저하
          + Postgres FTS는 수백만 행이 있는 테이블에서는 잘 수행되지만, 수천만 행이 있는 테이블에서는 성능이 상당히 저하됨
    3. 트랜잭션 오버헤드
          + 컬럼에 GIN 인덱스를 생성하면 해당 컬럼에 영향을 미치는 트랜잭션에 약간의 지연 시간(일반적으로 밀리초)이 추가됨

  핵심 요약

     * Postgres FTS는 정교한 FTS 쿼리가 필요하지 않은 소규모에서 중간 규모의 테이블 검색에 이상적임
     * ""중간 규모""와 ""정교한""이 의미하는 바는 의도적으로 모호하게 표현되었는데, 이는 성능 요구 사항에 따라 다르기 때문임
     * 다행히 Postgres FTS로/에서 테스트 및 마이그레이션하는 것은 매우 간단함

Elasticsearch

  장점

    1. 포괄적인 기능 세트
          + Elasticsearch는 거의 모든 FTS 쿼리를 처리할 수 있음
          + 엘라스틱 쿼리 DSL(도메인 특화 언어)은 전문 검색 기능의 표준임
    2. 높은 성능
          + 벤치마크에 따르면 Elasticsearch는 기본 배틀 테스트된 Lucene 검색 엔진과 분산 아키텍처 덕분에 수십억 개의 행을 밀리초 단위로 쿼리할 수 있음
    3. 검색 이상의 기능
          + FTS 외에도 Elasticsearch는 분석 쿼리 엔진, 벡터 데이터베이스, 보안 및 관찰 가능성 플랫폼이기도 함
          + 많은 조직에서 Elasticsearch 내에서 여러 서비스를 통합하는 단순성을 즐김

  단점

    1. 신뢰할 수 있는 데이터 스토어가 아님
          + 많은 기업들이 Elasticsearch를 주요 데이터 스토어로 사용하기로 결정한 것을 후회한 경우가 있음
          + 이는 권장하지 않는 방식임. Elasticsearch는 ACID 트랜잭션과 MVCC가 부족하여 데이터 불일치와 손실이 발생할 수 있으며, 관계형 속성과 실시간 일관성이 부족하여 많은 데이터베이스 쿼리가 어려움
    2. ETL 파이프라인 필요
          + Elasticsearch는 신뢰할 수 있는 데이터 스토어가 아니기 때문에 일반적으로 Postgres를 사용하는 조직은 데이터를 Postgres에서 Elasticsearch로 추출, 변환 및 로드(ETL)함
          + ETL 파이프라인의 장애는 모든 종류의 프로덕션 중단으로 이어질 수 있기 때문에 기본 Postgres 스키마의 변경 사항이 파이프라인을 손상시키지 않도록 주의 깊게 유지 관리되어야 함
    3. 데이터 신선도 손실
          + ETL 작업은 시간이 많이 걸리고 주기적으로 실행됨
          + Elasticsearch에 도달하는 데이터는 종종 Postgres보다 몇 시간 늦음
          + Postgres 테이블에 대해 실시간 검색을 수행하는 애플리케이션에는 이것이 금기 사항일 수 있음
    4. 비용
          + 여러 기업에서 Elasticsearch가 가장 큰 소프트웨어 비용 항목이 되었다는 이야기를 듣고 놀람
          + Elasticsearch 클러스터 비용이 급증함에 따라 이러한 많은 기업이 Elasticsearch Cloud에서 자체 관리로 전환했는데, 이는 클라우드 지출을 줄였지만 새로운 문제를 야기함
          + Elasticsearch는 운영, 조정 및 관리가 매우 어려운 것으로 악명 높음
          + 이 조직들은 Elasticsearch 클러스터를 관리하기 위해 (비용이 많이 드는) 엔지니어를 고용함

  핵심 요약

     * Elasticsearch는 운영 오버헤드와 데이터 신선도를 희생하여 우수한 검색 성능을 제공함
     * 보다 경량의 대안으로는 불가능하거나 다른 Elasticsearch 서비스를 사용할 예정인 경우 Elasticsearch를 권장함

대체 검색 엔진

     * 지난 몇 년 동안 Algolia, Meilisearch, Typesense 같은 현대식 검색 엔진이 등장함
     * 이러한 엔진은 일반적으로 사용자 대상 검색 경험을 구축하는 데 사용됨
     * Hacker News 검색도 Algolia에 구축되어 있음
     * 각 서비스는 가장자리에서 차별화되지만 Postgres에 대한 검색을 찾는 개발자에게는 중요한 주의 사항이 있음
     * 이러한 솔루션 중 어느 것도 Postgres를 위해 특별히 구축되지 않음
     * Postgres 사용자는 Elasticsearch와 마찬가지로 이러한 서비스에서 유사한 문제를 경험할 가능성이 있음

최선의 방법이 가능할까?

     * ParadeDB는 Postgres를 위해 구축된 전문 검색 엔진임
     * pg_search라는 확장을 기반으로 ParadeDB는 Postgres 내부에 Rust 기반 Lucene 대안인 Tantivy를 내장함
     * Postgres FTS와 마찬가지로 ParadeDB는 추가 인프라 없이 기존의 자체 관리형 Postgres 데이터베이스에 연결함
     * Elasticsearch와 마찬가지로 ParadeDB는 고급 전문 검색 엔진의 기능을 제공함
     * Amazon RDS와 같은 관리형 Postgres 서비스와의 호환성은 곧 제공될 예정임

   Postgres FTS 가 뭔가 했더니 내장 기능을 말하는 거였군요

   이 친구들 지속적으로 개선하면서 관련 글을 올리고 있어서, 긱뉴스에도 여러번 공유했습니다.

   ParadeDB - PostgreSQL for Search
   pg_bm25 - Postgres에서 Elastic 수준의 품질을 제공하는 Full-Text 검색 확장

   글에서 언급된 paradedb, pg_search, pg_bm25 모두 같은 프로젝트입니다.
"
"https://news.hada.io/topic?id=16379","2GB/s 이상의 속도로 protobuf 파싱하기: C 언어에서 tail calls를 사랑하게 된 이유 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2GB/s 이상의 속도로 protobuf 파싱하기: C 언어에서 tail calls를 사랑하게 된 이유 (2021)

     * Tail Call: 함수가 반환되기 직전에 호출되는 함수 호출. Tail Call 최적화가 발생하면 jmp 명령어가 사용되어 호출 스택을 줄임.
     * 장점:
          + 스택 메모리 사용을 O(n)에서 O(1)로 줄임.
          + 함수 호출의 성능 오버헤드를 제거하여 효율적인 반복 제어 구조로 사용 가능.

  인터프리터 루프의 문제점

     * 문제점:
          + 함수가 커지고 제어 흐름이 복잡해질수록 중요한 데이터를 레지스터에 유지하기 어려움.
          + 빠른 경로와 느린 경로가 섞여 있으면 코드 품질이 저하됨.

  Tail Call을 활용한 인터프리터 루프 개선

     * 해결책: Tail Call을 사용하여 각 작업을 작은 함수로 분리하고, 각 함수가 다음 작업을 Tail Call로 호출.
     * 장점:
          + 레지스터 할당을 제어할 수 있음.
          + 빠른 경로와 느린 경로를 분리하여 코드 품질을 유지.
          + 독립적인 명령어 시퀀스를 최적화 가능.

  한계

     * 비 Tail Call 존재 시 문제: 비 Tail Call이 존재하면 스택 프레임이 생성되고 데이터가 스택에 저장되어 성능 저하.
     * 복잡한 예외 처리: 예외 처리가 복잡한 경우 코드 중복과 복잡성 증가.
     * 이식성 문제: musttail 속성이 표준이 아니므로 모든 컴파일러에서 지원되지 않음.

GN⁺의 정리

     * Tail Call 최적화는 성능 향상에 중요한 역할을 하며, 특히 Protobuf 파싱에서 큰 성과를 보임.
     * 이 기술은 C로 작성된 주요 언어 인터프리터(Python, Ruby, PHP, Lua 등)에도 적용 가능.
     * musttail 속성의 이식성 문제는 해결해야 할 과제.
     * 비슷한 기능을 제공하는 프로젝트로는 LuaJIT, wasm3 WebAssembly 인터프리터 등이 있음.

        Hacker News 의견

     * C 표준 제안서에는 ""return goto (expression);"" 형태로 꼬리 호출을 포함하고 있음
          + [[musttail]]을 표준화하는 것보다 로컬 객체의 수명이 보장되어 광범위한 탈출 분석이 필요하지 않음
     * Rust 애호가들을 위해 ""become"" 키워드를 추가하는 오래된 RFC가 있었음
          + 2018년 에디션 목표에 집중하기 위해 연기되었으나 최근 다시 논의되고 있음
          + 다시 등장할 가능성이 있음
     * C++에서 해석기가 속도를 높이는 방법은 주로 계산된 goto를 사용하는 것임
          + 호출 규약 문제를 피할 수 있음
          + 계산된 goto 스타일이나 꼬리 스타일을 사용하면 분기 예측기 압력을 줄일 수 있음
     * 꼬리 호출을 사용하여 컨텍스트를 전환하는 문제는 호출 규약을 사용하는 함수가 필요함
          + 함수 종료 시 상태를 복원하기 위해 레지스터를 낭비함
          + luajit 리메이크 블로그에서 대안과 분석을 제공함
     * [[musttail]] 속성이 GCC, Visual C++, 다른 인기 있는 컴파일러로 확산되기를 희망함
          + [[musttail]] 속성이 GCC에 추가되는 과정에 있음
     * C++ 지원을 언급하며, C++에는 꼬리 호출이 거의 없음을 지적함
          + 예를 들어, 소멸자가 있는 클래스의 객체를 반환하는 경우 꼬리 호출이 아님
     * C++ [[musttail]] 함수에서 예외를 던지면 어떻게 되는지 궁금해함
          + 예외 스택이 완전히 분리되는지 질문함
     * 단순한 예제는 좋은 코드 생성을 위해 __attribute__((musttail))이 필요하지 않음을 언급함
          + 오류 처리 함수 호출 속도에 크게 신경 쓰지 않을 것임
          + 특정 구조가 신뢰할 수 있는 점프 테이블을 생성함
     * 트램폴린을 사용하여 반환하는 함수 포인터를 외부 루프에서 호출하는 방식의 속도를 궁금해함
          + 이 방식은 이식 가능한 C의 장점을 가짐
     * [[musttail]]로 래핑된 예외 경로의 예를 명확히 해달라는 요청이 있음
          + [[musttail]]이 스택 프레임 구성과 레지스터 스필링을 방지하는 이유를 설명함
          + 예외 경로가 실제로 호출될 때만 스택 프레임 구성과 레지스터 스필링이 발생함
          + 예외 경로가 드물게 호출되므로 성능에 큰 영향을 미치지 않음
          + 분기 예측 효과로 인해 추가 작업 가능성이 빠른 경로를 느리게 만들 수 있음
"
"https://news.hada.io/topic?id=16375","한국의 네트워크 관련 비용(망 사용료로 불리는 트렌짓 비용, 데이터 전송 비용 등)은 해외 대비 비싼가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       한국의 네트워크 관련 비용(망 사용료로 불리는 트렌짓 비용, 데이터 전송 비용 등)은 해외 대비 비싼가?

     * 클라우드플레어, 트위치는 한국 네트워크 관련 비용이 10배 이상이 넘는다고 주장하였음. 이들의 공통점은 자체 자율 시스템(Autonomous System, 이하 AS)를 굴린다는 것이며, 통신사한테 피어링 내지 트랜짓 관계를 맺으며, 트랜짓을 사는 회사임.
     * 트위치는 10배 비싸다는 얘기만 하고 디테일한 얘기는 안했지만 클라우드플레어쪽의 말에 의하면 트랜짓 비용이 비싸고 무정산 피어링을 안해준다고 함. 자체 AS를 굴리는 회사가 이구동성으로 10배 이상 비싸다고 말하는 것을 보면 자체 AS를 가진 사업자(구글, 넷플릭스 등)의 네트워크 관련 수수료는 한국에 가혹하다고 볼 수 있음.
     * 실제로 자체 AS를 가진 CDN 사업자는 별도의 계약을 맺지 않으면 한국 서버를 해주지 않거나 한국 관련 트래픽에 대한 비용을 비싸게 받습니다. 클라우드플레어도 마찬가지고 Gcore도 유료 플랜 가입이 아니라 별도의 계약을 하는 플랜을 가입해야지만 한국 PoP를 주는 모양이며, 해당 글의 작성자는 실제로 서울에 연결되지 않는다는 이유로 환불을 받은 적이 있음.
     * 근데 통신사 그리고 한국 언론들은 해외대비 그렇게 비싸지 않다고 하지만, 패스틀리, 마이크로소프트 등의 자체 AS를 가진 CDN 사업자는 보통 별도의 계약을 맺지 않으면 한국 서버를 해주지 않거나 한국 관련 트래픽에 대한 비용을 비싸게 받음.
          + 애저의 최신 CDN인 프론트 도어의 한국 네트워크 전송 비용은 전 세계에서 제일 비쌈. 일반 azure CDN의 가격은 아시아랑 똑같은데 레거시 취급이며, 동적 사이트 가속 등을 지원하지 않고 보안 관련 기능도 프론트 도어 대비 떨어짐.
          + 자체 AS가 있는 CDN 중에서 타 아시아 지역과 동일한 요금을 받는것으로 확인된 것은 아마존 클라우드프론트 뿐. 하지만 아마존 클라우드프론트도 언제 한국 전용 요금 테이블을 추가할지 모름.
          + 글로벌 CDN 중에서 한국 요금과 아시아 요금을 같은 케이스는 작성자가 본 케이스 중에서는 클라우드프론트를 제외하면 자체 AS가 아닌 타 AS를 빌린 CDN 업체. 주거로 비유하자면 자체 AS를 가진 CDN은 대단지 아파트, 그렇지 않은 CDN은 빌라라고 볼 수 있음.
     * 통신사, 몰상식한 기자 등이 트위치 망 사용료가 10배 비싸다고 하면서 CDN 요금표 등으로 트위치 주장이 틀렸다는 것 마냥 말하는 것은 주거에 빗대자면 단독주택 거주료가 비싸다가 말한 사람한테 공동주택 거주료 자료 내놓고 비싸지 않다라고 말하는 꼴.
     * 자체 AS이 아닌 CSP에 서버를 두거나 CDN을 써도 한국 네트워크 요금이 비싸니 CDN을 쓰는 해외 CP 중에서 한국 PoP를 비활성 한 것으로 추정되는 CP도 있음.
          + X (구. 트위터)가 대표적인 케이스인데, X는 다양한 CDN 업체를 사용하는 것으로 보이지만 그 중에서는 패스틀리도 있음. 패스틀리는 한국 PoP가 있지만 패스틀리로 연결됨에도 불구하고 일본 PoP로 연결됨. 즉, X가 한국 PoP를 비용 부담 등으로 비활성화 했다는 추론이 가능.
     * 즉, 한국의 네트워크 관련 비용은 해외 대비 비싸다는 명제는 사실이고, 자체 AS를 가진 CDN 요금표와 한국 PoP 사용 가능 여부, 자체 AS를 가진 사업자가 한국 네트워크 비용을 직접적으로 말 할때 이구동성으로 한국 네트워크 관련 비용이 10배 넘다고 한 것을 보아 한국에서 자체 AS를 가진 IT 기업 입장에서는 한국이 독보적으로 비싼 국가라는 것을 추론할 수 있음. 주거로 비유하자면 한국의 단독주택 거주료는 타 국가 대비 10배 이상 비싸고 공동주택 거주료 또한 땅값 등의 요인으로 타 국가 대비 비싸고 특히 이는 브랜드 아파트에는 더욱 두드러진다고 보면 됨.
     * 클라우드플레어는 망 사용료 비싸진 원인이 상호접속고시 때문이라고 하는데 2016년 상호접속고시 개정은 확실히 네트워크 비용이 비싸진 요인임. 하지만 상호접속고시 자체가 잘못된 것은 아님. 상호접속고시 자체는 통신사를 규제하기 위해서 만든 규제로 당시 정보통신정책연구원(KISDI)은 “당시 접속 거부, 접속용량 증설 지연, 접속회선과 중계접속서비스 끼워팔기, 풀 라우팅 제한, 상호접속협정 투명성 부족 등 이슈가 제기됐다”고 함. 클라우드플레어가 상호접속고시 자체를 부정적으로 보는 것은 정부의 간섭에 매우 부정적인 미국의 정서가 반영되었다고 보면 됨.

   한국 통신사들이 높은 망 사용료를 부과하는 것은 단순히 비용 문제가 아니라, 독점적 지위를 이용해 수익을 극대화하려는 행태로 보여서 맴이 불편하군요.. 통신사들이 높은 비용을 정당화하기 위해 법적제약사항들을 핑계로 삼는 것은 책임회피에 불과하다고 생각합니다.

   한국은 상호접속고시 뿐만 아니라 갖가지 법들이 통신사 얽매고 있어서 그런 비용들이 다 반영될 수밖에 없음. 통신사도 어쩔 수 없이 높은 가격을 책정해야 하는거고

   사람들이 일방적으로 통신사 욕만 하는데, 통신사가 그렇게 해야 하는 이유를 계속 파보면, 우리나라의 이상한 법들이 있고 이게 근본 원인.

   발신자종량제가 입법된 것을 보면 ISP와 정치권 간의 이해관계가 전혀 없는 건 아닌 것 같습니다. 이해관계가 완전히 독립적이라면 ISP에 유리한 법을 왜 만들어줄까요

   어떤 법리적인 문제가 있나요? 2016 상호접속고시 개정은 솔직히 말해서 통신사들 목소리 반영된 거고요.

   법리적인 문제에 대한 보충자료입니다 https://www.lawtimes.co.kr/news/181288

   이건 망사용료 법률 반대하는 법이고요.

   주장은 망사용료 법률 반대가 맞습니다. 다만 입법 내용이 CP와 ISP간의 계약 내용과 연관성이 있고, 상호접속 무정산 원칙에 반하는 상호접속고시와 발신자종량제 내용이 있기 때문에 다른 분들께 도움이 될 거라고 생각해서 링크했습니다
"
"https://news.hada.io/topic?id=16286","현대적인 TUI Framework 구축에서 배운 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     현대적인 TUI Framework 구축에서 배운 것들

현대 TUI 프레임워크를 구축하며 배운 7가지

  터미널은 빠름

     * 현대 터미널 에뮬레이터는 매우 정교한 소프트웨어임
     * 하드웨어 가속 렌더링을 사용하여 화면 깜박임을 줄일 수 있음
     * 깜박임을 줄이는 세 가지 트릭:
          + 화면을 지우지 말고 덮어쓰기
          + 표준 출력으로 한 번에 쓰기
          + Synchronized Output 프로토콜 사용
     * Textual은 60fps를 기본으로 사용하여 매끄러운 애니메이션을 제공함

  DictViews는 놀라움

     * Python의 dicts의 keys()와 items() 메서드는 KeysView와 ItemsView를 반환함
     * ItemsView 객체의 대칭 차이를 사용하여 변경된 항목을 쉽게 찾을 수 있음
     * Textual에서는 CSS 속성이 변경될 때 최적화된 업데이트를 위해 사용됨

  lru_cache는 빠름

     * functools 모듈의 @lru_cache 데코레이터는 함수의 반환 값을 캐시함
     * Textual에서 자주 호출되는 작은 함수에 @lru_cache를 사용하여 성능을 향상시킴
     * 캐시 정보(cache_info())를 확인하여 캐싱이 효과적인지 확인해야 함

  불변 객체가 최고

     * Python의 튜플, NamedTuples, 또는 frozen dataclasses를 사용하여 불변 객체의 이점을 얻을 수 있음
     * 불변 객체를 사용하면 부작용이 없는 코드를 작성할 수 있어 테스트와 캐싱이 쉬워짐

  유니코드 아트는 좋음

     * 유니코드 박스 문자를 사용한 다이어그램은 문서화에 매우 유용함
     * 잘 작성된 docstring과 함께 사용하면 큰 도움이 됨

  분수는 정확함

     * Python의 fractions 모듈은 부동 소수점 오류를 피할 수 있음
     * Textual에서 화면을 비율에 따라 나눌 때 분수를 사용하여 정확한 레이아웃을 구현함

  이모지는 끔찍함

     * 터미널에서 이모지 지원은 예측할 수 없고 복잡함
     * 유니코드 데이터베이스를 사용하여 이모지의 너비를 확인하지만, 최신 이모지는 예측할 수 없는 결과를 초래할 수 있음
     * 멀티 코드포인트 이모지는 더 큰 문제를 야기함

GN⁺의 정리

     * 이 글은 Python 터미널 애플리케이션 개발 시 유용한 팁과 트릭을 제공함
     * Textual 프레임워크의 개발 경험을 통해 얻은 실용적인 조언을 공유함
     * 이모지와 같은 복잡한 문제를 다루는 방법을 설명하여 개발자들에게 도움이 됨
     * 비슷한 기능을 가진 프로젝트로는 urwid와 prompt_toolkit이 있음

        Hacker News 의견

     * TUI 개발자는 유니코드와 국제 문자 및 이모지 처리를 별도의 프로젝트로 다루게 됨
          + rivo/tview와 rivo/uniseg 패키지에서 동일한 문제를 겪음
          + 각 TUI 라이브러리 유지 관리자는 고유한 해결책을 개발함
          + 문자 너비가 표준화되지 않아 터미널이 복잡함
          + OP는 유니코드 9만 지원함 (현재 유니코드 버전은 15.1)
          + 결국 사용자는 특정 이모지나 국제 문자가 제대로 렌더링되지 않는다고 불평할 것임
     * Textual이 React를 모방하려는 점이 불만임
          + React는 인기 있는 프레임워크이지만, 사용자 인터페이스를 만드는 좋은 방법은 아님
          + 기본적인 반응형 디자인은 잘 알려진 방법임
          + CSS를 사용하는 것은 과도한 것 같음
          + React 모델은 이미 CSS의 개념을 많이 깨뜨림
          + CSS를 사용하지 않아도 된다면 괜찮음
     * Textual을 사용해 본 결과, CSS를 사용해야 함
          + 좋은 표준 컴포넌트가 없어서 직접 만들어야 함
          + Python 클래스가 아닌 외부 스타일 시트를 사용함
          + 이러한 이유로 Textual은 아직 나에게 맞지 않음
          + Python에서는 하나의 명확한 방법이 있어야 함
          + React를 너무 밀접하게 모방하여 JavaScript 커뮤니티의 단점을 반영함
     * 이 TUI는 예쁘지만 실제로 사용할 상황이 떠오르지 않음
          + 최소한의 기능에 만족하거나 바로 GUI를 사용함
          + YouTube 링크에서 셀 강조 표시가 가능한 테이블을 보여줌
          + TUI에서 왜 필요한지 이해되지 않음
          + 결국 제대로 된 GUI가 필요할 것임
     * kitty는 더 많은 기능을 제공함
          + YouTube 링크
          + Notcurses
     * 소프트웨어 엔지니어가 TUI에 왜 그렇게 관심을 가지는지 이해되지 않음
          + 좋은 명령줄 프로그램을 좋아하지만 TUI는 매력적이지 않음
     * Monodraw는 MacOS 전용이지만 다른 플랫폼에도 좋은 대안이 있음
          + ascii-draw
     * ""덮어쓰기, 지우지 않기""는 과거 게임 개발 방식임
          + DirectX 이전에는 프레임 버퍼에 직접 쓰고 변경된 부분만 다시 그렸음
     * 터미널에서 커서 위치를 확인하여 유니코드 버전을 추정하는 방법이 있음
          + 터미널이 이모지를 예측할 수 없게 렌더링함
          + 문자열 너비를 결정할 때마다 이 방법을 사용할 수 있음
          + wcwidth에 짜증이 나서 이 방법을 사용한 적이 있음
     * 여러 TUI 라이브러리를 평가한 결과, FTXUI가 가장 사용하기 쉽고 신뢰할 수 있었음
          + FTXUI
          + 키보드와 마우스를 지원하는 대화형 대시보드를 만드는 데 유용함
"
"https://news.hada.io/topic?id=16389","Show GN: mlut - Sass와 인체공학이 적용된 원자 CSS 툴킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: mlut - Sass와 인체공학이 적용된 원자 CSS 툴킷

   안녕하세요, GN 커뮤니티 여러분!

   제 오픈소스 프로젝트인 mlut에 대해 말씀드리고자 합니다. 이 프로젝트는 복잡한 스타일을 만들기 위한 Sass와 인체공학적 디자인을 갖춘 Atomic CSS 툴킷입니다.
     * 강력한 명명 규칙
     * 거의 임의적인 구문
     * 뛰어난 인체공학
     * 편리한 확장 기능

   기능에 대한 자세한 분석은 GitHub의 readme에서 확인할 수 있습니다. 기술적인 부분을 더 자세히 살펴보고 싶으시다면 이 문서: https://dev.to/mr150/atomic-css-deep-dive-1hee 를 참조하세요. 대규모 JavaScript 컨퍼런스에서 제가 강연한 내용을 녹취한 것입니다 (HolyJS).

   그동안 이 도구의 몇 가지 기능을 더 소개해드리겠습니다:
     * Sass로 작성되었으며 모든 이점을 포함합니다.
     * JIT(온디맨드) 및 AOT 모드를 사용할 수 있습니다.
     * 완전 사용자 정의 가능: 토큰, 유틸리티 이름 및 모든 설정 변경 가능
     * 기존 프로젝트에 쉽게 통합. 대부분의 프로젝트에서 CSS와 이름 충돌 없음

   프로젝트의 역사에 대해 조금 더 자세히 알고 싶으시다면 이 글을 참조하세요: https://dev.to/mr150/…

   피드백, 특히 GitHub에서 별점을 주시면 감사하겠습니다!
"
"https://news.hada.io/topic?id=16321","텍사스, GM을 상대로 운전자 개인 정보 불법 수집 및 판매 혐의로 소송 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             텍사스, GM을 상대로 운전자 개인 정보 불법 수집 및 판매 혐의로 소송 [pdf]
"
"https://news.hada.io/topic?id=16289","해커톤에서 시작된 생성형AI 서비스 그 후 1년의 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     해커톤에서 시작된 생성형AI 서비스 그 후 1년의 기록

   전에 GeekNews에서도 한 번 소개한적 있는 서비스인데요,

   벌써 개발을 시작한지 1년이 다 되어가서 그동안의 일들을 한 번 정리해보았습니다.

   다른 일들로 인해 1년 내내 풀타임으로 개발하지는 못했지만,

   사이드 프로젝트 혹은 1인 창업으로 자신만의 서비스를 개발하려는 분들에게 조금이나마 참고가 되길 바랍니다.
"
"https://news.hada.io/topic?id=16393","Ollama, Tool 호출 지원 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Ollama, Tool 호출 지원

     * Ollama는 이제 Llama 3.1과 같은 모델에서 툴 호출을 지원함
     * 모델이 자신이 알고 있는 툴을 사용해 주어진 프롬프트에 답할 수 있게 하여 더 복잡한 작업을 수행하거나 외부 세계와 상호작용할 수 있음
          + Tool 들 : 함수 및 API, 웹브라우징, 코드 인터프리터
     * 툴 호출을 활성화하려면 Ollama API의 tools 필드를 통해 사용 가능한 툴 목록을 제공해야 하며,
       지원되는 모델은 이제 tool_calls 응답으로 답변함. 툴 응답은 tool 역할의 메시지를 통해 제공될 수 있음
     * 지원되는 모델 : Llama 3.1, Mistral Nemo, Firefunction v2, Command-R +
     * Ollama의 OpenAI 호환 엔드포인트도 이제 툴을 지원하며, Llama 3.1 및 다른 모델로 전환하여 사용할 수 있음
     * 향후 개선 사항
          + 스트리밍 툴 호출: 여러 툴이 반환될 때 더 빠르게 작업을 시작할 수 있도록 툴 호출 스트리밍 지원
          + 툴 선택: 모델이 특정 툴을 사용하도록 강제 가능

   https://news.hada.io/topic?id=13436
   phidata와 같은 기능이군요? 이쪽은 docstring 잘 명세하면 됐는데, gpt가 아니면 tool 사용을 못하더라구요.
"
"https://news.hada.io/topic?id=16344","ImRAD, ImGui 라이브러리용 GUI 빌더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ImRAD, ImGui 라이브러리용 GUI 빌더

ImRAD

   ImRAD는 ImGui 라이브러리를 위한 GUI 빌더임. C++ 코드를 생성하고 파싱하여 애플리케이션에서 직접 사용할 수 있음. ImRAD는 Windows, Linux, MacOS에서 실행 가능함.

  특징

   ImRAD는 활발히 개발 중이며 주요 특징은 다음과 같음:
     * 다양한 창 디자인 지원
          + 플로팅 창, 팝업 및 모달 팝업. ImGui 백엔드와 독립적임
          + GLFW 통합을 통한 MainWindow. ImRAD는 ImGui 창을 OS 창과 동기화하는 GLFW 호출을 생성함 (제목 표시줄, 크기 조정 가능 플래그, 자동 크기 조정 등)
          + Activity. 전체 뷰포트 영역을 채우는 장식 없는 창. 주로 안드로이드 앱에 사용됨
          + 일반적인 main.cpp를 생성하는 GLFW 템플릿 포함
          + 일반적인 MainActivity.java + manifest + main.cpp를 생성하는 안드로이드 템플릿 포함
     * 다양한 위젯 지원
          + Text, Checkbox, Combo, Button, Slider, ColorEdit 등의 기본 위젯
          + Child, Table, CollapsingHeader, TreeNode, TabBar 등의 컨테이너 위젯
          + Splitter 같은 특이한 위젯
          + MenuBar 및 컨텍스트 메뉴 편집
          + 사용자 코드용 CustomWidget (플레이스홀더)
     * SameLine/Spacing/NextColumn을 사용한 레이아웃 생성
          + 이는 위젯이 항목 간격 및 프레임 패딩을 일관되게 준수하도록 보장함
          + 부모-자식 위젯 간의 명확한 관계와 자식 순서가 중요함
     * 박스 레이아웃 지원
          + ImGui 기능 위에 구현된 강력하고 사용하기 쉬운 레이아웃 메커니즘
          + 수평 또는 수직 방향으로 크기 조정 가능한 위젯을 스트레치 가능
          + 정렬을 위해 스페이서를 삽입 가능
          + 테이블 레이아웃 헬퍼를 사용하여 수평 레이아웃 생성 가능
     * 속성 바인딩 지원
          + 클래스 변수는 간단한 클래스 마법사 또는 바인딩 대화 상자를 통해 관리 가능
          + 속성 바인딩을 통해 생성된 UI는 동적이면서도 동시에 설계 가능
     * 이벤트 핸들러 및 기타 지원 코드 생성
          + 예를 들어, 모달 대화 상자는 OpenPopup 멤버 함수와 대화 상자가 닫힐 때 호출되는 람다 콜백을 생성함
          + 이벤트 핸들러는 사용자 코드와 생성된 부분을 분리하여 디자이너가 계속 작동하도록 함
     * 생성된 코드는 주석 마커로 구분되며 사용자는 추가 코드를 자유롭게 추가 가능
          + 종속 팝업 Draw 호출을 하거나 변수를 계산하는 데 사용 가능
          + 사용자 코드 콜백을 호출하는 CustomWidget 사용 가능
     * 대상 창 스타일은 완전히 구성 가능
          + ImGui에서 제공하는 기본 스타일 외에도 사용자가 새로운 스타일을 정의하고 style 폴더에 INI 파일로 저장 가능
          + ImRAD는 UI 설계 시 스타일 설정을 따름
          + 저장된 스타일은 간단한 imrad.h 함수를 사용하여 애플리케이션에서 로드 가능
     * 생성된 코드는 프로젝트에서 바로 사용 가능하며 ImGui 라이브러리와 하나의 헤더 파일 (imrad.h)만 필요함
          + MainWindow 또는 Image 위젯과 같은 일부 기능은 GLFW 종속성이 필요함. IMRAD_WITH_GLFW로 컴파일하여 활성화 가능
          + 현재 Image 위젯은 stb 라이브러리도 필요함. IMRAD_WITH_STB로 컴파일하거나 LoadTextureFromFile()을 제공해야 함
          + 인기 있는 fmt 라이브러리에 대한 선택적 지원은 IMRAD_WITH_FMT를 정의하여 활성화 가능. 이는 모든 문자열 속성에 형식 지정 플래그를 사용할 수 있게 함
     * ImRAD는 열린 파일의 변경 사항을 추적하여 IDE에서 파일을 설계하고 편집할 수 있음
          + 자동 저장 기능이 유용할 수 있음

  라이선스

     * ImRAD 소스 코드는 GPL 라이선스 하에 있음
     * 도구에 의해 생성된 코드는 GPL에서 제외되며 오픈 소스 또는 상업 프로젝트에 포함될 수 있음. 사용자가 라이선스를 결정함
     * imrad.h도 GPL 라이선스에서 제외됨

  다운로드

   최신 버전은 CMake를 사용하여 저장소를 클론하고 빌드하여 얻을 수 있음. 3rdparty 디렉토리의 서브모듈도 가져와야 함. 다소 오래된 버전은 Releases에서 다운로드 가능함

GN⁺의 정리

     * ImRAD는 ImGui 라이브러리를 위한 강력한 GUI 빌더로, 다양한 창과 위젯을 지원함
     * 속성 바인딩과 이벤트 핸들러 생성 기능을 통해 동적이고 유연한 UI 설계가 가능함
     * 생성된 코드는 프로젝트에서 바로 사용 가능하며, 다양한 종속성을 지원함
     * ImRAD는 활발히 개발 중이며, 사용자가 자유롭게 스타일을 정의하고 저장할 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Qt Designer와 Dear ImGui가 있음

        Hacker News 의견

     * 이 프로젝트의 가장 놀라운 부분 중 하나는 C++의 하위 집합을 처리하는 핸드롤드 파서를 단일 헤더 파일로 구현한 것임
     * dear-imgui의 창시자가 ""dear""로 명명했다고 했으므로 ""Dear library""라고 불러야 함
          + IMGUI는 즉시 모드 GUI를 의미하며, 창시자는 다른 IMGUI인 ""simgui""에서 영감을 받았다고 함
     * Visual Basic에 대한 향수가 느껴지지만, 이것은 imgui의 케이크 위에 아이싱을 얹은 것 같음
     * wasm html5 앱으로 브라우저에서 GUI를 빠르게 만들고 결과를 편집기에 복사하여 붙여넣는 것도 멋질 것임
          + 이 도구는 C++ 코드를 생성하고 파싱하여 애플리케이션에서 직접 사용할 수 있음
     * 지난 몇 년 동안 ImGui C++ 앱을 작업해왔는데, 이 도구가 많은 시간을 절약해 줄 수 있었을 것임
     * pyimgui 바인딩을 사용할 때, 생성된 C++ 코드를 Python에서 사용할 수 있는지 궁금함
     * 왜 ImGui 자체에 GUI 빌더가 구현되지 않았는지 궁금함
     * ImGui로 프로젝트를 작업하면서 이런 도구가 있으면 좋겠다고 생각했는데, 꼭 시도해볼 것임
     * Steam은 인기 있는 크로스 플랫폼 시스템인데, 비게임 애플리케이션이나 엔터프라이즈 애플리케이션에도 사용할 수 있을지 궁금함
     * 너무 많은 sudo 명령이 있는 것 같지만, 전체적으로 매우 멋져 보임
"
"https://news.hada.io/topic?id=16359","Microsoft Authenticator 결함으로 MFA 계정 덮어쓰기, 사용자 잠금 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Microsoft Authenticator 결함으로 MFA 계정 덮어쓰기, 사용자 잠금 현상

  Microsoft Authenticator의 문제점

     * Microsoft Authenticator는 새로운 계정을 QR 코드로 추가할 때 기존 계정을 덮어쓰는 문제가 있음
     * 이로 인해 사용자들은 계정에 접근할 수 없게 되어 큰 불편을 겪음
     * 문제의 원인은 Microsoft Authenticator가 사용자 이름만을 사용하여 계정을 식별하기 때문임
     * Google Authenticator 등 다른 앱들은 발급자의 이름을 추가하여 이 문제를 피함

  문제의 심각성

     * Microsoft Authenticator는 동일한 사용자 이름을 가진 계정을 덮어쓰며, 이는 이메일 주소를 사용자 이름으로 사용하는 경우가 많아 발생함
     * 덮어쓰기가 발생하면 어떤 계정이 덮어써졌는지 알기 어려움
     * 사용자는 나중에 계정을 사용하려 할 때 이 문제를 인지하게 됨

  해결 방법

     * 다른 인증 앱을 사용하는 것이 가장 쉬운 해결책임
     * QR 코드 스캔 대신 수동으로 코드를 입력하는 방법도 있음
     * 이 문제는 Microsoft Authenticator가 출시된 2016년부터 존재해 왔음

  사용자 불만

     * 2020년부터 이 문제에 대한 불만이 제기되었으나, Microsoft는 이를 해결하지 않음
     * 수동으로 정보를 입력하는 방법은 기업 환경에서는 비효율적임

  Brett Randall의 사례

     * 호주 IT 컨설턴트 Brett Randall은 최근 이 문제를 LinkedIn에 게시함
     * QR 코드를 스캔할 때 Microsoft Authenticator가 다른 애플리케이션의 TOTP 키를 덮어쓰는 문제를 설명함
     * 다른 인증 앱들은 발급자와 라벨을 결합하여 고유 ID를 생성하지만, Microsoft는 라벨만 사용함

  전문가 의견

     * 여러 보안 및 IT 전문가들이 이 문제를 재현할 수 있었음
     * Wallarm의 제품 부사장 Tim Erlin은 이 문제로 인해 사용자가 잠기게 되며, 이는 설계 결함이라고 언급함
     * Netography의 최고 제품 책임자 David Meltzer는 이 문제를 직접 경험하고 이를 버그로 간주함

  Microsoft의 입장

     * Microsoft는 이 문제를 기능으로 간주하고 사용자나 발급자의 잘못으로 돌림
     * Microsoft는 사용자에게 계정 설정을 덮어쓸 것인지 확인하는 메시지를 제공한다고 주장함
     * 그러나 이 메시지는 사용자가 덮어쓰기를 진행하도록 유도함

  해결책 제안

     * Brett Randall은 모든 애플리케이션의 otpauth를 감사하거나 Microsoft가 문제를 해결해야 한다고 제안함
     * 14개의 다른 인증 앱을 테스트한 결과, Microsoft Authenticator만 이 문제를 겪음

  GN⁺의 정리

     * Microsoft Authenticator는 새로운 계정을 추가할 때 기존 계정을 덮어쓰는 문제가 있음
     * 이 문제는 사용자와 기업에 큰 불편을 초래하며, 다른 인증 앱들은 이 문제를 피할 수 있음
     * Microsoft는 이 문제를 해결하지 않고 사용자나 발급자의 잘못으로 돌림
     * 이 문제를 피하기 위해 다른 인증 앱을 사용하는 것이 권장됨

        Hacker News 의견

     * Microsoft Authenticator를 선택하는 이유는 Microsoft가 강제로 사용하게 만들기 때문임
          + 다른 OTP 앱을 사용하지 못하게 하고, 관리자가 이를 비활성화할 수 있는 도구를 제공하지 않음
          + QR 코드가 표준 TOTP가 아니어서 다른 클라이언트가 이를 거부함
          + ""다른 앱 사용"" 링크를 통해서만 실제 TOTP QR 코드를 얻을 수 있음
     * 보안과 사용성 문제는 큰 문제임
          + 비밀번호 변경 주기, 복잡한 비밀번호 규칙, 문서화되지 않은 비밀번호 요구사항 등 사용자가 겪는 불편함이 많음
          + 보안 시스템 자체의 취약성으로 인해 데이터 유출이 빈번하게 발생함
     * Microsoft에서 받은 이메일이 피싱처럼 보였음
          + MFA를 활성화하라는 이메일을 받았지만, 실제로는 Microsoft와 관련된 조직을 관리하지 않음
          + 이메일에 이름이나 조직명이 없고, UUID만 포함되어 있음
     * Microsoft Authenticator가 레이블 기반으로 항목을 저장하는 것에 대한 의문
          + 내부 키를 생성하지 않으며, 웹사이트가 발급자 필드에 정보를 넣지 않으면 문제가 발생함
          + Microsoft 내부에서 실제로 Authenticator를 사용하는지 의문임
     * Safari의 버그로 인해 GitHub 계정 접근을 잃은 경험
          + Safari가 경고 없이 암호를 덮어쓰는 버그가 있었음
          + 현재는 수정되었지만, 여전히 하위 도메인을 구분하지 못하는 버그가 있음
     * Google 계정 접근 문제
          + 국가와 컴퓨터를 변경한 후 Google 계정에 접근할 수 없었음
          + 복구 이메일 주소를 사용해도 문제를 해결할 수 없었음
          + 복구 이메일 주소를 암호처럼 기억해야 하는 상황이 불편함
     * Microsoft의 서비스 선택에 대한 비판
          + Microsoft가 사용자와 클라이언트에게 책임을 전가함
          + Windows 생태계가 복잡하고 사용하기 어려워짐
          + MS Teams의 새로운 기능이 추가되지만, 기존 문제들이 해결되지 않음
     * 동일한 사용자 이름을 가진 여러 계정을 사용할 수 있음
          + 디자인 결함이 있을 수 있지만, 동일한 사용자 이름을 다른 사이트에서 사용할 수 있음
     * Hotmail 계정 생성 시 시각 장애인에게 친화적이지 않음
     * Microsoft Authenticator가 위치를 추적하는 문제
          + 위치 추적이 더 큰 문제로 인식됨
"
"https://news.hada.io/topic?id=16304","Go는 나의 망치, 모든 것은 못","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Go는 나의 망치, 모든 것은 못

Go는 나의 망치, 모든 것이 못

  소개

     * Markus는 혼자 일하는 개발자이자 디지털 제품 제작자임
     * 팀 없이 혼자 일하며 유연한 업무 방식을 추구함
     * 복잡한 기술 스택을 피하고 고객에게 가치를 제공하는 데 집중함

  Go를 선택한 이유

    이유 1: Go는 거의 모든 것을 할 수 있음

     * Go는 단순하고 읽기 쉬우며 일관성이 있음
     * CLI, 클라우드 인프라, HTTP 서버, 네트워크 작업 등 다양한 용도로 사용 가능함
     * Nintendo Switch 게임, GUI 앱, 터미널 문자열 신디사이저 등도 Go로 개발 가능함

    이유 2: 컨텍스트 전환 감소

     * 여러 프로그래밍 언어를 사용하면 문법 전환에 어려움이 있음
     * 하나의 언어만 사용하면 이러한 문제를 피할 수 있음
     * 언어, 컴파일러, IDE, 툴체인, 커뮤니티 등 여러 요소를 관리하기 쉬움

    이유 3: 깊이 있는 지식

     * 하나의 언어에 집중하면 더 깊이 있는 지식을 쌓을 수 있음
     * 여러 언어를 다루는 것보다 한 언어에 집중하는 것이 더 생산적임
     * 소프트웨어 개발의 복잡성을 줄이는 데 도움을 줌

  결론

     * Markus는 Go를 사용하여 다양한 프로젝트를 성공적으로 수행하고 있음
     * Go에 대한 깊이 있는 지식을 통해 생산성을 높이고 있음
     * Go를 통해 다양한 도전 과제를 해결할 수 있음

GN⁺의 정리

     * Markus는 혼자 일하는 개발자로서 Go를 선택하여 복잡성을 줄이고 생산성을 높임
     * Go는 다양한 용도로 사용 가능하며, 단순하고 일관성이 있어 관리하기 쉬움
     * 하나의 언어에 집중하면 깊이 있는 지식을 쌓을 수 있으며, 여러 언어를 다루는 것보다 더 효율적임
     * Go를 통해 다양한 프로젝트를 성공적으로 수행할 수 있으며, 이는 다른 개발자들에게도 유용할 수 있음

        Hacker News 의견

     * Go를 사용하여 금융 데이터를 처리하는 회사에서 일한 경험이 있음
          + 동료들이 CSV 파일을 집계하거나 데이터베이스를 업데이트하는 등의 일회성 작업에 Go를 사용하는 것을 불편하게 여김
          + Pandas를 사용하지 않고 기본 알고리즘을 직접 구현하는 동료들을 보며 신뢰하기 어려웠음
          + 회사의 시간 낭비라고 생각했으며, Go가 충분하다는 것을 보여주려는 자존심 문제로 보였음
     * 언어를 제대로 배우는 비용을 과소평가하는 사람들이 많음
          + 언어를 ""알고 있다""고 말할 수 있는 수준에 도달하는 데 2-4년이 걸림
          + 언어, 컴파일러, 런타임, 표준 라이브러리, 관용적인 방법을 이해하는 데 8-10년이 걸림
          + 이 기간 동안 언어의 사용 방식을 발전시키고 초보자를 빠르게 훈련시킬 수 있음
     * Go는 거의 모든 작업에 적합하다고 생각함
          + Go를 사용할 때 생산성이 매우 높음
          + 프로젝트가 100줄을 넘으면 Python보다 더 나음
          + Go의 장점:
               o 언어가 매우 간단함
               o 핵심 라이브러리가 잘 설계됨
               o 도구 체인과 핵심 라이브러리만으로 대부분의 작업을 처리할 수 있음
     * Go는 개인 프로젝트에 적합하지 않다고 생각함
          + 코드가 장황하고 간단한 작업도 많은 코드를 작성해야 함
          + 적절한 열거형, 합집합 타입, null 안전성 등이 부족함
          + 이러한 이유로 개인 프로젝트에서는 재미를 느끼지 못함
     * Typescript와 Rust를 선호함
          + Deno와 Typescript는 Go보다 더 다재다능한 도구임
          + Typescript는 더 안전하고 인체공학적이지만 약간 느림
          + Rust는 더 안전하고 빠르지만 배우기 어려움
          + Typescript의 장점:
               o null 안전성
               o 널리 지원되는 제네릭
               o 차별화된 유니언 타입
               o 안전한 동시성
               o 컬렉션/이터레이터 메서드
          + Go의 장점:
               o 크기와 메모리 사용 측면에서 더 효율적임
               o Go의 GC가 V8보다 나음
               o CPU 바운드 작업에서 더 빠름
               o 더 큰 표준 라이브러리
     * Go와 Typescript를 사용해봤지만 Kotlin/JVM을 선호함
          + Gradle/Maven의 이분법과 빌드 시스템의 불안감이 있지만, 언어 기능과 런타임 측면에서 매우 만족함
     * Go는 만능 도구라고 생각함
          + 모든 것이 간단하고 사용하기 쉬움
          + 외부 도구를 많이 사용하지 않고도 간단한 명령으로 컴파일하고 배포할 수 있음
          + 다른 언어들도 장점이 있지만, Go만큼 간단하고 번거롭지 않음
     * Go를 좋아하지만 사랑하지는 않음
          + 도구 체계가 엉망이라고 생각함
          + Go 모듈이 완성되지 않은 느낌임
          + 제네릭이 아직 원시적임
          + 생태계가 미완성이라고 느껴짐
     * Go의 대부분의 측면을 좋아하지만, 수치 코드를 많이 작성하는 사람으로서 연산자 오버로딩이 없는 것이 단점임
          + Python과 C++을 계속 사용 중임
          + Rust는 C++ 대체로 매력적이지만, Python을 대체하기에는 규칙이 너무 많음
     * 인생은 한 가지에 능숙해지기에도 짧기 때문에 신중하게 선택해야 함
          + Go를 선택한 이유:
               o 놀라운 표준 라이브러리
               o 읽고 쓰기 간단함
               o 단일 정적 바이너리 빌드
               o 컨테이너가 필요 없음
               o 어디서나 사용 가능 (웹 개발, 데스크탑 앱, 게임 개발, 임베디드 등)
"
"https://news.hada.io/topic?id=16329","노마드, 오프그리드 메시 통신, 포워드 시크리시 및 극한 프라이버시 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                노마드, 오프그리드 메시 통신, 포워드 시크리시 및 극한 프라이버시 기술

Nomad Network - 자유로운 통신

   오프라인, 강력한 암호화, 포워드 시크릿, 극도의 프라이버시를 제공하는 메쉬 통신

   Nomad Network는 사용자들이 완전히 통제하고 소유할 수 있는 개인적이고 탄력적인 통신 플랫폼을 구축할 수 있게 함. 가입, 동의, 데이터 전달, 권한 및 게이트키퍼가 필요 없음

   Nomad Network는 LXMF와 Reticulum을 기반으로 구축되어 암호화된 메쉬 기능과 피어 투 피어 메시지 라우팅을 제공함. 이 기반은 패킷 라디오부터 광섬유까지 다양한 통신 매체를 사용할 수 있게 함

   Nomad Network는 공공 인터넷 연결이 필요하지 않음. IP나 이더넷 네트워크도 필요하지 않음. 패킷 라디오, LoRa, 시리얼 라인 등을 통해 완전히 사용할 수 있음. 원한다면 인터넷이나 개인 이더넷 네트워크를 통해 네트워크를 연결할 수도 있음

   Reticulum을 사용하기 때문에 매우 낮은 대역폭에서도 효율적으로 작동할 수 있으며, 300bps 라디오 링크에서도 성공적으로 사용됨

   그래픽 사용자 인터페이스를 가진 LXMF 클라이언트를 원한다면, Linux, Android, macOS용 Sideband를 참고할 것

  주요 기능

     * 패킷 라디오, LoRa, WiFi 등 Reticulum이 지원하는 모든 매체를 통한 암호화 메시징
     * 제로 구성, 최소 인프라 메쉬 통신
     * 오프라인 사용자를 위한 분산 및 암호화된 메시지 저장소
     * 페이지와 파일을 호스팅할 수 있는 연결 가능한 노드
     * PHP, Python, bash 등을 사용한 노드 측 페이지 생성
     * 노드의 콘텐츠와 상호작용할 수 있는 내장 텍스트 기반 브라우저
     * 페이지 작성에 용이하고 대역폭 효율적인 마크업 언어
     * 브라우저 내 페이지 캐싱

  시작하는 방법

   Nomad Network를 설치하는 가장 쉬운 방법은 pip를 사용하는 것임:
pip install nomadnet
nomadnet
nomadnet --daemon
nomadnet --help

   운영 체제가 pip를 통한 일반 사용자 패키지 설치를 차단하는 경우, ~/.config/pip/pip.conf 파일을 편집하여 다음 지시문을 추가할 것:
[global]
break-system-packages = true

   또는 pipx 도구를 사용하여 Nomad Network를 격리된 환경에 설치할 수 있음:
pipx install nomadnet
pipx install rns
pipx install lxmf
nomadnet
nomadnet --daemon
nomadnet --help

   처음으로 pip를 사용하여 프로그램을 설치하는 경우, 시스템을 재부팅해야 프로그램이 사용 가능해질 수 있음. ""command not found"" 오류가 발생하면 시스템을 재부팅하고 다시 시도할 것

   패킷 라디오나 LoRa에서 Nomad Network를 사용하려면, Reticulum 설치를 구성해야 함. Reticulum 문서를 참고할 것

   물리적 네트워크를 구축하지 않고 Nomad Network를 시도하려면, 인터넷을 통해 Unsigned.io RNS Testnet에 연결할 수 있음. Testnet에 연결하면 네트워크의 다른 노드에서 페이지나 서비스를 호스팅하는 노드의 발표를 받을 수 있음

  Android에 설치

   Termux를 사용하여 Android에 Nomad Network를 설치할 수 있음. 자세한 과정은 Reticulum Manual의 Android 설치 섹션을 참고할 것

   그래픽 사용자 인터페이스를 가진 네이티브 Android 애플리케이션을 원한다면, Sideband를 참고할 것

  Docker 이미지

   Nomad Network는 Github Packages에 Docker 이미지로 자동으로 게시됨. 이미지 태그는 master 또는 특정 릴리스 번호임:
docker pull ghcr.io/markqvist/nomadnet:master
docker run -it ghcr.io/markqvist/nomadnet:master --textui
docker run -d \
  -v /local/path/nomadnetconfigdir/:/root/.nomadnetwork/ \
  -v /local/path/reticulumconfigdir/:/root/.reticulum/ \
  --network host \
  ghcr.io/markqvist/nomadnet:master
docker run -d \
  -v /local/path/nomadnetconfigdir/:/root/.nomadnetwork/ \
  -v /local/path/reticulumconfigdir/:/root/.reticulum/ \
  ghcr.io/markqvist/nomadnet:master
docker run -i ghcr.io/markqvist/nomadnet:master --daemon --console

  도구 및 확장

   Nomad Network는 매우 유연하고 확장 가능한 플랫폼이며, 다양한 커뮤니티 제공 도구, 유틸리티 및 노드 측 확장이 존재함:
     * NomadForum (GitHub mirror)
     * NomadForecast
     * micron-blog
     * md2mu
     * Any2MicronConverter
     * Nomadnet 페이지 예제
     * LXMF-Bot
     * LXMF Messageboard
     * LXMEvent
     * POPR
     * LXMF Tools

  도움말 및 토론

   Nomad Network와 관련된 도움 요청, 토론, 아이디어 공유 등을 위해 Nomad Network 토론 페이지를 참고할 것

  Nomad Network 지원

   개방적이고 무료이며 개인적인 통신 시스템의 지속적인 개발을 지원하려면 다음 채널을 통해 기부할 수 있음:
     * Monero: 84FpY1QbxHcgdseePYNmhTHcrgMX4nFfBYtz2GKYToqHVVhJp8Eaw1Z1EedRnKD19b3B8NiLCGVxzKV17UMmmeEsCrPyA5w
     * Ethereum: 0xFDabC71AC4c0C78C95aDDDe3B4FA19d6273c5E73
     * Bitcoin: 35G9uWVzrpJJibzUwpNUQGQNFzLirhrYAH
     * Ko-Fi: https://ko-fi.com/markqvist

  개발 로드맵

     * 새로운 주요 기능
          + 네트워크 전반에 걸친 공지 및 토론 스레드
          + 협업 지도 및 지리 정보 공유
     * 소규모 개선 및 수정
          + 대화 또는 대화 목록에서 링크 상태 (RSSI 및 SNR)
          + 메뉴로 이동하는 Ctrl-M 단축키
          + 다른 사용자와 노드 공유 / 사용자에게 노드 정보 전송
          + 일부 OS에서 ""editor"" 별칭이 없는 경우 내부 편집기 실패 수정
          + 필요한 너비 헤더 추가 가능성
          + 원격 링크 닫기 시 브라우저 처리 개선
          + 요청 실패 시 더 나은 탐색 처리 (링크 닫힘으로 인한 경우 포함)
          + 실패한 메시지 재시도 메커니즘
          + 버튼 재배치로 일관성 향상
          + 페이지 입력 필드
          + 게시 메커니즘
          + readme에 터미널 호환성 알림
          + 대화 목록에서 선택된 아이콘
          + 로컬 노드 검색 기능 가능성
          + 노드 정보 상자 옆에 거리와 함께 경유 항목 추가 가능성

  주의 사항

   Nomad Network는 베타 소프트웨어이며, 그렇게 간주해야 함. 암호화 모범 사례를 염두에 두고 구축되었지만, 외부 보안 감사가 이루어지지 않았으며, 프라이버시를 침해할 수 있는 버그가 있을 수 있음. 도움을 주거나 감사를 후원하고 싶다면 연락할 것

  GN⁺의 정리

   Nomad Network는 사용자들이 완전히 통제할 수 있는 개인적이고 탄력적인 통신 플랫폼을 제공함. 다양한 통신 매체를 지원하며, 공공 인터넷 연결이 필요하지 않음. Reticulum을 기반으로 하여 낮은 대역폭에서도 효율적으로 작동함. Nomad Network는 패킷 라디오, LoRa, 시리얼 라인 등을 통해 사용할 수 있으며, 다양한 커뮤니티 제공 도구와 확장이 존재함. 베타 소프트웨어로서 외부 보안 감사가 이루어지지 않았으므로 주의가 필요함.

        Hacker News 의견

     * NextNav가 900Mhz ISM 대역의 큰 부분을 차지하면 문제가 될 것임
     * ISM 라디오 대역에 대한 정보는 Wikipedia에서 확인할 수 있음
     * FCC 웹사이트에서 피드백을 등록할 수 있음
     * 관련 진행 중인 스레드: ""Private, Secure and Uncensorable Messaging over a LoRa Mesh (2022)""
     * Reticulum 네트워크는 다양한 전송 매체를 제공하여 매우 흥미로움 (패킷 라디오 등)
     * 사용자 의견:
          + 사용자가 이해할 수 있도록 번호를 앞에 표시하는 것이 좋음
          + 신뢰와 대화를 결합하는 것이 상대적으로 이해하기 쉬움
          + 신뢰와 비신뢰 외에 다른 카테고리를 두는 것은 좋은 생각이지만 즉시 이해되지는 않음
          + 사용자는 이 문맥에서 ""신뢰""가 무엇을 의미하는지 알아야 함
          + 사용자는 Curve25519를 사용하고 있다는 것을 알 필요는 없고, 암호화가 이루어졌다는 것만 알면 됨
          + ID 번호에 16진수를 사용하는 것은 최악의 선택임. 10진수나 base32가 더 나음
          + ID 번호는 유용한 그룹으로 일관되게 표시되어야 함 (예: 4개의 5자리 그룹)
     * 오프그리드 메시 네트워크 구축에 대해 읽는 것이 매우 흥미로움. 이는 내 SF 소설 'Mesh'의 중심 주제임
     * Meshtastic와 유사하지만 Nomad는 PC용이고 Meshtastic는 마이크로컨트롤러용임
     * 이 프로젝트가 감사되었는지 찾을 수 없었음
     * Reticulum 사용:
          + 조정 없는 전역 고유 주소 지정 및 식별
          + 완전 자가 구성 멀티 홉 라우팅
          + 위조 불가능한 패킷 전달 확인
          + 발신자 익명성
     * 가장 시끄러운 프로토콜이며 플러드 보호가 없음. 이 문제를 해결했다면 큰 뉴스이자 학문적 진보일 것임
     * Python으로 작성된 것이 아쉬움. 몇 가지 질문:
          + 완전히 오프라인에서 부트스트랩할 수 있는지?
          + 노드 요구 사항은 무엇인지? CPU와 메모리 요구 사항은? 내 P150에 16MB RAM으로 실행 가능한지?
     * Nomadnet/Reticulum이 yggdrasil, ipfs, nostr, 또는 scuttlebot과 어떻게 비교되는지?
"
