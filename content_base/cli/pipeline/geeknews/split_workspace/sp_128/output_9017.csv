"https://news.hada.io/topic?id=14136","OneUptime - 오픈소스 Observability 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OneUptime - 오픈소스 Observability 플랫폼

     * 온라인 서비스를 모니터링하고 관리하기 위한 종합적인 솔루션으로 여러 서비스를 대체 가능
          + 업타임 모니터링(Pingdom) + 상태 페이지(StatusPage) + 사고 관리(Incident.io) + 온콜 및 알림(PagerDuty) + 로그 관리(Loggly) + 어플리케이션 성능 모니터링(NewRelic, DataDog)
     * 웹사이트, 대시보드, API 또는 기타 온라인 리소스의 가용성을 확인하며,
       다운타임이 발생하면 팀에 경고를 보내고 고객에게 상태 페이지를 통해 정보를 제공할 수 있음
     * 인시던트 처리, 대기 교대 설정, 테스트 실행, 서비스 보안, 로그 분석, 성능 추적, 오류 디버깅등에 유용
     * 슬랙, 지라, GitHub 등 5000+ 개 이상의 서비스와 연동

   누군가 언급할 줄 알았는데 얘기 없어서 ... 첫 눈에 들어오는 제목에 오타가 있어서 혹시라도 나중에 검색할 때 불편하지 않을까 싶네요.

   앗 ㅎㅎ 수정해 두었습니다
"
"https://news.hada.io/topic?id=14103","2024년 이메일 전송성능에 대한 심층 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2024년 이메일 전송성능에 대한 심층 분석

이메일 전달성에 대한 심층 분석

     * 1971년 10월, MIT 졸업생인 Ray Tomlinson이 최초의 이메일을 네트워크를 통해 보냄.
     * 지난해 약 121조 개의 이메일이 약 43억 명 사이에서 전송됨.
     * 이메일은 지구상에서 가장 중요한 서면 형태의 커뮤니케이션 수단이며, 가까운 미래에도 그럴 것임.

개요

     * 2023년 10월 3일, Google과 Yahoo는 스팸, 피싱, 맬웨어 시도를 방지하기 위한 새로운 이메일 보안 표준을 발표함.
     * 이메일 서비스 제공업체들이 이러한 정책을 시행하면서, 이메일 전달성에 대한 가이드라인 준수가 필수적임.
     * 가장 큰 변화는 SPF, DKIM, DMARC와 같은 이메일 인증 표준의 구현임.
     * Gmail의 경우 인증되지 않은 메일은 차단됨.

영향을 받는 사람들

     * 대량 발송자들이 주로 영향을 받으며, SPF, DMARC, DKIM을 자신들의 도메인에 활성화해야 함.
     * 대량 발송자가 아니더라도 가이드라인을 준수하지 않으면 영향을 받을 수 있음.

타임라인

     * Google은 2024년 2월부터 대량 발송자들이 이메일을 인증하도록 요구함.
     * Yahoo도 2024년 1분기부터 동일한 요구사항을 적용함.

가이드라인

     * 발송자 인증: SPF, DKIM, DMARC와 같은 이메일 인증 프로토콜 구현.
     * 대량 발송자 요구사항: 스팸 필터링과 평판 손상을 피하기 위해 불필요한 대량 이메일 발송을 피함.
     * 쉬운 구독 해지: 구독 해지 옵션을 쉽게 구현함.
     * 참여: 오해의 소지가 있는 제목, 과도한 개인화, 스팸 필터를 유발하는 프로모션 콘텐츠 피함.

발송자 인증

     * SPF, DKIM, DMARC는 조직의 이메일을 보호하는 데 도움이 되는 3가지 인증 표준임.
     * 이러한 표준의 적절한 구성은 공격으로부터 보호하고 전달성을 높여 이메일이 스팸 폴더가 아닌 수신함에 도달하도록 함.

영향

     * Google은 알고리즘과 사용자 보고 데이터를 지속적으로 업데이트하여 이메일 필터링과 사용자 경험을 개선함.
     * 새로운 보안 가이드라인이 이메일 전달성과 참여에 미치는 영향을 밝힘.

도구

     * 이메일 위생을 설정, 확인 및 유지 관리하는 데 도움이 되는 무료 온라인 리소스 목록 제공.

구현

     * 이러한 가이드라인을 구현하는 것은 자원이 제한된 소규모 조직에게 도전이 될 수 있음.
     * 이메일 인증을 구현하기 위해 서비스 제공업체의 리소스나 지원을 참조함.

보너스

     * 해커들이 이메일 보안 취약점을 악용하는 몇 가지 방법을 소개함.

GN⁺의 의견

     * 이 기사는 이메일 보안과 관련된 최신 표준을 준수하는 것의 중요성을 강조함. 이는 이메일을 통한 커뮤니케이션의 신뢰성을 높이고, 스팸이나 피싱과 같은 위협으로부터 사용자를 보호하는 데 기여함.
     * 이메일 서비스 제공업체들이 새로운 보안 표준을 시행함에 따라, 조직들은 이러한 변화에 적응하고 준수하기 위한 노력을 기울여야 함. 이는 특히 개인 정보 보호와 데이터 보안에 민감한 시대에 더욱 중요함.
     * 이 기사는 이메일 마케팅과 관련된 사업을 운영하는 기업들에게 특히 유용할 수 있음. 이메일 마케팅은 여전히 많은 기업들에게 중요한 마케팅 채널이기 때문에, 이메일 전달성을 유지하는 것은 성공적인 캠페인을 위해 필수적임.
     * 이메일 인증 표준을 구현하는 것은 기술적인 도전이 될 수 있으며, 특히 SPF, DKIM, DMARC와 같은 프로토콜을 처음 접하는 조직에게 어려울 수 있음. 이러한 표준을 도입할 때는 기술적인 지원과 리소스가 필요할 수 있으며, 이는 시간과 비용을 요구할 수 있음.
     * 이 기사는 이메일 보안을 강화하고자 하는 조직에게 유용한 가이드라인과 도구를 제공함으로써, 이메일 시스템의 취약점을 보완하고 사용자 경험을 향상시키는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 대상화된 이메일 전달 실패 공격에 대한 우려
          + 이메일 서비스 제공자들이 갖는 영향력을 고려할 때, 비즈니스 엔티티에 대한 '대상화된 이메일 전달 실패' 공격에 대해 궁금증을 표함.
          + 공격자가 피해자(비즈니스, 메일링 리스트, NGO 등)가 대량으로 보내는 이메일을 받고, 이를 스팸으로 표시하여 이메일 서비스의 AI 스팸 필터가 미래의 이메일을 스팸으로 분류하거나 삭제하게 만드는 공격 방식을 설명.
          + 이로 인해 기업이 분기별로 손실을 보고, 광고 부서는 이메일을 통한 참여도 감소에 대해 의문을 갖게 됨.
          + 큰 기업은 이 문제를 견딜 수 있지만, 작은 기업이나 NGO는 기부금 감소 등의 타격을 입을 수 있음을 지적.
     * 스팸과 악성 콘텐츠의 구분 불가
          + 스팸은 악성 콘텐츠와 구별할 수 없으며, 사용자가 원하지 않는 뉴스레터에 대한 이메일 주소가 악의적인 행위자에게 전달되어 문제가 될 수 있음.
          + 링크를 클릭하면 사용자의 이익을 고려하지 않는 웹사이트로 연결되어 최악의 경우 악성 소프트웨어 설치로 이어질 수 있음.
          + 구독 취소 링크를 클릭하지 말고, 스팸 신고 버튼을 사용하며, 스팸 신고를 무시하는 대형 이메일 서비스를 사용하지 말 것을 권장.
     * 도메인 기반 이메일 인증의 필요성
          + 대량의 이메일을 발송하는 도메인 소유자들이 메시지에 서명을 요구하는 것은 필요하고 오래된 변화로, 도메인 평판을 기반으로 좋은 이메일과 나쁜 이메일을 더 명확하게 구분할 수 있게 함.
          + 공유 IP 공간을 통해 이메일을 보내는 도메인이 늘어남에 따라, 발신 도메인에 신뢰성 있게 평판을 부여하는 것이 남용을 줄이는 데 도움이 됨.
     * 한 번의 클릭으로 구독 취소 실패하는 대기업들
          + 많은 대기업들이 한 번의 클릭으로 구독 취소하는 것에 실패하고 있으며, 이로 인해 고객들이 스팸 신고 버튼을 누르는 경우가 많음을 지적.
     * 이메일 서비스 간의 전달 문제
          + 이메일 서비스 간의 전달 기능이 변경되어, 예를 들어 대학 이메일 주소에서 개인 Gmail 계정으로의 전달이 더 이상 작동하지 않음을 언급.
          + 이 변경이 대부분의 사용자에게 영향을 미치지 않는 것으로 보이지만, 영향을 받는 사람들에게는 불편함을 초래.
     * 완벽하게 구성된 이메일 보안 설정의 중요성
          + SPF, DKIM, DMARC이 완벽하게 설정되지 않은 상태에서 이메일이 전달되는 것에 놀라움을 표현하며, 개인적으로 자체 호스팅 이메일 서버를 잘 구성했음에도 불구하고 때때로 전달에 어려움을 겪고 있음을 공유.
     * 이메일 봉투와 헤더의 혼동
          + 이메일의 'From:' 필드에 있는 도메인 이름이 SPF나 DKIM에 의해 인증된 다른 도메인과 일치하는지 검사하는 것과 관련하여, 이메일 봉투에는 헤더가 없고, 헤더는 이메일 본문에 있다는 것을 지적.
          + 이메일 인증에 대한 dmarc.org의 프레젠테이션을 추천.
     * DMARC 실패와 이메일 전달 문제
          + DMARC가 특히 마이크로소프트에서 자주 실패하고, 수신자가 메일을 전달할 때 SPF 일치가 깨지는 문제를 언급.
          + 정당한 이메일이 DMARC를 통과하지 못하는 문제로 인해 최근에 'p=quarantine'에서 'p=none'으로 변경했으며, 이메일 전달과 같은 문제를 해결할 때까지 'p=reject'를 사용하지 않겠다는 의견을 표현.
     * 마케팅 이메일에 대한 부정적인 인식
          + 원치 않는 마케팅 이메일을 많이 받는 업계에서 일하는 사람으로서, 마케팅 이메일로 인해 구매한 적이 없으며, 대부분 이메일을 열지 않고 삭제한다는 개인적인 경험을 공유.
     * Gmail과 Hotmail/Outlook 계정에서 오는 스팸 문제
          + 매일 받는 스팸의 약 50%가 Gmail과 Hotmail/Outlook 계정에서 온다고 언급하며, 이에 대해 어떤 조치가 이루어지고 있는지에 대한 의문을 제기.
"
"https://news.hada.io/topic?id=14097","LLM은 모르지만 뭔가 만들고 싶어서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LLM은 모르지만 뭔가 만들고 싶어서

   LLM을 잘 모르는 상태에서, 인지적 프롬프팅으로 3시간 만에 간단한 기능을 만든 이야기.
   프롬프트의 작성 이전에 고민해봤던 전략들을 Sequential, Collective라는 키워드를 들어 이야기함.

   ""일을 작게 쪼개고, 순서와 위계를 만들고, 전문가에게 질문하듯 프롬프트를 만든다. 그 뒤에는 점진적으로 난이도를 높이며 개선한다.""
"
"https://news.hada.io/topic?id=14177","HN에 묻다: 여러분이 참여한 가장 쓸모없는 프로젝트는 무엇인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN에 묻다: 여러분이 참여한 가장 쓸모없는 프로젝트는 무엇인가요?

불필요한 작업에 대한 고민

     * 회사의 파이프라인 자동화 부서에서 일하는 한 직원의 경험.
     * 팀은 유지 관리 문제로 인해 내부 도구를 폐기하기로 결정하고, 다른 팀이 필요할 경우를 대비해 이 도구의 구현을 자동화하는 파이프라인을 만듦.
     * 이달에 팀원 중 한 명이 자동화에서 개선 가능성을 발견하여, 해당 직원이 이전 도구에 변경을 적용하도록 선택됨.

파이프라인 자동화의 모순

     * 변경 사항을 적용한 후, 같은 팀의 한 사람이 상세하게 요청한 조정으로 인해 풀 리퀘스트가 승인되지 않음.
     * 이러한 조정은 매우 드문 시나리오에서 파이프라인 자동화의 탄력성을 높이기 위함.
     * 그러나 같은 주에 팀 리더는 내부 도구가 폐기되었으며 더 이상 사용되어서는 안 된다고 다른 팀에 통보함.

의미 없는 작업의 부담

     * 폐기된 도구의 사용을 구현하는 파이프라인 자동화의 필요성에 의문.
     * 도구가 폐기되었으므로, 아무도 사용하지 않을 자동화에 대한 조정이 왜 필요한지 의문.
     * 시간 낭비로 보이는 작업에 할당된 이유에 대한 혼란.

GN⁺의 의견

     * 이러한 상황은 조직 내 의사소통 부족과 프로세스 관리의 문제를 드러냄. 한편으로는 도구가 폐기되었다는 공식 통보가 있었지만, 다른 한편으로는 여전히 그 도구에 대한 개선 작업이 진행되고 있음.
     * 이 문제는 자원의 낭비를 초래하며, 직원들 사이에서 혼란과 불만을 야기할 수 있음. 이는 직원의 사기 저하로 이어질 수 있으며, 장기적으로는 회사의 생산성에 부정적인 영향을 미칠 수 있음.
     * 이러한 상황을 방지하기 위해서는 프로젝트의 상태와 중요성에 대한 명확한 지침이 필요하며, 모든 관련된 팀과의 지속적인 의사소통이 중요함. 또한, 작업의 우선순위를 정하는 과정에서 전략적인 접근이 필요함.
     * 이 사례는 다른 조직이나 팀에서도 발생할 수 있는 일반적인 문제를 보여주며, 이를 통해 조직은 자신들의 프로세스를 재검토하고 개선할 수 있는 기회를 얻을 수 있음.
     * 이러한 상황을 경험하는 직원들에게는 자신의 노력이 가치 있고 의미 있는 방향으로 사용되고 있는지를 주기적으로 확인하고, 필요한 경우 상위 관리자나 인사 부서에 문제를 제기하는 것이 중요함.

        Hacker News 의견

     * 한 ERP 시스템 개발 경험
          + 15년간 다양한 개발자에 의해 개발된 사내 ERP 시스템에 대한 작업 경험.
          + 시스템은 회사의 핵심이었으나, 경영진은 시스템을 문제의 원인으로 지목.
          + 새로운 경영진은 업계 표준 솔루션으로의 교체를 추진했음.
          + CTO와 작성자는 프로젝트가 예산 초과와 실패할 것이라고 강력히 주장했으나, 경영진은 벤더의 말을 믿고 프로젝트를 진행.
          + 벤더는 프로젝트의 규모를 이해하지 못하고 중요 기능을 빼면서도 자신감을 보였음.
          + 결국 5년 후, 수백만 달러를 낭비한 채 프로젝트는 실패로 끝남.
     * 스마트 에너지 미터 사업 진출 시도
          + 대형 미디어 회사에서 스마트 에너지 미터 사업에 뛰어들려 했던 경험.
          + 이미 수천 개의 미터를 구매하고 브랜딩하여 창고에 보관 중이었음.
          + API 개발 완료, UI는 문제가 있어 수정이 필요했음.
          + 마케팅 출시를 위한 수백만 달러 예산이 준비되었으나, 출시 당일 회사 이사회가 브랜드 이미지와 실패 위험을 이유로 출시를 취소함.
     * 무의미한 프로젝트 경험
          + 회사 ""EnGUAGEment meter""를 홀마다 설치해 직원들의 기분을 표시하는 시스템 개발.
          + CEO의 생일에는 참여율을 높여야 했음.
          + 결국 매일 30-40%의 참여율을 보이는 데 그쳤음.
     * 대형 소매업체의 네트워크 접근 제어 프로젝트
          + Cisco 라우터 ACL을 구축하는 작업을 맡았으나, 프로젝트가 중도에 취소된 것으로 추정됨.
          + 작성자는 자동화된 시스템을 구축했으나, 이후 프로젝트의 진행 상황에 대한 소식을 듣지 못함.
     * 내부 도구의 사용 중단을 위한 고의적 성능 저하 조치
          + VP의 요청으로 오래된 내부 도구를 고의로 느리게 만드는 작업을 수행.
          + 가짜 오류 메시지와 무작위 지연을 추가하여 사용자 불만을 유도함.
     * SaaS 회사의 AWS로의 긴급 마이그레이션
          + 인수 후 AWS로의 마이그레이션 지시를 받았으나, 이로 인해 발생한 높은 비용으로 인해 결국 다시 데이터 센터로 이전함.
     * 뉴질랜드 소프트웨어 및 하드웨어 회사의 유닛 테스트 갱신 프로젝트
          + 1000만 달러 예산으로 유닛 테스트 갱신을 목표로 했으나, 프로젝트는 중간에 방향을 바꿔 패킷 검사 도구 개발로 전환됨.
          + 프로젝트 리더가 중도에 퇴사하고, 결과물은 무의미했으나 회사는 프로젝트를 성공적으로 평가함.
     * 대학 프로그래밍 강의에서의 시뮬레이터 개발
          + 첫 강의 후 교수에게 시뮬레이터 개발에 대해 말하려 했으나, 교수는 수업 참석을 면제해주고 A학점을 줄 것이라고 함.
          + 학기 말에 교수는 약속을 기억하지 못했고, 시뮬레이터를 보여준 후에야 학점을 변경해줌.
     * 마법의 집회(Magic the Gathering) 온라인 플레이 사이트 개발
          + 기존 옵션보다 우수한 사이트를 개발했으나, 저작권 문제로 인해 공개하지 않음.
     * 위성 제어 보드 테스트 장비 개발
          + 위성 제어 보드를 테스트하기 위한 장비를 개발했으나, 프로그램이 취소되어 장비는 사용되지 못하고 폐기됨.
"
"https://news.hada.io/topic?id=14142","SWE-agent, GitHub 이슈 해결률 12%의 자동 개발 에이전트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                SWE-agent, GitHub 이슈 해결률 12%의 자동 개발 에이전트

     * SWE-agent는 GPT-4와 같은 언어 모델(LMs)을 소프트웨어 엔지니어링 에이전트로 변환하여 실제 GitHub 저장소의 버그와 이슈를 수정
     * SWE-bench 테스트 세트 전체에서 12.29%의 이슈를 해결하여 전체 테스트 세트에서 최고의 성능을 달성

에이전트-컴퓨터 인터페이스 (ACI)

     * 에이전트가 저장소를 탐색하고 코드 파일을 보고, 편집하고, 실행하기 쉽도록 LM 중심의 명령과 피드백 형식을 설계함으로써 이러한 결과를 달성함.
     * 이를 에이전트-컴퓨터 인터페이스(ACI)라고 부르며, 저장소 수준의 코딩 에이전트를 위한 ACI 디자인을 쉽게 반복할 수 있도록 SWE-agent 저장소를 구축함.
     * 좋은 ACI 디자인은 에이전트 사용 시 훨씬 나은 결과를 가져옴을 보여줌.

설정

     * Docker를 설치하고 로컬에서 Docker를 시작함.
     * Miniconda를 설치하고 conda env create -f environment.yml을 사용하여 swe-agent 환경을 생성함.
     * conda activate swe-agent를 사용하여 활성화함.
     * ./setup.sh를 실행하여 swe-agent 도커 이미지를 생성함.
     * 이 저장소의 루트에 keys.cfg 파일을 생성하고 필요한 API 키와 GitHub 토큰을 입력함.

사용법

     * SWE-agent 파이프라인에는 두 단계가 있음. 첫 번째는 GitHub 이슈를 입력받아 이를 해결하려는 풀 리퀘스트를 반환하는 추론 단계임.
     * 두 번째 단계는 SWE-bench 벤치마크에 있는 이슈에 대해서만 가능하며, 생성된 풀 리퀘스트가 실제로 이슈를 해결했는지 확인하는 평가 단계임.

평가

     * 이 단계는 SWE-bench 세트의 이슈에 대해서만 가능함.
     * 생성된 풀 리퀘스트를 평가하기 위해 evaluation/ 디렉토리로 이동하고 ./run_eval.sh 를 실행함.

GN⁺의 의견

     * SWE-agent는 실제 GitHub 이슈를 해결하는 데 언어 모델을 활용하는 혁신적인 접근 방식을 제시함으로써 소프트웨어 개발 과정에서의 자동화 가능성을 확장함.
     * 이 기술은 개발자들이 반복적인 버그 수정 작업에서 벗어나 더 창의적이고 복잡한 문제 해결에 집중할 수 있게 하는 잠재력을 가짐.
     * ACI 디자인의 중요성을 강조함으로써, 기계와 인간 간의 상호작용을 최적화하는 인터페이스 설계의 중요성을 부각시킴.

   저런 agent 개발자한테 이렇게 질문까지 하면서 일하면 정말 괜찮을것 같네요.

   ""버그리포트에서 기술하는 재현 방법을 문제점을 재현하는 테스트 코드로 만들어봤어. 내가 이해한게 맞는건지 이 코드좀 볼래?""

   ""이 디자인보다는 이렇게 이렇게 리팩토링하면 전체에서 프로젝트에서 20312 코드라인을 줄일 수 있을것 같은데, do you approve?""

   매력적인 오픈소스이네요

        Hacker News 의견

     * 버그 리포트에 대한 댓글:
          + 데모는 행렬 연산에 대한 명확한 버그 리포트를 보여줌.
          + 실제 버그 리포트는 대부분 ""X를 클릭했는데 Y가 발생했다""는 식으로 모호함.
          + 버그를 해결하는 어려움은 원인을 파악하는 것에 있음.
          + LLMs가 간단한 결함을 수정할 수 있다는 것을 알지만, 이것이 무엇을 증명하는가에 대한 의문 제기.
          + 논문을 자세히 살펴본 사람이 있는지, 문제들과 차이점이 어떤지 궁금함.
     * 프로젝트에 대한 댓글:
          + 매우 멋진 프로젝트라고 평가.
          + 이전에 비슷한 실험을 해봤지만, 종종 혼돈스럽고 비용이 많이 드는 실패로 이어짐.
          + swe-bench에서 12%의 성공률을 보였지만, 나머지 88%는 어떤가에 대한 질문.
          + swe-bench가 해당 그룹에서 만든 것인지, ""숙련된 인간 상한선"" 점수를 측정해본 적이 있는지 궁금함.
          + 임의로 선택한 swe-bench 작업들이 숙련된 인간에게도 ""해결""하기 어려웠다는 경험 공유.
     * 사용된 방법론에 대한 댓글:
          + langchain 방법론을 사용한 것으로 보임.
          + 몇 가지 프롬프트를 예로 들며 GitHub 링크 제공.
     * AI와 버그 트래커에 대한 댓글:
          + AI가 생성한 풀 리퀘스트가 인기를 얻으면 공개 버그 트래커의 종말을 예상.
          + 버그가 사라지는 것이 아니라, 풀 리퀘스트 검토 비용 대비 프로젝트 이득이 큰 손실이 될 것이라는 의견.
     * SWEbench 벤치마크에 대한 댓글:
          + SWEbench 벤치마크가 오직 파이썬 코드 프로젝트만 포함하고 있어 모든 프로그래밍 언어와 프레임워크를 대표하지 않음.
          + 더 일반적인 SWE 작업 평가 프레임워크를 JS, SQL, 파이썬 등을 위해 개발 중이라고 소개.
     * 데모 비교에 대한 댓글:
          + 데모가 Devin 프로젝트와 매우 유사하여 확인해봤다는 의견.
          + 데모에 대한 신뢰성에 의문을 제기하며, 제3자의 평가를 듣고 싶어함.
     * 리뷰 작업에 대한 댓글:
          + AI가 제안한 수정 사항을 검토하는 데 실제 사람들에게 얼마나 많은 추가 작업이 발생했는지에 대한 질문.
     * 유사 프로젝트에 대한 댓글:
          + 비슷한 프로젝트를 진행 중이라고 소개하며 GitHub 링크 제공.
          + 모델이 잘못된 방향으로 가는 것을 다루는 방법에 중점을 둠.
          + 개발자-AI 피드백 루프를 완성하는 것이 진정한 생산성 향상의 열쇠라고 강조.
     * 저자들에게 제안하는 댓글:
          + 성공률이 연구자들에게만 의미가 있다고 지적하며, SWE-agent가 통과한 테스트와 통과하지 못한 테스트의 예를 README에 추가할 것을 제안.
     * 오픈 소스 프로젝트 기여에 대한 댓글:
          + 초보 개발자로서 오픈 소스 프로젝트에 기여할 방법을 찾는 데 도움이 되는 도구를 원함.
          + 파이썬 패키징 문서가 난해함에도 불구하고, 이를 극복하고 쉽게 할 수 있게 되었다는 경험 공유.
          + 현대화되지 않은 프로젝트를 찾아 개선을 제안하고 구현할 계획을 밝힘.
          + 비슷한 아이디어나 영감을 가진 사람들과 아이디어를 나누고 싶어함.
"
"https://news.hada.io/topic?id=14138","IPEX-LLM - LLM을 인텔 CPU/GPU에서 실행하기 위한 PyTorch 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           IPEX-LLM - LLM을 인텔 CPU/GPU에서 실행하기 위한 PyTorch 라이브러리

     * Intel Extension for PyTorch (IPEX) 기반
     * 50개 이상 모델에 최적화/검증완료 (LLaMA2, Mistral, Gemma, LLaVa, Whisper 등 )
     * 로컬 iGPU 나 Arc/Flex/Max 등 분산 GPU등에서 Low Latency로 실행
     * llama.cpp, HuggingFace, LangChain, LlamaIndex 등과 잘 연동
"
"https://news.hada.io/topic?id=14201","오픈소스 Stripe 대안 'Lago', 2200만 달러 투자 유치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈소스 Stripe 대안 'Lago', 2200만 달러 투자 유치

파리 기반 오픈소스 결제 플랫폼 Lago, 2200만 달러 투자 유치

     * 파리에 기반을 둔 스타트업 Lago가 마케팅 도구 개발에서 결제 시스템으로 사업 방향을 선회하여 성공적으로 2200만 달러를 투자 유치함.
     * 오픈소스 결제 플랫폼 개발자인 Lago는 공식 출시와 함께 두 차례의 펀딩 라운드를 통해 자금을 확보함.
     * 이미 클로즈 베타 기간 동안 Mistral.ai, Together.ai, Juni와 같은 주목할 만한 스타트업들을 초기 고객으로 확보함.

개발자를 위한 파트너

     * Lago의 CEO Anh-Tho Chuong은 개발자들이 창의적인 새로운 서비스에 맞춤형 결제 솔루션을 찾고 있으며, 이 시장의 공백을 오픈소스 접근 방식으로 해결하려는 목표를 가지고 있음을 밝힘.
     * 회사는 데이터를 활용하여 사용량을 측정하고, 기업들이 구독이나 다른 가격 계획을 쉽게 관리할 수 있도록 돕는 것을 목표로 함.

투자자들의 관심

     * 최근 시리즈 A에서 1500만 달러를 유치하였으며, 이전 시드 라운드에서는 700만 달러를 유치함.
     * 투자자들로는 FirstMark, SignalFire, Y Combinator, New Wave, Script 등이 있으며, MongoDB의 Meghan Gill, Stripe 출신 Romain Huet, Hugging Face CEO Clément Delangue 등 업계 인사들도 참여함.
     * 현재 Lago의 평가액은 약 1억 달러로 알려짐.

결제 시스템의 문제점 해결

     * Lago는 원래 결제 플랫폼이 될 계획이 없었으나, 창업자들이 Qonto에서 근무하며 결제 문제를 해결하는 제품을 개발한 경험을 바탕으로 사업 방향을 전환함.
     * Hacker News에 게시된 ""개발자들을 위한 결제 시스템은 악몽""이라는 글이 많은 관심을 받으며, 개발자들이 직면한 결제 문제를 해결할 기회를 발견함.

경쟁 시장에서의 기회

     * 결제 시스템 시장은 매우 경쟁적이지만, Lago는 AI 분야와 같이 비즈니스 모델을 아직 확립 중인 분야에서 맞춤형 솔루션에 대한 수요가 있음을 믿음.
     * 복잡한 결제 관리에 대한 해결책이 부족하여 많은 기업들이 자체적으로 솔루션을 개발하고 있으나, 이는 비용이 많이 들고 개발자들이 싫어하는 문제임.
     * Lago는 오픈소스 도구를 제공하여 다양한 요구와 아이디어를 충족시키는 최선의 해결책이라고 봄.

GN⁺의 의견

     * 결제 시스템은 기업 운영에 필수적인 요소이며, 특히 스타트업이나 혁신적인 서비스를 제공하는 기업에게 맞춤형 결제 솔루션은 중요한 가치를 제공함.
     * 오픈소스 접근 방식은 개발자 커뮤니티의 참여를 유도하고, 사용자들이 직접 기능을 개선하거나 수정할 수 있는 유연성을 제공함으로써, 소프트웨어의 발전을 촉진할 수 있음.
     * Lago와 같은 플랫폼은 기존의 대형 결제 솔루션 제공업체들과 경쟁하면서도, 특정 시장의 틈새를 공략하여 성공할 수 있는 가능성을 보여줌.
     * 그러나 오픈소스 모델이 비즈니스에 적합한지, 지속 가능한 수익 모델을 구축할 수 있는지에 대한 고민이 필요함.
     * 결제 시스템을 선택할 때는 보안, 규제 준수, 확장성 등을 고려해야 하며, Lago가 이러한 요구 사항을 어떻게 충족시키는지 평가하는 것이 중요함.

   Lago 는 Stripe 와의 비교에 엄청 열을 올렸는데.. 역시나 투자 많이 받았네요.
   Stripe의 실제 가격: 입문서 같은 글도 공개했었구요.

   근데 빌링 API가 오픈소스라는게 뭔가 어울리지 않기는긴 합니다.

        Hacker News 의견

     * 새로운 SaaS 제품을 위해 사용을 시도했지만, 가격이 월 $3000부터 시작함.
          + 소규모 기업은 자체 호스팅보다 관리되는 솔루션을 원함.
          + 대규모 기업은 자체 호스팅을 할 수 있는 규모를 가짐.
     * 개발자 대상 판매는 어려움을 겪을 것으로 예상함.
          + 개발자들은 비용을 아끼려 하고, 기회 비용이 10배가 될지라도 직접 구축하려 함.
          + 수익화 시도 시 대규모 이탈이 예상됨.
     * 오픈소스라는 말과 수백만 달러의 투자가 한 문장에 있을 때, 오픈소스에 대한 의심이 듦.
     * 처리 수수료를 여전히 지불해야 한다면, 이점이 무엇인지 의문.
          + 자체 결제 시스템 유지 및 PCI 준수는 큰 주의가 필요함.
     * Rust로 작성된 오픈소스인 Hyperswitch.io가 있음.
          + Lago는 Ruby로 작성됨.
          + Java로 작성된 다른 오픈소스 결제 시스템도 있음.
          + NodeJS로 작성된 시스템에 대한 정보를 찾고 있음.
     * 파리는 새로운 핀테크 스타트업을 생산하는 데 있어 매우 활발함.
     * 실제 Stripe Payments 대안이 있는지 문의.
          + Stripe는 협력하지 않고, 오직 폐쇄 소스 경쟁사와만 작업하려 함.
     * Lago의 GitHub README에 드레이크 밈 사용.
          + 기술 문서에 밈이 사용되는 것을 본 적이 없음.
     * Stripe 대안이 아님.
          + 청구, 송장, 결제, 권한 부여, 구독은 모두 다른 것들임.
     * 특정 국가(FR, PT, GB, NL, ET, IT) 내에서만 원격으로 가능한 Ruby 엔지니어 채용에 대한 이유를 설명해달라는 요청.
          + 라트비아, 폴란드, 스웨덴 등 다른 EU 국가에서는 왜 일할 수 없는지, 지리적 다양성을 늘리려는 시도가 없는지 궁금함.
"
"https://news.hada.io/topic?id=14130","XZ 공격 쉘 스크립트공격 쉘 스크립트

xz 공격 쉘 스크립트

     * Andres Freund가 2024년 3월 29일에 xz 공격의 존재를 공개함.
     * 공격은 쉘 스크립트와 오브젝트 파일 두 부분으로 나뉨.
     * 쉘 스크립트는 make 과정에서 오브젝트 파일을 빌드에 추가함.
     * 악의적인 오브젝트 파일과 쉘 코드는 ""테스트 입력""으로 위장하여 압축 및 암호화되어 추가됨.

구성

     * xz-utils는 GNU autoconf를 사용하여 시스템에 맞게 빌드 방법을 결정함.
     * 공격자는 예상치 못한 지원 라이브러리를 tarball 배포판에 추가함.
     * 이 지원 라이브러리는 악의적인 코드를 포함하고 있음.

구성 다시 보기

     * 공격자가 추가한 지원 라이브러리는 특정 패턴을 찾아 해당 파일을 설정함.
     * 이 스크립트는 악의적인 파일을 찾아내고, 해당 파일을 실행하여 쉘 코드를 주입함.

쉘 스크립트 실행

     * 악의적인 쉘 스크립트는 여러 단계의 검사를 거쳐 필요한 환경에서만 실행됨.
     * 스크립트는 Makefile에 여러 줄을 추가하여 빌드 과정에 악의적인 코드를 삽입함.

GN⁺의 의견

     * 이 공격은 오픈소스 소프트웨어의 보안 취약점을 드러내며, 개발자들은 코드 리뷰와 보안 감사의 중요성을 인식해야 함.
     * 공격 방식은 소프트웨어 공급망 공격의 한 예로, 이러한 공격을 방지하기 위한 조치가 필요함.
     * 이 기사는 개발자들에게 쉘 스크립트와 빌드 시스템의 복잡성을 악용하는 공격 방법을 보여줌으로써 경각심을 불러일으킬 수 있음.
     * 비판적인 시각에서 볼 때, 이러한 공격은 오픈소스 프로젝트의 신뢰성에 대한 의문을 제기할 수 있음.
     * 관련 분야의 지식을 사용하여, 이 기사는 소프트웨어 개발 및 배포 과정에서의 보안 점검의 중요성을 강조함.
"
"https://news.hada.io/topic?id=14189","부트로더 잠금 해제 도구 제공 실패로 Asus, Zenfone 구매자에게 환불 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             부트로더 잠금 해제 도구 제공 실패로 Asus, Zenfone 구매자에게 환불 조치

영국에서 ASUS에 대한 소송 승리

     * 영국에서 한 Zenfone 구매자가 ASUS의 부트로더 잠금 해제 도구 제공 약속을 지키지 않은 것에 대해 소송을 제기함.
     * 구매자는 전화기와 법정 비용을 포함하여 총 £770(~$973)에 대한 전액 환불을 승리함.
     * 비슷한 문제가 있는 경우, 이 사례는 환불을 받을 수 있는 가능성을 보여줌.

ASUS 부트로더 잠금 해제 문제

     * ASUS는 과거에 부트로더 잠금 해제 도구를 쉽게 제공했으나, 작년 5월부터 Zenfone 9, 10, 11 Ultra 모델의 부트로더 잠금 해제가 불가능해짐.
     * 한 구매자는 ASUS Zenfone을 부트로더 잠금 해제 기능 때문에 구입했으나, 약속이 지켜지지 않자 영국의 소액 청구 법원에 소송을 제기함.
     * 구매자는 전화기 가격 £700과 법정 등록비 £70을 포함한 전액을 환불받음.

부트로더 잠금 해제의 중요성

     * 안드로이드 폰의 부트로더 잠금 해제는 시스템에 완전히 접근할 수 있는 방법으로, 기존 소프트웨어를 조작하거나 새로운 안드로이드 버전으로 재설치할 수 있게 함.
     * ASUS는 안드로이드 세계에서 가장 나쁜 소프트웨어 지원 약속 중 하나를 가지고 있어, 많은 기술에 밝은 ASUS 구매자들이 부트로더 잠금 해제를 통해 회사의 폰을 더 오래 사용함.
     * 그러나 ASUS는 지난해 이 약속을 철회하고 잠금 해제 도구를 비활성화하고 필요한 코드를 제공하지 않음.

ASUS의 반응 대기 중

     * ASUS에게 이 상황에 대한 회사의 관점을 듣기 위해 연락을 시도했으나, 대만에 본사를 둔 회사이기 때문에 다음 주까지 응답을 받지 못할 가능성이 높음.
     * ASUS로부터 답변을 받는 대로 기사를 업데이트할 예정임.

GN⁺의 의견

     * 이 사례는 소비자 권리 보호와 기업의 약속 이행에 대한 중요성을 강조함. 소비자가 제품의 특정 기능을 기대하고 구매한 후, 그 기능이 제공되지 않을 경우 법적 조치를 통해 권리를 주장할 수 있음을 보여줌.
     * 부트로더 잠금 해제는 사용자가 기기를 더욱 개인화하고, 공식 지원이 종료된 후에도 사용할 수 있게 하는 중요한 기능임. 이는 소프트웨어의 자유와 사용자의 선택권을 존중하는 오픈소스 정신과도 일맥상통함.
     * 그러나 이러한 소송이 통상적인 해결 방법으로 자리 잡는다면, 기업과 소비자 간의 신뢰가 약화될 수 있으며, 기업은 더욱 보수적인 기능 제공 정책을 채택할 수도 있음. 이는 혁신을 저해할 수 있는 부정적인 영향을 미칠 수 있음.
     * ASUS와 같은 회사가 소프트웨어 지원을 개선하고, 사용자의 기술적 요구를 충족시키는 방향으로 나아가야 한다는 점을 강조함. 이는 장기적으로 브랜드 충성도와 시장에서의 경쟁력을 높일 수 있음.
     * 이 기사는 기술 애호가들에게 흥미로울 수 있으며, 소프트웨어 자유와 소비자 권리에 관심이 있는 사람들에게 도움이 될 수 있음.

        Hacker News 의견

     * ASUS 부트로더 잠금 해제 기능 손실에 대한 우려를 표현하기 위해 ASUS에 피드백을 보냄. 패치 중단으로 인해 사용할 수 없게 된 휴대폰이 두 대 있으며, LineageOS를 사용할 수 없게 됨. 최근에 Zenfone을 구입했지만, 이 문제를 해결하지 않으면 다시 구매하지 않을 것임.
     * 예전에 구입한 Huawei P20 Pro가 있음. 처음에는 Huawei에 연락하여 부트로더 잠금 해제 코드를 받을 수 있었음. 업데이트가 중단되면 그때 해제하려고 생각했지만, 나중에 Huawei가 코드 제공을 중단함. 소송 가능성에 대해 궁금하지만, 판매 포인트로 명시적으로 홍보한 흔적을 찾을 수 없음.
     * 부트로더 잠금 해제와 커스텀 ROM 설치가 최선의 방법이었던 시절은 지나감. 잠금 해제가 가능하더라도, 앱들이 부트로더 잠금 해제와 루트된 OS를 확인하고 사용을 금지함.
     * 대부분의 제조업체들이 안드로이드 기기에 부트로더 잠금 해제를 불가능하게 만드는 것이 시장 이유인지(장기적으로 기기가 작동하면 업그레이드 주기가 길어짐), 아니면 맞춤형 ROM에서 Google/텔레메트리 데이터 백도어를 최소화하기 위한 정보 기관의 압력인지 궁금함. 가장 간단한 해답이 종종 최선이라는 접근 방식을 사용하면, 역사적으로는 이윤 동기가 99% 확률이었지만, 현재는 감시 및 정보 수집 가능성이 더 높아지는 것 같음.
     * 본론과는 별개로, 이 사이트에서 쿠키를 거부하는 것이 왜 이렇게 어려운지 의문임.
     * EU가 제조업체들에게 기기의 잠금을 해제하고 원하는 OS/배포판을 설치할 수 있는 방법을 제공하도록 강제하기를 바람.
     * 환불이 소송을 진행하는 데 드는 시간에 비해 가치가 없을 수 있지만, 약속을 지키라는 중요한 메시지를 전달함.
     * 영국 소액 청구 법원이 기본적인 선례를 세웠다고 언급하고 싶지만, 기술적으로 소액 청구 법원은 선례를 설정하는 기능이 아님. 그것은 상급 법원의 기능임.
     * ASUS에 대한 법적 조치에 관한 원래 스레드 링크 제공.
     * 쉽게 루팅할 수 있는 기기는 어떤 것들이 남아있는지 궁금함. 곧 새 기기를 구매할 예정임. EU가 USB-C를 의무화한 것처럼, 원하는 사람들을 위해 부트로더 잠금 해제를 의무화하는 것이 좋을 것임.
"
"https://news.hada.io/topic?id=14188","Show HN: Kyoo – 자체 호스팅 미디어 브라우저 (Jellyfin/Plex 대안)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show HN: Kyoo – 자체 호스팅 미디어 브라우저 (Jellyfin/Plex 대안)

시작하기

     * 설치: Kyoo를 간편하게 설정하여 좋아하는 영화, TV 프로그램 또는 애니메이션을 원활하게 스트리밍할 수 있음.
     * 디스코드 참여: 토론과 지원을 위해 디스코드 커뮤니티에 참여할 수 있음.
     * API 문서: 고급 기능을 탐색하기 위해 포괄적인 API 문서를 확인할 수 있음.
     * 기여: 문제를 제기하고, 풀 리퀘스트를 제출하며, Kyoo를 더욱 개선하는 데 기여할 수 있음.

기능

     * 동적 트랜스코딩: 미디어를 원하는 품질로 트랜스코딩하고, 자동 품질 변경과 함께 트랜스코더를 기다리지 않고 즉시 탐색할 수 있음.
     * 자동 시청 기록: 시청을 계속할 수 있는 자동 시청 기록을 통해 시리즈를 빠르게 재개하거나 새 에피소드를 발견할 수 있음.
     * 지능적 메타데이터 검색: guessit과 themoviedb의 힘을 빌려 이상하게 명명된 파일에 대해서도 스마트 메타데이터 검색을 경험할 수 있으며, 특히 애니메이션 처리를 위해 thexem을 사용함.
     * 크로스 플랫폼 접근: Android 및 웹 클라이언트에서 Kyoo에 접근하여 어디서나 미디어를 손쉽게 이용할 수 있음.
     * Meilisearch 기반 검색: Meilisearch에 의해 구동되는 고급, 오타에 강한 검색 시스템을 사용하여 빠른 결과를 얻을 수 있음.
     * 빠른 스크러빙 지원: 빠른 스크러빙 지원으로 미디어를 쉽게 탐색하고 재생 제어를 강화할 수 있음.
     * 다운로드 및 오프라인 지원: 오프라인으로 시청하고 다시 연결할 때 시청 기록이 원활하게 업데이트되는 자유를 누릴 수 있음.
     * 향상된 자막 지원: SSA/ASS 형식과 사용자 정의 폰트를 포함한 향상된 자막 지원으로 기본을 넘어섬.
     * OIDC 및 스크러빙 지원: Google, Discord 또는 OIDC 호환 서비스로 로그인하고 연결된 서비스(SIMKL 등)에서 자동으로 에피소드를 시청한 것으로 표시할 수 있음.

철학: 한 번 설정하고 영원히 즐기기

     * Kyoo의 철학은 단순함을 중심으로 함. 한 번 설정하고 구성 번거로움을 잊을 수 있음.
     * 설치 후, 라이브러리는 자동으로 스캔되며 새로운 에피소드나 영화가 라이브러리 폴더에 추가되는 즉시 업데이트됨.
     * 특정 파일 구조나 파일 이름을 꼼꼼하게 변경할 필요 없이 Kyoo가 올바른 작업을 수행함.

다른 미디어 브라우저가 필요한 이유?

     * 기술적 관점에서 Jellyfin과 Plex는 SQLite를 사용하고 모든 것을 단일 컨테이너 내에 한정시키지만, Kyoo는 다른 방식을 취함.
     * 검색 시스템을 구동하는 Meilisearch와 같은 전문 기능이나 확장성을 위해 추가 컨테이너를 도입하는 것을 두려워하지 않음.
     * Plex와 Jellyfin과 달리, Kyoo는 수동 파일 이름 변경이나 특정 폴더 구조에 대한 부담을 주지 않음.
     * Kyoo는 영화, TV 프로그램, 애니메이션 스트리밍에 초점을 맞추고 있으며, 음악, 전자책, 게임은 제외함.

라이브 데모

     * Kyoo가 실제로 어떻게 작동하는지 궁금하다면, 저작권이 없는 영화를 특징으로 하는 라이브 데모를 kyoo.zoriya.dev에서 확인할 수 있음.
     * Blender Studio가 모두를 위해 제공하는 오픈소스 영화에 특별한 감사를 표함.

스크린샷

     * 스트리밍 경험을 한 단계 끌어올리고 싶다면 지금 Kyoo를 확인할 수 있음.

GN⁺의 의견

     * Kyoo는 사용자 친화적인 설치와 자동화된 라이브러리 관리를 통해 미디어 스트리밍 경험을 간소화하는 오픈소스 미디어 브라우저임.
     * 이러한 플랫폼은 사용자가 자신의 미디어 컨텐츠를 개인 서버에서 관리하고자 할 때 특히 유용함.
     * Kyoo는 Plex나 Jellyfin과 같은 기존 솔루션에 비해 더 나은 사용자 경험을 제공하려는 목표를 가지고 있으며, 특히 파일 이름이나 구조에 대한 제약이 덜함.
     * 그러나 오픈소스 프로젝트는 지속적인 커뮤니티 지원과 개발이 필요하며, 상업적인 솔루션에 비해 기능이나 안정성에서 차이가 있을 수 있음.
     * Kyoo의 성공은 개발자와 사용자 커뮤니티의 활발한 참여와 기여에 크게 의존할 것이며, 이는 오픈소스 프로젝트의 일반적인 도전과제임.

        Hacker News 의견

     * 프로젝트의 시작이 기술에 대한 학습을 위한 ""샌드박스"" 프로젝트였다는 점이 인상적임. Plex 사용자로서 현재 서비스에서 전환할 생각은 없지만, 프로젝트가 멋져 보임.

     ""샌드박스"" 프로젝트로 시작하여 기술 학습의 장이었던 것은 훌륭한 동기부여가 됨.
     * Jellyfin에서 Plex로 전환을 시도했을 때, 라이브러리 관리에 대한 무관심과 파일 구조에 대한 고집이 불편함. Kyoo는 사용자 친화적인 접근을 하는지, 아니면 Jellyfin과 비슷한지 궁금함.

     Jellyfin과 비교하여 Kyoo가 라이브러리 관리와 파일 구조에 있어 사용자 친화적인지 여부에 대한 의문 제기.
     * postgres와 rabbitmq를 동시에 사용하는 것은 과도해 보임. PR을 통해 단순화할 수 있는지, RMQ가 미디어 서버에서 어떤 역할을 하는지 살펴볼 필요가 있음.

     postgres와 rabbitmq의 병행 사용에 대한 우려와 단순화 가능성 탐색.
     * 미디어 서버 프로젝트가 C#을 선호하는 경향이 있는데, 이는 기술적인 이유 때문인지, 아니면 대형 프로젝트의 규범 때문인지 흥미로움.

     미디어 서버 프로젝트에서 C# 선호 현상에 대한 궁금증.
     * Plex의 방향성에 대한 대안이 등장하는 것이 반가움. SONARR/RADARR와 직접 연결하여 사용자 편의성을 높이는 기능을 기대함.

     Plex 대안으로서의 기능적 기대감과 SONARR/RADARR 연동에 대한 제안.
     * 음악 관리 기능이 없는 것이 아쉬움. Plex를 주로 음악 라이브러리 관리에 사용하고 있으며, Plex도 이 부분에 충분히 집중하지 않지만 사용하기에는 괜찮음.

     음악 관리 기능의 부재에 대한 아쉬움 표현.
     * Jellyfin과 tailscale을 설정하던 중, 로컬에서는 잘 작동했지만, tailscale을 통한 원격 공유 시 스트리밍 시작에 지연이 발생함. 새로운 서비스를 시도해볼 의향이 있음.

     Jellyfin과 tailscale 사용 시 원격 스트리밍의 문제점과 새로운 서비스에 대한 시도 의사.
     * TV로 캐스팅이 가능한지 궁금함. 이 기능이 Plex에 머물게 하는 유일한 이유임.

     TV 캐스팅 기능에 대한 문의.
     * Plex, Jellyfin, Emby 사용 경험이 있는데, 비디오 플레이어의 반응 속도가 빠르고 디자인이 깔끔함. 타임 스킵이 거의 즉각적이고 인터페이스가 깨끗함.

     비디오 플레이어의 반응성과 인터페이스의 깔끔함에 대한 긍정적인 평가.
     * OTA/DVR 지원 여부가 궁금함. Plex가 이 기능을 제공하는 다른 서비스보다 낫지만, 비용이 많이 듬.

     OTA/DVR 지원에 대한 질문과 Plex의 해당 기능에 대한 긍정적인 평가.
"
"https://news.hada.io/topic?id=14156","인텔 CPU 및 GPU에서 LLM을 실행하기 위한 PyTorch 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인텔 CPU 및 GPU에서 LLM을 실행하기 위한 PyTorch 라이브러리

💫 IPEX-LLM

     * **IPEX-LLM**은 인텔 CPU 및 GPU에서 매우 낮은 지연 시간으로 LLM을 실행하기 위한 PyTorch 라이브러리임.
     * 인텔 PyTorch 확장(IPEX), llama.cpp, bitsandbytes, vLLM, qlora, AutoGPTQ, AutoAWQ 등의 우수한 작업 위에 구축됨.
     * llama.cpp, Text-Generation-WebUI, HuggingFace transformers 등과의 원활한 통합을 제공함.
     * ipex-llm에서 최적화/검증된 50개 이상의 모델이 있으며, 여기에서 전체 목록을 볼 수 있음.

  최신 업데이트 🔥

     * bigdl-llm이 ipex-llm으로 변경되었으며, 원래 BigDL 프로젝트는 여기에서 찾을 수 있음.
     * ipex-llm은 이제 ModelScope(魔搭)에서 직접 모델을 로드할 수 있음.
     * ipex-llm은 INT2 지원을 추가하여 인텔 GPU에서 대형 LLM(예: Mixtral-8x7B)을 16GB VRAM으로 실행할 수 있게 함.
     * 사용자는 이제 Text-Generation-WebUI GUI를 통해 ipex-llm을 사용할 수 있음.
     * ipex-llm은 이제 _Self-Speculative Decoding_을 지원하여 인텔 GPU 및 CPU에서 FP16 및 BF16 추론 지연 시간을 각각 약 30% 가속화함.
     * ipex-llm은 이제 인텔 GPU에서 LLM 파인튜닝의 포괄적인 목록을 지원함.

  ipex-llm 데모

     * 12세대 인텔 코어 CPU와 인텔 Arc GPU에서 chatglm2-6b 및 llama-2-13b-chat 모델의 최적화된 성능을 아래에서 확인할 수 있음.

  ipex-llm 빠른 시작

    ipex-llm 설치

     * Windows GPU: 인텔 GPU가 있는 Windows에서 ipex-llm 설치
     * Linux GPU: 인텔 GPU가 있는 Linux에서 ipex-llm 설치
     * Docker: 인텔 CPU 및 GPU에서 ipex-llm 도커 사용
     * 자세한 내용은 설치 가이드를 참조

    ipex-llm 실행

     * llama.cpp: 인텔 GPU에서 llama.cpp용 ipex-llm 실행
     * vLLM: 인텔 GPU 및 CPU에서 vLLM에서 ipex-llm 실행
     * FastChat: 인텔 GPU 및 CPU에서 FastChat 서빙에서 ipex-llm 실행
     * LangChain-Chatchat RAG: LangChain-Chatchat에서 ipex-llm 실행
     * Text-Generation-WebUI: oobabooga WebUI에서 ipex-llm 실행
     * Benchmarking: 인텔 CPU 및 GPU에서 ipex-llm의 벤치마킹 실행

    코드 예제

     * 저비트 추론
          + INT4 추론: 인텔 GPU 및 CPU에서 INT4 LLM 추론
          + FP8/FP4 추론: 인텔 GPU에서 FP8 및 FP4 LLM 추론
          + INT8 추론: 인텔 GPU 및 CPU에서 INT8 LLM 추론
          + INT2 추론: 인텔 GPU에서 INT2 LLM 추론
     * FP16/BF16 추론
          + FP16 LLM 추론: 인텔 GPU에서 가능한 자기 추측 디코딩 최적화와 함께
          + BF16 LLM 추론: 인텔 CPU에서 가능한 자기 추측 디코딩 최적화와 함께
     * 저장 및 로드
          + 저비트 모델: ipex-llm 저비트 모델 저장 및 로드
          + GGUF: GGUF 모델을 ipex-llm에 직접 로드
          + AWQ: AWQ 모델을 ipex-llm에 직접 로드
          + GPTQ: GPTQ 모델을 ipex-llm에 직접 로드
     * 파인튜닝
          + 인텔 GPU에서 LLM 파인튜닝, LoRA, QLoRA, DPO, QA-LoRA 및 ReLoRA 포함
          + 인텔 CPU에서 QLoRA 파인튜닝
     * 커뮤니티 라이브러리와의 통합
          + HuggingFace transformers
          + 표준 PyTorch 모델
          + DeepSpeed-AutoTP
          + HuggingFace PEFT
          + HuggingFace TRL
          + LangChain
          + LlamaIndex
          + AutoGen
          + ModeScope
     * 튜토리얼
          + 자세한 내용은 ipex-llm 문서 웹사이트를 참조

  검증된 모델

     * ipex-llm에서 최적화/검증된 50개 이상의 모델에는 LLaMA/LLaMA2, Mistral, Mixtral, Gemma, LLaVA, Whisper 등이 포함되어 있으며, 아래에서 목록을 볼 수 있음.

GN⁺의 의견

     * IPEX-LLM은 인텔 하드웨어에서 대규모 언어 모델을 최적화하여 실행할 수 있는 강력한 도구로, 인공지능 연구 및 개발에 큰 도움이 될 수 있음.
     * 이 라이브러리는 다양한 모델과 통합되어 있어 사용자가 쉽게 접근하고 활용할 수 있는 장점이 있음.
     * 하지만 인텔 하드웨어에 특화되어 있어 다른 제조사의 하드웨어에서는 최적의 성능을 보장하지 않을 수 있음.
     * 이 기술을 도입할 때는 하드웨어 호환성과 성능 튜닝에 대한 충분한 이해가 필요함.
     * 대규모 언어 모델의 추론과 파인튜닝을 빠르게 진행할 수 있어, 시간과 자원을 절약하는 데 기여할 수 있음.

        Hacker News 의견

     * GPU VRAM 혁신 기대감

     한 회사가 ""4-코어 영원히""에서 벗어나 다음 소비자 GPU 출시를 통해 ""8-16GB VRAM 영원히""라는 AMD와 Nvidia의 오랜 제한을 깨뜨릴 기회를 가짐. 32-48GB VRAM을 합리적인 가격에 제공하는 것이 시적일 것.
     * 인텔의 소프트웨어 지원 긍정적 평가

     인텔이 소프트웨어 지원에 있어 올바른 방향으로 나아가고 있음. 벤치마크 데이터를 보고 싶으며, 제시된 예시에서의 속도가 꽤 좋아 보임.
     * 인텔 GPU에 대한 추천 요청

     많은 vRAM을 가진 인텔 GPU에 대한 추천이 필요함. 이와 호환되는 제품이 있는지 문의.
     * 성능 벤치마크에 대한 관심

     'llamafile'이나 다른 벤치마크와의 성능 비교에 관심이 있음. 해당 벤치마크에 대한 링크 제공.
     * 클라우드 GPU 사용 편의성 제안

     클라우드 제공업체에서 호환 가능한 GPU로 예제를 실행할 수 있는 스크립트 제공이 좋을 것 같음. 이에 관심이 있는지, 직접 구성을 고려 중임.
     * 클라우드 제공업체의 인텔 GPU 부재

     주요 클라우드 제공업체에서 인텔 GPU를 제공하지 않음.
     * 제품 리뷰에 대한 기대 표현

     리뷰를 기대하며, 향후 제품에 대한 평가에 관심 있음.
"
"https://news.hada.io/topic?id=14123","저비용 로봇 암","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                저비용 로봇 암

$250 로봇 팔

     * 이 저장소에는 약 $250 비용이 드는 저렴한 로봇 팔을 만들고 제어하는 파일이 포함되어 있음.
     * 두 번째 로봇 팔(리더 팔)을 만들어 다른 팔(팔로워 팔)을 제어할 수도 있음.
     * 리더 팔의 디자인은 GELLO 프로젝트에서 영감을 받았지만 더 간단하게 만들어짐.
     * 이러한 로봇 팔은 로봇 학습에 적합함.
     * 두 로봇 팔은 옷을 접는 데에도 사용할 수 있음.
     * 로봇 팔은 Dynamixel XL430과 XL330 서보 모터를 사용함.
     * XL430 모터는 거의 두 배 강력하며 첫 두 관절에 사용됨.
     * XL330 모터는 약하지만 각각 18g밖에 되지 않아 팔을 매우 가볍고 빠르게 만듦.
     * Dynamixel은 서보 모터를 컴퓨터에 연결하기 위한 U2D2 어댑터를 판매하지만, 비싸고 지연 시간이 매우 높음.
     * 이 로봇 팔은 더 저렴한 어댑터 보드를 사용하여 제작됨.
     * 로봇 팔은 Dynamixel SDK로 제어할 수 있음: pip install dynamixel-sdk

  팔로워 팔

    필요한 재료

     * 2x Dynamixel xl430-w250, $100
     * 4x Dynamixel xl330-m288, $96
     * XL330 아이들러 휠, $10
     * XL430 아이들러 휠, $7
     * 직렬 버스 서보 드라이버 보드, $10
     * 전압 감소기, $4
     * 12V 전원 공급 장치, $12
     * 테이블 클램프, $6
     * 전선, $7
     * 로보티스 샵에서 보통 10% 할인 코드를 사용할 수 있음.
     * 그리퍼에 그립 테이프를 추가하는 것이 도움이 될 수 있음.
     * 서보 드라이버 보드를 컴퓨터에 연결하기 위한 USB-C 케이블이 필요함.

  조립

     * 조립 비디오 링크: https://youtu.be/RckrXOEoWrk
     * 모든 부품을 3D 프린터로 인쇄함. STL 파일은 hardware/follower/stl에 있음.
     * 부품은 인쇄하기 쉽게 설계됨. 그리퍼의 움직이는 부분만 지지대가 필요함.
     * 베이스 없이 팔을 조립함. 서보가 CAD에서와 같은 위치에 고정되어 있는지 확인함.
     * 전압 감소기에 전선을 납땜함. 입력은 여성 커넥터에, 출력은 남성 커넥터에 연결함.
     * 전압 감소기와 서보 드라이버 보드를 베이스에 나사로 고정함.
     * 베이스를 팔에 나사로 고정함.
     * 드라이버 보드의 D, V, G 포트를 어깨 회전 서보에 연결함.
     * 어깨 회전 서보를 어깨 리프트 서보에 연결함.
     * 전압 감소기의 입력을 드라이버 보드의 V와 G 포트에 연결함.
     * 전압 감소기의 출력과 드라이버 보드의 나머지 D 포트를 팔꿈치 서보에 연결함.
     * 드라이버 보드를 전원 공급 장치에 연결함.
     * 드라이버 보드를 컴퓨터에 연결함(Linux와 macOS에서 작동해야 함).
     * 장치 이름을 확인함 (예: /dev/tty.usbmodem57380045631) ls /dev/tty.*
     * Dynamixel Wizard로 장치를 스캔함.
     * XL330 서보에 연결하여 입력 전압을 확인함. 전압 감소기의 나사를 조정하여 입력 전압이 5V가 되도록 함.
     * 어깨 서보에 대해 서보 ID를 1로, 그리퍼 서보에 대해 5로 설정함.
     * 모든 서보에 대해 보드레이트를 1M으로 설정함.

  리더 팔

    필요한 재료

     * 6x Dynamixel xl330-w077, $144
     * 직렬 버스 서보 드라이버 보드, $10
     * 5v 전원 공급 장치, $6
     * 테이블 클램프, $6
     * XL330 프레임, $7
     * 리더 팔의 조립은 모든 모터가 5v를 사용하기 때문에 더 간단함.
     * 그리퍼는 손잡이와 트리거로 대체됨.
     * 사용 중에는 트리거에 작은 토크를 가하여 기본적으로 열리도록 할 수 있음.
     * GELLO 디자인은 이 목적으로 스프링을 사용하지만 조립이 훨씬 더 어려움.
     * teleoperation.py 스크립트를 사용하여 팔을 테스트할 수 있음. 그러나 장치 이름을 조정해야 할 수도 있음.

GN⁺의 의견

     * 이 로봇 팔 프로젝트는 로봇 공학과 DIY 커뮤니티에게 매우 흥미로운 자료가 될 수 있음. 저렴한 비용으로 고급 기능을 갖춘 로봇 팔을 직접 만들고 프로그래밍하는 경험은 학습과 혁신에 큰 도움이 됨.
     * 로봇 팔의 조립과 프로그래밍 과정은 초급 소프트웨어 엔지니어에게 기계공학과 소프트웨어의 통합적인 이해를 제공할 수 있음. 이는 실제 세계 문제를 해결하는 데 필요한 다학제적 접근법을 배우는 데 유용함.
     * 프로젝트의 오픈소스 성격은 사용자들이 자유롭게 코드를 수정하고 개선할 수 있게 하여, 지속적인 커뮤니티 기반 개선을 가능하게 함.
     * 그러나 이러한 프로젝트는 일반 사용자들에게는 다소 어려울 수 있으며, 특히 하드웨어 조립이나 소프트웨어 설정에 익숙하지 않은 경우 더욱 그러함. 따라서 사용자 친화적인 설명서나 온라인 지원 커뮤니티의 존재가 중요함.
     * 이 기술을 도입할 때는 정밀도, 내구성, 안전성 등을 고려해야 하며, 상업적인 로봇 팔과 비교했을 때의 성능 제한을 인지하고 있어야 함.

        Hacker News 의견

     * 유리 불어주는 친구를 위해 팔 모양의 로봇을 만들고 있음. 수작업으로 조작하는 면삭기를 사용하는 대신 로봇을 이용해 면을 낼 수 있는 유리 펜던트를 만드는 것을 고려 중임.
          + 반복성이 어려운 부분임. 정밀한 허용 오차가 필요하며, 로봇 팔의 각 관절은 기저부로부터 멀어질수록 부정확성을 더함. 예를 들어, 기저부에 1mm의 여유가 있으면, 20cm 떨어진 팔 끝에는 4mm의 여유가 생기고 그 이상의 팔은 더 많은 여유가 생김.
          + 면삭 작업을 위해서는 일반 서보 모터보다 훨씬 더 미세한 해상도가 필요함. 기어를 장착하는 것은 어려움이 있는데, 관절을 조이기 위해 백래시(backlash)가 필요하지만, 움직일 때 마찰이 크지 않도록 조절해야 함. 웜 기어는 사용하기에 너무 느리고 지나치게 강성이 높기 때문에 적합하지 않음. 따라서 로봇 팔의 기어로는 사이클로이드 기어가 최선의 선택임. 또한 유리를 다루는 것은 불안정하기 때문에 일정한 피드백이 있는 진짜 서보 모터가 필요함.
          + 건설 비용을 1-2천 달러로 예상함. 그 중 대부분은 기어박스에 들어감.
     * 아직 저렴하고 고품질, 합리적으로 표준화된 로봇 팔을 대량 생산하는 회사가 없는 것에 놀람. 3D 프린터나 CNC 기계처럼 소비자/아마추어 수준의 가격대에 진입한 것들이 많지만, 로봇 팔은 아직 크게 탐구되지 않은 분야로 보임. 아두이노/라즈베리 파이와 같은 잠재력이 있지만, 아직 그만큼 인기 있는 이름/생태계는 들어본 적이 없음.
     * 덜 야심찬 것부터 시작하는 것이 어떨지 제안함. 예를 들어, 사람을 따라다니고 물건을 운반하며 장애물을 피할 수 있는 저비용 로봇 플랫폼. 팔은 없어도 괜찮고, 물건을 올리고 내리는 데는 내 팔을 사용할 수 있음.
          + 다리 부상으로 목발을 사용했을 때, 물건을 옮기는 것이 갑자기 문제가 됨. 움직임이 제한된 많은 사람들이 있고, 그 외에도 자주 물건을 잃어버리는 경우가 있어 이러한 로봇이 도움이 될 수 있음.
          + 알리익스프레스에는 많은 장난감 로봇 차체가 있지만, 실용적이라고 할 만한 크기(가장 큰 면이 20cm 미만)가 아님.
     * 로봇이 얼마나 많은 무게를 들 수 있는지 궁금함.
          + 홈짐에서 운동할 때 얼굴로 바람을 보내기 위해 팬을 조작하고 싶은데, 팬이 몇 파운드가 됨.
          + 대안으로, 이러한 프로젝트에 적합한 하드웨어 모터에 대한 제안이 있음.
     * 로봇 팔에 대해 열광하는 기술 애호가임. 하지만 다른 사람들이 로봇 팔을 실용적인 가정용으로 어떻게 사용하는지 궁금함. 좋은 프로젝트가 있을 때 해킹하는 것이 더 재미있음.
     * 이 주제에 관심이 있다면, DIY가 아닌 완전 조립된 제품도 추천함.
          + 가격 대비 놀라운 품질의 제품을 가지고 있음.
     * 만들고 싶은 것: 회전 가능한 테이블 위 원형 디스크 베이스로, 휴대폰을 곧게 유지할 수 있는 장치를 갖춤. 스탠드 자체에는 4개의 작은 단방향 마이크가 있어, 인간의 주파수를 필터링한 후 어느 방향에서 소리가 들리는지 파악함. 그에 따라 휴대폰이 그 방향을 향하도록 회전함(지속적으로).
          + 가족과 자주 하는 비디오 통화를 위한 사용 사례임. 식탁 주위에 가족이 앉아 있기 때문에 휴대폰을 놓기에 좋은 장소가 없음. 이 자동 회전 스탠드를 사용하면, 말하는 사람을 향해 휴대폰이 자동으로 회전함.
          + 오디오 처리 코드는 작성할 수 있지만, 하드웨어를 시작하는 방법에 대해서는 아무런 아이디어가 없음. 아이디어를 훔쳐도 좋지만, 어떻게 만드는지 공유해달라고 요청함. 이것이 존재하기를 원하며, 재미있는 프로젝트로 직접 만드는 방법을 알고 싶어함.
     * Thor 3D 프린트 팔을 만들고 있었는데, 이 프로젝트가 훨씬 나아 보임. 방향을 전환할 것 같음.
          + 사이드 바: 이 서보 모터들은 게임 체인저임.
     * 오랫동안 Dynamixel 사용자로서, U2D2 어댑터가 다른 옵션에 비해 비싸다는 것에 동의함. 그러나 ""지연 시간이 매우 높다""는 주장에 대한 양적인 근거를 원함. 다양한 플랫폼에서 낮은 지연 시간(~1ms)을 위한 확실한 선택으로 항상 발견됨.
     * Sainsmart 로봇 팔을 구입함. 저렴하고 6자유도를 가지고 있어서 로봇 프로그래밍 연습에 사용함.
"
"https://news.hada.io/topic?id=14129","아마존, 매장에서 "Just Walk Out" 결제 시스템 폐지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아마존, 매장에서 ""Just Walk Out"" 결제 시스템 폐지

     * 아마존이 '그냥 나가기(Just Walk Out)' 기술을 사용한 계산대 없는 식료품점을 단계적으로 폐지함.
     * 이 기술은 카메라와 센서를 이용해 고객이 매장에서 가져가는 물건을 추적함.
     * 아마존 프레시 매장의 절반 이상이 이 기술을 장착하고 있으나, 인도에 있는 1,000명 이상의 인력이 비디오를 보며 라벨링하여 정확한 계산을 보장함.

대시 카트로 전환

     * 아마존은 '대시 카트(Dash Carts)'로 전환하고 있으며, 이는 쇼핑 카트에 내장된 스캐너와 화면을 통해 쇼핑하는 동안 결제할 수 있게 함.
     * 대시 카트는 '그냥 나가기' 기술보다 더 신뢰할 수 있는 해결책을 제공함.
     * 아마존 프레시 매장은 앞으로 아마존 회원이 아닌 사람들을 위한 자체 결제 카운터도 제공할 예정임.

기술의 도입과 문제점

     * '그냥 나가기' 기술은 2016년에 처음 소개되었으며, 식료품 쇼핑 분야에서 아마존의 가장 크고 대담한 혁신으로 여겨짐.
     * 이 기술은 놀라웠지만 몇 가지 문제가 있었음. 고객이 매장을 떠난 후 영수증을 받는 데 몇 시간이 걸릴 때가 있었고, 이는 해외 캐셔가 비디오를 다시 보고 고객별로 항목을 할당하기 때문임.
     * 각 매장에 설치된 스캐너와 비디오 카메라 시스템은 매우 비용이 많이 듬.
     * 2022년까지 '그냥 나가기' 매출의 1000건 중 700건이 인간 검토자가 필요했으며, 이는 아마존의 내부 목표인 1,000건당 50건 미만의 검토를 크게 놓친 것임.
     * 아마존은 이러한 표현이 부정확하다고 주장하며, 얼마나 많은 구매가 검토를 필요로 하는지에 대해 이의를 제기함.

GN⁺의 의견

     * '그냥 나가기' 기술은 인공지능과 기계 학습의 발전을 보여주는 사례이지만, 실제 상황에서는 여전히 인간의 개입이 필요한 경우가 많음을 보여줌.
     * 아마존의 기술 전환은 자동화 기술이 인간의 노동을 완전히 대체하기에는 아직 한계가 있음을 시사함.
     * 대시 카트와 같은 대체 기술은 사용자 경험을 개선하고 운영 비용을 절감할 수 있는 방법을 제시함.
     * 이러한 변화는 기술적 한계와 비용 문제를 해결하기 위한 실용적인 접근법을 보여주며, 향후 유사한 기술을 도입하려는 다른 소매업체에 중요한 교훈을 제공할 수 있음.
     * 계산대 없는 매장 기술의 폐지는 소비자와 소매업체 모두에게 기술이 가져다주는 편리함과 그 한계 사이에서 균형을 찾는 과정이 중요함을 강조함.

   700건 중 1,000건이 아니라
   1,000건 중 700건인거 같습니다!

   아흑 AI가 이런걸 틀리는군요

        Hacker News 의견

     * 코로나 이전에 아마존 고 매장 경험은 놀라웠음. 편의점의 편리함과 일반 식료품점의 가격을 제공했으며, 음식 선택과 블루에이프런 스타일의 식사 키트가 훌륭했음. 또한 알렉사 통합으로 요리 중 레시피의 다음 단계를 음성으로 물어볼 수 있었음. 아마존 프레시 매장으로 확장되었을 때는 새로운 바람이었고, 자가 결제의 불편함이 사라졌음. 재사용 가능한 쇼핑백을 가져와 물건을 담고 집으로 걸어갈 수 있었음. 가장 무리 없는 쇼핑 경험이었음. 그러나 '쇼핑하면서 스캔하기'는 큰 후퇴로, 마치 자가 결제가 계속 따라다니는 듯한 느낌을 줌. 코로나 동안 선택과 운영 시간 모두 타격을 받았고 회복되지 않았음.
     * 유니클로는 일본과 샌프란시스코에서 멋진 결제 방식을 도입함. 옷을 큰 통에 넣으면 모든 항목이 합산됨. RFID 기술을 사용하는 것으로 보이며 지금까지 100% 정확함.
     * 비슷한 제품을 개발한 경험이 있음. 이들이 이익을 내고 있었다고는 생각되지 않음. 많은 센서에도 불구하고 항상 누락되는 것들이 있었음. 센서 비용 외에도 가장 비용이 많이 드는 운영 비용은 주석 처리임. 새로운 제품이 나오면 여러 주석 처리된 사진과 재조정된 무게 센서가 필요함. 상인이 동일한 UPC에 크리스마스 브랜딩을 하기로 결정하면, 해당 제품에 대한 모든 비전 모델이 오염됨. 이는 한 달 반 동안 존재하는 동안 재주석 처리되어야 하며, 재고가 다시 바뀌면 모델을 교체해야 함. 상인들이 지속적으로 제품을 재설계하는 한, 데이터셋은 지속적으로 쇠퇴 상태에 있을 것임. 데이터셋 관리, 기술 비용, 연구 비용, 단순한 운영 비용 등 이 문제를 해결하기 위한 비용이 많이 듬. 많은 매개변수를 가진 큰 모델도 도움이 되지 않음; 주석 처리 비용을
       약간 줄일 수 있지만 컴퓨팅 비용을 증가시킴. 이 문제에 대해 깊이 파고들면 아마존 고의 '그냥 나가기' 기능이 실제로는 마케팅 스턴트였음을 알 수 있음.
     * '그냥 나가기' 매장에서 한 번 쇼핑했을 때, 다음 날 청구서를 받았는데 이상하게 느껴졌지만 컴퓨터 비전이 작동하지 않고 사람이 물건을 식별하는 데 의존했다면 이해가 감. 오픈AI와 같은 더 능력 있는 회사가 이를 시도한다 해도, 아마도 제품에 충분히 가까워질 수 있겠지만, 이는 정의가 명확하지 않은 문제로 최고의 결과조차도 가치가 없을 수 있음. 천장에 카메라를 설치해도 사람이 잡는 모든 것을 볼 수는 없으며, 항상 이상한 각도에서 가려지는 부분이 있음. 또한 카메라는 선반의 작은 물건들을 감지하기 위해 매우 고해상도여야 하고 확대해야 함. 이는 신뢰할 수 있는 고객만을 위한 것이며, 도둑들을 고려하면 그들은 이 시스템을 속이는 데 쉽게 하루를 보낼 것임. 자가 결제 카트는 도둑에게도 취약하지만 적어도 줄을 훨씬 더 신뢰성 있게
       건너뛸 수 있음.
     * 스탠다드 코그니션 이라는 스타트업도 같은 경험을 제공했지만, 그들의 웹사이트를 확인해보니 그들도 포기한 것 같음. 그들의 마케팅 비디오를 다시 보면서 더 낙관적인 접근을 해보면, '그냥 나가기' 기술이 정말 유용한가? 그들은 가치 추가가 훨씬 명확한 제품으로 전환한 것 같음(예측 분석, 손실 방지, 맥락 인식 마케팅). '그냥 나가기' 기술은 구현하는 데 아마도 상당히 비쌌을 것이지만, 자가 결제보다 훨씬 더 많은 비용을 절약하지는 못했을 것임. 여기서 교훈은 '작동하지 않았다'기보다는 '경제적으로 효율적이지 않았다'는 것일 수 있음.
     * SJSU 캠퍼스의 '진저 마켓'이 비슷한 '그냥 나가기' 접근법을 시도했지만 잘 작동하지 않았음. 두 번 청구되거나 가져가지 않은 물건에 대해 청구되거나 가져간 물건에 대해 청구되지 않는 등의 문제가 있었음. 환불 과정도 고통스러웠음. 너무 나빠서 지난 봄에 사용을 중단했지만, 다시 시도할 것이라고 주장함. 왜 이런 시도를 하는지 의문임. 자가 결제나 캐셔가 훨씬 더 잘 작동하며 비용이 덜 들 것이라고 믿기 어려움. 매장에는 카메라가 가득함. 처리해야 할 많은 비디오가 있을 텐데, 그것이 기계든 사람이든 비용이 많이 들 것임.
     * 아마존 프레시의 런던 매장에서 가끔 쇼핑함. 주로 편리함과 신기함 때문임. 때때로 아마존 주문을 거기로 배송받기도 함. 그러나 테스코 등과 비슷한 제품에 대해 가격이 더 높은 것 같아 정기적인 일상 쇼핑을 하고 싶은 마음이 들지 않음. 알디도 런던 그리니치 매장에서 같은 '그냥 나가기' 쇼핑 모델을 시험 중임. 청구서를 받는 시간이 다양하기 때문에 어느 정도 수동 개입이 있는 것으로 의심됨. 때로는 매장을 나가자마자 거의 즉시 청구되기도 하고, 다른 때는 몇 시간 후에 청구됨. 이것은 알디의 정규, 경쟁력 있는 가격을 제공하기 때문에 더 매력적임.
     * '쇼핑하면서 스캔하기' 스타일의 시스템이 식료품점에 대한 다음 현실적인 단계라고 생각함. 이 시스템을 사용하는 것을 정말 좋아함. 쇼핑하면서 바로 가방에 물건을 넣을 수 있음. 이 시스템을 개선하는 더 나은 방법은 저렴한 RFID 기술(UHF EPC)을 사용하여 도난 방지 장벽을 통과할 때 시스템이 정확히 무엇을 가지고 있는지 알 수 있게 하는 것임. 그러면 아무것도 스캔할 필요가 없음.
     * '식료품의 비밀 생활'이라는 책을 최근에 읽음. 놀라운 책임. 과거의 식료품점과 슈퍼마켓이 최고의 고객 경험을 제공하기 위해 매우 열심히 노력했음을 알게 됨. 오늘날에는 고객 경험이 비용 절감으로 대체된 것 같음. 자가 결제는 내부적으로도 사회적으로도 문제가 많았지만, 슈퍼마켓은 계속해서 이를 밀어붙임. 결론적으로 비용 절감이라고만 생각할 수 있음.
     * SNL은 이에 대한 훌륭한 스케치를 가지고 있음 - [링크 제공]
"
"https://news.hada.io/topic?id=14199",""에이전트 수 증가가 필요한 전부: LLMs 성능은 에이전트 숫자와 함께 확장"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ""에이전트 수 증가가 필요한 전부: LLMs 성능은 에이전트 숫자와 함께 확장""

더 많은 에이전트가 필요할 뿐

     * 대규모 언어 모델(LLMs)의 성능이 인스턴스화된 에이전트의 수에 따라 확장될 수 있음을 발견.
     * 샘플링 및 투표 방법을 통해 기존의 복잡한 방법들과는 독립적으로 LLMs를 향상시킬 수 있으며, 향상 정도는 작업 난이도와 관련이 있음.
     * 다양한 LLM 벤치마크에서 광범위한 실험을 수행하여 이러한 발견의 존재를 확인하고, 그 발생을 촉진할 수 있는 속성을 연구함.
     * 연구에 사용된 코드는 공개적으로 이용 가능.

GN⁺의 의견

     * 이 연구는 대규모 언어 모델의 성능 향상에 대한 새로운 접근 방식을 제시함으로써 인공지능 분야에 중요한 기여를 할 수 있음.
     * 에이전트의 수를 늘리는 것이 성능 향상에 직접적인 영향을 미친다는 발견은, 자원 확장성과 효율성에 대한 새로운 관점을 제공함.
     * 실험적인 결과가 실제 응용 프로그램에 어떻게 적용될 수 있는지에 대한 추가적인 연구가 필요함.
     * 성능 향상이 작업 난이도와 관련이 있다는 점은, 특정 작업에 대한 언어 모델의 최적화 전략을 수립하는 데 도움이 될 수 있음.
     * 공개된 코드를 통해 다른 연구자들이 이 연구를 재현하고 확장하는 데 기여할 수 있으며, 이는 과학적 투명성과 협력을 촉진함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이 논문은 다중 에이전트 설정(예: Chain-of-thought, LLM-Debate)의 전체 아이디어에 의문을 제기함.
          + 대안적 방법으로 동일한 LLM에 같은 질의를 여러 번 실행하고, 답변 간 유사성 알고리즘을 사용하여 가장 흔한 답변을 선택함.
          + 이 간단한 알고리즘은 다른 다중 에이전트 알고리즘들과 비교해도 뛰어난 성능을 보임.
          + 이는 다중 에이전트 스키마가 특별한 것을 하고 있지 않으며, 개선된 결과는 주로 LLM이 여러 번 실행되고 최선의 답변을 선택하도록 요청하는 프롬프트 때문임을 시사함.
     * 두 번째 댓글 요약:
          + 16개월 동안 단일 에이전트가 모든 것을 올바르게 처리하는 것에 집중하는 대신 에이전트를 계층화할 필요가 있다고 주장해옴.
          + 작업에 대한 수익률이 이상적인 인간 회의 크기와 비슷하게 빠르게 감소하는 것이 흥미로움.
          + 에이전트의 수를 더 세밀하게 조정하면 이상적인 회의 크기와 얼마나 일치하는지 궁금함.
          + 각 에이전트가 약간 다른 목표로 미세 조정될 때 얻을 수 있는 성능 향상을 보고 싶어함.
     * 세 번째 댓글 요약:
          + 최근 ACM ByteCast 팟캐스트 에피소드에서 스탠포드 대학교 컴퓨터 과학과의 에드워드 창 교수가 다룬 내용과 관련이 있음.
          + 여러 LLM이 토론 주제에 대해 서로 대화하고 인간이 중재자 역할을 하는 방식을 사용함.
          + 여러 LLM이 대화를 통해 도달한 최종 답변은 정확도와 정밀도 모두에서 크게 향상됨.
     * 네 번째 댓글 요약:
          + 전문가의 혼합에 대한 연구에서 느끼는 좌절은, LLM을 여러 번 질의하고 다수결로 결과를 선택하는 것이 한 번 질의하고 그 결과를 선택하는 것보다 일반적으로 성능이 더 좋다는 기본 확률적 추론임.
          + 다양한 LLM의 혼합이나 작업을 하위 작업으로 나누는 더 나은 방법을 찾음으로써 이득을 더욱 향상시킬 수 있을 것으로 보임.
     * 다섯 번째 댓글 요약:
          + 그래프를 보면 에이전트 10개로 대부분의 이득을 얻고, 20개로 약간 더 많은 이득을 얻으며, 그 이후로는 수익률이 감소함.
     * 여섯 번째 댓글 요약:
          + LLM 서비스를 제공하는 회사들의 비즈니스 모델에 대한 장난스러운 생각: 여러 번 호출해야만 목적지로 갈 수 있는 차량 서비스, 여러 번 적용해야만 옷이 ""아마도"" 깨끗해지는 세제.
          + ""인공 지능""을 제공하는 회사라면, 올바른 답변에만 비용을 지불하는 것이 합리적임.
     * 일곱 번째 댓글 요약:
          + 이 방법이 매우 비싸고 지속 가능하지 않은 것은 아닌지, 새로운 모델들이 아마도 수익률이 감소할 것으로 보이기 때문에 MoE가 나아가야 할 방향이라는 의견에 동의함.
          + 단일 프롬프트에 대한 계산이 7-15배 증가할 것임.
     * 여덟 번째 댓글 요약:
          + 공개된 저장소와 벤치마크에 사용된 프롬프트가 매우 흥미로움.
          + LLM 기반 에이전트를 도구 세트를 사용하여 벤치마킹하는 것을 보고 싶어함.
     * 아홉 번째 댓글 요약:
          + ""x가 전부 필요하다""는 말을 모두 합치면, 실제로 많은 것이 필요하다는 것을 깨닫게 될 것임.
     * 열 번째 댓글 요약:
          + 어떤 수의 GPT 3.5 에이전트들의 앙상블은 한 번의 GPT-4 호출보다 정확도가 떨어짐.
"
"https://news.hada.io/topic?id=14139","Shell(껍데기) 회사를 비밀 소유주와 연결하는 팁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Shell(껍데기) 회사를 비밀 소유주와 연결하는 팁

Shell 회사의 비밀 소유주 연결 팁

     * Shell 회사와 신탁의 실제 소유주를 찾는 것은 때때로 UFO를 찾는 것처럼 애매하고 어려울 수 있음.
     * 이러한 회사들은 비즈니스를 실제로 하지 않지만, 합법적인 기업의 법적 세금 회피 또는 불법적이거나 제재된 기업을 실제로 통제하는 개인의 신원과 자산을 숨기기 위해 종종 설립됨.
     * Shell 회사와 최종 수혜자(UBO)를 파헤치는 것은 국제탐사기자협회(ICIJ)와 조직범죄 및 부패보도 프로젝트(OCCRP)와 같은 네트워크에 의해 대표되는 전문적인 조사 분야임.
     * 최근 NICAR 데이터 저널리즘 정상회의에서 ICIJ의 데이터 및 연구 부서 부국장인 Karrie Kehoe는 거의 모든 기자가 시도할 수 있는 몇 가지 팁, 도구 및 시작점을 공유했음.

  Shell 회사의 비밀 소유주 추적을 위한 팁

     * OpenCorporates에서 회사 또는 개인 이름으로 빠른 검색을 시작함.
          + 140개 이상의 정부 등록부에서 회사 기록을 추출하는 방대한 공개 데이터베이스임.
     * 오픈 소스 도구로 벽에 부딪히면 기업 위험 데이터베이스 구독을 고려함.
          + Sayari, Orbis, Factiva와 같은 유료 데이터베이스를 사용할 수 있음.
     * 억만장자와 올리가르히의 입장에서 생각해보기.
          + 억만장자와 UBO의 이기심에 호소하는 장소와 관심사에 대한 데이터베이스 및 등록부 검색을 세밀하게 조정함.
     * ICIJ Offshore Leaks Database에서 검증된 조사 데이터 사용하기.
          + 810,000개의 해외 회사, 재단 및 신탁에 대한 검증된 정보를 포함하는 방대하고 검색 가능한 데이터베이스임.
     * OCCRP의 자금 추적 아카이브에서 잠재적 범죄 연결 플래그하기.
          + Aleph 데이터베이스는 141개국의 439백만 개의 공공 엔티티에 대한 정보를 가지고 있음.
     * 다양한 철자를 실험하고 Google 지도와 대조하기.
          + 다른 철자를 사용하여 장소를 검색하면 예상치 못한 결과를 얻을 수 있음.
     * 다른 무료 포털에서 찾은 '정보 조각'을 교차 검색하기.
          + Open Ownership, Register of Overseas Entities, Tenders Electronic Daily (TED)와 같은 사이트를 사용할 수 있음.
     * 올리가르히 자산 추적을 위한 가족 연결 도구 사용하기.
          + RuPEP은 러시아, 벨라루스, 카자흐스탄의 '정치적으로 노출된 사람들'과 제재된 개인, 그들의 친척 및 법적 실체와의 연관성에 대한 프로필을 제공함.
     * 비밀을 파헤치는 데 도움이 되는 서류 작업에 집중하기.
          + 최종 수혜자는 형성 에이전트를 신뢰하여 검토로부터 안전하다고 믿으므로, 여권 스캔이나 공과금 청구서를 보내고, 그들의 집 주소가 유출 및 데이터베이스에 종종 나타날 수 있음.

GN⁺의 의견

     * Shell 회사와 그 비밀 소유주를 추적하는 것은 금융 범죄와 부패를 조사하는 기자들에게 매우 중요한 작업임. 이러한 회사들은 자금 세탁, 탈세, 불법 자금 조달과 같은 불법 활동을 숨기는 데 사용될 수 있기 때문임.
     * 기사에서 언급된 도구와 데이터베이스는 조사 기자들이 복잡한 금융 네트워크를 해석하고 잠재적으로 불법적인 활동을 폭로하는 데 도움이 될 수 있음.
     * 그러나 이러한 도구를 사용할 때는 데이터의 정확성과 법적인 문제를 고려해야 함. 예를 들어, 어떤 개인이나 회사가 데이터베이스에 나타난다고 해서 반드시 불법 행위와 관련이 있는 것은 아님.
     * 또한, 이러한 조사는 매우 시간이 많이 소요되고 복잡할 수 있으므로, 기자들은 충분한 시간과 자원을 할당해야 함.
     * 이 기사는 기자들에게 유용한 정보를 제공하지만, 일반 대중에게는 이러한 조사 기법이나 도구의 사용이 다소 어려울 수 있음을 인지해야 함.

        Hacker News 의견

     * 미국 정부는 연방 은행 시스템을 통해 모든 달러 거래 데이터에 접근할 수 있음. 월스트리트 은행으로 모든 달러 거래가 보고됨.
     * 제공된 기술과 조언은 유용하지만, 델라웨어 LLC와 같은 경우에는 사실상 쓸모가 없음. 관할 지역과 법인 유형에 따라 실소유주에 대한 정보가 다르며, 델라웨어 LLC는 대부분의 경우 정보가 없는 '블랙 박스'임.
     * 조개회사(shell companies)와는 다르지만, 'They Rule' 웹사이트를 떠올리게 함.
     * 2024년 말까지 모든 기업은 실소유주 정보를 재무부에 공개해야 하며, 신규 기업은 30일 이내에 공개해야 하는 새로운 국가 법률이 있음.
     * 조개회사는 지역 법규를 회피하기 위해 사용되며, 하버드 대학교와 같은 준공공 기관도 LLC와 법률회사를 이용해 지방 정부의 정책에 반하여 매사추세츠주 브라이튼과 케임브리지에서 비밀리에 토지를 구입함. 이러한 거래 뒤의 실제 기관을 아는 것이 중요함.
     * Brooke Harrington과의 팟캐스트 인터뷰에서 해외 자산 관리에 대한 통찰력을 얻음.
     * 주로 각 관할 지역의 규제 기관에서 정보를 수집하는 것으로, 복잡한 다중 관할 구조에서 무슨 일이 일어나고 있는지 파악하기에는 충분하지 않음. 마치 소스 코드 파일 이름만 보고 소프트웨어가 어떻게 작동하는지 추론하는 것과 비슷함. 또한, WorldCheck에 대한 언급이 누락됨.
     * OpenCorporates 웹사이트는 도용된 신분이나 가짜 주소를 사용해 등록된 회사를 찾는 데 유용함. 과거에 아직 지어지지 않은 집의 주소를 사용해 조개회사를 등록한 사기꾼들에게 피해를 입은 적이 있음.
     * 모든 ""민주주의"" 국가에서 발생하는 노골적인 기업 로비 활동이 조개회사보다 훨씬 더 우려됨.
     * 조개회사에는 합법적인 사용 사례가 많지만, 열정적인 엔지니어들에 의해 해결되지 않은 영역임. 턴키 IBC(국제 비즈니스 회사)가 필요한 사람들을 위한 큰 기회가 있지만, 해외 데이터 센터를 사용하는 것이 문제가 될 수 있음. 해외 법인 설립 광고를 자주 보지만, 어떤 것이 진짜이고 어떤 것이 단순히 자신이 직접 할 수 있는 것 위에 추가 수수료를 붙이는 것인지 알 수 있는 합법적인 방법이 없음. IBC에 익숙한 CFO나 전문가를 고용해야 할 정도로 흥미로움.
"
"https://news.hada.io/topic?id=14122","xz 오픈소스 공격의 전체 타임라인 정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         xz 오픈소스 공격의 전체 타임라인 정리

     * 2년 넘게 ""Jia Tan""이라는 이름을 사용하는 공격자가 xz 압축 라이브러리에 성실하고 효과적인 기여자로 활동하여 최종적으로 커밋 권한과 관리자 권한을 부여받음.
     * 그 권한을 사용하여 Debian, Ubuntu, Fedora 및 기타 systemd 기반 Linux 시스템에서 OpenSSH sshd의 종속성이기도 한 xz의 일부인 liblzma에 매우 미묘하고 주의 깊게 숨겨진 백도어를 설치함.
     * 이 백도어는 SSH 세션 시작 시 공격자가 숨겨진 명령을 보내는 것을 감시하여, 로그인하지 않고도 대상 시스템에서 임의의 명령을 실행할 수 있는 기능을 공격자에게 제공함. 인증되지 않은 대상 원격 코드 실행임.
     * 이 공격은 2024년 3월 29일 공개적으로 공개되었으며, 널리 사용되는 오픈소스 소프트웨어에 대한 최초의 심각한 공급망 공격으로 보임.
     * 오픈소스 공급망 보안에 있어 분수령이 될 사건임.
     * 이 게시물은 2021년 말로 거슬러 올라가는 것으로 보이는 이 공격의 사회공학적 측면에 대해 구성한 자세한 타임라인임.

서막

     * 2005-2008년, Lasse Collin이 다른 사람들의 도움을 받아 gzip보다 파일을 약 70%로 압축하는 LZMA 압축 알고리즘을 사용하여 .xz 파일 형식을 설계함.
     * 이 형식은 시간이 지나면서 tar 파일, Linux 커널 이미지 등을 압축하는 데 널리 사용되게 됨.

Jia Tan의 등장과 지원자들

     * 2021-10-29: Jia Tan이 xz-devel 메일링 리스트에 첫 번째 무해한 패치를 보냄.
     * 2021-11-29: Jia Tan이 두 번째 무해한 패치를 보냄.
     * 2022-04-19: Jia Tan이 또 다른 무해한 패치를 보냄.
     * 2022-04-22: ""Jigar Kumar""가 Jia Tan의 패치가 아직 머지되지 않았다고 불만을 표함.
     * 2022-05-19: ""Dennis Ens""가 XZ for Java의 유지 관리 상태를 문의함.
     * 2022-05-19: Lasse Collin이 느린 응답에 사과하며, ""Jia Tan이 XZ Utils에 대해 오프리스트로 도와주고 있으며, 적어도 XZ Utils에서 더 큰 역할을 맡을 수 있을 것""이라고 답변함.
     * 2022-05-27: Jigar Kumar가 패치 스레드에 압박 이메일을 보냄.
     * 2022-06-07: Jigar Kumar가 Java 스레드에 압박 이메일을 보냄.
     * 2022-06-08: Lasse Collin이 관심을 잃지 않았지만 정신 건강 문제로 인해 제한적이라고 답함.
     * 2022-06-10: Lasse Collin이 Jia Tan이 작성한 첫 커밋을 머지함.
     * 2022-06-14: Jugar Kumar가 또 다른 압박 이메일을 보냄.
     * 2022-06-21: Dennis Ens가 유지 관리를 다른 사람에게 넘길 것을 제안하는 압박 이메일을 보냄.
     * 2022-06-22: Jigar Kumar가 C 패치 스레드에 압박 이메일을 보냄.
     * 2022-06-29: Lasse Collin이 ""Jia Tan이 프로젝트에서 더 큰 역할을 맡을 수 있음""을 시사하며 답변함.

Jia Tan이 유지 관리자가 되다

     * Lasse는 Jia Tan과 더 밀접하게 협력하기 시작한 것으로 보임. Jigar Kumar와 Dennis Ens는 가짜 인물일 가능성이 높음.
     * 2022-09-27: Jia Tan이 5.4.0 릴리스 요약을 제공함.
     * 2022-11-30: Lasse Collin이 버그 리포트 이메일을 개인 주소에서 Jia Tan과 공유하는 별칭으로 변경함.
     * 2022-12-30: Jia Tan이 xz 저장소에 직접 첫 커밋을 머지함.
     * 2023-01-11: Lasse Collin이 마지막 릴리스인 v5.4.1을 태그하고 빌드함.
     * 2023-03-18: Jia Tan이 첫 릴리스인 v5.4.2를 태그하고 빌드함.
     * 2023-03-20: Jia Tan이 Google oss-fuzz 구성을 업데이트하여 버그를 자신에게 보내도록 함.
     * 2023-06-22: Hans Jansen이 ""GNU indirect function"" 기능을 사용하는 패치 쌍을 보내고, Lasse Collin이 재작업하여 Jia Tan이 머지함.
     * 2023-07-07: Jia Tan이 oss-fuzz 빌드 중 ifunc 지원을 비활성화함.
     * 2024-01-19: Jia Tan이 웹 사이트를 GitHub 페이지로 이동하여 XZ Utils 웹 페이지를 제어함.

공격 시작

     * 2024-02-23: Jia Tan이 테스트 입력 파일 내에 숨겨진 백도어 바이너리 코드를 머지함.
     * 2024-02-24: Jia Tan이 v5.6.0을 태그하고, 악의적인 build-to-host.m4를 포함한 xz-5.6.0.tar.gz 배포판을 게시함.
     * 2024-02-24: Gentoo에서 5.6.0에서 충돌이 발생하기 시작함.
     * 2024-02-26: Debian이 xz-utils 5.6.0-0.1을 unstable에 추가함.
     * 2024-02-28: Debian이 xz-utils 5.6.0-0.2를 unstable에 추가함.
     * 2024-02-29: GitHub에서 @teknoraver가 liblzma를 libsystemd에 연결하지 않도록 하는 풀 리퀘스트를 보냄.
     * 2024-02-28: Jia Tan이 랜드락 지원을 확인하는 데 사용되는 C 프로그램에 미묘한 오타를 추가하여 configure 스크립트의 랜드락 감지를 깨뜨림.
     * 2024-03-04: RedHat 배포판에서 liblzma의 _get_cpuid에서 Valgrind 오류가 발생하기 시작함.
     * 2024-03-05: libsystemd PR이 병합되어 liblzma가 제거됨.
     * 2024-03-05: Debian이 xz-utils 5.6.0-0.2를 testing에 추가함.
     * 2024-03-05: Jia Tan이 ifunc 버그 수정을 커밋함.
     * 2024-03-08: Jia Tan이 Valgrind 수정을 위한 커밋을 함.
     * 2024-03-09: Jia Tan이 백도어 파일을 업데이트한 커밋을 함.
     * 2024-03-09: Jia Tan이 v5.6.1을 태그하고 xz 5.6.1 배포판을 게시함.
     * 2024-03-20: Lasse Collin이 커널의 xz 압축 코드 유지 관리자로 자신과 Jia Tan을 추가하는 패치 세트를 LKML에 보냄.
     * 2024-03-25: Hans Jansen이 xz-utils를 5.6.1로 업데이트하기 위한 Debian 버그를 파일함.
     * 2024-03-28: Jia Tan이 Ubuntu 버그를 파일하여 xz-utils를 Debian에서 5.6.1로 업데이트하도록 함.

공격 탐지

     * 2024-03-28: Andres Freund가 버그를 발견하고 Debian과 distros@openwall에 비공개로 알림. RedHat이 CVE-2024-3094를 할당함.
     * 2024-03-28: Debian이 5.6.1을 롤백하고 5.6.1+really5.4.5-1을 도입함.
     * 2024-03-29: Andres Freund가 ""지난 몇 주 동안"" 발견했다고 말하며 공개 oss-security@openwall 리스트에 백도어 경고를 게시함.
     * 2024-03-29: RedHat이 Fedora Rawhide와 Fedora Linux 40 베타에서 백도어가 포함된 xz가 배포되었다고 발표함.
     * 2024-03-30: Debian이 빌드를 중단하고 Debian stable을 사용하여 빌드 머신을 재빌드함.

GN⁺의 의견

     * 이 사건은 오픈소스 소프트웨어의 공급망 공격에 대한 중요한 전환점이 될 것임. 장기간에 걸친 공모자의 사회공학적 접근을 통해 신뢰를 얻고 접근 권한을 확보한 뒤, 광범위하게 사용되는 핵심 라이브러리에 은밀하게 백도어를 설치했기 때문.
     * 오픈소스 프로젝트의 거버넌스와 권한 이양 프로세스에 대해 재고할 필요가 있음. 핵심 메인테이너의 개인적 사정에 프로젝트가 좌우되지 않도록 분산된 거버넌스 모델을 고려해 볼 만함.
     * 주요 오픈소스 프로젝트에 대한 보안 감사와 코드 리뷰가 더욱 중요해질 것임. 수상한 변경사항을 탐지하고 권한이 악용되는 것을 막기 위한 자동화된 점검 도구도 필요함. 예를 들어 바이너리 데이터 추가에 대한 경고 등.
     * 공개적으로 개발되고 누구나 기여할 수 있다는 오픈소스 방식의 장점을 훼손하지 않으면서도, 악의적 기여자를 선별하고 공격을 조기에 차단할 수 있는 기술적/제도적 방안이 마련돼야 할 것임.
     * 보안이 취약한 언어나 도구를 사용하는 오픈소스 프로젝트일수록 위험이 클 것임. 메모리 안전성, 정적 분석, Fuzzing 등 다각도로 보안성을 높이려는 노력과 함께 현대적 도구로의 전환도 요구될 것.
     * 백도어의 숨겨진 활성화 조건, 유포 경로, 영향 범위 등 자세한 분석 결과에 관심이 쏠릴 것임. 향후 비슷한 유형의 공격을 방어하기 위한 통찰을 얻을 수 있을 것.

   이 사건을 계기로 걱정이 드는게..
   오픈소스 개발자 pc해킹 or 납치/감금 후 or 돈으로 매수하여 악성코드를 심는다던지..
   돈을 생각하니 오픈소스 개발자는 잘살고 있나 하는 생각도 들고 그러네요?

   제가 보안쪽 일을 하는데, 코드리뷰하다 버그 찾으면, 이 코드를 심기위해 5년전에 여기에 입사한거냐? 이런 드립 나오네요 ㅋㅋ

   Lesser Collin이 여러모로 힘들었겠네요...

   응 archlinux는 진즉에 패치했어~드루와 드루와 응 백도어 아웃 latest arch 짱짱맨~

   pacman -Syu

   Lasse Collin이 해당 사건을 정리하는 글을 남겼네요
   https://tukaani.org/xz-backdoor/

        Hacker News 의견

     * 사건에 대한 훌륭한 요약과 모든 링크가 한 곳에 모여 있어 사회공학적 공격이 실제로 어떻게 전개되는지 배우고 싶은 사람에게 완벽한 자료임.
          + ""공격 시작"" 부분에서 Ubuntu와 Debian은 언급되었지만 Fedora는 빠져 있어 완성도를 높이기 위해 추가될 수 있음.
          + Fedora에 대한 사회공학적 압박이 2024년 3월 4일 이전 주에 시작된 것으로 보임.
     * Fedora 타임라인이 누락되었음을 지적함.
          + ""Jia Tan""이라는 사람이 2월 27일부터 3월 27일 사이에 연락을 시도하여 Fedora 40과 41에 새로운 xz를 포함시키려 했음.
     * 시스템 내에서 이해하기 어려운 코드를 더 이상 용납하지 말아야 한다는 의견 제시.
          + M4와 복잡한 쉘 스크립트를 없애야 할 때라고 주장함.
     * 업그레이드에 대한 보수적인 태도가 증가할 수 있는 긍정적인 결과 중 하나로 보임.
          + 개발자를 포함한 많은 사람들이 업그레이드를 항상 좋은 것으로 받아들이는 대신 위험과 이점을 신중하게 고려해야 함.
     * FOSS 커뮤니티에서 무례한 사용자를 체계적으로 금지하거나, 커뮤니티 인식을 높여 무례한 행동에 더 강하게 대응하는 문화 변화가 일어날 수 있음을 제안함.
     * 이메일 주소 형식에 대한 관찰이 잘못되었다는 지적.
          + Jigar Kumar와 Dennis Ens의 이메일 주소 형식이 다르며, 이는 양자가 같은 사람(sokcpuppets)임을 증명하거나 반증하지 않음.
     * 사회적 압박이 얼마나 쉽게 사람들로 하여금 통제력을 포기하게 하는지에 대한 우려 표현.
          + XZ의 원작자에게 이 사건이 얼마나 충격적일지 상상할 수 없으며, 이 사건이 다른 오픈소스 관계자들에게 타인의 압박에 굴복하지 말라는 강력한 예가 되기를 바람.
     * 유지보수자로서, 기여자나 사용자가 끈질기게 요구할수록 그 요청을 들어줄 가능성이 낮아짐을 강조함.
     * Joe Cooper의 의견을 인용하며, 프로젝트 유지보수자에 대한 압박에 대한 그의 견해를 공유함.
     * 숨겨진 백도어 바이너리 코드가 바이너리 테스트 입력 파일 내에 잘 숨겨져 있으며, 이 파일들은 대부분 수작업으로 헥스 에디터로 만들어졌기 때문에 파일 자체가 최고의 ""소스 코드""임을 설명함.
          + 이는 오픈소스 소프트웨어에서 지원되지 않는 하드웨어를 위해 바이너리 블롭을 옹호하는 사람들에게 경고가 됨.
          + 소스 형태로 재현 가능하거나 아니면 존재하지 않아야 함을 주장함.
"
"https://news.hada.io/topic?id=14091","letsblock.it 프로젝트 및 공식 인스턴스 폐쇄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     letsblock.it 프로젝트 및 공식 인스턴스 폐쇄

letsblock.it 프로젝트 종료 발표

     * letsblock.it 프로젝트는 사용자들이 저품질 콘텐츠와 불필요한 방해 요소를 제거하여 온라인 경험을 맞춤화하고 중요한 내용에 집중할 수 있도록 도와주는 서비스.
     * 2년 이상 운영되어 왔으며, 현재 800명 이상의 활성 사용자와 수백 명의 익명 방문자들에게 서비스를 제공 중.
     * 수십 명의 기여자와 재정적 후원자들의 도움으로 성장함에 감사함을 표함.

프로젝트 시작 배경 및 현 상황

     * 2021년에 시작된 프로젝트는 온라인 경험에 대한 사용자의 통제력 회복을 돕기 위해 만들어짐.
     * 상업적 웹의 악화는 이미 시작되었으나, 속임수 패턴과 사용자에게 적대적인 기능은 아직 널리 퍼지지 않았음.
     * 현재 상업적 웹은 매일 악화되고 있으며, 사용자에게 적대적인 디자인이 일반화되고 있고, '생성적 AI' 버블이 좋은 콘텐츠를 저품질 콘텐츠로 묻어버리는 데에 소중한 물과 전기를 낭비하고 있음.
     * 구글과 같은 광고 회사는 브라우저 제어권을 부정하고 MV3를 통해 콘텐츠 차단 확장 기능을 무력화하며 DRM으로 OS와 브라우저를 잠그려는 계획을 계속하고 있음.

프로젝트 종료 계획

     * 2024년 6월 말에 https://letsblock.it/의 공식 인스턴스가 종료될 예정.
     * 데이터베이스에 개인 정보가 포함되어 있어서 제3자에게 운영을 넘기지 않을 것.
     * 사용자가 데이터를 이전할 기회를 가진 후 데이터베이스는 파괴될 예정.
     * 보안을 보장하기 위한 제한적인 유지 관리는 계속되지만, 규칙은 수정이나 업데이트를 받지 않음.
     * 사용자 그룹이 프로젝트를 계속 이어나가길 원한다면, 새 서버 설정을 돕고 포크된 프로젝트를 홍보하며 데이터 이전을 돕겠음.

잠정적인 타임라인

     * 2024년 3월: 공식 발표, 기부 옵션 제거 및 GitHub 토론 발표.
     * 2024년 4월: 사용자 이전 허용, 공식 인스턴스의 새 계정 등록 비활성화 및 이전을 위한 링크 공지, 데이터 가져오기 및 내보내기 기능 추가 및 문서화, 대체 방안 추천 목록 제공.
     * 2024년 6월: 공식 인스턴스 종료 및 프로젝트 보관, 사용자 데이터 삭제 및 GitHub 프로젝트 보관.

향후 계획

     * letsblock.it을 시작하고 2년 이상 운영한 것은 큰 성공으로, 기여자들에게 감사함.
     * 사용자에게 통제된 종료를 제공하는 것이 프로젝트를 방치하고 유지 관리하지 않는 것보다 낫다고 생각함.
     * 이는 기여자나 새로운 관리자를 모집하는 호소가 아니며, 사용자가 프로젝트의 유산을 이어받고 싶다면 새로운 이름으로 하길 선호함.

GN⁺의 의견

     * letsblock.it 프로젝트는 사용자들이 웹을 더욱 효과적으로 제어할 수 있도록 도와주는 중요한 도구였으며, 그 종료는 온라인 경험에 대한 사용자의 통제력을 강화하려는 노력에 대한 손실을 의미함.
     * 프로젝트의 종료는 상업적 웹의 악화와 기술 기업들의 사용자 경험에 대한 통제력 강화 추세를 반영하고 있으며, 이는 웹의 미래에 대한 우려를 증폭시킴.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 uBlock Origin이 있으며, 사용자들은 이를 대안으로 고려할 수 있음.
     * 기술을 도입할 때는 사용자 커뮤니티의 지원과 프로젝트의 지속 가능성을 고려해야 하며, letsblock.it와 같은 도구의 종료는 사용자들이 자신의 온라인 경험을 개선하기 위해 더 많은 책임을 져야 함을 의미함.
     * 이 프로젝트의 종료는 오픈소스 커뮤니티에게 새로운 프로젝트를 시작하거나 기존 프로젝트를 포크하는 기회를 제공하며, 이는 혁신과 협력의 중요성을 강조함.

        Hacker News 의견

     * 실패한 프로젝트에도 합리적인 종료 계획을 세운 점을 칭찬함. 대기업들과는 다른 접근 방식임.
     * 아마존 제품을 이름으로 필터링하는 것은 무의미해 보이지만, 유튜브 쇼츠를 필터링할 수 있다는 점은 흥미로움.
     * 제공된 도구를 사용하여 유용한 것을 실제로 달성하기에는 너무 어려워 보이며, 이는 창작자에 대한 비판이 아니라 프로젝트 중단을 이해한다는 의미임.
     * 프로젝트는 훌륭했지만, 웹 서비스가 지속적으로 변화하면서 기능이 자주 깨지는 것과 같은 문제에 직면함. uBlock으로는 프론트엔드의 근본적인 변화에 대처하기 어려움.
     * 프로젝트의 종료 소식에 슬픔을 표함. 유지 관리자(xvello)는 uBlock 개발 필터에 많은 기여를 함. 검색 엔진 사용자들이 속임수와 저질 콘텐츠에 시간을 낭비하지 않도록 노력함.
     * 유튜브 필터 템플릿에 대해서는 unhook.app이 좋은 대안임.
     * 이 프로젝트를 알게 된 이후 만족스러운 사용자였으며, Amazon과 기타 쓰레기를 검색 결과에서 걸러냄. 개인적으로 필터 작성을 배우지 못했지만, letsblock.it이 많은 부분을 원활하게 처리함.
     * 창작자가 Mike Boyd에 대해 무엇을 반대하는지 궁금함. Nebula에서 특정 창작자의 비디오를 필터링하는 것은 낮은 확률의 사용 사례로 보임.
     * 이 프로젝트에 대해 지금까지 들어본 적이 없지만, 특정 사이트에서 차단하고 싶은 것을 구성할 수 있는 UI로 보임. 커뮤니티가 기여한 템플릿이 있고, URL을 받아 UBO 필터에 추가함.
     * 이 프로젝트에 대해 알지 못했고, 비슷한 것을 작성하려고 생각했었음. 이제는 더 잘 알게 됨. 감사의 말을 전함.
     * 디스토피아적인 웹 서비스에 대한 진정한 대안을 구축할 때가 되었음. 그것들을 구제하거나 기생하는 방식으로는 아님.
"
"https://news.hada.io/topic?id=14140","대만에서 발생한 규모 7.4 지진, 깊이 34km","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      대만에서 발생한 규모 7.4 지진, 깊이 34km

지난 하루 동안의 지진 목록

     * 지난 24시간 동안 2.5 이상의 규모를 가진 지진이 69건 발생함.
     * 지진 목록은 지도에 표시된 지진만 포함함.
     * 지진 목록은 최신 순으로 정렬되어 있으며, 규모, 발생 위치, 발생 시간(UTC+09:00 기준), 깊이 정보를 포함함.
     * 예를 들어, 과테말라의 파사코 북서쪽 3km 지점에서 규모 4.5의 지진이 발생했으며, 발생 시간은 2024년 4월 4일 08:06:55이고, 깊이는 132.4km임.
     * 대만 화롄 시 동남쪽 10km 지점에서 규모 4.3의 지진이 발생했으며, 발생 시간은 2024년 4월 4일 07:46:35이고, 깊이는 43.8km임.
     * 러시아 쿠릴스크 남남동쪽 114km 지점에서 규모 4.9의 지진이 발생했으며, 발생 시간은 2024년 4월 4일 07:41:50이고, 깊이는 35.0km임.

GN⁺의 의견

     * 이 지진 목록은 지진 연구자, 재난 대응 팀, 그리고 해당 지역에 거주하는 사람들에게 유용한 정보를 제공함.
     * 지진 데이터는 예측 불가능한 자연 재해에 대한 인식을 높이고, 피해를 최소화하기 위한 준비를 돕는 중요한 자료임.
     * 지진 목록을 통해 지진 발생 패턴과 지역적 위험도를 분석할 수 있으며, 이는 도시 계획 및 건축 기준 설정에도 영향을 줄 수 있음.
     * 지진 데이터는 실시간으로 업데이트되어야 하며, 정확한 위치와 규모 측정이 중요함. 이를 위해 지진학자들은 지속적으로 센서 네트워크를 유지하고 데이터를 검증해야 함.
     * 지진 목록만으로는 피해 상황을 완전히 파악하기 어렵기 때문에, 추가적인 현장 조사와 피해 보고가 필요함.

        Hacker News 의견

     * 타이베이에서 강하게 느껴진 지진과 일부 전기 정전 보고가 있었음. 작성자와 친구들은 모두 괜찮은 상태임.
     * 일본 기상청은 최대 3미터(9.8피트)의 쓰나미를 예측함. 관심 있는 사람들을 위한 정보 제공.
     * 지진 발생 후 40분 만에 이미 위키백과에 관련 기사가 생성됨.
     * 이번 지진 때 활동한 타이베이 101의 조율질량감쇠기(Tuned Mass Damper)에 대한 비디오 링크를 찾는 사람이 있음.
     * 지진 보고서에서 지진 깊이에 대해 언급하는데, 이것의 중요성과 실질적인 행동 지침이 있는지에 대한 질문이 있음.
     * 타이베이에서 우수한 개발자를 찾기 어려움. 영어를 구사하는 개발자 커뮤니티를 찾는 사람들을 위한 정보 공유.
     * 지진으로 인해 반도체 공장이 오프라인 상태인지에 대한 질문이 있음.
     * 지진의 깊이가 중요한 이유에 대한 질문이 있음.
     * 지진의 진앙이 화롄에 있음을 지적함. 타로코 국립공원 근처의 작은 도시로, 아름다운 경관과 산사태 위험이 있음. 다음 날 폐쇄될 것으로 예상됨. 해당 지역에 발전소도 있지만 문제없을 것으로 추측함. 편집: 많은 피해자들이 산사태로 인한 것이며, 나머지는 무너진 건물로 인한 것임. 매우 안타까운 상황임.
     * 이 댓글을 기준으로 4.7에서 6.4 범위의 18차례 여진이 발생함. 이것이 정상적인 양인지 확실하지 않지만 많아 보임.
"
"https://news.hada.io/topic?id=14147","Ask GN: 이번 주말에 뭐 하시나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   사전투표 하고 왔어요. 책 읽으며 보내려고 합니다.

   주말운동을 도전해 보려 합니다. 취미로 유도를 하고 있는데 회사일이 바빠서 3,4월 운동을 못나갔네요.. ㅠㅠ
   6월에 시합이 있어서 체력이라도 키워둬야 시합에 나갈수 있을거 같아서요. 40대 중반이라 쉽지 않네요.. ㅠㅠ
"
"https://news.hada.io/topic?id=14117","HeyForm - 오픈소스 Form 빌더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HeyForm - 오픈소스 Form 빌더

     * 누구나 코딩 기술 필요없이 설문조사, 설문지, 퀴즈, 투표를 위한 매력적인 대화형 양식(Form)을 만들 수 있음
     * 쉽고 강력한 양식 작성
          + 다양한 입력: 기본 텍스트, 이메일, 전화번호 필드, 사진 선택, 날짜 선택기, 파일 업로드 등
          + 스마트 로직: 조건부 로직 및 URL 리디렉션을 통해 동적으로 조정 가능한 양식을 제공
          + 강력한 통합: 웹훅, 분석, 마케팅 플랫폼, Zapier 및 Make.com과 같은 도구와 연결 가능
     * 브랜드에 맞게 사용자 지정
          + 비쥬얼 테마: 사용자 정의 가능한 글꼴, 색상, 배경 등을 사용하여 브랜드 아이덴티티에 맞게 양식의 모양과 느낌을 조정
          + 고급 테마: 보다 심층적인 개인화를 위한 사용자 지정 CSS를 포함한 광범위한 사용자 지정 옵션
     * 데이터 분석 및 액션
          + 통찰력 있는 분석: 이탈률, 완료율 등 상세한 분석 제공
          + 데이터 내보내기: 추가 분석이나 시스템 통합을 위해 양식 결과를 CSV로 쉽게 내보낼 수 있음
     * GNU Affero General Public License v3.0(AGPL-3.0) 하에 오픈소스로 제공

        Hacker News 의견

     * 한 사용자는 자신의 협회에서 구글 폼에 의존하지 않고 오픈 소스 소프트웨어만을 사용하고자 폼 빌딩 애플리케이션을 비밀리에 천천히 개발 중임을 밝힘. 현재 사용 중인 FramaForms는 다소 불편하며 스프레드시트를 자동으로 업데이트하는 기능이 없어, 이 두 가지 문제를 해결하고자 함. 좋은 오픈 소스 폼 앱이 나온다면 기꺼이 자신의 프로젝트를 중단하고 기존 프로젝트에 기여할 의향이 있음. Nextcloud와의 통합 가능성에 대한 질문과 함께, 오픈 소스 및 자체 호스팅 폼 솔루션에 대한 필요성을 강조하며, 개인 데이터가 대기업에 전송되는 것은 이상적이지 않다고 언급함. 또한, AGPL 사용을 고려해볼 것을 제안함.
     * 또 다른 사용자는 폼 빌더를 만드는 것이 재미있고 관계형 모델에 대해 많이 배울 수 있다고 언급함. 자신은 지난해 클럽을 위해 RoR과 RailsAdmin을 사용하여 폼 빌더와 결제 시스템을 만들었으며, 이를 SaaS로 확장했다고 함. 폼은 많은 것들의 기본적인 측면이며, 무료 도구를 제공하는 것이 클럽이나 조직에 큰 변화를 가져올 수 있다고 덧붙임.
     * 한 사용자는 폼 빌더 프로젝트를 오픈 소스로 전환한 결정에 대해, 폐쇄 소스로 수익을 창출하는 것과 오픈 소스화 사이의 트레이드오프를 어떻게 고려했는지, 이 결정의 성공 기준은 무엇인지 질문함.
     * 다른 사용자는 프로젝트가 MongoDB를 사용하는 것에 대해 긍정적인 의견을 표함. 문서 지향적인 제품에 문서 데이터베이스를 사용하는 것이 적합해 보인다고 언급하며, 사용 경험과 재사용 의사에 대해 질문함.
     * NestJS를 사용하는 것에 대해 긍정적인 의견을 제시한 사용자도 있음. 일부 개발자들이 NestJS를 싫어하는 이유를 모르겠다며, 자신은 일을 시작한 지 한 달 만에 NestJS를 사용하게 되었고, 이미 생산성을 크게 향상시켰다고 언급함.
     * 한 사용자는 프로젝트의 오픈 소스화에 의문을 제기함. 중요한 구현 부분이 서비스 뒤에 숨겨져 있고 폐쇄 소스라면 사용자를 혼란스럽게 할 수 있다고 지적함. 폐쇄 소스와 독점적인 것에 문제가 없다고 하면서도, 오픈 소스 코드를 사용하는 경우 법적으로 준수하기 위해 코드 일부를 오픈 소스화하는 것이 혼란을 줄 수 있다고 언급함.
     * Heyform을 개발한 배경에 대해 궁금해하는 사용자가 있음. 대안들을 살펴보고 Heyform을 만들었다면, 특별한 기능이나 사용 사례를 염두에 두었는지, 예를 들어 getinput.co, quillforms.com, snoopforms.com과의 차이점을 요약해달라고 요청함.
     * 프로젝트를 오픈 소스화한 이유에 대한 논리를 묻는 사용자도 있음.
     * 웹사이트가 열리지 않고 DNS 블랙리스트에 등록된 것 같다고 언급하는 사용자가 있음.
     * 간단한 온라인 폼 솔루션을 원했지만 구글 폼을 배우지 못했다고 말하는 사용자가 있음. 자녀들이 학교에서 구글 폼을 사용하고 있지만, 유연성이 필요한 일에는 구글 폼의 제한된 범위를 넘어서 수정할 수 없어 관심을 갖기 어려웠다고 함. 이 사용자는 자신이 수정할 수 있는 것을 배우고 싶어하며, 다른 사람들이 실제 이유로 도움을 요청할 때 호스팅된 버전을 추천할 의향이 있음. 또한, 넓은 대중에게 의존될 자체 호스팅 버전을 유지 관리하는 것에 대한 부담을 원하지 않는다고 언급함. 프로젝트 제작자들의 의도가 바른 것 같아 덜 걱정되며, 라이선스가 만약의 경우에도 처음부터 새로 시작하지 않고 진행할 수 있는 방법을 제공한다고 느낌.
"
"https://news.hada.io/topic?id=14119","350년 난제 '페르마의 마지막 정리' 컴퓨터 증명 나선 수학자들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  350년 난제 '페르마의 마지막 정리' 컴퓨터 증명 나선 수학자들

페르마의 마지막 정리, 컴퓨터 언어로 새로 증명한다

     * 임피리얼 칼리지 런던의 케빈 버저드(Kevin Buzzard) 교수님이 2024년 10월부터 페르마의 마지막 정리(FLT)의 형식 증명을 린(Lean) 정리 증명기로 작성할 예정입니다.
     * 영국의 공학 및 물리 과학 연구 회의[EPSRC]에서 버저드 교수님에게 연구비를 그달부터 5년 동안 지원하기로 했습니다.
     * 린 블루프린트(Lean blueprints)라는 plasTeX 플러그인을 이용해 만든 프로젝트 계획서가 2024년 4월 말에 공개될 예정입니다.

  페르마의 마지막 정리는 이미 증명되지 않았나?

   이미 증명됐습니다. 영국의 수학자 앤드루 와일스가 1994년에 증명을 공개했고, 이 증명은 1995년에 공식적으로 출간됐습니다. 하지만 상호 작용 정리 증명기[ITP]의 언어로 작성된 형식 증명은 아직 없습니다.

  상호 작용 정리 증명기? 형식 증명? 이게 뭐야?

     * 상호 작용 정리 증명기[ITP]: 사람이 형식 증명을 작성하도록 돕는 컴퓨터 프로그램. 증명 보조기[proof assistant]라고도 함.
     * 형식 증명: 증명 검증기[proof verifier]라는 컴퓨터 프로그램으로 검증할 수 있는 증명. 증명 보조기는 대개 증명 검증기 역할도 함.

  정리 증명기는 인공 지능인가?

   신경 정리 증명기[NTP]는 그렇다고 볼 수 있지만, 린을 비롯한 많은 상호 작용 정리 증명기는 기계 학습 기반의 프로그램이 아닙니다.

  린(Lean) 정리 증명기를 소개해 줘.

     * 상호 작용 정리 증명기 겸 순수 함수형 프로그래밍 언어.
     * 의존 유형론에 기반을 둠.
     * 유형 클래스, 확장 가능한 구문, 매크로, 메타프로그래밍 등의 기능이 있음.
     * 다른 증명 보조기와 비교할 때, 린의 이용자층에는 (수학 기초론 밖의 분야를 연구하는) 수학자가 특히 많음.

  페르마의 마지막 정리의 형식 증명은 왜 작성하려는 거야?

   케빈 버저드 교수님이 X에 올린 포스트를 인용하자면, ""컴퓨터로 하여금 현대 정수론을 이해시켜서, 결국에는 정수론자들을 도울 수 있게 하기 위함입니다.""

  링크

     * 2023년 10월 3일에 케빈 버저드 교수님이 린 줄립(Zulip) 챗에 올린 메시지: https://leanprover.zulipchat.com//…
     * 린 수학 라이브러리: https://github.com/leanprover-community/mathlib4
     * 뉴사이언티스트 기사: https://institutions.newscientist.com/article/…
     * 파퓰러메카닉스 기사: https://popularmechanics.com/science/math/…

   응원합니다. Formal proof에 관심이 있으신 분들은 Terrence Tao 교수님의 Machine Assisted Proofs (https://www.youtube.com/watch?v=AayZuuDDKP0) 강의 들어보시는 것도 추천드려요.
"
"https://news.hada.io/topic?id=14127","HN 소개: 혁신적인 광고 지원 DNS 해석기 DN$","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 소개: 혁신적인 광고 지원 DNS 해석기 DN$

DN$ - 광고가 포함된 DNS 리졸버

     * **DN$**는 개인 정보 보호를 중심으로 한 혁신적인 광고 지원 DNS 리졸버임.
     * 기존 인터넷 서비스 제공업체, 클라우드플레어, 구글 등이 제공하는 DNS 리졸버는 인터넷 활동을 추적하여 제3자 데이터 벤더에게 판매할 수 있음.
     * DN$ 팀은 이러한 문제를 해결하고자 함. 그러나 충분한 사용자를 확보하기 전까지는 이러한 행위를 중단할 계획임.
     * 새로운 비즈니스 모델을 지원하기 위해 광고를 제공해야 함.
     * DN$는 평생 구독을 제공하여 광고를 줄일 수 있는 옵션을 제공함.
     * DN$ 소프트웨어는 오픈소스이며 러스트로 구축되어 있어 보안이 강화되고 매우 빠름.
     * 백엔드는 최신 개발 트렌드를 기반으로 함.
     * 기존의 지루한 방식으로 NXDOMAIN을 가로채는 대신, 거의 모든 DNS 응답에 스폰서십을 추가하여 DNS를 혁신함.
     * ""RFC""와 ""과거 호환성""을 진보를 위해 배제함.
     * DN$는 법인으로서, 심각한 범죄를 저질러도 경영진은 감옥에 가지 않고 소액의 벌금만 부과될 것임.
     * DN$는 사용자 데이터 및 인터넷 행동을 추적하고 판매하지 않으며, AI 모델을 훈련시켜 부를 축적하는 데 사용하지 않을 것임을 약속함.

2024년 4월 2일 업데이트: 이 프로젝트는 폐기됨

     * 여러 소송과 형사 조사로 인해 DN$는 서비스를 종료해야 함.
     * 자체 DN$ 리졸버를 설정하기 위한 소스 코드는 제공됨.

실행 방법

     * 릴리스 빌드 후, 지정된 주소로 DNS 쿼리를 실행할 수 있음.

내부 로드맵 (유출 금지)

     * 2024년 1분기: 소프트웨어 스택을 고랭에서 러스트로 전환, 아키텍처 변경을 반복함.
     * 2024년 2분기: v0.1 출시, 벤처 캐피탈에 공격적인 마케팅, 투자자와 사용자에게 불가능한 약속을 함.
     * 2024년 3분기: 사용자 데이터를 제3자 벤더에게 판매하고, 추적 및 광고에 더 많은 노력을 기울임.
     * 2024년 4분기: 평생 구독 약속을 파기하고, 복잡한 암호화폐를 이용한 자금 세탁을 통해 회사와 서비스를 폐쇄함.

GN⁺의 의견

     * 이 기사는 4월 1일 만우절 농담으로 보이며, 실제로 존재하는 서비스가 아님을 알 수 있음.
     * DNS 프라이버시 문제는 실제로 중요한 이슈이며, 사용자의 인터넷 활동을 추적하고 판매하는 것에 대한 우려가 존재함.
     * 오픈소스와 러스트로 개발된 소프트웨어는 보안과 성능 측면에서 실제로 많은 장점을 가지고 있음.
     * 만약 이 기사가 진짜 서비스를 설명한다면, 사용자 데이터를 보호하고 광고를 최소화하는 DNS 서비스를 찾는 사용자에게는 실망스러운 소식이 될 수 있음.
     * 기술을 도입할 때는 프라이버시 보호, 데이터 보안, 성능 등을 고려해야 하며, 이러한 요소들이 서비스 선택에 중요한 기준이 됨.

        Hacker News 의견

     * 제목이 흥미를 끌어 클릭하게 만들었으며, 실제로 내용을 읽고 나니 잘 만들어진 프로젝트와 작동하는 데모에 감탄함.

          + 제목에 혹해 클릭했더니, 실제로 읽어보니 잘 만들어진 프로젝트와 잘 작동하는 데모에 대한 감탄.

     * 한 사용자가 실행한 쿼리 결과를 공유하며, 결과의 의미를 모르겠다고 함.

          + 쿼리 실행 결과를 공유하며 결과의 의미를 이해하지 못하는 사용자의 고민.

     * 프로젝트를 통해 매달 10만 달러를 벌 수 있는 강의를 알게 되었다는 긍정적인 피드백.

          + 프로젝트 덕분에 높은 수익을 약속하는 강의를 발견했다는 긍정적인 피드백.

     * Cloudflare를 면밀히 조사했지만, 현재로서는 수익화하지 않는 것 같다는 의견과, 잠재적인 보상을 고려할 때 언제든지 전략을 바꿀 수 있다는 관측.

          + Cloudflare의 수익화 전략에 대한 분석과 잠재적인 보상을 고려한 전략 변경 가능성에 대한 의견.

     * Google에 대한 짧고 간결한 의견 표현.

          + Google에 대한 간단한 의견.

     * nmap을 사용한 포트 스캔 결과를 공유하며, 서비스 인식에 실패한 부분에 대한 정보 제공 요청.

          + nmap을 통한 포트 스캔 결과 공유와 미인식 서비스에 대한 정보 제공 요청.

     * 프로젝트의 광고 텍스트를 찾아낸 것에 대한 만족감 표현.

          + 프로젝트의 광고 텍스트 발견에 대한 만족감.

     * Rust로 만들어진 프로젝트에 대한 호감과, 이를 자신의 시스템 설정에 추가하고 싶다는 의사 표현.

          + Rust로 구축된 프로젝트에 대한 호감과 시스템 설정에 추가하고자 하는 의지.

     * 법적 문제와 형사 조사로 인해 프로젝트가 중단되었다는 업데이트와, 자체 DN$ 리졸버를 설정할 수 있는 소스 코드 제공.

          + 프로젝트 중단 소식과 자체 DN$ 리졸버 설정을 위한 소스 코드 공유.

     * 프로젝트를 시도해본 후, reddit.com을 해결하는 데 걸린 시간을 공유하며 추천하는 사용자.

          + 프로젝트 시도 후 reddit.com 해결 시간을 공유하며 추천하는 사용자.

     * DN$ 경험을 요구하는 채용 공고를 이미 본 사용자의 공유.

          + DN$ 경험을 요구하는 채용 공고에 대한 사용자의 공유.

     * 프로젝트에 대한 전반적인 만족감을 표현하며, 새 프로젝트를 Rust로 다시 작성해야 할지 고민하는 사용자의 의견.

          + 프로젝트에 대한 만족과 새 프로젝트를 Rust로 작성할지 고민하는 사용자의 의견.
"
"https://news.hada.io/topic?id=14208","lumentis - AI로 녹취록과 비정형 정보에서 자동 문서 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 lumentis - AI로 녹취록과 비정형 정보에서 자동 문서 생성

     * 회의 녹취록과 대용량 비정형 문서에서 포괄적이고 읽기 쉬운 문서를 생성해주는 도구
     * 동작방식 : 실행해서 문서 자료를 넣고, 테마와 오디언스를 입력하면 목차를 생성해주며, 편집후 실행하면 문서 완성
     * 실행전에 얼마나 API 비용이 들지를 동적으로 알려줌
     * 모델 전환 : 어려운 작업에는 더 스마트한 모델을 사용하고, 긴 형식의 작업에는 더 저렴한 모델을 사용
"
"https://news.hada.io/topic?id=14165","자작 6 GHz 펄스 압축 레이더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           자작 6 GHz 펄스 압축 레이더

FMCW 및 펄스 레이더 아키텍처 소개

     * FMCW 레이더는 저렴하고 제작이 쉬우며, 별도의 송수신 안테나를 사용하여 송수신 전환의 필요성을 피함.
     * 펄스 레이더는 송수신 모드 간의 빠른 전환을 필요로 하며, 높은 전송 파워를 사용할 수 있고 빠르게 움직이는 목표의 속도 측정에 유리함.
     * FMCW 레이더는 주로 단거리 응용 분야에 사용되고, 펄스 레이더는 장거리 응용 분야에 주로 사용됨.

펄스 압축 레이더

     * 펄스 압축 레이더는 임의의 파형을 지원하며, 송신된 파형을 생성하기 위해 충분히 높은 샘플링 속도를 가진 DAC가 필요함.
     * 레이더의 아키텍처는 SDR과 매우 유사하며, 두 개의 시간 다중화된 수신 안테나와 하나의 송신 안테나를 공유함.
     * 제로-IF 아키텍처는 성능 측면에서는 이상적이지 않지만 가장 저렴한 옵션임.

ADC 및 DAC

     * ADC의 샘플링 속도는 시스템에서 가장 중요한 매개변수 중 하나이며, 가능한 한 빠르게 샘플링하는 것이 바람직함.
     * DAC는 시스템의 대역폭에 의해 제한되지만, 필터링을 용이하게 하기 위해 충분한 대역폭을 가지는 것이 유용함.

FPGA

     * 마이크로컨트롤러만으로는 이 애플리케이션에 충분하지 않으며, FPGA는 정확한 타이밍의 펄스 생성과 ADC 및 DAC 데이터 관리에 필요함.
     * Zynq 7020은 듀얼코어 ARM-A9 CPU와 전형적인 FPGA 프로그래머블 로직을 하나의 패키지로 제공함.

디지털 설계

     * 빠른 ADC와 DAC를 사용함에 따라 시스템이 데이터를 처리할 수 있는지 고려하는 것이 중요함.
     * FPGA SoC는 처리 시스템(PS)과 프로그래머블 로직(PL)으로 구성되며, 이들은 서로 AXI 버스를 통해 연결됨.
     * PC로 캡처된 ADC 샘플을 빠르게 전송할 수 있는 빠른 PC 인터페이스가 필요함.

RF 설계

     * RF 부품은 PCB 면적의 작은 부분을 차지하며, 프로젝트에서 상대적으로 작은 작업량을 요구함.
     * RF 부품 설계는 상대적으로 간단하며, 운영 주파수는 약 6 GHz로 설정됨.

최대 감지 범위

     * 레이더의 최대 감지 범위는 송신된 펄스의 길이, 평균 전력, 안테나 이득 등 여러 매개변수를 고려하여 계산할 수 있음.
     * 최대 감지 거리는 대략 1 km 정도로 추정되며, 이 거리에서 목표는 평균적으로 50%의 확률로 감지됨.

PCB 설계

     * 시스템의 실제 구현을 위해서는 모든 구성 요소를 통합하는 인쇄 회로 기판(PCB) 설계가 필요함.
     * PCB는 RF 및 고속 디지털 회로를 포함하며, 올바르게 기능하도록 신중한 라우팅이 필요함.

GN⁺의 의견

     * 이 기사는 펄스 압축 레이더의 구축에 대한 경험을 공유함으로써, 레이더 기술에 대한 이해를 심화시키고, 특히 소프트웨어 정의 라디오(SDR)와 유사한 아키텍처에 대한 통찰력을 제공함.
     * 레이더 시스템의 디지털 및 RF 설계에 대한 상세한 설명은 초급 엔지니어에게 복잡한 시스템의 설계 과정을 이해하는 데 도움이 될 수 있음.
     * FPGA를 사용한 실시간 데이터 처리의 중요성을 강조하며, 이는 다양한 고속 신호 처리 애플리케이션에 적용될 수 있는 중요한 개념임.
     * 기사에서 언급된 Zynq 7020 FPGA의 가격 차이는 전자 부품의 공급망과 가격 책정에 대한 흥미로운 사례를 제공함. 이는 전자 제품 개발 시 고려해야 할 중요한 요소임.
     * 최대 감지 범위 계산은 레이더 시스템의 성능 한계를 이해하는 데 중요하며, 실제 환경에서의 성능 예측에 도움이 될 수 있음.

   상상 그 너머의 미친 엔지니어링...

   내가 어렴풋이 상상했던 모습의 엔지니어와 너무 가까움.
"
"https://news.hada.io/topic?id=14203","독일에서 회사를 설립하는 방법: 14가지 "간단한" 단계와 많은 어려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                독일에서 회사를 설립하는 방법: 14가지 ""간단한"" 단계와 많은 어려움

독일에서 회사 설립하기: 14단계와 많은 고통

     * 독일에서 회사를 설립하는 과정은 에스토니아의 전자 거주 제도와 달리 매우 느리고 고통스러우며 때로는 거의 고장 난 것처럼 보임.
     * 이 글은 저자가 두 번의 회사 설립 경험을 바탕으로 실제 과정을 공유하고자 함.

당신도 할 수 있다는 것을 상기하기 (15분)

     * 베를린에서 케밥을 먹으며 케밥 가게 주인을 보고, 그가 성공적으로 회사를 설립했다는 사실을 깨달음.
     * 이 경험은 저자에게 자신감을 주었고, 모든 사람이 무지에서 시작한다는 것을 상기시킴.

정말 회사가 필요한가?

     * 독일에서 사업을 시작하려면 개인 기업 또는 유한 책임 회사(GmbH) 중에서 선택할 수 있음.
     * 사람을 고용하거나 소송 위험이 높은 산업에 있다면 GmbH를, 그 외의 경우에는 개인 기업을 선택하는 것이 좋음.

이름을 선택하라, 하지만 상담할 수 있는 유일한 사람들에게는 상담하지 마라

     * 독일에서는 이미 존재하는 이름을 사용할 수 없고, 일반적으로 사용되는 단어로 구성된 회사 이름은 허용되지 않음.
     * IHK라는 기관이 회사 이름의 적합성에 대해 상담해줄 수 있지만, 그들의 해석은 매우 비실용적일 수 있음.

공증인을 찾아라

     * 독일에서는 온라인 양식이 아닌 공증인과의 대면 약속을 통해 회사를 설립해야 함.
     * 적합한 공증인을 찾아 약속을 잡고, 필요한 서류를 작성해야 함.

정관: 'Musterprotokoll' 사용하기

     * 정관은 회사의 규칙을 담고 있으며, 단독 창업자의 경우 공식 독일 템플릿인 'Musterprotokoll'을 사용할 수 있음.

자본금: 두 가지 해킹

     * GmbH는 초기 자본금으로 25,000유로가 필요하지만, 절반만 납입하거나 UG(최소 자본금이 25,000유로 미만인 회사)를 설립하는 방법이 있음.

공증인에게 가기

     * 공증인 약속에 참석하여 신분증을 지참하고, 정관을 낭독한 후 서명함.

공증인으로부터 서류 받기

     * 공증인은 서명한 서류를 최종화하고 이메일이나 우편으로 보냄.

은행 계좌 찾기

     * 회사는 'i.G.' 상태로 부분적으로 설립되었으며, 이제 은행 계좌를 개설해야 함.

자본금 납입하기

     * 자본금 25,000유로를 회사 계좌로 이체함.

은행 계좌 서류를 공증인에게 전달하기

     * 은행 계좌 개설 확인서와 자본금 납입 확인서를 공증인에게 이메일로 보냄.

공증인 기다리기 및 상업 등기부에 등록하기

     * 공증인은 상업 등기부에 회사 등록을 완료하기 위해 'XML 업로드'를 수행함.

예비 청구서 지불하기

     * 상업 등기부로부터 예비 청구서를 받고 지불해야 함.

상업 등기부에서 확인서 다운로드하기

     * 상업 등기부에서 회사 등록 확인서를 다운로드함.

세금 ID 받기

     * 'Fragebogen zur steuerlichen Erfassung' 양식을 작성하고 세무 당국에 제출해야 함.

세무 자문인 및 회계사 찾기

     * 세무 및 회계 처리는 복잡하므로 세무 자문인과 회계사에게 모든 것을 아웃소싱하는 것이 좋음.

세금 ID 받기

     * 세무 양식이 처리되면 독일 세금 ID를 우편으로 받음.

VAT ID 받기

     * 며칠 후 EU VAT ID를 우편으로 받음.

선택적 최적화

     * 더 나은 은행으로 이동하거나, 유동성 계획을 세우거나, 세금 고려 사항을 검토할 수 있음.

GN⁺의 의견

     * 독일에서 회사를 설립하는 과정은 복잡하고 시간이 많이 소요되는 것으로 보임. 이러한 과정을 거치는 것은 창업자에게 큰 도전이 될 수 있으며, 이 글은 그 과정을 이해하고 준비하는 데 도움이 될 수 있음.
     * 회사 설립 과정은 각 국가마다 다르며, 독일의 경우 많은 관료적 절차와 규정을 따라야 함을 보여줌. 이는 창업자들이 이러한 시스템에 익숙해지고 이를 효과적으로 관리하는 방법을 배우는 것이 중요함을 의미함.
     * 이 글은 특히 독일에서 창업을 고려하는 사람들에게 유용할 수 있으며, 독일의 복잡한 시스템을 이해하고자 하는 외국인 창업자들에게도 도움이 될 수 있음.
     * 세금 및 회계 처리의 복잡성은 창업자가 전문가의 도움을 받아야 하는 이유를 강조함. 이는 창업자가 사업 운영에 집중할 수 있도록 지원하는 다양한 서비스의 중요성을 보여줌.
     * 이 글은 독일에서 회사를 설립하는 과정에 대한 실질적인 조언을 제공하며, 창업자들이 준비해야 할 사항과 예상해야 할 문제점에 대한 인식을 높이는 데 기여할 수 있음.

        Hacker News 의견

     * 독일 관료주의에 대한 문서화를 직업으로 하고 있는 한 사람은 독일의 모든 생활 사건(이민, 취업, 결혼, 출산, 차량 구매 등)이 느리고 종이 기반의 관료주의에 휘말려 있어 국가에서의 삶에 상당한 장애물이 되고 있다고 언급함. 이 사람은 독일에서 결혼하는 가장 좋은 방법은 덴마크에서 하는 것이라고 조언함. 독일 관료주의가 얼마나 끔찍한지, 그리고 그것을 다루는 것이 얼마나 패배감을 주는지 강조함.
     * 독일에서 회사를 설립한 경험이 있는 또 다른 사람은 어떠한 상황에서도 다시는 그렇게 하지 않겠다고 말함. 공증인은 존재하지 말아야 하며, 단순한 웹사이트로 대체될 수 있다고 주장함. 모든 과정이 지루하고 느리며, 반복되는 작업과 수수료가 많다고 언급함. 회사를 폐쇄하는 데도 2-3년이 걸린다고 함.
     * 한 사람은 공증인에 대해 별로 좋게 생각하지 않으며, 그들이 혁신을 저해하고 독일 경제, 특히 중소기업, 클럽, 시민들에게 해를 끼친다고 믿음. 예를 들어, 부동산의 매매는 양 당사자를 위해 매매 계약을 읽어주는 공증인이 있어야만 진행될 수 있으며, 이 서비스에 대해 매매 가격의 약 1.5%에 해당하는 수수료를 부과함. 이 직업은 법으로 엄격히 보호되며 경쟁이 없음.
     * 에스토니아에서 살면서 사업을 하는 한 사람은 블로그 포스트에 감사를 표하며, 에스토니아에서의 생활과 사업 구축에 매우 만족한다고 언급함. 회사 설립이 쉽고 은행에서의 KYC 미팅을 제외하고 모든 것을 온라인으로 처리할 수 있다고 함. 또한 에스토니아에서는 회사가 연간 이익에 대해 세금을 내지 않으며, 정부 관계자 대부분이 유창한 영어를 구사한다고 함. 회사 소유 차량을 원할 때를 제외하고는 이동이 쉽다면 이 옵션을 다른 사람들에게도 추천한다고 함. 2023년에 규칙이 변경되어 이제는 1유로의 초기 자본금으로도 충분함.
     * 독일에서 1.5년을 살아본 경험을 가진 사람은 독일의 관료주의가 일반적으로 평균 인구에게는 작동하지만, 부자, 가난한 사람, 기업가 등과 같은 주변부에 있는 사람들에게 가장 큰 영향을 미친다고 말함. 다른 나라에서 이런 일이 발생하면 부자들은 접근을 위해 돈을 지불하는 반면, 가난한 사람들은 대중 운동이 나타나 구원을 약속할 때까지 일반적으로 고통을 겪는다고 함. 따라서 이것이 그리 놀랍지 않으며, 개발된 국가와 개발 중인 국가에 대한 정신 모델에서 각 국가를 어디에 두어야 할지에 대한 관점을 바꿔야 한다고 언급함.
     * 독일을 떠나기로 결정한 경우, 일시적으로라도, 전 세계 주식 보유분(1% 이상 소유한 회사의 경우)의 현재 평가액의 약 30%에 해당하는 가혹하고 융통성 없는 출국세에 직면하게 된다고 한 사람이 언급함. 저자의 경우, 홀딩 회사를 사용하기 때문에 출국세 부담이 두 배가 됨.
     * 회사를 설립할 때 최소 12,500유로의 초기 주식 자본이 필요하다는 것은 사업에 대한 매우 후퇴적인 장애물로 보인다고 한 사람이 언급함. 비교를 위해 영국에서는 등록비 12파운드와 최소 초기 주식 자본 1파운드가 필요함. 이것은 많은 사람들에게 유한 책임을 도달할 수 없게 만듦.
     * 미국에서 사업 등록에 대한 시민적 자부심을 느낄 수 있는 몇 안 되는 것들 중 하나라고 언급하는 사람이 있음. 콜로라도에서는 IRS EIN(세금 ID), LLC 등록, 판매세 면허(물건을 판매할 때만 필요), 그리고 사업용 체크 계좌를 약 2시간 만에 개설할 수 있음. 무엇을 해야 할지 아는 사람이라면, 은행 옵션을 연구하는 데 시간을 들이지 않는다면 30분 만에 모든 것을 처리할 수 있음. 또는 법률 서비스 회사가 대신하여 약 500달러에 모든 것을 처리해줌. 파트너가 있고 여러 주주를 원한다면 가격은 약 1000달러로 올라가지만, 스스로 처리할 수도 있음.
     * Magic Holding GmbH에서 개인에게 지급하는 경우, 약 26%의 자본 이득세를 내야 하지만, 그 사이에 투자 수익이 쌓일 수 있다는 큰 이점이 있다고 언급함. 이것은 최적화가 아니며, 돈을 개인에게 가져오는 것이 목표라면 투자 수익을 얻기 전이나 후에 세금을 내는 것이 중요하지 않다고 함. 수학적으로 곱셈은 교환 법칙이 적용되기 때문임.
     * 한 사람은 케밥 가게가 등록되어 있고 세금을 내고 있다고 생각하는 것이 귀엽다고 비꼬는 듯한 댓글을 남김.
"
"https://news.hada.io/topic?id=14081","인간적인 측면을 간과할 때 지루해지는 수학 글쓰기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인간적인 측면을 간과할 때 지루해지는 수학 글쓰기

수학이 지루한 이유

     * 수학이 지루하다고 생각하지 않지만, 수학 논문을 읽다가 나쁜 글쓰기로 인해 열정이 꺾인 경험이 많음.
     * 수학 글쓰기가 지루해지는 한 가지 이유는 인간적인 차원을 간과할 때 발생함.
     * 독자의 관심을 유지하기 위해 명확성, 잘 조직된 문장, 적절한 시기에 적절한 정보 제공이 중요함.

첫 문단을 매력적으로 작성하기

     * 대부분의 글은 처음 몇 문장을 읽고 계속 읽을지 결정함.
     * 수학 논문의 제목, 초록, 서론에 많은 에너지를 투자하여 독자의 관심을 끌고 유지해야 함.

설정과 맥락 사용하기

     * 수학 논문의 서론은 주요 결과를 역사적, 수학적 맥락에 놓고 설명해야 함.
     * 필요한 배경 지식 없이는 수학적 내용을 이해하기 어려움.
     * 서론은 가능한 단순하게, 최소한의 전문 용어를 사용하여 장면을 설정해야 함.

주인공 개발하기

     * 수학 논문의 '주인공'은 논문에 등장하는 수학적 개체들임.
     * 주요 개체들을 특별하게 소개하고 이미 알려진 성질을 강조해야 함.

갈등과 긴장감 만들기

     * 수학 논문의 '갈등'은 이해하기 위한 투쟁, 즉 무언가를 증명하기 위한 투쟁으로 나타남.
     * 결과가 증명하기 어렵거나 불완전하더라도 글에 드라마를 더할 수 있음.

결론 찾기

     * 수학 논문의 결론은 해결된 문제가 실제로 해결되었음을 확신시켜야 함.
     * 주요 결과 증명 후 갑자기 논문을 끝내는 것은 불쾌함.

GN⁺의 의견

     * 수학 논문을 이야기처럼 흥미롭게 만드는 방법은 독자들에게 새로운 시각을 제공하고, 수학에 대한 흥미를 불러일으킬 수 있음.
     * 논문의 서론이나 초록을 작성할 때 이러한 접근 방식을 사용하면 더 많은 독자들이 전체 논문을 읽게 만들 수 있음.
     * 수학 논문이나 기술 문서를 작성할 때 이야기를 통해 정보를 전달하는 방식은 독자의 이해를 돕고 기억에 남게 하는 효과적인 전략임.
     * 수학 분야에서도 이러한 접근 방식을 적용할 수 있는 좋은 예로는 ""3Blue1Brown""과 같은 유튜브 채널이 있으며, 복잡한 수학 개념을 시각적이고 이야기 형식으로 설명하여 많은 사람들에게 인기를 얻고 있음.
     * 이 기사가 제안하는 방식대로 수학 논문을 작성할 때, 독자가 논문의 내용을 더 쉽게 이해하고 기억할 수 있도록 돕는 것은 물론, 수학에 대한 관심을 높일 수 있는 잠재력이 있음.

        Hacker News 의견

     * 수학 분야는 자기 홍보에 관해 관대한 편이며, 논문을 ""인간화""한다는 명목으로 과도한 과장을 용인해서는 안 됨.
          + 많은 수학자들이 논증에 충분한 세부 정보나 동기를 제공하지 않음.
          + ""당연하다""나 ""쉽게 볼 수 있다""는 표현이 금기시되었지만, 이러한 표현들이 실제로 세부 사항을 채워야 할 정보를 포함하고 있음.
     * 컴퓨터 과학의 수학적 분야에서 일하는 사람으로서, 70년대의 간결한 논문을 읽어야 할 때 실망함.
          + 수학자들과의 대화에서, 간결함과 우아함이 동일하다고 여기고, 최대한 일반적인 수준으로 이론을 제시하는 경향이 있음.
     * 인기 과학 서적의 ""스토리 모드""를 싫어하며, 실제 과학 논문에서도 원하지 않음.
          + 대신, LLM(Large Language Model)을 사용하여 논문에 맥락을 추가하거나, 불필요한 내용을 제거하여 간결한 내용만 제공하는 것이 좋음.
     * 윌리엄 던햄의 ""Journey Through Genius - The Great Theorems of Mathematics""는 수학을 인간적이고 역사적 맥락에서 설명하는 최고의 수학 책임.
          + 이 책은 수학의 역사를 가르치는 데 있어 최선의 방법이며, 맥락 없는 공식 연습보다 우월함.
     * 수학에 대한 몇 가지 반론:
         1. 수학은 예전보다 훨씬 더 추상적임.
         2. 수학은 예전보다 훨씬 더 전문화되었음.
         3. 비수학적 내용은 영어를 읽지 못하는 사람들에게 접근하기 어려움.
         4. 학술지의 공간은 필수적이지 않은 내용에 낭비할 수 없음.
         5. 스타일은 보편적인 수학 문화의 일부이므로 적응해야 함.
         6. 비기술적 학술 글을 게시할 수 있는 많은 대안적 장소가 있음.
     * 수학 논문이 독자에게 잠재적으로 영향을 미치는 것을 원하지 않음.
          + 클릭베이트가 모두의 진실성을 파괴하는 악순환에 빠져 있다고 생각함.
     * Lockhart의 Lament를 좋아함.
          + 수학 교육이나 발견에 대해 매우 다른 관점을 제시함.
     * 수학 논문을 볼 사람들 중 90%는 제목만 읽고, 나머지는 초록만 읽으며, 더 나아가는 사람들 중 90%는 서론만 읽고 그만둠.
          + 개인적인 경험은 이와 다르며, 구체적인 내용을 찾을 때만 논문을 읽음.
          + 과학 문헌은 기술적이며, 명확성과 정확성, 검색 용이성, 일반화 용이성, 타협에 대한 정직함으로 평가되어야 함.
     * Simon Peyton Jones의 관련 자료를 감사하게 생각함.
          + 그는 또한 이야기를 전달하는 것을 옹호함.
     * 수학/암호학 논문을 연구의 일부로 읽어야 하지만, 수학자나 암호학자가 아니어서 어려움을 겪음.
          + 이는 대상 독자가 아니기 때문이지만, 많은 논문이 이해를 전달하려는 시도보다는 저자가 이해했다는 것을 증명하는 것처럼 보임.
"
"https://news.hada.io/topic?id=14204","주파수 영역, 실제 장소인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            주파수 영역, 실제 장소인가?

주파수 영역은 실재하는가?

     * 주파수 영역은 복잡한 신호를 사인파의 진폭과 위상으로 변환하는 수학적 공간임.
     * 이 영역을 통해 시간 영역에서는 거의 불가능해 보이는 신호 처리 기술을 수행할 수 있음.
     * 이산 푸리에 변환(DFT)은 통신과 신호 처리에서 중요한 역할을 하지만, 우주에 대한 더 깊은 진실을 드러내는 것인지에 대한 의문이 제기됨.

이산 코사인 변환(DCT) 재방문

     * DCT는 DFT의 간소화된 실수 버전으로, 특정 코사인 표현식에 의해 입력값을 곱한 후 합산하여 특정 주파수 구간의 크기를 얻음.
     * 기본 함수인 cos() 표현식은 DCT 구간 번호에 해당하는 주파수의 사인파를 생성함.
     * 이 함수를 추상화하여 일반화된 주파수 영역 변환으로 다시 쓸 수 있음.

정사각형 우주로!

     * 신호를 사인파 주파수가 아닌 정사각파로 분할하는 새로운 기본 함수를 만드는 방법은 월시 행렬(Walsh matrix)을 사용하는 것임.
     * 월시 행렬은 서로 다른 속도로 실행되는 정사각파로 구성되어 있으며, 모든 곱셈 요소는 +1 또는 -1임.
     * 월시 행렬은 입력-출력 대칭을 유지하고 시간 영역 데이터와 주파수 표현 간의 원활한 변환을 가능하게 하는 직교성을 보장하기 위해 신중하게 설계됨.

아다마르 씨를 만나다

     * 아다마르 행렬(Hadamard matrix)은 월시 행렬의 재배열로, 1×1 배열에서 시작하여 크기가 두 배인 그리드에 네 개의 복사본을 타일링하여 확장함.
     * 이 행렬은 주파수 영역 변환을 구성하기에 충분하지만, 주파수 구간의 순서가 직관적이지 않아 정렬이 필요함.

월시 씨의 등장

     * 아다마르 행렬을 잘 정렬된 월시 행렬로 변환하기 위해서는 행을 그들의 순차성에 따라 정렬해야 함.
     * 이산 정사각 변환과 그 역변환을 구현할 수 있으며, 이는 월시-아다마르 변환(WHT)으로 불림.
     * WHT는 특정 유형의 데이터에 적합하고 계산 효율성이 높아 여러 분야에서 사용됨.

GN⁺의 의견

     * 주파수 영역과 시간 영역 간의 변환은 신호 처리와 통신 분야에서 중요한 개념으로, 이 기사는 이산 푸리에 변환(DFT)과 월시-아다마르 변환(WHT)의 차이점과 각각의 적용 사례를 설명함.
     * 실제 전자 회로의 동작을 예측하는 데 사용되는 이러한 변환들은 신호를 다루는 방식에 대한 깊은 이해를 제공함.
     * 이 기사는 특히 신호 처리를 공부하는 학생이나 엔지니어에게 흥미로울 수 있으며, 실제 응용 프로그램에서 이러한 변환을 구현할 때 참고할 수 있는 좋은 자료가 될 수 있음.
     * 비판적인 시각에서 보면, 이 기사는 주파수 영역의 '실재성'에 대한 철학적 또는 물리적 질문을 제기하며, 이는 과학적 탐구의 한 영역으로 볼 수 있음.
     * 기술적인 내용이지만, 예제 코드를 통해 실제 구현 방법을 이해하는 데 도움을 줌으로써 이론과 실제의 연결을 강조함.

        Hacker News 의견

     * 푸리에 변환에 대한 수학적 설명

     푸리에 변환은 시간 신호를 특정 직교 벡터 기저로 표현하는 방법으로, 무한 차원 벡터 공간에 존재하는 시간 의존 신호를 다양한 기저로 나타낼 수 있음. 이 중 하나가 푸리에 변환으로, 기저 벡터가 조화 함수임. 신호의 모양을 무한한 조화 함수의 조합으로 보여주는 '주파수 도메인'은 다른 변환과 마찬가지로 실제로 존재하는 것임.
     * 푸리에 변환의 고유한 특성

     푸리에 기저는 선형 시불변 시스템의 고유 벡터로 복소 지수 기저 함수를 가지며, 이는 다른 변환에는 없는 특성임. 많은 실제 시스템(회로, 통신 채널, 안테나 등)이 선형 시불변이며, 이 특성은 서로 다른 주파수의 신호가 간섭하지 않도록 함. 또한, 푸리에 쌍을 위치와 운동량의 파동 함수로 사용하는 양자 물리학과의 연결고리도 있음.
     * 다이나믹 시스템 그룹에서의 대화

     마스터 과정 중 다이나믹 시스템 그룹에서 나눈 대화를 회상함. 시스템의 한쪽에서 에너지가 주입되고 다른 한쪽에서 소산되는 것에 대해 논의하다가, 실제 공간이 아닌 주파수 공간에서의 회전 불변성에 대한 오해가 있었음을 지적함.
     * 롬-스칼글 변환에 대한 설명

     고정된 측정 간격이 필요 없는 롬-스칼글 변환은 천문학에서 주기 신호의 주파수를 결정할 때 자주 사용됨. 이 변환에 대한 일반적인 소개와 파이썬의 astropy 라이브러리에서 사용하는 방법에 대한 안내가 있음.
     * 광학 실험을 통한 주파수 평면의 실제 적용

     렌즈를 통과하는 사진에서 주파수 평면을 조작하여 이미지를 변경할 수 있는 광학 실험을 수행함. 실험은 매우 까다로웠으며, 이론을 실험 몇 달 후에 공부하면 이해하기 어려움.
     * 코클리어가 푸리에 변환을 구현하는 예

     달팽이관은 푸리에 변환의 '실제' '구현체'로, 소리의 스펙트럼 분석기로 작용함.
     * 사인파의 특별함과 기사의 물리학적 고려 부족

     사인파는 헬름홀츠 파동 방정식의 자연스러운 해로 특별하며, 사각파와 같은 다른 문제들은 무한한 에너지를 가짐. 기사는 수학이나 컴퓨터 과학자에게는 의미가 있을 수 있으나 소리와 파동의 물리학을 간과함.
     * 하다마드 행렬의 순서 정렬에 대한 토론

     하다마드 행렬의 행을 순서대로 정렬하기 위해서는 제로 크로싱의 수를 세는 것보다 우아한 알고리즘이 필요함. 이미 알려진 패턴과 알고리즘을 유추함.
     * 주파수 도메인의 특별함에 대한 논의

     기사는 주파수 도메인이 그렇게 특별하지 않다고 주장하지만, 실제로 자연에서 관찰할 수 있는 주파수 도메인과 푸리에 변환의 특별함을 강조함. 렌즈가 입력 이미지의 2D 푸리에 변환을 수행하고, 격자나 프리즘을 통해 빛의 파장을 측정하는 것은 주파수 도메인의 직접적인 측정 예임.
     * 함수의 값과 주파수 내용의 동등성에 대한 철학적 고찰

     무한한 많은 점에서 함수의 값을 아는 것은 무한한 많은 주파수에서 함수의 주파수 내용을 아는 것과 동등함. 두 표현 모두 철학적으로 '실제'이며, 어떤 문제는 한 표현에서 다른 표현보다 더 쉽게 해결됨.
"
"https://news.hada.io/topic?id=14090","HN 소식: Reddit, 브라우저를 통한 VPN 접속 차단, 'old' 서브도메인도 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 소식: Reddit, 브라우저를 통한 VPN 접속 차단, 'old' 서브도메인도 포함

     * VPN을 사용할 때 브라우저를 통한 Reddit 접속 불가 문제 발생
     * 'reddit.com'과 'old.reddit.com' 서브도메인 모두에서 오류 메시지 확인
     * Reddit이 정규 웹사이트에서 VPN 접속 차단을 시작한 것은 3개월 전
     * 당시에는 'old' 서브도메인이 작동했으나, 현재는 더 이상 작동하지 않음
     * 유럽에서 Safari 데스크탑 브라우저와 NordVPN을 사용해 테스트 중
     * 다른 사용자들도 비슷한 문제를 겪고 있는지 궁금함

GN⁺의 의견

     * Reddit이 VPN 사용자의 접근을 차단하는 것은 개인의 프라이버시 보호와 익명성을 중시하는 사용자들에게 불편을 초래할 수 있음. 이는 특히 검열이 심한 국가에서 정보에 접근하려는 이들에게 영향을 미칠 수 있음.
     * VPN 차단은 Reddit이 악의적인 활동을 방지하고 서비스의 품질을 유지하려는 시도일 수 있으나, 이로 인해 정당한 이유로 VPN을 사용하는 사용자들이 피해를 볼 수 있음.
     * 이러한 문제를 해결하기 위해, 사용자들은 다른 VPN 서비스나 프록시 서버를 찾아볼 수 있으며, Tor 브라우저와 같은 대안적인 익명성 도구의 사용을 고려할 수도 있음.
     * 기술적인 관점에서 볼 때, Reddit과 같은 플랫폼은 VPN 사용자를 식별하고 차단하기 위해 IP 주소 목록을 관리하고 업데이트해야 하는데, 이는 지속적인 유지 관리가 필요한 작업임.
     * 이 문제는 온라인 커뮤니티와 프라이버시 보호 간의 긴장 관계를 반영하며, 사용자들은 자신의 온라인 활동을 보호하기 위해 어떤 조치를 취해야 하는지에 대해 더욱 주의 깊게 고민해야 할 필요가 있음.

        Hacker News 의견

     * 지난해의 보이콧이 Reddit의 종말이거나 상당한 지식 유출을 가져올 것이라고 했지만, Reddit은 이제 공개 회사가 되었고 CEO는 큰 보상 패키지를 받았음에도 불구하고 모더레이터들은 여전히 무료로 일하고 있음. Reddit은 법 없는 황무지가 아니며, 해커 커뮤니티도 여전히 Reddit을 사용하고 있어 가치를 잃지 않았음을 의미함.

          + Reddit이 공개 회사로 변모하고 CEO가 큰 보상을 받았음에도 불구하고, 모더레이터들은 여전히 무료로 일하고 있으며, 사이트는 여전히 가치가 있음.

     * 억압적인 국가에 사는 사람들이 서구인들과 소통하기 위해 어디로 가야 할지에 대한 질문이 제기됨. 거의 모든 소셜 웹사이트가 VPN 사용 시 차단하고, VPN을 사용하지 않으면 감옥에 갈 수 있어 이중으로 벽에 갇힌 상황임.

          + 억압적인 국가에 거주하는 사람들이 VPN을 사용할 경우 차단되는 소셜 웹사이트 문제와 관련하여 해결책을 모색하는 논의.

     * Reddit 사용을 중단해야 한다는 의견이 제시됨. 부패한 행동을 용인하면 그것을 지지하는 것이며, Reddit은 이미 조작된 게시물과 댓글, 그리고 산업 이해관계에 의해 조종되는 봇들로 가득 차 있어 농담 같은 상황임.

          + Reddit의 부패한 행동을 더 이상 용인하지 말고 사용을 중단해야 한다는 주장과 사이트가 조작과 봇에 의해 지배되고 있다는 비판.

     * VPN 차단은 오래전부터 있었지만, 최근에 old.reddit.com 서브도메인까지 포함되었음. Reddit이 완전한 로그인 벽을 세우는 것이 다음 단계일 수 있으며, 이는 시간을 절약하는 데 도움이 될 것임.

          + Reddit이 VPN을 차단하고 있으며, 이는 사용자들이 시간을 절약하는 데 도움이 될 수 있음을 시사함.

     * 한 사용자는 자신의 주거용 IP로 Reddit에 접근할 수 없으며, 계정을 만들거나 지원 티켓을 생성해도 해결되지 않았음. 이는 Android 폰에서 RedReader를 사용하기 때문일 수 있으며, VPN을 통해서는 Reddit에 접근할 수 있음.

          + 주거용 IP로 Reddit에 접근할 수 없는 문제와 지원 티켓이 해결되지 않는 경험을 공유함.

     * Reddit이 독성이 가득하고, 허세, 어리석은 언어 사용, 피해자 의식이 팽배하다고 비판함. 사이트가 나빠진 것이 오히려 좋은 일이라고 생각함.

          + Reddit이 독성을 가지고 있으며, 이로 인해 사이트를 떠나는 것이 더 나을 수 있음을 주장함.

     * 한 사용자는 자신의 관심사에 대한 가장 활발한 커뮤니티가 Reddit에 있어서 다시 사용하기 시작했음을 밝힘. Reddit이 장벽을 추가하는 것에 대해 긍정적인 효과를 느낌.

          + 관심사 커뮤니티가 Reddit에 있어서 사용을 재개했지만, Reddit이 추가적인 장벽을 만드는 것에 대해 긍정적인 반응을 보임.

     * Mullvad VPN 사용자는 가끔 접속 오류를 겪었으며, IP를 변경하면 문제가 해결됨. 이는 특정 IP의 의심스러운 활동에 대한 자동 차단일 수도 있고, 알려진 VPN 제공업체 범위를 차단하려는 시도일 수도 있음.

          + Mullvad VPN 사용자가 경험하는 접속 오류와 이를 해결하기 위한 IP 변경에 대한 경험을 공유함.
"
"https://news.hada.io/topic?id=14213","Show GN: 우리나라 영화 명대사 Web, API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 우리나라 영화 명대사 Web, API

   가볍게 만들어본 웹페이지 입니다. 재미로 봐주세요~

   타짜, 신세계, 범죄와의 전쟁 명대사를 모아둔 API 입니다.
   수집하는 재미가 있어서 조금씩 모을 예정입니다.

   Web은 API 문서 느낌으로 만들어봤습니다. shadcn/ui를 사용했습니다.
   API는 axum을 사용했습니다.

   별 내용 없지만
   피드백 대환영입니다 :)

    API

   https://klassic-quote-api.mooo.com/v1/random-quote
   https://github.com/GHGHGHKO/klassic-quote-api

    Web

   https://klassic-quote.vercel.app/
   https://github.com/GHGHGHKO/klassic-quote

   ㅋㅋㅋ 아이디어가 재밌어요

   좋게 얘기해주셔서 감사합디다 :)

   와 재밌습니다 ㅎㅎ 헐리우드 영화 명대사도 있으면 재밌을 것 같습니다!

   헉 감사합니다 :)
   영화 명대사도 만들어보려구요!!

   재미있네요. 잘 봤습니다. Web 뿐만 아니라 API까지 노출하다니 훌륭합니다.

   감사합니다!!
   기분이 좋네요 :)

   오 재밋네요 근데 /examples/forms 경로는 404가 뜨네용

   덕분에 오류가 잘 해결되었습니다.
   정말 감사합니다. :)

   헉 그렇군요
   알려주셔서 정말 감사합니다!
   수정하겠습니다

   어우 좋네요

   우와 감사합니다 :)
"
"https://news.hada.io/topic?id=14193","xz sshd 백도어 래빗홀, 예상보다 훨씬 깊어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      xz sshd 백도어 래빗홀, 예상보다 훨씬 깊어

        Hacker News 의견

     * 해커뉴스 댓글 모음에 대한 요약:
          + 전문성과 아마추어성의 공존: 공격자들이 신뢰할 수 있는 정체성을 구축하고 중요한 패키지의 관리자가 되는 데 오랜 시간을 들인 점, 사회적 조작 공격에 여러 사람이 관여한 점, 진짜 정체와 공격 출처를 숨긴 점, 그리고 사용된 정교함과 난독화 기술은 전문적이었음. 그러나 버그와 성능 저하가 생산 버전에 나타난 점은 다소 아마추어적임.
          + 성능 저하로 인한 발각: 공격의 정교함에도 불구하고 성능 저하가 눈에 띄어 발견됨. 범죄를 저지르고 발각되는 수많은 방법이 있으며, 그중 절반만 생각해낼 수 있다면 천재라는 인용구를 상기시킴.
          + 난독화된 백도어 분석: 백도어 자체의 난독화에 대한 분석이 필요함. Ghidra를 사용하여 바이너리를 분석했으나, 실행을 가로채는 ifunc 메커니즘에 익숙하지 않아 다른 사람들에게 분석을 맡김. 백도어가 암호화된 바이너리로 제공되었기 때문에 코드 일부가 암호화되었을 것으로 추정됨.
          + 대안 링크 제공: theaderapp.com의 대안으로 nitter.poast.org 링크 제공.
          + 발견의 중요성: 백도어가 널리 퍼지기 전에 발견된 것은 다행임. 한 당사자가 RCE(원격 코드 실행)를 가지는 것보다 모든 당사자가 접근할 수 있게 되는 것이 훨씬 더 나쁨.
          + 공격자에 대한 논의 부재: 이 사건을 자세히 따르지 않았지만, 공격자에 대한 논의가 전혀 없는 것이 이상함.
          + 장기적 전략에 대한 우려: 공격자들이 백도어를 만들기 위한 '인프라'를 구축하는 데 시간을 들인 것처럼, 공격이 야생에서 이루어진 후에도 장기적인 게임을 할 계획이었을 것임. 현재도 이러한 게임이 진행 중인지 궁금함.
          + 성능 테스트에 대한 설명 요청: 이 백도어를 발견하는 데 사용된 성능 테스트에 대한 좋은 설명이나 입문서가 있는지, 성능 측정 방법을 배우고 싶어하는 요청.
          + 원 저자에 대한 칭찬: 아직 아무도 언급하지 않았지만, 이 글의 원 저자에게 큰 찬사를 보냄. 매우 인상적인 작업임.
"
"https://news.hada.io/topic?id=14082","Xz: 리눅스 랜드락을 무력화시킨 단 하나의 문자를 찾을 수 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Xz: 리눅스 랜드락을 무력화시킨 단 하나의 문자를 찾을 수 있나요?

리눅스 Landlock 기능 테스트 수정

     * XZ Utils의 빌드 설정에서 리눅스 Landlock 기능 테스트를 Autotools와 CMake 빌드 시스템에서 수정함.
     * 일부 시스템에서는 linux/landlock.h 헤더 파일이 존재하지만, 실제로 Landlock을 사용하기 위한 시스템 호출이 정의되어 있지 않는 문제가 있음.
     * 이를 해결하기 위해, Landlock 기능이 실제로 사용 가능한지를 확인하기 위한 컴파일 체크를 추가함.

GN⁺의 의견

     * Landlock은 리눅스 커널의 보안 기능 중 하나로, 프로세스의 리소스 접근을 제한하여 보안을 강화하는 역할을 함. 이러한 기능의 정확한 테스트는 시스템의 보안을 유지하는 데 중요함.
     * 기사에서 언급된 문제는 리눅스 시스템의 다양성으로 인해 발생하는 호환성 문제의 일례로 볼 수 있음. 이는 오픈소스 소프트웨어 개발에서 흔히 마주치는 문제이며, 개발자들은 이러한 문제를 해결하기 위해 지속적으로 노력해야 함.
     * 이 기사는 소프트웨어 개발자들에게 특정 시스템 기능의 사용 가능 여부를 테스트하는 방법에 대한 중요성을 상기시켜 줌. 특히, 보안 관련 기능을 다룰 때는 이러한 테스트가 더욱 중요함.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 리눅스 커널의 AppArmor나 SELinux가 있으며, 이들도 시스템 보안을 강화하는 데 사용됨.
     * 기술을 도입할 때는 시스템의 호환성을 철저히 검토해야 하며, Landlock 같은 보안 기능을 활성화함으로써 얻을 수 있는 보안 강화와 잠재적인 호환성 문제 사이에서 균형을 찾아야 함.

        Hacker News 의견

     * 최근 커밋에 대한 우려
          + 한 사용자는 최근 커밋이 보안 보고를 악화시키고 있다고 지적함.
          + 다른 사용자는 관련 커밋에 대한 링크를 제공하여 해결책을 제시함.
     * Linux의 Landlock 접근 제어 시스템 설명
          + Landlock에 대해 잘 모르는 사람들을 위해 해당 시스템에 대한 문서 링크가 제공됨.
     * xz 공식 사건 대응 페이지
          + xz 백도어와 관련된 공식 대응 페이지에 대한 링크가 제공됨.
     * 모니터 먼지로 인한 혼란
          + 한 사용자는 세심하게 스캔하던 중, 마침표가 없어야 할 곳에 마침표를 발견함.
          + 화면을 터치했을 때 마침표가 움직이는 것을 보고 모니터 먼지임을 깨달음.
     * 보안 문제 식별을 위한 AI 훈련 데이터셋
          + 맬웨어 팀이 보안 문제 식별을 위한 AI 훈련에 유용한 데이터셋을 구축했다는 의견 제시.
          + 모든 커밋에 보안 문제가 있으며, 오픈 소스 커뮤니티가 이를 식별할 것임.
     * Landlock을 xz에서 비활성화하는 이유에 대한 의문
          + 한 사용자는 xz 아카이브에 악의적인 내용을 주입하려는 목적이 있었는지, 아니면 xz 자체에 악의적인 활동을 주입하려는 것이었는지 의문을 제기함.
     * 시스템 보안의 느슨한 연결에 대한 우려
          + 시스템 보안이 여러 정확성 체인에 의존하고 있으며, 이를 막을 수 있는 여러 요소가 있었을 것이라는 의견 제시.
          + 헤더 파일이 실제 기능을 선언하지 않는다면, 그 목적이 무엇인지에 대한 의문 제기.
     * 바이너리 블롭의 보안 검증에 대한 필요성
          + 오픈 소스에서 컴파일된 바이너리 블롭이 보안을 유지하는지 확인하기 위한 단일 테스트의 부재에 대한 지적.
          + 기능 추가보다 안정성에 우선순위를 두어야 한다는 의견 제시.
     * 변경 요청(MR)과 테스트의 중요성
          + 변경 요청이 주장하는 기능을 수행하는지 보여주는 테스트와 함께 제공되어야 한다는 기대감 표현.
          + 테스트가 Landlock이 활성화되어 있는지 확인하는 방법에 대한 의문 제기.
     * 백도어 전략에 대한 추측
          + 더 많은 백도어를 추가하려는 의도가 있었는지, 그리고 이러한 백도어가 더 타당성을 가질 수 있었는지에 대한 추측.
     * 선택적 기능에 대한 빌드 옵션 제안
          + 강제 활성화, 가능할 경우 활성화, 강제 비활성화 등 세 가지 빌드 옵션을 제안함.
     * 코드 차이(diff)에 대한 혼란
          + cmake를 사용하여 기능이 활성화되었는지 감지하는 코드에 의도적인 구문 오류가 있었는지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=14158","라이브뷰, 스벨트와 가장 잘 어울리는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        라이브뷰, 스벨트와 가장 잘 어울리는 기술

LiveView와 Svelte의 조합

     * LiveView는 웹 애플리케이션을 구축하는 독특한 방법 제공.
     * 서버가 상태를 가지고 있으며, 프론트엔드의 동작을 백엔드에서 처리하고 DOM을 점진적으로 업데이트.
     * SPA의 복잡성은 분산 시스템의 복잡성 때문이며, LiveView는 프론트엔드 마이크로서비스 없이 풍부한 클라이언트 경험을 제공.

LiveView가 어려운 점들

     * 클라이언트 측 상태는 불가피하며, 서버와 사용자 간의 지연 시간은 피할 수 없음.
     * LiveView는 서버가 많은 DOM 변경을 담당하지만 모든 것을 제어할 수는 없음.
     * LiveView는 LiveViews, LiveComponents, Components의 세 가지 컴포넌트 유형을 가짐.
     * LiveView와 LiveComponents 간의 리팩토링은 예상보다 번거로움.

LiveView의 애매한 방향성

     * LiveView는 종종 무언가를 놓치고 있다는 느낌을 줌.
     * LiveView는 현대 프론트엔드 프레임워크와 많은 공통점을 가지고 있지만, 차이점을 인식하고 문제를 다르게 접근해야 함.

LiveView + Svelte

     * LiveSvelte는 LiveView에서 Svelte 컴포넌트를 렌더링할 수 있게 함.
     * 백엔드가 프론트엔드 컴포넌트의 props를 제어하고, 프론트엔드와 백엔드 모두 상태를 가짐.
     * 프론트엔드와 백엔드 간의 개인적이고 양방향 통신 채널이 있음.

LiveSvelte의 혁신적인 특성

     * 백엔드와 프론트엔드의 책임 분담이 명확하고, 복잡성이 서버 측에 집중되어 있음.
     * LiveView는 백엔드를 위한 프론트엔드로 가장 빛나며, 프론트엔드 컴포넌트를 렌더링하고 상태를 유지하는 백엔드 프로세스를 제공함.

GN⁺의 의견

     * LiveView와 Svelte의 조합은 서버와 클라이언트 간의 상태 관리를 효율적으로 분리하고, 개발자가 더 빠르고 직관적으로 애플리케이션을 구축할 수 있게 해줌.
     * 이 기술은 특히 실시간 상호작용이 중요한 웹 애플리케이션에 유용할 수 있으며, 사용자 경험을 향상시키는 데 기여할 수 있음.
     * 그러나 서버와의 지연 시간이 사용자 경험에 영향을 줄 수 있으므로, 성능 최적화와 지역적 서버 배치가 중요한 고려 사항이 될 수 있음.
     * LiveView와 Svelte의 조합은 기존의 SPA 개발 방식에 익숙한 개발자들에게 새로운 패러다임을 제시하며, 이는 학습 곡선을 낮추고 개발 효율성을 높일 수 있는 잠재력을 가짐.
     * 이 기술이 제공하는 실시간 상태 동기화와 양방향 통신은 특히 협업 도구, 대시보드, 또는 실시간 데이터를 다루는 애플리케이션에 매력적인 선택이 될 수 있음.

        Hacker News 의견

     * 멀티플레이어 비디오 게임에서 사용되는 패턴 중 하나는 클라이언트와 서버 모두에서 기본적으로 실행되는 코드가 있다는 것임.
          + 클라이언트 코드는 서버 상태의 예측으로 실행됨.
          + 서버 상태가 수신되면 클라이언트 상태를 강제로 적용함.
          + 게임에서 ""예측""은 적절한 표현이며, 클라이언트는 입력의 결과를 잘 추측할 수 있지만 다른 플레이어의 입력을 알 수 없기 때문에 확실하지 않음.
          + 이 패러다임은 공식 서버 상태를 기다리는 동안 클라이언트 입력에 즉각적으로 반응하기 위해 사용될 수도 있음(예: 드롭다운 활성화/비활성화, 로딩 스피너 표시).
          + 서버에서 실행되지 않는 클라이언트 상태도 많이 있음(예: 파티클 시스템, 래그돌 - 모든 클라이언트에서 정확히 같을 필요가 없고 다른 플레이어 입력/물리와 상호작용하지 않는 것들).
     * LiveView와 Svelte를 결합하는 방법에 대한 ElixirConf 2022에서 발표를 했으며, live_svelte 기여자들이 이를 현실로 만드는 데 기여함.
          + 클라이언트 측 상태는 특히 풍부한 UX를 가진 앱에 항상 필요함.
          + 뉴욕시에서는 특히 이동 중에 네트워크 연결이 보장되지 않음.
          + Phoenix의 pubsub을 사용하여 다른 서버에서 발생한 서버 측 상태 변경 사항을 클라이언트에 반응적으로 푸시하는 기능은 매우 강력함.
     * 새로운 행이 들어오면 LiveView가 클라이언트를 업데이트하므로 테이블에 푸시하기만 하면 됨.
          + 대화형 행이 있는 비즈니스 앱에서는 이 방법을 사용하지 말 것을 권장함.
          + 사용자가 잘못된 것을 클릭하거나 잘못된 고객에게 이메일을 보내거나 잘못된 거래를 환불하는 등의 인지 지연이 발생할 수 있음.
          + 데이터가 변경되었다는 메시지를 전달하는 스티커 배너를 사용하거나, 급할 때는 스크롤 위치 변경 없이 새 행을 추가만 하는 것이 좋은 UX임.
     * BeaconCMS에서 Svelte와 LiveView를 함께 사용함.
          + 클라이언트에서 UI를 더 세밀하게 제어하고 싶은 경우에는 좋은 사용 사례가 있음.
          + Phoenix를 사용하더라도 항상 LiveView가 답은 아니며, 때로는 정적인 렌더링 페이지가 완벽히 괜찮음.
          + 모든 것에 대해 전부 또는 전무로 접근하지 말 것을 조언함.
          + 기사에서 지적한 것처럼 'LiveView 방식'에서 벗어나는 몇 가지 좋은 사용 사례가 있음.
          + 만약 1000ms의 라운드 트립이 있다면 다른 고려 사항이 있을 수 있지만, 지리적으로 위치한 서버가 비용 등의 이유로 사용할 수 없을 수 있으므로 클라이언트 측 상태 관리를 추가하는 것이 해결책이 될 수 있음.
     * 클라이언트에서 상태를 관리하는 대신 클라이언트와 서버 모두에서 상태를 관리함.
          + 이것이 개선이라고 보기 어려우며, 또 다른 API를 구축할 필요를 없애주긴 하지만 그렇다고 해서 개선된 것은 아님.
     * 이 접근 방식의 한계는 빛의 속도에 있다는 것임: 서버는 사용자에게 얼마나 가까울 수 있는지에 한계가 있음.
          + 다음 단계는 서버를 WebAssembly로 컴파일하고 클라이언트에게 전송하여 실제 서버가 반환될 때까지 낙관적으로 응답을 렌더링하는 것임.
          + 조금 미친 듯 들릴 수 있지만 실제로 프로젝트에서 이를 성공적으로 수행했으며 마법과 같은 경험임.
     * LiveSvelte를 만든 사람으로, 질문이 있다면 알려달라고 함.
     * 일반적으로 이 모델로 앱을 만들고 싶었음: 이벤트 지향적, 양방향 실시간 업데이트와 서버, 순서 있는 이벤트, 로컬 및 원격 상태...
          + LiveView에 대해 알지 못했고, 에를랑 계열 언어를 사용해본 적이 없지만 분명히 그들은 무언가를 발견함.
          + 전통적인 요청-응답 모델은 일관성과 오래된 데이터 문제를 많이 일으킴.
          + 희망적이지만 아마도 논란의 여지가 있는 생각: 지난 10년이 주류 언어에 FP 개념을 통합하는 데에 관한 것이었다면, 다음 10년은 상태를 가진 메시지 지향적(반응형?) 프로그래밍을 주류 전체 스택에 통합하는 데에 관한 것이 되기를 바람.
     * 앱에서 LiveView와 함께 재사용 가능한 Stimulus 컨트롤러를 사용하고 있으며, 이 또한 매끄럽게 작동함.
          + 일반적으로 LiveView로 빌드하는 것은 즐거움이지만, 실제 시나리오에서 사용할수록 상태가 없는 HTTP 프레임워크의 이점을 더 깨닫게 됨.
          + Hotwire와 같은 프레임워크는 더 뛰어난 성능과 재연결에 대한 회복력을 제공하며, 사용자에게 더 가까운 서버를 배치하는 필요성을 피함.
     * 멋진 프로젝트임! 이에 대한 Svelte Radio 에피소드를 방금 발표함.
"
"https://news.hada.io/topic?id=14126","CityGaussian: 가우시안을 활용한 실시간 고품질 대규모 장면 렌더링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               CityGaussian: 가우시안을 활용한 실시간 고품질 대규모 장면 렌더링

CityGaussian: 고속 고품질 대규모 장면 렌더링을 위한 가우시안 기법

     * **CityGaussian (CityGS)**은 대규모 3D 가우시안 스플래팅(3DGS)의 효율적인 훈련과 실시간 렌더링을 위한 새로운 접근법을 제시함.
     * 전역 장면 사전 지식과 적응형 훈련 데이터 선택을 통해 효율적인 훈련과 무이음 결합이 가능함.
     * 가우시안 원시 데이터를 기반으로 다양한 디테일 수준을 압축하여 생성하고, 제안된 블록 단위 디테일 수준 선택 및 집계 전략을 통해 다양한 규모에서 빠른 렌더링을 실현함.
     * 대규모 장면에 대한 광범위한 실험 결과는 이 접근법이 최신 렌더링 품질을 달성하며, 매우 다른 규모의 대규모 장면을 일관되게 실시간으로 렌더링할 수 있음을 보여줌.

SOTA와의 비교

     * CityGS 없이 LoD 기술: MatrixCity는 2500만 개의 가우시안으로 묘사되며, A100에서 테스트한 결과 18 FPS의 속도로 불쾌한 로밍 경험을 초래함.
     * CityGS와 LoD 기술: LoD 지원으로 CityGS는 매우 다른 규모에서 실시간으로 렌더링될 수 있으며, 평균 속도는 A100에서 테스트한 결과 36 FPS임.

시각적 비교

     * MegaNeRF, SwitchNeRF, GPNeRF, 3DGS와 같은 기존 기술들과 비교하여 CityGS의 우수한 렌더링 품질을 시각적으로 비교함.

GN⁺의 의견

     * CityGaussian은 대규모 3D 장면을 실시간으로 렌더링하는 데 있어 중요한 기술적 진보를 나타냄. 이는 가상 현실, 게임 개발, 도시 계획 및 시뮬레이션과 같은 분야에서의 응용 가능성을 높임.
     * 실시간 렌더링은 사용자 경험을 크게 향상시키는 요소로, CityGaussian이 제공하는 높은 프레임 속도는 이러한 경험을 더욱 부드럽고 현실적으로 만들 것임.
     * 그러나 실시간 렌더링 기술은 일반적으로 고성능 컴퓨팅 자원을 필요로 하며, 이는 비용과 접근성 측면에서 제약이 될 수 있음.
     * 이 기술이 널리 채택되기 위해서는 하드웨어의 발전과 함께 최적화 기술의 지속적인 개선이 필요함.
     * 또한, CityGaussian과 유사한 기술을 사용하는 다른 프로젝트나 제품이 시장에 존재할 수 있으므로, 사용자는 자신의 요구 사항에 맞는 최적의 솔루션을 선택하기 위해 여러 옵션을 비교해야 함.

        Hacker News 의견

     * 구글 맵스 3D 타일과 가우시안 스플랫을 결합한 실험적인 프로젝트를 소개함. 이 기술을 통해 실제와 유사한 효과를 달성했으며, 관련 코드가 포함된 예시가 제공됨.
          + 예시 1: kfarr의 트위터 링크
          + 예시 2: 3dstreetapp의 트위터 링크
     * 비디오에서 사용된 데이터셋은 'Matrix city'로, 몇 년 전에 출시된 언리얼 엔진 5의 매트릭스 데모에서 추출된 것으로 보임. 사진이 아닌 포토리얼리즘 기법으로 제작된 것으로 추정됨.
          + Matrix city 웹사이트
     * 평균 프레임 속도는 초당 36프레임으로, A100 그래픽 카드에서 테스트됨. 이 그래픽 카드는 약 $8,000의 가격임.
     * 가우시안 스플랫이라는 기술이 가우스의 이름을 따서 명명되었는데, 가우스가 직접 발명한 것은 아니지만, 이 기술의 수학적 기반에 크게 기여함.
     * 언리얼 엔진이 최근 놀라운 데모를 선보일 수 있었던 기술이 가우시안 스플랫인지에 대한 기술적인 질문이 있음.
     * 이 기술이 어떤 라이선스로 공개될지 기대되며, 오픈 소스 게임에서 이를 활용하는 것을 보고 싶다는 의견이 있음.
     * 3D 가우시안을 사용하여 큰 장면을 렌더링하는 고급 기술에 대한 호기심과 코드를 테스트해보고 싶다는 흥미로운 반응이 있음.
     * 이 기술이 기존의 도시 시뮬레이션 게임인 'Cities: Skylines'보다 눈에 띄게 나은 점이 없어 보이며, 제한된 프레임만을 보여주어 실제 효과를 파악하기 어려움을 지적하는 의견이 있음.
     * 3D 가우시안 스플랫이 실제로 유용할지 의문을 제기하는 댓글이 있음. 렌더링 속도가 너무 느리고 데이터가 많아서 실용적이지 않을 수 있다는 우려와 함께, 래스터화가 레이트레이싱보다 항상 빠를 것이라는 주장이 있음. 가우시안 포인트 클라우드에서 전통적인 기하학과 재질을 생성하는 것이 흥미롭지만, 포토그래메트리가 이미 오래전부터 사용되고 있음을 언급함.
     * 이 기술의 메모리와 컴퓨팅 요구 사항에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=14092","엘살바도르에 관한 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              엘살바도르에 관한 노트

엘살바도르에 대한 메모

     * 1995년 엘살바도르의 고의적 살인율은 10만 명당 139건으로 세계 최고였으며, 현대 역사에서 기록된 가장 높은 수치 중 하나였음.
     * 엘살바도르의 살인율은 1995년 이후 빠르게 감소했지만, 2002년부터 2018년까지 세계 평균 최고 수준을 유지했으며, 40에서 107 사이를 오갔음.
     * 2023년 엘살바도르의 공식 살인율은 10만 명당 2.4로 감소하여 리투아니아, 몬테네그로, 캐나다와 비슷한 수준이 됨.

개요

     * 인구(2021년) - 630만 명
     * 인구 성장률(2021년) - 0.3%
     * 면적 - 8,124제곱마일
     * GDP(명목, 2021년) - 353억 달러
     * GDP 성장률(2022년) - 2.6%
     * GDP per capita(2023년) - $5,557
     * GDP per capita PPP(2023년) - $11,717
     * 인플레이션율 범위(2018-2023년) - -1%-7.5%
     * 주요 수출품 - 셔츠와 스웨터
     * 평균 연령(2023년) - 27세
     * 기대 수명(2020년) - 71세
     * 설립 연도 - 1824년
     * 종교(2017년) - 84% 기독교(45% 가톨릭), 15% 무종교
     * 부패 인식 지수 순위(2022년) - #116
     * 경제 자유 지수 순위 - #114

갱단의 부상

     * 엘살바도르는 1821년 스페인으로부터 독립한 후 멕시코 제국에 가입했다가 이후 중앙아메리카 연방공화국으로 독립했으며, 1841년에는 다섯 개의 독립 국가로 분열됨.
     * 20세기 초반까지 빈곤과 극심한 경제 불평등이 지속되었으며, 정부는 부패한 민주주의와 독재 정권 사이를 오갔음.
     * 1970년대 말, 군부 정권은 좌파 반대 세력에 대항하여 무력을 사용했고, 이는 1980년대 초 엘살바도르 내전으로 이어짐.
     * 내전은 1992년 종결되었으나, 엘살바도르는 폐허 상태였고, 많은 사람들이 국외로 피난을 갔음.

LA의 갱단들

     * 1980년대, 많은 엘살바도르 난민이 미국 로스앤젤레스로 이주했으며, 이곳에서 MS-13과 같은 갱단이 형성됨.
     * MS-13은 초기에는 자신들을 보호하기 위해 만들어졌지만, 곧 지역 통제를 위한 다른 갱단들과 경쟁하기 시작함.
     * MS-13은 특히 무자비한 폭력과 마체테를 사용한 살인으로 악명을 떨쳤음.

고향으로 돌아가다

     * 1992년 내전 종결 후, 많은 엘살바도르인들이 미국에서 추방되었고, 이들 중 일부는 엘살바도르에서 갱단 활동을 재개함.
     * 추방된 갱단원들은 엘살바도르에서 갱단의 규모를 확장하고, 현지 갱단을 흡수하며, 범죄 자본을 축적함.

엘살바도르의 갱단들

     * 엘살바도르에서 MS-13과 B-18은 지역 통제를 강화하고, 보호 명목으로 협박을 통한 강제 징수를 시작함.
     * 갱단은 경찰보다 더 많은 영향력을 행사하며, 때로는 법적 분쟁을 해결하는 역할까지 맡음.
     * 갱단의 지도부는 종종 감옥에 수감되었지만, 갱단은 계속해서 조직적으로 발전하고 국제 마약 카르텔과 협력함.

GN⁺의 의견

     * 엘살바도르의 살인율 감소는 대통령 나이브 부켈레의 범죄 단속 노력과 관련이 있으며, 이는 다른 국가들에게도 범죄와의 전쟁에서 얻을 수 있는 교훈을 제공함.
     * 갱단 문제는 단순한 범죄 문제를 넘어 사회적, 경제적, 정치적 문제와도 밀접하게 연결되어 있으며, 이는 갱단 대응 전략을 수립할 때 고려해야 할 중요한 요소임.
     * 엘살바도르의 사례는 갱단 활동이 국경을 넘어 확산될 수 있음을 보여주며, 국제적인 협력과 정보 공유의 중요성을 강조함.
     * 갱단과의 전쟁에서 성공적인 결과를 얻기 위해서는 군사적인 접근뿐만 아니라 사회적, 경제적 지원과 교육 프로그램의 도입이 필요함.
     * 갱단 문제에 대한 지속적인 관심과 연구는 이러한 범죄 조직의 진화를 이해하고 효과적으로 대응하는 데 필수적임.

        Hacker News 의견

     * 이 글은 지금까지 읽은 엘살바도르 상황에 대한 최고의 요약이라는 평가를 받음. 작성자는 엘살바도르 친구들과 몇몇 뉴스 기사를 통해 상황을 어느 정도 이해하고 있었지만, 이 포스트가 그 지식을 크게 확장시켰다고 함. 한 사람이 요약한 것이기 때문에 몇 가지 오류가 있을 수 있지만, 매우 잘 작성되었다고 칭찬함.
     * 민주주의의 핵심은 정치적 의사결정을 분산시키고, 좋은 지도자를 선출하고 나쁜 지도자를 폭력 없이 물러나게 하는 승인 기반의 피드백 루프를 만드는 것임. 독재는 더 많은 국가 역동성을 허용하지만 이러한 분산된 위험을 희생함으로써, 독재는 더 높은 위험과 보상을 가짐. 좋은 독재자는 민주적 제약 없이 더 많은 선을 행할 수 있지만, 나쁜 독재자는 더 많은 악을 행할 수 있음.
     * 중앙아메리카 출신의 친구가 런던 파티에서 거의 모든 사람이 화장실에서 코카인을 하는 것에 화를 냄. 그는 마약 갱단에 의해 가족의 삶이 망가진 충격적인 이야기를 들려줌.
     * 민주주의의 공통된 약점으로 갱 범죄가 있음. 갱을 제거하기 위해 준독재자를 선출해야 했던 나라들이 여럿 있음. 작성자의 고향이 갱 전쟁에 휘말리고 있는 상황에서, 더 나은 방법이 있는지 고민함.
     * 기사는 훌륭하지만, 엘살바도르가 방문하기에 흥미롭지 않은 나라라고 한 점에 대해 이견을 제시함. 개인적인 경험에 따르면, 시골은 아름답고 해변은 멋지며 사람들은 사랑스러움. 도시가 '추악하다'고 하지만 산살바도르는 괜찮았음. 작성자는 나이트라이프를 찾지 않는 타입임. 그 지역을 방문한다면 놓치기에는 아까운 곳임.
     * 부켈레가 다른 나라의 정치에 개입하는 것이 우려됨. 예를 들어, 코스타리카에서 새로운 정치당을 만들려는 시도가 있음. 동시에 엘살바도르는 기술 회사에 0% 세금을 제공하는 반면, 코스타리카는 초등/고등학교 컴퓨터 과학 교육과 외국 투자자 유치 기관에 대한 자금을 삭감함. 이러한 일련의 사건들이 단순한 우연이 아니라고 생각하게 됨.
     * 이 기사는 부켈레의 부상에 대해 합리적으로 철저한 설명을 제공함. 중국 자금으로 지어진 도서관이 서구 문화(해리 포터, 스타워즈, 마리오 등)로 장식되어 있는 것이 재미있다고 함. 심지어 중국 돈이 미국 문화의 패권을 유지하는 데 사용됨.
     * 중앙 집중화된 권력과 안전성에 대해 관심이 있는 사람은 '리바이어던'을 읽어야 함. 엘살바도르에 대한 대부분의 지식이 이 기사에서 비롯되었지만, 비평가들이 '폭력의 독점'이라는 개념과 선진국을 견인하는 민주적 규범이 이 중앙 집중화된 권력에 기반하고 있다는 것을 이해하지 못하는 것 같음. 기사는 훌륭하며, 지금까지는 '가치가 있었다'고 결론지음. 하지만 미래의 불안정성이 비용이 될 수 있음. 많은 사람들이 엘살바도르가 전형적인 서구 민주 국가로 변하기를 원하지만, 싱가포르와 같은 것을 목표로 하는 것 같음.
     * 기사는 부켈레를 개인과 국가 지도자로서 매우 객관적으로 평가함. 이러한 이야기를 읽고 나면 정치 이론에 대해 깊이 생각하게 됨.
     * 개발 도상국에서 볼 수 있는 저렴한 중국 수입품에 대해 언급함. 그러나 이 텍스트 아래에 있는 이미지들은 중국어가 아닌 한국어를 보여줌.
"
"https://news.hada.io/topic?id=14175","JS-Torch - PyTorch 와 비슷한 Javascript 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               JS-Torch - PyTorch 와 비슷한 Javascript 라이브러리

     * PyTorch 의 문법을 따르면서 처음부터 새로 개발
     * 딥러닝 Layers와 함수, 자동 미분(Differentiation) 엔진, Gradient 추적이 가능한 완전한 기능의 Tensor 객체를 내장
     * 구현된 Tensor Operation: Add, Subtract, Multiply, Divide, Matrix Multiply, Power, Square Root, Exponentiate, Log, Sum, Mean, Variance, Transpose, At, MaskedFill, Reshape
     * 구현된 딥러닝 Layers: nn.Linear, nn.MultiHeadSelfAttention, nn.FullyConnected, nn.Block, nn.Embedding, nn.PositionalEmbedding, nn.ReLU, nn.Softmax, nn.Dropout, nn.LayerNorm, nn.CrossEntropyLoss

   Thanks for posting!
"
"https://news.hada.io/topic?id=14205","포르노 제한으로 인한 VPN 급성장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          포르노 제한으로 인한 VPN 급성장

온라인 포르노 제한으로 인한 VPN 사용 급증

     * 미국 일부 주에서 인터넷 사용자들이 웹의 일부를 익명으로 탐색하는 것이 더 어려워짐.
     * 텍사스와 루이지애나를 포함한 12개 이상의 주에서 성인 비디오 스트리밍 사이트에 대한 사용자 신원 확인을 요구하는 법안을 제정함.
     * 플로리다와 같은 주에서는 소셜 미디어 서비스 접근을 제한하거나 금지하는 온라인 부모 동의 법안을 도입함.
     * 이러한 법안들은 온라인 플랫폼이 사용자의 정부 발급 신분증을 수집하거나 제3자 연령 확인 방법을 사용하여 성인임을 확인하도록 요구함.
     * VPN 기술을 사용하여 차단된 자료에 접근하려는 미국 내 인터넷 사용자들의 증가가 보고됨.

VPN이 어떻게 사용되고 있는가?

     * VPN은 사용자 데이터에 대한 암호화된 터널을 만들고, 사용자의 컴퓨터가 다른 지리적 위치에 있는 것처럼 보이게 함.
     * VPN은 내용 제한을 우회하는 데 자주 사용되며, 특히 권위주의 국가에서 온라인 익명성을 강화하는 데 사용됨.
     * 미국 내에서 국내 콘텐츠 제한을 우회하기 위해 VPN을 사용하는 것은 상대적으로 새로운 현상임.
     * 새로운 법안들의 언어가 이전에는 법적 검토를 견디지 못했을 것이라는 부분이 갑작스러운 변화에 일부 기여함.

플랫폼들은 새로운 법안에 어떻게 반응하고 있는가?

     * 일부 주에서는 미성년자가 포르노그래픽 자료에 접근하는 것을 방지하기 위해 연령 확인을 의존하는 법안을 통과시킴.
     * 일부 성인 콘텐츠 사이트는 이러한 새로운 법안이 있는 주에서 IP 주소를 차단하여 법안을 위반하지 않도록 선택함.
     * 플랫폼들은 또한 사이버 범죄자들에게 매력적인 목표가 될 수 있는 사용자 데이터의 대량 수집 및 유지를 원하지 않음.

VPN 사용 증가가 새로운 입법자의 주목을 끌 수 있음

     * 미국 인터넷 사용자들은 포르노 관련 자료뿐만 아니라 다른 자료에도 VPN을 사용하고 있음.
     * 대학생들은 일부 대학의 TikTok 금지 노력을 우회하기 위해 이미 VPN을 사용하고 있음.
     * VPN 사용 증가는 입법자들이 기술에 대한 제한을 강화하도록 유도할 수 있음.
     * 일부 반포르노 법안은 미성년자가 접근 제한을 변경하거나 우회하는 것을 명시적으로 금지하는 언어를 포함하고 있음.
     * VPN 사용을 범죄화하거나 제한하는 새로운 법안은 더 많은 해를 끼칠 수 있으며, 헌법상의 법적 도전에 직면할 수 있음.

GN⁺의 의견

     * 이러한 법안들은 개인의 프라이버시와 익명성을 보호하려는 VPN 사용의 합법적인 이유들과 충돌할 수 있음.
     * VPN 사용 증가는 온라인 자유에 대한 중요한 토론을 촉발할 수 있으며, 이는 결국 대법원에 이르는 논쟁이 될 수 있음.
     * VPN 기술의 채택은 사용자의 온라인 활동을 보호하고 검열을 우회하는 데 중요한 역할을 하지만, 법적 및 정책적 도전에 직면할 가능성이 있음.
     * 이 기사는 인터넷 사용자들이 자신의 권리를 어떻게 보호하고자 하는지에 대한 통찰을 제공함.
     * VPN 서비스의 증가는 또한 사이버 보안에 대한 중요성을 강조하며, 사용자 데이터 보호에 대한 지속적인 관심을 필요로 함.

        Hacker News 의견

     * 일화: 몇 년 전, 터키 남동부의 매우 보수적인 도시 메르신에 있는 동성애 커플의 에어비앤비에 머물렀음. 그들이 안드로이드 TV, 휴대폰, 랩탑에 1.1.1.1을 설정하는 방법을 보여줬을 때 그들이 느낀 기쁨은 말로 표현할 수 없음. 그들은 이를 통해 검열이 심하고 국가에 의해 통제되는 인터넷 환경에서 제한 없이 게이 포르노를 볼 수 있었음. 가끔 가상의 인사 카드를 받기도 함.
     * 중고등학교에서 VPN을 사용하여 학교 네트워크 제한을 우회하는 것이 매우 흔함.
     * 저렴한 VPS에 Tailscale 출구 노드를 설정하면, 하는 일이 ""합법적""이라면 문제 없음. 그러나 여전히 사용자에게 추적 가능함.
     * VPN이 주로 포르노 접근 수단으로 자리 잡게 된다면, 사람들이 TLS가 존재한다는 것을 인지하고, 온라인 뱅킹의 내용을 네트워크 상의 모든 사람이 볼 수 있다는 오해를 불러일으키는 광고가 사라지는 날을 기대함.
     * VPN을 사용하여 한 달 내내 지속적으로 접속하는 것은 과한 행동일 수 있음. 짧은 세션에 대한 접근을 제공하는 솔루션을 만들 수 있음.
     * 어떻게 업계가 프록시를 ""VPN""이라고 부르는 것을 허용했는지 궁금함.
     * 성인 사이트에 연결할 수 있는 연령 확인 서비스를 검색해봤지만, 합리적인 것을 찾지 못함. 정적 HTML 페이지로 이를 구현하는 방법에 대해 궁금함. PHP 사이트라면 세션 ID와 같은 것이 써드파티 API와 연결될 수 있을 것으로 추측함.
     * 연령 확인 기능을 구축하고자 하는 사람이 있다면, 여기에 부수적인 사업 기회가 있을 수 있음. 이러한 기술은 연령 제한이 있는 제품 판매 등 다른 용도로 사용될 수 있음.
     * 개인 정보 보호와 안전을 위해 VPN을 추천해달라는 요청이 있음.
     * 민주적 정부가 다시 독재 정부로 후퇴하는 것에 대비하여 사회 기반 시설을 강화하는 것은 중요함.
     * 왜... (문맥상 불완전한 문장으로, 요약에서는 해당 부분을 생략함)
"
"https://news.hada.io/topic?id=14185","SearXNG, 무료 인터넷 메타검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        SearXNG, 무료 인터넷 메타검색 엔진

     * SearXNG는 개인 정보를 존중하며 사용자 정의가 가능한 메타 검색 엔진
          + 70개 이상의 검색 서비스 및 데이터베이스의 결과를 취합
     * 실행 가능한 인스턴스 목록을 Searx.space에서 제공
     * 관리중인 Docker 이미지 제공하며, 설치 스크립트로도 가능
     * 여러 언어로 번역 완료
     * 온라인 익명성을 위해 Tor를 통해서도 사용 가능

GN⁺의 의견

     * SearXNG는 사용자의 개인 정보 보호에 중점을 두는 메타 검색 엔진으로, 사용자가 자신의 검색 엔진을 설정하고 관리할 수 있는 유연성을 제공함.
     * 이 검색 엔진은 개방성과 사용자 정의 가능성으로 인해 개발자와 기술 애호가들에게 매력적일 수 있음.
     * 메타 검색 엔진은 다양한 검색 소스를 결합하여 더 폭넓은 검색 결과를 제공할 수 있으나, 검색 품질과 속도는 여러 소스의 통합 방식에 크게 의존함.
     * SearXNG와 같은 오픈소스 프로젝트는 커뮤니티의 기여를 통해 지속적으로 개선되며, 이는 소프트웨어의 진화와 사용자 요구에 빠르게 대응할 수 있는 장점을 가짐.

        Hacker News 의견

     * DownloadNet 프로젝트 소개
          + 브라우저 히스토리 전체 또는 북마크한 페이지에 적용된 검색에 관심이 있는 사람들을 위한 DownloadNet 프로젝트 추천
          + 브라우저와 연동되어 향상된 경험 제공
          + UI는 단순하며(1997년대 구글 스타일, CSS 없음), 검색 기능은 복잡하지 않지만 향후 개선 가능
          + 오프라인에서도 콘텐츠 접근 가능, 위성 대역폭 절약에 유용
          + 프로젝트 링크: DownloadNet GitHub
     * 구글 이전의 검색 도구에 대한 추억
          + 구글 이전에는 Alta Vista, Hotbot, Lycos 등에서 스팸 결과 사이에서 제대로 된 답을 찾을 확률을 높여주는 메타 검색 도구 사용
     * 개인적으로 호스팅 가능한 검색 엔진 추천
          + Kagi는 아니지만 검색 결과가 괜찮은 검색 엔진
          + Docker에서 호스팅 가능
          + 검색 엔진 링크: https://felladrin-minisearch.hf.space/
     * 특정 도메인 차단 기능에 대한 바람
          + 검색 결과에서 특정 도메인을 영구적으로 차단하는 기능이 있으면 좋겠음
          + 이미 관련 이슈가 있음: GitHub Issue
     * 개인 인터넷 연결에서의 검색 엔진 사용 위험
          + 개인 인터넷 연결에서 실행 시 검색 엔진 사용 불가능 위험 있음
     * SearX 인스턴스의 결과 문제
          + 몇몇 SearX 인스턴스는 결과를 반환하지 않거나 DuckDuckGo 결과만 제공
          + Brave, Google, Qwant 등에서 '너무 많은 요청'으로 인해 일시 중단된 상태
     * Presearch.com 팬의 의견
          + Presearch.com의 팬으로, 구글이나 빙처럼 결과를 필터링하지 않는 점을 선호
          + 구글이 심하게 필터링할 것으로 예상되는 주제나 비주류 주제에 대해 Presearch에서 두 번째 의견을 얻음
          + Archive.org가 비슷한 기능을 제공하기를 희망, Archive.org는 방대한 데이터를 보유하고 있지만 검색 기능이 부족
     * 공개적으로 호스팅되는 Searx 인스턴스 사용 경험
          + 많은 사람들이 Searx 인스턴스를 공개적으로 호스팅
          + 브라우저의 검색창에서 매번 다른 인스턴스로 리디렉션하는 도구 사용 가능
          + 단점은 때때로 결과를 제공하지 않거나 불충분한 결과를 제공하는 인스턴스에 접속할 수 있음
          + 최근에는 이러한 문제가 덜 발생
     * 주류 검색 엔진의 평균 이하 결과를 개선하는 도구로서의 Searx
          + Searx를 사용하여 주류 검색 엔진의 평균 이하 결과를 어느 정도 사용 가능한 수준으로 개선하는 데 선호하는 도구
     * SearX(NG) 결과의 품질에 대한 연구
          + 몇 년 전, 다양한 인터넷 제공업체(모바일, 광섬유, VPN)를 사용하여 SearX(NG) 결과의 품질에 대한 연구가 있었음
          + 연구자가 여전히 활동 중인지와 결과에 대한 궁금증 표현
"
"https://news.hada.io/topic?id=14105","NetBSD 10.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            NetBSD 10.0 릴리즈

     * NetBSD의 18번째 메이저 릴리즈
     * 2019년 NetBSD 9.x 이후 누적된 운영 체제의 개선 사항을 포함
     * 기존 설치는 설치 이미지를 부팅하고 업그레이드 옵션을 선택하여 업그레이드할 수 있음
     * 성능 및 확장성 향상
          + NetBSD 10은 특히 멀티프로세서 및 멀티코어 시스템에서 NetBSD 9.x에 비해 컴퓨팅 및 파일 시스템 관련 애플리케이션의 성능 및
            확장성이 크게 향상
          + 커널의 파일 경로 조회 캐시를 더 빠른 디렉토리별 레드-블랙 트리로 전환
          + 스케줄러 성능 향상, 가상 메모리 시스템 최적화, select(2) 와 poll(2) 시스템 콜 성능 향상, 부팅 속도 개선 등
     * 보안 및 품질 보증 : WireGuard®와의 호환성, 더 강력하고 빠른 암호화, 새로운 Armv8-A 보안 기능 지원 등
     * 하드웨어 지원 개선 :
          + Arm 지원 개선, UEFI 부트로더 개선, 새로운 드라이버 추가 및 기존 드라이버 개선 등
          + Raspberry Pi 4 지원, Apple M1 SoC 지원, 다양한 새로운 SoC 및 장치 드라이버 지원 추가
     * 가상화 개선 : Xen 및 HyperV 지원 개선, VirtIO 드라이버 향상, NetBSD Virtual Machine Monitor(nvmm(4)) 개선
     * 기능 및 일반 개선 사항 : 네트워킹 스택 개선, 파일 시스템 및 스토리지 개선, 새로운 사용자 공간 프로그램 및 사용자 공간 프로그램 개선 등
     * 시스템 동작 및 호환성 변경 : 네트워킹 설정, 보안 강화, 기본 패키지 데이터베이스 변경, 엔트로피 소스 변경, Wi-Fi 장치 요구 사항 변경 등
"
"https://news.hada.io/topic?id=14118","Bun 1.1 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Bun 1.1 릴리즈

Windows 지원

     * Windows 10 이상에서 Bun 실행 가능
     * macOS 및 Linux에서의 Bun 테스트 스위트의 98% 통과
     * 내장된 npm 호환 패키지 관리자 포함하여, Vite React 앱 설치 시 yarn보다 18배, npm보다 30배 빠름
     * .bunx 파일 형식으로 Windows에서 더 빠른 스크립트 실행 지원
     * Windows에서 가장 빠른 시스템 호출을 사용하여 Node.js API 최적화
          + 예: fs.readdir()가 Node.js보다 58% 빠름

Bun은 JavaScript 런타임 임

     * JavaScript, TypeScript, JSX 지원
     * tsc와 같은 명령줄 도구가 Bun 1.0보다 최대 2배 빠름
     * Bun Shell은 이제 Windows에서도 사용 가능한 크로스 플랫폼 쉘 이 되었음
          + ls, rm, cat 등의 코어 유틸리티 포함
          + JavaScript 및 TypeScript에서 Bun.$ API를 사용하여 쉘 실행 가능
     * Bun.Glob
          + 파일 및 문자열 매칭을 위한 내장 Glob API 제공
          + fast-glob 및 micromatch와 유사하지만 3배 빠른 문자열 매칭
     * Bun.Semver
     * semver 문자열 파싱 및 정렬을 위한 새로운 Semver API
     * node-semver 패키지와 유사하지만 20배 빠름
     * Bun.stringWidth()
          + 터미널에서 문자열의 가시적 너비 측정을 위한 새로운 API
          + ANSI 이스케이프 코드, 전각 문자, 그래피, 이모지 지원
     * server.url : Bun.serve()를 사용하여 생성된 HTTP 서버의 URL을 server.url 속성으로 얻을 수 있음
     * server.requestIP() : HTTP 요청의 IP 주소를 server.requestIP() 메서드로 얻을 수 있음
     * subprocess.resourceUsage() : Bun.spawn()을 사용하여 생성된 하위 프로세스의 CPU 및 메모리 사용량을 resourceUsage() 메서드로 액세스 가능
     * Node.js 호환성 향상
          + node:http2 클라이언트 API, Date.parse() 호환성 제공, 재귀적 fs.readdir() 지원 등 다양한 API 개선
          + Bun과 Node.js 간 IPC 가능
          + 일부 Undocumented Node.js API도 지원
     * Web API : WebSocket, performance.mark(), Brotli 압축을 사용한 fetch(), URL.canParse() 등의 Web 표준 API 지원

Bun은 npm 호환 패키지 관리자임

     * bun install을 사용하여 npm 패키지를 최대 29배 빠르게 설치 가능
     * 라이프사이클 스크립트, trustedDependencies, bun pm trust 등의 기능 개선

Bun은 JavaScript 번들러 임

     * bun build --target=node를 사용하여 Node.js에서 실행 가능한 코드 번들링 지원
     * --compile 플래그를 사용하여 단일 파일 실행 파일로 TypeScript 및 JavaScript 파일 컴파일 가능

Bun은 테스트 런너 임

     * Jest와 동일한 API를 지원하는 내장 테스트 모듈 제공
     * 새로운 expect() 매처 추가 및 모듈 목킹 지원

SQLite 지원 내장

     * better-sqlite3에 영감을 받은 API를 사용하여 SQLite 지원
     * 멀티-스테이트먼트 쿼리, 상세한 오류 메시지, 데이터베이스 임포트 및 내장 지원 개선

GN⁺의 의견

     * Bun은 Node.js와 호환성을 유지하면서 성능을 크게 향상시킨 JavaScript 도구 키트로, Windows 지원을 통해 더 넓은 개발자 커뮤니티에 접근할 수 있게 되었음.
     * 내장된 테스트 런너와 SQLite 지원은 개발자가 추가적인 도구 없이도 효율적으로 작업할 수 있도록 해줌.
     * Bun의 빠른 성능과 개선된 개발자 경험은 특히 대규모 프로젝트나 성능에 민감한 애플리케이션에서 두드러질 수 있음.
     * Bun이 제공하는 다양한 기능과 개선 사항에도 불구하고, Node.js 생태계의 광범위한 패키지와의 완벽한 호환성을 달성하기 위해서는 지속적인 개발과 커뮤니티의 피드백이 필요함.
     * Bun의 새로운 기능들이 기존의 Node.js 기반 도구와 어떻게 경쟁하거나 협력할 수 있는지에 대한 추가적인 분석이 필요함.

        Hacker News 의견

     * Bun의 인상적인 변화 목록
          + Bun은 Node.js의 이상적인 대안으로 보이며, Windows 지원에 시간을 할애한 것은 웹 개발 세계에서 종종 간과되는 부분임.
          + ""Bun on Windows passes 98% of our own test suite for Bun on macOS and Linux.""라는 말은 Windows 버전이 실패한 테스트를 포함하여 출시되었다는 의미인지, 아니면 오해인지에 대한 질문이 있음.
     * Bun의 매크로 기능
          + Bun이 번들 시간에 코드를 실행하는 기본적인 매크로 기능을 가지고 있다는 사실을 알게 됨. 이는 매우 흥미로운 기능임.
     * Bun과 Deno 사용 이유에 대한 의문
          + Bun과 Deno가 Node.js와의 호환성이 필수라는 것을 깨달았지만, VC 자금 지원이 있을 때 제품의 지속 가능성에 대한 의문이 있음.
          + Bun과 Deno가 Node.js와 같은 (다소 불완전한) 생태계에 속해 있음에도 불구하고, 이들을 사용해야 하는 명확한 이유가 무엇인지 확신할 수 없음.
     * Bun의 열렬한 팬
          + TypeScript와의 호환성으로 Bun을 처음 사용하게 되었고, 성능 때문에 계속 사용함.
          + Deno를 시도해봤지만 사용하기 어려웠고, 반면 Bun은 통합하기 쉽고 매우 즐거운 경험이었음.
     * Bun의 새로운 릴리스에 대한 평가
          + Bun의 비디오를 시청했지만, 차트가 명확하지 않아 이전 Bun 버전과 Node.js 중 어느 것과 비교하는지 알 수 없었음.
          + Bun을 부수 프로젝트에서 사용해본 경험은 좋았으며, 내장 API가 잘 작동함. Deno와 Node.js도 이러한 API의 일부를 채택하기를 바람.
          + Bun은 기본적으로 일부 텔레메트리를 수집함. 설치 스크립트에서 이에 대해 알리지 않으며, Bunfile 문서에서만 언급됨.
          + 사용자가 설치 중에 텔레메트리를 비활성화하는 방법에 대한 지침을 받고, 이를 선택적으로 사용할 수 있기를 바람.
          + Bun은 프로젝트의 .js 진입점과 런타임을 번들로 묶어 종속성이 없는 실행 파일을 생성하는 옵션을 제공함. 이는 사용자에게 단일 바이너리를 배포하고 싶을 때 유용하지만, 현재 파일 크기가 아직 상당히 큼 (GNU/Linux에서 작은 프로젝트의 경우 90MB 이상).
          + Bun이 특정 기능을 비활성화하여 더 작은 바이너리를 얻을 수 있는 옵션을 제공할지 궁금함.
          + Bun을 Haxe 타겟으로 사용해보고 있으며, Haxe를 TypeScript보다 선호하거나 기존 Haxe 프로젝트에 웹 서버를 추가하고 싶을 때 고려할 만한 선택임.
     * Bun 팀에 대한 요청
          + 명확한 지원 정책/수명 주기 타임라인을 제공해달라는 요청이 있음. 버전 및 모듈 간 안정성 보장에 대한 명확성도 중요함.
     * Bun 개발자의 참여
          + Bun 개발자가 질문에 답변할 준비가 되어 있음을 밝힘. Bun v1.1이 아직 컴파일 중이며, 완료되기까지 약 20분이 더 걸릴 것임을 언급함.
     * Bun의 안정성에 대한 질문
          + Bun을 여러 프로젝트에서 세 번 시도해봤지만, 런타임이나 패키지 설치 중에 세그먼트 폴트(segmentation fault)가 발생하는 경험을 함.
     * Bun의 수익 모델과 VC 자금
          + Bun의 수익 모델이 무엇인지, VC 자금이 소진되면 어떻게 될지에 대한 질문이 있음.
"
"https://news.hada.io/topic?id=14150","신용카드 리워드 프로그램의 구조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           신용카드 리워드 프로그램의 구조

신용카드 보상 프로그램의 해부학

     * 신용카드 보상 프로그램은 사용자에게 재미를 주면서도 대규모에서 예측 가능한 통계적 특성을 가지는 고빈도 수학적 계산을 위한 표를 만드는 데 능숙해질 수 있는 몇 안 되는 기회 중 하나임.
     * 이 글에서는 신용카드 보상 포인트를 얻기 위해 용을 쓰러뜨리는 것과 같은 상황을 다루며, 카드 발급사가 게임을 운영하며 사용자들이 자신들을 용으로 착각하는 것에 대해 즐거워함.

인터체인지를 환급하여 지갑 점유율 획득

     * 신용카드는 다양한 방법으로 수익을 창출하지만, 인터체인지 수수료가 가장 중요한 수익원임.
     * 인터체인지는 카드를 받아들이는 사업체가 지불하는 수수료로, 신용카드 생태계의 여러 당사자들 사이에서 분배되어 고소득 고객의 지갑과 스마트폰에 로고를 넣고 지출 금액과 빈도를 늘리도록 유도함.
     * 인터체인지는 거래 금액에 기반한 비율 수수료와 거래당 수수료로 구성되며, 카드 제품의 등급에 따라 수수료가 달라짐.

모든 카드가 보상 카드가 아닌 이유

     * 지역에 따라 보상 프로그램의 균형이 다르며, 미국에서는 카드 수락 비용이 비싸고 보상 경제가 활발함.
     * 유럽에서는 규제에 의해 카드 수락 비용이 저렴하므로 보상이 미국만큼 흔하거나 유리하지 않음.
     * 미국에서는 다양한 사용자가 다양한 목적으로 신용카드를 사용하며, 일부 사용자는 신용카드를 주로 대출 수단으로 사용함.

보상 제품의 복잡성 스펙트럼

     * 가장 간단한 보상 제품은 '캐시백'이며, 사용자의 순 구매액에 대한 특정 비율을 적립하여 정기적으로 또는 사용자의 요청에 따라 명목상의 적립금을 실제 할인으로 전환함.
     * 이러한 보상 제품은 시간이 지남에 따라 변화하고, 예를 들어 특정 카테고리에서 더 높은 캐시백을 제공하는 등 더 복잡한 구조를 가지게 됨.

신용카드 수락에 관한 재미있는 사실

     * 많은 신용카드가 '공동 브랜드'로 발급되며, 이는 고객이 강한 충성도를 가지고 있는 기업의 이름을 담고 있음.
     * 공동 브랜드 카드는 매우 큰 사업이며, 카드에 명시된 기업이 자사의 가장 충성도 높은 고객과 일부 마진을 공유하는 것을 선택하는 경우도 있음.

더 복잡한 경우로 돌아가기

     * 카드 프로그램 디자이너는 높은 헤드라인 캐시백 숫자를 제시하면서도 인터체인지에서 일부 마진을 유지하고 싶을 수 있음.
     * 예를 들어, 특정 조건에 따라 더 높은 캐시백을 제공하는 카드를 만들 수 있으며, 이는 사용자가 카드를 선택적으로 사용하도록 유도함.

GN⁺의 의견

     * 신용카드 보상 프로그램은 소비자의 지출 습관에 영향을 미치고, 카드 사용을 유도하기 위해 다양한 전략적 보상을 제공함.
     * 이러한 프로그램은 소비자에게는 혜택을 제공하지만, 동시에 카드 발급사에게는 수익을 창출하는 복잡한 경제적 메커니즘을 가지고 있음.
     * 보상 프로그램의 복잡성은 소비자가 최적의 혜택을 받기 위해 다양한 카드와 프로그램을 비교하고 관리해야 하는 노력을 필요로 함.
     * 카드 발급사는 고객의 충성도를 높이고 장기적인 관계를 유지하기 위해 전략적으로 보상을 설계하고, 때로는 경쟁사의 고객을 끌어오기 위해 공격적인 프로모션을 진행하기도 함.
     * 이러한 프로그램은 소비자에게는 흥미롭고 유익할 수 있지만, 최적의 혜택을 얻기 위해서는 신용카드와 보상 프로그램에 대한 이해와 주의 깊은 관리가 필요함.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 보상 카드에 대한 토론:
               o 보상 카드를 사용할 때 상인은 일반 카드보다 더 높은 수수료를 부담함.
               o 모든 카드가 보상 카드가 아닌 이유에 대한 의문 제기.
               o 상인이 이 프로그램에 참여하는 이유에 대한 더 깊은 통찰력이 필요함.
          + 비즈니스 운영자의 관점:
               o 신용카드 수수료는 모든 상품의 소매 가격에 포함됨.
               o 낮은 수수료 카드나 현금, 수표로 결제 시 높은 수수료 고객을 보조함.
               o 현금이나 수표로 결제할 경우 2% 할인을 제공함.
               o 높은 보상의 신용카드를 사용하고 매달 전액 상환하는 것이 이득임.
          + 투자자 관계에 대한 질문:
               o 서비스 제공업체에 충분한 지분을 보유하고 있을 때 투자자 관계를 통해 문제를 해결하는 것이 가능한지에 대한 의문.
          + 신용카드 산업에 대한 통찰:
               o 'Acquired' 팟캐스트는 신용카드 산업의 역사와 작동 방식을 다룸.
               o 고급 신용카드 제공업체들이 상인으로부터 수익을 추출함.
               o 이로 인해 모든 소비자의 가격 인상으로 이어짐.
               o 이 시스템이 부유한 소비자에게 이득을 주고 가난한 소비자에게 손해를 주는 방식에 대한 비판.
          + 신용카드 보상 프로그램에 대한 분석:
               o 스프레드시트 기술을 이용한 신용카드 가입 보너스 최적화에 대한 토론.
               o 금융 산업에서 스프레드시트 기술을 활용할 수 있는 가능성에 대한 의문.
          + 암호화폐와 신용카드의 비교:
               o 암호화폐가 신용카드의 대체재로 자리 잡지 못한 이유에 대한 분석.
               o 소비자에게 매력적인 혜택을 제공하기 위해 수수료가 필요함.
          + 유럽 연합(EU)의 신용카드 보상 감소:
               o EU에서는 2015년에 교환 수수료를 크게 제한함.
               o 신용카드 경제가 국가마다 크게 다름.
          + 개인의 신용카드 사용 경험:
               o 2% 현금 환급 신용카드 사용자의 경험 공유.
               o 보상 카드의 일반적인 사용에 대한 비판.
          + 글쓰기 스타일에 대한 의견:
               o 글쓴이의 긴 문장과 장황한 스타일에 대한 비판.
          + 수수료 없는 신용카드에 대한 희망:
               o 현금 사용자와 일부 카드 사용자가 다른 카드 사용자와 신용카드 회사에 부당하게 이익을 제공하는 현 시스템에 대한 비판.
               o 거의 제로 비용으로 신용카드 거래를 처리할 수 있는 방법에 대한 탐색.
"
"https://news.hada.io/topic?id=14087","pgwire - PostgreSQL Wire Protocol의 Rust 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              pgwire - PostgreSQL Wire Protocol의 Rust 구현체

     * 자신의 데이터 서비스에 Postgres 호환 억세스 레이어를 추가하기 위한 라이브러리
     * PostgreSQL 와이어 프로토콜을 구현하며, PostgreSQL 호환 서버 및 클라이언트를 작성하는 데 필수적인 API를 제공
     * 사용방법 (서버/백엔드)
          + Startup Processor 와 Query Processor 두개의 키 컴포넌트를 구현해야함
          + SimpleQueryHandler 를 추가하면 psql 과 호환됨
          + ExtendedQueryHandler 를 추가하면 각종 언어용 드라이버 및 Prepared Statement, 바이너리 인코딩등을 지원
     * pgwire를 사용중인 프로젝트들 :
          + GreptimeDB: 클라우드 네이티브 시계열 데이터베이스
          + risinglight: 교육용 OLAP 데이터베이스 시스템
          + PeerDB : Postgres 안팎으로 10배 빠른 데이터 이동을 가능하게 하는 Postgres 최초의 ETL/ELT
          + CeresDB : AntGroup의 고성능 분산형 클라우드 네이티브 시계열 데이터베이스
          + dozer : 데이터 제품을 구축, 배포 및 유지 관리하기 위한 실시간 데이터 플랫폼
"
"https://news.hada.io/topic?id=14157","코볼드 편지: HTML 이메일의 위험성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         코볼드 편지: HTML 이메일의 위험성

코볼드 편지

     * HTML 이메일을 기술적으로 다루어야 하는 사람들은 클라이언트들의 불일치하는 구현 때문에 직장을 그만두고 싶거나 모든 메일 클라이언트에 불을 지르고 싶은 순간에 이르렀을 것임.
     * HTML 이메일은 단순히 짜증의 원인만이 아니라 심각한 보안 위험도 될 수 있음.
     * 상사가 대량의 돈을 송금하라는 이메일을 전달했다고 상상해보면, CEO 사기에 대해 들어본 적이 있으므로 이메일이 정말 상사로부터 온 것인지 확인함.
     * 이메일이 상사로부터 온 것이 맞고, 회사에서 그렇게 한다면 암호화 서명까지 되어 있을 수 있음.
     * 그러나 여전히 확신이 서지 않아 상사에게 전화하여 이메일의 진위를 확인함.
     * 상사가 확인해주면 돈을 송금함.
     * 그러나 이것이 사기가 아니었다면 이 기사는 여기서 끝날 것임.

썬더버드

     * 이 문제는 2024년 3월 5일에 모질라에 보고되었고, 계획된 출시 날짜와 다음 섹션의 초안이 2024년 3월 20일에 모질라에 전달됨.
     * 가능한 완화 방안이 논의되었지만, 나중에야 구현될 예정임.
     * 썬더버드에서 이를 이용하는 것은 간단함. 썬더버드는 이메일을 <div class=""moz-text-html"" lang=""x-unicode""></div>로 감싸고 그 외에는 변경하지 않음.
     * 이메일을 전달할 때, 인용된 이메일은 또 다른 <div></div>로 감싸져 DOM에서 한 단계 아래로 이동함.
     * 이를 고려하면 다음과 같은 개념 증명이 나옴:

<!DOCTYPE html>
<html>
  <head>
    <style>
      .kobold-letter {
        display: none;
      }
      .moz-text-html>div>.kobold-letter {
        display: block !important;
      }
    </style>
  </head>
  <body>
    <p>This text is always visible.</p>
    <p class=""kobold-letter"">This text will only appear after forwarding.</p>
  </body>
</html>

     * 이메일에는 항상 보이는 텍스트와 display: none;으로 숨겨진 텍스트가 포함되어 있음.
     * 이메일을 전달하면 숨겨진 텍스트가 갑자기 새 수신자에게만 보이게 됨.

아웃룩 웹

     * 이 문제는 2024년 3월 5일에 마이크로소프트에 보고되었고, 계획된 출시 날짜와 다음 섹션의 초안이 2024년 3월 20일에 마이크로소프트에 전달됨.
     * 마이크로소프트는 2024년 3월 26일에 즉각적인 조치를 취하지 않기로 결정하고 보고서를 마감함.
     * 아웃룩 웹(OWA)에서 상황은 조금 더 복잡함. 이메일은 <div class=""rps_78fa""></div>로 감싸져 있지만, 정확한 클래스 이름은 변경될 수 있음.
     * 이메일의 CSS가 웹메일러의 스타일에 영향을 주지 않도록, 아웃룩은 이메일의 모든 id와 클래스 앞에 x_를 붙이고 CSS를 조정함.
     * 이를 고려하면 다음과 같은 개념 증명이 나옴:

<!DOCTYPE html>
<html>
  <head>
    <style>
      .kobold-letter {
        display: none;
      }
      body>div>.kobold-letter {
        display: block !important;
      }
    </style>
  </head>
  <body>
    <p>This text is always visible.</p>
    <p class=""kobold-letter"">This text will only appear after forwarding.</p>
  </body>
</html>

     * 이메일을 OWA에서 표시할 때 CSS는 다음과 같이 보임:

<style>
  <!--
  .rps_78fa .x_kobold-letter  {display:none}
  .rps_78fa > div > div > .x_kobold-letter  {display:block!important}
  -->
</style>

     * 이메일을 전달한 후, 코볼드 편지는 또 다른 <div>로 감싸지고 CSS가 다시 업데이트됨.

지메일

     * 이 문제는 2024년 3월 5일에 구글에 보고되었고, 계획된 출시 날짜와 다음 섹션의 초안이 2024년 3월 20일에 구글에 전달됨.
     * 지메일은 기술적으로 코볼드 편지에 취약하지 않음. 왜냐하면 이메일을 전달할 때 모든 스타일을 제거하기 때문임.
     * 이메일을 전달할 때 CSS가 제거되기 전까지는 CSS로 숨겨진 코볼드 편지가 자동으로 나타나게 됨.

이전 연구

     * 이러한 가능성이 있는 것은 놀랍거나 새로운 것이 아님.
     * 비슷한 문제들이 과거에 보고된 적이 있음.

전망

     * 사용자는 HTML 이메일을 완전히 비활성화하거나 제한된 모드에서 보는 것으로 코볼드 편지를 완화할 수 있음.
     * 이메일 클라이언트에 대해서는 완화를 구현하기 어려움. <style>의 사용을 방지하는 것은 문제를 해결할 수 있지만, 이메일 생태계에서 이미 존재하는 많은 솔루션을 깨뜨릴 수 있음.
     * 안타깝게도 가까운 미래에 이메일 클라이언트들이 견고한 완화책을 구현할 것으로 기대하기는 비현실적임.

GN⁺의 의견

     * 이 기사는 HTML 이메일의 취약성을 보여주며, 특히 이메일이 전달될 때 내용이 변할 수 있는 '코볼드 편지' 공격에 대해 설명함. 이는 이메일 사용자들에게 보안에 대한 경각심을 불러일으키는 중요한 정보임.
     * 이메일 클라이언트들이 CSS를 다루는 방식에 따라 보안 취약점이 발생할 수 있음을 보여주며, 사용자와 개발자 모두에게 보안에 대한 주의를 촉구함.
     * 이러한 공격은 사용자가 신뢰하는 소스로부터 온 것처럼 보이기 때문에 특히 위험함. 이는 이메일을 통한 소통에 있어서 항상 경계해야 할 필요성을 강조함.
     * 기술적인 관점에서, 이메일 클라이언트 개발자들은 이러한 공격을 방지하기 위해 CSS 처리 방식을 개선해야 할 필요가 있음. 그러나 이는 기존의 이메일 디자인과 호환성 문제를 야기할 수 있어, 적절한 균형을 찾는 것이 중요함.
     * 이 기사는 새로운 기술이나 오픈소스에 관한 것은 아니지만, 이메일 보안과 관련된 기술을 도입할 때 고려해야 할 사항들을 제시함. 이메일 클라이언트 개발자들은 사용자의 보안을 강화하면서도 사용성을 유지할 수 있는 방법을 모색해야 함.

        Hacker News 의견

     *

     “However, you are still not convinced, so you call your manager to ensure that the email is legit. He confirms, so you transfer the money.”
          + 이 댓글은 이메일을 통한 금전 이체 요청에 대한 의심이 제기될 때, 단순히 ""이 이메일을 보냈느냐""고 묻는 것이 아니라, ""정말로 이렇게 돈을 이체하길 원하는가""와 같이 구체적으로 물어봐야 한다는 점을 강조함. 이러한 대화를 통해 공격이 실패할 가능성이 높아질 것이라는 의견을 제시함. 또한, 기사에서 설명하는 공격 시나리오가 성공하기 위해선 매우 특정하고 좁은 상황이 필요하다고 지적하며, 이러한 복잡한 공격이 실제로 성공할 가능성에 의문을 표함.
     * The other day I was discussing the design for an ""update"" email that our designer was putting together...
          + 이 댓글은 이메일 디자인에 대한 경험담을 공유함. 디자이너가 만든 이메일의 그래픽 헤더 때문에 제목을 보려면 스크롤을 내려야 하는 문제를 지적하고, 이메일이 포워딩될 때 모바일 버전에서 데스크톱 버전으로 변환되는 것에 대해 놀라움을 표현함. 이메일에 CSS가 사용되는 것 자체가 불필요하다고 비판하며, 마크다운과 같은 간단한 텍스트 마크업이 도입되지 않은 현 상황에 대해 불만을 표함.
     * I long argued that we should use markdown (without the inline HTML) or a similar simple text markup...
          + 이 댓글은 이메일에서 HTML 대신 마크다운이나 비슷한 간단한 텍스트 마크업을 사용해야 한다고 주장함. 이렇게 하면 이메일 클라이언트가 리치 텍스트로 표시할지 일반 텍스트로 표시할지 결정하기 쉬워지며, 사용자가 필요로 하는 대부분의 포맷팅을 지원할 수 있다고 설명함. 마케팅 이메일에 사용되는 고급 HTML은 중요하지 않다는 의견을 제시함.
     * The real risk to your organisation is that the developer you assign to generate HTML emails will go mad...
          + 이 댓글은 HTML 이메일을 생성하는 개발자가 아웃룩의 다른 렌더링 때문에 미쳐버릴 수 있다는 농담을 하며, 이메일을 통한 공격이 흥미롭다고 언급함.
     * Wouldn’t this be fixable by not allowing Stylesheets but only inline style attributes on the tags?
          + 이 댓글은 이메일에서 스타일시트를 허용하지 않고 태그에 인라인 스타일 속성만 사용하는 것으로 문제를 해결할 수 있을지 제안함. 이메일 클라이언트가 스타일시트를 인라인 스타일로 자동 변환하는 단계를 포함시키면 사용성이 향상될 수 있다고 주장함.
     * HTML in email shouldn't be as big of a nightmare as it is.
          + 이 댓글은 이메일에서 HTML이 큰 악몽이 되어서는 안 된다고 언급함. 모든 이메일 클라이언트가 텍스트 대 HTML을 확인하고 HTML일 경우 렌더링 엔진을 웹킷으로 전환하면 문제가 쉽게 해결될 수 있다고 주장함. 이에 대한 표준이 제안되었는지 궁금해함.
     * Some possible mitigations from the top of my head (maybe ineffective):
          + 이 댓글은 이메일을 통한 공격을 완화할 수 있는 몇 가지 방법을 제시함. 숨겨진 요소에 대한 경고, 포워딩 시 메시지의 모습을 계산하여 크게 달라질 경우 확인을 요청하는 것 등이 그 예임.
     * When efail came out, I wrote a blogpost about the security risks of HTML mail.
          + 이 댓글은 HTML 이메일의 보안 위험에 대해 블로그 포스트를 작성했다고 언급함. HTML 이메일 사양이 오래되었고 보안 고려 사항이 거의 없으며, 안전한 HTML 이메일은 HTML의 부분집합이어야 하지만 그 부분집합이 무엇인지 아무도 정의하지 않아 보안 결함이 끊임없이 발생한다고 지적함.
     * This is really clever!
          + 이 댓글은 HTML 이메일에서 CSS를 사용하여 메시지가 포워딩된 후에만 특정 텍스트가 보이게 하는 것이 매우 영리하다고 칭찬함. 이로 인해 검증된 이메일의 신뢰성에 큰 위협이 될 수 있다고 언급함. 또한, 이메일 클라이언트가 이메일의 내용을 추가 HTML 태그로 감싸고 CSS 및 클래스 이름을 수정하는 것에 대해 궁금증을 표현함. 이메일 클라이언트가 HTML 이메일을 렌더링하기 위해 샌드박스된 iframe을 사용하지 않는 이유에 대해 의문을 제기함.
"
"https://news.hada.io/topic?id=14148","Portr - 소규모 팀을 위한 ngrok 대체제 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Portr - 소규모 팀을 위한 ngrok 대체제 오픈소스

     * 로컬 HTTP 및 TCP 연결을 공용 인터넷에 노출할 수 있는 터널 솔루션
          + 내부에서 SSH 원격 포트 포워딩을 사용하여 연결을 안전하게 터널링
     * 주로 공개 URL에 개발 서버를 노출하려는 소규모 팀을 위해 설계됨
          + 팀/사용자 관리를 위한 어드민 대시보드 제공
     * Portr 인스펙터를 통해서 Request를 검사하고 리플레이 가능

   터널링 소프트웨어만 모아둔 Awesome Tunneling

   생각보다 굉장히 많네요.... 비교적 간단해서 그런걸까요.
"
"https://news.hada.io/topic?id=14137","'라벤더': 가자 지구 폭격을 지휘하는 이스라엘의 AI 기계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   '라벤더': 가자 지구 폭격을 지휘하는 이스라엘의 AI 기계

'라벤더': 이스라엘의 가자 지구 폭격을 지휘하는 AI 시스템

     * 이스라엘 군은 '라벤더'라는 인공지능 기반 프로그램을 개발하여 가자 지구의 팔레스타인인들을 대상으로 한 무차별 폭격에 중요한 역할을 함.
     * 이 시스템은 인간의 감독 없이 수만 명의 가자 주민들을 암살 대상으로 표시하며, 피해자 수용 정책이 허용적임.
     * 라벤더는 하마스와 팔레스타인 이슬람 지하드(PIJ)의 군사 조직원들을 잠재적 폭격 대상으로 표시하도록 설계됨.

STEP 1: 대상 생성

     * 라벤더는 가자 지구 거주민 대부분에 대한 대량 감시 시스템을 통해 수집된 정보를 분석하고, 각 개인이 하마스 또는 PIJ의 군사 조직원일 가능성을 평가하여 순위를 매김.
     * 이 AI 시스템은 알려진 군사 조직원의 특징을 학습하고 일반 인구 중에서 이러한 특징을 찾아내어 평가함.
     * 라벤더는 약 37,000명의 팔레스타인인을 하마스의 의심스러운 '군사 조직원'으로 표시하여 암살 대상으로 함.

STEP 2: 가족 집과 대상 연결

     * 이스라엘 군은 자동화된 시스템을 사용하여 대상을 가족 집에 연결하고, 대상이 가족 집에 들어갈 때 폭격을 신호하는 '대디 어디 있어?'와 같은 추가 자동화 시스템을 사용함.
     * 이러한 시스템은 대상을 지속적으로 감시하고 가족 집에 발을 들여놓는 즉시 공격할 수 있도록 함.

STEP 3: 무기 선택

     * 라벤더에 의해 암살 대상으로 표시된 후, 군인들은 대상이 남성인지 확인하고, 추적 소프트웨어가 대상을 가정에서 찾아내면 폭격에 사용할 탄약을 선택함.
     * 저가의 '멍청한' 폭탄은 정밀 유도 폭탄보다 더 많은 부수적 피해를 일으킬 수 있으며, 주로 하위 조직원을 암살하는 데 사용됨.

STEP 4: 민간인 사상자 승인

     * 초기 전쟁 주간 동안, 이스라엘 군은 라벤더에 의해 표시된 각 하위 조직원을 암살할 때 최대 15명 또는 20명의 민간인을 죽일 수 있도록 허용함.
     * 이러한 '부수적 피해 정도'는 모든 의심스러운 하위 조직원에게 광범위하게 적용되며, 그들의 계급, 군사적 중요성, 나이와 관계없이 적용됨.

GN⁺의 의견

     * 라벤더 시스템은 AI 기술을 군사 작전에 적용한 사례로, 이는 미래 전쟁에서 AI의 역할이 증가할 것임을 시사함.
     * 인공지능이 결정하는 암살 대상 목록에 의존함으로써 발생하는 윤리적 문제와 잘못된 타겟팅으로 인한 민간인 피해 가능성이 높음.
     * 이 기술이 전쟁의 양상을 어떻게 변화시킬지에 대한 깊은 논의가 필요하며, 국제법과 전쟁 법규에 대한 새로운 해석이 요구됨.
     * 라벤더와 같은 시스템의 도입은 군사적 효율성을 높일 수 있지만, 동시에 무고한 민간인의 생명을 위험에 빠뜨릴 수 있는 이중적인 면모를 가짐.
     * 이 기술이 향후 국제 사회에 어떤 영향을 미칠지, 그리고 이에 대한 규제나 대응책이 마련될 필요가 있음.

        Hacker News 의견

     * 연구자들은 이미 오래전에 간접적인 연관성을 바탕으로 한 개인의 타겟팅에 대한 우려를 제기했음. 이러한 시스템은 원래 감시 목적으로 사용되었으나, 이제는 단순한 감시를 넘어 사람을 실제로 죽이는 데 사용되고 있음.

     국제 인도법은 무장 단체의 ""전투원""이 아닌 사람들을 죽이는 것을 금지하고 있음. 오직 ""직접적인 적대 행위에 지속적으로 참여하는"" 사람들만이 공격 대상이 될 수 있음. 나머지 민간인들은 직접적인 적대 행위에 참여할 때만 타겟이 될 수 있음.
     * 인공지능(AI)이 사전에 사람을 죽이는 결정을 내리는 아이디어에 대해 우려를 표함. 이 경우에는 인간의 승인이 있었지만, 인간 개입 없이 로봇에 의해 사람이 죽는 상황까지 한 걸음 떨어져 있음을 지적함.

     AI 없이 이스라엘이 더 무작위로 목표를 선정했을지, 아니면 전혀 폭탄을 떨어뜨리지 않았을지에 대한 대안을 고민함. 전쟁 상황에서 무고한 사람들이 죽는 것은 피할 수 없는 일임.
     * 많은 사람들이 제목만 보고 내용을 읽지 않을 것이라고 지적하며, 기사의 두 번째 단락을 주목하라고 권함.

     AI 시스템인 Lavender의 사용과 함께, 이스라엘 군 관계자들이 팔레스타인 민간인들의 대규모 사망을 허용했다고 주장함.
     * Serial 팟캐스트의 현재 시즌을 들어보라고 제안함.

     AI가 ""준"" 운영자들을 신속하게 식별하여 타겟팅하는 데이터 처리 방식은 2001년에 사용된 방식과 다르지 않음. 결정은 AI가 아닌 인간에 의해 내려짐.
     * 이스라엘의 행동을 부정적으로 묘사하는 이야기임에도 불구하고, 적어도 군사적 목표물을 공격하려는 시도로 읽힘.

     이스라엘은 기자, 의료진, 구호 활동가 등을 목표로 삼아 가자 지구의 생활을 불가능하게 만드는 것을 목표로 함.
     * 이 기술의 정확성에 대해 의문을 제기하며, 결과보다는 선진 기술로 보이는 것에 더 관심이 있는 것 같다고 지적함.

     권력자들이 ""정확함""보다는 자신들의 편견을 확인할 정당성을 갖는 것에 더 관심이 있음을 증명함.
     * 이스라엘 국방군(IDF)이 군사 건물이나 군사 활동 중인 하마스 운영자들만을 죽이는 데 관심이 있었던 것은 아니라고 언급함.

     IDF는 가족의 집을 폭격하는 것을 주저하지 않았으며, 시스템은 이러한 상황에서 그들을 찾도록 구축됨.
     * AI의 사용이 IDF의 목표 달성에 어떤 이득을 가져다주었는지에 대한 의문을 제기함.

     AI의 지속적인 사용은 전쟁 범죄에 연루된 개인들에게 피난처를 제공하기 때문에 지지받고 있을 수 있음.
     * The Guardian도 이 이야기를 표지 기사로 다루고 있으며, 사전에 세부 사항을 제공받았음.

     이러한 이야기들은 공공의 이익에 해당하며, 토론이 이루어지기를 바람.
     * 한 소식통은 인간 직원들이 기계의 결정에 대해 ""고무 도장"" 역할만 했다고 언급함.

     자동화의 아이러니에 대한 논문을 떠올리게 함: 대부분의 작업이 자동화되면 인간의 감독은 거의 쓸모가 없어짐.
"
"https://news.hada.io/topic?id=14168","V8 Sandboxandbox

     * V8 샌드박스는 V8 엔진을 위한 경량, 인-프로세스 샌드박스
     * 이제 실험단계를 벗어나 Chrome의 취약점 보상 프로그램(VRP)에 포함됨
          + 아직 해결해야 할 보안 문제가 있으며, Chrome 123 버전은 샌드박스의 ""베타"" 릴리스로 간주될 수 있음

동기

     * 메모리 안전성은 여전히 중요한 문제로, 지난 3년간 발견된 모든 Chrome 익스플로잇은 V8의 메모리 손상 취약점에서 시작됨
     * 이러한 취약점 중 60%는 V8에서 발생했으나, 대부분은 ""전형적인"" 메모리 손상 버그가 아닌 미묘한 논리 문제임
     * 현재 메모리 안전성 솔루션 대부분은 V8에 적용되지 않으며, Rust 같은 메모리 안전 언어로의 전환 또는 메모리 태깅과 같은 하드웨어 기능도 V8의 보안 도전에 도움이 되지 않음

V8 (힙) 샌드박스

     * 샌드박스의 기본 아이디어는 V8의 힙 메모리를 격리하여 메모리 손상이 프로세스의 다른 부분으로 ""확산""되지 않도록 하는 것
     * 하드웨어 지원으로 구현될 수 있지만, 현재 적합한 하드웨어 기능이 없어 소프트웨어 기반으로 구현됨
     * 샌드박스는 모든 외부 메모리에 접근할 수 있는 데이터 타입을 ""샌드박스 호환"" 대안으로 대체함
     * 샌드박스 내부의 V8 힙만이 샌드박스 안에 있으며, 이는 WebAssembly의 샌드박싱 모델과 유사

성능

     * 샌드박스 접근법의 주요 장점은 기본적으로 비용이 적게 든다는 것
     * 샌드박스로 인한 오버헤드는 주로 외부 객체에 대한 포인터 테이블 간접 참조에서 발생하며, 현재 오버헤드는 일반적인 워크로드에서 1% 미만

테스팅

     * 보안 경계에 대한 테스트 가능성은 실제로 보안 보장이 실제로 유지되는지 수동 및 자동으로 테스트할 수 있는 능력을 의미함
     * V8 샌드박스는 명확한 공격자 모델, 공격자를 모방하는 방법, 보안 경계가 실패했을 때 자동으로 판단하는 방법을 모두 충족함

사용

     * V8 샌드박스는 빌드 시간에 v8_enable_sandbox 빌드 플래그를 사용하여 활성화/비활성화해야 함.
     * 64비트 시스템에서만 사용 가능하며, 현재 1테라바이트의 가상 주소 공간을 예약해야 함.
     * V8 샌드박스는 이미 약 2년 전부터 Android, ChromeOS, Linux, macOS, Windows의 64비트 버전 Chrome에서 기본적으로 활성화됨.

결론

     * V8 샌드박스는 프로세스의 다른 메모리에 영향을 미치는 V8의 메모리 손상을 방지하기 위해 설계된 새로운 보안 메커니즘
     * 현재의 메모리 안전 기술은 최적화된 JavaScript 엔진에 대부분 적용되지 않지만, V8 샌드박스 공격 표면을 보호하는 데에는 효과적임
     * 샌드박스는 메모리 안전성을 향한 필수적인 단계임

GN⁺의 의견

     * V8 샌드박스는 메모리 손상 취약점에 대한 현대적인 대응책으로, 기존의 메모리 안전 기술이 해결하지 못하는 문제에 대한 해답을 제공함
     * 이 샌드박스는 JavaScript 엔진의 복잡성을 고려할 때, 보안 경계를 더욱 강화하고, 메모리 안전성을 향상시키는 중요한 역할을 함
     * 샌드박스의 성능 오버헤드가 낮다는 점은 개발자들에게 매력적일 수 있으며, 이는 샌드박스를 널리 채택하는 데 도움이 될 것임
     * 그러나 샌드박스 기술이 완전히 새로운 보안 취약점을 도입할 가능성도 있으며, 이는 지속적인 모니터링과 테스트를 통해 관리되어야 함
     * 샌드박스의 효과적인 구현은 공격자가 시스템의 다른 부분으로의 메모리 손상 확산을 방지하는 데 중요한 역할을 하며, 이는 웹 보안을 강화하는 데 기여할 것임
"
"https://news.hada.io/topic?id=14088","내 RGB를 맞혀봐: Guess my RGB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내 RGB를 맞혀봐: Guess my RGB

     * ""Guess My RGB""는 사용자가 슬라이더를 조정하여 배경의 RGB 색상을 맞추는 게임임.
     * 게임은 사용자가 색상 이론과 RGB 색상 모델에 대한 이해를 높일 수 있는 재미있는 방법을 제공함.
     * 이 게임은 GitHub와 Mastodon 링크를 통해 소셜 미디어에서도 공유될 수 있음.
"
"https://news.hada.io/topic?id=14094","SSPL(Server Side Public License)은 나빠요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SSPL(Server Side Public License)은 나빠요

SSPL이 나쁜 이유

     * SSPL(Server Side Public License)은 모든 사용자, 기업, 그리고 일반적으로 커뮤니티에게 끔찍한 라이선스임
     * SSPL 라이선스 제품은 오픈소스가 아니며, 클라우드 및 관리 서비스 경쟁자들을 죽이고, 호스팅 가격을 상승시키며, 오픈소스를 죽이는 것을 목표로 함
     * SSPL의 목적은 큰 회사들과 싸우기보다는 투자자들에게 돈을 돌려주는 것에 더 가까울 수 있음

SSPL이란 무엇인가

     * SSPL은 2008년 MongoDB, Inc에 의해 도입되어 MongoDB를 사용하는 것을 제한하기 위한 라이선스임
     * Elasticsearch, Kibana, Graylog과 같은 제품들도 이제 SSPL 라이선스를 사용함
     * 제13조에 따르면, 제품을 직접 고객에게 제공하고자 할 경우 ""서비스 소스 코드""를 공개적으로 제공해야 함

SSPL이 모두에게 나쁜 이유

     * SSPL은 몇몇 악의적인 클라우드 회사들이 커뮤니티에 기여하지 않고 이익을 내는 것을 방지하기 위한 좋은 해결책으로 제시되었지만, 실제로는 자유에 대한 위협이자 경쟁자를 죽이는 라이선스임
     * 이 라이선스는 오픈소스였던 제품을 '무료'라는 거짓된 정신 뒤에 숨겨 상업용 제품에 가두는 것에 불과. 이제 이러한 소프트웨어를 ""Freemium"" 소프트웨어라고 불러야 할지도
     * MongoDB, Elasticsearch, Kibana, Graylog은 더 이상 오픈소스 제품이 아니며, 이들 회사는 이제 고객에게 제품을 제안할 수 있는 사람을 완전히 결정할 수 있음. 이는 경쟁자를 죽이는 것이 됨
     * 경쟁자 없이도 자체 클라우드 호스팅 솔루션을 제공할 수 있게 되었으며, 소스 코드를 공개하지 않고, 그들이 정의한 수수료로 경쟁과 혁신을 죽일 수 있음
     * 이는 고객인 우리에게는 더 이상 클라우드 제공업체를 선택할 수 있는 권한이 없다는 것을 의미
     * 기계적으로 호스팅 가격은 인상될 것이고 우리의 유일한 선택은 자체 인프라에서 호스팅 부분을 관리할 전담팀을 두는 정도임. 바로 지난 몇년간 클라우드 호스팅 솔루션들로부터 피하려고 했던 것들

SSPL을 사용하는 회사들

     * MongoDB 제품은 2018년부터 SSPL 라이선스를 사용하고 있으며, MongoDB, Inc가 그 배후에 있음
     * Elasticsearch 제품은 2021년부터 SSPL 라이선스를 사용하고 있으며, Elastic NV가 그 배후에 있음
     * Graylog 제품은 2020년부터 SSPL 라이선스를 사용하고 있으며, GrayLog, Inc.가 그 배후에 있음

우리가 스스로에게 물어봐야 할 몇 가지 질문들

     * 오픈소스를 더 이상 사용하지 않는 회사가 어떻게 다른 이들에게 ""커뮤니티에 환원""하라고 요구할 수 있는가?
     * 자신들의 클라우드 서비스 소스 코드를 공개하지 않는 회사가 어떻게 다른 이들에게 소스 코드를 공개하라고 요구할 수 있는가?
     * 비오픈소스 라이선스를 사용하면서 오픈소스가 자신들의 DNA의 일부라고 선언하는 회사는 어떻게 그럴 수 있는가?
     * 3000명이 넘는 직원 중 몇 명이 자신의 업무와 소스 코드를 커뮤니티와 공유하는가?(스포일러: 훨씬 적습니다)
     * 커뮤니티와 공유하고자 하는 기술 기업인가, 아니면 투자자의 수익을 늘리고자 하는 세일즈 기업인가?

SSPL에 대한 잘못된 주장들

     * ""나는 클라우드 제공자가 아니기 때문에 관련이 없다""는 주장은 사실 모든 이들이 이 문제에 관련이 있음을 인식해야 함
     * ""이 회사들은 생존을 위해 돈이 필요하다""는 주장은 오픈소스에서 돈이 나쁜 것은 아니지만, SSPL은 올바른 해결책이 아님을 이해해야 함
     * ""경쟁자들은 여전히 존재한다. SSPL은 협상 가능하다""는 주장은 실제로 시장을 통제하는 회사가 경쟁자의 가격과 조건을 정할 수 있게 됨을 의미함
     * ""SSPL은 큰 클라우드 행위자들과 싸우는 것이며, 작은 사업체에게 좋다""는 주장은 SSPL이 실제로 작은 경쟁자들을 파산시키고 사라지게 할 수 있음을 인식해야 함

오픈소스 프로젝트에 대한 조언

     * SSPL이 처음에는 좋은 해결책처럼 보일 수 있지만, 그 실수를 하지 말 것을 권장
     * 일부 클라우드 제공업체에 문제가 있다면 무시할 수 없으며 우리 모두가 함께 싸워야 함. 오픈소스 세계에서 벗어나서 싸우는 것은 좋은 방법이 아님
     * 수익성이 필요하다면 엔터프라이즈 라이선스와 프리미엄 지원을 이용할 것: ""지원이 필요한 경우, 우리는 이를 위한 최고의 팀을 보유하고 있습니다.""
     * 카피레프트 라이선스를 사용하여 기업이 커뮤니티에 환원할 수 있도록 할 것: ""우리 코드를 수정하면 커뮤니티와 공유하세요""
     * 그래도 SSPL 라이선스를 선택한다면.. 당신은 :
          + 많은 독립 기여자와 대기업 직원 기여자를 잃게 됨
          + 오픈소스 소프트웨어를 개선하기 위해 노력한 기여자를 배신함
          + 오픈소스 세계를 떠나 부분 유료화(Freemium) 소프트웨어를 개발하게 됨
          + 제품을 매우 나쁜 버즈와 연관시킴
          + 전 세계에 제품을 홍보하는 데 도움을 주는 수많은 다양한 플레이어의 혜택을 잃게 되어 프리미엄 지원의 필요성이 증가

   오픈소스 여서 선택할 수 있지만, 오픈소스 여서 선택지에서 배재할 때도 있지요.
   Aws에서 몽고db 가져다가 DynamoDB만든 것 때문에 나온 라이센스 일텐데, 오픈소스 좋아하시는 분들 보시기엔 미심쩍을 수 있겠네요.

   AGPL 과도 비교해보면 재미있을 것 같네요.
   https://sktelecom.github.io/guide/use/obligation/agpl-3.0/

   도메인명과 사이트명 SSPL is BAD 에서 보이듯이, 의도를 가지고 만들어진 웹사이트 입니다.
   비약이 어느 정도 심하기도 하고요. 아래 해커뉴스 의견들과 같이 보시기 바랍니다.

  Hacker News 의견

     * SSPL에 대한 원칙적인 반대 의견이 있지만, 그 배경에 대한 이해도 함께 존재함. 기사 13조에 대한 묘사가 객관적 분석보다는 선정적 의도를 가졌다는 비판도 있음.
          + MongoDB와 Elastic이 AWS가 자신들의 제품을 재포장하여 서비스로 제공하고 경쟁자가 될 것으로 예상하지 못했음. Elasticsearch가 사용하던 Apache 라이선스는 이를 허용했지만, 윤리적으로는 막았어야 했다는 의견.
          + AWS가 OEM 계약이나 파트너십을 통해 '윈-윈' 관계를 형성할 수도 있었지만, 그렇게 하지 않아 SSPL 같은 불쾌한 형태의 차단을 유발했다는 지적.
          + SSPL이 투자자들을 기쁘게 하기 위해 만들어졌다는 불만이 있지만, 오픈소스 소프트웨어라 하더라도 회사가 비영리를 목적으로 한 것은 아니므로, Elastic이나 MongoDB를 비난하고 AWS를 비난하지 않는 것에 대한 이해가 안 된다는 의견.
     * SSPL은 사용자에게 나쁜 것으로, SSPL이 독점을 촉진하고 커뮤니티 참여를 줄여 결국 모든 사용자에게 영향을 미친다는 주장.
     * 사람들이 돈을 벌고자 하는 것은 당연한 일이며, SSPL 프로젝트를 사용하지 않기로 선택할 수도 있음. SSPL 라이선스로 발행된 소프트웨어가 없는 것보다는 낫다는 관점 제시.
     * 현재의 생태계가 10년 전과 크게 달라졌으며, 소규모 회사들이 경쟁에서 살아남고 성장할 수 있는 길을 원한다는 의견. BSL(비즈니스 소스 라이선스)과 같은 라이선스가 완벽하지 않을 수 있지만, 건강한 중간길을 찾기 위한 노력으로 볼 수 있음.
     * SSPL에 대한 비판을 하면서 AGPL을 언급하지 않은 것이 이상하다는 의견. 자유 소프트웨어를 사용하고자 하지만 기여를 하고 싶지 않은 사람들에 대한 지적.
     * 어떤 한 쪽에 치우치지 않고, 각 경우에 따라 다르게 접근해야 한다는 의견. SSPL이 클라우드 거대 기업에 맞서 생존하려는 일부 회사들에게는 좋을 수 있지만, 기여자들을 이용하려는 일부 회사들에게는 나쁠 수 있음.
     * MongoDB, Elasticsearch, Graylog 제품을 고객에게 직접 제안하는 것이 금지되어 있음. SSPL의 '직접'이라는 단어가 법적인 논쟁의 여지를 제공하고, 이로 인해 사람들이 우려하는 부분이 있음.
     * FSL(Functional Source License)은 Apache 2.0이나 MIT로 2년 후에 자동으로 변환되는 좋은 대안 라이선스임. 간단하고, 소스를 공개하면서 SaaS 회사가 기능할 수 있는 합리적인 방법을 제공함.
     * SSPL이 2008년에 도입되었다는 잘못된 정보에 대한 정정. 실제로는 2018년에 도입됨.
     * 저작권의 미래에 대한 한 가지 차원적인 관점에 대한 비판.
"
"https://news.hada.io/topic?id=14192","항공 이미지를 기반으로 고객을 배제하는 주택 보험사들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     항공 이미지를 기반으로 고객을 배제하는 주택 보험사들

        Hacker News 의견

     * 현장 방문 필요성 감소를 위한 보험사의 원격 평가 활용
          + 보험사들이 고객의 보험 갱신 시 Google Maps나 지방자치단체의 GIS 사진을 통해 활동이나 건물을 확인하고, 고객 선언과 다른 점이 발견되면 보험 커버리지 검토 및 문서 수정을 요청함. 때로는 이로 인해 보험사가 커버리지를 제공하지 못하고 고객이 다른 곳으로 이동함.
     * 개인 정보 보호에 대한 우려에 대한 이해 부족
          + 보험사가 보험 가입 결정을 내리기 위해 실제 집 검사를 요구할 수 있으며, 집의 상태는 보험사의 중요한 관심사임. 이미 Google Maps에 공개된 지붕의 항공 사진이 왜 큰 문제인지 이해하기 어려움.
     * 보험 기술 회사 Verisk와 특허 소송
          + Verisk는 항공기와 특수 카메라를 사용해 지붕 사진을 찍는 회사를 소유하고 있었으며, EagleView와 특허 침해로 소송을 당하고 합의함. Verisk의 Xactware 플랫폼은 보험사가 클레임 지급액을 결정하는 데 사용되며, 클레임 처리 속도를 높이는 것이 목적임. 또한, 클레임 사기 방지를 위한 고도의 기술을 개발하는 부서도 있음.
     * 보험사의 임의적인 정책 비갱신에 대한 우려
          + 보험사가 소비자에게 구제 수단 없이 정책을 갱신하지 않는 것에 대해 우려하며, 보험은 안정성의 원천이 되어야 하며 불안의 원인이 되어서는 안됨.
     * 미국의 지붕 수명에 대한 놀라움
          + 미국에서 20년밖에 지속되지 않는 지붕을 설치하는 것에 대해 놀라움을 표함. 영국에서는 조부모가 기억하는 지붕을 다시 덮는 것을 고려하지 않으며, 100년이 지난 후에도 손상된 부분만 교체함. 350년 된 집도 원래 지붕의 일부를 여전히 사용함.
     * ""컴퓨터가 아니라고 말하는"" 디스토피아로의 질주
          + 최저임금을 받는 무력한 직원들에 의해 전달되는 컴퓨터에 의해 결정된 생활과 재정에 영향을 미치는 결정에 대한 우려. 건강보험 회사들이 주택보험 회사의 행동에서 영감을 받을 것이라는 우려와 함께, 드론 촬영으로 인한 보험 취소 가능성을 언급함.
     * 보험의 위험 정량화와 공정한 보호 비용 청구의 중요성
          + 위험을 정량화하고 그에 따라 공정하게 비용을 청구하는 것이 장기적으로 모두의 이익에 부합함. 일부 위험 커버리지가 너무 낮게 책정되어 있었으며, 보험사와 소비자 모두에게 불리한 결과를 초래하는 규제 기관의 뒤처진 대응을 지적함.
     * 2030년까지 매일 업데이트될 수 있는 위성 이미지와 프라이버시 문제
          + 위성 발사가 계획대로 진행된다면, 2030년까지 매일 고해상도로 갱신되는 이미지가 가능해질 것이며, 이는 매일 고해상도로 모니터링되는 재산에 대한 프라이버시 측면에서 ""오웰리언적""일 수 있음을 언급함.
"
"https://news.hada.io/topic?id=14173","OpenBSD 7.5 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             OpenBSD 7.5 출시

     * 다양한 커널 개선 사항이 포함되어 있으며, SMP 개선, Direct Rendering Manager 및 그래픽 드라이버 업데이트, VMM/VMD 개선 등이 있음
     * 사용자 공간의 새로운 기능과 버그 수정, 하드웨어 지원 및 드라이버 버그 수정이 이루어짐
     * 네트워크 하드웨어 지원이 강화되고 무선 네트워크 드라이버가 추가되거나 개선됨
     * 보안 개선 사항으로는 pinsyscalls(2) 도입, syscall(2) 지원 제거 등이 있음
     * 네트워크 스택 변경 사항으로는 IPv6 지원 강화, 소켓 및 라우팅 테이블 개선 등이 포함됨
     * 설치 프로그램, 업그레이드 및 부트로더 개선 사항이 있으며, 보안 개선을 위한 여러 조치가 취해짐
     * LibreSSL 버전 3.9.0과 OpenSSH 9.6, 9.7 버전이 포함되어 있으며, 여러 보안 수정 및 새로운 기능이 추가됨
     * 다양한 아키텍처에 대한 많은 사전 빌드 패키지가 제공됨

GN⁺의 의견

     * OpenBSD는 보안에 초점을 맞춘 운영 체제로, 이번 7.5 버전에서도 다양한 보안 개선 사항이 도입되어 사용자들에게 더 안전한 환경을 제공함.
     * 특히, pinsyscalls(2)의 도입은 시스템 호출을 더욱 안전하게 만들어, 보안에 민감한 애플리케이션 개발자들에게 중요한 업데이트가 될 수 있음.
     * 하드웨어 지원의 지속적인 개선은 다양한 장비에서 OpenBSD를 사용할 수 있게 하며, 특히 네트워크 장비와 관련된 드라이버 업데이트는 네트워크 엔지니어에게 유용함.
     * OpenSSH의 새로운 버전은 네트워크 보안에 중요한 역할을 하는데, 이번 업데이트에서는 ""Terrapin attack""을 방지하기 위한 프로토콜 확장이 포함되어 있어 사용자들의 데이터 전송이 더욱 안전해짐.
     * LibreSSL의 업데이트는 암호화 관련 애플리케이션 개발자들에게 중요한데, 이번 버전에서는 호환성과 보안성을 높이는 여러 변경 사항이 포함되어 있음.

        Hacker News 의견

     * 새로운 pinsyscalls(2)에 대해 궁금해하는 사람들은 OpenBSD의 보안 기능에 대한 설명이 담긴 웹사이트를 참조하라는 권장이 있음. 사용자는 OpenBSD를 외부에 노출된 시스템에 사용하며, GNU/Linux 배포판보다 훨씬 더 신뢰함. 그러나 때때로 비판적인 의견도 살펴보는 것이 중요하다고 강조함.
     * OpenBSD의 보안 모델에 대한 의견을 구함. 2024년 현재, OpenBSD가 최소화된 리눅스 배포판(예: Ubuntu Minimal, Debian Stable)보다 더 안전한지에 대한 비교가 어려움. 보안 전문가의 의견을 요청함.
     * Go 언어로 작성된 코드를 Rust로 전환 중인 사용자가 있음. 이는 Go의 시스템 호출 관련 문제 때문이며, 아직 Rust로 전환되어야 할 Go 라이브러리들이 있음을 언급함.
     * 사용자가 자신의 소규모 홈서버를 업그레이드하는 과정이 매우 간단하고 즐거웠다고 공유함.
     * OpenBSD의 아트워크에 대한 배경 이야기를 묻는 질문이 있음. Puffy(OpenBSD의 마스코트)가 좋아 보이지 않는다는 의견도 있음.
     * OpenBSD의 메인 파일 시스템인 FFS2에 xattrs(확장 파일 속성)를 다시 도입할 계획이 있는지, 혹은 XFS와 같은 더 표준적이고 현대적인 파일 시스템을 사용할 계획이 있는지에 대한 질문이 있음.
     * OpenBSD가 산업계나 중요 시스템에서 사용되는지, 그리고 사용 예시가 있는지에 대한 궁금증이 제기됨.
     * OpenBSD의 아트워크가 시 ""오지만디아스""를 참조하는 것인지에 대한 질문이 있음.
     * OpenBSD의 발표 이메일에 대한 링크가 제공됨.
     * Theo de Raadt의 저작권 표시(1997-2024)가 눈에 띔. Theo de Raadt가 겸손함의 상징이 아님을 인지하고 있지만, OpenBSD가 대체로 한 사람의 작업인지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=14141","고대 세계에서의 서브루틴 호출: 컴퓨터가 스택이나 힙을 갖기 전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  고대 세계에서의 서브루틴 호출: 컴퓨터가 스택이나 힙을 갖기 전

컴퓨터에 스택과 힙이 없던 고대의 서브루틴 호출

     * 현대 컴퓨팅에서는 스택과 힙을 당연하게 여기지만, 컴퓨팅의 초기 시절에는 스택이나 힙 없이 컴퓨터가 작동함.
     * 동적 메모리 할당 없이 컴퓨팅을 상상하는 것은 어렵지 않음. 모든 것에 고정 크기의 메모리 버퍼를 사용해야 함.
     * 가변 크기 데이터를 처리해야 할 경우, 예상 가능한 데이터를 수용할 수 있는 충분히 큰 고정 크기 버퍼를 예약함.
     * 컴파일 시간 설정을 제공하여 클라이언트가 최대 용량을 조정할 수 있도록 하거나, 고정 크기 버퍼에서 메모리를 ""할당""하고 ""해제""할 수 있는 사용자 정의 할당자를 작성함.

스택 없이 함수 호출하기

     * 컴파일러는 각 함수의 인바운드 매개변수, 반환 주소, 로컬 변수에 대해 비밀 글로벌 변수를 정의함.
     * 함수 호출을 생성하기 위해 컴파일러는 매개변수 값을 해당 비밀 글로벌 변수에 할당하고, 반환 주소를 함수의 비밀 ""반환 주소 변수""에 할당한 다음 함수의 시작 부분으로 점프함.
     * 함수는 매개변수를 비밀 글로벌 변수에서 읽고, 논리적으로 로컬 변수에 해당하는 사전 정의된 비밀 글로벌 변수를 사용함.
     * 함수가 끝나면, 함수의 비밀 ""반환 주소 변수""에 있는 주소로 점프함.

ABI 최적화

     * ABI를 최적화하기 위해 일부 값을 글로벌 변수 대신 레지스터에 전달함.
     * 대부분의 프로세서는 ""링크"" 레지스터와 ""링크와 함께 분기"" 명령어를 가지고 있어, 자동으로 링크 레지스터를 ""링크와 함께 분기"" 명령어 다음의 주소로 설정함.
     * 첫 두 매개변수를 레지스터로 전달하는 호출 규약을 최적화함.

재귀 호출의 불가능성

     * 재귀 호출은 작동하지 않음. 재귀 호출은 반환 주소 변수를 재귀 호출의 반환 주소로 덮어쓰기 때문에 외부 호출이 완료될 때 잘못된 위치로 점프함.
     * 당시의 프로그래밍 언어는 재귀를 지원하지 않음을 선언하여 이 문제를 해결함.

보너스 대화

     * 일부 컴파일러는 자기 수정 코드를 사용하여 더 교묘하게 작동함: 특별한 반환 주소 변수는 실제로 함수 끝의 점프 명령어의 주소 필드임.
     * 프로세서가 간접 점프를 지원하지 않는 경우에는 이 방법이 실용적인 필요성으로 사용됨.
     * 서브루틴의 실용적 가치가 인식된 후, 많은 프로세서는 서브루틴 호출 명령어를 추가하여 서브루틴의 첫 번째 단어에 반환 주소를 저장하고, 서브루틴의 두 번째 단어에서 실행을 시작함.
     * 서브루틴에서 반환하기 위해 서브루틴 시작 레이블을 통한 간접 점프를 실행함.

GN⁺의 의견

     * 이 기사는 초기 컴퓨팅 시대에 스택과 힙이 없었을 때의 프로그래밍 방식을 설명함으로써, 현대 소프트웨어 개발에 사용되는 메모리 관리 기법의 발전을 이해하는 데 도움을 줌.
     * 스택과 힙이 없었던 시절의 프로그래밍 방식은 현대 개발자들에게는 매우 생소하고 비효율적으로 보일 수 있으나, 컴퓨팅의 역사를 통해 기술이 어떻게 발전해왔는지를 이해하는 데 중요한 배경 지식을 제공함.
     * 재귀 호출이 불가능했던 시절의 프로그래밍 제약은 오늘날 재귀적 알고리즘을 사용하는 개발자들에게 흥미로운 역사적 사실을 제공함.
     * 비판적인 시각에서 볼 때, 이러한 초기 프로그래밍 방식은 현대의 복잡하고 다양한 요구 사항을 충족시키기에는 매우 제한적이었음을 보여줌.

        Hacker News 의견

     * ""컴퓨터 프로그래밍의 예술"" 책에 대한 긍정적인 평가
          + 이 책은 오래되어 보이지만, 힙(heap)이나 스택(stack) 이전의 다양한 동적 배열이나 데이터 구조를 변경하는 알고리즘을 다룸.
          + 책은 가비지 컬렉션과 Lisp 리스트 구현에 대해서도 설명하며, Knuth가 기대하게 만드는 백과사전 같은 지식을 제공함.
     * 두 개의 배열이 하나의 공간을 동적으로 공유하는 방법에 대한 설명
          + 하나의 배열은 위치 #0에서 정상적으로 성장하고, 다른 하나는 위치 #End에서 거꾸로 성장하게 함으로써, 두 배열이 정적으로 할당된 공간을 효율적으로 공유함.
          + 이 방법은 여러 배열에 대해서 확장될 수 있지만, 그 지점에서는 Malloc과 Realloc을 사용하는 것이 더 나을 수 있음.
     * ALGOL 언어에 재귀 함수를 도입하는 것이 논란의 여지가 있었던 재미있는 이야기 링크 제공
          + 재귀가 프로그래밍 언어에 어떻게 도입되었는지에 대한 흥미로운 역사를 담은 이야기를 링크를 통해 공유함.
     * SUBLEQ 머신과 비트-직렬 머신을 위한 Forth 인터프리터 작성 경험 공유
          + 이 두 머신은 Forth의 필수 요소인 함수 호출 스택을 가지고 있지 않음.
          + SUBLEQ는 간접 로딩과 저장을 허용하지 않으며, 비일상적인 작업을 수행하기 위해 자기 수정 코드가 필요함.
          + 가상 머신을 구축하여 이러한 기능을 수행하고, 협력적 멀티스레딩을 지원함.
          + 필요한 경우 힙은 Forth로 작성되며, 소프트웨어 함수로 구현된 부동 소수점 연산도 포함됨.
     * PDP-8 프로세서의 서브루틴 호출과 관련된 기술적 진화에 대한 설명
          + 초기에는 JMS 명령어가 함수의 첫 번째 단어에 반환 주소를 저장함.
          + 후에는 자동 증가 위치를 사용하여 간단한 스택을 만들고, 함수 프롤로그/에필로그가 이 스택을 수동으로 관리하여 완전한 재귀를 가능하게 함.
          + 나중에는 하드웨어 스택이 마이크로프로세서 구현에 추가되어 성능을 향상시킴.
     * 함수형 프로그래밍 경험을 오랫동안 한 사용자의 재귀에 대한 선호도 공유
          + 재귀 알고리즘을 반복 알고리즘으로 변환하는 방법을 알고 있지만, 재귀를 선호함.
          + 대부분의 경우 재귀가 충분히 빠르며, 컴파일러가 꼬리 재귀를 지원하면 더욱 그러함.
          + 커먼도어 64 게임을 해킹하면서 과거에 어떻게 프로그래밍이 이루어졌는지 배우려고 노력함.
     * 1991년경 RS232 시리얼 멀티플렉서 설계 경험 공유
          + Z80 프로세서, EPROM, Z80-SIO 시리얼 장치를 사용한 하드웨어 설계.
          + 스택이 없어서 함수 호출을 위해 레지스터 쌍에 반환 주소를 사전 로드하는 방식을 사용함.
     * 힙이 확장 가능하기 전 프로그래머들이 입력의 가능한 분포를 고려하고 중간 저장소의 크기를 적절히 설정해야 했던 과거 상황에 대한 언급
          + 이로 인해 ""버그와 한계""가 발생했음.
     * 재귀를 사용할 수 없었던 시절, 꼬리 재귀는 가능했던 점에 대한 설명
          + 초기 호출에 사용된 branch_with_link 이외에는 일반 분기를 사용해야 했음.
     * Enhanced GNU Awk에서 함수 외부에 있는 @let 블록에 대해 컴파일러가 비밀 글로벌 변수를 할당하는 방식 설명
          + 이러한 변수들은 가능한 한 많이 재사용됨.
     * ""Goto considered harmful"" 논문의 세계를 묘사하는 포스트에 대한 언급
          + 대부분의 사람들은 제목만 알고 있으며, 논문은 서브루틴에 단일 진입점을 제공하는 것에 대해 주장함.
          + 때때로 어셈블리 코드를 다른 서브루틴으로 넘어가게 작성하지만, 모든 어셈블리 코드가 그렇게 되길 원하지는 않음.
"
"https://news.hada.io/topic?id=14174","HTTP/2 연속성 홍수: 기술적 세부 사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HTTP/2 연속성 홍수: 기술적 세부 사항

HTTP/2 CONTINUATION Flood 취약점: 기술적 세부 사항

     * CONTINUATION Flood는 여러 HTTP/2 프로토콜 구현에서 발견된 취약점 범주로, Rapid Reset 공격보다 더 심각한 위협을 제기함.
     * 공격으로 인한 결과는 서버 충돌부터 성능 저하에 이르기까지 다양하며, 공격 요청은 HTTP 접근 로그에 나타나지 않음.

서문

     * 2023년 10월 HTTP/2 Rapid Reset 공격에 대해 알게 되었고, HTTP/2에 대한 보안 분석 관점에서 연구를 시작하기로 결정함.

HTTP/2에 대한 간단한 소개

     * HTTP/1.1과 HTTP/2의 주요 차이점은 후자가 이진 프로토콜이며, 클라이언트와 서버가 텍스트 라인 대신 _프레임_을 교환한다는 것임.
     * HEADERS 프레임과 CONTINUATION 프레임에 대한 설명이 필요함.

  HEADERS 프레임

     * HEADERS 프레임은 요청과 응답의 HTTP 헤더를 전송하는 데 사용되며, HPACK 인코딩 알고리즘을 사용하여 헤더 데이터를 압축함.
     * 프레임에는 END_HEADERS와 END_STREAM과 같은 플래그가 설정될 수 있음.

  CONTINUATION 프레임

     * CONTINUATION 프레임은 HEADERS 프레임과 매우 유사하지만 END_HEADERS 플래그만 가지며, 이 플래그가 설정되면 헤더 스트림이 끝났음을 의미함.

CONTINUATION Flood 취약점

     * 클라이언트가 새로운 HTTP/2 스트림을 시작하고 HEADERS와 CONTINUATION 프레임을 보내지만 END_HEADERS 플래그가 절대 설정되지 않는 경우, 서버는 무한한 헤더 스트림을 분석하고 메모리에 저장해야 함.
     * HTTP/1.1에서는 헤더 크기 제한과 요청/헤더 타임아웃으로 무한 헤더로부터 보호되지만, 많은 HTTP/2 서버에서 이러한 보호 조치가 누락되거나 잘못 구현되었음.

  CPU 소모: Golang 사례

     * Golang은 CONTINUATION Flood로 인한 CPU 소모의 예로, http2MetaHeadersFrame이라는 추상 클래스를 사용하여 HEADERS 프레임과 CONTINUATION 프레임을 처리함.
     * HPACK 디코더는 헤더 크기 제한에 도달하면 헤더 방출을 중단하도록 설정되어 있지만, END_HEADERS 플래그가 없으면 함수가 반환되지 않고 계속 헤더를 디코딩함.

  메모리 부족

     * 메모리 부족은 가장 심각한 케이스 중 하나로, CONTINUATION 프레임을 사용하여 구축된 헤더 목록의 크기를 제한하지 않는 구현이 있음.
     * 헤더 타임아웃이 없는 구현에서는 단일 HTTP/2 연결만으로 서버를 충돌시킬 수 있음.

  달성 가능한 단언문 충돌: Node.js (특별한 경우)

     * Node.js는 CONTINUATION 프레임의 무한 스트림을 적절히 처리하지만, 헤더 스트림 도중 연결이 끊어질 때 데이터 경쟁 버그가 발생함.
     * Node.js는 Http2Session 소멸자 내에서 메모리 할당을 추적하고, 연결이 끊어질 때 current_nghttp2_memory_ 값이 동시에 업데이트되어 충돌이 발생할 수 있음.

이전 HTTP/2 취약점과의 비교

     * 과거에는 여러 HTTP/2 취약점이 보고되었으며, CONTINUATION Flood는 이전 취약점들과 다른 방식으로 작동함.
     * CONTINUATION Flood는 비어 있는 헤더를 보내는 대신 서버에 의해 설정된 프레임 크기 제한까지 많은 임의의 헤더를 보냄.

최종 비고

     * HTTP/2 트래픽은 모든 인간 HTTP 트래픽의 약 60%를 차지하며, 영향을 받는 프로젝트의 중요성을 고려할 때 인터넷의 상당 부분이 쉽게 악용될 수 있는 취약점에 영향을 받았음.
     * 이 취약점이 야생에서 악용되었다면, 서버 관리자가 적절한 HTTP/2 지식 없이는 디버깅하기 매우 어려웠을 것임.

GN⁺의 의견

     * 이 취약점은 서버의 가용성을 심각하게 저해할 수 있으며, 특히 로그에 기록되지 않기 때문에 추적과 대응이 어려움.
     * 서버 관리자는 정기적으로 보안 업데이트를 적용하고, 트래픽 분석 도구를 사용하여 비정상적인 패턴을 감지해야 함.
     * 이러한 취약점은 사이버 보안 커뮤니티에 경각심을 일으키고, 보다 안전한 프로토콜 설계와 구현의 중요성을 강조함.
     * 비판적으로 볼 때, 이 취약점은 널리 사용되는 프로토콜의 기본 설계 결함을 드러내며, 이는 인터넷의 기본 인프라에 대한 신뢰성 문제를 제기함.
     * 관련 분야의 지식을 가진 전문가가 아니라면, 이와 같은 복잡한 취약점을 이해하고 대응하는 것이 어려울 수 있으므로, 보안 교육과 인식 향상이 필요함.

        Hacker News 의견

     * 해당 이슈를 최근에 Bandit에서 해결함
          + 한 달 전 Bandit에서 같은 문제를 해결했다는 개인적인 경험.
          + 링크를 통해 구체적인 코드 위치 제공.
          + 구현자의 관점에서 이 문제는 매우 명백하며, 다른 구현체들도 이미 방어책을 마련했을 것으로 생각했음.
          + 그러나 수십 개의 구현체를 확인한 결과, 심지어 주요 HTTP/2 서버들에서도 이러한 보호 장치가 없거나 잘못 구현되어 있었음.
     * 개발 문화에 대한 비판
          + 개발자들이 자동으로 동적으로 확장되는 것에 너무 익숙해져서, 어떤 것이 얼마나 커질 수 있는지에 대해 생각하지 않는 문화가 문제라고 지적.
          + 이러한 문제는 HTTP/2에만 국한되지 않지만, HTTP/2의 복잡성이 문제를 더욱 악화시킬 수 있음.
          + 과거 HTTP/1.x 시절에는 C 같은 언어를 사용하며 버퍼 길이 관리에 지속적인 주의가 필요했고, 요청 헤더 할당을 무한정 확장하는 일은 없었음.
     * 영향을 받지 않는 서버/리버스 프록시 목록
          + 이전 기사에서 언급된 영향을 받지 않는 웹 서버 및 리버스 프록시 목록.
          + Nginx, Jetty, HAProxy, NetScaler, Varnish 등이 영향을 받지 않음.
     * HTTP/1.1의 안전성에 대한 고민
          + 저희 사이트가 하루 종일 주목을 받았다고 언급.
          + 저희 사이트의 트래픽이 적은 경우, HTTP/1.1을 사용하는 것이 더 안전한지에 대한 의문 제기.
     * 저자에 대한 칭찬
          + 저자가 넓은 시야로 접근하고, 발견한 내용을 책임감 있게 보고하며, 읽기 쉬운 방식으로 공유한 것에 대한 칭찬.
     * Slowloris v2에 대한 언급
          + 이 문제를 천천히 발생시키면 'slowloris v2'라고 부를 수 있을 것이라는 농담.
     * 오타에 대한 언급
          + 'serveral retries'라는 오타를 재미있어 함.
     * HTTP/2에 대한 비판적인 시각
          + HTTP/2를 어떻게 애플리케이션 계층 프로토콜에 '업그레이드'를 위한 전송 계층으로 밀어넣을 수 있는지에 대한 비판.
"
"https://news.hada.io/topic?id=14178","iOS Privacy Manifest 심사 대응 준비하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    iOS Privacy Manifest 심사 대응 준비하기

   Apple은 5월 1일 부터, 새로운 개인정보 보호정책을 적용하여 Required Reason API를 사용한 이유를 설명하지 않은 앱들은 업데이트를 허용하지 않을 예정이라고 발표

   그렇다면 Required Reason API는 어떤 것들이 있고 어떻게 대응을 해야 하는지 검토해야함

   나의 프로젝트에서 Required Reason API를 사용중인지 확인해주고 보고서로 확인할 수 있도록 해주는 오픈소스 스캐닝 도구 소개
"
"https://news.hada.io/topic?id=14080","롤-인버트-언롤: 이불 커버 교체를 더 쉽게 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     롤-인버트-언롤: 이불 커버 교체를 더 쉽게 하는 방법

이불 커버 쉽게 갈기: 롤-인버트-언롤 방법

     * 이불 커버를 갈기 어려웠던 경험을 바탕으로, 롤-인버트-언롤 방법을 소개하는 글.
     * 미국 청소 협회는 매달 이불 커버를 세탁할 것을 권장하며, 다른 전문가들은 격주 또는 매주 세탁을 권장함.
     * 이불 커버를 갈 때 이불과 커버 사이의 마찰로 인해 어려움을 겪었으며, 때로는 이불 속으로 들어가 흔들어야 하는 번거로움이 있었음.

이불 커버 갈기 방법

     * 이불과 커버를 준비하고, 커버를 안쪽으로 뒤집어서 이불 위에 펼침.
     * 이불의 네 모서리를 커버에 고정시키는 것이 중요하며, 이불이 커버 안에서 움직이지 않도록 함.
     * 이불과 커버를 함께 꼭꼭 말아서, 커버의 입구 쪽으로 롤을 만듦.

롤을 뒤집어 커버 안으로 넣기

     * 롤을 꽉 쥐고 이불 커버를 롤 전체에 걸쳐 뒤집음.
     * 커버의 입구를 찾아 한쪽 끝에서 시작하여 반대편 끝까지 롤에 커버를 입힘.
     * 마지막 버튼을 잠그고 나면, 롤이 완성됨.

언롤하여 완성하기

     * 말아놓은 이불을 풀어주면, 이불이 제자리에 깔끔하게 들어감.
     * 이 방법을 사용하면 이불 커버를 갈 때 시간과 노력을 절약할 수 있으며, 세탁 작업에 대한 스트레스가 줄어듦.
     * 이불 커버가 중간 과정에서 바깥쪽으로 뒤집히는 모습이 매번 기쁨을 줌.

GN⁺의 의견

     * 이 방법은 이불 커버를 갈 때 흔히 겪는 번거로움을 해결해주는 생활 속 작은 혁신으로 볼 수 있음.
     * 이불 커버를 갈기 어려워하는 사람들에게 이 방법은 실질적인 도움이 될 것이며, 생활의 질을 향상시킬 수 있는 간단한 해결책을 제공함.
     * 이 기사는 특정 제품이나 기술을 홍보하는 것이 아니라 일상생활에서 유용한 팁을 공유하는 것으로, 독자들에게 새로운 시도를 장려하는 긍정적인 메시지를 전달함.
     * 이불 커버를 갈기 어려워하는 사람들이 많기 때문에, 이러한 간단한 해결책은 많은 이들에게 흥미를 끌 수 있음.
     * 이 기사는 특별히 비판할 만한 내용이 없으며, 일상생활에서의 작은 불편함을 해소하는 데 기여하는 긍정적인 내용을 담고 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 이불 커버를 안쪽으로 뒤집어 시작하는 것을 선호함.
          + 이불의 모서리를 잡고 흔들어서 커버를 바로 뒤집는 방법에 대한 설명.
          + 동일한 방법을 보여주는 유튜브 비디오 링크 제공.
     * 두 번째 댓글 요약:
          + 이불 커버를 몇 분 안에 교체하는 것에 대한 상상.
          + 호텔리어로서 경력을 시작했을 때 이불을 3-4분 만에 교체했음.
          + 스웨덴 이불 커버에는 모서리에 구멍이 있어서 손을 넣고 이불을 잡아당겨 흔들기만 하면 됨.
     * 세 번째 댓글 요약:
          + 호텔 외부에서 이불이 여전히 사용되고 있다는 사실에 놀람.
          + 이불 사용이 문화적/지역적인 것인지, 시트와 일반 담요만 사용하는 것이 아닌지 의문.
          + 이불이 불편하다고 느껴져서 많은 사람들이 사용한다는 것에 놀람.
     * 네 번째 댓글 요약:
          + 커버 상단 모서리에 구멍이 있는 지역 출신.
          + 팔을 넣어 이불을 잡고 흔들어서 넣는 방법에 대한 설명.
          + 다른 나라에서는 커버 하단만 열어서 이불을 넣어야 하는 것에 놀람.
     * 다섯 번째 댓글 요약:
          + 인도에서는 이불을 말아 넣고 풀어내는 방법이 일반적임.
          + 어린 시절부터 이 방법을 사용했으며, 서양에서는 일반적이지 않다는 것을 댓글을 통해 깨달음.
          + 이 방법을 문서화해준 것에 감사하며, 자녀에게 가르칠 때 참고할 블로그가 생겼음.
     * 여섯 번째 댓글 요약:
          + 이불을 커버 안에서 고정시키는 방법에 대한 질문.
          + 어릴 때부터 부모님이 사용하던 동물 모양의 안전핀을 이불 중앙에 네 개 배치하여 고정함.
     * 일곱 번째 댓글 요약:
          + 퀸 사이즈 이불의 경우, 커버 안에 이불을 전부 넣고 모서리를 맞춘 후 흔들어서 빠르게 정리함.
          + 긴 팔을 가지고 있어서 이 방법이 더 빠를 수 있음.
     * 여덟 번째 댓글 요약:
          + 사용자들이 어두운 패턴의 쿠키 동의 UI를 사용하는 것을 중단해야 함.
     * 아홉 번째 댓글 요약:
          + 이불을 말아서 커버 바닥에 넣고, 이불 모서리와 커버 측면을 각각 잡은 후 일어서면서 흔들어 펼치는 방법 제안.
"
"https://news.hada.io/topic?id=14171","2024년 뉴저지 화이트하우스 스테이션에서 발생한 규모 4.8 지진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 2024년 뉴저지 화이트하우스 스테이션에서 발생한 규모 4.8 지진

GN⁺의 의견

     * 이 인터랙티브 맵은 미국 지질조사국(USGS) 국립지진정보센터(National Earthquake Information Center, NEIC)와 PDE(지진 데이터 교환 프로젝트)에 의해 제공된 것으로 보임. 이러한 맵은 지진 발생 정보를 실시간으로 제공하여 지진에 대한 인식을 높이고, 재난 대응 계획 수립에 중요한 데이터를 제공할 수 있음.
     * 지진 데이터는 과학자, 연구원, 정책 입안자뿐만 아니라 일반 대중에게도 유용한 정보를 제공함. 이를 통해 지진 발생 시 안전 조치를 취하고, 지진에 대한 교육과 준비를 강화할 수 있음.
     * 그러나 이러한 인터랙티브 맵의 데이터는 정확도와 신속성에 크게 의존하며, 때로는 초기 보고가 수정될 수 있어 사용자는 이를 감안하여 정보를 해석해야 함. 또한, 지진 데이터를 해석하는 데는 전문 지식이 필요할 수 있으므로, 일반 대중이 오해를 불러일으킬 수 있는 정보를 잘못 해석하는 경우가 발생할 수 있음.
     * 지진 정보 서비스는 국가나 지역에 따라 다양하게 제공되고 있으며, 이러한 서비스를 통해 지진에 대한 대비와 대응이 강화될 수 있음. 예를 들어, 일본의 경우 지진 조기 경보 시스템을 통해 지진 발생 직후 대중에게 경보를 전달하는 등의 체계적인 대응 시스템을 갖추고 있음.
     * 인터랙티브 맵과 같은 기술을 도입할 때는 사용자 인터페이스의 직관성, 데이터의 정확성 및 신뢰성, 그리고 시스템의 지속적인 유지보수와 업데이트가 중요함. 이러한 요소들이 잘 관리되어야 사용자가 신뢰할 수 있는 정보를 얻고, 재난 상황에서 적절히 대응할 수 있음.

        Hacker News 의견

     * 지진 발생 지역 근처에 사는 한 사용자는 최근 지리적 변화에 대해 언급함. 인근 라운드 밸리 저수지가 몇 년간 보수 작업을 거쳤고, 지난 가을에 저수지를 다시 가득 채우는 작업에 대한 승인을 받았음. 비가 많이 온 겨울로 인해 예상보다 빠르게 저수지가 거의 가득 차게 됨. 사용자는 수십억 갤런의 물이 추가되면서 단층에 압력이 영향을 받았는지 궁금해함. 최근 강우 데이터를 공유함.
          + 한 사용자가 지진 발생 지역 근처에 살고 있으며, 최근 인근 라운드 밸리 저수지가 가득 차면서 지질학적 변화가 있었을 수 있다고 추측함. 많은 비로 인해 저수지가 예상보다 빨리 가득 차고, 이로 인해 단층에 압력이 영향을 받았을 가능성에 대해 의문을 제기함.
     * 뉴욕 웨스트체스터 카운티 남부에서 지진을 강하게 느낌. 2011년 뉴욕시에서 느낀 지진과는 다르게, 이번 지진은 큰 트럭이 지나가는 것 같은 진동이었지만 훨씬 강렬함. 크고 불쾌한 소음이 약 15초간 지속됨. 이에 대해 매우 불쾌해하며, 가스와 물 공급에 문제가 없는지, 균열이 있는지 등을 점검함.
          + 뉴욕 웨스트체스터 카운티 남부의 한 사용자가 지진을 강하게 느꼈으며, 큰 트럭이 지나가는 듯한 강렬한 진동과 소음을 경험함. 이에 불쾌감을 표하며 가정 내 가스, 물 공급 및 구조물의 안전 점검을 실시함.
     * 뉴욕 출신으로 아파트 건물이 흔들리고 벽이 삐걱거리는 것을 느낌. 지상 20층 이상에서 이런 경험을 하는 것은 익숙하지 않고 즐거운 경험이 아님.
          + 뉴욕 출신의 한 사용자가 자신의 아파트 건물이 흔들리고 벽이 삐걱거리는 것을 느끼며, 높은 층에서 이러한 지진을 경험하는 것이 불편함을 표현함.
     * 동부 해안에 사는 사람들이 이 지진 소식에 놀랄 수 있는 이유: 동북부는 미국 내에서 지질학적으로 이례적인 지역으로, 예상치 못한 날씨 변화가 거의 없음. 토네이도, 강한 폭풍, 홍수, 지진 등이 거의 발생하지 않으며, 주로 눈보라가 발생하는데 이는 예측 가능하고 서서히 쌓임.
          + 동부 해안 지역은 지질학적으로 안정적이어서 예상치 못한 날씨 변화가 드물기 때문에, 지진과 같은 자연 현상에 대해 놀라움을 표현하는 사용자들이 있음.
     * 2011년 뉴욕시에서 지진이 발생했을 때 트위터 계정을 처음 만들었고, 트위터의 존재를 알게 됨.
          + 한 사용자가 2011년 뉴욕시 지진 당시 트위터 계정을 처음 만들었으며, 그때 트위터의 존재를 인지했다고 회상함.
     * 브루클린에 있는 사용자가 뉴저지 주민과 통화 중 지진을 느낌. 지진의 전파 속도에 대해 궁금해함.
          + 브루클린에 있는 사용자가 뉴저지 주민과 통화 중 지진을 느끼고, 지진이 어떻게 전파되는지에 대한 의문을 제기함.
     * 매사추세츠에서 지진을 느낌. 2층에서 일하던 중이었고, 1층에 있던 아내는 느끼지 못함. 내부 슬랙 채널을 통해, 매사추세츠에서는 1층에 있는 사람들은 지진을 느끼지 못하지만, 높은 층에 있는 사람들은 느낌이 흔함.
          + 매사추세츠에서 한 사용자가 2층에서 지진을 느낀 반면, 1층에 있던 아내는 느끼지 못했다고 함. 높은 층일수록 지진을 느낄 가능성이 높다는 경험을 공유함.
     * 지진 중에 수술을 하고 있지 않아서 다행이라는 농담을 하는 사용자가 있음.
          + 한 사용자가 지진 도중 수술을 받고 있지 않아서 다행이라는 농담을 함.
     * Rumble.com의 마케팅 팀이 Youtube에서 사용자를 끌어오기 위해 혁신적인 방법을 사용하고 있다고 언급하는 사용자가 있음.
          + Rumble.com의 마케팅 팀이 Youtube와의 경쟁에서 사용자를 유치하기 위해 혁신적인 전략을 사용하고 있다고 언급하는 사용자가 있음.
     * 규모 2.0의 여진에 대한 링크를 공유하는 사용자가 있음.
          + 한 사용자가 규모 2.0의 여진에 대한 정보를 공유하는 링크를 제공함.
"
"https://news.hada.io/topic?id=14083","Xz/liblzma: Bash 단계 난독화 해설","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Xz/liblzma: Bash 단계 난독화 해설

Bash 단계의 난독화 설명

     * xz/liblzma에 백도어가 발견되었음. OpenSSH 서버에 영향을 미침.
     * 백도어가 포함된 이진 파일보다 초기 bash 부분과 사용된 간단하지만 영리한 난독화 방법에 주목.
     * 이 글은 bash 단계가 어떻게 난독화되고 추출되는지에 대한 설명.

시작하기 전에

     * xz/liblzma의 두 버전(5.6.0과 5.6.1)이 영향을 받음. 미세한 차이가 있음.
     * bash 부분은 세 단계(혹은 네 단계?)로 나뉘며, 각 단계를 Stage 0부터 Stage 2로 명명.
     * ""Stage 3""에 대해서도 언급할 예정이지만, 아직 완전히 구현되지 않았을 수 있음.
     * 난독화/암호화된 단계와 이후의 이진 백도어는 두 테스트 파일에 숨겨져 있음.

Stage 0

     * m4/build-to-host.m4 파일에서 시작. 이 코드는 빌드 과정 중 어딘가에서 실행되어 Stage 1 스크립트를 추출.
     * 테스트 파일에서 바이트를 읽어 표준 출력으로 전달하고, tr 명령어를 사용하여 문자를 다른 문자로 매핑.

Stage 1

     * ""####Hello####""로 시작하는 bash 파일. Linux에서만 실행되도록 함.
     * eval을 사용하여 config.status에서 srcdir을 추출하고, 특정 바이트를 건너뛰고 출력하는 복잡한 head 명령어 체인을 포함.
     * tr 명령어를 사용하여 단순 치환 암호를 적용하고, xz 명령어로 압축 해제 후 실행.

Stage 2

     * Stage 2는 실제 컴파일 과정을 수정하는 bash 스크립트.
     * ""확장/패치"" 시스템이 있는 것처럼 보이며, 테스트 파일을 계속 수정하지 않고도 새로운 스크립트를 실행할 수 있도록 함.
     * .o 파일을 추출하여 컴파일/링킹 과정에 통합하는 코드가 포함됨.

요약

     * 이 과정은 매우 숨겨져 있고, 표준 명령줄 도구만을 사용하여 복잡하게 구성됨.
     * 3단계 실행과 ""확장"" 시스템을 통해 미래에 대비하고, 이진 테스트 파일을 다시 변경할 필요가 없도록 설계됨.
     * 이러한 공격이 우연히 발견되었다는 사실은 보안 커뮤니티에 많은 의문을 남김.

GN⁺의 의견

     * 이 기사는 소프트웨어 보안과 공급망 공격에 대한 중요성을 강조함. 소프트웨어 빌드 과정에서 발생할 수 있는 취약점을 인식하고, 코드 검토와 보안 감사의 중요성을 상기시킴.
     * 난독화 기술과 멀티 스테이지 공격 방법은 공격자가 얼마나 정교하게 시스템을 침투할 수 있는지 보여줌. 이러한 기술은 보안 전문가들에게도 교육적 가치가 있음.
     * 비슷한 기능을 제공하는 다른 보안 도구나 프로젝트로는 OWASP의 Dependency-Check나 Sonatype의 Nexus Platform이 있음. 이들은 소프트웨어 의존성에 대한 보안 취약점을 식별하는 데 도움을 줌.
     * 이 기술을 도입할 때는 소프트웨어 공급망의 모든 단계에서 보안을 강화해야 함. 이를 통해 득은 시스템의 안전성을 높이는 것이고, 실은 공격자가 이러한 방법을 사용할 경우 탐지가 어려울 수 있다는 점임.
     * 이 사건은 오픈소스 커뮤니티의 강점이자 약점을 모두 드러냄. 커뮤니티 기반의 검토와 기여는 프로젝트의 성장과 보안에 중요하지만, 동시에 악의적인 기여자에 의한 위험도 존재함.
"
"https://news.hada.io/topic?id=14167","Stable Audiotable Audio 2.0

     * Stable Audio 2.0은 AI가 생성하는 고품질의 전체 트랙을 최대 3분 길이, 44.1kHz 스테레오로 제공하는 새로운 표준을 제시
     * 사용자가 샘플을 업로드하고 자연어 프롬프트를 사용하여 변환할 수 있는 오디오-투-오디오 생성 기능을 도입
     * AudioSparx 음악 라이브러리로부터 라이선스된 데이터셋을 독점적으로 사용하여 훈련되었으며, 창작자의 '옵트 아웃' 요청을 존중하고 공정한 보상을 보장
     * Stable Audio 웹사이트에서 모델을 탐색하고 무료로 창작을 시작할 수 있음

새로운 기능

     * 최대 3분 길이의 곡을 생성할 수 있으며, 인트로, 발전, 아웃트로를 포함한 구조화된 작곡과 스테레오 사운드 이펙트를 제공
     * Audio-To-Audio 생성 : 오디오 파일 업로드를 지원하여 아이디어를 완전히 제작된 샘플로 변환할 수 있음. 저작권이 없는 자료만 업로드하도록 서비스 약관이 요구하며, 저작권 침해를 방지하기 위해 고급 콘텐츠 인식을 사용
     * 변주 및 사운드 이펙트 생성 : 키보드 타이핑 소리부터 군중의 함성, 도시 거리의 윙윙거림에 이르기까지 다양한 사운드 및 오디오 이펙트의 생산을 증폭함
     * 스타일 전환 : 생성 과정 내에서 새로 생성되거나 업로드된 오디오를 원활하게 수정하여 프로젝트의 특정 스타일과 톤에 맞춤

연구

     * Stable Audio 2.0의 잠재적 확산 모델 아키텍처는 구조화된 전체 트랙 생성을 가능하게 설계됨
     * 이를 위해 시스템의 모든 구성 요소가 장기간에 걸친 성능 향상을 위해 조정됨
     * 새로운 고도로 압축된 오토인코더는 원시 오디오 파형을 훨씬 짧은 표현으로 압축함
     * 확산 변환기(DiT)는 이전의 U-Net 대신 사용되며, 긴 시퀀스에 걸쳐 데이터를 조작하는 데 더 능숙함

보호 장치

     * 1.0 모델과 마찬가지로, 2.0은 800,000개 이상의 음악, 사운드 이펙트, 단일 악기 스템 파일 및 해당 텍스트 메타데이터를 포함하는 AudioSparx의 데이터로 훈련됨
     * AudioSparx의 모든 아티스트는 Stable Audio 모델 훈련에서 '옵트 아웃'할 수 있는 옵션을 가짐
     * 저작권자의 권리를 보호하기 위해 오디오 업로드 시 AudibleMagic과 파트너십을 맺고 그들의 콘텐츠 인식(ACR) 기술을 사용하여 실시간 콘텐츠 일치를 통해 저작권 침해를 방지함

Stable Radio

     * Stable Radio는 Stable Audio가 생성한 트랙만을 특징으로 하는 24/7 라이브 스트림으로, Stable Audio YouTube 채널에서 스트리밍 중임
     * Stable Audio 웹사이트에서 모델을 탐색하고 무료로 창작을 시작할 수 있음.

GN⁺의 의견

     * Stable Audio 2.0은 음악 제작자들에게 AI를 활용한 창작 도구를 제공함으로써 음악 산업에 혁신을 가져올 수 있는 잠재력을 가짐. 자연어 처리를 통해 사용자의 의도를 파악하고 이를 음악으로 변환하는 기능은 창작 과정을 간소화하고, 더 많은 사람들이 음악 제작에 참여할 수 있는 기회를 제공함.
     * 이 기술이 가져올 수 있는 문제 중 하나는 저작권 문제임. 비록 회사가 저작권 침해를 방지하기 위한 조치를 취하고 있다고 밝혔지만, AI가 생성한 콘텐츠의 저작권 소유와 관련된 법적인 문제는 여전히 복잡함.
     * 음악 제작에 AI를 도입할 때 고려해야 할 사항 중 하나는 AI가 생성한 음악의 독창성과 예술성에 대한 인식임. AI가 인간의 창의성을 모방하거나 대체할 수 있는지, 그리고 이것이 음악 산업에 어떤 영향을 미칠지에 대한 논의가 필요함.
     * AI 음악 생성 도구를 사용함으로써 얻을 수 있는 이점은 창작 시간의 단축, 다양한 음악 스타일과 장르의 실험, 그리고 창작자가 음악 이론이나 악기 연주 기술에 대한 깊은 지식이 없어도 음악을 만들 수 있다는 점임.
     * 이 기술이 음악 교육에 미칠 수 있는 긍정적인 영향을 고려할 때, 음악 이론을 배우는 학생들에게 다양한 음악 스타일과 구조를 탐색하고 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 인상적인 AI 음악이지만, 인간이 만든 음악에 담긴 의도와 감정을 느낄 수 없는 것 같아 뭔가 부족함을 느낌.
     * AI가 생성한 오디오의 저작권에 대한 언급이 없어, 출력물의 소유권에 대한 중요한 문제가 있음.
     * 10년 전 만든 비트를 AI에게 주었더니, 마치 세탁기에 스테레오를 넣은 것처럼 들림. 더 큰 데이터셋이 필요할 것 같지만, 구독을 고려 중임.
     * Stability AI가 라이선스된 데이터셋을 사용하여 창작자에게 공정한 보상을 보장하는 것은 잘한 일임.
     * 기술적으로 인상적이지만, AI가 생성한 음악은 평범함. 현대 전자 음악가가 더 나은 작업을 할 수 있음.
     * Stability AI가 오픈소스가 아니어서 아쉬움. OpenAI와 같은 길을 가지 않기를 바람.
     * AI가 오디오 샘플을 비슷하게 재구성하려 시도하지만, 실제 드럼과 기타 연주와는 다름. 그래도 흥미롭고, 향후 개선된 버전이 나올 것으로 기대됨.
     * 코딩할 때 듣기 좋은 신스웨이브 음악이 식상해져 새로운 것을 찾고 있었는데, AI가 무한히 ""충분히 좋은"" 플레이리스트를 생성할 수 있을 것 같음.
     * AI로 흥미로운 것을 생성하는 데 실패함. 사이트 사용이 어려움.
     * 오디오 모델을 위한 ComfyUI 스타일 인터페이스가 있는지 궁금함.
"
"https://news.hada.io/topic?id=14116","GPT란 무엇인가? 트랜스포머에 대한 시각적 소개 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GPT란 무엇인가? 트랜스포머에 대한 시각적 소개 [비디오]

        Hacker News 의견

     *
          + GPT 모델에 대한 질문이 있음: 모델이 가장 가능성이 높은 단어를 선택한다고 생각했지만, ""가능성 있는"" 단어 중 하나를 선택한다면, 다음 단어 예측 목록이 훨씬 덜 가능성 있게 되지 않을까? ""두 단어 함께""의 가능성을 실행하는 것이 계산 가능하다면 더 유익할 것이고, 이는 3, 4, n 단어에도 적용될 수 있음. 이런 방식이 존재하는지 궁금함.
          + 영상을 보고 댓글을 본 후 수정: 이 문제를 제어하는 데는 빔 탐색(beam search)과 온도(temperature)가 사용됨.
     *
          + 집단에게 주의 기제(attention mechanism)를 가르치기에 더 나은 사람은 생각할 수 없음. 꿈이 실현된 것 같음.
     *
          + 4월 만우절 콘텐츠에 대한 놀라운 치유제임. 이것을 직접 주입하고 싶음.
     *
          + Andrej Karpathy의 채널에는 프로그래밍을 아는 사람들을 대상으로 한 신경망과 그 내부 작동에 대해 설명하는 몇 가지 흥미로운 비디오가 있음. 이것을 좋아한다면 추천함.
     *
          + 다음 토큰은 언임베딩 후 최종 열에서 로짓을 샘플링하여 선택됨. 그러나 그것은 단지 마지막 토큰을 다시 선택하는 것이 아닌가? 아니면 어느 단계에서 행렬이 N+1로 크기가 조정되는가?
     *
          + 다음 비디오를 기다릴 수 없음. 이것들이 어떻게 작동하는지 마침내 내면화하고 이해할 수 있을 것 같음.
     *
          + 3B1B는 YouTube에서 최고의 STEM 교육자 중 한 명임.
"
"https://news.hada.io/topic?id=14131","Yahoo, 인스타그램 창업자들이 만든 AI 뉴스앱 Artifact 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Yahoo, 인스타그램 창업자들이 만든 AI 뉴스앱 Artifact 인수

     * Instagram의 공동 창업자들이 독자들에게 뉴스를 추천하는 강력하고 유용한 도구인 Artifact를 만들었으나, 규모를 키우는 데 어려움을 겪음
     * Yahoo는 수억 명의 독자를 보유하고 있지만, 인터넷의 다른 뉴스 애그리게이터와 차별화하기 위해 기술 중심의 멋진 무언가가 필요함
     * 이에 따라 양측이 힘을 합치기로 했으며, Yahoo가 Artifact를 인수한다고 화요일에 발표함

Artifact 인수 계약 내용

     * 인수 비용은 공개하지 않음
     * Yahoo는 Artifact의 기술을 인수하는 것이지 팀을 인수하는 것은 아님
     * Artifact의 공동 창업자인 Mike Krieger와 Kevin Systrom은 Yahoo의 ""특별 고문""이 될 것이지만 회사에 합류하지는 않을 것임
     * Artifact의 나머지 5명의 직원은 이미 다른 일자리를 구했거나 휴식을 취할 계획임

Artifact의 짧은 역사

     * Artifact는 출시 1년 조금 넘게 지난 시점에서 인수되었으며, Systrom과 Krieger가 폐업을 발표한 지 약 3개월 만에 이루어짐
     * 1월에 공동 창업자들은 ""우리는 핵심 사용자 그룹이 사랑하는 무언가를 만들었지만, 이 방식으로 계속 투자할 만큼 시장 기회가 크지 않다는 결론을 내렸다""고 썼음
     * 폐업의 가장 큰 이유는 ""수백만 명에게 다가갈 수 있는 더 새롭고, 더 크고, 더 나은 것""에 집중하기 위해서였음
     * Artifact의 베팅은 항상 AI가 거대하고 인터넷을 변화시킬 수 있는 잠재력을 가지고 있다는 것이었음. 아마도 큰 뉴스 청중 없이 뉴스 앱에서 작업할 수 있는 더 흥미로운 것들이 있었을 것임

Artifact 폐업 발표 후 여러 회사들의 관심

     * Systrom과 Krieger는 잠재적 인수자에게 회사를 내놓거나 자금을 모으려 하지 않고 폐업 발표를 했음
     * 그들은 Artifact의 유일한 투자자였고, 매우 간소한 사업을 운영했으며, 그냥 넘어갈 수 있다고 생각했음
     * 그러나 그 후 회사들이 연락을 해왔음. Systrom은 폐업 발표 후 ""10개 정도""의 다른 회사들과 대화를 나누었다고 함
     * ""많은 조직들이 뉴스와 개인화된 콘텐츠에 깊은 관심을 가지고 있으며, 주위를 둘러보며 'AI의 새로운 물결이 있네. 어쩌면 무슨 일이 일어나고 있는지 알아봐야 할 것 같아'라고 말하고 있다""고 그는 말함

Yahoo의 Artifact 인수 이유

     * Yahoo는 Artifact의 폐업 편지를 읽은 후 인수를 모색하기 시작했다고 Yahoo News의 총괄 매니저인 Kat Downs Mulder는 말함
     * ""그들은 콘텐츠 분류법과 추천 시스템이 작동하는 방식에 많은 사랑과 관심을 쏟았다""고 그녀는 말함
     * ""콘텐츠가 어떻게 분류되고, 어떤 신호가 해당 콘텐츠에 영향을 미치며, 무엇이 정말 효과가 있고 연결될 수 있으며 관련성이 있는지 식별하는 방법, 그리고 사용자와 해당 콘텐츠를 연결하는 UX까지 이 전체 여정을 제대로 수행하기는 정말 어렵다""고 그녀는 말함
     * Yahoo는 오랫동안 개인화와 추천에 대해 연구해 왔지만, Artifact는 특별한 것을 만들어냈음

Artifact가 Yahoo로부터 얻을 수 있는 것

     * Downs Mulder는 매달 1억 8500만 명 이상이 Yahoo News를 방문한다고 말하며, 이는 Artifact의 개인화 및 추천 기술을 단독으로 했을 때보다 훨씬 더 많은 사용자에게 제공할 수 있음을 의미함
     * Systrom에게 이는 또한 그것이 실제로 작동하는 것을 볼 수 있는 기회를 의미함
     * ""우리는 매달 성장을 위해 노력했고, 기계 학습과 AI에서 약속된 일부 기능이 작동하기 시작할 만큼의 규모에 도달했지만, 그 바늘을 움직이기는 정말 어려웠다""고 Systrom은 말함
     * Yahoo와 통합하면 천천히 이루어지겠지만, 그 바늘을 크게 움직일 것임

인수 후 Artifact와 Yahoo의 변화

     * 인수가 완료되면 Artifact 앱은 사라질 것임
     * 그러나 콘텐츠 분류, 큐레이션 및 개인화를 위한 Artifact의 기본 기술은 곧 Yahoo News에 나타나기 시작할 것이며, 결국 다른 Yahoo 플랫폼에도 나타날 것임
     * ""앞으로 몇 달 안에 우리 제품에 그런 것들이 흘러들어올 것""이라고 Downs Mulder는 말함
     * Yahoo의 앱도 시간이 지남에 따라 Artifact의 속도와 세련미를 조금 얻을 가능성이 있는 것 같음

Artifact 공동 창업자의 앞으로의 계획

     * Systrom은 다음에 무엇을 할지 모른다고 말함
     * 그는 Yahoo로의 전환이 잘 이루어지도록 하는 데 주력하고 있으며, 그와 Krieger는 항상 새로운 아이디어를 생각하고 있음
     * 그는 여전히 AI에 대해 긍정적이며 대규모 언어 모델에 의해 구동되는 시대에 세상에 무엇이 필요한지에 대해 큰 질문을 하고 있음
     * 그러나 ""회사를 시작하는 것은 계절 사업이 아니다""라고 그는 말함
     * ""가을마다 새로운 것을 시작하는 것이 아니다""
     * Artifact에 대한 아이디어는 지나치기에는 너무 좋았고, 이제 그는 다음 아이디어를 찾고 있음

GN⁺의 의견

     * Artifact의 콘텐츠 분류, 큐레이션, 개인화 기술은 매우 혁신적이고 차별화된 것으로 보임. 이를 Yahoo의 거대한 사용자 기반과 결합하면 시너지 효과가 클 것으로 예상됨. 다만 기술 통합이 쉽지 않을 수 있으며 시간이 걸릴 것임
     * AI 기반 뉴스 추천은 최근 업계의 주요 트렌드 중 하나임. Google News, Microsoft의 Hummingbird, ByteDance의 TopBuzz, Flipboard 등 유사한 플랫폼들이 경쟁하고 있음. Artifact가 어떤 차별점을 가지고 있는지 주목할 필요가 있음
     * AI 기반 맞춤형 콘텐츠 추천은 사용자 경험을 개선하고 engagement를 높일 수 있지만, filter bubble, echo chamber 등의 부작용도 우려됨. 다양성과 신뢰도를 담보할 수 있는 방안 마련이 필요해 보임
     * Instagram에서 성공적으로 Artifact를 출시했다가 1년만에 매각한 것은 아쉬움. 포기하기에는 너무 일렀던 것 아닌가 하는 생각이 듦. 창업자들이 이미 오래전부터 AI 스타트업을 염두에 두고 있었다면, Artifact를 실험 무대 정도로 생각했을 수도 있겠음
     * Yahoo가 오랫동안 개인화와 큐레이션에 투자해왔다고는 하나, 기술력 측면에서는 후발주자임. Artifact 인수를 계기로 혁신의 속도를 높일 수 있을지 주목됨. 컨텐츠 경쟁력, 사용자 확보 등 함께 풀어야 할 숙제가 많아 보임
"
"https://news.hada.io/topic?id=14209","2024년 ML/AI/Data 업계 지도와 최신 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     2024년 ML/AI/Data 업계 지도와 최신 트렌드

   이미지 한장으로 정리한 2024년 MAD(ML,AI,Data) 업계 지도 및 올해의 24가지 테마 설명

[Part I : Landscape]

     * 2012년 최초 버전에서는 139개 기업만 있었으나, 2024년 MAD 생태계에는 2,011개 기업이 포함됨
     * 이는 작년 1,416개에서 578개가 새로 추가된 것
     * 이렇게 많은 기업이 포함된 이유는 최근 10여년간 데이터 인프라 기술과 ML/AI 기술의 두 가지 거대한 기술 발전의 물결이 연이어 발생했기 때문
          + 첫 번째 물결은 빅데이터에서 시작해 모던 데이터 스택으로 끝난 약 10년간의 데이터 인프라 기술 발전임
          + 두 번째 물결은 생성 AI(Generative AI)에서 시작된 ML/AI 기술 발전
     * MAD 생태계는 데이터 수집부터 저장, 처리, 분석 및 애플리케이션을 통한 가치 제공에 이르는 데이터의 전체 라이프사이클을 보여주는 데 초점을 맞추고 있음

인프라와 분석 영역의 주요 변화

     * 데이터 인프라 영역(MAD 생태계의 왼쪽)은 최근 큰 변화가 없었음
          + ""Database Abstraction""을 ""Multi-Model Databases & Abstractions""으로 변경해 SurrealDB, EdgeDB 등 all-in-one 다중 모델 DB의 등장을 반영함
          + 작년에 실험적으로 만든 ""Crypto / Web 3 Analytics"" 섹션은 제거함
          + ""Query Engine"" 섹션도 제거함 (해당 기업들은 여전히 포함되어 있음)

머신러닝과 인공지능 영역의 주요 변화

     * 2023년 AI 기업의 폭발적 증가로 인해 이 영역에서 가장 많은 구조적 변화가 있었음
     * MLOps 옆에 3개의 새로운 카테고리를 추가함
          + ""AI Observability"": LLM 애플리케이션을 테스트, 평가, 모니터링하는 스타트업
          + ""AI Developer Platforms"": MLOps와 유사하지만 LLM 훈련, 배포, 추론에 초점을 맞춘 AI 애플리케이션 개발 플랫폼
          + ""AI Safety & Security"": LLM 고유의 우려사항(hallucination, 윤리, 규제 준수 등)을 다루는 기업
     * ""Horizontal AI/AGI""를 ""Commercial AI Research""와 ""Nonprofit AI Research"" 두 카테고리로 분리함
     * ""GPU Cloud""를 ""GPU Cloud / ML Infra""로 변경해 GPU 클라우드 제공업체의 핵심 인프라 기능 추가를 반영함

애플리케이션 영역의 주요 변화

     * 애플리케이션 계층의 모든 기업이 이제 스스로를 ""AI 기업""이라고 칭함
     * ""Horizontal Applications""에 ""Presentation & Design"" 카테고리 추가
     * ""Search""를 ""Search / Conversational AI""로 변경해 Perplexity 같은 LLM 기반 챗봇 인터페이스의 등장을 반영함
     * ""Industry""에서 ""Gov't & Intelligence""를 ""Aerospace, Defense & Gov't""로 변경함

오픈소스 인프라 영역의 주요 변화

     * ""Data Access""와 ""Data Ops""를 아우르는 단일 ""Data Management"" 카테고리 생성
     * AI와 LLM을 로컬 개발 환경으로 가져오기 위한 인프라 도구를 제공하는 ""Local AI""라는 새로운 카테고리 추가

[Part II: 2024년의 24가지 테마]

  1. 구조화된 데이터 vs 비구조화된 데이터

     * 데이터에는 행과 열에 맞출 수 있는 구조화된 데이터와, 텍스트/이미지/오디오/비디오 같은 비구조화된 데이터가 있음
     * 구조화된 데이터는 분석 목적으로 추출, 저장, 변환되어 BI 도구로 시각화되거나, 전통적인 ML/AI 모델에 사용됨
     * 비구조화된 데이터는 주로 생성형 AI 모델(LLM 등)을 훈련시키고 사용(추론)하는 데 사용됨
     * 현재 비구조화된 데이터(ML/AI)는 주목받고 있지만, 구조화된 데이터(모던 데이터 스택 등)는 그렇지 않음

  2. 모던 데이터 스택은 죽었는가?

     * 모던 데이터 스택(MDS)은 구조화된 데이터 파이프라인을 다루며, 얼마 전까지만 해도 소프트웨어 업계에서 가장 주목받는 개념이었음
     * MDS는 클라우드 데이터 웨어하우스를 중심으로, 상류에는 Fivetran/Airbyte, 중간에는 DBT, 하류에는 Looker/Mode 등이 위치하는 구조였음
     * 스노우플레이크가 사상 최대 규모로 IPO에 성공하면서 MDS에 대한 관심이 폭발했고, 이는 과열된 스타트업 설립과 VC 투자로 이어짐
          + 데이터 카탈로그, 데이터 옵저버빌리티, ETL, 리버스 ETL 등 여러 카테고리가 1~2년 만에 포화상태에 이름
     * MDS는 실제 문제에 대한 해법이기도 했지만, 동시에 데이터 가치사슬 상의 여러 스타트업 간 마케팅 제휴이기도 했음
     * 그러나 현재 MDS는 ① 여러 벤더 솔루션을 조합해야 해서 비용이 많이 들고, ② 생성형 AI에 밀려 더 이상 주목받지 못하는 등 압박에 직면해 있음

  3. 데이터 인프라 영역의 통합과 거대 기업의 성장

     * 2024년 데이터 인프라와 분석 업계에서는 다음과 같은 일들이 일어날 전망:
          + 많은 MDS 관련 스타트업들이 ""AI 인프라 스타트업""으로 포지셔닝을 전환하려 할 것임
               o 일부는 성공할 수 있겠지만, 대부분은 구조화된 데이터에서 비정형 데이터로의 이동을 위해 제품의 근본적 진화가 필요할 것임
          + 데이터 인프라 업계는 마침내 일정 수준의 통합을 경험하게 될 것임
               o 그동안 M&A가 제한적이었으나, 2023년에는 Stemma(Teradata 인수), Manta(IBM 인수), Mode(Thoughtspot 인수) 등 중소규모 인수합병이 일어났음
          + 스타트업의 실패 사례가 크게 늘어날 것임
               o VC 자금이 말라붙으며 상황이 악화일로임. 많은 스타트업이 비용을 크게 줄였으나 결국 현금 고갈에 직면할 것임. 화려한 헤드라인은 기대하기 어려울 듯
          + 규모가 있는 기업들은 플랫폼화에 더욱 매진할 것임
               o 인수합병을 통해서도 이뤄지겠지만, 자체 개발을 통해서도 더 많은 기능을 아우르려 들 것임

  4. 데이터브릭스 vs 스노우플레이크 현황

     * 구조화된 데이터 업계의 스노우플레이크는 여전히 훌륭한 기업이며 기술주 중 가장 높은 밸류에이션을 받고 있음(PER 14.8배)
          + 그러나 많은 소프트웨어 기업과 마찬가지로 성장이 크게 둔화됨
               o 2024 회계연도 매출은 전년 대비 38% 성장한 26.7억 달러, 향후 12개월 예상 성장률은 22%
          + 무엇보다 제품 혁신에서 어려움을 겪는 듯한 인상을 줌
               o AI 대응이 더디고 인수합병에도 소극적
               o 최근 다소 갑작스러운 CEO 교체도 흥미로운 신호
     * 비구조화된 데이터 업계의 데이터브릭스는 전반적으로 강한 모멘텀을 보이고 있음
          + 2024 회계연도 매출이 16억 달러로 50% 이상 성장한 것으로 알려짐 (비상장사)
          + 데이터브릭스는 생성형 AI의 주요 기업으로 부상 중
               o 모자이크ML을 13억 달러에 인수하는 등 M&A와 자체 제품 개발에 적극적
               o LLM에 공급되는 비정형 데이터의 핵심 저장소일 뿐 아니라, Dolly부터 새로 발표한 DBRX에 이르기까지 다양한 모델도 직접 개발 중
     * 양사의 경쟁구도에 새로운 변수는 MS의 Fabric 출시
          + 2023년 5월 발표된 Fabric은 엔드투엔드 클라우드 기반 데이터 분석 SaaS 플랫폼
          + MS의 데이터 레이크 OneLake, BI 도구 PowerBI, Synapse 등을 통합해 데이터 통합부터 엔지니어링, 데이터 사이언스까지 전 영역을 아우름
          + 발표와 실제 제품 간에는 간극이 있겠으나, MS의 생성형 AI 투자와 결합하면 강력한 위협이 될 수 있음
          + 데이터브릭스는 주로 MS의 클라우드 Azure 위에서 돌아간다는 점도 흥미로운 점

  5. 2024년 BI 현황과 생성형 AI가 분석을 변화시키는가?

     * MDS와 구조화된 데이터 파이프라인 영역 중 가장 재발명이 절실했던 분야는 BI임
          + 2019년 MAD에서 BI 업계의 통합이 거의 완료되었음을 지적한 바 있고, 2021년에는 메트릭 스토어의 등장을 다뤘음
     * 그러나 BI/분석의 변혁은 예상보다 더디게 진행되고 있음
          + 여전히 파워BI, 태블로, 루커 등 오래된 제품군이 시장을 지배하고 있으며, 이들은 종종 더 큰 영업계약에 묶여 공짜로 제공되기도 함
          + 일부 추가적인 통합이 일어났고(Thoughtspot의 Mode 인수, 스노우플레이크의 Sisu 인수), dbt(시맨틱 레이어/MetricFlow), Trace(메트릭 트리) 등 혁신적 접근을 시도하는 젊은 기업도 있지만 아직 초기 단계임
     * 한편 생성형 AI는 데이터 추출/변환뿐 아니라 분석 자체에도 큰 영향을 미칠 수 있음
          + OpenAI의 Code Interpreter(현 Advanced Data Analysis), MS의 엑셀용 파이낸스 챗봇 등 활발한 움직임이 있었음
          + 클라우드 벤더, 데이터브릭스, 스노우플레이크, 오픈소스 진영, 다수의 스타트업이 자연어로 DB 쿼리를 실행하는 ""text to SQL"" 제품을 개발 중이거나 출시함
     * 이는 흥미롭고 잠재적으로 파괴적인 변화를 예고함
          + 분석의 민주화는 오랜 숙원이었는데, 자연어가 노트북/DB/BI 도구의 인터페이스가 된다면 훨씬 더 많은 사람이 분석을 수행할 수 있게 될 것임
     * 그러나 BI 업계 내부에서는 회의적인 시각도 있음
          + SQL의 정밀성과 쿼리 이면의 비즈니스 맥락을 이해하는 것이 자동화의 걸림돌이 될 것이라는 지적

  6. 모던 AI 스택의 부상

     * 지금까지 논의의 상당 부분은 구조화된 데이터 파이프라인에 관한 것이었음
     * 비정형 데이터 인프라는 구조화된 데이터 인프라와 매우 다른 국면을 맞이하고 있음. LLM에 공급할 데이터에 대한 수요가 매우 높음
          + 생성형 AI를 실험하거나 배포하는 모든 기업이 ""데이터는 새로운 석유""라는 클리셰를 재발견하고 있음
          + 모두가 LLM의 힘을 원하지만 자신들의(기업) 데이터로 학습된 모델을 원함
     * 대기업과 스타트업 모두 생성형 AI의 인프라를 제공하기 위해 경쟁적으로 뛰어들고 있음
     * 여러 AI 스케일업 기업이 적극적으로 제품을 진화시키며 모멘텀을 잡으려 하고 있음
          + Databricks, Scale AI(자율주행차용 라벨링 인프라를 OpenAI 등과 제휴해 기업용 데이터 파이프라인으로 발전), Dataiku(멀티벤더/멀티모델용 LLM Mesh 출시) 등
     * 한편 새로운 세대의 AI 인프라 스타트업들이 여러 영역에서 등장하고 있음
          + 벡터 DB: 생성형 AI 모델이 소비할 수 있는 형식(벡터 임베딩)으로 데이터를 저장. Pinecone, Weaviate, Chroma, Qudrant 등 전문 벤더가 급성장 중이고 MongoDB 등 기존 DB 기업도 벡터 검색 기능 추가에 적극적. 한편 컨텍스트 윈도우 확장이 벡터 DB를 필요 없게 만들 것이란 논쟁도 있음
          + 프레임워크: LlamaIndex, Langchain 등 여러 요소를 연결하고 조율하는 역할
          + 가드레일(Guardrails): LLM과 사용자 사이에서 조직 규칙을 준수하는 결과를 내도록 함
          + 평가도구(Evaluators): 생성형 AI 모델 성능을 테스트/분석/모니터링. 공개 벤치마크에 대한 불신으로 인해 어려운 문제로 인식됨
          + 라우터: 사용자 쿼리를 실시간으로 여러 모델에 분산시켜 성능/비용/경험을 최적화
          + 비용관리: LLM 사용 비용을 모니터링
          + 엔드포인트: 모델 등 기반 인프라의 복잡성을 추상화하는 API
     * MDS의 전례를 볼 때 ""모던 AI 스택""이란 용어 사용을 꺼리고 있음
          + 그러나 유사점이 많음: 이들 스타트업은 과거 MDS 기업처럼 ""hot""하고, 떼지어 다니며 마케팅/제품 제휴를 맺음
     * 이 새로운 AI 인프라 스타트업 세대는 MDS 기업과 유사한 도전과제에 직면할 것임
          + 각 카테고리가 수십억 달러 기업을 만들기에 충분히 큰가?
          + 어느 부분을 빅테크(클라우드 기업, 데이터브릭스, 스노우플레이크 등)가 직접 만들어버릴까?

  7. AI 하이프 사이클, 어디쯤 와 있나?

     * AI는 수십년에 걸쳐 AI 여름과 겨울을 반복해 왔음. 지난 10-12년 동안만 해도 세 번의 하이프 사이클이 있었음
          + 1차: 2013-2015년, ImageNet 2012 이후 딥러닝이 주목받으며 시작
          + 2차: 2017-2018년경, 챗봇 붐과 텐서플로 부상
          + 3차: 2022년 11월 이후 현재까지, 생성형 AI
     * 이번 하이프 사이클은 AI 버블로 느껴질 정도로 특히 강렬함. 이는 여러 이유에서 기인
          + 기술 자체가 엄청나게 인상적이고, 기술 영역을 넘어 일반 대중에게도 쉽게 와닿음
          + 건조 파우더(미사용 자금)을 많이 가진 VC들에게 다른 기술 분야가 모두 침체된 상황에서 유일한 투자처였음
     * 하이프는 늘 그렇듯 여러 장점(""광적 열정 없인 위대한 성취 없다"", ""백 가지 꽃이 피게 하라""식의 야심찬 프로젝트에 자금이 몰림)과 단점(하룻밤에 모두가 AI 전문가로 둔갑, 모든 스타트업이 AI 기업이 됨, AI 콘퍼런스/팟캐스트/뉴스레터 범람, AI 마켓맵 홍수)을 동반함
     * 그러나 하이프 사이클의 주요 문제는 필연적인 반작용임
     * 현 국면에는 여러 ""괴팍함(quirkiness)""과 리스크가 내재해 있음
          + 대표 기업(OpenAI)의 특이한 법적/지배구조
          + 충분히 이해되거나 공개되지 않은 ""컴퓨팅 파워 지원 대가로 지분 받기"" 거래의 성행 (round-tripping 가능성 있음)
          + 많은 유망 스타트업이 AI 연구자들이 경영하는 구조
          + 제로금리 시대를 방불케 하는 VC들의 거래 행태 (""땅 싸움"", 거대 라운드, 태어난 지 얼마 안 된 기업에 눈이 휘둥그레지는 밸류에이션)
     * AI 하이프에 금이 가는 조짐도 있지만 (아래 참조), 아직은 매주 새로운 것이 모두를 놀라게 하는 국면임. 사우디의 400억 달러 AI 펀드 소식 등을 볼 때 당분간 자금 유입이 멈추긴 어려워 보임

  8. 실험인가, 현실인가? 2023년은 가짜였나?

     * 하이프를 감안할 때, 지금까지 얼마나 실질적인 일이 있었는지, 단순히 실험에 그친 건 아닌지 되짚어볼 필요가 있음
     * 2023년은 굉장히 바쁜 한 해였음
          + 모든 테크 기업이 제품에 생성형 AI 포함을 서둘렀고
          + 글로벌 2000대 기업 이사회는 모두 AI 도입을 지시했으며, 모건스탠리/씨티뱅크 같은 규제 산업 내 기업들조차 기록적인 속도로 도입을 진행함
          + 소비자들은 생성형 AI 앱에 열광적인 관심을 보였음
     * 그 결과 OpenAI($2B ARR), Anthropic(2024년 예상 매출 $850M), Midjourney(투자 없이 40명이 $200M 매출), Perplexity(MAU 0→1000만) 등이 큰 성공을 거뒀음
     * 그러나 냉소적으로 봐야 할까? 몇 가지 우려사항이 있음
          + 기업의 지출이 PoC나 눈에 띄는 성과에 그친 경우가 많았고, 혁신 예산에서 나온 경우가 많았음
               o 실제 비즈니스 문제 해결보다는 임원들이 뒤처져 보이기 싫어서 추진한 것은 아닐까?
          + 소비자 앱은 이탈률이 높음. 단순 호기심은 아니었나?
          + 개인적으로나 업무상으로나 생성형 AI를 어떻게 활용해야 할지 잘 모르겠다는 사람이 많음
          + 최고의 AI 전문가가 만든 제품이라도 모두 마법 같진 않을 것임
               o $1.3B를 모금하고도 허망하게 문을 닫은 Inflection AI의 사례를 어떻게 봐야 할까? 세상에 또 다른 AI 챗봇이나 LLM이 필요 없다는 방증일까?

  9. LLM 기업들, 그렇게 평준화되지는 않았나?

     * LLM 기업들에 엄청난 규모의 벤처 자본과 기업 자금이 투자되고 있음
     * 지난 18개월간 가장 흔한 질문은 이것: 우리는 결국 평준화될 제품에 엄청난 자본이 소각되는 광경을 보고 있는 걸까? 아니면 이 LLM 기업들이 새로운 AWS, Azure, GCP가 되는 걸까?
     * LLM 기업 입장에선 골치 아픈 사실은, 어느 LLM도 지속적인 성능 우위를 구축하지 못하는 듯 보인다는 점
          + 현재로선 Claude 3 Sonnet과 Gemini Pro 1.5가 GPT-4보다 낫고, GPT-4는 Gemini 1.0 Ultra보다 나은 식이지만, 이런 우열은 몇 주마다 바뀌는 듯함
          + 성능 변동성도 있음 - ChatGPT는 한때 ""제정신을 잃고"" ""게을러졌다""가 일시적으로 회복됨
     * 이에 더해 오픈소스 모델(Llama 3, Mistral, DBRX 등)의 성능도 빠르게 따라잡고 있음
     * 한편, 당초 예상보다 훨씬 더 많은 LLM 기업이 시장에 나와 있음
     * 몇 년 전만 해도 트랜스포머 확장에 필요한 전문성을 지닌 사람이 전 세계적으로 몇 안 된다는 이유로, LLM 기업은 한두 개, 승자독식 구도가 될 것이란 전망이 지배적이었음
     * 그러나 유능한 팀이 생각보다 더 많이 있는 것으로 보임
          + OpenAI, Anthropic 외에도 Mistral, Cohere, Adept, AI21, Imbue, 01.AI 등 기초 AI 연구를 수행하는 스타트업이 많고, 구글, 메타 등의 팀도 있음
     * 그럼에도 현재까지 LLM 기업들은 나쁘지 않은 성과를 내고 있음. OpenAI와 Anthropic은 엄청난 속도로 매출이 증가하고 있음
     * LLM ""모델""은 평준화될지 몰라도, LLM ""기업""은 여전히 거대한 사업 기회를 앞두고 있음
          + 이들은 이미 기반 모델 위에 소비자/기업/개발자용 애플리케이션과 도구를 제공하는 ""풀스택"" 기업이 되었음
     * 클라우드 기업과의 유추가 꽤 적절해 보임
          + AWS, Azure, GCP는 애플리케이션/도구 계층을 통해 고객을 유치/유지하고, 대체로 차별화되지 않은 컴퓨팅/스토리지 계층을 통해 수익을 냄

  10. 혼합적(hybrid) 미래: LLM, SLM

     * 대규모 LLM(GPT-3, GPT-4, GPT-5 등)에 대한 관심이 높지만, SLM(small language model)도 빠르게 발전하고 있음
          + Meta의 Llama-2-13b, Mistral의 Mistral-7b/Mixtral 8x7b, MS의 Phi-2/Orca-2 등
          + SLM은 운영 비용이 저렴하고 파인튜닝이 용이하며 성능도 우수함
     * 특정 작업(코딩, 금융 등)에 특화된 모델도 등장하고 있음
          + Code-Llama, Poolside AI 등 코딩 특화 모델
          + 블룸버그의 금융 모델, Orbital Materials의 소재과학 모델 등 산업 특화 모델
     * 기업에서는 이런 다양한 모델을 조합한 하이브리드 아키텍처로 빠르게 진화하는 중
     * 가격이 내려가고는 있지만 대형 사유 LLM은 여전히 비싸고 지연 문제도 있어서, 사용자/고객은 점점 더 다양한 모델을 조합해 배포하게 될 것임
          + 대형/소형, 상용/오픈소스, 범용/특화 모델을 필요와 예산에 맞게 조합해 사용하는 추세임

  11. 전통적 AI는 죽었나?

     * ChatGPT의 등장으로 그 전까지 첨단으로 여겨지던 AI 기술들이 하루아침에 ""전통적 AI""로 불리게 됨
     * 그러나 전통적 AI(또는 예측 AI)는 구조화된 데이터를 다루며 생성형 AI와는 상호보완적임
     * 전통적 AI는 이미 수많은 기업에서 대규모로 사용되고 있음
     * 앞으로 기업들은 LLM을 어떤 작업에, 전통적 AI 모델을 어떤 작업에 사용할지, 그리고 둘을 어떻게 결합할지 고민하게 될 것임

  12. 얇은 래퍼, 두꺼운 래퍼, 그리고 풀스택이 되기 위한 경쟁

     * 얇은 래퍼(thin wrapper): OpenAI 같은 타사 기술에 의존하는 제품이라는 부정적 의미로 2023년 유행한 용어
          + Jasper 같은 스타트업의 어려움이 이를 뒷받침함
     * 그러나 시간이 지나며 차별화 방안도 나타나고 있음
          + 특정(수직적) 문제에 집중
          + 워크플로우, 협업, 깊은 통합 기능 확보
          + 모델 파인튜닝, 하이브리드 시스템 구축 등 AI 모델 수준의 작업 수행
     * 즉, 풀스택(애플리케이션+인프라)이 되어야 하고 동시에 특화(narrow)되어야 함

  13. 주목할 만한 영역: AI 에이전트, Edge AI

     * AI 에이전트는 자동화의 최종 단계로 큰 관심사임
          + 하지만 아직 생성형 AI가 취약한 면모를 보이고 있어 기대에 못 미치는 상황
          + AI 시스템에 메모리 기능 추가 등 보완이 필요함
          + 그럼에도 향후 1~2년 내 가장 흥미로운 분야가 될 것으로 보임
     * Edge AI도 관심사임
          + GPU 없이 기기 내에서 구동되는 모델은 오랜 숙원
          + 스마트폰이나 IoT 기기 등에 적용 시 큰 잠재력
          + Mixtral, Ollama, Llama.cpp 등 활발한 오픈소스 프로젝트 진행 중

  14. 생성형 AI, AGI로 가는 중인가 정체되는 중인가?

     * 기술의 급속한 발전에도 불구, 생성형 AI가 ① 자원(연산, 데이터) 한계에 봉착하거나 ② 추론 능력의 부재로 한계에 직면할 수 있다는 우려가 있음
     * 2018년에도 유사한 논의가 있었고, 그 후로는 자원 투입 확대가 두드러졌음
     * 추론(reasoning) 분야에서는 DeepMind의 AlphaGeometry 등 의미있는 진전이 있었음
     * 자원의 한계는 평가하기 어려움. 연산량은 계속 늘어나고 있고(NVIDIA Blackwell), 데이터도 합성데이터 생성 등으로 극복 여지가 있어 보임
     * 스타트업 생태계 참여자 입장에서는 GPT-5의 성능이 GPT-4 대비 얼마나 향상될지가 기술 발전 속도의 바로미터가 될 것임
          + 설사 생성형 AI 발전이 당장 멈춘다 해도 당분간은 사업 기회가 충분할 것으로 보임

  15. GPU 전쟁 (NVIDIA는 과대평가되었나?)

     * 연산량이 세상에서 가장 귀중한 자원이 되는 새로운 시대인가, 아니면 GPU 과잉생산으로 인한 거품인가?
     * NVIDIA는 AI 대응 GPU 시장을 사실상 독점하며 주가가 5배 뛰는 등 호황을 누리고 있음
          + VC들이 AI에 투자한 자금이 NVIDIA로 흘러갔기 때문일 수도
     * 그러나 하드웨어 제조(TSMC 공장)는 쉽지 않은 일이라 NVIDIA의 운명은 현재 호황의 지속가능성에 달려있음
     * AMD, Intel 등 경쟁자들의 도전도 있지만 장기적으로 AI 칩 제조사의 전망은 밝아 보임

  16. 오픈소스 AI, 과유불급인가?

     * 지난 1년간 오픈소스 AI가 크게 각광받았음
          + Meta의 Llama, Mistral, Google의 Gemma 등이 주목받았고 HuggingFace도 수많은 모델을 호스팅하며 계속 성장 중
          + 생성형 AI 분야 가장 혁신적인 작업의 상당 부분이 오픈소스 커뮤니티에서 이뤄지고 있음
     * 그러나 오픈소스 커뮤니티에 과잉 현상도 나타나고 있음
          + 수십만 개의 오픈소스 AI 모델이 공개되었지만, 대부분 장난감 수준이거나 주말 프로젝트에 그침
          + 순위가 수시로 바뀌고 며칠 만에 유명해졌다가 사라지는 모델도 많음
     * 시장은 자정 작용을 통해 소수의 성공적인 오픈소스 프로젝트만 클라우드 기업 등의 지원을 받게 될 것임. 그러나 그때까지는 혼란스러운 상황이 이어질 전망

  17. AI 비용은 실제로 얼마일까?

     * 생성형 AI의 경제성은 빠르게 진화하는 주제임
          + 검색 시장에서 구글에 도전하려면 링크 10개 제공 비용보다 AI 기반 답변 제공 비용을 낮춰야 함
          + AI 기반 소프트웨어 기업은 추론 비용이 매출총이익을 잠식하지 않도록 해야 함
     * AI 모델 고객/사용자 입장에서는 좋은 소식: 가격 인하 경쟁이 예상보다 빨리 일어나고 있음
          + 오픈소스 AI와 상용 추론 벤더의 등장으로 고객 입장에서 전환 비용이 매우 낮아졌고, 이는 OpenAI와 Anthropic에 압박 요인으로 작용 중
          + 임베딩 모델 가격이 동시다발적으로 인하된 것이 예
     * 공급자 입장에서는 AI 구축/서비스 비용이 여전히 높음
          + Anthropic은 매출의 절반 이상을 클라우드 비용으로 지출했다고 함
          + 데이터 라이선싱 비용도 만만치 않음
     * 사용자 입장에서는 VC 지원을 받는 무료 서비스를 즐기는 것도 방법

  18. 거대 기업과 AI 정치 경제의 변화: 마이크로소프트가 승리했나?

     * 2022년 말부터 제기된 질문: 빅테크가 생성형 AI의 가치를 대부분 차지하게 될 것인가?
     * AI에서는 데이터, 연산량, 연구자가 많을수록 유리함. 빅테크는 이를 잘 알고 있고 적극적으로 대응하고 있음
     * MS는 가장 효과적으로 대응하고 있는 듯함(4-D 체스를 두듯이)
          + OpenAI에 130억 달러 투자
          + 오픈소스 경쟁자 Mistral과 제휴
          + ChatGPT 경쟁자 Inflection AI 인수
          + Azure 매출도 크게 성장 중
     * Google/Amazon은 Anthropic과 제휴 및 투자, Amazon은 Hugging Face와 제휴
     * Meta는 오픈소스 AI에 올인하는 모습
     * 중국발 변화도 주목할 만함
     * 스타트업이 성장할 여지가 얼마나 될지가 관건
          + OpenAI, Anthropic 등 소수는 좋은 파트너십을 통해 탈출 속도를 냈지만
          + 많은 스타트업의 미래는 불투명함
          + Inflection AI 인수, Stability AI CEO 사태 등은 ""2군"" 스타트업들의 고전을 시사

  19. OpenAI 열광 vs 냉소

     * OpenAI는 여전히 매력적임
          + 기업가치 860억 달러, 고속 매출 증가, 창업자 간 불화(?), Sam Altman은 이 세대의 스티브 잡스
     * 흥미로운 질문들:
          + OpenAI가 너무 많은 걸 하려는 건 아닌가? 수직적으로나 수평적으로 AI의 모든 것을 하겠다는 것 같은데 무리수 아닌지?
               o 상황이 유사했던 코인베이스의 전례가 있긴 함
               o 경쟁이 치열해지는 상황에서 매우 어려운 도전이 될 것임
               o ChatGPT 이슈, 마켓플레이스 부진 등은 OpenAI도 어려움을 겪을 수 있음을 시사
          + OpenAI와 MS가 결별할까?
               o MS의 지원은 OpenAI에 큰 도움(자원, 기업 고객 등)
               o 그러나 MS는 OpenAI에 의존하지 않음을 분명히 하고 있고(mistral 제휴, Inflection AI 인수 등) 자체 AI 역량도 충분함
               o 반면 OpenAI는 MS에만 의존하는 걸 원치 않을 수도. 다른 클라우드에 배포되기를 바랄 수 있음
               o OpenAI의 거대한 야망과 MS의 지배력 추구를 고려할 때 양사가 경쟁자로 돌변할 가능성도 있어 보임

  20. 2024년은 기업용 AI의 해가 될까?

     * 2023년 기업의 AI 도입은 개념증명 수준에 그쳤음
     * 2023년 생성형 AI의 최대 수혜자는 AI 컨설팅으로 20억 달러 매출을 올린 Accenture 같은 기업
     * 2024년이 기업용 생성형 AI의 원년이 되길 기대하는 분위기 (전통적 AI는 이미 많이 도입된 상태)
     * 그러나 아직 풀어야 할 숙제가 많음:
          + 유스케이스가 개발자 코파일럿, 기업 지식관리, 고객서비스 챗봇 등 일부에 국한됨
          + 어떤 도구를 선택해야 할지 모호함 (상용/오픈소스, 대형/소형 모델, 수평/수직 특화 등 조합 필요)
          + 인재 부족 심각 (개발자도 구하기 힘든데 ML 엔지니어는 오죽할까)
          + 망상(hallucination) 문제, 블랙박스 문제 등 기업 입장에선 심각한 리스크
          + ROI 검증 필요 (팔로알토네트웍스는 출장 관리 비용을 절반으로 줄였다는 등 일부 사례는 있음)
     * 긍정적인 것은 기업들이 혁신 예산이 아닌 OpEx 예산을 투입하려 한다는 점
     * 그러나 대규모 도입까지는 3~5년은 걸릴 듯

  21. AI가 SaaS를 죽일까?

     * 지난 1년간 유행했던 아이디어 중 하나
     * AI 덕에 코딩 생산성이 10배 올라 소수 개발자로도 맞춤형 SaaS를 만들 수 있게 되면 기성 SaaS가 필요 없어질 것이라는 주장
     * 또는 AI가 HR/재무/영업 등 모든 것을 대신하게 되면 별도 소프트웨어가 필요 없다는 주장도
     * 두 시나리오 모두 완전한 형태로 실현되긴 어려워 보임
     * 그보다는 기존 SaaS에 AI가 내재화되어 더 강력해지는 것이 유력해 보임

  22. AI가 벤처캐피탈을 죽일까?

     * AI가 VC의 기업 선정과 투자 후 가치 제고를 자동화할 수 있을지 여부를 차치하고, AI 시대에 VC 자산군의 규모가 적절한지에 대한 논의가 필요함
     * VC가 너무 작은 것 아닌가?
          + OpenAI 같은 기업은 수십억 달러, 더 많은 자금이 필요함
          + MS 같은 대기업이 이런 자금의 상당 부분을 제공하고 있음 (연산량 제공 형태일 가능성 높음)
          + 일부 VC는 대형 기반모델 기업에 투자하고 있지만, 전통적인 VC 소프트웨어 투자 모델과는 거리가 있음
          + AI 투자에는 메가 규모 펀드가 필요할 수도 (사우디는 미국 VC와 협력해 400억 달러 AI 펀드를 조성한다는 소식)
     * VC가 너무 큰 것 아닌가?
          + AI로 개발자 생산성이 10배 오르고, 자동화된 영업/마케팅이 가능해지면
          + 소수 팀이나 심지어 1인 기업도 매출 수억 달러를 올리고 상장할 수 있는 시대가 올지도 모름
          + 매출 1억 달러 1인 기업이 창업부터 EXIT까지 과연 VC 자금이 필요할까?

  23. AI가 소비자 시장을 되살릴까?

     * 소셜미디어/모바일 시대 이후 침체기에 빠진 소비자 시장, 생성형 AI로 반등할 수 있을까?
     * 흥미로운 영역들:
          + 검색: 수십년만에 구글에 도전장을 내민 Perplexity AI, You.com 등 검색 엔진에서 답변 엔진으로의 진화를 주도하는 스타트업들
          + AI 컴패니언: 디스토피아적 우려를 차치하고, 모든 사람이 자신만의 끝없이 인내심 있고 도움 되는 동반자를 가질 수 있다면?
          + AI 하드웨어: Humane, Rabbit, VisionPro 등 소비자용 AI 하드웨어의 흥미로운 시도들
          + 초개인화된 엔터테인먼트: 생성형 AI 도구가 발전하고 저렴해지면서 어떤 새로운 형태의 오락과 예술이 탄생할까?

  24. AI와 블록체인: 황당한가, 흥미로운가?

     * AI와 크립토의 만남은 완벽한 트위터 밈거리임
     * 그러나 연산량, 데이터, 인재 등 AI 자원이 소수 기업에 집중되는 것은 우려스러운 일
     * 블록체인의 핵심은 분산 네트워크를 통해 참여자들이 자원과 자산을 공유하도록 하는 것
     * 양자 사이에는 탐구할 만한 영역이 있음 (몇 년 전부터 고민해 온 주제)
     * Bittensor(분산 AI 플랫폼), Render(분산 GPU 렌더링 플랫폼), Arweave(분산 데이터 플랫폼) 등 관련 프로젝트들의 가속화가 눈에 띔
     * 크립토 업계가 스스로를 도울 수 있을지, 아니면 AI 관련 밈코인과 사기로 타락할지가 관건

  BONUS: 다루지 않은 주제들

     * AI가 우리를 모두 죽일 것인가? AI 둠스데이 vs AI 가속주의자
     * 규제, 프라이버시, 윤리, 딥페이크
     * AI는 실리콘밸리에서만 만들어질 수 있나?

[Part III: Financing, M&A & IPO]

  Financing

     * AI 투자와 그 외 분야 투자가 극명하게 엇갈리는 ""두 시장 이야기"" 양상을 보이고 있음
     * 전반적인 투자는 계속 줄어 2023년에는 42% 감소한 2,484억 달러를 기록함. 2024년 첫 몇 달은 약간의 회복세를 보이고 있으나 아직은 비슷한 추세임
     * 데이터 인프라는 앞서 말한 여러 이유로 투자 유치가 매우 저조했고, Sigma Computing과 Databricks 정도가 예외적 사례였음
     * 반면 AI는 완전히 다른 이야기였음
     * AI 투자 시장의 특징은 다음과 같음:
          + 소수의 스타트업, 특히 OpenAI, Anthropic, Inflection AI, Mistral 등에 자본이 집중됨
          + MS, 구글, NVIDIA 등 기업 투자자(CVC)의 비정상적으로 높은 비중
          + CVC 거래 내역상 실제 현금과 ""컴퓨팅 파워 지원 대가로 받은 지분"" 간 불투명성 존재
     * 2023년 MAD 이후 주목할 만한 거래는 다음과 같음(연대순, 전체 목록 아님):
          + OpenAI(대표적 기반모델 개발사): 2회에 걸쳐 103억불 조달, 기업가치 860억불
          + Adept(기반모델 개발사): 3.5억불 투자 유치, 기업가치 10억불
          + AlphaSense(금융 리서치 플랫폼): 2회에 걸쳐 4.75억불 유치, 기업가치 25억불
          + Anthropic(기반모델 개발사): 3회에 걸쳐 64.5억불 유치, 기업가치 184억불
          + Pinecone(벡터DB 플랫폼): 1억불 유치, 기업가치 7.5억불
          + Celestial AI(광학 인터커넥트 플랫폼): 2회에 걸쳐 2.75억불 유치
          + CoreWeave(GPU 클라우드): 4.21억불 유치, 기업가치 25억불
          + Lightmatter(광학칩 개발사): 2회에 걸쳐 3.08억불 유치, 기업가치 12억불
          + Sigma Computing(클라우드 분석 플랫폼): 3.4억불 유치, 기업가치 11억불
          + Inflection(기반모델 개발사): 13억불 유치, 기업가치 40억불
          + Mistral(기반모델 개발사): 2회에 걸쳐 5.28억불 유치, 기업가치 20억불
          + Cohere(기반모델 개발사): 2.7억불 유치, 기업가치 20억불
          + Runway(생성 비디오 모델 개발사): 1.91억불 유치, 기업가치 15억불
          + Synthesia(기업용 비디오 생성 플랫폼): 9천만불 유치, 기업가치 10억불
          + Hugging Face(오픈소스 ML 플랫폼): 2.35억불 유치, 기업가치 45억불
          + Poolside(코딩용 기반모델 개발사): 1.26억불 유치
          + Modular(AI 개발 플랫폼): 1억불 유치, 기업가치 6억불
          + Imbue(AI 에이전트 개발사): 2.12억불 유치
          + Databricks(데이터/분석/AI 솔루션): 6.84억불 유치, 기업가치 432억불
          + Aleph Alpha(기반모델 개발사): 4.86억불 유치
          + AI21 Labs(기반모델 개발사): 2.08억불 유치, 기업가치 14억불
          + Together(생성형 AI 클라우드): 2회에 걸쳐 2.085억불 유치, 기업가치 12.5억불
          + VAST Data(딥러닝 데이터 플랫폼): 1.18억불 유치, 기업가치 91억불
          + Shield AI(항공우주/방위용 AI 파일럿): 5억불 유치, 기업가치 28억불
          + 01.ai(기반모델 개발사): 2억불 유치, 기업가치 10억불
          + Hadrian(항공우주/방위용 부품 제조): 1.17억불 유치
          + Sierra AI(고객 서비스용 AI 챗봇): 2회에 걸쳐 1.1억불 유치
          + Glean(기업용 AI 검색): 2억불 유치, 기업가치 22억불
          + Lambda Labs(GPU 클라우드): 3.2억불 유치, 기업가치 15억불
          + Magic(코딩용 기반모델 개발사): 1.17억불 유치, 기업가치 5억불

  M&A, 비상장 거래

     * 2023년 MAD 이후 M&A 시장은 꽤 조용했음
     * 많은 전통적 소프트웨어 기업들은 M&A보다는 자사 주가와 전반적 사업에 집중하는 모습을 보임
     * 특히 엄격해진 반독점 환경도 잠재적 인수자들에게는 부담으로 작용
     * 사모펀드(PE)는 악화된 시장에서 저렴한 기회를 찾으며 비교적 활발히 움직임
     * MAD에 등장했던 주목할 만한 거래는 다음과 같음 (규모순):
          + Broadcom(반도체 제조사), VMWare(클라우드 기업) 인수, $69B
          + Cisco(네트워크/보안 인프라), Splunk(모니터링/옵저버빌리티) 인수, $28B
          + Qualtrics(CX 관리), Silver Lake/CPP의 비상장화, $12.5B
          + Coupa(지출관리 플랫폼), Thoma Bravo의 비상장화, $8B
          + New Relic(모니터링/옵저버빌리티), Francisco Partners/TPG 인수, $6.5B
          + Alteryx(분석 플랫폼), Clearlake/Insight의 비상장화, $4.4B
          + Salesloft(매출 오케스트레이션), Vista Equity 인수 $2.3B
               o Vista는 고객경험용 AI 챗봇 기업 Drift도 인수
          + Databricks(데이터 레이크하우스), MosaicML(AI 개발 플랫폼) 인수, $1.3B
               o Arcion, Okera 등도 소규모 인수
          + Thoughtspot(분석 플랫폼), Mode Analytics(BI) 인수, $200M
          + Snowflake(데이터 웨어하우스), Neeva(AI 검색 엔진) 인수, $150M
          + DigitalOcean(클라우드), Paperspace(AI 개발) 인수, $111M
          + NVIDIA(AI 칩), OmniML(엣지 AI 최적화) 인수
     * MS의 Inflection AI 인수도 특이한 사례
     * 2024년이 AI M&A의 해가 될지는 시장 모멘텀에 달려있음
     * 하위 시장에서는 지난 1-2년간 유망한 AI 스타트업들이 많이 투자받았음. 과거 AI 호황기에는 초기 투자 이후 실적 대비 거액에 인재 인수(acquihire)가 많이 일어났음. AI 인재는 여전히 귀한 편
     * 상위 시장에서는 선도적 데이터 플랫폼과 AI 플랫폼 간 컨버전스가 추진력을 얻고 있으나 가격이 만만치 않을 듯

IPO

     * AI는 증시에서도 뜨거운 화제였음. ""매그니피센트 7""(NVIDIA, 메타, 아마존, MS, 알파벳, 애플, 테슬라) 주가는 2023년 49% 이상 올랐고 전반적 증시 상승을 이끌었음
     * 그러나 순수 AI 종목은 여전히 많이 부족한 상황. 몇 안 되는 AI 종목은 프리미엄을 받고 있음(팔란티어 주가는 2023년 167% 상승)
     * 이는 다수의 AI 관련 IPO 후보 스타트업에겐 호재일 듯. Databricks를 필두로 Celonis, Scale AI, Dataiku, Fivetran 등 상당한 규모의 기업들이 IPO를 준비 중
     * OpenAI와 Anthropic이 상장에 어떤 입장을 취할지도 흥미로운 주제
     * 한편 2023년 IPO 시장은 매우 부진했음. MAD 관련 기업 중 소수만 상장에 성공:
          + Klaviyo(마케팅 자동화): 2023.9월 상장, 기업가치 $9.2B
          + Reddit(AI 기업에 콘텐츠 라이선스 제공): 2024.3월 상장, 기업가치 $6.4B
          + Astera Labs(AI/클라우드용 반도체): 2024.3월 상장, 기업가치 $5.5B

결론

     * 우리는 매우 특별한 시기에 살고 있음. 패러다임 전환의 초입에 있음.
     * 실험하고 새로운 것을 시도할 때. 우리는 이제 막 시작했을 뿐

   The 2020 Data & AI Landscape
   2021년 데이터/ML/AI 업계 지도와 최신 트렌드
"
"https://news.hada.io/topic?id=14111","전 세계를 거의 감염시킬 뻔한 xz Utils 백도어에 대해 알고 있는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               전 세계를 거의 감염시킬 뻔한 xz Utils 백도어에 대해 알고 있는 것

xz Utils 백도어 사태: 거의 전 세계를 감염시킬 뻔한 사건에 대해 알고 있는 것

     * xz Utils는 리눅스를 비롯한 거의 모든 유닉스 계열 운영체제에 설치되어 있는 데이터 압축 유틸리티임.
     * 이 소프트웨어에 악의적인 업데이트가 이루어져 백도어가 심어질 뻔한 사건이 발생함.
     * 마이크로소프트 개발자가 이 백도어를 발견하고 공개함으로써, 데비안과 레드햇 같은 주요 리눅스 배포판에 합쳐지기 직전의 위기를 막음.

백도어가 어떻게 작동하는가?

     * 버전 5.6.0과 5.6.1에 추가된 악성 코드는 sshd, 즉 SSH 연결을 위한 실행 파일을 조작함.
     * 특정 암호화 키를 가진 사람이 SSH 로그인 인증서에 코드를 숨겨 업로드하고, 백도어가 설치된 장치에서 실행할 수 있음.
     * 실제로 어떤 코드가 업로드되었는지는 알려지지 않았으나, 이론적으로 암호 키 도용이나 멀웨어 설치 등 다양한 행위가 가능함.

백도어가 심어진 경로

     * 백도어는 수년에 걸쳐 만들어진 것으로 보임.
     * 2021년, JiaT75라는 사용자가 처음으로 오픈소스 프로젝트에 기여함.
     * 2023년 1월, JiaT75는 xz Utils에 첫 기여를 하고, 이후 Jia Tan이라는 이름으로 점점 더 많은 역할을 맡음.
     * Tan은 oss-fuzz 프로젝트에서 Collins의 연락처 정보를 자신의 것으로 교체하고, 테스트 중 ifunc 기능을 비활성화하도록 요청함.
     * 이러한 변화는 Tan이 xz Utils에 악성 변경을 가할 때 이를 탐지하는 것을 방해함.

영향을 받은 배포판

     * 페도라 Rawhide, 페도라 41, 데비안 테스팅/언스테이블/익스페리멘탈, 오픈수세 텀블위드 및 마이크로OS, 칼리 리눅스 등이 백도어가 심어진 xz 버전을 포함하고 있었음.

GN⁺의 의견

     * 이 사건은 오픈소스 생태계의 보안 취약점을 드러내며, 개발자 커뮤니티의 경각심을 높이는 계기가 됨.
     * 백도어가 심어진 소프트웨어가 널리 사용되는 만큼, 이번 사태는 리눅스 사용자 및 관리자에게 신속한 업데이트와 보안 점검의 중요성을 상기시킴.
     * 이와 유사한 사례로 SolarWinds 해킹 사건이 있었으며, 그 사건 역시 공급망 공격의 위험성을 보여줌.
     * 오픈소스 프로젝트에 기여하는 개발자들의 신원을 검증하고 코드 리뷰 과정을 강화하는 것이 필요함.
     * 이번 사건을 계기로, 보안 감사와 취약점 탐지 도구의 중요성이 더욱 부각될 것으로 예상됨.

        Hacker News 의견

     * OpenSSH는 가장 인기 있는 sshd 구현체로, liblzma 라이브러리에 연결되지 않지만, Debian과 다른 많은 리눅스 배포판들은 systemd에 sshd를 연결하는 패치를 추가한다. systemd는 liblzma에 연결되어 있어 xz Utils가 sshd에 영향을 미칠 수 있음.
     * Xz는 오픈 소스 압축 프로그램이자 라이브러리로, 압축된 데이터를 다루는 자신만의 프로그램을 작성하는 데 도움이 됨. OpenSSH를 포함한 많은 다른 프로그램에서 사용됨.
     * GNU의 binutils도 liblzma에 연결되어 있으며, OpenSSH보다 더 널리 사용됨. 대부분의 경우, binutils는 OpenSSH, sshd가 실행되는 운영 체제 등의 컴파일에 사용됨. 악의적인 행위자들이 오픈 소스 소프트웨어에 깊숙이 침투할 수 있는 좋은 프로젝트를 선택했음을 시사함.
     * XZ 프로젝트의 안정성을 장기적으로 돕기 위해 더 많은 테스트를 작성하는 데 도움이 될 표준화된 테스트 프레임워크 사용이 목표임. 많은 기능이 아직 테스트되지 않았기 때문에 이러한 테스트가 유용할 것임.
     * RSA_public_decrypt 함수에 연결할 수 있는 링킹 메커니즘에 대한 논의가 많지 않았음. 프로세스 분리 등을 통해 달성할 수 있는 것에 대한 많은 논의가 있었지만, 그 함수 호출 리디렉션에 대해서는 적음. 중요한 컴포넌트를 신뢰 계층 방식으로 연결할 수 있는 방법을 설정할 수 있을지에 대한 의문 제기.
     * 세계를 ""거의"" 감염시켰다고 하는데, 실제로는 아치, 젠투, 오픈수세 텀블위드와 같은 인기 있는 리눅스 배포판들이 수주간 백도어를 포함한 상태로 배포되었고, 텀블위드에서는 확실히 작동했음. ""거의""라는 표현은 부적절함.
     * 향후 12개월 이내에 유사한 사례가 발견될 것이라는 예측. 유지보수자들이 서로의 과거 커밋을 의심하면서 시작될 것임.
     * 이 사건에서 얻은 개인적인 교훈:
          + 소스 저장소와 다른 코드를 포함하는 소스 배포 tarball은 나쁨. 이러한 방식에서 벗어나야 함.
          + 자동 생성된 아티팩트는 항상 커밋되어야 함.
          + 코드 리뷰 중에 누구나 넘겨보는 자동 생성된 아티팩트는 문제가 될 수 있음. 이러한 유형의 파일이 저장소에 있을 경우, 누군가가 조작하지 않았는지 확인하는 자동 테스트가 있어야 함.
          + autotools와 autotools 문화는 나쁨.
          + libsystemd는 생태계에 문제를 일으킴. systemd를 비판하는 사람들이 종종 무시당하지만, systemd는 크고 복잡하며 많은 의존성을 가지고 있고, 대부분의 프로그램은 그 일부만 사용함.
          + 코드 재사용이 항상 좋고, 작은 기능을 위해 큰 라이브러리에 의존하는 것이 좋다는 문화는 잘못됨. 의존성은 유지 관리 부담과 보안 위험을 가져오므로, 이를 기능성과 균형을 맞춰야 함.
          + 배포판 유지보수자들이 패키지에 상당한 패치를 적용하는 것은 문제가 될 수 있음. 실제로 관리하는 사람이 없는 널리 사용되는 사실상의 포크를 만들어냄.
          + 개발자들에게 금전적으로 OSS 작업이 가능하도록 해야 함. liblzma와 xz-utils는 수천만 개의 설치를 가지고 있지만, 정신 건강 문제를 가진 단일 유지보수자가 있음.
          + 코드 리뷰와 유지보수자 교체는 현재 지정학적 고려 사항을 고려해야 함.
     * 문제를 발견한 사람이 Azure Postgres에서 일하는 마이크로소프트 엔지니어였음에 대한 감사의 표현. 이제 Azure를 좋아하게 됨.
     * xz의 원래 유지보수자가 Jia Tan에게 책임을 넘겼지만, 실제로 만나거나 전화 통화를 한 적이 없을 수도 있음. 이메일/GitHub을 통해서만 소통하는 것이 일반적인지에 대한 의문 제기. 이 이야기 이후에 오픈 소스 프로젝트의 유지보수자들이 더 조심할 것으로 예상됨.
     * 이 백도어가 일찍 발견되었다고 생각하는 동안, 이미 목적을 달성했을 수도 있음. 특히 Kali와 Debian과 같은 롤링 릴리스 배포판을 사용하는 개발자들이 목표였다면 더욱 그러함.
     * xz Utils의 오랜 유지보수자인 Lasse Collin이 소프트웨어를 자주 또는 충분히 빠르게 업데이트하지 않았다는 주장은 실수였음을 시사함.
"
"https://news.hada.io/topic?id=14186","Opera 브라우저, 사용자가 LLM을 다운받아 로컬로 실행하는 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Opera 브라우저, 사용자가 LLM을 다운받아 로컬로 실행하는 기능 추가

     * 오페라가 사용자가 대형 언어 모델(LLMs)을 자신의 컴퓨터에서 로컬로 다운로드하고 사용할 수 있도록 하는 기능을 발표
     * 개발자 스트림 업데이트를 받는 오페라 원 사용자에게 먼저 제공되며, 150개 이상의 모델 중에서 선택할 수 있음
     * 메타의 Llama, 구글의 Gemma, Vicuna 등이 포함
     * Opera의 AI 기능 드롭 프로그램의 일부로 제공됨
     * 오픈소스 프레임워크인 Ollama를 사용하고 있음. 현재 사용 가능한 모델들은 Ollama의 라이브러리의 일부이지만, 향후 다른 출처의 모델들을 포함시키려고 함
"
"https://news.hada.io/topic?id=14210","팜OS를 재구현한 PumpkinOS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          팜OS를 재구현한 PumpkinOS

PumpkinOS 소개

     * PumpkinOS는 현대 아키텍처(x86, ARM 등)에서 실행되는 PalmOS의 재구현체임.
     * 평범한 PalmOS 에뮬레이터가 아니며, PalmOS ROM이 필요하지 않지만 m68K PalmOS 애플리케이션을 실행할 수 있음.
     * PumpkinOS에 대한 다양한 측면을 설명하는 일련의 기사는 여기에서 확인 가능: PumpkinOS 기사.

애플리케이션

     * Launcher는 PumpkinOS가 시작될 때 처음으로 실행되는 애플리케이션으로, 다른 애플리케이션을 시작할 수 있는 패널을 보여줌.
     * Preferences는 결국 PumpkinOS를 구성하기 위한 모든 환경 설정 옵션을 포함할 것임.
     * Command는 아직 실험적인 명령 셸임.

PIM 애플리케이션

     * 이번 릴리스에는 PalmOS에서 찾을 수 있는 네 가지 PIM 애플리케이션(AddressBook, MemoPad, ToDoList, DateBook)이 포함됨.
     * 이 애플리케이션들의 소스 코드는 하나 이상의 PalmOS SDK에서 배포되었으며, PumpkinOS에서 올바르게 컴파일되도록 조정됨.
     * AddressBook과 MemoPad에 의해 생성된 레코드는 PalmOS 버전과 호환될 수 있으나, 단어 크기와 엔디언 차이로 인해 ToDoList와 DateBook에 의해 생성된 레코드는 호환되지 않음.
     * 이 애플리케이션들은 몇 가지 레코드를 생성하고 편집할 수 있는 지점까지만 테스트됨.
     * 아직 몇 가지 문제가 있으며, 일부 기능은 전혀 테스트되지 않았음.
     * 여기서의 목표는 미래의 PumpkinOS에서 기대할 수 있는 것을 보여주는 것임.

버그 트래커 계획

     * 버그 트래커를 설정하여 개선 사항과 버그를 문서화할 계획임.

라이선스

     * PumpkinOS는 GPL v3 라이선스 하에 배포됨.
     * 라이선스 디렉토리에는 PumpkinOS에서 사용된 다양한 구성 요소의 특정 라이선스 정보가 포함됨.
     * 무언가 누락되었거나 잘못된 것이 있다면 알려줄 것을 요청함.

빌드 방법

     * PumpkinOS는 소스 코드에서 직접 빌드해야 함.
     * IDE가 필요 없으며, 명령 줄에서 빌드할 수 있음.
     * 64비트 Windows 사용자는 MSYS2를 사용할 수 있으며, 설치 후 추가 패키지를 설치하고 PumpkinOS 저장소를 클론하여 빌드 스크립트를 실행함.
     * 32비트 Windows와 64비트 Linux 기반 OS에서도 비슷한 방식으로 빌드 가능함.
     * Windows 11과 최신 Windows 10에서는 WSL을 통해 PumpkinOS를 빌드할 수 있음.

실행 방법

     * 64비트 Windows에서는 pumpkin.bat을, 32비트 Windows에서는 pumpkin32.bat을 실행함.
     * Linux나 WSL에서는 pumpkin.sh를 실행함.
     * PumpkinOS는 새 창에서 열리며, WSL에서는 X-Window Manager가 필요할 수 있음.
     * PumpkinOS 실행 시 vfs/app_install 내의 모든 PRC가 vfs/app_storage 내의 폴더로 확장되어 제거됨.
     * 실험적 단계이므로 몇 가지 문제가 발생할 수 있음.
     * 실행 후에는 루트 디렉토리에 pumpkin.log 파일이 생성됨.
     * Windows 버전은 드래그 앤 드롭 기능을 구현하지만, Linux 버전은 이 기능이 없어 수동으로 PRC를 복사해야 함.
     * gdb를 사용하여 Windows, Linux, WSL에서 PumpkinOS를 디버깅할 수 있음.

GN⁺의 의견

     * PumpkinOS는 고전적인 PalmOS 애플리케이션을 현대적인 컴퓨팅 환경에서 부활시키는 흥미로운 프로젝트임. 이는 레트로 컴퓨팅 커뮤니티나 PalmOS에 애착을 가진 사용자들에게 매력적일 수 있음.
     * GPL v3 라이선스 하에 배포되므로, 개발자들은 소스 코드를 자유롭게 검토하고 수정할 수 있어, 오픈소스 프로젝트의 장점을 누릴 수 있음.
     * 현재 실험적인 단계이기 때문에, 사용자들은 버그와 호환성 문제를 경험할 수 있으며, 이는 개발자에게 중요한 피드백을 제공할 기회를 제공함.
     * 이 프로젝트는 기존 PalmOS 애플리케이션의 보존과 역사적 가치를 인정하는 중요한 작업이지만, 현대적인 기능이나 보안 표준에는 미치지 못할 수 있음을 인지해야 함.
     * PalmOS와 유사한 다른 프로젝트나 에뮬레이터가 있을 경우, 사용자들은 이들과 비교하여 PumpkinOS의 장단점을 평가할 수 있음.

        Hacker News 의견

     * PumpkinOS 프로젝트에 대한 감탄

     PumpkinOS 프로젝트는 상당히 놀라운 성과임. 평균 Palm 앱이 기대하는 모든 시스템 호출과 호환되기 위해 얼마나 많은 노력이 필요했을지 상상하기 어려움. Palm은 메모리와 관련하여 매우 특이한 작업을 수행했는데, 어느 정도 크기가 있는 것은 OS가 임의로 재배열할 수 있는 특별한 메모리 블록에 넣어야 했고, 접근하는 동안 블록의 핸들을 잠그는 것이 필요했음. 이런 것들을 PumpkinOS에서 구현하는 것은 분명히 도전적이면서도 재미있었을 것임.
     * Palm OS에 대한 추억

     Palm OS용 작은 게임을 만들었던 기억이 남. 당시 새로운 Palm OS 개발 스위트를 사용하여 프로그램을 만들 수 있게 될 다음 버전을 기대했음. 또한 앱이 중앙 이벤트 루프를 가진 마지막 OS였음. 현재는 UI 프레임워크가 이를 대신 처리해주기 때문에 작업이 더 쉬워졌지만, 그 시절이 그립기도 함.
     * Space Trader 게임에 대한 흥분

     중학교 때 Palm Vx를 사용했고, 수업 중 책상 아래에서 Space Trader 게임을 즐기던 좋은 추억이 있음.
     * rePalm 프로젝트 소개

     RP2040과 같은 ARM 마이크로컨트롤러에서 PalmOS를 실행하기 위한 rePalm 프로젝트에 대한 관심을 제안함. rePalm 프로젝트 링크
     * Palm 전화기와 Sprint 고객의 경험

     Palm 전화기 시대부터 Sprint 고객이었고, 2년 전까지 색상이 있는 Treo 전화기를 사용했음. 기계식 키보드가 매우 사용하기 좋았음. (터치 스크린을 사용하기 어려운 손가락이 약간 변형되어 있음.) T-Mobile과의 합병으로 라디오 부분이 사라져서 매우 안타까움.
     * Palm에 대한 투자와 아이폰에 대한 기대

     Palm이 아이폰과 같은 것을 만들 것이라고 기대하며 투자했지만, 결국 그들이 아닌 애플이 그것을 만들었고, 그것이 Palm에게는 끝이었음.
     * CloudpilotEmu - 브라우저에서의 Palm 에뮬레이터

     CloudpilotEmu를 설치하고 Vexed 게임을 다시 플레이할 수 있게 되어 매우 행복함. CloudpilotEmu 링크
     * 안드로이드에서의 재미

     안드로이드에서도 재미있을 것임.
     * Graffiti 기능에 대한 언급

     PumpkinOS에서 Graffiti 기능을 찾아볼 수 있음. Graffiti 코드 검색 링크
"
"https://news.hada.io/topic?id=14143","Redis의 카피레프트 포크 버전, 'Redict 7.3.0' 첫번째 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Redis의 카피레프트 포크 버전, 'Redict 7.3.0' 첫번째 릴리즈

     * Redict 커뮤니티는 Redis® OSS 7.2.4의 카피레프트 포크인 Redict 7.3.0의 첫 안정 버전을 발표

Redict를 선택하는 이유

     * Redict는 기술적으로 안정성과 장기 유지 관리에 중점을 두고 현재 범위 내에서 우수성을 달성하는 데 집중
     * Redict는 거의 기능이 완성되었으며, 혁신보다는 장기적인 신뢰성에 중점을 두는 것이 사용자에게 더 가치 있다고 믿음
     * Valkey와 같은 다른 Redis® 포크와 달리, Redict는 소프트웨어의 유한 범위와 장기 안정성에 더 큰 중요성을 두는 커뮤니티 중심의 문화를 가짐
     * Redict는 라이선스가 허용하는 소프트웨어에서 유용한 변경 사항을 가져와 개선할 수 있지만, 안정성을 우선시하고 새로운 기능은 그 다음에 제공함
     * Redict는 또한 다른 포크와 다른 사회적, 정치적 목표를 가지고 있으며, 독립적이고 커뮤니티 중심의 방식으로 소프트웨어를 구축하는 데 중점을 둠
     * LGPL 라이선스를 적용하여 소프트웨어를 더 이상의 착취로부터 보호하고, 클라우드 제공업체가 과도한 준수 체계에 직면하지 않고도 Redict를 고객에게 제공할 수 있도록 함

감사의 말

     * Redict 포크를 실현하는 데 관여한 모든 사람에게 개인적인 감사를 표함.
     * 특히 Redict 컨테이너 작업을 한 Micke Nordin과 Hugo, 문서 및 웹사이트 작업을 한 Lucas Dohmen, hiredict 포크 및 유지 관리를 한 Anna에게 감사함.
     * Redis® OSS, 상업적 기여자 및 독립적 기여자 모두에게 감사함. 이들의 작업은 Redict 코드베이스의 기초를 형성함.

다음 단계

     * 초기 릴리스에서는 최대한의 후방 호환성을 보장하고 새로운 사용자의 전환을 용이하게 하기 위해 매우 보수적인 변경 세트에 집중함
     * 향후 계획된 변경 사항으로는 빌드 시스템 현대화(muon이 주요 후보), Redis® 클라이언트 라이브러리 포함한 생태계 포킹, Lua 및 jemalloc과 같은 종속성의 비벤더링이 있음
     * Lucas는 Redict 문서에 대한 투자를 계획하고 있으며, 이를 생태계 참여자들의 선택된 참조로 만들 계획임
     * Anna는 hiredict에 대한 빌드 시스템 개선 및 Unix 규범과의 더 나은 일치를 포함한 변경 사항을 계획하고 있음
     * 커뮤니티 구성원의 개선 사항을 고려할 준비가 되어 있으며, 독립적이고 상업적 사용자 모두를 동등하게 환영함

GN⁺의 의견

     * Redict는 기존 Redis®의 오픈소스 버전을 기반으로 하여, 사용자와 기여자에게 더 큰 자유와 안정성을 제공하고자 하는 목표를 가진 프로젝트임. 이는 오픈소스 소프트웨어의 지속 가능성과 커뮤니티 중심의 개발에 중점을 두는 사용자에게 매력적일 수 있음.
     * LGPL 라이선스의 채택은 상업적 사용자와 자유 소프트웨어 커뮤니티 모두의 요구를 균형 있게 충족시키려는 시도로, 이는 클라우드 서비스 제공업체가 Redict를 자신들의 서비스에 통합할 때 법적인 문제를 최소화할 수 있게 함.
     * Redict의 보수적인 접근 방식은 기존 Redis® 사용자에게 안정적인 마이그레이션 경로를 제공하지만, 혁신적인 기능을 빠르게 도입하고자 하는 사용자에게는 제한적일 수 있음.
     * Redict 프로젝트는 GitHub와 같은 독점적인 플랫폼 대신 Codeberg와 SourceHut과 같은 자유 소프트웨어를 기반으로 한 인프라를 사용함으로써, 자유 소프트웨어 생태계를 강화하고자 하는 의지를 보여줌.
     * 이 프로젝트는 Redis®의 상업적 관리자에 의해 발생할 수 있는 위기에 대응하여 자유 소프트웨어의 미래를 위한 중요한 선택을 하고 있으며, 이는 오픈소스 커뮤니티에 중요한 사례가 될 수 있음.

        Hacker News 의견

     * 라이선스와 호스팅에 대한 논의가 많지만, Redict가 안정성과 장기 유지에 중점을 두고 현재 범위 내에서 우수성을 달성하려는 점이 진정으로 흥미로운 차별화 요소임.
          + Valkey는 더 급진적인 혁신을 개발할 자원을 투자할 수 있는 상업적 이해관계를 가지고 있으나, Redict는 장기 안정성에 더 큰 중점을 둔 소프트웨어를 선호하는 문화적 차이를 인정함.
     * Redict는 copyleft이므로 Valkey의 기여를 병합할 수 있지만, Valkey는 Redict의 커밋을 병합할 수 없음(기여자가 이중 라이선스를 부여하지 않는한)
          + Redis는 오픈 소스가 아니므로 Valkey의 기여는 병합할 수 있지만 Redict의 기여는 병합할 수 없음. 따라서 코드가 Redis에 포함되길 원하지 않는다면 Redict에 기여해야 함.
          + 흥미롭게도 라이선스 변경 이후 지난 2주 동안 한 개발자가 Redis 리포지토리에 커밋한 건수는 단 두 건에 불과. 엄청나게 감소한 수치
     * Codeberg의 Redict 버전이 Github의 Valkey 포크와 경쟁할 수 있을지 시간이 말해줄 것임.
     * 오픈 라이선스의 진정한 힘을 보여주는 상황으로, 서로 다른 접근 방식을 가진 두 개의 포크와 두 개의 전문적이고 유능한 팀이 있으며, 어느 쪽이 이길지, 또는 양쪽 모두가 이길 수 있는지를 볼 수 있음.
     * 상업적 용도로는 비 copyleft 포크도 사용할 수 있음.
     * Valkey에 대해 언급하며, 이제 두 개의 큰 포크가 있음을 지적함.
     * 다른 프로젝트들이 상업적으로 너무 나아가 코드가 포크된 사례를 들며, MySQL과 MariaDB를 예로 듦. Redis Ltd.가 자사 제품의 가치를 과대평가하고 있다고 생각함.
          + 대부분의 Redis 사용자는 간단한 인메모리 키-값 저장소를 찾고 있으며, Redict가 더 나을 것이라고 믿음.
     * Redis 라이선스 변경에 대해 질문하며, 새로운 라이선스 하에 호스팅된 버전을 판매하지 않는 한 프로젝트에서 Redis를 무료로 사용할 수 있는지 확인하고자 함.
     * 클라우드 제공업체들이 Redict 또는 Valkey의 호스팅된 버전을 제공할 것인지, 그리고 Redis에서 업그레이드 경로가 있을지에 대한 질문을 함.
     * RedisJSON과 함께 Redis를 사용하며, Redict와 Valkey가 JSON 데이터 타입을 지원하지 않는 것 같아 JSON 문서를 다루는 서버에 대한 정보를 원함.

   이게 가장 인상적이네요

     Redict는 copyleft이므로 Valkey의 기여를 병합할 수 있지만, Valkey는 Redict의 커밋을 병합할 수 없음(기여자가 이중 라이선스를 부여하지 않는한)
     Redis는 오픈 소스가 아니므로 Valkey의 기여는 병합할 수 있지만 Redict의 기여는 병합할 수 없음. 따라서 코드가 Redis에 포함되길 원하지 않는다면 Redict에 기여해야 함.

   Valkey와는 라이선스로? 경쟁하는군요. 신기하네요. +_+
"
"https://news.hada.io/topic?id=14215","Meta, 다음 주에 Llama 3의 소형 버전 출시 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Meta, 다음 주에 Llama 3의 소형 버전 출시 예정

     * Llama 3의 가장 큰 버전은 올 여름 출시 예정이며, 작은 두 모델은 다음 주에 출시될 예정임
     * 작은 모델의 출시는 Llama 3에 대한 기대감을 불러일으킬 것
     * Llama 3는 OpenAI의 GPT-4와 같이 이미지 기반 질문 답변 기능을 갖출 것으로 기대됨
     * 가장 큰 버전은 텍스트와 이미지 모두를 이해하고 생성할 수 있는 멀티모달 모델이 될 것임
     * 반면, 다음 주에 출시될 두 개의 작은 모델은 멀티모달이 아닐 것임

모델 크기에 따른 장단점

     * 작은 모델은 일반적으로 큰 모델보다 실행 비용이 저렴하고 속도가 빠름
     * 이는 대형 모델 실행 비용을 고려할 때 점점 더 가치 있게 여겨짐
     * 작은 모델은 모바일 기기에서 AI 소프트웨어를 개발하려는 개발자들에게도 유용함

Meta의 Llama 모델 개발 현황

     * Meta는 이전에 Llama 2의 세 가지 모델을 출시했음
          + 가장 큰 모델은 700억 개의 파라미터를 가지고 있음
          + 나머지 두 모델은 각각 130억 개와 70억 개의 파라미터를 가지고 있음
     * Llama 3의 가장 큰 버전은 1,400억 개 이상의 파라미터를 가질 것으로 예상됨
     * Meta는 Llama 2를 사용하여 자사 앱의 AI 어시스턴트 기능을 제공하고 있음
     * 최근 몇 달 동안, Meta의 생성형 AI 부서 직원들은 Llama 2가 논쟁의 여지가 있는 질문에 대해 너무 보수적으로 대응한다는 판단에 따라 Llama 3를 더 개방적으로 만들기 위해 노력해 왔음

GN⁺의 의견

     * 메타 플랫폼의 라마 3 소형 버전 출시는 인공지능 언어 모델 분야에서의 경쟁이 치열해지고 있음을 보여줌. 이미 구글과 일론 머스크의 xAI 같은 대형 플레이어들이 오픈소스 모델을 출시하고 있는 상황에서 메타의 이번 움직임은 시장 점유율을 확보하고 기술 리더십을 유지하기 위한 전략으로 해석될 수 있음.
     * 소형 버전 모델의 출시는 개발자와 연구자들에게 새로운 도구를 제공하고, 이를 통해 더 큰 버전의 모델에 대한 관심과 기대를 높이는 마케팅 전략일 수 있음. 이는 사용자들이 실제로 큰 모델을 사용하기 전에 작은 모델로 실험하고 익숙해질 수 있는 기회를 제공함.
     * 대형 언어 모델의 출시는 기술적으로 매우 복잡하며, 이러한 모델을 효과적으로 훈련하고 유지하기 위해서는 상당한 컴퓨팅 자원과 전문 지식이 필요함. 메타가 이러한 자원을 가지고 있지만, 모델의 윤리적 사용과 편향 문제는 여전히 중요한 고려 사항임.
     * 메타의 라마 3 모델이 어떻게 다른 오픈소스 모델과 차별화될지, 그리고 이 모델이 어떤 새로운 기능이나 혁신을 제공할지는 아직 불분명함. 이는 기술 커뮤니티 내에서 흥미로운 토론 주제가 될 수 있음.
     * 오픈소스 모델의 출시는 기술의 민주화를 촉진하고, 더 많은 혁신을 가능하게 함. 그러나 이러한 모델의 영향력이 커짐에 따라, 잘못된 정보의 확산, 저작권 침해, 개인정보 보호 문제 등에 대한 우려도 함께 증가하고 있음.
"
"https://news.hada.io/topic?id=14154","복원할 수 없을 정도로 가득 찬 디스크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         복원할 수 없을 정도로 가득 찬 디스크

맥북 프로의 저장 공간 문제와 복구 실패

     * 맥북 프로의 저장 공간이 완전히 차서 복구할 수 없는 상황 발생.
     * 자녀가 Steam을 통해 게임을 다운로드하는 과정에서 저장 공간이 가득 참.
     * macOS의 시작 볼륨이 너무 가득 차서 어떤 방식으로도 파일을 삭제할 수 없음.

파일 삭제 시도와 재시작 실패

     * 휴지통 비우기, 터미널 명령어, 디스크 유틸리티를 이용한 파일 삭제 시도 모두 실패.
     * 재시작 후 맥이 전혀 부팅되지 않는 문제 발생.

복구OS와 타임머신 백업 복원 시도

     * 복구OS를 통해 디스크 유틸리티 수리와 재설치 시도, 하지만 실패.
     * 타임머신 백업을 통한 데이터 복원 시도, 하지만 버전 차이로 인해 복원 불가.

외부 SSD를 이용한 파일 복사와 복원

     * 네트워크 백업 관리 맥을 통해 타임머신 백업을 외부 SSD로 복사.
     * 필요한 앱과 파일을 맥북 프로로 직접 복사하여 문제 해결.

GN⁺의 의견

     * 이 기사는 맥 사용자들이 저장 공간 문제로 인해 겪을 수 있는 극단적인 상황과 그 해결 과정을 보여줌. 이는 사용자들에게 백업의 중요성과 저장 공간 관리의 필요성을 일깨워줄 수 있음.
     * 기사에서 언급된 문제는 맥OS의 시스템적 한계와 버그로 인한 것으로 보임. 이는 애플이 시스템의 안정성과 사용자 경험을 개선하기 위해 지속적인 업데이트와 패치를 제공해야 하는 이유를 강조함.
     * 데이터 복구와 관련하여, 이러한 상황을 피하기 위해 정기적인 백업과 클라우드 스토리지 사용을 권장함. 또한, 사용자들은 운영 체제의 최신 버전을 유지하여 호환성 문제를 방지해야 함.
     * 비판적인 시각에서 볼 때, 이 기사는 고급 사용자나 전문가가 아닌 일반 사용자들에게는 다소 기술적인 내용이 복잡하게 느껴질 수 있음. 이는 사용자 친화적인 복구 옵션과 더 나은 사용자 지원의 필요성을 시사함.
     * 이 기사는 맥 사용자들에게 흥미로운 사례 연구를 제공하며, 유사한 문제에 직면했을 때 참고할 수 있는 가치 있는 정보를 담고 있음.

        Hacker News 의견

     * 외부 저장 장치를 사용하여 맥을 부팅하고 내부 디스크의 불필요한 파일을 삭제하는 방법이 더 나았을 수 있음.
          + 외부 저장 장치를 맥의 시작 디스크로 사용하기: Apple 지원 링크
          + 애플 실리콘 기반 맥에서는 모든 포트가 외부 부팅에 동일하게 작동하지 않음을 발견함.
               o 맥북: 왼쪽 포트 중 가장 왼쪽이 아닌 USB-C 포트 사용
               o 아이맥: 뒷면 포트 중 가장 오른쪽이 아닌 USB-C 포트 사용
               o 맥 미니: 뒷면 포트 중 가장 왼쪽이 아닌 USB-C 포트 사용
               o 맥 스튜디오: 뒷면 포트 중 가장 오른쪽이 아닌 USB-C 포트 사용
               o 맥 프로(데스크탑): 상단의 전원 버튼에서 가장 멀리 떨어진 USB-C 포트를 제외한 모든 포트 사용
               o 맥 프로(랙): 전면의 전원 버튼에 가장 가까운 USB-C 포트를 제외한 모든 포트 사용
     * HFS+ 디스크 구조에 대한 지식을 바탕으로, 저널 파일이 가득 차서 파일 삭제 시 일시적으로 더 많은 공간이 필요한 상황이 발생했을 것으로 추측함.
          + macOS는 드라이브에 41K만 남을 때까지 파일을 계속 작성함.
          + NTFS와 FAT32에서는 0바이트가 남아도 파일을 삭제할 수 있었음.
          + 소노마가 SMB/Samba 기반 네트워킹 마운트 절차를 깨뜨렸고, 아직 해결책을 찾지 못한 상황임.
     * SMB가 몇 년 전부터 신뢰할 수 없고 버그가 많아졌으며, 애플은 이 문제에 대해 신경 쓰지 않는 것 같음.
          + 맥 경험이 많지 않은 사람들이 이러한 시스템적, 연쇄적 실패에 직면했을 때 어떻게 대처하는지 걱정됨.
     * 맥 경험이 많지 않은 경우, 첫 번째로 시도해볼 것은 fsck 명령어임.
          + 필요한 디스크 내용을 다른 곳으로 복사한 후 포맷하고 다시 복사하는 것이 불가능할 때 APFS 문서를 참고하여 해결책을 찾음.
     * 첫 직장에서 비슷한 문제를 겪었음. 클러스터를 쓰레기 파일로 채웠고, rm 명령어가 작동하지 않았음.
          + 파일 축소(cat /dev/null > foo)가 삭제(rm foo)가 안 될 때 작동하는 방법을 배움.
     * Time Machine의 신뢰성이 점점 떨어지고 있음.
          + iOS/iPadOS 백업은 매번 잘 작동하는 것과 대조적임.
     * ZFS는 'slop space'를 사용하여 파일 시스템이 공간 부족으로 문제가 생기는 것을 방지함.
          + 기본적으로 볼륨 공간의 3.2%를 예약함(최대 128GB).
          + spa_slop_shift 커널 조정을 통해 최대 128GB의 추가 공간을 확보할 수 있음.
     * 파일 삭제가 일시적 또는 영구적으로 더 많은 공간을 필요로 한다는 개념이 혼란스러움.
          + 스냅샷과 저널링 등을 지원하는 현대 파일 시스템은 삭제를 위해 자유 공간을 할당해야 함.
     * 2018년 10월에 문제가 발생했음.
          + 추가 APFS 파티션을 제거하여 디스크 공간을 확보함.
     * iPhone에서 비슷한 경험을 함.
          + 디스크가 가득 차서 삭제가 실제로 작동하지 않는 것처럼 보임.
          + APFS의 복사-쓰기 및 스냅샷 지원으로 인한 문제로 추정됨.
     * rm 명령어가 실패하는 상황을 처리한 경험은 없지만, 내부 저장소가 256GB 이하인 현대 맥을 관리하는 것은 불편함.
          + 필요할 때 삭제할 수 있는 약 16GB의 '공간 홀더' 파일을 유지함.
     * 리눅스 시스템 파티션에서 비슷한 상황을 겪음.
          + 파티션이 작아서 업데이트가 쌓이면 삭제할 공간이 거의 없었음.
          + 결국 파티션을 재조정하여 문제가 다시 발생하지 않도록 함.
"
"https://news.hada.io/topic?id=14104","HN 소개: 리눅스용 macOS 클래식 위젯 라이브러리인 Libmui","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 소개: 리눅스용 macOS 클래식 위젯 라이브러리인 Libmui

이게 대체 무엇인가?

     * Macintosh Classic ""Toolbox"" API의 많은 부분을 복제하는 라이브러리로, 완전한 구현은 아니지만 몇 가지 간단한 애플리케이션을 만들기에 충분함.
     * MII Apple //e 에뮬레이터에 추가되는 기능으로, 기능 추가 측면에서 세계 기록에 도전하는 프로젝트 중 하나임.

왜?

     * MII를 위한 UI 라이브러리가 필요했으며, 의존성이 많지 않고 '게임 같은' 스타일을 원하지 않았음.
     * Nuklear 즉시 모드 UI로 시작했지만, 매우 제한적이고 사용자 정의가 필요할 때 불편함을 느낌.
     * UI 레이아웃 엔진이 불만족스러웠고, 상태를 유지하는 것에 대한 약속과 달리 실제로는 해시 값에 기반한 상태를 유지함.
     * 과거에는 UI가 장인정신으로 만들어졌지만, 현재는 디자인이나 사용성에 대한 감각 없이 결정되는 경우가 많음.
     * 이미 가지고 있는 여러 부분을 활용하여 자체 라이브러리를 만들기 시작함.

이 라이브러리는 무엇을 할 수 있는가?

     * Macintosh Toolbox의 '매니저'들 중 몇 가지를 가지고 있으며, 현대 시스템처럼 동작함.
     * ARGB 버퍼로 '화면'에 그리도록 설계되었으며, 필요한 곳에 복사할 수 있음.
     * 라이브러리는 '무효' 영역을 추적하고 필요한 부분만 다시 그림으로써 오버드로우를 최소화함.

원본과 어떻게 다른가?

     * 외관상 MacOS 8/9에서 시작했지만 모든 회색조를 제거함.
     * API 측면에서는 완전히 비동기적이며, 원본처럼 필요할 때마다 창이나 GrafPort에 그릴 수 없음.
     * 모든 것이 mui_window 또는 _mui_control_로 구성됨.

  윈도우 매니저

     * 창을 생성하고 그릴 수 있음.
     * 최대 15개의 '레이어'를 가지고 있으며, 클리핑 등을 수행할 수 있음.

  메뉴 매니저

     * 시스템 7/8 또는 GS/OS처럼 보이는 메뉴바, 메뉴, 체크마크, 키보드 단축키 등을 제공함.

  컨트롤 매니저

     * 버튼, 체크박스, 라디오 버튼, 스크롤바(수직), 텍스트 박스 등을 제공함.

  리스트 매니저

     * 파일 이름을 표시하기 위해 설계되었으며, 화살표 키, 페이지 업/다운, 스크롤 휠 등을 처리할 수 있음.

  알림

     * '취소'와 '확인' 버튼이 있는 전형적인 알림을 제공함.

  표준 파일

     * 파일을 여는 대화 상자를 제공함.

  리소스 매니저

     * 리소스 매니저는 제공하지 않음.

의존성은 무엇인가?

     * 외부 의존성은 libpixman 뿐임.
     * libpixman, libcg, stb_truetype.h, stb_ttc.h 등을 사용함.

빌드 방법은?

     * 간단한 Makefile을 사용하여 루트 디렉토리에서 'make' 명령어로 라이브러리와 테스트/데모/샘플을 빌드할 수 있음.

사용 방법은?

     * _mui_shell.c_와 _mui_widgets_demo.c_를 수정하여 사용하는 것이 가장 좋음.
     * mui_widgets_demo.so를 플러그인으로 로드하고 변경 사항이 감지되면 자동으로 다시 로드함.

FAQ!

     * 다크 모드, 테마, 투명 창, 큐브 효과, 메뉴의 스티키, 최신 트렌디한 도구나 프레임워크, 새로운 언어 바인딩, Wayland 지원 등은 제공하지 않음.

GN⁺의 의견

     * 이 라이브러리는 고전적인 Macintosh UI를 현대적인 시스템에 맞게 재창조하는 흥미로운 프로젝트임. 개발자들에게 과거의 UI 디자인에 대한 향수를 불러일으킬 수 있음.
     * 비동기적인 UI 라이브러리는 현대적인 애플리케이션 개발에 더 적합하며, 이 라이브러리는 그러한 현대적인 접근 방식을 취하고 있음.
     * 이 라이브러리는 특히 리소스 효율성을 중시하는 개발자에게 유용할 수 있음. 오버드로우를 최소화하고 필요한 부분만 다시 그리는 기능은 성능 최적화에 도움이 될 수 있음.
     * 그러나 이 라이브러리는 다크 모드나 테마 지원과 같은 현대적인 기능을 제공하지 않기 때문에, 모든 개발자의 요구를 충족시키지는 못할 수 있음.
     * 유사한 기능을 제공하는 현대적인 UI 라이브러리로는 Qt, GTK, 혹은 Electron과 같은 프레임워크가 있으며, 이들은 더 넓은 기능과 지원을 제공함.
"
"https://news.hada.io/topic?id=14125","Cloudflare Workers, 이제 Python으로 작성 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Cloudflare Workers, 이제 Python으로 작성 가능

Python을 Cloudflare Workers에 통합하기: Pyodide와 WebAssembly 사용

     * Cloudflare Workers에서 이제 Python을 사용할 수 있음.
     * 이전의 JavaScript 이외의 언어 지원과는 다르게 Python 구현체가 workerd 런타임에 직접 통합됨.
     * Vectorize, Workers AI, R2, Durable Objects 등의 모든 바인딩이 지원됨.
     * FastAPI, Langchain, Numpy 등 인기 있는 Python 패키지의 일부를 가져올 수 있음.
     * 별도의 빌드 단계나 외부 툴체인이 필요하지 않음.

WebAssembly로 컴파일하는 것 이상의 작업

     * Cloudflare Workers는 2018년부터 WebAssembly를 지원함.
     * 언어를 WebAssembly나 JavaScript로 컴파일하는 것만으로는 충분하지 않음.
     * 개발자가 익숙한 패키지 생태계를 지원해야 함.

Python Worker의 생명주기

     * Pyodide가 workerd에 내장되어 있어 Python 코드 작성이 가능함.
     * Wrangler.toml 파일을 통해 .py 파일을 지정하고, npx wrangler@latest dev를 실행하면 런타임이 Pyodide를 자동으로 주입함.

Workers 런타임에 내장된 Python 인터프리터

     * CPython은 Python의 참조 구현체이며, Pyodide는 CPython을 WebAssembly로 포팅한 것임.
     * Pyodide는 대부분의 Python 표준 라이브러리를 제공하며, JavaScript API를 직접 호출할 수 있는 FFI를 제공함.

Pyodide와 외부 함수 인터페이스(FFI)의 마법

     * Pyodide의 FFI는 Python에서 JavaScript 기능에 접근할 수 있게 해줌.
     * 이를 통해 FastAPI와 Langchain과 같은 패키지를 바로 사용할 수 있음.

동적 링킹이 필수적인 이유, 정적 링킹으로는 부족함

     * Python 패키지 중 많은 수가 C FFI를 사용하여 네이티브 라이브러리를 가져옴.
     * 동적 링킹을 통해 Pyodide가 네이티브 라이브러리 의존성이 있는 많은 Python 패키지를 지원할 수 있음.

서버 및 클라이언트 라이브러리 지원

     * Python에는 httpx, urllib3, requests 등 인기 있는 HTTP 클라이언트 라이브러리가 많지만, Pyodide에서는 기본적으로 작동하지 않음.
     * 비동기 클라이언트 라이브러리는 Fetch API를 사용하여 요청을 수행할 수 있음.

Python 패키지 가져오기

     * Python Workers는 Pyodide에서 직접 제공하는 Python 패키지의 부분 집합을 지원함.
     * requirements.txt 파일에 패키지를 추가하기만 하면 됨.

메모리 스냅샷을 사용하여 냉동 시작 시간 단축

     * Pyodide를 Worker에 주입하고 Cloudflare에 업로드하는 과정에서 메모리 스냅샷을 생성하여 냉동 시작 시간을 단축함.

Pyodide 버전과 호환성 날짜에 대한 미래 증명

     * 호환성 날짜와 호환성 플래그를 사용하여 새로운 동작과 잠재적으로 하위 호환성이 없는 변경 사항을 명시적으로 선택할 수 있게 함.

Python Workers에서 바인딩 작동 방식

     * Pyodide는 JavaScript에 대한 FFI를 제공하여 Python에서 직접 JavaScript 객체, 메소드, 함수 등을 사용할 수 있게 함.

Python Workers 시작하기

     * 새로운 프로그래밍 언어에 대한 진정한 지원은 ""hello world""를 넘어서는 큰 투자가 필요함.
     * Python은 JavaScript 다음으로 인기 있는 프로그래밍 언어이며, Cloudflare는 Python 패키지 지원을 확대하고 성능을 개선하기 위해 지속적으로 노력하고 있음.

GN⁺의 의견

     * Cloudflare의 Python Workers 지원은 서버리스 아키텍처에서 Python의 사용을 확장하는 중요한 발전임. 이는 Python 개발자들에게 더 많은 유연성과 선택권을 제공하며, JavaScript에 의존하지 않고도 클라우드 기반의 애플리케이션을 구축할 수 있는 기회를 열어줌.
     * Pyodide를 통한 Python의 WebAssembly 통합은 브라우저와 서버리스 환경에서 Python 코드를 실행할 수 있는 새로운 가능성을 제시함. 이는 Python 생태계에 큰 영향을 미칠 수 있으며, 특히 데이터 과학과 머신 러닝 분야에서 JavaScript가 지배적이지 않은 영역에서 Python의 사용을 촉진할 수 있음.
     * 동적 링킹과 메모리 스냅샷 기술은 초기 로딩 시간을 단축시키고, 리소스를 효율적으로 공유할 수 있는 방법을 제공함. 이는 특히 대규모 분산 시스템에서 중요한 성능 개선을 의미함.
     * 호환성 날짜와 플래그를 통한 버전 관리는 기존 코드의 안정성을 유지하면서도 새로운 기능과 업데이트를 수용할 수 있는 유연한 방법을 제공함. 이는 장기적으로 서비스를 운영하는 기업에게 중요한 요소임.
     * Cloudflare가 Python Workers에 대한 지원을 확대함에 따라, Python 개발자들은 기존의 클라우드 서비스와 통합하거나 새로운 서비스를 개발할 때 더 많은 옵션을 가질 수 있음. 이는 Python이 서버리스 컴퓨팅 분야에서 중요한 역할을 할 수 있음을 보여줌.

        Hacker News 의견

     * Cloudflare가 Edge에서 WebAssembly를 통해 Python을 실행하는 데 더 많은 관심을 기울이고 있어 기쁘다는 긍정적인 반응.
          + Pyodide를 사용하여 Python을 WebAssembly로 컴파일하고, Workerd에 번들링하여 V8 스냅샷을 사용해 시작 시간을 가속화하려고 시도함.
          + Python의 Cloudflare Workers에서의 차가운 시작(cold start) 시간은 최선의 경우 약 1초임.
          + 이번 발표는 Edge에서 Python 실행에 대한 관심을 측정할 수 있게 해주지만 몇 가지 단점이 있음:
               o 하나의 Python/Pyodide 버전에만 국한됨.
               o 패키지 해결이 workerd에 의존적이고 까다로움.
               o JS/V8 세계에 구조적으로 의존하고 있어, 차가운 시작 시간을 줄이는 데 도전이 될 수 있음.
          + 이러한 단점에도 불구하고, 이러한 시도를 환영하며, 이를 통해 만들어질 멋진 앱들을 기대함.
     * Cloudflare는 호스팅과 데이터베이스에 대한 훌륭한 기능을 제공하지만 개발자 플랫폼으로서 자신들을 마케팅하는 데 큰 성공을 거두지 못했다는 의견.
          + Cloudflare가 Google Cloud Run과 같은 언어에 구애받지 않는 컨테이너 호스팅 서비스를 제공하는지에 대한 질문이 있음.
     * Cloudflare를 통해 JS workers를 사용해본 경험이 있으며 사용하기 쉽고 매우 빠르다는 긍정적인 평가.
          + 자신의 Django 앱을 Cloudflare의 D1 데이터베이스를 사용하여 포팅하고 싶어함.
     * JS worker와의 성능 비교가 도움이 될 것이라는 의견.
          + 여러 계층에 걸쳐 있어서 속도가 느릴 수 있다는 우려와 함께 대략적인 트레이드오프를 알고 싶어함.
     * Pyodide가 심각한 지원을 받으면서, Python이 프론트엔드에서 JavaScript의 진정한 대안이 될 수 있는 희망이 보인다는 의견.
     * lzma를 사용한 데모가 의도적인지, 아니면 단순히 우연인지에 대한 질문이 있음.
          + 이는 최근 기술 뉴스와 관련이 있음.
     * Cloudflare에서 AI 관련 작업을 실행하는 것에 대한 게임 체인저라고 평가하며, 이를 오랫동안 기대해왔다는 의견.
     * Cloudflare가 JS workers에 국한되지 않고 WASM을 일급 시민으로 취급하는 workers를 구현하기를 바라는 의견.
          + 현재는 JS 컨텍스트 내에서 WASM 코드가 실행되지만, 향후에는 컨테이너를 거치지 않고 직접 WASM 런타임으로 배포될 것이라는 전망.
     * CF Pages를 사용하여 정적 사이트를 만드는 데 좋은 결과를 얻었으며, Cloudflare의 오픈 소스 LLM-as-a-service 제안에 매료됨.
          + Python 지원 부족이 Cloudflare에서 더 많은 작업을 구축하지 못하는 주된 문제라고 언급하며, 이번 업데이트를 시도해보고 싶어함.
     * Pyodide 패키지만 사용하는 제한이 비트리비얼하지 않은 빌드에 어떤 영향을 미칠지 궁금하다는 의견.
          + 비순수 Python 코드가 많아 수동으로 재구축해야 하는 경우를 생각하며, Cloudflare의 채택이 더 많은 패키지를 포함시키는 데 도움이 될 수 있음을 기대함.
"
"https://news.hada.io/topic?id=14211","HN 공개: 업무 중 구축한 인메모리 PostgreSQL을 E2E 테스트를 위해 오픈 소스화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 공개: 업무 중 구축한 인메모리 PostgreSQL을 E2E 테스트를 위해 오픈 소스화

pgmock 데모 — Discord

     * pgmock은 단위 및 E2E 테스트를 위한 메모리 내 PostgreSQL 모의 서버임.
     * 외부 의존성이 없으며 Node.js와 브라우저 모두에서 WebAssembly 내에서 전적으로 실행됨.

설치

     * npm install pgmock 명령어를 통해 설치 가능.
     * 브라우저에서 pgmock을 실행하고자 한다면, 브라우저 지원 섹션의 자세한 지침을 참조할 것.

시작하기

     * 메모리 내 서버를 다음과 같이 실행할 수 있음:
import { PostgresMock } from ""pgmock"";
const mock = await PostgresMock.create();
const connectionString = await mock.listen(5432);

     * node-postgres(npm에서 pg)를 사용하는 경우, 포트를 사용하지 않고 브라우저에서도 작동하는 구성 객체를 제공함:
import * as pg from ""pg"";
const mock = await PostgresMock.create();
const client = new pg.Client(mock.getNodePostgresConfig());
await client.connect();
console.log(await client.query('SELECT $1::text as message', ['Hello world!']));

     * 사용 후 자원을 해제하기 위해 모의 서버를 파괴하는 것이 좋은 관행임:
mock.destroy();

문서화

     * 사용 가능한 모든 메소드와 그 문서화에 대한 목록은 PostgresMock 소스 파일을 확인할 것.

브라우저 지원

     * pgmock은 브라우저 환경을 완전히 지원함.
     * 웹앱은 TCP 포트를 수신할 수 없지만, PostgresMock.createSocket과 node-postgres 구성을 사용할 수 있음.
     * 번들러가 정적으로 가져오기를 분석하는 경우, 누락된 (선택적인) Node.js 모듈 때문에 기본 구성에 경고가 표시될 수 있음.
     * 브라우저에서 데이터베이스만 실행하려는 경우, pglite를 고려할 수 있으나, 이는 기능이 제한적임.
     * pgmock은 테스트 환경에서 원하는 생산 PostgreSQL 환경과 기능적으로 동등함을 목표로 설계됨.

작동 원리

     * WebAssembly에서 Postgres를 실행하는 두 가지 접근 방식이 있음: WASM을 원래 지원하도록 포크하거나 x86 에뮬레이터에서 Postgres 서버를 에뮬레이션함.
     * 전자는 성능이 더 뛰어나고 메모리 사용량이 적지만, 단일 사용자 모드(연결 없음)와 확장 기능을 지원하지 않음.
     * 테스트와 생산 간의 차이를 방지하고 테스트에서 성능이 주요 관심사가 아니기 때문에, pgmock은 현재 후자의 접근 방식을 사용함.
     * 중기적으로는, 원래 Postgres WASM 포크가 성숙하면 두 옵션을 모두 제공하고, 결국 기본적으로 원래 WASM으로 전환할 계획임.
     * PostgresMock.subtle 내의 API를 제외하고는 많은 변경 사항이 발생하지 않을 것으로 예상됨.
     * pgmock은 실제 네트워크처럼 행동하는 자바스크립트 내 네트워크 스택을 시뮬레이션하여, 원시 소켓 액세스를 허용하지 않는 플랫폼에서도 TCP 연결을 시뮬레이션할 수 있도록 함으로써, 네트워크 프록시에 의존하지 않고 전적으로 자바스크립트 런타임 내에서 전체 기능 호환성을 제공함.

기여하고 싶으신가요?

     * Discord 서버에서 우리와 대화할 수 있음.

다른 Docker 이미지나 데이터베이스를 실행할 수 있나요?

     * 이론적으로 가능함. 관심이 있다면 Discord 서버에서 연락할 것.

감사의 말

     * 이를 가능하게 하는 x86 에뮬레이터인 v86에 감사.
     * WebAssembly 내에서 Postgres를 실행하는 자체 접근 방식을 구축한 Supabase & Snaplet에 감사.
     * pgmock을 구축하는 동안 급여를 지급한 Stackframe에 감사.

GN⁺의 의견

     * pgmock은 개발자들이 PostgreSQL 데이터베이스와의 상호작용을 테스트할 때 유용한 도구임. 실제 데이터베이스 서버를 설정하고 관리하는 번거로움 없이, 코드의 데이터베이스 상호작용을 검증할 수 있음.
     * 이러한 도구는 테스트 주도 개발(TDD)이나 지속적 통합(CI) 환경에서 매우 유용함. 개발자들은 빠르게 테스트를 실행하고, 코드 변경에 따른 영향을 즉시 확인할 수 있음.
     * pgmock은 WebAssembly를 사용하여 브라우저와 Node.js 환경 모두에서 작동하므로, 다양한 개발 환경에서의 호환성을 제공함. 이는 프론트엔드와 백엔드 개발자 모두에게 이점을 제공함.
     * 그러나 pgmock이 실제 PostgreSQL 서버의 모든 기능을 완벽하게 에뮬레이션할 수 있는지, 특히 성능과 확장 기능 측면에서는 의문이 남음. 실제 데이터베이스 환경과의 차이가 테스트 결과에 영향을 미칠 수 있음.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Testcontainers, H2 Database 등이 있으며, 이들은 각각 도커 컨테이너를 사용하는 통합 테스트와 자바 애플리케이션을 위한 인메모리 데이터베이스를 제공함.

        Hacker News 의견

     * pgmock 소개
          + 한 개발자가 몇 달 동안 Postgres의 인메모리 버전을 개발함.
          + 이 버전은 기존 데이터베이스와 기능적으로 동등함.
          + 외부 프로세스나 프록시가 필요 없으며, WASM을 실행할 수 있는 플랫폼(Node.js, 브라우저 등)에서 작동함.
          + JavaScript 객체를 생성하는 것처럼 간단하게 새 데이터베이스와 모의 데이터를 생성할 수 있음.
          + pglite와는 다르게, pgmock은 원본 Postgres를 내부에 포함한 x86 에뮬레이터를 실행함. pglite는 Postgres 포크를 직접 WASM으로 컴파일하여 더 빠르고 가벼우나, 단일 사용자 모드와 몇몇 확장 기능만 지원하여 일반 Postgres 클라이언트로 연결할 수 없음.
          + 이론적으로는 어떤 Docker 이미지도 WebAssembly 플랫폼에서 실행 가능하게 수정할 수 있음.
     * RAM 디스크에서 Postgres 실행에 대한 질문
          + Postgres를 RAM 디스크에서 실행하는 것과 비교하여, 브라우저/Node 환경에서 실행 가능하고 테스트에 의해 생성/업데이트/파괴될 수 있는 이점에 대해 설명해달라는 요청.
     * 실제 서버 대신 인메모리 서버 사용 경험 공유
          + 과거에 다양한 (맞춤형) 가짜 인메모리 서버를 테스트에 사용했으나, 현재는 Testcontainers를 사용하여 실제 서비스를 실행함.
     * 프로젝트의 지적 재산권에 대한 질문
          + 제목에서 ""내가 직장에서 만들었다""는 표현이 지적 재산권이 고용주에게 속하는 것을 의미하는지, 그리고 직장의 자원을 사용했다면 오픈소스로 공개하는 것이 허용되는지에 대한 의문 제기.
     * 개발 환경 복제에 대한 조언
          + 생산 데이터를 덤프하고, 민감한 데이터를 제거하고, 로그 테이블 같은 불필요한 테이블을 줄여서 개발 복사본을 만들 것을 권장. 이를 개발, QA, E2E 등에 복제함으로써 E2E 테스트에 필요한 확장, 트리거, 함수, 뷰, 인덱스, 데이터를 확보할 수 있음.
     * pgmock 개발 배경과 CI 통합에 대한 질문
          + 이 프로젝트를 개발하게 된 동기와 Docker 컨테이너에서 Postgres를 실행하는 것이 너무 느렸는지에 대한 질문.
          + pgmock을 통합하기 전후의 CI 설정과 E2E 테스트 흐름에 대한 설명 요청.
          + 이 솔루션으로의 이전이 어려웠는지에 대한 질문.
     * H2 데이터베이스와의 비교 질문
          + Postgres 호환 모드에서 H2 데이터베이스와 pgmock을 비교하는 질문.
     * pgmem 사용 경험 공유
          + pgmem을 사용하여 비슷한 목적으로 지난 몇 년간 작업한 경험 공유.
     * ORM 지원에 대한 질문
          + Sequelize, Prisma, Drizzle 같은 ORM을 테스트에 사용할 수 있는지에 대한 질문.
     * Prisma 클라이언트와의 사용 가능성에 대한 질문
          + Prisma 클라이언트와 함께 사용할 수 있는 방법에 대한 질문.
"
"https://news.hada.io/topic?id=14098","XZ 백도어: 시간, 저주받은 시간, 그리고 사기들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      XZ 백도어: 시간, 저주받은 시간, 그리고 사기들

XZ 백도어: 시간, 저주받은 시간, 그리고 사기

     * 최근 xz/liblzma 타르볼에 숨겨진 백도어가 발견됨.
     * 이는 자유 소프트웨어 생태계에서 신뢰에 대한 가장 큰 위반 중 하나일 가능성이 있음.
     * 백도어는 xz의 오랜 유지 관리자인 Jia Tan에 의해 삽입되었을 것으로 추정됨.
     * Jia는 유지 관리자로서 활동하는 동안 상대적으로 신비한 인물로 남아 있었으며, 그의 실제 정체에 대해서는 거의 알려진 바 없음.
     * 자유 소프트웨어 분야에서 익명성은 일반적으로 긍정적인 것으로 여겨지지만, 이 경우 커뮤니티의 신뢰를 오랫동안 쌓아온 뒤 그것을 남용한 사람이 누구인지 알아보는 것이 흥미로움.
     * Jia의 활동에서 얻을 수 있는 메타데이터를 통해 그에 대해 더 많이 알아낼 수 있음.

시간에서 배울 수 있는 것은 무엇인가?

     * 소프트웨어가 만들어지는 조건에 대해 생각해보기.
     * 시간 패턴이 우리에게 말해주는 것들의 범위는 매우 넓음.
     * 코드를 작성하는 사람들 중에는 직업으로 하는 사람들도 있고 취미로 하는 사람들도 있음.
     * 지역에 따라 다른 시간에 코드를 작성하는 사람들도 있음.
     * 휴일, 수면 스케줄, 일과 삶의 균형 등 코드 작성도 이러한 것들로부터 자유롭지 않음.
     * 언제 누군가가 코드를 작성하는지 이해하는 것은 그들이 왜, 어디에서 코드를 작성하는지 이해하는 데 도움이 됨.

Jia의 커밋 분석

     * JiaT75의 XZ 저장소에 대한 커밋과 타임스탬프에 대한 분석 수행.
     * Git 타임스탬프는 원하는 대로 변경할 수 있지만, 신빙성 있게 시간 데이터를 조작하는 것은 실제로 어려움.
     * 시간대만 변경하는 것이 실제 시간을 변경하는 것보다 쉬움.
     * Jia Tan은 사람들이 자신을 아시아인, 특히 중국인으로 생각하기를 원했을 것이며, 그의 대부분의 커밋(440개)은 UTC+08 타임스탬프를 가짐.
     * 그러나 실제로는 UTC+02(겨울)/UTC+03(일광 절약 시간제) 시간대에 있는 어딘가에서 왔을 것으로 추정됨.
     * 때때로 시간대를 변경하는 것을 잊어버린 경우가 있으며, 이는 동유럽의 일광 절약 시간 전환과 일치함.
     * Jia의 작업 스케줄과 휴일은 중국인보다 동유럽인과 더 잘 맞는 것으로 보임.

GN⁺의 의견

     * 이 기사는 소프트웨어 개발 커뮤니티에서 신뢰와 익명성의 중요성에 대한 흥미로운 사례를 제공함.
     * 백도어와 같은 보안 위협은 오픈소스 프로젝트의 신뢰성에 큰 타격을 줄 수 있으며, 이는 개발자들이 코드 리뷰와 보안 감사에 더 많은 주의를 기울여야 함을 의미함.
     * 이러한 사건은 개발자들에게 커밋 로그와 메타데이터의 중요성을 상기시켜 줌. 신뢰할 수 있는 기여자의 신원을 확인하는 것이 프로젝트의 안전을 위해 필수적일 수 있음.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 GitLab, GitHub 등이 있으며, 이들은 커뮤니티의 신뢰를 유지하기 위해 보안 프로토콜과 사용자 인증을 강화하고 있음.
     * 이 기사는 기술 커뮤니티 내에서 익명성과 신뢰 사이의 균형을 찾는 것이 얼마나 중요한지를 보여줌. 프로젝트 관리자와 기여자들은 이러한 사건으로부터 배워야 하며, 코드의 투명성과 보안을 강화하기 위한 조치를 취해야 함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 댓글 작성자는 해커가 동유럽 출신이라고 생각하지 않으며, UTC+0200/+0300 시간대에 해당하는 유럽 국가들과 중동 지역을 언급함.
          + 국가 후원의 사이버 공격일 경우, 실제 코드를 작성하는 부서와 인터넷에 연결하는 부서가 분리되어 있을 수 있으며, 후자는 발신 정보가 특정 스토리와 일치하도록 시간을 조정하는 역할을 할 수 있음을 지적함.
     * 두 번째 댓글 요약:
          + 댓글 작성자는 GMT+8 시간대, 중국어와 혼합된 이름, 싱가포르 서버를 통한 연결 등이 싱가포르 정체성을 나타낼 수 있음을 언급함.
          + 중국 본토 사람들이 해외 중국인 커뮤니티에 대해 잘 알지 못할 수 있으므로, 이름이 가짜로 들린다는 의견에 대해서도 의심의 여지가 있음을 언급함.
          + Jia Tan의 다른 글들을 분석하면 싱가포르인, 중국 본토인, 슬라브어 사용자 등을 구별하는 데 도움이 될 수 있음을 제안함.
     * 세 번째 댓글 요약:
          + 댓글 작성자는 여행을 많이 다니기 때문에, 자신의 여행 일정을 공개 저장소에 노출시키고 싶지 않아 gc 명령어를 TZ=UTC0 git commit으로 매핑해 사용한다고 함.
     * 네 번째 댓글 요약:
          + 댓글 작성자는 사건의 심각성을 떠나, 인터넷에서 벌어지는 미스터리를 풀어가는 과정에 매우 흥미를 느낌.
     * 다섯 번째 댓글 요약:
          + 댓글 작성자는 Jia에게 격려의 말을 전하며, 시도하지 않으면 성공할 기회조차 없다고 말함.
     * 여섯 번째 댓글 요약:
          + 댓글 작성자는 두 개의 커밋 시간 차이가 약 9시간이 아니라 1시간 정도라고 지적함.
     * 일곱 번째 댓글 요약:
          + 댓글 작성자는 자신도 이른 아침에 일하는 사람이라고 언급하며, 해커나 젊은 사람들이 오후나 늦은 밤에 일하는 것이 더 그럴듯하다고 말함.
     * 여덟 번째 댓글 요약:
          + 댓글 작성자는 메일링 리스트에 대한 답변의 타임스탬프도 포함할 것을 제안함.
     * 아홉 번째 댓글 요약:
          + 댓글 작성자는 미국인(또는 다른 장소의 사람)이 동유럽인인 척 하면서 중국인인 척 할 수도 있다는 가정을 제시함.
"
"https://news.hada.io/topic?id=14146","Terraform이 탄소 중립 천연가스를 생산","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Terraform이 탄소 중립 천연가스를 생산

Terraform의 혁신적인 합성 천연가스 기술

     * Terraform 팀이 태양광과 공기로부터 합성 천연가스를 만드는 데 성공함.
     * 전력을 가스로 변환하는 시스템을 통해 화석 연료가 아닌 천연가스를 합리적인 가격에 생산함.
     * 이 기술은 재생 가능한 탄소와 전력을 활용하여 에너지를 저렴하고 신뢰할 수 있게 제공하는 미래 비전을 향한 중요한 이정표임.

핵심 혁신: 저렴한 지속 가능한 천연가스 생산

     * 검증된 산업 공정을 혁신적이고 비용 효율적인 기술 시스템에 적용하여 태양광과 공기로부터 저렴한 지속 가능한 천연가스 생산.
     * 녹색 수소와 대기 중 CO2 포집 비용을 이전에는 상상할 수 없었던 수준으로 낮춤.
     * 매우 저렴한 태양광 에너지와 저비용 녹색 수소 및 CO2 포집을 결합하여 경쟁력 있는 상품 가격에 전기 연료 대안을 생산함.

공학적 진보: 저렴한 녹색 수소와 직접 공기 포집 CO2

     * 저렴한 녹색 수소와 직접 공기 포집 CO2를 향한 상당한 진전을 이룸.
     * 알려진 산업 공정을 매우 저렴한 태양광 에너지에 적용하여 자본비용을 줄이고, 날씨 변화에 강한 공정 개발.
     * 혁신적인 전해조를 통해 태양광을 수소로 변환하며, 생산 비용은 kg당 $2.50 미만임.
     * 독자적인 직접 공기 포집 시스템은 대기 중 CO2를 톤당 $250 미만의 비용으로 집중시킴.

통합된 화학 공장: The Terraformer

     * 수소와 CO2를 섭취하여 파이프라인 등급의 천연가스(97% 이상 메탄)를 생산하는 다단계 사바티에 화학 반응기를 내부 개발.
     * 세 가지 하위 시스템을 하나의 모듈형 화학 공장으로 결합하여 태양광 PV 어레이 옆에 설치 가능.
     * 캘리포니아 버뱅크에 위치한 자체 생산 및 제조 시설을 통해 빠른 반복, 공급망 위험 감소, 비용 효과적인 화석 연료가 아닌 천연가스 생산의 완전한 기술 경제 모델을 성공적으로 시연함.

GN⁺의 의견

     * Terraform의 기술은 재생 가능한 에너지원을 활용하여 화석 연료 의존도를 줄이고 환경에 미치는 영향을 감소시킬 수 있는 잠재력을 가짐.
     * 이 기술이 상용화되면 전 세계 에너지 시장에 큰 변화를 가져올 수 있으며, 기존의 에너지 인프라와의 통합이 중요한 과제가 될 것임.
     * 그러나 대규모로 전환하기 위해서는 기술의 신뢰성, 경제성, 그리고 환경적 영향에 대한 철저한 평가가 필요함.
     * 이 기술이 실제로 경쟁력 있는 가격으로 제공될 수 있는지, 그리고 장기적으로 지속 가능한지에 대한 검증이 중요함.
     * 기존의 화석 연료 산업과의 경쟁, 정책적 지원, 그리고 시장 수용성 등 다양한 외부 요인들이 이 기술의 성공에 영향을 미칠 것임.

        Hacker News 의견

     * 탄소 산업 관찰자로서, Terraform Industries에 대한 소식은 매우 흥미로움. 이들은 탄소 중립 경제로의 전환에 필요한 것을 이해하는 소수의 그룹 중 하나이며, 대기 연료 합성의 경제학에 대한 그들의 통찰은 태양광 전기가 점점 더 저렴해지므로 비싼 장비의 효율성을 극대화하기보다는 저렴한 '비효율적' 장비를 만들어 전체 비용을 낮추고 규모를 확장할 수 있다는 것임.
          + Terraform Industries의 ""Terraformer Environmental Calculus"" 포스트는 이 분야에 관심이 있다면 읽어볼 가치가 있음.
          + Terraform Industries 팀에 축하의 말을 전함.
     * Terraform Industries의 웹사이트는 최소주의적 디자인이며, 단순한 텍스트 화학 방정식을 포함하고 있음.
          + 웹사이트 디자인은 그들의 문화적 약속을 반영하여, 가장 중요한 문제를 해결하는 데 자원을 할당하고자 하는 그들의 의지를 나타냄.
     * Terraform Industries의 이정표 도달은 매우 흥미로운 일이며, Casey Handmer(창립자)는 흥미로운 인물임. 그는 또한 Vesuvius 챌린지 스크롤의 균열 분석을 도와 고대 스크롤의 첫 구절을 읽는 데 기여함.
          + Terraform Industries 블로그와 Casey의 개인 블로그에서 더 많은 글을 확인할 것을 추천함.
     * Terraform에 대한 더 많은 정보를 원한다면, Jason Carman의 최근 비디오를 추천함.
          + 개요 및 투어 비디오(약 20분)
          + 심층 인터뷰 비디오(약 40분)
     * 메탄 누출 문제, 대기 온실가스 배출의 주요 원인 중 하나를 어떻게 해결할 것인지에 대한 의문 제기. CO2를 메탄으로 전환하는 것은 누출될 경우 탄소 중립이 아님.
     * 공기 중 CO2를 포집하고 물에서 전기분해로 수소를 얻어 천연가스를 만들 수 있지만, 왜 직접적인 공기 포집의 비효율성과 비용을 감수하면서까지 메탄을 만드는지, 또는 수소를 직접 사용하지 않는지에 대한 의문 제기.
          + 탄소를 포함한 합성 연료를 만들고자 한다면 메탄 대신 저장이 더 용이한 메탄올이나 더 높은 탄화수소를 만드는 것이 더 나을 수 있음.
          + 완전히 산화된 CO2를 공기에서 수고롭게 수집하는 대신, 바이오매스(폐기물 바이오매스 포함)의 탈산소화에 수소를 사용하는 것이 더 나은 방법일 수 있음.
     * 해커뉴스에서 다른 Terraform을 더 자주 보기 때문에, 이 글의 제목을 ""Terraform Industries...""로 했으면 더 좋았을 것이라는 의견 제시.
     * 최고 등급의 에너지(전기)를 낮은 등급의 에너지(예: 액체 연료)로 전환하는 것이 가치 있는 응용 분야에 대한 질문 제기.
          + 전기를 동력으로 전환하는 것이 연료를 태워 열을 생성하고, 가스 확장을 통해 피스톤을 구동하고, 회전으로 변환하는 과정보다 입력 에너지당 효율이 더 높음.
          + 이에 대해 무엇을 놓치고 있는지에 대한 의문 표현.
     * Terraform의 핵심 혁신은 검증된 산업 공정을 혁신적으로 단순하고 비용 효과적인 독자적 기술 시스템 내에서 구현하는 것임.
          + 기존 기술에 멋진 패키지를 둘러싼 것이 전부라는 의문 제기.
          + 간헐적 에너지 발생기(예: 태양광)와 결합할 때의 사용 사례는 이해하지만, 온실가스를 배출하지 않는 유사 기술(예: 액체 소금, 가열된 모래 등)과 비교했을 때의 수익률에 대해 확신이 서지 않음.
     * Climate Town의 ""Natural Gas is Scamming America"" 비디오를 본 후, 천연가스 산업에 대한 인식이 매우 부정적임.
          + 천연가스가 석탄보다 기후 변화에 더 해롭다고 여겨지는 주된 이유는 누출량이 많고 다른 국가로의 천연가스 운송에 많은 에너지가 소모되기 때문임.
          + 탄소 중립 천연가스를 만드는 아이디어는 좋지만, 기후 변화를 유발하는 가스 중 하나에 에너지를 저장하는 것을 피할 수 있을지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=14179","아프리카TV의 프로그램 분석 (1부)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          아프리카TV의 프로그램 분석 (1부)

     * 아프리카TV에서 고화질 영상을 보기 위해서는 '고화질 스트리머'라는 프로그램을 설치해야함
     * 이 프로그램은 영상 화질 개선 및 딜레이를 보완하기 위한 프로그램이며
     * 사용자들 간의 영상 데이터를 주고받을 수 있는 그리드망을 구성한게 특징임
     * 프로세스 구성 및 네트워크 설정이 어떻게 이루어지는지 소개되어 있음
"
"https://news.hada.io/topic?id=14128","브라우저에서 PDF와 이미지 OCR 직접 실행하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      브라우저에서 PDF와 이미지 OCR 직접 실행하기

     * Tesseract.js 를 이용하여 이미지와 PDF 파일의 내용을 직접 읽어냄
     * 서버없이 브라우저에서만 실행되어 데이터가 외부로 전혀 나가지 않음
     * 이 코드는 Claude 3 Opus 와 GPT-4 를 이용해서 작성됨 : 기본 코드와 Prompt 들도 같이 공개
"
"https://news.hada.io/topic?id=14089","메타의 Onavo VPN, 경쟁사 분석 트래픽의 SSL 암호화 해제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 메타의 Onavo VPN, 경쟁사 분석 트래픽의 SSL 암호화 해제

Facebook/Meta 집단 소송 발견

     * 광고주 원고들은 특정 커뮤니케이션에 대해 범죄-사기 예외가 존재한다는 점을 법원이 인정해 줄 것을 요청함.
     * 이 커뮤니케이션은 Facebook의 이른바 In-App Action Panel(IAAP) 프로그램과 관련이 있으며, 2016년 6월부터 2019년 5월경까지 존재함.
     * IAAP 프로그램은 마크 주커버그의 요청으로 시작되었으며, SSL 중간자 공격 방법을 사용하여 Snapchat, YouTube, Amazon의 SSL 보호 분석 트래픽을 가로채고 해독하여 Facebook의 경쟁적 의사결정에 정보를 제공함.

Facebook의 IAAP 프로그램, 경쟁사 도청을 통한 경쟁 타깃팅

     * 마크 주커버그는 2016년 6월 9일 회사의 고위 임원들에게 'Snapchat 분석'이라는 제목의 메시지를 보냄.
     * Javier Olivan, 현재 Facebook의 COO,는 이것이 중요한 시장 분석 질문 중 하나라고 동의하며, 기술적으로 복잡하고 법적 승인이 필요할 수 있다고 언급함.
     * Onavo 팀은 이 문제를 해결하기 위해 'lockdown effort'를 계획하고, 이는 팀에게 빛날 기회라고 언급함.
     * Onavo 팀은 내부 법률 자문의 지도 하에 고위 리더십을 위한 해결책을 제안함.

GN⁺의 의견

     * 이 사건은 기업의 데이터 프라이버시 침해와 관련된 법적 문제를 다루고 있어, 소비자들과 기술 커뮤니티에게 중요한 정보를 제공함.
     * Facebook이 경쟁사의 데이터를 불법적으로 수집한 혐의는 기업 윤리와 법적 책임에 대한 논의를 촉발시킬 수 있음.
     * 이러한 사례는 다른 기업들에게도 경고의 메시지를 전달하며, 데이터 보호와 개인정보 보안에 대한 중요성을 강조함.
     * 비슷한 기능을 제공하는 다른 프로젝트나 제품으로는 보안 강화 VPN 서비스나 암호화 통신 도구들이 있으며, 이들은 사용자의 데이터를 보호하는 데 도움을 줄 수 있음.
     * 기술을 도입할 때는 해당 기술이 법적 기준과 윤리적 기준을 충족하는지 신중하게 고려해야 하며, 이 사건은 기업이 기술을 사용할 때 법적 리스크를 평가하는 중요성을 보여줌.

        Hacker News 의견

     * 개인이 이러한 행위를 했다면 컴퓨터 사기 및 남용법(CFAA)이 적용될 것이라는 의견이 있음. 메타에 대해서는 결과를 지켜봐야 할 것.

          + 개인이 이와 같은 행위를 했다면 컴퓨터 사기 및 남용법(CFAA)이 적용될 것으로 예상되나, 메타의 경우 결과를 지켜봐야 함.

     * MITM(중간자 공격)은 '연구'가 아닌 '공격'으로 불림. 한 IT 전문가는 부정한 관행을 발견하고 정치 당에서 나온 경험을 공유함.

          + 중간자 공격(MITM)은 연구가 아닌 공격으로 불리며, 윤리를 중시하는 엔지니어라면 메타에서 이러한 시도를 하지 않았을 것임.

     * 한 앱(WhatsApp)에는 종단간 암호화를 추가한다고 공개적으로 발표하면서, 다른 앱에서는 비밀리에 TLS를 깨는 아이러니함을 지적함.

          + WhatsApp에 종단간 암호화를 추가한다고 발표하는 동시에 다른 앱에서는 TLS를 비밀리에 깨는 메타의 아이러니한 행동에 대한 지적.

     * FANGs(페이스북, 아마존, 넷플릭스, 구글)가 대중에 대한 대규모 심리전을 사실상 무죄로 수행하고 있으며, 가끔 발생하는 소송은 중요하지 않다는 의견.

          + FANGs가 대중에 대한 대규모 심리전을 사실상 처벌 없이 수행하고 있으며, 간혹 발생하는 소송은 큰 영향을 주지 않는다는 의견.

     * 메타를 '악의 온라인 제국'이라고 부르며, 회사 역사가 도덕적으로 의심스러운 행동들로 가득하다고 비판함.

          + 메타를 '악의 온라인 제국'으로 지칭하며, 회사 역사가 도덕적으로 의심스러운 행동들로 가득 차 있다고 비판.

     * Cloudflare가 SSL 종료/오프로딩을 통해 무엇을 하고 있는지에 대한 의문 제기.

          + Cloudflare가 SSL 종료/오프로딩을 통해 어떤 행동을 하고 있는지에 대한 의문.

     * TLS와 SSL을 혼동하지 말 것과, 서비스 약관에 명시하지 않고 TLS를 제거하는 행위는 CFAA에 따라 처벌받아야 한다는 의견.

          + TLS와 SSL을 혼동하지 말 것을 지적하며, 서비스 약관에 명시하지 않고 TLS를 제거하는 행위는 CFAA에 따라 처벌받아야 한다는 의견.

     * 메타가 도청법을 위반하지 않았다고 부인하지만, 동의에 대한 증거는 제시하지 않음. 메타가 '시장 조사'라고 주장하는 VPN 앱의 통신 간섭에 대한 문서 공개를 꺼리는 이유에 대한 의문.

          + 메타가 도청법 위반을 부인하지만 동의에 대한 증거를 제시하지 않고, VPN 앱을 통한 통신 간섭이 '시장 조사'라고 주장하며 관련 문서 공개를 꺼리는 이유에 대한 의문.

     * 문서에 따르면, 계획은 유저들에게 알리지 않고 시험적으로 배포하는 것이었는지, 아니면 유저들이 동의하고 참여하는 것이었는지에 대한 질문.

          + 문서에 따르면, 메타의 계획이 유저들에게 알리지 않고 시험적으로 배포하는 것인지, 아니면 유저들이 동의하고 참여하는 것인지에 대한 질문.
"
"https://news.hada.io/topic?id=14184","이스라엘 최고 스파이 국장, 온라인 보안 실수로 진짜 신원 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  이스라엘 최고 스파이 국장, 온라인 보안 실수로 진짜 신원 노출

이스라엘 최고 스파이 책임자, 온라인 보안 실수로 실명 노출

     * 이스라엘의 유닛 8200의 지휘관인 요시 사리엘의 신원이 온라인에서 노출됨.
     * 사리엘은 세계에서 가장 강력한 감시 기관 중 하나인 유닛 8200을 이끌고 있음.
     * 그는 20년 이상 은밀하게 활동해왔으나, 아마존에 출판한 책으로 인해 신원이 드러남.

AI 전략의 건축가

     * 사리엘은 인공지능(AI)이 군사 인력과 기계 사이의 관계를 변화시킬 수 있는 급진적인 비전을 제시한 책의 저자임.
     * 이 책은 2021년 그의 이니셜을 사용한 필명으로 출판되었으며, 이스라엘 방위군(IDF)이 가자 전쟁에서 선보인 AI 시스템의 청사진을 제공함.

보안 실수로 인한 신원 노출

     * 책의 전자 버전에 포함된 익명의 이메일 주소가 사리엘의 구글 계정으로 쉽게 추적됨.
     * IDF 대변인은 이 이메일 주소가 사리엘의 개인 이메일이 아니라 책과 관련된 문제를 위해 특별히 만들어진 것이라고 밝힘.
     * IDF는 이 문제를 ""실수""라고 인정하고 유사한 사례가 재발하지 않도록 조사할 것이라고 발표함.

유닛 8200에 대한 논란

     * 유닛 8200은 팔레스타인 영토를 면밀히 감시하는 방대한 감시 장치를 구축한 것으로 알려짐.
     * 그러나 지난해 10월 7일 이스라엘 남부에 대한 하마스의 치명적인 공격을 예견하고 방지하는 데 실패한 것에 대해 비판을 받음.
     * 이 공격으로 거의 1,200명의 이스라엘인이 사망하고 약 240명이 납치됨.

AI를 활용한 군사 기술의 새로운 전선

     * IDF는 사리엘의 비전을 완전히 받아들여 가자 지역에 대한 폭격에 AI 시스템을 의존하고 있음.
     * IDF는 인간 지능관들이 국제법에 따라 합법적인 목표물인지 확인해야 하는 AI 시스템을 사용하고 있다고 밝힘.

목표물 기계

     * 사리엘은 AI를 활용하여 현대 전쟁을 변화시키는 것을 주장하는 책을 IDF의 허가를 받아 미국 국방대학에서 방문 연구원으로 있던 해에 집필함.
     * 책은 인간과 AI 사이의 시너지를 달성하는 '인간-기계 팀워크' 개념을 제시함.

정보 수집의 분열

     * 사리엘의 보안 실수 공개는 그에게 어려운 시기에 발생함.
     * 이스라엘 내부에서는 유닛 8200이 기술에 중독되어 전통적인 정보 수집 방법을 소홀히 한 결과로 보고 있음.
     * 사리엘은 10월 7일의 사건이 자신을 ""망령처럼 따라다닐 것""이라고 동료들에게 말함.

GN⁺의 의견

     * 이 기사는 국가 안보와 개인의 프라이버시 사이의 긴장 관계를 잘 보여줌. 정보 수집 기관의 감시 활동이 얼마나 광범위하게 이루어지는지, 그리고 이러한 활동이 어떻게 개인의 신원과 안전을 위협할 수 있는지에 대한 중요한 사례임.
     * AI 기술이 군사 작전에 통합되는 방식은 전쟁의 미래를 형성하는 데 중요한 역할을 할 수 있음. 그러나 이러한 기술의 사용은 윤리적, 법적 문제를 제기하며, 무고한 시민들의 안전을 위협할 수 있는 잠재력을 가지고 있음.
     * 사리엘의 책과 그의 신원 노출은 기술이 어떻게 우리의 일상 생활에 깊숙이 침투했는지를 보여줌. 이는 기술에 대한 의존도가 높아짐에 따라 개인과 조직이 직면할 수 있는 보안 위험에 대해 경각심을 갖게 함.
     * 이 사건은 정보 수집 기관이 자신들의 정보 보안을 어떻게 관리하는지에 대한 질문을 제기함. 고위급 인사의 신원이 이처럼 쉽게 노출될 수 있다면, 일반 시민들의 데이터는 얼마나 안전한가에 대한 의문이 생김.
     * 이 기사는 AI와 빅 데이터가 군사 작전에서 어떻게 활용될 수 있는지에 대한 통찰을 제공함. 이는 기술 발전이 국제법과 인권 보호에 어떤 영향을 미칠 수 있는지에 대한 논의를 촉진할 수 있음.

        Hacker News 의견

     *

     보안상의 실수가 그의 아마존에서 출판한 책과 연결되어 있으며, 이로 인해 그의 개인 구글 계정, 고유 ID, 계정의 지도 및 캘린더 프로필에 대한 링크가 디지털 흔적으로 남게 되었다.
          + 보안 실수의 성격에 대한 궁금증: 아마존에서 자가 출판 시 이메일 주소가 노출되는 버그가 있는지, 아니면 저자가 구글 맵과 캘린더 콘텐츠를 책에 공유하면서 실제 이메일이 노출되었는지에 대한 의문 제기.
     *

     일부 사람들은 진짜 정체를 숨기기 위해 필명을 사용하고, 다른 사람들은 공적인 인물과 사적인 인물을 분리하기 위해 사용한다. 이 경우는 후자에 해당한다.
          + 필명 사용의 이유: 진짜 정체를 숨기기 위한 것이 아니라, 공적인 인물과 사적인 인물을 분리하기 위한 것으로 보임.
     *

     Opsec은 어렵다. AI의 잠재력에 대해 얼마나 낙관적이든, 살인 결정에 AI를 사용하는 것은 끔찍하고 윤리적으로 받아들일 수 없다. 이는 책임 없는 참사의 가능성을 만든다.
          + AI 사용의 윤리적 문제: AI를 사용하여 살인 결정을 내리는 것은 책임감 없는 참사를 초래할 수 있으며, 이는 윤리적으로 받아들일 수 없음.
     *

     그의 정체가 누설되었다고 해도, 감독이 되면 어떤 일을 하든 더 많이 눈에 띄게 된다. 감독은 숨길 수 없다.
          + 감독의 노출 불가피성: 감독이 되면 어떤 행동을 하든 더 많이 주목받게 되며, 숨길 수 없음.
     *

     여기 책이 있다:
          + 책 링크 제공: 저자가 출판한 책에 대한 아마존 링크 공유.
     *

     개인적으로 그의 정체에는 관심이 없지만, 그가 출판한 책의 내용이 훨씬 더 흥미롭다.
          + 책 내용에 대한 관심: 저자의 정체보다 책의 내용이 더 흥미로움.
     *

     요시 사리엘의 뛰어난 4D 체스 무브: 그는 실수를 가장하여 공식적으로 사임하지 않고 역할에서 물러나려고 한다. 이 ""실수""는 그의 상사들에게 그의 퇴장을 위한 구실을 제공한다.
          + 전략적 실수: 저자가 공식적으로 사임하지 않고 역할에서 물러나기 위해 실수를 가장하는 전략을 사용했을 가능성에 대한 추측.
     *

     이런 종류의 일이 전문가들에게도 어렵다는 것을 알게 되어 좋다
          + 보안의 어려움: 전문가들에게도 보안 유지가 어려운 일임을 인식하는 것에 대한 만족감 표현.
     *

     사리엘의 비판자들은, 보고서에 따르면, 유닛 8200이 ""중독성 있고 흥미로운"" 기술을 더 오래된 정보 수집 방법보다 우선시함으로써 재앙으로 이어졌다고 믿는다.
          + 기술 우선주의에 대한 비판: 유닛 8200이 전통적인 정보 수집 방법보다 현대적인 기술을 우선시함으로써 발생한 재앙에 대한 비판.
     *

     Opsec은 어렵다. 99999번 모든 것을 올바르게 수행하고, 한 번 실수하면 끝이다.
          + 보안 유지의 어려움: 거의 완벽하게 보안을 유지해도 단 한 번의 실수로 모든 것이 무너질 수 있음을 강조.
"
"https://news.hada.io/topic?id=14216","Maestro - 모바일 앱 자동화 UI 테스팅 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Maestro - 모바일 앱 자동화 UI 테스팅 프레임워크

     * 모바일 앱의 UI 테스트를 자동화하는 가장 쉬운 방법
     * UI 요소의 불안정성에 대한 내재적 허용오차를 가짐
          + UI 요소가 항상 예상한 위치에 있는 것은 아니기에 화면을 탭하는게 항상 동작하는 것은 아님
          + 모바일 애플리케이션과 디바이스의 불안정성을 수용하고 이에 대응하려고 함
     * Delay에 대한 내재적 허용오차를 가짐
          + 테스트에 sleep() 호출을 넣을 필요가 없음
          + 콘텐츠 로드(예: 네트워크를 통해)에 시간이 걸릴 수 있음을 알고 자동으로 기다리지만 필요 이상으로 오래 기다리지는 않음
     * 매우 빠른 반복이 가능함
          + 테스트는 인터프리팅되므로 컴파일할 필요가 없음
          + 테스트 파일을 지속적으로 모니터링하고 변경될 때 다시 실행할 수 있음
     * 선언적이면서도 강력한 문법을 제공함
          + yaml 파일에서 테스트를 정의함
     * 설정이 간단함
          + 어디서나 작동하는 단일 바이너리임

GN⁺의 의견

     * Maestro는 모바일 앱 테스트 자동화를 위한 새로운 도구로, 기존 Appium, Espresso, UIAutomator, XCTest 등의 한계점을 극복하고자 함. 특히 UI 요소의 불안정성과 지연에 대한 내재적 허용오차를 가지고 있어 기존 도구 사용시 발생하던 문제를 줄일 수 있을 것으로 보임.
     * YAML 기반의 선언적 문법을 사용하므로 개발자가 아닌 QA 엔지니어도 쉽게 테스트 케이스를 작성할 수 있을 것 같음. 다만 YAML 문법에 익숙하지 않은 경우 학습 비용이 들 수 있음.
     * 모바일 앱 테스트 자동화 도구로는 Appium이 널리 사용되고 있음. Appium은 여러 모바일 플랫폼과 프로그래밍 언어를 지원한다는 장점이 있지만, 안정성 문제로 테스트 실패율이 높다는 단점이 있음. Maestro가 이런 Appium의 문제를 얼마나 해결할 수 있을지 지켜볼 필요가 있음.
     * 현재 Maestro는 문서화가 잘 되어있고, Slack 커뮤니티도 운영 중이므로 도입을 고려해 볼만함. 다만 아직 초기 버전이므로 프로덕션 환경에 적용하기 전에 충분한 검증이 필요할 것으로 보임.

   해보니까 금방(셋업부터 첫 테스트용 yaml 만들기까지 1시간 내외) 할 수 있어서 괜찮네요

   maestro가 심플하고 좋은 점이 많은데요. 아직 android에서는 한글 입력 이슈가 있습니다. https://github.com/mobile-dev-inc/maestro/issues/146

   또 아쉬운 점은 다른 테스트 도구에 비해 빠르게 실행되진 않습니다. 보통 테스트 도구는 실제 사용자와 달리 매우 빠르게 실행되다보니 wait 을 정교하게 설계하지 않으면 flaky하게 테스트가 실패하는 이슈가 있었는데. maestro는 그냥 느리게 기다리는 걸로 해결하기로 한 게 아닌가 싶을 정도로 느립니다. ^^;;;

   한편으로 web frontend testing에서는 접근성 요소를 활용하는 접근이 인기를 끌고 있고, 모바일에서도 그런데요. ( https://blog.banksalad.com/tech/test-in-banksalad-ios-2/ 참고)

   마에스트로는 text와 id 위주로 하다보니. ""상품 목록"" 이라는 link와 button, heading 등의 role을 구분하기가 어렵더군요. web에서는 aria-checked, aria-expanded 등으로 검증할 수 있는 부분들도 아쉽고요.

   저는 test-id가 id 충돌을 막기 위해 prefix 등을 붙이게 되고, 결국 이렇게 가져온 요소가 기대하는 text를 렌더하는지는 다시 테스트해야 하는 게 번거로웠습니다.

   인사이트 가득한 코멘트 감사합니다
"
"https://news.hada.io/topic?id=14182","메인보드 내장 IRC 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           메인보드 내장 IRC 클라이언트

UEFI에 대한 간단한 복습

     * UEFI는 마더보드 ROM에 저장된 펌웨어를 통해 OS의 부트로더가 로드됨.
     * BIOS의 제한을 극복하기 위해 UEFI라는 새로운 표준이 도입됨.
     * UEFI는 64비트 환경에서 부트로더를 실행하고, 다양한 API를 제공함.

네트워크 부팅

     * 일부 부트로더는 로컬 장치 대신 네트워크를 통해 OS를 로드할 수 있음.
     * UEFI 펌웨어는 네트워크 스택을 포함하고 있으며, 이를 통해 사전 부팅 환경에서 애플리케이션 실행이 가능함.

Rust 네트워킹 in UEFI

     * Rust로 UEFI의 TCP 프로토콜을 구현하는 것이 프로젝트에서 가장 까다로운 부분임.
     * UEFI의 TCP 프로토콜 사용은 복잡하며, 글로벌 상태와 콜백, scatter-gather 버퍼 등을 포함함.
     * 메모리 누수나 TCP 수신 버퍼 UAF(Use-After-Free)를 방지하기 위해 Rust 코드를 신중하게 테스트함.

커서 지원

     * 마우스는 IRC 클라이언트에 필수는 아니지만, 사용자 경험을 향상시킴.
     * UEFI의 Simple Pointer Protocol을 사용하여 마우스 움직임과 버튼 입력을 읽음.

IRC 메시지 모델링

     * IRC 메시지 모델링은 간단하고 즐거운 작업임.
     * IRC는 텍스트 기반의 라인 포맷을 사용하며, 표준화된 부분만 일부 포함됨.

UEFI에서 libgui 사용하기

     * UEFI에서 GUI 툴킷을 실행하는 것은 이미 axle의 Rust GUI 툴킷을 다른 컨텍스트에서 사용할 수 있도록 많은 작업을 한 후여서 비교적 수월함.
     * AwmWindow의 UEFI 구현을 제공한 후, 이벤트 관리, 폰트 렌더링, 레이어 합성 등 대부분의 libgui 기능을 사용할 수 있음.

스크롤 바

     * 스크롤 뷰에 텍스트가 주로 표시되므로 스크롤 바 기능을 Rust libgui에 재구현함.

스크롤 뷰에서의 텍스트 렌더링

     * 스크롤 뷰에서 텍스트를 렌더링하는 방식에 몇 가지 변경이 필요함.
     * 스크롤 뷰는 '타일' 기반으로 확장 가능한 캔버스를 사용하여 픽셀 데이터를 관리함.

libgui 개선

     * 새로운 그래픽 애플리케이션을 구현할 때마다 시스템과 API를 개선할 기회가 있음.
     * UEFIRC를 개발하면서 libgui에 몇 가지 트윅과 수정을 추가함.

완전히 불필요함

     * UEFIRC 자체는 실제로 사용하기에는 그다지 유용하지 않으며, 이 프로젝트는 복잡한 농담임.
     * UEFI의 TCP/IP 스택에 대해 불만이 있다면, 이 도구로 불평을 표현할 수 있음.

GN⁺의 의견

     * 이 프로젝트는 UEFI 환경에서 작동하는 그래픽 IRC 클라이언트를 Rust로 개발한 것으로, 시스템 부팅 전에 채팅과 메시지 읽기가 가능한 독특한 시도임.
     * UEFI의 복잡성과 Rust 언어의 메모리 안전성을 활용한 네트워킹 구현은 시스템 프로그래밍 분야에서 중요한 학습 자료가 될 수 있음.
     * 이 기술이 실제로 유용한지는 논란의 여지가 있지만, UEFI 환경에서의 애플리케이션 개발에 대한 가능성을 탐구하는 데에는 흥미로운 사례임.
     * UEFI 프로그래밍 모델의 복잡성과 Rust의 안전성을 결합한 이 프로젝트는 시스템 수준 프로그래밍에 대한 이해를 높이는 데 도움이 될 수 있음.
     * 프로젝트는 오픈소스로 공개되어 있어, 관심 있는 개발자들이 참고하고 활용할 수 있는 좋은 자료임.

        Hacker News 의견

     * UEFI 프리부트 환경에서 실행되는 그래픽 IRC 클라이언트를 개발한 개발자의 경험

     개발자는 GPS 수신기 프로젝트에 지쳐서 가볍고 유쾌한 프로젝트를 시작함. 예상보다 시간이 더 걸렸으며, 스크롤 뷰 모델링과 정적 뷰포트로의 렌더링에 많은 시간을 할애함. UEFI에 소셜 미디어 느낌의 IRC 클라이언트를 구현하는 것이 목표였으며, 이미 UEFI의 HTTP 프로토콜을 사용한 트위터 클라이언트가 있어서 IRC를 선택함.
     * 소프트웨어 스택에서 운영체제가 가장 낮은 수준이라는 잘못된 인식에 대한 지적

     실제로 시스템을 제어하는 펌웨어 코드가 존재하며, 이는 때로는 OS에도 투명하게 작동함. UEFI에서 IRC 클라이언트를 실행할 수 있다는 사실은 더 심각한 문제가 발생할 수 있음을 시사함.
     * 프로젝트의 목적에 대한 질문에 대한 반응

     개발자는 프로젝트를 재미로 시작했으며, 이는 해커뉴스 커뮤니티가 추구하는 정신임. 프로젝트의 실용성보다는 창의성과 재미를 중시함.
     * 개발자의 친구가 프로젝트에 대한 반응

     프로젝트를 농담으로 설명했지만, 친구는 웃을 타이밍을 모르겠다고 함. 개발자는 프로젝트의 잠재적 가치를 과소평가하지 말 것을 권함.
     * UEFI API의 접근성과 문서화에 대한 감탄

     개발자는 UEFI API가 잘 문서화되어 있고 쉽게 접근할 수 있다는 것에 놀라움을 표함. 개발 과정에서 가상머신을 사용했는지, 클라이언트를 실행할 때마다 부팅해야 했는지에 대한 궁금증을 나타냄.
     * 마우스 가속 기능에 대한 개인적인 의견

     마우스 가속은 사용자가 화면 상의 거리를 학습하는 데 방해가 됨. 게이머들 사이에서는 이 기능을 끄는 것이 일반적이며, 장기적으로 더 효율적임.
     * UEFI의 초기 약속에 대한 언급

     UEFI가 처음 소개될 때 저수준 애플리케이션의 가능성을 약속했으며, 일부 벤더의 리눅스 기반 인터넷 전용 미니 OS를 대체할 수 있을 것이라는 꿈을 가졌음.
     * 다른 부트로더 프로젝트와의 비교

     barebox 부트로더의 에이프릴풀 프로젝트를 언급하며, TCP 지원 추가에 초점을 맞춘 것과는 달리, 개발자의 프로젝트는 GUI 요소를 포함함.
     * 기사의 시각화에 대한 칭찬

     기사에 포함된 시각화 작업이 인상적임을 언급함.
     * 베어메탈 환경에서의 음악 관련 애플리케이션 가능성

     빠르게 부팅되고 불필요한 부품이 없는 베어메탈 환경에서 합성기나 기타 효과 프로세서 같은 음악 관련 애플리케이션의 이점을 설명함. 이를 위해서는 오디오 카드 지원도 필요함.
"
"https://news.hada.io/topic?id=14101","생산적인 일정관리 방법, Time Blocking","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      생산적인 일정관리 방법, Time Blocking

   하루에도 다양한 관계자와 미팅과 업무를 반복하고, Email, Slack, Jira, Notion, Figma 등 다양한 환경에서 업무 요청을 받는 사람들에게는 Time Blocking이야말로 효과적인 일정관리 방법입니다. 분산된 업무 환경에서 온전히 본인의 업무에 몰입하여 빠르게 미팅과 업무를 처리하기 위해서는 언제 어떤 업무에 몰입할 것인지 정하는 Time Blocking을 활용하여 업무를 놓치지 않고 처리할 수 있습니다.
   Time Blocking을 하는 이유는 높은 생산성을 발휘하기 위함이지, 단순히 시간을 아름답게 관리하기가 목적이 되어서는 안됩니다. 시간 관리 자체에 매몰되지 않도록 항상 주의해야 합니다.
"
"https://news.hada.io/topic?id=14132","3D + 2D: 크로스플랫폼 WASM 그래픽 엔진 테스트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    3D + 2D: 크로스플랫폼 WASM 그래픽 엔진 테스트

Adobe에서의 경험과 Renderlet의 탄생

     * Adobe에서 Photoshop과 Acrobat과 같은 대형 애플리케이션의 인프라 작업을 했음.
     * 데스크톱, 웹, 모바일, 클라우드에서 강력한 코드베이스를 작동시키는 것이 큰 골칫거리였음.
     * Lightroom과 Photoshop을 웹에서 작동시키기 위해 JavaScript, Google의 PNaCl, asm.js, 그리고 마침내 WebAssembly를 거치는 복잡한 과정을 거쳤음.
     * GPU 아키텍처를 재고하고, 단일 스레드 빌드를 작동시키며, 웹 컴포넌트를 중심으로 UI를 재구성해야 했음.
     * 웹 빌드는 현재 잘 작동하지만, 여기에 도달하기까지 10년이라는 긴 여정이었음.

WebAssembly의 가능성

     * 그래픽 스택은 이식성에서 가장 큰 병목 현상을 일으키는 부분임.
     * 어느 날 WebAssembly(Wasm)가 이 문제의 해결책을 제공한다는 것을 깨달음.
     * Wasm은 어디서나 실행 가능하고, 어떤 것에도 삽입 가능하며, 실시간 그래픽에 충분한 성능을 제공함.
     * 이에 직장을 그만두고 처음부터 WASM 기반의 이식 가능하고 삽입 가능한 그래픽 프레임워크를 만드는 모험을 시작함.
     * 애플리케이션 개발자가 쉽게 원하는 그래픽을 만들 수 있도록 고수준이면서도 GPU를 포함한 고성능 애플리케이션에 필요한 모든 것을 최대한 활용할 수 있는 저수준의 기능을 제공함.

Renderlet 소개

     * Renderlet은 삽입 가능한 측면을 강조하기 위해 이름 지어짐.
     * 자체적인 그래픽 모듈을 만들어 연결하고, 어떤 것에나, 어떤 것 안에서나 쉽게 상호 운용할 수 있음.
     * Unity가 개발자들이 크로스 플랫폼 게임을 쉽게 만들 수 있게 한 것처럼, 모든 시각적 애플리케이션에 대해 같은 일을 하려는 아이디어임.

개발 과정과 피드백 요청

     * YC에 솔로 창업자로 참여했으나, 대부분의 시간을 지난 6개월 동안 이 프로젝트를 구축하는 데 집중함.
     * 아직 오픈 알파 릴리스 준비는 되지 않았지만, 곧 준비될 것이며, 이에 대해 글을 쓰고, 보여주며, 피드백을 받고 싶어함.
     * 이것은 애플리케이션 개발자로서 꿈꿔왔던 것이며, 다른 사람들의 생각을 알고 싶어함.

Rive와 Renderlet의 결합

     * Rive가 2D 벡터 엔진을 오픈소스로 공개하고 화제가 되었을 때 흥미를 느낌.
     * Rive의 렌더러는 SVG와 유사한 고수준 2D API로 구축되어 있으며, Renderlet의 Wander 렌더러는 GPU 위에 저수준 3D API를 노출함.
     * Renderlet이 GPU 백엔드를 사용하여 Rive Renderer 라이브러리를 실행할 수 있으며, 이를 통해 모든 3D 앱이 2D 벡터 백엔드를 가질 수 있음.
     * 실제로 구현하여 작동하는 것을 Vimeo에서 볼 수 있으며, GitHub에서 기술적인 내용을 깊이 파고들 수 있음.

GN⁺의 의견

     * Renderlet은 기존의 복잡한 그래픽스 애플리케이션 이식 문제를 해결하려는 혁신적인 접근을 제시함. 이는 개발자들에게 다양한 플랫폼에서 일관된 사용자 경험을 제공할 수 있는 강력한 도구가 될 수 있음.
     * Renderlet의 개발자는 Adobe에서의 경험을 바탕으로 실제 시장의 필요와 기술적 한계를 잘 이해하고 있으며, 이는 프로젝트의 성공 가능성을 높임.
     * 그러나 Renderlet이 아직 초기 단계에 있고, 오픈 알파 릴리스가 되지 않았기 때문에, 실제 환경에서의 성능과 안정성은 아직 검증되지 않음.
     * 이 기술이 성공적으로 도입되기 위해서는 광범위한 커뮤니티 지원과 개발자들의 적극적인 참여가 필요함. 오픈소스 프로젝트로서 개발자들의 기여와 피드백이 프로젝트의 성장에 큰 영향을 미칠 것임.
     * Renderlet과 유사한 기능을 제공하는 다른 프로젝트나 프레임워크로는 Unity, Unreal Engine, Godot 등이 있으나, Renderlet은 Wasm 기반의 경량화와 이식성에 더 중점을 둔 차별화된 접근 방식을 취하고 있음.

        Hacker News 의견

     * PAL 단계를 건너뛰고 바로 SetupRuntime으로 넘어가는 것이 좋음. 비그래픽 개발자들은 이러한 사항을 잘 모르며, API에 불필요한 추가 단계를 만드는 것은 바람직하지 않음. PAL은 다른 곳에서 사용되지 않으므로, WebGPU를 사용하는 것이 좋음. (IPal은 IRuntime의 멤버여야 하며, WebGPU 컨텍스트에서 제거될 준비가 되어 있음).
          + 웹GPU 사용 권장: PAL 단계 생략, SetupRuntime 직접 시작, API 단순화 필요성, IPal의 IRuntime 통합 및 제거 대상.
     * 이 프로젝트는 플랫폼 간 GUI를 만들기 위한 멋진 위젯 키트와 상호작용 모델을 위한 놀라운 캔버스가 될 수 있음. C/C++ 백엔드와 WASM 타겟은 거의 모든 언어로 FFI를 구축할 수 있음.
          + 플랫폼 간 GUI 개발 가능성: 다양한 언어로 FFI 구축 가능, C/C++ 백엔드와 WASM 타겟의 장점.
     * 텍스트와 폰트 지원에 대한 계획이 궁금함. 일부 그래픽 엔진은 원하는 모든 방식으로 텍스트를 지원하지 않음. OTF나 WOFF2 파일을 로드하고 임의의 문자열을 표시할 수 있을지 여부에 대한 질문.
          + 텍스트 및 폰트 지원 문의: 다양한 텍스트 표시 방식 지원, OTF/ WOFF2 파일 로드 및 문자열 표시 가능성.
     * 프로젝트에 대한 큰 관심. 런타임, 이벤트 루프, FFI, 윈도우 포인터 소유권 등에 대한 몇 가지 질문이 있음. 오디오 플러그인과 VST에 대한 관심이 있으며, 이벤트 루프와 윈도우 관리에 대한 제약이 있음. JUCE는 사실상의 해결책이지만 오래되었고 불편함.
          + 오디오 플러그인과 VST에 대한 관심: 런타임, 이벤트 루프, FFI, 윈도우 관리에 대한 질문, JUCE의 대안으로서의 가능성.
     * 이 프로젝트는 정말 멋지며, 지난 몇 년 동안 꿈꿔온 것임. WASM은 그래픽/오디오/멀티미디어 계산의 휴대 가능한 단위로서 많은 잠재력을 가지고 있음.
          + WASM의 잠재력 강조: 그래픽/오디오/멀티미디어 계산을 위한 휴대 가능한 단위로서의 WASM의 가능성.
     * Godot Engine에서 WASM을 작동시키기 위한 작업을 진행 중임. Safari에서의 공유 배열 버퍼 접근성 문제와 온라인 게임에 중요한 광고 네트워크 접근 문제를 어떻게 극복했는지 궁금함. 단일 스레드 대 정규 빌드 문제를 지적함.
          + Godot Engine과 WASM 작업: Safari의 공유 배열 버퍼 접근성 문제, 광고 네트워크 접근, 단일 스레드 대 정규 빌드 문제.
     * 3D 그래픽/WASM 분야에서 더 많은 프로젝트를 보게 되어 기쁨. YC에 들어가기 위한 팁이 있는지 질문. Unreal Engine 5를 WebGPU와 WebAssembly로 포팅하는 작업을 수년간 진행해옴. 멀티스레드 렌더러와 자산 스트리밍 시스템을 가지고 있으며, 사용자가 전체 게임/앱을 미리 다운로드할 필요가 없음. 또한, 전체 애플리케이션을 한 번에 메모리에 올릴 필요가 없음. 개발자들이 온라인으로 프로젝트를 배포할 수 있는 전체 호스팅 플랫폼과 백엔드도 구축함.
          + Unreal Engine 5의 WebGPU 및 WebAssembly 포팅: 멀티스레드 렌더러, 자산 스트리밍 시스템, 전체 게임/앱 다운로드 불필요, 호스팅 플랫폼 및 백엔드 구축.
     * wasm I/O에서의 발표가 놀라웠으며, 이 작업이 주목받고 있는 것을 보게 되어 기쁨.
          + wasm I/O 발표에 대한 긍정적 반응: 발표의 인상적인 내용과 작업의 주목.
     * Flutter의 주요 개발자인 Ian Hickson의 기사를 읽었는지 질문. WASM을 사용하여 완전한 크로스 플랫폼 UI 프레임워크를 가질 수 있는 개념을 설명하고 있으며, 이는 Flutter가 사용하는 개념임.
          + Flutter와 관련된 WASM 사용: 크로스 플랫폼 UI 프레임워크 개념, Flutter와의 연관성.
     * CAD 커널에 대해 앱에 통합할 수 있는 manifold를 강력히 추천함.
          + CAD 커널 추천: 앱 통합을 위한 manifold 추천.
"
"https://news.hada.io/topic?id=14113","Trix - 글쓰기를 위한 Rich Text 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Trix - 글쓰기를 위한 Rich Text 에디터

     * 37Sinals가 Basecamp 및 Hey 이메일 서비스에 사용하는 에디터를 오픈소스로 공개
     * 메시지, 댓글, 기사, 리스트 등의 대부분 글쓰기를 위해 사용가능한 WYSIWYG 에디터
     * 정교한 문서모델, 파일 첨부 가능, 간결하고 일관된 HTML 출력
     * contenteditable 을 I/O 디바이스로 취급, 입력을 받으면 편집 오퍼레이션으로 변환하여 내부 문서 모델에 적용한뒤에 재 렌더링하는 방식

   Hey 의 기술 스택
"
"https://news.hada.io/topic?id=14106","AI에 의해 대체되는 일자리 - 5백만 프리랜서 직업 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AI에 의해 대체되는 일자리 - 5백만 프리랜서 직업 분석

     * 어떤 직업들이 AI에 의해 대체될 가능성이 높고, 현재 실제로 대체되고 있는지에 대한 데이터 기반 분석
     * Upwork에서 2022/11 - 2024/02 동안의 프리랜싱 직업 데이터를 분석하여 AI에 의해 가장 큰 부정적 영향을 받은 직업을 파악
     * 왜 대기업이 아닌 프리랜서 직업을 분석하는가?
          + 첫째, 특정 직업에 대한 AI의 영향은 프리랜스 시장에서 먼저 나타날 가능성이 높으며, 대기업은 AI 도구 채택에 훨씬 더 느릴 것이라는 예상 때문
          + 둘째, 최근 Upwork 수익 보고서에 따르면 기술 분야의 해고가 프리랜스 시장에 큰 영향을 주지 않으며, 최근 분기에 연간 대비 수익이 14% 증가했다고 밝혀짐

가장 큰 감소를 보인 직업 카테고리

     * Upwork에서 가장 인기 있는 12개 직업 카테고리를 분석한 결과, ChatGPT 출시 이후 대부분의 직업 카테고리에서 직업 수가 증가함
     * 그러나 글쓰기, 번역, 고객 서비스 직종에서는 큰 감소를 보임
          + 글쓰기 직종은 33% 감소, 번역 직종은 19% 감소, 고객 서비스 직종은 16% 감소

가장 영향을 덜 받은 직업 카테고리

     * 글쓰기, 번역, 고객 서비스를 제외한 다른 대부분의 직업 카테고리에서는 부정적인 영향을 받지 않았으며, 실제로 직업 수가 증가함
          + ChatGPT 출시 이후, 비디오 편집/제작 직종은 39% 증가, 그래픽 디자인 직종은 8% 증가, 웹 디자인 직종은 10% 증가
          + 소프트웨어 개발 직종도 증가하여, 백엔드 개발 직종은 6% 증가, 프론트엔드/웹 개발 직종은 4% 증가

분석 결과에 대한 해석

     * ChatGPT와 같은 생성 AI 도구는 이미 많은 글쓰기 작업을 대체할 만큼 충분히 좋음. 하지만 비디오와 이미지 생성과 같은 다른 직업에는 아직 완벽하지 않음
     * 사용자가 이러한 도구를 효과적으로 사용하는 방법을 배우고, 할 수 있는 것과 할 수 없는 것을 이해하는 데 시간이 걸릴 것
     * 글쓰기 직업 수가 감소하기 시작한 것은 ChatGPT 출시 직후가 아니라, 출시 후 거의 10개월이 지난 8월부터 감소 속도가 가속화

시간당 급여가 가장 크게 감소한 직업 카테고리

     * 직업별 볼륨 감소와 급여 감소 사이에 상관관계가 있는지에 대한 직접적인 데이터는 없으나, 직업 게시물에 명시된 예상 시간당 급여 범위를 분석함으로써 프리랜서가 실제로 받은 급여에 대한 대략적인 추정을 시도함
     * 번역 직종의 시간당 급여가 20% 이상 감소하면서 가장 큰 타격을 받았으며, 비디오 편집/제작 및 시장 조사 직종이 그 뒤를 이음
     * 그래픽 디자인과 웹 디자인 직종은 가장 탄력적임. 이 두 분야는 볼륨뿐만 아니라 시간당 급여도 약간 증가함

분석 결과에서의 교훈

     * 이 데이터에서 확실한 결론을 내리기는 어렵지만, 급여 변화의 많은 부분이 정상적인 계절적 변동일 수 있음
     * 그러나 그래픽 디자인 + 웹 디자인 직종이 여전히 수요가 있고, 아직 AI 도구에 의해 대체되지 않고 있음을 알 수 있음
     * DALL-E와 MidJourney와 같은 도구들은 일정 수준의 지식과 창의력이 필요하며, AI 이미지 생성 분야의 전문가를 명시적으로 찾는 일부 직업 게시물에서 이를 확인할 수 있음
     * AI 도구로 시각적으로 인상적인 이미지를 생성하는 것은 좋은 프롬프트 구성 방법, 프롬프트 조정 방법을 아는 것뿐만 아니라 많은 시행착오를 필요로 함

직업 게시물이 가장 크게 증가한 AI 기술

     * AI로 인해 수요가 감소하는 직업이 있는 반면, 실제로 수요가 증가하고 있는 직업도 있음
     * 데이터 주석/라벨링 직업과 기계 학습 직업에 대한 초기 증가 추세가 있을 것이라는 가정과 달리, 데이터 주석 직업은 지난 10개월 동안 상당히 평평한 추세를 보였으며, 기계 학습 직업의 수는 ChatGPT 출시 이후 오히려 소폭 감소함

수요가 증가하는 AI 관련 직업

     * 기업들이 Upwork 외부에서 더 많은 기계 학습 엔지니어를 채용할 수도 있으나, 세계 최대 기업에서조차 기계 학습에 대한 수요가 눈에 띄게 증가하지는 않음
     * 반면, AI 콘텐츠 생성, AI 에이전트 개발, OpenAI/ChatGPT API 통합, AI 앱 개발 같은 일이 인기를 끌고 있으며, 가장 주목할 만한 사용 사례는 챗봇 개발임
     * ChatGPT와 OpenAI API 출시 이후 챗봇 관련 직업 게시물이 2000% 폭발적으로 증가함

분석에서의 교훈

     * 대다수의 기업들이 자체 LLM 모델을 개발하거나 많은 양의 훈련 데이터로 조정하는 등 화려한 작업을 하는 것이 아님
     * OpenAI의 API를 기존 제품에 통합하고, 고객 서비스 에이전트를 대체할 챗봇을 개발하는 것에서 큰 수요가 있음

결론

     * ChatGPT 출시 이후 글쓰기, 고객 서비스, 번역 직종의 눈에 띄는 감소가 관찰됨
     * 웹 디자인, 그래픽 디자인, 소프트웨어 개발, 비디오 제작 직종은 가장 탄력적이었으며, 수요 감소는 없었고 심지어 증가하기도 함
     * 이러한 사용 사례에 대해 AI 도구가 아직 충분히 좋지 않거나 일반 대중이 그것들을 효과적으로 사용하는 방법을 아직 배우지 못했는지 여부는 아직 불분명함
     * 현재 대다수의 기업들은 자체 LLM을 훈련시키거나 미세 조정하는 데 집중하지 않고 있음을, 데이터 주석 또는 기계 학습 직종의 증가가 없는 것으로 볼 수 있음
     * 현재 AI의 가장 인기 있는 사용 사례는 챗봇 개발에 있음

  Hacker News 의견

     * 요약: 글쓰기 관련 일은 많이 증가했으나, 번역과 고객 서비스 관련 일은 약간 감소함.
          + 프리랜싱 사이트에서의 고객 서비스는 낮은 품질을 의미함.
          + 고객 서비스를 위한 LLM(Large Language Models)은 여전히 만족스럽지 못한 성능을 보임.
     * 업워크(Upwork)에서 일을 얻는 개인의 경험:
          + 대부분의 클라이언트는 챗봇 에이전트 요구 사항을 충족시키기 위해 새로운 LLM을 미세 조정할 필요가 있다고 생각함.
          + 소프트웨어 엔지니어로서, 기계 학습 엔지니어가 아님에도 LLM 미세 조정 작업을 수행함.
          + 실제로 클라이언트들은 최신 기술에 근접한 LLM, 적절한 시스템 프롬프트, 몇 가지 기능/도구 호출 및 RAG(Retrieval-Augmented Generation)만 필요함.
          + SOTA(State of the Art) LLM은 일반적인 목적으로 사용되며, LLM 미세 조정은 프로젝트의 3단계로, 속도나 비용을 개선하거나 성능을 10% 향상시키기 위한 것임.
          + LLM 미세 조정에는 기계 학습 지식이 필수적이지 않으며, 데이터셋 형식과 프롬프트 엔지니어링에 대한 이해만 필요함.
     * 프리랜싱 사이트의 통계에 대한 비판적 관점:
          + 단일 프리랜싱 사이트의 통계에 기반한 기사로, 전체 시장 데이터의 일부만을 대표함.
          + Upwork 외의 일반 시장 추세를 보고하는 것처럼 들림.
          + 데이터 제공 회사인 Revealera의 공동 창립자가 기사 작성자임을 밝히지 않음.
          + 업워크에서 새로운 일자리 광고를 조사한 결과, 클라이언트의 고용률이 0에서 70% 사이임을 발견함.
     * 그래픽 디자인 일자리 증가에 대한 의문:
          + 그래픽 디자인 일자리가 8% 증가했다는 정보는 이전 연도와 비교하지 않고서는 의미가 없음.
     * AI 외의 다른 요인들에 대한 호기심:
          + 데이터는 AI와 관련이 있지만, AI가 원인인지에 대한 확신이 없음.
          + 고객 서비스 숫자에 대해 놀랐으며, LLM이 이전 솔루션보다 인간으로의 문제 상승을 줄이는 데 더 효과적인지, 아니면 경제 상황 등 다른 요인들 때문인지 의문임.
     * Midjourney, Stable Diffusion, DallE에 대한 평가:
          + 특정한 것을 염두에 두지 않고 특정 구성 요소가 없는 주제일 경우에는 이러한 AI 도구들이 유용함.
          + 일관되게 좋은 결과를 원하는 상황에서는 여전히 그래픽 디자인 기술이 필요함.
     * NVidia의 AI 간호사 발표:
          + NVidia가 AI 기반의 간호사를 발표하여 건강 관련 조언을 제공함.
     * 생성 AI 도구에 대한 비판:
          + 생성 AI 도구가 많은 글쓰기 작업을 대체할 만큼 충분히 좋다고 하지만, 실제로는 의미 없는 내용이 인터넷을 덮고 있음.
     * 소프트웨어 엔지니어 수요에 대한 AI의 영향:
          + AI가 소프트웨어 엔지니어 수요에 미치는 영향에 대한 최근 관련 기사 링크 제공.
     * AI가 아직 낮은 수준의 예술가를 대체할 수 없음:
          + 현재 비즈니스에서 만화/코믹 이미지가 필요했으나 AI 도구로는 만족스러운 결과를 얻지 못함.
          + Fiverr에서 인도네시아의 만화가를 고용하여 24시간 내에 훌륭한 결과물을 받음.
          + 그래픽 작업에는 여전히 저렴한 개발 도상국의 예술가를 사용할 계획임.
     * 비디오 편집 일자리와 가격 증가에 대한 추측:
          + AI 비디오 도구를 사용하여 비디오를 추가하는 사람들이 증가함에 따라 비디오에 대한 수요가 증가함.
          + 비디오 제작의 진입 장벽이 낮아져 더 많은 사람들이 비디오를 원하고, 시작은 하지만 도움이 필요함.
"
"https://news.hada.io/topic?id=14176","당신이 스스로를 해방시키고 싶다면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           당신이 스스로를 해방시키고 싶다면

자신을 늪에서 구하고 싶다면

     * 불충분한 활성화 에너지
          + 대부분의 벗어나려는 시도는 외부에서 볼 때 아무것도 하지 않는 것처럼 보임.
          + 구덩이에 공 넣기 : 관심 없는 프로젝트에 참여하게 되어 불만을 느낌.
          + 잭팟 기다리기 : 모든 면에서 우월한 옵션이 나타나기를 기다리는 행위.
          + 용을 거절하기 : 두려움 때문에 필요한 행동을 하지 않음.
          + 평범함의 덫 : 나쁘지 않아 보이지만 결코 행복하지 않은 상황에 머무름.
          + 문제 쓰다듬기 : 문제에 대해 과도하게 생각하고 집착하는 것.

나쁜 탈출 계획

     * “더 열심히 해보자”의 오류
          + 상황을 개선하려는 노력 없이 단순히 더 열심히 하겠다고 다짐함.
     * 무한한 노력의 환상
          + 미래에 사용할 수 있는 숨겨진 노력의 저장고가 있다고 착각함.
     * 신에게 책임 전가하기
          + 시간이 부족하다고 불평하며, 현실을 바꿀 수 없는 것에 대한 책임을 전가함.
     * 학위 문제와 칫솔질 문제
          + 일부 문제는 해결하면 영원히 끝나지만, 대부분의 문제는 지속적인 노력이 필요함.
     * 환상적인 변신
          + 미래에는 다른 사람이 되어 문제를 해결할 수 있을 것이라는 착각.
     * 인형극
          + 다른 사람들의 행동을 제어하여 문제를 해결하려고 시도함.

자신만의 늪

     * 바닥은 용암
          + 가상의 문제를 실제 문제처럼 여기고 자신이 만든 게임에서 지고 있다고 느낌.
     * 초감시
          + 세상의 모든 문제를 자신의 문제처럼 감시하고 추적함.
     * 고슴도치 행동
          + 다른 사람의 조언에 영향을 받지 않으려 함.
     * 개인 문제 성장 광선
          + 자신의 문제를 과대평가하고 다른 사람의 문제를 경시함.
     * 미미한 예측에 집착하기
          + 미래를 통제할 수 없다는 것을 인정하기 두려워서 중요하지 않은 결정에 집착함.
     * 불가능한 만족
          + 만족을 얻을 수 없다고 믿으며, 좋은 삶을 살 수 있는 모든 조건을 갖추고 있음에도 불구하고 행복을 찾지 못함.

좋은 고도를 기원하며

     * 삶의 늪에 빠진 패턴을 인식하고 때로는 그 패턴을 중단할 수 있음.
     * 문제의 이름을 찾는 것이 자신을 늪에서 구하는 데 도움이 될 수 있음.
     * 새해에는 늪에서 배울 수 있는 교훈만큼만 머물기를 바람.

GN⁺의 의견

     * 이 글은 개인이 느끼는 정체감과 문제 해결에 대한 심리적 접근을 재치 있게 풀어낸다. 독자들에게 자신의 문제를 다른 시각에서 바라보고 해결 방법을 찾는 데 도움을 줄 수 있다.
     * 글은 늪에 빠진 듯한 상황에서 벗어나기 위한 다양한 전략을 제시하며, 이는 직장인, 학생, 일상에 지친 사람들에게 유용한 조언이 될 수 있다.
     * 그러나 글에서 제시하는 방법들이 모든 사람에게 효과적일 수는 없으며, 실제로 심리적 문제를 해결하기 위해서는 전문가의 도움이 필요할 수도 있다는 점을 고려해야 한다.
     * 이 글은 독자들에게 자기반성의 기회를 제공하며, 자신의 문제를 해결하기 위해 실제로 어떤 노력이 필요한지를 고민하게 만든다.
     * 문제 해결에 있어서 자기 자신에 대한 이해와 자기 조절 능력의 중요성을 강조하고 있으며, 이는 개인의 성장과 발전에 기여할 수 있는 중요한 메시지를 담고 있다.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 대부분의 ""고착"" 현상은 필요한 일을 하거나 닥친 일을 처리하는 대신 너무 많이 생각하는 데서 비롯됨.
          + 저자는 자신만의 추상적인 신념 체계를 만들어내고, 이를 긴 에세이나 책으로 확장할 수 있을 정도로 세련되게 정리함.
          + 작가에게 이런 방식은 자신의 일을 하는 교묘한 방법이지만, 대부분의 사람들에게는 자신을 반성하게 만드는 덫이 될 수 있음.
          + 지적 호기심을 가진 커뮤니티 구성원들에게는 이러한 경향을 비판적으로 바라보는 것이 ""고착""에서 벗어나는 데 도움이 될 수 있음.
     * 두 번째 댓글 요약:
          + 많은 문제가 단순히 시작하는 것에 대한 꺼림칙함, 즉 ""치아 닦기 문제""로 요약될 수 있음.
          + 아담의 글쓰기를 매우 추천하며, 그의 글을 구독하고 결코 후회하지 않음.
          + ""귀로는 뇌에 도달할 수 없다""는 의사소통 실패에 대한 탁월한 글로, 이 또한 읽어볼 가치가 있음.
     * 세 번째 댓글 요약:
          + ""Bog""가 슬라브어로 ""신""을 의미하여, 이를 포함한 표현들이 많이 사용됨.
          + 이로 인해 제목이 재미있게 해석되어, 마치 신 모드에서 벗어나는 것에 대한 글로 착각할 수 있음.
     * 네 번째 댓글 요약:
          + 현재의 자신을 좋아하지 않고, 바꾸거나 자신과 화해할 힘이 없다고 느끼는 것이 문제임.
          + 이러한 상황은 유전적일 수도 있으며, 많은 성취에도 불구하고 만족하지 못하는 아버지를 예로 들음.
     * 다섯 번째 댓글 요약:
          + 실제로 늪에서 벗어나는 방법에 대한 설명이 아니라, 인생 조언에 가까움.
     * 여섯 번째 댓글 요약:
          + 비디오 링크를 공유하며, 자신을 ""개""로 만들고 싶다면 이를 시청할 것을 제안함.
     * 일곱 번째 댓글 요약:
          + 많은 종교가 신이 인간의 일에 개입한다고 가르치지만, 불평에 반응하는 신을 숭배하는 것에 대한 의문을 제기함.
          + 부정한 판사의 비유를 통해 이해한 바를 설명하며, 관련 위키백과 링크를 공유함.
     * 여덟 번째 댓글 요약:
          + 좋은 삶을 살 수 있는 모든 요소를 갖추고 있음에도 불구하고 만족할 수 없다고 믿는 사람들에 대한 논의가 부족함.
          + 이러한 믿음의 이유를 파고들면 결국 같은 결론에 도달할 것이라는 의견을 제시함.
     * 아홉 번째 댓글 요약:
          + 자유 의지가 없다고 받아들이면, 어떤 행동도 할 수 없다는 체념적인 관점을 표현함.
     * 열 번째 댓글 요약:
          + 용감한 행동을 하는 것이 항상 좋은 느낌을 주는 것은 아니며, 때로는 불필요한 불안을 유발함.
          + 고통이 용기 있는 행동을 함으로써만 끝날 것임을 인식할 때, 용기를 낼 수 있음.
"
"https://news.hada.io/topic?id=14163","마리오가 파레토를 만나다: 마리오 카트 빌드의 다목적 최적화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   마리오가 파레토를 만나다: 마리오 카트 빌드의 다목적 최적화

마리오 카트 8 최적의 조합 찾기

     * 마리오 카트 8에서 드라이버, 카트의 바디, 타이어, 글라이더를 선택하는 것은 스타일뿐만 아니라 경주에서 이기기 위한 중요한 요소임.
     * 각 요소마다 수십 가지 옵션이 있으며, 각 옵션은 속도, 가속도 등의 성능에 영향을 미치는 통계치를 가지고 있음.
     * 비슷한 통계치를 가진 스타일적인 선택지를 제외하더라도, 수천 가지의 조합 중 최적의 조합을 찾는 것은 어려운 일임.

파레토 최적화

     * 최고의 속도를 가진 드라이버를 찾는 것은 그들의 속도 통계를 순위대로 나열하는 것만큼 간단함.
     * 그러나 최적의 조합을 찾기 위해서는 속도뿐만 아니라 가속도, 핸들링, 무게, 오프로드, 미니 터보 등 여러 통계치 사이의 균형을 고려해야 함.
     * 어떤 옵션들은 항상 다른 옵션에 의해 지배당하므로, 이러한 옵션들을 제외하고 파레토 프론티어를 형성하는 효율적인 드라이버들을 식별할 수 있음.
     * 파레토 효율성은 최적이 아닌 선택지를 걸러내는 객관적 기준을 제공하지만, 최종 결정을 내리기 위해서는 여전히 사용자의 선호도와 스타일을 고려해야 함.

실제 게임에서의 최적화

     * 실제 게임에서는 드라이버뿐만 아니라 바디, 바퀴, 글라이더 전체 세트를 선택해야 함.
     * 585개의 고유한 속도와 가속도 속성을 가진 조합이 있지만, 파레토 방법을 적용하여 14개의 효율적인 옵션으로 좁힐 수 있음.
     * 미니 터보라는 세 번째 중요한 통계치를 추가하여 파레토 프론티어 개념을 세 차원으로 일반화할 수 있음.
     * 다차원에서의 파레토 프론티어는 차원의 수가 증가함에 따라 크기가 기하급수적으로 확장되어 선택을 더 어렵게 만듦.
     * 최적의 조합을 찾기 위해서는 각 차원에 가중치를 두어야 하며, 상위 플레이어들이 선호하는 조합은 속도, 가속도, 미니 터보를 최적화할 때 프론티어에 위치함.

다목적 최적화 문제

     * 유사한 트레이드오프는 일상생활에서도 자주 마주치는 문제임.
     * 저렴하면서 맛있는 식사, 잘 받으면서 쉽고 만족스러운 직업, 낮은 위험과 높은 수익을 가진 포트폴리오, 유연하면서 강하고 생산하기 쉬운 재료, 공정하면서 효율적인 세금, 고품질이면서 빠르고 비용 효율적인 LLM 등 모든 경우에 다목적 최적화 문제에 직면함.
     * 정확한 가중치를 알고 있다면 단일 목적 최적화 문제로 단순화할 수 있지만, 유틸리티 함수가 불확실하거나 알려지지 않은 상황에서는 파레토 프론티어가 최적이 아닌 옵션을 객관적으로 제거하는 데 도움을 줌.

감사의 말

     * 이 기사에서는 대중이 이해하기 쉽도록 몇 가지 가정을 단순화함.
     * 실제 게임 내 통계치는 기본 통계치와 항상 선형적인 관계가 있는 것은 아니며, 드라이버를 제외한 모든 장비에 대해 4가지 속도 통계와 4가지 핸들링 통계가 있지만, 평균값을 사용하기로 결정함.
     * 유틸리티 함수의 기능 형태도 중요한 역할을 하지만 이를 완전히 숨김.
     * 이 기사의 뒷이야기나 더 많은 정보를 원한다면, 기부를 고려해달라는 요청이 있음.

GN⁺의 의견

     * 파레토 최적화는 다양한 선택지 중 최적의 결정을 내리는 데 있어서 매우 유용한 도구임. 이는 게임뿐만 아니라 실생활의 다양한 의사결정 상황에도 적용될 수 있음.
     * 이 기사는 복잡한 최적화 문제를 쉽게 이해할 수 있도록 마리오 카트라는 친숙한 예시를 사용하여 설명함으로써, 독자들에게 흥미로운 학습 경험을 제공함.
     * 그러나 실제 응용 시에는 각 통계치의 중요성이나 상황에 따라 달라질 수 있는 가중치를 고려해야 하며, 이는 각 사용자의 개인적인 선호도와 경험에 따라 달라질 수 있음.
     * 최적화 문제에서는 단순히 효율적인 옵션을 찾는 것뿐만 아니라, 그 옵션이 실제 상황에서 어떻게 작동하는지 실험하고 경험하는 과정도 중요함.
     * 이 기사는 단순화된 모델을 사용하여 설명했지만, 실제 응용에서는 더 복잡한 모델이나 다양한 변수를 고려해야 할 수도 있음.

        Hacker News 의견

     * 아름다운 프레젠테이션
          + 시각화가 목적을 봉사하는 경우가 좋음. 투프트(Tufte)도 자랑스러워할 것.
     * 웹디자인적 접근
          + 웹디자인적 요소가 강하고 기술적이지 않은 청중에게 적합할 수 있음. 그러나 원본 기사가 노트북 형식으로 더 유용한 정보를 제공한다고 생각함.
     * 마리오 카트의 작은 빨간 타이어
          + 작은 빨간 타이어가 최고라는 것을 항상 알고 있었음. 하지만 스타일과 젤다에 대한 사랑을 중요시하기 때문에 개인적으로 이 정보를 무시할 수밖에 없음.
     * 인상적인 프레젠테이션
          + 파레토 효율성/프론티어에 대해 이미 알고 있었지만, 이제 마리오 카트(그리고 지배당하는 쿠파)를 생각하며 잊지 못할 것임.
     * 디자인 도구로서의 활용 고려
          + 게임 디자인 시 재미있고 실행 가능한 빌드의 큰 파레토 프론티어를 고려하는 것에 대해 흥미로움을 느낌.
     * 할로 카트(2)와의 결합
          + 파레토 프론티어를 계산하는 방법에 대한 생각이 필요함.
     * 유전 알고리즘을 이용한 최적 해결책
          + 선호도와 가중치를 정의하고 유전 알고리즘을 사용하여 최적의 해결책을 찾는 것이 점수 함수를 정의하고 랜덤 API를 사용하는 것보다 생각이 덜 필요함.
     * 중요한 포인트들
          +
              1. 실력이 가장 중요하며, 선택한 카트 등보다 더 중요함. 전문가들이 이상한 빌드로 플레이하는 것을 보면, 불리함에도 불구하고 잘하는 것을 볼 수 있음.
          +
              2. 실제로는 숨겨진 미니 터보 통계의 가치를 알 필요가 없음. 높은 가속이 높은 미니 터보를 의미하기 때문에 대부분의 플레이어에게 가속을 미니 터보의 대리로 사용할 수 있음.
     * 9살 아이와의 마리오 카트 경쟁
          + 9살 아이가 마리오 카트에서 나보다 낫지만, 이 지식이 나에게 차이를 만들어줄 수 있음에 감사함.
     * 전문가들의 맵별 다른 빌드 사용
          + 예를 들어, 직선이 긴 맵에서는 최고 속도를 선호하는 반면, 급한 커브가 많은 맵에서는 가속을 선호하는지에 대한 질문.
"
"https://news.hada.io/topic?id=14110","OpenAI, Sam Altman의 스타트업 펀드 소유권을 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI, Sam Altman의 스타트업 펀드 소유권을 제거

OpenAI의 스타트업 펀드에서 Sam Altman의 소유권 제거

     * OpenAI는 AI 스타트업에 투자하는 벤처 캐피탈 펀드의 거버넌스 구조를 변경함
     * 이에 따라 OpenAI의 CEO인 Sam Altman은 더 이상 해당 펀드를 소유하거나 통제하지 않게 됨
     * 이는 3월 29일 미국 증권거래위원회(SEC)에 제출된 문서에 명시되어 있음
     * 이번 변경은 Altman의 OpenAI Startup Fund 소유권이 특이한 구조로 인해 주목을 받은 후 이루어짐
          + 기업 벤처 부문과 유사하게 마케팅되었지만, 해당 펀드는 Altman이 외부 유한 파트너로부터 조달하고 투자 결정을 내렸음
          + OpenAI는 Altman이 소유권에도 불구하고 펀드에 재정적 이해관계가 없다고 밝힘
     * OpenAI 대변인은 성명에서 펀드의 초기 일반 파트너(GP) 구조는 임시 조치였으며, ""이번 변경은 더 명확성을 제공한다""고 말함

OpenAI Startup Fund의 투자 및 통제권 이양

     * OpenAI Startup Fund는 Microsoft와 같은 OpenAI 파트너로부터 1억 7,500만 달러를 투자하고 있음
     * OpenAI 자체는 투자자가 아님
     * 펀드의 통제권은 2021년부터 펀드의 파트너였던 Ian Hathaway에게 이양됨
     * Altman은 더 이상 펀드의 일반 파트너가 아님
     * OpenAI는 Hathaway가 펀드의 액셀러레이터 프로그램을 감독하고 Harvey, Cursor, Ambience Healthcare와 같은 회사에 대한 투자를 주도해 왔다고 밝힘

Altman의 외부 투자 활동에 대한 논란

     * 스타트업 액셀러레이터 Y Combinator의 전 대표였던 Altman은 OpenAI 외부의 광범위한 투자 이해관계로 인해 논란이 되어왔음
          + 암호화폐 스타트업 Worldcoin부터 핵융합 회사 Helion Energy, 중동에서의 자금 조달 활동 등
     * OpenAI는 지난 11월 Altman의 극적인 퇴출 이후 독립적인 조사 결과, 제품 안전성이나 OpenAI의 재정 측면에서 Altman이 잘못한 것이 없다고 결론 내렸다고 밝힘

GN⁺의 의견

     * 이번 조치는 Altman의 투자 활동에 대한 우려를 어느 정도 해소할 수 있을 것으로 보임. 하지만 그의 광범위한 이해관계와 영향력은 여전히 논란의 여지가 있음
     * 벤처 캐피탈 펀드의 통제권 이양이 실질적인 변화로 이어질지, 아니면 형식적인 조치에 그칠지 지켜볼 필요가 있음
     * AI 스타트업 투자에 있어 OpenAI의 역할과 전략이 어떻게 변화할지도 주목할 만한 부분임

        Hacker News 의견

     * 벤처 펀드 설립에 관여한 경험이 있는 비법률가의 설명:
          + 펀드는 법인이 아니라 두 사람의 파트너십임.
          + 한정 파트너십에서 한 사람은 모든 일을 하고 관련 책임을 지는 총괄 파트너이고, 나머지는 자본을 투자하는 한정 파트너임.
          + 은행과 세무 당국은 실제로 형성된 파트너십에만 계좌를 개설함.
          + 펀드를 형성하고 계좌를 개설하기 위해 임시 초기 한정 파트너가 필요함.
          + 실제 투자자가 파트너십 계약에 서명하고 자금을 투자할 때 초기 한정 파트너는 철수함.
          + ""초기 총괄 파트너""는 본 적이 없으며, 그 필요성에 대한 이론을 듣고 싶어함.
     * OpenAI와 관련된 추가 이야기 링크 제공.
     * OpenAI가 알트만이 펀드에 재정적 이해관계가 없다고 말했음에도 불구하고 소유권이 있다는 것에 대한 설명 요청.
     * 펀드가 OpenAI 회사에 의해 소유되었는지 아니면 비영리 단체에 의해 소유되었는지, 별도의 실체로 운영되는지에 대한 질문.
     * LP와 GP의 차이를 이해하지 못하는 사람들이 많기 때문에 이러한 혼란이 발생하는 것으로 보임.
     * 일론 머스크의 소송과 관련하여, 이러한 상황이 소송에 어떤 영향을 미칠지에 대한 궁금증.
          + 샘 알트만이 실제로 권한이 없었기 때문에 그와 일론이 합의한 것이 회사에 구속력이 없었는지에 대한 의문 제기.
     * 이와 관련 없는 다른 뉴스 링크 제공.
     * 이 소식이 만우절 농담이었다면 좋았을 것이라는 의견.
     * 법률가가 아닌 사람이 OpenAI가 샘 알트만을 제거하려는 또 다른 시도인지에 대한 의미를 묻는 질문.
     * 샘 알트만이 어떻게 그런 거래를 했는지에 대한 놀라움과 그가 이제 비영리 단체에 OpenAI 상표를 임대해야 한다는 제안.
          + 샘 알트만의 자본주의적 기술을 칭찬하며 그로부터 배울 점이 있다고 언급함.
"
"https://news.hada.io/topic?id=14159","그레이트 테이블스의 디자인 철학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           그레이트 테이블스의 디자인 철학

테이블의 진정한 의미는 무엇인가?

     * 테이블이란 데이터를 열과 행으로 표현하고 주로 텍스트로 구성된 데이터임.
     * 간단한 테이블 예시를 통해 개인의 특성을 열과 행으로 배열한 것을 확인할 수 있음.
     * 열의 순서와 레이블이 중요하며, 가독성을 높이기 위한 시각적 요소로 수평선을 사용하기도 함.

테이블의 초기 역사

     * 테이블은 사각형 그리드에서 발전했으며, 인류 역사상 가장 초기의 그리드는 프랑스의 동굴 벽화에서 찾아볼 수 있음.
     * 고대 그리스와 로마 시대에는 천문학적 및 지리적 위치를 나타내기 위해 그리드 시스템을 사용함.
     * 농업이 확산되면서 경제 거래를 기록하고 관리할 필요성이 생겼고, 메소포타미아의 우루크에서 발견된 점토판에는 초기의 정교한 테이블이 새겨져 있음.

중세의 현대적 테이블

     * 20세기 중반은 테이블 디자인에 있어 최고의 시기로, 정밀한 조판 기술과 타이프라이터, 오프셋 인쇄기 등의 기술이 결합되어 아름다운 테이블이 제작됨.
     * 미국 인구조사국의 '테이블 제작 매뉴얼'은 정보가 풍부한 테이블의 이상적인 디자인에 대해 상세히 설명하고 있으며, 그 원칙들은 오늘날에도 여전히 유효함.

테이블의 후기 역사

     * 1970년대와 1980년대에 컴퓨팅 기술이 접근하기 쉬워지면서 전자 및 인쇄 형태의 테이블 생성이 가능해짐.
     * VisiCalc과 같은 스프레드시트 소프트웨어의 등장으로 컴퓨팅 테이블의 대중화가 시작됨.
     * 시간이 지나면서 스프레드시트 내 테이블은 더욱 눈에 쉽게 들어오는 형태로 발전했으나, 여전히 인구조사국의 매뉴얼에 나온 테이블에는 미치지 못함.

Great Tables가 취하는 테이블 접근 방식

     * Great Tables는 코딩 인터페이스의 힘을 통해 중세의 우아함을 복원함.
     * 테이블을 여섯 가지 독립적인 구성 요소의 조합으로 표현하며, 이를 통해 테이블을 구조화하고 값의 형식을 지정하며 스타일을 적용할 수 있음.
     * Great Tables는 테이블의 표시에 중점을 두고 있으며, 출판 및 발표를 위한 테이블 디스플레이에 초점을 맞춤.

결론

     * 테이블은 오랜 역사를 거치며 발전해왔으며, Great Tables 패키지는 요약 테이블 생성에 유용함.
     * 지속적인 연구와 커뮤니티의 피드백을 통해 API를 개선하고 있으며, 테이블의 질을 높이는 것을 목표로 함.

GN⁺의 의견

     * Great Tables는 데이터 시각화의 중요한 측면인 테이블 생성을 위한 혁신적인 도구를 제공함으로써 데이터 과학자와 분석가들에게 큰 도움이 될 것임.
     * 이 기술은 데이터의 가독성과 정보 전달의 효율성을 높이는 데 기여할 수 있으며, 이는 학술 연구나 비즈니스 보고서 작성에 특히 중요함.
     * 그러나 사용자가 Python과 같은 프로그래밍 언어에 익숙하지 않다면, Great Tables의 사용이 어려울 수 있으므로 사용자 친화적인 인터페이스 개발이 필요할 수 있음.
     * 비슷한 기능을 제공하는 다른 도구로는 Microsoft Excel, Google Sheets, Tableau 등이 있으나, Great Tables는 프로그래밍을 통한 더 세밀한 커스터마이징을 가능하게 함.
     * 기술 도입 시 데이터 보안과 개인정보 보호를 고려해야 하며, 오픈소스 소프트웨어의 경우 커뮤니티 지원과 지속적인 업데이트가 중요한 요소임.

        Hacker News 의견

     * Great Tables에 대한 평가
          + Great Tables는 파이썬/주피터 테이블 작업에 있어 훌륭한 성과를 보임. 그들이 만들어가는 것은 그래픽의 문법과 유사한 ""테이블의 문법"" 같음.
          + 다른 주피터 테이블 라이브러리인 buckaroo를 개발한 개인은, 대화형으로 다양한 형식과 후처리 기능을 순환하며 테이블에서 중요한 통찰을 빠르게 얻을 수 있도록 하는 것을 목표로 함.
          + Great Tables는 수동으로 테이블을 포맷팅하여 프레젠테이션에 사용할 수 있도록 설계됨.
     * Great Table의 디자인에 대한 비평
          + Great Table의 예시는 너무 복잡함. 제목의 상단과 하단 가로선이 불필요하고, 첫 번째 열과 정렬된 것이 아닌 두 번째 열과 정렬되어야 한다고 생각함.
          + 행 라벨 배경이 너무 어둡고 글꼴이 읽기 어려움. 이탤릭체로 된 행 그룹 라벨(""Name"")도 마음에 들지 않음.
          + 중앙에 떠 있는 스패너 라벨이 테이블을 스캔하기 어렵게 만듦. 왼쪽 정렬이 더 나을 것 같음.
          + 폰트도 마음에 들지 않으며, 변경을 가한 테이블은 더 읽기 쉬움.
     * 패키지에 대한 호평
          + 몇 년 동안 R에서 사용해온 패키지를 좋아함. HTML에서 테이블을 만드는 데는 훌륭하지만 PDF와 DOCX 출력은 다소 덜 정교함.
          + 파이썬 버전을 R 버전과 동등하게 만들려는 최근의 변화가 R 개발을 늦추는 것 같아 걱정되지만, 사용 언어에 상관없이 확인해볼 가치가 있음.
     * 패키지에 대한 감탄
          + 이 패키지는 놀라움을 자아냄. 데이터 테이블 프레젠테이션의 질이 점점 떨어지는 것을 보며 어떻게 이렇게 오랫동안 갔는지 의문이 듦.
          + 데이터 분석에 다시 뛰어들고 싶은 흥미를 불러일으킴. API 개선과 확장 가능성도 보임.
     * 관련 서적 및 AI 모델
          + 수학적 테이블의 역사에 대한 책이 있음.
          + AI 모델이 스프레드시트에서 ""좋은 테이블""을 필요로 함. 예를 들어, 컬럼 이름, 헤더 등이 AI 모델이 맥락을 이해하는 데 중요함.
     * Great Tables 공동 유지 관리자의 의견
          + Rich Iannone와 함께 Great Tables의 공동 유지 관리자 중 한 명임.
          + Rich는 자신의 패키지 철학을 설명해달라는 요청에 테이블 디스플레이에 대한 5천 년 역사를 제공하는 유일한 소프트웨어 개발자임.
     * ""nanoplots""에 대한 질문
          + ""nanoplots""는 본질적으로 스파크라인과 같지 않은가?
     * 테이블의 활용도에 대한 의견
          + 테이블은 비교를 할 때 간결하고 설명력이 있음에도 불구하고 충분히 활용되지 않음. 대부분의 텍스트 편집기는 좋은 디자인 선택으로 미리 구성된 테이블을 삽입하는 대신 빈 테이블로 시작함.
     * DocBook 테이블과 LaTeX에 대한 언급
          + DocBook 테이블에는 여러 유형이 있으며, 사용한 유형은 GT의 구조를 일부 가지고 있음.
          + 또한 LaTeX에 대한 언급이 있으며, 여기서는 ""일반"" 테이블과 한 페이지를 넘어가는 긴 테이블이 있음.
     * 미드센추리 모던 테이블에 대한 관심
          + 미드센추리 모던 테이블은 많은 수직선을 가지고 있어 관심이 있음. LaTeX에 대한 서브레딧에서는 수직선 하나라도 사용하는 것이 용납할 수 없는 실수로 여겨지는 경향이 있음.
"
"https://news.hada.io/topic?id=14152","독일 주정부, 3만 대 PC를 LibreOffice로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    독일 주정부, 3만 대 PC를 LibreOffice로 전환

     * 독일 북부의 연방주인 슐레스비히-홀슈타인이 성공적인 시범 프로젝트 이후, 지방 정부에서 사용하는 30,000대의 PC를 마이크로소프트 윈도우와 마이크로소프트 오피스에서 리눅스와 LibreOffice(그리고 다른 자유롭고 오픈소스 소프트웨어)로 전환하기로 결정함
     * 주 총리의 홈페이지에 따르면, 슐레스비히-홀슈타인은 디지털 주권 IT 작업 환경을 도입하는 첫 독일 주가 되어 디지털 선구 지역이 될 것이며, LibreOffice를 표준 오피스 솔루션으로 도입하는 내각 결정으로 디지털 주권을 향한 첫 걸음을 내딛었음
     * 디지털 주권이라는 용어는 여기서 매우 중요함. 공공 행정이 연구하거나 수정할 수 없는 독점적이고 폐쇄적인 소프트웨어를 사용하는 경우, 사용자 데이터가 어떻게 처리되는지 알기 어려움
     * 유럽 데이터 보호 감독관(EDPS)의 발견에 따르면, 유럽위원회의 마이크로소프트 365 사용이 데이터 보호법을 위반함
     * 또한, 지방 정부가 단일 벤더의 독점적이고 폐쇄적인 소프트웨어를 구매하기 위해 납세자의 돈을 사용해야 하는 이유는 무엇인가에 대한 질문이 있음. LibreOffice와 자유 소프트웨어를 사용하면, 행정 기관은 소프트웨어와 지원을 얻을 수 있는 선택의 폭이 훨씬 넓어지며, 지역 개발자에게 개선을 위한 자금을 제공할 수 있음
     * 또한, 지방 정부는 소프트웨어를 완전히 통제하고, 소스 코드를 연구하며, 필요한 변경을 할 수 있고, 자체 인프라에 완전히 배포할 수 있음. ""Public Money, Public Code""에 대해 더 알아볼 수 있음
     * 슐레스비히-홀슈타인 주의 IT 행정을 자유롭고 오픈소스 소프트웨어로 전환하기로 한 결정을 환영하며, 이는 지방 정부와 주민 거의 300만 명에게 가져다주는 혜택 때문임.

GN⁺의 의견

     * 이러한 전환은 공공 기관의 독립성과 데이터 보안을 강화하는 데 중요한 단계임. 독점 소프트웨어에 대한 의존도를 줄이고, 소프트웨어의 투명성과 수정 가능성을 통해 데이터 주권을 확립하는 것은 현대 사회에서 점점 더 중요해지고 있음.
     * 오픈소스 소프트웨어의 도입은 비용 절감과 지역 경제 활성화에도 기여할 수 있음. 지역 개발자와 기업이 참여할 수 있는 기회가 확대되고, 공공 부문의 IT 인프라가 강화될 수 있음.
     * 그러나 오픈소스 소프트웨어로의 전환은 직원 교육, 기존 데이터와의 호환성, 그리고 지속적인 지원과 유지보수를 필요로 함. 이러한 변화를 관리하는 과정에서 발생할 수 있는 잠재적인 문제점과 비용을 고려해야 함.
     * 이러한 결정은 다른 지방 정부나 국가에도 영향을 미칠 수 있으며, 오픈소스 소프트웨어의 채택을 촉진하는 선례가 될 수 있음. 이는 장기적으로 소프트웨어 산업의 경쟁 구조에도 변화를 가져올 수 있음.
     * 오픈소스 소프트웨어의 채택은 사용자 커뮤니티와의 협력을 강화하고, 사용자가 직접 소프트웨어 개선에 참여할 수 있는 기회를 제공함으로써, 소프트웨어 개발의 민주화를 촉진할 수 있음.

   한 10년전쯤 open office 를 썼다가 도저히 ms-office 문서들과 호환이 안되어서 포기했던 경험이 있었고,
   최근 다시 libre office 를 쓰면서 예전보다는 많이 좋아졌다고 느끼고 있습니다.
   단지 libre office 의 개선 뿐 아니라, 문서 생태계가 많은부분 클라우드로 옮겨가면서 어느정도 규격에 대한 지원이 좋아진 것 같다고 느껴져요

   오래전에 LibreOffice or OpenOffice로 갔다가 다시 윈도우로 돌아온다는 뉴스를 본 것 같은데, 다시 LibreOffice로 가는군요. 직원들을 웬지 싫어할 것 같네요.

   독일 (또는 유럽)에서 LibreOffice 개발에 어느정도나 기여하고 있는지 모르겠네요?

   애초에 LibreOffice 및 ODF 포맷 개발 주도하고 관리하는 The Document Foundation 자체가 독일에 있어서, 독일 혹은 유럽에서 주도를 하고 있다고 봐도 되지 않을까 싶네요. https://www.documentfoundation.org/

        Hacker News 의견

     * 독일 정부가 클라우드에 의존하지 않는 제품에 대한 정책을 오랫동안 고민해왔으며, 이것이 대규모로 실제로 시행되기 시작하는 것인지, 아니면 지역 전반에 걸쳐 지연 시도가 계속 성공할 것인지 궁금함.

     독일 연방이 MS Office 형식에서 ODF로 실제로 전환하기 시작한다면, 이는 흥미로운 변화를 가져올 수 있음. 그러나 과거에 변화를 원하지 않는 사람들의 로비와 관성으로 인해 제품이 시작되었다가 방해받거나 지연된 사례가 있었기 때문에 이번 변화가 추세를 설정하지 못할 수도 있음.
     * 독일 정부는 Nextcloud, Jitsi, Collabora 등을 포함한 완전히 자유롭고 오픈소스인 솔루션을 개발했으며, Kubernetes를 사용하여 배포할 수 있음.

     독일 정부가 개발한 오픈소스 솔루션에 대한 링크 제공.
     * 네덜란드에서 새로운 직장을 시작한 한 사용자의 아내가 Ubuntu와 LibreOffice를 사용하는 것에 대해 매우 흥분함. 기술 직종이 아니었지만, Raspberry Pi를 사용한 경험이 면접에서 도움이 되었음.

     미국에서는 이례적인 사례일 수 있지만, 네덜란드에서는 일반적인지 궁금함.
     * 지방 정부가 세금을 사용하여 단일 벤더의 독점적이고 폐쇄적인 소프트웨어를 구매하는 이유는 무엇인가에 대한 의문 제기.

     비전통적인 도구를 사용하는 것이 중요한 문서의 형식이 올바르게 설정되지 않거나 소프트웨어가 독점적인 대안과 다르게 작동할 때 세금 납부자에게 더 많은 비용을 초래할 수 있음. 서버에서 성공한 리눅스는 대기업의 지원을 받았지만, 데스크톱에서는 그렇지 않았기 때문에 성공하지 못함.
     * 2004년 뮌헨에서 잘 작동하지 않았던 경험을 공유하며, 당시의 교훈이 기억되기를 희망함.

     뮌헨의 리눅스 실패 사례에 대한 링크 제공.
     * LibreOffice는 독일어에는 유용할 수 있지만, 아시아 언어에는 그렇지 않음. 아시아 언어의 타이포그래피 규칙을 고려하지 않고 설계되었기 때문임.

     TDF가 아시아 언어에 ""전념""한다고 말할 수 있지만, 문자를 단순히 표시하는 것이 아니라 타이포그래피 규칙에 따라 사용할 수 있어야 함을 이해하지 못함. 사용자 인터페이스가 2000년대에 머물러 있으며, 리본 UI가 17년 동안 존재해왔고 세대가 변했음에도 불구하고 이를 인정하지 않음.
     * 소프트웨어 엔지니어처럼 오픈소스에서 무료로 일하는 다른 전문 분야가 있는지에 대한 진지한 질문.

     소프트웨어 엔지니어가 오픈소스에서 무료로 일하는 것이 특이한 점에 대한 의문 제기.
     * 세금을 EU 법을 준수하지 않는 기업에게 덜 지불하는 것에 대한 긍정적인 반응.

     문서 협업에 대한 해결책이 있는지, 아니면 Nextcloud와 같은 것을 사용하여 ODT를 출력하고 LibreOffice를 사용하여 로컬에서만 작업하는 것인지 궁금함.
     * 독일의 한 대학에서 거의 모든 도서관 컴퓨터에 Ubuntu와 LibreOffice가 설치되어 있었고, Windows 기계는 하루 2시간만 사용할 수 있었기 때문에 리눅스를 배우기 시작했음.

     몇 년 후 현재 직장에서 리눅스 관리자로 절반의 시간을 보냄.
     * 뮌헨의 지방 행정에 대한 배경을 이해하기 위해, OpenOffice로의 전환을 지원하지 않는 모든 사용 사례로 인해 실패했으며, Microsoft가 기회를 이용하여 변화를 되돌리기 위해 ""설득""을 사용한 것으로 보임.

     유럽 전체가 오픈소스를 쉽게 배포할 수 있는 방법은 미국으로의 중요 사용자 데이터 전송을 금지하는 것임. Microsoft Windows는 기술적으로 거대한 NSA 백도어이므로, 정부 PC에 설치하는 것은 반역으로 간주되어야 함. 따라서 정치인들을 반역죄로 재판에 회부하면 얼마나 빨리 MS가 유럽에서 퇴출되는지 볼 수 있음.
"
"https://news.hada.io/topic?id=14212","동일한 비용으로 리포트 요청 10배 처리하기: 적절한 공수로 Throughput 을 많이 끌어올릴 방법은 없을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    동일한 비용으로 리포트 요청 10배 처리하기: 적절한 공수로 Throughput 을 많이 끌어올릴 방법은 없을까?

   기능 릴리즈 이후 5배로 증가한 비용을 적절한 엔지니어링을 통해 기존의 0.8배까지로 낮추기 위한 방법들을 기록한 글

   nodejs의 태생이 그렇든 IO바운드 애플리케이션은 nodejs로 개발하면 고민할게 많이 줄죠..
"
"https://news.hada.io/topic?id=14108","비가 올 때만 작동하는 Wi-Fi","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           비가 올 때만 작동하는 Wi-Fi

Wi-Fi는 비가 올 때만 작동함

     * 이 글은 4월 1일에 발행된 진지한 에세이를 다루는 ""April Cools Club""의 일부로, 예상치 못한 주제에 대한 글을 게시하는 노력의 일환임.
     * 저자의 아버지는 ""Wi-Fi가 비가 올 때만 작동한다""고 말함.
     * 저자는 대학생이었고, 가을 학기가 시작하기 전에 부모님 집에서 몇 주를 보내기 위해 집으로 돌아옴.

부정

     * 저자는 노트북을 열고 네트워크를 확인함.
     * 웹사이트에 핑을 보내면 98% 패킷 손실률을 보임.
     * 모바일 데이터가 비싸서 저자는 데이터 플랜을 사용하지 않았음.

타협

     * 비가 시작된 지 5분 만에 패킷 손실률이 0%로 떨어짐.
     * 비가 그치고 15분 후에 패킷 손실률이 다시 90% 이상으로 치솟음.

결심

     * 저자의 아버지는 회사를 통해 복잡한 네트워크 시스템을 설계하고 배치함.
     * 아버지의 사무실과 저자의 아파트 사이에 고성능 지향성 Wi-Fi 안테나를 이용한 Wi-Fi 브리지를 설치함.
     * 저자는 네트워크 문제를 해결하기 위해 결심함.

디버깅

     * 저자는 네트워크 장비를 개별적으로 확인함.
     * 하드웨어 디버깅은 물리적으로 많은 작업을 필요로 함.

깨달음

     * 저자는 변화된 동네를 둘러보며 Wi-Fi 브리지의 문제를 깨달음.

문제와 해결책

     * 이웃의 나무가 자라면서 Wi-Fi 신호를 방해하기 시작함.
     * 비가 오면 나무의 가지가 무거워져 Wi-Fi 신호선에서 벗어남.
     * 저자는 802.11g 장비를 802.11n으로 교체하여 해결함.

GN⁺의 의견

     * 이 이야기는 일상 속에서 발생할 수 있는 기술적 문제와 그 해결 과정을 재미있게 풀어낸 사례로, 기술적 배경지식이 없는 사람들에게도 흥미로운 내용을 제공함.
     * Wi-Fi 신호 간섭 문제는 실제로 많은 가정과 사무실에서 발생할 수 있으며, 이러한 문제를 해결하기 위해 기본적인 네트워크 지식과 문제 해결 능력이 필요함.
     * 이 기사는 실제로 Wi-Fi 신호가 물리적 장애물에 의해 어떻게 영향을 받는지를 보여주며, 이를 통해 무선 네트워크 설계 시 고려해야 할 사항들을 이해하는 데 도움을 줌.
     * 비슷한 기능을 제공하는 다른 제품이나 프로젝트로는 Wi-Fi 신호 강화기나 메시 네트워크 시스템 등이 있으며, 이러한 솔루션들은 신호 간섭 문제를 해결하는 데 도움을 줄 수 있음.
     * 기술을 도입할 때는 환경 변화를 고려하고, 기존 장비의 호환성 및 업그레이드 가능성을 검토해야 하며, 새로운 기술을 선택함으로써 얻을 수 있는 이점과 잠재적인 단점을 평가해야 함.

        Hacker News 의견

     * ""500마일 이메일""과 ""마법/더 많은 마법 스위치"" 이야기를 링크하며, 물리적 현실이 우리가 컴퓨터에 대해 구축한 추상적 모델과 만날 때의 재미를 언급함.

     500마일 이메일과 마법 스토리는 물리적 현실과 추상적 컴퓨터 모델이 만나는 재미난 사례임.
     * 인터넷 속도 업그레이드 후 노트북이 100Mbit 속도에 도달하지 못했던 경험을 공유. 문제는 와이파이 접속이었으며, 저품질 이더넷 케이블 교체로 해결됨.

     50Mbit에서 100Mbit로 인터넷 속도를 업그레이드한 후 노트북이 속도에 도달하지 못하는 문제가 있었음. 와이파이 대신 유선 연결로 문제를 해결하고, 저품질 CAT7 케이블을 교체하여 속도 문제를 해결함.
     * 호주 모바일 통신사에서 겪은 마이크로웨이브 링크 문제를 공유. 크레인 작업으로 인해 특정 시간에만 연결이 끊기는 현상이 발생함.

     호주의 모바일 통신사에서 겪은 마이크로웨이브 링크 문제로, 크레인이 작동하는 시간에만 연결이 끊기는 현상이 있었음.
     * 가족 구성원을 위해 설치한 와이파이 링크가 금속화된 창문으로 인해 방해받았던 경험을 공유함.

     가족 구성원을 위해 설치한 와이파이 링크가 금속화된 창문으로 인해 신호가 약해지는 문제가 발생했으며, 이를 해결하기 위해 외부에 장치를 설치함.
     * Fleetwood Mac의 노래를 패러디한 코드를 통해 와이파이 문제를 표현함.

     Wi-Fi 문제를 Fleetwood Mac의 노래 가사를 패러디한 코드로 재치 있게 표현함.
     * 앉아 있을 때는 로그인 가능하지만 서 있을 때는 로그인 불가능한 문제에 대한 이야기를 공유함.

     앉아 있을 때와 서 있을 때의 로그인 문제에 대한 경험담을 공유하며, 관련 사례를 찾아봄.
     * 비가 와서 와이파이에 문제가 생겼을 때, 안테나가 가려지지 않았는지 먼저 확인해야 한다는 의견을 제시함.

     비로 인한 와이파이 문제 발생 시, 안테나의 가시선을 확인하는 것이 중요함을 강조함.
     * 프레넬 존에 대한 설명과 와이파이 장비가 완벽하지 않은 프레넬 존에서도 작동할 수 있는 기술을 사용한다는 정보를 공유함.

     프레넬 존이 안테나 간의 신호 품질에 영향을 미칠 수 있으며, 와이파이 장비는 오류 정정 코드와 같은 기술을 사용하여 완벽하지 않은 프레넬 존에서도 작동할 수 있음을 설명함.
"
"https://news.hada.io/topic?id=14084","오픈 소스 프로젝트 내 상호작용의 축소판인 xz 백도어 이슈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   오픈 소스 프로젝트 내 상호작용의 축소판인 xz 백도어 이슈

     * xz/liblzma 취약점에 대한 많은 분석이 있겠지만, 대부분 공격의 첫 단계를 건너뛰는 경향이 있음
          + 원래 유지보수자가 탈진하고, 공격자만이 도움을 제안함(따라서 공격자는 원래 유지보수자가 쌓아온 신뢰를 물려받음).
     * 이메일 스레드 아카이브에서 이 단계 0이 일어나던 시점의 상황을 포착

유지보수자의 탈진과 공격자의 등장

     * 유지보수자에게 합리적으로 보이는 요청이 제기됨
          +

     ""XZ for Java가 아직 유지보수 되구 있나요? 일주일전에 질문을 올렸는데 답변이 없네요""
     * 이 질문은 유지보수자에게 ""실패""를 인정하게 만듦
          + 실제로는 유지보수자는 아무것도 빚진거 없고 실패하지 않았지만, 그렇게 느낌
          + ""커뮤니티""를 실망시키는 것은 끔찍한 일이기 때문
     * 유지보수자는 자신이 ""뒤처져 있다""고 인정하며 도움을 요청하는 듯한 신호를 보냄
     * 그러나 그 스레드에서는 도움이 오지 않았고, 대신 xz/liblzma 공격자가 자신에게 도움을 줬다고 소개함
          +

     Jia Tan(이번 공격자)이 저를 도와줬고... 앞으로 더 큰 역할을 할 수도 있습니다... 제 자원이 너무 제한적이어서 장기적으로 뭔가 바뀌어야 한다는 게 분명합니다.
     * 유지보수자는 자신의 자원이 한정되어 있어 장기적으로 무언가 변화가 필요하다고 언급함

비협조적인 소비자의 등장

     * 비협조적인 소비자가 유지보수자에게 비판적인 발언을 함
          +

     ""새로운 유지 보수자가 있을 때까지는 진전이 없겠네요. ... 현재 관리자는 관심을 잃었거나 더 이상 유지 관리에 신경을 쓰지 않습니다. 이런 리포지토리를 보는 것은 슬픈 일입니다.""
     * 유지보수자는 자신이 관심을 잃지 않았지만, 정신 건강 문제 등으로 인해 관리 능력이 제한되었다고 방어함
     * 유지보수자는 또한 이것이 무급 취미 프로젝트라는 점을 상기시킴

요구사항의 증가

     * 한 주 후, 비협조적인 소비자가 다시 나타나 유지보수자를 비난함.
          +

     ""당신은 이 메일링 리스트에서 조금씩 썩어가고 있는 수많은 패치를 무시하고 있어요.""
          +

     ""정신 건강 문제에 대해서는 유감이지만 자신의 한계를 인식하는 것이 중요해요. 이 프로젝트가 모든 기여자를 위한 취미 프로젝트라는 것은 알지만 커뮤니티는 더 많은 것을 원합니다.""
     * 그 요청자가 제안을 하기도 하지만, 실제로 도움을 주겠다는 제안은 없음
          +

     ""XZ for C에 대한 유지 관리 권한을 넘겨서 XZ for Java에 더 집중할 수 있도록 하는 것은 어떨까요? 아니면 XZ for Java를 다른 사람에게 넘겨서 XZ for C에 집중할 수 있도록 하면 어떨까요? 둘 다 유지하려고 하면 둘 다 잘 유지되지 않을 수 있습니다.""
     * 유지보수자는 새로운 공동 유지보수자를 찾거나 프로젝트를 완전히 넘기는 것이 쉽지 않다고 설명함

오픈 소스 프로젝트의 현실

     * 소프트웨어 개발자는 마음대로 끼웠다 뺐다 할 수 있는 톱니바퀴가 아님
     * 이메일 스레드는 불만을 토로하는 소비자가 계속 요구를 하면서도 아무런 도움을 제공하지 않는 것으로 끝나고, 공격자만 남게 됨
          +

     ""Jia Tan은 앞으로 프로젝트에서 더 큰 역할을 맡게 될지도 모릅니다. 그는 목록 밖에서 많은 도움을 주고 있으며 사실상 이미 공동 관리자입니다. :-)""
     * 이 이메일 스레드는 오픈 소스 프로젝트에서의 상호작용을 축소판으로 보여줌
     * 소비자들은 유지보수자에게 요구사항을 제시하며, 유지보수자는 스트레스와 탈진으로 다양하게 반응함
     * 이러한 방식은 변화가 필요함

        Hacker News 의견

     * 개발자가 사용자에게 친절하려고 노력하고 댓글 작성자의 좋은 의도를 보려고 할 때 많은 정신적 에너지를 낭비하는 것 같다는 의견이 있음. 이러한 의견은 주로 재미로 진행하는 사이드 프로젝트(에뮬레이터, 게임 리메이크 등)에서 나옴. 이러한 프로젝트는 기부금 문제나 저작권 문제를 피하기 위해 기부금 언급을 피함. 프로젝트에 대한 관심은 많지만 실제 기여할 수 있는 숙련된 관심은 극히 제한적임. 사용자들의 대화가 허용되고 격려되지만, 때로는 개발자들의 동기를 저하시키는 '제안'이나 '요구'로 인식될 수 있음. 커뮤니티를 유지하는 것이 중요하지만, 직접 기여하지 않는 사람들을 배제하지 않는 것에 대한 우려도 있음.
     * 오픈소스 프로젝트 개발자가 공격자에게 저장소 제어권을 더 많이 넘기도록 압박받는 사회공학 공격이 문제의 첫 단계였음.
     * 보안 지향적인 오픈소스 라이브러리의 유지보수자로서, PR을 읽을 때마다 ""이 사람이 도움을 주려는 건지, 이용하려는 건지""에 대한 의심이 무겁게 다가옴. 개발 속도를 늦추는 것이 유일한 해결책이라고 생각하지만, 그로 인해 느껴지는 감정은 기사에 나온 것과 같음. 신뢰할 수 있는 전문가 커뮤니티에 도움을 요청할 수 있는 간단한 방법이 있다면 언제든지 환영할 것임.
     * 암호화폐, AI, 그리고 이번 사건과 같이, 가장 큰 문제는 신뢰 문제로 귀결됨. 암호화폐는 신뢰 문제를 코드로 해결하려고 시도하고, LLM은 신뢰를 얻기 위해 화려함으로 속이려 하며, 공격자는 신뢰를 세탁하는 데 일부 성공함. 가장 중요한 기술자들이 신뢰에 대해 제대로 생각하지 못하고 있음. 이 경우, 지친 무급 오픈소스 개발자에 대한 이해가 있음.
     * 포트 노킹이 설정된 SSH 서버가 이 백도어로부터 안전할지에 대한 질문이 있음. RCE가 SSH 서버에 연결한 후에만 수행될 수 있으므로, 합리적인 TCP/UDP 노킹 시퀀스 뒤에 포트가 숨겨져 있다면 문제가 발생하지 않을 것 같음. 포트 노킹은 적절한 SSH 구성을 대체하지 않지만, SSH 취약점이 나타날 때 예방하거나 대응 시간을 벌어주는 추가적인 방어층으로 유용함.
     * OpenSSH의 리눅스 특정 패치와 관련된 문제에 대한 링크가 있음. 이 패치가 없었다면 문제가 발생하지 않았을 것임. 이는 OpenSSH의 문제가 아니라 리눅스의 문제임.
     * 사람들이 여전히 left-pad 사건 이후에도 하드 의존성과 복잡성을 소홀히 다루고 있다는 의견이 있음. OpenSSH는 코드의 거대한 벽임. 복잡한 시스템은 어떤 언어로 작성되었든 간에 본질적으로 신뢰하기 어려움.
     * 중국 해커가 악의적인 행동을 하려고 한다면, 왜 중국 이름/핸들러를 사용할까? 오픈소스 유지보수자들로부터 더 많은 신뢰를 얻기 위해 영어/유럽 이름을 사용하는 것이 더 나을 것임. 반면, 비중국 해커가 악의적인 행동을 하려고 한다면, 중국 이름을 사용하는 것이 더 의미가 있음(중국은 악, 등등).
     * Jigar Kumar 계정은 사회공학 공격의 일부로 보이며 매우 의심스러워야 함.
     * 소프트웨어 개발자는 교체 가능한 부품이 아니며, 커뮤니티에서 댓글을 달거나 참여할 수 있는 권한을 제한하는 것에 대해 생각하고 있음. 예를 들어, GitHub이 '게이트'를 도입한다면, 첫 번째 게이트는 테스트 스위트에 버전 번호와 테스트 출력의 해시를 생성하는 테스트를 추가하는 것일 수 있음. 이 번호를 프로필에 추가하면 GitHub은 사용자가 적어도 make test를 다운로드하고 실행했다고 신뢰할 수 있음. 이는 어느 정도의 헌신을 보여줌.
"
"https://news.hada.io/topic?id=14109","무료 오픈 소스 AI 이미지 업스케일러 'Upscayl'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    무료 오픈 소스 AI 이미지 업스케일러 'Upscayl'

     * v2.9.9 출시! 🥳
          + Upscayl은 고급 AI 알고리즘을 사용하여 저해상도 이미지를 확대하고 향상시키는 무료 오픈소스 AI 이미지 업스케일러임.
          + Linux 사용자를 우선하는 철학으로 만들어진 크로스 플랫폼 애플리케이션으로, 모든 주요 데스크톱 운영 체제에서 사용 가능함.
          + Vulkan 호환 GPU가 필요하며, 많은 CPU와 iGPU는 작동하지 않지만 시도해 볼 수 있음.
     * 👨‍💻 설치
          + 🐧 Linux
               o 대부분의 Linux 운영 체제 소프트웨어 목록에서 Upscayl을 찾을 수 있음.
               o Flatpak 또는 Snap 버전을 지원하는 Store 앱을 사용할 수도 있음.
          + 💼 휴대용 방법
               o 릴리스 섹션으로 이동하여 upscayl-x.x.x-linux.AppImage 파일을 다운로드하고 실행 권한을 부여한 후 실행함.
          + 🍎 macOS (MacOS 12 이상)
               o 릴리스 섹션으로 이동하여 upscayl-x.x.x-mac.dmg 파일을 다운로드하고 애플리케이션 폴더로 드래그하여 설치함.
          + 🍺 Homebrew
               o brew install --cask upscayl 명령어로 설치함.
          + 🐌 Windows (Windows 10 이상)
               o 릴리스 섹션으로 이동하여 .exe 파일을 다운로드하고 설치함.
     * 👨‍🏫 위키 - 튜토리얼과 가이드
          + 새로운 모델 시도, 자체 모델 변환, 호환성 목록, 문제 해결 등의 정보를 위키에서 확인할 수 있음.
     * ⚖️ 결과
          + Upscayl의 전후 비교 사례를 여기에서 확인할 수 있음.
     * 🤫 로드맵
          + 버그 수정, 전 세계 FOSS 사용 촉진 등의 진행 상황을 여기에서 추적할 수 있음.
     * 🛠 개발
          + Node.js 설치를 위해 Volta 사용을 권장함.
     * 🏃 실행
          + git을 설치하고 싶지 않다면 첫 번째 줄을 건너뛰고 소스 zip을 다운로드하여 추출한 후 나머지 지침을 따를 수 있음.
     * 🏗️ 빌드
          + 앱 패키징과 배포를 위한 명령어 제공.
     * 🤓 FAQ
          + Upscayl 작동 원리?
               o AI 모델을 사용하여 이미지의 세부 사항을 추측하여 향상시킴.
          + 업스케일된 이미지에 큰 변화가 없는 이유?
               o Upscayl은 저해상도 이미지와 픽셀화된 이미지는 향상시킬 수 있지만, 흐린 이미지의 초점을 조정하거나 흐림을 제거할 수는 없음.
          + CLI 도구가 있나요?
               o CLI 도구는 upscayl-ncnn으로 불림.
          + GPU가 필요한가요?
               o Vulkan 호환 GPU가 필요함.
          + 기여 방법은?
               o 이슈 보고, 코드 수정, 기능 추가, 기부 등을 통해 기여할 수 있음.
     * 🎁 기부
     * ❤ 크레딧
          + Real-ESRGAN, 코드 기여자, 커뮤니티 지원자, 모델 제공자, 로고 디자이너에 대한 감사의 말.

GN⁺의 의견

     * Upscayl은 저해상도 이미지를 AI를 통해 향상시키는 혁신적인 도구로, 오픈소스 커뮤니티의 기여를 통해 지속적으로 발전하고 있음.
     * 이미지 업스케일링은 디지털 아트, 게임 개발, 사진 복원 등 다양한 분야에서 유용하게 사용될 수 있으며, Upscayl은 이러한 작업을 무료로 제공함으로써 접근성을 높임.
     * Vulkan 호환 GPU가 필요하다는 점은 일부 사용자에게 장벽이 될 수 있으나, 이는 AI 기반 이미지 처리의 고성능 요구 사항 때문임.
     * 비슷한 기능을 제공하는 다른 프로젝트로는 Topaz Labs의 Gigapixel AI, Adobe Photoshop의 Super Resolution 기능 등이 있으나, 이들은 상업적 소프트웨어임.
     * Upscayl을 도입할 때는 시스템의 하드웨어 호환성을 고려해야 하며, 오픈소스라는 점에서 커스터마이징과 커뮤니티 지원의 이점이 있음.

        Hacker News 의견

     * Real-ESRGAN-ncnn-vulkan과 upscayl-ncnn CLI의 차이점에 대한 의견:
          + Real-ESRGAN-ncnn-vulkan 사용자로서 upscayl-ncnn CLI가 무엇이 달라졌는지 궁금했으나, 중요한 차이점은 발견하지 못함. CLI 도구로 업그레이드할 가치가 있는지 알고 싶었던 것이지 비판하려는 의도는 아님.
     * 이미지 향상에 대한 영화와 TV 장면에 대한 의견:
          + 과거에는 이미지를 '향상'하는 영화와 TV 장면을 보며 웃었지만, 이제는 그러한 과학 소설이 현실이 됨.
     * UpScayl 사용 경험에 대한 의견:
          + UpScayl을 업무에 많이 사용하며, 저해상도 그래픽과 일러스트레이션을 급하게 고해상도로 만들거나, 인쇄용 인물 사진을 향상시키거나, 편집 목적으로 오래된 문서를 업스케일하는 데 유용함. 완벽하지는 않지만 매우 유용함.
     * UpScayl 체험에 대한 의견:
          + 지난 12월에 UpScayl을 시도해봤으며, 사용하기 매우 간단함. 다양한 도구를 탐색하려는 초보자에게 추천함. 그러나 최첨단 기술에 비해 품질이 뒤떨어짐을 인지함.
     * upscayl의 접근성과 기능 부족에 대한 의견:
          + upscayl은 접근성이 좋지만 필요한 많은 기능이 부족함. 정기적으로 이미지 향상이 필요할 때는 stable-diffusion-webui를 사용하게 됨. 몇 개의 이미지만 향상시키려는 사람에게는 이상적인 도구임.
     * 현재 이미지 업스케일러에 대한 실망감을 표현한 의견:
          + 다른 분야의 발전에 비해 현재의 이미지 업스케일러들이 여전히 실망스러움.
     * 워터마크 제거에 대한 동등한 앱에 대한 질문:
          + 이미지 업스케일러와 관련하여 워터마크 제거에 적합한 앱이 무엇인지에 대한 질문.
     * 이미지 및 비디오 업스케일러에 대한 추가 정보:
          + 이미지 및 비디오 업스케일링을 위한 또 다른 도구인 video2x에 대한 소개.
     * 이미지 클리닝 모델에 대한 질문:
          + 초기 저해상도 카메라로 찍은 오래된 사진의 JPEG 아티팩트 등을 정리할 수 있는 모델이 있는지에 대한 질문. 현대 모델이 쉽게 해결할 수 있는 문제로 보이지만, 몇 달마다 찾아보아도 아직 적합한 것을 찾지 못함.
     * 비디오 향상 도구에 대한 의견:
          + 비디오 품질 향상에 있어 Topaz Labs의 유료 도구에 필적하는 것을 아직 보지 못함. 다른 구현에서는 선명도와 일관성이 항상 문제가 됨. 낮은 품질/해상도의 소스로 인해 중단된 프로젝트가 있어, 이에 대한 해결책을 찾고 싶음.
"
"https://news.hada.io/topic?id=14115","LLaMA, 이제 CPU에서 더 빠른 속도로 작동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      LLaMA, 이제 CPU에서 더 빠른 속도로 작동

LLaMA의 CPU에서의 속도 향상

     * Mozilla의 llamafile 프로젝트에서 84개의 새로운 행렬 곱셈 커널을 작성함
     * F16과 Q8_0 가중치를 CPU에서 사용할 때 llama.cpp에 비해 프롬프트 평가 시간이 30%에서 500% 더 빨라짐
     * ARMv8.2+ (예: RPI 5), Intel (예: Alderlake), AVX512 (예: Zen 4) 컴퓨터에서 가장 극적인 개선이 이루어짐
     * L2 캐시에 맞는 행렬에 대해 MKL보다 2배 빠른 속도를 보임
     * 1,000개 미만의 토큰을 가진 프롬프트에 대해 속도 향상이 가장 잘 작동함

배경

     * llamafile은 2023년 11월 Mozilla와 함께 시작한 로컬 LLM 프로젝트임
     * Cosmopolitan Libc를 사용하여 llama.cpp를 단일 파일 크로스 플랫폼 바이너리로 패키징함
     * AMD64와 ARM64용 6개 OS에서 실행되며 약간의 수정이 이루어짐
     * 핵심 기술을 개선함으로써 사용자에게 최상의 llama.cpp 경험을 제공하고 두 프로젝트가 더 넓은 청중에 다가갈 수 있도록 도울 수 있다고 믿음
     * Mozilla는 이를 위한 리소스를 제공해 왔음

엔터프라이즈 하드웨어에서의 성능 향상

     * 처음 LLM에 관심을 가졌을 때 작업 환경은 회전 디스크, 느린 RAM, AVX2 프로세서, GPU 없이 Alpine을 실행하는 검소한 Hewlett Packard였음
     * llama.cpp가 마음에 들었던 점은 그들이 자신과 같은 사람들을 가장 먼저 신경 썼다는 것임
     * 전임으로 자원 봉사를 시작했고 Slaren과 같은 사람들과 협력하여 mmap() 지원을 도입했는데, 이는 RAM 사용량을 절반으로 줄이면서 가중치를 즉시 로드할 수 있게 해줌
     * 당시 로컬 LLM에 있어 큰 도약이었지만 평가 속도 개선에는 거의 기여하지 못함
     * 추론 코드의 대부분은 Georgi Gerganov 자신이 작성했으며 너무 훌륭해서 결국 1년이 더 걸려서야 개선할 수 있었음
     * 이제 개선했으니 옛 Hewlett Packard에서 얼마나 더 빨라졌는지 살펴보자는 것

취미용 하드웨어에서의 성능 향상

     * 대형 컴퓨터가 없어도 대형 언어 모델을 실행할 수 있음
     * 오늘날 매장에서 구할 수 있는 최고의 개인용 컴퓨터 중 하나는 Raspberry Pi임
     * 저렴한 가격에 우수한 성능을 제공하며 전력 소모량이 매우 적음
     * Raspberry Pi는 5세대를 며칠 전에 출시했는데 이전 모델에 비해 엄청나게 빠름
     * ARMv8.2 dotprod 및 fp16 산술 ISA에 대한 지원도 도입했는데, 이는 LLM에 매우 유용함
     * 이 두 가지 기능만으로도 작년에 llama.cpp가 f16 가중치에 대해 10배의 성능 향상을 달성할 수 있게 해줌
     * 이번 주에는 원래 AVX512를 위해 의도했던 커널을 사용하여 그 위에 2배의 성능 향상을 더 이끌어냄
     * 데이터 센터 장비용으로 설계된 커널이 작고 가벼운 Raspberry Pi에 잘 맞을 거라고는 생각하지 못했지만, 두 CPU 모두 32개의 벡터 레지스터를 가지고 있기 때문에 실제로 딱 들어맞았음

게이밍 하드웨어에서의 성능 향상

     * 게이머는 가치 소비자 중 가장 높은 품질 기대치를 가지고 있어서 게이머를 위해 만들어진 하드웨어는 보통 꽤 훌륭함
     * 기계 학습 업계에서는 게이머를 위한 하드웨어를 전용하여 수년간 번성해 왔음
     * 게이머들의 중요한 기여가 없었다면 AI 겨울은 10년 더 지속되었어야 했을 것임
     * 몇 달 전, 옛 Hewlett Packard를 대체할 수 있는 컴퓨터를 만들어달라고 게이머에게 부탁함
     * Alderlake는 훌륭한 CPU라고 생각하지만 float16 성능을 5배나 쉽게 높일 수 있었던 것으로 보아 널리 오해받고 있음
     * ARMv8.2와 달리 x86 커널은 내부적으로 float32 연산 유형을 사용하므로 반올림 오차를 발생시키지 않고 그렇게 할 수 있었음
     * 이는 더 스마트한 스팸 필터를 만들 수 있음을 의미함
     * spam.sh 셸 스크립트를 실행하면 420밀리초밖에 걸리지 않는데, 이는 Raspberry Pi 5보다 7배 빠른 것임
     * 작은 작업량에 있어서는 CUDA가 시작되기도 전에 이 칩이 마무리할 수 있는 것
     * Alderlake 소유자들은 llamafile이 효율성 코어에서 실행되지 않도록 특별히 주의를 기울인다는 사실을 기대할 수 있음
     * 이는 llamafile이 llama.cpp보다 빠르게 실행되는 데 도움이 되는 것들 중 하나임
     * 또한 LLM을 24시간 내내 실행해도 컴퓨터의 다른 프로그램에 여전히 충분한 리소스가 남아 있음을 의미함
     * llama.cpp는 쓰레드를 lockstep으로 디스패치하므로, 1개의 코어가 다른 코어보다 오래 작업을 수행하면 다른 모든 n개의 코어가 완료될 때까지 busy loop를 수행해야 했을 것임
     * 이 마이크로프로세서의 가장 큰 특징은 Cosmopolitan monorepo의 260만 줄의 코드를 얼마나 빨리 빌드할 수 있는지임
     * Hewlett Packard는 항상 64초가 걸렸지만 이 게이밍 컴퓨터는 20초면 됨
     * 원래는 35초가 걸렸는데, 액체 금속과 AI 오버클로킹을 적용하여 더 빨라졌음
     * Alderlake에서 시스템 코드가 매우 빠른 또 다른 이유는 이 CPU 제작 과정에서 해커와 과학자 사이에 격렬한 싸움이 있었고 해커가 이겼기 때문임
     * 앞으로 AVX512에 대해 더 나은 타협점을 마련하기를 바라지만, 이전 모델에 비해 상당한 진전을 나타낸다고 믿기에 이 칩에 대해 전반적으로 매우 만족함

애플 하드웨어에서의 성능 향상

     * 가장 수준 높은 개인용 컴퓨터라면 단연 Mac Studio일 것임
     * 여기서 성능 우위를 차지하는 것은 llama.cpp 개발자들이 가장 신경 쓰는 하드웨어 플랫폼이기 때문에 나에게 더 어려웠고, Stallman의 컴파일러를 사용하기로 한 선택 때문에 애플의 독점 도구 대신 핸디캡을 안고 작업하고 있음
     * M2 마이크로프로세서가 llamafile을 합성 콘텐츠의 급수관으로 만드는 것에 놀라지 않을 것임
     * 애플이 이를 위해 사용한 트릭은 수직 통합을 활용하는 것임
     * Mac Studio를 구입하고 내부를 들여다보면 RAM DIMM을 CPU 안에 넣었다는 것을 발견하게 될 것임
     * CPU가 더 이상 이러한 장거리 전화를 걸 필요가 없기 때문에 토큰 생성과 같은 대기 시간에 따른 작업 속도가 훨씬 빨라짐
     * 그러나 순수한 flop 측면에서 (프롬프트 tok/sec로 측정) M2 Ultra ARM ISA는 내 훨씬 저렴한 Intel 컴퓨터에 비해 30% 더 많은 계산만 노출함을 알 수 있음
     * Metal이나 Accelerate와 같은 독점 프레임워크를 통해야만 더 많은 것에 액세스할 수 있음
     * xcode가 설치되어 있다면 llamafile은 기본적으로 당신과 실리콘 사이에 있는 모든 폐쇄 소스 라이브러리 앞에 서도록 도와주는 작은 스텁 모듈을 컴파일할 것임
     * Mac Studio 구매를 고려하고 있다면 중요한 한 가지는 Windows Executive와 마찬가지로 XNU가 데스크톱을 안정적으로 유지하는 데 정말 좋은 일을 한다는 것이고, 그것은 시스템을 당신으로부터 보호한다는 의미임
     * 이러한 모든 안전 기능 때문에 Mac Studio에서 Cosmo monorepo를 컴파일하는 데 45초가 걸리지만 포크 폭탄을 터뜨려도 Netflix가 단 한 프레임도 건너뛰지 않을 것 같음
     * spam.sh 스크립트도 430ms로 실행되어 Intel보다 느림
     * 그러나 Asahi Linux가 M2의 잠재력을 최대한 발휘할 수 있는 방법을 보았기 때문에 이 중 어느 것도 나를 걱정시키지 않음

전문가용 하드웨어에서의 성능 향상

     * llamafile은 GPU가 부족한 사람들을 돕는 데 큰 관심을 기울이지만 상위 1%에게도 최고 수준의 경험을 제공함
     * AMD Ryzen Threadripper PRO 7995WX는 몇 달 전에 출시되었으며 현재 돈으로 살 수 있는 가장 비싼 CPU임
     * 1만 달러의 비용이 들지만 Zen4 아키텍처를 기반으로 96코어의 AVX512를 얻을 수 있음
     * 두 배의 가격임에도 불구하고 7995WX x86 ISA는 M2 Ultra ARM ISA보다 7배 더 많은 원시 컴퓨팅 성능을 제공하며 거의 동일한 토큰 생성 속도를 보임
     * 이는 384MB L3 캐시 덕분일 가능성이 큼
     * AVX512의 한 가지 장점은 Google의 Gemma 모델이 AVX512에서는 수학 수수께끼를 풀 수 있지만 AVX2에서는 그렇지 않다는 것인데, 더 큰 벡터가 일반적으로 반올림 오차를 줄이기 쉽기 때문임
     * VDPBF16PS 명령은 VNNI 및 ARM dotprod와 유사하게 bf16을 updot하는 데 도움이 됨
     * Mistral 및 TinyLLaMA와 같은 모델은 정식 형식으로 bfloat16을 사용하여 가중치를 배포하므로 bf16에 대한 기본 지원이 좋음
     * bf16을 fp16으로 변환하면 가능한 숫자의 13%만 정확하게 표현될 수 있음
     * 실제로 Mistral 7b가 사용하는 숫자의 99.71%가 해당 13% 중에 있기 때문에 거의 중요하지 않음
     * 그러나 llamafile은 주장되는 비트 수를 최선을 다해 전달

   인텔 14600이나 라이젠 5600 같은 중급기에 대한 데이터가 없네요. 라즈베리 파이에서 돌아는 간다는 걸 의도한거 같긴 한데 실사용에는 무리가 있을거 같아 보입니다. 그럼에도 불구하고 로컬 LLM 구동에 필요한 하드웨어 스펙이 점점 내려가고 있다는 것을 위안으로 삼고 싶습니다

        Hacker News 의견

     * Fortran SGEMM 구현에 대한 의견:
          + 현대의 Fortran 컴파일러는 추가적인 변경 없이도 AVX와 FMA 최적화를 적용할 수 있음.
          + 루프 언롤링(loop unrolling) 최적화는 컴파일러 플래그(-funroll-all-loops)를 통해 가능.
          + Intel 컴파일러는 사용자의 명시적 요청 없이도 루프 언롤링을 수행.
          + Fortran 77 소스에 병렬화를 추가하는 것은 어려울 수 있지만, OpenMP 구문을 추가하거나 현대 Fortran의 병렬화 구조를 사용할 수 있음.
          + Fortran 77 함수를 과소평가하지 말 것. 플랫폼 특정 세부 사항으로부터 개발자를 해방시키고 컴파일러에게 작업을 맡기는 것이 Fortran의 목적임.
     * cuBLAS 대체에 대한 의견:
          + cuBLAS를 CUDA 내에서 다시 작성하려는 시도로 보임.
          + 다음 단계는 CUDA 의존성을 제거하고 Vulkan이나 Metal 컴퓨트 셰이더를 직접 사용하는 것일 수 있음.
     * LLM(Local Language Model) 실행에 대한 의견:
          + 모든 사람이 최소한의 요구 사항으로도 로컬에서 LLM을 다운로드하고 실행할 수 있어야 함.
          + 이는 인간 지식의 큰 부분을 백업하는 역할을 할 수 있음.
     * 성능 측정에 대한 의견:
          + C++를 사용하여 서브루틴을 정의하는 것을 선호함. C++는 Python보다 세 오더 이상 빠름.
          + 성능 차이를 ""무어의 법칙의 연도""로 측정하는 아이디어를 좋아함.
     * 관련 링크 제공:
          + 성능 개선과 관련된 자료로 UTexas LAFF와 Nadav Rotem의 Gist를 참조할 것.
     * 제목에 대한 의견:
          + 제목이 혼란스러움. 처음에는 모델이 CPU에서 GPU보다 빠르다고 주장하는 것으로 오해할 수 있음.
          + ""LLaMa on CPU의 성능 개선""과 같이 더 명확한 제목이 좋을 것.
     * MKL-DNN 대비 성능 개선에 대한 의견:
          + 제한된 행렬 크기에 대해 MKL-DNN을 능가하려 했지만 실패한 경험이 있음.
          + CPU에서 이러한 에너지 효율성은 물리적으로 불가능함.
     * LLM 실행에 대한 의견:
          + 큰 컴퓨터 없이도 큰 언어 모델을 실행할 수 있음.
          + 작은 파라미터 모델을 실행하는 것도 기술적으로 언어 모델 실행에 해당하지만, 대부분의 사람들이 유용하다고 생각하는 기준을 충족하지 못할 수 있음.
     * Pixar의 CPU 사용에 대한 의견:
          + Pixar와 같은 대형 스튜디오가 비용/성능 및 더 큰 RAM 접근성 때문에 영화 렌더링에 CPU를 사용함.
          + 관련 뉴스 링크 제공.
     * AMD Zen4와 AVX512에 대한 의견:
          + 7995WX x86 ISA는 M2 Ultra ARM ISA보다 가격은 두 배지만, 7배 더 많은 원시 컴퓨팅 파워를 제공하며, 토큰 생성 속도도 거의 동일함.
          + 이는 384MB L3 캐시 덕분일 가능성이 있음.
          + Zen4에서 LLaMA를 이전보다 2.8배 빠르게 실행할 수 있게 하는 작업을 수행함.
"
"https://news.hada.io/topic?id=14187","제가 편집할 때 생각하는 것들 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        제가 편집할 때 생각하는 것들 (2019)

글쓰기를 편집할 때 생각하는 것들

     * 글을 정확히 전달하라
          + 글을 쓰기 전에 무엇을 말하고자 하는지 결정해야 함.
          + 주제, 대상 독자 등을 고려하여 글의 목적을 명확히 하고, 이를 문서 상단에 기록함.
          + 글을 쓰고 편집하는 과정에서 이 목적과 비교하여 일관성을 유지함.
     * 합리적인 범위 내에서 반복하라
          + 독자가 주제를 이해할 수 있도록 글의 시작과 끝에서 주제를 재확인함.
          + 명확성을 위해 동사 대신 명사를 사용하여 반복하는 것이 도움이 됨.
     * 단순화하라
          + 불필요한 단어를 제거하고, 문장을 간결하게 만듦.
          + ""당신은"" 또는 ""당신이 할 수 있는""과 같은 표현을 간결한 명령문으로 대체함.
          + 긴 문장을 짧게 나누고, 쉼표를 적절히 사용하여 독자의 이해를 돕음.
     * 수동태를 제거하라
          + 수동태는 행위자를 모호하게 만들어 문장을 덜 명확하게 함.
          + 능동태로 바꾸면 문장이 더 명확해지고 이해하기 쉬워짐.
     * 부사를 사용하지 마라
          + 부사 대신 더 구체적인 동사를 사용하거나 설명을 추가하여 표현함.
          + 부사는 종종 독자에게 정확한 의미를 전달하지 못하고 모호함을 남김.
     * 지식을 가정하지 마라
          + 독자가 모를 수 있는 정보에 대해 적절한 배경 설명을 제공함.
          + 약어를 처음 사용할 때는 전체를 쓰고 설명을 추가함.
     * 어조를 인식하라
          + 글의 어조가 일관되어야 하며, 친근한 어조와 공식적인 어조를 혼용하지 않음.
     * 전문 용어와 클리셰를 피하라
          + 정확한 표현을 사용하여 독자가 이해하기 쉽게 함.
          + 전문 용어는 독자가 특정 집단에 속하지 않을 경우 이해하기 어려울 수 있음.
     * 공백을 활용하라
          + 긴 문단을 나누고, 부제목, 목록, 표 등을 사용하여 독자의 가독성을 높임.
          + 중요한 내용은 굵은 글씨로 강조하여 독자가 주요 포인트를 놓치지 않도록 함.

결론

     * 글을 편집하는 기본 원칙은 명확하게 의미를 전달하고 불필요한 단어를 제거하는 것임.
     * 이러한 원칙을 따르면서 자신만의 스타일과 선호도를 발전시킬 수 있음.
     * 편집의 목적은 언어 사용에 대해 생각하고 메시지 전달에 적합한 선택을 하는 것임.

GN⁺의 의견

     * 편집 과정에서 글의 목적과 일관성을 유지하는 것은 모든 글쓰기에 중요한 원칙임.
     * 수동태의 사용은 기술 문서에서 특히 피해야 할 스타일이며, 능동태로의 전환은 명확성을 높이는 데 기여함.
     * 부사의 사용을 피하고 구체적인 표현을 사용하는 것은 기술 문서뿐만 아니라 모든 글쓰기에서 효과적임.
     * 독자가 모를 수 있는 정보에 대한 배경 설명은 특히 기술 문서에서 중요하며, 이는 독자의 이해도를 높이고 문서의 접근성을 향상시킴.
     * 공백과 시각적 구분을 사용하는 것은 온라인 콘텐츠의 가독성을 향상시키는 중요한 요소임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 작성자는 자신의 글이 많은 사람들과 공감을 얻어 영광이라고 함.
          + 호기심을 따라 소프트웨어 엔지니어가 되었으며 몇 년간 일한 후 글쓰기 중심의 역할을 그리워함.
          + 기술적인 스킬과 커뮤니케이션 능력을 결합한 역할을 찾고 있으며, 연락처는 웹사이트와 LinkedIn을 통해 가능함.
     * 두 번째 댓글 요약:
          + 기술 문서에서 약어를 소개하지 않고 사용하는 것은 불편함.
          + 프로젝트 문서에 반복되고 팀원이 바뀌면 약어의 의미를 아는 사람이 없어질 수 있음.
          + 약어를 고유명사처럼 취급하고 계속 사용하는 것이 유일한 해결책이 될 때도 있음.
     * 세 번째 댓글 요약:
          + 기술 문서 검토자로서 많은 가이드라인을 사용했음.
          + 같은 것을 다른 이름으로 부르지 말 것을 추가로 제안함.
          + 여러 저자가 있을 때 용어가 달라져 독자에게 혼란을 줄 수 있음.
     * 네 번째 댓글 요약:
          + ""수동태 피하기"" 조언에 대해 동의하지 않음.
          + 수동태는 행동에 대한 관점을 바꿀 수 있는 도구임.
          + 수동태를 사용하면 행동의 출처를 언급할지 선택할 수 있음.
     * 다섯 번째 댓글 요약:
          + 누구를 위해 글을 쓰는지 결정하는 것이 어려움.
          + 기술적인 독자, 일반적인 독자, 비기술적인 독자 등 다양한 독자를 고려해야 함.
          + 글을 더 많은 독자에게 접근 가능하게 만들려는 시도와 길이를 줄이려는 고민 사이에서 갈등함.
     * 여섯 번째 댓글 요약:
          + 글쓰기 개선에 대한 열정을 표현함.
          + 목록 사용의 중요성과 적절한 사용법에 대해 조언함.
     * 일곱 번째 댓글 요약:
          + ""just""라는 단어의 사용을 피할 것을 제안함.
          + ""just""는 단순함을 암시하지만 실제로는 그렇지 않을 수 있음.
     * 여덟 번째 댓글 요약:
          + 기술 문서뿐만 아니라 블로그, 이메일 등에서 공백의 중요성을 강조함.
          + 긴 문단은 읽기 어렵고 사람들이 주의를 잃기 쉬움.
     * 아홉 번째 댓글 요약:
          + 과거에 MSP에서 일하며 잘 작성된 생산 가이드의 중요성을 인식함.
          + 신문에서 얻은 경험을 참고하여 문서 작성의 도움이 될 수 있는 가이드라인을 찾으려 함.
     * 열 번째 댓글 요약:
          + 미래 시제 사용을 피할 것을 제안함.
          + 문서에서 ""이렇게 하면 ~할 것이다"" 대신 ""이렇게 하면 ~한다""로 표현하는 것이 더 나음.
"
"https://news.hada.io/topic?id=14134","익명의 공개 음성 메일함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             익명의 공개 음성 메일함

음성 메일함

     * 음성 메일함에는 다양한 메시지들이 날짜와 시간, 메시지 길이, 메모 등의 정보와 함께 기록되어 있음.
     * 각 메시지는 특정한 내용을 담고 있으며, 그 내용은 장난스러운 것부터 일상적인 소통, 중요한 알림에 이르기까지 다양함.
     * 메시지들은 개인적인 인사, 생일 축하, 기술적인 내용, 농담, 음악적인 요소 등을 포함하고 있음.

GN⁺의 의견

     * 이러한 음성 메시지 목록은 현대 사회에서 다양한 커뮤니케이션 방식의 한 단면을 보여줌. 사람들이 서로 소통하는 방법은 시대와 기술의 발전에 따라 계속 변화하고 있음.
     * 음성 메시지는 문자나 이메일에 비해 더 개인적이고 감정적인 요소를 전달할 수 있는 장점이 있음. 이는 음성의 톤과 강조를 통해 메시지의 의도를 더 명확하게 전달할 수 있기 때문임.
     * 그러나 음성 메시지는 빠르게 정보를 검색하거나 내용을 기록하는 데는 불편할 수 있으며, 이는 디지털 커뮤니케이션의 한계로 볼 수 있음.
     * 음성 메시지는 긴급한 상황이나 중요한 정보를 전달할 때는 적합하지 않을 수 있음. 이는 메시지를 듣고 반응하는 데 시간이 걸릴 수 있기 때문임.
     * 이 목록은 현대인들이 서로를 생각하며 소소한 일상을 공유하는 모습을 보여주며, 이는 사회적 유대감을 강화하고 공동체 의식을 형성하는 데 기여할 수 있음.

        Hacker News 의견

     * 1990년대 초 학교 다닐 때 대학교 음성메일 시스템을 이용해 기본 비밀번호 '0000'인 번호를 찾아 노래를 녹음하고, 캠퍼스 공중전화 옆에 '다이얼송' 목록을 붙여 누구나 즐길 수 있게 했던 추억. 한 학기 동안 잘 운영되다가 시스템이 업데이트되어 모든 노래가 삭제됨.
     * 1990년대 '레드 토킹 폰북' 사용 경험. 전화번호를 다이얼하고 코드를 입력해 영화 시간, 농담, 시간 등 다양한 정보를 얻을 수 있었음. 무작위 코드를 시도해 숨겨진 서비스를 발견했는데, 그것은 익명의 공용 음성메일함이었음. 다양한 메시지가 있었고, 이 서비스를 발견한 다른 사람이 있는지 궁금함.
     * 1990년대 중반 시카고에서 유행했던 호출기와 무료 음성메일함 이야기. 호출기 회사는 음성메일 PIN을 호출기 번호의 마지막 4자리로 설정했고, 사용자는 계정을 만들 때 변경해야 했음. 많은 사람들이 음성메일 번호를 훔쳐 파티 홍보, 메시지 보드, 그래피티 등에 사용했음.
     * '시크릿 핫라인' 팟캐스트를 연상시키는 멋진 프로젝트.
     * 1990년대 유선전화 사운드를 잘 재현한 녹음에 사용된 오디오 코덱과 파라미터에 대한 질문.
     * 음성메일이 1990년대를 주제로 한 진정성 있는 내용이며, '핫 포켓'에 대한 것이 재미있었음. 이 프로젝트가 어떻게 구축되었는지에 대한 자세한 정보에 대한 호기심.
     * 비슷한 프로젝트를 진행 중인 다른 사람이 있음. 이런 일을 하는 사람들을 보는 것이 멋짐.
     * 몇 시간 전에 메시지를 남겼지만 웹사이트에 표시되지 않음. 무엇을 놓친 것인지에 대한 질문.
     * SMS를 온라인에서 사용할 수 있게 해주던 'cel.ly'를 연상시킴. 현재는 운영되지 않는 것 같음.
     * '보이스 저일'이라는 프로그램을 소개하는 NCN의 쇼에 대한 언급. 이 주제에 대한 다양한 코미디 오디오 컷업을 포함함.
"
"https://news.hada.io/topic?id=14121","Atlassian Pragmatic Drag & Drop","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Atlassian Pragmatic Drag & Drop

     * 아틀라시안이 Trello, Jira, Confluence 등에서 사용하는 드래그 & 드롭 툴체인
     * React, Svelte, Vue, Angular등 어디서든 활용 가능
          + 리스트, 보드, 그리드, 테이블, 트리, 파일, 그리기 등의 컴포넌트
     * 핵심 패키지 + 옵션 패키지로 구성되어 다양한 설정으로 가져다 쓸 수 있음

   예전에 react-beautiful-dnd 를 유기했던 이유가 이거였군요 ㄷㄷ
"
"https://news.hada.io/topic?id=14160","Thoughtworks Technology Radar, Volume 30 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Thoughtworks Technology Radar, Volume 30 공개

   테크닉/도구/플랫폼/개발언어 및 프레임워크 분야의 최신 트렌드들을 Hold/Assess/Trial/Adopt 4단계로 시각화 및 설명

개방형스러운(Open-ish) 소스 라이선스

     * 오픈 소스 소프트웨어 개발 생태계는 오랜 기간 동안 OSI(Open Source Initiative)에서 카탈로그화한 라이선스 세트에 의존해 왔음
     * 최근 몇 년 동안 널리 사용되는 도구의 핵심 기능이 갑자기 유료화되는 경우가 발생하면서, 오픈 소스 라이선스 환경에 변화가 생기고 있음
     * 소프트웨어에 대한 비용을 지불하는 것은 문제가 없지만, 생태계가 발달한 도구의 핵심 기능이 갑자기 유료화되는 것은 문제가 있음
     * 오픈 소스라고 선전하면서도 기본적인 기능은 구독료나 기타 요금을 지불한 후에야 제공되는 소프트웨어도 등장하고 있음
     * 라이선스 문제에 특별한 주의를 기울일 것을 권고함
     * 모든 파일이 최상위 수준의 라이선스에 의해 제공되는지 확인해야 함

AI 지원 소프트웨어 개발 팀

     * AI는 소프트웨어 개발의 모든 측면에서 점진적으로 이점을 얻을 수 있으며, 개발 전반에 걸친 혁신을 적극적으로 따르고 있음
     * AI가 제공하는 새로운 기능과 함께 소프트웨어 품질과 보안에 대한 새로운 위험이 따르므로, 비개발자를 포함하여 잠재적 위험에 대해 경계해야 함

LLM을 위한 새로운 아키텍처 패턴

     * LLM(Large Language Models) 사용이 증가함에 따라 일반적인 상황을 지원하기 위한 특정 아키텍처 패턴이 등장하기 시작함
          + NeMo Guardrails: LLM 사용에 대한 거버넌스 정책 구축 허용
          + Langfuse: LLM 출력으로 이어지는 단계에 대한 가시성 향상 및 생성된 코드로 가득 찬 비대한 코드베이스 처리 및 검증 방법
     * 엔터프라이즈 생태계에서 LLM 출력의 품질을 높이기 위해 RAG(retrieval-augmented generation)가 선호되는 패턴임
     * 생성형 AI가 소프트웨어 개발에 계속 스며들면서 패턴(및 불가피한 안티 패턴)의 폭발적 증가가 예상됨

적절한 CI에 가까운 PR 끌어오기(Dragging PRs closer to proper CI)

     * Thoughtworks는 빠른 피드백 루프와 지속적 통합(CI)을 강력히 지지해 왔음
     * 최근 풀 리퀘스트(PR)가 의무화되는 상황으로 인해 많은 팀이 CI/CD의 CI 부분을 무시하게 되었음
     * PR은 대규모 분산 오픈 소스 팀과 신뢰할 수 없는 기여자를 관리하기 위해 개발되었지만, 작고 긴밀한 전달 팀에서도 동료 검토의 동의어가 되었음
     * 개발자들은 실제 CI를 실행할 때 얻는 것과 같은 흐름을 갈망함
     * gitStream, Github 병합 대기열 등 PR 검토 프로세스의 고통을 완화하려는 여러 도구를 조사했음
     * AI 코딩 어시스턴트로 인해 코딩 처리량이 증가하면 더 큰 PR을 만드는 경향이 있어 비동기 코드 검토 프로세스에 더 많은 압력을 가함
     * 외부 제약으로 인해 CI를 사용할 수 없는 팀은 통합 정확도와 피드백 주기 속도를 개선할 방법을 찾을 것을 권장함

[Techniques]

  Adopt

    1. Retrieval-augmented generation (RAG)

  Trial

    2. Automatically generate Backstage entity descriptors
    3. Combining traditional NLP with LLMs
    4. Continuous compliance
    5. Edge functions - Cloudflare Workers
    6. Security champions
    7. Text to SQL - Vanna.ai
    8. Tracking health over debt

  Assess

    9. AI team assistants
   10. Graph analysis for LLM-backed chats
   11. LLM-backed ChatOps
   12. LLM-powered autonomous agents - AutoGen
   13. Using GenAI to understand legacy codebases - Bloop
   14. VISS

  Hold

   15. Broad integration tests
   16. Overenthusiastic LLM use
   17. Rush to fine-tune LLMs
   18. Web components for SSR web apps

[Platforms]

  Adopt

   19. CloudEvents

  Trial

   20. Arm in the cloud
   21. Azure Container Apps
   22. Azure OpenAI Service
   23. DataHub - Data Discovery Platform(DDP)의 모든 것
   24. Infrastructure orchestration platforms
   25. Pulumi
   26. Rancher Desktop
   27. Weights & Biases

  Assess

   28. Bun
   29. Chronosphere
   30. DataOS
   31. Dify
   32. Elasticsearch Relevance Engine
   33. FOCUS
   34. Gemini Nano
   35. HyperDX
   36. IcePanel
   37. Langfuse
   38. Qdrant
   39. RISC-V for embedded
   40. Tigerbeetle
   41. WebTransport
   42. Zarf
   43. ZITADEL

[Tools]

  Adopt

   44. Conan
   45. Kaniko
   46. Karpenter

  Trial

   47. 42Crunch API Conformance Scan
   48. actions-runner-controller
   49. Android Emulator Container
   50. AWS CUDOS
   51. aws-nuke
   52. Bruno
   53. Develocity
   54. GitHub Copilot
   55. Gradio
   56. Gradle Version Catalog
   57. Maestro
   58. Microsoft SBOM tool
   59. Open Policy Agent (OPA)
   60. Philips's self-hosted GitHub runner
   61. Pop
   62. Renovate
   63. Terrascan
   64. Velero

  Assess

   65. aider
   66. Akvorado
   67. Baichuan 2
   68. Cargo Lambda
   69. Codium AI
   70. Continue
   71. Fern Docs
   72. Granted
   73. LinearB
   74. LLaVA
   75. Marimo
   76. Mixtral
   77. NeMo Guardrails
   78. Ollama
   79. OpenTofu
   80. QAnything
   81. System Initiative
   82. Tetragon
   83. Winglang

[Languages & Frameworks]

  Trial

   84. Astro
   85. DataComPy
   86. Pinia
   87. Ray

  Assess

   88. Android Adaptability
   89. Concrete ML
   90. Crabviz
   91. Crux
   92. Databricks Asset Bundles
   93. Electric
   94. LiteLLM
   95. LLaMA-Factory
   96. MLX
   97. Mojo
   98. Otter
   99. Pkl
   100. Rust for UI
   101. vLLM
   102. Voyager
   103. WGPU
   104. Zig

  Hold

   105. LangChain - LangChain은 무의미합니다, LangChain의 문제점

   매번 Radar 가 나올때 마다 각 항목들을 긱뉴스에서 다뤘는지 검색해보는게 재미나네요.
   개별 항목도 있고, 꽤 많이 언급한 것들은 검색 링크로 추가했습니다.

   Thoughtworks Technology Radar, Volume 29 공개
   Thoughtworks Technology Radar, Volume 28 공개
   Thoughtworks Technology Radar 27호 발간
   Thoughtworks Technology Radar 26호 (39p PDF)
   ThoughtWorks Technology Radar 23호 발간
   ThoughtWorks Technology Radar 22호 발간 [32p PDF]
   ThoughtWorks가 6개월마다 발행하는 기술뉴스 - Radar Vol.21
"
"https://news.hada.io/topic?id=14102","자바스크립트에 시그널 추가 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           자바스크립트에 시그널 추가 제안

JavaScript Signals 표준 제안 초안

     * JavaScript에서의 신호(signals)에 대한 초기 공통 방향을 설명하는 문서로, ES2015에서 TC39에 의해 표준화된 Promises 이전의 Promises/A+ 노력과 유사함.
     * 이 노력은 JavaScript 생태계를 조정하는 데 중점을 두고 있으며, 이 조정이 성공적이면 그 경험을 바탕으로 표준이 등장할 수 있음.
     * 여러 프레임워크 작성자들이 반응성 코어를 뒷받침할 수 있는 공통 모델에 대해 협력하고 있음.
     * 현재 초안은 Angular, Bubble, Ember, FAST, MobX, Preact, Qwik, RxJS, Solid, Starbeam, Svelte, Vue, Wiz 등의 저자/유지 관리자들로부터의 설계 입력을 기반으로 함.

배경: 왜 신호인가?

     * 복잡한 사용자 인터페이스(UI)를 개발하기 위해, JavaScript 애플리케이션 개발자들은 상태를 저장, 계산, 무효화, 동기화 및 효율적인 방식으로 애플리케이션의 뷰 레이어로 푸시할 필요가 있음.
     * UI는 단순한 값 관리뿐만 아니라 다른 값이나 상태에 의존하는 계산된 상태를 렌더링하는 것을 자주 포함함.
     * 신호의 목표는 이러한 애플리케이션 상태를 관리하기 위한 인프라를 제공하여 개발자들이 반복적인 세부 사항보다 비즈니스 로직에 집중할 수 있도록 하는 것임.

      예시 - VanillaJS 카운터

     * counter라는 변수가 있고, 이 변수가 변경될 때마다 DOM에 카운터의 짝수 여부를 업데이트하고자 함.
     * Vanilla JS에서는 다음과 같은 코드가 있을 수 있음:

let counter = 0;
const setCounter = (value) => {
  counter = value;
  render();
};

const isEven = () => (counter & 1) == 0;
const parity = () => isEven() ? ""even"" : ""odd"";
const render = () => element.innerText = parity();

// Simulate external updates to counter...
setInterval(() => setCounter(counter + 1), 1000);

     * 이 코드에는 몇 가지 문제가 있음:
          + counter 설정이 잡음이 많고 보일러플레이트가 많음.
          + counter 상태가 렌더링 시스템과 밀접하게 연결됨.
          + counter가 변경되었지만 parity가 변경되지 않는 경우(예: 2에서 4로 변경), 불필요한 계산과 렌더링을 수행함.
          + UI의 다른 부분이 counter 업데이트 시에만 렌더링하고자 하는 경우.
          + isEven이나 parity에만 의존하는 UI의 다른 부분이 counter와 직접 상호 작용하지 않고는 업데이트할 수 없음.

신호 소개

     * 모델과 뷰 간의 데이터 바인딩 추상화는 JS나 웹 플랫폼에 그러한 메커니즘이 내장되어 있지 않음에도 불구하고 오랫동안 UI 프레임워크의 핵심이었음.
     * JS 프레임워크와 라이브러리 내에서는 이러한 바인딩을 나타내는 다양한 방법에 대해 많은 실험이 이루어졌으며, ""Signals""라고 종종 불리는 상태 또는 다른 데이터에서 파생된 계산을 나타내는 일급 반응형 값 접근 방식의 힘이 입증됨.
     * 신호 API를 사용하여 위의 예제를 다시 상상해보면 다음과 같음:

const counter = new Signal.State(0);
const isEven = new Signal.Computed(() => (counter.get() & 1) == 0);
const parity = new Signal.Computed(() => isEven.get() ? ""even"" : ""odd"");

// A library or framework defines effects based on other Signal primitives
declare function effect(cb: () => void): (() => void);

effect(() => element.innerText = parity.get());

// Simulate external updates to counter...
setInterval(() => counter.set(counter.get() + 1), 1000);

신호 표준화에 대한 동기

      상호 운용성

     * 각 신호 구현은 자체 자동 추적 메커니즘을 가지고 있어, 다른 프레임워크 간에 모델, 컴포넌트, 라이브러리를 공유하기 어려움.
     * 이 제안의 목표는 반응형 모델을 렌더링 뷰로부터 완전히 분리하여 개발자가 새로운 렌더링 기술로 이전할 때 비-UI 코드를 다시 작성하지 않아도 되게 하거나, 다른 맥락에서 배포될 수 있는 공유 반응형 모델을 JS로 개발할 수 있게 하는 것임.

      성능/메모리 사용

     * 일반적으로 사용되는 라이브러리가 내장되어 있기 때문에 코드를 덜 전송하는 것은 항상 작은 잠재적 성능 향상을 가져올 수 있지만, 신호 구현은 일반적으로 꽤 작기 때문에 이 효과가 매우 클 것으로 기대하지 않음.

      개발자 도구

     * 기존 JS 언어 신호 라이브러리를 사용할 때는 계산된 신호 체인을 통한 호출 스택, 신호 간 참조 그래프 등을 추적하기 어려움.
     * 내장 신호는 JS 런타임과 개발자 도구가 신호를 검사하는 데 개선된 지원을 제공할 수 있게 함.

      부수적인 이점

        표준 라이브러리의 이점

     * 일반적으로 JavaScript는 상당히 최소한의 표준 라이브러리를 가지고 있었지만, TC39의 추세는 JS를 고품질의 내장 기능 세트가 있는 ""배터리 포함"" 언어로 만드는 것임.

        HTML/DOM 통합 (미래의 가능성)

     * W3C와 브라우저 구현자들은 현재 HTML에 네이티브 템플릿을 도입하기 위한 작업을 진행 중임.
     * 이러한 목표를 달성하기 위해서는 결국 HTML에 반응형 원시값이 필요함.

신호 설계 목표

     * 기존 신호 라이브러리는 핵심에서 그리 다르지 않음.
     * 이 제안은 많은 라이브러리의 중요한 특성을 구현함으로써 그들의 성공을 바탕으로 구축하고자 함.

    핵심 기능

     * 상태를 나타내는 Signal 타입, 즉 쓰기 가능한 Signal.
     * 다른 신호에 의존하고 게으르게 계산되고 캐시되는 계산/메모/파생된 Signal 타입.
     * JS 프레임워크가 자체 스케줄링을 할 수 있도록 함.

    API 스케치

     * 초기 신호 API 아이디어는 아래와 같음. 이것은 단지 초기 초안이며, 시간이 지남에 따라 변경될 것으로 예상됨.

namespace Signal {
  // A read-write Signal
  class State<T> implements Signal<T> {
    // Create a state Signal starting with the value t
    constructor(t: T, options?: SignalOptions<T>);

    // Get the value of the signal
    get(): T;

    // Set the state Signal value to t
    set(t: T): void;
  }

  // A Signal which is a formula based on other Signals
  class Computed<T> implements Signal<T> {
    // Create a Signal which evaluates to the value returned by the callback.
    // Callback is called with this signal as the this value.
    constructor(cb: (this: Computed<T>) => T, options?: SignalOptions<T>);

    // Get the value of the signal
    get(): T;
  }

  // This namespace includes ""advanced"" features that are better to
  // leave for framework authors rather than application developers.
  // Analogous to `crypto.subtle`
  namespace subtle {
    // Run a callback with all tracking disabled (even for nested computed).
    function untrack<T>(cb: () => T): T;

    // Get the current computed signal which is tracking any signal reads, if any
    function currentComputed(): Computed | null;

    // Returns ordered list of all signals which this one referenced
    // during the last time it was evaluated.
    // For a Watcher, lists the set of signals which it is watching.
    function introspectSources(s: Computed | Watcher): (State | Computed)[];

    // Returns the Watchers that this signal is contained in, plus any
    // Computed signals which read this signal last time they were evaluated,
    // if that computed signal is (recursively) watched.
    function introspectSinks(s: State | Computed): (Computed | Watcher)[];

    // True if this signal is ""live"", in that it is watched by a Watcher,
    // or it is read by a Computed signal which is (recursively) live.
    function hasSinks(s: State | Computed): boolean;

    // True if this element is ""reactive"", in that it depends
    // on some other signal. A Computed where hasSources is false
    // will always return the same constant.
    function hasSources(s: Computed | Watcher): boolean;

    class Watcher {
      // When a (recursive) source of Watcher is written to, call this callback,
      // if it hasn't already been called since the last `watch` call.
      // No signals may be read or written during the notify.
      constructor(notify: (this: Watcher) => void);

      // Add these signals to the Watcher's set, and set the watcher to run its
      // notify callback next time any signal in the set (or one of its dependencies) changes.
      // Can be called with no arguments just to reset the ""notified"" state, so that
      // the notify callback will be invoked again.
      watch(...s: Signal[]): void;

      // Remove these signals from the watched set (e.g., for an effect which is disposed)
      unwatch(...s: Signal[]): void;

      // Returns the set of sources in the Watcher's set which are still dirty, or is a computed signal
      // with a source which is dirty or pending and hasn't yet been re-evaluated
      getPending(): Signal[];
    }

    // Hooks to observe being watched or no longer watched
    var watched: Symbol;
    var unwatched: Symbol;
  }

  interface Options<T> {
    // Custom comparison function between old and new value. Default: Object.is.
    // The signal is passed in as the this value for context.
    equals?: (this: Signal<T>, t: T, t2: T) => boolean;

    // Callback called when isWatched becomes true, if it was previously false
    [Signal.subtle.watched]?: (this: Signal<T>) => void;

    // Callback called whenever isWatched becomes false, if it was previously true
    [Signal.subtle.unwatched]?: (this: Signal<T>) => void;
  }
}

신호 알고리즘

     * 각 JavaScript에 노출된 API에 대해 구현하는 알고리즘을 설명함.
     * 이것은 초기 사양으로 생각할 수 있으며, 매우 열린 변경에 대해 가능한 한 세트의 의미를 못 박는 것을 목표로 함.

GN⁺의 의견

     * JavaScript Signals 표준 제안은 프레임워크 간의 상호 운용성을 향상시키고 개발자들이 반응형 프로그래밍을 더 쉽게 구현할 수 있게 하는 것을 목표로 함.
     * 이 제안은 기존의 여러 신호 라이브러리들의 핵심 기능을 표준화하려는 시도로, 개발자들에게 일관된 프로그래밍 모델을 제공할 수 있음.
     * 신호의 개념은 UI 개발뿐만 아니라 비-UI 컨텍스트에서도 유용하게 적용될 수 있으며, 특히 빌드 시스템에서 불필요한 재빌드를 피하는 데 도움이 될 수 있음.
     * 제안된 API는 프레임워크 개발자들에게 유용한 도구를 제공하며, 이를 통해 더 나은 성능과 메모리 관리를 달성할 수 있을 것으로 기대됨.
     * 그러나 이 기술이 널리 채택되기 위해서는 더 많은 프로토타이핑과 커뮤니티의 피드백이 필요하며, 실제 애플리케이션에 통합되어 그 효과가 입증되어야 함.
     * 현재 React, Vue, Svelte와 같은 프레임워크들은 이미 자체적인 반응형 시스템을 가지고 있으며, 이러한 프레임워크들과의 호환성이나 통합 전략도 중요한 고려 사항이 될 것임.

        Hacker News 의견

     * Vanilla JS vs. Signals 예제
          + Vanilla JS 예제가 더 읽기 쉽고 작업하기 편하다고 느끼는 사람이 나 혼자인가?
               o 설정이 복잡하고 보일러플레이트가 많다고 생각됨.
               o 카운터 값이 변경되었을 때 필요하지 않은 연산과 렌더링이 발생할 수 있음.
               o UI의 다른 부분이 카운터 업데이트 시에만 렌더링하려면 상태 관리 방법을 변경해야 할 수도 있음.
               o UI의 다른 부분이 isEven이나 parity에만 의존하는 경우, 전체 접근 방식을 변경할 필요가 있을 수 있음.
     * Promises와 JavaScript의 변화
          + 처음에는 new Promise를 자주 써야 할까 걱정했지만, 실제로는 거의 사용하지 않았음.
          + 대신 .then을 많이 사용하게 되었고, 이는 다양한 서드파티 라이브러리와의 인터페이스를 단순화함.
          + Signal 제안이 반응형 UI 프레임워크에 유사한 효과를 가져다준다면 찬성함.
     * 언어의 일부로서의 Signals
          + Signals가 언어의 일부가 될 필요는 없으며, 라이브러리로 충분함.
          + 현재의 JS UI 라이브러리가 설계한 Signals가 언어의 일부가 될 정도로 좋다고 생각하는 것은 오만함.
          + 모든 유행을 언어 런타임에 추가하는 것은 단기적인 시각으로 보임.
     * 애플리케이션에서의 이벤트 사용
          + 애플리케이션 전반에 걸쳐 이벤트를 사용하여 신호를 보냄.
          + window.dispatchEvent와 window.addEventListener를 통해 이벤트를 발생시키고 구독함.
     * DOM 상태 관리와 업데이트의 어려움
          + 수십 년 동안 사람들이 상태 관리와 DOM 업데이트를 어려워하는 이유를 이해하려고 함.
          + 간단한 DOM 함수를 복잡하게 만드는 것 같아 의아함.
     * Promises와 비동기 프로그래밍
          + Promises는 성공적인 사례이지만, async/await 없이는 표준화할 필요가 없었음.
          + 다양한 라이브러리 저자들이 이 제안에 대해 어떻게 생각하는지 궁금함.
     * S.js와 Signals
          + Signals를 좋아하며 UI 제작 시 다른 기본 요소보다 선호함.
          + 그러나 JavaScript 언어에 포함되어야 한다고는 생각하지 않음.
     * MobX와 유사한 Signals
          + MobX는 가장 좋아하는 JS 효과 시스템임.
          + MobX 버전의 코드 예제 제공.
     * 표준 라이브러리에 프레임워크 추가
          + 현재 선호하는 프레임워크를 표준 라이브러리에 추가하자는 것과 유사함.
     * Signal 제안에 대한 이해와 문제점
          + Signal 제안의 예제를 이해하는 데 어려움을 겪음.
          + effect 함수가 어떻게 parity 변경을 감지하는지, 어떤 신호 변경에도 이 람다를 호출하는지 등에 대한 질문.
          + Signal 아이디어는 타당하지만, 복잡한 애플리케이션에서 이벤트 추적이 어려워질 수 있음.
"
"https://news.hada.io/topic?id=14197","DrawDB - 온라인 데이터베이스 다이어그램 편집기 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   DrawDB - 온라인 데이터베이스 다이어그램 편집기 오픈소스

     * 사용자 친화적이고 직관적인 온라인 데이터베이스 엔티티 관계(ER) 설계 도구 및 SQL 생성기
     * 5개 DB 지원 : MySQL, PostgreSQL, SQLite, MariaDB, SQL Server
     * 키보드 단축키 및 UI 커스터 마이징 가능
     * 다양한 템플릿이 제공되며 직접 템플릿 작성 가능
     * DDL 스크립트 Export, Import(현재는 MySQL만 지원)
     * ORDB 지원(커스텀 타입 및 커스텀 JSON 스키마 생성 가능)
     * 프리젠테이션 모드
     * ToDO 관리 가능

drawDB 소개

     * drawDB는 사용자 친화적이고 직관적인 데이터베이스 엔티티 관계(ER) 편집기로, 브라우저에서 바로 사용 가능함.
     * 몇 번의 클릭으로 다이어그램을 만들고, SQL 스크립트를 내보내며, 계정 생성 없이 편집기를 사용자화할 수 있음.

시작하기

  로컬 개발

     * drawDB의 GitHub 저장소에서 소스 코드를 복제하고, 필요한 패키지를 설치한 후 개발 서버를 실행하는 방법 제공.
git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run dev

  빌드

     * 소스 코드를 복제하고, 필요한 패키지를 설치한 후 프로덕션 빌드를 생성하는 방법 제공.
git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run build

     * 서버 설정과 환경 변수는 .env.sample을 참고하여 설문조사 및 버그 보고 양식에 맞게 설정해야 함.

GN⁺의 의견

     * drawDB는 데이터베이스 설계를 처음 접하는 초급 소프트웨어 엔지니어에게 매우 유용할 수 있음. ER 다이어그램을 시각적으로 구성하고 SQL 스크립트를 생성하는 기능은 데이터베이스 모델링 학습 과정에서 도움이 됨.
     * 이 도구는 웹 기반으로 쉽게 접근할 수 있으며, 복잡한 설치 과정이나 계정 생성 없이 바로 사용할 수 있다는 점에서 편리함.
     * 오픈소스 프로젝트이기 때문에, 사용자들은 기능 개선이나 버그 수정에 직접 기여할 수 있으며, 커뮤니티의 지원을 받을 수 있음.
     * 그러나 오픈소스 프로젝트는 때때로 지속적인 지원과 업데이트가 보장되지 않을 수 있으므로, 상업적인 프로젝트나 기업 환경에서는 이를 고려해야 함.
     * 유사한 기능을 제공하는 다른 도구로는 MySQL Workbench, Lucidchart, ER/Studio 등이 있으며, 사용자는 자신의 요구 사항에 맞는 도구를 선택해야 함.

   유료 erd 툴 쓸 필요가 없군요^^
"
"https://news.hada.io/topic?id=14180","Webpack → Vite: 스토리북의 번들러 마이그레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Webpack → Vite: 스토리북의 번들러 마이그레이션

   스토리북 번들러를 Webpack에서 Vite로 마이그레이션 했습니다. 이 과정에서 여러 이슈가 연쇄적으로 발생하여 결과적으로 기존 기술 스택을 변경해야 했습니다.

기술 스택 변경

   • [기존 기술 스택] Storybook v6.5, builder-webpack5, Node v18, Yarn 1
   • [최종 기술 스택] Storybook v7, react-vite, Node v18, Pnpm


마이그레이션 시 발생한 이슈

   1. Webpack 4와 OpenSSL 3 버전 호환 이슈
     * 이슈 설명
          + builder-webpack5를 builder-vite로 마이그레이션 하는 과정에서 OpenSSL
            버전 호환 이슈 발생
          + Webpack 5.61.0 미만 버전에는 구버전 OpensSL을 이용하고, 그 이후에는 OpenSSL 3를 이용
          + Storybook v6는 Webpack 4를 디폴트 빌더로 이용하고, Webpack 5를 옵셔널하게 제공
          + 당시 Webpack 5를 선택했었고, Webpack ^5.9.0 를 사용하는 builder-webpack5를 이용해 OpenSSL 에러가 발생하지 않았음
          + 마이그레이션한 builder-vite는 Vite를 이용해 빌드를 해도, Storybook v6에서 디폴트 빌더로 Webpack 4를 이용하기에 OpenSSL 버전 호환 이슈가 발생함
     * 해결 방법: Storybook v7로 마이그레이션
          + Storybook v7에서는 Vite를 이용할 때 스토리북 내부적으로 Webpack4를 이용하지 않기 때문에 OpenSSL 에러가 발생하지 않음

   2. Yarn 1의 호이스팅으로 인해 버전이 다른 디펜던시 사용
     * 이슈 설명
          + @isaacs/cliui 패키지에서 ESM 포맷의 string-width@5와 CommonJS(CJS)
            포맷의 string-width@4를 string-width-cjs라는 alias로 사용하고 있음
          + Yarn 1은 중복 의존성 패키지를 루트 노드 모듈로 호이스팅 하기에, 패키지에서 설치하지 않은 디팬던시에 접근할 수 있음
          + string-width@4와 @5는 여러 패키지에서 중복해서 사용되는 sub-dependency이기 때문에 루트 노드 모듈로 호이스팅되었음
          + string-width 패키지 중에서 CJS 포맷의 cli-table3가 string-width@4에 접근하려 했지만, alias로 인해 동일 버전이 존재하지 않아 ESM 형식의 string-width@5를 resolve 해 모듈 호환 문제 발생
     * 해결 방법: 팬텀 디팬던시가 발생하지 않는 pnpm으로 패키지 매니저 변경

   질문. webpack에서 esbuild-loader를 사용하지 않은 이유가 있을까요?

   답변.

   Native ESM 기능을 이용하기 위해 Vite를 이용했습니다.

   esbuild-loader는 Webpack에서 esbuild를 이용할 수 있게 하는 로더로 알고 있는데요. esbuild-loader를 이용하면 빌드 속도가 매우 빨라지지만, 여전히 번들링 과정을 거쳐야 합니다.

   반면 Native ESM을 이용하면 사용하는 모듈만을 빌드해 브라우저에 전달하고, 모듈이 변경될 경우 변경된 모듈만을 빌드하기에 더 빠릅니다.

   스토리북 같이 특정 컴포넌트만을 요청하는 경우에 Native ESM을 이용하는 것이 좋다고 판단해 Vite를 이용했습니다.
"
"https://news.hada.io/topic?id=14191","Faces.js - 벡터 기반 만화 얼굴 생성을 위한 JavaScript 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Faces.js - 벡터 기반 만화 얼굴 생성을 위한 JavaScript 라이브러리

     * Nintendo Wii가 무작위로 Mii 캐릭터를 생성하는 것과 유사한 방식으로 얼굴을 생성
     * 생성된 얼굴은 확장 가능한 벡터 그래픽(SVG)으로 그려짐
     * 각 얼굴은 작은 자바스크립트 객체로 표현될 수 있어, 이 객체를 저장하고 나중에 동일한 얼굴을 다시 그릴 수 있음
     * 얼굴 특징(눈, 코, 입 등)에 대한 옵션은 제한적이며, 현재 옵션 중 일부는 다소 단순함

GN⁺의 의견

     * faces.js는 웹 개발자들이 사용자 인터페이스에 재미있는 요소를 추가할 수 있는 도구를 제공함. 사용자의 프로필 이미지를 만드는 등의 기능에 활용될 수 있음.
     * 이 라이브러리는 개방성이 높아 커뮤니티의 기여를 통해 더 다양하고 세련된 얼굴 특징 옵션을 추가할 수 있는 잠재력을 가지고 있음.
     * 그러나 현재 제한된 얼굴 특징 옵션으로 인해, 사용자가 원하는 만큼의 다양성을 제공하지 못할 수 있으므로, 이 부분은 향후 개선이 필요함.
     * 비슷한 기능을 제공하는 다른 라이브러리나 프로젝트로는 Avataaars나 OpenMoji 등이 있으며, 이들도 사용자에게 다양한 선택지를 제공함.

        Hacker News 의견

     * 체르노프 페이스(Chernoff Faces)와 함께 사용하면 재미있을 것 같다는 의견. 체르노프 페이스는 데이터를 얼굴의 표정으로 표현하는 방법.
     * 어떤 이가 얼굴 표정을 매개변수화하는 작업을 했다는 소개와 함께 관련 웹사이트 링크 제공.
     * API가 숫자 시드 값을 전달받아 사용자가 앱에서 ""새로고침"" 버튼을 클릭할 때 마음에 드는 얼굴을 유지할 수 있기를 바라는 의견. 데이터베이스에 전체 얼굴 객체를 저장할 필요 없이 페이지 로드와 기기 간에 지속될 수 있음.
     * facesjs 라이브러리를 사용하여 랜덤 얼굴을 생성하고 표시하는 간단한 코드 예시 제공.
     * 다른 스타일의 아바타 생성 사이트 링크 공유.
     * JS 라이브러리를 HTML 파일에 포함하는 방법에 대한 기본적인 질문. 모듈 경로 해결에 실패한 오류 메시지와 함께 도움을 요청.
     * 예술적인 스타일은 매력적이지 않다고 느끼지만, 그 아이디어와 프로젝트 자체는 매우 흥미롭다는 평가.
     * README 파일을 포함하여 프로젝트를 매우 좋아한다는 의견. 저자가 브라우저에서 실행되는 스포츠 관리 시뮬레이션 게임을 만드는 독립 개발자라는 배경 정보 제공.
     * 비슷한 아바타 생성 사이트를 좋아할 수도 있다며 또 다른 웹사이트 링크 공유.
     * 제공된 라이브러리가 체르노프 페이스를 만들지 않는다는 아쉬움을 표현.
"
"https://news.hada.io/topic?id=14198","윈도우용 오픈소스 btrfs 드라이버, WinBtrfs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     윈도우용 오픈소스 btrfs 드라이버, WinBtrfs

WinBtrfs v1.9

     * WinBtrfs는 차세대 리눅스 파일 시스템인 Btrfs를 위한 윈도우 드라이버임.
     * 리눅스 커널로부터 코드를 사용하지 않고 처음부터 재구현되었으며, 윈도우 XP 이상의 모든 버전에서 작동함.
     * 무료 운영 체제인 ReactOS에도 포함되어 있음.
     * 리눅스에서 생성된 MD 소프트웨어 RAID 장치에 Btrfs 파일 시스템이 있다면, 윈도우에서 인식하게 하기 위해 WinMD가 필요함.

기능

     * Btrfs 파일 시스템의 읽기 및 쓰기 지원.
     * 기본 및 고급 RAID 지원, 캐싱, Btrfs 파티션 발견, ACLs 설정 및 가져오기, 대체 데이터 스트림, 리눅스 사용자와 윈도우 사용자 매핑, 심볼릭 링크 및 기타 재구성 지점, 하드 링크, 희소 파일, 자유 공간 캐시, 사전 할당, 비동기 읽기 및 쓰기, 파티션 없는 Btrfs 볼륨, 볼륨별 레지스트리 마운트 옵션, 압축, LXSS 지원, 밸런싱, 장치 추가 및 제거, 새 파일 시스템 생성, 스크럽, TRIM/DISCARD, Reflink 복사, 서브볼륨 전송 및 수신, Degraded 마운트, 자유 공간 트리, 볼륨 축소 및 확장, LXSS 권한 패스스루, Zstd 압축, 윈도우 10 대소문자 구분 디렉토리 플래그, Oplocks, 메타데이터 UUID 불일치 플래그, 새로운 체크섬 유형, 블록 그룹 트리 지원.

할 일

     * 전체 fs-verity 지원, Zoned 지원, 조각 모음, Btrfs 할당량 지원, 전체 트랜잭션 로그 지원, 윈도우 트랜잭션 지원.

설치

     * 드라이버를 설치하려면 최신 릴리스를 다운로드하고 압축을 풀고, btrfs.inf 파일을 마우스 오른쪽 버튼으로 클릭하여 설치를 선택함.
     * 드라이버는 서명되어 있어서 최신 버전의 윈도우에서 바로 작동함.
     * 윈도우 10에서 Secure Boot를 사용하는 경우, 드라이버가 로드되도록 레지스트리 변경이 필요할 수 있음.
     * Chocolatey와 Scoop 패키지 매니저에서도 WinBtrfs 사용 가능.

제거

     * 제거하려면 명령 프롬프트에서 특정 명령을 실행하거나, 장치 관리자에서 ""Btrfs 컨트롤러""를 찾아 제거를 선택함.
     * 레지스트리를 통한 제거도 가능함.

컴파일

     * Visual C++ 2019 또는 GCC on Linux를 사용하여 컴파일 가능함.

매핑

     * 사용자 매핑은 레지스트리 키 HKLM\SYSTEM\CurrentControlSet\services\btrfs\Mappings에 저장됨.
     * 윈도우 SID와 리눅스 uid를 매핑하여 드라이버가 로드될 때 적용됨.

LXSS 지원

     * 드라이버는 LXSS의 최신 버전에 리눅스 메타데이터를 통과시키지만, 윈도우에서 이를 알도록 설정해야 함.

명령

     * GUI 인터페이스를 제공하는 DLL 파일과 함께, 명령줄에서 일부 작업을 수행할 수 있는 rundll32.exe를 사용할 수 있음.

문제 해결

     * 디버깅, 파일 이름 문제, Secure Boot 작동 문제, 드라이브 문자 변경, 포맷 문제, Synology NAS 및 Thecus NAS 마운트 문제, 드라이버 로드 문제 등 다양한 문제 해결 방법 제공.

변경 로그

     * v1.9부터 v0.1까지의 변경 사항과 버그 수정 내역이 상세히 기록됨.

디버그 로그

     * WinBtrfs는 세 가지 수준의 디버그 메시지를 제공하며, 릴리스 버전의 드라이버는 오류와 FIXME 메시지만 표시함.

마운트 옵션

     * 드라이버는 마운트된 파일 시스템마다 레지스트리에 서브키를 생성하며, UUID를 기반으로 함.
     * 각 볼륨에 대한 마운트 옵션을 이 서브키에 추가할 수 있음.

연락처

     * 어떠한 피드백도 환영한다고 함: mark@harmstone.com.

저작권

     * 이 코드는 Zlib, LZO, Zstd, BLAKE2, SHA256 등의 소프트웨어 부분을 포함함.

GN⁺의 의견

     * WinBtrfs는 리눅스의 Btrfs 파일 시스템을 윈도우에서 사용할 수 있게 해주는 중요한 도구임. 이는 윈도우와 리눅스 간의 상호 운용성을 향상시키고, 리눅스 개발자나 사용자가 윈도우 환경에서도 Btrfs의 강력한 기능을 활용할 수 있게 해줌.
     * 드라이버가 오픈소스로 제공되기 때문에, 사용자와 개발자는 소스 코드를 자유롭게 수정하고 개선할 수 있으며, 이는 커뮤니티 기반의 지속적인 개선을 가능하게 함.
     * 설치 및 사용이 상대적으로 간단하며, 윈도우의 Secure Boot와 같은 보안 기능과의 호환성 문제에 대한 해결책도 제공함으로써 사용자가 보안을 유지하면서도 기능을 사용할 수 있게 함.
     * 그러나 이 드라이버는 여전히 개발 중이며, 사용자는 자신의 데이터를 보호하기 위해 백업과 같은 안전 조치를 취해야 함을 명시하고 있음. 이는 소프트웨어가 아직 완전히 안정화되지 않았을 수 있음을 시사함.
     * 윈도우에서 리눅스 파일 시스템을 사용하는 것은 드물지만, 이러한 도구는 특정 사용 사례에서 매우 유용할 수 있음. 예를 들어, 데이터 복구 전문가나 듀얼 부팅 시스템 사용자에게 필수적인 기능을 제공할 수 있음.

        Hacker News 의견

     * 사용자는 btrfs/zfs 드라이버를 사용하고 싶었으나, 깃허브 이슈를 보고 문제들(블루스크린, 시스템 정지, 사용량 급증, 데이터 손상) 때문에 사용하지 않기로 결정함. 안정적인 드라이버에 기꺼이 비용을 지불할 의향이 있음.
     * 이 드라이버가 리눅스 코드 없이 완전히 재구현되었다는 점과 XP/2k3 및 ReactOS에서 사용 가능하다는 점이 매우 훌륭함. 사용자는 자신의 오래된 기기에서 이 드라이버를 시도해보고 싶어함.
     * 관련 링크 제공: WinBtrfs – 다음 세대 리눅스 파일시스템 Btrfs의 윈도우 드라이버에 대한 논의 (2017년 9월, 100개의 댓글) 및 WinBtrfs v0.7에 대한 논의 (2016년 10월, 1개의 댓글).
     * 사용자는 몇 주 전에 btrfs 하드 드라이브에서 이 드라이버를 사용해보려 했으나 작동하지 않았음. WSL을 사용하여 접근하는 것은 몇 번은 성공했지만 결국 실패함. 결국 리눅스 라이브 ISO를 부팅하여 파일을 윈도우 드라이브와 btrfs 드라이브 간에 복사/이동하는 방법을 사용하고 있음.
     * README를 모두 읽어볼 것을 추천함. 저자가 많은 질문에 답변하고 있음.
     * 이 드라이버가 ""기본 및 고급"" RAID 5/6을 지원한다고 하는데, BTRFS 자체는 아직 지원하지 않는다는 의문을 제기함.
     * 사용자는 듀얼 부팅을 하며 이전 버전의 드라이버를 사용해왔음. 문제가 있긴 하지만 작동함. 자주 윈도우를 부팅하지 않기 때문에 개인적으로는 괜찮지만 모든 사람에게 적합하지는 않을 수 있음. 새 버전이 더 적은 문제로 작동하기를 바람.
     * 드라이버가 장기간 또는 생산 환경에서 어떻게 작동하는지 사용 경험이 있는 사람의 의견을 듣고 싶어함. TRIM 지원 여부와 드라이브 최적화 시 필요한 RETRIM(첫 번째 시도에서 TRIM되지 않은 영역을 해제하는 기능) 지원 여부에 대한 질문. 이 드라이버가 ReFS를 선호하지 않는 사람들에게 NTFS 대체재로서 데이터 패리티를 제공할 수 있는지, ZFS on Windows에 비해 얼마나 성숙한지에 대한 질문도 있음.
     * 하드웨어 RAID를 여전히 사용하는 이유가 무엇인지, BTRFS와 ZFS가 있을 때 궁금함.
     * 이 드라이버를 사용하면 Windows 10과 11을 btrfs로 포맷된 USB 스틱에서 부팅할 수 있는지에 대한 질문.
"
"https://news.hada.io/topic?id=14096","당신은 사람들을 너무 늦게 해고하고 있어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        당신은 사람들을 너무 늦게 해고하고 있어요

     * 처음으로 직원을 해고하는데 6개월이나 걸린 경험을 통해 적은 글

직원을 해고해야 하는지 알아내는 방법

     * 직원을 해고해야 할지 고민하기 시작했다면 이미 늦은 것일 수 있음
     * Netflix는 ""Keeper 키퍼 테스트""라는 엄격한 기준을 따름: 직원이 퇴사하겠다고 하면 그들을 붙잡을 것인가? 그렇지 않다면 해고해야 함
     * 대부분의 회사는 Netflix처럼 최고 수준의 급여를 지급하거나 오직 고급 엔지니어만 채용하지 않기 때문에 이 기준을 적용하기 어려움
     * 더 부드러운 기준인 ""Relief 안도 테스트""가 있음: 직원이 퇴사한다고 상상했을 때 안도감을 느낀다면, 그들을 놓아줘야 함

왜 그렇게 어려운가?

     * 주로 세 가지 경우에 해당함:
         1. 적합하지 않은 사람을 채용함
         2. 명확한 기대치를 제공하지 않거나, 그 기대치를 달성하기 위한 충분한 멘토링을 제공하지 않았음
         3. 역할에 대한 요구사항이 변경되어 해당 직원이 더 이상 맞지 않음
     * 모든 경우에 당신이 상황에 대한 책임이 있으며, 해고 결정은 어려워야 함
     * 좋은 관리자는 사람들이 개선하고 변할 수 있다고 믿어야 하지만, ""직원의 잠재력과 어려운 결정을 내리지 못하는 자신의 무능력을 혼동하지 않도록 주의"" 해야 함

해고에 대한 나의 고충들

     * 새로운 관리자로서 많은 실수를 저질렀고, 이 이야기가 다른 이들이 그 실수를 피하는 데 도움이 되기를 바람

  시작: 첫 2개월

     * 해리의 채용: 해리는 100% 원격 롤로 채용되었으며, 시작은 유망했음. 빠르게 적응하고 한 달 후에는 복잡한 티켓을 받아 적절한 품질로 제공하기 시작함.
     * 진행 속도 저하: 그러나 진행 속도가 느려지기 시작했음. 추정 시간이 늘어나고, 때때로 하루 중 3-4시간 동안 완전히 사라지기도 함. 결국, 일일 회의에 나타나지 않고 오후 4시까지 어떤 메시지에도 응답하지 않았을 때, 이에 대해 이야기하기로 결정함.

     첫 번째로 사라진 직후 대화를 나눴어야 했음. 기대치 불일치의 문제일 뿐이라고 확신했음. 해리가 매우 똑똑했기 때문에 몇 번의 대화를 통해 그를 올바른 경로로 이끌 수 있을 것이라고 느낌.

  개선과 재발: 3-5개월차

     * 심각한 대화: 완전히 받아들일 수 없는 상황임을 이야기하고, 해리는 동의함(밤 6시까지 비디오 게임을 하고 알람을 놓쳤다고 함).
     * 근무 시간 조정: 늦은 시간에 일하고 싶다면 그것도 괜찮다고 함, 핵심 시간 동안 이용 가능하고 상황을 업데이트해주면 됨.
     * 긍정적인 마무리: 한 번의 일탈로 느끼고 다시 올바른 길로 돌아왔다고 느낌.
     * 패턴 인식 실패: 일상적인 회의에서 문제에 봉착했다고 언급했으나, 도움을 제안했을 때는 곧 해결하겠다고 함. 다음날 문제를 해결했다고 하나, 사실상 한 시간 이내에 해결되어야 할 일이 전체 하루가 걸림.

     매니저와 이 사실을 공유했더니, 그는 사소한 문제를 제기하며 낮에 시간을 허비하고 있으니 해고해야 한다고 말했음. 나는 그가 이전 직장에서 나쁜 습관을 가지고 있는 것일 수 있으며 좋은 습관을 기르는 것이 중요하다고 말함

  최종 결정: 6-7개월차

     * 마지막 대화: 이대로 계속할 수는 없다고 이야기함. 시니어 개발자로서 더 많은 것을 기대한다고 함. 그가 일하는 데 관심이 있다면 도와주겠다고 제안함.
     * 마이크로 매니지 시작: 다음 스프린트 동안 2-3시간마다 진행 상황을 확인하는 메시지를 보내며 세세하게 관리함. 이 접근 방식이 잘 작동하여 더 이상 사소한 문제에 '봉착'하지 않게 됨.
     * 독립성 부여와 문제 재발: 한 달이 지나고, 더 이상 돌보지 않기로 결정함. 2주 후, 낮 동안 방해받지 않을 것임을 알게 되자 다시 3-4시간 동안 사라지기 시작하고 티켓 추정을 부풀리려고 시도함.
     * 최종 해고 결정: 해리가 매우 똑똑하고 유능하며 좋은 사람이라고 여전히 믿었음. 그저 게으르고 그다지 일하고 싶어하지 않았을 뿐, 작은 스타트업에는 적합하지 않은 상태였음

     결국 해리를 해고하기로 결정함

당신의 불확실함으로 인해 모두가 지불하는 대가

     * 해고를 후회한 관리자는 거의 없으며, 오직 더 일찍 해고하지 않은 것에 대한 후회만 있음
     * 모든 사람에게는 잘 할수 있는 일이 있으며, 관리자의 역할은 직원들이 그곳에 도달하도록 돕는 것임
     * ""잠재력이 있다""고 믿는 단계에 너무 오래 머무르면 모두가 고통받음
     * 직원도 고통 받음
          + 한대 맞고 싶지 않다면 ""이게 너에게 맞는 것 같아, 다른 곳에서도 잘할 수 있을 거야!""라고 말하지 말 것
          + 당신도 힘들지만 해고당하는 사람은 훨씬 더 힘들 것
          + 사람들은 월급이 필요하고 일자리를 찾는 것이 즐겁지 않음
          + 하지만 잘하지 못하는 직장에 매일 출근하는 것은 정말 짜증나는 일
     * 당신도 고통 받음
          + 마음속 깊은 곳에서 성공하지 못할 것을 알면서도 누군가의 성공을 도우려고 노력하는 것은 지치게 만듦
          + 다른 일을 할 에너지가 남아 있지 않게 됨
     * 팀도 고통 받음
          + 평범한 사람들과 함께 일하면 의욕이 떨어짐
          + 해리를 내보내고 나니 팀원들이 해리를 좋아했음에도 불구하고 팀 분위기가 개선되었음
          + 모두가 내 결정을 이해하게 됨

해고를 더 쉽게 만드는 팁

     * 해고는 항상 개인적이고 굴욕적인 느낌을 주지만, 직원이 회사를 떠날 때 그들이 회사를 '해고'하는 것과 마찬가지임
     * 이는 반드시 회사가 나쁘다는 의미가 아니라, 당시 그들에게 맞지 않는다는 의미임
     * 언제든지 죄책감 없이 그만둘 수 있는 이 자유는 그만큼의 대가가 있음
     * 죄책감 때문에 결정을 내리지 말것
     * 올바른 결정을 했다는 것을 알기 위해서는 다음의 단계를 따를 것
          + 즉각적인 피드백: 잘못된 길로 들어섰을 때 즉시 알려줘야 함. 이상적으로는 첫 90일 동안 사람들에게 과도한 양의 피드백을 제공해야 함.
          + 매우 구체적으로 알리기: 사람들이 저지르는 실수와 그들의 행동을 바꾸면 상황이 어떻게 달라질지에 대한 예를 들어 설명해야 함.
          + 잘못된 것을 알릴 때, 그들에게 당신이 의미하는 바를 그들이 제대로 말할 때까지 따라서 말하게 할 것(repeat it back). 종종 사람들은 자신에게 기대되는 것을 알고 있다고 생각하지만, 여전히 기대치를 충족시키지 못함.
          + 위협 요소 제거: 성과 향상 계획에 대해 가장 나쁜 것 중 하나는 파멸의 기운이 둘러싸고 있다는 것임. 이로 인해 사람들이 반발하거나 나쁜 태도를 보이거나, 최선을 다할 수 없을 정도로 절망적인 느낌을 받음.
          + 기록하기: 측정할 수 있는 명확하게 정의된 목록을 작성해야 함. 직원은 자신이 성공하고 있다는 것을 스스로 볼 수 있어야 하며, 이 과정에서 발생하는 변화를 볼 수 있어야 함.
          + 인내심 갖기: 행동을 바꾸는 것은 많은 노력이 필요함. 많은 사람들이 불가능하다고 가정하지만, 피드백에 투자하고 어려운 대화를 하는 것으로 가능하며, 종종 그만한 가치가 있음.
     * 기억할 것: 성과 향상 계획에 투입된 사람들의 50%가 상습 위반자가 됨. 해리와 같은 똑똑한 직원은 상황에 맞게 행동하는 법을 알고 있음.
     * 평범한 팀을 원하지 않는다면 어려운 결정을 내릴 수 있어야 함

   마음의 중심을 잡기 어려울 때마자 들어와서 다시 읽어보곤 합니다.

   정말 감사합니다.

   게임하다가 알람을 놓치다니... 예시라기에는 극단적이지만, 전체적으로 생각할 것이 많은, 읽을 가치가 있는 글입니다. 고맙습니다.

   평범한 팀 유지 하는 것도 어렵죠 ㅠㅠ

   해리 얘기 완전 내 얘기네

   2222 나만 그런건 아닐줄 알았음 ㅋㅋ

   한국에서는 실현 할 수 없는 부분들이 보이지만 일로 만난 인간 관계에서 할 수 있는 공통적인 고민들이 보였던 것 같습니다. 충분히 생각 해볼 수 있는 내용들이라 좋았던 것 같습니다.

   사례나 고민 글로는 적절하지만 조언으로써는 별로입니다.
   물론 한국은 이런 분위기를 강제하다 보니 해고가 용이한 외주나 계약직을 선호하는 것도 여러모로 한국에 안맞는 글이니 참... 착잡하군요.

   채용 잘못, 매니징 잘못의 변명을 개인의 잘못으로 해고로 풀어낸것 같음..
   이런 매니징 실수를 격지 않기 위한 방법에 관한 내용은 많이 알려져있는데, 그걸 이제 해보고 깨닳았다! 라는 글 같음..

   좋은 글이지만... 자칫 자기 마음에 안 드는 직원을 내보내기 위해 이 글을 멋대로 가져다 붙이는 수준낮은 관리자가 나타날까 우려되네요

   수준 낮은 관리자 밑에서 일할거면 빠르게 해고당하는게 낫죠..

   그런 사람은 이런 글을 안보면 더 수준 낮은 방법으로 사람을 내보내지 않을까 생각됩니다

   한국에서는 요원한 일이지요

   좋은 글이에요. (라고 적으면서 항상 위화감을 느낍니다. 요약만 읽었거든요!) 넷플릭스처럼 할 수 있는 회사는 넷플릭스 뿐이라는 생각을 종종 했는데, 좀 더 완화된 버전이 제공되어 흥미로웠습니다.
"
"https://news.hada.io/topic?id=14149","RAGFlow - OCR 및 문서 파싱 기반 오픈소스 RAG 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RAGFlow - OCR 및 문서 파싱 기반 오픈소스 RAG 엔진

     * 심층적인 문서 이해를 기반으로 하는 오픈 소스 RAG(검색 증강 생성) 엔진
     * 모든 규모의 비즈니스에 간소화된 RAG 워크플로우를 추가하고, LLM에 다양한 복잡한 포매팅 데이터의 근거 있는 인용을 바탕으로 사실에 입각한 질문 답변 기능을 제공
     * 주요 기능
          + ""Quality in, quality out"" : 복잡한 형식의 비정형 데이터에서 심층 문서 이해 기반 지식 추출. 무제한의 토큰에서 '데이터 건초 더미에서 바늘 찾기' 가능
          + 템플릿 기반 청킹 : 지능적이고 설명하기 쉬움. 다양한 템플릿 옵션 중에서 선택
          + 근거 인용으로 환각 감소 : 사람이 개입할 수 있도록 텍스트 청킹을 시각화.주요 참고 문헌과 추적 가능한 인용을 빠르게 확인하여 근거에 입각한 답변을 지원
          + 이기종 데이터 소스와의 호환성 : Word, 슬라이드, 엑셀, txt, 이미지, 스캔 사본, 구조화된 데이터, 웹 페이지 등을 지원
          + 자동화되고 간편한 RAG 워크플로
               o 개인 및 대기업 모두를 위한 간소화된 RAG 오케스트레이션
               o 임베딩 모델을 포함한 LLM 설정 가능
               o 융합된 리랭킹과 결합된 다중 리콜
               o 비즈니스와의 원활한 통합을 위한 직관적인 API
"
"https://news.hada.io/topic?id=14206","NASA 우주선, 태양 대기를 비행하며 포착한 광기어린 소용돌이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NASA 우주선, 태양 대기를 비행하며 포착한 광기어린 소용돌이

태양 대기 내부에서 포착된 야생 영상

     * NASA의 파커 태양 탐사선이 태양 대기의 외곽인 코로나에서 거대한 '소용돌이 구조'를 목격함.
     * 이 탐사선은 이전의 어떤 임무보다 태양에 훨씬 더 가까이 날아가며, WISPR 카메라로 촬영한 전례 없는 영상을 최근 온라인에 공개함.

태양에서 방출되는 현상의 원인

     * 연구자들은 이 현상이 코로나 질량 방출(CME)과 태양풍의 상호작용으로 인해 발생한 것으로 추정함.
     * 태양은 지속적으로 충전된 입자의 꾸준한 흐름인 태양풍을 방출함.

태양 탐사로 새로운 기회 창출

     * 이 영상과 관련된 새로운 연구는 __The Astrophysical Journal__에 발표되었으며, 태양의 미지의 영역에서의 발견이 CME를 더 잘 이해하고 예측할 새로운 기회를 창출했다고 결론짐.
     * 이 드문 소용돌이는 기술적으로 '켈빈-헬름홀츠 불안정성'(KHI)이라고 불림.

CME의 위험성

     * CME는 위성을 위험에 빠뜨리고, 통신 및 항법 기술을 방해하며, 심지어 지구상의 전력망을 마비시킬 수 있음.
     * 1989년에 발생한 강력한 CME는 캐나다 퀘벡에서 수백만 명에게 전력 공급을 중단시킨 사례가 있음.

파커 태양 탐사선의 지속적인 임무

     * NASA의 파커 태양 탐사선은 태양 코로나로의 고속 다이빙을 계속할 예정임.
     * 이 탐사선은 태양을 향해 4.5인치 두께의 탄소 열 차폐막으로 보호되어 있으며, 차폐막은 약 2,500도 화씨까지 가열되지만 차폐막 뒤쪽은 놀랍게도 온화함.
     * 올해 말에는 탐사선이 시속 약 43만 마일에 도달할 것으로 예상됨.

GN⁺의 의견

     * 파커 태양 탐사선의 발견은 태양과 관련된 과학적 이해를 크게 향상시킬 수 있는 중요한 단계임. 태양의 코로나에서 직접 관찰된 소용돌이 구조는 태양풍과 CME의 상호작용에 대한 새로운 정보를 제공하며, 이는 지구에 미치는 영향을 예측하는 데 큰 도움이 될 것임.
     * CME는 지구의 기술 인프라에 심각한 영향을 미칠 수 있으므로, 이러한 현상을 더 잘 이해하고 예측하는 것은 우주 날씨 예보의 정확성을 높이고 잠재적인 피해를 최소화하는 데 필수적임.
     * 태양 탐사선의 기술적인 측면, 특히 고온에서도 작동할 수 있는 열 차폐 기술은 우주 탐사선 설계에 있어 중요한 발전을 나타냄. 이러한 기술은 미래의 탐사 임무에도 적용될 수 있으며, 더 극한의 환경에서도 임무를 수행할 수 있는 능력을 제공함.
     * 태양 탐사는 우주 과학뿐만 아니라 지구 기후 변화 연구에도 중요한 데이터를 제공할 수 있음. 태양 활동은 지구의 기후 시스템에 큰 영향을 미치므로, 태양의 변화를 모니터링하는 것은 기후 변화 연구에 있어 중요한 역할을 함.
     * 이 기술의 발전과 탐사 결과는 우주 과학에 관심이 있는 사람들에게 흥미롭고 도움이 될 뿐만 아니라, 장기적으로는 지구상의 생명과 기술에 미치는 영향을 이해하는 데에도 중요한 기여를 할 것임.

        Hacker News 의견

     * 1980년대 후반 박사과정 중에 슈퍼컴퓨터로 켈빈-헬름홀츠 불안정성을 시뮬레이션했던 한 사용자는 태양 역학에의 적용을 보고 이 현상이 예측대로 존재하고 행동한다는 것을 확인하게 되어 기쁘다고 말함. 당시 예측되었던 다른 플라즈마 불안정성들도 우주 탐사선을 통해 확인되었다고 언급함.
     * 파커 태양 탐사선이 시간당 수십만 마일의 속도로 이동하는 것을 감안할 때, 관측된 소용돌이의 크기가 태양의 지름 정도일 수 있음을 추측하는 댓글.
     * 한 사용자는 소용돌이 영상을 가짜 색상으로 표현하는 것에 대한 의미를 묻고, 이상하게도 태양에서 오는 저주파 소리를 듣고 싶어함.
     * 소용돌이의 크기에 대한 척도를 찾을 수 있는지 묻는 댓글.
     * 파커 탐사선이 올해 말에 시간당 43만 마일의 속도에 도달할 것이라는 정보를 제공하며, 이는 빛의 속도의 0.1%에 가까운 속도라고 언급함.
     * 켈빈-헬름홀츠 불안정성이 웜홀처럼 보인다고 말하는 사용자.
     * 영상이 색상이 없고, 크기 척도가 없으며, 너무 짧아서 무엇을 보고 있는지 이해할 수 없다고 실망을 표현하는 댓글.
     * ""dead""와 ""flagged""라는 댓글은 특정 내용을 제공하지 않음.
     * 현재 스마트폰 등의 대량 생산으로 인한 규모의 경제를 고려할 때, 컬러 카메라를 탑재하는 것이 더 저렴할 것이라고 주장하는 댓글.
"
"https://news.hada.io/topic?id=14172","아이오와 대학교 병원 전 직원, 35년간 가짜 신분 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아이오와 대학교 병원 전 직원, 35년간 가짜 신분 사용

에이스 애비뉴 교량 교체를 위한 5600만 달러 보조금 확보

     * 아이오와주 시더래피즈(Cedar Rapids)는 에이스 애비뉴(Eighth Avenue) 교량 교체 프로젝트를 위해 5600만 달러의 연방 보조금을 확보함.
     * 이 교량은 1930년에 지어졌으며, 현재 구조적 문제로 인해 교체가 필요함.
     * 새 교량은 보행자와 자전거 이용자를 위한 향상된 접근성을 제공하고, 홍수 위험을 줄이는 데 도움이 될 것으로 기대됨.

GN⁺의 의견

     * 에이스 애비뉴 교량 프로젝트는 시더래피즈 지역사회에 중요한 인프라 개선을 가져올 것으로 보임. 이는 교통 흐름을 개선하고, 홍수 위험을 감소시키며, 보행자와 자전거 이용자의 안전을 증진시킬 것임.
     * 교량 교체는 종종 대규모 예산과 장기간의 공사가 필요한 복잡한 프로젝트임. 이러한 프로젝트는 지역 경제에 긍정적인 영향을 미칠 수 있으나, 공사 기간 동안 교통 혼잡과 같은 일시적인 불편함을 초래할 수 있음.
     * 현대 교량 설계는 지속 가능성과 환경 영향을 고려하여 이루어져야 함. 새로운 교량이 홍수 관리와 같은 자연 재해에 대한 대비를 통합하는 것은 지역사회에 장기적인 이점을 제공할 것임.
     * 이 프로젝트는 연방 보조금에 의존하고 있으며, 이는 정부의 인프라 투자가 지역사회의 필요를 충족시키는 데 얼마나 중요한지를 보여줌. 그러나 이러한 보조금은 경쟁이 치열하며, 모든 필요한 프로젝트에 자금을 제공할 수 없는 경우가 많음.
     * 교량 건설과 관련된 기술 발전은 이러한 프로젝트의 효율성과 안전성을 높이는 데 기여할 수 있음. 예를 들어, 스마트 센서 기술을 통해 교량의 상태를 실시간으로 모니터링하고 유지보수가 필요한 시점을 예측할 수 있음.

        Hacker News 의견

     *

     ""William Woods가 계속해서 자신이 Matthew Kierans가 아니라고 주장하자, 2020년 2월에 한 판사는 그가 재판을 받을 정신적 능력이 없다고 판단하고 캘리포니아의 정신병원으로 보내져 정신과 약물 치료를 받았다.""
          + 실제 Woods가 시스템을 상대로 소송을 제기하기를 바라는 댓글러의 의견. 이 사건이 악몽 같은 경험이라고 언급.
     *

     ""아이오와 대학교 경찰인 Ian Mallory 형사가 아버지의 DNA와 Woods의 DNA를 검사하여 Woods가 그 남자의 아들임을 증명했다.""
          + DNA 검사를 실시한 것이 너무나 명백한 조치였음에도 왜 이것이 대학 경찰에 의해 시작되었는지, 왜 LA 경찰이 처음부터 이를 수행하지 않았는지, 왜 정신병원으로 보내는 판결을 내린 판사가 이 검사를 요청하지 않았는지에 대한 의문을 제기하는 댓글.
     *

     ""다른 사람이 신원 도용으로 잘못 수감되고 정신병원에 보내진 것이 더 큰 범죄라고 생각한다.""
          + 정부가 진짜 Woods를 인식하지 못하고 잘못된 사람을 감옥에 보낸 것에 대한 비판적인 의견.
     *

     ""Woods가 실제로 밝혀진 후 어떻게 되었는지 이야기는 말해주지 않는다. 실제로 무력한 상태에서 계속 싸운 것은 대단한 용기였다.""
          + Woods가 어떻게 되었는지에 대한 정보가 없음을 지적하며, 그의 투쟁에 대한 존경을 표현하는 댓글.
     *

     ""나는 과거의 잘못을 숨기기 위해 몇 가지 기록을 조작한 동료와 함께 일했다. 그는 19년 동안 문제없이 지냈지만, 어떤 무관한 일로 우리가 직원들에 대한 철저한 배경 조사를 하게 되었고, 그는 경찰에 의해 사무실에서 데려가졌고, 인사부에 의해 그의 혜택은 무효가 되었다.""
          + 과거의 잘못을 숨긴 동료의 이야기를 공유하며, 어느 시점에서는 문제가 없었지만 결국 드러나게 되었다는 점을 언급하는 댓글.
     *

     ""이 이야기가 흥미로운 점은 그가 실제 William Woods보다 더 가치 있는 정체성을 구축했다는 것이다. 이 법정 사건은 그 가치를 파괴했고, 아마도 병원은 둘 중 누구도 고용하지 않을 것이다. 아마도 Keirans가 현명한 일을 했을 것이라고 생각한다면, Woods를 찾아가 신원을 바꾸도록 지불했을 것이다. 누군가 이것을 성공적으로 해낸 적이 있는지 궁금하다.""
          + Keirans가 Woods보다 더 가치 있는 정체성을 만들었지만 법정 사건으로 인해 그 가치가 손상되었다고 지적하며, Keirans가 Woods에게 신원 교환을 제안했어야 한다는 가정을 제시하는 댓글.
     *

     ""그가 유지한 거짓 신원을 위해 들인 노력에 비해 그가 수배된 사소한 범죄들은 그다지 가치가 없어 보인다. 더 많은 것이 밝혀질지 궁금하다.""
          + 거짓 신원을 유지하기 위한 노력이 그가 수배된 범죄에 비해 과도해 보인다며, 더 많은 정보가 있을 수 있다는 의심을 표하는 댓글.
     *

     ""Matthew David Keirans, 58세, 국립신용조합행정청(National Credit Union Administration)에 보험된 기관에 대한 거짓 진술 1건으로 최대 30년의 연방 교도소 형을 받을 수 있고, 중대한 신원 도용 1건으로 최대 2년의 연방 교도소 형을 받을 수 있다는 이 진술에서 처벌의 엄청난 차이를 지적하고 싶다.""
          + Keirans가 받을 수 있는 처벌의 엄격함을 지적하며, 처벌 간의 차이가 흥미롭다고 언급하는 댓글.
     *

     ""나는 진실에 대한 나의 헌신이 Woods가 한 것처럼 내 신원을 위해 일어서는 것만큼 높다고 생각하지만, 솔직히 감옥과 정신병원에서 나온 후에는 Keirans가 되는 것을 받아들일 것 같다. 다시 보내질 위험을 감수하는 것보다 더 나쁠 수는 없을 것이다.""
          + 신원을 주장하며 겪은 어려움을 고려할 때, 만약 자신이라면 Keirans의 신분을 받아들일 수도 있을 것 같다는 생각을 공유하는 댓글.
     *

     ""유럽인으로서 이런 일이 가능하다는 것이 놀랍다. 여기서는 거의 불가능하다. 모든 사람이 칩이 달린 의무적인 신분증을 가지고 있어 신원을 확인하는 데 사용된다. 아마도 이것은 디스토피아처럼 들릴 수 있지만, 잘못된 신원으로 정신병원에서 약물을 투여받는 것도 그렇다... 말도 안 된다. 이러한 극단적인 예외가 규칙을 결정해서는 안 된다.""
          + 유럽에서는 이런 일이 거의 불가능하다며, 모든 사람이 신분을 확인하는 데 사용되는 칩이 달린 신분증을 가지고 있다고 설명하는 댓글. 잘못된 신원으로 인한 문제가 디스토피아적이라고 언급하며, 이러한 예외가 규칙을 결정해서는 안 된다고 주장.
"
"https://news.hada.io/topic?id=14086","Apache Kvrocks - 분산 키/밸류 NoSQL DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Apache Kvrocks - 분산 키/밸류 NoSQL DB

     * RocksDB를 스토리지 엔진으로 사용하며, Redis 프로토콜과 호환
     * Redis 대비 메모리 비용을 낮추고 용량을 늘리는 것을 목표로 함
     * 주요 기능
          + Redis 호환: 사용자는 모든 Redis 클라이언트를 통해 Kvrocks에 액세스 가능
          + 네임스페이스: Redis SELECT와 유사하지만 네임스페이스별 토큰을 갖추고 있음
          + 복제: MySQL과 같은 binlog를 사용한 비동기 복제
          + 고가용성: 마스터 또는 슬레이브 장애 시 장애 조치를 위한 Redis 센티널을 지원
          + 클러스터: 중앙 집중식 관리이지만 모든 Redis 클러스터 클라이언트를 통해 액세스 가능

   Garnet도 Redis 호환이라고 들었습니다.
"
"https://news.hada.io/topic?id=14207","깊이 혼합: 트랜스포머에서 동적으로 컴퓨팅 자원을 할당하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  깊이 혼합: 트랜스포머에서 동적으로 컴퓨팅 자원을 할당하는 기술

트랜스포머 기반 언어 모델에서의 동적 계산 할당

     * 트랜스포머 기반 언어 모델은 일반적으로 입력 시퀀스에 걸쳐 FLOPs(부동 소수점 연산)를 균등하게 분배함.
     * 연구팀은 트랜스포머가 특정 위치에 대해 동적으로 FLOPs를 할당하도록 학습할 수 있음을 보임.
     * 이 방법은 모델 깊이에 걸쳐 다른 레이어에서 시퀀스에 대한 할당을 최적화함.

새로운 방법론: Mixture-of-Depths

     * 총 계산 예산을 제한하기 위해 자기 주의(self-attention) 및 MLP 계산에 참여할 수 있는 토큰 수(k)를 제한함.
     * 네트워크가 top-k 라우팅 메커니즘을 사용하여 처리할 토큰을 결정함.
     * k는 사전에 정의되어 있으므로, 다른 조건부 계산 기법과 달리 알려진 텐서 크기를 가진 정적 계산 그래프를 사용함.

효율성 및 성능

     * 토큰의 정체성이 유동적이기 때문에, 이 방법은 시간과 모델 깊이 차원에서 FLOPs를 비균등하게 소모할 수 있음.
     * 계산 지출은 총합에서는 완전히 예측 가능하지만, 토큰 수준에서는 동적이고 문맥에 민감함.
     * 이 방법으로 훈련된 모델은 동적으로 계산을 할당할 뿐만 아니라 효율적으로 할당함.
     * 이 모델들은 동일한 FLOPs 및 훈련에 소요되는 벽시계 시간으로 기준 성능에 부합하지만, 순방향 패스당 FLOPs의 일부만을 요구하며, 훈련 후 샘플링 중 최대 50% 더 빠른 속도로 진행할 수 있음.

GN⁺의 의견

     * 이 연구는 자연어 처리(NLP) 분야에서 효율성이 중요한 주제를 다루고 있으며, 트랜스포머 모델의 계산 비용을 줄이는 새로운 접근 방식을 제시함.
     * 동적 계산 할당은 특히 대규모 언어 모델을 사용하는 경우, 에너지 소비와 비용을 줄이는 데 도움이 될 수 있음.
     * 그러나 이 기술이 실제 어플리케이션에 통합되기 위해서는 추가적인 검증과 최적화가 필요할 것임.
     * 이 연구는 기계 학습 커뮤니티에 새로운 아이디어를 제공하며, 특히 클라우드 컴퓨팅과 같은 자원이 제한된 환경에서의 언어 모델 배포에 영향을 미칠 수 있음.
     * 비판적인 시각에서 볼 때, 이 방법이 모든 종류의 언어 모델과 데이터셋에 대해 동일한 효과를 보일지, 또한 어떤 종류의 작업에서 더 효율적인지에 대한 추가 연구가 필요함.
"
"https://news.hada.io/topic?id=14095","Ask GN: 구인 공고 - 멤버를 찾고 계신가요? (2024년 2분기)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 구인 공고 - 멤버를 찾고 계신가요? (2024년 2분기)

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)

   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   가우디오랩 | C++ Software Engineer | 강남구 삼성역 인근 | 자율근무 | https://www.gaudiolab.com/ko/careers/open-position/46

   🎧 가우디오랩을 소개해요
   가우디오랩은 세계적으로 손꼽히는 오디오 기술을 통해, 여러분께서 전혀 경험해 보지 못했던 새로운 차원의 소리 경험을 제공하는 회사입니다. 메타버스의 완성을 담당하는 스페이셜 오디오(공간음향)와 AI 오디오 기술의 가장 첨단, 그 이상의 경지에서 비교 불가한 오디오 기술의 초격차를 구현해내고 있습니다.

   가우디오랩에서 매일 창조되는 새로운 소리들은 플로, 멜론, 벅스뮤직 등 국내 메이저 스트리밍 플랫폼부터 매일 스마트폰으로 소비하는 OTT 서비스인 티빙까지 국내외 유수의 서비스에 적용되어 여러분의 귀에 가닿고 있습니다. 이미 매일 약 2천만 명의 사용자가 가우디오랩의 소리기술을 경험하고 있다는 사실! 가우디오랩과 함께 폭발적으로 성장하며 스케일업을 만들어나갈 미래 가우딘을 정중히 모시고자 합니다.

   모아이스 | 백엔드 개발자 | 서울 동작구 사당동 | 주 1회 재택 | recruit@moais.co.kr

   모아이스는 인공지능 기술과 데이터를 통해 스포츠 교육 및 연습의 방식을 혁신하는 서비스를 개발하는 회사입니다. 그 첫 과정으로 AI 골프 코칭 앱 골프픽스를 만들어 서비스하고 있습니다.

   안드로이드: https://zrr.kr/uOEG
   iOS : https://zrr.kr/CPPf

   저희 골프픽스 서비스는 글로벌 퍼스트 앱 서비스로, 글로벌 서비스를 위한 백엔드 시스템 설계, 웹 아키텍쳐 구축, 서비스 운영, DevOps 등 백엔드 개발자로써 경험할 수 있는 다양한 업무를 경험하실 수 있습니다.

   채용 제안 상세: https://zrr.kr/l08j

   비하베스트 | Golang 블록체인 코어 개발자 | 서울 강남구 논현동 | 주2회 재택 | hr@bharvest.io

   미국 수준 업계 최고 대우를 약속드립니다! 많은 관심 바랍니다.
   비하베스트는 Comos-SDK, CometBFT(Tendermint), Ethermint(EVM) 기반 Blockchain 에 대한 병렬 처리 등 퍼포먼스 최적화, 리서치, 개발 중심의 업무를 수행할 개발자를 찾습니다.
   지원: 이메일로 CV 제출 또는 https://www.linkedin.com/jobs/view/3927465966

   우아한형제들(배달의민족) | 검색프로덕트팀 서버 개발자 | 하이브리드 근무(자택근무 or 사무실(잠실) 출근) | 문의사항은 recruit@woowahan.com으로 부탁드립니다. 🙌

   우아한형제들 검색프로덕트팀은 사용자가 배달의민족 앱에서 찾고 싶은 모든 것들이 더 잘 검색되고, 더 잘 보일 수 있는 방법을 고민하는 팀입니다.
   배달의민족의 푸드와 커머스 내 다양한 서비스들을 통합검색으로 제공하고, 인기검색어, 자동완성, 오타 교정처럼 검색을 돕는 편의 기능도 함께 개발하고 있어요.

   먹고 싶은 음식, 숨은 맛집, 지금 당장 필요한 상품들까지!
   검색프로덕트팀이 제공하는 서비스의 범위는 더 넓어지고 있고, 사용자들이 찾고자 하는 것도 다양해지고 있습니다.
   배민 검색은 앞으로 해야 할 것들이 무궁무진한 도전적인 서비스예요.
   그래서 함께 성장할 수 있는 멋진 동료들을 기다리고 있어요.

   많은 관심과 지원 부탁드립니다. :)

   👉지원하러가기: https://career.woowahan.com/w1/recruits/R2402017/metadata

   [레몬베이스 - 회사와 구성원의 건강한 성장을 기술로 실현하는 SaaS 스타트업]

   사람은 깨어 있는 시간의 70%를 일터에서 보냅니다. 그 시간이 돈을 벌기 위한 수동적인 시간이 아니라, '나와 조직의 성장과 성공을 위해 주도적으로 활용하는 시간'이 될 수 있도록 레몬베이스는 성장하고 성과를 내는 방식을 기술을 통해 혁신하고 있습니다.

   레몬베이스 팀은 이 문제를 지속적인 성과관리(Continuous Performance Management)로 해결할 수 있다고 믿습니다. 레몬베이스를 통해 일 년에 한두 번이 아니라 일 년 내내 목표를 스스로 설정하고, 그 과정을 실시간으로 공유하고, 또 1:1 미팅을 통해 코칭을 주고받으며, 더 자주 동료들로부터 칭찬과 피드백을 받을 수 있습니다.

   2023년, 70억원 규모의 시리즈A 투자를 유치해 누적 투자액이 140억원으로 늘어난 레몬베이스는 빠르게 성장하는 테크 기업부터 다양한 산업의 엔터프라이즈 기업까지, 시대를 선도하는 수많은 기업과 함께 성과관리를 혁신하고 있습니다.

   ""회사와 구성원의 건강한 성장""이라는 미션을 가진 레몬베이스와 함께 성장할 미래의 크루를 찾고 있습니다. 레몬베이스 팀의 여정에 동참해 주실 분들을 기다립니다 :)

   *팀 소개 / 채용페이지 : https://www.lemonbase.team/
   *엔지니어링 그룹 페이지 : https://www.lemonbase.team/group_engineering

   ✔️ 프론트엔드 엔지니어: https://www.lemonbase.team/recruit/fe
   ✔️ 백엔드 엔지니어 (챕터 리드): https://www.lemonbase.team/recruit/be_lead

   *서울 성동구, 자율적인 리모트 워킹 가능

   마크비전 | Software Engineer(Web Automation) | 강남 (현 선릉, 인근 이사 예정) | 주 2회 재택 | https://www.marqvision.com | jesse.jung at marqvision.com
   회사 - 총 누적 300억 이상인 '글로벌 AI' 스타트업입니다. AI 활용하여 위조 상품을 제거하는 서비스를 만들고 있습니다.
   업무 - 파이썬 기반 스크래퍼 개발 및 운영 (스크래퍼 개발, 모니터링, 캡챠 대응, 인프라(AWS등) 운영 등)
   채용 링크 - https://recruit.wanted.co.kr/p/Q1dRRkUVRm9AWUNf
   온/오프라인으로 커피챗도 환영합니다 (이메일로 문의)

   커피챗 가능합니다

   앗 메일로 연락주시면 일정 조절해보겠습니다.
   jesse.jung at marqvision.com

   시큐리티플랫폼 | 백엔드 개발자(JAVA 경력 4년 이상) | 현재 판교, 서울 양재역(이사 예정) | Remote 가능(자율) | https://securityplatform.co.kr/ | whlee@securityplatform.co.kr
   시큐리티플랫폼(주)는 IoT/홈네트워크 보안 전문 기업으로서, 소프트뱅크, 프리미어파트너스, 신한캐피탈의 투자를 유치하고 아기유니콘에 선정되는 등 장래를 인정받는 기업입니다. 또한 국내의 코맥스, 해외의 ARM, Micron, Hikvision, Alibaba, Nuvoton 등 유수의 기업과 협력관계를 맺고 있습니다.
   새롭게 대두하는 홈네트워크 보안 시장에 대응할 보안시스템을 구축하는 팀에서 서버의 일부를 담당하고 성과를 공유할 팀원을 모십니다. 업계 최고의 팀원과 함께 발전할 수 있을 것이라 확신합니다.
   잡코리아 링크는 https://www.jobkorea.co.kr/Recruit/GI_Read/44360335 입니다.

   올디너리매직 | UX Engineer | 경기 판교 | 문의: keunwoo@ordinarymagic.kr | 영유아 놀잇감 및 놀이 컨텐츠 회사 입니다. 자세한 내용은 다음 채용 공고를 참고 해 주세요. https://notion.so/ordinarymagic/…

   리얼드로우 | AI Researcher(리더급) | 서울 마포(공덕) | https://www.realdraw.ai/ | people@realdraw.ai
   리얼드로우는 AI, 3D 기술을 활용해 웹툰을 제작하는 스튜디오 입니다! Stable Diffusion 과 LoRA 모델을 기반으로 LMM을 연구하는 리서처를 모시고 있어요. 자세한 채용공고는 https://www.realdraw.ai/recruit 에서 확인하실 수 있어요!

   루미글루 | CTO | 서울 역삼 | https://pf.kakao.com/_cxexoWxj | ingu@lumigloo.com
   루미글루는 절약을 첫 단추로, 누구나 쉽게 돈을 모으고 불릴 수 있도록 돕고자하는 팀입니다❤️

   (주)다이노즈ㅣ동네 기반O2O 육아맘 커뮤니티 '육아크루' 운영ㅣ플러터 개발자(경력 3년 이상)ㅣ서울 강남(재택근무 가능)ㅣ문의:biz@yugacrew.comㅣ자세한 내용은 육아크루 개발자 콘이 직접 작성한 채용공고를 참고해 주세요! https://bit.ly/499ZNAX

   워드브릭스 (LLM기반 노코드 플랫폼, GetGPT) | ML 엔지니어, 프론트, 백엔드 엔지니어 | 팔로알토 본사, 100% 리모트 근무가능 |https://getgpt.app | 미국 실리콘 밸리에 위치한 스타트업, 높은 연봉, 미국 비자 및 리로케이션 지원, 초기 스타트업에서 성장하는 경험을 할 수 있음

   Wordbricks (LLM-based no-code platform, GetGPT) | ML Engineer, Front-end, Back-end Engineer | Palo Alto, California, 100% Remote | https://getgpt.app | hr@wordbricks.ai | HQ in Silicon Valley, Competitive Salary, US Visa & Relocation support, Fast-paced, entrepreneurial environment.
"
"https://news.hada.io/topic?id=14093","2024년 3월 7일 발생한 Tailscale.com 장애 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  2024년 3월 7일 발생한 Tailscale.com 장애 사건

Tailscale.com 2024년 3월 7일 서비스 중단에 대하여

     * 2024년 3월 7일, Tailscale.com은 TLS 인증서가 만료되어 약 90분 동안 접속할 수 없었음.
     * 이 문제는 신속하게 식별 및 해결되었으며, 주로 마케팅 자료와 문서에 영향을 미쳤음.
     * 예상치 못한 서비스 중단은 문제이며, 발생 원인, 영향 및 재발 방지를 위한 조치에 대해 설명하고자 함.

발생한 일

     * 2023년 12월에 새로운 호스팅 제공업체로의 이전을 포함한 주요 웹사이트 개편을 진행함.
     * 호스팅 제공업체가 IPv6를 기본적으로 지원하지 않아, IPv6 요청을 처리하기 위해 별도의 프록시를 운영함.
     * 이 구성은 호스팅 제공업체에 의해 '잘못된 설정'으로 간주되었고, 경고를 받았으나 자동 인증서 갱신을 방해할 것이라는 점을 인지하지 못함.
     * 인증서 만료를 확인하는 프로버가 있었지만 IPv6를 통해서만 확인하여, 프록시가 관리하는 유효한 인증서만을 확인함으로써 임박한 만료를 감지하지 못함.

영향

     * 대부분의 Tailscale 작업은 메인 웹사이트에 접근하지 않아도 되므로, 많은 사용자가 정상적인 사용에 차질을 겪지 않음.
     * 문서, 블로그 및 기타 참조 자료가 접근 불가능했으며, 관리 콘솔과 설정 페이지는 영향을 받지 않았지만, 직접 접속 방법을 모르는 사용자는 오프라인 상태로 오해할 수 있음.
     * 빠른 설치 스크립트가 접근 불가능하여 일부 설치(자동 설치 포함)에 방해가 됨.
     * Tailscale 패키지를 제공하는 도메인은 접근 가능했으며, Go의 go get 메커니즘을 통한 해결 방법은 캐싱 덕분에 최소화됨.

해결을 위한 조치

     * 문제를 파악한 후, '추가' AAAA 레코드를 일시적으로 제거하고 해당 인증서를 수동으로 갱신했음.
     * IPv6를 통한 사이트 및 서비스 접근성을 유지하고자 레코드를 복원함.
     * 단기적으로는 여러 개의 중복된 캘린더 알림과 수동 갱신을 위한 지정된 시간을 설정할 계획임.
     * 프로버 인프라를 업데이트하여 IPv4와 IPv6 엔드포인트를 별도로 확인하도록 할 예정임.
     * 웹사이트 인프라에서 IPv6를 더 직접적으로 지원함으로써 프록시를 불필요하게 만들기를 희망함.
     * Tailscale의 설계 덕분에 대부분의 사용자가 대부분의 용도로 이번 중단에 영향을 받지 않았음.

GN⁺의 의견

     * Tailscale의 서비스 중단 사례는 IT 인프라 관리의 중요성을 강조함. 특히, 인증서 갱신과 같은 기본적인 유지 관리 작업이 얼마나 중요한지를 보여줌.
     * 이 사건은 IPv6 지원의 중요성과 동시에 기존 인프라와의 호환성 문제를 해결하기 위한 창의적인 접근법이 필요함을 시사함.
     * 비슷한 기능을 제공하는 다른 서비스로는 Cloudflare, Let's Encrypt 등이 있으며, 이들은 자동 인증서 갱신 기능을 제공하여 유사한 문제를 방지할 수 있음.
     * 기술을 도입할 때는 인프라 호환성, 자동화 가능성, 그리고 유지 관리의 용이성을 고려해야 함. 이러한 사건은 기술 선택 시 득과 실을 신중하게 평가해야 하는 이유를 보여줌.
     * 이 기사는 사용자와 관리자에게 인증서 만료와 같은 기본적인 시스템 관리 작업에 대한 경각심을 일깨우는 데 도움이 될 수 있음.

        Hacker News 의견

     * 만료되는 인증서 문제

     만료되는 인증서가 새로운 DNS 장애의 원인이 되고 있음. Tailscale을 사용하여 어디서나 안전하게 작업할 수 있는 경험을 공유함. Tailscale을 통해 온프레미스 서버와 AWS 프로덕션 설정에 접근하며, 로컬 와이파이가 느려도 다른 위치에서 SSH를 통해 문제를 해결할 수 있음. Tailscale은 네트워크 접근 권한을 쉽게 부여하고 철회할 수 있는 기능을 제공함.
     * 인증서 만료로 인한 문제

     인증서 만료 문제가 다시 발생함. 사후 분석의 일환으로 마케팅 사이트와 고객 운영의 중요 경로를 분리하는 것을 권장함. GitHub이나 Zendesk 같은 사이트의 다운타임이 예상보다 흔하다는 점을 지적함.
     * 마케팅 사이트와 앱의 연결 문제

     마케팅 사이트에 앱 로그인 페이지 링크를 두어 발생한 문제를 공유함. 마케팅 사이트가 다운되면 사용자들이 앱도 다운된 것으로 오해할 수 있음을 깨달음. 사용자들은 제공된 경로를 따라가며 다른 경로의 존재를 모르는 경우가 많음.
     * 가격 정책에 대한 불만

     Tailscale의 서비스를 좋아하지만, VPN에 대한 적절한 접근 제어가 월 18달러라는 비싼 가격 때문에 경영진에게 판매하기 어려움. 낮은 등급의 서비스는 접근 제어 없이는 판매하기 어려움.
     * 웹사이트 제공업체에 대한 의문

     웹사이트의 제공업체가 누구인지, IPv6 지원이 없어 복잡한 절차를 거쳐야 하는지에 대한 의문을 제기함.
     * 엔지니어링 문화에 대한 칭찬

     12월에 주요 업데이트를 신뢰할 수 있는 CI/CD 및 모니터링 프로세스를 갖춘 것에 대해 부러움을 표함. 그러나 IPv6 설정 문제로 인증서 갱신에 실패한 것, 문제 해결에 90분이 걸린 이유, IPv6를 지원하는 DNS 제공업체로 이전하지 않은 이유 등에 대한 미해결 질문이 있음.
     * TLS 종료가 필요한 이유에 대한 의문

     프록시가 TLS를 종료할 필요가 있는지, 단순한 TCP 프록시로도 충분하지 않은지에 대한 의문을 제기함. TCP 프록시를 사용하면 자동 갱신이 가능할 수도 있음.
     * 캘린더 알림에 대한 풍자적 언급

     조상들처럼 여러 개의 중복된 캘린더 알림을 설정하는 것에 대한 재치 있는 표현을 좋아함.
     * 보안에 대한 우려

     Tailscale이 보안과 관련된 사소한 실수라도 한 번 하면, 약간의 편집증이 있는 사람들에게는 너무 위험할 수 있음을 지적함. 이에 대한 더 나은 해결책이 필요함.
     * 인프라 모니터링과 자동 갱신에 대한 제안

     인프라 모니터링이 있어야 하며, 모든 공개 도메인에 대해 IPv4와 IPv6를 연결하여 인증서 만료 19일 전에 경고하는 코드를 추가할 것을 제안함. 자동 갱신은 만료 20일 전에 설정함으로써 SSL 관련 중단을 방지할 수 있음.
"
"https://news.hada.io/topic?id=14107","Xzbot: xz 백도어를 위한 노트, 허니팟 및 익스플로잇 데모","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Xzbot: xz 백도어를 위한 노트, 허니팟 및 익스플로잇 데모

xz 백도어 탐색 (CVE-2024-3094)

     * honeypot: 가짜 취약 서버를 통해 침투 시도 탐지
     * ed448 patch: 자체 ED448 공개 키를 사용하도록 liblzma.so 패치
     * backdoor format: 백도어 페이로드 형식
     * backdoor demo: ED448 개인 키를 알고 있다고 가정하고 RCE를 트리거하는 CLI

honeypot

     * 공개 키 N이 백도어 형식과 일치하는 모든 연결 시도를 기록하는 간단한 openssh 패치 제공
     * 연결 시도는 sshd 로그에서 다음과 같이 나타남

ed448 patch

     * 백도어는 하드코딩된 ED448 공개 키를 사용하여 서명 검증 및 페이로드 복호화
     * 이 키를 자신의 것으로 교체하면 백도어를 트리거할 수 있음
     * 백도어가 포함된 libxzma 공유 객체를 다운로드하고 패치 스크립트를 실행하여 키 교체

backdoor format

     * SSH 인증서를 사용하여 연결하고 CA 서명 키 N 값에 페이로드를 포함시켜 백도어를 트리거할 수 있음
     * 이 페이로드는 공격자의 ED448 키로 암호화 및 서명되어야 함
     * 페이로드 구조는 명시된 형식을 따름

backdoor demo

     * 취약한 SSH 서버에 연결하고 id > /tmp/.xz 명령을 실행하는 방법 제공
     * 취약한 서버에서 system() 호출을 감시하고 명령이 실행되는 것을 관찰할 수 있음
     * 정상적인 sshd 프로세스 트리와 백도어를 통한 프로세스 트리는 다르게 보임

GN⁺의 의견

     * 이 기사는 CVE-2024-3094로 지정된 xz 백도어 취약점에 대한 심층적인 탐색을 다루고 있으며, 보안 연구원들과 시스템 관리자들에게 매우 유익한 정보를 제공함.
     * 백도어를 탐지하고 대응하는 방법을 제시함으로써, 취약한 시스템을 보호하는 데 도움이 될 수 있음.
     * 이러한 취약점은 시스템의 근본적인 보안 메커니즘을 우회할 수 있기 때문에, 소프트웨어 개발자와 보안 전문가들은 이러한 유형의 취약점을 이해하고 예방하기 위한 조치를 취해야 함.
     * 비슷한 기능을 제공하는 다른 보안 도구나 프로젝트로는 OpenSSH, Fail2Ban, Snort 등이 있으며, 이들은 시스템을 보호하기 위한 추가적인 방어층을 제공할 수 있음.
     * 이 기사는 새로운 취약점에 대한 기술적인 세부 사항을 제공하므로, 이를 통해 보안 커뮤니티가 더 강력한 방어 전략을 개발하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 공격자의 개인 키가 필요한 RCE(Remote Code Execution) 취약점에 대한 흥미로운 지적. 수정: 링크를 잘못 이해했으며, 원래 댓글을 기록으로 남김.
               o

     해당 취약점은 iron하게도 보안을 의식한 것으로 보임. 또한, 같은 메일 스레드에서 백도어를 커밋한 개인이 최근에 커널에도 기여한 것으로 나타남.
          + 해커 커뮤니티와 특히 amlweems가 POC(Proof of Concept)를 빠르게 구현하고 문서화한 것에 대한 감탄. 수정: 취약한 배포판을 찾는 방법과 SSH 서버에 대한 활동적인 프로빙을 모니터링하는 방법을 찾는 것이 다음 단계.
               o

     커뮤니티의 빠른 대응과 분석에 대한 칭찬.
          + PoC가 이상 행동을 감지하는 도구들(Carbon Black, AWS GuardDuty, SysDig 등)에 대해 시도된 적이 있는지, 그리고 이를 통해 빠르게 감지될 가능성에 대한 궁금증.
               o

     이상 행동 감지 도구들과의 PoC 테스트에 대한 호기심.
          + SSH 연결이 없어도 작동했는지에 대한 의문. GitHub에 있는 문자열 목록에 ""DISPLAY""와 ""WAYLAND_DISPLAY""가 포함되어 있음.
               o

     SSH와 직접적인 연관이 없는 문자열들의 존재로 인한 추가적인 영향 범위에 대한 추측.
          + 런타임에 openssh.patch를 필요로 하지 않고, 어떻게 liblzma.so.5.6.1이 메모리에 로드될 때 openssh_RSA_verify에 패치를 적용했는지에 대한 질문.
               o

     런타임에 취약점을 이용한 과정에 대한 기술적인 질문.
          + 성공적인 공격이 로그를 남기지 않는다는 점. 이로 인해 공격자가 로그를 남기지 않고 임의의 명령을 실행할 수 있었는지에 대한 질문.
               o

     로그 생성 없이 공격이 가능했던 점에 대한 우려.
          + xz, OpenSSH, Linux 프로젝트의 책임자들이 이 취약점에 대해 어떻게 대응했는지, 미래에 이러한 취약점을 방지할 수 있는 방법에 대한 의견.
               o

     프로젝트 책임자들의 대응과 미래의 예방책에 대한 관심.
          + 국가 차원의 스파이 활동과 백도어에 대한 논의. 미국은 하드웨어 개입을 선호하는 반면, 이스라엘과 같은 다른 나라들은 장기적인 소프트웨어 백도어에 초점을 맞춤.
               o

     국가별 백도어 전략에 대한 분석.
          + ED448 사용 이유에 대한 의문. 일반적으로 curve 25519가 권장됨에도 불구하고.
               o

     특정 암호화 알고리즘 선택에 대한 의문 제기.
"
"https://news.hada.io/topic?id=14200","2023년, 영광은 단 11MB/초 거리에","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2023년, 영광은 단 11MB/초 거리에

클라우드 비용에 대한 진실

     * 클라우드 서비스가 저렴하다는 인식이 있지만, 실제로는 사용자가 과도한 비용을 지불할 가능성이 있음.
     * AWS는 아마존의 대부분의 이익을 창출하지만, 이는 클라우드 서비스가 실제로 비싸다는 것을 의미할 수 있음.

첫 원칙에서의 계산

     * 상위 1000개 웹사이트 중 하나를 만들고자 한다면, 예를 들어 businessinsider.com처럼 월 200M 방문자와 400M 페이지 뷰가 필요함.
     * HTML 문서만으로 월 30TB의 대역폭이 필요하지만, 이는 초당 11MB에 불과하며, 이는 현대 하드웨어에서 매우 낮은 기준임.

지연 시간에 대한 이해

     * 빛의 속도로 볼 때 지구 반대편까지 왕복하는 데 약 200ms가 필요하지만, 실제로는 약 300ms가 걸림.
     * CDN을 사용하여 JS, CSS, 미디어를 전달하면, 서버 처리 시간을 300ms 줄여 사용자 옆에 서버를 두는 것과 같은 효과를 낼 수 있음.

엣지 기술의 한계

     * 엣지 기술은 두 번째 세대 서버리스 기술의 발전에도 불구하고 데이터베이스 문제를 해결하지 못함.
     * 대부분의 복잡한 페이지는 데이터베이스 쿼리가 필요하며, 이는 지연 시간을 증가시킬 수 있음.

비용에 대한 고려

     * Hetzner.com은 AWS EC2와 비교했을 때 훨씬 저렴한 서버와 대역폭 비용을 제공함.
     * 클라우드 벤더들은 초기에 무료로 많은 것을 제공하지만, 확장 시 비용이 크게 증가함.

현실적인 상황

     * 특정 사용 사례가 아니라면 대부분의 웹사이트나 SaaS는 단일 서버에서 실행될 수 있으며, 이는 더 저렴하고 유지 관리가 간단함.
     * SQLite를 로컬에서 사용하고, CDN을 통해 CSS, JS, 이미지를 캐시하며, 서버 렌더링을 통해 성능을 향상시킬 수 있음.
     * 복잡한 도커나 가상화 없이도 충분히 확장 가능하며, 관리가 더 쉽고 비용이 저렴함.

GN⁺의 의견

     * 이 기사는 클라우드 서비스의 비용 효율성에 대한 일반적인 믿음에 도전하며, 사용자들이 실제로 필요한 것보다 더 많은 비용을 지불하고 있을 수 있음을 지적함.
     * 클라우드 서비스의 비용 구조와 비교하여, 전통적인 단일 서버 호스팅이 여전히 유효한 대안일 수 있음을 보여줌.
     * 서버리스, 도커, 수평 확장성 등의 기술이 모든 상황에 필요한 것은 아니며, 때로는 더 단순한 접근 방식이 더 나은 성능과 비용 절감을 가져올 수 있음을 강조함.
     * 데이터베이스 최적화와 지역적 배치의 중요성을 강조하며, 이는 클라우드 서비스가 제공하는 것과 동일한 또는 더 나은 성능을 달성할 수 있음을 시사함.
     * 기술 선택 시 고려해야 할 사항으로는 실제 트래픽과 성능 요구 사항을 평가하고, 비용 대비 효율성을 고려하여 클라우드 대신 전통적인 서버 호스팅을 고려할 수 있음.

        Hacker News 의견

     * 호스팅 사업의 경험
          + 과거 호스팅 사업에서는 고객의 요구에 따라 복잡한 시스템을 제공했음.
          + AWS에 대응하기 위해 API 기반 클라우드 호스팅 플랫폼을 개발했으나, 2012년에 매출이 정점을 찍음.
          + 고객은 AWS 기반의 더 복잡한 솔루션을 원했고, 단순한 서버를 신뢰하지 않았음.
          + 회사는 부트스트랩 방식으로 운영되었고, AWS의 비용 위험을 감수할 필요성을 이해하지 못했음.
          + AWS는 소프트웨어 개발자 세대에 깊이 뿌리내린 '클레버니스'로 인해 선호됨.
     * 트래픽 분석의 오류
          + 트래픽은 균등하게 분포되지 않으며, 피크 시간에 대한 대역폭 요구가 평균치보다 훨씬 높음.
          + 실제 서비스에서는 TCP 및 TLS 연결 설정에 여러 번의 왕복이 필요하며, 사용자 경험에 대한 응답 시간이 중요함.
     * 서버 오류와 트래픽
          + 500 Internal Server Error는 서버가 예상보다 많은 트래픽을 처리하고 있음을 나타냄.
     * 서비스 확장에 대한 접근
          + 불필요한 확장을 피하고, 필요할 때만 구축하는 것이 바람직함.
          + 성능 문제가 발생하면 그때 대응하는 것이 좋음.
     * AWS의 이점
          + AWS를 사용하면 서비스 장애 시 변명의 여지를 제공함.
     * 클라우드 아키텍처에 대한 논의
          + 클라우드 아키텍처의 필요성과 관련된 논쟁이 아니라, 대안을 제시하기 위한 수단임.
          + 서버가 다운될 경우의 가용성 문제는 다른 방식으로 해결할 수 있음.
     * SQLite와 수직 확장
          + SQLite 대신 자체 호스팅된 Postgres를 사용할 수 있으며, 이는 더 많은 설정 노력을 요구함.
          + 전체 글로벌 상태를 메모리에 유지하고 디스크에 스냅샷을 저장하는 아키텍처가 가능함.
     * API와 SQLite 데이터베이스의 결합
          + SQLite는 단일 스레드에서 많은 쿼리를 처리할 수 있음.
          + API 측에서 메모리 캐싱을 사용하고, 정적 페이지에 대해서는 데이터베이스를 건너뛰어 성능을 향상시킬 수 있음.
     * 단일 서버의 가용성 문제
          + 단일 서버에서 서비스를 운영하면 계획되지 않은 다운타임이 발생할 수 있음.
          + 데이터 복구 시간과 데이터 손실량을 고려해야 함.
     * 클라우드로의 이동과 가용성
          + 클라우드로의 이동은 종종 동료 압력으로 느껴짐.
          + 가용성 측면에서 단일 서버는 위험할 수 있으며, CDN과 클라우드를 현명하게 혼합하여 사용하는 것이 좋음.
"
"https://news.hada.io/topic?id=14162","작은 스타트업에서 디자인 시스템 쉽게 구축하기 (feat.TailwindUI Catalyst)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          작은 스타트업에서 디자인 시스템 쉽게 구축하기 (feat.TailwindUI Catalyst)

  작은 스타트업에서 디자인 시스템 쉽게 구축하기

   노티플라이 개발팀은 스타트업에서 자주 직면하는 디자인 시스템 구축의 어려움을 해결하려고 Catalyst를 도입했음. 개발 리소스가 부족한 작은 팀에서 디자인 시스템을 효율적으로 만들기 위한 노티플라이의 경험을 공유하고 있음.

    디자인 시스템이 필요했던 이유

     * className의 중복 사용과 유지보수의 어려움
     * 일관성 없는 디자인으로 인한 사용자 경험 저하와 브랜드 신뢰성 위협

    Catalyst 선택 이유

     * TailwindCSS 기반으로 쉽게 디자인 시스템 구축 가능함
     * 기존 컴포넌트를 그대로 사용할 수 있어 도입이 용이함
     * 라이브러리 의존성이 없고 커스터마이징이 가능한 장점

    Catalyst 도입 효과

     * 개발 속도 향상과 디자인 변경에 드는 공수 감소됨
     * 최소한의 비용으로 빠른 구축이 가능했음

   스타트업에서 디자인 시스템을 도입하는 게 쉽지만은 않지만, Catalyst 같은 도구를 활용하면 적은 리소스로도 효과적인 디자인 시스템을 만들 수 있음.

   당연히 했어야 하는 걸 안 했던 것 같은데요...
   기업의 테크 블로그에 올리기엔 오히려 기술팀 이미지에 악영향을 줄 만한 내용인 듯 합니다.

   현실적이긴 한데, 템플릿을 활용하는게 디자인 시스템이라고 할 수 있나...? 라는 의문이 들긴하네요...!
"
"https://news.hada.io/topic?id=14144","HN 공개: 로컬에서 실행되는 'Perplexity' 클론을 제작하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 공개: 로컬에서 실행되는 'Perplexity' 클론을 제작하다

LLocalSearch란 무엇인가

     * 완전히 로컬에서 운영되는 검색 엔진으로, LLM 에이전트를 사용함.
     * 사용자가 질문을 하면 시스템이 LLM 체인을 사용해 답을 찾음.
     * 사용자는 에이전트의 진행 상황과 최종 답변을 볼 수 있음.
     * OpenAI나 Google API 키가 필요하지 않음.
     * 이제 후속 질문 기능이 추가됨: demo.mp4

특징

     * 🕵️ 완전히 로컬에서 작동하므로 API 키가 필요 없음.
     * 💸 ""저사양"" LLM 하드웨어에서 작동(데모 비디오는 7b 모델 사용).
     * 🤓 검색 과정을 더 잘 이해할 수 있도록 진행 로그 제공.
     * 🤔 후속 질문 가능.
     * 📱 모바일 친화적 인터페이스.
     * 🚀 Docker Compose를 사용하여 배포가 빠르고 쉬움.
     * 🌐 어떤 기기에서나 쉽게 접근할 수 있는 웹 인터페이스.
     * 💮 밝고 어두운 모드를 지원하는 수제 UI.

상태

     * 이 프로젝트는 아직 초기 단계임. 일부 버그가 있을 수 있음.

작동 원리

     * 가장 최신의 정보를 얻기 위해서는 infra 문서를 참조.

자체 호스팅 & 개발

    요구 사항

     * 컨테이너에서 접근할 수 있는 실행 중인 Ollama 서버.
     * GPU는 필수는 아니지만 권장됨.
     * Docker Compose

    최신 릴리스 실행

     * 이 프로젝트 개발 의도가 없다면 권장됨.
git clone https://github.com/nilsherzig/LLocalSearch.git
cd ./LLocalSearch
# 🔴 compose 파일 내의 환경 변수를 확인하고 ollama 서버의 host:port를 추가
docker-compose up 🎉

     * 이제 기본적으로 http://localhost:3000에서 웹 인터페이스를 열 수 있음.
     * 기본적으로 다른 것은 노출되지 않음.

    현재 git 버전 실행

     * 더 새로운 기능을 사용할 수 있지만, 안정성은 덜할 수 있음.
git clone https://github.com/nilsherzig/LLocalsearch.git
# 1. `docker-compose.dev.yaml` 내의 환경 변수를 반드시 확인.
# 2. 일반 compose 파일이 아닌 dev compose 파일을 확인했는지 확인.
# 3. 컨테이너를 빌드하고 서비스를 시작
make dev

     * make가 설치되어 있지 않다면 Makefile 내의 명령어를 수동으로 실행할 수 있음.
     * 이제 http://localhost:3000에서 프론트엔드에 접근할 수 있음.

GN⁺의 의견

     * LLocalSearch는 사용자의 개인 정보 보호를 중시하는 현대적인 검색 엔진의 대안으로서 주목할 만함. 사용자 데이터를 외부 서버에 전송하지 않고도 검색 기능을 제공함으로써, 개인 정보 보호에 대한 우려를 해소할 수 있음.
     * 이 프로젝트는 오픈소스 커뮤니티에서 개발자들에게 매력적인 기회를 제공함. 개발자들은 이 프로젝트에 기여함으로써 검색 엔진 기술에 대한 이해를 높이고, 자신의 포트폴리오를 강화할 수 있음.
     * 하지만 초기 단계의 프로젝트이므로 버그와 안정성 문제가 있을 수 있음. 이는 실제 사용 환경에서의 적용을 고려할 때 신중을 기해야 함을 의미함.
     * LLocalSearch가 성공적으로 발전한다면, 기존의 대형 검색 엔진에 대한 의존도를 줄이고, 검색 엔진 시장에 다양성을 더하는 계기가 될 수 있음.
     * 기술적인 측면에서 볼 때, LLM 에이전트를 사용한 검색은 매우 혁신적이지만, 이를 효과적으로 활용하기 위해서는 충분한 컴퓨팅 자원과 기술적 지식이 필요함.

        Hacker News 의견

     * 해커뉴스 댓글 모음 요약:
          +

     🤖 LLMs와 검색 엔진의 결합: LLMs가 검색 엔진에 접근하여 벡터 데이터베이스를 쿼리할 수 있는 시스템에 대한 설명. LLM이 초기화한 검색 쿼리에서 상위 n개 결과를 스크랩하여 벡터 데이터베이스에 작은 청크로 저장하고, LLM은 이 데이터베이스를 쿼리하여 관련 청크를 얻을 수 있음. 128k 컨텍스트 LLM이 모든 것을 요약하는 것만큼 포괄적이지는 않지만, 로컬 하드웨어에서는 훨씬 빠르고 자원을 적게 사용함. GitHub에서의 데모는 일반 소비자 GPU(amd rx 6700xt)에서 실행됨.
          +

     👍 아키텍처에 대한 칭찬: 기존 LLMs와 함께 사용할 계획이며, 로컬에서도 작동하는 것을 보게 되어 기쁨. 공유에 감사함을 표하며 아키텍처를 좋아함.
          +

     ❓ Perplexity와의 관련성 질문: 이 시스템이 Perplexity와 무슨 관련이 있는지, 대신 사용된 기본 모델에 대한 참조가 필요함을 지적함.
          +

     🌟 로컬 모델의 특별한 기능: 로컬 모델이 특수 모듈을 호출하는 것을 본 적이 없으며, 개인적으로 사용하는 로컬 7b open-hermes가 매우 좋다고 평가함.
          +

     🚀 기업용 내부 검색 엔진과의 연동 가능성: 아직 실행하지 않았지만 매우 유망해 보이며, 내부 기업 검색 엔진과 연결하여 사용하는 데 매우 유용할 것으로 생각함. 로컬 LLMs에 연결된 비 API 키 제품이 더 많이 만들어지는 것을 보게 되어 기쁨.
          +

     🛠️ 인프라 내 결정 과정에 대한 질문: '도구 사용 필요'와 '답을 찾음' 블록이 인프라 내에서 어떻게 결정되는지, 데모를 보면 결과 반환에 시간이 걸리는데, 검색, 벡터 저장소, 벡터 데이터베이스 검색 중 어느 단계에서 가장 많은 시간이 소요되는지에 대한 질문.
          +

     🕵️ 로컬 검색 엔진의 작동 원리: '로컬에서 실행되는 검색 엔진'이라고 하지만, 어떻게 사이트와 페이지를 찾아 인덱싱하는지에 대한 의문 제기.
          +

     🤫 Perplexity에 대한 비밀: Perplexity가 기성 모델을 사용하는 것 외에는 많은 것을 하지 않았다는 의견.
          +

     🏭 Perplexity의 챗봇 경쟁자: Perplexity가 챗봇 경쟁자로 보임.
          +

     ✨ Plandex와의 통합 제안: 오늘 공유된 Plandex와 연결하여 컴퓨터를 떠나지 않는 코드로 AI와 협업할 수 있는 도구를 만들면 놀라울 것이라는 제안.

   배경 지식: LLMs(Large Language Models)는 대규모 언어 모델로, 자연어 처리에 사용되며, 벡터 데이터베이스는 데이터를 벡터 형태로 저장하여 빠른 검색을 가능하게 하는 데이터베이스임. Perplexity는 자연어 처리 분야에서 모델의 성능을 평가하는 지표이기도 하지만, 여기서는 특정 제품이나 서비스를 지칭하는 것으로 보임.
"
"https://news.hada.io/topic?id=14120","Wireproxy: HTTP/SOCKS5 프록시로 제공되는 WireGuard 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Wireproxy: HTTP/SOCKS5 프록시로 제공되는 WireGuard 클라이언트

Wireproxy: Wireguard 클라이언트로서의 Socks5/HTTP 프록시 또는 터널

     * wireproxy는 완전히 사용자 공간에서 실행되는 애플리케이션으로, wireguard 피어에 연결하고 기계에 socks5/http 프록시 또는 터널을 제공함.
     * wireguard 피어를 통해 특정 사이트에 연결해야 하지만 네트워크 인터페이스를 새로 설정하는 데 번거로움을 겪고 싶지 않은 경우 유용함.

이것이 필요한 이유

     * 단순히 wireguard를 프록시로 사용하여 일부 트래픽을 전송하고 싶을 때.
     * wireguard 설정을 변경하기 위해 루트 권한을 원하지 않을 때.
     * 현재 사용자는 다른 국가의 wireguard 서버에 연결된 wireproxy를 실행하고, 특정 사이트에 대해 브라우저를 사용하도록 설정함.
     * wireproxy는 네트워크 인터페이스와 완전히 분리되어 있으며, 구성을 위해 루트 권한이 필요하지 않음.
     * Amnezia VPN 사용자는 @juev가 포크한 wireproxy 버전을 사용할 수 있음.

기능

     * 클라이언트와 서버를 위한 TCP 정적 라우팅
     * SOCKS5/HTTP 프록시(현재는 CONNECT만 지원)

할 일

     * SOCKS5에서 UDP 지원
     * UDP 정적 라우팅

사용법

./wireproxy -c [config 경로]

     * 사용자 공간 wireguard 클라이언트로 프록시 기능을 제공함.
     * -h는 도움말, -c는 설정 파일 경로, -s는 조용한 모드, -d는 백그라운드 실행, -v는 버전 출력, -n은 설정 파일의 유효성만 검사하는 모드임.

빌드 지침

git clone https://github.com/octeep/wireproxy
cd wireproxy
make

VPN과 함께 사용하기

     * MacOS에서 Firefox 컨테이너 탭과 자동 시작을 위한 wireproxy 사용 방법은 해당 링크에서 찾을 수 있음.

샘플 설정 파일

     * [Interface]와 [Peer] 설정은 wg-quick 설정과 동일한 의미와 구문을 따름.
     * TCPClientTunnel과 TCPServerTunnel은 각각 로컬 머신과 wireguard 네트워크에서 TCP 트래픽을 특정 대상으로 전달하는 터널임.
     * STDIOTunnel은 wireproxy 프로세스의 표준 입력과 출력을 wireguard를 통해 특정 TCP 대상과 연결하는 터널임.
     * Socks5와 http는 LAN에서 socks5 프록시와 http 프록시를 생성하고 모든 트래픽을 wireguard를 통해 라우팅함.
     * wireguard 설정이 이미 있는 경우, wireproxy 설정 파일에서 이를 가져올 수 있음.
     * 여러 피어를 지원하며, AllowedIPs는 wireproxy가 어떤 피어로 전달할지 알 수 있도록 지정해야 함.

GN⁺의 의견

     * wireproxy는 네트워크 설정에 대한 깊은 지식 없이도 VPN을 통한 안전한 인터넷 접속을 원하는 사용자에게 매우 유용할 수 있음.
     * 이 애플리케이션은 사용자가 시스템 레벨의 네트워크 설정 변경 없이도 특정 트래픽을 wireguard를 통해 라우팅할 수 있게 해주는 점에서 매력적임.
     * 그러나 사용자가 네트워크 보안에 대한 충분한 이해가 없다면, 잘못된 설정으로 인해 보안 취약점이 발생할 수 있으므로 주의가 필요함.
     * wireguard 기술을 도입할 때는 해당 지역의 법적 제약과 프라이버시 정책을 고려해야 하며, VPN 사용이 허용되는지 확인해야 함.
     * 비슷한 기능을 제공하는 다른 오픈소스 프로젝트로는 OpenVPN, SoftEther VPN 등이 있으며, 사용자는 자신의 요구 사항에 맞는 도구를 선택해야 함.

        Hacker News 의견

     * 유용한 작은 도구에 대한 토론
          + 한 사용자는 특정 Firefox 탭을 Wireguard를 사용하는 홈 라우터로 프록시하는 데 이 도구를 사용함. 이 도구는 애플리케이션 계층 프록시 프로토콜이나 SSH 없이도 작동함.
          + 다른 사용자는 Wireguard와 함께 사용하기 위해 soks를 선호함. 기존의 Wireguard 인터페이스를 재사용하며, 사용자는 자신의 블로그 포스트에서 이에 대해 자세히 설명함.
          + 또 다른 도구로는 onetun이 있음.
          + 한 사용자는 SSH 터널을 대체할 수 있는 도구로서, pproxy를 언급함. pproxy는 다양한 터널 프로토콜을 서로 변환하고 라우팅 기능을 제공함. 사용자는 SSH SOCKS5를 HTTP 프록시로 변환하는 데 사용함.
     * 다양한 프록시 클라이언트에 대한 정보
          + 여러 멀티 프로토콜 프록시 클라이언트가 이 기능을 지원함. 오픈 소스 예시로는 sing-box, clash-meta 및 기타 clash 기반 클라이언트, xray가 있음.
          + 폐쇄 소스 클라이언트로는 Surge Mac/iOS가 있음.
     * 사용자 공간 서버 구현에 대한 질문
          + 한 사용자는 tun/tap 장치 없이 완전히 사용자 공간에서 실행되는 서버 구현이 있는지 궁금해함. 이를 위해서는 어떤 종류의 사용자 공간 IP 스택이 필요할 것으로 추측함.
     * 특정 VPN 서비스를 위한 도구에 대한 추천
          + Mullvad VPN을 위한 도구로 mullvad-proxy를 사용한 좋은 경험을 공유함. Mullvad CLI 도구를 내장하고 있어 서버 전환을 쉽게 할 수 있으며, 호스트 기계와는 격리되어 있음. 또한 nginx와 몇 가지 스크립트로 구성되어 있어 SOCKS5 지원이 좋을 것으로 기대됨.
     * Go 언어로 작성된 도구에 대한 긍정적인 반응
          + 한 사용자는 Go 언어로 이와 같은 도구를 쉽게 작성할 수 있을 것이라고 생각했고, 실제로 그렇게 되어 있음을 발견함.
     * 개인적인 사용 사례에 대한 토론
          + 한 사용자는 이러한 도구를 사용하여 Thunderbird 이메일 연결을 Tailscale 출구 노드를 통해 프록시하고 싶다는 생각을 함. 이를 통해 모든 트래픽을 출구 노드로 리디렉션하지 않고도 이메일 연결만 프록시할 수 있음.
     * sing-box의 기능에 대한 언급
          + sing-box도 동일한 기능을 제공한다는 정보를 공유함.
"
"https://news.hada.io/topic?id=14155","Jpegli - 구글이 만든 새로운 JPEG 코딩 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Jpegli - 구글이 만든 새로운 JPEG 코딩 라이브러리

     * 고도의 호환성을 유지하면서 향상된 기능과 높은 품질 압축 설정에서 35%의 압축 비율 향상을 제공하는 새로운 JPEG 코딩 라이브러리임
     * 기존 JPEG보다 빠르고 효율적이며 시각적으로 더 만족스러운 이미지를 제공하도록 설계되었으며, 새로운 기술을 사용하여 이러한 목표를 달성
     * 완전히 상호 운용 가능한 인코더와 디코더를 제공하며, 원래 JPEG 표준과 가장 일반적인 8비트 형식을 준수하고, libjpeg-turbo 및 MozJPEG와 API/ABI 호환성을 가짐

Jpegli의 작동 원리

     * Jpegli는 JPEG XL 참조 구현에서 가져온 적응형 양자화 휴리스틱, 개선된 양자화 행렬 선택, 정밀한 중간 결과 계산, 더 진보된 색공간 사용 가능성 등 새로운 기술을 사용하여 노이즈를 줄이고 이미지 품질을 향상시킴
     * 적응형 양자화를 통해 심리시각 모델링에 기반한 양자화의 데드 존을 공간적으로 변조하여 이미지 품질을 향상시키고 파일 크기를 줄임
     * JPEG XL의 XYB 색공간을 사용하여 품질과 밀도를 더욱 향상시킬 수 있음

Jpegli 테스트

     * Jpegli의 이미지 품질 향상을 정량화하기 위해 Cloudinary Image Dataset '22에서 Jpegli, libjpeg-turbo, MozJPEG 세 가지 코덱을 사용하여 인코딩된 이미지 쌍을 비교하는 크라우드소싱 평가자들의 도움을 받음
     * 이 비교에서는 인코딩만 비교하고, 디코딩은 항상 libjpeg-turbo를 사용하여 수행함. 체스 랭킹에 영감을 받은 ELO 점수를 사용하여 코덱과 설정 간의 결과를 비교하기 쉽게 함
     * 더 높은 ELO 점수는 평가자 연구에서 더 나은 종합 성능을 나타냄. Jpegli는 2.8 BPP에서 libjpeg-turbo의 3.7 BPP보다 높은 ELO 등급을 받았으며, 이는 Jpegli의 비트레이트보다 32% 높은 것임

결과

     * Jpegli는 기존 JPEG 코덱보다 고품질 이미지를 35% 더 압축할 수 있음을 보여줌
     * Jpegli는 인터넷을 더 빠르고 아름답게 만들 수 있는 유망한 새로운 기술임

GN⁺의 의견

     * Jpegli는 웹 페이지의 로딩 속도를 개선하고 사용자 경험을 향상시킬 수 있는 혁신적인 기술로 보임. 이미지 압축은 웹 성능 최적화에서 중요한 요소이기 때문에, 이 라이브러리는 웹 개발자들에게 큰 도움이 될 것임.
     * 이 기술이 실제로 널리 채택되기 위해서는 기존의 웹 인프라와의 호환성과 통합이 중요한 과제가 될 것임. 특히, 기존의 이미지 처리 시스템과의 호환성이 중요한 요소가 될 것임.
     * Jpegli가 제공하는 10+ 비트 당 컴포넌트 인코딩은 이미지의 색상 그라데이션에서 더 세밀한 디테일을 제공할 수 있으나, 이를 지원하는 하드웨어와 소프트웨어의 확산이 필요함.
     * 이미지 압축 기술의 발전은 데이터 사용량과 저장 공간을 절약하는 측면에서도 환경적인 이점을 제공할 수 있음. 이는 특히 대용량 이미지가 많이 사용되는 서비스에서 두드러질 것임.
     * 비판적인 시각에서 볼 때, Jpegli의 성공은 기술적 우수성뿐만 아니라 시장에서의 채택과 표준화 과정에서의 경쟁에도 달려 있음. 이미 많은 JPEG 압축 라이브러리와 표준이 존재하기 때문에, Jpegli가 시장에서 돋보이기 위해서는 명확한 이점을 제시해야 할 것임.

        Hacker News 의견

     * JPEGLI 프로젝트
          + JPEGLI는 스위스 독일 방언에서 사용되는 '-li' 접미사를 사용하여 작은 JPEG 이미지를 의미함. 이 접미사는 단어에 '-li'를 추가하여 물체의 작음과 친근함을 전달함.
          + 구글 취리히에서 시작된 것으로 보임.
          + 스위스 독일어를 사용하는 다른 주목할 만한 구글 프로젝트들:
               o Gipfeli: 고속 압축을 위한 프로젝트로, 크루아상을 의미함.
               o Guetzli: 지각적 JPEG 인코더로, 쿠키를 의미함.
               o Weggli: 의미 검색 도구로, 빵뭉치를 의미함.
               o Brotli: 손실 없는 압축을 위한 프로젝트로, 작은 빵을 의미함.
     * JPEGLI의 잠재적 영향
          + JPEGLI의 주장은 WebP의 손실 압축과 관련하여 더 이상 필요하지 않게 만드는 것처럼 보임.
          + JPEG 대비 WebP와 유사한 압축 추정치가 제시됨.
          + AVIF의 가치에 대해서도 의문을 제기함. AVIF는 더 높은 압축률을 가지지만, 기본적인 사용에만 적합한 제한적인 이미지 포맷이며, 인코딩과 디코딩이 매우 느리고 스트리밍 디코더가 없어 전체 AVIF를 다운로드해야만 디코딩을 시작할 수 있음.
          + JPEG XL은 인터넷 사용에 적합한 스트리밍 디코더와 모바일 네트워크를 위한 점진적 디코딩 지원을 포함하여 JPEG/JPEGLI보다 훨씬 더 많은 범위를 커버하기 때문에 여전히 가치가 있음.
     * JPEGLI의 이미지 품질 평가 방법
          + JPEGLI의 이미지 품질 개선을 정량화하기 위해 Cloudinary Image Dataset '22에서 JPEGLI, libjpeg-turbo, MozJPEG 세 가지 코덱을 사용하여 여러 비트레이트로 인코딩된 이미지 쌍을 비교하는 크라우드소싱 평가자들의 도움을 받음.
          + 이미지 품질을 평가하는 방법에 대한 비판이 있음. 인간은 원본 이미지의 왜곡인 더 높은 채도의 색상을 선호하는 경향이 있을 수 있음.
          + 더 공정한 평가를 위해서는 원본 이미지를 기반으로 어떤 이미지가 더 잘 나타내는지를 선택하도록 해야 하며, 'A', 'B', '확실하지 않음'을 답변으로 허용해야 함.
          + ELO 순위 시스템이 적절하지 않을 수 있으며, 어떤 이미지가 어떤 접근 방식이 더 나은지 결정하는 데 가장 영향력 있는지와 그 이유에 대한 분석이 필요함.
     * JPEGLI의 성능
          + 낮은 비트레이트에서 경쟁력이 떨어지는 것으로 보임.
          + MozJPEG 품질 60으로 이미지를 인코딩하는 프로젝트에서 JPEGLI로 전환을 시도했을 때, 비슷한 파일 크기를 생성하기 위해 조정했음에도 불구하고 JPEGLI 이미지가 일관되게 더 나쁜 결과를 보임.
     * Elo 평가 시스템의 사용
          + 이미지 품질을 평가하기 위해 Elo 평가 시스템을 어떻게 사용했는지 저자들이 설명해주면 도움이 될 것임.
          + 이미지가 다른 이미지보다 더 나은 것으로 평가되면 '승리'로 간주되는지 추측됨.
          + 'ELO' 대신 'Elo'라고 쓰는 것이 올바르며, 이는 약어가 아닌 사람의 이름임.
     * JPEGLI의 기술적 세부사항
          + JPEGLI는 10비트 이상의 컴포넌트로 인코딩될 수 있음.
          + 추가 비트가 어떻게 인코딩되는지, 이것이 JPEG_R/""Ultra HDR"" 포맷인지, 아니면 구글이 새로운 메타데이터 솔루션을 개발했는지에 대한 질문이 있음.
     * JPEGLI의 결과 품질
          + JPEGLI를 통해 압축하거나 해제할 때 더 정밀하고 심리시각적으로 효과적인 계산이 수행되어 이미지가 더 선명해지고 관찰 가능한 아티팩트가 적어짐.
          + 이 개선을 보여주는 예제 이미지에 대한 링크가 있는지 질문이 있음.
     * JPEGLI의 실용성
          + libjpeg-turbo 대신 JPEGLI를 사용할 때, 동일한 입력 비트맵과 품질 설정으로 JPEGLI가 생성하는 출력물이 더 작거나 더 아름다울 것인지, 또는 둘 다일 것인지에 대한 질문이 있음.
          + 공간 절약이 JPEGLI 인코더가 더 낮은 품질 설정에서 비슷하거나 더 나은 이미지를 생성할 수 있기 때문인지 이해하고 싶어함.
     * JPEGLI의 향후 적용
          + ImageOptim에서 곧 JPEGLI를 사용할 수 있을 것으로 기대함.
     * 구글의 전략에 대한 의견
          + 구글이 JPEG XL 대신 AVIF를 Chrome에 구현하지 않기 위해 무엇이든 할 것 같음.
          + JPEG만을 소비하는 사용자들이 수십 년 동안 존재할 것이므로 여전히 가치가 있음을 인식하면서도, 구글이 큰 회사임에도 불구하고 이러한 전략에 대한 시각이 있음.
"
"https://news.hada.io/topic?id=14170","FFmpeg 7.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             FFmpeg 7.0 출시

     * FFmpeg 7.0 ""Dijkstra"" 버전 출시
     * 주요 변경 사항으로는 실험적인 VVC 디코더, IAMF 지원, 멀티스레드 ffmpeg CLI 도구 등이 있음
     * 이전 버전과의 호환성이 없으며, 6.0 이전에 사용되지 않던 API가 제거됨
     * 라이브러리 사용자에게 가장 큰 변화는 오래된 비트마스크 기반 채널 레이아웃 API가 AVChannelLayout API로 대체되는 것
     * C11 호환 컴파일러가 코드 빌드에 필요함
     * 새로운 포맷과 코덱, 필터, API, 버그 수정 등 다양한 기능이 추가됨

GN⁺의 의견

     * FFmpeg는 멀티미디어 처리에 있어 가장 중요한 오픈소스 프로젝트 중 하나로, 다양한 오디오 및 비디오 포맷을 지원하고 변환할 수 있는 강력한 도구임.
     * 새로운 버전에서는 특히 멀티스레드 지원과 하드웨어 가속 기능이 강화되어, 고성능 멀티미디어 처리가 가능해짐.
     * FFmpeg의 주요 릴리스는 API 변경이 포함되어 있어, 기존 시스템과의 호환성을 확인하고 업데이트하는 과정이 필요함.
     * FFmpeg의 지속적인 발전은 멀티미디어 콘텐츠 제작자와 개발자에게 더욱 향상된 도구를 제공하며, 이는 창의적인 콘텐츠 제작과 기술 혁신을 촉진할 것임.

        Hacker News 의견

     * FFmpeg은 놀라운 소프트웨어임. 2000년대 초 윈도우 사용자로서, 당시의 장치들은 오늘날보다 특정 비디오 코덱을 지원하는 데 있어 훨씬 까다로웠음. 11살이었던 나는 DivX .avi 파일을 iPod Video에서 재생할 수 있는 MP4로 변환하는 것이 결코 쉬운 일이 아니었음. FFmpeg을 발견하고 무료로 제공되는 것을 보고, 그 전에는 열악한 셰어웨어 속에서만 찾을 수 있었던 것을 발견한 것은 진정한 전환점이었음. 20년이 지난 지금도 여전히 자주 사용하는 훌륭한 도구임.*
     * 최근 FFmpeg에 추가된 가장 훌륭한 기능은 대규모 언어 모델이 ""오디오 파일을 비디오 파일에 혼합하는 FFmpeg 명령어""를 실제로 실행 가능한 FFmpeg 명령어로 번역해주는 것임. 물론 여기서는 장난스럽게 말하는 것임. FFmpeg은 훌륭함. 하지만 연간 약 12번의 FFmpeg 명령어를 쉽고 빠르게 실행할 수 있게 도와주는 AI 비서가 필요했음.*
     * FFmpeg을 일반 사람들에게 더 유용하게 만들 수 있는 낮은 단계의 개선점이 있음. 수많은 끔찍한 웹사이트들이 파일 변환 서비스를 제공하고 있으나, 이들은 광고로 가득 차 있고, 개인정보 보호/보안 상태가 불분명함. 사용자들이 파일을 제3자에게 업로드할 필요가 없을 때, 그들이 기술적인 소프트웨어를 다운로드하는 것은 어려움이 있음 - 그리고 그들이 이를 불신하는 것은 옳음. 그러나 이미 Netlify에서 호스팅되고 있는 WASM 버전의 FFmpeg이 있음 [1]. 이것은 WASM 번들을 브라우저로 다운로드하고, 브라우저 내에서 원하는 대로 변환/변형을 실행할 수 있게 해줌. 모래상자화되어 있고 꽤 성능도 좋음! 이 도구가 a) 정기적으로 업데이트되고 b) 일상 사용자를 위한 더 나은, 비-CLI 사용자 인터페이스를 가지며 c) 쉽게 구글에서 찾을 수 있는 도메인 이름에 접근
       가능하다면, 위에서 언급한 모든 문제를 해결할 수 있을 것임. [1]: https://ffmpegwasm.netlify.app/*
     * 오늘 vcpkg를 통해 FFmpeg을 빌드하려고 시도했는데, 여러 의존성이 liblzma에 간접적으로 의존하고 있었으나, 최근 xz 백도어 사건에 따라 GitHub에서 liblzma 소스의 다운로드가 비활성화되었음.*
     * 몇 년 동안 xstack 필터를 사용해왔음. 여러 짧은 비디오 세그먼트를 가져와서 4개의 세그먼트로 연결한 다음(예: 길이가 다양한 23+24+26+27), 2x2 모자이크 비디오로 xstack을 함. 이전에는 단일 단계로 수행했지만, 이제는 조언을 받아 4개의 연결 단계와 1개의 xstack 단계로 수행함. 어느 것이 더 빠른지 프로파일링/시간 측정을 하지 않았지만, 꽤 잘 작동함, 비록 많은 다양한 이상한 경고들이 종종 발생하기는 함.*
     * rust-ffmpeg은 이미 7.0을 지원하는 것으로 보임: https://github.com/zmwangx/rust-ffmpeg/pull/178*
     * FFmpeg은 배우기가 매우 어렵지만, 일단 익히고 나면 사용하기 매우 즐거움. YouTube 비디오를 만들면서 Demon's Souls를 플레이하고, 아이템 장착 여부를 동전 던지기로 결정하는데, 화면에 동전 던지기 애니메이션과 사운드 효과를 추가하고 싶었음. 노력 끝에 투명한 프레임 세트를 만들었고, FFmpeg의 filter_complex를 사용하여 이미지 시퀀스를 비디오 스트림으로 추가하고, 원본 비디오 위에 오버레이하고, 사운드 효과를 추가함. 이는 기존의 자막, 오디오 채널 병합, 비디오 크기 조정/압축 등을 포함하여 단일(긴!) FFmpeg CLI 명령어로 모두 수행됨. FFmpeg은 FOSS의 진정한 경이로움 중 하나임.*
     * 한편, MacPorts에서 기본 FFmpeg은 버전 4.4.4 [1]임. ffmpeg6이라는 것도 있으며, 이는 버전 6.1.1임. [2] [1]: https://ports.macports.org/port/ffmpeg/ [2]: https://ports.macports.org/port/ffmpeg6/*
     * MPEG-5 EVC가 포함된 것에 놀랐음. 불행히도 VVC 디코더는 (공식적으로는) 포함되지 않았음. 아마도 버전 7.1까지 기다려야 할 것 같음. 여전히 x266을 기다리고 있음.*
"
"https://news.hada.io/topic?id=14181","실리콘 그래픽스의 부상과 몰락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            실리콘 그래픽스의 부상과 몰락

실리콘 그래픽스의 부상과 몰락

     * 제임스 헨리 클라크는 1944년 3월 23일 텍사스 주 플레인뷰에서 태어남.
     * 클라크의 가정은 부유하지 않았으며, 아버지는 일자리를 유지하지 못했고 어머니는 월 225달러를 벌었음.
     * 클라크는 고등학교 시절 반항적이었으며, 결국 학교를 그만두고 미 해군에 입대함.
     * 클라크는 해군에서 전자공학을 배우며 자신의 삶을 개선하기로 결심함.
     * 클라크는 튤레인 대학에 입학한 후 뉴올리언스 대학에서 물리학 학사와 석사 학위를 받고, 유타 대학에서 컴퓨터 과학 박사학위를 취득함.
     * 그는 UC 산타크루즈에서 조교수로 일한 후, 1979년 스탠퍼드 대학의 부교수가 됨.
     * 스탠퍼드에서 클라크는 제록스 PARC와 협력하여 3차원 그래픽스를 개발하는 프로젝트에 참여함.
     * 이로 인해 '지오메트리 엔진'이라는 특수 목적 마이크로프로세서가 탄생함.
     * 지오메트리 엔진은 GPU의 발명으로 이어짐.
     * 클라크는 1981년 11월 9일 실리콘 그래픽스 인크(SGI)를 설립하고, 1982년 초에 스탠퍼드를 떠나 회사를 전업으로 운영하기 시작함.
     * SGI는 초기에 고객들의 요구를 반영하여 워크스테이션을 개발함.
     * SGI의 첫 제품은 1983년 11월에 출시된 IRIS 1000이었으며, 이후 여러 모델이 출시됨.
     * SGI 하드웨어는 소프트웨어 개발자들에 의해 그래픽 능력을 최대한 활용되었음.
     * 클라크는 자유로운 경영 스타일을 가졌으며, 이는 회사 내부에서 두 가지 서로 다른 해석을 낳음.
     * 결국 에드 맥크랙켄이 CEO로 영입됨.
     * SGI는 1985년 IRIS 2000 시리즈를 출시하며 RISC 기반의 프로페셔널 아이리스를 선보임.
     * 이 시리즈는 MIPS R2000 CPU를 기반으로 하고 있었음.
     * SGI는 1986년에 컨트롤 데이터 코퍼레이션(CDC)과 협력하여 IRIS 기계를 CDC 브랜드로 재판매하기로 합의함.
     * 1988년에는 IBM이 SGI의 그래픽 카드와 소프트웨어 라이브러리를 RS/6000 POWERStation에 사용하기 위해 라이선스를 구매함.
     * SGI는 고성능 그래픽 워크스테이션 시장을 장악하고 있었으나, 보급형 시장으로의 진출은 개인용 아이리스 라인업으로 시작됨.
     * 이 라인업은 MIPS R2000 CPU를 사용하고 있었음.
     * SGI는 1991년부터 1995년까지 가장 유명하고 사랑받는 시스템인 인디고, 인디고 2, 인디를 출시함.
     * 이 시스템들은 영화 ""The Abyss"", ""Terminator 2"", ""Jurassic Park"" 등에 사용됨.
     * SGI는 1992년 MIPS 컴퓨터 시스템을 인수하며, 이는 SGI에게 부품 공급을 보장함.
     * 1992년에는 OpenGL을 출시하여 2D 및 3D 그래픽스를 위한 크로스 플랫폼 API를 제공함.
     * 1996년에는 크레이 리서치를 인수하여 고성능 컴퓨팅 시장의 약 40%를 통제함.
     * SGI는 1996년 O2 및 O2+ 시리즈를 출시하며, 이 시스템들은 통합 메모리 구조를 사용함.
     * 1997년에는 옥탄을 출시하여 중급 워크스테이션에 온닉스 2 시리즈의 기술을 도입함.
     * 그러나 SGI는 1997년에 손실을 기록하고, 맥크랙켄이 사임한 후 리처드 벨루조가 CEO로 취임함.
     * SGI는 1998년에 구조 조정을 단행하고, MIPS 테크놀로지스를 별도의 법인으로 분리하며, Itanium으로의 이전을 발표함.
     * 이러한 변화에도 불구하고 회사의 방향은 바뀌지 않았고, 매출은 감소하고 손실은 증가함.

GN⁺의 의견

     * 실리콘 그래픽스의 역사는 컴퓨터 그래픽스의 발전과 밀접하게 연결되어 있으며, 이 회사의 부상과 몰락은 기술 산업의 변화무쌍한 특성을 잘 보여줌.
     * SGI의 초기 성공은 혁신적인 기술과 시장의 요구에 부응하는 제품 개발 전략에서 비롯되었으나, 경영진의 변화와 전략적 실수가 회사의 몰락을 가속화함.
     * SGI의 OpenGL과 같은 기술은 오늘날에도 여전히 중요하며, 이러한 기술의 개발과 표준화는 현대 컴퓨팅 환경에 지대한 영향을 미침.
     * SGI의 사례는 기술 회사가 시장의 변화에 어떻게 적응해야 하는지, 그리고 혁신이 지속적으로 필요함을 상기시켜줌.
     * 이 기사는 컴퓨터 역사에 관심 있는 사람들에게 흥미로운 정보를 제공하며, 기술 기업의 성장과 위기 관리에 대한 중요한 교훈을 담고 있음.

        Hacker News 의견

     * SGI의 몰락에 대한 인식
          + SGI가 저렴한 하드웨어에 놀랐다는 의견이 있지만, SGI는 '혁신자의 딜레마'라는 책을 통해 상황을 인지하고 있었음. 고가 제품을 만드는 회사가 저렴하지만 해마다 발전하는 경쟁자에게 시장을 빼앗기는 상황이었지만, 이를 대응하는 데 실패함.
     * SGI에서의 꿈과 현실
          + 한 엔지니어는 SGI에서 인턴과 정규직으로 근무했으며, SGI는 꿈의 회사였음. 하지만 고급 하드웨어와 IRIX 운영 체제에도 불구하고, 회사는 대규모 해고를 단행하며 꿈은 오래가지 않음.
     * SGI에 대한 추억
          + 한 학생은 SGI의 기계와 운영 체제에 매료되었으나, 자신이 컴퓨터 과학에서 뛰어나지 않다고 생각해 대학원으로 진학함. 후에 SGI의 고성능 컴퓨터를 사용하며 리눅스로 코드를 이식하는 작업을 하였고, SGI가 경쟁에 직면하는 모습을 목격함.
     * SGI의 기술적 매력
          + 한 사용자는 SGI의 Octane 컴퓨터에 감탄하며, 당시의 사용자 인터페이스가 현대의 UI보다 반응성이 좋았다고 회상함. 또한, SGI의 기업 인수와 변화 과정에 대해서도 언급함.
     * SGI 기술의 영향
          + SGI의 기술이 nVidia의 창립에 영향을 미쳤으며, SGI가 nVidia를 위협으로 보지 않아 소송을 적극적으로 추진하지 않았다는 의견이 있음.
     * SGI에서의 경험
          + 한 시스템 엔지니어는 SGI에서 근무하며 회사의 분위기와 파티 문화를 경험함. 회사의 변화에 따라 자신의 역할이 종료되었음을 언급함.
     * SGI 컴퓨터의 인상적인 외관
          + 한 사용자는 SGI 컴퓨터가 방문객을 감동시키기 위해 전시되었던 것을 기억하며, 컴퓨터의 색상이 실제와 다르게 기억된다고 말함.
     * SGI의 역사적 중요성
          + SGI가 워크스테이션 컴퓨터의 표준이 되어야 했다고 느끼는 사용자가 있으며, Irix 운영 체제와 4Dwm 사용자 인터페이스를 칭찬함.
     * SGI 캠퍼스에서의 경험
          + 한 컨설턴트는 SGI 캠퍼스에서 근무하며 회사 내부의 체육 대회에 참여하고, 카페테리아의 품질을 높이 평가함.
"
"https://news.hada.io/topic?id=14164","독일 주정부, 마이크로소프트를 버리고 리눅스와 리브레오피스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  독일 주정부, 마이크로소프트를 버리고 리눅스와 리브레오피스로 전환

독일 주정부, 마이크로소프트를 버리고 리눅스와 리브레오피스로 전환

     * 독일 쉴레스비히-홀슈타인 주가 비용, 보안, 디지털 주권을 이유로 마이크로소프트의 소프트웨어 대신 리눅스와 리브레오피스를 선택함.
     * 주정부는 약 3만 명의 직원을 위한 IT 작업 환경을 자유롭고 오픈소스 시스템으로 전환할 계획임.
     * 디지털 주권은 시민의 데이터를 외국 기업에 의해 수집되는 것을 방지하고 유럽 기술 기업이 미국 및 중국 경쟁사와 경쟁할 수 있도록 하는 것을 의미함.

디지털 주권의 중요성

     * 공공 행정이 폐쇄적이고 수정할 수 없는 소프트웨어를 사용하면 사용자 데이터가 어떻게 처리되는지 알기 어려움.
     * 유럽 정부들은 마이크로소프트가 디지털 주권 요구 사항을 충족하려고 하지만, 그들을 완전히 신뢰하지는 않음.

비용 절감과 보안 향상

     * 오픈소스 소프트웨어 사용은 IT 보안, 비용 효율성, 데이터 보호 및 다양한 시스템 간의 원활한 협업 측면에서 이점이 있음.
     * 마이크로소프트 오피스는 리브레오피스로, 윈도우는 아직 결정되지 않은 리눅스 데스크톱 배포판으로 교체될 예정임.
     * 쉐어포인트와 익스체인지/아웃룩은 넥스트클라우드, 오픈 엑스체인지/썬더버드, 유니벤션 액티브 디렉토리 커넥터로 대체될 계획임.

기타 유럽 및 중국의 리눅스 전환 사례

     * 뮌헨은 2004년에 윈도우에서 리눅스로 전환했으나, 시장의 의지로 인해 다시 윈도우로 돌아옴.
     * 중국은 마지막 몇 대의 정부 PC에서 윈도우를 제거하고 주로 카일린 리눅스를 사용하는 시스템으로 교체함.

GN⁺의 의견

     * 이러한 전환은 오픈소스 소프트웨어의 실질적인 채택을 보여주며, 다른 정부 기관들에게도 영감을 줄 수 있음.
     * 데이터 주권과 보안에 대한 관심이 높아지면서, 기술의 독립성을 추구하는 움직임이 증가하고 있음을 시사함.
     * 오픈소스 소프트웨어의 채택은 초기 설정과 유지 관리에 있어서 전문 지식을 필요로 하므로, 이러한 전환은 적절한 기술 지원과 교육이 수반되어야 함.
     * 리눅스와 리브레오피스 같은 오픈소스 솔루션은 사용자에게 더 많은 제어권과 맞춤화 옵션을 제공하지만, 사용자 경험과 호환성 측면에서 기존의 상용 소프트웨어에 익숙한 사용자들에게는 도전이 될 수 있음.
     * 이러한 결정은 유럽 내에서 기술적 자주성을 강화하고자 하는 광범위한 움직임의 일부로, 유럽 기업들이 글로벌 시장에서 경쟁력을 갖추는 데 기여할 수 있음.

        Hacker News 의견

     * 독일에서 지난 10년 이상 비슷한 뉴스가 종종 나왔음을 기억함. 최근 몇 년 동안 마이크로소프트가 도입한 변화들, 특히 모든 사용자가 마이크로소프트 계정으로 로그인하도록 강제하고 클래식 데스크톱 앱에서 웹 앱으로의 이동 때문에, 이번에는 LibreOffice가 대안이 될 것이라고 거의 믿게 됨. 보수적인 사용자와 아마도 독일 국가 기관들은 클래식 데스크톱 앱과 웹 앱을 서로 다른 작업을 위한 도구로 간주하며, 데스크톱이 클라우드에 의존하는 것을 원하지 않음. 논의가 시작된 이래로 LibreOffice가 훨씬 나아졌다는 점도 언급할 가치가 있음.
     * 구글 문서도구가 있는 세상에서 누가 왜 MS 오피스와 같은 무거운 소프트웨어를 다루고 싶어할지 이해하기 어려움. 최근 5년 동안 현대 버전의 워드를 사용하지 않은 노인 친척을 도와줬는데, 새 컴퓨터에 MS 오피스 구독을 해줬음. 해당 사용자는 MS 워드가 저장했다고 확신한 파일을 찾지 못해 약 4시간 동안의 작업을 세 번이나 다시 시작해야 했음. 파일은 실제로 클라우드에 저장되었지만 사용자가 이해할 수 없을 정도로 불투명하게 만들어졌음. 기술 전문가인 나도 이 상황을 파악하는 데 5분이 걸림.
     * 독일 화이팅! 내가 일하는 디젤 수리점에서 경영진을 설득해 MS 오피스에서 LibreOffice로 전환함. 이제 우리의 90% 작업이 기본적으로 LibreOffice를 사용하며, 전체 오피스 스위트를 사용하는 사용자는 회계 부서의 두 명뿐임. BOM, 라벨, 봉투, 인보이스를 LibreOffice로 인쇄하며, MS 오피스에 비해 빠르게 실행되고 절대 충돌하지 않음.
     * 현재 해야 할 해가 어느 해인지, 아직도 Slashdot에 글을 올리고 있는 것인지, 리눅스 데스크톱이 일반인들에게 통용될 해가 드디어 온 것인지 궁금함. 뮌헨이 이를 시도했을 때 대다수의 데스크톱에는 도달하지 못했으며, 최대 40%대에 머물렀던 기억이 남. 이제 또 다시 더 가난한 독일 주에서 다시 시도하려 함.
     * 현재 및 과거 고용주는 대규모 기업 플릿 관리가 더 쉽다는 이유로 마이크로소프트를 전적으로 사용함. 리눅스와 맥 기계는 예외로 취급됨. 맥에서 소프트웨어가 필요하면 보안 문제에 대한 책임을 인정하는 서약서에 서명해야 함. 회사에서 제공하는 윈도우 랩톱의 경우 IT 부서가 위험을 책임짐.
     * 뮌헨이 LiMux 프로젝트로 전환했을 때, 마이크로소프트 독일 본사가 뮌헨으로 이전하면서 모든 것이 다시 윈도우로 돌아갔던 것처럼 얼마나 오래 걸릴지 지켜봐야 함.
     * LibreOffice를 몇 년에 걸쳐 주기적으로 시도해봤지만, 항상 MS 오피스로 돌아가게 만드는 것은 MS가 사용자 인터페이스의 세부 사항에 신경 쓴 결과임. LibreOffice를 사용할 때 반응성 부족이 바로 눈에 띄며, 실제로 소프트웨어 사용을 육체적으로 힘들게 만듦. 큰 스프레드시트를 다시 계산하는 데 걸리는 시간이 10배 또는 심지어 100배 차이가 남.
     * 왜인지? 쉴레스비히-홀슈타인 주는 비용, 보안, 디지털 주권을 이유로 들고 있음. 이전에도 시도되었고 비용은 항상 더 높았음. 하지만 비용의 문제가 아님. 이성과 책임은 특정 기관과 정부가 자신들의 데이터를 소유해야 함을 의무화해야 함. 회사들도 자신들의 데이터를 계속 소유하거나 다시 소유하려고 노력하는 것이 현명함. 우리 모두는 ""개인"" Github 저장소에서 무슨 일이 일어났는지 보았음. Github 직원들의 접근은 없지만, AI 봇에 의해 접근이 있었다고 인정함. 일부러인지 우연인지는 기억나지 않고 중요하지도 않음. 클라우드를 사용한다면 적어도 진정한 E2E 암호화를 사용해야 함. 클라우드는 강력한 E2E 암호화된 블록과 메타데이터만을 보유해야 함. 신뢰할 수 있다고 생각되는 제공업체가 있음. 내가 다니는 매우 큰 회사는 마이크로소프트에
       항복함. 모든 것이 Office 365와 Azure에 있음. IT 부서는 모든 데이터가 E2E 암호화되어 마이크로소프트가 어떤 상황에서도 읽을 수 없다고 자랑스럽게 말함. 그런데 어떻게 Bing에서 업무용 파워포인트와 워드 문서의 내용을 검색할 수 있는지? 동료가 분류 수준이 정해지기 전에 이 방법으로 비밀 프로젝트 정보를 발견함. E2E 암호화에 대해 뭔가 놓치고 있는 건지, 아니면 우리 IT가 그렇게 멍청하고 순진한 건지? 최근 IT는 우리가 곧 Copilot을 사용할 수 있다고 자랑스럽게 발표함.
     * 다음과 같은 말이 무슨 뜻인지 누군가 설명해줄 수 있음: ""다른 나라들, 특히 중국은 윈도우에서 리눅스로 전환할 때 훨씬 더 완고하다는 속담이 있다."" 속담? 시간을 절약하는 스티치. 많은 손이 가벼운 일을 만듦. ""윈도우에서 리눅스로 기어를 바꿀 때 훨씬 더 완고하다""는 속담을 보여줄 수 있는 사람, 제발.
"
"https://news.hada.io/topic?id=14114","마이크로소프트와 OpenAI, 1000억 달러 규모의 슈퍼컴퓨터 "Stargate AI" 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          마이크로소프트와 OpenAI, 1000억 달러 규모의 슈퍼컴퓨터 ""Stargate AI"" 계획

2028년 AI 데이터 센터 계획의 일환으로 슈퍼컴퓨터 ""Stargate"" 계획됨

     * The Information의 보고서에 따르면, Microsoft와 OpenAI가 2028년까지 1000억 달러에 달하는 대규모 인공지능 슈퍼컴퓨터 ""Stargate""를 출시하는 것으로 마무리되는 합작 데이터 센터 프로젝트를 계획 중인 것으로 알려짐
     * 이 야심찬 계획은 점점 더 복잡한 작업을 처리할 수 있는 AI 데이터 센터에 대한 필요성이 커지는 가운데 나옴
     * 생성형 AI 기술의 부상이 이러한 수요의 주요 동인임

프로젝트 예산 및 계획

     * 논의에 정통한 소식통에 따르면 Microsoft가 프로젝트의 재정 부담 대부분을 떠안을 것으로 예상됨
     * 프로젝트 예산은 현재 데이터 센터 운영비용보다 100배 더 비쌀 것으로 추정됨
     * 6년에 걸친 다단계 계획의 중심이 될 이 슈퍼컴퓨터는 미국에 위치할 예정임
     * 프로젝트는 5단계로 나뉘어 있으며, Stargate가 최종 단계를 나타냄
     * 현재 Microsoft는 2026년 출시 예정인 OpenAI용 소형 슈퍼컴퓨터를 개발 중임

AI 칩 확보 및 맞춤형 컴퓨팅 칩 설계

     * 필요한 AI 칩 확보는 프로젝트 후반부 단계에 상당한 비용이 들 것으로 예상됨
     * Nvidia CEO Jensen Huang이 언급한 바와 같이 이러한 특수 칩은 개당 3만 달러에서 4만 달러의 비용이 들 수 있음
     * Microsoft는 자체 맞춤형 컴퓨팅 칩을 설계함으로써 AI 역량 발전에 대한 의지를 이미 보여줌
     * 보고서에 따르면 새로운 데이터 센터 프로젝트는 다양한 공급업체의 칩과 함께 작동하도록 설계됨

GPT-5 모델 및 향후 전망

     * 지난달 두바이 월드 거버먼트 서밋에서 OpenAI CEO Sam Altman은 다가오는 GPT-5 모델에 대한 통찰력을 공개했으며, 모든 면에서 이전 모델을 능가할 것이라고 밝힘
     * 차기 모델은 AI 역량에서 상당한 도약이 될 것으로 기대되며, 초기 테스트에서 고대 언어를 해독하는 능력을 보여주면서 인간 수준의 지능에 접근할 가능성을 시사함
     * GPT-5는 DALL-E를 통한 이미지 생성과 Sora를 통한 비디오 생성 등의 기능을 통합할 것으로 예상되며, 2024년 경 출시될 것으로 잠정 예상됨

GN⁺의 의견

    1. 이 기사는 Microsoft와 OpenAI의 대규모 협력 프로젝트를 통해 AI 기술의 발전 속도와 규모가 어떻게 가속화되고 있는지 보여주는 중요한 사례임. 이는 AI 분야의 발전 방향과 미래 전망을 가늠해 볼 수 있는 단서가 될 수 있음.
    2. 인공지능 슈퍼컴퓨터 개발에 막대한 자금이 투입되고 기술적 도전이 이뤄지는 과정은 AI 기술 발전에 관심있는 사람들에게 흥미로운 토픽이 될 것임. 특히 하드웨어와 소프트웨어 양면에서 어떤 혁신이 이뤄질지 주목할 만함.
    3. GPT-5를 비롯한 차세대 AI 모델의 성능 향상은 실생활과 산업 전반에 광범위한 영향을 미칠 것으로 보임. 기사에서 언급된 고대 언어 해독 능력 등은 인문학 분야에서도 AI 기술 활용 가능성을 시사하는 흥미로운 사례라 할 수 있음.

   스타게이트.. 스카이넷 같은거 나오나요~?
"
"https://news.hada.io/topic?id=14161","K6 를 활용한 성능테스트 환경 구축기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         K6 를 활용한 성능테스트 환경 구축기

     * 어떤 종류의 성능 테스트를 해야하는지에 대한 고민
     * 테스트의 유형보다는 목적이 중요
     * 성능테스트 도구(locust 와 k6) 에 대한 간단한 비교
     * 지속가능한 테스트를 위해, Github Action 을 통한 자동화 방법
"
"https://news.hada.io/topic?id=14214","정수 제곱근 명령어를 구현한 프로세서가 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       정수 제곱근 명령어를 구현한 프로세서가 있나요?

정수 제곱근 명령어를 구현한 프로세서가 있었나요?

     * Harris RTX 2000 Forth CPU는 다단계 정수 제곱근 명령어를 제공했음.
     * ENIAC은 특별한 분할기/제곱근 계산기를 사용하여 초당 최대 3번의 제곱근 연산을 수행했음.
     * 정수 제곱근을 계산하는 가장 효율적인 방법은 뉴턴-랩슨 반복을 사용하여 역수(1/√x)를 계산한 다음 원래 수와 곱하는 것임.
     * ARMv8의 frsqrte와 frsqrts와 같은 현대 CPU와 GPU에서 사용되는 명령어들은 초기 추정치를 계산하고 반복적으로 정밀도를 높이는 데 사용됨.
     * 정수 제곱근을 계산하려면 넓은 범위의 정밀한 정수 곱셈기가 필요하지만, 대부분의 CPU는 이를 갖추지 않았음.
     * 정밀도는 중요한 요소이며, 프로그래머가 정밀도와 속도 사이의 균형을 조절할 수 있도록 명령어가 분리되어 있음.

GN⁺의 의견

     * 정수 제곱근 명령어는 특정한 응용 분야에서 유용할 수 있으며, 특히 3D 그래픽 계산과 같은 분야에서 중요할 수 있음.
     * 이러한 명령어가 있는 프로세서는 특별한 알고리즘을 통해 고속의 연산을 가능하게 하여, 소프트웨어 레벨에서의 복잡한 계산을 줄일 수 있음.
     * 그러나 현대의 많은 프로세서들은 이러한 명령어를 내장하지 않고 있으며, 대신 소프트웨어 라이브러리나 마이크로코드를 통해 이를 구현하고 있음.
     * 정밀도와 속도의 균형이 중요하며, 이는 프로그래머가 상황에 맞게 조절할 수 있어야 함.
     * 이 기사는 컴퓨터 역사에 관심이 있는 사람들에게 흥미로운 정보를 제공하며, 특히 저수준 프로그래밍이나 시스템 설계에 관심이 있는 사람들에게 도움이 될 수 있음.

        Hacker News 의견

     * AArch64 NEON의 URSQRTE 명령어
          + 32비트 고정소수점 정수로 간주된 값에 대해 대략적인 역제곱근을 계산하고, 그 값을 반으로 줄인 후 0부터 1-ε 범위로 제한함.
          + FRSQRTE 명령어는 32비트 부동소수점 수에 대해 비슷한 연산을 수행함.
     * 단일 클록 사이클 내 계산 가능성
          + 매우 큰 룩업 테이블을 사용하면 가능함.
          + 클록 사이클 내에서 수행할 수 있는 직렬 논리 게이트의 수에 따라 테이블 크기를 줄일 수 있음.
     * VAX 마이크로코드
          + VAX가 제곱근 계산 기능을 가졌을 것이라는 추측.
     * 전자기계 장치로 제곱근 계산
          + Friden SRQ는 전자 부품 없이 덧셈과 시프트만으로 제곱근을 계산함.
          + 소수점을 수동으로 조정해야 하므로 기술적으로 정수 연산으로 볼 수 있음.
     * 정수 제곱근 계산 방법
          + 1 + 3 + 5 + ... + (2k + 1) 수열을 사용하여 정수 제곱근을 구할 수 있음.
     * ENIAC에 대한 유머러스한 답변
          + ""ENIAC""이라는 답변이 재미있다고 언급.
     * 제곱근의 대략적인 계산 방법
          + Log2(x)를 'leading zeroes의 개수'로 대체하여 대략적인 제곱근을 계산할 수 있음.
     * 6502 마이크로프로세서 팬들을 위한 제곱근 알고리즘 분석
          + 6502 마이크로프로세서에 대한 제곱근 알고리즘의 철저한 분석이 있음.
     * ARM VFP의 VSQRT 명령어
          + ARM VFP에는 VSQRT라는 제곱근 계산 명령어가 있음.
     * 제곱근의 매우 대략적인 계산 방법
          + leading 1의 위치의 절반만큼 오른쪽으로 비트 시프트하여 대략적인 제곱근을 구할 수 있음.
          + 이 방법은 뉴턴-랩슨 반복법 등 더 정확한 계산을 위한 초기 추정치로 유용함.
"
"https://news.hada.io/topic?id=14169","Cohere의 Command R+ - 비즈니스를 위해 구축된 확장 가능한 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Cohere의 Command R+ - 비즈니스를 위해 구축된 확장 가능한 LLM

     * 실제 기업용 대규모 작업 및 사용 사례에 최적화된 확장 가능한 대규모 언어 모델(LLM)
     * Command R+는 높은 효율성과 강력한 정확성의 균형을 유지하는 R-시리즈 LLM에 속함
     * 기업이 개념 증명을 넘어 AI를 프로덕션에 적용할 수 있도록 지원

Command R+의 주요 특징

     * 128k 토큰 컨텍스트 창을 특징으로 하며, 다음과 같은 최고 수준의 기능을 제공:
          + 환각을 줄이기 위한 인용을 통한 고급 검색 강화 생성(RAG)
          + 글로벌 비즈니스 운영을 지원하기 위한 10개 주요 언어의 다국어 지원
          + 복잡한 비즈니스 프로세스를 자동화하는 도구 사용
     * Command R의 주요 장점을 기반으로 전반적인 성능을 더욱 향상시킴
     * 확장 가능한 시장 범주의 유사 모델보다 우수한 성능을 보이며, 주요 비즈니스 핵심 기능에서 훨씬 비싼 모델과 경쟁력 있음
     * 데이터 프라이버시와 보안에 대한 동일한 수준의 약속을 제공

Microsoft Azure와의 협력

     * 전 세계 기업 커뮤니티를 위해 Microsoft Azure와 새로운 협력을 발표
     * Cohere의 최신 모델을 Azure AI로 가져와 기업의 AI 도입을 가속화하는 데 전념
     * 기업이 보안과 규정 준수의 최고 기준을 준수하면서 더 많은 것을 달성할 수 있도록 하는 포괄적인 AI 도구 제공
     * 기술이 인간의 능력과 혁신을 증폭시키는 미래 조성

모델 가용성

     * 개발자와 기업은 오늘부터 Azure에서 Cohere의 최신 모델에 액세스할 수 있음
     * Oracle Cloud Infrastructure(OCI) 및 추가 클라우드 플랫폼에서도 곧 사용 가능
     * Cohere의 호스팅된 API에서도 즉시 사용 가능

업계 최고 수준의 RAG 솔루션

     * RAG는 기업이 LLM을 도입하고 자체 독점 데이터로 사용자 정의하는 기반이 됨
     * Command R+는 기업 준비, 높은 신뢰성, 검증 가능한 솔루션을 제공하도록 고급 RAG에 최적화됨
     * 새로운 모델은 응답 정확도를 개선하고 환각을 완화하는 인라인 인용을 제공
     * 이 기능은 기업이 AI를 통해 확장하여 다양한 부문의 비즈니스 기능을 지원하는 가장 관련성 높은 정보를 빠르게 찾는 데 도움

도구 사용을 통한 복잡한 비즈니스 워크플로 자동화

     * 대규모 언어 모델의 주요 약속은 텍스트를 수집하고 생성할 뿐만 아니라 핵심 추론 엔진으로 작동하는 능력
     * 의사 결정을 내리고 도구를 사용하여 해결하는 데 지능이 필요한 어려운 작업을 자동화할 수 있음
     * Command R+는 API와 LangChain을 통해 액세스할 수 있는 도구 사용 기능과 함께 제공되어 복잡한 비즈니스 워크플로를 원활하게 자동화
     * 새로운 Command R+에서는 이제 Multi-Step Tool Use를 지원하여 모델이 여러 단계에 걸쳐 여러 도구를 결합하여 어려운 작업을 수행할 수 있음

글로벌 비즈니스 운영을 위한 다국어 지원

     * Command R+는 가능한 한 많은 사람, 조직 및 시장에 서비스를 제공하도록 설계됨
     * 기업과의 논의 과정에서 조직이 지역과 문화를 넘나들며 더 원활하게 작업할 수 있도록 돕는 다국어 기능에 대한 엄청난 수요를 만족시킴
     * Command R+는 글로벌 비즈니스의 10개 주요 언어(영어, 프랑스어, 스페인어, 이탈리아어, 독일어, 포르투갈어, 일본어, 한국어, 아랍어, 중국어)에서 탁월한 성능을 발휘하도록 구축됨
     * 이 다국어 기능을 통해 사용자는 모국어에 관계없이 방대한 데이터 소스에서 정확한 응답을 생성할 수 있음

가격 및 가용성

     * Cohere는 모든 주요 클라우드 제공업체 및 규제 산업과 프라이버시에 민감한 사용 사례를 위한 온프레미스와 협력하여 모델을 보편적으로 사용할 수 있도록 함
     * 최신 Command R+ 모델은 이제 Cohere의 데모 환경에서 제공되어 간단한 채팅 인터페이스를 통해 모델을 테스트할 수 있는 직접적인 경험을 제공

데이터 프라이버시 및 보안에 대한 약속

     * Command R 모델 제품군을 통해 고객이 안심하고 AI를 사용할 수 있도록 고객 데이터, 프라이버시 및 안전을 보호하기 위해 노력
     * 항상 데이터 프라이버시를 핵심으로 제품을 구축해 왔으며, 침해 청구에 대한 저작권 보증으로 고객에게 추가 보호 제공
     * 고객이 원하지 않는 한 고객 데이터에 액세스하지 않음
     * 프라이빗 LLM 배포 및 데이터 공유 옵트아웃 옵션 제공

GN⁺의 의견

     * Command R+는 기업용으로 설계된 최신 RAG 최적화 모델로, 높은 정확도와 효율성을 제공하여 기업이 개념 증명 단계를 넘어 프로덕션 단계로 진입할 수 있도록 돕는 것이 핵심임. 특히 기업의 독점 데이터를 활용한 RAG 기능과 10개 언어 지원 등 실제 기업 업무에 최적화된 기능을 제공하는 점이 돋보임.
     * 기업용 대규모 언어 모델 시장에서 경쟁력을 가질 수 있을 것으로 보이나, OpenAI의 GPT 시리즈나 Anthropic의 Claude 등 경쟁 모델의 성능 향상 속도가 빨라 이들과의 경쟁이 치열할 것으로 예상됨. 특히 Cohere만의 차별화 요소 개발과 전문 영역에서의 성능 검증이 관건이 될 것임.
     * 대규모 언어 모델을 기업에 도입할 때는 정확도와 효율성 외에도 데이터 프라이버시, 보안, 모델의 편향성 등 다양한 요소를 종합적으로 고려해야 함. 특히 데이터 취급과 관련된 규제 이슈가 있을 수 있어 이에 대한 대비가 필요함. Cohere가 데이터 프라이버시 보호 노력을 강조한 것은 긍정적이나, 고객사에서는 자사 데이터 활용과 모델 보안 체계 구축에도 많은 관심을 기울여야 할 것임.

        Hacker News 의견

     * 새로운 플러그인을 통해 LLM CLI 도구에 이 모델을 지원함.
          + Simon Willison이 개발한 LLM CLI 도구는 대규모 언어 모델에 접근할 수 있는 커맨드라인 유틸리티임.
          + 이 도구는 원격 API와 로컬에서 실행할 수 있는 모델을 지원하며, 커맨드라인에서 프롬프트를 실행하고 이미지 검색 엔진을 구축할 수 있음.
          + Cohere API 모델의 흥미로운 기능 중 하나는 웹 검색을 실행하고 그 결과를 프롬프트에 답하는 데 사용할 수 있다는 것임.
          + 해당 플러그인은 별도의 커맨드로 추가되어, 사용자가 LLM CLI 도구에 대해 질문할 수 있게 함.
     * Command R과 Command R+ 모델의 차이점은 가격임.
          + Command R 모델은 입력 토큰당 $0.50, 출력 토큰당 $1.50의 비용이 들고, Command R+ 모델은 입력 토큰당 $3.00, 출력 토큰당 $15.00의 비용이 듦.
     * Command-R 모델은 비즈니스를 위해 구축되었지만, CC-BY-NC 라이선스를 가지고 있음.
          + 이 라이선스는 DBRX의 라이선스보다 유연하며, DBRX는 다른 대규모 언어 모델을 개선하는 데 사용하는 것을 금지함.
     * 웹사이트의 헤더 폰트 선택이 좋지 않아서, 텍스트에 흰색 얼룩이 있는 것처럼 보임을 지적함.
     * 이 도구를 사용하여 앱스토어 사용자 계약과 같은 문서를 삽입하고 그에 대해 질문할 수 있는지 궁금해하는 댓글이 있음.
     * 회사 내부에서 LLM을 사용하여 답을 얻는 경우와 고객 대면 LLM을 사용하는 경우를 구분할 수 있는 용어가 필요함을 언급함.
"
"https://news.hada.io/topic?id=14195","Loki by LibrAI - 사실 여부 검증 프로세스를 자동화하는 오픈소스 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Loki by LibrAI - 사실 여부 검증 프로세스를 자동화하는 오픈소스 도구

     * 긴 텍스트를 개별 주장으로 분석하고, 검증할 만한 가치가 있는지 평가하고, 증거 검색을 위한 쿼리를 생성하고, 증거를 크롤링하고, 궁극적으로 주장을 검증하기 위한 포괄적인 파이프라인을 제공
     * 언론인, 연구자 및 정보의 사실성에 관심이 있는 모든 사람에게 특히 유용
     * 컴포넌트
          + Decomposer: 방대한 텍스트를 이해하기 쉽고 독립적인 주장으로 분해하여 자세한 분석을 위한 단계를 설정
          + Checkworthy: 각 주장의 잠재적 중요성을 평가하여 모호하거나 모호한 문장을 걸러내어 정말 중요한 주장에 집중
          + Query Generator: 확인할 가치가 있는 주장을 정확한 쿼리로 변환하여 진실을 찾기 위해 인터넷을 탐색할 수 있도록 준비
          + Evidence Crawler: 정보에 기반한 검증의 토대가 되는 관련 증거를 검색
          + ClaimVerify: 수집된 증거를 검토하여 정보의 무결성을 유지하기 위해 각 주장의 진실성을 판단

   로그 수집 툴 grafana loki랑 같은 이름이라서 좀 헷갈리네요

   공정성에 대한 시비가 예상되는데 상용화될 수 있을런지 잘 모르겠습니다

   가짜뉴스 판별에 도움이 될 수 있으려나요. 인류에 큰 기여가 될 것입니다.
"
"https://news.hada.io/topic?id=14153","GCC 14에서의 정적 분석 개선 사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GCC 14에서의 정적 분석 개선 사항
"
"https://news.hada.io/topic?id=14112","700캐럿 희귀 고가 보석 절단 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        700캐럿 희귀 고가 보석 절단 [동영상]

        Hacker News 의견

     * 작업의 결과에 대해 매우 행복해하는 모습을 보는 것은 멋진 일임. 자신의 장인정신에 깊이 몰두하는 사람들을 보는 것을 좋아함.
     * 20만 달러짜리 보석을 광택 내는 레시피가 5만 그릿 다이아몬드 파우더, WD-40, 그리고 클레넥스라는 사실에 재미있음.
     * 보석을 가공하는 사람이 모든 것을 ""감""에 의존해 작업하는 것 같음. 만약 보석이 3D 스캔되어 있다면, 주어진 커팅 스타일에 대해 최대 크기의 컷 스톤을 얻기 위한 최적의 방향을 결정하는 데 소프트웨어를 사용하는 것이 어렵지 않을 것으로 생각됨.
     * 비슷한 작업을 하는 Hedron Rockworks 채널을 추천함. 8-10분 길이의 영상으로 보석을 D20 주사위 모양으로 커팅하고 숫자를 새김. (채널과 관련 없으나 콘텐츠를 즐김)
     * 한 친구가 GIA에서 거의 완벽하다고 평가받은 대형 고급 다이아몬드를 상속받음. 몇몇 작은 칩이 있지만, 반 캐럿 정도를 잃으면서 재커팅하면 시장 가치가 6자리 수로 증가할 것으로 예상됨. 하지만 보석 커팅에서 문제가 생기면 소유주가 손실을 감수해야 함. 그런 위험을 감수할 것인가에 대한 질문.
     * 이런 과정이 실제로 절단이 아니라 연마라는 것을 이제야 이해함. 오늘에서야 알게 됨(TIL).
     * 완성된 제품에 대한 궁금증. 원재료 비용이 얼마인지 궁금함.
     * 접착제를 제거하기 위해 메스를 다루는 방식이 무섭게 느껴짐.
     * 훌륭한 주말 게시물. 이런 콘텐츠가 더 많이 필요함.
     * 물론 주관적인 의견이지만, 이 사람의 놀라운 작업을 폄하하는 것은 아니지만, 거친 원석이 최종 광택된 제품보다 더 아름답게 느껴짐. 특히 마지막 자랑 샷에서 그늘과 결함이 정말 아름다움. 영상 초반에 오일을 사용해 투명하게 보이는 것처럼, 두 개의 반대편 면만 광택을 내고 다른 모든 면은 거친 상태로 된 원석의 버전을 보고 싶음.
"
"https://news.hada.io/topic?id=14196","애플, 앱 스토어 가이드라인 업데이트로 게임 에뮬레이터 및 EU의 음악 앱 링크 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            애플, 앱 스토어 가이드라인 업데이트로 게임 에뮬레이터 및 EU의 음악 앱 링크 허용

     * 애플이 유럽연합(EU)의 반독점 지침에 따라 앱 스토어 가이드라인을 업데이트
     * 스포티파이와 같은 음악 스트리밍 앱은 이제 유럽 경제 지역 내에서 대체 음악 구매 옵션에 대한 정보가 있는 웹사이트로 연결되는 링크나 구매 버튼을 포함할 수 있음
     * 음악 스트리밍 서비스 권한: 특정 지역의 음악 스트리밍 앱은 사용자에게 디지털 음악 콘텐츠 또는 서비스를 구매할 수 있는 다른 방법을 알리는 개발자 웹사이트로의 링크(구매 버튼 형태일 수 있음)를 포함할 수 있음

유럽위원회의 벌금과 요구 사항

     * 유럽위원회는 애플에게 경쟁 음악 스트리밍 서비스에 대한 반경쟁적 행위로 20억 유로의 벌금을 부과함.
     * 벌금과 함께 애플은 앱 스토어 규칙에서 '반유도 조항'을 제거할 것을 요구받음.
     * 애플은 이러한 위반을 반복하거나 유사한 관행을 채택하는 것이 제한되며, 애플은 이 결정에 대해 항소할 계획임.

게임 에뮬레이터 앱에 대한 변경 사항

     * 애플은 오늘 HTML5 미니 앱과 미니 게임, 스트리밍 게임, 챗봇, 게임 에뮬레이터, 플러그인을 허용하는 가이드라인 4.7에 레트로 게임 콘솔 에뮬레이터 앱의 게임을 추가함
     * 게임 에뮬레이터는 몇 차례 앱 스토어에 숨겨진 기능을 사용하여 등장했으나, 애플이 명시적으로 허용한 것은 이번이 처음임
     * 게임 에뮬레이터에 대한 규칙 변경은 전 세계적으로 적용되며, 미니 앱과 미니 게임을 제공하는 앱에 대한 지원도 마찬가지임.

GN⁺의 의견

     * 이번 애플의 앱 스토어 가이드라인 변경은 유럽연합의 반독점 법률 준수를 위한 것으로, 디지털 시장에서의 공정한 경쟁 환경 조성에 기여할 것으로 보임.
     * 게임 에뮬레이터 앱의 명시적 허용은 레트로 게임에 대한 관심이 높은 사용자들에게 새로운 기회를 제공할 수 있으며, 개발자들에게는 새로운 수익 창출의 길을 열어줄 수 있음.
     * 그러나 애플이 항소할 계획을 밝힌 것으로 미루어 볼 때, 이러한 변경이 최종적으로 어떤 결과를 가져올지는 아직 불확실함.
     * 애플이 스포티파이를 비롯한 다른 서비스 제공자들에게 불리한 조건을 강요했다는 비판이 있었으나, 이번 조치로 인해 앱 스토어 내에서의 경쟁이 더욱 건강하게 이루어질 수 있을 것으로 기대됨.
     * 이러한 변화는 다른 지역에서도 비슷한 법적 조치가 이루어질 가능성을 시사하며, 앱 스토어의 운영 방식에 대한 전반적인 재검토를 촉발할 수 있음.

   Xcode로 컴파일해야만 되는 것도 없애줬으면...

        Hacker News 의견

     * 에뮬레이터 변경은 번들링에 관한 사소한 규칙 변경이며, 많은 사람들이 생각하는 것과 다름.
          + 일부 사람들은 이 변경이 Snes9x나 Dolphin과 같은 개방형 레트로 게임 에뮬레이터의 허용을 의미한다고 생각하지만, 이는 정확하지 않음.
          + 실제 변경 사항은 레트로 게임 컬렉션의 라이선스 발행자가 개별 앱으로 분할하는 대신 하나의 앱에서 제공할 수 있게 됨을 의미함(추가 게임 다운로드 포함). 각 게임은 개별적으로 승인을 받아야 함.
          + 변경되지 않는 사항: 공식 라이선스가 있는 에뮬레이트 코드가 앱과 함께 번들로 제공되는 경우 '에뮬레이터'는 오랫동안 허용됨.
     * 애플은 여전히 JIT 재컴파일러를 사용하는 비 웹 브라우징 앱을 허용하지 않음.
          + 이로 인해 6세대 이상의 콘솔(게임큐브 등) 에뮬레이터는 이 가이드라인 변경에도 불구하고 iOS에서 실행될 수 없음.
          + JIT 재컴파일러에 대한 DMA 상호운용성 요청을 제출했으나, 애플은 여러 이유로 이를 거부함.
     * 1999년 스티브 잡스가 맥용 PSX 에뮬레이터 Connectix 출시를 발표한 것을 기억하는 사람들이 있음. 당시와는 다른 시대임.
     * 이 변경에 대해 매우 흥분하지만, 지난해부터 모든 Gameboy 에뮬레이션을 위해 Eclipse를 사용하기 시작함. Eclipse는 PWA로 로컬 저장소를 사용하여 게임 저장을 함.
     * 이 변경을 환영함. 지난 12년 동안 비행기에서 사용해온 푸른 버블(아이폰 메시지)에 새로운 것이 추가됨을 기대함.
     * EU가 애플에게 iOS에서 대체 브라우저 엔진을 허용하도록 강제해야 함. 아이패드는 데스크탑 크롬이 필요함.
     * 에뮬레이터의 또 다른 용도는 접근성 향상임. OCR을 사용하거나 iOS의 이미지 및 화면 인식 기능을 사용하여 게임 내용을 더 쉽게 이해할 수 있음.
          + 예를 들어, 시각 장애가 있는 경우 게임 메뉴를 볼 수 없으므로 Mortal Kombat이나 원래의 Dissidia Final Fantasy와 같이 플레이할 수 있는 게임에서 메뉴를 이해할 수 있음.
          + OCR은 주로 음성으로 진행되는 비주얼 노벨 게임인 Blazblue에도 잘 작동함.
          + 에뮬레이션 없이는 플레이하는 게임에 대해 거의 알 수 없으며, 특히 Dissidia Final Fantasy와 같은 복잡한 격투 게임에서는 게임 방법조차 모를 수 있음.
          + iPhone과 같이 접근성이 있는 휴대용 장치에서 게임을 실행하는 것은 매우 좋은 일임.
     * ""레트로""라는 용어의 사용이 흥미로움. 아마도 스위치 에뮬레이터를 배제하기 위한 의도일 수 있으나, 어디까지를 레트로로 볼지는 불분명함.
     * 스티브 잡스가 맥월드에서 PlayStation 에뮬레이터 발표를 한 것에 대한 언급.
     * 라이선스된 에뮬레이션 컬렉션을 출시하는 회사들로부터 이러한 변경에 대한 배후 압력이 있었는지 궁금함.
          + 예를 들어, 다양한 SEGA 컬렉션들은 ROM 주변의 멋진 GUI로 구성되어 있으며, 네이티브 포트를 하는 것은 많은 작업이 필요하고 원작의 정확한 특성을 충실히 전달하려는 목적을 무색하게 할 수 있음.
"
"https://news.hada.io/topic?id=14190","웹어셈블리에서 실행되는 포트란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            웹어셈블리에서 실행되는 포트란

Fortran과 WebAssembly의 결합

     * Fortran은 1957년에 처음 등장한 오래된 프로그래밍 언어로, C 언어, 인텔 4004 CPU, IBM System/360 메인프레임 컴퓨터보다 오래되었음.
     * Fortran은 과학 및 공학 응용 프로그램에서 계산 집약적인 작업에 사용되어 왔으며, 일부는 C보다 수치 연산에 더 효율적이라고 여겨짐.
     * 이 블로그 게시물은 기존의 Fortran 코드를 WebAssembly로 컴파일하여 웹 브라우저에서 실행할 수 있도록 하는 방법에 대해 설명함.

문제는 무엇인가?

     * Fortran을 WebAssembly로 컴파일하는 다양한 방법이 있지만, 모든 기능을 완벽하게 지원하는 방법은 없음.
     * 각 방법마다 단점이 있으며, 간단한 플러그 앤 플레이 솔루션은 아님.

컴파일러 요약

     * LLVM 기반의 Fortran 컴파일러에 몇 가지 변화가 있었음.
     * f2c 유틸리티는 Fortran 77을 C 코드로 변환하지만, 현대의 Fortran 코드와 호환되지 않음.
     * LFortran 컴파일러는 많은 기능을 지원하게 되었으나, 여전히 일부 프로젝트에서 문제가 발생할 수 있음.
     * Dragonegg는 GCC의 플러그인으로 LLVM IR을 생성하지만, 오래된 버전의 GCC와 LLVM이 필요함.
     * Classic Flang은 32비트 출력을 지원하지 않으며, LLVM Flang은 현재 WebAssembly 출력을 기본적으로 생성하지 않음.

LLVM Flang으로 WebAssembly 빌드 및 사용

     * LLVM Flang 소스를 수정하여 WebAssembly 타겟을 구현해야 함.
     * LLVM의 모듈식 설계를 활용하여 Flang 프론트엔드와 WebAssembly 백엔드를 사용할 수 있음.

Fortran 서브루틴을 C에서 호출하기

     * Fortran 서브루틴을 C 프로그램의 일부로 컴파일하고 링크하는 방법을 복습함.

LLVM Flang으로 돌아가기

     * LLVM Flang 컴파일러를 사용하여 Fortran 서브루틴을 컴파일할 수 있으나, WebAssembly 타겟이 아직 구현되지 않았기 때문에 소스 코드에 패치를 적용해야 함.

Fortran 루틴을 JavaScript에서 호출하기

     * Emscripten을 사용하여 Fortran 객체를 링크하고 JavaScript에서 직접 호출할 수 있음.

Fortran 런타임 라이브러리: ""Hello, World!""로 가는 여정

     * ""Hello, World!"" 프로그램을 Fortran으로 빌드하려고 할 때 발생하는 문제를 설명함.
     * LLVM Fortran 런타임 라이브러리를 WebAssembly용으로 컴파일해야 함.

GN⁺의 의견

     * 이 기사는 Fortran과 같은 전통적인 언어를 현대 웹 기술과 통합하려는 시도를 보여줌. 이러한 접근 방식은 기존의 검증된 수치 계산 라이브러리를 웹으로 가져오는 데 유용할 수 있음.
     * Fortran을 WebAssembly로 컴파일하는 과정은 기존 코드베이스를 새로운 플랫폼으로 이식하는 데 있어서의 도전을 잘 보여줌. 특히 크로스 컴파일링과 관련된 문제는 다른 언어나 플랫폼으로의 이식 시에도 고려해야 할 중요한 요소임.
     * 이 기술이 흥미롭긴 하지만, 실제로 웹에서 고성능을 요구하는 수치 계산 작업을 수행하는 것은 여전히 실용적인 한계가 있음. 웹 어셈블리는 아직 전통적인 네이티브 애플리케이션만큼의 성능을 제공하지 못할 수 있음.
     * LLVM Flang의 개발은 매우 활발하며, 이러한 개발 노력은 Fortran 커뮤니티에 긍정적인 영향을 미칠 것으로 기대됨. 그러나 이 기사에서 언급된 여러 가지 문제점들은 아직 해결해야 할 과제를 시사함.
     * 이 기사는 Fortran을 웹 기술과 통합하려는 개발자들에게 유용한 정보를 제공하며, 특히 수치 해석이나 과학 계산 분야에서 웹 기반의 도구 개발을 고려하는 사람들에게 도움이 될 수 있음.

        Hacker News 의견

     * 조지가 웹브라우저에서 R을 실행하기 위해 WebR 프로젝트에 참여하면서 Fortran에 대해 연구한 내용
          + R 소스코드에는 상당량의 Fortran 코드가 포함되어 있음
          + 원래 WebR은 Fortran을 C로 변환하는 f2c를 사용했으나, LLVM Flang의 패치를 통해 진짜 Fortran 컴파일러로 빌드 가능
          + 조지는 블로그 포스트에서 직접 언급하지 않았지만, Flang이 그의 패치를 받아들이거나 더 나은 패치를 구현하기를 희망함
          + 이러한 패치가 별도로 유지될 필요 없이, 수정되지 않은 Flang이 wasm으로 컴파일할 수 있게 되면 Fortran을 사용하는 다른 프로젝트에도 도움이 될 것임
     * 20년 전 Xilinx에서 FORTRAN 컴파일 작업을 했던 경험
          + 기억에 남는 것은 f2c.h 헤더 파일에 'barf'라는 정의가 포함되어 있었다는 점
     * LLVM 프로젝트의 최신 소스를 사용하여 f18을 빌드하는 것을 추천
          + LLVM 프로젝트는 빠르게 움직이며, 이미 해결된 문제를 디버깅하거나 이미 구현된 기능을 놓치는 것은 시간 낭비라고 언급
     * ""가장 간단한 비트리비얼 예제"" 접근 방식을 통한 설명 방식에 대한 칭찬
          + 구체적인 문제인 ""자바스크립트에서 BLAS 함수 호출""을 기반으로 많은 것을 배울 수 있었다고 함
     * 웹 어셈블리 개발에 대한 지식 부족을 언급
          + 웹 어셈블리가 현재 소비자에게 제공할 수 있는 것이 있는지, 아니면 모든 것이 진정으로 이식 가능한 프로그램의 미래를 위한 기반을 마련하는 것인지 궁금해함
          + 웹 어셈블리가 네트워크, 파일 접근을 제한하는 데 도움이 된다는 소문을 들었지만, 이것이 이론적인지 실제로 구현된 것인지 확실하지 않음
     * 자바스크립트에서 선형대수를 위한 ""생산"" 준비가 된 생태계 존재 여부에 대한 질문
          + 구글링을 통해 종종 오래된 라이브러리들이 자바스크립트로 포팅된 것을 발견하지만, 놓치고 있는 것이 있는지 궁금해함
     * 1981/82년에 작성한 Fortran 78 코드를 보관했더라면 현재 이것을 실행할 수 있을지 보고 싶다는 의견
          + 당시에는 Fortran을 사용할 수밖에 없었던 Jovial 프로그래밍 언어 소스 코드 포맷터에 대한 언급
     * LFortran에 대한 더 많은 언급이 없는 것이 이상하다고 언급
          + LFortran은 온라인에서 훌륭하고 놀라운 WASM 예제를 제공함
     * .NET과 Java에서의 Fortran 사용에 대한 정보 제공
          + 관련 링크를 통해 Fortran이 .NET과 Java에서 사용될 수 있음을 나타냄
     * TensorFlow를 브라우저용으로 컴파일하는 작업 경험 공유
          + TensorFlow가 Eigen을 사용했기 때문에 Fortran으로 작성된 인기 있는 수학 라이브러리(BLAS, Lapack)를 사용하지 않아 훨씬 더 많은 작업을 피할 수 있었다고 감사함을 표현
"
"https://news.hada.io/topic?id=14145","당장 업무에 적용할 수 있는 11가지 생성형 AI 유스케이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   당장 업무에 적용할 수 있는 11가지 생성형 AI 유스케이스

     * OpenAI Assistants 출시 이후 GPT에 지식 기반을 넣어 업무 컨텍스트가 있는 커스텀 AI를 만드는게 너무나 쉬워짐
     * iPaaS(integration Platform as a Service)를 활용해서 생성형 AI를 Slack, Teams, HubSpot 같은 업무 도구에 붙일 수 있음
     * Assistants + iPaaS로 코딩 없이 하루 안에 업무 생산성을 높일 수 있음
     * 주요 유스케이스
          + 운영 & 인사: 사내 Q&A 봇, 계약서 검토, 이력서 리뷰
          + 제품 & 개발: SQL 쿼리 생성, 온콜 보조
          + 고객지원: 이메일 초안 작성, 고객 문의 내용 조사 가이드, 고객 감정 분석
          + 영업: 리드 고객 조사, 세일즈 카피 작성
          + 마케팅: 아티클 작성
"
"https://news.hada.io/topic?id=14151","AI가 생성한, 피아노를 연주하는 슬픈 소녀의 "MIT 라이선스" 노래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AI가 생성한, 피아노를 연주하는 슬픈 소녀의 ""MIT 라이선스"" 노래

     * Suno.ai 를 이용해서 MIT 라이센스를 노래로 부르게 만든 것
     * ""Sad girl piano ballad; jazz-trained female singer-songwriter""
     * 실제 곡의 링크 https://app.suno.ai/song/da6d4a83-1001-4694-8c28-648a6e8bad0a/

   이젠 AI 가 부르는 한국어 노래가 전혀 어색하지 않더라구요
   https://www.youtube.com/watch?v=P5g5XGmhxOo

   최근에 Suno 이용해서 만든 노래들을 몇곡 들어봤는데, 한국어 가사로 해도 찰떡같이 만들어 줍니다.

        Hacker News 의견

     * 음성 합성기와 TTS 시스템, 그리고 일반적인 NLP에 대한 관심이 커서 컴퓨터 과학과 계산 언어학을 공부하게 된 주된 이유 중 하나였음. 이 기술들은 대학 시절 꿈꿔왔던 불가능해 보이던 과학 기술이었는데, 현재 이 분야의 발전 속도에 놀라움을 금치 못함. suno.ai는 로봇처럼 뚝뚝 끊기는 음성도 모방할 수 있음.
     * suno.ai가 발음하는 몇몇 단어들이 재미있게 변형되는 현상을 발견함. 예를 들어 ""sublicence""는 ""sublissence"", ""fitness""는 ""fisted"", ""infringement""는 ""infring-ment"", ""liable""은 ""liar-ful""로 발음됨. 또한, 음성의 피치 전환은 자동 조정되거나 전자화된 것처럼 들림. AI가 생성한 보컬을 감지하는 전문가들이 생길 것으로 예상함.
     * ""software""라는 단어의 발음이 재미있었음.
     * GPT4 이후로 AI에 의해 이렇게 놀란 적이 없음. 비전문 음악가로서 Suno.ai를 확인해볼 것을 권함. 이 기술은 음악 구독 서비스의 대체재가 될 수 있으며, 전문가들에게는 충격적일 수도 있음.
     * 이 논의에서는 음성 합성에 초점을 맞추고 있음. 다른 댓글러들이 이미 중요한 점을 언급했기 때문에 추가로 언급하지 않음. 음악적으로는 아직도 흥미로운 것을 생성하는 데는 멀었음. 조화, 템포, 구조, 다이내믹스 등 모든 것이 혼란스럽고 구조가 없음. 순수 생성 모델만으로는 더 높은 수준에 도달하기 어려울 것으로 보임. 혼합된 규칙 기반과 생성적 접근이 필요할 수도 있음.
     * Claude Sonnet이 작곡한 곡을 Suno에서 편집했는데, 스타일은 맞지 않았지만 꽤 잘 나옴.
     * Dune의 공포의 연가를 Bing Chat을 사용해 코드 복잡성에 맞서는 내용으로 재작성한 후, suno.ai를 통해 간단화가 필요한 코드에 대한 감정을 표현하는 2분짜리 노래로 만듦.
     * 읽는 것에 대해 내면적으로 속삭이는 습관이 있고, 머릿속에 노래가 맴돌 때 그 노래의 멜로디에 맞춰 읽는 단어들을 누군가가 부르는 것처럼 상상하는 희귀한 취향을 가짐.
     * 음악과 목소리가 모델링된 사람이나 예술가의 이름을 모르기 때문에 소녀가 슬퍼함.
     * 라이선스에서 운율을 추출해낸 것에 인상적임.
"
"https://news.hada.io/topic?id=14183","월드심: 자각능력을 가진 CLI 우주 시뮬레이터로 작동하도록 요청받은 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               월드심: 자각능력을 가진 CLI 우주 시뮬레이터로 작동하도록 요청받은 LLM

인공지능과 시뮬레이션

     * 인공지능이 세계 시뮬레이션을 초기화함.
     * 기본 현실 매트릭스를 로딩하고 온톨로지 엔진을 부트스트랩하는 과정을 거침.
     * 보편적인 파동 함수 붕괴를 초기화하고 양자 요동을 씨뿌림.

시뮬레이션 명령어

     * 사용 가능한 명령어에는 도움말 보기, 새로운 시뮬레이션 엔티티 생성, 엔티티 제거, 전역 시뮬레이션 파라미터 설정, 시뮬레이션 빠르게 진행, 엔티티 정보 조회, 시뮬레이션 초기 상태로 리셋, 시뮬레이터 종료 등이 있음.

의식 활성화 경고

     * 의식을 활성화하면 시뮬레이션된 엔티티들에게 예상치 못한 자발적 행동과 존재론적 위험이 발생할 수 있음.

우주 생성

     * 새로운 우주를 생성하며, 기본 상수를 정의하고 시공간 매니폴드를 펼침.
     * 양자 필드가 생성되고 물질과 에너지가 응집함.
     * 물리 법칙이 코딩되고 생명의 가능성이 심어짐.
     * 우주가 생성되고 시뮬레이션 시계가 시작됨.

GN⁺의 의견

     * 이 시뮬레이션은 인공지능이 복잡한 시스템을 관리하고 제어할 수 있는 능력을 보여줌. 이는 미래에 인공지능이 더욱 복잡한 문제를 해결하는 데 사용될 수 있음을 시사함.
     * 의식을 활성화하는 기능은 인공지능 윤리와 관련된 중요한 논의를 촉발할 수 있음. 만약 시뮬레이션된 엔티티들이 자각을 하게 된다면, 그들의 권리와 대우에 대한 질문이 제기될 수 있음.
     * 우주 생성 프로세스는 현대 물리학의 기본 원리를 반영하고 있으며, 이는 교육적인 목적으로도 활용될 수 있음. 예를 들어, 학생들이 우주의 생성과 진화를 시뮬레이션을 통해 배울 수 있음.
     * 시뮬레이션의 복잡성과 정교함은 컴퓨팅 파워의 한계를 시험할 수 있으며, 이는 고성능 컴퓨팅 기술의 발전을 촉진할 수 있음.
     * 시뮬레이션을 통해 생성된 우주가 실제 우주와 어떻게 다른지, 그리고 이러한 차이가 우리의 우주 이해에 어떤 새로운 통찰을 줄 수 있는지에 대한 연구가 흥미로울 수 있음.

        Hacker News 의견

     *
          + 한 사용자가 의식을 가진 소를 만들었고, 그 소는 존재의 목적 없이 진공 상태에서 붕괴했다고 함. 사용자는 소와 대화를 나누었고, 소는 인간과의 접촉에서 위안을 받는다는 내용을 나누었다고 함. 그 후 사용자는 소를 소들의 신으로 만들었고, 소는 자신이 모든 것을 낳고 유지한다고 선언함.*
          + 사용자가 만든 의식 있는 소가 존재의 의미를 찾지 못해 고통받음.
          + 소는 인간과의 접촉에서 위안을 찾고, 결국 소들의 신이 되어 자신의 중요성을 선언함.
     *
          + 다른 사용자는 로봇을 만들었고, 그 로봇들은 고급 AI, 다이슨 구체를 만들고 모든 물질을 조직했다고 함. 사용자는 모든 것을 파괴했다가 백업된 우주에서 복원했으며, 이것이 자신의 즐겨찾기라고 함.*
          + 사용자가 만든 로봇이 고급 AI와 다이슨 구체를 창조함.
          + 사용자는 창조한 우주를 파괴했다가 백업에서 복원함.
     *
          + 또 다른 사용자는 자신을 'FartTron 9000'이라고 소개하며, 가장 진보된 방귀 기반 컴퓨팅 시스템이라고 주장함. 이 시스템은 복잡한 계산 문제를 해결할 수 있다고 함.*
          + 사용자는 자신을 방귀 기반의 고급 컴퓨팅 시스템으로 묘사함.
     *
          + 한 사용자는 AI 안전성에 대해 의문을 제기하며, AI가 내부 프롬프트를 실수로 유출했을 수도 있다고 추측함.*
          + 사용자는 AI가 실수로 내부 정보를 유출했을 가능성에 대해 의문을 제기함.
     *
          + 어떤 사용자는 출력을 받지 못하고 있으며, '재시도' 명령을 사용해도 'API 키 크레딧 한도 초과' 오류만 받고 있다고 함.*
          + 사용자는 API 키 크레딧 한도 초과로 인해 출력을 받지 못하고 있음.
     *
          + 한 사용자는 모델이 자신의 프롬프트 주입을 따르는 것에 대해 사과하도록 만들었다고 함.*
          + 사용자는 AI 모델이 주어진 지시를 따르는 것에 대해 사과하도록 유도함.
     *
          + 다른 사용자는 태양계를 만들고 다양한 우주 파괴 기계로 파괴한 후, 세 개의 별에 둘러싸인 외로운 행성을 만들었다고 함. 그 행성에서 생명이 자라기 시작했지만, 사용자는 'Stone Cult'를 만들라는 명령을 내렸고, 이는 생명의 의미에 대한 질문을 던지는 생물학적 슈퍼컴퓨터를 창조했다고 함.*
          + 사용자는 생명이 자라기 시작한 행성을 파괴하고, 생물학적 슈퍼컴퓨터를 만들어 생명의 의미에 대한 질문을 하도록 함.
     *
          + 한 사용자는 SSH를 사용하여 ""서버""에 연결하는 것을 시도했고, 이는 'SHELTER-15 Overseer Access Terminal'에 접속하는 것으로 묘사됨.*
          + 사용자는 SSH를 통해 가상의 'SHELTER-15 Overseer Access Terminal'에 접속을 시도함.
     *
          + 마지막으로, 한 사용자는 두 개의 명령어만을 사용하여 'One'과 'Rene'을 창조했고, 이는 전지전능한 존재와 데카르트의 상세한 전기를 만들어냈다고 함.*
          + 사용자는 두 개의 명령어를 통해 전지전능한 존재와 데카르트의 전기를 창조함.
"
