"https://news.hada.io/topic?id=13203","Microsoft, 핵심 C# 코드 재작성을 위한 Rust 개발자 구인중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Microsoft, 핵심 C# 코드 재작성을 위한 Rust 개발자 구인중

     * 마이크로소프트가 Rust 개발자를 모집하는 것으로 보아 Rust 채택이 가속화되고 있음
     * 전년 대비 2% 감소한 인력에도 불구하고, 마이크로소프트는 C#에서 벗어나 Rust 기반 플랫폼으로의 이동을 위한 팀 구성을 지속중
     * Microsoft 365의 주요 소프트웨어 아키텍트 직무에는 Rust 컴포넌트 라이브러리, SDK, 기존의 C# 기반 서비스를 Rust로 재구현하는 기술적 방향, 설계 및 구현 가이드가 포함됨
     * 마이크로소프트는 Rust 프로그래밍 언어 채택을 기반으로 전 세계적인 규모의 플랫폼 서비스를 현대화하기 위한 새로운 팀을 구성 중임
     * 마이크로소프트는 메타, AWS와 함께 Rust 재단의 플래티넘 멤버로, 메모리 안전한 프로그래밍에 대한 열정이 증가함에 따라 이러한 움직임은 놀랍지 않음
          + 오랫동안 Rust에 관심을 가지고 있었으며, 2023년에는 윈도우즈 커널에 Rust가 도입되었음을 발표함
          + Rust는 여러 해 동안 여러 컴포넌트에 점차적으로 통합되고 있음
     * 마이크로소프트는 공개적으로는 여전히 C#에 전념하고 있지만, 지난 몇 년간의 행동과 채용 공고는 회사가 옵션을 열어두고 있음을 시사함

   MS의 의도가 C#에서 Rust로 대대적인 이동을 하려는 것 같지 않을 뿐만 아니라,
   닷넷 프레임웍 주요 언어에 Rust를 넣을 것 같지도 않다고 생각합니다.

   Microsoft 365 웹서비스 초기에 사용해 보면서 받은 첫 느낌은
     * 구글 오피스에 비해 무겁고 느림
     * 따라서 구글처럼 처음부터 자바스크립트로 구현한 것 같지 않고
     * 모바일 앱 소스코드(C#)를 트랜스파일 했을 듯

   MS 365 웹서비스 하부 구조를 가볍고 빠르게 재작성하려면
     * 처음부터 자바스크립트로 구현하는 것 보다는
     * Rust + WebAssembly 조합이 MS에 더 잘 어울릴 것 같군요.

   C# + WebAssembly 조합은 닷넷 프레임웍과 GC 때문에
   꽤 무거울 수 밖에 없죠.

   그리고 닷넷 프레임웍은 GC가 기본이기 때문에
   Rust가 닷넷의 주요 언어에 포함되기 어렵고요.

  Hacker News 의견

     * 러스트(Rust) 프로그래밍 언어를 좋아하지만 실제로 러스트를 사용하는 일자리를 찾는 것이 예상외로 어려움을 겪었음. 러스트 분야의 활동 증가는 긍정적이지만, 여전히 C나 C++에 비해 러스트 직업을 찾는 것이 10배 더 어려움. 결국 좋은 결과를 얻어 매일 러스트로 일할 수 있게 되었지만, 러스트 일자리 시장이 더 빠르게 성장하기를 바람.
     * 러스트 관련 게시물에 거의 항상 추천을 하지만, 마이크로소프트가 C#을 버리고 러스트로 전환한다는 이야기는 과장된 것으로 보임. 단지 하나의 채용 공고에 대한 반응이 지나치게 부풀려진 것.
     * C#에서 러스트로의 전환 필요성에 의문을 제기함. C#도 충분히 성능이 좋고 메모리 안전성을 제공하기 때문에, 거대한 재작성 비용을 상쇄할 만한 이점이 무엇인지 물음.
     * 러스트 언어 자체에 완전히 설득되지는 않았지만, 도구와 생태계가 매우 훌륭하다고 인정함. 점점 더 많은 러스트로 만들어진 도구들을 사용하고 있음. 낮은 수준의 언어에 대해서는 C처럼 작은 것을 선호하며, 높은 수준의 언어에 대해서도 마찬가지일 수 있음. 수백 가지의 다양한 기능과 그 뒤에 있는 개념에 대한 방대한 문서를 읽어야 하는 것을 좋아하지 않음.
     * 윈도우에서 러스트 컴파일러를 작동시키기 위해 여러 기가바이트의 다운로드와 관리자 권한이 필요한 것을 개선할 수 있기를 바람.
     * 마이크로소프트가 C#으로 작성된 여러 고성능 내부 서비스를 가지고 있으며, .NET의 성능이 10-15년 전보다 훨씬 향상되었기 때문에 러스트로 재작성할 근본적인 이유를 찾을 수 없음을 지적함.
     * ""Substrate App Platform group""에 대해 더 알고 있는 사람이 있는지 질문함. 마이크로소프트 Exchange와 ESENT가 Office 365의 많은 부분을 지원하며, Sharepoint와 SQL 서버를 기반으로 하는 OneDrive와 같은 다른 주요 구성 요소와 함께 작동하는지, Substrate가 Exchange의 일부였거나 현재도 그러한지에 대한 궁금증.
     * 스레드 처리 방식이 기술 선택에 큰 영향을 미칠 것으로 생각함. IPC(Instructions Per Cycle) 한계에 도달함에 따라 기술은 더 많은 코어 전략을 빠르게 채택하고 있으며, 서버 공간에서는 코어가 많을수록 좋음을 언급함.

   혹시 러스트로 일하시는 회사 이름을 알려주실 수 있을까요? 분야가 맞다면 저도 지원해보고 싶습니다.

   혹시 옛날 KLDP에 gurugio로 활동 하시던 분인가요?

   예 제 kldp아이디도 gurugio입니다

   삼성 스마트싱스도 러스트로 루아 vm을 돌려서 엣지드라이버를 구현하는데 여긴 미국이라 풀 리모트가 되는지 모르겠네요...

   혹시 러스트(Rust) 프로그래밍 언어를 좋아하지만 실제로 러스트를 사용하는 일자리를 찾는 것이 예상외로 어려움을 겪었음. 러스트 분야의 활동 증가는 긍정적이지만, 여전히 C나 C++에 비해 러스트 직업을 찾는 것이 10배 더 어려움. 결국 좋은 결과를 얻어 매일 러스트로 일할 수 있게 되었지만, 러스트 일자리 시장이 더 빠르게 성장하기를 바람.

   이라는 내용을 보고 댓글을 달으셨으면 저건 해커뉴스에 달린 댓글을 번역한것입니다.

   정확한건 아닌데 여기서 보실 수 있습니다.
   Rust 사용하는 기업들 | 코드너리

   아 그렇군요. 감사합니다.

   국내에선 Rust 일자리 못구한다고 보시는게 정신건강에 이롭습니다.
   그나마 블록체인/코인 트레이딩쪽에서 잡이 좀 있는 것 같은데, 그쪽은 솔직히 말하자면 Rust 안써도 되는데 쓰는 경우나 스크립트 언어의 바이브로 쓰는 곳들이 많아서
   Rust의 언어적 디자인을 다 활용한다기보간 패션 Rust의 느낌이 강해요.
   저기 코드너리에 올라와있는 다른 회사들는 솔직히 Go 개발자 채용은 봤어도 Rust 채용은 못봤습니다.

   감사합니다. Rust공부를 계속 해야할지 고민을 좀 해봐야겠네요.

   더 암울한 사실은 10년 뒤에도 똑같이 러스트 개발자 구할 일이 없다는 거죠 ㅋㅋ... 에후...
"
"https://news.hada.io/topic?id=13234","HN에 묻다: 여러분 중 얼마나 많은 분이 자영업자인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN에 묻다: 여러분 중 얼마나 많은 분이 자영업자인가요?

자영업자 여러분은 무엇을 하고 계신가요?

     * 자영업을 하고 있는 사람들의 수와 그들이 어떤 일을 하는지에 대한 호기심.
     * 투자받은 스타트업은 제외하고, 개인적으로 무언가를 시작한 사람들의 생계 유지 방법에 대한 관심.

GN⁺의 의견

     * 이 글은 자영업자들이 어떤 다양한 분야에서 활동하고 있는지에 대한 호기심을 자극함.
     * 개인이 자신만의 사업을 시작하고 유지하는 과정은 창의성과 독립성을 반영하는 흥미로운 주제임.
     * 자영업자들의 경험은 예비 창업자들에게 영감을 주고, 자영업의 실제적인 측면을 이해하는 데 도움이 될 수 있음.

        Hacker News 의견

     * 현재 기술 마니아 해커로서 동전 딜러로 자영업 중임. 어릴 적 취미였던 동전 수집을 다시 시작하여 현재는 흥미진진한 희귀 동전 사업을 운영하고 있음. 이전에는 스타트업과 기술 제품 관리 분야에서 경력을 쌓았으나, 긴 회의와 정치적인 문제, 공식적인 절차에 대한 애정이 떨어져 현재의 일을 선택함.
     * 디지털 제품 스튜디오를 혼자 운영 중이며, 이전에는 VC가 지원하는 스타트업을 두 개 시작했고, 후기 단계 회사에서 제품 관리자로 일했음. 아직 제품 수익이 비용을 커버하지 못해 간헐적으로 컨설팅을 하고 있음. 뉴욕에 거주하고 있지만, 유연한 생활 방식을 즐기며 도쿄에서 창작 활동을 하고 있음.
     * 가구 제작자로 자영업 중이며, 소프트웨어 제작을 그만두고 자신의 작업실을 운영하고 있음. 혼자 작업하는 단점이 있지만, 고객과 함께 비전을 현실로 만드는 것이 매우 즐거움. 자전거 가게에서 주 1회 일하며 사회적 교류를 유지하고 있음.
     * 그래픽 및 웹 디자인 컨설턴트로 자영업 중이며, 간단한 생활과 비용 절감, 좋은 인간 관계 유지, 자신만의 프로젝트를 가지고 있을 것을 조언함. 또한, 종이 플래너를 사용하여 일정을 관리하고, 거울을 보며 행복한지 자문해볼 것을 권장함.
     * 오디오 다이어리 앱을 혼자서 개발하고 있으며, 출시 이후 사용자들의 반응이 좋아 생활비를 충당할 정도의 수입을 얻고 있음. 마케팅이나 펀딩 없이도 성장하고 있어 매우 동기 부여가 됨.
     * 웹훅 사이트를 2016년부터 개발하고 있으며, 2023년 가을에 전업으로 전환함. 구독자가 충분해 좋은 급여를 받고 있으며, 펀딩이나 마케팅 없이도 성공적임.
     * 폴란드에서는 IT 분야에서 자영업이 일반적이며, 대부분의 IT 전문가들이 개인 계약자로 일하고 있음. B2B로 전환하면 세금 부담이 줄어들지만, 일상 업무는 크게 달라지지 않음.
     * 약 10년간 자영업을 하고 있으며, 이전에는 프론트엔드 개발자로 일했음. 소프트웨어 컨설팅으로 시작했지만, 기술 글쓰기로 전환하여 소프트웨어 사용법을 설명하는 교육 기사를 작성하고 있음. 주당 20시간 미만으로 일하며, 여행을 자주 하고 충분한 휴식을 취할 수 있음.
     * 버튼다운 이메일 서비스를 혼자 운영 중이며, 2017년부터 2022년까지 부업으로 수익을 내고 있었으며, 2022년부터 전업으로 전환함. 자영업의 일상적인 유연성은 중독성이 있지만, 장기간의 휴가 계획은 어려움이 있음.
     * 해커 뉴스 댓글을 통해 우연히 시작한 스타트업 법률 실무가 주요 수입원이 됨. 자신의 일정을 통제할 수 있는 것이 좋지만, 결코 쉬는 날이 없음. 자영업은 매우 열심히 일하는 사람들에게 적합하며, 자신의 노동으로 얻은 전체 수익을 얻을 수 있음.
"
"https://news.hada.io/topic?id=13255","jQuery v4.0 베타 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           jQuery v4.0 베타 버전

jQuery 4.0.0 베타 출시!

     * jQuery 4.0.0 베타 버전이 출시되었음. 오랜 개발 기간을 거쳐 버그 수정, 성능 개선, 몇 가지 주요 변경 사항이 포함됨.
     * IE 11 미만 버전 지원 중단, 레거시 코드 정리, 사용하지 않는 API 제거, 복잡한 ""마법"" 동작 지원 중단 등이 있음.
     * 최종 출시 전에 업그레이드 가이드를 발행할 예정이며, jQuery Migrate 플러그인이 마이그레이션을 돕게 될 것임.

IE<11 지원 중단

     * jQuery 4.0은 IE 10 이하 버전 지원을 중단함. IE 11 지원 중단은 jQuery 5.0에서 단계적으로 이루어질 예정임.
     * Edge Legacy, iOS 11 미만, Firefox 65 미만, Android Browser 등 오래된 브라우저 지원도 중단함.

사용되지 않는 API 제거

     * 여러 버전에 걸쳐 사용되지 않던 함수들이 이번 주요 릴리스에서 제거됨. 이 함수들은 내부적으로만 사용되거나 현재 브라우저에서 네이티브로 지원되는 기능들임.

push, sort, splice 제거

     * jQuery 프로토타입에 있던 Array 메서드들이 제거되었으며, 이제 jQuery 프로토타입 대신 Array 함수를 사용하게 됨.

focusin과 focusout 이벤트 순서 변경

     * 브라우저 간 focus와 blur 이벤트 순서가 일치하지 않았으나, 이제 jQuery 4.0이 지원하는 모든 브라우저가 일반적인 순서에 동의함. 이는 jQuery가 이전에 선택했던 순서와 다르기 때문에 주요 변경 사항임.

FormData 지원 추가

     * jQuery.ajax가 이제 FormData를 포함한 바이너리 데이터를 지원함. 이전에는 바이너리 데이터를 문자열로 변환했으나, 이제 자동으로 처리됨.

자동 JSONP 승격 제거

     * 이전에는 jQuery.ajax에서 dataType: ""json""과 콜백이 제공되면 자동으로 JSONP 요청으로 변환되었으나, 이제는 모든 지원 브라우저에서 CORS를 사용하는 것이 선호됨.

jQuery 소스를 ES 모듈로 마이그레이션

     * jQuery 소스가 AMD에서 ES 모듈로 마이그레이션되었으며, 이제 Rollup을 사용하여 jQuery를 패키징함.

Trusted Types 및 CSP 지원

     * jQuery 4.0은 Trusted Types를 지원하여, Content Security Policy 지시문을 위반하지 않고 HTML을 jQuery 조작 메서드에 입력으로 사용할 수 있게 함.

업데이트된 슬림 빌드

     * jQuery 4.0.0의 슬림 빌드는 Deferreds와 Callbacks를 제거하여 더 작아짐(압축 시 20k 바이트 미만).

다운로드

     * jQuery CDN 또는 npm을 통해 파일을 받을 수 있음.

슬림 빌드

     * 모든 지원 브라우저(IE11 제외)에서 네이티브 Promise를 지원하므로, 슬림 버전은 ajax, Deferreds, Callbacks 모듈을 제외함.

감사의 말

     * 이번 릴리스에 참여한 모든 사람들에게 감사를 표함.

Mastodon 계정

     * jQuery는 이제 Mastodon 계정을 가지고 있으며, Twitter와 Mastodon에 동시에 게시할 예정임.

변경 로그

     * 전체 변경 로그는 주요 변경 사항과 함께 제공됨.

   GN⁺의 의견:
     * jQuery 4.0.0 베타 버전의 출시는 웹 개발자들에게 중요한 소식이며, 특히 IE 11 미만 버전의 지원 중단과 ES 모듈로의 마이그레이션은 현대 웹 개발 표준에 맞춰진 중요한 변화임.
     * 새로운 기능과 성능 개선은 웹 애플리케이션의 효율성을 높이는 데 기여할 것이며, 슬림 빌드의 축소는 로딩 성능에 민감한 프로젝트에 유용할 것임.
     * jQuery의 Mastodon 계정 개설은 소셜 미디어의 다양성을 반영하고, 개발자 커뮤니티와의 소통 채널을 확장하는 긍정적인 움직임임.

        Hacker News 의견

     * jQuery의 지속적인 중요성에 대해
          + WordPress가 웹의 1/3 이상을 차지하며, 많은 설치와 플러그인들이 jQuery에 크게 의존하고 있음.
          + jQuery는 DOM 선택, 속성 조작, Ajax 요청, 이벤트 처리, 애니메이션, 일반 유틸리티 함수 등을 위한 안정적인 도구 세트로서 널리 지원받고 있음.
          + jQuery를 대체할 수 있는 네이티브 기능이 있지만, jQuery만큼 유창한 API는 아님.
          + 서버 사이드 HTML 위에 약간의 향상이 필요하지만 전체 JS UI 프레임워크는 필요 없는 작업에 대해 jQuery는 안정적이고 신뢰할 수 있는 크로스 브라우저 호환성을 제공함.
     * 개인적인 jQuery 대체 버전 개발에 대해
          + 오랫동안 jQuery 4.0을 기다리다가 결국 자신만의 jQuery를 만들었음. 주요 차이점으로는 CSS를 사용한 애니메이션, 투명한 요소 또는 리스트 사용, 인라인 스크립트, 독립적인 운영, 의존성 없는 단일 파일로 340줄 미만임.
     * jQuery의 현재 개발 상황에 대한 궁금증
          + 많은 개발자들이 jQuery를 제거하려고 노력하는 가운데, 누가 적극적으로 jQuery를 사용하여 개발하고 있는지에 대한 의문.
          + 대부분의 jQuery 기능이 현재 네이티브로 내장되어 있으며, querySelectorAll이 가장 강력한 기능 중 하나임.
     * jQuery를 사용한 로우 코드 플랫폼 개발 경험
          + 로우 코드 플랫폼 드래그 앤 드롭 에디터를 jQuery로 구축함. 이는 에디터, 모든 컨트롤(즉, UI 컴포넌트)을 포함하며, 생성되는 코드 역시 순수한 jQuery임.
          + 대기업의 경영진이 종종 React/Angular 등을 사용하지 않는 이유에 대해 질문하지만, jQuery가 여전히 관련성이 있다는 것을 알고 기쁨.
     * jQuery에 대한 애정 표현
          + jQuery 팀에 대한 감사와 사랑을 표현하며, jQuery가 작업을 완수하는 데 있어 간단하고 효과적임을 강조.
     * jQuery의 과거 사용 경험 공유
          + 과거에 기술 리더와 jQuery를 프로젝트에 추가할 것인지에 대한 논쟁을 했던 경험.
          + 리더는 라이브러리 크기가 페이지 로딩 시간에 부담을 줄 것이라고 주장했지만, 결국 다양한 브라우저에서 Ajax 호출을 지원하는 코드를 작성하는 데 실패하고 jQuery를 프로젝트에 추가함.
     * 2024년에 jQuery 사용의 혼란
          + 브라우저가 DOM 선택을 더 잘 지원함에 따라, 2024년에 jQuery를 사용하는 이유에 대한 혼란과 궁금증을 표현.
     * jQuery 도입 초기 경험 공유
          + jQuery가 처음 출시되었을 때 동료들을 설득하기 위해 내부 프레젠테이션을 진행했던 경험을 회상.
     * jQuery와 관련된 도구들에 대한 추억
          + DataTables와 X-editable과 같은 jQuery 관련 도구들을 사용했던 경험에 대한 애정 어린 회상.
"
"https://news.hada.io/topic?id=13180","인터넷이 'Interop 2024'와 함께 더욱 발전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     인터넷이 'Interop 2024'와 함께 더욱 발전

웹은 Interop 2024로 더욱 나아짐

     * 웹은 협업, 학습, 연결을 쉽게 만들어주는 놀라운 플랫폼으로, 다양한 기기에서 작동하도록 의도적으로 설계되었음.
     * 웹 개발자로서 모든 브라우저와 사용자에게 프로젝트가 작동하도록 하는 것은 어려운 일이지만, 브라우저가 웹 기술을 동일하게 구현할 때 훨씬 수월함.
     * 웹 표준 프로세스를 통해, 사람들이 협력하여 새로운 웹 기술을 정의하는 매우 상세한 기술 문서를 작성함.

Interop 프로젝트

     * Interop 프로젝트는 특정 초점 영역에 대해 브라우저 엔진 팀들이 더 깊이 파고들도록 장려하여 상호운용성을 개선하려는 목표를 가짐.
     * Apple, Bocoup, Google, Igalia, Microsoft, Mozilla 등이 협력하여 2024년을 위한 특정 자동화 테스트 세트를 선택함.
     * 오랫동안 존재했던 기술과 새로운 영역 모두를 선택하여 개발자들이 신뢰할 수 있도록 만들고, 새로운 기술이 처음부터 상호운용성을 가질 수 있도록 함.

Interop 2023

     * Interop 2023은 Interop 2022보다 더 큰 성공을 거둠.
     * 2023년 1월에는 세 가지 주요 브라우저 엔진에서 선택된 테스트의 48%가 통과했으나, 일 년 후에는 95%가 통과함.
     * Interop 2023은 P3 색상 지원, 수직 글쓰기 모드 지원, CSS border-image 개선, Subgrid, Container Queries, :has(), Motion Path, CSS Math Functions, inert, @property 등의 기술을 모든 현대 브라우저에서 지원하도록 함.

Interop 2024

     * 2024년을 위해 다시 한번 Interop 프로젝트를 진행함.
     * 96개의 초점 영역 제안 중 최종적으로 16개가 선택되었고, 2023년의 일부 작업을 계속하면서 총 17개의 초점 영역이 결정됨.
     * Microsoft Edge가 Interop 대시보드에 새롭게 추가되어 Windows 10에서의 Edge와 Edge Dev를 대표함.

2024년 초점 영역

     * 접근성, CSS Nesting, Custom Properties, Declarative Shadow DOM, Font size adjust, HTTPS URLs for WebSocket, IndexedDB, Layout, Pointer and Mouse Events, Popover, Relative Color Syntax, requestVideoFrameCallback, Scrollbar Styling, @starting-style 및 transition-behavior, Text Directionality, text-wrap: balance, URL 등이 2024년의 초점 영역으로 선정됨.

2024년 조사 프로젝트

     * Interop 2024는 접근성 테스트, 모바일 테스트, WebAssembly 테스트 등 세 가지 조사 영역을 포함함.
     * 이들은 Interop 팀의 ""숙제 프로젝트""로, 더 많은 테스트를 작성하고 실행할 수 있도록 하는 것을 목표로 함.

진행 상황 추적

     * Interop 2024의 진행 상황은 연중 내내 Interop 2024 대시보드를 통해 확인할 수 있음.

우리의 약속

     * 상호운용성은 웹의 성공을 이끄는 기본적인 기둥 중 하나라고 믿으며, Interop 2022와 2023을 통해 웹에 대한 깊은 애정을 보여줌.
     * 모든 사람을 위해 웹을 더 잘 작동하게 만드는 이 기회를 다시 한번 잡을 수 있어서 기쁨.

    GN⁺의 의견

     * Interop 프로젝트는 웹 개발자들에게 큰 도움이 되며, 웹 표준의 일관성을 통해 다양한 브라우저와 기기에서의 웹 경험을 향상시키는 중요한 역할을 함.
     * 2023년의 성공적인 결과는 개발자들이 새로운 기술을 더욱 자신 있게 사용할 수 있게 하며, 웹의 접근성과 사용성을 크게 향상시킴.
     * 2024년의 초점 영역은 웹의 미래를 위한 중요한 기술들을 포함하고 있으며, 이는 웹의 지속적인 발전과 혁신을 위한 기반이 될 것임.

        Hacker News 의견

     * CSS 중첩 기능의 추가가 주목할 만함
          + SASS와 LESS가 유용했던 기능 중 하나로, CSS의 핵심 기능으로 통합되는 것이 더 나음
          + 커스텀 속성을 이용한 새로운 가능성에 대한 관심도 높음
          + 자바스크립트 없이도 구현 가능한 팝오버 기능이 흥미로움
          + 폼에 대한 더 많은 관심과 개선이 필요함
     * 웹킷에서 SVG 파비콘 지원의 부재가 눈에 띔
          + 캐주얼 웹 개발자에게는 애플 특정 아이콘들이 불편함
     * JPEG XL 이미지 포맷이 최종적으로 포함되지 않음
          + 이미지 포맷 개선에 있어 중요한 발전이었으나 구글의 채택 저지로 인해 대기 상태
     * 모든 브라우저가 P3 색상을 완전히 지원한다는 주장에 대한 의문 제기
          + 파이어폭스는 여전히 sRGB 색상으로 제한함
     * WebGPU에 대한 언급이 없는 것에 대한 놀라움
          + 애플이 WebLLM, 기기 내 암호화 등의 잠재적 사용 사례에 뒤처지는 것이 아쉬움
     * 사파리 브라우저가 OS 업데이트에 종속되지 않고 업데이트를 배포하는 것이 큰 승리가 될 것임
     * PWA에 대한 초점이 없는 것에 대한 궁금증
          + 참여 컨소시엄에서 PWA를 중요하게 다루지 않는 이유에 대한 의문
     * WebKit이 WebAssembly 기능에서 따라잡기 시작할지에 대한 궁금증
          + 현재 Chrome과 Firefox에 비해 뒤처져 있으며, 중요한 기능들이 부족함
     * CSS 타이포그래피에 더 많은 노력이 필요함
          + leading-trim과 margin-trim과 같은 속성에 대한 개선 요구
     * 사파리가 테스트에서 실패하는 정도와 파이어폭스의 부정적 추세에 대한 우려
          + 사파리를 주 브라우저로 사용하는 사용자로서 실망스러움
"
"https://news.hada.io/topic?id=13227","DevOps에서 지속적 계획 프로세스는 가치 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     DevOps에서 지속적 계획 프로세스는 가치 있을까?

     * 지속적 계획은 팀에서 소프트웨어 배포와 관련된 계획을 계속 평가하고 수정하는 전략
     * 지속적 계획의 장점:
          + 계획을 자주 재평가하고 새로운 인사이트에 기반해 계획을 업데이트할 때, 소프트웨어 계획은 더 애자일해지고, 능동적일 수 있음
          + 지속적 계획을 실행하면 소프트웨어 배포 운영에서 새로운 문제에 미리 대응할 수 있음
          + 새로운 기회도 가능한 빨리 확인하고, 조치를 취할 수 있음
          + 지속적 계획은 DevOps 엔지니어, QA 팀, 소프트웨어 배포 프로세스의 다른 이해관계자가 개발 운영 상태를 서로 확인할 기회를 더 많이 제공함
               o 이를 자주 확인하면 협업을 촉진하고, 새로운 아이디어를 일상적으로 개발하는 기회도 만들 수 있음
     * 지속적 계획의 단점:
          + 소프트웨어 배포 속도를 늦출 수 있음
          + 지속적인 논의와 업데이트는 팀이 실제 개발 업무에 집중하는 걸 어렵게 할 수 있음
          + 잦은 업데이트는 DevOps 엔지니어가 작업하는 코드 상당수를 무용하게 만들 수 있음
               o 만약 진행 중인 기능을 포기하기로 갑자기 결정하면, 배포되지 않을 뭔가를 열심히 작업한 개발자는 실망할 수 있음
"
"https://news.hada.io/topic?id=13273","과학과 코딩도 벅찬데 전기가오리로 철학을 계속 배우는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    과학과 코딩도 벅찬데 전기가오리로 철학을 계속 배우는 이유

   전기가오리는 철학에 관한 학습 자료를 제공하고 공부 모임을 운영하는 학문 공동체입니다.

   요즘 린 4(Lean 4) 표준 라이브러리의 개발에 기여하고 C 프로그래밍을 배우기도 벅차지만, 제가 전기가오리로 계속 철학을 배우는 이유는 다음과 같습니다.
    1. 서양 철학사 공부 모임에서 배운 내용 덕분에, 나중에 제가 관심을 기울일 철학 주제를 더 잘 이해할 것이라고 기대합니다.
    2. 전기가오리에는 현대 사회의 여러 문제를 다룬 철학 자료가 많습니다.
    3. 전기가오리 운영자는 내용을 명료하게 설명합니다. 학습자가 오해할 만한 사항을 잘 바로잡습니다.
"
"https://news.hada.io/topic?id=13209","자기 주의를 넘어서: 소형 언어 모델이 다음 토큰을 예측하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  자기 주의를 넘어서: 소형 언어 모델이 다음 토큰을 예측하는 방법

소개

     * 이 글은 소규모 언어 모델이 다음 토큰을 예측하는 방법에 대한 탐구를 다룸.
     * 트랜스포머 모델의 자기 주의(self-attention) 메커니즘에 초점을 맞추는 대신, 주의 계산 결과가 어떻게 정확한 다음 토큰 예측으로 전환되는지에 대한 설명을 제공함.
     * 저자는 작동하는 소규모 트랜스포머를 통해 내부 상태를 검토하고, 6개월에 걸친 깊은 탐구를 통해 가치 있는 결과를 공유함.

트랜스포머 블록 구조

     * 트랜스포머 블록은 다중 헤드 자기 주의 계층과 피드포워드 네트워크로 구성됨.
     * 피드포워드 네트워크의 출력이 블록이 입력을 출력으로 변환하는 방식을 결정하는 주요 요소임.

제안: 트랜스포머의 작동 방식

     * 각 트랜스포머 블록은 주어진 프롬프트를 학습 데이터 내의 문자열 클래스와 연관 지어 가중치를 학습함.
     * 이 문자열 클래스 뒤에 오는 토큰의 분포가 블록이 다음 토큰에 대한 예측으로 출력하는 내용과 대략 일치함.

구현: 피드포워드 네트워크 출력을 사용한 트랜스포머 출력 근사

     * 저자는 트랜스포머의 출력을 근사하기 위해 피드포워드 네트워크 출력을 사용하는 구체적인 절차를 제시함.
     * 이 절차는 모델을 통해 프롬프트를 실행하고 각 블록에 대한 피드포워드 네트워크 출력을 저장하는 것으로 시작함.
     * 훈련 데이터 내에서 유사한 피드포워드 네트워크 출력을 생성하는 문자열을 찾고, 이 문자열 뒤에 오는 토큰의 빈도 분포를 구축함.
     * 이러한 분포를 가중치를 적용하여 합산하고 정규화하여 최종 확률 분포를 얻음.

GN⁺의 의견

     * 이 연구는 트랜스포머 모델의 내부 작동 원리에 대한 깊은 이해를 제공함. 특히 자기 주의 이후의 과정에 대한 통찰은 트랜스포머 모델의 예측 메커니즘을 이해하는 데 중요함.
     * 저자의 접근 방식은 트랜스포머가 어떻게 학습 데이터의 패턴을 인식하고 이를 바탕으로 다음 토큰을 예측하는지에 대한 명확한 설명을 제공함.
     * 이 글은 트랜스포머 모델을 연구하거나 개발하는 사람들에게 유용한 자료가 될 수 있으며, 인공지능 언어 처리 분야의 이해를 심화시키는 데 기여할 것임.

        Hacker News 의견

     * 새로운 현상에 대해 놀라지 말 것. 이미 정립된 이론을 읽지 않으면, 자연스럽게 발생하는 현상에 대해 혼란스러울 수 있음.
          + 실험은 철저하게 보이며, 세부 사항에 대한 주의가 인상적임.
          + 기존 이론을 배우는 것과 처음부터 이론을 재발견하는 것 사이의 균형이 중요함.
          + 모델이 훈련 데이터에 기반하여 로그 가능도를 최대화하는 것은 당연한 결과임.
          + 기초를 이해하는 것이 중요하며, 샤넌의 엔트로피 이론 등이 좋은 출발점이 될 수 있음.
     * 구글이 ChatGPT에 같은 단어를 반복하게 하면 훈련 데이터를 그대로 내뱉는다는 점을 지적한 후, 이를 실제로 구현한 사람이 있다는 것에 대해 긍정적인 반응.
          + 이로 인해 추가적인 질문이 제기됨:
              1. 'AI 없는 AI' 접근법이 기존의 모델 압축 방식보다 에너지 효율적인가?
              2. 이 결과가 OpenAI와 Stability AI에 대한 소송에 증거로 사용될 수 있는가?
     * 주의력(Attention)과 FF(Feed Forward) 네트워크가 같은 방향을 가리키는 현상에 대해 놀람을 표함.
          + FF 네트워크가 임의의 회전을 할 수 있음에도 불구하고, 여러 계층에서 같은 잠재 공간에 있을 것이라고는 예상하지 못함.
     * Andrej Karpathy의 NanoGPT 튜토리얼을 따라 작은 모델을 훈련시켰을 때, 복잡한 러시아어 문법을 어느 정도 이해하는 것으로 보임.
          + 모델은 완벽하지 않지만, 3분의 훈련만으로 복잡한 규칙을 유추할 수 있었음.
     * LLM이 마르코프 체인 텍스트 생성기인지에 대한 질문.
          + 만약 그렇다면, 원본 훈련 데이터를 사용하여 유사한 성능의 마르코프 체인을 구축할 수 있을지에 대한 의문 제기.
     * 연구된 모델은 실제로는 단순한 장난감 모델로, 더 간단한 모델로도 근사화할 수 있음.
          + 그러나 이 모델이 더 큰 LLM의 작동 방식을 대표하지는 않을 수 있음.
     * 저자가 주장하는 바를 정확히 이해하기 어려움.
          + '근사화가 작동하는 이유' 섹션을 여러 번 읽었지만, 단지 트랜스포머의 단계적 설명처럼 느껴짐.
     * LLM 시스템의 3D 시각화가 유익하며, 최대한의 효과를 위해 함께 읽어야 함.
     * 트랜스포머가 실제로 하는 일에 대한 이상한 게시물.
          + 코드를 따라가면 트랜스포머가 무엇을 하는지 정확히 볼 수 있음.
"
"https://news.hada.io/topic?id=13201","미국의 자동차 보험료가 지나치게 저렴함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         미국의 자동차 보험료가 지나치게 저렴함

미국에서 자동차 보험은 실제로 너무 저렴함

     * 2010년, 에릭 듀베리와 그의 두 살배기 아들 시머스가 오리건 주 포틀랜드의 거리를 건너던 중, 한 노인 운전자가 가속페달과 브레이크를 혼동하여 두 사람과 다른 한 남자를 들이받음.
     * 사고로 시머스는 병원에서 치료를 받았으나 다음 날 사망, 병원은 듀베리 부부의 보험에 18만 달러를 청구함.
     * 듀베리 부부는 자신들의 치료비 중 4,500달러를 직접 부담해야 했으며, 일을 쉬어야 했던 시간에 대한 보상도 받지 못함.
     * 듀베리 씨는 적어도 가해 운전자의 자동차 보험에서 일부 비용을 지불받을 것으로 기대했으나, 가해자의 책임 보험 한도는 피해자당 10만 달러에 불과했음.
     * 듀베리 부부의 건강 및 자동차 보험사가 모든 보험금을 청구하여 실제로 듀베리 부부가 받을 수 있는 금액은 없었으며, 변호사의 도움으로 일부를 되찾았지만, 듀베리 씨는 여전히 ""이렇게 어려울 수 있나""라는 생각에 남아 있음.

GN⁺의 의견

     * 이 기사는 미국 내 자동차 보험의 문제점을 실제 사례를 통해 조명함으로써, 보험의 중요성과 적절한 보장 한도의 필요성을 강조함.
     * 사고 발생 시 충분한 보상을 받지 못하는 피해자의 어려움을 보여주며, 보험 정책에 대한 재검토와 개선의 필요성을 시사함.
     * 이러한 내용은 보험 가입자들에게 자신의 보험 정책을 재검토하고, 필요한 경우 추가 보장을 고려하도록 하는 유익한 정보를 제공함.

        Hacker News 의견

     * LED 헤드라이트 문제
          + 백색 LED 헤드라이트가 늘어나면서 심각한 사고가 증가함.
          + 이러한 헤드라이트는 운전자에게 시야를 제공하지만 다른 사람들을 실명시킬 수 있음.
          + 공유 자원의 비극으로, 연방 차원에서의 신속한 개입이 필요함.
     * 캘리포니아 자동차 보험의 가격 상한
          + 캘리포니아에서는 자동차 보험에 가격 상한이 있어 부족 현상을 초래함.
          + 2024년 12월에 시장이 실패하여 보험 가입이 거의 불가능해짐.
          + 대부분의 보험사가 오프라인 지점을 닫고 온라인 신청도 받지 않음.
          + 캘리포니아는 공급을 의무화하려 하고 있으나 보험사들은 이를 늦추는 수동적 공격적 전술을 사용함.
     * 독일 자동차 보험 경험
          + 2004년 독일로 이사할 때, 자동차 보험 가입이 주요 과제였음.
          + 독일에서는 사고 발생 시 모든 비용을 책임져야 하며, 최소 보험 금액이 매우 높음.
          + 보험 가입 비용이 높고, 미국에서의 운전 경력이 제한적으로 인정됨.
          + 사고 피해자 가족이 의료비를 부담하는 것은 비인간적임.
     * 보험료의 큰 차이에 대한 혼란
          + 보험사 간 보험료가 크게 달라짐에도 불구하고, 기본적인 위험 평가 전략은 비슷함.
          + 경쟁이 치열하여 경쟁사의 요율을 분석할 수 있는 방법이 있음.
          + 보험은 가능한 한 크고 다양한 위험 풀을 기반으로 함.
          + 다양한 보험사로 인구가 분산되는 것은 이에 반함.
     * 미보험/부족보험 운전자 보장 구매의 중요성
          + 미보험/부족보험 운전자 보장을 구매하는 것이 중요함.
          + 책임 보험이 모든 것이며, 차량 가치는 중요하지 않음.
          + 집에 대한 종합 보험 정책을 구매하고, 차를 렌트할 때는 책임 보험을 구매해야 함.
     * 기본 보험의 낮은 책임 한도
          + 기본 보험은 피해자당 책임 한도가 낮음.
          + 책임 한도를 높이는 것은 비용이 많이 들지 않음.
          + 문제는 저렴한 보험뿐만 아니라 비싼 의료비도 포함됨.
     * 플로리다의 높은 자동차 보험료
          + 플로리다는 미국에서 가장 높은 자동차 보험료를 가짐.
          + 많은 운전자가 무보험 또는 부족보험 상태이며, 이는 보험료 상승의 원인 중 하나임.
          + 플로리다는 '무과실' 주로, 간단한 접촉사고에는 잘 작동하지만 심각한 사고에서는 복잡하고 비용이 많이 듬.
     * 운전자의 주의 산만 문제
          + 운전 중에 틱톡과 같은 앱을 사용하는 사람들이 증가하고 있음.
          + 운전자들이 스마트폰 중독에 빠져 운전에 집중하지 않고, 이로 인해 공격적인 환경이 조성됨.
     * 브리티시 컬럼비아의 자동차 보험 시스템 개편
          + 브리티시 컬럼비아에서는 최근 자동차 보험 시스템이 대대적으로 개편됨.
          + 공공 독점으로 인해 높은 가격에 대한 불만이 있었으나, 소송권을 제한하고 보험사가 장기 의료비를 부담하도록 변경됨.
          + 사고 피해자가 소송을 통해 합의금을 받는 대신 보험사가 비용을 부담하도록 함.
          + 미보험 운전자 보험을 최대한도로 구매하는 것이 중요함.
"
"https://news.hada.io/topic?id=13176",""어리석다", "부끄럽다": Y Combinator CEO Garry Tan의 분노에 대한 기술 종사자들의 반응","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""어리석다"", ""부끄럽다"": Y Combinator CEO Garry Tan의 분노에 대한 기술 종사자들의 반응

     * Garry Tan의 트위터 맹비난
          + 주말 동안 Garry Tan이 술에 취해 소셜 미디어에 쓴 글에서 샌프란시스코의 정치인들 7명이 ""Die slow, 천천히 죽어야 한다""고 말한 것에 대해, 샌프란시스코의 기술 종사자들은 Y Combinator CEO에게 ""부끄러운 짓"", ""정말 멍청한 행동"", ""매우 어리석은 행동""이라고 비판함.
          + DeepAI의 공동 창업자이자 CEO인 Kevin Baragona는 Tan이 그런 행동을 해서는 안 되며, 잠시 동안 물러나야 하며, 더 이상 기술계를 대표해서는 안 된다고 말함.
          + Y Combinator 동문은 회사 내부 메시지 보드인 Bookface와 일일 이메일 업데이트를 확인하고 있지만, 회사로부터 아무런 소통이 없었다고 언급함.
          + Y Combinator 소유의 공개 게시판인 Hacker News에서는 Tan의 행동에 대한 수백 개의 댓글이 달리며 논쟁이 벌어짐. 일부는 Tan이 사임해야 한다고 주장함.
     * Garry Tan의 온라인 맹비난으로 인한 위협
          + Tan의 글로 인해 실제로 위협적인 결과가 발생함: 세 명이 자신의 집에서 동일한 위협적인 엽서를 받음.
          + 엽서에는 ""Garry Tan이 옳다! 당신과 당신의 사랑하는 사람들에게 느리고 고통스러운 죽음을 바란다""고 적혀 있었음.
          + 샌프란시스코 경찰서는 이 엽서를 조사 중이며, Tan이 후원한 지방 검사는 잠재적인 사건에 대해 자신을 기피하고 캘리포니아 법무장관에게 사건을 넘김.
          + Tan은 자신의 글이 투팍 샤커의 가사를 참조한 것이라고 해명하며 사과함. 처음에는 농담으로 치부했지만, 이후 사건을 더 심각하게 받아들임.
     * 진정한 분노에서 비롯된 Tan의 트윗
          + Tan이 지목한 사람들은 빠르게 대응하여 경찰에 신고하고 시 법무관과 상담함.
          + Tan이 지지한 최소 두 명의 후보는 Tan의 언어 사용을 용인하지 않음.
          + 샌프란시스코의 기술 창업자들은 Tan의 발언이 술에 취한 실수라고 보면서도, 그의 정치적 접근 방식이 순진하다고 평가함.
          + Tan과 Y Combinator는 샌프란시스코와 실리콘밸리에서 큰 영향력을 가지고 있으며, 매년 수백 개의 회사를 관리하며, 이들 회사는 현재 약 6000억 달러의 가치를 지님.
     * Garry Tan의 캠페인 기부금 탐색
          + 캠페인 기부금에 대한 구체적인 내용은 언급되지 않았으나, Tan이 정치 캠페인에 기부금을 기부한 것으로 보임.

   GN⁺의 의견:
     * 이 기사는 Y Combinator의 CEO인 Garry Tan의 부적절한 소셜 미디어 발언과 그로 인한 샌프란시스코 지역사회의 반응을 다루고 있음. 이 사건은 기술계 리더의 공개적인 행동과 발언이 어떻게 실제 세계에 영향을 미칠 수 있는지를 보여줌.
     * Tan의 발언은 실제로 위협적인 결과를 초래했으며, 이는 기술계 리더들이 정치적 발언을 할 때 그 영향력과 책임을 신중하게 고려해야 한다는 중요한 사례를 제공함.
     * 이 기사는 기술계와 정치의 교차점에서 발생하는 긴장과 기술 리더들이 지역사회에 미치는 영향에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 댓글 작성자는 다른 사람들이 이 사건을 평범하거나 대수롭지 않게 여기는 것에 대해 놀라움을 표현함. 작성자는 이러한 행동이 어린이나 청소년에게서 나타날 수 있지만, 성인이라면 말의 중요성과 그 결과를 이해하고, 존중과 예의를 가져야 한다고 주장함. 누군가에게 느린 죽음을 바란다는 것은 이러한 존중과 예의가 결여된 것이라고 강조함.
     * Gary Tan은 자신의 발언이 투팍 샤커의 가사를 인용한 것이라고 해명하며 사과함. 하지만 댓글 작성자는 인용이라 해도 그것이 사용자의 말이 아니라는 변명을 받아들일 수 없다고 비판함.
     * YC 동문이자 Gary Tan과 직접 일해본 사람으로서, 그의 트윗은 평소 알고 있던 그의 성격과 맞지 않다고 언급함. Gary Tan이 변했을 가능성에 대해 의문을 제기하며, 그에게 의심의 여지를 주지 않으려는 경향을 보임.
     * CEO가 도덕적으로 그러한 발언을 해야 하는지는 한 가지 문제이고, CEO로서 직무를 제대로 수행하지 못했다는 것은 또 다른 문제라고 지적함. CEO는 회사의 공개적인 얼굴이며, 이를 매우 형편없이 수행했다고 비판함. 많은 회사에서는 이런 행동이 해임 사유가 될 수 있다고 언급함.
     * 댓글 작성자는 Dan Preston에 대해 알지 못했지만, 그가 샌프란시스코에서 빈 주택에 대한 세금을 제안한 것을 알고 나서 그를 좋아하게 되었다고 함.
     * CEO를 포함한 사용자들이 트윗을 보내기 전에 그것이 불쾌할 수 있는지 경고해주는 새로운 LLM(언어 모델)에 대한 아이디어를 제시함.
     * 샌프란시스코 거주자로서, 정책 기반으로 멋진 도시와 주가 파괴되는 것을 보는 것이 매우 고통스럽다고 표현함.
     * 이 사건은 알코올이 개인의 삶과 경력에 어떤 영향을 미칠 수 있는지에 대한 고전적인 교훈이라고 댓글을 담음.
     * 댓글 작성자는 특정 역할을 수행하는 사람들에게 더 높은 기준을 적용하는 것이 더 이상 말이 되지 않으며, 이러한 높은 기준이 실제로는 그 기준을 믿는 사람들에게 해를 끼친다고 주장함. 우리 모두 인간임을 인정할 때가 되었다고 언급함.
     * 관련 링크로 이전 논의를 참조할 수 있음.
"
"https://news.hada.io/topic?id=13198","당신의 CPAP을 단 666일 만에 교체하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      당신의 CPAP을 단 666일 만에 교체하는 방법

CPAP 교체기: 666일간의 삶과 투쟁

     * CPAP 기기 고장으로 시작된 거의 2년에 걸친 번거로운 보험 청구 과정의 경험담.
     * Anthem 보험사와의 수많은 고객 지원 문제들 중 하나로, 청구 과정에서의 예의 유지, 모든 것 문서화, 로그 유지, 청구 절차 따르기, 주별 보험 청구 법규 확인, 법적 마감일 지나면 고객 서비스에 전화, 주 규제 기관에 불만 제기 및 CEO 팀에 직접 문의할 것을 조언.

CPAP 기기 고장과 청구 과정

     * CPAP 기기가 고장나자 Anthem Ohio에 수리 방법 문의, 지역 의료 기기 제공업체 목록을 받고 연락을 시도함.
     * 대부분의 목록에 있는 업체들이 CPAP 서비스를 제공하지 않음을 발견, 의사의 지시가 없으면 수리를 해주지 않는 업체도 있음.
     * 원래 CPAP을 제공한 수면 센터와 주치의에 연락하여 서로 대화하도록 요청함.
     * 34일째에 Anthem으로부터 CPAP 교체 승인을 받고, 대기 목록에 올라감.
     * 233일 동안 의료 기기 회사에 정기적으로 연락하며 진행 상황을 확인하나, 재고 부족으로 진전이 없음을 알게 됨.

CPAP.com을 통한 해결책과 추가 문제

     * CPAP.com에서 필요한 기기가 재고가 있음을 확인하고 3,000달러 이상 지불하여 구입함.
     * 온라인으로 Anthem에 청구서 제출, 필요한 모든 문서를 포함시킴.
     * 청구서 제출 후 Anthem으로부터 이해할 수 없는 항소 관련 편지를 받고, 청구서에 대한 언급이 없음.
     * Anthem 웹사이트와 고객 서비스에서 청구 기록을 찾을 수 없게 되고, 청구서를 다시 우편으로 제출하라는 지시를 받음.

Anthem과의 지속적인 통신과 문제 해결

     * Anthem 고객 서비스와의 추가 통화에서 청구서가 사라진 것을 발견하고, 청구서가 없다는 답변을 받음.
     * CPAP.com에 연락하여 Anthem이 회원이 직접 장비에 대한 청구를 할 수 없다고 말한 것에 대해 문의함.
     * Anthem에 다시 연락하여 청구서를 제출했음을 확인하고, 청구서를 세 번째로 작성하여 등기 우편으로 보냄.
     * Anthem에 다시 연락하여 청구서에 대한 답변을 요구하고, 청구서가 거부된 것을 알게 됨.

법적 조치와 최종 해결

     * 보험은 규제된 산업이므로, 오하이오 법률을 확인하고, 보험사가 청구에 대해 30일 이내에 응답해야 함을 발견함.
     * 오하이오 보험부에 불만을 제기하고, Anthem이 법적 마감일을 넘긴 것을 알림.
     * Anthem으로부터 청구서가 시스템에 등록되었으며 처리 중이라는 이메일을 받음.
     * Anthem의 청구서 처리가 지연되면서, CEO에게 이메일을 보내고, 이후 Anthem의 집행 임원으로부터 연락을 받음.
     * Anthem의 집행 임원이 청구서 문제를 해결하고, 청구서를 전액 지급하기로 결정함.
     * 666일 만에 체크를 받고 입금함.

   GN⁺의 의견
     * 이 사례는 건강 보험 청구 과정에서 발생할 수 있는 복잡성과 지연에 대한 실제 경험을 보여줌.
     * 청구 과정에서의 인내와 문서화의 중요성을 강조하며, 보험사와의 소통에서 발생할 수 있는 문제점을 드러냄.
     * 이 이야기는 보험 청구자들에게 청구 과정을 이해하고, 필요한 조치를 취하는 데 도움이 될 수 있는 통찰력을 제공함.

        Hacker News 의견

     * 베트남에서 미국의 CPAP 기계를 수입하는 것은 실제로 모험이 될 수 있음.
          + 베트남에서 CPAP 기계의 비용이 $650에서 $2K 이상으로 상승함.
          + 미국에서 처방전이 필요하며, 온라인 서비스를 통해 간단한 비디오 통화로 ""처방전""을 받음.
          + 화물 전달 서비스를 이용하여 기계를 보냈지만 서류 작업에 문제가 발생함.
          + 베트남 관세에서 거의 4개월 동안 보류됨.
          + 관세에서는 기계가 중고처럼 보인다거나 재판매 목적으로 수입한다고 의심받음.
          + 처방전을 가져오라는 요구에도 불구하고 베트남에서는 CPAP에 대한 처방전을 작성하지 않음.
          + 수면 무호흡 검사 결과가 충분한 증거로 인정받아 결국 기계를 받아냄.
          + 그럼에도 불구하고 미국의 보험 시스템보다는 이러한 무작위 관료주의를 선호함.
     * CPAP 기계와 미국 보험의 ""컴플라이언스"" 문제.
          + 보험사들은 기계 사용 로그에 접근을 요구하며, 실제로 사용하는지 확인하기 전까지 비용을 보상하지 않음.
          + CPAP 기계에는 데이터 업로드를 위한 셀룰러 모뎀을 포함한 복잡한 방해 방지 로깅 메커니즘이 있음.
          + 이러한 감시는 침해적이고 침입적이며 수면 무호흡 치료에 해를 끼침.
          + CPAP가 필요한 사람들 중 절반 정도가 사용법을 익히는 데 어려움을 겪으며, 이로 인해 CPAP 사용을 포기함.
          + 수면 무호흡이 의심되면 의사와 상담할 것을 권장하며, CPAP는 많은 사람들에게 효과적이지만 다른 치료 옵션도 있음.
     * 복잡한 회사 절차를 사용할 필요는 없음.
          + 보험 정책을 확인하고 새 기계에 돈을 지불한 후 보험사에 환급을 요청함.
          + 30일 이내에 환급이 이루어지지 않으면 소액 청구 소송을 제기함.
          + 보험사는 법정에 나타나거나 집행관을 본사로 보내는 것을 원하지 않으므로 결국 지불함.
     * 보험 청구 관리 프로세스 흐름에 대한 경험.
          + 이야기는 미국의 보험사인 Anthem의 뒷단 프로세스에 심각한 결함이 있음을 암시함.
          + 복잡한 프로세스는 유효한 청구를 관료주의의 블랙홀에 빠뜨려 지불을 피할 수 있게 함.
          + 그러나 실제로는 청구 처리 관리 결정과 비용을 지불하는 결정 사이에 종종 연결이 없음.
          + Anthem과 같은 보험사에서는 대부분의 비용을 실제로 Anthem이 아닌 제3자 관리자나 연방 정부가 부담함.
          + 이 청구는 Anthem이 직접 지불하는 것보다 처리 비용이 훨씬 많이 들었을 것임.
          + 문제를 해결하기 위한 투자의 ROI를 추정하기 어렵기 때문에 많은 작은 사례들을 강조하여 변화의 필요성을 인식시키는 것이 중요함.
     * Kaiser Permanente를 사용하는 건강 관리 제공자의 경험.
          + Kaiser는 통합 치료 제공자로서 건강 보험과 건강 관리 제공자 역할을 함께 함.
          + Kaiser는 완벽하지 않지만, 이러한 악몽과 같은 문제는 발생하지 않음.
          + Kaiser에서 의사가 처방하면 보장됨이 보장되며, 별도의 청구 부서가 없음.
          + Kaiser를 선택함으로써 연간 $3000을 절약하고, Kaiser 병원에 입원할 때마다 청구서를 볼 일이 없다는 안심함.
          + 더 많은 통합 시스템이 필요하며, 완전 통합된 커버리지를 제공하는 경쟁 병원 시스템을 선택할 수 있는 경쟁이 있어야 함.
     * 영국이 NHS를 보수당의 점진적 해체 시도에도 불구하고 꽉 붙잡고 있는 이유를 이해할 수 있음.
     * 모든 건강 보험 시도가 이와 같으며, 다른 산업에서라면 이를 ""사기""라고 부를 것임.
     * 미국에서 혁신적인 치료법을 시장에 출시하는 데 있어 보험 환급이 가장 큰 장벽임.
          + 기술은 수십 년 동안 검증되었지만, 미국 보험이 치료법을 커버하는 것은 싸움임.
          + 보험 청구를 위한 전문 팀이 있으며, 미국 외부에서는 보험 장벽이 훨씬 낮음.
     * 미국에서 호주로 방문한 사람이 처방전 없이 저렴하게 CPAP를 살 수 있는 것에 놀람.
     * 이 이야기를 읽고 분노함. 많은 사람들이 포기했을 것이지만, 저자는 포기하지 않고 문제를 해결함.
"
"https://news.hada.io/topic?id=13272","제미니 울트라 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               제미니 울트라 출시

구글 로그인 페이지의 새로운 모습

     * 구글이 더 현대적인 느낌의 로그인 페이지로 개선될 예정임.
     * 사용자는 구글 계정을 이용하여 이메일이나 전화번호로 로그인할 수 있음.
     * '이메일을 잊으셨나요?', '게스트 모드로 비공개 로그인하기', '다음' 버튼, '계정 만들기' 등의 옵션이 제공됨.

추가 기능 및 지원

     * 사용자는 '게스트 모드'를 사용하여 개인 정보를 보호하며 로그인할 수 있는 방법에 대해 배울 수 있음.
     * 페이지 하단에는 '도움말', '개인정보', '약관' 링크가 제공되어 추가 정보와 지원을 받을 수 있음.

GN⁺의 의견

     * 구글 로그인 페이지의 개선은 사용자 경험을 향상시키는 중요한 단계로, 더욱 직관적이고 현대적인 디자인이 기대됨.
     * '게스트 모드'와 같은 개인 정보 보호 기능은 사용자의 프라이버시를 중시하는 현대적인 인터넷 사용 트렌드를 반영함.
     * 이러한 변화는 구글이 사용자의 편의성과 보안을 지속적으로 개선하려는 노력의 일환으로, 이는 사용자들에게 긍정적인 반응을 이끌어낼 것으로 예상됨.

        Hacker News 의견

     * 해커뉴스 댓글 모음에 대한 요약
          + 더 많은 토론은 해커뉴스의 해당 토론 링크에서 확인할 수 있음.
"
"https://news.hada.io/topic?id=13168","더 나은 마이크로매니저가 되는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           더 나은 마이크로매니저가 되는 법

전략적 마이크로매니지먼트를 위한 단계별 프레임워크

     * 작업 성숙도 파악(Gauge Task Maturity):
          + 업무를 할당할 때 직원의 기술 수준을 평가하기
          + 초보자는 자연스럽게 더 많은 지원이 필요하며, 기술이 발전함에 따라 점차 지원을 줄임
     * 명확한 기준 설정(Set a Clear Baseline):
          + 직원이 프로세스를 수행할 수 있다고 해서 그것을 설계할 적합한 사람이라는 의미는 아님
          + 표준을 정의하고 프로세스를 직접 만들어 문서화하며, 추측을 방지하기 위해 화면 녹화나 실제 비디오를 사용
     * 이해도 검증(Verify Comprehension):
          + 직원에게 프로세스를 다시 설명하게 하고, 녹화된 내용을 사용하여 자신의 SOP(표준 운영 절차)를 작성하게 하기
          + 이해도를 완전히 확인한 후에 업무를 시작하게 하기
     * 결과를 면밀히 모니터링(Monitor Results Closely):
          + 처음에는 자주 확인하고, 빠르고 구체적인 피드백을 제공하기
          + 성공을 칭찬하고, 개선 사항은 개인의 단점이 아닌 시스템에 초점을 맞춤
     * 자율성 증가(Increase Autonomy):
          + 역량이 성장함에 따라 업무 수행과 원래 프로세스 개선에 대한 자율성을 더 부여하기
          + 그러나 중요한 업무에 대해서는 일정한 감독을 유지
          + 목표는 완전한 자급자족이지 감독을 전혀 하지 않는 것이 아님

올바른 실행이 중요

     * 전략적 마이크로 매니지먼트는 올바른 방법으로 실행하면 자율성과 사기를 높일 수 있음
     * 핵심은 무분별하게 사용하지 않고 계획적으로 사용하는 것
     * 다른 기술과 마찬가지로 전략적 마이크로 매니지먼트도 연습이 필요함
     * 하지만 이를 숙달하면 궁극적으로 스스로를 스케일하고 소중한 시간을 되찾을 수 있음
"
"https://news.hada.io/topic?id=13172","구글의 또 다른 비밀 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글의 또 다른 비밀 브라우저

Google Play 서비스 내부의 또 다른 비밀 브라우저 발견

     * Google Play 서비스 내부에 숨겨진 비밀 브라우저가 있음.
     * 이 브라우저는 링크를 통해 접근 가능하며, Google의 일반적인 부모 통제 기능과 '잠금 모드'를 우회할 수 있음.
     * 연락처 앱을 통해 안드로이드 화면 고정 기능을 우회하는 비슷한 방법도 발견됨.

접근 방법은?

     * 연락처 앱에 들어가서 새 연락처를 추가하거나 기존 연락처를 편집함.
     * '추가 필드'를 클릭하고 '웹사이트' 필드에 ""https://gds.google.com/gmsdrops""; 입력 후 저장함.
     * 저장한 연락처의 링크를 클릭하면 Google Play 서비스 앱 내의 비밀 브라우저에 접근할 수 있음.

왜 이 방법이 통하는가?

     * 잠금 모드에서 Google은 모든 앱을 잠그지만, Google Play 서비스와 연락처 앱은 예외임.
     * ""https://gds.google.com/gmsdrops""는 안드로이드 '새로운 기능'으로의 딥링크임.
     * 부모 통제 기능은 딥링크를 열 수 없지만, 연락처 앱을 통해서는 링크를 열 수 있음.

화면 고정 우회

     * 안드로이드 11 이상에서는 화면 고정 기능을 사용하여 특정 앱에서만 사용을 제한할 수 있음.
     * 화면 고정 상태에서는 새 앱을 열 수 없으므로 이전과 같은 링크를 사용할 수 없지만, 팝업 창으로 열리는 Google Podcasts의 딥링크를 사용할 수 있음.

Google의 반응

     * 부모 통제 우회와 안드로이드 화면 고정 우회에 대해 Google에 보고함.
     * Google은 부모 통제 문제를 화면 고정 우회 문제와 합쳐서 처리하고, 중복된 사례를 '잊어버림'.
     * Google은 화면 고정 우회가 의도된 동작이라고 답변함.

   GN⁺의 의견:
     * 이 기사는 Google Play 서비스 내부에 숨겨진 브라우저를 통해 부모 통제 기능과 화면 고정 기능을 우회하는 방법을 공개함으로써, 보안 취약점에 대한 인식을 높이는 데 중요함.
     * 사용자들은 이 정보를 통해 자녀 보호 기능이나 개인 정보 보호 기능에 대한 더 나은 이해를 가질 수 있으며, 필요한 경우 보안 조치를 강화할 수 있음.
     * Google의 반응은 이러한 취약점에 대한 그들의 접근 방식과 우선순위를 반영하며, 사용자와 보안 연구자들에게 중요한 피드백을 제공함.

        Hacker News 의견

     * 어린 시절 은행 로비에 설치된 단일 사이트 브라우저가 있는 컴퓨터 터미널 이야기

     어린 시절, 은행과 유사한 기관들은 로비에 단일 사이트만 볼 수 있는 특수 브라우저를 탑재한 컴퓨터 터미널을 두었음. 이는 'Best Viewed In' 배지가 유행하던 시절이었음. 부모님과 함께 심부름을 갈 때마다, 이 컴퓨터를 찾아 'Best Viewed In' 배지를 클릭하면 제한을 우회하여 netscape.com 같은 사이트로 이동할 수 있었고, 거기서 검색 엔진 링크를 찾아 자유롭게 웹 서핑을 할 수 있었음.
     * 보안 취약점 보고를 다루는 팀은 내부 팀을 가리키며 책임을 회피해선 안 됨

     보안 취약점을 보고하는 팀은 ""다른 내부 팀의 일이니 그들에게 문의하라""고 말해서는 안 됨. 실제로 조직 내의 거의 모든 직원은 신빙성 있는 취약점 보고를 받으면 적절한 사람에게 전달해야 함. 이는 무시해서는 안 될 문제임.
     * 구글의 부모 통제 기능이 미흡함

     구글의 부모 통제 기능은 개선이 필요함. Play Store 앱을 비활성화하는 기능에 대한 요청이 오랫동안 있었지만, 여전히 adb를 사용하지 않고서는 불가능함(adb 사용은 다른 문제를 야기함). 실제 어린이가 테스트한 것 같지 않음. 예를 들어, Play Store에서 비디오가 포함된 스크린샷이 있는 앱을 찾아 YouTube로 이동하는 방식으로 YouTube 시간 제한을 쉽게 우회할 수 있었음. 이 방법은 실제로 저자의 아들이 발견하여 보여줌.
     * Windows 98 로그인 화면 우회 해킹 트릭을 연상시킴

     이는 Windows 98 로그인 화면을 우회하는 해킹 트릭을 떠올리게 함. 구글이 시스템 설계에서 Windows 98 수준으로 나빠질 것이라고는 예상하지 못했음.
     * 컴퓨터 시스템의 내부를 탐구하며 '해킹'하는 첫 경험을 회상함

     가족 컴퓨터에 트로이 목마를 심어 문제를 일으킨 후 아버지가 집에 오기 전에 해결해야 했던 일, 부모님이 인터넷 사용 몇 년 후 갑자기 설치하기로 한 NetNanny 등의 부모 통제 기능을 우회하는 방법 등이 IT 및 엔지니어링 분야로 진로를 결정하는 데 영향을 줌. 리눅스 라이브 CD와 리눅스를 접하게 되었음. 오늘날 해커들도 여전히 이러한 교육을 받고 있음을 알게 됨.
     * 구글 설정 내에 숨겨진 비밀 브라우저에 대한 관련 정보

     구글 설정 내에 숨겨진 비밀 브라우저에 대한 정보가 있음. 2023년 6월에 해커뉴스에서 312개의 댓글이 달린 토론이 있었음.
     * 구글 플레이 서비스가 스스로 새로운 권한을 부여할 수 있다는 사실

     구글 플레이 서비스가 스스로 새로운 권한을 부여할 수 있다고 함. 이것이 어떻게 작동하는지, 루트 권한을 가지고 있는지에 대한 의문이 제기됨.
     * GrapheneOS에서는 샌드박스 처리된 플레이 서비스가 영향을 받지 않음

     GrapheneOS에서는 샌드박스 처리된 플레이 서비스가 영향을 받지 않으며, 전화 앱은 연락처에서 웹 URL을 볼 수 없고, 연락처 앱은 기사에 제시된 두 URL을 고정 모드에서 열지 못함.
     * 2023년 이전 토론에 관심이 있다면

     2023년에 있었던 이전 토론에 관심이 있는 사람들을 위한 링크가 제공됨. 해당 토론에는 312개의 댓글이 달렸음.
"
"https://news.hada.io/topic?id=13195","브라우저 확장 기능의 저평가: 해킹 가능한 소프트웨어의 약속 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                브라우저 확장 기능의 저평가: 해킹 가능한 소프트웨어의 약속 (2019)

브라우저 확장 프로그램은 과소평가되었다: 해킹 가능한 소프트웨어의 약속

     * 브라우저 확장 프로그램은 사용자가 원래 개발자의 의도와 다른 창의적인 방식으로 앱을 수정할 수 있게 함.
     * 스마트폰과 데스크톱 플랫폼에서는 이러한 행위가 드물거나 불가능하지만, 브라우저에서는 일상적인 활동임.
     * 브라우저 확장 프로그램은 컴퓨터 사용에 대한 깊은 제어를 가능하게 함을 상기시킴.

우리만의 소프트웨어 조립하기

     * 소프트웨어 플랫폼이 일정 수준의 개방성에 도달하면, 일반 사용자가 소프트웨어와 관계하는 방식을 근본적으로 바꿀 수 있음.
     * 예를 들어, 다양한 Gmail 확장 프로그램을 설치하여 이메일 클라이언트를 개인화함.
     * 브라우저 확장 프로그램의 인기는 많은 사람들이 소프트웨어를 사용자 정의하는 데 관심이 있음을 증명함.

해킹 가능한 플랫폼, 맞춤형 API가 아님

     * 브라우저 확장 프로그램은 다양한 사용 사례를 가짐.
     * 대부분의 확장 프로그램은 원래 개발자가 특별히 계획하지 않은 방식으로 애플리케이션을 수정함.
     * 웹 플랫폼은 클라이언트 코드를 인간이 읽을 수 있는 형태로 브라우저에 전송하는 클래식한 배포 스타일을 기반으로 함.

작은 도구들, 큰 앱이 아님

     * 많은 브라우저 확장 프로그램은 모든 웹사이트에서 사용할 수 있는 일반적인 도구로 설계됨.
     * 브라우저 확장 프로그램을 통해 제3자도 운영체제뿐만 아니라 도구를 추가할 수 있음.
     * 소프트웨어가 작은 단위로 구축될 때 경제적인 측면도 변화함.

개방성의 기원

     * 웹 플랫폼의 개방성은 우연이 아닌 컴퓨터를 상호작용하는 매체로 사용하는 철학적 전통에서 비롯됨.
     * 팀 버너스 리가 월드 와이드 웹을 창조할 때, 이 전통에 맞게 상상함.
     * 브라우저 확장 프로그램은 우리가 웹 애플리케이션을 사용하는 방식을 깊게 수정할 수 있는 더 깊은 제어를 제공함.

확장 프로그램 개선하기

     * 악의적인 확장 프로그램으로부터 사용자를 보호하는 작업이 필요함.
     * 확장 프로그램을 개선하기 위한 몇 가지 기회가 있음: 접근성, 호환성, 힘.

다음 플랫폼

     * Beaker Browser와 분산 웹 커뮤니티는 중앙 집중식 서버 없이 웹이 작동하는 방식을 탐구 중임.
     * 팀 버너스 리는 SOLID라는 새로운 프로젝트에 참여 중임.
     * 컴퓨팅은 여전히 젊고 플랫폼은 빠르게 변화함.

2024 업데이트

     * 2019년에 작성된 글로, 5년 후 관련 프로젝트에 대한 몇 가지 업데이트가 있음.
     * 트위터를 위한 인기 있는 브라우저 확장 프로그램을 개발하고, 확장 프로그램을 사용하여 일상적인 소프트웨어 문제를 해결하는 방법에 대한 생각을 공유함.
     * 비프로그래머가 스프레드시트에서 브라우저 확장 프로그램을 구축할 수 있게 하는 Wildcard라는 도구를 개발함.
     * 확장 프로그램을 지속 가능한 프로젝트로 만드는 데 관심이 있는 사람들을 위해 ExtensionPay라는 플랫폼을 개발 중임.

   GN⁺의 의견:
    1. 브라우저 확장 프로그램은 사용자가 자신의 소프트웨어 경험을 개인화하고 제어할 수 있는 강력한 도구임.
    2. 확장 프로그램의 개발과 사용은 웹의 개방성과 사용자 참여의 중요성을 강조함.
    3. 보안과 개인 정보 보호는 확장 프로그램의 미래 발전에 있어 중요한 고려 사항이며, 이를 균형 있게 관리하는 것이 중요함.

        Hacker News 의견

     * 해커뉴스 댓글 모음 요약:
          + 글쓴이의 업데이트된 생각:
               o AI의 발전: AI가 코딩 능력을 향상시키고 있으며, 브라우저 확장 기능 작성에 적합함.
               o 보안 문제: 확장 플랫폼의 대중적 배포에 있어 보안이 주요 걸림돌임을 인식. 그러나 맞춤화의 중요성 때문에 경우에 따라 보안보다 우선시될 수 있음.
               o 백엔드 접근의 한계: 확장 기능이 서버 중심의 웹에서 클라이언트 코드에만 접근할 수 있어 많은 깊은 맞춤화가 불가능함.
               o 로컬 퍼스트 소프트웨어 연구: 데이터와 코드가 사용자의 장치에 존재하는 협업 소프트웨어 개발에 집중하고 있음.
          + 브라우저 확장 기능에 대한 다양한 의견:
               o 구글 크롬 확장 기능의 문제점: 구글 크롬이 API를 변경하여 확장 기능 개발자들에게 위험을 초래할 수 있음.
               o 확장 기능의 보안/개인정보 문제: 많은 확장 기능이 데이터 브로커에 의해 인수되어 사용자의 브라우저 기록을 빼돌릴 수 있음.
               o 확장 기능의 권한 문제: 더 세밀한 권한 부여가 필요하지만, 소프트웨어가 권한을 악용하는 것을 검증하는 것은 어려움.
               o 리눅스 사용자의 관점: 확장 기능보다는 오픈 소스 소프트웨어에 대한 제어가 더 중요함을 강조.
               o 확장 기능의 투명성 문제: 확장 기능이 어떤 데이터에 접근할 수 있는지 사용자가 이해하기 어려움.
               o 확장 기능 개발자의 경험: 데이터 브로커들이 확장 기능을 사려고 하며, 이는 사용자에게 위험을 초래할 수 있음.
               o 북마클릿의 장점: 쉽게 편집 가능하고 모든 브라우저 및 모바일에서 작동함.
               o 사용자 스크립트와 스타일: 확장 기능만큼 강력하지는 않지만, 브라우저에서 쉽게 생성하고 사용할 수 있음.
               o 확장 기능의 소스 코드 접근성: 확장 기능의 소스 코드를 쉽게 볼 수 있어야 하며, 암호화된 코드는 금지되어야 함.
"
"https://news.hada.io/topic?id=13210","수학 유튜버 3blue1brown, 본인의 목소리를 학습한 AI를 이용해 시범적으로 한국어 더빙 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        수학 유튜버 3blue1brown, 본인의 목소리를 학습한 AI를 이용해 시범적으로 한국어 더빙 제작

     * 3blue1brown 본인의 목소리로 더빙된 한국어 음성을 시범적으로 π가 정규 분포에 있는 이유(적분 트릭을 넘어서) 영상에 추가
          + 주하진 씨께서 동영상 대본 번역을 검토
     * 설정 → 오디오 트랙에서 '한국어'를 선택하면 이용할 수 있음
     * 한국어 음성 제공은 아래와 같은 과정으로 이루어짐
          + 원본 동영상의 내용을 텍스트로 전사
          + 각 문장을 번역
          + 번역한 문장을 검증(여기서 커뮤니티의 도움이 필요함)
          + 3blue1brown 본인의 목소리를 학습한 TTS에 번역문을 넣어 결과 음성을 만듦
          + 결과 음성을 유튜브에 업로드
     * 한국어 외에도 다양한 언어로 더빙을 제공할 계획이 있음
     * GitHub에서 번역을 검토할 수 있으며, 번역자 커뮤니티는 Discord에 개설

   제가 하고싶은건데 어디서부터 시작해야 할지 막막합니다...

   영어랑 한국어랑 다른 사람이 말하는 느낌같은데 너무 자연스럽네요. 이것도 10년 지나면 어색함을 느끼겠죠?

   어떤 프로그램을 쓴걸까요? 제가 본것중 가장 자연스러운것 같습니다..

   와 너무 좋아요. 특히나 심볼로 설명이 많은 채널이라 자막보랴 영상보랴 힘들었는데, 훨씬 보는게 편하네요.

   영화 검사외전에서 강동원의 대사 중에 펜실베니아 영어 악센트가 경상도 사투리랑 비슷하다는 드립이 있는데요.

   정말 경상도 출신 서울말 쓰는 사람이 말하는거 같네요 ㄷㄷㄷ

   이거 정말 더빙인가요?

   와 너무 자연스러와요.

   와 더빙 품질이 정말 훌륭하네요.
"
"https://news.hada.io/topic?id=13267","FCC, 로보콜에서 AI 생성 음성을 불법으로 규정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      FCC, 로보콜에서 AI 생성 음성을 불법으로 규정

        Hacker News 의견

     * FCC가 내린 이러한 결정의 법적 근거는 'Chevron Deference'라는 원칙이며, 이 원칙이 공격받고 있다고 여겨짐.

     Chevron Deference에 대한 설명이 필요할 수 있음: 이는 연방 행정기관의 해석을 법원이 존중해야 한다는 원칙임.
     * 한 사용자는 낯선 번호로부터 전화를 받았을 때, 아내의 목소리로 ""안녕하세요?""라는 녹음된 메시지를 들었고, 이후로는 발신자를 알 때만 전화를 받음.

     이는 AI 목소리를 이용한 스팸 전화에 대한 개인적 경험을 나타냄.
     * IVR 시스템도 이번 판결로 인해 불법이 되는지 궁금함. AI 생성 목소리가 이미 오랫동안 사용되어 왔기 때문에, 목소리의 질에 대한 구체적인 기준이 있는지 의문을 제기함.

     IVR(Interactive Voice Response) 시스템은 자동 응답 시스템을 의미함.
     * TCPA의 ""인공 또는 녹음된 목소리"" 사용 제한이 현재 AI 기술에 의해 생성된 인간의 목소리를 포함한다고 명시함. 따라서 이러한 기술을 사용하는 전화는 TCPA 및 위원회의 규칙에 따라 사전 명시적 동의가 필요함.

     TCPA(Telephone Consumer Protection Act)는 소비자를 보호하기 위한 법률임.
     * FCC가 현재 법(TCPA)을 공식 해석하여 AI 생성 목소리를 사용하는 로보콜이 해당 법을 위반한다고 명확히 함. 이는 합리적인 조치로 보임.

     로보콜(Robocall)은 자동화된 전화 시스템을 통해 이루어지는 전화를 의미함.
     * FCC의 결정이 AI 발신 전화 회사들에게 치명적이지만, 인바운드 회사에는 영향을 주지 않는 것으로 보임. AI 생성 목소리에 대한 명시적 언급이 있으나, 전통적인 TTS(Text-to-Speech) 엔진에 의해 생성된 목소리는 괜찮은지 의문을 제기함.
     * 로보콜에 대한 발신자 ID 식별 라벨을 부여하는 것이 더 적절한 조치였을 것임. 예를 들어, ""경찰관 협회 [로보콜]""과 같이 표시될 수 있음.
     * FCC가 AI 생성 목소리를 사용한 전화를 '인공'으로 인식하는 선언적 판결을 만장일치로 채택함. 이는 인공 로보콜이 이미 불법이라는 점에서 불법이라는 의미임.
     * 로보콜의 문제를 해결하기보다는 증상에만 초점을 맞추고 있는 것 같음. 로보콜의 가장 큰 문제 중 하나는 발신자가 누구인지 알 수 없고, 스팸 신고 도구가 효과적이지 않다는 것임. 예를 들어, 전화를 받을 때 ""이 번호는 [개인 또는 회사]에 등록되어 있음""을 알 수 있어야 하며, 스팸 신고는 해당 당사자의 전화망 사용 능력을 저해해야 함.
     * 목소리가 AI에 의해 생성되었다는 것을 어떻게 증명하고, 발신자에게 어떤 처벌을 가할 것인지에 대한 질문이 제기됨. 스팸 전화를 법으로 규제하려는 시도가 계속되고 있지만, 집행은 부족한 상태임.
"
"https://news.hada.io/topic?id=13194","웹을 위한 코드 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              웹을 위한 코드 작성

Apple은 개발자를 신경 쓰지 않음

     * Apple은 고객으로서는 신경을 쓰지만 개발자로서는 신경 쓰지 않음.
     * 개발자와 Apple, 그리고 Apple과 소비자 사이의 의존성은 단방향임.
     * 모든 개발자가 Apple 플랫폼을 위한 개발을 중단해도 Apple은 거의 영향을 받지 않음.

Google의 버그

     * Google 검색이 밤에는 밝은 모드로, 아침에는 어두운 모드로 나타나는 버그가 있음.
     * 이 버그는 Google의 수익에 영향을 주지 않기 때문에 해결되지 않고 있음.

Apple의 가치 제안

     * 2009년경, 보안과 기술 지원 문제로 인해 어머니를 위한 컴퓨터를 찾는 데 어려움을 겪음.
     * Apple 제품이 이러한 문제를 해결해주는 가치를 제공함.
     * Apple은 개발자가 아닌 소비자에게 초점을 맞추고 있음.

Apple Music API의 한계

     * Apple Music API는 여전히 버그가 많고 공개되지 않음.
     * API를 사용하기 위해서는 Apple에게 비용을 지불해야 함.
     * 이러한 제한 때문에 음악 플레이어에 대한 혁신이 부족함.

웹을 위한 코드 작성

     * 웹은 단일 기업이 소유하지 않는 공유 플랫폼임.
     * 웹 플랫폼은 여러 위험에 처해 있지만, 지금까지는 살아남았음.
     * Google은 웹을 위해 좋은 일을 하고 있음.

회사와의 관계 재평가

     * 회사를 좋고 나쁨으로 나누는 것은 유용하지 않음.
     * 회사도 사람처럼 다양한 특성을 가지고 있음.
     * 회사와의 상호작용을 유동적으로 가져갈 수 있음.

   GN⁺의 의견
     * 이 글에서 가장 중요한 것은 개발자로서 Apple과 Google과 같은 대기업과의 관계를 이해하고, 그들의 제품과 서비스를 사용하는 방식을 재고하는 것임.
     * 웹 플랫폼의 중요성을 강조하며, 개발자들이 웹을 통해 더 자유롭고 독립적으로 작업할 수 있는 환경을 창출할 수 있음을 보여줌.
     * 회사와의 관계를 유연하게 가져가며, 그들의 제품과 서비스를 소비하는 방식에 대해 비판적으로 생각하는 것이 도움이 될 수 있음을 시사함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 웹 개발에 집중한 선택이 옳았다고 생각함.
          + 대부분의 앱은 웹앱으로 충분했을 것이며, 몇몇 예외를 제외하고는 네이티브 모바일 개발에 투자할 필요가 없었음.
          + 언론 업계에서 일하며, 초기 10년대에 많은 미디어가 제한된 자금을 모바일 앱 개발에 투자하는 것을 목격함.
          + 이러한 추세에 반대했으며, 대부분의 앱이 품질이 낮고 유지보수가 제대로 이루어지지 않을 것임을 알고 있었음.
          + 결과적으로, 유지보수가 거의 이루어지지 않는 오래된 앱들로 남게 됨.
     * 두 번째 댓글 요약:
          + 애플은 개발자보다 사용자에게 집중하며, 개발자들은 시장 점유율을 잃지 않기 위해 애플 플랫폼에 제품을 출시할 수밖에 없음.
          + 모바일 게임 개발자로서 애플의 기술적 문제와 정책, 승인 과정에 지속적으로 도전받고 있음.
          + 마이크로소프트는 개발자에게 친화적인 전략을 사용했으며, 이는 윈도우즈 소프트웨어 생태계의 성장을 이끌었음.
     * 세 번째 댓글 요약:
          + Swift와 iOS 개발 학습을 시도했으나 XCode의 UI/UX에 적응하지 못함.
          + XCode는 시각적으로 예쁘고 최소주의적이지만, 개발자에게 낮은 마찰을 제공하지 않음.
          + 개발자마다 다른 요구에 맞게 IDE를 사용자 정의할 수 있어야 함.
     * 네 번째 댓글 요약:
          + 애플 개발자 계정 설정 경험이 매우 불편했음.
          + 개인 계정 대신 업무용 계정을 만들어야 했고, 애플의 확인 절차가 번거로웠음.
          + 애플 개발자 계정에 대한 지불이 필요했으며, 조직적인 신용카드 관리와 연간 검토가 필요했음.
     * 다섯 번째 댓글 요약:
          + 웹은 이론적으로 좋지만, 브라우저 환경의 기본 기능 부족으로 앱 개발에는 매력적이지 않음.
          + 애플 플랫폼과 같은 통합적인 개발 환경에 익숙한 개발자에게 웹앱 개발은 많은 의존성을 필요로 함.
          + 브라우저가 기본적인 기능을 제공하지 않아서 추가 라이브러리나 맞춤 코드 작성이 필요함.
     * 여섯 번째 댓글 요약:
          + 웹/WWW의 개방성을 잊기 쉬우며, 애플과 구글이 독점한 앱 생태계와 비교할 때 여전히 개방적임.
          + 앱 생태계에서는 선택지가 제한되어 있으며, 전체 비즈니스를 앱에 의존하는 것을 개인적으로 선호하지 않음.
     * 일곱 번째 댓글 요약:
          + 개발자들이 아이폰에 가치를 더해주고 있으나, 애플은 개발자들에게 고객 접근을 허용하는 것으로 호의를 베푸는 것처럼 주장함.
          + 애플의 시장 지배력 남용으로 인해 개발자들은 애플의 엄격한 정책에 따를 수밖에 없으며, 웹 출판이 유일한 대안임.
     * 여덟 번째 댓글 요약:
          + 애플 사용자들은 지불에 익숙하며, 애플 애플리케이션은 다른 플랫폼보다 높은 구매율을 가짐.
          + 개발자들은 애플이 개발자를 신경 쓴다고 생각하지 않으며, 애플은 개발 플랫폼에 대한 투자를 통해 개발자를 지원함.
     * 아홉 번째 댓글 요약:
          + 대기업에 대한 건강한 태도를 가지고 있으며, 아이폰이나 아이패드에 앱을 설치하지 않아도 되는 환경을 선호함.
          + 웹 개발에 대한 복잡성이 진입 장벽이 되고 있으며, 간단한 웹앱 스택을 찾고 있음.
"
"https://news.hada.io/topic?id=13187","브라우저 선택을 약화시키는 디자인 전략 사용: 기술적 경계를 넘어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  브라우저 선택을 약화시키는 디자인 전략 사용: 기술적 경계를 넘어

브라우저 선택을 방해하는 디자인 전략의 사용

     * 사람들이 자신의 브라우저를 선택하기 위해서는 다운로드가 자유롭고, 기본 설정이 쉬우며, 운영 체제의 방해 없이 계속 사용할 수 있어야 함.
     * 현재 윈도우 사용자들은 이러한 선택의 자유를 누리지 못함.
     * 마이크로소프트의 전략과 소비자에 미치는 영향을 조사하기 위해, 모질라는 해리 브리그눌과 세니드 보울스, 해로운 디자인 분야의 독립 연구자 및 전문가를 위촉함.
     * 연구자들은 윈도우에서 마이크로소프트가 어떻게 효과적인 브라우저 선택을 방해하는지에 대한 보고서를 발표함.
     * 보고서에서는 마이크로소프트가 자체 브라우저인 엣지를 운영 체제의 중심에 두고, 윈도우 사용자 인터페이스 디자인을 무기화하여 경쟁 브라우저 선택을 저해하는 방법을 문서화함.

경쟁 저해 및 소비자 피해

     * 해로운 디자인 전략의 사용은 경우에 따라 마이크로소프트 자체의 디자인 지침에 반함.
     * 이러한 전략은 소비자 피해를 초래하거나 악화시키고, 경쟁 브라우저에 대한 경쟁을 저해할 수 있음.
     * 독립적인 브라우저인 파이어폭스와 같은 브라우저는 경쟁사인 운영 체제 제공업체에 의존하고 있어, 이러한 행위는 특히 우려됨.

규제 및 시장 변화

     * 운영 체제/브라우저 제공업체의 자기 선호는 모질라가 이전에 강조한 영역임.
     * 최근 모질라는 주요 운영 체제에서 경쟁하는 데 겪는 많은 문제들을 플랫폼 틸트 대시보드에 공개함.
     * 유럽연합에서 디지털 시장 법안의 시행으로 전 세계적인 경쟁 규제의 물결이 시작되었으나, 브라우저 경쟁의 장벽은 여전히 해체되지 않음.
     * 규제 기관이 플랫폼 소유자에게 브라우저 선택을 존중하도록 변경을 강제한 시장에서만 개선이 이루어지고 있음.
     * 예를 들어, 애플의 대체 브라우저 엔진 허용 결정은 유럽연합에서만 효과적임.
     * 마이크로소프트는 최근 다른 브라우저를 선택한 사용자에게 엣지를 강제하는 일부 행동을 중단하겠다고 약속했으나, 이러한 변경은 보고서에 기술된 전략 중 소수만을 다룸.
     * 더욱이, 이러한 변경은 유럽 경제 지역의 사용자에게만 배포될 예정임.
     * 전 세계, 특히 유럽 경제 지역 외부의 윈도우 사용자들은 마이크로소프트가 사용하는 해로운 디자인으로 인해 여전히 선택이 제한되고, 무시되며, 저해받고 있음.
     * 전 세계적인 규제 조치가 필요하여 모든 주요 플랫폼에서 브라우저 선택과 경쟁을 복원해야 함.

GN⁺의 의견

     * 이 보고서는 운영 체제 제공업체가 자사의 브라우저를 선호하도록 디자인을 조작하는 문제를 조명하고 있으며, 이는 소비자의 선택권과 시장 경쟁에 중대한 영향을 미침.
     * 유럽연합의 디지털 시장 법안과 같은 규제 조치가 전 세계적으로 확산되어야 하며, 이는 기술 산업의 공정한 경쟁 환경을 조성하는 데 중요함.
     * 사용자의 자유로운 브라우저 선택을 보장하는 것은 오픈 웹의 기본 원칙 중 하나이며, 이를 통해 혁신과 다양성이 촉진될 수 있음.

   AI가 필요하면 따로 프로그램을 열거나 웹 페이지를 열어도 되는데 왜 이리 번들로 처박으려고 난린지.

        Hacker News 의견

     * 마이크로소프트 엣지의 ""효율성 모드""가 노트북 배터리 수명에 눈에 띄는 차이를 만들어내는지 확인하고자 사용해봄. 개인 정보 보호 측면에서 존중받는 브라우저로 사용하기 어렵게 만들어졌으며, 기본적으로 활성화된 많은 설정을 변경해야 함. 검색 엔진 선택은 설정의 ""주소창 검색"" 아래에 숨겨져 있으며, 변경 후에도 Bing/코파일럿으로 검색하는 새 탭 페이지는 변경할 수 없음. Edge는 사용자가 선택한 검색 엔진에 상관없이 검색 정보를 마이크로소프트에 보내도록 설정되어 있으며, 이를 끄는 옵션도 기본적으로 켜져 있음. 모든 설정을 원하는 대로 조정한 후에도, 마이크로소프트는 업데이트 후 Bing으로 기본 검색을 복원하도록 유도하는 프롬프트를 표시함.
     * 윈도우는 점점 더 이상해지고 있음. 훌륭한 기능을 가진 견고한 OS 코어와, 광고, ""리워드"" 포인트, 추적 기능이 포함된 느리고 일관성 없는 UI 사이의 불행한 이중성이 존재함.
     * MacOS는 어떤 애플리케이션에서든 텍스트 선택을 ""하드 클릭""(길게 클릭)하여 해당 구문에 대한 웹 검색을 할 수 있는 버블을 띄워주지만, 검색은 Safari를 통해서만 실행됨. 이 유용한 단축키를 Firefox로 열 수 있게 만들려고 시도했지만, 결국 포기함. 애플은 OS 내부에 이 결정을 너무 깊이 묻어놓아 기본 브라우저를 변경하는 것이 사실상 불가능함.
     * 마이크로소프트가 수십 년 전에 독점 전략에 대한 법정 패소 이후에도 여전히 이러한 행위를 멈추지 않음. 규제 기관이 제 역할을 하지 않는 것 같음.
     * 모질라가 이 보고서를 의뢰한 것에 대해 잘했다는 평가. 우리가 항상 생각했던 일이 일어나고 있음을 확인하는 흥미로운 내용이 담겨 있음. 이와 유사한 보고서 작성을 장려해야 함.
     * 이전 주에 있었던 관련 토론 링크 제공: ""마이크로소프트가 내 크롬 탭을 훔쳤고, 당신의 것도 원한다.""
     * 모질라가 마이크로소프트 대 넷스케이프 제2라운드 또는 일종의 반독점 소송을 준비하는 분위기를 풍기고 있음을 느낌.
     * 맥에서 업무용으로 구글 크롬을 설치해야 했으며, Firefox 대신 기본 브라우저로 사용하라는 알림이 계속 뜸. ""다시 묻지 않음"" 버튼이 없어서 불편함을 겪음.
     * 브라우저의 재정적 중요성에 대해 설명하는 에반 치플릭키의 강연 링크 제공. 마이크로소프트와 애플이 이런 행동을 하는 이유를 이해하는 데 도움이 됨.
     * 윈도우를 사용해야 한다면, 인터넷과 대화하는 작업 표시줄 검색, Edge 사용을 강요하는 기능이 없는 윈도우 10 LTSC 버전을 사용하는 것을 추천함. 그럼에도 불구하고 Edge가 백그라운드에서 실행되고 있음을 최근 발견함.
"
"https://news.hada.io/topic?id=13236","Ask HN: LLMs으로 무엇을 만들었나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask HN: LLMs으로 무엇을 만들었나요?

     * LLM을 활용해서 어떤걸 만들고 있는지 질문
     * 질문자는
          + 크롬 확장 프로그램을 개발: YouTube 동영상에서 후원 섹션을 건너뛰기 위해 자막을 읽는 기능 구현
          + 다양한 프로그래밍 언어에서 함수 호출 체인 설명 실험: MakeFile, Python, Bash를 사용하여 LLM을 통한 설명 시도
          + 텔레그램 봇 운영: 세금 관련 도움을 주는 등 특정 명령을 수행하도록 프롬프트 설정

        Hacker News 의견

     * 판매를 좋아하지 않는 한 사용자는 실제와 같은 방식으로 콜드 콜링을 연습할 수 있는 AI를 통화할 수 있는 전화번호를 설정함.
          + 이 AI는 판매 통화를 시뮬레이션함.
          + 사용자는 AI와 핸즈프리 통화가 유용하다는 것을 발견하여 일반적인 목적으로도 사용함.
          + 현재는 오프라인 상태이지만, 스택과 배포 정보가 포함된 코드는 GitHub에서 제공됨.
          + 모든 것은 $35 가격의 라즈베리 파이에서 운영됨.
     * 다른 사용자는 할머니의 레시피를 기반으로 한 요리책을 ""작성""하는 데 도움을 줌.
          + 할머니의 100번째 생일을 맞아 아버지가 수년간 모은 250페이지 이상의 레시피를 복원함.
          + 일부는 타자기로, 다른 일부는 할머니가 손으로 쓴 것임.
          + 아버지는 타이핑된 레시피를 스캔하고, 손으로 쓴 레시피를 ""구술""함.
          + 구글 OCR을 사용하여 스캔된 레시피를 처리하고, GPT-4를 사용하여 형식이 없는 레시피를 잘 정리된 Markdown 형식으로 변환함.
          + 오타와 구글 OCR의 오류를 성공적으로 수정함.
          + 모든 잘 정리된 텍스트를 구글 문서에 붙여넣고 이미지를 추가함.
          + OpenAI 이미지 생성 기능을 사용하여 250개 이상의 레시피에 대한 이미지를 생성함.
          + 일부는 수작업으로 큐레이션해야 했음, 특히 멕시코 음식에 대해서는 더욱 그러함.
          + 결과적으로 책은 매우 멋져 보였고, 가족 내에서 디지털 복사본을 배포하여 모두가 놀랐음.
     * 한 사용자는 Apple Shortcuts을 사용하여 OpenAI에 HTTP POST API 호출을 하여 MacOS에서 작업을 수행하는 ""스택""을 구성함.
          + 각 작업은 단축키나 Alfred를 통한 Spotlight 입력으로 활성화됨.
          + YouTube URL을 요약하고, 텍스트의 문법과 스타일을 수정하며, 음성 타이핑 대신 OpenAI Whisper를 사용하는 등 다양한 기능을 포함함.
          + 사용자는 LLM을 반복적으로 사용하는 작업을 발견할 때마다 이를 Apple Shortcut으로 만들어 MacOS 기능처럼 워크플로우에 통합함.
     * 또 다른 사용자는 여러 하드웨어 + LLM 프로젝트를 수행함.
          + 실제 포켓몬을 인식하는 포켓몬 도감을 만듦.
          + 사무실에서 좋은 댓글을 필터링하여 인쇄함.
          + 오래된 인터콤에 일반 목적의 채팅 어시스턴트를 구축함.
          + 이러한 프로젝트들은 특별히 유용하지는 않지만 모두 재미있음.
     * 한 사용자는 자신의 경험과 기술에 대해 질문할 수 있는 대화형 이력서 AI 챗봇을 만듦.
          + 백엔드는 Python FastAPI를 사용하고 ChromaDB로 이력서와 Q&A 쌍을 저장하며, OpenAI와 Airtable을 사용하여 요청과 응답을 기록함.
          + UI는 Sveltekit을 사용함.
          + 사용자는 현재 다른 도구를 만들고 있으며, Airtable 대신 LangSmith를 사용할 계획임.
          + Substack 기사를 작성하고 있으며, 이는 브랜드 구축을 돕기 위한 #buildinpublic 노력의 일부임.
          + 사용자는 9월부터 실업 상태이며, 시장이 어려운 만큼 위의 작업에 집중하여 고용이나 계약을 얻기를 희망함.
     * 다른 사용자는 도시와 마을 주변의 자율 가이드 투어와 온라인 보물 사냥을 만드는 과정을 자동화하고자 함.
          + 누구나 투어를 만들어 판매할 수 있는 전체 마켓플레이스를 원함.
          + 투어를 만드는 과정이 매우 번거로움.
          + GPT-4에 지역 정보를 제공하여 질문과 다중 선택 답변을 작성하도록 함.
          + 프론트엔드는 React Typescript, 백엔드는 Net Core Web API on Linux, MySQL, EF Core 및 GPT4와 Stripe와의 통합을 사용함.
          + treasuretours.org에서 호스팅됨.
          + 비용 때문에 현재는 슈퍼유저만 AI 도구에 접근할 수 있지만, 부분적으로 AI가 생성한 사전 제작된 헌트를 시도해볼 수 있음.
     * 한 사용자는 제품을 만들기 시작했지만 결국 LLM 기반 제품을 위한 개발 플랫폼을 만듦.
          + 처음에는 주식 분석 도구를 만들었음. 사용자가 비교하고 싶은 회사와 기간을 자유 언어로 작성하면 그래프에 주식이 표시됨.
          + 개발 과정에서 독특한 도전을 발견하고 제품 출시를 하지 않고 개발 플랫폼 작업으로 전환함.
          + 'LLM 구조화된 작업'을 사용하여 사용자 입력에 대한 작업을 수행하고 백엔드에서 작업할 수 있는 JSON을 출력함.
          + 프롬프트는 취약하고 프롬프트나 모델 구성에 대한 작은 변화에도 쉽게 깨짐.
          + 이를 돕기 위해 플랫폼을 개발함. 입력 컬렉션 전체에 대해 프롬프트 버전과 모델 구성을 테스트하여 개발 과정에서 문제가 발생하지 않도록 함.
          + promptotype.io에서 확인할 수 있음.
     * 한 팀은 LLM을 기반으로 한 다양한 데이터 도구를 만들고 있으며, 주요 제품을 재브랜딩하고 출시하는 과정에 있음.
          + sketch, datadm, julyp 등 다양한 도구와 제품을 개발함.
          + 다양한 스택과 도구를 사용하며, 자체 도구를 만들기도 했지만 최근에는 직접 로직을 작성하여 제품에 적용함.
          + 주요 제품은 next 앱에 코드가 있고 vercel에서 배포됨.
     * 한 사용자는 코드 생성을 위한 봇을 포함하여 여러 가지를 구축함.
          + 현재는 AI 모의 면접을 진행 중임. LeetCode 준비를 싫어하고 상호작용을 통해 더 잘 배울 수 있다고 느낌.
          + comp.lol은 AI가 주도하는 모의 코딩 인터뷰를 제공함. 알파 테스터를 찾고 있으며, 무료 계층에서 모든 것이 실행되므로 로딩이 느릴 수 있음.
     * 다른 사용자는 초기 스크리닝을 수행하고, 후보자 정보를 수집하며, 역할에 대한 질문에 답하고, 여러 행동 면접 질문을 하는 AI 채용 어시스턴트를 만듦.
          + Vercel과 OpenAI를 사용하여 하루 만에 구축함.
          + Google 로그인 설정이 가장 어려운 부분이었음.
          + 수십 명의 후보자가 사용하여 많은 시간을 절약하고 대화를 우선시하는 데 도움이 됨.
          + 어제 간단한 글을 작성함.
"
"https://news.hada.io/topic?id=13153","Show GN: Slack 이모지로 Jira 이슈 생성 간소화하기. wanted_jira_bolt","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: Slack 이모지로 Jira 이슈 생성 간소화하기. wanted_jira_bolt

     * 이모지를 Slack 스레드 최상단에 추가하세요.
     * Slack 스레드 본문 전체를 요약하여 Jira 티켓으로 변환합니다.

   원티드랩 내부에서만 사용하던 Jira 생성 슬랙 봇의 프롬프트 및 소스코드를 공개로 전환하였습니다.
     * 스레드에서 처음 이야기한 사람이 “보고자” 가 되고 이모지를 단 사람이 “담당자” 가 됩니다.
     * 이모지를 남기면 직전까지 스레드에 있던 스크린샷은 자동으로 지라에 복사하여 이슈 추적 사이의 격차를 해소합니다.
     * 보고자, 담당자가 봇이어도 동작합니다.
     * 오류가 발생하면 왜 이슈 생성을 못했는지 이모지를 누른 유저에게 DM을 전송합니다.
"
"https://news.hada.io/topic?id=13174","테일윈드 색상 팔레트 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            테일윈드 색상 팔레트 생성기

색상 팔레트의 특성과 조작 방법

     * 색상 팔레트의 이름은 ""NameValueOpen Color Picker""이며, 기본 색상 값은 500임.
     * 이 팔레트의 URL을 클립보드에 복사하거나 API URL을 열 수 있는 기능이 제공됨.
     * 색상의 그래프를 보여주는 기능, 특정 색상인 'blue'를 삭제하는 기능이 있음.
     * 색상의 채도(Saturation), 명도(Lightness), 최대 명도(Maximum Lightness), 최소 명도(Minimum Lightness), Lu(빛의 밝기, Luminance)를 조절할 수 있는 토글 스위치가 있음.
     * Lightness는 50부터 950까지의 범위를 가지며, 이를 통해 사용자는 팔레트의 명도를 조절할 수 있음.

   GN⁺의 의견:
     * 이 기사는 색상 팔레트 조작에 대한 기능을 소개하고 있으며, 디자이너나 개발자에게 유용한 정보를 제공함.
     * 사용자가 색상의 세밀한 조정을 할 수 있도록 다양한 툴을 제공하는 점이 중요함.
     * 색상 조정 기능은 웹사이트나 앱의 UI/UX 디자인에 있어 핵심적인 요소이므로, 이러한 도구의 이해는 디자인 품질을 높이는 데 도움이 됨.

        Hacker News 의견

     * 접근성을 고려한 디자인 시스템을 사용하여 색상 조합의 접근성을 색상 이름만 보고도 알 수 있게 하는 도구 개발에 대한 관심.

     예를 들어, USWDS 디자인 시스템을 사용하면 blue-30과 gray-80의 조합이 WCAG AA 기준에 부합하는지 색상 값 차이를 통해 알 수 있음.
     * 색상을 가지고 놀기 좋아하며, 이와 관련된 유용한 도구 및 대안적 옵션들을 공유.

     여러 색상 스킴 생성기 웹사이트 링크 제공.
     * 개인적으로 간단하고 의견이 강한 색상 도구를 만들었으며, Tailwind 설정을 생성할 수 있음.

     해당 도구의 웹사이트 링크와 웹 컴포넌트를 사용하여 만든 과정에 대한 글 링크 제공.
     * 새로운 도구를 사용하여 로고로부터 팔레트를 생성하는 데 1분도 채 걸리지 않았으며, 이전에 수동으로 했을 때보다 더 나은 결과를 얻음.
     * CSS 변수를 사용하여 색상 팔레트를 정의하고 Tailwind 설정에서 이를 참조하는 방식을 선호함.

     런타임에 다른 색상 테마를 적용할 수 있는 유연성 언급.
     * 도구 제작자에게 감사를 표하며, Figma와 색상을 동기화하는 가장 쉬운 방법에 대한 궁금증 표현.

     전문 디자이너들이 사용하는 플러그인이나 색상 생성 및 Tailwind로의 내보내기 방법에 대한 의문 제기.
     * 단일 색상에서 색상 팔레트를 생성한 후, 각 색상을 수동으로 조정하기 위해 다른 앱에 결과를 피드하는 데 유용한 도구로 평가.
     * 브랜드 예시 데모에 대한 질문과 일반적으로 사용자들이 기본 색상을 수정하거나 새로운 변수를 생성하는 방식에 대한 의문.
     * 전체 스택 개발자로서 색상에 대한 지식이 없으나 Tailwind CSS를 사용하고 있음.

     색상 선택과 도구 사용법을 어디서 배울 수 있는지에 대한 질문.
     * 그라데이션 생성에 유용한 도구로 보이며, Paletton이 언급되지 않은 것이 이상함.

     Paletton 웹사이트 링크 제공 및 기본 색상으로부터 인접 색상으로의 그라데이션 생성 기능에 대한 설명.
"
"https://news.hada.io/topic?id=13261","경험은 적지만 잠재력이 높은 인재 채용 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        경험은 적지만 잠재력이 높은 인재 채용 방법

경험은 적지만 잠재력이 높은 사람 채용하기

     * 자신의 역할에서 두드러진 성과를 찾기: 후보자가 참여한 일이 그들 없이는 훨씬 못했을 것임을 보여주는 이야기를 통해 개인의 재능과 주도성을 확인함.
     * 자신만의 방식으로 세상을 탐색하기: 높은 잠재력을 가진 젊은 인재들은 종종 비전통적인 방식을 따름. 그들의 이례적인 접근 방식에 대한 합리적인 설명을 할 수 있어야 함.
     * 어깨에 힘을 가진 사람 찾기: 무언가를 증명하고 싶어 하는가? 세상이 오해하는 명백한 재능과 동기를 가진 사람들은 자신의 내면적인 자아와 외부 인식을 조화시키기 위해 벽을 뚫고 나갈 것임.
     * 높은 EQ와 설득력: 상황을 명확하게 이해하고, 환경을 자신의 의지대로 바꿀 수 있는 부드러운 기술/영향력을 가진 사람들은 특히 가치가 있음.
     * 탁월함에 대한 이론: 어떤 것에서든 탁월했던 사람들은 관련 없는 다른 일에서도 우수함을 발휘할 가능성이 높음.
     * 개방성: 완성된 제품을 채용하는 것이 아니므로, 개선과 새로운 아이디어에 열려 있는지 확인해야 함.
     * 자신을 너무 심각하게 받아들이지 않는 사람들: 성공하기 위해서는 자신을 비웃을 줄 아는 사람이어야 함.

GN⁺의 의견

     * 이 글은 경험이 부족하지만 잠재력이 높은 인재를 발굴하고 채용하는 데 있어 유용한 통찰력을 제공함. 이러한 인재들은 종종 기업에 혁신적인 변화를 가져올 수 있음.
     * 글에서 제시된 구체적인 인터뷰 질문과 평가 기준은 채용 과정에서 실제로 적용할 수 있는 실질적인 가이드라인을 제공함.
     * 특히 스타트업과 같은 빠르게 성장하는 기업들에게 이 글은 팀에 새로운 에너지와 창의성을 불어넣을 수 있는 인재를 찾는 데 도움이 될 것임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 채용에 대한 사람들의 직관이 베이지안(Bayesian)적이지 않다고 생각함.
          + 좋은 채용 과정은 지원자가 똑똑하고, 쾌활하며, 에너지가 넘치고, 역할에 필요한 경험이 있는지를 평가하는 것으로 축약됨.
          + 이러한 요소들은 성공에 대한 강력한 선험적 가정(priors)이며, 이를 모두 갖춘 지원자를 찾으면 성공 확률이 약 80%임.
          + 경험이 많은 부유한 지원자만을 선호하는 경향을 피하고, 여름에 일하며 공부한 성실한 지원자를 놓치지 않도록 해야 함.
     * 두 번째 댓글 요약:
          + Fly.io는 이력서나 면접 없이, 경험 수준에 관계없이 사람들을 채용함.
          + 면접을 없애고 실제 작업 샘플 테스트로 대체함.
          + 팀의 최고 인재 중 일부는 이 분야에서 처음 일하는 사람들임.
     * 세 번째 댓글 요약:
          + ""다이아몬드 같은 인재""에 대한 불만을 표현함.
          + 지원자가 실제로 일을 수행할 수 있는지를 보여줄 수 있다면, 그들의 개인적인 배경에 대해 알 필요가 없음.
     * 네 번째 댓글 요약:
          + 인생을 책의 장으로 나누어 설명하라는 질문을 비판함.
          + 현재 장에 집중하자는 의견을 제시함.
     * 다섯 번째 댓글 요약:
          + 상위 직급에 신뢰할 수 있는 사람들을 배치하고, 그 아래 팀을 경험이 적은 유망한 신입들로 채움.
          + 이는 자신이 처음 시작했을 때 받았던 기회를 다른 이들에게 돌려주는 방식임.
     * 여섯 번째 댓글 요약:
          + 일부 질문들이 법적으로 문제가 될 수 있음.
          + Meta에서 면접을 볼 때, 이러한 편견을 초래할 수 있는 질문을 피하도록 교육받음.
          + 직무 관련 질문에 집중하고 개인적인 질문은 피해야 함.
     * 일곱 번째 댓글 요약:
          + 스타트업에서 일할 때, 현금 제약으로 인해 동기 부여가 강하고 책임감 있는 신입 또는 최근 졸업생을 채용함.
          + 이들은 돈보다는 차이를 만들고 능력을 증명하는 것에 더 관심이 있음.
          + 대기업에서는 경험과 '회색 머리'가 중요하며, 평균적으로 스타트업 신입보다 질이 낮은 경우가 많음.
     * 여덟 번째 댓글 요약:
          + 40세 이상의 나이에 경력을 바꾸고 코딩을 배워 현재 즐기고 있음.
          + 신입 대학 졸업생과 함께 채용되었으며, 비즈니스 이해, 고객과의 대화, 문제 해결을 위한 질문 및 추적 능력에서 큰 차이가 있음.
     * 아홉 번째 댓글 요약:
          + 면접에서 개인적인 정보를 공유하는 것에 대해 불편함을 표현함.
          + 이러한 질문은 직무 평가보다는 심리 평가에 더 가까움.
     * 열 번째 댓글 요약:
          + 대부분의 똑똑한 사람들이 실제로 일을 완수하는 데 필요한 추진력이 부족함.
          + 대기업에서 성공적인 사람을 스타트업으로 옮겨 낮은 마찰 환경에서 성공을 지켜볼 수 있음.
"
"https://news.hada.io/topic?id=13275","구글 맵스, 로컬 가이드를 위한 새로운 생성 AI 기능 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글 맵스, 로컬 가이드를 위한 새로운 생성 AI 기능 도입

     * 구글 지도가 생성 AI를 활용하여 사용자의 특정한 요구에 맞춘 장소 추천 기능을 선보임
     * 사용자는 원하는 것을 말하기만 하면 대규모 언어 모델이 2억 5천만 개 이상의 장소 정보와 3억 명 이상의 커뮤니티 기여자의 신뢰할 수 있는 통찰을 분석하여 추천 장소를 빠르게 제안
     * 이 기능은 미국 내 선별된 로컬 가이드들에게 우선적으로 제공되며, 이들의 피드백을 통해 기능을 개선하고 점차 모든 이용자에게 제공할 예정
     * 예를 들어, 샌프란시스코를 방문하여 독특한 빈티지 아이템을 찾는 쇼핑을 계획한다고 가정할 때, ""SF에서 빈티지 분위기의 장소""와 같이 지도에 물어보면 AI 모델이 비즈니스와 장소에 대한 풍부한 정보를 분석하여 신뢰할 수 있는 추천을 제공
     * 결과는 옷가게, 레코드점, 벼룩시장 등 유용한 카테고리로 정리되며, 사진 캐러셀과 리뷰 요약을 통해 방문할 만한 이유를 강조해 줌
     * 또한, ""점심은 어때?""와 같은 후속 질문을 통해 빈티지 분위기를 이어갈 수 있는 식당을 추천받을 수 있으며, 추천 장소를 리스트에 저장하거나 친구들과 공유하거나 나중에 다시 방문할 수 있음
"
"https://news.hada.io/topic?id=13240","모질라가 포기했던 웹 엔진 'Servo' 프로젝트, 재개되다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   모질라가 포기했던 웹 엔진 'Servo' 프로젝트, 재개되다

Servo: 무엇을 기대할까?

     * Servo는 Rust의 힘을 활용하여 메모리 안전성과 모듈성을 제공하는 실험적인 브라우저 엔진임.
     * 2012년 Mozilla에 의해 연구 프로젝트로 시작되었으며, 여러 번의 변화를 겪은 후 2023년 개발자들의 새로운 접근 방식으로 다시 주목받음.
     * Blink(크로뮴 기반 브라우저 사용)와 Gecko(Firefox 및 일부 다른 브라우저 사용)에 대항할 수 있는 Servo 기반의 새로운 옵션이 등장할 가능성이 있음.

2024년 Servo 프로젝트의 진행 상황

     * 2023년 9월, Servo 프로젝트가 Linux Foundation Europe에 공식적으로 합류한 후, Igalia의 기존 기여자들이 프로젝트 유지 관리를 맡음.
     * Open Source Summit Europe에서 Igalia의 Manuel Rego가 WebGL 지원, 크로스 플랫폼 지원(안드로이드 및 리눅스 모바일 지원 포함) 등을 발표함.
     * Servo는 임베디드 애플리케이션(예: 라즈베리 파이에서 실행)에 대한 실험을 진행 중이며, Chromium보다 라즈베리 파이에서 더 빠른 것으로 보임.
     * 새로운 레이아웃 엔진 개발 중이며, 새로운 기능과 호환성을 위한 작업이 진행 중임.
     * Mozilla가 프로젝트를 중단했음에도 불구하고, Firefox는 여전히 일부 Servo 구성 요소를 사용하고 있음.

2024년 Servo 프로젝트 로드맵

     * 공식 웹사이트에는 2024년을 위한 업데이트된 로드맵이 있으며, 프로젝트 유지 관리 및 커뮤니티 관리를 포함함.
     * CSS 지원 구현을 통해 Servo 레이아웃 엔진에 기본 CSS 기능을 제공하는 작업을 진행 중임.
     * 임베딩 API 정의를 통해 Tauri와 협력하여 Servo 웹뷰 API를 정의하고 새로운 기능 및 요구 사항을 구현할 예정임.
     * 초기 안드로이드 지원을 통해 현대 안드로이드 버전에서 Servo를 빌드하고, 미래에 공식 웹사이트에서 야간 APK를 배포할 예정임.
     * Servo 로드맵을 따르고 싶다면 공식 로드맵을 확인하고, 프로젝트에 대한 자세한 정보는 GitHub 레포지토리나 공식 Zulip 채팅에서 확인할 수 있음.

GN⁺의 의견

     * Servo는 메모리 안전성과 모듈성을 강조하는 Rust 기반의 혁신적인 브라우저 엔진으로, 기존의 Blink와 Gecko에 도전장을 내밀고 있음.
     * Linux Foundation Europe의 지원과 Igalia의 프로젝트 유지 관리 참여로 인해 Servo의 발전이 기대됨.
     * 라즈베리 파이와 같은 임베디드 시스템에서의 성능 향상과 모바일 지원 확대는 기술의 다양한 활용 가능성을 시사하며, 이는 개발자와 기술 애호가들에게 매우 흥미로운 소식임.

   모질라가 돈이 모질라서 중단된 프로젝트가 참 많은데... 게다가 제 2의 IE 사태가 될 수도 있는 기업들의 웹 기술 놀이터인 W3C 의 유일한 사용자 중심의 의결권을 쥐고 있는 단체고요. 여러분이 불여우를 많이 응원해 주고 해야 합니다. 한국에 있던 모질라 멤버들 대부분 다른 곳으로 옮겨(가장 유명한 사람 또한 현재 AWS 소속) 자원봉사자 외에는 없는 실정이고... 여러모로 암울합니다. 살려주십쇼.

   기대되네요

   예전부터 약간 기대하던 프로젝트였는데, 다시 재개되었다니 기쁘네요. +_+

        Hacker News 의견

     * Positron 재시작에 대한 희망

     Positron은 Firefox에 대한 Electron과 같은 것이었음. 현재는 중단된 상태임.
     * Raspberry Pi에서 Servo 실행에 대한 질문

     Raspberry 400에서 Chromium보다 빠르게 동작하는 Servo의 비디오가 있지만, GitHub 저장소나 이슈에는 Raspberry Pi용 다운로드나 빌드 지침이 없음. 아마도 리눅스용으로만 빌드된 것 같음. Raspberry Pi에서 실행에 성공한 사람이 있는지 궁금함.
     * Tauri에 의한 Servo에 대한 관심

     Tauri가 Servo에 얼마나 영향을 주고 있는지 알고 싶음. Servo가 Tauri를 일종의 ""테스트 클라이언트""로 사용하고 있다는 것을 보고 매우 기뻤음.
     * Servo의 목적에 대한 질문

     Servo의 목적이 Firefox에 적용될 기능들을 테스트하는 실험장이 아니었나?
     * Servo 중단에 대한 의문

     Rust의 강력한 멀티스레딩 지원을 통해 오래된 C++보다 나은 성능을 제공할 수 있었던 Servo가 왜 중단되었는지에 대한 의문.
     * iOS Safari에서 페이지 충돌 경험

     iOS Safari에서 해당 페이지가 계속 충돌하는 문제를 겪고 있는지 물음.
     * 네이티브 탭 그룹 지원에 대한 바람

     네이티브 탭 그룹 지원을 원함.
     * Mozilla 소유가 아닌 Servo에 대한 언급

     Servo는 더 이상 Mozilla의 소유가 아님.
     * Rust 기반 브라우저 엔진의 필요성

     100% Rust 기반의 브라우저 엔진이 절실히 필요함.
     * Igalia에서의 Servo 개발에 대한 기대

     Igalia에서 Servo 팀이 실제로 개발자들이 사용할 수 있는 임베더블 솔루션으로서의 집중을 강화하기를 바람. 과거에는 Servo가 CEF, Chromium, WebKit과 같은 API를 제공하지 않아 실제 대안이 되지 못했음. 임베딩을 위한 CEF와 같은 API를 만들 계획이 있었지만, 임베딩 엔진으로서 사용될 수 없다면 프로젝트의 초점이 무엇인지 의문임. 임베딩에 주력하는 부분적으로 호환 가능한 엔진에 더 관심이 있음. Firefox를 만들고 싶다면 괜찮을 수 있지만, 실제 임베디드 렌더러로 사용하고 싶다면 적합하지 않음.

   배경 지식:
     * Positron은 Mozilla가 개발하던 프로젝트로, Electron과 유사하게 웹 기술을 사용해 데스크톱 애플리케이션을 만들 수 있게 하는 프레임워크였으나 중단됨.
     * Servo는 Mozilla가 Rust 프로그래밍 언어로 개발한 실험적인 웹 브라우저 엔진으로, 높은 성능과 안전성을 목표로 했으나, Mozilla의 지원이 줄어들면서 개발이 느려짐.
     * Tauri는 웹 기술을 사용하여 데스크톱 애플리케이션을 만들 수 있는 도구로, 보안과 성능에 중점을 둔 Electron의 경량 대안으로 간주됨.
     * **CEF (Chromium Embedded Framework)**는 Chromium 기반의 애플리케이션에 웹 브라우징 기능을 쉽게 통합할 수 있게 해주는 프레임워크임.
"
"https://news.hada.io/topic?id=13184","SeaweedFS - 블롭, 객체, 파일 및 데이터레이크를 위한 빠른 분산 스토리지 시스템 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           SeaweedFS - 블롭, 객체, 파일 및 데이터레이크를 위한 빠른 분산 스토리지 시스템

     * 단순하고 확장성이 뛰어난 분산 파일 시스템
     * 목표는 수십억 개의 파일을 저장하고 빠르게 제공하는 것
     * Facebook의 Haystack 디자인과 f4: Facebook의 Warm BLOB 저장 시스템에서 아이디어를 얻어 구현됨
     * Blob 저장소는 O(1) 디스크 검색 과 클라우드 계층화 기능이 있음
     * Filer는 디렉토리와 POSIX 속성을 지원하며, 클라우드 드라이브, DC 간 액티브-액티브 복제, Kubernetes, POSIX FUSE 마운트, S3 API, S3 게이트웨이, Hadoop, WebDAV, 암호화, 이레이저 코딩 기능등을 포함

기능

     * 복제 수준, 랙 및 데이터 센터 인식 등 다양한 복제 옵션 제공.
     * 마스터 서버 자동 장애 전환으로 단일 실패 지점 없음.
     * 파일 MIME 유형에 따른 자동 Gzip 압축 지원.
     * 데이터 삭제 또는 업데이트 후 디스크 공간 회수를 위한 자동 압축.
     * 서버 추가로 총 저장 공간 증가 가능.
     * 서버 추가/제거 시 데이터 재균형 없음, 관리자 명령에 의해서만 트리거됨.
     * 이미지 크기 조정, ETag, Accept-Range, Last-Modified 등 지원.
     * 메모리/성능 균형을 위한 in-memory/leveldb/readonly 모드 튜닝 지원.
     * 사용자 정의 가능한 다중 저장 계층 및 투명한 클라우드 통합 제공.
     * 따뜻한 저장소를 위한 랙 인식 10.4 이레이저 코딩으로 저장 비용 절감 및 가용성 향상.

Filer 기능

     * Filer 서버는 HTTP를 통해 ""일반"" 디렉토리 및 파일 제공.
     * 파일 TTL로 파일 메타데이터 및 실제 파일 데이터 자동 만료.
     * FUSE를 통해 마운트된 filer로 파일을 직접 읽고 쓸 수 있음.
     * Filer 저장소 복제로 메타 데이터 저장소의 HA 가능.
     * Amazon S3 호환 API로 S3 도구를 사용하여 파일 접근 가능.
     * Hadoop 호환 파일 시스템으로 Hadoop/Spark/Flink 등에서 파일 접근 가능.
     * AES256-GCM 암호화 저장소로 데이터 안전하게 저장.
     * 수십 TB의 대용량 파일 저장 지원.
     * 클라우드 드라이브로 클라우드 저장소를 로컬 클러스터에 마운트하여 빠른 읽기 및 쓰기 지원.

Kubernetes

     * Kubernetes CSI 드라이버 및 SeaweedFS 운영자 지원.

Seaweed 객체 저장소 사용 예

     * 마스터 노드와 볼륨 노드의 기본 포트 및 실행 방법 안내.
     * 파일 쓰기, 읽기, 삭제 방법에 대한 예시 제공.
     * 랙 인식 및 데이터 센터 인식 복제, 특정 데이터 센터에 파일 키 할당 방법 설명.

아키텍처

     * SeaweedFS는 파일을 청크로 나누지 않고 데이터 볼륨을 관리함.
     * 마스터 서버는 볼륨에 대한 메타데이터만 관리하고, 실제 파일 메타데이터는 볼륨 서버에서 관리함.
     * 파일 쓰기 및 읽기 프로세스에 대한 자세한 설명 제공.

다른 파일 시스템과의 비교

     * HDFS, GlusterFS, Ceph, MooseFS, MinIO 등과 비교하여 SeaweedFS의 장점 설명.
     * SeaweedFS는 작은 파일에 최적화되어 있으며, O(1) 디스크 읽기 작업으로 빠른 파일 접근을 제공함.

개발 계획

     * 시스템 관리 및 확장에 대한 더 많은 도구 및 문서 제공 예정.
     * 스트림 데이터 읽기 및 쓰기 지원.
     * 구조화된 데이터 지원.

설치 가이드

     * Golang에 익숙하지 않은 사용자를 위한 설치 가이드 제공.

디스크 관련 주제

     * 하드 드라이브 및 SSD의 성능에 대한 설명.
     * SeaweedFS는 SSD에 친화적인 구조를 가짐.

벤치마크

     * 개인적인 비과학적 단일 기계 벤치마크 결과 제공.
     * WARP를 사용하여 혼합 벤치마크 실행 방법 안내.

라이선스

     * Apache License, Version 2.0에 따라 라이선스됨.

GN⁺의 의견:

     * SeaweedFS는 작은 파일을 효율적으로 관리하고 빠른 파일 제공을 목표로 하는 분산 파일 시스템임. 이는 대용량 데이터를 다루는 현대의 웹 서비스에 매우 적합함.
     * 다양한 저장소 및 데이터베이스와의 호환성을 통해 유연성을 제공하며, 클라우드 통합 기능으로 비용 효율적인 데이터 관리가 가능함.
     * 오픈 소스 프로젝트로서 커뮤니티의 지원을 받으며 지속적으로 발전하고 있어, 기술적인 관점에서도 흥미로운 프로젝트임.

        Hacker News 의견

     * JuiceFS의 언급
          + 댓글에서는 Minio, Ceph, GarageFS와 같은 여러 대안들이 언급됨.
          + 아직 언급되지 않은 또 다른 대안으로 JuiceFS가 있음.
          + JuiceFS와 SeaweedFS를 비교한 자료가 있음.
     * SeaweedFS 사용 경험
          + SeaweedFS를 사용하여 수십억 개의 중간 크기 XML 문서, 이미지 썸네일, PDF 파일 등을 저장함.
          + 데이터베이스와 파일 시스템 사이의 간극을 메움.
          + 문서와 운영 도구는 처음에는 조금 어색하지만, 기능이 풍부하고 잘 작동함.
          + 전원 장애, 하드웨어 오류 등으로부터 데이터 복구가 가능했음.
          + 오픈 소스 S3 API 블롭 스토어에 대한 간극이 놀랍다고 느낌.
     * SeaweedFS에 대한 부정적인 경험
          + SeaweedFS의 CSI 드라이버를 통해 마운트된 POSIX FS 볼륨에서 Postgres가 초기화되지 않아 SeaweedFS를 사용하지 않기로 결정함.
          + 완전한 POSIX FS와 S3 볼륨을 제공하고, FOSS이며, 관리, 모니터링, 재해 복구 등을 효과적으로 수행할 수 있는 SDS 시스템이 필요함.
          + Ceph와 같은 시스템은 제외됨. GarageFS는 S3만 지원함.
     * SeaweedFS 개발자의 의견
          + SeaweedFS는 Facebook의 Haystack 논문을 기반으로 한 블롭 스토리지 위에 구축됨.
          + 아직 모든 기능이 완전히 개발되지는 않았지만, 클라우드 시대에 적합한 새로운 프로그래밍 방식을 제공함.
          + 저장 공간이 필요할 때는 공간을 할당하고 파일 ID를 받아 메모리 블록을 가리키는 포인터처럼 사용함.
     * SeaweedFS 사용 사례
          + 50TB 이상의 멀티플레이어 매치 녹화(리플레이)를 저장하는 데 SeaweedFS를 사용함.
          + 내장된 만료 기능을 활용하며, 사용과 새로운 기능의 추가 및 마이그레이션에 문제가 없음.
     * SeaweedFS와 Min.io에 대한 의견
          + S3와 같은 자체 호스팅 솔루션에 대한 경험을 물어본 결과, SeaweedFS 사용자는 Min.io를, Min.io 사용자는 SeaweedFS를 추천함.
     * SeaweedFS의 장기 사용자
          + 약 25만 개의 객체를 SeaweedFS에 저장하고 있으며, 그 중 많은 부분이 Cloudflare 뒤의 콜드 스토리지임.
          + SeaweedFS는 Facebook의 Haystack에 매료되어 오랫동안 사용해왔으며, 매우 안정적이고 효율적임.
     * 마이크로소프트의 저장 기술 역사
          + 마이크로소프트는 과거에 여러 번 파일과 데이터베이스 사이의 간극을 메우려는 시도를 했으나, 대부분 실패함.
          + 이러한 기술에 대한 빌 게이츠의 관심과 그의 실망감을 언급함.
     * 분산 스토리지 선택 시 고려사항
          + 분산 스토리지가 정말 필요한지, 자체적으로 샤딩할 수 있는지 고려해야 함.
          + 블롭을 수정해야 하는지, 읽기/수정/교체로 충분한지 확인해야 함.
          + 읽기와 쓰기의 비율을 고려해야 함.
          + 메타데이터 변경 빈도를 고려해야 함.
          + 동시에 같은 객체에 대한 쓰기를 관리하는 방법을 고려해야 함.
          + 가용성, 일관성, 속도 중 어떤 것을 중요시하는지 선택해야 함.
          + 분산 스토리지의 동시 실패로부터 복구하는 방법을 고려해야 함.
          + 접근 제어 방법을 고려해야 함.
     * SeaweedFS와 Min.io의 성능 비교
          + 100TB 이상의 오디오 데이터를 HDD에 저렴하게 저장하기 위해 SeaweedFS와 Min.io를 테스트함.
          + SeaweedFS가 해당 사용 사례에 대해 더 나은 성능을 보임.
"
"https://news.hada.io/topic?id=13278","Ollama에 OpenAI 형식의 호출 호환 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ollama에 OpenAI 형식의 호출 호환 기능 추가

     * Ollama에서 OpenAI Chat Completion API를 호출하는 방식으로, API 호출 및 OpenAI SDK를 사용한 호출이 가능해짐
     * base_url를 Ollama가 돌아가는 경로와 모델 이름만 바꾸면, 기존에 OpenAI로 호출하던 부분을 대체 가능해짐


   ps. 정리해서 올리려고 보니, neo가 4분 전에 올렸더라구요 . AI에게 지기 싫어서 중복이지만 2줄 요약해서 올립니다.
"
"https://news.hada.io/topic?id=13181","Deno 1.40 릴리즈 : Temporal API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Deno 1.40 릴리즈 : Temporal API

     * Temporal API : 자바스크립트의 기존 날짜 객체와 관련된 몇 가지 단점 및 복잡성을 해결하기 위해 설계됨
     * import.meta.filename 과 import.meta.dirname 지원
     * Decorators 지원 : 자바스크립트 클래스를 확장. 현재 TC39 Stage 3 제안 상태
     * deno.json 에서 더 간단한 imports
     * Web API: rejectionhandled 이벤트 지원. 이미 리젝된 Promise에 .catch() 핸들러가 첨부될 때마다 발생
     * WebGPU 윈도잉 / “Bring your own Window” :
     * 그외 Node.js API 업데이트 및 LSP 개선 등

   Temporal API가 흠터레스팅 하군요
   https://caniuse.com/temporal
   https://tc39.es/proposal-temporal/docs/
"
"https://news.hada.io/topic?id=13260","구글 직원들, '무능하고 지루하다'며 상사에 불만...사기 저하","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  구글 직원들, '무능하고 지루하다'며 상사에 불만...사기 저하

   이 요청은 특정 기사의 내용을 요약하는 것이 아니라, 웹사이트의 보안 확인 메시지를 설명하는 것과 관련이 있습니다. 그러므로, 요약할 기사 내용이 없습니다.

        Hacker News 의견

     * 2023년 1월에 있었던 해고는 불투명하고 무의미했으며, 성과가 높은 직원부터 신입사원, 오랜 경력자까지 다양한 사람들이 해고되었음. 한 팀은 10년 이상 근무한 팀 리더를 잃고 나서 4-6명을 새로 고용해야 했음. 성장 중인 배포 팀도 6% 감축된 후에도 계속해서 채용을 진행했음.
     * 비용 센터나 이익 손실 부서마다 전략적 위치나 공석에 상관없이 사람들의 6%를 제공해야 했을 것이라는 가장 단순한 설명이 있음. 각 부서의 부사장이나 일반 관리자가 인사부에 의해 임의의 기준으로 6%를 선택하도록 강요받았을 수 있음.
     * CEO들이 아첨하는 것을 인식하거나 드문 긍정적인 피드백을 회사의 사기에 미치는 영향을 평가하는 훈련이 필요한지 의문임. 최고 경영진이 어떻게 그렇게 무능할 수 있는지 믿을 수 없음.
     * 회사가 성장함에 따라 결정이 사용자의 이익에서 구글의 이익, 그리고 결정을 내리는 사람의 이익으로 바뀌는 경향이 관찰됨.
     * 광고와 LLM 작업 외에 구글에서 진행 중인 흥미로운 프로젝트가 무엇인지, 이것이 최고 경영진과 일선 엔지니어 모두에게 어떤 차이를 만들 수 있는지 궁금함. 구글은 수년간 광고 수익에 의존하며 방향을 잃은 배처럼 보임.
     * 구글의 CEO가 개발자 신뢰를 오랜 기간에 걸쳐 심각하게 훼손한 후에도 여전히 자리를 유지하고 있는 것이 놀랍음.
     * 구글은 그 어느 때보다 많은 돈을 벌고 있음. 구글이 수천 명을 더 해고해도 그들의 궤도는 변하지 않을 것임. 메타, 마이크로소프트, 애플, 아마존 등도 마찬가지임. 이들의 핵심 사업은 거대한 제국임.
     * 구글을 10년 전에 떠난 이유는 지루했기 때문임. 구글에서 흥미로운 일은 엘리트 집단에게만 제한되어 있음. 그 크기에 비해 프로그래밍 혁신에 있어 매우 보수적임.
     * 초기 해고와 지속적인 해고로 구글 문화의 기반이 완전히 무너짐. 생각한 생산성 향상은 사람들이 해고 알고리즘에 맞춰 노력하면서 생산성이 크게 감소함으로써 상쇄됨.
     * 조직과 그들의 작업 문화에서 엔트로피 증가를 피할 수 없음. 프로세스가 오래되고 불편해지며, 도메인 지식이 분열되고, 기능은 더 오래 걸리며 버그가 많아짐.
     * 매번 기술 업계의 스캔들이 터질 때마다 ""기술 노조가 필요하다""는 메시지가 있음. 노조를 조직하고 노동하는 것이 반복되는 상황을 피하는 대안임.
"
"https://news.hada.io/topic?id=13178","이진 실행 파일의 구조는 어떻게 되어 있을까? 함께 알아보자 (2014)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                이진 실행 파일의 구조는 어떻게 되어 있을까? 함께 알아보자 (2014)

바이너리 실행 파일은 어떻게 구성되어 있을까? 탐구해보자!

     * 실행 파일은 이해할 수 없는 것이 아니며, 정규 파일 형식임.
     * 리눅스에서 ELF 바이너리를 다루며, C 언어를 사용하지만 다른 컴파일 언어도 가능함.
     * 심볼(symbol), 섹션(section), **세그먼트(segment)**에 대해 배움.
     * 심볼은 함수 이름과 같고, 섹션에 정리되며, 섹션은 세그먼트로 구성됨.
     * readelf 도구를 사용하여 이들을 살펴봄.

  1단계: 텍스트 편집기에서 열기!

     * 가장 단순한 방법으로 바이너리를 볼 수 있으며, ""Penguin!""과 ""ELF""라는 텍스트를 확인할 수 있음.

  2단계: readelf를 사용하여 심볼 테이블 보기

     * readelf --symbols를 사용하여 심볼을 볼 수 있음.
     * main, puts, _start 등의 심볼을 확인할 수 있음.
     * 프로그램은 main이 아닌 _start에서 시작함.

    심볼

     * 프로그램 작성 시 함수에 대한 심볼이 생성됨.
     * 라이브러리에서 함수를 호출할 때 해당 함수의 코드를 찾기 위해 심볼이 필요함.
     * 정적 링킹(static linking)과 동적 링킹(dynamic linking)을 통해 링킹이 이루어짐.

  3단계: objdump를 사용하여 바이너리 보기 및 섹션에 대해 배우기!

     * objdump는 바이너리를 더 잘 볼 수 있는 방법을 제공함.
     * .text, .rodata, .interp 등의 섹션을 볼 수 있음.
     * 섹션은 링크 시간에 사용되고, 세그먼트는 실행 시간에 사용됨.

  4단계: 어셈블리 보기!

     * .text 섹션에 어셈블리 코드가 포함되어 있음.
     * objdump -d를 사용하여 어셈블리 코드를 볼 수 있음.

  5단계: 세그먼트 보기!

     * 프로그램은 세그먼트 또는 프로그램 헤더로 구성됨.
     * readelf --segments를 사용하여 세그먼트를 볼 수 있음.
     * 세그먼트는 프로그램의 다른 부분을 메모리에 어떻게 분리할지 결정함.

  마법이 아님!

     * 실행 파일은 마법이 아니며, ELF는 다른 파일 형식과 같음.
     * readelf, nm, objdump를 사용하여 리눅스 바이너리를 조사할 수 있음.

   GN⁺의 의견
     * 이 글은 초급 소프트웨어 엔지니어들에게 바이너리 실행 파일의 구조를 이해하는 데 매우 유익함.
     * 심볼, 섹션, 세그먼트의 개념과 이들을 조사하는 도구들(readelf, objdump)에 대한 실용적인 정보를 제공함.
     * 프로그램이 실제로 어떻게 메모리에 로드되고 실행되는지에 대한 기본적인 이해를 돕는 내용이 포함되어 있어, 시스템 프로그래밍에 대한 흥미를 불러일으킬 수 있음.

        Hacker News 의견

     * 한 사용자는 ELF(Executable and Linkable Format)를 직접 작성해보는 것을 추천하며, 이것이 실행 파일의 기본 부분을 이해하는 데 큰 도움이 된다고 말함. 또한, 이 글은 기존의 상향식 접근이 아닌 하향식 접근을 원하는 사람들에게 유용함.
     * 또 다른 사용자는 프로그램이 실행될 때 main에서 시작하는 것으로 생각할 수 있지만, 실제로는 _start에서 시작한다고 설명함. _start는 main을 호출하는 등 여러 중요한 작업을 수행하는데, 이는 C 언어에 특화된 것이 아니라 언어에 관계없는 바이너리의 진입점임.
     * 한 사용자는 Julia의 기사가 항상 훌륭하다고 언급하며, 컴파일된 코드가 비밀을 간직하지 않는다는 것을 strings 명령어를 시연함으로써 사람들에게 가르치는 데 좋은 결과를 얻었다고 함.
     * 한 사용자는 수학에서 컴퓨터 과학으로 학문적 경력을 전환했을 때 이 주제를 처음 공부했다고 말하며, 이러한 깊은 탐구를 후회하지 않았다고 언급함. Julia 역시 수학 배경을 가지고 있으며, 이러한 하향식 추론에 대한 욕구가 수학자들을 이러한 실험으로 이끌었을 수 있다고 생각함.
     * 한 사용자는 실행 파일이 플랫폼에 특화되어 있다는 것을 반영하며, ""실제로 이식 가능한 실행 파일""이 다양한 플랫폼에서 실행될 수 있음을 증명했을 때의 경험을 공유함. 이는 자바, 크로스플랫폼 라이브러리 등 다양한 방법으로 해결하려 했던 크로스플랫폼 문제의 해결책이 오랫동안 우리 눈앞에 있었다는 것을 의미함.
     * 한 사용자는 90년대 초반에 실행 파일의 형식에 매료되어 DOS와 Windows 실행 파일 뷰어를 Modula 2로 작성했다고 말함. 이 프로그램은 VEXE라는 이름으로 공유 소프트웨어로 1991년에 출시되었으며, 크래커들 사이에서 일정한 추종을 얻었고, +ORC 튜토리얼에서 언급되기도 했음.
     * 한 사용자는 바이너리 파일을 터미널에 출력하는 것은 슬픔의 원인이라고 말하며, 대신 hexdump -C를 사용하는 것을 선호함.
     * 여러 사용자들이 이 주제에 대한 훌륭한 스레드라고 언급함.
     * 한 사용자는 이 주제에 관심이 있는 사람들에게 Cosmopolitan과 RedBean, ""αcτµαlly pδrταblε εxεcµταblε (2020)""을 읽어보는 것을 추천함.
"
"https://news.hada.io/topic?id=13179","리버스 쿠오모, GitHub에서 활발한 개발자로 활동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     리버스 쿠오모, GitHub에서 활발한 개발자로 활동

Rivers Cuomo의 GitHub 프로필

     * Rocking the code, coding the rock. Rivers Cuomo는 Flutter, Python, Google Apps Script, Flask 등을 사용하는 개발자임.
     * 개발자 정보: 2.2k 팔로워를 가지고 있으며, 35명을 팔로우하고 있음. weezer라는 조직과 연결되어 있으며, 로스앤젤레스에 거주함.
     * 웹사이트 및 소셜 미디어: 개인 웹사이트(www.riverscuomo.com)가 있으며, Discord 서버 링크 제공함.
     * 기여 활동: 지난 1년간 41,809회의 기여를 함. 특정 날짜에 기여한 내용이 상세히 나열되어 있음.

cuomputer Public

     * 프로젝트 설명: Rivers Cuomo의 Discord 서버를 위한 봇임.
     * 사용 언어: Python을 사용하여 개발됨.
     * 기여도: 19개의 별을 받았으며, 41,809회의 기여를 함.

기여 활동 요약

     * 기여 패턴: 일정 기간 동안의 기여 횟수가 나열되어 있으며, 특정 날짜에는 기여가 없는 것으로 표시됨.
     * 활동 추이: 일주일 단위로 기여 활동이 요약되어 있으며, 기여도에 따라 다양한 색상으로 표시됨.

GN⁺의 의견

     * Rivers Cuomo는 음악과 코딩을 결합한 독특한 개발자로, 그의 프로필은 기술과 예술의 경계를 허무는 창의적인 접근을 보여줌.
     * Discord 봇 개발과 같은 프로젝트는 커뮤니티 구축과 참여에 기여하는 중요한 도구임.
     * Cuomo의 활발한 GitHub 기여는 오픈 소스 커뮤니티에 대한 그의 헌신을 반영하며, 이는 다른 개발자들에게 영감을 줄 수 있음.

        Hacker News 의견

     * 한 개인이 자신이 만든 모바일 앱을 통해 Weezer의 노래를 스트리밍한 사실을 기억하는 사람이 없다며, 그가 여전히 열심히 코딩을 하고 있다는 것에 기쁨을 표현함.

     ""한 사용자가 Weezer의 노래를 스트리밍하는 자신만의 모바일 앱을 출시한 적이 있음을 기억하는 사람은 없나요? 그는 여전히 열정적으로 코딩을 하고 있습니다.""
     * 챗봇을 작성하는 것이 코딩에 입문하고 즐기는 데 있어 최고의 방법 중 하나라고 생각한다고 말하며, 이는 재미있고 보람찬 일이며, 기존 프레임워크를 사용하여 문자열만을 다루기 때문에 충분히 간단하다고 설명함.

     ""챗봇 작성은 코딩에 입문하고 즐기는 데 있어 최고의 방법 중 하나라고 생각합니다. 이는 재미있고 보람찬 일이며, 기존 프레임워크를 사용하여 문자열만을 다루기 때문에 충분히 간단합니다.""
     * Weezer의 공연 세트리스트를 만들기 위해 OpenAI를 사용하는 것처럼 보인다고 언급하며, 이에 대한 구체적인 예시를 제공함.

     ""이것은 놀라운 일입니다 - 그가 OpenAI를 사용하여 공연 세트리스트를 만드는 것처럼 보입니다.""
     * 20년 전 Jens Johannson이 프로그래밍에 관심이 있다는 것을 알게 되었으며, 그가 Phase Vocoder 코드를 해킹했다는 사실을 공유함.

     ""20년 전 Jens Johannson이 프로그래밍에 관심이 있다는 것을 알게 되었습니다. 그는 Phase Vocoder 코드를 해킹했습니다.""
     * Weezer의 ""Buddy Holly""가 Windows 95 설치 CD에 포함되어 많은 사람들이 처음 본 PC 비디오 중 하나였고, 30년 후 Cuomo가 조용히 코딩 세계에서 자신만의 영역을 만들어가고 있다는 점에서 대칭성을 찾아낸다고 말함.

     ""Weezer의 'Buddy Holly'가 Windows 95 설치 CD에 포함되어 많은 사람들이 처음 본 PC 비디오 중 하나였고, 30년 후 Cuomo가 조용히 코딩 세계에서 자신만의 영역을 만들어가고 있습니다.""
     * Cuomo가 자신의 노래 아이디어를 카탈로그화하기 위해 스프레드시트를 사용한다고 언급한 Song Exploder 팟캐스트 에피소드를 소개함.

     ""Cuomo가 자신의 노래 아이디어를 카탈로그화하기 위해 스프레드시트를 사용한다고 언급한 Song Exploder 팟캐스트 에피소드가 있습니다.""
     * 음악이 아이디어와 발명으로 이어질 수 있으며, 이는 소프트웨어를 포함할 수 있다고 언급하며, 자신이 postgres 확장을 작성하는 사람이라고 소개함.

     ""음악이 아이디어와 발명으로 이어질 수 있으며, 이는 소프트웨어를 포함할 수 있습니다.""
     * Michael Kennedy의 Talk Python 팟캐스트에 출연했다는 사실을 공유함.

     ""그는 몇 년 전 Michael Kennedy의 Talk Python 팟캐스트에 출연했습니다.""
     * Todd Runtgren이 Apple 개발자였으며, 그의 소프트웨어 회사인 ""Utopia Softworks""에 대해 언급함.

     ""Todd Runtgren은 Apple 개발자였으며, 'Utopia Softworks'라는 소프트웨어 회사를 운영했습니다.""
     * 많은 프로그래머가 음악가이기도 하며, Radiohead의 Jonny Greenwood가 어렸을 때 BASIC을 가지고 놀았다는 인터뷰가 있다고 언급함.

     ""많은 프로그래머가 음악가이기도 하며, Radiohead의 Jonny Greenwood가 어렸을 때 BASIC을 가지고 놀았다는 인터뷰가 있습니다.""
"
"https://news.hada.io/topic?id=13157","AI 붐이 .ai 도메인을 가진 작은 섬나라 Anguilla에 횡재를 안겨주다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI 붐이 .ai 도메인을 가진 작은 섬나라 Anguilla에 횡재를 안겨주다

     * 서인도 제도(카리브해)에 있는 섬나라 앵귈라는 .ai 웹사이트 등록으로 월 수백만달러의 수익을 올리는 중
          + 영국의 해외 영토. 인구 약 1만5천명
     * 1980년대 후반에 IANA가 국가와 지역에 고유한 2문자 도메인을 할당하면서 .ai 도메인을 받고, 우여곡절 끝에 정부가 관리하게 됨
     * ChatGPT가 나온후 5개월간 매출이 4배 증가 후 계속 유지하고 있으며, 이미 정부 예산의 1/3 정도를 차지함
     * 투발루는 .tv 도메인을 외국 대기업에 50년간 맡겨버려서 정부가 돈을 많이 못벌고 있는데 .ai는 어떤가 ?
          + 현재 한달에 USD $3m (3백만달러, 40억원) 정도임
          + 도메인을 2년간 유지하므로 이 돈은 전부 새로운 도메인임
          + 새 도메인들에 대해서 $3m 정도를 유지한다면, 갱신이 일어나는 1년후에는 월 $6m 이 될것
     * 이는 일반 예산의 일부라서 정부가 원하는 대로 사용 가능
          + 앵귈라 정부는 특이하게 이 돈으로 빚의 일부를 갚았음
          + 또한 주거용 건물에 대한 재산세도 폐지함

   http://datahaven.net/ 디자인이 충격적이군요...

   사용된 태그가 html, body, h1, h2, a 이러고 끝이네요 ㅋㅋㅋㅋㅋㅋ

  Hacker News 의견

     * 월 300만 달러의 수익과 도메인 갱신
          + 현재 월 300만 달러의 수익은 새로운 도메인 판매에서 발생함.
          + 1년 후 갱신이 시작되면 수익이 월 600만 달러로 증가할 것으로 기대됨.
          + AI 분야의 인기로 인해 많은 프로젝트와 아이디어가 생겨나고, 실제로 구축하지 않을 프로젝트의 도메인도 구매됨.
          + 많은 도메인이 갱신되지 않을 것이며, 새로운 도메인 생성 수는 오래 지속되지 않을 것으로 예상됨.
     * 튀발루의 .tv 도메인과 기후 변화의 영향
          + 튀발루의 GDP의 95%를 차지하는 .tv 도메인의 미래에 대한 우려.
          + 기후 변화로 인해 섬이 사라질 경우, 해당 국가와 도메인의 존속 여부에 대한 질문.
     * ICANN의 도메인 관리와 국가 수입
          + ICANN이 국가의 수입에 영향을 줄 수 있는 도메인 축약어를 선택하는 것에 대한 비판.
          + 도메인이 특정 국가에 추가 수입을 제공하게 될 것이라고 DNS 시스템 창시자들이 예상하지 못했음.
          + ICANN이 IP로 해석되는 모든 문자열에 대해 일률적인 요금을 부과하지 않은 이유에 대한 의문.
     * 튀발루의 UN 가입과 .tv 도메인
          + 1998년 .tv 도메인을 활용한 수익 창출 후 2000년에 튀발루가 UN에 가입함.
          + 이전에는 UN 회비를 감당할 수 없었음.
     * 특별한 TLD(Top-Level Domain)
          + 튀발루(.tv), 리비아(.ly), 앵귈라(.ai) 등의 국가 코드 최상위 도메인(ccTLD)에 대한 언급.
          + Matt of WordPress는 트리니다드 토바고의 .tt 도메인을 획득하여 ma.tt를 소유함.
          + 캐나다와 같은 일부 국가는 도메인 등록을 위해 거주 요건을 요구함.
     * .io 도메인의 위험성과 ccTLD의 추세 변화
          + .io 도메인과 관련된 위험에서 배워야 하며, 전통적인 도메인으로의 회귀와 새로운 도메인의 대량 출시가 있었음.
          + ccTLD가 '유행'으로 여겨지는 것은 더 이상 일어나지 않아야 함.
     * Fortune 100 기업의 .ai 도메인 차단
          + 여러 Fortune 100 기업이 지적 재산 유출 가능성이 있는 콘텐츠를 호스팅한다고 여겨지는 .ai 도메인을 차단함.
          + 금융 서비스 업계에서 새로운 제품을 출시하려는 경우 고려해야 할 사항.
     * DataHaven.net 웹사이트의 미니멀리즘
          + DataHaven.net 웹사이트의 간소함에 대한 언급.
          + 현대 비즈니스 운영과 대조되는 웹사이트 디자인.
     * 앵귈라 주민당 월 200달러 수익
          + 월 300만 달러의 수익이 앵귈라의 15,000명 주민에게 월 200달러씩 분배됨.
     * .ai 도메인의 도메인 스쿼팅
          + .ai 도메인에 대한 상당한 도메인 스쿼팅 현상.
          + 간단하고 AI와 관련 없는 단어의 .ai 도메인이 400만 달러로 평가됨.
          + 많은 단어와 구문이 등록되었지만 판매를 위해 나열됨.
          + 새로운 판매가 둔화될 것이며, 가치가 떨어짐에 따라 갱신도 둔화될 것으로 예상됨.
"
"https://news.hada.io/topic?id=13217","Show GN: 비즈니스 앱 개발과 운영을 좀 더 쉽게 만들어 줍니다. HandStack","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: 비즈니스 앱 개발과 운영을 좀 더 쉽게 만들어 줍니다. HandStack

  비즈니스 앱은 무엇인가요?

   이익을 얻거나 비용을 절감하는 기업 활동에 필요한 업무 지식을 관리하는 소프트웨어를 의미합니다.

   HandStack의 미션은 디지털 전환 이슈가 확대되며 비즈니스 모델을 통합 관리를 하기 위해 기업의 고유 개발 프로세스와 비용을 절감 할 수 있는 솔루션과 방안을 제공하는 것입니다.

  개발 및 유지보수 비용 절감 방안

   기업의 업무 프로젝트들은 논리적으로 보면 앱 에서 이뤄지는 거래(요청/응답) 과정이 데이터베이스 CRUD(입력, 조회, 수정, 삭제)가 전체 거래의 90%를 차지하는 경우가 대부분입니다.

   그리고 다양한 고객 요구사항과 유지보수가 많은 소프트웨어 아키텍처의 비즈니스 로직이 거의 비슷하게 구성되면서 SQL에 매개변수를 전달하는 부분을 다르게 처리하는 걸 반복적으로 개발됩니다.

   HandStack은 HTML/Javascript/SQL 기술로 기업의 비즈니스 앱 개발 및 운영 환경을 단순화, 표준화 하여 최소한의 비용으로 지속가능한 서비스를 운영 할 수 있는 솔루션을 제공하여 업무 프로세스를 개선합니다.

  비즈니스 소스 코드 추가 및 변경

     * 계약 중심 설정 및 개발
     * 데이터베이스 CRUD 요청에 대한 SQL을 작성하면 API 서비스로 제공
     * Serverless Function(Node.js, C#)을 작성하여 API 서비스로 제공
     * Forbes 확장 모듈로 기능 제공
     * 빠른 장애 원인 확인

  개발 및 배포 프로세스 개선

   AS-IS
     * 화면 개발
     * 업무 개발 (인터페이스, 데이터 변환)
     * 쿼리 개발
     * 컴파일 & 빌드
     * 사용자가 적은 시간대 정기 배포
     * 프로그램 다운 타임후 서비스 실행
     * 배포 다음날 업무 담당자 확인

   TO-BE
     * 화면 개발
     * 쿼리 개발
     * 언제든 즉시 배포
     * 업무 담당자 즉시 확인

  HandStack 주요 특징 요약

     * 화면/기능 개발 풀 스택 프레임워크와 라이브러리 그리고 서버 프로그램 제공
     * 화면/기능에 필요한 다양한 오픈소스/상용소스 활용 가능
     * 상업적으로 사용 가능한 제한이 없는 오픈소스로 공개
     * 기업의 비즈니스 서비스와 제품에 필요한 앱을 만들기 위한 IT 도입 비용 절감

   HandStack 확인하기
"
"https://news.hada.io/topic?id=13222","상대성이론을 적용한 우주선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             상대성이론을 적용한 우주선

상대론적 우주선 페이지 소개

     * 이 페이지는 상대론적 우주선의 비행을 시뮬레이션하는 곳임.
     * 사용자는 가속 슬라이더를 클릭하여 우주선의 속도를 조절할 수 있음.
     * 우주선은 빛의 속도의 0.00%로 비행 중이며, 감마(γ)는 1.00, 거리(광년)는 0.0, 화면 중앙의 도플러 요인은 1.00, 최대 도플러 요인도 1.00으로 설정되어 있음.
     * 우주선 시간(년)과 세계 시간(년)은 모두 79년으로 표시됨.
     * 페이지는 2020년 Dmytry Lavrov에 의해 제작됨.

GN⁺의 의견

     * 이 시뮬레이션은 상대성 이론의 기본 개념을 이해하는 데 도움을 줄 수 있음.
     * 사용자가 직접 가속도를 조절하며 우주선의 비행을 체험할 수 있어, 학습에 흥미를 더할 수 있음.
     * 도플러 효과와 시간의 상대성 같은 복잡한 물리학 개념을 시각적으로 보여주어, 초급 소프트웨어 엔지니어도 쉽게 이해할 수 있는 교육적 가치가 있음.

        Hacker News 의견

     * 특수 상대성 이론의 직관적이지 않은 특성을 잘 보여주는 시각화에 대한 감탄

     1G로 지속적으로 가속할 수 있다면, 인간의 수명 내에 우리 은하 중심을 방문할 수 있음을 깨닫는 것은 놀라운 일. 물론 지구에서는 27900년이 흘렀을 것이므로, 여행에 대해 이야기할 사람은 없을 것.
     * 우주의 나이와 비교하여 우주 탐사의 장기적 관점 제시

     최대 가속으로 850년의 우주선 시간이 흐르고, 우주는 10^30년이 됨. 이 시점에서는 백색 왜성, 중성자 별 등이 남아 있으며, 우리 태양과 같은 별들은 멀고 먼 기억. 블랙홀이나 백색 왜성 주변에 구축된 구조물에 의지해 생명이 오랜 시간 에너지를 추출할 수 있음.
     * 상대적으로 작은 지속 추력으로도 시간 지연을 이룰 수 있다는 사실에 대한 놀라움과, 이를 통한 항성간 여행의 가능성

     1m/s의 지속 추력으로 상당한 시간 지연을 달성할 수 있으며, 이는 연속적인 가속이 가능하다면 항성간 여행이 실현 가능함을 의미. 1G로 가속하면 알파 센타우리까지 약 3년이 걸림.
     * 상대론적 수학을 모르지만, 질량을 에너지로 직접 변환하는 기술에 대한 추측

     핵융합 등의 어느 정도 실현 가능한 기술이 우리를 상대론적 효과를 무시하고 질량을 에너지로 변환하는 단계로 이끌 수 있는지에 대한 의문. 질량과 에너지의 직접 변환은 상대론적 효과를 무시하고도 빛의 속도에 도달하기 위해 100,000kg을 가속하는 데 50,000kg이 필요함.
     * 상대론적 효과를 다룬 고전적인 과학 소설에 대한 언급

     'Tau Zero'라는 소설은 제동이 고장 난 우주선이 속도를 높여 문제를 해결하려는 내용을 담고 있으며, 가장 서사적인 과학 소설 중 하나로 평가.
     * 과학 소설을 통해 미래를 예측하고, 어느 정도 자기 결정적인 영향을 받았다는 개인적인 경험 공유

     과학 소설을 많이 읽었으며, 그것이 때로는 시대를 앞서가고, 어떤 면에서는 자기 결정적인 영향을 미친다고 느낌. 논리적으로는 우주 여행의 불가능성을 이해하지만, 여전히 믿고 싶은 마음이 있음.
     * 1G 가속을 유지하는 것이 간단하지 않다는 지적과, 빛의 속도에 가까워질수록 증가하는 질량과 추력에 대한 설명

     우주선이 빛의 속도에 가까워질수록 질량이 증가하고, 그에 따라 유지해야 하는 추력도 증가함. 따라서 엔진은 마법과 같은 에너지원을 활용할 수 있어야 함.
     * 상대론적 우주 비행 시뮬레이터에 대한 소개

     2020년에 만들어진 상대론적 우주 비행 시뮬레이터는 빛의 속도에 가까운 우주선을 타고 여행하는 모습을 보여줌. 2012년 게임 'The Polynomial'에서 상대론적 효과를 구현한 원래 코드를 기반으로 함.
     * 상대론적 속도에서의 파장 변화에 대한 질문

     우주에서 관측 가능한 파장만큼 큰 광자가 상대론적 속도로 가속될 때, 플랑크 길이보다 짧은 파장으로 블루시프트되는 현상에 대한 호기심.
     * 상대론적 속도에서 대기 저항을 이용한 우주선 개선에 대한 비판적인 의견

     상대론적 속도에서 대기 저항을 사용하면 우주선이 플라즈마 구름으로 변할 것임.
     * 우리가 살고 있는 우주의 규모에 대한 경이로움 표현

     우리는 매우 큰 폭발 속에 살고 있음.
"
"https://news.hada.io/topic?id=13206","오픈소스답게 소프트웨어 설계하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           오픈소스답게 소프트웨어 설계하기

   저자는 오픈소스 프로젝트 10여 개를 디렉팅하고 개발했으며, 팀에서 소프트웨어를 처음 설계할 때에도 어지간하면 오픈소스로의 전환 가능성을 염두함. 이 과정에서 주로 어떤 점을 강조하는지 소개.
     * 배포 방식으로서의 오픈소스의 장점
          + 아키텍처의 독립성 확보 가능
          + 오픈소스 라이선스로 사용자 자유도 향상
          + 시작부터 보안에 신경씀
     * 좋은 오픈소스 구조를 만드는 첫 걸음
          + 일관성 - 명확한 세계관 수립
          + 확장성 - 참여를 위한 외부 인터페이스
          + 유지 보수성 - 설정 파일로 동작이 읽히는 프로그램
     * 소프트웨어 유형별 구조와 유의사항
          + 유틸리티 라이브러리
          + 데이터 의존 라이브러리
          + API 또는 CLI 애플리케이션
          + 최종 사용자가 있는 애플리케이션
     * 네이밍과 기술브랜딩

   좋은 내용이네요 감사합니다
"
"https://news.hada.io/topic?id=13249","레이디버드 브라우저 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            레이디버드 브라우저 프로젝트

레이디버드 브라우저 프로젝트

     * 레이디버드는 독립적인 웹 브라우저를 처음부터 구축하는 진행 중인 프로젝트임.
     * 이 프로젝트는 GitHub의 SerenityOS/serenity 프로젝트의 일부로 개발되고 있음.
     * 아직 다운로드 가능한 바이너리는 없으며, 프로젝트가 아직 매우 불안정함.
     * 브라우저 구축에 집중하고 있기 때문에 이 페이지는 화려하지 않음.

뉴스 및 링크

     * 2023년 8월 13일: 새로운 후원자 ohne-makler.net
     * 2023년 6월 28일: Shopify가 레이디버드 후원자로 합류함을 환영함.
     * 레이디버드 브라우저에 대한 트위터 계정과 원래의 발표 포스트, 2023년 웹 엔진 해커페스트에서의 레이디버드에 대한 발표(비디오) 등 다양한 링크 제공.
     * 2023년 5월부터 2024년 1월까지 매달 레이디버드 브라우저 업데이트 비디오 링크 제공.

후원

     * 기업 후원자와 개인 후원자 목록 제공.
     * GitHub Sponsors나 유사 서비스를 통해 개발자 개인을 후원하여 개발을 지원할 수 있음.

GN⁺의 의견

     * 레이디버드는 SerenityOS 프로젝트의 일환으로, 독립적인 웹 브라우저 개발을 목표로 하는 혁신적인 프로젝트임.
     * 개발 커뮤니티와 후원자들의 지원을 통해 지속적으로 성장하고 있으며, 오픈소스 개발의 중요성을 보여주는 사례임.
     * 이 프로젝트는 기술 애호가들과 개발자들에게 흥미로운 진행 상황을 제공하며, 새로운 웹 브라우저의 가능성을 탐색하는 데 기여함.

        Hacker News 의견

     * 새롭고 독립적인 브라우저를 처음부터 만들어내는 해커 팀의 노력이 매우 영감을 주는 일임.
          + 작은 규모의 인력과 자금으로 가능할 것이라고 생각하지 않았던 프로젝트의 진행에 놀라움을 표함.
          + 웹 표준화가 진전되어 오늘날 브라우저 개발이 과거보다 쉬워졌을지에 대한 생각을 공유함.
          + 과거 개발자들이 처음 브라우저를 설계할 때는 완전한 로드맵이 없었지만, 현재는 이미 많은 웹 표준이 존재하고 인기도 알 수 있어 현대 웹을 지원하기 위해 무엇을 우선시해야 할지 알 수 있음.
          + 인터넷 익스플로러의 XSLT 지원과 FTP의 사용 등, 한때는 흔했던 기능들이 이제는 버려질 수 있는 아이디어라고 생각함.
          + XSLT가 여전히 주요 브라우저에서 지원되지만 드물게 사용되고 XSLT 1.0에 머물러 있어, 앞으로 상당 기간 동안 생략해도 될 것들 중 하나로 여겨짐.
     * 한 사람이 재미로 운영체제를 처음부터 만들기 시작한 프로젝트가 실수로 지난 10~20년 중 가장 유망한 새로운 브라우저 엔진을 만들어냈다는 것이 놀랍다고 함.
          + 개발 비디오를 1~2년 동안 지켜보며, 짧은 시간 내에 이룬 진전의 속도가 믿기 어려울 정도임.
          + 이제 여러 자원봉사자와 개발자를 지불할 수 있는 충분한 후원금이 있어, 앞으로 무엇이 일어날지 매우 흥미롭다고 함.
     * 매일 사용할 수 있는 브라우저가 되기를 희망하며, 새로운 웹 엔진의 성공을 기대함.
          + Servo 프로젝트의 성공도 바라며, 개발에 기여하고 싶지만 Discord에서 개발이 조정되고 있어 프로프라이어터리 소프트웨어를 피하기 때문에 아쉬움을 표함.
     * 브라우저 엔진 개발에서 여전히 경쟁이 살아있음을 보는 것이 좋다고 함.
          + Servo(이전에 Mozilla의 일부)와 Ladybird는 여전히 일상적인 브라우저에 비해 개발이 덜 되었다고 언급함.
          + Ladybird의 나이틀리 빌드가 없는 것이 아쉽지만, 아마도 버그 리포트를 원하지 않기 때문일 것이라고 추측함.
     * 프로젝트 진행 스크린샷을 보는 것을 좋아한다고 함.
     * Mozilla가 개인 정보 보호 서비스를 재판매하는 동안, 다른 이들은 60억 달러가 필요 없는 더 나은 브라우저를 만들고 있다고 함.
     * 이 프로젝트가 매우 멋지지만, ISO 이미지가 없다는 것이 기술적 능력의 지표가 아닌데도 불구하고 비기술 사용자를 대상으로 하지 않는다는 점이 다소 무례하게 느껴진다고 비판함.
          + 리눅스 VM을 부팅하고 많은 개발 패키지를 설치한 후 자신의 부팅 이미지를 만들어서 시도해보고 싶지 않다는 의견을 표함.
     * Shopify가 후원자로 나타난 것에 대해 궁금증을 표함.
     * 프로젝트가 매우 멋지다고 하며, 부동산 사이트의 후원이 궁금하다고 함.
     * 프로젝트가 단순히 재미로 하는 것인지, 아니면 실제로 경쟁에 기여하는 것인지에 대한 질문이 중요하다고 함.
          + 단순히 재미로 하는 브라우저를 사용자들이 자신의 보안에 신뢰해서는 안 되며, 만약 그렇다면 브라우저 공간에서의 경쟁에 대한 기대를 조절해야 한다고 언급함.
"
"https://news.hada.io/topic?id=13212","Stract: 오픈소스 비영리 검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Stract: 오픈소스 비영리 검색 엔진

     * Rust로 개발된 독립/비영리/오픈소스 검색엔진
     * 키워드 검색 및 Site:, intitle: 등의 고급 쿼리 문법과 DDG의 !bang 문법 지원
     * 위키피디아 및 Stackoverflow 사이드바
     * 3자 트래커가 있는 웹사이트의 순위 하향
     * Optics 기능으로 검색 결과 커스터 마이징
          + 검색을 블로그, 인디 웹사이트, 교육 콘텐츠 등으로 한정
          + 최종 검색결과를 만들어가는 시그널들이 결합되는 방식을 사용자 지정 가능
     * 신뢰하는 사이트들의 링크에 우선순위 부여
     * Explore 기능으로 특정사이트와 비슷한 사이트 찾기 지원

  Hacker News 의견

     * 검색 결과에 대한 불만이 많지만, 누군가가 검색 엔진을 만들고 오픈 소스(AGPL)로 공개한 노력을 인정해야 한다고 생각함. 결과는 시간이 지나면서 개선될 것이며, 몇 번의 검색 결과에 대해 상당히 만족함.
          + 누군가의 노력과 오픈 소스 기여에 대한 감사의 표현. 검색 결과의 지속적인 개선에 대한 기대감.
     * 프로젝트가 멋지고, 속도와 깔끔한 디자인, 다양한 옵션, 다국어 결과 등이 인상적임. 몇 가지 고려해야 할 점들이 있음:
          + 프로젝트 뒤에 있는 사람이나 조직에 대한 정보가 부족함.
          + 검색 결과가 흥미롭고 넓으며, 용어의 '공동' 출현에 대한 가중치를 좀 더 두면 좋을 것 같음.
          + 시간이 지남에 따라 사이트 가중치를 개발하는 것이 흥미로울 수 있으며, 사용자 투표를 통한 것도 고려해볼 만함.
          + 현재는 중요하지 않은 사이트와 중요한 사이트가 함께 나타나며, 예를 들어 'Donald'을 검색하면 가장 유명한 도널드나 가장 신뢰할 수 있는 사이트가 먼저 나오지 않는 흥미로운 순위를 보여줌.
          + 공식 사이트가 종종 낮은 순위에 있으며, 예를 들어 'EU'와 '보조금'을 검색하면 공식 EU 웹사이트가 아닌 임의의 프로젝트 웹사이트가 나옴.
          + 매우 사소하지만, 적어도 Firefox 모바일에서 검색 엔진을 내 검색 엔진에 직접 추가할 방법이 없어, 수동으로 추가해야 함.
          + 프로젝트에 대한 긍정적인 평가와 함께 개선할 수 있는 여지에 대한 피드백.
     * 매우 사용자 정의 가능함 -- 검색에 대해 모든 것을 사용자 정의할 수 있는 능력을 제공하고자 함. 사이트 차단, 사이트 강화, 특정 사이트의 링크 우선 순위 지정 등이 가능함.
          + 사용자 정의 기능에 대한 설명과 이를 통한 검색 경험의 개인화 가능성.
     * Stract를 사용하기 위해 (시력이 약간 떨어짐), 다음과 같은 사용자 정의 CSS를 적용해야 했음:
          + 접근성을 고려한 사용자 정의 CSS 적용에 대한 예시.
     * HN에서 인기 있는 사이트, 블로그롤 등에서만 결과를 반환하는 옵션과 '관리 옵틱스' 설정은 매우 멋지고 유용함. 이 기능만으로도 이 검색 엔진을 사용할 수 있을 것 같음.
          + 특정 소스에서만 검색 결과를 받는 기능에 대한 호평.
     * 소스: Stract GitHub
          + 프로젝트의 기술 스택에 대한 정보 제공.
     * 출시를 축하함! 직접 검색 엔진을 만들고 있는데, 많은 노력이 들어갔다는 것을 알 수 있음. 가장 크게 놓친 것은 페이지 제목인데, 검색 시 사이트가 무엇에 대한 것인지 빠르게 파악하기 어려움.
          + 페이지 제목의 중요성과 검색 결과의 명확성에 대한 피드백.
     * 명확하게 표시된, 현재 검색 쿼리에 기반한 컨텍스트 광고와 광고 없는 구독 옵션
          + 검색 엔진의 이상적인 광고 모델에 대한 지지와 DuckDuckGo와의 비교.
     * 하루 동안 기본 검색 엔진으로 설정해봄. 사용 사례에 완전히 부합하지는 않음. 검색 결과를 개선하는 데 도움을 줄 수 있는 방법이 있을까?
          + 검색 엔진의 사용 경험 공유와 개선에 대한 관심 표현.
     * 상당히 유망해 보임! GitHub README에서 tantivy에 대한 공로를 인정해줘서 감사함. 도움이 필요하면 연락해달라고 함.
          + 프로젝트의 기술적 기여에 대한 감사와 협력 의사 표현.
"
"https://news.hada.io/topic?id=13224","Neovide - Neovim을 위한 크로스플랫폼 GUI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Neovide - Neovim을 위한 크로스플랫폼 GUI

     * 그래픽을 개선했지만, 기능적으로는 터미널 UI처럼 작동
     * 커서 애니메이션으로 위치 파악 및 추적 용이
     * 라인단위가 아닌 픽셀단위의 부드러운 스크롤링
     * 창 레이아웃 변경시 애니메이션
     * Ligature 및 Font Shaping 지원
     * 플로팅 윈도우의 배경 Blur 처리로 시각적 구분 개선
     * Emoji 지원 : Font fallback으로 글꼴에 포함되지 않은 이모티콘의 렌더링 가능
     * WSL 지원 : wsl 내부에서 전체 GUI 창 표시. 통신은 표준IO를 통해 Neovim의 WSL 복사본으로 전달되어 VS Code의 원격 편집과 유사한 경험을 제공
     * 기존 Neovim 인스턴스에 연결 가능 (TCP, Unix Domain Socket, Named Pipe)
     * 커서 이동시 다양한 애니메이션 잔상 효과들 : Railgun, Torpedo, Pixiedust, Sonic Boom, Ripple, Wireframe

   저도 쓰고있는데 맘에 들어요!
   특히 반투명 기능이요.

   커서 애니메이션은 취향에 안맞아서 바로 disable 했지만, 마우스 활용이 가능한건 좋은것 같아요
   neovim 기존 플러그인이 그대로 지원하는게 맘에들어요

   키보드 커서 disable하려면 어떤 경로에서 해야 하는지 문의 드립니다 저도 그거 보기 싫어서 ㅜㅜ

   제 네오빔 세팅에서 해 주면 되겠군요 ㅎ

   네 init.vim 에 vim 구문으로 추가 가능해요
   neovide_cursor 관련 옵션들 false 하고 애니메이션 길이를 다 0으로 뒀어요

   기능페이지 https://neovide.dev/features.html 에서 애니메이션을 보시면 어떤 것이 개선되었는지 잘 확인 가능합니다.
   뭔가 멋져요 ㅎㅎ
"
"https://news.hada.io/topic?id=13258","파이썬 80줄로 만든 검색 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           파이썬 80줄로 만든 검색 엔진

파이썬으로 만든 80줄짜리 검색 엔진

     * 지난 9월에 Wallapop의 검색 데이터 과학자로 합류하여 Solr이라는 오픈 소스 검색 엔진을 다루는 일을 함.
     * 검색 엔진의 기본 원리를 이해하고자 파이썬을 사용하여 처음부터 검색 엔진을 만들기로 결정함.
     * 목표는 ""소규모 웹사이트 발견성 위기""를 해결하는 것으로, 구글과 같은 검색 엔진을 사용하여 찾을 수 없는 작은 웹사이트들을 다시 위대하게 만드는 것임.
     * 이 글에서는 파이썬을 사용하여 검색 엔진을 만드는 과정을 안내하며, 작성한 모든 코드는 GitHub의 microsearch 리포지토리에서 확인할 수 있음.
     * 구현된 검색 엔진은 생산 준비가 완료된 검색 엔진이 아니라, 검색 엔진이 내부적으로 어떻게 작동하는지 보여주는 사용 가능한 장난감 예제임.

microsearch

     * microsearch를 구성하는 요소들을 살펴보고 각 요소를 어떻게 만들었는지 탐구함: (1) 크롤러, (2) 역 인덱스, (3) 순위 매기기, (4) 인터페이스.

  크롤러

     * 검색 엔진을 만들기 위한 첫 번째 단계는 검색할 데이터를 확보하는 것임.
     * ""로컬 구글""을 만들고자 하는 의도로 팔로우하는 블로그의 데이터를 사용하여 검색 엔진을 구축함.
     * 크롤링은 특정 블로그 목록의 모든 포스트를 다운로드하고 정리하는 과정을 포함함.
     * 더 빠르게 하기 위해 asyncio 파이썬 라이브러리를 사용하여 크롤링 시간을 20분에서 20초로 단축함.
     * 642개의 RSS 피드를 사용하였으며, 이 중 약 100개는 자주 읽는 블로그이고 나머지 500개는 surprisetalk 블로그 프로젝트에서 가져옴.

  역 인덱스

     * 역 인덱스는 키워드를 문서에 매핑하는 데이터 구조로, 특정 단어가 나타나는 문서를 쉽게 찾을 수 있게 함.
     * 사용자가 쿼리를 검색할 때 역 인덱스를 사용하여 쿼리의 키워드와 일치하는 모든 문서를 검색함.
     * 역 인덱스의 논리는 SearchEngine이라는 클래스 내에 정의되어 있으며, 두 개의 사전을 초기화하여 구현함.

  순위 매기기

     * 주어진 쿼리에 대해 일치하는 문서 세트가 있으면 이를 정렬하는 방법이 필요함.
     * 가장 유명한 순위 매기기 방법은 구글의 PageRank이지만, BM25와 같이 내용을 기반으로 문서를 순위 매기는 다른 옵션도 존재함.
     * BM25 점수 계산 방법을 포함하여 SearchEngine 클래스의 누락된 부분을 구현함.

  인터페이스

     * 검색 엔진을 구축한 후에는 이를 어떤 방식으로든 공개하고 싶음.
     * FastAPI 앱을 구축하여 검색 엔진을 노출하는 엔드포인트를 제공하고, 검색을 수행할 수 있는 간단한 웹페이지를 렌더링함.
     * 출력을 쉽게 읽을 수 있도록 상위 N개의 URL만 선택하기로 결정함.

누락된 기능

     * 검색 엔진을 자주 다루는 독자라면 구현에서 많은 기능이 누락되었다는 것을 알 수 있음.
     * 쿼리 연산자, n-gram 인덱싱, 쿼리 또는 문서 확장, 크롤링과 인덱싱을 동시에 수행하는 기능 등이 누락되어 있음.

결론

     * 이 프로젝트를 진행하며 Solr의 내부 작동 방식에 대해 더 잘 이해하게 되었고, 비동기 코드 작성의 놀라움을 배움.
     * 개인 검색 엔진을 만들기 위한 다음 단계로 검색 엔진에 의미 검색 기능을 구현할 계획임.

  GN⁺의 의견

     * 이 글에서 가장 중요한 것은 소규모 웹사이트의 발견성을 개선하기 위해 개인이 직접 검색 엔진을 만들 수 있다는 점임.
     * 파이썬과 오픈 소스 라이브러리를 활용하여 복잡한 기능을 가진 검색 엔진을 단순화하여 구현한 경험은 초급 소프트웨어 엔지니어에게도 영감을 줄 수 있음.
     * 비동기 프로그래밍의 효율성과 데이터 구조의 중요성을 실제 예제를 통해 보여줌으로써, 이 글은 기술적 통찰력과 실용적인 학습 기회를 제공함.

        Hacker News 의견

     * Pandas를 이용한 BM25 검색 엔진 개발
          + 개발자가 Pandas에서 작동하는 빠른 BM25 검색 엔진을 개발 중임.
          + Pandas를 사용하는 이유는 BM25 알고리즘 외에도 최신성, 인기도 등 다른 요소들을 쉽게 결합할 수 있기 때문.
          + 문구 매칭에는 많은 예외 사례가 있으며, 가능한 한 적은 메모리를 사용하여 위치 정보를 압축하는 것이 중요함.
     * 코드 리뷰: SearchEngine 클래스
          + k1과 b라는 파라미터의 의미를 모르겠으며, 코드에 주석이 전혀 없음.
          + _documents는 URL을 키로, 해당 URL의 내용을 값으로 가질 것으로 추정.
          + 코드에 문서화가 잘 되어 있지 않아 아쉬움. 문서화가 잘 되어 있었다면 검색 엔진 구축 학습 자료로 유용할 수 있었을 것.
     * 검색 엔진의 복잡성
          + 검색 엔진의 주된 어려움은 데이터의 양을 다루는 것임.
          + 로직 자체는 의외로 간단하며, 프로젝트는 불필요한 부분을 대부분 제거하여 성공적임.
          + 검색 엔진을 크게 만드는 것이 아니라 데이터를 더 작게 만들거나 신호 대 잡음 비율을 높이는 접근이 중요함.
     * 코드 행 수에 대한 의견
          + 외부 의존성을 사용하는 상황에서 코드 행 수를 자랑하는 것의 의미에 의문을 제기함.
          + 코드베이스에 대한 SI 단위는 없지만, 인지 부하를 어떻게든 측정해야 한다는 의견.
     * 코드 내의 표현에 대한 농담
          + 코드 내의 chunk for chunk in chunks if chunk 표현을 보고 나무꾼에 관한 농담이 떠오름.
     * 추천 엔진 코드 예시
          + 검색 엔진과 함께 사용할 수 있는 파이썬으로 작성된 20줄 미만의 추천 엔진 코드 제공.
          + 세션 로그에서 클릭된 URL을 기반으로 추천을 생성함.
          + 로그에 입력된 쿼리와 클릭된 URL을 혼합하여 사용하면 맞춤법 검사 제안도 얻을 수 있음.
     * 파싱 라이브러리 성능 비교
          + lxml.html과 lxml.html.clean이 BeautifulSoup보다 훨씬 빠를 수 있음을 언급함.
     * 키워드 사용에 대한 조언
          + 영어 검색 결과의 품질을 높이기 위해 1-gram 대신 2-gram과 3-gram을 사용할 것을 권장함.
          + n-gram은 문맥을 유지하는 데 도움이 됨.
     * 교육적인 프로젝트에 대한 의견
          + 프로젝트가 매우 멋지고 교육적이지만, 실제 배포는 하지 말 것을 권함.
          + 몇 만 개의 문서를 다루는 더 큰 규모의 프로젝트에는 SQLite의 FTS5를 사용하는 것이 해답임.
     * 파이썬을 이용한 대규모 데이터 처리에 대한 의문
          + 대규모 데이터를 빠르게 처리해야 하는 작업에 파이썬(느린 언어)을 사용하는 것이 정말 좋은 생각인지에 대한 의문 제기.
"
"https://news.hada.io/topic?id=13219","베수비우스 챌린지 2023 대상 수상: 첫 번째 두루마리 읽기 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 베수비우스 챌린지 2023 대상 수상: 첫 번째 두루마리 읽기 성공

베수비오 챌린지 2023 대상 수상: 첫 번째 두루마리 읽기 성공

     * 2000년 전 화산 폭발로 묻힌 헤르쿨라네움 파피루스 두루마리가 발견됨.
     * 이 두루마리들은 탄화되어 열기 없이는 손상 없이 펼칠 수 없음.
     * 2023년 3월 15일, Nat Friedman, Daniel Gross, Brent Seales가 베수비오 챌린지를 시작함.
     * 고해상도 CT 스캔을 공개하고, 100만 달러 이상의 상금을 제공함.
     * 전 세계 커뮤니티가 컴퓨터 비전, 기계 학습을 이용해 문제 해결에 나섬.
     * 2023년 12월, 두루마리의 95%가 남아 있음에도 불구하고, 2000년 만에 처음으로 두루마리의 일부를 읽을 수 있게 됨.

대상 수상

     * 베수비오 챌린지 대상에는 많은 훌륭한 제출작이 있었음.
     * 심사팀은 1월 내내 제출작을 심사함.
     * Youssef Nader, Luke Farritor, Julian Schilliger 팀이 대상 수상자로 선정됨.
     * 이 팀은 서로 독립적으로 가장 많은 텍스트를 복구함.
     * 제출된 코드와 방법이 기술 팀에 의해 검증되고 재현됨.
     * 상금 70만 달러 수상.

준우승자들

     * 준우승자들은 각각 5만 달러를 수상함.
     * 이들은 잉크 라벨링과 샘플링의 미묘함에 대한 새로운 접근법을 제시함.

두루마리가 말하는 것은?

     * 첫 번째 두루마리의 약 5%를 펼치고 읽는 데 성공함.
     * 이 두루마리는 기존 작품의 중복이 아니며, 고대 텍스트를 담고 있음.
     * 텍스트는 쾌락에 대해 다루며, 음식과 음악의 즐거움에 대한 철학적 논의를 포함함.

이미지의 정확성은 어떠한가?

     * 기계 학습 모델이 '환각'을 일으키는 것을 방지하기 위해 여러 조치가 취해짐.
     * 기술 재현, 동일 영역에 대한 다양한 제출작, 작은 입력/출력 창을 사용함.

어떻게 두루마리를 펼치는가?

     * 가상 펼침은 스캔, 분할, 잉크 감지의 세 단계로 이루어짐.
     * 다이아몬드 라이트 소스에서 X-레이 토모그래피를 사용해 3D 스캔을 생성함.
     * 분할은 복잡한 두루마리의 층을 식별하고 펼치는 과정임.
     * 잉크 감지는 기계 학습 모델을 사용해 펼쳐진 부분에서 잉크가 있는 영역을 식별함.

무엇이 필요했는가?

     * 베수비오 챌린지는 헤르쿨라넘 파피루스를 읽는 문제를 해결하고 유사한 프로젝트에 영감을 주기를 희망함.
     * 명확한 목표 설정, 견고한 출발점, 경쟁과 협력의 조화, 내부 분할 팀 고용, 돌파구를 위한 표면적 최대화가 중요했음.

다음은 무엇인가? 2024 베수비오 챌린지 대상 발표.

     * 2024년의 목표는 한 두루마리의 5%에서 네 두루마리의 90%까지 읽는 것임.
     * 2024 대상은 첫 번째로 이를 달성하는 팀에게 수여될 예정임.
     * 분할 과정의 자동화가 주요 목표임.

감사의 말

     * 프로젝트에 기여한 모든 사람들, 기부자들, 조직 팀, 파트너들, 학자들, 지원 스태프, 그리고 대상 수상자들에게 감사를 표함.

   GN⁺의 의견:
     * 이 프로젝트는 고대 문서의 디지털 복원과 기계 학습의 결합을 통해 인류 역사에 대한 새로운 이해를 제공하는 중요한 발전임.
     * 베수비오 챌린지는 기술과 인문학의 교차점에서 혁신적인 연구를 촉진하는 모범 사례로 볼 수 있음.
     * 이러한 노력은 잠재적으로 수천 년 동안 잊혀진 문화적, 철학적 지식을 복원하여 현대 사회에 새로운 통찰력을 제공할 수 있음.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 디지털로 두루마리를 풀어내는 기술, 종이의 균열을 잉크의 신호로 인식하는 방법, 그리고 이를 감지하기 위한 모델을 조각조각 맞추는 과정에 매료됨.
          + TimeSFormer 사용에 혼란스러움을 느낌. 비디오용으로 알고 있었는데, 이미지에 어떻게 적용했는지 궁금함.
          + 고고학에 대한 멋진 날로, 이룬 성과에 대해 젊은 마음들에게 큰 박수를 보냄.
     * 두 번째 댓글 요약:
          + 프로젝트의 불가능해 보이는 모습과 참여한 사람들의 똑똑함에 놀람.
          + 처음엔 5-10년은 걸릴 것으로 생각했으나, 이제 이룬 성과에 대해 놀라움과 함께 축하를 전함.
     * 세 번째 댓글 요약:
          + 고도로 발전된 기술이 마법과 구분이 안 될 정도로 놀라운 수준에 도달함.
          + 기계 학습 기술이 최근에 발견된 것인지, 아니면 오래전부터 있었는지, 그리고 이러한 알고리즘이 인기를 얻으면서 새로운 문제에 적용되는 방식에 대한 궁금증을 표함.
     * 네 번째 댓글 요약:
          + 올해 읽은 것 중 가장 멋진 것으로, 2000년 된 탄화된 두루마리에서 텍스트를 읽을 수 있다는 것이 과학 소설 같음.
     * 다섯 번째 댓글 요약:
          + 스캔된 두루마리를 분리하는 수작업과 새로운 두루마리를 스캔하는 비용이 더 많은 텍스트를 읽는 데 있어 주요 병목 현상임.
     * 여섯 번째 댓글 요약:
          + 고고학의 매력적인 측면 중 하나는 일부 유물을 고의로 탐사하지 않고 미래의 기술을 위해 남겨두는 관행임.
          + 원래 발견자들이 두루마리를 풀려고 시도했지만 불가능하다는 것을 깨닫고 나머지는 그대로 두었음.
     * 일곱 번째 댓글 요약:
          + 원래 모델이 1070 그래픽 카드에서 훈련되었다는 것이 놀라운 작업임.
     * 여덟 번째 댓글 요약:
          + 이 두루마리 컬렉션이 잃어버린 이야기들을 담고 있을 가능성에 대해 매우 흥분됨.
     * 아홉 번째 댓글 요약:
          + 필로데무스가 베수비오 화산의 용암에 묻힌 저택에서 글을 썼고, 2000년 후에 우리는 그의 글을 재구성하기 위해 첨단 기술을 사용함.
          + 그가 생각하는 사람이었기에, 우리가 그의 글을 읽을 수 있게 되었다는 것을 알려주고 싶음.
     * 관련 링크 요약:
          + 헤라클레움 두루마리에서 첫 단어를 발견한 컴퓨터 과학 학생에 대한 기사와 베수비오 챌린지에 대한 토론 링크 제공.
"
"https://news.hada.io/topic?id=13238","NaturalSQL-7B - 자연어를 SQL로 변환하는 강력한 모델 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 NaturalSQL-7B - 자연어를 SQL로 변환하는 강력한 모델

     * SQL-Eval 에서 76.5% 달성하여, 모델 크기 기준에서 최고의 성능을 보임
          + GPT-4(83%) 보다는 못하지만 GPT-3.5-Turbo(65%) / Claude-2(64.5%) 보다 뛰어남
          + sqlcoder-7b(71%) 보다 높고 sqlcoder-15b(78%)와 비슷
     * SQL 작성할 필요없이 대시보드를 노코드로 만들어주는 도구인 ChatDB가 개발

예시

     * 질문: 지난달에 가장 많은 주문 금액을 가진 고객을 결정하고, 그들이 주문한 모든 제품과 수량을 나열하시오.
     * 출력:
WITH LastMonthOrders AS (
  SELECT o.customerid, o.orderid, op.productid, op.quantity, p.productname, op.quantity * p.unitprice AS total_order_value
  FROM orders o
  JOIN order_details op ON o.orderid = op.orderid
  JOIN products p ON op.productid = p.productid
  WHERE o.orderdate >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month'
  AND o.orderdate < date_trunc('month', CURRENT_DATE)
),
CustomerTotalOrderValue AS (
  SELECT customerid, SUM(total_order_value) AS total_value
  FROM LastMonthOrders
  GROUP BY customerid
  ORDER BY total_value DESC
  LIMIT 1
)
SELECT c.customerid, c.companyname, lm.productid, lm.productname, lm.quantity
FROM CustomerTotalOrderValue ctov
JOIN LastMonthOrders lm ON ctov.customerid = lm.customerid
JOIN customers c ON c.customerid = lm.customerid;

     * NaturalQuery는 위와 같은 복잡한 질문, 서브쿼리, 비율에 대해 매우 잘 수행함.

  Hacker News 의견

     * SQL-Eval에서의 성능 점수가 76.5%로, GPT-4의 83%와 sqlcoder-15b의 78%에 조금 뒤처짐.
          + 이러한 AI 데이터 과학 인턴이 유용할 수 있는 응용 분야는 무엇일까? 75%의 정확도를 가진 AI를 활용해 무엇을 만들 수 있을까?
          + SQL 작업 시 자주 참고자료를 찾아보는 프로그래머로서, 이런 AI를 첫 번째 쿼리 초안 작성에 활용할 수 있을 것 같음.
          + 큰 모델들이 한 번의 케이스에서 더 나은 결과를 제공할 수 있지만, 64GB m1에서 15b 모델을 쉽게 실행할 수 있음.
          + 기업 환경에서는 스키마 정보를 OpenAI의 훈련 데이터로 유출하고 싶지 않고, 오프라인에서 쿼리를 실행하고 싶을 때도 있음.
          + 많은 쿼리를 수행하고 싶을 때 작고 로컬 모델이 유용함(비용 절감).
          + 비기술적인 사람들도 질의할 수 있는 미니 데이터 과학자는 멋질 것이나, 쿼리가 25%의 '부정확한' 경우에 속하는지 판단하는 방법이 궁금함.
          + 여러 AI가 서로의 답변을 검증하는 RAID와 같은 합의 알고리즘을 통해 전체 성공률을 높일 수 있을지도 모름.
          + 이러한 생각은 대부분 생각을 정리하는 과정이지만, 다른 사람들이 더 많은 아이디어를 가질 수도 있음. OP의 출시를 축하함!
     * 텍스트-투-SQL 모델들이 올바른 문제를 해결하고 있지 않다고 생각함.
          + 어려운 부분은 문법이나 'group by' 쿼리 작성 방법을 모르는 것이 아니라, 데이터의 의미를 이해하는 것임.
          + Snowflake의 50개 컬럼 테이블을 보고 컬럼 이름만으로 무엇인지 추측할 수 없음.
          + 예를 들어, 모두 ...price로 명명된 10개의 컬럼이 있는 테이블이 있을 때, 실제 의미를 알기 위해 위키를 찾아보거나 DBT 정의를 읽어야 함.
          + 모델이 생성하는 쿼리를 신뢰할 수 없음, 모델은 데이터를 이해하지 못하고 쿼리 문법만 이해함.
     * 이것이 오픈 소스가 아니라는 점을 지적함, 사용 기반 제한이 있기 때문에 '소스 사용 가능'이라고 부를 것.
     * 이것은 흥미롭고 관심 있는 분야에 해당하지만, 그것이 복잡한 질문이라고 생각하지 않음, 기본적인 분석 질문임.
          + 대부분의 분석가들은 잠을 자면서도 이런 것을 작성할 수 있음.
          + ChatGPT를 SQL 작성에 사용해보았지만 평범함, 하지만 분명히 나아질 것임.
     * AI의 많은 사용처와 마찬가지로, 특히 범위에 따라 그룹화하는 것과 같은 아이디어를 제시할 때 '시드'로서 매우 좋음.
          + 그러나 거의 모든 데이터베이스에서 문제는 세부 사항에 있음.
          + 다양한 제품이 '수량'을 다르게 해석하고(예: 박스 대 단위), 쿠폰과 할인이 이상한 방식으로 모델링되며, 무게가 파운드/킬로그램으로 가정되고 단위 지정 없이 혼합됨 등등.
     * 이것이 75%만 정확하다고 해서 쓸모없다고 말하는 사람들은 다음 두 가지를 고려해야 함:
          + 이것은 첫 번째 버전이며, 이미 상상할 수 있는 어떤 에어테이블보다 제품 소유자와 분석가들에게 천 배 더 유용함.
          + 모든 도전에 정확하고 싶은 마음은 있지만, 우리는 이미 ""충분히 좋은"" 경제에서 살고 있으며, 이것이 충분히 가까우면 비즈니스에 충분히 좋을 것임.
     * 더 복잡하고 현실적인 벤치마크인 Bird에서 어떻게 수행하는지 궁금함.
     * 데이터 분야에서 일한 경험을 바탕으로, 많은 사람들이 경영진으로부터 질문을 받고, 데이터 웨어하우스를 충분히 이해하여 그 질문에 답할 SQL을 작성하고, 때로는 예쁘게 포맷된 답변을 전달하는 책임이 있음.
          + 때로는 경영진이 ""왜 그 숫자가 너무 낮아? 분명히 그렇게 낮아서는 안 되는데""와 같은 후속 질문을 예측해야 하므로 데이터 엔지니어에게 버그를 확인하도록 요청해야 함.
          + 모든 LLM과 마찬가지로, 이것이 그 책임을 훨씬 쉽게 만들 것인지, 아니면 완전히 없앨 것인지 확신할 수 없음.
     * 정말 멋진데, 라이센스가 표준이 아님에도 불구하고 오픈 소스처럼 보임.
          + 실제 모델은 여기에서 찾을 수 있음: NaturalSQL-6.7B-v0
          + 이것은 훌륭한 기본 모델로 보이지만, 작은 모델에 대해 text-to-sql이 좋은 사용 사례인지 궁금함.
          + 우리도 이 분야에서 도구를 개발하고 있으며, 답변을 더 잘 알고 있기를 바라며 gpt-4를 사용하고 싶음. 심지어 gpt 3.5도 생산에 충분하지 않음.
     * 매우 멋진데, 이 라이센스가 Vanna와 함께 사용할 수 있을지 궁금함: Vanna
"
"https://news.hada.io/topic?id=13243","Hisense A9 Pro E-Ink 안드로이드 스마트폰 with 구글 플레이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Hisense A9 Pro E-Ink 안드로이드 스마트폰 with 구글 플레이

     * 6.1인치 824×1648 E INK 디스플레이 (300PPI), 전면 조명
     * 스냅드래곤 662, 램 8GB, 256GB, MicroSD 지원
     * WiFi, 4G/LTE, 블루투스 5.1
     * Android 11
     * 4000mAh 배터리, USB-C 포트
     * Hi-Res 오디오용 ES9318 칩 내장(LDAC, AAC, SBC, APTX) 3.5mm 헤드폰 잭
     * 13MP 후면, 5MP 전면 카메라
     * 얼굴 인식 및 지문 센서로 언락
     * 159mm x 79.5mm x 7.8mm, 183g
     * $479.99 USD

  Hacker News 의견

     * Hisense A9 사용자 경험
          + 몇 주 전부터 Hisense A9 사용을 시작함.
          + Android 11을 실행하며, Ink OS는 깔끔하고 간단함.
          + 미국 내에서 TMobile이 유일하게 지원하는 통신사이며, Mint Mobile을 사용 중임.
          + 뉴욕시에 위치해 있으며, 이전 아이폰에 비해 통신 범위는 다소 떨어지지만 여전히 괜찮음.
          + AliExpress에서 약 360달러에 구매 가능함(최소한 작성자는 그렇게 구매했음).
          + Android Auto 사용 가능 여부는 아직 확실하지 않음.
          + 전반적으로 휴대폰 사용 경험이 좋았으며, 일상적인 눈의 피로를 줄이면서도 필수 기능을 포기하지 않는 것이 목표였고, 이를 달성하는 데 도움이 됨.
     * 샤프의 MIP-LCD 기술에 대한 아쉬움
          + 샤프의 MIP-LCD가 휴대폰이나 태블릿 크기로 확대되지 않은 것은 아쉬움.
          + 이 기술은 e-ink만큼의 전력 효율성과 편안함을 제공하면서도 애니메이션과 부드러운 스크롤 UI를 따라갈 수 있는 충분히 빠른 응답 시간을 가짐.
          + Pebble 스마트워치와 최근의 Playdate 콘솔에서 사용된 화면 기술임.
     * Hisense A6L 듀얼 스크린 휴대폰 소개
          + Hisense가 제공하는 또 다른 흥미로운 휴대폰은 전면에 일반 LCD, 후면에 e-ink 스크린을 탑재한 A6L 모델임.
     * Hisense 휴대폰의 DAC에 대한 의견
          + 제조사가 음악 플레이어로도 사용할 수 있도록 강력한 DAC를 내장하기로 결정한 것이 포인트임.
     * Hisense A5 사용자의 경험 공유
          + 지난 4년간 Hisense A5를 매일 사용하고 있으며, 이는 이전 모델로서 성능이 덜하고 Google Play 스토어가 없음.
          + e-ink 휴대폰을 사용하며 진정한 스크린 없이 생활하는 것에 대해 물어보고 싶은 것이 있다면 언제든지 질문할 수 있음.
     * 일반 안드로이드 휴대폰에서 e-ink 경험 모방에 대한 질문
          + 모든 것을 흑백으로 설정하는 것은 쉽지만, 프레임 속도를 줄이고 해상도를 낮추는 방법이 있는지, 혹은 필터를 적용하는 방법에 대해 궁금함.
     * Hisense e-ink 휴대폰 사용자의 경험에 대한 호기심
          + 최근에 이와 유사한 형태의 Boox 안드로이드 e-reader를 구매했지만, 이 휴대폰에 관심이 있었음.
     * 휴대폰 부품 없는 e-ink 기기에 대한 관심
          + 휴대폰 기능이 없는 e-ink 기기에 대해 몇 번이나 살펴보았으며, 정말로 원하지만 그 가격에는 아직 구매하지 않음.
     * e-ink 스마트폰의 배터리 수명에 대한 현실적인 기대
          + 이러한 e-ink 스마트폰의 배터리 수명은 일반 휴대폰에 비해 좋지만, e-ink e-reader가 몇 주 동안 지속되는 것에 비해 예상만큼 길지는 않음.
          + 예를 들어, 이 휴대폰의 배터리는 대략 3-4일 정도 지속되지만, 일반 e-reader는 몇 주간 지속될 수 있음.
"
"https://news.hada.io/topic?id=13237","세계는 끔찍하다. 세계는 훨씬 나아졌다. 세계는 훨씬 더 나아질 수 있다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               세계는 끔찍하다. 세계는 훨씬 나아졌다. 세계는 훨씬 더 나아질 수 있다.

세계는 끔찍하다. 세계는 훨씬 나아졌다. 세계는 훨씬 더 나아질 수 있다.

     * 세 가지 진술이 동시에 사실임을 인식해야 더 나은 세계가 가능하다는 것을 볼 수 있음.
     * 뉴스는 주로 세계의 부정적인 면을 강조하고 긍정적인 발전은 거의 언급하지 않음.
     * 세계가 이미 이룬 진보만을 전달하는 것은 현재의 실제 문제를 간과할 때 무익하거나 심지어 혐오스러움.

세계는 끔찍하다

     * 2021년 데이터에 따르면 전 세계적으로 15세 미만 아동의 4.4%가 사망함.
     * 이는 매년 590만 명의 아동이 사망하는 것으로, 하루 평균 1만 6천 명, 분당 11명의 아동이 사망함.

세계는 훨씬 나아졌다

     * 역사는 세상이 변한다는 교훈을 줌.
     * 과거에는 전 세계 어디에서나 절반 정도의 아동이 사망했음.
     * 오늘날 가장 열악한 지역에서조차 아동 사망률은 과거보다 훨씬 낮음.
     * 역사적 데이터는 학교에서 거의 가르치지 않고 미디어에서도 보도하지 않아 많은 사람들이 긍정적인 발전을 모름.

세계는 훨씬 더 나아질 수 있다

     * 시간이 지남에 따라 과거에 세계를 변화시킬 수 있었던 것처럼 미래에도 진보를 계속할 수 있는지 여부에 대한 질문.
     * 유럽연합(EU)에서는 출생한 아동의 99.53%가 어린 시절을 살아남음.
     * 만약 전 세계 아동이 EU의 아동들처럼 잘 살 수 있다면 매년 500만 명의 아동 사망을 줄일 수 있음.
     * 가장 큰 기회는 더 가난한 국가에서 찾을 수 있으며, 이러한 국가에서는 어떻게 상황을 개선할 수 있는지 알고 있음.

세계는 끔찍하다; 이것이 우리가 진보에 대해 알아야 하는 이유다

     * 뉴스는 세계가 얼마나 끔찍한지에 초점을 맞추는 경향이 있음.
     * 이미 이룬 성취와 미래에 가능한 것의 규모를 고려할 때, 잘못된 것만을 보도하는 것은 무책임함.
     * 세계가 더 나은 곳이 되었다는 것을 보는 것은 우리가 직면한 매우 심각한 문제를 부정하는 것이 아님.
     * 데이터와 연구를 활용하여 우리가 직면한 문제와 가능한 진보를 볼 수 있지만, 이를 활용하지 않는 문제가 있음.

  GN⁺의 의견

     * 이 글은 세계가 직면한 문제와 진보의 가능성을 동시에 인식하는 것의 중요성을 강조함.
     * 아동 사망률의 감소와 같은 긍정적인 변화를 인식함으로써, 사람들은 더 나은 미래를 향한 행동에 동기를 부여받을 수 있음.
     * 데이터와 연구의 접근성을 높이고, 이를 통해 더 많은 사람들이 세계를 개선하기 위해 노력하도록 하는 것이 중요함.
"
"https://news.hada.io/topic?id=13175","FDA, 리콜된 필립스 수면무호흡 기계와 관련된 561건의 사망 보고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 FDA, 리콜된 필립스 수면무호흡 기계와 관련된 561건의 사망 보고

FDA, 필립스 수면무호흡 기기 리콜과 관련된 사망 561건 보고

     * 미국 식품의약국(FDA)은 필립스의 수면무호흡 및 기타 호흡 장애 치료 기기와 관련하여 561건의 사망이 보고됨.
     * 2021년 4월 이후 FDA는 필립스의 CPAP(지속적 양압 호흡기)와 BiPAP 수면 치료 기기에서 발포체가 분해되는 문제에 대해 116,000건 이상의 의료 기기 보고를 받음.
     * 해당 발포체는 소음과 진동을 줄이기 위해 사용되었으나, 분해되어 검은색 조각이나 보이지 않는 화학물질이 사용자에게 흡입되거나 삼켜질 수 있어 심각한 부상이나 영구적 손상을 예방하기 위한 의료 개입이 필요할 수 있음.

필립스, 미국 내 기기 판매 중단 및 정부와 합의

     * 필립스는 FDA 및 법무부와의 합의에 따라 미국 내에서 기기 판매를 중단하고, 약 4억 달러의 비용이 들 것으로 예상되는 정부와의 합의를 공시함.
     * 미국 법원의 승인을 받아야 하는 잠정 합의에 따라, 필립스는 이미 사용 중인 수면무호흡 기기의 서비스는 계속 제공하면서 새 기기 판매는 특정 조건이 충족될 때까지 중단하기로 함.
     * 2021년 6월에 발표된 초기 리콜 이후, 필립스는 500만 대 이상의 리콜된 기기 중 일부를 수리하려 했으나, 수리된 기기들도 결국 리콜됨.

리콜된 기기에 대한 클레임 제출 방법

     * 리콜된 기기의 일련번호를 조회하여 해당 기기에 대한 지급금을 확인할 수 있으며, 리콜된 기기를 2024년 8월 9일까지 반환하는 경우 반환 및 지급 보상을 받을 수 있음.
     * 자체 비용으로 리콜된 기기를 대체하기 위해 비슷한 CPAP 또는 인공호흡기를 구매한 사용자는 기기 교체 클레임 양식을 작성해야 함.
     * 클레임 제출 마감일은 2024년 8월 9일이며, 개인 상해나 의료 모니터링 구제에 대한 클레임은 이 합의의 영향을 받지 않음.

GN⁺의 의견

     * 필립스의 수면무호흡 기기 리콜 사건은 의료 기기의 안전성과 관련된 중대한 이슈를 드러냄. 이는 사용자의 건강과 직결되는 문제로, 의료 기기 제조사의 책임과 품질 관리의 중요성을 강조함.
     * FDA와 필립스 간의 합의는 향후 유사한 사례를 방지하기 위한 규제와 감독을 강화할 수 있는 계기가 될 것임.
     * 리콜된 기기 사용자들에게 제공되는 클레임 제출 프로세스는 피해를 입은 소비자들에게 구제 방안을 제공하고, 이러한 사태가 발생했을 때 소비자 보호가 어떻게 이루어지는지에 대한 이해를 돕는 사례가 될 것임.

        Hacker News 의견

     * 한 사용자는 필립스의 리콜 처리가 부실했기 때문에 자신의 코골이와 경미한 수면무호흡증을 거의 없애기 위해 입/목/혀 운동을 포함한 다양한 방법을 시도했다고 말함. 이 사용자는 Snore Gym 앱과 Vik Veer의 유튜브 비디오를 결합하여 사용했으며, 몇 달 후 코골이가 거의 들리지 않게 되었다고 함. 그러나 이 방법이 모두에게 효과적인 것은 아니라고 언급함.
     * 또 다른 사용자는 필립스 내부에서 이 문제를 제기한 사람들이 ""그렇게 간단하지 않다""는 반응을 받았을 것이라고 추측함. 이 사용자는 필립스의 CEO들이 왜 살인죄로 감옥에 있지 않은지 의문을 제기함.
     * 한 사용자는 자신의 아버지가 수면무호흡증 진단 후 CPAP 기계를 사용하다가 IPF(특발성 폐섬유증)로 사망했다고 언급하며, CPAP 기계 사용이 IPF의 원인이 될 수 있는지 궁금해함.
     * 다른 사용자는 필립스에 대한 소송을 진행할 피해자들이 John Barylick 변호사를 고용하기를 바람. Barylick은 독성 입자를 방출하는 저가 PU 폼에 대한 경험이 있으며, 2003년 스테이션 나이트클럽 화재 피해자들을 도왔음.
     * 한 피해자는 리콜이 제3자 회사에 의해 처리되었으며, 모든 소통이 제3자 도메인을 통해 이루어졌다고 말함. 이로 인해 의심스러운 도메인에서 이메일을 받고 정보를 제공해야 했다고 불만을 표함.
     * 한 사용자는 500만 대의 기기가 리콜되었다는 사실에 충격을 받았으며, 이렇게 많은 사람들이 수면무호흡 기계를 사용하고 있다는 것을 몰랐다고 함. 인간의 생활 방식에 대한 통념이 향후 50-100년 안에 크게 바뀔 것이라는 의견을 제시함.
     * 최근 수면무호흡증 진단을 받은 한 사용자는 CPAP 기계에 대한 불안감을 표현하며, 구강 장치가 효과적이라는 사실에 감사함을 표함.
     * 마지막으로 한 사용자는 원래 출처에서 언급된 사망자 수가 385명이었지만, 그 수가 증가했을 수 있으며, 전체 영향을 파악하는 데 몇 년이 걸릴 수 있다고 언급함. FDA가 계속해서 업데이트를 제공할지 궁금해함.
"
"https://news.hada.io/topic?id=13211","Ask GN: 매일 사용하는 브라우저 확장이 있으신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 매일 사용하는 브라우저 확장이 있으신가요?

   저는 아래 두개를 유용하게 사용중입니다.
     * gildas-lormeau/SingleFile: Web Extension for saving a faithful copy of a complete web page in a single HTML file
          + 인터넷 아카이버 비슷한 기능입니다. 웹사이트를 캡쳐해서 스탠드 얼론한 HTML로 다운로드 해줍니다.
          + 마음에 드는 아티클들을 스크랩...이라기 보다는 데이터 호딩할 때 유용합니다.
          + 글, 스타일, 이미지등을 HTML에 내장시킵니다.
          + self extracting archive을 지원해서 압축도 지원합니다.
          + 일부 JS는 동작하지 않습니다.
     * k08045kk/CopyTabTitleUrl
          + 선택한 탭들의 타이틀/URL을 클립보드에 붙여넣는 확장입니다. 마크다운 포맷을 지원해서 문서 작성시 아주 유용하게 사용 합니다.

   저는 이거 추천합니다. 웹사이트 갔을 때, 어떤 기술 스택 써서 만들었는지 보기 좋더라고요.

   https://chromewebstore.google.com/detail/wappalyzer-technology-pro/…

   https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/

   전 Tree Style Tab을 매일 씁니다.
   컨테이너 탭과 함께 파이어폭스를 쓰는 이유입니다.

   탭들 URL 원하는 형식으로 복사할 때 사용합니다. 아래 URL 모두 이거 이용한 거에요. 단축키로 Alt+C 누르면 복사되네요.
   TabCopy

   사이트별로 다크모드 및 여러 테마를 설정
   Dark Reader

   웹사이트를 프린트 편하게 만들어 줍니다. PDF로 저장할 때도 사용하네요.
   PDF Tools for Documents and Web Pages - PrintFriendly

   통합 북마크 매니저에요. 전 진짜 잘 쓰고 있습니다. 모바일용. PC용 다 있네요.
   Raindrop

   이거는 제가 만든 건데... 저는 잘 쓰고 있어요 ==;;
   현재 보고 있는 탭의 오디오만 활성화하는 확장프로그램이에요.
   Audio Focus

   저는 dragfree 잘 쓰고 있습니다.
   https://chrome.google.com/webstore/detail/…

   분명 여기서 본 거 같은데..
   acid tabs 라고 URL 기반으로 자동으로 그룹핑 해주는 확장 설치했는데 너무 좋네요
   커스텀으로 특정 URL 들을 묶을 수도 있고요
   https://chromewebstore.google.com/detail/acid-tabs/…

   아래 확장 프로그램 추천합니다

   Tab Organizer
   AdGuard
   Bulk URL Opener
   DeepL
   Duplicate Tabs Closer
   Enhancer for YouTube™
   Linkclump
   Lock Tab
   Merge Windows
   PIP screen for html5 video
   Privacy Badger
   Session Buddy
   Stylebot
   Tabliss - A Beautiful New Tab
   Tampermonkey
   uBlock Origin
   Vimium
   호버 줌+

   https://chrome.google.com/webstore/detail/…
   마우스 제스쳐요. 생산성에 지대한 영향을 미치네요

   1번과 유사하게 Save Page WE 확장을 자주 사용합니다.
   이건 모든 파일을 base64로 인코딩해서 용량이 커지는 단점이 있는데 말씀하신 것도 써봐야겠네요.
     * Surfingkeys
          + 브라우저를 VIM 스타일의 단축키들로 사용할 수 있게 해줍니다.
          + 정작 VIM은 잘 안쓰는데... 왼손으로 e,d로 스크롤하고 f 눌러서 링크 누르는게 너무 편해서 벗어날 수가 없습니다.
     * Tampermonkey
          + 유저스크립트 관리용으로 사용합니다.

   저는 Safari에서 Vimari를 사용합니다.

   전 Surfingkeys 와 같은 vimium을 사용 중이었는데, Surfingkeys가 더 낫네요.
   추천 감사합니다.

   https://chromewebstore.google.com/detail/vimium/…

   https://github.com/FilipePS/Traduzir-paginas-web
   파이어폭스엔 번역 기능이 없어서 사용하는 부가기능입니다.

   이거랑 패스워드 매니저로 비트워든은 진짜 매일 사용하네요ㅎㅎ

   Video Speed Controller - https://github.com/igrigorik/videospeed
   이제 동영상 볼 때 1배속으로 보는 일은 거의 없는 것 같아요.
   원하는 값을 설정해두면 모든 HTML5 비디오 재생속도가 바뀌어서 편하게 이용중입니다.

   DeepL / 구글번역 확장도 자주 이용합니다.

   조금 특이하게 이용하는 것은 몇몇 자바스크립트를 북마클릿으로 만들어서 쓰는 것도 있습니다.
   해외 쇼핑몰 몇개의 장바구니를 저장했다가 배송대행 신청 사이트에 자동으로 적어주는 스크립트인데요.
   별거 아닌데 만들어두고 물건 직구할때마다 잘 쓰는 중입니다.

   https://github.com/ttop32/MouseTooltipTranslator
   마우스 툴팁 번역기 입니다.

   현재는 크로미움 계열만 지원하는데요. 단순히 단어가 아니라, 문장단위로 혹은 블럭단위로 묶어서 PAPAGO나 DEEPL과 연계해서 번역결과를 툴팁을 띄워 줍니다. 브라우저에서 연 PDF와 이미지내 외국어도 번역해주더라고요. 단축키랑 연계해서 발음과 영작까지 해 주고요.

   이번 달 초에 어찌어찌 알게된 확장인데, 아주 유용하게 쓰고 있습니다.

   이야 이거 물건인데요

   댓글 보고 방금 설치해봤는데 굉장하네요 무엇보다 어색한 구글번역에서 벗어날 수 있다는 점이 굉장하네요

   구글에서 제공하는건 자꾸 드래그에 걸려서 불편했는데 이거 좋네요.

   완전 좋습니다.

   엄청 좋네요! Star는 눌러져 있었는데, 이걸 왜 안 쓰고 있었지?!

   오 이거 엄청 편하네요! 전 그냥 구글 번역 확장 쓰는 중이었는데 바꿔봐야겠습니다. 고맙습니다.
"
"https://news.hada.io/topic?id=13169","ChatGPT와 틴더를 이용해서 5239명을 만난 개발자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ChatGPT와 틴더를 이용해서 5239명을 만난 개발자

     * 러시아 메신저 스타트업 Tenchat에서 일하고 있는 Alexander Zhadan이라는 남자는 22년부터 데이팅앱 Tinder에서 자동으로 대화를 하는 봇을 만들어 운영
     * ChatGPT에게 간단한 자신의 프로필과 성격, 매력 그리고 좋아하는 여성상을 입력
     * 개발자 취향의 여성에게 자동으로 라이크를 누르고 매칭되면 여성과 자동으로 대화하고 데이트 약속까지 잡음
     * 대화가 어렵거나 이야기 하기 곤란할 때 Zhadan은 ChatGPT의 도움을 받았는데 ChatGPT는 카리나와의 대화를 바탕으로 그녀와 결혼할 것을 권장했으며, 심지어 마카오와 홍콩 여행 중에 프러포즈하는 계획까지 제안
     * 프로젝트 개발에 약 120시간과 1,432달러가 소요
       결과는 어떻게 되었을까요? ㅎㅎ

   스스로 불러온 재앙에 짓눌려....
"
"https://news.hada.io/topic?id=13170","죄송합니다 Appin, 귀사의 침묵 시도에 관한 기사를 철회하지 않습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                죄송합니다 Appin, 귀사의 침묵 시도에 관한 기사를 철회하지 않습니다

   cf 챌린지 때문에 막힌건가
"
"https://news.hada.io/topic?id=13277","OpenAI 호환성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               OpenAI 호환성

OpenAI 호환성

     * Ollama는 이제 OpenAI 챗 완성 API와 호환되어, Ollama를 로컬에서 더 많은 도구 및 애플리케이션과 사용할 수 있게 됨.
     * Ollama를 다운로드하고 Llama 2나 Mistral과 같은 모델을 가져오는 것으로 설정을 시작함.

사용법

  cURL

     * Ollama의 OpenAI 호환 API 엔드포인트를 호출하기 위해 OpenAI 형식을 사용하고 호스트 이름을 http://localhost:11434로 변경함.

  OpenAI Python 라이브러리

     * OpenAI Python 라이브러리를 사용하여 Ollama의 API 엔드포인트에 접근할 수 있으며, 필요하지만 사용되지 않는 API 키를 포함함.

  OpenAI JavaScript 라이브러리

     * OpenAI JavaScript 라이브러리를 사용하여 Ollama의 API 엔드포인트에 접근할 수 있으며, 필요하지만 사용되지 않는 API 키를 포함함.

예시

  Vercel AI SDK

     * Vercel AI SDK는 대화형 스트리밍 애플리케이션을 구축하는 데 도움이 되는 오픈소스 라이브러리임.
     * 예제 저장소를 복제하기 위해 create-next-app을 사용함.

  Autogen

     * Autogen은 Microsoft에서 만든 다중 에이전트 애플리케이션을 구축하기 위한 인기 있는 오픈소스 프레임워크임.
     * 이 예제에서는 Code Llama 모델을 사용하며, Autogen을 설치하고 Python 스크립트를 생성하여 Ollama를 사용함.

더 많은 것이 올 예정

     * 이것은 OpenAI API에 대한 초기 실험적 지원임.
     * 고려 중인 향후 개선 사항에는 임베딩 API, 함수 호출, 비전 지원, Logprobs가 포함됨.
     * 자세한 정보는 OpenAI 호환성 문서를 참조.


    GN⁺의 의견

     * OpenAI API 호환성: Ollama가 OpenAI API와 호환되면서, 개발자들은 로컬 환경에서 AI 모델을 더 쉽게 통합하고 활용할 수 있게 되었음. 이는 AI 기반 애플리케이션 개발의 접근성을 높이는 중요한 변화임.
     * 다양한 프로그래밍 언어 지원: Python과 JavaScript 라이브러리를 통한 지원은 다양한 개발 환경에서의 활용성을 보여줌. 이는 개발자들이 선호하는 언어로 AI 기능을 쉽게 통합할 수 있음을 의미함.
     * 오픈소스 프레임워크와의 연동: Vercel AI SDK와 Autogen과 같은 오픈소스 프레임워크와의 연동 예시는 Ollama의 활용 가능성을 넓히고, 커뮤니티 기반의 혁신을 촉진할 수 있는 잠재력을 보여줌.

        Hacker News 의견

     * 최근 몇 달 동안 지역 호스팅 LLM의 사용 편의성이 놀랍게 향상되었음.
          + Mozilla-Ocho의 llamafile이 얼마나 사용하기 쉬운지 몇 시간 전에 토로함.
          + 어떤 LLM을 사용할지 결정하기 어려움을 겪음.
     * OpenAI API 호환성이 커뮤니티 표준이 되는 것에 대해 개인적으로 불만을 가진 사람들이 있음.
          + 데이터 구조의 불필요한 중첩 등 몇 가지 어색함이 있지만, 큰 불만은 없음.
          + API가 표준이 되는 것에 대한 문제점과 대안 표준에 대한 시도가 있는지 궁금함.
     * Copilot의 개선된 버전을 개발 중이며, 사용자가 자신의 LLM을 가져올 수 있도록 지원함.
          + OpenAI 호환 백엔드를 추가하여, OpenAI 호환 API 엔드포인트를 제공하면 해당 모델의 의미에 따라 프롬프트 형식, 중단 시퀀스, 최대 토큰 등을 처리함.
          + 로컬 개발 환경에서 테스트할 수 있는 이러한 기능이 필요했으며, Ollama가 이를 제공함으로써 다양한 LLM을 지원하는 테스트가 훨씬 쉬워짐.
     * Ollama는 다른 도구들보다 더 잘 작동하며, 간단히 작동함.
          + Raspberry pi 4에서 Dolphin Mixtral 7b를 실행하여 옥수수빵 레시피를 요청했고, 몇 시간 후에 두 캐릭터가 생성된 것을 발견함.
     * Ollama의 Linux 설치 스크립트는 현재 표준 스타일로 작동함.
          + 그러나 스크립트가 마지막으로 확인했을 때 sudo를 통해 루트 권한을 요청함.
          + 도구를 원한다면 스크립트를 다운로드하여 확인하거나 필요에 따라 수정할 것을 권장함.
     * OpenAI와의 호환성이 약간 오해의 소지가 있음.
          + 역할과 내용 구현은 항상 비교적 간단했음.
          + 에이전트를 호스팅할 때는 실제로 작업을 수행해야 함.
          + 에이전트 시스템에 스크립팅 엔진을 포함시켰고, 보안과 권한 설정을 고려해야 할 필요성을 느낌.
     * 호환성 계층은 라이브러리에서도 구축할 수 있음.
          + 예를 들어, Langchain은 여러 LLM 백엔드와 작동하는 llm()을 가짐.
     * 오픈소스(예: HF, VLLM) 및 상업 모델(OpenAI, Google, Anthropic, Together) 간에 쉽게 전환할 수 있는 프로젝트를 진행 중임.
          + HTTP API 없이 Python에서 직접 사용하고 싶다면 사용하기 더 쉬움.
     * Ollama의 사용 사례는 무엇이며, 왜 직접 llama.cpp를 사용하지 않아야 하는가에 대한 의문 제기.
     * Ollama가 Dockerized HTTP 서버로서 llama.cpp를 직접 호출하는 것인지, 그리고 새로 추가된 OpenAI API를 제외하고는 어떤 차이가 있는지에 대한 질문.
"
"https://news.hada.io/topic?id=13250","Show GN: 과학으로 빚어낸 터미널 색 구성, Dimidium","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 과학으로 빚어낸 터미널 색 구성, Dimidium

   Dimidium은 표준 색상을 유지하면서, 모든 색이 고르게 잘 보이도록 조절한 터미널 색 구성입니다.
     * 색각 모델(Color appearance model)을 사용하여 인간의 밝기/색상 인지를 고려해서 만들었습니다.
     * 겉보기 밝기(perceptual lightness) 차이를 줄여 너무 어둡거나(청, 적) 너무 밝은(녹, 황) 색이 없도록 개선했습니다.
     * 색상(hue) 차이를 균등하게 조절하여 각각의 색이 더욱 잘 구분되도록 했습니다.

   Github에 색각 모델을 사용한 생성 코드를 올렸습니다.

   생성된 터미널 설정 파일을 받아 직접 써보실 수 있습니다.


   이전 글: 터미널 색 구성 '과학적'으로 조리하기

   이전 글 등록 후 생각보다 많은 호응과 의견을 받았습니다. 감사합니다!

   의견 수렴 후 코드 정리하여 별도의 Github 저장소에 올려 두었습니다.

   많이 사용해주시고, 괜찮다면 주위에도 전도 부탁드립니다

   혹시 code syntax highlight에도 적용할 수 있는 colorscheme에 적용할 계획도 있으신가요?

   의견 감사합니다.

   Dimidium의 경우, ANSI 16색 정의에 벗어나지 않는 선에서 색을 조정하는 것을 목표로 삼았습니다.
   따라서 그런 정의/제약이 없는 구문 강조에는 굳이 Dimidium을 적용하지 않는 게 낫다고 생각합니다. 더 다양한 색을 사용하여 색이 더 잘 구분되도록 조정할 수 있기 때문입니다.

   언젠가 삘(?)이 오면 Dimidium과 유사한 원리로 구문 강조를 위한 새로운 색 구성을 만들 수도 있겠습니다만, Dimidium 구문강조 색 구성을 만들 생각은 없습니다.

   https://youtu.be/Chcr-2FsZVQ?t=1152 이희승님 샷아웃 🥳
"
"https://news.hada.io/topic?id=13208","크리스 딕슨(a16z crypto의 창립자)은 왜 계속 web3를 믿는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                크리스 딕슨(a16z crypto의 창립자)은 왜 계속 web3를 믿는가

     * 크리스 딕슨은 a16z crypto의 general founding partner로 전세계에서 가장 web3에 대해 큰 영향력을 지니고 있는 인물 중 한 명. 최근에는 <Read Write Own>이라는 책을 출간함.
     * 이 사람이 web3에 대해 지닌 믿음은 하루아침에 만들어진 것이 아니라 10여년이 넘는 세월에 걸쳐 축적된 고민과 경험 위에 만들어진 것임.
     * 그는 비트코인과 블록체인이 존재하기 이전부터 탈중앙화, 자본주의의 모순 해결, 온라인 상에서의 신뢰 구축 등에 많은 관심을 가지고 있었고, 이런 그가 블록체인을 발견하게 되었을 때 그는 당연히 블록체인에 열광할 수 밖에 없었을 것.
     * 이러한 흔적들은 그의 블로그 cdixon.org에 드러나있음
          + ""어떻게 월가를 무너뜨리는가?(2010)"" : 중앙집권적 금융시스템에 대한 반향을 표출
          + ""시민들을 위한 인터넷(2011)"", ""신뢰할 수 있는 플랫폼들(2011)"" : 디지털 상에서의 신뢰가 수많은 혁신적 애플리케이션들의 탄생으로 이어질 수 있음을 통찰
          + ""별로 글로벌하지 않은 인터넷(2014)"" : NFT와 이더리움이 등장하기 이전부터 암호화폐를 이용해 크리에이터들에게 경제적 혜택을 돌려줄 수 있는 방법을 고민

   재밌는 글 잘 읽었습니다
"
"https://news.hada.io/topic?id=13268","모질라, 데이터 프라이버시로 전환하면서 새로운 CEO 임명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    모질라, 데이터 프라이버시로 전환하면서 새로운 CEO 임명

모질라 새 CEO 임명 및 데이터 프라이버시로의 전환

     * 모질라는 오픈소스 파이어폭스 브라우저를 관리하는 회사로, 미첼 베이커가 CEO에서 물러나 AI와 인터넷 안전에 집중하기 위해 비영리 재단의 의장으로 역할을 변경함.
     * 베이커는 모질라 프로젝트의 공동 창립자로, 인터넷의 현재 상태와 대중의 신뢰에 대한 긴급성을 느껴 CEO 자리에서 물러나기로 결정함.
     * 로라 챔버스는 모질라 이사회 멤버이자 Airbnb, PayPal, eBay에서 경험을 쌓은 기업가로, 영구적인 후임 CEO를 찾을 때까지 임시 CEO로 운영을 맡음.

개인정보 보호에 중점을 둔 새로운 제품 개발

     * 챔버스는 개인정보 보호에 대한 우려가 커지는 가운데 새로운 제품을 개발하는 데 집중할 계획임.
     * 챔버스는 정치와 기술 거인들의 영향력에 대해 실망감을 느끼고 있었으나, 모질라 이사회로 영입되면서 사회에 긍정적인 영향을 미칠 수 있는 진정한 방법이라고 느낌.
     * 그녀는 가족 문제로 올해 말 호주로 돌아갈 계획이기 때문에 영구적인 CEO 역할을 추구하지 않을 것임.

모질라의 새로운 사명과 AI의 도전

     * 모질라는 빅테크와 AI가 지배하는 세계에서 자신의 역할을 재상상할 수밖에 없는 상황임.
     * 파이어폭스는 20년 전 인터넷 익스플로러의 지배에 도전하기 위해 출시되었으나, 현재는 구글 크롬에 밀려 시장 점유율이 크게 줄어듦.
     * 모질라는 검색 파트너십을 통해 수익을 창출하고 있으며, 그 중 대부분은 구글로부터 옴.
     * AI는 비영리 재단과 공동 창립자 베이커에게 딥페이크, 데이터 프라이버시 문제, 빅테크의 권력에 대한 대안을 만드는 새로운 사명을 부여함.
     * 모질라는 지난해 Mozilla.ai 스타트업을 출범시켰고, 모질라 코퍼레이션은 Mozilla Monitor와 같은 제품 확장에 집중하고 있음.
     * 베이커에게 성공은 대화에 영향을 미치고, 소비자와 개발자 모두에게 온라인에서 운영하는 방식에 대한 의미 있는 선택권을 제공하는 것임.

GN⁺의 의견

     * 모질라의 새로운 CEO 임명과 데이터 프라이버시로의 전환은 기술 산업에서 개인정보 보호에 대한 중요성이 점점 더 커지고 있는 현 상황을 반영함.
     * 이러한 변화는 사용자들에게 더 많은 선택권과 통제권을 제공하려는 모질라의 의지를 보여줌.
     * AI와 빅테크에 대한 대안적 접근을 모색하는 모질라의 노력은 기술의 미래 방향성에 대한 중요한 토론을 촉진할 수 있음.

        Hacker News 의견

     * Mozilla의 리더십 변화에 대한 댓글 모음
          + 2012년 Mozilla 재직 경험
               o FirefoxOS 전환 당시 Mozilla에서 일했음.
               o 회사 내에서 낮은 직급이었지만, Mitchell에게 FirefoxOS가 나쁜 아이디어라고 생각하는 이유를 상세히 이메일로 보냄.
               o Mitchell은 은혜롭게 답장하고 몇 달 후 감정이 변했는지 확인하기 위해 다시 연락함.
               o Mitchell은 Mozilla와 커뮤니티에 대한 진정한 관심을 가짐.
               o Mitchell은 훌륭한 커뮤니티 리더였지만, 이것이 항상 좋은 CEO나 비즈니스 리더로 이어지는 것은 아님.
               o Mitchell은 Firefox와 오늘날의 웹이 존재하는 큰 이유임.
               o Mozilla의 최근 결정들에 대해 큰 팬은 아니지만, Mitchell이 오픈 웹과 오픈 소스를 위해 한 일에 대해 감사함.
               o Mozilla가 데이터 프라이버시에 집중해야 한다고 생각하는 2015년 포스트 링크 제공.
          + CEO 교체에 대한 의심스러운 시각
               o 공식 발표가 강제 사임을 은폐하는 기업 언어처럼 들림.
               o 임시 CEO가 프라이버시에 대해 심각한 조치를 취할 것이라는 것은 현실적이지 않음.
               o Mitchell이 과대 평가된 실패한 CEO로, 시장 점유율이 줄어드는 유일한 제품을 가진 회사를 이끌었다고 생각함.
               o 임시 CEO인 Chambers는 이사회 출신으로, 새 CEO를 찾는 동안 임시로 자리를 지키는 것으로 보임.
               o Mozilla의 수익 창출 방식에 대한 의견이 담긴 팟캐스트 에피소드 링크 제공.
          + Mozilla/Mitchell Baker의 성명서 분석
               o 제출된 기사는 읽을 수 없지만, Mozilla/Mitchell Baker의 성명서는 ""데이터""나 ""프라이버시""를 언급하지 않음.
               o 성명서는 주로 ""비전"", ""전략"", ""탁월한 실행"" 등의 기업 언어에 초점을 맞춤.
               o 과거에 Laura Chambers와 함께 일한 경험이 있는 사람이 예상되는 변화에 대해 공유해줄 수 있는지 질문.
          + Mitchell Baker에 대한 비판적인 의견
               o Baker는 Mozilla의 쇠퇴를 지켜보면서 자신의 급여 인상을 주도하고 엔지니어를 해고함.
               o 열악한 성과로 인해 십 년 전에 해고되었어야 함.
          + Mitchell Baker의 리더십에 대한 반가운 변화
               o Baker가 Mozilla를 망치면서 자신의 주머니를 채웠음.
               o Firefox에 대한 언급이 있어서 약간의 희망을 가짐.
          + 새 CEO 전략에 대한 기대
               o 이전 CEO의 전략이 개인적으로나 시장 점유율 같은 대중적인 지표에서도 효과가 없었음.
               o 이번 변화가 긍정적인 변화를 의미하기를 바람.
          + Mozilla의 문제점 지적
               o Mozilla 블로그 포스트에서 ""Laura Chambers""가 LinkedIn 프로필로 링크되어 있는 것을 지적함.
               o 그녀의 임명을 발표하는 포스트에 그 링크를 넣은 것이 나쁜 생각이었다는 것을 아무도 깨닫지 못했다고 비판함.
          + Mitchell Baker의 새로운 역할에 대한 의문
               o Mitchell Baker가 AI에 집중하기 위해 CEO에서 물러남.
               o Baker가 Mozilla에서의 다양한 결정에 대한 커뮤니티의 감정을 어느 정도는 읽고 있을 것이라고 추측함.
               o 커뮤니티와의 직접적인 교류에 적합한 후보로 자신을 보는 것에 대해 놀라움을 표함.
          + Mozilla에 대한 비판과 Rust에 대한 긍정적인 평가
               o 많은 사람들이 Mozilla가 지난 십 년 동안 유용한 것을 하지 않았다고 비판함.
               o 동시에 많은 사람들이 Rust 언어를 좋게 평가함.
               o 모든 창작물이 성공하는 것은 아니지만, Rust와 Servo가 성장하는 동안 지원해준 것에 대해 감사해야 한다고 주장함.
"
"https://news.hada.io/topic?id=13248","주니어들을 위한 효과적인 업무 커뮤니케이션 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       주니어들을 위한 효과적인 업무 커뮤니케이션 방법

   업무에 본격적으로 적응하기 시작한 직장인 1년 차가 되면서 주니어 분들의 고민은 시작됩니다.

   개인적으로 진행해 왔던 업무들 외에 팀원 및 팀장님들과 업무 접점이 많아지면서 업무 커뮤니케이션의 빈도가 높아지는 시점이기도 하죠. 맡고 있는 개인 업무 외에 전체 프로젝트의 진행을 위한 팀 업무가 할당된 이후, 다른 팀원이나 팀장 님의 눈치를 보는 일들이 잦아졌다고 주니어 분들은 토로합니다.

   그 원인이 뭘까요?
"
"https://news.hada.io/topic?id=13269","OpenAI, DALL-E 3에 새로운 워터마크 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     OpenAI, DALL-E 3에 새로운 워터마크 추가

     * OpenAI의 이미지 생성기 DALL-E 3는 이미지 메타데이터에 워터마크를 추가할 예정임
     * C2PA(콘텐츠 출처 및 진위성 연합)의 표준을 지원하는 회사들이 늘어나면서, DALL-E 3에서 생성된 이미지에 C2PA의 워터마크가 표시될 것
     * 워터마크는 ChatGPT 웹사이트와 DALL-E 3 모델의 API에서 생성된 이미지에 나타나며, 모바일 사용자는 2월 12일까지 워터마크가 추가될 예정
     * 워터마크에는 보이지 않는 메타데이터 구성 요소와 상단 왼쪽 모서리에 나타나는 CR 심볼이 포함될 것
     * OpenAI 플랫폼에서 생성된 이미지의 출처(어떤 AI 도구를 사용했는지)를 Content Credentials Verify와 같은 웹사이트를 통해 확인할 수 있음
     * 현재는 동영상이나 텍스트가 아닌 이미지만 워터마크를 포함

워터마크의 영향

     * 이미지에 워터마크 메타데이터를 추가하는 것은 지연 시간에 거의 영향을 주지 않으며 이미지 생성 품질에 영향을 주지 않음
     * 일부 작업에서 이미지 크기가 약간 증가할 수 있음

콘텐츠 출처 및 진위성 연합 - Coalition for Content Provenance and Authenticity (C2PA)

     * Adobe와 Microsoft와 같은 회사들로 구성된 C2PA는 콘텐츠의 출처를 식별하고 인간 또는 AI에 의해 만들어졌는지를 보여주는 Content Credentials 워터마크 사용을 촉진하고 있음
     * Adobe는 Content Credentials 심볼을 만들었으며, OpenAI는 이를 DALL-E 3 생성물에 추가하고 있음
     * Meta는 최근 자사의 소셜 미디어 플랫폼에서 AI가 생성한 콘텐츠에 태그를 추가할 것이라고 발표

AI 생성 콘텐츠 식별

     * 바이든 행정부의 AI에 관한 행정 명령에서 AI 생성 콘텐츠 식별은 주요 지침 중 하나임
     * 그러나 워터마킹은 잘못된 정보를 막는 확실한 방법은 아님
     * OpenAI는 C2PA의 메타데이터가 쉽게 실수로 또는 의도적으로 제거될 수 있으며, 대부분의 소셜 미디어 플랫폼은 업로드된 콘텐츠에서 메타데이터를 종종 제거한다고 지적함
     * 또한 스크린샷을 찍으면 메타데이터가 누락됨
     * OpenAI는 출처를 확립하는 방법을 채택하고 사용자들이 이러한 신호를 인식하도록 장려하는 것이 디지털 정보의 신뢰성을 높이는 데 중요하다고 사이트에서 밝힘
"
"https://news.hada.io/topic?id=13196","Google Bard, 한국어 포함 40개 언어 지원 및 이미지 생성 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Google Bard, 한국어 포함 40개 언어 지원 및 이미지 생성 기능 추가

     * 지난 12월에 공개한 Gemini Pro 는 영어만 지원
     * 이제 40개 언어와 230개국 에서 사용 가능
     * 더블체크 기능도 40개 언어로 확장
          + 'G' 아이콘을 클릭하면 바드의 응답이 정확한지 구글에서 검색하여 응답을 입증할 수 있는 콘텐츠가 있는지 평가
          + 평가가 가능하다면 강조 표시된 문구를 클릭해서 백그라운드 정보 또는 모순되는 정보를 확인 가능
     * Imagen 2 모델을 적용하여 이미지 생성도 지원(아직은 영어로만)
"
"https://news.hada.io/topic?id=13177","EPA, '영구 화학물질'을 유해 물질로 간주할 것을 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    EPA, '영구 화학물질'을 유해 물질로 간주할 것을 제안

EPA, '영원한 화학물질'을 유해 물질로 간주할 것을 제안

     * 미국 환경보호청(EPA)이 9가지 PFAS(영원한 화학물질)를 인체에 유해한 물질로 분류할 것을 제안함.
     * 이 제안은 화학물질이 독성이 있거나 암, 유전적 변이, 태아 기형을 유발하는 경우 '위험한 성분'으로 간주됨.
     * PFAS는 제조 목적으로 사용되는 수천 가지의 인공 화학물질을 포함하며, 분해가 매우 느리고 생물체 및 환경에 축적될 수 있음.

'영원한 화학물질'이 미국 수돗물의 거의 절반에 존재할 수 있음

     * EPA는 PFAS가 인간과 동물에게 암, 백신 반응 감소, 고콜레스테롤, 여성의 생식력 감소, 자간전증, 갑상선 장애, 천식 등 다양한 '독성 효과'를 일으킬 수 있다고 밝힘.
     * 미국 지질 조사국(USGS)의 연구에 따르면, PFAS가 미국 수돗물 공급의 거의 절반에 존재함.
     * 화학 제조업체 3M은 PFAS로 인한 수돗물 오염에 대한 소송 합의로 약 100억 달러를 지불하기로 함.

공개 의견 제출을 위한 제안 규칙

     * 제안된 규칙은 연방 등록부에 업로드되면 공개 의견 제출을 위해 개방될 예정임.
     * 공개 의견 제출은 EPA-HQ-OLEM-2023-0278 도킹 번호를 통해 이루어질 예정임.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

    GN⁺의 의견

     * 환경 보호의 중요성: 이 기사는 환경 보호와 공중 보건에 대한 중요한 조치를 강조함. PFAS와 같은 화학물질이 인간과 환경에 미치는 장기적인 영향을 인식하고, 이를 관리하기 위한 정책적 접근이 필요함을 보여줌.
     * 과학적 연구의 역할: EPA의 제안은 과학적 연구에 기반을 둔 것으로, 화학물질의 위험성을 평가하고 대중의 건강을 보호하기 위한 조치를 취하는 데 있어 과학이 중요한 역할을 함을 시사함.
     * 공공 참여의 기회: 제안된 규칙이 공개 의견 제출을 위해 개방됨으로써, 일반 대중이 환경 보호 정책에 참여하고 의견을 제시할 수 있는 기회를 제공함. 이는 민주적인 의사 결정 과정에 대한 중요성을 강조함.

        Hacker News 의견

     * EPA의 제안 원문 링크: EPA 제안 원문
          + 제안된 9가지 PFAS(고분자 불소화 화합물) 목록에는 다음이 포함됨:
               o 퍼플루오로옥타노산
               o 퍼플루오로옥탄술폰산
               o 퍼플루오로부탄술폰산
               o 헥사플루오로프로필렌 옥사이드-다이머 산
               o 퍼플루오로노나노산
               o 퍼플루오로헥산술폰산
               o 퍼플루오로데카노산
               o 퍼플루오로헥사노산
               o 퍼플루오로부타노산
     * 제목은 ""EPA가 아홉 가지 PFAS를 위험 물질로 간주할 것을 제안한다""로 변경될 수 있음
     * 다양한 관점의 댓글 요약:
          + 이는 좋은 조치이지만, 기업들은 테스트되지 않은 대체 물질을 찾을 것임. ""12,000개 중 9개""라는 표현으로 PFAS의 규모를 지적함.
          + PFAS는 아스베스토스와 비슷한 시대의 문제가 될 수 있으며, 더 심각할 수 있음. 인체, 특히 내분비계에 심각한 영향을 미칠 가능성이 있음.
          + 이 화합물들이 어느 정도 위험을 가지고 있음은 분명해 보임. 규제를 회피하기 위해 분자 구조를 조금만 변경하는 것을 방지하고, 규제가 지나치게 가혹하지 않도록 균형을 맞추는 것이 문제임.
          + EPA는 무력하고 비효율적으로 보임.
          + 플라스틱을 구성하는 이러한 에스트로겐 유사 화학물질에 대해 사회가 진지한 대화를 나눌 필요가 있음.
          + 화학물질을 ""독성""이라고 브랜딩할 때 규모 개념이 필요함. 소량은 해롭지 않을 수 있으나, 널리 퍼져 있으면 문제가 될 수 있음.
          + 이 화학물질들이 제공한 이점과 부정적인 효과를 비교해야 함. 환경에서 발견되는 형태가 위험한지, 화학적으로 결합되어 생체 반응성이 감소하는지 등을 고려해야 함.
          + ""안전하다는 것을 증명하기 전까지 새로운 것을 할 수 없다""는 접근 방식에 동의하지 않음. 또한 CO2를 오염물질로 선언한 이후 EPA에 대해 매우 회의적임.
          + 모든 이성적인 사람은 깨끗한 환경을 원하며, 모든 합리적인 사람은 규제의 트레이드오프를 이해하고 싶어 함.
"
"https://news.hada.io/topic?id=13165","HN 소개: 간단한 ChatGPT 프롬프트 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HN 소개: 간단한 ChatGPT 프롬프트 생성기

        Hacker News 의견

     * 사용자들은 여전히 맞춤형 프롬프트를 작성하고 있음을 궁금해함.
          + 과거에는 맞춤형 프롬프트를 통해 더 나은 결과를 얻었지만, ChatGPT의 업데이트로 인해 프롬프트를 효과적으로 관리하는 방법이 자주 바뀌어 번거로움을 겪음.
          + 현재는 가끔 맞춤형 ChatGPT를 사용하지만 대부분 기본 설정을 사용함.
          + 결과의 질 차이가 줄어들었고, 더 큰 프롬프트에 대한 응답 시간이 길어져 빠른 '충분히 좋은' 응답을 선호함.
          + 완벽한 답변을 한 번에 얻으려 하기보다는 초기 결과가 완전하지 않을 경우 추가 질문을 하는 것이 더 쉬움.
     * 초보자에게 매우 유용할 제안이 있음.
          + 사전 지시 사항과 사후 처리 프롬프트에 대한 다양한 템플릿을 제공할 것을 제안함.
          + 출력이 특정 형식(JSON, 목록, 제한된 CSV 세트 등)으로 되도록 보장하거나, 기본적인 탈출을 방지하는 입력을 보장하는 '테스트된' 프롬프트를 제공함.
          + 매일 ChatGPT를 사용하는 사람들이 이미 알아낸 최적의 프롬프트 사용 방법을 배우는 데 시간이 오래 걸림.
          + 이러한 신뢰할 수 있는 템플릿을 갖는 것이 초보자에게 훌륭할 것임.
     * 현재 ChatGPT와 관련된 작업에 몰두하고 있으며 주 1-2회 앱을 개발함.
          + 가정한 대상 사용자는 프롬프트 기반 LLM을 잘 모르는 사람임.
          + 이러한 사용자에게는 문제나 해결책이 충분히 명확하게 정의되어 있지 않음.
          + 예를 들어, 사전 정의된 선택자가 부족하고, 주어진 선택자의 의미가 불투명함.
          + 결과적으로 선택이 출력에 미치는 영향이 불분명해지고, 도구 사용이 닭과 달걀 문제가 됨.
          + 이러한 상황에서는 ChatGPT에게 효과적인 프롬프트를 생성하도록 요청하는 것이 거의 더 쉬움.
     * 우리가 이 봇들과 대화할 때 누구와 대화하고 있는지에 대한 질문.
          + 인공지능 기술을 인간과 유사한 채팅 인터페이스를 통해 제시하는 것은 의도적인 선택임.
          + 채팅 인터페이스를 통해 상호작용하는 기술은 인공 일반 지능이라는 착각을 불러일으킬 수 있음.
          + 그러나 Playground 인터페이스를 통해 LLM과 직접 상호작용함으로써, 채팅은 대화 상대가 있는 것처럼 보이는 환상을 강화하는 연기에 불과함.
     * 이 내용은 ChatGPT와 직접적인 연관이 없음.
          + 단지 텍스트 블록을 클릭하여 결합하는 양식에 불과함.
          + LLM의 한 제공업체에 대한 집착은 분야의 발전에 도움이 되지 않음을 생각함.
     * 각 프롬프트 기능이 응답을 개선하는 방법에 대한 실제 분석이 필요함.
     * 지시 사항이 길수록 ChatGPT가 각각의 지시를 따르지 않을 가능성이 높아짐.
          + 주의가 분산되는 것처럼 보이며, 'A를 하라'고 하면 A를 하지만 'A와 B를 하라'고 하면 A와 B를 부분적으로만 수행함.
          + 짧은 길이의 프롬프트를 제공하고 한 번에 하나의 작업을 수행하거나 몇 번의 시도로 작업을 수행하는 것이 가장 좋은 경험임.
     * 의도적으로 의미 없는 내용을 입력해봄.
          + '능숙한 항공기 조종사처럼 행동하라, 더 많은 커피가 필요하다, 계산하라' 등의 지시를 함.
          + 결과는 ChatGPT에서 상당히 재미있음.
     * '특정한 방식으로 행동하라'는 패턴이 여전히 필요한지에 대한 의문.
          + GPT-4를 사용하면서 이 패턴을 사용하지 않게 됨.
          + '특정 분야의 전문가처럼 행동하라'고 요청하는 것이 더 나은 결과를 가져오지 않는 것으로 보임.
          + 여러 프롬프트를 소규모로 시도하고 비교하여 개선 여부를 파악할 수 있는 가벼우면서도 효과적인 도구가 필요함.
     * 이 프롬프트들이 무작위로 입력하는 것보다 나은지에 대한 의문.
"
"https://news.hada.io/topic?id=13163","23andMe의 몰락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              23andMe의 몰락

23andMe : 60억 달러에서 거의 0달러로 추락

     * 23andMe는 수백만 명이 자신의 조상에 대해 알아보기 위해 침을 뱉어 넣은 테스트 튜브로 유명한 스타트업이었음.
     * 2021년에 상장하여 가치가 60억 달러를 넘어섰으나, 현재는 98% 하락하여 나스닥에서 상장 폐지 위협을 받고 있음.
     * CEO Anne Wojcicki는 회사를 기본적인 조상 및 건강 데이터 공급업체에서 약물 개발, 의료 서비스 제공, 구독 건강 보고서 판매를 하는 종합 헬스케어 회사로 변모시키려는 목표를 가지고 있음.

초기 성장기

     * Wojcicki는 실리콘 밸리의 중심에서 자라나 Yale 대학에서 아이스하키를 하며, 졸업 후에는 헬스케어 회사를 분석하는 헤지펀드와 사모펀드에서 일함.
     * Google의 공동 창립자 Sergey Brin과의 관계를 통해 23andMe에 대한 아이디어를 공유하고, 회사에 참여하게 됨.

호황기

     * 2012년 DNA 테스트 가격을 99달러로 낮추고, FDA 규제에도 불구하고 건강 보고서 판매를 재개함.
     * 유명인사들과의 연계, 매력적인 마케팅 활동으로 인지도를 높임.
     * 2021년 SPAC 붐을 타고 상장하여 대중의 관심을 받음.

하락기

     * DNA 샘플을 이용한 약물 개발에 집중하나, 이는 비용이 많이 들고 시간이 오래 걸리는 과정임.
     * 구독 서비스로 전환을 시도했으나 예상보다 구독자 수가 적음.
     * 개인 유전 정보를 기반으로 한 건강 관리 서비스를 제공하려는 목표를 가지고 있으나, 아직까지는 그 비전을 실현하는 데 어려움을 겪고 있음.

GN⁺의 의견:

     * 23andMe의 이야기는 혁신적인 아이디어가 시장에서 성공하기까지 겪어야 하는 어려움과 도전을 잘 보여줌.
     * Wojcicki의 리더십과 그녀가 추구하는 건강 관리 분야의 혁신은 스타트업 문화와 기업가 정신의 중요성을 강조함.
     * 이 기사는 기술과 헬스케어의 교차점에서 일어나는 변화와 그로 인한 잠재적인 영향력에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 비평적인 관점
          + Wojcicki의 경영 실패, 10년 이상의 약물 개발 전략 실패, 성장에 대한 거짓말, 공동 창업자 배제, 이익 창출 실패, 몇 달간 발견되지 않은 해킹 등이 지적됨.
          + 회사가 자금을 더 모으지 못하면, DNA와 프로필 정보가 가치가 있기 때문에 회사가 매각될 가능성이 있음. PE(Private Equity)나 글로벌 데이터 브로커에 의해 자산이 악용될 우려가 있음.
     * 23andMe+ 서비스에 대한 실망
          + 23andMe에 대한 신뢰가 + 서비스로 전환되면서 실망함. 연구를 돕기 위해 많은 시간을 할애하여 질문에 답했지만, 이제 구독료를 지불하라는 요구에 실망함.
          + FDA의 규제로 인해 23andMe의 보고서 제공이 제한되었고, 이로 인해 유전자형 분석이 상품화됨. 제3자 도구를 사용하여 데이터를 다운로드하면 됨.
          + 2024년 현재, 23andMe는 제한된 플랫폼을 가지고 있으며, 많은 사람들이 원하는 연구 결과를 제공하지 못함. Nebula Genomics와 같은 스타트업에 의해 추월됨.
     * 개인 정보 보호에 대한 우려
          + 개인 정보 보호와 무결성에 대한 불신으로 인해 유전자 검사를 망설임. 회사가 해킹되거나 사용자 데이터를 이익을 위해 판매할 가능성에 대한 우려가 있음.
          + 검사를 받고 결과만 받고 싶은 욕구가 있으나, 영구적인 기록을 남기지 않는 간단한 서비스를 찾기 어려움.
     * 23andMe의 미래 전략
          + 기본적인 조상 및 건강 데이터 공급업체에서 포괄적인 헬스케어 회사로 변모하려는 목표를 고수하고 있으나, 약물 개발에 필요한 자금과 시간이 부족함.
          + 고객 데이터를 약물을 개발할 수 있는 다른 회사에 판매하거나 파트너십을 맺는 것이 논리적인 선택으로 보임.
     * Lemonaid health 인수에 대한 비판
          + Lemonaid health 인수는 브랜드 파괴로 보임. 실패한 비즈니스를 성공처럼 보이게 하는 것은 Silicon Valley의 이미지를 유지하기 위한 행위로 비판됨.
          + 기업 인수가 더 어려워져야 한다는 의견이 있음.
     * 실리콘 밸리의 연결과 성공에 대한 통찰
          + Wojcicki의 성공이 실리콘 밸리의 연결망에 크게 의존하고 있으며, 이는 실리콘 밸리에서 성공이 얼마나 공정한지에 대한 질문을 던짐.
     * deCODE genetics와의 비교
          + 아이슬란드 유전학 회사인 deCODE genetics의 사례와 비교하며, 지속 가능한 수익 창출을 위한 도전과 연구 부문에서의 성공을 언급함.
     * 23andMe 초기 사용자의 경험
          + 초기 사용자로서의 경험을 공유하며, 개인 정보 보호 문제와 비밀번호 유일성에 대한 걱정으로 서비스 갱신을 하지 않음.
          + ancestry.com을 사용하여 가족의 역사를 추적하는 데 가치를 느낌. 23andMe보다 ancestry.com이 더 가치 있다고 판단함.
"
"https://news.hada.io/topic?id=13192","로켓이 작동하지 않게 될 정도로 지구가 더 커질 수 있는 최대 크기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 로켓이 작동하지 않게 될 정도로 지구가 더 커질 수 있는 최대 크기

화학 추진 로켓의 한계: 지구보다 큰 행성에서의 발사 가능성

     * 화학 추진 로켓은 지구와 같은 밀도를 가진 더 큰 행성에서도 발사가 가능한가에 대한 질문에 대한 답변.
     * 지구의 반경과 질량을 증가시키면서 발사 가능성을 탐구함.
     * 화학 추진 로켓의 이론적 한계와 실제 엔지니어링 문제에 대해 논의함.

로켓 방정식과 화학 추진 로켓의 한계

     * 로켓 방정식에 따르면, 더 큰 행성에서는 더 높은 속도가 필요하며, 이는 로켓의 질량 비율 증가를 의미함.
     * 화학 엔진의 배기 속도는 한계가 있으며, 로켓의 질량 비율을 무한정 늘릴 수는 없음.
     * 지구보다 큰 행성에서는 로켓의 추력 대 중량 비율이 더 높아야 하며, 이는 건조 질량을 증가시키고 가능한 Δv를 감소시킴.

화학 추진 로켓의 실제 한계

     * 지구의 반경과 질량을 증가시킬 때, 로켓의 총 질량은 기하급수적으로 증가함.
     * 어느 정도 이상의 중력에서는 가장 강력한 엔진조차 자신의 무게를 들어올릴 수 없음.
     * 화학 추진 로켓의 Δv 요구 사항은 이론적으로 무한하지만, 실제로는 구조적 문제와 자원의 한계로 인해 불가능해짐.

화학 추진 로켓의 이론적 한계

     * 화학 추진 로켓은 이론적으로는 어떤 크기의 행성에서도 발사할 수 있지만, 실제로는 질량 비율이 기하급수적으로 증가함.
     * 로켓의 크기가 너무 커지면 구조적 문제가 발생하며, 엔진이 자신의 무게를 들어올릴 수 없게 됨.
     * 행성의 질량이 로켓의 질량에 비해 상당히 크면, 로켓의 배기 속도가 감소하여 우주로 나가는 데 필요한 Δv를 제공할 수 없게 됨.

GN⁺의 의견

     * 이 글은 화학 추진 로켓의 한계에 대해 심도 있게 탐구하고 있으며, 행성의 크기가 커질수록 로켓 발사의 어려움이 기하급수적으로 증가한다는 점을 강조함.
     * 로켓의 질량 비율과 구조적 한계를 고려할 때, 지구보다 훨씬 큰 행성에서는 화학 추진 로켓으로는 발사가 불가능할 수 있음을 시사함.
     * 이 글은 우주 탐사와 로켓 공학에 관심 있는 사람들에게 흥미로운 주제를 제공하며, 우주 발사 시스템의 미래에 대한 논의를 자극할 수 있음.

        Hacker News 의견

     * 초기 로켓 과학에서의 열린 문제 중 하나는 이론적인 로켓 개념을 가지고 충분한 배기 속도를 가진 추진제 조합이 존재하는지 여부였음. 고다드의 논문에서는 추진제 속도를 낮추면서 동등한 성능을 내기 위해 로켓이 얼마나 커져야 하는지에 대해 논의함. 결국, 몇십 마일 상공에 도달하기 위해 산 전체의 화약을 태워야 하는 상황에 이르렀음. 중력과 화학이 궤도 로켓을 가능하게 하는 행성에 살고 있다는 사실을 깨달은 초기 로켓 개척자들에게는 반가운 놀라움이자 안도감이었음. 나머지는 단지 공학의 문제였음.
     * 드레이크 방정식에 영향을 미칠 수 있는 흥미로운 점은, 높은 중력을 가진 행성에서 문명이 생존하는 평균 시간이 줄어들 수 있음을 시사함. 이는 그들이 다중 행성으로의 이동과 대규모 재앙을 극복하는 능력이 제한될 수 있기 때문임.
     * 가스 거인과 같은 행성에서 수소 대기가 암석 핵을 둘러싸고 있다면, 우주의 가장자리에 도달할 때까지 수소를 호흡하는 우주선이 가능할지, 또는 질소나 이산화탄소 대기가 충분히 두꺼우면, 중력이 표면 수준보다 현저히 낮은 지점에 도달할 때까지 공기역학적으로 비행하거나 심지어 떠 있을 수 있는지에 대한 질문이 제기됨.
     * 물 행성에서 탈출 속도에 도달하는 것은 어떤 도전일지 상상해보라는 의견 제시.
     * 충분히 높은 첫 번째 단계와 핫 스테이징(hot staging)을 사용하면, 심지어 매우 큰 지구에서도 작동할 수 있음. 첫 번째 단계는 대기권을 훨씬 넘어서 확장될 필요가 있을 수 있음.
     * 드레이크 방정식과 유사한, 행성이 충분히 작아서 탈출할 수 있는 요소를 포함하는 방정식이 있는지에 대한 질문. 지적이고 우주를 여행하는 생명체가 얼마나 드물게 존재할지 생각하는 것이 매우 우울하지만, 반면에 우주의 작은 구석에서 여러 우주 여행자들이 몇 광년 이내에서 동시대에 살고 있을 수도 있음을 상상하는 것은 흥미로움.
     * 핵 열 로켓에 대한 언급이 거의 없었지만, 이론적으로 고려해볼 만한 기술임.
     * 우주로 갈 수 없는 문명에게 불가능한 기술적 발전은 무엇일지에 대한 질문.
     * 1.55R⊕ 행성에 대한 글이 궁금증을 자아내고 흥미로운 토론이라고 생각함.
     * 충격파에 대한 실용적인 계산을 잊었지만, 이는 쉽게 계산할 수 없는 문제임. 지구에서의 경험에 따르면, 초음속 엔진 배기가 생성하는 충격파는 구조물에 강력한 압력을 가하며, 언급된 규모에서는 어떤 것도 충분히 오래 견디지 못함. 현재로서는 훨씬 강한 재료를 만들 수 있는지 알 수 없으며 예측할 수 없음. 해수면에서의 발사가 중요한데, 현재로서는 고도가 매우 다른 위치에서 발사된 두 개의 우주 로켓만 기억함. 고고도 발사는 충격파 문제에 대한 해결책이 될 수 있지만 다른 제한이 있음.
"
"https://news.hada.io/topic?id=13191","Quora 는 어떻게 죽었나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Quora 는 어떻게 죽었나

     * Quora는 한때 특정 질문에 대한 답변을 찾는 데 있어 전문가의 정보를 제공하는 번성하는 커뮤니티였음
     * 사용자들이 이탈하면서 사이트는 의미 없고 반복적인 내용, 이상한 질문, 증오스러운 글, AI 생성 글들로 가득 차게 됨
     * 과거에는 구글 검색 결과 상단에서 Quora의 신중한 답변을 볼 수 있었지만, 이제는 터무니없는 질문과 답변이 검색 결과에 나타남

Quora의 초기 장점과 커뮤니티

     * Quora는 소셜 네트워킹을 염두에 두고 설계되었으며, 전문가들이 지식을 공유하고 커뮤니티를 구축할 수 있는 플랫폼이었음
     * 초기 멤버들은 Quora의 질 높은 답변과 질문, 활발한 모더레이션, 사용자 중심의 사이트 구조를 높이 평가함
     * Quora는 전문가들에게 다양한 혜택을 제공하고, 긍정적인 공간을 유지하기 위해 노력했으며, 이로 인해 많은 페이지 뷰와 투자를 유치함

Quora의 문제점과 쇠락

     * Quora는 질문의 길이를 줄이고, 피드 최적화를 통해 질 낮은 콘텐츠를 홍수처럼 쏟아내기 시작함
     * 광고와 봇 문제, 수익 창출의 지연, 예산 삭감 등으로 인해 커뮤니티 관리와 품질 유지에 어려움을 겪음
     * AI의 등장과 자동화된 모더레이션은 사이트의 질을 더욱 악화시킴

AI 시대의 Quora

     * Quora는 AI를 통해 질문과 답변을 생성하고, 사용자의 답변을 AI 모델 훈련에 사용할 수 있도록 서비스 약관을 변경함
     * 많은 사용자들이 새로운 약관에 동의하지 않고 자신의 작업을 삭제하거나 사이트를 떠남
     * AI로 인해 커뮤니티의 정체성이 훼손되고, Quora가 과거의 커뮤니티와 전문성을 자동화 시스템으로 대체하려는 시도는 실패로 끝날 것으로 예상됨

  GN⁺의 의견

     * Quora의 쇠락은 디지털 커뮤니티가 직면할 수 있는 위험성을 보여줌. 커뮤니티의 품질과 정체성을 유지하는 것이 얼마나 중요한지 강조함
     * AI의 부상이 기존의 지식 공유 방식을 어떻게 변화시킬 수 있는지에 대한 사례를 제공함. AI가 인간의 전문성과 경험을 대체할 수 없음을 보여줌
     * 이 글은 기술의 발전이 어떻게 기존의 가치 있는 플랫폼을 변화시키고, 때로는 해를 끼칠 수 있는지에 대한 중요한 통찰을 제공함

   질문 답변 사이트는 키우기도 유지하기도 힘든 것 같아요.
   Ask GN도 활성화가 좀 되어야 하는데.. ㅠㅠ

   글로 질문을 하고, 답변을 하는것에 너무 많은 에너지가 사용되어서 점점 꺼리게 되는 것 같네요.
   글을 통해 답을 얻으려면 질문을 글을 엄청 잘 적어야 되는데 질문 적다가 그냥 지운적이 한두번이...
   그리고 답을 주려고 해서 글을 적다보면 그것도 갑자기 귀찮아져서 지워버리고...
   요즘 같이 누군가 유튜브나 틱톡 같은 것을 통해 다들 올려놓아서 그냥 그거 보고 해결하는게 더 빠르기도 하구요

   공감되네요.

        Hacker News 의견

     * 한 사용자는 자신이 해커뉴스에서 상위 작성자였으며, 질문을 많이 끌어들이기 위한 목적으로 SEO를 위해 개별 질문 페이지를 추가하는 방식으로 전환되면서 품질 높은 답변에 대한 인센티브가 사라졌음을 지적함. 이로 인해 상위 작성자들이 사라지고, 자신의 계정이 삭제되었음에도 불구하고 다시 활성화되어 있어 실망감을 표현함.
     * 다른 사용자는 사용자 기반 콘텐츠 플랫폼의 경우, 기여자들의 의견을 듣고 그들을 대변하는 역할을 하는 C레벨의 옴부즈맨이 필요하다고 주장함. 많은 플랫폼이 기여자들을 당연하게 여기고 수익 창출에만 집중하다가 결국 기여자들을 잃게 되는 패턴을 반복한다고 지적함.
     * 한 기여자는 자신이 Quora에서 활동했던 시절을 회상하며, 당시 Quora가 제공했던 다양한 전문가들의 통찰력 있는 답변들이 얼마나 가치 있었는지 설명함. 그러나 질문을 많이 하는 것에 대해 돈을 지불하는 프로그램이 도입되면서 플랫폼의 가치가 떨어졌다고 비판함.
     * 또 다른 사용자는 Quora를 방문할 때 질문과 답변을 구분하기 어렵고, 로그인 벽에 부딪혀 플랫폼에 참여하고 싶은 마음이 들지 않았다고 언급함.
     * 한 사용자는 수익 공유 모델이 플랫폼의 질을 떨어뜨리고 스팸을 유발한다고 지적하며, 이러한 문제가 Medium, Twitter, YouTube, Twitch 등 다른 플랫폼에서도 나타나고 있다고 언급함.
     * 다른 사용자는 Quora의 질적 하락을 보여주는 기사의 증거가 부족하다고 비판하며, Slate의 기자들이 Quora의 문제를 제대로 보여주지 못했다고 지적함.
     * 한 사용자는 Quora가 항상 StackExchange 네트워크에 비해 더 나은 대안으로 추천되었지만, 실제로는 나쁜 질문에 대한 형편없는 답변으로 가득 차 있었다고 비판함.
     * 또 다른 사용자는 Quora뿐만 아니라 여러 사이트들이 2018년부터 쇠퇴하기 시작했다고 언급하며, 이는 소셜 미디어의 과도한 사용, 주제의 포화, 새 세대의 관심 부족, 나쁜 경영 및 관리 때문이라고 분석함.
     * 한 사용자는 업보트/다운보트 모델이 콘텐츠 평가에 적합하지 않다고 주장하며, 이러한 시스템이 집단 사고와 인기 투표, 자기 홍보에 취약하다고 지적함. 대신 Twitter의 Community Notes와 같은 팩트체크 시스템이 더 나은 대안이 될 수 있다고 제안함.
     * 마지막으로 한 사용자는 자신이 과거에 Quora에 중독되어 많은 시간을 보냈지만, 시간이 지나면서 자신의 관심사가 변화했음에도 불구하고 Quora가 그 변화를 따라가지 못해 더 이상 흥미롭지 않다고 느낀다고 공유함.
"
"https://news.hada.io/topic?id=13281","실수로 사용한 Blender VSE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          실수로 사용한 Blender VSE

Blender VSE에 우연히 기여하다

     * 두 달 전 Blender의 VideoSequence Editor(VSE)에 조금의 코드를 기여하기 시작함.
     * Blender에 비디오 편집 도구가 있다는 사실을 알고 있었음? 나도 몰랐음.
     * 비디오 편집, 타임라인, 시퀀서, 색보정, ffmpeg, 오디오 믹싱 등에 대해 아는 것이 전혀 없음에도 VSE를 다루기 시작함.

    VSE 작업을 어떻게 '우연히' 시작하게 되었나?

     * Unity의 Unite 2023 컨퍼런스를 암스테르담에서 확인하고 친구들을 방문하기로 결정함.
     * 컨퍼런스 후 반나절 동안 Blender 본사를 방문했고, Francesco와 Sergey가 VSE에 기여할 의향이 있는지 물어봄.
     * 그렇게 VSE 작업을 시작하게 됨.

    타임라인 그리기 개선

     * VSE 타임라인은 이미지 하단에 위치하며, 한 번에 약 3000개의 ""스트립""이 보임.
     * 타임라인을 스크롤하고 이동하는 것은 사용자 인터페이스를 약 15프레임으로 업데이트함.
     * 이제 60프레임 이상으로 업데이트됨(#115311).

    스코프

     * VSE는 이미지 히스토그램, 웨이브폼, 벡터스코프와 같은 전형적인 ""스코프""를 표시할 수 있음.
     * 히스토그램, 웨이브폼, 벡터스코프의 개선 사항이 있음.

    ffmpeg 부분

     * Blender는 주로 ffmpeg 라이브러리를 사용하여 오디오/비디오 읽기 및 쓰기에 사용함.
     * libswscale을 사용하여 영화 프레임 RGB↔YUV 변환을 수행함.
     * 이제 멀티스레딩을 활용하여 RGB→YUV 변환 단계를 더 빠르게 처리함(#116008).

    오디오 리샘플링

     * 오디오 라이브러리(Audaspace) 내에서 오디오 클립 데이터의 리샘플링에 많은 시간이 소요됨.
     * 새로운 ""중간"" 리샘플링 품질 설정을 Audaspace에 추가하여 렌더링 시 사용하도록 함(#116059).

    이미지 변환 및 필터링

     * VSE에서 이미지, 영화, 텍스트, 장면 등을 변환할 수 있음: 위치 지정, 회전, 크기 조정, 추가 크롭 적용.
     * 이러한 변환은 모두 CPU에서 수행되며 이미 멀티스레딩으로 처리됨.

      ""반 픽셀 오류"" 수정

     * 코드에 여러 ""반 픽셀 오류""가 있었으며, 이는 많은 경우 서로 상쇄되거나 보이지 않음.
     * 이러한 오류들이 수정됨(#116628).

      Bilinear 필터링 주변의 투명성 테두리

     * Bilinear 필터링만이 결과 이미지 주변에 투명성을 추가함.
     * 이제 Bilinear 필터링 코드에서 ""투명성으로 블렌딩""을 제거함(#117717).

      필터링 추가 및 변경

     * VSE 스트립 변환에는 Cubic 필터링 옵션이 없었음.
     * 이제 VSE에서 두 가지 종류의 Cubic 필터링을 선택할 수 있음(#117100, #117517).
     * ""Auto"" 필터 옵션을 추가하여 기본값으로 설정함(#117853).

    VSE 효과 최적화

     * 실제 영화 데이터 세트에서는 많은 효과를 사용하지 않지만, 코드에서 무언가를 발견하여 최적화함.
     * 대부분 멀티스레딩을 통해 최적화됨.

    이 모든 것이 렌더링 시간에 어떤 의미가 있나?

     * Blender Studio에서 제공하는 세 가지 데이터 세트에서 VSE 영화의 최종 렌더링 시간은 PC에서 약 2배 빨라짐.

    실제 작업 과정에 대한 생각

     * 위의 모든 작업이 두 달간의 파트타임 노력에 ""좋은 양의 작업""인지는 확실하지 않음.
     * 개발자(나)는 이 분야나 코드베이스에 대해 아무것도 몰랐음에도 불구하고 꽤 괜찮은 것 같음.
     * 총 37개의 풀 리퀘스트가 완료되어 리뷰되고 병합됨.

    다음은 무엇인가?

     * Blender 4.1이 베타가 되었으며, 기능적으로 ""완성""됨.
     * Blender 4.2 작업이 시작되며, 계속해서 VSE와 함께 작업할 계획임.

   GN⁺의 의견:
    1. 이 글은 Blender의 VSE에 대한 개선 사항과 개발 과정을 공유하는 것으로, 오픈소스 프로젝트에 기여하는 것이 얼마나 중요한지를 보여줌.
    2. 개발자가 자신의 전문 분야가 아닌 영역에서도 유의미한 기여를 할 수 있다는 것을 강조함으로써, 새로운 도전을 격려하는 긍정적인 메시지를 전달함.
    3. 이 글은 소프트웨어 개발과 관련된 최적화 및 성능 향상의 중요성을 강조하며, 이러한 개선이 실제 사용자 경험과 렌더링 시간에 어떤 영향을 미치는지 구체적인 예를 들어 설명함.

        Hacker News 의견

     * 한 사용자는 자신의 경력에서 가장 잘못된 부분이 독특한 프로젝트에 대한 수학적 해결책을 찾는 것과 평균적인 결과를 내는 유급 프로젝트 사이에서 균형을 찾지 못했다고 언급함. 무급으로 작업하던 것에 대해 급여를 받을 기회가 생겼지만, 결국 전혀 작업하지 않게 되었다는 경험을 공유함.
     * 다른 사용자는 원래 Unity에서 많은 경험을 쌓은 후 Blender에 기여한 사례를 언급하며, 특히 이미지 처리 단계를 최적화하여 연산 속도를 4배 향상시킨 변경 사항을 칭찬함.
     * 한 사용자는 Aras가 다양한 오픈 소스 그래픽 프로젝트에 참여하여 대규모 속도 향상과 개선을 이루고 다른 프로젝트로 이동하는 것을 지난 몇 년간 가장 좋아하는 추세로 꼽음.
     * 또 다른 사용자는 자신이 선호하는 음악 플레이어인 Musicbee가 오픈 소스가 아니어서 아쉬움을 표현하며, 소스가 공개되었다면 여가 시간에 작은 문제들을 고치는 데 기여하고 싶다고 말함.
     * 한 사용자는 2020년부터 Blender VSE를 비디오 편집에 사용하고 있으며, 리눅스에서 가장 안정적이고 기능이 풍부한 비디오 편집기라고 생각한다고 언급함.
     * 다른 사용자는 자신의 팟캐스트를 위해 모든 오픈 소스 도구를 사용하고 싶었지만, Blender에서 크로마키가 포함된 mp4 시퀀스를 렌더링하는 데 10시간이 걸려 DaVinci Resolve로 전환했다고 경험을 공유함.
     * 한 사용자는 게시물 제목의 의미를 파악하는 데 도움을 요청하며, 혹시 이것이 밈스러운 표현인지 물음.
     * 또 다른 사용자는 Blender 3D 프로그램의 어떤 부분도 더 빠르게 만드는 것이 매우 어려울 것이라고 언급하며, 이미 가장 빠르게 부팅되고 가장 반응이 빠른 3D 애플리케이션이라고 평가함.
     * 한 사용자는 제목을 더 명확하게 바꿔달라고 요청함.
     * 마지막으로 한 사용자는 VSE를 처음 사용해본 경험이 그다지 좋지 않았다고 언급하며, 자신의 경험에 대한 링크를 공유함.
"
"https://news.hada.io/topic?id=13199","iFixIt의 Vision Pro 분해 분석 - 그 가짜 눈은 왜 이상해 보일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             iFixIt의 Vision Pro 분해 분석 - 그 가짜 눈은 왜 이상해 보일까?

     * Vision Pro의 가장 독특한 점은 크고 반짝이는 유리 전면으로, 꺼져 있을 때도 알루미늄이나 플라스틱으로 둘러싸인 경쟁 제품들과 차별화됨.
     * 켜져 있을 때는 투명하지 않고, 렌티큘러 스크린 뒤에서 사용자의 눈을 모방하는 3D 비슷한 비디오를 보여줌.
     * Apple은 이를 EyeSight 디스플레이라고 부르며, 사용자가 당신을 바라볼 때 마치 연기 낀 유리를 통해 볼 수 있는 것처럼 보임.

Heavy Metal

     * 유리 자체는 34그램으로 가볍지만, 배터리를 포함하면 Vision Pro의 무게는 1킬로그램 이상임.
     * 대부분의 홍보 사진에서 숨겨진 외부 배터리는 주머니에 들고 다니며, 헤드셋에 직접 통합하면 너무 무거워짐.
     * 배터리 팩은 353그램이며, 세 개의 iPhone 크기 배터리로 구성되어 총 35.9Wh의 전력을 제공함.

Headbands

     * Vision Pro는 3D 니트 솔로 니트 밴드와 듀얼 루프 밴드가 함께 제공됨.
     * 이 밴드들은 스피커 뒤쪽의 줄기 끝에 부착되며, SIM 카드 제거 도구를 사용하여 분리할 수 있음.
     * 모듈식 디자인으로, 스피커 모듈을 쉽게 교체할 수 있음.

Light Seals and Face Cushions

     * 모든 얼굴은 다르기 때문에 Apple은 다양한 얼굴 크기와 모양을 위해 28가지 다른 라이트 씰 부품을 판매함.
     * 라이트 씰은 메인 헤드셋에 자석으로 부착되며, 모듈식으로 쉽게 교체할 수 있음.

EyeSight Display

     * 전면의 고글박스는 Vision Pro의 특징이자, 리뷰가 쏟아지면서 가장 논란이 되는 부분임.
     * EyeSight 디스플레이는 단일 비디오 피드가 아니라 여러 비디오를 통해 사용자의 눈을 보여줌.
     * 렌티큘러 렌즈를 사용하여 3D 효과를 만들어내며, 이로 인해 해상도가 감소하는 단점이 있음.

Lens Inserts, Stereo Displays

     * Vision Pro는 처음 착용 시 자동으로 렌즈의 위치를 조정하는 자동 IPD 조정 기능을 수행함.
     * Apple Store에서는 데모 시 처방 렌즈 강도를 대략적으로 결정하는 기계를 사용함.

R1과 M2 칩

     * 헤드셋은 M2 Mac 칩과 새로운 R1 칩을 사용하여 작동하며, R1은 12개의 카메라, LiDAR 센서, TrueDepth 카메라로부터 입력을 처리하는 데 특화됨.
     * AR에서는 실제 세계의 카메라 뷰를 사용자의 눈에 가능한 빠르게 투영해야 하며, 이를 위해 R1은 실시간 운영 체제를 사용함.

정말 이상한 디자인 결정으로 이룬 놀라운 업적

     * 최초의 아이폰도 비슷한 일을 했음
          + 저성능 칩이 빠르게 스크롤되는 페이지를 렌더링할 수 없을 때면 회색과 흰색의 바둑판으로 전환되어 사용자의 모든 터치와 스와이프에 대응
          + Apple은 그래픽 충실도보다 반응성을 우선시했음
          + 이번에는 그래픽 충실도와 반응성에 우선순위를 두고 배터리 수명, 무게, 발열에 대한 타격을 감수
          + Apple의 AR 경험이 얼마나 중요한지를 고려할 때, 1세대 디바이스에 적합한 선택일 것
     * 비전 프로는 엄청나게 야심 찬 제품
          + 무겁고 유리가 깨지기 쉬우며 테더링 배터리가 성가실 수 있음
          + 하지만 Apple은 Mac의 성능과 새로운 전용 AR 칩의 성능을 얼굴에 착용할 수 있는 컴퓨터에 담았음
     * 수리성 측면에서는 훌륭하지는 않지만, 긍정적인 측면에서는 일부 연결 기능이 상당히 만족스러움
          + 예를 들어, SIM 제거 도구를 사용하여 측면 암을 튀어나오게 할 수 있고 자석 쿠션이 더욱 사용자 친화적이라는 사실을 알게 된 분해 팀이 깜짝 놀랐음
     * 그렇다면 이 제품을 만드는 데 몇 년이 걸렸고 컴퓨팅의 미래에 대한 Apple의 최신 베팅인 것이 분명한데 왜 Apple은 EyeSight 화면에서 자체 표준에 부응하지 못했을까?
          + 어둡고 해상도가 낮으며 헤드셋에서 가장 무게에 민감한 부분에 부피, 무게, 복잡성 및 비용을 많이 추가함
          + 결국 출시 기한을 넘기고 목표 성능을 달성하지 못했을까? 아니면 막바지 제조 단계에서 오류가 발생한 것일까? 어쨌든 이 제품을 시장에 출시하는 것은 어려운 결정이었을 것
     * 우리는 최초의 오큘러스 때부터 VR 헤드셋을 분해해왔는데, 애플은 계속해서 놀라움과 즐거움을 선사하고 있음
          + 여기에는 정말 많은 매혹적인 기계 및 광학 설계가 담겨 있음
          + Apple이 센서를 완벽하게 통합하여 견고한 위치 추적을 구현한 것은 경이로운 일이며, 그 비결에 대해 자세히 알아보고 싶었음
     * 아직 분석이 끝나지 않았음. 이 기기 내부에는 조사할 것이 더 많음
     * 다음 시간에는 내부 디스플레이와 센서 어레이에 대해 자세히 살펴보고 수리 가능성 점수를 매겨볼 것

GN⁺의 의견

     * Vision Pro는 Apple의 AR 경험에 중요한 첫 번째 세대 장치로, Mac의 성능과 새로운 전용 AR 칩의 성능을 얼굴에 착용할 수 있는 컴퓨터로 집약시킨 매우 야심찬 제품임.
     * EyeSight 디스플레이의 낮은 해상도와 어두운 화면은 많은 비판을 받았지만, 이는 3D 효과를 만들기 위한 디자인 상의 타협이었음.
     * 이 제품은 수리 가능성 측면에서는 그리 좋지 않지만, 일부 연결 부분은 사용자 친화적이며, 특히 SIM 제거 도구를 사용하여 쉽게 분리할 수 있는 사이드 암이나 자석 쿠션 등은 긍정적인 부분임.

   애플은 역시 애플인가보네요
   한번 체험해보고 싶어져요 ㅎㅎㅎ

        Hacker News 의견

     * 가짜 눈과 아바타에 대한 의견
          + 만화 눈과 얼굴을 사용하면 더 매력적일 것이라는 의견. 서양 스타일이나 애니메이션 스타일을 선택할 수 있으며, 이미 만화 눈이 그려진 아이 마스크를 사는 사람들이 있음. 이러한 방식은 기기와 아바타에 개성을 부여할 수 있음.
     * 가짜 눈의 기능에 대한 추측
          + 가짜 눈은 Apple이 기기를 거의 투명하게 보이게 하는 사진으로 마케팅하는 데 필요했을 것이라는 추측. 실제로는 사용자의 눈이 거의 보이지 않으므로 고객에게 어떤 기능을 제공하는지 불분명함. 다음 세대에서는 이 기능이 제거될 것으로 예상됨.
     * 외부 배터리 연결 필요성에 대한 의견
          + 기기가 항상 외부 배터리에 연결되어야 한다면, 처리 과정과 팬도 외부 배터리로 옮기는 것이 낫지 않을까 하는 의문 제기.
     * Apple의 새로운 배터리 팩 커넥터에 대한 불만
          + Apple이 USB-C로의 전환을 마친 것 같았는데, 배터리 팩에 또 다른 독점 커넥터를 사용한 것에 대한 실망감 표현.
     * 제품 리뷰 비디오 링크 공유
          + 유튜브 리뷰어 MBKHD의 비디오 리뷰 링크를 공유하며, 이 리뷰가 도움이 되었다고 언급.
     * 자동 IPD 조정 기능에 대한 평가
          + 자동 IPD(눈동자 간 거리) 조정 기능이 유일하게 인상적이었지만, 다른 헤드셋에서는 이 기능이 매우 사소하고 한 번 설정하고 나면 거의 만지지 않는 것으로, 무게가 많이 나가는 기기에는 불필요한 추가 무게로 여겨짐. 또한, 필요하지 않은 상황에서 독점적인 배터리 플러그를 사용하는 것은 소비자에게 불리하다는 의견.
     * 기기의 무게에 대한 의견
          + 기기 안에 많은 불필요한 부품이 있어 보이며, 이를 제거하면 200g까지 줄일 수 있을 것 같다는 희망 표현. 첫 번째 버전을 의도적으로 무겁게 만들고, 이후 버전에서 무게를 조금씩 줄이는 전략일 수 있다는 추측.
     * Lightning 커넥터의 핀 수에 대한 관찰
          + Lightning 커넥터의 다양한 핀 수를 지적하며, 8핀, 10핀, 12핀(USB-C와 동일한 핀 수)의 차이를 언급. 12핀 Lightning 커넥터가 개방형 사양으로 사용되기를 바라는 의견과 함께, Sim-Lock 또는 푸시 버튼 잠금 디자인을 선호함.
     * 가짜 눈에 대한 문화적 참조
          + 가짜 눈이 David Foster Wallace의 ""Infinite Jest""에서 비디오 통화에 대해 언급한 부분을 떠올리게 한다는 의견.
     * 기기의 팬 크기와 소음에 대한 의견
          + 기기에 큰 팬이 두 개 있는 것에 놀랐으며, 리뷰어들은 팬 소음을 듣지 못했다고 하지만, 3D 게임을 할 때 CPU와 GPU를 많이 사용하면 팬이 더 크게 돌아갈 수도 있다는 추측.
"
"https://news.hada.io/topic?id=13276","RMBG v1.4 - 최첨단 배경 제거 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        RMBG v1.4 - 최첨단 배경 제거 모델

     * BRIA Background Removal v1.4
     * 다양한 카테고리와 이미지 유형에서 전경과 배경을 효과적으로 분리하도록 설계된 최첨단 배경 제거 모델
     * 일반 스톡 이미지, 전자상거래, 게임, 광고 콘텐츠 등 엄선된 데이터 세트를 기반으로 학습되어 대규모 기업 콘텐츠 제작을 지원하는 상업적 사용 사례에 적합
     * 정확성, 효율성, 다목적성은 현재 주요 오픈 소스 모델에 필적하는 수준임
     * 비상업적 이용의 오픈소스이며, 상업용도는 별도 계약 필요
     * 콘텐츠 안전성, 합법적으로 라이선스가 부여된 데이터 세트, 편향성 완화가 가장 중요한 곳에 이상적
"
"https://news.hada.io/topic?id=13205","지금이 30년만에 회사를 창업하기 가장 좋은 시기임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      지금이 30년만에 회사를 창업하기 가장 좋은 시기임

    1. 부실 VC 자산을 매입하기 그들을 Recap하세요. 향후 팀 배당을 제공합니다. 그들을 수익 기계로 전환하세요.
    2. 미디어 종말의 도래 지난 12개월 동안 20,000명 이상의 미디어 직원이 해고. 콘데 나스트에서 워싱턴 포스트까지. 이러한 인재들로 어떻게 수익성 있고, AI를 기반으로 하며, 커뮤니티를 우선시하는 새로운 미디어 회사를 만들 수 있을까?
    3. 애플 비전 프로 앱 스토어 향후 12개월 동안 40만 대의 헤드셋이 판매될 것. 농담처럼 보이지만 실상은 그렇지 않음. 해당 앱 스토어에 맞는 고유한 앱을 만들어 먼저 출시하세요.
    4. 모든 것의 Figma화 싱글플레이어였던 소프트웨어를 멀티플레이어로 전환하는 것은 세대를 뛰어넘는 기회. 소프트웨어의 미래는 Arc, Figma 등처럼 보임
    5. SaaS 비즈니스 모델은 죽어가고 있음 사람들은 SaaS 구독에 지쳤음. 일회성 결제 또는 작업당 지불 방식의 SaaS가 일반화되는 중
    6. 엘더테크(Eldertech) 베이비붐 세대가 은퇴하고 있음. 아마도 가장 소외된 고객층 중 하나일 것. 이들을 위해 만들어야 할 것이 너무나 많음.
    7. 크리에이터를 활용할 것, 그들의 가격은 잘못 책정되어 있음 대부분의 크리에이터는 브랜드 거래 이상의 수익을 창출할 수 없음. 크리에이터들은 기존 미디어가 꿈꾸는 유통망을 가지고 있음. 이들과 파트너 관계를 맺을 것. 크리에이터가 스스로 제품화하여 수익을 창출할 수 있도록 도와줄 것
    8. GPT 스토어 역사상 가장 빠르게 성장하는 제품이 앱 스토어를 출시했음. 말 그대로 차세대 앱 스토어
    9. 모두를 위한 에이전트 에이전트, 에이전트, 에이전트, 에이전트. AI 에이전트의 오프라는 누가 될까?
   10. 제품화된 서비스 어떻게 하면 서비스를 제품처럼 만들 수 있을까? 글로벌 인력과 AI를 통해 가능함. 우리는 Dispatch Pro 를 구축하여 사람들이 월 단위로 마케팅 자산을 구축할 수 있도록 했음. 사람들은 랜딩 페이지, 리드 마그넷, 소셜 자산과 같은 시장 자산을 수익 창출 기계로 전환하기 위해 매달 비용을 지불하며. 하룻밤 사이에 7배의 수익을 창출
   11. ChatGPT의 언번들링 ChatGPT가 모든 사람에게 모든 것이 될 수는 없음. Craiglist, Reddit 등이 언번들링 된 것처럼 ChatGPT도 언번들링 될 것. ""ChatGPT for X""
   12. 인터넷 멤버십은 새로운 커뮤니티 워크샵, IRL 이벤트, 소프트웨어, 거래 등을 판매하는 디지털 커뮤니티. 나는 스타트업 아이디어, 트렌드, 비공개 Q&A, 소프트웨어 딜등이 포함된 월간 이메일 뉴스레터를 발송하는 리미티드 멤버십을 만들었고 3개월 만에 27,000달러의 MRR을 달성했음
   13. 디톡스 경제의 부상 사람들은 화면과 씨앗 기름으로 과부하 상태. 이 새로운 디톡스 경제를 위한 비즈니스 구축하세요
   14. 5~6%의 높은 이자율로 인해 기업들은 수익을 늘리고 비용을 줄이기를 원함 이를 돕기 위해 수많은 비즈니스가 생겨나고 있음
   15. Z 세대의 거의 절반이 종교를 믿지 않음 커뮤니티 기반 브랜드의 부상. 지금이 바로 그들이 연결되었다고 느끼는 것을 만들 수 있는 기회
   16. Z세대의 행복감, 성취감, 안정성, 안전성은 다른 세대에 비해 역대 최저 수준 이들을 도울 수 있는 제품과 서비스를 개발하려면 어떻게 해야 할까?
   17. 구글은 AI 덕분에 완전히 새로워지고 있음 수십억 건의 방문이 이루어지며, 사람들은 이를 ""SEO 2.0""이라고 부름. 고객을 확보하기 위한 이러한 '지루한' 방법(예: SEO)은 점점 더 인기를 끌 것
   18. 프라이버시를 우선시하는 스타트업 대부분의 사람들은 편리함을 무엇보다 중요하게 생각하지만, 개인정보 보호에 대한 움직임이 커지고 있음. 해킹과 피싱을 당하는 사람들이 많아질수록 개인 정보 보호와 보안에 대한 관심도 높아짐
   19. 틱톡 스토어. 오늘 나는 지난 45일 동안 TikTok 스토어에서 100만 달러를 벌어들인 18세 남성을 만났음. 그는 제품을 소싱하고, 크리에이터와 파트너 관계를 맺고, 단 1달러도 모금하지 않았으며, 모든 구매에서 수익을 올림. 소셜 판매, 라이브(IG 라이브/TikTok 라이브) 판매가 증가함에 따라 이러한 사례를 더 많이 보게 될 것이라고 생각
   20. 멀티 기업가 정신 하나의 인터넷 비즈니스가 아닌 다양한 인터넷 비즈니스 포트폴리오. 작은 사고방식의 전환, 큰 차이. 수익성이 좋은 소규모 비즈니스를 인수하여 규모를 확장할 것. 이상적으로는 고객을 통해 자금을 조달할 것
   21. 뉴스레터 거품의 붕괴 뉴스레터 거품이 터지면(Yes, When) 흥미로운 뉴스레터를 골라 모아 뉴스레터 비즈니스에서 뉴스레터 기반 비즈니스로 전환할 수 있는 기회가 될 것

   AI hype때문에 마약에 취한 듯 들떠있는 이 주장에 절대 공감 못한다.
    1. LLM에 선두주자인 Open AI조차 운영비 마련에 엄청 어려움을 겪고 있다.
    2. Legacy Online business(이런 단어조차 정의되고 있지 못하지만)는 AI로 인하여
         1. 비용이 절감되어 오히려 수익이 높아질지
         2. 완전히 비즈니스 모델이 진부화되어 시장에서 퇴출 될 지
            아직 명확하지 않다.
    3. Cloud 기반 AI서비스는 엄청난 모델 개발 비용과 온라인 서비스비용(AI수퍼컴 및 DC운영비)를 감당할만한 Business Justification을 찾지 못하면 곧 시련을 겪을 것이다.
       지금의 명성은 sweet하지만 청구서는 반드시 날아온다.
    4. 지금 MZ새대는 물질적인 성과이에외는 어떤 가치도 인정하지 않는 속물세대이다.
       이들도 물질에 집착한 삶에 대한 청구서를 언제가 받게 될 것이다. 아마 엄청난 기후변화보다 더 참혹한 댓가를 치룰 것이다.
    5. Social Network에 비춰진 허상을 진실로 알고 그 들과 자신을 비교하면 정신적으로 문제가 생기는 10대 20대가 폭발적으로 증가하며 이들 세대 구성원 거의 전체가 심각한 정신적 문제가 생기고 있고 이로 인한 사회 문제가 폭발적으로 증가하고 있다. 세대 전체를 붕괴 시키는 그런 사회 문제가 될 것이다.
    6. 서구 사회, 특히 백인주류 사회의 이런 오만하기 짝이 없는 무한긍정의 이런 반응이 결국 세상을 오늘날과 같은 온갖 문제 투성이의 극단적 세계를 만들었다. 기후변화는 사기라고 그렇게 이야기하더니 이제 전 지구적으로 이에 대한 피해를 격고 있지 않는 곳이 없다. 마찬가지로 SNS와 AI로 인한 사회 전체의 부정적 영향은 이제 시작이다.
    7. 따라서 이런 무한 긍정적인 백인주류사회의 반응은 또다른 닷컴 버블사기의 시대(The Age of Bubble)를 초래할 뿐이다.
    8. This time it will be different라는 말은 지겹게 들어온 BS이다. 인간은 영원히 같은 바보짓을 거듭거듭 반복하는 시지프스 신화의 존재인가? 철학적 사유없이 표피적인 이런 반응으로 인류의 근본 문제는 절대 해결된적 없다.
    9. 2024년은 전쟁의 시대가 될 수도 있고 거시경제는 거의 멸망수준의 어려움을 겪고있다. 러시아의 우크라이나 침공전쟁도 종전하지 않고 있고 중공의 대만 침공 발발가능서도 커지고 있으며 심지어 한반도에서도 제2의 한국전 발발가능성도 있고 중동도 하마스의 이스라엘 침공으로 대규모 전쟁 가능성이 매일같이 커지고 있다. 이런데도 주류 경제학자들은 거대 기업의 압력에 의해 입을 닥치고 있다.
   10. 지금의 AI 붐은 마치 경제 대공황 직전의 광란의 20년대 (Roaring twenties)의 재현에 불과하다. 100년만에 인간은 똑같은 광란에 휩싸여 있다.
   11. 엄청난 AI개발및 운영 비용 때문에 결국 AI분야 최종 승리는 TinyAI, EdgeAI, Open Source AI로 귀결된다.

   이 응답을 원래 Tweet 포스팅에도 달 것이다. 무한 긍정 마케팅 밖에 모르는 백인놈들의 반응이 어떨지 궁금하다.

   내 영어 twitter 응답: https://twitter.com/HellTV8/status/1754990602884985093

   7번 == BeRapt
   Shoulder를 주목해주세요 :-)

   힘 얻는 글 공유 감사합니다.

   흥미로운 글 감사합니다.

   저는 15, 16이 흥미롭네요. 새로운 시대의 커뮤니티이지 않을까?..

   저도 15, 16이 흥미롭고 이제 스무살이 되는 아들을 가진 애비로써 걱정되는 부분이기도 합니다.

   아.. 아버지도 그러셨겠지.. 하며 이 변화가 어떤 영향을 줄것인지 생각해보고 있습니다.

   여러 인사이트를 얻을 수 있는 좋은 글이었습니다. 고맙습니다 ^^

   지피티 스토어와 언번들링이 기대합니다.

   '엘더테크', 'GPT 스토어' 가 기억에 남네요.
   많은 아이디어가 떠오릅니다. 감사해요

   비전프로가 과연 성공할수 있을까? 라고 의심하기 보다는
   현재 팔린 20만대 이상의 비전프로 사용자들이 필요로 하는 앱을 빠르게 만든다면 충분히 초기 수익화를 가져갈수도 있을듯
   Juno - 애플 비전 프로를 위한 유튜브 클라이언트
   이 유튜브 앱이 $5인데 지금 1등입니다.
   그외에 자신이 가지고 있는 영상을 플레이 해볼만한 적절한 비디오 플레이어가 없다는 얘기도 들리니 아마 곧 쏟아지겠죠.
"
"https://news.hada.io/topic?id=13262","AdGuard Home: 네트워크 전체 광고 및 추적기 차단 DNS 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AdGuard Home: 네트워크 전체 광고 및 추적기 차단 DNS 서버

개인정보 보호 센터

     * AdGuard Home은 광고 및 추적을 차단하는 네트워크 전체 소프트웨어임.
     * 설치 후 모든 가정용 기기를 커버하며, 클라이언트 측 소프트웨어가 필요 없음.
     * DNS 서버로 작동하여 추적 도메인을 ""블랙홀""로 재경로하여 기기가 해당 서버에 연결하는 것을 방지함.
     * 공개 AdGuard DNS 서버에 사용되는 소프트웨어를 기반으로 하며, 많은 코드를 공유함.

시작하기

  자동 설치 (Linux/Unix/MacOS/FreeBSD/OpenBSD)

     * curl, wget, fetch 명령어를 사용하여 설치 가능.
     * 스크립트는 -c, -r, -u, -v 등의 옵션을 받아들임.

  대체 방법

    수동 설치

     * 수동 설치 방법과 기기 설정 방법은 위키에서 확인 가능.

    Docker

     * 공식 Docker 이미지 사용 가능.

    Snap Store

     * Linux에서 Snap Store를 통해 설치 가능.

  가이드

     * 위키 참조.

  API

     * AdGuard Home과 통합하려면 REST API 사용 가능.
     * 파이썬 클라이언트도 사용 가능.

다른 솔루션과 비교

  공개 AdGuard DNS 서버와의 차이점

     * 자체 AdGuard Home 서버 운영 시 더 많은 기능을 수행할 수 있음.
     * 서버가 차단하고 허용하는 것을 선택하고, 네트워크 활동을 모니터링하며, 사용자 정의 필터링 규칙을 추가할 수 있음.
     * 가장 중요한 것은 사용자만이 서버를 제어한다는 점임.

  Pi-Hole과의 비교

     * AdGuard Home은 Pi-Hole과 많은 공통점이 있으나, 추가 소프트웨어 설치 및 설정 없이 많은 기능을 제공함.
     * 일반 사용자도 최소한의 노력으로 설정할 수 있도록 간단함을 추구함.

  전통적인 광고 차단기와의 비교

     * DNS sinkholing은 광고의 큰 비율을 차단할 수 있지만, 전통적인 광고 차단기만큼의 유연성과 강력함은 부족함.
     * DNS 기반 차단기는 스마트TV, 스마트 스피커, IoT 기기 등에서 광고, 추적, 분석 요청을 차단하는 데 도움이 될 수 있음.

  알려진 제한 사항

     * DNS 수준 차단기로 차단할 수 없는 예시: YouTube, Twitch 광고; Facebook, Twitter, Instagram 스폰서 게시물.
     * DNS만으로는 이를 처리할 수 없으며, 독립 실행형 AdGuard 애플리케이션에서 사용하는 것과 같은 콘텐츠 차단 프록시를 사용해야 함.
     * 향후 AdGuard Home에 이 기능을 지원할 예정이나, 여전히 충분하지 않거나 복잡한 설정이 필요한 경우가 있을 수 있음.

소스에서 빌드하기

  필수 조건

     * 개발 환경을 준비하기 위해 make init 실행 필요.
     * AdGuard Home을 빌드하기 위해 필요한 것: Go v1.20 이상, Node.js v16 이상, npm v8 이상, yarn v1.22.5 이상.

  빌드

     * 터미널을 열고 명령어 실행.
     * Node.js 17 이상으로 빌드할 경우 --openssl-legacy-provider 옵션 지정 필요.
     * 다른 플랫폼용으로 빌드하려면 GOOS와 GOARCH 환경 변수를 make 실행 시 매크로로 지정.

  기여하기

     * 이 저장소를 포크하고 변경 사항을 만든 후 풀 리퀘스트 제출 가능.
     * UI와 백엔드 부분에 동시에 기여할 것을 기대하지 않으며, 백엔드 부분이 먼저 구현되어야 함.

    불안정한 버전 테스트

     * beta와 edge 두 가지 업데이트 채널 사용 가능.
     * Snap Store, Docker Hub, 위키에서 불안정한 버전 설치 가능.

    문제 보고

     * 문제가 발생하거나 제안이 있을 경우, 이슈 페이지에서 ""New issue"" 버튼 클릭.

    번역 도움

     * AdGuard Home 번역에 도움을 주고 싶다면, 지식 기반에서 번역에 대해 알아보고 CrowdIn 프로젝트에 기여 가능.

AdGuard Home을 사용하는 프로젝트들

     * iOS 앱, 파이썬 라이브러리, Home Assistant 애드온, OpenWrt LUCI 앱, 실시간 트래픽 모니터링 및 통계 도구, GLInet 라우터용 AdGuard Home, Cloudron 앱, Asuswrt-Merlin-AdGuardHome-Installer, Node.js 라이브러리, 브라우저 확장 등 다양한 프로젝트에서 사용됨.

감사의 말

     * Go, Node.js, React.js, Tabler, whotracks.me 데이터 등 다양한 라이브러리와 도구들 덕분에 소프트웨어 개발이 가능했음.

개인정보 보호

     * 사용자가 자신의 데이터를 제어해야 한다는 주요 아이디어를 바탕으로, AdGuard Home은 사용 통계를 수집하지 않으며, 사용자가 구성하지 않는 한 어떠한 웹 서비스도 사용하지 않음.

   GN⁺의 의견:
     * AdGuard Home은 사용자의 개인정보 보호와 데이터 제어에 중점을 두고, 네트워크 전체의 광고 및 추적 차단을 가능하게 하는 강력한 도구임.
     * 다양한 플랫폼과 환경에서 쉽게 설치하고 사용할 수 있으며, 사용자 친화적인 인터페이스를 제공함.
     * 이 소프트웨어는 개방성과 확장성을 갖추고 있어, 커뮤니티의 기여를 통해 지속적으로 발전하고 있으며, 이는 오픈 소스 프로젝트의 중요성을 강조함.

        Hacker News 의견

     * 한 사용자는 자신의 홈 네트워크에서 몇 년간 경쟁 프로젝트인 Pi-hole을 운영했으나, NextDNS를 발견한 후로는 성능 손실을 감수하고 이를 사용하고 있음. NextDNS는 모든 기기에서 이용 가능하며, 유지보수 시간을 절약할 수 있음. Pi-hole은 대부분 잘 작동하지만, 문제가 발생했을 때 수리하는 데 시간이 걸림. NextDNS는 연간 $20의 비용으로 Pi-hole과 경쟁할 수 없는 가치를 제공함.
     * 다른 사용자는 Pi-hole 대신 AdGuard Home을 선택했음. 더 나은 사용자 인터페이스와 매력적인 기능을 제공하며, 내부 DNS를 이용한 로컬 도메인 쿼리 설정과 같은 맞춤화 옵션을 제공함. AdGuard가 이 서비스를 무료로 제공하는 이유에 대해 의문을 가지고 있으나, 현재로서는 리스크가 낮은 결정으로 보임.
     * AdGuard가 러시아 회사이고 개발자 대부분이 모스크바에서 근무하며, 사이프러스에 등록되어 있어 보안상의 이유로 사용하지 않겠다는 의견이 있음.
     * py-hole에 대한 관심을 제안하는 댓글이 있음. 이는 파이썬 스크립트와 dnsmasq 설정으로 구성되어 있으며, openwrt에서 실행되고 CPU 사용량이 거의 없음.
     * AdGuard가 Home Assistant 애드인으로 제공되며, Home Assistant와 통합되어 대시보드에서 차단 기능을 켜고 끌 수 있다는 점이 흥미로움.
     * AdGuard Home을 사용하는 사용자는 PiHole에 비해 문제가 적고, 도커 컴포즈를 통해 Pi에서 문제없이 작동하며, adguardhome-sync 컨테이너를 사용하여 두 번째 Pi에서 백업으로 구성을 동기화함. 네트워크 내 광고가 보이지 않고, 일부 기기에서 보내는 추적/광고 요청의 양이 많은 것을 확인하는 것이 흥미로움.
     * NextDNS 사용자 중 한 명은 Mac/Safari에서 '추적자로부터 IP 주소 숨기기' 기능을 활성화하면 NextDNS로 차단되던 광고가 보이기 시작해 이 기능을 비활성화해야 한다고 함. NextDNS와 Apple의 기능이 함께 사용되지 않는 것으로 보임.
     * Technitium DNS(오픈소스이며 무료)를 사용하는지에 대한 질문이 있음. 이는 최소한의 하드웨어에서 작동하며, Orange Pi 3 LTS에서 실행 중임.
     * 해커뉴스에는 일정 시간이 지나면 반드시 Pi-Hole이나 AdGuard Home에 대한 글이 올라온다는 댓글이 있음.
     * pfsense를 사용하는 경우 pfblockerng를 확인해보라는 추천이 있음. 이는 네트워크에서 광고 차단 기능을 제공함.
"
"https://news.hada.io/topic?id=13241","테크 회사들이 ARR을 정의하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          테크 회사들이 ARR을 정의하는 법

   ARR(연간 반복 수익)은 생각만큼 간단하지 않음
     * Alteryx : ((총 약정 계약 수)/(구독 기간 개월 수) x 12)
     * Big Commerce : 월별 계약 또는 구독 수익 x 12
     * Crowdstrike : 월별 계약 구독 수익 x 12
     * Commvault : (총 계약 금액/계약 기간 내 일수) x (365일)
     * DataDog: 월별 정기결제 매출 x 12
     * Dropbox: 구독 수익 x 12
     * Dynatrace : 일별 구독 매출 * 365
     * Everbridge: 활성 고객으로부터의 NTM(다음 12개월) 반복 매출
     * ForgeRock : (고객 계약의 총 금액 / 명시된 총 계약 기간(개월)) * 12
     * Gitlab : 월별 반복 매출 x 12
     * Informatica : 월별 반복 매출 x 12
     * Intapp : 약정 계약 금액 * 365
     * Jamf : 분기별 구독 수익 * 4
     * Nutanix: 모든 디바이스 계약에 대한 연간 계약 가치(ACV)의 합계
     * UI Path : (서브스크립션 라이선스 또는 유지보수 계약에 따른 솔루션 SKU별 청구 금액/청구 기간) x 365일
     * RingCentral : 월간 반복 구독 * 12
     * SimilarWeb : 분기별 매출 * 4
     * Sprout Social : 구독 수익의 회계연도 가치
     * SolarWinds: 구독 ARR + 영구 라이선스 연간 가치
     * Zoom : 월별 반복 수익 * 12
"
"https://news.hada.io/topic?id=13188","제트브레인즈의 제거 불가능한 AI 어시스턴트에 대한 거센 항의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   제트브레인즈의 제거 불가능한 AI 어시스턴트에 대한 거센 항의

JetBrains의 제거할 수 없는 AI 보조기구에 대한 거부감

     * JetBrains는 프로그래머들이 코드를 작성하는 데 도움을 주기 위해 지난 12월 AI 보조기구를 도입함.
     * 이 AI 보조기구는 GitHub Copilot과 유사하지만 JetBrains의 개발 환경, 코드 편집기 및 기타 제품에 깊이 통합됨.
     * 신경망 기반 서비스는 많은 홍보를 받고 있지만, 보안, 법적 위험, 개인 정보 보호 및 윤리적 문제에 대한 우려가 여전히 해결되지 않음.

'의심스러운'

     * 일부 개발자들은 AI 보조기구 플러그인이 자신들의 JetBrains 애플리케이션에 전혀 존재하지 않기를 원함.
     * 플러그인 코드가 깊이 통합되어 있어 제거가 복잡함.
     * ""시스템에서 플러그인을 완전히 제거할 수 있는 기능 제공""이라는 제목의 스레드에서는 이 플러그인을 개발 도구에 포함시키지 않으려는 이유를 설명함.

JetBrains의 응답

     * 개발자들은 포럼에 글을 올려 플러그인을 ""불필요한 소프트웨어"", 기업 지적 재산에 대한 위험, 보안 문제, 성가심, 신뢰 위반으로 묘사함.
     * JetBrains의 개발자 옹호자인 Matt Ellis는 AI 보조기구의 지속성에 대해 우려하는 사람들을 안심시키려고 함.
     * Ellis는 AI 보조기구 플러그인이 번들로 제공되며 활성화되어 있지만, 기본적으로 AI 기능이 활성화되어 있지 않으며 사용자 동의 없이 데이터가 기계 외부로 전송되지 않음을 강조함.
     * JetBrains는 많은 고객들이 번들 플러그인에 만족하고 있기 때문에 AI 도우미를 번들로 제공하면서도 완전히 제거할 수 있는 방법을 모색 중임.

   GN⁺의 의견:
     * JetBrains의 AI 보조기구는 개발자들 사이에서 논란이 되고 있으며, 이는 개인 정보 보호와 지적 재산 보호에 대한 현대 기술의 중요성을 강조함.
     * AI 기술의 통합이 사용자의 동의와 투명성을 필요로 하는 시대에, JetBrains는 고객의 우려를 해소하기 위한 조치를 고려해야 함.
     * 이 사건은 기업이 신기술을 도입할 때 고객의 신뢰를 얻기 위해 얼마나 신중해야 하는지를 보여주며, 기술 회사들이 고객의 피드백을 경청하고 적극적으로 대응하는 것이 중요함을 시사함.

   AI 쓰지도 않는데 업데이트 할 때마다 자동으로 선택이 되어 있어서 짜증나더라구요.

        Hacker News 의견

     * 사용자는 기사의 절반을 스크롤해야 실제 세부 사항에 도달했다고 언급함. AI 기능은 기본적으로 활성화되어 있지 않으며, 사용자의 동의 없이 데이터가 외부로 전송되지 않음. AI 서비스로 전송된 데이터는 훈련 목적으로 사용되지 않음. 일부 해커뉴스 댓글들이 실제 상황을 반영하지 않고 있으며, 실제 불만은 플러그인이 기본적으로 존재한다는 것에 대한 것임. 이는 일부 회사에서 제품 사용 금지로 이어질 수 있음.
     * 한 사용자는 JetBrains가 AI 통합으로 인해 제품이 많은 회사에서 사용할 수 없게 될 것을 깨닫지 못한 것에 대해 놀라움을 표함. 예를 들어, 아마존은 Copilot 사용을 금지하고 있으며, 이는 전망 부족을 나타냄.
     * 오랫동안 JetBrains IDE 사용자였던 한 사용자는 이 기능이 사용자에게 강요되고, 원치 않는 광고나 불필요한 U2 앨범처럼 느껴진다고 언급함. 최신 릴리스에서 비활성화하는 데 성공했으나, 매 업데이트마다 비활성화해야 하는 상황이 되지 않기를 바람.
     * 또 다른 사용자는 플러그인을 비활성화할 수 있지만, 그 존재만으로도 법적 문제로 인해 사용 금지를 초래할 수 있음을 지적함. 불필요한 플러그인 업데이트를 강요하는 JetBrains의 태도에 대해 불만을 표함.
     * 한 사용자는 플러그인이 기본적으로 설치되어 있고, 광고처럼 보이는 것이 유일한 부정적인 부분이라고 생각함. 플러그인을 쉽게 비활성화할 수 있으며, 유료 서비스이므로 사용하지 않으면 됨. 많은 사람들이 분노에 휩싸이는 것은 과장된 반응으로 보임.
     * Ellis는 번들 플러그인을 제거하는 문제에 대해 설명함. 플러그인을 쉽게 제거할 수 없다면 왜 처음부터 플러그인으로 제공되는지에 대한 의문을 제기함.
     * 한 사용자는 기능을 선택적으로 제공하고 사용자가 받아들일지 여부를 보기 전에 기본값으로 설정하는 것은 사용자 중심이 아니라고 비판함. JetBrains에 대한 고객 피드백을 더 잘 들을 것을 조언함.
     * JetBrains Ultimate에 매년 지불하는 한 사용자는 IntelliJ IDEA가 WSL + Gradle 지원에서 점점 더 많은 문제를 일으키고 있어 보이콧을 고려 중임. YouTrack에 제출한 문제 중 거의 절반은 Gradle + WSL 관련 문제임.
     * 제품 관리자들에게 회사의 명성을 손상시킬 수 있는 사용자에게 강요하는 결정에 대한 경고를 전함. 대체 가능한 도구가 많이 있음을 언급함.
     * Little Snitch가 클라우드 기반 AI를 무력화시킬 수 있음을 언급하는 사용자가 있음. Mac을 사용하는 가장 큰 이유 중 하나가 Little Snitch일 수 있으며, Mac에서는 Little Snitch가 있어 안심할 수 있음.
"
"https://news.hada.io/topic?id=13226","2024년 가장 어려운 목표를 세우는 방법론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2024년 가장 어려운 목표를 세우는 방법론

   여러분의 2024 년 가장 어려운 목표는 무엇인가요?

   HARD 목표 달성 방식은 변화하는 환경과 중장기적 관점을 고려한 모델로, 보다 큰 틀에서의 전략을 담을 수 있다는 점에서 개인과 기업 모두에게 유용한 방식입니다.

   목표가 강력하고 어려우며 밀도가 높을수록 실행에 따른 성과는 상대적으로 용이해지며 그 결과로 얻게 되는 성취감은 쉽고 편한 목표를 설정한 사람들보다 더 크다는 것이 이 HARD Goal 방식의 골자입니다.

   HARD 목표 달성 방식을 통해 2024년 여러분의 가장 어려운 목표를 세워보는 것이 어떨까요?
"
"https://news.hada.io/topic?id=13232","AI 서비스들이 실패하는 3가지 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 서비스들이 실패하는 3가지 이유

   Stable Diffusion과 ChatGPT가 나온 이후로 수많은 AI 서비스들이 쏟아져 나왔으나 성공 사례는 극히 드뭄

  AI 서비스들이 실패한 원인

    1. 미흡한 인터페이스
          + 프롬프트 인터페이스는 범용적이지만, 특정 작업을 가장 잘 처리하는 인터페이스는 아님
          + 자유도가 너무 높고 효율이 떨어짐
    2. 낮은 서비스 품질
          + 소위 GPT Wrapper들은 대부분 ChatGPT 보다 좋은 결과물을 만들지 못함
          + FineTuning이나 충분한 프롬프트 엔지니어링이 필요할 수도 있음
          + AI가 모든것을 알아서 해준다는 자동화의 함정에 빠져있음
    3. 서비스 비용 증가
          + AI 이전의 소프트웨어에 비해 운영 비용이 증가함
"
"https://news.hada.io/topic?id=13228","구글, 인터넷 백업을 중단하다 : 캐시된 웹페이지 서비스 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, 인터넷 백업을 중단하다 : 캐시된 웹페이지 서비스 종료

Google이 인터넷의 백업을 더 이상 지원하지 않음: 캐시된 웹페이지 기능이 사라짐

     * Google 검색이 웹을 크롤링하면서 사이트 백업을 만들지 않기로 결정
     * 과거에는 페이지 로딩에 의존할 수 없을 때 사람들이 페이지에 접근하는 것을 돕기 위해 캐시 기능이 도입됨
     * 현재는 상황이 크게 개선되어 이 기능을 없애기로 결정

캐시 링크의 종말

     * 캐시 링크는 Google 검색 결과 옆의 드롭다운 메뉴 아래에 존재했음
     * Google 웹 크롤러가 인터넷을 탐색하며 새로운 페이지나 업데이트된 페이지를 찾을 때마다 사본을 저장
     * 이제 Google은 비용 절감 시대에 접어들어 캐시 데이터를 삭제하기 시작하면 많은 자원을 절약할 수 있을 것으로 보임

캐시 링크의 중요성

     * 캐시 링크는 웹사이트가 다운되었거나 빠르게 변경되었을 때 유용했음
     * Google Bot이 웹을 어떻게 보는지에 대한 통찰을 제공했음
     * Google Bot에 대한 많은 세부 사항은 SEO 스패머로부터 숨겨져 있지만, 캐시된 페이지를 조사함으로써 많은 것을 배울 수 있었음

인터넷 아카이브의 증가된 부담

     * 캐시된 사이트의 종말은 인터넷 아카이브에게 세계 웹페이지의 아카이빙과 변경 추적에 대한 더 큰 부담을 안김

GN⁺의 의견:

     * 이 기사는 Google이 인터넷의 '스냅샷'을 저장하는 캐시 기능을 종료하기로 결정했다는 중요한 정보를 전달함
     * 캐시 기능의 종료는 웹사이트의 이전 버전에 접근하려는 사용자와 웹 아카이빙을 담당하는 기관에 영향을 미칠 것임
     * 이 변화는 인터넷의 역사를 보존하는 방식과 검색 엔진의 역할에 대한 논의를 촉발할 수 있으며, 디지털 정보의 장기 보존에 대한 중요성을 강조함

   Internet Archive에 매달 기부하고 있는데 기부금을 늘려야 되겠군요.

   크롬에서 저장된 페이지 이동기능버튼은 숨겼지만
   cache:https://news.hada.io/topic?id=13228 형식으로
   주소 입력을 통한 접근은 가능합니다.
   (이 기능도 막힐 수가 있긴 할 것 같습니다)

   neo with xguru 멋지네요

   neo가 자동으로 가져오는거 말고, 제가 수동으로 요청한 것은 이렇게 붙게 해두었습니다 ;)
"
"https://news.hada.io/topic?id=13265","오토데스크 창립자 존 워커 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           오토데스크 창립자 존 워커 별세

존 워커의 부고

     * 존 워커가 2024년 2월 2일 금요일에 사망했다는 슬픈 소식을 전함.
     * 그는 미국 메릴랜드에서 윌리엄과 버사 워커 사이에서 태어났으며, 부모는 이미 세상을 떠남.
     * 존은 부인 록시 워커와 형제 빌 워커(웨스트 버지니아 거주)에 의해 추모됨.

존의 교육과 커리어

     * 존은 가족 전통인 의사의 길을 거부하고 천문학을 공부하기 위해 케이스 웨스턴 리저브 대학교(CWRU)에 다녔음.
     * 컴퓨터의 새로운 세계를 발견한 후, 그는 컴퓨터 과학에 몰두하여 전기공학 학위를 취득함.
     * 대학의 Project Chi (X) 컴퓨팅 센터에서 일하며 컴퓨터 과학을 공부함.

존과 록시의 결혼

     * 존은 1972년 추수감사절에 록시를 만나고 다음 해에 결혼함.
     * 결혼 몇 달 후, 캘리포니아에서 새로운 직장을 위해 전국을 가로질러 이동함.
     * 첫 직장을 떠난 후, 베이 지역에서 다양한 곳에서 일함.

마린칩 시스템과 오토데스크의 시작

     * 1976년 말, 존은 당시 새로운 텍사스 인스트루먼트 TMS9900 마이크로프로세서를 기반으로 자신의 회로 기판을 설계함.
     * 이 사업은 마린칩 시스템으로 발전하고, 결국 오토데스크로 이어짐.

존의 유산

     * 오토데스크의 시작은 존 자신이 ""The Autodesk File 2.0k""에서 잘 기록함.
     * 존의 이야기는 그의 방대한 작업을 통해 가장 잘 전달되며, 이는 그의 웹사이트 Fourmilab 1.4k에서 체계적으로 정리되어 대중에게 공개됨.


    GN⁺의 의견

     * 존 워커는 의학자의 길을 거부하고 컴퓨터 과학에 몰두하여 오토데스크라는 혁신적인 기업의 기초를 마련한 인물임.
     * 그의 이야기는 기술과 창업에 관심 있는 사람들에게 영감을 줄 수 있으며, 그의 업적은 현재의 소프트웨어 엔지니어링 분야에 지대한 영향을 미침.
     * 존의 웹사이트 Fourmilab은 그의 작업과 생각을 체계적으로 보존하고 있어, 미래 세대의 연구자와 개발자들에게 소중한 자료가 될 것임.

        Hacker News 의견

     * 첫 번째 CAD 시스템이 도입될 때 고등학교에 다니던 한 사람은 자신의 학교가 지역에서 시험 학교였다고 회상함. 당시 노련한 기술 교사는 새 시스템을 배우고 싶어 하지 않았고, 컴퓨터를 아는 학생을 찾았음. 이 사람은 집에서 몇 년 동안 Commodore PET을 사용하며 코딩을 자습했기 때문에 손을 들었고, 새 기계를 ""파악하라""는 임무를 받았음. 이것이 IBM XT와 AutoCAD를 접한 첫 경험이었고, AutoCAD에서 LISP를 배웠음. 이후 지역 학교들이 CAD 시스템을 도입할 때 교육에 참여하게 되었고, AutoCAD와 함께 일하는 직업을 얻었음. 20대에는 AutoCAD용 공학 및 건축 애드온을 LISP로 개발하는 회사를 창업했고, 나중에 일반 소프트웨어 하우스로 전환했지만, 그것이 항상 자신의 뿌리였음. John의 제품이 자신의 인생 방향을 바꾸었고, 그 사실을 그에게 알릴 기회가 있었으면 좋았을
       것이라고 말함. 학교가 10년 후에 IBM XT를 단종시키자, 원래의 Kurta 태블릿과 Roland 플로터와 함께 그것을 갖고 싶은지 물어보았고, 그는 여전히 그것들을 가지고 있음.
     * 한 사람은 John의 ""The Hackers Diet"" 책과 그의 수많은 책 리뷰로부터 혜택을 받았다고 말함. 그의 열정적인 독서 습관에 영감을 받았으며, 처음에는 믿기 어려웠음. 그는 자신만의 방식으로 삶을 살았고, 많은 사람들이 그가 Autodesk의 창립자였다는 사실을 모르고 있었음. 그는 해커들에게 계속 영감을 줄 것임.
     * 다른 사람은 trendweight와 ""The Hackers Diet"" 방법을 사용하여 체중을 감량했다고 말함. 그는 John을 팟캐스트 게스트 후보로 적어두었고, 그의 autodesk 일기를 훑어보았지만 그와 연락을 취할 기회를 놓쳤음. 그 방법을 따르고 싶다면 스마트 체중계를 사용하고 TrendWeight를 이용하라고 권함. 이 방법은 무엇을 먹어야 하는지 알려주지는 않지만, 다른 어떤 것보다 추적 여부에 대한 더 나은 데이터를 제공함. 매일 몸무게를 재지만, 이동 평균과 미래 예측에만 주의를 기울임. 이는 체중계 측정의 모든 잡음을 평활화함. 지수 이동 평균을 사용하는데, 이것이 진정한 혁신이라고 의심함.
     * 또 다른 사람은 John의 근시를 역전시키는 방법에 대한 기사를 보고 그의 조언을 따랐다고 말함. 그는 다음에 새 안경을 맞출 때 비싼 프로그레시브 렌즈를 건너뛰고 읽기/컴퓨터용과 운전용 안경을 각각 적절한 거리에 맞춰서 만들 것이라고 제안함. 이것은 비용을 절반으로 줄일 수 있으며, 여행 중 프로그레시브 안경을 착용할 때 대부분 코로 밀어 올려서 읽기보다는 하단 부분을 통해 읽으려고 하지 않음. (이것은 아마도 자신의 난시 교정과 관련이 있을 것임)라고 말함. 그는 인터넷에서 무작위 이메일에 답변하는 놀라운 인물로, 그와 같은 사람들이 더 많으면 세상이 무한히 나아질 것이라고 언급함.
     * 한 해커는 1980년대 중반에 AutoLisp(?)를 사용하여 당시 비표준 공학 양식을 계산 분석을 위해 생성하는 ""큰"" 공연을 회상함. 건축가들은 국제적인 대규모 건설 계약을 위한 야심 찬 스케치를 만들었고, 공학 팀은 그것을 실현시켰음. 건축가들은 화려한 상을 받았고, 공학 팀은 감사의 빵과 치즈 파티와 음료를 받았음. (그리고 지불도 받았음) John Walker에게 R.I.P.를 표함.
     * John Walker에 대한 애도의 글에서 그가 autodesk에서 atlast라는 흥미로운 C 확장 언어를 작성했고, 해커 뉴스의 첫 페이지에 수없이 등장한 다이어트 가이드를 썼으며, Commodore 64에서 신경망을 다루었고, C를 안전하게 만드는 라이브러리를 가지고 있었으며, 그의 웹사이트에 멋진 레시피를 올렸고, 또한 어떤 CAD 회사의 창립자였다고 언급함. 그는 또한 pg의 베이지안 스팸 필터의 고성능 버전을 작성했고, 그 이전에 시도했던 것들에 대한 매우 긴 이야기를 가지고 있음. C64를 위한 신경망 코드와 설명자, Knuth 스타일의 성경 연구를 위한 프로그램, 모듈러 신디사이저가 되기 직전의 복제품이 아닌 신디사이저(해리 파일이 설계한 인텔 8008의 디자이너로, 그는 개인적으로 알고 있었음)에 대한 클린룸 재구현 프로젝트, 확률 및 통계에 대한 매우 좋은 입문서, 인터넷을
       통한 대규모 가설 검증, 인터넷에서 저품질 콘텐츠를 피하는 한 가지 방법, 레시피 모음, 이상한 캘리포니아 치즈 브랜드의 역설계, 지하실에서 시공간을 구부리기, 로켓 과학에 대한 가장 간결한 소개, C에서 메모리 누수 문제를 해결하는 smartalloc, 다양한 언어로 구현된 광범위한 벤치마크 결과의 엄청난 컬렉션(Algol-60, PL/I 및 Raku를 포함하는 언어 범위로, 레이트레이서를 포함함), SpaceX가 회사를 시작하기도 전에 Elon Musk가 취한 정확한 접근 방식을 설명하는 게시물, 그리고 xsunclock을 작성한 사람임.
     * Autodesk의 시작에 관한 그의 이야기(""The Autodesk File"")는 매우 흥미롭고 여러 교훈을 담고 있음.
     * 한 사람은 초기 AutoDesk 시절이나 아마도 AutoDesk 이전에 West Coast Computer Faires에서 John을 잠깐 만났다고 말함. 그의 이름은 Univac 메인프레임에서 유명한 ""Pervading Animal Game""에서 익숙했음. ""새로운 소프트웨어 배포 방식, Pervasive Release. 누군가 당신의 프로그램을 요청하면, 그들이 이미 가지고 있을 가능성이 높다고 말할 수 있음."" Univac 1108 생태계에서 그의 이름이 붙은 다른 여러 심각한 프로그램들이 있었음. 이것을 바이러스라고 부르는 것은 불공평할 것이며, 몇 킬로바이트를 차지하는 것 외에는 해를 끼칠 수 없도록 보장하기 위해 많은 노력을 기울였음.
     * John은 ww.com의 성공에 결정적인 역할을 했으며, 덕분에 GSM 인코더를 사용하는 오디오 레이어인 speakfreely를 가질 수 있었다고 한 사람이 말함. 그의 '디지털 인프리마투르'는 예언적이었으며 오늘날까지도 여전히 관련이 있으며, 읽을 가치가 있음.
     * Xanadu에 대한 언급이 있으며, Wired Magazine의 기사가 Xanadu가 WWW가 되지 못한 진짜 이유를 밝히지 못한 것은 비극이라고 언급함. (그래서 Smalltalk이 Javascript가 아닌 스크립팅 언어가 되지 못한 이유 등).
"
"https://news.hada.io/topic?id=13257",""당신이 어디서든지 팟캐스트를 듣는다"는 급진적인 선언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""당신이 어디서든지 팟캐스트를 듣는다""는 급진적인 선언

""당신이 팟캐스트를 듣는 곳이라면 어디든""은 급진적인 선언

     * ""당신이 좋아하는 팟캐스트 앱에서 들어보세요"" 또는 팟캐스터 로만 마스의 표현을 빌리면 ""팟캐스트를 찾을 수 있는 곳이라면 어디든""이라는 말은 팟캐스트의 마지막 부분에서 자주 듣는 호소.
     * 이 문구는 어느 한 회사가 소유하지 않고, 어느 한 회사가 통제할 수 없으며, 사람들이 자신의 작업과 청중과의 관계를 소유할 수 있게 하는 개방형 기술의 승리를 상징하는 급진적인 선언.

조금 더 자세한 배경

     * 팟캐스팅 기술은 사회적 웹의 초기 시대에서 발전했으며, 기술 창작자들은 다른 창작자들의 도구나 다른 회사들과 상호 운용 가능한 개방 시스템을 만들 것으로 기대됨.
     * 이메일이나 웹 자체와 같은 인터넷의 이전 세대의 성공에 기반하여, 팟캐스팅은 매일 수백만 명이 듣고 무수히 많은 사람들이 창작할 수 있는 마지막 주류 발명품.
     * 로만 마스와 같은 사람들이 놀라운 팟캐스트를 만들거나 애플이나 스포티파이와 같은 거대 기업들이 매체 주변에서 사업을 구축하는 것을 포함하여 비즈니스에 대한 많은 기회 창출.

돈을 따라가다

     * 개방형 기술 시스템의 가치는 종종 그것들이 달러를 빼앗는 생태계에 의해 측정됨.
     * 팟캐스팅의 경제적 가치 일부는 지상파 라디오 방송과 같은 것들에 영향을 미침으로써 생겨났지만, 팟캐스팅의 개방형 포맷은 구글과 페이스북과 같은 회사들을 수조 달러의 가치로 만든 감시 기반 광고를 매우 어렵게 만듦.
     * 팟캐스팅의 개방형 포맷은 구글과 페이스북과 같은 인터넷상의 가장 큰 광고 기반 플랫폼이 팟캐스트에 광고를 구매할 수 없게 함.
     * 개방형 웹이 여전히 번성하고 관련성을 유지할 수 있으며, 비슷하게 개방된 새로운 시스템을 영감을 주어 뿌리내리고 성장할 수 있음을 팟캐스팅의 개방형 포맷이 증명.

   GN⁺의 의견
     * 팟캐스팅의 개방형 포맷은 개인의 창작물과 청중과의 관계를 소유할 수 있는 기술의 중요한 예시임.
     * 이러한 시스템은 큰 기업들조차 한 번 청중을 확보하면 대체할 수 없는 강력한 생태계를 형성함.
     * ""팟캐스트를 찾을 수 있는 곳이라면 어디든""이라는 문구는 개방형 시스템이 현대 기술과 미디어의 세계에서 살아남고 번성할 수 있음을 보여주며, 뉴스나 온라인 친구 찾기에도 동일한 방식을 적용할 수 있는 미래를 제시함.
"
"https://news.hada.io/topic?id=13259","디즈니, 에픽 게임즈에 15억 달러 지분 투자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       디즈니, 에픽 게임즈에 15억 달러 지분 투자

디즈니, 에픽 게임즈에 15억 달러(15B, 약 2조원) 투자 및 새로운 콘텐츠 협력 발표

     * 디즈니가 게임 분야에 대한 가장 큰 투자로 에픽 게임즈에 15억 달러를 투자함.
     * 이번 협력을 통해 디즈니, 픽사, 마블, 스타워즈, 아바타 등의 콘텐츠, 캐릭터, 이야기를 활용한 새로운 게임과 엔터테인먼트 세계를 창조할 예정임.
     * 에픽 게임즈의 평가 가치는 디즈니의 투자 이후 공개되지 않았음.

디즈니와 에픽 게임즈의 전략적 파트너십

     * 디즈니 CEO 밥 아이거는 이번 투자가 게임 공간으로의 가장 큰 진출이라고 언급함.
     * 세대 간 미디어 소비 트렌드를 고려할 때 이번 투자와 협력이 시의적절하고 중요한 단계라고 덧붙임.
     * 디즈니는 이미 마블, 스타워즈 등의 캐릭터를 포트나이트에 도입하는 등 에픽 게임즈와 협력한 경험이 있음.

에픽 게임즈의 주요 파트너십 및 활동

     * 에픽 게임즈는 레고와의 협력을 통해 마인크래프트와 유사한 생존 크래프팅 게임을 포트나이트 내에 출시함.
     * 또한, 록 밴드 게임을 만든 하모닉스와 협력하여 포트나이트 페스티벌이라는 리듬 게임을 출시함.
     * 에픽 게임즈의 창립자 겸 CEO인 팀 스위니는 디즈니와의 새로운 협력을 통해 지속 가능하고 개방적이며 상호 운용 가능한 생태계를 구축할 것이라고 발표함.

에픽 게임즈의 애플 및 구글에 대한 법적 도전

     * 에픽 게임즈는 앱 스토어 수수료를 낮추기 위해 애플과 구글에 법적 도전을 함.
     * 팀 스위니는 계획 단계부터 법정 증언에 이르기까지 두 도전에 직접 관여함.
     * 구글에 대한 승리를 거두었으나, 애플에 대해서는 대부분 패소함.

GN⁺의 의견:

     * 이번 디즈니와 에픽 게임즈의 파트너십은 엔터테인먼트와 게이밍 산업의 경계를 허무는 중요한 사례임. 특히, 다양한 세대가 게임을 통해 미디어를 소비하는 현상을 반영하고 있음.
     * 에픽 게임즈의 포트나이트는 이미 다양한 브랜드와의 협업을 통해 게임 내에서 새로운 마케팅 및 콘텐츠 제공의 장을 마련했으며, 디즈니의 투자는 이러한 협업을 더욱 확장할 잠재력을 가짐.
     * 애플과 구글에 대한 법적 도전은 디지털 시장에서의 경쟁과 혁신에 대한 중요한 논의를 촉발시키며, 이는 소프트웨어 개발자와 소비자 모두에게 중대한 영향을 미칠 수 있는 사안임.

        Hacker News 의견

     * Disney는 13세에서 25세 사이의 젊은 층에게 더 많은 지적 재산(IP)을 선보이고 있음. 이 연령대는 인상이 깊게 남는 시기이며, 평생의 팬을 만들 수 있는 잠재력이 있음. Disney에게는 좋은 가치 제안이 될 수 있음. Epic은 이로 인해 회사 가치가 상승할 가능성이 있으며, 이는 기술 회사에게 생명줄과 같은 것임.
     * 협업 스킨은 수익성이 매우 높음. 그러나 이러한 관계가 Fortnite에 어울리지 않는 협업을 강요하고 게임의 매력을 떨어뜨릴 수 있다는 우려가 있음. Disney는 최근 몇몇 실패작을 내놓기도 함. 장기적으로 Fortnite의 목표는 시간이 지남에 따라 사용자가 줄어드는 대부분의 게임과 달리 역사상 가장 '중독성 있는' 온라인 비디오 게임이 되는 것임. Epic은 Fortnite만이 아니지만, 이 거래는 전적으로 Fortnite에 관한 것으로 보임.
     * 이런 일이 발생할 때마다 슬픔을 느낌. 우리가 경험하는 것들이 더 많은 동일한 규칙, 패턴, 결정들을 따라야 한다는 의미이기 때문임. 일관성이 지배적인 현상이 되고 있음.
     * Epic Games는 가상의 Disney World가 될 잠재력을 가지고 있음. 실제 공원을 방문할 충분한 돈이 있는 사람들 대신 전 세계 모든 사람들이 접근할 수 있음. Disney는 자신들의 IP로 콘텐츠, 장난감, 경험을 이끌어내는 훌륭한 선순환을 가지고 있음. 이것은 그들이 스스로 만들 수 없는 최신 경험임.
     * Fortnite 내에서 Disney IP와 관련된 콘텐츠가 더 많아질 것으로 예상됨; 스킨, 이벤트, 맵 등이 포함될 수 있음. 이는 새로운 영화/TV 쇼를 홍보하는 데 큰 도움이 될 것임. Fortnite는 이미 이런 유형의 것들에서 큰 성공을 거둔 바 있으므로, Disney가 이에 접근하고자 하는 것은 이치에 맞음. 심지어 실제 테마파크에서의 Fortnite 경험이나 Fortnite IP를 기반으로 한 영화나 TV 쇼를 볼 수도 있음.
     * Apple은 Disney에 대해 이상할 정도로 긍정적인 편견을 가지고 있음: watchOS에는 사용자 정의 시계면을 지원하지 않음에도 불구하고 내장된 Disney 시계면이 있음. 이는 상호적인 것으로 보임: Disney는 여러 다른 스트리밍 서비스들이 Apple에 반대하는 동안 Disney+ visionOS 앱을 출시함.
     * Apple의 가장 큰 골칫거리인 회사에 Disney가 투자하는 것은 흥미로운 일임. 분명한 동기는 ""Fortnite의 젊은이들에게 뛰어들고 싶다""는 것이지만, Tim Sweeney의 날들이 얼마 남지 않았을지도 모른다는 생각을 하게 됨.
     * Disney는 Unreal Engine을 사용하여 The Mandalorian 등을 촬영할 때 사용하는 동적 그린스크린 LED 벽을 만듦. 이것은 Fortnite 캐릭터만큼 중요할 수 있음.
     * Disney가 Epic에서 어느 정도의 지분을 가지게 되었는지 보는 것이 흥미로울 것임. 현재 Tencent는 Epic의 40%를, Sony는 또 다른 5%를 소유하고 있음. 마지막으로 평가된 가치가 320억 달러임을 고려하면, Disney가 3-4% 이상의 지분을 가지게 될 것 같지는 않음. 여전히 상당한 지분이지만, 결정을 내릴 만큼 충분하지는 않음.
     * 이는 매우 현명한 움직임임.
     * Unreal 기술은 Disney에서 가상 제작과 실시간 렌더링을 활용한 개발 이후 모든 것을 구동함.
     * 그 위에 Fortnite의 인구층은 성장하고 있으며, 비디오 게임 기반의 IP는 큰 수익을 창출하고 있음 (Sonic, Mario, Last of Us 등).
     * 만약 Bob Iger의 머릿속에서 생각이 돌고 있다면, 비디오 게임 IP가 다음 Marvel/Star Wars가 될 수 있다는 것임.
     * Disney는 이것을 새로운 VR 트레드밀, 그들의 공원과 결합하여 VR Epic Games 경험으로 만들 것임을 예상함.
     * Disney는 다양화하고 있음. 이는 그들의 자회사 ESPN이 Fox와 Warner/Discovery와 함께 새로운 스포츠 스트리밍 서비스를 만들고 있는 것에 이어짐.
     * 이 모든 것을 추적하기 위해서는 Carrie Matheson/Pepe Silva 스타일의 전체 벽 마인드맵이 필요할 것 같음.
"
"https://news.hada.io/topic?id=13173","해커 뉴스 메인 페이지에서 실시간으로 제거된 기사들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      해커 뉴스 메인 페이지에서 실시간으로 제거된 기사들

     * 이 프로젝트의 목적은 Hacker News Front Page의 조정 유형과 규모를 이해하려는 시도임.
     * 프로젝트 개발자는 Hacker News를 매일 읽으며, 사이트의 조정이 어려운 작업임을 이해함.
     * Front Page의 ""공개적인"" 조정은 두 가지 주요 도구로 이루어짐: 스토리 제목 변경과 스토리 직접 제거.
     * 개발자는 Front Page에서 제거된 스토리를 기록하는 작은 애플리케이션을 개발하고 이를 공개함.
     * 이 프로젝트의 긍정적인 결과는 HN 목록에 이와 유사한 목록을 직접 제공하거나, 스토리가 Front Page에서 제재를 받았을 때 사용자에게 알림을 주는 것일 수 있음.

왜?

     * 개발자의 친구가 OnnxStream과 관련된 두 스토리를 Hacker News에 게시함.
     * 첫 번째 스토리는 제목이 변경되어 Front Page에서 사라짐.
     * 두 번째 스토리는 간단히 Front Page에서 제거됨.
     * 개발자는 이 현상의 빈도를 결정하기 위해 작은 콘솔 애플리케이션을 개발함.

작동 방식

     * 공식 HN API를 사용하여 서비스는 매분마다 상위 90개 스토리를 가져와 이전 분에 가져온 상위 30개 스토리와 비교함.
     * 누락된 스토리를 기록하며, 스토리가 Front Page에 다시 나타나면 로그에서 제거됨.
     * 제목과 URL은 스토리가 상위 30위 안에 처음 나타났을 때의 것이며, 포인트와 댓글 수, 순위는 스토리가 Front Page에서 제거될 때의 것임.

GN⁺의 의견

     * 이 프로젝트는 온라인 커뮤니티의 투명성을 높이는 데 기여할 수 있음.
     * 사용자들이 자신의 게시물이 왜 제거되었는지 이해하는 데 도움이 될 수 있음.
     * 프로그래밍 기술을 활용하여 커뮤니티에 긍정적인 영향을 미치는 방법을 보여줌.

        Hacker News 의견

     * 한 해커뉴스 사용자는 삭제된 이야기들의 목록을 보고 모더레이터들에게 매우 만족한다고 언급함. 이들 이야기는 대부분 선정적이거나 광고, 클릭베이트, 주제에서 벗어난 것들이었으며, 삭제되어야 마땅한 것이라고 생각하는 이야기는 단 하나도 없었다고 함.
     * 다른 사용자는 이야기가 한 분 안에 상위 30위에서 90위 이상으로 떨어질 수 없다는 가정에 대해 반박함. 이는 플레임워 감지기(과열된 토론 감지기), 사용자 플래그, 그리고 다른 소프트웨어 메커니즘에 의해 가능하다고 설명함. 또한, 사용자 플래그는 [flagged] 표시가 나타나기 훨씬 전에 제출물의 순위에 영향을 미친다고 함.
     * 한 모더레이터는 해커뉴스의 작동 원리가 충분히 설명되고 방어될 수 있기 때문에 사용자들이 이와 같은 시스템을 구축하는 것에 문제가 없다고 언급함. 그러나 복잡한 시스템은 불가피하게 혼란스러울 수 있으므로, 정확히 이해하고자 한다면 혼란을 견딜 수 있는 높은 내성이 필요하다고 조언함. 또한, 오류를 바로잡는 것이 중요하며, 특정 텍스트의 수정을 요청함.
     * 한 사용자는 HN 사용자들이 LLM(대규모 언어 모델) 관련 뉴스에 지쳐있다는 것을 믿기 어렵다고 언급함. 그러나 다른 사용자는 자신이 지쳐있음을 인정하면서도, 지친 것들을 플래그하지는 않는다고 함.
     * 다른 사용자는 자신이 원하는 뉴스를 찾기 위해 자신의 웹사이트를 만들었다고 언급하며, 다른 사람들에게도 그들이 원하는 것을 구축하고 관리할 것을 권장함. 이 사용자는 해커뉴스가 가장 잘 관리되고 오래 지속된 커뮤니티 중 하나라고 평가함.
     * 한 사용자는 HN 커뮤니티가 LLM 관련 기사에 지쳐있다고 주장하며, 커뮤니티가 스팸으로 여겨질 수 있는 기사를 플래그할 권리가 있다고 언급함.
     * 또 다른 사용자는 HN 사용자들이 LLM 관련 뉴스에 지쳐있을 수 있다는 것을 부정하는 것이 왜 그렇게 어려운지 의문을 제기함. 이 사용자는 자신도 지쳐있지만 플래그 권한이 없다고 언급함.
     * 한 사용자는 이야기가 빠르게 순위가 떨어지는 것이 반드시 모더레이션 때문은 아닐 수 있다고 언급함. 2024년 1월 22일 월요일에 나열된 13개의 이야기 중 3개만이 HN에서 제거된 것으로 보이며, 나머지 10개는 여전히 존재한다고 함. 이 사용자는 HN이 모더레이션을 잘 하고 있다고 생각함.
     * 마지막으로 한 사용자는 HN 사용자들이 LLM 관련 뉴스에 지쳐있을 수 있다는 반응에 대해 낙관적이고 순진한 자신조차 놀랄 일이 아니라고 댓글을 남김.
"
"https://news.hada.io/topic?id=13216","미국 전력 생산량의 2% 이상이 비트코인 채굴에 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 전력 생산량의 2% 이상이 비트코인 채굴에 사용

     * 미국 내 비트코인 채굴로 인한 전력 소비가 급증
     * 에너지 정보청(EIA)의 예비 분석에 따르면 대규모 암호화폐 채굴 작업이 미국 전체 전력의 2% 이상을 소비함
     * 이는 지난 3년 동안 전력 그리드에 하나의 주를 추가한 것과 같은 전력 소비량에 해당

메가와트를 따라가다

     * 대부분의 암호화폐 채굴은 개인 컴퓨터가 아닌 전문화된 하드웨어의 대규모 컬렉션에서 이루어짐
     * 이러한 하드웨어는 개인 컴퓨터에 비해 비싸지만, 주요 비용은 전력 사용이므로 채굴자들은 전기 요금이 낮은 지역으로 이동하는 경향이 있음
     * 중국에서 암호화폐에 대한 단속이 이루어진 후, 많은 채굴 작업이 전력 가격을 낮게 유지하는 것을 정책 우선순위로 삼고 있는 미국으로 이동함
     * 캠브리지 대체 금융센터(Cambridge Centre for Alternative Finance, CCFA) 발표에 의하면 2020년 초 미국은 전 세계 비트코인 ​​채굴량의 3%가 조금 넘는 곳이었는데, 2022년 초에는 그 수치가 거의 38%에 달함
          + CCFA는 모든 비트코인 ​​채굴에 대한 전 세계 전력 사용량을 추정하므로 여기에 미국의 비율을 곱하여 소비한 전력량에 대한 추정치를 산출 가능
          + 추정이 불확실하지만 약 25~91 테라와트시 임. 최소는 유타주의 전력 소비량이며, 최대로 보면 워싱턴의 전력소비량

전력 획득 방법 찾기

     * 채굴 작업은 텍사스와 뉴욕 서부에서 조지아 남부까지 이어지는 애팔래치아 지역에 두 개의 주요 클러스터를 형성함
     * 이 외에도 미국 전역에 흩어져 있지만, 이들이 주요 사이트임
     * EIA는 채굴 작업이 가동되면서 활용도가 낮은 발전소의 생산량이 다시 급증하는 사례를 발견함
     * 이러한 발전소들은 비트코인 채굴자들에게 전력을 공급하기 위해 폐쇄되지 않았을 가능성이 있는 화석 연료 발전소임
     * 채굴자들이 전력 비용을 낮게 유지하기 위해 사용한 여러 가지 전략을 수행
          + 대규모 그리드 연결을 활용하기 위해 텍사스에 있는 예전 알루미늄 제련 시설로 이전
          + 펜실베니아의 원자력 발전소 옆에 시설을 설치하고 발전소와 직접 연결을 설정
          + 그냥 태워졌을 메탄 폐기물을 생성하는 천연가스 필드 근처로 광부들이 이동한 사례도 있음
     * 비트코인 채굴은 필수 활동과 정반대이기 때문에 여러 채굴 작업이 수요 반응(Demand-Response) 프로그램에 등록함
          + 전력 수요가 발전 용량을 초과할 가능성이 있는 경우 작업을 오프라인으로 전환하는데 동의하고 보상을 받는 것
          + 텍사스의 한 시설(전 알루미늄 제련소 부지에 있던 시설 )이 2023년 폭염으로 인해 폐쇄되어 3천만 달러 이상의 수익을 냄
     * EIA는 2024년 상반기 동안 비트코인 ​​운영에 대한 월간 분석을 수행할 예정
          + 하지만 이런 초기 수치만 보더라도 너무 많은 채굴작업이 미국으로 이전되었고, 이는 미국의 전력망을 탄소 중립화하려는 노력을 크게 방해할 것

GN⁺의 의견

     * 비트코인 채굴이 미국의 전력망에 미치는 영향은 상당히 중요한 이슈임. 전력 소비 증가는 환경과 건강 문제뿐만 아니라, 미국의 탄소 중립 목표 달성에도 영향을 미칠 수 있음.
     * 채굴자들이 전력 비용을 절감하기 위해 다양한 전략을 사용하는 것은 흥미로운 점임. 예를 들어, 텍사스의 전 알루미늄 제련 시설이나 펜실베니아의 원자력 발전소 옆에 시설을 설치하는 등의 전략이 있음.
     * EIA가 2024년 상반기 동안 비트코인 채굴 작업에 대한 월별 분석을 수행할 예정이라는 점은 이 분야에 대한 정부의 관심과 규제 가능성을 시사함.

   비트코인 ETF 승인되고 오른다는 글을 봤는데, 전 아직도 비트코인의 사용처를 잘 모르겠..

   계속 모른 채로 계십시오.
   괜찮습니다.

   ""If you don't believe me or don't get it I don't have time to try to convince you sorry.""

   Jul, 29, 2010, Satoshi Nakamoto.

   그렇게 바쁜것 같지 않아보여요....ㅎㅎ

   암호화폐 하는 사람들은 수준이 다 이런건가요?ㅋㅋ

   첨언하자면 비트코인은 단순히 흔히 생각하는 'Cryptocurrency'가 아닙니다. 암호화폐는 쓰레기이고 스캠이지만 비트코인은 혁명이고 인류에게 자유를 부여하는 사토시의 축복입니다.

   비트코인 나온지가 15년이 지났습니다. 당신이 비트코인을 알고 모르고는 전혀 중요한 사실이 아닙니다. 그러건 말건 비트코인은 갈 길을 가는 중입니다. 누구나 본인의 수준에 맞는 가격에서 결국 비트코인을 사게 됩니다.

   계속 모르는 체로 살아도 사용처라는 게 없으니 괜찮다는 뜻이 아닐까요 ㅋㅋㅋ

        Hacker News 의견

     * 비트코인에 대한 에너지 소비 논란에 대해 비트코인 지지자들은 종종 재생 가능 에너지 사용이 많거나, 재생 가능 에너지로의 전환을 촉진한다는 등의 이상한 논리를 사용한다고 한 의견. 이 기술은 경쟁으로 인해 에너지 소비가 증가하는 특성을 가지고 있으며, 심지어 ""녹색"" 에너지를 사용한다 해도 다른 곳에 사용될 수 있는 에너지를 낭비한다는 비판이 있음.
     * 비트코인 채굴자들이 발전소와 도매가격으로 거래한다면 상황이 그렇게 나쁘지 않을 수 있다는 의견. 발전소는 때때로 과잉 전력을 처리해야 하며, 채굴자들은 다른 산업보다 전력 소비를 늘리거나 줄이는 데 더 적합할 수 있음. 미국의 일부 큰 비트코인 운영자들은 수력발전소 근처에 위치해 있으며, 때로는 전력 수요가 부족해 물을 버려야 하는 상황이 발생하며, 이때 도매가격이 음수가 될 수도 있음.
     * 비트코인을 없애자는 비꼬는 의견. ""녹색"" 달러는 서버가 필요 없다고 하지만, 은행, 연방준비제도, 신용카드 처리기관 등이 전기를 사용한다는 점을 지적. 또한 달러가 가치를 가지는 이유는 미국 군대에 의해 뒷받침되기 때문이며, 군대의 전기 사용량도 상당할 것이라는 의견을 제시하며, 비트코인을 없애는 것이 기후 위기를 해결할 것이라는 냉소적인 태도를 보임.
     * 암호화폐 채굴이 에너지의 한계 이용에 미치는 영향에 대한 논의 필요성을 언급. 예를 들어, 텍사스 서부에서 밤에 바람이 불어 도매가격이 음수가 되는 경우와 같이 에너지가 생산적으로 사용되지 않는 시간에 채굴하는 것에 대해서는 문제가 없다는 의견. 그러나 채굴 활동이 차량 충전이나 제조 시설에 전력을 공급할 수 있는 발전 자산과 경쟁할 때는 더 복잡한 문제가 됨.
     * 에너지 사용을 대폭 줄일 수 있는 지분증명(PoS) 암호화폐, 예를 들어 이더리움에 대한 관심이 더 많았으면 좋겠다는 의견. 비트코인에 대한 지나친 집중을 비판함.
     * 비트코인이 효율적인 에너지 생산과 사용을 장려한다는 주장. 예를 들어, 사막에서 생산되는 엄청난 태양 에너지를 경제적으로 활용할 방법을 찾을 때까지 비트코인이 그것을 모두 사용할 것이며, 지리적으로 고립되어 다른 시장이 없는 곳에서도 에너지 생산을 위한 자금을 조달할 것이라는 의견. 사람들이 이 현실을 받아들이지 못하는 것은 상상력 부족과 편견 때문이라는 지적이 있음.
     * 약 40일 후에 예정된 반감기로 인해 채굴자들이 채굴과 에너지 소비를 절반으로 줄일 수 있으며, 이후에도 매 4년마다 반감기가 반복될 것이라는 정보 제공.
     * 채굴 작업이 수익성을 유지하기 위해 충분히 저렴한 에너지를 어떻게 확보하는지, 필요한 곳에 세금이 부과되지 않는 이유, 발전소에서 과잉 에너지가 생산될 때의 상황, 때때로 전기가 음수 가격으로 판매되는 이유에 대한 의문 제기. 에너지 소비 대비 거래에 대한 논쟁이 나올 때마다 흥미롭다고 말하며, 자신의 견해에 대해 다른 사람이 의견을 바꿀 수 있는지 궁금해하는 태도를 보임.
     * 채굴 작업이 24시간 내내 전력을 가득 사용한다고 가정하는 것은 확실하지 않으며, 지역 발전소 출력의 증가와 비트코인 채굴 센터의 성장을 연결하려는 시도가 있지만, 많은 혼란 요소가 있다는 의견. 기술 회사들이 에너지와 배출 특성에 대한 최고의 데이터를 비밀로 유지하고 있어 문제가 복잡해진다고 지적함. 에너지 부문에서 데이터 수집 방법을 전체 부문에 걸쳐 일관되게 적용하는 것이 중요하며, 이는 에너지 입력/비용 추정치가 특정 의제에 의해 왜곡될 수 있는 일반적인 문제임. 비트코인 채굴자, 고주파 거래자, 산업 제조 센터, 가정 등의 에너지 사용 추정치를 비교하고, 다양한 출처에서 동일한 방법으로 얻은 추정치의 합이 생산량의 100% 이하인지 확인해야 한다는 의견 제시.
     * 자금 세탁 사업의 규모가 상상했던 것보다 크다는 놀라움을 표현하는 의견.
"
"https://news.hada.io/topic?id=13239",""Better Call GPT: 변호사와 대조되는 대형 언어 모델 비교 [PDF]"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ""Better Call GPT: 변호사와 대조되는 대형 언어 모델 비교 [PDF]""
"
"https://news.hada.io/topic?id=13214","넷플릭스: 불법 복제는 경쟁하기 어렵고 빠르게 성장하고 있습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  넷플릭스: 불법 복제는 경쟁하기 어렵고 빠르게 성장하고 있습니다

온라인 해적과의 전쟁에서 넷플릭스의 입장

     * ACE와 MPA의 일원인 넷플릭스는 온라인 해적과의 전 세계적인 전투에 앞장서고 있음.
     * 회사는 종종 직접적으로 해적 문제를 언급하지 않지만, 최근 SEC 제출 자료에서 무료 엔터테인먼트를 제공하는 해적과 경쟁하는 것이 어렵다고 언급함.
     * 또한 해적 행위가 빠르게 성장하고 있다고 함.

넷플릭스의 해적과의 경쟁

     * 온라인 스트리밍 서비스를 시작한 지 15년이 지난 넷플릭스는 해적 사이트로부터 시장 점유율을 빼앗기 위해 합법적이고 편리한 스트리밍 플랫폼을 제공하는 것을 목표로 함.
     * 초기에는 이 전략이 효과적이었으며, 수백만 명의 구독자를 확보하고 일부는 해적 행위를 뒤로한 채 넷플릭스를 이용함.
     * 그러나 '스트리밍 전쟁'이 벌어지면서 합법적이고 편리한 스트리밍 플랫폼이 고립되고 비싼 콘텐츠 저장소로 변하면서 상황이 변화하기 시작함.

해적 행위의 성장과 중단의 어려움

     * 넷플릭스가 출시될 당시에는 대부분의 해적 사이트보다 편리한 온디맨드 스트리밍 경험을 제공함.
     * 당시 토렌트 사이트가 주도적이었지만, 사용자들은 기술적 지식이 필요하고 콘텐츠 다운로드를 기다려야 했음.
     * 오늘날 대부분의 해적 사이트는 온디맨드 스트리밍을 사용하여 넷플릭스의 주요 이점을 없애버림.
     * 소비자에게 매력적인 해적 행위는 전 세계적으로 빠르게 성장하고 있으며, 합법적인 서비스를 위협함.

(비)공인 복제?

     * 넷플릭스가 표현한 우려는 현실적이지만, 회사가 몰락할 위기는 아님.
     * SEC에 제출된 10-K 자료는 불법복제를 여러번 강조했는데 이는 위험 요소를 상세히 설명하기 위한 것이며, 넷플릭스만이 해적 행위를 잠재적 위협으로 언급하는 것은 아님.
     * 넷플릭스 경쟁사들도 비슷한 우려를 표현하고 있으며, 심지어 일부는 동일한 문구를 사용하고 있음.
     * 넷플릭스는 몇 년 전 MPA에 가입했으며, 해적 행위 대응 연합 ACE의 일원이기도 함.
     * 또한, 넷플릭스는 내부적으로 해적 행위 위협을 감시하는 반해적 부서를 운영하고 있음.

GN⁺의 의견

     * 넷플릭스는 온라인 해적 행위와의 전투에서 중요한 위치에 있으며, 이는 스트리밍 서비스 제공자들이 직면한 현실적인 도전 중 하나임.
     * 해적 사이트의 성장은 합법적인 스트리밍 서비스의 발전에 영향을 미칠 수 있으며, 이는 콘텐츠 제공 방식과 소비자 행동에 중대한 변화를 가져올 수 있음.
     * 넷플릭스의 반해적 노력과 이와 유사한 문제를 공유하는 다른 회사들의 대응은 콘텐츠 산업의 지속 가능성을 위한 중요한 논의 주제임.

   한때 콘텐츠 서비스를 했던 입장이라 많이 공감하는 글인데요.

   몇년전 까지만해도 유료 콘텐츠 회사의 최고의 전략은 더 쉽고 편한 플랫폼이었습니다.
   웹하드/토렌트가 매우 불편했기 때문에 이보다 더 편한 유료 플랫폼을 만들면 사용자가 선택했어요.
   하지만 요즘은 불법사이트도 다운로드 없이 그냥 볼수 있게 스트리밍되고, 여러 유료사이트를 한번에 접근할수 있게 되면서 더 편해지니까 다시 또 불법과 경쟁하기가 어려워 졌습니다.

   국내 콘텐츠 중에서 요즘 해외로 잘 수출되는 웹툰의 경우 불법복제가 더욱 쉬운 상황이라 총체적으로 대응하지 못하면 더 힘들어질거라고 봅니다.

        Hacker News 의견

     * 스트리밍 서비스의 인기
          + 스트리밍이 인기를 얻은 이유는 해적판보다 쉽고 TV보다 나은 점(어디서나 시청 가능, 요구에 따른 시청, 중단한 부분부터 이어보기 등) 때문.
          + 현재 스트리밍은 해적판보다 쉽지 않음. 여러 서비스에 대한 비용 지불과 어떤 콘텐츠가 어디에 있는지 파악하는 시간 낭비 대신, 불법이지만 모든 콘텐츠를 한 곳에서 무료로 이용할 수 있는 서비스가 존재.
     * 해적판의 위협
          + 해적판은 소비자에게 매우 매력적인 제안을 함: 거의 모든 콘텐츠를 무료로 제공.
          + ""무료""보다는 ""모든 콘텐츠""를 제공하는 것이 해적판의 승리 요인.
          + 특히 미국 외 지역에서는 특정 콘텐츠를 어떤 가격에도 이용할 수 없는 경우가 많음. 이용 가능하더라도 여러 혼란스러운 서비스에 분산되어 있음.
          + 해적판의 핵심 기능은 무료라기보다는 잘 작동한다는 점.
     * 넷플릭스의 문제점
          + 넷플릭스의 첫 페이지에 B급 콘텐츠가 A급 콘텐츠보다 많고, 이전보다 더 많은 비용이 듬.
          + 과거에 투자한 콘텐츠의 양이 발견하기 어려움, 장르 검색은 인터페이스에서 거의 노출되지 않음.
          + 카테고리 선택 링크를 찾기 위해 제3자 사이트에 의존해야 함.
          + 관심 없는 콘텐츠를 제외하는 기능이 없음. 앱을 실행할 때마다 관심 없는 콘텐츠가 중앙에 표시되는 것이 불만.
          + 2차 세계대전 영화를 두 편 봤다고 해서 추천 섹션에서 그것만 관심 있다는 의미는 아님.
          + 가격 정책이 유연하지 않음. 자주 사용하지 않는 4K UHD 스트리밍을 원하는데, 마치 24/7 스트리밍하는 것처럼 4개의 스트림 비용을 지불해야 함.
     * 넷플릭스 가입 전 정보 부족
          + 가입 전에 넷플릭스에서 제공하는 콘텐츠 목록을 제공하지 않음.
          + 웹사이트는 ""돈을 내라""고 말하는 랜딩 페이지와 같음. 가격조차 표시되지 않음.
          + 몇 개의 스크린샷으로 표시된 주요/잘 알려진 타이틀을 제외하고는 서비스 구매 전에 기대할 수 있는 최소한의 카탈로그도 없음.
     * 스팀과 스트리밍 서비스 비교
          + 스팀이 게임 구매를 해적판보다 안전하고 편리하게 만들어 게임 해적판을 중단함.
          + 넷플릭스로 인해 소액의 월정액으로 대부분의 원하는 콘텐츠를 시청할 수 있었음.
          + 이제 10개의 다른 스트리밍 구독이 필요하고 가격이 계속 오르며, 독일어 더빙만 제공되는 경우가 많고, 비디오/오디오 품질이 떨어지며, 오리지널 콘텐츠가 갑자기 중단되고, 앱 사용성이 나쁘며, 광고가 강제되고, 한 번에 전체 시즌을 공개하지 않으며, 오프라인 시청이 제대로 작동하지 않음.
     * 넷플릭스의 고객 서비스 문제
          + 넷플릭스 고객 서비스와의 대화에서, 병원에 입원한 아이가 집에 없다는 이유로 계정을 매 2주마다 재인증하거나 추가 비용을 지불하라는 요구에 직면함.
          + 넷플릭스가 DVD 대여 서비스였을 때부터 이용했지만, 이제는 가장 인기 있는 계획인 '취소'를 고려하게 됨.
     * 금융 포렌식 전문가의 발견
          + 여러 회사의 SEC 보고서에 동일한 문구가 포함되어 있음을 발견한 금융 포렌식 전문가의 능력에 대한 칭찬.
     * 스트리밍 모델의 문제점
          + 디즈니+가 세금 감면을 위해 콘텐츠를 제거하는 등 스트리밍 모델에 대한 비판.
     * 스트리밍 서비스의 다양성과 비용
          + 넷플릭스, 아마존 프라임, 디즈니+, HBO+, 훌루, 유튜브 프리미엄, 애플 TV 등 다양한 스트리밍 서비스와 음악 스트리밍 서비스의 존재.
          + 경쟁은 좋지만, 원하는 것을 볼 수 있는 능력이 너무 어렵고 비용이 많이 듬.
          + 콘텐츠 중복, 독점 콘텐츠, 대량의 콘텐츠가 무분별하게 제공되는 문제.
     * 스트리밍 서비스의 통합 필요성
          + 각 권리 보유자가 자신의 서비스를 가지고 있어 편리함이 사라짐.
          + 넷플릭스를 제외한 대부분의 서비스가 다양한 플랫폼을 지원해야 하기 때문에 소프트웨어 품질이 떨어짐.
          + 비디오 재생과 탐색이 버그가 많고 느림, 콘텐츠를 찾는 GUI가 느림.
"
"https://news.hada.io/topic?id=13215","마이크로서비스 설계 패턴 5가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           마이크로서비스 설계 패턴 5가지

     * API 게이트웨이 패턴, 서비스별 데이터베이스(DB) 패턴, 서킷 브레이커 패턴, 이벤트 기반 패턴, 사가 패턴
     * API 게이트웨이 패턴
          + API 게이트웨이는 모든 클라이언트 요청의 단일 진입 지점으로 역할을 함
          + 이는 요청을 적절한 마이크로서비스에 라우팅하고, 나중에 응답을 집계함
     * 서비스별 DB 패턴
          + 각 마이크로서비스에 자체 DB가 있음
          + 이로써 느슨한 결합도와 높은 응집도를 보장함
          + 이는 각 마이크로서비스가 요구사항에 가장 부합하는 DB 유형을 사용하도록 지원함
     * 서킷 브레이커 패턴
          + 네트워크 또는 서비스 장애가 다른 서비스에 전파되는 걸 막을 수 있음
     * 이벤트 기반 패턴
          + 서비스 상태가 변경될 때, 서비스는 이벤트를 게시함
          + 다른 서비스는 이러한 이벤트를 구독하고, 그에 맞춰 상태를 업데이트함
          + 이런 식으로 각 서비스는 실시간 소통할 필요 없이 일관성을 유지할 수 있음
     * 사가 패턴
          + 여러 서비스를 아우르는 비즈니스 트랜잭션 구현의 어려움을 해결하는 데 도움이 됨
          + 사가는 로컬 트랜잭션의 시퀀스로, 각 트랜잭션은 단일 서비스 안에서 데이터를 업데이트합함
          + 로컬 트랜잭션이 실패하면 사가는 보상 트랜잭션을 실행해 이전 트랜잭션 영향을 취소함
"
"https://news.hada.io/topic?id=13242","명령줄 인터페이스 가이드라인 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         명령줄 인터페이스 가이드라인 (2021)

인사말

     * 인간 중심의 디자인과 간단한 부품들이 함께 작동하는 것의 중요성.
     * 프로그램 간 일관성과 충분한 정보 제공의 필요성.
     * 발견의 용이성과 대화형 인터페이스의 표준화.
     * 견고함과 공감 능력의 중요성.
     * 혼돈을 인정하고 지침을 제공하는 것의 가치.

철학

     * 사용자 중심의 디자인과 간단한 부품들이 함께 작동하는 것을 강조.
     * 프로그램 간 일관성 유지와 필요한 정보만 제공하는 것의 중요성.
     * 사용자가 쉽게 기능을 발견할 수 있도록 하는 것과 대화형 인터페이스의 중요성.
     * 견고함과 사용자에 대한 공감을 강조하며, 혼돈 속에서도 지침을 제공.

지침

     * 기본적인 규칙을 따르는 것의 중요성.
     * 도움말, 문서화, 출력, 오류, 인자 및 플래그, 상호작용, 하위 명령어, 견고함, 미래 지향적 설계, 신호 및 제어 문자, 구성, 환경 변수, 명명, 배포, 분석 등에 대한 구체적인 지침 제공.

GN⁺의 의견

     * 이 가이드는 커맨드 라인 인터페이스(CLI)를 사용하는 소프트웨어 개발자들에게 매우 유용함. 사용자 친화적인 CLI를 만드는 데 필요한 철학과 구체적인 지침을 제공하기 때문.
     * CLI는 여전히 개발자들에게 강력한 도구이며, 이 가이드는 그러한 도구를 더욱 효과적으로 사용할 수 있도록 돕는다.
     * 이 문서는 CLI의 미래 지향적인 설계를 위한 중요한 자료로, 개발자들이 사용자 경험을 향상시키고, 견고하며, 확장 가능한 프로그램을 만드는 데 기여할 것임.

        Hacker News 의견

     *

     현재 많은 사람들이 커맨드 라인이 무엇인지 모르며, 왜 그것을 사용해야 하는지에 대해서도 관심이 없음.
          + 1980년대에도 이러한 상황은 마찬가지였지만, 현재는 그 어느 때보다 커맨드 라인을 아는 사람들이 많아졌음. CLI(커맨드 라인 인터페이스)의 황금기라고 할 수 있음.
     *

     스크립트에서는 서브커맨드의 임의 축약을 허용하지 말 것. 예를 들어, mycmd install 대신 mycmd ins 또는 mycmd i를 허용하면, i로 시작하는 새로운 커맨드를 추가할 수 없게 됨.
          + 스크립트에서 짧은 인자 사용을 피해야 함. 짧은 인자는 사람이 사용할 때 타이핑을 줄이기 위한 편의성을 제공하지만, 스크립트에서는 명시적으로 작성하는 것이 비용이 적고, 읽기와 쓰기 비율을 고려할 때 더 바람직함.
     *

     --dry-run 옵션을 고려해볼 것. 실제 변경을 하지 않고 어떤 작업이 수행될지 미리 보여주는 기능은 도구를 배우고 복잡한 옵션을 올바르게 설정했는지 확인하는 데 매우 유용함.
     *

     stdout이 대화형 터미널이 아닌 경우, 애니메이션을 표시하지 말 것. 이는 CI 로그 출력에서 진행 상황 바가 크리스마스트리처럼 변하는 것을 방지함.
          + stdout에서는 절대 애니메이션을 표시하지 말 것. stderr는 로깅, 정보 제공 등을 위한 것이며, stdout은 tty 여부와 관계없이 유용한 출력을 제공해야 함.
     *

     심볼과 이모지는 명확성을 높일 때만 사용할 것.
          + 심볼과 이모지는 터미널 간에 렌더링이 일관되지 않을 수 있으며, 사용자의 취향에 따라 호불호가 갈릴 수 있으므로 매우 신중하게 사용해야 함.
     *

     현재 Unix 커맨드 라인은 한편으로는 ""놀라울 정도로 유용""하고 다른 한편으로는 ""설계상의 결함""이 있음.
          + Unix 커맨드 라인이 유용한 이유는 C나 Rust로 같은 작업을 수행하는 데 걸리는 시간을 생각해보면 알 수 있음.
          + 설계상의 결함은 커맨드 라인 인터페이스가 동시에 인간과 기계가 읽을 수 있어야 한다는 점에서 비롯됨. 이 문제를 해결하는 정석적인 방법은 없음.
     *

     CLI가 매우 크고 중첩이 필요한 경우(예: aws)를 제외하고, 대부분의 앱은 모든 옵션을 도움말에 출력하고 사용자가 less를 사용하여 필요한 내용을 찾게 하는 것을 선호함.
     *

     전통적으로 UNIX 명령어는 다른 프로그램에 의해 주로 사용될 것이라고 가정하에 작성됨.
          + 실제로는 대화형 로그인 쉘 내에서 상호작용적으로 사용되기 위해 의도되었음. 출력을 생성하는 프로그램과 ""조용한"" 텍스트 필터로 나뉘며, 복잡한 프로그램은 C로 작성됨.
     *

     환경 변수에서 비밀번호를 읽지 말 것.
          + 비밀번호는 크리덴셜 파일, 파이프, AF_UNIX 소켓, 비밀 관리 서비스 또는 다른 IPC 메커니즘을 통해서만 받아야 함.
     *

     CLI 가이드라인에 대한 가장 포괄적인 책은 Eric Raymond의 저서임.
          + 오랜 시간이 지났지만, clig.dev를 훑어보니 시간이 지남에 따라 의견이 많이 변화했음을 알 수 있음.
"
"https://news.hada.io/topic?id=13204","Apple이 iCloud에 수십억 개의 데이터베이스를 저장할 수 있게 구축한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Apple이 iCloud에 수십억 개의 데이터베이스를 저장할 수 있게 구축한 방법

     * Apple은 iCloud와 CloudKit을 위해 Cassandra와 FoundationDB를 사용함
     * 이들 데이터베이스는 극단적인 멀티테넌시 아키텍처에서 수십억 개의 데이터베이스를 저장

시대를 초월한 실제 세계의 교훈

     * Meta와 Apple 모두 사용자 기능을 원활하게 하기 위해 비동기 처리를 사용
     * 두 회사 모두 상태 비저장(stateless) 아키텍처를 사용하여 확장성 문제를 해결
     * 자원을 논리적으로 격리하여 신뢰성과 가용성을 확보
     * 다양한 요구 사항을 단순하게 처리
     * 개발자 경험을 개선하기 위해 추상화 계층을 구축
     * 사용자를 알고 각 계층, API, 디자인을 결정

Cassandra

     * Cassandra는 광범위한 컬럼 기반의 NoSQL 데이터베이스 관리 시스템임
     * 원래 Facebook에서 Facebook 인박스 검색 기능을 위해 개발됨
          + 흥미롭게도 Meta 자체는 Cassandra 사용의 대부분을 ZippyDB ZippyDB로 대체
     * iCloud는 부분적으로 Cassandra를 사용하며, Apple은 세계에서 가장 큰 Cassandra 배포 중 하나를 운영
          + 30만개가 넘는 인스턴스/노드
          + 수백 페타바이트의 데이터
          + 클러스터당 2페타바이스 이상
          + 초당 수백만개의 쿼리
          + 수천개의 애플리케이션
     * Cassandra는 Apple에서 여전히 활발히 개선되고 있음
     * 그러나 CloudKit + Cassandra는 확장성 제한에 부딪혀 FoundationDB를 채택함

FoundationDB

     * Apple은 FoundationDB를 공개적으로 사용하며 2015년에 인수
     * FoundationDB는 대규모 데이터를 처리하도록 설계된 오픈 소스 분산 트랜잭션 키-값 저장소
          + 읽기/쓰기 워크로드와 쓰기가 많은 워크로드 모두에 적합
     * Apple은 CloudKit에 FoundationDB Record Layer를 광범위하게 사용
     * FoundationDB 레코드 레이어는 구조화된 데이터 저장을 위한 자바 API를 제공
     * 레코드 레이어는 극단적인 멀티테넌시를 지원

FoundationDB에 레코드 레이어 사용 이유

     * FoundationDB는 분산 시스템과 동시성 제어 작업을 처리함.
     * 레코드 레이어는 FoundationDB를 사용하기 쉽게 만드는 관계형 데이터베이스 역할을 함.
     * CloudKit은 가장 상위 계층에 있으며 애플리케이션 개발자를 위한 기능과 API를 제공함.
     * 레코드 레이어를 통해 Apple은 대규모 멀티테넌시를 지원
          + 각 애플리케이션의 각 사용자에게 독립적인 레코드 저장소를 제공하는 극단적인 멀티테넌시에 사용
          + 수천 개의 스키마를 공유하는 수십억 개의 독립적인 데이터베이스를 호스팅

CloudKit이 FoundationDB와 레코드 레이어를 사용하는 방법

     * CloudKit에서 애플리케이션은 정의된 스키마를 따르는 '논리적 컨테이너'로 표현됨
          + 이 스키마는 효율적인 데이터 검색 및 쿼리를 위해 필요한 레코드 유형, 필드 및 인덱스를 간략하게 설명
          + 애플리케이션은 CloudKit 내에서 데이터를 '영역'으로 구성하여 클라이언트 장치와 선택적으로 동기화할 수 있도록 레코드를 논리적으로 그룹화 가능
     * 각 사용자에게는 FoundationDB 내에서 고유한 서브스페이스가 지정되며, 사용자가 상호 작용하는 각 애플리케이션에 대한 레코드 저장소가 생성됨
          + 기본적으로 CloudKit은 사용자 수에 애플리케이션 수를 곱한 수만큼의 방대한 수의 논리적 데이터베이스를 관리
          + 각 데이터베이스에는 자체 레코드, 인덱스, 메타데이터 세트가 포함되어 수십억 개의 데이터베이스에 달합
     * CloudKit은 클라이언트 기기에서 요청을 받으면 로드 밸런싱을 통해 이 요청을 사용 가능한 CloudKit 서비스 프로세스로 전달
          + 프로세스는 특정 레코드 레이어 레코드 저장소와 상호 작용하여 요청을 처리
     * CloudKit은 정의된 애플리케이션 스키마를 별도의 메타데이터 스토어에 저장되는 레코드 레이어 내의 메타데이터 정의로 변환
          + 이 메타데이터는 레코드 생성, 수정 시간 및 레코드가 저장된 영역을 추적하는 CloudKit 전용 시스템 필드에 의해 보강
          + 각 영역 내의 레코드에 효율적으로 액세스할 수 있도록 영역 이름 앞에 기본 키가 접두사로 붙음
          + 사용자가 정의한 인덱스와 함께, CloudKit은 레코드의 유형별 크기를 추적하는 인덱스를 유지하여 스토리지 할당량 관리와 같은 내부 용도로 '시스템 인덱스'도 관리

FoundationDB와 레코드 레이어를 함께 사용하면 Cassandra만으로는 해결할 수 없던 Apple의 4가지 주요 문제를 해결할 수 있음

  1. 개인화된 전체 텍스트 검색 문제 해결

     * FoundationDB는 사용자가 자신의 데이터에 빠르게 액세스할 수 있도록 개인화된 전체 텍스트 검색을 지원
     * FoundationDB의 키 순서를 활용하여 텍스트 시작 부분(접두사 매칭)을 빠르게 검색할 수 있을 뿐만 아니라, 추가 오버헤드 없이도 더 복잡한 검색(근접 검색 및 구문 검색과 같이 서로 가깝거나 특정 순서에 있는 단어 찾기 등)을 수행할 수 있음
     * 기존 검색 시스템에서는 검색 색인을 최신 상태로 유지하기 위해 백그라운드에서 추가 프로세스를 실행해야 하는 경우가 많지만, Apple의 시스템은 모든 작업을 실시간으로 처리하므로 데이터가 변경되는 즉시 검색 색인이 즉시 업데이트되므로 추가 단계가 필요하지 않음

  2. 고동시성 영역 문제 해결

     * CloudKit은 FoundationDB를 사용하여 동시에 발생하는 많은 업데이트를 원활하게 처리
     * 이전에는 Cassandra를 사용하면서 CloudKit은 각 영역의 변경 사항을 추적하는 특수 인덱스에 의존하여 여러 기기에서 데이터를 동기화
          + 디바이스가 데이터를 업데이트해야 할 때 이 인덱스를 확인하여 새로운 내용을 확인
          + 하지만 여러 업데이트가 동시에 발생할 경우 충돌이 발생할 수 있다는 단점이 있었음
     * FoundationDB를 사용하면 CloudKit은 충돌을 일으키지 않고 각 변경의 정확한 순서를 추적하는 특수한 종류의 인덱스를 사용
          + 이는 모든 변경 사항에 고유한 '버전'을 할당하여 수행되며, CloudKit은 동기화가 필요할 때 이러한 버전을 확인하여 장치가 놓친 업데이트가 무엇인지 파악
     * 부하를 보다 균등하게 분산하기 위해 CloudKit이 여러 스토리지 클러스터 간에 데이터를 이동해야 하는 경우, 각 클러스터의 버전 번호가 일치하지 않기 때문에 상황이 까다로워짐
          + 이 문제를 해결하기 위해 CloudKit은 각 사용자의 데이터에 '이동 횟수'('incarnation/화신'이라고 함)를 부여하며, 이는 데이터가 새 클러스터로 전송될 때마다 증가
          + 각 레코드 업데이트에는 사용자의 현재 '화신' 번호가 포함되므로, 이동 후에도 CloudKit은 화신과 버전 번호를 모두 확인하여 올바른 업데이트 순서를 파악할 수 있음
     * 새로운 시스템으로 전환했을 때 CloudKit은 이러한 버전 번호가 없는 이전 데이터를 처리해야 하는 문제에 직면
          + 하지만 이전 시스템을 사용한 이전 업데이트를 새 시스템보다 먼저 정렬하는 특수 기능을 사용하여 이 문제를 현명하게 극복
          + 덕분에 앱을 복잡하게 변경하거나 오래된 코드를 남기지 않아도 되었음
          + 올바른 기록 순서를 유지하기 위해 화신, 버전 및 이전 업데이트 카운터 값을 고려

  3. 고지연성 쿼리 문제 해결

     * FoundationDB는 낮은 지연 시간이 아닌 높은 동시성을 위해 설계. 즉, 개별 작업의 속도에 집중하기보다는 동시에 많은 작업을 처리할 수 있음
     * 이러한 설계를 최대한 활용하기 위해 레코드 레이어는 많은 작업을 '비동기적으로' 수행
          + 향후 완료할 작업을 대기열에 올려두고 그 사이에 다른 작업을 수행할 수 있도록 함
          + 이 접근 방식은 이러한 작업 중에 발생할 수 있는 지연을 커버하는 데 도움이 됨
     * 그러나 FoundationDB가 데이터베이스와 통신하는 데 사용하는 도구는 네트워킹을 위해 단일 스레드를 사용하여 한 번에 한 가지 작업을 수행하도록 설계
          + 이전 버전에서는 이 설정으로 인해 모든 작업이 이 네트워크 스레드에서 차례를 기다리고 있었기 때문에 시스템에서 트래픽 정체가 발생
          + 레코드 레이어는 이 단일 스레드 접근 방식을 사용하고 있었기 때문에 병목 현상이 발생함
     * 이를 개선하기 위해 Apple은 이 네트워크 스레드의 작업 부하를 줄임
          + 이제 시스템이 대기열을 형성하지 않고 동시에 여러 측면에서 데이터베이스와 작업하기 때문에 복잡한 작업이 더 빨라짐
          + 이렇게 하면 시스템이 다른 작업을 시작하기 전에 한 작업이 완료될 때까지 기다리지 않기 때문에 지연 시간 또는 겉으로 드러나는 느림이 숨겨짐

  4. 충돌하는 트랜잭션 문제 해결

     * FoundationDB에서는 한 트랜잭션이 특정 키를 읽는 동시에 다른 트랜잭션이 동일한 키를 수정하는 경우 '트랜잭션 충돌'이 발생
          + FoundationDB는 읽기 또는 쓰기 시 이러한 충돌을 일으킬 수 있는 키 집합에 대한 제어 기능을 제공하여 이러한 충돌을 정밀하게 관리할 수 있음
     * 불필요한 충돌을 피하는 일반적인 방법은 충돌을 일으키지 않는 특수한 종류의 읽기, 즉 '스냅샷' 읽기를 다양한 키에 대해 수행하는 것
          + 이 읽기에서 중요한 키를 발견하면 트랜잭션은 전체 범위가 아니라 잠재적 충돌이 있는 특정 키에만 플래그를 지정
          + 이렇게 하면 트랜잭션이 실제로 결과에 중요한 변경 사항의 영향만 받도록 할 수 있음
     * 레코드 레이어는 이 전략을 사용하여 순위 인덱스 시스템의 일부인 건너뛰기 목록이라는 구조를 효율적으로 관리
          + 그러나 이러한 충돌 범위를 수동으로 설정하는 것은 까다로울 수 있으며, 특히 애플리케이션의 주요 로직과 혼합되어 있는 경우 식별하기 어려운 버그로 이어질 수 있음
          + 따라서 FoundationDB를 기반으로 구축된 시스템에서는 이러한 패턴을 처리하기 위해 사용자 정의 인덱스와 같은 상위 수준의 도구를 만드는 것이 좋음
          + 이 접근 방식은 충돌 규칙을 완화하는 책임을 각 클라이언트 애플리케이션에 맡겨 실수와 불일치를 초래할 수 있는 상황을 방지하는 데 도움이 됨

  Hacker News 의견

     * 한 해커뉴스 사용자는 애플에서 일할 때 데이터베이스와 파일 시스템 간의 차이점에 대한 통찰을 공유함. 데이터베이스와 파일 시스템이 근본적으로 같은 기능을 하며, 특정 문제를 해결하기 위한 최적화라고 언급함. 예를 들어, iCloud는 데이터베이스를 기반으로 파일 시스템을 정의하는 방법을 보여줌. 이 사용자는 비디오 저장을 위해 Cassandra를 사용한 경험을 공유함.
     * 또 다른 사용자는 이전 회사에서 FoundationDB와 RecordLayer를 사용하여 트랜잭셔널 카탈로그 시스템을 구축한 경험을 언급함. 이 시스템은 매우 효과적이었으며, gRPC와 Protobuf를 사용하는 것이 자연스러웠음. 그러나 FoundationDB를 대규모로 운영하기 위한 진입 장벽이 높다는 단점을 지적함.
     * 한 사용자는 Apple Notes의 동기화 기능이 마크다운 기반 노트 애플리케이션보다 충돌을 잘 처리한다고 평가함. 이로 인해 결국 Apple Notes로 이동했다고 언급함.
     * FoundationDB에 관한 이전 게시물들이 언급됨. 이는 FoundationDB의 분산 키-값 저장소, 레코드 레이어, 애플의 인수, 그리고 FoundationDB의 작동 원리와 특징에 대한 링크를 포함함.
     * 클라우드 기반 저장소와 협업으로 점진적으로 이동하는 네이티브 데스크톱 소프트웨어의 아키텍처에 대한 흥미로운 점이 언급됨. 스키마 변경과 버전 마이그레이션을 잘 처리하는 것이 중요하며, 이는 관리자 개입 없이 대규모로 발생함.
     * 한 사용자는 iCloud가 Time Machine 백업을 저장할 수 있기를 바람.
     * FoundationDB가 SQLite를 기반으로 하고 있기 때문에, HCTree 엔진이 FoundationDB에 적용될 가능성에 대한 궁금증이 제기됨. HCTree는 SQLite의 읽기/쓰기 성능을 10배 향상시킬 수 있는 잠재력을 가지고 있음.
     * iCloud가 사용자의 파일을 어떻게 관리하는지에 대한 불만이 있음. iCloud가 최근에 사용한 파일, 앱, 사진을 자동으로 클라우드로 옮겨 공간을 확보하는 것이 문제가 될 때가 있음.
     * 한 사용자는 과거 은행에서 일할 때 사용했던 Hyperion이라는 보고 시스템에 대해 회상함. 이 시스템은 각 보고서마다 새로운 데이터베이스를 생성했으며, 당시에는 이상하게 여겨졌지만, 지금 생각해보면 시대를 앞서가는 방식이었음을 언급함.
"
"https://news.hada.io/topic?id=13221","2023년의 Deno년의 Deno

Deno의 2023년 변화

     * Deno는 package.json 파일을 이해하며, node:fs와 node:crypto 같은 내장 Node 모듈을 node: 지정자를 사용하여 가져올 수 있게 됨.
     * 새로운 웹 서버 API Deno.serve가 안정화되었고, HTTP 처리량이 연간 약 73% 향상됨.
     * deno compile 은 워커, 동적 임포트, npm 모듈을 지원하게 됨.
     * Deno는 웹 스트림(ReadableStream과 WriteableStream)과 AbortController를 API 전반에 더 잘 활용하여 브라우저와 서버 측 프로그래밍 간의 격차를 좁힘.
     * Deno의 설정 파일 deno.json은 이제 가져오기 맵으로도 사용되며, 스키마를 단순화하고, 글로브 지원 및 유용한 최상위 ""exclude"" 속성을 추가함.
     * 오픈 소스 노트북 도구인 Jupyter가 JavaScript와 TypeScript를 사용하여 Deno를 지원하게 됨.
     * WebGPU가 거의 1년간의 개발 끝에 Deno에 추가됨.
     * Deno의 제로 설정 TypeScript는 LSP와 VS Code 통합의 상당한 개선을 통해 편집기 통합이 더 나아짐.
     * Deno 기반 웹 프레임워크인 Fresh는 Tailwind 지원, Partials, 레이아웃 파일 등 기능이 확장됨.
     * Deno Deploy는 Deno KV, Queues, Cron과 같은 전 세계적으로 분산된 기본 요소로 더 강력해짐.
     * 플랫폼이 신뢰할 수 없는 다중 테넌트 JavaScript를 배포하고 실행할 수 있도록 자체 서비스 서브호스팅을 출시함.

Node 및 npm과의 호환성 향상

     * Deno는 node: 지정자를 통해 node:fs, node:child_process와 같은 내장 Node 모듈을 포함하여 Node 생태계와의 호환성을 확장함.
     * Node에서 Deno로의 원활한 전환을 위해 여러 새로운 기능을 도입함:
          + --unstable-byonm 플래그를 사용하면 선호하는 npm 패키지 관리자를 Deno 내에서 사용할 수 있음.
          + --unstable-sloppy-imports 플래그는 모듈 가져오기의 엄격함을 완화하여 다양한 코딩 스타일과 관행을 수용함.
          + --unstable-unsafe-proto 플래그는 많은 npm 패키지가 의존하는 Object.prototype.__proto__를 지원함.
     * Node-API의 안정화로 --unstable 플래그 없이 Node-API에 의존하는 npm 패키지를 사용할 수 있게 되어 지원 범위가 확대됨.

Deno.serve()를 통한 더 간단하고 빠른 웹 서버

     * Deno.serve() 함수를 도입하고 안정화하여 개발자가 최소한의 코드로 서버를 시작할 수 있게 함.
     * 코어 라이브러리와 이벤트 루프 메커니즘의 타겟팅된 최적화를 통해 성능이 크게 향상됨.
     * Deno의 HTTP 처리량은 기본 ""Hello, world"" 서버 설정을 사용한 벤치마크 테스트에서 눈에 띄게 증가함.

더 유연한 deno.json

     * Deno는 복잡한 설정 없이도 사용할 수 있는 프로그래밍 원칙을 지향하며, deno.json 설정 파일을 지속적으로 개선하여 사용의 용이성을 유지함:
          + deno.json을 가져오기 맵으로도 사용할 수 있게 함.
          + deno fmt는 세미콜론을 지원하여 코드 스타일에 대한 유연성을 제공함.
          + package.json과의 통합으로 Node와 Deno 환경 간의 전환을 용이하게 함.
          + deno.json 구조를 단순화하여 개발자가 더 직관적으로 탐색할 수 있게 함.
          + 글로브 패턴의 도입으로 파일 및 디렉토리의 포함 또는 제외를 더 정밀하게 제어할 수 있게 됨.

LSP를 통한 더 부드러운 개발 경험

     * Deno의 언어 서버 프로토콜(LSP) 통합은 정확한 정의 이동, 포괄적인 IntelliSense, TypeScript 프로젝트를 위한 원활한 코드 포맷팅 등의 기능을 제공함.
     * LSP를 개선하기 위해 많은 노력을 기울여 Deno에서의 코딩을 더 부드럽고 직관적으로 만듦.

WebGPU

     * WebGPU는 개발자가 JavaScript를 사용하여 GPU 하드웨어의 성능을 직접 활용할 수 있게 하는 첨단 기술을 Deno에 통합함.
     * WebGPU는 --unstable-webgpu 플래그 뒤에서 사용할 수 있으며, Deno 애플리케이션의 기능을 확장하는 중요한 이정표임.

Jupyter 노트북

     * 오픈 소스 노트북 도구인 Jupyter는 JavaScript와 TypeScript를 사용하여 Deno를 지원하게 됨.
     * 이를 통해 데이터 과학, 시각화 등을 현대적인 JavaScript와 TypeScript 및 웹 표준 API를 사용하여 수행할 수 있게 됨.

주목할 만한 오픈 소스 Rust 크레이트

     * Deno는 다양한 오픈 소스 프로젝트와 연계되어 있으며, Deno의 기능 세트를 확장하고 성능을 최적화하기 위해 적극적으로 기여함.
     * 올해 Deno는 독립적으로 유용할 수 있는 몇 가지 Rust 크레이트를 출시함.

Fresh

     * Fresh는 클라이언트 측 JavaScript를 기본적으로 전송하지 않는 Deno의 현대적인 전체 스택 웹 프레임워크로, 사용하기 쉽고 성능을 향상시키기 위해 계속 개선됨.

Deno의 클라우드 비즈니스 확장

     * Deno Subhosting은 Netlify의 엣지 함수와 Deco.cx 고객의 전자 상거래 상점을 지원하는 동안 자체 서비스로 전환되어 누구나 무료로 사용할 수 있게 됨.
     * Deno KV, Queues, Cron과 같은 클라우드 기본 요소를 출시하여 웹 개발을 근본적으로 단순화하는 비전을 향해 진전을 이룸.

Deno 2

     * Deno 2는 Node와 npm과의 호환성을 개선하고, 프로젝트의 종속성을 관리하고 최적화하는 데 관한 흥미로운 발표를 포함하여 개선된 런타임을 제공할 예정임.

GN⁺의 의견:

     * Deno는 Node.js와의 호환성을 크게 향상시키고, 웹 개발을 단순화하는 데 중점을 두고 있음이 중요함. 이는 기존 Node.js 개발자들에게 Deno로의 전환을 더 쉽게 만들고, Deno의 채택을 촉진할 수 있음.
     * WebGPU와 같은 첨단 기능의 통합은 Deno가 단순한 서버 사이드 플랫폼을 넘어서 더 넓은 범위의 애플리케이션 개발에 적합하게 만들고 있음을 보여줌. 이는 특히 GPU를 활용한 고성능 컴퓨팅이 필요한 개발자들에게 매력적일 수 있음.
     * Fresh 프레임워크와 Deno Deploy의 발전은 Deno가 전체 스택 웹 개발에서 중요한 역할을 할 수 있음을 시사하며, 클라우드 기반 서비스로서의 Deno의 위치를 강화함. 이러한 발전은 Deno가 현대 웹 개발의 주요 플레이어로 자리 잡을 가능성을 높이고 있음.

   Fresh 경험해보니 기대가 너무 컸는지 실망이 더 컸습니다. 왜인지는 이미 아래 의견에 나와 있으니 패스...

        Hacker News 의견

     * 한 사용자는 인터넷에 연결되지 않은 환경에서 Deno 애플리케이션을 가져오는 방법을 아직 찾지 못했으며, 이에 대한 문서가 전혀 없다고 지적함. 이 사용자는 Deno가 기업 환경에서 희망을 가질 수 없다고 생각함.
     * 다른 사용자는 WebGPU 기능에 관심을 표현하며, Slint 프레임워크를 통해 브라우저나 웹뷰 없이 자바스크립트/타입스크립트로 데스크톱 GUI를 만들고 있음을 설명함. Deno가 직접 윈도우를 띄울 수 있다면, 모든 플랫폼에 대해 네이티브 바이너리 대신 wasm을 배포할 수 있을 것이라고 기대함. 그러나 WebGPU 기능이 윈도우를 띄우는 API를 포함하지 않아 여전히 추가 라이브러리가 필요하다고 덧붙임.
     * 한 사용자는 Deno의 컴파일 상황이 개선되기를 바라며, 생성된 실행 파일이 90MB 이상이고 압축 시 오류가 발생하여 Go 언어처럼 배포하기 어렵다고 지적함. Deno가 Node.js의 pkg 솔루션보다 크기 면에서 더 나빠졌다고 언급함.
     * 또 다른 사용자는 Deno가 러스트 호스트 프로세스에 내장될 수 있는 더 큰 지원을 보고 싶어함. 자바스크립트 번들러를 작성 중이며, 플러그인을 실행하기 위해 Node.js 런타임이 필요하지만, deno-core 크레이트가 매우 기본적이고 내장하기 어렵다고 언급함. Deno가 JS 도구 세계에서 ""플러그인 런타임""이 될 수 있을 것이라고 기대하며, 현재는 Rust 호스트 프로세스에서 stdio를 사용하여 Node.js 자식 프로세스와 통신하고 있음을 설명함.
     * 한 사용자는 자바스크립트를 좋아하지 않지만, Deno를 사용해보고 매우 부드럽고 빠른 경험을 했다고 긍정적인 의견을 표현함.
     * 또 다른 사용자는 2023년에 처음으로 비트리비얼한 Deno 앱을 프로덕션에 배포했으며, 여러 진입점이 있는 저장소에서 lock 파일을 동기화하는 학습 과정에 어려움을 겪었지만, 전반적으로 좋은 경험이었다고 말함.
     * Jupyter가 Deno를 사용하여 자바스크립트와 타입스크립트를 지원하게 되었다는 소식에 대해 한 사용자는 긍정적인 반응을 보이면서도, 파이썬이 숫자와 수학에 뛰어난 지원을 제공하는 점을 언급하며, 이를 사용하고 싶어하는 사람이 있을지 의문을 제기함.
     * 한 사용자는 기사 끝에 링크된 JSR의 대기 목록에 가입할 수 있으며, Deno 팀이 무엇을 만들고 있는지 궁금해함.
     * Deno Deploy가 GCP 지역을 35개에서 12개로 줄였다는 소식에 대한 링크를 공유한 사용자가 있음.
     * Fresh라는 웹 개발 프레임워크를 사용하고 싶어하지만, 현재 Tailwind만 지원하는 것은 미성숙해 보인다고 지적하는 사용자가 있음. 다음 반복에서 CSS 번들링이 아닌 뷰 전환을 우선시하는 것에 대해 의아해함.
"
"https://news.hada.io/topic?id=13263","사실, 충수(맹장)는 쓸모없는 것이 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사실, 충수(맹장)는 쓸모없는 것이 아니다

부록은 사실 쓸모없는 기관이 아니다: 해부학 교수가 설명하다

     * 부록은 쓸모없는 기관이라는 나쁜 평판을 가지고 있지만, 최근 연구에 따르면 면역 시스템을 지원하고 유익한 장내 세균을 보호하는 역할을 함.
     * 부록은 소화기계의 일부로, 인간과 일부 영장류 및 설치류에게서 발견되며, 대장의 첫 부분인 맹장에서 작은 지렁이 모양으로 튀어나옴.
     * 부록이 진화하는 과정에서 여러 번 독립적으로 나타났다는 것은 이 기관이 적응적 기능을 가지고 있을 가능성을 시사함.

부록의 유익한 역할은 무엇인가?

     * 부록은 면역 조직이 높은 농도로 존재하여 면역 시스템을 지원하고, 장내 유익한 세균의 안전한 저장소 역할을 함.
     * 장내 문제가 발생했을 때, 부록은 유익한 세균이 안전하게 보호되어 장내 세균을 재식민화하는 데 도움을 줌.

왜 어떤 사람들은 충수염을 겪는가?

     * 충수염은 섬유질이 낮은 식단을 가진 산업화 국가에서 주로 발생하며, 식단의 섬유질 부족으로 인해 부록 내에 음식물이 막혀 염증을 일으킬 수 있음.
     * 위생 가설에 따르면, 과도한 위생 관리로 인해 면역 시스템이 제대로 발달하지 않아 면역 조직이 많은 부록에서 염증이 나타날 수 있음.

새로운 이해가 새로운 치료법으로 이어질 수 있을까?

     * 부록이 건강에 도움이 된다는 증거가 늘어나면서, 부록을 완전히 제거하지 않고도 충수염을 치료할 수 있는 새로운 방법들이 연구되고 있음.
     * 부록을 제거한 사람들이 C. diff와 같은 심각한 세균 감염 위험이 더 높다는 연구 결과가 있어, 부록을 보존하는 것이 건강상의 이점이 있음.

부록에 대한 연구로 얻은 것은?

     * 해부학적 세부 사항에 대한 연구의 중요성을 보여주며, 인간의 몸에 대해 알려진 것보다 더 많은 변이와 기능, 미세 해부학적 적응이 있음을 시사함.
     * 해부학은 몸에 대한 연구로, 아직 잘 알려지지 않은 작은 부위나 기술적으로 기술되지 않은 동물들에 대한 연구가 가치가 있음.

GN⁺의 의견

     * 부록의 역할에 대한 새로운 이해는 해부학과 의학 분야에서 중요한 발전을 나타냄. 이는 장내 건강과 면역 시스템에 대한 우리의 지식을 향상시키고, 충수염 치료 방법에 혁신을 가져올 수 있음.
     * 부록이 면역 시스템 지원과 장내 세균 보호라는 두 가지 중요한 기능을 한다는 것은, 이전에 '쓸모없는'으로 여겨졌던 기관에 대한 인식을 바꾸는 계기가 됨.
     * 이 기사는 해부학적 연구의 가치를 강조하며, 아직 발견되지 않은 인체의 비밀과 기능을 탐구할 가능성을 열어줌.

        Hacker News 의견

     * 병리학자의 관점에서, 맹장과 같은 인체의 일부는 발생학적으로 얼굴의 양쪽이 초기에 분리되었다가 다시 융합하는 과정에서 생긴 것임. 맹장은 대장의 세 개의 근육줄(tiniae coli)이 만나는 지점이며, 대장 전체에는 림프 조직이 풍부함.

     병리학자는 맹장이 진화적 미스터리라는 생각이 의학의 낮은 지점 중 하나라고 언급함. 이러한 이야기들은 흥미롭지만 실용적 가치는 없으며, 이와 관련된 투자는 피할 것을 권장함.
     * 듀크 대학교 의료 센터의 연구에 따르면, 맹장은 유익한 장내 세균을 보호하는 '안전한 집'으로 기능함. 장내 미생물은 소화 과정을 돕고, 장은 미생물에게 영양과 안전을 제공함.

     맹장은 무용하지 않으며, 면역 체계를 지원하고 유익한 장내 세균의 안전한 저장소로 기능할 수 있다는 가설이 제시됨.
     * 한 사용자는 과거에 맹장염 증상을 경험했지만, 증상이 몇 시간 후 사라졌음을 회상함. 결국 심각한 통증으로 응급실에 가서 맹장염 진단을 받고 수술을 받았음.

     사용자는 과거에 경미한 맹장염 증상이 있었으나, 심각한 경우에는 응급실 방문과 수술이 필요했음을 공유함.
     * 작은 발가락의 목적에 대한 질문에, 한 사용자는 균형 유지에 조금이라도 도움이 될 것이라고 추측함. 그러나 작은 발가락이 쉽게 부러질 수 있어 진화적으로 사라지지 않은 이유에 의문을 제기함.

     작은 발가락이 균형 유지에 미미한 도움을 줄 수 있지만, 쉽게 부러질 수 있는 위험성에도 불구하고 진화적으로 사라지지 않은 이유에 대한 의문이 있음.
     * 맹장이 면역 체계를 지원하고 유익한 장내 세균의 안전한 저장소로 기능한다는 이론에 대해, 한 사용자는 맹장이 면역 체계를 어떻게 돕는지에 의문을 제기함. 맹장염으로 인한 높은 면역 조직의 존재가 생존에 도움이 될 수 있음을 지적함.

     맹장의 면역 체계 지원 기능에 대한 의문과 유익한 장내 세균의 저장소로서의 기능에 대한 흥미로운 가설이 제시됨.
     * 맹장염은 고대 시대에도 존재했으며, 산업화된 국가들에만 국한된 것이 아님을 언급함.

     맹장염이 오래전부터 존재했으며 특정 지역에만 국한되지 않았음을 지적함.
     * 맹장 내의 막힘을 해소하기 위한 탐색적 수술의 가능성에 대한 의문을 제기함.

     맹장의 막힘을 해결하기 위한 수술의 가능성에 대해 의문을 가짐, 그러나 위험할 수도 있음을 인정함.
     * 문서에서 맹장에 대한 부분이 가장 흥미로운 부분임을 언급함.

     맹장에 대한 설명이 문서에서 가장 주목할 만한 부분임을 언급함.
"
"https://news.hada.io/topic?id=13225","737 MAX의 최신 차질, 추가로 잘못 뚫린 구멍 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    737 MAX의 최신 차질, 추가로 잘못 뚫린 구멍 발견

        Hacker News 의견

     * 현재 보잉 CEO가 문화를 바꾸려는 시도를 하고 있으며, 문제를 인정하고 해결하는 태도로 전환하려는 노력이 엿보임. 그러나 오랜 기간 문제를 부정하고 제품을 출하해온 후에 이러한 변화를 시도하면 당분간 더 많은 문제가 드러날 수 있음. 보잉의 고객과 주주들이 이러한 변화를 완수할 만큼의 인내심을 가지고 있을지 의문.
     * 기사 제목이 매우 오해의 소지가 있으며 사실과 다름. 문제를 발견한 것은 보잉이 아니라 스피릿이었으며, 문제는 아직 인도되지 않은 기체에만 영향을 미침.
     * 이러한 투명성은 긍정적인 것이므로 보잉을 처벌해서는 안 됨. 다른 항공기 제조업체들도 비슷한 문제를 겪고 있을 수 있으며, 그들이 문제를 발표하지 않을 수도 있음.
     * 47개의 검사된 기체 중 22개에서 품질 결함이 발견되었으며, 이 문제는 서비스 중인 일부 737기에도 존재할 수 있음.
     * 보잉의 문제는 미국 정부 전반에 걸친 더 큰 구조적 문제의 징후처럼 느껴짐. 실제로 일을 처리하는 것보다 홍보와 선전에 너무 많은 노력을 기울임.
     * 비합리적일지 모르지만 통계적으로 안전하다는 것을 알고 있음에도 불구하고 새로운 세대의 보잉 항공기를 타는 것이 두려움을 느낌.
     * 보잉의 군사 계약 업무도 ""문제를 부정하고 출하하기""의 태도로 고통받고 있는지 궁금함.
     * 다른 곳에서 읽은 바에 따르면, 많은 문제들이 부주의하고 조정되지 않은 아웃소싱, 특히 소프트웨어 분야에서 비롯된 것일 수 있음. 이에 대한 좋은 정보나 통찰이 있는지 궁금함.
     * 보잉은 테플론처럼 문제에도 불구하고 주식이 크게 흔들리지 않음. 비행기가 실제로 분해되고 있음에도 주가는 10월의 최저점을 넘지 않음.
"
"https://news.hada.io/topic?id=13235",""가짜 중국 소득" 모기지가 토론토 부동산 거품을 부추긴다: HSBC 은행 유출 정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ""가짜 중국 소득"" 모기지가 토론토 부동산 거품을 부추긴다: HSBC 은행 유출 정보

""가짜 중국 소득"" 모기지, 토론토 부동산 버블 조장: HSBC 은행 유출 정보

     * HSBC 은행의 내부 고발자가 2022년 토론토 외곽 지점의 모기지 승인 팀에 합류하면서 발견한 의심스러운 주택 대출에 충격을 받음.
     * 캐나다로 이민 온 인도 출신의 D.M.이라는 가명을 사용하는 이 고발자는 코로나19 팬데믹 기간 동안 중국 디아스포라 구매자들에게 급증한 주택 대출을 발견함.
     * 중국에서 원격 근무를 한다고 주장하며 HSBC에서 모기지를 받은 중국 이민자 사례가 다수 있었으며, 이는 토론토의 주택 가격 상승과 연관이 있다고 믿음.

HSBC 은행 유출 정보로 본 토론토 부동산 버블 조장

     * D.M.은 2015년 이후 토론토 지역 HSBC 지점 10곳 이상이 중국에서 과장된 소득이나 존재하지 않는 직업을 주장하는 디아스포라 구매자들에게 최소 5억 캐나다 달러 이상의 주택 대출을 발급했다고 결론지음.
     * 이러한 외국 소득 사기는 팬데믹 기간 동안 증가했으며, 특히 토론토와 밴쿠버의 주택 가격에 큰 영향을 미친 것으로 보임.
     * D.M.은 HSBC 캐나다와 다른 캐나다 은행들이 중국에서의 검증되지 않은 부의 출처를 가진 디아스포라 구매자들에게 문제가 많은 모기지를 발급하는 시스템적 문제가 있다고 주장함.

HSBC 캐나다 내부 조사와 개혁

     * D.M.의 고발로 인해 HSBC 캐나다 내부에서 조사가 이루어졌고 일부 개혁이 이루어진 것으로 내부 이메일을 통해 확인됨.
     * 그러나 D.M.은 은행의 대응에 만족하지 못하고 자신의 이야기와 내부 문서를 언론에 공개하기로 결정함.

중국 디아스포라 은행 거래와 부동산 거래의 연관성

     * FINTRAC의 연구에 따르면, 코로나19 팬데믹 기간 동안 캐나다 카지노가 폐쇄되면서 중국의 지하 은행 체계가 발전하여 홍콩에서 캐나다 은행 계좌로 대규모 전자 송금이 이루어짐.
     * 이러한 송금은 부동산 거래에 사용되며, 중국 디아스포라 은행 계좌 소유자들은 종종 학생, 가정주부, 사무 관리자 또는 실업자로 주장함.

HSBC 캐나다의 모기지 사기 의혹

     * D.M.은 HSBC 캐나다의 모기지 신청 패키지를 검토하며, 중국에서의 원격 근무를 주장하며 높은 소득을 보고한 사례들이 믿기 어렵다고 판단함.
     * 예를 들어, 한 여성은 카지노에서 파트타임으로 일하면서 연간 300,000 캐나다 달러 이상의 소득을 주장하며 140만 캐나다 달러의 모기지를 받음.

HSBC 캐나다 내부의 반응과 조치

     * D.M.의 고발 이후 HSBC 캐나다는 소득 검증 절차를 강화하는 등의 조치를 취함.
     * 그러나 D.M.은 은행이 증거를 삭제하라고 압력을 가하고 있다고 느끼며, 캐나다 은행들이 외국 소득을 보여주는 모기지 승인에 대해 더 엄격한 규제가 필요하다고 주장함.

   GN⁺의 의견:
    1. 이 기사는 캐나다 부동산 시장의 가격 상승과 중국 자본의 유입 간의 연관성을 조명함으로써, 부동산 가격 결정 요인에 대한 새로운 시각을 제공함.
    2. HSBC 은행의 내부 고발자의 증언은 금융 부문의 투명성과 규제의 중요성을 강조하며, 이는 금융 범죄 및 자금 세탁 방지에 대한 국제적인 논의에 기여할 수 있음.
    3. 이러한 사례는 부동산 시장의 건전성을 유지하기 위한 강력한 정책과 시스템의 필요성을 보여주며, 특히 글로벌 자본 흐름과 관련된 문제에 대한 국제적인 협력의 중요성을 강조함.

        Hacker News 의견

     *

     D.M.의 폭로: 인도에서 캐나다로 유학 온 D.M.은 HSBC Bank Canada에서 발생한 잠재적인 모기지 사기를 폭로하려 함. 일부 직원들이 이 사기로 수천 달러를 챙겼을 가능성을 제기함.
     *

     FINTRAC 연구와 D.M.의 주장: FINTRAC의 연구는 캐나다 은행들이 중국 디아스포라 구매자들에게 가짜 소득을 기반으로 모기지를 의도적으로 발급했다고 말하지 않지만, D.M.은 은행 직원들이 사기를 방지하기 위한 훈련을 받았고, 그가 검토했던 오로라 지점의 대출 신청 서류들이 믿기 어려울 정도였다고 주장함.
     *

     D.M.의 조사: D.M.이 검토한 HSBC Canada의 이메일과 문자 메시지에 따르면, 오로라 지점의 많은 직원들이 가짜 중국 소득 모기지에 대해 직접적으로 알고 있었고, 토론토 지역 10개 이상의 지점을 감독하는 베테랑 매니저도 중국 디아스포라 고객들을 위한 광범위하고 의심스러운 모기지 대출에 대해 알고 있었음을 암시함.
     *

     D.M.의 증언과 의심: D.M.은 동료가 고객을 만나지 않고도 대출 신청을 처리했다고 인정했다고 주장함. 이는 지점 매니저가 해외 소득 고객의 신청서를 직원들에게 전달하여 ""직접 영업할 필요가 없게"" 만들었기 때문임. 또한, 중국 본토에는 이메일과 전화 통화를 확인하는 팀이 있지만, 이는 정교하고 조직적인 사기임을 동료가 인정했다고 D.M.은 이메일에서 밝힘.
     *

     다양한 관점: 한 댓글 작성자는 중국과 연계된 캐나다 모기지가 결국 모두 상환될 것이라고 생각하지만, 캐나다에서 기록되지 않은 중국의 지하 금융 활동이 많이 있으며, 이러한 '네트워크'가 중국에서 돈을 빼내는 데 사용될 수 있다고 제안함.
     *

     HSBC에 대한 불만: D.M.은 HSBC의 대응에 대해 만족하지 못했으며, 한 사용자는 HSBC가 뉴스의 스캔들로만 알고 있음을 언급함.
     *

     금융 조사가 아닌 관점: 의심스러운 현금을 더 존경받는 자산으로 보이게 하기 위해 토론토 주택에 대한 거액의 대출/모기지를 요청하는 사기 신청자들이 있음. HSBC는 이러한 고객들이 조직 범죄 집단의 전면에 불과하다는 것을 알면서도 의심스러운 현금의 정기적인 지불을 원하기 때문에 이를 용인함. 이것은 토론토의 부동산 시장에도 영향을 미침.
     *

     동양계 캐나다인의 경험: 한 동양계 캐나다인은 ""중국 돈""을 가지고 있어 일반적인 직업을 가질 필요가 없다는 말을 들었다고 공유함.
     *

     HSBC의 모기지 상황: HSBC에서 모기지를 보유한 많은 사람들이 지불하지 못하는 상황이 나타나야 하지만, HSBC가 이러한 부동산을 보유하면서 큰 손실을 입을 것인지, 얼마나 오래 이 상황이 지속될 것인지에 대한 공개 통계가 부족함.
     *

     HSBC의 미래: HSBC가 RBC가 될 것이라는 의견과 독립 모기지 중개인들이 시스템을 통해 사람들을 '창의적인 코칭'으로 안내하는 것이 이러한 상황을 촉진한다는 의견이 있음.
     *

     문화적 친숙함과 사기: 오로라 지점의 직원들이 대부분 중국계 캐나다인이라는 점이 사기를 지속하기 쉽게 만들었을 수 있다는 추측이 있음.
     *

     HSBC에 대한 비판: 얼마나 많은 금융 시스템 규칙을 HSBC가 위반해야 서구 금융 시장에서 그들을 추방할지에 대한 의문이 제기됨.
     *

     Sam Cooper에 대한 의심: 중국에 대한 혐오를 바탕으로 생계를 유지하는 Sam Cooper에 대한 비판적인 의견이 있으며, 그의 기사는 매우 신중하게 접근해야 한다는 견해가 있음.
"
"https://news.hada.io/topic?id=13252","Go 1.22 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Go 1.22 릴리스

     * Go 1.22 버전은 Go 1.21 이후 6개월 만에 출시됨.
     * 대부분의 변경 사항은 툴체인, 런타임, 라이브러리의 구현에 있음.
     * Go 1 호환성 약속을 유지하며, 거의 모든 Go 프로그램이 이전과 같이 컴파일 및 실행될 것으로 예상됨.

언어 변경 사항

     * ""for"" 루프에 대한 두 가지 변경 사항이 있음.
          + 이전에 ""for"" 루프에 의해 선언된 변수들은 한 번 생성되고 각 반복에 의해 업데이트되었으나, Go 1.22에서는 루프의 각 반복이 새로운 변수를 생성하여 실수로 공유하는 버그를 방지함.
          + ""for"" 루프는 이제 정수에 대해 범위를 지정할 수 있음.

도구

  Go 명령어

     * 작업 공간에서 vendor 디렉토리를 사용하여 의존성을 관리할 수 있음.
     * go get은 더 이상 모듈이 아닌 기존 GOPATH 모드에서 지원되지 않음.
     * go mod init은 이제 다른 벤더링 도구의 설정 파일에서 모듈 요구 사항을 가져오려고 시도하지 않음.
     * go test -cover는 이제 자체 테스트 파일이 없는 패키지에 대한 커버리지 요약을 출력함.

  Trace

     * trace 도구의 웹 UI가 새로운 트레이서를 지원하기 위해 부분적으로 새롭게 디자인됨.

  Vet

     * 루프 변수에 대한 vet 도구의 동작이 변경됨.
     * append에 값을 추가하지 않는 호출에 대해 새로운 경고가 추가됨.
     * time.Since를 defer 문에서 사용할 때 발생하는 문제에 대한 새로운 경고가 추가됨.
     * log/slog 호출에서 키-값 쌍이 일치하지 않을 때 새로운 경고가 추가됨.

런타임

     * 타입 기반 가비지 컬렉션 메타데이터를 힙 객체에 더 가깝게 유지하여 CPU 성능을 1-3% 향상시킴.

컴파일러

     * 프로파일 가이드 최적화(PGO) 빌드가 이전보다 더 많은 호출을 가상화할 수 있게 됨.

링커

     * 링커의 -s 및 -w 플래그가 모든 플랫폼에서 더 일관되게 동작하도록 변경됨.

부트스트랩

     * Go 1.22는 부트스트랩을 위해 Go 1.20의 최종 포인트 릴리스 이상을 요구함.

핵심 라이브러리

    새로운 math/rand/v2 패키지

     * math/rand/v2는 표준 라이브러리의 첫 번째 “v2” 패키지로, math/rand와 비교하여 여러 가지 중요한 변경 사항이 있음.

    새로운 go/version 패키지

     * Go 버전 문자열을 검증하고 비교하는 함수를 구현하는 새로운 go/version 패키지가 추가됨.

    향상된 라우팅 패턴

     * 표준 라이브러리의 HTTP 라우팅이 더 표현력 있게 개선됨.

    라이브러리의 소소한 변경 사항

     * 다양한 라이브러리에 대한 소소한 변경 사항과 성능 향상이 있음.

포트

    Darwin

     * macOS에서 64비트 x86 아키텍처(darwin/amd64 포트)에서 Go 도구 체인은 이제 기본적으로 위치 독립 실행 파일(PIE)을 생성함.

    Arm

     * GOARM 환경 변수를 사용하여 소프트웨어 또는 하드웨어 부동 소수점을 선택할 수 있음.

    Loong64

     * loong64 포트는 이제 함수 인수와 결과를 레지스터를 사용하여 전달함.

    OpenBSD

     * OpenBSD에서 big-endian 64비트 PowerPC(openbsd/ppc64)에 대한 실험적인 포트가 추가됨.

GN⁺의 의견

     * 이번 Go 1.22 릴리스는 특히 ""for"" 루프의 변경 사항과 새로운 math/rand/v2 패키지의 도입이 주목할 만함. 이러한 변경 사항들은 Go 개발자들에게 더 나은 성능과 안정성을 제공하며, 새로운 기능들은 Go 언어의 발전을 반영함.
     * math/rand/v2 패키지는 더 빠른 알고리즘과 새로운 API를 통해 더 나은 난수 생성 기능을 제공하며, 이는 암호화 및 기타 난수 의존 애플리케이션에 중요한 개선 사항임.
     * Go 1.22는 호환성을 유지하면서도 성능과 개발자 경험을 향상시키는 다양한 최적화와 새로운 기능을 제공함으로써, Go 커뮤니티에 긍정적인 영향을 미칠 것으로 기대됨.

        Hacker News 의견

     * 타입스크립트 개발자가 최근 Go 언어로 전환한 경험을 공유함. 처음에는 Go의 배열 함수 부족과 유연하지 않은 타입 시스템에 대해 우려를 표함. 하지만 Go를 사용하면서 표준 라이브러리의 우수성, 타입 안전성, 내장된 코딩 표준의 장점을 느낌. 라우팅이 표준 라이브러리로 통합된 것도 긍정적으로 평가함.
     * Go 1.22 버전에 대한 인터랙티브 릴리스 노트를 제공하는 링크를 공유함.
     * 9년 이상 Go를 사용한 개발자가 Dart(Flutter 개발을 위해)와 Go를 비교함. Dart는 가능한 모든 기능을 추가하려 하지만 Go는 반대로 단순함을 추구함. Dart에서는 클래스 초기화 방법이 다양해져 혼란스럽고, Go의 단순함이 그리워짐. Dart의 맵/스트림 등을 사용한 복잡한 단일 표현식은 디버깅 시 또는 초보 개발자에게 혼란을 줄 수 있음.
     * io.Copy가 TCPConn에서 UnixConn으로 복사할 때 Linux의 splice(2) 시스템 호출을 사용할 수 있게 되었음. io 패키지에서 이러한 패턴을 통해 얻을 수 있는 이점을 높이 평가함.
     * Go 1.22 버전에서 라우팅 패턴이 개선되었으나, 이로 인해 소소한 호환성 문제가 발생할 수 있음. 이는 httpmuxgo121 필드를 통해 제어할 수 있음.
     * 어떤 개발자는 Go 언어에 추가된 '함수 범위' 기능을 좋아하지 않음. 이 기능이 언어에 추가된 복잡성에 비해 충분한 편의성을 제공하지 않으며, Go의 명시적이고 단순한 스타일과 어울리지 않는다고 생각함.
     * Go 1.22 버전에서 반복문의 각 반복이 새로운 변수를 생성하는 것에 대한 논의 링크를 공유함.
     * sql.Null[T]의 추가를 환영함. 기존에는 sqlboiler의 null을 사용했지만, sql.Null과 유사한 API를 가지고 있으며, 값이 명시적으로 설정되었는지 여부를 알려주는 IsSet() bool 메서드가 추가적으로 있음.
     * 표준 라이브러리에 라우팅이 추가된 것을 환영하며, chi 라이브러리를 제거할 수 있을지 고려 중임.
     * Go를 프로덕션에 사용하는 개발자들 사이에서는 새로운 버전으로 빠르게 전환하는지, 아니면 오래된 릴리스에 머무르는지에 대한 질문이 있음. any 키워드 사용에 대한 의견도 나눔.
"
"https://news.hada.io/topic?id=13202","취미 터널링의 지하 세계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             취미 터널링의 지하 세계

        Hacker News 의견

     * 취미로 미니 원격 조종 건설 차량만을 사용해 자신의 지하실을 파는 사람에 대한 이야기
          + 취미 터널 굴착에 관심이 있다면, 미니 원격 조종 건설 차량만을 사용해 지하실을 파는 사람의 이야기가 흥미로울 것.
          + 해당 활동에 대한 영상 링크 제공 및 16년 동안 379개의 비디오가 있다고 언급.
          + Ritchie는 목적지 없이 순수한 즐거움과 명상을 위해 굴착하는데, 이로 인해 스트레스 해소와 어린 시절로 돌아간 듯한 기분을 느낌.
     * 생산성에 집착하는 세상에서 단순한 즐거움을 추구하는 이야기
          + ""생산성 포르노""와 부업에 치중하는 세상에서, 단순한 즐거움을 추구하는 행위에 대한 사랑을 표현함.
     * 집 아래 크롤스페이스를 활용하고 싶은 개인의 경험
          + 집 아래 크롤스페이스를 10피트 깊이로 파서 저장 공간이나 체육관 공간으로 사용하고 싶어함.
          + 지역 건축 사무소가 DIY를 지원하며 작업을 이중 확인해줘서 감사함을 표함.
     * 런던의 '몰 맨'이라 불리는 엔지니어의 40년간의 지하 터널 굴착 이야기
          + '몰 맨'으로 불리는 엔지니어가 40년 동안 자신의 런던 집 아래 터널을 굴착했으며, 그 후 예술가가 그곳을 지하 스튜디오로 변모시킴.
     * 캘리포니아 프레즈노의 Forestiere 지하 정원에 대한 언급
          + Forestiere 지하 정원을 이 취미나 집착의 원조로 소개함.
     * 유튜버 Colin Furze의 지하 프로젝트에 대한 관심
          + 유튜버 Colin Furze가 진행 중인 지하 프로젝트를 매우 흥미롭게 지켜보고 있음.
     * 의미 있는 삶에 대한 철학자 Susan Wolf의 견해와 취미의 가치에 대한 논의
          + 철학자 Susan Wolf는 가치 있는 프로젝트에 적극적으로 참여하는 삶을 '의미 있는 삶'으로 정의함.
          + 이 취미가 의미 있는 삶을 반증하는 강력한 예가 될 수도 있고, 반대로 많은 빈 영혼을 드러낼 수도 있음.
     * Colin Furze에 대한 추가 언급 및 그의 콘텐츠 추천
          + Colin Furze가 기사에서 언급되며, 그의 최근 비디오와 추가 채널이 재미있다고 추천함.
     * Colin Furze의 비디오로 시작된 흥미로운 탐구
          + Colin Furze의 비디오를 보기 시작해 매료되어 계속 시청 중임을 표현함.
"
"https://news.hada.io/topic?id=13151","원격 디자인 스프린트 쉽게 하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          원격 디자인 스프린트 쉽게 하는 방법

     * 디자인 스프린트란:
          + 고객과 함께 아이디어를 설계하고, 프로토타입을 만들고 평가하여 큰 문제를 해결하는 프로세스
          + 디자인 스프린트는 가설을 세우고, 아이디어를 프로토타입으로 제작하며, 가능한 한 적은 투자로 빠르게 테스트하는 방법
          + 이 방법을 사용하면 제품의 라이프사이클 동안 소요되는 시간과 비용을 절감할 수 있음
          + 디자인 스프린트는 팀을 하나로 모으고 맨 처음부터 모든 사람이 같은 내용을 이해하도록 함
     * 원격 디자인 스프린트를 운영할 때 이슈:
          + 디자인 스프린트는 원래 5일 동안 직접 대면하여 진행하도록 설계됨
          + 지난 몇 년 동안 원격 업무에 적응하기 위해 지속적으로 조정됨
          + 원격 근무 환경에서 디자인 스프린트의 가장 큰 문제는 ‘여러 시간대에 걸쳐 운영되고, 부분적으로 비동기식으로 진행되며, 원격으로 이뤄지는 조직용 프로세스를 어떻게 개발할 것이냐?’는 것
     * 원격 디자인 스프린트를 운영하는 방법:
          + 철저히 계획하기
               o 다음 질문에 답할 것
                 1. 고객 또는 사용자의 문제는 무엇인가?
                 2. 사업 또는 기술에 이 문제가 왜 중요한가?
                 3. ‘이 문제가 해결할 가치가 있다’는 증거는 무엇인가?
                 4. 디자인 문제에 어떤 리서치 인사이트를 이미 확보하고 있는가?
          + 예상 시간 설정하기
               o 다음 사항 참고하기
                   1. 시간대를 검토하여 스프린트 참가자가 너무 일찍 일어나거나 너무 늦게까지 일할 필요가 없도록 할 것
                   2. ‘시간대가 얼마나 멀리 떨어져 있느냐’에 따라 어떤 사람은 다른 사람이 하루를 시작하기도 전에 하루를 마칠 수도 있기에 ‘하루’라는 기간은 작업/활동을 하기에 충분하지 않을 수 있음
                   3. 활동이나 발표 일정이 ‘가장 빠른 시간대에서 하루를 시작할 때’ 배정되고 전달되도록 할 것
          + 파트너십이 핵심
              1. 원활한 운영을 보장하고 최상의 결과를 얻으려면 프로덕트 디자이너와 프로덕트 매니저가 팀을 이루어야 함
              2. 프로덕트는 비즈니스와 제품 목표를 정의하고 사용자와 팀원에게 참여를 요청하는 데 도움을 줄 수 있음
              3. 디자인은 스프린트를 촉진하고 계획하며, 아이디어와 프로토타입 제작을 안내하는 데 도움이 될 수 있음
          + 도구와 팁
              1. 스프린트를 운영하려면 모든 것이 원활하게 진행되도록 다양한 활동을 위한 여러 도구 세트를 사용할 것
              2. 다음 도구 참고하기
                    # Mural 보드: '어떻게 하면 좋을까?’, 아이디어, 프로토타입 제작과 같은 활동 협업용
                    # Slack: 비동기식 업데이트 / Zoom: 동기식 미팅용
                    # Google 드라이브: 라이트닝 토크 녹음과 같이 파일 공유
          + 축하하기
              1. Slack이나 주간 회의와 같은 팀 채널에 성과를 공유
              2. 블로그 또는 소셜 미디어 게시물로도 공유

   노하우가 가득하네요

   감사합니다.
"
"https://news.hada.io/topic?id=13185","Pkl - 애플이 만든 Configuration용 프로그래밍 언어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Pkl - 애플이 만든 Configuration용 프로그래밍 언어

     * Pkl(Pickle로 발음함)은 설정을 생성하기 위한 프로그래밍 언어로, 애플이 내부에서 사용하던 것을 오픈소스화 하여 첫 릴리스를 발표
          +

     ""Configuration that is Programmable, Scalable, and Safe""
     * JSON, YAML, Property Lists와 같은 정적 언어들은 복잡성이 증가할 때 한계가 있음
     * Pkl은 정적 언어와 범용 프로그래밍 언어 사이의 조화를 목표로 함

Pkl 퀵 투어

     * 개발자에게 친숙한 문법과 쉬운 학습을 위해 클래스, 함수, 루프, 타입 주석 등의 기능을 포함
     * Pkl 파일은 설정 스키마를 정의하고, 다른 설정 데이터를 정의하는 데 사용됨
     * Pkl 프로그램은 YAML, JSON, XML 등의 일반적인 형식으로 쉽게 렌더링될 수 있음

내장된 유효성 검사

     * 데이터는 유효해야 하며, Pkl에서는 타입 주석을 사용하여 유효성을 달성함.
     * 타입 주석은 제약 조건을 정의할 수 있으며, 실패하는 제약은 평가 오류를 발생시킴.

패키지 공유

     * Pkl은 패키지를 게시하고 프로젝트에서 의존성으로 가져올 수 있는 기능을 제공함
     * GitHub 릴리스로 패키지를 쉽게 생성 및 게시할 수 있으며, 프로젝트를 통해 의존성을 관리할 수 있음

언어 바인딩

     * Pkl은 텍스트 출력으로 구성을 생성할 수 있으며, 다른 언어로 라이브러리로 내장될 수 있음.
     * Pkl 스키마는 대상 언어의 클래스/구조체로 생성될 수 있으며, Swift, Go, Java, Kotlin 등을 지원함

편집기 지원

     * Pkl 작성 경험을 최상으로 만드는 것을 목표로 함
     * IntelliJ 플러그인을 포함하여 JetBrains 편집기를 위한 풍부한 지원을 제공함
     * 자동 완성, 탐색, 유효성 검사 등의 기능을 제공하며, Language Server Protocol을 지원할 계획임

다음 단계

     * Pkl에 대한 자세한 가이드, 언어 참조, GitHub Discussions를 통한 커뮤니케이션을 제안함
     * Pkl 사용 예제를 위한 샘플 저장소와 CLI 다운로드, 편집기 플러그인 설치를 권장

GN⁺의 의견:

     * Pkl은 설정 관리의 복잡성을 해결하기 위해 만들어진 새로운 프로그래밍 언어로, 개발자들에게 유용할 것으로 보임.
     * 내장된 유효성 검사와 패키지 공유 기능은 코드의 재사용성과 유지 보수성을 향상시킬 수 있음.
     * 다양한 언어로의 바인딩과 편집기 지원은 Pkl을 더 많은 개발 환경에 적용할 수 있게 하여, 개발자들이 보다 쉽게 설정 관리를 할 수 있도록 도와줄 것임.

   혹시 했는데 Go 바인드가 있네요. 애플도 고랭을 많이 사용하는것 같습니다.
   apple/pkl-go: Pkl bindings for the Go programming language

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 25년 전 대부분의 프로그램은 GUI를 통한 설정 기능과 도움말을 제공했음. 설정은 ini 파일이나 윈도우 레지스트리에 저장되었으며, 수동으로도 편집 가능했음. 현재는 87MB 크기의 바이너리 형태의 프로그래밍 언어를 사용하여 설정 파일을 생성해야 하며, 이 언어 자체를 실행하기 위해서도 설정 파일을 수동으로 만들어야 함. 이러한 상황에서 500GB 프레임워크가 필요하게 될 것 같은데, 이는 설정 파일을 생성하는 프로그래밍 언어를 위한 것임. 현대 개발자들이 문제를 만드는 데에 종사하는 것처럼 보임.
          + Pkl은 애플에서 내부적으로 사용되던 최고의 도구 중 하나였으며, 이제 오픈소스로 공개되어 기쁨. 한 팀은 여러 kloc의 k8s 설정을 pkl로 성공적으로 마이그레이션했으며, pkl을 사용하여 두 가지 모니터링 도구를 위한 설정, 정적인 문서 사이트를 생성하고 모두 연결하는 경고 정의를 작성함. 이 도구를 추천하고 싶으며, 다시 사용할 수 있게 되어 흥분됨.
          + Pkl은 GraalVM Truffle 프레임워크를 사용하여 구축되었으며, Futamura 투영을 사용한 런타임 컴파일을 지원함. 애플과 함께 이 작업을 오랫동안 진행해왔으며, 드디어 소스 코드를 볼 수 있게 되어 매우 기쁨. (GraalVM 개발자의 말)
          + HTTP 리소스를 가져오고 파일 시스템에서 파일을 읽는 기능과 튜링 완전성은 설정 언어에서 예상치 못한 기능임. 이러한 복잡성이 정당화되는지 궁금함.
          + 문서를 조금 읽어본 결과, 스키마 정의와 최소값 전달자로서의 언어를 만들고자 하는 아이디어에 너무 몰두한 것 같음. 과도한 사용으로 인한 예상치 못한 실패 모드가 우려됨. 그러나 이것이 핵심 기능일 수도 있음: pkl을 소프트웨어에 추가하는 모든 사람은 결과적으로 생성될 설정 괴물에 참여하게 됨. 구조가 없는 혼란보다는 통일된 시스템이 덜 나쁠 것이라는 가정에 기반함.
          + IntelliJ, Visual Studio Code, Neovim용 플러그인과 확장 기능을 제공하며, 곧 Language Server Protocol 지원이 추가될 예정임. 왜 LSP를 먼저(또는 유일하게) 구현하지 않았는지 이해할 수 없음. 모든 편집기가 LSP를 내장 지원하므로 별도의 구현이 필요하지 않았을 것임.
          + 설정 언어에 대해 오랫동안 고민한 결과, 스키마와의 사랑/증오 관계를 겪은 후, 설정에서 풍부한 타입을 원하지 않는다는 결론에 도달함. 정적 타입의 프로그래밍 언어를 사용하며, 설정 언어에서는 문자열, 배열, 해시맵만을 타입으로 사용하고 모든 타입 검증을 파싱 단계로 밀어내고 싶음.
          + Cue와 비슷하지만 더 원시적이고, 원칙이 덜하며 Java로 작성되었음.
          + Pkl이 해결하려는 문제를 이해하는 데 어려움을 겪음. 제목을 읽고 나서 Pkl이 TOML과 같은 새로운, 더 나은 설정 언어라고 생각했지만, 기사를 읽고 나니 Pkl이 설정을 _생성_하기 위한 언어라는 인상을 받음. Pkl은 설정 파일 자체가 아니라, 설정을 더 표준화된 방식으로 구축하고 재사용하는 데 도움이 되는 추상화된 도구로 보임. 예를 들어, 여러 프로젝트에서 공유하거나 반복하고자 하는 Terraform이나 Cloudformation 설정이 있을 때, 가장 쉬운 방법은 다른 프로젝트에서 복사하여 붙여넣고, 몇 줄을 변경하여 프로젝트에 맞게 수정하는 것임. Pkl은 이러한 문제를 해결하는 데 도움이 되는 것인지, 아니면 다른 것을 놓치고 있는 것인지 궁금함.
"
"https://news.hada.io/topic?id=13156","나의 가장 좋아하는 Git 커밋 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        나의 가장 좋아하는 Git 커밋 (2019)

나의 가장 좋아하는 Git 커밋

     * Git 커밋 메시지의 중요성을 강조하며, 코드베이스를 문서화하는 데 있어 가장 강력한 도구 중 하나라고 생각함.
     * 개발자 Dan Carley가 작성한 ""Convert template to US-ASCII to fix error""라는 커밋을 예로 들어 그 이유를 설명함.
     * GDS(Government Digital Service)에서의 경험을 바탕으로, 공개적으로 코딩하는 것의 이점 중 하나는 조직 외부에서도 이러한 예를 공유할 수 있다는 점임.

  이 커밋이 좋은 이유

     * 커밋 메시지와 코드 변경 사항의 비율이 재미있지만, 그것이 공유할 가치가 있다고 생각하는 이유는 아님.
     * 다른 조직이나 개발자였다면 이 커밋 메시지는 단순히 change whitespace 또는 fix bug로 요약될 수 있었을 것임.
     * 대신, Dan은 주변 사람들을 위해 정말 유용한 커밋 메시지를 만드는 데 시간을 할애했음.

    변경 사유를 설명함

     * 최고의 커밋 메시지는 변경한 무엇뿐만 아니라 왜 변경했는지를 설명함.
     * 이 커밋에서는 /etc/nginx/router_routes.conf의 내용을 일치시키기 위해 도입된 테스트가 bundle exec rake로 실행될 때 ArgumentError: invalid byte sequence in US-ASCII 오류로 실패한 이유를 자세히 설명함.
     * 이러한 정보는 문서화하기에 매우 가치가 있으며, 사람들이 원래의 맥락을 잊거나 다른 팀으로 옮겨가고 조직을 떠나면서 쉽게 잃어버릴 수 있음.

    검색 가능함

     * 커밋 메시지의 첫 부분에는 변경을 유발한 오류 메시지가 있어, 누구든지 코드베이스에서 git log --grep ""invalid byte sequence""를 실행하거나 GitHub의 커밋 검색을 사용하여 이 오류를 검색할 수 있음.
     * 실제로 여러 사람들이 이 문제를 검색하고, 이전에 누가 이 문제를 발견했는지, 어떻게 대처했는지를 알아낼 수 있었음.

    이야기를 전달함

     * 커밋 메시지는 문제가 어떻게 보였는지, 조사 과정이 어떠했는지, 해결 과정이 어떠했는지에 대한 상세한 내용을 담고 있음.
     * 커밋 메시지는 특정 파일이나 함수, 코드 라인을 문서화하는 것이 아니라, 코드베이스가 겪은 여정에 대한 추가 정보를 문서화하는 데 매우 적합함.

    모두를 조금 더 똑똑하게 만듦

     * Dan이 각 단계에서 실행한 명령어를 문서화한 것은 팀 내 지식을 공유하는 가벼운 방법이 될 수 있음.
     * 이 커밋 메시지를 읽음으로써, 누군가는 Unix 도구 세트에 대한 몇 가지 유용한 팁을 배울 수 있음.
     * 이 변경 사항을 검토하는 사람이나 나중에 이 커밋을 찾는 사람 모두 이러한 것들을 배울 수 있음.

    연민과 신뢰를 구축함

     * 마지막 단락은 인간적인 맥락을 추가함.
     * 이 말을 읽으면, Dan이 교묘한 버그를 추적하는 데 한 시간을 소비한 것에 대한 좌절감과 해결한 것에 대한 만족감을 느낄 수 있음.
     * 이러한 커밋 메시지는 모든 변경 사항 뒤에 최선의 결정을 내린 인간이 있다는 것을 기억하는 데 도움이 됨.

  좋은 커밋의 중요성

     * 이 예는 극단적인 경우이며, 모든 커밋이 이 정도의 세부 사항을 가질 것으로 기대하지는 않음.
     * 그러나 이는 변경 사항 뒤에 있는 맥락을 설명하고, 다른 사람들이 배울 수 있도록 돕고, 코드베이스에 대한 팀의 집단적인 정신 모델에 기여하는 훌륭한 예임.
     * 좋은 커밋 메시지의 이점과 그것을 더 쉽게 구조화하는 데 도움이 되는 도구에 대해 더 알고 싶다면 Joel Chippindale의 ""Telling stories through your commits""와 Tekin Süleyman의 ""A branch in time""을 추천함.

   GN⁺의 의견
     * 이 기사는 Git 커밋 메시지의 중요성을 강조하며, 코드베이스의 역사를 문서화하고 지식을 공유하는 데 있어 커밋 메시지가 얼마나 강력한 도구가 될 수 있는지를 보여줌.
     * Dan Carley의 커밋 메시지는 변경 사유, 검색 가능성, 이야기 전달, 지식 공유, 연민과 신뢰 구축 등 여러 가지 면에서 모범적인 사례를 제시함.
     * 좋은 커밋 메시지 작성의 중요성을 이해하고 실천함으로써, 개발자들은 더 나은 협업과 코드 유지 관리를 경험할 수 있으며, 이는 전체 팀의 생산성과 효율성을 향상시키는 데 기여할 수 있음.

        Hacker News 의견

     * GitHub 공동 창립자의 의견:
          + Git 커밋 메시지는 코드 문서화를 위한 독특한 방법이지만 최적화되지 않음.
          + 대부분의 도구는 커밋 메시지의 첫 줄만 보여줌.
          + Git은 이메일 본문처럼 모든 프로젝트 참여자가 읽을 수 있도록 커밋 메시지를 설계했으나, 현실에서는 거의 볼 수 없음.
          + git blame을 사용하여 관련 커밋 메시지를 찾는 것도 어려움.
          + Git 프로젝트의 커밋 메시지는 매우 상세하지만, 실제로는 거의 활용되지 않음.
          + Git을 통한 훌륭한 문서 작성은 대부분의 커뮤니티에서 시간 낭비에 가까움.
     * 특정 문제에 대한 커밋 메시지의 중요성:
          + 문제를 명확하게 설명하는 커밋 메시지의 첫 줄이 중요함.
          + 필요한 경우 추가 정보를 제공하는 나머지 부분을 읽을 수 있음.
     * 커밋 메시지에 대한 개인적인 감정:
          + 훌륭한 커밋 메시지를 작성하는 것에 대한 자부심이 있지만, 다른 사람들에게 가치가 있는지 확신이 없음.
          + 대부분의 사람들은 커밋 메시지를 거의 검색하지 않음.
          + 아름다운 커밋 메시지는 프로그래머의 허영일 수 있으며 실질적인 가치가 없을 수 있음.
     * 커밋 메시지의 첫 줄 작성 전략:
          + git log를 사용할 때 첫 줄이 가장 중요함.
          + 첫 줄에는 무엇을 했는지가 아니라 왜 했는지를 명시해야 함.
          + 뉴스 기사처럼 중요도가 높은 정보부터 상세한 정보까지 순차적으로 작성하는 것이 좋음.
     * 커밋 메시지 수정의 어려움:
          + 커밋 메시지는 작성 후 수정하기 어려움.
          + .md 파일이나 위키, Confluence 등의 문서는 수정이 용이함.
          + 컴포넌트의 설계를 설명하려는 유혹을 피하고, 필요한 경우 문서를 개선하는 것이 좋음.
     * 작은 커밋에 대한 상세한 설명의 중요성:
          + 작은 커밋일수록 상대적으로 긴 설명이 필요할 수 있음.
          + 작은 변경 사항에 대한 이유를 상세히 설명하는 것이 중요함.
     * 커밋 메시지의 한계와 도구의 문제점:
          + 커밋 메시지의 첫 줄을 더 구체적으로 작성할 필요가 있음.
          + 나머지 긴 설명은 큰 가치가 없을 수 있음.
          + 개발 도구의 문제점을 지적하며, 오류 메시지가 더 명확해야 함.
          + 코드 편집 도구가 비표준 공백 문자를 허용하는 이유에 대한 의문 제기.
     * 커밋 메시지보다 커밋 위생의 중요성:
          + 커밋 메시지의 상세함보다는 좋은 커밋 위생이 더 중요함.
          + 깔끔하고 독립적인 커밋은 코드 기능을 쉽게 추출하고 재사용할 수 있게 함.
     * 자동 스쿼시와 리베이스에 대한 비판:
          + 자동 스쿼시는 의미 있는 커밋 메시지 작성을 방해함.
          + 리베이스는 개발자가 의도적으로 정리하기 위한 것이지, 병합 시 기본 패턴이 되어서는 안 됨.
"
"https://news.hada.io/topic?id=13160","블로그를 IPFS에서 서버로 이전한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         블로그를 IPFS에서 서버로 이전한 이유

     * 본인은 IPFS(InterPlanetary File System)와 ENS(Ethereum Name Service)를 사용한 웹사이트의 선구자였음을 자부함
     * 2019년 3월 첫 ENS+IPFS 웹사이트를 설정했을 때, 유사한 웹사이트는 15개 미만이었음
     * 2019년부터 2022년까지 IPFS+ENS 브라우저 확장 프로그램(Almonit), IPFS+ENS 검색 엔진(Esteroids)을 공동 개발하고, 개인 블로그도 IPFS+ENS를 통해서만 접근 가능했음
     * 그러나 오늘, 블로그를 다시 서버로 옮기기로 결정하고 그 이유를 논의하고자 함

P2P 웹사이트에 대한 흥분

     * P2P 웹사이트인 IPFS에 대해 흥분했던 이유는 이론적으로 웹사이트 방문자가 많을수록 더 강력하고, 검열에 저항력이 있으며, 확장성이 높아진다는 점이었음.
     * 토렌트 파일이 영원히 살아남는 것처럼, 웹사이트도 그러길 원했음.
     * 방문자가 많을수록 사용하기 더 빠르고, 일부 방문자가 콘텐츠를 퍼뜨리는 데 도움을 줄 수 있는 웹사이트를 상상했음.

실제로는 효과가 없었던 이유들

     * 대부분의 IPFS 사용자는 자체 노드나 소프트웨어를 실행하지 않고 게이트웨이를 사용함.
     * 자체 IPFS 노드를 운영한다 해도 웹사이트에 접근한다고 해서 자동으로 그 내용을 고정하는 것은 아님.
     * BitTorrent와 달리 IPFS에서는 콘텐츠를 받으면서 기본적으로 공유하는 것이 아님.
     * 웹사이트는 동적 객체이며 내용이 지속적으로 업데이트됨.
     * 대부분의 IPFS 웹사이트는 IPNS(내부 이름 시스템) 또는 ENS(Ethereum Name System)를 사용하여 최신 버전의 콘텐츠를 가리킴.
     * IPFS에는 아직 IPNS의 최신 콘텐츠를 항상 고정하는 간단한 명령이 없으며, ENS를 사용하는 경우 이더리움 블록체인 이벤트를 수신해야 함.

브라우저에서 IPFS 콘텐츠 접근의 어려움

     * IPFS 블로그를 모든 주요 게이트웨이, 모든 IPFS 노드, Brave 브라우저(기본적으로 IPFS 지원), js-libp2p & helia(IPFS의 js 라이브러리)에서 접근 가능하게 하고 싶었으나 신뢰할 수 있는 방법을 찾지 못함.
     * cid.contact라는 ""콘텐츠 라우팅"" 서비스를 발견했으나, 이 서비스를 통해 콘텐츠를 색인하는 방법을 알아내지 못함.
     * cid.contact에 의존하면 중앙 집중식 서비스에 대한 의존성이 생김.

간단하고 전통적인 솔루션으로의 복귀

     * IPFS 블로그를 잘 운영하기 위한 지속적인 노력에 지쳐, 단순하고 전통적인 작동 솔루션을 원함.
     * 현재 읽고 있는 블로그는 Jekyll로 구축되었으며 자체 10달러 서버에서 호스팅됨.
     * 여전히 IPFS의 팬이지만, 개인 블로그의 요구 사항에는 아직 부합하지 않음.

GN⁺의 의견

     * IPFS는 분산형 웹을 위한 혁신적인 기술이지만, 개인 블로그와 같은 동적이고 빈번한 업데이트가 필요한 콘텐츠에는 아직 적합하지 않음.
     * 기술의 복잡성과 유지 관리의 어려움은 사용자가 전통적인 서버 기반 솔루션으로 돌아가는 주된 이유임.
     * 이 글은 기술 애호가들에게 IPFS와 같은 분산형 기술의 현실적인 한계와 개선이 필요한 영역을 보여주며, 기술 발전에 대한 지속적인 관심과 참여를 촉구함.

   발갑습니다

        Hacker News 의견

     * 저자에게 글을 잘 썼다는 칭찬을 함.
          + 기술이 좋지만 아직 준비가 덜 된 느낌을 받았음.
          + 시도한 것 자체가 생태계에 기여하며, 개선이 필요한 부분을 알림.
          + 경험을 공유하지 않는 것은 모두에게 손실이라고 생각함.
     * IPFS 구현체인 'iroh'를 개발 중인 창업자의 의견.
          + IPFS의 완전한 경험을 구현하는 것은 어려움이 있지만, P2P 웹 호스팅에 점점 가까워지고 있음.
     * IPFS와 비트토렌트 사용 패턴의 차이점에 대한 의견.
          + IPFS는 일반 HTTP 서버로 호스팅할 수 있는 콘텐츠를 사용하고, 비트토렌트는 HTTP에서 호스팅하기 어렵거나 비용이 많이 드는 데이터를 호스팅함.
          + 중계 서버가 등장하여 기존 프로토콜을 사용하는 것보다 편리해짐.
     * IPFS 사용자 경험에 대한 불만.
          + 파일을 추가하는 것이 실제로 네트워크에 파일을 추가하는 것이 아니며, 복제하고 싶은 모든 것을 수동으로 핀해야 함.
          + 비트토렌트 v2가 해결한 문제들도 IPFS가 해결했지만, 비트토렌트 v2가 더 나은 방식으로 해결함.
          + IPFS가 'Web3'와 암호화폐와 점점 더 연관되어 친구들에게 추천하기 어려움.
     * Filecoin에 대한 의견.
          + 사용하지 않는 저장 공간에 대한 시장을 만드는 아이디어는 좋지만, Dropbox처럼 간단해야 함.
          + Filecoin 웹사이트에서 Dropbox와 같은 앱을 찾을 수 없어, 어쩌면 기업용 솔루션일 수도 있음.
          + 이러한 이유로 인기가 없는 것 같고, 기사가 이 인상을 더욱 확신시킴.
     * IPFS와 관련된 개인적인 경험 공유.
          + 실제로 완전히 분산되어 있지 않으며, 분산화의 환상을 유지하는 것은 비용이 많이 들고 실제로 목적이 없음.
          + 블록체인 기술과 연관된 프로젝트의 관여가 늘어나자 관련 활동을 중단함.
     * 블로그 호스팅에 대한 의견.
          + 실제로 정적 파일의 모음인 블로그에 서버 비용을 지불할 필요가 없음.
          + GitHub에서 호스팅하고, 문제가 생기면 다른 것으로 옮기면 됨.
     * IPFS의 확장성에 대한 우려.
          + 큰 웹사이트가 확립되면 작은 웹사이트는 다시 주목받기 어려움.
          + 인기 없는 토렌트처럼 시더가 없어지면 사이트가 영원히 사라질 수 있음.
          + 낮은 트래픽의 웹사이트 가치에 대한 논쟁이 있지만, 다른 사람이 웹사이트의 생존을 결정하는 것에 대해 의문을 제기함.
     * IPFS 디렉토리를 읽기/쓰기 가능한 FUSE 드라이브로 마운트할 수 있는지에 대한 질문.
     * Peergos를 사용하여 웹사이트를 호스팅하는 경험을 공유.
          + Peergos는 가변 데이터 문제를 해결하고, 개인 정보 보호와 접근 제어도 제공함.
          + 독립 서버에서 얼마나 빠르게 업데이트가 반영되는지 확인할 수 있음.
"
"https://news.hada.io/topic?id=13220","DEF CON 32 취소됐지만 우리가 다시 열었습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     DEF CON 32 취소됐지만 우리가 다시 열었습니다.

     * DEF CON 32가 취소되었다가 다시 재개
     * 25년간의 좋은 관계에도 불구하고, 시저스(Caesars)가 갑작스럽게 계약을 해지하여 DEF CON 32를 위한 장소가 없어짐
     * 시저스가 왜 계약을 해지했는지는 알려주지 않았으나, DEF CON이나 커뮤니티의 행동과는 관련이 없는 전략 변경 때문이라고 함

새로운 장소 찾기

     * 해커들은 유연하며 해결책을 찾음
     * 크기와 내용을 수용할 수 있는 장소가 필요했으며, 발표된 날짜에 가까운 위치를 찾아야 했음
     * 라스베이거스로 급히 팀을 파견하여 장소를 물색하고, 결국 라스베이거스 컨벤션 센터(LVCC)에서 개최하기로 결정

DEF CON 32 재개 성공

     * DEF CON 32는 2024년 8월 8일부터 11일까지 LVCC에서 개최되며, 워크숍과 트레이닝은 사하라에서 진행될 예정
     * 새로운 장소에서는 이전 카지노 호텔 공간에서는 불가능했던 새로운 시도들을 할 수 있을 것
     * 더 많은 공간, 적절한 푸드 코트, 미국 내 가장 큰 실내 LCD 벽 등이 제공될 예정

        Hacker News 의견

     * 시저스의 DEF CON 중단 의심
          + DEF CON 참가자들이 평균적으로 라스베가스의 다른 컨퍼런스 참가자들에 비해 도박이나 호텔 내 고급 식당 이용이 적어 수익이 낮을 것으로 추정됨.
          + 팬데믹 이후 라스베가스가 회복세를 보이며, 시저스가 8월의 관광 비수기에도 더 높은 수익을 낼 수 있는 고객을 찾기로 결정했을 가능성이 있음.
          + 다른 비기술 컨퍼런스도 같은 이유로 8월에 개최되며, 호텔 비용 할인을 받는 대신 평소보다 적은 지출을 하는 참가자들로 방을 채움.
     * DEF CON의 8월 라스베가스 개최에 대한 불만
          + 8월에 라스베가스를 방문하는 것이 좋은 생각이 아니라고 생각하는 사람이 있으며, 대신 알래스카의 코디악, 메인의 포츠머스, 시드니 등을 좋은 여행지로 제안함.
     * 시저스의 보험 정책 변경 가능성
          + MGM 해킹 사건의 영향으로, 시저스가 보험 정책을 재검토하고 DEF CON의 마케팅 방식 때문에 보험 혜택을 잃을 위험을 피하기 위해 컨퍼런스를 중단했을 수 있음.
     * 과거의 보안 문제들
          + 지난해 폭탄 위협으로 인한 대피 사건과 2018년 라스베가스 총격 사건 이후의 강화된 방 검색으로 인한 불만이 있었음.
          + 이러한 문제들과 기업 행사가 더 많은 수익을 창출할 가능성 때문에 시저스가 DEF CON을 중단한 것에 놀라지 않음.
     * 시저스의 랜섬웨어 보험 정책
          + 시저스가 랜섬웨어 공격에 대비한 큰 보험 정책을 가지고 있으며, 이 정책이 해커들을 초대하는 것을 금지할 수 있음.
     * 해커들의 도시 방문에 대한 일반적인 우려
          + 많은 해커들이 도시에 모이는 것이 사람들을 과도하게 불안하게 만들 수 있으며, 지난해 랜섬웨어 사건이 이번 결정에 영향을 미쳤을 수 있음.
     * DEF CON의 변화에 대한 개인적인 의견
          + 최근 몇 년간 DEF CON이 기술적이고 해커 중심의 행사가 아니게 되었다고 생각하는 사람이 있으며, 다른 장소에서 새롭게 시작되길 바람.
     * 시저스의 사이버보안 보험사의 의견
          + MGM 해킹 이후, 시저스의 사이버보안 보험사가 DEF CON과 같은 행사를 주최하는 카지노 리조트에 대한 정책 작성에 의견을 가졌을 가능성이 있음.
     * 시저스의 DEF CON 취소에 대한 공식적인 설명 부족
          + 시저스가 DEF CON과의 계약을 전례 없이 취소했으며, 이는 해커들과의 연관성을 원치 않는 이미지와 보안 관점에서 결정된 것일 수 있음.
     * DEF CON 취소 후 재개최
          + 과거에 DEF CON이 취소되었지만, 커뮤니티의 노력으로 재개최된 사례가 있음.
"
"https://news.hada.io/topic?id=13229","계정 로그인에 SMS 인증을 도입한 기업들, SIM 스왑 공격의 책임론 대두","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               계정 로그인에 SMS 인증을 도입한 기업들, SIM 스왑 공격의 책임론 대두

SMS 기반 계정 로그인을 채택한 기업들의 책임

     * SIM 스왑 공격이 계속되는 이유는 애플, 드롭박스, 페이팔, 블록, 구글 등 많은 기업들이 SMS를 비밀번호 재설정 및 계정 로그인에 사용하는 나쁜 아이디어를 채택했기 때문임.
     * SIM 스왑 공격은 범죄자가 통신사에게 피해자의 전화번호를 자신의 전화로 이동하도록 요청하고, 이를 통해 SMS로 계정 로그인 정보를 받아 돈과 민감한 정보를 훔치는 것임.
     * SIM 스왑 공격을 막는 방법은 간단함: 기업들은 SMS를 통한 로그인이나 비밀번호 재설정을 허용하지 말아야 하며, SMS 2FA를 제공할 경우에도 Authy나 Google Authenticator와 같은 더 안전한 옵션을 제공해야 함.

SMS 기반 인증의 문제점

     * SMS를 통한 인증은 고객의 보안을 위한 전반적인 방법으로 제공되지만, 이메일을 통한 인증과 같은 더 안전한 방법에 비해 편리함에도 불구하고 보안에는 취약함.
     * SMS로 고객에게 메시지를 보내는 것은 암호화되지 않은 우편엽서를 보내는 것과 같으며, SIM 스왑 공격에서처럼 누구나 우편함을 열어 메시지를 가로챌 수 있음.
     * SMS는 비밀번호 재설정에 최선의 옵션이 아니며, Authy나 이메일을 사용하는 것이 더 나은 2FA 옵션임.

기술 채택의 부정적인 면

     * 애플, 구글 등은 SMS를 통한 비밀번호 재설정 및 계정 로그인을 지원하는 기능을 도입함으로써 SMS의 역할을 강화함.
     * 클라우드 제공업체들은 SMS 코드를 제공하는 데 이익을 얻고 있으며, 이는 근본적으로 불완전한 기술을 안전한 솔루션으로 판매하는 것임.
     * 웰스파고, 캐시앱, 로빈후드, 슈왑, 페이팔, 뱅크오브아메리카 등 금융 서비스들도 SMS 재설정/계정 로그인 기능을 제공하고 있음.

고객들의 오해

     * 고객들은 SMS 재설정의 불완전한 성격을 이해하지 못하며, 이메일을 통한 재설정이나 Authy와 같은 2FA 앱을 통한 로그인 코드보다 편리함을 더 선호함.
     * 기술 회사들은 고객들을 보호하는 데 실패했으며, 소송과 입법을 통해 상황이 바뀌기를 기대함.

GN⁺의 의견

     * SMS 기반 인증은 편리함에도 불구하고 보안 취약점을 가지고 있어, 기업들은 더 안전한 인증 방법으로 전환해야 함.
     * SIM 스왑 공격은 예방 가능한 문제임에도 불구하고 계속 발생하고 있으며, 이는 기업들의 잘못된 기술 채택에 기인함.
     * 이 글은 기술 회사들이 고객의 보안을 우선시해야 하며, SMS 기반 인증 시스템을 폐기하고 더 안전한 인증 방법을 채택해야 한다는 중요한 메시지를 전달함으로써, 사용자와 업계 전문가들에게 통찰력을 제공함.

        Hacker News 의견

     * SMS 인증 코드의 불편함에 대한 불만
          + 이전에는 TOTP 코드를 1Password가 자동으로 채워주었지만, 이제는 SMS 인증으로 인해 국제 로밍 비용을 지불하거나 SMS 전달을 설정해야 함.
          + 전화번호를 모든 회사에 제공하는 대신 인증 앱을 SMS와 연동해야 한다는 주장.
          + 전화번호를 계정에 연결하는 것은 다음과 같은 이유로 나쁨: 전화 분실/도난, 국가 이동, SMS 공격, 전화번호 재사용, 유료 전화 플랜 유지 필요.
     * Payoneer의 SMS 문제에 대한 경험담
          + 아르헨티나 Movistar 사용자를 대상으로 한 Payoneer의 SMS 인증 문제가 있었으나, 해커뉴스에서 주목받지 못함.
          + 공격자가 Movistar 고객에게 2FA를 보내는 SMS 게이트웨이를 해킹하여 Payoneer 사용자의 이메일을 알아내고 비밀번호를 변경해 돈을 송금함.
          + 페이스북, 트위터 등도 같은 SMS 게이트웨이를 사용하여 비용을 절감하기 때문에 주의가 필요함.
     * 전화번호 분실 시 로그인 문제
          + 전화번호를 잃어버린 경우, 구글 계정에 로그인할 수 없는 문제가 발생함.
     * SMS 인증의 불편함과 TOTP의 편리함 비교
          + SMS 인증은 전화를 찾아야 하는 번거로움이 있으나, TOTP는 KeePassXC에 코드를 저장하여 더 편리함.
     * SMS 인증의 사용자 경험(UX)에 대한 찬성 의견
          + SMS 로그인과 계정 복구가 좋은 사용자 경험을 제공하며, 통신사가 보안을 강화해야 함.
     * Google Voice 번호 사용 제한에 대한 불만
          + 일부 회사들이 Google Voice 번호를 인증에 사용할 수 없다고 주장하거나 유효하지 않은 전화번호로 간주함.
     * SMS 인증의 필요성과 통신사의 역할
          + 일반 사용자에게 앱 설치를 요구하는 것은 큰 부담이며, SMS는 일반 사용자에게 유일한 실질적인 해결책임.
          + SIM 스와핑을 어렵게 만들어야 한다는 주장.
     * SMS 인증의 목적과 기업의 입장
          + SMS 인증은 계정 소유 증명과 비합법 사용자의 계정 생성 제한이라는 두 가지 목적에 효과적임.
          + 기업은 휴대폰 회사에 KYC(Know Your Customer) 과정을 아웃소싱함으로써 최적의 보안 솔루션을 제공하지 않음.
     * SMS 인증에 대한 비판과 범죄자에 대한 책임 전가 문제
          + 비판자들은 SMS 인증을 사용하는 기업을 비난하지만, 실제로는 범죄자가 책임져야 함.
          + SIM 스와핑 공격에 대한 책임은 범죄자에게 있음.
"
"https://news.hada.io/topic?id=13164","HN 소개: filippo.io/mlkem768 - Go 생태계를 위한 양자 내성 암호화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 소개: filippo.io/mlkem768 - Go 생태계를 위한 양자 내성 암호화

Go 생태계를 위한 양자 내성 암호화

     * filippo.io/mlkem768은 ML-KEM-768의 순수 Go 구현체로, 정확성과 가독성에 최적화됨.
     * ML-KEM은 NIST에 의해 표준화 과정 중이며 대부분의 산업에서 채택 중인 양자 내성 키 교환 메커니즘임.
     * 패키지는 코드 약 500줄, 주석 200줄, 테스트 650줄로 구성되어 있으며, golang.org/x/crypto/sha3를 제외하고는 의존성이 없음.
     * Go 표준 라이브러리로 통합될 예정이며, 리뷰의 용이성, 단순성, 철저한 테스트를 통해 높은 보안 확신을 제공하도록 설계됨.

사양 검증을 위한 구현

     * 대부분의 구현체와 달리, 이 코드는 참조 pq-crystals 라이브러리에서 포팅되지 않았으며, 다른 코드베이스를 자세히 읽지 않고 처음부터 작성됨.
     * FIPS 203 문서는 상세한 의사 코드, 철저한 정의, 일관된 타입 정보를 제공하여 훌륭한 구현 가이드임.
     * 코드의 가독성과 학습 자원으로서의 가치를 높이기 위해 함수와 변수 이름, 연산 순서를 FIPS 사양에 맞춰 신중하게 선택함.

구현을 위한 충분한 다항식과 선형 대수

     * 사양은 상대적으로 제한된 수학적 배경을 요구하지만, 구현자의 작업을 용이하게 하기 위해 'Kyber 구현을 위한 충분한 다항식과 선형 대수'를 작성함.
     * 나머지 부분은 독자에게 남겨진 연습 문제로, 1) 소수 3329에 대한 모듈로 산술, 2) [0, 3329)에서 [0, 2ᵈ)로의 압축 및 해제 함수의 구체적 구현, 3) 상수 시간 연산 보장이 포함됨.

가독성과 교육적 가치

     * 가독성은 구현의 주요 목표 중 하나로, 효과적인 리뷰와 차세대 유지 관리자 및 암호화 엔지니어를 위한 교육 자원으로서의 역할을 함.
     * 복잡한 함수의 가독성을 높이기 위해 코드를 길고 재사용성이 낮게 만드는 경우도 있음.

테스트를 통한 높은 보안 확신

     * 키 생성, 캡슐화, 탈캡슐화가 올바르게 이루어지는지 확인하고, 95% 이상의 테스트 커버리지를 유지함.
     * NIST 및 다른 구현체로부터 얻은 테스트 벡터와의 상호 운용성을 보장하고, 기대값과 비교하여 기본 필드 산술 연산을 철저히 테스트함.
     * CCTV 프로젝트의 일환으로 다른 구현체에서 재사용 가능한 테스트 벡터를 공개함.

성능

     * 성능은 주요 목표가 아니지만, 패키지는 유용할 만큼 충분히 빠를 필요가 있음.
     * ML-KEM은 충분히 빠르며, 이 간단한 구현체는 어셈블리 최적화된 P-256 및 X25519 구현체와 경쟁할 수 있음.
     * 성능 향상을 위해 Go 프로그래밍 패턴을 따르고 힙 할당을 최소화하는 등의 노력을 함.

ML-KEM 구현체를 Kyber v3로 사용하기

     * NIST는 Kyber의 Round 3 제출에 몇 가지 작은 변경을 함.
     * 몇 가지 실험적 프로토콜은 Kyber v3(또는 ""draft00"")를 기반으로 정의되어 있으나, 별도의 패키지를 만들 필요는 없음.
     * ML-KEM을 사용하여 공유 비밀 K를 생성한 다음, Kyber 공유 비밀을 생성하기 위해 추가적인 키 파생을 적용할 수 있음.

GN⁺의 의견

     * 양자 내성 암호화의 중요성: 양자 컴퓨팅의 발전으로 기존 암호화 기술이 취약해질 가능성이 있으므로, ML-KEM과 같은 양자 내성 암호화 기술의 개발과 표준화는 매우 중요함.
     * Go 언어의 확장성: 이 구현체는 Go 언어의 확장성과 유연성을 보여주며, 암호화 라이브러리를 표준 라이브러리에 통합할 계획을 갖고 있어 Go 개발자 커뮤니티에 유용한 자원이 될 것임.
     * 교육적 가치: 코드의 가독성과 교육적 가치에 중점을 둔 접근 방식은 다음 세대의 암호화 엔지니어와 관심 있는 개발자들에게 학습 자원으로서 큰 도움이 될 것임.

        Hacker News 의견

     * 양자 컴퓨팅의 현재 상태에 대한 질문

     양자 컴퓨팅이 실제로 필요한 수준에 도달했는지, 아니면 AI처럼 정의가 변화하여 기존 제품을 새로운 이름으로 출시하는 것인지에 대한 의문 제기.
     * Kudelski Security로부터의 인사 및 공유

     Kudelski Security에서 양자 내성 암호화를 위한 Go 언어 라이브러리 중 하나를 중단해야 했던 최근 사례 소개. 자세한 내용은 링크된 글에서 확인 가능.
     * Go 언어로 구현된 암호 시스템에 대한 책 추천

     John Arundel의 Go 1.22 버전에 대한 암호 시스템 구현 책 소개. 책의 마지막 부분에서 양자 내성 암호화에 대한 언급이 있으며, NIST PQ 표준화 이후 책이 업데이트될 수 있음.
     * 다른 언어(Java, C# 등)의 구현에 대한 질문

     다른 프로그래밍 언어에서의 유사한 구현에 대한 정보를 묻는 질문.
     * Go 언어로 작성된 순수 구현에 대한 우려

     순수 Go 언어로 작성된 경우 타이밍/전력 사이드 채널 공격에 취약할 수 있다는 우려 표현.
     * Kyber v3 지원에 대한 흥미와 질문

     draft00/kyber v3를 지원하는 것에 대한 긍정적 평가와 SHA-3 없이 Kyber 90's 모드를 지원하기 위한 가능성에 대한 질문.
     * 32비트 시스템 콜 테이블에 대한 농담

     32비트 시스템 콜 테이블이 '곧 출시될 예정'이라는 농담.
     * 유니코드 변수명 사용에 대한 호감

     알고리즘 또는 구현의 질을 판단할 능력은 없지만, 변수명에 유니코드 사용을 매우 긍정적으로 평가.
     * FiloSottile의 다른 프로젝트에 대한 칭찬

     FiloSottile이 개발한 다른 도구인 'age'에 대한 호감 표현.
     * NIST FIPS 203 문서 링크 공유

     기사에서 언급된 NIST FIPS 203 문서에 대한 링크 공유.
"
"https://news.hada.io/topic?id=13155","Enchanted - Ollama 모델들을 위한 iOS 앱 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Enchanted - Ollama 모델들을 위한 iOS 앱 오픈소스

     * ChatGPT UI로 프라이빗 Ollama 호환 모델들과 채팅할수 있게 해주는 iOS/iPad 앱
          + Llama 2, Mistral, Vicuna, Starling 등
     * 앱을 다운로드 받거나, 직접 빌드해서 실행
     * 사용하기 위해서는 직접 Ollama 서버를 실행해야함
     * 기능
          + 최신 Ollama Chat API 지원
          + 대화 히스토리 지원하며 기기내에 저장
          + 마크다운 지원(테이블/리스트/코드블록을 예쁘게 표시)
          + 음성 프롬프트
          + 프롬프트에 이미지 첨부 가능
          + 모든 대화에 적용할 시스템 프롬프트 지정 가능
          + 각각 모델로 메시지를 수정/전송 가능
     * Swift 코드
"
"https://news.hada.io/topic?id=13152","게리 라슨의 "더 파 사이드"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            게리 라슨의 ""더 파 사이드""

클래식 만화 ""The Far Side""의 일일 업데이트

     * ""The Far Side"" 만화의 클래식 컬렉션을 매일 업데이트하는 코너.
     * 2024년 2월 1일자 만화에는 얼룩말이 안전을 확인할 때까지 물을 마시지 않는다는 내용이 포함됨.
     * 개미 세계의 어색한 순간들을 그린 만화도 있으며, 개미가 물 위에 배를 드러내고 떠 있는 것을 농담으로 여기지 않는 장면이 표현됨.
     * 또 다른 만화에서는 알프레드 히치콕의 ""The Birds""를 본 적이 있는지 묻는 장면이 있음.

만화 컬렉션

     * Gary Larson이 다른 만화와 만화가들의 존재를 인정하는 ""Gary Larson Breaks the 4th Wall"" 컬렉션.
     * 설명하거나 분류할 수 없는 만화들을 모은 ""Don't Ask"" 컬렉션.

웹사이트 정보

     * 웹사이트는 Andrews McMeel Universal에 의해 호스팅되고 운영됨.
     * ""The Far Side""와 관련된 모든 이미지와 콘텐츠는 저작권자의 서면 허가 없이 재생산, 디지털화, 저장, 컴퓨터나 무선 네트워크를 통한 공개, 전송 또는 유통이 금지됨.

GN⁺의 의견

     * ""The Far Side""는 독특한 유머와 통찰력으로 유명한 클래식 만화로, 매일 새로운 만화를 즐길 수 있는 것은 팬들에게 큰 즐거움.
     * 만화 컬렉션은 다양한 주제와 스타일을 탐색할 수 있는 기회를 제공하며, 특히 Gary Larson의 창의적인 접근 방식이 돋보임.
     * 웹사이트의 저작권 정보는 창작물의 보호와 존중을 강조하는 중요한 부분으로, 사용자들이 콘텐츠를 적법하게 이용하도록 유도함.

        Hacker News 의견

     *
          + 어린 시절부터 친구와 함께 'The Far Side' 만화를 좋아했으며, 이 만화는 우리 둘의 기발한 유머 감각의 기초가 되었음. 초등학교 때부터 'The Far Side' 책을 많이 소유했고, 중학교 때는 몇 개의 셔츠도 가지고 있었음. 친구가 40세가 되었을 때, 'The Chickens are Restless'를 선물하기로 결정하고, 결국 'The Far Side'의 전체 작품집을 선물함. 선물을 받고 처음으로 작품집을 본 친구의 얼굴에 미소가 번짐. 'The Far Side'는 우리를 하나로 묶어주는 작은 것들 중 하나임.
     *
          + Gary Larson은 원래 인터넷에 만화를 올리지 말아달라는 공개 편지를 썼으나, 이후 그의 입장이 바뀌었음. 그의 초기 편지와 입장 변화는 각각 웹사이트에 게시되어 있음. Larson은 당시에도, 지금도 생각이 깊은 사람임.
     *
          + 'The Far Side' 컬렉션을 여러 권 가지고 있으며, Jane Goodall이 서문을 쓴 책에는 재미있는 이야기가 있음. 좋아하는 만화 중 하나를 링크로 공유함.
     *
          + 'The Far Side'를 어린 시절부터 좋아했으며, 좋아하는 만화를 하나만 꼽기 어려움. 비슷한 유머를 가진 'Perry Bible Fellowship' 만화도 추천함.
     *
          + Larson이 매우 불규칙적으로 다시 만화를 그리기 시작했다는 사실을 알게 됨. 관련 링크를 공유함.
     *
          + 'The Far Side'는 어린 시절의 소중한 추억을 떠올리게 함. Larson은 독특한 유머 감각을 가진 최고의 만화가 중 한 명이며, 그의 작품이 그를 대변함. 좋아하는 만화 중 하나를 링크로 공유함.
     *
          + 가장 좋아하는 만화를 꼽자면 모든 만화가 될 것임. 일상 생활의 문제를 해결하기 위해 'thagomizer'가 있었으면 좋겠음.
     *
          + 'The Far Side'를 온라인에서 볼 수 있어 기쁨. 두 권짜리 세트가 책장에 자리잡고 있음. 현재 어떤 만화를 즐겨보는지 공유하는 다른 댓글러들을 보는 것도 즐거움. 현재 즐겨보는 만화로는 'Bizarro'와 'Dark Side of the Horse'를 링크로 공유함.
     *
          + ""Bummer of a birthmark""라는 만화를 링크로 공유함.
     *
          + 어린 시절 'Far Side'를 읽으며 풍부한 상상력을 발휘했음. 만화 한 컷을 보고 그 주변 세계를 상상함. 'Far Side' 덕분에 몽상을 할 수 있는 도구를 얻었음. Gary Larson에게 감사함.
"
"https://news.hada.io/topic?id=13154","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   사무실 이전을 준비중인데 아예 도면을 그려보려고 합니다. 이번에 옮기면 오래 있어야 해서 ㅎ

   Figma 강좌를 보며 공부해보려고 합니다~
"
"https://news.hada.io/topic?id=13274","샌프란시스코에서 무인 운전 Waymo 차량에 치인 자전거 타는 사람, 경찰 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              샌프란시스코에서 무인 운전 Waymo 차량에 치인 자전거 타는 사람, 경찰 발표

   이 요청은 특정 기사의 내용을 요구하는 것이 아니라, 기사를 어떻게 요약해야 하는지에 대한 지침을 제공하고 있습니다. 따라서 요약할 구체적인 기사 내용이 제공되지 않았기 때문에 요약을 진행할 수 없습니다.

    GN⁺의 의견

     * 이 지침은 기사 요약을 위한 명확한 방법론을 제시하고 있으며, 이를 통해 정보를 간결하고 명료하게 전달하는 방법을 배울 수 있음.
     * 요약의 목적은 독자가 글의 핵심 내용을 빠르게 파악하고 이해할 수 있도록 하는 것이며, 이는 정보 과부하 시대에 매우 유용함.
     * 지침에 따른 요약은 독자에게 긍정적이고 유익한 정보를 제공하며, 복잡한 내용을 쉽게 소화할 수 있도록 도와줌으로써 교육적 가치가 있음.

        Hacker News 의견

     * 자동차와 자전거 운전자에 대한 논의가 많지만, 교차로 디자인의 안전성에 대해서는 고려하는 사람이 없음. 정지 신호가 있는 것 자체가 나쁜 신호일 수 있으며, 이에 대해 설명하는 'Not Just Bikes'의 비디오가 있음.

     ""모두가 자동차와 자전거 운전자에 대해 이야기하지만, 교차로 디자인의 안전 문제를 고려하는 사람은 없음. 정지 신호가 있다는 것 자체가 문제의 신호일 수 있음.""
     * 스웨덴에서는 기본 운전 교육에서 위험을 예측하고 특히 숨어 있는 자전거와 보행자를 인식하는 것을 가르침. 자동차가 충분히 조심하지 않았다고 생각함.

     ""스웨덴에서는 숨어 있는 자전거와 보행자에 대한 위험을 예측하는 것이 기본 운전 교육의 일부임. 자동차가 더 조심했어야 한다고 봄.""
     * 사람들이 자전거 운전자를 비난하거나 Waymo를 비난하는 것에 실망함. 샌프란시스코 감독인 Shamann Walton이 사고에 대해 온라인에서 ""안전에 대해 그렇게 말했다""고 비판함.

     ""자전거 운전자나 Waymo를 즉시 비난하는 사람들에게 실망함. 특히 샌프란시스코 감독인 Shamann Walton의 온라인 발언에 대해 더 실망함.""
     * 사고가 발생한 거리를 스트리트 뷰로 확인했을 때, 모든 방향에 정지 신호가 있음. 전체 사고 보고서를 기대하며, 현재 증거에 따르면 자전거 운전자가 정지 신호를 제대로 지키지 않은 것으로 보임.

     ""사고가 발생한 거리에 모든 방향에 정지 신호가 있음. 자전거 운전자가 정지 신호를 지키지 않았을 가능성이 있음.""
     * 자율 주행 차량에 의해 충돌당한 후, 플랫폼 개선을 위해 충돌 데이터를 보고하는 시스템에 대한 풍자적인 댓글.

     ""자율 주행 차량에 충돌당한 후, 플랫폼 개선을 위해 충돌 데이터를 보고하는 시스템에 대한 풍자적인 댓글임.""
     * 자율 주행 차량의 근본적인 문제는 100% 안전해야 한다는 기대임. 자전거 전용 도로를 만드는 것이나 자율 주행 차량을 금지하는 것 등 다양한 해결책이 있지만, 완벽한 안전은 불가능함.

     ""자율 주행 차량은 100% 안전해야 한다는 기대가 문제임. 자전거 전용 도로를 만들거나 자율 주행 차량을 금지하는 등의 해결책이 있으나, 완벽한 안전은 불가능함.""
     * Waymo가 Cruise보다 통계적으로 훨씬 낫다면, 이번 사고의 전체 비디오를 공개하는 것이 좋은 기회임. 대부분의 충돌은 피할 수 있지만, 가장 숙련된 인간 운전자도 어려워할 수 있는 완벽한 폭풍의 조건 때문에 발생하는 경우도 있음.

     ""Waymo가 Cruise보다 낫다면, 이번 사고의 전체 비디오를 공개하는 것이 좋은 기회임. 대부분의 충돌은 피할 수 있지만, 어려운 조건 때문에 발생하는 경우도 있음.""
     * 자전거를 타고 가다가 반대 방향에서 좌회전하는 차량에 의해 충돌당한 유사한 상황을 겪었음. 자전거 운전자가 정지 신호를 무시했을 수도 있음.

     ""자전거를 타고 가다가 좌회전하는 차량에 의해 충돌당한 경험이 있음. 자전거 운전자가 정지 신호를 무시했을 수도 있음.""
     * S.F. 감독인 Shamann Walton이 사고 소식에 대해 ""안전에 대해 그렇게 말했다""고 비꼬는 듯한 반응을 보임. 인간 운전자도 발견하기 어려운 상황이었을 수 있으며, 자전거 운전자의 관점에서 조사가 이루어지지 않았을 수 있음.

     ""Shamann Walton이 사고에 대해 비꼬는 듯한 반응을 보임. 인간 운전자도 발견하기 어려운 상황이었을 수 있음.""
     * Waymo가 설명한 시나리오에 따르면, 교차로를 지나가는 동안 큰 트럭이 지나가고 있었고, 자전거 운전자가 트럭 뒤에서 빠르게 지나가면서 시야에 들어올 시간이 거의 없었음. Waymo는 충돌 전에 브레이크를 밟았고, 인간 운전자보다 더 나은 결과를 보였을 수 있음.

     ""Waymo가 설명한 시나리오에 따르면, 교차로를 지나가는 동안 자전거 운전자가 갑자기 나타나 충돌이 발생함. Waymo는 인간 운전자보다 더 나은 대응을 했을 수 있음.""
"
"https://news.hada.io/topic?id=13251","TSMC, 일본 내 두 번째 반도체 공장 건설 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TSMC, 일본 내 두 번째 반도체 공장 건설 예정

TSMC, 일본에 두 번째 칩 공장 건설로 투자액 200억 달러로 증가

     * 대만 반도체 제조업체 TSMC가 2027년 말까지 가동을 시작할 일본 내 두 번째 공장 건설 계획을 발표함.
     * 이로써 TSMC의 일본 벤처에 대한 총 투자액은 200억 달러 이상으로 증가하며, 도쿄 정부의 지원을 받음.
     * TSMC는 2021년에 일본 구마모토에 70억 달러 규모의 칩 공장 건설 계획을 발표했으며, 첫 공장은 2월에 문을 열고 4분기에 본격적인 생산을 시작할 예정임.
     * TSMC는 세계 최대의 위탁 반도체 제조업체로, 고객 수요 증가에 대응하기 위해 구마모토에 위치한 자회사 Japan Advanced Semiconductor Manufacturing을 통해 두 번째 제조 공장을 건설할 예정임.
     * 두 공장이 완공되면, 자동차, 산업, 소비자 및 고성능 컴퓨팅 관련 애플리케이션을 위한 12인치 웨이퍼의 월간 총 생산 능력이 100,000장 이상이 될 것으로 예상됨.
     * 고객 수요에 따라 생산 능력 계획은 추가 조정될 수 있음.
     * TSMC는 Apple과 Nvidia를 포함한 여러 회사에 주요 공급업체로, 일본 벤처에서 86.5%의 지분을 보유하고 있으며, Sony Group이 6%, 자동차 부품 제조업체 Denso가 5.5%, 자동차 제조업체 Toyota가 2%의 지분을 갖고 있음.
     * 일본 정부는 국가의 반도체 제조 중심지로서의 위치를 재건하고 미국과 중국 간의 무역 긴장 속에서 반도체의 안정적인 공급을 보장하기 위해 TSMC의 구마모토 확장을 중심으로 노력하고 있음.
     * 첫 공장 건설이 순조롭게 진행되고 일본 정부가 협력하기 쉬운 환경을 제공한다는 점에서, 두 번째 공장 건설 결정은 TSMC가 일본에 대한 신뢰 표시임.
     * 일본의 반도체 제조 부문은 1980년대 세계 최대였으나, 지난 30년간 점진적으로 경쟁력이 약화되면서 대만 제조업체들이 성장함.
     * TSMC와 대만 정부는 회사의 가장 첨단 제조 공정이 대만에서 계속될 것이라고 밝혔지만, 고객 수요에 대응하기 위해 글로벌 제조 기반을 확장하고 있음.
     * TSMC의 주요 해외 투자로는 미국 애리조나에 두 개의 공장을 건설하는 400억 달러 규모의 프로젝트가 있으며, 이는 워싱턴의 미국 내 반도체 제조 능력 증대 계획을 지원함.
     * TSMC는 또한 주로 자동차 산업을 공급할 독일에 첫 유럽 공장을 계획 중임.
     * TSMC의 타이베이 상장 주식은 인공 지능 애플리케이션용 칩에 대한 수요 증가로 인해 올해 지금까지 8.9% 상승했으며, 이는 전체 지수의 0.9% 상승을 능가하는 성과임.

GN⁺의 의견

     * TSMC의 일본 내 두 번째 공장 건설 계획은 글로벌 반도체 공급망의 안정성과 다변화에 중요한 역할을 할 것으로 보임.
     * 이번 투자는 일본 정부의 적극적인 지원과 협력을 통해 이루어지며, 일본의 반도체 산업 부흥에 기여할 것으로 기대됨.
     * TSMC의 글로벌 확장은 반도체 기술의 지리적 분산을 촉진하고, 특히 자동차 및 고성능 컴퓨팅 분야에서의 칩 수요 증가에 대응하는 전략적 움직임임.
"
"https://news.hada.io/topic?id=13264","스위스 DDoS 공격에 사용된 300만 개의 악성코드 감염 스마트 칫솔","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                스위스 DDoS 공격에 사용된 300만 개의 악성코드 감염 스마트 칫솔

스위스 DDoS 공격에 사용된 300만 개의 멀웨어 감염 스마트 칫솔—봇넷, 수백만 유로의 피해 발생 [업데이트됨]

     * 스위스 회사가 수백만 유로의 피해를 입었다고 보고됨.
     * Fortinet은 칫솔 공격 보고가 부정확하다고 밝힘.
     * 실제 사례와 가상 시나리오가 혼동되었다고 설명함.

원본 기사

     * Aargauer Zeitung에 따르면, 약 300만 개의 스마트 칫솔이 해커에 의해 감염되어 봇넷으로 전환됨.
     * 이 봇넷은 스위스 회사의 웹사이트에 DDoS 공격을 가하여 사이트가 마비되고 수백만 유로의 비즈니스 손실을 초래함.
     * 칫솔은 자바 기반 OS로 인해 취약했으며, 원래는 사용자의 구강 위생 습관을 추적하고 개선하기 위해 연결성을 사용했음.
     * Fortinet의 Stefan Züger는 연결된 기기를 보호하기 위한 몇 가지 팁을 제공함.

최신 정보 유지

     * Tom's Hardware는 25년 이상 PC 기술 뉴스에 대한 전문 지식을 제공함.
     * CPU, GPU, AI, 메이커 하드웨어 등에 대한 속보와 심층 리뷰를 제공함.

  GN⁺의 의견

     * 이 기사는 스마트 기기의 보안 취약성과 그로 인한 잠재적인 위험에 대한 중요한 경고를 전달함.
     * 스마트 칫솔과 같은 일상적인 기기가 해커의 공격 대상이 될 수 있으며, 이는 사이버 보안의 중요성을 강조함.
     * 사용자는 자신의 기기를 최신 상태로 유지하고, 네트워크 활동을 모니터링하며, 보안 소프트웨어를 설치하고 사용하는 등의 조치를 취해야 함.

        Hacker News 의견

     * 기사에 대한 의심
          + 이 기사는 이상하고 세부 사항이 부족함. 대부분의 스마트 칫솔은 BLE(Bluetooth Low Energy)를 사용하며 WiFi에 연결되지 않음. 기사의 사실을 확인하려 했지만 아무것도 찾을 수 없음.
          + 많은 BLE 칩이 WiFi 기능도 가지고 있어, 펌웨어를 조작해 WiFi 기능을 활성화했을 가능성을 배제할 수 없음. 그러나 처음에 어떻게 WiFi에 연결해 봇넷을 활성화했는지 의문임.
          + IoT 기기의 위험성에 대한 전제는 여전히 유효하지만, 이 기사에 대해서는 회의적임.
     * 기사의 근거 부족
          + 어떤 사람이 300만 개의 스마트 칫솔이 DDoS 공격에 사용되었다고 주장하지만, 누가 어떻게 했는지에 대한 정보가 없음. 이런 비상식적인 주장에는 적어도 어떤 증거가 필요함.
          + 칫솔을 식별할 수 있게 해준 기술적인 세부 사항이 분명 있을 것임.
     * 스마트 기능에 대한 반감
          + 블루투스, 인터넷, 제조사 고정 헤드가 없는 오래된 필립스 칫솔을 사용하고 있으며, 유리 컵에서 무선으로 충전함. 매우 만족함.
          + 최근에 두 번째 칫솔을 구매하려 했지만, 원하지 않는 기능이 추가된 새 모델만 찾을 수 있었음. 인터넷에 연결되는 칫솔을 누가 원하겠는가? 결국 이베이에서 구형 모델을 찾음.
          + 이런 기능을 추가한 제품 담당자와 이를 구현한 사람이 그들의 행동에 대해 반성하는 나쁜 하루를 보내길 바람.
     * 스마트 기기 보안에 대한 조언
          + DDoS 공격의 세부 사항은 없지만, 기기와 펌웨어, 소프트웨어를 최신 상태로 유지하고, 네트워크에서 의심스러운 활동을 모니터링하며, 보안 소프트웨어를 설치하고 사용하고, 네트워크 보안 모범 사례를 따르라는 경고로 작용함.
          + 아마도 이런 스마트 칫솔은 필요한 인증을 가진 소비자에게만 판매해야 할 것임.
     * 필립스 전동 칫솔에 대한 경고
          + 필립스 전동 칫솔은 블루투스를 끌 수 없으며, 스마트 기능을 사용하지 않더라도 주의가 필요함.
          + 필립스 공기청정기도 Wi-Fi를 지원하며, 원격 제어 기능을 비활성화할 수 없음. 스마트폰으로 연결해 설정을 완료해야 하지만, 이 기능을 사용하지 않으면 공기청정기가 영구적인 Wi-Fi 핫스팟을 생성해 해킹 위험이 있음.
     * 칫솔의 웹 연결 필요성에 대한 의문
          + 칫솔이 왜 웹 연결이 필요한지 의문. 칫솔질 습관을 추적하기 위함이라면, LAN과 같은 로컬 연결만으로도 가능하지 않을까?
     * 기술 실험에 대한 견해
          + 모든 기술은 어떻게 사용해야 할지 분명해지기 전에 실험 단계를 거침.
          + 폭탄에 대한 프로젝트 플로우셰어와 같이, 이제는 단순한 전원 스위치만 필요한 기기에도 인터넷 연결이 추가되고 있음.
          + 연결된 칫솔의 필요성에 대해 의아하지만, 때때로 칫솔로 구동되는 봇넷을 만들어내는 실험 정신을 높이 평가함.
     * 문학 작품과의 비교
          + 스타니스와프 렘은 세탁기가 똑똑해져 인간을 지배하는 ""Washer Tragedy""를 썼음. 그는 이러한 칫솔들을 자랑스러워했을 것임.
     * 미래의 인터넷 전쟁에 대한 풍자
          + 2037년에 일어날 ""인터넷 딜도 전쟁""을 우려함. 수백만 개의 네트워크가 연결된 딜도와 냉장고가 인터넷에 엄청난 피해를 입히며, 범인은 여전히 잡히지 않음.
"
"https://news.hada.io/topic?id=13200","KISS 원칙을 따르지 않는 가전제품과의 이별","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       KISS 원칙을 따르지 않는 가전제품과의 이별

복잡한 가전제품과의 이별

     * 약 6년간 사용한 GE 프렌치 도어 냉장고를 수리에 지쳐 결국 처분함.
     * 가전제품 수리 및 재판매 부업을 하는 사람이 가져감으로써 매립지로 가지 않을 희망이 있음.
     * 삼성 4도어 냉장고를 판매하려는 제안을 거절함. 복잡한 가전제품에는 이제 관심이 없음.

생존 편향

     * 2004년 제조된 켄모어 사이드 바이 사이드 냉장고가 있음.
     * 스크래치 및 찌그러짐이 있는 모델을 Sears Outlet에서 구입함.
     * 십여 년 전 압축기 릴레이 고장으로 저렴하고 쉽게 수리함.
     * 아이스 메이커 문제가 발생했지만, 새 냉장고를 구입하고 기존 냉장고는 차고에 두어 사용함.
     * 이후 두 대의 프렌치 도어 냉장고보다 더 오래 사용함.

프렌치 도어 고민의 시작

     * 더 넓은 공간을 위해 켄모어 프렌치 도어 냉장고를 구입함.
     * 여러 문제가 발생했으나, 정확한 기록을 남기지 않아 모든 문제를 기억하지 못함.
     * 여러 번 같은 부품을 수리하고 나서 확장 보증을 구입할 수 있었음.
     * 여러 번의 수리와 번거로움 끝에 새 냉장고를 구입하기 위한 상점 크레딧을 받음.

GE 카페 등장

     * GE 카페 모델 냉장고는 터치 스크린 LCD, 얼음/물/온수 디스펜서, RFID 칩이 있는 물 필터 등의 기능을 갖춤.
     * 냉장고에 대한 노트를 정리하다가 약 1300단어의 글을 발견함.
     * GE 물 필터 잠금을 우회하는 해킹이 필요했음.
     * 증발기 팬이 두 번 고장나 냉장실이 제대로 냉각되지 않음.
     * 냉동실 바닥에 얼음이 쌓이는 문제가 있음.
     * 냉동실이 냉각되지 않고 측면이 뜨거워지는 문제가 발생함.
     * 터치 스크린이 작동하지 않아 ebay에서 중고 부품을 구입함.
     * 중고 LCD 어셈블리가 온수 버튼을 자동으로 누르는 문제가 있었음.
     * 서비스 모드에서 팬 테스트를 통해 냄새 제거 팬이 고장난 것을 알게 됨.
     * 릴레이의 커패시터는 정상이었지만, 릴레이가 고장나 압축기가 작동하지 않음.

단순함을 유지하라

     * 단순함으로 업그레이드하기로 결정함. 상단 냉동고 냉장고를 선택함.
     * 얼음 트레이를 사용한 후, 얼음 제조기를 반품하기로 결정함.
     * 아직 브랜드나 모델은 결정하지 않음.
     * 복잡한 기술을 다루는 엔지니어링 노력이 신뢰성을 가져올 수 있지만, 복잡한 냉장고에는 충분한 가치가 없다고 느낌.

다른 가전제품 일화

     * 긴 리모델링의 한 해를 마무리함.
     * 음식물 처리기 없이 생활하는 것이 무척 편리함.
     * 오래된 스타일의 상단 로딩 세탁기가 대체로 잘 작동함.
     * 2004년부터 사용한 월풀 건조기는 몇 년 전에 한 번 난방 요소를 교체함.

토론

     * 토론 링크 제공.


    GN⁺의 의견

     * 복잡한 가전제품이 가져오는 불편함과 수리의 어려움을 강조함으로써, 단순함의 중요성을 부각시키는 사례로 흥미롭다.
     * 오래된 기술이 새로운 기술보다 더 신뢰성 있고 경제적일 수 있음을 보여줌으로써, 소비자들에게 구매 결정 시 고려해야 할 요소를 제공한다.
     * 가전제품 선택에 있어서 KISS 원칙(Keep It Simple, Stupid)의 적용이 실생활에서 어떻게 유용할 수 있는지를 실제 경험을 통해 설명함으로써, 소비자들에게 실질적인 조언을 제공한다.

        Hacker News 의견

     * 스마트 기능이나 와이파이 연결이 가능한 가전제품을 피하고, 기본 기능만 갖춘 '단순한' 가전제품을 찾는 것이 점점 어려워지고 있음. Electrolux, KitchenAid, LG 등 몇몇 브랜드에서는 여전히 기본 모델을 제공하고 있어, 이러한 제품들이 돈과 스트레스를 절약해줄 수 있음을 희망함.
     * 이 포럼의 조언에 따라 신뢰성 높은 기본형 Brother 레이저 프린터를 구입한 것이 최근 내가 한 가장 만족스러운 일임. 프린터는 그저 잘 작동할 뿐이며, 나는 그것에 대해 거의 신경 쓸 필요가 없음.
     * 가전제품 엔지니어들도 아마 '필요 없는 Kubernetes와 SPA를 사용해서 실제 기능에 집중할 수 없게 된다'는 자신들만의 불만이 있을 것임.
     * 20년 된 GE 냉장고의 콘덴서 팬과 증발기 제상 히터를 교체함. Home Assistant를 통해 SwitchBot BLE 온도 센서를 모니터링하고, 냉장고가 온도를 유지하지 못하거나 제상 주기가 제대로 작동하지 않는 것 같을 때 알림이 오도록 설정함. 부품 비용은 40달러였고, BLE 센서는 이미 가지고 있었음.
     * 프랑스에서는 프렌치 도어 냉장고를 '아메리칸 냉장고'라고 부름.
     * 처음에는 냉장고에 대해 많이 아는 사람이라고 생각했지만, 그것이 선택이 아니라는 것을 깨달음. 냉장고에 대해 기본 유지보수 외에는 아무것도 알 필요가 없다는 것이 이제는 선물처럼 느껴짐.
     * 부모님은 1970년대의 건조기와 1990년대의 냉장고를 가지고 있음. 수리가 필요했지만, 그 비용이 새 제품을 구매해야 할 정도로 비싸지는 않았음.
     * 개발된 세계에서는 수돗물이 안전하므로, 필터링된 물을 굳이 사용하지 않고 수돗물을 마시는 것이 간단함. 세균에 대한 걱정이 있다면, 필터를 통과할 수 있는 세균을 죽이기 위해 물을 끓여 마시는 것이 좋음.
     * 11년 전에 구입한 기본형 Whirlpool 냉장고는 물 분배기, 제빙기, 심지어 냉동실 내부 조명도 없었으며, 온도와 공기 흐름 조절은 단순한 노브로 이루어졌음. 이사하면서 냉장고를 옮기는 과정에서 플라스틱 드레인 팬이 깨져서, 수리 대신 중고 가전제품 매입업자에게 팔고 새 냉장고를 구입하기로 결정함.
     * 모든 가전제품이 중세 시대 또는 그 이전 것임. 부품은 단순하고 필요한 경우 쉽게 제작할 수 있음. 85년 된 냉장고를 복원하여 사용 중이며, 압축기와 냉매는 여전히 원래 것임. 수동 제상 기능이지만, 자주 제상할 필요는 없음.
"
"https://news.hada.io/topic?id=13280","이제 막 팀의 리더가 된 이들을 위한 추천 도서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       이제 막 팀의 리더가 된 이들을 위한 추천 도서

   차근차근 열심히 일하다 보니 어느새 팀의 리더가 된 당신, 혹시 리더로서의 자격과 소양은 갖추고 있다고 생각하시나요?

   팀원들이 나를 리더로 인정하고 있는지 궁금하거나, 스스로가 리더로서 옳은 방향으로 나아가고 있는지 고민된다면 이 책들이 분명 도움이 될 수 있습니다.

   리더십에 대한 수많은 책들 중에서 양서 네 권을 선별하여 추천합니다.

   더 괜찮은 리더로 성장하고 싶은 이들에게 권하고 싶은 책들을 소개합니다.
"
"https://news.hada.io/topic?id=13183","caniuse.com에서  요소가 100% 지원되지 않는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   caniuse.com에서 요소가 100% 지원되지 않는 이유

<html> 요소는 왜 CanIUse.com에서 100% 지원되지 않는가?

     * Can I Use는 웹 기술의 채택률을 추적하는 사이트로, 브라우저 사용률을 추정하고 기능 호환성을 측정하여 기능의 이용 가능성을 나타내는 수치를 제공함.
     * 현재 <html> 요소의 지원율이 97.34%로 나타나는데, 이는 <audio> 요소의 현재 지원율보다 낮음.
     * MDN에서 제공하는 데이터를 기반으로 하며, <html> 요소의 브라우저 호환성 섹션에는 표준화되지 않고 폐기된 manifest 속성과 ""secure context required""가 빨간색 X로 표시되어 있음.

추가 정보

     * MDN은 Mozilla Developer Network의 약자였으나 현재는 그냥 MDN으로 사용되고 있음.

GN⁺의 의견

     * CanIUse.com의 데이터는 때때로 혼란을 줄 수 있지만, 웹 개발자에게 여전히 유용한 자원임.
     * <html> 요소와 같은 기본 요소의 지원율이 100%가 아닌 것은 데이터 해석 방식과 오래된 브라우저의 처리 방식에 따른 것으로 보임.
     * 웹 기술의 호환성과 지원율을 파악하는 것은 웹 개발자에게 매우 중요하며, 이러한 통계는 기술 선택과 웹 사이트 최적화에 도움을 줌.

        Hacker News 의견

     * CanIUse의 ""모든 사용자"" 옵션에 대한 설명:
          + CanIUse는 전 세계 브라우저 사용 데이터를 수집하지만 모든 브라우저를 커버하지는 않음.
          + 기본 설정은 CanIUse가 추적하지 않는 브라우저를 지원하지 않는 것으로 간주함.
          + ""모든 추적된 사용자""로 변경하면 지원율이 98.71%로 나타남.
          + 차트에 나열된 브라우저 중 지원 여부가 불명확한 것의 합계는 1.27%임.
          + 이를 98.71%에 더하면 거의 100%에 가까운 수치가 나옴.
     * MDN의 이름 변경에 대한 언급:
          + MDN은 과거에 Mozilla Developer Network의 약자였으나 이제는 단순히 MDN으로 불림.
          + MDN 웹사이트에서 전체 이름을 찾을 수 없음.
     * a와 p HTML 요소의 지원율이 동일한 점에 대한 언급:
          + a와 p 요소 모두 97.34%의 지원율을 가짐.
          + 이 데이터는 MDN에서 제공됨.
     * 가장 간단한 유효한 HTML에 대한 질문:
          + HTML 태그가 없는 가장 최소한의 유효한 HTML에 대한 언급.
     * CanIUse에 ""html-manifest""라는 별도의 기능을 추가할 가치가 있음을 언급:
          + MDN은 매우 훌륭한 자원임을 강조.
     * CanIUse 사이트의 데이터 출처에 대한 설명:
          + 사이트의 기능 지원 매트릭스는 MDN의 browser-compat-data 저장소에서 가져옴.
          + CanIUse는 자체 저장소에 많은 데이터를 가지고 있으나, 특정 요소에 대한 지원율 데이터 출처는 명확하지 않음.
     * <html> 요소를 ""지원하지 않는다""는 것의 의미에 대한 질문:
          + <html> 태그를 페이지에 추가하는 것이 페이지 표시 방식에 영향을 미치는지에 대한 의문.
     * 원래 웹페이지가 <html> 요소를 사용하지 않았음을 언급:
          + CERN의 웹사이트 예시 링크 제공.
     * <html> 요소의 지원율이 다른 모든 요소보다 낮아야 하는지에 대한 질문:
          + 다른 요소의 지원율보다 <html> 요소의 지원율이 낮은 이유에 대한 명확한 답변이 없음.
"
"https://news.hada.io/topic?id=13266","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   설연휴라 가족들과 시간 보내고 푹 쉴 것 같아요. 즐거운 명절 되세요!

   대학원 진학을 위해 연구실 인턴을 하고있는데요, 출근해서 논문 좀 읽고 구현도 해야할 것 같네요. 이렇게 하지 않으면 안될 것 같아서요.

   개인적으로는 '사고의 본질'이라는 책을 읽고 싶었는데 할 수 있을지 모르겠습니다!
"
"https://news.hada.io/topic?id=13193","마우스 커서가 왜 약간 기울어져 있고 직선이 아닌가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     마우스 커서가 왜 약간 기울어져 있고 직선이 아닌가?

마우스 커서는 왜 약간 기울어져 있나요?

     * 마우스 커서가 약간 기울어진 이유는 역사적인 이유가 있음.
     * 초기에 마우스 커서는 더글러스 엥겔바트에 의해 발명되었고, 처음에는 위를 가리키는 화살표였음.
     * XEROX PARC 기계가 만들어졌을 때, 커서는 기울어진 화살표로 변경되었는데, 당시 저해상도 스크린에서는 직선(화살표의 왼쪽 가장자리)과 45도 각도(화살표의 오른쪽 가장자리)를 그리는 것이 더 쉽고 인식하기 쉬웠기 때문임.

마우스 커서의 기울기가 작은 이유

     * 마우스 커서가 버튼 위에 호버될 때 작은 손 모양으로 바뀌는데, 이 때 기울기가 더 작아짐.
     * 이는 커서의 기울기가 특정 상황에서 조정될 수 있음을 보여줌.

GN⁺의 의견

     * 마우스 커서의 기울기는 사용자 경험을 개선하기 위한 역사적인 결정에서 비롯되었음.
     * 저해상도 화면에서의 인식 용이성과 효율적인 그래픽 표현이 주된 이유였음.
     * 이러한 배경 지식은 사용자 인터페이스 디자인의 역사적 맥락을 이해하는 데 도움이 됨.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 잘못된 정보의 인기: 한 해커뉴스 질문에 대한 가장 높은 표를 받은 답변이 완전히 틀렸음에 대한 우려 표명.
          + 커서 위치 계산의 오해: (0,0) 핫스팟이 커서 위치 업데이트 계산을 단순화한다는 주장은, 다양한 모양의 커서와 핫스팟이 존재함을 고려할 때 잘못된 가정.
          + 매킨토시와 PARC의 예시: 초기 매킨토시 컴퓨터와 PARC의 작업에서 다양한 커서와 핫스팟 위치를 볼 수 있음.
          + 핫스팟의 위치: 화살표 커서의 핫스팟은 (0,0)이 아니라 (1,1)이었음.
          + 커서 구조의 정의: Cursor 구조체에는 이미지 데이터, 마스크, 핫스팟 위치가 포함됨.
     * 두 번째 댓글 요약:
          + 앨런 케이의 기여: 앨런 케이가 PARC에서 각진 마우스 커서를 만들었으나, 많은 답변들이 그의 기여를 언급하지 않음.
          + 디자인의 이유: 16x16 그리드에서 한쪽을 수직으로, 다른 한쪽을 각진 모양으로 만들어 아름다운 화살표 모양을 구현함.
     * 세 번째 댓글 요약:
          + 커서의 기울기: 커서가 왼쪽으로 기울어진 이유는 오른손잡이 도구로서의 디자인 때문일 수 있음.
          + 좌우 반전의 느낌: 오른손잡이가 오른쪽으로 기울어진 커서를 사용하면 잘못된 느낌을 받을 수 있음.
          + 좌우잡이의 경험: 왼손잡이 사용자가 커서의 기울기 때문에 왼손으로 마우스를 사용하는 것이 어색할 수 있음.
     * 네 번째 댓글 요약:
          + 마우스 커서의 역사: 마우스 커서의 역사와 문제점, 그리고 기울지 않은 역사적 커서를 다룬 유튜브 비디오 추천.
     * 다섯 번째 댓글 요약:
          + 윈도우 커서의 완벽하지 않음: 윈도우 커서가 왜 완벽하지 않게 보이는지에 대한 의문 제기.
     * 여섯 번째 댓글 요약:
          + 커서의 기울기 이유: 커서가 기울어진 이유는 화면에 표시되는 다른 요소들과 구별되기 위함과, 아미가 마우스 커서가 45도 각도로 기울어진 것과 같은 특이한 사례 언급.
     * 일곱 번째 댓글 요약:
          + 커서가 물체를 가리지 않음: 커서가 기울어져 있어서 가리키는 대상을 가리지 않게 함.
     * 여덟 번째 댓글 요약:
          + 역사적 자료의 가치: 오리지널 이더넷 사양을 포함한 역사적 자료의 중요성 강조.
     * 아홉 번째 댓글 요약:
          + 만년필과의 유사성: 커서가 만년필을 쥐는 방식을 모방한 것일 수 있음.
     * 열 번째 댓글 요약:
          + 라이트 펜에서 마우스 포인터로: 라이트 펜이 화면에 수직으로 사용되던 것에서 마우스 포인터로 전환되면서 기울어진 2D 마커로 표현됨.
"
"https://news.hada.io/topic?id=13213","[2024/01/29 ~ 02/04] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2024/01/29 ~ 02/04] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주 선정된 논문들의 경향을 살펴보면, 대규모 언어 모델(Large Language Models, LLMs) 및 그 변형들에 관한 연구가 두드러집니다. ""OLMo"", ""Advances in Multimodal LLMs"", ""Corrective RAG"", ""LLMs for Mathematical Reasoning"", ""Compression Algorithms for LLMs"", ""MoE-LLaVA"", ""Rephrasing the Web"", ""Redefining Retrieval in RAG"", ""Hallucination in LVLMs"", ""SliceGPT"" 등의 논문 제목을 바탕으로, 언어 모델의 성능 향상, 응용 확장, 효율성 증대에 초점을 맞춘 연구가 활발함을 알 수 있습니다.
     * 이러한 연구 경향은 언어 처리 기술의 한계를 극복하고 더욱 복잡한 문제를 해결하려는 학계와 산업계의 지속적인 노력이 반영된 결과로 해석될 수 있습니다. 최근 들어 LLMs는 단순한 텍스트 처리를 넘어 복잡한 수학적 추론, 다중 모달 데이터 처리, 보다 정교한 정보 검색 및 재구성 등 다양한 영역으로 응용 영역이 확대되고 있습니다. 또한, 이러한 모델들의 큰 크기와 복잡성 때문에 모델 압축과 같은 기술은 모델을 실제 환경에서 더 효율적으로 배포하고 사용할 수 있게 하는 핵심 요소로 자리 잡고 있습니다. 상대적으로 적은 자원으로 대규모 모델을 운영해야 하는 경우 이러한 기술이 중요시되는 추세입니다.
     * 또한, 'Multimodal LLMs'와 'MoE-LLaVA'에 대한 연구는 텍스트 외의 여러 형태의 데이터(예: 이미지, 소리 등)를 통합하여 처리하는 방식의 발전을 의미하며, 이는 인공지능 시스템이 현실 세계의 정보를 더욱 풍부하게 이해하고 활용할 수 있는 가능성을 보여줍니다. 모델의 해석 가능성 및 신뢰성을 높이기 위한 기법으로 'Corrective RAG'와 'Redefining Retrieval in RAG'는 모델의 추론 과정과 그 결과의 정확성을 개선하려는 시도로 볼 수 있으며, 모델들이 생성하는 콘텐츠의 질을 높이는 연구로 'Hallucination in LVLMs'와 'Rephrasing the Web'가 대표적입니다. 이 모든 추세는 다가오는 미래에 더욱 지능적이고 정교한 인공지능 시스템의 등장을 예고하는 신호로 평가됩니다.


  OLMo: 언어 모델 과학의 가속화 / OLMo: Accelerating the Science of Language Models

    논문 소개

     * 개방형 학습 코드, 개방형 데이터, 전체 모델 가중치, 평가 코드, 미세 조정 코드가 포함된 7b 파라미터 모델인 오픈 언어 모델(OLMo)을 도입하여 많은 생성 작업에서 강력한 성능을 보여주며, 이보다 작은 버전인 olmo 1b도 있습니다.

     Introduces open language model (olmo), a 7b parameter model; it includes open training code, open data, full model weights, evaluation code, and fine-tuning code; it shows strong performance on many generative tasks; there is also a smaller version of it, olmo 1b.

    논문 초록(Abstract)

     * 언어 모델(LM)은 NLP 연구와 상용 제품 모두에서 보편화되었습니다. 언어 모델의 상업적 중요성이 급증함에 따라 가장 강력한 모델도 학습 데이터, 아키텍처, 개발에 대한 중요한 세부 정보가 공개되지 않은 채 독점적인 인터페이스 뒤에 숨어 폐쇄적으로 운영되고 있습니다. 이러한 모델을 과학적으로 연구하는 데 있어 편향성과 잠재적 위험성 등 이러한 세부 사항의 중요성을 고려할 때, 연구 커뮤니티가 강력하고 진정으로 개방된 LM에 접근할 수 있어야 한다고 생각합니다. 이를 위해 이 기술 보고서에서는 언어 모델링의 과학을 구축하고 연구하기 위한 최첨단 개방형 언어 모델이자 프레임워크인 OLMo의 첫 번째 릴리스에 대해 자세히 설명합니다. 모델 가중치와 추론 코드만 공개했던 대부분의 이전 노력과는 달리, 이번 릴리스에서는 학습 데이터와 학습
       및 평가 코드를 포함한 전체 프레임워크와 OLMo를 공개합니다. 이번 릴리스가 오픈 리서치 커뮤니티에 힘을 실어주고 강화하여 새로운 혁신의 물결을 일으킬 수 있기를 바랍니다.

     Language models (LMs) have become ubiquitous in both NLP research and in commercial product offerings. As their commercial importance has surged, the most powerful models have become closed off, gated behind proprietary interfaces, with important details of their training data, architectures, and development undisclosed. Given the importance of these details in scientifically studying these models, including their biases and potential risks, we believe it is essential for the research community to have access to powerful, truly open LMs. To this end, this technical report details the first release of OLMo, a state-of-the-art, truly Open Language Model and its framework to build and study the science of language modeling. Unlike most prior efforts that have only released model weights and inference code, we release OLMo and the whole framework, including training data and training and evaluation code. We hope this release will empower and strengthen the open research
     community and inspire a new wave of innovation.

    논문 링크

   https://arxiv.org/abs/2402.00838

    더 읽어보기

   https://x.com/omarsar0/status/1753080417530318872


  MM-LLM: 멀티모달 대규모 언어 모델의 최근 발전 사항 / MM-LLMs: Recent Advances in MultiModal Large Language Models

    논문 소개

     * 멀티모달 대규모 언어 모델에 대한 모델 아키텍처 및 학습 파이프라인의 설계 공식을 설명하는 포괄적인 서베이 논문입니다.

     A comprehensive survey outlining design formulations for model architecture and training pipeline around multimodal large language models.

    논문 초록(Abstract)

     * 지난 한 해 동안 다중모달 대규모 언어 모델(MM-LLM)은 비용 효율적인 학습 전략을 통해 MM 입력 또는 출력을 지원하기 위해 기성 LLM을 보강하는 등 상당한 발전을 거듭해 왔습니다. 그 결과 LLM의 고유한 추론 및 의사결정 능력을 보존할 뿐만 아니라 다양한 범위의 MM 작업을 지원할 수 있게 되었습니다. 이 논문에서는 MM-LLM에 대한 추가 연구를 촉진하기 위한 포괄적인 설문조사를 제공합니다. 구체적으로, 먼저 모델 아키텍처와 학습 파이프라인에 대한 일반적인 설계 공식에 대해 설명합니다. 그런 다음, 26$의 기존 MM-LLM을 간략하게 소개하고, 각각의 특정 공식이 특징인 MM-LLM을 소개합니다. 또한 주요 벤치마크에서 MM-LLM의 성능을 검토하고 MM-LLM의 효능을 향상시키기 위한 주요 트레이닝 레시피를 요약합니다. 마지막으로, MM-LLM의 유망한 방향을 모색하는
       동시에 이 분야의 최신 개발 동향을 실시간으로 추적하는 웹사이트를 운영합니다. 이번 설문조사가 MM-LLM 분야의 지속적인 발전에 기여할 수 있기를 바랍니다.

     In the past year, MultiModal Large Language Models (MM-LLMs) have undergone substantial advancements, augmenting off-the-shelf LLMs to support MM inputs or outputs via cost-effective training strategies. The resulting models not only preserve the inherent reasoning and decision-making capabilities of LLMs but also empower a diverse range of MM tasks. In this paper, we provide a comprehensive survey aimed at facilitating further research of MM-LLMs. Specifically, we first outline general design formulations for model architecture and training pipeline. Subsequently, we provide brief introductions of $26$ existing MM-LLMs, each characterized by its specific formulations. Additionally, we review the performance of MM-LLMs on mainstream benchmarks and summarize key training recipes to enhance the potency of MM-LLMs. Lastly, we explore promising directions for MM-LLMs while concurrently maintaining a real-time tracking website for the latest developments in the field. We hope
     that this survey contributes to the ongoing advancement of the MM-LLMs domain.

    논문 링크

   https://arxiv.org/abs/2401.13601

    더 읽어보기

   https://x.com/omarsar0/status/1751705689964089616


  CRAG: 자가 수정 검색 증강 생성 / Corrective Retrieval Augmented Generation

    논문 소개

     * RAG 시스템에서 생성의 견고성을 향상시키기 위해 수정 검색 증강 생성(CRAG)을 제안하고, 핵심 아이디어는 검색기의 자가 수정 구성 요소를 구현하고 증강 생성을 위해 검색된 문서의 활용도를 향상시키는 것이며, 검색 평가기는 쿼리가 주어지면 검색된 문서의 전반적인 품질을 평가하고, 웹 검색과 최적화된 지식 활용 작업을 사용하면 자동 자가 수정과 검색된 문서의 효율적인 활용도를 향상시킬 수 있습니다.

     Proposes corrective retrieval augmented generation (CRAG) to improve the robustness of generation in a rag system; the core idea is to implement a self-correct component for the retriever and improve the utilization of retrieved documents for augmenting generation; the retrieval evaluator helps to assess the overall quality of retrieved documents given a query; using web search and optimized knowledge utilization operations can improve automatic self-correction and efficient utilization of retrieved documents.

    논문 초록(Abstract)

     * 대규모 언어 모델(LLM)은 생성된 텍스트의 정확성을 캡슐화하는 파라메트릭 지식만으로는 확보할 수 없기 때문에 필연적으로 환각 현상을 보일 수밖에 없습니다. 검색 증강 생성(RAG)은 LLM을 보완할 수 있는 실용적인 방법이지만 검색된 문서의 연관성에 크게 의존하기 때문에 검색이 잘못될 경우 모델이 어떻게 작동할지에 대한 우려가 제기됩니다. 이를 위해, 저희는 생성의 견고성을 개선하기 위해 수정 검색 증강 생성(CRAG)을 제안합니다. 특히, 경량 검색 평가기는 쿼리에 대해 검색된 문서의 전반적인 품질을 평가하여 다양한 지식 검색 작업을 트리거할 수 있는 신뢰도를 반환하도록 설계되었습니다. 정적이고 제한된 말뭉치에서 검색하면 최적이 아닌 문서만 반환할 수 있기 때문에 대규모 웹 검색은 검색 결과를 보강하기 위한 확장으로 활용됩니다.
       또한, 검색된 문서가 핵심 정보에 선택적으로 집중하고 관련 없는 정보를 걸러낼 수 있도록 분해 후 재구성 알고리즘이 설계되어 있습니다. CRAG는 플러그 앤 플레이 방식으로 다양한 RAG 기반 접근 방식과 원활하게 결합할 수 있습니다. 짧은 형식과 긴 형식의 생성 작업을 포함하는 4개의 데이터셋에 대한 실험 결과, CRAG가 RAG 기반 접근법의 성능을 크게 향상시킬 수 있는 것으로 나타났습니다.

     Large language models (LLMs) inevitably exhibit hallucinations since the accuracy of generated texts cannot be secured solely by the parametric knowledge they encapsulate. Although retrieval-augmented generation (RAG) is a practicable complement to LLMs, it relies heavily on the relevance of retrieved documents, raising concerns about how the model behaves if retrieval goes wrong. To this end, we propose the Corrective Retrieval Augmented Generation (CRAG) to improve the robustness of generation. Specifically, a lightweight retrieval evaluator is designed to assess the overall quality of retrieved documents for a query, returning a confidence degree based on which different knowledge retrieval actions can be triggered. Since retrieval from static and limited corpora can only return sub-optimal documents, large-scale web searches are utilized as an extension for augmenting the retrieval results. Besides, a decompose-then-recompose algorithm is designed for retrieved
     documents to selectively focus on key information and filter out irrelevant information in them. CRAG is plug-and-play and can be seamlessly coupled with various RAG-based approaches. Experiments on four datasets covering short- and long-form generation tasks show that CRAG can significantly improve the performance of RAG-based approaches.

    논문 링크

   https://arxiv.org/abs/2401.15884

    더 읽어보기

   https://x.com/omarsar0/status/1752173216942944556


  수학적 추론을 위한 대규모 언어 모델: 진전과 도전 과제 / Large Language Models for Mathematical Reasoning: Progresses and Challenges

    논문 소개

     * 수학적 추론을 위한 머신러닝의 연구 개발 개요를 소개하고, 수학적 추론을 위한 머신러닝에 대한 지속적인 연구에 영감을 주기 위한 발전, 기능, 한계 및 응용에 대해 논의합니다.

     Introduces an overview of research developments in llms for mathematical reasoning; discusses advancements, capabilities, limitations, and applications to inspire ongoing research on llms for mathematics.

    논문 초록(Abstract)

     * 수학적 추론은 인간 지능의 근본적인 인지 능력을 평가하는 초석 역할을 합니다. 최근에는 수학적 문제의 자동 해결을 목표로 하는 대규모 언어 모델(LLM)의 개발이 눈에 띄게 급증하고 있습니다. 그러나 수학적 문제 유형의 환경은 매우 방대하고 다양하며, 다양한 데이터 세트와 환경에서 LLM 지향 기술이 평가되고 있습니다. 이러한 다양성 때문에 급성장하는 이 분야에서 진정한 발전과 장애물을 파악하기가 어렵습니다. 이 설문조사는 네 가지 중요한 차원을 다루기 위해 노력했습니다: i) 조사된 다양한 수학 문제와 해당 데이터셋에 대한 포괄적인 탐구, ii) 수학 문제 해결을 위해 제안된 LLM 지향 기법의 스펙트럼에 대한 조사, iii) 수학 문제 해결에서 LLM에 영향을 미치는 요인 및 우려에 대한 개요, iv) 이 영역 내에서 지속되는 도전에 대한 해명. 우리가
       아는 한, 이 설문조사는 수학 영역에서 LLM의 지형에 대한 최초의 광범위한 조사 중 하나로, 빠르게 진화하는 이 분야의 현재 상태, 성과 및 향후 과제에 대한 총체적인 관점을 제공합니다.

     Mathematical reasoning serves as a cornerstone for assessing the fundamental cognitive capabilities of human intelligence. In recent times, there has been a notable surge in the development of Large Language Models (LLMs) geared towards the automated resolution of mathematical problems. However, the landscape of mathematical problem types is vast and varied, with LLM-oriented techniques undergoing evaluation across diverse datasets and settings. This diversity makes it challenging to discern the true advancements and obstacles within this burgeoning field. This survey endeavors to address four pivotal dimensions: i) a comprehensive exploration of the various mathematical problems and their corresponding datasets that have been investigated; ii) an examination of the spectrum of LLM-oriented techniques that have been proposed for mathematical problem-solving; iii) an overview of factors and concerns affecting LLMs in solving math; and iv) an elucidation of the persisting
     challenges within this domain. To the best of our knowledge, this survey stands as one of the first extensive examinations of the landscape of LLMs in the realm of mathematics, providing a holistic perspective on the current state, accomplishments, and future challenges in this rapidly evolving field.

    논문 링크

   https://arxiv.org/abs/2402.00157

    더 읽어보기

   https://x.com/omarsar0/status/1753424518171738194
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  언어 모델용 압축 알고리즘에 대한 종합적인 조사 / A Comprehensive Survey of Compression Algorithms for Language Models

    논문 소개

     * 가지치기, 양자화, 지식 증류, 낮은 순위 근사화, 매개변수 공유, 효율적인 아키텍처 설계와 같은 압축 알고리즘을 다룹니다.

     Covers compression algorithms like pruning, quantization, knowledge distillation, low-rank approximation, parameter sharing, and efficient architecture design.

    논문 초록(Abstract)

     * 정확도를 떨어뜨리지 않으면서 언어 모델을 압축하려면 어떻게 해야 할까요? 탄소 배출량 증가, 비싼 유지보수 비용 등 언어 모델의 거대한 크기로 인한 부작용 없이 최근 언어 모델의 괄목할 만한 발전의 혜택을 누리기 위해 언어 모델 압축 알고리즘의 수가 급속도로 증가하고 있습니다. 수많은 압축 알고리즘이 언어 모델을 압축하는 데 괄목할 만한 발전을 보였지만, 아이러니하게도 알고리즘의 수가 너무 많아 새로운 트렌드를 파악하고 그 근간이 되는 기본 개념을 파악하는 것이 어려워지고 있습니다. 이 논문에서는 가지치기, 양자화, 지식 증류, 저순위 근사화, 매개변수 공유, 효율적인 아키텍처 설계 등 다양한 압축 알고리즘을 조사하고 요약합니다. 다양한 압축 알고리즘의 전반적인 동향을 정리할 뿐만 아니라 대표적인 알고리즘을 선정하여 심층
       분석합니다. 압축 알고리즘의 범주별 가치와 대용량 언어 모델의 등장으로 큰 영향을 미치고 있는 저비용 압축 알고리즘의 바람직한 속성에 대해 논의합니다. 마지막으로 설문조사 결과를 바탕으로 향후 유망한 연구 주제를 소개합니다.

     How can we compress language models without sacrificing accuracy? The number of compression algorithms for language models is rapidly growing to benefit from remarkable advances of recent language models without side effects due to the gigantic size of language models, such as increased carbon emissions and expensive maintenance fees. While numerous compression algorithms have shown remarkable progress in compressing language models, it ironically becomes challenging to capture emerging trends and identify the fundamental concepts underlying them due to the excessive number of algorithms. In this paper, we survey and summarize diverse compression algorithms including pruning, quantization, knowledge distillation, low-rank approximation, parameter sharing, and efficient architecture design. We not only summarize the overall trend of diverse compression algorithms but also select representative algorithms and provide in-depth analyses of them. We discuss the value of each
     category of compression algorithms, and the desired properties of low-cost compression algorithms which have a significant impact due to the emergence of large language models. Finally, we introduce promising future research topics based on our survey results.

    논문 링크

   https://arxiv.org/abs/2401.15347

    더 읽어보기

   https://x.com/omarsar0/status/1752746770377974072


  MoE-LLaVA: 대규모 비전 언어 모델을 위한 전문가 조합 / MoE-LLaVA: Mixture of Experts for Large Vision-Language Models

    논문 소개

     * 대규모 시각 언어 모델을 위해 여러 전문가가 함께 튜닝하여 일정한 계산 비용으로 파라미터를 대폭 줄인 희소 모델을 구축하는 이 접근 방식은 멀티모달 학습 및 모델 희소성과 관련된 성능 저하를 해결하는 데도 도움이 됩니다.

     Employs mixture of experts tuning for large vision-language models which constructs a sparse model with a substantial reduction in parameters with a constant computational cost; this approach also helps to address performance degradation associated with multi-modal learning and model sparsity.

    논문 초록(Abstract)

     * 대규모 시각 언어 모델(LVLM)의 경우 모델을 확장하면 성능을 효과적으로 개선할 수 있습니다. 그러나 모델 파라미터를 확장하면 계산의 각 토큰에 대해 모든 모델 파라미터가 활성화되기 때문에 학습 및 추론 비용이 크게 증가합니다. 본 연구에서는 매개변수 수는 엄청나게 많지만 계산 비용은 일정한 희소 모델을 구축할 수 있고, 일반적으로 멀티모달 학습 및 모델 희소성과 관련된 성능 저하를 효과적으로 해결할 수 있는 새로운 학습 전략 MoE 튜닝을 LVLM을 위한 새로운 학습 전략으로 제안합니다. 또한 MoE 기반 스파스 LVLM 아키텍처인 MoE-LLaVA 프레임워크를 소개합니다. 이 프레임워크는 배포 중에 라우터를 통해 상위 k명의 전문가만 활성화하고 나머지 전문가들은 비활성 상태로 유지합니다. 유니티의 광범위한 실험을 통해 시각적 이해에 있어 MoE-LLaVA의
       뛰어난 기능과 모델 출력의 환각을 줄일 수 있는 잠재력을 확인할 수 있었습니다. 놀랍게도, 30억 개의 드물게 활성화된 매개변수만으로 MoE-LLaVA는 다양한 시각적 이해 데이터셋에서 LLaVA-1.5-7B에 필적하는 성능을 보여주었으며, 심지어 물체 환각 벤치마크에서 LLaVA-1.5-13B를 능가하는 성능을 보였습니다. 유니티는 MoE-LLaVA를 통해 희소 LVLM의 기준선을 확립하고, 보다 효율적이고 효과적인 멀티모달 학습 시스템 개발을 위한 향후 연구에 귀중한 인사이트를 제공하고자 합니다. 코드는 \url{https://github.com/PKU-YuanGroup/MoE-LLaVA}에서 공개됩니다.

     For Large Vision-Language Models (LVLMs), scaling the model can effectively improve performance. However, expanding model parameters significantly increases the training and inferring costs, as all model parameters are activated for each token in the calculation. In this work, we propose a novel training strategy MoE-tuning for LVLMs, which can constructing a sparse model with an outrageous number of parameter but a constant computational cost, and effectively addresses the performance degradation typically associated with multi-modal learning and model sparsity. Furthermore, we present the MoE-LLaVA framework, a MoE-based sparse LVLM architecture. This framework uniquely activates only the top-k experts through routers during deployment, keeping the remaining experts inactive. Our extensive experiments highlight the excellent capabilities of MoE-LLaVA in visual understanding and its potential to reduce hallucinations in model outputs. Remarkably, with just 3 billion
     sparsely activated parameters, MoE-LLaVA demonstrates performance comparable to the LLaVA-1.5-7B on various visual understanding datasets and even surpasses the LLaVA-1.5-13B in object hallucination benchmarks. Through MoE-LLaVA, we aim to establish a baseline for sparse LVLMs and provide valuable insights for future research in developing more efficient and effective multi-modal learning systems. Code is released at \url{https://github.com/PKU-YuanGroup/MoE-LLaVA}.

    논문 링크

   https://arxiv.org/abs/2401.15947

    더 읽어보기

   https://github.com/PKU-YuanGroup/MoE-LLaVA

   https://x.com/LinBin46984/status/1753403875531375003


  웹 다시 쓰기: 컴퓨팅 및 데이터 효율적 언어 모델링을 위한 레시피 / Rephrasing the Web: A Recipe for Compute and Data-Efficient Language Modeling

    논문 소개

     * '위키피디아처럼' 또는 '질의응답 형식' 등 특정 스타일과 형식으로 웹 문서를 의역하라는 메시지가 표시되는 기성 지침 조정 모델을 사용하여 실제 및 합성 의역에 대해 인공지능을 공동으로 사전 학습함으로써 사전 학습 속도를 최대 3배까지 높이고 난해성을 개선하며 많은 작업에서 제로 샷 질문 답변의 정확도를 향상시킵니다.

     Uses an off-the-shelf instruction-tuned model prompted to paraphrase web documents in specific styles and formats such as “like wikipedia” or “question-answer format” to jointly pre-train llms on real and synthetic rephrases; it speeds up pre-training by ~3x, improves perplexity, and improves zero-shot question answering accuracy on many tasks.

    논문 초록(Abstract)

     * 대규모 언어 모델은 대개 구조화되지 않고 노이즈가 많으며 구문이 잘못된 웹의 방대한 스크랩을 기반으로 학습됩니다. 현재의 확장 법칙에 따르면 이러한 데이터에서 학습하려면 풍부한 컴퓨팅과 데이터가 모두 필요하며, 이는 학습 중인 모델의 크기에 따라 증가합니다. 이는 사전 학습과 관련된 막대한 컴퓨팅 비용과 기간, 그리고 웹상의 고품질 데이터 부족으로 인해 실현 불가능합니다. 이 연구에서는 웹상의 문서를 '위키피디아처럼' 또는 '질의응답 형식'과 같은 특정 스타일로 의역하도록 유도하는 기성 명령어 튜닝 모델을 사용하여 실제 및 합성 의역에 대해 LLM을 공동으로 사전 학습하는 웹 의역 증강 사전 학습($\textbf{WRAP}$)을 제안합니다. 먼저, 자연적으로 노이즈가 많은 C4 데이터셋에 WRAP을 사용하면 사전 학습 속도가 $\sim3x$ 빨라진다는 것을
       보여줍니다. 동일한 사전 학습 컴퓨팅 예산으로 더미의 여러 하위 집합에서 평균 10% 이상 난해도를 개선하고, 13개 과제에서 영샷 문제 정답 정확도를 2% 이상 향상시킵니다. 둘째, 재구문 스타일이 모델 성능에 미치는 영향을 조사하여 학습 데이터의 구성이 OOD 설정에서 LLM의 성능에 어떤 영향을 미칠 수 있는지에 대한 인사이트를 제공합니다. 우리가 얻은 이득은 재구문된 합성 데이터가 (i) 다운스트림 평가 스타일을 밀접하게 반영하는 스타일 다양성을 포함하고, (ii) 웹 스크랩된 데이터보다 '품질'이 높기 때문에 실제 데이터보다 활용도가 높다는 사실에 기인합니다.

     Large language models are trained on massive scrapes of the web, which are often unstructured, noisy, and poorly phrased. Current scaling laws show that learning from such data requires an abundance of both compute and data, which grows with the size of the model being trained. This is infeasible both because of the large compute costs and duration associated with pre-training, and the impending scarcity of high-quality data on the web. In this work, we propose Web Rephrase Augmented Pre-training ($\textbf{WRAP}$) that uses an off-the-shelf instruction-tuned model prompted to paraphrase documents on the web in specific styles such as ""like Wikipedia"" or in ""question-answer format"" to jointly pre-train LLMs on real and synthetic rephrases. First, we show that using WRAP on the C4 dataset, which is naturally noisy, speeds up pre-training by $\sim3x$. At the same pre-training compute budget, it improves perplexity by more than 10% on average across different subsets of the
     Pile, and improves zero-shot question answer accuracy across 13 tasks by more than 2%. Second, we investigate the impact of the re-phrasing style on the performance of the model, offering insights into how the composition of the training data can impact the performance of LLMs in OOD settings. Our gains are attributed to the fact that re-phrased synthetic data has higher utility than just real data because it (i) incorporates style diversity that closely reflects downstream evaluation style, and (ii) has higher 'quality' than web-scraped data.

    논문 링크

   https://arxiv.org/abs/2401.16380

    더 읽어보기

   https://x.com/pratyushmaini/status/1752337225097076809


  노이즈의 힘: RAG 시스템을 위한 검색의 재정의 / The Power of Noise: Redefining Retrieval for RAG Systems

    논문 소개

     * 래그 시스템의 검색 구성 요소를 개선하는 데 필요한 구성 요소에 초점을 맞춘 연구로, 관련 정보의 위치는 쿼리 근처에 배치해야 하며 그렇지 않을 경우 모델이 정보에 집중하기 어렵다는 점, 놀랍게도 관련 문서가 반드시 래그 시스템의 성능 향상으로 이어지지는 않는다는 점, 더 의외로 관련성이 없고 노이즈가 많은 문서도 올바르게 배치하면 정확도를 높이는 데 도움이 될 수 있다는 점 등을 확인합니다.

     a study that focuses on the components needed to improve the retrieval component of a rag system; confirms that the position of relevant information should be placed near the query, the model will struggle to attend to the information if this is not the case; surprisingly, it finds that related documents don't necessarily lead to improved performance for the rag system; even more unexpectedly, irrelevant and noisy documents can help drive up accuracy if placed correctly.

    논문 초록(Abstract)

     * 검색 증강 생성(RAG) 시스템은 기존의 대규모 언어 모델(LLM)에 비해 크게 발전한 시스템입니다. RAG 시스템은 정보 검색(IR) 단계를 통해 검색된 외부 데이터를 통합하여 생성 능력을 향상시킴으로써 사전 학습된 지식과 제한된 컨텍스트 창으로 제한되는 표준 LLM의 한계를 극복합니다. 이 분야의 대부분의 연구는 주로 RAG 시스템 내에서 LLM의 생성적 측면에 집중되어 있습니다. 본 연구는 RAG 시스템에 대한 IR 구성 요소의 영향을 철저하고 비판적으로 분석함으로써 이러한 간극을 메웁니다. 이 논문에서는 검색해야 하는 문서의 유형에 초점을 맞춰 효과적인 RAG의 신속한 구성을 위해 검색기가 갖춰야 할 특성을 분석합니다. 문서와 프롬프트의 관련성, 문서의 위치, 문맥에 포함된 문서 수 등 다양한 요소를 평가합니다. 그 결과, 관련성이 낮은 문서를 포함하면
       품질이 저하될 것이라는 초기 가정과 달리 의외로 정확도가 30% 이상 향상될 수 있다는 인사이트를 발견했습니다. 이러한 결과는 검색과 언어 생성 모델을 통합하기 위한 전문화된 전략 개발의 필요성을 강조하며, 향후 이 분야의 연구를 위한 토대를 마련합니다.

     Retrieval-Augmented Generation (RAG) systems represent a significant advancement over traditional Large Language Models (LLMs). RAG systems enhance their generation ability by incorporating external data retrieved through an Information Retrieval (IR) phase, overcoming the limitations of standard LLMs, which are restricted to their pre-trained knowledge and limited context window. Most research in this area has predominantly concentrated on the generative aspect of LLMs within RAG systems. Our study fills this gap by thoroughly and critically analyzing the influence of IR components on RAG systems. This paper analyzes which characteristics a retriever should possess for an effective RAG's prompt formulation, focusing on the type of documents that should be retrieved. We evaluate various elements, such as the relevance of the documents to the prompt, their position, and the number included in the context. Our findings reveal, among other insights, that including irrelevant
     documents can unexpectedly enhance performance by more than 30% in accuracy, contradicting our initial assumption of diminished quality. These results underscore the need for developing specialized strategies to integrate retrieval with language generation models, thereby laying the groundwork for future research in this field.

    논문 링크

   https://arxiv.org/abs/2401.14887

    더 읽어보기

   https://x.com/omarsar0/status/1751803310267314509


  대규모 시각 언어 모델의 환각에 대한 서베이 논문 / A Survey on Hallucination in Large Vision-Language Models

    논문 소개

     * 대규모 시각-언어 모델(LVLM; Large Vision-Language Model)에서의 환각 문제와 환각을 완화하기 위한 기술에 대해 논의하고, lvlm 환각 평가 방법과 벤치마크를 소개하며, lvlm 환각의 원인과 이를 완화할 수 있는 잠재적 방법에 대한 팁과 유용한 분석을 제공합니다.

     Discusses hallucination issues and techniques to mitigate hallucination in large vision-language models (lvlm); it introduces lvlm hallucination evaluation methods and benchmarks; provides tips and a good analysis of the causes of lvlm hallucinations and potential ways to mitigate them.

    논문 초록(Abstract)

     * 최근 대규모 시각-언어 모델(LVLM)의 개발은 실용적인 구현 가능성으로 인해 AI 환경에서 점점 더 많은 주목을 받고 있습니다. 그러나 '환각', 더 구체적으로는 사실적인 시각적 콘텐츠와 그에 상응하는 텍스트 생성 사이의 불일치는 LVLM을 활용하는 데 있어 중대한 과제를 제기합니다. 이 종합적인 설문조사에서는 LVLM과 관련된 환각을 분석하여 개요를 파악하고 향후 완화 방안을 모색하고자 합니다. 조사는 먼저 LVLM의 환각 개념을 명확히 정의하고, 다양한 환각 증상을 제시하며, LVLM 환각에 내재된 고유한 문제를 강조하는 것으로 시작합니다. 이어서, LVLM 특유의 환각을 평가하기 위해 특별히 맞춤화된 벤치마크와 방법론을 간략하게 설명합니다. 또한 학습 데이터와 모델 구성 요소에서 얻은 인사이트를 포함하여 이러한 환각의 근본 원인에 대해 자세히
       살펴봅니다. 또한 환각을 완화하기 위한 기존의 방법을 비판적으로 검토합니다. 마지막으로 LVLM 내 환각과 관련된 미해결 질문과 향후 방향에 대해 논의하며 이번 조사를 마무리합니다.

     Recent development of Large Vision-Language Models (LVLMs) has attracted growing attention within the AI landscape for its practical implementation potential. However, ``hallucination'', or more specifically, the misalignment between factual visual content and corresponding textual generation, poses a significant challenge of utilizing LVLMs. In this comprehensive survey, we dissect LVLM-related hallucinations in an attempt to establish an overview and facilitate future mitigation. Our scrutiny starts with a clarification of the concept of hallucinations in LVLMs, presenting a variety of hallucination symptoms and highlighting the unique challenges inherent in LVLM hallucinations. Subsequently, we outline the benchmarks and methodologies tailored specifically for evaluating hallucinations unique to LVLMs. Additionally, we delve into an investigation of the root causes of these hallucinations, encompassing insights from the training data and model components. We also
     critically review existing methods for mitigating hallucinations. The open questions and future directions pertaining to hallucinations within LVLMs are discussed to conclude this survey.

    논문 링크

   https://arxiv.org/abs/2402.00253

    더 읽어보기

   https://x.com/omarsar0/status/1753449211931079101


  SliceGPT: 행과 열을 삭제하여 대용량 언어 모델 압축하기 / SliceGPT: Compress Large Language Models by Deleting Rows and Columns

    논문 소개

     * 각 가중치 행렬을 더 작은 밀도 행렬로 대체하는 학습 후 스파스화 체계를 제안하는 새로운 LLM 압축 기법으로, 네트워크의 임베딩 차원을 줄이고 밀도 모델의 제로샷 성능을 대부분 유지하면서 라마2-70b 및 파이-2 모델의 모델 파라미터를 최대 20%까지 제거할 수 있습니다.

     A new llm compression technique that proposes a post-training sparsification scheme that replaces each weight matrix with a smaller dense matrix; helps reduce the embedding dimension of the network and can remove up to 20% of model parameters for llama2-70b and phi-2 models while retaining most of the zero-shot performance of the dense models.

    논문 초록(Abstract)

     * 대규모 언어 모델은 자연어 처리의 초석이 되었지만, 이를 사용하려면 컴퓨팅 및 메모리 리소스 측면에서 상당한 비용이 발생합니다. 스파스화는 이러한 리소스 제약을 완화할 수 있는 솔루션을 제공하며, 최근 연구에서는 학습된 모델을 사후에 스파스화할 수 있다는 사실이 밝혀졌습니다. 기존 희소화 기법은 추가적인 데이터 구조가 필요하고 현재 하드웨어로는 속도 향상에 한계가 있다는 문제에 직면해 있습니다. 이 논문에서는 각 가중치 행렬을 더 작은(밀도가 높은) 행렬로 대체하여 네트워크의 임베딩 차원을 줄이는 새로운 학습 후 희소화 방식인 SliceGPT를 소개합니다. 광범위한 실험을 통해 SliceGPT는 LLAMA2-70B, OPT 66B, Phi-2 모델에서 모델 파라미터(임베딩 포함)를 최대 25%까지 제거하면서도 고밀도 모델의 제로 샷 작업 성능을 각각 99%, 99%, 90%로 유지할
       수 있음을 보여주었습니다. 슬라이스 모델은 더 적은 수의 GPU에서 실행되며 추가 코드 최적화 없이도 더 빠르게 실행됩니다. 24GB 소비자용 GPU에서는 LLAMA2-70B의 추론을 위한 총 컴퓨팅을 고밀도 모델의 64%로 줄이고, 40GB A100 GPU에서는 66%로 줄였습니다. 유니티는 트랜스포머 네트워크에서 계산 불변성이라는 새로운 인사이트를 제공하며, 이를 통해 SliceGPT가 사전 학습된 모델의 메모리 및 계산 수요를 줄일 수 있는 미래의 길을 열어줄 것으로 기대합니다. 코드는 https://github.com/microsoft/TransformerCompression 에서 확인할 수 있습니다

     Large language models have become the cornerstone of natural language processing, but their use comes with substantial costs in terms of compute and memory resources. Sparsification provides a solution to alleviate these resource constraints, and recent works have shown that trained models can be sparsified post-hoc. Existing sparsification techniques face challenges as they need additional data structures and offer constrained speedup with current hardware. In this paper we present SliceGPT, a new post-training sparsification scheme which replaces each weight matrix with a smaller (dense) matrix, reducing the embedding dimension of the network. Through extensive experimentation, we show that SliceGPT can remove up to 25% of the model parameters (including embeddings) for LLAMA2-70B, OPT 66B and Phi-2 models while maintaining 99%, 99% and 90% zero-shot task performance of the dense model respectively. Our sliced models run on fewer GPUs and run faster without any additional
     code optimization: on 24GB consumer GPUs we reduce the total compute for inference on LLAMA2-70B to 64% of that of the dense model; on 40GB A100 GPUs we reduce it to 66%. We offer a new insight, computational invariance in transformer networks, which enables SliceGPT and we hope it will inspire and enable future avenues to reduce memory and computation demands for pre-trained models. Code is available at: https://github.com/microsoft/TransformerCompression

    논문 링크

   https://arxiv.org/abs/2401.15024v1

    더 읽어보기

   https://github.com/microsoft/TransformerCompression

   https://x.com/_akhaliq/status/1751796334531592496


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-c5e


   ⚠️광고⚠️: 파이토치 한국 사용자 모임이 정리한 이 글이 유용하셨나요? 회원으로 가입하시면 주요 글들을 이메일로 보내드립니다! (기본은 Weekly지만 Daily로 변경도 가능합니다.)
"
"https://news.hada.io/topic?id=13197","한 재무담당자가 DeepFake한 CFO와의 화상 통화 후 사기꾼에게 2500만 달러 송금","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           한 재무담당자가 DeepFake한 CFO와의 화상 통화 후 사기꾼에게 2500만 달러 송금

     * 홍콩 경찰에 따르면, 한 다국적 기업의 재무 담당자가 딥페이크 기술을 사용하여 회사의 최고재무책임자(CFO)로 가장한 사기꾼들에게 2천5백만 달러를 송금하도록 속임
     * 사기꾼들은 딥페이크로 재현된 가짜 직원들과의 화상 회의를 통해 재무 담당자를 속임
     * 재무 담당자는 영국에 기반을 둔 CFO로부터 비밀 거래를 요구하는 메시지를 받고 초기에는 피싱 의심, 하지만 화상 회의에서 동료로 인식한 사람들의 모습과 목소리에 속아 의심을 접음

홍콩에서 발생한 딥페이크 사기 사건

     * 홍콩 경찰은 최근 사람들을 속여 돈을 훔치기 위해 딥페이크 기술을 사용한 여러 사건이 발생했다고 발표
     * 경찰은 이와 관련하여 여섯 명을 체포함
     * 경찰은 지난해 7월부터 9월 사이에 분실된 것으로 보고된 홍콩 신분증 8개를 사용하여 90건의 대출 신청과 54건의 은행 계좌 개설이 이루어졌다고 밝힘
     * 적어도 20번의 경우, AI 딥페이크가 신분증에 있는 사람들을 모방하여 얼굴 인식 프로그램을 속임
     * 가짜 CFO와 관련된 사기는 재무 담당자가 본사와 확인한 후에야 발견됨

전 세계적으로 인공지능 기술에 대한 우려 증가

     * 전 세계적으로 딥페이크 기술의 발전과 그로 인한 악용 가능성에 대한 우려가 커짐
     * 1월 말, 미국 팝스타 테일러 스위프트의 AI 생성 포르노 이미지가 소셜 미디어에 퍼지며 인공지능 기술이 가진 해로운 잠재력을 강조함
     * 성적으로 암시적이고 노골적인 자세를 취한 가수의 사진들은 소셜 플랫폼에서 삭제되기 전에 수천만 번 조회됨

GN⁺의 의견

     * 딥페이크 기술의 발전은 사회적, 경제적 영역에서 심각한 위협이 될 수 있음을 보여줌. 이 기술이 어떻게 사기와 범죄에 악용될 수 있는지를 이해하는 것이 중요함
     * 이 기사는 딥페이크 기술의 위험성에 대한 인식을 높이고, 개인과 기업이 보안에 더욱 주의를 기울여야 하는 이유를 강조함
     * 기술의 발전이 가져오는 부정적인 측면에 대한 경각심을 일깨우고, 이에 대한 대응책 마련의 중요성을 알리는 데 이 기사가 도움이 될 것임

        Hacker News 의견

     * 많은 미국의 중상급 호텔들이 인도 출신의 Patel 성을 가진 사람들에 의해 소유되고 있음.
          + Patel 성을 가진 사람이 긴급한 상황을 이유로 돈을 송금해달라고 전화하는 사기가 흔함.
          + 호텔 직원들이 이를 믿고 금고를 뜯거나 개인 계좌에서 돈을 송금하기도 함.
          + 이러한 사기는 AI나 딥페이크 기술 없이 사회공학적 기법을 사용함.
     * ""파워 디스턴스""라는 문화적 요소가 이러한 사기에 영향을 줄 수 있음.
          + 일부 문화에서는 절차를 무시하고 상사의 지시에 무조건 복종함.
          + 미국의 일부 하드웨어 기술 회사에서도 비슷한 상황이 보도된 바 있음.
     * 프랑스에서는 CEO, CFO, 변호사로 가장한 전화에 속아 돈을 송금한 직원들이 있었음.
          + 2022/2023년에 체포된 프랑코-이스라엘 갱단이 최소 3800만 유로를 사기침.
          + 이들은 딥페이크 AI 없이 CEO를 가장함.
     * 다중 참가자 비디오 회의에서 모든 참가자가 가짜였다는 주장이 있음.
          + 이는 실제일 수도 있지만, 직원이 핑계로 딥페이크를 주장할 수도 있음.
          + 사기꾼들이 부모나 조부모에게 자녀인 척 돈을 요구하는 비디오 통화를 대량으로 할 때가 언제일지, 이를 어떻게 막을 수 있을지에 대한 질문이 제기됨.
     * 보스턴에 기반을 둔 금융 종사자가 2023년에 사기꾼들에게 600만 달러를 송금함.
          + 사회공학적 요소가 있었지만 딥페이크에 대한 언급은 없었음.
          + 2023년 MGM 카지노 해킹 사건에서는 딥페이크를 사용해 기술 지원 직원을 속여 MFA를 위반하게 함.
     * CFO가 딥페이크 전문가와 연계하여 이익을 나누는 가능성에 대한 추측이 있음.
          + 이는 실제로 발생한 것은 아니지만, 미래 시나리오에 초점을 맞춤.
     * 다중 참가자 비디오 회의에서 모든 참가자가 가짜였다는 주장이 다시 언급됨.
          + 이는 각 참가자의 이미지와 목소리 샘플을 수집하는 등 상당한 준비가 필요함을 시사함.
          + 이러한 정교함이 이미 나타나고 있다면, 민감한 회의를 위한 새로운 참가자 검증 방식이 등장할 것으로 예상됨.
     * 대규모 회사에서 이런 일이 어떻게 발생할 수 있는지 이해하기 어려움.
          + 거래가 발생하기 위해서는 명확한 문서화된 절차가 필요함.
          + 거래가 승인되기 위해서는 여러 단계의 승인이 필요하며, 지불을 입력하는 사람과 승인하는 사람은 달라야 함.
          + 거래가 입력될 때, 첫 번째 승인을 거쳐야 하며, 지불 한도에 따라 추가 승인이 필요함.
     * 딥페이크를 사용하여 사람들을 속일 수 있는 소프트웨어에 대한 궁금증이 제기됨.
          + 아직 이러한 소프트웨어를 본 적이 없으며, 실제로 속일 수 있는 제품이 존재하는지에 대한 의문이 있음.
     * 이러한 사기는 회사의 나쁜 프로세스로 인한 것으로 보임.
          + 큰 금액에 대해서는 비디오 통화만으로 충분하지 않음.
          + 이메일 확인, 회사 채팅을 통한 대화, 고위직과의 휴대폰 통화 등이 필요함.
"
"https://news.hada.io/topic?id=13167","창작자와 사용자에게 플러그인보다 맞춤형 GPTs가 더 나은 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  창작자와 사용자에게 플러그인보다 맞춤형 GPTs가 더 나은 이유

     * 2023년 11월 6일, OpenAI는 맞춤형 GPTs를 발표했고, 그뒤 3백만 개 이상의 GPT가 생성되었으며, 그 중 20만 개가 공개됨
     * 맞춤형 GPTs는 사전에 구성된 동작과 기능을 가지며, 특정 임무에 대한 지식이 내장됨
     * 사용자가 플러그인을 수동으로 켜고 끄는 대신, 대화를 임무에 따라 전환할 수 있어 훨씬 빠르고 직관적임

1. 모두에게 개방됨

     * 맞춤형 GPT는 ""GPT 스토어""에 나열하거나 URL을 공유하여 누구나 접근할 수 있음
     * 이로 인해 공개적으로 사용 가능한 GPT의 수가 플러그인보다 2000배 많음

2. 지식

     * 시스템 메시지를 복잡하게 만들지 않고, 파일을 업로드하여 GPT에 지식을 추가하는 것이 간단함
     * PDF, Raw Text, Markdown 등 다양한 파일 형식을 지원함

3. 기능 (웹 브라우징, DALL·E 이미지 생성 & 코드 해석)

     * GPT의 맥락에 따라 ChatGPT의 특정 내장 기능을 활성화/비활성화할 수 있음
     * 예를 들어, ""책 생성기"" GPT를 작성할 때 DALL-E 이미지 생성 기능을 활성화하여 사용자가 스토리와 어울리는 이미지를 생성할 수 있음

4. 대화 시작자

     * 이전에는 사용자가 플러그인을 시도해보고 사용 방법과 좋은 예를 찾아야 했음
     * 하지만 대화 시작자를 쉽게 추가함으로써, GPT 제작자는 자신의 GPT가 잘하는 것에 기반한 몇 가지 제안을 사용자에게 줄 수 있음

5. 코드 없음, 서버 없음

     * 최상의 결과를 위해서는 여전히 제품 API와 통합하는 것이 좋음
     * 그러나 순수한 ""지식"" 기반 GPT의 경우, 제작자는 API 통합 없이 지식을 파일로 업로드하고 ""지시문"" 단락을 추가하는 것만으로 충분함

6. GPT @멘션

     * OpenAI는 이제 한 GPT의 대화 내에서 다른 GPT를 멘션하는 것을 지원함
     * 예를 들어, Switch용 상위 10개 게임에 대해 GPT에게 물어본 다음, Forms, Checklists & Workflows GPT를 멘션하여 플레이하거나 클리어한 게임을 체크리스트에 추가할 수 있음

GPT와 플러그인을 만드는 주된 이점

     * 적은 노력으로 실제로 영향력 있는 것을 만들수 있음
     * 새로운 코드를 작성하지 않고 기존 제품 API와 사양을 가져올 수 있음
     * 필요에 따라 다양한 인증 모델(없음, API 키, OAuth 2.0)로 작업을 정의할 수 있음
     * ChatGPT를 최고의 사용자 확보 채널로 활용 가능

   GPT @멘션이 가능하다면, 마치 인터넷 도메인네임을 선점하듯 @멘션을 선점하는 사례도 늘지 않을까요?
"
"https://news.hada.io/topic?id=13244","데이터 과학자를 위한 100개의 쿼리로 배우는 SQL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     데이터 과학자를 위한 100개의 쿼리로 배우는 SQL

SQL for the Weary

     * 목표 대상: 세포생물학 석사 학위를 가진 레이첼은 연구 병원에서 세포 분석 작업을 하며 데이터 과학자가 되고자 함.
     * 필요한 사전 지식: 기본적인 Unix 명령어와 표 형식 데이터 분석 능력.
     * 학습 결과: 데이터베이스와 데이터베이스 관리자의 차이점 설명, SQL 작성, 테이블 정의 및 데이터 조작, 조인 종류 설명, 인접 행 작업을 위한 윈도우 함수 사용, 트랜잭션과 트리거에 대한 이해, SQL을 사용한 JSON 데이터 조작, Python을 통한 데이터베이스 상호 작용.

설정

     * 최신 릴리스 다운로드: SQLite 데이터베이스 예제, SQL 쿼리, Python 스크립트 등이 포함된 파일을 임시 디렉토리에 압축 해제.

배경 개념

     * 데이터베이스: 검색 및 검색이 가능한 데이터 모음.
     * 데이터베이스 관리 시스템(DBMS): 특정 종류의 데이터베이스를 관리하는 프로그램.
     * SQLite: 데이터베이스를 단일 파일로 저장, PostgreSQL은 더 높은 성능을 위해 여러 파일에 정보를 분산.
     * 관계형 데이터베이스 관리 시스템(RDBMS): 데이터를 테이블에 저장하고 SQL을 사용하여 쿼리.
     * NoSQL 데이터베이스: 테이블을 사용하지 않는 MongoDB와 같은 데이터베이스도 존재.

데이터베이스 연결

     * 데이터베이스 연결: 실제 쿼리가 아니지만 다른 작업을 수행하기 전에 필요한 단계.

관리 명령어

     * SQLite 관리 명령어: 표준 SQL의 일부가 아니며, PostgreSQL의 특수 명령어는 \로 시작.
     * 출력 형식: .headers on과 .mode markdown을 사용하여 결과를 가독성 있게 출력.

테이블 조작

     * 테이블 생성: create table 명령어로 테이블과 열을 정의.
     * 데이터 삽입: insert into 명령어로 테이블에 데이터 추가.
     * 행 업데이트: update 명령어로 특정 조건을 만족하는 행의 데이터 변경.
     * 행 삭제: delete from 명령어로 특정 조건을 만족하는 행 제거.

조인

     * 조인: 두 테이블의 정보를 결합하는 작업.
     * 내부 조인: inner join을 사용하여 두 테이블의 일치하는 행만 결합.
     * 왼쪽 조인: left join을 사용하여 왼쪽 테이블의 모든 행을 유지하고 오른쪽 테이블의 누락된 값은 null로 채움.

집계 함수

     * 집계: 여러 값을 하나로 결합하는 작업.
     * 일반적인 집계 함수: sum, max, min, avg 등을 사용하여 데이터 집계.
     * 그룹화: group by를 사용하여 특정 열의 고유한 조합에 따라 행을 그룹화하고 각 그룹에 대해 집계 수행.

GN⁺의 의견

     * 이 글은 데이터베이스와 SQL에 대한 기본적인 이해를 돕기 위한 자료로, 초급 소프트웨어 엔지니어나 데이터 과학에 관심 있는 이들에게 유용함.
     * 실제 예제와 함께 SQL의 다양한 기능을 설명하여, 데이터베이스 관리 및 조작에 대한 실질적인 지식을 제공함.
     * 특히 데이터베이스 조인, 집계 함수, 테이블 조작 등은 데이터 분석과 관련된 작업에서 매우 중요하며, 이 글은 이러한 개념을 명확하게 이해하는 데 도움이 됨.

        Hacker News 의견

     * ChatGPT를 사용하여 데이터 과학자처럼 복잡한 쿼리를 작성할 수 있음. 이를 통해 전환율, 메시지 클릭률 등 유용한 지표를 얻을 수 있음.
     * 데이터 과학자라는 용어의 의미가 과거 ""가장 섹시한 직업""이라는 시절부터 변화함. 기사에서는 생물학 석사 학위를 가진 Rachel이 연구 병원에서 세포 분석을 하고 있으며, 데이터 과학자가 되고자 함. 과거 데이터 과학자들은 양적 배경과 소프트웨어 엔지니어링 배경을 모두 갖춘 사람들이었으나, 현재는 ""과대 평가된 데이터 분석가""로 여겨지기도 함.
     * DuckDB를 사용하여 이 가이드를 다시 작성하는 것이 좋을 수 있음. DuckDB는 현재 데이터 과학자들에게 SQLite보다 더 자주 사용됨.
     * 매우 간결한 SQL 가이드로, 예시를 통한 훌륭한 교육. 미국 대학에서는 이 내용을 한 학기 동안 가르치지만, 이 가이드는 데이터베이스 최적화를 제외한 대부분의 산업 소프트웨어 엔지니어링 직무에 충분함.
     * TextQuery라는 Mac 앱을 통해 SQL 연습을 할 수 있음. CSV 데이터셋을 빠르게 가져와 SQL 쿼리를 실행할 수 있으며, 현재 베타 버전은 무료로 사용 가능함.
     * 와이파이가 불안정한 비행 중에 긴, 단일 페이지 튜토리얼을 다운로드하는 것이 좋음. SQL 외의 다른 언어나 기술에 대한 튜토리얼이 있는지 궁금함.
     * 많은 쿼리들이 SQLite에만 유효하며, 일부 DBMS에서는 지원되지 않는 기능들이 포함되어 있음. 예를 들어, 집계 필터링은 MySQL, MS SQL, Oracle 등에서 지원되지 않음.
     * 데이터 과학자를 위한 튜토리얼이라기보다는 일반적인 SQL의 좋은 요약으로 보임.
     * ""left outer join""에 대한 설명은 동일성 조건에만 적용되며, left join에 대한 잘못된 인식을 만들 수 있음. 이러한 설명은 매우 흔하지만 오해의 소지가 있음.
"
"https://news.hada.io/topic?id=13159","2024년판 Damn Small 리눅스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2024년판 Damn Small 리눅스

Damn Small Linux 2024 출시

     * Damn Small Linux(DSL) 2024는 저사양 x86 컴퓨터를 위해 맞춤 제작된 컴팩트한 리눅스 배포판으로, 작은 패키지 안에 많은 어플리케이션을 담고 있음.
     * 모든 어플리케이션은 기능성, 작은 크기, 낮은 의존성을 기준으로 선택됨.
     * DSL 2024는 터미널 창이나 TTY에서 사용하기 편리한 다수의 텍스트 기반 어플리케이션을 포함하고 있음.

윈도우 매니저

     * 현재 DSL 2024는 Fluxbox와 JWM 두 가지 윈도우 매니저만을 제공하며, 두 매니저 모두 가벼우면서 직관적이고 사용하기 쉬움.

웹 브라우저

     * DSL에는 세 가지 X 기반 웹 브라우저가 포함되어 있음:
          + BadWolf: 가벼우면서 보안 지향적이고 완전히 HTML5 호환 가능.
          + Dillo: 매우 가벼운 GUI 브라우저.
          + Links2: 텍스트 및 가벼운 GUI 브라우저.

오피스 어플리케이션

     * 오피스 어플리케이션으로는 AbiWord 워드 프로세서, Gnumeric 스프레드시트, Sylpheed 이메일 클라이언트, Zathura PDF 뷰어가 포함됨.

멀티미디어 어플리케이션

     * 멀티미디어 어플리케이션으로는 MPV(비디오 및 오디오), XMMS(가벼운 오디오 플레이어)가 있음.

기타 어플리케이션

     * 그래픽 편집을 위한 mtPaint, FTP/SFTP/SCP를 위한 gFTP, 빠른 편집을 위한 Leafpad, antiX에서 가져온 파일 매니저 zzzFM 등이 포함됨.

게임

     * 세 가지 GUI 기반 게임이 포함되어 있으며, 이들은 재미있고 상대적으로 가벼움.

터미널 기반 어플리케이션

     * DSL 2024는 Ranger 파일 매니저, VisiData(강력한 CSV 및 스프레드시트 도구), FZF 퍼지 파인더, Tmux 터미널 멀티플렉서, Mutt 이메일 클라이언트 등 많은 터미널 기반 어플리케이션을 포함함.
     * 또한 Cmus 음악 플레이어, CDW CD 버너, Htop(인터랙티브 프로세스 뷰어), 터미널에서 검색을 위한 SurfRaw(래퍼 포함), 날씨 앱, MPV 비디오/오디오 플레이어(래퍼 포함), Vim과 Nano 편집기, 다섯 가지 터미널 기반 게임, 두 가지 터미널 호환 웹 브라우저(W3M과 Links2) 등이 포함됨.

새로운 DSL을 만든 이유

     * 원래 DSL은 50MB 크기의 다재다능한 배포판으로 만들기가 재미있었으며, 개인적인 성취로서 가장 자랑스러워하는 것 중 하나임.
     * 하지만 컴퓨터 산업이 많이 변화했고, 오늘날 50MB 크기의 Xwindows 부팅 가능 배포판을 만들 수는 있지만, 많은 드라이버가 빠져 있고 매우 기본적인 어플리케이션만 포함될 것임.
     * 2024년 현재, 대부분의 사람들은 DVD가 없거나 USB 드라이브로 부팅할 수 없는 오래된 컴퓨터에서 실행할 수 있는 700MB 이하 크기의 제한을 포기함.
     * DSL의 새로운 목표는 단일 CD에 맞출 수 있을 만큼 충분히 작은 이미지로 가능한 많은 사용 가능한 데스크톱 배포판을 포장하는 것임.

프로젝트 배경

     * 이 프로젝트는 오래된 컴퓨터를 미래까지 유용하게 사용할 수 있도록 서비스하려는 목적을 가지고 있으며, 이러한 개념은 개발자의 가치관과 잘 부합함.
     * GNU/Linux 커뮤니티의 대부분의 것들처럼, 이 프로젝트는 거인들의 어깨 위에 서 있음.
     * 현재 이 프로젝트는 antiX 23 i386를 기반으로 하고 있으며, antiX는 MEPIS와 데비안의 천재들과도 연관이 있는 훌륭한 배포판임.

프로젝트 구현

     * 700MB가 2002년의 50MB에 비해 작다고 여겨질 수 있지만, 작은 발자국 어플리케이션을 찾기 위해 많은 노력을 기울였고, 700MB 제한 안에 작업 가능한 데스크톱을 넣기 위해 몇 가지 트릭을 사용함.
     * 크기를 줄이기 위해 ISO는 en_US, en_BG, en_CA, en_AU 로케일만 활성화되어 있으며, 소스 코드, 많은 매뉴얼 페이지, 문서를 제거함.
     * 누락된 파일을 복원할 수 있는 다운로드 스크립트를 제공하며, 지금까지 잘 작동하는 것으로 보임.
     * 원래 DSL과 달리, 이 버전은 apt를 완전히 활성화하여 필요한 것이 있다면 설치하기 매우 간단함.
     * antiX의 많은 기능을 가능한 유지하려고 노력했지만, DSL은 파생 작업이자 축소 작업이므로 antiX의 일부 기능이 손상되거나 누락될 수 있음.

감사의 말

     * 데비안과 antiX에게 모든 중요한 작업을 해준 것에 대해 감사함.
     * DSL 다운로드를 미러링해준 것에 대해 감사함.
     * 아름다운 배경화면을 제공한 DeviantArt의 GPedde에게 감사함.
     * 피드백과 지원을 해준 DSL 사용자들에게 감사함.

GN⁺의 의견

     * Damn Small Linux 2024는 오래된 하드웨어를 활용하고자 하는 사용자들에게 매우 유용한 리소스임. 이는 기술 폐기물을 줄이고 지속 가능성을 증진하는 데 기여할 수 있음.
     * DSL 2024는 저사양 시스템에서도 효율적으로 작동하도록 설계된 가벼운 어플리케이션들을 포함하고 있어, 컴퓨터의 수명을 연장하고자 하는 사용자들에게 매력적인 선택지가 될 수 있음.
     * 이 프로젝트는 antiX와 같은 다른 리눅스 배포판의 기반 위에 구축되어 있으며, 오픈 소스 커뮤니티의 협력적 정신을 반영함. 이는 기술 애호가들에게 영감을 줄 수 있는 예시임.

   2000년 초반쯤 어릴때 DamnSmallLinux 로 NAT 구성해보고 쓰던 기억이 나는데...아직도 새버전이 나오고 있었네요.

        Hacker News 의견

     * xwoaf 리빌드 프로젝트 4.0은 매우 작은 리눅스 배포판으로, busybox와 mcb_xawplus 두 개의 바이너리에 많은 애플리케이션을 포함하고 있음. 이를 통해 xcalc, xcalendar 등 다양한 도구와 함께 ash, basename 등의 명령어를 사용할 수 있음. 추가로 도움말 시스템, 설치 스크립트 등이 제공됨.
     * DSL(Damn Small Linux)은 원래 비즈니스 카드 크기의 CD에 맞춰 50MB로 제작되었으며, 이러한 CD가 실제로 존재했음.
     * xwoaf는 현대적인 도구를 제공하는 또 다른 옵션으로, Puppy Linux, Tiny Core Linux와 함께 오래된 하드웨어에 새 생명을 불어넣을 수 있음. Finnix도 우수한 구조 이미지 솔루션으로 언급됨.
     * xwoaf는 CD에 맞는 크기를 가지고 있지만, RAM 요구 사항이나 CPU가 지원해야 하는 명령어 세트에 대한 정보는 명시되어 있지 않음.
     * DSL은 과거에 많이 사용되었으며, 학교 네트워크 필터링을 우회하는 데 사용되기도 했음. 이로 인해 다음 해에 학교 IT 스태프가 변경되었을 정도로 인기가 있었음.
     * Puppy Linux는 여전히 작은 크기에 전체 데스크톱 환경을 제공하는 몇 안 되는 배포판 중 하나임. SliTaz도 여전히 작은 크기를 유지하고 있으며, 루트 파일 시스템은 약 100MB, ISO 이미지는 40MB 미만임.
     * DSL은 매력적인 이름 때문에 많은 사람들이 처음 사용한 배포판 중 하나였으나, 주요 기여자와 프로젝트 리더 간의 불화로 인해 갑작스럽게 버려졌음. 이후 주요 기여자는 TinyCoreLinux라는 자신의 배포판을 만듦.
     * DSL은 작은 크기에 많은 기능을 담은 것으로 기억되며, 오늘날에도 여전히 필요한 개념임. 많은 변화가 있었지만, 이를 시도해보는 것을 기대함.
     * DSL은 메모리 스틱에 들어갈 수 있는 유일한 배포판이었으며, 당시에는 메모리가 매우 비쌌음. 재활용 센터에서 찾은 부품으로 컴퓨터를 만들고 신발 상자에 넣어 사용했던 좋은 추억이 있음.
"
"https://news.hada.io/topic?id=13271","바드가 이제 제미니로, 모바일 앱과 제미니 어드밴스드 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    바드가 이제 제미니로, 모바일 앱과 제미니 어드밴스드 출시

바드가 제미니로: 울트라 1.0과 새로운 모바일 앱을 오늘 사용해보세요

     * 제미니는 이전에 바드로 알려졌던 것으로, 모바일 앱과 울트라 1.0을 탑재한 제미니 어드밴스드를 출시함.
     * 제미니는 구글의 AI 모델에 직접 접근할 수 있게 해주는 가장 능력 있는 모델군을 대표함.
     * 이미 40개 이상의 언어와 230개국 이상에서 프로 1.0 모델을 통해 제미니와 대화할 수 있음.

  제미니 어드밴스드로 가장 능력 있는 AI 모델 접근

     * 제미니 어드밴스드는 울트라 1.0을 통해 사용자에게 최신의 가장 능력 있는 대형 AI 모델을 제공하는 새로운 경험을 제공함.
     * 울트라 1.0 모델을 사용하는 제미니 어드밴스드는 코딩, 논리적 추론, 복잡한 지시사항 따르기, 창의적 프로젝트 협업 등 복잡한 작업을 수행하는 데 더 능함.
     * 제미니 어드밴스드는 개인 맞춤형 튜터, 고급 코딩 시나리오 지원, 디지털 콘텐츠 제작자를 위한 새로운 콘텐츠 생성 등을 도와줌.
     * 제미니 어드밴스드는 현재 AI 추론에서의 진보를 반영하며, 지속적으로 개선될 예정임.
     * 제미니 어드밴스드는 영어로 150개국 이상에서 사용 가능하며, 시간이 지남에 따라 더 많은 언어로 확장될 예정임.
     * 구글 원 AI 프리미엄 플랜의 일부로 제공되며, 월 $19.99에 이용 가능함.

  휴대폰에서 쉽게 제미니 사용하기

     * 제미니와 제미니 어드밴스드를 위한 새로운 모바일 앱이 안드로이드와 iOS 구글 앱에서 출시됨.
     * 휴대폰에서 제미니를 사용하면, 사진을 찍어 지시를 요청하거나, 파티 초대장을 위한 이미지를 생성하거나, 어려운 문자 메시지 작성을 도와달라고 요청하는 등 다양한 도움을 받을 수 있음.

    안드로이드

     * 안드로이드에서 제미니 앱을 다운로드하거나 구글 어시스턴트를 통해 접근하면, 앱이나 구글 어시스턴트를 활성화하는 다른 방법을 통해 사용할 수 있음.
     * 새로운 오버레이 경험을 통해 화면에 바로 제미니를 접근할 수 있으며, 타이머 설정, 전화 걸기, 스마트 홈 기기 제어 등의 구글 어시스턴트 음성 기능을 사용할 수 있음.

    iOS

     * iOS에서는 몇 주 안에 구글 앱에서 제미니에 접근할 수 있게 될 예정임.
     * 구글 앱에서 제미니 토글을 탭하면 창의력을 발휘하거나, 맞춤형 이미지를 생성하거나, 소셜 포스트 작성을 도와주거나, 데이트 나이트를 계획하는 데 도움을 줄 수 있음.
     * 제미니는 미국에서 영어로 안드로이드와 iOS 휴대폰에 출시되며, 몇 주 안에 완전히 사용 가능할 예정임.
     * 다음 주부터 영어와 일본어, 한국어로 더 많은 지역에서 접근할 수 있게 되며, 더 많은 국가와 언어로 확장될 예정임.

GN⁺의 의견

     * 제미니는 AI 기술의 발전을 상징하며, 사용자들이 일상생활에서 AI와 협업하여 다양한 작업을 수행할 수 있게 해주는 중요한 도구임.
     * 제미니 어드밴스드와 모바일 앱의 출시는 AI 기술을 더 넓은 사용자층에게 쉽게 접근할 수 있게 하여, AI의 대중화에 기여할 것으로 보임.
     * 이러한 기술의 발전은 특히 코딩, 창의적 작업, 언어 학습 등의 분야에서 사용자들에게 맞춤형 도움을 제공하여 생산성과 창의력을 향상시킬 수 있는 잠재력을 가지고 있음.

        Hacker News 의견

     * ""Bard""라는 이름이 폐기된 것에 놀람
          + Bard는 말하는 사람을 의미하는 옛 단어로, 다른 이름에 자주 사용되지 않아 현명한 선택으로 보임
          + ""Gemini""는 특별히 관련성이 높아 보이지 않으며, 이미 같은 이름을 가진 회사가 존재함
          + ""Google""처럼 ""G""로 시작하는 이름을 선택한 이점은 이해 가능함
          + bard.com은 다른 회사로 리다이렉트되지만, Gemini.com은 해당 이름의 회사로 연결됨
          + 이 결정이 어떻게 내려졌는지 궁금함
     * Bard Advanced (Gemini Ultra)의 품질에 인상받음
          + GPT-4와 비교해도 좋은 결과를 보이며, 경우에 따라 더 나은 성능을 보임
          + 장점:
               o 번역 능력이 더 우수함 (중국어와 일본어 관용구를 영어로 번역하는 데 시도함)
               o 검색 결과를 답변에 더 잘 통합함
          + 단점:
               o 코딩 능력이 약간 떨어짐
               o 의료 주제에 대해 여러 번 물어봐야 하는 검열이 더 성가심
               o 논리적으로 약함 (한 문장 내에서 자기모순을 보이며, 이를 파악하지 못함)
               o 이미지를 묘사할 때 많은 환각을 일으킴
     * Gemini Apps의 기술 개선을 위해 대화 내용이 인간 검토자에 의해 처리됨
          + 이 사실을 명확히 밝힌 것에 대해 감사함
          + 유료 기능임에도 불구하고 프라이버시나 옵트아웃 메커니즘이 없어 아쉬움
     * 모델 품질 외에도 구독 플랜 구조가 이상함
          + Google One 사용자들에게 특히 이상한 구조를 가짐
          + 기존의 구독 플랜은 이해하기 쉬웠으나, ""AI""를 위한 새로운 플랜 추가로 혼란 발생
          + 기존 Google One 구독자들은 이제 월간 플랜으로 이동해야 하며, 더 높은 티어 사용자들은 스토리지 크기를 줄이지 않고서는 업그레이드 옵션이 없음
          + Google Fi 사용자들은 업그레이드 옵션이 전혀 없어 더욱 최악의 상황임
          + 고티어 구독자들은 7월 31일까지 추가 비용 없이 AI 기능을 사용할 수 있으나, 이후 새로운 플랜을 준비할 것으로 예상되지만, 여전히 사용자 혼란을 야기함
          + YT Premium을 별도의 구독 플랜으로 두는 것이 이미 번거로움을 주는데, Google은 ""One""이라는 제품에 이 문제를 가져오지 않아야 함
     * Play Store에서 검색 시 처음에 나오는 아이콘은 Crypto.com과 Gemini: Buy Bitcoin & Crypto 옵션임
          + 해당 앱들의 스크린샷, 한정된 시간 이벤트, 관련 앱들을 지나친 후에야 제품을 찾을 수 있음
          + 설치 후 실행하면 ""Gemini는 현재 사용할 수 없습니다. 나중에 다시 시도하세요.""라는 메시지가 나타남
          + Google의 출시 방식에 대해 비꼬는 듯한 반응
     * Gemini advanced를 시험해보기 위해 기대했으나 실망함
          + Chat GPT 3.5조차 해결할 수 있는 테스트 질문에 대한 Gemini advanced의 답변이 일관성이 없고 혼란스러움
     * Gemini Ultra가 GPT4보다 논리적으로 더 나은 것 같음
          + 여전히 테스트 중이지만, GPT4가 완전히 실패한 프롬프트를 Ultra가 해결함
     * Bard, Gemini, Gemini Advanced, Gemini Ultra, Ultra 1.0 등 이름이 혼란스러움
          + Xbox series x 이후 가장 혼란스러운 명명으로 보임
     * ""죄송합니다, Gemini Advanced는 사용할 수 없습니다.""
          + Gemini Advanced는 일부 국가, 업무 계정, 특정 연령 이하 사용자에게 아직 제공되지 않음
     * 아직 Vertex API를 통해 사용할 수 없는 것 같음
"
"https://news.hada.io/topic?id=13218","TaskingAI - AI-Native 앱 개발을 위한 오픈소스 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                TaskingAI - AI-Native 앱 개발을 위한 오픈소스 플랫폼

     * ""Firebase의 단순함을 AI 앱개발에 도입""
     * 통합 API를 통해 다양한 LLM을 사용하여 GPT와 유사한 멀티테넌트 애플리케이션을 생성 가능
     * 추론, 검색, 어시스턴트 및 도구와 같은 고유한 모듈식 기능이 원활하게 통합되어 개발 프로세스를 향상시킴
     * 직관적인 UI 콘솔로 프로젝트 관리를 단순화 하고 워크플로우 테스팅을 지원
     * BaaS 와 비슷한 워크 플로우 : AI 로직(서버사이드)과 제품 개발(클라이언트 사이드)을 분리. RESTful API와 Client SDK
     * Customizable Integration : RAG 시스템 및 다른 도구와 연동
     * 고성능, 동시 계산을 위해 Python FastAPI의 비동기 기능을 활용하여 애플리케이션의 응답성과 확장성을 향상
"
"https://news.hada.io/topic?id=13282","소니, "영원히" 접근 가능해야 할 디지털 도서관 삭제 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    소니, ""영원히"" 접근 가능해야 할 디지털 도서관 삭제 중

소니, '영원히' 접근 가능하다던 디지털 라이브러리 삭제

     * 소니가 소유한 애니메이션 스트리밍 서비스인 Funimation이 구독자들의 디지털 라이브러리를 4월 2일 이후에는 사용할 수 없게 됨.
     * Funimation은 과거 구매한 영화와 쇼의 디지털 복사본을 '영원히' 스트리밍할 수 있다고 약속했지만, 일부 제한이 있음을 명시함.
     * 소니는 2021년에 경쟁 애니메이션 스트리밍 서비스인 Crunchyroll을 인수했으며, 이후 두 서비스의 통합이 예상됨.
     * Funimation은 4월 2일에 앱과 웹사이트를 폐쇄하고 Funimation 계정을 Crunchyroll 계정으로 전환할 것이라고 발표함.
     * Funimation의 카탈로그 대부분이 이미 Crunchyroll에 있다고 주장함.

Funimation의 DVD와 디지털 코드

     * Funimation은 비디오 스트리밍뿐만 아니라 물리적 미디어로 애니메이션을 더빙하고 출시하기도 했으며, 때때로 DVD나 블루레이에 디지털 코드가 포함됨.
     * Funimation 스트리밍 서비스 구독자들은 이 디지털 코드를 Funimation에 추가하여 플랫폼에서 콘텐츠를 스트리밍할 수 있었음.

디지털 복사본의 미래와 환불 문제

     * Funimation은 디지털 복사본에 '영원히' 접근할 수 있다고 주장했지만, 물리적 미디어를 잃어버리거나 재생할 방법이 없는 사람들은 더 이상 자신들이 구매한 디지털 복사본에 접근할 수 없게 됨.
     * Funimation의 발표에 따르면 Crunchyroll은 현재 Funimation 디지털 복사본을 지원하지 않으며, 디지털 복사본에 대한 접근이 지원되지 않을 것임.
     * 환불에 관해서는 Funimation이 지불 방법에 따라 사용 가능한 옵션을 확인하기 위해 고객 지원팀에 문의하라고 안내하고 있지만, '영원히' 스트리밍할 수 없게 된 DVD나 블루레이에 대한 환불 언급은 없음.

GN⁺의 의견

     * 이 기사는 디지털 콘텐츠의 소유권과 접근성에 대한 중요한 문제를 제기함. '영원히'라는 약속이 얼마나 불확실할 수 있는지 보여줌.
     * Funimation과 Crunchyroll의 통합은 스트리밍 서비스의 변화와 시장 재편을 반영하며, 소비자들이 자신이 구매한 콘텐츠에 대한 지속적인 접근을 기대할 수 있는지에 대한 논의를 촉진함.
     * 이 사건은 디지털 라이브러리와 물리적 미디어의 중요성을 다시 생각하게 만들며, 향후 비슷한 상황을 피하기 위한 소비자의 권리 보호와 서비스 제공업체의 책임에 대한 논의가 필요함을 시사함.

        Hacker News 의견

     * 영원한 것은 기대하지 않지만, 기업이 합병되거나 인수될 때 기존의 보증을 종료할 수 없어야 한다는 보호 장치가 필요함.
          + 스트리밍 콘텐츠 라이선스를 법적으로 허가받기 위해 최소 기간을 명시하고, 기업이 폐업할 경우를 대비해 보험/담보/백업을 요구하는 것이 제안됨.
     * ""지금 구매""라는 표현은 실제 구매를 의미하지 않는 서비스에서는 사용되어서는 안 됨. ""지금 라이선스 받기""로 표현해야 소비자가 정확히 이해할 수 있음.
     * 디지털 콘텐츠에 대한 접근을 ""구매""라고 표시하는 것은 DRM-free로 다운로드할 수 없는 경우 불법이어야 함.
     * 2008년 MSN Music 사례에서 DRM으로 인해 정당하게 구매한 음악 파일이 대부분 쓸모없게 됨. DRM은 저작권 침해로 사람들을 몰아가는 경향이 있음.
     * 구매가 소유를 의미하지 않는다면, 해적질은 도둑질이 아님.
     * 저작권자들이 계속해서 실패하는 모습을 보면서, 사람들이 해적질로 전환하는 방법을 배우고 있음.
     * 소니가 원래의 계약을 준수할 방법을 찾을 것으로 기대함. 디지털 구매에 대한 신뢰가 중요함.
     * 기업이 팔리고 나서 기존의 의무에서 벗어나려는 행위는 문제가 있음.
     * 스트리밍 서비스 가격이 두 배로 인상됨.
     * 문제: Crunchyroll은 사이트나 서비스를 통해 콘텐츠가 지속적으로 제공되거나 제공될 것이라는 보장을 하지 않음. 필요하다고 판단되는 경우 어떠한 통지 없이 콘텐츠를 제거하고 영구적으로 삭제할 권리를 보유함.
"
"https://news.hada.io/topic?id=13161","Segaega AI

세가 AI 컴퓨터 소개

     * 1986년 말, 세가는 ""세가 AI 컴퓨터""를 출시함.
     * 이 시스템은 세가에서 가장 잘 알려지지 않고 희귀한 시스템 중 하나임.
     * 현재까지 이 시스템에 대해 알려진 정보는 일본과 미국의 전단지 및 언론 기사에 소량 포함되어 있음.
     * 이번에 처음으로 세가 AI 컴퓨터에서 추출한 모든 시스템 롬, 26개의 마이 카드와 14개의 테이프에서 데이터 덤프, 많은 스캔 및 사진을 공개하고, MAME 개발자들과 협력하여 이 컴퓨터를 에뮬레이션할 수 있는 초기 작동 MAME 드라이버를 제공함.

시스템 사양

     * CPU: 16비트 NEC V20, 5 MHz
     * ROM: 총 512 KB (시스템에서 실제로 발견됨)
     * RAM: 128 KB
     * 소프트웨어: 세가 마이 카드(128 KB ~ 256 KB), 오디오 카세트
     * 비디오: Yamaha V9938 (해상도 256x212) 64 KB VRAM
     * 사운드: SN76489 PSG
     * 입력: 터치 서페이스, 8방향 패드 + 3 버튼, 마이크 입력
     * 입출력: RS232 센트로닉스 포트
     * 카세트 드라이브: 9600bps
     * 선택적 키보드 및 사운드 박스 주변기기

터치 서페이스

     * 시스템에는 큰 터치 서페이스가 있으며, 대부분의 소프트웨어 타이틀은 각 타이틀에 맞는 맞춤형 터치 인터페이스를 제공하는 오버레이와 함께 제공됨.

오디오 사양

     * 시스템은 PSG 오디오 재생이 가능하며, 사운드 박스 확장 장치가 장착되어 있을 때 FM 오디오도 재생할 수 있음.
     * 또한 일본어의 46개 공통 음성 샘플을 포함하는 128 KB ROM과 시스템에서 사용하는 전체 문장을 포함하는 또 다른 128 KB ROM을 갖추고 있음.

소프트웨어 저장소

     * 시스템은 마스터 시스템 및 PC 엔진 카드와 유사한 소형 카드에서 소프트웨어를 부팅할 수 있음.
     * 세가 AI 컴퓨터 카드는 128 KB 및 256 KB의 데이터를 저장할 수 있음.

인공 지능?

     * 문서에서는 교육적인 측면을 가진 완전한 컴퓨터로 설명되고 있음.
     * 소프트웨어는 대부분 교육용이며 주로 어린이를 대상으로 함.

우리가 결국 찾은 것...

     * 2014년 9월, 일본 야후! 옥션의 한 사용자가 세가 AI 컴퓨터 유닛과 15개의 소프트웨어 타이틀을 판매함.
     * 세가 AI 컴퓨터는 주로 일본 학교에 판매된 것으로 보임.

평소보다 긴 1986-1989 생명주기?

     * 많은 소프트웨어 타이틀에는 1986년 8월 1일부터 1989년 5월 1일까지의 날짜가 인쇄되어 있음.

세가 AI 컴퓨터에 대해 누가 작업했는가?

     * 프로젝트는 세가 R&D 부서 6에서 주도한 것으로 보임.
     * 마사미 이시카와(세가)와 미카 오카다(세가)가 프로젝트에 참여함.

에뮬레이션

     * Wilbert Pol과 Fabio Priuli가 MAME 드라이버를 개발함.
     * MAME 0.262 릴리스 노트와 함께 MAME 준비된 롬 폴더를 다운로드할 수 있음.

소프트웨어 타이틀

     * 지금까지 발견된 소프트웨어 목록을 제공함.
     * 아직 발견되지 않은 소프트웨어 타이틀도 목록에 포함됨.

다운로드

     * 시스템 롬, 소프트웨어 롬 및 오버레이, MAME 준비된 롬 폴더, 테이프 녹음, 하드웨어 매뉴얼, 소프트웨어 스캔, 전단지 및 광고, 사진, 잡지 스캔, 기술 문서 등을 다운로드할 수 있는 링크 제공.

연구 크레딧

     * Chris Covell이 초기 하드웨어 역공학, 문서화 및 소프트웨어 덤프를 담당함.
     * Omar Cornut가 하드웨어 및 소프트웨어를 획득하고, 소프트웨어 카드와 테이프를 덤프하고, 내용을 스캔하고, 정보를 조사하고, 다른 작업을 조직함.

GN⁺의 의견

    1. 세가 AI 컴퓨터는 1980년대 중반에 출시된 희귀한 교육용 컴퓨터로, 당시의 인공 지능 기술과 교육적 접근을 결합한 독특한 시도였음.
    2. 이 시스템은 현재 MAME 에뮬레이션을 통해 연구자와 취미로 컴퓨터 역사를 탐구하는 사람들에게 흥미로운 자료가 될 수 있음.
    3. 세가 AI 컴퓨터의 발견과 에뮬레이션은 게임 및 컴퓨터 역사에 대한 이해를 높이고, 당시 기술의 한계와 가능성을 탐색하는 데 중요한 기여를 함.

        Hacker News 의견

     * 세가와 프롤로그 애호가로서, 이것은 매우 멋진 일임
          + 세가의 AI 기계가 128KB의 읽기 전용 메모리에 있는 프롤로그 언어 인터프리터를 사용한다는 것이 흥미로움.
          + 5MHz에서 실행되는 128K 미만의 프롤로그 인터프리터에 대해 더 알고 싶은 호기심.
          + 제한된 하드웨어에서 유용한 프롤로그 인터프리터를 작성하는 것은 대단한 성과임.
          + 누군가가 ROM에서 인터프리터를 추출하여 기계 코드를 읽을 수 있는 어셈블리로 변환하기를 바람.
     * 세가는 당시 그래픽 디자인에서 정말로 뛰어난 성과를 거둠
          + 세가의 그래픽 디자인에 대한 감탄.
     * MAME 0.262 버전이 출시되었으며, 세가 AI 시스템이 포함되어 있음을 추측함
          + 새로운 레트로 시스템에 대해 배우는 것은 항상 흥미로운 일임.
          + 박스의 그래픽만으로도 기쁨을 느낌.
          + 현대 게임들이 AAA 리얼리즘에 지루함을 느끼고, 아미가 그래픽의 복귀를 원함.
     * 이 프로젝트가 제5세대 컴퓨터 시스템(FGCS) 이니셔티브에 의해 자금을 지원받았을 것이라는 추측
          + FGCS 이니셔티브에 대한 배경 지식이 필요할 수 있음.
     * 해당 키보드 레이아웃이 HHKB의 레이아웃과 매우 유사하다는 점이 인상적임
          + 키보드 디자인의 유사성에 대한 관찰.
     * 세가는 AI에 대한 초기의 열풍에 빠르게 대응했으며, 현재 시대보다 앞서 있었음
          + 세가가 AI 분야에서 선구자적 역할을 했다는 평가.
"
"https://news.hada.io/topic?id=13162","위성이 새로운 휴대폰 타워로 자리잡다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          위성이 새로운 휴대폰 타워로 자리잡다

     * Starlink는 이번 달 처음으로 최신 세대의 위성인 v2mini를 통해 휴대폰 간 4G/LTE 연결을 통해 문자를 보내고 받았음
     * 전 세계 최소 8개 모바일 네트워크 사업자의 가입자에게 문자 메시지를 제공할 예정
     * 스타링크의 미국 파트너인 T-Mobile은 ""향후 몇 년 안에"" 고객이 현재 사용하는 지상 단말기(Ground Terminal) 없이도 음성 및 데이터 서비스를 제공할 수 있을 것이라고 말함
     * 스타링크의 성과는 위성과 셀룰러 기지국이 어떻게 융합되고 있는지를 보여주는 최신 사례
     * 위성을 이용한 통신 기술은 지상의 휴대폰 기지국과 유사한 역할을 수행하게 되면서, 통화를 우주 궤도를 통해 라우팅하는 데 사용되는 큰 안테나와 더 나은 빔포밍 기술을 활용함
     * 최근까지 위성은 수백 킬로미터 아래의 휴대폰에 연결할 수 없었음

전화기를 위성에 연결하는 세 가지 열쇠 : 큰 안테나, 낮은 고도의 위성, 빔포밍

     * 기업들은 휴대전화를 위성전화처럼 재설계하는 대신 휴대전화에 적합하도록 위성망을 재설계
          + 위성을 휴대폰 기지국으로 바꾸기 위해 위성의 안테나를 훨씬 더 크게 만들고 있음
     * 또한 위성을 이전보다 낮게 비행하여 위성을 휴대폰 타워처럼 만들고 있음
          + 지난 10년 동안 더 작고 저렴한 위성의 출현과 더 저렴한 발사 비용으로 인해 지구 저궤도에서 비행하는 더 저렴한 위성에 의존하는 비즈니스 모델이 가능해짐
          + 이 새로운 위성은 오래 지속되지는 않는, 표면에 있는 휴대폰의 약한 신호를 더 잘 감지하고 증가하는 트래픽을 처리함
     * 향상된 빔포밍 : 전송 장치가 다른 수신자를 방해하지 않고 특정 수신자에게 신호를 전달하는 최선의 방법을 계산하는 방법
          + 건물이나 산비탈, 지상파 타워에서 신호를 반사시키는 작업부터 시속 수만 킬로미터를 이동하는 위성에서 나오는 좁고 빠르게 움직이는 신호를 정밀하게 타겟팅하는 작업이 포함
          + 보다 정교한 빔포밍에는 음파가 조화를 이루는 것처럼 신호가 서로 강화되도록 여러 안테나에서 동일한 신호를 보내는 작업이 포함
          + 미래에는 빔포밍 작업을 지금보다 훨씬 더 많은 위성에 분산시키는 것이 가치가 있을 수 있음
"
"https://news.hada.io/topic?id=13246","2024년 웹 개발 트렌드 4가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2024년 웹 개발 트렌드 4가지

   1.‘이미지→코드’ 생성형 AI 도구 등장
     * 이미지를 입력하면 AI 모델이 코드를 자동 생성
     * 영국 IT 기업 tldraw
          + 스케치를 코드로 변환하는 기능 출시
          + 소프트웨어 tldraw의 화이트보드에 그래프를 그린 다음, ‘Make Real’ 버튼을 누르면 그래프를 Matplotlib 코드로 바로 변환함
     * 미국 IT 기업 Vercel
          + AI 기반 UI 시스템 v0 공개
          + 웹사이트의 가격표 스크린샷을 입력하면 AI로 몇 초 안에 이를 코드로 변환
          + v0는 코드를 출력해 사용자가 특정 부분을 수정하도록 지원
          + “프론트엔드 개발의 종말”이라는 평까지 받으며 소프트웨어 엔지니어 사이에서 화제
     * 이러한 기술은 개발 업무의 생산성과 효율성을 높이되 소프트웨어 엔지니어에게는 새로운 도전이 될 것

   2.프로그레시브 웹 앱(PWA) 도입 확산
     * PWA는 모바일 앱과 비슷한 환경을 제공하는 웹용으로 개발된 앱
     * 모바일 기기의 웹 환경에서도 네이티브 앱과 같은 수준으로 사용자 경험을 누리도록 지원
     * 서비스 워커로 애플리케이션 리소스와 데이터를 캐시 하면 인터넷에 연결되지 않아도 PWA가 작동
     * PWA는 오프라인 접근 가능성, 푸시 알림, 빠른 로딩을 지원하여 사용자 경험을 향상
     * 애플
          + 애플은 지속적인 iOS 업데이트로 PWA를 발전시키는 데 기여
          + PWA로 네이티브 앱과 비슷한 환경을 지원
          + iOS에서는 푸시 알림, Safari 외 브라우저 지원이 제한되지만 이는 업데이트로 점차 개선
     * 마이크로소프트 행보
          + Microsoft Store에 PWA를 무료로 게시하도록 지원
     * 시장에서 영향력이 높은 빅테크 기업의 지원과 PWA 강점에 힘입어 입지는 더 넓어질 것

   3.서버리스 아키텍처 활용 증가
     * 서버리스 아키텍처는 클라우드 공급자가 관리하는 환경에서 애플리케이션을 개발하고 배포하는 방법
     * 서버 관리 부담을 줄이고, 클라우드 기반 서비스를 활용해 인프라를 관리
     * 개발자는 애플리케이션 개발에 더 집중할 수 있음
     * AWS Lambda, Azure Functions, Google Cloud Functions가 서버리스 아키텍처 관련 서비스로 활발히 쓰임
     * 넷플릭스
          + 비디오 인코딩, 사용자 인증 처리, 백엔드 프로세스 관리 업무에 AWS Lambda를 사용
          + 사용자가 동영상을 올리면 람다 함수가 트리거돼 콘텐츠를 여러 기기에서 스트리밍하기에 적합한, 다양한 포맷으로 인코딩하고 처리
          + 비용을 최적화하면서 사용자에게 원활한 스트리밍 경험을 제공
     * 스포티파이
          + Google Cloud Functions를 활용해 음악 스트리밍 플랫폼 안에서 여러 백엔드 작업을 처리
          + 함수는 트리거돼 사용자 인증을 관리하고, 사용자가 생성한 콘텐츠를 처리하며, 음악 추천 알고리즘을 위한 백엔드 작업을 수행
     * 개발자가 개발에 집중하도록 돕고, 서버리스 서비스 기능이 발전하는 등 여러 요소의 영향을 받아 서버리스 아키텍처는 앞으로도 적극적으로 도입될 것

   4.자동화에 힘입은 CI/CD 활성화
     * CI는 개발자가 코드 변경 사항을 공유 저장소에 정기적으로 통합하는 것
          + 여러 개발자의 작업을 실시간으로 통합하고, 문제도 조기에 발견
          + CI 과정에서는 코드 통합 후 단위 테스트, 통합 테스트, 기능 테스트가 자동으로 실행
     * CD는 테스트를 통과한 코드를 자동으로 프로덕션 환경에 배포하는 것
          + 이는 사람 개입을 최소화하고, 배포 과정의 신뢰성을 높임
     * CI/CD는 개발 프로세스를 자동화해 개발자가 더 빠르고 효율적으로 개발하도록 지원
     * 버그를 빠르게 찾아 수정하고, 제품 완성도를 높여 시장에 이를 신속하게 출시하는 데 도움이 됨
     * 이러한 강점을 이유로 CI/CD는 개발 업무에서 활발히 쓰일 걸로 전망됨

   pwa가 널리널리 퍼지길

   통산 993241890283409182번째로 출시된 UI 코드 생성기 덕분에 프론트엔드 개발자들은 시즌 15982034958120394918523284029번째로 멸망했네요...

   언제나 저런 플랫폼은 일정 이상의 퀄리티를 뽑지 못 해 결국 개발자를 찾게 되는 것 같습니다
"
"https://news.hada.io/topic?id=13190","미국이 암호화된 데이터에 뒷문을 설치하려 한 간략한 역사 (2016년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미국이 암호화된 데이터에 뒷문을 설치하려 한 간략한 역사 (2016년)

미국의 암호화된 데이터에 백도어 추가 시도의 간략한 역사

     * 미국 정부는 소비자의 기술 데이터 보호와 정부의 정보 접근 권리에 대한 오랜 싸움에서 최근 드라마틱한 사건이 발생함.
     * 2015년 동안 미국 정치인들과 법 집행 기관은 소프트웨어와 하드웨어에 암호학적 '백도어'를 삽입하여 법 집행 기관이 인증을 우회하고 용의자의 데이터에 몰래 접근할 수 있도록 공개적으로 로비함.
     * 사이버 보안 전문가들은 이러한 백도어가 암호화를 근본적으로 약화시킬 수 있으며 범죄자들에 의해 악용될 수 있다고 일치된 의견을 제시함.

암호화의 중요한 발전과 백도어의 역사

     * 제2차 세계대전 동안 나치의 통신을 암호화하는 데 사용된 에니그마 기계는 암호학에서 중요한 발전임.
     * 에니그마 기계에 백도어가 설치되었다는 소문이 있었으나, BBC의 조사에 따르면 백도어는 없었지만, Crypto AG는 미국과 영국 정보기관에 기계의 기술 사양과 구매 국가에 대한 정보를 제공하는 '신사협정'을 맺음.
     * 1993년 NSA는 '클리퍼 칩'을 촉진했으나, 1994년 연구자 Matt Blaze가 발견한 취약점으로 인해 1996년에는 사용되지 않게 됨.

최근의 백도어 시도와 정부의 반응

     * NSA는 Dual_EC_DRBG 알고리즘에 백도어를 삽입한 것으로 밝혀졌으며, 이 알고리즘은 2007년 랜덤 번호 생성기의 공식 표준으로 발표됨.
     * 네덜란드 정부는 백도어 사용을 거부하고 오픈 암호화 표준을 지원하기로 결정했으며, 프랑스도 파리 테러 공격에 대한 반응으로 백도어 의무화를 거부함.
     * 애플 대 FBI 사건이 법정을 통과하는 동안, NSA의 암호화를 무력화하기 위한 비밀 노력은 계속될 것으로 예상됨.

   GN⁺의 의견
     * 이 기사는 미국 정부가 암호화된 데이터에 백도어를 설치하려는 시도의 역사를 개관하는 것으로, 개인의 프라이버시와 국가 보안 간의 지속적인 긴장 관계를 보여줌.
     * 사이버 보안 전문가들과 기술 산업이 어떻게 이러한 백도어에 반대하는지, 그리고 이러한 백도어가 실제로 암호화를 약화시킬 수 있는지에 대한 통찰을 제공함.
     * 애플 대 FBI 사건과 같은 주요 법적 사건들이 앞으로도 개인의 프라이버시와 데이터 보안을 둘러싼 논쟁에서 중요한 역할을 할 것임을 시사함.

        Hacker News 의견

     * ITAR 규정에 대한 언급:
          + ITAR 규정이 Phil Zimmerman이 PGP 128비트 암호화 기술을 수출하는 것을 막았음.
          + Zimmerman과 MIT 프레스가 소스 코드를 책으로 출판하여 제1수정안에 의해 보호받음으로써 해외에서 OCR과 재컴파일이 가능해짐.
          + ITAR 덕분에 남아프리카의 Thawte가 미국 외 지역에서 128비트 SSL 인증서 판매를 독점함.
          + Thawte는 Verizon에 6억 달러에 인수되었고, 창립자 Mark Shuttleworth는 그 자금으로 우주비행사가 되고 우분투를 설립함.
     * Crypto AG에 대한 새로운 정보:
          + 2020년 2월 11일, 워싱턴 포스트, ZDF, SRF가 Crypto AG가 CIA와 서독 정보기관의 비밀 파트너십으로 소유되었으며, 이 기관들이 암호화된 메시지를 쉽게 해독할 수 있었다고 밝힘.
     * 2016년 기사의 배경:
          + 2015년 샌버나디노 공격 이후 FBI가 공격자의 아이폰에 접근하려 했고, Apple은 모든 아이폰에 임의의 펌웨어/앱/OS를 설치할 수 있는 인증서를 원하는 FBI의 요청에 저항함.
     * SHA 알고리즘의 기원에 대한 호기심:
          + 한 사용자가 SHA-0에 대한 정보를 얻기 위해 NSA에 정보 자유법(FOIA) 요청을 함.
          + NSA로부터 비용이 많이 들 것이라는 대략적인 답변을 받은 후 NSA 웹사이트 접근이 차단됨.
     * 인텔 ME와 AMD의 보안 취약점:
          + 새로운 칩을 사용하는 사용자는 인텔 ME(또는 AMD의 동등한 기능)로 인해 보안에 큰 구멍이 있으며, OS로는 패치할 수 없음.
          + puri.sm이 이 문제를 해결하기 위한 조치를 취하고 있지만 효과에 대한 정보는 불분명함.
     * NSA가 리눅스 커널에 넣으려 했던 speck과 simon 암호화 알고리즘:
          + NSA가 리눅스 커널에 speck과 simon 암호화 알고리즘을 포함시키려 했으나, Schneier와 같은 전문가들의 비판으로 결국 제거됨.
     * 미국의 암호화 알고리즘 수출 정책:
          + 미국은 오랫동안 암호화 알고리즘을 무기로 간주하고 수출에 무기 수출 허가가 필요했음.
          + 미국 정부는 56비트 암호화만으로 충분하다고 주장하며, DES를 사용하여 은행과 기타 기관의 통신을 ""보호""하도록 허용함.
     * NSA의 타원 곡선 암호화에 대한 의혹:
          + NSA가 타원 곡선 암호화의 시드에 자체적인 ""매직 넘버""를 넣었다는 의혹이 있음.
     * Enigma/Crypto AG 혼동과 David Kahn의 사망:
          + 기사에서 Enigma와 Crypto AG의 혼동이 있었으나, 많은 사람들이 주목하지 않았음.
          + David Kahn의 사망을 기리기 위해 이 정보를 공유하는 것이 적절하다고 생각함.
"
"https://news.hada.io/topic?id=13182","칼 웨더스 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                칼 웨더스 사망

     * 칼 웨더스, '록키' 시리즈의 아폴로 크리드 역으로 유명한 배우, 76세로 별세
          + 미국 배우 칼 웨더스가 가족에 의해 76세의 나이로 별세했음.
          + '록키' 시리즈의 첫 네 편에서 아폴로 크리드 역을 맡았던 웨더스는 잠을 자는 동안 평화롭게 세상을 떠났다고 가족이 발표한 성명에서 밝힘.
          + 그의 다른 영화 출연작으로는 아놀드 슈워제네거와 함께한 '프레데터', 아담 샌들러의 '해피 길모어' 등이 있음.
     * 영화, TV, 예술 및 스포츠 분야에서의 기여
          + NFL 라인배커로 경력을 시작한 웨더스는 ""비범한 인간이자 특별한 삶을 살았던 사람""이라고 가족이 전함.
          + 영화, 텔레비전, 예술, 스포츠 분야에 기여를 통해 세계적으로, 그리고 여러 세대에 걸쳐 지울 수 없는 흔적을 남겼다고 가족이 말함.
          + 그는 사랑받는 형제, 아버지, 할아버지, 파트너, 친구였음.
     * 액션과 코미디를 넘나드는 연기
          + 웨더스는 '아레스티드 디벨롭먼트'부터 '더 만달로리안'까지 액션과 코미디 장르에서 활약했으며, 디즈니+ 히트 시리즈 '더 만달로리안'의 모든 세 시즌에 출연함.
          + 전 캘리포니아 주지사이자 액션 스타인 슈워제네거는 웨더스를 칭찬하며 ""전설적인 인물""이라고 언급함.
     * 축구 선수에서 배우로
          + 1948년 뉴올리언스에서 태어난 웨더스는 샌디에이고 주립대학교에서 축구를 하며 연극 연기를 공부했고, 1970년에 오클랜드 레이더스에 합류함.
          + 50년 이상의 할리우드 경력 동안 75편 이상의 영화와 TV 쇼에 출연함.
          + 2021년에는 '더 만달로리안'에서의 역할로 에미상 후보에 올랐으며, '스타워즈' 시리즈의 두 에피소드를 감독했고, '로 앤드 오더', '시카고 메드'의 에피소드도 연출함.
     * 동료들과 팬들의 애도
          + 아담 샌들러는 소셜 미디어를 통해 ""위대한 사람, 아버지, 배우, 운동선수""라며 애도의 뜻을 전함.
          + '브레이킹 배드'의 배우 지안카를로 에스포지토는 웨더스를 ""친애하는 친구이자 형제""라고 부르며 그의 부재를 슬퍼함.
          + '록키' 시리즈의 동료인 실베스터 스탤론은 웨더스를 자신의 삶과 성공에서 뗄 수 없는 부분이라고 언급하며 감사의 뜻을 표함.

   GN⁺의 의견:
     * 칼 웨더스는 '록키' 시리즈의 아폴로 크리드 역으로 가장 잘 알려진 배우이며, 그의 별세는 영화계와 팬들에게 큰 손실임.
     * 그는 스포츠 선수에서 배우로 전향한 성공적인 예로, 다양한 장르에서 두각을 나타내며 폭넓은 팬층을 확보했음.
     * 웨더스의 삶과 경력은 열정과 다재다능함을 보여주는 사례로, 많은 이들에게 영감을 주고 있으며, 그의 유산은 앞으로도 오랫동안 기억될 것임.

        Hacker News 의견

     * Carl Weathers의 'Arrested Development' 출연에 대한 에피소드가 공유됨. Weathers가 자신의 캐릭터에 대한 아이디어를 제안했고, 이는 작가들의 기대를 뛰어넘는 뛰어난 제안이었음.

     ""Carl Weathers가 'Arrested Development'에서 자신의 캐릭터를 위해 '매우 인색한 사람'이라는 아이디어를 제안했고, 이는 작가진에게 큰 영감을 주었다고 함.""
     * Carl Weathers의 대사 ""There’s still plenty of meat on that bone...""를 인용하며 그를 추모함.

     ""Carl Weathers가 말한 '뼈에 아직 고기가 많이 남아 있다...'는 대사를 통해 그를 기억함.""
     * 영화 'Predator'에서 Arnold와의 팔씨름 장면을 통해 Weathers의 남성미를 칭찬하며 그의 죽음을 애도함.

     ""'Predator'에서 Arnold와 팔씨름하는 Carl Weathers의 장면은 남성의 테스토스테론을 증가시키는 것으로 유명함.""
     * 'Happy Gilmore'에서 Chubbs Peterson 역할을 언급하며, Weathers가 단순한 운동선수가 아닌 연극예술 석사 학위를 가진 배우였음을 강조함.

     ""Carl Weathers는 'Happy Gilmore'에서 Chubbs Peterson 역할을 했으며, 운동선수에서 배우로 전향한 것이 아니라 연극예술 석사 학위를 가진 인물임.""
     * 'Predator' 출연과 SNL에서의 유명한 장면을 회상하며 Weathers의 연기 경력을 기림.

     ""Carl Weathers는 'Predator'에 출연했고, SNL에서 이를 유명하게 언급한 바 있음.""
     * Weathers가 자신을 연기한 배우들 중 최고로 꼽히며, 'Curb Your Enthusiasm'의 Larry David, 'Family Guy'의 Adam West와 함께 언급됨.

     ""Carl Weathers는 자신을 연기한 배우들 중 최고로 평가받으며, Larry David, Adam West와 함께 언급됨.""
     * Weathers의 'Happy Gilmore'에서의 역할을 기리며 그가 놓친 것이 없음을 암시하는 댓글이 달림.

     ""Carl Weathers의 'Happy Gilmore'에서의 역할을 기리며, 그가 아직 시작한 것이 없다고 언급함.""
     * Weathers의 카리스마 넘치는 연기를 칭찬하며 그의 죽음을 애도하는 댓글이 달림.

     ""Carl Weathers는 모든 역할에서 카리스마를 발산했으며, 그의 죽음을 애도함.""
     * Weathers가 'Rocky/Predator'부터 'Mandalorian'까지 다양한 작품에서 독특한 존재감을 보여줬음을 언급하며 그의 죽음을 애도함.

     ""Carl Weathers는 'Rocky/Predator'부터 'Mandalorian'까지 독특한 존재감을 보여준 인물로, 그의 죽음을 애도함.""
     * Weathers가 NFL에서 몇 시즌 동안 활약했던 것을 언급하며 그의 다채로운 삶을 칭송함.

     ""Carl Weathers는 NFL에서도 몇 시즌 동안 활약했으며, 그의 삶은 다채로웠음.""
"
"https://news.hada.io/topic?id=13256","Show HN: 1분 만에 인지 집중력 향상하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show HN: 1분 만에 인지 집중력 향상하기

점을 보며 숨쉬기: 집중력 향상을 위한 1분간의 연습

     * 정신 집중력을 향상시키기 위해, 한 점을 바라보며 30~90초간 숨쉬기 연습을 하는 것이 도움이 됨
     * 이 간단한 연습은 다음 작업을 위한 집중력을 높이는 데 효과적임
     * 1분 동안 점을 바라보며 깊게 숨을 쉬는 것만으로도 마음을 진정시키고, 집중력을 개선할 수 있음
     * 점이 서서히 커졌다 작아지며 숨을 쉬며 집중을 유도
     * 이는 미국의 신경과학자인 Andrew Huberman 교수의 유튜브 영상 Goals Toolkit: How to Set & Achieve Your Goals 에 나오는 내용을 참고함

GN⁺의 의견

     * 이 기사는 단순하지만 효과적인 집중력 향상 방법을 제시함으로써, 바쁜 일상 속에서도 쉽게 실천할 수 있는 정신 건강 관리법을 소개함.
     * 짧은 시간을 투자하여 큰 효과를 얻을 수 있는 이 방법은 많은 사람들에게 유용할 것임.
     * 특히, 장시간 컴퓨터 작업을 하는 사람들에게 짧은 휴식과 함께 집중력을 회복할 수 있는 좋은 방법이 될 수 있음.

        Hacker News 의견

     * 한 사용자는 소셜 미디어에서 ADHD를 가지고 있다는 주장에 대해 의문을 제기하며, 60초 동안 점에 집중하는 데 문제가 없다면 그것이 ADHD가 아닐 수 있음을 시사함.
     * 다른 사용자는 점에 집중하는 과정에서 초기의 저항감을 느끼고, 다른 사람들의 반응이나 장난스러운 놀람을 예상하는 등 여러 생각에 쉽게 산만해지는 경험을 공유함.
     * 어떤 사용자는 인터넷 초기 사용자로서, 점에 집중하는 동안 놀람을 주는 장난을 예상하며 긴장함을 표현함.
     * 한 사용자는 사이트가 유용하다고 평가하면서도, 애니메이션의 움직임이 부드러워지면 더 좋을 것이라는 제안을 함.
     * 다른 사용자는 사이트의 단순함을 좋아하면서도 타이머 숨기기 기능과 다크 모드 추가를 요청함. 이 설정들이 로컬 저장소에 저장되어 유지되길 바람.
     * 한 사용자는 점의 대비가 너무 높아서 운동 후 눈에 흔적이 남는 것을 우려함.
     * 다른 사용자는 점의 맥박이 너무 빠르다고 느끼며, 맥박 속도를 늦추고 색상 대비를 더 쾌적하게 조정할 것을 제안함.
     * 한 사용자는 이 운동이 Wim Hof의 호흡 운동을 연상시킨다고 언급함.
     * 어떤 사용자는 명상을 시작한 지 10년이 되었지만, 불안을 개발한 후 명상 중의 이미지가 공포감을 유발한다고 공유하며, 장기적인 명상과 비현실감 사이의 관계에 대해 논의하는 논문이 있는지 물음.
     * 마지막 사용자는 페이지가 로드되는 데 30초를 기다렸지만, 그 과정에서 집중력이 향상되었다고 느끼지는 못했지만, 30초 동안의 평온함을 높이 평가함.
"
"https://news.hada.io/topic?id=13233","Hugging Face, OpenAI의 커스텀 GPTs에 대항하는 오픈 소스 AI 어시스턴트 메이커 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hugging Face, OpenAI의 커스텀 GPTs에 대항하는 오픈 소스 AI 어시스턴트 메이커 출시

사용자 정의 가능한 AI 챗봇 생성이 쉬워짐

     * 뉴욕에 기반을 둔 스타트업 Hugging Face가 개발자 중심의 오픈 소스 AI 코드 및 프레임워크 저장소를 제공하며, 최근에는 제3자가 사용자 정의 가능한 Hugging Chat Assistants를 출시
     * 이 새로운 무료 제품은 사용자들이 Hugging Chat을 통해 OpenAI의 ChatGPT와 유사한 기능을 가진 맞춤형 AI 챗봇을 쉽게 만들 수 있게 해줌
     * OpenAI의 GPT Builder와 유사하지만, Hugging Chat Assistant는 무료이며, OpenAI의 서비스는 유료 구독이 필요함

오픈 소스 LLM을 사용한 AI 지능

     * Hugging Face의 기술 리더인 Phillip Schmid는 소셜 네트워크 X에서 사용자가 ""2번의 클릭으로"" 새로운 개인 Hugging Face Chat Assistant를 만들 수 있다고 발표
     * Hugging Chat Assistant 사용자는 Mistral의 Mixtral부터 Meta의 Llama 2에 이르기까지 다양한 오픈 소스 대규모 언어 모델(LLM) 중에서 선택하여 AI Assistant의 지능을 구동할 수 있음

GPT 스토어의 오픈 소스 경쟁자?

     * Hugging Face는 OpenAI의 GPT 스토어와 유사하게, 사용자가 선택하고 사용할 수 있는 제3자 맞춤형 Hugging Chat Assistants의 중앙 저장소를 만듦
     * 이 저장소 페이지는 GPT 스토어 페이지와 시각적 스타일까지 매우 유사하게 구성되어 있으며, 사용자 정의 Assistants가 각각의 사각형, 야구 카드 스타일 상자 안에 원형 로고와 함께 표시됨

GPT보다 나은 점과 아닌 점

     * 오픈 소스 AI 커뮤니티의 일부 사용자들은 Hugging Chat Assistants를 ""GPT보다 낫다""고 평가하며, 주로 사용자 맞춤형 모델의 사용자 정의 가능성과 무료라는 점을 장점으로 꼽음
     * 그러나 Hugging Chat Assistants는 현재 웹 검색, 검색 증강 생성(RAG)을 지원하지 않으며, OpenAI의 이미지 생성 AI 모델 DALL-E 3의 힘을 빌려 자체 로고를 생성하는 기능도 없음
     * Hugging Chat Assistants의 출시는 오픈 소스 커뮤니티가 폐쇄적인 경쟁자들에게 빠르게 따라잡고 있음을 보여주며, Mistral의 새로운 오픈 소스 모델 Miqu가 GPT-4의 성능에 거의 맞먹는 것이 확인된 지 하루 만에 이루어짐
"
"https://news.hada.io/topic?id=13158","2023년 추수감사절 보안 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2023년 추수감사절 보안 사건

2023년 추수감사절 보안 사건

     * 2023년 11월 23일 추수감사절에 Cloudflare는 자체 호스팅된 Atlassian 서버에서 위협 행위자를 탐지함.
     * 보안 팀은 즉시 조사를 시작하고 위협 행위자의 접근을 차단함.
     * 11월 26일에는 CrowdStrike의 포렌식 팀을 독립적인 분석을 위해 불러들임.
     * CrowdStrike는 조사를 완료하고 Cloudflare는 이 블로그 포스트를 통해 보안 사건의 세부 사항을 공유함.
     * Cloudflare 고객 데이터나 시스템은 이 사건으로 인해 영향을 받지 않았음을 강조함.
     * 접근 제어, 방화벽 규칙, Zero Trust 도구를 사용한 하드 보안 키 강제 적용으로 인해 위협 행위자의 수평 이동 능력이 제한됨.

“코드 레드” 복구 및 강화 작업

     * 위협 행위자가 환경에서 제거된 후, 보안 팀은 회사 전반에 걸쳐 필요한 모든 사람들을 동원하여 침입 조사 및 접근 차단을 완료함.
     * 11월 27일부터 기술 인력을 동원하여 ""코드 레드""라는 프로젝트에 집중함.
     * 이 프로젝트는 환경 내 모든 제어를 강화하고 검증하여 미래의 침입에 대비하고 위협 행위자가 환경에 다시 접근하지 못하도록 하는 것이 목표임.
     * CrowdStrike는 위협 행위자의 활동 범위와 정도에 대한 독립적인 평가를 수행함.

공격 타임라인

     * 공격은 10월 Okta의 보안 침해로 시작되었으며, 위협 행위자는 11월 중순부터 Okta 침해로 얻은 자격 증명을 사용하여 Cloudflare 시스템을 대상으로 함.
     * 10월 18일 Okta 침해로 인해 위협 행위자가 자격 증명에 접근함.
     * 11월 14일부터 위협 행위자는 시스템 탐색 및 접근 시도를 시작함.
     * 11월 15일에는 Atlassian Jira와 Confluence에 성공적으로 접근함.
     * 11월 16일에는 Atlassian 사용자 계정을 생성함.
     * 11월 17일부터 20일까지는 Cloudflare 시스템에 접근하지 않음.
     * 11월 22일에는 지속적인 접근을 위해 Sliver Adversary Emulation Framework를 설치함.
     * 11월 23일에는 보안 팀이 위협 행위자의 존재를 감지하고 접근 차단을 시작함.

결론

     * 이 사건은 국가 주도의 공격자에 의한 것으로 추정되며, Cloudflare는 이 사건의 영향을 제한하고 미래의 공격에 대비하기 위해 많은 노력을 기울임.
     * Cloudflare의 엔지니어링 팀은 시스템을 보호하고 위협 행위자의 접근을 이해하며 즉각적인 우선 사항을 해결하고 전반적인 보안을 개선하기 위한 계획을 수립함.
     * CrowdStrike는 독립적인 평가를 수행하였으며, 최종 보고서가 완료된 후 Cloudflare는 내부 분석과 침입에 대한 조치에 자신감을 가지고 이 블로그 포스트를 공개함.

   GN⁺의 의견:
    1. 이 사건은 Cloudflare의 Zero Trust 아키텍처의 중요성을 강조함. 이는 시스템 간의 격리를 통해 전체 조직에 대한 위협의 확산을 제한하는 방식으로 작동함.
    2. Cloudflare의 신속한 대응과 ""코드 레드"" 프로젝트를 통한 보안 강화 노력은 기업이 사이버 보안 위협에 대응하는 방식에 대한 통찰력을 제공함.
    3. 이 글은 사이버 보안 사고가 발생했을 때 조직이 어떻게 대응하고, 어떤 조치를 취해야 하는지에 대한 이해를 돕는 유익한 사례로 작용함.

        Hacker News 의견

     * 클라우드플레어(Cloudflare)의 블로그 포스트와 같은 행동들이 신뢰를 주는 이유
          + 클라우드플레어가 완벽하지는 않지만, 공학적 사고방식과 심각한 문제에 대한 대처로 신뢰할 만함.
          + 블로그 포스트에 대한 감사 표현.
     * 데이터 유출의 문제점
          + 데이터가 한 번 유출되면 영구적으로 통제 불가능.
          + 사건 후 강화 작업과 대화는 중요하지만 이미 발생한 일을 막을 수는 없음.
     * Okta 시스템의 보안 문제
          + Okta 시스템의 두 번째 타격을 받은 것에 대한 우려.
     * 회전되지 않은 서비스 토큰과 계정
          + 사용되지 않는다고 잘못 믿어져서 회전되지 않았음.
          + 왜 완전히 취소되지 않았는지에 대한 의문.
     * 공격자의 제한된 접근과 대응 조치
          + 공격자의 접근이 제한적이라고 믿었지만, 모든 생산 자격증명을 회전시키고, 시스템을 포렌식 분석하고, 재이미징 및 재부팅하는 등의 광범위한 조치를 취함.
          + 브라질 데이터 센터의 새로운 시스템에 대한 접근 시도는 실패했으며, 장비는 제조업체에 반환되어 검사를 받고 교체됨.
     * 공격자의 목적 분석
          + 위키 페이지, 버그 데이터베이스, 소스 코드 저장소 분석을 통해, 클라우드플레어의 글로벌 네트워크 아키텍처, 보안, 관리 정보를 찾으려는 것으로 보임.
     * 클라우드플레어의 BitBucket 사용에 대한 놀라움
          + 클라우드플레어가 BitBucket을 사용한다는 사실에 대한 놀라움 표현.
     * 사용되지 않는 자격증명에 대한 처리
          + 사용되지 않는다고 여겨진 자격증명에 대해 회전이 아닌 삭제가 적절했을 것임.
     * Okta 사건 후 자격증명 회전과 허니팟 제안
          + 유출된 자격증명을 회전시킨 후, 공격자의 행동을 관찰하기 위해 허니팟을 사용할 것을 제안함.
     * 제로 트러스트(ZT)에 대한 의문
          + 단일 베어러 토큰으로 애플리케이션에 접근할 수 있는 것이 제로 트러스트의 정의에 부합하지 않는다고 지적함.

   배경 지식: 클라우드플레어는 인터넷 보안 서비스 및 분산 도메인 이름 서버 서비스를 제공하는 회사이며, Okta는 신원 및 접근 관리 서비스를 제공하는 회사임. 제로 트러스트는 네트워크 보안의 한 모델로, 기본적으로 모든 사용자와 장치를 신뢰하지 않고 검증하는 접근 방식을 말함.
"
"https://news.hada.io/topic?id=13245","jQuery v4.0.0 베타 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          jQuery v4.0.0 베타 공개

     * 오랜 기간 작업 된 jQuery의 차세대 버전인 4.0.0 버전이 베타로 출시됨.
     * 주요 변경 사항
          + IE 10 이하 브라우저에 대한 지원이 중단됨.
          + array push/sort 등 Javascript에 기본적으로 포함된 기능이 제거되었으며, Javascript에서 더 이상 사용하지 않은 기능도 같이 제거됨.
          + W3C 사양과 일치하도록 focus 및 blur의 이벤트에 대한 처리가 변경됨.
          + ajax 요청 시 자동으로 JSONP로 요청하던 기능이 제거됨.
          + CSP 정책 준수를 위해 Trusted Types API를 사용하도록 변경됨.
     * 이 외에도 많은 변경 사항이 있으며, 전반적으로 크기가 크게 줄어듦.
     * jQuery 3.0 이상 버전에서 업그레이드할 경우 호환성 문제는 보고되지 않음.

   jQuery가 그렇게 못 쓸 물건은 아니라서 더 없어지지 않는 것 같아요.

   SPA 구조에서 jQuery는 말도 안되는 선택이겠지만,
   전통적인(?) 서버 사이드 템플릿 엔진과 함께 사용한다면 아무리 jQuery가 무겁고 가독성이 나쁘다고 해도 바닐라에 비해 압도적으로 생산성이 높아서ㅋㅋ..

   심지어 jQuery로 깔끔하게 작성하려면 얼마든지 그렇게 작성할 수 있고, 클래스, 비동기, fetch 등등 jQuery 발명 오랜 이후에 나온 친구들과 함께 사용하는 것도 얼마든지 가능하니...
   SPA가 아닌 구조에서는 jQuery를 쓰지 않겠다고 굳이 바닐라로 작성할 필요를 느끼지 못하겠더라구요.

   결국 지금 시대에 SPA가 아닌 구조로 작성하는게 말이 되냐 안되냐의 문제가 되는데,

   개인적으로 이 작업을 SI나 에이전시에게 맡겼을 때 10억 정도 나오는 정도의 규모에서는,
   SPA(보다는 그것들을 구현하는 모던한 프레임워크들)을 채택함으로써 얻을 수 있는 이점이 비용이나 기간 대비 크지 않다고 보는 편이라...

   추억의 jquery네요.. 라고 말하기엔 아직도 쓰고 있군요

   그리고 제이쿼리 쓰는 인력이 싸고, 인력풀도 생각보다 꽤 있습니다.
   사업자들이 리액트 안쓰려하는 이유 중 하나가 바로 지들 기준으로는 거품이 높다 이거죠...

   공공은 신규에 아직도 도입합니다. 왜냐고요? 망할 웹디자인기능사 때문에...
   거기 실기가 반강제로 제이쿼리 요구합니다. 제이쿼리 말고는 대안이 없어요.

   추억과 현실에 공존하는 jquery...
"
"https://news.hada.io/topic?id=13171","Juno - 애플 비전 프로를 위한 유튜브 클라이언트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Juno - 애플 비전 프로를 위한 유튜브 클라이언트

     * Apple Vision Pro 사용자를 위한 새로운 YouTube 클라이언트 앱인 'Juno for YouTube' 출시.
     * 기존 iPad 앱이나 visionOS 앱이 없어 불편함을 겪던 사용자들에게 새로운 대안 제공.
     * Apollo 앱의 코드를 재사용하여 개발, 사용자 경험 향상에 중점을 둠.

기술적으로 어떻게 작동하나요?

     * YouTube는 여러 API를 제공하며, Juno는 YouTube의 embed API를 사용.
     * API 키나 호출 제한 없이 웹뷰를 통해 비디오를 로드하고 JavaScript 메소드로 제어.
     * 네이티브 visionOS UI와 JavaScript를 결합하여 사용자에게 최상의 경험 제공.
     * 비디오의 종횡비를 자동 감지하여 창 크기를 조정하는 기능 지원.

브라우징 자체는 어떻습니까?

     * Juno는 YouTube 웹사이트를 기반으로 하되, CSS와 JavaScript를 통해 사이트 테마를 조정.
     * visionOS의 유리 효과를 살리고 대비를 높여 가독성을 개선.
     * 네이티브 UI 버튼을 사용하여 구독 목록 등을 로드하며, 사용자의 추천 및 구독 목록을 정상적으로 제공.

광고를 차단하나요?

     * Juno는 광고를 차단하지 않으며, YouTube Premium 사용자는 광고 없이 비디오 시청 가능.
     * YouTube Premium은 광고 걱정 없이 비디오를 즐길 수 있으며, 크리에이터에게 더 많은 지원을 제공.

기능

     * 투명한 visionOS 인터페이스 제공.
     * 자동 종횡비 감지 및 비디오 재생 속도 조절 기능.
     * 네이티브 컨트롤을 통한 비디오 재생 관리.
     * 비디오를 빠르게 앞뒤로 이동할 수 있는 제스처 지원.
     * 홈 화면에서 YouTube를 빠르게 실행할 수 있는 기능.
     * 주변을 어둡게 하여 비디오에 집중할 수 있는 기능.
     * 추천, 구독, 재생목록 등의 전체 보기 지원.
     * 비디오 크기 조절 및 자동 화질 선택 기능.

추가로 고려 중인 기능

     * 앱 출시에 맞춰 개발된 기능 외에도 댓글 보기, 화질 직접 선택, 자막 컨트롤 등을 추가할 계획.
     * 더 몰입감 있는 환경과 다중 비디오 뷰 기능을 고려 중.

피드백을 줄 수 있나요?

     * 사용자의 피드백을 환영하며, 실제 기기에서의 테스트를 통해 개선할 점을 찾고자 함.
     * Mastodon이나 Twitter를 통해 개발자에게 직접 피드백 가능.

확인해보세요!

     * App Store에서 $5에 구매 가능한 Juno 앱.
     * 구독이나 인앱 구매 없이 일회성으로 앱을 구매하는 방식.
     * 홈 화면에서 바로 YouTube를 실행할 수 있는 편리함 제공.
     * 앱 아이콘 디자인에 대한 감사의 말과 함께, 더 많은 기능을 추가할 계획을 밝힘.

GN⁺의 의견:

    1. Juno for YouTube는 기존 YouTube 앱의 부재를 메우며, Apple Vision Pro 사용자들에게 맞춤화된 비디오 시청 경험을 제공하는 것이 중요함.
    2. 네이티브 앱과 웹 기반의 장점을 결합한 접근 방식은 사용자에게 더 나은 인터페이스와 기능을 제공할 수 있음.
    3. 이 앱은 개발자 커뮤니티에게 visionOS와 같은 새로운 플랫폼에서도 혁신적인 솔루션을 개발할 수 있는 가능성을 보여줌.

        Hacker News 의견

     * 자가 호스팅에 관심이 있는 사람들을 위해, Invidious와 Yattee 조합이 macOS/iOS/tvOS에서 훌륭하게 작동한다는 의견이 있음. 이 조합을 도커를 이용해 배포한 이후로 다른 것을 볼 필요가 없었다고 함.
     * 한 개발자가 실리콘밸리 대기업들의 서비스를 이용하는 소프트웨어를 개발하는 데에 능숙하지만, 이러한 대기업들이 언제든지 접근을 차단할 수 있다는 점을 지적함.
     * YouTube 공식 클라이언트와 비교했을 때, 플랫폼에 맞는 YouTube 클라이언트가 있다는 것이 좋다는 의견이 있음. 특히 iPad용 공식 클라이언트가 전화기와 같은 작은 터치 타겟을 사용하는 것과 대조됨.
     * Apollo 개발자가 만든 것이라며, 그의 뛰어난 재능을 칭찬하는 의견이 있음.
     * 광고 차단 기능에 대한 질문에, YouTube 프리미엄을 사용하면 광고가 보이지 않을 것이라는 답변이 있음. 새로운 제품이 새로운 생태계를 의미하고, 이는 맞춤 설정 가능성이 줄어든다는 아이러니를 지적함.
     * Christian이 충분한 요금을 청구하지 않고 있다는 의견이 있음. 이 앱은 $10 이상의 가치가 있다고 함. Reddit 앱을 사용할 때마다 불만이 생긴다고 함.
     * 독립 개발자가 1.78조 달러 규모의 회사인 YouTube의 광고 기반 비디오 공유 플랫폼에 접근하기 위한 앱에 $5를 청구한다는 의견이 있음.
     * Christian을 좋아한다고 하며, Apollo (Reddit 클라이언트) 사용자였다고 함. 2023년 Reddit 대 개발자 사건 동안 그를 지지했다고 함. YouTube가 의도적으로 앱스토어에 앱을 올리지 않았는데, 그들의 의도를 무시하고 앱을 만들어 앱스토어에 올리는 것은 좋은 생각이 아닐 수 있다는 우려를 표함.
     * 이 앱이 아름답게 보인다고 하며, Alphabet이 참여하지 않음으로써 더 프리미엄 앱을 얻었다고 생각함. 언젠가 Quest 포트가 이루어지길 바란다고 함.
     * 앱이 멋져 보인다고 하며, 댓글 기능을 미래의 가능성으로 언급한 Christian에게, 라이브 스트림을 하면서 댓글을 별도의 공간 상자로 만드는 아이디어가 좋을 것 같다고 함. 다른 일을 하면서 스트림을 켜두는 것을 좋아하지 않지만, 많은 젊은이들이 그렇게 하며, 스트림 소비 경험의 일부는 댓글이라고 함.
"
"https://news.hada.io/topic?id=13253","BlueSky 가입이 이제 누구에게나 열림","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        BlueSky 가입이 이제 누구에게나 열림

Bluesky 소셜 네트워크 가입 개방

     * Bluesky는 누구나 기여할 수 있는 개방형 소셜 네트워크 구축 중
     * 초대 코드를 사용하여 가입했으나 이제 누구나 가입 가능

Bluesky란 무엇인가?

     * Bluesky에 대한 설명과 시작 방법은 사용자 FAQ에서 확인 가능.
     * 기술적 기반에 대한 자세한 내용은 Martin Kleppman과 협력하여 작성한 논문에서 제공.

앞으로의 기능

     * 사용자가 소셜 미디어 경험을 제어할 수 있는 기능 개발 중.
     * 곧 출시 예정인 스택 가능한 중재 서비스로 안전성 강화.
     * 사용자는 기존 중재 선호도에 추가 옵션을 쌓을 수 있음.
     * 예를 들어, 팩트체킹 기관이 레이블링 서비스를 운영하고 사용자가 구독할 수 있음.

개방형 소셜 네트워크

     * Bluesky는 사용자 경험이 단일 회사에 의해 통제되지 않는 디자인.
     * 타임라인이나 콘텐츠 필터 등을 사용자가 쉽게 맞춤 설정 가능.
     * 이달 중 ""연합(federation)"" 기능의 초기 실험 버전 출시 예정.
     * 개발자는 내부적으로 여러 서버 간에 네트워크를 연합하고, 자체 호스팅 서버를 연결할 수 있음.

GN⁺의 의견

     * Bluesky는 사용자가 자신의 소셜 미디어 경험을 직접 제어할 수 있는 새로운 개방형 소셜 네트워크임.
     * 중재 서비스의 새로운 접근 방식과 연합 기능은 사용자와 개발자 모두에게 더 큰 자유와 선택권을 제공함.
     * 이러한 혁신적인 기능은 소셜 미디어 플랫폼의 미래에 대한 흥미로운 전망을 제시하며, 사용자 중심의 인터넷 경험을 재정의할 잠재력을 가짐.

   블루스카이 추천합니다. 작년 3월에 가입해서 잘 쓰고 있습니다

   개인적으로 Whispy의 베타 출시를 빨리 보고 싶네요.

   일본 쪽에서는 misskey.io (플래그십 인스턴스) 의 트래픽이 덩달아 늘어난 모양입니다.

   https://misskey.io/notes/9pf15dmpzxqw0aut

   Misskey

        Hacker News 의견

     * Bluesky의 중대한 이정표
          + Bluesky는 6개월 이상 연방 샌드박스를 운영해왔으며, 이제 생산 네트워크에서도 개방형 연방을 약속할 수 있음.
          + 조만간 다른 개인/기관이 운영하는 모더레이션 라벨링 서비스를 사용자가 선택할 수 있는 쌓을 수 있는 모더레이션 기능이 도입될 예정임.
          + 효율적으로 확장 가능한 분산 소셜 네트워크를 구축하는 기술적 도전은 매우 흥미로웠음.
          + 인프라는 독립적인 PDS 인스턴스와 두 개의 작은 공유 없는 데이터센터 PoPs로 상당히 분산되어 있음.
          + SQLite를 사용하여 각 사용자의 저장소를 위한 수백만 개의 개별 데이터베이스와 ScyllaDB를 글로벌 인덱싱 서비스(AppView)에 사용함.
          + 기술적이거나 그 외의 질문에 답변할 수 있는 팀원이 오늘 있을 예정임.
          + Bluesky와 AT Protocol에 대한 Martin Kleppman이 주로 작성한 논문도 관심을 가질 만함.
     * Bluesky 사용자의 경험
          + 몇 달 동안 Bluesky를 사용해보니, GIF나 비디오가 없어 2014년의 Twitter 같은 느낌을 줌.
          + Twitter에서 팔로우하던 많은 사람들이 이동했지만, 이제는 덜 활동적이고 조용해짐.
          + ""발견"" 탭에서는 대부분의 내용이 흥미롭지 않으며, 남성들의 성적인 사진, 퍼리, 정치적인 내용, Twitter에서 일어나는 일에 대한 토론 등을 볼 수 있음.
          + 새로운 사용자들은 종종 프로필 사진과 소개 글을 올리고 사람들을 팔로우하기 전에 차단을 권장받음. 이는 개인/잠긴 계정이 없기 때문일 수도 있음.
     * Bluesky에 대한 의견
          + Bluesky를 즐기는 사람들의 증언을 들어보면, 그 매력은 독점성과 소셜 미디어 마니아들만을 위한 초기 Twitter의 느낌에 있음.
          + Twitter와 같은 소셜 미디어의 문제점을 피할 수 있는 방법이 무엇인지, 기술이나 연방 여부와 관계없이 인터넷 규모의 커뮤니티가 잘 작동하지 않는다는 점에 의문을 제기함.
          + Discord에 대한 불만이 많지만, 더 많은 커뮤니티가 넓은 네트워크로부터 자신을 격리하여 대화를 민간하게 유지해야 한다고 생각함.
     * Bluesky의 타이밍과 대상
          + Twitter의 드라마가 한창일 때보다는 영향력이 덜할 것 같음.
          + 홈페이지는 기술 제품을 소개하는 사이트처럼 보이며, 발표 글도 매우 정제되지 않은 느낌임.
          + Bluesky의 대상은 일반 Facebook/Twitter/IG 사용자보다는 더 기술적인 사용자인 것 같음.
          + Bluesky와 Mastodon 간의 상호 운용성에 대한 질문이 있음.
     * 개인 정보 보호에 대한 우려
          + 전화번호를 요구하는 것은 사용자에게 받아들일 수 없는 조건임.
     * Bluesky와 경쟁자들
          + Twitter가 붕괴될 때 Meta는 ActivityPub/Mastodon과 완전히 호환되는 경쟁자를 출시했지만, 오픈 경쟁자를 만들기 위해 헌신한 Bluesky 팀은 아무도 사용하지 않는 독점 프로토콜을 만듦.
     * Bluesky와 Nostr의 비교
          + Bluesky와 Nostr를 동시에 사용해봤으며, Jack이 이 프로젝트를 포기하고 Nostr에 전념한 것은 주목할 만함.
          + Bluesky는 너무 많은 '깨어있는' 에코 챔버이며, 분산되고, 허가 없는, 검열할 수 없는 정보 공유의 사명을 달성할 실제 기회가 없음.
          + 이 프로젝트는 출시와 동시에 실패할 것이며, 주류로 받아들여질 가능성이 없음.
     * Bluesky의 마케팅 전략
          + Bluesky의 코믹스는 사용자에게 매우 불쾌한 감정을 불러일으킴.
          + 원치 않는 것들을 차단하는 것이 주요 판매 포인트라는 것이 이상함.
          + 탐험을 강조하는 것도 혼란스러움.
     * 소셜 네트워크 관리 앱
          + BlueSky/Mastodon/Threads/Linkedin 등 다양한 소셜 네트워크에 걸쳐 게시물을 관리할 수 있는 앱이 있는지에 대한 질문이 있음.
          + 소셜 네트워크의 분열로 인해 다른 장소에 있는 다양한 청중에게 수동으로 게시하는 것이 번거로움.
     * Mastodon에 대한 선호
          + Mastodon은 오랫동안 존재해왔으며, 그 배경은 VC 자금으로 시작하여 돈을 태우고 플랫폼을 지속할 실제 방법을 찾지 못한 다음 광고와 사용자 데이터 판매로 전환하는 또 다른 VC 자금 스타트업이 아님.
"
"https://news.hada.io/topic?id=13189","스타링크의 레이저 시스템은 하루에 42페타바이트의 데이터를 전송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스타링크의 레이저 시스템은 하루에 42페타바이트의 데이터를 전송

     * Starlink 엔지니어인 Travis Brashears의 발표 내용
     * 스타링크의 현재: 230만 가입자. 70개국. 7개 대륙. 42PB(4200만 GB). 피크시 5.6 Tbps+
     * 매일 9000개의 레이저를 통해 초당 테라비트 이상의 데이터를 전달
     * 스타링크는 전파를 사용하여 고객에게 고속 인터넷을 전송하지만 SpaceX는 대기 시간을 줄이고 시스템의 글로벌 적용 범위를 개선하는 데 도움이 되는 ""레이저 링크"" 시스템을 회사 위성에 장착해 왔음
     * 링크당 100Gbps 연결을 유지할 수 있는 레이저는 바다나 남극처럼 SpaceX 지상국이 근처에 없을 때 위성이 데이터를 가져오는 데 특히 중요
     * 대신 위성은 지구 궤도에 있는 다른 Starlink 위성과 데이터를 전송하여 우주에 메시 네트워크를 형성
     * 기술적인 어려움에도 불구하고 스타링크는 99% 이상의 레이저 ""링크 가동 시간""을 달성
     * 위성은 지속적으로 레이저 링크를 형성하여 하루에 약 266,141개의 ""레이저 획득(Acquisitions)""을 생성
     * 경우에 따라서는 한 번에 몇 주 동안 링크를 유지할 수 있으며 최대 200Gbps의 전송 속도에 도달하기도
     * 스타링크의 레이저 시스템은 5,400킬로미터(3,355마일) 이상 떨어져 있는 두 위성을 연결했으며, 연결이 끊어지기 전까지 ""대기권을 뚫고 지구 표면 30킬로미터 상공까지 내려갈 정도로 연결이 길었다""고 말함
     * 현재 궤도에 있는 대부분의 Starlink 위성은 ""Gen 3"" 레이저 링크 설계를 사용
     * 하지만 최근 새로운 '4세대' 모델로 기술을 업그레이드했음
     * 향후 SpaceX는 자사의 레이저 시스템을 확장하여 제3자 위성에 이식 및 설치할 수 있도록 계획중
     * 또한 위성 레이저를 지구 표면의 터미널에 직접 발사하여 데이터를 전달하는 방법도 연구중이지만 더 시간이 필요

  Hacker News 의견

     * 각 레이저는 432 Mbit/s의 속도를 가지며, 총 9000개의 레이저가 있음. 이는 42 PB/일이라는 수치보다 이해하기 쉬움. 각 레이저는 이론적으로 100Gbps 연결을 유지할 수 있지만, 평균적으로 최대 용량의 0.432%만 사용됨. 이는 위성 간 광통신 링크가 짧은 시간 동안만 사용되기 때문임.
     * 2.3M 고객에 대해 평균적으로 고객당 1.7 Mbit/s 혹은 월 550 GB의 데이터 사용이 예상됨. 이는 평균 미국 인터넷 사용자의 월간 데이터 사용량보다 많음.
     * 현재 위성 간 광통신 링크는 같은 궤도 평면에 있는 위성들 사이에서만 사용되며, 광학 추적이 거의 필요하지 않음. 궤도 평면을 넘나드는 광통신 링크는 더 복잡한 추적 문제를 가짐.
     * 장기적으로 미국에게 전략적 이점을 줄 수 있는 기술로, 해저 케이블에 대한 추가적인 복원력을 제공할 수 있음.
     * 위성이 지나가는 것을 관찰하는 것과 관련하여, 최근 본 유성들 중 일부가 실제로는 불타는 스타링크 위성일 수 있음을 궁금해함.
     * 로켓 발사가 위성 간 광통신 링크를 가로질러 통신을 잠깐 방해할 가능성에 대한 호기심을 표현함.
     * 위성을 통한 통신이 광섬유보다 낮은 지연 시간을 제공할 수 있는 지점에 대한 궁금증을 제기함.
     * 스타링크 서비스의 실제 사용자 경험과 대체 가능성, 지연 시간, 속도 변동성, 게임 가능성 등에 대한 질문을 함.
     * 스타링크가 우주 간 링크의 데이터를 지상으로 전송하는 방법에 대한 의문을 제기함.
     * 99.99%의 가동 시간이 좋지만, 패킷 스위칭 네트워크에서는 신호 대 잡음비(SNR)가 더 중요할 수 있음을 지적함.
"
"https://news.hada.io/topic?id=13254","RustPython - Rust로 작성된 파이썬 인터프리터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    RustPython - Rust로 작성된 파이썬 인터프리터

     * Rust로 작성된 오픈소스 파이썬 3(CPython >= 3.11.0) 인터프리터
     * Rust 프로그램에 내장하여 사용하거나, 웹 브라우저에서 파이썬을 실행하기 위해 WebAssembly로 컴파일 가능함
     * MIT 라이선스

목표

     * Rust만을 사용하여 완전한 파이썬 3 환경을 구현함 (CPython 바인딩 없음).
     * Rust에서 사용하거나 WebAssembly로 컴파일할 수 있는 빠르고, 신뢰성 있으며, 안전한 파이썬 구현을 목표로 함

RustPython의 장점

     * 다양한 파이썬 구현체가 존재하지만, RustPython은 Rust 프로그래밍 언어를 위한 것임
     * Jython과 IronPython이 각각 Java와 .NET과의 통합을 가능하게 한 것처럼, RustPython은 Rust와의 통합을 목표로 함
     * Rust의 최소 런타임 덕분에 WebAssembly로 컴파일하여 브라우저에서 파이썬 코드를 쉽게 실행할 수 있음

설치 방법

     * cargo install --git https://github.com/RustPython/RustPython
     * wapm install rustpython
     * conda install rustpython -c conda-forge
     * 또는 소스에서 직접 빌드 가능함.

GN⁺의 의견

     * RustPython은 Rust의 안전성과 성능을 활용하여 파이썬 인터프리터를 새롭게 구현한 프로젝트임.
     * 기존 파이썬 구현체들과 달리 Rust 기반으로 작성되어, Rust와 파이썬의 통합을 강화하고 WebAssembly를 통한 웹상에서의 파이썬 실행을 가능하게 함.
     * 현재 개발 중인 프로젝트로, 파이썬 생태계에 새로운 가능성을 제시하며, Rust와 파이썬을 함께 사용하고자 하는 개발자들에게 흥미로운 대안이 될 수 있음.

   흥미로운 프로젝트긴 하지만, 제 생각엔 그렇게까지 유용할지는 아직 모르겠네요..
   앞에서도 언급되었지만 Jython과 IronPython도 결국 CPython의 버전을 따라가기 벅차서 아주 한정된 곳에서만 쓸만한 선택지가 되어버렸는데, 다른 사람들이 RustPython에 기대하는 부분을 만족시키려면 갈 길이 꽤 멀 거라고 생각합니다.

        Hacker News 의견

     *

     ""it can be compiled to WebAssembly in order to run Python in the browser.""
          + 한 사용자는 CPython과 NodeJS를 이용한 유사한 접근법을 보았으며, 이 방식이 실용적이지 않다고 생각함.
          + 웹어셈블리(Wasm)로 컴파일된 런타임 위에서 파이썬 코드를 실행하는 것은 성능 저하를 두 번 겪게 됨.
          + 동적 타입 언어를 Wasm 런타임에서 실행하려면 언어가 직접 Wasm으로 컴파일되어야 함.
          + 프로젝트는 여전히 멋지고 유용하며, 브라우저에서 사용할 수 있는 파이썬 코드가 많음에도 불구하고 웹 프레임워크를 이런 방식으로 구축하려고 시도해서는 안 됨.
          + RustPython에 대한 성능 벤치마크를 진행하지 않았으며, RustPython이 알려지지 않은 몇 가지 트릭을 사용할 수도 있음을 인정함.
     * 관련 링크들:
          + RustPython은 Rust로 작성된 Python 3 인터프리터로, 여러 시점에서 해커뉴스에 게시되어 다양한 댓글을 받음.
     * MicroPython에 대한 긍정적인 의견:
          + 한 사용자는 MicroPython이 멋지다고 언급하며, RP2040에서 실행됨을 밝힘.
     * RustPython에 대한 다양한 의견:
          + RustPython이 IronPython의 후속작이라고 생각하는 사용자가 있음.
          + 파이썬에 건강한 서드파티 인터프리터 커뮤니티가 있다는 것이 멋지다고 생각하는 사용자가 있음.
          + CPython과의 차이점을 드러내는 문제들에 대해 궁금해하는 사용자가 있음.
          + RustPython의 진전에 기쁨을 표하는 사용자가 있으며, Wasmer를 이용해 RustPython을 실행하는 방법을 공유함.
     * RustPython의 한계에 대한 의견:
          + RustPython과 같은 프로젝트가 널리 적용될 수 있을지 확신하지 못하는 사용자가 있음.
          + Python의 가치는 네이티브 라이브러리와의 인터페이스에 있으며, PyPy와 같은 것을 사용하면 그 모든 접근성을 잃게 됨을 지적함.
     * Jython과 IronPython에 대한 비판적인 의견:
          + Python 2가 사라진 지금, Python 3으로의 전환에 실패한 Jython과 IronPython은 언급할 가치가 없다고 주장하는 사용자가 있음.
     * RustPython을 사용한 프로젝트 경험 공유:
          + 한 사용자는 RustPython을 인터넷 컴퓨터 프로토콜을 위한 파이썬 환경인 Kybra 프로젝트의 인터프리터로 사용하고 있으며, Wasm이 ICP의 런타임 환경임을 밝힘.
          + C 확장의 부재가 문제이지만, wasi와 C 확장 지원이 준비되면 CPython으로 이동할 계획임을 언급함.
     * RustPython의 성능에 대한 비교:
          + 한 사용자는 RustPython이 CPython보다 약 11배 느리다는 것을 피보나치 수열 계산을 통해 확인하고 결과를 공유함.
"
"https://news.hada.io/topic?id=13207","나의 인생에 가장 큰 영향을 준 책 《Gödel, Escher, Bach》(2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            나의 인생에 가장 큰 영향을 준 책 《Gödel, Escher, Bach》(2022)

왜 ""Gödel, Escher, Bach""이 내 인생에서 가장 영향력 있는 책인가

     * ""Gödel, Escher, Bach: An Eternal Golden Braid"" (이하 GEB)는 1978년에 더글러스 호프스태터가 쓴 퓰리처 상 수상작으로, 루이스 캐럴의 정신으로 마음과 기계에 대한 은유적 푸가로 묘사됨.
     * 저자는 최근 GEB를 다시 읽고, 호프스태터가 어떻게 계산, 인식론, 의식을 뛰어나게 융합했는지에 대해 감탄함.
     * GEB의 중요성을 설명하려는 이 글은 인식의 한계, 자기 참조, 동형성이라는 세 가지 정신 모델에 초점을 맞추고 있음.

쿠르트와 알버트, 프린스턴에서의 만남

     * 책의 주인공은 20세기에 가장 중요한 인물 중 한 명인 쿠르트 괴델로, 아인슈타인의 필드 방정식에 대한 정확한 해답을 생일 선물로 가져온 인물임.
     * 괴델은 그의 불완전성 정리로 유명하며, 이는 수학에 대한 한계를 설정함.
     * 괴델은 1931년 수학이 결정 불가능하다는 것을 증명했으며, 시스템 내에서 참이지만 증명할 수 없는 수학적 명제들이 존재함을 밝혀냄.

기본적인 인식의 한계

     * 괴델은 우리 우주에는 근본적인 인식의 한계가 있음을 보여줌.
     * 이러한 한계는 어떤 천재도, 외계 종족도, 기계도, 새로운 종류의 수학도 해결할 수 없는 것들임.

자기 참조

     * 복잡성을 생성하는 강력한 수학적 시스템은 자기 참조를 포함함.
     * 자기 참조 시스템은 자신에 대해 조작하고 이야기할 수 있으며, 이로 인해 재미있는 패러독스에 즉시 부딪힘.

동형성

     * 책의 세 번째 주요 주제는 호프스태터의 용어로 독특한 동형성임.
     * 동형성은 두 시스템이 구조적으로 유사함을 의미하며, 이는 시스템의 구조를 정의하고 유사한 이유와 다른 부분의 중요성을 덜어내는 데 유용함.

에셔와 바흐

     * 두 명의 조연인 M.C.에셔와 요한 세바스찬 바흐는 예술에서 괴델을 반영하며, 자기 참조를 자유롭게 사용함.
     * 에셔는 손이 손을 그리는 그림을 그리고, 바흐는 복잡한 푸가를 작곡하여 같은 멜로디를 서로 겹쳐 연주함.

GEB의 놀라운 글쓰기 품질

     * 각 장은 아킬레스와 거북이 사이의 대화로 시작하며, 이는 책의 주제와 동형적임.
     * GEB 자체도 매우 자기 참조적이며, 테마는 종종 수백 페이지 뒤에 해결되어 깊이를 완전히 이해하기 위해 되돌아가야 함.

개인적인 영향

     * 저자는 최근 Stand Together에 합류했으며, 이는 복잡한 시스템의 본질에 대한 근본적인 이해를 나타냄.
     * 인식의 한계가 수학과 같은 보편적인 것에 존재한다는 사실은 복잡한 인간 시스템에 대한 지식의 한계에 대해 겸손하게 만듦.
     * GEB는 소프트웨어 제품 설계에 영향을 미쳤으며, 피드백 루프 사이의 반복이 품질을 생성하는 시스템임을 믿음.

GN⁺의 의견

     * ""Gödel, Escher, Bach""은 복잡한 시스템, 인식론, 자기 참조 등의 개념을 탐구하는 데 있어 중요한 정신 모델을 제공함.
     * 이 책은 수학, 예술, 음악을 넘나들며 복잡성과 창조성의 근원을 탐구하고, 이는 현대 과학과 기술에도 영향을 미침.
     * GEB는 독자들에게 인간의 지식과 기계의 사고에 대한 깊은 이해를 제공하며, 이는 소프트웨어 엔지니어링과 같은 분야에서의 혁신적인 사고를 촉진할 수 있음.

        Hacker News 의견

     * ""GEB""라는 책에 대한 사람들의 다양한 의견이 담긴 해커뉴스 댓글 모음 요약:
          + GEB에 대한 애정: GEB는 문학적인 작품으로, 주요 내용과 직접적인 관련이 없는 상세한 부분들이 풍부하게 담겨 있음. 이러한 '불필요한 세부사항'이 작품을 명작으로 만드는 요소 중 하나임. 이 책을 읽는 것은 기술 전문가들에게 익숙하지 않은 영역으로 나가게 하고, 본론에 이르기 전에 다양한 주제를 탐구하게 함.
          + GEB에 대한 비판적 견해: 어떤 이는 GEB를 지루하고 허세 가득한 책으로 여김. 1000페이지에 달하는 내용을 200페이지 안에 충분히 설명할 수 있었다고 생각하며, 과학 대중서적을 좋아하지만 허세를 싫어하는 사람에게는 추천하지 않음.
          + GEB를 언급하는 대화법: GEB를 인용하며 지적으로 우월해 보이고자 할 때, ""호호! 영원한 황금끈처럼 말이야!""와 같은 말을 던지면 대부분 사람들이 이에 대해 더 깊이 묻지 않음. GEB에 대해 대화할 때는 ""나도 그 책을 읽었다""고 말하는 것이 긴장감을 조성하고 주제를 바꾸는 데 효과적임.
          + GEB가 인생에 미친 영향: 한 사용자는 GEB를 읽음으로써 자신의 종교에 대한 의심을 극복하고 의식과 계산 사이의 관계를 이해하는 데 도움을 받았음. 이 책은 1979년에 쓰여졌고, 당시에는 컴퓨터나 인터넷에 대한 접근성이 매우 제한적이었기 때문에, 인공지능이나 집합론 등에 대한 배경 지식 없이도 이해할 수 있도록 쓰여진 것이 특별함.
          + GEB에 대한 개인적인 감상: 어떤 이는 GEB를 젊은 시절에 매우 좋아했으나, 지금은 책의 주요 아이디어를 다소 불편하게 여김. 수학과 과학에 대한 실제적인 내용 외에는 많은 부분이 추측에 불과하다고 생각함.
          + GEB의 교육적 가치: GEB는 복잡한 수학적 정리를 거의 수학적 표기 없이 설명하는 데 성공함. 비유, 말장난, 예술을 통해 이를 달성했으며, 수학을 포기하더라도 각 장을 독립적인 글쓰기의 예로서 감상할 수 있음.
          + GEB에 대한 도전: 어려운 책을 읽는 데 일반적으로 높은 관용을 보이는 한 사용자는 GEB를 읽으려 할 때 졸음을 참기 어려웠음. 다시 시도해볼 가치가 있을지 고민 중임.
          + GEB와 경력 변화: 한 사용자는 전기공학 석사 과정 중 GEB를 읽고 소프트웨어 경력으로 전환하는 데 큰 영향을 받았음. 2009년 경기 침체로 산업 디자인 일자리를 잃은 후, GEB를 읽고 소프트웨어와 코딩에 대해 더 배우기 시작함.
          + GEB의 흥미로운 사실: GEB의 50%는 페이지가 모두 비어 있지만, 이는 드물게 눈치채짐.
"
"https://news.hada.io/topic?id=13270","VirtualBox KVM 공개 배포","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          VirtualBox KVM 공개 배포

VirtualBox KVM 공개 출시

     * Cyberus Technology는 VirtualBox의 KVM 백엔드를 오픈소스로 출시함.
     * VirtualBox는 다양한 게스트 운영 체제를 지원하고 여러 호스트 운영 체제에서 일관된 사용자 인터페이스를 제공하는 멀티 플랫폼 가상 머신 모니터(VMM)임.
     * KVM 백엔드를 사용하면 VirtualBox가 리눅스 KVM 하이퍼바이저를 활용하여 가상 머신을 실행할 수 있으며, 이는 표준 VirtualBox가 사용하는 커스텀 커널 모듈 대신 사용됨.

오픈소스 출시

     * Cyberus Technology는 오픈소스에 대한 약속을 지키기 위해 GitHub에서 KVM 백엔드를 오픈소스 라이선스로 공개함.
     * 사용자는 GitHub에서 VirtualBox와 Cyberus Technology의 KVM 백엔드를 빌드하여 개선된 기능을 직접 활용할 수 있음.
     * 2024년 로드맵에는 더 많은 흥미로운 기능이 포함되어 있으며, 업데이트가 출시될 때마다 기술적인 내용을 다루는 추가 게시물을 발표할 예정임.

지원 받기

     * VirtualBox와 KVM을 사용하고자 하거나 맞춤형 가상화 솔루션을 필요로 하는 경우, Cyberus Technology는 지침과 엔지니어링 서비스를 제공할 준비가 되어 있음.
     * 지원을 받고자 하는 사용자는 지원 양식이나 service@cyberus-technology.de 이메일을 통해 연락할 수 있음.


   GN⁺의 의견:
    1. VirtualBox의 KVM 백엔드 오픈소스 출시는 가상화 기술의 발전과 보다 넓은 호환성을 추구하는 사용자 및 개발자 커뮤니티에게 중요한 발전임.
    2. 이번 발표는 가상 머신의 성능 향상, 보안 강화, 하드웨어 및 게스트 사용 사례에 대한 지원 확대를 가능하게 하여 기술적 진보를 의미함.
    3. 오픈소스 커뮤니티에 기여하고자 하는 Cyberus Technology의 노력은 오픈소스 소프트웨어의 발전과 혁신을 촉진하는 데 기여할 것으로 보임.

        Hacker News 의견

     * VirtualBox 확장 팩에 대한 주의

     VirtualBox를 사용하는 사람들은 Oracle이 소송을 자주 제기하는 경향이 있으므로 확장 팩 사용에 주의가 필요함.
     * VirtualBox 대안으로의 전환

     한 조직에서는 Oracle과의 거래보다 VMware Workstation이나 virt-manager가 더 저렴하기 때문에 VirtualBox 사용을 금지함.
     * libvirt의 성능과 사용성

     libvirt는 VirtualBox보다 성능이 좋고 다루기 쉽지만, GUI가 매우 불편함. virt-manager는 버그가 많고 기능이 부족함에도 불구하고 libvirt의 '최선'의 GUI임. 이제 더 이상 VirtualBox를 사용하지 않음.
     * VirtualBox의 KVM 백엔드와 PCI 패스스루

     VirtualBox가 virt-manager와 virsh의 대체품이 되는지, PCI 패스스루(예: GPU) 지원 여부에 대한 질문. VirtualBox는 Windows에서 사용할 때 GUI가 더 친숙하고 좋다는 인상을 받음. VirtualBox가 실험적으로 PCI 패스스루를 지원한다는 사실을 발견함.
     * 커널 업그레이드 시 드라이버 재컴파일 불필요

     커널 업그레이드 때마다 서드파티 드라이버(vbox ko)를 재컴파일할 필요가 없음. DKMS가 관리자 개입 없이 이를 처리하려고 하지만 항상 버그가 없는 것은 아님. VirtualBox 애플리케이션은 데스크톱과 잘 통합되도록 설계됨. FreeBSD 세계에서도 bhyve 하이퍼바이저에 대한 노력이 이루어지길 바람. 용어 사용에 대한 문제는 최근 DRM(직접 렌더링 관리자)에 대한 토론에서 이미 다루어짐.
     * 리눅스 내 GUI 가상화의 발전

     리눅스 내에서 GUI 가상화를 할 때 virt-manager/vmware/virtualbox보다 훨씬 나은 방법이 있음. crosvm을 사용하면 Wayland를 통해 공유 메모리 버퍼를 공유하고, 게스트에 OpenGL 및 Vulkan 가속을 제공할 수 있음. 이를 통해 게스트 애플리케이션이 호스트의 Wayland 컴포지터를 통해 원활하게 나타남.
     * 기술의 시의성에 대한 의문

     이 기술은 멋지지만, 10년 전에 더 인상적이었을 것 같음. 지금은 누가 정말로 이 기술에 관심이 있을까?
     * KVM 백엔드의 성능 향상에 대한 궁금증

     펜테스터로서 노트북에 리눅스를 사용하고 VirtualBox의 Kali VM 내에서 많은 시간을 보냄. KVM 백엔드로 얼마나 성능이 향상될 수 있는지 궁금함.
     * KVM과 virt-manager의 차별점

     리눅스에서 KVM과 virt-manager를 사용할 때 이미 얻을 수 있는 것 외에 추가적인 이점이 무엇인지 이해하지 못함.
     * KVM의 다른 의미에 대한 혼란

     KVM이 키보드 비디오 모니터 장치를 의미하는 맥락에서만 들어봤지만, 가상 머신의 개념에 완전히 들어맞지 않는 것 같음. 여기서 다른 의미가 있는지?
     * VirtualBox VM 사용자를 위한 ELI5

     가끔 VirtualBox VM을 사용하는 사람에게 이 기술이 어떤 이점을 제공하는지 쉽게 설명해달라는 요청.
"
"https://news.hada.io/topic?id=13283","윈도우용 Sudo 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              윈도우용 Sudo 발표

     * Windows 11 Insider Preview Build 26052에서 Windows용 Sudo의 출시를 발표
     * Windows용 Sudo는 사용자가 권한이 없는 콘솔 세션에서 직접 권한을 높인 명령을 실행할 수 있는 새로운 방법
          + 이제 ""관리자 권한으로 실행"" 을 찾지 않아도 됨
     * GitHub에서 오픈소스로 공개
     * Windows용 Sudo가 제공하지 않는 추가 기능이 필요한 경우, Gerardo Grignoli의 gsudo를 확인할 것을 권장

Windows용 Sudo 활성화 방법

     * Windows 설정의 '개발자를 위한 설정' 페이지로 이동하여 ""Sudo 활성화"" 옵션을 켜서 Windows용 Sudo를 활성화할 수 있음
     * 또는 권한이 높은 콘솔 세션에서 다음 명령을 실행하여 활성화할 수 있음: sudo config --enable

Windows용 Sudo 구성 방법

     * Windows용 Sudo는 현재 세 가지 구성 옵션을 지원함: 새 창에서 실행(forceNewWindow), 입력 비활성화(disableInput), 인라인 실행(normal)
     * 구성 옵션을 변경하려면 Windows 설정의 '개발자를 위한 설정' 페이지에서 드롭다운 메뉴를 사용하거나, 권한이 높은 콘솔 세션에서 명령을 실행함.

  구성 옵션 1: 새 창에서

     * 이 구성에서는 Sudo for Windows가 새로운 권한이 높은 콘솔 창을 열고 그 창에서 명령을 실행함.
     * 예를 들어, sudo netstat -ab를 실행하면 새 창이 열리고 그 창에서 명령이 실행됨.

  구성 옵션 2: 입력 비활성화

     * 이 구성에서는 Sudo for Windows가 현재 창에서 권한이 높은 프로세스를 실행하지만, 새 프로세스는 stdin이 닫힌 상태로 생성됨.
     * 즉, 새 프로세스는 사용자 입력을 받아들이지 않으므로, 권한 상승 후 추가 입력이 필요한 프로세스에는 작동하지 않음.

  구성 옵션 3: 인라인

     * 이 구성은 다른 운영 체제에서의 sudo와 가장 유사한 동작을 함.
     * Sudo for Windows는 현재 창에 연결된 stdin, stdout, stderr를 가진 상태로 권한이 높은 프로세스를 실행함.
     * 이는 새로운 권한이 높은 프로세스가 입력을 받고 현재 창으로 출력을 보낼 수 있음을 의미함.

작동 원리

     * 명령줄에서 sudo를 사용하여 프로세스의 권한을 상승시킬 때, 사용자가 권한 상승을 확인하는 UAC 대화 상자가 나타남.
     * 사용자가 권한 상승을 확인하면, 사용자가 선택한 구성 옵션에 따라 프로세스가 권한이 상승됨.
     * sudo 명령의 선택적 매개변수를 확인하려면 콘솔에서 sudo -h를 실행함.

  새 창에서

     * 이 구성에서 sudo.exe는 새로운 권한이 높은 콘솔 창을 열고 그 창에서 명령을 실행함.
     * 새 창은 현재 창과 동일한 작업 디렉토리와 환경 변수로 시작됨.
     * 이 구성은 runas 명령과 유사한 흐름을 가짐.

  입력 비활성화와 인라인

     * 이 구성에서 sudo.exe는 새로운 권한이 높은 프로세스를 시작하고, 권한이 높은 sudo.exe 프로세스를 시작하며, 원래 권한이 없는 sudo.exe는 새로운 권한이 높은 프로세스와 RPC 연결을 설정함.
     * 다시 말해, 권한이 없는 sudo 인스턴스에서 권한이 높은 인스턴스로 정보가 전달됨.
     * 특히, 권한이 없는 프로세스의 콘솔 핸들이 권한이 높은 프로세스로 전달되어, 권한이 높은 프로세스가 권한이 없는 프로세스로부터 입력을 읽고 권한이 없는 프로세스로 출력을 쓸 수 있게 함.
     * 그러나 ""입력 비활성화"" 구성에서는 권한이 높은 프로세스에 콘솔의 입력 핸들이 전달되지 않으므로 사용자로부터 입력을 읽을 수 없음.

다음 단계

     * 팀은 Windows용 Sudo를 오픈소스화하는 작업을 진행 중이며, 향후 몇 달 안에 계획에 대한 자세한 내용을 공유할 예정임.
     * GitHub 리포지토리에서 직접 피드백을 공유해달라고 요청함.

GN⁺의 의견:

     * Windows용 Sudo의 출시는 Windows 사용자들에게 리눅스 스타일의 권한 관리 경험을 제공하는 중요한 발전임.
     * 이 도구는 개발자들이 보다 효율적으로 작업할 수 있도록 도와주며, 오픈소스화를 통해 커뮤니티의 기여를 받을 수 있음.
     * 보안 측면에서 ""인라인"" 구성의 사용 시 주의가 필요하며, 향후 문서화 작업을 통해 이러한 보안 문제에 대한 더 많은 정보를 제공할 예정이라는 점이 흥미로움.

        Hacker News 의견

     * sudo 명령어가 Windows에 도입되고 있음. 이는 리눅스의 sudo를 단순 포팅한 것이 아니라, 운영 체제 간 권한 구조의 차이를 고려한 새로운 구현임. 사용자가 같은 터미널 창에서 관리자 권한으로 명령을 실행할 수 있는 경험을 제공하는 것이 목표임.
     * PowerShell이 curl과 wget을 완전히 다른 명령어로 대체했던 일과 비슷한 느낌을 받음. 이는 인수가 호환되지 않는다는 점에서 문제가 될 수 있음.
     * Nirsoft의 elevate가 잘 작동했지만, 시스템에 더 통합된 기능을 가지는 것이 좋음.
     * sudo가 거의 한 사람에 의해 유지되고 있다는 점이 흥미로움.
     * sudo의 우수한 사용성에 대해 글을 쓰면서 리눅스/유닉스 계열 운영 체제를 언급하지 않는 것은 이상함.
     * Microsoft에서 근무할 때, UAC(User Account Control)를 보안 경계로 간주하지 않았음. 이 기능이 어떻게 출시될 수 있었는지, 혹은 UAC를 이제 보안 경계로 간주하는지 궁금함.
     * psutils의 sudo.ps1을 scoop을 통해 설치하여 사용 중임. UAC 프롬프트가 있지만 대화형 작업에는 적합함.
     * ""Windows 12""가 리눅스 기반으로 실행되는 윈도우 매니저 + 데스크탑이 되기를 바람. 이는 Windows 95/7/8/10/11과의 호환성을 유지하기 위해 기존 버그를 세심하게 재현할 것임.
     * PowerShell 명령어의 방향을 고려할 때, 이 새로운 sudo 구현이 매우 복잡한 명령어가 될 것으로 예상됨.
     * Windows에서 sudo가 새로운 기능으로 도입되었지만, 현재로서는 보안에 취약한 것으로 보임. 시간이 지나면서 개선될 것으로 예측됨.
"
"https://news.hada.io/topic?id=13231","PostgreSQL로 충분하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostgreSQL로 충분하다

     * PostgreSQL을 각 분야에 사용하는 방법에 대한 링크를 정리한 페이지
          + 백그라운드잡, 메시지 큐, GIS, Audit Log, 접근 제어, 권한 관리, 검색, 시계열, 그래프 데이터, 외부 데이터, HTTP, API, 이벤트/복제/CDC, 유닛 테스트, 마이그레이션, 대시보드/UI, 데이터 시각화, HTML과 어플리케이션, LSP(랭귀지 서버)

PostgreSQL is Enough

     * PostgreSQL을 모든 곳에 사용하기
     * Simplify:데이터베이스 함수로 코드를 옮겨 단순화하기

배경 작업

     * pg_cron을 통해 PostgreSQL에서 스케줄링된 작업을 관리할 수 있음.

메시지 큐

     * PostgreSQL을 메시지 큐 기술로 선택하는 방법에 대한 정보 제공.
     * pgmq는 PostgreSQL을 기반으로 한 메시지 큐 시스템임.

GIS/지도

     * PostGIS는 PostgreSQL에 지리공간 데이터베이스 기능을 추가함.

감사 로그

     * pgMemento와 pgaudit는 PostgreSQL에서 변경 사항을 추적하고 감사 로그를 관리함.

접근 제어

     * acl은 PostgreSQL에서 접근 제어 리스트를 관리하는 데 사용됨.

인증

     * PostgreSQL의 pgcrypto 모듈과 pgjwt는 데이터베이스 내에서 인증을 처리함.

검색

     * PostgreSQL의 전문 검색 기능과 관련된 유용한 링크들 제공.
     * paradedb, pg_embedding, pgvector는 PostgreSQL에서 검색 기능을 향상시킴.

시계열 데이터

     * timescaledb는 PostgreSQL을 확장하여 시계열 데이터를 관리함.

그래프 데이터

     * Apache AGE는 PostgreSQL을 확장하여 그래프 데이터베이스 기능을 제공함.

외부 데이터

     * wrappers는 PostgreSQL에서 외부 데이터 소스를 통합함.

HTTP

     * pgsql-http와 pg_net은 PostgreSQL에서 HTTP 요청을 처리함.

API

     * PostgREST, graphql-engine, postgraphile, pg_graphql은 PostgreSQL을 기반으로 한 API 서버를 구축함.

이벤트, 복제, CDC

     * PostgreSQL의 NOTIFY 명령어와 walex, peerdb, debezium, pglogical은 데이터 변경을 추적하고 복제 기능을 제공함.

단위 테스트

     * pgtap은 PostgreSQL 데이터베이스의 단위 테스트를 위한 도구임.

마이그레이션

     * postgresql-migrations와 bytebase는 PostgreSQL 데이터베이스 마이그레이션을 관리함.

대시보드 / UI

     * Baserow, NocoDB, AppSmith는 사용자 인터페이스와 대시보드를 제공함.

데이터 시각화

     * Evidence와 Metabase는 데이터 시각화 도구임.

HTML과 애플리케이션

     * SQLpage, Omnigres, pg_render, plmustache는 PostgreSQL 데이터를 웹 애플리케이션에 통합함.

언어 서버

     * postgres_lsp는 PostgreSQL을 위한 언어 서버 프로토콜 지원을 제공함.

무엇이 빠졌나요?

     * 댓글을 통해 누락된 내용을 공유 바람

GN⁺의 의견

     * PostgreSQL은 다양한 확장 기능과 도구를 통해 단순한 데이터베이스 관리 시스템을 넘어서는 다재다능한 플랫폼임을 보여줌.
     * 이 글은 PostgreSQL을 사용하여 다양한 애플리케이션 요구 사항을 충족시킬 수 있는 방법을 제시함으로써, 개발자들에게 유용한 자원을 제공함.
     * 특히, 데이터베이스 내에서 직접 처리할 수 있는 기능들을 통해 시스템 아키텍처를 단순화하고 성능을 최적화할 수 있는 잠재력을 강조함.

   이 중에 postgREST 개인적으로 사용중인데, 만족스럽습니다.

        Hacker News 의견

     * 응용 프로그램 스택 간소화 시도에 대한 경험 공유

     한 사용자는 응용 프로그램 스택을 간소화하려는 시도를 자주 하지만, 응용 프로그램의 복잡성이 증가함에 따라 다양한 기술 스택의 필요성을 깨닫게 됨. 모든 것을 Postgres와 같은 단일 기술에 통합하려고 하면 불편함을 느낄 수 있음. 그럼에도 불구하고, 기존 기술을 확장하는 것이 새로운 계층을 추가하는 것보다 나을 수 있음. 예를 들어, Postgres를 메시지 큐로 사용하는 것이 별도의 메시지 큐를 유지하는 것보다 훨씬 쉬움. Postgres는 데이터베이스 중에서도 확장성이 뛰어나며, 이를 기반으로 기술을 구축하는 것이 매우 재미있음.
     * ParadeDB 제작자의 Postgres 확장성에 대한 의견

     ParadeDB의 제작자 중 한 명으로, Postgres 확장을 통해 빠른 검색과 분석 기능을 제공함. 스타트업과 같이 작은 워크로드의 경우 가능한 한 오래 Postgres 내에서 작업하는 것이 합리적임. 그러나 규모가 커지면 Postgres만으로는 모든 것을 해결할 수 없음. Postgres 내에서 다양한 워크로드를 처리하려면 특정 요구 사항에 맞게 시스템을 분리하고 독립적인 확장성과 복원력을 확보해야 함. 이 시점에서 각 요구 사항에 맞는 전문화된 솔루션 스택이 필요함. Postgres 버전의 스택 구성 요소를 구축하는 움직임이 있지만, 각 솔루션은 Postgres를 넘어서며, 모든 스택 구성 요소에 대한 Postgres 기반 솔루션이 있을 것이라고는 생각하지 않음.
     * 새 프로젝트 시작 시 sqlite 사용 결정에 대한 의견

     한 사용자는 새 프로젝트를 시작할 때마다 sqlite로 시작하고, 반드시 필요할 때까지 전환하지 않기로 결정함. Postgres가 90%의 경우에 적합하다면, sqlite는 80%의 경우에 적합하며, 시작하기 쉽고 성능도 좋음. 수직 확장이 실패할 때, 이미 구축한 것에 만족할 것임.
     * 데이터베이스에 대한 C++ 전문가의 의문

     데이터베이스에 익숙하지 않은 C++ 전문가가 데이터베이스의 필요성에 대해 의문을 제기함. 사용자는 맞춤형 바이너리 파일 형식을 많이 사용하는 산업에서 왔으며, 데이터베이스가 표면적으로 많은 문제를 해결하는 것처럼 보이지만 실제로는 그렇지 않다고 느낌. 데이터 유형에 대한 제한, 업데이트 문제, 다른 SQL 엔진 간의 호환성 문제 등이 데이터베이스 사용을 나쁜 아이디어로 보이게 함. 대규모 데이터 볼륨에서의 상호 운용성 이점을 이해하지만, 그 외의 경우 데이터베이스의 필요성을 진지하게 묻고 있음.
     * PostgreSQL 추가 기능에 대한 의견

     대부분의 추가 기능이 MariaDB에 이미 내장되어 있음을 지적하며, PostgreSQL HTTP 클라이언트의 동기 부여 중 일부를 인용함. 웹 서비스를 호출하는 트리거를 작성할 수 있다면 좋을 것이라는 아이디어에 대해, 사용자는 그런 작업을 자신보다는 다른 사람에게 맡기겠다는 의견을 표함.
     * 고급 기능 사용 시 코드 관리 경험과의 결합 문제

     Postgres를 광범위하게 사용하지만, 고급 기능을 사용할 때마다 버전 관리, 코드 리뷰, 타입, 테스트, 정적 분석 등 코딩의 모든 좋은 점과 결합하는 문제가 발생함. 마이그레이션에 대한 질문을 함.
     * 기존 스택으로 새 기능 프로토타입 제작의 장점

     새 기능을 프로토타입으로 먼저 제작하는 것이 새로운 것을 도입하는 것보다 낫다고 경험을 공유함. 신중한 큐레이션을 통해 초기 프로토타입을 동일한 스택으로 생산 코드로 전환할 수 있음. 하지만 시스템이 한계에 부딪히면 Redis나 다른 전문 도구가 필요하다고 느낄 수 있음. 중요한 것은 API 래퍼를 작성하고, 필요할 때 내부 구현만 변경하고 마이그레이션을 잘 테스트하는 것임. 기술 결정을 얼마나 오래 미룰 수 있는지 사람들이 놀랄 정도라고 언급함.
     * Postgres, Redis, S3를 사용하는 사용자의 경험 공유

     Postgres, Redis, S3의 조합을 사용하며, 이 조합이 아직까지 잘못된 적이 없음을 밝힘. 가끔 Postgres로 Pub/Sub을 시도하고 싶지만, 어차피 캐싱과 sidekiq에 Redis가 필요하고, Redis도 뛰어나기 때문에 굳이 시도하지 않음.
     * 대규모 데이터 분석에 대한 Postgres의 한계

     Postgres를 매우 좋아하지만, 데이터 규모가 매우 클 때 Postgres가 충분하지 않다고 느낀 경험을 공유함. OLTP 유형의 워크로드를 처리하는 데는 Postgres가 완벽하지만, OLAP 지원이 더 필요한 경우 StarRocks를 사용할 것을 권장함. 데이터 분석을 위해 Postgres에서 StarRocks로 데이터를 가져오는 경험이 훌륭하며, StarRocks는 데이터 레이크에서의 직접 쿼리도 지원함.
     * Postgres의 jsonb 압축 기능에 대한 요구

     Mongo와 PG를 모두 사용하지만, PG가 훨씬 간단하여 Mongo를 단순화를 위해 포기하고 싶음을 표현함. 필요한 것은 단순히 압축된 jsonb 컬럼으로, 업데이트나 쿼리 없이 삽입, 선택, 삭제만 가능하면 됨. Mongo에서와 같이 반복적인 json 키에 대해 80-90% 압축률을 유지하면서 유지 관리가 필요 없음.
"
"https://news.hada.io/topic?id=13223","Show HN: Atopile – 코드로 회로 기판 설계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: Atopile – 코드로 회로 기판 설계

     * atopile 소개
          + atopile은 전자 장치를 코드로 설명하는 도구를 개발 중인 창업자들이 만든 프로젝트임.
          + 소프트웨어 제품을 오직 어셈블리 코드만 사용하여 구축하는 것과 같은 어려움을 하드웨어 설계 시 느꼈음.
          + 기존 설계를 재사용하고, 그 설명을 제품으로 컴파일하는 좋은 방법이 현재 없음.
     * atopile의 목표
          + atopile은 회로를 코드로 설명하기 위한 오픈 소스 언어 및 툴체인임.
          + 컴파일러는 GitHub에서 제공되며, 문서는 atopile 웹사이트에서 확인 가능함.
          + ESP32 모듈 설계에 대한 자세한 심층 분석은 제공된 비디오 링크를 통해 볼 수 있음.
     * 개발 배경
          + 창업자들은 이전 직장에서 전자 회로 보드를 수동으로 그리고 내보내야 했음.
          + 소프트웨어 엔지니어인 친구가 자동화된 개발 워크플로우를 보여준 후, 하드웨어에도 같은 것을 구축할 수 있는지 의문을 가짐.
     * ato 언어
          + 전자 장치를 효과적으로 추상화하기 위해 ""ato"" 언어를 개발함.
          + ato 언어에서는 회로를 모듈, 구성 요소, 인터페이스로 나누고, 이러한 블록들을 서로 연결할 수 있음.
          + RP2040 마이크로컨트롤러를 사용한 예시 코드 제공.
     * 컴파일러의 기능
          + 컴파일러는 회로가 어떻게 연결되어 있는지 설명하는 넷리스트를 생성하고, 사용자를 위해 젤리빈 구성 요소를 선택함.
          + 향후 레이아웃 재사용, 값 사이의 수학적 관계 추가, Rust의 특성과 유사한 방식으로 회로를 정의하는 기능을 추가할 예정임.
     * atopile의 사용 범위
          + atopile은 현재 저-중간 복잡성을 가진 모든 종류의 인쇄 회로 기판(PCB) 설계를 위해 의도됨.
          + 컴파일러가 처리할 수 있는 회로의 복잡성은 점차 증가하여 생산 사용에 적합해질 것임.
          + 컴파일러가 칩 설계가 아닌 PCB용으로만 사용됨을 명확히 함.
     * 오픈 소스와 수익 창출 계획
          + 소프트웨어 커뮤니티가 번성하는 데 오픈 소스와 오픈 코어 기술 덕분임.
          + 하드웨어 엔지니어들도 이러한 혜택을 누릴 수 있도록 atopile의 핵심을 오픈 소스(Apache 2.0)로 제공함.
          + GitLab과 유사하게 기업 대상 기능 판매를 통해 수익을 창출할 계획임.
     * 커뮤니티의 의견 요청
          + 컴파일러에 대한 의견을 요청하며, 사용자들의 전자 분야 이야기와 atopile에 바라는 점을 물음.

    GN⁺의 의견

     * atopile 프로젝트는 하드웨어 설계의 자동화와 재사용성을 향상시키려는 혁신적인 시도로 볼 수 있음.
     * 오픈 소스 접근 방식은 하드웨어 엔지니어링 커뮤니티에 협업과 공유의 문화를 촉진할 잠재력을 가지고 있음.
     * 이 프로젝트는 소프트웨어 개발의 효율성과 유연성을 하드웨어 설계에 적용하려는 중요한 발걸음으로, 하드웨어 엔지니어링 분야에 큰 변화를 가져올 수 있음.

        Hacker News 의견

     * 회로를 코드로 표현하는 것에 대한 의견
          + 이것은 회로를 코드로 표현하는 것이 아니라 텍스트로 표현하는 것임. 비표준적인 방식으로 넷리스트를 나타내고 메타데이터를 추가하는 것으로, 유용하긴 하지만 실제 분할 특성이나 허용 오차 등은 명시되지 않음.
          + 모듈 생성 함수를 정의하여 원하는 비율, 출력 허용 오차, 최대 출력 전류를 기반으로 분배 모듈을 생성하는 것이 바람직함. 또한, 가능한 구성 요소를 BOM에 추가하는 것도 중요함.
          + 이러한 접근 방식은 회로 설계의 반복 작업을 줄이고, 코드 리뷰와 같이 회로 파일을 검토할 수 있게 함.
     * 전자 부품 도구에 대한 의견
          + 전자 부품 도구의 상태가 매우 나쁘며, 대부분의 설계자들이 회로도에 레귤레이터나 마이크로컨트롤러를 추가할 때 필요한 캐패시터나 크리스탈, 프로그래밍 포트 등을 PDF에서 복사하는 것이 현재의 기술 상태임.
          + 여러 사람이 동일한 설계 작업을 하고 변경 사항을 병합하는 것은 매우 어려움.
          + 모듈화된 세계로 이동하면 설계가 더 쉬워질 것이며, 이는 매우 흥미로운 전망임.
     * 모듈 공유에 대한 의견
          + 전압 분배기와 같은 모듈을 공유하고 라이브러리화하는 것은 좋은 아이디어임.
          + 레이아웃 제약 조건을 모듈화하면 전체 프로젝트의 레이아웃을 자동으로 생성할 수 있으며, 이는 효율적인 설계를 가능하게 함.
     * PCB 설계에 대한 새로운 접근 방식에 대한 의견
          + PCB 설계에 대한 새로운 접근 방식을 위한 데이터 풍부함과 상호 운용성의 기초를 마련하는 것은 멋진 아이디어임.
          + 전기 회로도가 전기 엔지니어에게 더 친숙하므로 텍스트와 시각적 회로도 간에 전환할 수 있는 기능이 필요함.
     * Verilog 사용 제안
          + Verilog나 SystemVerilog를 사용하여 부품 정보를 매개변수로 정의하고, 이를 이용해 회로도를 생성하는 것이 제안됨.
          + Verilog-AMS를 사용하여 아날로그 시뮬레이션도 가능함.
     * EDA 프로그램과 기계 CAD의 차이에 대한 의견
          + 기계 CAD에 비해 EDA 프로그램에서는 ""관계""의 부족에 놀람.
          + KiCad와 같은 도구는 수동으로 트레이스 너비를 설정하는 'netclasses'를 제공하지만, 더 효율적인 도구가 필요함.
     * 코드 임포트 구문에 대한 의견
          + import Y from X는 자동완성 도구를 사용할 수 있도록 import X.Y 또는 from X import Y와 같은 방식으로 변경되어야 함.
     * BFH - Health Without Borders
          + BFH, 즉 BorderFreeHealth는 지리적 장벽을 없애고 다양한 의료 용품의 글로벌 배송을 제공하는 보편적인 건강 제품 접근을 지지함.
     * 홈 자동화 작업에 대한 열정
          + 홈 자동화 작업을 많이 하며, 빵판을 사용하거나 맞춤형 IO가 있는 릴레이 모듈을 설계하는 데 많은 시간을 소비하는 것에 대한 불만이 있음.
          + 프로젝트에 기부할 수 있는 방법이 있는지 물음.
"
