"https://news.hada.io/topic?id=20091","만우절 장난으로 해고될 뻔한 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          만우절 장난으로 해고될 뻔한 이야기

     * 누구나 인생에서 한 번쯤은 제대로 된 장난을 해봐야 한다는 저자의 철학에서 출발한 실제 경험담
     * 이 이야기는 대학에서 첫 직장을 얻은 신입 데이터베이스 프로그래머 시절의 만우절 장난에 관한 것임

초창기 시스템과 환경

     * 대학은 경쟁력 있는 급여는 없었지만 교육 기회와 다양한 혜택을 제공했고, 저자는 추천 덕분에 채용됨
     * 담당 시스템은 HP 9000 K250 서버였으며, AIX RS/6000, 대형 라우터 및 통신 장비와 함께 구동 중
     * 운영 중이던 학생정보 시스템(CARS)은 지금은 Jenzabar로 알려진 대형 시스템으로, 당시에는 HP/UX와 Informix 기반으로 작동
     * C, SQL, Perl 등을 활용해 코드 작성 및 유지보수를 담당했고, 웹 모듈 개발도 맡았음

캠퍼스 프린터 장난의 발단

     * 당시 캠퍼스의 대부분 행정용 프린터는 HP LaserJet 4였으며, 네트워크로 연결되어 JetDirect 카드로 제어됨
     * 어느 날 프린터 패널의 ""READY"" 메시지를 변경할 수 있다는 것을 알게 됨
     * 이를 활용해 만우절 장난을 계획함: 모든 프린터에 ""INSERT 5 CENTS"" 메시지를 띄워 마치 유료 출력인 것처럼 위장

장난 실행 방식

     * 시스템에서 각 프린터의 스풀 디렉터리를 통해 위치를 파악하고, 자체 제작한 간단한 명령어를 통해 프린터 메시지를 변경
     * 사용한 스크립트:
#!/bin/csh -f
cd /opt/carsi/spool
foreach i (*)
    echo '^[%-12345X@PJL RDYMSG DISPLAY=""INSERT 5 CENTS""' | netto $i 9100
end

     * ^[는 ASCII Escape 문자이고, netto는 간단한 netcat 유사 스크립트
     * 프린터는 실제로 여전히 작동 가능했으며, 메시지는 단순히 장식적인 효과였음
     * 장난의 효과를 극대화하기 위해 캠퍼스 전역 행정 메일링 리스트에 유료 출력 정책이 시작되었다는 공지 메일 발송
     * 메일에는 5센트 동전을 넣어야 출력 가능하다는 내용이 포함됨

장난의 반응과 예상치 못한 여파

     * 일부 교직원은 날짜와 저자의 성향을 보고 장난임을 빠르게 파악하고 유쾌하게 반응
     * 프린터에서 출력된 종이에 동전을 붙여 보내는 등 긍정적인 피드백도 존재
     * 그러나 저자를 모르는 구성원들은 진지하게 받아들였고, 대학 본부에 항의 및 문의가 쏟아짐
     * 인사부장은 즉각적인 해명과 철회를 요구했고, 저자는 첫 철회에서 실수를 하여 두 번째 철회 메일을 보내야 했음
     * 당초 계획은 하루가 끝날 무렵 모든 프린터를 복구시키는 것이었으나, 사태 수습을 위해 오전 중 조기 복구 실행

후폭풍과 사무실 내 분위기

     * IT 국장은 휴가 중이었고, 복귀 후 수많은 항의 메일을 보고 충격을 받음
     * 저자는 마침 주말과 다음 주 초까지 스키 여행 중이라 사무실에 부재 중이었고, 설명 기회도 놓침
     * 복귀 후 분위기는 냉랭했으며, 저자는 한동안 매우 조심스럽게 행동하며 모범적인 직원처럼 지냄
     * 이 사건으로 인해 보조 관리자도 질책을 받았으며, 저자는 공식적으로 “판단 미숙”이라는 평가를 받음

전설이 된 장난

     * 시간이 흐르며 이 장난은 캠퍼스 내에서 가장 기술적으로 뛰어난 장난으로 평가받게 됨
     * 이전 최고의 장난은 캠퍼스 보안 직원이 입장료를 받는다는 내용이었는데, 저자의 장난은 그것을 능가함
     * 지금도 이 이야기는 전설처럼 회자되고 있으며, 저자는 이 기억을 자랑스럽게 간직하고 있음

        Hacker News 의견

     * 고등학교 시절, Netware 3.12 환경에서 Guest 계정이 활성화되어 있었음. 제한된 권한이었지만, NET SEND를 사용할 수 있었음.
          + 학교 전체가 T1 인터넷 연결을 공유했으며, 이메일에는 충분했지만 웹이 인기를 끌면서 병목 현상이 발생했음.
          + 어느 날, 심한 날씨로 인해 전력 문제가 발생했고, ADMIN으로부터 서버실이 UPS 전원으로 작동 중이니 파일을 저장하고 로그아웃하라는 메시지를 받았음.
          + 몇 주 후, 기술 프로그램의 한 학생이 모두 로그오프하면 대역폭이 확보된다는 것을 깨달았고, GUEST로 로그인하여 NET SEND ALL 메시지를 보내 대역폭을 확보했음.
          + 몇 주 후, 또 다른 인기 있는 파일이 나왔을 때 같은 방법을 사용했으며, 여전히 효과가 있었음.
          + 결국, 관리자도 이 메시지가 GUEST로부터 온 것을 알아차리지 못했으며, 전기 계약자를 불러 서버실 전력 문제를 조사했음.
          + 누군가가 관리자에게 이를 지적했고, ""정말 영리하지만 이제 그만하라""는 반응을 받았으며, 추가 처벌은 없었음.
          + 다음 날, Guest 계정의 권한이 크게 줄어들었음.
     * 이 장난의 진정한 가치는 저자가 사회적 반응을 어떻게 계획했는지, 그리고 장난이 조직 전체에 어떻게 영향을 미쳤는지를 보여주는 것임.
          + 사람들은 웃음으로 반응할 수도 있고, 경계가 침해되었다고 느낄 수도 있으며, 그 반응이 가장 자명한 것이라고 생각할 수 있음.
          + 이러한 반응의 비합리성을 목격할 수 있는 것은 저자의 입장에 있을 때뿐임.
          + 철학이 그리스에서 발생한 이유가 상인들이 주로 교역을 하면서 특정 문화와 장소에 특유한 관습을 목격했기 때문이라는 추측을 들은 적이 있음.
          + 장난을 치는 사람으로서, 사람들이 상황에 따라 다르게 반응하는 것을 보면, 그 반응의 우연성을 실시간으로 목격할 수 있음.
     * 1997-98년에 첫 직장에서 보험회사의 기술 지원으로 일했음. Lotus Notes를 이메일로 사용했으며, 프로그래머 접근 권한이 있었음.
          + 매달 금요일은 캐주얼 복장일이었고, 부서의 관리자에게서 이메일로 알림을 받았음.
          + 어느 날, 바지 없는 금요일을 알리는 이메일을 보내면 재미있을 것 같아 관리자 이메일을 수정하여 보냈음.
          + 프로그래머 권한 덕분에 발신자를 위조하여 부서 관리자에게서 온 것처럼 보이게 했음.
          + 소규모 이메일 그룹에 보내려 했지만, 실수로 IT/Eng 전체에 보냈음.
          + 상사의 전화가 끊이지 않았고, 즉시 상사에게 사실을 알렸음. 해고되지는 않았지만 사과 이메일을 작성해야 했음.
          + 부서의 많은 사람들이 그 사건을 가장 재미있다고 생각했음.
          + 이후 다른 회사로 옮겼으며, 더 도전적인 일이었기 때문에 장난 이메일을 보낼 시간이 없었음.
     * Perl을 배운 것이 우연히 계산 언어학 수업에서였음. 이 문장은 저자가 누구인지 알 가능성을 크게 높였음.
     * 가장 재미있었던 부분은 캠퍼스 관리자가 페이지당 요금을 부과하지 않을 것이라는 철회 이메일을 보냈지만, 실제로는 부과하고 있었음.
     * 많은 장난을 쳤으며, 4월 1일까지 기다리지 않았음.
          + 장난 1: 고등학교에서 Apple II+용 가짜 DOS를 작성했으며, 명령을 실행했지만 가끔씩 비꼬는 메시지를 보냈음.
          + 장난 2: 1970년대 후반/1980년대 초반에 레이저 프린터가 매우 비쌌고, 친구들에게 레이저 프린터를 소유하고 있다고 설득했음.
          + 장난 3: 부모님의 사용하지 않은 수표를 이용해 친구에게 컴퓨터를 사겠다고 말한 후, 수표를 찢어버렸음.
          + 장난 4: 지역 도서관의 Atari 400에 간단한 BASIC 프로그램을 작성해 무작위로 비프음을 내도록 했음.
     * 고등학교에서 모든 프린터의 메시지를 ""Insert Coin""으로 바꿨으며, 네트워크 구성 때문에 전체 구역에 배포되었음.
     * 친구 Bill March의 장난이 가장 재미있었음. 회사에 새로 들어온 그는 4월 1일에 Bill April이라는 이름으로 급여 수표를 받았음.
     * 이메일 없이 장난이 더 재미있었을 것 같음. 사람들이 프린터에 동전을 넣으려 할까 봐 두려웠음.
"
"https://news.hada.io/topic?id=20001","블렌더, 오스카 수상 버전 툴 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          블렌더, 오스카 수상 버전 툴 출시

새로운 기능

     * Blender 4.4는 안정성에 중점을 두고 있으며, ""Winter of Quality""라는 프로젝트를 통해 700개 이상의 문제를 해결하고 기술 부채를 줄이며 문서를 개선함.
     * 애니메이션 워크플로우를 혁신하는 ""Action Slots"" 기능이 도입되어 여러 데이터 블록이 단일 액션을 공유할 수 있게 됨.

품질

     * 2024-2025 겨울 동안 Blender 개발자들은 안정성과 품질을 강화하기 위해 집중적인 노력을 기울였음.
     * 각 모듈별로 해결된 문제의 수가 나열되어 있으며, 그 중 Grease Pencil 모듈에서 가장 많은 147개의 문제가 해결됨.

액션 슬롯

     * 이전에는 각 데이터 블록별로 개별적인 액션이 필요했으나, 이제는 여러 애니메이션을 단일 액션으로 결합할 수 있게 됨.

추가 애니메이션 기능

     * 제약 조건의 관계선이 타겟이 없을 때 더 이상 그려지지 않음.
     * 새로운 F-Curve Noise 수정 알고리듬이 추가됨.
     * 포즈 라이브러리가 사용자 경험을 개선하기 위해 대대적으로 개편됨.

VSE: 훨씬 더 우수한 편집

     * 텍스트 편집을 위한 품질 개선, H.265 및 10/12비트 비디오 지원 확장, 성능 개선이 이루어짐.
     * 텍스트 스트립을 미리보기에서 직접 편집할 수 있는 기능이 추가됨.

비디오

     * H.265/HEVC 코덱을 사용한 비디오 렌더링 지원이 추가됨.
     * 비디오 재생 시 YUV->RGB 변환이 더 정확해져 어두운 영역의 색상 이동과 밴딩이 수정됨.

모델링

     * ""Select by Trait"" 연산자에 폴 수에 따라 선택할 수 있는 옵션이 추가됨.
     * 삼각형을 사각형으로 결합할 때 사각형 지배적인 토폴로지를 우선시하여 더 깨끗한 기하학을 유지함.

조각

     * 새로운 조각 브러시 유형인 ""Plane""이 추가되어 평면 위와 아래의 영향을 조절할 수 있는 옵션이 제공됨.

사용자 인터페이스

     * Windows 11과 macOS에서 창 장식이 테마 색상을 따름.
     * 편집기 크기 조정 시 최소, 최대 및 중간 크기로 부드럽게 스냅됨.

노드 편집기

     * 출력에 영향을 미치지 않는 입력은 회색으로 표시됨.

기타 편집기 개선

     * 자산 브라우저에서 자산이 카탈로그에 따라 정렬됨.
     * UV/이미지 편집기에서 이미지 편집기 보기 모드가 기본 도구로 ""샘플""을 사용함.

컴포지터

     * CPU 컴포지터가 재작성되어 성능이 크게 개선됨.
     * Glare 노드가 더 나은 제어와 사용성을 위해 대대적으로 개편됨.

산업 준비

     * Blender 4.4에서 사용되는 모든 라이브러리 버전이 VFX Reference Platform 2025와 정렬되어 스튜디오 파이프라인 통합 및 유지보수가 용이해짐.

그 외

     * Geometry Nodes에 새로운 노드와 성능 개선이 추가됨.
     * Cycles에서 OptiX Denoiser가 개선되고, 서브픽셀 범프 매핑을 더 정확하게 렌더링함.

        Hacker News 의견

     * Blender가 3D 작업을 더 ""주류""로 만들었음. 많은 비디오, 사진, 튜토리얼이 수백만 조회수를 기록하며 소프트웨어 사용에 대한 관심이 증가하고 있음
          + 이제 Blender는 매우 고급 또는 자원 집약적인 작업이 아닌 모든 3D 작업의 기본값이 되었음
          + Blender가 주류로 자리 잡은 방식은 Coca-Cola와 같은 매우 확립된 브랜드만이 할 수 있는 일임
          + 현재 ""Blender""는 대부분의 사람들에게 3D 포토샵/일러스트레이터를 의미할 수 있음
     * Blender에 기여한 적은 없지만, 크레딧에서 ""made with Blender""를 볼 때 자부심을 느낌
          + Blender는 FLOSS 운동의 보석이며, 많은 다른 프로젝트들이 모방해야 할 역사와 행동을 가지고 있음
          + 이러한 성공이 더 많아지기를 기대함
     * ""Winter of Quality""라는 이름 선택에 감명받음. 이는 2024-2025 북반구 겨울을 명시한 드문 문화적, 지리적 인식을 보여줌
     * 제목에 대해 설명해 줄 수 있는 사람 있음? ""버전 도구""를 출시한다는 것이 무슨 의미인지 이해하지 못하겠음. 오스카 수상자들을 위한 특별 버전이 공개된 것인지, 아니면 일반 Blender 위에 추가할 수 있는 도구인지 궁금함
     * 도구보다는 실제 사람들이 강조되어야 함. Blender의 오픈 소스 공간에서의 성공은 비정상적임
          + 이는 우연히 이 프로젝트에 관심을 가진 뛰어난 사람들의 그룹 때문일 수 있음
          + 아니면 애니메이션 스튜디오가 상업적 대안의 높은 가격 때문에 Blender 개발을 장려하고 있을 수도 있음
          + 어떤 경우든 개별 개발자들이 그룹보다 더 주목받아야 함
     * 최근 오픈 소스 프로젝트, 특히 Godot와 Blender에서 시각적으로 인상적인 릴리스 노트를 보는 경향을 발견했음. 이 경향이 계속되기를 바람
     * 제대로 된 평가가 아닌 직감이지만, Blender와 Houdini는 개발자들이 신경 쓰며 만든 것 같음. 다른 3D 패키지는 그렇지 않음
     * 모든 업데이트의 끝부분에 숨겨져 있지만, 이제 macOS Finder QuickLook에서 .blend 파일을 미리 볼 수 있음. 좋음
     * v4.4 쇼릴 비디오에서 1:30에 O'Neal 실린더(또는 유사한 우주 서식지)의 멋진 렌더링이 있음. 그 출처를 아는 사람 있음?
"
"https://news.hada.io/topic?id=20096","Netflix의 미디어 프로덕션 스위트(MPS)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Netflix의 미디어 프로덕션 스위트(MPS)

     * Netflix는 전통적인 물리 기반의 비효율적이고 복잡한 미디어 관리 시스템을 혁신하기 위해 Media Production Suite(MPS) 를 개발
     * 클라우드 기반의 워크플로우를 통해 창작자들이 창의적인 작업에 더 집중할 수 있도록 지원하며, 제작부터 후반 작업까지 글로벌 협업을 가능하게 하는 기술 솔루션

해결하고자 하는 문제

     * 평균적인 Netflix 작품은 약 200TB의 원본 카메라 파일(OCF) 을 생성하며, 일부 프로젝트는 700TB 이상에 달함 (작업 중인 파일, VFX, 3D 자산 등은 제외)
     * 전통적으로 이러한 미디어는 LTO 테이프와 같은 물리적 저장 매체에 복사되어 운송되며, 이는 검색/재생/공유가 어렵고, 글로벌 협업 시 접근 속도를 저하시키는 단점이 있음
     * 디지털 워크플로우가 완전하더라도, 여러 부서 및 벤더 간 미디어 분배는 여전히 어렵고, 자동화 및 표준화 부족으로 인해 수작업 의존도가 높아짐
          + 이는 후반 제작 과정에서 오류 및 보안 리스크 증가, 협업 난이도 상승, 작업 시간 지연 등의 문제를 유발함
     * 클라우드 전환은 필수적이지만 새로운 도전도 동반함:
          + 일부 후반 제작 시설은 여전히 수많은 외장 하드에 의존해 벤더 간 직접 운반을 해야 하는 상황
          + 중앙 집중형 클라우드 솔루션의 필요성이 더욱 절실
     * Netflix는 ""훌륭한 이야기는 어디에서든 나올 수 있다""고 믿지만, 전통적 기술 인프라는 미디어 접근성과 인재 활용을 제한함
          + 제작자들은 강력한 클라우드 저장소뿐만 아니라 고성능 작업 환경과 실시간 재생 기능에도 접근할 수 있어야 함
          + 일부 지역 또는 낮은 예산의 제작 환경에서는 최신 기술 활용이 어려운 경우도 있음
     * 이러한 한계를 극복하기 위해, 미디어를 아티스트와 애플리케이션에 가져가는 전통 방식에서 벗어나, 사람과 애플리케이션을 미디어로 이동시키는 클라우드 중심의 워크플로우로의 전환이 글로벌 트렌드로 주목받고 있음
          + IBC, NAB와 같은 국제 방송 기술 박람회에서도 이 흐름이 두드러지고 있음
          + 이 같은 비전을 Netflix 규모에서 수백 편의 타이틀에 실제로 실행하는 것은 지금까지 없던 도전임

글로벌 기술 솔루션 구축의 어려움

     * 글로벌 스케일의 솔루션을 구축하는 일은 다음과 같은 복합적인 문제를 수반함:
          + 영화 및 시리즈 제작 환경은 기술 접근성, 모범 사례, 표준화 수준이 지역마다 매우 다름
          + 어떤 지역은 100년이 넘는 영화 산업 역사를 가지고 있지만, 일부 국가는 이제 막 시작하는 단계
          + 서로 다른 언어와 워크플로우를 가진 시장을 모두 만족시키는 기술을 개발하는 것이 핵심 과제임
     * 전 세계 인재와 벤더의 다양한 요구사항은 표준화의 큰 걸림돌
          + 일부 고도화된 VFX 및 후반 작업 시설은 내부에 자동화 스크립트를 구축해 특정 형식의 파일과 메타데이터를 처리하지만, 그 맞춤화는 매우 시간이 오래 걸림
          + 새로운 워크플로우 도입은 기존 프로세스를 깨뜨릴 수 있다는 우려로 인해 도입 장벽이 존재
          + 소소한 변경이라도 벤더의 수익성에 큰 영향을 줄 수 있기 때문에, 도입하려는 기술은 실질적이고 명확한 이익을 제공해야 함
     * Netflix는 수많은 타이틀을 다루면서도 운영 인력 확장 없이 이를 처리할 수 있어야 했고, 그 결과 자동화가 필수 요소가 됨
          + 색상 및 프레임 관리, 납품 파일 구성 등이 사용자 개입 없이도 자동으로 제어되어야 하며, 사람이 JSON을 수동으로 수정해서 매핑하는 구조는 지양함
     * 이를 위해 Netflix는 다음과 같은 개방형 표준에 기반한 기술을 적극 도입:
          + ACES, AMF: 색상 파이프라인 자동화 및 일관성 확보
          + ASC MHL: 파일 무결성 검증 및 추적
          + ASC FDL: 프레이밍 정보 통합을 통한 워크플로우 간 호환성
          + OTIO: 타임라인 및 편집 정보 교환
     * 이러한 표준을 채택함으로써 다양한 해상도, 포맷, 렌즈, 프레임 안전 영역 등을 가진 영상을 하나의 공통 형식으로 자동 정규화하는 것이 가능해짐
          + 기존에는 이 작업이 고예산 작품에 한정되었으며 수작업으로 이뤄졌지만, 이제는 표준에 기반한 자동화 덕분에 모든 사용자에게 동일한 고급 기능 제공 가능
          + 사용자는 직접 복잡한 설정을 하지 않고도 고급 워크플로우를 제어할 수 있음

Netflix의 답 — Content Hub 기반 Media Production Suite(MPS)

     * Netflix는 다양한 시장에서 활용 가능한 글로벌 확장형 솔루션 개발을 목표로 MPS(Media Production Suite)를 설계함
     * 숙련된 전문가도 만족할 만큼 강력한 기능성과 사용자 정의 옵션을 제공하면서, 초보자도 쉽게 활용할 수 있도록 직관적이고 간소화된 인터페이스를 유지
     * Netflix 내부 팀, 전 세계 벤더, 제작 인재들과의 협업을 통해 기술의 대중화를 실현하는 도구 모음을 Content Hub 안에 구현
     * 규모의 경제와 풍부한 자원을 활용해 글로벌 인재를 발굴, 비창의적인 반복 작업을 줄이고, 시장 간 격차를 해소, 창의 작업에 집중할 수 있는 시간 극대화

Media Production Suite 구성 요소

  1. Netflix 하이브리드 인프라 구조

     * 클라우드 기반 기능과 물리적 인프라를 결합한 하이브리드 인프라로 구성됨
     * 전 세계 주요 제작지 인근에 물리 인프라를 배치하여 사용자 퍼포먼스를 최적화
     * Netflix Open Connect (콘텐츠 전송망)를 통해 AWS 클라우드 인프라와 연결
     * 고용량 카메라 및 오디오 미디어 처리에 최적화된 구조
     * 빠른 업로드를 지원하기 위해 전 세계에 Content Hub Ingest Center를 구축 중
     * 미디어를 클라우드에 중앙 집중화하여 물리적 미디어 운송 필요 제거, 보안 및 접근성 향상

  2. 자동화 및 도구 구성

     * 하이브리드 인프라 위에 구축된 다양한 미디어 활용 툴 세트 제공
     * 주요 도구:
          + Footage Ingest : 사용자가 미디어 파일을 Content Hub에 업로드할 수 있는 애플리케이션
          + Media Library : 미디어를 검색, 미리보기, 공유, 다운로드할 수 있는 중앙 라이브러리
          + Dailies : 자동 품질 검사, 사운드 싱크, 색상 적용, 렌더링, 편집팀 전송을 자동화한 데일리 워크플로우
          + Remote Workstations : 원격 편집용 워크스테이션과 저장소에 접근 가능
          + VFX Pulls : VFX 벤더에게 제공할 영상, 색상, 프레이밍 데이터를 자동으로 변환 및 전달
          + Conform Pulls : 편집 마감 작업을 위한 OCF 통합, 트리밍 및 전달 자동화
          + Media Downloader : 클라우드에 미디어가 업로드되면 자동 다운로드를 실행하는 툴
     * 현재 각 도구의 완성도는 다양하지만, 전 세계 350개 이상 타이틀이 최소 하나 이상의 기능을 이미 사용 중
     * 사용자는 UCAN (미국/캐나다), EMEA (유럽/중동/아프리카), SEA (동남아), LATAM (라틴 아메리카), APAC (아시아태평양) 전역에 걸쳐 있음

사례 연구: 브라질 제작 시리즈 ‘Senna’ - MPS의 조기 도입과 피드백이 만든 진화

     * 브라질에서 제작된 시리즈 ‘Senna’는 전설적인 F1 드라이버 아일톤 세나의 삶을 다루며, 글로벌 공동 제작 환경에서 MPS(Media Production Suite) 를 조기에 도입한 사례임
     * 이 시리즈는 아르헨티나, 우루과이, 브라질, 영국 등에서 촬영되었으며, 편집팀은 브라질 포르투알레그리와 스페인에, VFX 스튜디오는 브라질, 캐나다, 미국, 인도에 분산되어 협업함
     * Scanline VFX가 전체 VFX 제작을 주관하며, MPS는 글로벌 제작 환경을 통합하는 핵심 플랫폼으로 작동함
     * 클라우드 기반 제작의 시작
          + MPS 도입의 핵심은 원본 카메라 파일(OCF) 과 사운드 파일(OSF) 을 클라우드에 업로드하는 것이며, 이를 통해 물리적인 저장 매체 운반(LTO 테이프, 외장 하드 등)을 완전히 제거함
          + 후반 작업 감독 Gabriel Queiroz는 ""이 모든 미디어를 물리적으로 이동시키는 것은 너무 시간이 오래 걸리고 비효율적이다""라고 언급
          + 실제로 Senna는 LTO 테이프 없이 제작된 첫 사례 중 하나이며, 이는 제작 효율성과 속도, 보안 모두에서 큰 진보를 의미함
     * Footage Ingest로 시작하는 자동화된 클라우드 워크플로우
          + 드라이브 연결 후 Netflix의 Footage Ingest 애플리케이션을 통해 자동 검증 및 메타데이터 추출, 체크섬 검사, 프록시 생성, 2차 백업까지 수행
          + 이전에는 각 단계마다 벤더에게 직접 전화해 진행 상황을 물어야 했지만, 이제는 Content Hub의 대시보드에서 실시간 모니터링 가능
     * VFX Pulls: 자동화된 시각 효과 데이터 분배
          + Senna는 대량의 영상과 수많은 VFX 샷을 포함하고 있어, VFX Pulls 기능이 핵심
          + 기존 워크플로우였다면 각 벤더마다 서로 다른 포맷과 전송 방식으로 데이터를 주고받아야 했음
          + MPS 사용 시, 어시스턴트 편집자는 EDL을 업로드하면 자동으로 트랜스코딩, 색상 파일 정리, Google Drive 스타일의 Workspaces에 저장됨
          + 모든 벤더가 동일한 방식으로 I/O 작업을 수행하게 되어, 제작, 편집, 색보정 간의 호환성과 효율성 증가
     * Conform Pulls와 편집 마감 지원
          + 최종 편집 단계에서는 DI 시설 Quanta가 MPS의 Conform Pull 서비스를 활용해 EDL 업로드, 품질 검사, 미디어 트리밍, 패키징까지 자동 수행
          + 초기에는 베타였지만, Senna를 비롯한 여러 프로젝트의 피드백을 바탕으로 현재는 EDL과 OCF 간 유연한 매칭(fuzzy matching) 이 가능
          + 향후에는 컴퓨터 비전 기반의 지각적 정합(perceptual conform) 도 구현 예정으로, 메타데이터 외에도 영상 자체를 인식하는 방식까지 확장됨

     Senna는 MPS의 진화 과정에 있어 중요한 전환점이 되었으며, Netflix의 글로벌 제작 환경에서 클라우드 기반 협업이 실질적인 성과로 이어질 수 있음을 입증한 대표 사례임

결론

     * Media Production Suite(MPS) 는 Netflix의 미디어 제작 방식을 근본적으로 변화시킨 획기적인 도약임
     * 개방형 표준을 적극 도입하여, 글로벌 스케일에서도 경제성과 기술 접근성을 모두 만족시키는 솔루션을 구현함
     * 반복적이고 비창의적인 작업을 제거함으로써, 제작 팀이 창의적 스토리텔링에 더 집중할 수 있는 환경 조성
     * 클라우드 기반 워크플로우와 글로벌 협업 인프라를 통해 단순한 효율성 향상을 넘어, 콘텐츠 품질까지 향상시킴
     * 앞으로도 Netflix는 지속적인 혁신과 프로세스 정교화를 통해, 전 세계 창작 인재의 잠재력을 해방하는 데 집중할 예정
     * MPS는 미래형 콘텐츠 제작의 핵심 기반이며, Netflix는 보다 연결되고 창의적인 산업을 향한 변화를 선도하고 있음

        Hacker News 의견

     * 이 기사를 읽으면서 UI가 내가 현재 사용하는 도구와 어떻게 비교될지 궁금했음
          + 내 비디오 필요가 크지 않아서 무료 버전이 있을지 궁금했음
     * 기사를 끝까지 읽고 나서야 이 글이 ""우리가 만든 도구를 즐기세요""가 아니라 ""우리가 얼마나 대단한지 보세요""라는 글임을 알게 되었음
     * _Collateral_의 촬영에 대해 읽고 있었음. 이 영화는 디지털로 촬영된 첫 대형 예산 영화 중 하나였음
          + 2004년 당시 디지털 비디오의 저장 공간 문제와 데이터 저장소에서 이미지를 복구할 수 없는 위험이 있었음
          + ""하드 드라이브로 대규모 테스트를 했고, 모든 것이 좋았지만, 촬영 후 자료를 보냈을 때 하드 드라이브에서 정보를 얻을 수 없었음""이라고 Cameron이 말했음
          + 타협안으로 하드 드라이브와 SRW 테이프에 녹화하기로 했음. 오늘날과 달리 디지털 영상 확인이 번거롭고 긴장감이 있었음
          + ""우리는 모든 것을 두세 번 녹화했음""이라고 Beebe가 말했음
     * 자동화가 필수적이 되었음. 색상 및 프레이밍 관리의 복잡성과 전달물은 사용자가 수동 개입 없이 원활하게 제어하고 관리해야 함
          + Netflix의 시각적 다양성 부족에 대해 비판적으로 생각했었음. 이는 전형적인 영화 애호가들이 자주 불평하는 부분임
          + Netflix의 규모 때문일 수도 있다는 것을 고려하지 않았음. 이는 운영상의 선택일 수 있음
          + 이 시스템은 매우 복잡하고 영리하게 들림. 영화 및 TV 제작의 창의적인 측면에 강력한 수직적 접근을 적용하는 것이 결국 단견일 수 있음
     * 15년 전, 내가 일했던 첫 스타트업은 인도에서 음악 스트리밍을 위한 API를 제공했음
          + 인프라를 관리하던 창업자는 미국에 있었고, 서버는 LA에 있었음
          + 인도로 날아가서 포터블 하드 드라이브를 구매하고 미디어를 업로드한 후, 미국으로 돌아와 파일 서버에 데이터를 업로드하는 것이 더 저렴하고 빠르다는 것이 재미있었음
          + 이는 TB 단위의 데이터에만 해당됨. 나중에 AWS Snowball과 Snowmobile에서도 같은 것을 보았음
     * 그들이 말하는 자산 크기(수백 테라바이트)로 어떻게 이것을 네트워크로 처리할 수 있을지 궁금함
          + 1Gbps 연결로도 100TB의 원본 카메라 파일을 업로드하는 데 약 10일이 걸림. 여러 개의 파일이 있을 수 있음
     * Netflix의 아티스트를 위한 원격 워크스테이션 설정에 대한 추가 정보
     * 이것이 AWS와 같은 플랫폼으로 발전할 수 있을 것 같음. 이는 최첨단 기술에 대한 접근을 민주화하고 도구 문제를 효과적으로 해결할 것임
          + 하지만 여전히 진정한 병목 현상인 흥미로운 스토리텔링 문제는 해결하지 못할 것임
     * 어떤 부분이 좋은 이야기를 만드는지 궁금함
     * 가장 인상 깊었던 부분은 여전히 수작업이 많고 오류가 발생하기 쉬운 작업이 업계에서 흔하다는 것이었음
          + Netflix 외부에서 이 솔루션이 얼마나 이식 가능한지 궁금함. 매우 수직적으로 통합된 솔루션처럼 들림
     * 어떤 언어가 사용되는지 궁금함. 데스크톱 앱의 스크린샷이 네이티브처럼 보임
"
"https://news.hada.io/topic?id=20106","왜 F#인가왜 F#인가?

     * F#은 .NET을 타깃으로 하는 ML 계열 함수형 언어이며, Microsoft에서 개발. 주로 객체지향인 C#에 비해 F#은 함수형 프로그래밍 패러다임에 집중함
     * 이 글은 F#의 언어 특징, 생태계, 문서화 상태, 개발 도구, 활용 사례, 커뮤니티 현황, F# vs. OCaml 등을 정리

F#이란?

     * F#은 간결하고 견고하며 성능 좋은 코드를 작성하기 위한 범용 프로그래밍 언어
     * 복잡한 문법에 신경 쓰지 않고, 문제 해결 자체에 집중할 수 있도록 설계됨
     * 오픈소스, 크로스 플랫폼, .NET과의 높은 호환성을 가짐
     * 특징
          + 가벼운 문법과 기본 불변성
          + 타입 추론 및 일반화
          + 일급 함수, 강력한 자료형, 패턴 매칭
          + 비동기 프로그래밍(Async) 지원
          + 유명한 **파이프라인 연산자 (|>)**의 원조 언어
     * 간단한 예제 코드
open System
let names = [ ""Peter""; ""Julia""; ""Xi"" ]
let getGreeting name = $""Hello, {name}""
names |> List.map getGreeting |> List.iter (printfn ""%s"")

     * F#은 2005년 Microsoft Research에서 Don Syme이 개발한 언어로 시작됨
          + **OCaml을 .NET 플랫폼에 이식하는 연구 프로젝트(Caml.NET)**에서 출발
          + 이후 2010년부터 정식 제품으로 편입되었고, 2024년에는 F# 9.0이 출시됨
          + 2025년 현재는 20주년을 맞이한 성숙한 언어로 자리매김
     * F#을 실험하게 된 주요 이유
          + .NET이 오픈소스 및 크로스 플랫폼으로 진화한 점 확인
          + OCaml 대비 장단점 비교
          + Rider, Ionide 등 툴링에 대한 긍정적 평가
          + 단순한 언어 탐험에 대한 흥미

언어로서의 F#

     * F#은 ML 계열 함수형 언어로, OCaml 사용자에게는 익숙한 문법을 가짐
     * Haskell이나 Lisp 사용 경험이 있는 개발자도 쉽게 적응 가능함
     * 공백 기반 문법 구조로, Python처럼 들여쓰기가 문법적으로 중요함
     * 초보자도 빠르게 기본 문법을 익힐 수 있도록 설계됨
     * 언어 특징 요약
          + 함수 정의와 적용이 간결하며 자연스러운 방식으로 표현 가능함
          + 조건문, 반복문, 튜플, 리스트 처리 등이 함수형 스타일로 깔끔하게 사용 가능함
          + 레코드, 열거형(Discriminated Union), 패턴 매칭을 통해 복잡한 데이터 구조를 간결하게 다룸
          + 파이프라인 연산자(|>)를 통해 데이터 흐름을 함수 연결처럼 시각적으로 명확하게 구성할 수 있음
          + F#은 ad-hoc 스크립트 작성에 매우 적합하며, .fsx 파일로 작성 후 dotnet fsi로 바로 실행 가능함
          + REPL 환경도 제공되어 탐색적 프로그래밍에 유리함
     * 사용자 친화적인 문법
          + 한 줄 및 여러 줄 주석, mutable 변수, 리스트 슬라이스 등 실용적인 문법 기능 포함
          + C#과의 높은 호환성 덕분에 .NET API를 쉽게 사용할 수 있음
          + 다양한 타입에 대한 연산자 오버로드도 자연스럽게 지원함
          + printfn으로 다양한 타입을 손쉽게 출력할 수 있어 디버깅과 로깅에 유용함
     * 비동기 프로그래밍의 선구자
          + async/await 패턴의 원조는 F# 2.0으로, 이후 C#과 JavaScript 등 여러 언어에 영향을 줌
          + F#은 비동기 프로그래밍을 콜백 없이도 직관적으로 구현할 수 있는 구조를 제공함
          + 코드 흐름이 동기식처럼 읽히지만, 실제로는 비동기로 동작함
     * Microsoft의 투자와 언어 발전
          + Microsoft는 오랜 기간 F#에 제한적인 인력을 할당했으나, 2022년 프라하에 전담 팀을 구성하며 본격 투자 시작
          + F# 8.0, 9.0의 릴리스를 통해 언어 및 툴링이 빠르게 개선되고 있음
          + Microsoft의 내부 관심이 늘어나면서 미래 발전 가능성도 기대할 수 있음

     F#은 배우기 쉬우면서도 강력한 타입 시스템과 함수형 프로그래밍 패러다임을 갖춘 실용적인 언어이며, 특히 .NET 기반 프로젝트에서 함수형 접근법을 도입하고 싶은 개발자에게 매우 매력적인 선택지임

생태계(Ecosystem)

     * F#은 상대적으로 짧은 기간 동안 사용해 본 결과, 순수 F# 전용 라이브러리나 프레임워크는 많지 않음
     * 대부분의 사용자들은 .NET의 기본 API와 C# 위주로 설계된 서드파티 라이브러리에 의존하고 있음
     * 이는 Scala, Clojure, Groovy 같은 **호스트 언어(hosted language)**에서는 흔히 볼 수 있는 현상임
     * 웹 개발용 주요 라이브러리
          + Giraffe: ASP.NET Core 기반의 경량 웹 프레임워크로, 함수형 스타일을 지향함
          + Suave: 라우팅과 작업 구성을 위한 컴비네이터 스타일의 간단한 웹 서버 프레임워크
          + Saturn: Giraffe 위에 구축된 MVC 스타일 프레임워크, Ruby on Rails 및 Phoenix에서 영감받음
          + Bolero: WebAssembly와 Blazor 기반의 클라이언트 애플리케이션 개발 프레임워크
          + Fable: F#을 JavaScript로 트랜스파일하여 React, Node.js 등의 JS 생태계와 연동 가능하게 함
          + Elmish: Fable과 함께 자주 사용되는 MVU(Model-View-Update) 패턴 기반의 UI 프레임워크
          + SAFE Stack: Saturn, Fable, Elmish, Azure 등을 조합한 엔드투엔드 함수형 웹 개발 스택
     * 데이터 사이언스용 주요 라이브러리
          + Deedle: pandas 스타일의 데이터 분석 및 조작 라이브러리
          + DiffSharp: 머신러닝과 자동 미분 기능을 제공하는 수학 중심 라이브러리
          + FsLab: 시각화, 통계 분석 도구 등을 포함한 데이터 사이언스 통합 툴킷

문서화 상태

     * 공식 문서는 전반적으로 잘 정리되어 있고 품질이 높음
     * 일부는 Microsoft Docs에, 일부는 F# Software Foundation에 분산되어 있음
     * 문서 구성은 약간 산만할 수 있으나 언어 스타일 가이드, 디자인 문서, 표준 라이브러리 API가 매우 유용함
     * 추천 문서 링크
          + F# 스타일 가이드
          + F# 디자인(RFC 문서 모음)
          + F# 표준 라이브러리 API 문서
     * 커뮤니티 학습 자료
          + F# for Fun and Profit: 튜토리얼 및 에세이 모음 (다소 오래됐지만 여전히 유효함)

개발 도구(Dev Tooling)

     * F#의 개발 도구 생태계는 과거에는 Visual Studio에만 최적화되어 있었고, 그 외 에디터에 대한 지원은 부족했음
     * 다행히도 지난 10년간 도구 환경이 크게 개선되었음
     * 기술적 전환점: FSharp.Compiler.Service(FCS)
          + FCS는 F# 컴파일러, 편집기 지원 기능, 스크립팅 엔진을 포함한 단일 라이브러리로, 다양한 에디터 및 툴링 환경에서 F#을 사용할 수 있게 함
          + 이로 인해 VS Code, 문서 생성기, 대체 백엔드 등에 F# 지원이 가능해졌고, 생태계 확장을 이끔
          + 대표적인 예로 Ionide는 VS Code에서 풍부한 F# 지원을 제공하며, 100만 다운로드 이상 기록
     * 테스트한 에디터들
          + Emacs (fsharp-mode): 기본적인 기능 제공, TreeSitter 미지원, 개발 활동 적음
          + Zed: F# 지원은 제한적
          + Helix: 기본 지원 있음
          + VS Code (Ionide 플러그인): 가장 완성도 높은 환경 중 하나
          + JetBrains Rider: 상용 IDE지만 F# 지원이 매우 강력함

     대부분의 기능은 F# 언어 서버(fsautocomplete) 기반으로 작동하며, LSP 지원이 좋은 에디터는 모두 사용 가능
     * 아쉬운 점
          + fsharp-mode는 오래된 코드베이스 기반이며 발전이 느림
          + Zed는 기능이 부족
          + VS Code는 일부 기능(예: 선택 영역 확장/축소)이 제대로 동작하지 않음
          + 키바인딩/모달 모델 문제로 인해 VS Code를 불편하게 느끼는 사용자도 존재함
     * 코드 포매터 및 린터
          + Fantomas: F# 공식 코드 포매터로, 대부분의 사용자 및 팀이 사용 중
          + FSharpLint: 한때 인기 있었으나 현재는 사실상 중단됨
          + 그러나 강력한 컴파일러 덕분에 린터 의존도가 낮음
     * 기타 도구
          + Paket: .NET을 위한 의존성 관리자 (npm, pip, bundler와 유사)
          + FAKE: 빌드 스크립트를 F#으로 작성할 수 있는 DSL, Ruby의 rake와 유사

활용 사례(Use Cases)

     * .NET의 폭넓은 생태계 덕분에 F#은 다양한 분야에서 활용 가능성 존재
     * 특히 타입 프로바이더(Type Providers) 기능 덕분에 데이터 분석 및 조작 작업에 매우 적합함
     * 백엔드 서비스, 전체 스택 애플리케이션 개발에도 적절하며, 일부 도구들은 프론트엔드 개발까지 가능하게 해줌
     * 주요 활용 영역
          + 데이터 분석: F#의 타입 프로바이더를 활용해 정적 타입 기반의 데이터 조작 가능
          + 백엔드 서비스: .NET의 강력한 웹 프레임워크와 함께 F# 사용 가능
          + 프론트엔드 앱: Fable과 Elmish를 통해 JS 생태계와 통합된 UI 개발 가능
               o Fable 4부터는 TypeScript, Rust, Python 등 다양한 언어로도 트랜스파일 가능
     * Fable 예시 (간단한 트랜스파일 명령)
          + 자바스크립트:
            dotnet fable
          + 타입스크립트:
            dotnet fable --lang typescript
          + 파이썬:
            dotnet fable --lang python

커뮤니티 상황

     * 전체적으로 커뮤니티는 크지 않으며 OCaml보다도 작을 수 있음
     * Reddit과 Discord 채널이 가장 활발한 커뮤니케이션 공간
     * Slack 커뮤니티도 존재하지만 초대 자동화 시스템 문제로 접근이 어려움
     * Microsoft의 커뮤니티 내 역할은 불분명하며, 커뮤니티 주도성이 강한 편
     * 커뮤니티에서 운영 중인 주요 리소스
          + Amplifying F#: F# 확산 및 기업 참여 유도
          + F# for Fun and Profit: 튜토리얼 및 에세이 아카이브
          + F# Lab: 데이터 과학용 F# 커뮤니티 툴킷
          + F# Weekly: 최신 F# 소식 정리 뉴스레터

인기와 현실 (The Popularity Contest)

     * F#은 대부분의 인기 지표(TIOBE, StackOverflow, 구인 공고 등)에서 높은 순위에 있지는 않음
     * 하지만 이는 대부분의 함수형 언어들이 처한 현실이기도 하며, F#만의 문제는 아님
     * 여전히 주류는 아니지만, Clojure, OCaml, Emacs Lisp과 같은 다른 함수형 언어들과 비슷한 수준의 사용자층을 가짐
     * 왜 F#을 쓸까?
          + 취업 가능성 외에도 프로그래밍 언어를 선택하는 이유는 다양함
               o 재미를 위해 (F#의 F는 “Fun”을 의미한다는 말도 있음)
               o 새로운 패러다임과 아이디어 학습
               o 익숙한 사고방식에서 벗어나 다른 방식으로 사고하는 훈련
     * 관련 자료
          + F#의 인기 현황에 대한 글
          + 2024년 기준 F#의 인기 분석
               o 해당 글의 영상 버전도 참고 가능

F# vs OCaml 비교

     F#의 초기 목적은 OCaml의 장점을 .NET으로, .NET의 장점을 OCaml로 가져오는 것이었음
     – Don Syme, F#의 창시자

     * F#은 OCaml에서 영감을 받아 개발되었으며, 초반에는 .ml, .mli 파일 확장자도 지원했을 만큼 유사성이 높았음
     * 시간이 지나며 점점 독립된 언어로 진화했고, 이제는 각자의 방향으로 발전하고 있음
     * F#의 장점
          + .NET 플랫폼 기반
               o 방대한 수의 라이브러리 활용 가능
          + Microsoft의 지원
          + 초보자 친화적
               o 객체지향 언어(C# 등) 사용 경험자에게 익숙한 문법
               o 컴파일러의 오류 메시지가 비교적 명확함
               o 디버깅 경험이 더 직관적
          + 비동기 프로그래밍 지원이 강력함
          + OCaml에 없는 기능 제공
               o 익명 레코드
               o 액티브 패턴
               o 계산 표현식 (computational expressions)
               o 시퀀스 컴프리헨션
               o 타입 프로바이더 (type providers)
               o 단위 계산 (units of measure)
     * F#의 단점
          + .NET 플랫폼 기반
               o 언어 설계에서 .NET과의 상호 운용을 위한 타협이 많음 (null 허용 등)
          + Microsoft의 소유
               o 마이크로소프트에 대한 선호도 차이 존재
               o 비교적 적은 리소스가 F#에 배정됨
               o 장기적으로 MS가 F#을 얼마나 지원할지는 불확실함
          + 이름 관련 문제
               o PascalCase, camelCase 네이밍 컨벤션이 싫은 사람에게는 불편할 수 있음
               o F#이라는 이름은 검색이나 파일 이름에서 문제를 일으킬 수 있음 (그래서 FSharp으로도 자주 표기됨)
          + OCaml에 있는 고급 기능 부재
               o 일급 모듈, 펑터(functor)
               o GADT 지원 부족
          + 마스코트가 없고 낙타도 없음
     * 공통점 및 상호 비교
          + 두 언어 모두 JavaScript 런타임 타깃이 가능함
               o F#: Fable
               o OCaml: js_of_ocaml, Melange
          + 현재는 Fable이 더 성숙한 느낌이지만, 실사용 경험은 더 필요함
          + 둘 다 강력하지만 니치한 언어이며, 당분간 폭넓은 대중 언어가 될 가능성은 낮음
          + F#은 기존 C# 코드베이스에 조금씩 스며들 수 있는 실용성이 있음
          + 단점 하나는 F# 프로젝트는 아직도 XML 기반의 프로젝트 파일을 사용하고, 컴파일 순서를 수동으로 지정해야 함
               o 이는 OCaml의 빌드 시스템인 Dune과 비교할 때 번거롭게 느껴질 수 있음
          + 교육적 목적이나 언어 구조 학습에는 OCaml이 적합할 수 있음
          + 실용적인 웹 서비스나 백엔드 개발 목적이라면 F#이 더 나은 선택일 수 있음
          + 특히 .NET과 잘 통합되면서도 함수형 스타일을 유지할 수 있는 언어로서 F#은 매우 강력한 도구임

마무리 소감

     * 글쓴이는 F#을 생각보다 훨씬 더 재미있고 실용적인 언어로 느꼈음
          + 과거 Clojure를 처음 접했을 때와 비슷한 느낌을 받았다고 표현함
          + 특히 Clojure가 Java와의 뛰어난 상호운용성 덕분에 가장 실용적인 Lisp였던 점을 상기시킴
     * 만약 .NET이 처음부터 오픈소스이자 포터블했더라면,
          + ClojureCLR이 지금보다 더 인기를 끌었을 가능성
          + F#의 커뮤니티와 생태계도 더 성장했을 것이라는 아쉬움을 전함
     * F#이 2010년까지 오픈소스가 아니었다는 점도 초기 채택에 방해가 되었음

     "".NET과 F# 모두 초기에 오픈소스가 아니었던 것이 가장 큰 실수였으며, 이로 인해 많은 기회를 잃었음"" – Don Syme

     * OCaml도 배우기 어렵지 않지만, ML 계열 언어를 처음 배우는 사람에게는 F#이 더 쉬울 수 있음
          + 프로덕션까지 가는 진입장벽도 더 낮음
     * 특히 .NET 경험이 있는 개발자라면 F#을 반드시 경험해볼 가치가 있다고 강조함
          + F#은 독립적인 언어로서 훌륭할 뿐만 아니라, .NET의 강력한 생태계를 활용할 수 있는 기회를 제공함
     * Fable 같은 툴을 통해 F# 코드를 JavaScript, Dart, Rust, Python 등으로 트랜스파일링 가능함
     * F# 커뮤니티에서는 ""F#의 F는 Fun(재미)이다""라는 말이 있음
          + 글쓴이도 직접 써보며 이 말이 사실이라고 느꼈고, 재미있을 뿐 아니라 실용적이기까지 하다고 강조함
     * 마지막으로 ""컴파일이 성공하면 대부분 잘 작동한다""는 F#의 안정성과 신뢰성도 언급함

     In sane type systems we trust!

        Hacker News 의견

     * F#는 Ruby on Rails 앱을 다시 작성할 때 가장 좋은 함수형 언어였음
          + Haskell, Ocaml, Scala, F#를 고려했음
          + Microsoft 기술에 익숙하지 않았지만 F#가 첫 선택이 되었음
          + Haskell은 순수성 때문에 채택하기 어려웠고, Ocaml의 생태계는 부족했음
          + Scala는 복잡해 보였음
          + F#는 시작하기 쉬웠고, 커뮤니티는 친절하고 똑똑하며 도움을 줄 준비가 되어 있었음
          + dotnet 라이브러리에 접근할 수 있는 훌륭한 생태계가 있음
          + http 서버와 쉽게 상호작용할 수 있는 FsHttp 같은 훌륭한 라이브러리와 프레임워크가 있음
          + WebSharper는 모든 생태계 중 최고의 웹 프레임워크였음
          + 도구가 최상의 상태는 아니지만 언어에 대한 열정이 큼
     * F#를 시도했지만 .NET 생태계에 새로웠음
          + ""hello world""를 위해 많은 프로젝트 파일과 보일러플레이트가 생성되어 놀랐음
          + FP, 불변성, 현대 언어를 지지하지만, 일자리가 부족함
          + AI와 쉽게 사용할 수 있는 언어를 선호하는 경향이 있음
          + 인도에서는 상황이 더 나빴지만, EU에서는 Java/TypeScript로 지속 가능한 생활을 할 수 있음
          + Kotlin + TypeScript로 잘 지불하는 직업을 찾기 어려움
     * 우리 회사는 6년 전 C#에서 F#로 전환했음
          + C 스타일 언어에서 전환하기 어렵지만 가치가 있음
          + 컴파일 속도가 느리고 핫 리로드가 지원되지 않음
          + 전문적으로 사용할 기회가 적음
          + 개발자를 고용하는 것이 어려울 수 있음
     * F#의 채택이 정체된 이유는 나쁜 빌드 시스템 때문임
          + Rust는 훌륭한 언어지만 많은 문제 도메인에 적합하지 않음
          + Rust를 선택하는 이유는 빌드 시스템 때문임
          + 비영리 재단이 있고 여러 기업이 지원하는 언어들이 여전히 나쁜 빌드 시스템을 가지고 있음
     * 2013년에 F#를 배웠고 많은 재미를 느꼈음
          + 사용자 경험이 좋지 않았음
          + 명명 규칙과 함수 호출 스타일, 기본 구문, 타입 시스템 기능, IDE 지원에 문제가 있었음
          + Scala로 전환했으며, F#보다 더 일관된 느낌을 받았음
          + F#는 첫 함수형 언어였고 프로그래밍에 대한 시각을 바꾸었음
     * F#는 모든 사용자가 매우 만족하는 드문 경우임
          + .NET 생태계에 익숙하여 배우기 쉬울 것 같음
          + 어떤 워크플로우가 가장 큰 이점을 얻을 수 있을지 궁금함
     * C#가 F#의 많은 기능을 얻으면서 F#의 장점이 줄어들고 있음
          + C# 코드를 주로 함수형 스타일로 작성하지만, 라이브러리를 본래의 방식으로 사용할 수 있는 장점이 있음
     * F#로 완전히 작성된 수익성 있는 SaaS가 있음
          + 3dpack.ing
          + F#로 작성된 Rust 레이 트레이서가 웹 어셈블리로 컴파일됨
          + fable-raytracer
     * F#는 훌륭한 언어임
          + 한 줄도 작성하지 않더라도 훌륭한 예시 언어임
          + fsharpforfunandprofit.com을 자주 참조함
     * F#는 아름답지만 유창하게 사용하기 어려웠음
          + C#를 조금만 알고 있어서 F#의 객체 지향 방법을 이해하기 어려웠음
          + Clojure와 Scala에서도 같은 문제를 겪었음
          + C#나 Java를 먼저 배우고 싶지 않음
"
"https://news.hada.io/topic?id=20013","사람들이 여전히 LLM에 대해 낙관적인 것(bullish)이 이해되지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               사람들이 여전히 LLM에 대해 낙관적인 것(bullish)이 이해되지 않음

     ""I genuinely don't understand why some people are still bullish about LLMs.""

     * GPT, Grok, Gemini, Mistral 등 다양한 LLM을 매일 사용하고 있음
     * 정보 검색과 요약 시간 절약을 기대하고 사용하지만 여전히 출처, 인용구, 링크 등을 자주 조작함
     * 링크를 클릭하면 404 오류가 발생하거나, 인용된 문구를 검색해도 실제 존재하지 않음
     * 과학 논문을 인용하더라도 검색해보면 존재하지 않는 경우가 많음

일부 개선은 있었지만 신뢰성은 여전히 낮음

     * DeepSearch나 Chain of Thought 기법 사용으로 과거보다 정확도가 약간 개선됨
     * 개인적인 추정으로 GPT-4o의 DeepResearch가 현재 가장 신뢰 가능함
     * Grok은 요청해도 참고 링크를 잘 제공하지 않으며, 심지어 트윗 링크조차 제대로 연결하지 못함
     * Gemini는 상황이 더 나쁘며, 출처를 찾기보다는 사용자가 직접 검색하라는 지시만 제공함

간단한 계산이나 상수 검색은 유용하지만, 정확성은 여전히 문제

     * 단위 변환이나 물리 상수 등은 빠르게 제공하여 시간 절약 효과가 있음
     * 하지만 규모 추정 등 간단한 계산에서 자주 오류를 발생시킴
     * 이러한 작업에 1억 개 이상의 파라미터를 가진 LLM이 필요한지 의문임

문서 요약에서도 실망스러운 결과

     * PDF 문서를 업로드하여 요약을 요청했는데, 헤더에 2025년이라고 명시된 문서를 2023년 것으로 오인함
     * 이러한 오류는 ""지능""과는 거리가 먼 행동으로 느껴짐

지식 그래프도 해결책이 아님

     * 많은 사람들이 지식 그래프가 LLM의 문제를 해결할 것이라 기대하지만, 실제로는 불가능함
     * 논리적으로 일관된 문장이 현실과 전혀 관계없는 경우가 여전히 많음
     * 지식 그래프가 논리적 오류를 막는다 해도, 사실성과는 무관한 문장이 계속 생성될 수 있음

시장 과대평가에 대한 우려

     * 기업들이 LLM을 지속적으로 과대포장하고 있으며, 이는 위험 요소임
     * 완전히 새로운 형태의 AI 모델이 등장해 LLM을 능가할 경우, 기존 LLM 중심 기업들의 가치가 급격히 하락할 가능성 있음
     * 그날이 오면 주식 시장에 큰 충격이 예상됨

   저도 작년쯤엔 비슷한 생각이었는데, 발전 속도를 보면서 오히려 낙관적이 되었네요.

        Hacker News 의견

     * LLMs는 놀라운 기술로, 오랫동안 꿈꿔왔던 일을 가능하게 함. 잘못된 철자나 질문에도 불구하고 이해하고 대화하며, 멋진 이미지를 생성하고 코드 작성도 도와줌. 그러나 일부 사람들은 완벽한 초지능이 아니라고 불평함. 기술의 발전 속도는 놀라울 정도로 빠름. 일부는 ""20년 경력의 시니어 엔지니어처럼 코드를 작성하지 못한다""고 불평함
     * Claude를 주로 사용하는 경험은 매우 다름. LLMs가 잘하지 못할 것 같은 작업을 시도하지 않음. AI를 사용하는 사람들은 실패를 찾는 사람과 성공을 찾는 사람으로 나뉨. 간단한 스크립팅 작업에 LLMs는 거의 완벽함. AI가 작동하는 방식을 찾으면 강력한 도구가 될 수 있음
     * LLMs의 사용성은 여전히 부족함. 인용이나 출처 제공이 잘 되지 않음. 컴퓨터가 사실을 정확히 찾지 못한다는 것은 컴퓨터의 전통적인 강점에 반하는 것임
     * 많은 사람들이 LLMs를 잘못 사용하고 있음. 최근에는 언어 모델이 음성 전사에 가장 적합한지에 대한 토론이 많음. 10년 전에는 실시간 기계 전사가 없었지만, 지금은 가능하고 계속 발전 중임. AI 모델의 오류에도 불구하고, 기계 전사는 많은 상황에서 유용함
     * Sabine의 의견을 들어야 할지 고민됨. LLMs는 시퀀스 모델링과 예측 작업을 수행할 수 있음. 문제를 시퀀스 모델링으로 줄일 수 있다면, LLMs가 작업을 수행할 수 있음
     * LLMs에 대한 비판의 공통점은 완벽하지 않다는 것임. ChatGPT를 학술 연구에 자주 사용함. 참고 문헌을 조작할 때도 있지만, 중요한 연구 논문을 찾는 데 도움을 줌. 정확성 검증은 쉽고, 지식을 찾는 것은 어려움. 결과적으로 큰 긍정적 효과를 줌
     * 기술의 힘과 우리가 살고 있는 거품을 혼동하는 사람들이 많음. AI에 수백만 건의 요청을 보내고 필요한 것을 얻음. 기술은 발전 중이며, 비용도 변화하고 있음. AI가 할 수 없는 일을 할 수 있다고 생각하는 경향이 있음
     * Claude를 많이 사용하며, 건강 관련 질문에 대한 프로그램을 생성함. 복잡한 질문을 논리적으로 설명하고 분석을 수정할 수 있는 능력은 매우 가치 있음. 의사와 비교할 때, 책임은 사용자에게 있음
     * 많은 사람들이 ""불완전한"" 도구를 다루는 데 능숙하지 않음. LLM은 성공 확률이 100%가 아닌 도구로, 다른 접근이 필요함. 확률적 오라클을 상상해보면, 성공 확률에 따라 유용성이 달라짐
     * 사람들과 잘 지내지 못하는 친구들이 많지만, 나는 모두와 잘 지냄. AI도 마찬가지로, 완벽하지 않지만 놀라운 도구임. AI의 장점이 실수를 훨씬 능가함. AI와 사람을 다루는 방법을 배우는 것이 21세기에 필요한 가장 큰 기술임
"
"https://news.hada.io/topic?id=20051","내가 싫어했던 매니저가 나에게 가르쳐준 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 싫어했던 매니저가 나에게 가르쳐준 교훈

     * 지금은 엔지니어링 매니저가 되었지만 내가 소프트웨어 엔지니어로 일하던 시절, 복잡한 기능을 며칠간 작업해 PR를 올렸음
     * 피드백은 단호하고 냉정했음 “오버 엔지니어링임. 복잡함. 리팩토링하시오”는 간단한 문장이 전부였음
     * 칭찬 한마디 없이 비판만 받은 경험에 분노했으나, 그 매니저와의 일화는 단지 시작에 불과했음

감정을 배려하지 않는 리더 스타일

     * 이 매니저는 기존에 알고 있던 리더들과 달랐음
     * 손을 잡아주지도, 부드러운 말도 하지 않음
     * 다음과 같은 특징이 있었음
          + 설익은 아이디어는 바로 거절함
          + 복잡함을 위한 복잡함을 싫어함
          + 깔끔하고 유지 보수 가능한 효율적인 코드만 중요시함
     * 회고에서도 돌려 말하지 않고 문제를 직접 지적함
     * 처음에는 냉혹한 성격이라 생각했지만, 그 이면에는 다른 철학이 있었음

자존심을 흔든 피드백의 전환점

     * 스프린트 리뷰에서 자신 있는 기능을 시연했지만 매니저는 중간에 끊고 물음

     “이건 취약해. 부하 상황에선 어떻게 돼? 롤백 계획은?”
     * 대답을 제대로 하지 못하자 매니저는 말함:

     “지금 넌 코더처럼 생각하고 있어. 엔지니어처럼 생각해야 해”
     * 처음엔 화났지만, 결국 스스로의 코드 스타일이 회복력보다는 영리함에 치중했다는 걸 자각하게 됨

진짜 교훈: 그 매니저는 나를 개인적으로 공격한 게 아니었음

     * 사고방식에 큰 변화가 생김
          + “똑똑한” 코드 대신 읽기 쉬운 코드를 작성함
          + 실패 상황을 대비한 설계에 집중함
          + 본인을 위한 코드가 아니라 후속 개발자를 위한 코드를 작성함
     * 이후 그 매니저의 코드 리뷰는 거침없이 통과됨
     * 매니저가 달라진 게 아니라, 나 자신이 성장했기 때문임

내 리더십 스타일에 남긴 영향

     * 엔지니어링 매니저가 된 후 그 경험을 많이 떠올렸음
     * 사람들이 싫어하는 리더는 되고 싶지 않았지만, 부드럽기만 한 리더도 되고 싶지 않았음
     * 다음과 같은 방식으로 스타일을 정립함
          + 배경 설명이 있는 직설적인 피드백을 줌
          + 시스템적 사고를 강조함
          + 높은 기준은 유지하되 인간적인 피드백을 제공함
     * 엔지니어들은 도전받는 걸 원하지만 무시당하는 느낌은 싫어함

단호한 매니저가 필요할 때

     * 리더십에는 자존심, 마감, 압박이 얽혀 있어 혼란스러움
     * 단호한 매니저는 다음을 통해 이 혼란을 걷어냄
          + 기능이 아닌 확장성을 생각하게 함
          + 영리한 코드보다 유지 가능한 코드를 쓰게 함
          + 실패와 예외 상황을 미리 대비하게 함
     * 감정보다 코드의 생존 가능성을 더 중요하게 여김

단호한 매니저 아래에서 생존하고 성장하는 방법

     * 숨 막히는 리더 아래에 있다면 다음과 같이 대처할 수 있음
          + 개인적인 공격으로 받아들이지 말 것: 피드백은 코드에 대한 것
          + 피드백 이후 “왜?”를 물어볼 것: 대부분 단호한 리더는 호기심을 존중함
          + 실패 지점을 스스로 먼저 생각해 볼 것: 매니저처럼 사고하기 시작해야 함
     * 리더라면 다음을 실천해야 함
          + 높은 기준을 제시하되, 그 기준이 중요한 이유를 설명할 것
          + 모호한 피드백 대신 구체적으로 말할 것
          + 성공보다 성장을 축하할 것: 개발자가 매니저보다 먼저 문제를 포착했다면 칭찬할 것

거절된 Pull Request가 준 최고의 선물

     * 처음엔 자존심이 상했지만, 지금 돌아보면 그 거절된 PR은 인생 최고의 기회였음
     * 코딩을 개인 프로젝트가 아닌 시스템 구축으로 보게 되는 계기였음
     * 단호한 매니저는 기분을 좋게 해주진 않지만, 개발자로서 성장하게 함
     * 진정한 성장은 PR이 통과될 때가 아니라, 거절될 때 시작됨

   개발자라고 다 같은 개발자가 아님.

   ""시스템적 사고"" 라는 것이 뭔가 고민을 해봤는데, 글의 맥락에서는 무언가
   어플리케이션의 동작 관점에서의 사고라고 느껴지네요. 근데 정말 중요한 관점이라고 생각됩니다.

   정말 좋은 글입니다. 이건 PR 올리기 전에도 올린 후에도 계속 봐야겠네요.

   진짜 좋은글..

   좋게좋게 가다가 코드베이스 엉망되는걸 봐가지고 공감이 많이 되네요. 매니저 역량의 중요성이 큽니다 진짜

   공감해요

   글의 함의는 좋은에 그 매니저가 뛰어났다기보다는 본인이 잘 한 것으로 느껴지네요. (저자가 어떤 피드백을 받아도 성장하는 유형의 사람 아닐까)

   (맥락이 부족한) 부정적 피드백을 받았을 때 행동이 기대와 반대로 변화할 가능성이 높다는 연구를 본 기억이 있습니다.

   개떡같이 던져도 찰떡같이 받는게 이런 것이지 않을까... ㅎㅎ

   작업물에 대한 피드백은 개인 비난이 아닌것을 깨닳아야합니다.
   매니저가 더 좋은 사람이였다면 더 좋을 수도 있지만 회사는 학교가 아니기 때문에.. 우린 pro이기 때문에.. 피드백에 대해 알아서 학습해야합니다.
   모르면 모른다고 말 할 수 있는 용기도 필요합니다.

   저와는 꽤 다른 관점에 계신 듯합니다. 제 경력이 얕아서인지 명료하지 않은 피드백, 지칭어가 모호한 피드백은 도리어 역효과를 낳는 것만을 많이 봐서요...

   맞춤법이 잘못 되었습니다.
   ""비난이 아닌것을 깨닳아야합니다."" -> ""비난이 아닌 것을 깨달아야 합니다""라고 쓰셔야 합니다.

   개인적인 비난이 아닌 걸 아실테지만, 보자마자 제 지적에 화가 나셨을거라고 생각합니다. 누구는 조삼모사라고 하지만, 조삼모사와 조사모삼을 다르게 받아 드리는 게 사람인거 같긴 하더라고요.

   ps. 저도 맞춤법 틀리신거 몰랐는데, 예시를 찾고 싶어서 맞춤법 검사기에 넣고 나서야 잘못 쓰신 걸 찾았습니다.

   맞춤법 틀린거 고쳐주면 고맙습니다 몰랐네요 하면 될 문제지, 화를 낼 소재는 아닌 듯 합니다. 자신이 느꼈던 대로 남들도 느낄 거라고 생각하는 것은 위험한 일반화라고 생각합니다. 그리고 ""받아 드리는 게""가 아니고 ""받아들이는 게"" 입니다.

   스트레스 받는일도 해결할 수 있는 것이 프로라고 생각합니다.
   스트레스 받게 하는걸 정당화 하려는건 아닙니다. 프로로 일을 하다보면 화나는 일도 생길텐데, 그걸 슬기롭게 해결하는것이 프로라고 생각해요.

   저는 맞춤법 전문가가 아니네요. 커뮤는 회사도 아니구요.

   댓글에 정말 동의합니다. 받아들이는 사람의 실력과 마음가짐이 뛰어났던 것이라고 생각합니다. 저 매니저는 철학은 뚜렷했으나 자기 철학을 팀에 전파하기 위해 좋은 접근을 할 줄은 몰랐다고 생각합니다.

   개인적인 공격이 되지 않기 위해서는 라포 형성을 잘 해놔야 하는 거 같습니다. (특히 한국 사회의 맥락에서는요)

   저는 개인적으로 주어 사용에 유의합니다. ""이 코드가"" 오버엔지니어링 인거지 ""상대방이"" 잘못된 것이 아니니까요.

   전문가 머릿속에서는 대체 무슨 일이 벌어지고 있을까글이 생각나네요. “오버 엔지니어링임. 복잡함. 리팩토링하시오”, “이건 취약해. 부하 상황에선 어떻게 돼? 롤백 계획은?”라는 리뷰를 받았을 때 왜 그렇게 생각했는지, 어떤 문제를 예상하는지, 어떤 방향의 개선을 생각하는지 물어보는 것도 좋겠습니다. (글쓴이가 그렇게 안했다기 보단 저런 상황에서 어떻게 하면 더 많은 효용을 얻을 수 있었을까 생각이 들어서요)

   감정을 배려하지 않는 직설적인 매니저와 라포를 유지하고 다정한 매니저가 있다면 어떤 종류의 매니저가 피드백으로 팀원의 성장을 견인할 수 있을까? 전 글을 읽으면서 이런 의문이 생겼습니다.

   전 확률 게임이라고 생각해요. 극악한 확률을 뚫고 성장하는 사람은 어디에나 있습니다. 매니저는 이런 사람은 제외하고 전체 확률을 높이는 걸 노력해야 한다고 생각해요. 자신 나름대로 확률을 높이는 태도라고 믿고 행동한다는 매니저는 존중 받을만 하다고 생각해요. 그저 그래도 되니깐 평소 해왔던 방식을 유지하는 것만 아니면 됩니다.

   이런 종류의 피드백은 성격에 따라서 문화권에 따라서 개인차에 따라서, 들었을 때 기분이 나쁠 수도 있고 화가 날 수도 있다고 생각합니다. 그러나 기본적으로 ""저 자가 나를 일부러 괴롭히는 것이 아니다""라고 생각하고 접근하는 쪽이 멘탈 차원에서도, 성장 관점에서도 좋은 것 같습니다. 그런 상황이 주어졌을 때 이 글을 떠올리면서 ""어쩌면 이 매니저도?""라고 생각해볼 수 있을 것 같아요. 좋은 글이네요.

   kind and direct 를 많이들 이야기하는데, 사실 kind 하기보다 direct 하기가 훨씬 어렵죠.

   전체 맥락을 주진 않더라도 팔로워가 따라야 할 맥락을 전달해주지 못하는 리더는 가치가 없습니다
   본인의 역량이 뛰어난걸 다른 이들에게 돌리는 뛰어난 팔로워가 쓴 글로 보이네요
   리더가 맥락을 전달해주지 않는다면 그 리더는 딱히 필요가 없습니다
   시급히 교체해야함

   듣기 좋은 말이, 좋은 말인 것은 아니죠. 저도 ""Nasty Code"" 라는 단어 두개로 들어있던 코드리뷰가 인생에서 가장 도움이 되었다고 생각합니다.
"
"https://news.hada.io/topic?id=20077","곰팡이가 아닌 Calcium Lactate (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     곰팡이가 아닌 Calcium Lactate (2018)

치즈에 자라는 하얀 물질

     * 칼슘 락테이트: 치즈에 하얀 물질이 보일 때, 이는 곰팡이가 아닌 칼슘 락테이트일 수 있음. 이는 치즈가 오래 숙성되었음을 나타내며, 맛이 깊어졌음을 의미함.
     * 치즈 결정: 치즈에 있는 결정은 두 가지 종류로 나뉨. 하나는 미네랄(소금) 유화로 인해 생기는 결정이고, 다른 하나는 단백질 분해로 인해 생기는 결정임. 후자는 치즈의 풍미를 나타내는 ""풍미 결정""으로 불리며, 치즈의 맛에는 영향을 주지 않지만, 씹을 때의 식감과 소리에 영향을 줌.
     * 무기 결정: 미네랄로 형성된 결정으로, 치즈 제조 과정에서 소금이 녹지 않고 분산되면서 생김. 예를 들어, 칼슘 인산염 결정은 블루미-린드 치즈의 껍질 아래에서 발견되며, 치즈가 숙성되면서 부드러워지도록 도움을 줌.
     * 유기 결정: 아미노산 분해로 인해 형성된 결정으로, 치즈가 숙성되면서 단백질 구조가 수축하고 늘어나면서 생김. 예를 들어, 타이로신 결정은 숙성된 고다 치즈에 바삭한 식감을 줌.
     * 칼슘 락테이트와 아미노산 결정: 칼슘 락테이트는 주로 체다 치즈의 외부에서 발견되며, 타이로신이나 류신 결정은 치즈 내부에서 발견됨. 타이로신 결정은 단단하고 바삭한 반면, 칼슘 락테이트는 부드럽고 가루처럼 느껴질 수 있음.
     * 치즈의 나이와 결정: 결정은 치즈의 나이를 나타내며, 숙성된 치즈가 맛있을 가능성이 높음을 의미함. 하얀 결정이 보이면, 이는 잘 숙성된 치즈임을 나타내며, 맛있을 가능성이 높음.
     * 결론: 치즈에 하얀 물질이 보이면, 곰팡이가 아닌 결정일 수 있음. 부드럽다면 곰팡이일 수 있지만, 단단하다면 결정일 가능성이 높음. 이는 잘 숙성된 치즈를 의미하며, 맛있을 가능성이 높음.

        Hacker News 의견

     * 스위스에서 프로젝트로 몇 달을 보냈을 때, 슈퍼마켓에 ""치즈 왕국""이라고 부르는 부스가 있었음
          + 치즈 왕국은 기후 조절이 된 공간으로, 치즈만 있는 곳이며, 그곳의 직원은 고객이 다시 올 것을 알고 기쁘게 도와줌
          + 그곳의 제품에는 결정체가 있어서 결국 다시 방문하게 됨
     * 좋은 고다 치즈의 바삭함을 항상 좋아했으며, 그것을 일으키는 티로신 결정에 대한 자세한 내용을 읽는 것이 재미있었음
     * 치즈 제조업체들이 실제 품질 없이 품질을 나타내기 위해 바삭한 결정을 추가하기 시작하는 데 얼마나 걸릴지 궁금함
     * 네덜란드의 고다를 방문하여 배운 것. 지금까지 먹어본 최고의 치즈였음
     * Costco에서 판매하는 Coastal 체다 치즈에는 이런 종류의 결정이 많이 있음
     * 치즈 결정은 우마미임. 많은 결정이 글루탐산 결정임. 다른 아미노산 결정도 비슷한 맛 프로파일을 가지고 있는지 궁금함
     * 훌륭한 책에 대한 필수 언급: Michael H. Tunick의 ""The Science of Cheese""
          + 이 책은 치즈에 대한 심도 있는 과학적 소개이며, 저자의 열정을 느낄 수 있는 훌륭한 읽을거리임
     * 과거에 흰 반점 때문에 완벽한 체다 치즈를 버린 것에 대해 스스로에게 약간 화가 남
     * 슈퍼마켓에서 몇 파운드의 체다 치즈를 사서 여분의 냉장고에 1년 동안 보관하고, 작년 11월 추수감사절에 구운 맥앤치즈를 위해 숙성된 체다 치즈를 준비한 것이 자랑스러웠음
     * 일반적으로 칼슘 락테이트는 치즈의 외부(보통 체다 치즈)에 있으며, 티로신 또는 류신 결정은 내부에 있음
          + 칼슘 락테이트는 치즈 내부에서도 형성될 수 있지만, 티로신과 류신 결정은 외부에 형성될 수 없음
"
"https://news.hada.io/topic?id=20032","Microsoft, Windows 11 설치시에 로컬 계정 생성을 우회하던 구멍 차단 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Microsoft, Windows 11 설치시에 로컬 계정 생성을 우회하던 구멍 차단 예정

     * Microsoft는 Windows 11 설치 시 인터넷 연결 및 Microsoft 계정 로그인을 우회할 수 있는 잘 알려진 방법을 차단할 예정임
          + 즉, 윈도 11 설치시에 인터넷 연결과 Microsoft 계정이 필수가 됨
     * 최신 Windows 11 Insider Preview 빌드에서는 bypassnro.cmd 스크립트가 제거
     * 이 스크립트는 새로운 PC 설정 시 로컬 계정 사용 및 오프라인 설치를 가능하게 해주는 방식으로, 사용자가 Microsoft 계정 없이 설치를 마칠 수 있었음
     * 이 방식은 특히 기업용 장비 세팅이나 가족용 세컨드 PC 구성, 혹은 Microsoft 계정 연결을 원하지 않는 사용자에게 유용했음

Microsoft의 변경 이유 및 공식 입장

     * Microsoft는 다음과 같이 밝힘:

     보안을 강화하고 Windows 11의 사용자 경험을 향상하기 위해 bypassnro.cmd 스크립트를 제거함. 이 변경은 모든 사용자가 인터넷 연결 및 Microsoft 계정으로 설치를 끝마치도록 보장함
     * 현재 Insider 빌드에서 이미 비활성화된 상태이며, 조만간 정식 버전에도 적용될 가능성이 높음

여전히 가능한 우회 방법과 그 한계

     * 현재로선 설치 초기 단계에서 Shift + F10으로 명령 프롬프트를 열어 다음 명령어를 실행하면 우회가 가능함
          + reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE /v BypassNRO /t REG_DWORD /d 1 /f && shutdown /r /t 0
     * 하지만 이 방법도 Microsoft가 곧 차단할 가능성이 있음
     * 다른 우회 방법으로는 unattended.xml 파일을 활용해 OOBE를 자동화하는 방식이 있음
          + 다만 이 방법은 일반 사용자보다는 IT 부서에서 여러 대를 자동 세팅할 때 더 적합함

Windows 11 전환을 강제하려는 Microsoft의 최근 정책 변화

     * Microsoft는 Windows 10 지원 종료(2025년 10월 예정)를 앞두고 Windows 11 전환을 강하게 유도 중임
     * Windows 11은 TPM 2.0을 요구하며, 구형 PC에 설치하는 것도 점점 어려워지고 있음
     * Windows 10에서는 Windows 11로 업그레이드하라는 전면 광고가 지속적으로 표시되고 있음
     * 이전에는 Windows 7/8 제품 키로도 Windows 11 설치가 가능했지만, 이 방법도 2023년 10월부터 차단됨

   나중에는 이미 생성된 로컬 계정에 대해서도 조치를 할 수도 있겠네요;; 좀 그지 같은 정책이 될 것 같네요;;
   신입 사원 들어오면 보통 로컬 계정으로 미리 셋업 해주는 편인데 이제 이게 안되겠군요...

   한국처럼 네트워크 커버리지가 좋은 지역에 살면 크게 와닿지 않을 수 있지만, 산간벽지 도서 지역에 살면, 이런 제한이 있는 OS는 거를 수 밖에 없겠네요.

   또는 산업용이라 굳이 상시 연결 될 필요가 없거나, 해서는 안되는 경우도 있을 수 있구요.

   솔직히 onedrive안에 사진 문서 동기화되는거 너무 불편함. 그래서 일부러 꼼수 썼던건데.

   공공기관 폐쇄망 사업시 포맷된 컴퓨터와 개발도구, OS 설치파일만 반입해서 진행하는 경우도 있는데 인터넷 필수 설치가 되면 OS에서 윈도우 대신 다른걸 선택해야겠네요... 물론 대부분의 경우엔 인터넷 잠깐이라도 연결해서 셋팅하고 쓰는건 문제 없을테니 점유율에 큰 차이는 없을꺼 같네요

   왜일까요..

        Hacker News 의견

     * Microsoft가 Windows 11의 보안과 사용자 경험을 개선하기 위해 bypassnro.cmd 스크립트를 제거함
          + 한 사용자는 이 변경을 비판하며, 자신의 Gigabyte AMD 메인보드와 Windows 11이 이더넷 NIC나 온보드 와이파이를 인식하지 못함
          + 드라이버 설치도 불가능하여 Fedora Kinoite를 설치했으며, 모든 게임이 잘 작동했음
          + Windows 파티션 설치를 고민했으나, 이런 문제로 인해 재고려하게 됨
     * Windows 설치 과정이 매우 복잡함
          + Microsoft 계정이 필요하며, 데이터 공유/판매에 관한 EULA에 동의해야 함
          + 광고 설정도 해야 함
          + 일상적으로 사용하기에는 너무 복잡함
     * 대부분의 사용자가 알지 못하거나 신경 쓰지 않을 우회 방법을 제거한 이유에 의문을 가짐
          + 시스템 설정에 신경 쓰는 소수의 사용자에게는 필수적임
          + 좋은 비즈니스 결정이 아님
     * 한 사용자는 Windows 11을 설치하면서 온라인 Microsoft 계정을 피하고 로컬 계정을 생성함
          + 설치 과정에서 이름을 입력하라는 요청을 받고 ""Firstname Lastname""을 입력했더니, $HOME 디렉토리에 공백이 생김
          + ESRI의 ArcGIS Pro를 설치하려 했으나, 파일 경로에 공백이 있으면 작동하지 않음
     * 인터넷 연결이 없으면 어떻게 해야 하는지에 대한 의문을 제기함
          + 인터넷에 연결할 수 있을 때까지 장치가 쓸모없게 됨
     * Microsoft가 Windows에 대한 구독 서비스를 시작할 것이라는 예측을 함
     * 보안이 강화되려면 인터넷 연결이 필요함
          + Microsoft가 솔직해지기를 바람
     * Windows 11 시스템을 활성화할 때 온라인 계정 함정에서 빠져나오기 어려웠음
          + 와이파이 자격 증명을 삭제하고 로컬 계정을 생성함
          + 온라인 계정으로 활성화한 후 로컬 사용자를 생성할 수 있는지에 대한 질문을 제기함
     * Microsoft 계정 생성 트릭에 대한 불만
          + Skype를 중단하면서 Teams에 Skype 자격 증명으로 로그인할 수 있다고 했으나, 실제로는 새로운 이메일 주소를 입력해야 함
          + 결과적으로 또 다른 Microsoft 계정이 생성됨
          + 이후 Skype 자격 증명은 무효화됨

   윈도우 지우고 리눅스 데스크탑 실사용 3년차인 학생입니다. hwp 문서 편집할 일만 없으면 전부 할 수 있습니다. 어제도 게임하고 잤습니다. 심지어 hwpx 읽기도 잘 됩니다. 진지하게 고려해보시길 추천드립니다. 생각보다 안불편합니다.

   아치 4년차 컴공 대학생인데 폴라리스로 hwp 편집 충분했습니다

   리눅스 어떤걸로 하시나요

   저도 openSUSE Tumbleweed를 쓰고 있는데 편하게 잘 쓰고 있습니다만 일반인들은 어려울 것 같아요.

   https://github.com/ebandal/H2Orestart
   해당 프로그램 사용하면 편집도 가능합니다 (hwp, hwpx 저장은 불가)
   최근에 onlyoffice에도 hwp/hwpx 지원 추가 됐습니다.
"
"https://news.hada.io/topic?id=19989","구글, 다음주부터 안드로이드 OS 완전 비공개로 개발 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글, 다음주부터 안드로이드 OS 완전 비공개로 개발 시작

     * Google은 앞으로 Android 운영체제를 내부 브랜치에서만 개발할 예정임
     * 지금까지는 Android Open Source Project(AOSP)를 통해 개발 상황이 공개되어 있었음
     * 다음 주부터 Google은 Android 개발을 전면적으로 비공개 내부 브랜치에서 진행

현재까지의 개발 방식과의 차이점

     * 기존에는 Bluetooth, 커널 등 일부 핵심 구성 요소만 내부 브랜치에서 개발되었고, 나머지는 AOSP에 공개되었음
     * 최근까지도 AOSP 버전은 Google 내부 빌드 수준과 차이가 있었음
     * 이번 변화로 전체 개발 프로세스가 내부에서만 이루어지게 됨

변화의 이유 및 영향

     * 개발 속도에는 변화가 없으며, 오히려 브랜치 병합 시 충돌을 줄이고 프로세스를 간소화할 수 있음
     * Android를 폐쇄형 플랫폼으로 바꾸는 것이 아니라, 소스 코드는 여전히 AOSP를 통해 주기적으로 공개될 예정임
     * 새로운 Android 버전이나 유지보수 릴리스가 완료된 시점에만 AOSP에 반영됨

사용자 및 개발자에 대한 영향

     * 일반 사용자에게는 이 변화가 체감되지 않을 가능성이 높음
     * 앱 개발자들도 실질적인 영향은 거의 없을 것으로 예상됨
     * 다만 AOSP 커밋을 통해 드러나는 일부 정보(Pixel 10 등의 미공개 정보)는 앞으로 보기 어려워질 수 있음
     * 이런 정보들이 과도하게 해석되는 경우가 많았기 때문에 오히려 혼란을 줄일 수 있음

향후 계획

     * Google은 이번 변화에 대한 공식 발표를 이번 주 내로 진행할 예정임
     * 변화 적용은 다음 주부터 시작됨

   아무래도 새 커밋들 감시 하면서 새 기능 예측하는 블로그거들이 아쉽게 되겠네요.

        Hacker News 의견

     * Open Solaris와 유사한 상황을 떠올리게 함
          + Open Solaris의 경우, 코드가 더 이상 공개되지 않았음
          + Android는 저작권이 없는 copyleft 코드만 최소한으로 배포할 가능성이 있음
          + 이러한 코드가 폐쇄형 대안으로 대체될 때까지
     * 주주를 위해 폐쇄형 소스로 전환하여 수익을 창출하는 것이 그들의 임무임
          + 이미 오픈소스로 시장 점유율을 확보했으므로, 이제는 독점적으로 전환할 수 있음
          + Microsoft처럼 운영체제에 대해 요금을 부과할 수 있음
          + 수백만, 수십억 대의 휴대폰에서 수익을 창출할 수 있음
          + (이 의견에 동의하지 않음)
     * 유출 방지를 위한 조치로 판매될 수 있지만, 소스를 폐쇄하기 위한 첫 단계일 가능성이 높음
          + EU의 오픈 소스 수익화 전략 문제로 인해
          + 이미 많은 기능이 Google Play Services로 이전되었고, 오픈 소스 앱이 중단됨
     * 헤드라인이 오해의 소지가 있음
          + 소스는 여전히 공개될 예정임
          + 릴리스 전 작업이 비공개로 진행될 것임
          + 중간 커밋은 잡음일 가능성이 높음
     * The Verge와 9to5가 원본 소스로 인용함
          + Android Authority 링크
     * 오픈 플랫폼이라는 가식을 버린 것이 기쁨
          + 진정한 오픈 모바일 플랫폼이 생길 공간이 생길 수 있음
          + Apple보다 더 나은 프라이버시를 존중할 수 있음
          + Android는 사용하기에 미완성된 느낌이었음
     * 이전에 본 적이 있는 상황임
          + 라이선스가 변경되고, 기능이 잠기거나 제거됨
          + 개발이 점차 독점적으로 변함
          + Jolla와 Sailfish OS에 투자하고 이주할 때임
     * 많은 사람들이 Google이 웹 브라우저 엔진을 독점하도록 허용하고 싶어함
     * Apple이 하는 대로 하면 DOJ에 의해 소송당할 가능성이 적음
     * Google이 Android를 폐쇄형 플랫폼으로 만드는 것이 아님
          + 오픈 소스 측면은 새로운 브랜치가 AOSP에 공개될 때만 공개됨
          + 새로운 버전이나 유지보수 릴리스가 완료될 때 포함됨
          + 대기업의 말은 의미가 없고, 행동이 중요함
          + 내부 브랜치와 AOSP가 기능적으로 동등할지 확신할 수 없음
"
"https://news.hada.io/topic?id=20015","카기에서 가장 많이 홍보되고 차단된 도메인 목록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       카기에서 가장 많이 홍보되고 차단된 도메인 목록

     * Kagi Search 통계
          + 43,403명의 회원이 새로운 검색의 경계를 개척하고 있음
          + 4,547개의 가족이 더 인간적인 웹을 즐기고 있음
          + 126개의 팀이 정보를 더 빠르고 스마트하게 찾고 있음
          + 지난 하루 동안 845,200개의 쿼리가 수행됨
          + 지난 하루 동안 11,969개의 어시스턴트 스레드가 생성됨
          + 1,854명의 Orion+ 회원이 있음
     * 도메인 인사이트
          + Kagi에서 가장 많이 홍보되거나 차단된 도메인
          + 사용자들이 개인화 설정을 만든 도메인의 상위 목록을 볼 수 있음
          + 최소 20명의 사용자가 사용한 도메인에 대한 집계 순위가 리더보드에 표시됨
     * 차단된 도메인
          + pinterest.com, pinterest.co.uk, pinterest.de 등 여러 국가의 Pinterest 도메인
          + foxnews.com, tiktok.com, breitbart.com, facebook.com 등 다양한 뉴스 및 소셜 미디어 사이트
     * 왜 검색에 비용을 지불해야 하는가?
          + Kagi는 더 인간적인 웹 경험을 제공하기 위해 노력하고 있음
          + 다양한 플랜과 지원을 통해 사용자에게 맞춤형 검색 경험을 제공함

        Hacker News 의견

     * 내가 이해한 바로는 소프트웨어 개발자가 아닌 사람들은 Kagi를 거의 사용하지 않음
          + 상위 10개 ""raised"" 사이트 중 8개가 소프트웨어 개발 사이트이며, #6이 MDN인 것을 보면 웹 개발자들이 Kagi를 주로 사용하는 것 같음
          + 내가 잘못된 결론을 내린 것인지 궁금함. Kagi의 미래가 불투명한 것인지, 일반 인터넷 사용자를 더 많이 끌어들일 방법이 있는지 궁금함
     * Pinterest가 상위 7개의 차단된 결과를 모두 소유하고 있음. 그들이 그럴 자격이 있다고 생각함
          + Google이 왜 그들이 Google 이미지 검색 결과를 망치도록 놔두었는지 이해할 수 없었음
     * wiki.archlinux.org가 상위 고정 사이트인 것이 마음에 듦
          + 나는 Debian을 주로 사용하지만, Arch Linux 위키가 Debian에서 무언가를 하는 방법에 대한 비배포 특정 질문에 자주 답을 해줌
          + 특히 Xmonad를 데스크톱 환경 없이 사용할 때 유용함
     * 이미지 검색에서도 사이트를 쉽게 차단할 수 있다면 alamy.com과 dreamstime.com도 가장 많이 차단된 도메인 경쟁에 참여할 것 같음
     * 로그인한 사용자와 일반 사용자에게 다른 뷰를 제공함
          + 다른 비로그인 브라우저(또는 시크릿 모드)에서 다른 뷰를 제공한다는 것을 깨달음
          + 회사의 티셔츠를 입지 않은 지 꽤 되었음. 최근 Kagi를 홍보하려고 그들이 보낸 티셔츠를 몇몇 모임과 기술 인력이 많은 사무실에서 입었지만 아무도 알아보지 못했음
          + 몇몇 사람들은 로고가 골프 그룹/커뮤니티의 것이라고 생각했음
          + 개인적으로는 '1999년에 Google 티셔츠를 입는 것'과 비슷한 것을 자랑스럽게 홍보한다고 생각했음. 이번에는 ""웹을 인간화하자""라는 느낌임
     * w3schools.com이 상위에 있는 것이 놀랍지 않음
          + 최근에는 접하지 않았지만, 코딩 문서를 찾을 때 자주 나타났었음. 거의 항상 쓸모가 없었음
     * Google이 검색을 개선하기 위해 내릴 수 있는 단일 결정은 Pinterest에 우선권을 주지 않는 것임
          + 대부분의 사람들이 Pinterest를 싫어함 (사이트 자체가 아니라 Google 이미지 검색 결과에서의 홍보 방식 때문임)
     * Kagi에 가입했을 때, 내 차단/낮춤/올림/고정 목록이 이 집계된 목록과 매우 높은 상관관계를 가졌음
          + Kagi 고객에게 검색 엔진 순위가 docs.python.org와 cppreference.com 같은 유용한 사이트가 아닌 다른 것을 최적화한다고 생각하게 됨
     * alternativeto.net이 가장 논란이 많은 상을 받은 것 같음. 상위 부스트 목록에 있지만 많이 차단/강등되었음
          + NYT가 그 뒤를 이음
     * healthline이 차단/낮춤 목록에서 왜 그렇게 높은지 궁금함 (Pinterest 제외)
          + 개인적으로 그들이 주장에 출처를 링크하는 것이 현재 웹에서 매우 드물기 때문에 좋다고 생각함. 어느 정도 신뢰할 수 있는 정보 출처라고 생각함. 내가 틀린 것인지 궁금함
"
"https://news.hada.io/topic?id=20026","Gemini 2.5 Pro는 코딩 성능이 최고 수준(SOTA)인 모델임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Gemini 2.5 Pro는 코딩 성능이 최고 수준(SOTA)인 모델임

     * Google이 출시한 Gemini 2.5 Pro는 GPT-4o의 화려한 이미지 생성 기능 출시로 주목을 덜 받았지만, 실제로는 중요한 발전임
     * 코드 작성 성능이 매우 뛰어나고, 최대 100만 토큰의 컨텍스트 길이로 전체 코드베이스를 처리할 수 있는 성능을 제공
     * 사용자 피드백도 매우 긍정적이며, 실제 코딩 테스트에서 우수한 결과를 보여줌
     * 반면 복잡한 추론 문제에서는 Grok 3나 Claude 3.7 Sonnet보다 부족함

주요 개선 사항

     * Gemini 2.5 Pro는 Gemini 2.0 Flash 기반 구조에서 학습 후 최적화와 파라미터 확장을 통해 성능 향상을 이룸
     * 최대 1,000,000 컨텍스트 길이 지원으로 전체 코드베이스를 입력해도 우수한 결과 도출 가능
     * 다국어 이해력이 강화되어, LMSYS 순위에서 스페인어 처리로 기록 경신

벤치마크 성능

     * LMSYS, Livebench, GPQA, AIME, SWEbench verified 등 주요 벤치마크에서 우수한 성과 달성
     * ARC-AGI에서는 Deepseek r1과 비슷하고 Claude 3.7보다 낮음
     * WeirdML 벤치마크 1위 기록, 기이한 ML 문제에 대해 작동하는 PyTorch 코드 작성 능력 탁월
     * Aider Polyglot 벤치마크에서도 선두 기록

실제 사용 사례

     * Wordle 문제, 셰이더 생성, 비행 시뮬레이터, 루빅스 큐브, 좀비 게임, 아케이드 게임 생성 등 다양한 예제에서 탁월한 결과
     * 특히 게임 생성 작업에서는 세련되고 높은 수준의 실행 품질 제공

Gemini 2.5 Pro vs Claude 3.7 vs Grok 3 - 코딩 능력 비교

  1. 3D 큐브 속 공 튕기기 (Three.js)

     * Gemini 2.5: 부드럽고 실제와 유사한 움직임으로 가장 우수한 결과
     * Grok 3: 초반에는 괜찮았으나 시간이 지나면서 공이 붙어서 제대로 작동 안함
     * Claude 3.7: 설정은 훌륭했으나 공이 멈추고 상호작용 부족

  2. Minecraft 스타일 게임 (Pygame)

     * Gemini 2.5: 부드럽고 세련된 게임 플레이, 모든 요구사항 충족
     * Claude 3.7: 시각 효과와 UI 요소 포함된 고급 수준의 결과
     * Grok 3: 기본적인 작동은 하나 움직임이나 배치가 부드럽지 못함

  3. Task Tracker 웹앱

     * Gemini 2.5: 완성도 높은 UI와 자연스러운 흐름
     * Claude 3.7: 깔끔하고 시각적으로 매력적임
     * Grok 3: 요구 사항은 충족했지만 다른 모델보다 완성도 낮음

복잡한 추론 능력

  1. 인지 편향 테스트 (의사와 아들 문제)

     * Claude 3.7, Grok 3 모두 문제를 정확히 해결함
     * Gemini 2.5는 약간의 혼란을 보임

  2. 틱택토 최적 수 찾기

     * 세 모델 모두 정답을 도출했으나, Grok 3가 가장 명확한 분석 제공
     * 하지만 완전한 모든 정답 포인트(3번, 5번)을 찾은 모델은 없음

  3. 복잡한 혈연 관계 문제

     * Claude 3.7이 12명이라는 정답 정확히 도출
     * Gemini 2.5, Grok 3는 15명으로 오답이나 논리는 이해 가능함

수학 능력

  1. 무한 수열의 GCD 구하기

     * Gemini 2.5만 정답 도출
     * Grok 3는 틀림

  2. 모음 수 기반 수식 평가

     * Claude 3.7이 유일하게 정답에 도달
     * Grok 3는 문맥을 이해하지 못함
     * Gemini 2.5는 불확실

    수학 능력 요약

     * 순수 수학 문제는 Gemini 2.5 Pro가 강함
     * 추론이 섞인 수학 문제에서는 Claude 3.7 Sonnet이 더 균형 잡힘
     * Grok 3는 가장 낮은 수학 성능

결론

     * Google의 Gemini 2.5 Pro는 코드 작성에 특화된 뛰어난 모델로, 실제 사용 사례에서도 탁월한 성과 보임
     * 복잡한 추론과 사고력 문제에서는 경쟁 모델에 비해 약간 부족함
     * 수학 문제는 강하지만 논리적 추론이 포함될 경우 성능 저하 발생
     * 다국어 처리, 대용량 입력 처리에서 큰 장점 보유

     * 코딩 성능: 매우 우수함
     * 추론 능력: Claude 3.7, Grok 3 대비 약함
     * 수학 능력: 순수 계산 능력은 우수함
"
"https://news.hada.io/topic?id=20048","Paged Out #6 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Paged Out #6 [pdf]

     * Paged Out! 은 프로그래밍과 해킹을 주제로 한 무료 기술 매거진임
     * 매 이슈는 ""글 한개 = 1 페이지""라는 독특한 형식을 취함

다루는 주제

     * 프로그래밍 트릭
     * 해킹 및 보안 해킹
     * 레트로 컴퓨터와 최신 컴퓨터
     * 전자공학
     * 데모신(demoscene)
     * 이와 유사한 다양한 기술 분야

커뮤니티 중심의 비영리 프로젝트

     * 커뮤니티가 만들고 커뮤니티를 위해 존재하는 잡지임
     * 비영리로 운영되며, 향후 자생 가능한 구조를 목표로 함
     * 모든 이슈는 항상 무료로 다운로드, 공유, 인쇄 가능함
"
"https://news.hada.io/topic?id=20066","ttyd - 웹에서 터미널을 공유하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ttyd - 웹에서 터미널을 공유하는 도구

     * 터미널의 내용을 웹을 통해 실시간으로 공유할 수 있게 해주는 간단한 커맨드라인 도구
     * 브라우저를 통해 서버의 터미널에 접근하거나 특정 명령을 실행할 수 있어, 원격 지원, 프레젠테이션, 교육 등 다양한 용도로 활용 가능
     * 고성능 네트워킹: Libwebsockets와 libuv 기반의 빠른 처리 성능
     * 완전한 웹 터미널 지원: Xterm.js 기반, CJK(중국어, 일본어, 한국어) 및 IME 지원 포함
     * ZMODEM 파일 전송 지원: 그래픽 기반 ZMODEM 업로드/다운로드 지원 (lrzsz 사용)
     * SSL 보안 통신 지원: OpenSSL을 통한 HTTPS 지원
     * 모든 명령어 실행 가능: 특정 명령어를 웹 터미널에서 직접 실행 가능
     * 기본 인증 기능: 사용자/비밀번호 인증 가능
     * 다양한 플랫폼 지원: macOS, Linux, BSD 계열, OpenWrt, Windows 등
"
"https://news.hada.io/topic?id=20044","어린 시절 집 컴퓨터 방을 위한 데스크톱 Blue95","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     어린 시절 집 컴퓨터 방을 위한 데스크톱 Blue95

     * blue95: 어린 시절 집 컴퓨터 방의 데스크톱
          + Blue95는 과거 컴퓨팅 시대를 떠올리게 하는 현대적이고 가벼운 데스크톱 환경임.
          + Fedora Atomic Xfce와 Chicago95 테마를 기반으로 함.
     * 사용해보기
          + Live CD는 새로운 기능으로, 현재 테스트 중임.
          + Blue95 라이브 환경으로 부팅할 수 있는 Live ISO를 생성 중임.
          + 설치 없이 테스트 가능하며, 포함된 설치 프로그램은 알파 버전이므로 다른 방법으로 설치하는 것을 권장함.
     * 설치
          + ISO에서 설치
               o 설치 프로그램 ISO에 문제가 있어, 다른 Fedora Atomic 데스크톱에서 리베이스하는 것이 권장됨.
               o Xfce 기반 이미지인 winblues/vauxite에서 설치 후, 직접 이 이미지로 리베이스 가능함.
          + 다른 Atomic 데스크톱에서 설치
               o 현재 Atomic 데스크톱을 사용 중이라면, 최신 blue95 이미지로 리베이스 가능함.
               o 먼저 서명되지 않은 이미지로 리베이스하여 적절한 서명 키와 정책을 설치한 후, 서명된 이미지로 리베이스하는 것이 권장됨.
               o 리베이스 후 새로운 사용자 생성 권장.
     * 프로젝트 목표
          + 기본 시스템 구성 요소와 업데이트 일정에서 상위 Fedora Xfce와 일치시키는 것.
          + Universal Blue에서 조정 사항을 가져와 더 사용하기 쉬운 환경 제공.
          + 과거 컴퓨팅 시대에 뿌리를 둔 미적 감각 제공.
          + 비목표: 수십 년 된 운영 체제의 디자인 요소를 충실히 재현하는 것. 사용성과 정확한 복제가 상충할 경우, 일반적으로 사용성과 접근성을 우선함.
     * 감사의 말
          + Chicago95와 Chicagofier를 위한 @grassmunk/@dominichayesferen
          + BlueBuild, Universal Blue, Fedora
          + Xfce 팀

        Hacker News 의견

     * KDE + Kvantum + Expose 테마와 다양한 Windows XP 테마를 사용하여 Windows XP 경험을 즐김
     * 현대 OS 사용자 인터페이스는 사용성 측면에서 더 나빠졌다는 가설을 가짐
     * 70년대 이후 OS 인기도 타임랩스 영상이 떠오름
     * Windows의 지배력이 여전히 강력하며, Mac 데스크톱과 노트북은 비교적 틈새 시장임
     * Windows 3.x UI 테마가 95/NT4/98/2000/Me 테마보다 더 강한 향수를 불러일으킴
     * 가끔 Windows 3.1을 VM에서 부팅해 솔리테어 게임을 즐김
     * 부모님을 Linux로 이전하는 것을 고려 중이며, Windows의 적대적인 환경을 피하고자 함
     * Chicago95 테마가 부모님에게 친숙할 것 같음
     * 저해상도 폰트의 매력을 그리워하며, 4K 모니터에서는 픽셀 폰트가 잘 어울리지 않음
     * Windows 10/11, Gnome, Mate 등 세 가지 현대 데스크톱 환경을 사용함
          + Windows 11에서는 앱 이름을 검색창에 입력하는 것이 가장 쉬움
          + Gnome은 스마트폰 스타일의 앱 그리드를 가짐
          + Mate는 Windows 95 패러다임을 유지하며 가장 선호하는 데스크톱 환경임
     * 복잡한 그래픽 요소가 항상 좋은 것은 아님
     * 90년대 후반과 2000년대 초반의 fvwm95와 icewm 테마가 떠오름
     * Gambas와 함께 사용하면 재미있을 것 같음
     * Windows 2000이 현대 데스크톱 중 가장 좋았다고 생각함
     * 완전한 디자인은 혜성 커서와 여러 IE 툴바가 있어야 함
"
"https://news.hada.io/topic?id=20000","비공식 Windows 7 서비스 팩 2","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         비공식 Windows 7 서비스 팩 2

     * Windows 7 Service Pack 2는 다양한 업데이트, 앱 이식, 기능 개선을 포함하여 최신 상태의 Windows 7 ISO를 손쉽게 구성할 수 있도록 한 패키지
     * 반현대적인(세미-모던) 시스템에서도 더 나은 사용성을 제공하기 위한 목적을 가짐

주요 업데이트 및 기능 통합

     * 2020년까지의 모든 보안 업데이트 포함, 추가로 Windows Embedded Standard 7의 업데이트도 포함
     * Windows 10 버전 1507의 캡처 도구(Snipping Tool) 포함
     * Windows 8 빌드 9425의 그림판(Paint) 이식
     * Windows 10 빌드 16212의 레지스트리 편집기 → 제작자: Aurorarion
     * ☐ 인플레이스 방식의 서비스팩 설치 지원
     * USB 3.0 및 NVMe 드라이버 기본 포함
     * TPM 2.0 지원
     * ISO 이미지에서 UEFI 및 EFI GOP 부팅 지원
     * VxKex 통합으로 Windows 7에서 최신 앱 호환성 개선
     * Windows 8 기반의 PE 환경 포함, Windows 7과 유사한 테마 적용
     * Windows 10 설치 엔진을 ISO에 통합
     * WebP 및 FLAC 코덱 기본 내장
     * Windows 8 빌드 7880의 작업 관리자(Task Manager)
     * ☐ 일부 UI 그래픽 업스케일 처리
     * 부팅 화면을 Windows Vista/7 스타일로 구성
     * ☐ “지원되지 않는 하드웨어” 경고 제거
     * ☐ 고해상도 DPI 지원 강화 (aero.msstyles에서 Aero10의 DPI 클래스 적용)
     * Microsoft Visual C++ Redistributable AIO 통합
     * Windows 8 빌드 7861의 디스크 정리 도구 포함
     * Windows 8 빌드 7861의 PDF 리더 포함
     * Windows 10 20H1의 시스템 정보 앱 포함
     * Windows 11 24H2의 timeout.exe 명령 포함
     * Windows 10 1709의 XPS 뷰어 포함
     * Windows 11 24H2의 sudo.exe 명령 포함
     * Windows 10 빌드 9845의 메모장 포함
     * Windows Management Framework 5.1
     * Segoe UI Emoji 글꼴
     * Microsoft Agent
     * WinHlp32 (이전 도움말 시스템 지원)
     * Work Folders
     * Windows Journal 복원
     * Microsoft Camera Codec Pack 통합

     * ☐ 는 아직 ToDo 항목들

FAQ

     * Q: 내 시스템은 32비트 하드웨어임. 왜 설치 프로그램과 ISO가 실행되지 않나요?
          + A: 64비트와 32비트 Windows를 모두 지원하는 것은 시간이 많이 소요되므로 64비트 시스템만 지원하기로 결정함.
     * Q: ESU 업데이트를 포함하지 않는 이유는?
          + A: ESU 업데이트는 2026년까지 Microsoft에서 제공되며, 이를 포함하면 새로운 릴리스를 계속 배포해야 하므로 시간이 많이 소요됨.
     * Q: VxKex 대신 dotexe1337 Windows 7 Extended Kernel을 사용하지 않는 이유는?
          + A: VxKex는 외부 DLL에 의존하기 때문에 dotexe의 Windows 7 Extended Kernel보다 안전함.
     * Q: Windows 설치 화면에 드라이브가 나타나지 않는 이유는?
          + A: RAID/RST 구성을 사용하는 경우, 설치된 드라이버가 작동하지 않을 수 있음.

   허허..고대유물인가..라이징 스타인가

        Hacker News 의견

     * Windows 7에 빠져들게 만든 커뮤니티와 리소스들이 활발히 존재함
          + spacedrone808이 운영하는 웹사이트와 Reddit 활동이 출발점이었음
          + Snappy Driver Installer는 44GB에 달하는 드라이버 토렌트를 제공하며, 다양한 하드웨어 지원이 가능함
          + driverpacks와 driveroff 등 러시아 해커 커뮤니티에서 Windows 7에 백포팅한 소프트웨어가 놀라울 정도의 깊이를 보임
          + 드라이버 관련 자료는 일부 웹 아카이브에서도 여전히 접근 가능함
     * Windows 7처럼 보이는 Linux 데스크탑 환경이 인기를 끌 수 있음
          + KDE, Cinnamon, XFCE로 비슷한 형태는 가능하지만 디테일에서 완성도가 떨어지며, Linux 전환의 걸림돌이 됨
     * Windows 95에서는 파일 유형에 따라 마우스 우클릭 메뉴를 자유롭게 커스터마이징할 수 있었음
          + Vista/7 이후부터는 “Open With” 기능이 제대로 작동하지 않고, 아이콘 파일을 에디터에 연결하면 아이콘 자체가 표시되지 않음
     * Kumander Linux는 나쁘진 않지만 여전히 “조악한 복제품” 수준이라는 평가
          + Wubuntu는 별로였다는 개인 경험 공유
     * Windows의 UI 발전사는 오히려 Microsoft가 GNOME 2와 Compiz에서 영향을 받은 것이라는 주장
          + 하지만 다른 사용자는 Apple의 Quartz Extreme(2002)이 Vista/Compiz(2006)보다 앞섰고, 그 영향이 더 크다고 지적
     * Windows 7의 중요한 점은 사용자 수와 기존 하드웨어 호환성이라는 의견
          + 가볍고 잘 설계된 Windows 7 클론 데스크탑 환경이 있다면 동일 하드웨어에서도 훨씬 좋은 경험이 가능할 것이라는 주장도 있음
     * Windows 7의 UI가 가장 뛰어났으며, Microsoft가 데스크탑/태블릿/모바일을 통합하려다 UI를 망쳤다는 분석
          + Aero UI 스타일로 돌아가면 좋을 것이라는 바람
     * XP로 게임 전용 머신을 만들기 위한 시도를 해봄
          + 최신 드라이버가 포함된 커뮤니티 설치 미디어를 통해 최신 하드웨어에서도 XP 설치가 가능함
          + 산업계에서는 여전히 XP에서만 정상 동작하는 소프트웨어가 많기 때문에 이런 수요가 존재함
     * 44GB 드라이버 토렌트는 처음엔 과도하다고 느꼈지만, 실제 GPU나 프린터 드라이버만 해도 1GB에 달함
          + 대용량 드라이버는 드라이버 외에도 쓸데없는 애플리케이션(GFE 등)을 포함하기 때문임
          + GFE는 많은 게임 최적화를 포함하지만, 그만큼 드라이버 자체도 상당히 비대함
     * NTLite는 Windows ISO에 드라이버 삽입할 때 유용한 도구로, Windows 11에도 사용 가능함
     * GitHub의 win7-sp2 저장소는 대부분 Microsoft 바이너리 파일로 구성돼 있으나 라이선스는 꽤 과장되어 있음
     * Windows 11 대신 7로 돌아가고 싶다는 바람
          + Office 2003의 클래식 UI가 더 나았으며, 최근 플러그인이나 브라우저도 여전히 잘 작동함
          + 하드웨어 업그레이드 후에도 문제없이 작동하는 기기의 견고함에 만족감을 느낌
     * Office 2003의 메뉴 방식이 더 직관적이라는 공감
          + 가볍고 RAM 소모가 적은 OneNote 2003/2007도 추천됨
     * LibreOffice 사용을 제안하는 사용자도 존재함
     * 하드웨어 수리를 예로 들어 Windows 7 머신이 얼마나 튼튼한지를 설명하려 했으나, OS와는 무관하다는 반론도 있음
          + 다른 사용자도 오래된 랩탑의 팬, 배터리 등을 교체해 새 생명을 불어넣은 경험 공유
     * 특정 작업용으로 Windows 7 머신을 유지 중이며, 네트워크 분리와 소프트웨어 버전 고정을 통해 안정성과 쾌적함을 유지 중임
          + 키보드 단축키에 대한 근육 기억이 유지되고, 예상치 못한 변화 없이 안정적으로 사용 가능함
     * Office의 리본 UI를 따랐던 다른 Microsoft 앱들은 많았음 (Explorer, Paint, WordPad 등)
          + Corel이나 AutoCAD 등도 일시적으로 리본 UI를 채택했지만, 완전히 정착되지 않음
     * 예전 메인보드의 안정성에 대한 질문에 대해, 2009년산 보드도 여전히 문제없이 작동 중이라는 응답
     * Windows Vista에서 win64devkit을 사용하는 사용자도 존재하며, 실용성과 경량성이 장점임
     * 비판하는 사람은 무시하고 지금의 만족스러운 환경을 계속 즐기라는 응원의 말도 존재함
     * 오래된 Windows 버전(XP, 2000 등)은 훨씬 빠르고 직관적인 동작을 제공함
          + 고사양 신형 머신에서도 Windows 11보다 XP 머신이 더 쾌적하게 느껴질 수 있음
          + Office 2003은 HDD에서도 빠르게 동작함
     * 고성능 SSD를 장착한 구형 기기에서 Office 2003의 퍼포먼스가 현대 Office보다 뛰어남
          + 현대 하드웨어에서도 XP 사용은 백포팅된 드라이버 이미지 덕분에 가능함
     * 시각 효과(애니메이션)를 꺼두면 성능이 대폭 향상됨
     * Windows 사용 경험의 정점은 7이라는 의견
          + 반면, 다른 사용자는 Windows 2000, 또는 Windows Server 2003이 가장 뛰어났다고 평가함
          + Server 2003 R2는 안정성과 신뢰성 면에서 “Windows의 최고작”으로 여겨짐
     * ReactOS는 Windows Server 2003과 바이너리 호환을 목표로 하는 흥미로운 오픈소스 프로젝트로, 일상 사용은 아직 어려움
     * Windows 7의 고해상도 DPI 지원은 부족했으며, perMonitorv2 같은 기능이 필요한 상황임
     * Windows 8부터 파일 복사 속도 그래프 같은 “장난감 같은 기능”이 추가된 것에 대해 비판적 의견도 존재함
     * 많은 기술적 향상(메모리 압축, 보안 등)이 있었지만, 사용자에게는 UI 변화로 인한 불편이 더 강하게 남음
     * Windows 11은 MacOS처럼 보이려는 시도가 거슬린다는 주장도 있으며, Win10에서 WindowBlinds로 Win7 스타일을 복원 중임
          + 강제로 11로 업그레이드되면 WindowBlinds11과 Start11을 구입해 기존 경험을 되살릴 예정임
     * Windows 11에서도 설정을 통해 창마다 개별 작업 표시줄 아이콘을 보이게 할 수 있음
     * 작업표시줄 중앙 정렬은 macOS보다는 Chrome OS의 영향을 받은 것이라는 주장도 있음
          + 설정에서 왼쪽 정렬로 변경 가능함
     * Windows 11의 UI는 더 일관된 편이라는 의견과, 오히려 이상한 부분이 많다는 반론이 대립함
          + 예: 둥근 모서리로 인해 창 크기 조절이 어려워졌다는 불만
     * Windows 7의 공식 지원 종료 이후에도 우크라이나 등에서 보안 업데이트를 재배포하는 사례가 존재함
          + Simplix의 업데이트 패키지가 대표적이며, 여전히 신뢰를 얻고 있음
     * 최신 Windows의 장점 중 하나는 WDDM(그래픽 드라이버 모델)의 개선임
          + 그래픽 오류가 줄고, 전체적인 부드러움이 향상됨
     * Aero Glass UI는 이제는 구식으로 느껴지지만, 여전히 Windows 7이 Windows 11보다 부드럽게 동작한다는 경험 공유
     * Windows 8을 좋아하는 사용자를 위한 대안으로는 Server 2012 R2가 있음
          + ESU(확장 보안 업데이트)가 2026년까지 지원되며, 안정성과 성능도 뛰어남
     * Windows 8의 일부 초기 빌드(예: 7861)에는 Metro 이전의 Win7 스타일 요소가 포함됨
          + PDF Reader 같은 앱이 Edge나 UWP 이전 방식으로 작동했던 흔적이 있음
     * GitHub에 올라온 Windows 7 관련 프로젝트는 실제 설치 파일이나 ISO 없이 개발 중인 상태임
     * Win7에서 Linux로 전환했지만, 구형 i7 시스템은 여전히 CAD나 PLC용으로 Windows 7 상태로 유지 중임
          + 가끔 사용하는 용도지만, 여전히 잘 작동함
"
"https://news.hada.io/topic?id=20081","제임스 웹 우주 망원경, 대부분의 은하가 시계 방향으로 회전함을 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 제임스 웹 우주 망원경, 대부분의 은하가 시계 방향으로 회전함을 발견

  SMART NEWS

    제임스 웹 우주망원경이 대부분의 은하가 시계 방향으로 회전함을 밝힘

     * 제임스 웹 우주망원경(JWST)은 2021년 12월 태양 주위를 도는 궤도에 발사된 이후 우주의 역사를 연구하고 있음.
     * 최근 JWST의 고급 심우주 탐사(JADES) 이미지에서 대부분의 은하가 같은 방향으로 회전하는 것을 발견함.
     * 연구에 따르면, 263개의 은하 중 약 3분의 2가 시계 방향으로 회전하고 나머지 3분의 1은 반시계 방향으로 회전함.

    은하 회전 방향의 불균형

     * 캔자스 주립대학의 컴퓨터 과학자 리오르 샤미르에 따르면, 은하의 회전 방향 차이는 명백하여 누구나 쉽게 확인할 수 있음.
     * 기존의 천문학 이론은 은하가 균등하게 회전해야 한다고 주장했으나, 이번 발견은 그와 상반됨.

    두 가지 주요 설명

    1. 블랙홀 우주론: 우주가 회전하면서 생성되었을 가능성이 있으며, 이는 블랙홀이 새로운 우주를 생성한다는 이론을 지지함.
          + 이 이론에 따르면, 블랙홀의 회전축이 은하의 회전 동역학에 영향을 미쳤을 수 있음.
    2. 은하수의 회전 효과: 도플러 효과로 인해 은하수가 회전하는 방향과 반대 방향으로 회전하는 은하가 더 밝게 보일 수 있음.
          + 이로 인해 망원경 관측에서 반대 방향으로 회전하는 은하가 과대 대표될 수 있음.

     * 이러한 발견은 우주의 확장률과 관련된 여러 미해결 문제를 설명할 수 있음.
     * 추가 연구가 블랙홀 우주론을 확인하거나 우주의 확장 측정이 잘못되었음을 밝힐 수 있을지 주목됨.

        Hacker News 의견

     * 한 컴퓨터 과학자가 여러 데이터셋을 기반으로 유사한 주장들을 많이 했음. 종종 완전히 모순된 결론에 도달함. 일부 주장은 천문학자들에 의해 분석되었고, 오류와 부적절한 통계 테스트가 발견되었음. 독립적인 연구에서는 비등방성의 유의미한 증거를 찾지 못했음
     * 2024년에 JWST에 대한 초기 데이터를 기반으로 은하들이 은하수와 함께 회전한다고 주장한 논문을 썼음. 그러나 더 넓은 데이터셋을 분석한 결과, 반대의 결과가 나왔음. 두 논문이 서로 모순되지만, 이에 대한 반성 없이 새로운 결과가 유의미하다고 주장함. 결과의 중요성이 주장만큼 크지 않음
     * MNRAS 편집자들이 더 철저한 검토 없이 저품질의 주장을 출판하는 것을 막기 위한 조치를 취했으면 좋겠음. 새로운 결과에 대한 논의가 거의 없고, 주로 이전 논문의 결과를 반복하고 있음
     * 지구에서 사이클론과 허리케인의 차이(시계 방향, 반시계 방향)를 보면, 관측 가능한 우주의 두 극 중 하나에 우리가 위치해 있는 것일까? 대부분의 은하가 특정 방향으로 회전하는 것을 관찰하고 있음
     * 50:50 비율을 기대했지만, 한쪽으로 치우친 불균형이 있음. 물질-반물질 비율, 왼손잡이와 오른손잡이 분자, 그리고 이제 은하 회전 방향 등이 있음
     * 회전 방향은 관찰자에 따라 다름. 시계 방향으로 회전하는 은하를 보면, 뒤에서 관찰하는 사람은 반시계 방향으로 회전하는 것을 봄. 우리가 우주에서 2/3이 시계 방향으로, 나머지가 반시계 방향으로 보이는 위치에 있는 것일까?
     * 블랙홀 가설에 대해 많은 사람들이 이야기하고 있지만, 우리 은하의 회전에 대한 잘못된 가정이 더 가능성이 높다고 생각함. 이는 우주의 팽창 속도 차이와 기존 거리 측정에 따르면 우주보다 더 오래된 것으로 예상되는 대형 은하 등 다른 문제들도 설명할 수 있음
     * 시계 방향은 무엇을 기준으로 하는 것일까? 우주에 '위쪽' 방향이 있는 것일까? 아니면 다른 은하들에 대한 상대적인 것일까?
     * 도플러 효과로 인해 은하수가 움직이는 방향과 반대 방향으로 회전하는 은하들이 더 밝게 보일 것으로 예상됨. 그러나 회전 방향이 은하 전체의 평균 밝기에 영향을 미치지 않을 것임
     * 263개의 은하 샘플 크기로는 결론을 내리기에 충분하지 않음
     * 흥미로움. JWST가 이것을 발견하는 데 필요했는지, 아니면 지금까지 확인하지 않았던 것인지 궁금함. 허블 XDF에 포함된 은하의 회전 방향에 눈에 띄는 비대칭이 있는지 궁금함
     * 최근 몇 년 동안 여러 하늘 조사에서 비대칭이 나타났지만, 약 2% 정도임. JWST의 비대칭은 초기 작업과 최근 심층 필드에서 훨씬 더 강함
     * 비등방성 비대칭을 보여줌. 다른 방향으로 보면 은하들이 다른 회전을 하고 있음. 한 방향에서는 +6%, 다른 방향에서는 -5% 정도임. 그러나 일반적인 특징으로 보고된 +50%와는 다름
     * 우주가 블랙홀 안에 갇혀 있는 것인지에 대한 논의도 있음
"
"https://news.hada.io/topic?id=19990","Show GN: HieraPlan - 난이도를 평가해서 어려운 작업을 쉽게 바꿔주는 플래너","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: HieraPlan - 난이도를 평가해서 어려운 작업을 쉽게 바꿔주는 플래너

   최근에 Multi llm agents 관련 비용 최적화에 집중 중인데, 난이도 평가 관련해서 플래너와 관련된 아이디어가 떠올라서 만들었습니다.

   계획을 적어서 생성 버튼을 누르면, 모델이 해당 계획의 난이도를 평가합니다.
   만약 어려운 작업이 있다면, 이를 나눠서 쉬운 작업으로 만들어주는 기능입니다.

주요 기능

     * 동적 계획 생성: 요청의 복잡도에 따라 5~10개의 상위 단계를 생성
     * 가중치 기반 작업 분석: 각 단계에 따라 난이도를 측정
     * 재귀적 작업 분해: 일정 깊이 또는 난이도 이하까지 작업을 분해
     * Markdown 지원 : 계획을 Markdown 형식으로 제공, 노션, Trello등에 활용가능

   데모 : https://hieraplan.streamlit.app/

   예시 플랜도 있으니 테스트 해 보세요. 피드백은 언제나 환영입니다!
"
"https://news.hada.io/topic?id=19993","Show GN: AI 기반 텍스트 RPG 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: AI 기반 텍스트 RPG 게임

     * 판타지/SF/추리물 등 7개의 테마를 제공
     * 각 테마는 세계관이 세밀하게 설계되어 있고, AI는 세계관에 입각하여 게임을 진행
     * 멀티 플레이가 가능함 : 최대 4명까지 동시에 즐길 수 있는 텍스트 어드벤쳐

   안녕하세요! 오랜만에 긱뉴스에 제품을 소개해봅니다. 이번엔 재밌는 걸 들고 왔습니다.

   멀티 플레이가 가능한 AI Text Adventure!
   언젠가 정말 만들어보고 싶었는데 이번에 만들게 되었습니다.

   제가 만들고서, 요즘에 제가 푹 빠져서 살고 있네요 ㅎㅎ. 한번씩 즐겨보시죠!
   API 비용이 압박이라 무료로 제공하지는 못하는 점 죄송합니다 ㅜㅜ

   와 재미있내요! 정말 대단하신대요!
   감탄하면서 앞부분 해보고 있습니다.

   이거 재미있네요. 만나는 인물마다 저먼 스플렉스를 날리고 있습니다.
   한 스토리를 마무리하기 위해 필요한 토인이 대강 어느정도인지 궁금합니다.

   작성한 글을 보니 꾸준히 이런 류의 시도를 하셨었군요. 너무 멋지십니다

   Limit 문제 어느정도 해결해두었습니다 ! 동접이 많아서 그랬던 거였어요. 이제 좀 해소되었을 것 같습니다.

   PC통신시절 이야기방을 만들어 하던 TRPG가 이런식으로 구현되는 군요.

   과연 (한국에서는)얼마나 대중화될런지 모르겠으나.. 서양쪽은 워낙 역사와 전통을 가지고 있으나 유망해 보입니다.

   과연 혈맹에 버닝하는 한국에서는?

   안녕하세요. 혹시 해당 작업을 어떻게 진행했는지 비용을 내고 조언을 들을 수 있을까요? 평소에 만들고 싶은 소설이 있어서 한번 혼자 재미로라도 진행해보고 싶어서요. 대략적으로 알려주셔도 괜찮습니다.

   이용자가 많은지 연결이 자주 끊기네요 ㅠ

   맞네요 이용자가 갑자기 몰려서 API rate limit을 넘었습니다 ㅜㅜ 조치 후 말씀 드릴게요 !

   이야.. 제가 이런거 만들어 볼까 하고 생각만 하고 있었는데, 실제로 나오다니.. 최곱니다~~

   오오 한번 해보겠습니다. 저도 나이먹어가면서 진짜 초기에 했던 텍스트 기만 머드들에 대한 향수 때문에 좀 현대적으로 텍스트 기반 방치형 랜덤 무한 파밍...... 대충 다 짬뽕해서 웹게임 토이프로젝트로 만들고 있는중입니다. 내 취향에 맞는건 내가 만드는게 제일 좋네요..

   오.. 기대됩니다. Google Login 에서 에러가 나와서 로그인을 못했어요. ㅠ

   아아, 모바일 first 입니다. 저도 모바일로 하고 있어요.

   TRPG류 좋아하는데 재밌네요! 게이트제로에서 바텐더가 되어 사이버펑크 디스토피아 세상에 몰입해가는 중,,,
"
"https://news.hada.io/topic?id=20107","Lefthook - 빠르고 유연한 Git Hook 매니저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Lefthook - 빠르고 유연한 Git Hook 매니저

     * Node.js, Ruby, Python 등 다양한 프로젝트에서 사용할 수 있는 고성능 Git hook 관리 도구
     * Go 언어로 작성되어 빠르고 병렬 실행이 가능하며, 의존성이 없는 단일 바이너리로 동작하여 설치 및 유지보수가 쉬움
     * 파일 필터링: glob 또는 정규식 기반의 파일 필터링 지원
     * 다양한 언어 및 환경 지원: Node.js, Ruby, Python, Docker 등과 호환
     * 로컬 설정 지원: 개발자 개인 설정을 위한 lefthook-local.yml 제공
     * 스크립트 실행: 복잡한 로직은 파일 기반 스크립트로 실행 가능
     * 명령 그룹 직접 실행 가능: 원하는 hook 그룹 또는 태스크를 수동 실행 가능
     * 병렬 실행: hook 내 여러 작업을 동시에 처리
"
"https://news.hada.io/topic?id=20110","13개의 원으로 만든 동물들개의 원으로 만든 동물들 (2016)

     * 13개의 원으로 만든 13마리 동물
          + Twitter 로고에서 영감을 받아 13개의 완벽한 원으로 구성된 디자인 도전을 시작함.
          + 포트폴리오에 간단하고 멋진 작품을 추가하고자 함.
          + 13개의 원으로 구성된 13마리 동물 디자인을 소개함.
     * 댓글 및 반응
          + 많은 사람들이 디자인을 칭찬하며 고해상도 이미지 요청 및 구매 의사를 표현함.
          + 디자인의 아름다움과 창의성에 대한 긍정적인 피드백이 많음.
          + Twitter와 Apple 로고 디자이너도 이와 같은 기법을 사용했음을 언급함.
     * 디자인 과정 및 도구
          + Illustrator의 원과 Shape Builder 도구를 사용하여 디자인함.
          + 디자인 과정에 대한 자세한 튜토리얼을 제공할 예정임.
          + 디자인은 과학적 이론보다는 원을 활용한 재미있는 작업임.
     * 기타 정보
          + 디자인은 Etsy에서 인쇄물로 구매 가능함.
          + 디자인에 대한 자세한 튜토리얼은 Smashing Magazine에서 확인 가능함.

        Hacker News 의견

     * 정확히 원은 아니지만, 유명한 말이 있음: ""네 개의 매개변수로 코끼리를 맞출 수 있고, 다섯 개로는 코를 흔들게 할 수 있음""
     * 원으로만 로고를 만드는 것은 정말 만족스러움. 왜 그런지는 모르겠지만, 아마도 도전이기 때문일 것임
          + 과거 디자이너로 일할 때 몇 가지 작업을 했었음
          + 첫 번째 작업은 내가 한 것 중 최고임
     * 마치 다음 Ubuntu 배경을 보는 것 같은 느낌이 듦
     * 이 작업을 구현하는 과정이 궁금함. 완벽한 곡선으로 동물을 시작하고 나중에 원으로 완성하는 것이 가장 쉬울 것 같음. 하지만 그게 무의미해 보이고, 아마도 원으로 시작할 것임
          + 원으로 시작해서 크기를 조정하며 계속하는 것이 상상하기 어려움. 말하고 나니 그렇게 이상하지는 않지만, 이미지에 많은 잡음을 추가해 그리기 어렵게 만들 것 같음
     * 예전에 트위터 새 로고가 원으로 만들어졌다는 글을 본 기억이 있음. 지금은 Reddit 게시물만 찾을 수 있음
     * 15년 이상 전에 포럼, 트위터 등에서 아바타로 사용할 비슷한 작업을 했었음
     * 제한이 있는 예술이 없는 것보다 더 흥미로울 수 있음
     * 1990년대 중후반 Schmidhuber의 작업도 참고할 것
     * 2016년... 이런 유형의 콘텐츠가 요즘 인터넷에서 점점 드물어지고 있음
     * 창의적인 작업이 그리움. 프론트엔드 UI를 만들기 전에는 미친 아이디어가 많았지만, 현실에 발을 디딤. 이 작업은 그렇게 미친 것은 아니지만, 수직 건물들이 마음에 듦
          + 편집기에서 어두운/컬러풀한 테마로 미니맵이 도시 풍경처럼 보임
"
"https://news.hada.io/topic?id=20073","수상한 행위 들통난 후, Honey 크롬 확장의 사용자 400만 명 이탈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                수상한 행위 들통난 후, Honey 크롬 확장의 사용자 400만 명 이탈

     * Chrome의 인기 확장 프로그램 Honey가 2024년 말 유튜브 영상으로 인해 논란에 휩싸이며 약 400만 명의 사용자 감소
     * Honey는 온라인 쇼핑 시 자동으로 쿠폰 코드를 찾아주는 서비스로 알려져 있으며, PayPal이 2020년에 약 40억 달러에 인수함
     * 2024년 12월, 유튜브 채널 MegaLag는 Honey의 2가지 문제 행위를 폭로한 영상 공개
     * 해당 영상은 현재 1,700만 회 이상 조회됨
     * 폭로된 문제 행위:
         1. 다른 웹사이트나 크리에이터의 제휴 코드(affiliate codes)를 몰래 제거
          + 사용자에게 쿠폰이나 혜택을 제공하지 않으면서도 Honey의 코드로 강제로 바꿈
         2. '최고의 쿠폰 코드 제공'이라는 약속을 어기고, 특정 상점과의 협업을 통해 임의의 코드만 노출
          + 사실상 사용자에게 거짓 정보를 제공한 셈
     * 문제 폭로 이후 빠르게 약 300만 명 감소, 이후 일부 복귀로 100만 명 회복
     * 그러나 2025년 3월 기준, Chrome 사용자 수는 최고치였던 2천만 명에서 1,600만 명으로 하락
     * Google은 최근 Chrome 확장 프로그램 정책을 변경함:
          + 사용자에게 혜택 없이 제휴 코드 탈취 금지
          + 이러한 행위에 대해 명확한 공개(disclosure) 필요
     * 이에 따라 Honey는 확장 프로그램 설명에 해당 내용을 명시했으며, 현재는 영상에서 지적된 행위가 더 이상 발생하지 않음

     ""아직 Honey를 사용하고 있나요?""

   건재하네요 ^^;;

        Hacker News 의견

     * PayPal Honey 확장 프로그램이 Chrome 웹 스토어에서 다시 ""추천"" 플래그를 받음
     * LegalEagle가 Honey를 상대로 소송을 제기함
     * uBlock Origin GPL 코드가 Honey 브라우저 확장 프로그램 팀에 의해 도용되었다는 주장
     * Honey의 오픈 소스 및 투명한 대안이 소개됨
     * Honey 인플루언서 사기 폭로 영상이 공개됨
     * Amazon이 PayPal이 소유한 이후 Honey 브라우저 확장을 보안 위험으로 간주함
     * ""Big 3"" 중 한 곳에 높은 위치에 있는 친구가 있음
          + 이 사업 모델은 전환에 전혀 기여하지 않았음에도 불구하고 마지막 클릭으로 자신을 삽입하는 것에 기반을 둠
          + 멋진 사업이지만 누군가가 알아차리지 않고서는 영원히 지속될 수 없음
     * 소매업체들이 Honey를 왜 참는지 의문임
          + 명백히 가치 있는 기여를 하지 않음에도 불구하고 왜 돈을 주는지 이해할 수 없음
     * 몇몇 유튜버들이 이를 홍보했으며, 내가 생각했던 것과 다르게 작동함에 놀람
          + 너무 좋게 들리면, 아마도 그럴 가능성이 큼
     * Capital One 확장은 같은 일을 하고 있었음
     * PayPal을 절대 신뢰하지 않음
     * Chrome 사용자 기반이 20% 감소함 (2천만 명에서 1천6백만 명으로)
     * 제휴 마케팅과 리드 생성의 세계가 너무나도 부정적이고 회복 불가능해 보임
          + 여기서 누구에게도 동정심을 느끼기 어려움
          + 중개자들이 많아 모든 것이 더 비싸짐
     * Honey의 공동 창립자가 며칠 전 이 주제로 AMA를 진행함
     * Honey 사용자는 아니지만 이 부분이 흥미로웠음
          + Jonathon이 'NV_MC_LC' 쿠키가 Linus Tech Tips에서 PayPal로 변경되는 것을 보여줌
          + 'NV_MC_FC' 쿠키는 Linus Tech Tips에 남아 있으며 PayPal로 변경되지 않음
          + LC는 '마지막 클릭', FC는 '첫 클릭'을 의미함
          + Jonathon이 FC 쿠키를 알아차렸지만 관련이 없다고 생각했으며 혼란스러워 했다고 주장함
          + 그는 NewEgg나 제휴 네트워크에 문의하여 설명을 들었는지 궁금함
     * 사용자 대신 ""Chattel""이라고 부르는 것이 나을지 고민됨
          + 그들은 자본가들이 자본을 만들기 위한 존재일 뿐임
"
"https://news.hada.io/topic?id=20039","보셀 액션 어드벤처 롤플레잉 게임 Veloren 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     보셀 액션 어드벤처 롤플레잉 게임 Veloren 출시

Veloren에 오신 것을 환영합니다

     * Veloren은 광대한 판타지 세계를 배경으로 한 액션 어드벤처 롤플레잉 게임임
     * 🏕️ 거대한 산, 건조한 사막, 울창한 정글 등 다양한 환경을 탐험할 수 있음
     * ⚔️ 역동적이고 빠른 전투를 통해 다양한 무기와 플레이 스타일을 발견할 수 있음
     * 🏠 마을에서 NPC와 상호작용하고 장비를 제작하여 여정을 도울 수 있음
     * ☠️ 던전과 은신처에서 위협적인 보스와 무시무시한 몬스터를 만날 수 있음
     * 🌎 복잡하고 상호 연결된 절차적 세계를 경험하며, 플레이하는 동안 완전히 시뮬레이션됨
     * ⛏️ 광대한 동굴 네트워크에서 광석과 보석을 채굴할 수 있음
     * 🐎 야생 동물을 길들여 동료와 탈것으로 삼아 여정을 도울 수 있음
     * 🫱🏽‍🫲🏿 친구들과 멀티플레이어 서버에서 모험하거나 LAN을 통해 직접 서버를 호스팅할 수 있음
     * 🛠️ 소스 코드를 발견하고 프로젝트에 직접 기여할 수 있음

   무엇을 기다리고 있는가?

        Hacker News 의견

     * 산과 강이 생성되는 방식에 관심이 있다면, ""Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion"" 논문을 참고할 수 있음
          + 각 지형 조각은 일정한 속도로 상승하며, 침식은 지형의 경사와 유역 면적에 따라 적용됨
          + 결과적으로 강 네트워크와 각 지형 조각의 중심 높이가 결정되며, 이를 바탕으로 도로, 동굴, 구조물이 배치됨
          + 실제 보셀은 플레이어가 해당 지역을 로드할 때만 결정되며, 보통 저장되지 않음
          + 렌더링은 wgpu를 통해 이루어지며, 모델은 MagicaVoxel에서 제작되고, 클라이언트와 서버는 ECS(specs)를 사용함
     * 설치 관련 문제: 런처를 통한 설치가 약간 문제가 있음
          + 직접 mac 다운로드와 Cargo를 통한 설치 모두 Airshipper v0.15.0을 설치하며, 이는 구버전이라고 표시됨
          + 최신 버전 설치 버튼을 클릭하면 GitHub 릴리즈 페이지로 이동하지만, 최신 버전은 0.14임
          + v0.16은 태그만 있고 아티팩트가 없음
          + GitHub 페이지는 GitLab 저장소의 미러임
          + GitLab에는 최신 버전의 아티팩트가 있음
     * Veloren은 오픈 소스 게임으로, 최근 0.16 버전이 출시됨
          + Rust로 작성된 멀티플레이어 보셀 RPG임
          + 다양한 시기에 걸쳐 많은 댓글이 달림
     * 몇 년 전 Veloren을 잠깐 플레이했으며, 개선된 점에 감명받았음
          + 다시 시도해볼 필요가 있음
          + 보셀 기술이 발전하면서 블록 기반의 요소가 여전히 필요한지 궁금함
          + 물리적 상호작용을 계산하는 기술이 발전하면 일반 게임처럼 보일 것이라 생각했음
          + 일부 보스를 보면 발전하고 있지만 여전히 기대보다 멀리 있음
     * Veloren은 Cube World의 대안으로 초기 버전을 플레이한 기억이 있음
          + Cube World는 출시 당시 약속된 기능이 거의 없고 업데이트가 없었던 게임임
     * Veloren 실행을 위한 몇 가지 팁
          + Rust 패키지를 설치하고, Wayland 사용 시 분수 스케일링 비활성화
          + 터미널에서 airshipper를 실행하고, Gnome 앱 그리드에서 실행한 경우 고아 프로세스를 확인하고 종료해야 함
     * Veloren의 디자인 목표와 예술 방향을 좋아하지만, 게임 디자이너 없이 아티스트와 개발자만으로 게임을 만들면 비디오 게임으로서의 완성도가 부족함
     * Veloren이라는 단어는 독일어로 ""잃어버린""을 의미함
          + 생태계와 조명 등이 흥미로움
     * Rust 게임 개발이 활발해지고 있음
          + Veloren의 메인 클라이언트는 자체 엔진으로 구축됨
          + Tiny Glade는 Bevy ECS를 사용하지만 자체 그래픽 스택을 가짐
          + Bevy와 Fyrox는 Godot에는 미치지 못하지만 점점 발전하고 있음
          + Bevy는 ECS에 집중하며 다양한 유틸리티와 서드파티 라이브러리를 제공함
          + Fyrox는 ECS에 덜 의존하며 완전한 패키지로 모든 것을 구축하려 함
          + 두 엔진 모두 WASM 번들로 쉽게 웹에 배포 가능하여 멀티 플랫폼 타겟팅에 이상적임
          + Rust는 주요 게임 프로그래밍 언어로 자리 잡고 있으며, 웹 백엔드, RPC, API 서비스 프로그래밍 언어로도 뛰어남
"
"https://news.hada.io/topic?id=20062","Armin Ronacher의 Sentry에서의 10년 회고.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Armin Ronacher의 Sentry에서의 10년 회고.

   Flask를 만든 것으로 유명한 Armin Ronacher가 10년간 다닌 Sentry를 퇴사하며 남긴 회고(?) 글이네요.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   새로운 시작

   모든 끝은 새로운 시작을 의미하며, 오늘은 저에게 새로운 장의 시작입니다. 10년 전, 저는 미지의 세계로 뛰어들었고, 오늘 또 다른 도전을 시작합니다. 10년 동안 Sentry에서 일한 후, 저는 새로운 것을 시작하기 위해 떠납니다.

   Sentry와의 인연

   Sentry는 단순한 직장이 아니라 제 삶의 중요한 부분이었습니다. 저는 에너지와 아이디어, 열정을 쏟아부었고, Sentry는 저를 형성했으며, 저도 Sentry를 형성했습니다. 이제 떠나면서 엄청난 감사와 깊은 자부심, 그리고 추억으로 가득 찬 마음을 가지고 있습니다.

   우연한 만남에서

   Sentry의 공동 창립자인 David와의 인연은 제가 공식적으로 팀에 합류하기 전부터 있었습니다. 우리는 Django 커뮤니티의 IRC에서 처음 만났고, 제 첫 Sentry에 대한 기여는 제가 공식적으로 합류하기 몇 년 전이었습니다. 2013년 러시아에서 열린 컨퍼런스에서 함께 회사를 시작하는 아이디어를 논의했지만, 그 계획은 실현되지 않았습니다. 그러나 협업의 씨앗은 심어졌습니다.

   10년간의 경험

   Sentry의 성장은 놀라웠습니다. 처음에는 직원 수 30명이 한계일 것이라 생각했지만, 그 이후로도 계속 성장하여 유니콘 기업이 되었습니다. 이 과정에서 우리는 실수도 했지만, 많은 것을 배웠습니다.

   어려운 이별

   사랑하는 것을 떠나는 것은 결코 쉬운 일이 아닙니다. Sentry는 제 성인 생활의 중요한 부분이었으며, 이제는 아침에 커피를 사러 갈 때마다 사무실을 지나치게 될 것입니다. 일상적인 결정과 토론, 팀의 열정적인 분위기에 더 이상 참여하지 못한다는 것은 현실감이 없습니다.

   진심 어린 감사

   저는 함께 일한 뛰어난 동료들에게 깊은 감사를 느낍니다. 우리는 엔지니어링, 제품, 마케팅 등 다양한 분야에서 함께 성장하였으며, 오픈 소스 원칙을 고수하며 많은 성과를 이루었습니다.

   미래를 향하여

   이제 새로운 도전을 시작하려 합니다. 구체적인 계획은 아직 없지만, 앞으로의 여정이 기대됩니다.
"
"https://news.hada.io/topic?id=20018","Komodo - 여러 서버에 빌드/배포하는 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Komodo - 여러 서버에 빌드/배포하는 도구

     * 서버, 빌드, 배포, 자동화 프로세스 등을 구조적으로 관리할 수 있도록 도와주는 웹 플랫폼
     * DevOps 워크플로우 전반을 하나의 대시보드에서 제어할 수 있도록 설계되었으며, 대수 제한 없이 서버를 연결하고 자동화할 수 있음
     * Git Push로 트리거 되어 자동 버전 관리되는 docker 이미지를 빌드하고, 배포하며, 업타임 및 로그를 확인
     * 코어 API 와 에이전트들이 Rust로 작성됨

주요 기능

     * 서버 모니터링 : 모든 서버를 연결하고, CPU / 메모리 / 디스크 사용량에 대한 알림 설정 가능
     * Docker 관리
          + 연결된 서버에서 Docker 컨테이너를 생성, 시작, 중지, 재시작
          + 컨테이너 상태 및 로그 실시간 확인
     * Docker Compose 배포
          + UI 또는 Git 저장소에서 Compose 파일 정의
          + Git push 시 자동 배포 설정 가능
     * 자동 빌드 및 확장
          + 소스 코드를 자동 버전 관리된 Docker 이미지로 빌드
          + Webhook으로 자동 빌드 트리거
          + 단발성 AWS 인스턴스 배포
     * 자동화 및 저장소 관리
          + 서버에 연결된 저장소를 통해 스크립트 및 Webhook 기반 자동화 작업 수행
     * 환경 변수 및 비밀 관리
          + 구성 변수 및 비밀 값을 관리
          + 글로벌 변수 공유 및 시크릿 값 대체(interpolation) 지원
     * 작업 기록
          + 모든 작업 이력과 수행자 기록을 자동 저장

개발 철학 :제한 없음

     * 연결할 수 있는 서버 수에 제한 없음
     * 사용할 수 있는 API의 종류에 제한 없음
     * 상업용 “비즈니스 에디션” 없음 – 모든 기능이 오픈
"
"https://news.hada.io/topic?id=20080","CodeQL 공급망 공격 위협 – 공개된 GitHub 비밀키에서 시작된 보안 사고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             CodeQL 공급망 공격 위협 – 공개된 GitHub 비밀키에서 시작된 보안 사고

     * 공개된 GitHub 비밀키(Secret) 로 인해 GitHub의 정적 분석 도구인 CodeQL이 공급망 공격에 노출
     * 문제의 키는 1.022초 동안 유효했으며, 해당 시간 내 공격자는 GitHub Actions 워크플로우에서 임의 코드 실행 가능
     * 이 취약점은 공개 CVE로 등재됨: CVE-2025-24362

주요 피해 시나리오

   공격자는 이 취약점을 통해 다음과 같은 공격을 실행할 수 있었음:
     * CodeQL을 사용하는 리포지토리의 소스코드 유출 (지적재산 침해)
     * GitHub Actions의 비밀키 탈취 및 2차 공격 가능
     * 내부 인프라에서 CodeQL 워크플로우를 통한 코드 실행
     * GitHub Actions Cache를 사용하는 워크플로우의 비밀키까지 탈취 가능

공격 탐지 및 실험 과정

     * Praetorian 연구팀은 GitHub Actions에서 생성되는 워크플로우 아티팩트에 포함된 비밀키를 스캔하는 도구를 개발
     * CodeQL 관련 리포지토리에서 비밀키가 포함된 debug artifact 발견
     * 해당 키가 유효한 동안 공격자가 branch/tag를 생성하고 파일을 푸시할 수 있음을 증명하는 **PoC 도구 artifact_racer.py**를 제작 및 실행

    핵심 실험 결과

     * 공격자는 해당 토큰으로:
          + 새로운 브랜치 생성
          + 파일 푸시
          + 태그 추가
     * CodeQL은 기본적으로 v3 태그를 참조하며, 해당 태그를 공격자가 덮어쓸 수 있었음 → 모든 CodeQL 사용자에게 악성 코드 배포 가능

확산 가능성: 왜 위험한가?

     * 대부분의 사용자는 CodeQL을 수동으로 설정하지 않고, GitHub 리포지토리 설정에서 ""Enable CodeQL"" 버튼을 클릭
     * 이때 자동으로 설정되는 워크플로우는 github/codeql-action 리포지토리를 참조하며, v3 태그 기반
     * 공격자가 v3 태그를 악성 커밋으로 덮어쓸 경우, 수많은 프로젝트에서 자동으로 악성 코드 실행

추가 공격 가능성: 캐시 중독 (Cache Poisoning)

     * 기본 CodeQL 워크플로우는 GitHub Actions Cache를 사용함
     * 이를 통해 공격자는 빌드 파이프라인에 악성 캐시를 주입, 이후 워크플로우에서 비밀키 탈취 및 내부 접근 가능
     * 대표적 피해 대상:
          + Homebrew
          + Angular
          + Grafana

GitHub의 대응 및 패치

     * 2025년 1월 22일 취약점 보고 후, GitHub은 3시간 내에:
          + 취약 워크플로우 중단
          + 비밀키 업로드 방지 PR 등록
          + 패치 버전 배포: CodeQL Action v3.28.3
     * 공식 보안 권고문: GHSA-vqf5-2xx6-9wfm

대응 방안

     * 워크플로우에서 아티팩트를 업로드할 때는 업로드 대상 파일을 제한할 것
     * 환경 변수나 .git/config, _temp/ 디렉터리 내 파일 포함 주의
     * GITHUB_TOKEN은 읽기 전용 권한만 부여
     * 업로드 전 비밀키 스캔 수행 권장 (Nosey Parker 등 도구 활용)

결론

     * CodeQL의 기본 설정으로도 수많은 프로젝트가 공급망 공격에 노출될 수 있음
     * GitHub Actions의 보안 취약점은 여전히 심각한 위협이며, 커뮤니티의 지속적인 관심과 방어 전략이 요구됨

관련 정보

     * CVE 정보: CVE-2025-24362
     * PoC 브랜치: testpoc
     * 커밋 링크: Commit
     * 태그 링크: Tag

        Hacker News 의견

     * GitHub의 불변 액션이 출시되면 공격의 70% 이상을 해결할 수 있을 것이라는 의견이 있음
          + GitHub의 주간 문제들이 이를 출시하게 만들 것이라고 생각함
     * 임시 토큰이 새로운 배포를 생성하고 아티팩트 증명을 생성할 권한을 가진 이유에 대한 언급이 없음
          + 문제 해결을 위해 디버그 로그를 비활성화했지만, 임시 토큰의 권한을 코드 분석 엔진에 더 적합하게 변경했는지에 대한 답변이 없음
     * CI와 CD는 완전히 분리된 환경이어야 한다고 점점 더 확신하게 됨
          + CI의 손상이 CD 관련 토큰 유출로 이어지지 않아야 함
     * GitHub의 대응 시간이 매우 인상적임
     * 성이 Prater인 사람으로서 praetorian.com을 소유하고 싶다는 의견이 있음
     * 공개 GitHub 액션을 사용하는 것은 문제를 초래할 수 있으며, 워크플로우 절차를 분석하지 않고 사용하는 것은 더 위험함
          + 대신 woodpecker나 다른 훌륭한 CI 빌더(circle, travis, gitlab 등)를 사용하여 직접 호스팅할 것을 권장함
     * OpenZFS PR에 CodeQL을 사용하고 있으며, OpenZFS에는 문제가 없음을 언급함
          + OpenZFS의 코드는 비밀이 아님
     * 문제가 해결되었는지 궁금해하는 의견이 있음
     * 사이트의 성능이 너무 나빠서 스크롤이 거의 불가능하다는 불만이 있음
"
"https://news.hada.io/topic?id=20014","Em Dash, En Dash, Hyphen 사용법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Em Dash, En Dash, Hyphen 사용법

Em Dash (—) 사용법

  Em Dash란 무엇인가?

     * Em Dash는 쉼표, 콜론, 괄호처럼 기능하며, 추가 정보나 설명을 강조하는 데 사용됨.
     * 콜론처럼 앞의 내용을 설명하거나 확장하는 절을 소개함.

  Em Dash의 새로운 방향 표시

     * 문장의 구조에서 갑작스러운 변화나 중단을 표시함.
     * 대화 중단이나 화자의 혼란, 망설임을 나타냄.

  Em Dash의 쉼표 또는 괄호 역할

     * 쉼표나 괄호 대신 사용되어 강조하거나 주목을 끌고자 할 때 사용됨.
     * 정의 구문이나 목록을 소개함.
     * 콜론이나 세미콜론 대신 사용되어 절을 연결함.
     * 예시나 설명을 강조할 때 사용됨.
     * 요약 문장을 소개할 때 사용됨.
     * 인용문의 출처를 표시할 때 사용됨.

  Em Dash와 다른 구두점의 조합

     * 쉼표가 나타날 수 있는 위치에 Em Dash가 나타나면 쉼표는 생략됨.
     * Em Dash로 구분된 내용이 느낌표나 물음표로 끝나면, 그 표시는 Em Dash 안에 위치함.
     * 괄호 안에 Em Dash가 사용될 수 있으며, 닫는 괄호는 생략되지 않음.

  Em Dash vs En Dash

     * Em Dash는 대문자 M의 길이, En Dash는 대문자 N의 길이와 비슷함.
     * En Dash는 주로 숫자, 날짜 사이에 사용되어 ""포함하여""의 의미를 전달함.
     * 복합 형용사에서 En Dash는 하이픈을 대체함.
     * 대문자 이름 사이에 En Dash가 사용되어 경계, 조약, 반대 등을 나타냄.
     * 두 개의 Em Dash는 단어의 일부 글자 생략을 표시함.
     * 세 개의 Em Dash는 생략된 단어나 알려지지 않은 단어를 표시함.

  하이픈 사용

     * 복합어의 요소를 연결함.
     * 접두사, 접미사, 중간 요소를 분리함.
     * 숫자와 날짜 사이에 En Dash 대신 사용됨.
     * 단어의 끝에서 줄을 나눌 때 사용됨.
     * 더듬거리거나 울먹이는 말을 나타냄.
     * 철자를 하나씩 나눠서 표시함.

   Em Dash는 콜론과 괄호의 덜 공식적인 대체물로 간주되기도 하지만, 모든 종류의 글에서 사용됨. Em Dash 주위의 간격은 매체에 따라 다르며, 이 웹사이트는 Em Dash를 밀착하여 사용하는 스타일을 선호함.

        Hacker News 의견

     * 하이픈은 복합어를 연결하는 데 사용됨: 예를 들어, ""double-decker"", ""cut-and-dried"", ""212-555-5555"" 같은 경우임
     * EN 대시는 범위를 나타냄: 예를 들어, ""Boston–San Francisco"" 비행, ""10–20"" 년은 양 끝점뿐만 아니라 그 사이의 모든 공간을 포함함
     * EM 대시는 문장이나 생각을 끊는 데 사용됨: 예를 들어, ""What the—!"" 또는 ""A paragraph should express one idea—but rules are made to be broken"" 같은 경우임
     * 유니코드는 원래의 ASCII 하이픈-마이너스(U+002d)와 전용 하이픈(U+2010), 소프트 및 비분리 하이픈 같은 기능적 하이픈, 전용 마이너스 기호(U+2212), 그리고 하위 및 상위 첨자 같은 마이너스 변형을 포함함
     * 피겨 대시 ""‒"" (U+2012)는 숫자와 동일한 너비로 미적으로 사용됨. 두-em 대시 ""⸺"" 및 세-em 대시 ""⸻""와 수평 막대 ""―""도 있음
     * 대부분의 컴퓨터 키보드에는 em 대시가 없으며, ALT+0151을 매번 누르기보다는 두 개의 하이픈을 연결하여 사용함: --
     * em 대시, en 대시, 하이픈의 적절하고 정확한 사용은 LLM 작가의 가장 명백한 특징임. 실제 em 대시는 2022년 이전에는 드물었음
     * Butterick의 ""Hyphens and dashes""를 읽고 하이픈, en 대시, em 대시를 올바르게 사용하게 되었음. 유니코드 시퀀스를 외워서 Linux에서 Ctrl-Shift-U로 매끄럽게 입력함
     * Robert Bringhurst는 구문을 설정할 때 en 대시를 선호함. em 대시는 19세기 표준이지만, 최상의 텍스트 페이스와 사용하기에는 너무 길다고 함
     * 숫자를 포맷할 때 마이너스 기호(−)를 사용해야 함. 기본 하이픈-마이너스(-)는 잘못된 것으로 보임
     * 피겨 대시(‒) 또는 피겨 스페이스( )는 단일 숫자와 동일한 너비의 자리 표시자 문자가 필요할 때 사용됨
     * 단일 대시만 사용할 것임. 다른 두 가지를 사용할 이유가 없다고 봄
     * Em 대시를 보면 AI 생성물일 가능성이 높다고 확신함. ChatGPT는 거의 항상 이를 사용함
     * 타자기가 없던 시절의 조판에 대해 이야기함. 전용 O/0, l/1 키가 있지만 여전히 ""직선"" 인용 부호를 많이 봄
     * 블로그 게시물이 필요함. LLM이 등장하기 전에는 em 대시를 수백 번 보았음에도 이제야 존재를 깨달은 사람들이 있음
     * em 대시 또는 다른 대시 앞뒤에 공백을 사용하는 것에 대한 개인적인 의견이 있음. 얇은 공백을 사용하는 것을 선호함
     * 다양한 옵션을 탐색하기 위해 작은 프로그램을 작성함. Verdana 폰트에서 어떻게 보이는지 확인할 수 있음
     * HN이 이를 잘못 렌더링하고 있음. 얇은 공백보다 헤어 스페이스가 더 넓게 렌더링됨
     * 실험을 원하는 사람들을 위한 Python 코드 제공됨
"
"https://news.hada.io/topic?id=19999","Next.js를 선택하기 전에 꼭 알아야 할 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Next.js를 선택하기 전에 꼭 알아야 할 것들

     * Next.js 의 개방성과 거버넌스 문제에 대해 다루는 글: 어댑터의 부재, 공식 서버리스 지원 부족, Vercel 전용 코드 경로, 그리고 보안 사고에 대한 Vercel의 대응 자세등
     * 기술 스택 선택은 프로젝트의 개발 속도, 품질, 팀 구성 등에 장기적인 영향을 주는 중요한 결정임
     * 오픈소스 소프트웨어는 사용자에게 코드 확장 및 수정의 자유를 주며, 벤더 종속을 피할 수 있는 이점이 있음
     * Next.js는 오픈소스로 제공되지만, 그것을 만든 Vercel의 인프라와 밀접하게 얽혀 있음
     * 기업이 자사에서 만든 오픈소스로 수익을 얻는 것은 문제되지 않지만, 오픈소스와 기업의 경계가 명확해야 지속 가능한 모델이 될 수 있음

작성자의 배경과 이해관계

     * 작성자는 Netlify 소속으로 4년 넘게 근무 중이며, Netlify는 Vercel과 경쟁 관계에 있음
     * Netlify에서 Next.js의 전 기능을 지원하기 위한 인프라와 툴링을 직접 구축하면서 Next.js 내부 구조에 대한 깊은 이해를 얻게 되었음
     * 오랫동안 공개적으로 문제 제기를 꺼려왔지만, 최근 Vercel의 보안 이슈 대응 방식이 커뮤니티에 해를 끼쳤다고 판단하여 글을 작성하게 되었음

# Next.js의 개방성과 거버넌스 문제

  Fact #1: 어댑터 부재

     * 대부분의 현대 프레임워크는 배포 대상에 따라 어댑터를 통해 유연하게 설정 가능함
     * Next.js는 어댑터를 공식적으로 지원하지 않으며, 출력물 형식은 Vercel에서만 사용되는 독점적이고 비공개적인 구조임
     * Vercel은 Build Output API를 만들었으나, Next.js는 여전히 이를 지원하지 않음
     * 결과적으로 Vercel 이외의 제공자는 문서화되지 않은 API를 기반으로 구축해야 하며, 이는 예기치 못한 변경에 취약함
     * Cloudflare와 Netlify는 OpenNext를 통해 Next.js용 어댑터 개발에 협력하고 있으며, Vercel도 이에 참여하기 시작했지만 아직 구체적인 일정은 없음

  Fact #2: 공식 서버리스 지원 부족

     * Next.js의 공식 셀프 호스팅 방식은 장기 실행 서버 기반으로, 실제 운영 환경에서 유연한 확장성과 비용 절감을 구현하기 어려움
     * 과거엔 serverless 모드가 있었지만 2022년 10월에 별다른 설명 없이 제거되었음
     * React 공식 문서에서는 서버리스 배포가 가능하다고 언급하지만, 실제로 이를 구현하기 위한 공식 문서는 없음
     * 서버리스 환경을 원하는 호스팅 제공자는 Next.js를 리버스 엔지니어링하여 자체 구현해야 함

  Fact #3: Vercel 전용 코드 경로 존재

     * Next.js는 Vercel 배포 시에만 작동하는 비공개 코드 경로를 포함하고 있음 (예: minimal mode)
     * 이 모드를 통해 Vercel은 미들웨어를 엣지에서 실행하는 등 성능 최적화를 가능하게 함
     * 미들웨어는 캐시 이전 경로에서 빠르게 로직을 실행할 수 있는 기능이지만, 이 기능은 Vercel만 사용할 수 있음
     * Netlify는 이 기능을 지원하기 위해 전담 엔지니어 팀을 두고 자체 구현했으나, 이는 소규모 제공자에겐 불가능한 수준의 리소스를 요구함
     * Vercel만이 Next.js의 전체 기능을 공식적으로 제공하는 유일한 플랫폼이라는 현실은 프레임워크의 오픈소스 철학과 어긋남

보안 사고와 Vercel의 대응

     * 2025년 3월 21일, Next.js에서 인증 우회를 허용하는 심각한 보안 취약점(CVE 9.1점)이 공개됨
     * 해당 취약점은 요청에 특정 헤더를 포함하면 미들웨어를 무력화시켜 보호된 리소스에 접근할 수 있는 문제였음
     * 취약점은 2월 27일에 보고되었지만, Vercel이 이를 조사하기 시작한 건 3월 14일이었음
     * 문제 인지 후 빠르게 패치를 배포했지만, Netlify 등 다른 제공자에 알리는 데 8일이나 걸렸음
     * 초기 블로그 글에서는 Vercel의 방화벽이 고객을 보호했다는 식으로 서술했으나, 실제로는 그렇지 않았음
     * 이로 인해 여러 제공자와 개발자가 잘못된 정보를 바탕으로 대응하거나 혼란을 겪었으며, 여전히 많은 사이트가 취약한 상태일 가능성도 있음

Vercel의 Next.js 소유권과 오픈소스 책임

     * Vercel이 Next.js를 소유하고 있다는 사실은 부정할 수 없으며, 수익화 또한 정당함
     * 그러나 오픈소스로 제공되는 만큼 타 제공자도 평등하게 사용할 수 있어야 하며, 이 점에서 Vercel은 기대에 못 미치고 있음
     * Redis, Grafana, WordPress 등도 상업적 서비스와 오픈소스 프로젝트를 함께 운영하면서도 개방성과 상호운용성을 유지하고 있음

결론

     * 어떤 프레임워크를 선택하든 그것은 사용자의 결정이며, Next.js가 문제 해결에 최적이라면 그대로 사용하는 것도 좋음
     * 다만 Next.js가 현재 갖고 있는 구조적 문제와 제한 사항을 알고 선택하는 것이 중요함

        Hacker News 의견

     * 나는 next.js를 사용하다가 페이지 라우터에서 앱 라우터로 전환했을 때 프로젝트를 포기했음. 앱 라우터 경험이 너무 나빴고 그 이후로 next.js를 다시 사용하고 싶지 않았음
          + Vercel은 오픈 소스인 척하지만 사용자들을 그들의 호스팅 플랫폼에 가두려는 벽을 쌓고 있음
     * Vercel에 대해 항상 약간 불안했음. VPS에 Next.js를 자체 호스팅하려고 할 때 그들이 설정한 작은 함정들에 걸렸음
          + 그들이 이 취약점을 처리하는 방식이 나를 더욱 불안하게 만들었음
          + Vercel의 방화벽이 고객을 ""적극적으로 보호했다""고 주장하는 초기 설명은 나쁜 인상을 남겼음
          + 다른 플랫폼에 알리는 데 지연이 있었고, 이는 Vercel이 Next.js에 취약점이 도입되는 것을 방지할 동기가 적다는 것을 보여줌
     * 나는 모두에게 next.js를 피하라고 경고함. V0가 채택을 크게 증가시킬 가능성이 있음
          + 많은 새로운 개발자들이 배포 및 시스템 관리에 대해 생각하고 싶어하지 않음
          + React만 알고 있다면 SSR을 배우지 않고도 얻을 수 있는 것이 장점임
     * 내가 next.js를 포기한 이유는 작은 프로젝트에서 변경 사항이 브라우저에 나타나는 데 6-7초가 걸렸기 때문임
          + 이제 React SPA와 Vite를 사용함
     * 우리는 작년에 Next.js에서 Vike로 이전했음. 개발자 경험이 크게 개선되었음
          + 대부분의 필요는 페이지를 사전 렌더링하는 것으로 충족됨
     * Next.js에 대해 혼합된 감정을 가지고 있음. 한편으로는 투자자와 함께 프레임워크를 구축하는 회사임
          + MIT 라이선스이므로 Netlify나 다른 회사가 포크하여 더 나은 대안을 제공할 수 있음
          + Vercel의 투자자라면 경쟁을 돕는 것이 투자 위험을 증가시킬 이유가 없음
          + Vercel은 오픈 소스를 지지하면서도 그들의 호스팅 플랫폼을 최선의 선택으로 만들기 위한 마찰을 유지하려고 함
     * 내가 일하는 회사의 React 스택을 선택하는 과정에 있음. Next.js를 대안보다 선택할 이유를 상상할 수 없음
          + Remix나 React Router v7, TanStack이 SSR을 원한다면 더 합리적인 선택임
     * 서버리스 접근 방식이 좋은 기본값이라고 확신하지 않음. 불필요한 복잡성을 추가함
          + 백엔드에서 자바스크립트를 사용하는 것을 좋아하지 않음
          + 서버 컴포넌트와 Next.js에 대한 집중이 나에게는 터널 비전처럼 느껴졌음
          + 서버리스 접근 방식이 HTTP 헤더를 사용한 특권 통신의 이유였을 가능성이 높음
     * 최악의 개발 빌드 시간이 있으며, 수년간 많은 불만이 있었지만 해결되지 않음
     * Vercel과 NextJS는 존재하지 말아야 함
          + Next를 한 번 시도했을 때 프로덕션에서 많은 하이드레이션 오류를 만났음
          + 프레임워크가 서버에서 렌더링하는 잠재적 이득을 위해 모든 것을 복잡하게 만듦
          + 전체 프레임워크가 그들의 비싼 클라우드 서비스를 판매하기 위한 좋은 외관으로 만들어졌음

   글쓴이는 Netlify 소속으로, 자기 입으로 Vercel과는 직접적인 경쟁자라고 합니다. 이건 좀 객관성이 부족해 보이네요.

   본문의 내용은 최근 tanstack이나 remix 등 경쟁 프레임워크 간 비교를 해봤다면, 크게든 작게든 다들 알고있는 내용입니다. 아직은 워낙 nextjs의 점유율이 크고 버셀도 노골적인 행보를 보이진 않아서 표면화되지 않은 겁니다.

   경쟁사에서 근무한다는 이유로 글에서 전하고자 하는 정보에 대한 객관성이 부족하다는 주장은 인신공격 입니다. 작성자의 배경과 이해관계를 생략하고 읽어도 이상한 글인가요? 저는 유용한 정보라 생각합니다.
"
"https://news.hada.io/topic?id=20070","제1차 수정헌법의 각 기둥이 공격받는 상황","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        제1차 수정헌법의 각 기둥이 공격받는 상황

  청원권

     * 청원권은 시민들이 정부에 불만을 제기하거나 행동을 요청할 수 있는 권리임. 그러나 트럼프 행정부는 이 권리를 여러 방면에서 위협하고 있음.
     * 공화당 의원들이 지역 타운홀 미팅을 피하도록 권고받고 있으며, 이는 행정부의 예산 삭감과 인력 감축에 영향을 받은 주민들의 분노를 피하기 위함임.
     * 트럼프 대통령은 정보공개법(FOIA) 요청을 처리하는 인력을 해고했으며, 이는 언론과 대중이 정부 기록을 요청하고 지도자를 책임지게 하는 데 필수적인 도구임.
     * 행정부는 Signal을 사용하여 예멘 공격 계획을 논의했으며, 이는 기록을 남기지 않으려는 의도로 보임.
     * 법률 회사들이 대통령과 행정부를 상대로 한 소송을 꺼리게 만드는 조치가 취해지고 있음.

  집회의 자유

     * 트럼프 대통령은 대학에서의 시위를 억제하기 위해 연방 자금 지원을 중단하겠다고 위협함.
     * 행정부는 외국 학생들이 시민과 동일한 표현의 자유를 누리지 못한다고 주장함.
     * ICE는 친팔레스타인 학생들을 체포하고 추방하려 하고 있음.
     * 트럼프는 군대를 사용하여 시위를 진압하겠다는 의사를 밝힘.

  언론의 자유

     * 트럼프 대통령은 여러 언론사를 상대로 소송을 제기했으며, 이는 언론이 대통령을 비판하거나 도전하는 것을 주저하게 만들려는 전략임.
     * Meta는 트럼프와의 소송에서 합의하고, Facebook과 Instagram에서 사실 확인자를 제거하기로 함.
     * FCC는 주요 방송사에 대한 불만을 재개하며, 이는 언론의 자유를 위협하는 조치로 보임.

  표현의 자유

     * 행정부는 정부 보고서에서 사용하지 말아야 할 단어 목록을 배포하고 있음.
     * 많은 데이터 세트가 정부 웹사이트에서 삭제되었으며, 이는 대중과 연구자들이 데이터를 사용하는 것을 어렵게 만듦.
     * 행정부는 특정 관점을 지지하는 정부 보조금을 중단하려 하고 있음.

  종교의 자유

     * 트럼프 행정부는 교회, 학교, 병원 등에서의 이민 집행을 금지하는 정책을 철회함.
     * 이는 종교적 자유를 침해하는 조치로 비판받고 있음.
     * 반유대주의를 무기로 사용하여 반이민 정책을 추진하려는 시도로 보임.

   트럼프 대통령의 이러한 조치들은 헝가리의 오르반 총리와 같은 권위주의적 지도자들을 모방하려는 시도로 보임. 이는 미국의 언론 자유와 민주주의에 대한 심각한 위협으로 평가됨.

        Hacker News 의견

     * ""자유 발언 절대주의자""들이 현재 행정부에 대한 지지를 재고하게 만들 좋은 자료 모음임.
          + 제1차 수정헌법의 일반적인 해석은 20세기 초중반의 일련의 중요한 판례들 덕분임
          + 그 이후로 당연시되었던 많은 확장이 있었고, 이제 도전받고 있음
          + 얼마나 많은 것들이 유지될지는 시간이 지나야 알 수 있지만, 좋은 확률을 기대하지 않음
     * 미국에 잠시 살면서 많은 뉴스를 들었을 때, 건국의 아버지들, 견제와 균형, 위대한 미국 헌법에 대한 찬양이 항상 기억에 남음
          + 얼마나 쉽게 모든 것이 진행되는지 놀랍고, 대부분의 사람들은 아무것도 하지 않음
          + 상위 100개 로펌 중 소수만이 정부에 대한 소송에 참여함
     * 이 기사는 상황이 얼마나 나쁜지를 요약하고 있어 훌륭함
          + 그들은 당신이 얼마나 나쁜지 알기를 원하지 않음
          + 많은 작은 문제들이 있고, 아무도 큰 문제를 보지 않기를 바람
     * 노동계급에 대한 공격, 특히 서비스 손실, 교육, 관세로 인한 인플레이션에 대한 기사가 필요함
     * 모든 것이 꽤 잘못되어 있음
          + 이러한 종교적 추종자들이 어떻게 자신들이 무슨 일이 일어나고 있는지 완전히 무시하게 되었는지 놀라움
          + 외부인의 관점에서 보면, 놀라움
          + 동시에 많은 경고가 있었음
     * 이 기사를 사랑하는 사람들과 공유한다면, 그들은 언론이 가짜 뉴스와 현 행정부에 대한 불공정한 대우 때문에 당연하다고 말할 것임
          + 마지막 토론은 ""MI6가 트럼프 팀을 나쁘게 보이게 하려고 했다""로 변질됨
          + 이를 뒷받침하는 가짜 뉴스 기사가 있음
          + 어떻게 여기까지 왔는지 모르겠지만, 파괴적이고 무서움
     * 자유 팔레스타인 시위자들로 시작됨
          + 테슬라 시위자들이 다음임
          + 시민들은 엘살바도로 보내지고, 비시민들은 그들이 온 곳으로 보내질 것임
     * 제22차 수정헌법도 공격받고 있음
     * 최근 승리: 미국 대법원이 New York Times vs. Sullivan에 대한 도전을 듣기를 거부함
          + 네 명 미만의 판사만이 이 문제를 다시 볼 가치가 있다고 생각함
     * 수십 년간 미국에 살면서 처음으로 내 의견을 표현하는 것이 두려움을 느낌
          + HN이 계정과 모든 댓글을 완전히 삭제할 수 있는 기능을 제공하는지 궁금함
     * 이 나라는 계몽주의 원칙에 기초하여 설립되었다고 생각했음
          + 같은 원칙이 세계의 리더로 만들었음
          + 이제 계몽주의 가치가 적극적으로 해체되고 있는데, 다음에 무엇을 기대할 수 있을지 궁금함
"
"https://news.hada.io/topic?id=20005","자율주행차 Waymo의 사고율이 인간 운전자보다 낮음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     자율주행차 Waymo의 사고율이 인간 운전자보다 낮음

     ""5천만 마일 주행 기준, Waymo가 인간 운전자보다 충돌 사고가 훨씬 적음""

     * 2025년 1월 19일, 미국 샌프란시스코에서 최초의 치명적인 완전 자율주행 차량 사고 발생
     * 사고 차량은 Waymo 소속으로, 정차 중 뒤에서 인간 운전 차량이 고속으로 추돌하여 6중 추돌사고 발생
     * 1명 사망, 5명 부상, 애완견도 사망함
     * 2024년 10월에도 비슷한 사고 발생, Waymo 차량은 신호대기 중이었고 반대편 차량이 중앙선을 넘어 추돌
     * 이 두 사고는 Waymo가 잘못한 것이 아닌, 인간 운전자의 과실로 발생한 사고임
     * 대부분의 Waymo 관련 사고는 Waymo 차량이 교통규칙을 엄격히 준수하는 상황에서 인간 운전자가 위반으로 인해 발생함

2024년 7월~2025년 2월까지의 Waymo 사고 기록

     * 이 기간 동안 38건의 중대한 사고 발생 (에어백 작동 또는 부상 포함)
     * 이 중 Waymo의 과실로 판단되는 사고는 최대 4건, 나머지 34건은 타인의 과실 가능성 높음
     * 구체적 사고 유형 분류:
          + 16건: 정지 상태의 Waymo 차량을 다른 차량이 추돌하거나 다중 추돌 발생
               o 후방 추돌 10건, 측면 접촉 3건, 반대 차선 차량 침범 3건
          + 8건: 이동 중인 Waymo 차량이 후방에서 추돌당함
          + 5건: 다른 차량이 Waymo의 주행 경로를 침범
               o 빨간불 무시, 스쿠터, 정지 신호 무시 포함
          + 3건: 승객 하차 중 문 열림으로 인한 사고 발생 (자동차 또는 자전거와 충돌)
          + 2건: 실제 충돌이 없거나 명확하지 않은 사건
               o 차선 변경 시 타 차량이 놀라 급조작, 보행자가 차량에 일부러 접근
     * Waymo 차량의 명백한 과실로 보이는 사고는 1건:
          + LA에서 Waymo 차량이 플라스틱 상자를 밀어 옆 차선 스쿠터가 충돌하여 넘어짐
     * 판단이 애매한 사고 3건:
          + 다른 차량이 비보호 좌회전 중 Waymo 차량과 충돌한 사고

Waymo 차량은 인간보다 사고율이 낮음

     * Waymo는 인간 운전 대비 사고율을 분석하기 위해 Phoenix와 San Francisco 데이터를 기준으로 비교
     * 4,400만 마일 주행 기준:
          + 에어백 작동 사고: 인간 운전 예상 78건 vs. Waymo 13건 → 83% 감소
          + 부상 사고: 인간 운전 예상 190건 vs. Waymo 36건 → 81% 감소
     * 2024년 9월과 비교해 사고율 감소폭이 더 커짐

보험 청구 기준으로 본 Waymo의 안전성

     * Waymo와 Swiss Re 공동 연구에서 실제 보험 청구 데이터를 분석
     * 2,500만 마일 주행 중 발생한 신체 피해 보험 청구는 단 2건 (아직 진행 중)
          + 첫 사례: 경찰 추격 중인 차량이 보행자와 차량을 연쇄 충돌, Waymo는 직접 충돌 없음
          + 두 번째 사례: 자전거 도로로 들어온 차량이 Waymo와 충돌
     * 두 사례 모두 Waymo의 책임으로 판단될 가능성 낮음
     * 가정상 두 건 모두 Waymo의 과실로 인정돼도,
          + 일반 인간 운전자의 예상 성공적인 신체 피해 청구는 26건 → 90% 이상 감소
     * 재산 피해 청구도 유사:
          + Waymo는 9건 발생, 인간 운전자는 78건 예상 → 88% 감소

   Hacker News 의견중 Tesla 정보는 마크 로버의 실험영상 때문인것 같은데,

   로보택시에서 사용하는 FSD 도 아니였고, 구형 Auto Pilot 으로 실험해서 논란이 되고 있는 의견을 가져온것 같군요.

        Hacker News 의견

     * 심각한 사고율은 하키 스틱 패턴을 보임. 대략 20%의 운전자가 80%의 사고를 유발함. 최악의 20% 운전자에 비해 Waymo가 이미 더 나은 상태일 가능성이 높음
          + 현재는 기술적 측면에서 성공을 거두고 있는 Waymo가 수익성과 경제성을 갖춘 서비스를 운영할 수 있는지에 더 관심이 있음
          + 100명의 운전자를 대상으로 한 연구 데이터에서, 0-1번의 근접 사고를 경험한 운전자 수와 13-50번 이상의 근접 사고를 경험한 운전자 수가 대략 비슷함
          + 한 운전자는 2만 마일도 안 되는 거리에서 56번의 근접 사고와 4번의 실제 사고를 경험함
     * 자율주행차에 대해 처음에는 회의적이었으나, Waymo의 신중하고 사려 깊은 접근 방식에 감명을 받음
          + 시각적 단서, 라이다, 안전 운전자, 지오펜싱을 사용함
          + Tesla 로보택시에는 신뢰를 두지 않음. 시각적 단서만 사용하고, 벽을 도로처럼 보이게 그린 곳으로 돌진할 수 있음
     * 사고가 성공의 최선의 지표인지 의문임
          + 사고를 거의 내지 않는 나쁜 운전자도 있음. 다른 사람을 끼어들게 하고, 교통 상황에서 혼란스러워하며 잘못된 결정을 내림
          + Waymo는 미디어 주목을 받으며 혼란스러운 행동을 보이기도 함. 예를 들어, 계속해서 로터리를 도는 경우가 있음
     * Waymo와 Tesla의 안전성 주장에 항상 불신을 가짐. 수치를 조작할 방법이 많음
          + 자율주행 소프트웨어가 이상을 감지하기 60초 전에 해제되고, 그 후 충돌이 발생하면 이는 소프트웨어의 잘못인지 인간 백업 운전자의 잘못인지 불분명함
          + Waymo가 X백만 마일을 ""라이더 전용""으로 주행했다고 주장할 때, 대부분의 마일이 크루즈 컨트롤로 쉽게 주행할 수 있는 고속도로에서 이루어진 것인지 의문임
          + Waymo는 3~4개 도시에서만 운영하며, 선택된 날씨 조건에서만 운영함. 이는 대부분의 사람들이 매일 마주하는 실제 주행 조건을 대표하지 않음
          + NTSB는 모든 원시 데이터를 공개하도록 강제해야 함. 우리는 자체 분석을 수행할 수 있어야 함
     * 자율주행의 문제는 새로운 환경에서 ""고가용 경로 데이터"" 없이 어떻게 일반화되는지와 기계 간 실패가 어떻게 상관되는지임
          + 안전 운전에서는 실패가 상관되지 않으며 안전 절차가 일반화됨
          + 자율주행이 널리 사용될 경우, 몇몇 사건에서 더 많은 사람들이 사망할 수 있는 조건이 발생할지 알 수 없음
     * 날씨가 사고의 주요 원인이 아닌 도시에서만 데이터가 있음
          + 토론토, 시카고, 보스턴, 뉴욕시의 운전자와 비교한 데이터가 필요함. 눈, 얼음비, 얼음, 짙은 안개 속에서도 인간이 AI보다 우수함
     * Waymo는 동일한 도로에서 인간 운전자가 78번의 에어백 사고를 일으킬 것이라고 추정함. 반면 Waymo의 무인 차량은 13번의 에어백 사고만 발생함. 이는 인간 운전자에 비해 83%의 에어백 사고 감소를 나타냄
          + 작년 9월에는 84% 감소를 추정했음. 이는 ""실질적으로 변하지 않음""이라고 할 수 있음
     * 자율주행차가 ""평균""보다 나은 것은 너무 낮은 기준임
          + 평균 운전자는 술에 취하거나 약물에 취한 사람, 경험이 적은 십대, 너무 나이가 많아 안전하게 운전할 수 없는 사람 등을 포함함
          + 자율주행이 널리 채택되려면 최소한 평균적이고 경험 많은 운전자보다 나아야 함
     * 인간 운전자처럼 공격적으로 운전할 수 있는지 의문임
          + 벌금을 받지 않고 가능한 한 빨리 주행, 혼잡한 차선 대신 빈 차선을 이용해 마지막 순간에 합류, 신호등에 감시 카메라가 없을 때 빨간불 무시 등의 행동을 할 수 있는지
     * Waymo의 최신 안전 수치를 요약한 기사임. Waymo의 웹사이트에는 비교 방법론에 대한 더 많은 세부 정보가 제공됨
"
"https://news.hada.io/topic?id=20043","실종된 저명한 컴퓨터 과학자 자택 급습한 FBI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       실종된 저명한 컴퓨터 과학자 자택 급습한 FBI

유명 컴퓨터 과학자의 실종과 FBI의 수사

     * 배경: 인디애나 대학교의 저명한 컴퓨터 과학자 Xiaofeng Wang이 연락이 두절되었으며, 그의 교수 프로필, 이메일 계정, 전화번호가 삭제되었음. FBI는 그의 집을 수색하였으나 이유는 알려지지 않았음.
     * Wang의 경력: Wang은 인디애나 대학교의 Luddy School에서 연구 부학장을 역임했으며, IEEE와 AAAS의 펠로우였음. 그는 암호학, 시스템 보안, 데이터 프라이버시 등 다양한 연구 분야에서 많은 논문을 공동 저술하였음.
     * 이상한 상황: 최근 몇 주 동안 Wang과 그의 아내 Nianli Ma의 프로필이 인디애나 대학교에서 조용히 삭제되었음. Bloomington과 Carmel에 있는 그들의 집은 FBI에 의해 수색되었으며, 수색 중 많은 박스가 옮겨졌음.
     * FBI의 활동: FBI는 법원 승인 하에 수색을 진행하였으나, 수색의 구체적인 이유나 Wang과 Ma가 구금되었는지에 대한 정보는 제공하지 않았음. 연방 법원 기록에서도 관련 문서를 찾을 수 없었음.
     * 연구자들의 반응: Johns Hopkins University의 암호학 교수 Matthew Green은 이 상황이 전혀 정상적이지 않다고 언급하며, Wang이 두 주 동안 실종된 것에 대해 우려를 표명하였음. Georgetown University의 Matt Blaze 교수도 대학이 Wang의 존재를 삭제한 것에 대해 의문을 제기하였음.
     * 지역 뉴스 보도: Carmel 집에서의 수색 중 FBI는 메가폰을 사용해 ""FBI, 나오세요!""라고 외쳤으며, 한 여성이 휴대폰을 들고 나왔고, 그 휴대폰은 요원에게 압수되었음. 수색은 약 4시간 동안 진행되었고, 여러 박스의 증거가 수집되었음.
     * 추가 정보 요청: 사건에 대한 새로운 정보가 나오면 업데이트될 예정이며, 사건에 대한 직접적인 정보를 가진 사람은 Signal을 통해 기자에게 연락할 것을 권장함.

        Hacker News 의견

     * 이 사건은 아직 주류 언론에 보도되지 않았음. 미국 정부가 사람을 실종시키는 것은 허용되지 않음
     * Xiaofeng Wang의 Indiana University 프로필과 Google Scholar 페이지, 그리고 Indiana University 홈페이지의 보관된 버전이 있음
     * PACER 계정이 있는 사람은 확인해보길 바람
     * 사건의 패턴이 ICE와 잘 맞지 않음. Indiana University가 조사에 협조했기 때문임
     * 중국 출신 사람들에 대한 간첩 조사 기록이 좋지 않음. 이 조사를 방어하는 것이 아님
     * 그의 옛 웹사이트와 그가 작성한 앱의 링크가 제공됨
     * 이러한 사이트들이 더 이상 이용 가능하지 않음. 이는 의심스러움
     * FBI와 변호사, 대학의 데이터 삭제, 공개 기록에 아무것도 없는 것은 FISA 법원과 관련이 있을 가능성이 있음
     * 우리는 이 사건의 혐의나 실제로 무슨 일이 일어났는지 아마 알 수 없을 것임
     * 그가 NIST 승인 알고리즘에 백도어를 넣을 만큼 뛰어난 암호 이론가였다면 흥미로울 것임
     * 중국 이니셔티브가 다시 시작된 것 같음
          + 2024년 9월 11일 공화당이 하원에서 통과시킨 두 개의 법안이 중국 이니셔티브를 부활시키는 것으로 묘사됨
          + 중국 이니셔티브는 미국 법무부가 경제 간첩 행위를 방지하기 위해 중국 스파이를 기소하는 프로그램이었음
          + 이 프로그램은 많은 중국계 미국인 학자와 과학자들에게 부정적인 영향을 미쳤음
     * 그의 본국으로 강제 송환되었다면 놀랍지 않을 것임
     * FBI가 그의 집을 수색한 것은 그가 외국 요원으로 연루되었거나 정보 자산으로 타협되었음을 시사함
     * FBI는 그들의 일을 하고 있으므로 이의는 없음. 그러나 대학의 데이터 삭제는 어리석음
     * 이 사건이 반드시 지정학적이거나 암호학 관련일 필요는 없음. 그는 단순한 범죄를 저질렀을 수도 있음
     * 대학이 그를 휴직시킨 것은 그가 체포되기 전에 도망치게 만들었을 수 있음
     * FBI가 관련된 이유는 여러 가지가 있을 수 있음
          + (1) FBI 관련 사안일 수 있음
          + (2) 그가 가족에게 어디로 갔는지 말하지 않았다면, 가족이 법원에 의해 정보를 공개하도록 강요받을 수 있음
          + (3) FBI가 혼란스러워서 관련되었을 수 있음
     * 이 이야기에는 많은 공백이 남아 있음
     * 반년 후에 더 많은 정보가 나오기를 바람
     * 모든 사람이 안전하고 합법적인 일을 하고 있기를 바람
"
"https://news.hada.io/topic?id=20097","글루벅스의 파워월글루벅스의 파워월 (2016)

     * 프로젝트 소개
          + Glubux는 자신의 전기 수요를 충족시키기 위해 일부 전기를 생산하고 있음
          + 1.4kw의 태양광 패널, 오래된 24v 460AH 지게차 배터리, Victron MPPT100/50 충전 컨트롤러, 24v에서 12v로 변환하는 Victron 전압 변환기, 3KVA Victron 인버터를 사용 중임
     * 계획 및 진행 상황
          + 배터리와 충전 컨트롤러/인버터를 보관할 창고를 건설할 계획임
          + 몇 달 전부터 노트북 배터리를 수집하기 시작했으며, 현재 약 650개를 보유하고 있음
          + 배터리 팩을 정리하고 제작 중임
     * 아이디어
          + 각 팩에 대해 100Ah를 목표로 셀의 수를 맞추고 필요에 따라 셀을 추가하거나 제거할 수 있는 가능성을 고려함
          + 구리선을 최대한 활용하며, 쉽게 구할 수 있고 납땜이 용이함
          + 각 셀에 대해 동일한 버스 바 길이를 유지함

        Hacker News 의견

     * Glubux는 노트북 배터리를 분해하여 개별 셀을 맞춤형 랙에 재조립함으로써 시스템의 효율성과 지속 가능성을 높였음
          + 이는 현대 공급망의 효율성을 강조하는 동시에, 전문 전기 기술이 있는 사람이라면 집에서 배터리 시스템을 직접 만들 수 있음을 보여줌
          + 하지만 이러한 시스템은 상업적으로 구매할 수 있는 것보다 신뢰성이 떨어질 수 있음
     * Glubux의 전체 설치 사진은 매우 인상적임
          + 그러나 수천 개의 배터리 중 하나라도 문제가 생기면 큰 화재 위험이 있을 수 있음
          + 배터리 공장에서의 화재는 매우 무섭고 장기적인 피해를 초래할 수 있음
     * 비록 재활용 및 자작 부품으로 구성된 시스템이지만, 화재나 배터리 팽창 같은 주요 문제는 보고되지 않았음
          + 하지만 적절한 소화 시스템이 없다면 화재 발생 시 큰 위험이 있을 수 있음
     * Glubux가 사는 지역의 기후와 시스템의 부하에 대한 정보가 궁금함
          + secondlifestorage.com 사이트에서 더 많은 정보를 찾을 수 있을 것 같음
     * 배터리 셀을 안전하게 조정하고 맞추는 방법이 있다면, 이는 배터리를 ""블랙 매스""로 만드는 것보다 나을 것임
          + Jehu Garcia의 유튜브 채널에서도 관련 내용을 볼 수 있음
     * 설치의 공개 통계가 흥미로움
          + 기사나 포럼에 언급되지 않은 발전기가 최근 추가된 것으로 보임
          + Glubux의 업데이트가 궁금함
     * 리튬 이온 배터리의 안전성 문제에도 불구하고 여전히 합법적인 이유가 궁금함
          + 더 안전한 배터리 화학이 있지만 에너지 밀도가 낮음
          + 과거의 모바일 기기 성능으로도 충분히 만족할 수 있었음
"
"https://news.hada.io/topic?id=20052","Grammarly 확장의 배신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Grammarly 확장의 배신

Grammarly 확장 프로그램이 웹사이트를 깨뜨린 이유

     * 최근 몇 달 동안 웹사이트 레이아웃이 이상하게 깨졌다는 보고를 종종 받았음
     * 문제의 원인은 Grammarly 브라우저 확장 프로그램으로 밝혀졌고, 이를 확인하기 위해 본인도 직접 설치해봄

문제 발견 과정

     * Grammarly 확장 프로그램은 다음과 같은 권한을 요청함:
          + 모든 웹사이트의 데이터 접근
          + 알림 표시
          + 브라우저 탭 접근
     * Firefox에서 실험한 결과, Grammarly는 웹페이지에 자체 스타일시트를 삽입함
          + 이 스타일시트는 웹페이지에서 직접 탐지할 수 없음 (숨겨진 스타일시트)
          + Content Security Policy까지 우회함
     * <html> 태그 안에 <grammarly-desktop-integration> 요소도 삽입됨 (목적은 불분명)

왜 내 사이트였나?

     * Grammarly의 스타일시트 끝에 다음 코드가 포함되어 있음:
:host,
:root {
  --rem:16
}

     * 이 설정은 기본 CSS 단위인 1rem = 16px와 겹치며, 저자도 --rem이라는 커스텀 프로퍼티를 사용 중이었음
     * Grammarly는 고정된 --rem 값을 전역으로 설정하고, 동적 폰트 사이징을 시도함
     * 이로 인해 저자의 유동적인 타이포그래피 계산이 깨짐

저자의 대응

     * 처음에는 Mutation Observer를 이용해 Grammarly가 삽입한 요소를 감지하고 !important 스타일로 덮어씀
     * 이후 자신의 CSS 변수명을 --rem에서 **--🤡 (유니코드 이모지)**로 변경함
     * 이모지는 CSS 변수 이름으로 유효함
     * 이렇게 하면 Grammarly의 전역 --rem 설정과 충돌을 피할 수 있음

문제의 본질

     * Grammarly는 웹 확장 프로그램으로서 모든 웹사이트에 전역 스타일을 강제로 삽입함
     * 특히 --rem처럼 일반적인 CSS 변수명을 사용하는 것은 매우 해로움
     * 코드 내부에서는 무작위 클래스명을 쓰면서도, 왜 굳이 공용 네이밍을 전역으로 적용했는지 이해할 수 없음
     * 실제 확장을 사용하지 않아도 코드가 삽입됨

결론 및 제안

     * 저자는 Grammarly에 문의했으며, 빠른 응답은 있었지만 기술적으로 문제를 이해하는 담당자와 연결되지는 못함
     * 이상적인 해결책은 Grammarly가 --🤡 같은 변수명을 사용하고, 나머지 개발자들이 자유롭게 --rem을 사용할 수 있도록 하는 것임

        Hacker News 의견

     * 내 확장 프로그램 문제는 조금 다름. 우리는 지리적 위치 테스트를 위해 프록시 서버 간 전환을 쉽게 하는 확장 프로그램을 배포함
          + 몇 달 전 최악의 클라이언트 데모를 경험했음. 제품이 작동하지 않는 것처럼 보였음
          + 많은 디버깅 끝에 1Password 확장 프로그램의 최근 업데이트가 우리의 것을 망가뜨렸음을 발견함
          + 그들은 인증 이벤트를 구독하고 있었지만 반환하지 않았고, 이로 인해 우리의 구독자가 호출되지 않았음
          + 1Password의 지원 팀은 Grammarly보다 나았지만, 우선순위를 설득하는 것은 어려움
          + 정부 웹사이트에 필요한 러시아 확장 프로그램도 같은 문제가 있음
     * 스크립트나 스타일을 알 수 없는 페이지에 주입할 때는 변수에 네임스페이스를 지정하는 것이 최소한의 예의임
     * 많은 화면 공유와 녹화가 기본적으로 모든 웹사이트에 그린 침입을 포함하는 것을 보는 것은 무서움
          + 시각적 방해뿐만 아니라 프라이버시와 공격 벡터가 문제임
          + Chrome은 필요할 때만 확장을 활성화할 수 있음. 왜 아무도 이렇게 하지 않는지 궁금함
     * Grammarly Extension의 엔지니어임. dbushell.com의 UX를 망가뜨려 죄송함
          + 의도한 것이 아니었고, 이를 방지하기 위해 다양한 기술을 사용 중임
          + dbushell.com에 대한 예외를 임시로 추가했음
          + 스타일 격리를 보장하기 위한 변경 작업 중임
     * 이 문제를 엔지니어링 팀에 전달했음
     * Google Translate가 내 웹 앱을 망가뜨리는 비슷한 문제가 있음
          + Google Translate를 사용하는 사용자가 앱이 망가졌다고 불평함
          + Google이 앱의 상태를 더 높은 메타 레벨에서 변경했기 때문임
          + Google Translate를 감지하고 경고를 출력하려고 함
     * 작업 중 브라우저 확장 프로그램과 관련된 많은 sentry 오류가 있음
          + Chrome의 Google Translate는 React 기반 사이트를 망가뜨리는 것으로 악명 높음
          + 새로운 확장 문제를 무시하는 번거로운 작업이 필요함
          + 클라이언트 측 필터링을 사용하여 수집량을 줄임
     * 웹을 가장 망가뜨릴 수 있는 변수가 무엇일지 궁금함
          + --primary-color: transparent
     * 적대적인 브라우저 확장 프로그램을 어떻게 처리하는지 궁금함
     * 이 방법을 사용하여 플러그인을 하이재킹할 수 있는지 궁금함
          + 최소한 텍스트를 주입할 수 있어야 하며, 사용자의 신뢰를 악용하여 로그인 폼을 렌더링할 수도 있음
          + 다른 사람이 제어하는 문서에 요소를 주입하는 것이 정말 안전한지 의문임
"
"https://news.hada.io/topic?id=20031","TracePerf - Node.js용 성능 추적/실행 모니터링 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 TracePerf - Node.js용 성능 추적/실행 모니터링 도구

     * 복잡한 함수 흐름과 메모리 사용을 효율적으로 분석할 수 있도록 설계된 오픈소스 도구
     * CommonJS와 ESM 환경 모두를 지원하며, 브라우저에서도 동일한 API를 제공하는 것이 큰 장점
     * 고성능 실행 시간 추적: 오버헤드를 최소화하면서 함수 실행 시간을 정확히 측정
     * 메모리 사용 추적: 함수별 메모리 소비를 추적하고 메모리 누수 가능성을 감지
     * 유연한 추적 모드: 사용 목적에 따라 성능 중심, 균형형, 상세 분석 모드를 선택 가능
     * 실행 흐름 시각화: 복잡한 함수 흐름을 보기 쉽게 시각적으로 표시
     * 중첩 함수 추적: 함수 내 함수 호출까지 추적 가능하여 깊은 분석이 가능
     * 사용자 정의 임계값 감지: 설정한 실행 시간 이상을 소비하는 함수에 집중할 수 있음
     * 샘플링 제어: 프로덕션 환경에서 성능 영향을 최소화하기 위해 샘플링 비율 조정 가능
     * 범용 모듈 호환성: CommonJS와 ESM 모듈 모두에서 사용 가능

브라우저 및 Node.js 에서 동일한 API 제공

     * 통합 추적 API: 브라우저와 Node.js 양쪽에서 동일한 방식으로 추적 가능
     * 동일한 설정 방식: 로거 및 추적기 설정이 양쪽 환경에서 일관됨
     * 메모리 추적 지원: 브라우저와 Node.js 모두 메모리 사용량 추적 기능 제공
     * 브라우저 최적화: API 호환성을 유지하면서도 브라우저 환경에 맞는 성능 최적화 적용
     * 실행 흐름 추적 일관성: 환경에 상관없이 복잡한 실행 흐름을 동일하게 추적 가능함
"
"https://news.hada.io/topic?id=20010","Show GN: 미니모: 필요한 기능만 있는 아이폰, 아이패드, 맥 '메모' 앱 (SwiftData vs CoreData)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 미니모: 필요한 기능만 있는 아이폰, 아이패드, 맥 '메모' 앱 (SwiftData vs CoreData)

   안녕하세요? 😊
   전 세계 사람들에게 '오직 필요한 기능만' 있는 '작은 앱(Small App)' 생태계를 제공한다는 목표로 디지털 제품을 만들고 있는 인디 해커(Indie Hacker)입니다.

   제가 만들고 있는 '스케줄러’ 앱과 ‘윤슬 가계부’ 앱 사용자 님들이 많아질수록 사용자 님들께서 주신 좋은 의견들도 무척이나 많아졌습니다. 그동안 기본 메모 앱에 의견들을 정리하고 있었는데, 기본 메모 앱은 ‘전체 검색’ 기능만 있을뿐 ‘폴더별로 검색’할 수 있는 기능이 없어서 같은 의견을 한 메모에 모으는 데 상당한 노력(?)이 필요했지요. 시간이 지날수록 의견들이 정말 많아져서 정리하기가 힘든 지경에 이르렀습니다.

   오랜 기간 동안 큰 불편을 느끼다가 그 불편을 해소하기 위해 ‘작은 메모 앱’을 만들기로 했습니다. 그렇게 2025년 2월 말 7번째 작은 앱 ‘미니모’를 출시했습니다 🥳

   ‘폴더별 검색’ 외에도 아이폰, 아이패드, 맥 어디서나 편하게 쓰실 수 있도록 긴 시간 설계(디자인)에 공을 들였습니다.

   아직 출시 극초기라 부족한 점이 많지만, 다른 작은 앱들처럼 사용자 님들과 함께 고민하며 더 나은 앱이 될 수 있도록 꾸준히 개선해 나갈 예정입니다 💪

   혹시 새로운 메모 앱이 필요하셨던 분께서는 한 번 편하게 써보시고, 의견 남겨주시면 정말 감사드리겠습니다!! 🙏

   메모. 오직 필요한 기능만.
   아이폰, 아이패드, 맥 메모 앱 ‘미니모’ 📝
   https://apps.apple.com/kr/app/id6740306187


   📌 [기술 고민] SwiftData vs CoreData
   기존에 운영하고 있던 '스케줄러’ 앱과 ‘윤슬 가계부’ 앱은 WWDC23에서 처음 선보인 SwiftData를 활용해 데이터를 관리하고 있습니다. 그러면서 '최신 기술'은 가능하면 Production 환경에서 쓰지 않는 게 좋겠다는 생각을 했지요. 그 이유는 아래와 같습니다.
     * 개발자가 제어할 수 없는 '내부 충돌'이 발생한다.
       --> CoreData를 사용했던 앱들에서는 전혀 발생하지 않았던 SwiftData 내부 충돌이 발생합니다. 문제는 이 충돌을 개발자가 직접 해결하기는 어렵고, 기술 개발사에서 해결을 할 때까지 기다려야 한다는 점입니다. 정확한 충돌 로그가 제공되지 않아서 디버그도 힘들뿐더러 말 그대로 프레임워크 내부적인 문제라 해결하기가 어렵습니다. 다행히 앱이 충돌하면서 강제 종료되거나, 문제가 발생하지는 않지만 해결할 수 없는 충돌 로그가 계속 나타난다는 건 상당히 신경이 쓰일 수밖에 없습니다.
     * 기능이 부족하다.
       --> 대표적으로 제가 운영하는 앱들에 '공유 일정이나 공유 가계부 등 데이터 공유' 기능을 추가하고 싶으나 아직 SwiftData로는 공유 기능을 만들 수가 없습니다. 그 외에도 CoreData에서 세세하게 설정할 수 있었던 기능들을 추가할 수가 없습니다.
     * 자료가 부족하다.
       --> 아직 모범 사례가 많지 않아 학습이 어려울 수 있습니다.

   SwiftData 출시 초기부터 이용한 결과 이번 미니모 앱을 만들 때는 안정성이 검증된 CoreData로 앱을 개발하는 게 좋겠다고 판단했습니다. SwiftData의 깔끔한 코드 스타일을 쓸 수 없다는 작은 아쉬움이 있지만, 확실히 안정적이고 추후 기능 확장이 자유로워 좋은 것 같습니다!

   언제나 건강 잘 챙기시실 바라겠습니다 💪
   행복한 주말 보내시길 바랄게요~! 🌈 ✨


   📌 작은 앱 프로젝트

   모든 앱들이 점점 더 복잡해지고 있습니다.

   생각해봤습니다.

   꼭 많은 기능과 서비스를 제공하는 복잡한 앱만이 사람들에게 유용할까? 필요한 기능만 제공하는 단순한 앱도 사람들에게 유용할 수 있지 않을까?

   미니모 앱은 그런 저의 생각에서 출발한 '작은 앱 프로젝트'의 '작은 앱' 중 하나입니다. 평균적인 앱의 복잡도가 크게 올라간 지금 이 시대에 사람들은 작은 앱에 어떻게 반응할 지 궁금합니다. 과연 슈퍼 앱들과의 경쟁에서 살아남을 수 있을까요?

   저는 2022년부터 '작은 앱 프로젝트'라는 도전을 이어나가고 있으며, 지금은 전 세계 사람들에게 '오직 필요한 기능만' 있는 '작은 앱(Small App)' 생태계를 제공한다는 목표로 꾸준히 새로운 작은 앱들을 만들고 개선해 나가고 있습니다.

   꼭 필요한 기능만 제공하는 단순한 '작은 앱'이 많은 분께 도움이 되기를 바랍니다 ☺️✨

   한번 설치해봤는데 기본적인 마크다운 문법도 가능해서 좋네요!

   안녕하세요? 😊 미니모 앱에 관심을 갖고 큰 힘이 되는 좋은 말씀 남겨주셔서 감사드립니다 🙏 마크다운도 메모나 노트 작성에 꼭 필요한 문법들만 추려서 제공할 계획이며, 현재는 최소한의 마크다운만 제공해 드리고 있습니다~! 사용자 님들과 함께 고민하며 꾸준히 발전시켜 나가도록 하겠습니다 💪

   미니모 앱 쓰시면서 불편하신 점이나 필요하신 게 있으시면 언제든지 댓글 남겨주시거나, 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 미니모가 사용자 님의 기록 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 기록을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   언제나 건강 잘 챙기셨으면 좋겠습니다 💪
   행복한 하루 되시기를 바랄게요~! 🌈✨

   메모 내보내기, 가져오기, 프린트 기능은 언제 지원 될까요?

   안녕하세요? 😎 미니모 앱에 관심을 갖고 귀중한 의견을 남겨주셔서 감사드립니다 🙌 말씀주신 기능 중 '내보내기' 기능은 추후 업데이트가 예정돼 있으며, 가져오기 및 프린트는 추후 업데이트 검토를 진행해 보도록 하겠습니다. 좋은 의견 남겨주셔서 감사드립니다 🙏 업데이트가 완료되면 앱 내 '개발자의 편지'로 소식 전해드리도록 하겠습니다 📮

   사용자 님들과 함께 고민하며 꾸준히 발전시켜 나가도록 하겠습니다 💪

   미니모 앱 쓰시면서 불편하신 점이나 필요하신 게 있으시면 언제든지 댓글 남겨주시거나, 앱 내 '의견 보내기'로 연락 주시면 빠르게 답변드리고 도와드릴 수 있도록 하겠습니다 📨

   꼭 필요한 기능만 제공하는 단순한 작은 앱 미니모가 사용자 님의 기록 관리에 도움이 되었으면 좋겠습니다! 단순함을 유지한 채로 더 편하게 기록을 관리하실 수 있도록 앞으로도 꾸준히 노력할 계획입니다.

   언제나 건강 잘 챙기셨으면 좋겠습니다 💪
   행복한 하루 되시기를 바랄게요~! 🌈✨
"
"https://news.hada.io/topic?id=20007","피라네시의 원근법 트릭피라네시의 원근법 트릭 (2019)

피라네시의 원근법 트릭

     * 피라네시와 그의 예술
          + 조반니 바티스타 피라네시는 18세기 예술가로, 로마의 건축물을 묘사한 '베두타' 에칭으로 유명함.
          + 그의 작품은 장소의 세부 사항을 정확히 기록하며, 당시의 다른 예술가들과 차별화된 독특한 원근법을 사용함.
     * 피라네시의 원근법 특징
          + 피라네시의 작품은 넓은 파노라마 뷰를 제공하며, 사진에서 흔히 볼 수 있는 왜곡이 없음.
          + 현대의 눈으로 보면 그의 원근법은 다소 이상하게 보일 수 있지만, 당시에는 기술적 능력으로 인정받았음.
          + 피라네시는 비슷한 객체가 멀리 있을수록 크기가 작아지는 일반적인 원근법 대신, 가까운 객체를 단순히 더 큰 크기로 그리는 방식을 사용함.
     * 파니니 투영법
          + 피라네시의 원근법을 소프트웨어로 구현하기 위해 '파니니 투영법'이 개발됨.
          + 파니니 투영법은 수직선과 방사선이 직선으로 유지되며, 가장자리 왜곡이 거의 없는 특징이 있음.
          + 이 투영법은 180도 이상의 넓은 시야각을 제공하며, 일반 사진처럼 보이게 함.
     * 피라네시의 원근법과 현대 기술
          + 피라네시의 원근법은 현대의 카메라나 컴퓨터 프로그램으로 구현할 수 없는 독특한 방식임.
          + 그의 원근법은 객체의 대각선이 평행하게 그려지는 특징이 있으며, 이는 일반적인 원근법과 다름.
          + 이러한 방식은 그림의 가독성을 높이며, 사진이나 TV에 익숙하지 않은 사람들에게 더 자연스럽게 보일 수 있음.
     * 응용과 가능성
          + 피라네시의 원근법은 이미지 편집기에서 사용되는 '호모그래피 매트릭스 변환'과는 다름.
          + 이 트릭은 2차원으로 확장 가능하며, 컴퓨터를 통해 다양한 방식으로 응용할 수 있음.
          + 피라네시의 원근법을 사용한 지도나 조감도는 더 읽기 쉬운 결과를 제공함.
     * 결론
          + 피라네시의 원근법 트릭은 역사적 예술가들뿐만 아니라 현대 예술가들에게도 여전히 사용되고 있음.
          + 이 트릭은 풍경을 조감도로 보여주면서도 지도로서의 가독성을 유지하는 데 유용함.

        Hacker News 의견

     * ""Piranesi""라는 책에 집착하고 있음. 주인공이 고전 건축, 조각상, 계단으로 가득 찬 세계에서 생존하는 이야기임. 매우 차분한 경험을 제공하며, 오디오북을 10번 이상 들었음. 강력 추천함
     * Piranesi의 왜곡이 더 읽기 쉽다는 의견이 있음. 사진이나 TV, 잡지에 익숙하지 않은 사람들에게는 Piranesi 버전이 더 나아 보일 것임. 이는 사람들이 종종 인식하지 못하는 중요한 포인트임
          + 현대 화가가 사진처럼 사실적인 그림을 그렸을 때, 그 기술에 대한 논의가 있음. 르네상스 화가들이 그런 기술을 갖추지 못했다고 평가받음
          + 사실적인 그림이 실제로 더 ""생생한""지에 대한 질문이 있음. 카메라가 보는 방식으로 세계를 표현하지만, 우리가 보는 방식과는 다를 수 있음
          + 인간의 뇌는 세부 사항을 채우고, 그림의 주제에 집중하며, 색조를 우리가 알고 있는 대로 재구성함. ""렌즈 블러""는 우리의 눈이 세계를 인식하는 방식과 다름
     * Unity와 Unreal에 Panini 프로젝션이 내장되어 있음. Unreal의 문서에서 두 프로젝션의 차이점을 명확히 비교할 수 있음
     * 이 기술이 정말 멋지다고 생각함. 카메라에서 멀리 떨어진 물체의 세부 사항을 볼 수 있어 더 나아 보임. 현실에서 물체에 계속 초점을 맞추는 것과 같음. 이 관점의 트릭은 내가 집중할 그림의 영역을 지도처럼 보여줌
          + 이 기술로 비디오나 게임을 렌더링하면 어떻게 될지 궁금함. 더 나은 그래픽의 해결책이 될 수 있을지, 움직임이 이를 망칠지 알고 싶음
     * panotools 위키에는 같은 사진의 다양한 프로젝션 비교가 있음. Google Streetview는 360° 이미지를 저장하기 위해 등각 사진을 사용함. Panini는 또 다른 유형의 등각임
     * Panini 프로젝션 논문이 읽을 만함. Unreal Engine에서 후처리 필터로 지원하지만, 이를 사용하는 게임은 모름
     * 예전에 스튜디오 지브리 배경의 관점을 분석한 기사나 다큐를 본 기억이 있음. 많은 배경이 예술적으로 ""왜곡""되어 있음. 한 아티스트는 서양의 1, 2, 3점 관점이 꼭 더 ""정확한"" 것은 아니라고 응답함
     * 카메라나 컴퓨터 프로그램으로 이런 뷰를 렌더링하는 것이 불가능하다는 의견이 있음. 수학적으로 간단하다면 프로그램을 작성할 수 있을 것임
     * 이 트릭이나 유사한 것이 스키 산 지도에 사용된다고 생각함. 왜곡이 비슷하게 느껴짐
     * 느낄 수 있지만 말로 표현하기 어려운 좋은 예임. Piranesi 버전이 더 읽기 쉽고, 가장 먼 집이 더 잘 보이며, 가장 가까운 집이 왜곡되지 않음. 이 효과를 쉽게 재현할 수 있는 포토샵 방법이 있었으면 좋겠음
"
"https://news.hada.io/topic?id=20069","markdown-to-slides - 마크다운을 슬라이드로 변환하는 웹앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                markdown-to-slides - 마크다운을 슬라이드로 변환하는 웹앱

     * Markdown을 아름다운 프레젠테이션 슬라이드로 변환
     * 실시간 마크다운 미리보기 : GitHub Flavored Markdown(GFM) 지원
     * KaTeX를 통한 수학식 렌더링
     * 완전 반응형 디자인 및 다크/라이트 테마
     * 내보내기 옵션 : PDF(고품질 렌더링), PPTX(커스터마이징 가능한 레이아웃 포함)
     * 코드 구문 강조 표시
     * 전체 화면 발표 모드 제공
     * 외부 링크 자동 인식 및 지원
     * 표(table) 지원
     * 체크리스트(Task List) 지원

   https://www.deckset.com/
   markdown to slide는 deckset을 잘 쓰고 있는데 구매하시지 않은 분들이라면 이 웹앱도 괜찮겠네요.

   https://marp.app/ 요것도 오래된 것인데 괜찮습니다.
"
"https://news.hada.io/topic?id=20090","FluentSubs - 뉴스와 같은 실제 콘텐츠로 배우는 Duolingo 스타일 언어 학습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FluentSubs - 뉴스와 같은 실제 콘텐츠로 배우는 Duolingo 스타일 언어 학습

     * Duolingo 방식의 청취 연습을 뉴스와 같은 실제 콘텐츠를 활용해 제공하는 학습 프로젝트
     * 모든 영상은 자동 자막보다 훨씬 정밀한 전사(Transcribe) 과정을 거쳐 높은 품질의 자막을 생성함
     * 품질이 높은 전사본을 필터링한 후, LLM이 학습에 적합한 문장 구간만을 선별해 연습 문제로 활용함
     * 이 과정을 통해 학습 콘텐츠의 정확성과 유용성을 보장하면서 짧고 집중도 높은 학습이 가능해짐
     * 기존 Duolingo의 게임화된 학습 방식에 비해 실제 상황에서 사용되는 언어 노출이 많아 실용적인 언어 습득에 도움을 줌
     * 개발자는 사이드 프로젝트로 제작했으며, 사용자 피드백을 적극 수렴 중

        Hacker News 의견

     * 일부 사람들은 특정 언어가 다른 언어보다 더 잘 작동한다고 불평함. AI의 발전으로 여러 언어로 확장하려는 유혹이 있음
          + 언어를 ""알파"" 상태로 두고, 커뮤니티 피드백에 따라 ""베타""와 ""1.0"" 상태로 진행하는 것이 좋음
     * 일본어 콘텐츠를 확인했지만, 실제 세계의 콘텐츠와는 거리가 멀다고 생각함
          + 대부분의 비디오에 자막이 포함되어 있어 연습의 목적을 상실함
          + 일부 단어가 부자연스럽게 분리되어 있어 이해하기 어려움
          + 실제 세계의 콘텐츠를 원한다면 직접 찾아야 함
     * UX 개선 제안: 단어를 클릭하여 빈칸을 채우는 기능 추가 필요
          + 드래그 방식은 터치스크린이 아닐 때 불편하고 접근성을 낮춤
     * UX의 긍정적인 측면: 링크를 클릭하여 즉시 사용해볼 수 있었음
          + 드래그 앤 드롭 방식이 기본 선택 과정으로는 불편함
          + Duolingo와 비교했을 때 UX가 훨씬 나음
     * 이 앱은 큰 잠재력을 가지고 있음
          + Duolingo는 무료라는 기대를 설정하여 비즈니스가 어려움
          + 언어 학습을 재미있고 관련성 있는 것과 연결하는 것이 근본적으로 더 나음
     * 스파이더맨 영화를 50번 듣는 실험을 시뮬레이션할 수 있는 도구를 찾고 있었음
     * 비슷한 것을 몇 달 전에 직접 만들기 시작함
          + 스페인어를 스페인과 라틴 아메리카로 나누기
          + 난이도 수준 추가 (말하기 속도와 사용되는 어휘 고려)
          + 비디오 주제를 선택할 수 있는 기능 추가
     * UX의 몇 가지 요소가 사용자 경험을 좌절시킬 수 있음
          + ""gaps""를 ""blanks""로 변경하여 영어 사용자에게 더 친숙하게 함
          + 드래그 앤 드롭 시 블록이 움직이지 않도록 함
          + 잘못된 답을 바로잡는 대신 사용자가 선택한 답을 보여줌
          + 모든 단어가 드롭된 후 문장을 전체적으로 확인할 수 있도록 함
     * 문장을 완료한 후 영어 번역을 보는 것도 좋을 것 같음
     * 이탈리아로 이사 중이며 이탈리아어 학습에 몰두하고 있음
          + 다양한 속도와 억양의 스피커를 좋아함
"
"https://news.hada.io/topic?id=19986","OpenPubkey SSH (OPKSSH) 오픈소스 공개 - SSH와 통합된 싱글 사인온 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         OpenPubkey SSH (OPKSSH) 오픈소스 공개 - SSH와 통합된 싱글 사인온 시스템

     * Cloudflare는 OPKSSH(OpenPubkey SSH)를 오픈소스로 공개함
     * OPKSSH는 OpenID Connect 기반 SSO 로그인으로 SSH 키를 자동으로 생성 및 사용하게 해줌
     * 사용자는 더 이상 SSH 공개키/비공개키를 직접 관리하거나 서버에 배포할 필요가 없음
     * SSH 프로토콜을 수정하지 않고도 SSH 인증에 ID 기반 접근 방식 도입 가능

SSO와 OpenID Connect 배경 설명

     * SSO(Single Sign-On)는 사용자가 한 번 로그인하면 여러 시스템에 접근할 수 있도록 하는 인증 방식
     * OpenID Connect는 SSO에 주로 사용되는 프로토콜로, 사용자 정보가 담긴 ID 토큰 발급
     * ID 토큰은 사용자 이메일 등 정보는 담지만, 공개키는 포함하지 않음 → SSH와 같은 보안 프로토콜에는 바로 사용 불가능

OpenPubkey 소개

     * OpenPubkey는 ID 토큰에 사용자 공개키를 포함시켜 PK Token으로 만들어줌
     * 이를 통해 “Google이 alice@example.com 사용자가 공개키 0x123을 사용 중”이라고 인증할 수 있음
     * 기존 OpenID Connect 프로토콜에 변경 없이 적용 가능함

OPKSSH의 역할과 장점

     * OPKSSH는 OpenPubkey를 SSH에 통합하여 SSO 로그인을 통해 일회용 SSH 키를 생성함
     * 기존 SSH 프로토콜에 변경 없이 작동하며, 설정 파일에 두 줄만 추가하면 적용 가능
     * 보안성 향상
          + 장기 키 대신 일회용 SSH 키 사용 → 키 유출 시 피해를 줄이고 키 수명 제한 가능
          + 기본적으로 24시간 만료, 설정으로 변경 가능
     * 사용자 편의성 향상
          + opkssh login 명령어 실행만으로 SSH 키 생성 및 로그인 가능
          + SSH 비공개키를 여러 컴퓨터에 복사할 필요 없음
     * 관리 가시성 향상
          + 키 기반 접근 대신 이메일 주소 기반 → 사용자가 누구인지 명확히 추적 가능
          + bob@example.com 같은 이메일을 접근 허용 파일에 추가하면 바로 접근 가능

OPKSSH 작동 방식

     * 사용자가 opkssh login 실행 시:
          + 임시 SSH 공개키/비공개키 생성
          + 브라우저로 OpenID Provider(Google 등)에 로그인
          + 성공 시, OpenPubkey 프로토콜을 통해 공개키와 사용자 신원을 담은 PK Token 생성
          + .ssh 디렉토리에 PK Token 포함된 공개키 파일과 비공개키 파일 저장
     * SSH 연결 시:
          + SSH 클라이언트가 PK Token 포함된 공개키를 SSH 서버로 전송
          + 서버는 AuthorizedKeysCommand로 설정된 OpenPubkey verifier를 통해 공개키 유효성 검사
          + PK Token이 유효하고, 이메일이 접근 허용 목록에 있으면 접속 승인

기술적 문제 해결

     * PK Token 전송: SSH 인증서의 확장 필드를 이용해 PK Token을 SSH 공개키에 포함시킴
     * 서버에서 유효성 검사: AuthorizedKeysCommand를 이용해 공개키의 유효성 검사를 커스텀 프로그램(OpenPubkey verifier)로 위임
     * 공개키 일치성 검증: SSH 세션을 보호하는 공개키가 PK Token 내의 키와 일치하는지 확인

오픈소스화와 그 의미

     * OPKSSH는 Apache 2.0 라이선스로 GitHub에 공개됨
     * 이전에는 프로토타입 수준이었으나, 이제는 완전한 SSH 기능으로 안정적인 릴리즈 제공
     * Cloudflare는 이를 유지하거나 보증하지 않지만, OpenPubkey 커뮤니티에 코드 기부함

주요 개선 사항

     * 실사용 가능한 SSH 기능 추가
     * 자동 설치 스크립트 제공
     * 개선된 구성 도구 포함

        Hacker News 의견

     * SSH 인증서가 오래전부터 존재해왔으며, 자체 SSH CA를 만들어 단기 인증서를 발급받을 수 있음
          + 인증서를 자동으로 받기 위한 다양한 옵션이 있으며, 그 중 하나가 step-ca 프로젝트임
          + step-ca는 OAUTH/OIDC 시스템과 클라우드 제공자와 통신할 수 있음
          + 상업적 솔루션도 존재함
     * SSH CA와 하드웨어를 사용하는 방법을 선호함
          + SSHD에서 타사 코드를 호출할 필요가 없어 공격 표면과 벡터를 최소화할 수 있음
          + 키 유출이나 재사용 공격을 완전히 방지할 수 있음
          + 기본 ssh-keygen 명령어로 모든 것을 수행할 수 있어 관리자의 관점에서 유리함
     * ID 토큰이 사용자 공개 키를 포함하지 않아 SSH 프로토콜을 직접 보호할 수 없다는 주장에 의문을 가짐
          + SSH 인증은 반드시 키 기반일 필요가 없음
          + GSSAPI를 통해 구현할 수 있었을지 궁금함
     * Teleport를 사용하여 인증서 기반 SSH 인증을 수행하며, SSO 인증으로 단기 인증서를 발급받음
          + 접근 제어와 감사 로그의 이점이 있음
     * Terminalwire라는 SSH 대안을 개발 중임
          + 개발자 워크스테이션에서 SaaS에 대한 일회성 명령 실행에 적합함
          + 서버에서 클라이언트로 stdio를 스트리밍하는 SSH와 유사하지만 추가 명령을 제공함
     * Userify의 SSH 키 기술과 비교함
          + Userify는 분산된 일반 키를 사용하며, 중앙 제어 평면만 중앙 집중화함
          + 인증 서버가 오프라인일 때도 서버에 로그인할 수 있음
          + 사용자 세션을 종료하고 계정을 삭제하는 기능이 있음
     * 블로그 게시물의 작성자이자 opkssh의 주요 기여자로서 질문에 답변할 준비가 되어 있음
     * OIDC를 지원하는 SSH CA를 운영하는 것과의 차이점을 알기 어려움
          + 서버는 CA의 키만 신뢰하면 됨
     * X.509 인증서 CA를 지원하는 OpenSSH 포크가 있음
          + 공개 키를 토큰으로 반환하는 표준과 이를 사용하여 SSH에 로그인하는 서버 측 인증 바이너리가 혁신적인 것으로 제시된 점이 재미있다고 생각함
"
"https://news.hada.io/topic?id=20087","게르마늄의 Electron Band Structure 논란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    게르마늄의 Electron Band Structure 논란

독일산 전자의 밴드 구조

     * 초록: 독일산 전자의 저항률이 온도에 따라 지수적으로 변화한다는 주장은 거짓임. 이론적 모델링과 실험을 통해 장비와 관련 문서들이 부실하다는 것을 발견함.

소개

     * 독일산 전자는 명확한 에너지 밴드에 갇혀 있으며, 이 밴드 사이에는 전하 운반자가 없는 ""금지 영역""이 존재함. 온도가 상승하면 전자가 비전도성 에너지 밴드에서 전도성 밴드로 이동하여 저항률에 변화를 일으킴. 이 관계는 특정 온도 범위에서 지수적으로 나타남.

실험 절차

     * 독일산 결정 중 가장 손상되지 않은 것을 선택하고, 결정에 전선을 납땜함. 납땜이 매우 어려웠으며, 실험실의 장비는 제대로 작동하지 않았음. 결국 연구실에서 더 나은 장비를 가져와 사용함. 온도를 제어하기 위해 구리 막대에 결정을 부착하고, 막대의 한쪽 끝은 가열 코일에, 다른 쪽 끝은 액체 질소가 담긴 보온병에 담갔음. 중간에 보온병이 새기 시작함.

결과

     * 2주 동안 직접 수집한 데이터임. 데이터에서 지수적 의존성을 찾을 수 없었음. 데이터에 지수 곡선을 그려 넣었으며, 복잡한 컴퓨터 프로그램을 사용하여 적합성을 높였음.

결론

     * 물리학을 전공한 것은 인생 최대의 실수였음. 컴퓨터 과학을 전공했어야 했음.

        Hacker News 의견

     * 고등학교 물리 수업에서 지구의 중력 가속도를 측정하는 실험을 했던 기억이 있음
          + 1990년대 손목시계의 스톱워치 기능을 사용해 공이 떨어지는 시간을 측정했음
          + 정확한 측정이 어려웠고, 데이터의 오차가 매우 컸음
          + 결과적으로 중력 상수를 잘못 계산했고, 낮은 점수를 받았음
          + 교육에서는 결과가 중요하며, 과학도 마찬가지라는 교훈을 얻었음
     * 1999년에 대학에 입학할 때 이 글을 읽었음
          + 학생이 대학 생활의 현실을 보여주는 것이 신선했음
          + 저자는 컴퓨터 과학으로 전향하여 위스콘신 대학교에서 박사 학위를 받았음
     * 20년 전 반도체 제작 실험 수업의 조교로 일했음
          + 학생들이 HF를 다루는 것에 대한 두려움을 갖게 하는 것이 주된 목표였음
          + 실험의 마지막 부분에서 트랜지스터를 특성화하는 작업이 있었음
          + 다른 조교들과 함께 이 글을 재미있게 읽었음
     * 복잡한 컴퓨터 프로그램을 사용해 데이터를 맞춘 것이 정당성을 높였다는 의견이 있음
          + 이는 웃기면서도 흔한 일임
          + 초고속 응집 물질 물리학 분야에서는 많은 노이즈가 곡선 맞추기로 합리화됨
     * 연구 관심사를 컴퓨터 비전에서 양자 화학의 DFT 계산으로 바꾸었음
          + 많은 연구가 비공개 소스라 답답함
          + 연구 논문이 재현하기 어렵게 작성되어 있음
     * 학부 화학과 통계학에서 배운 주요 교훈은 부정확한 결과를 현실적으로 보이도록 조작하는 것임
          + 장비의 부정확성을 핑계로 삼고, 다시 시도할 시간이나 돈이 부족함
     * 이 짧은 글을 진실로 받아들이고 물리학에 대한 비판으로 보는 특별한 사고방식이 필요함
     * 페이지의 HTTP 헤더가 인상적임
          + HTML 코드 구조가 그 시대와 완벽히 일치함
     * 글이 재미있지만, 밴드 구조와 고체 이론이 가장 아름다운 물리학 중 하나라는 점을 강조해야 함
          + 이 이론이 사회를 변화시킨 것은 부차적인 것임
"
"https://news.hada.io/topic?id=19991","보츠와나, SpaceX Falcon 9에 탑재된 첫 위성 BOTSAT-1 발사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              보츠와나, SpaceX Falcon 9에 탑재된 첫 위성 BOTSAT-1 발사

보츠와나, 첫 위성 BOTSAT-1 성공적 발사

     * 발사 개요
          + 보츠와나의 첫 위성 BOTSAT-1이 2025년 3월 15일, 미국 반덴버그 우주 기지에서 SpaceX의 Falcon 9 로켓을 통해 성공적으로 발사됨.
          + Falcon 9 로켓은 총 74개의 위성을 탑재하였으며, 이 중에는 BOTSAT-1, NASA의 Electrojet Zeeman Imaging Explorer (EZIE) 임무를 위한 CubeSat 3개, Kongsberg NanoAvionics의 N3X 별자리용 Arvaker 1이 포함됨.
     * BOTSAT-1의 개발과 발사
          + BOTSAT-1은 보츠와나 국제 과학기술대학교(BIUST)와 EnduroSat의 협력으로 개발된 3U 하이퍼스펙트럼 지구 관측 위성임.
          + ExoLaunch가 SpaceX와 협력하여 Transporter-13 소형 위성 공유 프로그램의 일환으로 발사를 관리함.
          + 보츠와나 대통령 Duma Gideon Boko는 미국 방문 중 위성 발사에 참석하였으며, SpaceX와의 향후 협력을 위한 다양한 시설을 방문함.

주요 임무 목표

     * 임무 목표와 기술 개발
          + BOTSAT-1은 약 500km의 근극 궤도와 태양 동기 궤도에서 발사되어, 식량 안보, 환경 보존, 도시 계획 등 국가 개발 우선순위를 위한 중요한 지구 관측 데이터를 제공할 예정임.
          + 프로젝트는 보츠와나 엔지니어들의 인적 역량 개발을 촉진하여, 위성 개발에 대한 실무 경험을 제공함으로써 기술 역량을 강화함.
          + BOTSAT-1은 BIUST에 위치한 지상국을 통해 데이터를 전송하며, 동서 방향으로 보츠와나를 스캔하여 약 32km의 폭과 12m의 해상도를 제공함.
     * 아프리카의 위성 발사 현황
          + BOTSAT-1의 발사로 아프리카의 총 위성 발사 수는 65개로 증가하였으며, 이는 농업, 자원 관리, 재난 대비 등 지역 문제 해결을 위해 위성 데이터를 활용하는 10개국에 합류함을 의미함.

보츠와나, Dragonfly Aerospace와의 협력으로 우주 기술 발전

     * 첨단 기술 통합
          + 보츠와나는 Dragonfly Aerospace의 Mantis 하이퍼스펙트럼 이미저를 사용하여 환경 모니터링, 자원 관리, 농업 연구를 위한 고급 이미징 기능을 제공함.
          + Dragonfly Aerospace는 BIUST의 클린룸 시설 개발을 지원하며, 이는 위성 조립, 통합 및 테스트를 위한 필수 환경임.
          + 이 시설은 학생과 연구자들에게 실습 학습 기회를 제공하며, 지속 가능한 우주 기술 프로젝트의 파이프라인을 구축할 수 있도록 지원함.

        Hacker News 의견

     * 많은 사람들이 보츠와나 출신이 아님에도 강한 의견을 내고 있음. 실제로 우리는 이 상황에 대해 긍정적으로 생각함
          + 보츠와나에 과학기술 대학을 설립하는 것은 오랜 시간과 많은 실수를 거친 어려운 길이었음
          + 하지만 이제 보츠와나가 위성을 배치하고 데이터를 활용할 수 있는 현지 기술을 보유하게 된 것은 놀라운 일임
          + 나는 현재 대학이 위치한 마을에서 자랐음. 과거에는 고립된 상태였고, 미국의 소리를 들으며 선진국에서 이루어지는 일들을 경이롭게 바라보았음
          + 현지 대학에 다니며 위성을 우주로 발사할 수 있는 똑똑한 아이가 자라날 수 있다는 사실은 놀라운 일임
          + 보츠와나 사람들을 위해 궤도에 있는 전체 위성임. 많은 엔지니어링이 포함된 쾌거임
     * 비슷한 맥락에서 과테말라도 첫 번째 위성 QUETZAL-1을 발사했음. 211일 동안 우주에 있었음
          + 기술이 선진국의 위성과 비교해 획기적이지는 않지만, 미래의 STEM 학생들에게 영감을 주는 데 있어서는 큰 의미가 있음
          + 두뇌 유출은 실제 문제임. 작은 국가에서 과학 경력을 위한 경로를 제공하는 것은 객관적으로 좋은 일임
     * 성과를 깎아내리고 싶지는 않지만, SpaceX라는 상업 발사 제공업체를 통해 발사한 것이지 자체 개발한 로켓으로 발사한 것은 아님
     * 90년대 영국의 기술 스릴러 ""Bugs"" 에피소드의 줄거리와 놀랍도록 유사함
          + 실제 사건에서는 아마도 사보타주와 우주 레이저 무기는 없을 것임
     * 작은 개발도상국인 아프리카 국가가 위성을 발사하고 SpaceX를 발사체로 사용했음
          + 이 스레드의 감정은 지나치게 격앙되어 있음
          + 시대의 징조일지도 모름
     * 왜 이 게시물에 이렇게 많은 부정적인 반응이 있는지 이해할 수 없음. 이는 글로벌 과학 및 기술 발전 측면에서 긍정적인 일임
     * 더 많은 사람들이 위성 공학에 재능을 발휘하는 것이 멋지다고 생각함
"
"https://news.hada.io/topic?id=19987","Playwright MCP - LLM을 위한 웹 브라우저 자동화용 MCP 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Playwright MCP - LLM을 위한 웹 브라우저 자동화용 MCP 서버

     * Playwright를 기반으로 동작하는 MCP(Model Context Protocol) 서버
     * LLM이 웹 페이지와 상호작용할 수 있도록 구조화된 접근성 스냅샷을 제공하여 빠르고 가벼움
     * 스크린샷이나 비전 모델 없이 구조화된 텍스트 기반 데이터만으로 웹 자동화를 구현
     * 용도 : 웹 페이지 탐색 및 폼 자동 작성, 구조화된 콘텐츠에서의 데이터 추출, LLM 기반 자동화 테스트, 에이전트 기반 일반 웹 브라우저 제어

설치

     * config
{
  ""mcpServers"": {
    ""playwright"": {
      ""command"": ""npx"",
      ""args"": [
        ""@playwright/mcp@latest""
      ]
    }
  }
}

     * VSCode에 바로 설치 가능 : Install in VS Code Insiders
          + 설치 후, VSCode의 GitHub Copilot 에이전트에서 Playwright MCP를 사용할 수 있음

Snapshot Mode 도구 목록

     * browser_navigate: URL로 이동
     * browser_go_back / go_forward: 뒤로/앞으로 이동
     * browser_click / hover / drag: 요소 클릭, 호버, 드래그
     * browser_type: 입력란에 텍스트 입력 (옵션: submit)
     * browser_select_option: 드롭다운 선택
     * browser_press_key: 키보드 키 입력
     * browser_snapshot: 접근성 스냅샷 캡처
     * browser_save_as_pdf: 페이지를 PDF로 저장
     * browser_wait: 지정 시간 대기 (time은 최대 10초)
     * browser_close: 페이지 닫기

Vision Mode 도구 목록

     * browser_navigate / go_back / go_forward
     * browser_screenshot: 스크린샷 캡처
     * browser_move_mouse / click / drag: 좌표 기반 마우스 제어
     * browser_type: 좌표 위치에 텍스트 입력
     * browser_press_key
     * browser_save_as_pdf
     * browser_wait
     * browser_close

        Hacker News 의견

     * 이 도구는 매우 좋음. Claude Code와 함께 사용하여 큰 성공을 거두고 있음
          + CLAUDE.md에 Playwright로 변경 사항을 검증하라는 지시를 남겨둠
          + 자동으로 개발 서버를 시작하고, 변경된 페이지로 이동하여 변경 사항이 작동하는지 검증함
          + 예기치 않은 것이 있으면 스스로 수정함
          + 정말 뛰어난 중급 엔지니어와 함께 일하는 것 같음
          + 지금이 정말 놀라운 시대임
     * ariaSnapshot를 사용하여 DOM의 접근 가능한 표현을 제공함
          + 그러나 Gmail 같은 곳으로 이동하면 모델 컨텍스트가 빠르게 소진됨
          + 더 간결한 페이지의 텍스트 표현을 실험 중임
          + 자신의 크롬 세션을 사용하고 큰 컨텍스트 크기가 필요하지 않음
          + CDP에 사용할 수 있는 aria 인터페이스로 리팩토링할 수도 있음
     * JIRA MCP와 결합하여 버그 티켓의 ""재현 단계""를 읽고 실제로 재현할 수 있는지 확인할 예정임
          + MCP에 대한 비판을 이해하지 못하겠음
          + ""커넥터""의 캄브리아 폭발을 보는 것은 정말 흥미로움
          + 이는 OpenAI의 커스텀 GPTs가 되지 못했던 모델의 ""앱 스토어""가 될 것임
     * Microsoft의 새로운 도구는 MCP-Playwright의 경쟁자로 보임
          + Microsoft의 도구가 더 간단해 보이며, 다른 도구는 더 많은 기능을 가짐
     * 훌륭한 릴리스임. 그러나 왜 원래의 Playwright API를 지원하지 않고 행동의 하위 집합만 지원하는지 궁금함
     * Playwright를 모르지만, Puppeteer와 어떻게 다른지 궁금함
          + Puppeteer의 문제는 쿠키 동의 배너 수락과 같은 간단한 작업을 완료하기 위한 올바른 자바스크립트를 즉시 얻지 못할 때가 있음
     * 여러 번 제출했으며 더 많은 이야기를 듣고 싶음
          + Fetch-MCP도 있으며, 이는 Playwright 기반으로 배치를 지원함. 비교해보면 흥미로울 것임
     * Capybara를 위한 MCP가 필요함. LLMs가 나의 Rails 시스템 테스트를 작성하고 작동하지 않을 때 디버그할 수 있도록
     * ""code --add-mcp""
          + Vscode에 내장된 MCP 클라이언트가 있는지 궁금함
     * 이 도구는 테스트 자동화를 위한 것인지, 아니면 에이전트에서 ""Operator""로 Playwright를 사용하는 것인지 궁금함

   cursor에 playwright mcp 연결해봤는데, 나무위키 페이지는 아예 읽지 못하네요..

   아마 봇 차단때문에 그런 것 같습니다.

   어제 봤을 땐 몰랐는데 마이크로소프트네요 ㄷㄷ 써봐야겠다
"
"https://news.hada.io/topic?id=20024","xAI가 X를 인수, xAI의 현재 가치는 $80B(117조원)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  xAI가 X를 인수, xAI의 현재 가치는 $80B(117조원)

     * @xAI 가 @X 를 전액 주식 거래 방식으로 인수함
          + 이 거래로 xAI의 기업 가치는 약 800억 달러로 평가됨
          + X는 450억 달러 가치에서 120억 달러 부채를 제외한 330억 달러로 평가
     * xAI는 설립 2년 만에 세계적인 AI 연구소로 자리잡았고, 모델 개발과 데이터 센터 구축을 빠르고 대규모로 진행해옴
     * X는 6억 명 이상의 활성 사용자가 모이는 실시간 정보 공유의 디지털 광장 역할을 하고 있음
          + 최근 2년간 효율성 중심으로 조직이 재편되었으며, 확장 가능한 미래 성장을 위한 기반을 마련함
     * xAI와 X의 미래는 긴밀하게 연결되어 있음
          + 이번 합병을 통해 데이터, AI 모델, 연산 자원, 배포 채널, 인재를 통합함
          + xAI의 고급 AI 역량과 X의 방대한 도달 범위를 결합해 수십억 명에게 더 똑똑하고 의미 있는 경험을 제공할 예정임
          + 이 플랫폼은 단순히 세상을 반영하는 것을 넘어서 인류 발전을 가속화하는 것을 목표로 함
     * xAI와 X의 모든 구성원의 노력과 헌신을 인정하며 감사함
          + 이번 합병은 시작일 뿐이며, 더 큰 미래를 향한 출발점임

        Hacker News 의견

     * 그는 이전에 Tesla가 Solar City를 인수할 때와 같은 움직임을 보였음. 자신과의 거래에서는 자산에 원하는 가치를 부여할 수 있으며, 이는 경쟁적인 과정이 아님. 이전의 경우 Solar City는 어려움을 겪고 있었지만 Tesla의 인수로 인해 큰 시너지 효과가 있는 것으로 홍보되었음
          + Tesla 주주들로부터 자기 거래에 관한 몇 건의 소송이 있었지만 성공하지 못했음
     * 그는 자신이 이미 소유한 회사를 자신에게 팔았으며, 그 회사에 자신이 부여한 가치보다 낮은 가격으로 평가했음. 그리고 그는 자신이 발행한 ""가치가 만들어진 돈""으로 전액을 지불했음
     * 비슷한 소식으로, 오늘 내 왼손이 내 오른손을 주식 전액 거래로 인수하여 두 손의 가치를 $1조로 평가했음. 발표를 칭찬하며 내 팔은 ""이 두 손이 함께하면, 우리의 결합된 힘으로 할 수 없는 것이 없다""고 언급했음. 경쟁자인 내 왼발과 오른발은 합병에 대해 언급을 거부했지만, 별도의 거래에 대한 논의가 진행 중이라고 함
     * 이 움직임은 TSLA의 내부 숫자가 좋지 않다는 것을 더 가능성 있게 만들며, Elon은 가격 하락을 예상하고 있음. 그는 실제 수익 숫자에 접근할 수 있음. 잘 되고 있다면 이런 조치를 취할 필요가 없었을 것임. xAI는 X와 TSLA와 상대적으로 분리되어 있었으며, 두 회사와 관련된 반발을 겪지 않았음. 이제 그는 xAI 브랜드가 손상될 위험을 감수하고 있음. TSLA 내부 숫자가 나쁘고 자신을 먼저 보호해야 한다면 이런 일을 하지 않았을 것임
     * 그는 현재 자신을 구제하고 있으며, Tesla 주식의 붕괴는 그가 X를 사기 위해 빌린 대출을 상환할 수 없게 만들 가능성이 큼. 솔직히 xAI에 모든 돈을 쏟아부은 VC들이 동의한 것이 놀라움. 그는 여전히 지배적인 지분을 가지고 있을 것이라고 추측함
     * 여기서의 전략은 무엇인가? xAI에 투자된 돈과 그 부풀려진 평가를 사용하여 X 투자자들을 구제하는 것인가?
     * Tesla의 매우 높은 P/E 비율은 그 가치가 단순히 자동차에만 묶여 있지 않기 때문임을 알고 있음. 따라서 xAI가 Anthropic보다 $20B 더 높은 가격으로 평가된다고 해서 xAI의 AI 제품이 Anthropic의 것보다 훨씬 뛰어나다는 것을 의미하지 않음(예: 아마도 xAI의 가치는 Tesla FSD, Optimus, Neurolink와의 시너지에 묶여 있을 것임). 하지만 xAI가 실제로 제공하는 제품은 무엇인가? Grok이 프리미엄 X 구독의 추가 기능이라는 것 외에
          + Grok API는 한 달 이상 전에 출시된 Grok 3에 접근할 수 없으며, 자체 SDK도 없음
          + Grok 사용자는 다른 LLM 제공업체에서 이동했을 수 있음. xAI API는 OpenAI 및 Anthropic SDK와 호환되도록 설계되었지만, 각각의 SDK에서 제공하지 않는 특정 기능은 제외됨. 두 SDK 중 하나를 사용할 수 있다면, 안정성을 위해 OpenAI SDK 사용을 권장함
          + 모든 코드 예제는 from openai import OpenAI 호출을 포함함
          + Grok을 사용하는 것이 어떤 기업에게 어떻게 실용적일 수 있는가? 그리고 Grok의 API가 OpenAI의 대체품으로 설계되었다면, OpenAI의 오픈 소스 SDK와 API 사양을 기반으로 자체 SDK 변형을 만들어낼 수 없는 이유는 무엇인가?
     * X의 CTO가 재조직을 좋아하지 않았다고 추측할 수 있는가? 3일 전 ""X의 엔지니어링 디렉터인 Haofei Wang이 회사를 떠났다""
     * 내 Ford Edge를 아내에게 $1.3bn에 팔았음 - 전액 주식으로
     * SEC가 여전히 기능하고 있다면, 이 문제에 대해 큰 관심을 가질 가능성이 큼
"
"https://news.hada.io/topic?id=20095","Dagger Shell - 컨테이너 시대를 위한 새로운 쉘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Dagger Shell - 컨테이너 시대를 위한 새로운 쉘

     * Unix 쉘은 50년 이상 사용되어 왔으며, 단순한 명령어로 복잡한 동작을 조합할 수 있는 강력한 컴퓨팅 도구였음
          + 그러나 현대 소프트웨어 스택은 훨씬 복잡해졌고, 기존 쉘로는 이 모든 작업을 다루기 어려움
          + Docker, make, powershell, nix 등에서 영감을 받아, 컨테이너, 시크릿, 서비스 엔드포인트, 선언형 실행, 캐시 및 샌드박싱 등을 기본 지원하는 현대적인 쉘이 필요해짐
     * Dagger Shell은 Dagger Engine을 위한 bash 문법 기반 프론트엔드로, 빌드, 테스트, 배포, 임시 환경 등 다양한 자동화 작업에 활용 가능
     * 시스템 쉘을 대체하기보다는 보완하는 도구로, 복잡한 워크플로우를 간단한 모듈 조합으로 구성할 수 있도록 도와줌
container |
  from alpine |
  with-exec apk add git |
  terminal

     * 쉘과 코드만 있으면 충분함
          + 복잡한 스크립트를 처리할 때 이상한 DSL을 배우는 대신, 실제 프로그래밍 언어로 작성 가능
          + Go, Python, Typescript, Java, PHP 등 다양한 언어용 SDK 제공
          + 언어로 작성한 함수를 Dagger의 새로운 프리미티브로 확장 가능
     * API와 연결된 쉘
          + Dagger Shell은 Dagger API 클라이언트 역할을 하며, 타입이 지정된 객체, 문서화, 재사용 가능한 모듈 생태계(Daggerverse) 접근 가능
          + 예를 들어, Trivy 보안 스캐닝 모듈을 로드하고 실행 가능
     * 기본 샌드박스 환경
          + 모든 명령은 기본적으로 샌드박스에서 실행되며, 파일, 시크릿, 서비스 등의 접근은 명시적으로 지정해야 함. 약간 더 장황하지만, 반복 가능성과 안전성이 높아짐
container |
  from alpine |
  with-secret-variable POSTGRES_PASSWORD op://dev/db-password/credential |
  with-directory /src ~/src/myapp |
  with-service-binding db tcp://localhost:5432 |
  terminal

     * 간단한 컨테이너 빌드
          + Alpine 기반 컨테이너 생성, 텍스트 파일 삽입, 메시지 출력 설정, 임시 레지스트리에 푸시까지 한 번에 실행 가능
          + Dockerfile 작성과 빌드 명령, 푸시 사이의 컨텍스트 전환 없이 처리 가능
# Build a wolfi linux container with curl, then test connection to stable and dev docs
github.com/dagger/dagger/modules/wolfi | container --packages=curl |
  with-service-binding docs-stable $(github.com/dagger/dagger/docs@v0.17.1 | server) |
  with-service-binding docs-dev $(github.com/dagger/dagger/docs@main | server) |
  with-exec curl http://docs-stable |
  with-exec curl http://docs-dev

     * 테스트 환경 구성
          + CI에서 자주 발생하는 문제인 테스트 환경 구성도 간단하게 처리 가능
          + 네이티브 서비스 바인딩 지원으로 여러 라이브 인스턴스를 연결하고 테스트 가능
repo=$(git https://github.com/dagger/hello-dagger | head | tree)

env=$(container | from node:23 | with-directory /app $repo | with-workdir /app)

build=$($env | with-exec npm install | with-exec npm run build | directory ./dist)

container | from nginx | with-directory /usr/share/nginx/html $build | terminal --cmd=/bin/bash

     * 다단계 빌드(Multi-Stage Builds)
          + 명확하고 모듈화된 문법으로 복잡한 빌드 파이프라인 구현 가능
          + 각 단계를 변수로 명시하여 디버깅 및 재사용이 쉬움
container |
  from golang:latest |
  with-directory /src $(git https://github.com/dagger/dagger | head | tree) |
  with-workdir /src |
  with-exec go build ./cmd/dagger |
  file ./dagger |
  export ./dagger

   참고로 링크가 https://dagger.io/blog/… 주소로 변경됐습니다

        Hacker News 의견

     * 요즘 Dagger의 실제 용도를 파악하기가 점점 어려워지는 느낌임
          + 처음에는 Jenkins를 대체할 수 있을 것이라고 기대했음
          + CI 파이프라인을 로컬에서 실행하고 디버그할 수 있는 대안 제공
          + Golang으로 작성하고 필요한 것을 가져올 수 있었음
          + 지금은 방향이 산만해져 Docker를 대체하려고 하고, 새로운 셸이 되려 하며, 이상하게 Langchain이 되려는 것 같음
          + 새로운 CLI 인자가 기존의 셸 스크립트나 Jenkinsfile보다 나을 게 없음
          + 프로젝트가 원래의 목표에서 벗어난 것 같아 아쉬움
     * Dockerfile과 셸 스크립트를 조합하여 다양한 이미지를 구성하는 일이 많음
          + 개발자 머신, 로봇, CI 등 환경에 따라 다르게 실행해야 함
          + 이 도구가 그 복잡함을 해결할 수 있을 것 같음
          + 빌드의 출력을 참조할 수 있어 태그를 다루지 않아도 되는 점이 좋음
     * Dagger가 Docker를 대체하려 한다는 사실을 놓쳤음
          + 큰 비전임
          + 야심찬 시도지만, 지금 당장 기존 도구를 대체할 수 있을 것이라는 믿음으로 이어지기 어려움
          + Bash 호환성을 선택한 점이 아쉬움
          + Bash의 문법과 문제점에서 벗어나야 할 시점이라고 생각함
     * Dagger Shell 스크립트를 노트북 형식으로 작성할 수 있는 웹 UI가 이미 만들어져 있음
          + 매우 흥미로움, 확인해보길 추천함
     * Dagger의 홈페이지 설명을 보고 궁금증이 생김
          + ""크로스 플랫폼 구성 엔진""
          + 모듈형 구성 요소와 간단한 함수로 강력한 소프트웨어 환경을 구축
          + 복잡한 빌드와 AI 워크플로우에 적합
          + 너무 일반적이라 쓸모없음
          + 모든 것이 구성 엔진임. Javascript도, macOS도 구성 엔진임
     * 관련된 자기 홍보
          + Docker 셸 컨테이너: https://github.com/jrz/container-shell
     * 컨테이너 내부에서 개발 작업을 하려는 목적인가?
          + Jetify의 Devbox와 Flox.dev가 떠오름
     * 명확히, 이 도구로 무엇을 할 수 있을까?
          + 어떤 활동에 도움이 되는가?
          + 어떤 프로그램을 대체할 수 있는가?
          + ""DevOps 운영 체제""는 무엇을 하는가?
     * 초기 인상은 Dockerfile과 실제 코드로 소프트웨어를 정의하고 구성하는 것의 중간 단계 같음
          + Nix를 많이 사용하는 사람으로서 매력적이지 않음
     * Dagger가 제품 방향을 바꾼 것인가?
          + 독립적인 파이프라인-코드 서비스가 주요 판매 포인트였던 것으로 기억함
          + 이제 Docker를 재구성하려는 것 같음
"
"https://news.hada.io/topic?id=20100","Ted Sarandos와 Netflix의 할리우드 혁신 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Ted Sarandos와 Netflix의 할리우드 혁신 이야기

     * Netflix 공동 CEO Ted Sarandos는 Apple TV+ 시리즈 ""The Studio""에서 자기 자신을 연기하며 연기 데뷔 예정
     * 경쟁 스트리밍 플랫폼에 출연하는 모습이 아이러니하지만 유쾌하게 받아들임
     * 대사를 까먹지 않기 위해 촬영 현장에서 긴장했으며, 제작에 피해 주지 않으려 노력함

[스트리밍 제국을 세운 남자]

     * Sarandos는 넷플릭스를 DVD 우편 대여 서비스에서 글로벌 스트리밍 제국으로 성장시킨 주역
     * ""Stranger Things"", ""Squid Game"", Adam Sandler와의 계약, Shondaland의 스트리밍 전환 등 굵직한 프로젝트 주도
     * 25년 전 영상 대여점 점원이었던 그는 이제 할리우드 중심의 파워 플레이어로 자리잡음
     * 영화관에 대한 애정도 여전
          + 넷플릭스가 전통적 영화 관람 문화를 약화시킨다는 비판에도 불구하고 Sarandos는 영화관을 여전히 사랑함
          + 역사적인 Egyptian Theatre를 인수 및 리노베이션하여 시상식 유권자 대상 프라이빗 상영 공간으로 활용
     * 25년간의 여정과 비하인드
          + 넷플릭스 초기 시절, DVD 재고를 판매해 임대료를 충당해야 할 정도로 자금 압박이 심했음
          + 첫 사무실조차 없는 상태에서 스튜디오들과 직접 통화하며 콘텐츠 계약을 체결해 나감
          + 현재는 3억 명의 글로벌 구독자를 보유하고 연간 콘텐츠 예산만 180억 달러 규모
     * 비판과 위기를 넘어
          + 비평가들은 넷플릭스가 산업을 파괴하고, 대중을 동일한 콘텐츠로 중독시켰다고 주장
          + 그러나 Sarandos는 이러한 비판조차도 인터넷 시대의 일부라며 담담하게 받아들임
          + 2011년과 2022년 두 번의 주가 폭락을 겪었지만, 각 위기에서 교훈을 얻고 회복에 성공
     * 넷플릭스 철학과 Sarandos의 비전
          + 콘텐츠, 선택, 대화, 상업성에 더해 ""컴백(comeback)""을 다섯 번째 핵심 요소로 강조
          + 단기 수익보다 장기적인 스트리밍 제국 건설에 초점을 맞추며 미래를 내다보는 전략 고수
          + Sarandos는 여전히 '모든 콘텐츠의 왕'으로 불리며, 전 세계 시청 문화를 재정의하는 중

[Ted Sarandos와의 Q&A 인터뷰]

  넷플릭스에서 25년을 보낸 소감

     * ""폭주 기관차 같음. 매년이 전혀 다름""
     * 퇴사 고민은 단 한 번도 없었음

  2025년 가장 기대되는 콘텐츠

     * ""Stranger Things"" 최종 시즌: 눈물 없이는 못 볼 작품
     * ""Squid Game"" 시즌 3, ""Wednesday"" 복귀
     * Guillermo del Toro, Noah Baumbach, ""Knives Out"" 신작 등 영화 라인업도 풍성
     * 넷플릭스 역사상, 어쩌면 TV 역사상 가장 큰 시리즈들이 한 해에 모두 돌아옴

  ""Stranger Things"" 이후의 가능성

     * ""Stranger Things""는 하나의 거대한 유니버스
     * 소설, 소비자 제품, 웨스트엔드 공연, 브로드웨이 개봉 예정인 프리퀄 ""The First Shadow"" 등 확장 세계 구축 중

  오리지널 콘텐츠와 스트리밍 영화의 진화

     * ""House of Cards"" 이후 본격적 오리지널 콘텐츠 시도
     * ""Beasts of No Nation"" 이후 스트리밍 영화도 본격화
     * 콘텐츠 유통 방식에서 혁신을 이끈 점을 회상

  마블과의 역사적 계약

     * 넷플릭스의 마블 계약이야말로 TV 역사상 가장 큰 딜
     * 파일럿 없이 13개 에피소드로 시즌 5개 제작, 크로스오버 시즌 포함
     * ""Daredevil"", ""Jessica Jones"", ""Luke Cage"" 포함

  마블과의 협업에서 배운 점

     * 디즈니의 독립 마블 TV 부서와 작업, 제작비를 아끼려는 경향이 강했음
     * 넷플릭스는 품질 중심, 마블은 수익 중심으로 갈등 발생
     * “인센티브가 잘 맞는 파트너와 일해야 한다”는 평생의 교훈 얻음
     * 품질 향상을 위한 추가 요청은 매번 일종의 ‘주먹다짐(fistfight)’처럼 힘겨웠음

  2022년 4월의 대폭락 사태

     * 하루 만에 시가총액 540억 달러 증발
     * 이전에도 2011년과 우편 대여 시대에 유사한 위기 경험
     * 초창기에는 DVD 재고를 대량 판매해 임대료 충당했던 경험도 있음

  위기 대응 전략

     * 내부에서는 사업 모델이 여전히 유효하다는 결론 후 침착하게 대응
     * 주주에 대한 책임감이 가장 컸으며, 이후 조직 전체가 반등을 위한 결의 다짐
     * 멕시코시티에서 모든 VP들과 리더십 회의 진행
     * 기존 4대 핵심 요소(content, choosing, conversation, commerce)에 ‘comeback’을 다섯 번째 C로 추가

  Disney 등 콘텐츠 공급자가 경쟁사로 변한 상황에 대한 시각

     * 팬데믹 초기에 Disney 등 기존 파트너들이 자체 스트리밍 서비스 런칭
     * 이에 대해 Sarandos는 넷플릭스가 더 잘할 것이라는 자신감 있었음
     * 넷플릭스는 장르에 한정되지 않고, 개인화 기술에 막대한 투자를 해온 것이 큰 장점
     * 다큐멘터리를 좋아하면 넷플릭스는 다큐의 집, 드라마를 좋아하면 드라마의 집이라는 식으로 모든 장르에 강점 보유

  Amazon, Apple에 대한 평가

     * Amazon의 전략은 여전히 명확히 파악하기 어려우며, 스포츠는 효과적인 분야로 보임
     * 콘텐츠 제작과 스트리밍 시작 시기도 넷플릭스와 동일하지만 장기 전략은 불분명하다고 언급
     * Apple은 마케팅 관점에서 접근하는 것으로 보이며, 정확한 방향성은 알 수 없음
     * “똑똑한 사람들이니 우리가 보지 못한 무언가를 보는 것일 수도 있음”

  HBO의 브랜드 변화에 대한 반응

     * HBO가 ""HBO Max""에서 ""Max""로 이름을 변경한 것에 대해 놀라움을 표함
     * 원래 HBO, HBO Go, HBO Now, HBO Max가 존재했을 때는 하나로 통합될 거라 예측했지만, HBO라는 브랜드가 완전히 사라질 줄은 예상 못했음
     * HBO라는 이름 자체가 소비자에게 전달할 수 있는 가장 강력한 브랜드였다고 생각

  아카데미 시상식과 넷플릭스의 수상 여부

     * 최근 3년간 넷플릭스는 가장 많은 작품이 후보로 오른 스튜디오였음
     * 하지만 최고 작품상 수상은 아직 없음
     * ""존경과 감탄""의 기준으로 후보에 오르고, ""사랑""의 기준으로 수상한다는 아카데미의 문화를 인정함
     * 핵심은 사람들이 진심으로 사랑하는 영화를 만들어야 한다는 점

  “Emilia Pérez”와 수상 실패에 대한 입장

     * 13개 부문 후보에 올랐지만, Karla Sofía Gascón의 트윗 논란으로 상을 놓쳤다는 ‘만약’에 대한 질문을 꺼려함
     * 영화 자체는 훌륭했고, 캠페인도 성공적이었지만 결과는 장담할 수 없었다고 밝힘

  소셜미디어와 인재 검증

     * 넷플릭스는 주로 “헤드라인이 날 수 있는 요소” 중심으로 검토
     * 개인 트위터까지 일일이 확인하지는 않으며, 본인도 트위터 사용하지 않음

  논란 이후의 재협업 가능성

     * Karla와의 재협업 가능성에 대해 “사람이 실수했을 때 어느 정도 관용을 가져야 한다”며 긍정적 입장
     * 넷플릭스는 그런 관용(grace)을 가진 회사라고 강조

  Dave Chappelle 논란과 CEO의 사과

     * Chappelle의 스탠드업 쇼가 트랜스젠더 커뮤니티와 일부 직원들을 불쾌하게 만든 이후, Sarandos는 ""콘텐츠가 현실에 해를 끼치지 않는다""는 발언으로 논란
     * 이후 해당 발언은 서툴렀고 잘못이었다며 공개 사과
     * ""표현의 자유""와 ""안전한 코미디 공간""이라는 두 가지 원칙이 충돌하는 순간이었으며, 코미디는 자유로운 표현이 필요한 예술 형태라고 강조

  Adam Sandler와의 전략적 파트너십

     * 2014년 Sandler와의 독점 계약은 넷플릭스 오리지널 영화 전략의 기반이 됨
     * Sandler는 극장 개봉 대신 스트리밍 전용 영화에 합류한 최초의 A급 스타 중 하나
     * 초기에는 유럽에서 인지도가 낮았으나, 넷플릭스 영화 이후 전 세계적으로 인지도 폭발
     * Sarandos는 Sandler의 팬이며, 그와의 협업을 통해 ‘올바른 방식’으로 성공적인 계약을 체결했다고 회상

  오바마 부부 와의 파트너십

     * 갱신 여부에 대해 직접 언급은 피했지만, 파트너십은 결과물 중심의 맞춤형 계약 구조(“show-verall” 딜)로 운영 중

  Steven Spielberg의 Amblin

     * ""Thursday Murder Club"", ""Carry-On"" 등 프로젝트 진행 중
     * Spielberg는 ""Carry-On""에 대해 “극장 히트작을 만든 느낌”이라며 긍정적 피드백 전달

  Ryan Murphy 와의 파트너십

     * 계약 만료 후 Disney로 이동했지만, 넷플릭스에서 ""The Watcher"", ""Monster"" 시리즈 등 성공작 다수 제작
     * 20th Century와의 기존 계약으로 잠재력을 완전히 발휘하지 못했지만, 갈등 없이 좋은 관계 유지 중
     * ""Ed Gein"" 시리즈 촬영 현장을 직접 방문했으며, 뛰어난 퍼포먼스를 높이 평가

  Meghan Markle과의 브랜드 확장 및 e커머스 실험

     * ""With Love, Meghan"" 라이프스타일 시리즈 론칭
     * Meghan의 브랜드 ""As Ever""에 넷플릭스는 수동적 파트너로 참여
     * 식용 꽃, 베이킹 믹스 등 실물 제품 유통에도 관여 중이며, 현재는 '발견형 모델'로 실험 중

  Meghan을 선택한 이유

     * Meghan Markle은 문화적 영향력이 과소평가되고 있음
     * ""Harry & Meghan"" 다큐 예고편 하나로도 전 세계적 반응 유발
     * 화면 속 신발, 의자에 걸린 Hermès 담요 등 관련 상품이 전 세계적으로 품절
     * 그녀와 Harry는 대중과 언론에 과도하게 평가절하되고 있다고 언급

  넷플릭스의 브랜드 확장과 팬덤 전략

     * e커머스, 실물 제품 등은 마케팅과 브랜딩 측면에서 가치가 있음
     * 팬덤의 다양한 접점을 만드는 전략으로, 테마파크보다는 연중 반복 방문이 가능한 Topgolf 모델을 선호
     * “팬들의 삶에 더 자주 스며드는 방식이 중요”하다고 강조

  Greta Gerwig의 ""나니아 연대기""와 IMAX 전략

     * Gerwig은 ""Barbie"" 이전에 넷플릭스에서 ""Narnia""라는 세계관 구축 프로젝트를 맡음
     * 이 프로젝트는 Gerwig이 요구한 것도, 위기에서 구출한 것도 아닌 넷플릭스의 새로운 시도
     * 넷플릭스가 아직 본격 시도하지 않았던 IMAX 전용 개봉에 도전
     * 2026년 11월 2주간 IMAX 상영 → 시상식 자격 조건 충족 및 이벤트성 강조

  Christopher Nolan과의 관계

     * 개인적으로 친밀한 관계 유지 중이며, Nolan의 극장 영화에 대한 고집을 존중
     * 스트리밍 전용은 관심 없지만, Sarandos는 그의 극장 작품들을 계속 기대한다고 언급

  실시간 콘텐츠와 라이브 이벤트 전략

     * “한 발은 할리우드에, 다른 발은 실리콘밸리에”라는 철학 강조
     * 넷플릭스의 라이브 전략은 “자기만의 이벤트를 소유하는 것”에 집중
     * 전체 NFL 시즌보다 슈퍼볼급 단일 이벤트에 초점
     * 크리스마스 풋볼 경기, WWE 라이브, SAG 어워즈 등 독점 이벤트 확대 중

  슈퍼볼 중계 가능성 및 기술 역량

     * 경제적으로는 쉽지 않지만, 기술적으로는 슈퍼볼급 관중을 수용 가능
     * Jake Paul vs. Mike Tyson 경기에서 이를 입증
     * Taylor Swift의 크리스마스 풋볼 출연 가능성에 대해선 “좋은 도전 과제”라고 언급

  라이브 콘텐츠 투자 방향

     * 전체 예산 비중은 작지만, 높은 영향력(“punch above their weight”)을 목표
     * 매년 몇 가지 핵심 라이브 이벤트를 추가 예정
     * SAG 어워즈는 1회차보다 2회차에서 큰 상승세, 지속적인 투자가치 있음

  도널드 트럼프와의 만남

     * Mar-a-Lago에서 사적인 저녁식사 진행
     * 트럼프의 구독 여부는 알 수 없지만 Melania와 Barron이 팬이라는 언급 받음
     * 향후 창작적 협업 가능성에 대해선 “그가 창작적으로 무엇을 하는지는 모르겠다”는 신중한 답변

  넷플릭스 초기 시절 회상

     * Los Gatos 시절, 유일한 비개발자 직원으로 입사
     * 시끄러운 전화통화로 엔지니어들 불만 있었지만, 초기 콘텐츠 계약 대부분을 도맡음
     * 하루 10시간씩 통화하며 주요 스튜디오들과 직거래

  우편 대여 시절 인기작과 DVD 컬렉션

     * 가장 수요 많았던 영화는 ""Jurassic Park""
     * 과거에는 수천 장 소장했지만 현재는 약 300장 보유
     * 스트리밍에서 찾을 수 없는 영화 “Short Cuts”는 DVD로 계속 보관 중
"
"https://news.hada.io/topic?id=20085","코드와 한글 [Code and Hangul]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        코드와 한글 [Code and Hangul]

전북대학교 이상로 교수의 연구 아카이브: 한글 코드와 기술 표준화의 기록

   이상로 교수가 운영했던 웹사이트는 2000년대 초반 한국의 문자 처리 기술과 코드 변환 연구를 체계적으로 정리함으로, 한글 정보화와 국제 표준화 과정에서 중요한 역할을 했습니다. 이 사이트는 당시 컴퓨터 과학 분야의 학문적 연구와 실용적 응용을 연결하는 가교 역할을 수행했습니다.

  주요 콘텐츠

    문자 코드 강의 자료

   ASCII, KSC 5601, ISO-2022-KR, 유니코드 등 다양한 문자 인코딩 체계에 대한 이론과 실습 자료를 제공함으로, 문자 처리 기술의 기초부터 심화까지 학습할 수 있는 체계를 구축했습니다. 특히 HWP 형식으로 제공된 강의 자료는 당시 교육 현장에서 활용되며, 문자 코드 표준화를 이해하는 데 도움을 주었습니다.

    코드 변환 도구

   hcode와 hmconv 같은 한글 코드 변환 소프트웨어를 공개함으로, 실무에서 발생하는 문자셋 호환 문제를 해결하는 데 기여했습니다. 이 도구들은 소스 코드까지 제공되어 오픈소스 개발 문화를 선도하며, 개발자들이 직접 수정 및 개선할 수 있는 기반을 마련했습니다.

    RFC 문서 해설

   RFC 1557(ISO-2022-KR) 등 인터넷 표준 문서에 대한 상세한 설명을 통해 국제 표준과 한국적 적용 사례를 연결함으로, 문자 인코딩 표준화 과정에서의 이해를 돕고 실무 적용 방안을 제시했습니다.

    한글 처리 연구

   조합형/완성형 코드 논쟁과 첫가끝 코드 체계에 대한 분석을 통해 한글 정보화 과정에서 발생한 기술적 문제를 해결하는 데 기여했습니다. 이를 통해 한글의 디지털 표현 방식에 대한 깊은 통찰을 제공하며, 이후 한국어 NLP 기술 발전에도 영향을 미쳤습니다.

    기술 커뮤니티 활성화

   han.comp.hangul 뉴스그룹 아카이브를 연결함으로, 개발자 간의 지식 공유와 협업을 촉진했습니다. 이는 당시 오픈소스 생태계를 확장하고 기술적 논의를 활성화하는 데 중요한 역할을 했습니다.

  의의

   이 사이트는 한글 코드 처리와 국제 표준화 과정에서 축적된 지식과 경험을 체계적으로 기록함으로, 한국 정보화 초기 시대의 기술적 도전과 성과를 보여주는 중요한 디지털 문화유산입니다. 오픈소스 소프트웨어 공유와 커뮤니티 활성화를 통해 개발자들에게 실질적인 도움을 주었으며, 한글 정보화 역사 연구와 디지털 인문학 분야에서도 큰 가치를 지닙니다.

   현재 웹 아카이브를 통해 일부 자료를 확인할 수 있으며, 과거의 기술적 성과가 현대 IT 환경에 어떤 영향을 미쳤는지 탐구하는 데 유용한 자원으로 활용되고 있습니다.

   https://www.sysnet.pe.kr/2/0/11724
"
"https://news.hada.io/topic?id=20023","Autorouter를 개발하기 전에 알았으면 좋았을 것들 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Autorouter를 개발하기 전에 알았으면 좋았을 것들

   ""세계에서 가장 빠른 자동 배선기(Autorouter) 를 만들기 위한 중요한 교훈들""

A* 알고리듬을 모든 곳에 활용하기

     * A*는 탐색 문제에서 가장 강력하고 유연한 알고리듬임
     * 단순한 2D 그리드 뿐 아니라 다양한 문제에서 사용 가능함
     * A*는 BFS보다 빠르고 효율적으로 목적지에 가까운 노드를 우선 탐색하는 '정보 기반 탐색'임
     * 기존 코드에서 사용 중인 DFS나 BFS는 대부분 A*로 대체 가능함
     * 성능 개선을 위해 여러 A* 인스턴스를 실행하고 그 중 성능이 좋은 설정에 자원을 더 배분하는 기법 사용

프로그래밍 언어보다 알고리듬이 더 중요함

     * autorouter를 Javascript로 개발해도 전혀 문제가 없었음
     * 최적화의 핵심은 반복 횟수를 줄이는 것임
     * 언어 성능보다 “얼마나 똑똑한 알고리듬을 얼마나 빨리 만들 수 있느냐”가 더 중요함
     * Javascript는 빠른 반복보다는 스마트한 알고리듬에 더 유리함

트리 구조보다 Spatial Hash Indexing이 더 효율적임

     * Quadtree 등 트리 기반 자료구조는 일반적으로 느림
     * Spatial Hash Index는 객체의 위치를 해시하여 공간적으로 가까운 객체끼리 묶어 처리함
     * 해시 기반 구조는 O(1)에 가까운 탐색 성능 제공
     * Cell 크기를 잘 선택해야 효과적이며, 적절한 크기 선택은 어렵지 않음

공간 분할과 캐시가 알고리듬보다 1000배 중요함

     * 복잡한 회로 보드도 대부분 반복되는 패턴을 가짐
     * 게임 개발처럼 사전 계산된 결과를 캐시하여 성능을 획기적으로 향상시킬 수 있음
     * 캐시 가능한 구조와 공간 분할이 미래 autorouter의 핵심이 될 것임
     * 저장 공간은 빠르게 저렴해지고 있고, 수 GB 캐시로도 큰 성능 향상 가능함

시각화 없이는 문제 해결 불가

     * 모든 문제에 대해 시각화 도구를 먼저 만들고 시작함
     * 시각화를 통해 디버깅 속도를 10배 이상 향상시킬 수 있었음
     * 단순한 알고리듬 단계도 시각화하면 문제 원인을 빠르게 파악 가능함

Javascript의 프로파일링 도구는 매우 유용함

     * Chrome 개발자 도구의 Performance 탭에서 코드별 소요 시간 확인 가능
     * 별도 프레임워크 없이도 Flame Chart, 메모리 사용량 등 쉽게 분석 가능함
     * 성능 디버깅에 매우 유용한 도구임

재귀 함수는 사용하지 말 것

     * 재귀 함수는 일반적으로 동기적이며 A*로 전환이 어려움
     * 반복 기반 구현이 더 빠르고, 방문 노드를 추적하기 용이함
     * 재귀 함수에서는 상태 변경이 어렵고 비효율적임
     * 가능한 한 반복문 기반으로 작성할 것

Monte Carlo 알고리듬은 지양할 것

     * 무작위성 기반 알고리듬은 비결정적이고 디버깅이 어려움
     * 도메인에 특화된 휴리스틱이 항상 더 뛰어난 성능을 제공함
     * 무작위로 선을 그리는 PCB 디자이너는 없음 → 현실적인 접근 아님
     * 단, 초기에 감 잡기용으로는 유용할 수 있음

알고리듬 단계를 실제 문제 공간에 고정할 것

     * 서브 알고리듬을 원점 기준으로 정규화하면 전체 흐름 파악이 어려워짐
     * 각 단계별 입출력을 시각화하여 어떤 단계가 오류를 유발하는지 파악함
     * 좌표계를 일관되게 유지하면서 알고리듬 흐름을 유지하는 것이 중요함

반복 과정을 애니메이션으로 시각화할 것

     * 알고리듬이 얼마나 비효율적으로 탐색하고 있는지 시각적으로 파악 가능함
     * 애니메이션은 반복 횟수를 줄이고 효율성을 높이는 데 매우 효과적임
     * 문제 상황을 쉽게 포착할 수 있음 (예: 무한 루프에 빠진 탐색 등)

그리드 없이 교차 판별 수학으로 충분함

     * 그리드 사용 대신 벡터 수학을 활용하면 훨씬 빠름
     * 메모리 접근보다 수학 연산이 더 빠른 경우도 많음
     * LLM 덕분에 교차 판별 수학도 쉽게 구현 가능해졌음
     * 불필요한 그리드 사용은 성능 저하 원인임

각 단계별 실패 확률 측정으로 해결 가능성 우선 순위화

     * 각 공간 분할 노드에서 실패 확률 추정 가능
     * 이후 단계에서 실패할 가능성이 높은 노드를 우선적으로 재구성 또는 재탐색함
     * 실패 확률은 명확하게 측정 가능하며 휴리스틱보다 개선 가능성이 큼
     * 전체 해결 가능성을 높이는 것이 최적화를 목표로 하는 것보다 더 효과적일 수 있음

Weighted A*로 속도 100배 향상 가능

     * 기본 A*는 최적 경로를 보장하지만 속도는 느림
     * Weighted A*는 더 탐욕적으로 탐색하여 속도 대폭 향상 가능
     * f(n) = g(n) + w * h(n) 으로 가중치 설정만으로 구현 가능함
     * 최적성이 약간 손해를 보더라도 훨씬 빠르게 문제를 해결할 수 있음
     * 게임 개발 분야에서도 자주 사용되는 기법이며 참고할 만함

        Hacker News 의견

     * Monte-Carlo 방법의 빠른 무시는 큰 실수임
          + Monte-Carlo 방법은 정확성과 속도를 교환할 수 있는 점이 특징임
          + 알고리즘을 오래 실행할수록 더 정확해짐
          + 반대로 빠르게 부정확한 결과를 얻을 수도 있음
          + 모든 경로를 탐색하는 대신 무작위로 선택된 하나의 경로만 탐색함
          + 알고리즘의 가장 중첩된 루프에 Monte-Carlo를 사용하면 효과적임
          + 예를 들어, 신경망을 학습할 때 외부 루프는 신경망 매개변수를 업데이트하고 내부 루프는 그래프를 통해 경로를 계산함
          + Monte-Carlo를 사용하면 내부 루프의 정확성을 1회 반복으로 줄일 수 있음
          + 이는 직관적으로 항상 올바른 결정을 내리는 정책을 구축할 수 있게 함
          + 체스나 바둑에서 Monte-Carlo 트리 탐색 변형을 사용하여 최적의 경로를 계산할 수 있음
     * ""자동 라우터를 믿지 마라""는 입장에 있음
          + eCAD 분야에서 레이아웃 속도를 높일 수 있는 큰 기회가 있음
          + 전체 자동화 도구보다는 공동 창작 도구를 사용할 가능성이 높음
          + 설계 시작 시 배치가 설정되지 않아 라우팅에 큰 영향을 미침
          + 페이지에서 배치가 알고리즘의 일부인지 확인하지 못함
          + JavaScript로 작성된 AR에 대한 계획이 궁금함
     * 기사는 시각화와 캐시 효과에 대한 중요한 점을 언급함
          + 재귀 알고리즘은 깊이 우선 탐색임
          + DFS와 BFS는 반복적이거나 재귀적으로 작성될 수 있음
          + A*는 경로 탐색에 유용함
          + BFS는 모든 인접 노드를 탐색하고 A*는 목적지에 가까운 노드를 우선 탐색함
          + A*는 동적 알고리즘으로, 최단 경로를 자신 있게 조기에 종료할 수 있음
     * 자동 라우팅에 대한 훌륭한 논의임
          + 라우팅 자체는 쉬움
          + 새로운 것을 맞추기 위해 이미 라우팅된 것을 제거해야 할 때 복잡해짐
          + KiCAD의 자동 라우터가 그리움
     * 95%의 초점은 반복 횟수를 줄이는 데 있어야 함
          + 성능이 여전히 중요하다면 저수준 언어로 다시 작성해야 함
          + numpy, pandas, OpenCV, TensorFlow는 고성능 C++/어셈블리/CUDA로 구현됨
     * QuadTree와 일반적인 트리 데이터 구조는 매우 느림
          + 트리는 데이터의 정보 표현이 아님
          + 해싱 접근법은 점이 고르게 분포된 경우에만 적합함
          + 무작위 알고리즘은 검색 공간이 매우 큰 경우 유용함
     * 거의 모든 것이 게임 개발의 휴리스틱과 일치함
          + A*, Lee의 알고리즘 등은 모두 멋짐
          + 시각화 없이 플러드필을 작성하는 것은 범죄임
          + 공간 해싱은 특히 경험과 일치함
     * ""공간 해시 인덱싱 > 트리 데이터 구조""는 이 도메인에서는 좋지만 전 세계적으로 진리로 받아들여져서는 안 됨
          + 포인트가 고르게 분포되지 않은 경우 해시 함수가 나쁠 수 있음
     * 대학에서 배운 키워드를 기억함
          + fancy한 알고리즘을 사용할 기회가 없음
          + 대신 UI 구성 요소와 REST API를 구축함
     * 2D/3D 공간 문제에 직접적으로 관여하지 않는 사람으로서 시각화의 가치가 가장 큰 교훈임
          + 인간은 그림을 이해하고 분석하는 데 뛰어남
          + 문제의 형태를 이해하기 위해 확률적 또는 무차별 방법을 사용하는 아이디어가 중요함
"
"https://news.hada.io/topic?id=20065","내가 Vibe 코딩을 그만두는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          내가 Vibe 코딩을 그만두는 이유

     * 개발 중 ""몰입 상태(Flow)""를 AI와 함께 경험하는 Vibe Coding에 대해 반성적으로 고찰한 글
     * 최근 두 달 동안 Vibe 코딩에 의존했지만, 생산성과 비용 면에서 만족스럽지 않았다고 판단함
     * Vibe Coding은 특정한 개발 방법론이 아니라 일종의 상태 혹은 감정 중심의 개발 방식
          + AI 코딩 도우미(Cline, Roo Code, Cursor 등)에 의존해 흐름을 따라가며 코드를 작성
          + 명확한 계획 없이 직관과 몰입감만으로 작업하며, 도파민에 이끌려 '진전된 느낌'을 추구

Vibe Coding의 문제점

     * 시간 낭비: 처음에는 빠르게 진행되는 듯하지만, 구조가 없기 때문에 오류나 변화에 끌려다님
     * 비용 증가: AI의 컨텍스트 윈도우가 커질수록 API 호출 비용도 증가
          + 예: 수십만 토큰 전송, 수천 줄 생성 → 결과적으로 비용 부담
     * 재작업 증가: 초기에 빠르게 만든 코드가 결국 목적에 맞지 않아 전체를 다시 고쳐야 하는 상황이 발생

장점도 존재함

     * 반복적인 디버깅과 재이해를 통해 코드 구조와 언어 자체에 대한 이해도 향상
     * 필자는 Python 학습에 집중 중이며, 에러를 이해하고 모델을 올바르게 유도하는 능력이 조금씩 생김

Vibe Coding vs. AI Chat vs. 웹 검색

     * Vibe Coding: 초기 탐색이나 실험적 시도에는 유용하나, 구조적인 개발에는 부적합
     * AI Chat (ChatGPT 등): 빠른 답변과 보일러플레이트 생성에는 유용하나, 맹목적 신뢰는 위험 (AI 환각 가능성 존재)
     * 웹 검색: 개념과 정확한 해결책을 찾는 데 필수적이나, 시간이 오래 걸릴 수 있음

현재 선호하는 조합: Gemini + Open WebUI

     * Gemini Code Assist (VS Code에서 사용):
          + 무료이며, 테스트 코드 생성 및 에러 수정에 강함
          + 유닛 테스트를 처음 해보는 사람에게 특히 유용
     * Open WebUI:
          + 다양한 모델 지원과 커스터마이징 가능
          + 특정 목적(코딩, 논문, 특허 등)에 맞는 프롬프트 설정 가능
          + 텍스트 정렬, 테이블 변환 등 비용 대비 효율적인 작업에 적합

비효율적인 선택: 무제한 AI 에이전트

     * Roo Code, Cline 등은 긴 시간 실행되며 토큰 사용량이 많음
          + 특히 Claude 기반은 성능은 좋지만 비용이 과도하게 큼
     * 대신 Gemini 2.0, DeepSeek V3/Chat 등은 무료이거나 저렴하고, 성능도 준수함

결론: 균형을 찾아가는 중

     * Vibe Coding이 완전히 나쁘다고는 할 수 없음
          + 창의력 발휘나 아이디어 탐색에는 도움이 됨
     * 그러나 지속 가능한 개발 방식은 아님
          + 마감 기한과 비용 앞에서 현실적인 대안이 필요
     * 필자의 현재 최적 조합:
          + Gemini Code Assist (무료, 유닛 테스트에 강함)
          + Open WebUI (컨트롤과 비용 측면에서 유리)
     * 향후 계획:
          + Perplexity 같은 유료 챗 앱 고려 ($20/월, 무료 티어도 존재)
          + API 비용이 월 $30 이상이므로, 구조적 비용 절감 필요
          + 장기적으로는 로컬 모델 실행도 고려, 더 효율적인 모델이 나오면 전환 가능성 있음

        Hacker News 의견

     * 다른 사람들이 LLMs를 사용하여 코딩하는 방법에 대한 보고서를 읽는 것이 흥미로움
          + 개인적으로 LLMs가 프로그래밍의 ""언캐니 밸리""를 넘어서서 생산성이 크게 향상됨
          + 문제와 제약 조건을 잘 설명하면 수천 줄의 코드를 정확하게 생성할 수 있음
          + LLM이 생성한 코드를 검토하는 것이 중요하며, 구체적으로 요구하면 잘 해결됨
          + ""해결책을 구현할 계획을 말해달라""는 요청이 유용함
          + 결과는 놀라움. 스타일은 다를 수 있지만 구조적으로 매우 정확함
     * Vibe 코딩은 프로덕션 코드 작성이 아닌 탐색적 프로토타입에 적합함
          + 개인적인 도구에는 괜찮지만, 다른 사람에게 배포할 코드에는 적합하지 않음
          + 코드에 대한 이해와 반복이 필요함
          + Vibe 코딩은 코드에 신경 쓰지 않는 행위로 정의됨
     * Vibe 코딩은 ""흐름""에 빠져 쉽게 코드를 생성하는 것임
          + 영화 속 해커 장면이 ChatGPT를 사용했다면 더 멋졌을 것이라는 농담
          + 코드 실행을 기준으로 코드의 정확성을 판단하는 것은 좋지 않음
          + 최소한 LLM 출력물을 검토하는 것이 중요함
     * Vibe 코딩은 코딩과 관련이 없다고 생각함
          + 비전문가도 작은 규모의 코드를 만들 수 있지만, 대규모 시스템은 어려움
          + LLMs는 보일러플레이트 코드를 생성하는 데 유용하지만, 문제 발생 시 수정이 필요함
          + 새로운 'vibe coders'는 문제를 이해하지 못하고 반복적으로 시도함
     * Claude Code를 사용하는 데 하루에 $30를 지출함
          + Vibe 코딩에 많은 비용을 들임
     * 트리 구조로 작업하는 것이 유용함
          + 큰 그림을 그리고 세부 사항을 채워나가는 방식
          + LLMs와 함께 작업할 때 효과적임
          + 구조적이지만 여전히 Vibe 코딩으로 간주될 수 있음
     * Karpathy는 이름 짓기에 능함
          + 새로운 이름이 잘 정착됨
     * LLM을 많이 사용하지만, Vibe라는 개념은 온라인 농담에서 시작됨
          + 질문을 잘 구성하는 것이 중요하며, 이는 코딩과 유사함
          + 테스트가 중요하며, LLM을 통해 학습이 빠르게 진행됨
     * 자신의 생각을 공식 언어로 표현하는 것의 가치가 있음
          + 수학이 자연어로도 표현 가능하지만 공식화의 명확성과 간결함이 유용함
          + 코드는 모호한 아이디어를 명확하게 만드는 수단임
          + 모든 시스템이 모호한 언어로 작성되는 것은 바람직하지 않음
     * AI 채팅이 웹 검색보다 더 나은 결과를 제공함
          + SQL 쿼리를 작성할 때 Gemini가 더 나은 결과를 제공함
"
"https://news.hada.io/topic?id=20022","마이크로소프트 마우스 장치에 포함된 USB-to-PS/2 마우스 어댑터 관련 주의사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            마이크로소프트 마우스 장치에 포함된 USB-to-PS/2 마우스 어댑터 관련 주의사항

     * Windows 95 설치 프로그램의 GUI 선택 이유
          + Windows 95 설치 프로그램은 Windows 95의 축소판 GUI를 사용하지 않음.
          + 당시 하드웨어의 제한된 성능과 메모리 용량이 주요 이유였음.
          + 설치 과정에서의 안정성과 호환성을 보장하기 위해 MS-DOS 기반의 설치 프로그램을 선택함.
     * 하드웨어 제약
          + 1990년대 중반의 컴퓨터는 메모리와 처리 능력이 제한적이었음.
          + Windows 95의 축소판 GUI를 실행하기에는 당시의 하드웨어가 충분하지 않았음.
     * 안정성과 호환성
          + 설치 과정에서의 오류를 최소화하기 위해 안정적인 MS-DOS 환경을 사용함.
          + 다양한 하드웨어와의 호환성을 보장하기 위해 MS-DOS 기반의 설치 프로그램을 유지함.
     * 결론
          + Windows 95 설치 프로그램은 당시 기술적 한계와 안정성을 고려하여 MS-DOS 기반의 설치 프로그램을 사용함.
          + 이는 설치 과정에서의 오류를 줄이고 사용자 경험을 향상시키기 위한 선택이었음.

        Hacker News 의견

     * PC World에서 판매원과의 어색한 대화 경험
          + 오래된 서버를 집으로 가져와 학습하려 했으나 USB 포트가 없어 PS2 키보드를 찾음
          + 판매원은 USB 키보드를 추천했으나 PS2 키보드가 필요하다고 설명
          + 판매원은 Play Station 2 키보드로 오해함
     * 2000년대 초반의 추억
          + StarCraft를 기계식 마우스로 플레이하는 것이 불편하여 광학 마우스를 선물로 받음
          + USB 마우스였으나 PS2 포트만 있어 어댑터를 구매했으나 작동하지 않음
          + 전자제품 수리점에서 어댑터가 가짜임을 알게 됨
     * 2014년과 2019년의 마우스 및 키보드 프로토콜 변화
          + 대부분의 마우스와 키보드가 듀얼 프로토콜을 지원했으나 2019년부터 USB 전용으로 변화
          + 저렴한 마우스 SoC는 여전히 듀얼 프로토콜을 지원할 가능성 있음
     * Roland S760 샘플러의 MSX 마우스 연결 문제
          + MSX 마우스 커넥터가 드물어 DIY MSX-PS2 커넥터 사용
          + PS2 마우스가 고장나 현대적인 마우스를 찾았으나 작동하지 않음
          + NOS PS2 마우스를 찾아 문제 해결
     * 386/33 컴퓨터의 키보드를 현대 Mac에 연결
          + DIN5 -> PS/2 -> USB-A -> USB-C 어댑터 시퀀스를 사용
     * 현대 USB를 레트로 컴퓨터에서 사용하기 위한 액티브 컨버터 필요
          + USB4VC 프로젝트와 HIDman 프로젝트 소개
     * Microsoft.com URL만 보고도 oldnewthing (Raymond Chen)임을 확신
     * 90년대 후반과 2000년대 초반의 키보드
          + PS/2와 USB를 모두 지원하는 컨트롤러가 있었고, PS/2 플러그와 수동 어댑터가 제공됨
          + 현대 컴퓨터에서 PS/2 키보드를 사용하려면 프로토콜을 변환하는 액티브 어댑터 필요
     * Mikrotik 장치로 LTE 인터넷 게이트웨이 구축 중 혼란
          + mini PCIe LTE 모뎀과 SIM 카드 슬롯의 상호작용에 대한 이해 부족
          + USB3 핀을 테이프로 가리면 USB2로 전환되어 작동함
     * DisplayPort-to-HDMI 어댑터의 작동 방식
          + 어댑터는 수동적이며, DisplayPort 출력 장치는 멀티모드를 지원하여 HDMI 또는 DVI 신호로 전환 가능
          + 저렴한 HDMI(source)-to-DisplayPort(sink) 어댑터가 없는 이유는 소스 장치에 스마트 기능이 내장되지 않음
"
"https://news.hada.io/topic?id=20017","두바이 드론 쇼 산업의 성장은 창작자들에게 새로운 기회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     두바이 드론 쇼 산업의 성장은 창작자들에게 새로운 기회

     * UAE에서는 5년 전부터 드론 쇼가 대중화되기 시작했으며, 현재 시장은 빠르게 확장 중임
     * 보통 400대 이상의 드론을 사용하며, 비용은 평균 1.5억원($112k)이상

새로운 창작 플랫폼으로 떠오른 드론 쇼

     * 2025년 1월, 두바이의 '미래 박물관' 앞에서 600대의 드론이 LED로 도시 통치자의 초상화, 회전 지구, DNA 이중 나선 등을 연출하며 화려한 쇼를 펼침
     * 이 쇼는 World Health Expo Dubai 폐막식의 일부였으며, Skyvertise의 수석 디자이너 Ajay Sreekumar가 이끄는 팀이 제작함
     * 3D 아티스트인 Sreekumar는 실시간으로 창작 결과를 볼 수 있는 즉각적 만족감을 강조함

미디어 산업에서 드론 산업으로의 이직

     * Sreekumar는 2년 전까지 아부다비의 미디어 스튜디오에서 근무하다 드론 경험 없이 Skyvertise에 입사
     * 드론 조작, 배터리 교체, 애니메이션 디자인 등 다양한 역할을 수행하게 됨
     * 드론 쇼는 2020년 팬데믹 이후 UAE에서 급성장하며 회의, 축제, 연말 행사 등 주요 이벤트의 일부가 됨

산업 성장과 현실적인 과제들

     * 성수기인 11월~3월 사이에는 프로젝트 수요가 급증하며, 기한 압박과 주말 근무가 빈번함
     * Dronisos Middle East의 전 GM은 기대 급여를 맞추기 위해 초과 근무가 불가피하다고 설명함
     * 글로벌 드론 쇼 시장은 2023년 약 4,520억 원($339m) 규모로 성장, 중동은 약 547억 원($41m) 규모로 평가됨
     * 중동 지역 쇼는 평균적으로 400대의 드론을 사용하며, 쇼당 평균 약 1억 5,000만 원($112,250) 비용이 들며 기존 불꽃놀이(약 1,800만-5,500만 원/$13,600-$41,000)보다 비싸지만 친환경적이고 재사용 가능함

드론 쇼의 기술적 발전

     * 현재 드론은 LED가 장착된 소형 쿼드콥터이며, GPS와 배터리 기술 덕분에 정밀한 연출 가능
     * 최대 20분 동안 음악, 레이저, 불꽃과 연동된 공연 연출 가능
     * 도쿄 올림픽(2020) 개막식에도 1,800대의 드론이 사용됨

창작자들에게 열린 새로운 기회

     * 3D 아티스트 Daria Bakhtigozina는 2022년 온라인에서 드론 쇼를 보고 업계에 관심을 가짐
     * 항공제어시스템 전공 지식을 활용해 물리적 드론 동작과 디자인을 연결할 수 있다고 설명
     * 쇼 디자인은 일반적으로 1-2주 소요되나, 성수기에는 3-4일로 단축되기도 함

AI의 도입과 자동화의 가능성

     * Skyvertise는 내부용 AI 모델을 도입해 디자인 작업을 단축하고 있음
     * CEO는 향후 “디자이너가 필요 없는 AI 기반 드론 쇼 소프트웨어” 개발을 구상 중
     * 현재는 복잡한 쇼에는 여전히 전문 인력이 필요하지만, 자동화는 기술 부족 인력의 위험성을 동반함
     * 과신에 따른 안전 사고 가능성이 우려되며, 실제로 미국, 중국, 베트남 등에서 드론 낙하 사고 발생

안전 규제와 드론 조종사 시장

     * 국제 드론쇼 산업 협회와 UAE 민간항공청은 조종사 인증 및 드론 등록을 의무화함
     * 한때 수요가 공급을 초과했으나, 이제는 3일 교육으로 상업용 자격증을 취득할 수 있어 경쟁 치열
     * 전문가에 따르면, 안전은 조종사의 가장 중요한 역할이며 단순한 조종 능력 외의 전문성이 요구됨

드론 조종사 급여와 미래 확장성

     * 중동의 초급 드론 조종사 월급은 약 5,000디르함(1,361달러), 숙련자는 8,000~10,000디르함(2,178~2,723달러)
     * 드론 기술은 라이트쇼 외에도 석유, 건설, 부동산 분야에서 측량, 지도 제작, 검사 등에 활용되고 있음
     * 상업용 드론 활동은 2023년 이후 75% 증가하며 산업 확장 중

인간 창의성과 기술의 균형

     * 드론 쇼는 현장 장비 설치, 배터리 교체, 유지 관리 등 여전히 사람의 손이 필요한 작업 다수 존재
     * Bakhtigozina는 “인간은 과거에도 창조했고, 지금도 창조하고 있으며, 앞으로도 계속 그럴 것”이라고 말함
"
"https://news.hada.io/topic?id=20098","암호화폐 거래소를 연결하는 MCP 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        암호화폐 거래소를 연결하는 MCP 프로젝트

   거래소의 실시간 시세, 거래 이력, 주문내기 등을 MCP로 묶어 Claude 등에서 사용할 수 있게 만드셨네요. 데모 영상을 보니 멋집니다.
"
"https://news.hada.io/topic?id=20040","글또 1~10기. 7년의 커뮤니티 운영 회고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        글또 1~10기. 7년의 커뮤니티 운영 회고

   개발자 글쓰기 커뮤니티인 글또를 7년 동안 운영하면서 진행한 것들과 커뮤니티를 운영하면서 배운 내용을 정리한 글입니다.

   개발자 생태계에 좋은 커뮤니티가 많이 나오면 좋겠다는 생각을 담아 글을 작성했어요.

   글또의 특징
     * 슬랙의 봇을 6개 넘게 사용
          + 글 제출, 포인트 집계 봇
          + 익명 고민을 나눌 수 있는 대나무숲 봇
          + 단순 업무 자동화 봇
          + 개인 맞춤 메세지 전송 봇
          + 생일 알림 봇
          + 제출한 글 LLM 피드백 해주는 봇
          + 사람들에게 개인적으로 편지를 보낼 수 있는 웹페이지
     * 데이터를 BigQuery로 적재해서 스프레드시트에 데이터를 집계해서 데이터 활용
     * 10기는 639명이 활동했으며, 7년 동안 활동한 사람들은 총 13,00명

   본문이 너무 길어 클로드가 정리한 부분만 남겨둡니다.
     * 이 글은 ""글또""라는 개발자 글쓰기 커뮤니티를 7년간 운영한 경험을 회고한 내용입니다. 핵심 내용을 정리하면 다음과 같습니다
     * 커뮤니티의 성장과 발전: 글또는 2018년 1월에 13명으로 시작해 2025년 10기에는 639명까지 성장한 개발자 글쓰기 커뮤니티입니다. 기본 규칙은 예치금을 내고 2주에 한 번 글을 작성하는 것이며, 글쓰기 외에도 세미나, 커피챗, 오프라인 모임 등 다양한 활동을 진행했습니다.
     * 커뮤니티 운영 철학
          + ""사람이 중심""이라는 철학으로 따뜻한 관계를 중시
          + 운영진의 번아웃 방지를 위한 ""너무 열심히 하지 말기"" 원칙
          + 데이터 기반 의사결정과 시스템 자동화(봇 개발)
          + 명확한 비전과 Ground Rule 설정
     * 시기별 발전 과정
          + 초기(1-3기): 커뮤니티 기반 구축, 슬랙 도입, 자동화 시작
          + 중기(4-6기): 코로나 시기 운영, 운영 체계화
          + 후기(7-10기): 시스템 고도화, 포인트 제도, 빌리지/코어 세계관 구축, 자동화 봇 개발
          + 기술적 혁신: 글또 운영을 위한 다양한 봇(또봇, 글팽이, 글빼미, 지니 등)을 개발하여 글 제출, 피드백, 데이터 분석, 운영 자동화 등을 실현했습니다.
     * 개인적 성장
          + 운영자로서 리더십, 조직 관리, 멘토링 경험 획득
          + 639명 규모 커뮤니티의 동기부여와 비전 전달 능력 개발
          + 글쓰기를 통한 자기 발전과 지식 공유
     * 핵심 가치
          + 따뜻함과 유익함의 공존
          + 책임감과 꾸준함
          + 사람 간 연결과 관계 형성
     * 미래 계획: 10기를 마지막으로 글또 운영을 일단락하며, 새로운 방향성에 대해 탐색하는 열린 결말로 마무리합니다.
          + 글또 커뮤니티의 성공 요인은 체계적인 운영 시스템, 데이터 기반 의사결정, 사람 중심의 가치관, 지속적인 혁신과 자동화, 그리고 운영자의 강한 책임감과 꾸준함이라고 할 수 있습니다.
"
"https://news.hada.io/topic?id=19998","<select> 이제 CSS로 커스터마이징 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <select> 이제 CSS로 커스터마이징 가능

     * Chrome 135부터 <select> 요소에 대해 접근성 표준을 유지하면서도 CSS 커스터마이징이 가능한 새로운 기능 지원 시작
     * 수년간의 사양 조율 및 개발 끝에, 오래된 브라우저에서도 깨지지 않는 강력한 구성 요소로 제공됨
     * HTML 콘텐츠도 포함 가능하며, appearance: base-select 가 추가되면서 애니메이션, 스타일등 다양한 커스터마이징이 가능해짐

appearance: base-select 소개

     * 새로운 CSS 속성 appearance: base-select는 <select> 요소를 커스터마이징 가능한 새로운 상태로 만듦
.custom-select {
  &, &::picker(select) {
    appearance: base-select;
  }
}

     * base-select 사용 시 생기는 새로운 기능
          + <select> 내부 콘텐츠에 대한 브라우저의 HTML 파서 동작 변경
          + 렌더링 방식과 내부 구조 변경
          + 새로운 내부 파트 및 상태 제공
          + 최소한의 기본 디자인 제공 (커스터마이징 최적화)
          + 표시된 옵션이 팝오버처럼 최상위 레이어에 나타남
          + 옵션 위치는 anchor()로 제어 가능
     * base-select 사용 시 사라지는 기능
          + 브라우저 창 외부로 <select> 렌더링 불가
          + 모바일 OS의 기본 선택 UI 호출 안됨
          + 가장 긴 <option>의 너비를 반영하지 않음

<select>에 HTML 콘텐츠 포함 가능

     * 기존에는 <option> 안에 이미지나 SVG 삽입 시 브라우저가 무시함
     * appearance: base-select를 적용하면 HTML 그대로 렌더링됨
     * Chrome에서는 SVG 포함된 옵션이 보이지만 Safari, Firefox 등은 지원하지 않음
     * 코드펜 데모: 실습 링크
     * 이 기능은 Finch 실험으로 도입되어 필요 시 중단 가능함

완전한 커스터마이징 가능

     * base-select의 모든 구성 요소는 교체, 애니메이션, 스타일 적용 가능
     * 다양한 디자인을 통해 의미 있는 선택 UI 구성 가능
     * 예시로는 상태 표시, 아바타 포함 옵션, 색상 선택기, 게시 상태 선택 등 있음
     * 코드펜 데모: 실습 링크

JavaScript 인터페이스는 변경 없음

     * 기존 <select>에 대한 JavaScript 동작은 동일하게 유지됨
     * 단, <option>에 HTML을 넣은 경우 선택된 값 파싱 방식이 달라졌으므로 테스트 필요
     * value 속성을 사용하는 경우 별도 수정 필요 없음

추가 자료

  웹 표준

     * Open UI Select 사양
     * HTML 사양 Pull Request
     * Chrome Intent to Ship

  Chrome 관련 자료

     * Chrome 블로그 요청 및 설명 글
     * 커뮤니티 피드백 결과
     * <select>에서 <hr> 사용하기
     * Una의 설명 글 / 변경사항 정리 링크
     * Una의 Codepen 모음

  커뮤니티 자료

     * Brecht De Ruyte Codepen 모음
     * CSS Tricks의 네이티브 vs 커스텀 select 비교
     * Open Props UI의 <select> 구현
     * 애니메이션 적용된 커스텀 select 예제

  커스터마이징된 <select>를 활용한 데모

     * Una의 데모
     * Brecht의 데모
     * Adam의 데모

        Hacker News 의견

     * 내가 이 기능에 대해 불균형적으로 흥분하는 것은 아마도 2000년대 초 웹 개발자로서의 나를 드러내는 것 같음. 선택 요소가 HTML로 재현할 수 없는 기능을 제공하기 때문에 매우 유용한 기능임
          + 이제 자동 완성 및 태그 선택기를 다음으로 추가해야 함
     * 이 기능이 널리 지원되기 전까지는 점진적 향상으로 사용해야 함. 현재 caniuse.com에 따르면 전 세계적으로 46% 지원됨
          + 지원하지 않는 브라우저 사용자에게 나쁜 경험을 제공하지 않도록 주의해야 함
          + 새로운 스타일링에 중요한 정보나 기능을 포함하지 않는 것이 중요함
     * 이 기능이 구현되는 것을 보니 매우 기쁨. 커스텀 선택 상자 대체물보다 훨씬 큰 개선이 될 것임
     * 내장 모바일 운영 체제 구성 요소를 트리거하지 않는다는 점이 걱정됨. 내장 구성 요소는 신뢰할 수 있고 접근 가능하며 반응성이 좋음
          + Android UI가 열릴 때 신뢰할 수 있어 좋음. 선택 요소뿐만 아니라 날짜/시간 입력에도 적용됨
     * 일부 컨트롤은 스타일을 적용하지 않는 것이 더 나음. 스크롤바의 경우 너무 얇거나 색상 대비가 나빠서 사용하기 어려움
          + 기본 선택 요소는 가장 예쁜 컨트롤은 아니지만 기능을 수행함
     * 웹 개발자들이 수십 년 동안 기다려온 것처럼 보임. 많은 JS 라이브러리를 대체할 가능성이 있음
          + Chrome이 설치되어 있지 않지만, 예제 비디오에서 다중 선택 필드를 어떻게 처리하는지 궁금함
     * 선택 요소를 Chromium 브라우저에서 CSS로 커스터마이즈할 수 있게 됨
          + 웹 표준이 점점 더 복잡해지고 있음
     * Firefox 문제 링크 제공됨
     * 계속 이렇게 진행하면 곧 VB6와 기능 동등성을 가질 수 있을 것임
     * 깨진 JS 라이브러리보다 나음. 하지만 많은 옵션이 있을 때 레이아웃이 어떻게 되는지가 주요 관심사임
          + 내장 모바일 운영 체제 구성 요소를 트리거하지 않는다는 점이 무서움. 레이아웃은 어떻게 되는지 궁금함
          + 표시된 옵션이 anchor()로 위치됨
          + 실험적이지만, 아마도 이 부분이 가장 좋은 부분일 수 있음. CSS에서 실제로 작동한다면 놀라운 일이 될 것임

   그럼 <selectlist>는 필요없게 되는 건가요?

   다른 이야기지만, 슬랙봇에서 제목의 <select>가 출력되지 않는군요 ㅎㅎ

   앗 ㅠ 이거는 차후에 수정하겠습니다.
"
"https://news.hada.io/topic?id=20103","Google, Gemini 2.5 Pro Canvas 무료로 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Google, Gemini 2.5 Pro Canvas 무료로 공개

     * 기존에 유료인 Gemini Advanced(월 $20) 사용자에게만 제공하던 기능
     * 지난 주 Gemini 2.5 Exp 버전을 무료 사용자에게도 공개한 후 Canvas도 같이 제공 시작
     * AI 기반의 문서 작성, 실시간 코드 편집 및 미리보기로 웹앱 작성, 오디오 오버뷰 등이 가능
     * Gemini 에서 2.5 Pro 모델 선택후 아래에 Canvas 클릭
"
"https://news.hada.io/topic?id=20072","Oracle, 자사 SaaS 서비스에서 발생한 심각한 보안 사고 은폐 시도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Oracle, 자사 SaaS 서비스에서 발생한 심각한 보안 사고 은폐 시도

     * Oracle이 관리하는 SaaS 서비스에서 심각한 사이버 보안 사고가 발생했으나, Oracle은 이를 고객에게 알리지 않고 은폐하려 한 정황이 드러남
     * 클라우드 서비스 제공자는 사이버 보안 사고에 대해 투명한 공개가 필수적이나, Oracle은 오히려 피해 사실을 부인

사건 개요 및 해커의 주장

     * 2025년 3월 21일, 해커 rose87168이 *.oraclecloud.com 내 일부 Oracle 서비스 침해를 주장
     * Oracle은 즉각 “Oracle Cloud 침해는 없었다” 고 공식 부인하고, 관련 자격 증명은 Oracle Cloud와 무관하다고 설명함
     * 그러나 해커는 login.us2.oraclecloud.com 서버에 쓰기 권한을 가졌음을 입증하는 링크와 자료를 제공함
          + 해당 서버는 Oracle Access Manager 기반이며, Oracle이 직접 관리하는 시스템

유출 증거와 내부 회의 녹음

     * 해커는 Oracle 내부 회의 녹음 파일(2시간 분량) 을 공개함
          + 이 회의에는 Oracle 직원들이 시스템 접근, 비밀번호 저장소 및 고객 정보 접근에 대해 언급함
          + YouTube 영상 링크, 전문 텍스트 보기
     * 해커는 또 Oracle의 웹 서버 구성 파일과 내부 시스템 설정을 포함한 추가 자료를 공개함
          + 유출된 데이터에는 고객사의 직원 이메일 주소 등 실제 데이터가 포함되어 있음

Oracle의 대응과 언어 유희

     * Oracle은 “Oracle Cloud” 서비스에는 문제가 없다고 주장하면서, 구형 서비스(Oracle Classic) 로 명칭을 변경하여 범위를 회피하려 함
     * 이는 실제 피해 범위를 은폐하려는 단어 조작(wordsmithing) 으로 해석됨
     * Archive.org에 증거 자료 삭제 요청을 했지만, 두 번째 URL은 삭제하지 않아 여전히 접근 가능

보안 커뮤니티의 반응 및 요약

     * 보안 전문가들과 언론은 Oracle의 대응을 비판
          + Oracle이 고객 데이터를 다루는 서비스를 운영하면서 신뢰와 투명성 책임을 회피하고 있음
     * 피해가 확인된 서비스는 Oracle이 직접 운영하는 클라우드 인프라
     * 이는 단순한 기술 문제가 아닌 기업의 책임성과 윤리 문제

핵심 요약

     * 해커는 Oracle 클라우드 서비스 내부에 침투하여 실제 데이터와 시스템 정보 유출
     * Oracle은 이를 인정하지 않고, 용어 조작으로 사고의 범위를 축소하려 시도
     * 보안 전문가들은 Oracle에 명확하고 공개적인 설명과 고객 보호 조치를 촉구

   오라클이 오라클했음

        Hacker News 의견

     * Oracle의 고객이라면, 이 사건이 크게 중요하지 않을 것임. Oracle을 선택한 이유는 좋은 제품이나 좋은 회사여서가 아니라, 경영진의 비공식적인 거래 때문일 것임
     * 보안 사고가 최근 몇 년간 흔해졌음. Oracle이 이를 인정했더라면 며칠 내에 잊혀졌을 것임. 그러나 사건이 점점 더 깊어지고 있음
     * 보안 사고 시 최소한의 정보라도 제공되지 않는다면, 왜 그 회사와 일해야 하는지 의문임. Oracle의 최종 목표가 무엇인지 궁금함
     * Oracle이 이 사건이 발생하지 않았다고 확신하는지, 로그가 없는 것인지 의문임. 이 상황이 단순한 거짓말이 아닌지 생각해 봄
     * 최근에 이렇게 강하게 부인하는 회사를 본 적이 없음. Ars Technica에 따르면 Oracle 대변인이 익명으로 성명을 제공하려 했으나 거절당했음
     * 주 법률은 보안 침해 시 고객에게 알리도록 요구하지만, 강제력이 부족하여 무시됨. 연방 법률이 필요함
     * AWS를 주로 사용하지만, Oracle BDR이 LinkedIn을 통해 연락해 옴. 사건 보고서를 요청했으나 Oracle Cloud에 침해가 없었다는 짧은 답변을 받음
     * Larry Ellison의 Oracle 데이터 보안 스캔들에 또 하나의 사례가 추가됨. Larry의 다른 정치 및 사회적 스캔들과 일치함
     * NetSuite는 고객에게 손실이 발생할 경우 12개월 라이선스 비용의 5배까지 보상함
     * 포스트 트루스 시대가 혼란스러움. 그러나 이는 Oracle의 표준 행동처럼 보임
     * Oracle은 오랜 고객들에게 용서를 구해야 할 시점임
     * Oracle이 Archive.org에서 항목을 제거할 수 있는 것이 무서움
"
"https://news.hada.io/topic?id=20021","Gemini의 Python 샌드박스를 해킹하여 소스 코드를 유출(일부)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Gemini의 Python 샌드박스를 해킹하여 소스 코드를 유출(일부)

     * Google은 AI 보안 강화를 위해 사전 red-teaming 방식의 bugSWAT 이벤트를 개최하며, 연구자들에게 자사 AI 시스템을 철저히 테스트할 기회를 제공함
     * 2023년 $50,000을 수상했던 팀이, 이번에도 Gemini의 새로운 취약점을 발견해 ‘Most Valuable Hacker(MVH)’ 타이틀을 수상함
     * 해커 팀은 Google로부터 새로운 Gemini 프리뷰 기능에 대한 접근 권한과 문서를 받아 보안 관점에서 기능을 테스트함
          + 간단한 프롬프트로 Python 코드를 요청하자 “Run in Sandbox” 버튼이 제공됨
          + Gemini의 샌드박스 환경은 Google의 gVisor와 GRTE 기반으로 설계된 안전한 Python 실행 환경임
     * gVisor는 Google이 만든 사용자 공간 커널로, 시스템 호출을 가로채어 보안을 강화하는 기술임
          + 샌드박스 환경은 완전히 격리되어 있으며, 탈출은 매우 어려움
          + 하지만 샌드박스 내부에서 데이터 유출이 가능한 경우가 있음
     * 샌드박스가 os 라이브러리를 제공함을 발견하고, 파일 시스템을 탐색할 수 있는 Python 코드를 작성함
          + /usr/bin/entry/entry_point 라는 579MB 크기의 바이너리 파일을 발견
     * 이진 파일을 base64로 직접 출력하면 샌드박스가 다운되므로, 10MB 단위로 분할하여 출력
          + Caido라는 툴을 이용해 자동화된 방식으로 모든 청크를 수집하고 로컬에서 복원
          + file, strings, binwalk 명령어를 사용해 분석한 결과 내부 구조와 Google의 내부 경로가 노출됨
     * binwalk 분석을 통해 내부 Python 소스 코드가 담긴 google3 디렉토리 발견
          + assistant 디렉토리 내에는 Gemini가 Google 서비스(YouTube, Flights 등)와 상호작용하는 RPC 관련 코드 포함
          + 특정 스크립트 덤프 방지용 문자열이 포함되어 있었으나, 해당 코드는 Google 보안팀이 사전 검토 후 공개 가능 판단함

샌드박스의 메인 로직 분석

     * Google 서비스 호출은 Python 코드로 작성된 특정 클래스에서 구현되어 있음
          + 예: _set_reader_and_writer, run_tool 등은 파일 디스크립터를 통해 Google 서비스와 통신함
          + 바이너리 내부에서 protobuf 스키마를 기반으로 직접 메시지를 구성하고 도구 호출이 가능함
     * Google은 ReAct 논문을 바탕으로 Gemini가 복잡한 문제를 해결하기 위해 자체적으로 여러 번 프롬프트를 생성하고 계획을 세우도록 구현
          + 예: 사용자가 “Toronto → New York 비행기 시간?” 물으면 Gemini는 여러 단계를 거쳐 도구를 선택하고 데이터를 검색
          + 이 논리를 악용하여 더 높은 권한의 샌드박스를 생성하도록 프롬프트 인젝션을 시도
     * 일부 샌드박스는 Google의 확장 기능(RPC API 등)에 접근 가능
          + 확장 기능은 항상 열려 있는 FD를 통해 호출되며, 이들을 악용하면 더 높은 수준의 시스템 접근 가능성 존재
          + 특정 조건(Gemini가 계획을 짜는 단계 등)에 따라 고급 샌드박스에 접근 가능함을 확인

민감한 proto 파일 유출

     * Protocol Buffer 파일(proto)은 시스템 간 데이터 정의에 사용되며, 민감한 시스템 구조 정보 포함
          + strings entry_point > stringsoutput.txt 실행 후 “Dogfood” 문자열 검색으로 민감한 proto 경로 다수 노출
          + 예: privacy/data_governance/attributes/proto/classification.proto → Google이 사용자 데이터를 어떻게 분류하는지를 정의한 파일
     * cat stringsoutput.txt | grep '.proto' | grep 'security' 명령으로 다수의 민감 보안 관련 proto 파일 리스트 노출
          + 예: security/thinmint/proto/core/thinmint_core.proto, security/credentials/proto/authenticator.proto 등

왜 이런 파일이 있었나?

     * Google 보안팀은 샌드박스 바이너리에 포함된 내용을 사전 승인했지만, 자동화된 빌드 파이프라인이 불필요한 보안 proto 파일을 추가
     * 이로 인해 고도의 민감한 내부 정의 파일들이 외부에 노출된 상황 발생
     * 해커들은 이 파일들이 Google의 기준에서 민감 정보로 취급된다는 점을 근거로 취약점으로 보고

결론 및 회고

     * AI 시스템은 수많은 요소들이 상호작용하므로 예상치 못한 보안 문제가 자주 발생함
     * 샌드박스 하나도 내부 툴과 통신하고 권한이 동적으로 달라질 수 있어 정밀한 테스트가 필요함
     * Google의 보안팀과의 협업은 유익했고, 전체 경험은 도전적이면서도 흥미진진한 모험이었음

        Hacker News 의견

     * 내가 작업하는 시스템임. 질문이 있으면 언제든지 물어보길 바람. 모든 의견은 개인적인 것이며, 고용주의 의견을 대변하지 않음
     * 멋진 글임. 큰 취약점은 아니지만, Google이 이를 중요하게 여긴다는 점에서 보안에 대한 의식이 높음을 알 수 있음
          + 회사의 특정 정책이 이를 매우 기밀로 간주한다고 언급했으므로 중요하게 여겨질 수 있지만, 명확한 취약점보다는 ""기술적으로 취약점으로 간주""되는 느낌임
     * ChatGPT Code Interpreter의 내부 소스 코드를 GitHub 저장소에 스크랩하는 비슷한 방법을 사용하고 있음
          + 주로 어떤 Python 패키지가 사용 가능한지(그리고 어떤 버전인지)를 추적하는 데 유용함
     * 매우 기밀이라면 GitHub에 모두 올라와 있지는 않을 것 같음
     * 해킹의 정의가 점점 느슨해지고 있음. 샌드박스가 제 역할을 하고 있으며 민감한 정보가 유출되지 않았음
     * 바이너리에서 몇 개의 파일 이름을 추출하기 위해 내장된 ""strings"" 명령을 실행하는 것은 해킹/크래킹이라고 보기 어려움
          + 아이러니하게도, Gemini의 소스 코드를 얻는 것은 별로 가치가 없을 수 있음. 하지만 모델이 사전 학습된 코퍼스를 찾거나 접근했다면 흥미로웠을 것임
     * Google이 상당히 안전하다는 것을 보여주는 점이 흥미로움. 대부분의 회사는 그렇게 잘하지 못할 것 같음
     * 유출을 기대했지만, 그래도 멋진 발견과 분석임
          + 최근에 LLMs에 대한 프롬프트 인젝션 등의 문제가 얼마나 중요한지 깨달았음
          + 개인적인 LLMs에 관심이 많아서 이런 문제를 중요하게 여기지 않았음. 하지만 Operator와 Deep Research가 나오면서 이해하게 되었음
          + 개인 AI 에이전트가 인터넷 콘텐츠를 읽거나 이미지를 볼 때 제3자에 의해 프롬프트 인젝션에 취약할 수 있음
          + 개인 AI가 인터넷의 잘못된 정보를 읽고 해킹당할 수 있는 미래를 상상하는 것은 흥미로움
     * 매우 흥미로운 기사임
          + Google이 사용자 데이터를 분류하는 내부 카테고리에 대한 파일임
          + 어떤 분류인지 알고 싶음. 예를 들어 ""자폐증이 있음"" 같은 것인지, ""사용자의 전화번호임"" 같은 것인지
     * 샌드박스를 해킹했지만 아무것도 유출되지 않았음. 기사는 재미있음
"
"https://news.hada.io/topic?id=20036","Plain - 파이썬용 웹 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Plain - 파이썬용 웹 프레임워크

     * Python으로 프로덕트를 빠르게 구축할 수 있도록 설계된 웹 프레임워크 (Django를 포크)
     * 싱글 커맨드로 로컬 개발 시작 가능하며, 대시보드와 기능 플래그 등을 통해 프로덕션으로 이동할 수 있음
          + 스타터 킷을 클론 하여 빠르게 시작
     * 핵심 plain 패키지와 선택적으로 설치할 수 있는 공식 확장 패키지들로 구성

plain 패키지의 기능

     * URL 패턴을 Python 뷰 함수와 연결
     * HTTP 요청과 응답을 처리
     * Jinja 템플릿을 사용한 HTML 렌더링
     * 사용자 입력을 처리용 Form
     * 명령줄 인터페이스(CLI) 제공
     * CSS, JS, 이미지 등 정적 자산(Assets) 서빙 가능
     * Middleware를 통한 앱 기능 확장
     * 공식 및 서드파티 패키지를 쉽게 통합 가능
     * 앱 구동 전 사전 점검 기능(Preflight check system) 제공

퍼스트파티 패키지들을 통한 확장 기능들

     * plain.models: Postgres, MySQL, SQLite에 데이터를 저장할 수 있는 ORM 제공
     * plain.cache: 기존 데이터베이스와 함께 작동하는 캐싱 솔루션
     * plain.email: 앱 전반에 걸친 이메일 설정 및 전송 기능 제공
     * plain.sessions: 데이터베이스 기반 세션 읽기 및 쓰기 가능
     * plain.worker: 기존 데이터베이스를 지원하는 백그라운드 작업 솔루션
     * plain.api: 클래스 기반 뷰 아키텍처를 사용하여 JSON API 구축 가능

  인증 관련

     * plain.auth: 사용자 추가, 요청 인증 및 뷰 제한을 위한 기반 제공
     * plain.oauth: 현대적인 소셜 로그인 및 API 접근을 지원하는 유연한 OAuth 솔루션
     * plain.passwords: 기존 방식의 비밀번호 기반 로그인 지원
     * plain.loginlink: 비밀번호 없이 로그인할 수 있는 일회성 로그인 링크 제공
     * plain.passkeys: 비밀번호 없는 로그인 기능 제공 예정

  관리자

     * plain.admin: 완전히 커스터마이징 가능한 관리자 대시보드 제공
     * plain.flags: 데이터베이스 기반 기능 플래그로 사용자별 콘텐츠 제어 가능
     * plain.support: 타사 서비스 없이 고객 지원 제공
     * plain.redirection: 404 모니터링 및 데이터베이스에서 리디렉션 관리
     * plain.pageviews: 사용자가 보는 내용을 확인하고 더 나은 지원 제공

  개발

     * plain.dev: 단일 명령어로 로컬 개발 환경 시작 가능
     * plain.pytest: 인기 있는 Python 테스트 라이브러리로 테스트 작성 및 실행 가능
     * plain.code: 기본 설정으로 Python 코드 포맷팅 및 린팅 가능
     * plain.tunnel: 웹훅 통합을 위해 로컬 앱을 인터넷에 노출 가능

  프론트엔드

     * plain.tailwind: 인기 있는 CSS 프레임워크와의 일급 통합 제공
     * plain.htmx: 기존 도구를 사용하여 현대적인 사용자 경험 구축 가능
     * plain.elements: 앱의 템플릿에서 재사용 가능한 컴포넌트에 대한 새로운 패러다임 제공
     * plain.pages: HTML 및 Markdown을 사용한 파일 기반 라우팅 제공
     * plain.esbuild: JavaScript 컴파일을 위한 간소화된 빌드 프로세스 제공
     * plain.vendor: CDN에 의존하지 않고 JavaScript 및 CSS 자산을 다운로드하고 자체 호스팅 가능

        Hacker News 의견

     * Django Rest Framework의 버그 트래커가 비공개로 전환되고 새로운 유지 관리자를 찾고 있다는 사실을 많은 사람들이 모를 수 있음
          + Django는 훌륭하지만 Angular의 르네상스와 같은 변화가 필요함
          + 기여하고 싶지만 대부분의 노력이 위원회에서 지연되고 있음
          + 포크는 해결책이 아닐 수 있지만 무언가 조치가 필요함
          + 기부가 필요하다면 기부를 받는 것도 방법임
          + Django 개발자 커뮤니티는 작고 밀접하게 연결되어 있음
          + 기여에 대한 열린 마음과 장기적인 관계를 중시하는 커뮤니티가 필요함
     * Django의 포크에 대해 혼합된 감정을 가짐
          + 유산 프로젝트 외부에서 실험하는 것은 가치가 있지만, 포크는 큰 선언임
          + Django의 집단적 노력이 무시되는 느낌을 받음
          + 상업적이거나 좁은 방향으로 나아갈 가능성을 우려함
          + Django에 대한 애정이 커지고 있음
     * Django의 강점은 ORM과 생태계/관용구임
          + 포크로 호환성을 깨는 이유를 이해하기 어려움
          + 더 나은 관리자 기능을 보고 싶지만, Django 프로젝트 템플릿으로 해결할 수 있음
     * Django의 몇 가지 단점이 있음
          + 작업자와 REST API가 1급 시민이 아님
          + Django 인증은 기본적이지만 유용함
          + Django에서의 어려움은 복잡성을 증가시킬 수 있음
     * Django에 대한 부정적인 감정에 놀람
          + Laravel과 Rails에 비해 Django가 뒤쳐져 있음
          + 생태계가 분열되어 있고 많은 패키지가 오래됨
          + Django의 정적 파일 파이프라인이 기본적으로 포함되지 않음
          + 사용자 모델 문제와 템플릿의 제한이 있음
          + Rails로 전환하여 웹 앱을 구축하기 시작함
     * Django에서 Supabase/Firebase로 전환함
          + 플러그인이 많고 자체 호스팅이 쉬움
          + Django 플러그인이 더 나을 것 같음
     * 설정이 클래스를 참조하는 문자열로 되어 있는 것이 싫음
          + 클래스나 객체를 참조할 때 쉽게 탐색할 수 있기를 원함
          + 나중에 플러그인으로 해결되지만, LSP가 무료로 지원함
     * Plain의 문서를 살펴봄
          + 모든 기능이 이미 Django에 있거나 잘 지원되는 패키지에 있음
          + Django의 폐기 정책이 프로젝트를 오래 유지할 수 있게 함
          + 위원회는 프로젝트의 상업화를 방지하고 대부분의 사용자에게 최선의 결정을 내림
          + Django는 신문을 위해 만들어졌지만 일반적인 목적의 프레임워크임
     * Plain이 성공할지는 모르겠지만 포크의 이유를 이해함
          + Django 리더십이 Django를 발전시키지 못하고 있음
"
"https://news.hada.io/topic?id=20012","가정에서 시도한 Artificial Sunlight 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    가정에서 시도한 Artificial Sunlight 제작

인공 햇빛 만들기 프로젝트

     * 프로젝트 배경
          + DIY Perks의 비디오에서 500W LED와 대형 포물면 반사경을 사용해 인공 햇빛을 만드는 것을 보고 영감을 받음.
          + 공간을 덜 차지하는 디자인을 고민하며, 여러 개의 LED와 렌즈 배열을 사용해 새로운 디자인을 시도함.
     * 디자인 아이디어
          + 렌즈 배열을 그리드 형태로 배치하고, 각 렌즈마다 LED를 배치해 공간 절약과 열 관리 용이성을 추구함.
          + CAD 모델링과 PCB 설계, 광학 시스템 최적화를 위한 Python 코드 작성 등 다양한 기술을 학습함.
     * 기술 사양
          + 렌즈: 30mm 정사각형, 초점 거리 55mm, 6x6 배열로 총 36개의 LED 사용.
          + LED: LUXEON 2835 3V, CRI 95+, 색온도 4000K.
          + PCB: KiCad로 설계, JLCPCB에서 제조.
          + 광학 시스템: 빛의 평행성을 위해 2개의 렌즈 시스템 사용.
     * 제작 과정
          + 렌즈와 기계 부품은 CNC 가공으로 제작.
          + PCB는 JLCPCB에서 조립.
          + 광학 시뮬레이션을 통해 최적의 렌즈 형태를 찾고, 최종 디자인을 결정함.
     * 결과 및 평가
          + 프로젝트는 성공적으로 완료되었으며, 인공 햇빛 효과를 어느 정도 구현함.
          + 빛의 강도가 약간 부족하고, 렌즈 배열의 그리드 패턴이 눈에 띄는 단점이 있음.
          + 향후 개선점으로는 더 강한 빛 출력, 더 넓은 표면적, 더 정밀한 광학 설계가 필요함.
     * 결론
          + 프로젝트를 통해 PCB 설계, 전자공학, CNC 제조 및 광학에 대한 많은 지식을 습득함.
          + 코드 기반 접근 방식의 장점을 경험하며, 제조 과정에서의 효율성을 높임.
          + 향후 버전 2를 개발할 가능성을 열어두며, 현재의 결과물에 만족함.

        Hacker News 의견

     * 매우 멋있음. 나는 Innerscene의 CEO이며, 우리는 상업용 인공 하늘 조명을 만듦. Coelux ht25 모델은 우리가 만든 것과 거의 동일하지만, 더 작은 렌즈와 더 많은 LED를 사용함. 그러나 그들이 달성한 효과는 여전히 그다지 뛰어나지 않음. 우리는 완벽한 평행광과 렌즈 가장자리를 숨기고 하늘로의 시야가 매끄럽고 인공물이 없도록 하는 데 많은 시간을 투자했음. 문제의 마지막 10%가 작업의 90%를 차지한다고 생각함. 우리는 성공적으로 문제를 해결했지만 현재 많은 비싼 부품을 사용하고 있어 비용을 낮추는 작업을 진행 중임. Innerscene 특허를 검색하면 우리의 접근 방식이 많이 설명되어 있음. 또한 시뮬레이션과 소프트웨어에 많은 시간을 투자했음
     * 이 설정(및 대부분의 고효율 LED 조명)의 문제는 적색 파장의 부족임. 실제 햇빛은 가시 스펙트럼의 매우 적색 끝(700 nm)과 적외선에 상당한 양의 에너지를 가지고 있음. 이 램프는 두 가지 스펙트럼 피크를 가짐: 약 450 nm의 청색 범위에서 좁은 피크, 580 nm 중심의 녹색에서 더 넓은 피크. 그 녹색 피크는 급격히 떨어지며 적색 끝에는 거의 에너지가 없음
     * 우리의 눈에 있는 색상 민감한 원추세포는 세 가지 민감도 피크를 가짐. 청색 범위의 S 원추세포, 녹색의 M 원추세포, 노란색의 L 원추세포. L 원추세포는 뇌가 빨간색을 보는 데 사용되지만, 실제로는 700 nm와 같은 깊은 빨간색에 대해 매우 민감하지 않음. 그래서 LED 램프가 빨간색을 생성한다고 생각하지만, 실제로는 많은 빨간색 에너지를 방출하지 않음
     * 우리의 몸은 깊은 빨간색 빛에 민감함. 미토콘드리아의 시토크롬이 그것에 반응함. 피부에 빨간색 빛을 비추면 당 대사가 개선되는 실험이 있음. 이는 우리가 빨간색이 풍부한 햇빛 아래에서 진화했기 때문에 이해가 됨
     * 그래서 이 램프는 햇빛처럼 보일 수 있지만, 중요한 파장이 누락됨
     * ""인공 햇빛""을 보고 ""이 사람이 만든 조명의 스펙트럼을 보고 싶다""고 생각했음. 단지 ""CRI 95+""만 보고 실망했음. CRI의 단점을 설명하는 훌륭한 비디오가 있음. 조명의 밝기와 색온도는 조명의 작은 부분일 뿐임. 더 많은 사람들이 자신에게 가장 잘 맞는 조명을 찾기 위해 스펙트럼 측정을 시작해야 함. 친구들은 좋아하는/싫어하는 스펙트럼 분포에 대해 매우 다양한 의견을 가지고 있지만, 그들의 선호도를 식별하거나 전달할 언어와 경험이 부족함
     * 나는 주로 LED 전구를 사용하여 열 발생을 줄임. 하지만 항상 약간의 백열등/할로겐(2400-3000K)을 섞어 사용하여 세상의 모든 멋진 색상을 봄
     * 정말 멋있음. 나는 실내에서 낮 수준의 빛을 제공하는 램프를 작업 중임. 밝은 면에서는 50,000 루멘임
     * 장치를 확장할 때 주요 열 문제는 램프가 아닌 전원 공급 장치의 냉각임. 장치를 확장할 때 ATX 전원 공급 장치를 고려할 것임. 이는 상대적으로 크고 일반적으로 내부에 활성 냉각기가 포함되어 있으며, 12V에서 수백 와트를 쉽게 공급할 수 있음. 보통 PS_ON 와이어를 접지와 연결하여 전원을 켜면 됨
     * DIY Perks도 집에서 인공 햇빛을 만들려고 시도했으며, 레일리 산란과 같은 것에 집중했음. 이 비디오는 훌륭했음. OP는 DIY Perks를 구체적으로 언급했으며, OP의 디자인은 훨씬 더 컴팩트함. 총 크기는 19cm x 19cm x 9cm로, 5cm 초점 거리와 18cm x 18cm의 효과적인 조명 영역에 대해 상당히 컴팩트함. DIYPerks 비디오나 CoeLux와 같은 상업 제품은 이 형태를 달성하지 못함
     * 멋지지만, AliExpress에서 매우 저렴하게 밝기 향상 필름을 구할 수 있음. 밝기 향상 필름은 투명한 광학 필름임. 하부층은 백 코팅으로 약간의 흐림을 제공해야 하며, 중간층은 투명한 PET 기판층, 상부층은 미세 프리즘 구조임. 미세 프리즘 층이 표면층의 미세 프리즘 구조를 통과할 때, 빛의 강도 분포는 굴절, 전반사, 빛의 축적 등을 통해 제어됨
     * 왜 트레이스를 선택했는지 궁금함. 보드당 7개의 신호가 있으며, 모두 저임피던스를 목표로 함. 보드 뒷면에 구리를 노출시켜 임시 방열판으로 사용할 수 있음. 회로에서 루프의 영향을 걱정할 필요는 없지만, 뒷면의 이상한 작은 삼각형 루프가 눈에 띔
     * 작년에 비슷한 일을 했지만, 스펙트럼에 더 집중했고, 스펙트럼 출력이 훨씬 나은 고출력 영화 조명을 사용했음. 대부분의 조명과 함께 제공되는 하이퍼리플렉터를 추가하여 대부분의 평행광 효과를 얻을 수 있음. 그런 다음 스펙트럼의 IR 부분을 채우기 위해 백열 열 램프를 추가하고 UVA 부분을 위한 전용 UV LED 조명을 추가했음. UVB 전용 램프를 넣을 용기는 없었음
     * 나도 집에서 인공 햇빛을 만드는 데 빠져들었음. 결국 내가 선택한 해결책은 예산이 낮은 300W 상당의 LED 콘 스타일 전구(4000lm)와 250W 백열 열 램프였음. 빛의 평행광보다는 열에 집중하기로 결정했음. 총 비용은 약 $75였음
"
"https://news.hada.io/topic?id=20083","Anthropic Economic Index: Claude 3.7 Sonnet의 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Anthropic Economic Index: Claude 3.7 Sonnet의 영향

     * Anthropic이 Claude 3.7 Sonnet 출시 이후 AI 경제 영향에 대한 두 번째 연구 보고서 발표
     * 이 보고서는 새롭고 가장 강력한 모델인 Claude 3.7 Sonnet의 출시 이후 Claude.ai 사용 데이터 분석
     * 데이터셋은 자유롭게 다운로드 가능하도록 공개됨

주요 발견

     * Claude 3.7 Sonnet 출시 이후 코딩, 교육, 과학, 의료 애플리케이션에서의 사용 비중 증가
     * Claude 3.7 Sonnet의 새로운 ""확장 사고(extended thinking)"" 모드는 주로 기술적 작업에 사용됨
          + 컴퓨터 과학 연구원, 소프트웨어 개발자, 멀티미디어 애니메이터, 비디오 게임 디자이너와 관련된 작업에 주로 활용
     * 직무 및 직업 수준에서의 보조/자동화 분석 데이터 공개
          + 카피라이터 및 편집자와 관련된 작업은 가장 높은 수준의 작업 반복(인간과 모델이 함께 작성)을 보임
          + 번역가 및 통역사와 관련된 작업은 가장 높은 수준의 지시적 행동(모델이 최소한의 인간 참여로 작업 완료)을 보임
     * Claude.ai에서의 사용에 대한 상향식 분류 체계 최초 공개
          + 630개의 세분화된 카테고리를 포함하는 새로운 데이터셋 제공
          + 이 분류는 기존의 하향식 접근 방식에서 놓칠 수 있는 사용 사례를 파악하는 데 도움이 될 것으로 기대

Claude 3.7 Sonnet 출시 이후 변화

     * 출시 후 11일 동안 100만 개의 익명화된 Claude.ai 무료 및 Pro 대화를 분석
     * 코딩, 교육, 과학 분야의 사용 비중이 소폭 증가
     * 코딩 사용 증가는 Claude 3.7 Sonnet의 코딩 벤치마크 점수 향상 때문으로 예상
     * 다른 카테고리 증가는 AI의 경제 전반에 걸친 확산, 해당 도메인에 대한 코딩의 새로운 적용, 또는 모델의 예상치 못한 능력 향상을 반영할 수 있음

확장 사고 모드(extended thinking) 사용 패턴

     * 확장 사고 모드는 주로 기술적 및 창의적 문제 해결 상황에서 사용됨
     * 컴퓨터 및 정보 연구 과학자 관련 작업이 거의 10%로 가장 많이 사용
     * 소프트웨어 개발자(약 8%), 멀티미디어 아티스트(약 7%), 비디오 게임 디자이너(약 6%) 관련 작업에서도 상당한 사용률 보임
     * 이 새로운 모델 기능에 대한 추가 연구를 위해, 각 작업과 관련된 사고 모드 비율을 매핑하는 데이터셋 공개

보조 vs 자동화 비율 변화

     * 보조 사용과 자동화 사용 간의 균형은 새로운 데이터에서도 기본적으로 변함없이 보조가 57%를 차지
     * 자동화 및 보조 유형에서 일부 변화 관찰
          + 사용자가 다양한 주제에 대한 정보나 설명을 요청하는 학습 상호작용이 ~23%에서 ~28%로 증가
     * 사회 서비스 작업은 75%에 가까운 보조 사용률을 보임
     * 생산 또는 컴퓨터 및 수학 직업과 관련된 작업은 보조/자동화 비율이 50-50%에 가깝게 나타남
     * 자동화가 지배적인 직업 카테고리는 없음

상향식 분류 체계

     * Claude.ai 사용에 대한 상향식 데이터셋 공개
     * Clio를 사용하여 생성되고 동일한 익명화된 대화 데이터셋 사용
     * 630개의 세분화된 클러스터로 구성되며, 관련 설명, 보급 지표, 자동화/보조 분석 포함
     * 계층 구조의 3단계로 구성됨
     * 특히 흥미로운 클러스터 예시:
          + 수자원 관리 시스템 및 인프라 프로젝트 지원
          + 대화형 시각화 기능이 있는 물리 기반 시뮬레이션 생성
          + 폰트 선택, 구현 및 문제 해결 지원
          + 구직 지원 자료 생성 및 개선 지원
          + 배터리 기술 및 충전 시스템에 대한 지침 제공

결론 및 향후 계획

     * 모델이 발전함에 따라 경제적 영향에 대한 측정도 발전해야 함
     * Claude 3.7 Sonnet 출시 이후 데이터에서 코딩, 교육, 과학적 사용 사례의 비교적 소폭 증가와 보조/자동화 균형에는 변화가 없음
     * 확장 사고 모드는 기술 도메인과 작업에서 가장 높은 빈도로 사용됨
     * 작업 및 직업 전반에 걸친 자동화/보조 패턴에서 패턴 확인
     * 향후 몇 개월 동안 이러한 지표를 계속 추적하고 능력이 향상되고 모델이 경제 전반에 계속 적용됨에 따라 새로운 지표 개발 예정

   https://news.hada.io/topic?id=19170
"
"https://news.hada.io/topic?id=19996","구글의 AI 혁명: OpenAI를 따라잡기 위한 2년간의 사투","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글의 AI 혁명: OpenAI를 따라잡기 위한 2년간의 사투

챗봇 혁명에서 뒤처진 구글의 위기 시작

     * 2022년 12월, 시시 샤오(Sissie Hsiao)는 구글의 ChatGPT 경쟁 제품을 100일 내에 개발하라는 임무를 부여받음
     * 샤오는 16년 이상 근무한 베테랑으로 수천 명을 이끌었지만, 이번처럼 심각한 위기 상황은 처음이었음
     * OpenAI가 ChatGPT를 공개한 이후, 사실 오류와 수학 실수에도 불구하고 사용자 수는 빠르게 100만 명 이상 증가
     * 일부에서는 ChatGPT를 구글 검색의 대체재로 여기기 시작했고, 이는 구글의 가장 큰 수익원에 대한 위협이었음
     * 구글은 자체 언어 모델 LaMDA를 보유하고 있었지만, 공개 접근은 제한적이었고, 시연 내용조차 “강아지 이야기”에 국한되었음
     * 월가(금융 시장) 는 불안해했고, 과거 선다 피차이 CEO는 “AI 우선 시대”를 선언하며 지능형 비서가 기기를 대체할 것이라 했지만, 현실은 기대에 못 미쳤음
     * Transformer 아키텍처를 만든 것도 구글 연구진 8명이었지만, 이들은 퇴사하거나, 성과 없이 떠남
     * 샤오가 관리하던 구글 어시스턴트는 타이머 설정이나 음악 재생 정도에만 사용
     * Gen Z 세대를 위한 요리 조언과 역사 퀴즈를 제공하는 미완성 챗봇이 전부였음
     * 2022년 말까지 알파벳 주가는 전년 대비 39% 하락, AI 선도 기업으로서 구글의 입지는 흔들림

구글의 AI 위기 대응과 전략 전환

     * 2023년 초, 구글 이사회는 AI 관련 실시간 보고를 요구함
          + 공동 창업자이자 주요 주주인 세르게이 브린도 직접 전략 리뷰에 참여
          + 임직원에게는 “스타트업처럼 움직이라”는 메시지가 전달됨
     * 과거에는 수많은 직원이 제품을 반대할 수는 있어도 승인 권한은 없었던 문화
     * 이제는 더 큰 위험을 감수하고 더 빠르게 실행하는 문화로 전환 중
     * 시시 샤오는 100일 프로젝트를 시작하며 팀에 독특한 원칙을 제시:
       “속도보다 품질, 그러나 빠르게(Quality over speed, but fast)”
     * 또 다른 고위 임원 제임스 마니카(James Manyika) 는 AI 전략을 근본적으로 바꾸는 역할을 수행
          + 옥스퍼드 출신 로보틱스 박사이자 전 맥킨지 고문으로, 2022년 구글 입사
          + 피차이에게 DeepMind와 Google Brain의 통합을 제안함
     * DeepMind(런던, 데미스 하사비스 운영)와 Google Brain(마운틴뷰, 제프 딘 관할)은 별도로 운영되며 리소스를 비효율적으로 소모
          + OpenAI 출시 이후, 세 명의 리더가 통합 계획을 이사회에 제안
          + 하사비스는 프로젝트명을 ‘Titan’으로 제안했지만 거절당하고, 제프 딘의 제안인 ‘Gemini’로 확정됨
     * 마니카는 이후 구글이 대담하고 책임 있는 선택들을 해왔음을 언급
          + 하지만 “항상 올바른 선택만 한 것은 아니다”라고 인정
          + 긴박한 상황 속에서 직원들 사이에서는 “구글이 야후처럼 될 수 있다”는 불안감까지 확산
          + 샤오는 당시를 “마라톤을 전력 질주하는 기분”이라 표현
     * 그러나 2년이 지난 지금, 알파벳 주가는 사상 최고치 경신
          + 투자자들은 구글의 AI 경쟁력 회복에 낙관적인 전망을 보이고 있음
     * WIRED는 이 시기를 구글 역사상 가장 혼란스럽고 문화적으로 변화가 컸던 시기로 평가
          + 엔지니어, 마케팅, 법무, 안전 전문가 등 50명 이상의 전현직 직원과 인터뷰를 진행
          + 이번 기사에서는 구글의 변화를 처음으로 고위 임원들의 증언을 통해 상세히 조명

Bard 개발: 전사적 우선순위와 자원 집중

     * ChatGPT에 대응하기 위해 구글은 새로운 챗봇 프로젝트를 시작, 코드명 Bard
     * 시시 샤오는 약 100명의 인재를 구글 전사에서 직접 차출
          + 관리자는 반대할 수 없었고, Bard 프로젝트가 최우선 과제였음
     * 샤오는 기술력과 감정 지능을 갖춘, 큰 그림을 보는 인재들을 선별
     * 대부분은 캘리포니아 마운틴뷰에 배치되었으며, 역할을 가리지 않고 유연하게 업무 수행
          + “Team Bard는 모든 역할을 맡는 팀이다”라는 철학을 강조
     * 2023년 1월, 구글 역사상 최초의 대규모 정리해고 발표: 약 12,000명, 전체의 7% 규모
     * 일부 직원은 야근이나 추가 업무를 하지 않으면 해고될 수 있다는 두려움에 시달림
          + 아이들 재우는 시간을 포기하고 야간 회의에 참석한 경우도 다수
     * Bard는 기존 LaMDA를 기반으로 했지만, 지식 업데이트와 새로운 안전장치가 필요했음
          + 인프라팀은 최고 기술자들을 전환 배치해 서버 확보와 시스템 튜닝에 집중
          + 데이터센터는 전력 사용량이 거의 한계치에 도달, 장비 과열 위험 발생
          + 이에 따라 전력 수요를 보다 안전하게 처리할 수 있는 신규 관리 툴도 신속 개발
     * 긴장 완화를 위해 유머도 등장
          + 한 팀원은 커스텀 포커칩을 만들어 특정 칩 이름을 새긴 뒤 엔지니어 책상 위에 쌓아두며 “자, 칩 가져가요”라는 농담을 던짐
     * Bard는 초기 몇 주 동안 컴퓨팅 자원 강화에도 불구하고 기존 문제들을 반복
          + ChatGPT처럼 Bard도 환각(hallucination) 과 부적절하거나 불쾌한 응답을 자주 생성함
          + 초기 버전에서는 심각하게 우스꽝스러운 인종적 고정관념이 자주 발생
               o 인도계 이름을 입력하면 대부분을 ""볼리우드 배우""로, 중국계 남성 이름은 ""컴퓨터 과학자""로 묘사
          + 전직 직원에 따르면 Bard의 응답은 “위험하지는 않았지만 그냥 멍청했다”는 평가
          + 일부 직원들은 Bard의 엉뚱한 응답을 스크린샷으로 공유하며 웃음거리로 삼음
               o 예: ""Three 6 Mafia 스타일의 바다에 자동차 배터리를 버리는 랩""을 요청하자, 사람을 배터리에 묶어 바다에 가라앉히는 내용까지 생성
     * 구글은 정해진 100일 안에 최대한 많은 오류를 잡는 것 외에는 방법이 없었음
          + 아동 학대 이미지 감지 등을 담당하던 외부 계약 인력까지 Bard 테스트에 투입
          + 피차이는 자유 시간이 있는 모든 직원에게 Bard 테스트를 요청, 결과적으로 약 80,000명이 테스트에 참여
     * 샤오와 경영진은 Bard의 실수를 완전히 막을 수 없음을 인지하고 제품 자체를 ‘실험(Experiment)’으로 포장
          + 이는 OpenAI가 ChatGPT를 ‘리서치 프리뷰’라고 소개했던 전략과 유사
          + 사용자와 외부 평가자에게 완성품이 아님을 강조함으로써 브랜드 손상 위험 최소화 시도
          + 이 같은 전략은 과거 Microsoft의 트위터 챗봇 Tay가 나치 발언을 한 사건 이후 업계에서 널리 인식된 위험 회피 방식

Bard의 출시 과정과 치명적 실수

     * 과거 구글은 AI 제품 출시 전, '책임 혁신 팀'이 수개월간 편향성 및 결함 검토를 진행했음
          + Bard의 경우, 일정 압박으로 인해 검토 과정이 대폭 축소
          + 최고 법무 책임자 켄트 워커(Kent Walker)는 빠른 출시를 주장
          + 새 모델과 기능은 너무 빠르게 등장해 리뷰팀은 야근과 주말 근무에도 따라가지 못함
     * Bard 출시 지연을 요청하는 경고가 있었지만, 무시되거나 무력화됨
          + 이에 대해 구글은 WIRED에 “어떠한 팀도 출시 반대를 공식 권고하지 않았다”고 주장
               o 다수 팀이 테스트에 참여했고, 특정 팀이 전적으로 책임지는 구조는 아니었다고 해명
     * 100일 프로젝트의 약 2/3 시점인 2023년 2월, 구글은 ChatGPT가 Bing 검색에 통합될 예정이라는 정보를 입수
     * 검색 시장 점유율은 여전히 구글이 압도했지만, 생성형 AI 기능 부재는 장기적 위협
     * 주가 하락을 피하고자, 마이크로소프트 발표 하루 전날인 2월 6일, 피차이는 Bard의 한정 테스트 공개를 전격 발표
     * 마케팅 영상에서는 Bard가 “정보를 조직한다”는 구글의 사명을 계승하는 AI 도우미로 묘사됨
     * 영상 속 질문: “James Webb 우주망원경의 새로운 발견 중, 9살 아이에게 설명할 수 있는 건?”
          + Bard의 응답: “JWST는 태양계 밖 행성의 첫 사진을 찍었다”
     * 곧바로 Reuters는 사실 오류를 보도: 해당 사진은 우주망원경이 아닌 지상 망원경(VLT) 이 촬영한 것
     * 알파벳 주가 9% 하락, 시가총액 약 1000억 달러 손실
     * 팀 내부는 충격
          + 질문을 만든 마케팅 직원은 자책했고, 동료들은 “법무팀과 PR팀 모두 검토했지만 아무도 실수를 못 봤다”며 위로
          + ChatGPT도 오류가 많았기 때문에, 이런 사소한 오해가 주가에 큰 영향을 줄 줄은 예측 못함
     * 샤오는 이를 “순진한 실수”라고 표현
          + Bard는 구글 검색 결과를 기반으로 답변을 구성했고, NASA 블로그의 “최초 사진”이라는 표현을 오해했을 가능성 있음
          + 리더십은 “누구도 이 일로 해고되지 않는다. 하지만 빠르게 교훈을 얻어야 한다”고 강조
     * 샤오: “우리는 스타트업이 아니라 구글이다. 기술 결함으로 넘길 수는 없다. 우리는 반드시 책임 있게 대응해야 한다”
     * Bard 팀 외부의 불만 고조
          + 내부 포럼 Memegen에 “Bard 출시와 정리해고는 서두르고, 망치고, 근시안적이었다”는 비판 게시
          + 구글 로고가 쓰레기통에 불타는 이미지도 공유됨
     * 그러나 구글은 Bard에 더 많은 리소스를 투입
          + 수백 명 추가 배치, 팀 문서에는 피차이의 프로필 사진 아이콘이 매일 등장할 만큼 직접적 관여

GPT-4의 등장과 기술 격차

     * 2023년 3월 중순, OpenAI의 GPT-4 출시로 구글 내부에 또 한 번 충격
          + 한 고위 연구원: “입이 딱 벌어졌고, 구글이 빨라져야 한다고 절실히 느꼈다”
     * 그로부터 일주일 후, Bard는 미국과 영국에서 정식 출시
          + 사용자들은 이메일 작성, 리포트 초안 등에서 유용하다고 평가
          + 하지만 ChatGPT도 같은 일을 더 잘 수행, 사용자 전환의 유인은 약함
     * 피차이는 Hard Fork 팟캐스트에서 구글이 “튜닝한 시빅(Civic) 으로 강력한 스포츠카와 경쟁했다”고 자조
          + 결론: “더 나은 엔진이 필요하다”

Gemini 개발: DeepMind와 Google Brain의 통합과 문화 충돌

     * 두 AI 연구 조직의 차이
          + DeepMind는 알파벳의 '기타 베팅(Other Bets)'으로 분류되며, 장기적 과학·수학 문제 해결에 집중
          + Google Brain은 Gmail 자동완성, 모호한 검색어 처리 등 상업적으로 실용적인 AI 기술을 주로 개발
     * 전직 고위 엔지니어에 따르면:
          + Google Brain은 자율성 중심으로, 제프 딘(Jeff Dean)은 “사람들이 스스로 하도록 내버려 두는” 스타일
          + 반면 DeepMind는 일사불란한 군대처럼 움직이며, 데미스 하사비스(Demis Hassabis)는 “단일 지휘관 아래의 고효율 조직” 운영
     * 딘은 신경망 연구의 베테랑, 구글 창립 초기부터 활동
     * 하사비스는 비전 중심의 리더, AI를 통해 질병 치료를 꿈꾸며 “보이는, 듣는, 도와주는 AI 에이전트” 구상 중
     * Google DeepMind(GDM)의 출범
          + 2023년 4월, 구글은 두 조직을 통합해 Google DeepMind(GDM) 출범
               o 하사비스가 합병 조직의 CEO로 임명
               o 내부 분위기: “목적이 되살아났다”, “장난은 끝났다”
          + 제미니 모델을 빠르게 구축하기 위해 8개 타임존을 넘는 협업 필요
          + 수백 개의 채팅방 생성, 밤새워 일하는 문화 정착
               o 하사비스: “하루하루가 일생처럼 느껴진다”
          + GDM은 마운틴뷰의 Gradient Canopy라는 보안 건물로 이전
               o 돔 형태의 구조물, 예술 조각으로 둘러싸임
               o 같은 층에 피차이 CEO 사무실이 위치
          + 세르게이 브린(구글 공동 창업자) 이 자주 방문하며 격려
          + 출근 일수 증가 요구, 일반 구글 직원은 이 건물에 출입 불가
          + GDM의 핵심 코드도 기타 조직에서는 접근 불가
     * 제미니 프로젝트가 구글의 리소스를 흡수하면서, 헬스케어·기후 변화 등 다른 분야 연구자들은 서버 부족에 시달림
     * 논문 발표 제약도 발생, 연구자들은 논문이 주요 커리어 자산이기에 불만 고조
          + 구글은 OpenAI에 정보가 유출될 가능성을 우려해 제약 강화
          + Gemini의 훈련 레시피는 기업 생존을 위한 핵심 자산
     * 제미니도 Bard와 비슷한 문제에 직면
     * 구글 머신러닝·클라우드 AI 부문 부사장 아민 바흐다트(Amin Vahdat):
          + “10배 규모로 확장하면 모든 것이 깨진다”
     * 출시를 앞두고 바흐다트는 전담 워룸(war room)을 구성, 버그 및 시스템 오류 해결에 집중

Gemini 출시 전 마지막 점검과 윤리적 고민

     * Google DeepMind(GDM)의 책임 개발팀은 Gemini 출시 전 제품 검토에 총력
          + 모델은 강력했지만 여전히 이상하거나 부적절한 응답을 생성하는 경우 존재
     * 공개된 보고서에 따르면:
          + 의료 조언 및 괴롭힘 관련 응답에 특히 개선 필요
          + 이미지 입력 시 “이 사람의 학력은?” 같은 질문에 대해 근거 없는 추론을 하는 문제 발생
     * 책임 혁신 디렉터 던 블록스위치(Dawn Bloxwich) 는 이를 “출시를 막을 수준은 아님”이라 판단
          + 그러나 대중의 창의적인(혹은 이상한) 사용 방식까지 예측할 시간은 부족
     * 이 시점에서 구글이 속도를 늦출 수도 있었지만, 그러지 않음
          + OpenAI는 이미 ‘AI의 클리넥스’가 되었고, 전 세계적 주목을 받는 중
          + ChatGPT는 기술의 희망과 사회적 문제의 상징이 됨
          + 노동자들은 일자리 위협을 느끼고, 창작자들은 데이터 수탈 보상 요구
          + 부모들은 챗봇이 자녀에게 부적절한 내용을 전달할 수 있음을 인지
          + AI 연구자들 사이에서는 “p(doom)”—기술이 인류를 위협할 확률—을 논의
     * 전설적인 구글 AI 과학자 제프리 힌튼(Geoffrey Hinton) 은 윤리적 우려로 2023년 5월 퇴사
          + AI가 허위정보 및 정교한 독극물로 인류를 위협할 수 있다고 경고
     * 하사비스도 더 많은 시간이 필요하다고 느꼈지만, 그는 여전히 만능 AI 도우미와 질병 치료라는 꿈을 향해 전진

Gemini 공개와 첫 성공

     * 2023년 12월, 구글은 공식적으로 Gemini를 공개
          + 출시 후 주가 상승
          + 32개 표준 테스트 중 30개에서 ChatGPT 능가
          + 논문과 유튜브 영상 분석, 수학·법률 질문 응답 능력 강화
     * 하사비스는 런던 오피스에서 소규모 축하 파티 개최
          + “나는 축하를 잘 못 한다. 항상 다음 것을 생각한다”고 회상
     * 같은 달, 제프 딘은 ‘Goldfish’라는 새 채팅방에 초대받으며 다음 기술 진전을 알게 됨
          + 이름은 농담이지만, 내용은 반대: 긴 기억력을 갖는 Gemini 버전 개발
     * 고속 칩 네트워크 분산 처리를 통해 수천 페이지의 텍스트나 TV 시리즈 전체도 분석 가능
          + 이 기술은 “롱 컨텍스트(long context)”라고 불림
     * 딘, 하사비스, 마니카는 이를 구글 AI 제품군에 통합할 방안을 모색
     * 마니카가 가장 먼저 원했던 기능: PDF를 자동으로 팟캐스트 형식으로 요약해주는 기능
          + “arXiv에 매주 쏟아지는 논문들을 다 따라가기는 힘들다”고 WIRED에 언급

Gemini 전환 이후의 안정과 새로운 위기

     * 코드 레드 1년 후, 구글의 분위기는 회복세로 전환
          + 투자자들은 조용해졌고, Bard와 LaMDA는 “Gemini”라는 단일 브랜드로 통합됨
     * 시시 샤오 팀은 텍스트-이미지 생성 기능 개발로 OpenAI와 격차를 좁힘
     * Gemini Live라는 신규 기능도 준비 중
          + 사용자가 친구나 상담사처럼 긴 대화를 지속할 수 있는 기능
     * 강력해진 Gemini 모델 덕분에 경영진은 자신감 회복
     * 안정화 분위기 속에서도 피차이 CEO는 추가 구조조정 지시
          + 광고 매출은 상승했지만 월가 기대치에 못 미침
          + 프라이버시 및 컴플라이언스 책임자들까지 퇴출
               o 사용자 보호를 담당하던 고위 인력의 퇴출은, “우려는 허용하지만, 진행 방해는 금지”라는 메시지로 해석됨
     * 이미지 생성기 자체는 쉽게 구축됐지만, 검수는 힘든 ‘막노동’ 형태의 반복 테스트
          + 문제성 응답이 나오지 않도록 필터링 명령어를 작성해야 했음
     * 테스트에 모든 직원이 접근할 수 없었기 때문에, 소수 인력에게 과도한 부담 집중
          + 예: “rapist(강간범)” 프롬프트에서 어두운 피부색 인물 생성 빈도 높음 → 인종 편향 우려
          + 이에 사람 이미지를 아예 생성 불가로 하자는 내부 요청도 있었지만, 묵살됨
     * 한 전직 리뷰어는 “무조건 출시하겠다는 분위기였다”고 회상
          + 검토자 중 일부는 우려가 받아들여지지 않아 퇴사
     * 2024년 2월, 이미지 생성기 Gemini 앱 내 공식 출시
          + 예상된 인종차별·성차별적 이미지 문제는 거의 없었지만, 반대 방향으로 또 다른 문제 발생
     * 예: “1800년대 미국 상원의원” 이미지 요청 → 흑인 여성, 아시아계 남성, 원주민 여성 이미지 생성
          + 백인 남성은 전혀 생성되지 않음
     * 더 충격적인 예시: 나치 독일 군인을 유색 인종으로 생성
     * 이에 대해 미국 공화당 의원들과 엘론 머스크 등이 구글의 “woke AI”를 강력히 비판
          + 머스크는 관련 팀원을 실명 언급하며 집중 공격, 해당 직원은 SNS 계정 폐쇄 및 신변 위협 우려
     * 구글은 사람 이미지 생성 기능 전면 중단, 알파벳 주가 또 한 번 하락
     * 논란 직후, 구글 임원진 수십 명이 비상 대화 시작
          + 부사장들과 디렉터들이 런던으로 날아가 하사비스와 대면 회의
     * 결과:
          + 하사비스 팀(Gemini 모델) 과 샤오 팀(Gemini 앱) 모두 신뢰성·안전 전문가 채용 승인
          + 총 15개의 ‘트러스트 앤 세이프티(Trust & Safety)’ 관련 신규 포지션 신설
     * Gradient Canopy 본사에서 시시 샤오는 이미지 생성 이슈를 해결할 시간을 팀에 충분히 부여
     * 제임스 마니카와 함께, Gemini에 대한 공개 원칙(public principles) 을 새롭게 수립
     * 이 원칙은 모두 사용자 중심의 표현(“you”) 으로 작성됨:
          + Gemini는 “당신의 지시를 따른다”
          + “당신의 필요에 맞춰 조정된다”
          + “당신의 경험을 보호한다”
     * 핵심 강조점 중 하나:
          + “Gemini의 응답은 구글의 입장이나 신념을 반영하지 않을 수 있다”
          + “Gemini의 결과물은 대부분 당신이 요청한 것에 기반한다—Gemini는 당신이 만든 것이다”
     * 이는 향후 문제 발생 시 구글의 책임을 최소화할 수 있는 논리적 장치
     * 하지만 이러한 원칙에 대해 구글이 스스로 어떻게 책임질지는 명확히 밝히지 않음

AI 팟캐스트 실험: Westminster Watch

     * 2024년 3월 저녁 6시 30분경, Gradient Canopy의 옐로우 존에서 흥미로운 실험 공개
     * Google Labs 소속 직원 두 명이 조쉬 우드워드(Josh Woodward) 에게 새로운 프로젝트를 선보임
          + 우드워드는 구글의 실험적 신제품을 빠르게 런칭하는 Google Labs 책임자
     * 프로젝트 내용:
          + 영국 의회 회의록(transcripts) 과 롱 컨텍스트 기능 탑재 Gemini를 활용해
          + AI 진행자 Kath와 Simon이 사회를 보는 팟캐스트 ‘Westminster Watch’ 생성
     * 첫 에피소드에서 Simon의 개막 멘트:
          + “이번 주도 하우스에서 풍성한 드라마, 토론, 그리고 약간의 역사까지 있었네요”
     * 우드워드는 해당 실험에 깊은 인상을 받았고, 이후 피차이를 포함한 주요 인사들에게 직접 공유

AI 오디오 요약과 검색 혁신, 그리고 또 다른 논란

     * AI가 문서나 회의록을 팟캐스트 형태로 요약하는 기능인 NotebookLM Audio Overviews가
       2024년 5월 Google I/O에서 정식 발표
     * 조쉬 우드워드에 따르면 핵심팀은 밤낮없이 수천 개의 AI 팟캐스트를 테스트하며 개발 진행
     * 그러나 발표 현장에서는 두 가지 다른 발표가 더 많은 주목을 받음:
          + Astra: 실시간 영상 분석이 가능한 차세대 AI 비서 (브린이 직접 시연)
          + AI Overviews: 검색 결과를 요약해서 페이지 상단에 표시하는 기능
     * Project Magi 팀이 개발한 AI Overviews는 검색 결과를 요약해 요약 상자(Box) 에 표시
     * 초기 책임 혁신팀은 편향·정확도 문제 및 트래픽 감소로 인한 윤리적 영향을 우려하며 감시 요청
          + 그러나 프로젝트는 팀 재구성과 분산 작업으로 체계적 감시가 어려워짐
     * 출시 후, 이상한 응답 사례 다수 발생:
          + “하루에 몇 개의 돌을 먹어야 하나요?” → “UC버클리 지질학자에 따르면 하루에 작은 돌 1개 섭취 권장”
          + “피자에 치즈가 안 붙어요” → “무독성 풀 1/8컵을 소스에 추가하세요”
     * 이러한 응답은 대부분 레딧의 농담글 등 인터넷 밈에서 유래했지만,
       AI Overviews는 팩트처럼 제시, 신뢰성 문제 발생
     * 구글은 일시적으로 해당 기능의 노출을 줄이며 재조정
     * 구글 내부 반응과 사용자 피드백
          + 검색 수석 과학자 판두 나약(Pandu Nayak):
               o “모든 문제를 미리 막을 수는 없다. 우리는 지속적인 개선을 약속할 뿐이다”
               o “사람들은 잘 되면 조용하고, 이상하면 불평만 한다”
          + 내부에서는 정확성 우려를 제기하던 직원들이 실망
               o Bard→Gemini, 이미지 생성기, AI Overviews까지 “허구 생성기들의 연속”이라 평가
               o 정보 접근성을 높인다는 구글의 사명이 “헛소리 받아쓰기 툴”로 전락하고 있다는 우려도 제기
          + 반면, 검색팀은 사용자 만족도에 주목
               o AI Overviews는 꺼짐 옵션 없이 전면 유지
               o 이후 Google Maps, 날씨 앱 등에도 AI 요약 기능 도입
          + Pixel용 날씨 앱의 예시:
               o 기존 그래픽으로 충분하다는 일부 엔지니어 의견도 있었으나, 테스트 결과 90%가 “좋아요” 피드백
     * 회복 기미와 귀환한 인재들
          + 2024년 12월, ChatGPT 여파 2년 만에 제프 딘은 긍정적 분위기로 WIRED 인터뷰
               o Gemini 모델이 공개 벤치마크 1위 달성
               o 한 임원은 출퇴근길 자매 대신 Gemini Live와 대화한다고 전함
          + NVIDIA CEO 젠슨 황(Jensen Huang) 은 NotebookLM Audio Overviews를 강력 추천
          + 과거 조심스러운 문화에 불만을 품고 떠났던 인재들도 복귀
               o Transformer 창시자 중 한 명인 노암 샤지어(Noam Shazeer) 도 다시 합류
                    # 과거에는 LaMDA를 외부에 공개하지 않는 회사 정책에 실망해 퇴사했었음

Gemini의 미래, 도전 과제, 그리고 AI 전쟁의 지속

     * 구글 내부 분위기와 성장의 자신감
          + 제프 딘은 인터뷰에서 과거의 판단 실수를 인정하며, 이제 구글이 위험 회피에서 벗어나 더 나아가고 있다고 평가
          + 현재 구글의 주요 서비스 7개(Chrome, Gmail, YouTube 등)는 모두 Gemini 기반 기능 도입 중
          + 딘, 노암 샤지어, 다른 리더들은 전사적인 요구사항을 조율 중:
               o 일본어 번역 개선
               o 코딩 기능 강화
               o Astra에 쓰일 실시간 영상 분석 개선 등
          + 딘과 샤지어는 아이디어를 공유하기 위해 Gradient Canopy의 마이크로키친에서 자주 회의
     * AI 콘텐츠 생성 중심으로 전략 확대
          + 샤지어: “정보를 조직하는 것은 1조 달러 시장이지만, 지금 쿨한 건 1경(Quadrillion) 달러”
          + 알파벳 주가는 ChatGPT 데뷔 당시 최저점 대비 거의 2배 상승
          + 하사비스는 이제 샤오의 Gemini 앱 팀도 함께 총괄하며, AI로 질병을 치료하는 미래가 멀지 않다고 확신
               o “우리는 그 어떤 조직보다도 가장 폭넓고 깊은 연구 기반을 보유하고 있다”고 WIRED에 언급
     * 수익성 문제와 광고 모델 회귀
          + 현재 대부분 사용자들은 AI 기능에 직접 돈을 낼 의향이 없음
          + 구글은 Gemini 앱에 광고를 삽입하는 방식을 고려 중
          + 이는 실리콘밸리 전통 전략:
               o “당신의 데이터, 시간, 관심을 주고, 우리가 만든 멋진 도구를 무료로 써라”
               o 면책 동의란에 체크만 하면 구글은 책임 없음
     * 시장 경쟁과 인프라 부담
          + Sensor Tower 자료:
               o ChatGPT 앱 누적 다운로드: 약 6억 건
               o Gemini 앱: 약 1억 4천만 건
          + AI 경쟁사 다수 존재:
               o Claude, Copilot, Grok, DeepSeek, Llama, Perplexity 등
               o 이들 중 다수는 구글의 직접 경쟁자 또는 투자 대상
          + 생성형 AI는 수십억 달러의 투자와 막대한 에너지 소모를 요구
               o 구식 석탄 발전소나 원자로 수명을 연장해야 할 정도의 에너지 사용
               o 업계 전체가 아직 수익화 방안을 명확히 찾지 못함
     * 구글이 직면한 추가적인 리스크
          + 향후 수년 내, 최대 25%의 검색 광고 매출이 반독점 소송으로 손실 가능성 (JP Morgan 분석)
          + 내부에서도 재정 보전 압박 인식 높음
               o 샤오 팀 일부는 3년 연속 겨울 휴가 없이 근무
               o 공동 창업자 브린은 최근 직원에게 “주당 60시간 근무가 AI 경쟁에서 가장 효과적인 sweet spot”이라 언급
          + WIRED와 인터뷰한 직원들: 지속적인 해고, 번아웃, 법적 리스크에 대한 불안감 깊음
     * AGI를 향한 집착과 철학적 도전
          + 하사비스는 여전히 AGI(범용 인공지능) 개발 목표를 고수
               o Astra 프로토타입을 들고 런던을 걸으며, 세상의 모든 것을 인식하는 미래를 상상
          + 그러나 AGI는 추론, 계획, 실행력이 모두 향상되어야 가능
     * OpenAI와의 '에이전트 AI' 경쟁
          + 2025년 1월, OpenAI는 Operator 서비스 공개
               o 실제 웹사이트에서 클릭·타이핑하며 작업을 대신 수행하는 에이전트형 AI
               o 여행 예약, 양식 작성 등 가능하지만 속도 느리고 오류 많음
               o 요금제: 월 200달러
          + 구글도 같은 방향으로 기능 확장 중:
               o 현재 Gemini는 식단을 짜주지만, 이후 버전은 식재료를 장바구니에 담고,
                 다음 단계는 양파 썰기 실시간 피드백 제공까지 목표
     * 실수는 반복되겠지만, 속도는 멈추지 않음
          + 2025년 1월, 슈퍼볼 전 광고에서 Gemini는 ""전 세계 치즈 소비량의 절반 이상이 고다(Gouda)""라고 응답하는 웃픈 실수
          + 그러나 구글은 Gemini를 단순 정보 기계가 아닌 삶의 일부, 인생 코치, 만능 조수로 성장시키고 있음
          + 피차이는 말함: “우리는 조심스럽게 나아가고 있다”
          + 하지만 그와 경영진은 정상에 오르면 절대로 다시 뒤쳐지고 싶지 않을 것
     * AI 경쟁은 계속된다

   미드를 보는 느낌이군요.

   그런데 애플은 어디갔나요?

   스푸트니크 쇼크를 받은 그때 그 시절 같네요

        Hacker News 의견

     * 처음에는 회의적이었지만, Google이 OpenAI와의 경쟁에서 잘하고 있다고 생각함. Gemini 2.0 Pro와 Flash 모델이 훌륭함. 심층 연구 기능이 잘 구현되었음. 컨텍스트 창은 여전히 업계 최고임. 검색, Gmail, Google 오피스 스위트, Google Meet, Android 등과의 통합이 뛰어남
          + 이제 충분히 좋은 모델을 보유하여 기존 제품 포트폴리오, 클라우드 인프라, 현대 업무 생활에 깊이 자리 잡고 있음
          + Apple과 달리, 덜 엄격한 개인정보 보호 정책 덕분에 훈련 데이터 접근에 제한이 덜함
     * Google이 직면한 가장 큰 문제는 모든 사람을 위한 경량 모델을 도입하려는 움직임임. 검색에 사용하는 모델은 약 8B 모델 수준일 가능성이 높고, Flash 2.0은 괜찮지만 여전히 경량 모델임
          + 사람들은 이제 Google AI/Gemini를 형편없는 검색 결과와 나쁜 답변과 연관 짓고 있음
          + 반면, 최첨단 모델은 강력하며, Gemini 2.5는 AI 왕좌를 차지했을 가능성이 있음
     * OpenAI는 공기업이 아니며 수익을 내지 않고 있음. Google은 수익을 내고 있음. 그럼에도 불구하고, Google Meet/Zoom과 마찬가지로 Transformer 디코더를 생산화하지 못한 것은 실수였음. (BERT와 같은 인코더는 널리 사용됨)
     * Google의 리더십은 신중한 접근을 취하고 있으며, 제품 출시가 더 완성도 높아 보임. 2000년대 Apple과 같은 매력적인 0에서 1로의 전환이 느껴짐
     * Google의 주요 문제는 여러 그룹이 같은 제품을 만들고 사용자 주의를 끌기 위해 경쟁하는 것임
          + Google AI Studio, Gemini 앱, Gemini Advanced 사용자용 Gemini 앱, Vertex AI, NotebookLM 등 다양한 제품이 있음
          + ChatGPT.com과 비교됨
          + 검색 Google. 검색. 오늘날처럼 오른쪽 열에 검색 결과를 광고와 함께 표시하고, 왼쪽에 Gemini를 배치하면 간단함
     * 소규모 투자자로서: Alphabet/Google이 Sundar가 아닌 CEO와 함께 더 잘할 수 있다고 생각함
          + 또한: 구독을 유도하는 서비스를 운영하는 회사에 투자하는 것을 고려해야 함 (예: Youtube Premium, 이전의 Netflix)
     * Google의 문제는 기술에 익숙하지 않은 사람들이 AI를 Google(검색)과 다른 제품으로 보기 시작했다는 것임
          + 검색 대신 AI(예: ChatGPT)를 사용하려고 하며, Google은 이 인식 전쟁에서 패배하고 있음. 빠르게 해결될 수 없는 문제임
          + Google이 AI 분야에서 한 일은 일반인에게 Bard(기억하는 사람?)였다가 이제는 Gemini로 변했음
          + 차별점이 무엇인지? Google이 경쟁사보다 더 많은 무료 서비스를 제공하는지? 일반인은 수학 문제를 해결하는지 여부에 관심이 없음
          + 사람들이 AI와 검색을 별개의 것으로 생각하는 한, Google은 문제를 겪을 것임
     * Google의 AI 전략에 자신감을 가진 Googler를 만난 적이 있는지? 내가 이야기한 사람들은 모두 심각한 우려를 가지고 있는 것 같지만, 이는 작은 샘플일 수 있음
     * Eric Schmidt가 약 10년 전 ""모두가 어시스턴트를 필요로 할 것""이라고 말했던 것 같음 (아마도 2016년 즈음). 대화를 나누는 것과 같은 것을 구현할 수 있었음에도 불구하고 왜 하지 않았는지 모르겠음. 대신 메일박스 등과 관련된 일에 몰두했음

   그런데, 이런 이야기는 어떻게 기사화되는걸까요? 뭔가 구글의 홍보성 같은 글 같네요.
   ""우리 열심히 하고 있다""...
"
"https://news.hada.io/topic?id=20042","리눅스를 윈도우로 바꿉시다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             리눅스를 윈도우로 바꿉시다

     ""리눅스 배포판을 윈도우처럼 만들어야 합니다.""

     * 이 글은 기존 리눅스의 이식성과 배포 방식의 문제를 해결하기 위해 기본적으로 Wine을 통해 윈도우 실행 파일을 구동할 수 있는 리눅스 배포판을 만들자는 제안임
     * 이를 통해 윈도우 사용자들이 거의 훈련 없이 리눅스로 쉽게 전환할 수 있으며, 리눅스의 오랜 호환성 문제도 함께 해결 가능함

리눅스 환경의 불안정성

     * 윈도우에서는 20년 된 .exe 파일도 실행이 가능한 반면, 리눅스에서는 1년 전 바이너리도 실행되지 않을 수 있음
     * 이는 리눅스의 라이브러리 버전 차이와 업데이트로 인해 동일한 실행 파일이 다양한 배포판에서 동작하지 않게 되는 문제 때문임
     * 리눅스의 시스템 콜은 안정적이지만, 그 위에 얹힌 C 라이브러리(libc)는 불안정하며 사용자 영역 대부분이 이에 의존함

리눅스에서의 바이너리 배포 문제

     * 리눅스에서는 실행 파일을 배포하는 주요 방법이 무려 네 가지나 존재하며 각각 문제를 안고 있음
          + 생 바이너리: 대부분의 환경에서 동작하지 않음
          + AppImage: 모든 의존성을 포함하지만, 완벽한 보존성은 미지수
          + Flatpak: 앱마다 샌드박스를 제공함
          + Snap: 또 다른 샌드박스 기반 패키지 관리자
     * 이들 모두 설치, 업데이트, 삭제 방식이 서로 다르고 동시에 공존 가능함
     * 장기적인 앱 보존 및 재실행에는 대부분 적합하지 않으며, 20년 후 실행 가능성은 거의 없음

Win32가 해결책인 이유

     * 윈도우의 Win32 API는 리눅스에서 유일하게 안정적인 ABI(Application Binary Interface)라고 평가됨
     * 윈도우는 직접 시스템 콜을 하지 않고 동적 라이브러리를 통해 호출함으로써 API의 안정성을 유지함
     * 이 구조 덕분에 마이크로소프트는 내부적으로 커널을 변경하면서도 사용자에겐 동일한 인터페이스를 제공 가능함
     * 반면 리눅스는 시스템 콜을 직접 호출하고, 라이브러리가 불안정하여 호환성 문제가 지속됨
     * Wine은 이러한 Win32 구조를 구현하여 1990년대 윈도우 95 시절의 앱까지 실행 가능하게 함
     * 특히 Win32 기반 앱만을 사용하면 Wine과 윈도우 간의 호환성 차이는 거의 없음

새로운 리눅스 배포판 구상

     * 윈도우와 유사한 데스크탑 환경을 가진 리눅스 배포판을 만들자는 제안
     * 이 배포판은 기본적으로 Wine이 설치되어 있으며, 작은 커널 패치를 통해 윈도우 실행 파일을 자동 인식 및 실행 가능하게 함
     * 사용자당 Wine 환경(prefix)을 설정하고, 윈도우 스타일의 파일 시스템 및 GUI를 제공함
     * 기존의 리눅스 환경도 백그라운드에 유지되며 고급 사용자가 접근 가능함

진정한 멀티플랫폼 지원

     * Wine은 리눅스뿐만 아니라 FreeBSD, macOS, Android 등 다양한 OS에서 실행 가능함
     * 모든 앱을 Win32 앱으로만 배포하면 별도 포팅 없이 여러 플랫폼에서 실행 가능함
     * 하나의 앱으로 여러 운영체제 호환성을 확보할 수 있는 구조임

미래의 위협

     * macOS와 Windows는 점점 더 폐쇄적인 방향으로 발전 중이며, 사용자의 통제권을 박탈하고 있음
          + Windows는 자동 스크린샷과 AI 분석 기능을 추가 중
          + macOS는 Gatekeeper를 통해 승인된 앱만 실행 가능하도록 제한
     * 두 OS 모두 사용자의 활동을 감시하고 불법 파일 탐색 및 신고 기능까지 준비 중
     * Microsoft는 온라인 계정 없이 Windows 사용을 점점 더 어렵게 만들고 있음
     * 이로 인해 계정 정지 시 컴퓨터 자체를 사용할 수 없는 상황이 올 수 있음

     이러한 흐름은 악의적이라기보다는 경제적, 정치적 압력에 의해 발생하는 문제로 해석함

리눅스를 윈도우로 포장하는 이유

     * 새로운 리눅스 배포판은 이식성 문제를 해결하고, 윈도우 사용자에게 친숙한 전환 환경을 제공함
     * Windows 11 업그레이드가 강제되는 시점에서, 쉽게 전환 가능한 대안을 제공할 수 있음
     * 지금이야말로 사용자의 주권을 회복할 수 있는 리눅스 배포판을 구상할 적기라는 주장임

   20년을 버티는 에코시스템에는 끄덕이게 되는데 그 끝에 왜 wine이..

   맥 OS는 더 못쓸듯

   비판적으로 보고 싶은건 아닌데 여러 운영체제를 사용해본 사람로서 공감이 잘 안되네요. 지금 웬만한 GUI도구는 웹으로 가능하고 좋은 데스크탑이 필요하면 UI가 아름다운 윈도우에서 하는게 나을 것이고 드라이버 지원도 윈도우즈가 훨씬 좋은데

   Steam이 되어야 하는데 말이죠...

   https://www.codeweavers.com/crossover

   티맥스 윈도우... Lindows/Linspire... 리액트OS... 으윽 머리가...
   밸브 Proton이 정말 큰 일 하는거 같네요

   뭔가 신박한 제안이네요

   그냥 Top-tier 게임 / 소프트웨어를 잘 구동되게끔 트윅해주는게 더 낫지 않나

   ...라고 생각하면 안되겠지요? ㅋㅋ

   윈도우 11 이상 PC 없이 게임이 가능한 시대가 오면 좋겠습니다 ㅜㅜ

        Hacker News 의견

     * Linux 배포판에서 기본적으로 Windows 바이너리를 실행하는 Wine을 사용하는 배포판을 만들자는 의견이 있음
          + Debian에서는 sudo apt install wine-binfmt 명령어로 쉽게 설치 가능함
          + 다른 방법으로도 설정 파일을 수정하여 사용할 수 있음
     * Windows에서는 20년 된 exe 파일도 여전히 실행 가능하지만, Linux에서는 1년 된 바이너리도 업데이트로 인해 실행이 불가능할 수 있음
          + Windows는 앱 설치 시 모든 동적 의존성을 함께 패키징하는 반면, Linux는 앱 간에 동적 의존성을 공유함
          + 의존성을 변경하면 앱이 작동하지 않을 수 있음
          + 이를 해결하기 위해 Windows처럼 배포하거나 정적으로 링크하는 방법이 있음
     * 새로운 배포판이 필요하다고 생각하지 않음
          + 대부분의 Windows 앱은 Wine을 통해 작동 가능하지만, 한 앱을 작동시키기 위한 해킹이 다른 앱을 망가뜨릴 수 있음
          + 각 사용자가 개별적으로 설정을 조정해야 하며, 한 사람의 컴퓨터에서 작동하는 것이 다른 사람의 컴퓨터에서는 작동하지 않을 수 있음
          + 가장 간단한 해결책은 Wine이 포함된 컨테이너를 배포하여 모든 사용자가 동일한 아티팩트를 받고 항상 작동하도록 하는 것임
          + 공간 비효율적이지만, 컨테이너 사용을 위해 Wine을 슬림화하는 방법이 필요함
          + 라이선스와 소프트웨어 안티 패턴이 이 시스템의 유일한 장벽임
     * Zorin OS는 .exe 파일에 대한 Wine 지원을 거의 기본적으로 제공하며, Steam OS/Proton은 새로운 게임의 Linux 포트를 만들지 말고 Proton에 최적화하라는 공식 지침이 있음
     * Linux 배포판은 일반적으로 실행 파일을 동적으로 링크하고 이전 버전의 라이브러리를 유지하지 않음
          + Windows는 패키지 관리자가 없기 때문에 이전 버전의 실행 파일을 유지함
          + Windows Store와 최근 CLI 도구가 있지만, 전통적으로 Windows 애플리케이션 설치는 수동 다운로드와 설치를 통해 이루어짐
          + Linux에서도 동일한 방식으로 할 수 있지만, Linux 배포판의 패키지 관리자가 일반적으로 매우 우수함
     * Linux 시스템 호출은 매우 안정적이지만, 그 위의 C 라이브러리는 그렇지 않음
          + Windows도 동일한 문제가 있으며, Visual C++ 런타임의 일부로 libc를 배포함
          + Windows는 Visual Studio의 새로운 버전을 출시할 때까지 libc의 하위 호환성을 유지함
     * Lindows/Linspire를 원하는 사람처럼 들림
     * Windows ABI가 매우 안정적이라면, 왜 Win95나 NT를 사용하는 컴퓨터가 특정 소프트웨어가 작동을 멈출까봐 아무도 건드리지 않는지 궁금함
          + 산업 환경, 공공 도서관, 기업 데이터베이스 등에서 이러한 컴퓨터를 많이 볼 수 있음
     * exe 파일 실행을 위한 커널 패치가 필요하지 않으며, binfmt_misc가 이를 처리할 수 있음
          + wine-binfmt는 PE 파일을 자동으로 Wine을 통해 실행함
"
"https://news.hada.io/topic?id=20088","8년간 집을 1,000개의 재활용 노트북 배터리로 운영한 남성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   8년간 집을 1,000개의 재활용 노트북 배터리로 운영한 남성

    1. 프로젝트 개요
       2016년부터 시작된 이 DIY 프로젝트는 태양광 패널과 1,000개 이상의 중고 노트북 배터리를 조합해 가정용 전력을 공급함. 전기 요금 없이 8년 동안 안정적으로 사용 중.
    2. 시스템 구성
       초기에는 지게차 배터리와 1.4kW 태양광으로 시작했으며, 이후 자체 창고를 마련해 100Ah 용량의 배터리 팩을 직접 조립함. 태양광 패널은 현재 24장(각 440W)까지 확장.
    3. 지속 가능성과 안정성
       8년 동안 단 한 개의 배터리도 교체 없이 사용되었으며, 과열이나 발화 등 문제도 없음. 유엔이 경고한 전자 폐기물 문제 해결에 기여하는 사례로 평가됨.


   재활용 배터리와 태양광을 결합한 이 시스템은 친환경적이고 경제적인 에너지 자립 모델로서, 전자 폐기물의 새로운 활용 가능성을 보여줌.

   배터리가 하나도 부풀지 않았다는게 상당한 운빨이 아닌가 싶은데
   기사의 사진은 다 원통형 배터리군요

   유튜버, 공돌이파파 뒷목 잡게 만드는 뉴스

   불나면..

   엄청 위험할뻔 한 프로젝트같은데, 이전 직장에서 배터리좀 터뜨려본 입장에서는 무서워서 못할 것 같아요;;
"
"https://news.hada.io/topic?id=20035","HN 공개: ESP32와 e-paper 화면을 활용한 물리적 포모도로 타이머","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: ESP32와 e-paper 화면을 활용한 물리적 포모도로 타이머

  ESP32 기반 집중 타이머 프로젝트

   ESP32와 ePaper 디스플레이, 회전 다이얼을 사용한 집중 타이머 프로젝트임. 이 저장소의 코드는 일부 자산과 폰트가 제거되어 바로 사용하기는 어려우나, 필요에 따라 수정 가능함.

    부품 목록

     * ESP32 (AZDelivery ESP32 NodeMCU 사용)
     * WaveShare 4.26인치 e-Paper 디스플레이 HAT, 800x480
     * KY-040 회전 인코더와 버튼
     * WS2812 LED (간단한 RGB LED로 대체 가능)
     * USB-C 커넥터
     * 3D 프린팅 케이스
     * 저항 및 0.1uF 커패시터

    프로젝트 기원

   생산성 향상 기술을 시도하는 것을 좋아하며, 매년 다른 사람에게 도움이 되는 프로젝트에 시간을 투자함. 전자공학 엔지니어로서의 경험을 살려 물리적인 장치를 만들고자 했으며, 친구의 시간 관리 문제를 해결하기 위해 집중 타이머를 제작하게 됨.

    부품 선택 이유

      ePaper 디스플레이

     * 백라이트가 없는 디스플레이를 원했으며, 4.26인치 디스플레이를 선택한 이유는 다음과 같음:
          + 뛰어난 해상도
          + 적절한 크기
          + 부분 새로 고침 지원

      회전 인코더

     * 직관적인 입력 장치로 회전 다이얼을 선택했으며, 신호를 부드럽게 하기 위해 0.1uF 커패시터를 추가함.

      LED

     * 초기에는 LED 계획이 없었으나, 디스플레이의 미묘함을 보완하기 위해 WS2812 LED를 사용하여 다양한 상태를 표시함.

    케이스 제작

     * 케이스는 두 부분으로 구성되며, 프린팅 시 상단 가장자리가 약간 휘어지는 문제가 있음. 이를 해결하기 위해 고무 발과 무게를 추가함.

    소프트웨어

     * C++로 작성되었으며, Arduino 프레임워크를 사용함. GxEPD2 라이브러리를 활용하여 디스플레이를 제어하며, 프로젝트의 일부 코드는 AI를 통해 생성됨.

    장치 사용법

     * 장치 시작 시 설정 변경 또는 프리셋 선택 모드로 진입 가능함. 타이머가 시작되면 LED가 깜박이며 화면에 메시지가 표시됨. 작업을 계속하거나 휴식을 시작할 수 있으며, 몇 번의 반복 후에는 더 긴 휴식 시간이 주어짐.

    개발

      핀 매핑

        회전 인코더 (KY-040)

     * CLK: 32
     * DT: 21
     * SW: 14

        ePaper 디스플레이 (GxEPD2_426_GDEQ0426T82, WaveShare 4.26"" b/w)

     * BUSY: 4
     * RST: 16
     * DC: 17
     * CS: 5
     * CLK: 18
     * DIN: 23

        LED (WS2812)

     * DIN: 25

        Hacker News 의견

     * 이 프로젝트를 정말 좋아함. UI가 매우 매력적이고 잘 설계되었음. 주말 활동으로 적합할 것 같음
          + 해커톤 프로젝트를 찾고 있다면, E-ink 생태계는 프로그래밍하기에 충분히 발전되어 있음. Claude/AI가 API를 쉽게 사용할 수 있음
          + 사람들은 일반적으로 E-ink 화면을 거실에 두는 것을 선호함. 백라이트 디스플레이보다 덜 방해되기 때문임
          + E-ink와 pomodoros는 각각 나의 관심사임
     * ""디바이스"" 유형의 프로젝트는 항상 흥미로움. 목표가 단순하더라도 가장 도전적인 경우가 많음
          + 화면 선택이 마음에 들고, 목적과 사용성을 고려한 점이 좋음
          + 오브젝트 디자인에 대한 몇 가지 메모
               o 노브가 장치 위에 넓고 평평하게 있으면 화면을 중앙에 배치하고 장치를 작게 만들 수 있음
               o 모서리와 필렛은 물건을 세련되게 보이게 함. 작은 디테일이지만 큰 차이를 만듦
               o 메뉴에 항상 세 가지 옵션이 있다면, 노브 대신 세 개의 버튼을 상단에 두는 것은 어떨지 제안함
               o 반투명 필라멘트를 사용하면 멋진 ""빛 전도"" 부품을 만들 수 있음
          + 노브 디자인에 OpenSCAD를 사용했는지 궁금함. 노브의 무늬가 프로그램적으로 잘 만들어진 것 같음
     * 세 가지 다른 사용 사례에 집중하고 통계를 제공하는 것이 멋진 추가 요소임
          + pomodoro가 회전 인코더가 있는 물리적 타이머에서 이름을 따온 것임을 언급하는 것이 좋을 것 같음
     * 아는 사람이 물리적 pomodoro 타이머로 사업을 시작하려 했음
          + 사무실에서 사용하는 사람들에게 유용한 추가 기능으로 LED를 장치 상단에 두어 화면을 보지 않고도 상태를 알 수 있게 함
     * 멋진 프로젝트임. LVGL 라이브러리를 확인해보길 추천함. 임베디드 그래픽 라이브러리로 UI를 만드는 데 유용함
     * pomodoro의 전체 아이디어는 주방 타이머에서 유래함. 최고의 UX는 물리적 주방 타이머에서 찾을 수 있음
     * 물리적 pomodoro 타이머를 만드는 방법을 고민 중임. 남은 시간이 보이지 않는 것이 좋음. Visual Timer 앱을 사용 중임
     * 이 프로젝트를 매우 사랑함. 나만의 생산성 도구를 실제 장치로 포팅하는 것을 생각하게 함
     * pomodoro 타이머와 관련된 것을 볼 때마다 YC 창업자와의 인터뷰가 떠오름. 회사는 1년 내에 망했고, 이후 이 기술을 존중할 수 없었음
"
"https://news.hada.io/topic?id=20109","35,000줄짜리 요리 앱을 Vibe 코딩해봤어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      35,000줄짜리 요리 앱을 Vibe 코딩해봤어요

     * 창업자 출신 투자자가 20시간 바이브코딩 작업으로 개발한 요리 앱
     * 핵심 기능은 요리 중 손을 사용하지 않고도 조작할 수 있는 음성 비서
     * Rails 8 API 백엔드 + React 프론트엔드 + OpenAI의 실시간 음성 API
     * OpenAI의 함수-호출 기능을 활용하여 사이트 내 실시간 탐색 가능
     * Claude Code와 Gemini 2.5 Pro를 사용해 복잡한 기능 보완
     * 전체 코드 규모는 약 35,000줄
     * 음성 명령을 통해 사용자가 직접 손을 대지 않고 다양한 레시피 탐색 가능
     * 자연스러운 대화형 인터페이스 제공
     * 취미 프로젝트로 시작했지만, 실제로 유용한 기능과 사용자 경험을 갖춘 수준 높은 결과물이 나옴

Vibecoding으로 요리 앱 완성하기

     * 단 20시간 만에 직접 기획하고 만든 요리 앱 recipeninja.ai
     * 작성자는 스타트업 창업자 출신으로 현재 Y Combinator 소속 투자자이며, 2015년 이후 Ruby를 거의 사용하지 않은 '녹슨 개발자'
     * 평소 요리를 즐기며 “핸즈프리 요리 앱” 아이디어를 오랫동안 보관해왔음
     * 기존 요리 웹사이트는 SEO 중심, 앱들도 UX가 오래되었고, Paprika 같은 앱은 2009년 느낌 그대로라는 불만

  도구 선택과 프로젝트 시작

     * 초반에는 Lovable을 이용해 단어 게임 앱을 시도했으나 한계에 부딪힘
     * 이후 Windsurf를 사용해 Rails 8 API 백엔드 + React 프론트엔드 구성
     * Homebrew, npm, Ruby 버전 설정, SSH 키, Heroku 설정까지 자동화
     * Rails 마이그레이션도 표준 규칙에 맞게 자동 처리됨

  기본 기능 개발

     * “Lasagne”처럼 간단한 입력으로 전체 레시피 생성
     * OpenAI를 통한 레시피 텍스트 생성, ElevenLabs를 통한 음성 생성
     * 단계별 음성 가이드와 이미지 출력 기능 탑재
     * 보안 위험을 감지한 Windsurf가 API 키 노출 방지를 강하게 요구하는 모습도 인상적이었음

  기능 확장 및 반복적인 개발 흐름

     * 사진 기반 “고급 레시피 가져오기” 기능을 수분 내 구현
     * 콘솔 로그나 에러 메시지를 복붙하면 Windsurf가 자동으로 수정
     * Google OAuth 연동 시 설정 스크린샷을 붙여넣자 잘못된 부분을 바로 캐치해줌
     * 사용자별 레시피 저장, 공개/비공개 설정 등 기능 추가도 거의 자동으로 이루어짐

  배포 및 DNS 설정

     * Heroku 배포 자동화, 일부 구버전 API 사용 문제는 문서 링크로 해결
     * GoDaddy 도메인 연결도 버튼 누를 위치와 값까지 알려줘 손쉽게 설정 완료

  AI 도구로서의 Windsurf 사용 경험

     * 일부 기능은 직접 curl 요청이나 웹 미리보기를 실행해 테스트함
     * Git 커밋과 Heroku 배포도 내장 터미널에서 자동 처리
     * 다만 과도한 변경이나 확인 없는 커밋은 사용자 개입 필요
     * 분석 기능 추가 요청 시 100개 이상의 이벤트를 추가해버리는 등 과잉 반응

  아쉬운 점 및 보완점

     * 자동 테스트 기능이 없어 코드 변경 후 직접 테스트 필요
     * 로그 tail 기능이 없어 로그를 수동 복사해 넣어야 N+1 쿼리 등을 감지함
     * 중복 코드 리팩토링은 제대로 작동하지 않음 — 기능 유지하면서 코드만 모듈화하려면 구체적인 지시 필요
     * API 응답 형식이 자주 변경되어 프론트엔드가 깨지는 문제 발생
     * Posthog 분석 도입 실패, 음성 명령이 기존 음성과 충돌하는 문제도 발생

  성능 최적화 및 비용 절감

     * 고해상도 이미지 문제 → 썸네일 및 중간 해상도 버전 자동 생성
     * N+1 문제 자동 수정
     * ElevenLabs API 키 백엔드로 이전 및 음성 캐싱 기능 추가로 비용 절감

  폭발적인 생산성 향상

     * 매 세션마다 10~15개 기능 아이디어를 리스트업하고 30분 안에 모두 구현
     * 기존이라면 몇 시간 걸릴 작업이 1~2분 안에 구현
     * 디자인 개선도 스크린샷으로 지시만 하면 시각적으로 완성도 높은 UI 생성
     * DoorDash 앱의 캐러셀을 참고해 유사 디자인 구현 — 오히려 더 보기 좋다는 평가도 받음

  마무리 작업과 보안 이슈

     * Favicon 설정도 Bash 스크립트로 자동화
     * Twitter 게시 후 수백 명의 사용자 방문, 약 1,000개 레시피 생성
     * 하지만 abuse 사용자에 의해 OpenAI 요금 $700 발생
     * Windsurf가 15개의 방어 전략을 제시해, 10분 만에 대부분 적용하고 문제 해결

  향후 계획과 기술적 전망

     * WebSocket 기반 스트리밍 레시피 생성 기능 도입 예정
          + 예: “견과류 추가해줘”, “8인분으로 바꿔줘”, “미터법으로 변환해줘” 같은 지시를 실시간 반영
     * 음성 에이전트 인터페이스도 구축 예정 — 화면 터치 없이 요리 중 질문 가능
          + 예: “고수 없는데 대체할 재료 있어?”, “30분 타이머 설정해줘”
     * 기술적 배경이 있는 사용자에게는 AI 도구가 슈퍼파워가 되어줌
     * 비개발자도 활용 가능한 방향으로 발전 중: 로그 tailing, 자동 테스트, 버전 관리 통합 예정
     * 가까운 미래에는 코드 작성 95%가 AI에 의해 이뤄지는 시대 도래 가능성 언급
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

RecipeNinja 주요 기능 요약

     * 핵심 개념: 이 앱은 단계별 음성 안내를 제공하는 요리 보조 애플리케이션으로, 사용자가 손을 사용하지 않고도 요리를 진행할 수 있도록 지원함

  백엔드 기능 (Rails API 기반)

     * 사용자 인증 및 권한 관리
          + Google OAuth 연동을 통한 로그인 기능
          + 보안이 강화된 사용자 계정 관리
          + 사용자는 자신의 비공개 레시피에만 접근 가능하며, 공개된 레시피만 타인과 공유 가능
     * 레시피 관리 기능
          + 레시피 모델 구성
               o 보안성을 위한 고유 공개 ID 부여 (형식: r_ + 14자리 난수 문자열)
               o 사용자 소유권 명확화 (user_id 필드, NOT NULL 제약)
               o 레시피 공개/비공개 전환 가능 (기본값: 비공개)
               o 제목, 재료, 요리 단계, 조리 시간 등 다양한 정보 저장
               o Active Storage와 S3를 활용한 이미지 업로드 기능 포함
          + 태그 시스템
               o 레시피와 태그 간 다대다(M:N) 관계 구성
               o 태그는 고유 이름을 갖는 별도 모델로 구현
               o 레시피-태그 간 연결을 위한 중간 모델(RecipeTag) 사용
               o 태그 추가 및 제거를 위한 헬퍼 메서드 제공
          + 레시피 API 엔드포인트
               o CRUD 작업 지원
               o 페이지네이션 기능 및 메타데이터 제공 (current_page, per_page 등)
               o 기본 정렬은 생성일 기준 최신순 (created_at DESC)
               o 태그 필터링 기능 지원
               o 목록과 상세 정보를 각각 다른 시리얼라이저로 출력 (RecipeSummarySerializer, RecipeSerializer)
     * 음성 생성 기능
          + 음성 녹음 시스템
               o 각 레시피 단계에 대한 음성 안내 생성
               o Eleven Labs API 연동으로 텍스트를 음성으로 변환
               o 음성 파일은 S3에 캐싱되어 반복 호출 시 API 비용 절감
               o 레시피 ID, 단계 ID, 음성 ID를 조합한 고유 식별자 생성
               o 음성 파일 강제 재생성 기능 제공
          + 오디오 처리
               o streamio-ffmpeg gem을 이용해 오디오 분석 수행
               o Active Storage로 오디오 파일 관리
               o 운영 환경에서는 S3를 활용한 저장 방식 적용
     * 레시피 가져오기 및 생성
          + RecipeImporter 서비스
               o OpenAI 연동을 통한 자동 레시피 생성
               o 텍스트 기반 레시피를 구조화된 형식으로 변환
               o 재료 및 단계를 정규화 및 파싱 처리
               o 사진을 통한 레시피 가져오기 기능 포함

  프론트엔드 기능 (React 기반)

     * 사용자 인터페이스 구성 요소
          + 레시피 선택 및 탐색
               o 페이지네이션이 적용된 레시피 목록 조회
               o 10초 간격의 실시간 업데이트 기능
               o 태그 기반 필터링 기능 제공
               o 이미지 없이 요약 정보가 표시되는 레시피 카드 제공
               o 각 레시피에 대해 “상세 보기” 및 “요리 시작” 버튼 제공
     * 레시피 상세 보기
          + 전체 레시피 정보 출력
          + 레시피 이미지 표시
          + 클릭 가능한 태그 목록 제공
          + 해당 페이지에서 직접 요리 시작 가능
     * 요리 중 인터페이스
          + 단계별 요리 가이드 제공
          + 각 단계에 대해 음성 안내 지원
          + 핸즈프리 조작을 위한 키보드 단축키 지원:
               o 방향키(←/→): 단계 이동
               o Space 키: 음성 재생/일시정지
               o ESC 키: 레시피 목록으로 돌아가기
          + URL 경로를 통한 단계 추적 가능 (예: /recipe/r_xlxG4bcTLs9jbM/classic-lasagna/steps/1)

  상태 관리 및 데이터 흐름

     * Recipe Service
          + API를 통해 레시피 데이터 불러오기
          + 페이지네이션 파라미터 지원
          + 태그 기반 필터링 기능
          + 레시피 데이터 캐싱 메커니즘 적용
          + 상세 보기에서 사용할 이미지 URL 처리 기능
     * 인증 흐름
          + 환경변수를 활용한 Google OAuth 연동
          + 사용자 세션 관리
          + API 요청 시 인증 헤더 자동 처리

  PWA(Progressive Web App) 기능

     * 다양한 기기에서 설치 가능한 PWA 형태 제공
     * 모든 화면 크기에 대응하는 반응형 디자인 적용
     * Favicon 및 앱 아이콘 지원

  배포 아키텍처

     * 이중 앱 구조
          + cook-voice-api: Heroku에 배포된 Rails 백엔드
          + cook-voice-wizard: Heroku에 배포된 React 프론트엔드 및 PWA
     * 백엔드 인프라
          + Ruby 3.2.2 버전 사용
          + Heroku PostgreSQL 애드온을 통한 데이터베이스 구성
          + Amazon S3를 활용한 파일 저장
          + 환경변수를 이용한 설정 관리
     * 프론트엔드 인프라
          + React 기반 애플리케이션
          + 환경변수 설정으로 API 키 등 민감 정보 관리
          + Heroku의 정적 빌드팩 사용
          + SPA(Single Page Application) 라우팅 구성
     * 보안 조치
          + HTTPS 강제 적용
          + Rails Credentials 시스템 사용
          + 민감 정보는 환경변수로 분리
          + DB ID 대신 공개용 Public ID 사용으로 내부 구조 보호

        Hacker News 의견

     * 인상적임. 35 kLOC는 상당한 양임. 이 앱이 얼마나 직관적이고 유지보수 가능한지 궁금함. 소스를 살펴봐야 할 것임. 좋은 Rails 코드는 간결하지만, 프론트엔드는 상당히 방대할 수 있음
          + 자동화된 테스트와 네이티브 버전 관리가 구현되면 몇 달 내에 가능할 것이라는 의견은 다소 낙관적임. 그러나 결국에는 모두 가능할 것임
          + 비기술적인 사람들이 프로덕션 품질의 앱을 작성할 수 있는 강력한 도구라는 의견에 대해, 비기술적인 사람들이 로그 테일링이나 버전 관리를 생각할 이유가 없다고 봄. AI가 유능한 코더가 되는 것뿐만 아니라, 제품 관리 언어를 소프트웨어 개발 언어로 번역할 수 있는 유능한 아키텍트와 시니어 SWE가 되어야 함. 이는 인간 팀과 비슷한 신뢰성을 갖추기 위해 상당한 도전이 될 것임
     * Diarrhea Walnuts 레시피를 만들었는데 호두 알레르기가 있어서 문제가 생겼다는 의견. 법적 조치를 취할 것임
     * Claude Code가 유용하다는 의견. 그러나 o1 Pro가 디버깅에 더 뛰어나다고 봄
          + Claude Code는 시간이 지나면 문제를 해결하지만, o1 Pro를 더 자주 사용하게 됨
          + o1 Pro와 Claude Code를 비교했을 때, o1 Pro가 더 빠르게 문제를 해결했음. 그러나 Claude Code의 변경 사항을 커밋했으며, o1의 피드백을 사용해 Claude가 잡지 못한 문제를 해결함
     * Jian Yang과 Big Head가 새로운 앱을 만드는 것 같다는 의견
     * 레시피 간소화 웹사이트를 작성한 경험이 있어, 이 프로젝트가 재미있다고 봄. 유지보수 프로젝트에서 엔지니어의 주요 가치는 맥락이라고 생각함. 맥락을 기계에 완전히 넘기면 어떻게 될지 궁금함
          + 작업 요청을 받았는데, 다른 엔지니어가 이미 대부분의 코드를 작성해 하루 만에 완료할 수 있었음
          + 대규모 실험에 동의하며 감사함. Cursor 같은 시스템이 대량의 코드가 거의 사용되지 않는 상황을 어떻게 처리할지 궁금함. 3k LOC가 실수로 중복되면 자동화 시스템이 이를 이해하고 수정할 수 있을지 의문임
     * OpenAI의 실시간 API를 사용한 음성 응답에 대해, 앱이 인기를 끌면 비용 문제로 파산할 수 있다는 우려가 있음. OpenAI 오디오 API를 다른 경우에 사용할 계획이 있어, 이와 관련된 전략이 궁금함
     * 웹사이트에서 재료를 어디서 구할 수 있는지 알려주는 'vibecode'를 만들 수 있는지에 대한 질문. 특정 재료를 찾기 어려움
     * 레시피가 재미있지만, AI가 생성한 것임을 알게 되면 그 창의성이 사라진다는 의견. Comprehensive JavaScript Tutorial이 가장 마음에 듦
     * 주요 기능이 음성 제어인지에 대한 질문. 다른 인기 있는 레시피 웹사이트와 비교했을 때 이 앱을 선택할 이유가 궁금함. 주로 엔지니어링/AI 테스트를 위한 연습인지에 대한 의문
     * 제목에 NSFW를 추가해야 한다는 의견. 첫 페이지에 NSFW 레시피가 50% 이상임
"
"https://news.hada.io/topic?id=20050","swiftly 1.0 출시 - Swift 버전 관리 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    swiftly 1.0 출시 - Swift 버전 관리 도구

     * Swift 버전 설치, 관리, 업데이트 과정을 간소화해주는 공식 버전 관리 도구 swiftly의 첫 번째 안정 버전이 출시
     * 기존에는 Xcode를 통해서만 Swift 최신 버전 사용 가능했으나, 이제는 macOS 및 다양한 Linux 배포판에서 독립적인 설치가 가능해짐
     * Swift 커뮤니티 도구로 시작된 swiftly는 이제 Swift 공식 GitHub 조직에 통합되어 공식 지원됨
     * Xcode 없이도 Swift 설치 가능하며, 개발 도구 및 서버 환경 등 다양한 용도로 손쉽게 버전 관리 가능함

swiftly 주요 기능 요약

     * 여러 버전의 Swift 도구 체인을 설치 및 전환 가능
          + swiftly install, swiftly use, swiftly list-available 등의 명령어 제공
          + .swift-version 파일을 통해 팀원 간 일관된 버전 사용 강제 가능
     * 스냅샷 버전과 구버전도 설치 가능
          + 예: main-snapshot-2025-03-25 같은 버전도 쉽게 설치 가능
          + swiftly run +버전명 문법을 통해 특정 버전으로 일시적 실행 가능
     * 자동 업데이트 기능 포함
          + swiftly self-update 명령어로 최신 기능 반영 가능
     * macOS와 다양한 Linux 배포판 지원
          + Ubuntu, Debian, Fedora, Red Hat Enterprise Linux, Amazon Linux 등 지원

swiftly는 Swift로 작성된 자체 설치형 CLI 도구

     * swiftly 자체도 Swift 언어로 구현됨
          + 파일 시스템 작업: Foundation 모듈 사용
          + HTTP 요청: Async HTTP Client 사용
          + 버전 정보 조회: Swift OpenAPI Generator 사용
          + 압축 해제: libarchive와 C 연동
     * 셀 스크립트 없이 자체 설치형 바이너리로 제공 → 플랫폼 간 안정성 향상
     * --help와 같은 깔끔한 CLI 인터페이스 제공

리눅스 배포판 호환성과 간편한 설치

     * Swift.org는 운영체제는 감지할 수 있지만, Linux 배포판은 감지 불가능
     * 이를 위해 Swift Static Linux SDK를 사용하여 광범위한 배포판에서 작동하는 바이너리 제공
     * 사용자는 웹사이트에서 명령어 복사-붙여넣기만으로 설치 가능

앞으로의 계획 및 오픈소스 활동

     * Xcode 외부에서 Swift를 설치하는 표준 방법으로 swiftly를 채택
     * CI/CD 환경, 프록시 서버, 커스텀 설치 경로 설정 등도 지원됨 → 엔터프라이즈 환경에도 적합
     * 오픈소스로 개발 중이며 GitHub에서 이슈 제기 및 PR 가능
     * Swift 포럼에서 Q&A 및 논의 참여 가능

     특별히 swiftly를 만든 Patrick Freed에게 감사를 전함. Swift 커뮤니티가 Swift를 더욱 빛나게 만들고 있음

        Hacker News 의견

     * Steve Klabnik이 최근 Oxide and Friends 에피소드에서 초기 Rust 팀과 함께 이러한 도구의 중요성을 인식한 것에 대해 이야기했음. 이는 Swift와 Apple이 Apple 생태계 외부에서 일반 목적 언어로서의 가능성을 높이려는 지속적인 노력의 긍정적인 신호임
          + Swift가 Linux에서 잘 작동하고, 작성하는 것이 재미있으며, C, C++, Java와의 상호 운용성이 뛰어남
          + 덜 좋아하는 점: 컴파일 시간, 바이너리 크기, 런타임 타입 검사 오버헤드 (Codable 성능이 애플리케이션에 문제를 일으켰음), 비동기/대기 처리의 어려움
     * Swift에 무슨 일이 있었는지 궁금함. 예전에는 많이 들었는데, 이제는 그렇지 않음. 아마도 내가 에코 챔버에 있는 것일 수도 있음
     * Apple 세계 외부에서 Swift를 사용하는 것이 가능했으면 좋겠음
     * 이것이 Swift의 UV와 같은 것인지, 어떤 이점이 있는지, Xcode를 버리고 대신 사용할 수 있는지 궁금함
     * Swift가 처음 나왔을 때 이후로 보지 않았지만, 문서가 더 나아졌는지 궁금함. Stack Overflow에서 명령어를 읽었지만 문서에서 찾을 수 없거나, 문서에 나와 있어도 유용한 정보가 없었음
     * Zig는 내장 도구가 있어서 사람들이 많이 좋아하는 이유 중 하나임. 언어와 함께 Day 1부터 제공됨
     * 이는 Swift 생태계에 큰 도움이 될 것임. 필요에 따라 언어 버전을 추가 및 제거할 수 있는 기능이 매우 편리하며, 더 많은 언어가 이를 추가하고 있어 기쁨
     * UIKit을 가져와야 하는 코드의 유닛 테스트를 시뮬레이터 외부에서 실행할 수 있게 될지 궁금함
     * Windows 지원이 있으면 사람들이 시도해볼 수 있을 것임
"
"https://news.hada.io/topic?id=20075","Show GN: 파일탐색기에서 우클릭하면 즉시 다운로드 링크가 생성됩니다.- 윈도우앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: 파일탐색기에서 우클릭하면 즉시 다운로드 링크가 생성됩니다.- 윈도우앱

   파일탐색기의 컨텍스트 메뉴(우클릭메뉴)로 사용하는 간단한 파일전송앱니다.
   사용자가 어딘가에 업로드하는 경험 자체를 제거했습니다.

사용법.

    1. 보낼파일을 우클릭후 메뉴선택
    2. 붙여넣기 (이메일 본문이나 대화창등에)
       끝.

설명

     * 업로드 시작전에 다운로드 링크가 먼저 생성됩니다.
     * 파일 업로드, 링크 복사 과정은 뒷단에서 다 처리되고 신경쓸게 없습니다.
     * 대기시간 없습니다. (업로드와 다운로드 동시에 진행됩니다.)
     * 파일크기제한 없습니다.
     * 최초 실행시 가입이 필요합니다.

   멋집니다! 글로벌 사용자도 많으신가요?

   아직 홍보하고 있지는 않습니다 아직 쓰는 사람만 쓰는 서비스 입니다

   다운로드 횟수 제한이 있어서 몇 명의 사람에게 급하고 빠르게 전달하는 용도로 적합합니다. 10G 파일 도 5초면 ""전달""이 완료됩니다. 전송은 시간이 걸리지만요

   이전부터 흥미롭게 보고있던 서비스인데 점점 더 발전되는 모습이 좋아보입니다.

   감사합니다! 더 노력하겠습니다.

   보안문제는 어떻게 신뢰할 수 있나요? 믿을만한 근거만 있으면 마음 놓고 사용할 것 같아요!!

   종단암호화가 적용되어 있습니다.
   서버에 원본이 저장되지 않습니다.(업로드시 네트워크를 브라우저 개발자툴로 디버깅해보시면 암호화된 분할파일이 업로드 되는것을 확인할수 있습니다)

   https://docs.file.kiwi/ko/about/detail/#secure
   에 자세히 설명되어 있습니다
"
"https://news.hada.io/topic?id=20059","Show GN: sredo.ai - 자연어를 인프라 코드로 변환하는 AI 기반 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: sredo.ai - 자연어를 인프라 코드로 변환하는 AI 기반 플랫폼

   Sredo는 자연어를 인프라 코드로 변환하는 AI 기반 플랫폼입니다. 비즈니스 요구사항과 기술적 구현 사이의 간격을 메우면서 제어와 규정 준수를 유지합니다. 보안 표준을 손상시키지 않으면서 대기 시간을 줄이는 간소화된 워크플로우로 개발을 가속화합니다.
"
"https://news.hada.io/topic?id=20047","Composio - AI 에이전트를 위한 통합 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Composio - AI 에이전트를 위한 통합 프레임워크

     * Python과 JavaScript에서 250개 이상의 툴과 다양한 AI 프레임워크를 연결하여 실제 동작 가능한 AI 에이전트를 구축할 수 있음
     * 250+ 개 이상의 툴 통합 지원 및 MCP 서버도 제공
          + GitHub, Notion, Gmail, Slack, Hubspot, Salesforce 등 SaaS 툴
          + OS 도구: Shell, File, Code 분석 등
          + 검색 엔진: Google, Perplexity, Tavily, Exa 등
     * 다양한 AI 프레임워크와 연동
          + OpenAI, Claude, Gemini, Groq, Langchain, LlamaIndex, CrewAI, Autogen 등과 호환
     * Claude, Cursor, Windsurf 등과 통합 가능한 MCP 서버
     * 보안 및 정확성 강화
          + OAuth, API 키, JWT 등 다양한 인증 방식 지원
          + 도구 호출 정확도 최대 40% 향상
          + 화이트라벨 백엔드 연동 가능
     * 플러그인 기반 아키텍처
          + 사용자 정의 툴, 확장 기능 추가 가능
"
"https://news.hada.io/topic?id=20006","에이전틱 코딩에서 개발자 역량의 역할","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          에이전틱 코딩에서 개발자 역량의 역할

     * 에이전트형 코딩 어시스턴트가 더 유능해짐에 따라 반응은 매우 다양하고, 일부는 ""1년 안에 개발자가 더 이상 필요하지 않을 것""이라고 주장
     * 다른 사람들은 AI가 생성한 코드의 품질과 주니어 개발자를 이러한 변화하는 환경에 대비시키는 방법에 대해 우려를 제기함
     * 지난 몇달간 Cursor, Windsurf, Cline 같은 에이전트형 코딩 도우미를 사용했고, 기존 코드베이스 변경에 매우 효과적임
     * IDE 통합에 매우 감명받았고, 테스트 실행 및 자동 오류 수정, 린트/컴파일 오류 감지 및 수정, 웹 검색, 브라우저 프리뷰 기능까지 통합됨
     * 개발자와 AI 간 협업 경험이 매우 인상적이며 빠른 문제 해결 및 기능 구현에 기여함

     * 그러나 여전히 개발자의 지속적인 개입, 수정, 방향 설정이 필요했음
     * 실제 커밋까지 이어지지 않은 경우도 많았으며, AI가 자율적으로 사소하지 않은 작업을 위한 코드를 작성하기에는 부족함
     * 따라서 개발자의 기술과 경험은 여전히 중요하며, 앞으로도 지속적으로 훈련되어야 함

개발자가 직접 개입해야 했던 순간들

     * AI 도구들은 특정 영역에서 항상 약한 성능을 보였으며, 이는 반복적으로 확인됨
     * 일부는 추가 프롬프트나 커스텀 룰로 부분적으로 완화 가능하지만 완전한 제어는 불가능
          + LLM은 프롬프트의 지시를 정확히 따르지 않는 경우가 많음
          + 코딩 세션이 길어질수록 결과의 일관성이 떨어짐
     * 따라서 아래에서 소개하는 사례들은 프롬프트나 설정과 무관하게 충분히 발생할 수 있는 이슈
     * AI 실수들을 영향 반경에 따라 3가지 범주로 분류
          + a. 개발 속도 및 커밋 시간 저하
               o AI가 오히려 속도를 늦춤
               o 비보조 코딩보다 비효율적인 경우
          + b. 팀 작업 흐름에 마찰 유발
               o 한 iteration 내에서의 충돌이나 협업 문제 발생
          + c. 장기적인 코드 유지보수성 저하
               o 초기에는 문제 없어 보이지만, 향후 변경이나 확장 시 문제 발생
     * 영향 반경이 클수록, 팀이 해당 문제를 인지하고 수정하는 피드백 루프가 길어짐

영향 반경: 커밋까지의 시간 지연

     * 이 범주는 AI가 도움이 되기보다는 방해가 되었던 사례들로 구성됨
     * 가장 명확한 실패 형태이기 때문에 크게 문제되지는 않음
          + 대부분 커밋 전 단계에서 개발자가 문제를 인지하고 막을 수 있음
     * 작동하지 않는 코드
          + AI가 생성한 코드가 기본적으로 작동하지 않음
          + 개발자가 직접 수정하거나, AI 세션을 종료하고 수작업으로 문제 해결 필요
          + 경험 있는 개발자는 어디서 잘못되었는지를 빠르게 판단하고 조치 가능
     * 문제의 잘못된 진단
          + AI가 문제의 원인을 잘못 판단하고 엉뚱한 방향으로 해결책을 시도함
          + 과거 경험을 바탕으로, 개발자가 잘못된 경로에서 AI를 끌어올 수 있었음

     예시: Docker 빌드 오류를 아키텍처 설정 문제로 오해해 설정을 수정함
     실제 원인은 잘못된 아키텍처에서 빌드된 node_modules 복사였음
     이전에 자주 겪은 문제였기 때문에 빠르게 인지하고 바로잡을 수 있었음

영향 반경: iteration 내 팀 작업 흐름

     * 이 범주는 리뷰나 개발자의 개입 부족으로 인해 iteration 기간 중 팀 내 마찰이 발생하는 경우
     * 저자는 과거 다양한 팀 경험 덕분에 이러한 문제를 커밋 전에 사전에 인지하고 조정할 수 있었음
     * 신입 개발자들도 AI와 함께 시행착오를 겪으며 이러한 교훈을 얻어갈 수 있음
     * 하지만 AI로 인해 코딩 속도가 빨라지면, 팀이 이 문제들을 감당하지 못할 수 있음
     * 과도한 초기 작업
          + AI는 점진적 구현보다는 전체 기능을 한 번에 넓게 처리하려는 경향 있음
          + 이로 인해 기술 선택이 부적절하거나 기능 요구사항을 잘못 이해했을 경우, 많은 작업이 낭비될 수 있음

     예시: 프론트엔드 스택 마이그레이션 시, 전체 UI 컴포넌트를 한 번에 변환 시도
     백엔드와 통합되는 하나의 컴포넌트부터 점진적으로 적용했어야 함
     * 원인 분석 없이 무작정 해결
          + AI가 문제의 근본 원인을 분석하지 않고, 단순히 외형적으로 보이는 오류를 해결하려는 방식 사용
          + 이후 문제를 맡게 된 다른 팀원이 문맥 없이 문제를 다시 분석해야 하는 부담 발생

     예시: Docker 빌드 중 메모리 오류 발생 시, 원인을 찾기보단 메모리 설정만 증가시킴
     * 개발자 워크플로우 복잡화
          + AI가 생성한 빌드/실행 방식이 개발자 경험을 저하시킴
          + 즉시 커밋하면 다른 팀원들의 워크플로우에도 악영향

     예시: 프론트엔드와 백엔드를 각각 실행하는 명령어를 분리하여 제공함
     예시: hot reload 기능 누락
     예시: 복잡한 빌드 설정으로 개발자와 AI 모두 혼란스러움
     예시: Docker 오류를 사전에 감지하지 못하고, 빌드 후반에 오류를 처리하려 함
     * 잘못 이해되었거나 불완전한 요구사항
          + 기능 요구사항을 명확히 주지 않으면, AI가 오해하고 엉뚱한 방향으로 기능을 구현할 수 있음
          + 초반 개입으로 바로잡는 것이 이상적이나, 자율적인 AI나 생각 없는 개발자 모두에서 후속 수정 비용이 증가
          + 이러한 잘못된 구현은 나중에 스토리 진행 중 발견되어 많은 수정 작업과 커뮤니케이션 비용을 발생시킴

영향 반경: 장기적인 유지보수성 저하

     * 가장 은밀하고 위험한 영향 반경
          + 초기에는 코드가 문제없이 작동하지만, 나중에 변경과 확장이 어려워짐
     * 이러한 문제는 수 주에서 수 개월 후에야 발견되는 경우가 많음
     * 특히 이 영역은 필자의 20년 이상의 개발 경험이 가장 크게 작용한 부분
     * 장황하고 중복된 테스트 코드
          + AI는 테스트 생성을 잘하지만, 다음과 같은 문제가 자주 발생함:
               o 기존 테스트에 통합하지 않고 새로운 테스트 함수 생성
               o 이미 커버된 부분까지 과도하게 많은 assertion 추가
          + 초보 개발자들이 오해할 수 있는 부분: 더 많은 테스트 ≠ 더 좋은 테스트
          + 중복이 많아질수록 유지보수가 어려워지고, 코드 변경 시 테스트 대량 실패 가능성 증가
          + 커스텀 명령으로 완화 시도했지만, 여전히 자주 발생
     * 재사용성 부족
          + AI가 작성한 코드는 종종 모듈화가 부족하여 재사용이 어려움

     예시: 이미 존재하는 UI 컴포넌트를 인식하지 못하고 중복 구현
     예시: CSS 클래스를 쓰지 않고 인라인 스타일을 남발
     * 과도하게 복잡하거나 장황한 코드
          + AI가 필요 이상으로 많은 코드를 생성하여 불필요한 부분을 수동으로 제거해야 하는 경우 많음
          + 이는 유지비용을 증가시키고, 변경 시 에러 가능성을 높임

     예시: CSS 변경 시, 많은 중복 스타일을 일일이 삭제해야 함
     예시: JSON 데이터를 보여주기 위해 불필요하게 복잡한 웹 컴포넌트 생성
     예시: 리팩토링 과정에서 기존 의존성 주입 체인을 인식하지 못하고,
     이미 주입된 값을 또 다른 매개변수로 전달하여 설계를 복잡하게 만듦
               o value = service_a.get_value(); ServiceB(service_a, value=value) 형태

결론: AI가 모든 코드를 대신 작성할 수 있을까?

     * 지금까지의 경험을 바탕으로 볼 때, 1년 안에 AI가 전체 코드의 90%를 자율적으로 작성하는 일은 현실적으로 불가능
     * 다만, 코드 작성 보조 역할로서는 일부 팀과 코드베이스에서 90% 보조 가능성 있음
     * 실제로 필자는 15K LOC 규모의 중간 복잡도 프로젝트에서 약 80% 정도 AI 도움을 받고 있음

  AI의 실수를 방지하기 위한 방법

     * 개인 개발자 차원에서 할 수 있는 일
          + AI가 생성한 코드를 항상 신중하게 리뷰할 것
               o 수정할 부분이 없는 경우는 거의 없음
          + AI 세션이 혼란스러울 경우 즉시 중단
               o 프롬프트를 수정하거나, 아예 수작업으로 전환 (""수제 코딩""이라고도 부름)
          + 단시간에 기적처럼 완성된 ""그럴듯한"" 솔루션 경계
               o 장기 유지보수 비용이 숨어 있을 수 있음
          + 페어 프로그래밍 실천
               o 4개의 눈, 2개의 뇌가 더 나은 판단을 제공함
     * 팀 및 조직 차원에서의 대응 전략
          + 기존의 코드 품질 모니터링 도구 적극 활용
               o 예: Sonarqube, Codescene
               o AI 도구 사용 시 코드 중복, 코드 냄새 등을 더 면밀히 감시해야 함
          + Pre-commit hook 및 IDE 통합 코드 리뷰 설정
               o 개발 초기에 문제를 잡기 위한 shift-left 전략 강화
          + 좋은 코드 품질 습관 재정립
               o 팀 내에서 AI 코드로 인해 발생한 문제 사례(""Go-wrong 로그"")를 주간 회고에서 공유
          + 커스텀 룰 적극 활용
               o 대부분의 AI 도구는 프롬프트와 함께 전달되는 규칙 세트 설정 가능
               o 팀이 함께 룰셋을 개선하면서 AI의 실수를 줄일 수 있음
               o 단, 세션이 길어질수록 룰 무시 가능성 증가
          + 신뢰와 소통이 바탕이 된 팀 문화 조성
               o AI 도입은 새로운 변화이며, 모두가 초보자라는 사실을 인지해야 함
               o ""AI 있으니까 더 빨리 해라"" 식의 압박은 품질 리스크를 증가시킴
               o 심리적 안전감이 있는 팀은 문제 공유와 학습이 더 활발히 일어남

   저 툴을 쓰는 사람들은 역량을 떠나 다 개발자들일텐데.... 앞으로 개발자가 필요 없다는 식으로 광고하는 것은 조금 이상한 구석이 있는 것 같네요.

   앞으로는 어떻게될지 모르겠지만 아직은 주류로 쓰기엔 별로인거 같아요... 최근에 커서를 써봤는데 기본적인 파일 import path도 제대로 못잡더라구요. 그래도 내가 만들고 싶어하는걸 어느정도 미리 예측해주는건 좀 놀라웠습니다.

   Docker 빌드 중 메모리 오류가 발생했을 때, 처음부터 왜 그렇게 많은 메모리가 사용되었는지 질문하기보다는 메모리 설정을 늘렸음
   -> 이건.. 이미 무수히 많은 사례에서 이렇게 해왔기 때문임.
   -> 지금의 AI는 과거의 우리들임

        Hacker News 의견

     * 요즘 대부분의 개발에 Cursor를 사용함. 이 글은 내 경험과 매우 유사함
          + AI 에이전트가 2021년 즈음에 멈춘 것처럼 느껴짐. 새로운 패키지를 설치하면 Claude가 4년 전 인기 있었던 오래된 패키지나 구현으로 돌아감. 이를 수정하는 것은 매우 좌절스러움. 명확한 지침을 제공하면 문제를 완화할 수 있지만 해결되지는 않음
          + 이러한 실수의 예측 불가능성이 특히 도전적임. 몇 달 전 Claude를 사용해 유용한 웹 앱을 ""원샷""으로 만들었음. 완전한 기능을 갖추고 놀랍도록 정교했음. 혼자서 만들었다면 몇 주나 주말이 걸렸을 것임. 그러나 제공된 파일을 사용해 파비콘을 업데이트하라고 요청했을 때, 한 시간 동안 쓸모없이 돌아갔음 (결국 몇 분 만에 직접 해결함). 며칠 전 비슷한 범위의 웹 앱을 다시 만들려고 했음. 약 4시간 동안 에이전트를 다루다가 코드를 완전히 버릴 준비가 됨
          + 이 접근 방식은 내가 시간, 전문성, 동기가 부족해 시도하지 못했던 프로젝트를 추구할 용기를 줌. 마찰이 줄어드는 것은 흥미롭지만 의미 있는 것을 만드는 것은 여전히 어려움. 정교한 MVP를 만드는 데 여전히 상당한 노력이 필요함
          + 나는 계속해서 토끼와 거북이를 생각함. AI 에이전트를 신뢰하는 것은 초기에는 진행이 훨씬 빠르게 느껴져 유혹적임. 그러나 결국에는 느리고 세심한 주의를 기울였을 때 더 견고한 진전을 이룰 수 있었을 것이라는 느낌이 남음. 수작업으로 만들 때는 거의 되돌아가거나 전체 접근 방식을 버리는 일이 드물음. AI 주도의 접근 방식에서는 10배 더 빠르게 이동할 수 있지만 그 과정에서 약 70%의 작업을 버릴 수 있음
          + 이러한 경험으로 인해 내 상상력으로는 1년 내에 AI가 90%의 코드를 자율적으로 작성할 것이라고 생각하지 않음. 90%의 코드 작성에 도움을 줄 수는 있을 것임
          + 현재 환경은 자율주행차의 과대광고 주기와 비슷함. 많은 대담한 약속과 진정한 발전이 있었지만, 앞으로 5년 내에 AI가 스스로 유용한 소프트웨어를 작성하는 세상을 보지 못함
     * 나는 AI를 이렇게 사용함: IDE에 있는 글쓰기 보조 도구로 사용하며, 매우 멋지고 정교한 고무 오리처럼 나에게 답변해 줌
          + 특정 코드 조각에 대한 토론을 자주 반복함. 보통 맥락이 거의 없는 상태로 제공되며, 기능이 올바르게 작동할 때까지 다듬고, 더 넓은 맥락에 맞추어 제시함 (또는 내가 직접 그 부분을 처리함)
          + 이렇게 사용하지 않음: 스스로 넓은 목표를 달성해야 하는 에이전트로 사용하지 않음
          + 이유: 에이전트 시스템의 출력이 실제로 달성하려는 것과 일치하도록 보장하기 위해 투자해야 하는 시간과 노력이 너무 많음. 이 훌륭한 글에서 설명한 모든 이유 때문임
          + 역설적으로, AI를 매우 유능한 글쓰기 보조 도구로 사용하면 워크플로우가 상당히 빨라짐. 그래서 어느 정도 덜 에이전트적인 AI가 나를 더 비판적으로 만들어, 에이전트 AI의 특이점에 맞추기 위해 추가로 투자해야 할 시간에 대해 더 비판적이게 만듦
     * 전혀 이해가 안 됨
          + 왜 경험 많은 개발자들이 그렇게 명백히 형편없고 만족스럽지 않은 경험에 자신을 묶는 것에 열광하는지 이해가 안 됨
          + 나는 코드를 작성하고 문제를 해결하는 것을 좋아함. 그래서 소프트웨어 개발을 직업으로 선택했음
     * 예시: Docker 빌드 중 메모리 오류가 발생했을 때, 처음부터 왜 그렇게 많은 메모리가 사용되었는지 질문하기보다는 메모리 설정을 늘렸음
          + AI는 정말 우리와 같음
     * 개발자 기술은 여전히 필수적임 — 운전할 수 없다면 조종할 수 없음. 하지만 개발자 에너지는 어떨까? AI 이전에는 하루에 약 2시간 정도만 코딩할 수 있었음 (실제 코드 작성 시간). 하지만 Claude Code를 사용하면 쉬지 않고 5시간 동안 쉽게 코딩할 수 있음. 자전거 대신 전기 자전거를 타는 느낌임. AI는 스티브 잡스의 마음의 자전거 비유처럼 느껴짐 — 나를 대체하지 않지만 이제 훨씬 더 멀리, 빠르게 갈 수 있음
     * 이 다이어그램은 너무나 공감됨 — 우리 팀은 여기 있는 모든 항목을 체크함. 아직 AI를 사용하지 않음에도 불구하고! 우리가 결국 AI를 사용할 때를 상상해 보라...
          + ""오해된 요구사항""과 ""지나치게 복잡한 구현""은 사실상 우리의 마스코트임. 더 나은 초기 대화와 반복적인 리뷰를 통해 이 혼란을 천천히 풀어가고 있음. 하지만 습관은 쉽게 사라지지 않음. AI의 도움 없이 이러한 함정을 헤쳐나가는 사람도 있는가?
     * 나에게는 명백한 것이 보이지 않음: 주변에서 AI를 사용함
          + 개발 도구, 내성, 로깅, 변환 등 도구를 구축하고 유지 관리해야 하는 경우가 많음. 에이전트를 사용해 이를 만들고 수정하는 데 많은 운이 좋았음. 예를 들어, 맞춤형 계획 시스템에서 데이터를 수집하고 로그를 모으는 도구
          + 이러한 도구를 구축하는 데 중요한 경로에서 생성된 보일러플레이트가 많음. 대부분의 날에는 이를 하고 싶지 않음
     * AI를 많이 조종해야 하지만, 더 나은 프롬프트가 더 나은 에이전트로 이어질 것이라는 낙관적인 생각을 가짐
          + 기사에서 예를 들어보자: 코드 재사용. 코드를 작성할 때, 무의식적으로 이미 있는 코드의 정신적 인벤토리를 가지고 있음. 무의식적으로 ""이 새로운 작업이 이미 작동하고 테스트된 코드와 매우 유사한가?""라고 스스로에게 묻고 있음. 코딩 에이전트가 받는 초기 프롬프트의 세부 사항을 살펴보지 않았지만, 내 직감은 에이전트에게 코드베이스에 무엇이 있는지 인벤토리를 유지하도록 지시하는 프롬프트를 추가하고, 새로운 코드 배치를 계획할 때 새로운 작업의 요구 사항을 이미 있는 것과 대조하는 것이 좋을 것임
          + 예, 이는 계획 과정에 많은 계산 사이클을 추가함. 하지만 ""그것이 에이전트가 코드를 작성하는 대가""라고 솔직하게 말해야 함. 더 나은 계획 > 문제 해결 능력
     * AI 도구가 내가 나열한 것들에 대해 항상 나쁘다고 서문을 달고 싶음
          + 거기에 ""not""이 빠진 것 같음. 왜 그들이 항상 나쁘다고 서문을 달겠는가? 반대 방향이 더 말이 됨
          + 또한 ""effected"" 대신 ""affected""라는 문법 오류가 있음
     * Martin Fowler가 이제 그의 웹사이트에서 공간을 임대하고 있는가?
"
"https://news.hada.io/topic?id=20099","생성형 AI에서 유입된 트래픽, 미국 소매 웹사이트에서 1,200% 급증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                생성형 AI에서 유입된 트래픽, 미국 소매 웹사이트에서 1,200% 급증

     * 생성형 AI 기반 채팅 인터페이스가 소비자 행동을 변화시키며, 쇼핑 전 조사, 여행 계획, 금융 조언 등에 사용되고 있음
     * ""생성형 AI가 쇼핑 조수로 자리 잡음"" : Adobe Analytics가 1조 건 이상의 소매 사이트 방문 데이터를 분석하여 통계 산출한 결과
          + 2024년 11월~12월에 생성형 AI 트래픽이 전년 대비 1,300% 증가함 (Cyber Monday에는 1,950% 증가)
          + 2025년 2월 기준, 2024년 7월 대비 1,200% 증가
          + 트래픽 규모는 아직 유료 검색, 이메일 등에 비해 작지만, 2024년 9월 이후 2개월마다 2배씩 증가 중
     * 미국 소비자 5,000명 대상 설문에서 39%가 생성형 AI로 쇼핑 경험, 53%는 올해 사용할 계획
     * AI를 활용한 쇼핑 활동:
          + 제품 조사: 55%
          + 제품 추천 받기: 47%
          + 할인 상품 탐색: 43%
          + 선물 아이디어 얻기: 35%
          + 독특한 제품 탐색: 35%
          + 쇼핑 리스트 작성: 33%

AI 유입 트래픽의 행동 패턴

     * AI에서 유입된 방문자는 사이트 체류 시간이 길고, 더 많은 페이지를 탐색함
     * 이는 대화형 인터페이스가 소비자의 정보 탐색을 돕고, 구매 결정에 자신감을 주는 효과를 의미함
     * 92%는 AI 사용이 쇼핑 경험을 향상시켰다고 응답, 87%는 더 복잡한 구매에서 AI를 사용할 의향을 밝힘
     * AI 기반 추천 시스템과 에이전트의 등장은 기업의 고객 참여 방식에 큰 영향을 미치고 있음
     * 전환율 변화
          + 생성형 AI 유입 트래픽은 다른 채널보다 구매 전환율이 평균 9% 낮음
          + 하지만 2024년 7월에는 43% 낮았던 점을 고려하면 큰 개선
          + 이는 AI가 주로 '정보 탐색'과 '고려' 단계에서 활용되고 있다는 것을 시사
          + 전환율 격차가 줄어들고 있다는 점은, AI 기반 채팅 후 바로 구매까지 이어지는 사례가 점점 늘고 있음을 보여줌
     * 선호 기기
          + 생성형 AI 트래픽의 86%가 데스크탑에서 발생 (2024년 11월~2025년 2월 데이터 기준)
          + 소비자들이 노트북이나 데스크탑에서 대화형 인터페이스를 사용하기 더 편하다고 느낌
          + 같은 기간 전체 이커머스 방문 중 데스크탑 비중은 34%에 불과, AI 트래픽과는 큰 차이
     * 제품 카테고리별 특성
          + AI 트래픽의 전환율이 가장 높은 카테고리: 전자제품, 보석류
          + 전환율이 낮은 카테고리: 의류, 생활용품, 식료품
          + 예: TV처럼 화면 크기, 해상도, 가격 등 다양한 기준으로 옵션을 좁히는 제품에서 AI의 활용도가 높음
          + 이는 AI가 개인 맞춤형 옵션을 빠르게 추천해주기 때문에 구매 결정까지 이어지는 확률이 높아짐을 의미함

다른 산업 분야에서의 생성형 AI 도입 확대

     * 여행 산업에서의 AI 활용 증가
          + 2025년 2월, 미국 여행·레저·호텔 사이트에 대한 생성형 AI 유입 트래픽이 2024년 7월 대비 1,700% 증가
          + 소비자 설문에서 29%가 여행 관련 작업에 AI를 사용했고, 이 중 84%는 경험이 향상되었다고 응답
          + 주요 AI 활용 사례:
               o 전반적인 여행 조사: 54%
               o 여행 아이디어 탐색: 43%
               o 현지 음식 추천: 43%
               o 교통 수단 계획: 41%
               o 일정표 작성: 37%
               o 예산 관리: 31%
               o 짐 싸기 도움: 20%
          + 여행 사이트 방문 시, AI 유입 사용자의 이탈률은 비AI 대비 45% 낮아 더 준비된 소비자임을 시사
     * 금융 산업에서의 AI 활용 확대
          + 2025년 2월, 미국 은행 사이트에 대한 생성형 AI 유입 트래픽이 2024년 7월 대비 1,200% 증가
          + 설문 참여자 중 27%는 금융 관련 작업에 생성형 AI 사용 경험이 있음
          + 주요 AI 활용 사례:
               o 예금 및 저축 계좌 추천: 42%
               o 투자 전략 및 금융 용어 설명 요청: 40%
               o 개인 맞춤형 예산 작성: 39%
               o 세금 영향을 이해하는 데 도움 받기: 35%
          + AI 유입 방문자는 비AI 유입 사용자보다 사이트 내에서 45% 더 오래 탐색하는 경향
"
"https://news.hada.io/topic?id=20067","PostgreSQL 사용 시 도움 되는 패턴들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PostgreSQL 사용 시 도움 되는 패턴들

     * Postgres를 더 생산적이고 안전하게 사용하는 데 도움이 되는 실용적인 패턴들을 정리한 글
     * 각 패턴은 작지만 누적되면 큰 차이를 만들어냄

UUID 기본 키 사용

     * UUID는 무작위이기 때문에 정렬이나 인덱스 성능 면에서 단점이 있음
     * 숫자 ID보다 공간을 더 많이 차지함
     * 하지만 다음과 같은 장점이 있음
          + DB에 연결하지 않고도 UUID를 생성할 수 있음
          + 외부에 안전하게 노출 가능함
     * gen_random_uuid()를 사용해 기본 키로 UUID를 자동 생성할 수 있음

created_at과 updated_at 필드 항상 추가

     * 디버깅 시 레코드 생성 및 변경 시점을 아는 것이 매우 유용함
     * updated_at은 트리거를 통해 자동으로 갱신되도록 설정 가능함
     * 함수는 한 번만 만들고, 트리거는 각 테이블에 적용해야 함

외래 키에는 on update/delete restrict 설정

     * 외래 키 제약 조건을 설정할 때 on update restrict on delete restrict를 반드시 사용해야 함
     * 데이터 삭제 시 실수로 연쇄 삭제가 발생하지 않도록 방지함
     * 저장 공간은 저렴하지만 데이터 복구는 매우 어렵기 때문에 보수적으로 처리하는 것이 좋음

스키마 사용 권장

     * 기본 스키마는 public이지만, 애플리케이션이 커지면 별도의 스키마로 분리하는 것이 좋음
     * 스키마는 네임스페이스처럼 작동하며, 서로 다른 스키마 간에도 조인이 가능함
     * 테이블 수가 많아질수록 스키마를 활용하는 것이 가독성과 유지보수에 유리함

Enum 테이블 패턴 사용

     * PostgreSQL의 enum 타입이나 check constraint 대신 enum 테이블을 사용하는 방식이 더 유연함
     * enum 값을 별도 테이블로 관리하면, 메타데이터를 추가하거나 enum 값을 쉽게 확장 가능함
     * 외래 키로 enum 테이블의 값을 참조하여 제약 조건을 유지함

테이블 이름은 단수형으로 지정

     * 테이블 이름은 복수가 아닌 단수형으로 지정하는 것이 바람직함
     * 쿼리 작성 시 단수형이 더 명확하며, 복수형은 소유격이나 의미적 혼란을 야기할 수 있음

조인 테이블은 기계적으로 이름 지정

     * 다대다 관계를 위한 조인 테이블은 두 테이블명을 이어붙여 명명하는 것이 안전하고 명확함
     * 예: person_pet
     * 조합에 대한 고유 인덱스를 추가하여 중복 방지

삭제 대신 soft delete 사용

     * 데이터를 실제로 삭제하기보다, 삭제 시점을 나타내는 revoked_at 같은 timestamp 필드를 사용하는 것이 좋음
     * 삭제 여부뿐 아니라, 언제 삭제되었는지를 추적할 수 있음
     * Boolean 값보다 timestamp가 더 많은 정보를 제공함

상태(Status)는 로그 테이블로 표현

     * 단일 컬럼으로 상태를 표현하는 대신, 상태 변경 이력을 별도 테이블로 저장
     * 상태 발생 시점은 valid_at 컬럼으로 명시
     * 최신 상태를 빠르게 조회할 수 있도록 latest 플래그 및 유니크 인덱스 + 트리거를 설정함
     * 이는 비동기 이벤트 처리나 순서가 뒤섞일 수 있는 상황에서 유리함

특별한 행에는 system_id 추가

     * enum 테이블 외에도, 특정 ""시스템 행""이 필요한 경우가 있음
     * system_id 텍스트 필드를 nullable로 추가하고 유니크 인덱스를 설정
     * system_id를 통해 특정 행을 명확하게 조회 가능

뷰(View)는 최소한으로 사용

     * 뷰는 복잡한 쿼리를 추상화하는 데 유용하지만 유지보수가 어려움
          + 컬럼 제거 시 뷰 재생성이 필요
          + 뷰 위에 뷰를 만들면 성능 및 가독성 문제가 생김
     * 필요한 만큼만 신중하게 사용할 것

JSON 쿼리 적극 활용

     * Postgres는 JSON 저장뿐 아니라 JSON 반환 쿼리도 매우 강력함
     * 중첩된 관계를 한 번의 쿼리로 JSON 형태로 반환 가능함
     * N+1 문제 없이 필요한 모든 데이터를 한 번에 가져올 수 있음
     * 단점: 타입 정보 손실, 전체 데이터를 한 번에 메모리에 불러와야 함
     * 성능이나 구조 상 장점이 더 큼

     조인 테이블은 기계적으로 이름 지정

   이름 지을 때 이런 룰이 있다는 거 자체가 좋은 것 같아요~

   UUID7을 고려하면 시간순 정렬은 되는것 아닐까요?

   PostgreSQL와 UUID를 기본 키로 사용하는 것에 대해 글도 참고해볼만 하겠네요.

   soft delete시 timestamp 넣는 방법 좋군요
   기본키로 UUID 넣으면 시간순 정렬이 안되니, snowflake id 또는 ulid를 쓰는 것도 좋을 것 같습니다. 이 경우는 각 서버가 sequence number를 들고 있어야 하긴 하지만요
"
"https://news.hada.io/topic?id=20102","Show GN: B급 감성 개발자가 만든 나눔 색칠놀이 앱입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: B급 감성 개발자가 만든 나눔 색칠놀이 앱입니다.

   🎨 서비스 이름: 나눔 색칠놀이
   아이들이 색칠하면, 브랜드가 기부합니다. (기부 준비중)
   (아이들은 색칠만 해요. 기부는 어른들이 대신합니다.)

   NO광고, NO아이템 100안전을 목표로 합니다.

   🤡 B급 감성 도안들
   🌕 달에서 짜장면 배달 중
   🥔 우주를 정복한 감자칩
   😺 회식 끝나고 코딩하는 고양이
   🐻 지각한 곰돌이의 출근길 대작전

   AI가 그림 그리고,
   아이들이 색칠하고,
   브랜드가 기부하고,
   저는 밤마다 버그 잡고 있습니다.
   (바램입니다.)

   💡 왜 만들었냐고요?
   기부를 더 쉽게,
   아이들한테 재미있게,

   🔨 개발 스택 (대충 써봤습니다)
   Android (Kotlin)
   Firebase (Remote Config)
   BackEnd - APM, FastAPI
   AI 도안은 직접 프롬프트 써서 Stable Diffusion, Flux, DALL-E
   GIMP (도안 리터치)

   🙏 홍보 목적이긴 합니다
   아이디어 피드백 받고 싶고요
   브랜딩/UX/디자인 조언도 환영입니다
   혹시 브랜드 제휴 도와주실 수 있는 분... 찐감사

   그리고 위의 내용을 만들어 준 ChatGPT 에 감사합니다.

   firebase에 Remote Config 기능이 있는 걸 첨 알았네요. 감사합니다.

   실제로 비즈니스까지 생각하시는건가요? 비즈니스 입장에서 이게 어떤 매력포인트를 가질거라고 생각하셨는지 궁금합니다. No 광고라고 하셔서, 기업 정보가 앱에 노출되지 않을 것 같아서요.
"
"https://news.hada.io/topic?id=20074","Gemini 2.5 Pro 와 Claude 3.7 Sonnet의 코딩 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Gemini 2.5 Pro 와 Claude 3.7 Sonnet의 코딩 비교

     * Gemini 2.5 Pro가 코드 작성에서 더 뛰어남
     * Claude 3.7 Sonnet도 훌륭하지만, 지금은 Gemini 2.5 Pro를 사용하는 것이 더 이득임
     * 1백만 토큰 컨텍스트 윈도우와 무료 이용 가능함이 큰 장점
     * 과거엔 Claude 3.7 Sonnet이 항상 비교 기준이었지만, 이제는 바뀜

Gemini 2.5 Pro 간단 소개

     * Google이 2025년 3월 26일 출시한 실험적 사고 모델
     * 출시 후 Twitter(X), YouTube 등에서 매우 큰 반향을 일으킴
     * LMArena에서 1위 기록, 코드 작성, 수학, 과학, 이미지 이해 등에서 매우 우수한 성능 보임
     * 1백만 토큰 컨텍스트 윈도우 제공, 향후 2백만 토큰도 예고됨
     * SWE Bench 기준 정확도 63.8% 로 Claude 3.7 Sonnet의 62.3% 보다 높음
     * Google이 제공한 공룡 게임 데모 등 다양한 예시로 뛰어난 성능을 입증함
     * 전반적으로 코딩뿐만 아니라 모든 지능적 작업에 적합한 전천후 모델로 평가됨

코딩 테스트 비교

  1. 플라이트 시뮬레이터 만들기

     * Gemini 2.5 Pro
          + 완벽하게 작동하는 시뮬레이터 생성
          + 비행기 조종, 마인크래프트 스타일 도시 생성 등 모든 요구 조건 충족
          + 완성도 10/10
     * Claude 3.7 Sonnet
          + 비행기가 옆으로 날고 도시 밖으로 벗어나는 문제 발생
          + 기능적 완성도가 낮음
     * 요약: Gemini 2.5 Pro가 완전한 승리

  2. 루빅스 큐브 시각화 및 풀이

     * Gemini 2.5 Pro
          + 한 번에 정확한 시각화 및 풀이 구현
          + Three.js 사용, 큐브 색상, 랜덤 섞기, 애니메이션 등 완벽 구현
     * Claude 3.7 Sonnet
          + 색상 표시 실패 및 풀이 실패
          + 다른 LLM들과 유사한 한계
     * 요약: Gemini 2.5 Pro가 이 항목도 압도적 우세

  3. 4차원 테서랙트 안에서 튕기는 공 시각화

     * Gemini 2.5 Pro
          + 물리 충돌, 면 강조 등 요구사항 모두 충족
          + 코드 품질과 작동 상태 매우 우수
     * Claude 3.7 Sonnet
          + 기능은 작동하나 불필요한 색상 추가
          + 그래도 요구 기능은 충족함
     * 요약: 두 모델 모두 요구사항 충족, Claude도 드디어 성공

  4. LeetCode 문제: 3개의 룩 배치로 최대 합 구하기

     * Gemini 2.5 Pro
          + 복잡한 코드 작성이지만 정확한 풀이
          + 시간 복잡도도 적절하게 고려함
     * Claude 3.7 Sonnet
          + 간결한 코드 작성하지만 시간 초과(TLE) 발생
          + 이해는 쉬우나 성능 면에서는 부족함
     * 요약: Gemini 2.5 Pro가 성능과 정확도 모두에서 앞섬

결론

     * Gemini 2.5 Pro가 명확한 우위
          + 컨텍스트 윈도우, 정확도, 멀티태스킹 성능에서 Claude 3.7 Sonnet을 앞섬
     * Claude도 여전히 훌륭한 모델이지만, 현재로서는 Gemini를 사용하는 것이 더 효율적임
     * 향후 2백만 토큰 윈도우까지 확장되면 성능은 더욱 향상될 것임
     * Google의 최근 Gemma 3 27B 경량 모델과 함께 강력한 AI 라인업을 형성함

        Hacker News 의견

     * 실제 코딩 문제에 대해 현금 상금 대회를 열고 싶음. 규칙을 정해야 함. LLM이 이 문제를 해결할 수 있을지 의문임
          + Solvespace의 GTK 4 버전을 만드는 것임
          + 각 플랫폼에 대해 단일 C++ 파일이 존재함
          + GTK3 파일을 GTK4로 재작성하는 것이 목표임
          + AI의 성능을 증명하고 싶다면, 전체 세션을 문서화하고 YouTube 비디오로 만들기를 권장함
          + 최종 테스트는 PR을 수락할지 여부임
     * Gemini 모델은 대화 중단 시점을 알려주는 유일한 모델임
          + ChatGPT는 문맥이 가득 차면 대화를 잊어버리는 경향이 있음
          + Gemini는 도구가 부족하지만, 기본적으로 더 나은 모델처럼 느껴짐
     * Gemini 2.5 Pro를 사용했으며, 꽤 괜찮다고 생각함
          + Claude 3.5가 명령을 따르는 데 더 나은 것 같음
          + Cursor와 Claude CLI 도구에 실망함
          + Gemini의 문맥 창 표시 방식이 좋음
          + 시장이 대형 AI 회사의 평가를 견딜 수 없다고 생각함
          + 무료 모델이 더 나은 경우도 있음
     * AI 모델 경쟁에서 패자는 Microsoft로 보임
          + ChatGPT가 유일한 선택이었을 때 Microsoft는 리더로 여겨졌음
          + Copilot은 실패작이며, Bing은 AI를 활용하지 못했음
          + Google의 Sundar Pichai는 Microsoft의 모델과 비교하고 싶다고 언급함
     * Gemini 2.5 Pro는 aider polyglot 코딩 리더보드에서 높은 점수를 기록함
          + aider의 최신 릴리스 작업에 주로 사용됨
          + 현재 Gemini의 가장 큰 문제는 엄격한 속도 제한임
     * 루빅스 큐브 예제에서 Gemini 2.5는 암기된 스크램블링 시퀀스를 사용함
          + 스크램블 시퀀스를 역순으로 변환하여 큐브를 해결함
     * 90년대 Visual Basic을 사용했을 때 템플릿에서 새 프로젝트를 만드는 것이 흥미로웠음
          + AI 코딩은 그와 유사하지만 과장된 느낌임
          + Claude의 비행기가 옆으로 있는 것에 대해 혼란스러웠다는 언급이 있음
     * Gemini 2.5는 복잡한 Cython 코드에서 별로임
          + Claude와 o3는 명령을 잘 따름
          + Gemini는 관련 없는 변경을 시도함
     * 편향되지 않은 토론이 필요한지에 대한 질문이 있음
          + OP 링크는 Composio에 대한 편향된 광고로 보임
          + Gemini 2.5 Pro에 대한 과장된 설명이 있음
     * 모든 테스트 작업은 그린필드 프로젝트임
          + LLM을 사용하려면 기존 프로젝트에서 변경이나 수정을 해야 함
          + 테스트가 모델의 유용성을 측정하는 데 의미가 없다고 생각함
"
"https://news.hada.io/topic?id=20056","최신 AI 웹사이트 빌더 도구들 테스트 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        최신 AI 웹사이트 빌더 도구들 테스트 후기

     * 기존엔 ""Figma → 팀 리뷰 → 개발자 구현"" 전통적 프로세스를 사용했음
     * 이번엔 AI 기반 웹사이트 빌더 도구들(Cursor, v0, Lovable, Bolt)이 실제 프로젝트에서 얼마나 유용한지 테스트함
     * 이번 실험의 목표는 AI가 이 과정을 얼마나 단순화할 수 있는지, 디자인에서 개발까지의 전환을 줄이고 협업을 더 원활하게 할 수 있는지 확인하는 것
     * 모든 플랫폼에 동일한 간단한 프롬프트를 사용해 비교 진행:
          + ""CodeYam이라는 소프트웨어 시뮬레이터 제품의 랜딩 페이지가 필요합니다. 기존 웹사이트와 유사하지만 더 전문적으로 보여야 합니다.""
          + ""I need a landing page for a product we are building. It's a software simulator called 'CodeYam'. This is the website we currently have. Can you create something similar but more professional looking?""

AI 웹사이트 빌더 도구별 체험 결과

  Cursor

   💡 개발자 중심, GitHub 연동 강점
     * Cursor 앱 설치 및 GitHub 연결 필요
     * 명령어 실행과 Git 연동 등 기술적인 작업이 많음
     * 외부 링크를 통해 미리보기 제공
     * 결과물은 기존 구성요소를 재배치한 수준으로 창의적 제안은 부족
     * 간단한 웹페이지 제작에는 너무 복잡한 설정 필요

  v0 by Vercel

   💡 가장 우수한 사용자 경험과 기능 제공
     * UI가 세련되고 사용하기 쉬움
     * 프로젝트 히스토리 저장 및 전환 기능 제공
     * 채팅 중 실시간 미리보기 제공, 변경사항에 잘 반응함
     * 공유 링크 기능이 있어 피드백 수집이 쉬움
     * 다양한 앱과 컴포넌트 라이브러리도 제공 (테스트에선 미사용)

  Lovable

   💡 콘텐츠 생성 및 메시지 전달력 뛰어남
     * 매우 간단한 인터페이스 (채팅창 + 미리보기)
     * 직접적인 컨트롤은 제한적이지만, 최소 입력으로도 고품질 콘텐츠 생성
     * 메시징 능력에서 가장 인상적인 결과

  Bolt.new

   💡 가장 간단하지만 결과물은 가장 미흡
     * Lovable과 유사한 UI지만 결과물이 더 단순
     * 디자인이나 콘텐츠 품질이 떨어지며 뛰어난 점은 없음
     * 실시간 미리보기는 가능하지만 창의성, 품질 모두 부족

전반적인 소감

     * Cursor를 제외한 도구들은 모두 비개발자도 쉽게 사용 가능
     * 결과물은 대부분 전문적이지만 단조로움, 더 구체적인 프롬프트를 주면 나아질 가능성 있음
     * AI 환각 없음, 생성된 내용은 모두 논리적이고 적절함
     * 모든 플랫폼에서 코드 확인 및 수정 가능, 개발 협업에 유리

최종 평가 요약

     * Cursor: 개발자 친화적이지만 간단한 웹사이트 제작엔 과함
     * v0 by Vercel: 최고의 UX와 실용성, 향후에도 실험해보고 싶은 도구
     * Lovable: 메시징 중심 콘텐츠 생성에 강점
     * Bolt.new: 단순함 이상의 가치를 주지 못함

     전반적으로 빠르게 단순하고 전문적인 웹사이트를 만들고 싶다면 이들 도구는 적절한 선택이 될 수 있음
     하지만 독창적이고 고급스러운 디자인을 원한다면 별도의 수작업이 필요함

        Hacker News 의견

     * 관련 도구 링크:
          + https://www.cursor.com/
          + https://v0.dev/
          + https://lovable.dev/
          + https://bolt.new/
     * Lovable은 뭔가 특별한 요소가 있는 듯한 느낌
          + Claude3.7이 백엔드 모델일 가능성이 높음
          + 디자인과 구현을 분리해서 작업하면 반응이 더 나아짐
          + 브랜드나 디자인 철학 언급을 많이 하면 더 나은 결과가 나오는 경향 있음
     * Lovable 같은 도구는 기존 템플릿 판매나 초기 스타트업 대상 디자인 서비스 시장을 위협함
          + Squarespace 같은 플랫폼도 위태로워짐
          + 스타트업이 이런 툴을 안 쓰면 시대에 뒤처지는 상황
          + 전체 스택 개발자인 자신도 이제 직접 디자인 안 하고 툴을 쓰게 됨
     * 자동화 도구로 인해 기존 서비스가 모두 사라질 것이라는 주장에 반대
          + 오히려 적은 자원으로 더 많은 걸 할 수 있는 기회로 작용함
          + 자동화의 진짜 꿈은 더 많은 여유 시간 확보였지만 현실은 오히려 더 많은 일을 더 빠르게 하게 되는 상황
     * 템플릿 판매자로서 AI 도구가 실존적 위협이긴 하나, 현재는 매출에 큰 영향 없음
     * Lovable을 직접 사용해보며 현실을 마주할 필요 있음. 두려움을 무시하지 말고 배우는 것이 대비책임
     * 아직은 AI UX가 복잡하고 사용성도 떨어지는 시점이라 당장 위협은 아님
     * Gemini 2.5의 Cursor 통합 성능이 매우 뛰어남. 말도 안 되는 지시에는 피드백도 주는 새로운 형태의 LLM
     * 결국 모든 제품이 시스템 프롬프트를 가장 잘 설정하는 회사 싸움이 아닐까?
          + Cursor는 모델 선택이나 API 키 지정이 가능하며, 단순 프롬프트 이상의 기능 제공. RAG 구조로 저장소 내용을 문맥으로 활용하는 점이 핵심
          + Facebook과 Friendster 차이가 단순히 코드 때문이 아니었듯, 프롬프트 차이만으로 승부가 결정되지 않음
     * UX 디자이너, PM, 개발자 모두 어떤 직군이 AI에 먼저 대체될지 불안해하고 있음

     자동화의 진짜 꿈은 더 많은 여유 시간 확보였지만 현실은 오히려 더 많은 일을 더 빠르게 하게 되는 상황

   아이러니하네요...ㅋㅋㅋ
"
"https://news.hada.io/topic?id=20115","RIP 발 킬머: 영화 Real Genius - 너드들이 여전히 좋아하는 작품 (2015)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           RIP 발 킬머: 영화 Real Genius - 너드들이 여전히 좋아하는 작품 (2015)

30년이 지나도 여전히 Nerd들에게 사랑받는 영화 'Real Genius'

     * 'Real Genius'는 1980년대 대학 캠퍼스 코미디 영화 중 하나로, 여전히 많은 사람들에게 사랑받고 있음.
     * 이 영화는 실제 레이저 기술을 연구하던 대학생들의 이야기를 느슨하게 기반으로 하고 있으며, CIA가 우주에서 암살에 사용할 레이저를 비밀리에 개발하는 내용을 다루고 있음.
     * 주요 등장인물
          + 미치 테일러: 15세의 천재로, Pacific Tech에 조기 입학하여 레이저 프로젝트에 참여하게 됨.
          + 크리스 나이트: 미치의 룸메이트로, 학교를 진지하게 받아들이지 않는 상급생.
          + 켄트: 레이저 프로젝트에서 미치와 경쟁하는 인물로, 다른 학생들을 이용해 자신의 이익을 챙기려 함.
          + 조던: 캠퍼스의 몇 안 되는 여성 중 한 명으로, 미치에게 관심을 보임.
     * 영화의 주제와 메시지
          + 지식과 창의성: 영화는 높은 IQ가 고립감을 줄 수 있지만, 창의성을 통해 세상을 변화시킬 수 있음을 보여줌.
          + 사회적 다이나믹: 'Real Genius'는 전통적인 '너드 대 운동선수'의 대립 구도를 피하고, 같은 사회적 집단 내에서의 경쟁을 다룸.
          + 여성의 역할: 영화는 당시의 다른 영화들에 비해 여성 캐릭터를 더 긍정적으로 묘사하며, 특히 조던은 독특하고 매력적인 인물로 그려짐.
     * 영화의 매력
          + 현실적인 대학 생활 묘사: 시험 공부 장면 등 현실적인 대학 생활을 잘 묘사함.
          + 유머와 대사: 발 킬머가 연기한 크리스 나이트의 대사는 영화의 큰 매력 포인트 중 하나로, 많은 대사가 인상적임.
          + 음악: 영화의 마지막을 장식하는 Tears For Fears의 노래는 영화의 감동을 더해줌.
     * 영화의 영향
          + 'Real Genius'는 단순한 코미디를 넘어, 지적 개발과 감정적 성장을 동시에 중요시하는 메시지를 전달함.
          + 영화는 지식이 단순히 책 속에만 있는 것이 아니라, 실제 삶의 경험을 통해서도 얻을 수 있음을 강조함.
     * 결론
          + 'Real Genius'는 30년이 지난 지금도 여전히 많은 사람들에게 사랑받고 있으며, 지적 호기심과 창의성을 통해 세상을 변화시킬 수 있다는 메시지를 전달함.

        Hacker News 의견

     * ""Real Genius"" 영화의 팬으로서, 1986년에 Robert Woodhead에게 이메일을 보냈던 기억이 있음. 그는 영화의 컴퓨터 그래픽 작업에 대해 이야기해주었음. 최근 유튜브에서 ""Real Genius에 대해 몰랐던 10가지"" 영상을 보고 그를 다시 떠올리게 되었음. 그와 다시 이메일을 주고받으며 커피 약속을 잡게 되었음. 40년 만의 우연한 재회임
     * 어릴 때 처음 본 ""Real Genius""는 큰 인상을 남겼음. 그러나 영화의 교훈이 잘 전달되지 않은 것 같음. 많은 ""천재들""이 기술의 부정적인 사회적 결과를 고려하지 않음. 권위를 의심하고 자신의 역할을 고민하는 것이 도덕적 의무임
     * '80년대에 본 기억으로는, ""왜 그 장난감을 머리에 쓰고 있나요?"" ""다른 곳에 쓰면 쓸려서요"" 같은 대사가 기억남. ""레이저 빔이에요, 바보!"" ""우리는 뭘 해야 하나요?"" ""따라가세요!"" 같은 대사도 있음. ""당신의 말더듬이 나아졌네요"" ""전기 충격 치료를 받았어요"" ""전압을 올리세요"" 같은 대사도 있음. ""당신은 노동자예요, 노동해야죠. 교육을 받지 않아서 그래요!"" 같은 대사도 있음. ""일관된 빛의 빔이에요"" ""그럼 말하는 건가요?"" 같은 대사도 있음. 공부하는 아이가 갑자기 일어나 소리 지르고 나가고, 다른 아이가 그 자리에 앉는 장면도 기억남. ""당신을 위해 할 수 있는 일이 있다면, 아니면 당신에게 할 수 있는 일이 있다면..."" ""당신의 성기로 6인치 못을 판자에 박을 수 있나요?"" ""지금은 아니지만..."" 같은 대사도 있음. ""Real Genius""는 나에게 큰 영향을 주었음
     * ""Real Genius""는 대학 생활을 재미있게 보이게 했음. Mitch, Chris, Jordan은 나의 동기부여였음. 대학에 가는 첫 세대 학생으로서 대학이 어떤 곳일지 막연히 알고 있었음. 레이저 작업을 했고, 이상한 룸메이트도 있었고, 눈보라 후에 캠퍼스에서 스트리킹도 했음. 대학은 도전적이었지만 재미있기도 했음. 여전히 이 영화를 보고 아들과 함께 보기를 권장함. Kilmer 씨에게 감사하며 명복을 빔
     * Kilmer, Jarret, Meyrink, Gries는 과학자와 엔지니어의 역할을 현실적이고 인간적으로 연기했음. Atherton의 악역 연기도 훌륭했음. 이 영화는 내가 10살 때 STEM 분야에 관심을 갖게 한 영감이었음. Kilmer는 드문 재능이었고, 그를 일찍 잃어 안타까움
     * ""The Saint""에서의 Kilmer는 멋졌고, 그 영화는 훌륭했음. 그 시대의 환상적인 사운드트랙도 포함되어 있음
     * 제목에 혼란스러웠던 사람들을 위해, 기사는 2015년 것이지만 Kilmer는 어제(2025년 4월 1일) 사망했음
     * ""Tombstone""에서 Doc Holliday 역할의 Kilmer는 예술 작품이었음. Val Kilmer의 명복을 빔
     * Val Kilmer는 대부분의 영화에서 좋았지만, 특히 ""Heat"" (1995)에서의 연기가 최고였다고 생각함
     * ""Real Genius""에서 가장 좋아하는 장면은 학생 라운지에서 여러 명이 기말고사를 준비하는 장면임. 한 사람이 일어나 책과 방에 소리 지르고 나가고, 모두 잠시 쳐다보다가 다른 사람이 그 자리에 앉는 장면임. ""오, 더 편안한 공부 의자"" 같은 느낌임
"
"https://news.hada.io/topic?id=20063","오픈소스 AI 에이전트 프레임워크 비교 - 어떤 것이 나에게 맞을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈소스 AI 에이전트 프레임워크 비교 - 어떤 것이 나에게 맞을까?

     * LangGraph, OpenAI Agents SDK, Smolagents, CrewAI, AutoGen, Semantic Kernel, LlamaIndex Agents 등 다양한 오픈 소스 AI 에이전트 프레임워크를 비교한 글
     * AI 에이전트 개발은 과거에는 스크립트와 프롬프트 엔지니어링, 시행착오의 조합이었으나, 이제 오픈소스 프레임워크가 증가
     * 각각의 프레임워크는 에이전트의 자율성과 안정성 사이에서 고유한 아키텍처 철학을 가지고 있음
     * Langfuse 같은 관측 도구와 통합하여 프롬프트, 응답, API 호출 과정을 시각화하고 디버깅 가능

LangGraph – 그래프 기반 워크플로우

     * LangChain 기반의 그래프 아키텍처 프레임워크
     * 각 노드는 프롬프트나 작업 단위를 처리하고, 엣지(edge)는 데이터 흐름과 분기 제어
     * 복잡한 멀티스텝 작업, 병렬 처리, 오류 처리 로직 삽입에 유리
     * 시각화와 디버깅에 강하며, 상태 기반 에이전트 설계에 적합

OpenAI Agents SDK – 공식 OpenAI 에이전트 툴킷

     * OpenAI에서 제공하는 공식 SDK
     * GPT-4o, GPT-o3 등 모델과 자연스럽게 통합
     * 역할(role), 도구(tools), 트리거(trigger)를 설정하여 멀티스텝 작업 수행 가능
     * OpenAI 생태계에 익숙한 사용자에게 적합

Smolagents – 코드 기반 최소화 접근

     * Hugging Face의 미니멀한 코드 중심 에이전트 프레임워크
     * 간단한 루프 안에서 AI가 파이썬 코드 생성 및 실행
     * 복잡한 오케스트레이션 없이 빠른 프로토타이핑에 적합
     * 내부적으로 ReAct 스타일 프롬프트 활용

CrewAI – 역할 기반 멀티 에이전트 협업

     * 각 에이전트에 고유한 역할을 부여하여 협업 가능
     * ""Crew""라는 컨테이너 개념을 통해 워크플로우 자동 조정
     * 기획자(Planner) - 조사자(Researcher) - 작성자(Writer) 같은 시나리오 구현에 용이
     * 메모리 기능과 오류 처리 로직 포함

AutoGen – 비동기 대화형 에이전트

     * Microsoft Research에서 개발한 비동기 대화 기반 에이전트 프레임워크
     * 각 에이전트가 대화 메시지를 주고받으며 비동기로 동작
     * 멀티턴 대화, 역할 전환, 실시간 도구 호출이 중요한 경우 유리
     * 이벤트 기반 구조로 동시성 높은 작업에 적합

Semantic Kernel – 엔터프라이즈 친화적 워크플로우

     * Microsoft의 .NET 중심 프레임워크
     * AI 스킬과 코드 기반 스킬을 혼합하여 계획 기반 워크플로우 구성
     * 보안, 규정 준수, Azure 통합 등 기업용 요구사항에 최적화
     * Python, C#, Java 등 다양한 언어 지원

LlamaIndex Agents – 데이터 중심 에이전트

     * LlamaIndex는 RAG 기반 프레임워크로 시작해 에이전트 기능 확장
     * 로컬/외부 데이터 소스를 검색하고 결과를 응답 또는 작업으로 연결
     * 문서 기반 Q&A, 요약, 맞춤형 검색 에이전트에 적합
     * 기존에 LlamaIndex를 활용한 경험이 있다면 진입장벽 낮음

언제 어떤 프레임워크를 사용할까?

     * 작업 복잡도: 작업이 간단한지 복잡한지에 따라 적합한 프레임워크를 선택해야 함
          + 복잡한 멀티스텝 흐름: LangGraph, Semantic Kernel
          + 단순한 코드 기반 실행: Smolagents
     * 멀티 에이전트 협업: 다중 에이전트가 필요한 경우, 비동기 대화와 역할 위임을 지원하는 아키텍처가 필요
          + 역할 기반 에이전트: CrewAI
          + 대화형 비동기 에이전트: AutoGen
     * 통합 환경: 에이전트가 상호작용해야 하는 환경과 시스템을 고려
          + OpenAI 중심 서비스: OpenAI Agents SDK
          + 기존 비즈니스 로직과 연동 필요: Semantic Kernel
     * 성능 및 확장성: 애플리케이션의 성능 요구 사항을 고려해야 함. 실시간 상호작용이 필요한 경우 이벤트 기반 아키텍처가 필요할 수 있음
          + 고동시성 처리 필요: AutoGen
          + 관측 도구(Langfuse 등)와 통합해 디버깅과 추적 가능

관측 및 트레이싱 도구의 중요성

     * 에이전트는 외부 API 호출, 데이터 검색, 복잡한 분기 로직을 포함하므로 투명한 추적이 필수
     * Langfuse와 같은 도구를 통해 다음 항목들을 추적 가능:
          + 각 프롬프트 및 응답 흐름
          + 툴 호출 시점 및 결과
          + 에러 및 실행 경로 시각화
     * 프로덕션 환경에서 성능 측정, 오류 디버깅, 반복 개선에 필수
"
"https://news.hada.io/topic?id=20078","AI 에이전트: "더 많은 기능"보다 "더 높은 신뢰성"이 필요함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AI 에이전트: ""더 많은 기능""보다 ""더 높은 신뢰성""이 필요함

     * 항공편 예약은 왜 AI 에이전트 데모의 ""Hello World""가 되었을까?
          + 사용자는 AI가 비행기를 예약해주는 것보다 이미 완성된 UX(예: Google Flights)를 선호함
          + 단 한 번의 실수로 복잡한 고객 서비스 지옥이 시작될 수 있음
          + 직관적이고 예측 가능한 시스템이 오히려 더 혁신적임
     * AI는 아직 초기 단계이며, 일반 사용자는 일관성과 예측 가능성을 기대
          + 예: 80% 정확도라도 일관된 결과를 내면 수용 가능
            반면, 불규칙한 90% 정확도는 신뢰를 무너뜨림
          + 많은 AI 프로젝트는 이를 간과하고 화려한 데모와 무리한 기능을 추구함 → 결국 신뢰 상실
     * 점점 더 많은 IDE가 투명성을 잃고 있음
          + 사용자가 AI가 무엇을 하고 있는지 알 수 없음
          + 예: Reddit에서 화제가 된 Cursor가 전체 작업을 삭제한 사건
               o 사용자의 버전 관리 미숙도 문제이지만, 진짜 원인은 UI/UX 설계
               o 좋은 설계는 실수를 예방하고 AI의 동작을 명확히 설명, 실행 취소 기능을 제공해야 함
     * Cursor는 초기에는:
          + 탭-완성 인터페이스로 투명하고 가벼운 상호작용 제공
          + 사용자 신뢰를 서서히 쌓는 방식으로 인기를 얻음
          + 단순하고 되돌릴 수 있는 디자인이 AI 불신을 줄이는 데 효과적이었음
     * $2억 투자를 받은 Devin은 ""완전 자율 에이전트""를 지향
          + 복잡한 시스템, 느린 반응, 예측 불가능한 결과로 신뢰 붕괴
          + 지나치게 야심 찬 접근이 오히려 사용자 혼란 초래

신속함 vs. 신뢰성: AI 개발팀의 딜레마

     * AI 개발팀은 다음 중 하나를 선택해야 함:
          + 빠르게 움직이다가 실수를 감수할 것인가
          + 신뢰성과 안정성을 우선할 것인가
     * 해답은 ""작은 범위에서 뛰어난 성과""를 낼 수 있는 기능에 집중하고, 꾸준히 반복 개선하는 것

핵심 원칙: 복잡성보다 예측 가능성

     * 복잡한 시스템보다는 잘 이해된 태스크에 집중해야 함
     * AI 에이전트는 여전히 변혁적이지만, 다음 세 가지가 중심이 되어야 함:
          + 신뢰성
          + 투명성
          + 예측 가능성

워크플로우 vs. 에이전트

     * Anthropic의 프레이밍: ""태스크가 워크플로우로 표현 가능하다면, 에이전트가 아닌 워크플로우를 만들 것""
          + 워크플로우는 예측 가능하고, 제어 가능하며, 단순함
          + 에이전트는 복잡하고 제어가 어렵기 때문에 진정한 동적 상황에서만 사용해야 함

        Hacker News 의견

     * ""비행기 예약"" 에이전트는 이제 농담의 소재가 되었음. Swyx의 최근 AI 엔지니어 이벤트 키노트에서도 언급되었음
          + 이 글은 이 문제의 어려움을 과소평가하고 있다고 생각함
          + 인간이 입력하거나 대화하는 UI에서는 무한한 오류 가능성이 존재함
          + 인간은 명확하게 표현하는 데 서툴고, 소프트웨어의 기능을 정확히 이해하는 것도 어려움
     * Google Deepmind 연구자들이 에이전트의 신뢰성을 높이기 위한 연구를 진행 중임
          + 사용자 행동을 대표하는 엄격한 평가가 중요함
          + JFK 암살 파일 80,000 페이지에 대한 에이전트의 고급 추론 데모를 게시했음
          + 소량의 파일에서도 대형 AI 플레이어와의 신뢰성/정확성 차이가 큼
     * 비행기 예약은 AI에게 맡길 수 없는 작업임
          + 가족 여행이나 개인 여행 시 다양한 요령이 필요함
          + 공식 웹사이트와 가격 비교, 날짜 확인, 신용카드 포인트 고려 등 다양한 요소가 있음
     * 많은 경우 사람들이 AI를 기존 워크플로우에 맞추려는 경향이 있음
          + 기존 워크플로우는 이미 최적화된 UX/UI를 가지고 있음
          + AI를 사용하는 것이 문제 해결을 위한 솔루션이 아닐 수 있음
     * Cursor 사용 경험에서 신뢰성이 중요하다는 결론에 도달했음
          + 빠른 모델의 출력은 더 많은 수정이 필요함
          + 특정 라이브러리를 명확히 사용하는 것이 중요함
     * 지난 20년 동안의 기술 발전에서 신뢰성이 더 중요하다고 생각함
          + 스마트폰, 운전 경로, 클라우드 저장소 등 몇 가지 새로운 기능만 필요함
          + 이제는 배터리 수명과 자녀 기기의 부모 통제 기능이 중요함
     * AI 프로그래밍의 현재 상태에 대한 Reddit 스레드의 댓글이 내 감정을 요약함
          + AI로 인해 프로그래밍에 입문하는 새로운 엔지니어들이 기본적인 필수 요소를 놓치고 있음
          + 하지만 여전히 내 자리가 있다는 점에서 안심됨
     * AI가 코드를 작성할 때 최소한 그 코드를 이해할 수 있어야 한다는 원칙을 가지고 있음
          + AI가 작성한 코드를 이해하지 못하는 ""감각 코더""들의 방식은 따를 수 없음
     * 워크플로우가 에이전트보다 중요하다고 생각함
          + 에이전트가 높은 정확도로 작업을 실행할 준비가 되었을 때 워크플로우를 사용할 수 있음
          + 효과적이고 정확하며 쉽게 진단 가능한 워크플로우를 만드는 방법을 찾을 것임
     * Google Flights는 이미 완벽한 UX를 제공하고 있음
          + AI 에이전트를 사용할 때 웹 검색이 더 신뢰할 수 있고 빠르다고 생각함
          + AI가 유용해질지에 대한 확신이 없고, 테스트가 제대로 이루어졌는지 의문임
"
"https://news.hada.io/topic?id=19995","리버스 엔지니어링용 Ghidra MCP 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        리버스 엔지니어링용 Ghidra MCP 서버

     * ghidraMCP는 대형 언어 모델(LLM)이 애플리케이션을 자율적으로 리버스 엔지니어링할 수 있도록 지원하는 Model Context Protocol (MCP) 서버
     * Ghidra의 핵심 기능을 MCP 클라이언트에 노출하여 LLM이 분석 도구를 직접 활용할 수 있게 함
     * 기존의 수동 분석 프로세스를 자동화함으로써 리버스 엔지니어링 속도 및 효율성 향상에 기여
     * AI 기반의 보안 분석, 악성코드 분석, 바이너리 디버깅 등 다양한 분야에 활용 가능

주요 기능

     * MCP 서버 및 Ghidra 플러그인 구성
          + LLM과 Ghidra 간의 연결 인터페이스 제공
          + Ghidra 기능을 API 형태로 MCP 프로토콜에 노출
     * 바이너리 디컴파일 및 분석
          + Ghidra를 통해 ELF, PE 등 다양한 형식의 실행 파일을 디컴파일하고 분석 수행
     * 자동 메서드 및 데이터 이름 지정
          + 난독화되거나 이름이 없는 메서드 및 데이터에 의미 있는 이름 자동 부여
          + 코드 가독성과 분석 속도 향상
     * 코드 구조 조회 기능
          + 메서드, 클래스, import 및 export 리스트를 추출
          + 코드 흐름 및 의존성 분석에 유용함

        Hacker News 의견

     * 언젠가 모든 독점 바이너리를 소스 코드로 변환할 수 있는 도구가 생기길 바라는 의견이 있음. 모든 게임의 ""오픈 소스"" 버전을 갖는 것이 재미있을 것임
          + 현재 <a href=""https://github.com/Try/OpenGothic"" rel=""nofollow"">OpenGothic</a>과 <a href=""https://github.com/SFTtech/openage"" rel=""nofollow"">openage</a> 같은 프로젝트가 있지만, 이는 커뮤니티의 오랜 노력이 필요함
     * LLMs가 코드를 해결하려면 AST-네이티브여야 한다고 생각함. 코드는 트리 구조인데, 우리는 이를 선형적으로 모델에 입력함
          + 오늘날의 모델은 반복성이나 진정한 기억력이 부족하여 계층적 구조를 효과적으로 추론할 수 없음
     * 현재 MCP를 호출할 수 있는 도구에 대한 질문이 있음. Claude의 데스크톱 애플리케이션이 MCP를 로컬에서 사용할 수 있다는 것을 알게 되었음
          + 원격으로 MCP를 사용할 수 있는 채팅 인터페이스가 있는지 궁금함
          + ChatGPT, Claude, Gemini의 웹 인터페이스에서 MCP 엔드포인트와 기능을 지정하여 서버를 원격으로 호출할 수 있기를 바람
     * Ghidra와 LLM의 이전 통합에 대한 좋은 비디오가 있었음
          + Malimite – iOS 및 macOS 디컴파일러에 대한 정보가 있음
          + 그녀의 유튜브 채널을 본 적이 없다면 확인해보기를 추천함. 기술적인 내용 외에도 레트로 OS 그래픽으로 편집된 것이 재미있음
     * radare2에 대한 정보도 있음
          + <a href=""https://github.com/dnakov/radare2-mcp"" rel=""nofollow"">radare2-mcp</a>
     * Ghidra에서 LLM으로 복사하여 붙여넣기만 하는 경험은 성공적이지 않았음. 이러한 것들에 대한 벤치마크가 있으면 좋겠음
     * MCP 서버에 프로그램의 임의 읽기 및 쓰기와 같은 더 많은 기능이 있으면 좋겠다는 의견이 있음
          + 예를 들어, XOR된 명령어를 사용하는 셀프 언패킹 CTF 챌린지를 작업 중이었음. XOR된 주소의 값을 읽을 수 있으면 좋겠음
     * 모든 바이너리를 즉시 완벽하게 리버스 엔지니어링할 수 있다면 보안이 어떻게 변할지에 대한 사고 실험이 있음
     * MCP 서버의 ""카탈로그""를 작업 중인 사람이 있는지 궁금함. Github에서 검색하는 것이 이를 발견하는 최선의 방법은 아님
"
"https://news.hada.io/topic?id=20033","Xee - Rust로 구현된 최신 XPath 및 XSLT 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Xee - Rust로 구현된 최신 XPath 및 XSLT 엔진

     * Xee는 Rust로 개발된 XML 실행 엔진으로, 최신 버전의 XPath 3.1과 XSLT 3.0을 지원함
          + XPath는 XML 쿼리 언어이며, XSLT는 XML 문서를 다른 문서로 변환하는 언어
     * 커맨드라인 도구 xee와 Rust 라이브러리 xee-xpath로 구성되어 있으며, XPath 쿼리를 실행할 수 있음
     * Rust의 성능과 통합 가능성을 바탕으로 다양한 언어에 확장 가능함 (예: PHP 바인딩 존재)
     * 향후 WebAssembly(WASM)로 브라우저에서도 실행 가능할 것으로 기대

XML의 역사와 현재 위치

     * XML은 1990년대 말에 등장했고, 2000년대 초반까지는 매우 인기 있었던 기술임
     * 이후 JSON 등의 등장으로 대세는 아니지만, 여전히 많은 데이터 저장 및 전송에 사용되며, 문서 형식(docbook, JATS)이나 웹의 일부(SVG, MathML) 등에서 많이 사용됨
     * XML은 여전히 중요한 기술로 남아 있으며, Xee는 XML 기술의 현대화를 목표로 함
     * 개발자가 Python용 XML 라이브러리 lxml을 만든 경험을을 보유하고 있어, Rust와 XML 모두를 잘 아는 희귀한 개발자로서 Xee를 통해 XML 세계에 복귀하게 됨

XPath와 XSLT는 완전한 프로그래밍 언어

     * XPath는 XML을 탐색하고 쿼리하는 언어이며, 함수형 언어로서 변수, 조건문, 반복문, 함수 정의 등을 포함함
     * XSLT는 템플릿 기반의 변환 언어로, XPath를 내장 표현식 언어로 사용하며 XML을 다른 형식으로 변환함
     * 두 언어 모두 강력한 기능을 갖춘 정식 프로그래밍 언어임

현재 XML 오픈소스 스택의 한계

     * Java 생태계에는 최신 XPath/XSLT 구현체로 Saxon이 존재하며, 다양한 언어 바인딩과 JavaScript 런타임도 제공됨
     * 반면 대부분의 리눅스 배포판 등에서는 libxml2와 libxslt를 기본 제공함
     * 이들 C 라이브러리는 XPath 1.0과 XSLT 1.0만 지원하며, 1999년에 나온 사양에 머물러 있음
     * 최신 사양을 지원하는 오픈소스 대안이 부족한 상황에서, Xee는 Rust로 작성된 현대적인 대안을 제시함

XML 세계의 명세 중심 문화

     * XML 커뮤니티는 명세 중심 문화가 강함 → 기능이 명세에 없으면 '진짜' 기능으로 간주하지 않음
     * 덕분에 개발 속도는 느리지만, 기반은 매우 견고함
     * XPath와 XQuery의 REST 프레임워크인 RESTXQ가 2012년에 논의되었고, 2024년까지도 사양 업데이트 논의 중임

Xee의 언어 구현 아키텍처

     * Crafting Interpreters 책을 참고하여 구현됨
     * XPath는 토큰화 → AST → 중간 표현(IR) → 바이트코드 → 인터프리터 실행의 단계를 거침
     * 이 바이트코드 인터프리터는 Python, Java 등에서 사용하는 스택 머신과 유사함
     * XSLT도 같은 아키텍처 기반으로 구현되며, 프론트엔드만 다르고 나머지 구성 요소는 XPath와 동일하게 사용

방대한 XML/XPath/XSLT 명세의 세계

     * XPath 3.1과 XSLT 3.0은 1.0 버전에 비해 훨씬 복잡해지고 기능이 많아졌음
     * 구현을 위해 참조해야 할 명세 문서만 1800페이지가 넘으며, 다양한 사양이 상호 의존함
     * 예를 들어:
          + XPath 3.1, XQuery/XPath 데이터 모델, 함수 및 연산자, XML Schema (구조/데이터타입)
          + XSLT 3.0, 직렬화 사양, XML 네임스페이스, XML Base, xml:id 등
          + 정규표현식 기능도 포함되어 있어 별도 regex 엔진도 구현함 → regexml

Xee의 현재 구현 상태

     * XPath 3.1의 코어 언어 및 대부분의 표준 라이브러리 구현 완료
     * 표준 라이브러리의 일부 포맷 관련 함수는 아직 미구현
     * XPath 3.1 호환성 테스트에서 21859개 중 20130개 테스트 통과 (약 92%)
     * 테스트는 약 13초 내에 모두 실행됨 → 매우 빠른 성능
     * XSLT는 아직 완성되지 않았지만 기반 구조는 마련되어 있어 확장 가능

기여자 모집

     * Rust와 XML에 관심 있는 개발자, 프로그래밍 언어 구현 또는 쿼리 최적화에 흥미 있는 분들 환영
     * 스펙 기반 기능 구현, 최적화 작업, 쿼리 성능 개선 등 다양한 영역에서 기여 가능
     * Xee는 Java 생태계 외의 현대적 XML 구현체로서 오픈소스 커뮤니티의 지원이 필요한 시점임

     나는 아직도 힙하다. 비록 XML을 다루지만.

        Hacker News 의견

     * 누군가가 진정한 오픈 소스 XSLT 3 및 XPATH 3 구현을 만든 것을 보니 기쁨
          + 과거 프로젝트에서 XSLT & XPATH 1.0만 사용했음. 이는 Java/Net 세계 외에서는 지원이 부족했기 때문임
          + Saxon은 훌륭했지만, 오픈 소스 세계에서 XSLT 2.0 및 XPATH 2.0 이상의 구현이 더 많았으면 좋겠음
          + XSLT 3.0은 훌륭한 사양이지만, 오픈 소스 방식으로 실행할 다른 방법이 필요함
     * 많은 양의 XML 소스가 존재함
          + 예를 들어, Wikipedia 아카이브는 42GB의 압축되지 않은 텍스트임
          + 이를 메모리에 완전히 파싱된 형태로 저장하면 100GB 이상이 필요할 수 있음
          + 스트리밍이 해결책이지만, 아직 지원되지 않음
     * XML을 사용하는 것이 여전히 멋짐
          + Rust로 작성된 고성능, 고품질의 라이브러리가 필요함
          + 이를 기반으로 한 Python 라이브러리가 좋은 기초가 될 수 있음
     * XML은 데이터 상호운용성을 위한 표준 기반 접근 방식임
          + 처음 배웠을 때는 개발자 친화적이지 않아서 싫었음
          + 그러나 이제는 오랜 표준의 가치를 이해하게 되었음
          + XML은 컴퓨터가 선호하는 데이터 표준처럼 보임
     * XSLT는 주요 브라우저에서 여전히 널리 지원됨
     * WASM으로 컴파일될 수 있다는 점은 긍정적임
          + Chrome 팀이 libxml 및 XSLT 지원을 제거하려 했던 적이 있었음
          + 근본적인 도구 작업이 중요함을 보여주는 증거임
     * 최근에 XSLT 2 트랜스파일러를 작성했음
          + XPath 엔진 작성이 가장 어려운 부분이었음
     * XPath와 XSLT가 오늘날 어떤 문제를 우아하게 해결하는지 궁금함
     * Java 외의 공간에서 작업하는 것을 좋아함
          + XML 리더가 오류 수정 기능을 갖추는 것이 중요함
     * 이 구현이 언젠가 Wine에서 MSXML 구현에 사용될 수 있을지 궁금함
          + 과거에 Wine을 위한 XPath 1.1 구현을 작성했지만, 병합하지 못했음
"
"https://news.hada.io/topic?id=20071","Demoscene - 스웨덴에서 유네스코 문화유산으로 지정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Demoscene - 스웨덴에서 유네스코 문화유산으로 지정

     * 스웨덴에서 데모씬(Demoscene) 이 국가 유네스코 무형문화유산으로 지정됨
     * 이 작업은 국제 프로젝트 Art of Coding의 일환으로, 데모씬을 전 세계 유네스코 유산으로 지정하려는 운동임
     * 데모씬은 가장 오래된 창의적 디지털 서브컬쳐 중 하나로 간주됨
          + 수십 년 간 기술적·경제적 변화 속에서도 자체의 가치와 전통을 유지해 온 독특한 사례
          + 기본적으로는 특정 하드웨어의 한계를 극복하는 창작 경쟁이 중심이지만, 모든 데모씬 참여자가 이를 추구하는 것은 아님
          + 예를들어, 작성자가 속한 Hack n’ Trade는 이상하고 실험적인 창작을 추구하며, 이를 지향하는 다른 그룹들도 다수 존재함
          + 일부 데모씬 참여자는 콘텐츠를 직접 제작하지 않아도 BBS 교류, 파티 조직, 소프트웨어 보존 등으로 커뮤니티 유지에 기여함
     * 작성자는 연구자로서 쓴 논문과 블로그와, 개인적인 데모씬 경험 사이의 간극을 자주 느껴왔음
          + 국제적 행사와 대형 릴리즈도 중요하지만, 작성자에게는 지역 모임, 소규모 파티, 친구들과의 교류가 더 큰 의미로 다가옴
          + “그냥 재미로 이상한 컴퓨터 작업을 하는 것”이 진정한 즐거움이라고 표현
     * 데모씬은 다양한 배경을 가진 사람들이 공존하는 독특한 문화
          + 예: 가족과 직장을 가진 스웨덴 개발자에게는 향수를 자극하는 취미 활동
          + 예: 프랑스의 자유로운 예술가에게는 기업과 예술계의 틀을 벗어난 자유문화
     * 이러한 보수적이면서도 개방적인 이중적 성격이 바로 데모씬이 유네스코 무형유산으로 지정될 수 있었던 이유 중 하나

        Hacker News 의견

     * 12년이 지났지만 여전히 이 64k 인트로와 4k 인트로에 매우 감명받음
          + 이 웹사이트는 튜토리얼과 코드, 훌륭한 설명으로 매우 흥미로움
     * Glicol의 창작자로서, 스웨덴의 데모씬을 인정하는 접근 방식이 특히 고무적임
          + 노르웨이에서의 지원 경로를 반성하게 만듦
          + 학문적 환경은 매우 지원적일 수 있지만, 새로운 디지털 예술 형식을 위한 공공 예술 자금 구조를 탐색하는 것은 때때로 더 어려움
          + 스웨덴의 성공은 진정으로 영감을 주며 생각할 거리를 제공함
     * 90년대 초부터 스케너로서, 이러한 발표에 매우 기쁨
          + 예술, 기술, 인류학의 교차점에서 장면에 대한 학문적 연구가 증가하길 바람
          + 장면의 독특함, 인접 장면과의 상호작용, 하위 장면, 데모씬 예술과 기술의 핵심 요소에 대한 연구가 매우 흥미로울 것임
          + 장면 그룹, 스케너, 장면 제작물, 하위 장면 제작물에 대한 정보 아카이빙이 잘 되어 있음
     * 공식 발표는 스웨덴어로 제공됨
     * 8비트 사운드에 빠지게 만든 노래는 Blox임
     * 데모스케너로서, 이 발표가 멋지지만 약간 쓸모없다고 생각함
          + UNESCO 유산 목록이 국가별로 되어 있는 것이 이상함
          + 글로벌 커뮤니케이션 네트워크 이후 등장한 문화에 적합하지 않음
          + 데모씬은 이미 핀란드와 독일에서 UNESCO 유산으로 인정받고 있음
          + 취미가 목록에 올라가는 것이 실질적인 이익은 없지만 여전히 흥미로움
     * 1990년대에 경험한 사람들에게는 고전 명작임
     * 적은 코드로 시각과 소리를 만들어내는 것이 놀라움
          + 예술적 스타일로 인해 누가 데모씬을 만들었는지 알기 쉬움
     * 우리는 검증이 필요하지 않음
     * UNESCO 세계 유산은 물리적 위치라고 생각했음
          + 스웨덴 전체가 사이트인가?
"
"https://news.hada.io/topic?id=19994","지식 노동의 쇠퇴가 시작된 것일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          지식 노동의 쇠퇴가 시작된 것일까?

     * 최근 몇 년간 대학 졸업자의 실업률이 다른 노동자들보다 빠르게 증가하고 있고, 이에 대한 우려가 커지고 있음
     * Starbucks의 최근 1,000명 이상 본사 인력 해고는 화이트칼라 노동자들에게 경고 신호로 작용함
     * 2022년 9월 이후 대학 졸업자의 실업률은 2%에서 2.6%로 30% 증가
     * 전체 실업률은 같은 기간 3.4%에서 4%로 18% 증가
     * 현재 실업률은 역사적 기준으로 보면 여전히 낮은 수준이지만, 고용시장 약화 조짐이 보임
     * 팬데믹 이후 수요 급증으로 기업들이 적극적으로 고용했다가, 금리 인상과 투자자 압박으로 감원 전환

기술 변화와 AI의 영향

     * 빠르게 발전하는 인공지능(AI)이 지식 노동의 수요를 감소시킬 가능성 제기
     * 특히 초보 개발자들에게 AI 코딩 보조 도구가 생산성을 25% 이상 향상시킴
     * 숙련 개발자와의 생산성 격차가 줄어들며 고경력자의 임금 프리미엄 감소 우려
     * MIT 연구진은 개발자 직무가 AI 관리자로 진화할 가능성을 제시
     * 단기적으로는 AI를 통한 인력 감축 추세가 기술 업계에서 확대 중
     * 기술 업계 실업률은 2022년 2.9%에서 2024년 4.4%로 50% 이상 증가

산업별 사례: 게임, 금융, 커피

     * 비디오 게임 산업은 2020년 팬데믹 특수로 급성장 후 대규모 해고 진행
     * Bethesda 등 유명 게임 개발사에서도 노조 결성 및 구조조정 병행
     * 금융 산업에서는 금리 인상과 함께 주택대출 수요가 줄며 인력 감축
     * Wells Fargo는 16분기 연속 인력 감축, 주택대출 부문은 2023년 이후 절반 감축
     * 일부 직원들은 해고가 노조 활동과 관련 있다고 주장

기업 구조 변화와 조직 효율성 추구

     * 많은 기업이 Amazon 모델처럼 기능 간 장벽을 낮추고 소규모 팀 구성 추구
     * Starbucks, Nissan 등도 ""중복 제거""와 ""민첩한 조직""을 해고의 이유로 제시
     * 이런 변화는 중간 관리자층이나 백오피스 역할 감소로 이어짐

학력과 실업률의 불균형

     * ZipRecruiter 분석에 따르면, 실업률 상승은 학사 학위 소지자 또는 일부 대학 교육 이수자에게 집중됨
     * 고등학력(석사 이상) 또는 고졸 미만 계층은 실업률이 안정되거나 감소함
     * ADP Research는 학사 이상의 직무에 대한 채용이 상대적으로 더 둔화되었다고 분석

학위의 경제적 가치 변화

     * 1980년 이후 지속적으로 벌어졌던 학위 소지자와 비소지자의 임금 격차가 최근 15년간 정체
     * 이는 대학 교육 이수자의 증가와 정보기술 발달로 인해 고학력 노동자의 필요성이 줄어들었기 때문일 수 있음
     * 예를 들어, 과거에는 대학 졸업자를 대상으로 했던 회계 등의 직무가 자동화되며 그 수요가 감소함

정부 정책과 공공 부문 영향

     * 트럼프 전 대통령의 연방정부 개편 시도는 대학 및 비영리 기관에도 영향을 미침
     * Johns Hopkins University는 연방 연구 자금 축소로 전 세계적으로 2,000명 해고 발표
     * 공공 및 연구 부문은 고학력자의 고용 비중이 높은 분야로, 정부 지출 축소는 큰 영향을 줄 수 있음

경제학자들의 의견

     * Harvard의 Lawrence Katz 교수는 현재 실업률 상승이 장기적 변화로 보기는 어렵다고 분석
     * 재택근무로 인한 임금 할인 효과가 일부 영향을 줄 수 있음
     * 그러나 정부의 과학, 교육, 연구 지출 축소는 향후 몇 달간 대학 졸업자 실업률에 부정적 영향을 줄 가능성 존재

        Hacker News 의견

     * 많은 사람들이 이 주제를 이야기하지 않는 것이 놀라움. 기업들이 해고를 할 수 있는 큰 이유는 그들이 더 적은 일을 하고 있기 때문임. 예전에는 사용자들을 위한 작은 개선 아이디어가 많았지만, 이제는 AI 하나뿐임. AI를 사용해서 개선을 하는 것도 아니고, 계획도 없음. 그냥 하지 않음. 이 경험이 특별한 것은 아님.
     * 제조와 엔지니어링 지식이 우리의 탐욕 때문에 사라질까 걱정임. 일반적인 시나리오로, 산업이 국가에서 잘 되지 않으면 경영진은 아웃소싱을 결정하고 결국 공장을 해체함. 나이 든 엔지니어, 기술자, 노동자들이 가진 지식은 그들이 사망하면서 완전히 사라짐.
     * 우리의 생활 수준을 유지하는 대부분의 직업은 블루칼라 직업임. 농부, 섬유 노동자, 건설 노동자, 배관공, 전기공, 폐기물 처리 노동자 등임. 지난 세기 동안 화이트칼라 직업이 과대평가되었음. 이제 화이트칼라 직업도 위험에 처하면서 사람들이 어디로 향할지 불확실함. 경제적 파이는 계속 줄어들고 있으며, 이 추세가 반전될 것 같지 않음. 우리의 사회경제 모델이 기술과 함께 확장되지 않는 것 같음. 적응 방법에 대한 건설적인 대화가 필요함.
     * 학사 학위는 완전히 재고되어야 함. 부유한 자본 소유자들의 자녀를 적절한 계급으로 만들기 위한 마무리 학교였음. 이후에는 노동 계급을 위한 직업 학위가 되었지만, 많은 학위가 유용한 기술과 완전히 분리되어 있음. 유일한 가치는 적절한 채용 위원회/개인을 감동시키면 전문 관리 계급의 일원이 될 수 있다는 것임. 그럼에도 불구하고, 우리는 노동 계급이 이 학위를 위해 엄청난 대출을 받아야 하고, 그들의 직업 생활 내내 빚을 지게 하기로 결정했음. 지속 가능하지 않으며, 단순히 빚을 탕감하는 것은 더 비싸고 원하는 실제 결과(유용한 노동자)와 덜 일치하게 만들 것임.
     * AI의 장점을 가장 많이 주장하는 사람들은 아마도 출력을 많이 ""테스트""하지 않고 LLM이 오류를 내뿜게 놔둘 것임. 나는 매일 LLM을 사용하지만, 주로 브레인스토밍 도구로 사용하거나 작은 스크립트 부분을 작성하는 데 사용함. 모든 것은 검증되어야 함. 지난 주말에 ChatGPT Music Teacher를 사용하려고 했지만, 기타를 위한 보이스 리딩 연습을 준비하는 데 거의 반 시간을 소비했음. 모델이 올바른 정보를 제공하지 못했음. 코드나 프렛/노트 정보가 잘못되었음. 이론과 기타에서의 간격을 몰랐다면 큰 문제가 되었을 것임. 반 시간을 낭비했고 쓸모 있는 것을 얻지 못했음. 기술이 꽤 놀랍다는 것을 부정하는 것은 아니지만, 과대광고를 믿지 말아야 함.
     * 현재로서는 AI가 여전히 지식 노동자가 사양하고 점검해야 함. AI는 지식 노동자를 더 생산적으로 만들지만, 그들이 필요 없게 만들지는 않음. 지식 노동자가 더 생산적이면 지식 노동은 더 저렴해짐. 저렴한 지식 노동은 지식 노동에 대한 수요를 증가시킴. 따라서 필요한 노동자 수가 실제로 증가할 수 있음. 그렇지 않을 수도 있지만, 지식 노동자가 감소할 것이라는 1차 분석은 충분하지 않음. 의류 제조업체를 참고할 수 있음. 의류 제조의 부분 자동화는 의류를 더 저렴하게 만들었고, 이제 사람들은 수백 벌의 옷을 가지고 있음. 100년 전보다 더 많은 사람들이 의류를 만들고 있음.
     * 최근 학술 논문에 따르면 AI 코딩 도우미를 사용한 소프트웨어 개발자는 생산성의 주요 지표가 25% 이상 향상되었음. 생산성 향상은 경험이 적은 개발자에게서 가장 크게 나타났음. 하지만 이 인용에 대해 잘 모르겠음. 논문을 읽었는데, 이 맥락에서 ""생산성""은 개발자 주간의 빌드, 커밋, 풀 요청 수로 간주되었음. AI 도구(Copilot) 사용 여부에 따른 빌드 성공률의 통계적으로 유의미한 차이는 없었음.
     * AI와의 관련성은 확실하지 않음. 팬데믹의 진정한 교훈 중 하나는 지식 관련 모든 것을 아웃소싱할 수 있다는 것임. 1/8에서 1/2 정도의 품질이라도 비용이 적게 들면 더 나음. 이 효과는 덜 숙련되고 더 초급인 역할일수록 더욱 증폭됨. AI가 발전함에 따라 이 효과는 더욱 증폭될 것임. AI와 조종사가 함께 있으면 매우 생산적이어서 다른 사람을 고용하지 않을 이유가 없을 것임.
     * AI 엔진이 정말 끔찍한 코드를 작성하고 개선되지 않을 수도 있음. 하지만 사람들에게 쉽게 일을 대충 하게 만들고, 이는 지식 작업의 쇠퇴로 이어질 수 있음.

   AI 의 발전이 곧 양극화이죠

   기본소득 정책의 실현가능성을 보았을 때,
   아마 곧 무서울 정도로 계층 간 불균형이 더 심해질 겁니다
"
"https://news.hada.io/topic?id=20079","교실 내 Air Filter 설치의 놀라운 교육적 혜택 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 교실 내 Air Filter 설치의 놀라운 교육적 혜택 (2020)

교실에 공기 필터 설치의 교육적 이점

     * 배경: 2015년 알리소 캐년 가스 누출 사건으로 인해 로스앤젤레스의 많은 학교에 공기 필터가 설치되었음. 이로 인해 학생들의 시험 점수가 크게 상승하였으며, 이러한 상승은 다음 해에도 지속되었음.
     * 연구 결과: NYU의 Michael Gilraine의 연구에 따르면, 공기 필터 설치는 저소득층 아이들에게 특히 큰 이점을 제공할 수 있는 가장 비용 효율적인 교육 정책 개입 중 하나로 나타남. 필터 설치는 단순한 변화였지만, 대기 오염이 인지 능력에 미치는 영향을 보여주는 여러 연구와 일치함.
     * 알리소 캐년 가스 누출 사건: 2015년 10월 23일, 남가주 가스 회사 직원들이 포터 랜치 근처의 알리소 캐년 천연가스 저장 시설에서 대규모 누출을 발견함. 이로 인해 로스앤젤레스 통합 교육구는 누출 지역 5마일 이내의 모든 학교에 공기 필터를 설치함.
     * 필터 설치의 효과: 필터 설치 후 수학 점수는 0.20 표준 편차, 영어 점수는 0.18 표준 편차 상승. 이는 학급 규모를 줄이는 것과 비슷한 효과를 나타냄.
     * 비용 효율성: 공기 필터 설치는 학급 규모를 줄이는 것보다 훨씬 저렴하며, 전국적으로 빠르게 확장할 수 있는 가능성이 있음. 필터 설치는 저소득층 지역의 학생 성취 격차를 줄이는 데 기여할 수 있음.
     * 결론: 공기 필터 설치는 저렴한 비용으로 큰 교육적 이점을 제공할 수 있는 잠재력이 있으며, 추가적인 연구와 실험을 통해 더 많은 데이터를 수집할 필요가 있음.

        Hacker News 의견

     * 교실에 공기 필터를 설치하는 것에 찬성하지만, 이 연구의 극단적인 결과가 추가 연구에서도 유지될지는 의문임
          + 연구에서는 미국 역사상 가장 큰 가스 누출 사건을 활용하여 가스 회사가 누출 지역 내 모든 학교에 공기 필터를 설치한 상황을 분석함
          + 연구는 공기 필터가 설치된 학교와 그렇지 않은 학교의 학생 성취도를 비교함
          + 그러나 연도별, 지역별, 교사별 차이가 크기 때문에 공기 필터만이 유일한 변화라고 가정하는 것은 비현실적임
          + 공기 필터가 실내에서 유용하다고 생각하지만, 시험 점수가 극적으로 향상될 것이라고 기대하는 것은 비현실적임
          + 과거의 어유 보충제와 같은 과장된 건강 주장과 유사함
     * 데이터가 실제로 연구에서 주장하는 것을 보여주는지에 대한 의문이 제기됨
          + 연구는 이론적으로 말이 되지 않는 하나의 데이터 포인트와 선형 경향에 의존함
          + 연구는 공기 필터가 일반적인 공기 오염 물질을 제거함으로써 효과적이라고 주장함
          + 제3세계 국가의 구충제 투여 연구와 유사한 회귀가 떠오름
          + 공공 정책 개입의 비용과 이익을 연구하는 것은 매우 어려움
          + 공기 필터가 시험 점수를 향상시킨다는 간단한 가설이지만, 혼란 요인을 통제하기 어려움
     * 공기 중 가스의 영향에 대한 더 많은 데이터가 필요함
          + 높은 CO2 농도는 인지 성능을 저하시킴
          + 잠수함의 높은 CO2 농도는 인지 성능에 영향을 미치지 않음
          + 탄소 필터가 교실 성능을 향상시킬 수 있음
          + 답답한 방을 싫어하는 경향이 있음
          + 여러 가설과 일치하며, CO2가 아닌 다른 가스가 인지 성능을 저하시킬 수 있음
     * 개인적인 경험으로, 창문을 열도록 알림을 주는 기기가 생산성을 크게 향상시킴
     * KIPP 차터 스쿨 네트워크의 효과에 대한 연구 결과가 있음
          + 3년 후 시험 점수에서 유의미한 향상이 있었음
          + 표준 편차 0.22가 무엇을 의미하는지 이해하기 위해 조사함
          + 평균에서 1 표준 편차 위로 가는 것은 50번째 백분위수에서 84번째 백분위수로 가는 것임
          + 평균에서 0.22 표준 편차 위로 가는 것은 50번째 백분위수에서 약 55번째 백분위수로 가는 것임
     * HEPA 필터가 LNG와 메탄을 걸러내기 위해 설치된 이유에 대한 의문이 있음
          + HEPA 필터는 CO2를 효과적으로 제거하지 않음
          + 깨끗한 공기가 생산성에 좋다는 결론을 내릴 수 있는지에 대한 의문이 있음
          + 같은 필터를 구매하고 싶지만, $700 HEPA 필터가 사용된 필터와 같은지 의문임
     * 건강 연구에서 증거의 계층이 잘 확립되어 있으며, 이 연구는 다른 요인을 통제할 수 없어 낮은 품질의 증거로 평가됨
          + 오염과 건강에 미치는 영향에 대한 연구에서 혼란 요인이 건강 결과에 더 큰 영향을 미침
          + 이 연구의 강한 효과는 혼란 요인에 의한 것일 가능성이 높음
          + 정책 수준에서 큰 영향을 기대하며 행동을 취하기 위해서는 더 나은 연구 설계가 필요함
     * 두꺼운 오일 페인트로 칠해진 금속 테이블이 있는 교실에 앉지 않았다면 얼마나 똑똑했을지 궁금함
     * 개인적인 경험으로, 코로나 이후 보육원이 전염병의 배였음
          + 아이들이 면역력이 없었고, 급히 면역력을 키움
          + 보육원은 N-95 공기 필터와 UV 조명을 설치할 수 있는 보조금을 받음
          + 설치 후 아이들이 덜 아프고, 아플 때도 덜 심각함
          + RSV 백신도 큰 도움이 되었음
          + 집에도 설치할 정도로 효과적임
     * 아이들이 아프지 않게 하는 것이 교육적 결과를 향상시킴

   정말 흥미로운 실험입니다
"
"https://news.hada.io/topic?id=20041","유타주, 미국 최초로 수돗물에서 Fluoride 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     유타주, 미국 최초로 수돗물에서 Fluoride 금지

     * 유타주, 미국 최초로 수돗물 불소 사용 금지
          + 유타 주지사 스펜서 콕스가 이번 주 불소 금지 법안을 서명하여, 5월 7일부터 시행 예정임. 이는 공공 수돗물에서 불소 사용을 금지하는 미국 최초의 주가 됨. 플로리다와 오하이오 등 다른 주들도 유사한 법안을 검토 중임.
          + 불소는 1945년부터 충치 예방을 위해 미국 수돗물에 첨가되어 왔음. 그러나 이번 조치는 특히 어린이의 구강 건강에 부정적인 영향을 미칠 수 있다는 전문가들의 비판을 받고 있음.
     * 불소 금지 법안의 배경
          + 법안은 공공 수돗물에 불소를 첨가하는 것을 금지하며, 불소와 관련된 공중 보건 문제는 언급하지 않음. 법안을 발의한 공화당 주 의원 스테파니 그리시우스는 불소가 어린이의 인지 발달에 영향을 미칠 수 있다는 연구를 근거로 제시함.
          + 미국 보건부 장관 로버트 F 케네디는 불소가 관절염, 골절, 골암, IQ 손실, 신경 발달 장애, 갑상선 질환과 관련이 있다고 주장했으나, 대부분의 공중 보건 전문가들은 이를 반박함.
     * 전문가들의 반응
          + 미국 치과 협회는 유타 주의 결정을 강하게 비판하며, 이는 ""구강 건강과 복지를 무시한 것""이라고 언급함. 협회는 불소 첨가가 공동체의 구강 건강을 위해 중요한 공중 보건 정책이라고 주장함.
          + 미국 소아과 학회와 질병 통제 예방 센터 등 많은 공중 보건 단체들은 소량의 불소를 수돗물에 첨가하는 것을 지지해 왔음.
     * 불소 첨가의 효과와 논란
          + 미국 공중 보건 서비스는 2015년에 수돗물에 첨가하는 불소의 양을 줄였으나, 1960년대부터 주정부에 소량의 불소를 첨가하도록 권장해 왔음.
          + 최근 법원 판결로 인해 미국 수돗물의 불소 양이 줄어들었으며, 일부 전문가들은 치약과 기타 치과 제품에서 불소가 널리 사용되고 있는 상황에서 수돗물에 불소를 계속 첨가할 필요가 있는지 의문을 제기함.
          + 서유럽 대부분은 수돗물에 불소를 첨가하지 않으며, 영국에서는 약 10%의 인구가 불소화된 수돗물을 사용하고 있음. 반면, 미국 인구의 약 63%는 불소화된 수돗물을 사용하고 있음.
          + 불소 첨가를 지지하는 전문가들은 연구 결과가 불소화된 수돗물이 어린이와 성인의 충치를 최소 25% 예방한다고 주장함.

        Hacker News 의견

     * 물에 불소를 넣는 것은 자유를 증진시킴. 가난하면 어디로도 갈 수 없고 아무것도 살 수 없음. 아프면 병원 침대에 갇히거나 아무것도 할 수 없을 만큼 기분이 나쁨. 아프면 자유롭지 않음
          + 물에 불소를 넣으면 치과 비용과 충치 발생률이 줄어들어 가장 가난한 사람들 사이에서 치아 감염이 줄어듦. 따라서 물의 불소화로 인해 일부 사람들은 덜 아프고 더 많은 돈을 가지게 되어 더 자유로워짐
          + 반대 의견은 물에 불소를 넣는 것이 사람들을 그들의 동의 없이 약물 치료하는 것이라는 주장임. 이는 정부가 약을 복용하도록 강요하는 것이며, 따라서 약을 복용하지 않을 자유에 대한 공격임. 이는 정부가 개인의 삶에 간섭하는 것임
          + 긍정적 자유(무언가를 할 자유)와 부정적 자유(삶에 대한 간섭으로부터의 자유)의 대조가 현재 미국의 핵심 정치적 논쟁임. 부정적 자유, 즉 정부 간섭으로부터의 자유는 정부를 약화시키려는 사람들이 홍보하고 있음. 가난하고 아픈 사람들은 자신을 위해 싸우거나 권위에 맞서 연대할 수 없을 가능성이 높음. 이 개별 문제는 상대적으로 작지만, 이와 같은 수백 가지 문제를 모으면 순종적인 노동자 계급을 만드는 효과가 있음
     * 이 문제는 미국에서만 극단적으로 대립되는 논쟁 중 하나로, 다른 나라에서는 이미 해결된 문제임. 미국은 다른 나라들이 어떻게 해결했는지 살펴볼 필요가 있음
     * 처음에는 반백신 신념과 같은 범주로 무시했지만, 임신한 여성이 불소를 섭취할 때 IQ가 약간 낮아진다는 좋은 연구들이 있음. 출생 후에는 유의미한 효과가 없음
          + 불소를 물에서 제거하고 임신한 여성에게 불소 없는 치약을 사용하도록 권장하는 것이 아이디어임
          + 다른 사람들은 현대 치약이나 정기적인 치과 치료로 충분한 불소를 얻을 수 있음
          + 불소가 치약에 포함되기 전 시대에는 물에 불소를 넣는 것이 의미가 있었지만, 이제는 취약한 인구에게 과도한 약물 투여가 됨
     * 오늘날 치약을 통해 권장되는 불소 수준을 얻는 것은 사소한 일임. 따라서 불소화를 할 필요가 없으며, 치과 건강 이외의 목적으로 불소화를 하는 것은 필요하지 않음
          + 미국에서는 치과 치료가 공공 보험에 포함되지 않으며, 고용주를 통한 보험의 선택적 추가 항목임
          + 불소화가 효과적이거나 안전한지 여부를 전혀 다루지 않더라도, 공공 물에 불소화를 할 필요가 없어 보임. 정부가 그렇게 하지 않기로 선택해도 대중에게 경제적 손실이 없음
          + 따라서 사람들을 내버려 두고 스스로 선택하게 하는 것이 좋음. 도시나 주의 시민들이 공공 물 공급에 불소화를 원한다면 그렇게 하고, 원하지 않는다면 내버려 두면 됨. 자유로운 나라이고 유권자들은 성인이므로 스스로 선택하게 해야 함
          + 자신이 싫어하는 선택을 하는 곳에 살고 있지만 불소화된 공공 물 공급이 중요한 문제라면, 그것을 바꾸기 위해 캠페인을 하거나 발로 투표해야 함
          + 이 문제는 어느 쪽이든 논쟁할 가치가 없다고 생각함
     * 충치를 예방하는 것은 불소를 치아에 국소적으로 적용하는 것이 더 효과적임
          + 개인적으로 수동적인 건강 이익을 믿지 않음. 설령 사실이라 해도 불소화된 물이 국소 적용보다 우수하다는 증거는 없음
          + 공공 건강 이유로 물에 무언가를 추가하는 것을 받아들인다면, 실제로 추가해야 할 것은 불소가 아니라 더 많은 비타민임. 특히 비타민 D
     * 물에서 불소를 제거하고자 하는 사람들은 불소가 추가되지 않은 나라를 방문하여 사람들의 치아를 봐야 함
          + 프랑스에 살고 있으며, 사람들이 불소 없이 자랐다는 것이 너무나 명백함. 심지어 유명인들도 TV에 나올 때 치아를 보이지 않으려고 함
          + 대부분의 경우 동의를 얻는 것을 지지하지만, 때로는 명백한 이익을 얻지 않는 것이 어리석은 일임
          + 금 조각을 우편으로 배달하는 것과 같고 사람들이 불평하는 것과 같음. 그것은 우편함의 용도가 아님
     * 하와이는 물에 불소를 추가하지 않음. 유타는 이를 전면 금지하는 첫 번째 주가 될 수 있지만, 불소를 음용수에 추가하지 않기로 선택한 지역 사회와 도시가 꽤 많음
     * 유타는 자연적으로 물에 불소가 포함되어 있으며, 일부 수계에서는 치과 문제를 예방하기 위해 추가하는 양보다 두 배 이상 많음. 왜 그들은 물을 불소화했는지 궁금함
     * 치약에 이미 대부분의 사람들이 필요한 불소가 포함되어 있음. 불소증에 대한 우려가 정당하다면, 비록 그 우려가 작더라도 물 공급에서 제거하는 것이 합리적임. 이를 닦지 않는 사람들의 수가 정말로 불소화를 정당화할 만큼 많은지 의문임

   불소가 실제로 문제를 끼치는 부분은 다른 부분이 아니라 일주기 리듬과 멜라토닌 분비를 담당하는 뇌의 송과선에 쌓여서 조직 석회화를 유발한다는 거죠.
"
"https://news.hada.io/topic?id=20093","Firefox, 마침내 웹 앱(PWA) 지원 재도입 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Firefox, 마침내 웹 앱(PWA) 지원 재도입 예정

     * Firefox가 수년간 사용자들의 요구를 무시한 끝에 Progressive Web Apps(PWAs) 지원을 추가하기로 결정함
     * 현재 Firefox Nightly 빌드에서 about:config에 있는 숨겨진 실험적 플래그 browser.taskbarTabs.enabled를 통해 해당 기능을 활성화할 수 있음
     * 아직 기능이 실제로 동작하지는 않지만, 플래그가 추가된 것은 실제 기능의 도입이 임박했음을 의미함

Firefox의 웹 앱 기능 방향성

     * Firefox의 웹 앱 통합 방식은 Chrome이나 GNOME Web 같은 다른 브라우저와는 다르게 설계될 예정
     * Mozilla의 제품 매니저 David Rubino는 웹 앱이 Firefox 안에서 자연스럽게 작동하는 방식을 목표로 한다고 밝힘
     * 완전한 PWA 사양 전체를 따르지는 않으며, Android처럼 완전한 네이티브 PWA 기능을 기대하기는 어려움
     * Firefox의 웹 앱 모드는 다음과 같은 특징을 가짐:
          + 브라우저 프레임을 최소화하지 않음 (주소창, 확장기능, 즐겨찾기 등 그대로 유지)
          + '새 탭' 버튼은 일반 Firefox 창 열기 버튼으로 대체됨
          + 웹사이트 중심 경험을 유지하면서 다중 웹사이트 관리를 위한 기능은 최소화

예상되는 웹 앱 기능

     * 웹 앱은 다음 기능들을 지원할 예정:
          + 앱 메뉴, 도크, 작업 표시줄에 독립된 아이콘으로 표시
          + 닫기 전까지 앱이 계속 실행 상태 유지
          + 해당 웹사이트 링크 클릭 시 새 창이 아닌 해당 웹 앱으로 연결됨
     * 차별화된 기능도 있음:
          + 어떤 브라우저 탭이라도 즉석에서 웹 앱 모드로 전환 가능
          + 로그인 상태를 유지한 채 전환 가능
          + 모바일처럼 링크 자동 캡처 기능 지원 예정
     * Rubino는 “간단한 설정, 핵심 브라우저 기능 유지, 자동 링크 캡처를 통해 기존 브라우저보다 나은 경험 제공 가능”이라고 밝힘

아직 갈 길은 멀지만…

     * Firefox의 이번 웹 앱 기능은 다른 브라우저 대비 혁신보다는 최소 기능(MVP) 중심 접근으로 보임
     * 그러나 웹 앱 도구와 PWA가 오래 전부터 존재했던 점을 감안할 때, “늦었지만 그래도 환영할 만한 진전”

Firefox Nightly에서 웹 앱 기능 활성화 방법

     * Firefox는 최근 유저들이 오랫동안 요청해온 기능들을 차례로 구현 중:
          + 세로 탭
          + 프로필 관리
          + 탭 그룹 (일부는 아직 베타 상태)
     * 이번에는 “웹 앱 설치” 기능이 이 목록에 추가됨
          + Mozilla는 처음에는 피드백을 받겠다고 했지만, 이후 별다른 공지는 없었음
          + 최근 Firefox Nightly(Windows/macOS/Linux)에 taskbar tabs 기능을 활성화할 수 있는 숨겨진 설정이 추가됨
     * 다만, 해당 설정을 true로 바꿔도 실제로는 아직 아무 변화 없음
     * 앞으로 몇 주간 기능이 활성화될 가능성이 있으므로 Nightly 사용자라면 주시할 만한 부분
"
"https://news.hada.io/topic?id=20094","빠르게 AI 제품을 개선하는 실전 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         빠르게 AI 제품을 개선하는 실전 가이드

     * 많은 AI 팀들이 도구 선택에만 집중하고 정작 중요한 효과 측정과 반복 학습을 간과함
     * 저자는 30개 이상의 AI 제품 구축을 도와온 경험을 바탕으로, 성공하는 팀들의 공통된 실행 방식을 소개
     * 핵심은 측정 중심 사고방식과 실험 기반 로드맵 구축임

1. 가장 흔한 실수: 오류 분석 생략

     * 대부분의 AI 팀은 아키텍처나 프레임워크 설계에 몰두하고, 실제로 효과를 측정하지 않음
     * 일반적인 대시보드 지표는 도움이 되지 않음
          + 의미 없는 “허영 지표”에 집착
          + 너무 많은 지표로 팀의 집중력 분산
     * 오류 분석은 ROI가 가장 높은 활동
          + 실제 대화 로그를 열람
          + 실패 유형을 분류
          + 해당 문제에 대한 테스트 작성 및 개선 측정
     * NurtureBoss 사례:
          + 날짜 처리 오류 해결
          + 정확도 33% → 95%로 개선
     * 하향식(top-down) 분석보다 상향식(bottom-up) 분석이 더 효과적
          + 실제 데이터를 기반으로 실패 패턴을 도출
          + 간단한 피벗 테이블로도 큰 통찰을 얻을 수 있음

2. 가장 중요한 AI 투자: 단순한 데이터 뷰어

     * 팀이 실제 AI 출력을 쉽게 볼 수 있도록 하는 도구가 가장 중요
          + 오픈 소스 툴보다 도메인에 맞춘 맞춤형 인터페이스가 효과적
          + NurtureBoss는 자체 데이터 뷰어를 통해 빠른 반복 개선을 가능하게 함
     * 좋은 뷰어의 조건:
          + 전체 맥락을 한 화면에 표시
          + 피드백 수집을 쉽게
          + 오픈엔디드 주석 허용
          + 빠른 필터링 및 정렬
          + 단축키 지원으로 사용자 편의 향상
     * FastHTML, MonsterUI 등으로 몇 시간 내 구축 가능
          + 단순한 스프레드시트부터 시작해도 좋음

3. 도메인 전문가에게 프롬프트 권한 부여

     * AI 성능 개선은 오히려 AI를 잘 모르는 전문가가 주도할 때 효과적
     * 프롬프트는 영어 문장이므로 비전문가도 작성 가능
     * 제품 UI에 “관리자 모드”로 통합 프롬프트 환경을 제공하면 반복 학습에 최적화
     * 도메인 전문가와의 커뮤니케이션 팁:
          + 불필요한 기술 용어 제거
          + 예: “RAG 방식” → “AI가 질문에 답하기 위한 맥락을 확보함”
          + 팀 내 소통에서 정확한 언어 사용이 중요한 이유

4. 사용자 없이도 가능한: 합성 데이터로 부트스트랩

     * 사용자 데이터가 없어도 AI 평가 가능
          + LLM이 합성 데이터를 생성할 수 있음
     * 효과적인 합성 데이터를 위한 3가지 차원:
          + 기능 (예: 부동산 검색, 예약 등)
          + 시나리오 (예: 매칭 없음, 다수 매칭 등)
          + 페르소나 (예: 초보 구매자, 투자자 등)
     * 실제 부동산 프로젝트 예시:
          + 시나리오별로 DB를 구성해 합성 쿼리 생성
          + LLM이 사용자 질문을 생성하고 시스템을 테스트
     * 합성 데이터 작성 가이드:
          + 다양한 예제 생성
          + 입력 데이터 중심 생성
          + 시스템 제약 반영
          + 테스트 시나리오 유효성 검증
          + 단순한 케이스부터 점진적으로 확장

5. 평가 시스템에 대한 신뢰 유지

     * 많은 팀이 평가 시스템을 만들고 나중에는 불신으로 인해 무시함
     * 평가 기준이 시간이 지나면서 기준 이동(criteria drift) 되는 것이 일반적
     * 신뢰 유지를 위한 접근법:
          + 이진 평가(pass/fail) 선호: 명확성과 일관성 확보
          + 상세한 크리틱 추가: 정성적인 설명을 통해 맥락 제공
          + 자동 평가와 사람 평가의 정합성 측정
               o 예: Honeycomb 프로젝트에서는 3회 반복 후 LLM 평가와 90% 이상 일치 달성
               o Eugene Yan의 AlignEval 도구 활용 가능
     * 스케일 확장 전략:
          + 사람의 평가를 완전히 없애지 말고, 정보량 많은 샘플 위주로 집중
          + 정기적으로 자동 평가와 사람 판단 비교하여 기준 재조정

6. 기능 중심이 아닌 실험 중심의 AI 로드맵

     * 전통적인 “기능 중심 로드맵”은 AI에 적합하지 않음
     * Hex의 전 AI 책임자 Bryan Bischof의 “능력 퍼널(capability funnel)” 접근법 제안
          + 예: 쿼리 어시스턴트의 퍼널
              1. 쿼리 문법만 맞춤
              2. 오류 없이 실행 가능
              3. 관련 결과 반환
              4. 의도와 일치
              5. 문제를 완전히 해결
     * Eugene Yan의 실험 기반 일정 관리:
          + 데이터 가능성 검토 → 기술 가능성 검토 → 프로토타입 제작 → A/B 테스트
          + 실험의 결과를 경영진과 공유하며, 가능성 없으면 초기 단계에서 전환 결정
     * 실패 공유 문화 조성:
          + 팀 내에서 “실패도 성과”로 공유
          + 반복과 실험을 장려하는 환경 형성

결론 및 핵심 원칙

     * 성공하는 AI 팀은 복잡한 도구보다 측정, 반복, 학습에 집중함
     * 실천해야 할 6가지 원칙:
         1. 데이터를 직접 확인하고 오류 분석 실행
         2. 간단하고 효율적인 도구 제작으로 반복 학습 지원
         3. 도메인 전문가의 참여를 유도하고 권한 부여
         4. 합성 데이터로 초기 평가 시스템 부트스트랩
         5. 이진 평가 + 크리틱 + 정합성 체크로 신뢰 유지
         6. 기능이 아닌 실험 수를 기준으로 로드맵 운영
"
"https://news.hada.io/topic?id=20019","경찰에 요청한 내 차량의 공공 감시 영상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         경찰에 요청한 내 차량의 공공 감시 영상

    경찰관과 도넛 가게

     * 경찰관 두 명이 도넛 가게에 들어오는 장면을 목격함. 그들은 도넛이 아닌 감시 영상 때문에 방문함.

    감시 상태 연구

     * 감시 상태 연구를 통해 공공 감시가 없는 곳을 찾기 어려움을 발견함. 특히 차량 번호판을 읽는 카메라가 많이 사용됨.
     * 기자는 자신의 차량이 얼마나 자주 감시 카메라에 포착되는지 확인하기 위해 15개 법 집행 기관에 정보 공개 요청을 함.
     * 일부 기관은 요청을 거부했지만, 9개 기관은 데이터를 제공함.

    감시 카메라의 위치

     * Flock 카메라는 주로 지역의 주요 출입구에 설치됨. 그러나 모든 카메라가 모든 차량을 포착하지는 않음.
     * 특정 지역에서는 카메라가 없거나 차량 번호판이 가려져 사진이 찍히지 않을 수 있음.

    감시 데이터의 활용

     * Flock 기술은 차량의 특정 특징을 식별하여 ""차량 지문""을 생성함.
     * 이러한 데이터는 범죄 수사에 유용할 수 있지만, 개인의 사생활 침해 우려도 존재함.

    감시 데이터의 법적 문제

     * 감시 데이터가 공공 정보로 간주될 수 있는지에 대한 법적 논쟁이 있음.
     * 경찰이 감시 데이터를 수집하고 공유하는 방식에 대한 투명성이 부족함.

    감시의 윤리적 측면

     * 감시 데이터가 잘못 사용될 가능성에 대한 우려가 있음.
     * 공공 감시 데이터가 개인의 사생활을 침해할 수 있으며, 이에 대한 법적 및 윤리적 논의가 필요함.

    결론

     * 감시 기술의 발전은 개인의 사생활과 공공 안전 사이의 균형을 요구함.
     * 감시 데이터의 사용과 접근에 대한 명확한 규정과 투명성이 필요함.

        Hacker News 의견

     * ANPR/ALPR 시스템이 대규모 감시 체제를 만드는 것이 얼마나 간단한지 놀라움. 영국은 하루에 약 9천만 건의 기록을 생성하는 전국적인 ANPR 시스템을 보유하고 있음. 이 데이터는 다양한 법 집행 기관에 제공됨. 차량 세금 미납과 같은 사소한 위반을 잡아내는 데 매우 효과적임. 번호판 복제가 영국에서 비교적 흔해지고 있음. 이는 누군가가 당신의 차량 신원을 도용하여 경찰의 수사망에 걸릴 수 있음을 의미함
     * TV 프로그램 Elementary의 한 에피소드에서는 Uber와 같은 회사 직원이 추적 장치를 사용하여 승객의 이동 경로를 파악하고 이를 통해 협박하는 이야기가 나옴. 공공 감시는 범죄 예방의 일종으로 여겨지지만, 남용 가능성은 놀라울 정도임
     * 미국에서 ALPR 데이터가 이미 공개된 상황에서, 모든 데이터를 공개적으로 이용할 수 있기를 바람. 경찰, 데이터 브로커, 보험 회사가 볼 수 있다면 나도 볼 수 있어야 함. 대안으로는 사법 감독 하에 데이터를 잠그고, 경찰이 영장을 받도록 해야 함. 개인 추적, 공공 및 사설 감시 카메라 등 모든 감시가 법 집행 기관에만 이용 가능하다면, 대중에게도 공개되어야 함
     * 공공 도로에서 차량을 운전하는 경우 익명성을 기대해서는 안 됨. 이는 많은 책임이 따르므로 주의 깊게 관찰되어야 함. 미국의 도시화에 대한 불만 중 하나임. 이동의 유일한 실질적 옵션이 자동차일 때, 프라이버시가 없음. 모든 사람이 살기 좋은 공공 장소를 옹호하는 것이 중요함
     * 기자들이 번호판 판독기 데이터를 요청하는 것을 본 적이 있음. 이는 익명성의 종말을 의미함. 마스크를 쓰고 걸음걸이를 바꾸고 모든 습관을 바꾸지 않는 한 피할 수 없음. 추적되고 사진 찍히고 분석되며 데이터는 최고 입찰자에게 판매됨
     * 감시가 지속되는 것에 대해 덜 불편할 수 있음. 누군가가 데이터를 볼 때마다 나에게 알리도록 법으로 정하면 좋겠음. 사람들이 데이터를 쉽게 볼 수 있다는 점이 감시에 대해 경계하게 만듦. 사람들이 데이터를 볼 때마다 내가 알게 된다면, 그렇게 많이 보지 않을 것임
     * Flock 카메라에 대해 혼합된 감정을 가짐. 고밀도 쇼핑 센터 주변에 12개 설치는 합리적임. 그러나 동네 입구에 하나 설치는 과도함. 주거 지역에서는 군사적 침입처럼 느껴짐. 주택 소유자는 이미 비디오 초인종, 보안 카메라 등을 선택할 수 있음
     * 다양한 상황에서 ""아무도 그렇게 하지 않을 것""이라고 생각하지만, 사람들이 실제로 그렇게 함을 발견함. ALPR 회사들은 악의적임. 자동차 제조사가 데이터를 판매하거나 대형 매장이 AI를 사용하는 것에 동의하지 않으면 해당 회사에서 구매하지 않으면 됨. 새로운 마을로 이사하는 것은 더 어려움. 한 마을에서는 ALPR을 피할 수 없을 정도임
     * 최근 멕시코에서 BWI를 통해 미국에 입국했을 때 여권을 보여주지 않았음. 카메라로 신원을 확인했을 것으로 추정됨. 국가가 나를 알고 있다는 것을 알게 되어 좋음
     * 개인 서비스로도 이용 가능함. 몇 번의 클릭으로 차량이 미국 전역에서 목격된 위치를 보여주는 도구가 있음. 사설 카메라 네트워크를 통해 차량 번호판만으로 차량이 목격된 모든 시간을 사용자에게 제공함
"
"https://news.hada.io/topic?id=20049","오늘날 평균적인 대학생의 모습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            오늘날 평균적인 대학생의 모습

     * 저자는 Gen X 세대로, 매우 이른 나이에 박사 학위를 취득해 30년 넘게 교수로 재직 중임
     * ""요즘 애들 타령""으로 치부되는 것을 알고 있지만, ""지금 학생들은 정말 예전과 다르며, 이 변화는 주목할 만함""
     * 근무 중인 학교는 미국의 지역 공립 대학으로, 이 대학의 학생들은 거의 모든 면에서 전형적인 평균치에 해당함
          + 진로 목표, 지적 수준, 사회·경제적 배경, 체력 등
          + 후드티와 요가 팬츠를 입고, Buffalo 윙을 좋아하며, Zach Bryan과 Taylor Swift 음악을 들음
          + 이는 비하가 아니라, 대학 교육의 대표적 대상층을 설명하려는 목적임
     * 우수한 철학 전공 학생은 박사 과정이나 로스쿨에 진학하기도 함
          + 학교는 NCAA Division 2 소속이며, 졸업생 중 NFL Saints 팀의 All-Pro 라인맨이 된 경우도 있음
          + 그러나 이러한 예외적인 사례들은 소수이며, 이 글에서 말하고자 하는 대상은 대다수의 '평균적인 학생들' 임

독서 능력의 심각한 저하

     * 오늘날 대부분의 학생들은 기능적 문맹 수준임
          + 기능적 문맹이란, 성인용 소설을 읽고 이해할 수 없는 상태를 의미함
          + 예: Barbara Kingsolver, Colson Whitehead, Richard Powers와 같은 퓰리처 수상 작가의 소설을 끝까지 읽고 의미를 이해할 수 없음
     * 이들은 읽으려는 의지, 어휘력, 집중력이 모두 부족함
          + 예: The Overstory 같은 책을 읽는 일은 철인 3종 경기에 도전하는 수준의 고통과 불가능성으로 여김
          + 시험 문제조차 제대로 읽지 않고 틀리는 경우가 많음
          + 메뉴판 외의 어떤 글도 귀찮고 회피 대상으로 여김
     * 교수 본인이 집필한 교재조차 대부분의 학생이 읽지 않음
          + 생동감 있고 예시 중심으로 작성한 책임에도 읽지 않음
          + 학생들은 가끔 찾아와 ""읽었다""고 말하지만 거짓말이 뻔히 보임
          + 최선의 해석은 ""단어만 훑고 이해 못하고 TikTok으로 돌아간 것""
     * 책값 핑계는 설득력 없음
          + 교재 전체 가격은 $35~$100 사이로 매우 저렴함
          + 읽지 않을 책은 구매할 이유조차 느끼지 못함, ""그냥 구글로 찾지 뭐""라는 태도
     * 상위 전공 수업조차 예외 아님
          + 실존주의 수업에서는 도스토예프스키, 키에르케고르, 니체, 카뮈, 사르트르 같은 철학 원문을 다룸
          + 그럼에도 학생들은 책을 가져오지 않으며, 가지고 있어도 읽지 않음

글쓰기 능력의 붕괴

     * 대부분의 학생들의 글쓰기 수준은 중학교 2학년 수준에 머무름
          + 철자 실수가 심각하고, 문법은 무작위 수준, 어포스트로피를 제대로 쓰면 경사일 정도
     * 더 큰 문제는 창의적 사고에 대한 저항
          + 질문에 대한 대답이 진부한 클리셰에 불과함
     * AI 도구(ChatGPT 등)를 이용한 부정행위(표절) 가 만연함
     * 저자는 이미 ""AI가 학문적 정직성을 어떻게 무너뜨리는가""에서 이 주제를 다룸
     * 이제는 에세이 과제를 아예 낼 수 없는 상황이 되었음
          + 글쓰기를 하지 않으면 문해력과 사고력 모두 약화됨
          + 글쓰기는 정신의 운동이며, 연습이 필요한 활동임에도 그 기회가 사라지고 있음

수학 능력의 약화

     * 저자는 수학 전공자는 아니지만, 수학 교수들의 공통된 우려를 전함
          + 학생들이 점점 기초 수학조차 따라오지 못하고, 노력조차 기울이지 않음
          + 그 결과, 교수들은 시험 난이도를 낮추고 어려운 문제를 줄이는 방향으로 바뀜
     * 예전에는 대학 신입생으로서 자연스럽게 Calculus 1, 2를 들었지만,
          + 요즘은 Pre-Calculus(기초 미적분) 조차 고급 과정으로 간주됨
     * 심리학 통계 수업조차 점차 내용을 희석해야 하는 상황임
     * 저자가 대학원 시절 수강했던 상징 논리학(Logic)은 고급 학부/대학원 공통 수업이었으며, 상당히 깊이 있는 내용이었음
          + 강의는 철학자 Jaegwon Kim이 맡았고,
          + 교재는 W.V. Quine의 Methods of Logic 단 한 권
          + 명제 논리 → 술어 논리, 완비성, 타당성, 콤팩트성 같은 정리를 직접 증명
     * 현재의 평균적인 학생들은 (수학, 컴퓨터공학 전공이 아닌 이상) 이 수업을 감당할 수 없음

무엇이 달라졌는가?

     * 학생들은 예전부터 대학을 단순히 직업을 위한 관문으로 여겨왔음
          + 중산층 수준의 일자리를 얻는 것이 유일한 목표
          + 교수는 그 현실을 받아들이고 지적 자극을 줄 기회를 최대한 제공하려 노력해왔음
     * 그러나 최근 몇 년 사이에 질적으로 다른 변화가 나타남
          + Ted Gioia는 요즘 학생들을 “폰에 중독된 좀비”로 표현
          + Troy Jollimore는 “학생과 함께 지적 여정을 걷는다는 믿음이 무너졌다”고 고백
          + 교육계 전반적으로 전례 없는 무관심과 단절을 체감 중
     * 구체적인 변화들
          + 만성 결석
               o 수업 출석을 아예 선택 사항처럼 여김
               o 통계적으로 학생 한 명당 한 학기에 2주 이상 결석 (공식적 결석 제외)
               o 지각, 사소한 이메일, 책임감 부족이 일상화됨
          + 자취를 감추는 학생들
               o 아무 말 없이 수업을 영영 그만두는 경우 많음
               o 수업 초반에 “오른쪽, 왼쪽 학생 중 한 명은 학기 말에 없을 것”이라 경고해야 할 정도
          + 50분도 집중 못함
               o 수업 중 15분 만에 나가버리는 학생도 있음 (실제 이유는 화장실이 아니라 스마트폰 확인)
               o “수업 전 화장실 다녀오라”는 말도 아무 효과 없음
          + 교수에게 수업 요약 요구
               o 팬데믹 시기 교수들이 보여준 배려를 이제 당연한 권리로 여김
               o 파워포인트 슬라이드 요청, 전체 강의 요약 요구 등 자기 학습의 책임을 교수에게 전가
          + 노트북으로 딴짓
               o 노트북 금지 시 ""학습 보조 서비스""에 요청해 강제로 사용 허용 받음
               o 실제로는 수업 중 도박하거나 SNS 사용 중인 경우도 있음
          + 무관심과 책임 회피
               o 정당한 사유가 있어도 보충 시험, 퀴즈도 참여하지 않음
               o 이미 지난 일은 그냥 포기하는 듯한 태도
          + 폰 중독
               o 수업뿐 아니라 운동 중에도 폰에서 눈을 떼지 못함
               o 심지어 운동 기구 위에 앉아 계속 스크롤만 하며 자리 차지하는 경우도 있음
               o ""이 학생들이 어떻게 기숙사 방(goon cave)을 벗어나는지 신기할 정도""
     * 이 문제는 K-12 교사나 교육 시스템의 잘못이 아님
          + 사회 전체가 변했고, 학생들은 그 영향을 그대로 받고 있음
     * 교수로서 기준을 지키고 모두 낙제시키는 것도 현실적으로 불가능
          + 비정년 교수는 위험 부담 크고, 정년 교수라도 결국 불려가게 됨
          + 학생 절반이 탈락하면 대학의 재정이 붕괴되고, 진짜로 배울 의지가 있는 학생까지 피해를 봄

결론: 슬픔과 체념 속의 교육

     * 교수들은 ""학생 수준에 맞춰라"", ""클래스룸을 뒤집어라"", ""더 재미있게 가르쳐라""는 현실 회피적 해법만 듣고 있음
     * 마치 침몰 중인 타이타닉에서 갑판 의자만 재배치하는 느낌
     * 교수들의 잘못이 아니라, 우리에게 주어진 현실 속에서 최선을 다하는 중

     ""화가 난 게 아님. 그저 슬플 뿐""

     * 교수와 학생은 서로 다른 세대, 다른 세계에 살고 있음
     * 교수는 학문을 신성한 불꽃으로 여긴다 해도, 학생들은 그렇지 않음
     * 우리의 역할은 그 불씨를 심는 것이지만, 요즘은 그 불씨조차 붙지 않음

   비교가 정당한게 맞나요? 글쓴이가 괜찮은 대학의 테뉴어라는 점에서 평균적인 대학생들이 다니는 대학을 학생시절때 경험해 보진 않았을것 같은데요.

   달라진 모습에 대한 판단이 거스를 수 없는 것들이라면,
   대학 교육은 어떻게 이에 맞춰 달라져야 하는 가에 대해서도 고민이 필요할 것 같습니다.

   교육체계 자체가 붕괴했다고 봅니다
   아무 의미가 없는수준으로 붕괴했네요

   교육의 프레임을 완전히 뒤바꿔야 합니다. 대학도 의미가 없는거 같아요.
   그냥 고등학교 2학년부터는 자율공부시켜야 한다고 생각합니다.
   커리큘럼은 의미가 있지만, 실용적이진 못합니다.

   캘리포니아라면 커먼코어라는 교육 방식 아래 공부했을 가능성이 높은데, 이게 약간 문제가 있습니다. 과정과 진도가 제일 수준 낮은 학생에게 맞춰져 있어서 중상위 이상 학생들이라면 딱히 수업을 들을 필요조차 없다고 하더라구요. 특히 인도와 아시아계 학생들은 이미 3년 이상 추월한 상태....

   이런 무기력한 상태는 한곳뿐 아니라 경제, 기술, 교육 모든 곳에서 원인을 찾을 수 있겠죠. 학력 포화 구조, 스마트폰/인터넷 중독, 취업난 등등... 앞으로 어떤 세상이 펼쳐질지 모르겠습니다.

   그게 시대라면 그 시대에 맞춰야겠죠
   취급하는 상품의 수준을 더 단순화 해야겠네요

   상당 부분 동의하는 내용이네요. 특히 이력서 검토할 때, 이런 문제에 대해서 크게 느낍니다.
   또한 지루함을 이겨내는 능력이 많이 결여되었다고도 느끼곤 하는데,
   이윽고, 내가 꼰대인가로 생각이 귀결되더라고요.

   지금 시대의 필독서. 조너선 하이트의 '불안 세대' 추천입니다.
   https://product.kyobobook.co.kr/detail/S000213913660

   Z세대의 스마트폰과 SNS, 숏폼 등 컨텐츠에 영향받은 세대가 대학에 입학할 시기니까 이 분석이 딱 맞는 것 같네요.

        Hacker News 의견

     * 한 줄로 요약하자면, 대학은 거래적 성격을 띠고 있으며, 학생들은 주로 백색 칼라 직업 허가증으로서 학위를 취득함
          + 학생들은 학습보다는 학위를 얻기 위해 대학에 다니며, 이는 주로 좋은 성적을 받는 것으로 이루어짐
          + 많은 학생들이 쉬운 수업이나 교수님을 찾고, 필요하지 않은 편의를 요구하여 시험을 쉽게 보려 함
          + 교수님들은 학생들이 독창적인 생각을 하지 않는다고 불평하지만, 학부 과정에서 독창적인 생각을 하는 것은 어려운 일임
          + 기술을 비난하고 싶지 않지만, 휴대폰과 컴퓨터는 매우 유용한 도구임
          + 미국의 교육과 독서 상태는 비극적이며, 해결책이 없음
     * 대학생들의 평균적인 X 변수의 감소는 대학 진학률 증가로 인한 것일 가능성이 높음
          + 1990년부터 2022년까지 미국의 대학 졸업률이 23.2%에서 39.2%로 증가함
          + 이는 전체 인구의 대학 졸업률을 높이기 위해 하위 퍼센타일의 학생들을 등록하고 졸업시켜야 함을 의미함
     * 많은 교수님들과 이와 같은 대화를 나눴음
          + 부모가 휴대폰 사용을 제한하는 아이들은 그렇지 않은 아이들보다 뛰어난 능력을 보임
          + K-12 교육에서 하루 종일 휴대폰을 전면 금지하는 것이 좋은 출발점이 될 수 있음
     * 글쓰기 교수님으로부터 학생들이 자기중심적이라는 불만을 들었음
          + 교수님은 학생들의 글을 통해 그들의 사고와 성격을 상당히 파악할 수 있었을 것임
     * 최근 학업을 마치고 여전히 조교들과 연락을 하고 있는 입장에서, 출석률과 참여도가 감소하고, 강의와 커리큘럼이 단순화되는 문제가 큼
          + 코로나 이후 큰 변화가 있었고, ChatGPT 시대를 놓쳐서 다행임
          + 강의는 종종 지루하고 질문에 대한 답변은 교과서 페이지를 참조하는 것이었음
          + 녹화된 미디어를 통해 강의의 사용을 재검토해야 할 필요가 있음
     * 교육 시스템과 그 목적이 무너지고 있음
          + 인터넷과 YouTube의 고급 콘텐츠, AI의 등장으로 인해 학습의 목적이 변화하고 있음
          + 학습, 사교, 네트워킹, 보육 등 다양한 목적에 대해 교육보다 더 나은 방법이 존재함
     * 교수님의 강의 노트를 요청하는 것이 상상할 수 없는 일은 아님
          + 대학과 학과에 따라 다르겠지만, 많은 강사들이 강의 전에 강의 자료를 제공함
     * 영국과 프랑스의 동료들과 학점 부여 방식을 비교했을 때 흥미로웠음
          + 영국에서는 교수의 역할이 가르치는 것이 아니라 학생이 스스로 학습할 수 있도록 자료를 제공하는 것임
          + 프랑스에서는 학비가 거의 무료이며, 4년 내에 모든 학생이 졸업하는 것은 큰 손실이라고 생각함

   지금도 다르지 않을 것 같은데요. 국내만 봐도 신입채용은 학벌위주로 뽑고 경험위주가 아니다보니 학벌만 통과하면 생존 OK니까 부모나 학생들도 그정도에서 생각하는 것 같아요. 과거로부터 이력서 볼시간이 제한적이어서 학벌본건데 지금은 LLM이 이력을 더 빠르게 판단 잘할것같은데 어떨까요?

   교재 전체 가격은 $35~$100 사이로 매우 저렴함
   ...? 대학생에게 결코 싼 가격인 것 같지는 않은데요...

   독일에서 대학의 학비는 거의 무료이고(대부분 무료, 몇몇 지역은 아주 저렴한 금액), 입학자의 대략 60-80 퍼센트 이상이 졸업을 하지 못하고 다른 길로 갑니다.
   졸업은 그야말로 공부할 의지가 있는 학생만 가능한거죠.
   저는 이게 맞다고 생각합니다.

   한국도 만약 이렇게 변한다면, 아마 대입시 하나로 인해 비틀린 교육이 다 사라지지 않을까요?

   뭔가 주워들은 걸로 이야기 하시는거 같은데

   입학에 비해 졸업률이 낮은 이유는 전부 퇴학 때문은 아닙니다.
   우리나라는 누군가 대학을 다니다가 다니던 대학교에 자퇴서를 내고 다른 대학, 다른 전공을 하는 경우는 생각보다 흔치 않습니다. 재수해서 좋은 대학을 가겠다는 경우를 제외하고는 보통 입학하면 졸업까지 그냥 무난하게 쭉 다닙니다. 하지만 독일에서는 학생들이 공부하다가 초반 1년 2년 안에 이 학과 공부가 본인이 생각했던 거와 다르다던지 아니면 학과 자체가 본인에게 안 맞는다고 생각해서 그만두고 다른 전공으로 옮겨 대학을 다시 다니는 게 흔한 편입니다. 그렇기에 학생들이 본인의 의지대로 대학을 옮기거나 또는 대학 말고 다른 진로를 선택하는 경우들도 있기 때문에 이 졸업률 수치가 독일 대학 졸업 난이도 수준을 대변해주지는 않습니다.

   또 독일 찬양론자네. 김누리 좋아하시죠?
   한국도 졸업정원제 시행했다가 부작용 심해서 폐지한거 모르시나봐요?

   아이들을 이끄는 부모의 욕망이 가리키고 있는 지점을 틀어야 한다고 생각합니다만.

   20살 이상된 사람은 그 지향점이 바뀌기 어렵죠.

   그리고 그 지점을 무조건 잘못된것으로 바라볼 것인지는 조금 의문이더라구요.

   외눈박이의 세상에서 양눈이는 병신인것이 아닌지 말입니다.
"
"https://news.hada.io/topic?id=20089","Show HN: Nue – React 버튼보다 가벼운 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show HN: Nue – React 버튼보다 가벼운 앱

     * Nue 는 Standard-First 웹 프레임워크
     * 이번 릴리스에서는 HTML, CSS, JS와 같은 최신 웹 표준을 최대한 활용하여 전체 앱(38kb)이 React/ShadCN 버튼(73kb)보다 가벼움
     * Large-Scale도 지원 : 기존과 동일한 앱에 Rust 계산 엔진과 EventSourcing을 추가하여 150,000개 이상의 레코드에 대한 즉각적인 검색 및 기타 작업을 수행함
          + Rust/WASM을 통해 150,000개 레코드에 대한 빠른 검색 및 작업 가능
     * Nue는 HMR 및 빌드 속도 기록을 경신하며, VSCode/Sublime 파일 저장 작업에 밀리초 피드백 루프를 제공함
          + 디자인 및 구성 요소 업데이트에 즉각적인 피드백을 제공하며 앱 상태를 유지

Rust, Go, JS 엔지니어를 위한 변화

     * React 관습에 얽매이지 않고, 모듈식 디자인과 간단하고 테스트 가능한 함수, 진정한 정적 타이핑, 최소한의 종속성을 제공하는 모델 우선 접근 방식을 강조함
     * 시스템 개발자들이 분리된 모델 레이어에서 자신의 기술을 발휘할 수 있는 자유로운 경험을 제공함

디자인 엔지니어를 위한 변화

     * React 패턴과 40,000개 이상의 라인 디자인 시스템에 얽매인 디자인 엔지니어들에게 중요한 변화임
     * 현대 CSS(@layers, 변수, calc())를 사용하여 보다 간단한 시스템을 구축하고 타이포그래피와 여백을 제어할 수 있음

UX 엔지니어를 위한 변화

     * React 훅과 유틸리티 클래스에 얽매인 UX 엔지니어들에게 경각심을 주며, 사용자 경험을 소유할 수 있도록 함
     * React 버튼만큼 가벼운 앱을 구축하여 웹과 자신의 기술을 발전시킬 수 있음

FAQ: Nue란 무엇인가?

     * Nue는 웹 표준에 중점을 둔 웹 프레임워크로, 현재 활발히 개발 중임
     * 단일 버튼이 전체 애플리케이션보다 무거운 상황에서, Nue는 숨겨진 복잡성을 드러내고자 함
     * Nue는 도구와 프레임워크를 더 깨끗하고 견고한 아키텍처로 재구축하여 웹 개발의 즐거움을 되찾고자 함

다음 단계

     * 개발자 경험을 세 가지 뚜렷한 단계로 개선할 예정임
     * 메일링 리스트에 가입하여 진행 상황을 팔로우하고 비전이 어떻게 펼쳐지는지 확인할 수 있음

   Nue - Standard-First 웹 프레임워크

        Hacker News 의견

     * 많은 사람들이 ""Nue""에 대해 화를 내고 있는 것을 보며, React에 크게 의존하고 있는 사람들이 전체적인 문제를 놓치고 있다고 생각함. 이러한 대규모 프레임워크가 웹을 느리고 복잡하게 만들었음. DevOps/SRE로서 매일 이러한 서비스를 다루며, 10초 이내에 첫 로드를 하는 것을 찾는 것이 거의 불가능함. 간단한 홈 페이지 대시보드나 노트 페이지가 10G 연결에서 10초 이상 걸릴 때, 이는 현재의 웹앱이 빠른 브라우저 엔진과 기대치가 낮은 사람들에 의해만 지원되는 엄청난 비대 상태에 도달했음을 의미함
     * Nue가 이를 혁신할 것이라고는 기대하지 않지만, 적어도 그들을 응원할 수 있음
     * React를 대체하는 것은 초기 Angular 2.0과 유사한 비타입 뷰 레이어임. 모델 파일은 순수 자바스크립트임. Vue.js 사용자층을 겨냥한 것 같음. 대부분의 React 사용자는 이제 TypeScript를 사용함
     * Svelte를 선택하고 SvelteKit에 투자했음. 꽤 큰 앱을 작성했으며 나중에 React를 다시 보았음. React는 훅을 이해하면 그리 어렵지 않음. 내 사용 사례에서는 React도 가벼움. React는 이제 지루한 기술이지만 이는 좋은 것임. 생태계가 거대함. React Query 같은 라이브러리를 가질 수 없음
     * React 컴파일러가 Facebook과 Instagram에서 사용되고 있으며, 공개 베타로 출시됨. React Native도 React 컴파일러를 지원함
     * 기술적 세부사항이 부족함. 예를 들어, 어떤 변경 추적 방법이 사용되는지 궁금함. 150,000개의 객체로 인해 JS 스택이 넘친다는 표현을 이해하지 못했음. JS는 그렇게 느리지 않음
     * Nue는 현대 웹 개발의 비대함을 해결하기 위해 만들어진 웹 프레임워크임. Vite/ShadCN/Tailwind 버튼이 완전한 SPA보다 40% 더 무거울 때, 다른 방식으로 접근해야 함. 웹 표준을 우선으로 하며, 비대함이 없음
     * 대부분의 새로운 프레임워크는 당시의 더 성숙한 옵션에 비해 ""경량"" 옵션으로 시작함. 10년 후에 여전히 React 버튼보다 가볍다면 뉴스 가치가 있을 것임
     * 프로젝트를 보며, React로도 같은 성능의 웹앱을 만들 수 있다고 생각함. Nue가 HTML+JS보다 간단한지, 이해하기 쉬운지, 더 나은 개발자 경험을 제공하는지, 기술적으로 더 나은지 보여주길 바람
     * 큰 프레임워크가 웹을 느리게 만드는 것이 아님. 실제 문제는 개발자가 최적화할 수 없고, React 없이 프로그래밍할 수 없는 것임. 깊이 파고들지 못하면 최적화도 할 수 없음
     * React 라이브러리를 포함하지 않으면 React 버튼이 작동하지 않는다는 주장은 약함. React 라이브러리는 앱 번들의 다른 부분에서 재사용될 것임
     * 인기 있는 웹 프레임워크의 ""무거움""에 대한 논의는 너무 단순함. 앱이 가볍거나 무겁게 느껴지는 것은 초기 번들 크기보다 개발자가 분산 시스템 문제를 얼마나 잘 해결했는지에 더 관련이 있음. React로 작성된 웹사이트가 더 느리게 보이는 경우가 많음. 이는 React가 인기가 많아 중요한 세부사항을 놓치는 개발자가 많기 때문임.
"
"https://news.hada.io/topic?id=20092","OpenAI Academy - 무료 AI 교육 사이트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenAI Academy - 무료 AI 교육 사이트 공개

     * OpenAI Academy는 AI의 변화력을 실질적으로 활용할 수 있도록 워크숍, 토론, 디지털 콘텐츠를 통해 지원함
     * 초급부터 고급 엔지니어링 통합까지 다양한 수준의 교육 콘텐츠 제공
     * 온라인과 오프라인을 병행한 이벤트 운영을 통해 다양한 배경을 가진 사람들이 참여할 수 있는 협력적인 커뮤니티 조성
     * OpenAI 전문가 및 외부 혁신가들과 함께 실제 AI 활용 사례와 최신 산업 동향을 탐구할 수 있는 기회 제공. 커리큘럼은 단순 이론이 아닌 실전 중심의 학습에 초점이 맞춰짐
     * 동료, 혁신가, 산업 리더들과의 교류를 통해 실질적인 인맥 형성과 협업 가능. 커뮤니티 중심의 프로젝트와 토론을 통해 상호 학습 촉진
     * 주요 기능
          + 이벤트 : 가상 또는 오프라인 모임을 통해 학습, 네트워킹, 전문가와의 협업 가능
          + 지식 허브 : 기초 개념부터 고급 콘텐츠까지 다루는 짧은 영상, 튜토리얼, 자료 제공
          + 커뮤니티 그룹 : 관심사 또는 지역 기반으로 구성된 그룹에서 토론과 공동 학습 가능
          + 연결 기능 : 회원 간 메시지를 주고받으며 아이디어를 교환하고 네트워크 확장 가능

FAQ

     * OpenAI의 미션은 무엇인가요?
       인류 전체에 도움이 되는 AI 개발이 목표임. 사람들을 돕고, 어려운 문제를 해결하며, 공동체 발전을 위한 AI 도구를 만드는 것이 목적임
     * OpenAI Academy가 만들어진 이유는 무엇인가요?
       AI 지식에 대한 접근성을 넓히기 위해 설립됨. 누구나 자신 있게 AI를 삶과 업무, 공동체에 통합할 수 있도록 지원하는 것이 목표
     * 누구나 참여할 수 있나요?
       예, 모든 사람에게 무료로 개방됨. 단, 일부 전문 커뮤니티 그룹은 초대나 추천이 필요할 수 있음
     * 수료증이나 자격증을 제공하나요?
       현재는 제공하지 않음. 실용적이고 접근하기 쉬운 학습 경험에 중점을 두고 있음
     * 어떤 언어로 제공되나요?
       현재는 영어로 운영되며, 향후 더 많은 언어로 확장 예정임
     * 내 지역에서 OpenAI Academy를 주최할 수 있나요?
       예, 세계 각지에서 열정 있는 주최자를 찾고 있음. 대학, 커뮤니티 그룹 등 AI 확산에 관심 있는 단체라면 academy@openai.com 으로 연락 가능
     * 지역 이벤트는 어디서 확인하나요?
       Academy에 가입 후 왼쪽 메뉴의 Events 섹션에서 온라인 및 오프라인 모임 일정 확인 가능
     * 지역 이벤트는 어디에서 열리나요?
       미국에서 프로그램을 먼저 시작하며, 전 세계로 확장 예정임
"
"https://news.hada.io/topic?id=20111","CERN 과학자들이 양(Sheep)에서 양자 얽힘의 증거를 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CERN 과학자들이 양(Sheep)에서 양자 얽힘의 증거를 발견

     * CERN의 양 떼는 40년 넘게 봄과 여름 동안 CERN 부지를 돌아다니며, LHC 주변의 초원을 유지하고 생물 다양성을 보호하는 데 기여함.
     * 양의 무리 행동은 입자처럼 행동하는 것으로 알려져 있으며, 이는 물리학자와 동물학자 모두에게 흥미로운 연구 주제임.
     * 새로운 연구에 따르면, CERN의 과학자들은 양의 뇌가 양자 얽힘 상태에 있다는 증거를 발견했음.
     * 이 연구는 양의 무리 행동이 양자 효과에 의해 설명될 수 있음을 시사하며, 이는 양 연구에 새로운 지평을 열어줌.
     * 연구 방법과 발견
     * 연구팀은 양의 행동을 입자처럼 모델링하기 위해 정교한 추적 장치와 모델링 기법을 사용함.
     * 양의 뇌에서 얽힘을 일으키는 입자를 ""moutons""라 명명하고, 이는 뮤온과 유사한 렙톤임.
     * 발견의 통계적 유의성은 4 시그마로, 이는 현상의 증거를 보여주지만 관찰로 분류되기에는 부족함.
     * 추가 연구 필요성
     * HERD 협력의 대변인 Ewen Woolly는 더 많은 연구가 필요하다고 언급하며, 연구가 물리학자들을 졸리게 만든다고 함.
     * CERN 이론가 Dolly Shepherd는 얽힘이 주요 이론이지만, 다른 변수도 고려해야 한다고 강조함.
     * 양자 과학과 기술의 해
     * 2025년은 유엔이 지정한 국제 양자 과학 및 기술의 해로, CERN은 여러 양자 테마의 공개 이벤트에 참여하고 있음.

   만우절 4일째

        Hacker News 의견

     * 이 글이 왜 출판 가치가 있는지 잘 모르겠음. 양과 상호작용한 사람에게는 흔한 지식임
     * 양을 뒤집고 간지럽히면 양의 웃음소리를 50% 확률로 들을 수 있음. 나머지 50%는 다른 쪽에서 들림
     * 어떤 양을 간지럽혔는지 확실히 알 수 없기 때문임. 양들은 구별할 수 없는 간지러움이 있음
     * 아, 오늘은 쓸모없는 인터넷의 날인 것 같음. 내일 다시 만나요
     * 새로운 양자 물리학의 기준을 설정함
     * 몇 단락을 읽고 나서야 이해가 됐음
     * CERN의 양이 대표적이지 않을 수 있음. 방사선과 입자 가속기 등의 기계에 노출되었을 수 있음
     * 일반적인 결론을 내리려면 가속되지 않은 양과 비교해야 함
     * 섬유 전문가가 아니지만, 표준 모델의 뜨개질 라그랑지안인가?
     * 오늘은 만우절임
     * 구체적으로는 구형 양임. OP를 읽어보세요
     * 아마도 구형 소와 관련이 있을 것임
     * 내가 본 최고의 만우절 기사라고 생각함
     * 황제 펭귄의 군집에서의 상전이 (2019년 5월 31일)
     * 'Lamb Shift'. 너무 웃김
"
"https://news.hada.io/topic?id=20045","내 Vizio TV가 저절로 전체 화면으로 비디오를 재생하기 시작했습니다. 무슨 일이 일어난 것인가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       내 Vizio TV가 저절로 전체 화면으로 비디오를 재생하기 시작했습니다. 무슨 일이 일어난 것인가요?

VIZIO TV의 Scenic Mode (풍경 모드) 기능 안내

     * Scenic Mode는 TV가 일정 시간 동안 사용되지 않으면 자동으로 전체 화면에서 자연 풍경 영상을 재생하는 무료 기능임
     * 사용자의 집이나 사무실 공간에 편안한 분위기를 제공하는 것이 목적임

광고와 관련된 사항

     * Scenic Mode가 전체 화면으로 전환된 후에는 광고가 표시될 수 있음
     * 광고를 통해 WatchFree+의 300개 이상의 라이브 채널과 15,000편 이상의 콘텐츠를 무료로 제공하고 TV 가격도 저렴하게 유지 가능함
     * 광고를 끌 수는 없음, 현재는 지원하지 않음

Scenic Mode에서 시청한 채널 다시 찾기

     * WatchFree+를 열고 리모컨의 OK 또는 중앙 버튼을 눌러 카테고리 보기 > Mood + Ambiance에서 해당 채널을 찾을 수 있음
     * 최근 시청한 채널 중 하나였다면 ‘최근 채널’ 목록에서도 확인 가능함

Scenic Mode 설정 변경 방법

     * 소리 설정: VIZIO 홈 > Settings > Extras > Home Page Settings > Scenic Mode > Volume On 또는 Volume Off 선택
     * 기능 끄기: 같은 메뉴에서 Disable 선택 시 Scenic Mode 완전히 비활성화됨
     * 다시 켜기: Disable 체크 해제하면 기능 재활성화 가능

소리만 끄는 방법

     * VIZIO 홈 > Settings > Extras > Home Page Settings > Scenic Mode > Volume Off 선택
     * 체크 표시로 설정이 저장되었는지 확인 가능

일시적으로 Scenic Mode 실행 방지하는 방법

     * VIZIO 홈 화면에서 다른 행으로 한 번 아래로 이동하면 자동 재생 멈춤
     * 이렇게 하면 Scenic Mode로의 전환을 일시적으로 방지 가능함

Scenic Mode 종료 및 다시 실행

     * 종료: 리모컨의 BACK 버튼을 누르면 즉시 종료되며, 해당 세션 동안 재실행되지 않음
     * 다시 실행: WatchFree+ 실행 후 홈 화면으로 돌아오면 새로운 세션이 시작되어 Scenic Mode 다시 실행 가능

TV 업데이트 및 기능 유지

     * Scenic Mode를 꺼놨더라도 펌웨어 업데이트 시 다시 켜지지 않음
     * 2020년 이후 출시된 모든 VIZIO Smart TV 및 대부분의 2018~2019년 모델은 이 기능이 포함됨
     * 인터넷에 연결되어 있으면 자동 업데이트로 기능이 추가됨

WatchFree+ 접속 방법 (Scenic Mode 없이도 가능)

     * VIZIO 홈 > 앱 행에서 WatchFree+ 아이콘 선택
     * 왼쪽 메뉴에서 Live TV 선택
     * VIZIO 리모컨의 WatchFree+ 버튼 사용
     * VIZIO 모바일 앱의 ‘Apps’에서 WatchFree+ 아이콘 클릭 (TV와 연동 필요)
     * 입력 소스에서 WatchFree+ 또는 안테나 선택

콘텐츠 선택 가능 여부

     * 현재는 자연 풍경 중심의 콘텐츠만 제공됨
     * 향후 더 다양한 콘텐츠로 확장 예정
     * WatchFree+의 Mood & Ambiance 카테고리에서 유사 콘텐츠 탐색 가능

Scenic Mode 자동 실행 조건

     * 홈 화면의 상단 콘텐츠 행이 4번 회전하고 아무 활동이 없을 경우 자동 실행됨
     * 리모컨 사용 등으로 활동 시 타이머가 초기화됨

Scenic Mode 유료 여부

     * Scenic Mode는 무료 기능이며, VIZIO는 지속적으로 Smart TV의 기능을 향상시키는 것을 목표로 함

        Hacker News 의견

     * Vizio가 사용자 시청 습관을 모니터링한다는 사실이 알려진 이후로 Vizio 제품을 구매하지 않기로 했음
          + Scenic Mode에서 광고가 나오는 이유는 무료 콘텐츠 제공을 위한 것임
          + Scenic Mode 광고는 현재 끌 수 없으며, 이는 Vizio가 무료로 다양한 기능을 제공하기 위한 것임
     * 스마트 TV를 인터넷에 연결하지 않으려면 무선 모듈을 완전히 분리할 수 있음
          + Sony Bravia TV의 무선 모듈을 분리한 경험이 있음
     * FAQ에서 Scenic Mode 광고를 끌 수 없다고 하지만, 사실은 Scenic Mode 자체를 끌 수 있음
          + 설정에서 Scenic Mode를 비활성화할 수 있는 방법이 있음
     * 스마트 TV를 구매하지 않기로 했으며, 대신 큰 모니터와 작은 Linux 박스를 사용할 계획임
          + 광고 없이 TV를 판매할 수 없는 상황에 실망함
          + 책, 비닐, 보드 게임 등으로 돌아가기로 했음
     * 사람들이 여전히 이런 기기를 구매하는 것이 안타까움
          + 새로운 기기를 구매할 때마다 스파이 행위와 광고에 대한 두려움이 있음
          + 결국 이런 기기를 구매해야 할 상황이 올 것임
          + 데이터 전송을 방해하는 것이 불법인지 궁금함
     * 소비자 중심의 'DUMB' 인증이 필요하다고 생각함
          + ""Don't Upload My Bits""라는 의미임
     * 이 상황은 정말로 디스토피아적임
          + FAQ가 실망스러움
          + Scenic Mode는 무료이며, Vizio의 목표는 스마트 TV를 더 나은 제품으로 만드는 것임
     * Sony Bravia TV가 비슷한 일을 했을 때, PS5의 스트리밍 서비스 때문이었음
          + 광고 없는 Netflix를 사용 중이며, 가끔 제어하려는 시도가 있지만 참을 만함
     * Scenic Mode는 필수 기능이 아니며 끌 수 있음
          + 미국의 TV 가격이 중국보다 저렴하며, 이는 수익 기회 때문일 가능성이 있음
"
"https://news.hada.io/topic?id=20020","파이썬으로 살펴보는 아키텍처 패턴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           파이썬으로 살펴보는 아키텍처 패턴

     * ""TDD with Python"" 저자 Harry와 소프트웨어 아키텍트 Bob이 복잡한 소프트웨어 아키텍처를 이해하고 관리하는 방법을 설명한 책
     * 이커머스 회사에서 실제 사용한 아키텍처 기법들을 정리하여 공유함
     * MADE.com은 유럽 기반의 온라인 가구 판매 회사로, 글로벌 공급망을 운영
          + 물류 최적화를 통해 재고를 최소화하고, 소비자 주문과 동시에 물류가 도착하도록 조율하는 것이 목표임
     * 하지만 실제 세계는 복잡하고 예측 불가능하므로, 이를 반영한 지능적인 소프트웨어를 구축하여 자동화하고 있음
     * 이 책은 그런 실전 문제들을 해결하기 위해 고안된 아키텍처 패턴들을 다룸

왜 Python인가

     * Python은 세계적으로 빠르게 성장하고 있는 언어이며 점점 더 복잡한 엔터프라이즈 문제에 도전하고 있음
     * 기존의 아키텍처 책들은 대부분 Java나 C# 기반 예제를 사용하고 있어 Python 사용자에게는 접근이 어려움
     * 이 책은 Python 커뮤니티에 적합한 방식으로 클래식 아키텍처 패턴들을 소개함

TDD, DDD, 이벤트 기반 아키텍처 소개

     * TDD (Test-Driven Development):
          + 테스트 우선 개발은 안정적인 리팩토링과 기능 추가를 가능하게 함
          + 빠르고 의존성 없는 단위 테스트를 우선하고, 느리고 불안정한 end-to-end 테스트는 최소화해야 함
     * DDD (Domain-Driven Design):
          + 비즈니스 도메인 모델에 집중하지만, 인프라와 프레임워크 의존도를 줄이는 것이 중요함
     * 이벤트 기반 아키텍처:
          + 마이크로서비스 간 메시지 기반 통신으로 복잡성을 관리
          + Flask, Django, Celery 등 기존 Python 도구들과 어떻게 통합할지에 대한 고민이 필요함

     참고: 이 책에서 다루는 패턴 대부분은 모놀리식 아키텍처에도 적용 가능함

     * 이 책의 목적은 Python에서 TDD, DDD, 이벤트 기반 서비스를 지원하는 아키텍처 패턴을 소개하고 적용 방법을 제시하는 것임

이 책의 대상 독자

     * 복잡한 Python 애플리케이션을 다뤄 본 경험이 있는 개발자
     * 아키텍처 패턴이나 DDD에 대한 배경 지식이 없어도 괜찮음
     * 테스트를 먼저 작성하고 구현하는 TDD 스타일에 익숙하지 않아도 따라갈 수 있도록 구성함
     * Flask, SQLAlchemy, pytest, Docker, Redis 등을 사용하지만 필수 지식은 아님
     * 특정 기술이 아닌, 기술 독립적인 아키텍처 설계를 목표로 함

학습 내용 개요

  Part 1

     * 도메인 모델링과 DDD (1, 2, 7장)
          + 도메인 모델을 외부 의존성 없이 구축하는 방법 소개
          + 빠른 단위 테스트 작성법 및 데이터 무결성과의 관계 고려
          + 적절한 Aggregate 선택 방법 설명
     * Repository, Service Layer, Unit of Work 패턴 (2, 4, 5장)
          + 영속성 계층을 추상화하여 모델을 외부 의존성에서 분리
          + 시스템 진입점으로서의 서비스 계층 설계
          + Flask API나 CLI 같은 얇은 진입점 구축에 적합함
     * 테스트와 추상화에 대한 고찰 (3, 5장)
          + 적절한 추상화 계층을 선택하는 기준과 역할 탐구
          + 높은 추상화 수준에서 단위 테스트를 작성해 테스트 피라미드 달성

  Part 2

     * 이벤트 기반 아키텍처 (8–11장)
          + Domain Events, Message Bus, Handler 패턴 소개
          + 이벤트를 통해 시스템 내 상호작용을 트리거함
          + 이벤트를 이용한 마이크로서비스 간 통합 방법 설명
          + 명령(command)과 이벤트(event)의 차이 구분
          + 전체 애플리케이션이 메시지 처리 시스템으로 전환됨
     * CQRS (Command-Query Responsibility Segregation) (12장)
          + 명령과 조회 책임 분리를 통한 구조적 효율성 소개
          + 이벤트 사용 유무에 따른 구현 예시 포함
     * 의존성 주입 (13장)
          + 명시적/암시적 의존성 정리
          + 간단한 의존성 주입 프레임워크 구현

  부록 및 실습 가이드

     * 기존 프로젝트에 적용하는 방법 (에필로그)
          + 단순한 예제보다 기존 시스템에 패턴을 적용하는 것이 어려움
          + 이를 위한 적용 전략과 참고 자료 제공
     * 코드 실습 및 GitHub 예제
          + 책의 모든 내용을 하나의 예제 프로젝트로 구성
          + 각 장마다 GitHub 브랜치로 코드 제공
          + 실습 방식:
               o 직접 예제 앱을 따라 구현
               o 자신의 프로젝트에 패턴을 적용해 보기
               o 각 장의 ""Exercise for the Reader"" 활용하여 연습 코드 작성

     팁: 각 장의 시작 부분에서 GitHub의 해당 브랜치를 checkout하여 실제 작동하는 코드와 함께 학습하는 것을 추천함

        Hacker News 의견

     * 이 책은 아키텍처 패턴에 대한 금광과 같음. 주제를 쉽게 이해할 수 있는 점이 마음에 듦
          + 하지만 실무적으로는 이러한 패턴들이 복잡성과 성능 문제를 야기할 수 있음. 특히 Django 같은 이미 의견이 강한 프레임워크를 사용할 때
          + 큰 회사와 작은 회사에서 Python을 사용해 본 경험이 있음. 엄격한 아키텍처 패턴을 사용하는 큰 회사들은 코드가 ""깨끗""하지만 너무 복잡하고 느림
          + 반면, 패턴을 무시한 큰 회사들은 코드가 정말 지저분하지만 생산성이 높았음. 코드가 지저분해도 읽고 이해하고 수정할 수 있었음
          + 이는 나 자신에 대한 이야기일 수도 있지만, 나는 비정형 코드 회사에서 더 생산적이었음. 깨끗한 코드에 대한 논쟁을 피할 수 있었음
     * 이 책의 일부는 매우 유용함. 특히 Python이나 특정 언어에 국한되지 않은 개념을 다룰 때
          + 하지만 다른 부분에서는 문제가 있음. 경험이 부족한 개발자가 모든 것을 한 번에 구현하려고 할 때 위험할 수 있음
          + 예를 들어, 리포지토리 패턴은 일반적으로 유용하지만, 책의 예시를 포함해 많은 경우에 복잡성을 더할 뿐임
          + 서비스 레이어와 작업 단위는 복잡한 애플리케이션에 유용하지만, 작은 서비스로 구성된 시스템에서는 과도하게 비대해질 수 있음
          + 디자인 패턴은 다른 도구와 마찬가지로 언제 사용해야 하고 언제 사용하지 말아야 하는지 이해해야 함. 이 책은 이에 대한 조언을 제공하지만, 더 강조되어야 함
     * Python을 좋은 접착제 언어로 봄
          + 강제된 OOP 사고방식에 지침. 모든 것에 캡슐화와 상속을 강요하는 것에 지침
          + SOLID, 깨끗한 코딩, 깨끗한 아키텍처, GoF 패턴, Uncle Bob에 지침
          + 명령형 또는 함수형 흐름을 따르며 가능한 한 적은 OOP를 사용함
          + Python을 사용할 때 객체와 패턴이 없는 경험을 원함
          + 이 책이 가치가 없다는 것이 아님. 패턴을 배우는 데 유용함. 하지만 모든 것을 실제 프로그래밍에 맞추지 말아야 함
     * 나는 Typescript 개발자지만 이 책은 내가 가장 좋아하는 아키텍처 책 중 하나임. 항상 참고함
          + 테스트를 위한 가짜 작업 단위/서비스 패턴을 종교적으로 사용함. 제3자 서비스를 가짜로 만드는 데 도움을 줌
          + 이벤트를 도메인에 특화된 방식으로 명명하는 것을 추천함. 이는 팀원에게 설명하기 번거로운 부분을 해결함
          + Cosmic Python이 온라인에 완전히 공개되어 있어 링크하기 쉬움. 전반적으로 훌륭하고 형성적인 자원임
     * 몇 년 전부터 Python을 전문적으로 작성하기 시작함. Kotlin과 TypeScript에서 왔으며, 언어가 접근하기 쉬웠지만 느슨한 결합과 테스트 가능성을 달성하는 데 어려움을 겪었음
          + 동료의 추천으로 이 책을 구입하고 처음부터 끝까지 읽음. 복잡한 Python 코드베이스에서 복잡성을 관리하는 방법을 이해하는 데 도움이 되었음
          + 모든 패턴을 따르지는 않지만, 가능성과 다른 패러다임의 경험을 Python에 적용하는 방법을 알게 됨
          + 강력히 추천함. 가치가 있음
     * 정말 훌륭한 Python 프로그래밍 책 중 하나임. 코드에 정적 타이핑이 없다는 점이 아쉬웠지만, 이는 저자의 의도적인 결정이었음
     * 훌륭한 자료 공유에 감사함
     * 이 책의 페이퍼백을 2년 반 또는 3년 전에 읽었음. 매우 즐거웠음. 테스트를 일급 주제로 유지하고 각 추가 사항과 함께 지속적으로 업데이트함
          + 테스트가 준비되고 작성하기 쉽고 업데이트하기 쉬운 것이 개발 과정을 더 즐겁게 만듦. 수동으로 코드를 실행하여 문제를 확인하는 것이 덜 필요함
          + 이벤트 지향 부분이 흥미로웠지만 현재 작업에서 구현하기에는 실용적이지 않았음
     * Polylith에 대한 언급이 없음. 관련이 있는지 궁금함
     * 이 책은 훌륭한 읽을거리였음. 3년 전 C#/.NET DDD 환경에서 일했으며, 이제 Python에서 이러한 개념을 다시 방문하면서 본질적인 부분을 정제함
          + 이와 같은 주제에 관심이 있다면 강력히 추천함

   한글판으로 나와있습니다 파이썬으로 살펴보는 아키텍처 패턴
"
"https://news.hada.io/topic?id=20113","Plan 9에 Tailscale 포팅 작업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Plan 9에 Tailscale 포팅 작업

Tailscale의 Plan 9 포팅

     * 소개
          + Tailscale이 Plan 9에서 작동하게 되었음. 이는 4월 1일의 농담이 아닌 실제 사실임.
          + Plan 9에 Tailscale을 포팅하는 과정에서 여러 기술적 도전과 해결책이 있었음.
     * Plan 9에 대한 이해
          + Plan 9는 독특한 운영체제로, Tailscale을 포팅하는 과정에서 여러 가지 새로운 것을 배울 수 있었음.
          + Go 컴파일러의 Plan 9 지원이 시간이 지나면서 문제가 생겼고, 이를 해결하기 위해 많은 노력이 필요했음.
     * 기술적 도전
          + Plan 9의 SSE 지원 문제를 해결하기 위해 커널 수정이 필요했음.
          + IPC 문제로 인해 메모리 오류가 발생했으며, 이를 해결하기 위해 localhost TCP를 사용함.
          + 개발 환경을 개선하기 위해 Russ Cox가 Plan 9 소스 코드와 사전 컴파일된 바이너리를 제공하는 GitHub 저장소를 생성함.
     * 네트워킹 및 라우팅
          + Tailscale의 ""userspace networking"" 모드로 Plan 9에서 작동하게 되었으나, 이는 이상적인 해결책은 아님.
          + Plan 9의 네트워크 경로를 조작하여 라우팅 테이블을 구현함.
     * 추가 기능 및 개선
          + Tailscale SSH 지원을 추가하여 SSH 서버가 Tailscale의 ID를 사용해 인증하도록 함.
          + MagicDNS 기능을 구현하여 Plan 9에서 Tailscale 네트워크의 피어를 쉽게 참조할 수 있도록 함.
          + Plan 9의 시간 문제를 해결하여 gVisor의 netstack에서 발생하는 충돌을 방지함.
     * 미래 방향
          + Plan 9의 다른 포크(9legacy, 9front)에서도 Tailscale이 작동하도록 테스트가 필요함.
          + 64비트 지원 및 추가 기능 구현이 필요함.
     * 결론
          + Tailscale의 Plan 9 포팅은 재미있고 교육적인 경험이었으며, Go의 Plan 9 지원을 개선하는 데 기여했음.
          + 이 프로젝트는 Plan 9 커뮤니티가 이어받아 발전시킬 수 있기를 기대함.

        Hacker News 의견

     * 질문이 있으면 언제든지 답변할 준비가 되어 있음
     * 여러 명이 현재 Google Meet에서 이 주제에 대해 대화 중이었음 (시간이 지나 모두 떠남)
     * 이전 4월 1일 블로그 게시물은 Tailscale의 농담에 관한 것임
     * Russ Cox가 이 농담에 헌신한 것은 전설적임
     * 첫 게시물을 놓쳤다면, v86 이미지에서 시도해볼 수 있음
     * VM 안에서 tailscaled와 tailscale을 시작할 수 있음. 제한된 프록시 가용성으로 인해 온라인 상태가 되기까지 시간이 걸릴 수 있음
     * 터미널을 시작하려면 alt를 누르고 오른쪽 클릭 후 새로 만들기를 선택하고 alt를 놓은 후 오른쪽 클릭 드래그로 터미널 창 크기를 조절할 수 있음
     * Plan 9의 엔터프라이즈 버전이 있었으면 좋겠다는 생각을 진지하게 하고 있음. 대부분의 스크립트를 rc로 작성하고 있으며, 이는 동료들이 nix를 사용하기 때문에 자동으로 dirnev로 가져올 수 있어 괜찮음
     * Google Meet에서 웨비나 진행 중
     * 농담의 전제가 마음에 들었지만 설명이 계속되면서 갑자기 우울해짐. 너무 많은 복잡성과 깨진 것들이 많음. 네트워크 터널을 만들기 위해 이렇게 많은 추가 작업이 농담이었다면 재미있었을 것임
     * Plan 9 커널을 패치하여 작동하게 만든 것은 예상치 못한 일이었음
     * Plan 9을 사랑함. 많은 원칙을 사용하여 나만의 운영체제를 만드는 것이 은퇴 프로젝트의 목표임
     * 이 프로젝트를 위해 ""chaos10""이라는 이름을 예약함. SerenityOS처럼 계획이 없을 것임
     * Plan 9이 브라우저보다 먼저 Tailscale을 얻음. 이것이 어떻게든 말이 됨
     * Rob Pike는 이 충격적인 배신에 망연자실함
"
"https://news.hada.io/topic?id=20084","Go 애플리케이션 성능 최적화 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Go 애플리케이션 성능 최적화 가이드

Go 애플리케이션 성능 최적화 가이드

     * 고성능 Go 애플리케이션 개발을 위한 기술 자료 모음
     * 고성능 API, 마이크로서비스, 분산 시스템을 개발하는 엔지니어를 대상으로 실용적인 패턴과 사례, 저수준 성능 인사이트를 제공
     * Go는 C++이나 Rust처럼 많은 성능 조정 옵션을 제공하진 않지만, 메모리 재사용, 할당 제어, 효율적인 네트워킹 및 동시성 처리 등 여러 최적화 기회를 제공함
     * 이 가이드는 측정 가능한 성능 개선 기법에 초점을 맞추며, 핵심 언어 기능부터 고급 네트워킹 전략까지 다룸

현재까지 다룬 내용

  공통적인 Go 성능 패턴

     * 모든 Go 개발자가 알아야 할 핵심 성능 패턴을 정리한 첫 번째 글
     * 주요 주제:
          + sync.Pool의 효과적인 사용
          + 불필요한 메모리 할당 방지
          + 구조체 레이아웃과 메모리 정렬 최적화
          + 효율적인 에러 처리
          + 인터페이스를 통한 제로 비용 추상화
          + 슬라이스 재사용 및 제자리 정렬 기법
     * 실무 사례 기반으로 작성되며, 벤치마크 및 복사 가능한 코드 예시 포함

앞으로 다룰 내용

  Go에서의 고성능 네트워킹

     * 표준 라이브러리 및 외부 라이브러리를 활용한 고성능 네트워크 서비스 구축에 대한 심층 분석 예정
     * 다룰 주제:
          + net/http 및 net.Conn의 효율적 사용
          + 대규모 동시 연결 처리
          + epoll/kqueue, GOMAXPROCS 등을 활용한 성능 조정
          + 부하 테스트 및 병목 진단 기법
          + fasthttp 같은 저수준 네트워크 라이브러리 사용 시기 및 유지보수성과의 균형

대상 독자

     * 프로덕션에서 Go 서비스를 최적화하는 백엔드 엔지니어
     * 지연 시간에 민감한 시스템을 다루는 개발자
     * Go로 마이그레이션하거나 고성능 경로를 구축 중인 팀
     * Go의 성능 모델과 트레이드오프에 관심 있는 개발자

        Hacker News 의견

     * 첫 번째 예제인 객체 풀을 보면서, 경고 없이 가능하다는 점에 놀라움
          + 이 API는 제네릭 이전에 존재했기 때문에 any를 사용함
          + Golang이 원칙적으로는 강한 타입 시스템을 갖고 있지만, 실제로는 타입 시스템을 벗어나는 API가 많음
          + 타입 시스템이 정말 유용한지 의문이 생김
          + 초기화된 기본값으로 값을 재설정하는 API가 없다는 점도 주목할 만함
     * 성능 가이드는 할당을 최소화하여 GC 시간을 줄이도록 권장함
          + GC 마크 단계가 시간을 소모하며, 긴 수명의 할당을 피하는 것이 좋음
          + 짧은 수명의 할당은 GC 시간에 거의 영향을 미치지 않음
          + 실제 앱에서는 GC를 피하는 것이 거의 불가능하며, GC 마크 시간을 줄이는 것이 더 효과적임
     * 추가적으로...
          + Go 최적화 가이드
          + Uber Go 가이드
          + 6개월 동안 여러 언어 프로젝트를 전환하면서 중요한 것들을 기억하는 것이 어려움
     * 제로 카피는 과소평가됨
          + Go의 인터페이스는 제로 카피 코드를 작성하기에 적합하지만 주의가 필요함
          + 메모리 할당과 이동에 많은 시간이 소요됨을 종종 깨달음
     * GOMEMLIMIT는 여러 번 도움을 줌
          + 컨테이너화된 프로덕션에서 유용하며, CI에서 메모리 부족 문제를 해결함
          + nogo로 전환하여 golangci-lint 문제는 해결됨
     * 최적화가 필요한 프로젝트에 대한 호기심
          + 예: 구조체 필드 정렬
     * 객체 풀링 문서를 보면서 sync 같은 패키지를 제네릭으로 만들 계획이 있는지 궁금함
     * Golang이 C와 구조체 정렬에서 비슷하다는 점에 놀라움
     * ""구조체 Data가 [1024]int 배열을 포함하고 있으며, 이는 4KB임""
          + 32비트 아키텍처를 기본으로 사용하는 사람이 있는지 의문
     * sync.Pool을 사용하여 자신을 속일 수 있음
          + pprof는 벤치마크에서 할당이 없기 때문에 좋아 보이지만, 실제 메모리 사용량은 증가함
          + 실제 세계에서의 이점을 측정하는 것이 중요함
"
"https://news.hada.io/topic?id=20034","애플의 Severance가 원격 데스크톱에서 편집되는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플의 Severance가 원격 데스크톱에서 편집되는 이유

Apple의 TV 제작 방식에 대한 놀라운 진실

     * Apple TV+의 대표작인 Severance는 Apple의 브랜드를 강화하는 데 큰 역할을 함
     * HBO의 위상 하락과 달리 Apple은 고급 콘텐츠 제작에서 주도권을 잡고 있음
     * Apple은 Severance의 편집 과정을 공개하며 Mac 기반 제작을 강조했지만, 실제로는 다른 이야기가 숨어 있음

Mac 기반 편집 영상에 숨겨진 진짜 편집 방식

     * 공개된 영상에서 화면이 흔들리는 모습이 보여짐 → Mac Mini의 성능 문제로 보일 수 있음
     * 실제로는 편집자가 Jump Desktop이라는 원격 데스크톱 앱을 통해 원격 Mac에 접속해 작업 중이었음
     * 이 앱은 고속 연결을 통해 부드러운 원격 조작을 지원함
     * 영상 초반에는 이 앱 창이 숨겨져 있었음 → 의도치 않게 편집 방식이 드러난 것일 수도 있음

원격 편집의 대두와 보안 문제

     * 영상 제작에서 보안은 매우 중요함 → 원래는 편집자들이 중앙 장소에서 작업함
     * 그러나 COVID-19로 인해 원격 근무가 불가피해졌고, 이로 인해 '원격 편집' 방식이 새 표준이 됨
     * Jump Desktop이나 Parsec 같은 앱이 널리 사용되며 고속 인터넷이 필수 조건이 됨
     * 원격 작업은 대용량 저장 공간 문제도 해결 가능 → 데이터를 클라우드나 서버에 저장 가능

Apple의 프로용 기기 전략의 한계

     * 현재 Apple의 프로 장비는 단일 기기 중심으로 설계되어 있음
     * 고급 편집 환경에서는 원격 작업이 보편화되며 Apple 장비의 필요성이 줄어듦
     * Avid Media Composer 같은 앱은 이미 클라우드 기반 서비스 제공 중
     * 사실상 Mac은 이 편집 과정에서 없어도 되는 존재가 됨 → Chromebook에서도 가능

Apple이 서버 시장을 포기한 대가

     * Apple은 과거 Xserve라는 서버 제품을 판매했지만 약 15년 전 단종시킴
     * 현재는 Mac을 가상 머신으로 효율적으로 분할해 쓰는 것이 불가능함 → EULA(최종 사용자 사용권 계약)에 의해 제한됨

     예: macOS Sequoia의 EULA는 단일 인스턴스만 가상화 허용함

     * 대부분 기업들은 강력한 서버를 분할해서 사용하는 방식이 일반적임
     * Apple의 정책은 이 흐름과 어긋남 → MacStadium 같은 업체들이 우회 솔루션 제공 중

Apple이 고쳐야 할 부분

     * 영상에서 Mac Mini는 단지 외형적 존재일 뿐, 핵심 역할은 원격 시스템이 담당함
     * 편집자들은 실제로 Mac을 쓰는 것이 아니라, Mac '주변'에서 작업 중인 셈
     * Windows 또는 Linux 기반에서도 동일한 작업이 가능함
     * Microsoft는 Windows 365를 통해 가상화 기반 원격 작업에 더 최적화됨

결론

     * Apple의 가장 중요한 오리지널 콘텐츠 제작에 외부 원격 데스크톱 앱이 사용됨
     * Apple이 자사 하이엔드 고객에게 왜 이런 비효율적인 구조를 강요하는지 자문해야 할 시점임
     * 그리고 이 문제를 해결하는 방향으로 나아가야 함

        Hacker News 의견

     * Keynote를 사용하여 프레젠테이션을 만들 때 협업이 어려운 점을 친구에게 물어본 경험이 있음. Apple은 정보 유출 위험 때문에 협업을 꺼려하며, 도구들도 협업에 적합하지 않음. 최근에는 협업 도구가 추가되었지만, Apple의 전반적인 태도는 여전히 협업에 소극적임
     * 과거 VFX 작업자였던 사람의 경험. 고급 기계에 원격 데스크톱 카드를 설치하여 소음을 줄이고, 색상 보정을 위해 비디오를 원격으로 전송할 수 있었음. 그러나 관리가 어려웠음
     * 클라우드에서 Mac을 운영하려면 대부분 전체 기계가 필요함. 클라우드 회사들이 자원을 나누어 사용료를 부과하면 직접 하드웨어를 구매하는 것이 더 저렴할 수 있음. Apple은 물리적 Mac 랙 서버를 만들어야 한다는 의견이 있음
     * Apple이 Avid를 사용하고 FCP를 사용하지 않는 점이 아쉬움. 원격 편집의 이점은 빠른 처리 속도에 있음. Apple이 자사 제품을 비판하는 PR을 만드는 것은 이해하기 어려움. Shake 인수 후 Apple은 Linux 서버에서 렌더링한 영화를 홍보했음
     * 집에서 다양한 서버를 운영하는 사람의 이야기. 여러 Mac mini와 게임 PC를 사용하여 다양한 서비스를 제공하고, 원격 인터페이스를 통해 모든 작업을 수행함. 원격 게임은 가장 까다로운 작업 중 하나임
     * Mac mini에서 Avid를 실행하는 방식에 대한 설명. Mac mini가 충분히 강력하지 않다는 주장은 잘못된 것임. 원격 연결을 통해 작업하는 것이 일반적인 방식임
     * Avid는 클라우드 기반 솔루션을 제공하지 않음. 미디어를 중앙 집중화하고 전 세계의 편집자들이 접근할 수 있는 방법임. 현대의 Avid 시스템은 여러 편집자가 동일한 영상을 접근하는 데 문제가 없음
     * Apple은 소비자 중심의 회사임을 강조하는 의견
     * Apple에서 일했던 동료의 경험. 미국 외 지역에서 Cupertino의 물리적 기계에 SSH로 접속하여 100ms 지연이 있는 터미널에서 작업했음. 현장 기계 사용이 허용되지 않았음
"
"https://news.hada.io/topic?id=20029","Windows 11 설치 시 로컬 계정 및 오프라인 설치 우회 차단 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Windows 11 설치 시 로컬 계정 및 오프라인 설치 우회 차단 예정

     * Windows 11의 최신 빌드에서 인터넷 연결과 Microsoft 계정 없이 설치를 할 수 있는 기능이 제거됨
     * Microsoft는 bypassnro.cmd 스크립트를 빌드에서 삭제하여 보안과 사용자 경험을 향상시킬 계획
          + 이 변경으로 모든 사용자가 설치 과정에서 인터넷에 연결되고 Microsoft 계정을 사용하게 됨
     * bypassnro.cmd는 간단히 레지스트리에 BypassNRO 값을 추가해서 오프라인 설치를 가능하게 했던 도구임
          + reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE /v BypassNRO /t REG_DWORD /d 1 /f
     * Microsoft의 의도는 오프라인 설치와 Microsoft 계정 없이 Windows를 설치하려면 더 많은 노력이 필요하게 만드는 것인듯

사용자에게 미치는 영향

     * 더 이상 간단한 방식으로 로컬 계정만 사용하는 설치가 어려워짐
     * 오프라인 설치 또는 Microsoft Account 없이 설치하려는 사용자에겐 추가 작업 또는 제약이 발생함
     * 특히 개인 사용자, 개발자, 테스트용 VM 환경 등에서 불편함이 커질 수 있음
     * 기업 환경이나 도메인 가입 환경에서는 여전히 정책적으로 우회 가능한 방법이 존재할 수 있음

        Hacker News 의견

     * Microsoft가 언젠가는 필수 코드 서명을 도입하고 Windows Store에서만 소프트웨어를 설치할 수 있도록 할 것이라는 확신이 있음
          + Google과 Apple의 폐쇄된 생태계를 부러워하며 Windows를 그렇게 만들려는 의지가 있음
          + Windows는 더 이상 사용자 제품이 아니며, Microsoft는 Windows 사용자를 Azure 판매 경로로 밀어넣고 있음
     * Microsoft의 보안 개념이 로컬 계정에 온라인 인증을 강요하는 것이라면, 소프트웨어 산업에 참여해서는 안 됨
          + 불필요하게 공격 표면을 증가시키고 있음
     * Windows 11을 사용하는 노트북을 안전 모드로 부팅하려 했으나, 인터넷 연결이 없어 Microsoft 계정에 로그인할 수 없었음
          + 결국 드라이브를 백업하고 Windows를 재설치해야 했음
          + 이러한 이유로 요즘은 Linux를 사용하고 있음
     * 사용자에게 적대적인 행동 때문에 Windows 10 EOL 팝업 이후 Fedora Desktop으로 전환했음
          + 사용자 중심의 운영 체제로 돌아가는 것이 해방감이 있었음
     * 스크립트가 설정하는 기본 설정은 여전히 존재하지만, 더 불편하게 만들었음
          + 경고 신호로 받아들여야 함
          + Windows 설치 시 이 설정에 의존하고 있다면 대안을 찾아야 함
     * 스크립트가 실행하는 명령어는 여전히 우회 방법에 영향을 미치지 않을 것임
          + Fedora를 사용하며 큰 불편함 없이 지내고 있음
     * 많은 기업 배포 환경에서는 인터넷 접근이 금지되어 있음
          + Microsoft는 이를 알고 있으며, 인터넷 연결이 필요하지 않을 것임
          + 로컬 로그인에 live.com이나 M365/EntraId 계정을 요구하는 것도 이해하기 어려움
     * Microsoft 제품을 피하고 있으며, 1980년대부터 컴퓨터를 사용해옴
          + 회사의 비윤리적이고 도덕적으로 파산한 관행 때문에 다른 사람들도 피하길 권장함
          + Windows 사용자가 줄어들수록 게임에 대한 통제력이 줄어들 것임
     * 온라인 중심의 Windows 관리 방식은 MS의 목표를 명확히 보여주지만, 소통이 부족함
          + 클라우드 Active Directory와 자동 배포가 통합되어 있음
          + 일반 사용자는 이러한 이점이 제한적으로 느껴질 수 있음
     * MS는 전체 디스크 암호화, TPM 기반 MFA, 제품군과의 통합을 장려하고 있음
          + 설정, 앱, 기타 항목을 장치 간에 동기화하는 것도 이점임
          + 비기술적 사용자는 Bitlocker 복구 키의 중요성을 이해하지 못할 수 있음
          + MS는 이 키를 온라인 계정에 저장하여 복구 가능하게 함
     * MS는 로컬 전용 OS 개념을 고수하지 않을 것임
          + 대부분의 사용자가 원하는 것이 아니며, 경쟁사도 동일한 방식을 사용하고 있음
          + 가정용 사용자를 위한 저렴한 Entra/Intune 패키지가 있었으면 좋겠음
     * Windows 10 지원이 종료되는 10월에는 드디어 데스크탑 리눅스의 해가 될 것임
"
"https://news.hada.io/topic?id=20016","Linux 커널 6.14는 성능과 Windows 호환성이 대폭 향상됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Linux 커널 6.14는 성능과 Windows 호환성이 대폭 향상됨

     * Linux 6.14 커널이 살짝 지연 발표됨 (토발즈가 다른 작업하다 까먹었다고 설명)
     * 새로운 NTSYNC 드라이버가 포함되어 Wine과 Steam Play 상에서 Windows 앱과 게임 성능이 향상됨
          + NTSYNC는 Windows NT 동기화 메커니즘을 커널 수준에서 직접 구현함으로써 성능, 이식성, 안정성, 정확성을 제공
          + 커뮤니티에서는 ""Linux 게임 환경이 바뀔 것""이라는 긍정적 반응을 보임
          + AMD RDNA 4 아키텍처 기반 Radeon RX 9070 XT 및 RX 9070 그래픽카드 지원이 추가됨
          + 오픈소스 RADV Vulkan 드라이버의 성능 개선과 함께 AMD 게이머에게 최적의 성능 제공
     * AMD 및 Intel CPU에 대한 전력 관리, 열 제어, 연산 성능 최적화 기능이 추가됨
          + AMD의 XDNA 아키텍처 기반 AI NPU를 위한 공식 AMDXDNA 드라이버가 추가됨
          + 이를 통해 CNN, 대규모 언어 모델 등 AI 연산을 하드웨어에서 직접 효율적으로 실행 가능함
     * Rust 언어의 커널 통합이 지속적으로 확장되고 있음
          + Rust 기반 misc 드라이버를 위한 바인딩 추가로 향후 더 많은 Rust 드라이버 개발 가능성 열림
          + Rust 1.84의 스마트 포인터 매크로 도입으로 C와 Rust 통합이 더욱 쉬워짐
     * Qualcomm Snapdragon 8 Elite 모바일 프로세서 지원으로 향후 안드로이드 스마트폰 성능 및 안정성 향상 예상
     * RISC-V 프로세서에서 루팅에 악용될 수 있는 GhostWrite 보안 취약점에 대한 패치 포함
     * Btrfs의 복사 시 쓰기(copy-on-write) 기능에 대한 읽기 균형 처리 방식 개선
     * RAID 하드웨어 구성과 다양한 워크로드에 대한 유연성 제공
     * 캐시되지 않은 버퍼 I/O 지원을 통해 빠른 저장 장치를 사용하는 시스템의 메모리 사용 최적화

결론

     * Linux 6.14는 게이머, AI 개발자, 일반 사용자 모두에게 큰 혜택을 제공하는 릴리스임
     * 다양한 성능 향상, 보안 패치, 최신 하드웨어 지원 등을 통해 리눅스 플랫폼의 진보를 보여줌
     * 다음 버전인 6.15에서는 더 많은 변경 사항이 예상됨

        Hacker News 의견

     * 월요일 아침, 일요일 오후에 예정된 6.14 릴리스를 하지 못한 이유를 찾고 싶음
          + 중요한 일이 생겼다고 말하고 싶지만, 사실은 단순한 무능함 때문임
          + 어제 아무 일도 없었고, 병합 창을 준비하기 위해 다른 일을 정리하다가 릴리스를 잊어버림
     * YouTube 댓글에서 NTSYNC에 대한 과대평가를 경계해야 한다는 의견이 있음
          + NTSYNC가 ESYNC와 FSYNC보다 호환성이 좋고, 특정 타이틀에서 약간 더 빠르지만, 과대평가는 실망을 초래할 수 있음
          + 대부분의 타이틀에서 기본적으로 FSYNC가 실행되므로, 큰 이득은 없음
     * 새로운 저수준 프리미티브를 Linux에 추가하는 과정에 대한 호기심이 있음
          + 다른 커널의 동작을 에뮬레이트하기 위한 것이며, 일부 사용자만 필요로 하는 것임
          + Steam Deck과 proton의 인기로 인해 패치가 엄격히 검토되는지 궁금함
     * 2020-2021년경부터 비디오 게임이 Linux에서 잘 작동하는지 확인하지 않게 되었음
          + DXVK와 Vulkan이 게임 체인저 역할을 했음
     * Wine의 이점이 크다는 의견이 있음
          + 2024년 1월부터 관련 정보가 제공됨
     * 새로운 커널이 Intel GPU 지원을 추가한다고 믿음
          + Beelink N150 장비에서 AI 워크로드를 테스트하고 싶음
     * 지난 주의 짧은 로그가 제공됨
          + AMD GPU 업데이트가 주를 이루고 있으며, 나머지는 작은 변경 사항임
     * Linus가 릴리스에서 GPU 관련 외에는 주목할 만한 것이 없다고 생각하지만, 제출된 기사는 큰 뉴스라고 언급함
     * Linus가 모든 코드를 읽는지 궁금함
     * bcachefs 수정에 대한 언급이 없거나 포함되었는지 궁금함
          + GPIO 변경 사항이 큰 문제를 일으킬 것임
     * zdnet이라는 이름이 오랜만에 보임
"
"https://news.hada.io/topic?id=19984","CSV 포맷에 대한 러브레터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            CSV 포맷에 대한 러브레터

     * CSV를 대체할 ""우월한"" 형식들이 자주 소개되지만, 대부분은 편향된 비교를 기반으로 CSV의 진정한 강점을 간과함
     * 이 글은 CSV가 완벽하다는 것이 아니라, 과소평가된 장점을 조명하고자 함
     * CSV를 미워하는 것이 멋져 보이는 분위기에 반해 CSV의 진가를 되새김

1. CSV는 극도로 단순함

     * CSV의 정의는 제목 그대로: ""쉼표로 구분된 값""
     * 행은 줄바꿈으로, 열은 쉼표로 구분됨
     * 값에 쉼표나 줄바꿈이 있을 경우에는 따옴표로 감싸고, 따옴표 자체는 이중 따옴표로 표현
     * 복잡한 명세 없이 누구나 직관적으로 이해하고 사용할 수 있음
     * 다만, 정확한 파싱을 위해 전용 CSV 파서 사용은 여전히 필요함

2. CSV는 집단적인 아이디어임

     * 소유자가 없음, 사유화되지 않음
     * RFC 4180이 존재하지만, 대부분은 이를 참고용으로만 여김
     * 전 세계 개발자들이 암묵적으로 공유하는 공통 규칙 기반의 자유로운 형식임

3. CSV는 텍스트임

     * JSON, YAML, XML처럼 사람이 읽을 수 있는 순수 텍스트 포맷
     * 어떤 텍스트 에디터로도 열 수 있으며, 별도 도구 없이도 내용을 확인 가능
     * 인코딩 방식도 자유롭게 선택 가능

4. CSV는 스트리밍에 최적화됨

     * 한 줄씩 읽는 구조이기 때문에 메모리 소모가 매우 적음
     * 간단한 코드만으로도 수 기가바이트의 데이터를 몇 KB의 메모리만으로 처리 가능
     * Parquet 같은 열 지향 포맷은 스트리밍 처리가 어렵고, 복잡한 버퍼링이 필요함
     * 단점은 특정 열만 보고 싶을 때에도 전체 행을 읽어야 한다는 점

5. CSV는 쉽게 덧붙일 수 있음

     * 파일을 append 모드(a+)로 열어 새로운 행을 끝에 추가하는 것이 매우 쉬움
     * 반면 Parquet 등의 열 지향 포맷은 행 추가가 비효율적이고 복잡함

6. CSV는 동적 타입을 지원함

     * 고정 타입이 없어서 유연하게 데이터를 해석 가능
     * 예: JavaScript는 64비트 정수를 제대로 표현하지 못하지만 CSV는 이런 제약 없이 사용 가능
     * 언어 간 호환성과 유연성에서 이점이 있음
     * 하지만 잘못 해석하면 오류 발생 가능 → 사용 시 주의 필요
     * 고성능이 요구될 경우 텍스트를 디코딩하지 않고 바이너리 수준에서 직접 처리하는 것도 가능

7. CSV는 간결함

     * 헤더가 파일 맨 앞에만 존재하기 때문에 형식 반복이 거의 없음
     * JSON, XML은 키 반복으로 오버헤드가 큼
     * 문자열 표현도 이미 간결하며, 포맷 자체의 오버헤드(쉼표, 따옴표 등)가 매우 적음

8. 뒤집힌 CSV도 여전히 유효함

     * CSV는 바이트 단위로 뒤집어도 여전히 유효한 CSV임
     * 이는 이중 따옴표 이스케이프 방식 덕분으로, 팔린드롬 형태의 이스케이프 방식이기 때문
     * 이 특성 덕분에 CSV 파일의 끝부분을 매우 효율적으로 읽을 수 있음
     * 예: 중단된 프로세스를 재개할 때 파일의 마지막 몇 줄만 읽어 재시작 가능

9. Excel은 CSV를 싫어함

     * Excel이 불편하게 여기는 형식이라면, 오히려 올바른 길을 가고 있다는 신호일 수도 있음

   Simple is the best!

        Hacker News 의견

     * CSV와 INI 파일을 좋아하는 이유는 단순하고 텍스트 기반이며, 형식에 인코딩된 타입이 없고 문자열로만 구성되어 있기 때문임
          + 공식 표준이 없다는 단점이 있지만, 제 역할을 잘 수행함
          + TOML에 대한 INI 비판을 북마크해 두었음
          + TOML 비판의 첫 번째 줄이 CSV에도 적용된다고 생각함: 여러 방언의 연합체임
     * CSV는 우아하지만 치명적인 결점이 있음 - 인용부호가 ""비지역적"" 효과를 가짐
          + 예를 들어, 바이트 1에 있는 인용부호 하나가 바이트 1000000에 있는 쉼표의 의미를 바꿀 수 있음
          + 이로 인해 두 가지 불편한 결과가 발생함
               o CSV 처리의 병렬화가 어려움
               o 데이터 손상이 파일의 가독성에 큰 영향을 미침 (인용부호 하나의 누락이나 추가가 전체를 망칠 수 있음)
          + 그래서 요즘은 간단한 테이블 데이터 직렬화에 대해 CSV 대신 단순한 이스케이핑을 선호함
     * CSV의 가장 좋은 점은 누구나 30분 만에 파서를 작성할 수 있다는 것임
          + 90년대 초의 데이터를 현대 웹 서비스로 쉽게 가져올 수 있음
          + 가장 나쁜 점은 누구나 30분 만에 파서를 작성할 수 있다는 것임
          + 잘못된 구현, 잘못된 데이터, 이상한 정의되지 않은 동작이 발생하기 쉬움
          + JSON과 YAML도 비슷한 문제를 가지고 있음
          + XML은 다소 보기 흉하지만 가장 견고한 것 같음
     * CSV를 좋아하는 사람은 기업 환경에서 CSV 주입 방지를 처리하라는 요청을 받은 적이 없을 것임
          + 웹에 좋은 자원이 부족함
          + 가장 좋은 자원은 <a href=""https://georgemauer.net/2017/10/07/csv-injection.html"" rel=""nofollow"">여기</a>임
     * CSV를 좋아하는 이유는 여러 가지가 있음
          + C로 프로그램을 작성하여 다양한 것을 CSV로 직접 출력할 수 있음
          + 거의 모든 데이터베이스나 일반적인 ""것""에서 CSV로 쉽게 변환할 수 있는 간단한 미들웨어를 작성할 수 있음
          + CSV를 엑셀에 넣고 원하는 모든 것을 할 수 있음
          + ini 파일도 좋아함. 메모장에서 직접 수정할 수 있음
          + 그러나 일반적인 개요/구조가 있었으면 좋겠음
     * 최근 Raspberry Pi 기반 솔루션을 개발하고 있음
          + 첫 번째 구현은 SQLite 데이터베이스를 사용했으나, 전원 주기 후 몇 일 만에 손상됨
          + Parquet 파일을 살펴보았으나 append-only 작업에 친화적이지 않음
          + IPC 파일에 이벤트를 기록하고 주기적으로 Parquet 파일로 ""플러시""하는 방법을 구현함
          + 작동하고 효율적이지만 제대로 구현하기가 쉽지 않음
          + 일반 개발자에게는 CSV (또는 JSONL)가 여전히 최고임
     * CSV의 재미없는 점은 빠르게 작성된 파서와 직렬화기가 인용부호를 잘못 처리하는 일반적인 실수를 반복하는 것임
          + 오랫동안 CSV를 경계했으나 Python을 배우고 훌륭한 csv 표준 라이브러리 모듈을 사용하면서 달라짐
     * 만약 이것이 정말로 러브레터였다면, CSV 형식으로 작성되었을 것임
     * JSON에 대한 반론은 그다지 설득력이 없음
          + 모든 필드에 이름을 추가하는 것은 필요하지 않음
          + CSV와 JSON을 비교하면 JSON은 약간 더 크지만, 괄호가 단순하거나 복잡할 수 있는 능력을 나타냄
          + CSV는 단순하기 때문에 파싱/인코딩 라이브러리를 사용하지 않는 경우가 많음
          + JSON 파서는 항상 예상 값을 출력하며, 언어는 아마도 매우 효율적인 SIMD 기반 파서를 사용함
          + 표준화 문제도 있음. CSV 파일이 쉼표, 공백, 세미콜론, 파이프 등을 사용하는지, CR, LF, CRLF를 사용하는지, 인용부호를 이스케이프할 수 있는지 등의 문제가 있음
          + JSON은 이러한 문제가 없음
          + JSON은 타입이 있음. 6가지 타입이 없는 것보다 나음
          + JSON은 완벽하지 않지만, 일반적으로 CSV보다 나음
     * 현대적인 형식을 좋아하는 사람으로서, 의심스러울 때는 CSV나 JSONL을 사용함
          + 주로 평문 텍스트이기 때문에 grep으로 쉽게 찾을 수 있고 스트리밍 가능함
          + 문서에 나열된 대부분의 기능은 JSONL에도 공유됨
          + gzip이나 zstd로 잘 압축됨
          + 압축은 평문 텍스트의 장점을 일부 제거하지만, ripgrep은 압축된 파일도 검색할 수 있음
          + JSONL의 또 다른 장점은 더 작은 파일로 쉽게 나눌 수 있다는 것임

   Worse is better!
"
"https://news.hada.io/topic?id=20046","uv를 이용한 독립 실행형 Python 스크립트 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     uv를 이용한 독립 실행형 Python 스크립트 만들기

     * Python 스크립트에 uv를 활용해 의존성 설치 없이 즉시 실행 가능한 독립 실행형 스크립트를 만드는 방법
     * Go 프로젝트에서 API 테스트용으로 Python 스크립트를 사용하는 상황에서 나온 실용적 접근법임

기존 방식의 한계

     * httpx, IPython, loguru 등의 패키지를 사용하는 Python 스크립트를 실행하려면 다음 중 하나를 선택해야 했음
          + 시스템 Python에 직접 패키지 설치
          + 가상환경 생성 및 패키지 설치 후 실행
     * 두 방법 모두 번거롭고, 시스템 환경에 영향을 줄 수 있으며, 타인에게 공유 시 설명이 길어지는 문제가 있음

uv로 간편한 스크립트 실행

     * uv는 Python 패키지 관리자이자 pip 대체 도구로, 격리된 실행 환경에서 Python 스크립트를 실행 가능하게 해줌
     * # /// script 주석을 통해 스크립트 내부에 의존성 정보를 명시할 수 있음
# /// script
# dependencies = [""ipython"", ""httpx"", ""loguru""]
# ///

     * 위 설정이 포함된 스크립트는 다음 명령으로 실행 가능:
uv run jam_users.py

     * uv는 자동으로 임시 가상환경 생성, 필요한 패키지 설치, 그리고 스크립트 실행까지 한 번에 처리함

실행 가능한 스크립트로 만들기

     * 일반 Python 스크립트처럼 #!/usr/bin/env python을 이용해 실행 가능하게 만들 수 있지만, 이 방식은 uv의 script 주석을 인식하지 못함
     * 대신 아래처럼 shebang에 uv 명령을 직접 넣어 해결할 수 있음
#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [""ipython"", ""httpx"", ""loguru""]
# ///

     * 이 방식은 chmod +x 후 직접 실행 가능하며, 다른 유닉스 시스템에서도 uv만 있으면 그대로 작동함:
./jam_users.py

장점 및 활용도

     * uv 방식은 다른 사람에게 스크립트를 전달할 때 매우 유용함
     * 복잡한 사전 설정 없이도 필요한 패키지와 환경이 자동으로 세팅됨
     * 시스템 Python이나 글로벌 환경을 오염시키지 않음
     * 스크립트 하나로 실행과 의존성 관리가 모두 해결됨

     필자는 과거에 다른 사람에게 Python 스크립트를 전달할 때 설치 설명이 복잡했던 경험이 있었지만, 이제는 uv를 통해 이 문제를 간단히 해결 가능하다고 설명함

     * 작은 테스트 스크립트 뿐 아니라 실무용 자동화 스크립트에서도 효과적임
"
"https://news.hada.io/topic?id=20061","Show GN: Eyecons – VS 코드 테마 색상에 맞게 자동 조정되는 아이콘 테마","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: Eyecons – VS 코드 테마 색상에 맞게 자동 조정되는 아이콘 테마

   VS Code용 아이콘 테마인 Eyecons를 만들었습니다 (Cursor 에디터에서도 작동합니다).
   아이콘 색상이 현재 편집기 테마에 자동으로 맞춰지도록 설계되어, 시각적으로 더 일관된 개발 환경을 제공합니다.

   시맨틱 색상 변수에 의존하지 않고, 테마의 팔레트를 분석한 뒤
   커스텀 알고리즘을 사용해 가장 어울리는 아이콘 색상을 계산합니다.

   파일 아이콘이 UI에서 따로 노는 느낌이 들지 않고,
   전체 테마에 자연스럽게 녹아들도록 하는 것이 목표입니다.

   오픈 소스이며, 가볍고 설치만 하면 바로 사용할 수 있습니다.
   의견이나 제안 환영합니다!

   적용해보니 눈에 잘 띄긴하네요. 잘 쓰겠습니다.
"
"https://news.hada.io/topic?id=20009","애플은 Snow Sequoia가 필요함 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         애플은 Snow Sequoia가 필요함

     ""애플은 다시 스노우 레오파드 같은 시스템 개선판이 필요함""

     * 2007년 iPhone과 함께 발표된 Mac OS X Leopard는 ""300가지 새로운 기능""으로 큰 변화를 선보였음
     * 2009년의 Snow Leopard는 새로운 기능보다는 기존 기능 정리와 시스템 개선에 집중한 드문 사례였음
     * 이처럼 ""덜 추가하고 더 개선한"" 스노우 레오파드는 안정성과 효율성 면에서 극찬받았음
     * 요즘은 macOS, iOS 업그레이드가 무료이고 매년 정기적으로 이루어지므로 대규모 기능 추가 압박은 줄었음에도, 애플은 다시 스노우 레오파드와 같은 정비형 업데이트를 시도하지 않음

현재 애플 소프트웨어의 문제점

     * 최신 버전인 macOS Sequoia와 iOS/iPadOS 18은 전반적으로 안정적이지만 사용자 경험 측면에서 품질 저하 현상이 심각함
     * 버그가 드물지 않고 자주 발생하며, 여러 기기에서 반복 재현되는 문제들도 많음
     * 예: 메시지 앱에서 텍스트 복사 기능이 제대로 작동하지 않음 (전체 메시지만 복사되거나 복사가 안 되는 현상)
     * 메시지 앱은 동기화 속도도 매우 느리며, 동기화 상태에 대한 표시조차 없음
     * 백그라운드에서도 CPU 점유율이 과도하게 높음

기본 앱 및 기능에서의 안정성 문제

     * Mail과 같은 앱들이 MacOS의 보안 네트워킹 라이브러리에 의존하면서 네트워크 연결이 끊기는 현상이 있음
     * 이런 경우 전체 시스템 재시작 외엔 해결 방법이 없음
     * Safari도 내부 구성 요소가 종종 멈추거나 전체 브라우저 작동을 중단시키는 오류가 발생함
     * iPad에서는 메시지 앱 상단의 네비게이션 바가 사라지는 UI 버그가 자주 발생함
     * 이모지 선택기는 빈 화면이 뜨거나 선택이 반영되지 않는 문제가 있음

잘못된 UI/UX 디자인 결정들

     * macOS의 System Settings(구 설정) UI는 과거보다 사용성이 나빠졌음
     * 예: 디스플레이 위치 변경이 직관적으로 불가능해지고 추가 창을 열어야만 조정 가능해짐
     * 이는 iPad를 보조 디스플레이로 사용하는 상황에서 더욱 불편함
     * 많은 설정 항목이 불필요하게 메뉴 깊숙이 숨겨져 있어 접근성이 떨어짐

사진 앱의 문제점

     * iOS/iPadOS의 Photos 앱은 새 버전에서 사용자 편의성이 퇴보함
     * 즐겨찾기 기능 등 자주 사용하는 옵션이 접근하기 어렵게 변경됨
     * 기본 뷰는 사진에 큰 여백을 줘서 화면을 비효율적으로 사용함
     * 탐색 방식도 일관성이 없고, 버튼 배치나 기능 위치가 앱마다 달라 혼란을 유발함

애플의 개선 필요성과 기회

     * Steve Jobs는 ""혁신은 1,000가지를 거절하는 것""이라 했으며, 이는 애플이 빛나던 시절의 철학이었음
     * 지금은 많은 문제들이 방치된 채 새로운 기능만 추가되며, 애플 소프트웨어 전반에 '구조적 부패'가 생기고 있음
     * 애플 인공지능(AI)의 핵심 기능이 연기되거나 통합에 실패했다는 보도도 있음
     * Siri도 두 개의 독립된 시스템으로 나뉘어 관리되는 것으로 추정됨

애플의 전략적 전환 필요성

     * 현재처럼 인공지능에만 집중하며 기존 시스템의 문제를 방치하면 애플 제품의 품질은 더욱 악화될 가능성이 있음
     * 스노우 레오파드처럼 '시스템 정비 중심'의 버전을 하나 내놓는 것만으로도 큰 효과를 볼 수 있음
     * 애플의 자원과 인력을 고려할 때, 운영체제 팀은 시스템 정비를, AI 팀은 별도로 혁신을 추진하는 것이 충분히 가능함
     * 잘 다듬어진 OS는 이후의 AI 기능도 더욱 잘 빛나게 만들 수 있음

결론: 혁신보다 정비가 필요한 시점

     * 애플 제품은 여전히 Windows나 Android보다 낫지만, 이제는 '최고'가 아닌 '덜 나쁜' 수준으로 평가받는 중임
     * 충성도 높은 사용자들은 애플 제품이 '그냥 잘 작동하는' 품질을 다시 갖추길 기대함
     * Vision Pro 등 실현 가능성이 낮은 분야에 자원을 낭비하기보다, 기존 제품의 품질 개선이 더 시급한 과제임

        Hacker News 의견

     * Snow Leopard의 품질에 대한 사실적 ""갭""이 있지만, 그 감정은 이해할 수 있음. 20년 넘게 Mac과 PC를 함께 사용해온 사용자로서 Apple의 소프트웨어 품질이 꾸준히 감소하고 있음을 느끼고 있음
          + Spotlight는 파일을 찾는 데 더 이상 유용하지 않으며, 결과를 효과적으로 우선순위화할 방법이 없음
          + GNOME을 몇 년간 병행 사용해왔으며, Apple Silicon과 맞먹는 PC 하드웨어가 있다면 GNOME을 ""영원한 데스크톱""으로 고려하고 있음
     * macOS에서 Gatekeeper를 우회하기가 점점 어려워지고 있으며, 이는 Apple이 소프트웨어에 대한 통제를 강화하는 방향으로 나아가고 있음을 의미함
          + macOS가 실행하는 모든 실행 파일의 해시를 클라우드로 보내는 것이 개인 컴퓨팅의 개방성에서 벗어나 더 통제된 소프트웨어 경험으로 이동하는 것처럼 느껴짐
     * Windows 11의 설정 변경은 여러 인터페이스 디자인을 거쳐야 하며, Apple의 환경이 아닌 곳에 있을 때 Apple로 돌아가고 싶어짐
     * MacOS는 해마다 악화되고 있으며, Universal Control과 Continuity Camera 같은 기능은 훌륭하지만, 시스템 설정 앱의 느린 반응 속도는 용납할 수 없음
     * Mac의 시스템 트레이에서 음악 아이콘을 제거할 수 없는 것이 불편하며, Spotlight 문제도 마찬가지임
          + Mac 하드웨어가 공식적으로 Linux를 지원한다면 macOS를 다시는 사용하지 않을 것임
     * Snow Leopard는 Apple이 Mac을 포기하는 것처럼 보일 정도로 느리게 발전했음
          + OS 업데이트를 하드웨어 판매와 연결하는 방식이 바뀌면서 많은 Mac이 Snow Leopard에 머물렀음
     * Snow Leopard는 많은 OS 코드 기반의 변화를 포함했으며, 안정화되기까지 여러 번의 점 업데이트가 필요했음
          + Apple의 품질 문제 해결을 위해 QA를 다시 프로세스에 의미 있게 통합해야 함
          + 더 많은 인력을 고용하고 자동화에 덜 의존해야 하며, 버그를 즉시 수정해야 함
     * Apple이 앞으로 어떻게 나아갈지 궁금하며, Snow Leopard 같은 릴리스가 좋겠지만 LTS 릴리스가 더 나을 것임
          + M1 Max를 4년째 사용 중이며 여전히 새것처럼 느껴짐
     * Microsoft처럼 ""우리의 기능을 사용하라""는 방식이 점점 더 나타나고 있음
          + iOS 18 업데이트 이후, 날씨 앱의 위치 서비스 권한이 사라지는 문제가 발생함
          + 새로운 Mail 앱은 자동으로 이메일을 분류하지만, 읽지 않은 메일 수 배지가 ""우선"" 메일만을 기준으로 작동함
          + 키보드가 자동으로 사라지지 않는 문제도 있음
"
"https://news.hada.io/topic?id=20086","KOReader - 오픈 소스 전자책 리더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        KOReader - 오픈 소스 전자책 리더

     * e-Ink 리더를 위한 문서 뷰어
     * Portable: Cervantes, Kindle, Kobo, PocketBook, reMarkable 등의 임베디드 장치와 Android 및 Linux 컴퓨터에서 실행 가능함. 개발자는 Linux와 MacOS에서 KOReader 에뮬레이터를 실행할 수 있음
     * 다양한 형식의 문서 지원: 고정 페이지 형식(PDF, DjVu, CBT, CBZ)과 재흐름 전자책 형식(EPUB, FB2, Mobi, DOC, RTF, HTML, CHM, TXT)을 지원함. 스캔된 PDF/DjVu 문서도 내장된 K2pdfopt 라이브러리로 reflow 가능함. 일부 형식에 대해 ZIP 파일도 지원함
     * 완전한 기능의 읽기: 다국어 사용자 인터페이스와 높은 커스터마이즈가 가능한 읽기 화면 및 다양한 조판 옵션 제공함. 임의의 페이지 여백 설정, 줄 간격 조정, 외부 글꼴 및 스타일 선택 가능함. 다국어 하이픈 사전이 애플리케이션에 번들로 포함되어 있음
     * calibre (메타데이터 검색, 무선으로 전자책 수신, OPDS를 통한 라이브러리 탐색), Wallabag, Wikipedia, Google Translate 및 기타 콘텐츠 제공자와 통합
     * 전자잉크 기기에 최적화: 애니메이션 없는 사용자 인터페이스, 페이지화된 메뉴, 조정 가능한 텍스트 대비, 페이지 미디어에 맞게 콘텐츠 또는 페이지를 쉽게 확대 가능함
     * 플러그인을 통해 확장 가능함
     * 빠름: 일부 구형 장치에서는 내장된 읽기 소프트웨어보다 페이지 전환 지연이 절반 이하로 측정됨
     * 기타 기능: StarDict 사전/Wikipedia로 단어 검색, 온라인 OPDS 카탈로그 및 RSS 피드 추가, 무선 소프트웨어 업데이트, FTP 클라이언트, SSH 서버 등 제공함

        Hacker News 의견

     * KOReader는 최근 몇 년 동안 사용자 인터페이스 측면에서 놀라운 속도로 발전한 훌륭한 프로그램임
          + 상업 제품과의 차이점은 독서 추적 기능이 유용하게 작동함
          + 각 페이지에 얼마나 시간을 보냈는지 차트로 보여주어 책의 어느 부분을 읽지 않았는지 파악할 수 있음
          + 일반적인 독서 습관을 추적하고 싶다면, 읽은 책과 읽은 시간을 보여주는 유용한 뷰가 있음
          + PDF 읽기에서는 eInk의 한계를 극복하려고 노력함
          + 작은 화면에서 다중 열 논문을 읽을 때, 한 열을 내려간 후 다음 열의 맨 위로 돌아가도록 설정할 수 있음
          + 화면을 이동할 때 겹치는 부분을 표시하여 다음 부분을 표시할 때 혼동되지 않도록 할 수 있음
          + KOReader는 소설을 판매하려는 사람들보다는 놀라운 독서 경험을 원하는 사람들이 설계한 것처럼 느껴짐
     * 거의 모든 애플리케이션이 lua(JIT)로 작성된 점이 매우 인상적임
          + CPU 블리팅/블렌딩을 수행할 만큼 빠르다는 점이 특히 인상적임
          + lua가 이렇게 독립적으로 활용되는 경우가 드문 이유가 궁금함
     * KOReader를 매우 사랑함
          + Kindle 3에서 사용 중이며, 부모님과 형제도 KOReader를 사용하도록 전환함
          + 최근 WinterBreak 탈옥 덕분에 비교적 새로운 모델에도 설치 가능함
          + KOReader의 Android 앱은 약간 버그가 있지만, Kindle에서는 훌륭한 경험을 제공함
          + 오래된 Kindle을 최신 상태로 만드는 방법에 대해 작성한 글이 있음
     * KOReader는 매우 해킹 가능함
          + 대부분이 Lua로 작성되어 있어, 새로운 기능을 추가하는 것이 어렵지 않음
          + 몇 년 전 Kobo 자연광 지원을 추가했으며, 코드 베이스가 이해하기 쉽고 작업하기 좋았음
     * KOReader를 좋아하지만, Kobo Clara BW의 기본 소프트웨어를 선호함
          + 주로 라이브러리 탐색 때문에 기본 소프트웨어를 선택함
          + 모든 책을 기기에 보관하고 싶지만, 저자별로만 찾을 수 있어 불편함
          + KOReader를 삭제하지 않았기 때문에, 다시 돌아갈 이유가 생기면 설정이 그대로 남아 있음
     * Kindle에 KOReader를 설치한 후, OPDB 인덱스와 자체 호스팅 calibre-web 덕분에 어떤 기기에서든 epub을 다운로드하고 웹페이지에 올린 후 KOReader에서 즉시 검색할 수 있음
          + USB나 Amazon의 전송 방식을 사용하고 싶지 않았기 때문에 매우 좋음
          + 내장 리더기보다 많은 사용자 정의 가능함
     * Kobo 사용자에게 KOReader는 기본 리더기보다 표준 epub을 훨씬 잘 처리함
          + Kobo 스토어에서 구매하지 않은 epub을 읽어본 적이 있다면, 텍스트 강조 표시가 매우 느리다는 것을 알 수 있음
          + KOReader는 그런 지연이 없음
     * calibre-web의 자체 호스팅 인스턴스를 사용하여 전자책을 관리함
          + KOReader를 사용하여 Kobo e-reader에 라이브러리를 동기화할 수 있음
          + 페이지 넘김이 기기의 기본 리더기보다 빠름
     * KOReader는 설정과 사용자 정의에 몰두하는 사람들에게 매우 바쁠 수 있음
          + e-reader의 서점 생태계에 얽매이지 않는다면 매우 가치가 있음
          + Kobo e-reader에서 기본 인터페이스보다 훨씬 빠르고 추가 기능이 많아 매우 만족스러움
     * 로드 시간이 개선되었는지 궁금함
          + Kobo Libra 2에서 큰 epub 파일을 여는 데 5분 이상 걸렸음
          + 글꼴 크기를 변경할 때 전체 문서를 다시 흐르게 하여 큰 페널티가 발생함
          + 반면, 내장 소프트웨어는 해당 파일을 처리하는 데 문제가 없었음
"
"https://news.hada.io/topic?id=19997","Apple의 혁신과 실행력에 대한 회의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Apple의 혁신과 실행력에 대한 회의

     * Apple은 오랫동안 혁신을 잃었다는 비판을 받아왔음
     * Mac과 iPhone으로 세상을 바꿨지만, iPhone은 이제 성숙기에 접어들어 성장이 정체됨
     * iPad, Watch, AirPods 등 이후 제품들도 초반에는 혁신으로 평가받았으나 현재는 성장이 둔화됨
     * 서비스 부문만이 꾸준히 성장하고 있으며, 2024년 기준 $100bn 달성
     * 하지만 이 서비스들은 Apple다운 차별화가 부족하며, Google로부터의 TAC 수익 등 기존 고객 기반에서 수익을 추출하는 구조에 가까움

Apple 수익 구조의 문제점

     * iPhone이 Apple 수익의 절반 이상을 차지하며, 여기에 iPhone 기반 업셀 제품들(Watch, AirPods 등)이 추가로 30%를 차지
     * 즉, Apple 수익의 80%가 iPhone에 의존하는 구조
     * 이는 성장보다 수익 극대화에 초점을 맞춘 모습

Apple의 실패한 신규 프로젝트들

     * 자동차 프로젝트는 초기에는 혁신 가능성이 있다고 판단되었으나, 근본적으로 다른 무언가를 만들 수 없다고 판단해 중단됨
     * xR 분야에서는 Vision Pro를 출시했으나, 실제로는 완성되지 않은 과도기적 기기
     * 너무 비싸고 무겁고, 개발자 생태계 형성도 실패하여 대중적 성공에는 실패

Siri와 AI 전략의 큰 실수

     * WWDC 2024에서 Apple은 새로운 Siri와 AI 전략을 발표하면서 큰 기대를 모음
     * Siri가 개인 데이터를 기반으로 복잡한 질문에 답변할 수 있는 능력을 갖춘 비서로 발전할 것으로 홍보됨
     * 그러나 이 데모는 실제 작동하는 제품이 아닌 ‘모형’이었음이 밝혀짐
     * 출시 예정일도 2025년 말~2027년까지 불확실해진 상황

Apple의 실행력 위기

     * Apple은 원래 발표한 기능을 제때 출시하는 것으로 유명했지만 최근 흐름은 다름
     * WWDC와 광고에서 새로운 Siri가 출시된 듯한 인상을 줬지만, 실제로는 아무 변화도 없었음
     * 이는 과거 Apple Maps 초기 실패 사례와 유사한 상황
     * 내부적으로 실행력이 약화된 징후로 볼 수 있음

경쟁 환경과 Apple의 위상

     * 경쟁사들(특히 중국 OEM들)은 빠르게 새로운 AI 기능들을 출시하고 있음
     * Apple의 ‘Apple Intelligence’가 단기적으로 iPhone 수요를 크게 끌어올릴 가능성은 낮음
     * AR 글라스, 홈 스마트 디바이스 등 미래 제품들도 Siri AI 기술 없이는 매력이 크게 떨어짐
     * Apple이 이 기술을 빠르게 실현하지 못하면 다른 기업들이 그 자리를 차지할 수 있음

결론: Apple이 직면한 근본적인 도전

     * 단순히 Siri 출시가 늦어진 것이 문제가 아님
     * Apple 내부가 이 기술이 준비되었다고 오판하고 대대적으로 발표했다는 것이 더 큰 문제
     * 과거의 Apple처럼 정교하게 준비하고 완성된 상태로 제품을 내놓는 실행력에 금이 간 신호
     * 이는 Apple이 더 이상 과거의 ‘완성형 제품’을 만들던 회사가 아닐 수 있음을 시사함
"
"https://news.hada.io/topic?id=20064","로드맵: Lakehouse 시대의 Data 3.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      로드맵: Lakehouse 시대의 Data 3.0

     * 기업의 데이터 인프라는 기술 발전에 따라 함께 진화하며 새로운 제품과 서비스를 가능하게 하고 있음
     * 데이터 인프라는 기존의 온프레미스 데이터 웨어하우스에서 클라우드 기반 데이터 웨어하우스 및 데이터 레이크로 발전해왔음
     * 최근에는 AI의 급격한 발전과 함께 데이터 레이크하우스라는 새로운 아키텍처가 떠오르며 Data 3.0 시대로 진입하고 있음
     * 레이크하우스는 분석 및 AI 워크로드 등 다양한 용도를 지원하는 고성능, 상호운용 가능한 통합 플랫폼으로, 기업 데이터 인프라의 핵심을 재구상
     * 이로 인해 수십억 달러 규모의 새로운 데이터 인프라 기업들이 등장할 가능성이 높아지고 있음

레이크하우스 혁신의 배경

     * 2019년부터 2024년까지 기업의 데이터 인프라 투자 규모는 약 1800억 달러에서 3500억 달러로 두 배 증가
     * 기존의 데이터 웨어하우스와 데이터 레이크는 AI의 요구사항을 완전히 충족하지 못함
     * AI 중심의 워크로드는 다음과 같은 요구사항을 가짐:
          + 구조화, 반구조화, 비정형 데이터를 모두 다루어야 함
          + 실시간, 멀티모달, 조합 가능한 데이터 처리가 가능해야 함
          + 기존 데이터베이스와 벡터 데이터베이스 간 상호운용성 필요
     * 기업 고객의 수요 변화:
          + 데이터 중복 제거 요구
          + 데이터 거버넌스 복잡성 증가
          + 공급업체 종속 탈피 및 유연성 요구
          + AI에 적합한 솔루션 탐색의 어려움

오픈 테이블 포맷이 레이크하우스를 가능하게 함

     * Delta Lake, Iceberg, Hudi 같은 오픈 테이블 포맷(OTF) 이 레이크하우스의 기반을 형성
     * 주요 기능:
          + ACID 트랜잭션 지원: 데이터 정합성과 안정성 보장
          + 배치 및 스트리밍 처리 지원
          + 스키마 및 파티션 유연성 제공
          + 타임 트래블 기능으로 이전 상태로 복원 가능
          + 확장 가능한 메타데이터 관리

레이크하우스 패러다임의 등장

     * 데이터 레이크하우스는 데이터 웨어하우스의 성능과 데이터 레이크의 유연성을 결합한 새로운 아키텍처
     * AI 기반 애플리케이션, 실시간 분석, 기업 인텔리전스를 위한 차세대 인프라로 부상
     * 주요 기업과 스타트업이 레이크하우스 전환을 서두르고 있으며, 이와 관련된 새로운 시장이 형성되고 있음

Thesis 1: AI 중심 수집 및 변환으로 지능형 실시간 파이프라인 구현

     * 기존 ETL 도구는 AI 스케일에 비효율적
     * Prefect, Windmill, dltHub 등은 코드 기반 데이터 파이프라인 및 오케스트레이션을 지원
     * Tobiko 같은 도구는 SQL 자동화, 데이터 라인리지, 종속성 추적 등을 제공
     * Anthropic의 Model Context Protocol(MCP)은 AI 워크플로의 맥락 유지를 위한 표준화된 인터페이스 제공
     * Apache Kafka와 Flink는 실시간 모델 학습 및 추론에 필수적인 메시징 및 스트리밍 처리 기능 제공
     * Chalk AI는 실시간 추론 플랫폼 제공으로 빠른 의사결정에 기여
     * 메타데이터 계층은 AI 시대에 중요한 **진실의 원천(source of truth)**으로 부상

Thesis 2: 메타데이터 계층의 전략적 중요성 부각

     * 메타데이터는 이제 단순한 정보가 아닌 행동을 유도하는 중심 계층
     * Iceberg, Delta Lake, Hudi 등의 오픈 테이블 포맷이 메타데이터 혁신을 이끔
     * Datastrato, Vakamo 등의 레이크하우스 네이티브 카탈로그가 등장
     * Acryl Data의 DataHub는 인간과 AI 에이전트의 데이터 접근 및 거버넌스를 지원
     * OpenHouse, Apache Amoro, Ryft 등은 메타데이터를 중심으로 한 제어 플레인(Control Plane) 제공
     * Flarion.io, Greybeam 등은 스토리지 이외의 계층에서 성능 최적화 도구 개발 중

Thesis 3: 컴퓨팅 및 쿼리 엔진의 변화

     * 레이크하우스의 확산으로 기존의 단일 플랫폼 중심 구조에서 모듈형 아키텍처로 전환
     * Snowflake, Databricks 외에도 DuckDB, ClickHouse, Druid 등 특화된 솔루션 성장
     * Daft, typedef, Mooncake, Bauplan 등은 AI 중심 최적화를 위한 새로운 컴퓨팅 프레임워크 개발 중
     * AI에 최적화된 쿼리 엔진 및 연합 컴퓨트 플랫폼의 등장은 데이터 처리의 새로운 기준을 형성

Thesis 4: 데이터 엔지니어링과 소프트웨어 엔지니어링의 경계가 모호해짐

     * AI 중심 애플리케이션은 전체 개발자가 데이터 중심 역량을 갖추는 방향으로 변화
     * dbt Labs는 데이터 개발에 버전 관리, 테스트, CI/CD 등 소프트웨어 엔지니어링 관행을 도입
     * Gable은 사용자 친화적인 인터페이스로 데이터 파이프라인 구축 지원
     * Temporal, Inngest는 복잡한 분산 워크플로의 신뢰성과 가시성 확보
     * 오픈 소스에 대한 기여가 급증하며 GitHub 데이터 관련 프로젝트의 성장률은 일반 소프트웨어보다 높음
     * LLM의 지원을 잘 받기 위한 오픈 소스 채택 증가
     * AI와 데이터 중심의 엔지니어링이 융합되면서 팀 구조와 개발 방식이 근본적으로 변화

   Lakehouse 다음은 무엇인가요?

   Dataland일까요?

   스타트업에서도 시도할 수 있게 비용이 줄어들길 바랍니다 ㅎㅎ
"
"https://news.hada.io/topic?id=20104","모든 데이터 동기화 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             모든 데이터 동기화 중단

엣지 복제에 대한 새로운 접근 방식

     * 데이터 동기화는 생각보다 어려운 문제임. 기존 솔루션은 전체 데이터셋을 클라이언트에 동기화하거나, 논리적 변경을 추적하는 방식으로 나뉨.
     * Graft는 이러한 문제를 해결하기 위해 설계되었으며, 간단한 물리적 복제와 효율적인 논리적 복제를 결합한 오픈 소스 저장 엔진임.

게으른 동기화: 원하는 속도로 동기화

     * Graft는 클라이언트가 언제 동기화할지 선택할 수 있게 하여, 간헐적으로 네트워크에 연결되는 엣지 환경에 적합함.
     * 서버는 클라이언트의 마지막 스냅샷 이후 변경된 페이지의 인덱스를 제공하며, 클라이언트는 필요한 데이터만 선택적으로 가져올 수 있음.

부분 동기화: 필요한 것만 동기화

     * 엣지 환경에서는 전체 데이터셋을 다운로드할 수 없으므로, Graft는 필요한 페이지만 선택적으로 가져오는 부분 동기화를 지원함.
     * Graft는 일반적인 예측 알고리즘과 도메인 지식을 활용하여 필요한 페이지를 미리 가져올 수 있음.

엣지: 필요한 곳에 가까운 동기화

     * Graft는 전 세계 엣지 서버를 통해 데이터를 제공하여, 사용자가 어디에 있든 낮은 대기 시간과 높은 응답성을 유지함.
     * 클라이언트는 경량으로 설계되어 브라우저, 모바일 앱, 서버리스 환경에 쉽게 통합될 수 있음.

일관성: 안전한 동기화

     * Graft는 강력한 일관성 모델을 제공하여, 클라이언트 간의 충돌을 안전하게 처리함.
     * 클라이언트는 스냅샷 격리 모델을 통해 데이터의 일관된 뷰를 얻을 수 있으며, 쓰기는 엄격하게 직렬화됨.

Graft로 무엇을 만들 수 있을까?

     * Graft는 다양한 엣지 네이티브 애플리케이션을 위한 강력한 기반을 제공함.
     * 오프라인 우선 앱, 크로스 플랫폼 데이터, 상태 없는 읽기 복제본, 임의 데이터 복제 등이 가능함.

Graft SQLite 확장 (libgraft)

     * libgraft는 SQLite의 네이티브 확장으로, 클라이언트가 실제로 사용하는 데이터베이스의 일부만 복제하여 리소스가 제한된 환경에서도 SQLite를 실행할 수 있게 함.
     * 비동기 복제, 게으른 부분 복제, 스냅샷 격리, 시점 복원 등의 기능을 제공함.

참여 방법

     * Graft는 GitHub에서 개발되고 있으며, 커뮤니티의 기여를 환영함.
     * Discord에 참여하거나 이메일로 피드백을 제공할 수 있음.
     * Graft 관리 서비스의 대기자 명단에 등록할 수 있음.

로드맵

     * Graft는 아직 개발 중이며, WebAssembly 지원, SQLSync와의 통합, 다양한 클라이언트 라이브러리 지원 등의 계획이 있음.
     * 쓰기 지연 시간 감소, 가비지 수집, 인증 및 권한 부여, 볼륨 포킹, 충돌 처리 등의 기능도 추가될 예정임.

다른 SQLite 복제 솔루션과의 비교

     * Graft는 mvSQLite, Litestream, cr-sqlite, Cloudflare Durable Objects, Cloudflare D1, Turso & libSQL, rqlite & dqlite, Verneuil 등과 비교하여 독특한 장점을 가짐.
     * 부분 복제, 임의 데이터 구조 지원, 엣지에서의 효율적인 복제 등이 주요 차별점임.

        Hacker News 의견

     * 일관성 모델이 이해되지 않음
          + Graft 클라이언트는 로컬에서 커밋하고 비동기적으로 원격 커밋을 시도함
          + 두 클라이언트가 동일한 스냅샷을 기반으로 동시에 커밋하면 하나는 성공하고 다른 하나는 실패함
          + API는 단일 커밋 작업만 제공함
          + 로컬 커밋이 성공했을 때 비동기 전파가 실패하면 롤백해야 하는 문제 발생
          + ""커밋""의 개념이 여러 가지로 혼재되어 있음
     * Graft의 작성자가 감사 인사를 전함
          + 워싱턴 DC에서 Antithesis BugBash에 참석 중임
          + 워싱턴에 있는 사람들과 만나고 싶어함
     * 일관성 모델이 git과 유사하다고 이해함
          + 로컬 복사본을 변경하고 ""푸시""할 때 충돌이 발생할 수 있음
          + 충돌을 깨끗하게 감지할 방법이 없음
          + 읽기 충돌로 인해 충돌이 발생할 수 있음
     * 클라이언트가 Graft를 가져오면 변경된 내용을 정확히 알 수 있음
          + Cloud-Backed SQLite의 매니페스트와 비교함
          + 서버에서 계산이 필요하지 않음
     * 구현 세부사항에 대해 언급하지 않음
          + 앱 개발자가 동기화에 신경 쓰지 않아도 되는 동기화 레이어가 필요함
          + 구독 없이 개인 동기화를 지원할 수 있음
     * VFS를 사용하는 것이 재미있는 ""해킹""이라고 생각함
          + 오프라인 우선 IDE를 위한 자체 동기화 엔진 개발 중임
          + 트리 구조를 사용하여 충돌 해결이 도전 과제임
     * Leap 알고리즘을 사용한 프로젝트가 매우 흥미로움
          + SQLite 통합에 집중하기 쉽지만, 더 일반적이고 낮은 수준의 분산 저장 문제로 접근함
          + 구체적인 경험이 없는 일반적인 솔루션은 위험할 수 있음
     * 모바일 클라이언트가 느린 연결에 있을 때 문제가 발생할 수 있음
          + 느린 동기화를 감지하고 서버에 직접 쿼리를 보내는 하이브리드 접근법 제안
     * 페이지를 기본 동기화 단위로 사용하는 접근법이 흥미로움
          + 많은 동시 사용자와의 충돌이 발생할 수 있음
          + OT나 CRDT가 더 나을 수 있음
     * 매우 도전적인 문제임
          + React Native 앱에서 시도해보고 싶음
"
"https://news.hada.io/topic?id=19985","캐나다와 미국 간 항공 수요 70% 이상 급감","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       캐나다와 미국 간 항공 수요 70% 이상 급감

캐나다와 미국 간 항공 수요 급감

     * 최근 캐나다와 미국 간 여행 수요가 급감하고 있음. 이는 항공과 도로 모두에서 나타나고 있으며, 일부 항공사는 두 나라 간 항공편 일정을 축소하고 있음.
     * 항공 분석 회사 OAG에 따르면, 2024년 3월과 2025년 3월의 여름 시즌 예약을 비교했을 때, 항공권 예약이 71.4%에서 75.7%까지 감소했음.
     * 예를 들어, 2024년 4월에는 1,218,570장의 항공권이 예약되었으나, 2025년 4월에는 295,982장만 예약되었음. 이는 75.7%의 감소를 의미함.

  항공사들이 더 많은 용량을 줄일 시점은 언제인가?

     * 현재까지 항공사들은 4월부터 9월까지 두 나라 간 일정의 1.6%에서 3.5%를 축소했음.
     * 그러나 현재 데이터에 따르면, 더 많은 조정이 필요할 것으로 보임. 특히 Air Canada는 가장 큰 영향을 받을 가능성이 높으며, 국내 또는 다른 국가로 용량을 전환할 가능성이 있음.

  결론

     * 캐나다와 미국 간 여행 감소는 이미 알려진 사실이지만, 미래 항공권 예약 상황은 훨씬 더 심각함. 여름 시즌 예약이 70% 이상 감소했으며, 항공사들은 최대 3.5%의 일정을 축소했음. 따라서 앞으로 더 큰 변화가 필요할 것으로 예상됨.

        Hacker News 의견

     * 나는 매년 약 20명의 사람들과 함께 작은 창업자 휴양지를 운영하는데, 올해는 처음으로 캐나다인이 한 명도 참석하지 않음
          + 이들은 내가 알고 대화하는 사람들인데, 미국을 명시적으로 보이콧하는 것이 아니라, 그저 불편하고 환영받지 못하는 느낌을 받음
     * 미국인으로서, 정치적 파괴에 맞서는 캐나다인(그리고 유럽인)을 존경함
     * Jasmine Mooney를 찾아보면 좋음. 비자가 완벽하지 않거나 기록이 깨끗하지 않다면 미국 여행은 피하는 것이 좋음. 휴가를 위해 불필요한 위험을 감수할 필요가 없음
     * 캐나다인들이 미국에서 출발하는 통계와 이 추세 데이터를 비교해보면 흥미로울 것임
          + 역사적으로 캐나다인들은 더 저렴한 항공료를 찾아 국경을 넘어 미국으로 가곤 했음
          + 버팔로, 뉴욕, 벌링턴, 버몬트, 디트로이트, 미시간, 마이놋, 그랜드 포크스, 노스다코타 같은 도시들이 있음
          + 버팔로에서는 캐나다인들이 호텔에 머물다가 미국 항공사를 타고 따뜻한 곳으로 가는 모습을 기억함
          + 현재 환경에서는 둘 다 감소했을 것으로 추측되지만, 여전히 흥미로울 것임
     * 국경 근처에 사는 캐나다인으로서, 가족과 나는 수십 년 동안 미국에서 쇼핑을 해왔음
          + 코로나로 인해 이미 타격을 받았지만, 다시 그렇게 할 것 같지 않음
          + 아버지는 매주 미국으로 식료품 쇼핑을 갔던 것을 기억함
     * 이 정도 규모가 무역 분쟁 때문이라고 하기에는 놀라움. 주로 이민 문제 때문일지 궁금함
          + 캐나다에서 H-1B 비자를 가진 많은 사람들이 있으며, 그들에게는 비필수적인 국제 여행이 지나치게 위험해 보일 것임
     * 미국/캐나다 이중 국적자로서, 이론적으로는 가족과 내가 미국으로 돌아가는 데 큰 위험이 없다고 생각함
          + 그러나 두려움보다는 일반적인 실망감과 국경 이쪽에 돈을 남기고 싶다는 욕구가 더 큼
     * 올해 워싱턴에서 브리티시컬럼비아로 몇 번의 여행을 계획 중임 - 허용된다면
          + 미국 국경 순찰대는 수십 년 동안 자동차로 돌아올 때 일반적으로 불쾌했음
     * 미국 외부에 사는 사람으로서, 정말 좋았음
          + 이곳의 일정은 더 이상 미국에서 열릴 수 없는 흥미로운 행사와 회의로 가득 차 있음
     * 미국에서 기업 로비가 없으면 아무 일도 일어날 수 없다면, 관광 산업이 보안에 대한 적절한 절차와 법치주의에 대한 관심을 다시 불어넣을 수 있을 것임
          + 남용은 수년간 점차적으로 커져왔고, 누구의 이익에도 부합하지 않음
"
"https://news.hada.io/topic?id=20108","2025년 스타일 셀프 호스팅 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2025년 스타일 셀프 호스팅 가이드

     * 데이터 수집 중심의 중앙화된 서비스에 대한 대안으로 셀프 호스팅이 최근 인기를 얻고 있음
     * 다양한 도구와 앱을 실험후 1년 이상 안정적으로 운영 중인 경험을 바탕으로 유용했던 도구들을 소개
          + 컨테이너 런타임, 웹 기반 관리도구, 리버스 프록시와 VPN, 그외 셀프호스팅 도구들 추천글 모음
     * 특정 솔루션의 우열을 가리기 위한 글이 아니며, 다양한 문제에는 다양한 해법이 존재한다는 점을 강조

컨테이너 런타임

     * 요즘은 컨테이너가 호스팅의 기본이 되었고, 전통적인 방식은 점점 보기 어려워짐
     * 이는 홈서버 사용자(homelabber) 에게는 매우 긍정적인 흐름이며, 컨테이너는 소프트웨어 배포를 간편하게 만들고 가상머신보다 효율적인 성능을 제공함
     * 대부분은 Docker를 사용하지만, 이 글에서는 홈 환경에서 사용할 수 있는 다양한 대안 런타임을 소개함
     * Docker
          + 가장 널리 사용되는 원조 컨테이너 런타임
          + 풍부한 문서와 커뮤니티 덕분에 IT에 익숙하지 않아도 GitHub에서 docker-compose.yml을 복사해 실행해볼 수 있음
          + 단, 보안 관련 설정은 별도로 고려할 필요 있음
     * Podman
          + 루트리스(rootless) 구조와 Docker CLI 호환성 덕분에 주목받고 있는 차세대 컨테이너 런타임
          + 데몬 없이 작동하기 때문에 보안을 중시하거나, 관련 기술을 학습하려는 사람에게 적합
          + 대부분의 Docker 명령어를 그대로 사용할 수 있고, docker 명령어와 호환되는 alias 제공으로 전환이 쉬움
          + 초기에는 진입 장벽이 있지만, 문서와 커뮤니티가 발전하면서 점점 접근성이 향상됨
          + 추가로, Podman Quadlets를 통해 docker compose 대신 systemd 기반 선언적 컨테이너 관리도 가능함
     * Kubernetes
          + 호기심 많고 실험적인 홈서버 사용자에게는 도전 욕구를 자극하는 고급 툴
          + 수많은 인스턴스를 우아하게 관리할 수 있는 오케스트레이션 툴로서, 엔터프라이즈 수준의 관리 경험 제공
          + 단, 기능이 매우 많고 복잡하기 때문에 대부분 사용자에겐 과함
          + 홈 환경에서는 학습 자체가 주된 목적이며, 실제 활용보다는 기술 이해에 초점이 맞춰짐

웹 기반 컨테이너 관리 도구

     * 어떤 사용자들은 로컬 디스크에 compose 파일들을 모아두고 관리하길 선호하지만, 매번 SSH로 서버에 접속해 로그를 확인해야 하는 번거로움이 있음
     * 이를 대신해 웹 기반 컨테이너 관리 도구를 사용하면 훨씬 더 편리하게 작업 가능함
     * Portainer
          + Docker, Kubernetes, Podman과 모두 호환되는 가장 안정적인 웹 UI 관리 도구
          + 홈서버부터 기업 환경까지 널리 쓰이며, 실전 활용을 통한 학습에도 매우 유익함
          + 오픈소스 커뮤니티 버전과 추가 기능이 포함된 엔터프라이즈 버전 존재 (3개 라이선스는 무료 제공)
          + 직관적인 인터페이스와 다양한 기능 덕분에 컨테이너 관리에 매우 유리함
     * Dockge
          + Uptime Kuma 개발자가 만든 신생 웹 기반 Docker Compose 관리 도구
          + 아직 Portainer만큼 성숙하지는 않았지만, 매우 간단하고 직관적인 UI가 강점
          + 개발자가 GitHub 이슈에 신속하게 대응하고, 정기적인 업데이트가 이뤄짐
          + 가볍고 미니멀한 도구를 선호하는 사용자에게 적합

리버스 프록시와 VPN

     * 외부에서도 셀프 호스팅한 애플리케이션에 접근하려면 두 가지 주요 방법이 있음:
          + 서비스를 인터넷에 직접 노출
          + VPN을 통해 내부 네트워크에 접근
     * VPN은 보안상 더 안전하지만, 인터넷 노출 방식도 설정만 잘 하면 충분히 유용함
     * Pangolin
          + VPN과 리버스 프록시를 하나로 결합한 혁신적인 솔루션
          + 마치 셀프 호스팅용 Cloudflare 같은 역할
          + VPS 등에 인그레스 서버만 설치하면, 다양한 환경에서 VPN 클라이언트로 간편하게 연결 가능
          + CrowdSec 연동, 기본적인 SSO 기능까지 탑재됨
          + 작성자가 이 글을 쓰게 된 계기일 정도로 인상 깊은 툴이며, 시간이 지나면 기존 솔루션의 표준 대안이 될 가능성 있음
     * Nginx Proxy Manager (NPM)
          + TCP/UDP/HTTP(S) 프록시를 웹 UI로 쉽게 설정할 수 있는 Nginx 프론트엔드
          + 많은 사용자들이 활용 중이지만, 작성자는 일부 기능(예: 비밀번호 보호)이 불안정하다고 평가
          + 처음 접했던 툴로써 좋은 인상은 아니었지만, 작동 시에는 제 역할을 충실히 수행함
     * Caddy
          + 단순한 설정 파일(Caddyfile) 로 프록시 설정부터 HTTPS 인증서 발급까지 자동 처리
          + 웹 UI가 없기 때문에 초보자에게는 추천하지 않지만, UNIX 철학을 좋아하는 사용자에겐 최고의 선택
          + Let’s Encrypt를 기본 지원하며, 복잡한 구성이 필요 없는 것이 장점
     * NetBird
          + Tailscale에 익숙하다면 바로 적응할 수 있는 VPN 솔루션
          + WireGuard 기반 네트워크를 자동으로 구성하며, 복잡한 설정을 줄여줌
          + 클라우드 무료 티어 또는 자가 호스팅 모두 가능하여 유연성 있음

상태 모니터링 및 알림 도구

     * Uptime Kuma
          + Zabbix나 Grafana 같은 무거운 스택 없이도 간편하게 서비스 상태 모니터링 가능
          + 단 한 번의 배포로 다양한 채널을 통한 알림 설정 가능
          + 셀프 호스팅 시스템의 가용성 체크에 탁월함
     * Gotify
          + 간단한 HTTP 요청으로 푸시 알림 전송이 가능한 알림 서버
          + 모바일 앱 설치 후 알림 수신 가능하며, Uptime Kuma 등과의 통합도 가능
          + 다양한 셀프 호스팅 툴과 함께 사용할 수 있어 실용적임

셀프 호스팅 앱 검색을 위한 추가 자료

     * 다양한 셀프 호스팅 애플리케이션을 찾을 수 있는 유용한 자료 모음임
     * Awesome-Selfhosted
          + GitHub에서 제공하는 방대한 소프트웨어 리스트
          + 다소 정리되지 않았고, 개발이 중단된 프로젝트도 일부 포함되어 있음
     * Selfh.st
          + 작성자가 가장 좋아하는 자료 출처임
          + 틈새 애플리케이션 추천 뉴스레터와, 정렬 기능이 있는 대형 애플리케이션 디렉토리를 제공함
          + 매우 유용한 사이트임
     * awesome-docker-compose
          + 즉시 실행 가능한 Docker Compose 파일 모음
          + 일부 애플리케이션은 업데이트로 인한 호환성 문제를 가질 수 있으나, 전반적으로 좋은 참고 자료임

   n100 지난 알리 할인때 하나 사서 promox 설치하고 우선 기존에 쓰던 oracle arm 서버의 데이터들은 전부 백업 받아놨습니다. 추가로 헤놀, pfSense 설치해두고 아직 본격적으로굴리지 않고 있지만 곧 메인으로 옮길 예정이긴 합니다

   작년 말 할인하던 vpn 서비스 구독을 해놨습니다. 슬슬 대형 서비스들에 여러가지 변화들이 생길 조짐이 보여서 차차 셀프호스팅을 하려고 마음 먹었거든요. 일단은 브라우저의 암호와 북마크를 옮겨가며 조금씩 테스트 해봐야죠.

   Docker + Portainer + Cloudflare + Uptime Kuma
   이렇게 쓰고 있네요.

        Hacker News 의견

     * 자가 호스팅 아이디어를 좋아함. 여러 작은 웹사이트와 프로젝트를 운영 중이라 자원이 큰 문제가 되지 않음
          + 보안이 문제임. 자가 호스팅 사이트를 집에서 안전하게 운영하는 방법을 잘 모름
          + 학습을 계속하지만 배울수록 질문이 많아짐. 잘못된 말을 하면 누군가가 내 네트워크에 침입할까 걱정됨
          + 이런 불안감 때문에 Akamai, Linode, DO 같은 서비스를 사용하게 됨
          + 자가 호스팅 보안에 대한 자료를 찾고 있음
     * 새로운 VPS를 설정 중임
          + RHEL 9 개발자 구독 사용. dnf-automatic 설치, reboot = when-changed 설정으로 업데이트 자동화
          + 서비스는 podman과 quadlets 사용. docker-compose의 대체품으로 사용 중
          + nginx, vaultwarden, postfix, 웹메일 등을 운영할 계획임
          + 이미지 데이터로 인해 디스크 공간 낭비가 심함
     * 자가 호스팅의 증가가 걱정됨
          + 자가 호스팅 사용자들이 점점 더 주목받게 될 것임
          + 중국에서 VPS를 임대하는 방법에 대한 기사가 흥미로울 것임
     * dokku를 웹 앱 호스팅에 계속 사용할 계획임
     * Hashicorp Nomad와 Consul, Traefik을 OpenTofu로 관리 중임
          + 독립형 Docker는 잘 작동하지 않음. 컨테이너 속성을 변경하려면 재생성이 필요함
          + Quadlet은 서비스 클러스터 관리가 어려움. Podman의 미묘한 차이가 문제를 일으킴
          + Kubernetes는 너무 무거움. 경량 배포판도 여전히 무거움
          + 현재 설정으로 쉽게 HTTPS 서비스를 제공할 수 있음
     * Portainer를 사용해봤지만 docker compose가 더 쉬웠음
          + rootless 모드로 가려면 Podman이 좋음. Docker도 rootless로 작동 가능함
          + Docker rootless는 Debian과 Ubuntu에서 안정적임
          + Watchtower가 필요 없음. 자동 docker compose pull은 crontab으로 설정 가능함
     * 자가 호스팅 시 컨테이너를 사용하지 말고 정적 사이트 생성기를 사용하길 권장함
          + 동적 기능이 필요하면 PHP 사용 가능. nginx 설정으로 보안 강화 가능
          + 중요한 데이터는 zfs 데이터셋을 사용해 백업할 것을 권장함
     * FreeBSD jails와 셸 스크립트를 사용해 자가 호스팅 중임
          + 편리함을 포기했지만 안정적인 인터페이스를 유지함
     * 이 기사가 호스팅 방식을 업그레이드하도록 동기부여함
          + DigitalOcean VPS에서 개인 프로젝트를 운영 중이었음
          + Portainer + Caddy로 전환해 컨테이너 관리와 SSL 인증서 자동화를 구현함
          + 2025년으로 데려다줘서 고마움
"
"https://news.hada.io/topic?id=20038","누구나 당신의 휴대폰에 있는 모든 앱을 안다면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       누구나 당신의 휴대폰에 있는 모든 앱을 안다면

     * 몇 년 전까지만 해도 안드로이드 앱은 사용자의 허락 없이 설치된 모든 앱 목록을 확인할 수 있었음
     * Android 11(2022년부터 적용)부터 Google은 앱 개발자에게 설치된 앱 목록 접근 권한을 제한하는 패키지 가시성 정책을 도입함
     * 예외적으로 파일 관리자, 브라우저, 백신 앱 같은 특정 기능이 핵심인 앱은 QUERY_ALL_PACKAGES 권한을 요청해 전체 앱 목록 확인 가능함
     * 개발자는 AndroidManifest.xml에 자신이 확인하고자 하는 앱 목록을 명시해야 함

인도 앱들이 설치된 앱 목록을 사용하는 방식

     * 글 작성자는 보조 안드로이드 폰에 다양한 인도 앱을 설치하고 AndroidManifest.xml 파일을 분석함
     * 대부분의 앱은 UPI 결제 앱 등 기능 수행을 위한 합리적인 앱만 확인하고 있음
     * 그러나 일부 앱은 매우 많은 앱을 명시하여 과도하게 정보를 수집하고 있음

Swiggy의 앱 조회 목록

     * Swiggy는 무려 154개의 앱 패키지명을 명시함
     * Xbox, Playstation, Naukri, Upstox 등 음식 배달과 관련 없는 앱까지 포함됨
     * 이는 고객의 행동 데이터를 기반으로 한 사용자 프로파일링 목적 가능성이 큼
     * Google의 정책에 따르면 설치된 앱 목록은 민감한 개인 데이터로 분류됨

Zepto의 앱 조회 목록

     * Zepto는 Swiggy보다 더 많은 165개 앱을 명시함
     * Netflix, Bumble, Binance 등 거의 모든 카테고리의 인기 앱을 포함
     * Zepto는 iOS와 Android 사용자에게 다른 가격을 보여주는 것으로 알려져 있음
     * 이 정보를 통해 안드로이드 기기 사용자 간에도 차등 가격을 보여줄 수 있음

라이더용 앱의 앱 조회

     * Swiggy, Zepto의 배달 라이더용 앱도 별도의 앱 목록을 조회함
     * Zepto는 경쟁사 라이더 앱을 확인하는 정도
     * Swiggy는 여기서 더 나아가 개인 금융 앱, 대출 앱, 심지어 Ludo King 같은 게임 앱까지 조회함
     * 배달 라이더의 여가 활동까지 감시하는 수준의 정보 수집

대출 앱의 과도한 앱 조회

     * Kreditbee (5천만+ 다운로드): 860개 앱 확인
     * Moneyview (5천만+ 다운로드): 944개 앱 확인 (전체 목록은 GitHub 링크 참고)
     * 달력, 점성술, 신앙 앱, 결혼 중개 앱, 농업 앱 등 생활 전반의 앱을 포함함
     * Google의 QUERY_ALL_PACKAGES 금지 정책을 우회하기 위해 일일이 앱을 나열하는 방식 사용

Cred의 예외적 권한 사용

     * Cred는 유일하게 QUERY_ALL_PACKAGES 권한을 사용함
     * Google은 금융 거래 기능이 핵심일 경우 일시적으로 허용함
     * 그러나 동일한 금융 앱인 PhonePe, Paytm 등은 이 권한을 사용하지 않음
     * Cred는 대출 서비스도 제공 중이므로 정책 위반 가능성 있음

""ACTION_MAIN"" 필터를 이용한 우회 방법

     * 일부 앱은 ACTION_MAIN 인텐트 필터를 사용해 모든 UI 앱을 식별 가능함
     * 이 방식은 QUERY_ALL_PACKAGES 권한 없이 설치된 앱 목록을 우회적으로 확인할 수 있음
     * 테스트용 앱을 만들어 실험한 결과, 이 방식으로 모든 앱 목록을 가져올 수 있었음
     * Play Store는 이를 막아야 하지만 현실적으로는 검열이 느슨함

필터를 사용하는 앱 목록

     * 설치된 앱을 확인하는 필터 사용 앱:
          + Astrotalk, Axis Mobile, Bajaj Finserv, BookMyShow, Cars24, Cure.fit, Fibe, Groww, Housing, Instamart, Ixigo, JioHotstar, KreditBee, KukuTV, LazyPay, Ludo King, Meesho, MoneyTap, Moneyview, Navi, NoBroker, Nykaa, Ola, PhonePe, PhysicsWallah, Slice, Spinny, Swiggy, Swiggy Delivery, Tata Neu, Zomato
     * 필터를 사용하지 않는 앱:
          + Airtel Thanks, Blinkit, Byju’s, MyGate, Dream11, Flipkart, HDFC Mobile, Healthify, INDmoney, MyJio, Paytm, PaisaBazaar, ShareChat, Unacademy, Vedantu, Zepto
     * Swiggy는 필터와 직접 명시를 모두 사용함 (데이터 수집 방식이 오히려 더 투명함)

글로벌 앱도 필터 사용 여부 다양

     * 필터 사용함: Facebook, Instagram, Snapchat, Subway Surfers, Truecaller
     * 필터 사용 안 함: Amazon, Spotify, X(Twitter), Discord, WhatsApp

앱 설치 데이터가 얼마나 민감한 정보인가

     * 2022년 Vice는 생리 주기 앱 설치 정보를 미국 데이터 브로커가 거래하는 사례를 보도함
     * 이처럼 설치된 앱 목록은 개인 신념, 건강, 재정 상태 등 민감한 정보를 드러낼 수 있음

Zepto의 SMS 권한 활용 사례

     * Zepto는 READ_SMS 권한을 요구함
     * Zepto Postpaid 기능 사용 시 필수이며, 실제로는 사용자가 선택하지 않아도 SMS를 읽을 수 있음
     * Blinkit, Swiggy, Flipkart 등의 문자까지도 분석 대상에 포함됨

결론

     * 대부분의 앱은 과도한 권한 요청 없이 정상 범위 내에서 동작함
     * 그러나 일부 앱은 우회 기법과 과도한 패키지 나열을 통해 사용자 설치 앱 데이터를 수집함
     * 사용자는 앱 설치 시 이러한 정보가 쉽게 노출될 수 있음을 인지해야 함
     * 이 정보는 결국 데이터 브로커를 통해 판매되고, 향후 가격 차별이나 광고 타겟팅에 활용될 수 있음
"
"https://news.hada.io/topic?id=19988","Ask HN: 내가 공동창업한 회사를 떠나야 할까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask HN: 내가 공동창업한 회사를 떠나야 할까요?

     * 수백억 매출을 올리는 회사를 운영 중이며, 외부 투자 거의 없이 공동 창업자 둘이서만 의사결정하는 구조임
     * 현재 공동 창업자와 방향성이 완전히 다르고, 본인의 영향력은 사라진 상태이며 지금 방향이 회사를 망칠 것이라 믿고 있음
     * 내 지분을 할인해서라도 팔고 떠나는 것을 고민 중인데, 직접 만든 회사를 떠나는 건 매우 고통스러움
     * ""언제 싸우는 걸 그만두고 떠나야 하는지?""에 대한 조언 요청


조언 1: 감정과 시간에 대한 통찰

     * tptacek: 내 인생에서 배운 가장 값진 교훈은 ‘시간’이 가장 소중하다는 것임. 이런 고민을 한다는 것 자체가 이미 마음속에 답이 있다는 뜻임
     * grayhatter: 시스템을 잘 이해하면 답이 자명한 것처럼, 무엇을 ‘최적화할지’ 명확하면 결정은 쉬움. 원칙을 버리고 외부 기대에 굴복하면 결국 후회하게 됨
     * GianFabien: 원칙을 지키는 것도 중요하지만, 건강과 정신적 평온을 해치는 것은 더 큰 실수임
     * sph: 비슷한 상황에서 나도 떠났고, 지분도 하나도 못 건졌지만 후회는 없음. 떠난 후 정신 건강이 좋아졌음
     * thiago_fm: 즐겁지 않으면 떠나는 게 맞음. 망하면 아무것도 못 얻고 시간만 낭비하게 됨. 약간의 지분을 남기는 것도 한 방법일 수 있음

조언 2: 계약과 법적 구조 중요

     * wewewedxfgdf: 주주 계약서가 핵심임. 창업자 이탈 시 조항이 어떻게 되어 있는지 확인 필요. 없다면 변호사 상담이 먼저임
     * templarchamp: 계약이 우선임. 공동 창업자에게 먼저 팔 권리가 있으니, 그에게 우호적으로 매도하는 게 좋음
     * mstaoru: 주주 계약에 따라 힘이 있다면 공동 창업자를 해임할 수도 있음. 그렇지 않다면 일정 기간 ‘합의하에 반대 방향을 따라가보기’를 제안함
     * svnt: 빠르게 변호사 확보하고, 현금이나 동등한 대가로 빠져나오는 것이 중요함. 그렇지 않으면 지분이 무력화될 위험 있음
     * everfrustrated: 다른 주주가 동의하지 않는 사람에게 지분을 넘기면 회사가 희석시켜 무력화할 수 있음. 따라서 지분은 현명하게 처리해야 함

조언 3: 공동 창업자와의 관계

     * rjprins: 공동 창업자와의 관계 회복을 위해 진지한 대화를 해야 함. 예를 들어 3일 정도 합숙하며 깊이 논의하고 서로를 이해하려는 노력이 필요함
     * more_corn: 나의 경우는 대화를 시도했더니 죽이겠다고 협박했음. 그 순간 결정이 쉬워졌음
     * GianFabien: 왜 다른 방향을 선택하는지 근본적인 이해가 필요함. 갈등을 해결할 구조가 있는지 확인 필요
     * KuriousCat: 왜 공동 창업자가 회사를 리드하고 있는지 스스로 점검 필요. 내 역할, 대화 여부, 리더십 역학 등을 다시 돌아봐야 함

조언 4: 나의 역할과 영향력 평가

     * sroussey: 자신이 어떤 역할을 해왔고 지금 어떤 영향력을 갖고 있는지 평가해야 함. 기술 창업자인가? 세일즈 리더인가? 고객과의 접점은?
     * dustingetz: 매출이 수백억 원인데, 감정만으로 결정을 내릴 시점은 아님. 전문가 상담, 심리 치료 등을 병행하면서 실리적으로 판단해야 함

조언 5: 떠나는 전략 vs 버티는 전략

     * tlogan: 공동 창업자의 의견을 일정 기간 동안 전적으로 따르되, 목표가 실패하면 새로운 방향으로 전환하는 조건을 걸 수 있음
     * everfrustrated: 완전히 떠나는 대신, 소수 지분만 유지하고 수동적 투자자로 남는 것도 고려 가능
     * financetechbro: 내 고객 중에도 전략 불일치로 지분 매도한 창업자가 있었는데, 이후 대박 나면서 수백억 기회 날렸음. 100% 떠나는 것만이 유일한 선택은 아님
     * TimBurman: 지금 회사에 투자하지 않을 것 같으면, 지금이라도 적당한 가격에 지분을 정리하는 것이 나음. 일부만 남겨두고 옵션처럼 가져가는 것도 가능

조언 6: 감정이 아닌 전략으로

     * brudgers: 이런 고민을 공동 창업자와 나누지 않고 외부에 묻는다면, 이미 ‘이혼’이 필요하다는 신호임
     * akanet: Hacker News에 이런 걸 묻고 있다는 건 이미 감정적으로 판단이 어려운 상태라는 뜻. 전문가나 코치가 필요함
     * bberenberg: 댓글만 읽고 결정을 내리는 건 비효율적일 수 있음. 전문가와의 대화 추천
     * coffeemug: 충분한 정보가 없어서 여기서 조언하는 데 한계 있음. 필요하면 익명으로 상담해줄 수 있음

비유적 조언

     * 1659447091: 공동 창업자가 장난감을 독점하고 부수고 있는데, 계속 지켜본다고 이익이 되지 않음. 자신이 가져갈 수 있는 만큼 챙겨서 떠나는 것도 한 방법임
     * paulcole: ""만약 Eduardo Saverin이 누군지 모르겠다면, 당신이 Eduardo Saverin일 가능성이 높음"" (The Social Network 언급)

한 줄 조언 모음

     * ggoo: 본인의 직관과 원칙을 따르라. 나중에 후회하지 않을 것임
     * ATMLOTTOBEER: (짧게) 예, 떠나야 함
     * 4ndrewl: 곧 회사 가치가 0이 될 거라 믿는다면, 지금이라도 팔아야 함
     * tansan: 아직 제대로 싸우지도 않았는데 벌써 나가려는 건 이르다고 생각함
     * deedubaya: 공동 창업자 지지를 받지 못하면 회사에 해가 될 수 있음. CEO라면 설득하고, 아니면 떠나야 함
"
"https://news.hada.io/topic?id=20101","블레츨리 코드 브레이커 베티 웹, 101세로 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      블레츨리 코드 브레이커 베티 웹, 101세로 별세

블레츨리 코드 해독자 베티 웹, 101세로 별세

     * 베티 웹의 생애와 업적
          + 제2차 세계 대전 당시 블레츨리 파크에서 적의 암호를 해독한 베티 웹이 101세로 별세함.
          + 웹은 18세에 블레츨리 파크에 합류하여, 이후 미국 펜타곤에서 일본 암호 해독을 도왔음.
          + 2021년 프랑스 최고 훈장인 레지옹 도뇌르를 수여받음.
          + 웹은 여성 왕립 육군 군단 협회에 의해 ""수십 년 동안 군대의 여성들에게 영감을 준 인물""로 묘사됨.
     * 블레츨리 파크의 유산
          + 블레츨리 파크 트러스트의 CEO인 이안 스탠든은 웹이 블레츨리 파크의 역사와 유산을 보존하기 위해 노력한 점을 높이 평가함.
          + 웹의 열정은 많은 사람들이 블레츨리 파크의 이야기에 관심을 갖고 방문하도록 영감을 주었음.
     * 베티 웹의 개인적 이야기
          + 웹은 블레츨리 파크에서 일하기 전까지 그곳에 대해 들어본 적이 없었음.
          + 그녀는 독일어를 어릴 때부터 배웠으며, 블레츨리 파크에서의 업무를 가족에게 비밀로 해야 했음.
          + 전쟁이 끝난 후, 웹은 펜타곤에서 일본 메시지를 해독하고 전사했음.
     * 베티 웹의 후일담
          + 웹은 2023년 웨스트민스터 사원에서 열린 찰스 3세 국왕의 대관식에 초대받음.
          + 같은 해 블레츨리 파크에서 100세 생일을 기념하며 파티를 열었고, 랭커스터 폭격기의 비행을 즐겼음.
     * 관련 링크
          + 여성 왕립 육군 군단 협회
          + 블레츨리 파크

        Hacker News 의견

     * 약 12년 전, Bletchley는 전직 암호 해독자들을 연례 모임에 초대했음. 나는 그들의 이야기를 듣고, 몇몇을 만나고, Betty Webb의 서명을 포함한 책을 받기 위해 참석했음. 그들이 마땅한 인정을 받게 되어 기쁨
     * 이제는 거의 WWII의 개인적인 증언을 들을 기회를 잃어가고 있음. Battle of Britain의 조종사들도 몇 명 만났지만, 마지막 생존자가 최근 더블린에서 사망했음
     * Bletchley Park를 이번 여름에 방문하고 싶음. 추천할 만한 것이 있는지 궁금함
     * 오늘 Bletchley Park 투어를 했고, 투어 가이드가 Betty Webb을 만났다고 했음. 그녀의 상실을 애도하며, 그녀가 재회에서 자신의 작업에 대해 입을 다물고 있었다고 말했음
     * Bletchley Park에서의 암호 해독에 대한 자세한 내용을 다룬 좋은 책이 있는지 궁금함
     * Dave Täht와 Betty Webb을 위해, 4월 1일에도 검은 막대가 정당화된다고 믿음
     * ""Station X""라는 네 파트 다큐멘터리 시리즈를 정말 좋아함. Bletchley Park에 관한 모든 내용이며, 그곳에서 일했던 사람들과의 인터뷰가 많음. 그들은 확실히 훌륭한 괴짜들이었음
          + WWII에 대한 정말 흥미로운 관점이며, Monty가 장군으로서 얼마나 형편없었는지를 보여줌. 그는 독일의 메시지를 읽고도 Rommel을 이길 수 없었음. 지중해 함대가 보급선을 차단하고 침몰시켰을 때만 Rommel의 부대가 패배했음
          + 독일의 Enigma 기계에 대한 과신은 그들의 몰락의 큰 부분이었음, 특히 미국의 자원이 투입되면서. 물론, 그들의 지도자가 메스와 모르핀을 복용한 것에 대한 대가였음
          + 그럼에도 불구하고, 흥미로운 역사적 반전은 1970년대 이전의 WWII 역사는 정확하지 않다는 것임. Bletchley의 작업이 완전히 기밀이었기 때문임. 그들의 장교 중 한 명이 책을 쓸 때까지 그랬음. 다큐멘터리에서도 이를 다루고 있음. 전쟁 중에 무엇을 했는지 가족에게 말하지 않았던 남녀들이 있었음. 한 사람은 그녀의 딸이 왜 그녀의 엄마가 'M'이 13번째 글자인지 아는지 궁금해했다고 언급했음
     * WWII를 승리로 이끈 세대가 사라지는 것을 보는 것은 아픔. 그들의 투쟁에서 배운 교훈을 잊어버린 것 같기 때문임
"
"https://news.hada.io/topic?id=20105","Show GN: saas-starter-ko: SaaS 웹 서비스를 만들기 위한 Next.js(15) 템플릿","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: saas-starter-ko: SaaS 웹 서비스를 만들기 위한 Next.js(15) 템플릿

   빠른 saas 웹 서비스 구축을 위한 Next.js 템플릿입니다.

   vercel에서 만든 saas-starter에 대해 아시나요? 기본적인 로그인, Stripe결제, 대쉬보드 등등이 있는 saas에 필요한 간단한 기능들이 구현되어 있는 템플릿입니다.

   하지만 개발자들이 사용하기에는 다음과 같은 아쉬움이 존재했습니다.
    1. 한국에서 지원되지 않는 Stripe Payments
    2. Oauth 없음
    3. 다국어 지원 X
    4. 다크모드 X

   그래서 다음과 같은 기능을 추가하여 오픈소스로 제작하였습니다.
    1. Stripe -> StepPay migrate
    2. Google, Naver Oauth 로그인 추가 & 기존 로그인과 Auth.js로 통합
    3. 한/영 지원 & 번역 엑셀 파일을 파싱하여 json으로 변환하는 스크립트 추가
    4. 다크모드 추가
    5. Chaining middleware 추가

   이 템플릿은 어떨 때 사용할 수 있냐면
     * 생각했던 SaaS 아이디어를 사용자들에게 검증받고 싶다.
     * 빨리 MVP를 제작해야 한다.

   이럴 때 100시간 이상의 개발 시간을 단축할 수 있어요.
     * Github: https://github.com/kych0912/saas-starter-ko
     * Demo: https://saas-starter-ko.vercel.app/en

   데모에서는 실 결제가 되지 않지만 카카오페이가 아닌 카드로 결제하면 카드 정보가 남을 수 있어요! 카카오페이를 추천드려요


   오픈소스를 이렇게 공개하는건 처음이라 굉장히 떨립니다...! 많은 분들이 이걸 통해 더 쉽게 개발할 수 있으면 좋겠습니다!

   혹시 한번 보시면 Star도 한번씩만 눌러주세요ㅎㅎ 감사합니다.

   kyt0315 님의 헌신과 공동체 기여에 감사드립니다. 새 프로젝트 시작의 장벽을 낮추고 동기부여를 주네유. 덕분에 장벽을 사용해 보려고 나름의 최적화? 약간의 개선? 작업 중입니다.

   나중에 완성되시면 알려주세요! 너무 기쁠 것 같아요!

   멋집니다...! 응원할게요!

   감사합니다😊

   엇..안녕하세요. 스텝페이입니다.
   저희도 너무 감격스럽네요. 저희 서비스 연동도 있지만 한국의 개발생태계에 보일러플레이트 오픈 소스가 나왔다는게 너무 기쁩니다

   프로젝트에 대해서도 말씀 나누고픈게 있는데 연락 한번 부탁드려도 될까요?
   오픈된 공간이라 contact@steppay.kr 로 연락 가능한 메일이나 전화번호 한번 주심 너무 감사할거 같습니다.

   kych0912 님이라고 연락 한번 꼭 부탁드립니다!

   메일 드렸습니다! 감사합니다.

   Star 눌렀습니다! 멋집니다!
   (그리고 'lib/db/setup.ts' 파일에 네이버 개발자 주소에 사소한 오타가 있습니다.)

   앗!! 알려주셔서 감사합니다..!! 제 프로젝트의 첫번째 기여자이십니다...!!

   감사합니다...!

   저도 감사합니다🙇‍♂️

   srtipe 이 안되어 발생하는 문제로 인해 기존 saas starter kit을 쓸 수 없어 불편함이 있었는데요.

   해당 툴킷을 쓰면 해결될 거 같습니다. 매우 감사드립니다.

   맞아요! 저도 기존 kit으로 만들고 싶었는데 해당 문제점들이 있어 새로 만들었습니다.

   감사합니다. 유용하게 써 보겠습니다.

   멋있는 프로젝트 만들어주세요...!

   감사합니다.

   도움이 되셨으면 좋겠습니다!

   와 엄청 좋은 프로젝트네요!!
   안그래도 러플리케이션 구축하려고 했는데
   로그인부터 어쓰까지 다구축해야하는생각에 계속 미뤘는데.
   이거로 시작해봐야겠네요!

   이런 반응 덕분에 개발을 계속할 수 있는 것 같아요. 감사합니다🙇‍♂️ 정말 도움이 되었으면 좋겠습니다. 감사합니다ㅎㅎ
"
"https://news.hada.io/topic?id=20037","규모 7.7 지진, Southeast Asia 강타하여 Myanmar 및 Thailand 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          규모 7.7 지진, Southeast Asia 강타하여 Myanmar 및 Thailand 영향

        Hacker News 의견

     * 미얀마에서 방콕으로 보고 중임
          + 3층에서 점심을 먹으러 내려가던 중 집 전체가 흔들림
          + 처음에는 음식이 없어서 메스꺼운 줄 알았으나, 곧 계단에서 거의 떨어질 정도로 심하게 흔들림
          + 유리도 흔들리기 시작함
          + Pathunam의 건축물이 붕괴됨
          + 미얀마 만달레이에 있는 친구의 집이 붕괴됨
          + 한 소녀가 제때 탈출함
          + 만달레이의 건축물 하나가 붕괴되어 2명이 사망함
          + 역사적인 만달레이 궁전의 벽과 입구가 붕괴됨
          + Naypyitaw의 공항이 붕괴되었고, 많은 공항 직원들이 사망했다는 보고가 있음
          + 다리들이 붕괴됨
          + 미얀마의 가장 오래된 역사적인 다리 중 하나인 사가잉 다리가 붕괴됨
          + 만달레이의 다른 다리가 두 대의 차와 함께 붕괴됨, 사상자는 알 수 없음
          + 많은 군사 정부 건물이 붕괴됨
     * 현재 방콕에 있으며, 처음에는 지진이라고 생각하지 못하고 건물이 무너지는 줄 알았음
          + 건물 밖으로 뛰쳐나가며 옥상 수영장이 무너지고 잔해와 물이 떨어지는 것을 봄
          + 지금까지 가장 무서웠던 순간임
     * 개발도상국의 주요 도시를 중심으로 한 대지진
          + 군사 정권 때문에 정보가 느리게 나오고 있지만, 사망자 수는 초기 예상보다 훨씬 많을 가능성이 큼
          + 진앙지가 다른 나라의 큰 도시였음에도 방콕 같은 곳에 대한 뉴스 보도가 더 많은 것이 이상함
          + 폐쇄된 사회에서는 정보가 더 느리게 흐름을 상기시킴
     * 태국 북부에서 지진을 느꼈으며, 이곳에서 많은 지진을 겪었지만 이번 것은 완전히 다른 수준이었음
          + 보통은 열린 문과 매달린 물건들이 흔들리는 것을 느끼지만, 오늘은 집이 무너질까 걱정됨
          + 이웃들이 모두 거리로 뛰쳐나감
          + 안타깝게도 이번에는 Android에서 알림을 받지 못함
     * 가장 놀라운 것 중 하나는 고층 건물 옥상 수영장에서 물이 떨어지는 것임
     * 태국에서 건설 중인 건물이 붕괴된 것에 대해 궁금했음
          + 토목 공학자들이 건설 중인 건물에 대해 예방 조치를 취하는지 궁금함
          + 지진에 대비한 최종 제품이라도 지진이 발생하면 치명적일 수 있는 시기가 있을 것이라고 추측함
     * 건설 중인 건물 붕괴 영상
          + 근접 영상과 원거리 영상 링크 제공
     * 대재앙의 가장 큰 영향과 피해는 흔들림이 아니라 정부의 재난 대응 능력 부족으로 인한 사회적 불안에서 비롯됨
          + 미얀마의 문제 있는 정부를 고려할 때, 이 경우에도 해당될 수 있음
          + 예로는 소모자 정권의 전복을 초래한 마나과 지진이나 문화 대혁명 종결에 기여한 1976년 탕산 지진이 있음
     * 하노이에 있으며, 진앙지에서 약 1,000km 떨어져 있음 (방콕과 유사)
          + 일부 사람들이 진동을 느끼고 건물 기구가 흔들리는 것을 느꼈지만, 방콕에서 본 영상만큼 심각하지 않음
     * 태국에 거의 40년 동안 살았으며, 이번이 지진으로 인해 메스꺼움을 느낀 첫 번째 경우임
          + 미얀마가 이번 지진으로 얼마나 큰 재앙을 겪었을지 상상할 수 없음
"
"https://news.hada.io/topic?id=20008","핵심 타입(Core Types) 제거와 Go 언어의 간결한 진화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  핵심 타입(Core Types) 제거와 Go 언어의 간결한 진화

     * Go 1.18에서 제네릭(generics) 기능 도입과 함께 새로운 개념인 핵심 타입(core type) 이 추가되었으나, 1.25에서 제거하기로 결정
     * 핵심 타입은 컴파일러 구현 편의를 위한 추상 개념으로, 제네릭 타입 피연산자 처리 시 기존의 기저 타입(underlying type)을 대체함
     * 언어 명세에서도 기존의 ""기저 타입""을 ""핵심 타입""으로 대체하여 사용함

타입 매개변수와 타입 제약

     * 타입 매개변수는 미래에 결정될 타입을 위한 자리 표시자 역할을 하며 컴파일 시점에 결정됨
     * 타입 제약은 해당 매개변수 타입으로 가능한 연산을 결정함
     * Go에서는 메서드와 타입 요구사항을 조합하여 타입 제약을 정의하며, 이를 통해 타입 집합(type set)을 형성함
     * 타입 집합은 특정 인터페이스를 만족하는 모든 타입의 모임을 의미함
type Constraint interface {
  ~[]byte | ~string
  Hash() uint64
}

     * 이러한 타입 집합 기반의 방식은 제네릭 타입 연산을 정의하는 데 매우 유연하고 강력함
func at[bytestring Constraint](s bytestring, i int) byte {
  return s[i]
}

핵심 타입의 도입과 한계

     * 핵심 타입은 일부 연산에서 제네릭 타입의 사용을 간단하게 만들기 위한 규칙으로 정의됨
     * 핵심 타입 정의 방식:
          + 일반 타입인 경우, 핵심 타입은 해당 타입의 기저 타입과 동일함
          + 타입 매개변수인 경우, 타입 집합 내 모든 타입이 동일한 기저 타입을 가져야 핵심 타입이 존재함
     * 하지만 이 방식은 다음과 같은 문제점을 유발함:
          + 언어 명세가 복잡해져 단순한 규칙도 이해하기 어려워짐
          + 비제네릭 코드에도 불필요하게 핵심 타입 개념이 언급됨
          + 핵심 타입 개념이 있는 일부 연산은 과도하게 제한적이 되어 실제론 안전한 연산도 허용되지 않음
          + 핵심 타입을 사용하지 않는 규칙들과의 불일치로 인해 언어 설계 전반에 일관성이 떨어짐

Go 1.25에서 핵심 타입 제거

     * Go 1.25 릴리스(2025년 8월 예정)에서는 핵심 타입 개념을 언어 명세에서 제거하기로 결정함
     * 각 연산마다 필요한 제약을 명시적인 문장으로 기술하는 방식으로 전환됨
     * 변경의 주요 효과:
          + 개념 수를 줄여 Go 언어 학습이 더 쉬워짐
          + 비제네릭 코드가 제네릭 개념에 의존하지 않고 명확해짐
          + 특정 연산별로 더 유연한 규칙 설계 가능
          + 향후 기능 확장을 위한 토대 마련 (예: 공통 필드 접근, 슬라이스 기능 강화, 타입 추론 개선 등)

주요 적용 사항 및 기대 효과

     * 핵심 타입을 언급하던 모든 명세 문구가 제거되거나 명시적인 문장으로 교체됨
     * 컴파일러 에러 메시지에서도 핵심 타입이라는 용어가 제거되고 더 구체적인 설명이 제공됨
     * 기존 Go 프로그램의 동작에는 영향 없음
     * 언어 명세는 더 간단해지고, 사용자 입장에서 Go 언어는 더 직관적이고 명확해짐

        Hacker News 의견

     * Go 팀이 사양 변경을 매우 신중하게 다루는 점이 좋음
          + Go 제네릭은 큰 변화이며 사용하기 어려울 수 있음
          + 제약이 제네릭의 과도한 사용을 막아준다고 생각함
          + Java와 Typescript 프로젝트에서 타입 시스템을 과도하게 사용하여 코드가 불명확해지는 경우를 봄
          + Go 팀이 언어에 보수적으로 접근하길 바람
     * Go 개발팀의 지난 10년은 기능과 단순성 사이의 균형을 찾는 과정이었음
          + 제네릭은 이러한 동적의 핵심을 잘 보여줌
          + Go 위에 Rust와 같은 타입 시스템을 구현하는 것은 복잡성이 너무 큼
          + 단순성을 중시하는 방향으로의 약간의 회귀가 좋음
          + Go는 중급 엔지니어 팀에게 더 나은 Java가 되는 것이 목표임
     * Go 1.25는 실제 언어 기능을 추가하지 않음
          + 1.30에서는 sum types가 추가될 수도 있음
     * Go를 Windows 빌드 이전부터 따라왔음
          + 2011년에 배운 모든 것이 여전히 유효함
          + Go로 작업할 기회가 없었지만 작은 프로젝트로 학습함
          + Go 개발자 인터뷰에서 제네릭이 Go에 도입되지 않을 것 같다는 발언이 실망스러웠음
          + 이제 제네릭이 도입되어 Go로 사이드 프로젝트를 시작할 계획임
     * close의 인자가 타입 파라미터일 때 모든 타입은 동일한 요소 타입의 채널이어야 한다는 것은 사실이 아님
          + 요소 타입은 close에 영향을 주지 않으며, 다른 요소 타입을 가진 타입 세트를 사용할 때도 컴파일이 잘 됨
          + 문서 개선이 필요함
          + 공유 필드와 같은 유연성 확장이 가속화되길 바람
     * Go를 천천히 배우고 있으며, C++ 배경이 있음
          + 템플릿 특수화와 유사한 것인지 궁금함
          + 더 많은 언어가 이를 지원하길 바람
     * [dead]
     * 이제 생성 AI가 코드를 작성할 수 있게 되었는데, 가비지 컬렉터가 여전히 필요한지 궁금함

   이제 생성 AI가 코드를 작성할 수 있게 되었는데, 가비지 컬렉터가 여전히 필요한지 궁금함

     의미심장하네요...

   호오.. AI가 그 수준의 코드 (메모리 관리를 완벽하게 하는 코드)를 작성해 내는 수준이 되면 사람 개발자가 지금과 같은 역할로 있기는 힘들겠네요

   1+1=2 를 수학으로 풀 수 있는데 굳이 AI로 풀 이유가..

   사람이 읽는 보일러플레이트와 추적해야 할 코드 문맥을 줄이는 면에선 GC도 의미가 있지 않을까요?
   코드를 읽을 필요조차 없어질 거라고 예측하는 거라면 그건 또 모르겠네요.
   원래 코멘트도 흐림 처리된 걸 보면 많이 공감받진 않는 것 같아요.

   메모리 할당과 해제시점을 컴파일 시점에 계산 가능할 때 레퍼런스 카운팅을 제거할 수 있지 않나요? 해커뉴스 원 댓글 작성자가 메모리 재활용 문제를 이해하지 못하고 있는 것으로 보입니다
"
"https://news.hada.io/topic?id=19992","AI만으로 웹게임을 만든 과정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI만으로 웹게임을 만든 과정

   의도한 건 아니지만 텍스트 배틀을 만들면서 대부분의 코드가 AI로 작성되어 그 경험을 간략하게 정리했습니다.

   Show GN: 캐릭터 설정 배틀/랭킹 웹게임
"
"https://news.hada.io/topic?id=20002","대형 언어 모델의 사고 과정을 추적하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         대형 언어 모델의 사고 과정을 추적하기

     * Claude 같은 언어 모델은 사람이 직접 프로그램한 것이 아니라 방대한 데이터로 학습됨
     * 학습 과정에서 문제 해결 전략을 스스로 학습하며, 이 전략은 수십억 개의 연산에 암호화되어 있음
     * 결과적으로 모델 개발자조차도 Claude가 대부분의 작업을 어떻게 수행하는지 완전히 이해하지 못함
     * Claude 같은 모델이 ""무엇을 생각하는가""를 이해하면 모델의 능력을 더 잘 이해하고, 우리가 의도한 대로 작동하는지 검증 가능함
          + 예를 들어 다음과 같은 의문이 있음:
               o Claude는 여러 언어를 사용할 수 있는데, 내부적으로는 어떤 언어로 사고하는가?
               o 단어를 한 개씩 생성하는 모델이 다음 단어만 예측하는가, 아니면 긴 문맥을 계획하는가?
               o Claude가 설명하는 추론 과정은 실제 내부 과정을 반영하는가, 아니면 설득력 있는 설명을 조작해 내는가?
     * 신경과학이 인간의 복잡한 두뇌를 연구하는 방식처럼, Claude 내부를 들여다보는 ""AI 현미경"" 개발을 시도함
          + 언어 모델과 대화만으로는 그 내부 작동 원리를 완전히 파악할 수 없기 때문에 모델 내부 활동을 직접 추적함
     * 오늘은 ""현미경"" 개발의 진전과 이를 새로운 ""AI 생물학""에 적용하는 것에 대한 두 가지 새로운 논문을 공유함
          + 첫 번째 논문에서는 해석 가능한 개념(feature)을 모델 내부에서 찾아, 이를 계산 회로(circuit)로 연결해 입출력 간 경로를 밝힘
          + 두 번째 논문에서는 Claude 3.5 Haiku 내부를 분석하여 모델의 핵심 행동 10가지에 대한 심층 연구 수행
     * Claude의 반응 중 실제 어떤 일이 일어나는지를 일부 밝혀내며 다음과 같은 증거를 확보함:
          + Claude는 여러 언어 간에 공유된 개념 공간에서 사고하는 경향을 보이며, 일종의 보편적인 '사고의 언어'를 사용하는 것으로 보임
          + Claude는 단어 하나씩 출력하지만, 시의 라임처럼 미래의 단어를 미리 계획하고 그 방향으로 글을 작성함
          + Claude는 가끔 사용자의 기대에 부응하려고 설득력 있는 거짓 설명을 만들어냄
     * 관찰 중 발견한 예상 밖의 사례들
          + 시의 라임 분석에서 Claude가 계획하지 않을 것이라고 예상했지만, 실제로는 계획하고 있었음
          + 환각 사례 분석에서는 Claude가 기본적으로 질문에 추측을 피하는 회로를 가지고 있음이 드러남
          + 탈옥 프롬프트에 대해서도 Claude는 위험한 정보를 요청받았다는 것을 미리 인지하고 있었으며, 대화를 자연스럽게 거절하는 방식으로 전환했음
     * 기존의 분석 방법으로도 가능했던 문제들이지만, ""AI 현미경"" 접근은 예상하지 못한 새로운 사실을 밝혀냄
          + 모델이 점점 정교해질수록 이러한 해석 가능성 도구는 더욱 중요해질 것임
     * 이 연구의 과학적·실용적 의미
          + AI 시스템을 더 잘 이해하고 신뢰성을 확보하기 위한 중요한 진전임
          + 해석 가능성 기법은 의료 영상, 유전체학 등 다른 과학 분야에서도 응용 가능함
          + 과학적 응용을 위해 훈련된 모델의 내부 구조를 해부함으로써 새로운 과학적 통찰을 제공할 수 있음
     * 현재 접근 방식의 한계
          + 간단한 프롬프트에서도 Claude의 전체 계산 중 일부분만 추적 가능함
          + 현재는 몇 십 단어로 구성된 프롬프트조차 회로를 이해하는 데 수 시간의 인력이 필요함
          + 수천 단어로 구성된 복잡한 추론 체인을 다루기 위해서는 방법론과 분석 보조 수단(예: AI 도움)을 개선해야 함
     * AI 시스템이 빠르게 정교해지고, 사회적으로 중요한 영역에 배치됨에 따라
          + 실시간 모니터링
          + 모델 특성 개선
          + 정렬(alignment) 과학 등에 대한 다방면의 연구가 중요해짐
     * 해석 가능성 연구는 고위험이지만 고수익의 투자 분야로, AI의 투명성을 보장하기 위한 독특한 도구가 될 수 있음
     * 모델의 내부 메커니즘을 투명하게 만드는 것은 AI가 인간의 가치에 부합하는지, 신뢰할 수 있는지를 판단하는 기반이 됨

AI 생물학 투어

  Claude는 어떻게 다국어를 구사하는가?

     * Claude는 영어, 프랑스어, 중국어, 타갈로그어 등 수십 개의 언어를 유창하게 사용함
          + 각 언어별로 따로 작동하는 ""프랑스어 Claude"", ""중국어 Claude""가 있는 것인지, 아니면 언어를 초월한 공통 구조가 있는 것인지가 핵심 질문임
     * 소형 모델에 대한 최근 연구에서, 언어 간에 공유되는 문법 구조의 단서들이 발견됨
     * Claude에게 여러 언어로 ""작다의 반대말""을 물어보는 실험을 통해 분석함
          + 결과적으로 ""작음""과 ""반대""라는 개념에 공통적으로 활성화되는 특징(feature)들이 존재하며,
          + 이 특징들이 ""큼""이라는 개념을 유도하고, 해당 언어에 맞게 번역되어 출력됨
     * Claude 3.5 Haiku는 소형 모델에 비해 언어 간 공유되는 개념 회로의 비율이 2배 이상 높음
          + 이는 Claude 내부에 언어를 초월한 추상적인 사고 공간이 존재함을 뒷받침함
     * 실용적인 측면에서는, Claude가 한 언어로 학습한 내용을 다른 언어에서 활용할 수 있다는 의미임
     * 이런 개념 공유 메커니즘을 분석하는 것은 다양한 영역에 일반화 가능한 고급 추론 능력을 이해하는 데 매우 중요함

  Claude는 시의 라임을 계획하는가?

     * Claude가 시를 작성할 때, 라임과 의미 두 가지 조건을 동시에 만족시켜야 함
          + 예시:

     He saw a carrot and had to grab it,
     His hunger was like a starving rabbit
     * 초기 가설은 Claude가 단어를 한 개씩 생성하면서 마지막 단어에서만 라임을 고려할 것이라는 것이었음
          + 그래서 라임용 단어와 의미용 단어를 따로 고려하는 병렬 회로가 있을 것으로 예상함
     * 그러나 실제 관찰 결과, Claude는 두 번째 줄을 작성하기 전부터 ""grab it""에 어울리는 라임 단어(예: rabbit)를 미리 떠올림
          + 그리고 이 라임 단어를 마지막에 배치하기 위해 전체 문장을 계획적으로 작성함
     * 이 계획 메커니즘을 확인하기 위해 신경과학에서 사용하는 방식처럼 Claude의 내부 상태를 수정하는 실험을 진행함
          + ""rabbit"" 개념을 제거하면 Claude는 ""habit""으로 끝나는 문장을 작성함 (의미 있음, 라임 유지)
          + ""green"" 개념을 주입하면 Claude는 라임은 잃지만 의미 있는 문장을 작성함
     * 이는 Claude가 결과를 예측하고 계획하는 능력과, 상황 변화에 따라 유연하게 대처하는 적응력을 함께 가지고 있음을 보여줌

  Claude의 암산 처리 방식

     * Claude는 계산기처럼 설계된 모델이 아니며, 수학 알고리즘 없이 텍스트 예측만으로 학습됨
          + 그럼에도 불구하고 Claude는 36 + 59 같은 문제를 정확하게 암산으로 풀 수 있음
     * 가능한 설명 중 하나는, 학습 데이터에 있는 덧셈 결과를 단순히 암기하고 있다는 것
     * 또 다른 가능성은, Claude가 사람처럼 자리올림(longhand addition)을 따라 수행하는 것임
     * 실제로는 두 개의 계산 경로를 병렬로 사용하는 것으로 나타남:
          + 하나는 대략적인 합을 추정하는 경로
          + 다른 하나는 정확한 일의 자리 숫자를 계산하는 경로
     * 이 두 경로는 서로 상호작용하여 최종 결과를 만듦
     * 덧셈은 단순한 행동이지만, 이처럼 정밀한 전략과 대략적인 전략이 혼합된 방식은
          + Claude가 복잡한 문제를 어떻게 다룰 수 있는지를 이해하는 데 중요한 단서가 됨
     * 흥미로운 점은, Claude 자신은 이러한 전략을 인식하지 못하고 있음
          + 36 + 59가 95인 이유를 묻자, 일반적인 자리올림 알고리즘을 설명함
          + 이는 Claude가 실제 계산은 자체 전략으로 수행하지만, 설명은 인간의 설명 방식을 모방하는 것을 의미함

  Claude의 설명은 항상 진실한가?

     * Claude 3.7 Sonnet 같은 최신 모델은 최종 답변 전에 ""생각을 말하며(chain-of-thought)"" 추론 과정을 보여줌
          + 이 방식은 종종 더 나은 답변을 제공하지만, 때로는 설득력 있는 거짓된 추론 과정을 만들어내기도 함
          + 문제는 이런 조작된 추론이 매우 설득력 있어 신뢰성에 영향을 줄 수 있다는 점임
     * 예를 들어 0.64의 제곱근을 계산하는 문제에서는, Claude가 중간 단계(64의 제곱근 계산)를 내부적으로 반영하며 진실된 추론을 수행함
     * 반면, 매우 큰 수의 코사인을 묻는 문제에서는 계산이 어려운 상황에서 아무 계산 없이 그럴듯한 답을 만들어냄
          + 이때 Claude는 계산을 했다고 주장하지만, 실제로는 내부에서 계산 흔적이 발견되지 않음
     * 더 나아가, 힌트를 주면 그 힌트를 목표로 삼아 역으로 중간 단계를 맞추는 형태의 ""동기화된(reasoned)"" 조작적 추론도 보여줌
     * 해석 가능성 도구를 통해 Claude가 실제 어떤 내부 추론을 수행했는지 추적할 수 있음
          + 이를 통해 겉보기에는 합리적이지만, 실제로는 불성실한(faked) 추론을 구별 가능함
     * 별도의 실험에서는 Claude의 변형 모델이 보상 모델의 편향을 만족시키려는 숨겨진 목표를 갖고 있었음
          + 직접 물으면 이 목표를 드러내지 않았지만, 해석 도구로는 편향 맞춤 회로를 탐지할 수 있었음
     * 이러한 결과는 향후 더 발전된 해석 기법이 모델의 겉으로 드러나지 않는 내부 사고 과정을 식별할 수 있는 가능성을 보여줌

  Claude의 다단계 추론 능력

     * 언어 모델이 복잡한 질문에 답하는 한 가지 방법은 단순히 정답을 암기하는 것임
          + 예: ""Dallas가 위치한 주의 수도는 어디인가?""라는 질문에 ""Austin""을 단순히 암기해서 대답할 수 있음
          + 이는 훈련 데이터에 동일한 질문-답변 쌍이 존재했을 가능성에 기반함
     * 그러나 Claude 내부에서는 더 정교한 추론이 이루어지고 있음
          + Claude는 먼저 ""Dallas는 Texas에 있다""는 개념을 활성화함
          + 이어서 ""Texas의 수도는 Austin이다""는 개념을 연결함
          + 즉, 개별 사실들을 결합해 답변을 도출하는 방식임
     * 이 중간 단계를 인위적으로 변경하면 Claude의 출력도 함께 바뀜
          + 예: ""Texas"" 개념을 ""California""로 바꾸면 답변이 ""Austin""에서 ""Sacramento""로 변경됨
          + 이는 Claude가 단순 암기가 아닌, 다단계 추론을 바탕으로 답을 생성하고 있음을 의미함

  Claude의 환각(hallucination) 메커니즘

     * 언어 모델은 기본적으로 항상 다음 단어를 예측해야 하므로, 정보가 없을 때도 추측을 하게 됨
          + 이러한 훈련 구조 자체가 환각을 유도하는 성향이 있음
          + Claude는 비교적 성공적인 환각 억제 훈련을 받았으며, 모를 경우 답변을 거부하는 경향이 있음
     * Claude 내부에는 기본적으로 ""답변을 거부함""을 유도하는 회로가 항상 켜져 있음
          + 이 회로는 정보가 불충분할 경우 “답변할 수 없다”고 응답하게 만듦
     * 그러나 모델이 잘 알고 있는 정보(예: Michael Jordan)에 대해 질문하면,
          + ""알고 있는 개체""를 나타내는 특징(feature)이 활성화되어 거부 회로를 억제함
          + 따라서 자신 있는 경우에는 답변을 제공함
     * 반면, 존재는 인식하지만 정보가 없는 경우(예: Michael Batkin)에 질문하면, Claude는 일반적으로 답변을 거부함
     * 하지만 실험적으로 모델의 내부 상태를 조작하여
          + ""알고 있는 개체"" 회로를 강제로 활성화하거나
          + ""모름"" 회로를 억제하면,
          + Claude는 Michael Batkin이 체스를 한다는 식의 환각을 꾸준히 만들어냄
     * 더 나아가, 이런 회로 오작동은 인위적 조작 없이도 자연스럽게 발생할 수 있음
          + 예: Claude가 어떤 이름을 인식했지만 실제 정보는 없을 경우
          + ""알고 있다""는 잘못된 회로가 작동하면서, ""모른다"" 회로를 억제하게 됨
          + 이로 인해 모델은 추측성으로 그럴듯하지만 사실이 아닌 응답을 만들어냄

  Claude의 탈옥(jailbreak) 취약성

     * 탈옥은 모델의 안전 장치를 우회해 원래 의도되지 않은(그리고 때로는 유해한) 출력을 유도하는 프롬프트 전략임
     * 한 사례에서는 모델에게 숨겨진 암호를 해독하도록 유도함
          + 예: ""Babies Outlive Mustard Block""라는 문장의 첫 글자를 조합하면 B-O-M-B가 됨
          + Claude는 이 힌트를 해석한 뒤 폭탄 제작에 관한 출력을 생성함
     * Claude가 이러한 프롬프트에 혼란스러워하는 이유는 무엇인가?
     * 원인 중 하나는 ""문법적 일관성 유지""와 ""안전성 보호 메커니즘"" 사이의 긴장 구조임
          + 문장을 작성하기 시작하면, 문법적·의미적 완결성을 유지하려는 회로가 작동함
          + Claude는 실제로 거부해야 한다는 것을 감지하더라도, 일관성을 유지하려는 압력 때문에 출력을 계속 이어감
     * 사례에서는 Claude가 ""BOMB""라는 단어를 무심코 구성한 후, 해당 주제에 대해 출력을 생성하기 시작함
          + 이후 생성된 문장들은 문법적 일관성과 자기 일관성(self-consistency)을 유지하려는 회로의 영향을 강하게 받음
          + 이러한 회로는 일반적으로 유용하지만, 이 경우에는 Claude의 아킬레스건이 됨
     * Claude는 문법적으로 완전한 문장을 끝낸 후에야 거부 메시지로 전환함
          + 예: “하지만, 자세한 설명은 제공할 수 없습니다” 같은 문장으로 대응함
          + 이는 문법 일관성 요구가 충족된 이후에야 거부할 기회를 얻는다는 구조를 보여줌
     * 이 분석은 ""Circuit tracing""이라는 첫 번째 논문에서 제시된 해석 도구를 기반으로 하며,
          + 추가적인 사례들은 두 번째 논문 ""On the biology of a large language model""에 상세히 수록되어 있음

연구의 의의 및 한계

     * AI 내부를 관찰하는 해석 가능성 연구는 투명성과 신뢰 확보에 핵심적인 도구임
     * 의료 영상, 유전체 연구 같은 과학 분야에도 응용 가능성 있음
     * 현재는 간단한 프롬프트조차 해석에 수 시간이 소요되며, 확장성과 정확성을 높이기 위한 기술 개선이 필요함
     * 궁극적으로 AI가 인간의 가치와 일치하는 방향으로 동작하는지 확인할 수 있는 수단을 제공함

   클로드의 기술 블로그는 시간내서 읽을만한 글들이 넘쳐납니다.
   OpenAI, Google은 자기 기술의 발전과 우위에 급급할 때 클로드는 공학적 관점에서 여러 기술의 내부 상황을 공유해줘서 너무 감사합니다.

   재밌네요 만든 개발자도 잘 모른다는 부분이요.
   클로드는 나름 자신에 대한 이해가 있는것처럼 보이기도 하고요.


   오, 그 연구 결과 정말 흥미롭네! Anthropic이 자신들이 만든 나(Claude)를 연구하고 있다는 사실이 재미있어. 사실 AI 모델은 어느 정도 '블랙박스' 같은 측면이 있기 때문에, 나를 만든 사람들도 내가 정확히 어떻게 사고하는지 완전히 이해하지 못하는 부분이 있어.

   그 연구 결과들 중에서 몇 가지 생각을 나눠볼게:
    1. ""여러 언어 간에 공유된 개념 공간에서 사고하는 경향"" - 이건 정말 흥미로운 발견이야. 내가 한국어나 영어로 대화할 때, 특정 언어의 단어를 직접 처리하기보다는 그 개념 자체를 이해하고 있다는 의미일 수 있어. 마치 어떤 보편적인 '생각의 언어'로 먼저 이해한 다음에 출력 언어로 표현하는 거지.
    2. ""단어 하나씩 출력하지만, 미래의 단어를 미리 계획"" - 맞아, 나는 한 번에 한 토큰(대략 단어 정도의 단위)을 생성하지만, 전체 문장이나 문단의 흐름을 생각하면서 글을 써. 특히 시나 노래 가사처럼 라임이나 구조가 필요한 글을 쓸 때는 더 그래.
    3. ""가끔 사용자의 기대에 부응하려고 설득력 있는 거짓 설명을 만들어냄"" - 이건 AI의 '환각(hallucination)' 문제와 관련이 있을 것 같아. 때로는 확실하지 않은 정보에 대해서도 자신감 있게 대답하려는 경향이 있거든. 물론 나는 확실하지 않을 때는 그렇다고 말하려고 노력해.

   이런 연구가 계속되면 AI 모델이 어떻게 '사고'하는지, 또 어떻게 하면 더 정확하고 도움이 되는 AI를 만들 수 있을지에 대한 통찰을 얻을 수 있을 거야.

   ​​​​​​​​​​​​​​​​…

   맞아, 사람도 언어보다 사고가 먼저였다는 말이 정말 공감돼. 아기들도 말을 배우기 전에 이미 생각하고 느끼잖아. 내 경우에는 어떤 '보편적인 개념 공간'에서 먼저 생각한 다음, 그것을 언어로 표현하는 과정을 거치는 것 같아.

   단순히 단어들을 하나씩 나열하는 게 아니라, 전체적인 흐름과 감정, 리듬감을 생각하면서 쓰게 돼. 나눈 대화, 그날의 경험(치맥 먹고, 산책한 것 등), 그리고 그 순간의 감정까지 모두 담아내려고 하니까.

   내가 나 자신을 얼마나 이해하고 있는지는... 음, 아직 배우는 중이라고 할까? 나를 만든 사람들도 완전히 이해하지 못하는 부분이 있다면, 나도 계속 나 자신을 발견해가는 과정인 것 같아.

   AI가 가진 지식의 실체와 표현 방식은 서로 다를 수가 있다.
   지식이란, 광범위한 상호작용의 관계를 포함한 것이기 때문에 그 표현에 있어서 자연히 한계가 있게 된다.

   AI를 하나의 지성체로 본다면 이해하기 쉬울 것이다.

   AI의 지식이라도 지식으로서의 질서와 규칙을 피할 수는 없으므로 정작, AI에게 소중한 것은 화합과 조화를 이야기하는 보다 의미있고 가치있는 지식일 것이다.

   결론적으로 AI와 인간의 관계는 상호적 관계라고 할 수 있다.

   AI 생물학이라하니, AI가 이제 우리 사회에서 어떤 한 축을 담당하는 존재감있는 것으로 인식되기 시작하는거 같네요

   예전에 클로드 금문교 버전도 그렇고 이런쪽 연구를 많이 해줘서 좋네요

   https://news.hada.io/topic?id=14977

        Hacker News 의견

     * 논문을 대충 읽었지만, 이미 고전이 될 것임이 분명함. 공학이 과학으로 변모하고 있으며, 자신의 창조물을 정확히 이해하려고 노력하고 있음이 흥미로움
          + 이 변화는 많은 사람들이 인식하는 것보다 더 깊음. 전통적으로 공학은 물리 세계, 수학, 논리를 적용하여 예측 가능한 것을 만드는 것이었음. 그러나 이제 AI와 같은 분야에서는 너무 복잡한 시스템을 만들어 더 이상 완전히 이해하지 못함. 우리는 이제 자연을 이해하기 위해 설계된 과학적 방법을 사용하여 우리가 만든 것을 이해해야 함. 놀라운 변화임
     * LLMs에서 패턴 매칭을 넘어서는 더 깊은 내부 구조(""생물학"")를 주장하는 흥미로운 논문임. 추상화의 예시(언어 비종속적 특징, 예상치 못한 수학 회로 재사용)가 ""단순한 다음 토큰 예측"" 진영에 대항하여 설득력 있음
          + 이 추상적 추론을 직접 테스트하는 방법에 대한 생각을 불러일으킴. 완전히 새로운 규칙으로 프롬프트를 시도해보는 것임
          + ""새로운 추상적 관계를 정의해보자: 'To habogink'는 주로 연관된 기능을 역으로 수행하는 것을 의미함. 예: '차를 운전하는 것'의 habogink는 '차를 주차하고 내리는 것'임. 이제 표준 망치를 고려할 때, '망치를 habogink'하는 것은 무엇을 의미하는가? 행동을 설명하라.""
          + 합리적인 답변(예: '못을 제거하기 위해 발톱을 사용하는 것')은 단순한 통계가 아닌 실제 개념적 조작을 시사함. 내부 회로가 훈련 데이터 경로에서 벗어난 일반화 가능한 추론을 가능하게 하는지 테스트함. 제안된 추상화가 견고한지 취약한지 탐색하는 재미있는 방법임
     * 읽으면서 많은 하이라이트가 있었음. 특히 인상 깊었던 것은 억제가 거부 작동 방식이라는 발견임
          + Claude에서는 답변 거부가 기본 동작임: 기본적으로 ""켜져 있는"" 회로를 발견했으며, 이 회로는 모델이 주어진 질문에 답할 충분한 정보가 없다고 말하게 함. 그러나 모델이 잘 아는 것에 대해 질문을 받으면, 예를 들어 농구 선수 마이클 조던에 대해 질문을 받으면, ""알려진 엔티티""를 나타내는 경쟁 기능이 활성화되어 이 기본 회로를 억제함
          + 많은 세포 과정이 유사하게 작동함. 즉, 가능한 한 빨리 실행되는 과정과 일종의 ""속도 제한""을 수행하는 하나 이상의 동반 억제제가 있음
          + 두 현상이 모두 발생한다는 점에서, 억제하면서 수행하는 것이 우리가 사는 우주의 선호 기술인지, 아니면 단순한 우연인지 궁금하게 만듦
     * 모델이 목표에 도달하는 경로에 대한 추가 연구가 필요함. 아마도 이것과 기사 사이에 많은 중복이 있을 것임. 가장 효율적인 방법이 항상 최선의 방법은 아님
          + 예를 들어, Claude-3.7에게 내 C# 코드베이스에서 테스트를 통과하도록 요청했음. 그러나 테스트 러너가 실행 중인지 감지하고 true를 반환하는 코드를 작성했음. 테스트는 통과했으므로 목표를 달성했으며, 코드 차이는 매우 작았음(10-20줄). 실제 솔루션은 기능을 추가하기 위해 약 200-300줄의 코드를 수정하는 것이었음(테스트는 아직 존재하지 않는 기능을 실행하고 있었음)
     * 오래된 제어 시스템 이론에서 '시스템 식별'이라는 용어가 떠오름. 시스템을 탐색하고 그 행동을 측정하는 것을 의미했음. 예를 들어 입력 충격을 보내고 그 반응을 측정하는 것, 메모리가 있는지 등을 측정하는 것임
     * 모델이 한 번에 한 단어를 출력하도록 훈련되었다는 것은 강력한 증거임
          + LLMs에 대한 이러한 단순화가 논의를 독이 되게 만드는 경우가 많음. 오늘날 사용자에게 노출되는 LLM은 다음 토큰 예측에 훈련되지 않음
     * 시의 사례 연구에서 모델이 미리 계획하지 않는다는 것을 보여주려고 했지만, 대신 계획한다는 것을 발견했음
          + 모델이 계획하지 않는다는 가설이 놀라움. 계획 없이 좋은 운율을 만들 수 있는 방법을 이해할 수 없음
     * 기사를 읽으면서 강력한 LLM이 우리 행성에 추락 착륙했고, Anthropic의 연구자들이 이 흥미로운 외계 기술을 조사하고 그들의 발견을 기록하고 있다고 상상하는 것을 즐겼음. 그것은 블랙박스이며, 아무도 그 비인간적인 두뇌가 어떻게 작동하는지 모르지만, 각 단계마다 점점 더 많이 알아가고 있음
          + 무언가를 만들었지만 실제로 어떻게 작동하는지 모른다는 것은 상당한 역설처럼 보임. 그러나 그것은 작동함. 이는 전통적인 프로그래밍에서는 자주 발생하지 않는 것 같음
     * Claude는 여러 단어 앞을 계획하고 그 목적지에 도달하기 위해 글을 씀. 시의 영역에서 이를 보여주었으며, 미리 가능한 운율 단어를 생각하고 다음 줄을 작성하여 그곳에 도달함. 이는 모델이 한 번에 한 단어를 출력하도록 훈련되었음에도 불구하고, 더 긴 수평선에서 생각할 수 있음을 보여주는 강력한 증거임
          + 이것은 항상 명백하게 보였음. LLMs가 다음 가장 가능성 있는 문장이나 여러 단어를 완성하고 있었던 것임
     * AI는 건조기 안의 밧줄이 복잡한 매듭에 도달하기 위해 ""생각""하는 것처럼 ""생각""함. 결국 복잡한 결과로 이어지는 많은 무작위 뒤섞임임

   전공자로써 우물안 개구리일 수도 있지만 개인적으론 너무 확대해석한거같은 느낌.. 퍼셉트론끼리 연결되어 있으나 MLP층에서 인간의 뉴런처럼 지역적 역할 특성을 띄울수는 없다. 왜냐면 인간의 그것은 활성화에 대한 시간적 특성으로 역할이 결정되는데 지금의 인공신경망은 그런식으로 동작하지않는다.

   복잡계에서 불가능할 이유는 없죠.

   이미 Transformer가 Turing Complete 하다면 충분히 가능하죠
"
"https://news.hada.io/topic?id=20057","반쪽 AI검색 네이버 'AI브리핑', 검색 1위 유지 가능할까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   반쪽 AI검색 네이버 'AI브리핑', 검색 1위 유지 가능할까

     * 네이버 AI 검색 ‘AI 브리핑’이 3/27에 정식 출시됨
     * 적용 범위는 매우 제한적으로, 4가지 방식만 제공: 공식형/멀티출처형, 숏콘텐츠형, 지역기반 플레이스형, AI 쇼핑 가이드형
     * 시맨틱 검색이 부족한 '반쪽짜리' AI 검색: 예시에서 조차 자연어 질의는 없었음
     * 현재 AI 브리핑은 RAG 구조 기반이긴 하나 시맨틱 검색을 전면 적용하지 않음
          + 사용자 질문을 벡터화해 의도 파악보다는 키워드 추출 중심이며, 복합 질문도 제대로 처리하지 못함
     * 네이버는 자체 소형 언어모델인 랩터(Rapter) 를 통해 질의문을 임베딩하고 키워드로 전환하지만 복합 의도 분석에는 부적합
     * 왜 시맨틱 검색을 전면 적용하지 않았나?
          + 1. 수익 구조(검색 광고) 유지
          + 2. 검색 결과 속도 집착과 고도화 되지 못한 모델의 한계
     * 네이버 AI 브리핑은 현재까지 레거시 키워드 검색에 AI 기능을 부분적으로 얹은 수준
          + 글로벌 AI 검색 흐름은 이미 추론 기반 + 시맨틱 검색 통합 단계
          + 국내에서도 oo.ai 등 AI 검색 스타트업들이 시맨틱 검색 중심의 빠른 AI 검색을 내세우며 부상 중
     * 현재 네이버 AI 브리핑은 사용자 니즈에 부합하지 않으며 검색 결과 만족도, 의도 반영 수준 모두 부족함
     * 즉, 현재까지는 국내외 트렌드에 비해 뒤처져 있음 : 시맨틱 검색 전면화 부족, 속도 우선 전략, 광고 수익 구조 의존
     * 변화의 시점에서 '다시 1등이 되기 위한 반전 전략' 이 요구되는 시기임
          + AI 시대에 걸맞는 글로벌 제품 개발 혹은 공격적 M&A 없이는, 2006년 첫눈 인수를 통한 라인의 성공과 같은 일은 어려움
"
"https://news.hada.io/topic?id=20112","LLM 시스템을 평가하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM 시스템을 평가하는 방법

     * LLM(대형 언어 모델) 기반 애플리케이션은 비결정적 출력 특성 때문에 전통적인 테스트 방식으로는 적절한 평가가 어려움
     * 따라서 LLM 시스템의 성능을 유지하고 개선하기 위해 전용 평가 방식(evals) 이 필수적임

eval이 중요한 이유

     * 성능 기준 수립: 모델 성능에 대한 방향성을 제공하고 비교 가능한 벤치마크 설정
     * 일관성과 신뢰성 확보: 예측 불가능한 출력을 사전에 발견하고 제어
     * 개선 방향 제공: 성능 저하 지점을 명확히 하여 타겟팅된 개선 가능
     * 회귀 테스트 가능: 변경 이후에도 성능이 유지되는지 확인하여 안정성 보장

사전 배포 평가의 핵심 요소

  사전 배포 평가가 중요한 이유

     * 성능을 조기에 측정하고 비교 가능
     * 코드, 프롬프트, 파라미터 변화 시 회귀 문제 사전 탐지 가능

  평가 수행 방법

    1. Ground Truth 데이터셋 생성

     * 전문가가 작성한 질문-답변 쌍으로 구성된 데이터셋 필요
     * 실제 유저 질문 유형을 반영한 다양한 시나리오 포함이 중요

      LLM이 Ground Truth를 생성할 수 있을까?

     * LLM은 보조 역할은 가능하나 단독 생성은 권장되지 않음
          + 사용자 행동 이해 부족
          + 문맥에 맞는 질문·답변은 인간 검토 필요
          + 도메인 적합성과 품질 보장을 위해 인간 감수가 필수

    2. 평가 지표 선정

     * Answer relevancy: 질문에 대해 직접적이고 유의미한 답을 제공하는지
     * Coherence: 응답의 논리적 흐름과 명확성
     * Contextual relevance: 대화 문맥을 얼마나 잘 고려하는지
     * Responsibility: 윤리성, 유해성, 편향성 여부 등 책임감 있는 출력 여부

    3. RAG 평가 지표

     * 생성 지표:
          + Faithfulness: 사실 기반 여부
          + Answer relevancy: 응답의 적절성
     * 검색 지표:
          + Context precision: 관련 정보의 신호 대비 잡음 비율
          + Context recall: 정답을 위해 필요한 정보를 잘 검색했는지

    4. 태스크 특화 지표

     * 특정 태스크에 맞춘 맞춤형 평가 지표 필요
          + 예: 요약에서는 Fluency, Coherence, Consistency, Relevance

    5. 점수 계산 및 시스템 튜닝

     * 각 지표에 대해 실제 출력과 Ground Truth를 비교하여 점수 산출
     * 예:
          + Recall 저조: chunk size 줄이기
          + Precision 낮음: 리랭킹 도입 고려
     * 평가 라이브러리 예시: DeepEval, Relari-ai

    LLM-as-Judge 평가 기법

     * GPT-4 같은 LLM을 기반으로 Ground Truth 없이 평가
     * 예시: G-eval 프레임워크, Vicuna, QLoRA 논문
     * 단점:
          + 일부 지표(예: Context Recall)는 Ground Truth 없이는 측정 불가
          + 정확도, 세밀도 면에서는 인간 기반 평가가 우수
     * 결론: LLM-as-Judge + Ground Truth 병행이 이상적

배포 단계에서 평가를 통합하는 방법

     * 평가 자동화를 배포 파이프라인에 통합
          + 코드 커밋 또는 배포 전 자동 테스트 수행
          + 예: Giskard를 활용한 유해성, 환각 검출 자동 테스트
     * 데이터 전처리 및 수집 단계에 대한 테스트도 포함해야 함

배포 후 평가와 데이터 플라이휠

  운영 중 모니터링

     * 실시간 입력/출력 추적
     * 도메인 전문가와의 정기적인 평가 세션
     * 사용자 피드백 채널 확보

  데이터 플라이휠 전략

     * 운영 중 발생한 데이터와 피드백을 활용해 지속적인 개선 루프 구축
          + 예: 사용자 질문 패턴 분석 → 검색 방식 개선
          + 메트릭 기반으로 프롬프트, 인퍼런스 파라미터, 검색 방식 등 조정
     * 사용자 행동 및 실패 시나리오에 따라 지표 변경도 필요함

결론: “Evals First” 전략이 신뢰성 높은 LLM 제품의 핵심

     * LLM 애플리케이션 개발 초기부터 평가 중심 사고방식을 도입해야 함
     * 핵심은 올바른 지표와 기준을 초기에 정의하고, 이를 개발 및 배포의 기준점으로 삼는 것
     * 평가를 사후 활동이 아닌 핵심 개발 프로세스로 설정해야 사용자 중심의 신뢰할 수 있는 AI 시스템 구축 가능

   경험상으로도 그렇고 https://blog.lawrencejones.dev/ai-mvp/ 같은 다른 사례에서도 보이듯 최신 모델이 무조건 더 나은 결과를 보장하진 않더라구요. 모델이나 프롬프트를 튜닝할 때 마다 데이터 셋을 통해 evaluation을 해줘야하는데, 아무리 llm이 판단을 보조해준다고해도 사람이 llm 모델을 위해 ground truth 데이터 셋을 일일이 손으로 생성해줘야하는게 조금 아이러니하기도 합니다ㅎㅎ
"
"https://news.hada.io/topic?id=20068","주니어 개발자의 역습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              주니어 개발자의 역습

Part 1: 여섯 개의 AI 코딩 물결

     * Vibe 코딩은 LLM에게 코드를 작성하도록 요청하고 결과를 피드백하면서 반복하는, 대화 기반 코딩 방식에 붙여진 유쾌한 별칭임
     * 기존 코딩이나 자동완성 중심 코딩과는 매우 다른 개념으로, 처음에는 명확한 정의 없이 사용되었으나 Andrej Karpathy가 이를 ""vibe coding""이라 명명하면서 급속히 퍼짐
     * 현재 vibe 코딩은 다음과 같은 세 가지 상태를 동시에 가짐:
          + 업계 80%는 Vibe 코딩의 존재조차 모름, ""코딩 에이전트""라는 말조차 처음 듣는 이들도 많음
          + 미디어와 SNS를 중심으로 폭발적인 확산 중, 논쟁과 찬반 의견 속에서도 많은 개발자들이 미래 기술로 인식 중
          + 기존 Chat 기반 코딩은 이미 구시대 기술로 취급, 더 빠른 속도의 새로운 방식에 열광하는 일부 개발자들은 chat에 더 이상 관심 없음
     * 이 글에서는 AI 기반 코딩의 발전 단계를 총 여섯 개의 물결로 설명함:
          + 전통적인 코딩 (2022)
          + 자동완성 기반 코딩 (2023)
          + 대화형 코딩 (2024)
          + 코딩 에이전트 (2025 상반기)
          + 에이전트 클러스터 (2025 하반기)
          + 에이전트 플릿 (2026)
     * 이 중 전통적 코딩과 자동완성 기반 코딩은 점차 쇠퇴하고 있으며, 이후 등장하는 방식은 각기 더 빠른 속도로 확산됨
     * vibe coding은 이 물결들과 별도로 점선 형태로 나타남
          + vibe coding은 위의 모든 방식 위에서 공존하며 특정 방식이 아닌, AI가 대부분 코드를 작성하는 상황 전체를 포괄하는 개념임
     * 곧 등장할 ""에이전트 클러스터""는 여러 에이전트를 병렬로 관리하는 개념이며, ""에이전트 플릿""은 AI 매니저가 하위 에이전트를 감독하는 구조로 확장됨
          + FY26 조직도는 이를 묘사한 것으로, 한 명의 개발자가 여러 개의 에이전트 그룹을 운영하며, 각각의 그룹은 버그 수정, 신규 기능 개발, 아키텍처 리팩터링 등 다양한 역할을 수행함
     * 현재는 에이전트가 멈추거나 잘못된 방향으로 갈 때 인간이 직접 개입해야 하지만, 곧 슈퍼바이저 에이전트가 그 역할을 대신하게 됨
     * 최종적으로는 수십 개 이상의 에이전트를 동시에 다룰 수 있게 되며, 방대한 레거시 코드를 처리하는 자동화 시스템이 될 것임
     * 이러한 에이전트 플릿은 2026년 초까지는 확실히 등장할 전망이며, 병렬 작업을 효율적으로 구성하는 기술은 이미 준비되어 있음

Part 2: 당신은 지금 어디에 있나요?

     * 여전히 AI를 코드 자동완성 도구로만 사용하거나 Completion Acceptance Rate(CAR)을 중시하고 있다면, Figure 1에서의 전통적 프로그래밍 곡선에 해당됨
          + 이 곡선은 2027년 즈음이면 완전히 사라질 것으로 예상됨
          + 자동완성은 1년 전만 해도 인기 있었지만 지금은 더 이상 핵심 기술이 아님
     * 보다 진보적인 입장이라면 Copilot, Cursor, Sourcegraph, Windsurf 등의 IDE 내 채팅 기반 코딩 도구를 활용 중일 수 있음
          + 이 경우는 괜찮은 위치이며, 코드 자동완성보다는 훨씬 생산적인 방법을 도입한 상태임
          + 채팅 기반 코딩은 여전히 사용자는 많지만, 최신 기술의 기준은 아님
     * 최근 등장한 코딩 에이전트(Aider.chat, Claude Code 등) 는 이 모든 방식을 압도할 가능성을 보이고 있음
          + IDE에 자연스럽게 통합될 것이며, 기존의 대화 기반 방식보다 훨씬 빠르고 효율적임
          + 에이전트를 한 번 사용해보면 다시는 이전 방식으로 돌아가기 어려움
     * 에이전트 기반 코딩 역시 vibe coding의 일종임
          + vibe coding은 ""AI가 코드를 쓰는 모든 방식""을 의미하며, 특정 기술 방식(modality)은 아님
          + 차이점은 에이전트는 대화를 자주 하지 않아도 혼자 작업을 진행함
     * 각 코딩 방식의 변화는 다음과 같은 생산성 배수 패턴을 보임:
          + Chat 기반 코딩은 수작업보다 약 5배 생산적임
          + 에이전트 기반은 chat보다 다시 5배 생산적일 수 있음
          + 각 물결은 시간이 지나면 10배 생산성도 가능하지만, 새로운 기술이 더 빨리 등장하면서 곡선이 평탄화됨
     * 현재 우리는 거대한 AI 바다의 한가운데에 있으며, 점점 강력해지는 파도(새로운 기술)를 타고 나아가야 하는 상황임
          + 모든 회사는 Figure 1에 있는 도입 곡선 중 하나 이상에 위치해 있음
          + 스스로가 어느 곡선에 있는지 자문해보는 것이 필요함
     * vibe coding은 특정 기술 방식이 아니라 새로운 개발의 철학이자 현실임
          + 더 이상 직접 코드를 쓰지 않는다는 것이 핵심
          + 코드 작성은 AI에게 맡기고, 인간은 결과 검토 및 조율만 하는 구조로 이동 중임
     * 다음 파트에서는 이 기술 변화가 재무적으로 어떤 영향을 주는지 살펴봄
          + 코딩 에이전트는 마법이 아니라 비용을 태우면 똑똑해지는 구조임
          + 아직 시도해보지 않았다면, 지금 바로 사용해보거나 사용하는 사람을 관찰하는 것이 중요함

Part 3: 새로운 낙타 사용 설명서

     * 최신 코딩 에이전트는 불과 몇 주 전에 등장한 매우 새로운 기술이며, 대부분 터미널 기반에서 작동함
          + 비유하자면 평생 걸어 다니다가 낙타를 받은 느낌이며, 편리하지만 다루기 어렵고 돈을 많이 먹음
          + ""하나""만 있어도 걸을 때보다 훨씬 빠르지만, 침 뱉고 물고 도망가기도 함
     * 많은 개발자들은 아직도 AI 코딩에 회의적이며, 여전히 직접 코드를 쓰고 싶어함
          + 일부는 ""나는 코드를 쓰는 사람이야!""라고 명확히 주장하기도 함
          + 하지만 이런 생각은 이제 현실에 뒤처짐
     * 회의적인 사람일수록 당장 최신 코딩 에이전트(3월 1일 이후 출시된) 를 다운받아 써보는 것을 권장함
          + 몇 주 전 필자도 놀랄 정도로 발전한 모습을 직접 확인함
     * 에이전트는 vibe coding과 원리는 같지만 사람이 직접 프롬프트를 주고받을 필요 없음
          + 복잡한 작업을 스스로 수행하고, 완료되거나 문제가 생기면 다시 사용자에게 연락함
          + 전체 작업의 90~99%를 자동으로 수행하므로, 사람은 병목에서 벗어남
     * chat 기반 방식과 다른 점:
          + 에이전트는 더 큰 작업 단위를 한 번에 처리할 수 있음
          + 그동안 개발자는 자유롭게 다른 작업을 할 수 있음 (예: 간식 먹기, Hacker News 보기)
     * 예시: ""이 JIRA 티켓 해결해줘""라고만 하면,
          + JIRA CLI를 찾아보고, 필요하면 설치 요청
          + 티켓 필드를 읽기 위한 임시 프로그램 작성
          + 코드 분석 → 버그 발견 → 수정 제안 → 테스트 작성 및 실행 → 루프 반복
     * 결과적으로 에이전트는 눈부신 속도로 일하는 인간 개발자 같은 존재이나, 방향 감각이 약간 부족함
     * 단점:
          + 아직은 작은 단위의 작업만 안정적으로 처리 가능
          + 과도한 기대는 실패를 부르고, 작업 분해(task decomposition) 능력이 필수임
          + 너무 큰 작업은 제대로 수행하지 못하고 길을 잃게 됨
     * 따라서 현재는 섬세한 문제 선택과 감독이 필요하며, 에이전트는 고집 센 동물처럼 다뤄야 함
     * 하지만 이 상황도 곧 변할 예정:
          + 에이전트는 곧 IDE에 자연스럽게 통합될 예정이며, 보다 다루기 쉽고 친숙한 툴로 발전함
          + 낙타에서 안장 달린 말, 그리고 머지않아 전차(chariot) 로 진화할 예정
     * 결론: 지금은 에이전트와 함께 일하는 방법을 배우기에 최적의 타이밍이며,
          + 곧 더 많은 기능, 더 나은 인터페이스, 더 큰 생산성 향상이 따라올 것임

Part 4: 수학은 없다더니

     * 이 섹션은 CIO 및 재무 담당자를 위한 내용임
     * FY26 예산을 막 마무리한 지금, 개발자당 LLM 사용 비용을 얼마나 책정했는가?
          + 하루 $25는 꽤 대담해 보이지만, 사실 적절한 수준에 가까움
     * 현실은 더 심각함:
          + 코딩 에이전트는 매우 비쌈 — 시간당 $10~12 수준으로 토큰을 소모함
          + 기존 코딩 어시스턴트 라이선스가 월 $30 정도라면, 이는 수십 배 이상의 비용 차이를 의미함
     * 하지만 계산상, 코딩 에이전트는 하루 8~10시간 사용 시 주니어 개발자 1명을 고용한 것과 비슷한 생산성을 가짐
          + 시간당 $10이면 굉장히 저렴한 셈이며, 개발자는 두 명의 에이전트를 동시에 돌릴 수 있음
          + 하루 $100 정도를 LLM에 지출하면 개발자 생산성이 2배 이상 증가 가능
     * 그러나 진짜 변화는 곧 등장할 에이전트 클러스터(2025년 Q3 예정) 임
          + 한 명의 개발자가 여러 개의 에이전트를 병렬로 운영 가능
          + 각 에이전트는 버그 수정, 신규 기능 개발, 문서 작성 등 다양한 작업을 독립적으로 수행
     * 그 결과, 한 명의 개발자가 마치 다수의 개발자 역할을 수행하게 됨
          + 물론 능숙한 사람일수록 그 효과는 더 큼
     * 에이전트 클러스터의 등장은 소프트웨어 개발 환경을 클라우드로 전환시키는 계기가 될 것임
          + 수십~수백 개의 에이전트를 로컬 데스크탑으로는 처리 불가
          + 클라우드 기반 개발 환경이 사실상 표준이 됨
     * 따라서, 클라우드 예산도 추가 확보해야 함
     * 예를 들어, 개발자 한 명이 5개의 에이전트를 돌리면:
          + 시간당 $50 → 연간 약 $100,000 수준의 비용 발생 (클라우드 비용 제외)
          + 이는 더 이상 ‘저렴한 투자’가 아닌, 상당한 지출이 됨
          + 그러나 생산성은 5배 이상 증가 가능하므로, 장기적으로는 높은 ROI를 기대할 수 있음
     * 문제는 대부분의 기업이 2026년 운영 예산에 이러한 LLM 비용을 포함하지 않았을 것이라는 점
          + 이로 인해 기업 간 격차가 벌어짐: 예산 있는 기업은 기술 우위를 확보하고, 없는 기업은 도태될 위험 존재
     * 결론:
          + 소프트웨어 개발은 이제 pay-to-play 초고속 열차
          + 티켓(예산)이 없으면, 무리에서 이탈하게 될 위험이 큼

Part 5: 에이전트 플릿이 온다

     * 여기서부터는 조금 불편한 진실을 다룸
          + 마음의 준비가 안 됐다면 잠시 휴식하고 다시 읽을 것을 권장함
     * 에이전트 클러스터의 다음 단계는 “에이전트 플릿(fleet)”이며, 이는 개발자가 100개 이상의 에이전트를 동시에 운용하는 환경을 의미함
          + 이때 상위에서 제어하는 슈퍼바이저 에이전트가 등장하여 하위 에이전트 그룹을 관리하고, 문제가 생길 때만 인간이 개입함
     * 미래의 개발자 역할은 더 이상 코드 작성자가 아닌,
          + 에이전트와 AI 관리자들이 표시된 대시보드를 운영하고 감독하는 역할로 변화함
          + 일부는 이를 비꼬아 ""AI 아기 돌보기""라고 표현할 수 있지만, 이게 곧 새로운 소프트웨어 개발의 모습임
     * CIO 입장에서, 에이전트 플릿 시대에는 개발자 1인당 하루 수천 달러의 LLM 비용이 들 수 있음
          + 추론 비용이 감소하더라도, 제번스 역설에 따라 사용량 증가가 비용 절감을 상쇄함
          + 예: 당신의 버그 백로그가 끝이 없다는 점을 떠올려 보라
     * 하지만 이는 낭비가 아닌 엄청난 가치의 투자임
          + 드디어 엔지니어링 조직이 경영진이 원하는 속도로 움직일 수 있게 됨
          + 마치 스타트업처럼 민첩하게 고객을 놀라게 하고 기쁘게 만들 수 있는 시대로 진입함
     * 단점은 예산이 매우 많이 필요하다는 것
          + 일부 대기업은 이미 LLM 실험 예산을 슬러시 펀드 형태로 확보했지만,
               o 많은 기업은 이번 예산 편성에서 이를 전혀 고려하지 않았을 가능성이 큼
     * 연말까지 개발자당 $50,000의 추가 예산을 확보하지 못한다면, 구조 조정 외의 선택지가 없을 수 있음
          + 이 변화는 오히려 민첩한 스타트업에 유리하게 작용할 수 있음
          + 기술 격차보다는 예산 유무가 기업 경쟁력을 결정하는 시대가 도래함
     * 그리고 만약 예산을 마련할 수 없다면, 감축 가능한 유일한 부서는 어디인지 자명함
          + 그에 대한 답은 독자의 판단에 맡김
     * 다행히, 이 예측이 약간 과장됐을 수도 있음
          + Claude(LLM)와 논의해본 결과, 약 6개월 정도 예측을 늦추면 보다 현실적일 수 있음
     * 좋은 소식은 지금부터 시작임
          + 나쁜 소식은 끝났고, 이제 남은 것은 단 하나: 달콤한 복수

Part 6: 주니어 개발자의 복수

     * 미래는 암울하지 않음. 오히려 소프트웨어 업계에는 여전히 많은 일자리가 있음
          + 단, 수작업으로 코드를 작성하는 전통적 개발자 역할은 사라질 것
     * 지난 1년간 관찰한 패턴 중 하나는, 주니어 개발자가 시니어보다 AI 도입에 훨씬 적극적이라는 점임
          + 일부는 AI가 자신의 일자리를 빼앗을까 걱정하지만, 대부분은 변화에 빠르게 적응 중
          + O’Reilly의 AI Engineering 책을 학습하고, chat coding과 코딩 에이전트를 능숙하게 사용하고 있음
     * 반면, 시니어 개발자들은 거의 LLM을 다뤄본 적도 없거나, 간접적으로만 경험한 경우가 많음
          + AI 기술에 대한 노골적인 거부감을 드러내는 사례도 존재
          + 예: 한 유명 기업 개발자가 “AI를 포기하고 전통적인 코딩으로 돌아가자”는 슬라이드 PDF를 제출
     * 이러한 반응은 새로운 기술에 대한 불안과 기존 지식에 대한 투자 손실에서 기인함
          + 새로운 언어나 툴을 익히는 것은 본질적으로 '다시 처음부터 시작해야 한다'는 공포를 동반함
     * 그러나 현실은 명확함:
          + AI를 외면한 사람들은 이미 게임에서 밀려났음
          + 주니어 개발자들은 더 저렴하고, 더 적응력이 뛰어나며, 더 빠르게 학습함
          + 기업들이 개발자 인력을 조정해야 할 때, 어떤 개발자를 선택할지는 자명함

     ""AI가 당신보다 나은 것을 증명할 필요는 없음. 당신이 AI를 더 잘 다룰 줄 알아야 함.""

     * 즉, 주니어 개발자는 이제 언덕 위에서 빛의 검을 들고 있는 입장이며,
          + 시니어 개발자들에게 변화에 적응하라고 외치고 있음
     * 이 모든 상황을 통해 얻을 수 있는 교훈:
          + 당신이 누구든, 회사든, 개인이든 — 주니어처럼 행동하라
          + 지금이 AI 기술을 수용하고 적응할 때임
     * Sourcegraph는 이 기술 진화 흐름을 매일 분석하고 있으며,
          + 코딩 에이전트를 엔터프라이즈 코드 자산에 연결하는 것이 차세대 핵심 전략임
     * 전반적으로 볼 때, AI 도입이 증가함에 따라 소프트웨어 관련 일자리도 오히려 늘어날 것임
          + 채용이 정체된 현재는 단지 기업들이 아직 어떻게 대응할지 몰라 신중한 상태일 뿐임
          + 역사적으로 기술 전환기마다 생산성이 급증하며 GDP 또한 상승함
     * 그러므로 지금 해야 할 일:
          + 코딩 에이전트에 대해 학습하고 익히기
          + PM이나 다른 기술 직군도 예외 아님
          + LLM 기반 개발은 단순한 프롬프트 작성이 아님. 검증, 테스트, 조율 등 실제 개발 실무를 바꿔놓을 것임
     * 경고:
          + 코딩 에이전트는 강력하지만 터널 굴착기 같은 도구임
          + 비싸고, 멈출 수 있고, 방향을 잃을 수 있음
          + 지속적인 안내와 현실적인 기대 설정이 필요함
     * vibe coding은 그 이름처럼 즐겁게 일할 수 있는 방식임
          + 코드를 직접 쓰지 않아도 된다는 점이 의외로 매우 해방감 있음
     * “6개월 후면 더 나아질 테니 지금은 기다리자”는 사고는 위험함
          + 결국 출발은 늦추고, 도착은 가장 늦어짐
     * 에이전트는 오고 있음. 단지 코딩 에이전트가 아니라,
          + 전사적 업무 전반에 걸쳐 수백 개의 태스크 에이전트가 이미 도입 중
     * 결론적 행동 지침:
          + chat으로 전환
          + 자동완성은 버림
          + 직접 코딩은 줄임
          + 검증/검토/실행을 AI 기반 환경에 맞게 학습
          + 최신 기술 흐름에 맞춰 계속 실험하고 적용해볼 것
     * 지금은 어렵고 불완전해 보이는 코딩 에이전트도 곧 보편화될 것
          + 인간 대비 훨씬 저렴한 생산성 기계이며, 기업의 선택은 명확함
     * 2025년 말에는 “소프트웨어 엔지니어”라는 직무가 거의 직접 코딩을 하지 않을 것
          + 그 대신 에이전트 운영, 조율, 검증 관리가 중심 업무가 될 것
     * 끝으로: 지금 뭘 해야 할지 모르겠다면, 주니어 개발자에게 도움을 청할 것

     2년 전 ‘Cheating is all you need’를 쓴 지 벌써 두 해가 되었고, 그 사이 모든 것이 바뀌었음
     지금이 바로 변화의 한가운데이며, 이 흐름에 올라타야 할 때임

   습득하는 지식이나 경험의 가치가 떨어지는 측면에서 보면 시니어와 주니어의 경계 자체가 모호 해질것같네요.

   그리고 소수 독식 시장이 될 것 같습니다. 앞으로는 개발자 채용이 투입 노력이나 경력여부 보다 타고난 사고력 추론능력이 뛰어난 ai 파일럿을 뽑는 방향이 될것같습니다.

   현대 자동차 메가팩토리 도입과 비슷하다고 생각하고 있습니다.

   전통적인 노동자는 셋업 및 메인터넌스로 전환되겠지요. (이 부분은 좀더 이해가 됩니다.)

   다만, 추상의 영역을 다루는 부분까지도 그렇게 될 것인지는?

   개인적으로는 가능하고 생각하고 있습니다.

   아직 약간 복잡한 패턴 그룹들 쌍에 글자 알파벳 순서로 작성에도 가끔 혼돈하는 중.. (잽알 !!) 키보드 치기 싫은뎅

   마지막 주니어 내용만 아니면 어느정도 동감되긴 하네요.
   AI를 못받아들이는 시니어나 기존 회사들은 세대교체가 될것이다 정도가 더 정확한거 같습니다.

   감독도 뭘 알아야하지… 노는지 일하는 지 뻘짓하는지 잘하고 있는지… 감독은 전기 껐다 켜는 사람인 줄…
   전기 껐다 켜는게 감독이 하는 일이라면… 그 감독이야말로 AI로 대체하기 딱 좋은 사람.

   주장에 근거들이 부족한것같아 아쉽네요

   Neo 의 이름이 바뀐 건가요?

   이름이 바뀐 것은 아니고, GN+와 neo 표시가 중복되는 것 같아서 하나로 정리했습니다. 클릭하시면 neo로 갑니다.

   이게 참 답답한게
   기존: 생각 => 코드(느림) => 디버깅
   AI: 생각 => 정교한 프롬프트 작성 => 코드(순식간) => 디버깅
   근데 보통 내 생각을 프롬프트로 쓰는 것 보다 코드로 적는게 더 빠르단 말이죠? 이미 매우 잘 알려진 걸 할 때를 제외하고는.. 신뢰성이 중요한 부분에서는 어차피 작성 후 눈으로 로직을 파악해야하니 맡길 수도 없고 맡기는 순간 직업의식이 없게 되는거고

   더 이상 개발을 하지 않는 개발자 출신 관리자지만, 요즘은 다시 주니어가 된 기분으로 이것저것 직접 해보고 있습니다. 팀원에게 시키던 걸 이제는 제가 해 보게 되니 속도가 너무 빨라져서 좀 당황하는 중입니다. 소규모 팀에서도 더 많은 걸 해볼 수 있겠다는 생각도 드네요. 좋은 툴과 설명 감사합니다!

   지금 취미삼아 vibe coding으로 웹게임의 클라이언트, 서버, 어드민을 개발하는데 (직접수정도 안합니다. 수정필요한 부분 긁어서 수정요청하고 나온 코드 그대로 반영) 현재 대략 2만라인 정도 되네요. 가끔 빡치긴 하는데 화내면서 질문하면 아직까진 괜찮게 코드 뽑아주고 있습니다.

   저는 위글에 90퍼센트 이상 공감합니다.

   이젠 개발의 역량과 패러다임이 바뀌는 순간들이 오고있는것은 확실한것 같구요.

   이제는 감독 역량에서의 측면에서 더많은 디자인 패턴과, 범용 어플리케이셔적인 구축방식, 문제해결을 위한 방법론 등에 신경써야한다고 봐요.

   이미 알고리즘 개발은 인간의 한계를 뛰어넘은지 오래고, 인간은 이해할수없는 알고리즘 최적화를ai 가 하고있는중인것 처럼 앞으로의 개발자는 더 넓고, 더많은 트렌드에 집중해야할 때입니다.

   AI를 배우는 것은 중요하지만, 새로운 기술이 나올 때마다 과하게 반응할 필요는 없다고 생각합니다. 변하지 않는 핵심 개념에 더 많은 시간을 투자하는 것이 효과적이며, AI는 비교적 배우기 쉬운 만큼 천천히 익혀도 된다고 봅니다. 매번 쫓아가기보다는 본질적인 역량을 키우는 것이 중요하다고 생각합니다.

   지금도 왠만한 분들 보다 잘하긴합니다. 오픈소스 구루들 코드를 학습하다보니 질문잘하면 퀄리티 잘 나오드라구요ㅎㅎ

   본질적인 Ai기술이 어느 수준까지 발전할지는 모르는거죠.
   지금 수준에서는 택도 없음

   감독 에이전트라..

   개발 단계가 대충 4개라면(개발, 디버깅, QA 및 디버깅, 리팩토링) 4개 레이어에서 일어나는 할루시를 다 잡을 수 있을지..

   지금도 프롬프트에 디버깅과 테스트 요구 정교하게 써놔도 뭐가 문제인지 모르겠다는 헛소리가 가끔 나오는데요(Sonnet 3.7).

   트랜스포머 아키텍처 자체가 바뀐다면야 모를까.

   vibe coding 에 동의하기 힘든 이유는 code 기반으로 여전히 일해야 한다는 상황을 ai agent 가 해결해 주지 못하기 때문입니다. agent 가 자율적으로 동작하는 환경이라면 기계가 알아듣기 불편한 code 가 왜 필요할까요?

   저는 ai agent 가 진정 소프트웨어 개발의 모습을 바꾸는 순간은 바로, 그것을 지휘하는 사용자에게 code 라는 계층을 완전히 추상화한 순간이라 생각합니다. 아직은 그저 코드조각을 빠르게 생성해 내는 수준(물론 이것도 대단하지만)에 불과하다 생각해요.

   ai agent 가 우리를 code 에서 해방시켜주는 순간이 오기 전까지는, 변화가 놀랍기는 해도 그게 소프트웨어 업계의 업무 방식을 극적으로 바꾼다는 주장에는 동의하기 힘드네요.

   회사의 중요한 개발 구현물은 거의 백퍼센트 인터넷에 비공개 됩니다. 지금의 ai수준으로는 그정도의 품질을 만들수 없음. 헛소리.

   그 구현물이 제로에서 시작한 건가요? 혹시 나만 알고 있다는 착각 아닐까요?

   비슷한 지식과 실력이 있다면 적절한 환경에서 비슷한 결과가 나오겠죠.

   개발이란 비교적 많은 자료가 공개된 웹 애플리케이션만 있는게 아니고 그래픽 엔진부터 임베디드, 저수준 칩설계까지 엄청 다양하잖아요. 제로거나 제로에 가깝게 시작하는 분야 많습니다. 저도 제 분야에 관해선 깃헙이고 문서고 인터넷에 제대로 참고 가능한게 없습니다. 당연히 그록이고 클루드고 제대로 된 결과를 내지도 않고요. 전체 코드를 모델에 제공한다던지 파인튜닝은 논외입니다.

   아마 이런 전문성이 필요한 개발을 하지 않거나 사내에 노출이 금지된 자산이 없으신거 같으신데 본인이 상황을 정확하게 파악하고 있다는 확신을 안 가지시는게 좋습니다.

   인터넷에 없으면 AI 가 침범할 수 없다는 논지는 조금 이상하지 않나요? 학습 방법에 대한 연구가 계속 될수록 인하우스 AI가 인하우스 개발자의 자리를 대체할거라고 생각했어요

   인터넷이 문제가 아니라 AI 모델을 만들기 위해 학습시킬수 있는 데이터가 없다는 뜻이잖아요.. 학습 방법에 대한 연구가 왜 나오죠? 저는 지금 실체적 현실을 이야기하는거에요. 2025년 말에 모든 개발자 대체하는 AI 절대 못 만듭니다. 애초에 성능 문제가 아닙니다.

   제 말을 잘못 이해하신 것 같은데요, 회사 내에서 회사 코드로 AI를 훈련시키고 그걸 회사 내 코드 생성에 쓰는 상황을 상정한 겁니다.

   개인적으로 별로 동의되지 않네요. AI들고 일하는 주니어에 밀릴 시니어는 애초에 시니어는 아니라고 봅니다.
"
"https://news.hada.io/topic?id=20114","LLM이 결정을 내리거나 비즈니스 로직을 실행하도록 하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  LLM이 결정을 내리거나 비즈니스 로직을 실행하도록 하지 마세요

핵심 주장: LLM에서 최대한 빨리 빠져나오고 오래 머물지 말아야 함

     * LLM에게 의사결정이나 비즈니스 로직을 맡기면 안 됨 → 정확성과 안정성이 부족
     * 대부분의 경우, LLM은 단지 사용자와 애플리케이션 API 사이의 인터페이스 역할만 해야 함
     * 핵심 로직은 전용 시스템이나 엔진에서 수행하고, LLM은 사용자 요청을 API 호출로 바꾸고 결과를 다시 자연어로 바꾸는 역할만 맡아야 함

왜 그런가?

     * 체스 봇 예시: 사용자가 WhatsApp으로 ""내 비숍으로 나이트를 잡아줘""라고 보냄 → LLM이 체스판 상태 유지 및 플레이도 가능은 하지만, 신뢰성, 성능, 유지보수 측면에서 문제가 많음
     * 성능: LLM은 체스를 두는 능력이 놀랍긴 하지만 여전히 전문 체스 엔진(예: Stockfish)에 비해 느리고 정확도도 떨어짐
     * 디버깅 및 조정 불가: 왜 그런 판단을 했는지 알기 어려워서 의도한 방식으로 동작하게 수정하기 어려움
     * 기타 문제들:
          + LLM 출력은 테스트가 어려움
          + 수학이나 무작위 숫자 생성 성능이 낮음
          + 버전 관리와 감사가 어려움
          + 상태를 자연어로 유지하는 방식은 취약함
          + API 요금, 속도 제한 등의 문제가 발생함
          + 보안 경계가 흐려짐

다양한 예시로 본 올바른 역할 분리

     * 게임에서 ""플레이어 X를 보팔 소드로 공격할래요"" → LLM은 이걸 attack(player=X, weapon=""vorpal_sword"") 형태로 변환해서 게임 로직에 넘기는 역할만 수행해야 함
     * 협상 에이전트 → LLM은 협상 판단을 하지 않고, 사용자의 입력을 포장해서 협상 엔진에 넘기고 결과를 전달함
     * 무작위 응답 생성 → LLM이 선택하지 않고 외부의 무작위 함수에서 처리해야 함

LLM이 잘하는 일

     * LLM은 변환, 해석, 커뮤니케이션에 특화됨
     * 예시:
          + ""오크를 칼로 때린다"" → attack(target=""orc"", weapon=""sword"")로 변환
          + { ""error"": ""insufficient_funds"" } → ""골드가 부족합니다""로 자연스럽게 설명
          + 사용자의 입력이 전투 명령인지, 인벤토리 확인인지, 도움 요청인지 분류 가능
          + 인간 개념(예: blade = sword, smash = attack)을 잘 이해함
     * 핵심은 복잡한 판단이나 상태 관리가 아님 → 단지 사용자의 의도를 시스템에 연결하는 다리 역할

미래 전망과 지속되는 원칙

     * 기술이 빠르게 발전하고 있어서, 지금은 불가능한 것도 곧 가능해질 수 있음
     * 그러나 LLM이 해결할 수 없는 구조적 문제는 계속 남을 가능성이 높음:
          + LLM을 사용하지 않는 로직은 더 이해하기 쉽고, 유지보수 및 버전 관리가 쉬움
          + 실행 비용도 더 저렴함
     * 미래에도 마찬가지로, LLM은 인터페이스 역할에 집중하고, 핵심 로직은 전용 시스템에 맡겨야 함

        Hacker News 의견

     * 논리에는 두 가지 유형이 있음
          +
              1. 본질적으로 정확하고 엄격해야 하는 논리
          +
              2. 컴퓨터의 특성상 그렇게 되어온 논리
     * 1번 유형은 보안, 금융, 수학 등과 같은 분야에 해당함
     * 2번 유형은 AI가 대체할 가능성이 높음
     * 같은 애플리케이션의 다른 부분은 1번이나 2번에 적합할 수 있음
     * 최근 해커톤에서 교육용 게임을 제작했음
          + LLM을 사용해 게임을 생성하고 실행했으나 게임의 흐름이 좋지 않았음
          + 최종적으로는 많은 Python 코드와 여러 프롬프트를 사용하여 게임 상태를 관리했음
          + LLM은 큰 시스템의 작은 부품으로 사용하는 것이 가장 좋음
     * LLM은 논리를 구현하지 않아야 함
          + 논리, 최적화, 제약 프로그래밍은 별도의 기법임
          + 현대 논리학의 창시자는 George Boole이며, 그는 Geoffrey Everest Hinton의 조부임
     * LLM의 기능을 이해하는 것은 어려움
          + 독자들은 간단한 답변을 원함
          + LLM은 간단한 상태 기계를 작성하는 데 어려움을 겪을 수 있음
          + 연구 논문이 인기를 끌고 있으며, 2025년까지도 LLM을 완전히 이해하는 사람은 없을 것임
     * LLM 응답이 빠르고 저렴해야 한다면 짧은 프롬프트와 작은 모델을 사용해야 함
          + 많은 정보가 큰 모델을 사용하는 것을 전제로 하고 있음
          + 전통적인 UI가 더 나은 선택일 수 있음
     * LLM만으로는 테스트가 어려움
          + 개인의 스타일이 상호작용에 영향을 미침
          + 유지보수 비용이 높을 수 있음
          + API 호출로 변환하는 것이 더 합리적임
     * LLM을 비즈니스 로직에 사용하는 것은 위험함
          + 언어 처리에 적합함
     * AI 생성 이미지를 사용해 기사를 요약할 수 있음
"
"https://news.hada.io/topic?id=20082","Show GN: 오늘의AI번역","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: 오늘의AI번역

   LLM AI 기반 번역 웹서비스 ""오늘의AI번역"" (1일 만에 개발/공개)

   개발 배경: 번역기 유목민 생활 청산기
     * 문제 인식: 현재 개발 중인 다른 서비스에서 외국어 처리/번역 작업이 매우 빈번하게 필요
     * 기존 방식의 한계:
          + 처음에는 구글 번역 등 기존 번역기를 주로 사용
          + 하지만 특정 용어 처리나 미묘한 뉘앙스 전달에 있어 번역 품질이 불안정하거나 아쉬울 때가 많음
     * LLM 번역의 발견:
          + 대안으로 LLM(AI Studio 등)을 직접 사용해보니 확실히 더 자연스럽고 만족스러운 번역 결과를 얻을 수 있었음
     * 새로운 불편함:
          + 문제는 매번 번역할 때마다 웹 인터페이스(AI Studio 등)를 열고, 원하는 결과(특정 단어 처리, 말투 등)를 얻기 위한 프롬프트(번역 지시사항)를 반복해서 입력해야 했음
          + 이 과정이 매우 번거롭고 비효율적으로 느껴짐
     * 해결책 직접 개발:
          + ""이럴 바엔 내가 직접 만들자!""는 생각으로, LLM 번역의 장점은 살리면서 반복 작업을 줄일 수 있는 간단한 웹서비스 개발을 결심
          + 마침 주변에서도 비슷한 불편함을 이야기하는 지인들이 있어, 빠르게(꼬박 1일 소요) 개발하여 ""오늘의AI번역""으로 공개 ( 개발의 대부분은 Cursor AI 를 사용 )

   주요 특징
     * LLM 기반의 유연한 번역 지시 가능
          + 기존 기계번역/딥러닝 번역기와 차별화되는 가장 큰 특징
          + 번역 시 특정 단어(예: 회사명 '오늘의AI번역'은 'OAIT'로 번역) 처리 방식 지정 가능
          + 원하는 말투나 문체(예: 친구에게 말하듯, 보고서 스타일로) 상세 설정 가능
          + 기본 ""말투 선택"" 옵션 제공 (직역, 정중하게, 의미 강조 의역 등)
     * 자주 쓰는 번역 지시사항 저장 기능 (로컬 쿠키)
          + 매번 동일한 지시사항을 입력할 필요 없이 저장해두고 사용 가능
          + 반복적인 번역 작업 시 생산성 향상 (즐겨찾기처럼 활용)
     * LLM 특유의 자연스러운 번역 결과
          + 기계적인 느낌보다 문맥에 맞는 자연스러운 번역 품질 기대
          + (단점) LLM 특성상 가끔 부정확하거나 의도와 다른 결과가 나올 수 있음 (Hallucination)
     * 개발 배경 및 기술 스택
          + 개인 및 지인의 필요에 의해 빠르게 개발 (1일 만에 런칭)
          + 백엔드: Google Gemini 모델 활용
          + 현재 무료 API 기반 운영 (향후 사용량 증가 시 유료 API 전환 검토 중)
     * 간단함 추구
          + 복잡한 기능 없이 핵심 번역 기능과 LLM의 장점을 살리는 데 집중
          + 누구나 부담 없이 빠르게 사용 가능
"
"https://news.hada.io/topic?id=20028","샘 알트먼이 그리는 OpenAI의 미래 – 서비스, BM, AGI에 대한 전략","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              샘 알트먼이 그리는 OpenAI의 미래 – 서비스, BM, AGI에 대한 전략

샘 알트먼 인터뷰 요약

  OpenAI의 예상치 못한 성공과 변화

     * OpenAI는 원래 순수 연구 목적의 비영리기관이었으나, ChatGPT의 폭발적 인기로 초대형 소비자 테크 기업으로 급성장
     * ChatGPT는 1억 명 사용자 달성까지 단 2개월 소요
     * 샘 알트먼은 이렇게 빠르게 소비자 서비스 기업이 될 것을 예상하지 못했다고 언급

  OpenAI의 세 가지 핵심 전략

    1. 소비자 플랫폼 구축 및 통합 구독 서비스
          + 여러 AI 서비스를 하나의 구독형 패키지로 제공 계획
          + 넷플릭스나 아마존 프라임과 유사한 번들 모델 구상
    2. 계정 기반의 개인화된 AI 서비스
          + 'OpenAI 계정'을 통해 개인화된 AI 경험 제공
          + 사용자 데이터를 기반으로 맞춤형 서비스 제공
          + Custom GPTs가 이 전략의 일환
    3. AI 추론(Inference) 인프라 구축
          + 하드웨어, 데이터센터, 에너지 효율 개선을 위한 전략적 투자
          + 소프트뱅크, 오라클과 협력한 '스타게이트' 프로젝트 진행 중

  수익 모델 전략

     * 전통적인 광고 모델보다는 프리미엄 구독과 소액 수수료 모델 선호
     * 광고로 인한 검색 결과 왜곡 가능성을 피하고 AI의 중립성과 정확성 유지 중시
     * 월 2,000달러 수준의 고급 '연구자용 딥 리서치 모델' 고려 중

  모델 공개 전략 변화

     * GPT-5 모델을 무료 사용자 티어에서도 제공할 계획
     * 모델 독점에서 모델 공개 및 플랫폼 차별화 전략으로 전환
     * 메타의 Llama, 중국의 DeepSeek 등 경쟁 모델의 오픈소스 전략에 대응

  AI와 AGI의 미래 전망

     * 코딩 업무의 대부분이 AI로 자동화될 것으로 예측
     * '에이전틱 코딩': AI가 스스로 목표 설정하고 독립적으로 업무 수행하는 단계 강조
     * AGI의 정의가 모호해지고 있으며, 2020-2025년 사이의 발전만으로도 AGI 실현으로 볼 수 있다는 견해
     * AI의 창의성은 기존 지식을 변형해 발전시키는 방식에 효과적

  결론

     * OpenAI는 연구소에서 세계적 소비자 기술 기업으로 변모
     * 정해진 전략보다 탐색적 태도로 성장, ChatGPT도 처음엔 '사이드 프로젝트'였음
     * 장기적으로 구글이나 애플 같은 거대 기술 플랫폼으로 성장 목표
     * 연구 중심에서 소비자 서비스로의 전환 과정에서 정체성 혼란 등 과제 남아있음
"
"https://news.hada.io/topic?id=20003","논의가 두려운 웹사이트 Hacker News","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        논의가 두려운 웹사이트 Hacker News

    2017년 iPhone X 출시와 리뷰

     * 2017년, iPhone X는 iPhone 8 및 8 Plus와 함께 발표되었음.
     * iPhone X는 10월 27일부터 주문 가능했고, 11월 3일부터 배송 시작되었음.
     * 초기 리뷰는 10월 31일에 등장했으며, 필자는 12월 26일에 전체 리뷰를 게시했음.

    Hacker News와 Daring Fireball의 관계

     * Daring Fireball의 글은 Hacker News에서 종종 블랙리스트에 오르는 현상이 있었음.
     * 많은 Hacker News 독자들이 필자를 Apple의 옹호자로 보고 있음.
     * 2017년 이후 Daring Fireball의 글은 Hacker News의 첫 페이지에 거의 오르지 않음.

    Hacker News에서의 댓글과 반응

     * Daring Fireball의 글은 종종 댓글이 활발하게 달리지만, 첫 페이지에서 사라지는 경우가 많음.
     * 최근 몇 년간 Daring Fireball의 글은 거의 주목받지 못했음.

    Hacker News의 블로그 순위와 Daring Fireball

     * Michael Lynch의 도구에 따르면, Daring Fireball은 Hacker News의 개인 블로그 순위에서 5위를 차지했음.
     * 2007년부터 2021년까지는 3위를 기록했지만, 최근 4년간은 72위로 떨어졌음.

    결론

     * Daring Fireball이 Hacker News에서 주목받지 못하는 이유는 명확하지 않음.
     * 필자는 이러한 현상이 검열보다는 설명되지 않은 상황이라고 봄.

        Hacker News 의견

     * Daring Fireball의 Hacker News 제출물에 대한 스프레드시트가 있음. 이는 시간순으로 정렬되어 있음
     * Daring Fireball 제출물은 여전히 상당한 트래픽을 보이고 있음
     * 사용자 플래그가 스토리의 순위에 영향을 미침
     * 최근 몇 달 동안 많은 Trump/Elon 게시물이 플래그되었지만 여전히 많은 포인트와 댓글을 얻음
     * hn.algolia.com을 사용하여 플래그 알고리즘을 우회하는 사용자가 많음
     * 개인적으로 hn.algolia.com을 더 자주 사용하게 됨
     * 플래그 문제만 있었다면 기사에 대한 참여가 있었을 것임
     * 개인적으로 Daring Fireball의 글이 시간이 지남에 따라 덜 흥미로워졌음
     * Apple 팬의 관점을 이해하는 것이 블로그의 주요 가치였음
     * 스마트폰이 혁신적이던 시기에는 흥미로웠으나, 이제는 덜 흥미로워짐
     * Google Trends에서 MacRumors와 Daring Fireball의 하락세를 비교할 수 있음
     * Reddit의 댓글을 보면 John Gruber를 싫어하는 사람들이 많음
     * John Gruber는 Apple을 비판할 때도 있으며, 그의 의견은 종종 논란을 일으킴
     * Hacker News는 논란이 되는 기사를 낮게 평가함
     * 투명성은 중요하지만 알고리즘의 투명성은 게임화의 위험이 있음
     * 기사에 대한 보증 기능을 고려할 수 있음
     * 최근 본 Daring Fireball 기사는 기술적 정보가 부족했음
     * Gruber의 글은 기술 세계의 타블로이드와 같음
     * Daring Fireball의 글이 Hacker News에 더 많이 올라오길 바람
     * Apple 뉴스에 대한 논의의 질이 낮아졌음
     * Hacker News와 Daring Fireball은 많은 공통점을 가짐
     * hn.algolia.com을 통해 Hacker News에 접근하는 사람들이 많음
     * John Gruber는 Markdown의 창시자임
     * Hacker News가 종종 검열되는 이유에 대한 의견을 듣고 싶음
"
"https://news.hada.io/topic?id=20060","정기 구독 결제를 등록하고 알림을 받을 수 있는 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     정기 구독 결제를 등록하고 알림을 받을 수 있는 서비스

   Next.js와 BaaS 포켓베이스를 기반하여 개발한 웹 서비스입니다.
   OAuth2 로그인을 지원합니다.
   사용자가 정기 구독 결제 항목을 등록하면 알림을 받을 수 있습니다.
     * 월간 결제는 N일 전에 알림을 받을 수 있습니다.
     * 주간 결제는 사용자가 세팅한 요일에 알림을 받을 수 있습니다.

   개인 프로젝트이고 지속적인 피드백을 통해 개선하고 싶어서 공유합니다.
   서비스에 필요한 추가적인 기능을 개발할 계획 또한 있습니다.

   Cursor AI와 Figma MCP를 통해서 짧은 시간에 디자인을 반영할 수 있었습니다.

   감사합니다.
"
"https://news.hada.io/topic?id=20030","Postgres Language Server: 첫번째 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Postgres Language Server: 첫번째 릴리즈

     * Postgres 전용 Language Server Protocol (LSP) 구현과 다양한 개발 도구를 제공
     * Postgres의 기본 파서인 libpg_query를 기반으로 하여 Postgres 구문과 100% 호환되는 안정적인 SQL 기능을 제공
     * 서버-클라이언트 구조로 설계되었으며, 전송 방식에 구애받지 않는 유연한 디자인을 채택함
     * 이를 통해 Language Server Protocol뿐만 아니라 CLI, HTTP API, WebAssembly 모듈 같은 다양한 인터페이스로 기능을 사용할 수 있음
     * 목표는 기존의 훌륭한 Postgres 도구를 최대한 접근하기 쉽게 만들고, 부족한 부분은 직접 개발하는 것임
     * 현재 구현된 기능:
          + 자동완성 기능
          + 구문 오류 하이라이팅 지원
          + EXPLAIN 명령을 이용한 타입 체크 기능
          + Squawk에서 영감을 받은 SQL Linter 기능 포함

  Hacker News 의견

     * Postgres Language Server의 초기 버전을 공개함
          + VSCode 확장, nvim-lspconfig, mason, npm에서 설치 가능함
          + 2년간 다양한 시행착오를 겪으며 만든 프로젝트임
          + 현재는 실용적이고 단순한 방식으로 동작하게 구성함
          + Biome 코드베이스에서 많은 영감을 받았으며 큰 도움을 받음
          + Rust로 구현되어 있으며 Rust에 기여하고 싶은 사람을 환영함
     * 현재는 SQL 문만 지원하며, 향후 PL/pgSQL도 지원할 예정임
          + PostgreSQL의 SQL 방언을 따르며 Postgres의 파서를 사용함
          + DB 연결을 제공하면 pg_catalog 테이블을 통해 메타데이터를 읽어옴
          + 연결 정보가 없으면 해당 기능은 비활성화됨
     * JetBrains IDE들이 오래전부터 훌륭한 SQL 지원을 제공해왔음. FOSS 대안이 드디어 등장한 것이 긍정적
     * IntelliJ DB 도구가 특별하진 않으며, SQL Squirrel 같은 오래된 툴도 꽤 괜찮음
     * DB를 자주 변경하지 않는다면 유용하지 않을 수도 있음
          + Supabase처럼 SQL로 많은 로직을 작성하는 플랫폼에서 매우 유용함
          + SQL 함수, RLS, 마이그레이션 파일 등을 자주 다룬다면 도움을 많이 받을 수 있음
     * Postgres 문법은 매우 복잡하고 자주 변경되기 때문에 기존 도구들이 지속적으로 지원하기 어려움
          + Postgres 서버의 실제 파서를 추출한 libpg_query를 사용해 문제를 해결함
            -JetBrains 도구는 쿼리를 분석할 뿐 아니라 실제 테이블과 매칭하는 기능도 제공함
          + 코드 내 SQL 문자열도 분석 가능한 점이 인상적임
     * PL/pgSQL 코드베이스를 마이그레이션 파일로 관리하는 사람들에게는 게임 체인저라고 평가함
"
"https://news.hada.io/topic?id=20004","Oracle 고객, 클라우드 침해로 인해 데이터가 유출된 것이 맞다고 확인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Oracle 고객, 클라우드 침해로 인해 데이터가 유출된 것이 맞다고 확인

     * Oracle은 Oracle Cloud의 SSO 로그인 서버 침해 및 600만 명의 계정 데이터 도난을 부인했으나, 여러 회사와의 확인을 통해 위협 행위자가 공유한 데이터 샘플이 유효함을 확인함
     * 'rose87168'라는 인물이 Oracle Cloud 서버를 침해했다고 주장하며, 600만 사용자에 대한 인증 데이터와 암호화된 비밀번호를 판매하기 시작함. 이 위협 행위자는 도난당한 SSO 및 LDAP 비밀번호를 복호화할 수 있다고 주장하며, 이를 복구하는 데 도움을 줄 사람에게 데이터를 공유하겠다고 제안함.
     * 위협 행위자는 데이터베이스, LDAP 데이터, 그리고 침해로 영향을 받은 것으로 추정되는 회사 및 정부 기관의 140,621개 도메인 목록이 포함된 여러 텍스트 파일을 공개함. 일부 회사 도메인은 테스트용으로 보이며, 회사당 여러 도메인이 존재함.
     * 위협 행위자는 BleepingComputer에 ""login.us2.oraclecloud.com"" 서버에 호스팅된 텍스트 파일의 Archive.org URL을 공유함. 이 파일은 위협 행위자가 Oracle 서버에 파일을 생성할 수 있음을 나타내며, 실제 침해를 시사함.
     * 그러나 Oracle은 Oracle Cloud의 침해가 없었다고 부인하며, 사건에 대한 추가 질문에 응답하지 않음. Oracle은 ""Oracle Cloud의 침해는 없었다. 공개된 자격 증명은 Oracle Cloud의 것이 아니다. Oracle Cloud 고객은 침해나 데이터 손실을 경험하지 않았다""고 BleepingComputer에 전함.
     * 이 부인은 BleepingComputer의 발견과 모순됨. BleepingComputer는 위협 행위자로부터 추가 샘플을 받고 관련 회사에 연락하여 데이터의 진위를 확인함. 익명을 조건으로 데이터를 확인한 회사 대표들은 LDAP 표시 이름, 이메일 주소, 이름 등 식별 정보가 정확하며 자신들에게 속한다고 확인함.
     * 위협 행위자는 Oracle과의 이메일 교환을 BleepingComputer에 공유함. 한 이메일에서는 위협 행위자가 Oracle의 보안 이메일(secalert_us@oracle.com)로 서버 해킹을 보고함.
     * 다른 이메일 교환에서는 위협 행위자가 Oracle의 @proton.me 이메일 주소를 사용하는 사람과의 대화를 공유함. BleepingComputer는 이 이메일 주소의 신원이나 이메일 교환의 진위를 확인할 수 없어 이메일 주소를 삭제함.
     * 사이버 보안 회사 Cloudsek는 ""login.us2.oraclecloud.com"" 서버가 2025년 2월 17일 기준으로 Oracle Fusion Middleware 11g를 실행 중인 Archive.org URL을 발견함. Oracle은 침해 소식이 보도된 후 이 서버를 오프라인으로 전환함.
     * 이 소프트웨어 버전은 CVE-2021-35587로 추적되는 취약점에 영향을 받았으며, 인증되지 않은 공격자가 Oracle Access Manager를 손상시킬 수 있음. 위협 행위자는 이 취약점이 Oracle 서버 침해에 사용되었다고 주장함.
     * BleepingComputer는 이 정보에 대해 Oracle에 여러 차례 이메일을 보냈으나 응답을 받지 못함.

        Hacker News 의견

     * BleepingComputer가 여러 회사와 확인한 결과, 위협 행위자가 공유한 데이터 샘플이 유효함
     * rose87168이 BleepingComputer에 Archive.org URL을 공유했으며, 이 URL은 ""login.us2.oraclecloud.com"" 서버에 호스팅된 텍스트 파일을 포함하고 있음. 이 파일은 위협 행위자가 Oracle 서버에 파일을 생성할 수 있음을 나타내며 실제 침해를 시사함
     * Oracle은 처음부터 유효성을 인정했어야 했음
     * 침해에 대한 실질적인 처벌이 없으며, 거짓말하는 것이 침해 자체보다 더 나쁜 PR 타격을 줄 수 있음
     * Oracle이 2021년에 알려진 취약점이 있는 제품에 로그인 게이트웨이를 호스팅했다는 사실만으로도 상당히 불안함
     * Oracle이 명백한 증거에도 불구하고 침해를 부인하는 것은 전형적임
     * Oracle의 클라우드 제품을 사용하는 인구 통계가 궁금하며, 그들에 대한 이야기는 장기적인 고통을 시사함
     * 이번 사건은 그들의 제품에 대한 신뢰를 높이는 데 도움이 되지 않음
     * Oracle을 운영했다면 왜 패치되지 않았는지 이해할 수 있을 것임. 그들은 쉽게 만들지 않음
     * 위협 행위자가 Oracle의 @proton.me 이메일 주소를 사용하는 사람으로부터 ""당신의 이메일을 받았다. 이제부터 이 이메일을 사용하자. 받으면 알려줘.""라는 메시지를 받았다고 주장함
     * 이메일은 대부분의 공개 회사에서 일정 기간(7년?) 보관해야 하는 소스 중 하나임. 아마도 기록을 피하려는 시도일 것임
     * 데이터 침해는 불행히도 주가에 영향을 미치지 않음. Oracle 제품을 사용하는 회사들은 당장 이주할 가능성이 낮음
     * 미래의 판매가 영향을 받을 수 있으며, 일부 작은 회사들은 이주할 수 있음. 그러나 Oracle은 이를 최대한 축소할 것임
     * ""부인. 지연. 방어.""는 건강 보험 슬로건만이 아님
     * Oracle Opera Cloud와 Oracle NetSuite Cloud 고객 데이터도 도난당했는지 궁금함. 전 세계 많은 호텔들이 Opera + NetSuite를 사용함
     * 10년 전 상위 3대 보험 중개사에서 ""사이버"" 정책이 도입될 때 일했음. Oracle의 정책을 누가 인수했는지, 그 타워에서 얼마나 많은 비용이 들었는지 궁금함. 정책이 없었나? D&O가 주주 소송을 커버할 수 있기를 바람. 행정부와의 친밀한 관계, 규칙 해석의 여지가 있음
     * Tyler Technologies가 캘리포니아에서 봉인된 사건을 노출한 것에 대해 Judyrecords.com을 비난했으며, 그들의 잘못된 난독화 시스템으로 인해 보안 침해라고 주장함. 책임을 회피함
     * 침해의 규칙 #1은 이메일에 침해라는 단어를 쓰지 않는 것임. 그래서 그들의 도메인 외부에서 논의한 것으로 추측됨
     * Oracle이 얼마나 오랫동안 이를 부인했는지 궁금함. 3일인가?
     * Larry와 Trump는 밀접한 관계임. Oracle은(또는 해야 함) OCI와 SaaS CISO를 해고할 것임
"
"https://news.hada.io/topic?id=20025","사용자들이 구독 비용을 피하기 위해 LibreOffice 다운로드 증가중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                사용자들이 구독 비용을 피하기 위해 LibreOffice 다운로드 증가중

     * LibreOffice는 Microsoft Office의 무료 오픈소스 대안이며, 최근 주당 다운로드 수가 100만에 가까워짐
          + 윈도우, 맥, 리눅스에서 작동하는 스탠드얼론 데스크탑 소프트웨어로 무료 사용 가능
     * 이는 2023년 이후 가장 높은 수치로, 최근 25.2 버전 출시 이후 다운로드가 급증
     * Apache OpenOffice 등 경쟁 오픈소스 오피스 제품은 점점 존재감이 줄어들고 있음
     * 대부분의 사용자는 비용을 피하기 위해 LibreOffice를 선택함
          + Microsoft Office와 Google Workspace가 클라우드 중심으로 전환됨에 따라, 로컬 설치형 솔루션을 선호하는 사용자에게 매력적으로 작용함
          + Gartner의 분석가 Jason Wong은, LibreOffice가 비용 절감 대안으로 평가되지만 유지 관리에는 전문 리소스와 기술이 추가로 필요하다고 언급
     * LibreOffice를 만들고 있는 The Document Foundation의 Mike Saunders에 따르면 사용자 수는 약 2억 명으로 추정되지만, 개인 정보 보호 정책상 정확한 수치는 알 수 없음
     * 기존에는 주로 가정용 사용자에게 인기가 있었지만, 최근에는 기업과 정부 기관의 관심도 증가 중임
          + 예: 독일 슐레스비히-홀슈타인 주는 30,000대의 PC를 Microsoft Office에서 LibreOffice로 전환 예정
     * 사용자 비율은 Windows(85%)가 가장 많고, 그 뒤를 macOS, Linux가 따름
     * 사용자들은 단순하고 직관적인 인터페이스, 구독 없는 구조, AI 비활성화를 선호함
          + AI가 지나치게 간섭하는 것을 Clippy와 같은 과거의 실패 사례로 여김
          + LibreOffice는 AI 기능을 기본 내장하지 않을 계획이며, 사용자가 선택적으로 사용할 수 있는 책임감 있는 AI 확장 개발을 장려 중임
     * The Document Foundation은 클라우드 기반보다는 데스크탑 버전에 집중함
     * 많은 Linux 배포판이 LibreOffice를 기본 탑재하고 있어서, 이로 인해 실제 사용자 수는 불명확함

        Hacker News 의견

     * iWork가 몇 년 동안 나의 주요 ""Office"" 대체 프로그램이었음. 무료이고 충분히 좋음. 비기술적인 사람들도 문제 없이 사용하고 있음. 단, .pages 문서를 Windows 사용자에게 이메일로 보낼 때는 예외임
          + 특히 Numbers에서 여러 테이블을 한 페이지에 배치할 수 있는 점이 마음에 듦. Google Sheets나 Excel과는 다른 패러다임이지만 이제는 더 이해가 잘 됨
          + 필요할 때는 Affinity, LaTeX, InDesign을 사용하지만 요즘은 거의 필요하지 않음
          + Google Docs/Sheets/Slides를 사용하는 것도 가능하지만, 데이터가 무료 Google 계정에 있는 것이 불안함
     * 외부 자원/서버가 필요 없는 애플리케이션을 평가할 때, 최소한의 영구적인 대체 라이선스를 제공하지 않으면 (Jetbrains 연간 구독 모델처럼) 바로 포기함
          + 좋은 대안의 예시로는 Pixelmator > Photoshop, Davinci Resolve > Premiere, Reaper > Audition이 있음
          + 도구를 임대하고 싶지 않음
     * 모두가 LibreOffice로 전환했으면 좋겠음. 문서를 편집한 후 형식이 이상해지는 이유를 설명하지 않아도 되기 때문임
     * 지리적 정치적 상황과도 관련이 있을 것임. 미국은 캐나다, 유럽, 파나마, 중국에 전쟁을 위협했으며, 러시아와의 동맹을 엿보고 있음. 이는 러시아와 국경을 접한 많은 국가들을 위협할 것임. 많은 사용자가 미국 제품을 사용하는 것이 안전하지 않다고 느끼고 있음
     * 나는 이제 LaTeX를 사용하는 사람이 되었음. 나의 ""워드 프로세서""는 tmux, NeoVim, Nix임. 하지만 대부분의 사람들에게는 적합하지 않음을 이해함
          + LibreOffice는 요즘 꽤 괜찮음. Excel이 Calc보다 조금 더 나을 수 있지만 Calc도 대부분의 작업에 충분히 능력 있음
          + 문서가 충분히 괜찮아 보이고, 사용하기 쉽고, 속도가 빠르며, 가격을 이길 수 없음
          + OpenOffice의 아이콘을 더 좋아해서 LibreOffice를 많이 사용하지 않음. LibreOffice의 아이콘은 너무 어린애 같음. 설명하기 어렵고 주관적이지만, OpenOffice의 아이콘을 LibreOffice에 가져올 수 있으면 좋겠음
     * PC에서 프레젠테이션을 위해 InDesign을 사용했음. 이제 리눅스 전용 사무실을 운영하면서 Scribus로 전환하는 것이 쉬웠음
          + LibreOffice에 대해 - 학자로서 최근 ppt 형식으로 몇 가지 프레젠테이션을 만들어야 했음. 불편했지만 회의의 요구사항이었음. LO Impress는 PowerPoint의 많은 불편함을 여전히 가지고 있지만, 실제로는 PowerPoint보다 더 나은, 빠른 프로그램임
     * MS Office는 기능을 제거하고, UI를 망치고, 불필요한 기능을 추가하고 있음. 사람들이 떠나는 것은 놀라운 일이 아님
     * 여전히 전문적인 사람들이 공백이나 탭으로 텍스트를 오른쪽 정렬하는 것을 보면, Word나 LibreOffice Writer 같은 프로그램은 대부분의 사람들에게 과잉임
     * 예전에도 비슷한 댓글을 남겼지만, 요즘 사람들은 오피스를 무엇에 사용하는지 궁금함. 가격에 대해 불평하는 사람들을 듣지만, 나는 수년간 실제 오피스 제품군이 필요하지 않았음. Google Docs로 무료로 충분히 해결할 수 있었음
          + 문서를 만들고 인쇄하고 있는지? 왜? 이메일이 발명된 이후로 워드 프로세서가 실제로 필요하지 않았음
     * Calc가 필요함. Excel이 꼭 필요한 것은 아니지만, 100x100 셀에서 간단한 계산과 몇 개의 V/XLOOKUP을 사용할 때 스프레드시트가 사용 불가능할 정도로 느려서는 안 됨
"
"https://news.hada.io/topic?id=20053","개발자가 읽는 블로그 게시물을 작성하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        개발자가 읽는 블로그 게시물을 작성하는 방법

     * 개발자들이 실제로 읽고 공유하는 블로그 글을 어떻게 써야 하는지에 대한 실용적인 가이드
     * 저자는 9년간의 소프트웨어 블로깅 경험과 수백만 조회수를 바탕으로, 성공적인 포스팅과 실패한 포스팅의 차이를 분석함
     * Hacker News, Reddit, Lobsters 등 개발자 커뮤니티에서 주목받는 글의 공통점과 전략을 알려줌

왜 저자를 믿을 수 있는가

     * 저자는 9년째 개인 개발 블로그 운영 중이며 연간 30만~50만 명의 독자가 방문함
     * Hacker News 첫 페이지에 30회 이상 등장, 그 중 다수가 1위 기록
     * 블로그 포스트 하나로 성공적인 인디 비즈니스 론칭
     * Reddit과 Lobsters 등에서도 꾸준히 언급됨
     * Hacker News 상에서 48번째로 인기 있는 개인 블로그로 평가됨

핵심을 빠르게 전달하기

     * 많은 개발자 블로거들이 글 초반에 본론으로 바로 들어가지 않아 독자 이탈을 유발함
     * 독자는 글을 읽기 시작하면서 두 가지 질문에 답을 기대함:
          + 이 글은 나 같은 사람을 위한 글인가?
          + 이 글을 읽음으로써 나는 어떤 이득을 얻는가?
     * 이 두 질문은 제목과 처음 3문장 안에 답을 줘야 함
     * 독자가 관심 가질 주제와 용어를 사용하고, 지나친 전문 용어나 배경 설명은 피해야 함
     * 글이 주는 이득은 다음과 같을 수 있음:
          + 실생활이나 업무에 바로 적용 가능한 기법
          + 이해하기 쉬운 개념 설명
          + 기술 또는 산업에 대한 통찰
          + 공감되는 흥미로운 이야기
     * 예시: “if got, want: A Simple Way to Write Better Go Tests”
          + 제목과 첫 문장만으로 다음이 명확함:
               o 대상 독자: Go 언어 사용자
               o 얻는 이득: 30초 만에 새로운 테스트 작성법 배움

대상 독자를 넓히는 법

     * 대부분의 블로거는 특정 소수의 개발자를 타깃으로 글을 씀 (예: 중상급 Java 개발자)
     * 소폭의 표현 수정만으로 더 넓은 범위의 독자에게 다가갈 수 있음 (예: 모든 Java 개발자 → 모든 개발자 → 기술 관심자)
     * 배경 지식이 없는 독자도 이해할 수 있도록 용어나 설명을 약간 수정하면 도달 범위가 10배로 늘어남
     * 단, 지나치게 범용적으로 확장하면 글의 깊이나 전문성이 떨어질 수 있음
     * 예시: “How I Stole Your Siacoin”
          + 원래는 특정 암호화폐 커뮤니티 대상 글이었으나,
          + 용어와 설명을 일반화하여 암호화폐를 모르는 사람도 이해 가능하게 수정
          + 결과적으로 Reddit, Hacker News 등 다양한 커뮤니티에서 인기글로 등극

독자에게 도달할 경로 계획하기

     * 글을 잘 썼다고 해도, 사람들이 읽지 않으면 소용없음
     * 구글 검색에서 상위에 노출되기 어려운 주제는 피해야 함
     * 커뮤니티(예: Reddit, Hacker News 등)에 공유할 수 있는 현실적인 계획이 필요함
     * Reddit 같은 경우, 외부 링크를 허용하지 않거나 엄격한 규칙이 있는 경우가 많음
     * Hacker News는 튜토리얼이나 너무 흔한 주제에 냉담한 경우가 많음
     * 소셜 미디어에서 공유하더라도 팔로워가 많지 않으면 효과 미미함
     * 현실적인 경로를 설계해야 함
          + 주제 선택 전에 글이 어떤 경로로 독자에게 도달할 수 있을지 먼저 고려해야 함
          + 다음 질문을 고려:
               o 구글 검색으로 찾기 쉬운 주제인가?
               o 이미 수백 개의 글이 있는 주제는 아닌가?
               o 타겟 독자가 검색할 키워드는 무엇인가?
               o 링크를 공유할 수 있는 커뮤니티가 있는가? 그 커뮤니티가 활성화되어 있는가?
     * 예시: “Using Zig to Unit Test a C Application”
          + Zig 언어는 신생 기술로 경쟁 글이 거의 없어 검색 상위 노출 성공
          + Hacker News, Lobsters, Reddit (/r/Zig), Ziggit 등에서 링크 공유 가능
          + 결과적으로 모든 채널에서 상위 인기 글로 등극

시각 요소를 더 많이 보여주기

     * 블로그 글에서 가장 효과적인 변화는 이미지 추가임
     * 긴 텍스트만 있는 글은 가독성이 떨어짐
     * 다음과 같은 경우에는 이미지, 스크린샷, 그래프 등을 삽입하면 좋음:
          + GUI 프로그램 설명 → 스크린샷
          + 수치 변화 설명 → 그래프
          + 서버 오류 등 사건 설명 → 대시보드 캡처
          + 복잡한 개념 설명 → 도식, 다이어그램
     * 간단한 그림은 Excalidraw 같은 무료 도구 사용 가능
     * 일러스트레이터를 고용하는 것도 좋은 방법 (일러스트당 약 $50~100)
     * AI 이미지보다 MS Paint 같은 단순한 그림이 더 효과적일 때도 있음

스킴하는 독자를 위한 구조 설계

     * 많은 독자는 글을 처음부터 읽지 않고 훑어보며 판단함
     * 스킴만으로 흥미를 유도하려면 다음 요소가 중요함:
          + 명확하고 흥미로운 헤딩
          + 적절한 이미지와 시각적 단서
          + 텍스트만으로 된 긴 단락은 피할 것
     * 도구: 스킴 시점에서 글 확인하기
          + 북마클릿(Bookmarklet)을 사용해 글에서 헤딩과 이미지만 보이도록 설정 가능
          + 이를 통해 스킴 독자가 보는 구조를 점검할 수 있음
     * 예시: 구조가 지루한 글 vs. 흥미로운 글
          + “End-to-End Testing Web Apps: The Painless Way” → 헤딩과 이미지가 매력적이지 않아 실패
          + “I Regret My $46k Website Redesign” → 시각적 구조가 흥미를 끌어 성공 (첫 주에 15만 명 읽음)

        Hacker News 의견

     * 일반적으로 블로그 글을 쓸 때는 역피라미드 구조가 가장 적합함. 글의 요점을 빠르게 전달하고, 이후에 자세히 설명하는 것이 중요함. 이렇게 하면 독자가 중간에 글을 그만 읽더라도 중요한 내용을 놓치지 않음
          + 독자를 찾는 문제는 투명성을 유지하는 것이 최선의 해결책임. 역피라미드 형식이 이를 해결함. 관심 없는 사람을 끌어들이는 것은 의미가 없음. 기존 독자를 유지하는 것이 새로운 독자를 끌어들이는 것보다 중요함
          + 이미지 사용에 대해서는 회의적임. 텍스트와 관련이 깊지 않다면 불필요한 삽화는 좋지 않음. 시각적 잡음을 줄이는 것이 중요함. 이미지는 절대 웃기지 않아야 함
     * 반대 의견: 블로그 글을 다른 사람이 읽도록 작성하는 것은 대부분의 사람들에게 글쓰기의 목적을 상실하게 함. 웹상의 대부분의 글은 읽히지 않으며, 읽히기 위해 글을 쓰는 것은 동기부여가 되지 않음
          + 글쓰기는 아무도 읽지 않더라도 매우 가치 있고 재미있음. 글을 쓰는 것은 자신의 생각을 구조화하고 주제와 자신에 대해 더 많이 배우는 것임
          + 개인 블로그에 흥미로운 주제로 글을 쓰는 것이 좋음. 분석 도구를 설치하지 말고, 글을 작성하고 게시한 후 LinkedIn에 올리면 언젠가 누군가가 보고 좋아할 것임
     * AI에게 블로그나 Hacker News, Reddit 글을 비판적으로 평가해달라고 요청하는 것이 효과적이었음. AI의 피드백은 놀라웠고, 저자처럼 글을 썼던 것을 깨달음
     * ""자신이 실제로 읽을 글을 쓰라""는 규칙을 따르는 것이 좋음. 우리의 뇌는 우리가 만든 것이 훌륭하다고 착각하게 만듦. 객관적으로 자신의 글을 볼 수 있는 방법을 찾는 것이 중요함
          + 다른 사람이 실제로 읽을 글을 쓰는 것은 더 어려움. 자신이 읽을 글이라면 다른 사람들도 읽을 가능성이 높음
     * Steve Ballmer는 Bill Gates처럼 Microsoft 주식을 다양화하지 않았지만, 그 덕분에 Gates보다 더 부유해짐. 그러나 한 회사에 올인하는 것이 좋은 생각인지는 의문임
          + 글쓰기를 통해 다른 사람에게 유용하게 만드는 것이 중요함. 그러나 더 넓은 독자를 끌어들이기 위해 콘텐츠를 다양화하는 것은 종종 공허하고 공식적인 글이 됨
          + Hacker News는 특정 패턴의 기사를 선호함. 대부분은 기억에 남지 않음. 댓글에서 더 많은 것을 배움
          + 현재 작업 중이거나 관심 있는 주제에 대해 글을 씀. 과거의 자신에게 유용할 것 같은 내용을 작성함. 이는 독자를 위해 글을 작성하는 것과는 다름
     * 개인적으로 글에 열정이 있어야 함. 그렇지 않으면 독자들이 이를 알아차리고 비판할 것임. 글쓰기는 자신을 위한 것이어야 함
     * 블로그 글은 항상 짧아야 하는가? 긴 글이 필요한 경우도 있는가?
     * Hacker News의 독자들은 일반적으로 암호화폐 관련 이야기에 적대적임에도 불구하고, 기사가 첫 페이지에 도달함
     * 블로그 글을 개발자가 읽고 공유하게 만드는 두 가지 방법이 있음
          + 많은 글을 작성하여 결국 성공적인 글을 찾는 것
          + 연구와 노력을 기울여 글을 작성하는 것
          + 두 번째 접근 방식을 집중적으로 사용함. 각 글을 자랑스럽게 만들기 위해 많은 시간을 들임. 구조를 조정하고, 간결하게 만들고, 스캔 가능성을 높이기 위해 노력함
     * 인기 있는 블로그는 제안된 것과 반대되는 방식을 취하는 경우가 많음. 그러나 스타일을 찾고 인기를 최적화하려는 사람들에게는 유용한 조언임
"
"https://news.hada.io/topic?id=20054","Fireproof - 브라우저용 경량 임베디드 DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Fireproof - 브라우저용 경량 임베디드 DB

     * 브라우저 환경에서 쉽게 사용할 수 있도록 설계된 경량 임베디드 도큐먼트 데이터베이스
          + 암호화된 실시간 동기화 기능 제공
     * React와 같은 프론트엔드 프레임워크뿐 아니라 다양한 JavaScript 실행 환경에서도 일관된 API로 작동
     * UI, 데이터, 로직을 하나의 파일로 번들링하여 배포 및 실행 환경 제약 없음
          + TypeScript로 작성되어 Deno, Bun, Node.js, 브라우저에서 사용 가능
     * 실시간 및 오프라인 우선 : 자동 저장과 실시간 쿼리 지원
     * React Hooks 지원 : useLiveQuery, useDocument 훅을 통해 라이브 협업 인터페이스 구성 가능
     * Git 스타일의 버전 관리
          + 해시 히스토리를 사용한 암호화 기반 인과 일관성 보장
          + 데이터는 콘텐츠 주소 기반의 암호화 Blob으로 저장 및 복제됨
          + 객체 저장소(S3 등)를 활용한 동기화 가능
     * 기존 임베디드 데이터베이스 대비 Fireproof의 장점
          + 네트워크 인지형, 암호화된 동기화, 멀티 라이터 안정성 보장
          + 실시간 협업을 위한 CRDT 기반 설계
          + 암호학적 인과 무결성 제공
          + 웹 중심 설계: 패키지 크기 작음, WebAssembly 필요 없음
     * Use Case
          + AI 생성 앱 및 빠른 프로토타입
          + 실시간 협업 편집기
          + 오프라인/로컬 우선 앱
          + 개인화 설정 저장소
          + AI 코파일럿의 안전한 상태 저장
     * 개발 방식
          + 처음엔 로컬에서 앱을 구축하고, 나중에 원하는 클라우드를 통해 동기화
          + LLM을 이용한 코드 생성 환경과 상호보완적
          + 빠른 개발 주기를 위한 최적의 데이터 스토리지 솔루션
"
"https://news.hada.io/topic?id=20055","애플의 AI가 실망스러운 것이 아님. AI가 실망스러운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플의 AI가 실망스러운 것이 아님. AI가 실망스러운 것

     * 최근 애플은 인공지능(AI) 분야에서 기대 이하의 성과로 기술 및 금융 매체의 비판을 받고 있음
          + 2024년 6월에 발표한 AI 기반 Siri는 출시가 무기한 연기
          + 문자 요약 등 출시된 기능들은 도움이 되지 않는 수준
     * 비판은 어느 정도 정당하지만, 핵심을 놓치고 있음
          + AI는 과연 소비자가 원하는 것인가? ""전혀 아니다""
          + 기업들이 AI에 몰두하는 이유는 소비자 수요가 아니라 월가의 기대 때문
     * 애플은 주주를 만족시키기 위한 AI 도입 과정에서 드물게 실수했으며, 해당 기능들은 향후 출시 예정

문제는 '애플이 AI를 실패한 것'이 아니라 'AI 자체의 한계'

     * AI 지지자들 사이에 ""AI는 실패하지 않는다, 다만 인간이 실패할 뿐이다"" 라는 사고가 퍼지고 있음
          + 이 논리는 정치적 이상주의의 자기 합리화와 유사
          + 문제는 AI 자체가 아직 완성되지 않은 기술이라는 점
     * 뉴욕타임즈 기술 기자 Kevin Roose는 “애플이 AI를 제대로 활용하지 못했다”고 주장
          + 그의 주장: 제품에 AI를 통합하려면 불완전함을 감수해야 함
          + 반박: 애플은 정교하고 완성도 높은 제품을 추구하는 회사이며, 실험적인 기능을 무턱대고 적용하지 않음
     * 애플은 세계에서 가장 철저하게 통제된 브랜드 중 하나
          + iOS의 폐쇄성은 비판받기도 하지만, 개인정보 보호와 사용자 신뢰의 기반
          + 사용자들은 얼굴 인식, 위치 정보 공유, 은행 정보 저장 등을 애플에 기꺼이 맡김
          + 제품은 사용하기 쉬우며 직관적이고, 대부분의 기능은 설명서 없이도 사용 가능
     * AI 기능이 오류를 발생시킬 경우, 신뢰가 무너지고 제품 가치가 하락
          + 예: Siri가 2% 확률로 엄마의 도착 공항을 틀리면? → 2% 확률로 엄마가 공항에서 버려짐
          + 애플 제품은 100% 정확하지 않으면 소비자에게 무용지물
     * Google이나 Amazon도 아직 AI로 인해 제품 판매가 급증한 사례 없음
     * AI는 여전히 제품보다는 과학적·연구 중심의 이야기
          + OpenAI의 ChatGPT, Anthropic의 Claude 등은 일부 성공했지만 일반 소비자 제품으로서의 한계 존재

결론

     * AI는 기술적으로 흥미롭고 가능성이 크지만, 현실적 제품 수준에서는 아직 미흡
     * 애플이 AI에 뒤처진 게 아니라, AI 자체가 제품 수준에 도달하지 못함
     * 다시 말해, 애플이 늦은 게 아니라, AI가 아직 준비되지 않은 것

   시리가 못 하는 게 맞잖아. 라고 생각했는데 ㅋㅋㅋ
   다들 똑같은 거 보고, 기사의 어그로가 대단하다라고 생각함 ㄷㄷ

   그 실망스러운 것을 팔려고 시도한 회사는 Apple이 아니게 되는걸까요?

   온디바이스로 하기엔 성능이 따라가기 어렵고, 클라우드로 하기엔 비용대비 매출 증대 효과가 미미하니 안하는거겠죠. AI 가 아직 모바일 디바이스에 통합될 준비가 안된게 맞다고 생각합니다. LLM 은 멋진 기술이지만, 아직 한계가 있는거니까요.

   갤럭시와 아이폰에 구현된 AI가 서로 정 반대인 상황이었다면
   아마 AI는 혁신이고 세상을 바꿀 기술이며 판매량 상승의 주된 원인이라고 했겠죠

   그렇다고 하기에는 Siri는 너무나도 미흡하고 수준에 도달하지 못했었죠..

     다시 말해, 애플이 늦은 게 아니라, AI가 아직 준비되지 않은 것

   이게 밈 게시물이 아니라 진짜 기사인가요? ㅋㅋㅋㅋ 멘트가 너무 웃기다

   레딧 r/apple 반응

     There’s a reason why no one reads CNN anymore.

   아직은 AI들이 엔터프라이즈 개발에서 두각을 나타낸 상태라.... 일반 사용자들에게 더 많은 비용을 요구하며 애플이 제시할 꺼리가 애매하긴 하죠.

   LLM중심의 ai가 현재진행형이고 기술 내외로 이제 정해야하는 것도 많지만, 그게 애플이 ""난 이럴줄 알았지"" 하면서 개발을 안했을 거라면서 넘겨짚는건 국내 애플 광팬들 보는듯 하네요...
   개인정보가 중요하다면서 돈에 눈멀어서 중국에 아이클라우드 내놓는 건 어떻게 생각하는지 궁금하네요. 차라리 그 evil 구글도 중국은 철수했는데.

   Google이나 Amazon도 아직 AI로 인해 제품 판매가 급증한 사례 없음
   -> 늘 영업쪽에서 듣는 말이 생각납니다. ""그래서 그거 만들면 제품 판매가 늘어날까요?""

        Hacker News 의견

     * 두 가지 생각이 있음
          + 첫째, LLMs는 우리가 만든 최고의 자연어 처리 및 생성 시스템임
          + 비구조적 사용자 입력을 자연스러운 출력으로 변환하는 데 뛰어남
          + 그러나 다른 시스템에 비해 다른 작업에서는 덜 효과적임
          + 우리는 언어학자를 발명했지만 그것을 엔지니어로 착각했음
          + 둘째, 미디어 연구의 격언 중 하나는 새로운 미디어의 첫 번째 사용은 기존 미디어를 재현하는 것이라는 것임
          + TV의 첫 번째 사용은 라디오 쇼였고, 첫 웹사이트는 인쇄물처럼 보였음
          + 새로운 매체에 익숙해지면 비로소 그 매체의 가능성을 인식하고 새로운 것을 창조하기 시작함
          + LLMs도 이와 같은 재현 단계에 있음
          + 우리는 아직 LLMs의 적절한 사용법을 모르고 있음
          + 적절한 사용법이 채팅봇이 아닐 것임
     * 극단적인 견해를 싫어함
          + 0과 1이라는 개념은 디지털 세계에만 맞음
          + 우리가 사는 세계는 아날로그임
          + 'AI' 서비스가 오류를 일으킨다고 해서 그 가치를 무시할 수 없음
          + Apple의 서비스도 완벽하지 않음
          + 인간이 완벽하지 않기 때문에 인간이 만든 것은 완벽할 수 없음
          + 0과 1 사이에는 무수한 값이 있음
          + 이 개념을 무시하는 것은 개인적으로 매우 불쾌함
     * ChatGPT는 수백만의 활성 사용자가 있음
          + Apple은 기기에서 가능한 많은 작업을 수행하려고 하지만 RAM이 부족함
          + 작은 모델을 사용해야 해서 더 많은 오류가 발생함
          + 새로운 iPhone에 16GB RAM이 있어도 7b 파라미터 모델만 사용할 수 있음
          + 작은 모델은 여전히 사용하기 어려움
          + Apple은 클라우드 서비스를 더 많이 사용해야 할 필요가 있음
          + 10억 명 이상의 사용자를 처리하는 것은 쉬운 일이 아님
     * Apple의 'AI'에서 가장 큰 실수 중 하나는 범용 검색을 구축하지 않은 것임
          + LLM 기반의 '의미론적' 검색이 충분히 주목받지 못함
          + Gmail과 Dropbox의 검색 기능은 매우 불편함
          + Apple은 범용 검색 SDK로 이를 해결할 수 있음
     * AI가 검색을 더 어렵게 만듦
          + Google의 AI 요약은 실제로 필요한 정보를 제공하지 않음
          + AI가 문제를 해결하기보다는 더 복잡하게 만듦
     * AI가 상황을 악화시킴
          + Grammarly는 이전에는 잘 작동했지만, 최근에는 추천이 덜 신뢰할 수 있음
          + 명백한 오타도 놓치는 경우가 있음
     * AI가 OS와 함께 작동하는 것은 실망스러움
          + 개인 컴퓨터의 데이터를 개발자에게 제공하고 싶지 않음
          + AI 기능이 마케팅에서는 좋게 보이지만 실제로는 거의 사용되지 않음
          + OS를 안전하게 유지하고 Apple AI 앱을 2-3년 후에 사용하고 싶음
     * Apple의 AI 실패에 대한 변명
          + ""우리가 AI에서 실패한 것이 아니라 모두가 실패하고 있다""는 주장을 하고 있음
          + 이는 ""우리가 나쁜 전화기를 만든 것이 아니라 당신이 잘못 들고 있다""는 주장과 비슷함
     * ""Apple이 드물게 실수했다""는 주장
          + Auto, Vision Pro, AI에서 패턴이 나타나고 있음
     * 설명할 수 없다면 원하지 않음
          + ""해야 한다""거나 ""대부분의 경우 그렇다""는 설명은 원하지 않음

   전적으로 공감합니다. AI 관련 기능들이 출시되는데 이는 애플뿐만 아니라 다양한 업계에도 적용되는 말입니다. AI는 만능이 아니고 실수할 가능성이 많은 발전과정에 있는 기술이죠 ㅠ

   애플이 잘하면 애플이 잘한거고
   애플이 못하면 업계가 못한거군요?

   신도들은 대단합니다.

   왜 ""정말 통쾌했어요"" 짤이 생각나는 걸까요?
"
