"https://news.hada.io/topic?id=7091","Ghostscript, 이제 새로운 PDF 인터프리터를 기본 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ghostscript, 이제 새로운 PDF 인터프리터를 기본 사용

     * 기존 PostScript 로 개발된 버전을 C로 완전히 재개발한 버전으로 변경 (9.56.1 부터)
     * PDF 스펙이 진화 하면서 PostScript 만으로 처리하기 어려워 짐(투명도 같은)
     * 또한 많은 PDF 제작기들이 표준을 다 지키지 않아서, 검증하기가 어려워짐
       → 결국엔 Acrobat으로 열어보고 잘 열리면 OK 하는 실정. Acrobat은 이상한 PDF도 꽤 잘 견디고, 최대한 열기 위해 시도함
     * 이제 PostScript 와 결별히 가능해져서 스탠드얼론 PDF 인터프리터인 GhostPDF 도 제작 가능해짐(GhostPDL에 통합)
     * 기존 버전도 호환성을 위해 -dNEWPDF=false 로 사용은 가능
"
"https://news.hada.io/topic?id=7112","Textual - 파이썬용 TUI 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Textual - 파이썬용 TUI 프레임워크

     * 최신 웹 개발 방식을 이용한 TUI(Text User Interface) 프레임워크
       → Curses 같은 방식이 아닌 CSS 와 Vue/React 등의 기술등을 이용
     * 비동기 이벤트 핸들링(async/await 사용)
     * Rich 라이브러리를 사용하여 모든 렌더링 기능을 그대로 이용 가능
     * 맥/윈/리눅스 지원

   Curses 쓰고 있는데 좋아뵈네요.
   Python에 임베드된 Curses 같은 경우 윈도우하고 리눅스하고 처리가 다른 경우가 있어서 불편한 점이 있는데요.
   개인적인 단점은 제가 web을 몰라서 ㅠ

   Rich - 터미널을 화려하게 포매팅하는 파이썬 라이브러리
"
"https://news.hada.io/topic?id=7077","Userver - C++용 비동기 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Userver - C++용 비동기 프레임워크

     * ""C++의 속도, Python의 단순함, Go의 Coroutine 모델""
     * C++로 빠르고 편하게 마이크로서비스, 서비스, 유틸리티 개발을 도와주는 오픈소스 프레임워크
     * IO를 위해 Stackful Coroutines 모델 사용
     * 효율적인 비동기 드라이버 제공 : 각종 DB(MongoDB, PostgreSQL, Redis, ClickHouse, ..) 와 프로토콜(HTTP, GRPC, TCP,..)
     * Ubuntu, Debian, Fedora, Arch, Gentoo, macOS 에서 x86, x86_64, AArch64, Arm 아키텍처 지원

   C++ 알못이라....
   일단은 러스트의 토키오 같은 것이겠구나 싶네요.
"
"https://news.hada.io/topic?id=7085","간단한 자동화 기능을 제공해서 매월 백~천만원 버는 Micro SaaS들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                간단한 자동화 기능을 제공해서 매월 백~천만원 버는 Micro SaaS들

     * QAPop: Quora에서 인기 질문을 찾아서 자신의 제품을 마케팅 해주는 툴
     * BlackMagic: 트위터 배너를 실시간으로 바꿔줌
     * EavesDrop: 온라인 커뮤니티를 모니터링해서 잠재 고객을 찾아줌
     * DataFetcher: Airtable에 어떤 데이터든 임포팅 해줌
     * Messaged: SaaS용 이메일 마케팅 자동화
     * Howitzer: Reddit용 마케팅 자동화 도구(잠재적 Lead를 찾고 DM 및 채팅)
     * OnPodium: 팟캐스트용 웹사이트를 자동으로 만들어 줌
     * BlkBox: 페이스북 마케팅 자동화
     * Ousia: SEO에 최적화된 콘텐츠를 빠르게 만들어 줌
     * DocTranslator: 워드/엑셀/PPT/PDF/인디자인 등의 문서를 100개 넘는 언어로 번역
     * Listnr: 다양한 클라우드 TTS를 이용하여 고품질 Text-To-Voice 생성(74개 언어, 600개 이상의 음성)
     * Notion2Sheets: Notion과 구글Sheet 동기화
     * ABTesting: A/B테스팅 자동화
     * AIHello: 아마존 셀러들을 위한 Amazon PPC(Pay-per-click) 자동화
     * SalesLoop: 잠재고객을 찾아주는 자동화 도구
     * Warmbox: 자신의 광고 메일 계정을 Warm-up해서 평판을 올려줘, 메일 수신율을 높이는 도구
     * Approximated: 모든 SaaS 에 커스텀 도메인을 자동으로 붙여주는 도구

   많은 도움이 됐습니다 감사합니당!

   좋은 요약 감사합니다. 투자받고 사업하는 것보다 리스크가 별로 없는, 1인이 생활하기에 적당한 이익이 되는 서비스 하나 만드는것도 좋은 은퇴 전략같아요.
   그리고 문서를를 -> 문서를 이 맞는 것 같습니다!

   이 Micro Saas Idea는 요즘 재미나게 보는 뉴스레터중 하나인데요.
   $1K - $10K MRR(월 백만원~천만원) 정도 버는 Micro SaaS 들만 분야별로 리스팅해서 공유합니다.
   이번호는 제 관심중 하나인 Simple Automation 이어서 뉴스레터 소개겸 공유해봅니다
"
"https://news.hada.io/topic?id=7131","js1024 우승자 발표, 1등은 강성훈님의 epyt","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     js1024 우승자 발표, 1등은 강성훈님의 epyt

   JavaScript 1024바이트 로 만드는 코드 골프 대회
     * js 우승자 : epyt - 좌우반전(Mirror) 타이핑 게임
     * shader 우승자 : Escaping Matrix
     * html 우승자 : Mirror Puzzle

   와 아무 생각 없이 계속했네요. 재밌네요 ㅎㅎ 점수까지 있으면 좋겠네요

   축하드립니다~!

   감사합니다! 사실 아이디어를 먼저 작업한 뒤에 거기에 맞춰서 게임을 만든 거라 다른 작품에 비하면 좀 수수하다는 느낌이 있긴 했는데 어떻게 부문별 1위가 나왔네요. (전체로는 3위입니다.) 안타깝게도 전체 2위지만 부문별로도 2위를 기록한 Reflected Sun을 비롯한 다른 작품들도 살펴 보시길 추천드립니다.

   봐도 모르겠지만 축하드리고 존경합니다.

   He is still legend.

   Show 에도 올려주셨었는데, 우승하셨네요! 축하드립니다~!!
   Show GN: epyt: 1KB 타자 게임
"
"https://news.hada.io/topic?id=7150","딥페이크 비디오 통화인지 알려면 고개를 돌려보라고 하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    딥페이크 비디오 통화인지 알려면 고개를 돌려보라고 하세요
"
"https://news.hada.io/topic?id=7068","Publii - 스태틱 웹사이트 제작용 데스크탑 CMS 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Publii - 스태틱 웹사이트 제작용 데스크탑 CMS 오픈소스

     * 윈도우/맥/리눅스
     * 워드프레스랑 비슷한 기능. 로컬 데스크탑에서 빠르게 글과 콘텐츠 작성 가능
     * 다양한 내장 테마 제공
     * WYSIWYG / Block / Markdown 3가지 방식의 에디터 지원
     * Netlify, S3, GitHub Pages, Google Cloud, SFTP 등으로 업로드 가능
     * SEO 지원
     * 워드프레스 임포트
     * 오픈소스 (일렉트론 + Vue.js)
"
"https://news.hada.io/topic?id=7070","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   요즘 운영하는 블로그도 있고, 사내에서 publish할 글들이 좀 있어서 카페나 스터디 카페가서 주말 내내 글쓰고 놀것 같아요 ㅎㅎ

   7월동안 그림 30일 그리기에 도전했는데 이번 주말로 마지막 하나 남았어요. 그린 종이들을 북바인딩으로 엮으려고 합니다. 두달 연속 했더니 꽤 힘들지만 뿌듯하네요.
   다음달에는 책장 속에서 책 하나 골라 30일 영어 공부하기를 해볼까 해요.
     * 아크노바 라는 보드게임이 올해 순위가 보드게임긱에서 급상승이라서 지난주말에 한판 해봤는데 너무 재미있어서, 이번주에도 한번 더 하기로 했습니다. 계속 생각나더라고요.
     * 아컴호러 카드게임 광신도의밤 캠페인을 끝내고, 던위치의 유산 캠페인을 시작했습니다. 시나리오만으로도 재미나네요.
     * 제노블레이드 크로니클스 3가 출시되어서 한동안 달릴 것 같습니다. 2가 한글화 되기전에 영문판으로 했어도 재미있었는데, 처음부터 한글판으로 즐기면 느낌이 다를 것 같아요.
     * 요즘 주중에 너무 열심히? 달리는 것 같아서 주말엔 가능하면 위클리 뉴스레터만 적고 쉬려고 하는 중입니다.

   MMCA 너나의기억 보려 가려고 합니다. 베르사유 파리 작품을 보려구요.
"
"https://news.hada.io/topic?id=7059","4700억원 투자받은 Helium의 월 매출은 8백만원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     4700억원 투자받은 Helium의 월 매출은 8백만원

     * Web3 유스케이스의 모범 사례로 인정 받는 Helium은 a16z에 의해 $365M 투자를 받았음
       → 블록체인 기반의 탈중앙화 와이어리스 IOT 네트웍
       → 168개국에 90만개의 무선 핫스팟을 보유. 데이터크레딧(DC)을 사서 무선 네트웍을 사용하는 모델
     * 사람들이 핫스팟 노드를 사기 위해 $250M 을 지출할 것이라고 확신했지만.. 데이터크레딧 매출은 $6.5k/월

   이 글에서 얘기한 매출 데이터의 원 소스는 The Generalist 의 Helium 분석글 입니다.
   ""DC usage was just $6,561 in June""
   https://www.readthegeneralist.com/briefing/helium
"
"https://news.hada.io/topic?id=7057","사우디, 미래형 직선 도시 "The Line" 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      사우디, 미래형 직선 도시 ""The Line"" 공개

     * 9백만명 수용
     * 높이 500m, 넓이 200m, 길이가 170km 인 직선형 도시
     * 모든 시설들이 걸어서 5분내에 위치하여 자동차와 도로가 없음
     * 자연 환기 및 냉각. 100% 재생 에너지 사용
     * 외부 장벽은 거울 Facade 로 경관을 반사
     * 각 구성원에게 Equitable 한 자연 뷰 제공
     * 양끝은 고속 철도로 20분
     * NEOM 개발 프로젝트의 일부로 사우디 북서부 홍해 인근에 건설 예정
     * 2030년까지 1조달러(1300조원)을 들여서 완공 시키는 것을 목표

   직선형이 교류에 좋은 구조는 아닐 것 같은데 사막지대라서 바닷가 따라 지으려는 걸까… 싶네요.

   온갖 문제점들이 떠오르지만, 2022년인데, 이런 도시 하나쯤은 있어도 괜찮다는 생각이 듭니다. 달로 수학여행은 못가더라도...

   영상 보면서 몇가지가 떠오르네요.
     * 저만한 거울이 500m 높이로 1.6km가 있으면 동물(특히 새) 같은 게 부딪혀 죽지 않을까?
     * 500m 아래와 지상층의 일조량 차이는 어떻게 극복할 것인가?
     * 공항같이 3차원 인프라가 필요한 시설도 저 안에 지을 수 있는가?

   이런 생각이 떠오르네요.

   투명 방음벽 같은 경우에는 일정 간격으로 점을 찍거나 세로줄을 그어두면 조류 충돌을 줄일 수 있다고 하는데, 저런 벽에도 유사한 처리가 되어야 할 거라고 생각합니다. 또한 다른 지상 동물들을 위한 생태통로도 제공되어야 하지 않나 싶은데, 그런 부분은 과연 어떨지 모르겠네요.

   예전에 빛이 투과하는 콘크리트에 대해 들은 적이 있는데, 그런 걸 사용한다면 남향 쪽은 혹시 커버가 되지 않을까 싶기도 하지만 그럼 반대 방향인 북향 쪽이 문제가 되겠지요. 예전부터 SF의 영역에서 논의되던 원통형 우주 거주지 아이디어를 보면 거울이나 광섬유를 통해 외부의 태양빛을 내부로 분배한다고 하는데, 저런 공간이 현실화되려면 그런 기술이 실제로 필요하지 않나 싶네요.

   공항 같은 경우는 굳이 도시 안에 지을 필요가 있을까 싶습니다. 어느 방향으로든 좀 떨어진 곳에 공항을 두고, 도시와 공항을 잇는 철도나 도로를 지으면 되겠지요.

   저는 그것보다도 방재라던가 하는 부분이 더 궁금합니다. 과연 저런 고밀집 공간에서 대규모 화재가 발생한다면 사람들은 어디로 대피해야 할까요? 길이가 길다 보니 산맥을 관통하는 모양인데 그런 곳은 과연 어떻게 지어야 할까요? 벽을 이루는 일부분에 문제가 있어 허물고 새로 지어야 한다면 과연 인접한 부분에 어떻게 영향을 주지 않고 공사할 수 있을까요? 높이를 생각하면 엘리베이터로 온통 도배가 되어야 할 텐데, 그러면 정전과 같은 사태에 지나치게 취약해지지 않을까요? 하나하나가 쉽지 않은 문제가 아닌가 싶지만, 그럼에도 불구하고 저런 걸 생각하는 것만으로도 대단하다 싶습니다.

   1300조원? 스케일이...

   모든 게 5분 거리에 있다고 해도 저 건너편 시설이 더 좋아서 결국은 더 멀리 이동할 일이 생기지 않을까 하는 의문증을 비롯해서 ""잘 될까?"" 싶긴 한데 한편으로는 이런 거 하나쯤은 있어도 되지 않을까 하는 마음도 드네요.

   유튜브 영상으로 보는게 편합니다 https://youtu.be/0kz5vEqdaSc
   뭔가 신박하면서도, 디스토피아 같기도 합니다.
   장벽속에 사는 사람들 같은 느낌..
"
"https://news.hada.io/topic?id=7093","TikTok, HTML5 미니 게임 파일롯 테스팅 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     TikTok, HTML5 미니 게임 파일롯 테스팅 시작

     * 새 비디오를 포스팅 할 때, 마지막 화면에서 ""Add Link"" 버튼을 통해 미니 게임에 대한 링크를 추가 가능
          + 기존엔 TikTok Jump 를 통해서 써드파티 앱 링크를 여기에 추가
          + 미니게임은 Jump의 일부는 아니긴 한데, 같은 섹션에서 보임
     * Vodoo, Nitro Games, FRVR, Aim Lab, Lotum 등의 파트너 들과 함께 여러 게임을 공개
"
"https://news.hada.io/topic?id=7128","아마존, 로봇청소기 iRobot(Roomba) 2.2조원에 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아마존, 로봇청소기 iRobot(Roomba) 2.2조원에 인수

     * 주당 $61, 총 $1.7b로 모두 현금 인수
     * iRobot은 1990년 설립되어 진공청소기부터 걸레 청소기, 수영장 청소기, 잔디 깎는 기계등으로 라인업을 확장
     * Covid때 사랑받았지만, 최근엔 비용 증가 및 매출 감소로 10% 감원 예정
     * 아마존은 작년에 집안을 순찰하는 Astro 홈 로봇($1449)을 발표했음
     * 아마존 역사상 4번째로 큰 인수 : Whole Foods($13.7b), MGM ($8.45b), One Medical ($3.9b)
     * 발표후 iRobot 주가는 19% 급등($59)

   Amazon 2021.9월 하드웨어 발표 총정리
"
"https://news.hada.io/topic?id=7124","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   이번주는 휴가주 라서 더 적극적으로 쉬어 볼라고요.
   제노블레이드3 하면서..

   재즈바에 가려고 예약해두었어요.
   그리고 이번달부터 영어 공부를 가볍게 시작했는데요. 영어 자막으로 시트콤 틀어놓고 있고요. 뉴욕타임즈 인스타 정도 읽기 시작했어요. 슥 보다가 모르는 단어나 표현은 찾아보고 기억하려고 해요. 공부하기 좋은 책이 있다면 책으로도 하고 싶네요~ ㅎㅎ
"
"https://news.hada.io/topic?id=7136","AWS Lambda, 계층형(Tiered) 요금제 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AWS Lambda, 계층형(Tiered) 요금제 발표

     * 월간 사용량(GB-seconds)에 따른 요금제 플랜을 2개 추가
     * 많이 쓰는 사용자들에게 할인을 적용
     * x86/arm64 모두 0~6b 까지는 현재와 동일,
       6~15b 까지는 10% 할인, 15b 이상은 20% 할인
"
"https://news.hada.io/topic?id=7114","Introducing the New WasmEdge Rust SDK","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Introducing the New WasmEdge Rust SDK

     * WasmEdge 새버전에 Rust binding 추가됨
     * Rust application 에 WebAssembly functions 와 modules 를 사용할 수 있도록 도와줌
     * 특별히 Rust-based cloud native 와 block chain infra 에 도움이 많이 될 것으로 기대
     * wasmedge-sys 는 일반적인 Rust 개발을 위한 기본적인 타입과 low-level API 세트
     * wasmedge-sdk 은 wasmedge-sys 을 활용한 high-level API 세트로 일반적인 애플리케이션 개발에 도움이 됨
     * 실제 예제는 https://www.secondstate.io/articles/wasmedge-rust-bindings/ 참고
     * Bug Hunt 이벤트가 있어서 일정 포인트를 얻으면 티셔츠 등을 획득 할 수 있음
"
"https://news.hada.io/topic?id=7133","DreamWorks, 최첨단 MCRT 렌더러 MoonRay를 오픈소스로 공개 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DreamWorks, 최첨단 MCRT 렌더러 MoonRay를 오픈소스로 공개 예정

     * '장화신은 고양이2' '나쁜 녀석들'에 사용된 렌더러
     * USD Hydra Render Delegate (Pixar Hydra 렌더링 엔진 연결을 위한 브릿지) 와
       Arras를 통한 멀티 머신/클라우드 렌더링 포함
     * 효율성과 확장성을 염두에 두고 이전 레거시 코드 없이 새로 개발
     * 분산 렌더링, 픽셀 매칭 XPU 모드, Intel® Embree를 활용한 레이트레이싱 등 지원

   MCRT : Monte Carlo Ray Tracer
   USD : Universal Scene Description 3D 그래픽 데이터의 교환을 위한 프레임워크
"
"https://news.hada.io/topic?id=7132","GitLab은 직원 노트북에 Microsoft Windows 사용을 금지하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GitLab은 직원 노트북에 Microsoft Windows 사용을 금지하고 있음

     * Windows는 점유율 때문에 스파이웨어, 바이러스, 랜섬웨어가 주요 타켓하는 OS
     * macOS는 맥북에 기본설치 되어있고 Linux는 무료지만, 윈도우 프로페셔널 버전은 별도 구매해야함
     * 많은 노트북에 기본 설치되어 제공되는 윈도우 홈 에디션은 깃랩의 보안 가이드라인을 만족하지 않음. 홈 에디션은 보안이 어렵기로 악명 높음
     * 그럼에도 꼭 윈도우 사용이 필요하다면 ""예외 관리 프로세스""에 따라 별도 신청이 필요
          + 사용 기간을 명시해야함

   회사에서 fedora 를 개발노트북으로 사용중입니다. 너무좋습니다.

   회사 용 노트북에 우분투 사용하고 있는데 솔직히 별로 불편함이 없는 거 같습니다.

   윈도 홈 에디션에 그룹정책편집기(gpedit.msc)가 없어서 보안 설정이 힘들었던 기억이 나네요.

   우리나라 회사는 윈도우 외 os를 사용하려면 예외신청 해야하는 경우가 많은데 흥미롭네요

   원문에서 “윈도우 홈 에디션은 보안이 어렵기로 악명높다”는 내용에 걸려 있는 링크 글은 2019년에 어떤 보안 연구원이 자기 아내의 새 노트북에다가 공공 장소에서의 Wi-Fi 접속을 상정하여 각종 보안 강화 설정을 진행한 절차를 서술하고 있습니다.
   https://www.markloveless.net/blog/2019/1/15/dealing-with-windows-10
   https://duo.com/assets/pdf/bring-your-own-dilemma.pdf
"
"https://news.hada.io/topic?id=7135","OBS 28.0 Beta 1 - 10비트/HDR 지원, Qt 6, 네이티브 애플 실리콘 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OBS 28.0 Beta 1 - 10비트/HDR 지원, Qt 6, 네이티브 애플 실리콘 지원

     * AV1/HEVC 인코더를 이용해 HDR 및 10비트 영상 인코딩 지원 (Mac/Linux 환경에서는 제한적으로 지원: HDR 프리뷰 미동작 등)
     * Qt 6로 업그레이드: Qt 6에서 윈도우 7 & 8, macOS 10.13 & 10.14, Ubuntu 18.04 및 32비트 운영체제 지원이 중단되었기 때문에 OBS는 이러한 플랫폼을 더 이상 지원하지 않음
     * 네이티브 애플 실리콘 지원 추가: 일부 써드파티 플러그인은 동작하지 않을 수 있음, 이러한 경우 기존 x86 빌드(Rosetta)를 계속해서 사용할 수는 있음
"
"https://news.hada.io/topic?id=7120","페북/메타를 떠나는 것이 Trino 커뮤니티에 최선이었던 이유 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   페북/메타를 떠나는 것이 Trino 커뮤니티에 최선이었던 이유

     * 페이스북이 Presto를 시작하는데 발판이 되어줬지만, 커뮤니티와 페이스북의 요구사항이 맞지 않게 되면서 빨리 떠나야 했음
     * Presto는 페북이 IPO하기 직전인 2012년에 오픈소스로 시작
     * Presto가 페이스북 인프라의 중심 프로젝트가 되면서 엔지니어들과 매니저들의 관심을 받음
     * 이것은 성공의 신호이기도 하지만, 이들중 일부는 오픈소스 커뮤니티와 같은 목표를 지니지 않음
     * 커뮤니티 정책은 ""누구도 특별하지 않다"" 임
       → 모든 사람의 코드는 리뷰되어야 하며, 단지 페이스북에서 일한다는 것 만으로 커밋권한을 받을 수는 없음
     * 페이스북의 엔지니어들은 ""인상적인(Memorable)"" 작업을 만들어야 승진이 되기 때문에, 이런 작업들이 속도를 느리게 만듦
       → 최종적으로는 페이스북 엔지니어들이 자동적으로 컨트리뷰터 권한을 가지는 것으로 결정됨. 더 빠르게 움직일수 있도록
     * 페이스북 엔지니어들이 나쁜 것 같아 보이지만, 실제로는 그렇지 않음.
       → 이런 경쟁이 심한 회사에서 엔지니어들은 인상적인 작업을 하지 못하면 승진을 못하고, 해고 됨
     * 이것의 문제는 오픈소스 커뮤니티를 중립적으로 유지하려던 것을 바꾸게 된다는 것
       → 그래서 프로젝트가 건전하게 유지되려면, 프로젝트를 포크해야 겠다고 생각
     * 이 시점에서 가장 큰 잘못은 이름을 바꾸지 않고 그대로 Presto로 두었다는 것
       → ""Presto""라는 이름이 페이스북이 아닌 커뮤니티가 소유했다고 믿었지만, 커뮤니티가 프로젝트에서 나갔을 때 페이스북 혼자 Presto에 남아 단독 소유자가 되어버림
     * 더 큰 문제는 페이스북에 남아있던 사람들을 화나게 했다는 것
       → 우린 페이스북이 내부적으로 포크하고, 커뮤니티를 그대로 둘줄 알았지만, 경쟁하는 프로젝트를 만드는 노력을 하기도..
     * 기존 PrestoDB와 구별하기 위해 PrestoSQL로 명명했으나, 끝내 Trino 로 변경
     * Trino로 변경해서 이제 커뮤니티가 안정화 되고 성장하기 시작함

   단순히 이름은 변경했다고 생각했는데, fork 했던 것이었고, 이에 따른 이야기와 철학이 있었던 것이 흥미롭네요.
   좀 살펴보니 prestodb/presto의 주요한 컨트리뷰터들 (적어도 4명)은 trinodb/trino에서 활발하게 기여하고 있고, 2019년 경 이후로 기존의 prestodb/presto 쪽에는 기여가 없군요.

   https://github.com/trinodb/trino/graphs/contributors
   https://github.com/prestodb/presto/graphs/contributors

   부연설명이 꽤나 길어서 간단히 요약했습니다만,
   결론적으로는 Presto가 너무 많이 쓰이면서 페북내에서도 입지가 생기자
   이를 위해서 커뮤니티의 목표와는 다른 일이 생기면서 발생한 일 때문에 아예 이름까지 바꾸고 재시작 했다는 거네요.

   하지만 저도 아직 Presto가 더 익숙하고, Trino는 입에 붙지는 않네요.
   Trino - 빅데이터용 분산 SQL 쿼리 엔진
"
"https://news.hada.io/topic?id=7073","HypeScript - TypeScript 타입 시스템의 간단한 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HypeScript - TypeScript 타입 시스템의 간단한 구현체

     * 런타임 코드 없이 TypeScript의 Type Annotation 으로 구현
     * TypeScript 코드를 문자열로 TypeCheck 제네릭에 넘기면 타입 에러를 확인 가능
     * 문법중 일부만 지원 (변수,함수,배열,객체,메소드,함수 리턴타입..)
"
"https://news.hada.io/topic?id=7144","MidJourney - SF에 강점을 가진 이미지 생성 AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MidJourney - SF에 강점을 가진 이미지 생성 AI

     * 공상과학 영화, 비디오게임에 잘 어울리는 이미지를 생성
     * 웹에 Discord로 로그인하거나 Discord 내에서 Bot을 통해 사용 가능
          + /imagine 명령에 프롬프트를 작성하면 그걸 통해 이미지를 생성해줌
     * 무료 사용시 약 25장 생성 가능 (25 GPU Time, 보통 1장에 1 GPU Time)
     * 월 $10 멤버십 가입시 월 200 GPU time 제공

   cyberpunk tank duck

   아ㅠㅠ 잘못 입력했습니다 ㅠㅠ

   MidJourney가 올초에 나와서 사람들이 엄청 많이 쓰고 있는데요. 좀 많은 맥락을 붙이자면, 아래와 같습니다.
    1. 2021년에 OpenAI에서 결과물이 쩌는 Text-to-image AI인 Dall-E 출시
    2. 초대 받은 소수에 사람들만 쓸 수 있어서, 비슷한 Open Source 프로젝트들이 있었지만 성능이 떨어짐.
    3. Disco Diffusion이라는 이름의 모델을 누가 공개했고, Google Colab에서 쓰기 쉬운 형태로 제공되어 비개발자 (주로 예술하는 분들)도 많이 사용하게 됨
    4. 2022년 초 MidJourney 출시, Disco Diffusion으로 작업하던 사람들 위주로 Close-beta로 운영
    5. Dall-E 2 출시과 public beta 시작
    6. MidJourney public beta 시작 후, 3달 사이에 몇천명 있던 Discord 서버가 90만명이 넘는 인원으로 늘어남

   MidJourney, Dalle, Disco Diffusion 비교글

   오픈소스 모델인 Disco Diffusion은 지금 시점에 누가 쓰냐 할 수 있지만, text-to-image를 넘어 text-to-video까지 할 수 있는 건 아직도 Disco Diffusion 밖에 없습니다 예시. MidJourney와 Dall-E도 할 수는 있겠지만, 현실적으로 서버비 때문에 불가능 할거에요.

   판타지/SF 소설 표지나 삽화에서 봤던 일러스트 느낌이내요. 개인적으로 좋아하는 스타일입니다.

   GPT-3로 만들어진 같은 문장을 넣어서 비교해본 글 두개 입니다.
   DALL-E + GPT-3
   MidJourney + GPT-3

   얼마나 실사용을 사람들이 할 지 모르겠지, 잘만 된다면 이전 GN에 올라왔던 글 처럼 다달이 용돈벌이 되는 쏠쏠한 용돈벌이가 되겠네요.

   어떤 GPU를 쓰는지 모르겠고 1GPU Time이 몇 ms인지 모르겠으나 장당 가격으로 봤을 때 적자볼일은 없어보이는군요...

   MidJourney vs. DALL-E 2 : 놀듯이 미드저니! 일하듯 달리? https://brunch.co.kr/@nolgong/17
"
"https://news.hada.io/topic?id=7115","Android NDK의 Rust 지원 "계획" 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Android NDK의 Rust 지원 ""계획"" 발표

   Android의 OS일부 컴포넌트는 Rust 가 사용되고 있습니다만, app을 개발하는데서는 rust를 이용하는데 현재 한계가 있습니다.

   Android 팀에서 NDK를 담당하고 있는 Dan Albert가 Android 개발 ecosystem 및 NDK에 rust를 통합하기 위한 item들을 정리하고 있습니다.

   원래 매년 2번 NDK를 릴리즈했었는데요.
   Q1 : 컴파일러 버젼 업데이트
   Q3 : 지원 OS 업데이트

   컴파일러 버젼 업데이트와 관련해서 gcc에서 clang 으로 이전이 완료되어서 그런건지, 다음 봄에는 건너뛴다고 하는데요.

   rust 지원에 공수가 들어 갈 것으로 보입니다.

   Rust와 NDK 23 버전이 잘 안되어서 NDK 21버전을 쓸 수 밖에 없다는 글을 본 적 있는데 나아졌으면 좋겠습니다.

   NDK 23부터 linker 가 gnu ld 에서 lld 로 변경되면서 발생하는 것 같습니다. (러스트 쪽이 gcc와 엮여있는 듯)
   NDK 23 미만은 deprecate 된 것 같고, workaround를 이용해서 NDK 23 이상과 사용되는 것이 권장되는 것 같습니다.

   https://crates.io/crates/ndk-sys#supported-ndk-versions
"
"https://news.hada.io/topic?id=7152","Visual Studio Code 2022 7월 버전 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Visual Studio Code 2022 7월 버전 업데이트

   🍫 타이틀바에서 메뉴바, 코맨드바, 레이아웃 컨트롤등을 보여주기/감추기 가능
   🗂 선택된 라인을 커스텀하게 폴딩 가능 (⌘K ⌘,)
   🔎 Search view 에서 다중 선택 가능
   🌳 Tree view 에서 특정 키워드로 필터링 가능
   🖥 Shell integration 이 기본으로 활성화, PowerShell 키바인딩 지원 확장
   ✍️ Code 를 Git merge tool 로 사용 가능
   📜 class, interface, namespace 등을 상단에 고정시키고 코드 내용을 스크롤 가능
   📝 Nodebook, Python, Development container CLI 지원 강화

   현재 vscode 다운로드 속도가 거의 56k 모뎀 수준이네요. 윈도우 xp시절 윈도우 업데이트를 보는것 같습니다. vscode가 워낙 점유율이 높으니 매 버전 릴리즈 때마다 트래픽이 장난 아닐것 같다는 생각이 듭니다.

   번역 요약 좋아요ㅎ

   2022년 아닌가여?

   수정해두었습니다.

   감사합니다
"
"https://news.hada.io/topic?id=7061","DevRel 이란 무엇인가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DevRel 이란 무엇인가

     * Developer Relations 또는 Developer Advocacy
       → 주로 타겟 마켓이 개발자인 회사에 존재하는 역할
       → 특정 제품이나 기술에 대해 개발자에게 알리기 위해 커뮤니티를 만들거나, 콘텐츠를 만들거나, 제품의 개발자 경험을 향상시키는 등의 활동을 진행

DevRel 의 3가지 타입

     * Community Builder : 커뮤니티에 중점을 두는 DevRel
          + 개발자 커뮤니티를 만드는 역할
          + 행사를 조직하고, 라이브스트리밍을 하고, Slack/Discord 를 운영하고, 피드백을 주고 받는 등의 행동을 통해서 개발자가 뭔가를 얻어 갈수 있게 하기
     * Developer Educator : 콘텐츠에 중점을 두는 Dev Rel
          + 글 또는 발표 등을 통해서 제품을 알리기
          + 블로그, 비디오, 워크샵, 팟캐스트, 트윗 등
          + 단기적으로는 프로모션을 운영하거나 장기적으로는 SEO 까지도 고려
     * DX Engineer : 제품에 중점을 두는 DevRel
          + 제품의 개발자 경험에 대한 오너(개발자 들이 제품에 대해서 어떻게 느끼는지를 개선)
          + 개발자와 직접 대화하고, 그들의 의견에 따라서 문서와 가이드를 개선
          + 코드 예제, 템플릿, Integration 같은 작업도 진행

DevRel 로 취업하기

     * 굉장히 핫한 분야임
     * 많은 스타트업들이 좋은 DevRel을 찾고 있음
     * DevRel에 지원하기 위한 주요 스킬들
          + 코딩 능력 : 개발자와 공감하기 위해서는 코딩을 할 수 있어야함
          + 커뮤니티 빌딩 능력 : 커뮤니티를 만들고 운영해본 경험이 있으면 좋음. 대학이나, 오픈소스, 또는 온라인 커뮤니티 등
          + 콘텐츠 생성 능력 : 발표하고, 유튜브 비디오를 찍고, 트윗하고, 블로그 글을 쓰는 능력

DevRel 을 위한 조언

     * How to engage developers
          + Show, don’t tell. : 말로 하지 말고 보여줄 것 (제품을 빠르게 사용해 볼수 있게)
          + Features not benefits : 기능을 직관적으로 보여 주고, 다른 제품과 비교.
          + Be genuinely helpful : 고품질의 자료(API문서, 잘 관리되는 도움말 사이트, 하우투 비디오, 샘플 유스케이스등)에 투자할 것. 그리고 추가 도움이 필요할 때 쉽게 연락할 수 있도록 할 것
          + Be Direct : 개발자에 대해서 알고 각 개인에게 직접 글을 쓰는 것처럼 상상할 것. 이렇게 하면 판매용 문구가 아닌 진짜 도움이 되는 콘텐츠를 작성할 수 있음
          + Think beyond the 9-to-5. : 많은 개발자들은 직장 내부 또는 밖에서 다양한 주제의 사이드 프로젝트를 진행함
          + Repurpose Content : 같은 콘텐츠를 최대한 재활용할 것. 트윗 → 블로그 → 비디오 → 컨퍼런스 발표 등으로 파이프라인을 구성
          + Have a ""breakable toy"" : 새로운 기술을 적용해보고 그 변경에 따른 지표를 보여줄 수 있는 진짜 앱을 가질 것. 작지만 진짜여야 함. 간단한 운동 트래커, 식단 플래너, 노트 작성 도구등. 당신과 친구들 몇명정도의 진짜 사용자가 있으면 좋음
     * 그외 DevRel 관련 자료들

   저도 같은 생각입니다. 소프트웨어 개발 문화가 발전 함에 따라서 당연히 하는 일의 종류도 다양해져야 하고 세분화 되어야 할 것 같아요. 향우 단순히 프로덕션을 만들것에만 집중해서 개발직, 관리직으로 나누는 것이 아니라 프로덕션을 발전 시키고 홍보하는데 필요한 다양한 역활이 생기면 좋겠습니다. DevRel/Advocate 로만 나뉘던 거에서 DX 가 추가되는 점이 아주 좋네요. 크롬 DevRel 팀 멤버들이 스포티파이의 DX 로 많이 이직한 것도 좋은 예가 될런지 모르겠습니다. 개인적으로 참 관심있는데 자리가 참...

   저 글의 주체들은 대부분 Vercel 의 DevRel 팀인데 오래 된 DevRel 조직에서보다 신생 스타트업(?) 에서 DevRel 을 정의 하니 신기하네요.

   해외에선 굉장히 핫하지만.. 국내에선.. 음.. ㅠㅠ
   하지만 저는 꼭 필요한 역할이라고 생각합니다.
     * Developer Advocacy 핸드북
     * 개발자가 선택할 수 있는 23가지 커리어 패스
"
"https://news.hada.io/topic?id=7143","mCaptcha - PoW 기반의 무료 캡차 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     mCaptcha - PoW 기반의 무료 캡차 오픈소스

     * SHA256 기반 PoW(Proof of Work) 사용
     * 개인이 이미지를 선택하거나, 시간을 소모할 필요 없이 컴퓨터에게 일을 시키는 방식
          + 서버에 뭔가 요청을 하려면, PoW를 생성해서 보내면 토큰이 발행
          + 그 토큰을 포함해서 보내면 인증 후 처리하는 방식
     * 사용자 입장에서는 전혀 보이지 않음
     * 개인정보 보호(쿠키 사용안함, IP 주소랑 상관없음)
     * Replay 공격에도 강함 : PoW가 짧은 시간동안만 사용 가능하며, 딱 한번만 사용할 수 있음
     * 정상 유저는 거의 지연이 없으며, 공격을 받을 때는 약 2초 이하의 딜레이가 생길 수 있음

   비트코인을 이해할때 봤던 PoW를 캡차에 넣었군요.

   PoW를 위한 연산에는 많은 컴퓨팅 리소스가 필요하고 증명에는 적은 리소스만 있으면 되고 난이도 또한 변한다고 하니 개인 프로젝트가 있다면 한번 써보고싶네요 :)

   PoW 알고리즘이 원래 이메일 스팸을 거르기 위해서 만들어졌다는 걸 생각하면 다시 원래의 목적으로 돌아왔군요
"
"https://news.hada.io/topic?id=7087","Aha Moment & Activation - 토스 리더가 말하는 유저를 끌어당기는 서비스 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Aha Moment & Activation - 토스 리더가 말하는 유저를 끌어당기는 서비스 개선

   이승건 대표의 Aha Moment & Activation 개선 파트 강의를 정리했습니다. 물 흐르듯 강의를 하는 모습을 보다보니 얼마나 많이 자료를 찾아보고 실험을 해봤을지 상상이 가질 않았습니다.

   지금은 잠잠하지만 얼마전 C.C라는 개념에 대해 엄청난 논쟁이 있었습니다.

   거기에 대한 의견에 관계없이 간단명료하면서도 적절히 추상화된 의사결정 프레임워크가 있고 그 프레임워크에 이유를 담은 모습을 보면서 대단하다고 생각했습니다.

   데이터 분석 하는 입장에서 보시면 좋을 영상입니다. 추천드립니다.
"
"https://news.hada.io/topic?id=7043","애플 실리콘은 '불편한 진실'임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플 실리콘은 '불편한 진실'임

     * Wirecutter가 ""최고의 노트북""에서 맥북 제품군을 제외시켰음

     최근의 PC 하드웨어 비교에서 맥들이 제외되는 것은, 실제 벤치마크에서 애플 실리콘 맥의 가성비가 Wintel 을 훨씬 상회해 버리기 때문에 애플을 옹호한다는 느낌이 들어서 일까 ?
     평론가들이 보기에 MacBook은 Intel을 사용하는 PC였는데, 애플 실리콘 때문에 더 이상 PC가 아닌 걸까?
     * 애플 실리콘은 맥을 싫어하는 컴퓨터 매니아들에겐 ""불편한 진실""임. 마치 Fox News 팬들이 기후변화에 대응하는 것처럼.

   애플실리콘이 훌륭한 프로세서인것은 반박할 수 없는 사실이지요.
   제 주관적으로는 애플실리콘은 독자적인 OS만 지원하는, 마치 게이밍콘솔같은 최적화의 느낌이라서 그런게 아닐까요.
   물론 단일기능만 제공하는 게이밍콘솔에 비유하는것이 정확하진 않겠지만 애플 제품위주의 연동성만 훌륭하게 제공하는것이 PC 로써 좋은 평가를 받지 못할 여지가 있다고 봅니다.

   그러한 이유를 근거로 평가를 했으면 모르겠는데 글에서 지적하는건 그런 평가조차 안하고 마치 아예 배제를 한 것을 문제 삼는 것이 아닌지...

   IN ARM WE TRUST!

   ""애플 실리콘은 맥을 싫어하는 컴퓨터 매니아들에겐""이 되어야 할 것 같아요

   어라라.. 왜 저렇게 적었을까요 ㅠㅠ 수정했습니다.

   존 그루버가 ""WIRECUTTER’S ‘BEST’ LAPTOP"" 글에서 왜 ""$1300 짜리 Dell XPS 13"" 이 ""$1000 짜리 M1 맥북 에어""보다 느리고,배터리도 별로고, 해상도도 별로인데 최고의 노트북으로 선정 되었냐고 비평한데에 대해서,
   잭 웰본이 ""A Burger Without Heinz"" 라고 이에 동의한다며 최근의 리뷰들이 비교 대상군에서 맥을 다 제거하고 있는 것을 저격한 것에 대해 다시 인용하며 올린 글입니다.

   솔직히 요즘 들어서는 고사양 게임과 한국의 몇몇 보안 떡칠 웹사이트 들어가는 용도 말고는..
   윈텔머신 보다 맥 제품군을 사는게 훨씬 가성비가 높긴 합니다.

   HW 적으로는 호불호가 없을 것 같은데요.
   OS 는 좋고 나쁨을 떠나서 이미 몸에 익은 UX 를 버리는게 쉽지 않아 윈도우를 선택하는 분들이 많은 것 같습니다.
"
"https://news.hada.io/topic?id=7141","왜 인류는 1960년대처럼 강력한 로켓을 발사하지 못할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    왜 인류는 1960년대처럼 강력한 로켓을 발사하지 못할까?

     * 8/4일에 SpaceX가 발사한 팰컨9에 실린 다누리호는 달궤도에 가는데 ""4개월 반"" 소요 예정
     * 그런데 1969년 발사된 아폴로 11호는 ""4일 6시간""만에 달에 착륙했음
     * 아폴로 11호는 로켓 역사상 가장 강력하고 큰 엔진인 F-1 엔진을 탑재했기 때문
     * 미국의 로켓다인사가 제작한 이 엔진은 아폴로 계획이 종료되면서 실전된 기술이 됨 (Lost Technology)
     * 설계도가 사라진 것은 아니지만, 분초를 다퉜던 아폴로 계획의 바쁜 일정, 그리고 지금처럼 클라우드에 바로바로 올려서 백업하던 시스템도 아닌 오프라인에서의 아날로그 방식의 백업 시스템, 그리고 수없이 많은 시행착오를 일일이 기록할 수 없었다는 점이 문제
     * 1980년에 미국의 로켓다인사는 약 20여년 전의 기술문서를 복원하여 F-1 엔진 관련 문서를 20권의 책으로 펴냈지만,
          + 하루에도 몇번 바뀌는 기술 수정사항이 낱낱이 기록되지 않았고,
          + 엔지니어들의 Trial-and-Error 가 구전되지도 아님
          + 공장에서 만든 부품이 아닌 즉석에서 선반/밀링머신등으로 수작업으로 만든 부품등의 스펙이 전해지지 않음
     * F-1 엔진 하나에는 5천-6천 개 정도의 부품이 들어가는 것으로 알려져 있는데, 이 중 파악되지 않은 부품이 대략 5-10% 정도 있는 것으로 추정되고 있으며, 파악된 부품도 일부는 재현이 어렵다는 평가
     * 잘 보존된 상태의 F-1 엔진이 있다면 리버스 엔지니어링이라도 가능하겠지만, 지구상에 없음
     * 아마존의 제프 베조스가 꾸린 민간 탐사팀이 아폴로 계획에 활용된 새턴 로켓 잔해를 수거
          + 2013년 대서양 심해 바닥에 거의 반세기 가까이 잠자고 있던 아폴로 11호의 새턴 로켓 1단 잔해를 찾는데 성공
     * 전미의 회사 창고, 박물관 수장고, 군사 시설 등에 흩어져 있던 F-1 관련 부품들을 모으고, 실전된 기술을 다양한 방법으로 복구
          + F-1 엔진은 2010년대 들어 다시 현역 로켓 기술로 활용될 수 있는 방안이 생겼음

   휴스턴가면 안(못)쏘고 남겨놓은 새턴5 한 대 있는데요...

   페북글을 보니 원문이 말하고자 하는 바는 이해하지만, 사실관계가 애매한 부분이 많은것 같네요.
     * Lost technology 라고 보기는 어렵습니다. F-1 엔진 개발 시 사용된 자료들이야 당연히 많이 소실되었겠지만 멀쩡한 상태의 F-1 이 여전히 남아있기 때문에 리버스 엔지니어링도 가능하고, 현대의 컴퓨터를 활용한 모델링을 통해 훨씬 더 추력이 높은 로켓을 만들 수 있습니다.
     * 팰컨9는 F-1엔진을 여러개 사용했던 새턴V에 비하면 매우 작은 로켓입니다. 그나마 팰컨 해비는 좀 더 큰데, 그마저도 새턴V에 비해서 많이 작습니다. 그러면 기술이 안되서 이렇게 작게 만들었느냐? 아닙니다. 단지 비용 때문에 그런 것입니다.
     * SpaceX 로켓은 재활용이 가능하기 때문에 비용을 매우 많이 줄일 수 있습니다. 근데 재활용을 위해서는 연료를 모두 소모할 수 없고 그로 인해 추력도 좀 낮아지게 됩니다. 하지만 경제성은 비교할 수 없을 정도로 높습니다.
     * 즉, 해당 엔진 만들 기술이 없는게 아니라 경제성 등으로 인해 안 만드는 것에 가깝습니다.

   원문 댓글 중 서상현님이 사실관계를 짚어주신 내용이 있어 옮겨 적어봅니다.

     좋은 글 잘 읽었습니다.

   다만 ""애석하게도, 그리고 굉장히 의아하게도, 완벽하게 보존된 F-1 엔진은 지구상에 존재하지 않는다"" 부분은 제가 아는 사실과 다릅니다. F-1 엔진 기술을 복구할 당시의 WIRED 기사에 따르면, excellent condition의 엔진이 storage에 있었고, 기술 복구는 주로 이 엔진을 통해 이뤄졌습니다. 베조스가 대서양에서 F-1 엔진을 인양한 것은 기술보다는 역사적인 이유에서입니다.

   https://www.wired.co.uk/article/f-1-moon-rocket

   찾아보니 F-1 엔진의 복제와 관련된 Ars Technica의 2013년도 기사를 번역한 번역문도 있네요.
   NASA가 어떻게 괴물같은 F-1 엔진을 되살렸는가

   읽다보니 소설 파운데이션의 내용과 비슷하게 흘러간다는 생각이 나네요.

   다누리호가 4개월 걸리는 건 연료를 최대한 덜 쓰는 (그렇지만 난이도는 높은) 코스를 선택해서 그렇다고 하더라고요.

   와... 비교적 가까운 시간대에 로스트 테크놀로지가 생긴게 신기하네요.

   글 주제랑은 벗어난 이야기지만, 한때 피쳐폰 게임에 대한 애정으로 관련 자료를 찾아봤던 적이 있습니다. 근데 국내 피쳐폰은 해외랑 다른 독자암호화규격을 사용하고, 피쳐폰 시대가 끝나버려서 관련 자료가 거의 없더라구요. 좀 더 시간이 흘러 관련 분야에서 종사하시던 분들이 돌아가시면 완전 로스트 테크놀로지가 되겠구나, 그런 생각이 들었습니다.

   이럴수가. 역사의 한 축이 ㅎㅎ

   WIPI 플랫폼인가요 ㅎㅎ

   고대의 기술이 불가사의인 이유랑 비슷한 느낌으로 와닿네요.

   성균관대 권석준 교수님의 글인데요.
   굉장히 긴 페이스북 글이라서 일부만 옮겨 봅니다. 원문을 다 읽어보시기 바랍니다.

   권교수는 화학공학과네요. 로켓엔진분야에얼마나 전문성이있으실까 의문이 약간은듭니다.

   좋은글 감사합니다.
"
"https://news.hada.io/topic?id=7037","16년간 알츠하이머 연구를 주도해 온 핵심 논문 조작 의혹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    16년간 알츠하이머 연구를 주도해 온 핵심 논문 조작 의혹

     * 6개월에 걸친 조사 끝에 지난 2006년 네이처에 미네소타대 연구팀이 발표한 알츠하이머 연구 논문이 의도적으로 조작됐을 가능성이 크다는 과학자들의 분석 결과가 나왔음
     * 이 논문은 뇌에 축적되는 특정 아밀로이드 베타 단백질 덩어리(Plaque)가 인지 저하의 원인이 된다는 내용을 담고 있음(쥐를 대상으로 연구)
     * 이후 10여년간 이 단백질을 줄이는 방법을 연구해왔고, 이게 미국 정부의 수십억 알츠하이머 연구비 투자 방향을 결정 했음
     * 반더빌트 대학 Matthew Schrag 교수(37세)가 작년 Cassava Sciences가 개발한 알츠하이머 치료약 Simufilam의 성분과 효능을 조사하다가 이 약물 개발을 뒷받침한 논문이 일부 조작되었을 가능성이 있다는 것을 확인
     * 해당 약물 관련 논문에서 조작된 이미지를 찾아냄
     * 2006년의 아밀로이드 논문에도 이상이 있음을 발견했고, 이 연구 자체가 연구 분야 전체를 오도할 가능성이 있다고 경고
     * 사이언스는 교수의 주장 이후 자체적으로 팀을 구성해 분석하여 조작된 것을 확인

   좀 이상하긴 하네요 16년이나 되었으면 재현이 잘 안된다는 이야기도 충분히 나왔을 시간인데 이제야…? 라는 생각이 들어요.

   이번 사례는 좀 예외적인 일이긴 하지만.. 논문의 실험을 따라했는데도 재현 안되는 경우는 종종 있는 일입니다. 논문에는 나오지 않는 노하우나 암묵지가 상당히 많거든요. 그리고 ""재현이 안된게 맞냐? 안된게 아니라 니네가 못한게 아니냐?"" 라는 공격에서 자유롭기가 쉽지 않구요.

   만약 모든 그룹에서 재현이 안됐다고 하면 논문 조작이 일찍이 발견됐겠지만, science 기사를 보면 몇몇 그룹은 재현에 성공하고 후속 연구가 이어진듯 합니다.

   비유적으로 표현하면, 구글이 인공지능 모델의 API 와 소스코드를 공개해서 다른 그룹이 만져보는데, ""왜 우리가 만든 모델은 구글 같은 성능이 안나오는거지? 구글만의 노하우가 있나?"" 싶었던 거죠.

   관련해서 읽어보면, 아멜로이드 베타 56이라는 물질에 대한 논문에 대한 의혹이 제기된 상황인데요,
   많은 실험실에서 재현에 실패한 연구실도 많은 것 같습니다.

   다만 이를 출판하지는 않은곳도 많다는 이야기도 있고요. 어쩌면 초기 논문의 권위라던지... 여러가지 요인들이 동작한게 아닌가 싶습니다.
   https://alzforum.org/news/community-news/….

   사이언스 원문 링크를 걸었지만, 국내 뉴스에도 보도된게 많습니다
     * 알츠하이머 연구 흐름 이끈 미 논문 조작 논란…16년간 세계 과학계 오도했나
     * '알츠하이머 논문' 조작 의혹…16년 치료제 개발, 물거품 되나
"
"https://news.hada.io/topic?id=7080","Facebook 에서 새로운 서버-사이드 언어로 Rust 를 선정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Facebook 에서 새로운 서버-사이드 언어로 Rust 를 선정

     * Facebook 에서 지원하는 언어(Supported Language) 의 경우 지속적으로 사용할 수 있는 언어가 되면서 회사차원에서 다양한 지원을 받을 수 있음 (문서에 추가 설명)
     * 한번 결정 되면 엔지니어링에 많은 영향을 끼치게 됨으로 신중의 신중을 거쳐 선정
     * 성능에 민감한 서비스, CLI 도구 개발에서 Rust 의 사용 권장

   앗 ㅎㅎ 올리려고 글 요약중이었는데 이미 올라왔네요! 아까우니 댓글로 추가해 둡니다~!
     * Meta는 언어 선택을 매우 신중히 결정함
     * Hack, C++, Python 에 최근 Rust가 추가 됨
          + 성능이 중요한 백엔드에는 C++ 과 Rust
          + CLI도 Rust 추천
          + 비즈니스 로직과 Stateless 어플리케이션엔 Hack 에코시스템이 가장 높은 수준의 자동화 제공
          + 데이터 사이언스 / ML / 인스타그램은 Python
          + 특정 유스케이스에서만 Java, Erlang, Haskell, Go 등을 사용
     * 이 ""Supported"" 프로그래밍 언어가 의미하는 것은
          + 코드 편집, 디버깅, 빌드, 배포 부터 핵심 라이브러리 및 상호 운용에 대해서 좋은 경험을 제공
          + 이 언어를 선택하면 차후에 다른 언어로 바꿀 필요 없음
          + 대부분의 경우 신규 프로젝트/서비스에서 이 언어를 선택할 것을 권장
          + 언어를 Fully Support 하는 것은 Meta에겐 큰 투자이므로, 다른 ""Long tail"" 언어들은 ""Community Supported""임
               o 이런 언어에 대해서는 각 팀이 직접 유지관리하는 부담을 가지게 되며, 신규 개발에는 사용하지 말아야 함(팀이 특별하게 이미 투자를 많이 한게 아니라면)
     * ""Supported"" 언어를 선택하게 된 이유
     * 코어 라이브러리 지원에 드는 공수를 줄이기 위해서
     * 보안과 개인정보 보호
     * 운영상 리스크를 최소화
     * 전문성 강화
     * 개발자 경험 향상

   웹서비스 회사, React 창시자인 페북이 TS 혹은 JS가 없다는게 이외네요.

   서버사이드언어에요:-)
"
"https://news.hada.io/topic?id=7036","GNU tar는 왜 추출이 느릴까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GNU tar는 왜 추출이 느릴까

     * 518GiB tar.gz를 풀면서 엄청나게 느려지는 것 때문에 조사 시작
     * Tar 포맷에 대한 설명과 빠른 tar extractor 코드를 작성하며 설명

오리지널 Tar 파일 포맷

     * Tar는 아카이브 파일로는 매우 이례적임
       → 아카이브 헤더가 없고, 검색용 파일 인덱스가 없으며, tar 인지 확인 가능한 매직바이트도 없고, 푸터도 없고, 메타데이터도 없음
       → Tar 안에 있는 것은 파일 개체 한 종류임
     * 파일 타입 : 0 (일반 파일), 1 (하드 링크), 2 (심볼릭 링크)
     * 512바이트 파일 객체 헤더의 구조 설명
       → 가장 큰 제한은 파일 경로 길이가 100글자 밖에 안된다는 것. 또한 파일 크기는 8GiB가 최대

UStar 확장 파일

     * 파일 경로 길이가 최대 256 이고, 새로운 파일 타입들 추가
     * 헤더를 확장하여 매직 바이트 및 prefix 필드 추가
     * 파일 타입 추가 : 3 (캐릭터 디바이스), 4 (블록 디바이스), 5 (디렉토리), 6 (FIFO 파일), 7 (연속 파일)
     * 하지만 8GiB 크기 한도는 여전 함

Pax 파일 포맷

     * POSIX.1-2001 표준으로 pax CLI를 통해서 tar 포맷을 확장
     * UStar와 동일하지만 x 와 g 파일 포맷 추가
       → 확장 헤더 레코드로 x 는 다음 파일에만 적용되며, g 는 뒤의 모든 파일에 적용

GNU Tar 파일 포맷

     * 자체 포맷은 gnu 로 pax 와는 다름
     * pax 와 비슷하게 UStar 기반이지만, 경로 및 큰 파일을 인코딩하는 다른 방법을 사용
       → 'L' 타입 : 다음 파일 객체의 페이로드가 ""file_path"" 를 나타냄
       → 'K' 타입 : 다음 파일 객체의 페이로드가 ""link_path"" 를 나타냄
       → 두가지를 연속으로 적용 가능
       → 파일이 8GiB 보다 크다면 file_size 첫 글자의 하이비트를 세팅. 그러면 문자열의 나머지를 base 256으로 파싱 (95비트 Integer)

왜 GNU tar는 느리게 압축을 해제할까 ?

     * 파일의 헤더에 file_path=""../hello.txt"" 같은 값을 넣으면 보안 문제 발생. 하지만 막기가 쉽지 않음
     * GNU tar 는 link_path에 ""..""를 만나면 플레이스홀더를 생성하고 딜레이 해서 처리함
     * 하지만 ""..""가 없는 하드링크의 경우엔 직접 생성하고 싶지만 이미 플레이스홀더가 있기 때문에 생성이 불가
     * 즉, 하드링크를 생성하려면 그게 딜레이드 링크인지 먼저 다 확인 해야하며, 그렇다면 새 링크 역시 딜레이 처리해야함
       → 모든 하드링크에 대해서 딜레이드 링크를 탐색해야함. 이유는 모르겠지만 실제로는 2번 탐색함
     * 작성자의 Tar파일에는 80만개가 넘는 ""..""를 가진 링크와 540만개 이상의 하드링크가 있었기에 압축 해제가 느려진 것
     * 이를 방지하기 위해서는 --absolute-paths 또는 -P 옵션을 tar에 추가할 것
       → 절대 경로를 저장하며 "".."" 를 거부하는 옵션
       → 즉 -P 옵션을 주면 딜레이드 링킹 메커니즘을 비활성화

   Tar 관련 글은 항상 재미난 것 같아요..
   hop - tar 보다 10배 빠른 아카이브 포맷
   왜 Python으로 만든 tar.xz 파일이 기본 tar로 만든 파일보다 작나요?
"
"https://news.hada.io/topic?id=7074","PickCode - Scratch 다음을 위한 교육용 코딩 환경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  PickCode - Scratch 다음을 위한 교육용 코딩 환경

     * 스크래치, App Inventor 등의 블록 기반의 언어를 배우고 나서 조금 더 배우고 싶은 사람을 위한 에디터
     * Click & Choose 방식의 편집기로 프로그래밍 구조를 배우고 실행 가능
     * 챗봇 만들기, 페인트 예제 포함

   스크래치 엔트리 다음 단계로 괜찮네요
"
"https://news.hada.io/topic?id=7117","예제로 배우는 GDPR - 개발자용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          예제로 배우는 GDPR - 개발자용

삭제할 권리

     * 유료 서비스라면 무효화 가능
     * 뉴스레터 및 써드파티에서도 삭제
     * 요청을 통해 수행가능. 자동화 될 필요는 없음

Cookie 법

     * 쿠키 동의는 쿠키만을 위한 것이 아님
     * 사용자의 작업을 수행하기 위해 기술적으로 필요하다면 동의가 필요하지 않음

동의 배너

     * 기능이 포함되기 전에 동의 받아야 함
     * 동의를 거부 가능하게 허용해야 함
     * 사용자가 뭐에 동의하는지 이해가능해야 함
     * 사용자가 동의를 철회할 수 있어야 함
     * 모든 것이 동의를 필요로 하지는 않음
     * 동의를 받아도 잘못될 수 있음(아마존 벌금 사례등)
"
"https://news.hada.io/topic?id=7081","PlayCode - Javascript Playground","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PlayCode - Javascript Playground

     * 브라우저에서 대부분의 NPM 패키지를 실행
     * 엄청 빠른 Live View 제공 : 작성하면서 바로 결과를 보여줌
     * 코드 자동완성 및 마우스 호버시에 문서 표시
     * Emmet 단축어 지원 : HTML & CSS 작업을 빠르게
     * 기능은 완전히 무료. 1인 개발자가 혼자 6년간 개발. 현재는 프리미엄 모델(유료 교육 코스)로 돈을 벌며 전업 개발중.

   무료에 제한이 있을 줄은 알았는데 8줄의 코드 제한은 적당히 써보기도 힘들어 보이네요.

   어라 가격 페이지에는 그렇게 나와있군요 ㅠ
   전 에디터에서만 조금 길게 써봤는데 되길래 그런 제한도 없는 줄 알았네요.
"
"https://news.hada.io/topic?id=7066","[논문] 레고 매뉴얼을 머신이 실행 가능한 계획으로 번역하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   [논문] 레고 매뉴얼을 머신이 실행 가능한 계획으로 번역하기

     * 2D 이미지로 구성된 Lego의 비쥬얼 조립 매뉴얼을 머신이 해석 가능하도록 번역
     * 연속된 예측(prediction) 작업으로 보고, 단계별로 모델이 매뉴얼을 읽고 현재 모양에 추가될 컴포넌트를 찾은 후 3차원 형태를 추론
     * 매뉴얼의 2D 이미지와 실제 3D 개체간의 2D-3D 일치 문제 및 본적 없는(Unseen) 3D 개체의 형태 추론 작업등이 필요
     * 이를 해결하기 위한 학습 기반 프레임워크인 MEPNet(Manual-to-Executable-Plan Network)을 제시
     * 핵심 아이디어는 2D 키포인트 감지 모듈과 고정밀 예측을 위한 2D-3D 프로젝션 알고리듬, 그리고 Unseen 컴포넌트에 대한 강력한 일반화(Generalization)

   brickit 이라고 레고 더미 사진을 찍으면 인공지능이 부품을 분류해서 만들 수 있는 레고를 제시해주는 스타트업이 생각나네요.
"
"https://news.hada.io/topic?id=7123","Django 4.1 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Django 4.1 릴리즈

     * ORM에 비동기 인터페이스 추가
       → acreate(), aget() 등 'a'로 시작
     * 클래스 기반 뷰에 async 핸들러 추가 가능
     * ORM 에서 정의한 Check, Unique, Exclusion 등의 제약조건을 모델 검증시에 사용
     * Form 접근성 개선
"
"https://news.hada.io/topic?id=7076","GitHub City","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GitHub City

     * 깃헙 컨트리뷰션 기록을 애니메이션 되는 3D 도시로 바꿔줌
     * 년도 / 깃헙 유저명 입력하여 생성
     * ThreeJS 사용한 오픈소스
     * 도시를 .STL 파일로 다운로드 가능
     * 하드웨어 가속 권장
"
"https://news.hada.io/topic?id=7121","Twitch, 한국에서 P2P 기술 테스트 시작.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Twitch, 한국에서 P2P 기술 테스트 시작.

     * Twitch의 방송을 최고 화질로 보기 위해서는 P2P 기술을 사용해야 함.
          + P2P가 활성화된 상태에서는 시청자의 IP 주소가 다른 시청자와 공유됨.
          + 이 기능은 비활성화할 수 없으며, 원치 않을 경우 720p 이하의 화질로 시청해야 함.
          + 현재 PC 웹에서만 테스트 중.
     * 한국의 네트워크 비용 문제로 사용한 기술이라고 밝힘.

   P2P가 활성화된 상태에서는 Low-Latency Mode(저지연 모드) 사용이 불가능해서 방송 딜레이가 1080p source + 저지연 모드 사용 시 0.5~2초인 것에 비해 7초 이상으로 늘어나서 불편하더라고요. 재생을 중단했다가 다시 재생하는 경우 영상이 깨지는 경우도 있었습니다.
   사용자 경험을 해치지 않는 선에서 P2P를 도입했으면 좋았겠지만 지금의 P2P 도입 형태는 조금 아쉽습니다.

   P2P로 영상을 시청하는 기술은 이미 peertube도 있고 네트워크 비용도 데스크탑에서만 사용한다면 그리 큰 문제는 아니라고 봅니다만 역시 IP주소 노출 등의 개인정보가 가장 문제겠네요.
   토렌트와는 다르게 사용자가 모르는 새에 노출이 될테니까요.

   제일 문제는 역시 네트워크 비용인가봅니다. 클라우드플레어도 한국 지역에 데이터센터가 있으면서도 쓰지 못하는 상황이구요

   사실 트위치가 서버를 한국에 두지 않는 건 세금 문제 때문이긴 합니다. 한국에 서버를 두는 순간 세금은 물론 온갖 규제를 다 따라야 하니깐요. 다만 이번 P2P 도입은 이거와는 별개로 네트워크 비용 문제가 맞는 것으로 보입니다. 실제로 트위치에서 한국 쪽에 들이는 비용에 비해 한국에서 구독과 비트 수익이 잘 안 나는 상황이거든요.

   WebRTC를 통해 P2P를 제공하고 있으며, 브라우저에서 WebRTC를 비활성화하는 확장 프로그램을 통해 P2P를 임의로 비활성화할 수 있습니다.

   아무튼, 아프리카TV가 떠오르는군요. 자신들의 인프라 비용을 아끼기 위해 사용자가 인프라 비용을 지불해야 한다니... 심지어 IP 주소와 관련된 개인정보 문제는 덤입니다.

   AdBlock을 사용한다면 규칙을 직접 추가하여 P2P 기능을 회피할 수도 있습니다.
   https://github.com/yous/YousList/issues/232
"
"https://news.hada.io/topic?id=7072","간단한 계산으로 복권을 '해킹'해 337.5억원을 따낸 부부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   간단한 계산으로 복권을 '해킹'해 337.5억원을 따낸 부부

     * 2003~2012년 사이에 한 커플이 약 2600만 달러를 당첨금으로 수령
     * 미시간주의 '윈드폴' 이라는 독특한 방식의 복권의 기이한 점을 발견하고 이용
     * '윈드폴' 복권에 당첨되기 위해서는 6개의 숫자를 골라서 모두 맞춰야 함
     * 1등 당첨금이 나오지 않는 다면 숫자 3개 이상을 맞춘 사람들이 상금을 나눠가짐
     * 1100달러치 사면 확정적으로 숫자 4개를 맞춘 한 장이 나온다는 것을 계산으로 발견
     * 숫자 4개가 맞으면 1000달러 숫자 3개가 맞으면 50달러를 획득
     * 실천한 결과 1100달러로 숫자 4개 1장 숫자 3개 18장을 맞춰 1900달러를 범
     * 회사까지 차려서 10년간 진행한 결과 현재는 세후 800만 달러 남음
     * 윈드폴 복권의 헛점이 드러나고 더이상 윈드폴 방식의 복권은 판매되지 않음
     * 이 실화를 바탕으로 '제리 앤 마지 고 라지(Jerry & Marge Go Large)' 영화 개봉

   옛날에 봤던 기사가 왜 또 올라왔나했더니 영화개봉 때문이었군요.

   고도의 영화 마케팅 아닐까요?

   사실 저렇게 해도 복권 회사는 돈을 벌었기 때문에 문제가 외부에 노출되기 전까지 알고도 묵인했을 가능성이 있습니다.
"
"https://news.hada.io/topic?id=7105","Karmem - 구글 Flatbuffers 보다 10배 빠른 바이너리 직렬화 포맷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Karmem - 구글 Flatbuffers 보다 10배 빠른 바이너리 직렬화 포맷

     * WebAssembly Host 와 Guest 간 데이터 전송을 빠르고 쉽게하기 위해 만든 Binary Serialization Format
       → ""event-command 패턴""
       → 한번 인코딩하고, 언어에 관계없이 여러 게스트가 동일 콘텐츠를 공유해서 효율적
     * TinyGo 와 WASM에 최적화
     * 반복적으로 같은 타입의 다른 콘텐츠를 읽어들이는데 효율적
     * Object-API 를 제공하지만 그래도 빠름
     * 비교
          + Witx 는 너무 복잡하고 데이터구조 와 함수까지 정의
          + Flatbuffers 는 원하는 만큼 빠르지 않고, 바운드 체킹이 없음
          + Cap'n'Proto 는 좋지만, Zig 및 AssemblyScript 구현이 없음. API도 어려움

   비교적 신생언어인 Zig 에 대한 지원 우선순위가 높다니 놀랍네요. 제작자 분께서 애정하시나 봅니다.
"
"https://news.hada.io/topic?id=7078","Emoji Cloud : 한줄로 추가하는 벡터 이모지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Emoji Cloud : 한줄로 추가하는 벡터 이모지

     * CDN 상의 CSS 만 추가해서 클래스로 바로 사용 가능
       <i class=""emoji-face-blowing-a-kiss""></i>
     * 300개 이상의 SVG 벡터 이모지 지원
     * 오픈소스. 셀프 호스팅 가능
"
"https://news.hada.io/topic?id=7083","Virtink - 쿠버네티스용 경량 가상화 애드온","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Virtink - 쿠버네티스용 경량 가상화 애드온

     * Cloud Hypervisor 가상 머신을 쿠버네티스 클러스터 안에서 사용 가능하게 해주는 애드온
     * KubeVirt 와 비교해보면
          + libvirt 또는 QEMU를 사용하지 않음. VM이 더 작은 메모리를 사용하며 더 높은 성능을 냄. 공격 표면도 작음
          + Pod당 런처 프로세스가 필요없어서 메모리 사용량을 더 줄임
          + 기존 K8s 클러스터 안에서 완전히 독립된 K8s 클러스터를 실행하는데 특히 적합 (knest: K8s-in-K8s)
     * Docker 및 containerd 런타임 지원

   Cloud Hypervisor - 오픈소스 Virtual Machine Monitor(VMM)
"
"https://news.hada.io/topic?id=7099","SQLite-lines - 큰 파일을 라인단위로 읽는 확장 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    SQLite-lines - 큰 파일을 라인단위로 읽는 확장

     * NDJSON, JSON Lines, logs, txt 등의 파일 또는 Blob에서 빠르게 읽어들이는 확장
     * py-pandas 보다 52배, sqlite-utils 보다 18배, dsq 보다 16배 빠름
     * 사용법
       .load ./lines0
       select line ->> '$.countrycode' as countrycode, count(*) from lines_read('./calendar.ndjson')
"
"https://news.hada.io/topic?id=7030","AWS Lambda 비용을 절약하는 가장 좋은 방법 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AWS Lambda 비용을 절약하는 가장 좋은 방법

     * Lambda 요금 동작 방식 : 동작 시간 + 호출 횟수
     * 이른 최적화 피하기
       → 실제로 필요한 것 이상의 메모리 할당 방지
     * 람다 함수의 적정 크기 찾기 : aws-lambda-power-tuning
     * ARM 아키텍처로 전환
     * Provisioned Concurrency 활용하기
       → 실행시간 밀리초당 70% 저렴

   https://github.com/alexcasalboni/aws-lambda-power-tuning 이런 도구가 있었군요 나중에 한번 사용해봐야겠어요
"
"https://news.hada.io/topic?id=7156","JSON5를 만들면서 배운 것 : 혐오자들을 무시하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     JSON5를 만들면서 배운 것 : 혐오자들을 무시하세요

     * JSON5는 JSON의 슈퍼셋으로 더 읽기 쉽고, ECMAScript 5.1의 일부 기능을 추가하여 확장
     * 10년전에 JSON5 오픈소스를 HN에 공개했을 때 엄청 욕을 먹었음
     * Vagrant를 만든 미첼 하시모토도 HTML7 같은 건 어떠냐고 패러디함
     * 하지만 이런 반응들을 무시하고 계속 개발했고, 현재는 매주 6천만회씩 다운로드 됨(npm 패키지중 상위 0.1%)
     * 애플도 자신의 플랫폼에서 JSON5를 지원함 (JSONDecoder 에 allowJSON5 옵션)

교훈들

    1. 혐오자들을 무시할 것
    2. 프로젝트에 타인의 기여를 받아들일 것
    3. 우리는 모두 장님임 (그러니 친절할 것)

   기계와 0 / 1 에 지쳐있었는데, 모처럼 힐링까지 되네요

   댓글 달고 나니 회원 가입 창으로 날라가고, 회원 가입하고 나니 제가 쓴 댓글을 다시 써야 하네요!

   아 회원가입시에도 댓글 저장해두도록 수정해두었습니다. 고맙습니다.

   다른 질문이긴 합니다만 댓글 우측 [-] 는 무슨 기능일까요? 혹시 다운보트일까요? 기능 설명이나 faq는 봤는데 무슨 기능인지 설명을 못찾았습니다.

   해당 댓글 아래의 답변 댓글을 안 보이게 접는 기능입니다.
   혹시나 대댓글이 많아서 길어질 경우 상위 댓글만 볼 때 사용하려고 만든 기능입니다.
   답변이 없을 때는 안 보이게 수정해야겠네요;;;

   앗 그런 기능이었군요!
   방금 해보니까 접히긴 하는데 펴지지는 않는 듯 …^^;

   원문 다봐도 재밌는 아티클입니다! ㅎㅎ

   교훈들 2. 프로젝트에 도움 준 사람들을 공유할 것 보다,
   프로젝트에 타인의 기여를 받아들일 것 정도로 바꿔보는건 어떨까요?

   솔직히 뭐든 하기 시작할 때 훼방 놓는 사람들이 의욕을 망치기 십상인것 같습니다

   좋은 기사 감사합니다
"
"https://news.hada.io/topic?id=7094","Code Catalog - 오픈소스로 코딩 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Code Catalog - 오픈소스로 코딩 배우기

     * 유명한 오픈소스에서 코드를 가져와 주석을 달고, 이를 통해 코딩을 배울 수 있음
     * 코드 전체가 아닌 특정 문제 해결 부분만 떼어서 예제화
     * Go : Terraform, Chaos Monkey
     * Python : AWS CLI, HTTPie
     * Ruby : Homebrew, Puppet
     * TypeScript : AWS CDK, Jest, Visual Studio Code
     * Rust : Bat, Firecracker
     * Java : Apache Zookeeper, Buck, Error Prone

   저도 파이썬을 airflow plugin 공부하다가 역으로 구조를 배웟어요ㅎ
   좋은 방법인 것 같아요
"
"https://news.hada.io/topic?id=7155","Redis를 활용한 디스콰이엇 팔로우 기능 개발기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Redis를 활용한 디스콰이엇 팔로우 기능 개발기

     * 개발 동기: 올라오는 글들이 많아지면서 개인화된 피드를 고민했고 팔로우 기능을 구현하기로 했음.
     * Redis 활용: Relevance score 시스템으로 피드를 구성하는 것을 생각했으나 동적으로 DB에 있는 포스트들을 정렬하는 것은 비효율적이였고 유저별로 사전에 정렬된 피드를 Push(fan-out-on-write)나 Pull(fan-out-on-load)형태로 가져오는 방식을 생각했음. Redis가 두가지 방식 다 수용함으로 Redis 사용하기로 결정
     * ElasticCache 환경: Redis는 클러스터 안에 master node와 replica node가 있는 형태인데 이때문에 관리가 어렵다는 단점(네트워크 문제, Key distribution 문제)이 있음. 이 문제를 해결하기 위해 ElasticCache를 활용
"
"https://news.hada.io/topic?id=7042","엔지니어를 위한 글쓰기 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           엔지니어를 위한 글쓰기 (번역)

     글쓰기는 큰 조직에서 영향력을 발휘하는 데 중요합니다.
     경력 있는 소프트웨어 엔지니어로서의 글쓰기는 직무 범위를 확장하고 경력을 발전시키기 위해 획득해야 하는 가장 중요한 기술입니다.
     이 글은 지난 15년에 걸쳐 제가 보다 생산적인 글을 쓸 수 있게 도와준 몇 가지 배운 점들을 담고 있습니다.

목차

     * 시작하기 전에
          + 글감을 정하세요
          + 글쓰기와 배우는 것을 혼동하지 마세요
          + 독자에 대해서 파악하세요
          + 분위기를 존중하세요
          + 뜨거울 때 다리미질하세요
          + 다리미를 미리 데워두세요
     * 글을 쓰기 전에
          + 시작이 아닌 정상에서 시작하세요
          + 내용을 적기 전에 줄거리를 정하세요
          + 다듬기 전에 내용을 완성하세요
          + 문장을 훑어볼 수 있게 만드세요
          + 요약 영역을 제공하세요
     * 글쓰기의 요령
          + 계속 쓰세요
          + 짧은 글들을 활용하세요
          + 개요에 대한 피드백을 빨리 받으세요
          + 검토자들에게 글의 초안을 돌리세요
     * 감사의 말

   다리미 부분에서 무릎을 쳤습니다.
   유용한 글이네요
"
"https://news.hada.io/topic?id=7101","Notable people - 우리 지역의 유명인사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Notable people - 우리 지역의 유명인사

     * 위키피디아 인명부를 기준으로 한 지역별 유명인 지도
          + 각 지역별로 가장 Notability rank가 높은 한명만 표시
          + 표시 위치는 해당 인물의 출생지
     * 문화 / 발견&과학 / 정치 / 스포츠&게임 부분으로 나누어 조회 가능

   한국에 김연아만 왜 크게 되어있죠? 이상하네

   들어가자마자 처음으로 눈에 띄는 이름이 윈스턴 처칠, 아돌프 히틀러, 이오시프 스탈린 순이네요 ㅋㅋㅋ
"
"https://news.hada.io/topic?id=7134","TensorDock - 저렴한 GPU 클라우드 ($0.29/hr)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  TensorDock - 저렴한 GPU 클라우드 ($0.29/hr)

     * NVDia RTX 4000 부터 A100 까지 다양한 GPU 지원
     * 기존 클라우드 GPU 제품들 보다 50~80% 저렴
     * 시간당 모델은 $0.29/hr
     * 월구독 모델은 $100/월 부터 시작
     * 마켓플레이스 VM은 $0.13/hr (출시 예정)

   와... 어떻게 이렇게 저렴한 가격으로 서비스가 가능한걸까요?

   정말로 저렴한 GPU 클라우드가 필요하면 https://vast.ai/ 도 있습니다.
   구조상 보안이 중요한 작업은 하면 안되겠지만 가격은 TensorDock보다 훨씬 더 저렴합니다.
   (NVIDIA A6000 x 4 기준 TensorDock $5.12/hr, Vast.io $1.61/hr)
"
"https://news.hada.io/topic?id=7148","Andrew Chen - How to design a referral program","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Andrew Chen - How to design a referral program

   Andrew Chen의 How to design a referral program에서 핵심적인 부분 위주로 번역했습니다.

   레퍼럴에 대해 잘 몰랐는데, 마치 사수가 하나하나 알려주듯 개념부터 시작해서 어떻게 구성해야할지 알려주는 글이었습니다.

   이런 레퍼럴 개념을 적용시켜볼 기회는 없었지만, 나중에 기회가 되서 B2C 분석을 하면 도움이 될거 같다는 생각이 들었습니다.

   Andrew Chen의 글은 강추합니당.
"
"https://news.hada.io/topic?id=7062","CSS Nesting 문법 선택에 투표해 주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CSS Nesting 문법 선택에 투표해 주세요

     * SCSS, Less, Stylus 등에서 사용되던 CSS 중첩 문법의 공식버전이 고려중
     * 3가지 중 하나
          + @nest : 현재 CSS Nesting 1 문법에 지정된 것
          + @nest restricted : 더 엄격한 대안
          + Brackets : 추가적인 {} 를 쓰는 방식
     * 커뮤니티의 의견을 묻는 중. 원글 최하단 Take Survey 버튼을 눌러서 투표에 참여 가능

   @nest always 한표! Example 6 - Mixing direct and parent nesting 에서의 예제에서 볼 수 있듯 항상 명시 해 주는게 명확한 느낌이 있네요.

   여러분은 어떤 선택지 골랐을지 궁금하네요. 저는 @nest 골랐습니다.
"
"https://news.hada.io/topic?id=7158","IMDB의 가짜 배우 정보들 파헤치기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          IMDB의 가짜 배우 정보들 파헤치기

     * 인도 영화 크레딧에 주로 포함되는 가짜 배우 정보들의 공통점
          + 대규모 예산이 들어간 인도영화의 출연자인데 자신의 역할에 대한 언급이 없음
          + 10대 후반~20대 초반 젊은이들로 대부분 인도 북부의 작은 마을 출신
          + 모두 음악가/유튜버이고 메이저 음악플랫폼에 곡이 등록되어 있음
          + 서로 복사한듯이 같은 약력과 프로필이고 Bio가 같은 스타일임
          + 모두가 구글의 Knowledge Panel에 등록되어 있음(검색시 우측에 나오는 정보창)
     * 찾아보니 이들 모두 IssueWire 라는 사이트에 '딱 1개'의 소개 기사가 등록되어 있음
          + 이 사이트는 가입하면 1개의 공식 보도자료를 등록할 수 있게 해줌. 그래서 모두 1개만 있는 것
     * FilmFreeway 라는 사이트도 영화제작자들이 자신의 영화를 등록가능한데, 여기에도 영화와 관련 없는 인도 사람들이 잔뜩 등록됨
     * 이 웹사이트들은 검증/리뷰 프로세스가 없지만 SEO 랭킹이 높아서, 등록만 되면 구글 검색 알고리듬을 속여서 그들의 명성이 합법적인 것처럼 보이게 함
     * 다들 너무 비슷해서 어떤 '툴킷' 같은게 있을까 해서 찾아보니
          + Youtube에 이 모든 프로세스를 단계별로 설명한 문서가 있음
          + 구글 Knowledge Panel 만들기 부터, FilmFreeway, WikiAlpha, Indify 등
          + 누군가는 이걸 2500 루피(4만원) 정도를 받고 해주고 있지만, 자신은 공짜로 설명한다는 내용과 함께..

   https://youtu.be/h18HClyW_Tc?t=2894

   맥락과 함께 인도의 주갓(Jugaad) 문화를 설명하는 내용인데 잘 와닿았습니다.
   흥미 있으신 분들은 한번 시청해보시면 좋을 듯 합니다.

   왜 인도가 이런 것들을 많이 하는지는 왜 Hacktoberfest 스팸은 대부분 인도에서 올까 글에서 볼 수 있습니다.

   인도 문화에 깊숙히 뿌리박힌 Jugaad (규칙을 비틀어서 회피하는 해결법) + 구글 SEO + 코칭산업 + 유튜브 가 만들어낸 결과물이죠.
"
"https://news.hada.io/topic?id=7051","Etro - Typescript 비디오 편집 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Etro - Typescript 비디오 편집 프레임워크

     * 브라우저와 Node.js 에서 사용 가능
     * 비디오/오디오 레이어 합성
     * 내장 하드웨어 가속 효과 사용
     * JavaScript 와 GLSL로 효과 커스텀 효과 만들기
     * Web Audio API로 오디오 제어
     * Blob 또는 파일로 Export
     * 향후 개발 로드맵
          + 오프라인 렌더링(ffmpeg.js 이용)
          + 새로운 오디오 시스템으로 오디오 제어용 API 제공
          + 레이어 상속 기능
          + 트랜지션 시스템 추가
          + three.js 를 이용해 3D 모드 추가
"
"https://news.hada.io/topic?id=7116","구글, 타사 쿠키 제거를 2024년으로 연기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글, 타사 쿠키 제거를 2024년으로 연기

     * 피드백에 따라 테스트 기간이 더 필요하다고 판단했음
     * 8월초부터 ""프라이버시 샌드박스"" 트라이얼을 글로벌 수백만 사용자로 확대하고 점차 늘려갈 예정
     * 프라이버시 샌드박스 API가 2023년 Q3에 런칭 및 GA 될것이며, 이때부터 개발자들이 도입을 시작하면 2024년 후반에 타사 쿠키를 폐기하는 것을 시작할 수 있을 것

   작년에 한번 연기 되었는데, 1년 더 연기하는 거네요
     * 구글, 써드파티 쿠키 제거를 2023년으로 연기
"
"https://news.hada.io/topic?id=7084","Carbon의 가장 흥미로운 피쳐는 호출 규칙(Calling Convention)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Carbon의 가장 흥미로운 피쳐는 호출 규칙(Calling Convention)

     * 구글이 C++ 계승을 목표로 발표한 새 언어
     * Carbon의 기본 인자는 C++의 const T& 와 같은 형태로 전달
       → 컴파일러는 이걸 as-if 룰에 의해 T로 변환이 가능
     * 장점 #1: 성능 (복사를 하지 않으므로)
     * 장점 #2: Generic에 최적화된 호출규칙
     * 장점 #3: 복사도 복사가 아님
     * 장점 #4: 주소가 없는 인자들

   rust네요
"
"https://news.hada.io/topic?id=7119","Electron 20.0.0 | Electron","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Electron 20.0.0 | Electron

     * ⚡️ Chromium 104, V8 10.4, and Node.js 16.15.0 업그레이드104
     * 🕶 윈도우즈에 Immersive Dark Mode, Full-screen app floating, Windows Control Overlay button 으로 더욱 네이티브 앱스럽게 개발 가능
     * 🚀 V8 Memory Cage Enabled, V8 샌드박스 포인터를 활성, Raw pointer 참조 대신 offset 으로 참고하여 임의의 데이터를 읽고 쓰는 것을 방지해서 보안성 등을 강화하고 힙사이즈와 GC 등의 성능이 좋아짐. 자세한건 1, 2 참고.
     * 🏝 Electron Renderer 가 명식적 옵션을 주지 않는 한 기본적으로 Sandboxed 되어 실행, Node 에 바로 접근 불가
     * 🛠️ Bug fixes 와 17.x 버전 지원 종료 알림

   힙사이즈와 GC 성능이 좋아졌다니 기대되는군요!
"
"https://news.hada.io/topic?id=7053","Emoji Kitchen","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Emoji Kitchen

     * 기존 이모지들을 결합하여 새로운 이모지를 만들어 줌
     * 안드로이드의 GBoard 키보드에서 제공하는 Emoji Kitchen 기능을 웹으로 옮긴 것
          + 15,000개가 넘는 조합이 가능
          + iOS Gboard 에서는 지원 안함

   비슷한 서비스로 이런 것도 있습니다. https://tikolu.net/emojimix

   Gboard Emoji Kitchen 제작자의 소개글 Introducing Emoji Kitchen

   맨 마지막 대시까지 포함해서 접속해야 하는데 링크가 덜 걸렸네요! https://jenniferdaniel.substack.com/p/introducing-emoji-kitchen-

   URL 자동 분리 로직이 마지막 - 를 제대로 인식 못하는듯 하네요. 위에꺼를 마크다운 방식으로 바꿨습니다 ~!
"
"https://news.hada.io/topic?id=7097","Announcing Docusaurus 2.0","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Announcing Docusaurus 2.0

     * 메타의 오픈소스로 주로 메타의 오픈소스 프로젝트 웹사이트 개발에 사용 (Prettier, Babel, React-Native, KaTeX)
     * SSG(Static Site Generator) 방식의 문서기반 웹사이트 개발용
     * 약 4년간 75개의 알파버전과 22개의 베타를 거쳐 2.0 정식 버전 릴리즈
     * 블로그, 문서 웹사이트 레이아웃에 최적화 된 디자인, 검색 엔진 최적화, 국제화 기능 제공
     * 2.0 에서는
          + 겟츠비에서 영향 받은 클라이언트 사이드 React 기반으로 개발 된 최신 SPA
          + 커뮤니티 기반의 강력한 플러그인들
          + 유연한 테마 시스템으로 브랜딩 가능
          + 문서 관리는 스냅샷 복사를 기반으로 동작
          + v1.0 의 대부분의 기능을 유지
          + 영어가 더 이상 기본 언어가 아님
          + Markdown 엔진이 선택 가능함

   수정이 안되.....요

     약 4년간 75개의 알바버전
     알파 버전의 오타로 보입니다.

   추가로 IE11 지원이 드랍된것도 있습니다. 프로젝트 문서화 도구로 도입하려 했다가 그거땜에 포기한 기억이 나네요.

   오타 발견요! v1.0 의 개부분의 기능을 유지 -> 대부분
"
"https://news.hada.io/topic?id=7139","Product Market Fit은 어떤 느낌일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Product Market Fit은 어떤 느낌일까?

     * PMF는 종종 사람들이 정말 좋아하는지를 얘기하는 척도로 사용되지만, 간결하게 정의하거나 확실하게 수량화 하는 것은 어려움
     * 나는 ""고객 리텐션 코호트""가 가장 잘 맞는것 같음
       → 활성 사용자 비율이 시간이 지남에 따라 줄어드는데, 지속 가능한 수준으로 안정화 되는 것
     * Netflix 와 Blue Apron 의 리텐션 그래프 비교
     * 그외에 사용가능한 지표들 : Revenue Growth, Net Dollar Retention, Burn Multiple, LTV/CAC
     * PMF가 뭔지 보여주는 비디오 10개(영상을 같이 봐야 재미납니다)
          + 제품을 빼겠다고 하면 고객이 깜짝 놀람
          + 영업팀은 뭔지 이해하지 못하지만, 사람들은 당신의 제품을 사고 싶어함
          + 거의 모든걸 잘못하고 있지만, 어떻게든 이김
          + 업계의 기존 플레이어가 당신과 연결되기를 원함
          + 시장이 당신에게 올것이라고 기대하며, 당신은 거기에 한방을 날림
          + 고객은 당신의 제품이 예상보다 훨씬 더 잘 작동한다는 것을 알고 있음
          + 수요를 따라가기 위해서 Cur Corners 해야함 (쉽고 저렴하고 빠른 방법을 찾아야함)
          + PoC(Proof of Concept)에서 헤비급 상대를 제압하고 있음
          + 경쟁 분야에서 무차별 대입하여(brute force) 당신이 나아길 길을 찾을 수 있음
          + 당신의 고객이 ""기여하는 커뮤니티""(Contributing Community)가 됨

   Product-Market Fit 의 4가지 종류
"
"https://news.hada.io/topic?id=7138","내가 Wordnote 사전 앱을 만든 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        내가 Wordnote 사전 앱을 만든 이유

     * 이미 앱스토어에 300개가 넘는 앱이 있지만, 맘에 드는게 없었음
       → 목표 : 오프라인 지원, 빠르고, 검색 기록을 저장, 쓸데없는 기능 제거, 락인 되지 않으며, 좋은 데이터 셋을 가진
     * 간결한 텍스트 UI를 구성하고, SQLite + React Native 로 개발하여 오픈소스로 공개. 다국어 지원
     * 사전 데이터는 Wiktionary 를 이용하는 freeDictionary API 로 다운로드
       → 가장 많이 쓰는 영단어 30만개가 21MB SQLite DB로 생성됨
     * 검색한 단어들은 iCloud 및 Google Drive 로 동기화

   안드로이드 버전도 있네요. 필요한 기능만 모아놓은 모양새가 좋습니다.

   wiktionary 엔 한국어도 27만단어 정도 있으니 만들어봐도.. ?

   글에서 처럼 freeDictionary API를 사용하지 않고, go-wiktionary-parse https://github.com/macdub/go-wiktionary-parse 를 사용하면, 덤프된 데이터를 가져와서 정제한 후 sqlite DB에 저장해 줍니다.

   해커뉴스 댓글에 보니 비슷한 시도를 한 다른 사람들이 많네요. https://news.ycombinator.com/item?id=32300466
     * Notification Dictionary https://github.com/tirkarthi/NotificationDictionary
       → 선택한 단어의 설명을 안드로이드 Noti로 알려주는 사전앱
       → 위의 go-wiktionary-parse 로 만들어진 데이터를 사용합니다.
     * Stictionary https://www.stictionary.com/
       → Wordnote와 비슷한 기능을 제공하는, 광고없는 무료 사전앱
"
"https://news.hada.io/topic?id=7096","기업부설연구소 설립 및 운영, 보다 쉽게 바꾼다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       기업부설연구소 설립 및 운영, 보다 쉽게 바꾼다

  ｢기초연구진흥 및 기술개발지원에 관한 법률｣(이하 ‘기초연구법’) 시행령 및 시행규칙이 개정되어 8월 4일부터 시행

     * 소기업에서 중기업으로 성장한 기업의 인정요건 일부 완화
     * 효율적 연구수행을 위한 연구전담인력의 재택근무 허용
     * 기업연구소 설립･변경 신고시 제출해야하는 서류 축소.

   호 연구전담인력의 재택근무는 괜찮네요.
   근데 제 기억에 연구소 설립 하려면 업무와 분리된 공간이란게 조건에 있어서 별도로 칸막이 치고 간판달고 하는 작업을 했었는데, 그건 그대로 하고 재택만 가능한 것 같긴 하네요. 디지털 중심으로 전환된다면, 이것도 같이 요즘에 맞게 바꿔줘도 좋을 것 같은데..

   연구소라 재택이 안된다는 곳들에도 변화의 바람이 있길 바랍니다 :)
"
"https://news.hada.io/topic?id=7109","RethinkDNS - Serverless DNS resolver","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  RethinkDNS - Serverless DNS resolver

     * Cloudflare Workers, Deno Deploy 및 FlyIO 등 Edge서버에서 셀프호스팅 가능한 DNS 리졸버
       → 각 서비스의 프리티어 만으로도 10~20대 정도 기기의 월 DNS 트래픽 감당 가능
     * Pi-Hole 과 비슷한 콘텐츠 블록킹, DNS-over-HTTPS, DNS-over-TLS 등 지원
"
"https://news.hada.io/topic?id=7058","LiteFS - SQLite DB를 클러스터에 복제하는 FUSE기반 파일 시스템 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              LiteFS - SQLite DB를 클러스터에 복제하는 FUSE기반 파일 시스템

     * 패스쓰루 파일 시스템처럼 동작해서 SQLite DB의 쓰기 동작을 인터셉트해서 처리하여, 여러대의 머신으로 구성된 클러스터에 복제
     * FUSE 3 + Leader Election(Consul 세션) + HTTP Server (노드간 변경 수신용 API 서버)
     * 현재는 Linux에서만 동작
     * LTX(Liteserver Transaction File) 포맷으로 SQLite의 트랜잭션 데이터를 감지해내고, 트랜잭션 단위로 저장 및 복제
       → WAL방식과는 다르게 replication에 적합하게 최적화된 포맷

   단순해서 간단히 쓰기 좋네? 어 일이 점점 커지네? 그럼 기능을 추가해야지
   약간 이런 흐름일까요? ^^;
   일이 커지면 어느 시점에선가 다른 디비로 갈아타야할 것 같기도 한데…

   SQLite를 좀 더 큰 영역에서 활용하기 위한 시도들이 많이 나오는 것 같아요
     * Litestream - SQLite 스트리밍 복제 도구
     * 저는 서버사이드 SQLite에 올인합니다
     * rqlite - SQLite 기반의 가벼운 분산 데이터베이스
     * Dqlite – High-Availability SQLite
"
"https://news.hada.io/topic?id=7145","GraphQL은 좀 짜증나요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GraphQL은 좀 짜증나요

     * GraphQL은 훌륭하지만, 좀 과장된 것 같음
     * 초보~중급 개발자는 유튜브 보고 GraphQL을 사용하게 되는 것 같은데, 이건 잘못된 듯
     * 장점
          + 원하는 데이터를 쉽게 설명 가능
          + 대역폭을 절약. 원하는 만큼 한번에 가져올 수 있음
          + 데이터 소비자를 위한 문서 만들기 쉬움
          + 구독을 더 쉽게 사용 가능
          + API 호출을 묶는게 가능
     * 단점
          + 실제로 사용하기 고통스러움. 사용하는 백엔드에 따라 당신의 언어로 생성해주지 않으면 2개 또는 그 이상의 타입시스템을 관리해야함
          + 맵/테이블/딕셔너리를 지원하지 않음. 이게 정말 큼. 하고 싶지 않지만 어디선가에선 {[key: string] : T} 를 쓰게됨
          + API 버전 관리에 대한 명확한 방법이 없음. 끝내는 MyQueryV1.01 MyQueryV1.02 MyQueryV1.03 처럼 하게 될 것
     * 페이스북이 GraphQL을 위해 의도한 솔루션/문제 세트를 당신이 처리하는게 아니라면 GraphQL을 사용하지 마세요
     * 다른 시니어 개발자들은 어떤 현명한 말들로 신입 개발자들이 이 수렁에 빠지는 걸 구해주실 수 있을까요?

HN의 댓글들

     * GraphQL의 가장 큰 문제는 DOS 공격을 방어하거나, 당신의 전체 DB를 다운받으려는 사람들로 부터 막기 위해 일을 해야함.
          + 당신의 시스템에 무리한 부하를 주는 쿼리를 만들기가 매우 쉬움.
          + 어떤 일들을 해야하는지 보려면 Shopify를 보면 됨. 리턴되는 데이터 양에 대해 레이트 리밋을 걸고, 커서와 페이지네이션도 처리. 인터넷에서 보이는 이쁜 GraphQL의 예와 달리 스키마가 거대하고 못생겼음
     * GraphQL은 큰 기술회사들이 가진 조직 문제를 해결하는 훌륭한 방법임
          + API를 유지 보수하는 팀과 변경을 요구하는 팀이 다른 경우 같이
          + 조직이 커서 이럴 경우 변경을 하세월 기다려야 하니, GraphQL은 그럴 필요를 줄여줌
          + 작은 조직이라면 그냥 모자란 부분을 직접 만들어 넣으면 되지 않을까 ?
     * 의도된 것이건 아니건 GraphQL은 프론트엔드 개발자들이 백엔드 개발자에 대한 요구로부터 디커플링되어 더 빠르게 움직이게 해줌
          + 백엔드 개발자가 데이터 모델을 만들고 GraphQL로 노출하면, 이 백엔드 개발자를 한번도 만나보지 못한 프론트엔드 개발자도 바로 사용이 가능
          + 즉석에서 쿼리하는 내용을 변경하고, 원하는 것을 얻어갈 수 있음
          + 모두가 빠르게 움직이게 해줌
          + 하지만 백엔드 개발자인 나는 GraphQL이 정말 싫음

   GraphQL 은 좀 짜증나죠 아주 짜증나는건 아니고요 좀 짜증 나지만 팀원간 커뮤니케이션 비용을 확실하게 줄여주기 때문에 그시간에 짜증 나는 부분을 해결하는게 더 효율적 입니다 그리고 생긴건 진짜 못생겼습니다 하지만 저는 GraphQL 를 쓰는 것을 권장 합니다 아무도 tRPC 쓰자는 것에 동의 안할 꺼니깐요 대부분 사람들은 재대로 써보지도 않고 지레짐작으로 기술 사용을 거부하고 그걸 해결하려면 막강한 권한으로 밀어붙여야 되는데 1~2 개 정도 기술은 그럴 수 있어도 모든걸 밀어 붙이면 잃는게 더 많아서 못하고 ... 그러니 결국 최대한 설득가능 한 수준이 GraphQL ㅠㅠ 똥같은 REST 이게 진짜 커뮤니케이션 비용 엄청 드는 나쁜 구석기 기술 ㅠㅠ

   긱뉴스보다가 회원가입하게 만드는 글은 처음이네요 The bad 파트에 답 달아봤습니다.

   클라/서버 각각에서 바라보는 장단점이 있겠지만 합쳐놓고 봤을 때 서버와 클라 사이의 빠져있는 추상화 레이어를 GraphQL 스키마가 채워준다는 제일 큰 value proposition 을 알면서도 일반적인 프로덕트에 REST 를 고려하겠다는 말은 개인적으로 조금 옛날 얘기 처럼들려요
   The bad
     * It is actually a pain to use, depending on the backend you are using you'll have to manage
       two or more type systems if there are no code first generates in your language
       결국 다른 말로하면 제대로 쓰면 좋다?군요 code generation 뭐 이런거 요즘 문제도 아니죠 툴링이 얼마나 발전했는데
     * It doesn't support map/tables/dictionaries. This is actually huge. I get that there might be
       some pattern where you don't want to allow this but for the majority of situations working with json api's you'll end up with a {[key: string] : T} somewhere
       Production Ready 에도 언급된 내용이지만 Type System 의 장점을 활용하면 딱히 고민할 필요는 없는 부분인 것 같네요 key: string 이 아니라 정확한 필드를 지정하면 될 일..
     * No clear path for Api versioning you'll end up with MyQueryV1.01 MyQueryV1.02 MyQueryV1.03
       원래 GraphQL 은 버전리스입니다....
       Don't use Graphql unless you're managing a solution/problem set that facebook intended graphql for Invest your time in a simpler solution then running to GraphQL first
       React 도 페북이 해결하려는 문제를 푸는게 아니면 쓰지 말라는 말처럼 들리네요

   안녕하세요 좋은 말씀입니다 혹시 알고 지내면 안될까요 같은 생각이신 분들이 필요합니다 다른사람 (팀원) 설득하기 너무 힘듭니다

   ㅋㅋㅋ 댓글을 늦게봤네요..!! 저는 GraphQL Korea 슬랙에서 Alucard 라는 닉네임을 사용중입니다 :)

   GraphQL을 비교적 초기에 도입했었는데, 당시 백엔드 위주로 설명이 많았습니다. 그러다보니 백엔드에서 뭔가 좋을 것 처럼 인식이 있지 않나 싶습니다.

   제가 이것저것 삽질해 본 끝에 그 뒤에 회사에 들어오신 분들이나 면접 보시는 분들이 질문하면, 백엔드에게는 힘들지만, 프론트엔드에게는 좋다라고 설명하고 있긴 합니다. :)

   #하지만 백엔드 개발자인 나는 GraphQL이 정말 싫음
   공감합니다..

   적재적소라는 말이 딱 떠오르네요.

     의도된 것이건 아니건 GraphQL은 프론트엔드 개발자들이 백엔드 개발자에 대한 요구로부터 디커플링되어 더 빠르게 움직이게 해줌

   이게 GraphQL 을 쓰는 이유죠. GraphQL 스펙에도 프론트엔드를 위한거라고 명시되어있습니다 1
   저도 새 스타트업에서 GraphQL 를 쓰기 시작했는데, 전 보다 API가지고 프론트엔드 엔지니어와 소통해야하는 횟수가 확실히 줄은거 같아요.

   GraphQL 실제로 쓰기 전엔 생각지도 못한 문제들이 백엔드 엔지니어 입장에서 좀 고통스럽게 하긴 하지만 REST API 디자인 잘 하려고 머리싸매는 것 보단 훨씬 나은거 같아요.

   어떤 기술도 완벽한 것은 없죠! 저는 단점을 해결하기 위해 드는 비용을 감내할 만큼 해당 기술이 필요하거나 다른 더 큰 문제를 해결한다면 도입해볼만 하다고 생각합니다. 기술/도구의 적합성은 언제나 사용자의 상황에 따라 결정되니까요.

   한편으로, GraphQL이 공격받는 이유 중 하나는 '쉽다' 라는 이미지를 어필(?)해서가 아닐까 싶기도 하네요.

   초반 Graphql 나와서 POC 프로젝트 진행할때 multipart가 제대로 지원되는 엔진이 없어서, 힘들었던 기억이 나네요..

   저도 예전부터 소규모 프로젝트에 graphql 사용했다는거 보면 이건 너무 오버스펙 아닌가.. 하는 생각을 많이 했었는데 생각은 다들 비슷하네요

   초반 댓글만 옮겨봤습니다. 400개가 넘는 댓글이 달려서 다 읽어보기도 어렵네요.
"
"https://news.hada.io/topic?id=7065","Hello - 소프트웨어 개발자를 위한 검색엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hello - 소프트웨어 개발자를 위한 검색엔진

     * 자체 개발한 AI 언어 모델을 이용하여 기술 쿼리를 분석
     * 주요 개발자 사이트들을 검색 소스로 사용
     * 우측엔 검색 결과, 좌측엔 답변으로 예상되는 코드 스니펫을 on-the-fly로 생성해서 보여줌

   어여가서 해봐야겠습니다

   검색이 잘 나오는 것 같네요. 로딩시간 조금 걸리는 부분은 감안해야할 꺼 같아요

   GPL 걸려있는 스니펫 복사해버리기~

   점차 스니펫등을 쉽게 찾을 수 있어서 너무 좋네요.

   스팸사이트들 없이 나름 결과가 잘 나오는 것 같아서 계속 테스트 중입니다.
   꼭 개발 코드가 아니라 ""shortcut key for vscode column mode"" 같은 것 쳐봐도 잘 나오더군요.
   온더플라이로 생성하는 결과들이 나름 괜찮습니다.

   지금보니 이 서비스가 지금의 phind가 됐군요. (다른 geeknews를 링크걸려하니 이미 역링크가 있군요 ㅎ 검색으로 과거 뉴스를 보는 사람들에겐 역링크가 표시되어도 좋겠네요!)
     * phind - 개발자를 위한 GPT-4 기반 검색 엔진
"
"https://news.hada.io/topic?id=7052","EdgeDB 1년 사용 후기 - "다시는 SQL로 돌아가지 않을꺼야"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 EdgeDB 1년 사용 후기 - ""다시는 SQL로 돌아가지 않을꺼야""

     * 1년 정도 사용했고, 가능한 모든 프로젝트를 EdgeDB로 바꿨음
     * EdgeDB는 Postgres 위에 만든 Graph/Relational DB
       → 기존 엔진을 그대로 사용했지만, 사용자 측면에선 모든게 바뀜. 가장 큰 변화는 쿼리언어와 도구들(Tooling)

쿼리 언어

     * EdgeDB는 SQL이 없고 자체 언어인 EdgeQL을 사용하는데, 이게 게임체인저임
     * 한번 사용해보니, 다시는 SQL로 돌아가고 싶지 않음
       → 강력한 타입, 객체 지향, 딥쿼리가 엄청 쉬우며, 사람이 데이터를 쿼리하는 사고방식에 잘 매핑 됨(사람들이 JOIN 하는 방식으로 생각하지는 않으니까)
     * 예전에도 SQL의 팬은 아니었지만, 실제로 대체제가 없었음
     * 환상적인 책-스타일의 튜토리얼과 함께 몇 일 배우고 연습하고 나니, DB 스키마 모델링이 재미나고 가벼운 일이라는 걸 알게 되었음
       → SQL의 복잡성이 사라졌고, SQL이 쿼리언어로써 얼마나 비효율적이고 이상한지 알게되었음
     * EdgeQL은 배우기 쉽고, 퀵스타트와 오버뷰 만으로 80% 정도를 익힐 수 있음
     * 나는 EdgeQL이 너무 좋아서, 독립적인 표준이 되었으면 좋겠음. 그래서 예를 들어 파일 기반DB에서 EdgeQL사용이 가능한 EdgeDBLite 같은게 나오면 좋겠음

툴링

     * 바이너리 하나로 모든 것을 실행가능한 요즘 패턴을 따름 (go 나 flutter 같이)
       → 서버 설치 및 업데이트, DB 생성/삭제, REPL, 마이그레이션, 백업 & 프로젝트 관리 등
       → 그리고, 대부분의 경우 ""It Just Works""
     * EdgeDB는 DB와 인터랙션 하는 방식을 Reinvent 했음
       → ""Project"" 컨셉으로 DB와 자동연결하여, DSN이나 설정 상관없이 그냥 동작함
       → 10년 넘게 localhost 에 root access 권한을 주기 위한 정확한 SQL 커맨드 를 찾아다니던 거랑 비교하면 매우 상쾌함

  기능들

     * 엄청 쉬운 many-to-many 관계 모델링
     * 임베디드 GraphQL (프론트엔드에서 직접 연결 가능)
     * Computed 속성 rating := math::mean(.ratings.score)
     * backlinks : 링크를 역순으로 찾아가기
       → select User.<author; User가 author 라는 이름의 필드로 연결된 테이블에서 검색
     * uuid, collection, scalar, abstract 및 여러 타입들 (나의 최애는 cal::local_datetime)
     * inheritance, constraints 와 Introspection 같은 무서운 것들

지금까지의 경험

     * 1년 정도 전부터 사용했음. 처음엔 작은 개인 프로젝트를 이관했고, 나중엔 회사의 프로젝트중 하나를 이관
     * 내 작업들 대부분은 소규모의 실용적인 사용자 대응 서비스들이어서, 종종 혼자 담당하면서 가장 적합한 도구를 선택하는 사치스러운 일이 가능했음
     * EdgeDB와 함께하는 동안 대부분은 ""It Just Works"" 경험이었음
     * 대부분의 것들은 쉽게 찾을 수 있고, 훌륭한 문서를 가지고 있어서 찾기 쉬움(진짜로 내가 본 가장 좋은 문서 사이트중 하나임)

프로덕션에 적합한지 여부

     * 지난 가을부터 ""프로덕션에서 사용""중
     * 어떤 사람들은 ""프로덕션에서 사용"" 한다는 것에 ""실제로 이용한다는 것""에 비해 좀 더 의미를 부여하긴 하지만..
     * 커맨드라인 도구가 리팩토링 되면서 자동화 스크립트를 살짝 바꾸긴 했지만, 큰일은 아니었음
     * 마음속으로는 얼리어답터로서의 위험에 대한 대가를 지불한 준비를 하고 있었지만, 지금까지는 문제가 없었음

EdgeQL의 표현력

     * 그동안 SQL에 대해서 구글링하고 ORM 제한과 회피방법들을 찾아다니던 것에서 해방되었음
     * EdgeQL은 내가 DB에서 찾고 싶은 것들만 딱 표현할 수 있고, 실제로 읽어서 이해할 수 있음 (다른 개발자도)
     * 종종 EdgeQL 때문에 트랜잭션도 피할수 있음. 싱글쿼리 안에서 다중 중첩 업데이트도 가능함.
       → ""Simplicity is complicated""

Migrations

     * 가장 멋진 것중 하나는 마이그레이션 기능이 내장되어있다는 것
     * 스키마를 변경하고 edgedb migration create를 호출하면 마이그레이션 파일이 생성되고,
       서버에서 edgedb migration apply만 하면 바로 적용 됨
     * 마이그레이션 들은 해쉬로 연결되기 때문에, 랜덤으로 하나만 적용해서 모든걸 깨먹을 일이 없음
     * 새로운 마이그레이션 생성시 기본값은 인터랙티브여서, 커맨드라인에서 모든 변경을 컨펌 받음

성능

     * 나는 큰 사이즈의 데이터를 처리하는게 아니기 때문에, 고성능의 DB가 필요하지는 않음
     * 하지만 하단에 Postgres를 이용하고 있어서 다른 DB에 비해서 성능상 문제가 되지 않음
     * EdgeDB 자체는 Python으로 작성되어 있음(Go라면 좋았겠지만, 개발자들이 Python에 더 익숙한 듯)

Go 클라이언트 라이브러리

     * 내가 Go를 사용하기 때문에 EdgeQL용 네이티브 Go 라이브러리가 있는 것이 좋았음
     * Typescript/Javascript, Python, Go 용 공식 라이브러리가 있고, .Net 과 Elixir 는 커뮤니티가 지원

업그레이드

     * EdgeDB는 서버의 버전과 업데이트에 대한 복잡성들을 추상화함
     * EdgeDB CLI가 기본적으로 알아서 처리. 새 업데이트가 있으면 보여주고 업그레이드 함.
       → 의심스러울 정도로 부드러움
     * 현재는 2.0 RC가 나왔지만, 전혀 걱정이 되지 않음. 지금까지의 경험들이 안전하고 쉬울거라고 믿게함

커뮤니케이션과 지원

     * 얼리어답터로서 공식 EdgeDB 채널에서 엄청 빠른 답변과 도움을 받고 있는 것에 만족

EdgeDB 2.0

     * 내일 릴리즈되는 2.0 에서는 좋은 기능들이 추가됨
          + EdgeDB UI : 비쥬얼 스키마 편집기, REPL 등이 포함된 웹앱
          + 그룹 쿼리, 글로벌 스키마 변수, 객체 단위 보안, Direct EdgeQL over HTTP 등

내가 싫어하거나 걱정하는 것

     * 호환성에 대한 약속
          + 지금까진 다 좋았음. 호환성을 깨지 않는 마이너 업데이트들
          + 호환성에 대한 약속을 해주면(commitment) 좋을 것 같음
     * 늘어나는 기능 셋
          + 이미 내가 원하는 것보다 많은 기능들이 있지만, 점점 늘어나는 중
          + EdgeQL이 강력해 질수록, DB와 서버간의 경계를 흐리게 하면서 ""이거 백엔드에 들어가야 하나, 아니면 똑똑한 DB스키마에 넣어야 하나"" 고민하게 됨
          + 임베디드 HTTP 서버를 사용해서, 대부분 프로젝트에서 백엔드 서버를 완전히 대체하는 방향으로 푸시하는게 합리적으로 보이지만.. 이 멋진 쿼리언어와 엔진을 갖춘 안정적인 DB를 가지고 싶음
     * 아무튼, EdgeDB가 안정적이고 일관적이면서, 기능이 너무 많이 늘어나지 않기를 바람. 현재 기능세트로도 훌륭

결론

     * 난 앞으로의 프로젝트에선 기존 RDB는 고려할 생각이 없음
     * SQL로 돌아가는 것은 Flutter 에서 Ncurses로 가거나, Go에서 어셈블리 언어로 돌아가는 것과 마찬가지임
     * 나에겐, EdgeDB가 지난 20년간 DB 분야에서 가장 큰 발전임.
     * 앞으로 더 많은 경험을 하면 바뀔수도 있겠지만, 1년 넘게 사용하면서 이 기쁨을 해치는 일이 아무것도 없었음
     * 사용하면 할수록 EdgeDB를 신뢰하게 됨
     * EdgeDB 팀이 EdgeDB 자체와 언어,웹사이트,도구,커뮤니티를 만드는 일등에 한 모든 것들이 엄청 인상적임
       → ""Mad respect to the team""
     * 그리고 그들은 이제 겨우 워밍업 한 것 같음

   덕분에 edgedb 알게 되어서 잘 쓰고 있습니다! 감사해요~

   prisma와 비슷한 길을 가는걸로 보이네요. prisma 잘 쓰고 있지만 퍼포먼스 면에서 아쉬운 점이 많은데 벤치마크 결과가 약간 땡기는데요?
   문법은 별로 제 스타일이 아니지만..(protobuf도 쓰고있는데 컨버전 샘플코드 또한 좀...)

   다른 분들은 이렇게 graphQL 같은 문법을 선호하시나요? 저는 결국 뒷단은 RDS니 중간에 컨버전을 해줄텐데 그게 명확하게 드러나지 않으면 좀 꺼리는 편이라..

   이 게시물을 보고 흥미가 생겨서 계속 공부중입니다.
   그런데 아직 초기라 그런지 막히는 부분이 생기면 검색 결과가 많이 나오질 않네요.
   디스코드 채널이 있긴 한데 국내 개발자분들 편하게 질문/답변하면 좋을 것 같아서 오픈 채팅방을 하나 만들었습니다.
   https://open.kakao.com/o/gtGY0Gve

   저도 사용해보고 싶어서 메모해 놨습니다.

   이 글 보고서 튜토리얼 완주하고 나니 더욱더 설득이 되네요.

   흥미롭네요. SQL 없는 세상으로 돌아갈 수 없다니..

   관심이가네요

   인상적입니다!

   graphdb 류에서는 ArangoDB 를 관심있게 보고있었는데, EdgeDB 도 한번 살펴봐야겠어요

   엄청난 칭찬이네요. 7/28 오전 10시(PT)에 2.0을 발표한다고 합니다.

   EdgeDB 1.0 릴리즈
   EdgeDB - 개발자를 위한 차세대 오픈소스 ORDB
"
"https://news.hada.io/topic?id=7157","직접 DALL-E 같은 AI 이미지 생성기 운영하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      직접 DALL-E 같은 AI 이미지 생성기 운영하기

     * Linux(WSL도 가능), CUDA, 32GB 램, 50GB 하드, 3xxx 시리즈 비디오 카드(3090 FE)
     * Latent Diffusion 모델을 이용
     * Text-to-image vs. RAD(Retrieval-Augmented Diffusion)
"
"https://news.hada.io/topic?id=7151","저물어가는 소셜 네트워크의 시대 (번역)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         저물어가는 소셜 네트워크의 시대 (번역)

     * 인터넷의 지난 20년을 폭발적으로 이끌었던 소셜 네트워크(SNS)의 시대가 저물기 시작
     * 2003년 프렌드스터Friendster가 문을 열며 시작되었던 대大 소셜 네트워크의 시대는, 페이스북이 그 앱을 틱톡 비슷하게 개편해버린 지난주를 기점으로 꺾이기 시작
     * 친구들의 포스팅을 보는 것이 아닌, 틱톡이 하는 것처럼 수백만명의 (친구가 아닌) 이들이 만든 콘텐츠를 알고리듬 기반으로 랜덤하게 노출하는 것으로 바꾸려는 중
     * 이 다음은 무엇일까 ?

   프렌드스터 새록새록 하네요.
   testimonial 주고받고 대화는 msn 메신저에서 했었던ㅎㅎ
   중간에 마이스페이스랑 페북 떡상하고나서 게임플랫폼(?) 같은 전환을 시도했었던 것으로 기억하는데 생각나서 들어가보니 깨끗하게 사라졌네요.

   페북이나 틱톡이나 이 다음에 올 것도 원하지 않는 컨텐츠를 거의 공해수준으로 보여준다는 공통분모가 있을거 같아서 개인적으로는 청정구역 컨셉의 무언가가 등장했으면 좋겠네요. (가상 캠핑이라던가..)

   bereal 이나 파파라치 같이 개인화된 소셜미디어들이 앞으로 시장을 이끌걸로 보여요

   이 다음은 vr 심연인가아...

   버츄얼아이돌 붐은 온다
"
"https://news.hada.io/topic?id=7069","Blueboat - 올인원 멀티테넌트 서버리스 자바스크립트 런타임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Blueboat - 올인원 멀티테넌트 서버리스 자바스크립트 런타임

     * 웹플랫폼을 서버로 확장
     * V8 엔진, 프로세스 단위 스냅샷, Rust를 활용해서 17ms안에 콜드 스타트 가능
     * 데이터 및 외부 API를 쉽게 사용가능 (인코딩/파싱/트랜스폼 지원)
     * 분산 시스템을 위한 기본 요소 지원 : 트랜잭셔널 키밸류 저장소, 메시지 큐, 이벤트 스트리밍
     * 안전하고 효율적인 멀티테넌시 지원 : 각 앱들이 하나의 V8 isolate 에 의해 처리됨

   cloudflare woker 생각나네요

   오… 좀 간단히 셀프 호스트가 되는 것 같네요

   Deno, Bun처럼 자바스크립트 런타임들이 많이 나오네요.

   러스트 세.계.정.복
"
"https://news.hada.io/topic?id=7079","EdgeDB 2.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             EdgeDB 2.0 릴리즈

     * Admin UI
          + 데이터 브라우저 & 편집기
          + EdgeQL 편집용 REPL
          + 스키마 관리 도구
     * EdgeQL에서 최상위 레벨 GROUP 지원
     * 객체 단위 보안 및 글로벌 변수
     * Range 타입
     * 공식 Rust 클라이언트 라이브러리 제공
     * 1.0 출시후 6개월 만이며, 3.0도 6개월 안에 출시 예정

   EdgeDB 1년 사용 후기 - ""다시는 SQL로 돌아가지 않을꺼야""
   EdgeDB 1.0 릴리즈
"
"https://news.hada.io/topic?id=7122","Go 1.19 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Go 1.19 릴리즈

     * 메모리 모델을 C++/Java/Rust 등에서 사용하는 모델과 맞춤
       → Atomic 값을 사용하기 쉽게 atomic.Int64 및 atomic.Pointer[T] 같은 타입을 추가
     * LoongArch 64 지원 (리눅스 5.19 이상)
     * RISC-V 10% 성능 개선(함수 인자 및 결과를 레지스터를 이용하여 전달지원)
     * 런타임이 Soft Memory Limit 지원
"
"https://news.hada.io/topic?id=7149","Firefox Translations - 오프라인으로 동작하는 공식 번역 애드온","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Firefox Translations - 오프라인으로 동작하는 공식 번역 애드온

     * 클라우드 이용하지 않고 로컬에서 머신러닝을 이용하여 웹사이트를 번역
     * 언어별 리소스 다운로드 필요
     * SSE4.1 지원하는 CPU 필수
     * 영어/독일어/스페인어/에스토니아어/포르투갈어/프랑스어 등 지원(한국어 지원 안함)
     * 러시아/아이슬란드어/네덜란드어/페르시아어등 개발중
     * EU가 펀딩한 프로젝트 Bergamot에 의해 개발

   오 기대하면서 들어왔는데 아쉽게도 한국어 미지원... 오프라인 번역이라하니 한국어 지원은 앞으로도 힘들긴 하겠네요.

   어째 프로젝트 설명을 둘러봐도.. 한국어는 금세 지원되지 않을듯 하네요.
"
"https://news.hada.io/topic?id=7045","First 1000 스터디 1기 요약글 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        First 1000 스터디 1기 요약글 모음

     * First 1000의 글을 공부하는 스터디 모임에서 요약한 링크들 모음
       → First 1000은 각 서비스들이 처음 1000명의 사용자를 어떻게 모았는지 알려주는 뉴스레터
     * Reddit, Etsy, Tinder, Stripe, Tiktok, Discord, Mixpanel, Lyft, Robinhood 등 총 51개 서비스

   First 1000
"
"https://news.hada.io/topic?id=7103","tabler - 오픈소스 HTML 대시보드 UI 킷 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      tabler - 오픈소스 HTML 대시보드 UI 킷

     * Bootstrap 기반
     * 다양한 인터페이스 컴포넌트 와 템플릿 제공 : 갤러리, FAQ, 위젯, 가격테이블 등
     * 반응형 & 모든 최신 브라우저에서 동작
     * HTML5 & CSS3
     * SPA 버전 제공 : Tabler React

   오픈소스임에도 컴포넌트가 엄청 많네요. 프로젝트에 적용해봐야겠어요.
"
"https://news.hada.io/topic?id=7160","Clubhouse, 자신만의 House 기능 베타 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Clubhouse, 자신만의 House 기능 베타 시작

     * House는 좋아하는 지인들을 초대하는 개인 공간(Private Hallway)
     * 방과 방사이를 돌아다니면서 얘기하고, 지인의 지인을 만나는 용도로 사용
     * 정기 밋업 시간을 가질수 있고, 초대된 멤버들은 소수의 새로운 사람들 초대 가능 (또는 Closed로 두는 것도 가능)
     * 하우스 멤버들은 외부에서 볼 수 있게 공개됨
     * 친구 몇 명과 함께 하우스 개설 신청 받는 중(구글 폼)
"
"https://news.hada.io/topic?id=7050","더 나은 생각을 위한 도구들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            더 나은 생각을 위한 도구들

     * 의사소통, 시스템 사고, 문제 해결, 의사결정 등의 카테고리로 여러가지 생각 도구들의 사용법과 예제, 템플릿(PDF, 노션)을 제공 중
     * 민토 피라미드, 컨셉 지도, 이시카와 다이어그램, 시네핀 프레임워크 등
     * App Beta 신청 받는 중 (베타 기간 무료, 정식버전 구독시 할인혜택)
"
"https://news.hada.io/topic?id=7090","Ask GN: 이달의 구직 - 같이 일할 팀을 찾습니다 (2022년 8월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 이달의 구직 - 같이 일할 팀을 찾습니다 (2022년 8월)

   일할 곳을 찾고 계시다면, 간단히 정보를 남겨 주세요.

     지역 :
     리모트 필요 :
     기술 :
     이력서 :
     이메일 :

   위 정보는 구인을 위해서만 이용해 주세요

   ~~

   구직자 들이 홍보할 수 있는 공간도 필요하다는 얘기를 주셔서 시도해 봅니다.
   혹시나 봇들이 이메일 주소를 크롤링하는 경우도 있을 수 있으니 '[at]' 이나 '[앳]' 등을 써서 이메일 주소를 난독화 해주셔도 좋습니다.
   가능하면 자신의 깃헙/링크드인 URL을 남겨 주세요.
   HN의 Who wants to be hired 를 참고 했습니다.

   지역 : 서울 강남부근, 서울 서쪽 또는 재택
   리모트 필요 : 회사협의(50% 희망, 프리랜서 필요시 희망)
   기술 : Java, Javascipt, Spring Boot
   이력서 : https://github.com/Pracrobo
   이메일 : wkehd-2@naver.com

   서쪽은 강서부근, 마포부근을 의미합니다.
"
"https://news.hada.io/topic?id=7113","만화로 보는 KHTML과 WebKit 프로젝트의 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     만화로 보는 KHTML과 WebKit 프로젝트의 시작

     * KHTML은 1999년 부터 Lars Knoll을 주축으로 몇몇 KDE 공동체 구성원이 바닥부터 순수하게 C++로 레이아웃 엔진과 자바스크립트 엔진을 개발했고, KDE 데스크탑 기본 브라우저인 Konqueror에 사용되었다.
     * 2001년 애플에서 비밀리에 웹브라우저 개발을 진행했는데, 여러 브라우저 엔진을 소스코드 수준에 검토한 후, C++로 가볍게 작성된 KHTML를 브라우저 엔진을 선택한다.
     * 사파리 브라우저 엔진 소스코드를 공개한후, KDE 커뮤니티와 협업을 위해 애플은 WebKit이라는 오픈소스 프로젝트를 시작한다.
     * 이후 WebKit은 Nokia Symbian platform과 BlackBerry, Android에 사용되었고, 크롬브라우저도 사용되었다.
     * 현재 Firefox를 제외한 대부분의 웹브라우저가 KHTML을 기반으로 하고 있다.

   꾸준히 올려주시는 포스팅 덕분에 흥미로운 역사를 엿볼 수 있네요

   그리고 이전 포스팅들 처럼 ""만화로 보는"" 을 붙이면 그 전부터 이어지는 포스팅이구나 하고 짐작할 수 있을 것 같습니다.

   제목 수정 감사드립니다. 다음에는 ""만화로 보는""을 붙여야겠네요. :-)
"
"https://news.hada.io/topic?id=7102","게임 데이터로 인과 추론 분석하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           게임 데이터로 인과 추론 분석하기

   NC소프트의 이은조님의 한국 R 컨퍼런스 내용을 정리했습니다.

   인과추론이 무엇인지

   왜 분석가에게 인과추론이 중요한지
   기존 단순한 비교가 어떤 게 문제인지
   인과추론의 기법에는 어떤게 있으며 어떤 점을 주의해야하는지

   30여분 정도 안에 군더더기 없이 담겨있습니다.
"
"https://news.hada.io/topic?id=7161","구글, 애플에게 RCS를 수용하라는 "Get The Message" 광고 캠페인 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            구글, 애플에게 RCS를 수용하라는 ""Get The Message"" 광고 캠페인 시작

     * RCS는 업계 표준 메시징 방식이고, 대부분의 통신사가 지원하며, 500개 이상의 안드로이드 제조사가 모두 지원
     * 애플은 RCS를 수용하지 않고, 오래된 SMS/MMS 시스템을 사용
          + SMS를 녹색, iMessage를 파란색으로 구분
          + 대용량 파일을 보낼수 없어서 사진이 흐리게 전달되거나, 비디오 해상도가 작아짐
          + 안드로이드와 그룹 대화시 채팅방 나가기가 불가능
          + 안드로이드로 WiFi SMS 전송 불가
          + SMS/MMS 는 E2E 암호화 지원하지 않음
     * @APPLE #GETTHEMESSAGE 를 붙여서 트윗 해달라고 요청
"
"https://news.hada.io/topic?id=7038","Git-Story : 커밋 히스토리를 애니메이션으로 만들어 설명하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Git-Story : 커밋 히스토리를 애니메이션으로 만들어 설명하기

     * Git 프로젝트를 시각화, 워크플로우를 팀과 공유 하는 등의 목적으로 사용
     * Repo 에서 커맨드 한번으로 .mp4 애니메이션 생성
          + 시작 커밋 ID/Ref 지정 (기본값은 HEAD)
          + 포함할 커밋 갯수 지정 (기본값은 8)
          + HEAD, 브랜치명, Tag의 Ref Label을 기본 표시
     * 커스텀 인트로/아웃트로 추가 가능
     * 다크모드/라이트모드

   조금 다른 성격의 프로젝트이긴 하나 Gource [1] 와 Logstalgia [2] 도 있습니다.
    1. https://gource.io/
    2. https://logstalgia.io/

   수천개 되는 커밋이 initial commit 부터 시작해서, 갈라지고 합쳐지는 대서사를 기대했는데.. 좀 아쉽네요!

   나중에 발표자료에 넣는 용도로 써볼만 해보이네용

   귀엽긴 한데... 배속 설정이 필수이겠군요 ㅎㅎ
"
"https://news.hada.io/topic?id=7095","Bill - 서버리스로 동작하는 AWS 비용 최적화 봇 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Bill - 서버리스로 동작하는 AWS 비용 최적화 봇

     * AWS 인프라 비용을 모니터링 하고, 예상치 못했던 비용이 발생하는 것을 감지
          + 비용 이력을 정기적으로 모니터링
          + 기본적인 비용 최적화 모범사례를 적용
     * 매일 이 달의 클라우드 비용에 대해 알림을 줌

동작 방식

     * AWS Cost and Usage Reports(CUR)을 S3에 저장
     * Amazon EventBridge가 하루에 한번 AWS Step Functions를 실행
          + AWS Lambda로 어제를 계산
          + Athena의 Prepared Statement가 AWS Glue를 이용하여 S3를 Crawling 하고 Datacatalog를 생성/업데이트
          + Lambda 로 슬랙에 메시지 보냄
"
"https://news.hada.io/topic?id=7082","Terminal GIF Maker","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Terminal GIF Maker

     * 명령어들을 라인단위로 추가해서 GIF로 생성해주는 웹 도구
     * 각 라인별로 디렉토리 보이기/멀티라인/타임아웃 지정 가능
     * 타이핑 애니메이션, 폰트 크기/종류 설정 가능
     * 시뮬레이트 해서 보기 후 Export

   https://news.hada.io/topic?id=3667 요 Terminalizer는 유지보수 안되는 듯 하고요.
   GIF는 아니지만 https://news.hada.io/topic?id=5465 asciinema가 떠오릅니다.
"
"https://news.hada.io/topic?id=7063","CircleCI - GitLab 지원 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CircleCI - GitLab 지원 시작
"
"https://news.hada.io/topic?id=7147","Ask GN: 초장거리 출퇴근을 하시는 분이 계실까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 초장거리 출퇴근을 하시는 분이 계실까요?

   저는 매일은 아니지만,

   일주일에 두번 대전 <-> 홍대역 인근으로 출근을 합니다.

   다행히 집이랑 기차역이 걸어서 10분이라

   door to door로 약 1시간 50분 정도 걸려요.

   출근 루트는 서대전역 <-> 용산 <-> 효창공원 <-> 상수역 입니다.

   저는 경기도 양평 <-> 학동역으로 매일 출퇴근합니다.
   door to door 약 두시간정도 걸리네요.

   아 정말 대단한 체력이십니다 ㅎ

   https://youtu.be/_CevcdqDi2M

   제 은사님이신데
   900km 출근하시네요…

   대학다닐 때 강서구에서 노원구로 매일 1교시 수업 들었죠.
   넉넉하게 2시간정도 잡고 출발했습니다.
   취직하고 최근에 자취 시작했는데 출근시간 5분이라 좋네요?!

   역시 소요시간은 거리에 비례하는 것이 아니군요... 인천 부평에서 자가용으로 구로까지가면 출근시간이 대략 한 시간 50분 걸립니다. 길이 너무 막혀요 ㅎㅎㅎ

   네, 맞아요 만약 저희 집 근처에 KTX가 없고, 용산역에서 상수역이 멀었다면 아마 이 회사 취직 못했을 듯 하네요.

   KTX때문에 많이 빨라졌네요. 그래도 엄청 고생이실듯
   전 지금은 아니고, 대학 시절에 집이 잠깐 안성으로 이사간 적이 있어서..
   서울 <-> 안성 고속버스 1시간, 지하철과 걷는 시간들 포함해서 1시간, 왕복 4시간씩 움직였던 기억이 있네요.
   그때는 젊으니까 했던 것 같아요. 사회생활 몇년 하고 나서는 회사를 옮기면 집을 근처로 옮겨서 살았습니다. 출퇴근 10분거리에 사는게 젤 편한듯
"
"https://news.hada.io/topic?id=7088","Linux 5.19 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Linux 5.19 출시

     * 처음으로 Apple 랩톱에서 arm64를 릴리스 하는 버전. (테스트 빌드 및 부팅만 수행)
     * 초기 LoongArch CPU 지원, AMD Zen 4 CPU 도입에 대한 지속적인 작업, AMD RDNA3 활성화, Intel DG2/Alchemist에 대한 추가 작업, Alder Lake에 대한 Intel Idle 드라이버 지원, 초기 Raptor Lake P 그래픽 지원등 새로운 기능 제공.
     * Torvalds는 다음버전은 Linux 6.0 커널로 부를 가능성이 높다고 언급.
"
"https://news.hada.io/topic?id=7039","@webtoon/psd 라이브러리 개발기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @webtoon/psd 라이브러리 개발기

     * 프로젝트에 사용할 PSD 파서를 찾던 중 요구사항에 적합한게 없어서 직접 구현하기로 함
     * 오픈소스로 공개 스타수 680~
     * 한국어 및 특수문자 지원
     * 2GB 이상 대용량 파일(.psb) 지원
     * 퍼포먼스 향상 등등
     * 파서를 개발하며 알게된 경험 정리
"
"https://news.hada.io/topic?id=7108","Tree.fm - 숲속의 소리 듣기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tree.fm - 숲속의 소리 듣기

     * 전 세계 사람들이 녹음한 숲속의 소리 듣기
     * Timber Festival 이 만들어 모으고 있는 ""Sounds of the Forest"" 오픈 소스 라이브러리를 활용 (CC-BY-SA)
     * 사진은 Unsplash 에서 가져옴
     * 크롬 확장으로도 제공
"
"https://news.hada.io/topic?id=7146","스패머들을 암호 지옥으로 보내기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스패머들을 암호 지옥으로 보내기

     * 스패머가 메일을 보내면, 파트너십 사이트에 등록해 달라고 회신 메일을 보내게 자동화
     * 이 사이트엔 이메일/암호를 등록하게 되어있는데, 암호 요구사항이 매우 복잡해서 여러번 시도하게 되어 있음
       → 암호 생성을 여러번 시도해야 하는 암호 Purgatory(연옥, 영혼을 정화하는 곳)
       → 스패머를 귀찮게 만들어서 시간을 낭비하게 만들기
     * 이 Purgatory 사이트는 오픈소스로 공개되어 있음
     * Microsoft Power Automate 와 Cloudflare Workers KV 사용

   옛날 네이버 메일로 하루에 한 번씩 블로그 판매하라는 메일을 받은 기억이 나는군요. 그런 분들에게 똑같은 방법을 사용해주고 싶습니다.

   예를 들면, 오픈 카카오톡 링크라면서 링크 단축 서비스를 이용하는데, 캡차와 광고가 있는 단축 링크를 한 20개 정도 거치게 만든다던가...

   하나 만들어서 네이버 블로그 운영자들꼐 홍보하고 싶네요 ㅋㅋㅋㅋㅋㅋㅋㅋ

   뭘 이렇게 까지 해야하나 싶은데.. 블로그나 웹사이트 운영자들 한테는 저런 요청메일이 꽤나 오긴 합니다.
   사이트를 뒤져서 운영자 이메일 주소를 찾아내서 보내는 열정(?)이 있으니 저런 것에도 잘 걸릴 것 같기는 하네요 ㅡ.ㅡ;

   근데 모든 암호는 ""cat""으로 시작하고, ""dog"" 로 끝나야 한다고 하는 조건은 정말 황당 ㅎㅎ

   사이트 장르별로 이메일 주소 모아서 DB 파는 업자가 분명히 있을거에요.
"
"https://news.hada.io/topic?id=7086","좋은 개발자 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               좋은 개발자 경험

   Good Developer Experience
     * TL;DR
       개발자를 행복하게 만들고, 행복을 유지하는 것을 잊지 마세요.

# 좋은 개발자 경험(Developer Experience, DX)이란 무엇인가

   개발자 경험은 개발자가 제품을 사용하거나 개발하는 동안의 경험을 말합니다.
   하지만 많은 회사에서는 UX(User Experience)보다 우선순위에 밀려나 있습니다. 개발자도 유저이고, 제품을 사용합니다.
   그들의 만족과 행복은 프로젝트의 성공에 매우 중요합니다. 행복한 개발자는 뛰어난 소프트웨어를 만들고 팀을 떠날 가능성을 줄여줍니다.
   우리는 아래 4가지 요소로 좋은 개발자 경험을 정의합니다.
    1. 적절한 아키텍쳐
       아키텍쳐가 단순하면 나중에 고통받고, 복잡하면 지금 고통스럽습니다.
       프로젝트와 팀 규모를 고려하여 아키텍쳐를 선정해야 합니다. 좋은 아키텍쳐는 깨지기 어렵고, 짧은 피드백 주기를 가진데다가 내성이 좋습니다.
    2. 좋은 툴
       가능한 부분은 자동화를 권장합니다. 반복적인 작업은 피곤합니다.
    3. 개발 이후를 보완해주는 프로세스
       이 프로세스는 자동화된 체크 리스트로 작동해야하며 일관된 단계를 제공합니다. 정의된 프로세스는 팀 훈련에 도움이 됩니다.
       충분히 큰 회사라면 QA, 배포, 피드백, 온보딩 등의 프로세스를 사용하세요.
    4. 해롭지 않은 팀 문화
       회사의 목적을 정의하세요. 돈을 버는 것이 유일한 목표가 되어서는 안됩니다.
       문화는 당신이 회사와 팀에 설치할 수 있는 가장 중요한 브레인웨어(머리에서 실행되는 소프트웨어)입니다.
       개발자가 내리는 모든 결정은 설치된 브레인웨어를 통해 걸러집니다.
       그들이 브레인웨어에 동의하지 않으면 무시합니다.

# 좋은 개발자 경험이 필요한 이유

  ## 좋은 개발자 경험을 가진 팀은 생산성이 높으며 다음과 같은 특성을 나타냅니다:

    1. 영향력에 대한 감각
       그들은 그저 돈을 버는 것만이 아님을 이해합니다. 자신의 일이 중요하고 다른 사람의 삶을 개선한다는 것을 알고 있습니다.
    2. 주인의식 및 책임감
       그들은 성공에 대한 책임이 있습니다. 모든 팀 멤버는 회사의 성공에 대한 책임감을 느껴야 합니다.
    3. 공통 목표
       팀 부서 및 회사 전체가 공통적인 목표를 가집니다.
    4. 친절과 정직
       우리는 이것을 'hey bro' 문화라고 부릅니다. 우리는 큰 존경심을 가지고 성실을 강조합니다
    5. 실패의 허용
       개발자는 용감해야 하고 위험을 감수해야 합니다. 그러나 리스크는 언제나 계산되어야 하며, 개발자는 모든 작업이 얼마나 많은 문제를 일으킬 수 있는지 알고 있어야 합니다.

  ## 나쁜 개발자 경험을 가진 문화의 특성:

    1. 손가락질
       팀 멤버는 서로 잘못된 작업에 대해 비난합니다. 이것은 매우 해로운 일이지만 자주 발생합니다.
    2. 실패에 대한 큰 처벌
       예를 들면, 마감 기한을 지키지 않으면 해고될 수 있다고 말하는 상사라던가..
    3. 변하지 않는 크런치 타임 및 팀의 지속적인 과부하
    4. 적대감과 불확실성
       팀 간의 불건전한 경쟁. (예를 들면, 이 사람이 나보다 잘해서 승진함)
    5. 희석된 책임감
       대기업에서는 아무도 책임지지 않는 것처럼 느껴질 수 있습니다. '미안해, 내가 망쳤어'라고 말하려면 용기가 필요합니다. 책임을 질 수 있는 것이 중요합니다.

# 좋은 개발자 경험이 해결할 수 있는 문제들

     * 지식 축적
     * 잘못된 제품-시장 적합성
     * 의욕없는 팀
     * '내 문제가 아니야' 사고방식
     * 실패한 제품
     * 불행한 클라이언트
     * 비즈니스와 IT의 연결 단절
     * 해로운 팀 문화
     * 불량한 코드 품질
     * 비용 증가
     * 무의미한 일

# 좋은 개발자 경험을 구현하는 방법

   1980년대 중반에 Dr. Martin Barnes가 만든 'Scope Triangle'이 있습니다. 이것은 세 가지 기본적인 힘 사이의 관계를 보여줍니다.

     시간, 돈, 품질

   이 삼각형은 품질을 늘리려면 돈이나 시간을 조절해야 함을 의미합니다. (역자:이해가 쉽도록 원문을 살짝 변경) 다만 우리는 그것이 현실에서 작동하는 방식이 아니라고 생각합니다. 저 삼각형에 정서적 비용을 추가해야 합니다.

   개발자가 작업을 완료하기 위해 늦게까지 머물러야 하는 경우 투자해야 하는 것은 시간뿐만이 아닙니다. 이 투자의 또 다른 부분은 정서적 비용입니다. 훌륭한 개발자 경험을 갖는 것은 이러한 정서적 비용을 통제하는 데 도움이 됩니다. 개발자를 행복하게 하려면 정서적 비용을 낮게 유지하세요.

# 좋은 개발자 경험의 일반적인 함정

    1. 너무 빠른 타이밍에 개발자에게 지나치게 많은 정보를 제공합니다.
    2. 더 많은 정보가 필요할 때 개발자에게 너무 적은 정보를 제공합니다.
    3. 프로세스를 과도하게 사용하면 '모든 것이 적합하다'는 사고방식이 나타날 수 있습니다.
    4. 과잉 엔지니어링 경향
    5. 애자일 = 개발자들에게 더 많은 일을 시킬 핑계

   번역 감사합니다!
"
"https://news.hada.io/topic?id=7034","아마존에서 파는 "딥러닝 with 파이썬" 책은 가짜다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     아마존에서 파는 ""딥러닝 with 파이썬"" 책은 가짜다

     * 책의 저자인 François Chollet(Keras 개발자)의 고발
     * 아마존에서 써드파티 셀러가 PDF를 인쇄한 가짜 책을 정품인 것 처럼 팔고 있다고
     * 이는 아마존이 책에 대해서 아무 셀러나 자신이 보유하고 있다고 하고 팔수 있게 하기 때문
     * 주로 ""Sacred Gamez"", ""Your Toy Mart"" 같은 이름의 셀러들이 많은데, 처음에 가짜 장난감/비디오 게임 판매로 시작했기 때문. 이제는 수익이 높은 기술 서적으로 피봇팅 한것 같다고
     * 이는 몇 년 되었으며, 매우 수익성 높은 사업이라고..
     * 정품/가품 비교해보면 더 진한 커버 색상, 얇은 종이, 허접한 제본, 더 작은 크기를 가진다고
     * 아마존은 이에 대해서 아무 것도 하지 않음. 여러번 신고했지만 바뀌는게 없음. 이 가짜 셀러들은 몇년째 활동중
     * 심지어 3/4월부터 아마존에서 팔리는 DLwP2 는 100% 모두 가품. 가짜 셀러들이 재고가 있다고 등록했기 때문에, 아마존은 이 책에 대해서 자체 재고를 보유하지 않고 있음(출판사에 주문을 하지 않음)
     * 꼭 이 책만이 아니라, 아마존에서 많이 팔리는 기술 서적들이 다 영향을 받고 있다고
       → 당신이 최근에 아마존에서 기술서적을 구입했다면 50% 이상의 확률로 가짜일 수 있음
     * 어디서 사야하나요? 출판사 사이트에서 직접 구입할 것. manning.com
     * 산게 가짜라면 환불 요청할 것. 그래야 아마존이 압박을 받고 이슈를 검토하게 될 것

   와! 이건 생각도 못했네요?

   해당 트윗의 리플라이에도 다른 책에서 같은 사례가 많다고 조심하라고 얘기하고 있습니다.
   기술서적이 인쇄비용에 비해서 비싸니까 이런 일들이 가능한가 보네요. 국내에선 잘 안생길듯 합니다만..

   정말 저 사업 활동에 대한 열정과 창의성 만큼은 본받고 싶을 정도네요 ;;;;
"
"https://news.hada.io/topic?id=7032","예제로 알아보는 Javascript 난독화(Obfuscation) 기법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                예제로 알아보는 Javascript 난독화(Obfuscation) 기법

     * Hex 문자열 코딩
     * 문자열 어레이 매핑
     * 데드 코드 인젝션
     * Scope 난독화
     * 제어 흐름 난독화
     * 맹글링
     * 코드 최소화
     * JSFuck

   이 글의 HN 뉴스에 달린 댓글이 재미납니다. https://news.ycombinator.com/item?id=32130313
     * 난독화를 보고 싶으면, 슬롯머신의 코드를 보세요 https://www.freeslots.com/slot515.min.js?v=84
"
"https://news.hada.io/topic?id=7056"," Player Unknown’s Bug: 원인 모를 문제를 기록하면 성장할 수 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Player Unknown’s Bug: 원인 모를 문제를 기록하면 성장할 수 있나요?

   우연한 계기로 만든 이슈 페이지를 통해, 팀의 심리적 안정감은 높이고 정보 공유는 늘려 견고한 조직과 서비스를 만들어가는 이야기를 공유드립니다.


   개발을 하다 보면 원인 모를 문제를 만나곤 함.
   특히 웹 프론트엔드는 서버 등의 상태 외에도 브라우저의 종류나 버전, 크롬 익스텐션 등 수많은 외부 요인에 영향을 받음.

   만약 문제의 원인을 모르거나, 문제의 원인이 우리에게 없다면, 포스트모텀만으로 단단한 구조를 만들 수 있을지 문득 의문이 들었음 (부족하지 않은지?).

  계기

   원인을 알 수 없는 이슈를 리포팅 받고 종결처리 하는 데까지 9시간이 걸렸던 적이 있음.
   이슈 디버깅에 4시간을 할애하고 나서야, 문제의 원인이 내부 코드나 인프라에 있지 않고 사용자의 Chrome Extension의 버그로 발생했다는 것을 알게 되었음.

   문제의 원인이 어디에 있는지 파악하기도 어려웠지만, 원인이 외부에 있음을 파악하기까지 무려 4~5시간이 걸렸다는 것에 스스로에게 화가 났음.
   Notion에 ‘Player Unknown’s Bug(PUB)’ 라는 페이지를 만들고, 분노와 함께 이슈를 대응하며 시도한 것, 아쉬운 것, 보완하면 좋을 것 등을 정리함.

  문화로의 정착, 그리고 발전

   회고하며 이슈의 원인, 찾아보며 부가적으로 알게 된 것, 오판한 지점 등을 이야기했음. 팀원들은 궁금한 점과 개선하면 좋을 지점들을 짚어주셨고, 그 부분을 모아 장애 대응 프로세스를 정립했음.

   이 과정이 좋았던 것이, 이슈 대응 과정에서 느꼈던 어려움을 팀원들이 공감해주었고, 새롭게 알게 된 것을 공유하는 재미가 있었음. 또한, 체크리스트를 만들어 비슷한 상황이 오면 더 빠르게 문제를 파악할 수 있게 되었음. 팀에 이야기하여 정식 문화로 채택됨.

   AB180 개발 조직은 기본적으로 ‘포스트모템’을 진행하고 있음. 사내 포스트모템이 Resolution과 Action Items이 중심이라면, PUB는 Lesson Learn, 이슈 대응에 대한 심리적 안정감 형성, 알 수 없는 문제에서 먼저 확인할 요인들을 정리하는 것이 목적.

  정보를 자발적으로 공유하는 문화

   팀에 정착하면서 다른 팀원들이 대응한 이슈들도 하나 둘씩 쌓이기 시작함.
   회고를 하면서 몰랐던 부분을 이야기하고, 더 깊이 파보는 시간이, 작지만 자발적인 '지식 공유 세션'처럼 운영되기 시작함.

   이 문화를 조금 더 키워보기 위해 배운 것, 알게 된 것을 수시로 공유하는 Slack 채널을 운영하고 있음. 아직까지는 잘 운영되고 있음.

  Lesson Learn

     * 장애를 대응한 팀 전체의 심리적 안정감을 높여야하고, 그러기 위해서는 더 많은 이야기를 나눠야한다.
     * 그렇지 않았을 때, 문제는 반복되며, 조직 내에 ‘문제 = 말하면 안 되는 것’이라는 생각이 자리 잡는다.
     * 정보의 공유를 통해 조직의 심리적 안정감을 만들고, 심지어 높이는 것이 가능하다.
     * 그리고 이러한 정보 공유 문화는 생각보다 별 거 아닌 것으로 시작할 수 있을지도 모른다.

   저는 반대로 오늘 특정 외부 요인이 원인으로 아주 명확하지만 내부 사정으로 쉽사리 조치할 수 없다고 여겨 발만 동동 구르던 장애가 사실 설정 파일 한 줄만 바꿔주면 해결되는 것이었다는 케이스에 하루종일 시달리다 퇴근했습니다. 이 글을 보니 정말 도움이 되는군요.

   오늘 하루도 정말 수고하셨습니다. 그래도 문제를 해결하셨다는게 다행이에요. 위의 글에서 적었던 문제들도 가끔 생각날 때가 있어요. 그때는 힘들었지만 지금은 즐겁게 받아들일 수 있는 것 같아요.
   kunggom님께서 오늘 겪은 힘든 일도 시간이 지나면 즐겁게 생각할 수 있지 않을까요? ㅎㅎ

   부족한 제 글을 읽어주셔서 감사합니다.

   사실 예전이나 지금이나 장애 처리로 힘든 걸 즐겁다고 생각해본 적은 없습니다.
   예를 들면 오늘 처리한 장애도 하필 저희 팀에서는 운영 서버에 대한 직접 접근이 막혀 있던 제품에서 발생한 것이라, 장애를 발견하고 현상 파악을 진행하던 초반부와 서버 접근 권한을 간신히 얻어낸 후반부를 제외하고는 상대적으로 무기력할 수밖에 없었습니다. 저희 팀에서 이러이러한 조치를 해달라고 부탁하면 서버 운영 팀에서는 그쪽 사정으로 거부했거든요. 그런 무기력함을 즐겁게 받아들일 수는 없지요.
   그래서 퇴근 전까지 포스트모템 문서를 작성하며 느낀 건 차라리 ‘더러워서라도 다음부터는 이런 실수 안 한다!’에 더 가까웠던 것 같습니다.

   말씀해주신 내용을 들으니 많이 힘이 드셨겠다는 생각이 듭니다. 말씀해주신대로 같은 실수를 안하게 되면서 조금씩 나아갈 수 밖에... ㅠ

   사실 해당 제품은 상당히 오래된 레거시 제품이고, 인수인계 받은 지 얼마 되지 않았으며, 받자마자 기능 변경 소요가 들어와서 최근 코드를 수정은 한 적이 있지만 오늘 발생한 장애와는 아무런 관련이 없는 부분이었습니다. 그래서 실제로 문제가 된 부분은 제가 직접 작성한 내용은 아니었습니다만, 해당 제품을 좀 더 속속들이 알고 있었더라면 더욱 빨리 문제를 해결할 수 있었겠지요. 그게 참 아쉬워요.
   그리고 애초에 전면 장애상황을 확인하고 나서 처음에 확신했던 원인에 대한 추정은 사실 절반만 맞는 것이었고 말이죠. 그 추정에 대한 확신이야말로 오늘의 진정한 실수였지 않나 생각합니다.
"
"https://news.hada.io/topic?id=7092","Chunk - 백엔드 개발자를 위한 Playground ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Chunk - 백엔드 개발자를 위한 Playground

     * 웹에서 백엔드 코드를 개발하고 즉시 실행 가능
       → 브라우저에서 수동 실행, HTTP / Webhook 호출, 스케줄링 (하루 한번, 매시간, 매분)
     * TypeScript & Deno 지원
     * 자동화 도구, 봇, 스크래핑 유틸 등을 개발 가능
     * 다른 사람이 만든 Chunk를 보고 코드를 가져와 사용하거나 Remix 가능
     * 베타 기간중이라 현재는 무료
"
"https://news.hada.io/topic?id=7029","RedwoodJS vs. BlitzJS : 풀스택 자바스크립트 메타-프레임워크 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             RedwoodJS vs. BlitzJS : 풀스택 자바스크립트 메타-프레임워크 비교

     * 역사 : Rails를 대체할 프레임워크들의 등장
     * Elixir 와 Phoenix
     * RedwoodJS란 ?
          + GraphQL 사용
          + 프론트엔드 장점 : Cells 와 Form
          + 개발자 : 깃헙 공동창업자인 Tom Presoton-Werner 및 현재 23명의 코어 팀
     * BlitzJS 란
          + Next.js 기반
          + 초기의 문제점
          + Blitz 앱 만드는 법
          + 밝은 미래
     * Redwood vs. Blitz: 비교와 결론
          + CLI 코드 생성기 : 동점
          + ORM : 동점
          + SSR 인터랙티브 페이지 : GraphQL 팬들은 Redwood를 고수하겠지만, Blitz가 승리
          + API : 동점(현재 상태로는 둘 다 별로이긴 함)

   Elixir Phoenix 를 하시면 편합니다
     * Blitz - 풀스택 React 프레임워크
     * RedwoodJS - 풀스택 개발 가능한 JAMStack
"
"https://news.hada.io/topic?id=7111","Y Combinator, 경기침체 및 투자환경을 이유로 배치 규모를 40% 축소 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Y Combinator, 경기침체 및 투자환경을 이유로 배치 규모를 40% 축소

     * Summer 22(S22) 배치 규모는 약 250개로 지난 겨울 배치의 414개보다 40% 줄어듬
     * 이는 의도적인 것이며, 지난 겨울 이후 경기침체와 투자환경이 변해서 그런 것이라고
     * 5월에 포트폴리오 사들에게 보낸 ""최악을 대비하세요"" 메일과도 연결 되는 것
"
"https://news.hada.io/topic?id=7071","애플, 자체 전기차를 위해 20년차 람보르기니 디자이너 영입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플, 자체 전기차를 위해 20년차 람보르기니 디자이너 영입

   섀시 및 차량 역학 엔지니어링 디렉터

   전 포르쉐보다 람보르기니 디자인이 취향이라.. 잘 나오길 기대해 봅니다.
   솔직히 요즘 전기차중엔 테슬라 말고는 딱히 땡기는 차가 없어요.
"
"https://news.hada.io/topic?id=7046","이제 '윤초'는 과거로 남겨둘 때가 되었다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        이제 '윤초'는 과거로 남겨둘 때가 되었다

     * 윤초(Leap Second)는 지구 자전속도 때문에 생기는 UT1(세계시) 과 UTC의 차이를 보정하기 위해 도입됨
     * 이는 UTC를 천체 관측등 다양한 목적으로 사용할 수 있게 해주기 때문에 과학자와 천문학자에게 주로 도움이 됨
     * UTC를 수정하지 않으면 천문 관측을 위해 UTC와 동기화 되는 레거시 장비 및 소프트웨어를 보정 해야함
     * 윤초가 제안된 후 현재까지, UTC는 총 27번 수정 되었음
     * 윤초는 1972년도엔 과학계 및 통신업계를 모두 만족시키는 수용할만한 솔루션이었지만, 현재는 UTC는 디지털 어플리케이션 및 과학자 모두에게 좋지 않음
       → 그들은 종종 TAI(International Atomic Time, 국제원자시)나 UT1을 선택함
     * Meta 는 향후 윤초 도입을 중단하고 현재 수준인 27을 유지하기 위한 업계의 노력을 지원하고 있음
     * 새로운 윤초를 도입하는 것은 득보다 실이 많은 위험한 관행이며, 이를 대체할 새로운 기술을 도입해야 할 때라고 생각

Leap of Faith

     * 지구 자전의 불규칙성에 기여하는 많은 요인 중 하나는 세계에서 가장 높은 산들의 만년설이 계속해서 녹고 다시 얼어 붙는 것
     * 이것은 회전하는 피겨스케이터를 생각해보면 쉽게 시각화 가능
     * 지금까지는 양의 윤초만 있었기에 단순히 23:59:59 와 00:00:00 사이에 23:59:60 이라는 추가 초만 넣으면 되었지만,
       지구의 자전 패턴이 바뀌면서 미래의 어느 시점에서는 음의 윤초가 발생할 가능성이 높음
       그러면 23:59:58 다음에 00:00:00 이 되어야 함.
     * 이 음의 윤초가 주는 영향에 대해서는 대규모로 테스트 된 적이 없으며, 타이머나 스케줄러에 의존하는 소프트웨어에는 치명적인 영향을 미칠 수 있음

Smearing

     * 더 최근에는, 단순히 시계를 늦추거나 빠르게 하여 윤초를 서서히 '입히는(Smear)'게 관행이 되었음
     * 이 작업을 수행하는 보편적인 방법은 없지만, Meta 에서는 윤초를 00:00:00 부터 17시간에 걸쳐서 Smear함
     * 수백대의 NTP 서버들이 같이 Stratum 2에서 진행하므로, 너무 크게 Smearing 하면 NTP 클라이언트들이 오류가 있다고 판단해서 Quorum 에서 빼버리게 되고 이건 Outage가 될 가능성이 있음
     * 00:00:00 에서 시작하는 것도 표준화 된것은 아니어서, 여러 옵션이 있을 수 있음
       → 예를 들어, 특정회사는 12:00:00 UTC 에서 시작해서 24시간동안 진행할 수도 있음
     * 또한 Smearing 자체에도 다른 알고리듬들도 있음 : 커널 윤초 보정, Linear Smearing, Quadratic(Meta가 사용하는 것)
     * 이 모든 일들은 Meta 의 고유한 Time Appliance를 비롯해서 중요한 변환 로직이 필요함
     * 이 Smearing 기간 동안 NTP 서버가 재시작 되면 ""Old"" 와 ""New"" 시간들이 클라이언트에게 가면서 Outage가 생길수 있음

The negative impact of Leap Seconds

     * 윤초와 그 오프셋은 업계 전체에 문제를 일으킴
     * Outage가 발생하는 가장 쉬운 방법은 시간이 항상 앞으로만 간다고 생각하고 코딩하는 것

   start := time.Now()
   // do something
   spent := time.Now().Sub(start)
     * 위의 spent 가 어떻게 사용되는지에 따라 윤초기간중에 음수가 발생할 수도 있음
     * Reddit은 2012년에 윤초 때문에 대규모 중단이 발생했고, 사이트가 30~40분동안 접근이 불가능 했음
     * Cloudflare는 2017년에 회사의 공용 DNS에 미치는 영향에 대해서 상세한 글을 게시 했음

Moving beyond the leap second

     * 윤초 이벤트는 업계 전반에 걸쳐 문제를 일으키고 계속해서 많은 위험을 내포하고 있음
     * 현업에서 우리는 윤초가 도입될 때 마다 문제에 부딪힘
     * 그리고 매우 드문 사건이기 때문에 발생할때마다 커뮤니티들이 황폐화 됨
     * 모든 산업분야에서 시계 정밀도에 대한 수요가 증가하면서, 윤초는 이제 득보다 실이 많고, Outage를 초래
     * Meta의 엔지니어로서, 우리는 향후 윤초 도입을 중단하고 다음 천년동안 충분할 것으로 생각하는 현재 수준인 27을 유지하기 위해 큰 지원을 하고 있음

   와 엄청 재미난 주제내요! 근데 으음… 윤초를 넣는게 큰 일이라는 건 알겠는데 27초를 유지하기 위해서 어떤 큰 노력을 하고 있는지 이해를 못했어요.

   아마 이런 것들을 뜻하는듯 합니다

   https://news.hada.io/topic?id=1752

   글의 제목이 뭔가 이상합니다

   트위터 봇이나 슬랙봇이 보낸 메세지의 제목은 멀쩡한데 사이트에서 보는 건 이상하네요

   엇 뭔가 이상했었나 봐요. 수정했습니다.
"
"https://news.hada.io/topic?id=7060","Cloud Hypervisor - 오픈소스 Virtual Machine Monitor(VMM)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Cloud Hypervisor - 오픈소스 Virtual Machine Monitor(VMM)

     * KVM Hypervisor 및 Microsoft Hypervisor(MSHV) 위에서 동작
     * 최소한의 하드웨어 에뮬레이션으로 최신 클라우드 워크로드를 실행하는 것을 목표
     * 작은 지연시간 및 메모리 사용량, 고성능, 작은 공격 표면, 64비트 전용, CPU/메모리/PCI hotplug, 머신to머신 마이그레이션
     * x86-64 및 AArch64 지원
     * 게스트OS : 64Bit Linux 및 Windows 10/Windows Server 2019
     * Rust 오픈소스이고, Rust-vmm Crate 기반
     * 많은 코드를 같은 Rust VMM 인 Firecracker 와 crosvm(ChromeOS Virtual Machine Monitor) 에서 가져왔으나 목표가 다름
       → 클라이언트/서버리스 등의 유스케이스가 아니라 클라우드 워크로드 지원하는 것이 목표

   Firecracker v1.0.0 릴리즈
"
"https://news.hada.io/topic?id=7089","Ask GN: 이달의 구인 - 멤버를 찾고 계신가요 ? (2022년 8월)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 이달의 구인 - 멤버를 찾고 계신가요 ? (2022년 8월)

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)

   이 글은 매월 첫번째 월요일에 등록됩니다.
   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   조직문화, 데이터 HR에 관심있는 백엔드 엔지니어 분을 찾습니다!

   🥰 쿼카 (quoka) : 데이터에 기반한 구성원 경험 관리를 돕는 People Operation SaaS

   • 초기 제품: https://www.quoka.in/
   • 연락처: jackie@quoka.in
   • 위치 : 서울 중구 (을지로)
   • 근무형태 : Remote 가능

   저희는 PO, Full-stack Engineer, UX/UI Designer로 이뤄진 팀 입니다.
   현재 HR 분야, 특히 조직문화에 도움을 줄 수 있는 B2B SaaS를 만들고 있습니다 :)
   약간씩 방향을 조정해 가면서 PMF를 찾아가고 있는 중인데요,
   이 여정을 함께하실 백엔드 엔지니어분을 찾습니다!
   우선, 시장과 제품에 관심이 있으시다면 이야기 나눠보고 싶어요!
   사이드 프로젝트로 참여도 가능하며, 협업 방식 등은 차차 이야기 나눠보면서 조정 해보면 좋을 것 같아요.

   저희는 약 2년간 함께 일 하면서, 성공적으로 시장에 서비스를 안착시킨 경험과 실패한 경험을 모두 가지고 있는 재밌는 팀입니다. 함께 즐겁게 일하며 성장할 수 있는 기회가 되면 좋겠습니다 :)

   테크 스택
     * AWS (Elastic Beanstalk, Lambda, RDS(PostgreSQL, Prisma(ORM)), SQS, CloudWatch Event Bridge, Route 53 등..)
     * Node.js
     * GraphQL
     * Apollo-server
     * nexus, nexus-prisma
     * etc.

   디어테일 | 벡엔드 엔지니어 / 프로덕트 디자이너(UX/UI 디자이너) | 서울 광화문역 | https://support.deartail.kr/ | shiba@deartail.kr

   디어테일팀은 반려동물 상품 커머스 플랫폼 “디어테일”을 만들어가는 스타트업입니다.
   • 국내 주요 플랫폼 스타트업 및 버티컬 커머스 경험이 있는 멤버들과 호흡하며, 주도적인 업무수행을 바탕으로 빠르게 학습하고 성장할 수 있습니다.
   • 2021년 11월 정식 서비스 출시 후, 시장에서 빠르게 성장해나가고 있습니다. 출시 2개월만에 사용자수 10만을 넘고, 앱스토어 별점 4.9점을 유지하고 있습니다.
   • 디어테일팀과 함께 1등 반려동물 커머스 플랫폼을 만들어갈 동료를 찾고 있습니다!

   ✔️벡엔드 엔지니어 채용 : https://www.wanted.co.kr/wd/124765
   ✔️프로덕트 디자이너 채용 : https://www.wanted.co.kr/wd/124764

   궁금한게 있으면 뭐든 편하게 메일 주시면 상세하게 알려 드리겠습니다!!

   ./- 닷슬래시대시 | Python 백엔드 서버 개발자 | 서울 신논현역 | https://www.dotslashdash.com | ewcho@dotslashdash.com

   닷슬래시대시는 다양한 라이프스타일을 가진 사람들이 각자의 취향에 따라 자유롭게 콘텐츠를 만들고, 기록할 수 있는 소셜 플랫폼입니다.

   우리의 비전은 퍼스널 브랜딩을 강화하고, 개인(플레이어)이 브랜드가 될 수 있는 플랫폼이 되는 것입니다.
   그리고 브랜드(예: 나이키)는 우리 플랫폼 안에서 활동하는 플레이어와 연결되어 기업과 제품을 홍보하고, 매출을 증대시킬 수 있게 됩니다.

   닷슬래시대시는 텐바이텐과 29CM를 창업하고 성공시킨 이창우 대표님의 세번째 도전입니다.
   설립 초기에 프리 시드로 20억 투자 받았으며, 2021년 하반기에 포레스트벤처스로부터 50억 프리 시리즈 A 투자를 받았습니다.
   앞으로도 더 큰 규모의 투자 유치를 목표로 하고 있고, 지속해서 기술 개발에 투자할 계획입니다.

   앞으로 계속 변화하고 성장하는 서비스를 만들기 위해 자신감 넘치고, 재미있고 신나는 일에 열정적인 분들을 찾습니다!

   채용 절차
     * 서류전형 ＞ 기술 인터뷰(화상 가능) ＞ 코딩 테스트 ＞ 컬처 핏 인터뷰
     * 서류 접수 후 1주일 이내, 합격자에 한해 개별 연락

   제출 서류
     * 이력서 / 경력기술서 / 포트폴리오 등
     * 자신을 어필할 수 있는 Github 계정 또는 블로그 URL (선택)

   주요 업무
   다양한 사람들의 라이프스타일을 공유하고, 개인의 라이프스타일이 브랜드가 될 수 있는 모바일 플랫폼을 개발합니다.
   만들 게 많고, 할 수 있는 것들이 많습니다.
   항상 밝은 분위기에서 최고의 복지인 좋은 동료들과 함께 일해요. 우리

   • 서비스 RESTful API 개발
   • 동영상 업로드, 변환 및 관리와 스트리밍을 위한 서버리스 시스템 구축 및 운영
   • 쿠버네티스 환경(AWS EKS)에서 마이크로서비스 운영과 모니터링
   • MongoDB, MySQL 운영과 관리
   • NoCode 툴을 이용한 어드민 구성과 API 연동
   • 빌드/배포 파이프라인 자동화 (CI/CD)
   • Kafka를 활용한 데이터 스트리밍 처리 및 애플리케이션 연동

   🎮 오피지지 | 프론트엔드 개발자, 백엔드 개발자, 모바일 개발자, PM | 서울 삼성 | Remote 가능 | ⭐ https://www.opgg.team | recruit@op.gg

   오피지지(OP.GG)는 전세계 유저들에게 전에 없던 최고의 게임 플레이 경험을 제공하는 글로벌 No.1 게임 데이터 플랫폼 스타트업입니다.
   우리는 온라인을 통한 진정성 있는 인간적 가치를 경험한 사람들이 모여, 세상에 그 가치를 증명해 나갑니다. 게이머들의 일상을 점령하는 것을 비전으로 하여, 게이머들이 언제 어디서나 가장 먼저 떠올리는 서비스를 만들어나가고 있습니다.

   ✔️Electron Engineer(Desktop App) : https://apply.opgg.team/o/32600
   ✔️Front-end Engineer(Desktop App) : https://apply.opgg.team/o/32663
   ✔️Front-end Engineer(OGT Cell) : https://apply.opgg.team/o/32599
   ✔️Back-end Engineer(LoL Mobile cell) : https://apply.opgg.team/o/32626
   ✔️Back-end Engineer(Peep Cell) : https://apply.opgg.team/o/32660
   ✔️Senior/Junior Product Manager (LoL Web) : https://apply.opgg.team/o/27702
   ✔️Android Engineer : https://apply.opgg.team/o/10964
   ✔️iOS Engineer: https://apply.opgg.team/o/10972

   지금 와이즐리컴퍼니는 소비재 산업의 상식을 뒤집는 혁신을 위해 우리의 일상은 10X 치열하게 일합니다.

   ""매출보다 중요한 것, 10배 더 좋은 고객 경험 만들기, 인재 밀도가 매우 높은 자랑스러운 팀과 함께 하고 싶다면 채용페이지를 살펴봐 주세요!!""

   매출 볼륨을 일으키는 모든 활동을 하는 Growth Product Owner,
   고객 경험 접점을 디자인하는 Experience Designer,
   구매-물류-유통 전반 프로세스를 고도화하는 Supply Chain & Logistics Manager,
   생활용품 전반으로 고객 경험을 확장하기 위해 제품을 개발하는 Product Manager,
   혁신적인 직원 경험을 만들 People Manager 까지
   진정성과 실력을 갖춘 인재분들을 적극적으로 영입 중에 있습니다.

   와이즐리와 함께 고객의 일상을 혁신하고 싶은 분은 채용페이지를 확인 후
   간편 입사지원을 시도해 주세요!

   ▶ 와이즐리 채용포지션 바로가기 https://team.wiselycompany.com/openpositions

   #와이즐리컴퍼니 #wiselycompany

   힙스티지 브랜드가 모여있는 리테일미디어 프리즘(PRIZM)을 만들고 있는 RXC 입니다. 저희가 더 좋은 제품을 만들어가기 위해 프로덕트 디자이너와 프론트엔드 개발자, PO를 모시고 있어요.

   최근 런칭 100일을 맞아 사업적인 레퍼런스들을 정리한 기사가 보도되었는데, 아래 기사에서 저희가 만들어가는 PRIZM의 방향성도 확인하실 수 있습니다.

   https://biz.chosun.com/distribution/channel/…

   브랜드를 발견하는 가치를 만들어가는 새로운 커머스 여정을 만들어갈 좋은 동료들을 찾고 있어요. 아래 채용공고 확인해주시고, 궁금하신 점이나 가볍게 커피챗 하고 싶으신 분들은 부담없이 메일(gerrard@rxc.co.kr)로 먼저 연락주셔도 됩니다!
     * 프로덕트 디자이너 채용공고 : https://rxc.career.greetinghr.com/o/24969
     * 프론트엔드 개발자 채용공고 : https://rxc.career.greetinghr.com/o/24962
     * PO 채용공고 : https://rxc.career.greetinghr.com/o/24959

   [🍋 레몬베이스(Lemonbase) - 회사와 구성원의 건강한 성장을 기술로 실현하는 HR SaaS 서비스]
     * 채용페이지 : https://www.lemonbase.team
     * 채용직군 : 프론트엔드 / 백엔드
     * 위치 : 서울 성수(서울숲/뚝섬역 5분)
     * 근무형태 : Remote 가능

   레몬베이스는 회사의 구성원들이 성장하고 성과를 내는 방식(grow and perform)을 혁신하는 SaaS 서비스입니다. 서비스 런칭 후 매월 50% 이상 빠르게 성장하며, 카카오모빌리티 / 쏘카 / 위메프 / 마이리얼트립 / 매스프레소 / 버킷플레이스 등 수많은 기업들이 이미 레몬베이스와 함께 일하는 방식을 혁신하고 있습니다.

   2020년 12월 국내 시드 라운드로는 매우 드물게 본엔젤스 / 크래프톤 / 카카오벤처스로부터 62억원의 펀딩에 성공함으로써 우리의 가능성을 인정 받기도 했습니다. “회사와 구성원의 건강한 성장“이라는 미션을 가진 레몬베이스와 함께 성장할 미래의 크루를 찾고 있습니다. 레몬베이스의 여정에 동참해 주실 분들의 지원을 기다립니다 :)

   ✔️ 프론트엔드 엔지니어: https://www.lemonbase.team/recruit/fe
   ✔️ 백엔드 엔지니어: https://www.lemonbase.team/recruit/be

   이메일 뉴스레터 서비스 스티비에서 백엔드 엔지니어, 프로덕트 디자이너를 모시고 있어요!

   스티비 | 프론트엔드/백엔드 엔지니어, 프로덕트 디자이너, 프로덕트 매니저 | 서울 중구 소공동(시청역, 을지로입구역 도보 5분) | Remote 가능(부분) | https://stibee.com | recruit@stibee.com

   스티비는 이메일 뉴스레터의 제작과 발송, 마케팅을 돕는 이메일 뉴스레터 서비스입니다. 2019년 서비스 출시 이후 매년 2배 이상 성장해왔고, 우아한형제들, 컬리, 뉴닉, 조선일보, MBC 등 유니콘 기업, 미디어 스타트업, 주요 언론사/방송사에서 스티비를 사용하고 있습니다.

   이메일 뉴스레터 제작 솔루션으로 시작한 스티비는, 이제 이메일 뉴스레터를 기반으로 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어 나가고 있습니다.

   스티비와 함께 이메일 뉴스레터 제작 솔루션을 넘어, 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어나갈 분을 찾고 있습니다. 🙌

   [1] 백엔드 엔지니어(경력)
   [2] 백엔드 엔지니어(신입)
   [3] 프로덕트 디자이너

   🚀 MZ&알파세대의 첫 번째 커리어 파트너, <소다>에서 동료를 찾습니다!

   안녕하세요, 저희는 오프라인 커리어 모임 APP <소다>를 개발하고 있는 seed stage 창업팀입니다.
   <소다>는 IT, 스타트업 사람들이 관심 업계 또는 직군끼리
   오프라인에서 네트워킹할 수 있도록 연결해주는 APP입니다.

   🎯 Target Cohort and Market Size

   밀레니얼과 Z세대, 알파세대에게는 '평생 직장'이라는 개념이 없습니다.
   우리에겐 지금의 '직장'보다 나의 전체 '커리어'가 중요합니다. 이직도 자주 하고, 사이드 프로젝트도 많이 합니다. (90%가 '상시적으로 이직 준비 중'이라고 응답 _2022년 잡코리아)

   안정적인 처우보다 자기주도적이고 자율적인 업무 분위기, 그리고 '나의 성장'을 중시하는 20~30대는
   IT기업과 스타트업에 유례 없는 관심을 보이고 있습니다. (75%가 스타트업 이직을 희망 _2021년 잡코리아)

   🔍 Pain Point

   그런데 급변하는 IT/스타트업 생태계 특성상, 정해져있는 Career Path가 없습니다.
   원티드, 리멤버 같은 채용 플랫폼이나 퍼블리, 서핏 같은 콘텐츠 플랫폼에서 온라인으로 얻는 인사이트에는 한계가 있습니다.
   내가 궁금한 회사, 직군, 업계에 관한 더 깊이있는 정보가 필요한 상황입니다.

   🦄 What is SODA ?

   소다는 내가 관심있는 회사, 직군, 업계 사람들을 오프라인에서 만나서
   궁금한 점을 물어보고 깊이있는 정보를 얻도록 연결해드리는 오프라인 커리어 모임 매칭 서비스입니다. (개발팀 있음, 8월 중 app 출시 예정)

   소다에서는 자신이 원하는 대로 업계, 직군 내 커리어 네트워킹 모임을 만들 수 있습니다.
   내가 원하는 회사, 직군, 업계 사람들을 매칭시켜 드리는 서비스도 런칭할 예정입니다.
   커리어 인플루언서, 스타트업 C레벨, 벤처캐피털 투자자 등과 식사를 하며 네트워킹할 수 있는 서비스도 준비하고 있습니다.

   🙋 JOB DESCRIPTION

   소다는 책임과 권한을 갖고 소다 개발을 진두지휘할 CTO를 찾고 있습니다!

   이런 일을 바로 해주셨으면 좋겠어요
   ✔️ 주요 의사 결정 시 기술자로서 참여 및 조언
   ✔️ 개발팀 리드하며 실무도 일부 병행 (현재 FE 1명, BE 1명, 풀스택 프리랜서 1명 있음)
   ✔️ 업무명세, 일정 관리, 개발자 매니지먼트

   이런 분을 우대해요
   ✔️ 스타트업 CTO 또는 개발리드 경험이 있는 분
   ✔️ 5~7년차 이상 풀스택 개발자
   ✔️ 개발 능력에 더해 커뮤니케이션 및 설명 능력이 우수한 분

   현재 사용 기술 및 인프라 요약

frontend

  user client

     * Flutter (Android / iOS / Web)

  restaurant client

     * Flutter (Android / iOS)

backend

  api server

     * Node.js
     * express.js
     * Sequelize
     * dockerized
     * aws ec2

  database

     * MariaDB
     * aws RDS

  task worker

     * Node.js
     * dockerized
     * aws ec2

  static files

     * aws s3

   노션 링크에서 더 자세한 내용을 확인해주세요! : https://han.gl/ocXSh

이메일을 재창조할 CTO 또는 디자이너(CPO)를 찾습니다!

   안녕하세요, '비움 - 온전한 당신의 이메일'을 만드는 메이커 다운입니다.
   <비움>은 이메일을 혁신해 더 많은 사람들이 복잡함을 비우고 더 많은 일들을 해낼 수 있도록 돕기 위한 <끝내주게 좋은 이메일>을 목표로 생각하고 있습니다.

   저는 Notion이라는 툴이 <끝내주게 좋은 워크스페이스>라고 생각하는데요, <비움>은 이메일의 영역에서 그런 좋음을 구현하면 <당장 쓰고 싶다>고 생각해 비움을 기획하게 되었습니다

   메이커가 쓴 글: https://community.applepie.pro/
   메이커 (다운) 소개: https://iam.nyanye.com/
   그래티래빗 소개: https://iam.nyanye.com/gratirabbit
   찾고있는 코파운더: 세상에 전하고 싶은 가치와 간절함이 있으신 분들 중, 아래 둘 중 하나에 해당하시는 분.
   프론트엔드 개발 잘하시는 분 (디자인을 유지보수 가능하고 쾌적한 웹 또는 앱 코드로 만들어낼 수 있는 역량)
   고객을 사랑하고 디자인 감각 및 사고력이 좋으신 분
   찾고있는 스킬셋: 프론트엔드 개발 (ex: Next.js, Tailwind CSS, ...) 또는 프로덕트 디자인
   파운더 다운 소개: Data Science 경력 만 5년, MVP 빌딩 5회, 매일매일 글써서 30일 30개의 글쓰기 등 꾸준함과 부지런함, 고객을 만나고 고객의 문제를 해결하는 역량 보유

   다양한 역량을 가진 많은 분들과 커피챗 등 많은 이야기를 나눠보고 싶어요!
   오픈카톡: https://open.kakao.com/o/sSRjW6pe
   감사합니다 🙏

   ‘앤틀러 코리아 프로그램에 참가중’ 입니다! 함께 액셀러레이팅 프로그램에 참가해 더 많은 창업자와 만나고 함께 멋진 프로덕트를 만들 분이면 더 좋습니다 ㅎㅎ

   휴먼스케이프 | 소프트웨어 엔지니어 | 서울 강남 (봉은사역 근처) | 재택, 재실근무 중 자유롭게 가능 | https://humanscape.io/ | recruit@humanscape.io

   [회사 소개]
   휴먼스케이프는 환자와 세상을 연결함으로써 질병으로 고통받는 사람이 건강한 일상을 향유할 수 있도록 힘쓰고 있는 IT 헬스케어 스타트업입니다. 희귀질환 환자들의 건강과 삶을 더 낫게 할 레어노트, 국내 산모 중 2/3가 사용하는 임신/육아 앱 마미톡을 만들고 있습니다.

   [기술 스택]
   프론트엔드는 주로 React, 백엔드는 주로 Node.js를 사용하고 있습니다.
   이외 저희가 사용중인 기술들은 StackShare에 정리해두고 있습니다.

   [채용 공고]
     * 전체 보기
     * [레어노트] Senior Software Engineer
     * [레어노트] Software Engineer (산업기능요원 전직/보충역)
     * [마미톡] Software Engineer
     * [마미톡] Android/iOS Engineer
     * [마미톡] DesignOps Engineer

   궁금한 점이 있으시면 언제나 recruit@humanscape.io 로 편하게 연락 주세요!

   마들렌메모리🧁 | 기획자 / 디자이너 / 풀스택개발자 / 커머스 MD | 위례신도시 | Remote 협의 | https://the-relay.kr/ | contact@mmemory.kr
릴레이는 중고사업을 서비스 형태로 제공하는 국내 최초의 RaaS입니다.

   이미 북미와 유럽에는 릴레이와 유사한 스타트업들이 '나이키', ‘리바이스’, ’파타고니아’, ‘룰루레몬' ‘대형 브랜드와 협력하며 크게 성장하고 있습니다.
   릴레이는 시장의 선구자로서 국내 유수의 브랜드들과 협력하여 시장을 혁신하고 소비자의 중고거래 경험을 완전히 다른 차원으로 개선할 것입니다.

   “마들렌메모리는 소규모 초기 스타트업입니다.”

   마들렌메모리는 초기 스타트업이며 작은 조직입니다.
   초기에 합류하시는 팀원 분들께는 회사의 성장에 따라 충분한 보상받을 수 있도록 스톡옵션을 적극적으로 지급하고 있습니다.
   회사를 내 손으로 성장시키는 성취감 뿐만 아니라 기여에 대한 보상을 함께 얻고자 하시는 분들의 적극적인 지원을 바랍니다!

   저희에 대해 더 궁금하시다면 아래 링크로 찾아와주세요!
   마들렌메모리 채용공고!

   에버온 | 프론트, 백앤드 개발자 | 서울 을지로 3가 | Remote 불가 | https://everon.co.kr | moongg@everon.co.kr

   에버온은 전기차 충전서비스 전문 기업으로 전국에 1.5만여기의 충전기를 설치/운영하고 있으며 전기차의 보급과 함께 급속도로 성장중입니다.
   기존 시스템을 차세대 시스템으로 변경하기 위해 실력있으신 개발자분들을 찾고 있습니다.
   많은 지원 부탁드립니다.

   Front-end (0명)
    1. 업무내용

     * 웹, 앱 개발 및 운영관리

    2. 기술 요건

     * React 등 SPA 웹 어플리케이션 개발 경험자, 실무경력 2년차 이상 또는 그에 준하는 역량
     * 크로스 브라우저 반응형 웹 앱 개발 경험

    3. 개발 환경

     * HTML5, CSS3, JavaScript (TypeScript), React (React Native)

   Back-end (0명)
    1. 업무내용

     * 전기차 충전기 관제 서버 개발 및 운영관리

    2. 기술 요건

     * 웹 어플리케이션 개발, 운영 경험자로서 실무 경력 3년차 이상 또는 그에 준하는 역량
     * MVC Framework 기반의 웹 서비스 또는 RESTful API 개발 경험

    3. 개발 환경

     * Java, Spring (Spring Boot), Oracle PL/SQL

   🎧 소리하는 회사! 가우디오랩에서 소중한 가우딘을 모십니다!
   🎧 강남구 삼성역 인근 / 자율근무 / careers@gaudiolab.com
   🎧 채용페이지는 여기 [ https://gaudiolab.com/ko/careers/ ]

   🎧 어서오세요!

   서비스 백엔드 소프트웨어 엔지니어
   플랫폼 백엔드 소프트웨어 엔지니어
   모바일 SDK 소프트웨어 엔지니어
   빅데이터 엔지니어
   AI Scientist - Source Separation, Audio Synthesis 각각

   🎧 가우디오랩을 소개해요
   가우디오랩은 세계적으로 손꼽히는 오디오 기술을 통해, 여러분께서 전혀 경험해 보지 못했던 새로운 차원의 소리 경험을 제공하는 회사입니다. 메타버스의 완성을 담당하는 스페이셜 오디오(공간음향)와 AI 오디오 기술의 가장 첨단, 그 이상의 경지에서 비교 불가한 오디오 기술의 초격차를 구현해내고 있습니다.

   가우디오랩에서 매일 창조되는 새로운 소리들은 네이버, 플로, 벅스뮤직 등 국내외 유수의 서비스에 적용되어, 여러분의 귀에 가닿고 있습니다. 이미 매일 약 2천만명의 사용자가 가우디오랩의 소리기술을 경험하고 있다는 사실! 가우디오랩과 함께 폭발적으로 성장하며 스케일업을 만들어나갈 미래 가우딘을 정중히 모시고자 합니다.

   데이터분석가는 모집 안하시나요~

   비랩트 | 프론트엔드/백엔드 개발자 | 서울 신논현 | Remote 불가 | https://www.berapt.com | people@berapt.com

   BeRapt는

   “세상 사람들이 우리의 서비스에 빠져들게 만들자”는 모토로 이름지어진 신생 IT 스타트업 입니다. 회사는 신생이지만 멤버들은 카카오, 레진엔터테인먼트, 매스프레소 등 업계 경력 평균 10년 이상의 경력자들로 맨파워는 소규모가 아닙니다.

   현재는 운영 스트레스 없이 찐팬들의 후원을 받을 수 있는 팬 커뮤니티 플랫폼 - Shoulder를 열심히 개발하고 있습니다.

   “창작자 경제”라는 새로운 글로벌 산업 흐름에 맞추어, 빠르게 성장하고 있는 국내 창작자 경제 시장에 안착하는 미션을 수행하고 있습니다. 떠오르는 신규 시장인 만큼 다양한 도전 과제가 나타날 것으로 예상되어 두근두근한 마음입니다. 이런 신나는 모험의 세계를 함께 헤쳐나갈 팀 크루를 찾습니다.

   자세한 공고는 요기를 참고해주세요! --> 데카콘 로켓 5,4,3,2,점화!

   💎 AB180(에이비일팔공) | 소프트웨어 엔지니어 | 서울 서초(강남역 1분) | Remote 가능(부분) | https://hiring.abrge.app/geeknews | hr@ab180.co

  초당 10만 건의 트래픽 처리. 월 2,000만 MAU.

  300억 이벤트 수집 및 분석. 실시간 대규모 데이터 분석 및 성과 극대화를 위한 머신러닝.

   유니콘부터 대기업까지 사용하는 프로덕트를 만들며 함께 성장하실 분들을 찾고 있어요!
     * AB180은 'Airbridge'라는, 사용자 행동과 마케팅 성과를 측정, 분석해서 더 좋은 퍼포먼스를 낼 수 있도록 돕는 도구를 만들고 있어요.
     * 업계 최초 Facebook 비즈니스 파트너 선정: 모바일 측정(MTA), 멀티터치 기여도 분석(MTA)
     * 오늘의집, GS SHOP, 삼성증권, 퀸잇 등 많은 스타트업에서 사용중
     * 실시간 대규모 데이터 처리 및 분석, 시각화 등을 경험할 수 있음
     * 기술 블로그, Knowledge Transfer 등 지식 공유 문화

   전직군 채용중 / 저희에 대해 궁금하시다면 아래의 공고를 확인해주세요 :)

   [1] Backend Engineer - Data Pipeline ↗
   [2] Backend Engineer - Data Serving API ↗
   [3] Backend Engineer - Platform API ↗
   [4] Backend Engineer - Query Engine ↗
   [5] Data Engineer ↗
   [6] DevOps Engineer ↗
   [7] SDK Engineer - Android ↗
   [8] SDK Engineer - iOS ↗
   [9] SDK Engineer - Web ↗
   [10] Frontend Engineer ↗

    AB180 자세히 알아보기

     * 개발자들이 선호하는 좋은 개발 문화 (12개 항목 중 11개!) ↗
     * 생산성 있는 Review 문화가 되기까지 ↗
     * 에어브릿지, 업계 최초 MMP & MTA 페이스북 비즈니스 파트너 선정 ↗

   풀타임/파트타임 인지도 알 수 있으면 좋을 것 같아요.

   뉴스젤리 | 프론트엔드 개발자 | 서울 성동구 (서울숲역 바로 앞) | Remote 불가 | https://newsjel.ly/ | hr@newsjel.ly

   국내 No.1 데이터 시각화 전문가 그룹, 뉴스젤리

   뉴스젤리는 국내 데이터 시각화 분야의 독보적인 전문성을 갖춘 데이터 시각화 전문 기업입니다.
   서울시, 한국방송광고진흥공사(KOBACO), 한국개발연구원(KDI), 아모레퍼시픽, 현대로템, 중앙일보 등 국내 유수의 공공기관 및 기업, 언론사와 프로젝트를 진행하였으며, 자체 개발한 웹 기반 데이터 시각화 솔루션 DAISY와 시각화 관련 특허 15건을 보유하고 있습니다.
   데이터 시각화 전문성을 바탕으로 데이터 시각화 대시보드 구축, 데이터 시각화 컨설팅 등 프로젝트를 진행하며 누구나 자유롭게 데이터를 활용할 수 있는 경험을 제공합니다.

   2022년 뉴스젤리 채용

   지난 2020년 하반기 서울숲에 새롭게 자리를 잡은 뉴스젤리는 핵심 구성원을 중심으로 대대적인 조직 개편 등 더 나은 뉴스젤리로 거듭나기 위한 변화를 시작하였습니다.
   더 나은 뉴스젤리 안에서 데이터 시각화의 가치를 경험하고 더 많은 사람에게 가치를 전할 ‘전문가‘를 찾습니다.

   [1] 웹 프론트엔드 개발자 : https://302.notion.site/2022-2069acec1ce5468c975c0975d7360c3b
"
"https://news.hada.io/topic?id=7153","애플 코드 서명 및 공증의 완전한 오픈소스 구현체 완성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     애플 코드 서명 및 공증의 완전한 오픈소스 구현체 완성

     * Rust 만으로 구현되어 꼭 애플 플랫폼에서 구동할 필요 없음 (리눅스,윈도우,맥 어디서든 가능)
     * Mach-O 바이너리 서명 가능(애플OS의 실행파일 포맷)
     * .app 디렉토리 번들, XAR 아카이브, .pkg 인스톨러, DMG 디스크 이미지의 서명/공증/합치기(스테이플링) 가능
     * apple-codesign Crate와 rcodesign CLI 제공

   기존 애플 생태계의 소프트웨어가 다른 플랫폼에서 구동될 수 있다는 걸로 읽으면 될까요?

   바이너리에 대한 codesign - 즉 이건 누가 언제 만들었음을 증명함 - 하는 작업을 어디서든 할 수 있게 해주니, CI/CD 프로세스가 리눅스에서 돌아도 된다는 점에서 큰 의미가 있을 것 같습니다.
"
"https://news.hada.io/topic?id=7154","Reforge - Trying To Reduce Churn Rate? Avoid These 3 Common Myths 번역","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Reforge - Trying To Reduce Churn Rate? Avoid These 3 Common Myths 번역

   Reforge에서 나온 [Trying To Reduce Churn Rate? Avoid These 3 Common Myths]라는 글을 대략적으로 요약하고 번역했습니다.

   그로스 공부를 하신분에게 이탈율을 낮추고 긍정적인 고객경험을 제공해야 한다는 이야기는 당연한 이야기 같이 들리기도 합니다. 마치 몸에 병이 없고, 건강한 음식과 주기적인 운동을 통해 자기관리를 해야 몸이 좋다고 하듯 말입니다.
   그런데 부정적인 것을 없애려고 노력하기보다 긍정적인것에 집중하라는 말은 마치 긍정심리학의 철학을 보는듯 관점이 재미있었습니다.

   다만 이 글을 읽으면서 이런 전술을 실행하고 싶다면, 전술을 담당하는 그로스 매니저 차원이 아니라 전략수준에서 성과 지표를 설계하고 결정할 수 있는 권한을 가진 C레벨의 도움이 필요하다는 생각을 했습니다.

   사실 그로스&데이터분석이라는 거 자체가 C레벨의 데이터&그로스에 대한 이해와 조직적인 지원 없이는 할 수가 없는거라고 생각하기도 하구요.

   데이터분석가나 그로스매니저만 있다고 해서 휘리릭 뽕 하고 예쁜 결과가 나오길 기대하는 건 마치 돈도 안줬는데 하늘에서 빵이 떨어지길 바라는 것과 비슷하다고 생각해요.

   분석가들과 그로스 매니저들이 조금 더 행복해졌음 좋겠네요.
"
"https://news.hada.io/topic?id=7033","ChromeOS Flex 정식 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ChromeOS Flex 정식 릴리즈

   오래된 노트북이나 맥북에 설치 가능한 chromeos flex

flex os

   https://chromeenterprise.google/os/chromeosflex/

인증 기기

   https://support.google.com/chromeosflex/answer/11513094

   #설치
   https://support.google.com/chromeosflex/answer/11552529
"
"https://news.hada.io/topic?id=7110","FauxPilot - 오픈소스 GitHub CoPilot 서버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FauxPilot - 오픈소스 GitHub CoPilot 서버

     * 로컬에서 호스트 되는 CoPilot을 만들기 위한 시도
     * SalesForce CodeGen 모델 사용 : NVidia Triton Inference Server + FasterTransformaer Backend
     * 요구사항 : Docker , docker-compose >= 1.28, NVIDIA GPU(모델을 돌리기에 충분한 VRAM 필요)
"
"https://news.hada.io/topic?id=7075","Rust로 6개 OS에서 실행되는 APE 실행파일 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Rust로 6개 OS에서 실행되는 APE 실행파일 만들기

     “Rust is Actually Portable”

     * Cosmopolitan Libc 를 이용해서 APE(Actually Portable Executable) 실행파일을 생성
     * 한개의 바이너리가 윈/맥/리눅스/FreeBSD/NetBSD/OpenBSD 등에서 동작

   유니버설하게 랜섬웨어 작성하기 좋겠네요

   Cosmopolitan 과 APE(Actually Portable Executable) 에 대해서는 아래 링크들을 참고하세요
     * Cosmopolitan libc - Build-Once Run-Anywhere C
     * Cosmopolitan v1.0 공개
"
"https://news.hada.io/topic?id=7127","Weights & Biases - 머신러닝 실험 시각화 & 트래킹 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Weights & Biases - 머신러닝 실험 시각화 & 트래킹 도구

     * ""The developer-first ‍MLOps platform""
     * 머신러닝 파이프라인의 데이터셋 부터 프로덕션 모델까지 모든 부분을 시각화하고 추적화 하는 도구
     * 대시보드에서 실시간으로 결과를 시각화 하여 회귀 모델을 빠르게 식별
     * 데이터셋과 모델 버저닝
     * 트레이닝 실행중 사용된 Hyper-Parameter 저장 및 최적화
     * 트레이닝 실행 결과들을 검색,비교,시각화
     * 각 실행간 시스템 사용양 메트릭 분석
     * 팀원들과 협업 가능
     * 예전 결과를 재현 가능
     * Parameter Sweep 실행
     * 시험 기록을 영구적으로 저장

   Selfhosted 용으로 이와 비슷한 Sacred가 있습니다. Sacred api가 WB랑 호환되는 것으로 압니다. Dashboard는 Omniboard를 많이써요.

   이미 꽤 유명한 도구이긴 한데, 긱뉴스에서는 소개한 적이 없어서 올려봅니다.
   공식 사이트에도 꽤 많은 한글 문서들이 번역되어 올라오고 있습니다.

   https://wandb.ai/wandb_fc/korean/reportlist
"
"https://news.hada.io/topic?id=7047","GeekNews 3주년 회고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GeekNews 3주년 회고

   긱뉴스는 해외와 국내의 다양한 기술뉴스들을 보다 쉽게 접할 수 있는 사이트를 만들어서, 누구든지 제목과 요약만 계속 보면 업계와 기술의 흐름을 놓치지 않도록 도와주는 사이트가 되었으면 해서 시작했습니다. 3주년 회고를 적어봤습니다.
     * 슬랙/잔디/팀스/디스코드 봇 : 1600개 설치
     * 뉴스레터 구독자 4900명, 트위터 팔로워 11600명
     * Ask 와 Show 공개
     * 마크다운 지원 시작
     * 지난 1년간 가장 많이 즐겨찾기 된 글 Top 10
     * 답변이 가장 많이 달린 질문들 Top 11

   요즘엔 저 외에도 많은 분들이 뉴스를 올려주셔서 정말 감사하게 보고 있습니다. 댓글도 예전에 비해 활발해 진 것 같고요. 저는 '하루도 빠짐없이 뉴스를 올려보자'를 목표로 하고 있는데요. 오픈후 3년간 매일 올려서 현재까지 총 5606개 글을 올렸네요. 이젠 좀 부담이 되기도 합니다만.. 처음에 시작할 때 10년이 목표였으니 7년 더 달려보겠습니다.

   상세 내용은 위 링크의 긱뉴스 블로그 포스트에 적어두었습니다. 감사합니다!

   즐겁게 읽고 있습니다. 긱뉴스 화이팅~^^

   3주년 축하드립니다. 그리고 감사합니다.
   앞으로도 쭉 열렬히 함께 할게요!

   항상 잘 보고있습니다. 감사합니다!

   월요일이 마냥 싫지 않은 이유.

   늘 감사합니다!

   3주년 축하드립니다. 응원합니다--!

   축하드려요~ 계속 응원합니다.

   멋지세요.

   3주년 축하드립니다.
   매일 시각이 넓어지는 듯 해서 항상 감사드리고 있습니다.

   덕분에 매일 유용한 정보들 접하고 있습니다. 3주년 축하드립니다!

   3주년 축하드립니다.
   정착할 곳을 마련해주셔서 감사합니다!

   시야를 넓이는데 긱뉴스가 큰 도움이 되었습니다. 감사합니다!!

   3주년 축하드립니다.

   축하드립니다. 그리고 고맙습니다!!!

   3주년 축하드려요!! 항상 잘 보고 있습니다 감사합니다!

   3주년 축하드립니다.
   눈팅만 하는 입장에서 좋은 글 요약해주셔서
   감사하게 잘 보고 있습니다.
   다시한번 노력에 감사해요...

   3주년 축하드립니다. 저에 아침은 항상 긱뉴스 들어와 보는걸로 시작됩니다. 덕분에 편하게 잘 이용하고 있습니다. 감사합니다.

   3주년 축하드립니다. 앞으로도 계속 응원합니다!

   3주년 축하드려요. 이 사이트를 알게된 게 저에겐 큰 선물입니다. 매일 시야를 넓혀주셔서 감사해요.

   이직준비 할때 긱뉴스를 접했는데
   그때 좋은 영향을 많이 받았습니다. 항상 고생이 많으십니다

   3주년 축하드립니다!

   3주년 축하드립니다. 항상 잘 보고 있습니다!

   3주년 축하드려요! 이 서비스는 제 루틴과 커리어를 바꿔주었습니다 🥳

   3주년 축하합니다. 항상 잘 보고 있습니다. 감사합니다.

   긱뉴스 사랑합니다. 좋은 사이트 만들어주셔서 정말로 감사해요.

   좋은 사이트 운영 감사합니다.
   제가 잘 몰라서 그러는데, 슬랙 등 봇 1600개 설치가 무슨 의미인가요?

   슬랙 이나 잔디등의 커뮤니케이션 도구에 긱뉴스 봇을 설치하시면 새로 올라오는 뉴스를 편하게 받아보실수 있습니다.

   요 링크를 참고해주세요!! https://news.hada.io/blog/bots

   항상 고맙게 잘 보고 있습니다. 감사합니다

   i love you

   매일 아침 습관적으로 오고 있습니다
   항상 양질의 정보 감사드립니다 (__)

   너무 잘 보고있습니다.
   누구나 기술 정보를 받아보는 통로를 몇 군데 정도는 가지고 있었을텐데, 긱뉴스로 통일했어요.
   스타트업 정보도 많이 올려주셔서 절로 관심이 생기네요. 감사합니다~!

   3년간 긱뉴스가 있어서 정말 도움이 되었습니다. 앞으로도 잘 부탁드립니다.

   3주년 축하드립니다. 매번 잘 보고 있습니다.
   감사합니다. 그리고 앞으로도 잘 부탁드립니다.

   3주년 축하합니다! 노고에 감사드립니다

   3주년 축하드립니다.

   3주년 축하드립니다! 지속성장 유지하셔서 10년 채우시길 바라겠습니다!!

   축하드려요~

   3주년 축하드립니다!
   구루의 기술뉴스부터 GeekNews 까지 언제나 좋은 정보 잘 보고 있습니다. :)
   앞으로도 잘 부탁드립니다!!

   3주년 정말 축하드립니다!
   지인을 통해 알게 됐는데 이렇게 자주 들어오게 될 줄은 몰랐네요.
   항상 흥미로운 글들을 찾아 올려주셔서 감사합니다.
   앞으로도 잘 부탁 드립니다.ㅎㅎ 응원합니다!

   3주년 축하드립니다!
   30주년 300주년 기대합니다!

   항상 잘 보고 있습니다.
   감사합니다.
   텔레그램에도 393명의 구독자가 있더군요(오피셜은 아니지만...)

   매번 잘 읽고 있습니다. 응원합니다!

   감사합니다. 응원합니다. :-)

   흥미로운 정보 편하게 볼 수 있는 자리가 생겨 항상 감사히 생각하고 있습니다.
   3주년 축하드립니다!

   3주년 축하드립니다!
   감사히 보고 있습니다.

   3주년 축하드려요.
   제가 가장 많이 들어오는 사이트 중 하나입니다.
   응원합니다!

   3주년 축하드립니다. 덕분에 좋은 정보 많이 받아갑니다.

   축하드려요~

   3주년 축하드립니다! 항상 아침을 긱뉴스로 시작하는데 너무 좋아요! XD

   유익한 정보 잘 보고 있습니다. 3주년 축하 드립니다.~

   3주년 축하드립니다!

   축하드립니다 :)
"
"https://news.hada.io/topic?id=7054","Astropos JS - 터치 친화적 3D Parallax 호버 효과 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Astropos JS - 터치 친화적 3D Parallax 호버 효과 라이브러리

     * 2KB, 의존성 없음
     * Plain JS, React, Vue, Svelte 등에서 사용 가능
     * Pointer Events 사용하여 마우스/터치스크린 동시 지원
     * 다양한 설정 지원
     * 여러개의 개체를 같이 움직이기 지원
"
"https://news.hada.io/topic?id=7142","Show GN: 10만 전자: 쿠팡에서 10만원 넘는 전자제품 가격을 추적합니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 10만 전자: 쿠팡에서 10만원 넘는 전자제품 가격을 추적합니다.

   2019년에 파이썬으로 만든 비슷한 웹사이트를 올린적이 있는데요. 이번에 solidjs로 다시 만들어보았습니다. 검색기능까지 추가하고도 전보다 더 빠르게 만들었네요. 개발도구가 그만큼 편해진 덕분입니다.

   이번엔 서버리스 컴퓨팅만으로 작업한 것이 도전 중 하나였고요. 작은 개인프로젝트에서는 서버리스로 충분하다고 느꼈습니다.

   2022-08-13 업데이트: 목록에서 바로 상품페이지로 이동하던 것을 목록 눌렀을때 상세 페이지가 나오도록 수정했습니다. 그 페이지의 링크를 공유하면 소셜미디어에서 미리보기도 만들어줍니다.

   https://junja10.com/d/64ynKB-DUoyn5-18LMV7i

   ㅋㅋㅋ 이름이 재밌네요

   S전자가 생각나는 이름이내요. 10만 가즈아...!

   오.. 상품, 가격 데이터는 어디에 저장하고 계신가요?

   어떻게 그 많은 상품정보를 서버리스 컴퓨팅으로만 하나요?

   홈 화면에서 할인률 순으로 쭉 보고싶은데, 일정 갯수만큼만 보여지고 더 볼 순 없는거죠?

   맞습니다. 길게 출력하는만큼 비용이라서요. 사용량 보고 늘리거나 다르게 보여줄 방법을 생각해보려고 합니다.

   멋있습니다 영감이 되네요 좋은 프로젝트 감사합니다

   와… 쿠팡 상품을 매일 다 저장하려면 데이터가 엄청 많을 것 같은데 저장이 가능한가요

   깔끔해서 좋아요.
   검색기능에는 들어가는 라이브러리나 오픈소스가 있나요?

   우왕 흥미롭네요.
   항상 만드시는 것들 재미나게 보고 있습니다!

   고맙습니다!

   와... 이거 홍보 잘 되면 어필레이트 수입 꽤 나오시겠네요 멋집니다.

   지난번에도 그렇고 이번에 올렸을때도 그렇게 '와~'하는 반응은 없네요 ㅋㅋ
"
"https://news.hada.io/topic?id=7035","트위터에서 540만개 전화/이메일 등의 계정 정보 유출되어 $30k에 판매중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               트위터에서 540만개 전화/이메일 등의 계정 정보 유출되어 $30k에 판매중

     * 공격자가 전화번호/이메일주소를 통해서 그에 연결된 트위터 계정을 알 수 있는 보안 허점
       → 사용자가 보안 설정에서 전화번호/이메일을 숨겼더라도 가능
     * 1월에 발견되어 패치되었으나, 이 허점을 이용하여 이미 데이터는 유출 되었음
     * 판매자는 연예인, 회사, 유명인 계정들이 포함되어 있다고 주장
"
"https://news.hada.io/topic?id=7098","First Pull Request • What was the first pull request you sent on GitHub?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                First Pull Request • What was the first pull request you sent on GitHub?

   매해 벌어지는 연례행사 같은데 여러분의 첫 PR 을 찾아 줍니다.
"
"https://news.hada.io/topic?id=7129","ASUS Zenbook 17 Fold OLED 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ASUS Zenbook 17 Fold OLED 발표

     * 17.3""에서 12.5""로 접히는 터치스크린을 가진 세계 최초의 폴더블 노트북
     * 8.7mm / 1.5kg
     * Dolby Vision & PANTONE 인증 NanoEdge 스크린
     * 탈착가능한 ErgoSense 블루투스 키보드&터치패드
     * 인텔 12세대 i7 CPU + Iris Xe
     * Dolby Atmos 하만카돈 쿼드스피커
     * 5MP AI Webcam + HD IR 카메라(로그인)
     * 2560x1920(17.3"", 4:3) 1920x1280(12.5"", 3:2)
     * 2 x Thunderbolt 4
"
"https://news.hada.io/topic?id=7140","당신은 아마도 잘못된 사전을 사용하고 있을 겁니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      당신은 아마도 잘못된 사전을 사용하고 있을 겁니다

     * 보통 사전은 모르거나 확신하지 못하는 단어를 검색할 때 사용
     * example, sport, magic 같이 잘 아는 단어들은 보지 않음
     * 하지만, 맥에 내장된 Oxford 사전에서 위 단어들의 설명은 매우 건조하고, 기능적이며 관료적임
     * 이것은 사전을 유틸리티로만 보이게 함
       ⇨ ""좋은 것을 채굴하거나 탐색하고 맛보는 곳""이 아니라
     * 더 안 좋은 것은 '단어' 자체가 '정의'의 성격을 띄고 있음
     * 유쾌한 의미의 'fustian' 이라는 단어를 검색해 보면 ""pompous or pretentious speech or writing"" (거만하거나 가식적인, 그럴듯한, 번드르르르한) 라고 설명하고 있음
     * 이 정의는 기본적으로 틀렸음. 이것은 범죄임. 이 사전은 단어만 살고, 글은 살지 못하는 곳임
     * New Oxford 만 그런게 아님. 구글 사전도, 최신 Merriam-Webster 도, dictionary.com 도 다 똑같음
     * 그들은 모두 읽기 힘들고, 언어에 대한 즐거움이 없음

John McPhee의 비밀 무기

     * 미국의 위대한 넌픽션 작가인 존 맥피(저널리스트 이자 퓰리처상 수상 작가)가 뉴요커에 쓴 ""Draft #4"" 에세이 에서

     ""Draft #4""는 고된 창작이 끝난 후의 초안이며, 이제 남은 일은 언어를 강화하고 구식 단어와 문구를 '노래하는 것'으로 바꾸는 일만 남았다고 얘기함
     * 그 일은 ""잘못된 단어""와 ""다른 의도를 가진 것처럼 보일 수 있는 단어""를 골라내고, 사전을 통해서 정의를 확인하고, 정확한 다른 단어로 교체하는 것
     * McPhee 가 사용하는 사전을 얘기하지는 않았지만, 그가 설명한 단어들에서 어떤 사전인지를 알아냄
       (에세이에 있는 내용들을 통해서 설명이 길지만 번역하지 않았습니다. 원문을 참고하세요 ^^)
     * 그가 사용하는 사전에 가장 가까운 건 ""Webster’s Revised Unabridged Dictionary (1913 + 1828)""

The invention of American English : 미국식 영어의 발명

     * Noah Webster는 ""미국 학문과 교육의 아버지""
     * 그는 미국식 영어의 개념을 거의 혼자서 발명했음
          + 미국의 초등학생을 위한 3권으로 된 ""Grammatical Institute of the English Language"" 책을 씀
            → Speller, Grammar, Reader
          + 그 책의 표지가 파란색이어서 ""Blue-backed speller"" 라고 불림
          + 1890년까지 6천만부가 팔림
     * 하지만, 그의 가장 야심찬 프로젝트는 1807년부터 쓰기 시작한 ""An American Dictionary of the English Language"" 사전
          + 그는 이 사전이 포괄적이고 권위있기를 바랬음
          + 혼자 앉아서 자신의 언어를 Capture 하는걸 목표로 하는 사람을 상상해보라
     * 요즘의 사전들은 이런 방식으로 쓰이지(Write) 않음
          + 실제로는 ""Written"" 이라고 얘기하기도 뭐함
          + 큰 팀에 의해 ""구축됨(built)"". art 라기 보다는 engineering
          + 이런 사전들을 읽어 보면, 그 단어의 본질을 단어로 표현하기 위해 혼자 책상에서 일하는 사람이 있다는 느낌이 들지 않음
          + 즉, 좋은 소설에서 처럼 페이지 반대편에 당신처럼 살아있는 또 다른 마음이 있다는 느낌을 받지 못함
     * Webster의 사전은 완성하는데 26년이 걸렸음
     * 총 7만단어를 수록 했음. 모든 것을 혼자 작성했고, 어원(etymologies)을 포함하여 28개 언어를 배워야 했음
       → 고대 영어, 고딕, 독일어, 그리스어, 라틴어, 이탈리아어, 스페인어, 네덜란드어, 웨일스어, 러시아어, 아람어, 페르시아어, 아랍어 및 산스크리트어
     * 그는 프로젝트 자금을 조달하기 위해 부채에 시달렸고, 집을 담보로 대출까지 받았음
     * 그의 생전에 그 사전은 거의 팔리지 않았고, 인정을 받지 못했음
     * 오늘날은 그의 이름 Webster는 사전과 거의 동의어가 되어서, 일반 명칭(Generic Tradmark)이 되었음
       → 즉, Webster랑 거의 상관없는 사전도 이름에 Webster를 붙일수 있음
       → Merriam-Webster 사전은 Webster 사전에서 파생되었지만, 너무 많이 개정되어서 가짜들보다도 거의 유사성이 없음. 즉, 앞에서 얘기한 ""잘못된"" 사전 중 하나임
     * 1828년 버전과 1847년 개정본, 1864년 Unabridged 버전, 1890/1900의 인터내셔녈 버전, 1909년의 새 인터내셔널 버전, the 1913등의 판본이 있음
     * 왜 연설의 시작을 ""Webster는 X를 이렇게 정의합니다""(“Webster’s defines X as…”) 라고 하는게 클리셰가 되었냐면,

     그의 사전에 있는 정의와 설명은 실제로 당신의 말에 큰 힘을 실어줄 것 같기 때문
     실제로 그 설명은 당신이 스스로 생각해 낼 수 있는 모든 것을 능가함
     * flash 에 대한 Webster의 용례

     … Flashing differs from exploding or disploding in not being accompanied with a loud report. To glisten, or glister, is to shine with a soft and fitful luster, as eyes suffused with tears, or flowers wet with dew.
     * fustian 과 pathos 에 대한 설명들
     * (위 부분은 원문으로 보는게 나을 것 같습니다.)

The pleasure of finding things out

     * Webster 에서 이런 단어들을 찾아보세요. 요즘 사용하는 모든 단어를 찾아보세요

     example, magic, sport, arduous, huge, chauvinistic, venal, pell-mell, raiment, sue, smarting, stereotype, word, look, up
     * 이게 이 글을 쓰게 된 이유임

     ""1년 넘게 Webster 사전(1913년 버전)을 사용하고 있는데, 단어를 찾고 비교해 볼수록,
     사람들이 잘못된 사전들로 인해서, 단어에 대해서 잘못된 인상을 받고 있다는 것.""
     * 올바른 사전을 사용하기 시작하면 놀라운 일이 일어남
          + 이미 알고 있는 단어를 포함하여 더 많은 단어를 찾기 시작
          + 가장 평범한 단어들에 대해서도 애정을 가지게 됨. 왜냐하면 그들이 희귀하거나 높은 소리를 내는 단어들과 같은 존경심으로 대우 받는 것을 보게 되기 때문

맥,아이폰,안드로이드,킨들에서 사용하기 : Webster 1913 버전

     * Stardict 포맷을 다운로드 받아서 아이폰/안드로이드 등에서 사용
     * M1 + Monterey OS : https://github.com/ponychicken/WebsterParser 에서 다운로드해 설치 가능
     * 크롬에도 검색엔진처럼 추가 가능
     * 킨들에도 ""Send to Kindle"" 로 추가 가능

   안드로이드에서는 어떻게 쓸 수 있을까요?

   https://gist.github.com/jsomers/9dd78c8dc7fab071993c 에 보시면 Colordict 3 앱을 설치하고 해당 딕셔너리를 로드하면 된다고 합니다.

   정말 훌륭한 사전입니다 소개감사합니다 100년이 넘은 사전인만큼 현대사전과 같이쓰면 정말 최고인 것 같습니다

   모르가나

   영어로 소통이라는 것을 하기 시작한게, 교내 영자 신문사에서 글을 쓸 때인 것 같은데요. 그 때부터 좀 큰 고민이 있긴 했습니다. 사전을 찾아보면서 네이티브가 아닌 사람이 글 쓰는 것은 정말 어렵겠구나 라고요. 제가 원하는 뉘앙스와 느낌을 찾는게 사전으로는 불가능에 가까웠거든요. 근데 이런 고민을 원어민들도 하고 있었네요.
   사실 원어민들이랑 소통을 하게 되면서, 전통적인 사전은 더더욱 안보게 되어서 이런 생각을 했었던 것도 잊고 살고 있었네요.

   저장소 스크립트에서는 에러가 나는데, release에 있는 .dictionary는 설치가 잘 되네요.

   영어에 네이티브하지 않다보니까 그냥 내장 사전을 써왔는데 이런 문제가 있었군요. 오늘도 하나 배워갑니다.

   내가 Wordnote 사전 앱을 만든 이유 글을 보다가 알게 된 글인데요.
   이 글 보고나서 맥에 Webster 1913 버전을 설치해서 사용해보는데, 정말로 사전을 보는 재미가 약간 다릅니다.
   한번 설치해보세요.
"
"https://news.hada.io/topic?id=7104","GitHub Repo Trends ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GitHub Repo Trends

     * 깃헙 레포의 트렌드를 1페이지 대시보드로 보기
     * Open Issues/PR 그래프
     * New Issues/PR 그래프
     * Issue/PR Close 하는 평균 시간
     * 한달 평균 새로운 이슈/PR

   Fork한 repo는 검색이 안되는군요 ㅠ
"
"https://news.hada.io/topic?id=7028","Humbleicons - UI용 무료 SVG 아이콘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Humbleicons - UI용 무료 SVG 아이콘

     * 223개의 심플한 아이콘 셋
     * SVG 및 아이콘 스프라이트로 제공
     * npm 으로 설치 또는 zip 파일 다운로드
     * CSS로 스타일링 가능
     * MIT 라이센스

   30만개 이상의 무료 벡터와 아이콘
"
"https://news.hada.io/topic?id=7067","SSD로만 구성된 저예산 40TB NAS 만들기 ($4329)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   SSD로만 구성된 저예산 40TB NAS 만들기 ($4329)

     * 영상편집을 위해서 빠르고 큰 저장장치가 필요해서 만들어 보기로 함
     * 40TB(8TB x 5), 부팅용 512GB SSD, 2U 랙마운트, 80mm 팬, DDR4 128GB, Supermicro X10SDV-4C-TLN2F ITX 마더보드(Xeon D, eBAY에서 중고로)
       → 총 $4,329 (560만원)
     * NAS 소프트웨어는 TrueNAS 를 이용
          + ZFS 로 하고 Sync: Disabled 로 설정
          + 1M Record Size
          + 주기적 스냅샷 설정

   유튜브의 시대에 살고 있군요..

   언제부터 5백만원이 저예산인거였죠

   SSD로 구성된 물건이면 저예산 맞죠 뭐...

   참고로 SSD 전용인 Synology Flashstation FS2500 (SSD 12개 장착가능)같은 모델은
   SSD 하나도 없는 그냥 랙만 $3500 정도 합니다..

   https://amazon.com/Synology-Bay-FlashStation-FS6400-Diskless/dp/…

   가격이 정말 자비 없군요 ㄷㄷㄷ

   40TB SSD NAS 카테고리 안에서 저예산인거죠.
   HDD였으면 훨씬 저렴했겠지만 속도를 위해 SSD로 갔으니 시중에 있는 제품은 거의 없는데다가 있어도 엄청 비쌌을테니까요
"
"https://news.hada.io/topic?id=7130","링크드인 2022 인재 트렌드 보고서 총정리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        링크드인 2022 인재 트렌드 보고서 총정리

    1. 요즘 구직자들은 이게 더 중요하대요.
    2. 원하는 시간에, 원하는 곳에서 일을 하는 사람들
    3. 균형 잡힌 삶과 생산성은 비례해요.
    4. 대전환에 휩쓸리지 마세요, 이끄세요.
"
"https://news.hada.io/topic?id=7040","Show GN: Chollian Wallpaper : 실시간 위성 사진 배경화면 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: Chollian Wallpaper : 실시간 위성 사진 배경화면 앱

   소개
     * 우리나라의 인공위성인 천리안 2A호에서 이미지를 받아 배경화면으로 설정
     * macOS (dmg, universal), Windows (exe) 제공
     * 단순한 가시 영역 이미지뿐만 아니라 위성에서 제공해주는 몇 가지 특이한 이미지로 설정 가능 (수증기, 구름 등)
     * 여러가지 해상도/비율 프리셋 지원 (1K~8K)

   실행 후 메뉴 막대나 시스템 트레이에 아이콘을 우클릭해서 사용합니다.

   여담
     * 개인 프로젝트를 이런 공개된 채널에 홍보하는건 처음이네요.
     * 프로그램 패키징에 관심이 생겨 만들게 됐습니다.
     * C++ / Qt6 사용했습니다.
     * 이미지에 대한 저작권은 기상청에 있고, 상업적 용도로 사용하시면 안됩니다.
     * 오래 켜놓으면 가끔씩 꺼지는데, 고치지 못하고 있습니다 (...).

   많은 피드백 주시면 감사하겠습니다.

   비슷한 프로젝트 입니다
   https://github.com/boramalper/himawaripy

   네, 저도 해당 프로젝트에서 영감을 받았고, 여러가지 측면에서 차별점을 두려고 노력했습니다 ㅎㅎ

   앗 보셨군요 ㅎㅎ

   와우 이런게 안드로이드 라이브 월페이퍼로 있으면 좋을텐데...

   저도 제 능력만 된다면 워치에서 돌려보고 싶었습니다 ㅎㅎ

   와 이거 멋지네요

   좋게 봐주셔서 감사합니다 🙇‍♂️

   우와 신기해요!! ㅋㅋㅋㅋ webb 망원경 사진 보고서 우주사진에 엄청 꽂혔는데, 실시간으로 이런 좋은 이미지나 영상 가져오면 너무 멋질 것 같아요...

   감사합니다! 허블 사진도 신기하다 하고 봤었는데 제임스 웹 정말 대단하더라고요 ㅎㅎ

   우왕 좋네요!
     * 맥(M1) 에서 설치해 봤는데 앱의 아이콘이 보이지 않네요. 트레이 아이콘은 잘 보이는데 뭐가 문제 일까요?
     * 혹시 현재 해상도 디텍트해서 자동으로 이미지 사이즈 설정은 불가능 할까요? 처음 사용할 때 조금 편리할 것 같아요

   안녕하세요, 관심 가져주셔서 감사합니다.
     * 앱 아이콘은 아직 없습니다 (...) 디자인이 만만치 않더라고요...
     * 초기 설정을 해주는건 좋은 기능같아요. 반영해보도록 하겠습니다. 감사합니다!
"
"https://news.hada.io/topic?id=7100","Officer Breaker - 워드/엑셀/파워포인트 파일의 편집 방지 암호 제거기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Officer Breaker - 워드/엑셀/파워포인트 파일의 편집 방지 암호 제거기

     * OOXML 파일(.pptx/.xlsx/.docx)의 수정 방지용 암호를 제거하는 도구
       → ISO/IEC 29500 및 ECMA 376 표준
     * XML파일안에 있는 p:modifyVerifier 요소를 그냥 제거해 버리고 새로운 파일을 만들어서 암호를 무력화하는 것
     * JDK 8+ + Ant 로 빌드하거나 jar 파일 제공
     * ""파일 열기 암호로 걸려있는 것은 풀지 못합니다""

   음? 오피스에 편집 방지 암호 거는 기능이 있었나요? 저는 그게 더 놀랍네요 ㅎㅎㅎ

   비슷하게 아래아한글 배포용 문서도 편집 방지 해제가 가능합니다. https://www.slideshare.net/525hm/160625
"
"https://news.hada.io/topic?id=7055","$2000짜리 중국산 미니 전기 트럭 1년 사용 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $2000짜리 중국산 미니 전기 트럭 1년 사용 후기

     * 1년전 $2000짜리 ChangLi 전기 트럭을 Alibaba에서 구입
          + 2:3 스케일(전장 3.5m), 최대속도 40km, 3kW 모터
          + 제조사와 얘기해서 유압 리프팅 베드, 에어컨, 6kWH 배터리로 교체하는 업그레이드에 $1500 추가
          + 배송비 $2200 + 세금등 $1000 해서 총 $7000 정도 들어감
          + 플로리다의 부모님 농장에서 트럭으로 사용
     * 1년째 잘 동작중. 유압 덤핑 기능이 아주 좋아서 계속 사용중
          + 들어올리는 힘은 좋지만, 내려갈때는 무게가 없으면 살짝씩 멈추기도 함
          + 220~320kg 쯤 들어올릴 수 있는 듯
     * 2주에 한번씩 충전하며, 이론적으로는 약 80km 이상 주행 가능
          + 거의 목장 근처에서 오프로드만 사용하기 때문에 멀리가지 않아서 문제가 되지 않음
          + 충전 안해서 꺼진적이 있지만 Jackery 1500 휴대용 발전기를 들고가서 충전 몇분 하고 다시 몰고올 수 있었음
          + 태양열 충전도 해봤음. 태양열 판넬 4개 붙이니 충전 속도랑 차의 전기 사용 속도랑 거의 비슷한 듯
     * 내부 시스템들도 잘 동작중 : LED 조명도 잘 동작하고, 에어컨도 시끄럽지만 잘 동작
     * 서스펜션은 여전히 아주 거침
     * 기본 타이어는 도시용이라, 오프로드를 위해 조금 더 큰 타이어로 교체예정 (ATV)
     * (미국) 도로에서 사용하는 것은 불법 (오프로드용으로만 사용하겠다고 하고 수입했음)
     * 50W 태양열 판넬을 위에 붙여볼 예정
     * 내 글을 보고, $1700 짜리 미니 전기 Jeep 나 $3500 짜리 전기 ATV를 알리바바에서 산 사람들도 있으니 참고할 것

   재밌네요. 생각해보면, 라보(?)도 전기트럭으로 나왔으면 여전히 수요가 있었을텐데.. ㅎㅎ

   솔라패널로 충분히 충전이 된다니 꽤나 재밌어 보이네요

   원글이 산 2020년 버전은 $2004 입니다.
   2022년 버전 은 조금 올라서 $2390 이네요.

   스펙이 아주 약간 다른듯. 그래도 내부에 터치스크린도 있습니다..
"
"https://news.hada.io/topic?id=7137","SQLite-zstd - 랜덤억세스 가능한 Row 레벨 압축 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SQLite-zstd - 랜덤억세스 가능한 Row 레벨 압축 확장

     * 딕셔너리 기반으로 Row 단위 압축을 해서 전체 압축보다는 조금 크지만 랜덤 억세스 가능
     * IMDB의 7백만개 타이틀을 JSON 으로 저장한 2.2GB DB
       → 파일 전체 압축시 200MB가 되지만 랜덤억세스 불가
       → sqlite-zstd 압축시 550MB에 랜덤억세스 가능
     * 데이터에 따라서 80% 정도 공간 절약. 성능은 거의 비슷하고, 심지어 더 빠르기도 함(디스크에서 읽는 양이 줄어들어서)
"
"https://news.hada.io/topic?id=7159","블로그의 모든 썸네일을 DALL·E 2가 그린 것으로 $45에 바꿨어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                블로그의 모든 썸네일을 DALL·E 2가 그린 것으로 $45에 바꿨어요

     * 이미지가 있는 블로그 글은 2.3배 더 Engage됨
     * '스트리밍 테이블용 쿼리엔진'을 만드는 회사라 글 내용을 이미지로 표현하기가 어려웠음
       → 스톡포토 사이트를 뒤져서 대충 비슷한 것을 찾는데 10분 이상씩 소요
     * 100개가 넘는 글의 이미지를 모두 DALL·E 2가 그린 것으로 변경
     * 제일 맘에 드는 것은 도커 이미지
       → ""컨테이너 더미를 등에 업은 대왕고래""
       → ""Blue whale with stacks of shipping containers on its back, cgsociety artstation trending 4k""

AI 이미지 생성에 대해 배운 것

    1. 프롬프트를 만드는 것은 어렵고, 창의성을 필요로 함
    2. 연습하면 더 나은 프롬프트 작성 가능
       → 이미지 한장당 $0.13인데 처음엔 6~7번 만에 맘에 드는 것을 한장씩 만들었음
       → 100장쯤 만들고 나니 이제 2~3번만에 나오기도
    3. 흥미로운 이미지를 얻으려면 ""Stylistic modifier""가 중요함
       → “A film still from ___ movie” 라고 넣고, 비주얼이 훌륭한 영화 이름을 넣을 것 : 블레이드러너, 라라랜드, 인터스텔라, 그랜드 부다페스트호텔 등
       → Aesthetics(미학) 을 추가 : Art Nouveau, Impressionism, Lo-Fi, Realism, Soft Apocalypse,..
       → 유명 작가 이름을 추가
       → 우리 블로그의 이미지 생성엔 대부분 “artstation”, “cgsociety”, “4k”, “digital art” 를 추가했음
    4. 레딧의 r/dalle2 를 돌아다며 보면 좋은 프롬프트를 위한 아이디어를 얻을수 있음
       → The DALL·E 2 Prompt Book 도 좋음
    5. 가끔은 이상한 문자들을 포토샵으로 지워야 할 수도 있음
    6. 예상치 못한 콘텐츠 위반에 주의할 것 : ""shooting"" ""blood"" 등 단어 사용에 주의
    7. 이미지는 나중에 편집 가능. 다시 업로드해서 수정도 가능
    8. 특정한 물건, 특정 색상, 특정한 수의 물건, 특정한 장소에 있는 물건을 얻는 것은 어려움
       → 12마리 칠면조 라고 표현해도 4~20마리가 나오게 됨.
       → 2~3은 정확하게 나오는데, 많은 숫자에선 어려움. 마치 숫자 못세는 어린 아이 처럼
    9. 예술에서 인간의 역할이 곧 사라지진 않을 것
   10. 난 이제 $GETY(Getty Images)에 가지 않을 것임
       → 예술에서 인간의 역할이 사라지진 않겠지만, 스톡 이미지 사이트는 사라질 수도 있지 않을까?

     * 구글이 구글 슬라이드에 자신들의 Imagen 으로 이미지 생성하는 기능을 넣어주면 좋겠음

   글을 다 읽고 나니 드는 생각은 원숭이 하나, 돌멩이 하나 그려진 NFT보다 DALL·E 2로 만든 아트북이나 콜렉션이 더 잘 팔릴 것 같다는 생각이...

   기술 블로그에 쓸만할 것 같네요. 예로 들은 대왕고래 도커 이미지나, 파이프에서 쏟아져 나오는 비트코인은 그냥 그리라고 하면 꽤 시간이 걸렸을 것 같아요.
   제 그림 취향은 MidJourney 쪽이어서, 조만간 블로그 글을 쓰면 함 해볼까 생각도 ㅎㅎ
"
"https://news.hada.io/topic?id=7107","회사의 겨울나기를 위한 39가지 Tip","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         회사의 겨울나기를 위한 39가지 Tip

   창업자, 투자자로서 불황기를 3번 경험한 Pete Flint는 경기 불황에서의 39가지 생존전략을 소개: 회사의 겨울나기를 위한 노하우로 세 가지 원칙(손실 관리 / 기반을 다지기 / 멘탈 관리) 에 의거한 행동 방법들을 얘기함

A. 손실을 관리하기

    1. 현금을 우선시하기
    2. 펀딩을 받는다는 가정을 버리기
    3. 24개월 이상의 런웨이를 확보하기
    4. 밸류에이션이 낮아질 것임을 인정하기
    5. 팀의 크기를 줄여야 한다면 몹시 빠르게 평가하기
    6. 해고를 해야 한다면 빠르게 많이 하기
    7. 해고 도중에는 남아있는 사람들에게 집중하되, 나간 사람들에게도 도움을 충분히 주기
    8. 남아 있는 사람들에게 상황을 반전시킬 수 있는 능력이 있다는 확신을 주기
    9. 뛰어난 성과는 주식으로 보상하기
   10. 자금 소진 방지와 위기 공유를 위해 보상을 창의적으로 조정하기
   11. 최고의 투자수익률을 보이는 마케팅 활동에 집중하기
   12. PR 예산을 재검토하기
   13. 모든 인프라와 소프트웨어 비용을 점검하기
   14. 부차적인 방해 요소를 제거하기
   15. 일부 고객을 제거하기
   16. 판매 채널의 방향을 바꾸고 통제하기
   17. 고객에게 빨리 돈을 내도록 (현금을 내도록) 유도하기
   18. 임대와 지급이 필요한 계약을 재협상하기
   19. 인수협상 파이프라인을 만들기

B. 바닥을 다지기

   20. 거대한 수요/공급의 불일치를 식별하기
   21. 소비자들의 행동이 바뀔 것으로 예측하기
   22. 소비자들이 돈을 일찍 내도록 할 유인을 제공하기
   23. 똑똑한 가격 체계를 세우기
   24. 제품을 훨씬 핵심적으로 만들기
   25. 기업의 소규모 인수나 인수 및 고용을 고려하기
   26. 세일즈를 효율화하기
   27. 고정비용을 가변비용으로 만들기
   28. 사람들로 운영되는 구조를 기술로 대체하기
   29. 기회주의적으로 평가절하된 사람을 고용하고, 재능을 성장시키기
   30. 부채를 포함한 다른 자금조달 방식을 찾아보기
   31. 좋은 성과를 내는 문화에 헌신하기
   32. 빠르게 움직이고, 새로운 것들을 시도하기

C. 마음을 다스리기

   33. 회사 문화를 빠르게 현재의 상황에 적응시키기
   34. 직원들에게 공감하기
   35. 우정을 쌓기
   36. 자발적이고 무작위적인 행동을 하기
   37. 창의적인 충돌을 위한 공간을 만들기
   38. 조그만 성취를 축하하기
   39. 벤처캐피탈의 판단 기준 이해하기

   (위의 링크에 번역본 전문이 있습니다.)
"
"https://news.hada.io/topic?id=7125","어려운 한글 웹폰트 최적화, 꼼수로 해결하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        어려운 한글 웹폰트 최적화, 꼼수로 해결하기

   한글 웹폰트사용하려다가 제대로 표시되지 않아 포기하려다가
   어찌어찌 하여 찾은 방법을 정리해봤습니다.
     * 한글 웹폰트를 쓰면 첫화면 첫로딩에 적용폰트가 바로 표시되지 않음.
     * 영어권에서는 font-display: optional 로 편하게 할수 있지만, 한글은 어려움
     * 한국에서 구현한 곳을 찾지 못해 직접 만들어봄
     * 페이지에 등장하는 문자들로만 이루어진 폰트서브셋 생성 --> 실패. 여전히 큼
     * 페이지 상단 첫화면에 등장하는 문자들로만 서브셋 생성--> 성공. 충분히 작음
     * 사용자가 첫화면에서 머무는 사이에 전체웹폰트 로딩완료시킴.

   https://velog.io/@filekiwi/optimization-web-font-hangul-part-1
   이글도 같이 읽어보세요.
   국내 업체들이 웹폰트 최적화를 어떻게 하고 있는지도 볼수 있습니다.
"
"https://news.hada.io/topic?id=7106","토스 리더가 말하는 지속가능한 성장을 만드는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       토스 리더가 말하는 지속가능한 성장을 만드는 법

   이승건 대표의 ""토스 리더가 말하는 지속가능한 성장을 만드는 법 | PO SESSION""을 듣고 정리했습니다.

   매번 느끼는 거지만 이승건 대표의 사고는 굉장히 전략적이라는 생각이 듭니다. 여기서 전략적이라는 것의 의미는 이것저것 재고 약삭빠르다 라는 의미가 아니라, 자신의 사고과정을 체계적이고 명료화시키면서 여러가지 팩터들을 적절한 형태로 추상화하여 모델로 삼고 그 모델을 바탕으로 의사결정을 한다는 의미입니다.

   PO세션 1강의 CC를 소개할 때 느꼈던 아우라를 이번 세션에서 또 느꼈네요. 보시는 걸 꼭 추천드립니다.
"
"https://news.hada.io/topic?id=7048","프로그래밍 고정폭 한글 글꼴 셈틀체 후원 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        프로그래밍 고정폭 한글 글꼴 셈틀체 후원 중

     * 유일하게 바닥부터 프로그래머를 위해 기획된 고정폭 한글글꼴
     * 영문과 한글의 통일성 있는 디자인으로 섞어짜기에 특화
     * 영문이 주인 프로그래밍의 특성을 고려한 너비 설정
     * 다양한 굵기 지원
     * 기울임체 지원
     * 너비가 보다 좁은 장체 지원
     * 전반적으로 날카롭지 않고 둥그런 모양
     * 주어진 칸을 최대로 활용
     * 모든 글자 간의 차이가 명확
     * 프로그래머를 위한 합자ligature 지원
     * 프로그래머를 위한 파워라인powerline 글리프 지원

   디자인 폰트로써는 모르겠으나, 가독성을 최우선으로하는 프로그래머를 위한 폰트로는 보기 어렵내요.

   CRT 시절도 아니고 가독성을 강조하면서 산세리프로 디자인하는 프로젝트는 처음 봤는데... 디자인이 모든 걸 잡아먹은 시도인 것 같네요. 활용하기 정말 어려울 것 같아요.

   ㅊ이나 ㄴ의 세리프 보고 고개를 저었습니다....

   https://github.com/eastriverlee/melonbrain 이전 프로젝트를 봤는데, 라이선스가 기가 막히네요. 개발자라기보다는 디자이너답네요.

   이건 정말 상상도 못했는데요. 라이선스에 마땅히 들어가야 할 내용은 안 보이고, 오로지 정치적인 내용만이 보이다니…
   위 프로젝트도 실제 사용은 둘째치고라도 시도 자체가 반가워서 펀딩을 진지하게 고민했습니다만, 이걸 보고 안 하는 쪽으로 마음을 굳혔습니다. 저는 현 여당에 한번도 표를 준 적이 없는 사람입니다만, 이건 그 이전의 문제라고 생각되는군요.

   예전에 Ask GN: 코딩할 때 어떤 폰트를 사용하시나요?라는 질문을 올렸던 사람으로서 이런 시도가 정말 반갑긴 한데, 한글 쪽의 가독성이 좀 의문스러워서 지를지 말지 좀 고민되네요. 로마자의 가독성만큼이나 한글 가독성도 중요하니까요.
"
