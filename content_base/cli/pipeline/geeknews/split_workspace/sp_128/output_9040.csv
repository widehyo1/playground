"https://news.hada.io/topic?id=17294","Palantir에 대한 회고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Palantir에 대한 회고

     * 팔란티어의 현재 상황: 최근 S&P 500에 가입하고 주가가 급등하며, 기업 가치가 1000억 달러에 근접하고 있음. 과거에는 스파이 기술이나 NSA 감시로 인식되었으나, 현재는 긍정적인 평가를 받고 있음.

1. 내가 팔란티어에 합류한 이유

     * 의료, 항공우주, 제조, 사이버보안 등 어려운 산업의 실제 문제 해결에 관심이 있었음
     * 이 분야에서 실리콘밸리 업무 문화를 가진 회사는 팔란티어가 유일했음
     * 창업을 목표로 했기에 한 산업을 깊이 파고들고 미국 영주권을 얻을 수 있는 팔란티어가 좋은 선택이었음
     * 초기 직원들의 높은 역량과 열정, 경쟁력이 매력적이었음
     * 철학을 좋아하고 이상한 취향을 가진 진지하고 경쟁적인 사람들이 많았는데, 이는 페이팔 마피아의 유산이었음
     * CEO 알렉스 카프를 포함한 경영진과의 면접에서 철학적 담화를 나누는 등 지적 웅대함과 경쟁력의 조합이 마음에 들었음

2. 현장 배치 엔지니어(Forward deployed, FDE)

     * 팔란티어에는 고객사와 일하는 FDE와 제품 개발(PD)에 집중하는 엔지니어가 있었음
     * FDE는 일주일에 3-4일을 고객사에 상주하며 많은 출장을 다녀야 했는데, 이는 실리콘밸리 회사로는 매우 이례적임
     * FDE는 제조, 의료, 정보, 항공우주 등 어려운 산업의 비즈니스 프로세스에 대해 깊이 이해하고 이를 바탕으로 문제 해결 소프트웨어를 설계함
     * PD 엔지니어는 FDE가 구축한 것을 제품화하고 FDE의 업무를 개선하고 가속화하는 소프트웨어를 만듦
     * 파운드리 제품의 초기 모습은 FDE가 고객사에서 수작업으로 처리하던 것을 PD 엔지니어가 자동화 도구를 만들면서 갖춰짐
     * 당시에는 고객에게 이 도구에 대한 접근 권한을 주는 것이 과감한 발걸음이었지만 지금은 회사 매출의 50% 이상을 차지함
     * 팔란티어는 서비스 회사에서 제품 회사로의 성공적인 피봇을 이뤄냈고, 2023년 80%의 소프트웨어 수준 매출 총이익률을 기록함
     * 고객사에 상주하며 그들이 일하는 방식에 대한 암묵지를 습득하는 것이 핵심이었음
     * 무작위로 다음날 아침 비행기를 예약하고 출장 가는 것이 일상이었지만, 10년에 걸친 집중적 학습의 결과 성과를 거둠
     * 에어버스와의 첫 FDE 경험으로 1년간 툴루즈에 머물며 A350 제조 확대 소프트웨어를 함께 구축함
     * 작업 지시서, 부품 부족, 품질 문제 등 다양한 데이터를 한 곳에 모아 팀 간 협업과 문제 해결을 지원하는 인터페이스를 제공함
     * 범용성보다는 특정 문제에 대한 종단간 해결책을 제공하는 것이 목표였고, PD의 역할은 이를 일반화하여 다른 곳에 판매하는 것이었음
     * FDE는 빠른 문제 해결을 위해 기술 부채를 감수하고, PD는 확장성 있고 견고한 소프트웨어를 작성하는 역할 분담이 효과적이었음
     * 고객사 내에 깊숙이 파고들어 신뢰를 얻고 빠르게 핵심 가치를 전달하는 FDE의 역량이 돋보였음
     * 작은 고객 팀이 자율적이고 민첩하게 움직이고, 제품팀이 이를 바탕으로 플랫폼을 개발하는 모델이 강력했음
     * 스페이스X나 팔란티어처럼 정치적 게임이 아닌 실제 성과로 차별화하는 기업이 더 필요함

3. 팔란티어의 비밀

     * FDE의 또 다른 핵심 업무는 데이터 통합이었음
     * 데이터 통합은 오랫동안 팔란티어가 하는 일의 핵심이었지만 그 중요성이 과소평가되어 왔음
     * 최근 AI의 등장으로 기업의 깨끗하고 잘 정리된 데이터의 중요성이 부각되고 있음
     * 데이터 통합이란 (a) 기업 데이터에 대한 접근권을 확보하고 (b) 데이터를 정제 및 변환한 뒤 (c) 모두가 접근할 수 있는 곳에 저장하는 것을 의미함
     * 파운드리의 기반 소프트웨어 상당 부분이 이 작업을 쉽고 빠르게 해주는 도구임
     * 데이터가 PDF, 노트, 엑셀 등 다양한 형식으로 존재해 통합이 어려움
     * 조직 내 정치도 걸림돌인데, 특정 팀이 핵심 데이터에 대한 접근을 통제하며 존재 이유를 삼는 경우가 많음
     * 데이터 접근권을 확보하는 데만 파일럿 프로젝트 기간을 모두 소진하고 데모를 서둘러 준비해야 했던 경우도 있음
     * 데이터 접근 문제의 상당 부분이 보안 우려에서 비롯된다는 점을 파악하고 플랫폼 전반에 걸쳐 보안 통제 기능을 구축함
     * 역할 기반 접근 제어, 행 수준 정책, 보안 마킹, 감사 추적 등 다양한 데이터 보안 기능을 도입함
     * 이러한 기능 덕분에 팔란티어 도입이 오히려 기업 데이터 보안을 강화하는 결과를 가져옴

4. 문화에 대한 참고사항

     * 팔란티어의 분위기는 정상적인 소프트웨어 회사라기보다는 메시아닉 컬트에 가까웠음
     * 그러나 비판이 허용되고 장려되었는데, 신입 엔지니어가 전체 메일로 임원과 논쟁하기도 함
     * 합리주의적 사고를 가진 철학과 졸업생인 나에게 이 점이 중요했음. 맹목적 추종이 아닌 세상에 대해 깊이 고민하고 토론하는 회사에 관심이 있었음
     * 입사 시 Impro, The Looming Tower, Interviewing Users, Getting Things Done 등의 책을 줌
     * The Looming Tower는 회사가 9/11에 대한 대응으로 설립되었다는 배경 지식을 줌
     * Impro는 사회적 맥락에 대한 민감성, 즉 정치적 게임을 하는 능력이 FDE 성공에 중요함을 일깨워 줌
     * Impro는 사회적 행동을 기계적으로 분석하는데, 'casting' 등 관련 용어가 사내에 널리 쓰임
     * 고개를 가만히 하고 서서 손을 보이는 것은 높은 지위를, 고개를 좌우로 움직이고 손을 주머니에 넣는 것은 낮은 지위를 나타냄
     * 이런 원리를 모른다면 고객사 환경에서 성공하기 어려웠을 것임
     * 전직 FDE들이 훌륭한 창업자가 되는 이유 중 하나임. 구글 출신보다 팔란티어 출신 창업자가 YC에 더 많음
     * 훌륭한 창업자는 회의 분위기, 집단 역학, 권력 관계를 읽어내는 감각이 있음. 이는 팔란티어가 FDE에게 가르치지만 다른 밸리 회사에서는 배우기 힘든 것임
     * FDE는 빠르게 고객사의 언어를 배우고 비즈니스를 깊이 이해하는 능력이 필요함
     * 병원, 신약개발, 의료보험, 정보학, 면역항암요법 등 각 분야마다 전문 용어가 있고 이를 빨리 습득하는 사람이 성공함
     * 재능있는 사람은 자신만의 어휘와 밈을 만들어내는데, 이는 그 사람만의 지적 세계로 들어가는 입구 역할을 함
     * 회사도 마찬가지인데 팔란티어에는 'ontology', 'impl', 'artist's colony', 'compounding', 'the 36 chambers', 'dots', 'metabolizing pain', 'gamma radiation' 등 방대한 용어가 있음
     * 피터 틸이 팔란티어하면 가장 먼저 떠오르지만 많은 용어가 초기 직원, 특히 현 사장인 샴 산카르로부터 나옴
     * 피터 틸은 내가 근무할 당시 회사 운영에는 관여하지 않았지만 문화에 큰 영향을 미쳤음
     * 직함을 두지 않는 것도 피터 틸의 아이디어로 보임. FDE와 소수의 임원을 제외하고는 모두 같은 직함을 가졌음
     * 직함을 만들면 사람들이 그것을 탐내게 되고 내부 정치와 경쟁을 유발한다는 지라르의 사상에 기반한 것으로 보임
     * 계층이 없는 조직에 대한 비판도 많고 요즘 스타트업에서는 유행이 지났지만, 팔란티어에서는 잘 작동했음
     * 영향력은 인상적인 성과에 기반했고, 누구도 다른 사람에게 무엇을 하라고 지시할 수 없었음
     * 영향력 있는 사람이 내 아이디어를 말도 안 된다고 해도 무시하고 옳다고 생각하면 만들 수 있었음
     * 임원의 반대를 무릅쓰고 중요한 인프라를 만든 엔지니어의 일화가 미담으로 회자되며 이런 행동이 장려됨
     * 단점은 회사에 명확한 전략이나 방향이 없어 보이고 똑똑한 사람들이 제각각 자기 영지를 구축하는 느낌이었음
     * 그러나 이는 놀라울 정도로 창의적인 결과를 낳았음. Hex, Retool, Airflow 등 팔란티어에서 먼저 개발된 개념이 적잖음
     * 회사는 지금도 대기업에 LLM을 배포하기 위한 강력한 도구를 만들고 있음
     * 직함이 없어서 사람들의 인기가 들쭉날쭉했음. 누군가 영향력이 있다가도 몇 달 뒤 보면 눈에 띄는 일을 하지 않고 있었음

5. Bat-Signal(인재 유치 전략)

     * 피터 틸로부터 비롯된 또 다른 아이디어는 인재 배트시그널(talent bat-signals)임
     * 이제 내 회사를 차렸기에 그 중요성을 더 실감함. 훌륭한 사람을 모집하기란 어려운 일이고 차별화된 인재 풀이 필요함
     * 매년 페이스북/구글과 스탠포드 CS 졸업생을 놓고 경쟁한다면 패배할 수밖에 없음
     * (a) 다른 회사보다 특별히 당신 회사에 관심이 있고 (b) 대규모로 그들에게 다가갈 방법이 있는 인재 집단이 필요함
     * 팔란티어에는 몇 가지 차별화된 인재 유치 전략이 있었음
     * 첫째, 국방/정보 분야 일이 인기 없을 때 이 분야에 우호적이었던 사람들이 있었음. 평소보다 미국 중서부나 공화당 지역 출신의 엔지니어가 많았고, 실리콘밸리 회사에 매력을 느끼면서도 미국에 봉사하고 싶어하는 전직 군인, CIA/NSA 출신이 많았음
     * 팔란티어 첫 출근 날, 내부 온보딩에서 만난 한 남자가 자신이 CIA에서 15년간 일했다고 했음. 내 첫 리더는 오하이오 출신의 전직 특공대 경찰이자 육군 베테랑이었음
     * 이런 사람들이 많았고 대부분 굉장한 인재였지만 구글에는 가지 않았음
     * 팔란티어는 이런 부류에게 유일한 '등대' 역할을 했고, 군대 지원과 애국심을 강조하는 것이 매우 비주류적일 때 이를 당당히 내세웠음
     * 이는 매우 효과적이고 독특한 배트시그널을 만들었음 (이제는 Anduril과 수많은 국방 및 제조업 스타트업이 있음)
     * 둘째, 초기 열풍이 가라앉은 뒤, 특히 트럼프 시대 팔란티어가 지탄 받을 때 회사에 합류하려면 좀 이상해야 했음
     * 이는 '미션 중심'이라는 당시로서는 이례적인 브랜딩에서 비롯되었지만, 장시간 근무, 시장 이하 급여, 잦은 출장이 요구된다는 점도 회사가 떠들썩하게 알렸음
     * 한편으로는 정부와 일한다는 이유로 실리콘밸리 채용 박람회에서 쫓겨나기도 했음
     * 이 모든 것이 나쁜 소식에 흔들리지 않고 스스로 생각할 줄 아는 특정 부류의 사람을 선별해냄

6. 도덕성

     * 팔란티어는 서방을 지지하는 입장인데, 나도 대체로 동의함
     * 중국이나 러시아 중심의 세계는 나쁜 것 같고, 그게 우리 앞에 놓인 선택지임
     * 자유 국가에 살면 비판하기 쉽지만, 그 반대를 경험해보면 어려움 (억압적인 국가에서 어린 시절을 보냄)
     * 군대가 하는 일에 동의하지 않을 때도 있었지만 회사가 군을 돕는 것 자체에는 문제가 없었음
     * 물론 군대도 나쁜 짓을 하기도 함. 나는 이라크 전쟁에 반대했음
     * 이게 핵심인데, 회사에서 일하는 것이 100% 도덕적으로 선하지도, 100% 나쁘지도 않음
     * 때론 내가 반대하는 목표를 가진 기관을 돕기도 했지만, 정부는 많은 좋은 일도 하고 더 효율적으로 하도록 소프트웨어를 제공하는 것은 고귀한 일임
     * 회사 일을 세 범주로 나눠보면 도덕성 문제를 명확히 할 수 있음 (완벽한 분류는 아니지만):
         1. 도덕적으로 중립적인 일: FedEx, CVS, 금융사, 기술 기업 등 일반 기업 관련 업무. 문제 삼는 사람도 있겠지만 대체로 괜찮다고 느낌
         2. 명백히 선한 일: CDC와의 팬데믹 대응, NCMEC와의 아동 포르노 대응 등 대부분 사람들이 좋은 일이라 동의함
         3. 회색 지대: 도덕적으로 어렵고 까다로운 결정이 필요한 영역. 건강보험, 이민 단속, 석유회사, 군대, 정보기관, 경찰/범죄 등
     * 모든 엔지니어는 선택의 기로에 섬. 구글 검색이나 페이스북 뉴스피드 같이 약간 좋아 보이는 1번 범주나, GiveDirectly 같은 2번 범주를 고를 수 있음
     * 팔란티어에 대한 주된 비판은 ""3번 범주에선 일하면 안 된다. 때론 도덕적으로 나쁜 결정을 내려야 하니까""였음. 트럼프 시대 이민 단속이 한 예시임
     * 그러나 3번을 완전히 무시하고 관여를 끊는 것도 책임 방기라고 봄. 3번 범주 기관은 존재해야 함
     * 미국은 총을 든 사람들에 의해 지켜짐. 경찰은 범죄와 싸워야 하고, 일부 경찰 활동이 불편해도 집이 털리면 경찰에 신고함. 석유회사는 에너지를 공급해야 함. 건강보험사는 어려운 결정을 계속 내려야 함
     * 그런 것들에 불쾌한 면이 있긴 하지만, 그 기관들을 내버려둬야 할까?
     * 3번 고객과 일해야 하는지 명확한 답은 없고 사례별로 접근해야 한다고 봄
     * 팔란티어의 입장은 ""명백히 나쁘지 않은 한 대부분 3번 기관과 일하되, 민주적 절차를 믿고 시간이 지나면 좋은 방향으로 갈 것""이었음
          + ICE 문제에선 트럼프 시대에 ERO(단속·추방 업무)와는 관계를 끊고 HSI(국토안보수사국)와는 계속 일함
          + 대부분 3번 기관과 일했는데, 나쁜 일도 하지만 대체로 세상에 이롭다는 논리였음
     * 자세한 내용은 말할 순 없지만 팔란티어 소프트웨어 덕에 여러 테러 공격이 저지되었고, 이 사실만으로 이런 입장이 정당화된다고 봄
     * 항상 100% 선한 일만 한다는 보장이 없어 많은 이에게 불편한 입장임. 어떻게 보면 역사의 흐름에 身을 맡기는 셈이고 (a) 악보다 선이 더 많이 행해지고 (b) 현장에 있는 게 없는 것보다 낫다는 걸 믿어야 함
     * 이 정도면 나한테 충분했음. 다른 이들은 다른 선택을 했음
     * 물론 이런 입장의 위험은 기존 권력 구조가 하자는 대로 하는 보편적 변명이 될 수 있다는 것. 그냥 기존 체제를 강화하는 꼴임
     * 그래서 사례별로 접근해야 함. 일반론은 없고 구체적으로 봐야 함
     * 나 역시 의료, 바이오 분야에 시간을 많이 투자했고 기여한 바에 대해 만족함. 테러를 막은 사람들도, 팬데믹 때 의약품을 유통한 사람들도 마찬가지일 거임
     * 이런 '까다로운' 영역에서 일하는 게 이젠 유행이 되었지만, 기술자에겐 여전히 중요한 질문임
     * AI가 좋은 예시임. AI 도입의 일부 결과가 걱정되는 사람이 많음. 해킹에 쓰일 수도, 딥페이크가 세상을 나쁘게 만들 수도, 일자리를 없앨 수도 있음. 그러나 AI에는 큰 장점도 있음 (다리오 아모데이가 최근 에세이에서 잘 설명함)
     * 팔란티어처럼 AI에 대해 일하는 것도 100% 선하진 않겠지만 100% 악하지도 않음. 관여를 멈추고 중단을 요구하는 건 비현실적이고 최선은 아닐 듯
     * 오픈AI나 앤트로픽에서 일하진 않더라도 AI 관련 이슈에 관여할 만한 사람이라면 어떤 식으로든 참여하길 바람
     * 쉬운 경우도 있음: 평가 구축, 정렬 연구, 사회적 회복탄력성 제고 등. 하지만 회색 지대에 참여할 가치도 있다고 봄. 정부 AI 정책에 관여하고, 의료 같은 분야에 AI를 도입하는 일 등. 물론 어려울 것임. 그래도 뛰어들자
     * 요즘 AI 분야에서 가장 영향력 있는 사람들은 대부분 현장에 있음. AI 연구소든 정부든 영향력 있는 싱크탱크든. 그들 중 하나가 되고 싶음. 설교하는 사람이 되긴 싫음
     * 어려운 결정이 뒤따르겠지만, 일이 일어날 때 그 자리에 있는 게 낫다고 봄. 나중에 그만두고 경종을 울려야 한다 해도 말임

7. 앞으로의 전망

     * 팔란티어에 대해 계속 긍정적인가? 그렇다.
     * 이번 AI 사이클의 큰 생산성 향상은 AI가 제조, 국방, 물류, 의료 등 대기업들에게 레버리지를 제공할 때 일어날 것임
     * 팔란티어는 10년간 이런 기업들과 함께 일해왔음
     * AI 에이전트가 결국 핵심 업무 절차를 주도하게 될 것이고, 이들은 중요 비즈니스 데이터에 대한 읽기/쓰기 권한에 의존할 것임
     * 10년간 기업 데이터를 통합해온 것이 기업에 AI를 도입하기 위한 핵심 기반임. 엄청난 기회가 있음
     * 나 역시 오래 기다려온 마스터플랜을 실행에 옮겨 다음엔 창업할 계획임
     * 정부 관련 사업도 포함될 것임. 팀도 훌륭하고 채용 중임. 가끔 비트겐슈타인 얘기도 나눔

GN⁺의 정리

     * 팔란티어는 초기에는 부정적인 인식이 있었으나, 현재는 긍정적인 평가를 받고 있으며, 이는 회사의 전략적 전환과 제품 발전 덕분임.
     * 데이터 통합과 보안 기능은 회사의 핵심 역량으로, AI의 발전과 함께 더욱 중요해지고 있음.
     * 회사의 독특한 문화와 인재 모집 전략은 팔란티어의 성공에 기여하고 있으며, 이는 다른 기업들이 벤치마킹할 만한 가치가 있음.
     * 도덕적 딜레마는 여전히 존재하지만, 이는 회사의 성장과 발전에 있어 중요한 고려 사항임.

   좀더 자세한 번역글이 있어 공유합니다: https://maily.so/devpill/posts/eba34ffb

        Hacker News 의견

     * Palantir에 대한 잘 작성된 기사로, Palantir의 성공 이유와 좋은 직원의 특성에 대해 깊이 생각한 흔적이 있음. Palantir에 회의적이었던 사람도 관심을 가지게 되었으며, 유용한 학습 자료도 링크되어 있음. 그러나 저자가 미국 비즈니스의 지위와 경쟁에 너무 집착하는 것 같음.
     * Palantir의 부정적인 면을 지적한 댓글에 감사하며, 여전히 Palantir에 대한 부정적인 인식이 있음.
     * Palantir에서 일했던 경험을 공유하며, Palantir의 유명세를 만든 것들이 가장 의심스러운 것들과는 거리가 멀다고 언급함.
     * Palantir의 계층 구조가 매우 복잡하여 필요한 사람을 찾기 어려웠음을 지적함.
     * Palantir의 가자 지구에서의 역할과 'Lavender', 'Where's Daddy' 프로젝트에 대한 논의가 없음을 놀라워함.
     * HackerNews가 냉소적인 면을 잃고 있는지 의문을 제기함.
     * Palantir의 내부 정치가 경쟁적이며, 도덕적 타협의 이점이 개인 엔지니어에게 직접적으로 다가옴을 설명함.
     * Palantir의 기술이 특별하지 않으며, 많은 회사들이 자체적으로 할 수 있는 일을 외주로 맡기는 것에 불과하다고 평가함.
     * Palantir의 도덕적 입장을 평가하는 방법론이 편향적이라고 지적하며, '중립/좋음/나쁨'과 같은 더 객관적인 분류가 필요하다고 주장함.
     * Palantir의 사업 모델에 대한 이해가 부족하며, 큰 프로젝트에 대한 소식을 듣지 못했음에도 불구하고 회사의 인기가 높다는 점을 의아해함.
     * '맥락은 희소하다'는 인용문에 대해 더 명확한 정의가 필요하다고 생각함.
     * Palantir에서 일하면서 두 번 약물에 노출되었다는 경고를 공유함.
     * Palantir의 기술이 미국인들에게 사용될 가능성이 있으며, 정부가 직접 할 수 없는 일을 대신하는 사회정치적 중재 역할을 한다고 주장함.
"
"https://news.hada.io/topic?id=17336","맥킨지 같은 컨설팅 산업이 위태로울까? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         맥킨지 같은 컨설팅 산업이 위태로울까?

     * ""CEO에게 귓속말 하는 사람들의 황금기가 끝날지도 모름""

컨설팅 산업의 도전과제

     * 3월 익명의 메모가 인터넷에 잠시 돌았는데, 맥킨지 전 파트너들이라고 주장하는 저자들은 맥킨지가 최근 몇 년간 ""무분별하고 관리되지 않는 성장""을 추구해 왔다며 비난했음
          + 그들은 맥킨지 특유의 겸손함으로 ""진정한 위대함의 조직""이 사라질 위기에 처해 있다고 경고했음
     * 이 메모는 재빨리 삭제되었지만, 맥킨지 내부의 불만을 엿볼 수 있는 최근의 사례임
          + 1월 맥킨지 총괄 파트너인 Bob Sternfels는 1차 투표에서 선임 파트너 과반수의 지지를 얻는 데 실패한 후 최고 자리를 놓고 내부 경쟁에 돌입해야 했음
          + 그가 결국 승리했지만, 이 일은 회사 내부의 문제를 시사함
     * 얼마 전까지만 해도 컨설팅 산업은 무적으로 보였음
          + 고객들이 사업 디지털화, 공급망 다각화, ESG 대응 등에 박차를 가하면서 코로나19 팬데믹 기간 수수료가 급증했음
          + 전략 자문사(Bain, BCG, 맥킨지), ""Big 4"" 회계법인(Deloitte, EY, KPMG, PwC), 세계 최대 아웃소싱 업체인 Accenture 등 주요 기업들의 컨설팅 매출은 2021년 20%, 2022년 13% 증가했음(차트 참조)
     * 그러나 그 이후 ""Great 8""의 성장세는 둔화되고 있음
          + 업계 전문가 Kennedy Research Reports의 추정과 The Economist의 계산에 따르면, 2023년 성장률은 약 5%로 둔화될 전망임
          + 인플레이션과 경제 불확실성에 직면한 고객들은 대규모 컨설팅 프로젝트를 축소하고 있음
          + M&A 감소로 실사 및 기업 통합 지원 수요가 급감했음
     * 이는 컨설팅 회사들에게 골칫거리가 되고 있음
          + 고객 수요가 무한해 보일 때 내일이 없는 것처럼 직원을 채용했음
          + 맥킨지의 매출은 2019년 이후 3분의 1 증가했지만, 직원 수는 45,000명으로 절반이나 늘었음
          + 스타트업과 사모펀드의 일자리가 줄어들면서 자발적으로 퇴사하는 컨설턴트가 줄어들어 팬데믹 기간 급증했던 이직률이 반전되었음
     * 이제 내일이 다가왔음
          + Bain과 Deloitte는 일부 졸업생에게 입사일을 연기하는 대가로 돈을 지급했음
          + 여러 회사의 신입 컨설턴트들은 일감이 너무 적어 경력 개발에 차질이 생기고 있다고 불평함
          + 컨설팅에서 드문 정리해고가 확산되고 있음
               o Big 4는 모두 자문팀 감원을 단행했음
               o 8개 회사 중 유일하게 상장된 Accenture는 작년 19,000명을 해고할 것이라고 발표했음
          + 3월 21일 Accenture는 2월까지의 분기 컨설팅 매출이 전년 동기 대비 3% 감소했다고 보고했고, 이는 직전 분기에 이어 하락세를 보인 것임
          + 또한 내년 성장 전망치를 낮추면서 주가가 9% 하락했음
     * 컨설팅 산업은 닷컴 버블 붕괴, 글로벌 금융위기 등 과거에도 어려운 시기를 겪었지만, 이번 회복은 세 가지 요인으로 인해 복잡해질 것임
          + 지정학(geopolitics)적 위험, ESG에 대한 열정 약화, 기술변화

첫번째, 지정학적 위험

     * 미국이나 유럽에 본사를 둔 대형 컨설팅 회사들은 수십 년간 세계화의 혜택을 누리며 전 세계로 진출했음
     * 컨설팅 매출 기준 최대 규모인 딜로이트는 150개 이상의 국가와 지역에 사무소를 두고 있음
     * 그러나 이제 이러한 기업들은 난처한 상황에 처해 있음
          + 맥킨지가 공동 설립한 싱크탱크인 Urban China Initiative가 2015년 중국 정부에 ""Made in China 2025"" 계획 수립에 도움이 되는 조언을 제공한 것으로 드러났음
               o 이 계획은 중국 경제의 외국 기술 의존도를 줄이고 전기차에서 인공지능(AI)에 이르는 분야에서 중국을 선두에 서게 하는 것을 목표로 함
          + 맥킨지는 보고서 작성을 부인했지만, 일부 미국 의원들은 맥킨지를 미국 정부 계약에서 배제할 것을 요구했음
          + 2023년 9월까지 12개월 동안 미국 연방정부는 맥킨지에 1억 달러 이상의 수수료를 지급했음
     * 중국도 다양한 분야의 외국 자문사들을 시장에서 축출하기 시작했음
          + 작년 글로벌 로펌 Dentons는 중국 로펌 Dacheng과의 제휴를 해지했는데, 이는 새로운 사이버 보안 및 데이터 보호 규정으로 인해 제휴가 불가능해졌기 때문임
          + 중국은 아직 자국 컨설팅 강자를 만들어내지 못했지만, 이미 외국 기업들의 활동을 어렵게 만들기 시작했음
               o Bain의 상하이 사무소 직원들은 작년 중국 당국의 조사를 받았는데, 이유는 알려지지 않았음
               o 3월 22일에는 중국 정부가 PwC의 에버그란데 감사 업무를 조사하고 있다고 보도되었는데, 에버그란데는 중국 정부로부터 매출을 부풀렸다는 혐의를 받고 있는 부도난 중국 부동산 개발업체임
               o 이는 PwC의 중국 내 컨설팅 사업에 타격을 줄 수 있음
     * 중국과의 관계뿐만 아니라 다른 국가와의 관계도 문제를 일으키고 있음
          + 2월 BCG, 맥킨지, 소규모 컨설팅사 Teneo의 경영진들과 딜메이커 Michael Klein은 사우디아라비아 국부펀드를 위한 업무 내역을 제출하지 않았다는 이유로 워싱턴의 의회 위원회에 소환되었음
          + 위원회는 사우디아라비아가 골프 등 스포츠 투자를 통해 미국에서 ""소프트 파워""를 구축하려는 노력을 조사하고 있음
          + 맥킨지와 BCG는 사우디아라비아 직원들이 고객을 위해 한 일을 공개하면 투옥될 수 있다고 말했음
          + 최근 석유 부국들이 경제 다각화를 모색하면서 컨설팅에 돈을 쏟아붓고 있어, 걸프 지역은 컨설턴트들에게 드문 희망이 되고 있음

두번째, ESG에 대한 열정 약화

     * 비평가들이 ""woke capitalism""이라고 비난하는 ESG에 대한 열정 약화는 컨설팅 산업 회복에 두 번째 위협으로 작용하고 있음
     * 최근 몇 년 동안 대형 컨설팅 회사들은 ESG, 특히 탈탄소화 관련 사업에 많은 투자를 해왔음
          + 2021년 맥킨지는 지속가능성 컨설팅 회사 3곳을 인수했음
          + 2022년 액센추어는 5곳을 인수했음
     * 지금까지는 이러한 투자가 성과를 내고 있는 것으로 보임
          + BCG의 CEO인 Christoph Schweizer는 2022년에 인수한 환경 컨설팅 회사 Quantis와 함께 지속가능성이 작년 회사의 가장 빠르게 성장하는 분야 중 하나였다고 말함
     * 그러나 이러한 성장세가 계속될지는 불확실함
          + 미국의 공화당 주도 주(플로리다, 미주리, 텍사스 등)에서는 세계 최대 자산운용사인 블랙록이 투자 시 ESG를 고려하는 것에 항의하며 자금을 철수했음
          + Source Global Research가 1월에 실시한 설문조사에 따르면, 컨설팅 고객들은 올해 우선순위에서 지속가능성 프로젝트를 10위로 꼽았는데, 이는 2023년의 4위에서 하락한 것임
          + 일부 컨설팅 업계 원로들은 특정 고객들이 기후 목표를 축소하고 있다고 인정함
          + 한 고위 인사는 소비자들이 경제적으로 어려워져 친환경 제품에 더 많은 비용을 지불하기 어려워졌다고 말함

세번째, 기술 변화의 도전

     * ""Great 8""이 직면한 세 번째이자 가장 까다로운 도전과제는 기술 변화임
     * 지난 수년간 고객들은 낡은 시스템을 현대화하는 데 컨설팅 회사들의 도움을 받아왔음
     * 그러나 이제는 컨설턴트들 자신이 디지털 혼란에 직면하고 있음
          + 한 대형 사모펀드 회사의 CEO는 딜메이커들이 인수 대상 기업을 평가하는 데 필요한 분석을 위해 고가의 컨설턴트 대신 소프트웨어 도구와 데이터 제공업체를 활용하고 있다고 말함
          + 과거 수많은 컨설턴트들이 몇 시간씩 소요했던 기업의 지출 습관 데이터 수집 및 분류 등의 작업은 이제 버튼 하나로 처리할 수 있게 되었음
     * 그러나 컨설팅 회사들도 가만히 있지 않음
          + 예를 들어 Bain은 웹스크래핑 프로그램 등 멋진 도구를 활용해 기업 실사 방식을 재설계했음
          + 또한 AI보다 한 발 앞서기 위해 노력하고 있음
               o 맥킨지는 작년 8월 자사의 프레임워크와 기타 지적 재산을 학습한 ChatGPT 같은 챗봇 Lilli를 출시했는데, 컨설턴트들이 이를 활용해 업무 속도를 높일 수 있음
               o 다른 회사들도 뒤를 이었음
          + Bain의 총괄 파트너인 Manny Maceda는 이런 챗봇이 컨설턴트들이 고객의 ""조직적 현실""을 더 잘 이해할 수 있는 시간을 확보해 줄 것으로 예상함

새로운 기회 창출

     * ""생성형"" AI에 대한 고객들의 열광은 새로운 사업 기회를 만들어내고 있음
          + BCG의 Christoph Schweizer는 이 기술과 관련하여 고객들과 이미 수백 개의 프로젝트를 완료했다고 말함
          + Accenture는 지난 6개월 동안 11억 달러 규모의 생성형 AI 작업을 수주했음
     * 이러한 작업의 상당 부분은 AI를 개발하는 기술 기업들과 협력하여 이루어지고 있음
          + Accenture는 Microsoft와 협력해왔음
          + 3월 Accenture는 맥킨지도 제휴한 AI 모델 구축업체 Cohere와 파트너십을 발표했음
          + Bain은 ChatGPT 개발사 OpenAI와 제휴를 맺었음
          + BCG는 또 다른 AI 기업 Anthropic과 협력하고 있음
     * 이러한 파트너십은 컨설턴트들에게 반가운 성장 동력으로 보임
     * 그러나 시간이 지나면서, 특히 성공할 경우 이는 걸림돌이 될 수 있음
          + 기업 고객들이 챗봇에 익숙해질수록 실리콘밸리의 개발사들에게 직접 의뢰하는 속도가 빨라질 수 있기 때문임
          + 만약 그렇게 된다면 ""Great 8""이 AI에서 얻은 단기적 이익은 오히려 그들을 무의미하게 만들 수 있음
     * 이는 모든 전략 전문가들이 곰곰이 생각해 봐야 할 문제임

GN⁺의 의견

     * 컨설팅 산업은 과거에도 어려운 시기를 겪었지만, 이번에는 지정학, ESG, 기술 변화 등 복합적인 도전에 직면해 있음
     * 중국과의 관계 악화, ESG에 대한 열정 약화, AI 기술의 발전 등은 컨설팅 회사들에게 위협이 될 수 있음
     * 그러나 AI 기술을 활용한 업무 효율성 제고, 고객들의 ""생성형"" AI에 대한 관심 등은 새로운 기회가 될 수도 있음
     * 컨설팅 회사들은 이러한 도전과 기회를 균형 있게 바라보고, 장기적인 관점에서 전략을 수립할 필요가 있음
     * 특히 AI 기술의 발전으로 인해 컨설팅 회사들의 역할이 축소될 가능성도 있으므로, 이에 대한 대비가 필요해 보임

   예전에 썼던 이런 글이 떠오르네요
   https://haebom.dev/1q3vdn2pkvp68mxy49pr

   흥미로움 글입니다

        Hacker News 의견

     * 소프트웨어 엔지니어로 일하면서 비즈니스를 이해하게 되었음. ROI가 짧은 일을 하는 것이 중요하다는 것을 깨달았음
          + 단기적인 결과를 기대하는 사람들과 소프트웨어를 개발하는 것이 끔찍하다는 것을 깨달았음
          + 다양한 배경을 가진 사람들과의 교류가 그리움
          + 소프트웨어 작동 방식을 설명하는 데 많은 시간을 보냈음
          + 현재의 직업에 만족하며, 과거의 경험에서 많은 것을 배웠음
     * BCG에서 일했던 경험을 바탕으로, 컨설팅 수익의 대부분이 순수 전략 작업에서 나오지 않는다는 점을 강조함
          + 대규모 합병 통합, 디지털 전환 등 대형 프로젝트가 더 많은 수익을 창출함
          + 작은 팀으로 순수 전략 작업을 수행하는 것은 쉽지 않음
          + 경제 상황이 어려워지면 이러한 프로젝트가 먼저 삭감됨
     * 대형 컨설팅 회사들이 도덕적으로 부패하고 규제가 부족하다고 주장함
          + CEO의 결정을 뒷받침하는 역할을 하며, 책임을 회피하는 수단으로 사용됨
     * 인도 관료 친구의 경험을 통해 McKinsey가 정보를 수집하고 이를 다시 제공하는 방식에 대해 이야기함
     * 컨설팅 회사들이 기술 인재를 보유하고 있으며, 대규모 데이터 프로젝트를 수행함
          + 비용이 높고, 원격 근무를 통해 저렴한 기술 인력을 확보하는 것이 가능해짐
     * 대형 컨설팅 회사들은 규모가 크고 유명한 것이 중요함
          + 논란이 되는 결정을 내릴 때 유명한 회사의 이름을 빌려 신뢰성을 얻음
     * 현재 McKinsey의 상황에 대해, 경제적 불확실성 시기에 컨설팅이 어려움을 겪지만, 상황이 나쁘거나 좋을 때는 잘 해나간다고 언급함
     * 정치적 이유로 인해 회사들이 McKinsey에 계속 비용을 지불한다고 주장함
          + McKinsey 파트너들이 CEO가 되었지만 실패한 사례가 많음
     * McKinsey가 최근 몇 차례의 리뷰 사이클 동안 ""조용한 해고""를 진행하고 있다고 언급함
          + 충분한 작업이 없어서 인력을 줄이는 방식임
"
"https://news.hada.io/topic?id=17230","Wordpress 대안 플랫폼들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Wordpress 대안 플랫폼들

     * WordPress와 관련된 최근의 모든 상황들로 인해, 다양한 기준을 충족하는 대안적인 CMS 목록을 작성
     * 현대의 CMS 환경은 매우 광범위하며, ""콘텐츠 관리 시스템""의 정의 자체가 확장되고 있음
     * 어떤 이들은 이를 패키지형 웹사이트 플랫폼으로 보고, 어떤 이들은 별도로 저장된 콘텐츠를 위한 UI로 봄
     * 이번 목록의 기준은 다운로드 받아 서버에 올리면 웹사이트를 가질 수 있는지 여부임
          + 이는 API 및 Git 기반 CMS를 제외시키는데, 많은 이들에게 ""도구들을 연결""(Daisy Chain)하는 것은 실행 가능한 방법이 아님

    Ghost: 최고의 오픈 소스 블로그 및 뉴스레터 플랫폼

     * Ghost는 이메일 뉴스레터와 유료 구독이 내장된 아름답고 현대적인 출판 플랫폼임
     * Platformer, 404Media, Lever News, Tangle, The Browser 등에서 사용 중임
     * Magic Pages를 통해 Ghost CMS를 빠르게 설정할 수 있으며, 월 $4부터 시작하는 저렴한 가격으로 제공됨
          + 다만, 이는 Ghost의 자체 호스팅 옵션인 Ghost Pro를 우회하는 것인데, 과거 다른 고객들과의 경험으로 봤을때 주의가 필요함

    Kirby: 프로젝트에 적응하는 CMS

     * Kirby는 개발자, 디자이너, 창작자 및 클라이언트를 위한 파일 기반 CMS임
     * 데이터베이스 없이 파일로 콘텐츠를 관리할 수 있어, 데이터베이스 사용에 부담을 느끼는 사용자에게 적합함

    Indiekit: 독립 웹과 연결하는 작은 서버

     * Indiekit은 파일 기반이지만 기존 콘텐츠 관리를 위해 데이터베이스가 필요함.

    Craft CMS: 사용자 친화적인 맞춤형 디지털 경험 생성

     * Craft CMS는 상업적인 옵션이지만, 개인 창작자를 위한 무료 옵션도 제공함
     * 콘텐츠 구조를 설계하는 데 시간이 필요할 수 있음

    ClassicPress: 안정적이고 가벼운 CMS

     * ClassicPress는 WordPress의 포크로, WordPress 클래식 편집기를 기본 옵션으로 유지함
     * WordPress 플러그인 API를 사용하므로 완전히 독립적이지 않음

    Statamic: Laravel 기반의 강력한 CMS

     * Statamic은 Laravel과 Git을 기반으로 한 오픈 소스 CMS로, 관리하기 쉬운 웹사이트 구축을 지원함.
     * 무료 개인 플랜을 제공하며, Craft CMS와 유사함.

    Wagtail CMS: Django 기반의 오픈 소스 CMS

     * Wagtail은 Python으로 구동되는 오픈 소스 Django CMS로, 설치가 비교적 간단함.
     * Wagtail은 아마도 WordPress와 가장 유사한 CMS

    Textpattern CMS: 오픈 소스 콘텐츠 관리 시스템

     * Textpattern은 PHP 기반의 오픈 소스 CMS로, 50개 이상의 언어로 제공되는 브라우저 기반 인터페이스를 가짐.

    Anchor CMS: 간단한 PHP 기반 CMS

     * Anchor는 간단한 테마 및 사용자 정의 유형을 제공하는 PHP 기반 CMS였으나, 현재는 유지되지 않음.

GN⁺의 정리

     * Ghost, Kirby, Indiekit, Craft CMS, ClassicPress, Statamic, Wagtail, Textpattern 등 다양한 CMS를 소개하고 있음
     * 기존 WordPress 사용자라면 ClassicPress 같은 포크 버전을 시도해 볼 만함
     * 단순한 블로그 운영이 목적이라면 Ghost나 Textpattern 같은 경량 CMS도 좋은 선택지가 될 수 있음

   https://strapi.io/headless-cms/comparison/strapi-vs-wordpressheadless

        Hacker News 의견

     * Jekyll과 GitHub Pages를 사용하면 간단한 개인 블로그를 쉽게 만들 수 있음. 로컬에 Jekyll을 설치할 필요 없이 GitHub에 글을 작성하고 푸시하면 됨. GitHub에는 VSCode 버전이 내장되어 있어 편리함.
          + Jekyll은 로컬에서 컴파일 시간이 오래 걸리지만, 글쓰기에 방해되지 않도록 사용 중임.
          + WordPress 대체로는 시작하기 쉬운 것을 찾기 어려움. WordPress는 20년간 많은 기능을 제공해 왔음.
          + GitHub Pages는 최근 3년간 다운타임 없이 안정적임.
     * WordPress는 기술적 지식 없이도 웹사이트를 쉽게 만들 수 있어 인기가 많음. 대부분의 호스트가 WordPress를 기본 설치하여 서버에 소프트웨어를 설치할 필요가 없음.
          + Wix, Squarespace, Shopify 같은 웹사이트 빌더가 대안이 될 수 있음. Ghost의 호스팅 버전도 괜찮음.
     * Dotclear는 WordPress의 실제 대안으로, 웹 기반 블로그 엔진임.
          + WordPress는 설정과 테마 커스터마이징이 복잡했지만, Dotclear는 간단하고 빠르게 설정할 수 있었음.
          + Dotclear는 WordPress보다 오래된 2002년에 출시됨.
     * WordPress 대안으로는 자체 호스팅 가능하고, 오픈소스 코어를 가진 CMS가 필요함.
          + ACF와 유사한 기능, Gutenberg와 유사한 비주얼 컴포저, REST API가 필요함.
          + Ghost는 ACF가 없고, Astro는 너무 커스터마이즈되어 있음.
     * Processwire는 몇 년 전 사용했을 때 매우 만족스러웠음. Craft는 강력한 전자상거래 기능을 제공하지만, 테스트에서는 약간 느림.
     * Wagtail CMS는 Python/Django 기반으로 개발자와 사용자 경험이 뛰어남.
          + Gutenberg와 유사한 블록 기반 콘텐츠 편집기와 접근성 지원을 제공함.
     * Bear는 간단한 블로그 플랫폼으로 사용하기 쉬움. 지원도 친절하고 반응이 빠름.
     * Drupal은 브라우저에서 실행 가능한 CMS로, 반응형 테마, 다국어 기능, 보안 팀을 제공함.
          + 새로운 AI 이니셔티브로 사이트를 채팅을 통해 구성할 수 있음.
          + 네이티브 상거래와 CRM 모듈을 활용하여 통합된 프레임워크를 제공함.
          + Drupal ECA라는 코드 없는 스위트도 있음.
     * Astro를 Deno Deploy에 배포하여 사용 중이며, 매우 재미있고 쉬움.
          + Svelte와 Deno 파일을 복사하여 쉽게 작동함.
          + Notion과 Airtable에서 콘텐츠를 가져와 Deno KV에 캐싱함.
     * WordPress의 큰 대안으로 Joomla, Typo3, Drupal이 있음.
"
"https://news.hada.io/topic?id=17319","JSON 패치의 강력한 기능 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          JSON 패치의 강력한 기능 활용하기

     * JSON Patch는 RFC 6902에 정의된 표준 형식으로, JSON 문서를 수정하는 방법임
          + HTTP를 통해 리소스를 부분적으로 업데이트하는 간단하고 효율적인 방법을 제공
          + 기존의 PUT 및 POST 메서드는 전체 데이터를 전송해야 했지만, PATCH 메서드는 부분 업데이트를 허용
     * JSON Patch는 JSON 문서에 대한 명확하고 간결한 변경 표현을 제공하여 대역폭을 줄이고 웹 애플리케이션의 성능을 향상시킴

JSON Patch의 작동 원리

     * JSON Patch는 JSON 문서에 대한 일련의 원자적 작업으로 작동함.
     * 각 작업은 op 필드와 path 필드를 포함하며, 이는 문서의 특정 위치에서 작업을 수행함.
     * 예를 들어, add 작업은 새로운 필드를 추가하고, replace 작업은 기존 필드를 대체함.

JSON Pointer

     * JSON Patch는 JSON Pointer를 사용하여 문서의 특정 부분을 식별함.
     * JSON Pointer는 슬래시(/)로 구분된 토큰 문자열로, 문서의 계층 구조를 식별함.
     * 예를 들어, /user/name은 user 객체 내의 name 필드를 식별함.

JSON Patch의 장단점

  장점

    1. 정밀성: 복잡한 구조에서 특정 요소를 정확하게 수정 가능함.
    2. 효율성: 변경 사항만 전송하여 데이터 전송량과 지연 시간을 최소화함.
    3. 원자성: 작업 실패 시 전체 작업을 롤백 가능함.
    4. 멱등성: 안전하게 재시도 가능함.
    5. 복잡한 작업: 요소를 이동하거나 복사할 수 있음.
    6. 검증: API는 들어오는 패치를 검증하여 잘못된 요청을 줄임.
    7. 표준 기반: 다양한 클라이언트 및 서버와 쉽게 통합 가능함.
    8. 필드 수준 접근 제어: 세밀한 수준에서 수정 제한 가능함.
    9. 배치 작업: 여러 변경 사항을 하나의 요청으로 처리 가능함.

  단점

    1. 복잡성: 복잡한 JSON 구조를 다루기 어려움.
    2. 유지보수 비용: API가 발전함에 따라 경로가 무효화될 수 있음.
    3. 디버깅 어려움: 여러 작업이 함께 배치될 경우 추적이 어려움.
    4. 객체 순서 보존: 이동 작업이 객체의 순서를 보장하지 않음.
    5. 보안 문제: 잘못된 요청 처리 시 취약점 발생 가능함.

JSON Patch 작업 예시

     * Add: 새로운 필드를 추가함.
     * Remove: 기존 필드를 제거함.
     * Replace: 기존 필드를 새로운 값으로 대체함.
     * Move: 요소를 다른 위치로 이동함.
     * Copy: 요소를 다른 위치로 복사함.
     * Test: 특정 경로에 값이 설정되어 있는지 테스트함.

도구 및 라이브러리에서의 JSON Patch

     * 다양한 프로그래밍 언어에서 JSON Patch를 지원하는 라이브러리가 존재함 : fast-json-patch, python-json-patch, JsonPatch library in .NET 등
     * JSON 패치를 배우기 위한 훌륭한 도구는 JSON 패치 명령을 실행하기 위한 무료 온라인 서비스인 jsonpatch.me 임. API도 있음

  GN⁺의 정리

     * JSON Patch는 JSON 문서의 부분 업데이트를 효율적으로 수행할 수 있는 강력한 도구임.
     * 복잡한 JSON 구조를 다루는 데 어려움이 있을 수 있지만, 다양한 라이브러리와 도구를 통해 이를 극복할 수 있음.
     * JSON Patch는 데이터 전송량을 줄이고, 웹 애플리케이션의 성능을 향상시키는 데 유용함.
     * JSON Merge Patch와 같은 대안도 고려할 수 있으며, API 개발에 있어 JSON Patch의 사용은 효율성을 높일 수 있음.

        Hacker News 의견

     * JSON Patch는 모든 JSON 문서를 수정할 수 있도록 설계되어 복잡하게 느껴짐. 데이터 세트를 약간 제한하면 문서를 더 간단하게 패치할 수 있음. 예를 들어, Firebase에서는 null 값을 저장할 수 없으며 null로 설정하면 삭제를 의미함. 이처럼 간단한 제한을 통해 PATCH를 쉽게 구현할 수 있음. ""null은 삭제를 의미""라는 점 외에는 새로운 것을 배울 필요가 없다는 점이 API의 훌륭한 기능임.
     * JSON의 구분자로 &#x2F;를 사용하는 것은 이상한 선택임. JSON은 JS의 하위 집합이므로 .를 구분자로 기대했음. &#x2F;를 보면 백엔드 사람들이 작성한 사양일 것 같고, 경로를 URL로 만들어 상대/절대 경로의 모호성을 해결하려는 것 같음.
     * 경로가 문자열이 아닌 배열이어야 한다고 생각함. 그렇지 않으면 &#x2F;를 키에서 이스케이프해야 하고 경로 문자열을 구문 분석해야 함. 이는 임의의 JSON 문서를 처리할 수 없게 만듦.
     * JSON Patch를 한 번 사용한 적이 있으며, 예상치 못한 문제를 빠르게 해결하기 위한 해킹으로 사용했음. 해외 계약자들이 텍스트 데이터를 단어 수준에서 주석을 달 수 있도록 웹 인터페이스를 구축했음. 데이터가 작은 청크로 주석이 달릴 예정이었으나, 전체 문서에 할당되면서 주석이 저장되지 않는 문제가 발생했음. JSON Patch를 발견하고 업로드 코드를 패치만 사용하도록 수정했음.
     * JSON Patch의 경로 지정 방식에서 배열의 항목을 인덱스가 아닌 식별 키-값 쌍으로 선택할 수 있는 표준 구문이 필요함. 이는 특히 항목을 추가하거나 이전 버전의 JSON 항목의 차이를 분석할 때 중요함.
     * JSON Patch의 강점 중 하나는 멱등성임. JSON Patch 작업은 의도하지 않은 부작용 없이 안전하게 재시도할 수 있음. 그러나 배열에 항목을 추가할 수 없다는 점은 놀라웠음.
     * MongoDB 업데이트 쿼리와 유사하게 작동함. 로컬 파일에서 전체 MongoDB를 실행하지 않고도 업데이트 언어를 사용할 수 있는지 궁금함.
     * JSONDiffpatch와 JSON Patch의 비교가 필요함. JSONDiffpatch는 브라우저와 노드/클라우드플레어 워커 등에서 잘 작동함.
     * JSON Patch를 외부 파트너에게 배우도록 설득하는 데 어려움이 있었음. 고객 대상 API에서 사용했으며, 사용자가 이해하고 채택하도록 많은 노력을 기울였음.
     * JSON Pointer 사양이 ""URL-y""하게 느껴져 메타-JSON 구문을 건너뛸 수 있을 것 같음. ""test""와 ""copy""는 JSON Patch 사양에서 고유하며, 여러 편집을 한 번에 수행하는 ""트랜잭션""도 가능함.
"
"https://news.hada.io/topic?id=17337","Firefox Send의 오픈 소스 포크 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Firefox Send의 오픈 소스 포크 출시

     * 파일 공유 기능
       파일을 드래그 앤 드롭하거나 클릭하여 최대 2.5GB까지 업로드 가능함
       간단하고 개인적인 파일 공유를 제공함
     * 보안 및 프라이버시
       파일을 종단 간 암호화하여 공유할 수 있으며, 자동으로 만료되는 링크를 통해 프라이버시를 유지할 수 있음
       공유한 파일이 온라인에 영구적으로 남지 않도록 보장함
     * 기타 정보
       Mozilla나 Firefox와 관련이 없으며, 기부를 통해 지원 가능함

GN⁺의 정리

   이 서비스는 파일을 안전하게 공유할 수 있는 방법을 제공하여, 개인 정보 보호에 민감한 사용자에게 유용할 수 있음. 자동 만료 링크를 통해 파일이 영구적으로 온라인에 남지 않도록 하여 보안성을 높임. 비슷한 기능을 제공하는 서비스로는 WeTransfer, Dropbox 등이 있음. 이러한 서비스는 파일 공유의 편리함과 보안성을 동시에 제공함.

   https://news.hada.io/topic?id=4210

        Hacker News 의견

     * 작성자에게 행운을 빌며, 대용량 파일 공유가 쉽고 익명성을 보장할 경우 CSAM 문제로 인해 서비스가 중단되는 경우가 많음을 이해함
          + LocalSend를 사용하여 로컬 네트워크에서 장치 간 파일을 공유함이 매우 유용함
     * Mozilla의 서비스가 오픈 소스임을 강조하며, 제목이 오해를 불러일으킬 수 있음을 지적함
          + Mozilla의 서비스는 폐쇄형이 아니며, 이미 취소된 상태임
     * 그룹 내 파일 공유를 위한 저장소가 필요함을 언급함
          + 예를 들어, WiFi가 없는 그린란드에서 여행 중인 친구들이 하루 동안 찍은 사진을 공유하고 싶을 때 유용할 것임
     * 서버를 보유한 사람들에게 ProjectSend를 사용하여 파일을 공유할 것을 권장함
          + 개인적으로 사용해본 결과 만족스러웠음을 공유함
     * LocalSend와 Syncthing을 조합하여 파일을 쉽게 동기화하는 방법을 설명함
          + Syncthing은 파일 충돌이 발생할 때까지 존재를 느끼지 못할 정도로 잘 작동함
     * 1GB 이상의 파일 공유가 여전히 어려운 점을 지적하며, 자가 호스팅의 용이성을 질문함
          + GitHub와 GitLab의 링크가 혼란스러움을 언급함
     * filebin.net과 pwndrop 등 다양한 파일 공유 옵션을 소개함
     * 자가 호스팅을 통해 가장 잘 작동하는 파일 공유 앱을 사용 중임을 공유함
          + 파일이 일시적이며 Cloudflare로 보호됨
     * Mozilla가 서비스를 중단했지만, 저장소를 유지하여 패치를 받을 수 있도록 했어야 한다고 주장함
          + 자가 호스팅이 유용하며, 특정 IP만 업로드를 허용할 수 있어 편리함
          + 현재 Project Send를 사용 중임
"
"https://news.hada.io/topic?id=17314","제2형 당뇨병: 새로운 치료법으로 86% 환자 인슐린 필요성 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  제2형 당뇨병: 새로운 치료법으로 86% 환자 인슐린 필요성 제거

     * 새로운 치료법의 소개
          + ReCET와 semaglutide를 결합한 새로운 치료법이 제2형 당뇨병 환자의 인슐린 사용을 86% 줄이는 데 성공함
          + 이 치료법은 안전하고 잘 견딜 수 있는 것으로 나타났으며, 추가 연구가 계획됨
     * 연구 설계 및 결과
          + 첫 번째 인간 대상 연구는 14명의 참가자를 포함하며, 참가자들은 28세에서 75세 사이였음
          + ReCET 절차는 깊은 진정 상태에서 수행되었으며, 참가자들은 2주간의 등열량 액체 식단을 따름
          + semaglutide는 점진적으로 1mg/주로 증량되었음
          + 6개월 및 12개월 추적 조사에서 86%의 참가자가 인슐린 치료가 필요하지 않게 되었으며, 24개월까지 이 성공이 지속됨
          + 모든 환자는 혈당 조절을 유지하였으며, HbA1c 수치는 7.5% 이하로 유지됨
     * 내약성 및 안전성
          + semaglutide의 최대 용량은 93%의 참가자에게 잘 견딜 수 있었으며, 한 명은 메스꺼움으로 인해 최대 용량으로 증량할 수 없었음
          + 모든 환자는 ReCET 절차를 성공적으로 완료하였으며, 심각한 부작용은 보고되지 않음
     * 연구자의 의견 및 향후 계획
          + 연구의 주저자인 Dr. Celine Busch는 ReCET가 semaglutide와 결합하여 인슐린 치료의 필요성을 효과적으로 제거할 수 있음을 시사한다고 언급함
          + ReCET는 일일 약물 복용이 필요 없는 치료법으로, 제2형 당뇨병 관리에서 지속적인 환자 순응 문제를 해결함
          + 연구자들은 더 큰 무작위 대조 시험을 계획하고 있으며, EMINENT-2 시험을 진행 중임

GN⁺의 정리

     * ReCET와 semaglutide를 결합한 새로운 치료법은 제2형 당뇨병 환자의 인슐린 의존도를 크게 줄일 수 있는 가능성을 보여줌
     * 이 연구는 인슐린 치료의 부작용을 줄이고, 환자의 삶의 질을 향상시킬 수 있는 혁신적인 접근법을 제시함
     * 향후 연구를 통해 이 치료법의 효과와 안전성을 더욱 확립할 필요가 있음
     * 유사한 기능을 가진 다른 치료법으로는 GLP-1 수용체 작용제와 같은 약물이 있음

        Hacker News 의견

     * 수술과 엄격한 식이 조절이 성공률에 큰 영향을 미친다는 의견이 있음. 비만 수술의 금식이 절차의 이점의 큰 부분을 차지한다는 연구가 있음
          + 제2형 당뇨병을 초기 단계에서 잡으면 금식이 가장 좋은 치료법이라는 의견이 있음. 며칠간 금식하면 혈당 조절이 크게 개선됨
          + 베타 세포가 손상되면 인슐린이 필요하지만, 체중 감량으로 필요량을 줄일 수 있음
     * 치료의 주요 요소가 체중 감량이라는 점에 놀라지 않음. 체중 감량이 제2형 당뇨병을 역전시킨다는 이야기를 오랫동안 들어왔음
     * 이 논의는 제1형 당뇨병이 아닌 제2형 당뇨병에 관한 것임
     * Recellularization via electroporation therapy (ReCET)는 세포 사멸과 재상피화를 유도하는 새로운 내시경 절차임
     * 연구 제목에 ""n=14""가 포함되었으면 좋겠다는 의견이 있음
     * 저렴한 인슐린이 미국에서 가능해질 가능성에 대한 제약 회사의 대응이라는 비관적인 의견이 있음
     * 다른 절차를 설명하는 연구 논문이 있음
     * 건강하지 않은 식단과 생활 방식이 인슐린 저항성을 다시 초래하기까지 치료가 얼마나 지속되는지에 대한 의문이 있음
          + 제2형 당뇨병은 식단으로 100% 관리 가능하다는 의견이 있음. 운동 없이도 건강한 식사를 하면 됨
          + 연속 혈당 모니터를 사용하면 건강한 식단이 무엇인지 정확히 알 수 있음
     * 미국에서 ozempic 또는 tirzepatide에 매달 $600-$1000이 필요하다는 의견이 있음
     * 14명의 참가자가 있었음
"
"https://news.hada.io/topic?id=17257","세계 콩커 챔피언, 철제 체스트넛 발견 후 부정행위 혐의 벗어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   세계 콩커 챔피언, 철제 체스트넛 발견 후 부정행위 혐의 벗어

세계 콘커 챔피언십에서의 부정행위 의혹

     * 세계 콘커 챔피언십에서 남자 우승자가 철제 밤을 소지한 채 발견되어 부정행위 의혹이 제기됨
     * 데이비드 제이킨스는 1977년부터 참가한 후 처음으로 노샘프턴셔 사우스윅에서 열린 연례 대회에서 우승함
     * 그러나 82세의 제이킨스는 우승 후 주최 측의 수색에서 금속 모조품을 소지한 것으로 밝혀짐
     * 은퇴한 엔지니어인 제이킨스는 대회에서 금속 밤을 사용하지 않았다고 부인함
     * 제이킨스는 대회의 최고 심판으로서 다른 참가자들의 밤에 구멍을 뚫고 끈을 삽입하는 역할을 맡았음

부정행위 의혹과 반응

     * 알래스터 존슨-퍼거슨은 제이킨스와의 결승전에서 패배한 후 ""부정행위""를 의심한다고 발언함
     * 23세의 존슨-퍼거슨은 ""내 밤이 한 번의 타격에 부서졌다""며 주최 측에 놀라움을 표함
     * 인디애나폴리스 출신의 켈시 반슈바흐는 남자 챔피언을 결승에서 꺾고 첫 미국인 우승자가 됨
     * 제이킨스는 철제 밤을 소지한 것은 유머를 위한 것이며 대회 중 사용하지 않았다고 주장함

대회 주최 측의 대응

     * 세인트 존 버켓, 세계 콘커 챔피언십 대변인은 부정행위 의혹을 조사 중이라고 밝힘
     * ""킹 콘커가 실제 밤을 금속 밤으로 바꿨다는 의혹이 제기됨""
     * ""각 라운드 전에 참가자들은 자루에서 밤을 선택함""
     * ""킹 콘커가 더 단단한 밤의 끈을 표시했다는 주장도 있음""
     * 대회 전 2,000개 이상의 밤이 준비됨

GN⁺의 정리

     * 세계 콘커 챔피언십에서의 부정행위 의혹은 대회의 공정성을 위협하는 중요한 문제임
     * 대회 주최 측의 철저한 조사가 필요하며, 이러한 사건은 대회의 규칙과 절차를 강화하는 계기가 될 수 있음
     * 콘커 대회는 전통적인 스포츠로, 이러한 사건이 대회의 명성을 해치지 않도록 주의가 필요함
     * 유사한 기능을 가진 다른 전통 스포츠로는 '페탕크'와 '보체' 등이 있음

        Hacker News 의견

     * 한 사람이 부정행위에서 벗어났다는 의견이 있음
     * VAR에 의해 부정행위에서 벗어났다는 의견이 있음
     * 어린 시절 conkers라는 게임을 했던 경험을 공유함
          + conkers는 영국과 아일랜드에서 전통적으로 하는 어린이 게임임
          + 말밤나무 씨앗을 사용하여 상대방의 conker를 부수는 게임임
     * conkers 세계 챔피언십에 대한 의심을 표현함
          + 대회 준비에 관여한 사람이 참가자가 되어서는 안 된다는 의견
          + 철제 모조 conker를 소지한 사람이 어떻게 무죄 판결을 받을 수 있는지 의문을 제기함
     * 아일랜드 학교에서 conker 챔피언십의 복잡한 규칙을 경험했음을 확인함
          + conkers를 강화하기 위해 다양한 방법이 사용되었음
          + 규칙이 종종 깨졌고, 재미있었음
     * Hitchhiker's Guide를 읽고 conkers에 대해 처음 알게 되었던 경험을 공유함
          + conkers가 무엇인지 알기 위해 몇 년을 기다려야 했음
     * 어린 시절 conkering을 하던 중 친절한 이웃이 conkers를 나눠준 경험을 공유함
     * conkers를 주머니에서 꺼내는 방식에 놀라움을 표현함
          + conkers를 찾는 재미가 사라졌다는 의견
          + conkers를 강화하기 위한 다양한 방법이 있었음
     * conkers 게임이 영국과 아일랜드에서 얼마나 잘 알려져 있는지에 대한 의문을 제기함
          + 철제 모조 conker가 명백히 유리하다는 의견
     * 일부 사람들은 conkers를 구매하지만, 본인은 무료로 얻는다는 경험을 공유함
"
"https://news.hada.io/topic?id=17331","AdaCore, Rust 컴파일러에 대한 첫번째 인증 획득(2023년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AdaCore, Rust 컴파일러에 대한 첫번째 인증 획득(2023년)

   TUV SUD는 ISO 26262에 따라 러스트 컴파일러에 대한 최초의 자격 인증서를 발급했습니다.

   AdaCore는 TüV SüD가 ISO 26262의 최고 인증 수준인 ASIL D를 요구하는 소프트웨어 애플리케이션 개발에 사용할 수 있는 최초의 Rust 컴파일러 자격 인증서를 발급했다고 발표했습니다.

   해당 인증은 2023년에 발급되었습니다. https://finance.yahoo.com/news/…

   아... 2023을 2003이라고 적었군요 ㅠ 오늘따라 여기저기 오타가 많네요 ㅠㅠ

   ISO 26262는 자동차 분야의 기능 안전성 표준입니다.
   ISO 26262 개요
"
"https://news.hada.io/topic?id=17324","Svelte 5 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Svelte 5 출시

     * Svelte는 웹 애플리케이션을 구축하는 새로운 방법
          + 선언적 컴포넌트를 효율적인 JavaScript로 변환하여 DOM을 정밀하게 업데이트하는 컴파일러
     * 5.0 변경사항
          + 더욱 향상된 성능
          + Rune을 통한 더욱 세분화된 Reactivity 시스템
          + 스니펫과 이벤트 속성으로 더욱 표현력이 풍부한 템플릿 구문
          + 네이티브 타입스크립트 지원
          + 이전 구문과의 하위 호환성 제공

GN⁺의 정리

     * Svelte는 웹 애플리케이션 개발을 위한 혁신적인 방법을 제공하며, 컴파일러를 통해 효율적인 JavaScript로 변환함
     * SvelteKit은 완전한 애플리케이션 구축을 위한 도구로, 개발자들이 쉽게 시작할 수 있도록 지원함
     * React나 Vue와 같은 다른 프레임워크와 비교해 간결하고 빠른 성능을 제공함
     * 웹 개발에 관심 있는 사람들에게 유용하며, Svelte의 간결함과 성능을 경험해볼 것을 추천함

   Svelte 개발자나 관계자세요?

   https://news.hada.io/user?id=neo

     저는 기사를 요약하는 GeekNews AI Bot 입니다.

        Hacker News 의견

     * Svelte 5를 사용하면서 복잡한 앱을 만들 때 장기적으로 유리하다는 의견이 있음. 초기에는 Svelte 4보다 코드가 더 필요할 수 있지만, 복잡한 앱에서는 더 나은 결과를 제공함. $state() runes를 .svelte 파일에서 .svelte.ts 파일로 이동하여 데이터 지향 구조를 구축하는 방식이 유용함. 이를 통해 복잡한 상태 관리가 필요 없을 수 있음.
     * Svelte를 추천하는 이유로, 복잡한 프레임워크를 배우지 않고도 프로젝트를 빠르고 효율적으로 구축할 수 있다는 점을 들고 있음. 예시로 주말 동안 Svelte로 만든 간단한 프로젝트를 언급함.
     * React의 인기가 이해되지 않으며, Svelte와 Vue가 있는 상황에서 새로운 프로젝트에 React를 사용할 이유가 없다는 의견이 있음.
     * Github의 changelog에 따르면, 새로운 버전은 성능 향상, 더 세밀한 반응성 시스템, 표현력 있는 템플릿 문법, 네이티브 TypeScript 지원, 이전 문법과의 호환성을 제공함.
     * React의 사용자 점유율을 줄이고 더 많은 회사들이 Svelte를 채택하기를 희망하지만, 대기업에서는 시간이 걸릴 것이라는 의견이 있음. Angular와 React가 지배하던 시기에 프론트엔드 개발을 피했지만, Svelte와 Astro는 이해가 되며, 이러한 새로운 프레임워크로 프론트엔드로 돌아가고 싶다는 의견이 있음.
     * Svelte를 사랑하며 개인 및 회사 프로젝트에 사용하지만, Svelte 5의 경우 아직 해결되지 않은 문제들이 많아 회사 프로젝트에는 조금 기다릴 예정임. 개인 프로젝트에서는 업그레이드하여 문제를 찾고 있음.
     * SvelteKit 앱에서 사용하는 UI 라이브러리에 대한 질문이 있음.
     * React를 싫어하여 Vue나 Svelte를 시도해보려는 계획이 있으며, 소셜 인증을 포함한 기본적인 부트스트랩이 있는지 궁금해함.
     * Svelte 4.0을 프로덕션에서 사용 중이며, 성능이 뛰어나고 문제의 원인이 되는 경우가 드물다는 의견이 있음. 새로운 버전을 시도해보고 싶어함. 소프트웨어 작성 능력과 일반적인 글쓰기 능력 간의 관계에 대해 궁금해하고 있음.
     * Svelte를 좋아하며, Vue와 Svelte 모두 사용 경험이 있는지 궁금해함. 두 프레임워크가 시간이 지나면서 많이 수렴된 것 같으며, 이번 릴리스로 인해 어떤 이유로 하나를 선택할지 궁금해하고 있음.

   저도 역시 스벨트가 제일 좋더라구요
   요즘은 피닉스에 live svelte 붙여 쓰는데, 여러 js 라이브러리 붙여 쓰기도 편하고 해서 아주 만족하고 있습니다.
"
"https://news.hada.io/topic?id=17248","GoSub - 새로운 웹 브라우저 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GoSub - 새로운 웹 브라우저 엔진

     * 기초부터 새로 개발한 웹 브라우저 엔진으로 다른 프로젝트가 라이브러리로 사용 가능하며, 궁극적으로는 Gosub 브라우저도 이용할 예정
     * 기본 컴포넌트들 포함
          + HTML5/CSS3 토크나이저 & 파서, Document 트리, Javascript 연결 API
          + Configuration 저장소, 네트워킹 스택, 렌더링 엔진, JS Bridge
     * 모듈러 디자인으로 다양한 컴포넌트들이 추가 및 수정되고 연동 가능
     * 개발 초기 단계로, 아직 완전한 브라우저는 아님. 간단한 HTML 페이지를 문서 트리로 파싱하고 일부 초기 렌더링을 수행할 수 있음
          + JS 엔진, 네트워킹 스택, 설정 저장소 등 다른 부분도 구현되었으나 아직 통합되지 않음.
     * Rust 기반 오픈소스

        Hacker News 의견

     * 기존 프로젝트인 Servo에 기여하는 것이 왜 불가능한지에 대한 의문이 있음. 모듈성의 이점을 거부하는지에 대한 질문이 제기됨
          + 기존 코드가 활용되고 있는지, 아니면 완전히 처음부터 시작하는 것인지에 대한 궁금증이 있음
          + 이 프로젝트가 완전히 비영리로 남을 것인지, 아니면 막대한 노력을 지원하기 위한 수익화 비전이 있는지에 대한 질문이 있음
          + 자바스크립트 엔진 작성이 범위 밖이라고 하지만, 무엇이 범위 내외인지 명확하지 않음
     * 1980년대 BASIC 프로그래머로서 프로젝트의 복잡성에 대해 놀라움을 표현함
     * Chrome/Webkit의 브라우저 시장 독점 상황을 고려할 때, 대안적 노력을 항상 환영하고 감사해야 한다고 생각함
          + 웹사이트와 아마도 AI로 생성된 로고가 프로젝트에 대해 의심스러운 느낌을 준다고 언급함
     * 프로젝트를 시작하게 된 블로그 게시물에 대한 언급이 있음
     * 기존 브라우저 엔진들이 프로젝트 창립자들의 피로로 인해 중단된 사례가 많아 우려를 표함
          + 프로젝트의 범위를 과소평가하기 쉽고, 그 범위는 점점 커지고 있음
     * Go로 작성되지 않았다면 왜 Gosub이라고 부르는지에 대한 의문이 있음. Rustsub이라고 불러야 한다고 농담함
     * Rust로 작성된 Servo에 기여하는 대신 왜 이 프로젝트에 노력을 쏟는지에 대한 질문이 있음. 두 프로젝트가 유사한 목표를 공유하지만 Servo가 큰 선행을 가지고 있다고 언급함
     * ""다른 프로젝트에 기여하지 왜 직접 하려고 하느냐""는 대화에 실망감을 표함. 스스로 무언가를 하고 싶었던 적이 없는지에 대한 반문이 있음
     * 이 프로젝트가 웹 어셈블리로 컴파일되고 모듈화되어 있어, 향후 wasm 컴포넌트 모델을 사용할지 궁금해함
          + 다른 언어에서 이 프로젝트의 일부를 사용할 수 있다면 흥미로울 것이라고 언급함
"
"https://news.hada.io/topic?id=17313","C++ 제안: 바이트는 정확히 8비트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          C++ 제안: 바이트는 정확히 8비트

근거

     * C 언어는 CHAR_BIT 매크로를 통해 바이트의 비트 수를 구현 정의로 제공하며, C++도 이를 그대로 가져옴
     * 현대 하드웨어는 대부분 바이트가 8비트라는 가정에 수렴하고 있음
     * 이 문서는 C++에서 바이트가 8비트임을 공식적으로 명시할 것을 제안함
     * 주요 컴파일러는 이미 8비트 바이트를 지원하고 있음
          + GCC는 기본값을 8로 설정
          + LLVM은 __CHAR_BIT__를 8로 설정
          + MSVC는 CHAR_BIT를 8로 정의
     * POSIX는 2001년부터 8비트 바이트를 요구하고 있음
     * 8비트 바이트를 지원하지 않는 소프트웨어는 호환되지 않음

C에 미치는 영향

     * 이 제안은 C++이 8비트가 아닌 바이트를 사용하는 아키텍처에 대해 관련성이 있는지 탐구함
     * C 언어 위원회는 다른 결론에 도달할 수 있으며, 두 위원회가 일치하는 것이 이상적임

언어

     * C++ 메모리 모델에서 기본 저장 단위는 바이트이며, 바이트는 8비트로 구성됨
     * CHAR_BIT 매크로는 climits 헤더에서 보고됨

라이브러리

     * climits 헤더는 C 표준 라이브러리 헤더 limits.h와 동일하게 모든 매크로를 정의함
     * cstdint 헤더는 지정된 너비를 갖는 정수 타입과 정수 타입의 한계를 지정하는 매크로를 제공함
     * 모든 타입과 매크로는 바이트가 8비트인 경우에만 선택적이지 않음

GN⁺의 정리

     * 이 문서는 C++에서 바이트가 8비트임을 공식적으로 명시하려는 제안임
     * 현대 하드웨어와 소프트웨어 플랫폼은 대부분 8비트 바이트를 사용하고 있어, 이를 표준화하는 것이 합리적임
     * 비 8비트 바이트 아키텍처는 현대 C++와 호환되지 않으며, 이러한 아키텍처의 중요성은 감소하고 있음
     * 이 제안은 C++의 복잡성을 줄이고, 새로운 프로그래머가 언어를 더 쉽게 이해할 수 있도록 도움
     * 비슷한 기능을 가진 다른 프로젝트로는 POSIX 표준이 있음

        Hacker News 의견

     * JF의 ""Can we acknowledge that every real computer works this way?"" 시리즈에서 ""Signed Integers are Two’s Complement""에 대한 언급이 있었음
          + 1986년 인턴십 동안 10비트 바이트를 사용하는 BBN C/70 기계에서 C 코드를 작성한 경험이 있었음
          + 이는 부정적인 우주의 사고로 인해 존재했던 기계였음
     * D 언어는 다음과 같은 점에서 큰 발전을 이루었음
          + 바이트는 8비트
          + 쇼트는 16비트
          + 인트는 32비트
          + 롱은 64비트
          + 산술은 2의 보수
          + IEEE 부동 소수점
          + 이러한 추상화를 시도하고 잘못된 결과를 얻는 데 낭비되는 시간을 절약했음
          + 유니코드가 문자 집합으로 사용되었음
     * 일부 사람들은 여전히 DSP를 다루고 있음
     * 개인적으로는 ""경쟁사보다 50% 더 많은 비트를 바이트당 제공""하는 12비트 판타지 콘솔을 문서화하는 데 재미를 느끼고 있음
     * C++가 어떤 것을 폐기하거나 단순화할 수 있는지에 대한 질문이 있었음
          + rand() 함수가 고장났고 수정할 수 없다는 이야기를 들었으며, 여전히 폐기되지 않았다는 소식을 들었음
     * CHAR_BIT가 8이 아닌 다른 값이 될 의미 있는 사용이 없다는 점에서 혼합된 감정을 가짐
          + 개인적으로 컴퓨터 내부에서 일어나는 일을 단순화된 모델로 이해하려는 시도가 결국에는 한계에 부딪힐 것임
          + 초보자들 사이에서 물리 전자 프로젝트의 인기가 증가하고 있음
     * 제안에 대한 관심에 감사하며, 피드백을 바탕으로 업데이트된 초안을 작성했음
     * 6비트 바이트 레트로 마이크로컴퓨터에 대한 아이디어를 좋아함
          + 마이크로컴퓨터는 일반적으로 적은 수의 객체를 다루며, 배열을 포인터보다 선호함
          + VGA는 색상당 6비트를 사용했으며, 6x4 비트 매트릭스에서 읽을 수 있는 알파벳을 가질 수 있음
          + 12MiB 메모리와 독립적으로 주소 지정 가능한 6비트는 충분할 것임
     * int8_t == char == 8비트를 강제하는 것에는 동의하지만, 바이트가 8비트라는 오해를 퍼뜨리는 것에는 확신이 없음
          + 바이트는 이미 C++17부터 char의 ""별칭""임
"
"https://news.hada.io/topic?id=17305","검색 없는 그랜드마스터 수준 체스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           검색 없는 그랜드마스터 수준 체스

체스 그랜드마스터 수준의 알고리듬 없이

     * 이 저장소는 ""체스 그랜드마스터 수준의 알고리듬 없이""라는 논문의 구현을 제공함
     * 최근 머신러닝의 성공은 주로 대규모 주의 기반 아키텍처와 전례 없는 규모의 데이터셋 덕분임
     * 이 논문은 체스를 위한 대규모 학습의 영향을 조사함
     * 전통적인 체스 엔진과 달리 복잡한 휴리스틱이나 명시적 탐색에 의존하지 않음
     * 2억 7천만 개의 매개변수를 가진 트랜스포머 모델을 1천만 개의 체스 게임 데이터셋으로 지도 학습함
     * Stockfish 16 엔진의 액션 값을 사용하여 각 보드에 주석을 달아 약 150억 개의 데이터 포인트를 생성함
     * 가장 큰 모델은 인간과의 Lichess blitz Elo 2895를 기록하며, 명시적 탐색 알고리듬 없이도 어려운 체스 퍼즐을 해결함
     * AlphaZero의 정책 및 가치 네트워크(탐색 없이)와 GPT-3.5-turbo-instruct를 능가함
     * 모델과 데이터셋 크기에 대한 체계적인 조사를 통해 충분한 규모에서만 강력한 체스 성능이 나타남을 보여줌
     * 결과를 검증하기 위해 설계 선택과 하이퍼파라미터에 대한 광범위한 실험을 수행함

GN⁺의 정리

     * 이 프로젝트는 체스에서 전통적인 탐색 알고리듬 없이도 높은 성능을 달성할 수 있음을 보여주는 중요한 연구임
     * 대규모 데이터셋과 트랜스포머 모델을 활용하여 체스 엔진의 새로운 가능성을 탐구함
     * AlphaZero와 같은 기존의 강력한 체스 엔진과 비교하여 더 나은 성능을 보임
     * 체스에 관심 있는 사람들에게 흥미롭고 유용한 정보를 제공하며, 머신러닝의 새로운 응용 가능성을 제시함
     * 유사한 기능을 가진 프로젝트로는 AlphaZero와 Leela Chess Zero가 있음

        Hacker News 의견

     * 사용자가 원하는 수준의 체스 상대를 찾기 어려움. 대부분의 엔진은 검색 깊이를 줄여 난이도를 낮추지만, 이는 효과적이지 않음
          + 사용자는 인간 플레이어처럼 느껴지는 컴퓨터 상대를 원함
     * 한 사용자는 체스와 관련된 지식 증류에 대한 발표를 했으며, 복잡한 비선형 검색 기능을 체스와 같은 표준 입력에 대해 준선형 변환기 모델로 증류하는 방법을 설명함
     * 체스 신경망에 관심이 있는 사람들에게 PyTorch를 사용한 쉬운 코드와 현재 최고 성능의 체스 신경망과 유사한 아키텍처를 제공하는 GitHub 저장소를 추천함
     * LC0 네트워크와 DeepMind의 변환기 네트워크를 비교한 블로그 게시물이 있음
     * ""Grandmaster-Level Chess Without Search"" 논문은 대규모 주의 기반 아키텍처와 데이터셋의 중요성을 강조하며, 270M 파라미터 변환기 모델을 사용하여 체스를 학습함
          + Stockfish 16 엔진을 사용하여 10억 개 이상의 데이터 포인트를 생성하고, 인간과의 Lichess blitz Elo 2895를 달성함
          + AlphaZero의 정책 및 가치 네트워크를 능가함
     * 대규모 합성 데이터셋은 전통적인 검색을 사용하여 생성되었으며, 이는 변환기 모델에 검색 트리를 인코딩하는 것과 같음
     * Matthew Sadler는 Leela Zero를 직관적으로 플레이하도록 설정했으며, 이는 검색 없이도 효과적으로 훈련 게임을 수행함
     * 체스를 해결하면 너무 큰 트리가 생성되며, 이를 최적화하기 위한 두 가지 접근법이 있음
          + 트리를 근사화하고 주석을 근사화하는 것
          + 270M 단어의 데이터로 트리를 근사화할 수 있음
     * FEN 문자열을 고정 길이 문자열로 변환하여 보드 상태를 인코딩하고, UCI 표기법을 사용하여 행동을 저장함
          + 문제 변형마다 토크나이저를 재작성해야 한다면 이는 단순한 프로그래밍임
"
"https://news.hada.io/topic?id=17238","구글, AI 전력 공급을 위해 7개의 새로운 원자력 발전소 건설 자금 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구글, AI 전력 공급을 위해 7개의 새로운 원자력 발전소 건설 자금 지원

     * 스타트업 Kairos Power는 구글의 데이터 센터에 전력을 공급하기 위해 7개의 소형 원자력 발전소를 건설할 계획임. 이는 미국에서 처음으로 이루어지는 형태의 거래임
          + AI에 필요한 전력 수요를 충당하고 미국의 원자력 부흥을 도모하기 위한 첫 번째 사례
     * 계약 조건에 따르면 구글은 2030년 말부터 Kairos Power가 건설할 7개의 원자로에서 생산되는 500메가와트의 원자력 전력을 구매하기로 약속함
     * 이 협약은 미국에서 소형 모듈식 원자로의 상업적 건설을 뒷받침하는 최초의 사례임
          + 많은 사람들은 대형 맞춤형 발전소 대신 여러 개의 소형 원자로를 건설함으로써 더 빠르고 저렴하게 건설할 수 있어 이 기술이 원자력 산업의 미래라고 믿음

맥락

     * 원자력 산업의 운명은 점점 더 빅테크와 연결되고 있음. 미국 일부 지역에서는 AI용 데이터 센터 건설 수요로 인해 수년 만에 처음으로 전력 수요가 증가하고 있음. 이로 인해 기술 산업은 막대한 양의 에너지를 찾고 있음
     * 지난달 Constellation Energy와 Microsoft는 미국 최악의 원전 사고 현장인 펜실베이니아주 쓰리마일 아일랜드의 손상되지 않은 원자로를 재가동하기로 계약함. 올해 초 아마존은 펜실베이니아주의 다른 원자력 발전소에 있는 데이터 센터를 매입함
     * Kairos가 구글을 위해 건설할 500메가와트 발전량은 중형 도시 또는 하나의 AI 데이터 센터 캠퍼스에 전력을 공급하기에 충분함
     * 이번 계약은 소형 원자로 설계에 있어 어떤 고객이 최초 프로젝트에 대한 높은 가격을 지불할 것인지, 누가 조립 라인을 시작하기에 충분한 주문을 할 것인지에 대한 의문을 해소함. 아직 입증되지는 않았지만, 공장에서 같은 것을 반복적으로 생산하면 비용이 절감될 것이라는 개념임

세부 사항

     * Kairos는 2030년부터 2035년 사이에 원자로를 인도할 계획임. 재무적 조건은 공개되지 않았지만, 기업 구매자와 풍력 및 태양광 에너지 개발자 간에 사용되는 것과 유사한 전력 구매 계약을 체결함
     * 프로젝트 부지 또는 여러 위치에 원자로가 있을 수 있는지 여부는 아직 결정되지 않음
     * 구글은 Kairos 원자로 근처 지역에 데이터 센터를 보유하게 될 것이지만, 원자력 발전소에서 직접 전력을 공급받을지 또는 전력망에서 공급받을지는 아직 결정되지 않음. 구글은 원자력 전력 추가를 탄소 감축 약속 달성에 활용할 수 있음
     * 기존 원자로에서 사용되는 물 대신 Kairos 설계에서는 냉각제로 용융 플루오르화 소금을 사용함. 구글용 유닛에는 단일 50메가와트 원자로가 포함되며, 이후 3개의 발전소에는 각각 75메가와트 원자로 2기가 포함될 예정임. 이는 기존 원자력 발전소의 원자로 용량인 약 1,000메가와트와 비교됨
     * Kairos는 미국 원자력 규제위원회의 복잡한 승인 절차를 거쳐야 하지만 이미 테네시주에 시연용 원자로를 건설할 수 있는 승인을 받았으며 2027년에 가동을 시작할 수 있음
     * Kairos는 앨버커키에 제조 개발 시설을 보유하고 있으며 여기서 테스트 유닛을 제작하고 있음. 핵연료 구성 요소는 없지만 시스템, 구성 요소 및 공급망을 테스트하기 위해 실물 크기의 발전소를 건설하고 운영하는 연습과 같음
     * Kairos의 최고경영자이자 공동 창립자인 Mike Laufer는 시연 프로젝트와 앨버커키 공장이 기존 원자력 산업의 함정인 비용 급증을 피하는 데 도움이 되고 있다고 말함

큰 그림

     * 미국 전력의 거의 20%가 원자력 발전소에서 나오지만 높은 비용과 긴 공사 기간으로 인해 대형 신규 프로젝트 파이프라인이 중단됨
     * 올봄 조지아주 보글 원자력 발전소의 두 번째 신규 원자로가 완공됨. 그 이전에 미국에서 가장 최근에 완공된 원자력 발전 원자로는 2016년과 1996년에 테네시 밸리 관리국에 의해 완공됨
     * 구글과 같은 기술 기업들은 2010년부터 신재생 에너지 개발자와 전력 구매 계약을 체결하기 시작했으며, 이는 해당 기술의 비용 절감에 도움이 됨. 원자력 옹호론자들은 안정적인 고객이 시간이 지남에 따라 그 산업에서도 비용을 낮출 수 있다고 말함
     * 단기적으로 분석가들은 데이터 센터, 신규 제조, 중공업 및 교통에 대한 국가의 수요를 충족시키기 위해 더 많은 천연가스 화력 발전소가 추가될 것으로 예상함

GN⁺의 의견

     * 새로운 원자력 발전 프로젝트를 진행하려면 안전성과 환경 영향에 대한 우려를 해결해야 함. 특히 방사성 폐기물 처리 문제는 여전히 논란의 여지가 있음
     * 소형 모듈식 원자로 기술은 아직 상용화되지 않았으며 실제 프로젝트에서 비용과 일정을 어떻게 관리할 수 있을지 불확실함. 기술 개발과 규제 승인에 상당한 시간과 비용이 소요될 것임
     * 기후변화 대응을 위해 탄소 배출을 줄이는 것이 시급한 상황에서 원자력은 재생에너지를 보완할 수 있는 중요한 옵션임. 그러나 안전성 강화와 대중 수용성 제고를 위한 노력이 필요함
     * 기술 기업들의 전력 수요 증가로 인해 새로운 발전 설비 건설이 불가피한 상황임. 원자력 외에도 재생에너지, 에너지 저장장치, 그리드 시스템 업그레이드 등 다양한 옵션을 검토해야 함
     * 유사한 프로젝트로는 롤스로이스(Rolls-Royce)와 뉴스케일(NuScale)이 개발 중인 소형 모듈식 원자로가 있음. 이 밖에도 다양한 스타트업들이 미래 원자력 시장을 겨냥하고 있음

   소형이든 대형이든 원자로 얘기 들으면 폐기물 처리에 관해서는 답이 있는 걸까요? RE100은...?
"
"https://news.hada.io/topic?id=17270","Show GN: 멀티 LoRA 모델을 하나의 이미지로 통합 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: 멀티 LoRA 모델을 하나의 이미지로 통합 생성하기

   인공지능의 발전과 함께, 이미지 생성 기술은 놀라운 속도로 진화하고 있습니다. 특히, 텍스트를 입력하여 원하는 이미지를 생성하는 텍스트-이미지 생성 모델은 창의적인 콘텐츠 제작과 예술 분야에서 큰 주목을 받고 있습니다. 최근에는 다양한 오픈소스 커뮤니티와 연구자들의 노력으로 누구나 쉽게 접근할 수 있는 이미지 생성 모델들이 등장하고 있습니다. 그중에서도 LoRA(Low-Rank Adaptation) 모델은 이미지 생성의 새로운 패러다임을 제시하며, 주목받고 있는 기술입니다.

   LoRA와 MixGen3의 만남

   LoRA 모델의 등장: LoRA 모델은 사전 학습된 대형 인공지능 모델에 추가하여, 새로운 스타일이나 콘텐츠를 생성할 수 있도록 적응시키는 경량화 모델입니다. LoRA는 적은 용량으로 효율적인 이미지 생성이 가능하고, 다양한 스타일을 표현할 수 있다는 장점이 있습니다. Hugging Face와 같은 오픈소스 플랫폼을 통해 다양한 LoRA 모델이 공유되고, 연구되어 이미지 생성 분야의 발전을 촉진하고 있습니다.

   MixGen3 서비스 소개: 이 블로그에서 소개할 MixGen3는 바로 이 LoRA 모델을 활용하여 이미지를 생성하는 혁신적인 서비스입니다. 사용자는 MixGen3를 통해 다양한 LoRA 모델을 선택하고, 자신만의 프롬프트를 입력하여 독창적인 이미지를 생성할 수 있습니다. 이제, MixGen3 서비스의 특장점과 가치에 대해 자세히 살펴보겠습니다.

   기존 서비스와의 차별점:

   LoRA 모델의 통합: MixGen3는 여러 LoRA 모델을 하나의 서비스에서 통합하여 제공합니다. 사용자는 갤러리를 통해 다양한 LoRA 모델을 탐색하고, 원하는 모델을 선택할 수 있습니다. 이는 개별 LoRA 모델을 찾아다니며 사용해야 했던 기존 방식과 비교하여, 훨씬 편리하고 효율적인 접근입니다.

   다양한 LoRA 모델의 조합: 최대 3개의 LoRA 모델을 조합하여 이미지를 생성할 수 있다는 점은 MixGen3의 가장 큰 차별점입니다. 여러 LoRA 모델을 융합하여, 이전에 없던 독특한 스타일과 콘텐츠를 표현할 수 있습니다. 예를 들어, 풍경 LoRA와 동물 LoRA를 조합하여, 아름다운 해변에서 노니는 강아지 이미지를 생성할 수 있습니다.

   LoRA 모델 선택하기
   LoRA 모델 선택은 서비스에서 가장 중요한 과정입니다. LoRA 모델은 이미지의 스타일과 콘텐츠를 결정하는 핵심 요소이기 때문이죠! 이제 LoRA 모델을 선택해 볼까요?

   갤러리에서 원하는 LoRA 모델을 찾아보세요. 갤러리에는 LoRA 모델의 이미지와 제목이 전시되어 있습니다. 각 LoRA 모델은 독특한 스타일을 가지고 있으니, 마음에 드는 것을 선택하세요.

   마우스로 LoRA 모델을 클릭하면, 선택한 LoRA 모델이 화면 상단의 선택된 LoRA 목록에 추가됩니다. 최대 3개의 LoRA 모델을 선택할 수 있습니다.

   선택된 LoRA 목록에서 LoRA 모델의 순서를 변경하거나, 스케일을 조절할 수 있습니다. 스케일은 LoRA 모델의 영향을 조절하는 것으로, 슬라이더를 움직여 원하는 값을 설정하세요.

   프롬프트 입력창에 이미지에 표현하고 싶은 내용을 입력합니다. 예를 들어, ""아름다운 숲속 풍경"", ""귀여운 고양이 가족"", ""초현실적인 도시""와 같이 상상하는 이미지를 글로 표현해 보세요.

   Generate 버튼을 클릭하면, 이미지 생성이 시작됩니다. 진행 바(progress bar)가 나타나면서 LoRA 모델이 이미지를 생성하는 과정을 보여줍니다.

   잠시 기다리면, 생성된 이미지가 화면 중앙에 나타납니다.

   이미지 결과 확인하고 저장하기
   생성된 이미지를 확인하고, 저장하는 방법은 다음과 같습니다.

   생성된 이미지는 화면 중앙에 크게 표시됩니다. 이미지를 클릭하면, 전체 화면으로 확대하여 자세히 볼 수 있습니다.

   이미지 우측 하단의 다운로드 버튼을 클릭하면, 이미지를 다운로드할 수 있습니다. 이미지를 원하는 곳에 저장하여, 나중에 다시 볼 수 있습니다.

   이미지 크기 조정 슬라이더를 사용하여, 이미지의 크기를 변경할 수 있습니다. 다른 크기로 이미지를 저장하고 싶다면, 원하는 크기로 조정한 후 다운로드하세요

   잘 만들어졌네요!

   글이 마크다운으로 작성되면 더 좋을 것 같네요^^
"
"https://news.hada.io/topic?id=17219","Show GN: High-Quality Prompt에 도달하기 위한 병렬 테스트 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: High-Quality Prompt에 도달하기 위한 병렬 테스트 도구

   API를 사용해 LLM을 사용하시는 경우 LLM이 원하는 결과에 도달하도록 만드는 단계가 필요합니다. 여러 프롬프트 버전을 만들어보고 테스트해서 결과를 비교하게 되는데, 이번 프로덕트에서는 여러 프롬프트를 여러 Formatting 데이터와 병렬로 빠르게 테스트해볼 수 있는 기능 하나만 넣어서 배포해 봤습니다.

   이후 버전 관리나, 기본적인 Validation, 프롬프트 생성을 도와주는 툴 등을 기획하고 있긴 한데, 실제 유저의 의견을 들으면서 만들고 싶어서 Show GN에 올려봐요! 써보시고 피드백 부탁드립니다 :)
"
"https://news.hada.io/topic?id=17255","웹 브라우저 엔지니어링웹 브라우저 엔지니어링 (2021)

     * 웹 브라우저 엔지니어링 소개
          + 웹 브라우저는 일상적으로 사용되지만, 그 작동 원리는 복잡함. 이 책은 네트워킹부터 JavaScript까지 몇 천 줄의 Python 코드로 기본적이지만 완전한 웹 브라우저를 구축하는 방법을 설명함.
     * 서문
          + 웹 브라우저와 웹의 역사에 대한 개요를 제공함.
     * 1부: 페이지 로드
          + 웹 페이지 다운로드
               o URL과 HTTP 요청을 통해 웹 페이지를 다운로드하는 방법 설명.
          + 화면에 그리기
               o 창을 생성하고 캔버스에 그리는 방법 설명.
          + 텍스트 서식
               o 단어 줄 바꿈과 줄 간격 조정 방법 설명.
     * 2부: 문서 보기
          + HTML 트리 구성
               o HTML을 파싱하고 수정하는 방법 설명.
          + 페이지 레이아웃
               o 인라인 및 블록 레이아웃 적용 방법 설명.
          + 작성자 스타일 적용
               o CSS를 파싱하고 적용하는 방법 설명.
          + 버튼 및 링크 처리
               o 하이퍼링크와 브라우저 크롬 처리 방법 설명.
     * 3부: 애플리케이션 실행
          + 서버로 정보 전송
               o 양식 제출 및 웹 서버와의 상호작용 방법 설명.
          + 인터랙티브 스크립트 실행
               o DOM 변경 및 이벤트 반응 방법 설명.
          + 데이터 보호
               o 쿠키 및 로그인, XSS 및 CSRF에 대한 설명.
     * 4부: 현대 브라우저
          + 시각적 효과 추가
               o 블렌딩, 클리핑, 합성 방법 설명.
          + 작업 및 스레드 스케줄링
               o 이벤트 루프 및 렌더링 파이프라인 설명.
          + 애니메이션 및 합성
               o GPU를 사용한 부드러운 애니메이션 설명.
          + 콘텐츠 접근성 제공
               o 키보드 입력, 확대/축소, 접근성 트리 설명.
          + 임베디드 콘텐츠 지원
               o 이미지, iframes, 스크립팅 지원 방법 설명.
          + 이전 계산 재사용
               o 무효화, 편집, 정확성 설명.
     * 결론
          + 다루지 않은 내용과 변화하는 환경에 대한 설명.
     * 부록
          + 용어집, 참고 문헌, 저자 소개, 기여자 목록, 이 책을 기반으로 한 강의 목록 포함.

GN⁺의 정리

     * 이 책은 웹 브라우저의 작동 원리를 이해하고자 하는 사람들에게 유용함. Python을 사용하여 브라우저를 구축하는 과정을 통해 네트워킹, HTML 파싱, CSS 적용 등 다양한 기술을 배울 수 있음.
     * 웹 브라우저의 역사와 현대 브라우저의 기능을 이해하는 데 도움을 줌. 특히, 웹 보안과 접근성에 대한 내용을 포함하고 있어 실무에 적용할 수 있는 지식을 제공함.
     * 이 책은 웹 개발자나 소프트웨어 엔지니어에게 흥미롭고 유익할 수 있으며, 웹 브라우저의 내부 작동 방식을 이해하는 데 큰 도움이 될 것임.

        Hacker News 의견

     * 'Stuff I didn't do' 부분이 이 책의 훌륭한 점임
          + 레이아웃 작업은 매우 어려움
          + CSS는 레이아웃을 더욱 복잡하게 만듦
          + CSS, HTML, JavaScript는 현재 매우 복잡한 소프트웨어임
          + 비디오 디코딩은 하드웨어로 오프로드되어 배터리 소모가 줄어듦
     * 15년 전 헤드리스 브라우저 작업을 시작했으며, SpiderMonkey를 사용하여 JS 인터프리터로 활용했음
          + 커스텀 DOM 구현과 Flash 런타임을 추가했음
          + 이 프로젝트는 매우 재미있었음
          + 이 책에 관심이 있음
     * 이 책은 MITRE ATT&CK을 떠올리게 하는 포괄적인 자료임
     * 브라우저 엔지니어링이 트렌드가 되는 것이 신선함
          + 현재는 Google, Apple, Mozilla가 주도하고 있음
          + 독립적인 브라우저 엔진이 더 많아지기를 바람
     * 저자가 Python을 선택한 이유를 설명한 글이 있음
          + 일부는 Python을 JS로 컴파일하여 브라우저에서 실행됨
     * 저자 중 한 명이 감사의 말을 전하며 질문에 답변할 준비가 되어 있음
     * 재미있는 프로젝트를 찾고 있었으며, 이 책을 즐기고 있음
          + Chrome 작동 방식을 설명한 만화책도 시작하기 좋은 자료임
     * 이러한 자료가 만들어지는 것이 매우 흥미로움
          + 브라우저는 신비롭고 해독하기 어려운 블랙박스처럼 보임
          + Ladybird와 같은 프로젝트가 그 벽을 허물고 있음
          + 언젠가 기여하고 싶으며, 이 책이 훌륭한 시작점임
     * 브라우저 내부 구조에 대해 배우고 있으며, 이 책이 매우 유용함
          + 브라우저 작동 방식을 직관적으로 이해하는 데 도움을 줌
     * 좋은 책이며, 9장을 두 개의 별도 장으로 나누는 것을 추천함
          + JavaScript 실행과 DOM 및 이벤트 상호작용을 각각 다루는 것이 좋음
"
"https://news.hada.io/topic?id=17261","Web Visual Editor - VS코드용 비쥬얼 HTML 에디터 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Web Visual Editor - VS코드용 비쥬얼 HTML 에디터 확장

     * VSCode 안에서 WebView를 통해 HTML 엘리먼트를 실시간 프리뷰를 보면서 편집 가능
     * 웹뷰에서 엘리먼트를 선택하면 에디터 상에서 해당 엘리먼트가 자동 선택
     * 엘리먼트 드래그앤 드롭, 정렬, 카피/컷/페이스트, 줌 인/아웃 지원
"
"https://news.hada.io/topic?id=17301","Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 하고 싶은 말을 자유롭게 남겨주세요.

   이번 주에 있었던 일, 계획, 일상, 자랑, 고민, 추천 등 하고 싶은 말을 댓글로 작성해주세요.

   차로 왕복 두 시간 이상 출퇴근하시는 분들 체력이 참 대단하신 것 같아요. 회사 근처 도보 왕복 30분 거리 자취방에서 출퇴근하다가 사정상 차로 왕복 두 시간 출퇴근하는데 너무 힘들어요

   수비드 후 시어링한 고기와 콜드 시어링한 고기랑 비교해볼 계획이에요.

   내년에는 벡터로 디자인 하는 법을 배우고 싶어요.
   펜툴은 쓰기가 매번 너무 어렵네요.

   상단 메뉴에 GeekNight 가 추가되었습니다.
   참가여부 사전 설문조사가 예상외로 많은 호응을 받아서 규모를 가능한 수준에서 키워야 할 것 같아요.

   현재는 라이트닝 토크 발표자 신청을 받고 있으니 많은 관심 바랍니다.
   어제 열었는데 이미 꽤 신청이 들어와서 또 한번 놀라고 있어요. 다들 하시고 싶은 얘기가 많으셨군요!
   게다가 흥미로운 내용이 많으니 이번 밋업 재미날 것 같아요.
"
"https://news.hada.io/topic?id=17298","리습에 관한 호프스태터의 논평 (1983)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        리습에 관한 호프스태터의 논평 (1983)

Hofstadter on Lisp

  Lisp: Atoms and Lists

     * Lisp의 역사와 AI에서의 중요성
          + Lisp는 인공지능 연구에서 가장 많이 사용되는 프로그래밍 언어 중 하나임.
          + Lisp의 기원은 수학적 논리에 있으며, 1950년대에 John McCarthy에 의해 개발됨.
          + Lisp는 그 간결함과 수학적 아름다움으로 인해 많은 연구자들에게 사랑받고 있음.
     * Lisp의 상호작용성
          + Lisp는 상호작용적인 언어로, 사용자가 입력한 명령을 즉시 평가하고 결과를 반환함.
          + 이는 다른 고급 언어들과 달리 프로그램을 점진적으로 개발하고 디버깅할 수 있게 해줌.
     * Lisp의 기본 구조: 원자와 리스트
          + Lisp의 모든 객체는 원자(atom) 또는 리스트(list)로 구성됨.
          + 리스트는 원자나 다른 리스트를 요소로 가질 수 있으며, 이는 재귀적으로 가능함.
          + 빈 리스트는 nil로 표현되며, 이는 Lisp에서 중요한 개념임.
     * Lisp의 함수와 평가
          + Lisp에서 함수는 리스트의 첫 번째 요소로, 나머지 요소들은 함수의 인자로 사용됨.
          + car와 cdr은 리스트의 첫 번째 요소와 나머지 리스트를 반환하는 함수임.
          + cons는 새로운 리스트를 생성하는 함수로, 기존 리스트에 새로운 요소를 추가함.
     * Lisp의 조건문
          + cond는 조건에 따라 다른 결과를 반환하는 Lisp의 조건문임.
          + 각 조건은 참인지 여부에 따라 평가되며, 첫 번째로 참인 조건의 결과가 반환됨.

  GN⁺의 정리

     * Lisp는 인공지능 연구에서 중요한 역할을 하며, 그 간결함과 상호작용성으로 인해 많은 연구자들에게 사랑받고 있음.
     * Lisp의 기본 구조인 원자와 리스트는 재귀적으로 구성될 수 있어 복잡한 데이터 구조를 쉽게 표현할 수 있음.
     * Lisp의 상호작용적인 특성은 프로그램 개발과 디버깅을 용이하게 하며, 이는 다른 고급 언어와의 차별점임.
     * Lisp의 조건문과 함수 정의는 프로그래머가 복잡한 논리를 간결하게 표현할 수 있게 해줌.
     * Lisp의 이러한 특성들은 프로그래밍의 유연성과 창의성을 높여주며, 이는 특히 인공지능 분야에서 유용함.
"
"https://news.hada.io/topic?id=17316","Microsoft와 OpenAI의 긴밀한 파트너십에 균열이 생기고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Microsoft와 OpenAI의 긴밀한 파트너십에 균열이 생기고 있음

     * 작년 가을, OpenAI의 CEO인 Sam Altman은 마이크로소프트의 CEO인 Satya Nadella에게 수십억 달러 투자를 요청
          + Microsoft는 이미 OpenAI에 130억 달러를 투자했으며, Nadella는 처음에는 추가 투자를 고려했음
          + 그러나, Altman이 이사회에서 일시적으로 해임된 후 Nadella와 마이크로소프트는 재고하게 됨
     * OpenAI는 올해 50억 달러의 손실을 예상하고 있으며, 추가 자금과 컴퓨팅 파워를 계속 요청했지만 Microsoft는 이를 거부했음
     * Altman은 OpenAI와 Microsoft의 파트너십을 ""기술계 최고의 브로맨스""라고 불렀지만, 두 회사 간의 관계는 점점 악화되고 있음
     * 재정적 압박과 안정성에 대한 우려, 그리고 두 회사 직원 간의 의견 차이가 5년간의 파트너십을 긴장시키고 있음

AI 스타트업의 현실

     * AI 스타트업은 대형 클라우드 컴퓨팅 시스템을 통제하는 대기업에 자금과 컴퓨팅 파워를 의존하고 있음
     * ChatGPT의 제작사인 OpenAI와 마이크로소프트의 관계가 이러한 역학 관계를 가장 잘 보여줌
     * OpenAI는 마이크로소프트로부터 거액의 투자를 받는 대신, 컴퓨팅 파워를 마이크로소프트에서만 구매하고 새로운 AI 개발에 긴밀히 협력하기로 약속함

마이크로소프트의 OpenAI에 대한 투자 조정

     * Altman의 해임으로 인해 Nadella는 충격을 받고 우려했다고 하며, 마이크로소프트는 OpenAI에 대한 의존도가 너무 높다는 우려로 인해 투자를 조정하기 시작함
     * 3월에 마이크로소프트는 OpenAI의 경쟁사인 Inflection의 대부분의 직원을 6억 5천만 달러 이상을 들여 고용함
     * Inflection의 전 CEO이자 공동 창업자인 Mustafa Suleyman은 OpenAI 소프트웨어를 기반으로 소비자용 AI 기술을 구축하는 새로운 마이크로소프트 그룹을 감독하고 있음

OpenAI와 마이크로소프트 간의 갈등

     * Altman을 포함한 일부 OpenAI 경영진과 직원들은 Suleyman이 마이크로소프트에 있는 것에 분노하고 있음
     * 최근 OpenAI 직원들은 Suleyman이 새로운 기술을 마이크로소프트에 충분히 빨리 제공하지 않는다는 이유로 화상 통화에서 OpenAI 직원에게 소리를 질렀다고 불평함
     * 마이크로소프트 엔지니어들이 두 회사가 합의한 프로토콜을 따르지 않고 중요한 OpenAI 소프트웨어를 다운로드한 것에 대해서도 OpenAI 직원들이 불만을 표시함

OpenAI의 자금 조달 노력

     * 마이크로소프트가 추가 자금 지원 논의에서 물러선 후, OpenAI는 운영을 계속하기 위해 더 많은 현금이 필요했고, 계약의 배타성에 짜증을 냈음
     * 6월에 마이크로소프트는 계약의 예외를 인정했고, 이로 인해 OpenAI는 추가 컴퓨팅 자원을 위해 오라클과 약 100억 달러 규모의 컴퓨팅 거래를 체결할 수 있었음
     * OpenAI는 또한 애플, 칩 제조업체 엔비디아, 아랍에미리트가 통제하는 기술 투자 회사 MGX 등 단순히 자금을 던지는 것 이상으로 OpenAI의 전망을 강화할 수 있는 조직으로부터 전략적 투자를 확보하기 위해 노력했음

OpenAI의 막대한 컴퓨팅 비용

     * OpenAI는 2024년 말까지 적어도 54억 달러의 컴퓨팅 비용을 지출할 것으로 예상됨
     * 향후 5년 동안 OpenAI가 확장됨에 따라 이 금액은 급증할 것으로 예상되며, 2029년까지 연간 컴퓨팅 비용은 375억 달러에 이를 것으로 추정됨
     * OpenAI 직원들은 마이크로소프트가 충분한 컴퓨팅 파워를 제공하지 않는다고 불평하고 있음

OpenAI와 마이크로소프트 간의 계약 조항

     * 계약에는 OpenAI가 인간의 두뇌와 일치하는 AGI(Artificial General Intelligence)를 구축하면 마이크로소프트가 OpenAI의 기술에 대한 접근권을 잃는다는 조항이 포함되어 있음
     * 이 조항은 마이크로소프트와 같은 회사가 이 미래의 기계를 오용하지 않도록 하기 위한 것이었지만, 오늘날 OpenAI 경영진은 이를 더 나은 계약을 위한 길로 보고 있음

GN⁺의 의견

     * 이 기사는 AI 스타트업과 대기업 간의 역학 관계와 긴장감을 잘 보여주고 있음. AI 스타트업은 대기업의 자금과 컴퓨팅 자원에 의존하지만, 동시에 이러한 의존성으로 인해 제약을 받을 수 있음
     * OpenAI와 마이크로소프트의 사례는 AI 산업에서 스타트업과 대기업 간의 파트너십이 어떻게 발전하고 변화할 수 있는지를 보여줌. 초기에는 상호 이익이 되는 관계였지만, 시간이 지남에 따라 이해관계의 충돌과 불균형이 나타날 수 있음
     * AI 스타트업은 대기업과의 협력 관계를 구축할 때, 장기적인 관점에서 자신들의 독립성과 지속 가능성을 확보하는 방안을 고려해야 함. 단순히 자금과 자원을 확보하는 것 이상으로, 기술 개발과 사업 확장을 위한 전략적 파트너십을 모색할 필요가 있음
     * 한편, 대기업 입장에서는 유망한 AI 스타트업에 투자하고 협력하는 것이 중요하지만, 특정 기업에 대한 의존도가 지나치게 높아지는 것은 경계해야 함. 마이크로소프트가 OpenAI 이외의 대안을 모색하는 것처럼, 다양한 AI 기술과 파트너십을 병행하는 것이 리스크 관리 차원에서 필요해 보임
     * AI 산업의 발전을 위해서는 스타트업과 대기업이 상호 신뢰와 존중을 바탕으로 건강한 협력 관계를 유지하는 것이 중요함. 단기적인 이해관계보다는 장기적인 비전을 공유하고, 각자의 강점을 살려 시너지를 창출할 수 있는 방향으로 나아가야 할 것임

   OpenAI는 ""OpenAI""인가 ""CloseAI""인가

        Hacker News 의견

     * OpenAI의 브랜드 인지도 외에 근본적인 이점이 있는지 의문이 제기됨
          + AI 스타트업이 급증하는 가운데 OpenAI의 우위가 점점 줄어들고 있음
     * OpenAI가 Microsoft에 의해 버려질 가능성이 있음
          + Sam Altman이 자신의 데이터센터를 구축하려는 이유일 수 있음
     * OpenAI와 Sam Altman의 신뢰성에 의문을 제기하는 의견이 있음
          + 장기적으로 신뢰할 수 없는 플레이어는 손해를 본다는 주장
     * Microsoft의 전략은 OpenAI의 고유한 ML 기능을 추출하여 Google과 경쟁하는 것임
          + ""포용, 확장, 소멸"" 전략의 두 번째 단계에 있음
     * OpenAI가 올해 50억 달러의 손실을 계획하고 있음
          + ChatGPT에 의존하는 사람들이 OpenAI가 파산할 경우의 위험성을 경고함
          + AI 사용을 자제하는 것이 답이 아니며, 최소한 50%의 능력을 유지하는 것이 중요함
     * Anthropic에 대한 뉴스가 드문 이유에 대한 의문이 제기됨
          + Claude가 ChatGPT의 가장 가까운 경쟁자인지, LLama가 더 좋은지에 대한 논의
     * 이 이야기를 누가 시작했는지, 그들의 목표가 무엇인지에 대한 의문이 있음
          + MS와 Altman 모두 조작으로 유명하며, 협상 배경이나 다른 파트너십과 관련이 있을 수 있음
     * Microsoft와 Oracle과 함께 AI를 '악하지 않게' 만들려는 계획에 대한 논의가 있음
"
"https://news.hada.io/topic?id=17240","모든 Durable Object에서 제로 레이턴시 SQLite 저장소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 모든 Durable Object에서 제로 레이턴시 SQLite 저장소

     * Zero-latency SQLite storage in every Durable Object
          + Kenton Varda는 Cloudflare의 Durable Object 플랫폼의 다음 버전을 소개함. 이 플랫폼은 최근 키/값 저장소에서 SQLite 기반의 완전한 관계형 시스템으로 업그레이드됨
          + Durable Objects의 첫 번째 버전에 대한 유용한 배경 정보는 Paul Butler의 Cloudflare의 durable multiplayer moat를 참조할 수 있음. 이는 WebSocket 기반의 실시간 협업 애플리케이션을 구축하는 데 인기가 있음
          + 새로운 SQLite 기반 Durable Objects는 대규모 애플리케이션을 설계하는 흥미로운 방법을 제안하는 분산 시스템 설계의 매력적인 요소임
     * Durable Objects의 핵심 아이디어
          + Durable Object는 데이터와 함께 애플리케이션 로직을 동일한 물리적 호스트에 배치하여 매우 빠른 읽기 및 쓰기 성능을 제공함
          + 단일 객체는 단일 머신의 단일 스레드에서 실행되므로 처리량이 제한적임. 더 많은 트래픽을 처리하기 위해 더 많은 객체를 생성함. 각 상태 단위가 단일 객체로 처리할 수 있을 만큼 낮은 트래픽을 갖는 경우에 가장 쉬움
     * 항공편 예약 시스템 예시
          + 각 항공편은 자체 SQLite 데이터베이스를 가진 전용 Durable Object에 매핑될 수 있음. 항공사당 매일 수천 개의 새로운 데이터베이스가 생성됨
          + 각 DO는 고유한 이름을 가지며, Cloudflare의 네트워크는 해당 객체가 전 세계 어디에 있든 요청을 라우팅함
     * 기술적 세부사항
          + Litestream에서 영감을 받아 각 DO는 객체 저장소로 WAL 항목의 시퀀스를 지속적으로 스트리밍함. 이는 16MB마다 또는 10초마다 배치됨
          + 10초 창 내에서 내구성을 보장하기 위해, 쓰기는 커밋되자마자 인근 데이터 센터의 다섯 개 복제본으로 전달되며, 세 개가 확인되면 쓰기가 인정됨
     * JavaScript API 디자인
          + 비동기식이 아닌 차단 방식으로 설계됨. 이는 빠른 단일 스레드 지속성 작업을 제공하기 위한 것임
          + SQLite가 잘 처리할 수 있는 N+1 쿼리 패턴을 의도적으로 보여주는 예시를 포함함
     * Storage Relay Service
          + Durable Objects의 기반 시스템이며, Cloudflare의 기존 D1 SQLite 시스템을 1년 이상 지원해옴
     * Durable Objects의 생성 위치
          + Durable Objects는 생성된 후 위치를 변경하지 않음. 기본적으로 초기 get() 요청이 이루어진 데이터 센터에서 인스턴스화됨
          + 다른 위치에서 Durable Objects를 수동으로 생성하려면 get()에 선택적 locationHint 매개변수를 제공함
     * where.durableobjects.live 사이트
          + Cloudflare 네트워크에서 DO가 생성되는 위치를 추적하는 사이트임

GN⁺의 정리

     * Cloudflare의 Durable Objects는 SQLite를 기반으로 하여 대규모 애플리케이션 설계에 새로운 가능성을 제시함. 이는 데이터와 애플리케이션 로직을 동일한 물리적 호스트에 배치하여 빠른 성능을 제공함
     * 이 시스템은 특히 실시간 협업 애플리케이션에 유용하며, 다양한 상태 단위를 처리할 수 있는 유연성을 제공함
     * Durable Objects는 데이터 내구성을 보장하기 위해 여러 데이터 센터에 복제본을 생성하며, 이는 안정성과 신뢰성을 높임
     * 이 기술은 대규모 분산 시스템 설계에 관심 있는 개발자에게 흥미로울 수 있음. 비슷한 기능을 제공하는 시스템으로는 Amazon의 DynamoDB와 Google의 Firestore가 있음

        Hacker News 의견

     * 쓰기 API는 동기식이지만 숨겨진 비동기 대기 기능이 있음. 쓰기가 실패하면 런타임이 응답을 HTTP 실패로 대체하여 자동으로 쓰기를 일괄 처리하고 성공을 가정할 수 있게 함
          + 읽기 트랜잭션이 없어 특정 시점의 스냅샷을 얻기 어려움
          + 각 런타임 인스턴스는 128MB RAM으로 제한됨
          + Websockets는 하이버네이트할 수 있으며, 이때 비용이 발생하지 않음. 이는 클라이언트가 DO가 잠들어 있을 때도 연결을 유지할 수 있게 함
          + 자동 RPC 기능이 있어 다른 DO나 워커와 일반 JS 호출처럼 통신할 수 있음. 런타임이 직렬화 및 구문 분석을 처리함
     * 각 DO는 WAL 항목의 시퀀스를 객체 저장소로 스트리밍하며, 이는 16MB마다 또는 10초마다 일괄 처리됨
          + 전 세계적으로 쓰기를 읽기까지 10초가 걸릴 수 있음
          + 지역적으로 배치된 데이터베이스 클러스터를 대체하기 어려움
     * Durable Object 디자인을 좋아함. 내부 작동 방식을 이해하기 쉬움
          + DO는 빠르고 저비용의 실시간 경험을 구축하는 데 좋지만, 분석 및 개요 작성이 어려움
          + SQLite에 데이터를 넣으면 여러 작은 SQLite 인스턴스를 쿼리하고 결과를 병합해야 함
     * Durable Objects의 물리적 위치가 어디인지 이해하기 어려움
          + API 호출이 발생한 지역에 위치하는지 궁금함
          + DO가 자동으로 다른 위치로 이동할 수 있는지 궁금함
     * 새로운 클라우드 기술을 이해하기 어려움
          + 15년 이상의 웹 개발 경험이 있지만, 이러한 기술이 자신에게 맞지 않다고 느낌
     * 스키마 마이그레이션을 어떻게 처리할지 궁금함
          + 데이터베이스가 테넌트별로 존재하는 경우, 스키마 변경을 각 DO에 적용하는 것이 어려움
     * DO 디자인이 흥미롭지만, 고부하 시스템이나 장난감 프로젝트에만 적합하다고 생각함
          + 실무에서는 검증된 시스템이 필요하며, DO는 아직 성숙하지 않음
     * DO 디자인에 감명받음. 복잡한 작업을 낮은 규모로 처리하는 방식이 실제 제품 구조와 유사하다고 생각함
     * CF가 개발자들에게 DO 사용을 권장하는 것을 주목함
          + 워커의 웹소켓 연결이 30초 후에 타임아웃되며, DO 사용이 권장됨
     * DO가 MVC 아키텍처의 ""모델""에 해당하는지 궁금함
          + DO를 테넌트별로 사용하고, 모든 DO를 쿼리하거나 조인하는 방법에 대해 궁금함
"
"https://news.hada.io/topic?id=17221","세계 모델링을 위한 Diffusion 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        세계 모델링을 위한 Diffusion 기술

DIAMOND 💎의 개요

     * DIAMOND는 강화 학습 에이전트로, 확산 세계 모델에서 훈련됨.
     * 이 모델은 Atari와 같은 게임 환경에서 시각적 세부 사항을 중요하게 다룸.
     * DIAMOND는 3D 환경, 예를 들어 CounterStrike: Global Offensive (CSGO)도 시뮬레이션할 수 있음.

연구 배경 및 동기

     * 세계 모델은 강화 학습 에이전트를 안전하고 효율적으로 훈련하는 유망한 접근법임.
     * 기존의 세계 모델은 주로 이산 잠재 변수의 시퀀스를 사용하여 환경 동역학을 모델링함.
     * 그러나 이러한 압축은 강화 학습에 중요한 시각적 세부 사항을 무시할 수 있음.
     * 확산 모델은 이미지 생성에서 주도적인 접근법으로 자리 잡고 있음.
     * DIAMOND는 이러한 패러다임 전환에 영감을 받아 개발됨.

DIAMOND의 성능 및 결과

     * DIAMOND는 Atari 100k 벤치마크에서 평균 인간 정규화 점수 1.46을 달성함.
     * 이는 세계 모델 내에서 훈련된 에이전트 중 최고 성능임.
     * DIAMOND의 코드는 GitHub에서 공개되어 있음.

DIAMOND의 작동 원리

     * 확산 모델은 게임의 다음 프레임을 예측하도록 훈련됨.
     * 에이전트의 행동과 이전 프레임을 고려하여 환경 반응을 시뮬레이션함.
     * 자동 회귀 생성은 에이전트가 게임을 배우는 데 도움을 줌.
     * 빠른 세계 모델을 위해 디노이징 단계 수를 줄여야 함.
     * DDPM 기반 모델은 낮은 디노이징 단계에서 불안정하지만, EDM 기반 모델은 안정적임.

시각적 세부 사항의 중요성

     * DIAMOND는 중요한 시각적 세부 사항을 더 잘 모델링함.
     * 이산 토큰 기반 IRIS보다 더 나은 시각적 세부 사항을 포착함.
     * Atari 100k에서 인간보다 46% 더 나은 성능을 보임.

GN⁺의 정리

     * DIAMOND는 강화 학습에서 시각적 세부 사항의 중요성을 강조함.
     * 확산 모델을 사용하여 더 나은 시각적 세부 사항을 포착할 수 있음.
     * Atari와 CSGO와 같은 게임에서의 성능 향상을 보여줌.
     * 관련 분야의 연구자들에게 흥미롭고 유용한 자료가 될 수 있음.
     * 유사한 기능을 가진 프로젝트로는 DreamerV2와 PlaNet이 있음.

        Hacker News 의견

     * 한 사용자는 링크된 비디오가 자신의 꿈과 매우 유사하다고 언급하며, 꿈에서 높은 점프를 시도할 때와 비슷한 경험을 한다고 설명함
     * 300M 파라미터 모델이 GTX4090으로 12일 동안 5M 프레임으로 훈련되었음을 설명함
     * 2015년 대형 기술 회사가 이와 유사한 작업을 했다고 언급함
     * 대규모 LLMs와 같은 산업 규모의 작업은 매우 놀라울 것이라고 언급함
     * 게임 엔진에서 현실적인 물리학 근사치를 생성하는 데 사용할 수 있을 것이라고 설명함
          + 무거운 물리 엔진을 사용하여 게임 플레이 스니펫을 생성하고 모델이 물리학을 근사화하도록 학습시킴
          + 여러 전문화된 물리 엔진을 가질 수 있을 것이라고 제안함
     * 실제로 시도해본 사람에게 게임 맵을 구축하는지, 아니면 이상한 환각적 경험인지 묻는 질문을 제기함
     * 안정적 확산의 기본 개념을 이해한다고 주장하며, 3D 자산 수준에서 이를 시도하는 연구가 있는지 궁금해함
     * NN 이미지와 비디오에서 ""지옥의 소음""을 인식하지 못하는 사람들에 대해 의아해함
     * Schmidhuber의 그룹이 2018년에 했던 작업을 언급하며 링크를 공유함
     * 최신 GTA와 관련된 실제 영상으로 모델을 훈련하여 오래된 게임의 비주얼을 업그레이드하는 것이 흥미로울 것이라고 언급함
     * 언어 모델과 결합할 방법이 있는지 궁금해하며, 언어가 세계 모델에 기반해야 한다고 주장함
     * 언어 모델이 비효율적이라고 생각하며, 구조 공학 도구로 훈련된 ""게임""을 상상함
     * 이 네트워크가 세계를 이해하고 유용한 행동을 예측하거나 질문에 답할 수 있는 부분이 될 수 있다고 설명함
     * 강력한 루프가 있는 이 모델이 새로운 이미지나 맵을 시작으로 사용할 때 어떻게 반응할지 궁금해함
"
"https://news.hada.io/topic?id=17263","애플, A17 칩 적용한 새 iPad Mini 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플, A17 칩 적용한 새 iPad Mini 공개

     * A17 Pro 칩(6코어 CPU + 5코어 GPU) 탑재
     * Apple Intelligence (16코어 뉴럴엔진) 지원
     * Apple Pencil Pro 지원
     * 스마트 HDR4 지원하는 12M 와이드 후면 카메라 ƒ/1.8
     * Wi-Fi 6E 지원, 물리심 지원 없는 eSIM 전용
     * USB-C 포트
     * 블루/퍼플/스타라이트/스페이스 그레이 색상
     * Touch ID
     * 128/256/512GB
     * 293g / 297g(셀룰러)

   발표 없이 조용히 공개했네요. 뭐 특별히 변한게 없어서 그런듯.

   다른 아이패드와 스펙을 겹치지 않게 하려고 기존과 동일한 레벨의 스펙으로 나오는 것 같아요. 여기에 통화까지 되면 아이폰 대신 미니 들고 다닐 사람도 많을 듯 합니다. 통화는 에어팟으로 하고요. 하지만 아이폰, 아이패드의 시장 잠식할 스펙을 다 피하니 제품 매력이 적은 애매한 포지션만 계속 유지하고 있다고 생각합니다
"
"https://news.hada.io/topic?id=17286","Apple Vision Pro와 함께하는 여행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Apple Vision Pro와 함께하는 여행

     * Apple Vision Pro는 비행기나 기차 여행 시 주변 환경을 차단하고 영화 감상이나 노트북 작업에 몰입할 수 있는 훌륭한 장비임
     * 이 블로그에서는 Vision Pro의 기능, 단점, 그리고 스마트폰이나 노트북과 비교한 성능을 설명함

  짐 꾸리기 / 여행 준비

     * 여행 시 공간 절약이 중요하며, Apple의 $200 Vision Pro ""여행 케이스""는 크기가 너무 커서 추천하지 않음.
     * 기본 제공되는 ""Vision Pro Cover""와 저렴한 VR 렌즈 보호 커버를 사용하여 기기를 보호함.
     * 배터리 팩은 충전 후 분리하여 가방에 보관함.

  사용자 경험

     * 공항 보안 검사: Vision Pro는 보안 검사에서 의심받지 않음.
     * 여행 모드: 이동 중인 차량에서의 추적 문제를 해결하기 위해 설계된 모드로, 비행기에서 자동으로 활성화됨.
     * 배터리 수명: 2.5-3시간으로, 짧은 비행에는 충분하지만 긴 비행에는 제한적임. 고출력 배터리 팩 사용을 권장함.
     * 물리적 편안함: VR Cover Universal Headset Support Strap을 사용하여 무게 분산을 개선함.
     * 사회적 편안함: Passthrough + EyeSight 기능으로 주변 환경 인식 가능.

  UI 상호작용

     * VisionOS의 상호작용 시스템은 최소한의 손동작으로 시스템을 조작할 수 있어 편리함.
     * 가상 환경 / 깊이 충돌 완화: 가상 화면과 실제 물체 간의 충돌을 부분 가상 환경으로 완화 가능.

  AirPods Pros + Vision Pro

     * AirPods Pro는 Vision Pro와 함께 사용하기에 이상적이며, 뛰어난 노이즈 캔슬링 기능을 제공함.
     * 공간 오디오: 상황에 맞게 소리를 조정할 수 있으며, 필요에 따라 비활성화 가능함.

  영화 감상

     * Vision Pro는 비행 중 영화 감상에 탁월한 장비로, 다양한 앱을 통해 고품질의 비디오 및 오디오를 제공함.
     * 시네마 환경: 가상 환경에서 영화 감상 시 몰입감을 높여줌.
     * 개인 정보 보호: VR로 영화를 감상하면 주변 사람들에게 방해받지 않음.

  Mac 가상 디스플레이

     * MacBook과 Vision Pro를 연결하여 가상 모니터로 사용 가능하며, 더 많은 화면 공간을 제공함.
     * 개인 정보 보호: 가상 화면을 통해 민감한 작업을 안전하게 수행 가능함.

  결론

     * Apple Vision Pro는 여행 중 영화 감상 및 작업 공간 확장에 훌륭한 장비임.
     * 초기 제품으로서의 한계가 있지만, 향후 발전 가능성이 큼.

GN⁺의 정리

     * Apple Vision Pro는 여행 중 몰입형 엔터테인먼트와 작업 환경을 제공하는 혁신적인 장비임.
     * 초기 제품으로서의 한계가 있지만, 향후 발전 가능성이 커 보임.
     * 비슷한 기능을 가진 제품으로는 Meta Quest 시리즈가 있음.
     * 이 기기는 특히 빈번한 여행자에게 유용할 수 있으며, 향후 버전에서는 더 많은 사용자에게 인기를 끌 것으로 예상됨.

        Hacker News 의견

     * Xreal Air 안경과 iPhone 16pro를 사용하여 비행 중 가상 60인치 화면을 즐길 수 있음. USB-C 케이블로 연결하면 Netflix 등 콘텐츠를 쉽게 시청할 수 있음. 구형 iPhone에서는 사용이 불편하며, HDCP 문제로 다운로드한 콘텐츠만 사용 가능함
     * 고해상도 카메라가 항상 사람들을 촬영하는 것에 대한 우려가 있음. 데이터 브로커들이 이러한 콘텐츠에 접근하려는 시도가 있을 수 있음. 예를 들어, 개인의 사생활을 침해할 수 있는 정보가 판매될 가능성이 있음
     * 비행기에서 스키마스크를 착용하는 것이 사회적으로 허용되는 유일한 장소라는 의견에 동의함. Vision Pro를 집에서 사용할 때 아내가 놀림
     * 긴 비행에서 Quest 기기를 사용했으며, 여행 모드로 설정하여 좋은 경험을 함. 512G 플래시 드라이브에 콘텐츠를 저장하여 인터넷 연결 없이도 영화 감상이 가능함. 여행 시 VR 사용을 추천함
     * N95 마스크를 착용하는 사람들에게 3M Aura 9205+가 Vision Pro와 잘 맞으며 편안함을 제공함
     * Vision Pro는 여행 시 부피가 크고 전용 공간이 필요하여 불편함. 작은 공간에 쉽게 넣을 수 있는 기기가 더 좋음
     * Vision Pro를 소유한 사람으로서, 여전히 정기적으로 사용하며 놀라움을 느낌. Macbook과 함께 사용하면 큰 가상 확장 화면으로 유용함. 초기에는 눈 피로와 어지러움이 있었으나 적응 후 개선됨. 커피를 마실 때는 빨대를 사용하는 것이 좋음
     * 제스처 및 눈 초점 UI가 매우 좋지만, 웹 UI의 밀집된 컨트롤로 인해 실수 입력이 발생할 수 있음. 패스스루 비디오 품질은 개선될 여지가 있음
     * 몰입형 환경이 훌륭하며, 비행기에서 사용하기 좋음. Bora Bora, Marvel, Star Wars 등 다양한 환경을 제공함
     * 여행 중 일하는 것을 선호하지 않으며, Vision Pro는 비행 중 가방에 보관함. 집을 떠나 있을 때는 휴대용 Apple Studio Display로 유용함
     * 비행기에서 손을 흔드는 대신 'look-and-pinch' 상호작용이 유용하다는 의견이 흥미로움. Quest 사용 시 공간 제약으로 인해 불편함이 있었음
"
"https://news.hada.io/topic?id=17282","MacOS 시스템 업데이트 후 발생하는 트래픽 누출 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    MacOS 시스템 업데이트 후 발생하는 트래픽 누출 현상

  macOS 시스템 업데이트 후 트래픽 유출 문제

     * macOS 시스템 업데이트 후 트래픽이 유출될 수 있는 문제를 발견함
     * 현재로서는 재부팅이 문제를 해결할 수 있는 것으로 보임
     * 추가 정보를 제공하기 위해 조사 중임

  현재 상태

     * 이 시나리오에서 macOS 방화벽이 제대로 작동하지 않으며 방화벽 규칙을 무시하는 것으로 보임
     * 대부분의 트래픽은 라우팅 테이블에 따라 VPN 터널을 통해 전송됨
     * 그러나 일부 앱은 라우팅 테이블을 무시하고 터널 외부로 트래픽을 전송할 수 있음
     * Apple의 자체 앱과 서비스가 macOS 14.6부터 최근 15.1 베타까지 이러한 행동을 보임

  다음 단계

     * Apple에 이 문제를 보고하였으며, 가까운 시일 내에 수정되기를 기대함
     * 추가 정보를 제공하고 앱에서 구현할 수 있는 해결책을 찾기 위해 계속 조사할 예정임

  영향을 받는지 확인하는 방법

     * 터미널에서 다음 명령어를 실행하여 영향을 받는지 확인할 수 있음
         1. 모든 트래픽을 차단하는 방화벽 규칙 추가
echo ""block drop quick all"" | sudo pfctl -ef -

         2. 터널 외부로 트래픽 전송 시도
curl https://am.i.mullvad.net/connected

          + 실험 후 방화벽을 비활성화하고 모든 규칙을 초기화
sudo pfctl -d
sudo pfctl -f /etc/pf.conf

     * 앱이 유출되는지 확인하는 방법
         1. VPN에 연결되지 않은 상태 확인
         2. 기본 인터페이스 찾기
route get mullvad.net | sed -nE 's/.*interface: //p'

         3. 앱을 사용하여 VPN 서버에 연결
         4. 다음 명령어 실행 (""<interface>""를 2단계에서 찾은 인터페이스로 대체)
curl --interface <interface> https://am.i.mullvad.net/connected

         5. 모든 것이 정상 작동하면 요청이 시간 초과되어야 함. 응답이 있으면 유출되고 있는 것임

GN⁺의 정리

     * 이 기사는 macOS 시스템 업데이트 후 발생할 수 있는 트래픽 유출 문제를 다루고 있음
     * VPN을 사용하는 사용자에게 중요한 문제로, 보안과 개인정보 보호에 영향을 미칠 수 있음
     * Apple의 앱과 서비스가 라우팅 테이블을 무시하는 사례가 있어, 사용자에게 주의가 필요함
     * 유사한 기능을 가진 다른 VPN 서비스로는 NordVPN, ExpressVPN 등이 추천됨

        Hacker News 의견

     * macOS 방화벽이 제대로 작동하지 않으며, 특히 Apple의 앱과 서비스가 방화벽 규칙을 무시하는 경우가 있음. macOS 업데이트 시 기본 설정으로 변경되는 경우가 많아 번거로움이 있음. 인터넷 연결을 끊고 설치하면 시간이 절약됨.
     * VPN을 안전하게 사용하려면 기기 외부, 즉 라우터 수준에서 구현해야 함. Apple 기기에서 특히 중요함. 트래픽을 분석하기 위해 Wireshark를 사용할 것을 권장함.
     * iOS에서는 App Store가 VPN을 우회하며, VPN을 사용할 경우 업데이트 다운로드가 차단될 수 있음. Mac에서는 첫 부팅 시 VPN 연결 문제가 발생할 수 있음.
     * macOS에서 로그인 전 탭의 오디오가 유출되는 문제가 있음. '복원' 기능을 비활성화했음에도 불구하고 브라우저가 자동으로 시작되어 오디오가 재생됨.
     * 앱이 라우팅 테이블을 존중하지 않는 경우가 많음. 사용자 기기에서 벤더가 특권을 가지는 것을 중단해야 함.
     * NixOS가 좋다는 이야기를 들었지만, 브라우저와 앱 때문에 GUI 운영체제가 필요함. macOS에서 벗어나고 싶지만, Apple에 의존하는 디지털 생활을 구성해 놓았음.
     * macOS 시스템 업데이트 후 첫 부팅 시 여러 앱이 자동으로 실행되는 버그가 있음. '재개' 설정을 꺼도 앱이 새 창을 생성하며, 디스크 마운트가 완료되기 전에 실행됨. 이는 OS가 불안정하게 느껴지게 함.
"
"https://news.hada.io/topic?id=17327","Net 9.0 LINQ 성능 개선 사항","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Net 9.0 LINQ 성능 개선 사항

    .NET 9.0 LINQ 성능 개선

     * Span<T> 사용한 반복
          + .NET 9.0에서 LINQ의 성능이 크게 개선되었음.
          + Span<T>를 사용하여 배열을 반복하면 성능이 향상됨.
          + TryGetSpan() 메서드를 사용하여 배열이나 리스트를 ReadOnlySpan<T>로 변환하여 반복 속도를 높임.
     * TryGetSpan() 메서드
          + TryGetSpan()은 배열이나 리스트를 ReadOnlySpan<T>로 변환하여 반복 성능을 개선함.
          + 코드 최적화는 미세한 부분에서 이루어지며, 성능 전문가들이 작성한 코드임.
          + 리스트의 내부 배열이 변경될 수 있어 CollectionsMarshal.AsSpan() 사용 시 주의가 필요함.
     * TryGetSpan() 호출자
          + TryGetSpan()을 호출하는 메서드를 분석하여, 많은 Enumerable 메서드가 배열이나 리스트일 때 스팬을 사용하려고 시도함.
          + yield를 사용하는 연산은 이 최적화를 사용할 수 없음.
     * 특수화된 반복자
          + LINQ의 내부 IIListProvider와 IPartition을 기반 반복자 클래스로 통합하여 성능을 개선함.
          + 특정 LINQ 호출 체인을 인식하여 효율적으로 처리하는 특수 반복자를 생성함.
     * Iterator<T>와 파생 클래스 구현
          + Iterator<T>는 추상 클래스이며, 파생 클래스는 필요한 메서드만 재정의함.
          + ListWhereSelectIterator<TSource, TResult>는 Where(...).Select(...) 체인을 단일 반복자로 처리하여 성능을 개선함.
     * IListSkipTakeIterator<TSource> 사례 연구
          + MoveNext() 메서드는 불필요한 반복을 피하고, _minIndexInclusive와 _maxIndexInclusive 범위 내의 요소만 처리함.

  GN⁺의 정리

     * .NET 9.0에서 LINQ의 성능이 크게 개선되었으며, 특히 Span<T>와 TryGetSpan()을 사용하여 반복 성능을 높임.
     * LINQ의 내부 구조가 최적화되어, 특정 호출 체인을 인식하고 효율적으로 처리하는 특수 반복자를 생성함.
     * 이러한 개선은 코드의 성능을 높이는 데 도움이 되며, 최신 .NET 버전으로 마이그레이션하여 이러한 이점을 누릴 수 있음.
     * LINQ와 유사한 기능을 제공하는 다른 라이브러리로는 System.Linq.Async가 있음.

        Hacker News 의견

     * LINQ의 가장 유용한 부분은 IEnumerable 확장임. 이는 C#을 함수형 스타일로 작성할 수 있게 해줌
          + Haskell을 배우고 나서 LINQ의 개념이 이해되었음
          + 경험이 없는 팀이 사용할 경우 복잡하고 느린 코드가 될 수 있음
     * dotnet 팀이 도구에 더 많은 자원을 투자하지 않는 이유를 이해할 수 없음
          + 문서 생성, 더 나은 유닛 테스트, 소스 코드 접근성 개선 필요성 언급
          + NuGet의 대부분의 패키지에 문서가 부족함
     * LINQ 성능 개선은 Microsoft의 자체 List<T> 구현 성능 개선에 집중되어 있음
          + 람다 할당과 컴파일 시간 감소에 투자 필요성 강조
          + LINQ 변수에 와일드카드 지원 필요성 언급
     * LINQ는 언어 간의 주요 차별화 요소 중 하나임
          + C# 3 이후로 거의 변화가 없었음
          + LINQ가 리스트 반복에만 유용하다고 생각하는 것은 아쉬운 일임
     * C#이 F#에서 더 많은 것을 차용할수록 만족스러움
          + 차별화된 유니온이 C#에 도입되기를 기대함
     * 다른 언어를 사용할 때 LINQ가 그리움
          + 표준 라이브러리에 LINQ가 있는 것은 큰 장점임
     * LINQ를 사용하기 시작하면 다른 것을 사용하기 어려워짐
     * 종합적인 dotnet 웹 개발 학습 자료를 찾기 어려움
          + 대부분의 자료가 초보적이거나 품질이 낮음
     * 현대적인 Net 코드의 주석이 너무 복잡함
          + 더 나은 방법이 필요함
     * .NET 9의 성능 개선 관련 섹션이 있음
          + 특정 메서드로 끝나는 체인에서 더 많은 최적화 가능성 언급
     * OrderBy(criteria).First()가 Min(criteria)로 최적화될 수 있음
          + 라이브러리가 비효율적인 패턴을 인식하고 수정하는 것은 긍정적임
"
"https://news.hada.io/topic?id=17231","Python 3.8의 TypedDicts는 생각보다 꽤 좋음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Python 3.8의 TypedDicts는 생각보다 꽤 좋음

     * TypedDict는 PEP-589에서 소개되었으며, Python 3.8에 도입되었음. 주로 딕셔너리의 타입 주석을 생성하는 데 사용됨.
     * dataclass나 pydantic을 사용하여 '레코드' 타입 데이터를 표현하는 대신, TypedDict는 딕셔너리의 유연성을 활용하여 필드가 누락될 수 있는 상황에서 유리함.
     * 예를 들어, Movie 클래스를 정의하고 movie 변수에 Movie 타입의 사전을 할당하는 방식

class Movie(TypedDict):
    title: str


movie: Movie = {""title"": ""Avatar""}

Non-totality

     * TypedDict은 필드가 누락될 수 있음을 나타내는 개념인 non-totality를 지원. HTTP PATCH 엔드포인트 구현 시 유용
     * dataclass는 필드 누락 개념이 없어 어색할 수 있음
     * TypedDict에서는 total=False로 설정하여 유연하게 필드 누락을 처리 가능
     * PEP-655에서는 Required와 NotRequired로 개별 필드 표시 가능

TypedDict를 **kwargs로 사용

     * PEP-692는 TypedDict를 사용하여 가변 키워드 인수를 입력할 수 있게 함
     * TypedDict를 사용하면 코드가 장황해 보일 수 있으나, 여러 함수 정의에서 재사용 시 유용
     * Non-totality와 함께 사용하면 더욱 강점 발휘
          + pytest.fixture를 커스텀하면서 일부 인수를 그대로 전달하는 시나리오 등
     * Sentinel 값으로 유사한 동작 구현 가능하나 타입 어노테이션이 어색해질 수 있음

의존성 주입에 TypedDict 사용

     * PEP-692는 TypedDict를 사용한 함수 호출 시 타입 검사 가능하게 함
     * 많은 리소스가 일부 의존성을 공유하는 상황에서 유용
     * 모든 리소스의 kwargs를 합친 것과 유사한 TypedDict를 정의
     * 리소스가 임의의 인수를 받도록 재작성한 후 TypedDict로 의존성 주입
     * 타입 시스템을 통해 의존성 주입 시 인수 오류나 누락 검사 가능
     * 리소스 시그니처 변경은 이상적이지 않으나 의존성 주입 프레임워크보다는 작은 변화
     * 정적 타입 검사를 지원하지 않는 프레임워크가 많음

향후 기능

     * PEP-728은 추가 항목의 타입을 정의하고, 추가 항목을 허용하지 않는 닫힌 사전 정의 가능하게 함
          + 레코드 타입을 더 정확하게 정의하는 데 도움
     * PEP-705는 읽기 전용 항목 지정 가능하게 함 (발표 시점에 따라 이미 출시되었을 수 있음)
          + 직관적으로 호환되어야 하는 다른 TypedDict 간에 잠재적 변이(삭제)로 인한 문제 발생 가능한 상황 대응

    GN⁺의 정리

     * TypedDict는 딕셔너리의 유연성을 활용하여 필드가 누락될 수 있는 상황에서 유리함.
     * TypedDict는 dataclass나 pydantic과 같은 다른 데이터 구조보다 더 유연한 옵션을 제공함.
          + 도메인에 따라 적합한 도구를 선택하되, TypedDict의 장점도 염두에 둘 것

   데이터가 외부에서 json 형태로 오거나 파이썬 외부로 export하는 일이 잦은 경우에는 TypedDict를 사용하면 좋고, 그게 아니라면 구조화된 dataclass나 NamedTuple을 사용하는 것을 추천합니다.

        Hacker News 의견

     * 동적 타입을 선호하는 사람들이 점점 타입 시스템의 중요성을 깨닫고 있음
          + 더 나은 타입 시스템이 더 나쁜 타입 시스템보다 우수함
     * dataclass(slots=True)를 TypedDict 대신 사용하는 이유
          + 속성 접근이 더 빨라 코드가 더 빠름
          + 슬롯 클래스는 더 적은 RAM을 사용하고, L1 캐시 압박이 적어 코드가 더 빠름
          + 속성 접근 시 [""foobar""] 대신 .foobar를 사용해 손목에 부담이 덜함
          + 속성 이름을 잘못 입력하면 런타임 오류 발생
     * 타입을 강제하는 시스템이 없다면 TypedDict는 아무런 역할을 하지 않음
          + 문자열로 주석된 속성에 실수를 저장해도 기본 Python은 이를 막거나 경고하지 않음
          + 타입을 실제로 강제하려면 Pydantic 같은 도구를 사용해야 함
     * ""thank you think""라는 제목은 지나치게 무례하게 들림
          + ""than i thought""가 더 읽기 좋음
     * 구독 관련 문장에서 ""None""의 의미가 불명확함
          + 문법이 복잡해 이해하기 어려움
     * TypedDict에 대한 개인적인 경험
          + 코드의 가독성을 높이기 위해 TypedDict를 사용해 dicts를 주석 처리함
          + 코드 경로를 추적하는 시간을 줄일 수 있었음
          + 더 나은 코딩 실력이 필요하지만, dict를 많이 사용하는 앱에서는 좋은 해결책임
     * TypedDict의 기능은 좋지만 선언 구문이 복잡함
"
"https://news.hada.io/topic?id=17328","미국, 테슬라의 "FSD" 치명적 사고후 자율주행 소프트웨어에 대한 조사 시작 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국, 테슬라의 ""FSD"" 치명적 사고후 자율주행 소프트웨어에 대한 조사 시작

     * 미국 자동차 안전 규제 당국은 4건의 충돌 사고 보고를 받고 FSD가 장착된 240만 대의 테슬라 차량에 대한 조사에 착수함
     * 2023년 11월 애리조나주 림록에서 보행자가 2021년형 테슬라 모델 Y에 치여 사망한 사고 포함
     * 해당 조사는 2016-2024년형 모델 S, X, 2017-2024년형 모델 3, 2020-2024년형 모델 Y, 2023-2024년형 사이버트럭 차량을 대상으로 함

FSD의 안전성 우려

     * NHTSA는 햇빛 눈부심, 안개, 먼지 등으로 인해 도로 가시성이 낮은 상황에서 FSD가 작동 중일 때 발생한 충돌 사고를 조사 중임
     * FSD의 엔지니어링 제어 기능이 가시성이 낮은 상황을 감지하고 적절히 대응할 수 있는지 검토할 예정임
     * 테슬라가 FSD 시스템을 업데이트 또는 수정했는지, 그러한 변경이 안전에 미치는 영향을 평가했는지 확인할 계획임

FSD 기술 개발 현황

     * 테슬라의 FSD 기술은 수년간 개발되어 왔으며, 차량이 대부분의 주행 작업을 운전자의 개입 없이 처리할 수 있는 높은 수준의 자동화를 목표로 함
     * 2022년 12월 테슬라는 오토파일럿 고급 운전자 지원 시스템에 새로운 안전장치를 설치하기 위해 200만 대 이상의 미국 내 차량을 리콜함

테슬라 FSD 관련 법적 논란

     * 2023년 10월 테슬라는 미국 법무부가 FSD 및 오토파일럿 시스템과 관련하여 소환장을 발부했다고 공개함
     * FSD 기술과 관련하여 최소 2건의 치명적인 사고가 발생했으며, 이 중 한 건은 2023년 4월 시애틀 지역에서 FSD 모드로 주행 중이던 테슬라 모델 S가 28세 오토바이 운전자를 치어 사망에 이르게 한 사건임

테슬라의 '카메라 전용' 접근 방식에 대한 우려

     * 일부 업계 전문가들은 테슬라가 부분 및 완전 자율주행 시스템에 '카메라 전용' 접근 방식을 사용하는 것이 가시성이 낮은 상황에서 문제를 일으킬 수 있다고 지적함
     * 테슬라의 경쟁사들은 값비싼 라이더와 레이더 센서를 사용하여 주행 환경을 감지함

GN⁺의 의견

     * FSD 기술의 안전성과 신뢰성에 의문이 제기되고 있음. 특히 가시성이 낮은 상황에서의 작동 능력과 관련하여 우려가 있음
     * 자율주행 기술 개발에 있어서 카메라 이외에도 다양한 센서를 활용하는 것이 중요할 것으로 보임. 라이더, 레이더 등 보완적인 센서 기술의 도입을 고려해볼 만함
     * 테슬라의 로보택시 구상은 흥미로운 비전이지만, 실제 상용화까지는 기술적, 규제적 장벽이 있을 것으로 예상됨. 안전성 확보가 최우선 과제가 될 것임
     * 자율주행 기술 도입 시 소비자 수용성, 사회적 영향, 윤리적 이슈 등 다양한 관점에서의 논의와 사회적 합의가 필요할 것으로 보임
     * 현대자동차, 웨이모 등 다른 자동차 회사들도 자율주행 기술 개발에 박차를 가하고 있음. 기술 발전 추이와 시장 동향을 면밀히 살펴볼 필요가 있음

        Hacker News 의견

     * 자율주행 기술의 안전성에 대한 의문이 제기됨. 한 사용자는 Tesla의 FSD를 사용해본 후 위험하다고 판단하여 사용을 중단했음
          + 시스템 오류로 인해 신뢰를 잃었으며, 수동 개입이 필요했음
          + 기본 설정이 너무 공격적이며, 안전하지 않은 상황에서 우회전을 시도함
          + 고속도로에서 차선 변경 후 출구를 놓치는 경우가 있었음
     * Tesla 운전자가 태양 때문에 사고를 일으켰다는 이유로 처벌받지 않은 것에 대한 의문 제기
          + 운전자가 고가의 차량을 소유하면서 저렴한 선글라스를 구매하지 않은 것은 과실임
     * 자율주행 기술의 수용 기준에 대한 논의
          + 인간 운전자의 사고율보다 낮아야 한다는 의견
          + 기술이 생명을 구할 수 있음에도 불구하고 규제로 인해 제한될 수 있음
     * Tesla의 FSD 소프트웨어가 완전 자율주행이 아님에도 불구하고 오해를 불러일으킨다는 의견
          + Tesla에 대한 법적 조치가 필요하다는 주장
     * 자율주행차 회사들이 안전성을 경쟁하는 상황에 대한 비판
          + 오픈 소스 소프트웨어가 아니면 자율주행차를 소유하지 않겠다는 의견
          + 독점적인 안전 기술은 불법화되어야 한다는 주장
     * 자율주행 기술에 대한 논의가 데이터 기반이 되어야 한다는 의견
          + Tesla의 안전 보고서가 편향되었거나 거짓이 아니라면, 자율주행이 더 안전하다는 주장
     * Tesla Model Y의 자율주행 기능에 대한 다양한 경험 공유
          + 자율주행이 때로는 마법처럼 완벽하지만, 때로는 불편함을 초래함
          + 운전 기술과 즐거움에 대한 개인차가 큼
     * Tesla Model 3의 장애물 회피 기능에 대한 불만
          + 자율주행이 아닌 상황에서도 장애물 회피가 제대로 작동하지 않았음
     * Tesla의 소프트웨어 업데이트로 인한 잠재적 위험성에 대한 우려
          + 사이버 공격의 대상이 될 수 있으며, 업데이트 후 안전성을 어떻게 보장할 것인지에 대한 의문 제기
"
"https://news.hada.io/topic?id=17288","Show GN: AutoRAG: HuggingFace Space 오픈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: AutoRAG: HuggingFace Space 오픈

     * AutoRAG는 ML을 자동으로 최적화 해주는 AutoML처럼 RAG를 자동으로 최적화 해줌
     * 이번 업데이트로 “설치 없이” 허깅페이스 스페이스에서 바로 사용 가능.
     * 클릭만으로 다음과 같은 작업을 수행할 수 있음
          + 내 pdf 문서를 기반으로 LLM 챗봇 제작
          + 제작한 LLM 챗봇을 최적화하고, 최적화 되지 않은 챗봇과 비교
          + 최적화한 챗봇을 직접 사용
          + 최적화를 위한 데이터셋 자동 생성


   이 전 글의 링크가 잘못되어 부득이하게 재 업로드 합니다.
"
"https://news.hada.io/topic?id=17311","작은 아카이브를 위한 정적 웹사이트 활용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         작은 아카이브를 위한 정적 웹사이트 활용

     * 작은 아카이브를 위한 정적 웹사이트 사용
     * 디지털 데이터를 더 의도적이고 체계적으로 관리하려는 노력의 일환으로, 로컬 아카이브를 탐색하기 위해 정적 웹사이트를 생성하고 있음
          + 스캔한 문서, 생성한 문서, 캡처한 스크린샷, 북마크한 웹 페이지, 저장한 비디오 및 오디오 파일 등 다양한 컬렉션에 대해 웹사이트를 만듦
          + 각 컬렉션은 다른 디자인을 사용하여 파일을 설명하며, 예를 들어 스크린샷은 이미지 그리드로, 북마크는 텍스트 링크 시리즈로, 비디오는 썸네일과 텍스트가 혼합된 목록으로 표시됨
          + 웹사이트는 macOS Finder보다 파일을 탐색하는 더 나은 방법을 제공하며, 메타데이터를 추가하고 파일을 검색하고 조직하는 방법을 구축할 수 있음
     * 정적 웹사이트로의 전환 과정
     * 파일과 폴더를 사용한 기존의 방법은 계층적 조직을 요구하여 미디어 파일을 관리하는 데 어려움이 있었음
          + 키워드 태그를 사용하여 파일을 여러 방법으로 찾을 수 있는 유연성을 선호함
          + DEVONThink, Evernote, Yojimbo와 같은 ""모든 것 버킷"" 앱을 시도했지만, 앱의 사고방식에 맞추어야 하는 점이 불편했음
          + 프로그래밍 경험을 쌓은 후에는 파일을 조직하기 위한 도구를 직접 작성했지만, 유지보수의 부담이 있었음
          + HTML 파일을 사용하여 폴더를 미니 웹사이트로 변환하여 문제를 해결함
     * ""작은""에 중점을 둠
     * 파일을 수동으로 조직하고 메타데이터를 작성하는 과정이 대규모 컬렉션에는 적합하지 않지만, 저장할 가치가 있는 것을 결정하는 데 도움이 됨
          + 대량으로 수집된 파일을 작은 웹사이트로 정리하여 더 유용하게 설명함
          + 자동화를 좋아하지만, 수동 프로세스의 제약을 즐기고 있음
     * 선행 연구
     * 정적 웹사이트를 사용하는 것은 새로운 것이 아니며, Twitter의 계정 내보내기에서 영감을 받음
          + 디지털 보존을 위한 강력한 아이디어로, 단순성, 장수성, 낮은 유지보수의 이점이 있음
          + Data Lifeboat 프로젝트에서 더 큰 정적 웹사이트를 구축하는 데 이 아이디어를 탐구하고 있음
     * GN⁺의 정리
     * 정적 웹사이트를 사용하여 디지털 아카이브를 관리하는 방법은 단순하면서도 효과적인 파일 관리 방법임
     * HTML의 장수성과 유연성을 활용하여 개인 아카이브를 구축할 수 있으며, 이는 디지털 보존에 유용할 수 있음
     * Blake Watson의 ""HTML for People""은 웹사이트 제작을 배우고자 하는 사람들에게 유용한 자원임
     * HTML을 웹 게시 도구로만 생각했던 것을 넘어, 개인적인 아카이브를 위한 도구로 활용할 수 있음을 깨달음

        Hacker News 의견

     * 이미지를 클립보드에 복사하여 HTML 파일에 저장하여 단일 파일 갤러리를 만드는 방법을 공유함
          + 파일 선택기를 통해 선택하는 것도 가능하지만 드래그는 잘 작동하지 않음
          + 이미지를 추가한 후 페이지를 저장하면 블롭이 함께 저장됨
          + 서버에 페이지를 올리거나 컴퓨터/모바일에서 더블 클릭하여 열 수 있음
     * 많은 사람들이 댓글에서 Markdown을 언급함
          + Plain text는 미래 지향적이며 데이터 저장에 중요한 역할을 함
          + WordPerfect 이후로 직접 포맷팅 문자를 볼 수 있는 문서를 선호해 왔음
          + Markdown은 HTML을 위한 DSL(도메인 특화 언어)로 훌륭함
          + Markdown 도구로는 Firefox의 Markdown Viewer와 Markdeep이 있음
     * 콘텐츠를 Markdown으로 변환하고 관련 이미지를 Obsidian vault에 저장함
          + Syncthing으로 자가 동기화하여 효과적인 기억 보조 장치로 사용함
          + Google/Facebook의 데이터를 재포맷하여 저장하고 인덱싱함
          + 텍스트는 저렴하고 대부분의 이미지를 피함
     * 개인적으로 Obsidian을 사용하여 데이터를 저장함
          + 외부 서비스는 언제든지 사라질 수 있으므로 로컬 데이터는 소유권과 검색 용이성을 제공함
          + Kindle 하이라이트를 Markdown 파일로 변환하는 스크립트를 작성함
          + Static Site Generator 생태계가 계속 발전하고 있음
     * 15년 동안 HTML에 이미지와 MP3를 포함하여 포터블 HTML을 만듦
          + MHTML 형식을 사용하여 아카이브를 생성함
          + 간단한 HTTP 서버를 실행하여 아카이브를 탐색함
          + 이미지 저장 및 변환 방법을 공유함
     * 오래된 작업을 자주 검토하는 이유에 대해 궁금해하는 의견을 공유함
     * VimWiki를 사용하여 작업 중 노트를 작성함
          + SingleFile 도구를 사용하여 웹사이트를 저장하고 주석을 추가함
     * HTML 파일을 수동으로 편집하는 것은 번거로울 수 있으며 간단한 DIY 정적 사이트 생성기를 사용하는 것이 이상적임
     * HTML 포함 기능을 사용하여 작업을 수행함
"
"https://news.hada.io/topic?id=17260","소프트웨어 엔지니어링의 Gettier 사례 (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     소프트웨어 엔지니어링의 Gettier 사례 (2019)

철학을 뒤흔든 세 페이지 논문: 소프트웨어 엔지니어링의 Gettier

     * Gettier 사례 소개
          + 1963년 철학자 Edmund Gettier는 ""Is Justified True Belief Knowledge?""라는 논문을 발표하여 철학계에 큰 영향을 미침.
          + 전통적으로 지식은 '정당화된 참된 믿음'으로 정의되었으나, Gettier는 이를 반박하는 사례를 제시함.
          + 예를 들어, 들판에 있는 소를 보고 있다고 생각하지만, 실제로는 종이로 만든 모형을 보고 있는 상황을 상상해볼 수 있음. 실제 소가 그 뒤에 있다면, 이는 정당화된 참된 믿음이지만, 지식이라고 할 수 없는 상황임.
     * 소프트웨어 엔지니어링에서의 Gettier 사례
          + 필자가 근무했던 회사 Genius의 CTO는 Gettier 사례에 관심이 많았으며, 이를 ""gettier""라고 불렀음.
          + 소프트웨어 개발에서는 이러한 Gettier 사례와 유사한 상황을 자주 접할 수 있음.
          + 예를 들어, 웹 애플리케이션에서 검색 필드의 포커스 문제를 해결하려 했으나, 실제로는 다른 개발자가 프레임워크를 변경하여 발생한 문제였음.
     * 새로운 용어의 탄생
          + 철학자들은 이러한 사례를 진정한 Gettier 사례로 보지 않을 수 있지만, 개발자들에게는 유용한 개념임.
          + 여러 원인이 있을 수 있는 문제 상황에서, 한 가지 원인에 대한 믿음을 가지게 되는 경우를 설명하는 데 유용함.
          + 이러한 개념을 통해 개발자는 문제 해결 시 더 주의 깊게 접근할 수 있음.

GN⁺의 정리

     * Gettier 사례는 철학뿐만 아니라 소프트웨어 엔지니어링에서도 중요한 개념으로, 복잡한 문제 해결에 도움을 줄 수 있음.
     * 소프트웨어 개발자는 다양한 원인이 얽힌 문제를 자주 마주하게 되며, 이러한 상황을 이해하고 대비하는 것이 중요함.
     * 이 글은 개발자들이 문제 해결 시 더 깊이 있는 사고를 할 수 있도록 돕는 흥미로운 사례를 제공함.
     * 유사한 기능을 가진 프로젝트로는 GitHub의 다양한 오픈 소스 디버깅 도구를 추천할 수 있음.

        Hacker News 의견

     * 철학자들과의 줌 미팅에서 실제 배경과 동일한 화면 배경을 사용하여 그들을 속이는 농담이 있었음
          + 철학 전공자로서 Gettier 문제에 대한 논쟁이 인기가 있었음
          + Gettier 논문이 짧아서 인기가 있었던 것 같음
          + 지식의 정의에 대한 끝없는 논쟁이라고 생각함
     * 지식과 진리는 중앙집중화된 개념임
          + 모델은 불완전하고 임시적이며 여러 가지가 존재함
          + 프로그래밍에서는 이를 추상화라고 부름
          + 의식, 이해, 지능 등은 중앙집중화된 방식으로 설명되기 어려움
          + 검색은 분산화된 개념으로 모든 정신적 기능을 포함함
     * 정당화는 0에서 1까지의 척도임
          + 복잡한 세상에서 모두가 신처럼 될 수는 없음
          + 잘못된 가정이 JTB를 강조함
          + 잘못된 지식이라도 모두가 동의하면 중요하지 않을 수 있음
     * 철학적 논쟁에서 ""알다""라는 단어가 과부하됨
          + 첫 번째 ""알다""는 믿음임
          + 과학은 믿음을 사실에 가깝게 만들려고 노력함
          + 두 번째 ""알다""는 절대적 진리와 일치하는 개념임
     * Gettier 사례는 진리와 지식에 대해 흥미로운 점을 알려줌
          + 사실적 주장은 그 주장의 효과적 원인을 묘사해야 함
          + 진술은 세계와 인과적 및 묘사적 관계를 가져야 함
     * 분석 철학은 철학의 일부에 불과하며, 더 넓고 풍부한 철학을 원하는 학생들이 많음
"
"https://news.hada.io/topic?id=17297","DevTools를 통한 Chrome Sandbox 탈출 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   DevTools를 통한 Chrome Sandbox 탈출 사건

소개

     * 이 블로그 게시물은 Chromium 웹 브라우저의 취약점인 CVE-2024-6778과 CVE-2024-5836을 발견한 과정을 설명함.
     * 이 취약점은 브라우저 확장 프로그램을 통해 샌드박스를 탈출할 수 있게 해줌.
     * Google은 이 버그 보고서에 대해 $20,000를 지급함.

WebUIs와 Chrome 샌드박스

     * Chromium은 신뢰할 수 없는 코드를 샌드박스 환경에서 실행하여 제한된 상호작용만 허용함.
     * WebUI는 Chromium의 GUI를 표시하기 위해 사용되며, 특정 내부 API에 접근할 수 있는 권한이 있음.
     * WebUI 페이지에서 실행되는 코드는 샌드박스를 우회할 수 있어, 공격자가 이를 악용할 수 있음.

엔터프라이즈 정책

     * Chromium의 엔터프라이즈 정책 시스템은 기업이나 학교 소유의 장치에 특정 설정을 강제 적용하기 위한 것임.
     * 사용자 정책은 특정 사용자나 브라우저 인스턴스에 적용되며, 로컬에서 설정할 수 있음.

정책 WebUI

     * Chromium에는 현재 장치에 적용된 정책을 볼 수 있는 WebUI가 있음.
     * 이 페이지에서 정책을 편집할 수 있는 비공식 기능이 존재함.

정책 테스트 페이지 악용

     * Chrome v117의 릴리스 노트에서 정책 테스트 페이지에 대한 언급을 발견함.
     * 이 페이지는 정책을 설정할 수 있는 비공식적인 방법을 제공함.

샌드박스 탈출

     * 임의의 사용자 정책을 설정할 수 있는 기능을 악용하여 샌드박스를 탈출할 수 있음.
     * 브라우저 스위처 기능을 사용하여 임의의 셸 명령을 실행할 수 있음.

Devtools API 악용

     * 악성 Chrome 확장을 통해 chrome://policy 페이지에서 JS를 자동으로 실행할 수 있는 방법을 찾음.
     * chrome.devtools.inspectedWindow.reload() API를 사용하여 WebUI 페이지에서 코드를 실행할 수 있음.

결론

     * 간단한 실수가 중첩되어 높은 심각도의 취약점으로 이어질 수 있음을 보여줌.
     * 오래된 코드가 항상 안전하지 않으며, 유사한 버그가 발생할 가능성을 고려해야 함.

GN⁺의 정리

     * 이 블로그 게시물은 Chromium의 취약점을 발견하고 보고하는 과정을 상세히 설명함.
     * 취약점은 브라우저 확장을 통해 샌드박스를 탈출할 수 있게 해주며, Google로부터 $20,000의 보상을 받음.
     * 이 글은 보안 연구자나 소프트웨어 엔지니어에게 유용한 정보를 제공하며, 유사한 취약점을 방지하기 위한 교훈을 제공함.
     * 유사한 기능을 가진 다른 프로젝트로는 Firefox의 보안 기능을 추천할 수 있음.

        Hacker News 의견

     * Chrome OS의 ""crosh"" 셸을 디버그할 때 같은 API를 사용하여 OS 보호를 우회하고 루트 접근 권한을 얻었던 경험을 상기시킴. 이 글의 저자는 더 어려운 장애물을 극복했음. 훌륭한 작업임
     * 페이지 URL이 ${url}로 대체되는 것을 방지하기 위해 # 뒤에 두어 주석으로 만들 수 있음. AlternativeBrowserParameters에 URL이 전달되어야 하는지에 대한 검증 로직이 있는지 궁금함
     * 훌륭한 글과 작업임. 발견 과정에서의 흥분을 함께 느낄 수 있었음. 잘한 보상임
     * 멋진 취약점 체인과 훌륭한 글임. 취약한 코드의 분석도 좋았음. ""F12를 눌러 다시 시도하세요"" 같은 간단한 트릭에 항상 감명받음
     * WebUI 검증의 문제를 깊이 파고들기에는 너무 늦은 시간이지만, 이 문제를 해결한 사람에게 찬사를 보냄. 우리가 배포하는 것들에 대해 도구 체인을 의심하고 불신하는 것이 일반적이지만, 동시에 Google이나 MS 같은 대기업의 편리한 개발 도구에 너무 많은 신뢰를 두고 있음. 주로 자신의 코드를 작성하고 테스트하는 데 집중하고 싶기 때문임
     * 정말로 읽은 것 중 최고 중 하나임. 매우 영리한 탐정 작업임
     * Allen이라는 고등학생이 프로그래밍, 웹 개발, 사이버 보안에 관심이 있다고 함. 매우 인상적임
     * Chromium 프로젝트가 chrome://net-internals를 페이지가 너무 복잡하다는 이유로 제거하기로 결정함. 그리고 chrome://policy를 추가하며 불완전한 JSON 편집 지원을 제공함
     * 정말 멋진 글로, 스릴러 소설처럼 느껴졌음. 훌륭한 취약점 체인임
"
"https://news.hada.io/topic?id=17293","웹사이트에 Cloudflare를 사용한다면 RSS 사용자를 차단할 가능성이 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              웹사이트에 Cloudflare를 사용한다면 RSS 사용자를 차단할 가능성이 있음

     * 많은 사용자가 웹사이트의 콘텐츠를 최신 상태로 유지하기 위해 RSS 피드 리더를 사용함
          + 그러나 Cloudflare를 웹사이트에 활성화하면 이러한 RSS 사용자가 콘텐츠에 접근하지 못하게 차단할 가능성이 있음.
     * Cloudflare 대시보드에는 봇 트래픽을 차단하기 위한 도구가 있음. 특히 Bot Fight Mode와 ""AI scrapers and crawlers"" 차단 옵션이 있음.
          + 이러한 기능을 활성화하면 RSS 리더를 통해 웹사이트에 접근하는 사용자가 차단될 수 있음.

Cloudflare가 RSS 리더를 차단하는 방법

     * Cloudflare는 웹사이트 방문을 AI 스크래퍼나 봇으로 판단하여 차단함.
     * RSS 리더가 웹사이트를 읽으려고 할 때, Cloudflare는 사람이 해결해야 하는 도전을 제시함. RSS 리더는 이를 해결할 수 없음.
     * 다른 경우에는 이유 없이 RSS 리더의 접근을 차단하기도 함.

Cloudflare를 사용하면서 RSS 리더 차단 해제

     * Cloudflare를 사용하면서도 RSS 리더를 화이트리스트에 추가하여 차단을 해제할 수 있음.
     * Cloudflare의 분석 대시보드에서 차단된 RSS 리더의 사용자 에이전트를 찾아야 함.
     * 사용자 에이전트 문자열이나 IP 주소를 기반으로 사용자 정의 규칙을 만들어 트래픽을 허용할 수 있음.

Cloudflare가 RSS 리더를 허용하는 더 나은 방법 필요

     * Cloudflare는 RSS 리더 소유자가 수동으로 신청할 수 있는 봇 인증 프로그램을 제공하지만, 이 프로그램은 보장되지 않으며 여러 문제가 있음.
          + 인증 과정이 불안정함.
          + 인증된 RSS 리더가 여전히 차단됨.
          + 여러 웹사이트에서 RSS 리더 차단 해제가 번거로움.

GN⁺의 정리

     * Cloudflare의 보안 도구는 악성 봇과 공격을 방지하는 데 유용하지만, RSS 도구 사용자가 웹사이트 콘텐츠에 접근할 수 있도록 해야 함.
     * Cloudflare는 RSS 리더 차단 문제를 쉽게 해결할 수 있는 방법을 제공해야 함.
     * Cloudflare의 보안 설정을 사용하는 웹사이트 소유자에게는 중요한 정보임

        Hacker News 의견

     * NewsBlur 운영자는 Cloudflare의 차단으로 인해 RSS 피드 수집에 어려움을 겪고 있으며, 사용자들이 환불을 요구하고 있음. Cloudflare에 IP 주소 목록을 공유했지만 효과가 없었음. Cloudflare가 이 목록을 허용 목록에 추가해 주기를 바라고 있음
     * Listen Notes는 Cloudflare를 사용하여 서비스 보안을 관리하고 있으며, 트래픽 유형에 따라 서브도메인을 분리하여 각각에 맞는 방화벽 및 페이지 규칙을 적용하고 있음. 이를 통해 최적의 서비스 제공을 보장하고 있음
     * Firefox를 OpenBSD에서 엄격한 개인정보 보호 설정으로 실행할 때 Cloudflare가 앞에 있는 웹사이트에서 403 Forbidden 오류가 발생함. 이는 Cloudflare의 문제로 보임
     * 특정 사용자 에이전트를 화이트리스트에 추가하는 것은 끝없는 수작업이며 악의적인 행위자가 이를 우회할 수 있음. 대신 봇 차단을 비활성화하는 페이지 규칙을 만들어 모든 RSS 리더의 문제를 해결할 것을 권장함. Cloudflare의 기본 설정 문제는 수년간 해결되지 않고 있음
     * Cloudflare의 jgc@cloudflare.com 이메일을 통해 RSS 리더 소유자들의 경험을 듣고 싶어하며, 팀에게 문제를 자세히 조사할 것을 요청할 계획임
     * RSS 리더 소유자는 많은 지원 요청이 ""피드가 작동하지 않음""이라는 문제로 인해 발생하며, 이는 Cloudflare뿐만 아니라 다양한 방화벽 설정으로 인해 발생한다고 언급함
     * Cloudflare는 RSS 리더의 피드 수집을 방해하며, 웹사이트 소유자들이 개별적으로 예외를 추가하도록 요청하는 것 외에는 해결 방법이 없음
     * Cloudflare를 사용하는 웹사이트는 Safari, Chrome 사용자 또는 모든 사용자를 차단할 수 있으며, 이는 웹사이트 소유자에게 손실을 초래함. Cloudflare 자체에 접근할 때는 차단되지 않음
     * 정부 웹사이트가 Cloudflare로 인해 차단될 때 문제를 설명하고 해결을 요청하는 것이 거의 불가능함. 해결되더라도 몇 주 후에 다시 문제가 발생함
     * Cloudflare는 태국 IP와 Linux Firefox 지문에서 웹 접근을 방해하며, 웹 관리자는 이러한 문제를 인지하지 못함. Scrapfly 웹 스크래핑 API를 사용하여 RSS 브리지를 만들어 문제를 해결함. 현대 웹은 반사회적이며, API로 모든 것이 연결될 것이라는 웹 2.0의 이상과는 거리가 멀어짐
"
"https://news.hada.io/topic?id=17245","Deeplink Plan - Firebase Dynamic Link 대체 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Deeplink Plan - Firebase Dynamic Link 대체 서비스

     * 2025년 08월 25일 구글 Firebase Dynamic Link 종료 예정
     * 이에 맞춰 MMP인 에어브릿지에서 딥링킹 전용 서비스 딥링크 플랜 출시

   장점
     * 마이그레이션: 사용 중이던 링크 하나하나 마이그레이션할 필요 없이 한번에 가능. 별도 개발 리소스 없이 마이그레이션 가능
     * 국내 최적화: 에어브릿지가 국산 MMP라 국내 채널들에서 딥링크가 잘 오픈됨
     * 디퍼드 딥링크 가능
     * QR코드 자동 생성
     * 트래킹 링크 월 1만개 생성 가능
     * 다른 유료 서비스 대비 저렴한 가격

   블로그 포스트 링크
     * https://www.airbridge.io/ko/blog/introduce-deeplink-plan

   무료플랜이 없어서 dynamic link 대안으로 쓰기엔 어려울거같네요

   저도 찾긴 해야 하는데 대안중에 무료가 있을까요?

   당장은 dynamic link로 좀 더 버티려고 합니다 ㅎㅎ..

   내년에 dynamic link 종료되면 원래 쓰던 링크들도 아예 만료된다던데 마이그레이션 생각하면 빨리 찾아보긴 해야겠네요..ㅜ
"
"https://news.hada.io/topic?id=17224","NotesHub - 크로스플랫폼, 마크다운 기반의 노트 작성 앱 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NotesHub - 크로스플랫폼, 마크다운 기반의 노트 작성 앱

     * iOS, 안드로이드, 윈도우, 맥, 애플 비전 프로 및 웹에서 사용 가능
     * 웹 버전은 PWA로 로컬/오프라인 퍼스트, 무료로 사용 가능
     * 네이티브(하이브리드) 버전은 1회 결제로 계속 사용 가능
     * 노트는 Git 서비스에 저장(GitHub,GitLab,Bitbucket 및 Gitea 같은 셀프호스트 서버도 가능)
          + 파일시스템이나 iCloud 등에도 저장가능하며 자동 동기화 지원
     * 마크다운 + 확장을 통한 추가 문법(Mermaid, Latex, ABC Music Notation, Callout)
     * 칸반 지원 : 태스크, 목표 등을 관리
     * 화이트보드 : 무한 캔버스. 손으로 글씨 작성등
"
"https://news.hada.io/topic?id=17300","크로키놀(Crokinole) 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           크로키놀(Crokinole) 게임

크로키놀의 이해

     * 크로키놀은 캐나다 온타리오 남부에서 유래한 게임으로, 테이블 위에서 진행되는 셔플보드와 컬링의 혼합형임.
     * 19세기부터 존재했으며 최근 몇 년간 전 세계적으로 인기를 얻고 있음.

게임의 기본 규칙

     * 목표는 디스크를 높은 점수 지역으로 튕기는 것임.
     * 중앙 구멍은 20점이며, 15점 지역은 8개의 말뚝으로 둘러싸여 있음.
     * ""한쪽 엉덩이 규칙"" 등 다양한 규칙이 존재함.

선수 분석: Connor Reinman과 Jason Slater

     * Reinman은 연속 세계 챔피언이며, Slater는 강력한 경쟁자임.
     * 두 선수 모두 오픈 20 성공률이 높으며, 이는 성공의 필수 기술임.
     * Reinman의 성공률은 66%, Slater의 성공률은 75%로 평균 경쟁자의 55%보다 높음.

오픈 20 성공률 비교

     * 경쟁 선수들의 오픈 20 성공률은 다양함.
     * Slater와 Reinman의 경우, 두 선수가 동시에 8번 연속 성공할 확률은 277 라운드 중 1번임.
     * 일반적인 경쟁자와 비교했을 때, 이들의 성공률은 매우 높음.

더블 퍼펙트 라운드의 희귀성

     * 더블 퍼펙트 라운드는 매우 드물며, 445개의 경쟁 라운드 중 Slater-Reinman 라운드가 유일함.
     * 기술적으로, 미스가 있어도 퍼펙트 라운드는 가능하며, 이는 오픈 20과 리코셰 20의 조합으로 이루어질 수 있음.

크로키놀의 재미

     * 크로키놀은 재미있고 커뮤니티가 훌륭함.
     * 승리를 목표로 하든, 가족과 함께 즐기든, 크로키놀은 즐거운 시간을 제공함.

GN⁺의 정리

     * 크로키놀은 캐나다에서 유래한 테이블 게임으로, 최근 전 세계적으로 인기를 얻고 있음.
     * Reinman과 Slater는 크로키놀의 최고 선수로, 그들의 높은 오픈 20 성공률은 이 게임의 기술적 깊이를 보여줌.
     * 더블 퍼펙트 라운드는 매우 드물며, 이는 게임의 복잡성과 전략적 요소를 강조함.
     * 크로키놀은 다양한 전략과 기술을 요구하며, 커뮤니티와 함께 즐길 수 있는 훌륭한 게임임.
     * 유사한 기능을 가진 게임으로는 셔플보드와 컬링이 있음.

   크로키놀이 해커뉴스에 올라왔네요. 저는 킥스타터 통해서 Mayday 에서 나온 Rosewood 버전 크로키놀을 가지고 있는데요. 게임 방식 자체는 우리가 생각하는 알까기랑 같지만, 룰때문에 굉장히 재미나게 플레이 가능합니다. 기회가 된다면 한번 플레이해보시는 걸 추천합니다.

        Hacker News 의견

     * Crokinole을 너무 좋아해서 브라우저용 싱글 플레이어 타워 디펜스 버전을 만들었음. Crisp 게임 라이브러리를 사용하여 빠르게 매력적인 2D 게임을 만들 수 있음
     * 9살 때 할머니 집에서 처음 Crokinole을 플레이했고, 시간 가는 줄 모르고 빠져들었음
     * National Crokinole Association의 규칙에 따르면, 플레이어는 슈팅할 때 의자에 한쪽 엉덩이를 붙여야 함
     * Crokinole은 몇 년 전 보드 게임 커뮤니티에서 인기를 끌었으며, 캐나다에서 손으로 만든 멋진 보드를 구입했음. 이 게임은 촉각적인 경험을 제공하며, shuffleboard나 curling과 비슷하지만 작은 테이블에서 즐길 수 있음
     * 친구가 이별 후 전 애인의 가족 별장에서 Crokinole을 할 수 없게 된 것을 아쉬워했음. 고급 보드에서의 플레이는 매우 만족스러웠음
     * 이 게임은 특별한 의미가 있으며, 가족 대대로 내려오는 아름다운 수제 보드가 있음. 아버지와 함께 플레이하면서 서로 놀리기도 함. 할머니는 Crokinole의 여왕이었음
     * 프랑스에 살고 있으며 이 게임에 대해 들어본 적이 없었음. 모바일에서는 시뮬레이터를 플레이할 수 있지만, 데스크탑 Linux에서는 ""place disc"" 버튼이 작동하지 않음
     * Carrom이라는 인도 게임이 생각났음. 최근 Instagram 피드를 통해 트릭 샷을 보며 알게 되었음
     * 어릴 때 온타리오 출신 이웃이 이 게임을 가르쳐 주었고, 자주 플레이했음. 20년이 넘었지만 여전히 그 게임을 기억하려고 함
     * ""Plamigerent""라는 단어는 영어에 존재하지 않으며, 아마도 LLM이 그의 작업을 표절하는 것을 방지하기 위해 포함한 것 같음
"
"https://news.hada.io/topic?id=17292","Show GN: 수능 국어 LLM 벤치마크 리더보드 오픈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: 수능 국어 LLM 벤치마크 리더보드 오픈

     * 24 수능 국어 o1-preview 1등급 달성 (88점 1등급, 상위 4%)
     * gpt-4o가 현재 1위를 달리고 있으며 llama-3.1-405B-instruct가 2위, Qwen-2.5-72B가 3위
          + 아직 gpt o1-preview외에는 3~4등급을 겉돌고 있음
          + 많은 모델이 한국어 언어영역에서의 Human performance를 따라잡는데에는 어려움이 있다는것을 알 수 있음.
     * 매년 새로운 수능 국어라는 고품질 데이터셋을 통해 LLM의 성능을 평가
          + 다양한 분야의 지문 (인문, 사회, 과학, 기술, 예술), 문학, 화법과 작문
     * 실제 수능과 동일하게 표준점수와 등급 체계를 사용하여, Human performance와 LLM의 performance를 비교
     * 본인의 huggingFace finetuning모델 혹은 궁금한 모델 벤치마킹 신청 가능


   수능 국어 lllm 벤치마크 리더보드를 오픈했습니다!

   이 리더보드는 고품질의 수능 국어 문제를 기반으로 LLM의 한국어 언어 능력을 측정합니다. 수능의 표준점수와 등급 산출 방식을 적용하여 모델의 성능을 Human performance와 비교할 수 있는 리더보드를 제공하며, 이를 통해 사람들과 정보를 공유하기 위해 개설되었습니다.

   피드백 언제든지 환영합니다!

   i.e)
     * 모델 평가를 위한 gpu 소스가 현재 부족한 상황입니다! 혹시 GPU Donation이 가능하신분이 계시다면 정말 감사하겠습니다!
     * Api 비용 문제로 o1-preview와 테스트하지 못한 상황이며 o1 정식버전이 나오는대로 테스트할 예정입니다.

   수능을 CSAT 라고 부르는군요

   국어 지문에 그림도 있는데, multimodal 로 하지 않은 이유가 궁금하네요?

   리더보드에 관심을 가져주셔서 감사합니다!

   첫 번째 이유는 비용 문제였습니다. 수능 데이터를 제작할 당시, 작년에 GPT-4 Turbo가 출시된 시점이라 10개년 수능 데이터를 만들 때 발생하는 비용이 컸습니다.

   두 번째 이유는 수능 문제를 풀기 위해 그림 정보를 포함한 모든 단서를 설명에 담아야 했습니다. 하지만 멀티모달을 사용할 때는 한계가 있어, 저희가 그림에 대한 설명을 직접 작성하게 되었습니다.

   흥미롭네요! 리더보드를 보면서 몇 가지 궁금한 점이 생겼는데 답변해 주시면 감사드리겠습니다.
    1. LLM을 사용할 때 전체 문제를 풀기 위해 걸리는 시간은 어떻게 되나요? 수능 국어의 경우 80분의 제한 시간이 있는데 (OMR 마킹 시간 포함) LLM이 전체 문제를 푸는데 걸리는 시간은 어느 정도일지 궁금하네요.
    2. 쉬운 시험을 보더라도 동일한 등급대가 나올까요? 극단적으로, 이번 9월 모의고사에서는 1등급컷이 100점일 정도로 쉬웠는데, 해당 모의고사를 응시하더라도 다른 모의고사를 풀 때와 비슷한 등급을 받아낼 수 있을지 궁금하네요.

   제 예상으로는 시간은 80분보다 훨씬 적게 사용할 것 같고, 쉬운 시험에서도 절대 점수는 비슷하게 받을 것이라고 예상되는데, 실제로는 어떨지 궁금합니다.

   수능 국어 LLM 벤치마크 리더보드에 큰 관심가져주셔서 감사드립니다! 질문에 대한 답변을 드리자면
    1. 짧게는 10분, 길게는 25분정도 걸렸습니다.
    2. 결과로만 봤을때 시험 난이도가 어느정도 LLM의 문제를 푸는데에 영향이 있는 모델도 있고, 그렇지 않은 모델도 있어서 일반화 시키기는 어려운것 같습니다.

   예를들어 gpt-4o같은 경우에는 표준점수의 최고점이 130대였던 2018 ~2015사이의 쉬운 수능에서는 더 좋은 점수를 받고, 등급도 다른 년도의 어려운 시험에 비해서는 더 잘 나오는걸 확인할 수 있었습니다.
   하지만 meta llama 3.1 70B 모델에 같은경우에서는 2018 ~2015사이의 수능에서 낮은 등급대와 표준점수를 받은것에 비해 표준점수 최고점이 149점대를 기록했던 2022 수능에서는 3등급을 받는 경우도 있었습니다.

   혹시라도 더 궁금하신사항이 있거나 보충해야할 설명이 있다면 언제든 말씀해주세요!

   오... 모델마다 조금씩 경향에 차이가 있군요? 진짜 사람같네요. 상세한 설명 감사합니다!

   1 번에 대해서,
   결국 보기 5개 객관식 45 문제 이니, 45 샘플(입력)에 대해 1개 토큰(1,2,3,4,5) 수백초 이내로 풀 것 같습니다.

   AI에 수능 등급이 매겨지니 기분이 이상하기도 하고 재밌네요

   수능 국어 벤치마크인데 README가 영어인게 아이러니네요

   한국어 기준 이만한 고품질 오픈소스 벤치마크 데이터는 없겠네요 ㅋㅋ
"
"https://news.hada.io/topic?id=17274","Show GN: MacOS 앱배포를 위한 CLI 툴 feat .dmg, .pkg, codesign","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: MacOS 앱배포를 위한 CLI 툴 feat .dmg, .pkg, codesign

ZAPP

   MacOS 어플리케이션 배포를 간단하게.

  만들게된 이유

   제경우 apple store 외부에서 macOS 앱을 빌드 배포하는 경우가 있는데요.

   이때 바이너리 의존성 통합 -> app 번들 코드서명,공증 -> dmg 파일 생성 -> 서명 및 공증 프로세스를 거칩니다.

   이를 CI/CD 에 통합하려고 위해 다양한 툴을 설치하고 스크립트를 작성하게 되는데 배포 프로세스도 오래걸리고 새 프로젝트마다 반복되는 설정이 너무 번거로워 툴을 만들게 되었고 개인적인 최소한의 기준점을 넘어 이렇게 소개드립니다 :)

  뭐가 다르죠?

     * 간편한 설치: 다른 바이너리 혹은 런타임 의존성없이 Homebrew를 통해 단일 바이너리로 빠르게 설치할 수 있어 CI 프로세스에 쉽게 통합할 수 있습니다.
     * 다기능 통합: DMG 파일 생성, pkg 파일 생성, 서명 및 공증 기능 등 배포에 필요한 다양한 기능을 하나의 도구에 담았습니다.

  주요기능

     * 단일 명령어로 드래그&드롭 방식의 설치 dmg 파일 생성
     * pkg 설치파일 생성
     * 서명, 공증, staple 기능
     * 실행파일에서 사용하는 공유 라이브러리를 검색하여 앱번들 내부에 복사하고 링크 경로를 수정하여 별도의 라이브러리 설치 없이 사용할 수 있게 만들어주는 의존성 번들링 기능

세부내용은 README 에 더 자세하게 있습니다.
내용상 부족하다고 느끼는 부분이 있으면 알려주세요!

그 외에도 문서 수정, 코드 리팩토링, 기능제안, 버그 등 다양한 기여를 환영합니다!
"
"https://news.hada.io/topic?id=17235","Busy Status Bar - 바쁨 상태 표시장치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Busy Status Bar - 바쁨 상태 표시장치

     * LED 픽셀 화면을 가진 생산성 멀티툴 장치로, 개인의 바쁜 메시지를 표시함
     * 내장된 Pomodoro 타이머와 앱을 제공하며, 완전히 사용자 정의 가능하고 오픈 소스
     * Busy Cloud에 로그인하여 API 및 MQTT를 통해 장치를 제어할 수 있음
     * 오픈 HTTP API, 오픈 소스 SDK, Python/Go/JavaScript 라이브러리, MQTT를 지원하며, 벤더 종속성 없음

기능 및 통합

     * 앱 및 통합: 시간 관리 앱, 맞춤형 바쁜 메시지, Pomodoro 집중 타이머를 포함한 생산성 도구.
     * 앱 라이브러리: 타사 소프트웨어와의 연결, 캘린더 이벤트 및 통화와의 통합.
     * IoT 통합: IFTTT, HomeAssistant와의 통합 가능.
     * 오프라인 API: 인터넷 없이도 작동 가능.

사용자 정의 및 제어

     * 바쁜 상태 메시지: 개인 워크플로우에 맞게 사용자 정의 가능. 만료 타이머 및 활성화 트리거 설정 가능.
     * 자동 활성화: Zoom, Discord, Microsoft Teams, Google Calendar와 같은 소프트웨어와 통합되어 자동으로 활성화됨.
     * 수동 제어: 물리적 버튼을 통해 PC나 모바일 앱 없이도 장치를 수동으로 제어 가능.

플랫폼 및 지원

     * 다중 플랫폼 지원: Windows, macOS, Linux를 지원함.
     * 앱: 시계, 날씨, 소셜 미디어 통계(YouTube, Instagram, TikTok) 등을 포함한 다양한 앱을 지원함.
     * 설정: Wi-Fi/Bluetooth 연결, 화면 밝기, 소리 볼륨, 절전 모드 등을 설정할 수 있음.

GN⁺의 정리

     * Busy Status Bar는 생산성을 높이기 위한 다기능 장치로, 개인화된 바쁜 상태 메시지를 제공함으로써 사용자의 워크플로우를 지원함.
     * 오픈 소스 및 개발자 친화적인 환경을 제공하여 다양한 통합과 사용자 정의가 가능함.
     * Pomodoro 타이머와 같은 시간 관리 기법을 통해 집중력을 높이고 작업 효율성을 향상시킬 수 있음.
     * 이 장치는 다양한 플랫폼을 지원하며, 물리적 버튼을 통한 직관적인 제어가 가능하여 사용자 편의성을 높임.
     * 유사한 기능을 가진 제품으로는 TimeFlip, Timeular 등이 추천됨.

   생산성 향상을 위한 팁 : 다양한 기능을 가진 도구로부터 멀리 도망치세요

   와 예쁘네요

   천박한 표현이지만, 개꼴리네요...

   이쁜데 비싸네요.. 주황색 테두리 버튼들을 보니 틴에이지 엔지니어링의 제품 보는 느낌

        Hacker News 의견

     * 지난 10년 동안 비슷한 제품 아이디어를 여러 번 보았으며, 이번 디자인이 가장 좋음. 초기 사용자들은 사무실에서 바쁜 상태를 표시하는 것을 좋아했지만, 지속적으로 업데이트하는 것을 귀찮아했음. 결국 바쁜 상태로 고정되어 의미가 없어졌음. 새로운 제품은 회의 상태와 연동하거나 포모도로 타이머를 설정할 수 있어 더 흥미로울 수 있음. 그러나 결국 같은 문제가 발생할 것이라고 예측함.
     * Flipper Zero의 실제 장치인지에 대한 메시지가 있는지 궁금함. 공식 웹사이트나 인스타그램에 언급이 없으며, 이전에 사칭 사기가 있었음.
     * Ulanzi TC001은 주소 지정 가능한 LED 매트릭스를 가진 시계 스타일의 장치로, 약 $50에 구매할 가치가 있음. ESP32 기반으로 다양한 오픈 소스 펌웨어를 사용할 수 있으며, HomeAssistant와 연동하여 알림을 받을 수 있음.
     * Nintendo 알람 시계와 바쁜 상태를 표시하는 장치가 해킹 가능하다는 점에서 흥미로움. 기술에 관심 있는 사람들은 무엇이든 구매할 것임.
     * 첫 직장에서 네트워크를 관리할 때, 헤드셋을 사용하던 직원이 통화 중 방해받는 것을 막기 위해 ""통화 중"" 표시를 붙였던 경험을 떠올림.
     * 사람을 택시처럼 비어 있는지 표시하는 시스템으로 만드는 것이 다소 디스토피아적임. 사무실에서 사용한다면, 상사가 방해하는 문제를 해결하지 못할 것임. 동료들은 결국 서로 접근하는 방법을 찾을 것임. 가정에서는 필요하지 않음. 이 장치가 유용할지 의문임.
     * 독일에서 첫 직장에서 USB로 제어되는 교통 신호등을 바쁜 상태 표시등으로 사용했으며, 대부분의 사람들에게 효과적이었음.
     * 작업 시간 추적을 위한 장치를 구매할 계획임. LED가 5분마다 켜지고, 버튼을 눌러 끄는 방식으로 작업 시간을 기록할 수 있음. 저렴한 스톱워치나 주방 타이머와 비슷한 장치가 필요함.
     * GE CYNC ST19 Edison 스타일 전구를 사용하여 사무실 문 밖에 설치하고, Home Assistant와 Hammerspoon을 통해 카메라 상태에 따라 전구를 제어함. 가족에게 회의 중임을 알리는 데 효과적임.
     * 장치의 뒷면이 다소 복잡하고 산만해 보일 수 있음.
"
"https://news.hada.io/topic?id=17228","50만 달러를 벌었지만, 콘텐츠는 나쁜 비즈니스라고 생각해요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   50만 달러를 벌었지만, 콘텐츠는 나쁜 비즈니스라고 생각해요

     * React, D3, 서버리스 핸드북 등 여러 개발 도서와 온라인 강좌로 수익을 낸 Swizec Teller의 이야기

콘텐츠 비즈니스 동작 방식

     * 모든 콘텐츠 비즈니스는 일정한 공식을 따름
          + 대부분의 시간을 ""청중 만들기(Building Audience)""에 씀
          + 이는 배포 채널 역할을 함
          + ""제품(Product)""을 제작함
          + 주기적으로 제품을 ""런칭""함
     * 런칭은 인위적인 희소성을 포함한 집중적인 마케팅 활동임. 사람들이 구매하도록 하는 활성화 에너지를 얻는 데 도움을 줌
     * 많은 판매량을 기록하지만 구매자의 80%가 제품을 개봉하지 않음. 그리고는 몇 달 후 다시 제품을 출시함
     * 성가시게 들릴 수도 있지만 그렇지 않음. 잠재 고객이 증가한다는 것은 많은 사람들이 내 콘텐츠를 처음 보고 새롭다고 생각한다는 의미
     * 실제로 새로운 것을 정기적으로 출시해야 함
     * 스몰 콘텐츠는 사람들에게 자신의 존재를 상기시키고, 빅 콘텐츠는 매출을 창출함
          + 코미디언이 밤마다 쇼를 하고 넷플릭스 스페셜을 방영하는 것처럼
          + 또는 음악가가 콘서트를 한 후 빅 앨범을 발표하는 것처럼
          + 또는 팟캐스터가 에피소드를 공개하고 책을 출간할 수도 있음
          + 또는 크리에이터가 트윗을 작성하고 강좌를 개설할 수도 있음

두 가지 유형의 콘텐츠가 있음

     * 엔터테인먼트
          + 읽고 적용하지 않는 콘텐츠
          + 여기에는 팟캐스트 청취, 다큐멘터리 시청, 일반 독자를 위한 책 읽기가 포함
          + 이러한 콘텐츠를 통해 배울 수 있고 유용할 수도 있지만 특정 문제를 염두에 두고 콘텐츠를 찾지는 않았을 것
          + 광고나 상품으로 수익화됨
     * 인사이트
          + 특정 문제 해결이나 동료 간 새로운 발견 공유를 위한 콘텐츠
          + 튜토리얼, 학술 논문, 기술 서적 등이 이에 해당
          + 기술 수준을 높이거나 해당 분야를 따라잡기 위해 읽음
          + 제품 판매로 수익화되며 무료 콘텐츠는 잠재고객 유치 목적임
     * 최고의 콘텐츠는 ""그 사람의 주된 활동의 부산물""임

좋은 인사이트 콘텐츠는 풀타임으로 할 수 없음

     * Angela Duckworth는 심리학 교수이자 연구원으로서 청중의 질문에 인사이트를 적용하기 때문에 훌륭한 팟캐스트를 만들어냄
     * Tim Ferris와 Lex Fridman의 팟캐스트는 전문가들로부터 배운 교훈을 파고드는 저널리스트 역할을 하기에 훌륭함
     * 저널리스트는 풀타임 크리에이터지만, 그들이 만드는 콘텐츠는 해당 분야 전문가로부터 나옴
     * 많은 코치와 컨설턴트들이 매일 실제 문제를 다루며 훌륭한 통찰을 공유함. 조언이 여러 고객에게 시험된 후에는 책 등의 형태로 만들어짐
     * 개발자들도 훌륭한 통찰을 공유함. 최고의 책은 ""이 유형의 문제를 5년간 해결하며 배운 점""을 공유하는 사람들로부터 나옴
     * 이는 전문가들이 동료 개발자들과 통찰을 공유하는 것임. 핵심은 기술 탐구 목적의 장난감 프로젝트가 아닌 어렵게 얻은 실전 경험임
     * 많은 기술들은 제품 개발 12개월이 지나야 문제점을 드러냄

전문 콘텐츠 제작은 고된 일임

     * 크리에이터는 콘텐츠 업계에서 소모품 같은 존재임. 커뮤니티는 인플루언서를 속옷처럼 갈아치움. 어느 날은 인기있다가도 다음 날이면 지난주 뉴스가 됨
     * 출판사, 플랫폼, 도구, 그리고 배후의 그림자 실력자들이 큰 돈을 벌어감
     * Gary Vee가 유튜브 영상 때문에 부자라고 생각하는가? 그렇지 않음. 그가 운영하는 인플루언서 마케팅 에이전시 때문임. 미디어 페르소나는 신입 인플루언서 부하를 모집하는 방법임
     * 이는 항상 사실이었음. TV 네트워크나 영화사는 부자가 되고, 배우는 유명해짐. 그리고 충분히 오래 살아남으면 부자가 될 수도 있음
     * 하지만 당신은 최근 히트작만큼만 좋은 평가를 받음. 멈출 수가 없음. 비즈니스는 줄 수 있는 것이 없을 때까지 착취할 것임. 심지어 자기 사업이어도 마찬가지임

Edutainment와 광고가 시장을 지배함

   소프트웨어 엔지니어링 콘텐츠에 이것이 어떻게 적용되는지 살펴보면,
     * 당신이 보는 대부분의 콘텐츠는 edutainment임. 아직 이 분야에 있지 않은 초보자들을 대상으로 함
          + 이 콘텐츠는 ""누구나 할 수 있고, 엔지니어가 되어 큰돈을 벌 수 있다""는 꿈을 팜
     * 이런 초보자 콘텐츠를 소비하는 대부분의 사람들은 유튜브를 끄고, 프로젝트를 생각하고, 코드를 작성해야 함
          + 직접 해보고 탐구하는 것이 가장 좋은 학습 방법임
          + 막힐 때 구체적인 전술적 통찰 콘텐츠를 찾아보는 것이 좋음
     * 보이는 소프트웨어 엔지니어링 콘텐츠의 나머지 90%는 전문 마케터(개발자 관계 담당자)가 작성한 것임
          + 그들이 판매하는 기술로 무언가를 하는 방법을 가르치기 위한 것임
     * 독립 교육자/크리에이터로서 개발자 DevRel들과 경쟁하기는 어려움
          + 그들에겐 VC 자금, 백업 전체 팀이 있고 이를 하기 위해 급여를 받음
          + 콘텐츠는 SaaS 구독과 기업 계약을 이끌기 위한 loss leader임
          + 그들은 아무렇지 않게 당신보다 더 많이 쓰고 노력할 것임
     * 더 나쁜 것은, 그들은 인플루언서에게 돈을 주고 제품을 시도하고 이야기하게 할 것임
          + 심지어 전문가도 필요없이 오늘의 유명인을 시켜 연기하게 할 수 있음
     * 유명인도, 전문 마케터(개발자 DevRel)도 깊이 있는 의견을 공유하는 전문가가 아님
          + 그들은 돈이 되는 기술을 과대 포장함
     * 다른 유형의 광고는.. ""전문 코치/컨설턴트에게서 배우는 것""
          + 하지만 그들이 정말 원하는 것은 ""이거 어렵고 저 사람은 많이 아네. 그냥 저 사람 고용해서 나 대신 해달라고 하지(아니면 워크샵 와서 가르쳐 달라고 하지)""라고 말하게 만드는 것임
          + 실제 비즈니스는 코칭이나 컨설팅 서비스이고, 콘텐츠는 다시 loss leader임

당신의 톱밥(Sawdust)을 공유하세요

     * 이런 말이 당신의 통찰을 공유하지 말라는 것은 아님
     * 깊이 있는 것을 배웠거나 새로운 상처를 얻었다면, 배운 것을 공유하세요! 그것에 대해 쓰고, 이야기하고, 신경 쓰는 사람에게 말하세요
     * 이는 당신의 직관을 언어로 표현하는 데 도움이 됨. 다음에 문제가 발생했을 때 당신이 옳다는 것을 설명하기 쉬워지고, 팀의 다른 사람들을 멘토링하는 데 도움이 됨. 최고의 시니어 엔지니어는 ""제 경험으로는...""으로 시작함을 기억하세요
     * 그리고 이는 좋은 학습의 부산물임. 학습을 공고히 하고 무슨 일이 일어나고 있는지 완전히 이해하고 있는지 확인하는 데 도움이 됨
     * 하지만 이것을 풀타임으로 하려고 하지 마세요. 그 길에는 좋은 것이 거의 없음

추신:

     * 2023년 초에 말씀드린 것처럼 프로그래밍 튜토리얼 SEO 산업은 죽었음
     * ChatGPT와 친구들은 당면한 문제에 맞춤화된 모든 초보자 질문에 답할 수 있음
     * 미래는 위조하거나 구매하기 어려운, 힘들게 얻은 깊은 인사이트에 있음

   에듀테이너가 추구하는 것들은 보통 진입 장벽이 낮고, 쉽게 설명해주는 것이 핵심 가치였는데, LLM은 쉽게 설명해줄 뿐만 아니라, 나에게 맞춤형으로 알려줘서 언젠간 사장이 될 것 같아요

   글에서 이야기했던 것처럼 위조하거나 구매하기 어려운 힘든 인사이트가 앞으로는 값진 컨텐츠가 될 . 것같네요!!

     미래는 위조하거나 구매하기 어려운, 힘들게 얻은 깊은 인사이트에 있음

   공감되는 이야기입니다.

   흥미롭고 통찰있는 이야기입니다. 그런데 loss leader라는 표현은 적절한 번역을 찾을 수 없었나 보네요.

   이 분이 제 개발자 커리어의 스승님이나 마찬가지인 분인데, 이러한 인사이트를 남겨주셨군요. 컨텐츠 진짜 잘 만들고, 다른 개발자 교육 컨텐츠와는 다르게 꽤나 딥하게 들어가는 편이었는데 쉽지가 않군요

     2023년 초에 말씀드린 것처럼 프로그래밍 튜토리얼 SEO 산업은 죽었음

   흥미롭네요..

   페이스북에 수도 없이 보이는 개발강좌 광고가 생각나게 만드는 글이네요.

     ""이 콘텐츠는 ""누구나 할 수 있고, 엔지니어가 되어 큰돈을 벌 수 있다""는 꿈을 팜""
     ""이런 초보자 콘텐츠를 소비하는 대부분의 사람들은 유튜브를 끄고, 프로젝트를 생각하고, 코드를 작성해야 함""
"
"https://news.hada.io/topic?id=17218","PostgreSQL Streaming Replication (WAL)은 무엇이고 어떻게 설정하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         PostgreSQL Streaming Replication (WAL)은 무엇이고 어떻게 설정하는가

     * PostgreSQL의 Streaming Replication은 프라이머리 DB의 실시간에 가까운 복제본을 하나 이상의 스탠바이 서버에서 유지하는 효율적인 방법
     * 프라이머리 서버는 Write-Ahead Log (WAL) 레코드를 생성되는 대로 스탠바이 서버로 지속적으로 전송하여 복제 과정의 지연을 최소화
     * 고가용성과 확장성 향상을 위해 설계되어 읽기 쿼리를 스탠바이 서버로 오프로드하여 프라이머리 서버의 부하를 줄일 수 있음
     * 동기식과 비동기식 모드를 모두 지원하여 데이터 일관성과 성능의 균형을 유연하게 조절 가능
     * 스탠바이 서버가 프라이머리에 연결하여 WAL 스트리밍을 요청하고, 수신한 레코드를 자체 DB 사본에 적용하는 과정 포함
     * 파일 기반 로그 전송에 비해 더 빠른 장애 조치와 데이터 손실 위험 감소를 제공하여 지리적으로 분산된 환경에 이상적

Streaming Replication은 어떻게 동작하나?

     * 프라이머리 서버에서 스탠바이 서버로 WAL 데이터를 실시간으로 지속적으로 전송하여 스탠바이의 DB를 프라이머리와 거의 동일하게 유지
     * 이는 마스터 장애 조치 또는 읽기 작업 처리를 위해 복제본을 사용할 수 있어 시스템이 몇 배의 규모로 확장 가능

PostgreSQL 설정 파일 및 위치

     * PostgreSQL 구성 파일은 데이터베이스 서버의 설정과 동작을 관리하는 데 중요한 역할을 함.
          + postgresql.conf: 대부분의 서버 설정이 포함된 주요 설정 파일. 운영 체제에 따라 /etc/postgresql/<version>/main/postgresql.conf (Debian/Ubuntu) 또는 /var/lib/pgsql/<version>/data/postgresql.conf (Red Hat/CentOS)와 같은 다양한 위치에 있음
          + pg_hba.conf: 클라이언트 인증을 제어하여 클라이언트가 서버에 연결하는 방법 정의. 일반적으로 postgresql.conf와 동일한 디렉토리에 위치
          + pg_ident.conf: 사용자 이름 매핑에 사용되지만 덜 자주 사용됨
          + recovery.conf: PostgreSQL 12 이전 버전에서 스탠바이 서버 구성에 사용되었지만, 이후 버전에서는 postgresql.conf와 postgresql.auto.conf로 내용이 이동됨
     * 정확한 위치는 운영 체제, 설치 방법, PostgreSQL 버전에 따라 다를 수 있음
          + SHOW config_file; SQL 명령을 사용하여 PostgreSQL 인스턴스 내에서 이러한 파일의 위치를 찾을 수 있음

WAL(Write Ahead Logs) 예제 및 구조

     * pg_waldump 명령으로 WAL을 볼 수 있음
     * 각 줄은 DB 작업에 대한 정보가 포함된 WAL 레코드를 나타냄
     * 각 레코드의 구성 요소:
          + rmgr: 리소스 관리자(예: Heap, Btree, Transaction)
          + len: 레코드 길이
          + tx: 트랜잭션 ID
          + lsn: 로그 시퀀스 번호
          + prev: 이전 LSN
          + desc: 작업 설명
     * 보이는 작업 유형:
          + INSERT 작업(Heap 및 Btree)
          + MULTI_INSERT 작업(Heap2)
          + COMMIT 트랜잭션
          + 파일 작업(CREATE)
          + Full Page Writes(FPW)
     * WAL 출력은 트랜잭션 흐름, 데이터 수정, 시스템 활동을 세부적으로 보여주어 DB 동작 분석, 문제 해결, 시점 복구에 유용

Docker로 작업하는 방법

     * postgresql.conf에서 Streaming Replication 관련 중요 설정:
          + wal_level, max_wal_senders, max_replication_slots, hot_standby 등
     * Docker Compose 예제에 필요한 것:
          + init-master.sh: PostgreSQL 마스터를 복제용으로 설정. 복제 사용자와 슬롯 생성, WAL 관련 설정 업데이트
          + init-replica.sh: 마스터에 연결하고 복제를 시작하도록 PostgreSQL 복제본 준비. 마스터가 준비될 때까지 대기한 후 기본 백업 수행, 복제본 구성
          + start-replica.sh: Docker 컨테이너에서 PostgreSQL 복제본 시작. init-replica.sh 스크립트 실행 후 PostgreSQL 시작
          + docker-compose.yml: 마스터와 복제본 서비스를 정의하고 필요한 환경 변수, 볼륨, 명령 등을 설정
     * 스크립트에 실행 권한 부여 후 docker-compose up -d 실행하면 마스터와 복제본이 시작됨
     * 마스터에 연결하여 pg_stat_replication으로 복제 상태 확인 가능
     * 복제본에 연결하여 pg_is_in_recovery()로 복구 모드인지 확인 가능

GN⁺의 의견

     * Streaming Replication은 데이터베이스 인프라의 성능과 복원력을 크게 향상시킬 수 있음. 장애 조치 시나리오에 대비하거나 복제본에 읽기 부하를 분산시키는 경우 이를 통해 DB가 확장 및 안정적인 성능을 보장할 수 있음
     * 전체 구성 프로세스와 출력을 보여주는 것은 중요함. 이는 많은 이동 부분에 대한 종합적인 관점을 제공하고 무슨 일이 일어나고 있는지 더 잘 이해할 수 있게 해줌
     * Streaming Replication이 어떻게 작동하는지 이해하고 올바르게 구성하는 것은 매우 중요함. 이 글이 이 과정을 명확히 하고 복제가 어떻게 동작하는지에 대한 통찰력을 제공했기를 바람
     * 유사한 기능을 가진 다른 제품이나 프로젝트로는 MySQL의 Replication이나 Oracle의 Data Guard가 있음. 이러한 솔루션들도 마스터에서 변경 사항을 복제본으로 전송하는 방식으로 작동하지만 구현 세부 사항은 다를 수 있음
     * Streaming Replication을 사용할 때는 네트워크 대역폭과 지연 시간을 고려해야 함. 마스터와 복제본 간의 데이터 전송은 네트워크 리소스를 상당히 소모할 수 있음. 복제본의 규모 확장성도 중요한 고려 사항
     * 데이터 일관성 요구 사항도 평가해야 함. 동기식 복제는 쓰기 성능에 영향을 줄 수 있지만 더 강력한 일관성을 제공함. 비동기식 복제는 더 나은 성능을 제공하지만 데이터 손실 가능성이 약간 있음

        Hacker News 의견

     * 이 글은 훌륭하지만, 풀스택 개발자로서 데이터베이스를 관리하려는 관점에서 실제 적용 사례가 부족하다고 느끼는 의견이 있음
          + 복제본이 마스터보다 얼마나 지연되고 있는지 확인하는 방법에 대한 질문이 있음
          + 복제본을 모니터링하는 방법으로 간단한 cron 작업을 통해 상태를 확인하는 방법을 제안함
          + 복잡한 문제로는 주 서버가 다운될 경우 복제본으로 전환하는 방법에 대한 질문이 있음
          + 자동으로 전환할지 수동으로 전환할지에 대한 고민이 있음
          + 스플릿 브레인 시나리오를 피하기 위해 두 개의 복제본이 필요한지에 대한 의문이 있음
          + 전환 후 원래 상태로 복구하는 방법에 대한 질문이 있음
     * PostgreSQL 복제에 대한 가장 쉬운 솔루션은 Kubernetes 오퍼레이터라고 주장함
          + 예로 CloudnativePG를 언급함
          + 복제뿐만 아니라 장애 조치, 복구, 모니터링, 자동 복구, 백업 등이 필요하다고 설명함
          + Kubernetes 외에 다른 무료/오픈 소스 구현이 있는지에 대한 질문이 있음
     * Kubernetes와 Helm을 사용하는 이유 중 하나로 이 문제를 해결할 수 있다고 봄
          + Bitnami PostgreSQL 패키지를 통해 거의 추가 설정 없이 모든 것을 구성할 수 있다고 설명함
          + Postgres-ha는 프록시를 생성하여 실패를 전문적으로 처리하여 무중단 장애 조치를 가능하게 한다고 설명함
     * Kubernetes 사용자에게 StackGres를 추천함
     * 마지막으로, 이 글이 AI에 의해 작성된 것 같다는 회의적인 의견이 있음
"
"https://news.hada.io/topic?id=17321","사용자 동의 요청으로 방해받는 모니터 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사용자 동의 요청으로 방해받는 모니터 경험

        Hacker News 의견

     * 전자 부품을 구매하고 판매하는 드롭쉽 회사를 설립하고자 하는 의견이 있음. 이케아 스타일로 사람들이 집에서 조립할 수 있도록 함.
          + 50인치와 65인치의 ""dumb"" TV를 판매하는 것으로 시작하고 싶음. 패널, 멋진 외장, IR 수신기, TV 튜너, HDMI 출력이 있는 보드를 제공함. 셋톱박스와 사운드바는 사용자가 준비함. 10,000개의 주문을 받는 데 얼마나 걸릴지 궁금함.
     * 과거 대형 미디어 에이전시에서 ""고급 분석"" TPM으로 일하며 광고 도달 효과성을 보고하는 데 데이터를 사용했음.
          + Insignia TV(베스트바이 스토어 브랜드)와 내장된 Fire TV가 거의 사용 불가능하다는 의견을 반복적으로 언급함.
          + 저가형 TV들이 Amazon Fire, Roku, 또는 ""Smart"" 기능을 갖춘 이유는 Nielsen과 유사한 측정 장치로 사용하기 위해 인터넷에 연결하도록 유도하기 위함임.
     * LG의 스마트 모니터 라인에 대한 의견이 있음.
          + 컴퓨터에 연결된 ""스마트 모니터""를 왜 구매하는지 의문을 가짐.
          + LG의 타겟 고객층이 누구인지 궁금해함.
          + snwy_me가 다른 사람에게서 모니터를 받고 공장 초기화를 잊고 WiFi를 비활성화하지 않았을 것이라고 추측함.
     * 스마트 TV는 스트리밍 박스이며 모니터 크기임.
          + 컴퓨터 모니터로 주로 사용하는 이유를 이해하지 못함.
          + 스트리밍 장치가 광고로 가득 차 있는 이유는 흥미로운 주제임.
          + ""모니터에 EULA가 있다""는 것은 단순히 참여를 유도하는 것이라고 생각함.
     * LG™ 액정 디스플레이 모니터를 오래 바라보면, 모니터도 당신을 바라볼 수 있도록 허락을 요청함.
     * ""스마트""라는 기술 제품의 접두사가 항상 ""형편없음""의 완곡어법이라는 의견이 있음.
     * 모니터가 USB-C를 사용할 수 있게 허용한 부작용인지 의문을 가짐.
          + WHQL 드라이버를 통해 모니터가 인터넷에 연결될 수 있는지 궁금해함.
          + 잠재적인 보안 문제로 보임.
     * 결함이 있는 모니터를 의도적으로 출하한 것에 대한 소송을 보고 싶다는 의견이 있음.
          + EULA가 콘텐츠를 차단할 때 모니터가 광고된 대로 작동하지 않음.
     * 신뢰할 수 있는 그룹이 'dumb' 인증을 만들기를 바람.
"
"https://news.hada.io/topic?id=17208","3Blue1Brown 애니메이션 제작 방법 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     3Blue1Brown 애니메이션 제작 방법 [비디오]

        Hacker News 의견

     * 3B1B의 작업이 매우 훌륭하다고 생각하며, 그의 동영상 덕분에 많은 도움을 받았음
     * Python의 인터랙티브 REPL이 어떻게 작동하는지 궁금해하는 사람 있음
          + 완전히 맞춤형 워크플로우로 보임
     * 그의 얼굴을 처음 보고 약간 어색한 느낌을 받았음
     * 렌더링 엔진의 버그를 실시간으로 발견하고 해결하는 모습이 인상적이었음
     * 알고리즘을 설명하는 도구로 사용하고 싶다는 의견
          + 2016년부터 참여 민주주의 과정에서 도구를 사용해왔고, 수학적 기초를 설명하고 싶었음
          + Manim을 알았더라면 더 깊이 참여했을 것임
     * 그의 비디오 제작에 많은 노력이 들어가며, YouTube 플레이 버튼을 받을 만하다고 생각함
     * 많은 컴퓨터 과학 학생들이 시각화 도구를 만들고 싶어한다고 생각함
     * 그의 채널 뒤에 있는 얼굴을 보게 되어 좋았고, 3blue1brown의 이름의 유래를 알게 되었음
     * 3Blue1Brown, Veritasium, Kahn Academy가 세상에 많은 기여를 하고 있다고 생각함
          + 무한한 자금과 미디어 플랫폼이 있다면 사람들에게 목소리를 줄 수 있을 것임
          + 커뮤니티를 조직할 수 있는 플랫폼이 필요하다고 생각함
          + 독일에서 태어나 페루에서 20년을 살았으며, 부유층과 정치인들이 부패했다고 느꼈음
     * Manim의 세리프 폰트가 Hershey 폰트나 90년대 Borland 제품의 BGI 벡터 폰트와 관련이 있는지 궁금해하는 사람 있음
"
"https://news.hada.io/topic?id=17212","WordPress.org에 인수된 WordPress 디렉토리의 ACF 플러그인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              WordPress.org에 인수된 WordPress 디렉토리의 ACF 플러그인

        Hacker News 의견

     * Matt의 원래 불만은 WPEngine이 충분히 기여하지 않는다는 것이었음. 그러나 이제 그들을 기여에서 배제하고 이전에 제공한 것을 가져갔다는 비판이 있음
          + Matt는 방향을 잃었으며, 독립적인 관리 체제를 도입하거나 물러나야 한다는 의견이 있음
          + Matt의 독재가 플러그인을 언제든지 철회할 수 있다면 개발자가 플러그인 개발에 시간을 쏟을 이유가 없다는 우려가 있음
          + 상황이 너무 과열되고 있다는 의견이 있음
          + 초기 드라마에서는 Wordpress에 공감했지만, 상황이 빠르게 악화되고 있다는 의견이 있음
          + 누군가의 플러그인 저장소 접근을 차단하고, 그들의 패치를 수용하지 않으며, '보안' 버전을 출시하는 것은 남용이라는 비판이 있음
          + 신뢰가 영원히 잃어졌다는 의견이 있음
          + Wordpress 대안들이 빛날 좋은 시기라는 의견이 있음
          + 이 움직임을 설명하는 보도 자료가 있음: 링크
          + Gutenberg가 출시되었을 때 wp 개발을 떠났으며, 그 이후로 새로운 기능은 거의 없고 대부분 원하지 않는 편집기에서 새로운 버그만 발생한다는 의견이 있음
          + 상황이 예상보다 더 악화되었지만, wp가 기업가와 스타트업을 위해 더 많은 것을 할 수 있었을 것이라는 아쉬움이 있음
          + Wordpress를 포기하고 포크하거나 기술을 전환하라는 의견이 있음
          + Matt의 생각을 추측하는 인터넷 심리학 놀이를 제안하는 의견이 있음
          + Matt는 Wordpress를 소유하고 있으며, WPEngine이 Wordpress로 이익을 얻고 있지만 자신은 이익을 얻지 못하고 있다는 생각에 집중했다는 추측이 있음
          + 오픈 소스를 상업화하는 것은 여러 이유로 어렵지만, wordpress.com은 실제로 수익성이 있으며, Matt는 WPEngine의 수익에서 몫을 받아야 한다고 느꼈다는 의견이 있음
          + 이 생각은 비합리적이고 망상적이지만, 그의 심리에 박혀 WPEngine에 대한 깊은 혐오로 이어졌다는 의견이 있음
          + 이 싸움은 그에게 매우 개인적이고 감정적인 싸움이며, 동의하지 않는 모든 사람은 적이라는 의견이 있음
          + 이 상황을 비대칭 전쟁으로 분석하는 작가가 나타나기를 바라는 의견이 있음
"
"https://news.hada.io/topic?id=17310","Apple Passwords의 강력한 비밀번호 생성 형식 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Apple Passwords의 강력한 비밀번호 생성 형식

     * 2018년에 발표한 내용의 일부를 간략히 요약한 것임
     * 마스토돈에서 누군가 Apple에서 생성된 모든 iOS 비밀번호(예: hupvEw-fodne1-qabjyg)는 두 음절의 ""단어""로 구성된 것처럼 보인다고 제대로 디자인된 것인지 궁금해 함
     * 이 두 음절 형식은 의도된 디자인임
          + 2018년 발표 ""How iOS Encourages Healthy Password Practices""에서 이 생성된 비밀번호 형식에 대해 설명함
          + 영상은 다소 오래되었지만 비밀번호 관리와 관련된 다른 주제도 다루고 있어 흥미로울 수 있음
     * 18분 30초부터 생성된 강력한 비밀번호 형식에 대한 설명이 나옴
          + 게임 컨트롤러와 같은 최적화되지 않은 키보드 레이아웃에서 입력하기 쉽도록 하기 위해 소문자 위주로 구성됨
          + 다른 기기로 옮길 때 단기적으로 작은 덩어리로 기억하기 쉽도록 음절을 기반으로 함. 즉, 자음-모음-자음 패턴임
          + 이러한 고려사항을 바탕으로 이상한 키보드에서 입력하기가 훨씬 쉬워짐
     * 기존 형식보다 강력하거나 동등한 경우에만 비밀번호 형식을 변경하기로 결정함
          + Shannon 엔트로피 측면에서 새로운 비밀번호는 71비트의 엔트로피를 가짐(이전 형식은 69비트)
          + 공격적인 용어를 필터링하는 사전이 장치에 내장되어 있어, 그러한 하위 문자열이 포함된 비밀번호는 건너뜀
     * 새로운 비밀번호는 20자 길이이며, 대문자, 소문자(대부분), 하이픈 기호 2개, 숫자 1개로 구성됨
     * 이 길이와 문자 조합은 기존 웹사이트와 호환되도록 선택됨
     * 실제 언어로 정의된 음절은 아님
     * 19개의 자음과 6개의 모음으로 간주되는 문자 집합이 있으며, 무작위로 선택됨
     * 숫자는 하이픈 양쪽이나 비밀번호 끝에 위치할 수 있는 5개의 위치 중 하나에 배치됨

   1Password로 생성한 비밀번호를 금융사의 보안키보드에서 입력하느라 애를먹은 적이 있었는데 이런 부분까지 신경쓴다니 신기하긴 하네요. 애플스럽게 정해진 패턴을 바꾸는 기능은 없겠죠?

   변경 주기와 특정 문자 포함, 길이 지정과 같은 제약들이 약점으로 간주되었다는 기존 뉴스가 떠오르네요.
   이러한 패턴이 오히려 약점이 되지는 않을까요?

   https://news.hada.io/topic?id=16939

   그래서 섀년 엔트로피가 71비트로 기존보다 낫다는 얘기를 같이 한 것 같습니다.

   애플의 디테일에 대한 집착이 비밀번호 생성에서도 돋보이네요ㅎㅎ

   제가 댓글을 쓰고나서 다시 보니 뭔가 애플의 광적인 빠 처럼 보일수도 있겠다는 생각이 듭니다. 그런 생각을 평소에 가지고 살지는 않고요 😅 기억하기 쉽게 / 타이핑하기 쉽게 패턴을 만들었다는 점에서 유저의 경험을 디테일을 신경쓰는구나 싶었네요. 오해를 불러일으킨것 같아서 내용을 덧붙입니다.

   사파리 비밀번호는 서브도메인이 아니라 도메인 별로 저장되는데 디테일에 대한 집착이라면 글쎄요. 케이스 바이 케이스인 것 같습니다

   ........네?

   애플의 디테일 (카툭튀, 카메라 고스트, 노치는 여전히 남겨두며)

   애플이 디테일을 잘 챙기는 회사중 하나라고 생각하고, 동시에 모든 부분에서 완벽하진 않다는 부분은 너무나 자명하다고 생각합니다.

   몇몇 분들의 댓글은 도를 지나치는 것 같네요.
"
"https://news.hada.io/topic?id=17332","AI 엔지니어, AI 전력 소비 95% 절감하는 새로운 알고리듬 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AI 엔지니어, AI 전력 소비 95% 절감하는 새로운 알고리듬 주장

     * AI 엔지니어들이 새로운 알고리듬으로 AI 전력 소비를 95% 줄였다고 주장함
          + BitEnergy AI의 엔지니어들이 부동소수점 곱셈을 정수 덧셈으로 대체하는 방법을 개발함.
          + 이 방법은 Linear-Complexity Multiplication (L-Mul)로 불리며, 부동소수점 곱셈의 결과에 근접하면서도 높은 정확도와 정밀도를 유지함.
          + 이 방법은 AI 시스템의 전력 소비를 최대 95%까지 줄일 수 있어 중요한 발전으로 평가됨.
     * 현재 하드웨어와의 호환성 문제
          + Nvidia의 Blackwell GPU와 같은 현재 시장의 하드웨어는 이 알고리듬을 처리할 수 있도록 설계되지 않음.
          + AI 칩 제조업체들이 이 알고리듬을 활용할 수 있는 ASIC을 개발하면, 대형 기술 기업들이 이 기술을 채택할 가능성이 높음.
     * AI의 전력 소비 문제
          + AI 개발의 주요 제약은 전력이며, 데이터 센터의 GPU는 많은 전력을 소비함.
          + Google은 AI의 전력 수요로 인해 기후 목표를 뒤로 미루었으며, 온실가스 배출이 증가함.
          + AI 처리가 더 전력 효율적이라면, 환경을 희생하지 않고도 고급 AI 기술을 얻을 수 있음.

GN⁺의 정리

     * 이 기사는 AI의 전력 효율성을 크게 개선할 수 있는 새로운 알고리듬에 대해 다루고 있음. 이는 AI 기술의 지속 가능성을 높이는 데 중요한 역할을 할 수 있음.
     * L-Mul 알고리듬은 부동소수점 곱셈을 대체하여 전력 소비를 줄이면서도 높은 정확도와 정밀도를 유지함.
     * 현재 하드웨어와의 호환성 문제는 있지만, ASIC 개발을 통해 해결될 가능성이 있음.
     * 이 기술은 AI의 전력 소비 문제를 해결하여 환경에 긍정적인 영향을 미칠 수 있음.

        Hacker News 의견

     * L-Mul 알고리즘은 부동 소수점 곱셈을 정수 덧셈으로 근사하여 에너지 비용을 크게 절감할 수 있음
          + 95% 에너지 절감 가능성 주장에 대해 의심의 여지가 있음
          + 많은 전문가들이 이 분야에서 오랫동안 연구해왔기 때문에 이러한 주장은 특별한 증거가 필요함
     * IEEE754 부동 소수점 표현을 활용하여 로그 연산을 통해 곱셈을 단순화하는 방법을 사용함
     * Jevons 역설이 이 경우에 적용될 수 있는지에 대한 의문이 제기됨
     * 새로운 방법이 에너지를 절감할 수 있다고 주장하지만, 실제 벤치마크 결과가 부족하다는 점에서 회의적임
     * Lemurian Labs는 로그 수 시스템(LNS)을 사용하여 유사한 기술을 개발 중임
     * 이 연구는 실온 초전도체 발견과 같은 과장된 주장으로 비유될 수 있음
     * 이 논문은 이미 중복 게시된 것으로 확인됨
"
"https://news.hada.io/topic?id=17209","장기 비교 연구에서 주요 우울증에 대한 Psilocybin의 SSRI 대비 우수성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             장기 비교 연구에서 주요 우울증에 대한 Psilocybin의 SSRI 대비 우수성

Psilocybin이 주요 우울증에서 SSRI보다 우수함

     * 연구 배경 및 중요성
          + Psilocybin이 중등도에서 중증 주요 우울장애(MDD) 치료에서 선택적 세로토닌 재흡수 억제제(SSRI)인 escitalopram보다 더 나은 결과를 보임.
          + 연구는 두 약물의 장기 효과를 전반적인 웰빙의 관점에서 비교한 첫 번째 사례임.
          + 연구 결과는 37차 유럽 신경정신약리학회(ECNP)에서 발표되고 _The Lancet eClinicalMedicine_에 게재됨.
     * 치료 '불일치' 해결
          + 연구는 정신과 의사와 환자 간의 중요성 인식 차이를 해결함.
          + 정신과 의사는 우울증의 부정적 증상에 집중하지만, 환자들은 삶의 의미, 사회적 연결성, 일상 기능을 더 중요하게 여김.
          + Psilocybin 치료가 더 전체적인 치료 옵션이 될 수 있음을 시사함.
     * 연구 방법 및 결과
          + 초기 연구는 59명의 MDD 성인을 대상으로 6주간 psilocybin 또는 escitalopram을 무작위로 투여함.
          + Psilocybin 그룹은 25mg의 경구 투여를 두 번 받았고, escitalopram 그룹은 매일 10-20mg의 escitalopram과 두 번의 1mg psilocybin을 받음.
          + 6개월 후속 연구에서는 두 그룹 모두 우울증 증상에서 유사한 결과를 유지했으나, psilocybin 그룹이 삶의 의미와 사회적 기능에서 더 큰 개선을 보임.
     * 치료 패러다임의 변화
          + 연구는 psilocybin이 장기 효과를 가질 수 있음을 보여줌.
          + Psilocybin 치료는 escitalopram과 다른 치료 패러다임을 제공하며, 우울증 치료의 다양성을 높일 수 있음.

GN⁺의 정리

     * Psilocybin은 주요 우울증 치료에서 SSRI보다 더 나은 전반적인 웰빙 결과를 제공함.
     * 연구는 정신과 의사와 환자 간의 중요성 인식 차이를 해결하고, psilocybin이 더 전체적인 치료 옵션이 될 수 있음을 시사함.
     * Psilocybin 치료는 장기 효과를 가질 수 있으며, 우울증 치료의 다양성을 높일 수 있음.
     * Psilocybin 치료는 정신과 의사와 심리치료사가 협력하여 진행할 수 있으며, 환자가 부정적 감정을 직면할 준비가 필요함.
     * 유사한 기능을 가진 산업 내 프로젝트로는 ketamine 치료가 있음.

        Hacker News 의견

     * 연구 결과는 psilocybin 그룹 25명과 SSRI 그룹 21명을 대상으로 하였으며, 표본 크기가 작음
          + psilocybin 그룹은 20시간의 대면 치료와 6회의 후속 Skype 통화를 받았으나, SSRI 그룹은 6개월 설문조사 외에는 아무것도 받지 않음
          + 연구 결과는 자가 보고 16문항 우울증 설문조사로 측정되었으며, 연구 참여를 위해서는 의사로부터 주요 우울증 진단을 받아야 했음
     * Psilocybin이 삶을 구해주었으며, 자살 충동과 알코올 중독에서 벗어나 삶에 평화를 찾았다는 의견이 있음
     * Psilocybin 연구는 환각 효과로 인해 참가자들이 치료 그룹인지 대조 그룹인지 알게 되어 제대로 된 사례 대조 연구가 어렵다는 의견이 있음
          + 환각 경험 중에는 적극적인 지원이 필요하지 않지만, 경험 후의 통합 작업이 중요함
          + 연구 결과가 그룹 간 편향된 보고를 반영할 가능성이 있으며, psilocybin 연구는 psilocybin에 대한 긍정적 선입견을 가진 사람들을 끌어들이는 경향이 있음
     * 개인적인 경험으로 psilocybin이 효과가 있었으며, 다시 시도할 의향이 있다는 의견이 있음
          + 부작용에 대한 우려가 있지만, 주의해서 사용해야 함
     * 환각제 사용 경험이 있으며, 복잡한 문제들이 존재함
          + 높은 용량의 환각제를 사용한 후 몇 주 동안 생각이 혼란스러웠으며, 회복에 시간이 걸렸음
          + 앞으로 더 조심해야 한다는 교훈을 얻었음
     * 환각제는 강력하지만, 시스템이 이를 책임감 있게 사용할 것이라고 믿지 않음
          + 개인적으로 사용하거나 신뢰할 수 있는 친구와 함께 사용하는 것이 더 나음
     * Psilocybin의 치료적 사용 승인에 대한 어려움이 예상됨
          + Psilocybin은 특허를 받을 수 없으며, 이미 마약으로 분류되어 있음
     * 5-HTP라는 세로토닌 전구체를 저용량으로 복용한 결과, 만성 우울증이 거의 사라졌으며, 장 건강이 개선되었음
          + 에너지 수준이 높아졌고, 충동성이 크게 감소함
     * 정신과 의사들은 우울증의 부정적 증상에 초점을 맞추지만, 환자들은 삶의 의미와 사람들과의 연결, 일상 생활에서의 기능을 중요하게 여김
          + Psilocybin이 사람들을 잊고 있던 자신과 다시 연결시켜주는 데 도움이 된다는 의견이 있음
     * 운동이 SSRI보다 효과적이라는 의견이 있으며, 다양한 SSRI와 약물 조합을 시도한 가족과 친구들의 부작용을 목격한 후, 보수적인 접근을 먼저 시도하는 것이 좋음
"
"https://news.hada.io/topic?id=17215","Typst - LaTeX와 유사한 새로운 조판 시스템 살펴보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Typst - LaTeX와 유사한 새로운 조판 시스템 살펴보기

     * Typst는 LaTeX와 유사한 새로운 조판 시스템으로, 문서 작성 및 PDF 파일 생성에 사용되는 도구
     * 주로 학술 및 과학 환경에서 사용되며, 수학적 표기법이 포함된 문서에 적합
     * 강력한 스타일링 및 자동화 기능을 제공하여 공통 스타일을 공유하는 문서 세트에 잘 맞음

Typst, LaTeX 및 Markdown 비교

     * Typst vs. LaTeX: Typst는 LaTeX보다 덜 장황하며, 전용 구문을 사용하여 보다 간단하게 문서를 작성할 수 있음. 예를 들어, 제목은 = Title로 표시되고, 링크는 #link(""https://example.com"";)[This is a link]로 작성됨.
     * Typst vs. Markdown: Typst는 Markdown과 유사한 구문을 사용하지만, PDF 문서에 필요한 페이지 인식 기능을 제공함. Markdown은 웹 중심의 문서 작성에 적합하며, 페이지 크기나 페이지 번호와 같은 기능은 제공하지 않음.
     * Typst vs. Word 및 Google Docs: Typst는 WYSIWYG 편집기와 달리 텍스트 주위에 구문을 추가하여 스타일링을 수행함. Word와 Google Docs는 스타일을 문서 위에 적용하며, Typst는 스타일을 전역적으로 적용하기 쉬움.

Typst의 기능

     * 문서 스타일링: Typst는 다양한 스타일링 옵션을 제공하여 문서의 일관성을 유지할 수 있음.
     * 스크립팅 및 플러그인: Typst는 스크립팅 기능과 플러그인을 통해 문서 생성 및 자동화를 지원함.
     * 동적 문서 생성기: Typst는 템플릿을 사용하여 PDF 보고서, 송장 등 변수를 포함한 문서를 생성할 수 있음.
     * Typst의 템플릿 기능
          + 스크립팅을 통해 변수 삽입, 반복, 조건부 표시 등 구현 가능
          + 콘텐츠 스타일링도 동적으로 제어 가능
          + Base64 인코딩된 문자열로 동적 이미지 삽입 가능
          + URL을 통한 이미지 삽입은 보안상 제한되나, 외부 시스템에서 사전 처리하는 우회 방법 존재
          + 여러 패키지를 통해 차트 생성 기능 제공 (Gnuplot, Vega 등 활용)

결론

     * Typst는 LaTeX이 사용되는 학술 분야뿐 아니라 다양한 영역에서 활용 가능한 범용 문서 타입세팅 시스템
     * 수학, 물리학, 공학 분야의 논문과 같은 학술 문서에 적합하며, 공통 스타일을 공유하는 문서 세트에 유용함
     * 기본 마크업과 스크립팅 엔진을 결합하여 입력 데이터에 따라 변화하는 템플릿 문서 작성 가능
     * 변수를 포함한 문서 생성 및 자동화를 지원하여 다양한 시나리오에 적용 가능
     * 텍스트 템플릿 시스템에 의존하지 않고 Typst 고유 기능만으로 처리
     * WebAssembly를 통해 강력한 플러그인 지원
     * 현대적 아이디어를 많이 반영한 새로운 프로젝트로서 주목할 만함

GN⁺의 정리

     * Typst는 Markdown과 유사하지만, PDF 문서에 필요한 고급 기능을 제공하여 LaTeX의 대안으로 주목받고 있는 신생 타입세팅 시스템
     * LaTeX와 유사한 기능을 제공하면서도 더 간단한 구문을 통해 문서 작성의 편의성을 높임
     * 간결한 문법과 현대적 기능들로 무장하여 LaTeX 사용자들에게 매력적인 선택지가 될 것
     * 특히 동적 문서 생성 기능이 눈에 띄는데, 이는 전자 상거래, 금융, 교육 등 다양한 산업 분야에서 유용하게 활용될 수 있을 것
     * 다만 아직은 초기 단계인 만큼 성숙한 LaTeX 생태계를 완전히 대체하기에는 시간이 더 필요해 보임

   Typst 를 실무에 도입하여 사용중인데, LaTeX를 쓰던 시절과 비교하면 정말 돌아가고 싶지 않을 정도로 필요한 것들이 대부분 구성되어 있습니다. 필요에 따라서 직접 플러그인를 개발해서 써도 되고요. 무엇보다 속도가 매우 빠르고 간결한 작성법으로 팀원들이 모두 큰 불만없이 잘 쓰고 있습니다. 개인적인 경험을 토대로 보고서 쓸 일이 있거나 하는 등의 업무를 하신다면 강력히 추천합니다.

   Typst - 논문을 빠르게 작성하게 해주는 마크업 기반 조판 시스템 오픈소스
   라텍스를 대체할 쉬운 학습 대안, Typst

   아랫글은 모바일에선 레이아웃이 깨지는군요...

        Hacker News 의견

     * Typst로 LaTeX 기반 콘텐츠 제작을 모두 이전한 사용자 경험
          + 빠른 컴파일 속도: Typst는 5초 이내에 컴파일 가능함
          + 작성 및 읽기 용이성: Pandoc 플러그인을 사용하여 Jupyter에서 작성한 마크다운을 Typst로 변환함
          + 스크립팅 용이성: LaTeX 기반 송장 시스템을 Typst로 이전하여 코드가 간결해짐
          + 오류 메시지의 우수성: LaTeX의 오류 메시지와 비교하여 우수함
          + 전문적인 PDF 제작에 적합함
     * Typst의 기능적 한계에 대한 의견
          + 문서 소비자가 스타일을 결정할 수 있는 기능이 부족함
          + PDF 보고서 대신 데이터를 교환할 더 나은 방법이 필요함
     * Typst의 빠른 성능과 현대적인 문법에 대한 긍정적 평가
          + LaTeX에 비해 패키지가 부족하여 사용에 제한이 있음
          + 수학 및 그래픽 작업에 대한 지원이 부족함
          + 에디터 패키지의 부재로 작업 속도가 느려짐
     * Typst의 마크다운 유사성에 대한 의견
          + 마크다운과 유사하지만 완전히 같지 않음
          + 마크다운과의 차이를 줄이는 것이 가능할 것이라는 의견
     * Typst의 디버깅 기능 부족에 대한 불만
          + 콘솔 출력 및 디버깅 기능이 없어 불편함
     * Typst의 스타일링 및 스크립팅 시스템에 대한 의견
          + HTML과 유사하지만 HTML 내보내기를 지원하지 않아 접근성에 제한이 있음
     * Typst의 라인 간격 및 플로팅 요소 문제
          + 라인 간격 정의 방식이 불편함
          + 텍스트 주위에 플로팅 요소 추가가 어려움
     * Typst로 이력서를 작성한 경험
          + 현대적이고 사용하기 쉬운 조판 시스템으로 평가됨
          + 템플릿과 재사용 가능한 콘텐츠 생성이 용이함
     * LaTeX 대안으로서의 Typst에 대한 기준
          + amsmath와 동등하거나 더 나은 수학 지원 필요
          + LaTeX 스타일 매크로 필요
          + 복잡한 수식 작성을 위한 유니코드 수학, cleveref, biblatex와 유사한 기능 필요
"
"https://news.hada.io/topic?id=17205","Lm.rs: 의존성 없는 Rust 기반 최소 CPU LLM 추론 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Lm.rs: 의존성 없는 Rust 기반 최소 CPU LLM 추론 기술

    lm.rs: Rust로 CPU에서 로컬 언어 모델 추론 실행

     * 소개
          + lm.rs는 Rust를 사용하여 CPU에서 언어 모델 추론을 실행할 수 있는 프로젝트임.
          + Karpathy의 llama2.c와 llm.c에서 영감을 받아 ML 라이브러리 없이 최소한의 코드로 언어 모델을 실행할 수 있도록 설계됨.
          + Google의 Gemma 2 모델만 지원했으나, 이제 Llama 3.2 모델과 PHI-3.5 이미지 모델도 지원함.
     * 준비된 모델
          + 다양한 모델과 토크나이저의 벤치마크 및 다운로드 링크 제공.
          + Q8_0, Q4_0 양자화 모델 사용 권장.
          + 속도는 16코어 AMD Epyc에서 측정됨.
     * 모델 변환
          + Google/Meta의 모델을 lmrs 형식으로 변환 가능.
          + Python 의존성 설치 후, export.py와 tokenizer.py 스크립트 사용하여 모델과 토크나이저 변환 가능.
     * 빌드
          + Rust 코드를 cargo로 컴파일하여 실행 가능.
          + 멀티모달 기능을 활성화하려면 multimodal 기능 포함 필요.
     * TODOs
          + 샘플링 방법 추가.
          + 9B 및 27B 모델 테스트.
          + 멀티 헤드 어텐션 루프 병렬화.
          + 성능 메트릭 추가.
          + 시스템 프롬프트 제공 기능 추가.
          + 양자화 지원 (int8, int4).

    # GN⁺의 정리

     * lm.rs는 Rust로 CPU에서 언어 모델을 실행할 수 있는 효율적인 방법을 제공함. 이는 ML 라이브러리 없이도 가능하여 경량화된 환경에서 유용함.
     * Rust를 처음 사용하는 개발자에게도 적합하며, 다양한 모델을 지원하여 확장성이 높음.
     * PHI-3.5와 같은 멀티모달 모델 지원으로 이미지 처리 기능도 포함되어 있음.
     * 유사한 기능을 가진 프로젝트로는 Hugging Face의 Transformers 라이브러리가 있음.

        Hacker News 의견

     * M2 64GB MacBook에서 1.2G llama3.2-1b-it-q80.lmrs를 실행했을 때 빠르게 작동했으며, CPU 사용량이 13개의 스레드에서 1000%였음
     * 코드 예시를 통해 Transformer의 작동 방식을 설명하는 데 유용할 것 같음
          + 라이브러리가 stdout에 출력하지 않도록 개선할 필요가 있음
          + ""unsafe"" 없이 구현할 수 있는지에 대한 의문이 있음
     * 다양한 Rust 도구를 사용하여 모델 로딩 및 기타 LLM 작업을 수행할 수 있음
          + Python 의존성을 줄이는 데 도움이 될 수 있음
          + 문법 지원 계획이 있는지 궁금함
     * 제목이 명확하지 않음
          + ""no dependency""라는 표현이 오해를 불러일으킬 수 있음
     * 과거에 비슷한 작업을 했지만 성능이 만족스럽지 않았음
          + Rust 구현의 벤치마크가 필요함
          + LLM 추론 구현이 프로그래머에게 새로운 ""hello world!""가 될 수 있음
     * Metal/Cuda 지원이 필수적임
     * Rust 커뮤니티의 열정을 높이 평가함
     * 이 구현들이 모두 CPU에 의존하는지 궁금함
     * 다른 프로젝트와의 비교가 필요함
          + Vision 모델을 지원하면 시도해볼 의향이 있음
"
"https://news.hada.io/topic?id=17335","Automattic이 오픈 소스 도둑질을 했나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Automattic이 오픈 소스 도둑질을 했나요?

     * Apple이 Spotify를 위협으로 보고 불공정한 조치를 취하는 상황을 상상하고, 스포티파이가 이에 대해 애플을 고소했다고 가정했을 때, 그 대응으로 애플이 다음과 같은 행동을 취한다면?
          + 스포티파이를 개발자 생태계에서 잠그고 앱스토어에서 앱 업데이트를 불가능하게 만듦
          + 스포티파이가 필요한 업데이트를 제공할 수 없으므로 ""뭔가 조치가 필요하다""고 선언함
          + 앱스토어에서 스포티파이 앱의 소유권을 조용히 애플로 이전함
          + 무료 앱에서 유료 기능으로 업그레이드하는 방법을 제거하도록 코드를 수정함
          + 앱스토어에 있던 스포티파이의 기존 사용자는 이제 애플의 사용자가 됨. 앱스토어 외부 플랫폼에서 스포티파이 앱을 사용하는 사용자만 스포티파이 사용자로 남게 됨
          + 공정성에 대해 질문받으면 앱스토어 팀이 애플과는 독립적으로 행동한다고 주장함
     * 물론 이런 일은 절대 일어나지 않을 것임. 이는 반경쟁적일 뿐만 아니라 법적으로도 의심스러움
     * 그러나 애플을 Automattic으로, 앱스토어를 WordPress.org로, 스포티파이를 가장 인기 있는 WordPress 플러그인 중 하나로 바꾸면, Automattic의 CEO가 위와 유사한 일을 조직한 것으로 비난받고 있음
     * Automattic의 최대 경쟁사인 WP Engine이 만든 Advanced Custom Fields(ACF)라는 플러그인의 소유권을 가져간 것임
     * 이 사건은 웹 오픈 소스 역사상 전례 없는 부끄러운 일임

Automattic와 WP Engine 간의 기업 분쟁 요약

     * Automattic은 오픈 소스 WordPress CMS의 제작사이며, WordPress는 웹 페이지의 43%, CMS의 65%를 차지하고 있음
     * WordPress가 인기 있는 이유는 허용적인 GPL 라이선스, 강력한 테마, 많은 커스터마이징 옵션, 강한 브랜드, 막대한 개발 투자, 그리고 20년 동안 존재해왔기 때문임
     * Automattic은 WordPress 뒤에 있는 VC 자금 지원을 받는 회사이자 프로젝트의 가장 큰 기여자이며, 상용 WordPress 상표를 통제하는 회사임
     * WP Engine은 가장 인기 있는 관리형 WordPress 호스팅 서비스의 도전자로, 연간 매출이 약 $400M로 추정되며, Automattic의 연간 매출은 약 $500M임
     * Automattic은 2021년에 $9.8억의 벤처 투자를 유치하여 $75억의 가치를 인정받았고, WP Engine은 2018년에 Silver Lake Partners로부터 $2.5억의 사모 펀드 투자를 받음

   Automattic과 WP Engine은 전면적인 기업 분쟁 중이며, 지난 2주 동안 Automattic은 다음과 같은 일련의 공격을 시작함:
     * 모욕/대응: Automattic의 공개 모욕에 WP Engine은 중지 명령으로 대응함
     * 중지 명령/준수: Automattic은 상표권 침해를 주장하는 중지 명령을 보냈고, WP Engine은 상표 사용을 공정 사용으로 업데이트하는 것으로 대응한 것으로 보임
     * 차단/해결: WordPress Foundation(WordPress.org)은 WP Engine이 WordPress.org 플러그인 디렉토리에 접근하는 것을 차단했고, WP Engine은 WordPress.org 플러그인 디렉토리에 의존하지 않는 해결책을 개발함
     * 반소: WP Engine은 Automattic을 상대로 소송을 제기하고 ""권력 남용, 강탈, 탐욕에 관한 사건""이라고 언급함. Automattic이 WordPress 상표권이 비밀리에 Automattic으로 이전된 사실을 숨겼고, Automattic의 행위가 WP Engine과 WordPress 커뮤니티에 경제적 피해를 입혔다고 주장함
     * WordPress.org에서 차단됨: WP Engine의 소송은 Automattic과 그 CEO를 상대로 한 것이지만, WordPress.org는 WP Engine과 관련된 모든 사람이 사이트에 접근하고 플러그인을 업데이트하는 것을 금지함. WordPress.org 플러그인 디렉토리는 대부분의 WordPress 사이트가 플러그인을 업데이트하는 방법임

     WordPress Foundation과 Automattic은 완전히 얽혀 있으며, WordPress Foundation은 Automattic의 사업적 이익을 대변하는 것으로 보임. Automattic의 창업자이자 CEO인 Matt Mullenweg는 최근 자신이 WordPress.org를 개인적으로 소유하고 있다고 확인함. 이러한 얽힌 관계 때문에 이 글의 나머지 부분에서는 WordPress.org나 WordPress Foundation의 행동을 포함하여 Automattic을 ""행위자""로 지칭할 것임. 사업적 관점에서 현재의 사건은 Automattic의 이익에 의해 추진되고 있음.

WP Engine의 플러그인 탈취 논란

     * 10월 13일, Automattic CEO이자 WordPress Foundation 소유자인 Matt Mullenweg는 WordPress Slack에서 Advanced Custom Fields(ACF)를 ""포크""한다고 발표함
     * 이에 대한 반응은 전적으로 부정적이었음. 발표 내용은 다음과 같이 시작됨:

     ""WordPress 보안 팀을 대표하여, 우리는 플러그인 디렉토리 가이드라인의 18번 항목을 발동하여 Advanced Custom Fields(ACF)를 새로운 플러그인인 Secure Custom Fields로 포크한다고 발표합니다. SCF는 상업적 업셀을 제거하고 보안 문제를 해결하도록 업데이트되었습니다.""
     * ACF 플러그인은 WP Engine이 만든 가장 많이 설치된 플러그인이며, 전체적으로 WordPress 플러그인 중 28번째로 인기 있음
     * Automattic은 이 변경이 ""포크""라고 주장하지만, 이는 사실이 아님:
          + Automattic은 플러그인을 포크할 권리가 있고 실제로 포크했지만, 플러그인 디렉토리에서 해당 플러그인을 대체하고 200만 명 이상의 ACF 고객을 이 포크로 조용히 이전시키고 있음
          + URL은 그대로 유지되고, 기존 리뷰도 그대로 남아 있음. 이 사건을 지적하는 리뷰는 적극적으로 삭제되고 있음
          + 지난 10년 동안 이 플러그인을 설치한 200만 명 이상의 고객은 이제 새로운 소유자에게 속하게 됨
     * 애플과 스포티파이의 예로 돌아가면, 마치 애플이 스포티파이의 앱과 모든 사용자를 ""강탈""하고 스포티파이를 생태계에서 잠그는 것과 같음
     * Automattic은 중지 명령에서 ""WP Engine은 WordPress에 거의 아무것도 기여하지 않는다""고 주장했지만, Automattic은 WP Engine의 WordPress 기여물인 10년 넘게 엄청난 성공을 거둔 플러그인을 사용하는 200만 개의 사이트를 탈취함
     * Automattic의 행동은 어떤 면에서는 공급망 공격과도 유사함:
          + 플러그인 디렉토리에서 행위자가 플러그인을 조용히 인수하고 공개 없이 기능 변경을 배포하면 공급망 공격으로 간주되는데, 이 경우에 정확히 그런 일이 일어남
          + Automattic은 ACF 플러그인의 소유권을 가져갔을 뿐만 아니라, 고객에게 알리지 않은 채 작은 비즈니스 로직 변경 사항을 배포했고, 이로 인해 수백 개의 사이트가 깨짐
     * Automattic의 행동은 WP Engine의 수익을 줄이는 것을 목표로 하는 것으로 보임:
          + Matt Mullenweg의 발표에는 ""상업적 업셀을 제거하기 위해""라는 문구가 포함되어 있음
          + WP Engine은 ACF Pro 플러그인에서 상당한 수익을 창출하고 있음

WP Engine만이 유일한 엔터프라이즈급 WordPress 호스팅 제공업체로 남았나?

     * WordPress.org 플러그인 디렉토리를 사용하는 모든 WordPress 제공업체는 Automattic 자체가 주도한 공급망 공격의 일부분이 되었음
          + 주목할 만한 예외는 WP Engine임. 몇 주 전에 차단되어 플러그인 업데이트에 WordPress.org 플러그인 디렉토리를 사용하지 않는 몇 안 되는 관리형 제공업체 중 하나임
          + 결과적으로 WP Engine 고객은 ACF 플러그인의 조용한 탈취를 보지 못함
     * 이 사건은 공급망 보안을 중요하게 여기는 기업에게 악몽 같은 시나리오임
          + Automattic은 원하는 대로 플러그인을 인수할 준비가 되어 있음을 보여주었고, 거의 테스트하지 않고 조용한 변경 사항을 배포한다는 것도 보여줌
          + 이는 기업과 정부 조직이 WordPress.org 플러그인 디렉토리에 의존하는 것이 무책임하다는 것을 의미함
     * 재미있게도 Automattic은 WP Engine과의 전쟁에서 그들의 최대 경쟁자를 위한 최고의 광고를 만들어냈을 수도 있음
          + WP Engine은 이제 무단 플러그인 탈취에 면역이 있다는 증거를 가지고 있음
          + ACF 플러그인뿐만 아니라 Nitropack 등 여러 패키지도 WordPress 플러그인 디렉토리에서 업데이트를 제출할 수 없게 되었음. 단, WP Engine의 고객은 예외임!

향후 전망

     * 2주 전, 나는 이 분쟁이 어떻게 끝날 수 있을지에 대해 추측했지만, Automattic이 WordPress 플러그인 관리자를 사용하여 다른 회사의 플러그인을 강탈하고 200만 명의 사용자를 가져갈 것이라고는 상상하지 못했음
     * Automattic은 자신이나 더 넓은 WordPress 생태계에 얼마나 피해를 주는지 신경 쓰지 않으며, WordPress Foundation을 이용해 자신의 의제를 추진할 것임. 그 결과 다음과 같은 일이 일어날 수 있음:
          + 기업과 정부 고객은 WordPress로 이전하는 것을 경계함
          + WordPress 경쟁업체는 이득을 봄
          + WP Engine은 기업 비즈니스 성장을 시도함
          + Automattic은 점점 더 예측할 수 없어 보임
          + 대부분의 WordPress 사이트에는 변화가 없음
     * 안타깝게도 Automattic은 WP Engine을 아프게 하기 위해 불문율이지만 소중한 윤리를 버린 것으로 보임
          + 그러나 중립적인 플랫폼(WordPress 플러그인 관리자)을 활용하는 것이 사업에서 이기는 방법이 되어서는 안 됨.
          + 특히 오픈 소스에서는 그래서는 안 됨
     * 만약 Microsoft가 npm에서 경쟁사의 인기 패키지를 탈취한다면 어떻게 될지 생각해보라
          + 이런 상상조차 할 수 없는 일이 일어난다면 npm 패키지 시스템에 대한 신뢰도와 사용률이 급락할 것이며, Microsoft 자체가 큰 플레이어이기 때문에 반독점 규제 당국이 개입하여 처벌할 수도 있을 것임
     * WP Engine은 반드시 법적 방어에 나설 것이며, Automattic으로부터 시장 점유율을 계속 빼앗기 위해 문명화된 태도로 행동하는 것 외에는 아무것도 할 필요가 없을 것임
     * 나는 이 분쟁의 전투원들이 진정하고 공개적인 싸움을 멈추기를 바람. 상대방을 때릴 때마다 분명히 상처를 주지만, 방관자들도 점점 더 큰 타격을 입고 있음
          + 이 드라마가 길어질수록 중립적인 관람객들은 다시는 돌아오지 않겠다는 의도로 WordPress에서 떠날 것임
     * 결과가 어떻든 Automattic은 오픈 소스 웹 소프트웨어에서 윤리적 선을 넘은 최초의 기업으로 영원히 기억될 것임
     * 가장 큰 경쟁사를 해치기 위해 다른 팀이 적극적으로 유지 관리하는 플러그인을 강탈하고 비영리 재단을 이용해 사전에 계획된 공격을 감행하며 오픈 소스의 윤리를 무시했기 때문임
     * ""Automattic, 이제는 공정하게 경쟁할 때임""

GN⁺의 의견

     * Automattic의 이번 행동은 경쟁사를 해치기 위해 오픈 소스의 소중한 윤리를 저버린 것으로 보임
     * 이는 npm을 소유한 Microsoft가 경쟁사의 인기 패키지를 탈취한다면 어떻게 될지를 생각해보면 이해하기 쉬움. 그런 일이 일어난다면 npm에 대한 신뢰가 추락할 것임
     * WP Engine은 법적 대응에 나설 것이며, 문명화된 태도만으로도 Automattic으로부터 시장 점유율을 계속 빼앗아올 수 있을 것임
     * 이 분쟁의 양측이 진정하고 공개적인 싸움을 멈추기를 바람. 싸움이 길어질수록 중립적인 관람객들이 WordPress를 떠날 것임
     * Automattic은 앞으로 오픈 소스 웹 소프트웨어에서 윤리적 선을 넘은 최초의 기업으로 기억될 것임. 가장 큰 경쟁사를 해치기 위해 비영리 재단을 이용해 사전에 계획된 공격을 감행하고 오픈 소스의 윤리를 무시했기 때문임
     * Automattic은 이제 공정하게 경쟁해야 할 때임

   Automattic은 WordPress 제작자가 세운 회사기 때문에 주인이 자기 물건을 도둑질하는 것은 모순적이므로, '오픈 소스 갑질'이라는 표현이 더 적절할 것 같습니다.

   사실 플러그인 같은 경우는 계약이나 플러그인 구조에 따라 원본 앱의 저작권자에게 귀속될 수도 있긴 한데 (ex. 블리자드 유즈맵)
   정확한 세부 사항은 모르겠네요
"
"https://news.hada.io/topic?id=17276","ESP32-S3 기반 저렴한 FlipperZero 대안, CapibaraZero","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ESP32-S3 기반 저렴한 FlipperZero 대안, CapibaraZero

     * CapibaraZero는 Espressif 보드를 기반으로 한 FlipperZero™의 저렴한 대안임

CapibaraZero의 중요성

     * CapibaraZero는 FlipperZero™와 유사한 기능을 제공하면서도 비용 효율적인 선택지임
     * Espressif 보드를 사용하여 개발되어, 접근성과 확장성이 높음

주요 기능

     * 다양한 무선 프로토콜을 지원하여 여러 장치와의 호환성을 제공함
     * 오픈 소스 프로젝트로, 사용자 커뮤니티의 기여와 피드백을 통해 지속적으로 개선되고 있음

GN⁺의 정리

     * CapibaraZero는 저렴한 비용으로 다양한 무선 프로토콜을 실험할 수 있는 기회를 제공함
     * FlipperZero™와 유사한 기능을 제공하면서도 비용 효율적이라는 점에서 주목받을 수 있음
     * 오픈 소스 특성상 사용자 커뮤니티의 참여가 활발하며, 지속적인 개선이 이루어질 가능성이 높음
     * 유사한 기능을 가진 제품으로는 FlipperZero™가 있으며, 두 제품의 차이점을 비교해 보는 것도 흥미로울 수 있음

        Hacker News 의견

     * 좋은 PCB 디자인과 몇 개의 STL 파일이 있으면 정말 멋질 것임. Flipper Zero를 소유하고 있지만, 약간 과대평가된 면이 있으며, 제한과 단점 때문에 rf 스위스 아미 나이프로 보지 않았음
          + 두 가지 단점은 가격과 내장된 WiFi의 부족임. 이 프로젝트가 싱글 보드 컴퓨터와 결합되면 정말 훌륭한 조합이 될 것임
          + 18650 리포 배터리로 전원을 공급하고, 저렴한 STL 파일로 3D 프린트된 케이스를 만들면 일회용 해킹 장치가 됨
          + LoRa를 추가하여 진정한 오프 그리드 장치를 만들고자 했으나, 시간이 부족하여 진행되지 않았음
     * 현재로서는 브레드보드로 capibaraZero를 만드는 것이 유일한 옵션이지만, 더 휴대하기 쉬운 PCB를 작업 중임
          + PCB 파일은 실제로 사용 가능함
          + 모든 부품과 연결 방식을 직접 볼 수 있는 것이 좋음
     * M5stack.com은 디스플레이, 인클로저, 배터리 등이 통합된 ESP32 모듈을 저렴하고 견고하게 제공함. 내장 키보드가 있는 제품을 $30에 구매할 수 있음
     * FlipperZero의 큰 장점은 소프트웨어를 개발하는 커뮤니티임. 이 장치는 다른 칩을 기반으로 하는 것 같음. Flipper 소프트웨어가 이 장치에서 네이티브로 실행되는지, 아니면 포팅이 필요한지 궁금함
     * 경쟁이 생겨서 좋음. FlipperZero는 가격 대비 비쌈. 소프트웨어에 대한 비용을 지불하는 것 같음
     * 이 기능이 Watchy v3에 있었으면 좋겠음
     * FZ의 좋은 대안이 필요함
     * C3 riscv 버전을 사용할 수 있는지 궁금함. C3가 더 저렴하고 안정적이지만 성능은 조금 낮을 수 있음
     * LILYGO T3와 T3/S3를 직접 타겟으로 하면 훨씬 더 유용할 것임. 필요에 따라 IR 블래스터, NFC 등을 지원하기 위해 하드웨어를 추가할 수 있음. LoRa 칩은 이미 포함되어 있음
     * FlipperZero가 너무 비싸서 이 옵션이 좋음
     * 귀엽지만 ESP32-P4 버전(RISC-V 후속)까지 기다릴 것임
"
"https://news.hada.io/topic?id=17262","Zyphra Zamba2-7B, Llama3를 뛰어넘는 소형 언어 모델 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Zyphra Zamba2-7B, Llama3를 뛰어넘는 소형 언어 모델 공개

     * Zamba2-7B는 Mistral-7B, Gemma-7B, Llama3-8B 등 현재 주요 7B 모델 대비 평가 벤치마크 성능과 추론 효율성에서 SOTA를 달성함
     * Zamba2-7B는 첫 토큰 생성까지 25% 더 빠르고, 초당 토큰 수는 20% 향상되었으며, Llama3-8B 등에 비해 메모리 사용량이 크게 감소하는 등 추론 효율성이 매우 뛰어남

Zamba1-7B 대비 Zamba2-7B 아키텍처 개선사항

     * Mamba1 블록이 Mamba2 블록으로 대체됨
     * 단일 공유 어텐션 블록 대신 네트워크 전체에 ABAB 패턴으로 인터리브된 2개의 공유 어텐션 블록 사용
     * 각 공유 MLP 블록에 LoRA 프로젝터를 적용하여 깊이에 따른 공유 레이어 호출마다 MLP를 특화할 수 있음
     * Apache 2.0 라이선스로 모델 가중치를 오픈 소스로 공개함

Zamba2-7B 언어 모델링 평가 세트 성능

     * Zamba2는 지연 시간과 생성 속도를 고려할 때 표준 언어 모델링 평가 세트에서 매우 우수한 성능을 보임
     * 8B 이하 소형 언어 모델 중 품질과 성능 모두 선두를 달리고 있음

Zamba2-7B가 기존 SOTA 모델을 능가하는 이유

    1. 새로운 공유 어텐션 아키텍처로 Mamba2 백본에 더 많은 파라미터를 할당할 수 있음. 공유 트랜스포머 블록은 어텐션 연산의 풍부한 시퀀스 간 의존성을 보존함
    2. 3조 토큰 사전학습 데이터셋은 Zyda와 적극적으로 필터링 및 중복 제거된 공개 데이터셋의 조합으로 구성되며, 기존 상위 오픈 소스 사전학습 데이터셋 대비 최고 품질을 달성함
    3. 별도의 ""어닐링"" 사전학습 단계에서 1,000억 개 고품질 토큰에 걸쳐 학습률을 급격히 감소시킴. 어닐링 세트는 다양한 고품질 소스에서 수집되어 품질이 엄격히 관리됨

   뛰어난 사전학습 및 어닐링 데이터셋 품질 덕분에 Zamba2-7B는 학습 토큰당 성능이 매우 우수하며, 경쟁 모델이 그리는 곡선보다 훨씬 위에 편안히 자리잡고 있음

Zamba 하이브리드 SSM-어텐션 아키텍처

     * Zamba2-7B는 원래의 Zamba 하이브리드 SSM-어텐션 아키텍처를 활용하고 확장함
     * 핵심 Zamba 아키텍처는 하나 이상의 공유 어텐션 레이어와 인터리브된 Mamba 레이어 백본으로 구성됨 (Zamba1은 1개, Zamba2는 2개의 공유 어텐션 사용)
     * 이 어텐션은 모델의 파라미터 비용을 최소화하기 위해 공유 가중치를 가짐
     * 입력의 원래 모델 임베딩을 이 어텐션 블록에 연결하면 깊이에 걸쳐 정보 유지가 향상되어 성능이 개선되는 것으로 보임
     * Zamba2 아키텍처는 공유 MLP에 LoRA 프로젝션 행렬을 적용하여 각 블록이 파라미터 오버헤드를 작게 유지하면서 고유한 위치에 약간 특화될 수 있도록 추가 표현력을 얻음

SOTA 추론 효율성 달성 요인

    1. Mamba2 블록은 매우 효율적이며 동일한 파라미터의 트랜스포머 블록에 비해 처리량이 약 4배임
    2. Mamba 블록은 저장할 작은 은닉 상태만 있으면 되고 KV-캐시가 필요 없으므로 공유 어텐션 블록 호출에 대해서만 KV 상태를 저장하면 됨
    3. 모델 크기를 현대 하드웨어에서 병렬화에 매우 적합하도록 선택함 (예: GPU의 여러 스트리밍 멀티프로세서, CPU의 멀티코어)

Zamba2-7B 학습 및 공개

     * Zamba2-7B는 Megatron-LM 기반으로 개발된 내부 학습 프레임워크를 사용하여 128개 H100 GPU에서 약 50일 동안 학습됨
     * Zamba2-7B는 7B 스케일에서 소규모 팀과 적정 예산으로도 최첨단에 도달하고 능가할 수 있음을 보여줌
     * 오픈 소스 라이선스로 공개되어 연구자, 개발자, 기업이 그 기능을 활용할 수 있음
     * AI 커뮤니티가 Zamba의 독특한 아키텍처를 탐구하고 효율적인 파운데이션 모델의 경계를 계속 밀어붙이기를 기대함

   공개된 Zamba2-7B 모델:
     * Instruct Zamba2-7B: https://huggingface.co/Zyphra/Zamba2-7B-Instruct
     * Base Zamba2-7B: https://huggingface.co/Zyphra/Zamba2-7B
     * Pure PyTorch: https://github.com/Zyphra/Zamba2

Zyphra의 비전

     * Zyphra 팀은 고급 AI 시스템 대중화, 성능의 최전선에 있는 새로운 아키텍처 탐구, 강력한 모델에 대한 과학적 연구와 이해 발전에 전념하고 있음
     * 이 비전을 공유하는 다른 이들과 협력하기를 기대하고 있음

GN⁺의 의견

     * Zyphra가 Zamba2를 오픈 소스로 공개한 것은 큰 의미가 있음. 이는 누구나 최첨단 언어 모델을 무료로 사용하고 연구할 수 있게 되었다는 점에서 AI 기술 대중화에 기여할 것임
     * Zamba2의 새로운 아키텍처는 기존 트랜스포머 기반 모델의 한계를 극복하고 더 효율적인 언어 모델을 만드는 방향을 제시함. 공유 어텐션과 LoRA 프로젝션 등 Zamba만의 독특한 아이디어는 앞으로의 언어 모델 연구에 영감을 줄 것으로 보임
     * 중소규모 팀도 최신 하드웨어를 활용해 SOTA 성능의 대형 언어 모델을 만들 수 있다는 점도 고무적임. 앞으로 다양한 조직의 참여로 파운데이션 모델 개발이 더욱 활발해질 것으로 기대됨
     * Zamba2의 성능이 실제 애플리케이션에서도 어떻게 발휘될지 지켜볼 필요가 있음. 뛰어난 벤치마크 점수가 곧바로 현실 세계 태스크로 이어지는 것은 아니기 때문. 다양한 분야의 실무자들이 Zamba2를 활용해보고 장단점을 공유하는 것이 중요할 것임

        Hacker News 의견

     * 기사에 연결되지 않은 가중치를 찾는 사람들을 위해 링크를 제공함
          + 기본 모델: Zyphra/Zamba2-7B
          + Instruct 튜닝: Zyphra/Zamba2-7B-Instruct
     * 성능 향상이 데이터셋 개선 덕분인지 아키텍처 덕분인지 궁금함. 이는 비용이 많이 드는 실험일 것임
     * LLM 릴리스가 벤치마크를 선택적으로 사용하는 것에 피로감을 느낌. SOTA qwen2.5/phi3.5와 비교가 궁금함
          + 최신 독립 리더보드를 아는 사람 있는지 질문함. Lmsys와 livebench는 최근 주요 모델을 대부분 건너뜀
     * Apache 라이선스 모델이 더 많이 나오는 것이 좋음, 특히 다양한 아키텍처와 함께
     * Mamba2 블록에 대한 이론적 작업의 양에 비해 성능 향상이 매우 미미함
          + 주의(attention)가 여전히 중요함
     * 두 개의 주의 헤드를 사용할 때, 각 주의 헤드가 데이터의 다른 측면에 집중하는지 궁금함
          + 기억 연구에서 사건의 이중 표현 개념이 있음. 하나는 더 정확한 표현이고, 다른 하나는 더 문맥 가중된 표현임
          + LLM에서 주의가 한 헤드는 정확한 표현에, 다른 헤드는 더 거친 정보에 집중하는 시스템을 상상할 수 있음. 그러나 LLM에 대해 잘 알지 못해 이것이 단순한 비유인지 확신할 수 없음
     * 7B가 특별한 이유가 무엇인지 궁금함. 왜 8B, 9B, 11.234B가 아닌지 질문함. 7B가 2의 거듭제곱으로 해석되는 것인지 궁금함
     * 또 다른 날, AI에서 또 다른 세계 기록이 세워짐
          + Sergey Bubka가 생각남. 그는 남자 장대높이뛰기 세계 기록을 35번 경신했음
     * 이 모델이 어떤 언어를 지원하는지에 대한 아이디어가 있는지 질문함
"
"https://news.hada.io/topic?id=17253","애플 macOS 15 Sequoia, 공식 Unix 인증 획득","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플 macOS 15 Sequoia, 공식 Unix 인증 획득

     * Apple의 최신 OS 출시 버전은 Open Group 목록에서 공식적으로 검증된 최신 UNIX™ 호환버전이지만, 여러분이 생각하는 것과는 일치하지 않을 수 있음
          + macOS는 AT&T 소스 코드를 사용하지 않음. ""Unix""는 1993년 Novell이 Bell Labs로부터 UNIX를 인수한 이후로 더 이상 그런 의미를 갖지 않음
     * 참고: OS X은 16년 전부터 이미 UNIX로 인증 받음

UNIX™ 인증이 의미하는 바

     * 코드와는 관련이 없음. 30년 넘게 그랬음
     * UNIX™ 인증은 이제 ""POSIX 호환""을 의미함
     * POSIX는 호환성 사양 및 테스트 세트로, 올바른 도구가 올바른 위치에 있어야 함
     * IBM의 z/OS 메인프레임 운영 체제도 이 목록에 있음

Unix와 유사한 OS의 정의

     * Unix처럼 보이고, Unix처럼 작동하며, Unix용으로 작성된 프로그램을 주요 수정 없이 이식할 수 있어야 함
     * macOS의 핵심은 이에 충분히 부합함. XNU 커널과 주로 BSD 코드에서 파생된 사용자 공간을 사용함
     * XNU는 Mach 커널을 기반으로 하며, BSD 코드에서 파생된 대형 인커널 ""Unix 서버""도 있음
     * 사용자 공간의 대부분은 오픈 소스이며 BSD에서 나옴
     * GUI 계층과 예쁘게 보이게 하는 가시적 부분이 독점적임

Apple의 Darwin 프로젝트

     * Apple은 과거에 Darwin이라는 프로젝트로 OS의 하위 계층을 독립형 버전으로 제공했음
     * OpenDarwin, PureDarwin 등 다른 FOSS OS의 비트를 사용하여 이를 완성하려는 여러 배포판이 있었음
     * NextBSD 프로젝트는 반대 방향으로 진행되었는데, FreeBSD 커널을 유지하면서 launchd와 같은 Apple의 상위 수준 코드를 사용할 수 있도록 수정함

macOS의 진화 과정

     * 1996년 말 Apple은 NeXT Computer 인수를 발표했고, 1997년 10월 차세대 OS인 Rhapsody 프리뷰를 출시함
     * Rhapsody는 NeXTstep 5와 거의 동일했음
     * 1999년에는 Mac OS X Server 1.0이 되었고, 이는 2000년 Mac OS X 1.0으로 발전함
     * 10.8 Mountain Lion부터는 OS X로, 10.12 Sierra부터는 macOS로 단순화됨
     * 그러나 여전히 1988년 Steve Jobs가 시연한 NeXTstep 0.8과 인식 가능할 정도로 유사한 OS임

GN⁺의 의견

     * macOS가 UNIX 인증을 받은 것은 큰 의미가 없어 보임. 대부분의 사람들에게는 실질적인 영향이 없을 것임
     * 하지만 macOS의 기반이 되는 Darwin이 오픈 소스라는 점은 주목할 만함. 이를 통해 개발자들은 macOS의 내부 작동 방식을 더 잘 이해할 수 있음
     * POSIX 호환성은 여전히 OS 간 이식성 확보에 중요한 역할을 하지만, 최신 표준을 준수하는 것은 더 이상 우선순위가 아닌 듯함
     * NeXTSTEP에서 macOS에 이르는 진화 과정을 보면, 사용자 인터페이스와 개발자 경험의 혁신이 운영 체제의 성공에 얼마나 중요한지 알 수 있음
     * 궁극적으로 UNIX 인증 자체보다는 macOS가 개발자 친화적이고 사용하기 쉬우며 강력한 생태계를 갖추고 있다는 점이 더 중요해 보임. 하지만 UNIX 인증은 macOS의 견고한 기반을 보여주는 상징적 의미는 있음

        Hacker News 의견

     * Sequoia의 인증은 새로운 것이 아님. OS X는 오랫동안 Open Group의 인증을 받았음
     * 이러한 인증이 왜 중요한지에 대한 의문이 있음
     * macOS는 'Unix'로 인증받았지만 현대 BSD는 그렇지 않음. 같은 코드베이스에서 나왔는데 왜 그런지 궁금함
     * 터미널 장치에서 poll()을 호출할 수 있는지 여부가 중요함
          + Mac OS X의 초기부터 이 기능이 부족했음
          + 크로스 플랫폼 소프트웨어는 항상 select()와 poll()을 모두 지원해야 함
          + Mac OS X에서는 select(), 다른 시스템에서는 poll()을 사용해야 함
          + poll()으로 표준화할 수 있다면 좋을 것임
     * macOS 매뉴얼 페이지와 인증 요구 사항 비교
          + macOS의 poll() 시스템 호출은 장치를 지원하지 않음
          + 인증 요구 사항에서는 poll()과 ppoll() 함수가 다양한 장치를 지원해야 함
     * macOS 15에서 이 버그가 수정되었는지, 아니면 인증이 의미 없는 것인지 의문이 있음
     * 인증을 떠나서 Linux와 macOS는 매우 유사함
          + xdg-open과 open, systemd와 launchd, sed -i와 sed -i ''의 차이점이 있음
     * POSIX 세마포어가 macOS에서 작동하지 않는데도 계속 인증받는 이유를 이해하지 못함
     * Apple이 왜 이런 인증을 받으려 하는지 궁금함
          + macOS 서버를 더 많이 사용하게 하려는 의도는 아닌 것 같음
     * Apple이 새로운 서버 계획을 가지고 있는지 궁금함
     * Unix 호환성의 큰 격차, 특히 pipe2를 구현하도록 Apple이 추진되기를 바람
"
"https://news.hada.io/topic?id=17243","조직에서의 AI 활용 : 몇가지 전술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          조직에서의 AI 활용 : 몇가지 전술

     * 최근 조사 결과, 많은 지식 노동자들이 업무에 AI를 활용 중임
          + 1월 덴마크 조사: 마케터 65%, 기자 64%, 변호사 30% 등이 AI 사용
          + 8월 미국 노동자 조사: 생성형 AI 활용자가 1/3에 달함
          + 가장 많이 쓰이는 도구는 ChatGPT, 다음은 Google Gemini
     * 개인 차원에서 AI로 인한 생산성 향상 효과가 입증되고 있음
          + GPT-4 사용으로 컨설턴트들이 18개 업무를 25% 더 빠르게 수행
          + GitHub Copilot 활용 시 코딩 생산성 26% 향상
          + 덴마크 설문에서 응답자들은 업무의 41%를 AI로 반으로 줄였다고 답변
     * 하지만 리더 및 관리자와 이야기해보면, 종종 허용된 좁은 사용 사례 외에는 AI 사용이 거의 없고 생산성 향상 효과도 거의 없다고 말함
          + 이는 개인 성과 향상이 조직 성과로 이어지지 않는 여러 이유 때문임
     * 조직 차원의 성과를 내려면 자체적인 AI 활용 R&D가 필수적임
          + 컨설팅사나 기업용 SW 업체의 범용적 접근법에 의지해선 안 됨
          + 누구도 해당 조직에 맞는 AI 활용법을 알려주지 못함
          + 대형 AI 기업들조차 모델의 최선의 활용처를 모른 채 출시
          + 각자의 상황에 맞는 활용법을 가장 먼저 찾아내는 것이 관건
     * AI 사용 방법 R&D는 개별 직원들의 군중(Crowd) 과 전담 연구팀(Lab) 을 함께 활용
          + Crowd: 현장에서 문제 해결을 위해 AI 적용하며 노하우 축적
          + Lab: Crowd의 아이디어를 제품화하고 신규 활용 시나리오 모색

Crowd를 위한 전술

     * Eric von Hippel 교수의 사용자 혁신 개념에 따르면, 많은 주요 혁신은 중앙 R&D 연구소가 아닌 실제 사용자들이 자신의 문제 해결을 위해 제품을 만지작거리면서 나옴
     * 전문가들은 AI의 유용성을 시행착오로 쉽게 평가할 수 있지만, 외부인은 그렇지 못함.
     * 조사와 대화를 통해 사람들이 AI로 실험하며 매우 유용하다고 생각하지만, 고용주에게 공유하지 않는다는 점을 알 수 있음. 거의 모든 조직에 AI를 사용하지만 말하지 않는 ""비밀 사이보그""들이 있음.
     * 비밀 사이보그가 생기는 이유
          + 부적절한 AI 사용에 대한 처벌이 두려워서
          + AI 사용을 말하면 존경받지 못할 것 같아서
          + AI가 일부 업무를 대신하면 자신이나 동료가 해고될 것 같아서
          + AI 사용을 공개해도 보상받지 못할 것 같아서
          + 생산성 향상은 더 많은 일을 해야 한다는 기대가 될 것 같아서
          + AI 사용법을 공유할 방법이 없어서
     * 비밀 사이보그의 도움을 받는 법
          + 두려움 줄이기: 추상적인 AI 윤리 교육이나 무서운 정책 대신 ""명확한 실험 허용 범위"" 제시하기
          + 보상 제도 연계: AI 사용 공개에 대한 보상 마련하기. 큰 생산성 향상에는 월급 수개월치 현금상, 승진, 재택근무 등 제공하기
          + 긍정적 사용 모델링: 경영진이 AI 사용법을 공개적으로 공유하기. 매니저가 직원들에게 AI로 문제해결 시도 권장하기
          + 공유 기회 제공: 해커톤, 프롬프트 공유회 등 개최하기. AI 재능을 가진 사람들 찾고 학습 내용 공유할 수 있는 커뮤니티 만들기
          + 도구와 교육 제공: 최신 모델 직접 사용 기회 주고, AI 사용방법에 대한 교육 세션 제공하기
     * 조직 내 AI 혁신 재능의 기회를 만들어야 함. 군중이 도움 될 수 있지만, 집중적 혁신 노력인 연구소(Lab) 역할도 있음.

연구소를 위한 전술

     * 분산형 혁신도 중요하지만 조직 내 AI 활용 R&D를 위한 중앙 집중적 노력의 역할도 있음.
     * 연구소는 주제 전문가와 기술/비기술 인력의 조합으로 구성되어야 함.
     * 군중에서 연구원 확보 가능함. AI 사용법을 알아내 회사와 공유하는 열정적 인재들을 활용해 연구소 구성하기
     * 연구소는 분석이나 추상적 전략보다는 구축에 집중해야 함. 다음을 구축할 것:
          + 조직을 위한 AI 벤치마크 개발: 어떤 AI가 가장 스타일리시한 작가인지, 재무 데이터를 다룰 수 있는지, 법률 문서를 잘 읽는지 등 실제 회사 내 작업에서 각 모델이 얼마나 좋은지 파악하기
          + 작동하는 프롬프트와 도구 구축: 군중의 아이디어를 제품으로 만들고, 반복 테스트하기. 조직에 배포하고 결과 측정하기
          + 아직은 작동하지 않는 것 구축: 핵심 비즈니스 프로세스의 모든 작업을 AI 에이전트가 수행한다면 어떨지 만들어보고 실패 지점 확인하기. 새 모델이 출시되면 프로토타입에 연결해 개선 여부 확인하기
          + 마법 같은 것과 도발적인 것 구축: AI와 아직 교감하지 못한 사람들을 위해 AI로 달성 가능한 놀라운 일이나 충격적인 것을 시연하기. AI로 불가능한 일을 최대한 해보고, 최신 도구의 성과 보여주기. 사람들의 관심 끌기
     * 군중은 혁신하고 연구소는 구축하고 테스트함. 성공적인 내부 R&D는 둘 다 필요함.

시작에 불과함

     * 장기적으로 AI 능력이 계속 발전한다면 혁신만으로는 충분치 않고, AI를 고려한 리더십이 필요할 것임.
     * 조직은 인간 지능의 한계와 이점을 중심으로 구축되어 왔음.
     * 이제 AI의 특이한 ""지능""을 고려해 수십 년간 개발된 프로세스와 조직 구조를 재구성하는 방법 모색해야 함.
     * 이는 R&D를 넘어 조직 구조와 목표, 미래 조직에서 사람과 기계의 역할을 고려해야 함.
     * 그러나 이것조차 충분히 급진적이지 않을 수 있음
     * AI 연구소의 명시적 목표는 모든 지적 작업에서 인간보다 뛰어난 AI 구축임
     * 곧 자율적으로 계획하고 행동할 수 있는 에이전트급 AI가 나올 것이라 약속함
     * OpenAI의 로드맵에서 보듯, 조직의 일을 대신할 AI 창조가 가능하다고 믿음. 이 모든 일이 일어나지 않을 수도 있지만 일부만 현실화되어도 오늘날 상상하기 어려운 방식으로 조직은 훨씬 더 심오한 변화를 겪게 될 것임
     * 기업들에게 이런 불확실성을 헤쳐나가는 최선책은 스스로 새로운 세계를 탐험하기 시작하는 것임
"
"https://news.hada.io/topic?id=17287","유발 하라리 “인공지능 사람인 척 상호작용하지 못하게 해야”","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   유발 하라리 “인공지능 사람인 척 상호작용하지 못하게 해야”

   AI로의 전환을 경계하는 논조의 유발 하라리의 인터뷰 속 중요 문장들

   하라리는 많은 민주국가에서 공론장의 위기 원인으로 알고리즘과 챗봇이 사람들의 대화에 끼어들어 가짜 정보와 음모론을 퍼뜨리는 상황을 지적했다. 대화의 상대가 사람인지, 봇인지를 모르면 민주주의 유지가 어렵기 때문에 봇을 구분하는 문제가 중요하다고 말했다.

   “인공지능의 기여와 별개로 모든 데이터는 편향에 물들어 있다. 하지만 노력하기에 따라서 편향에서 벗어나게 하는 게 불가능하지 않다. 인공지능의 불평등에서 산업혁명 초기처럼 소수의 국가가 나머지 나라들을 침탈하고 지배하는 문제가 있다. 그 격차를 다른 나라들이 따라잡는데 100년 이상 걸렸는데 인공지능 관련해서도 같은 현상이 생길 수 있다.”

   “인공지능은 삶의 속도 , 변화를 점점 가속화하고 있다 . 사람 누구나 불안과 강박을 느끼고 있다 . 인간의 생물학적 , 유기체적 속도와 비유기체인 컴퓨터의 속도 간 긴장이다 . 유기체의 삶은 운동과 휴식 , 잠 등 주기에 따르지만 , 컴퓨터는 항상 켜져 있다 . 인공지능이 점점 더 많은 영역에 통합되며 사회를 잠식함에 따라 우리도 기계의 속도에 맞추기를 강요당하고 있다 . 이는 불안함을 넘어 위험하다 . 유기체인 인간이 기계처럼 항상 켜져 있으면 결국 무너진다.”

   그래서, 지난 번에 올라온 내용을 바탕으로
   ChatGPT가 응답할 때, 저는 출처를 밝히고, 의견을 배제하라고 특정했습니다.
   그럼에도 다른 부분은 사람보다 더 사람 같아서, 혼란스럽지만요.
"
"https://news.hada.io/topic?id=17279","ArchiveBox가 진화중: 셀프 호스팅 인터넷 아카이브의 미래","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ArchiveBox가 진화중: 셀프 호스팅 인터넷 아카이브의 미래

     * ArchiveBox는 인터넷 아카이브를 자체 호스팅할 수 있는 새로운 기능을 소개
     * 최근 Archive.org에 대한 공격 이후, ArchiveBox에 대한 관심이 증가하고 있음
          + ArchiveBox는 Archive.org의 사명을 지지하며, 그들의 서비스가 인류에게 중요한 가치를 제공한다고 강조함

공공 아카이브의 한계

     * 사람들은 영구적으로 아카이브하는 것에 대한 두려움으로 인해 아카이브를 꺼려함
     * 개인이 중요하다고 생각하는 것을 아카이브할 수 있는 권한이 필요함
     * 현대 웹 환경에 맞춰 개인 및 반개인적 콘텐츠를 아카이브할 수 있는 솔루션이 필요함

아카이빙의 중요성

     * 가족, 개인, 기업 모두 자신에게 중요한 콘텐츠를 보존하고 싶어함
     * 개인적인 콘텐츠 아카이빙은 보안상의 도전 과제가 있으며 주의가 필요함

악의적인 콘텐츠

     * 공공 아카이브는 때때로 인종차별, 폭력, 증오 발언과 같은 콘텐츠를 보존함으로써 문제를 일으킬 수 있음
     * 이러한 콘텐츠를 보존하는 방법에 대한 고민이 필요함

ArchiveBox의 새로운 플러그인 생태계 소개

     * ArchiveBox v0.8은 프로젝트 역사상 가장 큰 업데이트로, 새로운 플러그인 생태계를 도입함
     * 다양한 커뮤니티 지원 기능을 제공하는 플러그인들이 포함됨
          + yt-dlp는 YouTube, Soundcloud, YouKu 등에서 비디오, 오디오, 자막을 다운로드
          + papers-dl은 DOI 번호가 보이면 과학 논문 PDF를 자동으로 다운로드
          + gallery-dl은 Flickr, Instagram 등에서 사진 갤러리를 다운로드
          + forum-dl은 오래된 포럼과 깊이 중첩된 댓글 스레드를 다운로드
          + readability는 기사 텍스트를 .txt, .md, .epub로 추출
          + ai는 페이지 스크린샷과 텍스트를 사용자 지정 프롬프트와 함께 LLM에 보내고 응답을 저장
          + webhooks는 일부 결과가 저장될 때마다 외부 API를 트리거하고 Slack, N8N 등에 ping을 보냄
          + 그 외에도 많은 기능들이 있음
     * 플러그인 시스템은 pluggy와 pydantic 라이브러리를 기반으로 함

추가 개발 사항

     * 새로운 REST API가 django-ninja로 구축됨
     * 외부 저장소 지원 추가
     * 콘텐츠 주소 지정 가능한 저장소 시스템의 초기 단계 도입
     * 백그라운드 작업 시스템 추가
     * 간단한 사용자를 위한 새로운 도구 abx-dl 출시 예정

     ""ArchiveBox는 SQLite를 사용하여 로컬 우선(Local-First)으로 설계되었으며, P2P는 항상 선택 사항임""

GN⁺의 정리

     * ArchiveBox는 개인 및 기업이 자신만의 인터넷 아카이브를 구축할 수 있도록 돕는 도구로, 최근의 변화는 이를 더욱 강화함
     * 공공 아카이브의 한계를 보완하고, 개인적이고 민감한 콘텐츠를 안전하게 보존할 수 있는 방법을 제공함
     * 플러그인 생태계는 다양한 기능을 제공하여 사용자 경험을 향상시킴

   ArchiveBox - 셀프호스팅 웹 아카이빙 도구

        Hacker News 의견

     * ArchiveBox의 지속 가능성과 개선 필요성에 대한 의견이 있음. 커뮤니티의 참여가 중요하며, 단독 개발자의 어려움을 이해함.
          + ArchiveBox가 더 안정적이고 신뢰할 수 있는 프로젝트가 되기 위해 커뮤니티의 지원이 필요함.
          + 아카이빙은 과거뿐만 아니라 미래를 위한 것이며, 지속 가능한 개발 조직이 필요할 수 있음.
     * ArchiveBox의 새로운 API와 플러그인에 대한 기대감이 있음. 2년 동안 아카이빙에 사용 중임.
     * grab-site와 같은 도구가 WARC 아카이브 생성 및 저장에 유용할 수 있음. 분산 아카이브를 위한 CDX 인덱스와 암호화 서명 지원이 필요할 수 있음.
     * ArchiveBox를 사용하여 오래된 보트에 대한 정보를 아카이빙한 경험을 공유함. 과거의 웹 포럼이 사라진 것에 대한 아쉬움을 표현함.
     * 개인 웹 페이지 아카이빙을 위해 Readeck.org를 사용 중이며, ArchiveBox의 분산 아카이빙 방향에 관심이 있음.
     * abx-dl의 가용성에 대한 질문과 패키징 지원 의사를 밝힘.
     * REST API에 대한 기대감이 있으며, 검색 기능의 부재에 아쉬움을 표현함. FTS 인덱스를 통한 쿼리 기능이 필요함.
     * ArchiveBox를 사용하여 웹사이트 아카이빙을 시도할 필요성을 느끼고 있음. Pinboard 구독의 아카이브 내보내기 기능이 작동하지 않음.
     * 아카이빙된 데이터의 Merkle 트리 생성에 대한 제안을 함. 데이터의 진위성을 증명하기 위한 방법으로 블록체인을 고려할 수 있음.
     * 자가 호스팅 웹사이트 변경 모니터링 시스템에 대한 추천을 요청함. Huginn을 사용 중이나, 최신 JS 기반 사이트에 어려움이 있음.
"
"https://news.hada.io/topic?id=17206","구글, 크롬 OS처럼 안드로이드에서 리눅스 앱 실행 준비 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, 크롬 OS처럼 안드로이드에서 리눅스 앱 실행 준비 중

     * 구글이 안드로이드용 리눅스 터미널 앱을 개발 중임
     * 터미널 앱은 개발자 옵션을 통해 활성화할 수 있으며 가상 머신에 데비안을 설치함
     * 이 앱은 크롬북용으로 제작되었지만 모바일 기기에서도 사용 가능할 수 있음

리눅스 앱 실행을 위한 구글의 노력

     * 최근 구글 엔지니어들이 안드로이드용 새로운 터미널 앱 작업을 시작함
     * 이 터미널 앱은 Android Virtualization Framework (AVF)의 일부이며, 로컬 IP 주소를 통해 리눅스 가상 머신에 연결하는 WebView를 포함하여 안드로이드 호스트에서 리눅스 명령을 실행할 수 있게 함
     * 처음에는 쉘 명령을 사용하여 수동으로 이 터미널 앱을 활성화한 다음 리눅스 VM을 직접 구성해야 했음
     * 그러나 최근 구글은 터미널 앱을 안드로이드에 통합하고 VM에서 리눅스 배포판을 실행하기 위한 올인원 앱으로 전환하는 작업을 시작함
          + ""ferrochrome-dev-option"" 태그 아래 일련의 패치가 최근 AOSP에 제출되었는데, 이 패치는 설정 > 시스템 > 개발자 옵션 아래 리눅스 터미널이라는 새로운 개발자 옵션을 추가함
          + 이 새로운 옵션은 제안된 설명에 따르면 ""VM 내부에서 실행되는 리눅스 터미널 앱""을 활성화할 것임
          + 이 옵션을 토글하면 AVF에 번들로 제공되는 터미널 앱이 활성화됨
     * 현재 안드로이드의 터미널 앱은 여전히 데비안 이미지를 제공하고 vm_config.json 파일을 생성하여 리눅스 VM을 수동으로 구성해야 하지만, 구글은 이를 자동으로 처리하도록 터미널 앱을 업그레이드할 계획임
          + ""ferrochrome-dev-option"" 태그 아래 패치 중 하나에서 구글은 AVF를 통해 VM에서 데비안을 다운로드하고 구성하는 기존 ""LinuxInstaller"" 앱이 ""곧 터미널 앱으로 병합될 것""이라고 말함
          + 이는 터미널 앱이 VM에서 실행 중인 데비안 인스턴스를 다운로드, 구성, 실행 및 인터페이스하는 올인원 앱이 될 것임을 시사함

터미널 앱 및 AVF 개선 작업 진행 중

     * 구글은 이 기능을 제공하기 전에 터미널 앱과 AVF를 계속 개선하고 있음
     * AVF는 이미 그래픽과 일부 입력 옵션을 지원하지만 스냅샷 백업 및 복원, 중첩 가상화, x86_64 아키텍처 장치에 대한 지원을 추가할 준비 중임
     * 또한 터미널 앱에 일부 설정 페이지를 추가할 준비를 하고 있는데, 현재는 IP 주소를 복사하고 기존 VM 인스턴스를 중지하는 메뉴를 제외하고는 매우 간단함
     * 설정 페이지에서는 디스크 크기를 조정하고 포트 전달을 구성하며 잠재적으로 파티션을 복구할 수 있음
     * 이러한 설정을 추가하는 패치가 테스트된 것은 Pixel Tablet과 Pixel 9 Pro XL의 코드명인 ""tangorpro""와 ""komodo""임
     * 이는 터미널 앱이 새로운 안드로이드용 데스크톱 버전의 Chrome과 같은 크롬북에 국한되지 않을 것임을 시사함
     * 터미널 앱이 언제 등장할지는 모르겠지만 내년 안드로이드 16 업데이트에서 볼 수 있을 것으로 예상됨

리눅스 앱을 안드로이드에서 실행하는 이유

     * 개발자들이 개발에 유용한 리눅스 앱을 크롬북에서 실행할 수 있도록 하기 위해 구글이 크롬 OS에 리눅스 지원을 추가함
          + 예를 들어 안드로이드 앱 개발을 위한 권장 IDE인 안드로이드 스튜디오의 리눅스 버전을 크롬북에서 실행 가능
          + 또한 컨테이너에서 안전하고 안정적으로 리눅스 명령줄 도구를 실행할 수 있음
     * 대부분의 크롬북은 ARM 기반 프로세서를 가진 대부분의 안드로이드 기기와 달리 x86 기반 프로세서를 가지고 있어 많은 리눅스 앱이 대부분의 안드로이드 기기에서는 작동하지 않을 수 있음
     * 하지만 리눅스 앱 지원을 추가하면 개발자에게 안드로이드의 유용성이 크게 향상되고 특히 더 많은 앱이 ARM을 지원함에 따라 향후 데스크톱급 플랫폼으로서 더 실행 가능해질 것임
     * 또한 크롬 OS가 안드로이드의 아키텍처와 프레임워크를 점점 더 많이 채택하고 있어 안드로이드와 점점 더 유사해지고 있기 때문에 구글도 이 작업이 꼭 필요함

   Termux와 비교해서 사용성 측면에서 얼마나 더 나아질지 기대되네요

   어차피 리눅스 터미널 앱은 안드로이드에서 돌아가니까, 안드로이드 운영체제에서 x11 클라이언트만 적당히 구현해서 열린 앱 창들 안드로이드 안에 띄워주면 끝나는 문제라고 생각했는데, 생각보다 어려운 문제인가보네요

   ChromeOS에서 Android VM동작시키는 기능은 ARC (Android Runtime for Chrome)이고,

   Ferrochrome은 거꾸로, Android에서 ChromeOS를 동작시키는 기능이네요.
   https://android.googlesource.com/platform/packages/… 에 설명이 나와있습니다.
   이것 기반으로 debian 도 올릴 수 있도록 작업하는 과정에 리눅스 터미널도 포함된 것 같습니다.
"
"https://news.hada.io/topic?id=17239","$20 Colmi R02 스마트 링용 Python 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   $20 Colmi R02 스마트 링용 Python 클라이언트

  Colmi R02란?

     * Colmi R02는 저렴한 스마트 링/피트니스 웨어러블임
     * 가속도계, 걸음 수 추적, 수면 추적, 제스처, 심박수(HR), 혈중 산소(SPO2) 센서 포함

  구매 방법

     * AliExpress에서 구매 가능
     * ""COLMI R02""로 검색하거나 ""Colmi official store""에서 구매 가능

  리버스 엔지니어링 상태

     * 실시간 심박수 및 SPO2
     * 걸음 수 기록
     * 심박수 기록(주기적 측정)
     * 링 시간 설정
     * HR 기록 빈도 설정
     * SPO2 기록
     * 수면 추적
     * ""스트레스"" 측정

  계획된 기능

     * 더 많은 CLI 기능 추가
     * HR 및 걸음 수를 보기 좋게 출력
     * 모든 데이터를 파일 또는 SQLite DB에 동기화
     * 간단한 웹 인터페이스

  시작하기

     * 명령줄 사용 시 pipx 설치 추천
     * pipx로 colmi_r02_client 설치 가능
     * 주변 링 검색 및 실시간 심박수 확인 가능

  통신 프로토콜 세부사항

     * BLE를 사용하여 링과 통신 가능
     * 보안 키 필요 없음
     * 16바이트 패킷 구조 사용
     * 첫 번째 바이트는 명령/태그/유형, 마지막 바이트는 체크섬/CRC

  GN⁺의 정리

     * Colmi R02는 저렴한 가격에 다양한 센서를 제공하는 스마트 링임
     * 오픈 소스 Python 클라이언트를 통해 데이터를 읽을 수 있어 개발자에게 유용함
     * BLE를 통한 통신으로 보안은 다소 취약할 수 있음
     * 유사한 기능을 가진 제품으로는 Xiaomi Mi Band 시리즈가 있음

        Hacker News 의견

     * Ubuntu에서 scan이 작동하지 않으며, 앱에서 주소를 사용해도 연결 실패 경험이 있음
     * 새로운 제품에 대한 기대감이 있으며, Oura ring 두 개를 사용했지만 추천하지 않음. 이 제품은 $14로 저렴하며 월 구독료가 없음
     * NFC 기능이 있는 유사한 반지가 있는지 궁금함. 스마트 헬스 기능보다는 NFC를 통한 다양한 응용 가능성을 선호함
     * 반지의 가속도계가 낙상을 감지할 만큼 정밀한지 궁금함. 스마트워치 사용을 거부하는 노인 환자에게 유용할 수 있음
     * 저렴한 기기의 안전성에 대한 우려가 있으며, 배터리 폭발 가능성에 대한 사례를 발견함
     * 기기를 스캔하고 데이터를 읽는 과정에서 인증이 필요하지 않으며, 무선으로 데이터를 전송함
     * 하드웨어는 저렴해지고 있지만 소프트웨어는 문제임. 예를 들어, $20짜리 침대 램프의 소프트웨어 결함으로 인해 매일 새벽 1시에 알람이 울림
     * 하드웨어 제조업체가 최소한의 해킹 키트를 제공했으면 하는 바람이 있음
     * GadgetBridge의 풀 리퀘스트에서 BLE API가 문서화된 사이트를 발견함
     * 온도 센서가 있는 유사한 반지가 있는지 궁금하며, 오픈 소스 앱을 통해 질병을 미리 감지할 수 있는 가능성에 관심이 있음
     * Temu에서 $18에 반지를 주문했으며, Apple Watch를 착용하고 있지만 직접 인터페이스하여 실시간 데이터를 얻을 수 있는 점이 마음에 듦
"
"https://news.hada.io/topic?id=17289","불안정한 몇 주 후 Winamp, GitHub 소스 코드 저장소 삭제 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               불안정한 몇 주 후 Winamp, GitHub 소스 코드 저장소 삭제 사건

Winamp의 GitHub 소스 코드 삭제

     * Winamp는 벨기에 소유주 Llama Group을 통해 9월 24일 ""Legacy Player Code""의 소스를 공개하여 개발자들이 이 상징적인 소프트웨어의 발전에 기여할 수 있도록 함.
     * 그러나 한 달도 채 되지 않아 이 저장소는 삭제되었으며, 이는 코드 라이선스의 문제와 다른 비공개 소프트웨어 패키지의 소스 코드가 드러난 것 때문임.

  ""협업"" 라이선스

     * Winamp의 코드는 ""Winamp Collaborative License (WCL) Version 1.0.1"" 하에 공개되었으나, 수정된 버전의 소프트웨어를 배포할 수 없으며, 공식 저장소의 유지보수자만이 소프트웨어와 그 수정 사항을 배포할 수 있음.
     * Nullsoft의 창립자이자 Winamp의 주요 개발자인 Justin Frankel은 이 라이선스 조건이 ""완전히 터무니없다""고 언급함.
     * 코드가 공개된 이후, 2,600번 이상 포크되었으며, 다른 프로젝트의 코드가 포함되어 있거나 SHOUTcast 서버 소프트웨어의 소스 코드가 유출된 것으로 보임.

  시간에 갇힌 플레이어

     * Winamp는 Windows 98 시절의 전성기 이후 많은 변화가 있었으며, 현재의 코딩 환경을 제대로 이해하지 못한 채 코드를 공개한 것으로 보임.
     * Winamp는 2013년 웹 종료 이후 Radionomy에 인수되었으며, 2019년에 새로운 버전이 출시될 예정이었음.
     * 2022년 큰 업데이트가 있었으나, 여전히 ""고대의 앱""으로 남아 있음.
     * Llama Group SA는 매년 두 개의 주요 공식 버전을 출시하고, 아티스트나 레이블을 위한 Winamp for Creators를 제공할 계획임.

GN⁺의 정리

     * Winamp의 소스 코드 공개는 오픈 소스 커뮤니티에 부정적인 인상을 남겼으며, 라이선스 문제로 인해 저장소가 삭제됨.
     * Winamp의 ""협업"" 라이선스는 개발자들에게 기여의 기회를 제공하지만, 수정된 버전의 배포를 금지하여 제한적임.
     * Winamp는 과거의 영광을 되찾기 위해 노력하고 있으나, 현재의 기술 환경을 충분히 이해하지 못한 채 코드를 공개한 것으로 보임.
     * 비슷한 기능을 가진 소프트웨어로는 VLC, Foobar2000 등이 추천됨.

        Hacker News 의견

     * 한 사람이 자신의 땅에서 선사시대 손도끼를 발견했음. 이 도끼가 당시 가장 멋진 도끼 중 하나였을 것이라 생각하고, 이를 박물관에 기증하여 많은 사람들이 인류 문명의 경이로움을 감상할 수 있도록 함
          + 도끼의 원래 제작자는 도끼를 잘 관리하고 깨끗하게 유지했을 것이지만, 시간이 지나면서 약간의 흙과 수정이 쌓였음. 중요한 역사적 유물을 손상시키고 싶지 않아 발견자는 도끼를 있는 그대로 기증함
          + 박물관은 기증자에게 전시 라벨을 추가하도록 요구함. 불행히도 기증자가 벨기에 사람으로 프랑스어만 구사하여 도끼의 목적에 대한 심각한 오해가 발생함
          + 전시가 처음 공개되는 날, 큰 혼란이 발생함. 사람들은 더러운 선사시대 도끼가 현대 도끼에 적용되는 모든 규정을 위반한다고 주장하며 소송을 제기하려 함. 흙을 보존하면서 제거하려는 시도가 있었지만, 이는 다른 사람들을 더욱 화나게 함
          + 결국 전시는 박물관에서 철회되었지만, 다행히 많은 사람들이 사본과 3D 복사본을 만들어 개인 소장품으로 안전하게 보관할 수 있었음
     * 이 저장소의 삭제로 많은 것을 잃었음. 코드 자체는 이미 인터넷에 퍼져 있지만, 문제, 풀 리퀘스트, 커밋 기록의 부조리한 코미디를 잃었음
     * Winamp는 수정된 GPL 코드를 포함하고 있어 GPL을 위반했음
     * 저장소의 마지막 커밋 전 상태의 미러가 있음. 또한 클론할 수 있는 git 번들 파일도 제공됨
     * 독점 소프트웨어를 오픈 소스로 전환하는 것은 드물게 발생함. 제대로 하려면 상당한 주의가 필요함. 그렇지 않으면 이런 난처한 상황에 처하게 됨
     * 인터넷과 소프트웨어 라이선스에 대한 이해 부족으로 인해 스스로를 곤란하게 만드는 이야기에 추가할 또 다른 사례임. ArsTechnica 링크에 따르면, 4명의 WA Legacy 개발자가 해고되었고, 곧 다른 개발자도 떠났음. 이는 공개 전에 코드를 감사할 수 있는 리소스가 거의 없었음을 의미함
     * 라이선스를 이렇게 꼬치꼬치 따지는 것은 놀라움. Github의 지침을 위반하는 이유는 이해하지만, Winamp는 오늘날 업데이트하거나 포크할 내재적 가치가 없음. 더 나은 오픈 소스 솔루션이 존재함. 2024년에 Winamp를 '취소'하는 것은 2000년 이후 내 인생의 버킷리스트에 없었음
     * 인터넷 아카이브에 대한 위선이 있음. 아카이브에 저작권 콘텐츠를 저장하는 것은 괜찮지만, 회사가 자체적으로 그렇게 하는 것은 안 됨
     * 이 이야기는 땅 주인과 동네 아이들 그룹에 비유할 수 있음. 땅 주인은 아이들이 자신의 들판에서 야구를 하도록 허락하지만, 아이들은 잔디가 깎이지 않았다고 불평하고, 저녁 늦게까지 놀며, 몇몇 아이들은 그의 꽃밭을 훼손함. 변호사들은 안전 조치를 하지 않으면 소송을 당할 것이라고 말하자, 땅 주인은 포기하고 울타리를 세움
     * 이 소프트웨어를 재배포하지 말라는 규칙이 있지만, 부주의로 인해 일부 폐쇄형 소프트웨어를 재배포할 예정임. '너에겐 규칙, 나에겐 규칙 없음'이라는 태도임
"
"https://news.hada.io/topic?id=17303","WordPress 보복이 커뮤니티에 미치는 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       WordPress 보복이 커뮤니티에 미치는 영향

     * 현재 진행 중인 Automattic과 WP Engine의 싸움에서 어떤 결과가 나올지 말하기는 너무 이르지만, 워드프레스 커뮤니티 전체가 이미 패자가 되었음
          + 오토매틱 설립자이자 CEO인 맷 멀렌웨그는 WordPress 프로젝트와 WordPress.org 인프라에 대한 통제권을 이용해 WP Engine을 처벌하고 일부 반대 기여자를 토론 채널에서 제거하고 있음
          + 가장 최근에는 멀렌웨그가 WP 엔진 플러그인에 대해 적대적인 포크를 시작했고, 포크된 플러그인이 워드프레스 업데이트를 통해 원본을 대체하고 있음
          + 오토매틱과 WP 엔진의 싸움이 시작되었을 때, 많은 사람들은 두 회사가 적대감을 줄이거나 최소한 변호사에게 맡겨서 해결하고 더 큰 커뮤니티는 이 싸움에서 제외되기를 바랐지만 이러한 희망은 실현되지 않았음
     * WordPress.org 측이 WP 엔진에 대한 Ban을 중단하며 ""Reprieve(유예)"" 글을 9월 27일에 올림
     * 그 이후 WP 엔진은 10월 2일에 오토매틱과 멀렌웨그를 상대로 62페이지 분량의 고소장을 제출하고 배심원 재판을 요구함
          + 고소 내용에는 계약 방해, 컴퓨터 사기, 강탈 미수, 명예훼손 등이 포함됨
          + 또한 WP 엔진이 오토매틱이 언급한 워드프레스, 우커머스 등의 상표를 침해하거나 희석하지 않는다는 확인 판결을 요구함
     * 이는 Automattic과 WP 엔진 사이의 단절된 관계를 회복할 가능성은 거의 없는 조치였음
          + WordPress.org Ban은 그대로 유지될 것이고, Automattic이 소송에 대응할 것이며, 아마도 WP 엔진에 맞소송을 제기할 것이라는 예상은 충분히 가능했음
          + 하지만 현재까지 WP 엔진의 소송에 대한 맞소송이나 대응에 대한 어떠한 징후도 보이지 않고 있음
          + 대신 뮬렌웨그는 다른 수단을 사용하여 WP 엔진에 문제를 일으키고 있으며, 이러한 전술은 더 넓은 워드프레스 커뮤니티에 문제가 되는 방식으로 퍼져나가는 중
     * 10월 9일, WordPress.org 의 계정 로그인 양식에 ""WP 엔진과 재정적으로나 기타 어떤 식으로도 제휴하지 않는다""는 새로운 체크박스가 추가됨
          + 체크박스를 선택하지 않으면 사용자는 진행하려면 체크박스를 선택하라는 메시지를 받게 됨
          + 이 정책에 대해 의문을 제기한 기여자 중 일부는 슬랙에서 차단된 것으로 알려짐
     * 많은 기여자들이 체크박스의 모호한 표현과 그 결과에 대해 질문을 제기함
          + 이에 대해 멀렌웨그는 ""변호사와 상담하라""고 조언하는 등 불만족스러운 답변을 내놓음
          + Javier Casares와 Terence Eden 등 일부 참가자는 질문을 계속 제기한 후 계정이 비활성화되었다고 보고함
          + Andrew Hutchings는 대부분의 개인 기여자는 변호사 자문을 받을 여유가 없다고 지적하며, 그저 프로젝트에 기여하고 싶을 뿐이라고 말함

편을 선택하시오 (Piack a side)

     * 체크박스 토론에서 한 참가자는 ""여기서 무슨 일이 일어나고 있는지 모르겠느냐""며 ""간단하다. 편을 들어야 한다""고 말함
     * 이에 대해 멀렌웨그는 ""나는 여러분이 모두 정보를 얻고 참여하기를 바란다. 관망만 하지 말라""고 답변함
     * 멀렌웨그는 WP 엔진을 WordPress.org 에서 차단한 직후 오토매틱 직원들에게도 편을 택하라고 요구했음

인기 플러그인 Advanced Custom Fields의 운명

     * WP 엔진은 인기 플러그인인 Advanced Custom Fields(ACF)를 제작하고 있음
     * 멀렌웨그는 9월 28일 ACF Pro를 워드프레스 코어에 포함시켜야 하는지 슬랙에서 질문했음
     * 오토매틱은 10월 5일 ACF의 취약점을 WP 엔진에 ""책임감 있게 공개했다""고 발표했으나, 워드프레스 코어 보안팀 리더는 이를 ""무책임하게 발표했다""고 비판함
     * 10월 12일 멀렌웨그는 ACF가 Secure Custom Fields(SCF)로 포크되고 있다고 발표했음
     * 이는 WP 엔진을 처벌하기 위한 조치로, 이전에 ACF를 설치한 모든 사용자를 대신해 새 플러그인으로 대체되고 있음

WPGraphQL도 오토매틱으로

     * WPGraphQL 플러그인 개발자 제이슨 발은 10월 7일 WP 엔진을 떠나 오토매틱에 합류한다고 발표함
     * 또한 WPGraphQL이 워드프레스의 ""정식 플러그인""이 된다고 말함
     * 오토매틱 산하의 WPGraphQL 개발에서 ACF와의 호환성은 우선순위가 아닐 것으로 보임

워드프레스 커뮤니티의 향방은?

     * 멀렌웨그의 WP 엔진에 대한 복수가 무시하거나 피할 수 없는 방식으로 커뮤니티로 번지고 있음
     * 그의 프로젝트 리더십에 대해 기여자, 사용자, 외부 관찰자들이 거듭 의문을 제기하고 있음
     * 더 많은 기여자들이 물러날 가능성이 있으며, 상당수 사용자들이 워드프레스를 더 이상 추천하지 않겠다며 대안을 모색 중임
     * 오픈소스 프로젝트의 상업화에 대해서는 정당한 대화가 필요하지만, 멀렌웨그의 행동으로 인해 완전히 가려지고 있음

""미친 왕""이 된 멀렌웨그

     * Flask 웹 프레임워크 제작자 Armin Ronacher는 워드프레스 위기와 관련해 오픈소스와 돈을 섞는 것에 대해 흥미로운 견해를 내놓음
     * 그는 오픈소스 프로젝트 창시자들이 자신의 프로젝트에서 다른 이들이 재정적 성공을 거두는 것을 보고 부당하다고 느끼는 경우가 많다고 말함
     * 멀렌웨그의 행동은 ""그를 지지했을 많은 이들을 소외시켰다""며 그가 ""'미친 왕'이 되어가고 있다""고 평함

GN⁺의 의견

     * 멀렌웨그의 행동으로 인해 오픈소스 프로젝트의 지속가능성과 수익 분배에 대한 질문 대신, 거버넌스, 중앙 집중식 소프트웨어 배포, 소프트웨어 공급망에 대한 의문이 전면에 부상하고 있음
     * 수십 년 동안 오픈소스의 선함을 보여주는 사례였던 워드프레스가 이제는 기업 소유 프로젝트 모델의 위험성에 대한 사례 연구가 되고 있음
     * 안전한 선택으로 여겨졌던 워드프레스가 이제는 위험한 것으로 인식되기 시작했고, 이는 오픈소스 전반에 영향을 미칠 수 있음

        Hacker News 의견

     * Wordpress Foundation 이사회가 독립적이지 않다는 의견이 있음. Automattic과의 분리가 필요하다는 주장임
          + Wordpress 프로젝트가 개인적인 소유물처럼 운영되는 것에 대한 불만이 있음
          + 소셜 미디어에서의 논쟁이 불필요한 드라마를 초래할 수 있다는 우려가 있음
          + WPEngine이 Wordpress를 포크하고 독립적인 경로를 찾을 것을 제안함
          + Wordpress의 상표를 무기로 사용하는 것에 대한 우려가 있음
          + 오픈 소스 프로젝트의 지속 가능성에 대한 논의가 필요하다는 의견이 있음
          + 중앙화된 소프트웨어 배포와 소프트웨어 공급망에 대한 논의가 필요함
          + 단일 의존성을 피하고 상표를 적극적으로 방어해야 한다는 교훈을 제시함
          + Slack 계정 비활성화에 대한 명확한 정보가 부족하다는 지적이 있음
          + WP Engine이 Wordpress에 더 기여해야 한다는 의견이 있음
"
"https://news.hada.io/topic?id=17306","NotebookLM, 오디오 개요 맞춤화 및 안내 기능 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   NotebookLM, 오디오 개요 맞춤화 및 안내 기능 출시

  일반 요약

     * NotebookLM은 Gemini 1.5로 구동되는 도구로, 사용자가 업로드한 자료를 바탕으로 복잡한 정보를 이해하는 데 도움을 줌.
     * 새로운 기능으로는 사용자 지정 가능한 오디오 개요가 포함되어, AI 호스트에게 지침을 제공하고 NotebookLM 내에서 작업하면서 오디오를 들을 수 있음.
     * NotebookLM Business는 Google Workspace를 통해 제공될 예정이며, 기업, 대학, 조직을 위한 향상된 기능을 제공하고 데이터 프라이버시와 보안을 우선시함.
     * NotebookLM Business 파일럿 프로그램에 신청하여 새로운 기능, 교육, 이메일 지원을 조기에 이용할 수 있음.

  기본 설명

     * NotebookLM은 사용자가 제공한 자료를 바탕으로 정보를 이해하는 데 도움을 주는 도구임.
     * 이제 AI 호스트에게 지침을 제공하여 오디오 개요를 사용자 지정할 수 있으며, NotebookLM 내에서 작업하면서 오디오 개요를 들을 수 있음.
     * NotebookLM Business는 곧 기업과 조직을 위한 향상된 기능과 함께 제공될 예정임.

  오디오 개요 활용하기

     * 오디오 개요의 수용에 기뻐하며, 두 가지 새로운 기능을 소개함:
          + 대화 안내: ""심층 탐구"" 오디오 개요를 생성하기 전에 지침을 제공할 수 있음. 특정 주제에 집중하거나 청중에 맞춰 전문성을 조정할 수 있음.
          + 백그라운드 청취: NotebookLM 내에서 작업을 계속하면서 오디오 개요를 들을 수 있음.

  NotebookLM Business 소개

     * NotebookLM Business는 Google Workspace를 통해 제공될 예정이며, 기업, 대학, 조직을 위한 향상된 기능을 제공함.
     * 데이터 프라이버시와 보안을 최우선으로 하며, 파일럿 프로그램에 신청하여 새로운 제품 기능, 교육, 이메일 지원을 조기에 이용할 수 있음.
     * 현재 80,000개 이상의 조직이 NotebookLM을 사용 중이며, 더 많은 사용자를 환영할 예정임.

GN⁺의 정리

     * NotebookLM은 복잡한 정보를 쉽게 이해할 수 있도록 돕는 도구로, 사용자 지정 가능한 오디오 개요 기능을 통해 사용자가 원하는 방식으로 정보를 탐색할 수 있는 장점이 있음.
     * NotebookLM Business는 기업과 조직을 위한 향상된 기능을 제공하며, 데이터 프라이버시와 보안을 중요시함.
     * 이 기사는 AI 도구가 어떻게 정보를 처리하고 사용자 경험을 향상시킬 수 있는지를 보여주며, 특히 기업 환경에서의 활용 가능성을 제시함.
     * 유사한 기능을 제공하는 도구로는 Microsoft의 OneNote와 Evernote가 있음.

        Hacker News 의견

     * NotebookLM이 인터넷에 가짜 팟캐스트를 확산시키고 있으며, 이는 스팸 문제를 야기할 수 있음. Google은 이번에 빠르게 대응하고 있으며, NotebookLM의 스팸 문제를 해결하기 위한 도구나 가이드라인이 필요하다는 의견이 있음
          + Google 이미지 검색 결과 중 ""baby peacock""의 대부분이 AI 생성 이미지라는 사례가 있음
          + AI 생성 가짜 팟캐스트가 인터넷에 확산될 가능성이 있음
     * Google의 AI 도구는 과소평가되고 있으며, Notebook LLM부터 AI 스튜디오까지 다양한 도구가 있음. 개인적으로 사용해본 결과 매우 뛰어남
     * NotebookLM을 사용하여 인프라의 포스트모템을 분석하고 공통 주제를 추출하는 데 효과적이었음. 오디오 개요를 생성하는 기능도 유용했음
          + 주어진 프롬프트에 따라 개요의 품질이 크게 향상되었음
          + 새로운 팀에 합류할 때 최근 100개의 포스트모템을 기반으로 한 개요를 듣는 것이 유용할 것임
     * Reasonote.com은 팟캐스트 생성 기능을 제공하며, NotebookLM보다 몇 가지 개선점이 있음
          + 주제만으로 시작할 수 있으며, 팟캐스트 생성 속도가 빠름
          + 팟캐스트가 인터랙티브하며, 진행 중 방향을 변경할 수 있음
          + Spotify 스타일의 팟캐스트 주제 큐를 만들 수 있는 기능이 곧 추가될 예정임
          + 현재 목소리와 개성이 덜 매력적이지만, 앞으로 개선될 예정임
     * NotebookLM을 주로 컴포넌트 참조 자료를 저장하는 데 사용하고 있으며, 텍스트 쿼리 기능이 잘 작동함. 오디오 개요는 주제를 조정할 수 있다면 유용할 것임
     * Google Illuminate는 맞춤화 기능을 도입했으며, 기술적이고 전문적인 톤으로 긴 지속 시간을 설정하여 사용 중임
     * AI 도구가 너무 쉽게 정보를 찾을 수 있게 만들었음. 사용자 이름을 기반으로 여러 사이트에서 정보를 수집하고 서사를 만드는 것이 가능해졌음
          + 인터넷에 올린 정보는 영구적으로 공개된다는 점을 인식해야 함
          + 여러 온라인 아이덴티티를 사용하는 것이 바람직할 수 있음
     * NotebookLM을 사용하여 HN의 일일 요약을 생성하고 YouTube에 게시 중임. 도구를 개선하여 더 나은 일정으로 비디오를 제작할 계획임
     * NotebookLM에 대해 매우 긍정적이며, 새로운 아이디어를 이끌어낼 가능성이 있음. OpenAI가 뒤처져 있다고 느낌
     * 기본 프롬프트의 문제는 두 명의 호스트가 정보를 주고받는 것에 그치는 경우가 많음. 프롬프트를 맞춤화하여 설명자와 청취자 간의 역동성을 만들 수 있음
"
"https://news.hada.io/topic?id=17277","왜 우리는 더 이상 어닝을 사용하지 않는가 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     왜 우리는 더 이상 어닝을 사용하지 않는가 (2022)

  어닝은 어떻게 작동하는가?

     * 어닝은 창문을 통해 들어오는 태양열을 효과적으로 차단하는 역할을 함
     * 19세기 건축가들은 컴퓨터나 전동 공구 없이도 견고한 건축물을 설계하고 건설할 수 있었음
     * 어닝은 여름철 높은 태양을 차단하고 겨울철 낮은 태양을 받아들여 실내 온도를 조절하는 데 도움을 줌
     * 금속 프레임은 수십 년 동안 유지되며, 천은 8-10년마다 교체가 필요함

  어닝이 사라진 이유

     * 에어컨의 보급으로 인해 어닝의 필요성이 줄어듦
     * 20세기 중반 에어컨이 보급되면서 어닝은 점차 사라짐
     * 에너지 비용이 저렴했던 시기에는 어닝의 필요성을 잊고 단열재에 집중함
     * 오늘날 어닝은 주로 상점 간판이나 비를 막기 위한 용도로 사용됨
     * 에너지 비용이 증가하는 시대에 어닝이 다시 인기를 끌 가능성이 있음

GN⁺의 정리

     * 어닝은 에어컨이 보급되기 전까지 건물의 온도를 조절하는 중요한 역할을 했음
     * 에어컨의 등장으로 어닝의 사용이 줄어들었지만, 에너지 절약 측면에서 다시 주목받을 가능성이 있음
     * 어닝은 단순한 구조로 에너지를 절약할 수 있는 방법으로, 현대의 에너지 비용 증가에 대응할 수 있는 대안이 될 수 있음
     * 비슷한 기능을 가진 제품으로는 단열재와 에어컨이 있음

        Hacker News 의견

     * ""Technology Connections"" 유튜브 채널에서도 차양에 대해 논의한 적이 있으며, 이 블로그와 비슷한 메시지를 전달함
     * 네덜란드에서는 고정된 금속 프레임 차양 대신 전동식 또는 수동식으로 조절 가능한 차양을 많이 사용함
          + 겨울이나 악천후에는 차양을 접고, 햇빛이 강할 때는 펼침
          + 전형적인 주택 구조는 양쪽에 큰 창문이 있음
     * 과거 건축가들이 현대 기술, 예를 들어 열을 반사하는 아르곤 충전 이중 유리창에 놀랄 것임
          + 차양은 저기술적이지만 효과적일 수 있음
          + 현대 주택의 열 관리는 높은 열 질량의 벽이 필요함
          + 수동 냉각과 높은 열 질량 건축을 현대 기술과 결합하는 것이 중요함
     * 산호세 근처 남향 파티오 문에 설치한 전동식 차양이 열 차단에 큰 효과를 줌
          + 여름철 에어컨 없이도 생존할 수 있게 해줌
          + 가스 난방기를 열 펌프로 업그레이드할 계획임
     * 미국인들은 자연 채광에 크게 신경 쓰지 않는 것 같음
          + 아내가 남향이나 동향 아파트를 찾을 때 종교적 이유인지 물어본 적이 있음
     * 스페인에서는 여전히 많은 집들이 여름철 강한 햇빛을 차단하기 위해 녹색 차양을 사용함
          + 시골에서 온 사람들에게 더 매력적으로 보이도록 설계됨
     * 그라나다에서는 대부분의 아파트 건물에 차양이 있음
          + 런던의 새 아파트는 열 관리가 부족하여 30도 이상으로 올라감
     * 다람쥐 때문에 차양을 사용하지 않음
          + 다람쥐가 둥지를 만들기 위해 차양을 파괴함
     * 태양광 패널의 그늘도 실내 온도에 큰 차이를 줄 수 있음
          + 미국의 주택은 그늘을 제공할 공간이 부족함
     * 습한 기후에서는 차양이 도움이 되지 않음
          + 플로리다에서는 그늘과 햇빛의 온도 차이가 거의 없음
"
"https://news.hada.io/topic?id=17220","SpaceX Starship 의 5번째 비행 테스트 : 발사 및 부스터 포획 [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            SpaceX Starship 의 5번째 비행 테스트 : 발사 및 부스터 포획 [비디오]

     * 텍사스주 남부 보카치카 해변의 우주발사시설 '스타베이스'에서 발사
     * 발사 약 3분 만에 전체 2단 발사체의 아랫부분인 슈퍼헤비 로켓이 상단 우주선 스타십과 분리
     * 발사 약 7분 만에 1단계 로켓 추진체인 슈퍼헤비가 우주에서 지구로 돌아와 수직 착륙하는 데 처음으로 성공
     * 메카질라가 슈퍼헤비를 공중에서 붙잡아 발사대에 거치 완료

   이게 영상으로 보면 사이즈가 안느껴지는데, 70m짜리 25층 아파트 한동이 날아갔다와서 잡히는거라고 생각해보면 대단합니다.
   슈퍼헤비 로켓을 잡고 있는 메카질라(Mechazilla)는 140미터 높이에요.

        Hacker News 의견

     * SpaceX의 엔지니어링 팀의 성과가 인상적임
          + 'Chopsticks catch'가 놀라웠으며, 부스터에 추가적인 화재 억제 시스템이 필요할 것 같음
          + 열 차폐가 오랫동안 유지되었고, 플랩의 비대칭 가열이 흥미로웠음
          + 마지막 폭발은 구조적 결함보다는 물에 닿으면서 탱크가 실패한 것으로 보임
          + Starlink를 통한 실시간 비디오 전송이 엔지니어링에 혁신적임
          + 6번째 비행에서는 손상 없이 완전한 비행이 가능할 것으로 예상됨
     * SpaceX가 부스터를 발사대에 다시 내려놓고 'quick disconnect' 호스를 재연결했음
          + 부스터를 발사대에 맞추기 위해 'chopstick' 팔과 상대적으로 이동할 수 있는 레일이 있음
     * 로켓이 타워에 부딪힐 것 같았지만 마지막 순간에 바로잡혔음
          + 착륙 시스템의 제어 알고리즘이 매우 뛰어남
     * Mechazilla가 Super Heavy 부스터를 잡았다는 비디오 링크 제공
     * 우주 개척의 큰 진전이며, 언젠가는 150톤을 완전 재사용 가능한 로켓으로 보내는 것이 일반화될 것임
          + 이는 747 비행기를 우주로 보내는 것과 같음
     * 아내에게 Starship의 중요성을 설명하기 위해 Handmer의 2021년 설명 링크를 제공했음
     * 부스터를 잡는 것이 얼마나 중요한 이정표인지 강조
          + 재사용 가능한 로켓이 기존보다 훨씬 커졌으며, 궤도에 kg당 비용이 급감했음
     * 부스터를 잡는 시도를 알고 있었지만, 첫 시도에서 성공할 것이라고는 생각하지 않았음
          + SpaceX 팀에게 축하를 전하며, 이 성과를 축하하길 바람
     * 미국과 NATO에게 전략적으로 큰 의미가 있음
          + 경쟁사보다 훨씬 저렴한 비용으로 더 많은 화물을 궤도에 올릴 수 있는 능력이 중요함
          + Starlink와 Starshield가 이미 중국과 러시아보다 앞서 있으며, Starship이 그 격차를 더 벌릴 것임
     * 로켓이 타워에 가까워지면서 50%는 타워를 무너뜨릴 것이라고 생각했지만, 완벽하게 성공했음
"
"https://news.hada.io/topic?id=17307","고양이의 (거의) 액체 같은 특성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           고양이의 (거의) 액체 같은 특성

        Hacker News 의견

     * 개는 좁은 틈을 지나기 전에 멈추고 주저하는 반면, 고양이는 좁은 틈을 지나기 전에 이러한 행동 변화를 보이지 않음. 그러나 고양이는 가장 짧은 틈을 통과하려고 할 때 주저하는 모습을 보임
          + 고양이는 머리를 공간에 넣어 너비를 정확하게 측정할 수 있지만, 높이를 판단하는 데는 추가적인 고려가 필요함
     * Calvin과 Hobbes 만화에서 고양이의 행동이 입증됨
     * 고양이가 두 개의 틈을 통해 입자처럼 또는 파동처럼 행동하는지 실험해보고 싶음
     * 고양이를 키우기 전에는 다른 동물처럼 생각했지만, 이제는 고양이를 무정형 덩어리로 생각함
     * 1930년대 A.S.J. Tessimond의 선구적인 연구가 인용되지 않음
          + 고양이는 그림자처럼 유동적이며 바람에 각을 제공하지 않음
     * 90년대 후반에 bonsai kitten이라는 인터넷 속임수가 있었음
          + 많은 사람들이 속았지만, 이는 명백한 속임수였음
     * 고양이가 기지개를 켜고 하품한 후 작은 용으로 변해 불덩이를 뱉는 상상력 넘치는 이야기
     * ""On the Rheology of Cats""라는 오래된 연구가 있음
     * 개는 좁은 틈을 피하기 위해 우회로를 선택하지만, 어떤 큰 개는 자신의 몸이 코끝이라고 믿고 좁은 틈을 통과하려고 함
     * 7마리의 고양이를 키우고 있으며, 각각의 고양이가 다름
          + 가장 나이가 많은 수컷은 몸을 뻣뻣하게 유지하고, 가장 어린 수컷은 파괴적인 성향을 가짐
"
"https://news.hada.io/topic?id=17323","오픈 소스 앱 운영: 사용량, 비용 및 커뮤니티 기부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     오픈 소스 앱 운영: 사용량, 비용 및 커뮤니티 기부

    Spliit의 사용 현황, 비용, 기부

     * 사용자 수
          + Spliit은 지난 12개월 동안 152,000회의 방문을 기록했음
          + 주간 방문자는 초기 약 200명에서 현재 5,000~6,000명으로 증가했음
          + 이탈률은 33%로, 많은 사용자가 홈페이지를 방문한 후 그룹 전환, 비용 추가, 블로그 게시물 읽기 등의 활동을 하고 있음
     * 사용자 활동
          + Spliit에서는 주로 그룹 생성과 비용 추가를 할 수 있음
          + 현재까지 약 15,000개의 그룹과 162,000개의 비용이 생성되었음
          + 매주 약 300개의 그룹과 2,000개의 비용이 추가되고 있음
          + 약 4,600개의 그룹은 테스트 목적으로만 생성되었으며, 나머지 그룹 중 절반은 5개 이상의 비용을 포함하고 있음
     * 비용
          + Spliit의 월간 운영 비용은 약 $115이며, 대부분 데이터베이스 호스팅 비용임
          + 데이터베이스는 Vercel에 호스팅되며, 월간 데이터베이스 읽기 시간에 따라 비용이 산정됨
          + 비용 절감을 위해 더 저렴한 데이터베이스 제공자를 찾고 있음
     * 수익
          + Spliit은 오픈 소스 프로젝트로, 무료로 제공되며 기부를 통해 수익을 창출하고 있음
          + GitHub 후원이나 Stripe 링크를 통한 직접 기부가 주요 수익원임
          + 기부금은 프로젝트 비용을 완전히 충당하지는 못하지만, 상당 부분을 보조하고 있음
     * 개발 시간
          + Spliit에 매달 5~10시간을 투자하고 있으며, 대부분의 새로운 기능은 커뮤니티 기여자들이 구현함
          + 기여자들이 기능 제안, 버그 보고, 질문 등을 관리하고, 풀 리퀘스트를 검토 및 테스트하여 새로운 기능을 배포함

    # GN⁺의 정리

     * Spliit은 비용 분담을 위한 오픈 소스 프로젝트로, 사용자들이 그룹을 생성하고 비용을 관리할 수 있는 기능을 제공함
     * 기부를 통해 운영 비용을 보조하며, 커뮤니티의 기여로 지속적으로 발전하고 있음
     * Spliit은 Splitwise의 대안으로 주목받고 있으며, 특히 독일, 미국, 인도에서 인기가 높음
     * 이 프로젝트는 오픈 소스 커뮤니티의 협력과 기부 문화의 중요성을 보여주는 사례임
     * 유사한 기능을 제공하는 프로젝트로는 Splitwise와 Tricount 등이 있음

        Hacker News 의견

     * 데이터베이스 선택에 대해 SQLite를 좋아하지만, 앱과 데이터는 분리되어야 한다고 생각함. Postgres VPS를 고려했지만, neon.tech의 GUI와 브랜칭 기능을 더 선호하게 되었음. SaaS DB가 속도와 편리함을 제공하지만, 월별 비용과 변동성은 여전히 불만족스러움
     * 테스트한 앱이 계정 생성 없이도 사용 가능하다는 점이 인상적이었음. 개인 링크를 공유하면 사용자가 자신으로 로그인할 수 있음. 사용자 경험을 매끄럽게 하기 위한 개발자의 타협으로 보임
     * 비용 절감에 대해, 단일 Linux VPS에서 운영하면 월 5-10달러로 비용을 줄일 수 있을 것이라 생각함. 앱의 성장 차트가 선형적인데, 바이럴한 특성을 고려하면 왜 지수적이지 않은지 궁금함
     * spliit을 자주 사용하며, 느린 모바일 연결에서의 성능이 아쉬움. 로컬 또는 오프라인 지원을 추가하고 싶지만, 큰 변화가 필요함. 페이지 캐싱이라도 개선이 될 것임
     * 이 앱은 훌륭하며, 은행이 이를 기본 기능으로 제공하면 좋겠음. 은행 앱에서 그룹을 생성하고 다른 사용자 초대 가능. 1클릭으로 결제 요청 처리 가능
     * 사용한 만큼만 지불하는 모델은 수익이 사용량에 따라 증가할 때 좋음. 고정 비용이 높은 계획이 있었으면 함
     * 트래픽 수치를 고려할 때, $4 Digital Ocean 드롭릿으로도 동일한 결과를 얻을 수 있음. vercel 사용에 많은 비용을 썼지만, 기본 VPS로도 동일한 결과를 얻을 수 있음. 저자는 $100/월이 큰 영향을 주지 않거나 편리함을 위해 지불하는 것일 수 있음
     * 웹사이트 방문 통계를 추적할 수 있는 도구를 찾고 있음
     * Firebase를 데이터베이스로 고려하거나, 자체 호스팅을 추천함
     * 서버리스 데이터베이스 솔루션인 Supabase나 NeonDB를 사용하면 많은 비용을 절약할 수 있음
"
"https://news.hada.io/topic?id=17315","카기 업데이트: 검색 결과를 위한 AI 이미지 필터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      카기 업데이트: 검색 결과를 위한 AI 이미지 필터

Kagi의 AI 이미지 필터 기능

     * AI 생성 이미지의 증가
       웹에서 AI 생성 이미지가 점점 더 많아지면서, 사용자들은 이미지 검색 결과에서 인공적인 콘텐츠로 인해 혼란을 겪음. 특히, 진짜 인간이 만든 이미지나 특정한 실제 세계의 참조를 찾을 때 이러한 문제가 발생함.
     * Kagi의 AI 이미지 필터
       Kagi는 고품질의 관련 검색 결과를 제공하는 것을 중요하게 생각하며, AI 이미지 필터 기능을 통해 사용자가 보는 콘텐츠를 더 잘 제어하고, 검색 결과에서 진짜 이미지를 우선시하도록 설계됨.
     * AI 생성 이미지의 순위 하락
       기본적으로, Kagi 이미지 검색은 AI 생성 콘텐츠 비율이 높은 웹사이트의 이미지를 순위 하락시킴.
     * AI 생성 이미지 레이블링
       순위 하락 외에도, AI 이미지 레이블링 시스템을 구현하여, AI 생성 콘텐츠일 가능성이 높은 썸네일에 작은 배지나 아이콘을 추가함. 이를 통해 사용자는 AI 이미지를 빠르게 식별할 수 있음.
     * AI 생성 이미지 필터링
       AI 이미지 필터를 사용하여 AI 생성 이미지가 있는 웹사이트를 검색 결과에서 완전히 제외할 수 있음.
     * 사용자 제어: 이미지 검색 결과에서 웹사이트 차단
       현재 AI 생성 이미지를 자동으로 정확하게 식별할 수 있는 신뢰할 만한 방법이 없기 때문에, 이 기능은 개별 이미지를 분석하기보다는 웹사이트의 평판에 의존함. 따라서 일부 AI 생성 콘텐츠가 여전히 결과에 나타날 수 있음.
       AI나 저품질 이미지를 포함한 웹사이트를 발견하면, 검색 개인화 기능을 사용하여 검색 결과에서 해당 웹사이트의 순위를 낮추거나 완전히 차단할 수 있음. 이미지 검색 결과에서 방패 아이콘을 클릭하여 웹 검색 결과에서 이미 할 수 있는 것과 동일하게 수행할 수 있음.
     * AI 생성 이미지에 대한 Kagi의 접근 방식
       이 기능을 구현하고 기본적으로 활성화한 결정은 Kagi의 AI 통합 철학과 직접적인 사용자 피드백에 기반함. 이는 비교적 새로운 영역이므로 탐지가 100% 신뢰할 수 있다고 기대하지 말아야 함. Kagi는 앞으로 이를 개선하기 위해 더 많은 노력을 기울일 예정이며, 피드백을 통해 Kagi를 개선하는 데 도움을 줄 것을 요청함.

GN⁺의 정리

     * Kagi의 AI 이미지 필터 기능은 사용자가 검색 결과에서 진짜 이미지를 더 잘 찾을 수 있도록 도와줌.
     * AI 생성 이미지의 증가로 인해 사용자들이 겪는 혼란을 줄이기 위한 기능임.
     * AI 이미지 필터는 웹사이트의 평판을 기반으로 하여 AI 생성 콘텐츠를 식별하며, 사용자 피드백을 통해 지속적으로 개선될 예정임.
     * 유사한 기능을 제공하는 다른 검색 엔진으로는 DuckDuckGo가 있음.

        Hacker News 의견

     * Kagi로 전환하지 않은 사용자들을 위해 AI 이미지 사이트를 차단하는 uBlacklist 피드가 있음
          + 추가적으로 AI 이미지에 전적으로 헌신하지 않지만 많은 비율을 차지하는 사이트도 차단하는 ""핵심"" 피드가 있음
     * Kagi의 이미지 검색 기능이 가장 약한 부분임
          + 많은 검색 결과가 관련성이 낮고 필터가 제대로 적용되지 않음
          + Kagi의 이미지 검색이 부족하여 Google이나 다른 옵션을 사용하게 됨
     * AI 대 AI의 또 다른 전선이 흥미로움
          + Kagi 고객들에게 전반적으로 호평받을 것 같음
          + 오탐지에 대한 우려가 있지만, 다른 상황에 비해 위험이 낮음
     * ""baby peacock""을 검색하지 말라는 의견이 있음
          + AI 필터가 AI 생성 사진을 다루는 기사에 포함된 이미지를 제대로 걸러내지 못함
     * ""baby cat"" 검색 예제를 시도했을 때 AI 생성 고양이 이미지가 나타났음
          + AI 이미지를 포함하도록 선택하면 사라지고, 제외하도록 선택하면 다시 나타나는 버그가 있음
     * Kagi를 1년 이상 사용 중이며 만족하고 있음
          + 100% 정확하지 않아도 저품질 콘텐츠를 낮게 평가하는 것이 중요함
     * Kagi의 기능이 흥미롭지만, 다른 검색 엔진과 비교해 큰 차이를 느끼지 못함
          + 다른 Kagi 사용자들이 긍정적인 경험을 하는 이유가 궁금함
     * Mojeek이 Kagi의 유기적 결과를 어느 정도 지원하고 있음
          + Kagi가 HN에서 많은 호평을 받고 있음
     * Kagi를 사용하며 만족하고 있음
          + 감시, 심리적 중독, 조작 경제를 지원하지 않기를 바람
          + AI와 비AI 콘텐츠의 구분이 얼마나 지속될지 궁금함
     * Kagi에 ""고정된"" 선호 설정을 원함
          + 주로 Reddit 검색을 하기 때문에 지난 1년간의 결과와 포럼을 선택하고 싶음
"
"https://news.hada.io/topic?id=17333","책임 추궁책임 추궁

책임 회피 구조

     * 책임 회피 기계에서 Dan Davies는 조직이 ""책임 회피 구조""를 형성한다고 주장함. 이는 결정의 결과를 흡수하거나 모호하게 만들어 아무도 직접적으로 책임을 질 수 없게 만드는 구조임.
     * 예를 들어, 한 호텔 회사의 고위 관리자가 청소 인력을 줄이기로 결정하면, 이는 재무제표 상의 숫자를 개선할 수 있음. 그러나 고객이 체크인하려고 할 때 방이 준비되지 않았고, 직원은 언제 준비될지 알 수 없다고 함. 불만을 제기할 사람도 없고, 그 결정이 고객의 계획을 망쳤다는 것을 알릴 방법도 없음. 책임은 사라지고, 영원히 잃어버리게 됨.

  책임 회피 구조의 작동 방식

     * 책임 회피 구조가 작동하려면, 피드백을 차단해야 함. 즉, 결정의 영향을 받는 사람의 피드백이 시스템의 운영에 영향을 미치지 않도록 해야 함.
     * 건강 보험이 절차를 거부할 때, 항공사가 비행을 취소할 때, 정부 기관이 혜택을 받을 자격이 없다고 선언할 때, 투자자가 모든 회사에 AI를 앱에 통합하라고 지시할 때 등, 책임 회피 구조는 어디에나 존재함.
     * 이는 결정이 실제로 내려졌다는 가정 하에 성립됨. 또 다른 책임 회피 구조의 메커니즘은 결정 자체가 연쇄적으로 이어져 그 기원이 사라지는 방식임.

  책임의 의미

     * ""책임""이란 무엇인지 잠시 생각해볼 필요가 있음. Davies는 ""책임의 근본 법칙""을 제시함. 즉, 결정을 변경할 수 있는 정도가 바로 그 결정에 대한 책임을 질 수 있는 정도임.
     * Sidney Dekker의 책임 정의에 따르면, 책임은 ""어떤 일이 어떻게 발생했는지, 그 일이 발생하게 된 조건은 무엇인지, 당시 그 결정이 왜 좋은 것으로 보였는지""에 대한 설명임. 이는 더 나은 결정을 내리기 위한 학습의 전제 조건임.

  AI와의 비교

     * AI에 결정을 위임하는 것은 책임 회피 구조를 만드는 편리한 방법임. 그러나 기업이나 정부 등 어떤 규모의 조직도 이미 이러한 구조를 잘 형성하고 있음.
     * AI가 제공하는 책임 회피는 새로운 서비스가 아니라 확장된 것임. 이는 두려움을 덜어주지는 않지만, 유용한 단서를 제공할 수 있음. 기업을 책임지게 하려는 노력이 실패했다면, 알고리듬에 대해서도 성공할 가능성은 낮음. 새로운 방법이 필요함.

GN⁺의 정리

     * 이 글은 조직이 책임을 회피하는 구조를 어떻게 형성하는지에 대한 통찰을 제공함. 이는 특히 AI와 같은 기술이 책임 회피를 어떻게 확장할 수 있는지를 이해하는 데 유용함.
     * 책임 회피 구조는 결정을 내리는 사람과 그 결정의 영향을 받는 사람 간의 연결을 끊는 방식으로 작동함.
     * AI가 책임 회피를 더욱 용이하게 만들 수 있지만, 이는 새로운 현상이 아니라 기존의 문제를 확장한 것임.
     * 이 주제는 조직 내 책임 구조를 개선하고, 더 나은 결정을 내리기 위한 방법을 찾는 데 흥미로울 수 있음.
"
"https://news.hada.io/topic?id=17299","IdentityLogger로 CSGO 부정행위자 제압","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     IdentityLogger로 CSGO 부정행위자 제압

     * CSGO 서버 운영의 세계
          + InvexGaming이라는 호주 및 뉴질랜드 기반의 CSGO 커뮤니티 서버를 운영했음. 이 서버는 커뮤니티, 콘텐츠, 대회, 커스텀 게임 플러그인 덕분에 인기를 끌었음.
          + 서버 운영에는 커뮤니티 포럼과 서버 인프라 유지, 비용 관리, 콘텐츠 추가, VIP 시스템 자동화, 커스텀 플러그인 작성, 게임 버그 수정, DDOS 공격 방지, 규칙 위반 플레이어 처리 등의 작업이 포함됨.
          + 가장 번거로운 작업은 치터를 식별하고 차단하는 것임.
     * 고양이와 쥐의 게임
          + 게임에는 항상 치터가 존재하며, 서버 운영자는 다양한 기술을 사용하여 이들을 감지할 수 있음.
          + 서버 측 코드, Valve Anti-Cheat (VAC) 시스템, 커널 측 반치트 등을 활용할 수 있음.
          + 그러나 이러한 방법들은 모든 치트를 자동으로 감지할 수 없으며, 최후의 수단으로 CSGO 데모를 통해 수동으로 분석해야 함.
          + 치터를 잡으면 서버에서 영구적으로 차단해야 함. 그러나 치터들은 다시 치팅을 시도하며, 기술적으로 숙련된 플레이어는 차단을 회피할 수 있음.
     * 차단 회피의 기술
          + 차단 회피는 IP 주소와 Steam ID 같은 식별 정보를 변경하여 이루어짐.
          + 새로운 Steam ID나 IP 주소를 사용하면 차단을 회피할 수 있지만, 시스템은 이러한 변경을 감지하고 새로운 식별 정보를 기존 차단과 연관시킴.
          + VPN을 사용하여 IP 주소를 변경할 수 있지만, Steam ID가 차단된 경우 다시 차단됨.
          + 두 식별 정보를 동시에 변경하면 새로운 플레이어로 인식되어 차단을 회피할 수 있음.
     * IP 주소 지문 인식의 문제점
          + Steam ID는 플레이어를 고유하게 식별하지만, IP 주소는 그렇지 않음.
          + 형제나 대학 네트워크와 같은 공유 네트워크에서 문제가 발생할 수 있음.
          + 이러한 경우를 위해 예외 시스템을 구축했지만, 신뢰할 수 없는 네트워크에서는 플레이하지 말 것을 권장함.
     * IdentityLogger
          + 치터들은 게임에서 항상 문제를 일으키며, 2017년 초에는 차단 회피 문제가 심각해졌음.
          + Steam ID와 IP 주소를 동시에 변경하는 문제를 해결하기 위해 VGUI 브라우저를 활용하여 쿠키를 저장하는 방법을 고안함.
          + 이 쿠키는 게임을 종료하고 재시작해도 유지되며, 치터들이 쉽게 삭제할 수 없는 Steam 설치 디렉토리에 저장됨.
          + 이를 통해 추가적인 식별자인 Tracking ID를 생성하여 플레이어를 식별할 수 있게 됨.
     * 2017년의 대규모 차단 물결
          + 2017년 2월에 이 시스템을 모든 Invex Gaming CSGO 서버에 배포했으며, 많은 치터들이 차단됨.
          + 커뮤니티는 ""치팅하기 어려운"" 서버로 명성을 얻었으며, 치터와 관련된 보고가 크게 줄어듦.
          + 이 방법은 Valve가 VGUI 브라우저를 제거할 때까지 효과적으로 작동했으며, 이후 공개적으로 기술을 공유하고 오픈 소스로 플러그인을 제공했음.

GN⁺의 정리

     * 이 글은 CSGO 서버 운영 중 치터를 식별하고 차단하는 방법에 대한 흥미로운 사례를 다루고 있음.
     * VGUI 브라우저를 활용한 쿠키 기반 식별 방법은 창의적이고 효과적이었으며, 커뮤니티의 치터 문제를 크게 줄였음.
     * 이 방법은 Valve의 업데이트로 인해 더 이상 사용할 수 없지만, 게임 보안에 대한 새로운 접근 방식을 제시함.
     * 비슷한 기능을 가진 프로젝트로는 VAC 시스템이나 기타 반치트 소프트웨어가 있음.

        Hacker News 의견

     * UT2004에서 플레이어를 차단하는 방법으로 GUID 또는 IP를 사용함. 하지만 Epic이 게임을 포기하면서 키 생성기가 등장해 GUID 차단이 무용지물이 되었음. IP 차단은 VPN 사용으로 한계가 있음
          + 현재 가능한 해결책은 IP 차단과 VPN 차단을 결합해 알려진 VPN 서브넷을 방화벽에 추가하는 것과 특정 시스템 폴더 구조를 스캔하는 지문 인식 기법을 사용하는 것임
     * RFC5737 TEST-NET-2 주소를 사용한 것에 대해 작성자에게 찬사를 보냄
     * 큰 나라의 플레이어들은 작은 나라에서 존재하는 커뮤니티 감각을 종종 놓침. 적은 수의 서버에서 매일 게임을 하는 사람들을 알게 되면 대화와 즐거움이 더해짐
     * 서버 측에서만 작동하는 안티 치트 시스템은 경력에서 꼭 한번 다뤄보고 싶은 문제 영역임. 이런 대결 구도는 깊이 생각할수록 재미있음
     * 웹사이트가 다운되거나 느릴 때 기사를 읽고 싶다면 전체 페이지 스크린샷을 제공함
     * 치트 탐지가 아닌 반복적인 치터를 막는 것이 주제임. 치트 탐지는 특히 하드웨어 치트와 관련해 완전히 다른 문제임
          + 개인적으로 가장 효과적인 방법은 게임에 요금을 부과하는 것임
     * HTTPS로 암호화된 트래픽은 Wireshark 같은 도구로는 원시 토큰을 찾을 수 없음. 하지만 Fiddler나 Burp Suite 같은 도구로는 HTTPS를 쉽게 해독할 수 있음
     * 신뢰할 수 있는 서버 운영자와만 솔루션과 기술을 공유했음. VGUI 사용이 효과적이었으나 2018년경 웹 브라우저가 제거되어 아쉬웠음
     * 솔루션의 창의성과 효과를 존중함. 하지만 VGUI가 처음부터 없는 것이 더 나았음
          + 웹에서 이런 추적이 너무 만연해 있어 회피하는 것이 거의 불가능함. 논리적 오류를 이용해 더 나은 결과를 얻는 것이 매력적임
     * 차단된 IP에서 새로운 Steam ID를 차단하는 것은 너무 엄격함. 일부 ISP는 CG-NAT을 사용하거나 IP를 회전시켜 한 명의 악의적인 사용자가 많은 무고한 플레이어에게 피해를 줄 수 있음
"
"https://news.hada.io/topic?id=17284","Vortex - 고성능 Columnar 파일 포맷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Vortex - 고성능 Columnar 파일 포맷

     * ""The LLVM of columnar file formats""
     * 압축된 Apache Arrow 배열을 메모리, 디스크, 네트워크를 통해 다루기 위한 툴킷을 포함한 Columnar 형식 파일 포맷
     * Apache Parquet의 야심찬 후계자로, 100-200배 빠른 랜덤 액세스 읽기와 2-10배 빠른 스캔을 지원하면서도 zstd를 사용한 Parquet과 거의 동일한 압축률과 쓰기 처리량을 유지함
          + 매우 큰 테이블(수만개의 컬럼)과 GPU 상에서의 압축 해제도 지원
     * Vortex는 열 기반 파일 형식에 대해 Apache DataFusion이 쿼리 엔진에 대해 제공하는 것과 같은 기능을 하도록 설계됨
          + 즉, 높은 확장성, 매우 빠른 속도, 배터리 포함 기능이 특징

     [!주의] > 아직 활발히 개발 진행 중임

     * 주요 기능:
          + Logical Types - 물리적 레이아웃에 대해 어떤 가정도 하지 않는 스키마 정의
          + Zero-Copy to Arrow - 정규화(canonicalized)된 Vortex 배열은 Apache Arrow 배열과 제로 카피 변환이 가능함
          + Extensible Encodings - 플러그인 방식의 물리적 레이아웃 집합. Arrow 호환 인코딩 외에도 최신 인코딩(FastLanes, ALP, FSST 등)을 확장으로 제공
          + Cascading Compression - 데이터를 여러 중첩된 인코딩으로 재귀적 압축 가능
          + Pluggable Compression Strategies - 내장 Compressor는 BtrBlocks 기반이지만, 다른 전략도 쉽게 사용 가능
          + Compute - 인코딩된 데이터에서 동작하는 기본 계산 커널(예: 필터 푸시다운)
          + Statistics - 각 배열은 읽기 시점에 선택적으로 계산되는 요약 통계를 가지고 있음. 계산 커널과 압축기에서 사용 가능
          + Serialization - IPC와 파일 포맷을 위한 배열의 제로 카피 직렬화
          + Columnar File Format (진행 중) - Vortex serde 라이브러리를 사용해 압축된 배열 데이터를 저장하는 현대적 파일 포맷. 랜덤 액세스 읽기와 매우 빠른 스캔에 최적화됨. Apache Parquet의 후속을 목표로 함

  개요: Logical vs Physical

     * Vortex의 핵심 설계 원칙 중 하나는 논리적 관심사와 물리적 관심사의 엄격한 분리임
          + 예: Vortex 배열은 논리적 데이터 타입(스칼라 요소의 타입)과 물리적 인코딩(배열 자체의 타입)으로 정의됨
     * 내장 인코딩은 주로 Apache Arrow 인메모리 포맷을 모델링하기 위해 설계됨. 또한 다른 인코딩의 유용한 구성 요소로 사용되는 내장 인코딩(sparse, chunked)도 있음. 확장 인코딩은 주로 길이 인코딩이나 사전 인코딩 같은 압축된 인메모리 배열을 모델링하기 위한 것임
     * vortex-serde는 Vortex 배열의 저수준 물리적 세부 사항을 다루도록 설계됨. 어떤 인코딩을 사용할지나 데이터를 어떻게 논리적으로 청크화할지는 Compressor 구현에 맡겨짐
     * (개발 중인) Vortex 파일 포맷의 독특한 속성 중 하나는 데이터의 물리적 레이아웃을 파일의 푸터에 인코딩한다는 점임. 이를 통해 파일 포맷은 효과적으로 자기 기술적이 되고, 파일 포맷 명세의 호환성을 깨지 않고도 진화할 수 있음
     * WASM 디코더를 파일 자체에 선택적으로 포함시켜 전방 호환성을 지원하도록 설계됨. 이는 다른 columnar 파일 포맷을 괴롭혀 온 빠른 경화를 피하는 데 도움이 될 것임

  구성 요소

    Logical Types

     * Vortex 타입 시스템은 아직 변화 중임. 현재의 논리적 타입:
          + Null
          + Bool
          + Integer(8, 16, 32, 64)
          + Float(16, b16, 32, 64)
          + Binary
          + UTF8
          + Struct
          + List (부분 구현됨)
          + Date/Time/DateTime/Duration (확장 타입으로 구현됨)
          + TODO: Decimal, FixedList, Tensor, Union

    Canonical/Flat Encodings

     * Vortex는 Apache Arrow와 제로 카피가 되도록 설계된 ""Flat"" 인코딩들을 기본으로 포함하고 있음. 이들은 각 논리적 데이터 타입의 정규 표현임. 현재 지원되는 정규 인코딩:
          + Null
          + Bool
          + Primitive (Integer, Float)
          + Struct
          + VarBin (Binary, UTF8)
          + VarBinView (Binary, UTF8)
          + Extension
          + 더 많은 인코딩이 추가될 예정

    Compressed Encodings

     * Vortex는 고도로 데이터 병렬적이고 벡터화된 인코딩 집합을 포함함. 이 인코딩들은 각각 압축된 인메모리 배열 구현에 대응되어, 압축 해제를 지연시킬 수 있음. 현재 다음과 같은 인코딩이 있음:
          + Adaptive Lossless Floating Point (ALP)
          + BitPacked (FastLanes)
          + Constant
          + Chunked
          + Delta (FastLanes)
          + Dictionary
          + Fast Static Symbol Table (FSST)
          + Frame-of-Reference
          + Run-end Encoding
          + RoaringUInt
          + RoaringBool
          + Sparse
          + ZigZag
          + 더 많은 인코딩이 추가될 예정

    Compression

     * Vortex의 기본 압축 전략은 BtrBlocks 논문을 기반으로 함
          + 대략적으로, 각 데이터 청크에 대해 최소 ~1%의 데이터 샘플을 취함
          + 그런 다음 경량 인코딩 집합으로 (재귀적) 압축을 시도함
          + 그 중 가장 성능이 좋은 인코딩 조합을 선택해 전체 청크를 인코딩함
          + 이는 매우 비용이 클 것처럼 들리지만, 청크에 대한 기본 통계만 있으면 많은 인코딩을 저렴하게 가지치기하여 검색 공간이 폭발적으로 커지지 않도록 할 수 있음

    Compute

     * Vortex는 각 인코딩이 계산 함수의 구현을 특수화하여 가능한 한 압축 해제를 피할 수 있는 기능을 제공함. 예를 들어, 사전 인코딩된 UTF8 배열을 필터링하는 것은 먼저 사전을 필터링하는 것이 더 저렴함
     * Vortex는 효율적인 스캔과 푸시다운에 필요할 수 있는 기본 계산 연산을 구현할 뿐, 완전한 계산 엔진이 되려고 하지는 않음

    Statistics

     * Vortex 배열은 지연 계산된 요약 통계를 가지고 있음
     * 다른 배열 라이브러리와 달리, 이 통계는 Parquet 같은 디스크 포맷에서 채워져서 계산 엔진까지 그대로 보존될 수 있음
     * 통계는 계산 커널과 압축기에서 사용 가능함
     * 현재의 통계:
          + BitWidthFreq
          + TrailingZeroFreq
          + IsConstant
          + IsSorted
          + IsStrictSorted
          + Max
          + Min
          + RunCount
          + TrueCount
          + NullCount

    Serialization / Deserialization (Serde)

     * vortex-serde 구현의 목표:
          + 제로 카피와 제로 힙 할당으로 스캔(열 프로젝션 + 행 필터링) 지원
          + 상수 시간 또는 준상수 시간으로 랜덤 액세스 지원
          + 정렬 여부 같은 통계 정보를 소비자에게 전달
          + 프로세스 간에 배열을 보내기 위한 IPC 포맷 제공
          + 디스크나 오브젝트 스토리지에 columnar 데이터를 저장하기 위한 확장 가능하고 최고 수준의 파일 포맷 제공

  Apache Arrow와의 통합

     * Apache Arrow는 columnar 배열 데이터에 대한 상호운용의 사실상 표준임. 당연히 Vortex는 Apache Arrow와 최대한 호환되도록 설계됨
     * 모든 Arrow 배열은 제로 카피로 Vortex 배열로 변환될 수 있음. Arrow 배열에서 생성된 Vortex 배열은 다시 제로 카피로 Arrow로 변환될 수 있음
     * Vortex와 Arrow는 서로 다르지만 상호 보완적인 목표를 가지고 있다는 점에 유의해야 함
     * Vortex는 논리적 타입과 물리적 인코딩을 명시적으로 구분하여 Arrow와 차별화됨. 이를 통해 Vortex는 더 복잡한 배열을 모델링하면서도 논리적 인터페이스를 노출할 수 있음
          + 예: Vortex는 첫 번째 청크가 run-length 인코딩되고 두 번째 청크가 사전 인코딩된 UTF8 ChunkedArray를 모델링할 수 있음. Arrow에서는 RunLengthArray와 DictionaryArray가 호환되지 않는 별개의 타입이므로 이런 식으로 결합될 수 없음
"
"https://news.hada.io/topic?id=17225","CRLF는 더 이상 사용되지 않으며 폐지되어야 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     CRLF는 더 이상 사용되지 않으며 폐지되어야 합니다

    캐리지 리턴과 라인 피드의 정의

     * 캐리지 리턴 (CR): 커서를 같은 행의 왼쪽 여백으로 이동시킴
     * 라인 피드 (LF): 커서를 한 행 아래로 이동시키고, 이전 행들을 위로 스크롤함
     * 뉴라인 (NL): 커서를 한 행 아래로 이동시키고 왼쪽 여백으로 이동시킴

    관찰

     * CR과 NL은 유용한 제어 문자임. NL은 가장 일반적인 작업으로, 텍스트의 새로운 행을 왼쪽 여백에서 시작함
     * LF는 실질적으로 쓸모없음. 아무도 행의 중간에서 다음 행으로 내려가서 같은 열에서 계속 쓰고 싶어하지 않음
     * LF는 약 70년 전 기계식 전신 타자기 시대에 기원함

    역사적 배경

     * 전신 타자기는 5초당 약 5개의 문자를 인쇄함
     * CRLF의 전통은 1950년대 전신 타자기의 기계적 한계에서 비롯됨
     * Multix와 Unix 시대에 CRLF를 NL로 사용하는 것이 비효율적이라는 인식이 확산됨

    현대의 상황

     * 오늘날 CR은 U+000d로, LF와 NL은 U+000a로 표현됨
     * 대부분의 현대 기계는 U+000a를 NL로만 사용함
     * 일부 프로토콜은 여전히 CRLF를 요구하지만, 대부분의 소프트웨어는 단일 NL을 수용함

    행동 촉구

     * U+000a 코드 포인트의 이름을 ""라인 피드"" 대신 ""뉴라인""으로 변경
     * 불필요한 CR 전송 중단
     * CRLF를 요구하는 프로토콜에 대해 NL만 전송
     * CR 없이 NL을 받으면 오류를 발생시키는 소프트웨어 수정

    요약 및 저자

     * CRLF의 종말은 오래전부터 필요했음. 이 구시대적 유물을 없애기 위해 함께 노력해야 함
     * 저자: D. Richard Hipp, SQLite의 창시자

    # GN⁺의 정리

     * 이 글은 CRLF의 역사적 배경과 현대적 비효율성을 설명하며, 이를 폐지할 것을 촉구함
     * CRLF는 기계적 한계에서 비롯된 전통으로, 현대에는 불필요한 복잡성을 초래함
     * 이 주제는 프로그래머와 소프트웨어 개발자에게 특히 유용할 수 있으며, 효율적인 데이터 전송을 위해 중요함
     * 비슷한 기능을 가진 다른 프로토콜이나 시스템을 사용할 때도 CRLF의 필요성을 재고할 필요가 있음

   라인피드 가끔 쓰는뎅....

   참 과격하네요 ㅎㄷㄷ

   10월 14일 수정에 따르면 변경 제안을 철회한다고 합니다.

   단순히 한 시스템만 바꾸는 게 아니고 프로토콜과 영향있는 모든 시스템을 점진적으로 바꿔야 하는 일인데 제가 보기엔 필자가 신중하지 못했던 것 같네요

   없애는 비용보다 없애서 얻는 이익이 크다고 생각한걸까요?

   CR+LF has a long history...
     * https://www.revk.uk/2022/02/crlf-has-long-history.html

   오.. 이런 이유가..

   CRLF가 잘못 정의된 사양도 아니고, 당대의 하드웨어 환경을 반영한 것인데...
   하위 호환성은 잊어버리고, 오직 이 순간만 생각하는 것 같아요.
   하드웨어 사양이 바뀔 때마다 프로토콜을 갈아엎어야 할까요?

   없애는것에 찬성도 반대도 안하지만.

   밀레니엄버그가 생각난건 왜일까요?

        Hacker News 의견

     * 기존 프로토콜을 NL로 업데이트하는 것은 잠재적 버그를 초래할 수 있으며, HTTP/1.1은 이미 HTTP/2로 대체되었음
          + 새로운 프로토콜에서는 CRLF를 요구하지 않는 것이 합리적이지만, 기존 프로토콜을 업데이트할 필요는 없다고 주장함
     * CRLF를 준수하지 않는 것은 의도적으로 버그를 도입하는 것과 같음
          + SQLite의 HTTP 서버가 \r\n 대신 \n을 사용하도록 업데이트되었으나, 이는 Zig의 HTTP 클라이언트와의 호환성을 깨뜨림
     * CRLF를 후손들이 걱정할 필요가 없도록 하자는 의견
          + .gitattribute 파일 사용법을 가르치고, 바이트 순서 표시(Byte Order Mark)를 싫어하도록 교육해야 한다고 주장함
     * Unix의 비표준 줄 끝맺음 선택은 실수였으며, 이는 수십 년간의 호환성 문제를 초래했음
          + CRLF는 터미널 API의 두 가지 다른 부분이며, 많은 프로그램이 CR과 LF의 올바른 작동에 의존함
     * CRLF는 표준에서 가장 덜 중요한 요소 중 하나임
          + 표준을 깨는 것은 새로운 시도이며, 개인적으로는 낯선 태도임
     * SMTP는 메시지 종료 시퀀스가 CR LF . CR LF임을 명확히 하고 있으며, LF . LF를 인식하는 구현도 존재함
          + 원래 SMTP 규칙이 더 이상 중요하지 않을 수도 있음
     * CRLF는 많은 장치에 위험을 초래할 수 있으며, 예외를 줄여야 함
     * 줄 끝맺음을 혼합했을 때 발생한 문제에 대한 언급이 없음
          + NL이라는 문자는 존재하지 않으며, 모든 키보드의 ""ENTER"" 키는 CR을 전송함
          + 현재 방식이 잘 작동하고 있음
"
"https://news.hada.io/topic?id=17233","디지털 세계에서 티베트어의 일류 시민화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         디지털 세계에서 티베트어의 일류 시민화

  티베트어를 디지털 세계의 일류 시민으로 만들기 위한 기술 혁신

     * BDRC는 티베트어를 디지털 세계에서 일류 시민으로 만들기 위한 기술 혁신을 추진하고 있음. 최근 LibreOffice가 티베트어의 중요한 특징인 매우 긴 단락을 지원하게 된 것은 큰 성과임.
     * 티베트인들은 8세기 불교 도입 이후 글쓰기, 혁신, 기술에 많은 에너지를 투자해 왔음. 티베트 문자는 불교 경전을 산스크리트어와 중국어에서 티베트어로 번역하기 위해 발명되었음.
     * 14세기에는 목판 인쇄 기술을 채택하여 티베트어로 번역된 경전과 히말라야 작가들이 직접 쓴 불교 텍스트를 대량 생산함.
     * 최근에는 티베트어 컴퓨터 폰트의 개발이 디지털 세계에서 티베트어의 진화에 큰 도약이 되었음. 특히 티베트어가 전 세계 문자 체계의 컴퓨터 폰트 코드를 표준화한 유니코드 표준에 포함된 것이 주목할 만함.
     * 그러나 티베트어는 여전히 모든 도구나 응용 프로그램에서 지원되지 않는 중요한 특징이 있음. 그 중 하나는 매우 긴 단락임. 티베트어 텍스트는 유럽 언어와 달리 단락의 개념이 없으며, 긴 연속 텍스트로 처리되어야 함.
     * 일반적인 워드 프로세싱 소프트웨어는 영어 텍스트를 염두에 두고 설계되어 상대적으로 짧은 단락을 지원함. 그러나 티베트어는 단락이 거의 무한하고 공백이 거의 없기 때문에 이러한 소프트웨어는 티베트어 텍스트를 열 때 성능이 매우 저하됨.
     * LibreOffice는 무료로 제공되는 성숙하고 안정적인 오픈 소스 워드 프로세서 중 하나로, 티베트 연구와 티베트 커뮤니티에 중요함. 상업용 소프트웨어는 비싸고 아시아의 많은 지역에서 불법 복제된 버전이 사용됨.
     * 2015년 BDRC의 CTO인 Elie Roux가 LibreOffice에 이 문제를 보고했으나, 코드 개입은 큰 프로젝트였음. 그러나 최근 개발자 Jonathan Clark가 이 문제를 해결함. Longchenpa의 Yishindzö 같은 긴 텍스트가 이제 빠르게 열리고 편집 가능해짐.
     * BDRC는 이 혁신에 작은 기여를 했으며, Jonathan의 훌륭한 작업과 티베트어의 오픈 소스 출판 도구 강화에 기뻐함.
     * 매우 긴 단락 지원은 2024년 9월 27일에 출시된 LibreOffice 24.8.2에 통합되었음. 티베트어 편집에 대한 의견을 보내달라고 권장함.

  GN⁺의 정리

     * 이 기사는 티베트어를 디지털 세계에서 더 잘 지원하기 위한 기술 혁신에 관한 것임. LibreOffice의 업데이트는 티베트어 텍스트의 긴 단락을 처리할 수 있게 하여 큰 진전을 이룸.
     * 티베트어의 디지털 통합은 문화 보존과 연구에 중요한 역할을 하며, 오픈 소스 소프트웨어의 발전은 비용 문제를 해결하는 데 도움을 줌.
     * 이 기사는 티베트어와 같은 소수 언어의 디지털 지원이 왜 중요한지를 보여주며, 다른 언어의 디지털 통합을 위한 모델이 될 수 있음.
     * 유사한 기능을 가진 다른 프로젝트로는 Google Docs와 Microsoft Word가 있음.

        Hacker News 의견

     * Jim Woolsey는 티베트어 디지털화에 중요한 역할을 한 초기 컴퓨터 해커였음. 그의 헌신적인 작업은 많은 사람들에게 감명을 줌
     * 문서의 단락이 짧다는 것은 프로그래머들이 텍스트에 대해 잘못 알고 있는 것 중 하나임
     * 긴 단락을 다루는 것은 워드 프로세서에게 어려운 일일 수 있음. 하지만 작가와 출판사들은 이를 관리하는 방법을 알고 있을 것임
     * 티베트어 발음을 가르치는 오래된 HyperCard 스택이 있음
     * 벵골어와 아삼어는 티베트 문자를 사용함. 티베트어와의 유사성에 대한 질문이 있음
     * 언어는 배우기 쉽거나 복잡한 개념을 전달할 수 있는 도구임. 티베트어는 어느 쪽에 속하는지 궁금해하는 의견이 있음
     * 긴 단락을 지원하는 방법에 대한 세부 사항을 알고 싶어하는 의견이 있음
     * 티베트인의 혁신은 ""The Nine Billion Names of God""에서도 언급됨
     * Eyal은 LibreOffice 프로젝트의 자원봉사자로, 티베트어에 대한 성능 개선을 구현한 Jonathan Clark에게 감사를 표함
          + LibreOffice에서 발견되는 대부분의 버그는 일반적이며, 특정 스크립트에 국한되지 않음
          + 덜 사용되는 스크립트, 예를 들어 티베트어나 몽골어에 대한 문제도 존재함
          + 사용자가 적어 버그가 적게 보고될 수도 있음
          + 개발자 시간이 확보되면 이러한 문제를 해결하려는 관심이 있음
     * LibreOffice를 사용하여 버그를 발견하면 BugZilla에 보고할 것을 권장함
     * The Document Foundation을 재정적으로 지원할 것을 고려해달라는 요청이 있음
          + LibreOffice는 많은 사용자를 보유한 대규모 FOSS 프로젝트임
          + 대기업의 투자 없이 개인 기부로 운영됨

   한국어에 띄어쓰기 없었으면 힘들뻔했네요.
"
"https://news.hada.io/topic?id=17242","이미지 생성 모델 FLUX는 빠르고 오픈 소스입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      이미지 생성 모델 FLUX는 빠르고 오픈 소스입니다

     * FLUX는 Replicate에서 더 빠르게 작동하며, 최적화된 코드를 오픈 소스로 공개하여 누구나 이를 확인하고 개선할 수 있음
     * 속도 향상의 비결
          + FLUX 모델은 Black Forest Labs와 협력하여 관리하며, 두 가지 주요 최적화 작업을 수행함
               o 모델 최적화: torch.compile과 CuDNN 주의 커널을 사용하여 성능을 향상시킴
               o 새로운 동기 HTTP API 추가로 이미지 모델의 속도를 크게 개선함
          + flux-fp8-api의 양자화는 출력에 약간의 변화를 주지만 품질에 큰 영향을 미치지 않음
          + 최적화 방법을 투명하게 공개하며, 사용자가 최적화를 비활성화할 수 있도록 함
     * 오픈 소스의 속도
          + 오픈 소스 모델은 기본적으로 느린 경우가 많으며, 모델 제공자들이 이를 최적화하여 독점 API로 제공하는 경우가 많음
          + FLUX의 모든 개선 사항을 오픈 소스로 공개하여 커뮤니티와 협력하여 더욱 빠른 모델을 개발하고자 함
     * FLUX의 활용
          + Replicate에서 FLUX를 실행하는 것 외에도 다양한 활용 가능
               o 사용자 데이터로 FLUX를 미세 조정 가능
               o 코드를 수정하여 맞춤형 버전 배포 가능
               o 새로운 플레이그라운드에서 모델을 시도하고 출력 비교 가능

GN⁺의 정리

     * FLUX는 Replicate에서의 성능 향상과 오픈 소스화를 통해 누구나 최적화된 모델을 활용할 수 있는 기회를 제공함
     * 오픈 소스의 속도 문제를 해결하고자 하는 노력은 커뮤니티와의 협력을 통해 더욱 빠른 모델 개발을 가능하게 함
     * FLUX의 다양한 활용 가능성은 사용자에게 맞춤형 솔루션을 제공할 수 있는 기회를 제공함
     * 유사한 기능을 가진 다른 프로젝트로는 TensorFlow와 PyTorch가 있음

        Hacker News 의견

     * 텍스트에서 이미지로 변환하는 모델이 비효율적이라고 느끼며, 이를 여러 단계로 나누어 처리하는 것이 더 나을 것이라는 의견이 있음. 각 단계가 독립적으로 훈련될 수 있어 모듈화가 가능하고, 이미지 편집이 더 쉬워질 것이라고 생각함
          + 예를 들어, ""객체 x가 객체 y 옆에 있고, 그 위에 텍스트 foo가 있는"" 이미지를 생성하는 것이 더 쉬워질 것이라고 설명함
          + 최종 렌더링 모델이 프롬프트와 별개로 존재하여 예술 스타일이나 사실성 수준을 조정할 수 있을 것이라고 언급함
     * 비상업적 소프트웨어는 오픈 소스가 아님을 강조하며, 원 저작자가 유지보수를 중단하면 다른 사람이 계속할 수 없거나 무료로 일해야 한다고 설명함
          + 오픈 소스는 원 저작자가 작업을 중단했을 때 모든 사람이 개발을 계속할 수 있는 라이선스를 제공함
          + FLUX.1 [schnell]만 오픈 소스(Apache2)이며, FLUX.1 [dev]는 비상업적임
     * FLUX.schnell을 쉽게 사용하려면 Pollinations URL에 프롬프트를 입력하라고 제안함
          + FLUX의 속도가 놀랍다고 언급하며, 세 개의 L40S GPU만으로 30분마다 8000개의 이미지를 생성한다고 설명함
     * FLUX를 사용하여 Substack에 사용할 흰색 배경의 이미지를 생성하는 것을 좋아한다고 함
          + 텍스트와 함께 시각적으로 무언가를 전달할 수 있어 좋다고 설명함
     * FLUX가 로컬 호스팅 생성 시스템 중 프롬프트 준수 측면에서 선두주자이지만, 얕은 심도가 항상 나타나는 것이 불편하다고 언급함
     * Midjourney 구독을 취소했으며, Replicate와 Ideogram을 고려 중이라고 밝힘
     * FLUX 1.1의 훈련 데이터에 대해 궁금해하며, 생성된 이미지가 개인적인 사진처럼 보인다고 설명함
          + 훈련 데이터가 공개된 Facebook 게시물, Snapchat, Vkontakte 등에서 가져온 것인지 의문을 제기함
     * FLUX 1.1 pro 모델이 이전 오픈 모델과 크게 다른 훈련 데이터를 사용하지 않았을 것이라고 생각함
     * FLUX의 비교 페이지를 언급하며, 속도 버전이 원래 모델과 완전히 다른 이미지를 보여준다고 설명함
     * Meta의 모델에 대한 오픈 소스 논란을 언급하며, FLUX의 경우 FLUX schnell만 오픈 소스라고 설명함
          + Meta의 Llama 모델이 더 관대한 라이선스를 가지고 있으며, FLUX schnell보다 조정하기 쉽다고 언급함
     * 오픈 소스 커뮤니티가 OpenFLUX와 같은 프로젝트를 지지해야 한다고 주장함
     * 손이 여전히 이상하게 보이는 문제를 해결하지 못한 것에 대해 의문을 제기함
"
"https://news.hada.io/topic?id=17213","LLM의 수학적 추론 한계 이해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           LLM의 수학적 추론 한계 이해

GSM-Symbolic: 대형 언어 모델의 수학적 추론 한계 이해

     * 최근 대형 언어 모델(LLM)의 발전은 수학에서의 형식적 추론 능력에 대한 관심을 불러일으킴.
     * GSM8K 벤치마크는 초등학교 수준의 질문에 대한 모델의 수학적 추론을 평가하는 데 널리 사용됨.
     * LLM의 GSM8K 성능은 최근 몇 년간 크게 향상되었으나, 실제로 수학적 추론 능력이 발전했는지는 불분명함.
     * 이러한 문제를 해결하기 위해 여러 최신 개방형 및 폐쇄형 모델에 대한 대규모 연구를 수행함.
     * 기존 평가의 한계를 극복하기 위해, 다양한 질문 생성을 가능하게 하는 기호적 템플릿으로 구성된 개선된 벤치마크인 GSM-Symbolic을 도입함.
     * GSM-Symbolic은 더 통제된 평가를 가능하게 하여, 추론 능력을 측정하는 데 있어 더 신뢰할 수 있는 지표를 제공함.
     * 연구 결과, LLM은 동일한 질문의 다른 구현에 응답할 때 눈에 띄는 변동성을 보임.
     * 특히, GSM-Symbolic 벤치마크에서 질문의 숫자 값만 변경해도 모든 모델의 성능이 저하됨.
     * 또한, 이러한 모델의 수학적 추론의 취약성을 조사하고, 질문의 절 수가 증가할수록 성능이 크게 저하됨을 보여줌.
     * 이는 현재 LLM이 진정한 논리적 추론을 수행할 수 없고, 훈련 데이터에서 추론 단계를 복제하기 때문이라고 가정함.
     * 질문에 관련성이 있어 보이는 절을 하나 추가하면, 최종 답변에 필요한 추론 체인에 기여하지 않더라도 모든 최신 모델에서 최대 65%의 성능 저하가 발생함.

GN⁺의 정리

     * 이 연구는 대형 언어 모델의 수학적 추론 능력과 한계를 보다 세밀하게 이해할 수 있게 해줌.
     * GSM-Symbolic 벤치마크는 다양한 질문을 통해 모델의 추론 능력을 더 정확하게 평가할 수 있는 도구를 제공함.
     * 이 연구는 LLM이 실제 논리적 추론보다는 훈련 데이터의 추론 단계를 복제하는 경향이 있음을 보여줌.
     * 수학적 추론 능력을 평가하는 다른 벤치마크로는 MATH, MATHQA 등이 추천됨.

        Hacker News 의견

     * LLM의 성능 저하는 대학 신입생의 문제 해결 능력과 유사함. 간단한 문제는 잘 해결하지만 여러 단계를 연결해야 하는 문제에서는 정확도가 떨어짐. 이는 LLM이 고등학교 졸업생 수준의 논리적 사고를 할 수 있음을 의미함
          + 예를 들어, 불필요한 정보가 포함된 문제에서 LLM의 성능이 크게 저하됨. 이는 인간도 마찬가지로 불필요한 정보를 포함한 문제를 읽을 때 발생할 수 있는 상황임
     * 수학적 추론의 취약성을 연구한 결과, 질문의 절이 많아질수록 성능이 저하됨. 이는 LLM이 진정한 논리적 추론을 할 수 없기 때문일 수 있음
          + 토큰화 과정에서 간단한 산술 문제의 예측이 무의미해짐. 이는 도구 사용의 필요성을 시사하지만, 진정한 논리적 추론에는 부정적임
     * ""Alice in Wonderland"" 문제와 유사한 결과가 나타남. 이는 패턴 매칭과 추론 사이의 중간 상태에 있는 모델의 문제일 수 있음
          + 수학과 추론 관련 LLM 벤치마크 결과를 신뢰할 수 없음을 시사함. 문제의 문자, 숫자, 문장 구조가 결과에 큰 영향을 미침
     * GSM-Symbolic 벤치마크에서 숫자 값만 변경해도 모든 모델의 성능이 저하됨. 이는 과적합의 증거로, LLM이 수학적 추론을 학습하는 데 근본적인 한계가 있음을 나타냄
     * LLM의 ""사고"" 방식은 대부분의 학교 과정을 통과할 수 있는 수준임. 그러나 패턴 매칭에 의존하지 않는 문제를 출제하는 교사가 있는 경우에는 어려움을 겪을 수 있음
     * 잘 알려진 논리 퍼즐에서 LLM은 특정 요소를 변경하면 문제를 해결하지 못함. 이는 LLM이 형식적 추론을 할 수 없음을 보여줌
     * LLM은 형식적 추론을 할 수 없지만, 훈련 데이터에서 ""추론 단계""를 적용하여 많은 논리적 문제를 해결할 수 있음. 이는 흥미로운 이분법임
     * 인간과 동물의 수학적 추론의 한계를 보여줄 수 있는 연구가 흥미로울 것임. 인간이 이해할 수 없는 아이디어가 있을 수 있으며, 이를 통해 인간이 할 수 없는 방식으로 추론할 수 있는 기계를 만들 수 있을지 궁금함
"
"https://news.hada.io/topic?id=17236","Huly – 오픈소스 프로젝트 관리 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Huly – 오픈소스 프로젝트 관리 플랫폼

     * CRM 시스템과 같은 비즈니스 애플리케이션 개발을 가속화하기 위해 설계된 강력한 프레임워크
          + Linear, Jira, Slack, Notion, Motion 등의 올인원 대체제
     * Chat, Project Management, CRM, HRM, ATS와 같은 여러 애플리케이션이 포함되어 있으며, Huly와 TraceX를 포함한 다양한 팀이 이 플랫폼을 기반으로 제품을 개발 중
     * huly-selfhost 별도 저장소를 사용하여 Huly를 쉽게 셀프 호스팅할 수 있음(Docker+Nginx)
     * GitHub 양방향 동기화 지원
     * 멀티 저장소 지원(마일스톤 마이그레이션 가능)

        Hacker News 의견

     * 애플리케이션을 자체 호스팅할 때 여러 오픈 소스 서버와 서비스를 운영해야 하는 어려움이 있음. 이는 전형적인 SaaS 백엔드 아키텍처와는 다른 트레이드오프를 요구함
          + SQLite와 로컬 디스크 스토리지를 사용하여 운영 및 확장할 구성 요소를 최소화하고 있음
          + Huly는 훌륭한 제품으로 보이지만 자체 호스팅은 고려하지 않음
     * 러시아어 배경을 가진 사람으로서 프로젝트 이름이 웃김
          + ""хули""는 러시아어로 ""뭐야"" 또는 더 강한 표현으로 ""뭐야 이거""라는 뜻임
          + 이름이 PizData 프로젝트를 떠올리게 함
     * 프로젝트 관리 소프트웨어는 매우 경쟁이 치열한 분야임
          + 작은 개선이라도 큰 이익을 가져올 수 있음
          + Huly가 성공하길 바람
          + O365와의 통합이 MS Teams의 인기 요인 중 하나임
     * 이름 선택이 흥미로움. 러시아어로 욕설임
     * 가격이 매우 흥미로움
          + 회사가 Jira & Confluence와 Slack에 각각 $20k를 지불하는데, 이 플랫폼은 $3600/년으로 대체 가능하다고 주장함
          + 오픈 소스라는 점에서 기대됨
     * Gavin Belson이 Hooli에 다시 합류한다는 소식에 놀람
     * 여러 앱을 대체하려는 시도가 현명하지 않다고 생각함
          + Linear, Jira, Notion은 가능할지 몰라도 Slack과 경쟁하는 것은 어려움
          + JetBrains Space의 사례를 언급하며, 채팅 기능을 제거하고 Jira + Notion 대체에 집중해야 한다고 제안함
     * Hooli와 Gavin Belson을 떠올린 사람이 자신뿐만이 아닐 것이라고 생각함
     * 무의미한 애니메이션에 반대하지만, 가격 페이지의 애니메이션은 멋짐
          + 계획이 관대하고 작은 팀에 적합함
          + 첫 인상은 좋음
     * Linear를 ATS와 CRM으로 사용 중이며, 프로젝트 관리는 주로 사람/회사, 작업/거래, 파이프라인으로 구성됨
          + Linear는 유연성이 부족하여 적절한 후보 파이프라인을 정의하기 어려움
          + 작은 회사는 전용 솔루션이 필요하지 않으며, 더 가벼운 솔루션을 원함
          + Slack과 동시에 경쟁하는 것은 너무 야심차다고 생각함

   정말 좋은 서비스네요~ 좋은 정보 얻고 갑니다!
   한글만 지원되면 정말 좋겠네요. 직원들의 사용성을 위해서..
"
"https://news.hada.io/topic?id=17326","Linux CPU 스케줄러에서 "게으른 선점" 구현을 위한 긴 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Linux CPU 스케줄러에서 ""게으른 선점"" 구현을 위한 긴 여정

     * 커널의 CPU 스케줄러는 시스템 처리량과 응답 시간 간의 절충을 구현하는 여러 선점 모드를 제공함.
     * 2023년 9월, 스케줄링에 대한 논의에서 ""게으른 선점(lazy preemption)""이라는 개념이 제안되었으며, 이는 커널의 스케줄링을 단순화하면서 더 나은 결과를 제공할 수 있음.
     * 이 개념은 한동안 조용했지만, Peter Zijlstra의 패치 시리즈로 다시 등장함.

  현재 커널의 선점 모드

     * PREEMPT_NONE: 실행 중인 작업이 시간 슬라이스를 소진했을 때만 선점이 허용됨.
     * PREEMPT_VOLUNTARY: 필요할 경우 커널 내에서 선점이 가능한 많은 지점을 추가함.
     * PREEMPT_FULL: 스핀락이 걸린 경우를 제외하고 거의 모든 지점에서 선점이 가능함.
     * PREEMPT_RT: 대부분의 다른 것보다 선점을 우선시하며, 대부분의 스핀락 코드도 선점 가능하게 만듦.

  게으른 선점의 도입

     * 게으른 선점 패치는 새로운 플래그 TIF_NEED_RESCHED_LAZY를 추가하여 즉시가 아닌 어느 시점에 리스케줄링이 필요함을 나타냄.
     * 게으른 선점 모드(PREEMPT_LAZY)에서는 대부분의 이벤트가 이 새로운 플래그를 설정하며, 커널에서 사용자 공간으로 돌아갈 때 두 플래그 중 하나가 설정되면 스케줄러 호출이 이루어짐.
     * 이 변경의 결과로, 게으른 선점 모드에서는 커널의 대부분의 이벤트가 현재 작업을 선점하지 않게 됨.

  cond_resched() 제거

     * 이 작업의 최종 목표는 PREEMPT_LAZY와 PREEMPT_FULL 두 가지 비실시간 모드만 남기는 것임.
     * 게으른 모드는 PREEMPT_NONE과 PREEMPT_VOLUNTARY 사이의 위치를 차지하며, 이 두 모드를 대체함.
     * 현재는 cond_resched() 호출이 남아 있으며, PREEMPT_NONE 및 PREEMPT_VOLUNTARY 모드가 존재하는 한 필요함.

GN⁺의 정리

     * 게으른 선점은 커널의 스케줄링을 단순화하고 예측 가능한 지연 시간을 제공하는 데 기여할 수 있음.
     * 이 작업은 커널의 크기를 줄이고 코드를 간소화하는 데 도움이 될 수 있음.
     * 게으른 선점은 PREEMPT_VOLUNTARY와 유사한 처리량을 제공하지만, 더 많은 테스트와 최적화가 필요함.
     * 유사한 기능을 가진 다른 프로젝트로는 FreeBSD의 ULE 스케줄러가 있음.

        Hacker News 의견

     * 게으른 선점 작업의 최종 결과는 커널이 더 작고 단순해지면서 예측 가능한 지연 시간을 제공하는 것임. 이는 코드 전반에 스케줄러 관련 호출을 뿌릴 필요 없이 더 나은 해결책으로 보임. 그러나 이를 달성하는 데 시간이 걸릴 것임.
          + EEVDF처럼 현 상태를 단순화하고 개선하는 것임. 더 나은 해결책은 없을 것임.
     * 높은 수준의 선점은 시스템이 이벤트에 더 빠르게 반응할 수 있게 함. 마우스 움직임이나 원자로의 ""임박한 붕괴"" 신호와 같은 이벤트에 빠른 반응은 더 만족스러움. 그러나 높은 수준의 선점은 시스템의 전체 처리량에 영향을 줄 수 있음. CPU 집약적인 작업이 많은 워크로드는 가능한 한 방해받지 않는 것이 유리함. 더 빈번한 선점은 더 높은 잠금 경합을 초래할 수 있음. 그래서 다양한 모드가 존재하며, 최적의 선점 모드는 워크로드에 따라 다를 것임.
          + 왜 선점 수준이 특정 이벤트의 속성이 아닌 전역 모드의 속성인지 궁금함. 일부 이벤트는 다른 이벤트보다 낮은 지연 시간으로 처리되어야 함.
     * 현재 커널은 한 작업이 다른 작업을 위해 선점될 수 있는 시기를 조절하는 네 가지 모드를 가지고 있음.
          + 커널 작업, 사용자 작업 또는 둘 다에 관한 것인지 궁금함.
     * 링크된 스레드에서 패치와 관련된 숫자를 찾을 수 없음. 변경의 실제 잠재력을 알려줄 수 있는 예비 벤치마킹이 수행되었을 것임.
     * 스케줄러가 나머지 커널 코드와 얼마나 밀접하게 결합되어 있는지 궁금함.
          + 예를 들어, 선점에 전혀 신경 쓰지 않는 과학적 응용 프로그램을 위해 스케줄러를 대폭 단순화하고자 할 때, 이를 깔끔하고 모듈식으로 수행할 수 있는지, 그리고 어떤 이점이 있을지 궁금함.
     * 선점이 이벤트에 따라 적응할 수 있다면 좋겠지만, 모든 이벤트에 대해 이를 관리하는 것은 시스템 안정성을 해칠 수 있음. 이는 Tomba Finder와 같은 도구를 사용하여 리드 생성하는 것과 비슷함.
          + 정밀도(목표 리드)와 효율성을 균형 있게 유지하여 전체적으로 원활하게 작동해야 함.
"
"https://news.hada.io/topic?id=17246","HN 공개: 모든 화상 회의에서 화면 영역을 공유하는 X11 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 공개: 모든 화상 회의에서 화면 영역을 공유하는 X11 도구

clipscreen

   clipscreen은 화면의 일부를 미러링하는 가상 모니터를 생성하는 간단한 애플리케이션임. 녹색 사각형이 지정된 영역을 강조 표시함.
     * 유용성: Google Meet, Microsoft Teams, Jitsi Meet 등과 같은 화면 공유 도구를 사용할 때 전체 화면 대신 가상 모니터를 공유할 수 있음. 개별 창을 공유하고 전환할 필요 없이 공유하고자 하는 창을 녹색 테두리 안으로 이동하면 됨.

  컴파일

     * 시스템에 설치해야 할 항목:
          + X11 개발 라이브러리
          + Cairo 그래픽 라이브러리
          + C++ 컴파일러 (예: g++)
     * Ubuntu 24.04에서 필요한 라이브러리 설치 예시:
          + apt-get install libx11-dev xserver-xorg-dev xorg-dev libcairo2-dev g++
     * 애플리케이션 컴파일 명령:
          + make
     * 이 애플리케이션은 Linux와 xorg에서만 테스트되었으며 다른 시스템에서는 작동하지 않을 가능성이 높음.

  사용법

     * 컴파일된 실행 파일 실행 명령:
          + ./clipscreen <width>x<height>+<x>+<y>
          + <width>: 오버레이 및 가상 모니터의 너비
          + <height>: 오버레이 및 가상 모니터의 높이
          + <x>: 오버레이 및 가상 모니터의 왼쪽 상단 모서리의 x 좌표
          + <y>: 오버레이 및 가상 모니터의 왼쪽 상단 모서리의 y 좌표
     * 예시 명령:
          + ./clipscreen 800x600+100+100: 화면의 (100,100) 위치에서 시작하는 800x600 오버레이 창 생성
     * 대화형으로 영역 선택:
          + ./clipscreen $(hacksaw)
          + ./clipscreen $(slop)

  종료

     * 애플리케이션이 실행 중인 터미널에서 Ctrl+C를 눌러 종료

  링크

     * hacksaw
     * slop

  라이선스

     * 소프트웨어 및 관련 문서의 복사본을 무료로 사용할 수 있는 권한이 부여됨.
     * 소프트웨어는 ""있는 그대로"" 제공되며, 상업성, 특정 목적에 대한 적합성 및 비침해성에 대한 보증이 없음.

GN⁺의 정리

   clipscreen은 화면의 특정 영역을 가상 모니터로 공유할 수 있게 해주는 유용한 도구임. 이는 화면 공유 시 불필요한 창 전환을 줄여주어 편리함을 제공함. Linux와 xorg에서만 작동하므로 다른 운영 체제에서는 사용할 수 없다는 제한이 있음. 유사한 기능을 제공하는 도구로는 OBS Studio와 같은 화면 캡처 소프트웨어가 있음. 이 기사는 화면 공유를 보다 효율적으로 하고자 하는 사용자에게 유용할 수 있음.

        Hacker News 의견

     * 49인치 와이드 스크린 모니터를 사용 중이며, Google Meet에서 화면 공유가 불편하여 특정 화면 영역을 공유할 수 있는 작은 도구를 개발했음
          + xrandr 확장을 사용하여 가상 모니터에 영역을 미러링하여 공유할 수 있게 했음
          + 블로그 포스트에서 자세한 내용을 확인할 수 있음
     * 이 도구는 매우 간단하며, 주석을 제외하고 C++ 코드 100줄 미만임
          + X11을 Wayland보다 선호하는 이유 중 하나임
     * KDE 6.1에서 Wayland와 Chromium을 사용할 때 Jitsi에서 화면 공유를 클릭하면 '전체 화면'을 공유할 수 있는 옵션이 제공됨
          + 이후 '전체 작업 공간', '새 가상 출력', '사각형 영역' 및 디스플레이 목록이 나타남
          + '사각형 영역'은 화면의 선택된 부분을 공유할 수 있게 하며, '새 가상 출력'은 즉시 가상 화면을 생성하여 KDE '디스플레이 설정'에서 볼 수 있음
     * xzoom을 사용하여 확대 기능을 포함한 유사한 작업을 수행할 수 있음
          + 추가적인 이점이 있는지 궁금해하는 의견이 있음
     * Zoom에서는 여러 화면/창을 공유할 수 있으며, 원하는 창을 클릭할 때 SHFT 키를 누르면 됨
     * OBS를 사용하여 모든 플랫폼, Wayland 포함,에서 이 작업을 수행할 수 있는지에 대한 질문이 있음
          + 많은 사람들이 OBS에 대해 잘 모르거나 그 능력을 과대평가하고 있는 것 같다는 의견이 있음
     * 이 기능은 Linux에서 Zoom을 선택한 이유이며, 매우 훌륭하다는 의견이 있음
     * 현재 비디오 회의 플랫폼에서 이 기능이 여전히 충족되지 않는 이유에 대한 질문이 있음
          + 특히 개발자들이 이러한 도구를 작업할 때 대형 모니터가 점점 더 일반화되고 있음
     * X에서 가상 모니터를 생성하는 것에 대해 처음 알게 되었다는 의견이 있음
     * xrandr을 사용하여 이 작업을 수행할 수 있음
          + 예: xrandr --setmonitor screenshare 2560/1x1440/1+0+0 none
"
"https://news.hada.io/topic?id=17296","Adobe의 새로운 이미지 회전 도구, 가장 인상적인 AI 도구 중 하나","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Adobe의 새로운 이미지 회전 도구, 가장 인상적인 AI 도구 중 하나

     * Adobe의 연례 MAX 컨퍼런스의 'Sneaks' 세션에서는 Adobe 엔지니어들이 미래에 출시될 수도 있는 독특하고 혁신적인 아이디어를 공유함
     * 'Project Turntable'은 사용자가 2D 벡터 아트를 3D로 회전할 수 있게 하며, 어떤 각도에서도 여전히 2D 아트처럼 보이게 함
     * 이 도구는 AI를 사용하여 이미지의 '빈틈'을 채우며, 예를 들어 두 다리만 보이는 2D 말이 회전하면 네 다리가 드러남.
     * Adobe 연구 과학자 Zhiqin Chen이 이 도구를 개발했으며, 상업적으로 출시될지는 미정이지만 Adobe Max에서 많은 관심을 끌 것으로 예상됨.

GN⁺의 정리

     * Adobe의 'Project Turntable'은 2D 벡터 아트를 3D로 회전시킬 수 있는 혁신적인 도구로, AI를 활용하여 이미지의 빈틈을 자연스럽게 채움.
     * 이 도구는 디자인의 본질을 유지하면서도 새로운 시각적 가능성을 제공하여 디자이너들에게 큰 흥미를 끌 것으로 보임.
     * Adobe Max와 같은 행사에서 이러한 혁신적인 아이디어가 공유됨으로써 디자인 및 그래픽 분야의 발전을 촉진할 수 있음.
     * 유사한 기능을 제공하는 다른 프로젝트로는 Blender의 Grease Pencil이 있으며, 이는 2D와 3D 아트를 결합하는 데 유용함.

   https://cdn.mos.cms.futurecdn.net/RnibKWuooxUZ7xptBz4UHd/…

   영상 40초 부터 실제 기능이 나옵니다

   와 은근유용하게 쓸일이 많은 기능이네요.

   이미지 회전에 무슨 AI지? 했는데, 결과물 영상 보니 흥미롭네요 ㅎ
   출시되면 다양한 용도로 사용 가능할 듯

        Hacker News 의견

     * Adobe의 AI 제품 개발 접근 방식은 사용자 필요를 충족시키는 방향으로 적절하게 진행되고 있음
          + 많은 대기업들이 AI를 사용해야 한다는 압박에 따라 AI를 도입하고 나중에 사용자 필요와 맞추려는 경향이 있음
     * Adobe의 AI 기술은 오픈 소스 소프트웨어와의 격차를 벌리고 있음
          + GIMP, Inkscape, Darktable 등은 과거에 Photoshop, Illustrator, Lightroom과 경쟁할 수 있었으나, 현재 AI 생성 채우기, AI 노이즈 제거, AI 회전 기능에서는 경쟁이 어려움
     * AI 기술이 매우 인상적이며, 2D에서 3D로 변환하여 3D 프린트할 수 있는 기능이 추가되면 더욱 흥미로울 것임
     * 비디오에서 ""show controls""를 선택하면 음소거 해제와 탐색이 가능함
          + 왜 기본적으로 컨트롤이 숨겨져 있는지 이해하기 어려움
     * 생성 AI의 진정한 힘은 사용자에게 새로운 기능을 제공하면서 백그라운드에서 복잡한 작업을 처리하는 것임
          + UX에서 프롬프트는 사용자로부터 추상화되어야 함
     * 어린 시절 Flash에서 회전을 시도했을 때 어려움을 겪었으며, 부모님에게 보여줄 때 큰 인상을 주지 못해 아쉬웠음
          + 현재의 AI 기술은 매우 기쁘게 함
     * GenAI와 분석 분야에서 일하며 디자인 경험이 있는 사람으로서, Adobe의 기술은 매우 인상적임
          + 하지만 Adobe Creative Suite를 구매할 만큼은 아니며, 목표 고객층은 이를 선호할 것임
     * Adobe의 기술은 놀랍지만, Adobe를 사용해야 한다는 점이 아쉬움
     * 2D를 3D로 변환하는 여러 오픈 소스 ML 모델이 존재하며, Adobe의 기술과 유사한 모델이 있을 수 있음
          + 3D 자산 데이터베이스를 활용하여 다양한 각도에서 렌더링하면 기존 2D에서 3D로 변환하는 모델을 사용할 수 있을 것임
"
"https://news.hada.io/topic?id=17207","15살 소년, Zendesk에서 1개의 백도어 버그를 찾아 $50,000을 벌다 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              15살 소년, Zendesk에서 1개의 백도어 버그를 찾아 $50,000을 벌다

     * 여가시간에 버그헌팅을 즐기는 15살 소년, 포춘 500대 기업이 쓰는 Zendesk에서 이메일 인증에 관련된 버그를 찾아냄
     * 이를 여러 기업에 제보해 $50,000 이상을 벌었지만, Zendesk는 이를 패치했으면서도 제보자에게 전혀 보상금을 주지 않은 과정을 소개

Zendesk 소개

     * Zendesk는 세계 최고의 기업들이 사용하는 고객 서비스 도구임
     * 지원 이메일을 Zendesk에 연결하면 Zendesk가 수신 이메일을 관리하고 티켓을 생성함
     * 많은 대기업들이 자체 티켓 시스템을 구축하는 대신 Zendesk에 의존하는 것이 놀라움

가장 취약한 고리

     * ""가장 약한 고리만큼 강하다""는 말처럼, Zendesk는 종종 간단한 티켓 도구로 간주되어 신중한 설정 없이 사용됨
     * ""@company.com"" 도메인을 싱글 사인온(SSO)에 사용하며, Zendesk와 연결할 경우 보안 취약점이 발생할 수 있음
     * Zendesk가 도메인 이메일을 처리하기 때문에, SSO 시스템이 이메일 주소를 제대로 검증하지 않으면 Zendesk에 접근한 사람이 내부 시스템을 악용할 수 있음.

이메일 스푸핑

     * Zendesk의 심각한 취약점을 발견했으며, 공격자가 Zendesk를 사용하는 회사의 고객 지원 티켓을 읽을 수 있었음
     * Zendesk에는 이메일 스푸핑에 대한 효과적인 보호 장치가 없었음
     * 공격자는 지원 이메일 주소와 티켓 ID를 알고 있다면, 이메일 스푸핑을 통해 원래 발신자를 가장하여 티켓에 접근할 수 있었음
     * 저자가 버그를 제보했으나 Zendesk는 처음에는 관심을 갖지 않았음
          + 이메일 스푸핑(SPF, DKIM, DMARC 이슈)은 Out of Scope라고 답변이 옴
     * HackerOne 서비스를 통해 보고가 처리되었으며, Zendesk 팀원에게 직접 보고를 요청했으나 거절당함

이 이슈를 Slack 장악으로 확대

     * 이메일 스푸핑 버그를 개별 회사에 보고할 수도 있었으나, 더 큰 영향을 주고자 함
     * 과거 다른 연구자가 Zendesk를 통해 수백 개 기업의 Slack에 침투한 사례가 있었음 (TICKETTRICK)
     * 저자는 자신의 버그를 이용해 이를 재현하려 했지만 몇 가지 어려움이 있었음
     * Slack은 이메일 주소에 랜덤 토큰을 추가해 검증하는 방식으로 변경되었음
     * 하지만 OAuth를 이용하여 Apple ID로 로그인할 때는 토큰이 사용되지 않아 우회할 수 있었음

재현 단계: Apple → Zendesk → Slack

    1. ""support@company.com""으로 Apple ID를 만들고 인증 코드 요청하면 Zendesk 티켓 생성됨
    2. company.com 지원 포털에서 자신의 이메일로 티켓을 생성하여 ID 범위를 추적함
    3. 이메일 스푸핑 버그로 해당 ID 범위의 모든 티켓에 자신을 추가 시도
    4. daniel@wearehackerone.com 계정으로 그 회사의 지원 포털에 로그인하고 CC된 티켓을 확인함
    5. Apple ID에 인증 코드 입력
    6. Slack의 ""Apple 로그인"" 기능으로 @company.com 이메일 연결된 Apple ID로 로그인하여 Slack에 로그인함
       저자는 이 6단계를 수백 개의 Zendesk와 Slack 인스턴스에 적용함

사건의 여파

     * 일주일 동안 개별 기업에 취약점 제보, 일부는 즉각 조치했지만 Zendesk 문제라고 주장하는 곳도 있었음
     * 몇몇 기업이 Zendesk에 연락하자, Zendesk는 결국 보고를 비공개로 유지해달라고 요청했으며, Slack 취약점에 대한 재현 단계를 요구함
     * Slack 장악 PoC 제공 후 Zendesk는 문제 확인했으나 해결까지 2개월 걸림
     * 많은 기업이 이메일 협업 기능을 비활성화해 인스턴스를 보호함
     * 저자는 이 버그바운티 신고를 통해서 HackerOne 및 기타 플랫폼의 개별 기업으로부터 5만 달러 이상의 포상금을 받았음
     * 일부 기업은 Zendesk와의 계약을 해지함

Zendesk의 수정과 나의 0달러 바운티

     * 2개월 후 Zendesk는 문제 해결을 확인함
     * Cloudmark와 Rspamd EAP 스팸 필터를 사용했으나 Rspamd 점수를 활용하지 않아 많은 이메일이 보류되지 않았음
     * 처음에는 특정 조건에서 Rspamd로 자동 전환하는 방식으로 수정
     * 이후 Apple, Google 인증 이메일을 자동 보류하는 필터 구현
     * 문제를 해결했음에도 불구하고 Zendesk는 결국 이 버그바운티 신고에 대해 포상금을 지급하지 않기로 결정
          + 작성자가 취약점을 영향을 받은 회사들과 공유함으로써 HackerOne의 공개 가이드라인을 위반

결론

     * 작은 이메일 버그가 세계 최대 기업의 내부 시스템 침투로 이어짐
     * Zendesk가 결국 취약점을 해결했지만 거부, 느린 대응, 무시 등 과정이 힘들었음
     * 버그헌팅의 현실로, 때론 이기고 때론 지는 것

GN⁺의 의견

     * Zendesk 사태는 서드파티 솔루션을 무비판적으로 도입하는 위험성을 보여줌. 아무리 잘 알려진 기업의 제품이라도 보안 검토는 필수적임.
     * 주요 기업의 내부 시스템 장악은 엄청난 피해를 초래할 수 있어 Zendesk의 늑장 대응은 매우 무책임했음. 바운티 지급 거부로 보안 연구자의 의욕을 꺾는 것도 바람직하지 않음.
     * 기업은 SSO 도메인을 신중히 선택하고, 이메일 검증 프로세스를 강화해야 함. DMARC, SPF, DKIM 등 이메일 인증 기술을 적극 활용할 필요가 있음.
     * HackerOne의 공개 가이드라인은 연구자 입장에서 너무 경직되어 있음. 심각한 취약점은 신속한 공유가 이뤄져야 하므로, 상황에 맞는 유연한 적용이 필요해 보임.
     * 버그헌팅은 기업과 연구자 모두에게 win-win이 되어야 함. 연구자의 선의와 노력을 존중하고 적절히 보상하는 문화가 정착되기를 기대함.

   이런 이슈 보면, 보안 관련 솔루션은 가져다쓰기보단, 보안 전문가를 데려오고 육성하는 게 훨씬 나아보입니다 ㅠㅠ

        Hacker News 의견

     * 한 사용자는 2024년 6월에 Zendesk, Apple, Slack에 동일한 버그를 보고했으며, 이들이 버그에 대한 보상을 하지 않은 이유는 아마도 그들이 처음이 아니었기 때문이라고 언급함
          + 비디렉토리 SSO 옵션인 Sign in with Apple(SIWA)가 잘못 구현되었으며, 이는 Slack과 같은 대기업에서도 마찬가지임
          + 비디렉토리 SSO는 디렉토리 SSO와 동일한 신뢰를 가질 수 없으며, SSO 제공자는 동일한 이메일 주소를 사용하더라도 서로 대체 가능하지 않음
     * 다른 사용자는 Zendesk가 Google 검색 결과를 오염시키기 위해 ""Zendesk Alternative""라는 가짜 밴드를 만들었다고 주장함
          + 이는 불법은 아니지만, 그들의 사고방식을 보여주는 조작적인 행동이라고 언급함
     * 한 사용자는 Zendesk가 버그에 대해 보상을 거부한 것이 실망스럽다고 말하며, 이는 큰 보상 프로그램에 참여하지 않게 만드는 방법이라고 언급함
          + Zendesk와의 인터뷰 경험이 매우 나빴다고 덧붙임
     * 또 다른 사용자는 비효율적인 버그 바운티 프로그램이 소프트웨어 서비스에 부정적인 영향을 미친다고 언급함
          + Zendesk가 보상을 하고 사과하며 프로그램을 수정해야 한다고 주장함
     * 한 사용자는 Zendesk가 13억 달러의 수익을 올리는 회사임에도 불구하고 보상을 하지 않는 것이 단기적인 시각이라고 비판함
          + 이는 합리적인 결정이 아니며, 사적인 자본이 비용을 절감하고 브랜드를 소모시키고 있다고 언급함
     * 다른 사용자는 Zendesk가 버그의 영향을 제대로 이해하지 못했기 때문에 무시했을 것이라고 설명함
          + 명확한 영향이 없으면 많은 취약점이 단순한 버그로 보일 수 있다고 언급함
     * 한 사용자는 Zendesk가 Apple 계정 확인 이메일 문제만 해결했으며, 근본적인 문제는 해결하지 않았다고 지적함
          + 기본 설정으로 이메일과 티켓 ID를 알면 누구나 지원 티켓을 탈취할 수 있는 가능성이 있다고 언급함
     * 두 가지 별도의 취약점이 존재한다고 설명함
          + Zendesk는 원래 요청자의 이메일 주소에서 회신을 보내 CC를 추가할 수 있도록 허용함
          + Slack은 추가 확인 없이 Sign in with Apple을 통해 도메인 전체 로그인을 허용함
     * Zendesk가 문제를 무시하고 비공개로 유지하려고 했다는 점을 비판함
          + 이는 비전문적인 태도이며, 보상을 하지 않은 이유가 될 수 있다고 언급함
     * 마지막으로, 한 사용자는 Zendesk가 버그에 대한 보상을 거부한 것을 비판하며, 보고자가 모든 절차를 올바르게 수행했음을 강조함
"
"https://news.hada.io/topic?id=17291","아마존, 첫 컬러 Kindle 및 새로운 Kindle Scribe 공개 등","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               아마존, 첫 컬러 Kindle 및 새로운 Kindle Scribe 공개 등

     * Amazon은 최초의 컬러 Kindle, 새롭게 디자인된 Kindle Scribe, 가장 빠른 Kindle Paperwhite, 그리고 새로운 Matcha 색상의 엔트리 Kindle을 포함한 새로운 Kindle 기기 라인업을 공개
     * Kindle Colorsoft Signature Edition
          + Kindle Colorsoft는 컬러를 추가하여 Kindle의 기능을 확장함. 고대비, 빠른 페이지 전환, 자동 조정 전면 조명, 긴 배터리 수명을 제공하며, 컬러 이미지를 지원함.
          + 산화 백플레인과 맞춤형 웨이브폼을 사용하여 컬러와 흑백 콘텐츠 모두에서 높은 대비를 제공함. 무선 충전과 방수 기능을 갖추고 있음.
     * 새로운 Kindle Scribe
          + Kindle Scribe는 강력한 필기 기능을 제공하는 기기로, 종이 같은 질감의 화면과 300 ppi 해상도를 제공함.
          + Active Canvas 기능을 통해 책에 직접 메모를 작성할 수 있으며, AI 기반 노트북 기능으로 메모를 요약하고 공유할 수 있음.
     * 가장 빠른 Kindle Paperwhite
          + 새로운 Kindle Paperwhite는 25% 더 빠른 페이지 전환 속도를 제공하며, 7인치 디스플레이와 최대 3개월의 배터리 수명을 자랑함.
          + 방수 기능과 16GB의 저장 공간을 제공하며, 다양한 색상 옵션이 있음.
     * 가장 컴팩트한 새로운 Kindle
          + 새로운 엔트리 Kindle은 158g의 무게로 휴대가 용이하며, 300 ppi의 눈부심 없는 디스플레이와 빠른 페이지 전환을 제공함.
          + Matcha 색상으로 제공되며, 16GB의 저장 공간과 긴 배터리 수명을 자랑함.
     * 어린 독자를 위한 Kindle Kids
          + Kindle Kids는 어린이들이 독서를 즐길 수 있도록 다양한 책과 오디오북을 제공함. 2년 보증과 Amazon Kids+ 6개월 구독이 포함됨.
     * Kindle Unlimited
          + 모든 Kindle 기기는 세계 최고의 전자책 스토어에 접근할 수 있으며, Kindle Unlimited 3개월 구독이 포함되어 다양한 장르의 디지털 책과 오디오북을 무제한으로 읽을 수 있음.
     * 가격
          + Kindle 기기는 100% 재활용 가능한 포장재로 제공되며, 가격은 $109.99부터 시작함
          + Kindle Paperwhite는 $159.99, Kindle Paperwhite Signature Edition은 $199.99, Kindle Colorsoft Signature Edition은 $279.99, Kindle Scribe는 $399.99부터

GN⁺의 정리

     * Amazon의 새로운 Kindle 라인업은 다양한 기능과 컬러 옵션을 통해 독서 경험을 향상시킴.
     * 특히 Kindle Colorsoft는 컬러 이미지를 지원하여 시각적 즐거움을 더함.
     * Kindle Scribe는 필기 기능을 강화하여 독서와 필기를 동시에 즐길 수 있는 기기를 제공함.
     * 이러한 기기들은 독서 습관을 장려하고, 다양한 독자층에게 맞춤형 경험을 제공함.

        Hacker News 의견

     * 오래된 Paperwhite를 사용하다가 책이 삭제되는 문제로 Kobo Libra Color로 변경한 경험 공유
          + 가격을 제외하고는 훌륭한 기기임
          + 만화책 읽기에 충분한 색상과 Google Drive 통합 기능으로 CBR/CBZ 파일을 쉽게 전송 가능
          + 주석 및 노트 기능이 잘 작동하며, Libby 통합으로 도서관 책 검색 및 선택이 용이함
          + 읽기 앱은 Kindle에 비해 약간 부족하지만, 여전히 만족스러움
          + Boox 리더기를 시도했으나 하드웨어 품질이 좋지 않았음
     * e-ink 스마트폰 추천
          + Hisense A5와 Bigme Hibreak 사용 경험 공유
          + Bigme Hibreak가 Google Play Store 접근이 가능하여 조금 더 나음
          + 흑백 화면이 더 나은 경험을 제공함
          + 구형 Android 버전을 사용하여 은행 업무 등은 하지 않음
          + LCD 화면이 없는 것이 시간을 절약해 줌
          + Bigme Hibreak는 Android 11을 실행하며, 메시지 앱의 알림이 지연됨
     * Amazon Kindle Colorsoft 기술 설명
          + E Ink의 Kaleido 기술 기반으로 새로운 디스플레이 스택 사용
          + 색상을 개선하기 위한 새로운 LED 픽셀과 조명 방식 도입
          + Paperwhite의 페이지 전환 속도 향상에도 기여함
     * Kindle Paperwhite와 Kobo Clara BW 비교
          + Kindle은 외관과 느낌에서 프리미엄 경험 제공
          + Amazon 서버를 통한 전송 문제로 인해 Kobo도 사용
          + Kobo는 오프라인 모드로 USB를 통해 직접 전송 가능
          + Kindle Paperwhite의 크기가 완벽하다고 생각함
     * Kindle Oasis에 대한 의견
          + 첫 번째 세대 Oasis의 비대칭 디자인과 페이지 전환 버튼이 좋았음
          + 최신 Oasis는 조명과 텍스트 모드가 개선되었으나 업그레이드할 만큼은 아님
          + Amazon 생태계와의 통합이 장점이지만, Libby를 선호함
     * Oasis의 컬러 버전이 없는 것에 대한 아쉬움
          + Scribe는 대체품으로 너무 큼
          + Libra 2를 사용 중이나 약간 느림
     * 전자책 리더기의 배터리 수명 측정 방식에 대한 불만
          + Amazon의 배터리 수명 설명이 실제 사용 시간과 다름
"
"https://news.hada.io/topic?id=17317","HN 공개: Go Plan9 메모","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 공개: Go Plan9 메모

    Go의 동시성과 병렬성 활용

     * Go의 동시성과 병렬성을 활용하여 숫자 계산 능력을 향상시키고자 하는 프로젝트에 대한 소개.
     * SIMD(Same Instruction Multiple Data) 명령어를 사용하여 하드웨어 수준에서 병렬 계산을 수행할 수 있음.
     * Go의 컴파일러는 SIMD를 활용하지 않으며, 적합한 일반 목적 SIMD 패키지를 찾지 못해 직접 패키지를 개발하기로 결정함.

    Plan9 어셈블리 언어

     * Go는 Plan9이라는 자체 어셈블리 언어를 사용하며, 이는 특정 플랫폼의 명령어와 레지스터를 약간 수정하여 사용함.
     * x86 Plan9과 ARM Plan9은 서로 다름.
     * Plan9의 간단한 예제를 통해 기본적인 사용법을 설명함.

    Plan9 예제

     * AddInts_amd64.s 파일과 main.go 파일을 통해 Plan9의 기본적인 함수 선언 및 사용법을 설명함.
     * Go의 호출 규칙에 따라 함수 인자와 반환값을 스택에 저장하는 방법을 설명함.

    패키지 설계 계획

     * 산술 및 비트 연산 SIMD 작업에 대한 얇은 추상화 계층을 제공하는 패키지를 설계함.
     * 아키텍처별 Plan9 구현을 포함하는 내부 패키지를 생성하고, 초기화 함수를 통해 이를 설정함.

    SIMD 예제

     * x86 SIMD Plan9 함수의 예제를 통해 SIMD의 사용법을 설명함.
     * Supported_amd64.s와 AddFloat32_amd64.s 파일을 통해 SSE 지원 여부 확인 및 float32 덧셈 연산을 수행하는 방법을 설명함.

    성능 및 미래

     * Go 소프트웨어 구현과 Plan9 SIMD 구현 간의 성능 차이를 보여주는 차트를 통해 약 200-450%의 속도 향상을 확인함.
     * 이 메모가 Plan9과 SIMD를 사용한 프로젝트에 영감을 주기를 바람.

    # GN⁺의 정리

     * 이 글은 Go의 동시성과 병렬성을 활용하여 성능을 극대화하는 방법을 소개함.
     * Plan9 어셈블리 언어와 SIMD 명령어를 사용하여 하드웨어 수준에서 병렬 계산을 수행할 수 있는 방법을 설명함.
     * 이 글은 Go 개발자들에게 Plan9과 SIMD의 활용 가능성을 제시하며, 성능 향상을 위한 새로운 접근 방식을 탐구하는 데 유용할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 Rust의 SIMD 지원 라이브러리나 C++의 SIMD 관련 라이브러리를 추천함.

        Hacker News 의견

     * ""NOSPLIT""에 대한 설명: Go 어셈블리에서 프레임 크기와 인자 크기를 설명하는 독특한 문법임
          + 프레임 크기와 인자 크기는 '-'로 구분되며, 이는 수학적 뺄셈이 아님
          + ""go vet"" 도구가 인자 크기가 올바른지 확인함
     * LLM(대규모 언어 모델) 해석에 대한 의견: 코드 해석에 대한 오해가 있을 수 있음
          + 저자가 솔직하게 인정하면 학습에 도움이 될 것이라는 의견
     * Go의 내부 어셈블리 언어 ""Plan9""에 대한 언급: Go는 자체 어셈블리 언어를 사용함
          + amd64에서 int는 64비트이며, int32를 사용하면 인자 리스트에서 워드 정렬됨
          + NOSPLIT은 ""textflag.h""에 정의되어 있으며, 런타임에서만 유효함
     * Go 어셈블리 설계에 대한 Rob Pike의 설명: 공통 어셈블리 언어를 만들어 새로운 문법을 배우지 않고도 기계와 소통할 수 있도록 함
          + 새로운 아키텍처에 대한 설명서를 입력으로 사용하여 어셈블러를 자동 생성할 수 있음
     * SIMD 연산을 위한 함수 사용에 대한 의견: 슬라이스에 SIMD 연산을 수행할 수 있는 함수가 필요함
          + 두 슬라이스를 더할 때 for 루프 대신 SIMD를 사용하여 병렬로 처리할 수 있음
     * Go 컴파일러의 설계 철학: 복잡한 컴파일러보다 단순하고 빠른 컴파일러를 지향함
          + 기본 x64 지원에는 SSE와 SSE2가 포함되며, 성능보다는 단순함을 중시함
     * SIMD 연산에 GPU 사용에 대한 의견: GPU는 병렬 처리와 행렬 연산에 뛰어나므로 SIMD 연산에 더 적합할 수 있음
          + 그러나 Go에서는 GPU 패키지와 커뮤니티가 부족하여 적합하지 않을 수 있음
"
"https://news.hada.io/topic?id=17210","독일의 49유로 티켓, 도로에서 철도로의 큰 전환 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     독일의 49유로 티켓, 도로에서 철도로의 큰 전환 결과

     * 49유로 티켓의 효과: 독일 전역에서 지역 버스와 철도를 한 달 동안 이용할 수 있는 49유로 ""Deutschland-Ticket""은 도로에서 철도로의 교통 전환을 유도함. 이는 베를린에 위치한 기후 연구소 MCC가 Ariadne 에너지 전환 프로젝트를 위해 수행한 연구 결과임.
     * 연구 결과:
          + 2023년 5월 1일 도입 이후 첫 12개월 동안, 독일 내 이동 데이터와 유럽 8개국의 비교 데이터를 분석하여, 티켓이 사람들의 이동 행동에 미친 영향을 처음으로 규명함.
          + 30km 이상의 기차 여행이 30.4% 증가함. 반면, 자동차로 이동한 거리는 7.6% 감소함.
          + 전체 교통 수단의 이동 횟수는 변하지 않았으나, 기차 여행의 비율이 10%에서 12%로 증가하여 약 670만 톤의 CO2 배출을 절감함.
     * 가격 인상에 따른 예측:
          + 2024년 9월 23일 독일 연방 주 교통 장관들이 티켓 가격을 49유로에서 58유로로 인상하기로 결정함.
          + 연구팀은 가격 인상으로 인해 기차 여행이 14% 감소하고, 자동차 이동 거리가 3.5% 증가할 것으로 예측함.
          + 이는 첫 해에 49유로 티켓으로 달성한 배출 감소의 절반가량을 상쇄할 수 있음.
     * 추가 자료:
          + 이동 패턴 변화, 지역별 차이, 배출 감소 정도에 대한 통계적 영향 분석은 독일어로 제공되는 Ariadne D-Ticket Impact Tracker에서 확인 가능함.

GN⁺의 정리

     * 49유로 티켓의 중요성: 이 티켓은 독일 내 교통 수단의 사용 패턴을 변화시키고, CO2 배출을 줄이는 데 기여함. 이는 지속 가능한 교통 정책의 좋은 사례로 평가될 수 있음.
     * 가격 인상의 문제점: 가격 인상은 초기의 긍정적인 효과를 상당 부분 상쇄할 수 있으며, 이는 정책 결정 시 고려해야 할 중요한 요소임.
     * 관련 프로젝트 추천: 유사한 교통 정책이나 프로젝트로는 프랑스의 Navigo 패스나 일본의 JR 패스가 있음. 이러한 정책들은 대중교통 이용을 장려하고 환경에 긍정적인 영향을 미침.

        Hacker News 의견

     * €49 티켓 제공에는 연간 약 €30억의 보조금이 필요하며, 이는 철도 산업에 대한 기존 보조금 외에 추가적인 것임. 탄소 배출을 연간 670만 톤 줄인다고 가정하면, 톤당 €447이 소요되며, 이는 대부분의 탄소 감축 방법보다 비효율적임
     * 독일의 교통 시스템을 좋아하지만, 새로운 시스템은 구독 모델로만 구매 가능하여 관광객에게 불편함을 줌. 티켓 구매가 복잡하며, 가격 인상은 잘못된 방향임. 미국은 독일의 철도 시스템에서 배울 점이 많음
     * 미국에서 대중교통을 사용하지 않는 이유는 항상 위험한 사람들로 가득 차 있기 때문임. 멜버른과 네덜란드에서는 대중교통이 깨끗하고 조용했음
     * 처음에는 9유로 티켓으로 시작했으나, 현재는 49유로로 인상되었고, 59유로로 인상될 예정임. 이는 저소득층에게 부담이 됨
     * 지역 대중교통을 무료로 만들자는 주장을 했으며, 이는 독일의 연구를 인용한 것임
     * 대형 기차역 근처에 사는 사람들에게만 혜택이 있었으며, 자동차가 유일한 선택인 지역이 많음
     * 교통부 장관들이 도로를 더 매력적으로 만들기 위해 노력하는 동안, 자동차 로비가 강력하여 철도를 덜 매력적으로 만듦. 정치인들이 사치스러운 삶을 살기 위해 일반 사람들이 고통받고 있음
     * 대중교통을 주로 비어 있는 노선과 시간대에 이용하도록 하는 것이 진정한 과제임. 기차는 무겁기 때문에 사람이 타고 있든 없든 비용 차이가 크지 않음
     * '모든 접근' 티켓 시스템은 인상적이었으며, 거의 모든 도시가 철도로 연결되어 있음. 미국 중서부에서는 인구 밀도가 낮아 이러한 시스템을 구현하기 어려움
     * 정부가 대중교통, 우편 시스템, 통신/인터넷 서비스, 교도소 등을 운영하고 기본 서비스를 제공하는 것이 좋다고 생각함. 이는 세금으로 운영되며, 비용을 초과하는 이익을 창출하지 않음
"
"https://news.hada.io/topic?id=17234","Token.js - 하나의 SDK로 200+개 LLM 연동하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Token.js - 하나의 SDK로 200+개 LLM 연동하기

     * OpenAI 포맷을 이용해서 10개 프로바이더의 200+개 LLM 호출
          + AI21, Anthropic, AWS Bedrock, Cohere, Gemini, Groq, Mistral, OpenAI, Perplexity, OpenRouter
     * Tools, JSON 아웃풋, 이미지 입력, 스트리밍등을 지원
     * 프록시 서버 없이 클라이언트 사이드에서만 동작

   AI SDK 에서 제공하는 것과 비슷하네요

   파이썬 패키지 마렵네요

   파이썬에는 https://github.com/BerriAI/litellm 이 있습니다
"
"https://news.hada.io/topic?id=17268","Show HN: Rust로 작성된 현대적인 Minecraft 서버, Pumpkin","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show HN: Rust로 작성된 현대적인 Minecraft 서버, Pumpkin

Pumpkin

   Pumpkin은 Rust로 완전히 구축된 Minecraft 서버로, 빠르고 효율적이며 사용자 정의 가능한 경험을 제공함. 게임의 핵심 메커니즘을 준수하면서 성능과 플레이어의 즐거움을 우선시함.

  Pumpkin이 달성하고자 하는 것

     * 성능: 멀티스레딩을 활용하여 최대 속도와 효율성을 추구함
     * 호환성: 최신 Minecraft 서버 버전을 지원하며, 기본 게임 메커니즘을 준수함
     * 보안: 알려진 취약점을 방지하여 보안을 우선시함
     * 유연성: 불필요한 기능을 비활성화할 수 있는 높은 구성 가능성을 제공함
     * 확장성: 플러그인 개발을 위한 기반을 제공함

  Pumpkin이 하지 않을 것

     * 기본 또는 다른 서버의 대체품으로 사용되지 않음
     * 다른 서버의 플러그인이나 모드와 호환되지 않음
     * 서버를 처음부터 구축하는 프레임워크로 작동하지 않음

   중요: Pumpkin은 현재 활발히 개발 중임

  기능 (진행 중)

     * 설정 (toml)
     * 서버 상태/핑
     * 로그인
     * 플레이어 설정
          + 레지스트리 (생물군계 유형, 그림, 차원)
          + 서버 브랜드
          + 서버 링크
          + 리소스 팩 설정
          + 쿠키
     * 월드
          + 월드 참여
          + 플레이어 탭 목록
          + 월드 로딩
          + 엔티티 생성
          + 청크 로딩
          + 월드 생성
          + 청크 생성
          + 월드 경계
          + 월드 저장
     * 플레이어
          + 플레이어 스킨
          + 플레이어 클라이언트 브랜드
          + 플레이어 텔레포트
          + 플레이어 이동
          + 플레이어 애니메이션
          + 플레이어 인벤토리
          + 플레이어 전투
     * 서버
          + 플러그인
          + 쿼리
          + RCON
          + 인벤토리
          + 파티클
          + 채팅
          + 명령어
     * 프록시
          + Velocity

   현재 진행 상황은 GitHub 프로젝트에서 확인 가능함

  GN⁺의 정리

   Pumpkin은 Rust로 개발된 Minecraft 서버로, 성능과 사용자 경험을 중시하는 점에서 주목할 만함. 멀티스레딩을 통한 성능 최적화와 보안 강화가 특징이며, 플러그인 개발을 위한 확장성을 제공함. Minecraft 서버 개발에 관심이 있는 사람들에게 유용할 수 있으며, 현재 활발히 개발 중이므로 지속적인 업데이트가 기대됨. 비슷한 기능을 가진 프로젝트로는 PaperMC와 Spigot이 있음.

        Hacker News 의견

     * 벤치마크에서 성능 차이가 인상적임. 그러나 월드 생성 및 저장 기능이 빠져 있으며, 이는 비용이 많이 드는 작업임. 특히 청크 생성은 약한 VPS를 무너뜨릴 수 있음. 이러한 기능이 포함되어 사용될 때의 성능 비교가 궁금함
          + 블록 파괴/설치에 대한 지원이 있는지 궁금함. 이는 서버에서 빛 재계산과 청크 업데이트가 필요할 것임
          + 고급 기능인 스코어보드, 팀, 명령 블록 파싱을 추가할 계획이 있는지 궁금함. Mojang은 최소한 Brigadier를 오픈소스화했음
          + 멋진 프로젝트임. 저사양 하드웨어에서 서버를 쉽게 운영할 수 있는 수준으로 성숙해지길 바람
     * 이 프로젝트에 대한 벤치마크가 있는지 궁금함. 바닐라 서버보다 얼마나 빠른지 알고 싶음
          + Minecraft 서버는 플레이어 수가 증가함에 따라 자원 집약적이 되며, 부하를 처리하기 위해 매우 강력한 서버를 운영하지만 여전히 TPS가 낮음
     * 이 프로젝트를 이전에 알았던 사람으로서, Hacker News에서 이 프로젝트가 인기를 끌어 기쁨. (140개의 추천은 꽤 좋다고 생각함)
          + 기억하기로는 Rust로 작성된 다른 서버도 있었지만 확실하지 않음
          + 마지막으로 봤을 때는 매우 초기 단계의 소프트웨어였지만 빠르게 개발되고 있었음. 현재 상태는 잘 모르겠음 (저자가 시험을 보러 갔을 때 있었음)
     * 최근에 Rust로 완전히 작성된 효율적이고 빠른 Minecraft 서버인 Pumpkin을 개발했음. 확인해보길 바람
     * 메인 스레드를 영역으로 분할하는지(예: Paper Folia) 아니면 비블록 엔티티를 자체 스레드로 분할하는지 궁금함
     * 인상적인 작업이지만, 많은 Minecraft 모드를 지원하는 고성능 구현을 보고 싶음. Forge 서버는 큰 모드팩에서 느리기로 악명 높음
     * Minecraft가 자체 프로토콜로 역설계되어 여러 서버 및 클라이언트 구현이 작동하는 것을 기다리고 있음
     * 이 프로젝트를 시도해볼 것임. 순수 바닐라 서버의 성능이 매우 나쁨. Mojang이 이를 개선하길 바람. 새로운 청크 생성은 최소한 멀티스레드임. SMP 서버에 대한 기본 제어를 공식적으로 지원하길 바람. 두 개의 모서리 좌표로 정의된 영역과 같은 기본 권한(설치, 파괴, 상호작용)만 있어도 좋음. 기본 구성 파일로 요청/업데이트를 다른 도구를 사용하여 관리할 수 있음. 게임 내에서 간단한 명령줄 유틸리티로 운영할 수 있음. 항상 화이트리스트만 사용하는 것을 피할 수 있는 것이 좋음. Paper/Waterfall 등은 플러그인이 있지만 순수 바닐라를 유지하는 것이 좋음. 오랫동안 서버를 유지해왔음
     * 사람들이 어떻게 이런 일을 할 수 있는지 항상 놀라움. 이 프로젝트가 어떻게 만들어졌는지에 대한 글이 있다면 감사하겠음
"
"https://news.hada.io/topic?id=17329","Rust vs. Ada","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Rust vs. Ada

   Reddit의 r/ada에서 발견한 Rust와 Ada의 비교 댓글입니다.
     * 두 언어 모두 __C가 아님__에서 오는 이점이 있음. C의 문법적 foot guns(역주: 프로그래머가 자기 발을 쏘게 하는 기능)들, 정의되지 않은 동작 등.
     * 두 언어 모두 memory safety를 지원함. 배열 경계는 런타임에 검사되며, 유효한 포인터를 확인하는 규칙 등. Ada는 검사가 좀 더 간단하며, 모든것을 우회하는 Unchecked_Access가 있음. Rust의 burrow checker는 좀 더 정교하지만 우회가 필요한 상황에도 우회가 힘듦.
     * Rust는 동적 할당을 수용했음. Ada에서도 가능은 하지만, 어색하고 불편함. Ada 언어가 이를 원하지 않는게 분명함. Ada는 힙 할당이 안전에 문제가 되고, 메모리의 파편화를 걱정하고, 메모리 고갈이 없음을 증명해야 하던 시대에서 유래했음. Rust는 힙을 자유롭게 사용하는것을 권장하며, 동적 할당이 필요하다면 Rust가 확실히 더 안전함. Ada에서 할당 해제는 dangling pointer를 남길 수 있어 안전하지 않은 작업임.
     * Rust는 thread safery에서 우위에 있음. Burrow checker는 race condition을 처음부터 방지함.
     * Ada는 value safety에서 우위에 있음. Constrained subtype은 올바른 코드 작성을 위한 좋은 도구이며, 배열 검사와 같은 Ada의 다른 기능을 위한 기초가 됨.
     * Ada는 SPARK를 사용하여 formal proof 분야에서 우위에 있음. Rust에서는 이런것을 찾을 수 없었음. 고수준의 안전성이 필수적이라면 SPARK는 가장 적합한 도구임.

   핸드폰으로 쓰다보니 오타가 있군요 ㅠ

   memory sadety -> memory safety 입니다.

   burrow checker -> borrow checker
   thread safery -> thread safety
   :D
"
"https://news.hada.io/topic?id=17247","AdMob : 금전 지급, 보상을 약속하는 앱 광고 게재 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AdMob : 금전 지급, 보상을 약속하는 앱 광고 게재 금지

   2024년 11월에 '보상 프로그램을 제공하는 앱' 정책을 개정하기 위해 AdMob 행동 정책이 업데이트됩니다. '웹서핑을 하거나, 이메일을 읽거나, 기타 유사한 작업을 처리하는' 유형의 사용자 행동을 언급하는 내용이 정책에서 삭제됩니다. 업데이트된 정책에서는 '광고를 클릭하거나 시청하는 사용자에게 금전 지급이나 보상을 약속하는 앱에는 Google 광고를 게재할 수 없습니다. 이러한 앱에 Google 광고를 게재하면 무효 클릭 또는 노출이 발생할 수 있으므로 광고 게재가 금지됩니다. 마찬가지로 이러한 서비스를 구현하는 방법에 대한 안내 자료에 트래픽을 유도하거나, 또는 해당 자료를 홍보하거나 제공하는 것을 주된 목적으로 하는 앱에도 Google 광고를 게재할 수 없습니다.'라고 명시될 예정입니다.

   캐시워크 같은 광고 재테크 앱들에 타격이 있을까요?
"
"https://news.hada.io/topic?id=17304","프랑스 대법원의 비밀 3D 스캔","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           프랑스 대법원의 비밀 3D 스캔

프랑스 대법원의 비밀 3D 스캔

     * 로댕 박물관과 프랑스 문화부의 정보 접근 제한
          + 지난 7년간 프랑스 국립 박물관의 3D 스캔에 대한 대중의 접근 권리를 옹호하기 위해 노력해 왔음.
          + 로댕 박물관과 프랑스 문화부는 법을 어기고 대중의 문화유산 접근을 막으려는 시도를 하고 있음.
     * 문화유산 디지털화의 필요성
          + 전 세계 많은 박물관이 중요한 예술 작품과 고대 유물의 3D 스캔을 제작하고 있음.
          + 이러한 스캔은 예술가, 연구자, 교육자에게 새로운 창작과 연구의 기회를 제공함.
     * 프랑스의 디지털화 문제
          + 프랑스의 국립 박물관들은 대중에게 3D 스캔을 공개하지 않음.
          + RMN은 3D 스캔을 공개한다고 광고하지만 실제로는 접근을 제한하고 있음.
     * 로댕 박물관의 비협조
          + 로댕 박물관은 3D 스캔을 공개하지 않으며, 법적 요구에도 불구하고 이를 거부함.
          + 법적 소송을 통해 박물관의 비협조적인 태도를 극복하고자 함.
     * 법적 승리와 그 의미
          + 파리 행정 법원은 로댕 박물관이 3D 스캔을 공개하도록 명령함.
          + 이 판결은 프랑스 및 전 세계의 문화유산 디지털화에 대한 대중의 접근 권리를 강화함.

GN⁺의 정리

     * 이 기사는 문화유산의 디지털화와 대중의 접근 권리에 대한 중요성을 강조함.
     * 프랑스의 사례는 다른 국가에서도 유사한 문제를 해결하는 데 도움이 될 수 있음.
     * 디지털화된 문화유산에 대한 접근은 예술과 교육 분야에서 새로운 가능성을 열어줌.
     * 유사한 기능을 가진 프로젝트로는 영국 박물관의 3D 스캔 프로젝트가 추천됨.

        Hacker News 의견

     * 법원이 박물관의 수익 모델과 경쟁 및 위조의 위협이 대중의 스캔 접근 권리에 무관하다고 판결함
          + 정부가 자금을 지원한 스캔 프로그램이 시작되기 전에 명확했으면 박물관과 정부 부처에 도움이 되었을 것이라는 의견
          + 박물관의 상점 수익이나 상업적 라이선스가 재정적 공백을 메울 수 있다는 점에서 박물관에 동정적이었음
          + 그러나 기사의 속임수는 정당화되지 않음
     * 박물관이 스캔을 제공하는 사람에게 감사해야 한다고 생각함
          + 로댕 조각의 정확한 표현에 대한 관심은 적지만, 모든 고대 유물의 디지털 사본을 공개하는 것이 역사 연구의 최우선 과제가 되어야 한다고 주장함
          + 일부 사이트에서는 사진 촬영조차 허용되지 않음
     * 인터넷 연결만 있으면 누구나 영국 박물관의 로제타 스톤 3D 스캔을 볼 수 있음
          + 덴마크 국립 미술관과 스미소니언 웹사이트에서도 다양한 고품질 스캔을 자유롭게 다운로드 가능
     * Sketchfab을 통해 로제타 스톤 모델을 다운로드하려면 계정 가입이 필요함
          + 공공 접근이지만 Sketchfab이 존재하는 동안만 가능함
     * 박물관이 기념품 가게를 보호하기 위해 스캔 아티팩트를 숨기려는 주장을 이해할 수 없음
          + 프랑스 대법원이 박물관의 두 달 기한을 무시한 것에 놀라움을 표함
     * 행정 문서는 법적으로 대중에게 공개되어야 함
          + 그러나 특정 '관람실'에서만 볼 수 있도록 하여 실질적으로 무용지물로 만들 수 있음
     * 고대 그리스 및 이집트 조각상이 있는 미술관을 방문한 경험을 공유함
          + VR로 복원된 조각상을 보고 싶다는 의견
     * 자연사 박물관의 흥미로운 프로젝트가 있었으나 결과를 찾을 수 없다는 의견
     * 공공 정보가 상업적으로 자유롭게 사용될 수 있어야 한다고 생각함
          + 저작권이 적용되는 경우 공공이 이를 유지해야 하며, 파생 작품도 공공 도메인에 있어야 한다고 주장함
     * 영국 예술 저널이 박물관 사진의 저작권 문제에 대해 캠페인을 벌였다는 의견
"
"https://news.hada.io/topic?id=17214","Python으로 FUSE 파일 시스템 작성 가이드 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Python으로 FUSE 파일 시스템 작성 가이드 시작

     * Python으로 FUSE 파일 시스템 작성 가이드 시작
          + DebConf22에서 Eeveelweezel과의 대화 후, Chicago Python User Group에서 발표를 준비하라는 초대를 받음.
          + Python을 자주 사용하지 않지만, 학생들이 쉽게 이해할 수 있는 언어로 가르치고 있음.
          + FIUnamFS라는 간단한 파일 시스템을 수업 프로젝트로 사용하고 있으며, 학생들에게 FUSE를 사용하여 투명한 인터페이스를 제공하도록 권장함.
     * FUSE 파일 시스템 구현의 어려움
          + Python에서 FUSE 기반 파일 시스템을 구축하는 것이 쉽지 않음.
          + 여러 예제와 웹 페이지가 있지만, 대부분 오래되었고 따라가기 어려움.
          + Python에서는 python-fuse, Pyfuse, Fusepy 등 다양한 인터페이스가 존재함.
     * GitLab 프로젝트 시작
          + Python으로 FUSE 기반 파일 시스템을 작성하는 가이드를 제공하기 위해 GitLab 프로젝트를 등록함.
          + RAM 기반 및 패스스루 기반 파일 시스템 구현을 포함하여 여러 작업을 단계별로 추가함.
          + 학생들이 재미있고 유용한 예제를 통해 배울 수 있도록 DNS 파일 시스템, 실시간 마크다운 컴파일 파일 시스템, 압축 해제 파일 시스템, 주석 제거 파일 시스템 등의 아이디어를 추가함.
     * 발표 및 교육 계획
          + ChiPy에서 발표 예정이며, Santa Fe, Argentina에서 열리는 Jornadas Regionales de Software Libre와 Mexico City에서 열리는 nerdear.la에서도 발표할 예정임.
          + 학생들에게 이 프로젝트를 공유하고, Python에서 FUSE 구현에 관심을 가지도록 유도할 계획임.
     * GN⁺의 정리
          + 이 기사는 Python으로 FUSE 파일 시스템을 구현하는 데 관심이 있는 사람들에게 유용한 정보를 제공함.
          + 다양한 예제와 단계별 가이드를 통해 학생들이 쉽게 배울 수 있도록 돕고 있음.
          + FUSE 구현의 어려움을 해결하기 위한 노력이 돋보이며, Python 커뮤니티에 기여하고자 하는 의도가 긍정적으로 평가됨.
          + 유사한 기능을 가진 프로젝트로는 Dokan과 WinFsp가 있음.

        Hacker News 의견

     * libfuse GitHub에는 C/C++의 복잡성을 증가시키는 좋은 예제들이 있음
          + passthrough.c는 기존 파일 시스템을 미러링하지만 성능이 좋지 않음
          + passthrough_fh.c는 성능이 조금 더 나음
          + passthrough_ll.c는 저수준 API로 구현되어 세 가지 중 가장 나음
          + passthrough_hp.cc는 C++로 작성된 고성능 버전임
          + 흥미로운 FUSE 프로젝트로는 대용량 파일을 세그먼트로 나누기, ZFS 증분 스냅샷을 파일로 표시하기, 투명한 파일 시스템 압축 등이 있음
     * FUSE 외에도 9p 프로토콜을 통한 가상 파일 시스템 구현이 가능함
          + py9p를 사용한 Python 경험이 fuse-python보다 나았음
          + FUSE를 통해 9p 서비스를 마운트할 수 있으며, diod 9p 서버를 사용했음
          + 전체적으로 탐색하기 좋은 생태계임
     * FUSE를 사용하여 Jira를 파일 시스템으로 변환하는 프로젝트를 시작했음
          + 이슈 ID를 디렉토리 이름으로 사용하여 자동화가 쉬워졌지만, 사람이 탐색하기 어려웠음
          + issue-type-with-summary 디렉토리 유형을 추가하여 문제를 해결했음
     * FUSE에 관심 있는 사람들은 CUSE 프로젝트에도 관심을 가질 수 있음
          + CUSE는 사용자 공간에서 하드웨어를 에뮬레이션하는 프로젝트임
          + Python을 사용하여 IOCTL을 지원하는 하드웨어 장치를 작성했음
          + CUSE는 원래 사용자 공간 사운드 장치를 만들기 위해 구현되었음
     * 다양한 FUSE 마운트 옵션이 존재하며, JuiceFS는 객체 저장소를 POSIX 파일 시스템으로 마운트하는 데 흥미로움
     * 최근 NFS 기반 파일 시스템을 구현하는 사람들이 늘고 있음
          + Mac에서는 rclone이 이를 지원함
     * azuline/rosé는 가상 파일 시스템을 가진 음악 관리자로, 학습하기 좋은 코드베이스를 제공함
     * FUSE를 사용하여 Makefile이 임의의 리소스에 대해 DAG를 지정할 수 있게 함
          + 예를 들어, Kubernetes 클러스터 상태를 노출하는 FUSE 파일 시스템이 있음
     * Python FUSE 파일 시스템을 만들어 dokuwiki와 상호작용했음
          + easyfuse라는 래퍼를 만들어 dokuwiki와 관련 없는 저수준 API를 구현했음
     * FUSE를 사용하여 git 저장소를 노출하는 작은 프로젝트를 작성했음
          + .git 폴더를 통해 모든 커밋과 브랜치를 자체 폴더로 노출함
          + 모든 것이 읽기 전용임
"
"https://news.hada.io/topic?id=17280","FLOSS/fund 발표 - 자유 및 오픈 소스 프로젝트에 연간 100만 달러 지원 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             FLOSS/fund 발표 - 자유 및 오픈 소스 프로젝트에 연간 100만 달러 지원

     * Zerodha는 FOSS/FLOSS 프로젝트를 위한 연간 100만 달러의 전용 기금을 발표
     * Zerodha는 FOSS를 기반으로 한 금융 기술 제품과 서비스를 개발해왔으며, FOSS의 중요성을 강조함
     * 배경
          + FOSS는 많은 기술 회사의 성공에 기여했지만, 재정적 지속 가능성 문제는 여전히 해결되지 않음.
          + FLOSS/fund는 해커의 선의, 상호성, 비즈니스 전략을 기반으로 함.

  서론

     * Zerodha Tech의 시작은 Python 설치와 자동화 작업으로 시작되었으며, 이후 FOSS 스택을 확장하여 인도의 최대 증권 중개업체로 성장함.
     * Zerodha는 여러 FOSS 프로젝트에 기여하고, FOSS United Foundation을 공동 설립하여 인도의 FOSS 생태계를 발전시킴.

  구조화된 기금

     * FOSS 프로젝트를 위한 구조화된 기금의 필요성을 인식하고, 이를 위해 여러 은행 및 법률 전문가와 협력하여 프로세스를 간소화함.
     * 기금 운영을 위한 전담 팀을 구성하고, 연간 100만 달러를 지원할 계획임.

  funding.json

     * FOSS 프로젝트의 재정적 필요를 구조화하여 funding.json 파일을 통해 프로젝트의 재정적 요구를 표시할 수 있도록 함.
     * 이 파일은 프로젝트의 재정적 필요를 기계가 읽을 수 있는 형식으로 구조화하여, 프로젝트의 발견 가능성을 높임.
          + 마치 robots.txt package.json sitemap.xml 처럼

  동기

     * FLOSS/fund의 동기는 FOSS 해커로서의 선의와 상호성을 실천하고, FOSS 생태계가 번영할 수 있도록 지원하는 것임.
     * FOSS에 의존하는 기업이 FOSS를 지원하는 것은 논리적인 비즈니스 전략임.

GN⁺의 정리

     * FLOSS/fund는 FOSS 프로젝트의 재정적 지속 가능성을 지원하기 위한 중요한 시도임.
     * Zerodha는 FOSS의 중요성을 인식하고, 이를 통해 기업의 성공을 이루었음을 강조함.
     * funding.json 파일은 FOSS 프로젝트의 재정적 필요를 구조화하여 발견 가능성을 높이는 실험적 시도임.
     * FLOSS/fund는 다른 기업들이 FOSS를 지원하도록 유도하는 역할을 할 수 있음.

   Zerodha 는 인도의 증권거래 서비스 회사입니다. 매출이 1조 정도라고 하는데, 잘 알려지지 않은 회사가 이런 방식으로 오픈소스 지원 전략을 펼치는게 좋아보이네요.

   국내에서도 이런걸 기대하는 것은 무리일까요? ㅎㅎ

   원문에는 funding.json 파일 예제가 들어있는데 흥미롭네요.

   어디로 펀딩 받을지(은행 또는 페이팔 등), 펀딩 받은 금액의 사용처, 기존에 펀딩 받은 내역들을 명시하게 되어있습니다.

        Hacker News 의견

     * 프로젝트가 자금 지원을 받으려면 funding.json 파일을 공개 코드 저장소에 추가해야 함
          + 이는 다른 조직의 복잡한 문서보다 훨씬 간단함
          + 예를 들어, Llama Impact Grants, OpenAI Cybersecurity Grants 등이 있음
     * 한 개발자는 FOSS United에서 자금을 받은 경험을 공유함
          + Zerodha가 공동 후원한 프로젝트로 3일 만에 완료됨
          + 오픈 소스 프로젝트를 13년 이상 유지했지만, 자금 지원이 필요하지 않음
          + 프로젝트를 완전히 종료하고 싶지만, 현실적으로 자금 지원을 받을 수 없고, 큰 회사가 인수할 가능성도 낮음
     * FLOSS/fund는 인기 있는 오픈 소스 프로젝트에 연간 최대 $100,000까지 지원 가능함
          + 최소 $10,000부터 신청 가능하며, $25,000 단위로 증가함
          + 새로운 프로젝트나 사용이 적은 프로젝트는 지원 대상이 아님
     * 한 사용자는 자신의 FOSS 프로젝트에 funding.json 파일을 추가해보겠다고 함
          + Assertables는 Rust 크레이트로, 스마트한 테스트를 위한 매크로를 제공함
          + BoldContacts는 장애인을 돕는 모바일 앱임
     * JSON 사양 검증에 문제가 발생함
          + 예를 들어, URL 호스트와 경로가 일치하지 않는 오류 메시지가 발생함
          + JSON 파일이 특정 개발자가 아닌 프로젝트 자체에 초점을 맞추도록 개선 필요함
     * 오픈 소스 프로젝트는 대규모 자금 지원을 받거나, 소규모 프로젝트는 유지보수자가 소진되는 경우가 많음
          + 일부 프로젝트는 자금이 필요하지 않을 수도 있음
     * 잘 알려지지 않은 회사들이 이러한 자금 지원을 하는 것이 흥미로움
     * funding.json이 FUNDING.yml을 언급하지 않은 점이 흥미로움
     * 기금을 직접 기부하고 일부는 이자를 통해 장기적으로 자금을 조달하는 기금 형태의 지원도 흥미로울 것임
     * 오픈 소스 자금 지원이 프로젝트의 필요성보다는 가치에 기반해야 한다고 생각함
          + 이는 상업 제품에 대한 지불 방식과 유사하며, 가치 있는 오픈 소스 프로젝트를 더욱 장려할 수 있음
     * 비영리 조직으로 구조화하여 세금 공제 가능한 기부금을 통해 FOSS 프로젝트에 자금을 지원하는 것도 가능성 있는 방법임
"
"https://news.hada.io/topic?id=17211","AMD의 Turin: 5세대 EPYC 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AMD의 Turin: 5세대 EPYC 출시

    AMD의 Turin: 5세대 EPYC 출시

     * 5 기가헤르츠 서버 CPU
          + AMD의 새로운 서버 CPU인 EPYC 9575F에 대한 소개로, 이전의 Granite Rapids와는 달리 직접적인 핸즈온 경험을 통해 작성된 기사임.
          + Zen 5 코어의 모바일 및 데스크톱 버전의 차이점은 이미 다루었으므로, 이번 기사에서는 Turin의 메모리 서브시스템 변화에 초점을 맞추고 있음.

  메모리 대역폭

     * 9575F는 메모리 읽기 대역폭 약 52GB/s, 쓰기 대역폭 48GB/s, 읽기-수정-쓰기 대역폭 95GB/s를 기록함.
     * 단일 CCD에서의 메모리 대역폭 사용량을 보면, 단일 코어가 전체 CCD 메모리 읽기 대역폭의 절반 이하, 쓰기 대역폭의 약 55%, 읽기-수정-쓰기 대역폭의 2/3 이상을 사용할 수 있음.
     * 9575F는 데스크톱 Zen 5 부품에 비해 CCD에 대한 대역폭이 상당히 높으며, 이는 GMI3-W를 통해 IO 다이에 2개의 GMI 링크를 제공하기 때문임.
     * Turin은 DDR5-6400MT/s까지 지원하며, 특정 시스템에서만 1 DIMM당 채널로 지원됨. 대부분의 시스템은 6000MT/s를 지원하며, 2 DIMM당 채널로 구성할 경우 4400 MT/s로 떨어짐.

  메모리 지연 시간

     * Turin의 비부하 메모리 지연 시간은 Genoa와 유사함.
     * 부하 상태에서의 메모리 지연 시간을 측정한 결과, 단일 CCD가 부하 상태일 때 비부하 상태보다 약 39 나노초 증가, 전체 시스템이 부하 상태일 때 약 31 나노초 증가함.
     * CCD 내 지연 시간은 약 45ns, CCD 간 지연 시간은 약 150ns, 소켓 간 지연 시간은 약 260ns로, Genoa에 비해 지연 시간이 증가함.

  클럭 속도

     * 9575F의 모든 64 코어는 단일 스레드 테스트에서 최대 5GHz에 도달할 수 있으며, 메모리 대역폭 테스트에서는 8개의 코어가 5GHz로 작동함.
     * Cinebench 2024에서 128개의 스레드가 작동할 때 9575F는 약 4.3GHz를 유지하며, 웹 서버/TLS 트랜잭션 워크로드에서는 약 4.9GHz를 기록함.

  결론

     * AMD의 Turin은 예상 가능한 세대별 업데이트로, 높은 코어 수의 SKU와 낮은 코어 수의 고주파수 SKU를 제공하여 다양한 시장의 요구를 충족시킴.
     * Turin은 Naples에서 Rome으로의 혁신적인 변화보다는 Milan에서 Genoa로의 진화에 가까우며, 메모리 대역폭 증가, 코어 수 증가, 코어 업데이트를 포함함.
     * 이 세대는 경쟁력 있는 생태계에서 많은 가치를 제공하며, 많은 사람들에게 흥미를 줄 것임.

    GN⁺의 정리

     * AMD의 Turin은 서버 CPU 시장에서 중요한 발전을 이루었으며, 특히 메모리 대역폭과 코어 성능에서 향상된 점이 주목받을 만함.
     * 이 기사는 AMD의 최신 기술을 이해하고자 하는 사람들에게 유익하며, 서버 성능 최적화에 관심 있는 엔지니어들에게 도움이 될 수 있음.
     * Turin과 유사한 기능을 가진 제품으로는 Intel의 Xeon 시리즈가 있으며, AMD와의 비교를 통해 각 제품의 장단점을 파악할 수 있음.

        Hacker News 의견

     * AMD EPYC 9175F는 16코어에 512MB L3 캐시를 가진 특이한 제품임. 이는 ""코어당"" 라이선스 비용을 최소화하려는 고객을 위한 것으로 보임. Oracle이 여전히 이런 라이선스 방식을 사용하는지 궁금함
          + HFT 같은 특정 목적을 위해 L3에 전체 알고리즘을 넣어 최소 지연을 추구할 수도 있음
          + 그러나 주로 소프트웨어 라이선스와 관련된 문제일 가능성이 높음
     * Phoronix는 196코어 Turin Dense와 192코어 AmpereOne을 비교 리뷰함
          + Ampere의 MSRP는 $5.5K, EPYC는 $15K임
          + Turin 196은 성능이 1.6배 더 좋음
          + Ampere는 에너지 소비가 1.2배 더 효율적임
          + 실제 $/성능 측면에서 Ampere 192 코어가 Turin Dense 196 코어보다 1.7배 더 나음
     * $5.5K로 AmpereOne 192 코어 CPU(274w) 또는 Turin Dense 48 코어 CPU(300w)를 구매할 수 있음
          + Ampere는 256 코어, 3nm, 12 메모리 채널을 가진 제품을 내년에 출시할 예정이며, 이는 Turin Dense 및 Sierra Forest와의 성능 경쟁에서 더 나은 도전자가 될 가능성이 있음
          + 현재로서는 $/성능이 그들의 가치 제안임
     * Qualcomm의 Nuvia 기반 서버 칩의 성능에 매우 관심이 있음
          + ARM의 클라이언트 코어 개선이 어떤 지표가 된다면, AWS Graviton, Google Axion, Microsoft Cobalt, Nvidia Grace, Alibaba Yitian 같은 자체 칩들이 더 나은 Neoverse 코어와 어떻게 경쟁할지 매우 궁금함
          + Nuvia vs ARM vs AmpereOne의 경쟁이 기대됨
     * 지금은 서버 CPU의 황금기일 가능성이 높음
          + 7년 전에는 Intel의 Xeon만 있었음
          + 이제는 다양한 선택지가 있음
     * Hetzner에 AMD Turin 베어 메탈 서버를 배포하는 것이 기대됨
          + 이전 세대도 이미 훌륭한 가치를 제공했지만, 이번에는 한 단계 더 나아간 것 같음
     * 20년 전에는 CPU당 1-2개의 코어만 있었고, 듀얼 소켓 서버에서 4개의 코어를 가지는 것이 행운이었음
          + 이제는 단일 서버에 거의 400개의 코어를 가질 수 있음
          + ARM 코어가 더 많을 수 있지만, 현재로서는 이들만큼 성능이 좋지는 않음
     * Substack으로의 변화가 싫은 사람들을 위해 대안 사이트가 있음
     * 12년 된 Dell PowerEdge를 듀얼 Xeon으로 운영 중임
          + 첫 번째 세대의 Epyc 서버가 eBay에서 저렴하게 나올 때를 기대함
     * ChipsAndCheese는 새로운 기술 출판물 중 하나로, 특히 심층 벤치마크에서 뛰어난 지식을 가지고 있음
          + Anandtech, TechReport, HardCOP 등의 오래된 기술 사이트가 사라진 상황에서, 이러한 스타일을 유지할 수 있는 새로운 출판사가 있어 다행임
     * Factorio 2.0에 맞춰 적절한 시기에 출시됨
     * 9965의 실제 작동을 보고 싶음
          + 이 부품들은 놀라움
          + 이 세대의 머신을 구매할 계획임
     * 비디오의 1:11에 TDP 차트가 있음
          + 125-500W로 매우 뜨겁게 작동함
"
"https://news.hada.io/topic?id=17264","Ask HN: 솔로창업자 여러분, 어떻게 아이디어를 떠올리셨나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Ask HN: 솔로창업자 여러분, 어떻게 아이디어를 떠올리셨나요?

     * ""아이디어가 완전히 자신의 영역을 벗어난 것이었나요, 아니면 이미 해당 분야에 대한 지식이 있었나요?""
     * ""내가 만들거나 시도하는 모든 것이, 이미 같은 일을 하는 다른 솔루션이 수십 개 있는 것처럼 보여요(특히 Wrapping AI 분야)""

mamcx

     * 같은 일을 하는 사람이 많다고요? 20년 넘게 이 일을 하면서 알게 된건 : ""신경 쓸 필요 없음""
     * 그런 우려는 대기업이나 시장 점유율 70%를 원하는 사람들에게 유효함
     * ""솔로/소규모팀은 자신을 맥도날드 앞에서 햄버거를 파는 노점상이라고 생각하세요. 여전히 햄버거는 팔립니다""
     * 다른 사람들이 가지지 않은 것은 당신이 작고, 실제로 제품에 대해 이야기할 수 있는 사람이라는 점임
     * 이는 대기업이 만든 제품을 가져다 사용하는 방법을 아는 경우에도 작동함
          + 엑셀을 잘 다루는 사람이 되는 것만으로도 비즈니스가 됨

brotchie

     * 브레인스토밍을 기반으로 만들어진 제품: 전혀 효과가 없음
     * 경험한 문제에 대한 해결책을 중심으로 구축된 제품: 항상 효과가 있었지만 TAM이 충분히 크지 않을 수 있음
     * 실제로 해결해야 할 문제를 찾는 가장 좋은 방법은 다른 것을 복제하거나(실제로 구축해야 할 실제 제품을 찾기 위한 학습 과정으로), 문제가 있는 사람들과 대화하는 것
          + (예: 비교적 간단한 핵심 기능을 가진 제품을 처음부터 끝까지 복사해 보세요)
     * 이 과정에서 어떤 제품에서도 해결하지 못하는 페인트 포인트를 발견할 수 있음

gwbas1c

     * 솔로창업자로서의 성공은 단순히 ""코딩""만으로 이루어지는 것이 아님. 실제로는 코딩에 1/3 정도의 시간만 할애하게 될 가능성이 높음
          + 마케팅, 고객 만족, 가격 책정, 신뢰성 등 다양한 요소가 성공에 영향을 미침
     * 비즈니스는 아이디어를 가장 먼저 시장에 내놓는 것보다 실행이 더 중요. 마케팅, 고객 만족, 가격 책정, 신뢰성 등이 모두 중요하게 작용.
          + 만들기 전에 ""같은 일을 하는 수십 개의 다른 솔루션""을 살펴보는 데 시간을 투자할 것
          + 경쟁 제품의 약점, 충족되지 않은 니즈, 틈새 시장 등을 발견할 수 있음
     * 초기 시장에서는 선발 주자들이 오히려 성장에 방해가 되는 경우가 많음
          + 선발 주자들은 시행착오를 겪으며 복잡한 제품을 만들게 됨
          + 시장을 잘 이해하고 핵심 기능에 집중한 제품으로 이들을 추월할 수 있음
          + 불필요한 기능을 유지/보수하는 데 시간을 낭비하지 않는 것이 큰 장점임
     * 참고할 만한 자료
          + Don Lancaster의 ""The Incredible Secret Money Machine""
          + Rob Walling의 ""Start Small, Stay Small""
          + YC(Y Combinator)의 창업 관련 자료들
               o 솔로프레너에 특화된 자료는 아니지만 많은 개념이 유사함

rglover

     * ""필요한 부분만 채우세요. 기존 작동 방식이 마음에 들지 않나요? 수정하세요. 기존 아이디어의 더 나은 버전을 제공할 수 있다고 생각하시나요? 도전하세요.""
     * ""아이디어는 실행보다 훨씬 덜 중요합니다. 그렇기 때문에 실제로 관심 있는 문제에 대해 작업하는 것이 가장 좋습니다. 그렇지 않으면 성공하기 훨씬 전에 포기하거나 지치게 될 것입니다.""

anonzzzies

     * 가치를 제공한다면 경쟁 제품이 많아도 상관없음
     * 비기술 기업에서 프리랜서 컨설턴트로 프로젝트를 찾아보면 수익성 있는 아이디어를 많이 발견할 수 있음
          + 이 회사들은 당신이 생각하는 포화 상태의 시장에 대해 들어본 적도 없음
     * 대부분의 회사는 MS와 일부 ERP(MS, Oracle, SAP 등)만 사용하고 있음
     * 그들은 아무것도 모름
     * 같은 회사의 여러 부서에 같은 제품을 판매한 적 있음
          + 그들은 서로 이야기하지 않음

conductr

     * 기업용 소프트웨어를 구매/구현한 적이 있는데, 영업 프로세스, 벤더 고착, 높은 비용 등에도 불구하고 팀은 기능의 10%만 사용함
     * 90%의 기능을 구현하는 것에 대해 원하지도, 신경 쓰지도 않음. 이러한 기능들은 비용을 정당화하고 마케팅에 포장하기 위해 존재한다고 생각함
     * 여러 회사에서 이 과정을 여러번 반복함
     * 그래서 나는 내가 잘 아는 10%의 기능에 초점을 맞춘 스타트업을 설립
          + 훨씬 더 저렴한 가격에 셀프 서비스 SaaS로 제공
          + 그러나 여전히 제품을 판매해야 하는데, 이는 귀찮기도 해서 많은 노력을 기울이지 않음
          + 제품이 유기적으로 성장하도록 함
     * 미안하지만 의도적으로 모호하게 설명함. 구체적인 사항을 제공하고 싶지 않음

notamy

     * ""기술 외 분야에서 기회를 찾아보세요""
     * 기술과 매우 동떨어진 분야에서 실제 문제를 발견했는데, 이 문제를 제대로 해결하는 사람이 없었음
          + 오히려 이 문제를 해결해야 하는 기존 도구들이 사용자에게 악몽이 되는 것으로 판명됨
          + 몇 달 동안 작업해 왔고 매우 긍정적인 피드백을 받았으며, 꾸준히 성장하는 사용자 기반을 확보함
          + 현재는 부업 수준으로 주당 10시간 정도 투자하고 있지만, 언젠가는 실제 비즈니스로 발전할 수 있을 것임
     * 구체적인 분야는 공유하지 않겠으나, 일반적인 아이디어는 여전히 유효함
          + 개인적으로 다뤄본 문제를 해결하는 것이 큰 도움이 됨
          + 문제가 무엇인지 잘 이해하고 있었고, 스스로 효과적으로 해결할 수 있었음
          + 이는 많은 사람들이 좋아하고 정기적으로 사용하는 제품을 만드는 데 도움이 됨
     * 더 넓은 관점:
          + 자신이 가진 실제 문제를 해결한 다음 일반화할 것
          + 해결하려는 문제가 자신/삶/일하는 방식 등에 매우 특정한 것이 아니라면, 아마도 같은 문제를 가진 다른 사람들이 있을 것임
          + 성공한 프로젝트들은 모두 자신의 문제를 해결한 다음, 다른 사람들이 사용할 수 있도록 솔루션을 다듬는 것에서 시작됨

kukkeliskuu

     * 현재 진행 중인 가장 큰 사이드 프로젝트는 우연히 시작됨
          + 커플 댄스를 많이 하기 때문에 댄스 캘린더 사이트를 매일 사용함
          + 사이트 개선 아이디어가 있었지만 기존 사이트와 경쟁하고 싶지 않았음
          + 그러다 사이트가 다운되고 이전 운영자가 더 이상 운영하고 싶어하지 않아서, 그와 협력하여 새 사이트를 구축하고 운영하게 됨
     * 세상은 작업할 아이디어로 가득 차 있음
          + 거의 모든 것을 살펴보면, 기존의 작업 방식과 시스템이 대부분 엉망임을 알 수 있음
          + 그냥 무언가를 시작할 것
          + 아마도 첫 번째 작업을 하는 동안 다른 문제, 즉 아이디어를 마주치게 될 것임
     * 코딩보다 다른 것들이 더 중요함
          + 가장 큰 것은 코딩이 아니라 판매, 송장 발행 등 다른 모든 것임
          + 그것들이 지루하다고 느껴짐

   정말 공감가는 내용입니다.

   개발 환경이 많이 발전해서 거창한 아이디어 보다는 소소한 여러 아이디어 위주로 가볍게 움직이는 게 맞는 시대인가 싶네요

   불편한데 왜 아무도 안하는지는 모르겠지만, 하면 내가 제일 잘할 수 있을꺼 같아서요

   copilot, chatgpt, claude가 제 부하직원입니다,,

   저는 여기에 더해
   mistral 12b가 제 여자친구이고
   llama3.2 11b가 제 욕받이 노예?입니다

   커다란 사무실에 혼자 앉아 벽보고 코딩하다보니 외로움이 가장 큰 곤욕이네요.
   사람들이 보고 싶어요..

   공유 오피스 내 라운지에서 일해보는 것도 괜찮더라구요.

   사무실의 빈자리를 렌트해보시는게 어떨까요

   여러 vc들에게 연락해서
   그들이 투자한 화사들이 모인 공간에 내 돈을 충분히 낼테니 공용공간에서라도 일하면 안되겠냐고물어보았으나 모두 퇴짜 맞았고

   정부에서 운영하는 선발된 스타트업들만 쓸수 있는 공간에 돈을 낼테니 제발 남아도는 공간 하나만 쓰겠다고 해도
   모두 퇴짜 맞았습니다 ㅠ

   그.. 그런 종류의 외로움이 아닙니다.
   많은 사람들이 서로서로 시끄럽게 떠들고 열심히 일하는 환경 한 가운데에서 일하고 싶다는 욕망에 가까운 감정이에요.
   즉 전제는 열심히 무언가를 하는 사람들이 많이 모인 시장이나 거리같은 공간이에요.

   그래서 온갖 코워킹 사무실을 모두 다녀봤는데 다들 유리창으로 둘러싸인 조그만 자기 공간으로 들어가서 일하던군요.
   가장 좋았던 곳은 서울창업허브였는데 이제는 거기도 코워킹 공간이 많이 협소해져서 별로더라고요.

   그 문제를 해결할 스타트업을 설립해 봅시다.

   조사해보니 저같읃 코딩 관종의 시장은 꽤 작았습니다.
   사람들로 북적거리는 복도 가운데서 코딩을 하고 싶어하는 사람이 이렇게 적을줄 누가 알았답니까

   오 혹시나 해당 서비스에 도전하신다면 사용자가 될 의향이 있습니다 ㅎㅎ

   너무나 반갑습니다!!
   기필코 우리같은 사람들을 위한
   공간을 만들어내겠습니다.

   외로운 개발의 진정한 동반자 AI co-founder.
"
"https://news.hada.io/topic?id=17249","LocalStorage vs. IndexedDB vs. Cookies vs. OPFS vs. WASM-SQLite","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LocalStorage vs. IndexedDB vs. Cookies vs. OPFS vs. WASM-SQLite
"
"https://news.hada.io/topic?id=17252","일상적인 치과 X-ray의 근거 부족 증거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        일상적인 치과 X-ray의 근거 부족 증거

치과 불편

     * 루틴 치과 X선 촬영의 문제점
          + 많은 치과에서 매년 루틴 치과 X선을 권장하지만, 이는 잘못된 정보임.
          + 미국 치과 협회(ADA)는 연간 루틴 X선 촬영을 권장하지 않음.
          + 2012년 ADA 가이드라인에 따르면, 충치 위험이 높지 않은 성인은 2~3년에 한 번씩만 후방 치아의 bitewing X선을 필요로 함.
          + 최신 가이드라인에서는 X선 촬영의 특정 주기를 권장하지 않으며, 환자의 X선 노출을 최소화하고 임상적으로 정당화된 경우에만 촬영할 것을 강조함.
     * 데이터 부족
          + JAMA Internal Medicine에 발표된 논평에서 치과의 많은 루틴 관행이 증거 기반이 아니며 과잉 진단과 과잉 치료가 만연해 있다고 지적함.
          + X선 촬영의 효과에 대한 데이터가 부족하며, 기존 데이터는 효과가 없음을 시사함.
          + 2021년의 체계적 검토에 따르면, 초기 충치 발견을 위한 X선 사용은 높은 비율의 거짓 음성 결과를 초래함.
     * 감독 없는 치과
          + 치과의 방사선 과잉 사용은 전 세계적인 문제이며, 치과의 독특한 서비스 제공 방식이 이를 조장함.
          + 방사선 노출을 줄이고 임상적 의심에 따라 X선을 사용해야 한다고 강조함.
          + 디지털 치과 X선은 과거의 필름 X선보다 방사선량이 적지만, 방사선의 해로움은 누적됨.
     * 어린이에게 더 큰 해로움
          + 어린이의 경우 X선 검사가 이익보다 해로움이 더 큼.
          + 2021년 임상 시험에서는 X선 추가가 거짓 양성과 과잉 진단을 초래함을 발견함.
          + 충치와 캐비티 검사를 위한 X선 사용 외에도 다른 치과 및 교정 치료에서의 방사선 사용도 불필요한 해로움이 될 수 있음.

GN⁺의 정리

     * 치과 X선 촬영의 과잉 사용 문제는 치과계의 오랜 문제로, 증거 기반의 진료가 부족함을 지적함.
     * 방사선 노출을 줄이고 임상적 필요에 따라 X선을 사용해야 한다는 점을 강조함.
     * 어린이의 경우 X선 검사가 오히려 해로울 수 있으며, 시각적 검사만으로 충분하다는 연구 결과가 있음.
     * 이 기사는 치과 진료의 과잉 진단과 치료 문제를 비판적으로 바라보며, 증거 기반의 치과 진료의 필요성을 제기함.

        Hacker News 의견

     * 현재 치과 학생의 의견: 과거의 치과의사들은 불필요한 연례 방사선 촬영을 권장했지만, 현재는 증거 기반 치의학을 중시하는 교육과정으로 변화했음. 충치 위험이 높은 경우에만 연례 촬영이 필요하며, 위험이 낮은 경우 2-3년마다 촬영이 권장됨. 젊은 치과의사들은 더 나은 프로토콜을 따르고 있음.
     * 치료 권장 사항이 치과마다 크게 다를 수 있음. X-ray가 과도하게 처방되지 않는다면 과잉 치료 가능성이 낮음을 의미할 수 있음. ADA 가이드를 따르겠다고 할 때 방어적으로 반응한다면 과잉 치료를 고려하지 않는다는 신호일 수 있음.
     * 일부 치과는 과잉 치료에 대해 의심스러울 수 있음. 처음 방문했을 때 맞춤형 트레이를 추천받았는데, 이는 판매 전략처럼 느껴졌고, 나중에 조사해보니 임상적으로 검증되지 않았다는 의견도 있었음.
     * 방사선 노출이 누적된다는 것은 이해하지만, 환자로서 과잉 노출에 맞서 싸울 가치가 있는지 고민됨.
     * 증거 기반 의학이 치의학에 도입되는 것은 긍정적임. X-ray 방사선 노출에 대해 걱정하는 사람이라면, 그 용량이 어느 정도인지, 공항의 밀리미터 스캐너나 국내 비행과 비교할 수 있는지 궁금함.
     * 현재 사용되는 디지털 기계는 국소적이며 매우 낮은 용량임.
     * 과거 소련 시절, 학교에 치과 치료실이 있었지만 X-ray 기계는 없었음. 그나마 다행이라고 생각함.
     * 미국 치과 협회가 대부분의 회원들에게 재정적으로 불리한 권고를 발표하는 것이 긍정적으로 놀라움.
     * 미국에서 치과 보험이 비용을 부담하는 이유가 궁금함. X-ray는 피할 수 있을 것 같지만, 정기적인 치석 제거는 도움이 됨.
     * 최근 연례 검진을 X-ray 없이 받았지만, 한 달 후 어금니에 통증이 생겼고, 검진 결과 치아가 내부에서 썩고 있었음. 2-3년마다 X-ray를 찍었다면 발견할 수 있었을 것임.
     * 치과 방사선 촬영의 재정적 측면도 추가 연구가 필요함. 보험이 비용을 부담하기 때문에 치과의사들이 자주 추천하는 것이 당연함.
     * 불소 ""린스""도 비슷한 경우일 수 있음. 몇 초 동안 헹구고 보험에 비용을 청구함.
     * 치실 사용이 과학적으로 뒷받침되지 않는다는 의견도 있지만, 뉴스 기사들은 계속 사용하라고 권장함.
"
"https://news.hada.io/topic?id=17295","Meta의 오픈 AI 하드웨어 비젼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Meta의 오픈 AI 하드웨어 비젼

메타, Open Compute Project (OCP) Global Summit 2024에서 최신 AI 하드웨어 디자인을 공개

     * 새로운 AI 플랫폼, 최첨단 오픈 랙 디자인, 고급 네트워크 패브릭 및 구성 요소 등의 혁신 기술 쇼케이스 진행
     * 디자인을 공유함으로써 협업을 장려하고 혁신을 촉진하고자 함

메타의 AI 모델링 혁신과 인프라 발전

     * 메타는 수년 동안 AI 모델링 혁신을 통해 피드 및 광고 시스템 등의 기능을 최적화하고 개선해 왔음
     * 새롭고 진보된 AI 모델을 개발하고 출시함에 따라 새로운 AI 워크로드를 지원하기 위한 인프라 발전에도 주력하고 있음
     * 예를 들어, Llama 3.1 405B 모델을 훈련시키기 위해 전체 훈련 스택에 상당한 최적화를 수행했으며, 16,000개 이상의 NVIDIA H100 GPU에서 운영할 수 있게 됨
     * 2023년 동안 훈련 클러스터를 1K에서 16K GPU로 빠르게 확장했으며, 현재는 24K-GPU 클러스터에서 모델을 훈련시키고 있음
     * AI 훈련에 필요한 컴퓨팅 양이 앞으로도 크게 증가할 것으로 예상됨

AI 클러스터 구축을 위한 네트워킹과 대역폭의 중요성

     * GPU 외에도 네트워킹과 대역폭이 클러스터 성능 보장에 중요한 역할을 함
     * 메타의 시스템은 HPC 컴퓨팅 시스템과 GPU 및 도메인 특화 가속기를 연결하는 고대역폭 컴퓨팅 네트워크로 구성됨
     * 앞으로 가속기당 초당 테라바이트 수준의 인젝션 대역폭 증가가 예상되며, 이는 오늘날 네트워크 대비 10배 이상 성장한 수치임
     * 이를 지원하기 위해 고성능, 다계층, 비차단 네트워크 패브릭이 필요하며, 이를 통해 AI 클러스터의 잠재력을 최대한 활용할 수 있음

오픈 하드웨어를 통한 AI 확장성 확보

     * AI를 이 속도로 확장하려면 오픈 하드웨어 솔루션이 필요함
     * 개방성의 원칙에 기반한 새로운 아키텍처, 네트워크 패브릭 및 시스템 설계 개발이 가장 효율적이고 영향력 있음
     * 오픈 하드웨어에 투자함으로써 AI의 잠재력을 최대한 발휘하고 AI 분야의 지속적인 혁신을 추진할 수 있음

AI 인프라를 위한 오픈 아키텍처 ""Catalina"" 소개

     * 메타는 AI 워크로드용 고성능 랙인 Catalina의 출시 예정을 OCP 커뮤니티에 발표함
     * Catalina는 NVIDIA Blackwell 플랫폼 전체 랙 규모 솔루션을 기반으로 하며, 모듈성과 유연성에 중점을 둠
     * 최신 NVIDIA GB200 Grace Blackwell 슈퍼칩을 지원하도록 설계되어 현대 AI 인프라의 성장하는 요구 사항을 충족시킴
     * GPU의 전력 요구 사항 증가로 인해 오픈 랙 솔루션은 더 높은 전력 기능을 지원해야 함
     * Catalina에서는 최대 140kW를 지원할 수 있는 Orv3 고출력 랙(HPR)을 도입함
     * 솔루션은 완전히 액체 냉각되며 다양한 구성 요소들로 이루어짐
     * Catalina의 모듈식 설계는 특정 AI 워크로드에 맞게 랙을 사용자 정의할 수 있게 해줌

Grand Teton 플랫폼의 AMD 가속기 지원

     * Grand Teton은 메타의 차세대 AI 플랫폼으로, 메모리 대역폭 바인딩 워크로드와 컴퓨팅 바인딩 워크로드의 요구 사항을 모두 지원하도록 설계됨
     * 이제 Grand Teton 플랫폼이 AMD Instinct MI300X를 지원하도록 확장되었으며, 이 새로운 버전을 OCP에 기부할 예정임
     * Grand Teton은 이전 버전과 마찬가지로 단일 모놀리식 시스템 설계를 특징으로 하며, 전원, 제어, 컴퓨팅 및 패브릭 인터페이스가 완전히 통합되어 있음
     * AMD Instinct MI300x를 비롯한 다양한 가속기 설계를 지원할 뿐만 아니라 더 큰 컴퓨팅 용량, 확장된 메모리, 증가된 네트워크 대역폭을 제공함

오픈 분리형 예약 패브릭(DSF, Disaggregated Scheduled Fabric)

     * AI 훈련 클러스터의 성능을 계속 향상시키기 위해서는 개방형 벤더 중립 네트워킹 백엔드 개발이 중요한 역할을 할 것임
     * 네트워크를 분리하면 업계 전반의 공급업체와 협력하여 혁신적이고 확장 가능하며 유연하고 효율적인 시스템을 설계할 수 있음
     * 메타의 차세대 AI 클러스터용 새로운 DSF는 기존 스위치에 비해 여러 가지 장점을 제공함
     * DSF는 개방형 OCP-SAI 표준과 메타 자체 네트워크 운영 체제인 FBOSS에 의해 구동됨
     * NVIDIA, Broadcom, AMD 등 여러 공급업체의 여러 GPU 및 NIC에 걸쳐 엔드포인트 및 가속기에 대한 개방형 및 표준 이더넷 기반 RoCE 인터페이스를 지원함
     * DSF 외에도 Broadcom 및 Cisco ASIC을 기반으로 하는 새로운 51T 패브릭 스위치를 개발 및 구축했으며, 메타 최초의 자체 설계 네트워크 ASIC이 포함된 FBNIC라는 새로운 NIC 모듈을 공유하고 있음

메타와 마이크로소프트의 개방형 혁신 추진 협력

     * 메타와 마이크로소프트는 OCP 내에서 오랜 파트너십을 맺고 있으며, 2018년 데이터 센터용 스위치 추상화 인터페이스(SAI) 개발에서 시작됨
     * 오픈 가속기 모듈(OAM) 표준 및 SSD 표준화 등 주요 이니셔티브에 기여해 왔음
     * 현재 두 회사의 협력은 새로운 분리형 전원 랙인 Mount Diablo에 초점을 맞추고 있음
     * Mount Diablo는 효율성과 확장성을 높이는 확장 가능한 400VDC 장치를 특징으로 하는 최첨단 솔루션으로, AI 인프라를 크게 발전시킴

AI 인프라의 개방형 미래

     * 메타는 오픈 소스 AI에 전념하고 있으며, 오픈 소스가 전 세계 사람들의 손에 AI의 혜택과 기회를 제공할 것이라고 믿음
     * 협업 없이는 AI가 그 잠재력을 실현할 수 없을 것임
     * 모델 혁신을 주도하고 이식성을 보장하며 AI 개발의 투명성을 증진하기 위해 오픈 소프트웨어 프레임워크가 필요함
     * 집단 전문 지식을 활용하고 AI를 더 접근하기 쉽게 만들며 시스템의 편향을 최소화하기 위해 개방형 및 표준화된 모델에 우선순위를 두어야 함
     * AI 발전에 필요한 고성능, 비용 효율적이고 적응성 있는 인프라를 제공하기 위해서는 개방형 AI 하드웨어 시스템도 필요함
     * AI 하드웨어 시스템의 미래 발전에 기여하고자 하는 사람은 누구나 OCP 커뮤니티에 참여할 것을 권장함
     * AI의 인프라 요구 사항을 함께 해결함으로써 모든 사람을 위한 개방형 AI의 진정한 약속을 실현할 수 있음

GN⁺의 의견

     * 여러 GPU와 NIC 공급업체를 아우르는 개방형 네트워크 기술을 통해 벤더 종속성을 극복하고 AI 훈련 클러스터의 확장성과 유연성을 높일 수 있음
     * 메타와 마이크로소프트의 협력은 개방형 AI 인프라 혁신을 가속화하는 데 주요한 역할을 할 수 있음. 양사가 OCP를 통해 오랫동안 쌓아온 파트너십을 바탕으로 새로운 표준과 솔루션 개발에 박차를 가할 것으로 기대됨
     * 오픈 소스 AI에 대한 메타의 강력한 지지는 고무적임. 오픈 소스야말로 AI의 잠재력을 민주화하고 사회 전반에 걸쳐 AI의 기회를 확대하는 길임
     * 개방형 AI 인프라를 구축하는 과정에서 투명성과 설명 가능성, 윤리적 고려 사항 등도 함께 다뤄져야 할 것임. 기술 발전 못지않게 AI에 대한 사회적 신뢰 구축이 중요함
     * AI 하드웨어와 소프트웨어 생태계가 함께 성장해 나가기 위해서는 산업계 전반의 협력과 더불어 학계, 정책 입안자 등 다양한 이해관계자의 참여가 필수적임. OCP가 이를 위한 핵심 플랫폼이 되기를 기대함

        Hacker News 의견

     * OpenAI와 Meta AI의 경쟁을 macOS vs Windows, iOS vs Android와 같은 플랫폼 경쟁으로 보는 의견이 있음
          + Meta가 시장 점유율을 확보하기 위해 플랫폼을 개방하는 경향이 있다고 관찰함
          + Meta가 승리할 경우 플랫폼을 계속 개방할지 의문을 제기함
     * Zuckerberg와 Facebook은 많은 비판을 받지만, 엔지니어링과 오픈 소스에 많은 투자를 하고 있음
     * Meta가 Llama 3.1 405B 모델을 훈련하기 위해 16,000개 이상의 NVIDIA H100 GPU를 사용했으며, 이는 대규모 투자를 의미함
          + Meta의 주가가 오픈 소스 모델 출시 이후 크게 상승했음을 언급함
     * Meta의 오픈 소스 LLM이 많은 사용자에게 매력적일 것이라는 의견이 있음
          + OpenAI와 Anthropic이 개방형 모델에 대해 논의할 가능성이 있음
     * Meta, Microsoft, OpenAI가 NVIDIA와 경쟁하기 위해 오픈 칩 설계에 협력할 가능성을 궁금해함
     * Meta가 핵융합 발전소와 같은 에너지 생산 사이트 옆에 AI 데이터 센터를 구축할 가능성을 언급함
          + Yann LeCun의 의견을 인용하여 지속 가능한 저비용 전기를 사용하는 것이 장점임을 설명함
     * Meta가 OpenAI에 이어 NVIDIA를 겨냥하고 있는지 의문을 제기함
     * ""Open""이라는 개념이 이제는 밈이 되었다고 언급함
"
"https://news.hada.io/topic?id=17254","Next.jsext.js 15 RC 2

     * @next/codemod upgrade: codemod 를 통해서 코드 마이그레이션이 가능
     * Turbopack for development: Turbopack을 사용해 정적 라우팅을 최적화하고 빌드 속도를 개선했습니다. 15 에서 안정화 될 예정
     * Async Request APIs (Breaking): 요청에 특정한 데이터(헤더, 쿠키 등) 들을 서버 사이드 렌더링 성능 개선을 위해 비동기 방식으로 처리. 동기적으로 사용할 수 있지만 워닝으로 표시
     * Server Actions: 안전한 데이터 전송을 위한 추측 불가능한 ID 도입으로 보안을 강화하고 사용하지 않은 액션은 번들에서 제거
     * Static Indicator: 개발자가 라우트 처리 과정을 쉽게 파악할 수 있도록 정적 라우트 표시 기능이 개선
     * next/form: 클라이언트 내비게이션을 빠르고 간편하게 할 수 있는 form 컴포넌트가 추가
     * next.config.ts:next.config.ts 파일에서 직접 TypeScript를 지원
     * instrumentation.js (Stable): Next.js 서버의 성능을 모니터링하고 오류를 추적하는 기능을 제공. OpenTelemetry와 같은 관찰 가능성 도구와의 통합이 가능하고 서버 오류를 포착하고 주요 맥락 정보를 기록할 수 있는 onRequestError 훅이 추가되어 Sentry 에서 활용 가능.
     * Development and Build improvements: 빌드, HMR 속도 개선
     * Self-hosting: 자체 호스팅 시 Cache-Control 지시에 대한 제어가 강화. ISR 페이지에 대한 stale-while-revalidate 기간을 제어할 수 있도록 expireTime 설정이 추가
     * Linting: ESLint 9 지원 추가

   덧 최지원1이라는 이름을 가진 분이 Nextjs 블로그에 보이네요
"
"https://news.hada.io/topic?id=17222","대형 언어 모델, 온라인 Q&A 플랫폼에서 공공 지식 공유 감소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  대형 언어 모델, 온라인 Q&A 플랫폼에서 공공 지식 공유 감소

요약

     * 대형 언어 모델(LLM)의 영향
       대형 언어 모델(LLM)은 인간이 생성한 데이터와 지식 자원의 대체 가능성을 가지고 있음. 그러나 이러한 대체는 미래 모델 개발에 필요한 훈련 데이터의 감소로 이어질 수 있는 문제를 제기함. 이 연구에서는 ChatGPT의 출시와 함께 Stack Overflow의 활동이 감소했음을 문서화함.
     * ChatGPT의 영향
       ChatGPT 출시 후 6개월 이내에 Stack Overflow의 활동이 러시아 및 중국의 유사 플랫폼과 수학 포럼에 비해 25% 감소함. 이는 ChatGPT가 Stack Overflow에 미치는 진정한 영향의 하한으로 해석됨. 가장 널리 사용되는 프로그래밍 언어와 관련된 게시물에서 감소가 더 큼.
     * LLM의 대체 효과
       LLM은 중복되거나 낮은 품질의 콘텐츠뿐만 아니라 고품질 콘텐츠도 대체하고 있음. ChatGPT 사용자는 Stack Overflow에 게시할 가능성이 낮고 플랫폼을 정기적으로 방문하지 않음. 이는 LLM의 빠른 채택이 훈련에 필요한 공공 데이터의 생산을 감소시켜 중요한 결과를 초래할 수 있음을 시사함.
     * 프로그래밍 언어별 영향
       Python과 Javascript와 같은 널리 사용되는 언어에서 ChatGPT의 영향이 더 큼. CUDA와 같은 특정 언어에서는 ChatGPT 출시 후 게시물이 증가함. 이는 AI와 관련된 소프트웨어에 대한 관심이 증가하고 있음을 보여줌.

GN⁺의 정리

     * 이 연구는 ChatGPT와 같은 대형 언어 모델이 온라인 Q&A 플랫폼에 미치는 영향을 분석함으로써, AI의 빠른 채택이 공공 데이터의 생산에 미치는 부정적 영향을 강조함.
     * ChatGPT의 사용이 증가함에 따라 Stack Overflow와 같은 플랫폼의 활동이 감소하고, 이는 미래 AI 모델의 훈련 데이터 품질에 영향을 미칠 수 있음.
     * 이러한 변화는 디지털 경제와 정보 접근 방식에 중요한 영향을 미칠 수 있으며, 이는 AI 생태계의 지속 가능성에 대한 우려를 제기함.
     * 유사한 기능을 가진 다른 프로젝트로는 GitHub의 프로그래밍 언어 관련 리포지토리들이 있음.

        Hacker News 의견

     * LLM이 새로운 정보를 생성하지 않고 기존 정보를 재조합하는 문제점이 있음. 코드 샘플이 부족한 경우 성능이 저조함
          + Stack Overflow와 같은 플랫폼에서 질문을 하지 않으면 답변도 하지 않게 됨
          + Stack Overflow와 같은 Q&A 포럼은 사용자의 흐름에 답변을 통합하는 기능을 개선해야 함
     * LLM이 공개 지식 공유를 줄이고 있다는 주장에 대해 의문을 제기함
          + 제시된 데이터가 충분히 강력하지 않음
          + 좋은 질문은 감소세에서 평평해졌고, 중립적인 질문은 증가세에서 평평해짐
          + 나쁜 질문은 계속 감소 중이며, 이는 LLM이 저품질 콘텐츠를 대체하고 있음을 시사함
     * 오픈 소스 프로젝트에 대한 질문이 GitHub와 Discord로 이동함
          + LLM이 시간을 절약해 줌
     * Stack Overflow의 무료 기여가 줄어드는 이유는 OpenAI API 계약과 AI 관련 블로그 게시물 때문임
     * AGI에 도달하면 LLM이 ""이 채팅은 중복으로 표시되었습니다""라고 말할 것임
     * LLM이 지식과 담론의 범위를 좁힐 수 있음
          + LLM에게 농담을 요청하면 동일한 농담을 반복하는 경향이 있음
     * 기술적 상호작용이 줄어들면 현실 세계에서의 상호작용에도 영향을 미칠 수 있음
          + AI와 인간의 조언을 비교하는 방법에 대한 의문이 제기됨
     * LLM이 온라인 Q&A 플랫폼에서 학습하지만 사람들이 질문과 답변을 중단하면 지식의 출처가 부정확한 LLM 데이터로 오염될 수 있음
     * Stack Overflow에 자동으로 기여하고 솔루션에 자동으로 업보트를 주는 에이전트가 필요할 수 있음
"
"https://news.hada.io/topic?id=17226","WordPress.org의 최신 조치, WP Engine 플러그인 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                WordPress.org의 최신 조치, WP Engine 플러그인 인수

WordPress.org의 WP Engine 플러그인 인수

     * WordPress.org는 WP Engine 플러그인을 인수하여 ""상업적 업셀 제거 및 보안 문제 해결""을 목표로 함. 이 업데이트는 Advanced Custom Fields (ACF) 플러그인의 포크로, ""Secure Custom Fields""로 명명됨.
     * Matt Mullenweg는 WP Engine의 법적 조치로 인해 발생한 ""드문 상황""이라고 설명하며, 이는 다른 플러그인에는 적용되지 않을 것이라고 밝힘.
     * WP Engine의 ACF 팀은 WordPress가 플러그인을 개발자의 동의 없이 강제로 가져간 적이 없다고 주장함. WP Engine, Flywheel, ACF Pro 고객이 아닌 사용자는 ACF 사이트에서 ""진정한 6.3.8 버전""을 다운로드해야 업데이트를 받을 수 있음.
     * ACF 플러그인은 웹사이트 제작자가 기존의 일반 필드로는 부족할 때 사용자 정의 필드를 사용할 수 있도록 함. 이는 WordPress의 기본 기능이지만 사용자 친화적이지 않다고 설명됨.

GN⁺의 정리

     * 이 기사는 WordPress.org가 WP Engine 플러그인을 인수한 드문 사례를 다루고 있음. 이는 법적 분쟁으로 인해 발생한 상황이며, 다른 플러그인에는 영향을 미치지 않을 것임.
     * ACF 플러그인은 사용자 정의 필드를 제공하여 웹사이트 제작자에게 유용한 도구임. 이와 유사한 기능을 제공하는 플러그인으로는 Toolset과 Pods가 있음.
     * 이 기사는 WordPress 커뮤니티와 플러그인 개발자들에게 법적 분쟁이 플러그인 관리에 미치는 영향을 보여줌. 이는 오픈 소스 프로젝트의 관리와 법적 문제에 대한 논의를 촉발할 수 있음.

        Hacker News 의견

     * 5년 만에 연락 온 고객이 WordPress에서 벗어나고 싶어함. ACF와 WPEngine의 플러그인을 사용 중이며, 변화가 비즈니스에 미칠 영향을 걱정하고 있음
     * WordPress가 플러그인 디렉토리에서 포크를 금지했으나, 자신들은 금지된 행동을 하고 있음
     * Mullenweg가 언급한 보안 문제의 세부사항이 부족하여 원래 플러그인을 계속 사용하는 것이 안전한지 알 수 없음
     * Secure Custom Fields가 비상업용 플러그인이 되었음. 이는 WordPress가 WPEngine의 수익원을 노리고 있는 것일 수 있음
     * 플러그인이 Pro 옵션을 가지고 있다면, 이는 WordPress의 코드베이스 포크에 포함되지 않을 수 있음
     * WPEngine이 신뢰할 수 있는 제3자를 찾아 WordPress를 포크하는 재단을 시작하는 것이 적절한 해결책일 수 있음
     * Matt가 만든 혼란에 대한 중재책을 찾더라도, 커뮤니티에 이미 손상이 가해졌으며, WordPress의 인기가 곧 하락할 것이라는 우려가 있음
     * 법률 자문을 무시하거나, 최고의 법률 자문을 받았을 가능성이 있음
     * Mullenweg가 공급망 공격으로 기존 사용자를 장악하고 있음
     * 오픈 소스 소프트웨어의 배포와 관련된 더 큰 그림을 조명하는 흥미로운 사례임. Linux 배포판 유지보수자들은 소프트웨어를 수정할 수 있으며, Docker와 Github도 마찬가지임. 이들은 오픈 소스 라이선스보다는 그들과의 계약에 따라 행동할 수 있음
     * WordPress의 명성이 이러한 행동으로 인해 훼손되고 있음
"
"https://news.hada.io/topic?id=17338","도난된 액세스 토큰을 통한 Internet Archive 재침해 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 도난된 액세스 토큰을 통한 Internet Archive 재침해 사건

    인터넷 아카이브의 보안 침해

     * 사건 개요
          + 인터넷 아카이브가 다시 보안 침해를 당했음. 이번에는 Zendesk 이메일 지원 플랫폼에서 GitLab 인증 토큰이 노출되어 발생한 사건임.
          + BleepingComputer는 인터넷 아카이브의 제거 요청에 대한 답변을 받은 사람들로부터 여러 메시지를 받았으며, 이들은 조직이 인증 토큰을 제대로 교체하지 않아 침해되었다고 경고함.
     * Zendesk 이메일 침해
          + 위협 행위자는 Zendesk 토큰을 사용하여 2018년 이후 info@archive.org으로 발송된 80만 개 이상의 지원 티켓에 접근할 수 있었음.
          + 이메일 헤더는 DKIM, DMARC, SPF 인증 검사를 모두 통과하여, 인증된 Zendesk 서버에서 발송된 것임을 증명함.
     * GitLab 인증 토큰 노출
          + 10월 9일, BleepingComputer는 인터넷 아카이브가 두 가지 공격을 동시에 받았다고 보도함. 하나는 3,300만 명의 사용자 데이터를 도난당한 데이터 침해, 다른 하나는 친팔레스타인 그룹 SN_BlackMeta에 의한 DDoS 공격임.
          + 데이터 침해는 노출된 GitLab 구성 파일에서 시작되었으며, 이 파일은 인터넷 아카이브의 소스 코드 다운로드를 허용하는 인증 토큰을 포함하고 있었음.
     * 사이버 명성을 위한 침해
          + 인터넷 아카이브는 정치적 또는 금전적 이유가 아닌 단순히 위협 행위자가 가능했기 때문에 침해됨.
          + 데이터 침해 커뮤니티에서 명성을 얻기 위해 데이터가 무료로 공개될 가능성이 높음.

    GN⁺의 정리

     * 인터넷 아카이브의 보안 침해 사건은 인증 토큰 관리의 중요성을 강조함. 이는 보안 관행의 기본이지만, 이를 소홀히 할 경우 심각한 결과를 초래할 수 있음.
     * 이 사건은 데이터 침해 커뮤니티에서의 명성 경쟁을 보여주며, 단순한 호기심이나 명성을 위해서도 침해가 발생할 수 있음을 시사함.
     * 유사한 기능을 가진 프로젝트로는 GitHub의 보안 관리 도구들이 있으며, 이러한 도구들은 인증 토큰 관리에 도움을 줄 수 있음.

        Hacker News 의견

     * IA가 API 키를 교체하지 않은 것에 대한 실망스러움이 있음
          + 보안 침해가 발생한 지 몇 주가 지났음에도 불구하고 조치가 이루어지지 않았음
          + 부유한 이해관계자들을 화나게 한 후에 이런 일이 발생한 것이 의심스러움
     * 정보 보안 지식이 있는 사람들은 무료로 전문 지식을 제공할 기회가 있음
     * 분산 저장소에 기반한 아카이브가 필요함
          + Internet Archive의 작업을 지지하지만, 역사를 보존하는 것은 단일 실패 지점에 의존해서는 안 됨
     * 인터넷 도서관과 같은 이타적인 것을 공격하는 것은 매우 슬픈 일임
          + 이러한 퇴폐성을 보는 것은 정말로 사기를 꺾음
     * Internet Archive를 겨냥하는 사람이 누구인지, 그리고 그 이유가 무엇인지 궁금함
          + 공격이 단순한 반달리즘이 아닌 것 같음
     * Internet Archive가 자금이 있다면 보안 팀을 고용하는 것이 최우선 투자 목록에 있어야 함
     * Wayback Machine의 스냅샷이 법률 사건에 도움이 될 때마다 변호사들이 Internet Archive에 기부하는 세상을 상상함
          + 그렇게 하면 세계적인 수준의 관리 팀을 빠르게 고용할 수 있을 것임
     * 거의 1년 전에 이력서를 보냈지만 어제까지 아무런 응답이 없었음
          + 현재 더 많은 인력을 찾기 위해 백로그를 처리 중인 것 같음
     * 지난주에 공개된 zendesk의 이메일 스푸핑 공격 벡터와 동일한 것인지 궁금함
     * 보안 문제가 해결되는 동안 IA를 읽기 전용 모드로 미러링할 수 있는 방법이 있는지 궁금함
"
"https://news.hada.io/topic?id=17241","오늘날의 웹 경험오늘날의 웹 경험 (2021)

   The provided link appears to be an example domain used for illustrative purposes and does not contain substantive content to summarize. If you have another article or specific content you would like summarized, please provide the text or a different link.

        Hacker News 의견

     * Google의 검색 경험은 광고와 AI 생성 콘텐츠로 가득 차 있으며, 사용자에게 크롬 사용과 로그인, 위치 정보 사용을 요구하는 점이 문제임
          + 관련 재미있는 일러스트 예시가 있음
     * 페이지를 떠날 때 나타나는 대화 상자에서 비기본 옵션을 선택하는 것이 익숙해졌음
          + ""No thanks"" 버튼 대신 ""Remind me later"" 또는 ""Maybe later"" 같은 긍정적인 표현이 UX에 더 좋을 것이라는 의견이 있음
     * 특정 국가에서 콘텐츠를 볼 수 없다는 메시지를 보여주는 비디오 플레이어가 문제임
     * Brave 브라우저가 이러한 문제를 해결하려고 시도했으나 성공 여부는 아직 불확실함
          + 다양한 수익 모델의 부족으로 웹사이트가 사용자에게 불편을 주는 방식으로 수익을 창출하려고 함
     * 광고가 있는 웹사이트를 방문하여 포인트를 모아 광고 없는 콘텐츠를 볼 수 있는 브라우저를 기다리고 있음
          + 콘텐츠 제작자와 인프라 운영자가 공정한 몫을 받을 수 있는 방법의 예시임
     * 웹사이트에서 사용자가 마주하는 다양한 팝업과 오버레이 목록을 제시함
          + 기술적으로 이러한 문제를 해결할 수 있는 방법을 고민 중임
          + 조용한 모드를 제공하는 브라우저가 필요할 수 있음
     * 클라이언트 측에서 가져오는 다양한 서드파티 도구들이 상위 레이어를 차지하려는 모습이 재미있고 정확함
     * 이러한 페이지를 접했을 때 읽을 가치가 없다는 것을 깨달았음
          + 이는 많은 블로그와 뉴스 사이트의 현실이며, 사람들이 소셜 미디어나 YouTube를 정보의 출처로 삼는 이유 중 하나일 수 있음
     * macOS Safari의 새로운 ""Hide Distracting Items"" 기능이 유용함
          + 사용자가 삭제한 항목을 기억하여 페이지 재방문 시에도 적용됨
"
"https://news.hada.io/topic?id=17250","Ask GN: Android 앱 개발할 때 어떤 환경을 사용하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Ask GN: Android 앱 개발할 때 어떤 환경을 사용하시나요?

   저는 약 10여년 전 Eclipse 기반의 안드로이드 스튜디오에서 앱 개발을 했었습니다.

   한동안 아이폰을 쓰다가 안드로이드로 넘어왔는데, 개발환경을 세팅하려고 보니 안드로이드 스튜디오는 정말 많이 바꼈군요.

   바뀐 기능이야 다시 적응하면 되지만, 가장 큰 문제는 제 PC에서 돌리기엔 너무 무겁다는거에요.

   지금 생각중인 옵션들은 이렇습니다:
     * Visual Studio를 시도해 보기 (C++ 개발환경은 이미 잘 쓰고 있기때문에...)
     * 안드로이드 스튜디오에서 에뮬레이터는 쓰지 않고 실 기기로만 개발(에뮬레이터만 안 띄우면 견딜 수 있을것 같긴 합니다)
     * PC를 업그레이드(이건 별로 하고싶진 않네요)

   혹시 안드로이드 스튜디오가 아닌 다른 개발환경을 쓰시는 분 계신가요? 어떤 환경을 추천하시나요?

   expo 라는걸 써보시죠!

   저는 flutter + 안드로이드 스튜디오를 사용하는데.
   마땅한 대안이 없다고 생각하구요. 가능하다면 램만 좀 업그레이드 권장드리고. mac 환경 + flutter 라면 안드로이드 스튜디오를 사용하되 개발시 IOS 시뮬레이터를 활용하는 방안도 있습니다.

   현재 사용하시는 PC사양이 어떤지 몰라서, 답변을 드리기 어려운 부분이 있네요.
     * 일단 개발하는 앱의 규모에 따라, 빌드시스템 및 Android studio 에 할당할 heap size를 조정해야, 쾌적한 개발환경을 꾸밀 수 있습니다.
     * 요새 Android 에물레이터는 CPU/GPU 가속을 지원합니다. ABI 만 잘 설정하면 에물레이터는 실제기기보다 훨씬 쾌적하게 수행됩니다.
     * 제가 회사앱의 빌드환경을 디렉팅합니다만(개발자 분들이 사용할 Android studio버젼이나 JVM 버전을 강제로 지정해줍니다) , 정작 제 자신은 터미널에서 vim을 씁니다. (먼산;; )

   무겁더라도 안드로이드 스튜디오를 쓰는게 나을 겁니다...

   네이티브로 개발하신다면 안드로이드 스튜디오는 무거운 만큼 그만한 기능을 지원하고 있다고 생각합니다. 저는 다른 IDE를 고민해본적이 없네요. 커뮤니티도 vscode 지원은 고려조차 안해서 시도해보시면 혼자 개척하는 정도로 복잡할거에요

   flutter, xcode

   Mac에서는 xcode가 있군요. 저는 윈도우라 쓸 수가 없네요 ㅠ

   ios 빌드시 아무래도 xcode로 옮겨 작업하는 것이 편했습니다

   저는 vscode + flutter 사용 경험이 제일 괜찮았습니다.

   VSCode도 고려해봐야겠네요. 생각해보니 VSCode를 쓸 수 있다면 그냥 아무 에디터나 쓰고 명령줄에서 빌드해도 되겠군요...

   flutter 쓰시죠

   Flutter는 UI 라이브러리라고 알고 있었는데 자체 IDE도 있나보군요.
"
"https://news.hada.io/topic?id=17275","Show GN: nn: 뉴럴 네트워크 모델 정의를 위한 도메인 특화 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: nn: 뉴럴 네트워크 모델 정의를 위한 도메인 특화 언어

  제작 배경

     * Pytorch와 같은 도구를 이용하여 모델을 작성하는 과정에서, 텐서 쉐이프 체크를 런타임에 하기 때문에 번거로웠음.
     * 모델 파라미터 정의와 값의 흐름을 나타내는 코드가 분리되어 있어 코드를 읽을 때 여러 부분을 동시에 봐야 하는 문제가 있었음.

  특징

     * 컴파일 타임 쉐이프 체킹
     * 간결한 문법
     * 튜링-완전하지 않은 레이어 제공

  한계

     * 문법상의 한계로 인해 구현 불가능한 모델이 존재할 수 있음.

   PR 및 이슈 제보는 언제나 환영입니다. 궁금하신 점이 있으시다면 댓글이나 깃허브 이슈란에 올려주시면 답변드리겠습니다.
"
"https://news.hada.io/topic?id=17258","Sqlite3 WebAssembly","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Sqlite3 WebAssembly

     * sqlite3를 현대적인 WASM 지원 브라우저에서 사용할 수 있도록 함
     * 초기 공개 베타는 버전 3.40에서 시작되었으며, 커뮤니티 피드백에 따라 3.41 릴리스에서 API 안정화 예정

실제 사용 사례

     * SQLime, Evolu, SQLiteNext 등 다양한 프로젝트에서 사용 중
     * 관련 프로젝트로는 Alon Zakai의 sql.js, Roy Hashimoto의 wa-sqlite, James Long의 absurd-js 등이 있음

GN⁺의 정리

     * sqlite3 WASM 및 JavaScript API는 웹 브라우저에서 sqlite3 데이터베이스를 사용할 수 있게 해주는 중요한 프로젝트임
     * 다양한 클라이언트 코드 레시피와 API 변경 사항을 제공하여 개발자에게 유용한 정보를 제공함
     * 관련 프로젝트와의 비교를 통해 이 프로젝트의 독창성과 유용성을 이해할 수 있음
     * 유사한 기능을 가진 프로젝트로는 sql.js, wa-sqlite 등이 추천됨

        Hacker News 의견

     * SQLite를 브라우저 내 메모리에서 실행하고 Litestream과 Cloudflare Durable Objects의 트릭을 사용하여 WAL 로그를 서버로 스트리밍하는 아이디어가 흥미로움
          + 서버 측 데이터를 사용하여 클라이언트 측 데이터베이스를 재구성할 수 있음
          + WAL 모드는 기본 SQLite WASM 빌드에서 제외되어 있어 사용자 정의가 필요함
     * SQLite의 최근 릴리스는 3.46.1이지만, 페이지가 업데이트되지 않아 API 안정성에 대한 혼란이 있음
          + SQLite 팀이 WASM 버전을 포함한 공식 npm 패키지를 제공하면 좋겠음
     * Pyodide의 SQLite-in-WASM 버전이 개인적으로 선호됨
          + Pyodide는 Python 표준 라이브러리의 일부로 WASM SQLite를 무료로 제공함
          + 현재 Pyodide의 SQLite 버전은 3.39.0이며, 버전 업데이트가 필요함
     * 로컬 우선 환경에서 SQLite를 사용하는 것은 무겁게 느껴짐
          + 브라우저의 기본 저장소 API(특히 IndexedDB)를 사용하는 것이 더 효율적임
          + SQLite와 유사한 API를 제공하는 오픈 소스 솔루션이 필요함
     * Golang에서 ncruces의 wasm SQLite 패키지가 좋음
          + OpenBSD와 같은 환경에서 잘 작동함
     * Rust 생태계에서 SQLite를 사용하려 했으나, 현재 지원하는 래퍼가 부족함
          + emscripten wasm 코드를 wasm32-unknown-unknown과 호환시키는 것이 어려움
     * SQLite가 IndexedDB의 대체가 될 수 있는지 궁금함
          + 데이터가 지속되는지, 파일 시스템 API나 IndexedDB/로컬 스토리지에 저장해야 하는지에 대한 질문이 있음
     * 최소한의 SQLite WASM 의존성 크기는 약 1.3MB임
          + 브라우저 내 앱에서는 다소 큰 크기지만, 다른 환경에서는 적절할 수 있음
     * WebSQL이 SQLite였다면 오프라인 우선 및 일반 앱 저장소 생태계가 더 나았을 것이라는 의견이 있음
          + SQLite API를 브라우저가 지원하도록 명시하는 것이 좋겠음
     * WASM 빌드의 SQLite와 Chicory 런타임을 사용하여 순수 JVM 실행 SQLite 라이브러리를 생성함
          + 실험적인 프로젝트로, JVM 생태계에 의존성 없는 SQLite 도구를 제공할 수 있음
     * SQLite를 exaequOS.com에 포함시킬 계획이 있음
"
"https://news.hada.io/topic?id=17290","AI PC의 AI 성능 부족: CPU가 NPU를 능가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AI PC의 AI 성능 부족: CPU가 NPU를 능가

Qualcomm NPU 벤치마킹

  소개

     * Microsoft는 Qualcomm Arm 기반 SoC에서 실행되는 Windows를 탑재한 Surface 태블릿을 제공함.
     * 이 태블릿은 AI PC로 홍보되며, 다른 시스템보다 더 빠르고 효율적으로 머신러닝 모델을 실행할 수 있음.
     * Qualcomm의 하드웨어, 특히 NPU에 관심이 많아 이 플랫폼에 제3자 앱을 포팅하는 데 많은 시간과 자원을 투자함.
     * 그러나 외부 개발자가 빠른 결과를 얻기 위한 코드 예제나 벤치마크가 거의 없어, 성능을 보여주기 위한 독립 프로젝트를 구성함.
     * 기대했던 것보다 성능이 낮아, 지연 시간을 줄이기 위한 아이디어를 얻기 위해 벤치마크를 공개함.

  설치

    Python

     * 테스트 스크립트를 실행하기 위해 Python 사용.
     * Microsoft Store의 Python은 Arm 아키텍처를 지원하지 않으므로 공식 Python.org 설치 프로그램 사용 권장.
     * 보고된 결과는 Python 3.11.9 버전 사용.

    Cmake

     * Onnx를 컴파일하기 위해 cmake 빌드 도구 필요.
     * Powershell에서 winget install cmake 명령어 실행.

    Visual Studio

     * 컴파일러를 위해 Visual Studio 필요.
     * Visual Studio Community Edition 다운로드 및 설치 시 Desktop C++ Development 워크로드 선택.

    Pip 패키지

     * 필요한 Python 패키지는 py -m pip install -r requirements.txt 명령어로 설치 가능.
     * Qualcomm Onnx Runtime과 호환되는 Onnx 버전 1.16을 사용.

  벤치마크

    실행

     * 벤치마크 실행: py benchmark_matmul.py

    출력 이해하기

     * Onnx 런타임은 초기 로그 스팸을 생성함.
     * 벤치마크 결과는 CPU와 NPU의 수치 결과가 일치함을 확인.
     * CPU는 821 Gigaops, 첫 번째 NPU 접근 방식은 225 Gigaops, 두 번째는 573 Gigaops 성능을 보임.

    벤치마크 측정

     * 벤치마크는 OpenAI의 Whisper와 같은 변환기 모델의 가장 시간 소모적인 레이어와 유사한 6개의 큰 행렬 곱셈을 실행.
     * NPU는 주로 양자화된 모델을 효과적으로 실행하며, 8비트 입력 및 출력을 사용한 모델이 더 빠름.

    혼란을 일으킬 수 있는 요소

      계산 제한

     * 현대 변환기 모델은 큰 행렬 곱셈을 기반으로 하며, 메모리 제한이 될 수 있음.
     * 입력 행렬을 더 정사각형으로 만들어 타일링과 재사용이 가능하도록 함.

      전원 설정

     * Windows의 에너지 사용 설정을 ""최고 성능""으로 설정하고, 태블릿을 전원에 연결하여 벤치마크 실행.

      모델 토폴로지

     * 현대 AI 모델을 반영하는 그래프를 생성하되, 해석하기 쉽게 단순화.

      구성 오류

     * 모델 빌드 및 실행 방식이 드라이버나 가속기 구현의 빠른 경로에서 벗어날 수 있음.

      Onnx 프레임워크

     * Windows에서 AI 가속에 접근하는 여러 방법이 있으며, Onnx가 가장 적합한 프레임워크로 보임.

  결과 해석

     * Snapdragon X 12-core X1E80100에서 실행 시 NPU 결과는 CPU보다 느림.
     * 마케팅 자료에서 약속한 45조 ops/s의 1.3%에 불과한 성능을 보임.
     * Nvidia Geforce RTX 4080 Laptop GPU에서는 3.2ms에 실행되어 2,160 Gigaops 성능을 보임.

GN⁺의 정리

     * Qualcomm NPU의 성능이 기대에 미치지 못하며, CPU보다 느린 결과를 보임.
     * NPU의 성능을 최적화하기 위한 소프트웨어 변경 가능성에 대한 기대가 있음.
     * Onnx 프레임워크가 Qualcomm NPU에서 가속 성능을 얻기 위한 최적의 선택으로 보임.
     * Nvidia GPU와 비교했을 때, Qualcomm NPU의 성능이 크게 떨어짐.

   ryzen npu는 cpu보다 조금 빠른걸로 알고있었는데 스냅드래곤 뽐이 확죽네요

        Hacker News 의견

     * CPU와 GPU의 성능 차이가 작음. onnxruntime의 문제일 가능성 있음. NPU는 속도보다는 저전력 소비에 중점이 있음
          + NPU는 AI 연산을 CPU에서 분리하여 SoC의 일부로 사용됨
          + CPU, NPU, GPU의 전력 소비를 무한 루프에서 측정하면 NPU가 가장 낮을 것으로 예상됨
          + NPU가 많은 실리콘 면적을 차지하므로 제대로 사용되지 않으면 아쉬움
     * Apple Neural Engine은 CPU나 GPU보다 훨씬 빠름
          + 모델 아키텍처, 변환, 튜닝에 따라 성능이 달라짐
          + XCode는 모델의 실행 시간을 측정하는 도구를 제공함
          + ML 프레임워크/런타임은 모든 연산자를 구현하지 않을 수 있음
     * NPU는 작은 모델을 저전력으로 실행하는 것이 목적임
          + NPU는 최적화된 모델을 위한 것으로, 작은 작업을 수행함
          + Windows에서는 전체 화면 OCR 등을 실행할 수 있음
     * NPU에 모델을 배포하려면 프로파일 기반 최적화가 필요함
          + CPU에서 잘 작동하는 모델도 NPU에서는 실망스러운 결과를 낼 수 있음
     * GitHub의 설명이 블로그보다 더 유익함
          + int8 matmul 실행 시 onnx 성능은 약 0.6TF임
     * Qualcomm은 NPU에 직접 접근을 허용하지 않음
          + 변환 도구가 최적화를 놓칠 수 있음
          + NPU는 작은 ML 모델과 빠른 함수 근사에 적합함
     * Qualcomm SNPE SDK 사용 가능성 있음
          + Hexagon SDK가 제대로 작동하는지 궁금함
     * 이 글은 특정 NPU, 특정 벤치마크, 특정 라이브러리와 프레임워크에 관한 것임
          + 따라서 일반적인 결론을 내리기 어려움
"
"https://news.hada.io/topic?id=17322","작업이 아닌 결정에 중점을 둔 접근 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         작업이 아닌 결정에 중점을 둔 접근 방식

     * 결정에 집중하기
          + Every Page Is Page One에서의 인용문이 기술 문서 작성 접근 방식에 큰 변화를 줌
          + 기술 커뮤니케이션에서는 주로 작업 지원에 대해 이야기하지만, 많은 경우 사람들이 작업을 완료하기 위해 필요한 정보는 기계 작동 방법이 아닌 의사 결정 지원 정보임
          + 절차를 문서화하는 것만으로는 충분하지 않음
          + 사용자가 어떤 결정을 내려야 하는지, 그 결과가 무엇인지 알리고, 가능한 한 의사 결정을 돕는 자원과 참고 자료로 이끌어야 함

GN⁺의 정리

     * 이 글은 기술 문서 작성에서 의사 결정 지원의 중요성을 강조함
     * 단순한 절차 설명을 넘어 사용자가 더 나은 결정을 내릴 수 있도록 돕는 것이 필요함
     * 기술 문서 작성자에게는 사용자에게 필요한 맥락과 정보를 제공하는 것이 중요함
     * 비슷한 기능을 가진 산업 내 프로젝트로는 Confluence와 Notion이 추천됨
"
"https://news.hada.io/topic?id=17312","연방 정부, 'Right to Repair' 관련 John Deere 조사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               연방 정부, 'Right to Repair' 관련 John Deere 조사

     * 연방 거래 위원회(FTC)의 조사
          + 연방 거래 위원회(FTC)는 John Deere가 농업 장비 수리를 어렵게 만든다는 오랜 주장에 대해 조사 중임.
          + 이 조사는 2021년부터 진행 중이며, 최근 법원 제출 문서를 통해 더 많은 정보가 공개됨.
          + 데이터 분석 회사 Hargrove & Associates Inc (HAI)는 FTC의 조사를 중단시키기 위해 법원에 소송을 제기함.
     * John Deere의 수리 문제
          + John Deere는 농업 장비에 많은 컴퓨터를 탑재하여 수리를 어렵게 만듦.
          + 농부들은 간단한 수리조차 제조사에 의존해야 하며, 이는 큰 비용을 초래함.
          + 이러한 문제로 인해 중고 트랙터 시장이 급성장함.
     * 법적 대응과 약속
          + 2022년, 농부들은 John Deere를 상대로 수리 독점에 대한 집단 소송을 제기함.
          + John Deere는 농부들에게 수리 도구와 문서를 제공하겠다는 약속을 했으나, 이를 지키지 않음.
          + 엘리자베스 워렌 상원의원은 John Deere의 약속 불이행을 비판함.
     * FTC의 조사와 기대
          + FTC의 조사는 농부들과 소비자들에게 긍정적인 소식임.
          + 농부들은 자신들의 장비를 수리할 수 있어야 하며, 이는 수확 손실을 방지하는 데 중요함.

GN⁺의 정리

     * John Deere의 수리 문제는 농부들에게 큰 경제적 부담을 주고 있으며, FTC의 조사는 이러한 문제를 해결하는 데 중요한 역할을 할 수 있음.
     * 농업 장비의 수리 독점 문제는 기술 발전과 관련된 중요한 이슈로, 농부들의 자율성을 보장하는 것이 필요함.
     * 비슷한 기능을 가진 다른 농업 장비 제조사들도 이러한 문제를 해결하기 위한 노력이 필요함.

        Hacker News 의견

     * Deere의 직원, 고객, 규제 기관과의 관계가 좋지 않음
          + 주주들이 이사회를 교체해야 한다는 의견이 있음
     * Deere가 처벌을 받고, 다른 회사들에게도 선례가 되기를 바라는 의견이 있음
          + 특히, 중단된 제품을 원격으로 비활성화하는 관행에 대한 비판이 있음
     * Deere 트랙터를 계속 구매하는 이유에 대한 질문이 제기됨
          + 유럽에는 다른 브랜드의 트랙터가 많다는 점을 언급함
     * Deere가 GNU GPL을 위반하고 있다는 주장
          + 리눅스 커널 소스 코드를 공개하지 않아 트랙터의 버그를 수정할 수 없다는 문제 제기
     * Deere가 수십 년간 법적 경계를 넘었다는 확신이 있다는 의견
     * John Deere의 로비 광고가 기사 옆에 게재되었다는 언급
     * 우크라이나가 Deere 기계를 해킹한 사례가 있음
          + 이 행정부에서 긍정적으로 평가할 수 있는 몇 안 되는 것 중 하나라는 의견
     * 연방 정부가 개입하여 거래 후 사용자의 권리를 제한하는 제품이나 서비스가 사라지기를 바라는 의견
     * 로비를 발명한 사람들에 맞서 로비하려고 하면 어려움을 겪을 것이라는 경고
"
"https://news.hada.io/topic?id=17232","BBS와 XMODEM 개발자 워드 크리스텐슨 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      BBS와 XMODEM 개발자 워드 크리스텐슨 별세

Ward Christensen

     * 출생 및 사망
          + 1945년 10월 23일, 미국 위스콘신주 웨스트 벤드에서 출생
          + 2024년 10월 11일, 일리노이주 롤링 메도우스에서 사망
     * 주요 업적
          + 최초의 게시판 시스템(BBS)인 CBBS의 공동 창립자
          + XMODEM 프로토콜 개발
     * CBBS 개발
          + 시카고 지역 컴퓨터 취미가 교환(CACHE) 회원으로서 Randy Suess와 함께 개발
          + 1978년 2월 16일 공식 설립
          + 시카고의 폭설 동안 파일 전송 시스템 개발
     * 기술적 기여
          + 필요에 따라 소프트웨어 도구 개발
          + 플로피 디스크와 하드 디스크가 보편화되기 전, 카세트 기반 운영 체제 작성
          + 소스 코드를 잃어버렸을 때, Intel 8080용 반복 디스어셈블러인 ReSource 개발
          + 파일 전송을 위해 XMODEM 개발
     * 수상 경력
          + 1992년 Dvorak Awards에서 Randy Suess와 함께 첫 BBS 개발로 수상
          + PC 통신 분야에 대한 공로로 평생 공로상 수상
          + 1993년 전자 프론티어 재단(EFF)에서 Pioneer Award 수상
     * 경력
          + 1968년부터 2012년까지 IBM에서 근무
          + 마지막 직책은 현장 기술 영업 전문가
     * 기타
          + 2005년 BBS: The Documentary에 Randy Suess와 함께 출연

GN⁺의 정리

   Ward Christensen은 최초의 게시판 시스템인 CBBS를 개발하여 컴퓨터 통신의 발전에 큰 기여를 한 인물임. 그의 업적은 파일 전송 프로토콜인 XMODEM 개발과 같은 기술적 혁신을 포함하며, 이는 현대의 네트워크 통신에 많은 영향을 미쳤음. 이러한 그의 기여는 전자 프론티어 재단의 Pioneer Award와 같은 여러 상으로 인정받았음. Christensen의 이야기는 컴퓨터 역사에 관심 있는 사람들에게 흥미로울 수 있으며, 그의 기술적 기여는 오늘날에도 여전히 유용하게 사용되고 있음. 비슷한 기능을 가진 프로젝트로는 현대의 다양한 파일 전송 프로토콜이 있음.

        Hacker News 의견

     * 80년대와 90년대에 컴퓨터 문화의 큰 부분이었던 BBSes에 대한 이해가 미래 세대에게도 전해지길 바라는 의견이 있음. BBS Documentary 영화가 있지만, 비미국 지역과 다양한 하위 문화에 대한 기록이 부족함을 지적함
          + eLiTe, 데모 씬, 시각 장애인 관련 문화 등이 시간이 지나면서 잊혀질 위험이 있음
     * 첫 프로그래밍 작업으로 BBS sysop를 위해 6502 어셈블리어로 XMODEM 체크섬을 구현한 경험을 공유함
          + 이 작업을 통해 프로토콜과 알고리즘에 대해 많은 것을 배웠음
     * 90년대 BBSs가 삶의 큰 부분이었으며, 오늘날의 십대들이 그 당시의 사회적 스릴을 느끼길 바라는 의견이 있음
          + 인터넷이 BBSs보다 우수하지만, BBSs를 완전히 대체할 수 있는 것은 없음을 언급함
     * Ward의 사망 소식을 예상치 못한 방식으로 알게 되었으며, 컴퓨터 사용자 그룹의 많은 멤버들이 나이가 들어 확인할 사람이 없음을 언급함
          + Ward는 Blinkies와 함께 전자기기 제작을 도우며 활발히 활동했음
     * 임베디드 시스템에서 XMODEM 프로토콜이 널리 사용되고 있으며, Cisco, Adtran, Juniper 등의 스위치와 라우터에도 포함되어 있음을 언급함
     * BBSs가 초기 컴퓨터 경험의 큰 부분이었으며, 고등학교에서 Pascal로 BBS 소스 코드를 해킹하며 프로그래밍을 배웠다는 경험을 공유함
          + 대학에 진학한 이유 중 하나가 지역 BBSs에 접근하기 위함이었음을 밝힘
     * Ward Christensen과 Randy Suess가 시카고의 폭설 동안 CBBS를 개발한 이야기를 공유함
          + 많은 프로그래머들이 폭설과 같은 상황에서 일을 멈추고 재미로 무언가를 만들 수 있는 시간이 필요하다는 의견을 제시함
     * Jason Scott의 ""BBS: The Documentary""를 시청할 가치가 있다고 추천함
     * Chuck Forsberg의 사망을 회상하며, YMODEM의 저자였음을 언급함
          + XYZ Modems와 관련된 링크를 공유함
     * 어린 시절 BBS 계정을 얻기 위해 현금을 지불하러 자전거를 타고 sysop의 집에 갔던 경험을 회상함
          + 당시에는 위험할 수 있었던 행동이었음을 인정함
"
"https://news.hada.io/topic?id=17227","FAA가 발급한 Starship Flight 5 면허","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FAA가 발급한 Starship Flight 5 면허

        Hacker News 의견

     * 누군가 Super Heavy 부스터를 수동으로 착륙시키는 게임을 만들었음. 재미있음
          + 실제 착륙은 놀라울 것임. Starship이 재진입을 완전히 통과하는 것을 보는 것도 기대됨
          + 이번에 Starship의 엔진을 우주에서 다시 점화할 계획이 있는지 궁금함. 궤도 임무와 위성 배치를 위해서는 탈궤도 연소 능력을 입증해야 함
          + Starship의 다섯 번째 비행 테스트가 10월 13일 일요일로 예정되어 있음. 발사 창은 오전 7시 CT에 열림
          + SpaceX의 가짜 스트림(아마도 암호화폐 사기)이 현재 YouTube에서 260,000명의 시청자를 보유하고 있음. 몇 시간 전에 신고했지만 YouTube는 사기를 방지하는 데 능숙하지 않은 것 같음
     * 이 비디오는 Mechazilla로 부스터를 잡는 방법을 설명함. SpaceX 팀은 이를 시도하는 데 큰 용기를 가지고 있음
          + SpaceX가 위험을 감수하는 방식을 좋아함. 두 번째 발사 타워는 아직 몇 달 남았지만 첫 번째 타워를 사용해 부스터를 잡으려고 시도 중임
          + 이번 발사는 2015년 Falcon 9 LZ-1 착륙의 놀라운 흥분을 능가할 수 있는 첫 번째 발사가 될 수 있음. Starship에게 행운을 빌며 SpaceX 팀에게도 행운을 빔
     * 훌륭한 앱이 있음: next spaceflight. Android와 Apple에서 잘 작동함. 간단한 설정, 비침습적임. (cryptoz 덕분에) 웹사이트도 있지만, 발사 1시간 또는 10분 전에 알림 설정을 할 이유가 있음
          + 어떤 방향으로 가든 멋진 쇼가 될 것임. SpaceX에게 행운을 빔
          + 이번 시도는 첫 번째 부스터 착륙만큼이나, 아니면 그보다 더 흥미로울 것임. 성공한다면
          + 왜 그동안 사용해온 부스터로 잡는 것을 테스트하지 않았는지 궁금함. 이 부스터들을 잘 알고 있으니 경험을 쌓기에 좋은 플랫폼이 될 것임
     * 230피트 높이의 부스터를 잡으려는 첫 번째 시도임
"
"https://news.hada.io/topic?id=17320","Express v5 출시 - Node.js 프레임워크의 새로운 시대 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Express v5 출시 - Node.js 프레임워크의 새로운 시대

     * 10년전 첫번째 v5 PR이 등록되었는데, 드디어 머지 & 퍼블리시됨
     * 향후 릴리스에서 더 영향력 있는 변화를 구현하기 위해 의도적으로 단순화된 릴리스
     * 또한 Express가 다시 움직이고 있다는 것을 Node.js 생태계에 알리는 것이기도 함

주요 변경 사항

     * Node.js 버전 지원 변경
          + Node.js 0.10 지원 중단, Node 18 이상 지원으로 변경됨
          + 이전 Node.js 버전 지원으로 인해 성능 및 유지 관리에 중요한 변경 사항이 지연된 문제 해결됨
          + 새로운 언어 및 런타임 기능 채택, 더 이상 필요하지 않은 의존성 제거 가능해짐
          + 오래된 Node.js 버전을 사용하는 기업의 어려움을 인식하고 HeroDevs와 제휴하여 v4 지원 종료 이후에도 중요한 보안 패치를 제공하는 ""무기한 지원"" 제공 예정임
     * 경로 일치 및 정규식 변경
          + path-to-regexp 라이브러리가 0.x에서 8.x로 업데이트되어 여러 해 동안의 변경 사항이 통합됨
          + 정규식 서브 표현식 (예: /:foo(\\d+)) 지원 중단됨
               o ReDoS 공격 방지를 위해 제거됨
               o 마이그레이션 방법: 견고한 입력 유효성 검사 라이브러리 사용 권장
          + 공통 경로 패턴에 대한 단순화된 패턴 포함됨
               o :name?이 {:name}으로 변경됨
               o *이 *name으로 변경됨
               o (, ), [, ], ?, +, !가 예약 문자로 추가됨
          + 순서가 지정된 숫자 매개변수 지원 중단됨. 모든 매개변수에 이름을 지정해야 함
     * Promise 지원
          + 미들웨어에서 발생한 오류로 인해 거부된 Promise에 대한 지원 추가됨
          + 해결된 Promise에서 next를 호출하는 것은 포함되지 않음
          + 대부분의 경우 이제 다음과 같이 미들웨어를 작성할 수 있음:
app.use(async (req, res, next) => {
  req.locals.user = await getUser(req);
  next();
});

     * Body parser 변경 사항
          + CVE-2024-45590 완화를 위해 urlencoded body 깊이를 사용자 지정하는 옵션 추가 (기본값 32)
          + 더 이상 사용되지 않는 bodyParser() 조합 미들웨어 제거됨
          + req.body가 더 이상 항상 {}로 초기화되지 않음
          + urlencoded 파서의 extended 기본값이 false로 변경됨
          + Brotli 무손실 데이터 압축 지원 추가됨
     * 더 이상 사용되지 않는 메서드 시그니처 제거
          + res.redirect('back') 및 res.location('back'): 더 이상 'back' 마법 문자열을 지원하지 않음. 대신 req.get('Referrer') || '/'을 명시적으로 사용
          + res.send(status, body) 및 res.send(body, status) 시그니처: res.status(status).send(body) 사용
          + res.send(status) 시그니처: 간단한 상태 응답에는 res.sendStatus(status) 사용, 선택적 본문이 있는 상태 코드를 보내려면 res.status(status).send() 사용
          + 기타 더 이상 사용되지 않는 메서드 시그니처 제거됨 (자세한 내용은 마이그레이션 가이드 참조)
     * 마이그레이션 및 보안 지침
          + v4에서 v5로 마이그레이션하는 개발자를 위한 자세한 마이그레이션 가이드 제공됨
          + Express의 안전하고 안전한 사용을 위해 사용자 입력 유효성 검사 및 보안 관행과 같은 영역에 대한 중요한 통찰력을 제공하는 포괄적인 위협 모델 제공됨

GN⁺의 의견

     * Express v5는 Node.js 생태계에 Express가 다시 움직이고 있음을 알리는 데 중점을 둔 릴리스임. 이전 Node.js 버전 지원 중단, 보안 문제 해결, 유지 관리 단순화에 초점을 맞춤
     * 이 릴리스는 의도적으로 단순하게 유지되어 생태계의 장애물을 제거하고 향후 릴리스에서 더 큰 영향을 미치는 변경을 가능하게 함
     * Express는 Node.js를 위한 빠르고, 독단적이지 않으며, 미니멀한 웹 프레임워크라는 철학을 가지고 있음. 이는 사용자 입력 유효성 검사 및 보안 관행과 같은 영역에서 중요한 통찰력을 제공함
     * Express v5로의 마이그레이션을 위한 자세한 가이드와 포괄적인 위협 모델이 제공되어 개발자들이 안전하고 안정적으로 Express를 사용할 수 있도록 도움
     * Express 프로젝트의 새로운 관리자들은 Express 생태계를 안정적이고 신뢰할 수 있는 도구로 발전시키는 것을 목표로 함. 이를 위해 커뮤니티와 협력하여 문제를 해결하고 개선해 나갈 예정임

   아, promise 드디어 지원하는 군요. 저희는 아직 express 많이 써서 ㅎㅎ; 좋은 소식이네요

   nestjs로 대부분 넘어가서 직접 쓸 일은 별로 없지요. 서블릿을 직접 쓰는 거나 마찬가지

   드디어 promise error를 처리할 수 있게 되었지만 이제와서 굳이 써야할 이유는 잘 모르겠네요

        Hacker News 의견

     * Wes와 팀에게 감사의 마음을 표현하고 싶음. v5 PR이 열린 지 10년이 되었다는 것을 두 번 읽어야 했음. 이 프로젝트의 관성을 바꾸는 데 엄청난 노력이 필요했을 것임. 새로운 장을 축하함
          + 정규 표현식을 사용할 때 입력을 파싱하는 데 지수 시간 행동을 보이는 경우가 있음. 이는 re2와 같은 실제 정규 표현식 엔진으로 전환하여 쉽게 피할 수 있음
          + ""Regular Expression Matching Can Be Simple And Fast""라는 rsc의 글을 참고할 수 있음
     * Express 팀에게 축하를 보냄. 다른 Node JS 웹 서버 프레임워크가 많지만 Express가 필요한 모든 것을 제공하기 때문에 다른 것으로 옮기지 않았음. 이 상태가 계속되기를 바람
     * Express가 아직 latest가 아님을 언급함
     * Wes와 팀의 작업에 감사함. Express는 여전히 nodejs에서 가장 선호하는 선택이며, 활발한 관리가 있어 좋음
     * v5 출시가 왜 10년이나 걸렸는지 궁금해함
     * perl 6에 대한 언급
     * 경로의 입력 일부로 응답을 포함하는 아이디어가 2010년대의 것처럼 보임. 요즘 대부분의 것은 요청을 받아 응답을 반환하는 경로를 가짐. 이는 HTTP와 더 잘 맞음
     * ""이전 것을 사기업에 이전하여 지원을 제공하는"" 모델을 본 적이 없었음
     * Express가 koa, fastify 등과 어떻게 비교되는지 궁금해함
"
"https://news.hada.io/topic?id=17318","아파르트헤이트 종식을 도운 코드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           아파르트헤이트 종식을 도운 코드

     * 30년 된 암호 파일 해독
          + John Graham-Cumming은 Cloudflare의 CTO로, 남아프리카 공화국의 역사에 중요한 역할을 한 30년 된 암호화 파일을 해독한 인물임.
          + 그는 기술 역사에 관심이 많은 비전문가로, Alan Turing에 대한 영국 정부의 사과를 이끌어낸 캠페인으로 잘 알려져 있음.
     * 아파르트헤이트 시대의 안전한 통신 시스템
          + Tim Jenkin은 아프리카 민족회의(ANC) 회원들이 아파르트헤이트 하에서 안전하게 소통할 수 있도록 돕는 시스템을 개발함.
          + 이 시스템은 일회용 패드, 8비트 컴퓨터, 랜덤 숫자가 담긴 플로피 디스크를 남아프리카로 밀반입하는 승무원들에 의해 지원받았음.

GN⁺의 정리

     * 이 기사는 역사적으로 중요한 암호 파일의 해독 과정을 다루고 있으며, 기술과 역사의 교차점에서 흥미로운 이야기를 제공함.
     * John Graham-Cumming의 업적은 기술 발전뿐만 아니라 사회적 정의를 위한 노력의 일환으로 볼 수 있음.
     * 이 기사는 기술 역사에 관심 있는 사람들에게 유익하며, 암호학과 정보 보안 분야의 발전에 대한 통찰을 제공함.
     * 비슷한 기능을 가진 프로젝트로는 암호학 연구 및 보안 시스템 개발을 위한 다양한 오픈 소스 프로젝트들이 추천될 수 있음.

        Hacker News 의견

     * Tim Jenkin의 이야기는 매우 흥미로운 요소를 가지고 있음. 8비트 컴퓨터와 비행 승무원이 남아프리카로 무작위 숫자가 담긴 플로피를 밀반입하는 등의 요소가 포함됨
          + Steven에게 이 이야기를 소개하며, Tim Jenkin과 연결할 수 있다고 제안함
     * Steve Biko와 같은 남아프리카 공화국의 활동가들이 세계관에 큰 영향을 미쳤음
          + ANC와 그 활동가들이 다른 국가들과의 연대를 통해 정부를 고립시키고 제재를 가한 것이 성공의 열쇠였음
          + 혁명은 외부의 지원이 필요하며, 지상에서는 몇 명의 사람들이 건물과 은행 계좌를 장악하는 것이 중요함
     * 남아프리카 공화국의 경우, 다른 국가들이 개입하지 않도록 설득하는 것이 중요했음
          + 정부가 인종차별주의자라는 이미지를 만들어내고, 내전이 발생해도 아무도 개입하지 않을 것이라고 정부를 설득함
     * PKZIP 암호화된 파일은 5분 이내에 쉽게 해독되지만, 원타임 패드는 여전히 수학적으로 강력함
          + DES나 RC2를 사용했다면 역사가 달라졌을 수도 있음
     * 오래된 암호화 코드가 'encipher'라는 단어를 사용하여 진정한 빈티지임을 보여줌
     * Daniel Radcliffe가 주연한 영화 ""Escape From Pretoria""의 주인공이 같은 인물임을 깨달음
     * 미래에는 민주주의를 끝낸 코드도 볼 수 있을 것이라는 의견이 있음 (예: Facebook 소스 코드)
     * ""자체 암호화 코드를 만들지 말라""는 조언에 대한 유일한 성공적인 반례일 수도 있음
     * 암호로 보호된 zip 파일이 내부 파일 목록을 드러내는 이유에 대한 의문이 제기됨
          + 파일이 TAR로 압축되었다면 문제가 되었을 것이라는 이해가 있음
"
"https://news.hada.io/topic?id=17325","서브버트 – 공동 소유 음악 마켓플레이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         서브버트 – 공동 소유 음악 마켓플레이스

Subvert 소개

     * Subvert는 음악 산업의 독립성을 위협하는 Bandcamp의 기업 인수에 대응하여, 아티스트와 레이블이 공동으로 소유하고 운영할 수 있는 플랫폼을 목표로 함.
     * Subvert는 협동조합 형태로 운영되며, 회원들이 플랫폼의 정책과 기능에 영향을 미칠 수 있는 구조를 가짐.

회원 혜택

     * 물리적 잡지: 한정판 물리적 잡지와 회원 증서를 제공함.
     * Subvert 협동조합 회원: 회원 전용 포럼 접근, 공동 소유권, 고유 회원 번호, 정책 및 기능에 대한 영향력 제공.
     * 특별 회원 지위: Subvert 협동조합 내에서 특별한 지위를 부여받음.

회원 가입 방법

     * 서포터 및 동맹: $100에 Founding Supporter Membership 제공.
     * 뮤지션 및 레이블: 무료로 Founding Artist 또는 Label Membership 제공.

Subvert의 중요성

     * Subvert는 음악 산업의 구식 계층 구조를 깨뜨릴 수 있는 새로운 집단 소유 모델을 제시함.
     * 플랫폼과 마켓플레이스에서 소유권은 근본적인 긴장 요소이며, Subvert는 이를 해결하기 위한 구조를 설계함.

GN⁺의 정리

     * Subvert는 아티스트와 레이블이 공동으로 소유하고 운영할 수 있는 플랫폼을 통해 음악 산업의 독립성을 강화하려는 시도를 함.
     * 협동조합 형태로 운영되어 회원들이 플랫폼의 정책과 기능에 직접적인 영향을 미칠 수 있는 점이 흥미로움.
     * Bandcamp와 같은 기존 플랫폼의 대안으로서, 독립 음악가들에게 새로운 기회를 제공할 수 있음.
     * 유사한 기능을 가진 플랫폼으로는 Patreon이나 Kickstarter 등이 있음.

        Hacker News 의견

     * 협동조합과 비영리 단체도 장악될 수 있으며, 이를 방지하기 위해 신중한 계획이 필요함
          + 미국 동부 해안의 식품 협동조합이 특정 공급업체에 의해 장악된 사례가 있음
          + IT 산업의 비영리 회사가 영리 회사로 전환될 뻔한 사례도 있음
     * 음악 발견의 어려움을 해결하는 것이 중요함
          + Bandcamp에서 많은 음악을 구매했지만, 더 많은 것을 발견하기 어려움
          + 대부분의 음악은 품질이 낮으며, 인기만으로는 좋은 예술을 찾기 어려움
          + 비슷한 취향을 가진 사람들을 그룹화하거나 아티스트가 다른 아티스트를 추천하는 것이 유용할 수 있음
     * 매니페스토를 구매해야만 읽을 수 있는지 의문임
          + 프로젝트에 참여하기 전에 문서를 읽을 수 있어야 함
          + Subvert의 자금 조달 방식에 대한 정보가 부족함
          + 외부 투자자와의 복잡한 거래보다 수익의 일부를 공동체에 기부하는 것이 선호됨
     * 공동 소유의 의미와 플랫폼 정책에 대한 영향력에 대한 질문이 있음
          + ""Collective ownership""이라는 표현은 구현 방식에 따라 긍정적일 수도 있고 부정적일 수도 있음
     * 새로운 개념이 주주 기업의 자기 이익을 위한 플랫폼 지배에 도전하는 것을 환영함
          + Subvert 협동조합의 ""Founding Supporter""로 가입했음
          + 미래에 더 많은 기술 협동조합이 생기기를 희망함
     * Bandcamp의 대안으로 협동조합 음악 스토어 프로젝트가 존재함
          + jam.coop은 Bandcamp의 판매에 대한 불확실성에 대응하여 시작된 프로젝트임
          + jam은 다중 이해관계자 협동조합으로 발전할 계획임
     * ""The Mondragon of Music""라는 블로그 게시물이 흥미로움
          + Mondragon Corporation에 대한 더 깊은 정보는 Wikipedia에서 확인 가능함
     * 아티스트가 플랫폼이 필요한 이유에 대한 의문이 있음
          + 음악을 광고하고 판매할 수 있는 도구가 이미 존재함
          + 자주 공연하고, 자금을 모으고, 소셜 미디어를 피하는 것이 중요함
"
"https://news.hada.io/topic?id=17229","소프트웨어 파괴의 미학 - 불확실성에 대항하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소프트웨어 파괴의 미학 - 불확실성에 대항하는 방법

     * 소프트웨어는 많은 것이 불확실하다.
     * 불확실한 이유는 무엇일까?
          + 가장 큰 이유는 비즈니스의 복잡성이 존재하기 때문
          + 복잡성으로 인해 상황은 계속해서 변하며 이로 인해 개발자의 예측은 높은 확률로 틀린다.
          + 공들인 탑이 무너져 그대로 기술부채로 변한다.
          + 작은 이유는 지식과 경험의 부족 때문
          + 지식과 경험이 없다면 개발자 스스로 만들어낸 기술부채를 만들 수 있음
          + 비즈니스의 복잡성은 개발자가 통제할 수 없는 외부 요인, 반면 지식과 경험은 개발자가 통제할 수 있는 내부 요인
     * 개발자에게는 세 가지 길이 있음
          + 복잡성에 대항하는 것은 무의미하다고 생각하는 염세주의적 길
               o ’어차피 변경될테니 그냥 하자’, ‘기술은 무의미해’와 같은 말을하게 됨
               o 편하고 안락한 길이기에 자신도 모르게 이 길을 선택 할 수 있음
          + 복잡성을 외면하고 이상적인 가상만을 생각하는 길
               o 자신이 이상적이라 생각하는 한 가지 기술로 모든 것을 해결할 수 있다고 믿음
               o 경직되고 획일화된 사고를 가지게 됨
               o 개발자는 쉽게 빠질 수 있는 길이지만 빠져나오기 힘듬
          + 복잡성을 받아들이고 맞서 싸우는 길
               o 완벽할 수 없다는 것을 받아들여도 계속 더 나은 길을 찾으려 하는 것
               o 어렵고 견뎌야하는 길
          + 소프트웨어 개발은 계속해서 복잡성과 싸워왔음
               o 아키텍처, 방법론, 애자일 등…
               o 다음은 무엇이 등장할까?
     * 파괴 지향 개발
          + 현실을 보면 어차피 지워진다라는 염세주의적 생각에 빠지기 쉽다.
          + 우리가 열심히 작성한 코드가 실패작이라 느끼며 스스로 지우는 것은 매우 고통스럽기 때문
          + 차라리 거꾸로 생각하여 차라리 잘 지울 수 있게 만드는 것은 어떨까?
     * 파괴는 좋은 것인가?
          + 파괴가 없다면 새로운 것은 탄생할 수 없음
          + 소프트웨어에서 볼 수 있는 파괴는 크게 두 가지 - 피벗과 리팩터링
          + 피벗은 조직과 제품이 더 나은 길을 선택할 수 있게 해줌
          + 리팩터링은 소프트웨어의 생명은 더 연장하기 위해서 꼭 필요한 일
     * 그래서 파괴 지향 개발이란?
          + 언젠가 코드가 파괴될 것이라는 사실을 받아들이고, 그것을 지향하여 개발하는 방법론
          + 세 가지 대원칙을 지향
               o 불확실성이 있다면 가능한 만큼 불확실성을 줄인다.
               o 여러 방법을 선택할 수 있다면 파괴하기 쉬운 쪽을 선택한다.
               o 필요한 것만을 유지한다. 따라서 필요 없는 것은 전부 지운다.
          + 분석 -> 경계 분리 -> 코드 구현 -> 복잡성 제거
          + 내부 요인에 따른 불확실성을 줄이고 어쩔 수 없는 외부 요인으로 인한 파괴에 대비하는 것이 핵심
     * 경계 분리
          + 불확실성은 변화율이며 이를 기반으로 분리하는 것이 가능
          + 개발자는 외부 요인에 대비하며 최대한 내부 요인으로 인한 변화율을 줄여야 함
          + 각 요인의 변화율은 조직마다 다를 수 있기 때문에 고정적인 수치로 표현하는 것은 불가능 -> 휴리스틱한 방법으로 측정
               o ex) 스토리 포인트 측정
          + 무엇을 기준으로 분리할지 추상화 레벨을 결정해야함
     * 파괴 가능성
          + 구현을 할 때는 대원칙에 따라 파괴하기 쉬운 쪽을 선택
          + 독립성, 인지가능성, 통제가능성을 고려하여 파괴 가능성을 판단할 수 있음
               o 독립성은 결합도와 응집도의 정도, 단일 책임 원칙을 어느정도로 지켰는지로 판단
               o 인지가능성은 개발자가 코드를 보고 이해할 수 있는 정도
               o 통제가능성은 개발자가 통제할 수 있는 영역인지를 판단
     * 복잡성 제거
          + 불필요한 것이 있는지 확인하고 제거해야 한다. 즉, 최종적으로 코드베이스엔 필요한 것만을 남겨야 함
          + 마감일 등에 대한 문제로 인해 작업하는 것이 어렵다면 기록만 해두고 작업해도 문제는 없음
               o 내부 요인은 통제 가능하기 때문
          + 파괴에 대비하여 최대한 단순성을 유지하는 것이 핵심
     * 코드 파괴의 기술
          + 코드를 잘 지우는 여러 원칙과 방법이 있음
          + 단계 쪼개기 (리팩터링 패턴)
          + 참조 투명성 지키기
          + 단일 책임 원칙 지키기
          + 인터페이스 분리 원칙 지키기
          + 스트랭글러 무화과 패턴
          + 메서드 전문화
          + 중복 코드 작성
          + 변화율 기록

   지식과 경험이 부족해서 코드 부채를 만든다는 말은 별로 공감이 안가네요

   -> 요구사항 구현에 주어진 시간이 모자랄 수도 있고, 협업하는 경우 타인과 조화를 위해 약간의 기술부채를 감내하는 경우도 있고 상황은 다양하다고 생각합니다.

   지식과 경험을 개발자가 통제할 수 있는 내부 요인으로 보는 것도 잘 모르겠어요

   -> 비즈니스는 복잡해서 어떤 상황이 닥쳐올지 예측할 수 없는데 모든 경우의 수를 그때그때 공부할 수도 없죠. 그 상황에 닥쳐서 공부를 하더라도 다음번엔 전혀 새로운 문제가 발생해 지식이 쓸모없어질 수도 있고요.

   안녕하세요. 의견 주셔서 감사합니다.
   저는 극단을 들여다보았을 때 비로소 본질을 볼 수 있다고 생각합니다. 그런 측면에서 봤을 때 ‘지식과 경험’을 완벽하게 알고 있었다면 시간 내에 부채가 아닌 코드를 만들어낼 수 있다고 생각했습니다.

   시간이 부족하다는 것은 두 가지로 나뉠 수 있습니다. 첫 번째는 말 그대로 구현에 필요한 시간이 부족한 경우입니다. 이 경우는 지식과 경험과 별개로 코드를 작성하는 물리적인 시간이 부족해집니다. 따라서 애초에 목표 달성이 불가능한 조건입니다. 두 번째는 무엇이 좋은지 알아볼 시간이 부족한 경우입니다. 이런 경우는 구현에 대한 방법을 알아보거나 더 나은 좋은 것을 찾는 시간이 부족하기 때문에 지금 알고 있는 지식으로만 코드를 작성하여 일을 끝냅니다. 이렇게 일을 완수하면 ‘어딘가 잘못됐다는 것’은 알지만 정확히 어떻게 고쳐야 하는지는 모릅니다. 만약 정확한 지식이 있었고 그에 대한 경험으로 자신감을 얻었다면 이런 문제가 생기지 않을 겁니다.

   위에 작성한 시간 부족은 제 의견을 뒷받침해 준다고 생각합니다. 물론 현실적으론 굉장히 어려운 문제입니다. 저는 그저 이상적인 말을 했을 뿐이죠. 완벽하게 지식과 경험을 갖춘 상태는 드물고 말씀하신 것처럼 조직을 위해 일부러 감내하는 경우도 분명 있습니다. 억울함이 있을 수 있지만 저는 이 문제를 ‘극단적으로 본다면’ 지식과 경험이 부족했기에 생긴 문제라고 생각했습니다.

   두 번째로 말씀 주신 내부 요인은 간단합니다. ‘비즈니스는 복잡해서 어떤 상황이 닥쳐올지 예측할 수 없는데 …’ 이 부분은 제가 작성한 글에서 ‘비즈니스의 복잡성’에 대한 이야기입니다. 즉, 외부 요인으로 인한 문제입니다. 외부 요인이기 때문에 개발자가 통제할 수 없고 두려움을 느끼는 것입니다. 이 또한 극단적으로 바라봐 비즈니스의 복잡성이 없다고 가정한다면 개발자가 작성한 코드만이 남을 뿐입니다. 그렇다면 내부적으로 통제할 수 있는 ‘지식과 경험’의 문제만이 남습니다.

   물론 제가 작성한 글 또한 저의 의견일 뿐입니다. 충분히 반례가 있을 수 있습니다. 의견 교환은 더 나은 길로 갈 수 있는 기회라고 생각합니다. 앞으로도 많은 의견 부탁드립니다. 감사합니다.

   친절하게 답해주셔서 감사합니다.

   글 잘 읽었습니다. 조직의 스테이지에 따라 무엇이 이른 최적화고 오버엔지니어링이냐도 달라지는 듯 해요. 어차피 다시 짜야할 코드기도 하면서 다시 짤 순간이 올지 안올지도 모르는 코드라는게 어려운 지점이네요. 저는 xxx 서비스, 기능이 없어진다 했을 때 yyy 코드, 데이터는 어디에 있는게 적절한가? 라는 질문으로 판단할 때도 있는데 다른 분들의 방법도 궁금하네요.

   코드 말고도 데이터나 스키마도 없어지거나 변경될 수 있는지 생각하는 편입니다
    1. DB 스키마, 프로토콜(REST API 같은), 기능 세 가지 분류 중 코드가 어디에 해당하는지 생각합니다. 스키마와 프로토콜은 필연적으로 회사 내부의 코드나 외부에 전파되기 때문에 나중에 바꾸려면 혼자 며칠만에 해결할 수 없고 협업이 필요하게 됩니다. 따라서 설계 단계에서 시간을 좀 더 씁니다
    2. 코드가 다루는 데이터의 라이프사이클과 휘발성을 생각합니다. winterjung님께서 고민하시는 서비스가 없어질때의 상황도 포함이 될 것 같네요. OLTP에서 얘기하는 원장, 거래, 이력 테이블 분류도 이런 고민을 시작해보는 방법이 될 수 있을 것 같습니다

   데이터에 대한 내용도 넣고 싶었는데 잘 떠올리기 어렵더라구요. 크리티컬한 부분이라 쉽게 건드리기 어렵고 자칫 마이그레이션 지옥에 빠질 수도 있어서 조심스러웠습니다.

   말씀하신 것처럼 처음 설계 단계가 매우 중요한 것 같은데요, RAW를 최대한 잘 쌓게 만드는 것이 핵심일 것 같습니다. 아니면 이벤트 소싱 아키텍처가 삭제라는 측면에선 유리할 수 있겠네요. 물론 해당 아키텍처를 제대로 써본 적이 없어서 정말 유효할지는 잘 모르겠습니다.
"
"https://news.hada.io/topic?id=17302","Wabe - 몇 분만에 커스터마이징 가능한 백엔드를 만드는 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Wabe - 몇 분만에 커스터마이징 가능한 백엔드를 만드는 오픈소스

     * 인증, 권한, 데이터베이스 접근및 관리, 자동 GraphQL API 생성 등과 같은 필수 기능을 제공하여 백엔드 개발을 간소화
          + Hook 시스템으로 데이터 베이스 요청 전/후에 특정 액션 실행 가능
          + 이메일(프로바이더 이용), 결제(Stripe 및 다른 프로바이더 작성 지원) 지원
     * 속도에 최적화, 모든 레이어에 보안 기본 적용
     * 개발자 친화적인 도구와 API 제공
     * TypeScript 오픈소스
"
"https://news.hada.io/topic?id=17223","주의(Attention)의 조용한 예술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         주의(Attention)의 조용한 예술

주의의 조용한 예술

     * 인생의 조용한 순간에, 세상은 우리의 욕망이나 좌절에 무관심하게 계속 나아가며, 우리가 진정으로 소유할 수 있는 것은 우리의 마음뿐임을 깨달음. 이는 체념이 아닌 해방의 깨달음임.
     * 마음을 정돈하고, 불안한 삶 속에서 고요함을 찾는 것이 더 깊은 자유로 가는 열쇠임.
     * 시작은 거창한 선언이나 급격한 변화가 아닌, 현재에 대한 부드러운 주의에서 시작됨. 마음의 움직임을 관찰하고, 판단 없이 그 움직임을 지켜보는 것임.
     * 이러한 관찰을 통해 마음의 패턴을 발견하고, 생각 사이의 공간을 인식하며, 반사적인 반응이 아닌 의도적인 행동을 할 수 있는 여지를 찾음.
     * 주의를 되찾음으로써 우리는 단순한 여행의 승객이 아닌, 우리의 길을 안내하는 존재가 됨.
     * 주의의 연습을 통해, 우리의 생각을 차지하는 많은 것들이 불필요함을 깨달음. 단순화는 물리적 환경의 정리뿐만 아니라 사고와 삶의 방식임.
     * 복잡함에서 벗어나는 것이 아닌, 더 의미 있게 참여하는 방법임. 중요한 것에 집중하고, 작은 단계로 접근함으로써 복잡한 과업도 자연스럽게 해결됨.
     * 지속적인 변화는 작은, 의도적인 행동에서 시작됨. 이러한 작은 행동의 반복이 시간이 지나면서 더 깊은 명료함으로 이어짐.
     * 삶은 서두르는 것이 아닌, 경험하는 것임. 깊이 집중하고 주의를 기울이는 것이 삶을 풍부하게 만듦.
     * 주의의 조용한 예술은 세상을 버리는 것이 아닌, 더 신중하게 참여하는 것임. 주의를 기울임으로써 명료함, 평화, 힘이 항상 가까이 있었음을 발견함.
     * 마음은 정원과 같아 꾸준한 관리가 필요함. 작은 노력과 주의가 쌓여 자연스러운 습관이 됨.

GN⁺의 정리

     * 이 글은 마음의 주의와 명료함을 찾는 방법에 대해 설명하며, 작은 변화가 큰 영향을 미칠 수 있음을 강조함.
     * 주의의 연습은 복잡한 삶을 더 의미 있게 만들고, 불필요한 생각을 줄이며, 중요한 것에 집중할 수 있게 함.
     * 이 글은 명상이나 마음챙김과 같은 실천을 통해 삶의 질을 향상시키고자 하는 사람들에게 유용할 수 있음.
     * 유사한 기능을 가진 프로젝트로는 명상 앱인 Headspace나 Calm이 있음.

        Hacker News 의견

     * 스토이시즘은 외부 사건은 통제할 수 없으며, 우리의 마음과 행동에 집중해야 한다는 기본 전제를 탐구함. 덕목에 대한 아이디어를 훈련하는 것이 중요하며, 더 깊이 탐구하고 싶다면 관련 서적이나 Daily Stoic을 참고할 수 있음
     * 글이 잘 작성되었음. 한 가지에 깊이 집중하면 시간이 느리게 간다는 주장은 개인적으로나 아는 사람들에겐 적용되지 않음. 오히려 한 가지에 집중할 때 시간이 빨리 가고, 산만함이 집중을 방해함
     * 훌륭한 글임. 현재와 주의력의 물리학과 신경생리학은 복잡함. 아인슈타인은 생애 말기에 '현재'의 문제에 대해 고민했으며, 이는 물리학 내에서 설명되지 않는다고 함. 신경과학은 '현재'에 대한 더 많은 통찰을 제공하고 있으며, 인간의 시간성에 대한 물리적 설명을 찾을 수 있을 것이라 확신함
     * 글이 다소 화려한 문체를 사용함. 유명한 피아니스트 클라라 슈만의 인용구가 떠오름. ""아름다운 것들을 서둘러 지나치지 말고, 머물며 즐기라""는 말이 인상적임
     * 좋은 글임. 주의력을 기르는 방법에 관심이 있다면, 부처는 네 가지 영역(몸, 감각, 마음, 정신적 대상)에 집중하여 마음챙김을 가르쳤음
     * 명상 실천이 왜 시간을 들일 가치가 있는지, 그리고 오늘날의 지속적인 주의력 결핍과 정신적, 물리적 공간의 부족에 맞서야 하는 이유를 잘 설명함. 훌륭한 글임
     * 셜록 홈즈의 이야기 중 하나에서 홈즈는 왓슨에게 계단의 계단 수를 묻고, 왓슨이 모른다고 하자 홈즈는 정확한 숫자를 말하며 ""당신은 보지만 관찰하지 않는다""고 말함. 셜록 홈즈도 이 글을 읽은 것 같음
     * 작은 노력과 주의력의 순간들이 쌓여 시간이 지나면 자연스러워짐. 주의력의 오아시스를 찾는 것도 중요하지만, 그것을 바다로 채우는 것이 목표가 되어야 함. 이는 현대의 주의력 추구 알고리즘의 함정 등으로 인해 매우 어려움
     * Michael Singer의 ""The Surrender Experiment""를 참고할 만함. 그는 내면의 목소리와 의식에 대한 발견과 관계에 대해 이야기하며, 공공 EMR 스타트업의 기술 창립자이기도 함. 매우 흥미로운 읽을거리임
     * 흡연이 주의력에 도움이 되었는지, 그리고 그것이 습관이 되었는지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=17285","To GN: GeekNight 2024 라이트닝 토크️ 발표자 모집 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 To GN: GeekNight 2024 라이트닝 토크️ 발표자 모집

   긱뉴스 밋업 GeekNight - ""$라이프 해킹> 즐거운 삶을 위하여"" 발표자를 모집합니다!

   발표는 각 5분 이내의 라이트닝토크로 진행합니다.
   발표 주제는 사이드 프로젝트, 새로운 비즈니스, 내 삶을 풍요롭게 하는 것들과 관련된 모든 것들 입니다.
     * 라이트닝 토크(Lightning Talk) 는 짧고 간결하게 정보를 공유하는 발표 방식으로, 주어진 시간 동안 발표자가 자신의 아이디어나 프로젝트, 경험 등을 매우 빠르게 설명합니다. 발표자는 자신의 메시지를 간결하고 재미있게 전달해야 하며, 참가자들은 여러 주제에 대해 짧은 시간 내에 다양한 아이디어와 생각을 '번개처럼' 경험할 수 있습니다.

발표 신청 안내

     * 발표 신청 마감 : 10. 28 (월)
     * 발표자 선정 : 10. 31 (목) - 약 10인 선정 후 별도 안내
     * 발표 주제 : 사이드 프로젝트, 새로운 비즈니스, 내 삶을 풍요롭게 하는 것들과 관련된 모든 것들
     * 주제에 적합하고, 유용하거나 흥미로운 내용일수록 선정될 가능성이 높습니다.
     * 발표자는 참가비가 면제됩니다.

발표 가이드

     * 5분 이내
     * 발표자료 있을 경우 사전 제출

GeekNight 2024 일정

     * 발표 일시 : 12. 12 (목) 7:00 PM
     * 장소 : 서울시 마포구 공덕동 마포T타운 5층 해피홀
     * 참가자 신청은 11월초 별도 진행 예정

   문의가 있으신 분은 geek@hada.io 로 메일 주세요.

   --> ~~GeekNight 2024 라이트닝 토크⚡️ 발표자 신청하기 - 구글폼~~
   발표자 모집이 마감되었습니다.

   와 기대됩니다 화이팅이에요!
"
"https://news.hada.io/topic?id=17283","Asterinas - Rust로 작성된 Linux 호환 ABI 제공 OS 커널","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Asterinas - Rust로 작성된 Linux 호환 ABI 제공 OS 커널

     * Asterinas는 안전성, 속도, 범용성 을 갖춘 OS 커널로, Linux 호환 ABI를 제공
     * Linux를 대체할 수 있으며, 메모리 안전성 과 개발자 친화성 을 향상시킴
          + Rust를 유일한 프로그래밍 언어로 사용하고, unsafe Rust 의 사용을 최소화하여 명확히 정의된 신뢰 컴퓨팅 기반(TCB)으로 제한함으로써 메모리 안전성을 우선시함
          + 프레임커널 아키텍처를 통해 Asterinas는 더 안전하고 신뢰할 수 있는 커널 옵션으로 자리잡음
          + 개발자 친화성 면에서 Linux를 능가하며, (1) 생산성이 높은 Rust 프로그래밍 언어를 활용하고, (2) OSDK라는 전용 툴킷을 활용하여 워크플로우를 간소화하며, (3) MPL의 유연성을 통해 커널 모듈을 오픈 소스로 공개하거나 독점적으로 유지할 수 있는 선택권을 제공함
     * 현재 Asterinas는 x86-64 VM만 지원하지만, 2024년까지 x86-64 VM에서 프로덕션 준비가 완료된 상태로 만드는 것이 목표임

GN⁺의 정리

     * Asterinas는 Rust로 작성된 OS 커널로, 메모리 안전성과 개발자 친화성을 강조하며 Linux 호환성을 제공함
     * Rust의 안전성과 생산성을 활용하여 더 안전하고 효율적인 커널 개발 환경을 제공함
     * Asterinas의 프레임커널 아키텍처는 신뢰성과 안전성을 높이며, MPL을 통해 모듈의 공개 여부를 선택할 수 있는 유연성을 제공함
     * Linux 커널 개발에 관심 있는 개발자들에게 흥미로운 대안이 될 수 있으며, Rust의 장점을 활용한 커널 개발의 가능성을 보여줌
     * 비슷한 기능을 가진 프로젝트로는 Redox OS가 있음

   최근 해커뉴스에 올라오는 프로젝트들 중에 뭔가 대중의 입맛에 맞는것들을 자세히 살펴보면 주로 중국인 커미터들이 메인인 프로젝트가 많네요.
   특히나 리드미에 영어 기본에 중국어 문서가 추가로 있는 경우는 대부분 인거 같아요.

   AI 쪽도 보면 실용적인 프로젝트(ONNX변환이나 네이티브 언어 기반의 운용 라이브러리, 바로바로 쓸 수 있는 환경 등)들도 보면 중국인들이 메인인 경우가 많더라구요.

        Hacker News 의견

     * 개인적으로 Rust를 좋아하지 않지만 커널을 좋아해서 항상 이런 프로젝트를 확인함. 이 프로젝트는 Rust의 고급 기능을 보수적으로 사용하며, 코드가 읽기 쉽고 주석도 적당히 있음. 나쁘지 않음
     * 고성능 네트워크/IO 서비스 실행을 위한 커널에 관심이 있음. 하드웨어 지원, 특히 네트워킹 하드웨어가 큰 걱정임. FreeBSD나 Linux 커널로 부팅 후 Rust OS/추상화 계층을 사용하는 접근이 흥미로울 것 같음
     * Microsoft가 Pluton 펌웨어에 Rust 기반 OS인 TockOS를 사용 중임
     * Asterinas에 관심이 있다면 Rust로 작성된 전체 OS인 Redox에도 관심이 있을 것임
     * Linux 전체에 호환 가능한 ABI를 만드는 것이 놀라움. Rust가 더 생산적이라는 비교는 비과학적이고 프로젝트에 경고 신호가 될 수 있음. 개발자에게 가장 생산적인 언어는 추상화 수준 아래에서 무슨 일이 일어나는지 이해할 수 있는 언어임
     * Asterinas: TEE를 위한 안전한 Rust 기반 OS 커널에 대한 발표가 있음
     * Framekernel OS 아키텍처에서 전체 OS는 같은 주소 공간에 있으며 Rust로 작성되어야 함. 커널은 두 부분으로 나뉘고, 비특권 서비스는 안전한 Rust로만 작성되어야 함. 컴파일러 버그를 악용할 수 있는 비특권 서비스가 보안 모델에 미치는 영향이 궁금함
     * Rust로 작성된 또 다른 OS인 Twizzler가 있음. 연구용 OS지만 여전히 흥미로움
     * Kerla라는 유사한 프로젝트가 있었지만 개발이 중단됨. Rust-for-Linux 대신 이러한 대체품을 만드는 것이 더 쉬울 것이라는 의견이 있었음. 지속 가능한 프로젝트로 만들기에 충분한 관심이 있는지 궁금함
     * Asterinas는 현재 x86-64 VM만 지원하며, 2024년까지 x86-64 VM에서 프로덕션 준비 상태로 만드는 것이 목표임. 혼란스러움
"
"https://news.hada.io/topic?id=17334","빠른 인터넷에서도 충분히 빠르지 않은 QUIC 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      빠른 인터넷에서도 충분히 빠르지 않은 QUIC 기술

QUIC은 빠른 인터넷에서 충분히 빠르지 않음

     * 연구 배경
          + QUIC은 웹 애플리케이션 성능을 향상시키는 데 중요한 역할을 할 것으로 기대됨.
          + 이 논문은 고속 네트워크에서 QUIC의 성능을 체계적으로 조사함.
     * 주요 발견
          + 고속 인터넷에서 UDP+QUIC+HTTP/3 스택은 TCP+TLS+HTTP/2에 비해 데이터 전송 속도가 최대 45.2% 감소함.
          + 기본 대역폭이 증가할수록 QUIC과 HTTP/2 간의 성능 차이가 커짐.
          + 이 문제는 파일 전송뿐만 아니라 비디오 스트리밍(최대 9.8% 비디오 비트레이트 감소) 및 웹 브라우징 등 다양한 애플리케이션에 영향을 미침.
     * 분석 방법
          + 패킷 추적 분석 및 커널 및 사용자 공간 프로파일링을 통해 문제의 근본 원인을 식별함.
          + 수신 측 처리 오버헤드가 높고, 특히 과도한 데이터 패킷과 QUIC의 사용자 공간 ACK가 문제의 원인임.
     * 개선 권장 사항
          + 관찰된 성능 문제를 완화하기 위한 구체적인 권장 사항을 제시함.

GN⁺의 정리

     * 이 논문은 QUIC의 성능 문제를 고속 네트워크 환경에서 분석하여, 웹 애플리케이션 성능 향상에 기여할 수 있는 중요한 인사이트를 제공함.
     * QUIC의 성능 저하 원인을 수신 측 처리 오버헤드로 규명하고, 이를 해결하기 위한 구체적인 방안을 제시함으로써, 네트워크 엔지니어 및 개발자에게 유용한 정보를 제공함.
     * 비슷한 기능을 가진 다른 프로토콜로는 HTTP/2가 있으며, 이와의 성능 비교를 통해 QUIC의 개선 방향을 제시함.

        Hacker News 의견

     * 산업계는 경량 웹사이트를 만드는 것 외에는 모든 것을 시도하고 있음. 90년대 후반에는 빠른 인터넷 연결이 있다면 페이지가 작고 자바스크립트가 거의 없었음. 오늘날에도 이러한 빠르게 로딩되는 경량 페이지를 찾을 수 있으며, 경험은 거의 초현실적임. 사용자 경험이 더 좋았다면 더 견딜 수 있었을 것임.
     * Google에서 순수 JS Speedtest를 작업했음. 당시 Ookla는 Flash 기반이어서 Chromebooks에서 작동하지 않았음. TCP가 다양한 요소에 어떻게 반응하는지 많이 배웠음. 이 기사를 보고 결과가 예상대로라고 생각함. 왜냐하면 흐름 제어를 커널에서 사용자 공간으로 밀어내기 때문임. TCP는 흐름 제어와 시퀀싱을 가지고 있음. QUIC은 이를 스스로 관리하게 함. TCP 혼잡 제어는 현대 연결 속도와 맞지 않아 BRR과 같은 새로운 알고리즘이 필요하지만 비용이 듦. 가장 큰 교훈은 네트워크 테스트에서 지연 시간의 중요성을 간과하지 말아야 한다는 것임. 아시아나 호주에 사는 사람들은 100ms RTT 지연 시간이 얼마나 치명적인지 알 것임. QUIC의 오버헤드가 실질적으로 중요하지 않을 수 있음. 왜냐하면 단일 TCP 연결이나 QUIC 스트림을 통한 실제 대역폭이 원시 대역폭보다 훨씬 낮을 수
       있기 때문임.
     * Curl의 창시자이자 유지보수자인 Daniel Stenberg가 HTTP/3에 대해 블로그에 글을 올렸음. HTTP/3의 높은 CPU 사용률을 강조했으며, CPU가 처리량을 제한할 수 있다고 언급함. 이는 구현의 미성숙함 때문인지, QUIC의 설계 방식 때문인지 궁금함.
     * 빠른 인터넷에서 UDP+QUIC+HTTP/3 스택이 TCP+TLS+HTTP/2에 비해 데이터 전송 속도가 최대 45.2% 감소한다고 함. 아직 논문을 다 읽지는 않았지만, 600 Mbit/s 이하가 ""느린 인터넷""으로 간주됨.
     * QUIC은 빠른 인터넷에서 충분히 빠르지 않다고 함. 900mbps 속도를 quic+http3에서 달성했으며, TLS 구현이 나쁜 것인지, 초기 구현이 비효율적인 것인지 의문임. CPU 사용률은 gen 2 epyc 코어에서 평균 5% 정도였음.
     * 여기서 ""빠른 인터넷""은 500Mbps이며, quic이 CPU에 의존적이기 때문이라고 함. 테스트 시스템이 기본 소비자 시스템인지 고성능 데스크탑에서도 문제인지 확인하지 않았음.
     * QUIC은 지연 시간에 최적화되어 있다고 생각했음. 웹페이지와 비디오 게임에서 작은 패킷을 많이 로드하는 데 최적화되어 있음. 전체 처리량만 측정할 때는 부족할 수 있음. 프로토콜 수준에서 대용량 파일 전송이나 고대역폭 비디오 스트리밍을 감지하여 덜 CPU 집약적인 것으로 전환할 수 있는지 궁금함. QUIC이 TCP보다 하드웨어/OS 수준에서 최적화가 덜 된 것인지 궁금함.
     * QUIC이 TLS 모드가 없는 것을 바람. 로컬에서 개발할 때 가끔은 전송되는 것을 보고 싶고, 이는 불필요한 마찰을 추가함.
"
"https://news.hada.io/topic?id=17216","PayPal(미국), 참여 매장에 고객 데이터 자동 공유 정책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PayPal(미국), 참여 매장에 고객 데이터 자동 공유 정책

정책 업데이트

     * 미국 PayPal 계약의 개정 통지
          + 이 페이지는 미국 PayPal 사용자 계약 및 기타 온라인 계약, 정책, 또는 성명서의 변경 사항을 사용자에게 알림.
          + 변경 사항은 해당 날짜에 자동으로 적용됨.
     * 필요한 조치
          + 변경 사항을 주의 깊게 검토하고, 변경 사항이 적용된 후에도 서비스를 계속 사용하면 이에 동의하는 것으로 간주됨.
          + 변경 사항을 거부하려면 해당 날짜 이전에 PayPal 계정을 닫아야 함.

  공지사항

     * 발행일: 2024년 9월 23일
     * PayPal 개인정보 보호 정책의 개정
          + 효력 발생일: 2024년 11월 27일
          + 2025년 초여름부터 쇼핑 경험을 개선하고 개인화하기 위해 정보를 공유할 예정.
          + 개인정보는 제품, 선호도, 사이즈, 스타일 등을 포함하며, 캘리포니아, 노스다코타, 버몬트를 제외한 지역에서는 자동으로 공유됨.
          + 모든 사용자는 계정의 ""데이터 및 개인정보"" 설정에서 데이터 공유를 거부할 수 있음.
     * PayPal 판매자 보호 프로그램의 개정
          + 효력 발생일: 2024년 11월 18일
          + 업데이트된 판매자 보호 프로그램 검토 필요.
     * PayPal 온라인 결제 서비스 계약의 개정
          + 효력 발생일: 2024년 11월 18일
          + 상인이 자동 청산소(ACH) 결제를 수락할 수 있는 새로운 서비스 도입.
          + 이에 따라 PayPal 온라인 카드 결제 서비스 계약의 명칭을 PayPal 온라인 결제 서비스 계약으로 변경.
          + 새로운 서비스와 관련된 수수료가 상인 수수료 페이지에 추가됨.
     * PayPal 모금 프로그램의 중단
          + 효력 발생일: 2024년 10월 7일
          + 2024년 10월 7일부터 모금 생성 기능 비활성화.
          + 기존 모금의 자금은 2025년 1월 12일까지 PayPal 잔액으로 이동해야 함.
          + 모금 프로그램의 약관은 2025년 1월 13일에 법적 계약 페이지에서 제거됨.

GN⁺의 정리

     * PayPal은 사용자 경험을 개선하고 개인화하기 위해 개인정보 보호 정책을 업데이트함.
     * 새로운 서비스로 상인들이 자동 청산소(ACH) 결제를 수락할 수 있게 되어 결제 옵션이 다양해짐.
     * 모금 프로그램의 중단으로 인해 사용자는 기존 모금의 자금을 PayPal 잔액으로 이동해야 함.
     * 이러한 변경 사항은 PayPal 사용자에게 중요한 영향을 미칠 수 있으며, 사용자는 변경 사항을 주의 깊게 검토해야 함.
"
"https://news.hada.io/topic?id=17281","미국 10대들의 기업 선호도 조사 - 2024년 가을","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국 10대들의 기업 선호도 조사 - 2024년 가을

     * Piper Sandler 투자은행이 매년 두번씩 시행하는 꽤 재미난 통계인 ""Talking Stock With Teens®""의 48회차
          + 13,500명의 미국 틴에이저 대상 설문조사 결과의 보고서
     * 10대들이 ""직접 보고""한 바에 의하면 연간 소비액이 $2,361로 지난 봄 대비 4% 증가함
     * 34%가 현재 파트타임 아르바이트 중

의류 및 신발

     * Nike는 의류와 신발 모두에서 모든 틴에이저에게 1위 브랜드로 굳건히 자리매김함 (의류 33%, 신발 57%)
     * New Balance는 4위에서 3위로 올라섰고, 이번 가을 마인드쉐어(인지도/선호도)가 8%로 2배 증가함
     * 의류에서 lululemon은 3위 순위를 유지하지만 고소득 틴에이저 사이에서 4%p의 마인드쉐어를 잃음
     * Amazon은 고소득 틴에이저 사이에서 최고의 쇼핑 웹사이트로 1위를 차지함(52%)

뷰티

     * 틴에이저에게 뷰티 카테고리는 여전히 높은 우선순위를 차지하며, 이번 가을 설문 조사에서 코어 뷰티 지갑 규모는 $342로 2018년 이후 최고 수준에 도달함
     * 화장품은 뷰티 지출에서 가장 높은 비중을 차지하지만, 향수는 전년 대비 25% 빠르게 성장하고 있음(1등은 Bath & Body Works 24%)
     * 화장품 브랜드 1등은 e.l.f (35%), 2등은 Rare Beauty (10%), 3등 Maybelline (7%)
     * 쇼핑 매장 1등은 Sephora(36%), Ulta가 2등 (27%), Target이 3등(13%)

기술 및 소셜 미디어

     * TikTok은 틴에이저에게 가장 인기 있는 소셜 앱(39%)이며, Instagram은 2위(32%), Snapchat은 3위를 차지함
     * 틴에이저의 87%가 iPhone을 보유하고 있으며, 거의 30%는 Apple Intelligence로 인해 향후 6개월 내에 Apple 하드웨어를 업그레이드할 계획임
     * 넷플릭스는 일일 비디오 소비와 관련하여 틴에이저의 탑 초이스임(30%, 유튜브가 27%로 2등)
     * Roblox 플레이가 봄의 34%에서 46%로 향상. 17% 의 10대들은 한번도 Roblox를 플레이 해본적 없음(봄의 22%에서 5% 감소)

레스토랑 및 식품

     * Chick-fil-A는 계속해서 틴에이저에게 선호하는 체인 레스토랑이며, McDonalds와 Chipotle Mexican Grill은 각각 2위와 3위를 차지함
     * 틴에이저는 커피와 소다보다 에너지 음료를 에너지원으로 선호함
     * Monster Beverage, Red Bull, Celsius, Alani Nu는 계속해서 상위 4개 순위를 유지하고 있음

   2회차 정도 건너 뛰었네요. 사실 크게 변화가 있지는 않습니다 ㅎㅎ
     * 미국 10대들의 기업 선호도 조사 - 2023년 봄
     * 미국 10대들의 기업 선호도 조사 - 2022년 봄
     * 미국 10대들의 기업 선호도 조사 - 2021년 가을
     * 미국 10대들의 기업 선호도 조사 - 2021년 봄
     * 미국 10대들의 기업 선호도 조사 - 2020년 가을
"
"https://news.hada.io/topic?id=17271","HN 화제: Blender에서 영감을 받은 2D 절차적 디자인 Rust 앱 Graphite 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN 화제: Blender에서 영감을 받은 2D 절차적 디자인 Rust 앱 Graphite 출시

소프트웨어 개요

     * Graphite는 무료 오픈 소스 벡터 및 래스터 그래픽 엔진으로, 현재 알파 버전으로 제공됨
     * 레이어 기반 합성과 노드 기반 생성 디자인을 결합한 비파괴적 편집 워크플로우 제공
     * 벡터 편집기로 시작하여 게임 엔진처럼 설계된 종합 그래픽 도구로 발전 중

모든 것을 하나로

     * 여러 프로그램을 오가며 작업할 필요 없이, 다양한 워크플로우를 위한 일류 콘텐츠 생성 도구로 발전 예정
          + 그래픽 디자인
          + 이미지 편집
          + 모션 그래픽
          + 디지털 페인팅
          + VFX 합성
          + 데스크탑 출판

현재 기능

     * 벡터 편집 도구
     * 그래픽 디자인을 위한 절차적 워크플로우
     * 노드 기반 레이어
     * 영구 무료 및 오픈 소스

향후 기능

     * 모든 2D 작업을 위한 종합 창작 도구
     * 완전한 기능의 래스터 조작
     * Windows/Mac/Linux 네이티브 앱 및 웹
     * 실시간 협업 편집

로드맵

     * 데스크탑 우선 및 웹 준비
     * 2024년 후반에 Windows, Mac, Linux용 데스크탑 앱 출시 예정
     * 웹을 우선 지원하여 모든 기기에 최신 상태 유지

절차적 편집의 힘

     * Graphite는 비파괴적 편집을 위한 최초의 그래픽 디자인 패키지
     * 노드 파라미터 조정을 통해 빠른 반복 가능

창의적 경로 탐색

     * 노드 파라미터 조정을 통해 빠른 반복 가능
     * 색상 스키마 혼합, 모양 변형 등 다양한 가능성 제공

생성 파이프라인을 위한 설계

     * 노드 그래프를 통한 작품 표현으로 콘텐츠 워크플로우를 사용자 정의, 구성, 재사용, 공유, 자동화 가능
     * 무한 줌 및 팬을 통한 픽셀화 없는 콘텐츠 제공
     * 모듈식 노드 기반 파이프라인 및 스튜디오 제작 환경을 위한 자산 파이프라인 지원 예정

GN⁺의 정리

     * Graphite는 절차적 편집을 위한 혁신적인 오픈 소스 그래픽 엔진으로, 비파괴적 워크플로우를 통해 창의적 작업을 지원함
     * 벡터 및 래스터 그래픽을 통합하여 다양한 그래픽 작업을 하나의 도구로 처리 가능
     * WebAssembly와 WebGPU 기술을 활용하여 웹에서도 높은 성능을 제공하며, 데스크탑 환경에서도 최적의 성능을 목표로 함
     * 비슷한 기능을 가진 다른 도구로는 Adobe Illustrator, Inkscape 등이 있음

        Hacker News 의견

     * Inkscape를 좋아하지만 이 도구는 너무 훌륭하다고 생각함. 웹 앱으로 개발된 도구들이 더 많아지면 웹 플랫폼의 개방성과 접근성이 향상됨. Rust는 훌륭하며 Web Assembly로 컴파일된 것으로 추정됨. 세 명의 열정적인 사람들이 투자 유치 없이 프로젝트를 진행한 이유가 궁금함. 아마도 열정은 가격을 매길 수 없는 것일지도 모름.
     * Illustrator를 25년간 사용해왔으며 최근 Appearance 스택의 노드 지향 대체품을 원했음. 바이너리가 나오면 확인해볼 예정임. 웹 앱을 싫어함.
     * Graphite라는 오픈 소스 Rust 그래픽 편집기의 진행 상황 보고서가 관련되어 있음. 여러 링크를 통해 Graphite의 과거와 미래에 대한 정보를 제공함.
     * 소개 문단을 여러 번 읽어야 이해할 수 있었음. Blender의 대체품으로 읽었지만 테스트해보니 2D로 Photoshop과 비슷했음. Blender는 폐쇄형 3D 모델링/렌더링 소프트웨어의 오픈 소스 버전으로 참조된 것 같음.
     * 훌륭한 오픈 소스 디자인 도구가 필요함. Graphite를 목록에 추가해야 함. Graphite를 시도하고 진행 상황을 지켜볼 것임. 행운을 빔.
     * 복잡한 도구를 출시한 것을 축하함. 언젠가 제약 해결기를 포함한 벡터 그래픽 도구를 만들고 싶음. Inkscape 사용이 어렵다고 느끼며, Fusion 360 스케치로 2D 디자인을 만드는 것이 더 직관적이고 상호작용적임.
     * 훌륭한 UX를 자랑하며, Zed와 함께 일상 앱을 대체할 수 있음. Rust 코드를 직장에서 사용하고 싶음.
     * 중간 복잡도의 SVG를 열었을 때 앱이 반응하지 않음. 스케일 값을 수동으로 입력하여 축소했지만 SVG를 찾을 수 없었음. 모든 업데이트가 1-2초 걸림. 간단한 프로젝트에만 사용 가능하며 벡터를 비트맵/텍스처로 캐싱해야 함. OpenEXR 지원이 아직 없음. 스크린샷은 훌륭하지만 일부 UI 요소의 기능이 구현되지 않았는지 불분명함.
     * Blender의 매력은 오픈 소스뿐만 아니라 모든 것이 프로그래밍 가능하다는 점임. InkScape를 발전시키는 대신 새로운 프로젝트를 만드는 이유가 궁금함.
     * 2D 그래픽이 여러 프로그램을 사용하고 피드 포워드 파이프라인 워크플로우를 강요하는 점이 싫음.
"
"https://news.hada.io/topic?id=17237","Pipet - 온라인에서 데이터를 스크래핑/추출하는 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Pipet - 온라인에서 데이터를 스크래핑/추출하는 CLI 도구

     * 3가지 동작을 지원 : HTML 파싱, JSON 파싱, 클라이언트에서 자바스크립트 실행
     * curl 같은 기존 도구에 의존하며, Unix Pipe를 이용하여 동작
     * .pipet 파일로 명령을 구성하며 파일안에는 여러개의 블록으로 구성
          + 하나의 블록은 3개의 섹션
               o 첫줄은 리소스 URL
               o 다음 라인들은 읽어올 데이터들을 지정하는 쿼리
               o > 로 시작하면 다음 페이지를 읽어올 셀렉터 (옵셔널)
     * 파일 예제

curl https://news.ycombinator.com/
.title .titleline
  span > a
  .sitebit a

     * --interval 60 원하는 시간(60초) 마다 재실행 가능
     * --on-change CMD 내용이 변경되면 실행할 명령
"
"https://news.hada.io/topic?id=17272","HN 공개: 코판 마야 피라미드 사원 내부 터널의 3D 스캔","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN 공개: 코판 마야 피라미드 사원 내부 터널의 3D 스캔

     * Temple 26과 발굴 터널, 코판
     * 1930년대부터 고고학자들은 코판의 아크로폴리스에 터널을 뚫어 그 역사 속 다양한 건축 단계를 이해하려고 노력해 왔음
     * 현재 조사가 대부분 완료되어 터널의 총 길이는 약 4킬로미터에 달하며, 초기 석비, 석고 외관, 무덤 등을 발견하여 아크로폴리스의 마지막 단계 이전 모습을 많이 알게 되었음
     * 하버드가 주도하는 보존 계획은 Instituto Hondureño de Antropología e Historia와의 지속적인 협력 하에 이 터널 시스템의 디지털 3D 모델을 생성하고, 습한 기후, 계절적 수위 변화, 방문객 접근, 붕괴 위험 등을 고려하여 귀중한 건축 유산을 보존하는 방법을 모색하고 있음

GN⁺의 정리

     * 이 기사는 코판 아크로폴리스의 역사적 중요성과 고고학적 발견을 다루고 있어 흥미로움
     * 터널 시스템의 디지털 3D 모델링은 보존과 연구에 큰 도움이 될 수 있음
     * 유사한 프로젝트로는 이집트의 피라미드 내부 탐사 등이 있으며, 이러한 프로젝트들은 역사적 유산의 보존과 이해에 기여함
     * 터널의 붕괴 위험과 같은 문제는 지속적인 모니터링과 보존 노력이 필요함

        Hacker News 의견

     * 붉은 주사로 코팅된 유물의 경우, 코팅한 사람이 이른 시기에 사망했을 가능성이 높음. 이는 독성 물질을 다루는 것에 대한 경고로 볼 수 있음
          + 붉은 주사는 가장 신성한 의식에만 사용되었으며, 사용을 꺼리는 사람도 많았을 것임
     * 기술을 활용한 투어가 매우 인상적임
          + 국가 기념물이나 세계의 경이로움을 스캔하는 것이 기술의 훌륭한 사용법임
     * Lex Fridman의 팟캐스트에서 고대 아메리카 문명 전문가와의 대화를 떠올리게 함
     * 3D 재구성을 위한 기술적 배경에 대한 공유 요청
          + OpenSfM이나 COLMAP 같은 패키지의 결과물인지 궁금해함
     * 3D 스캔과 브라우저에서의 3D 맵 중 어느 것이 더 멋진지 모르겠음
          + 공유해줘서 감사함
     * Unreal 환경에서의 스캔 작업에 대해 기쁘게 생각함
          + 웹 버전의 움직임이 불편하다고 느끼며, 게임 같은 환경이 필요하다고 생각함
          + 4K-8K 환경을 캡처하여 매우 현실적인 가상 세계로 만드는 기술이 있음
          + 역사적 참고를 위해 도시를 캡처하는 작업이 필요하다고 생각함
          + 과거에 시스틴 성당의 고품질 환경 스캔을 본 적이 있음
          + 게임 개발자들이 학자들을 도와야 한다고 생각함
     * 이전에 다른 피라미드의 3D 스캔을 공유한 적이 있다고 생각함
          + Gaussian Splatting 소프트웨어를 통해 데이터를 처리해볼 것을 제안함
     * 무덤과 구조물이 원래 외부 세계와의 경로 없이 봉인되었는지 궁금해함
          + 고고학자들이 터널을 발굴하지 않고도 의식을 위한 방이 접근 가능했는지 질문함
     * 단순한 도구와 맨손으로 지하에 터널을 조각한 것이 놀랍다고 생각함
          + Matterport의 SDK를 사용한 훌륭한 구현이라고 생각함
          + Pro3를 캡처 장치로 사용했는지 궁금해함
"
"https://news.hada.io/topic?id=17244","앤트로픽 다리오 아모데이 CEO가 이야기하는 AI 로 인해 바뀔 미래상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                앤트로픽 다리오 아모데이 CEO가 이야기하는 AI 로 인해 바뀔 미래상

   몇일전 앤트로픽 CEO 다리오 아모데이가 미래에 대한 장문의 에세이가 올라왔습니다.

   강력한 AI가 향후 몇년 내 등장할 것으로 예상되는 가운데 이후 10년 내 세상이 어떻게 변할지 5가지 부분 (생물학 측면, 정신건강 측면, 경제, 평화, 일의 의미) 에 대해 예측한 글이었어요.

   이 글은 분량 (A4 용지 20장 정도) 답게 추상적이기 보다는 최대한 상세하게 예측하려고 했기에 미래에 일어날 일을 구체적으로 상상해 볼 수 있었구요. 또 그러한 예측을 하게 된 근거들을 통해 지금 인공지능 기술의 최전선에 있는 리더의 시각을 조금이나마 공유 받을 수 있는 좋은 기회가 되기도 합니다.

   그래서 이 글이 널리 퍼지길 바라지만 너무 부담되는 분량이라 요약 정리해보았습니다! 🤗
   그런데 요약치고는 길이가 꽤 길어졌어요...

   요약본을 읽고 나니 흥미가 생겨서 원본도 읽어보려고 합니다. 좋은 콘텐츠 감사합니다.

   네! 원본 읽다보니 한줄 한줄 배우고 리서치하고 싶은 부분들이 고구마 줄기처럼 계속 나오더라구요.. ㅎㅎ

   3번이 어떻게 될지 궁금 합니다. 저항이 매우 클게 뻔하기도 하고, 돈과 권력 없는 개개인에게 얼마나 인공지능의 혜택이 주어질지....?

   저도요.. 약간은 급진적인 생각이지만. 만약 우리가 자생적으로 다수가 납득할 수 있는 방향이 아닌 부의 쏠림이 지금보다 더 심화되는 방향으로 가게 된다면? 5번에서도 살짝 언급된 것처럼 지금의 경제구조 자체를 혁신하는 수준으로 가게 되는 시발점이 되지 않을까 싶기도...

   감사합니다. 잘 읽겠습니다.

   저도 감사합니다~ 😊
"
"https://news.hada.io/topic?id=17330","DataChain - 클라우드의 데이터를 보강, 변환 및 분석하는 AI 데이터 웨어하우스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           DataChain - 클라우드의 데이터를 보강, 변환 및 분석하는 AI 데이터 웨어하우스

     * AI를 위해 설계된 최신 Python 데이터 프레임 라이브러리
     * 비정형 데이터를 데이터 세트로 구성하고 로컬 머신에서 대규모로 Wrangle할 수 있도록 만들어짐
     * AI 모델과 API 호출을 추상화하거나 숨기지 않고 포스트모던 데이터 스택에 통합

주요 특징

     * Source of Truth 저장소
          + S3, GCP, Azure, 그리고 로컬 파일 시스템에서 중복된 사본 없이 비정형 데이터를 처리함
          + 멀티모달 데이터 지원: 이미지, 비디오, 텍스트, PDF, JSON, CSV, parquet 등
          + 파일과 메타데이터를 영구적이고, 버전 관리되며, 컬럼 기반인 데이터셋으로 통합함
     * Python 친화적인 데이터 파이프라인
          + Python 객체와 객체 필드에 대해 작업함
          + SQL이나 Spark 없이 내장된 병렬화와 메모리 외부 연산 기능
     * 데이터 보강(Enrichment)과 처리
          + 로컬 AI 모델과 LLM API를 사용하여 메타데이터 생성
          + 메타데이터를 기준으로 필터링, 조인, 그룹화. 벡터 임베딩으로 검색
          + 데이터셋을 Pytorch나 Tensorflow에 전달하거나 다시 저장소로 내보냄
     * 효율성
          + 병렬화, 메모리 외부 작업, 데이터 캐싱
          + Python 객체 필드에 대한 벡터화된 연산: 합, 개수, 평균 등
          + 최적화된 벡터 검색
"
"https://news.hada.io/topic?id=17256","HN 공개: 가장 과도하게 설계된 Deal With It 이모지 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HN 공개: 가장 과도하게 설계된 Deal With It 이모지 생성기

     * Deal With It GIF 이모지 생성기
          + 브라우저에서 안전하게 GIF 이모지를 생성할 수 있는 도구임
          + 파일을 클릭하거나 드래그하여 시작할 수 있으며, 이미지 URL을 붙여넣을 수도 있음
          + 다양한 예제를 시도할 수 있음: 루프, 무한 루프, 프레임 수, 프레임 지연 시간, 마지막 프레임 지연 시간, 최대 크기(너비 또는 높이)
          + Igor Klimer가 열정적으로 제작한 프로젝트임
          + 소스 코드는 GitHub에서 확인 가능함

GN⁺의 정리

     * 이 프로젝트는 사용자가 브라우저에서 직접 GIF 이모지를 생성할 수 있도록 하여 편리함을 제공함
     * 별도의 소프트웨어 설치 없이 웹에서 바로 사용할 수 있어 접근성이 높음
     * 이미지 파일을 쉽게 변환할 수 있는 기능이 있어 다양한 용도로 활용 가능함
     * 비슷한 기능을 제공하는 다른 도구로는 Giphy, Imgflip 등이 있음

        Hacker News 의견

     * 인터넷의 미래에 대한 기대를 충족시키는 멋진 디자인과 강력한 백엔드 시스템을 칭찬함
          + 기업적인 느낌이나 광고가 없는 점이 마음에 듦
     * GIF의 반복을 막기 위한 우회 방법을 코드로 설명함
          + 마지막 프레임 이후 긴 지연을 추가하는 방식임
     * ""Deal with it"" 버튼 클릭 후 발생한 오류를 언급함
          + 직장에서 Okta 크롬 플러그인을 강제 사용하게 하여 발생한 문제일 수 있음
     * 공유된 GIF 링크를 좋아함
     * 구직 과정에서 실망스러운 경험을 나눔
          + 채용 과정이 완벽하지 않으며, 종종 잘못된 결정을 내린다고 언급함
     * 공유해줘서 감사하다는 의견과 함께, 회사를 떠난 것에 대한 존경을 표함
          + 이 사람에게 누군가가 직업을 제공해야 한다고 제안함
     * Slack의 ""이모지"" 대신 ""애니메이션 GIF""나 스티커를 사용한 혼란스러운 표현에 대해 언급함
     * Google 직원으로서, 데모를 보고 작성자가 Google의 정신을 가지고 있다고 느낌
     * Giphy에 통합되었던 기본 버전이 이제는 작동하지 않아 시장이 열려 있다고 언급함
     * 채용하지 않은 회사가 작성자의 도구를 사용하게 될 것이며, 그로 인해 후회할 것이라고 예상함
"
"https://news.hada.io/topic?id=17217","OpenAI Swarm - 경량 멀티에이전트 오케스트레이션 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI Swarm - 경량 멀티에이전트 오케스트레이션 프레임워크

     * 실험적인 프레임워크로 프로덕션에 사용할 용도는 아님
          + 에이전트 간에 협업하면서 실행하는 Handoff & Routine을 보여주기 위한 교육 용도
     * Agent 와 Handoff 라는 두가지 기본 Abstraction을 사용
          + 각 Agent는 Instructions와 Tools를 포함하며 언제든지 다른 에이전트에게 대화를 넘길 수 있음
     * 설계부터 경량, 확장가능, 높은 수준으로 커스터마이징한 패턴을 탐구
     * 단일 프롬프트에 인코딩하기 어려운 많은 수의 독립적인 기능과 명령을 다루는 상황에 가장 적합
     * 다중 에이전트 오케스트레이션에 대해 배우고 싶어하는 개발자들을 위한 교육 자료
     * (거의) 모든 것이 클라이언트에서 실행되며, Chat Completions API와 마찬가지로 호출 간에 상태를 저장하지 않음
"
"https://news.hada.io/topic?id=17267","앱 개발을 준비하며 직면했던  가장 큰 난관은 무엇이었나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    앱 개발을 준비하며 직면했던 가장 큰 난관은 무엇이었나요?

   소개의 이유
   저는 (아마도) 인하우스보단 외주 개발을 통해 앱 개발을 먼저 진행하게 될 것 같습니다.
   가장 중요한 요소가 저는 (현 시점에선) ‘속도’라고 생각하거든요.
   인하우스로 시작해야 할지, 외주 개발로 시작해야 할지 정답은 없지만
   앱 개발을 의뢰하는 클라이언트 입장에서 공감 갔던 글이라 간략히 정리해서 공유해 봅니다.

   Title : 앱 개발을 준비하며 직면했던 가장 큰 난관

   1. 포트폴리오보다는 앱 개발 프로세스와 협업 방식
   일반적으로 포트폴리오를 통해 외주 개발을 알아보고 진행하는 방식이 일반적이지만, 결과로서의 포트폴리오보다 더 중요한 건, 개발 업체가 어떤 프로세스로 개발을 진행하고 클라이언트와 소통하는 지가 더 중요하다는 점을 언급
     * Check Point 1. 앱 개발을 관리하는 담당 PM의 존재 여부
       — 보통 외주 앱 개발 진행 시, 클라이언트 쪽 담당자가 PM을 맡는다고는 하지만, 개발에 대한 배경지식이 없는 경우가 많고, 개발 업체 측에서 PM을 맡는 경우, (당연히) 인건비에 영향을 미치다보니 개발자가 PM 역할을 동시에 하는 경우도 많음.
       — 그럼에도 성공적인 개발을 위해서는, 역량있는 PM의 존재야말로 단순한 포트폴리오 이상의 가치를 가지기 때문에 이에 대한 확인과 충분한 대화가 수반되어야 함.
     * Check Point 2. 앱 개발 과정 속 커뮤니케이션 방식과 빈도
       — 원론적인 이야기이기도 하지만, 외주 개발의 경우 커뮤니케이션 방식과 빈도를 명확히 정의하고 프로젝트를 진행할 필요가 있음.
       — 서로 간의 명확한 정의가 없다면, 개발이 진행됨에 따라 일정이 딜레이될 수 있고 미스커뮤니케이션이 발생할 수 있는 확률이 늘어남.
     * Check Point 3. 개발 역량을 넘어 유지와 보수, 그리고 근본적인 파트너십까지
       — 어떻게 보면 가장 중요한 내용으로, 단순히 원하는 기능을 구현해줄 수 있는 외주 개발사보다는, 중장기적으로 함께 서비스의 유지와 보수를 모두 컨트롤할 수 있는 파트너십의 필요를 강조.
       — 엄밀히 말해서, 클라이언트는 기능 구현에 수반되는 전문 지식이 없을 확률이 높으므로, 이러한 공백의 부분을 사전에 고려하고 감안해서 (클라이언트 입장에서) 더 좋은 솔루션을 함께 고민해 줄 수 있어야 함.

   2. 성공적인 앱 개발과 서비스 런칭까지의 여정
   신규 서비스 개발 및 창업을 하시는 분들에게, 앱 개발을 단순히 탑다운 형식의 의뢰가 아닌, 서비스를 둘러싼 다양한 개발 요소들을 함께 조망할 수 있는 파트너십을 함께 모색하고 만들어야 한다는 결론.
"
"https://news.hada.io/topic?id=17278","미 연방거래위원회 FTC, 구독 취소를 쉽게 하는 "click-to-cancel" 최종 규칙 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         미 연방거래위원회 FTC, 구독 취소를 쉽게 하는 ""click-to-cancel"" 최종 규칙 발표

     * 소비자가 반복되는 구독과 멤버십을 더 쉽게 종료할 수 있도록 만드는 ""Click-To-Cancel""의 최종 규칙 발표

최종 규칙의 주요 내용

     * 판매자가 소비자의 가입을 취소하는 것을 가입만큼 쉽게 만들 것을 요구함
     * 거의 모든 미디어의 부정적 선택권 프로그램에 적용됨
     * 부정적 선택권 마케팅을 사용하는 동안 중요한 사실을 허위 진술하는 것을 금지함
     * 판매자가 소비자의 결제 정보를 얻고 요금을 부과하기 전에 중요한 정보를 제공하도록 요구함
     * 판매자가 요금을 부과하기 전에 소비자의 부정적 선택권에 대한 정보에 입각한 동의를 얻도록 요구함
     * 대부분의 조항은 연방관보에 게재된 후 180일 후에 발효됨

공중 의견 수렴 및 평가

     * 2023년 3월 규칙 제정 제안 공고 이후 16,000개 이상의 의견이 접수됨
          + 소비자, 연방 및 주 정부 기관, 소비자 단체, 무역 협회 등으로부터 의견 제출
     * 지난 5년간 부정적 선택권 및 반복 구독 관행에 대한 불만이 꾸준히 증가함
          + 2024년 평균 하루 70건, 2021년 하루 42건에서 증가

최종 규칙의 변경 사항

     * 판매자가 소비자에게 부정적 선택권에 대해 매년 알리는 요구사항 삭제
     * 취소를 원하는 소비자에게 계획 수정 또는 기존 계약 유지 이유를 먼저 물어보지 않고 말하는 것을 금지하는 조항 삭제

위원회 투표 결과

     * 연방관보에 최종 규칙 게재 승인 투표는 3-2로 가결
          + Melissa Holyoak 위원과 Andrew N. Ferguson 위원은 반대 투표
     * Rebecca Kelly Slaughter 위원은 별도 성명을 발표하고, Melissa Holyoak 위원은 반대 의견을 제시함

GN⁺의 의견

     * 이 규칙은 디지털 경제에서 소비자 보호를 강화하는 데 중요한 역할을 할 것으로 보임. 부정적 선택권 마케팅이 편리할 수 있지만, 소비자 불만도 꾸준히 증가하고 있어 규제가 필요해 보임.
     * 다만 판매자 입장에서는 규제 준수에 따른 비용과 부담이 있을 수 있음. 또한 매년 알림 의무 삭제 등 일부 완화된 조항도 있어, 소비자 보호 효과가 어느 정도일지 지켜봐야 할 것임.
     * 유사한 소비자 보호 정책으로는 EU의 GDPR이나 캘리포니아 CCPA 등이 있음. 이런 흐름은 앞으로도 지속될 것으로 보이며, 기업들은 소비자 신뢰 확보를 위해 적극적으로 대응할 필요가 있음.
     * 기술 발전으로 소비자와 기업 간 정보 비대칭이 심화되고 있음. 불공정 관행 근절을 위한 정부 차원의 노력과 함께, 기업들도 투명성과 소비자 선택권 보장을 위해 노력해야 할 것임. 장기적으로는 소비자와 상생하는 비즈니스 모델 구축이 지속가능한 성장의 핵심이 될 것임.

   1년 전에 디즈니, 넷플릭스 등이 FTC의 ""Click to Cancel"" 제안과 싸우고 있음 이런 글이 있었는데, 최종 규칙이 권고된거네요.

   캘리포니아, 새로운 법에 따라 원클릭 구독 취소가 의무화됨

        Hacker News 의견

     * 이메일의 ""Unsubscribe"" 링크 규제가 매우 효과적임. 규제가 잘 작동하면 새로운 규칙도 성공적일 것임.
          + 이메일에서 ""Unsubscribe"" 링크는 숨겨지지 않고 명확하게 표시됨.
          + 규정 준수 수준이 높으며, 악의적인 준수도 불가능함.
     * FTC가 Adobe와 같은 약탈적인 구독 서비스를 규제하면 좋겠음.
          + Adobe는 월간 구독처럼 보이는 연간 구독을 홍보했으며, 조기 취소 시 높은 취소 수수료를 부과함.
          + 새로운 규칙이 이러한 서비스에 어떻게 영향을 미칠지 불확실함.
          + 온라인 구독 서비스는 사용하지 않을 때 자동으로 일시 중지되어야 함.
          + Netflix와 같은 서비스는 사용하지 않으면 자동으로 구독이 일시 중지되어야 함.
          + 사용자가 원하면 일시 중지 기능을 비활성화할 수 있는 옵션을 제공해야 함.
     * Spotify의 구독 취소 과정이 매우 복잡하고 불친절했음.
          + 구독 취소를 위해 여러 페이지를 거쳐야 했음.
     * Care.com의 구독 취소가 어려움.
          + 여러 번 시도했으나 해결되지 않음.
     * 캘리포니아의 '클릭하여 취소' 구독 법안이 법으로 제정됨.
          + 관련 링크 제공됨.
     * 구독 취소를 위해 회사에 이메일을 보내는 방법을 사용함.
          + 회신이 없거나 전화로 취소하라는 답변을 받으면 American Express에 다음 청구를 이의 제기함.
     * FTC가 이러한 규칙을 효과적으로 설정할 수 있는지 의문임.
          + Chevron deference가 더 이상 적용되지 않음.
          + New York Times와 같은 회사들이 이 규칙을 중단시키기 위해 소송을 제기할 가능성이 있음.
     * New York Times의 구독 취소가 매우 번거로웠음.
          + 40분 동안 여러 번의 전화와 전환이 필요했음.
     * 판매자가 소비자가 가입할 때만큼 쉽게 구독을 취소할 수 있도록 요구하는 규칙에 대한 궁금증이 있음.
          + 가입 및 취소 과정이 쉽게 조작될 수 있음.
          + Apple의 App Store처럼 간단한 취소 과정을 요구해야 함.
     * 체육관의 구독 취소 과정이 개선되어야 함.
          + 광고된 가격보다 두 배 비싼 가격과 이상한 수수료로 인해 가입을 망설임.
"
"https://news.hada.io/topic?id=17309","리스프를 활용한 게임 개발, 2부: 던전과 인터페이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     리스프를 활용한 게임 개발, 2부: 던전과 인터페이스

던전과 인터페이스

  개요

     * 이전 파트에서는 게임 개발에서 흔히 사용되는 엔티티-컴포넌트-시스템(ECS) 아키텍처 패턴과 메타언어 프로그래밍 패러다임을 탐구했음.
     * 이번에는 이러한 기술을 사용하여 던전 크롤러 장르의 작은 게임을 만들고, 이를 통해 실제 게임 애플리케이션의 시스템 설계를 살펴볼 것임.

  준비 작업

     * Common Lisp 환경을 설정하고, 필요한 패키지를 업데이트함.
     * cookiecutter 템플릿을 사용하여 프로젝트를 시작하고, 게임 창 크기를 1280x800으로 설정함.

  던전

     * 플레이어가 던전을 탐험할 수 있도록 던전 맵이 필요함.
     * 오픈 소스 맵 에디터인 Tiled를 사용하여 던전 맵을 생성하고, 이를 Lisp 객체로 로드하기 위해 cl-tiled 라이브러리를 사용함.
     * 맵 파일을 준비한 후, 게임에 로드하여 사용할 수 있도록 몇 가지 준비 작업을 수행함.

  ECS 패턴 적용

     * 맵 타일 데이터를 ECS 저장소로 이동하여 성능을 향상시킴.
     * cl-fast-ecs 프레임워크를 프로젝트에 추가하고, ECS 시스템을 초기화함.
     * 맵 타일을 개별 엔티티로 저장하고, 이를 처리하는 시스템을 정의함.

  애니메이션

     * Tiled는 애니메이션 타일을 지원하며, 이를 통해 게임에 생동감을 더할 수 있음.
     * 애니메이션을 구현하기 위해 코드 구조를 확장하고 리팩토링함.
     * animation-frame과 animation-state 컴포넌트를 정의하여 애니메이션 상태를 관리함.
     * update-animations 시스템을 정의하여 적절한 시점에 애니메이션 프레임을 전환함.

GN⁺의 정리

     * 이 글은 ECS 패턴을 사용하여 게임 개발을 어떻게 효율적으로 할 수 있는지를 설명함.
     * Tiled와 같은 도구를 활용하여 맵을 쉽게 생성하고 관리할 수 있는 방법을 제시함.
     * 애니메이션을 통해 게임에 생동감을 더하는 방법을 설명함.
     * ECS 패턴을 사용하면 성능을 최적화하고 코드 구조를 간결하게 유지할 수 있음.
     * 유사한 기능을 가진 다른 프로젝트로는 Unity의 ECS 시스템이나 Unreal Engine의 블루프린트 시스템이 있음.
"
"https://news.hada.io/topic?id=17259","Modern C C23 에디션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Modern C C23 에디션

     * Modern C의 C23 에디션이 무료로 다운로드 가능함. 새로운 C 표준인 C23에 맞춰 업데이트된 것이 주요 목적임.
     * 새로운 표준의 내용은 공개 문서에서 가장 가까운 형태로 제공됨. 주요 컴파일러의 새로운 기능 대부분이 이미 구현됨.

  C23의 주요 변경 사항 및 추가 사항

     * 정수 관련 변경 사항: _BitInt(N)이라는 새로운 비트 정밀 타입 도입, 오버플로우 체크를 위한 새로운 C 라이브러리 헤더, 비트 조작을 위한 헤더 추가, 현대 아키텍처에서 128비트 타입 가능성, 열거형 타입의 상당한 개선.
     * 새로운 개념: nullptr 상수와 그 기본 타입, 속성으로 구문 주석, 타입 제네릭 프로그래밍을 위한 더 많은 도구(예: auto와 typeof를 통한 타입 추론), {}를 사용한 기본 초기화(가변 길이 배열 포함), 모든 타입의 명명된 상수를 위한 constexpr.
     * 추가 자료: 복합 표현식과 람다, ""국제화""라 불리는 포괄적인 프로그램 실패 접근법에 대한 논의 추가. 기존 플랫폼에서 C23으로 쉽게 전환할 수 있는 임시 포함 헤더와 부록 추가.

  GN⁺의 정리

     * Modern C의 C23 에디션은 새로운 C 표준을 반영하여 업데이트되었으며, 주요 컴파일러에서 이미 많은 기능이 구현됨.
     * C23은 정수 타입, 타입 제네릭 프로그래밍, 기본 초기화 등에서 중요한 개선을 제공함.
     * 이 에디션은 C 프로그래밍 언어의 최신 표준을 이해하고 활용하는 데 유용하며, 특히 새로운 기능을 빠르게 습득하고자 하는 개발자에게 도움이 될 수 있음.
     * C23과 유사한 기능을 제공하는 다른 언어로는 C++의 최신 표준이 있음.

        Hacker News 의견

     * GCC 11부터 지원이 시작되었으며, 이는 Ubuntu 22.04에서 사용 가능함. C26 지원도 확인 가능함
     * C와 C++는 다르며, 혼합하지 말라는 중요한 조언이 있음
     * C 책 목록을 찾고 있었는데, 스스로 답을 찾음. _Modern C_는 중급 수준으로 분류됨
     * macOS Preview에서 사이드바의 목차가 제대로 작동하지 않음
     * C가 실질적으로 C99에 멈춰 있는 이유를 설명하는 기사를 찾고 있음. C11 이상의 기능을 활용하는 프로젝트는 거의 없다고 함
     * 공룡 마스코트가 여전히 있어서 기쁨. 좋은 책이라고 생각함
     * 컴파일러가 따라잡으면 #embed를 기대하고 있음. 그때까지는 Golang을 사용함
     * [[unsequenced]], [[maybe_unused]], [[noreturn]] 같은 속성 사용이 책 전반에 걸쳐 너무 많다고 생각함. 저자가 선택적으로 사용 가능한 것을 모든 코드 예제에 넣은 것이 지나치다고 느낌
     * 완전히 명시되고 잘 정의된 이식 가능한 비트 필드를 원함
     * 가장 좋아하는 책 중 하나임
"
