"https://news.hada.io/topic?id=16756","OpenAI의 o1, chain-of-thought 모델에 대한 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI의 o1, chain-of-thought 모델에 대한 노트

     * OpenAI는 새 프리뷰 모델인 o1-preview 와 o1-mini(미니는 프리뷰가 아님)를 출시, 이전 코드명 'strawberry'

Chain-of-Thought 방식으로 학습됨

     * OpenAI는 이 모델들이 응답하기 전에 더 많은 시간을 ""생각""하도록 설계되었다고 설명함
     * 이 새로운 모델들은 ""단계별로 생각하기"" 프롬프팅 패턴의 전문화된 확장으로 볼 수 있음
     * OpenAI의 ""Learning to Reason with LLMs"" 글에서는 새 모델들이 강화 학습을 통해 생각의 연쇄를 개선하고 전략을 세련되게 다듬는 법을 배운다고 설명함
     * 이는 모델이 백트래킹과 다음 토큰 예측 이상의 ""사고""를 필요로 하는 복잡한 프롬프트를 더 잘 처리할 수 있음을 의미함

API 문서의 저수준 세부 정보

     * 이미지 입력, 함수 호출, 일관되게 빠른 응답 시간이 필요한 애플리케이션의 경우 GPT-4o 및 GPT-4o 미니 모델이 계속 적합한 선택이 될 것임
     * 깊은 추론을 요구하고 더 긴 응답 시간을 수용할 수 있는 애플리케이션을 개발하는 경우 o1 모델이 훌륭한 선택이 될 수 있음
     * 새로운 o1-preview와 o1-mini 모델에 대한 API 액세스는 현재 5단계 계정으로 제한됨
     * 시스템 프롬프트 지원 없음 - 모델은 기존 챗 완성 API를 사용하지만 user와 assistant 메시지만 보낼 수 있음
     * 스트리밍 지원, 툴 사용, 일괄 호출, 이미지 입력도 없음
     * 문제 해결에 필요한 추론량에 따라 요청 처리에 몇 초에서 몇 분까지 걸릴 수 있음

숨겨진 추론 토큰

     * API 응답에서는 보이지 않지만 여전히 청구되고 출력 토큰으로 계산되는 ""추론 토큰""이 도입됨
     * 새로운 모델에 유용한 프롬프트의 경우 OpenAI는 이러한 토큰에 약 25,000개의 예산을 할당할 것을 제안함
     * 출력 토큰 허용량이 o1-preview의 경우 32,768개, o1-mini의 경우 65,536개로 크게 증가함
     * API 문서의 마지막 팁: 검색 보강 생성(RAG)에서 추가 컨텍스트 제공 시 가장 관련성 높은 정보만 포함하여 모델이 응답을 과도하게 복잡하게 만드는 것을 방지할 것

숨겨진 추론 토큰

     * 추론 토큰은 API에서 보이지 않음 - 청구는 되지만 실제로 무엇인지는 볼 수 없음
     * OpenAI는 이에 대해 두 가지 주요 이유를 설명함:
         1. 안전 및 정책 준수 - 중간 단계에 정책을 위반하는 정보가 포함될 수 있는 경우를 피하기 위함
         2. 경쟁 우위 - 다른 모델이 OpenAI가 투자한 추론 작업에 대해 학습하는 것을 방지하기 위함
     * 이 정책 결정에 대해 불만이 있음 - 해석 가능성과 투명성이 중요한데 프롬프트 평가의 주요 세부 사항이 숨겨지는 것은 후퇴로 느껴짐

예제

     * OpenAI는 초기 예제로 Bash 스크립트 생성, 크로스워드 퍼즐 해결, 화학 물질 용액의 pH 계산 등을 제공함
     * 이 예제들은 ChatGPT UI 버전의 모델이 생각의 연쇄에 대한 세부 정보를 노출한다는 것을 보여주지만, 원시 추론 토큰을 보여주지는 않음
     * OpenAI에는 데이터 검증 및 루틴 생성에 추론을 사용하는 방법을 보여주는 두 개의 새로운 cookbook이 있음
     * 트위터에서 GPT-4o에서는 실패했지만 o1-preview에서는 작동하는 프롬프트 예제가 있는지 물어봄
          +

     ""How many words are in your response to this prompt?"" ""There are seven words in this sentence.""
          +

     Explain this joke: “Two cows are standing in a field, one cow asks the other: “what do you think about the mad cow disease that’s going around?”. The other one says: “who cares, I’m a helicopter!”
     * OpenAI 연구원 Jason Wei는 AIME와 GPQA에서의 결과는 매우 우수하지만 사용자가 느낄 수 있는 것으로 반드시 번역되는 것은 아니라고 언급함

이 모든 것의 새로운 점

     * 커뮤니티가 이 모델들을 언제 어디에 적용해야 하는지에 대한 모범 사례를 정리하는 데는 시간이 걸릴 것임
     * 나는 앞으로도 주로 GPT-4o(및 Claude 3.5 Sonnet)를 사용할 것으로 예상하지만, 이 새로운 종류의 모델을 통해 LLM을 사용하여 어떤 종류의 작업을 해결할 수 있는지에 대한 우리의 사고 모델을 집단적으로 확장하는 것을 보는 것은 정말 흥미로운 일이 될 것
     * 다른 AI 연구소에서도 이 스타일의 Chain-of-Thought 추론을 적용하도록 특별히 훈련된 모델의 자체 버전으로 이러한 결과 중 일부를 복제하기 시작할 것으로 예상됨

GN⁺의 의견

     * 체인 오브 소트 방식으로 학습된 모델은 복잡한 문제 해결 시 기존 모델들의 한계를 극복하는 데 도움이 될 수 있음. 특히 단계별 추론과 백트래킹이 필요한 작업에서 성능 향상이 기대됨
     * 그러나 추론 토큰을 API에서 숨기는 것은 모델의 해석 가능성과 투명성 측면에서 우려되는 부분임. 사용자 입장에서는 모델의 추론 과정을 이해하고 검증하기 어려워질 수 있음
     * 현재로서는 이 모델들이 어떤 작업에 가장 적합한지, 기존 모델 대비 어떤 장단점이 있는지 명확하지 않음. 커뮤니티에서 다양한 활용 사례와 모범 사례를 발굴해 나가는 과정이 필요해 보임
     * Anthropic의 Claude나 Cohere의 모델 등 다른 AI 기업들도 유사한 체인 오브 소트 학습 방식을 도입할 가능성이 있음. 추론 모델 시장에서의 경쟁이 더욱 치열해질 것으로 예상됨
     * 전반적으로 이번 OpenAI의 발표는 LLM의 추론 능력 향상을 위한 새로운 접근법을 제시했다는 점에서 의미가 있음. 다만 숨겨진 추론 토큰 등 몇 가지 우려되는 부분도 있어, 향후 개선 및 보완이 필요해 보임

   오타가 있네요 :)

   ""Chai-of-Thought 방식으로 학습됨"" → ""Chain-of-Thought 방식으로 학습됨""

        Hacker News 의견

     * o1-preview 모델의 문제점
          + 존재하지 않는 라이브러리와 함수를 환각함
          + 웹에 잘 나타나지 않는 사실에 대해 잘못된 정보를 제공함
          + 모델이 생성한 정보의 사실 여부를 평가할 방법이 없음
     * OpenAI 연구원 Jason Wei의 인용
          + AIME와 GPQA에서 강력한 성과를 보였으나 사용자에게는 체감되지 않음
          + 더 어려운 프롬프트를 찾아야 한다는 의견에 대해 의문을 제기함
     * Rust 코드 리팩토링 시도
          + o1-mini는 오류 없는 코드를 제공하지 못함
          + o1-preview는 컴파일되고 대부분의 테스트를 통과하는 코드를 제공함
          + Rust 라이브러리에서 enum을 제거하고 U8 데이터 타입만 사용하도록 변경 시도
     * 두 가지 주요 요소
          + 좋은 chain-of-thought 프롬프트를 읽고 생성하도록 훈련된 LLM
          + 모델을 반복적으로 재프롬프트하는 런타임 코드
          + OpenAI가 이 차이를 명확히 설명하지 않음
     * 복잡한 프롬프트 평가의 어려움
          + 프롬프트 평가 과정이 숨겨져 있어 디버깅이 어려움
          + 사용자로서는 결과만 중요하고 과정은 중요하지 않음
     * o1의 품질과 비용 문제
          + 품질의 큰 향상은 없으나 비용과 지연 시간에 큰 부정적 영향이 있음
     * GPT-4o와 o1-preview의 비교
          + GPT-4o는 최적의 틱택토 전략을 제공하지 못함
          + o1-preview는 최적의 전략을 제공하나 비표준 그리드에서는 실패함
     * 기본적인 수학 문제 해결의 어려움
          + 세 숫자를 더하고 나누어 같은 결과를 얻는 문제 해결 시도
          + 현재 모델이 기본적인 학교 문제도 해결하기 어려움
     * 법률 질문 테스트
          + GPT-4o는 즉시 올바른 답변을 제공함
          + o1-preview는 잘못된 답변을 제공하고 여러 번의 후속 질문이 필요함
     * Markdown 콘텐츠 처리 문제
          + Markdown 콘텐츠에 기호 논리 표현과 증명 예제를 포함했을 때 서비스 약관 위반으로 간주됨
"
"https://news.hada.io/topic?id=16788","라자루스 그룹, 25건의 암호화폐 해킹으로 2억 달러를 법정화폐로 세탁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                라자루스 그룹, 25건의 암호화폐 해킹으로 2억 달러를 법정화폐로 세탁

     * 북한 정부와 연계된 해킹 그룹 Lazarus Group 이 2020년 8월부터 2023년 10월까지 가상자산 관련 회사 및 개인 25곳을 해킹해 총 2억 달러를 탈취함
     * 이들은 각 목표에 맞춤화된 악성코드로 유명한 해킹 그룹임
     * 2017년부터 현재까지 가상자산 해킹을 통해 총 30-41억 달러를 탈취한 것으로 추정됨
     * 본 기사에서는 이들의 자금 세탁 경로를 추적하고, 탈취 자금이 P2P 거래소인 Paxful과 Noones를 통해 현금화되는 과정을 분석함

2020년 주요 사건

  CoinBerry 해킹 (8월)

     * 캐나다 거래소인 CoinBerry가 소프트웨어 버그로 인해 120 BTC 탈취당함 (당시 가치 $370만).

  Unibright 해킹 (9월)

     * 프라이빗 키 유출로 Unibright 팀 지갑에서 약 $40만 상당의 자산이 무단 이체됨.

  CoinMetro 해킹 (10월)

     * 보안 침해로 CoinMetro 핫월렛에서 암호자산 $75만 상당이 탈취됨.
     * Parsiq 팀은 PRQ 토큰을 하드포크하여 추가 피해 방지.

2020년 Nexus Mutual 창업자 Hugh Karp 해킹 (12월)

     * 악성 거래를 승인하도록 속아 370,000 NXM ($830만) 이 탈취됨.
     * 비트코인 믹서인 ChipMixer에 137.1 BTC를 예치한 뒤, 이더리움으로 재유입.
     * 또한 이더리움에서 2,571 ETH를 Tornado Cash에 예치한 후 바로 인출.

2021년 EasyFi 창업자 Ankitt Gaur 해킹 (4월)

     * 피싱 메일로 Ankitt이 악성 Metamask 확장 프로그램을 설치하면서 프라이빗 키가 유출되어 $8,100만 탈취당함.
     * 209.64 BTC를 ChipMixer에 예치 후 인출하여 렌 프로토콜로 이더리움에 재유입시킴.
     * 자금은 2022년 6월 Binance로 입금됨.

2021년 Bondly Finance 해킹 (7월)

     * CEO Brandon Smith의 하드웨어 월렛 복구 문구가 유출되면서 팀 자산 $850만 탈취당함.
     * 이더리움, BSC, 폴리곤에서 Tornado Cash를 이용해 5,200만 DAI, 500 ETH, 4,800 BNB를 세탁함.

2021년 8-9월 미보고된 개인 해킹

     * 8-9월 사이 다수의 개인이 프라이빗 키 유출로 총 $200만 상당을 탈취당함.
     * 581 ETH가 Tornado Cash에 예치되었다가 며칠 뒤 인출됨.

2021년 MGNR & PolyPlay 해킹 (10월)

  MGNR 해킹

     * 팀원들이 잠시 개인 PC에 핫월렛 키를 공유하는 사이 $2,400만 상당이 탈취됨.
     * 5,100 ETH가 Tornado Cash에 예치된 후 단계적으로 인출되어 다른 해킹 자금들과 합쳐짐.
     * Paxful과 Noones를 통해 현금화됨.

  PolyPlay 해킹

     * 팀 지갑에서 $160만 상당이 무단 이체됨.
     * 350 ETH가 Tornado Cash에 예치되었다가 인출되어 Paxful과 Noones로 입금됨.

2021년 11월 bZx 해킹

     * 개발자가 악성 스크립트가 포함된 이메일 첨부파일을 실행하면서 프라이빗 키가 유출되어 BSC와 폴리곤에 배포된 프로토콜에서 $5,500만 탈취당함.
     * 10,960 ETH가 Tornado Cash에 예치되었다가 인출되어 과거 해킹 자금들과 합쳐짐.

2023년 8월 Steadefi & Coinshift 해킹

  Steadefi 해킹

     * 개발자가 가짜 투자사를 사칭한 텔레그램 계정으로부터 받은 악성 프레젠테이션 파일을 열면서 배포자 지갑이 탈취되어 대출 및 전략 볼트 소유권이 해커에게 넘어감. $120만 상당 탈취당함.
     * 624.3 ETH가 Tornado Cash에 예치됨.

  Coinshift 해킹

     * 창업자 연계 멀티시그 지갑에서 갑작스런 자금 이체가 관찰되어 프라이빗 키 유출로 추정됨.
     * 900 ETH가 Tornado Cash에 예치됨.

P2P 거래소 Paxful과 Noones를 통한 탈취 자금 현금화

     * 2022년 7월부터 2023년 11월까지 총 $4,400만 상당의 USDT가 Paxful과 Noones 입금 주소로 유입됨.
     * Paxful과 Noones의 두 계정이 탈취 금액 규모와 일치하는 거래량을 보임.
     * 해당 거래소들로부터 이에 상응하는 암호화폐 출금이 관찰되지 않아, USDT가 은행 송금이나 현금으로 교환된 것으로 추정됨.

조사 결과

     * 2023년 11월 기준 Tether에 의해 374,000 USDT가 블랙리스트에 올랐고, 2023년 4분기에 미공개 금액이 거래소에서 동결됨.
     * 스테이블 코인 발행사 4곳 중 3곳이 $340만 상당의 자금을 블랙리스트에 올렸음.

기타 연관된 사건

     * 2021년 1월 거래소 사용자 해킹
     * 2022년 3월 Arthur0x 해킹
     * 2022년 9-10월 Geracoin & Darshan 해킹
     * 2023년 10월 Maverick 창업자 해킹

GN⁺의 의견

     * 다양한 프로토콜과 개인을 대상으로 선별적 공격을 수행한 후 정교한 자금 세탁 과정을 거치는 것으로 보아 상당한 조직력과 기술력을 갖춘 해킹 그룹으로 추정됨.
     * 가상자산 생태계에 악용 사례가 늘어나면서 프라이빗 키 관리와 피싱 공격에 대한 경계심이 요구됨.
     * 이번 사건은 탈중앙화 금융과 암호화폐 믹서가 자금 세탁에 악용될 수 있다는 점을 보여줌. 이에 대한 규제와 대책 마련이 시급해 보임.
     * 북한 정부가 자금 확보 수단으로 가상자산 해킹을 지속할 가능성이 있어 업계와 당국의 공조가 필요함.
     * 암호화폐 프로젝트와 개인은 다중 서명, 콜드 월렛 사용 등 지갑 관리를 강화하고 의심스러운 이메일과 첨부 파일을 주의해야 함.
"
"https://news.hada.io/topic?id=16746","Unity, 런타임 요금제 도입 취소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Unity, 런타임 요금제 도입 취소

     * 게임 고객에 대한 런타임 요금제(Runtime Fee) 도입을 취소하기로 결정
     * 모든 게임 고객에게 기존의 시트 기반 구독 모델이 적용될 것
          + Unity Personal : 계속 무료. 매출 및 자금 상한이 현 10만 달러에서 20만 달러로 두 배 상향
          + Unity Pro : 구독료가 8% 인상되어 시트당 매년 2,200달러. 총 연 매출 및 자금이 20만 달러를 초과하는 고객
          + Unity Enterprise: 구독료 25% 인상. 총 연 매출 및 자금이 2,500만 달러를 초과하는 고객
     * 잠재적인 가격 인상을 연 단위로만 고려하는 기존 주기로 되돌릴 것

   유니티가 이런 결정을 할 정도라니... 주변을 봐도 고도 엔진으로 너무 많이 넘어간 게 체감이 됩니다.

   1년전 기준 Godot 프로젝트가 Unity 의 10분의 1 이었는데, 현재는 3분의 1까지 올라왔다네요
   https://x.com/reduzio/status/1830184668588568701

   신규 프로젝트 기준으로는 이번주에 Godot 프로젝트는 230개, Unity는 147개.

   1년전에 사고친게 이제서야 마무리 되는건데.. 이미 배는 떠나간거 아닌가 싶네요
     * Unity 플랜 가격 및 패키지 업데이트
     * Unity, 커뮤니티에 보내는 공개서한을 통해 라이센스 수정 철회
     * Unity는 죽었다
     * Unity 이후의 게임 개발
     * Unity에서 Unreal 엔진으로 전환하기로 결정하셨나요?
"
"https://news.hada.io/topic?id=16690","고전류로 충전하는 리튬이온 배터리 수명 50% 증가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      고전류로 충전하는 리튬이온 배터리 수명 50% 증가

    연구자들이 배터리 성능을 향상시키는 놀라운 방법을 발견함

     * 리튬 이온 배터리의 첫 충전이 중요한 이유
          + 배터리의 첫 충전은 배터리의 성능과 수명을 결정하는 중요한 과정임
          + SLAC-Stanford Battery Center 연구에 따르면, 첫 충전을 높은 전류로 하면 배터리 수명이 50% 증가하고 초기 충전 시간이 10시간에서 20분으로 단축됨
     * 과학적 머신러닝을 통한 배터리 성능 향상
          + 연구팀은 과학적 머신러닝을 사용하여 배터리 전극의 특정 변화를 찾아냄
          + 이러한 변화는 배터리 제조업체가 공정을 최적화하고 제품을 개선하는 데 중요한 통찰력을 제공함
     * 연구의 배경과 협력
          + 연구는 SLAC/Stanford 팀과 Toyota Research Institute (TRI), MIT, University of Washington의 협력으로 진행됨
          + SLAC의 지속 가능성 연구의 일환으로, 에너지 전환을 위한 중요한 기술을 더 저렴하게 만드는 데 기여함
     * 배터리 제조에 미치는 실질적인 영향
          + 연구 결과는 전기차와 전력망뿐만 아니라 다른 기술에도 실질적인 영향을 미침
          + 배터리 제조는 자본, 에너지, 시간 소모가 큰 과정이며, 최적화가 어려움
          + 연구 결과는 배터리 제조의 중요한 단계를 이해하고 최적화하는 일반적인 접근 방식을 제시함

    배터리 성능의 핵심인 ""스퀴시 층""

     * 배터리 초기 사이클링의 이해
          + 연구팀은 양극과 음극이 전해질 용액으로 둘러싸인 파우치 셀을 제작함
          + 배터리가 충전될 때 리튬 이온이 음극으로 이동하여 저장됨
          + 배터리가 방전될 때 리튬 이온이 양극으로 이동하여 전자를 흐르게 함
     * SEI 층의 중요성
          + 첫 충전 중 일부 리튬이 비활성화되어 SEI(고체 전해질 계면) 층을 형성함
          + SEI 층은 음극을 보호하여 배터리 수명을 연장함

    높은 충전 전류가 배터리 성능을 향상시킴

     * 기존의 저전류 충전 방식의 문제점
          + 제조업체는 일반적으로 저전류로 첫 충전을 하여 SEI 층을 형성함
          + 그러나 저전류 충전은 시간이 많이 걸리고 비용이 많이 듦
     * 고전류 충전의 장점
          + 연구팀은 고전류 충전이 배터리 성능을 저하시키지 않는다는 최근 연구 결과를 확인함
          + 고전류 충전은 배터리 수명을 50% 증가시키고 초기 리튬 비활성화 비율을 높임
     * 과학적 머신러닝을 통한 최적화
          + 연구팀은 과학적 머신러닝을 사용하여 중요한 요소를 식별함
          + 온도와 충전 전류가 가장 중요한 요소로 나타남

    SLAC 소개

     * SLAC National Accelerator Laboratory
          + SLAC는 우주와 물질의 기본 원리를 탐구하고 강력한 도구를 개발하는 연구소임
          + 60년 이상의 연구를 바탕으로 양자 기술, 과학적 컴퓨팅, 차세대 가속기 개발 등 다양한 분야에서 미래를 개척함

    GN⁺의 정리

     * 이 연구는 리튬 이온 배터리의 첫 충전 과정을 최적화하여 배터리 수명을 50% 증가시키는 방법을 제시함
     * 과학적 머신러닝을 활용하여 중요한 요소를 식별하고 최적의 충전 조건을 찾아냄
     * 배터리 제조업체가 공정을 개선하고 비용을 절감하는 데 중요한 통찰력을 제공함
     * 이 연구는 전기차와 전력망뿐만 아니라 다른 기술에도 실질적인 영향을 미칠 수 있음
     * 유사한 기능을 가진 제품으로는 Tesla의 배터리 기술과 Panasonic의 배터리 솔루션이 있음

        Hacker News 의견

     * 산업에서 일한 경험으로 이 연구에 대해 약간 회의적임. 초기 충전 조건이 다르면 더 나은 성능을 보일 수 있었을 것임
          + SEI 증가가 셀의 임피던스를 얼마나 변화시키는지, 그리고 용량에 어떤 영향을 미치는지 의문임
     * 생산에서 이 결과가 입증된다면 매우 흥미로운 발견임. 숨겨진 프로세스 변수가 명백히 드러남
     * 완전히 방전된 리튬 배터리를 완전히 충전된 배터리에 몇 초 동안 연결하여 되살릴 수 있었음
     * TLDR: 배터리의 초기 ""형성"" 충전 동안 일부 리튬이 비활성화되어 음극 주위에 보호층(SEI)을 형성함. 연구에서는 더 높은 초기 충전 전류를 사용하여 30%가 SEI가 됨을 발견함. 이는 배터리 용량을 줄이지만 전극의 보호층을 강화하고 충전 주기 동안 더 나은 수명을 제공함
     * 좋은 SEI 층이 중요하다면 배터리를 조립하기 전에 전극에 층을 미리 형성할 수 있지 않을까 생각함. 그러면 층의 모양을 더 균일하게 만들 수 있을 것임
     * 혼란스러움... 이것이 예측인지 실험적으로 검증된 것인지 궁금함
     * 최근 논문에서 2khz 주파수의 사각파로 두 배의 전류로 충전하면 배터리 열화가 거의 없어진다는 것을 발견함
     * 배터리 수명은 무엇인가? 용량 열화인가 아니면 랜덤한 고장인가?
          + 발견이 용량 열화를 늦추지만 EV 배터리가 100배 더 자발적으로 고장 날 가능성이 높아진다면($$$) 이는 진정한 개선이 아님. 소비자 장치에는 괜찮을 수 있음
     * 아마도 미세구조를 태워 필라멘트 형성을 더 안정적으로 만드는 것임, 고전압 전기가 나무를 새기는 방식처럼
     * TL;DR 높은 전류가 음극에 층을 다르게 형성하게 함(그리고 당연히 더 빠르게). 이전에는 느린 초기 충전이 더 나은 형성을 이끈다고 생각했음. 이는 프로세스 조정의 점진적 개선이지 근본적인 변화는 아님
"
"https://news.hada.io/topic?id=16701","카펜토포드: 걷는 테이블 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           카펜토포드: 걷는 테이블 프로젝트

새로운 링크 설계

     * Carpentopod 다리 연결 장치는 다양한 다리 변형을 생성하는 소프트웨어를 통해 개발됨
     * 각 변형은 걷는 속도, 간격, 재료 사용량을 기준으로 '적합도' 점수를 부여받음
     * 다리 끝이 주기 동안 더 수평적이고 부드럽게 움직이는 변형에 추가 점수를 부여함
     * 적합도 점수가 높은 변형만 다음 세대에 유전자를 혼합하여 더 나은 솔루션을 찾음
     * 유전적 돌연변이를 도입하여 새로운 솔루션을 발견하고 변형을 유지함
     * C++로 작성된 시뮬레이션은 수 초 내에 수십 세대를 진화시킴
     * 최종적으로 선택된 다리 연결 장치는 더 큰 시뮬레이션을 통해 선택됨

걷는 테이블 설계

     * 초기에는 취미 프로젝트로 시작되었으나, 물리적인 제작 기술을 습득하면서 실제 테이블로 발전함
     * Carpentopod 테이블은 안정성을 위해 12개의 다리가 필요함
     * 다리 구성 요소는 밀리미터 이하의 정밀도로 제작되어야 함
     * 대나무 합판을 사용하여 CNC로 제작함
     * Autodesk Fusion 360을 사용하여 모든 구성 요소를 설계하고 테스트함
     * 전자 장치, 모터, 배터리를 수용할 수 있는 중앙 '배'를 설계함
     * 두 개의 모터로 테이블을 조종할 수 있도록 설계됨

제작 과정

     * 3축 CNC 라우터를 사용하여 대부분의 부품을 제작함
     * 대나무 합판을 여러 시트로 나누어 CNC로 가공하고 접착함
     * 알루미늄 막대를 사용하여 크랭크축을 제작함
     * 곡선형 배 '문'을 대나무로 제작하고 자석을 사용하여 쉽게 열고 닫을 수 있게 함
     * TV 가구와 같은 높이로 제작하여 세트로 만듦

움직이게 만들기

     * 두 개의 24V 브러시리스 모터를 사용하여 각 6다리 섹션을 구동함
     * Arduino Nano를 사용하여 모터 전압을 제어함
     * 블루투스 모듈을 연결하여 무선 조이스틱으로 제어 가능함
     * 14.8V LiPo 배터리를 사용하여 무선으로 이동 가능함

링크 공개

     * Carpentopod 링크를 공개 도메인으로 제공함
     * 기술이 있는 사람은 직접 제작 가능함

GN⁺의 정리

     * Carpentopod 프로젝트는 소프트웨어와 물리적 제작 기술을 결합하여 독특한 걷는 테이블을 만든 사례임
     * 진화 알고리듬을 사용하여 최적화된 다리 연결 장치를 개발함
     * CNC와 대나무를 사용하여 정밀하고 내구성 있는 부품을 제작함
     * Arduino와 블루투스를 사용하여 무선 제어 기능을 구현함
     * 이 프로젝트는 메이커 커뮤니티에 영감을 줄 수 있으며, 비슷한 기능을 가진 다른 프로젝트로는 Theo Jansen의 Strandbeest가 있음

        Hacker News 의견

     * 원격 조종 Strandbeest가 멋있음
          + 기사 전체를 읽지 않더라도 마지막에 있는 최종 제품 비디오를 꼭 보길 권장함
          + 현대 기술이 나무 구조 안에 숨겨져 있어 마치 해리 포터의 마법처럼 보임
     * Terry Pratchett의 Discworld 시리즈에 나오는 ""The Luggage""를 떠올리게 함
          + 현실 세계에서 이런 것을 보게 될 줄은 몰랐음
          + 매우 멋있음
     * ""왜?""라는 질문이 필요 없음을 강조함
          + 테이블이 주인에게 맥주와 간식을 가져다주는 비디오가 모든 것을 설명함
     * 창의적인 사람들에 감탄함
          + Carpentopod가 맥주와 칩을 주인에게 가져다주는 모습이 웃음을 자아냄
          + 더 많은 이런 환상적인 창작물을 보고 싶음
     * de Carpentier라는 사람이 목공 프로젝트를 하는 것이 적절하다고 느낌
     * 이 프로젝트를 상자로 만들어 작은 가짜 발을 다리에 붙이고 싶음
     * 미리 조립된 다리 부품을 구매할 수 있는 곳이 있는지 궁금해함
          + 다리 부품을 만드는 것이 가장 어려운 부분이라고 생각함
          + 부품을 붙이는 것은 자신도 할 수 있을 것 같음
     * 움직이는 모습을 보는 것이 매우 훌륭함
          + 이런 것들이 AI의 가장 흥미로운 사용 사례 중 하나라고 생각함
     * 처음에는 다른 프로젝트의 모방이라고 생각했음
          + 기사를 다 읽고 나서는 감명받음
"
"https://news.hada.io/topic?id=16777","HN 공개: FlowTracker – Java 프로그램에서 데이터 흐름 추적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: FlowTracker – Java 프로그램에서 데이터 흐름 추적

FlowTracker: Java 프로그램의 데이터 흐름 추적

   FlowTracker는 Java 에이전트로, 프로그램이 데이터를 읽고, 조작하고, 쓰는 방식을 추적함. 이를 통해 파일 및 네트워크 I/O를 확인하고, 입력과 출력을 연결하여 출력이 어디에서 왔는지 보여줌. 이를 통해 Java 프로그램의 출력이 무엇을 의미하는지 이해할 수 있음.

  데모

   Spring PetClinic은 Spring 프레임워크의 데모 애플리케이션임. FlowTracker의 기능을 보여주기 위해 PetClinic이 HTTP 요청을 처리하고 템플릿과 데이터베이스에서 HTML 페이지를 생성하는 과정을 관찰함. 브라우저에서 데모를 실행하거나 비디오를 시청할 수 있음.
     * HTTP 처리: FlowTracker는 어떤 코드가 어떤 출력을 생성했는지 보여줌. 예를 들어, ""HTTP/1.1"" 또는 HTTP 헤더를 클릭하면, 이 부분이 org.apache.coyote 패키지의 클래스에 의해 생성되었음을 알 수 있음.
     * Thymeleaf 템플릿: 프로그램이 읽은 입력(HTML 템플릿)이 출력과 어떻게 연결되는지 보여줌. HTML 태그 이름을 클릭하면 해당 부분이 layout.html 파일에서 왔음을 알 수 있음.
     * 데이터베이스: HTML 페이지의 테이블에 있는 정보가 데이터베이스에서 왔음을 보여줌. 예를 들어, 테이블의 George를 클릭하면 해당 값이 데이터베이스에서 왔음을 알 수 있음.

   이 데모는 인메모리 데이터베이스를 사용하여 SQL 스크립트까지 추적할 수 있음. MySQL 데이터베이스를 사용할 경우, 데이터베이스 연결까지 추적할 수 있음.

  사용법

   FlowTracker는 현재 개념 증명 단계에 있으며, 모든 프로그램에서 잘 작동하지 않을 수 있음. 또한 많은 오버헤드를 추가하여 프로그램 실행 속도를 느리게 만듦. FlowTracker 에이전트 jar 파일을 다운로드하고 Java 명령줄에 추가하여 사용함.

  내부 작동 방식

    간단한 설명

   FlowTracker는 클래스 파일(bytecode)에 코드를 주입하여 메모리 내 데이터와 그 출처를 추적함. 주로 텍스트 및 바이너리 데이터(String, char 및 byte 배열)를 추적함.
     * JDK 메서드 호출을 FlowTracker의 메서드 호출로 대체함.
     * JDK의 주요 위치에 코드를 주입하여 입력과 출력을 추적함.
     * 메서드 내에서 로컬 변수와 스택의 값을 추적하기 위해 데이터 흐름 분석과 더 깊은 계측을 수행함.
     * 메서드 호출 전후 및 메서드 시작과 끝에 코드를 추가하여 메서드 인수와 반환 값을 추적함.

    데이터 모델: Tracker

   FlowTracker의 데이터 모델의 핵심 클래스와 개념:
     * Tracker: 추적 객체의 내용과 출처에 대한 정보를 보유함.
          + content: 데이터를 통과한 내용. 예: InputStream 또는 OutputStream을 통과한 모든 바이트.
          + source: 다른 트래커의 소스 범위에 대한 내용의 범위를 연결함.
     * TrackerRepository: 흥미로운 객체와 그 트래커를 연결하는 글로벌 맵을 보유함.
     * TrackerPoint: 단일 원시 값을 나타내는 트래커의 위치를 가리킴.

    기본 계측

   Trackers를 최신 상태로 유지하기 위해 특정 JDK 메서드 호출 시 FlowTracker의 hook 메서드 호출을 삽입함. 예를 들어, System.arraycopy 호출을 com.coekie.flowtracker.hook.SystemHook.arraycopy 호출로 대체함.

    원시 값, 데이터 흐름 분석

   원시 값을 추적하는 것은 더 큰 도전임. 예를 들어, byte 값을 추적하기 위해 메서드 내에서 로컬 변수에 트래커를 저장함.

    메서드 호출

   원시 값이 메서드 호출의 인수와 반환 값으로 다른 메서드로 흐르는 것을 모델링함. Invocation을 사용하여 인수와 반환 값의 PointTracker를 저장함.

    코드 자체를 출처로 사용

   코드 자체에서 오는 값(예: 원시 및 String 상수)을 추적함. 각 클래스에 대한 트래커를 생성하고, 상수가 참조될 때 해당 트래커를 참조함.

    String 리터럴

   String 리터럴을 새로 복사하고, String의 내용을 ClassOriginTracker와 연결함. 예를 들어, String s = ""abc"";는 String s = StringHook.constantString(""abc"", 1234, 81);로 재작성됨.

    추적되지 않은 값에 대한 대체 방법

   프로그램의 모든 값을 추적하지 않음. 추적되지 않은 값이 추적해야 하는 위치에 도달하면, 이를 상수와 유사하게 처리함.

  GN⁺의 정리

     * FlowTracker는 Java 프로그램의 데이터 흐름을 추적하여 프로그램의 출력을 이해하는 데 도움을 줌.
     * Spring PetClinic 데모를 통해 HTTP 요청 처리, 템플릿 사용, 데이터베이스 연동을 시각적으로 확인할 수 있음.
     * 현재 개념 증명 단계로, 모든 프로그램에서 잘 작동하지 않을 수 있으며, 성능 오버헤드가 큼.
     * 데이터 흐름 분석과 메서드 호출 추적을 통해 원시 값과 객체의 출처를 추적함.
     * 유사한 기능을 가진 도구로는 Dynatrace, New Relic 등이 있음.

        Hacker News 의견

     * Clojure용 FlowStorm이라는 도구를 소개함
          + 공식 Clojure 컴파일러를 포크하여 추가 바이트코드를 삽입함
          + 대부분의 값이 불변이므로 포인터를 유지하여 스냅샷을 찍을 수 있음
          + 웹 앱 디버깅 데모 링크 제공: FlowStorm 데모
     * Java/JVM 생태계의 도구가 매우 훌륭함을 칭찬함
          + jitwatch와 비슷한 수준으로 감명받음
          + FlowTracker가 taint 분석을 연상시킴
          + 관련 키워드: ""dynamic taint tracking/analysis""
          + 관련 프로젝트 링크:
               o Phosphor
               o SootUp
               o klee-taint
     * HTML 요소를 SQL 문장까지 추적하는 데모에 감명받음
          + 이런 도구가 버그 해결의 첫 번째 방어선이 될 수 있을 것임
     * Smalltalk 환경을 연상시킴
          + 모든 객체와 메시지를 추적하고 상호작용할 수 있음
     * 데모 비디오가 매우 유용함을 강조함
          + 낯선 코드베이스를 탐색할 때 유용할 것임
     * HTML 소스 맵과 유사한 개념을 실험한 경험을 공유함
          + 웹 개발 도구가 이러한 전체 스택 속성에서 큰 혜택을 받을 것임
          + 기존 프레임워크에 통합하는 것이 큰 도전임
          + 관련 프로젝트 링크: HTML Source Maps
     * Eve-lang 데모와 유사함을 언급함
          + UI 요소가 왜 없는지 질문하는 방식의 디버깅
          + 관련 링크: Eve-lang 데모, Eve-lang 웹사이트
     * SQL 인젝션을 동적으로 찾는 도구와 유사한 논문을 기억함
     * 인터넷 상의 데이터를 추적하는 비전을 가졌던 경험을 공유함
          + 이미지의 출처나 문자열의 경로를 추적하는 방향으로 나아가는 단계임
     * VSCode와 프로젝트에서 이 도구를 사용해 보려는 시도에 감사함
          + 현재는 중단했지만, 다시 시도해 볼 계획임
"
"https://news.hada.io/topic?id=16668",""이메일이 인증이다" 패턴","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ""이메일이 인증이다"" 패턴

     * 대부분의 사람들은 광고 차단기, 제한된 자바스크립트, 비밀번호 관리자 등을 사용하지 않음
     * 많은 사람들이 다음과 같은 로그인 과정을 거침
          + 로그인 페이지로 이동
          + ""비밀번호를 잊어버렸습니다"" 클릭
          + 이메일로 이동
          + 복구 링크 클릭
          + 기억하지 못할 임시 비밀번호 입력
          + 반복
     * 사람들이 왜 이런 과정을 거치는지 물어보면, 대부분은 이유를 모름
     * 비밀번호 관리자, 신원 도용 위험, 이중 인증 및 다중 인증의 필요성에 대해 이미 많이 논의됨
     * 사람들이 왜 ""비밀번호를 잊어버렸습니다""를 인증 수단으로 사용하는지에 대한 의문
     * 이는 의식적인 결정이 아니라 시간이 지나면서 형성된 습관임
     * 이러한 습관을 이용하여 사람들이 더 나은 방식으로 시스템을 사용하도록 설계할 수 있는지에 대한 고민

GN⁺의 정리

     * 이 글은 사람들이 비밀번호를 잊어버리는 과정을 통해 인증을 받는 습관에 대해 다룸
     * 비밀번호 관리자와 이중 인증의 필요성에 대해 이미 많이 논의되었지만, 사람들이 왜 특정 과정을 따르는지에 대한 의문을 제기함
     * 이러한 습관을 이용하여 더 나은 보안 시스템을 설계할 수 있는 가능성에 대해 탐구함
     * 비슷한 기능을 가진 제품으로는 LastPass, 1Password 등이 있음

        Hacker News 의견

     * 이메일 계정은 온라인 인증에서 가장 보편적인 방법임
          + 전화번호도 경쟁력 있지만, 사람들은 휴대폰을 잃어버릴 수 있음
          + 전화번호 보안은 이메일 계정보다 낮음
          + 사용자 인증 시스템 설계 시 계정 복구를 고려해야 함
     * 비즈니스가 간편함을 제공하는 경우, 이메일 인증 시스템을 사용함
          + 사용자가 이메일 입력
          + 이메일로 인증 코드 전송
          + 사용자가 코드를 입력하면 ""무기한"" 로그인 상태 유지
          + 새로운 이메일이면 자동으로 계정 생성
          + 일부 사용자는 여러 이메일을 사용해 새로운 계정을 실수로 생성할 수 있음
          + 이 방법은 등록 및 로그인 전환율을 크게 개선함
     * 비밀번호 기반 인증 시스템은 비현실적임
          + 비밀번호는 두 가지 방식으로 사용됨
               o 비밀번호 관리자를 통해 단일 비밀번호로 보호
               o 여러 서비스에서 동일한 비밀번호 반복 사용
          + 대부분의 서비스는 이메일 복구를 제공함
          + 개인 이메일 계정은 거의 교체되지 않으며, 공유되지 않고 재사용되지 않음
     * 이메일로 일회용 URL 링크를 보내 로그인하는 방법 제안
          + 링크는 10분 내에 만료되고 일회용임
          + 링크를 가진 사람은 로그인 가능하지만, 이메일에서만 접근 가능함
          + 보안은 이메일 계정에 의존함
     * 서비스 제공자가 사용자에게 불편을 주는 이유는 단순함
          + 이메일 제공자는 세션이 거의 끝나지 않음
          + 서비스 인증 토큰을 Gmail 세션 시간과 동일하게 설정하거나, OTP로 로그인 가능하게 함
     * 대부분의 사람들은 컴퓨터 작업을 시도해보고 해결함
          + 소프트웨어는 시스템을 잘 이해하는 사람들이 만들지만, 사용자는 그렇지 않음
          + 사용자는 작동하는 패턴을 찾으면 그것을 고수함
          + 많은 학교가 태블릿을 사용해 컴퓨터 사용 감각을 익히지 못함
     * 비밀번호를 잊어버리는 단계를 생략하고 이메일을 인증으로 사용하는 사이트 있음
          + 이메일 주소 입력
          + 코드가 포함된 이메일 수신
          + 코드 입력 후 로그인
          + 여러 이메일을 사용하는 사람들에게는 불편할 수 있음
     * Best Buy에서 비슷한 방법을 사용함
          + 비밀번호 관리자를 사용해 비밀번호를 저장하지만, ATO 보호로 인해 비밀번호가 유효하지 않다고 나옴
          + 문제를 해결하려다 지쳐서 가장 쉬운 방법을 따르게 됨
     * 로그인 흐름이 비슷함
          + A) 웹사이트 방문, 비밀번호 관리자 통해 비밀번호 복사 및 붙여넣기, 이메일로 TOTP 요청 수신
          + B) 웹사이트 방문, 비밀번호 잊어버림 클릭, 로그인 링크 수신, 임의의 문자열 입력
          + B 방법이 더 빠를 때도 있음
     * 사용자가 비밀번호를 저장하지 않는 이유는 비밀번호 관리자가 없기 때문임
          + 비밀번호 관리자를 알고 있어도 공유 클라우드 PC에서 작업할 때 계정을 전환하는 것이 번거로움
          + 비밀번호 저장 기능이 없는 사이트는 비밀번호를 저장하지 않음
"
"https://news.hada.io/topic?id=16791","Linux 6.11 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Linux 6.11 출시

     * Linus Torvalds가 6.11 커널을 출시했음
          + 그의 메시지 : ""다시 한번 여행 중이고, 내 일반적인 시간대가 아니지만, 여기 비엔나에서는 일요일 오후이고, 6.11이 나왔음.""
     * 이번 릴리스의 주요 변경 사항에는 io_uring의 새로운 bind() 및 listen() 작업, 중첩된 하프 락킹 패치, 바쁜 실행 파일에 쓰기 기능, Rust로 블록 드라이버 작성 지원, 블록 레이어에서 원자적 쓰기 작업 지원, 전용 버킷 슬랩 할당자, getrandom()의 vDSO 구현 등이 포함됨

  아키텍처별 변경 사항

     * 64비트 Arm 아키텍처는 이제 ACPI 시스템에서 CPU 핫플러그를 지원함. 자세한 내용은 이 문서 커밋 참조
     * X86 커널은 이제 AMD의 SEV-SNP 보안 암호화 가상화 기능을 사용하여 게스트로 실행 가능. 보안 VM 서비스 모듈 이용
     * X86의 ""fake EFI 메모리 맵"" 기능 제거됨. 이 기능은 부팅 시 허구의 메모리 맵 항목을 만들 수 있게 하지만, 기밀 컴퓨팅 구성과 일치하지 않음
     * x86-64 시스템용 AES-GCM 암호의 새로운 구현. 성능 향상이 항상 환영 받지만, 이 기여는 코드와 작동 방식에 대한 광범위한 문서화로도 주목할 만함. 자세한 내용은 이 커밋 참조
     * PowerPC 40x 플랫폼 지원이 제거됨
     * RISC-V 시스템에 메모리 핫플러깅 지원이 추가됨

  코어 커널

     * io_uring 서브시스템은 이제 bind()와 listen() 구현하는 작업 제공
     * nsfs(네임스페이스) 파일 시스템의 새로운 ioctl() 작업 세트는 PID 네임스페이스 간 프로세스 및 스레드 그룹 ID 변환 수행
     * pidfd 파일 시스템은 pidfd로 표현되는 프로세스의 네임스페이스 파일 디스크립터 획득을 위한 새로운 ioctl() 호출 지원
     * 중첩된 bottom-half 잠금 패치가 병합됨. 이는 주로 실시간 커널의 지연 시간 개선을 위한 것이지만, 다른 사용자에게도 이점이 있을 것
     * 현재 x86-64 시스템에서만 구현된 새로운 시스템 호출인 uretprobe()가 있음. 이것의 역할은 사용자 공간 프로세스에 동적으로 삽입되는 uretprobe(함수 반환 추적점)의 처리를 최적화하는 것
     * function-graph tracer에 대한 단일 사용자 제한이 제거됨
     * 새로운 reserve_mem= 커맨드 라인 매개변수를 사용하여 명명된 메모리 영역을 예약할 수 있음. 이는 pstore 하위 시스템과 함께 새로운 ramoops.mem_name= 매개변수와 함께 사용하기 위한 것

  파일 시스템 및 블록 I/O

     * statx() 시스템 호출은 이제 AT_EMPTY_PATH 플래그가 설정된 경우 경로 인수가 null 포인터일 수 있음
     * open_by_handle_at() 시스템 호출은 6.11에서 호출자가 파일에 적절한 액세스 권한이 있다고 커널이 확인할 수 있는 상황에서 이 시스템 호출에 대한 권한 검사가 다소 완화됨
     * 리눅스 커널은 전통적으로 시스템 어딘가의 프로세스에서 사용 중인 실행 파일에 대한 쓰기를 차단했음. 이는 실행 중인 프로그램의 불쾌한 놀라움을 방지하기 위한 것. 커널 개발자들은 몇 년 동안 이 제한을 점차 없애고 있음. 6.11부터는 커널이 더 이상 사용 중인 실행 파일에 대한 쓰기를 방지하지 않음
     * Btrfs 파일 시스템은 rescue= 마운트 옵션에 대해 몇 가지 새로운 값(ignoremetacsums 및 ignoresuperflags)을 인식함. 이들은 사용자 공간 도구에 의해 부분적으로 변환된 파일 시스템(특히 체크섬 변환을 수행하는 파일 시스템)의 복구를 지원하기 위한 것
     * Btrfs가 블록 그룹 회수를 수행하는 방식이 개선되었음. 이는 파일 시스템이 가득 차지 않았음에도 여유 공간을 사용할 수 없는 상황을 피하기 위한 것. 새로운 동적 회수 임계값 작동 방식에 대한 설명은 이 커밋 참조

  하드웨어 지원

     * Qualcomm SM8650 카메라 클록 컨트롤러
     * SPD5118을 준수하는 온도 센서, Monolithic Power Systems MP2993 듀얼 루프 디지털 멀티-페이즈 컨트롤러 등 하드웨어 모니터링
     * ChromeOS 임베디드 컨트롤러 센서, ChromeOS EC 기반 충전 컨트롤러 등 기타
     * Realtek RTL8192DU USB 무선 네트워크 어댑터, Renesas Ethernet-TSN 인터페이스, Vining 800 CAN 인터페이스 등 네트워킹
     * Amlogic C3 PLL 클록 컨트롤러, Qualcomm SM7150 디스플레이/카메라/비디오 클록 컨트롤러 등 시계 관련
     * NXP IMX91 핀 컨트롤 유닛, Nuvoton MA35 핀 및 GPIO 컨트롤러 등 GPIO 및 핀 컨트롤
     * Lincoln Technologies lcd197 패널, Ilitek ILI9806E 기반 패널 등 그래픽
     * 산업용 I/O, 입력장치, 미디어, 기타, PHY, 사운드, USB 등 다양한 분야에 새로운 하드웨어 지원 추가

  기타

     * 시스템의 장치를 올바른 순서로 가동하도록 하는 새로운 전원 시퀀싱 서브시스템이 등장
     * ""sloppy logic analyzer"" 모듈은 GPIO 라인 세트를 저예산 논리 분석기로 전환할 수 있음
     * perf 도구에 많은 새로운 기능이 추가되었음
     * 펌웨어 로딩을 위한 작은 Rust 추상화 세트가 병합됨. 아직 Rust로 중요한 드라이버를 작성하는 데 필요한 많은 부분이 있지만, 그 목록은 점점 줄어들고 있음

  네트워킹

     * 새로운 net.tcp_rto_min_us sysctl 노브를 사용하여 TCP 소켓의 최소 재전송 시간 초과 조정 가능
     * ethtool 유틸리티는 Net DIM을 사용하는 인터페이스에 대한 인터럽트 구성을 미세 조정할 수 있게 되었음

  보안 관련

     * 전용 버킷 슬랩 할당자가 병합되었음. 이는 힙 스프레이 공격에 대한 보호를 제공하기 위한 것
     * vDSO getrandom() 구현으로 인해 무작위 데이터 생성이 크게 가속화될 것. 구현이 기사 작성 이후 다소 변경되었음. 자세한 내용은 이 업데이트 참조

  가상화 및 컨테이너

     * KVM에서 AMD의 SEV-SNP 보안 암호화 가상화 메커니즘에 대한 초기 지원이 추가됨
     * 게스트가 실행되기 전에 게스트의 메모리를 미리 채우기 위한 새로운 KVM ioctl() 호출이 있음

  내부 커널 변경

     * 6.11에 병합된 첫 번째 변경 사항은 리누스 토발즈가 추가한 새로운 ""런타임 상수"" 메커니즘
     * iomap 하위 시스템에 대한 일부 문서화가 마침내 이루어짐
     * 커널을 빌드하는 데 필요한 GNU Make의 최소 버전이 4.0으로 높아짐
     * 6.11에서 118개의 내보낸 기호가 제거되고 464개가 추가되어 순 증가가 346개. 6개의 새로운 kfunc도 있음

GN⁺의 의견

     * 6.11 커널 릴리스에서는 많은 아키텍처 별 개선 사항들과 하드웨어 지원이 확장된 것이 인상적. 특히 64비트 ARM과 x86에서의 CPU 핫플러그와 AMD의 SEV-SNP 지원 등은 보안과 가상화 측면에서 의미가 큼
     * io_uring과 BPF에 새로운 기능들이 추가되면서, 고성능 I/O와 eBPF 프로그래밍에 대한 커널 수준의 지원이 강화되는 추세. 이는 시스템 성능 최적화와 모니터링, 네트워킹 등에 큰 도움이 될 것
     * 전원 시퀀싱이나 sloppy 논리 분석기 같은 새로운 서브시스템과 모듈의 등장은 임베디드나 IoT 환경에서 리눅스 커널의 활용도를 높일 것으로 기대됨
     * 런타임 상수나 문서화 개선 등 커널 내부적인 코드 최적화와 개발 편의성 개선도 꾸준히 이루어지고 있음. 하지만 아직 문서화가 부족한 부분들이 많은 만큼, 커뮤니티 차원의 협력이 더욱 필요해 보임
     * 6.11 병합 윈도우의 후반부에는 여러 아키텍처에 대한 성능 개선과 새로운 하드웨어 지원이 주를 이룸. 특히 x86-64의 AES-GCM 암호 최적화와 RISC-V의 메모리 핫플러깅 지원 등은 주목할 만한 변화
     * KVM에서 AMD의 SEV-SNP에 대한 초기 지원이 추가되는 등 가상화 보안 측면에서도 발전이 있었음. 이는 클라우드와 엣지 컴퓨팅 환경에서 리눅스 커널의 역할이 더욱 확대될 것임을 시사
     * 펌웨어 로딩과 힙 스프레이 방지 등을 위한 Rust 추상화 도입은 시스템 프로그래밍 언어로서 Rust의 가능성을 보여줌. 앞으로 커널 내 Rust 코드의 비중이 점차 늘어날 것으로 예상됨
     * 확장 가능한 스케줄러 클래스 병합이 연기된 것은 아쉽지만, 충분한 검토와 안정화를 위해 불가피한 선택으로 보임. 스케줄러는 시스템 성능에 직결되는 만큼 신중한 접근이 필요

   ""6.10.10으로 업데이트 후에도 간헐적으로 절전 모드에서 깨어나지 않음""
   나만 그런게 아니었구나...

        Hacker News 의견

     * 6.10 버전은 여러 주요 버그로 인해 문제가 많았음
          + amdgpu 관련 버그 3개로 비디오 손상, 시스템 중단 및 충돌 발생
          + 6.10.10으로 업데이트 후에도 간헐적으로 절전 모드에서 깨어나지 않음
     * Linux 3.11 버전 이후로 많은 발전이 있었음
     * Torvalds가 여전히 Linux 커널 릴리스 노트를 작성하는 것에 감탄함
     * 기뻐할 만한 소식
          + Rust로 블록 드라이버 작성 지원
          + 블록 레이어에서 원자적 쓰기 작업 지원
     * 6.12 버전에 대한 기대: sched_ext, PREEMPT_RT
     * 새로운 Snapdragon X 지원에 대해 의견을 구함
     * 런타임 상수를 어떻게 구현할지 궁금해함
     * 스마트폰용 GNU/Linux의 시대는 언제 올지 궁금해함
          + Android는 적합하지 않음
          + 스마트폰에 데스크탑처럼 쉽게 배포판을 설치할 수 있기를 바람
     * 이제 Linux 노트북을 RAM에 일시 중지할 수 있는지 궁금해함
     * Ubuntu가 Oracular 베타에 이 기능을 며칠 동안 적용하고 테스트했다고 주장할 날을 기다림

   토발즈형 한 200살은 더 살아야겠다
"
"https://news.hada.io/topic?id=16714","당신의 지역 Taco Bell 경제성 평가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        당신의 지역 Taco Bell 경제성 평가

     * Lava Taco
          + Lava Taco 메뉴 항목
     * Crunchy Taco
          + Crunchy Taco 메뉴 항목
     * 3 Crunchy Taco Combo
          + 3 Crunchy Taco Combo 메뉴 항목
     * 3 Doritos Locos Combo
          + 3 Doritos Locos Combo 메뉴 항목
     * Crunchwrap Supreme
          + Crunchwrap Supreme 메뉴 항목
     * Nachos BellGrande
          + Nachos BellGrande 메뉴 항목
     * Build Your Own Cravings Box
          + Build Your Own Cravings Box 메뉴 항목
     * Cinnamon Twists
          + Cinnamon Twists 메뉴 항목
     * Guacamole
          + Guacamole 메뉴 항목
     * Follow me on Twitter 🐦 | Protomaps © OpenStreetMap🌮
          + Twitter 팔로우 및 Protomaps와 OpenStreetMap 관련 정보
     * How economical is your local Taco Bell?
          + 지역 Taco Bell의 경제성에 대한 정보
     * Cheapest: $6.99 (2403 S GREGG ST)
          + 가장 저렴한 가격: $6.99 (2403 S GREGG ST)
     * Most Expensive: $14.99 (17 South Fort Lauderdale Beach Blvd, Unit#R216)
          + 가장 비싼 가격: $14.99 (17 South Fort Lauderdale Beach Blvd, Unit#R216)
     * Legend
          + 가격 범위에 대한 범례
          + [ - ]<$7.50
          + $7.50+
          + $8.50+
          + $9.50+
          + $10.50+
          + $11.50+

GN⁺의 정리

     * 이 기사는 Taco Bell 메뉴 항목과 가격 정보를 제공함
     * 지역별로 가장 저렴한 가격과 가장 비싼 가격을 비교할 수 있음
     * Taco Bell의 경제성을 평가하는 데 유용한 정보임
     * 유사한 기능을 가진 다른 패스트푸드 체인점과 비교해 볼 수 있음

        Hacker News 의견

     * Pacifica에 있는 전설적인 Taco Bell이 가장 비싼 곳은 아니지만, 벽난로와 마가리타를 제공하고 서퍼들을 위한 창구가 있음
     * Seattle Lower Queen Anne에 있는 Taco Bell/KFC 콤보 매장이 전국에서 가장 비싼 Taco Bell로 알려져 있음
          + 이 매장에 대한 가격 공포 이야기가 있음
     * 텍사스에는 타코 경쟁이 많음
     * Pantry & Larder 웹사이트는 ""McCheapest: 미국 McDonald's에서 Big Mac 가격을 추적하는 사이트""와 동일한 사이트임
          + Taconomical은 9가지 다른 메뉴 항목을 선택할 수 있게 함
     * 생활비 비교를 위해 ""Big Macs and the Cost of Living Crisis""를 참조할 수 있음
     * Taco Bell의 가격 변동이 이렇게 큰 줄 몰랐음, 가장 흥미로운 특징임
     * 테네시 대부분이 이용 불가능한 이유는 모르겠지만, 이곳의 가격이 급등했음
          + 예전에는 Taco Bell에 항상 줄이 있었지만, 이제는 거의 비어 있음
     * 최근 네덜란드 Amersfoort에서 Taco Bell을 보고 기뻤음
          + 10개의 타코가 14유로로, 예전의 59, 79, 99센트 메뉴와는 다르지만 나쁘지 않음
          + Chili Cheese burrito를 여전히 그리워함
     * 이 지도는 상업용 부동산의 임대 비용/평방피트로 조정되어야 함
          + 그렇지 않으면 결과는 단순히 임대료가 타코 가격에 반영된 것임
     * 가장 비싼 Taco Bell이 내 지역에 있었는데, 이제는 비싸고 별로인 만두 가게로 대체됨
     * 이 지도는 앱을 사용할 수 있는 매장만 포함하고 있어, Seattle의 가장 비싼 매장(아마도 미국에서?)은 빠져 있음
"
"https://news.hada.io/topic?id=16800","Google, Cache Links 기능 공식적으로 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Google, Cache Links 기능 공식적으로 종료

     * Google은 오래된 검색 기능 중 하나인 캐시 링크를 제거함
          + 캐시 링크는 웹 페이지의 이전에 저장된 버전을 보여주는 기능이었음
     * 이는 웹의 초기 시대에 페이지 로딩을 보장할 수 없었던 문제를 해결하기 위해 도입됨
          + 25년 전의 인터넷은 불안정했음. URL을 입력하면 웹사이트가 나타나기도 했지만, 종종 작동하지 않았음
          + Google은 검색 결과에 ""캐시"" 링크를 추가하여 이 문제에 대한 해결책을 제시함
          + 캐시 링크는 웹 페이지의 이전에 저장된 버전을 보여줌으로써 안정적인 접속을 보장함
     * 구글 검색 담당자인 Danny Sulivan이 이게 완전히 삭제되었다는 것을 확인해줌
          +

     ""가장 오래된 기능 중 하나입니다. 하지만 과거에는 페이지 로딩에 의존할 수 없는 경우가 많았을 때 사람들이 페이지에 액세스할 수 있도록 돕기 위한 것이었습니다. 요즘은 상황이 크게 개선되었습니다. 그래서 폐기하기로 결정했습니다.""
     * 웹이 안정된 인프라로 발전함에 따라 일반 사용자들은 캐시 기능을 대부분 사용하지 않음
          + 하지만 SEO 전문가, 언론인, 연구자 등은 여전히 캐시를 유용한 도구로 활용해 옴
          + 예전엔 링크 바로 옆에 Cache 버튼이 있었지만, 캐시 버튼을 ""About This Result"" 메뉴로 이동시켜 접근성을 낮춤
          + 현재는 URL 앞에 ""cache:""를 입력하면 여전히 Google 캐시를 볼 수 있지만, 곧 제거될 예정임
     * 다른 해결책이 있지만 불안정한 상태임
          + Internet Archive의 Wayback Machine은 공공 서비스로서 웹사이트의 과거 사본을 보존하고 있지만, 이 조직은 계속적인 재정난에 시달리고 있음
          + Danny Sulivan은 캐시 링크가 있던 자리에 인터넷 아카이브의 링크를 넣는 것도 고려해볼 수 있겠지만, 많은 사람들과 의논해봐야 할 것이라고 함
"
"https://news.hada.io/topic?id=16732","회사에 잘릴 위기라 스마트스토어를 인수한 개발자 시리즈 - 2탄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  회사에 잘릴 위기라 스마트스토어를 인수한 개발자 시리즈 - 2탄

   해당 시리즈는 작은 스마트스토어를 인수해 밸류업시키는 과정을 창업가의 시점으로 생동감 있게 풀어내는 콘텐츠입니다.
     * 1화 - 개발자에서 사장으로: 1000만원의 인수, 두 달 만에 회수
     * 2화 - 밸류업 전략의 결정: 해외 브랜드 판권을 따내다 1탄 (이번 편)
          + 개발자이던 내가 사장이?
          + 사업의 밸류업 후보 전략들을 impact-effort matrix로 분석
          + 판권 확보를 위한 목표 설정 및 마음가짐
"
"https://news.hada.io/topic?id=16699","RxDB 및 Transformers.js를 사용한 로컬 우선 벡터 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              RxDB 및 Transformers.js를 사용한 로컬 우선 벡터 데이터베이스
"
"https://news.hada.io/topic?id=16801","아마존, 직원들에게 주 5일 사무실 출근하라고 복귀 지시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    아마존, 직원들에게 주 5일 사무실 출근하라고 복귀 지시

     * 아마존 CEO 앤디 재시가 메모를 통해 직원들에게 주 5일 사무실 출근을 지시함
          + 이전에는 주 3일 사무실 출근을 요구했음
          + 조직 구조를 단순화하고 관리자를 줄일 계획
          + 새로운 정책은 2025년 1월 2일부터 적용될 예정
          + 예외적인 상황이나 S팀 리더의 승인을 받은 경우를 제외하고는 모두 사무실 출근을 해야 함
          + 팬데믹 이전에는 주 2일 재택근무가 보장되지 않았으며, 앞으로도 마찬가지일 것임
     * 조직 구조 변화
          + 아마존은 관리자를 줄이고 조직을 단순화할 계획
          + 각 S팀 조직은 2025년 1분기 말까지 개별 기여자와 관리자의 비율을 최소 15% 증가시켜야 함
          + 불필요한 역할을 식별하고 제거할 가능성 있음
     * 문화 강화
          + 재시는 아마존의 기업 문화를 강화하기 위해 이러한 변화를 도입한다고 설명
          + 불필요한 프로세스와 규칙을 제거하기 위해 ""관료주의 메일박스""를 만들었음
          + 아마존은 세계 최대의 스타트업처럼 운영하고자 함
     * 주식 동향
          + 아마존 주식은 오후 거래에서 하락세를 보임

        Hacker News 의견

     * 펌웨어 엔지니어로서, 사무실에서 해야 할 일이 많지만, 1년 동안 완전 원격 근무를 하고 있음
          + 전문 장비와 하드웨어를 집으로 가져올 수 있었음
          + 계약 제조업체와 이메일로 소통하는 것이 사무실에서 하는 것과 다르지 않음
          + 집 앞 공원에서 제품을 테스트할 수 있어 더 행복하고 건강하며 생산성이 높아짐
          + 출퇴근 시간 2시간을 절약하여 더 많은 에너지를 일에 쏟을 수 있게 됨
     * Amazon이 1월까지 완전 출근으로 전환할 예정임
          + 연말의 바쁜 시기에 모든 직원이 새해 첫날부터 출근 준비를 해야 함
          + 원격 근무는 팀이 더 유연하게 변화에 대응할 수 있게 해줌
          + 강제적인 출근 전환이 이해되지 않음
     * Amazon에서 일하는 가치에 대한 질문
          + FAANG 경력을 위해 Amazon에 지원할까 고민 중임
          + Amazon에서 일하는 것이 훌륭한 동료와 기회를 제공한다고 들었음
          + 그러나 Amazon이 직원의 요구를 무시하는 경향이 있음
          + 다른 FAANG 회사와 비교했을 때 Amazon을 선택할 이유가 있는지 궁금함
     * Amazon의 원격 근무 정책에 대한 비판
          + 아프거나 가정에 문제가 있을 때 원격 근무가 가능하지만, 이는 비공식적임
          + 아플 때는 일을 하지 말고 회복에 집중해야 함
          + 팬데믹 동안 아버지들이 더 많은 육아를 담당하게 되었으나, 완전 출근으로 돌아가면 이 동향이 역전될 것임
          + Amazon에 대한 비판
     * '관료주의 메일박스' 설정의 아이러니
          + 중앙 통제에 의해 자율적인 결정이 대체됨
     * 출근에 대한 생각 변화
          + 출근이 좋은 것이라고 생각했지만, 강제로 3일 출근하게 되면서 생각이 바뀜
          + 출퇴근 시간 2-2.5시간이 고압적인 직장 생활과 균형을 맞추기 어려움
          + 하이브리드 근무가 최적의 타협점이었음
     * Amazon에서 일했던 경험
          + 좋은 관계로 퇴사했지만, 다시 돌아가지 않을 것임
          + 자신의 근무 방식을 존중해주는 회사를 원함
          + 신뢰받는 리더로서 고객이 필요로 하는 결과를 제공하는 한, 물리적 위치는 중요하지 않음
          + 신경다양성 직원이나 장기 이식 수술을 받은 직원에게 고통을 강요하는 것은 부당함
     * Amazon 리더들의 이야기
          + Amazon 출신 리더들이 과거 경험을 공유하지만, 현재의 문화와 다르다고 강조함
     * Amazon의 공식 발표
          + 관리자 수를 줄이는 것도 중요한 업데이트임
          + 각 조직이 2025년 1분기 말까지 관리자 대비 개인 기여자 비율을 최소 15% 증가시킬 것을 요구함
     * 관련 링크
"
"https://news.hada.io/topic?id=16682","당신 회사는 주니어 개발자가 필요해요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          당신 회사는 주니어 개발자가 필요해요

주니어 엔지니어를 고용해야 하는 이유

     * 최근 빅테크 기업들은 주로 ""즉시 투입 가능한"" 스태프 개발자들을 선호함
     * AI가 주니어 개발자를 완전히 대체할 것이라는 의견이 많음
     * 그러나 주니어 직원의 존재 이유는 단순한 노동력 제공이 아닌, 심리적으로 안전한 문화와 혁신을 촉진하는 데 있음

주니어 인재가 팀에 미치는 영향

     * 주니어 인재는 팀이 가르치고, 코칭하고, 협력하도록 강제함
     * Nonaka와 Takeuchi의 'The Knowledge-Creating Company'에서 일본 기업들이 지식 창출에 집중하여 혁신을 이끌었다고 주장함
     * 혁신적인 기업은 지식을 가르치고, 확산시키고, 공유하는 것을 우선시함
     * 지식 발견 자체가 혁신임
     * 주니어는 회사의 지식을 흡수하고 재처리하여 명시적인 지식으로 변환함
     * 주니어는 팀의 중복성을 제공하여, 버그 수정 및 야간 근무 등의 단순한 팀 필요를 충족시킴

제너럴리스트가 전문가보다 더 나은 혁신을 가져옴

     * Range라는 책에서는 ""제네럴리스트가 종종 혁신적인 아이디어를 제시한다""고 주장
          + 전문가가 아닌, 자전거를 만지작거리던 라이트 형제가 결국 비행기를 발명한 것이 전형적인 예시임
          + NoSQL 데이터베이스는 관계형 데이터베이스 전문가가 아닌, 분산 시스템을 만지작거리는 사람들로부터 나옴
     * 주니어 직원들은 소크라테스식 대화를 통해 문제를 해결하려고 함
          + 전문가들은 자아나 맹점으로 인해 명백한 해결책을 보지 못하는 경우가 많음
          + 주니어들은 열심히 부딪히고, 때로는 시니어들이 너무 어렵다고 확신한 문제를 해결하기도 함
          + 주니어들은 종종 실패하는 ""바보 같은"" 일을 시도하지만, 때로는 전문가들이 오랫동안 지녀온 가정에 얼마나 눈이 멀었는지 보여줌
     * 위대한 아이디어 중 일부는 주니어 직원들로부터 나옴
          + 잭 도시는 팟캐스트 회사의 주니어 직원으로 있을 때 트위터에 대한 아이디어를 냄
          + 포스트잇은 3M의 주니어 직원이었던 스펜서 실버와 아트 프라이가 발명함
          + 파이어폭스는 넷스케이프에서 일하던 블레이크 로스의 사이드 프로젝트였음
     * 주니어들은 시니어보다 더 다양한 배경을 가지고 있으며, 시니어들이 완전히 놓치는 사고방식과 관점으로 이어짐

주니어는 심리적 안전을 의미하며, 이는 더 많은 혁신을 의미함

     * 조직 문헌에서 심리적 안전이라는 용어는 1999년 Amy Edmonson의 논문에서 유래함
          + 핵심 인용문: ""팀의 심리적 안전은 학습 행동과 관련이 있지만, 팀 효능감은 그렇지 않음"" (효능감 == 인지된 능력)
          + 코칭이 규범인 환경을 조성하면 심리적 안전이 높아짐. 팀원들은 기꺼이 실수를 인정하고 오류를 보고함
          + 요약하면, 학습 문화는 심리적 안전을 낳음. 심리적 안전은 학습을 낳음. 학습과 혁신은 함께 함
     * 그룹 응집력과는 다소 대조적임
          + 그룹 응집력은 오랜 기간 함께 일한 동료들의 밀접한 관계를 의미함
          + 이러한 응집력은 다른 사람의 견해에 반대하고 도전하려는 의지를 감소시킬 수 있음 (집단사고 현상)
          + 이는 대인 관계에서의 위험 감수 부족을 의미함
     * 장기 동료로 구성된 안정적인 팀은 집단사고에 빠지고 혁신 능력을 잃게 됨
          + 그들은 때로는 외부 아이디어와 경험에 대한 면역 체계를 형성함
          + 누군가, 특히 주니어를 온보딩하는 것은 짜증나는 일로 보일 수 있음. 동료들은 가르치고 배우는 것을 즐기지 않기 때문
          + 우리는 모두 자신의 지식 사일로에 살면서 자신의 일을 다른 사람에게 공개하는 것을 꺼리는 완고한 직원을 만난 적이 있음
          + 그들은 ""학습 행동""이라는 근육을 잃어버림
     * ""학습 행동""은 실험할 수 있는 능력을 포함함**
          + 이는 더 많은 팀이 갖기를 바라는 것
          + 이는 새로운 접근 방식을 시도하고, 더 많은 A/B 테스트를 실행하며, 효과가 없을 수도 있지만 (때로는 효과가 있는) 제품 방향을 기꺼이 시도하는 것으로 해석됨
          + 창업자들은 종종 ""빠르게 실패하라""고 말하지만, 창업자/관리자 등도 자신의 최악의 적이 될 수 있음: 이미 모든 답을 가진 전문가만을 원하고, 새로운 답을 찾고자 하는 주니어는 원하지 않음

주니어를 고용하지 않으면 당신의 조직이 겪게되는 문제

     * 앞서 얘기한 많은 주제들이 겹치기 시작함:
          + 배우기를 원하는 주니어를 고용할 것
          + 가르치기를 원하는 시니어를 고용할 것
          + 가르칠 수 없는 사람은 ""하는 것""도 허용되어서는 안될 수도 있음
     * 팀은 건강한 대학 연구실과 매우 유사함
          + 플라톤적 이상의 시니어는 열린 마음을 가지고 도전받기를 열망함
          + 새로운 길을 찾기 위해 자신의 전문성을 기꺼이 버리고자 함
          + 스펀지처럼 지식을 흡수하려는 열정으로 들어오는 주니어들과 함께, 순진한 질문을 통해 새로운 아이디어를 이끌어내고 기반을 흔듦
     * 이것이 바로 높은 성과를 내는 팀에 속해 있는 것 같은 느낌
          + 개인은 아이디어에 개방적이고, 공을 기꺼이 나누며, 비난을 피함
          + 지속적으로 출시(Shipping)하고, 성공과 배움을 공유하며, 팀을 믿음
     * 이는 퍼즐의 50%에 불과함 (개인적 의견)
          + 나머지 50%는 이 팀을 보호하고, 내부의 혼란을 일관된 이야기로 팔며, 투자자 및 이해관계자와 협력하여 난잡한 실험을 진보의 영광스러운 이야기로 바꾸는 ""외부 세계""와의 인터페이스가 필요함
          + 안타깝게도, 많은 임원들이 이러한 리더십의 겉모습을 전체 시스템으로 오해하고, 그것을 작동하게 만드는 가르침과 학습의 내부 연소 엔진을 무시함

GN⁺의 의견

     * 주니어 개발자를 고용하는 것은 단순히 코드를 작성하는 인력을 확보하는 것 이상의 의미가 있음. 그것은 조직 문화와 혁신 능력에 직결되는 문제임
     * AI 기술의 발전으로 주니어 개발자의 역할이 위협받고 있다고 생각할 수 있지만, 오히려 AI와 협업하며 새로운 가치를 창출할 수 있는 기회로 삼아야 함
     * 주니어 개발자를 적극적으로 채용하고 육성하는 기업이 장기적으로 더 큰 경쟁력을 가질 것임. 단순히 눈앞의 성과에 집착하기보다는 조직의 지속가능한 성장을 위해 투자해야 함
     * 주니어 개발자 채용이 어려운 상황이라면, 사내 교육 프로그램을 강화하거나 인턴십 제도를 활용하는 등 다양한 방안을 모색해 볼 수 있음
     * 무엇보다 경영진과 리더들이 주니어 인재의 가치를 제대로 인식하고, 이들을 육성하고 활용하기 위한 장기적 비전을 제시해야 함

   전반적으로 동의하는데 주니어 개발자를 채용하는건 하나의 예가 될 것 같아요.
   비전문가(해당 도메인을 잘 모르는) 개발자도 비슷하지 않을까 생각은 드네요.

   생각하지 못했던 관점이라 좋네요.

     주니어는 회사의 지식을 흡수하고 재처리하여 명시적인 지식으로 변환함

   이 부분이 특히 공감되고, 동료도 명시적인 지식으로 변환하려고 노력하게 되는 거 같아요.
   코드 리뷰만 하더라도 경험이 있는 사람은 직감적으로 피하지만, 주니어는 시도하게 되고, 설득하기 위해서 지식을 정리하고 공유하게 되는 거 같아요.

   ""너 자신을 알라"" by 소크라테스

   결론: 똑똑하고 창의적이고 배우기 원하고 전반적으로 다잘하는 주니어를 고용하자

   이 글을 제목만 보고 어떤 교활한 경영자들은 인건비만 생각하겠죠

   교활한 경영자를 한국 경영자로 일반화하면 됩니다.
   정상적인 경영자 만나는게 로또니까요.

        Hacker News 의견

     * 코드 리뷰를 통해 개발자들이 코드 품질을 유지하고 학습할 수 있음
          + 주니어 개발자들이 질문을 통해 시니어 개발자들이 자신의 코드를 더 잘 이해하게 됨
          + 소크라테스식 방법론을 통해 시니어 개발자들이 코드의 개선점을 찾을 수 있음
     * John Ousterhout의 ""A Philosophy of Software Design"" 원칙을 따름
          + 코드 주석은 장기 유지보수와 팀 학습에 도움을 줌
          + 클래스, 메서드, 변수 이름을 신중하게 선택하여 코드가 이야기처럼 읽히도록 함
     * 주니어 개발자는 가이드가 필요함
          + 적절한 작업 정의와 코드 리뷰 프로세스가 없으면 주니어 개발자를 고용하는 것은 비효율적임
     * 우리는 주니어 개발자만 고용하는 회사임
          + 고등학생 인턴을 통해 인재를 발굴하고 지역 인재를 유지함
          + 대규모 확장을 목표로 하지 않는 회사에 적합함
     * 모든 제네럴리스트가가 주니어는 아니며, 모든 주니어가 제네럴리스트는 아님
          + 산업에는 더 많은 경험 있는 제네럴리스트가 필요함
     * 많은 회사가 주니어 개발자를 고용하지 않음
          + 주니어 개발자에게도 높은 경력을 요구하는 경우가 많음
     * 주니어 개발자를 잘못 고용하면 코드베이스에 악영향을 미칠 수 있음
          + 시니어 개발자를 잘못 고용하면 더 큰 비용이 발생함
          + 주니어 개발자를 잘 고용하면 비용 대비 높은 성과를 얻을 수 있음
     * 주니어 개발자를 고용하고 교육하는 것은 산업의 건강에 중요함
          + 많은 회사가 시니어 개발자를 원하지만, 주니어 개발자를 시니어로 성장시키려 하지 않음
     * 시니어 개발자가 떠날 때를 대비해 주니어 개발자를 고용하고 교육해야 함
          + 주니어 개발자를 고용하고 교육하는 것은 어렵지 않음
     * 주니어 개발자가 효과적이지 않을까봐 두려워하는 경우가 많음
          + 주니어 개발자를 고용하고 교육하는 것이 산업 문제 해결의 한 방법임
     * 주니어 개발자 성공 전략
          + 똑똑하지만 경험이 부족한 주니어 개발자를 고용하고, 시니어 개발자와 무제한으로 시간을 보낼 수 있도록 함
          + 프로젝트를 시연하게 하고, 어려운 부분을 단순화함
          + 주니어 개발자를 AI로 대체하려는 생각은 어리석음
"
"https://news.hada.io/topic?id=16755","Lady Deirdre - 프로그래밍 언어 컴파일러, 인터프리터 및 소스 코드 분석기를 위한 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Lady Deirdre - 프로그래밍 언어 컴파일러, 인터프리터 및 소스 코드 분석기를 위한 프레임워크

     * 새로운 프로그래밍 언어 프로젝트를 시작하려는 사람들을 위한 도구
          + 코드 에디터의 언어 확장, 프로그래밍 언어 컴파일러 및 인터프리터, 심지어 새로운 코드 에디터 까지 개발 가능

주요 기능

     * 매크로를 사용한 파서 생성기 : 언어의 어휘 및 구문 문법은 enum 타입에 대한 파생 매크로를 사용하여 지정되며, enum 변형은 개별 토큰 및 구문 분석 규칙이 있는 노드를 나타냄
     * 수작업 파서 : API를 사용하면 무제한 lookahead를 사용하여 수동으로 작성된 재귀적 하강 파서를 개발하고 매크로로 생성된 파서와 원활하게 통합할 수 있음
     * 오류 복원력 : 결과물인 파서는 오류에 강하고 불완전한 소스 코드에서 구문 트리를 구축할 수 있음
     * 의미 분석 프레임워크 : 레퍼런스 속성 측면에서 구문 트리에 대한 임의의 주문형 계산을 관리하는 내장 의미 분석기가 포함되어 있음
     * 점진적 컴파일 : 최종 사용자의 파일 텍스트에 대한 점진적 편집에 대응하여 코드베이스 구조의 메모리 내 표현을 지속적으로 패치함. 변경 사항의 처리는 대규모 코드베이스에서도 빠름
     * 병렬 계산 : 멀티 스레드 및 단일 스레드 프로그램 모두에 맞게 특별히 설계됨
     * Web-Assembly 호환성 : wasm 대상 및 특히 브라우저 환경과 호환됨
     * 소스 코드 포맷터 : 코드 주석과 빈 줄을 고려하는 코드 포맷터 프로그램을 개발하는 도구가 포함
     * 주석이 달린 코드 조각 : 터미널에 코드베이스의 구문 및 의미 오류를 표시하기 위한 구문 강조 표시 및 주석이 포함된 소스 코드 조각을 인쇄하기 위한 API를 제공
     * 자급자족 API : 프로그래밍 언어 컴파일러의 프런트엔드 부분과 코드 편집기 언어 확장을 개발하기 위한 자급자족적이고 확장 가능하며 매우 구성 가능한 API를 제공함. Rust 표준 라이브러리와 매크로 Crate를 제외하고는 타사 종속성이 없음

   데르드러(아일랜드어: Deirdre [ˈdʲɛɾˠdʲɾʲə])는 아일랜드 신화에서 가장 잘 알려진 비극의 여주인공이다. 그녀의 이야기는 얼스터 대계의 일부이다.

     위키의 설명이 뭔가 엄청난거 같습니다.
"
"https://news.hada.io/topic?id=16780","OpenSCAD - 프로그래머를 위한 3D CAD 모델러 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    OpenSCAD - 프로그래머를 위한 3D CAD 모델러

     * OpenSCAD는 3D CAD 설계를 위한 무료 소프트웨어
     * Linux/UNIX, Windows, Mac OS X
     * 개체를 설명하는 스크립트 파일을 읽고 이 스크립트 파일에서 3D 모델을 렌더링하는 3D 컴파일러 형태
     * 다른 3D CAD 소프트웨어와 비교했을 때, 코드 기반의 설계 방식을 선호하는 사용자에게 특히 유용함
     * Constructive Solid Geometry(구조적 입체기하학) 기반 모델링 기술을 사용
          + 큐브,실린더,피라미드 등의 기본요소의 불린 연산(유니온,인터섹션,디퍼런스)으로 복잡한 객체를 구성

   OpenSCAD는 ChatGPT가 코드를 잘 만들어줘서 쓰기에 좋긴 합니다.
   근데 해커뉴스 댓글에서 얘기하는 CadQuery, Bulid123D, Replicad, PythonSCAD 도 흥미롭네요.

        Hacker News 의견

     * OpenSCAD에 의존하지 않고 코드-CAD를 하고 싶다면 CadQuery, Build123D, Replicad를 사용해보는 것이 좋음
          + OpenSCAD는 메쉬 형식만 출력하는 일방적인 선언적 CSG 환경임
          + 모델 분석, 반복, 측정, 얼굴에 쉽게 빌드, 쉬운 챔퍼 및 필렛, STEP 파일 내보내기, 제약 기반 디자인 사용, 모델 어셈블리 등 많은 CAD 기능을 제공하지 않음
          + OpenSCAD에서 이러한 작업을 돕는 도구들은 특정 작업에 대한 해킹과 임시방편임
          + 버전 관리된 텍스트 파일로 모델을 만드는 것과 GUI CAD를 피하고 싶은 마음은 이해하지만, 제한된 3D 모델 개념에 자신을 제한하는 것은 이해하기 어려움
          + CadQuery, Build123D, Replicad는 OpenCASCADE를 기반으로 하며, 이는 더 풍부한 상호작용을 제공하는 bRep CAD 커널임
     * 새로운 CAD 모델러를 개발 중이며, OpenSCAD의 정신적 후계자로 생각함
          + 양방향 모델링과 복잡한 작업을 설계할 수 있는 다중 파트 워크플로우를 지원함
          + dslcad.com
     * OpenSCAD용 NopSCADlib 라이브러리를 놓치지 말아야 함
          + 유용한 모양, 함수, 폭발도, 조립 지침 등을 포함함
          + NopSCADlib
          + Belfy OpenScad Library v2
     * OpenSCAD는 특히 고도로 상세한 기하학적 구조에 놀라움
          + Fusion360이 약 2000개의 셀로 구성된 벌집 구조를 모델링할 때 충돌했지만, OpenSCAD는 유사한 모델을 쉽게 처리함
     * React에서 CAD 코딩에 관심이 있는 사람들을 위해, 팀에서 jscad 위에 react fiber 레이어를 구축하고 MIT 라이선스 3D 전자 라이브러리를 개발 중임
          + jscad-fiber
          + CAD 선언을 위해 커스텀 언어가 필요하지 않다고 생각함
          + TypeScript/Python은 타입 시스템에 많이 투자했기 때문에 기존 언어를 사용하는 방향으로 나아가길 바람
          + 현재 코드-CAD의 가장 큰 제한은 제약 시스템의 부족임
          + 고급 구성 요소를 천천히 구축하여 제약 조건을 지정할 수 있게 하고, 디자인 의도를 더 잘 반영하는 방식으로 CAD를 작성할 수 있게 함
          + OpenSCAD가 모든 것을 시작했지만, 언어를 디자인 의도에 더 가깝게 가져오기 위한 혁신이 필요함
     * OpenSCAD 공식 튜토리얼을 통해 발견한 내용
          + 두 번째 큐브가 첫 번째 큐브 위에 정확히 놓이는 예제는 피해야 함
          + 이는 OpenSCAD가 두 큐브가 하나의 객체를 형성하는지 명확하지 않기 때문임
          + 이 문제는 항상 약간의 겹침을 유지하여 쉽게 해결할 수 있음
          + 이는 매개변수 설계의 전체 목적에 반하며, 버그로 기록되어야 함
     * ""manifold"" 렌더러는 이전에 할 수 없었던 묘기를 가능하게 함
          + 예를 들어, PNG에서 ""미국 카운티"" 윤곽을 만들었음
          + usa-counties
          + 모든 기능에 대해 작동하지 않지만, 조사할 가치가 있음
     * BRL-CAD는 고전적인 솔리드 모델링 도구로 언급할 가치가 있음
          + BRL-CAD
     * GUI로 그리기나 도면 작성이 불편함
          + OpenSCAD는 매우 유용함
          + 필요한 것을 손으로 그린 다음, 방정식을 계산하고 모델을 만듦
          + 특정 아이콘의 의미를 파악하거나 가속 명령을 배울 필요가 없음
          + OpenSCAD로 꽤 복잡한 디자인을 만듦
          + CSG는 매우 직관적임
     * OpenSCAD는 3D 디자인을 코딩 워크플로우로 생각하는 데 놀라움
          + OpenSCAD 소개
"
"https://news.hada.io/topic?id=16775","Rust 매크로로 구현된 Lisp","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Rust 매크로로 구현된 Lisp

lisp-in-rs-macros

   Rust의 선언적 매크로로 완전히 작동하는 간단한 렉시컬 스코프 Lisp 인터프리터. lisp! 매크로는 코드에 의해 계산된 Lisp 값을 확장하고 문자열로 변환함. 예를 들어, lisp!(CAR (CONS (QUOTE A) (QUOTE (B))))는 문자열 ""A""로 확장되며, 모든 계산은 rustc가 매크로를 확장할 때 컴파일 시간에 발생함.

  왜 중요한가

   Rust의 매크로로 작성된 Lisp 인터프리터로, 매우 흥미로움. 또한 250줄 미만으로 작성되어 간결함.

  예제

let output = lisp!(CAR (LIST (QUOTE A) (QUOTE B) (QUOTE C)));
assert_eq!(output, ""A"");

lisp!(PROGN
  (DEFINE message (LAMBDA () (QUOTE ""hello there"")))
  (DISPLAY (message))
  (DEFINE NOT (LAMBDA (X) (COND (X NIL) (TRUE TRUE))))
  (DISPLAY (NOT NIL))
); // ""hello there""와 ""TRUE"" 출력

   또 다른 재미있는 예제로는 quine이 있음:
lisp!((LAMBDA (s) (LIST s (LIST (QUOTE QUOTE) s))) (QUOTE (LAMBDA (s) (LIST s (LIST (QUOTE QUOTE) s)))));

   이 코드는 자기 자신을 평가함.

  재귀

   이 Lisp는 현재 명시적인 형태의 재귀를 지원하지 않음. 다행히도, 명시적인 재귀는 필요하지 않으며, 람다만 있으면 됨. 두 리스트를 연결하는 간단한 함수를 작성할 수 있음:
lisp!(PROGN
  (DEFINE append
    (LAMBDA (self X Y)
      (COND
        ((EQ X NIL) Y)
        (TRUE (CONS (CAR X) (self self (CDR X) Y)))
      )))
  (append append (QUOTE (A B)) (QUOTE (C D)))
);

   이 결과는 ""(A B C D)""임. append 함수는 본문에서 append를 언급하지 않지만, 재귀적으로 호출할 수 있음.

  사용 시 주의사항

     * lisp! 매크로는 단일 표현식만 평가함. 여러 표현식을 평가하려면 (PROGN expr1 expr2 expr3)을 사용해야 함.
     * DISPLAY 형식은 단일 표현식을 평가한 후 println!(""{}"", stringify!(...)) 문을 생성하여 토큰의 문자열 버전을 출력함.
     * 빈 리스트는 자체 평가되지 않으며, 빈 리스트 값을 얻으려면 NIL 또는 (QUOTE ())를 사용해야 함.
     * 점 리스트는 지원되지 않으며, cons는 마지막 인수가 리스트라고 가정함.
     * define 형식은 어디서나 사용할 수 있으며 빈 리스트로 평가되지만, 재귀를 지원하지 않음.
     * TRUE는 함수가 아닌 유일한 자체 평가 원자임.

  지원되는 형식

     * DEFINE
     * QUOTE
     * LAMBDA
     * LET
     * PROGN
     * CAR
     * CDR
     * CONS
     * LIST
     * EQ
     * ATOM
     * APPLY

  메타순환 인터프리터

   다음은 Lisp로 작성된 Lisp 인터프리터임:
lisp!(PROGN
  (DEFINE Y2
    (LAMBDA (h)
      ((LAMBDA (x) (h (LAMBDA (a b) ((x x) a b))))
        (LAMBDA (x) (h (LAMBDA (a b) ((x x) a b)))))))
  (DEFINE CADR (LAMBDA (X) (CAR (CDR X))))
  (DEFINE CAAR (LAMBDA (X) (CAR (CAR X))))
  (DEFINE CADAR (LAMBDA (X) (CAR (CDR (CAR X)))))
  (DEFINE CADDR (LAMBDA (X) (CAR (CDR (CDR X)))))
  (DEFINE CADDAR (LAMBDA (X) (CAR (CDR (CDR (CAR X))))))
  (DEFINE CAADAR (LAMBDA (X) (CAR (CAR (CDR (CAR X))))))
  (DEFINE ASSOC (Y2 (LAMBDA (ASSOC) (LAMBDA (X ENV)
    (IF (EQ (CAAR ENV) X) (CADAR ENV) (ASSOC X (CDR ENV))))))
  )
  (DEFINE eval (Y2 (LAMBDA (EVAL) (LAMBDA (E A)
    (COND
      ((ATOM E) (ASSOC E A))
      ((ATOM (CAR E))
        (COND
          ((EQ (CAR E) (QUOTE quote)) (CADR E))
          ((EQ (CAR E) (QUOTE atom)) (ATOM (EVAL (CADR E) A)))
          ((EQ (CAR E) (QUOTE car)) (CAR (EVAL (CADR E) A)))
          ((EQ (CAR E) (QUOTE cdr)) (CDR (EVAL (CADR E) A)))
          ((EQ (CAR E) (QUOTE equal)) (EQ (EVAL (CADR E) A) (EVAL (CADDR E) A)))
          ((EQ (CAR E) (QUOTE cons)) (CONS (EVAL (CADR E) A) (EVAL (CADDR E) A)))
          (TRUE (EVAL (CONS (ASSOC (CAR E) A) (CDR E)) A))
        ))
      ((EQ (CAAR E) (QUOTE lambda)) (EVAL (CADDAR E) (CONS (LIST (CAADAR E) (EVAL (CADR E) A)) A)))
    ))))
  )
  (eval (QUOTE (quote (A))) NIL)
  (eval (QUOTE ((lambda (X) X) (quote a))) NIL)
);

   이 코드는 작동하지만, 인터프리터에서 ((lambda (X) X) (quote a))를 평가하려고 하면 30초 이상 걸리며 백만 개 이상의 토큰을 생성함. 명시적인 y combinator를 사용한 재귀는 여기서 효율적이지 않음. 이를 해결하려면 명시적인 재귀 원시 기능을 추가해야 함. 메타순환 평가기를 작성하는 방법에 대한 훌륭한 설명은 Paul Graham의 ""Roots of Lisp""를 참조.

  기술적 설명

   EXPLANATION.md를 참조. 매크로는 SECD 머신을 시뮬레이션하며, 이는 람다 계산식을 평가하기 위한 간단한 스택 기반 추상 머신임.

  훌륭한 자료

     * Peter Henderson의 ""Functional Programming: Application and Implementation""
     * Mads Sig Ager 등의 ""A functional correspondence between evaluators and abstract machines."" (2003)
     * Simon Peyton Jones의 ""The Implementation of Functional Programming Languages""
     * Matt Might의 블로그 (https://matt.might.net)에서 Lisp에 관한 모든 글

  TODO

     * letrec 추가
     * 재귀적 정의 추가

GN⁺의 정리

     * Rust 매크로로 작성된 Lisp 인터프리터는 매우 흥미로우며, 간결한 코드로 강력한 기능을 제공함.
     * 재귀를 명시적으로 지원하지 않지만, 람다를 통해 재귀를 구현할 수 있음.
     * 메타순환 인터프리터는 효율적이지 않으므로, 명시적인 재귀 원시 기능을 추가하는 것이 필요함.
     * Paul Graham의 ""Roots of Lisp""는 메타순환 평가기를 이해하는 데 훌륭한 자료임.
     * 유사한 기능을 제공하는 다른 프로젝트로는 Scheme 인터프리터나 다른 Lisp 변형을 추천함.
"
"https://news.hada.io/topic?id=16693","Reflection 70B의 공식 API는 클로드 Sonnet 3.5의 Wrapper 였음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Reflection 70B의 공식 API는 클로드 Sonnet 3.5의 Wrapper 였음

     * 며칠 전 누군가 놀라운 벤치마크 결과와 함께 Llama 3.1 70B 미세 조정 버전이라고 주장하는 Reflection 70B를 발표
          + Weight 릴리스는 엉망이었음. 3.1용 파인튜닝이라고 주장하며 3.0용 Lora를 출시
          + 릴리스된 가중치로 실행했을 때 처음에는 평가가 기대에 미치지 못함
          + 호스팅된 엔드포인트를 사용하면 평가가 SOTA 정도로 수행되기 시작
     * 사람들이 엔드포인트에서 어떤 모델이 실행되고 있는지 확인할 수 있는 영리한 방법을 찾아냄
          + 모델별 토큰 및 모델별 특정한 검열 사용
          + 찾아낸 바에 의하면 그들의 파인튜닝한 자체 모델이 아니라 Sonnet 3.5를 감싼거라고 주장
          + Sonnet인 것으로 포착된게 트위터에 게시된 후 내용이 바뀜
          + 그러자 다른 사용자가 비슷한 방법을 사용하여 호스팅 모델을 GPT 4o로 바꿨다는 증거를 찾았다고 주장
     * 결과가 섞여있고, 일관되지 않아서 무엇이 진실이고 무엇이 거짓인지 명확하지 않음
     * 원 제작자의 릴리즈 트윗 : https://twitter.com/mattshumer_/status/1831767014341538166
     * 프롬프트를 통해서 계속 뭔가 바뀌고 있다는 걸 트래킹한 트윗 타래 : https://x.com/RealJosephus/status/1832904398831280448

        Hacker News 의견

     * Llama 3.1 70B 모델의 성능이 뛰어나다고 발표되었으나, 여러 문제가 발생함
          + Lora for Llama 3.0의 가중치가 잘못 배포됨
          + 초기 평가가 기대에 미치지 못함
          + 호스팅된 엔드포인트에서 SOTA 성능을 보임
          + 모델이 실제로 어떤 모델인지 확인하기 위해 다양한 방법이 사용됨
          + Sonnet 3.5 모델을 사용한 것으로 밝혀짐
          + 이후 GPT 4o 모델로 전환한 증거가 발견됨
          + 혼란과 시간 낭비가 발생함
     * 이 게시물이 더 많은 주목을 받아야 한다고 주장함
          + AI 분야에서 큰 인물로 알려진 사람의 평판이 손상됨
          + ""claude"" 필터링, 태그 오류, 모델이 claude라고 인정하는 증거 등이 있음
          + Llama 버전에서 지원하지 않는 아랍어로 질문에 답변하는 모델의 행동이 가장 결정적임
     * 사람들은 명성을 위해 많은 일을 함, Schumer의 최종 목표가 무엇인지 궁금함
     * 저자의 원래 트윗 (곧 삭제될 예정)
세계 최고의 오픈 소스 모델인 Reflection 70B를 발표하게 되어 기쁩니다.
Reflection-Tuning을 사용하여 훈련되었으며, LLM이 스스로의 실수를 수정할 수 있게 했어요.
다음 주에 405B가 출시될 예정이며, 세계 최고의 모델이 될 것으로 기대합니다.

     * ""odd""와 운이 맞고, 세 번째 글자로 시작하는 이름을 가진 사람 (C*** Debussy)이라는 농담이 있음
     * 신뢰할 수 있는 출처에서 ""확인""을 받았는지 궁금함, Reddit 게시물, 트위터 스레드, 출처가 불분명한 스크린샷을 신뢰하기 어려움
"
"https://news.hada.io/topic?id=16774","미국 대학들이 부채(debt) 공장으로 변한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국 대학들이 부채(debt) 공장으로 변한 이유

미국 대학의 부채 공장화: 기만의 정도

     * 문제의 시작
          + 미국의 학생 대출 시스템은 파산 시 대출을 면제받지 못하게 하여 수조 달러의 부채 거품을 만들었음.
          + 이 시스템은 잘못된 인센티브, 규제 포획, 의도치 않은 결과로 인해 복잡함.
          + 해결책은 간단하지만, 실행은 어려움. 대출 면제, 학위 가치에 따른 대출, 기관 책임 부과 등이 필요함.
     * 숫자는 거짓말을 하지 않음
          + 2003년 학생 대출 총액은 약 2,500억 달러였으나 현재는 1.7조 달러를 초과함.
          + 수백만 명의 미국인들이 과도한 부채와 준비되지 않은 상태로 졸업함.
          + 대학들은 비용을 통제하거나 결과를 개선할 인센티브가 없음.
          + 대출 기관은 상환 능력을 고려하지 않고 대출을 계속 발행함.
     * 기관의 보호막
          + 비파산 가능 학생 대출은 교육 기관과 대출 기관에 보호막을 제공함.
          + 대학들은 학위 가치가 떨어져도 학비를 계속 인상할 수 있음.
          + 대출 기관은 파산 시에도 대출금을 회수할 수 있어 위험이 없음.
     * 더 많은 문제
          + 연방 정부는 연금 수령자의 사회 보장 혜택을 압류하여 대출금을 상환함.
          + 2015년 기준, 114,000명의 고령 미국인이 사회 보장 혜택을 압류당함.
          + 60세 이상의 미국인 중 40%가 연방 학생 대출을 상환하지 못하고 있음.
     * 괴물의 탄생
          + 1976년 교육 개정안으로 시작된 비파산 가능 학생 대출은 1998년에 영구적으로 변경됨.
          + 2005년 파산 남용 방지 및 소비자 보호법으로 사립 학생 대출에도 적용됨.
     * 보이지 않는 피해자
          + 학생 대출 부채는 미국의 경쟁력과 위험 감수 능력을 저해함.
          + 부채를 진 졸업생들은 사업을 시작하거나 집을 사거나 미래에 투자할 수 없음.
          + 경제 전체가 타격을 입음.
     * 고착된 권력
          + 대학, 대출 기관, 정치인 간의 강력한 동맹이 형성됨.
          + 이들은 시스템을 변경할 인센티브가 없음.
     * 해결책
          + 학생 대출을 다시 파산 가능하게 만들기.
          + 학위 가치에 따른 대출 조건 설정.
          + 교육 기관에 위험 분담 요구.
     * 갈림길
          + 현재의 길을 계속 가면 영구적인 채무자 계층이 형성됨.
          + 지속 가능하고 공정한 고등 교육 시스템을 만들기 위한 어려운 선택이 필요함.

GN⁺의 정리

     * 미국의 학생 대출 시스템은 잘못된 인센티브와 규제 포획으로 인해 복잡한 문제를 안고 있음.
     * 대학과 대출 기관은 현재 시스템에서 이익을 보고 있어 변화를 원하지 않음.
     * 해결책은 간단하지만, 실행은 어려움. 대출 면제, 학위 가치에 따른 대출, 기관 책임 부과 등이 필요함.
     * 이 문제는 개인뿐만 아니라 경제 전체에 영향을 미치며, 지속 가능한 해결책이 필요함.

        Hacker News 의견

     * 대학 학위가 필요 없는 좋은 직업들이 주주 이익을 위해 해외로 이전됨
     * 1980년에서 1995년 사이에 태어난 사람들에게 고등학교 이후의 교육이 없으면 글로벌 시장에서 경쟁할 수 없다고 말함
     * 공공 자금이 거의 기준 없이 대학 교육을 위한 보조금과 대출 프로그램에 사용됨
          + 대출을 파산으로 탕감할 수 없고, 재협상이 매우 어려움
          + 대통령이 대출을 탕감할 수 있는 재량권이 없음
     * 영리 기업들이 학생들을 착취하는 문제를 언급하지 않음
          + 교수들이 새로운 교과서 판을 매년 지정하여 학생들이 이전 판을 사용할 수 없게 만듦
          + 온라인 작업을 위해 1회용 코드를 포함한 책을 판매하는 것은 사기임
     * 수십억 달러 산업을 제거할 의지가 필요함
          + 정부가 문제를 해결할 수 없고, 시장은 문제를 악화시킴
     * 대학이 일반 학생에게 큰 가치를 제공하지 않음
          + 대부분의 학습은 혼자서 책을 읽으며 이루어짐
          + 대학은 학생들에게 읽어야 할 내용을 알려주고, 튜터는 약간의 방향을 제시함
          + 시험 기관을 만들어 누구나 시험을 보고 통과하면 졸업장을 받을 수 있게 해야 함
     * 시장 힘이 문제를 해결하지 못하는 이유는 비상환 가능한 학생 대출 때문임
          + 대학은 학생 대출 보장으로 인해 제품을 개선할 필요가 없음
          + 경쟁이 비용을 낮추지 못하는 이유는 불명확함
     * 학생 대출 문제를 해결하기 위한 간단한 해결책 제안
          + 학생 대출 상환을 소득의 일정 비율로 제한
          + 대학이 미지급 대출 잔액을 부담하게 하여 인센티브를 조정
     * 대학이 학생 대출 책임을 일부 부담해야 한다는 의견
          + 대학이 파산하고 학생들이 파산 신청을 할 수 있게 해야 함
          + 연방 학생 대출은 파산으로 탕감할 수 없고, 은퇴 후에도 사회 보장 소득이 압류될 수 있음
     * 학생 대출 문제의 해결책에 대한 의견
          + 학생 대출을 상환 불가능하게 만드는 것은 경제적으로 비합리적임
          + 대학이 대출의 공동 보증인이 되게 하는 것은 복잡한 관계를 초래함
          + 학생들이 학비를 고려하여 대학을 선택해야 함
     * 산업이 사용자와 입법자를 포획하면 가격이 급등함
          + 정치적 해결책은 시스템에 큰 스트레스가 발생하지 않는 한 어려움
     * 대학을 직업 훈련 기관으로 보는 것은 잘못된 접근임
          + 대학은 연구자를 훈련하고 고용하는 기관으로 존재해야 함
"
"https://news.hada.io/topic?id=16689","알렉스 모건의 마지막 프로 경기에서 그녀를 언급하지 않은 ESPN AI 요약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               알렉스 모건의 마지막 프로 경기에서 그녀를 언급하지 않은 ESPN AI 요약

  ESPN AI 요약에서 알렉스 모건의 마지막 프로 경기 언급 누락

     * 업데이트: ESPN은 9월 9일 월요일 오전 8시 59분 ET에 알렉스 모건에 대한 언급을 포함하도록 경기 요약을 업데이트함
     * 원본: 미국 축구 전설 알렉스 모건은 일요일에 그녀의 마지막 프로 경기를 치렀으며, 그녀의 팀 샌디에이고 웨이브는 노스캐롤라이나 커리지에 4-1로 패배함
     * 경기 중 모건은 미드필드에서 축구화를 벗고 눈물로 가득 찬 채로 관중들에게 손을 흔들며 작별 인사를 함
     * 경기 후 15분 동안 뛰고 페널티킥을 시도한 모건은 관중들에게 감사 인사를 전하고 작별 인사를 함
     * ESPN의 생성 AI 서비스는 이번 주부터 내셔널 여자 축구 리그(NWSL)와 프리미어 라크로스 리그(PLL) 경기 요약을 제공하기 시작함
     * AI가 작성한 요약에는 경기 결과와 골을 넣은 선수들에 대한 정보가 포함되어 있으나, 모건의 마지막 경기라는 중요한 사실은 언급되지 않음
     * 요약에는 ""[샌디에이고의 케네디] 웨슬리가 수비와 공격에서 뛰어난 활약을 보였다""고 언급됨
     * ESPN은 AI가 생성한 요약을 인간 편집자가 검토하여 품질과 정확성을 보장한다고 발표했으나, 모건의 부재를 놓친 것으로 보임
     * ESPN은 모건과 그 감동적인 밤에 대한 별도의 기사를 게시했으나, AI가 생성한 요약의 사이드 메뉴에 위치해 있어 쉽게 놓칠 수 있음
     * ESPN은 ""AI가 생성한 요약은 이전에 제공되지 않았던 콘텐츠를 팬들에게 제공하여 저평가된 스포츠의 보도를 강화하는 것을 목표로 한다""고 밝힘

  GN⁺의 정리

     * 이 기사는 AI가 생성한 콘텐츠가 인간 작가의 360도 관점을 대체할 수 없음을 보여줌
     * 알렉스 모건의 마지막 경기라는 중요한 순간을 놓친 AI 요약은 팬들에게 충분한 가치를 제공하지 못함
     * AI가 생성한 콘텐츠의 한계를 인식하고, 인간 편집자의 역할이 여전히 중요함을 강조함
     * 유사한 기능을 가진 프로젝트로는 Google의 AI 뉴스 요약 서비스와 Microsoft의 AI 기반 뉴스 요약 서비스가 있음

        Hacker News 의견

     * AI 생성 콘텐츠에 대한 비판으로 사용되는 것이 재미있음
          + 웹 기반 스포츠 콘텐츠 회사들은 최소 10년 전부터 자동으로 콘텐츠를 생성해 왔음
          + 주로 검색 순위를 위해 사용되었음
          + ESPN이 콘텐츠를 수동으로 업데이트하지 않은 것이 문제임
          + ESPN은 항상 양을 질보다 우선시해 왔음
     * ESPN은 경기 전, 중, 후에 해설자를 고용하여 중요한 이벤트를 설명함
          + 해설 내용을 작가봇에 제공하지 않는 것이 의문임
          + 이는 쉽게 해결할 수 있는 문제임
     * ""Alex Morgan의 마지막 경기""가 입력에 포함되지 않았다면 AI가 이를 포함할 수 없었을 것임
          + 인턴이 골과 시간만으로 기사를 작성했다면 비슷한 기사가 나왔을 것임
          + 뉴스 조직과 스포츠 사이트가 모든 것을 생성 AI로 대체하는 것은 좋은 변명이 아님
     * ESPN은 AI 생성 요약을 인간 편집자가 검토한다고 했음
          + 인간 편집자가 Morgan의 부재를 놓쳤거나 언급할 가치가 없다고 판단했을 가능성이 있음
          + AI로 기사를 작성하는 이유는 인건비를 줄이기 위함임
          + 전문 편집자가 모든 기사를 철저히 검토하는 것은 불가능할 것임
     * WTT 경기의 AI 요약을 싫어함
          + AI 하이라이트가 포인트 중간에 끊기거나 중요한 이벤트를 놓침
          + 흥미로운 해설이나 축하 장면도 잘림
     * AI 요약이 어떻게 생성되는지 궁금함
          + 전체 경기 비디오 파일을 입력받아 요약을 생성하는지, 아니면 사람이 작성한 골 타임스탬프를 바탕으로 하는지 궁금함
     * Morgan의 부재를 언급하지 않은 것에 대해 비판적임
          + Mickey Mouse 조직 같음
     * 많은 AI 생성 기사들이 ""맥락 설명"" 단락을 포함함
          + 대부분 너무 일반적이거나 초보적임
          + 독자들이 이미 알고 있는 내용을 설명하는 것은 불필요함
     * LLM의 실패가 아니라 과거의 프라이버시 문제로 인해 이름을 덜 언급하도록 조정된 결과일 가능성이 있음
"
"https://news.hada.io/topic?id=16704","트라이-하드의 좋은 날: 컴퓨팅 1% 절약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        트라이-하드의 좋은 날: 컴퓨팅 1% 절약

  동기

     * Cloudflare의 글로벌 네트워크는 초당 6천만 개 이상의 HTTP 요청을 처리함
     * 새로운 오픈 소스 Rust crate를 사용하여 CPU 사용량을 줄이고 CDN의 처리 능력을 향상시킴
     * Pingora는 Cloudflare의 Rust 기반 프록시 서비스의 핵심이며, 이를 오픈 소스로 공개함
     * Pingora-origin 서비스는 사용자의 요청을 실제 목적지로 전달하는 역할을 함
     * 요청이 Cloudflare를 떠날 때 내부 정보를 제거하는 작업이 필요함
     * 이 작업은 매우 빈번하게 발생하며, CPU 사용량의 1.7%를 차지함

  벤치마킹

     * Criterion Rust crate를 사용하여 함수의 성능을 나노초 단위로 측정함
     * 원래 clear_internal_headers 함수는 평균 3.65µs가 소요됨

  읽기 작업 줄이기

     * 헤더를 제거하는 방향을 반대로 하여 읽기 작업을 줄임
     * 이 변경으로 함수의 실행 시간이 3.65µs에서 1.53µs로 개선됨
     * CPU 사용량을 1.71%에서 0.717%로 줄임

  데이터 구조 검색

     * 해시맵을 사용하여 내부 헤더를 저장하고 검색하는 방법을 시도함
     * 해시맵의 읽기 시간은 키 길이에 비례하여 선형적임
     * 정렬된 집합이나 상태 기계와 같은 다른 데이터 구조를 시도함
     * 정규 표현식을 사용한 구현은 해시맵보다 두 배 느림

  트라이 사용

     * 트라이는 접두사 검색이나 자동 완성 시스템에 사용되는 트리 데이터 구조임
     * 트라이는 문자열이 포함되지 않은 경우를 빠르게 식별할 수 있음
     * 기존 트라이 구현은 해시맵보다 느림
     * Cloudflare는 자체 최적화된 트라이 구현인 trie-hard를 개발함

  Trie Hard

     * trie-hard는 노드 관계를 정수의 비트에 저장하고 메모리를 연속적으로 사용하여 속도를 높임
     * clear_internal_headers 함수의 실행 시간을 0.93µs로 줄임
     * CPU 사용량을 1.71%에서 0.43%로 줄임
     * 실제 프로덕션 환경에서 trie-hard의 성능이 벤치마크와 일치함

  결론

     * 코드의 느린 부분을 파악하고 최적화하는 것이 중요함
     * 작은 최적화가 모여 큰 성능 향상을 가져올 수 있음
     * Cloudflare의 연결 클라우드는 네트워크 보호, 인터넷 애플리케이션 가속, DDoS 공격 방어 등의 기능을 제공함

GN⁺의 정리

     * Cloudflare는 Rust 기반의 새로운 오픈 소스 crate를 통해 CPU 사용량을 줄이고 CDN의 처리 능력을 향상시킴
     * Pingora-origin 서비스의 내부 헤더 제거 작업을 최적화하여 CPU 사용량을 1.28% 줄임
     * trie-hard라는 자체 최적화된 트라이 구현을 개발하여 성능을 크게 개선함
     * 이 기사는 코드 최적화와 데이터 구조 선택의 중요성을 강조하며, 작은 최적화가 큰 성능 향상을 가져올 수 있음을 보여줌
     * 유사한 기능을 가진 프로젝트로는 NGINX, HAProxy 등이 있음

        Hacker News 의견

     * Cloudflare의 내부 헤더 저장 및 제거 방식에 대해 여러 가지 추측을 했음
          + 별도의 사전이나 데이터 구조 사용
          + 모든 내부 메타데이터를 포함하는 단일 헤더
          + 모든 헤더에 접두사를 붙여 내부는 'I', 외부는 'E'로 시작
          + 모든 내부 헤더는 ""CFInt""로 시작
          + 특정 목록의 헤더가 내부 헤더라는 방식은 예상하지 못했음
          + 웹은 이미 모호한 신호와 헤더 명칭으로 가득 차 있음
          + Cloudflare 같은 대규모 회사가 이런 오류가 발생하기 쉬운 메커니즘을 사용하는 것이 이상함
     * UTF-8 문자를 비트마스크로 매핑하는 것에 대해 처음에는 비효율적이라고 생각했음
          + 32비트로 a-z와 여섯 개의 특수 문자를 포함할 수 있음
          + 64비트로 대문자 A-Z와 여섯 개의 특수 문자를 포함할 수 있음
          + HTTP 헤더에 충분한 공간을 제공하며 빠른 매칭 알고리즘을 가능하게 함
          + 이 기술은 Bloom Filter임
          + 1970년대에 자원이 제한된 시기에 개발된 기술이지만 여전히 유용하게 사용되고 있음
     * Cloudflare의 최적화가 가치 있는지에 대한 의문
          + 약 500개의 CPU 코어를 절약했음
          + Cloudflare의 비용을 모르지만, 몇 만 달러 정도의 절약이 예상됨
          + 엔지니어링에 대한 긍정적인 ROI를 기대할 수 있는지 의문
          + 필터를 역직렬화 단계에서 적용하여 헤더가 생성되지 않도록 하는 것이 더 나을 수 있음
     * 데이터 구조 최적화에 대해 잘 알지 못하지만 해시 테이블을 빠르게 무시한 것이 놀라움
          + 정적 테이블을 검색할 때 해시 테이블이 더 빠를 것이라고 생각함
     * fancy한 데이터 구조를 사용하여 제거할 항목을 구성하고 이를 기반으로 헤더 맵에서 제거함
          + ""remove_header"" 호출이 관련된 코드 링크를 제공함
     * 트라이(Trie)를 사용한 블로그 포스트가 드디어 나옴
          + 트라이 관련 문제들이 헛되지 않았음
     * 작은 Bloom Filter를 시도해봤는지 궁금함
          + 헤더 키에 대한 빠른 컨볼루션과 Bloom Filter 테스트가 트라이를 걷는 것을 피할 수 있음
     * 정적 항목 집합을 매칭하는 경우 완벽한 해시 테이블을 시도했는지 궁금함
          + 몇 가지 산술 연산과 단일 문자열 비교로 줄일 수 있음
     * 최적화가 흥미로움
          + 요청 생성 시 헤더를 내부로 태그하는 것이 가능했는지 궁금함
          + 출력 시 필터링이 간단해짐
     * regex crate가 더 잘 작동하지 않은 이유가 궁금함
          + 여러 리터럴 문자열 검색을 Aho-Corasick 자동자로 컴파일해야 함
"
"https://news.hada.io/topic?id=16758","게임 퍼블리셔 Annapurna Interactive 전 직원 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 게임 퍼블리셔 Annapurna Interactive 전 직원 사임

     * Annapurna Interactive의 모든 직원이 회사를 독립적인 법인으로 분리하려 했으나 협상이 결렬된 후 사임함
     * Bloomberg에 따르면, Annapurna Interactive의 게임 부문 직원 25명이 전원 사임함
     * 전 사장 Nathan Gary와 직원들은 ""이 결정은 매우 어려웠으며 가볍게 내린 것이 아니다""라고 Bloomberg에 전함
     * Annapurna 대변인은 기존 게임과 프로젝트는 회사에 남을 것이라고 밝힘
     * Hollywood Reporter에 따르면, Gary와 공동 책임자 Deborah Mars, Nathan Vella가 떠날 예정이었음
     * Annapurna는 게임 부문을 영화, TV, 극장 등 다른 부문과 통합할 계획임
     * Epic Games의 Unreal Engine 게임 사업을 이끌었던 Hector Sanchez가 Annapurna의 인터랙티브 및 뉴미디어 부문 사장으로 임명됨

    Annapurna Pictures의 성과

     * Annapurna Pictures는 영화 부문에서 많은 상을 수상한 바 있음
     * 대표작으로는 Her, American Hustle, Zero Dark Thirty 등이 있음
     * 2020년부터 자체 게임 개발을 시작했으며, 2022년에는 애니메이션 부문을 신설함
     * _Stray_를 기반으로 한 영화도 발표됨
     * 최근에는 Remedy Entertainment와 협력하여 _Control_과 _Alan Wake_의 영화 및 TV 각색을 탐색 중임

    최근 및 향후 게임 출시

     * 올해 Annapurna Interactive는 _Lorelei and the Laser Eyes_와 _Open Roads_를 출시함
     * 향후 출시 예정 게임으로는 Blade Runner 2033: Labyrinth, Ghost Bike, Wanderstop 등이 있음

    GN⁺의 정리

     * Annapurna Interactive의 직원 전원이 사임한 사건은 게임 업계에서 큰 충격을 줌
     * 회사의 게임 부문이 독립적인 법인으로 분리되지 못한 것이 주요 원인임
     * Annapurna Pictures는 영화와 게임 부문에서 모두 성공을 거두고 있으며, 향후 다양한 미디어로 확장할 계획임
     * 이 사건은 게임 개발자와 퍼블리셔 간의 관계 및 회사 구조에 대한 논의를 촉발할 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Devolver Digital과 같은 인디 게임 퍼블리셔가 있음

        Hacker News 의견

     * Annapurna Pictures는 재정 문제를 겪었으나 Annapurna Interactive는 잘 운영되고 있었음
          + Annapurna Pictures는 게임 부서를 통합하려 했음
          + Annapurna Interactive의 직원과 임원들은 독립을 원했음
          + 협상이 결렬되자 대부분의 임원과 직원들이 퇴사했음
     * Annapurna Interactive가 새롭게 재편되길 바라는 의견
          + Outer Wilds, Telling Lies, Twelve Minutes, Edit Finch, Neon White 등 독특한 게임을 출판했음
          + 게임을 개발하지는 않았지만, 재능을 알아보는 눈이 있었음
     * Annapurna Interactive의 성공적인 부서를 분리하지 않으려는 Annapurna의 결정 이해
          + 기존 IP가 유일한 지렛대였고, 직원들은 이를 이미 비용으로 인식했음
          + 다른 이름으로도 같은 일을 할 수 있다는 것을 깨달은 것에 대해 긍정적임
     * IGN의 보고서에 따르면, Annapurna Interactive의 사장 Nathan Gary가 독립을 위해 협상했으나 실패 후 사임했음
          + 약 30명의 직원들이 그와 함께 퇴사했음
     * Annapurna가 유명한 인재를 이렇게 놓친 것에 대한 안타까움
          + 직원들이 잘 되길 바라는 의견
          + 최고의 게임을 제작했으며, 이는 명백함
          + 앞으로의 일은 창의성보다는 이익과 관련된 기업의 문제임
     * Blade Runner 2033 게임을 기대했으나 이번 사건으로 인해 지연될 가능성 있음
     * 회사 창립자가 억만장자의 딸이라는 점에 대한 우려
          + 근본적인 관점과 삶의 경험 차이로 인해 소통이 어려울 것이라는 걱정
     * Sayonara: Wild Hearts를 만든 사람들이라며, 이 게임이 최고의 iPhone 게임이라는 의견
"
"https://news.hada.io/topic?id=16743","최적 성능을 위한 SQLite on Rails의 방법과 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   최적 성능을 위한 SQLite on Rails의 방법과 이유

     * 지난 1년 동안 SQLite를 사용하여 Rails 애플리케이션을 성능 좋고 안정적으로 실행하는 방법을 깊이 이해하려고 노력해왔음
     * 이 과정에서 여러 가지 교훈을 배웠으며, 이를 공유하고자 함
     * 문제의 원인과 해결 방법을 설명할 것임

SQLite와 Rails의 문제점

     * 기본적으로 SQLite를 사용한 Rails 애플리케이션은 바로 사용할 수 있는 상태가 아님
     * 약간의 조정과 미세 조정을 통해 성능 좋고 안정적인 애플리케이션을 만들 수 있음
     * Rails 8에서는 기본 설정만으로도 프로덕션 준비가 완료된 상태가 되도록 목표를 설정함

데모 애플리케이션 ""Lorem News""

     * ""Lorem News""라는 데모 애플리케이션을 사용하여 문제와 해결책을 설명할 것임
     * 이 애플리케이션은 Hacker News의 클론으로, 사용자들이 게시물과 댓글을 작성할 수 있음

성능 테스트

     * oha 로드 테스트 CLI와 애플리케이션 내 벤치마킹 경로를 사용하여 성능을 테스트함
     * 단일 요청과 동시 요청을 통해 성능을 측정함

주요 문제: SQLITE_BUSY 예외

     * SQLite는 한 번에 하나의 쓰기 작업만 허용하기 위해 쓰기 잠금을 사용함
     * 여러 연결이 동시에 쓰기 잠금을 시도하면 SQLITE_BUSY 예외가 발생함
     * 이 문제를 해결하기 위해 즉시 트랜잭션을 사용해야 함

즉시 트랜잭션

     * 기본적으로 SQLite는 지연된 트랜잭션 모드를 사용함
     * 즉시 트랜잭션을 사용하면 쓰기 잠금을 즉시 시도하고 실패 시 재시도할 수 있음
     * sqlite3-ruby gem을 사용하여 기본 트랜잭션 모드를 즉시 모드로 설정할 수 있음

타임아웃 설정

     * database.yml 파일에서 타임아웃 설정을 통해 SQLITE_BUSY 예외를 줄일 수 있음
     * SQLite의 busy_timeout 설정을 사용하여 쓰기 잠금을 재시도할 수 있음

GVL(글로벌 VM 잠금) 문제

     * sqlite3-ruby gem은 SQLite의 C 코드를 호출할 때 GVL을 해제하지 않음
     * 이는 동시성 성능을 저하시킴
     * busy_handler를 사용하여 GVL을 해제하고 성능을 개선할 수 있음

busy_timeout 재구현

     * busy_timeout을 재구현하여 모든 쿼리가 동일한 빈도로 재시도하도록 설정함
     * 이는 오래된 쿼리가 타임아웃되지 않도록 함

성능 개선

     * 성능을 개선하기 위해 다음과 같은 설정을 적용해야 함
          + 즉시 트랜잭션 사용
          + 타임아웃 설정
          + busy_handler 사용
          + WAL(Write-Ahead Logging) 모드 사용
          + 읽기/쓰기 연결 풀 분리

GN⁺의 정리

     * SQLite를 사용한 Rails 애플리케이션의 성능 문제와 해결책을 다룸
     * 즉시 트랜잭션, 타임아웃 설정, GVL 해제, WAL 모드 사용, 읽기/쓰기 연결 풀 분리 등의 방법을 통해 성능을 개선할 수 있음
     * 이 기사는 SQLite와 Rails를 사용하는 개발자들에게 매우 유용할 것임
     * 유사한 기능을 가진 다른 프로젝트로는 PostgreSQL과 MySQL을 추천함

        Hacker News 의견

     * Oldmoe의 Litestack 프로젝트 소개
          + SQLIte와 Rails를 사용하는 사람들은 Oldmoe의 Litestack 프로젝트를 확인할 필요가 있음
          + Litestack은 SQLite의 강력함을 활용하여 웹 애플리케이션 데이터 인프라를 제공하는 Ruby gem임
          + SQL 데이터베이스, 빠른 캐시, 강력한 작업 큐, 신뢰할 수 있는 메시지 브로커, 전체 텍스트 검색 엔진, 메트릭스 플랫폼을 하나의 패키지로 제공함
          + 현재 프로젝트에서 사용 중이며 매우 만족스러움
     * 상세한 기사 작성에 대한 감사
          + SQLite 웹 애플리케이션을 확장하려는 사람들에게 유용한 정보임
          + Rails를 넘어 다른 프레임워크에서도 적용 가능함
          + 작가에게 감사함
     * SQLite 관련 작업을 하는 사람들에게 추천
          + 사용하는 언어나 프레임워크와 상관없이 SQLite 관련 작업을 하는 사람들은 이 기사를 읽어야 함
          + 몇 년 전에는 직접 해결해야 했던 문제들을 다루고 있음
          + 작가에게 감사함
     * FOSS 분석 시스템에 대한 질문
          + 설치가 쉬운 FOSS 분석 시스템을 만들고 있음
          + 이벤트 데이터를 별도의 SQLite 데이터베이스에 보내어 메인 앱의 데이터와 분리하려고 함
          + 초당 1000개 이상의 이벤트를 처리할 수 있는 확장성에 대한 우려가 있음
          + 서버 메모리에 이벤트를 저장하고 매초 한 번씩 일괄적으로 쓰는 방법을 고려 중임
          + SQLite의 많은 DB 쓰기 문제를 해결할 수 있는 합리적인 방법인지 의견을 구함
     * sqlite3-ruby gem의 GVL 문제
          + sqlite3-ruby gem은 SQLite 호출 시 GVL을 해제하지 않음
          + 이는 대부분 합리적인 결정으로 보임
          + Python 확장에서는 다른 방식으로 설계되었을 가능성이 있음
          + extralite gem은 블로킹 중 GVL을 해제하며, 일반적으로 더 빠르고 동시성 문제도 없음
     * 개인 웹서비스 설정
          + 개인 웹서비스에서 사용하는 몇 가지 설정:
               o PRAGMA journal_mode = WAL
               o PRAGMA busy_timeout = 5000
               o PRAGMA synchronous = NORMAL
               o PRAGMA cache_size = 1000000000
               o PRAGMA foreign_keys = true
               o PRAGMA temp_store = memory
               o BEGIN IMMEDIATE 트랜잭션 사용
     * Django에 대한 질문
          + 이 기사는 훌륭함
          + Django에 대한 유사한 솔루션이 있는지 궁금함
          + ArchiveBox는 Django를 통해 SQLite를 사용하며, Rails에서 언급된 문제를 자주 겪음
          + 앱의 다른 채널을 통해 모든 쓰기를 직렬화하지 않는 SQLite 레이어 솔루션이 있으면 좋겠음
     * busy_timeout 기본 설정에 대한 의문
          + 매우 유익하고 잘 작성된 기사임
          + 기본 busy_timeout 메서드가 오래된 쿼리를 벌주는 지연을 가지는 이유가 궁금함
          + 왜 이것이 기본 설정으로 의미가 있는지 궁금함
     * SQLite와 Rails 사용에 대한 의견
          + SQLite와 Rails를 좋아하지만, 이는 MS Access를 프로덕션 환경에서 사용하는 것과 유사함
     * Rails 통합 문제 해결에 대한 감사
          + 통합 문제를 해결하고 다른 사람들을 도와주는 것을 항상 기쁘게 생각함
          + 이러한 수정 사항이 기본 Rails 설정에 포함되기를 바람
          + Rails 앱을 운영하며, 몇 년 전 Postgres로 전환하여 매우 만족하고 있음
          + 여전히 대안이 있는 것은 좋으며, 다른 작업에 SQLite를 사용함
"
"https://news.hada.io/topic?id=16719","미국 법무부, AdTech 재판 1일차에서 구글이 '독점의 삼박자'를 갖췄다고 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             미국 법무부, AdTech 재판 1일차에서 구글이 '독점의 삼박자'를 갖췄다고 주장

     * 미국 법무부의 구글에 대한 차기 독점 재판이 버지니아에서 시작되었음
          + 이번 재판은 구글의 광고 기술 지배력에 도전하는 것
     * 구글은 이전에 일반 검색과 Android 앱 스토어에서 독점적 지위를 가지고 있다는 것이 입증된 바 있음
     * DOJ 변호사 Julia Tarver Wood는 구글이 ""한 가지 독점도 나쁘지만, 여기서는 독점 3종 세트가 있다""고 말했음
          + DOJ는 구글이 ""광고주, 퍼블리셔, 브로커가 사용하는 광범위한 하이테크 도구를 장악하기 위한 체계적인 캠페인에 참여함으로써"" 광고 기술 분야의 경쟁을 파괴했다고 주장
          + 구글은 광고주와 퍼블리셔 모두에게서 이익을 얻는 반면, ""웹사이트 제작자는 적게 벌고, 광고주는 더 많이 지불한다""고 DOJ는 주장
     * Wood는 구글이 ""광고 경매 규칙을 자신에게 유리하게 조작하기 위해"" 이러한 위치에 의도적으로 자리 잡았다고 말했음
          + ""퍼블리셔들은 당연히 분노했다""고 Wood는 말했으며, ""그들은 아무것도 할 수 없었다는 것을 증거가 보여줄 것""이라고 했음
          + DOJ는 앞으로 몇 주 동안 여러 퍼블리셔를 증인으로 소환하여 피해 사실을 설명할 계획
     * 전문가들은 광고 기술 재판이 구글이 최근 직면한 독점 재판 중 가장 중대한 결과를 초래할 수 있다고 말했음
          + 이는 DOJ가 광고 기술 사건에서 필요한 구제책을 매우 명확히 했기 때문임
          + DOJ는 Brinkema 판사에게 구글의 Ad Manager 서비스 모음을 매각하도록 명령해 줄 것을 요청하고 있음

구글에 대한 잠재적 영향

     * 가장 ""명백한"" 구제책은 구글에게 광고 사업의 일부를 매각하도록 요구하는 것이 될 것이라는 전문가들의 의견
     * 반독점 전문가 Shubha Ghosh - ""이 사건이 구글에 불리하게 돌아간다면 구글을 별도의 검색 및 광고 회사로 분할하는 단계를 마련할 수도 있음""
     * DOJ는 ""구글의 반경쟁적 인수를 되돌리고, 구글이 불법 행위의 결과를 거부하고 향후 경쟁에 대한 추가 피해를 방지하기에 충분한 구제책을 부과하는 것이 중요하다""고 주장

  Hacker News 의견

     * 광고 기술 대기업에 대한 소송이 프라이버시 침해가 아닌 독점적 관행과 출판사에 대한 피해를 기반으로 하고 있음
          + ""미국 전역의 지역 신문이 부족하여 지역 이벤트를 알릴 수 없음""이라는 사회적 부정적 효과를 언급함
          + 광고 사업이 언론을 죽이고 있으며, 이로 인해 뉴스 매체가 조회수를 얻지 못하는 이벤트를 보도하지 않음
     * Google이 광고 기술 시장에 대한 DOJ의 ""좁은 시각""을 비판함
          + 광고 기술이 비즈니스 방식을 공개하지 않아 정부가 상황을 정확히 파악하기 어려움
     * Google이 광고 사업 분할 시 고객에게 부정적 영향을 미칠 것이라고 경고함
          + 독점 분할이 고객에게 유리한 경우가 많았음
     * Apple이 미국 휴대폰의 50% 이상에서 승인된 앱만 설치 가능하게 하고, 모든 수익의 30%를 Apple에 제공해야 함
          + Google에 대한 반독점 조치는 사소한 문제를 다루는 것과 같음
     * DOJ가 Google의 독점이 미국 전역의 신문을 폐쇄했다고 주장함
          + 신문이 폐쇄되는 진짜 이유는 사람들이 신문을 읽지 않기 때문임
     * Google이 이상적인 고용주로서의 명성을 잃고 반독점 재판에 직면함
          + 두 사건이 관련이 있는지 궁금함
     * Google이 광고 기술 도구를 장악하려는 체계적인 캠페인을 벌였다는 주장이 있음
          + Google이 광고 교환 시장에서 독점적 위치를 유지하기 위해 막대한 돈을 사용함
     * Facebook이 Google과의 협정을 통해 광고 입찰에서 유리한 조건을 얻음
          + Google이 ""Project Bernanke""를 통해 광고주에게 유리한 조건을 제공하여 2억 3천만 달러를 벌어들임
     * Google이 여러 제품과 위치에서 분할되면 좋은 결과가 나올 수 있음
          + EU와 아시아 시장 규제 기관이 개입하면 더 나은 결과를 기대할 수 있음
     * Google이 이번 사건에서 무사히 벗어나지 못할 것임
          + 브라우저 시장에서 경쟁이 거의 없으며, Google이 Firefox를 지원하여 독점으로 불리는 것을 피하려 함
     * 제3자 쿠키가 여전히 존재하는 이유는 Google이 이를 제거하면 DOJ의 반독점 무기가 될 것을 우려했기 때문임
          + Google이 익명화된 타겟팅 데이터를 중개하려 했으나, 이는 다른 광고 생태계 플레이어를 죽이고 독점적 권력을 부여했을 것임
     * DOJ 소송이 Google의 독점이 출판사 수익을 줄이고 광고주 비용을 증가시킨다고 주장함
          + 출판사와 광고주가 Google을 우회하려는 동기가 있음
          + Google이 가장 많은 수익을 제공하기 때문에 출판사와 광고주가 Google을 사용함
     * DoubleClick 쿠키가 널리 배포되어 Google이 사용자 행동 특성을 파악하는 데 유리함
          + 쿠키가 반경쟁적일 수 있음
          + 기사에서 ""쿠키""가 언급되지 않음
          + 사건의 결과를 지켜봐야 함

   DOJ 가 설명없이 등장해서 뭔가 싶었는대 미국 법무부의 약자내요
"
"https://news.hada.io/topic?id=16683","QUIC은 빠른 인터넷에서 충분히 빠르지 않다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       QUIC은 빠른 인터넷에서 충분히 빠르지 않다

     * QUIC은 웹 애플리케이션 성능 향상에 획기적인 변화를 가져올 것으로 기대되는 프로토콜이지만, 성능이 기대에 못 미침
     * 이 논문에서는 고속 네트워크에서 QUIC의 성능을 체계적으로 분석함

초록

     * 고속 인터넷에서 UDP+QUIC+HTTP/3 스택은 TCP+TLS+HTTP/2에 비해 최대 45.2%의 데이터 전송률 감소를 보임
     * QUIC과 HTTP/2 간 성능 격차는 기본 대역폭이 증가할수록 커짐
     * 이 문제는 경량 데이터 전송 클라이언트와 주요 웹 브라우저(Chrome, Edge, Firefox, Opera), 다양한 호스트(데스크톱, 모바일), 다양한 네트워크(유선 브로드밴드, 셀룰러)에서 관찰됨
     * 파일 전송뿐 아니라 비디오 스트리밍(최대 9.8% 비디오 비트레이트 감소), 웹 브라우징 등 다양한 애플리케이션에 영향을 미침
     * 엄격한 패킷 추적 분석과 커널 및 사용자 공간 프로파일링을 통해 근본 원인을 확인함
     * 특히 과도한 데이터 패킷과 QUIC의 사용자 공간 ACK로 인한 수신자 측 처리 오버헤드가 높음
     * 관찰된 성능 문제를 완화하기 위한 구체적인 권장 사항을 제시함

성능 저하의 근본 원인

     * 수신자 측 커널 수준에서 과도한 패킷 처리 오버헤드 발생
          + QUIC은 UDP GRO(Generic Receive Offload)를 사용하지 않아 TCP에 비해 훨씬 더 많은 패킷을 처리해야 함
          + 이는 netif_receive_skb 함수 호출 횟수가 QUIC에서 훨씬 많은 것으로 확인됨
     * 사용자 공간에서도 QUIC의 과도한 패킷 처리 오버헤드 발생
          + 커널에서 전달된 많은 수의 패킷들을 처리하는 데 오버헤드가 큼
          + QUIC ACK를 사용자 공간에서 생성하는 것도 오버헤드의 원인

성능 저하 완화를 위한 제안

     * 수신자 측에서 UDP GRO 도입
          + UDP 스택에서 처리해야 할 패킷 수를 줄여 커널 및 사용자 공간 오버헤드 감소
          + 그러나 다양한 클라이언트 환경에서 UDP GRO 배포하는 것은 쉽지 않을 수 있음
     * GSO/GRO와 같은 오프로딩 솔루션을 QUIC에 맞게 개선
          + 서로 다른 크기의 UDP 패킷 트레인도 오프로딩할 수 있도록 지원
          + GSO에 적절한 페이싱 설정 추가하여 네트워크 혼잡 방지
     * 수신자 측 QUIC 로직 최적화
          + QUIC ACK 전송을 지연시켜 응답 생성 오버헤드 감소
          + recvmmsg를 사용하여 한 번에 여러 UDP 패킷을 읽어 성능 개선
     * 멀티 스레드 다운로드 사용
          + 대용량 파일의 경우 여러 CPU 코어를 활용한 멀티 스레드 다운로드로 수신 성능 향상 가능
          + 그러나 공정성 문제 고려해야 함

        Hacker News 의견

     * syscall 인터페이스가 복잡하고, 기본 API가 일반 크기의 패킷(약 1500 바이트)에 비해 너무 느림
          + GSO가 도움이 되지만 API가 복잡하고 최근에도 버그가 많음
     * Spectre 완화로 인해 syscall 비용이 더 높아졌음
          + BSD 소켓/ POSIX API를 대체할 필요가 있음
          + uring은 복잡하지만, 중간 수준의 API가 필요함
     * 시스템 UDP 버퍼가 기본적으로 너무 작음
          + 전문가들만 사용하고 있으며, 전문가들은 설정을 조정함
     * UDP 스택 최적화가 가능함
          + GSO가 이를 보여주지만, GSO 자체가 비싸고 복잡함
     * 현재 사용 가능한 몇 가지 최적화는 저/중간 규모에서만 작동함
          + 예를 들어, 경로 조회를 피하기 위해 연결 바인딩
     * GSO를 구현하면 성능이 크게 향상될 수 있음
          + 플랫폼 측 버퍼 크기를 늘릴 필요가 있을 것임
     * QUIC 초기에는 UDP 스택이 TCP 스택보다 최적화가 덜 되어 있었음
          + UDP 일반 수신 오프로드 같은 최적화가 필요함
     * HTTP/2도 서둘러 출시된 것 같음
          + Chrome이 서버 푸시 지원을 제거함
          + 더 많은 생각이 필요함
     * QUIC와 HTTP/2는 네트워크 대역폭이 낮을 때 유사한 성능을 보임
          + 대역폭이 500Mbps를 초과하면 QUIC 성능이 떨어짐
          + 이는 주로 로컬 네트워크에서 문제가 됨
     * Google이 사용자에게 처리 부담을 전가하는 경향이 있음
          + 예를 들어, AV1 비디오 코덱은 소비자가 HW 디코딩 기능이 없을 때 배포됨
     * 연구 논문이 arXiv에 있음
          + https://arxiv.org/pdf/2310.09423
     * RTT가 0.23ms인 핑 언급
          + 높은 지연 시간에서도 QUIC가 최고임
     * RFC9000을 읽는 것이 어렵고 복잡함
          + QUIC의 고수준 아이디어는 간단하지만, 사양은 많은 예외 처리를 요구함
     * 연구의 무료 PDF 파일 제공
          + https://arxiv.org/pdf/2310.09423
     * 연결 프로토콜을 사용자 공간으로 이동하는 것이 좋은 계획이 아닐 수 있음
"
"https://news.hada.io/topic?id=16695","FTC, 소프트웨어 업데이트나 성가신 페이월을 통해 하드웨어를 망치는 회사를 단속해달라고 압박 받","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         FTC, 소프트웨어 업데이트나 성가신 페이월을 통해 하드웨어를 망치는 회사를 단속해달라고 압박 받

  소비자 권리 침해하는 소프트웨어 업데이트 및 유료 페이월

     * 소비자들은 더 이상 자신이 구매한 제품을 소유한다고 할 수 없음. 제조사가 폐업하거나, 구매 후 펌웨어 업데이트로 인해 제품이 덜 유용해질 수 있음
     * 최근 소비자 그룹, 활동가, 법률가들이 연합하여 FTC에 스마트 기기 제조사들이 제품 지원을 갑자기 중단하거나 유료 구독 벽 뒤에 기능을 숨기는 행위를 단속해달라고 요청함
     * 17개의 그룹이 FTC에 보낸 서한에서 ‘소프트웨어 연결(software tethering)’과 같은 반소비자 관행을 규제할 것을 촉구함. 소프트웨어 연결이란 펌웨어 업데이트를 통해 하드웨어를 무용지물로 만들거나, 주요 기능을 유료 구독으로 잠그는 행위를 포함함

  소비자 피해 사례 및 FTC의 대응 부족

     * 서한에서는 Peloton이 중고 자전거 사용자에게 이유 없이 $95를 부과한 사례, ‘스마트’ 아기 요람 제조사가 주요 기능을 유료 구독으로 잠근 사례 등 소비자 피해 사례를 언급함
     * 소비자들이 비싼 돈을 주고 산 기기가 예고 없이 기능이 제한되거나 무용지물이 되는 상황이 지속됨. 이로 인해 소비자 권리는 ‘천천히 죽음’을 맞고 있음
     * FTC는 일부 조사에 착수한 적은 있으나, 예를 들어 Google의 Revolv 스마트 홈 하드웨어를 무용지물로 만든 결정에 대한 조사에서는 실질적인 조치나 소비자 보호 개혁을 시행하지 않았음

  FTC의 한계와 필요성

     * FTC는 자금 부족, 인력 부족, 내부 갈등 등으로 자원에 한계가 있으며, 독점화나 프라이버시 침해 같은 더 시급한 문제를 다루기도 어려운 상황
     * 그러나 연방 차원의 지침과 몇 가지 경고만으로도 현재 혼란스러운 ‘스마트’ 하드웨어 시장에 큰 변화를 줄 수 있음

GN⁺의 의견

     * 소비자들이 기술 제품을 구매할 때 실제로 소유권을 갖지 못하는 문제는 스마트 홈, IoT 기기 등이 확대되면서 더욱 심화되고 있음
     * FTC의 개입이 부족하다는 점은 반소비자적인 시장 환경을 조장할 수 있으며, 이로 인해 소비자 신뢰는 더욱 하락할 가능성이 큼
     * 유사한 문제를 방지하기 위해 제품 구매 시 사후 지원과 기능 보장을 명확히 요구하는 소비자 보호 법안의 필요성이 대두됨
     * 유료 구독 벽 뒤에 주요 기능을 숨기는 제품이 증가하고 있어, 소비자 입장에서 해당 제품의 장기적인 유지 비용을 고려하는 것이 중요함
     * 이와 같은 기술 오용은 소비자 권리뿐만 아니라 환경 문제로도 이어질 수 있으며, 불필요한 전자 폐기물을 늘릴 위험이 있음

        Hacker News 의견

     * 모든 소프트웨어가 실행되는 장치는 서드 파티가 소프트웨어를 개발할 수 있도록 부트로더를 잠금 해제할 수 있어야 하고 충분한 하드웨어 문서가 필요함
          + 정부의 강제 규정을 좋아하지 않지만, 이 경우는 예외로 할 수 있음
     * 마지막 클라우드 서버를 종료할 때 하드웨어를 망치는 회사들을 단속해야 함
          + 제조사의 원격 조치로 인해 기기가 벽돌이 되거나 기능을 잃는 것은 변명의 여지가 없음
          + 기기를 구매할 때 제조사와의 지속적인 연결 관계를 원하지 않음
          + 기기가 매일 제조사에게 실행 허가를 요청하는 것을 원하지 않음
          + 계정을 만들거나 제조사의 서버에 로그인하는 것을 원하지 않음
          + 제조사가 내 IP 주소나 집 주소를 아는 것을 원하지 않음
          + 하드웨어 기기는 10,000일째에도 첫날처럼 작동해야 함
          + 회사가 이를 할 수 없다면, 기기를 판매할 수 없어야 함
          + 최소한 기기가 제조사의 서버에 의존한다고 명확히 표시해야 함
     * 다양한 인증을 FTC가 강제하는 것이 필요함
          + 제품에 스티커를 붙일 수 있으며, 비준수 제품에는 불법임
          + 오픈 소스, 클라우드 프리, 펌웨어 롤백, 텔레메트리 프리, E2EE, 10년간 교체 부품 등의 인증이 있을 수 있음
          + 사람마다 중요하게 생각하는 것이 다름
          + FTC가 잘못된 결정을 내려 시장에서 제품이 사라지는 것보다 사용되지 않는 인증이 있는 것이 나음
     * Sony가 업데이트로 공식적으로 지원하던 OtherOS 지원을 비활성화했을 때가 생각남
          + 업데이트 없이 Sony Store에 접근할 수 없고, 최신 Sony PS3를 요구하는 게임이 작동하지 않음
     * 모든 wifi IOT 기기를 제거하려고 노력 중임
          + 몇 년 전 별도의 게스트 네트워크/VLAN을 만들어 5mbit의 대역폭만 사용하게 했음
          + 남은 것은 몇 개의 IP 카메라와 Roborock 진공청소기뿐임
          + 모든 기기가 로컬 wifi에서 100% 작동할 수 있도록 하는 로컬 우선 법이 필요함
     * 장치에서 eFuses를 불법으로 만들어야 함
          + 장치는 더 이상 제조사의 소유가 아니며, 제조사가 물리적으로 손상시킬 권한이 없어야 함
          + eFuses는 펌웨어 다운그레이드 방지, 손상된 암호화 키 블랙리스트, 원격으로 장치 벽돌화 등의 반소비자적 ""기능""을 가능하게 함
     * MS가 Windows 11 24H2에서 혼합 현실 지원을 제거하여 모든 Windows VR 헤드셋을 사용할 수 없게 만듦 (MS의 헤드셋 제외)
     * 이 관행을 중단시키기 위한 법을 최소 20년 동안 요구해 왔음
          + 초기 예로 PS3 Linux 지원과 HP 프린터 모듈의 벽돌화가 있음
          + 많은 클라우드 연결 IOT 기기와 함께 이 상황이 변화해야 함
          + 법은 원격으로 기능을 상실하거나 벽돌화되는 것뿐만 아니라 클라우드 없이 로컬에서 작동할 수 있는 구성 요소에 대해서도 다루어야 함
     * 하드웨어 제조업체가 고객이 제공한 소프트웨어로 하드웨어를 사용할 수 있도록 필요한 모든 정보를 공개하도록 강제해야 함
          + 이는 출시가 필요하지 않음
          + EOL 발표 시, 이전에 사용 가능했던 기능을 제거하는 업데이트 시, 또는 첫 판매 후 2년 후에 공개해야 함
          + 예외는 없어야 함
          + 하드웨어 제공자가 이를 할 수 없다면, 해당 장치와 관련 소프트웨어 구성 요소에 대해 전액 환불을 강제해야 함
"
"https://news.hada.io/topic?id=16760","macOS의 Zero-Click Calendar 초대 취약점 체인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  macOS의 Zero-Click Calendar 초대 취약점 체인

     * macOS Calendar에서 제로 클릭 취약점을 발견했음
     * 공격자가 Calendar 샌드박스 환경 내에서 임의의 파일을 추가하거나 삭제할 수 있음
     * 악성 코드 실행 및 보안 보호 회피와 결합하여 사용자의 민감한 iCloud Photos 데이터를 손상시킬 수 있음
     * Apple은 2022년 10월부터 2023년 9월 사이에 모든 취약점을 수정했음

  취약점 세부 사항

    1단계: Calendar의 임의 파일 쓰기 및 삭제 취약점 (CVE-2022-46723)

     * 공격자가 악성 캘린더 초대를 통해 파일 첨부를 포함할 수 있음
     * 첨부 파일의 파일 이름이 제대로 검증되지 않음
     * ATTACH 섹션에 임의 경로를 설정하여 디렉토리 트래버설 공격을 수행할 수 있음
     * 예: “FILENAME=../../../PoC.txt”
     * 파일이 ~/Library/Calendar/PoC.txt에 추가됨
     * 파일이 이미 존재하면 “PoC.txt-2”로 저장됨
     * 공격자가 보낸 이벤트/첨부 파일이 삭제되면 원래 파일(PoC.txt)이 제거됨
     * 이 취약점은 파일 시스템 내에서 기존 파일을 제거하는 데 사용될 수 있음
     * macOS Montrey 12.5에서 취약점이 존재함. macOS 13.0 beta4에서는 취약하지 않음

    2단계: 임의 파일 쓰기 취약점을 이용한 원격 코드 실행 (RCE) 획득

     * macOS Ventura 출시 직전에 발견됨
     * macOS 버전 업그레이드 프로세스를 이용하여 Calendar의 Open File 기능을 통해 원격 코드 실행을 획득할 수 있음
     * 여러 파일을 감염시켜 RCE 익스플로잇을 트리거함

      주입된 파일 #1: 000Hacked-$RANDOM.calendar

     * Siri가 제안한 캘린더 데이터처럼 보이는 캘린더 데이터 포함
     * 반복 이벤트 및 알림 기능 포함

      주입된 파일 #2: CalendarTruthFileMigrationInProgress 파일

     * 기존 캘린더를 새 데이터베이스로 업그레이드 및 병합

      주입된 파일 #3: CalPoCInit.dmg

     * 캘린더 이벤트에 포함된 알림이 파일을 엶
     * CalPoCInit.dmg는 외부 Samba 서버를 가리키는 참조 포함

      주입된 파일 #4: stage1.url

     * 캘린더 이벤트에 포함된 두 번째 알림이 파일을 엶
     * Samba 마운트에서 애플리케이션을 가리키는 URL 포함

      주입된 파일 #5: stage2.url

     * 캘린더 이벤트에 포함된 세 번째 알림이 파일을 엶
     * 사용자 상호작용 없이 악성 애플리케이션 실행

    3단계: 민감한 Photos 데이터 접근

     * Photos의 구성을 변경하여 iCloud에 저장된 사진에 접근 가능
     * TCC 보호를 우회하여 민감한 사용자 데이터를 유출할 수 있음

  Photos 구성 변경을 통한 iCloud 파일 접근

     * 공격자가 Photos의 System Photo Library를 다른 경로로 설정하는 구성 파일 생성
     * PhotosPoC.sh 실행 시 새로운 구성 파일이 가져와짐
     * 원래 구성은 백업되고 새로운 구성은 /var/tmp/mypictures/에 저장됨
     * 새로운 System Photo Library로 Photos 실행 및 iCloud 동기화 활성화

  전체 체인

     * 여러 단계를 거쳐 macOS의 모든 보안 장애물을 극복해야 함
     * 샌드박스를 우회하고, SMB 트릭을 사용하여 Gatekeeper 완화 조치를 우회함
     * TCC 보호를 우회하여 민감한 데이터에 접근 가능

  타임라인

     * 2022-08-08: Calendar 샌드박스에서 임의 파일 쓰기 및 삭제 보고
     * 2022-10-24: macOS Monterey 12.6.1 및 Ventura 13에서 수정
     * 2022-11-14: PoC 전송, Calendar 취약점을 이용한 임의 코드 실행 방법
     * 2022-12-04: PoC 전송, iCloud 사진 접근 방법
     * 2023-02-20: CVE-2022-46723 크레딧 및 CVE 추가
     * 2023-03-27: macOS Ventura 13.3에서 Gatekeeper 우회 수정
     * 2023-09-26: CVE-2023-40434 Photos 취약점 수정 및 크레딧
     * 2023-10-09: Gatekeeper 우회 및 Photos 취약점 관련 버그 바운티 발표
     * 2023-12-21: CVE-2023-40433 Gatekeeper 우회 크레딧

GN⁺의 정리

     * 이 기사는 macOS Calendar의 제로 클릭 취약점을 다루고 있으며, 이를 통해 공격자가 사용자의 민감한 iCloud Photos 데이터에 접근할 수 있는 방법을 설명함
     * 취약점 체인은 여러 단계를 거쳐 샌드박스를 우회하고, Gatekeeper 및 TCC 보호를 우회하여 원격 코드 실행 및 민감한 데이터 접근을 가능하게 함
     * 이 기사는 보안 연구자 및 macOS 사용자에게 중요한 정보를 제공하며, Apple이 이러한 취약점을 수정했음을 강조함
     * 유사한 기능을 가진 다른 프로젝트로는 Google Calendar와 같은 다른 캘린더 애플리케이션이 있음

        Hacker News 의견

     * 기술 대기업이 상금을 지급하지 않는 경우, 정당한 이유가 있을 가능성이 높음
          + 상금 프로그램은 정당한 제출물에 상금을 지급하도록 설계됨
          + 상금을 지급하지 않는 것은 프로그램의 목표에 반함
          + 프로그램 운영 팀은 더 많은 상금을 지급하도록 유도됨
     * iCloud Photo Library를 사용하지 않지만, 사진 라이브러리 위치가 변경되면 새로운 위치가 보호되지 않는 것이 이상함
          + 시스템 사진 라이브러리를 변경한 후 Photos 앱이 해당 디렉토리를 보호해야 함
          + Sonoma 14.6.1 시스템에서 테스트한 결과, 새로운 사진 라이브러리가 ~ /Pictures에 생성되면 접근이 거부됨
          + 그러나 /tmp에 생성되면 접근이 허용됨
          + Apple이 파일 시스템 어디로든 사진 라이브러리를 이동할 수 있는 기능을 지원하려면 적절한 보호를 적용해야 함
     * 격리 플래그를 조작하는 또 다른 방법이 있음
          + 너무 많은 시스템이 이러한 플래그를 수정할 수 있는 능력을 가짐
     * 첫 번째 단계 자체가 심각한 취약점임
          + 공격자는 ATTACH 섹션에 임의의 경로를 설정하여 디렉토리 트래버설 공격을 수행할 수 있음
     * 공격자는 악성 캘린더 초대를 통해 피해자의 iCloud Photos를 훔칠 수 있음
          + macOS 사용자가 누구에게나 무작위 초대를 보낼 수 있는지 궁금함
     * 공격자가 지정한 파일이 이미 존재하면 ""PoC.txt-2""로 저장됨
          + 나중에 이벤트/첨부 파일이 삭제되면 원래 파일이 제거됨
          + 이 취약점은 파일 시스템에서 기존 파일을 제거하는 데 사용될 수 있음
     * 상금 상태가 마음에 들지 않음
          + 보안 연구자들에게 Apple이나 다른 FAANG 회사에서 이렇게 오래 기다리는 것이 일반적인지 궁금함
     * 메모리 안전이 아닌 보안 취약점이 발생할 때마다 스릴을 느낌
          + Rust에 투자된 시간과 에너지가 경로 트래버설 버그로 낭비될 것이라는 생각이 즐거움
     * Lockdown Mode가 이를 방지하는지 궁금함
     * 꽤 오래된 익스플로잇임
          + 파일 이름에 경로가 포함된 것을 약 10년 전에 읽은 기억이 있음
"
"https://news.hada.io/topic?id=16670","크루즈 선박을 절단해서 길이 늘리기: 돈을 찍어내는 라이선스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   크루즈 선박을 절단해서 길이 늘리기: 돈을 찍어내는 라이선스

     * 크루즈 운영자들이 배를 반으로 잘라 추가 섹션을 삽입하여 길이를 늘리는 것이 매우 수익성이 높음
     * 이 '점보화' 수술은 점점 더 일반화되고 있음

    크루즈 산업의 성장

     * 1990년에는 약 370만 명의 승객이 크루즈를 이용했으나, 2024년에는 약 3천만 명에 이를 것으로 예상됨
     * 크루즈선은 점점 더 커지고 있으며, Royal Caribbean Group의 Icon of the Seas는 1만 명 가까운 사람을 수용할 수 있음

    점보화: 배 길이 늘리기 수술

     * 새로운 배를 건조하는 것보다 기존 배를 확장하는 것이 더 저렴하고 쉬운 방법임
     * 평균 약 8천만 달러의 비용과 몇 달의 서비스 중단만으로 기존 배를 반으로 잘라 새로운 섹션을 삽입할 수 있음
     * 추가 프리미엄 객실을 통해 몇 년 내에 투자 비용을 회수할 수 있음

    배를 늘리는 방법

     * 점보화는 제2차 세계대전 이후 전함을 길게 만들기 위해 처음 사용된 기술임
     * 현재는 특정 조선소에서 24-40m의 섹션을 추가하는 작업을 전문으로 하고 있음
     * 새로운 섹션을 설계하고 제작하는 데 약 1년이 걸리지만, 실제 수술은 몇 주 만에 완료됨

    작업 과정

     * 새로운 섹션을 준비하고, 기존 배를 반으로 자름
     * 레이저 가이드를 사용하여 밀리미터 단위의 정밀도로 절단
     * 절단 후, 두 부분을 분리하고 새로운 섹션을 삽입
     * 모든 케이블, 배관, 환기 채널을 재연결하고 용접 작업을 수행
     * 모든 시스템을 테스트하고, 해상 시험을 통해 새로운 배의 강도와 조작성을 확인

    점보화의 경제적 이점

     * 추가 섹션은 약 8천만 달러의 비용이 들지만, 배의 수익성을 크게 향상시킴
     * 1977년 이후 21개의 크루즈선이 이 방법으로 길어졌으며, Seawise Giant와 같은 역사상 가장 긴 자주 추진 선박도 점보화 기술을 사용함

  GN⁺의 정리

     * 크루즈선의 점보화는 기존 배를 확장하여 수익성을 높이는 경제적인 방법임
     * 이 기술은 제2차 세계대전 이후 전함을 길게 만들기 위해 처음 사용되었으며, 현재는 크루즈선에 널리 적용되고 있음
     * 점보화는 새로운 배를 건조하는 것보다 비용 효율적이며, 몇 달의 서비스 중단만으로 완료될 수 있음
     * 이 기사는 크루즈 산업의 성장과 점보화 기술의 경제적 이점을 잘 설명하고 있음

   와 타임랩스 영상 보니 재미나네요.

        Hacker News 의견

     * 한 영국 구축함의 사례를 떠올리게 함
          + HMS Nubian과 HMS Zulu라는 두 구축함이 손상된 후, 남은 부분을 결합해 HMS Zubian이라는 새로운 함선을 만듦
     * 크루즈 선박에서 3시간 동안 일한 경험
          + 가장 더러운 호텔보다 더 나쁜 환경에서 며칠 동안 갇혀 있는 느낌
          + 수요가 증가하는 이유는 좋은 광고 때문일 것이라고 생각함
     * 크루즈 선박의 환경적 영향
          + 엄청난 양의 연료를 소모하고, 유독한 배기 가스와 하수를 배출함
          + 많은 목적지에서 이러한 문제에 대한 규제가 부족함
          + 비행기를 타고 목적지에 가서 좋은 곳에 머무는 것이 환경에 더 좋고 더 즐거울 수 있음
     * 동독에 살던 큰삼촌의 이야기
          + 28미터 길이의 유람선을 구입했으나, 25미터 이상의 선박을 운전하려면 선장 자격증이 필요했음
          + 선박의 뒤쪽을 3미터 이상 잘라내고, 배선을 고쳐서 사용함
          + 가족과 함께 강을 따라 유람하며 휴가를 보냄
     * 크루즈 선박을 중간에 덧붙여 더 크게 만드는 것이 요점임
          + 반쪽 크루즈 선박을 두 번 파는 것이 아님
          + 스트레치 리무진 비즈니스 모델과 비슷함
     * 항구 도시에서 벙커 연료 배출로 인한 대기 오염 증가
          + EU와 미국 같은 큰 경제 블록이 크루즈 선박의 지속 가능한 운영을 강제해야 함
     * 80년대 리무진 산업을 떠올리게 함
          + 스트레치 리무진이 점점 더 길어짐
     * 선박 섹션을 용접으로 연결하는 것이 놀라움
          + 용접의 등급과 품질이 규제되는지 궁금함
          + 20억 달러의 투자로 선박을 건조하는 것이 미친 짓처럼 보임
          + 그 돈을 회수하는 데 얼마나 걸리는지, 선박이 자금을 회수하기 위해 얼마나 오래 항해해야 하는지 궁금함
     * 기사에 포함된 비디오를 시청함
          + 절단 과정은 보여주지 않지만, 분할 과정은 보여줌
          + 선박의 선체와 측면을 다시 칠하는 작업이 매우 힘들지만 정직한 일처럼 보임
          + 작업의 결과가 시간이 지남에 따라 물질화되는 것을 보는 것이 큰 만족감을 줄 것임
     * 크루즈 회사들이 발명한 개념이 아님
          + 할아버지가 조선소에서 용접사로 일했음
          + 60년 전쯤 바지를 반으로 잘라 새로운 조각을 용접해 길게 만드는 작업을 했다고 들음
"
"https://news.hada.io/topic?id=16688","제임스 얼 존스 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             제임스 얼 존스 사망 소식

  James Earl Jones, Distinguished Actor and Voice of Darth Vader, Dies at 93

     * James Earl Jones는 영화, TV, 연극 배우로서 유명하며, 특히 ""스타워즈"" 시리즈의 다스 베이더 목소리로 잘 알려져 있음
     * 93세의 나이로 뉴욕 Dutchess County 자택에서 사망
     * 어린 시절 심한 말더듬을 극복하고, 1958년 브로드웨이 데뷔 이후 60년 넘게 다양한 역할을 소화하며 활약

    주요 영화 및 TV 출연작

     * 영화: ""Dr. Strangelove"", ""The Man"", ""Conan the Barbarian"", ""Field of Dreams"", ""The Sandlot"", ""Cry, the Beloved Country""
     * TV: ""Roots"", ""The Atlanta Child Murders"", ""L.A. Law"", ""Homicide: Life on the Street"", ""Everwood"", ""The Simpsons"", ""Law & Order"", ""Frasier"", ""House""

    주요 수상 경력

     * Tony Awards: 1969년 ""The Great White Hope"", 1987년 ""Fences""
     * Emmy Awards: 1991년 ""Heat Wave"", ""Gabriel’s Fire""
     * 기타: 2002년 Kennedy Center Honor, 2009년 Screen Actors Guild Life Achievement Award, 2011년 Honorary Oscar, 2017년 Lifetime Achievement Tony Award, 1977년 Grammy Award

    연극 및 셰익스피어 작품

     * 셰익스피어 작품: ""Macbeth"", ""Othello"", ""A Midsummer Night’s Dream""
     * 다른 연극: ""The Great White Hope"", ""On Golden Pond"", ""Cat on a Hot Tin Roof"", ""Driving Miss Daisy""

    다스 베이더 역할

     * 1977년 ""Star Wars: A New Hope""에서 다스 베이더 목소리로 첫 등장
     * 1980년 ""The Empire Strikes Back"", 1983년 ""Return of the Jedi""에서도 목소리 연기
     * 2005년 ""Episode III — Revenge of the Sith"", 2016년 ""Rogue One: A Star Wars Story""에서도 다스 베이더 목소리 연기
     * 2022년 ""Obi-Wan Kenobi"" 시리즈에서는 AI 기술을 통해 목소리 재현

    개인사

     * 1931년 미시시피 Arkabutla에서 태어남
     * 어린 시절 심한 말더듬을 극복하고 고등학교에서 시를 낭독하며 자신감을 얻음
     * 미시간 대학교에서 의학을 공부하다가 연극에 관심을 가짐
     * 첫 무대 역할은 1957년 ""Wedding in Japan""에서 작은 역할
     * 1960년 뉴욕 셰익스피어 페스티벌에 합류하여 다양한 셰익스피어 작품에 출연

  GN⁺의 정리

     * James Earl Jones는 다스 베이더 목소리로 유명하지만, 다양한 영화와 TV, 연극에서 폭넓은 연기를 선보였음
     * 그의 경력은 60년 이상 지속되었으며, 여러 상을 수상하며 연기력을 인정받음
     * 셰익스피어 작품에서의 연기와 다스 베이더 목소리 연기로 많은 사람들에게 기억될 것임
     * 그의 삶과 경력은 많은 후배 배우들에게 영감을 줄 것임

        Hacker News 의견

     * 많은 사람들이 James Earl Jones가 Vader의 목소리를 맡은 것을 이야기하지만, 나는 Strangelove와 Hunt for Red October에서 그를 떠올림
          + 함대에서 많은 시간을 보내지 않았지만, CIC에서 흥미로운 일이 일어날 것이라는 생각이 자주 떠오름
     * James가 Edgar Allan Poe의 The Raven을 Simpsons Treehouse of Horror 에피소드에서 낭독한 것은 세대 간의 아름다운 결합이었음
     * James Earl Jones의 덜 알려진 사실: 그의 영화 데뷔는 Kubrick의 Dr. Strangelove에서 B-52 폭격수 역할이었음
     * Frederick Douglass의 ""The Meaning of July Fourth for the Negro""를 James의 목소리로 듣는 것을 추천함
          + Jones의 목소리와 Douglass의 명확한 웅변이 특별한 조화를 이룸
     * 나에게 그는 항상 Conan the Barbarian의 Thulsa Doom으로 기억될 것임
          + 이 영화를 아직 보지 않았다면 꼭 보길 추천함
     * 그는 많은 훌륭한 작업을 했음
          + 개인적으로 가장 좋아하는 것은 그의 모교인 University of Michigan의 축구 하이프 비디오와 경기장 발표를 나레이션한 것임
          + 항상 독특하고 재미있게 느껴졌음
     * 그의 목소리는 매우 상징적임
          + 많은 상징적인 대사를 그의 목소리로 들을 수 있었음
          + Field of Dreams에서의 연설, Vader의 ""I am your father"", Lion King의 Mufasa의 모든 대사 등
          + 새로운 세대의 배우나 성우 중 그의 목소리에 필적하는 사람을 찾기 어려움
          + 그의 목소리는 단순한 발언을 넘어 최대한의 임팩트를 주었음
     * James Earl Jones의 사망이 Hacker News에 검은 배너를 달 자격이 있는지 궁금함
          + 그는 Hacker News에서 사랑받는 많은 캐릭터에 생명을 불어넣었음
     * 나에게 그는 항상 ""This is CNN""의 목소리로 기억될 것임
     * 80년대 PBS 쇼에서 책을 읽던 그의 희미한 기억이 있음
          + 그의 필모그래피에서 찾을 수 없지만, Fairytale Theater였을 수도 있음
"
"https://news.hada.io/topic?id=16802","Google의 Gemini, AI 개발자들에게 외면 받는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Google의 Gemini, AI 개발자들에게 외면 받는 이유

     * Google의 대화형 AI Gemini는 경쟁사의 기술에 비해 개발자와 기업체에서 사용하기가 너무 어려움
     * Topology의 설립자 Aidan McLaughlin:
          + OpenAI API는 30초 만에 사용 가능했지만, Gemini는 4시간 소요
          + 클라우드 계정 설정, 다수의 구성 필요, 버그로 인한 작업 중단 등이 문제
          + Gemini 모델의 성능이 OpenAI나 Anthropic에 비해 뛰어나지 않음
     * OpenAI는 수백만 명의 유료 고객이 자사 AI 모델을 구매하거나 ChatGPT를 사용함으로써 AI의 성능에 대한 암묵적, 명시적 피드백을 풍부하게 확보하여 개선에 활용
     * Gemini의 사용성이 떨어지면 Google의 클라우드 사업에도 영향을 미칠 수 있음
          + Gemini가 OpenAI만큼 사용되지 않으면 Google의 AI 개발 자체에도 잠재적인 문제가 될 수 있고, Google의 로드맵이 더 험난해질 수 있음
          + 소비자 제품 및 광고 제품용 Gemini 모델 개발에도 영향을 미칠 수 있음

Gemini는 OpenAI 모델에 비해 뒤쳐짐

     * Retool의 설문조사: 응답자의 2.6%만이 Gemini를 주로 사용, OpenAI는 76%
     * Similarweb 데이터: OpenAI의 개발자 페이지는 6~8월 8280만 회 방문했지만 Google은 840만 회에 그쳐서, OpenAI가 Gemini의 10배
     * 개발자들은 주로 Anthropic이나 OpenAI의 모델을 사용
     * Gemini는 많은 정보를 한 번에 처리할 수 있다는 점에서 유용하지만,
          + 개발자들에게는 복잡한 사용 방법과 다양한 옵션으로 인한 혼란을 줌
          + 기존에 사용하던 모델에서 Gemini로 전환하기 어려움
          + 소셜 미디어에서 자주 비판받음

Google의 대응과 일부 긍정적인 반응

     * Google은 개발자 행사를 통해 Gemini를 홍보하고 개발자 경연대회를 개최하는 등 개발자 인식을 바꾸려 노력함
     * Gemini에 대한 비판에 X에서 응답하고 있음
     * 개발자들의 혼란을 줄이기 위해 중복되는 앱 구축 제품의 기능을 통합하는 것도 고려 중임
     * Gemini 2.0 개발 중
     * Google은 Gemini 사용 고객으로 Mercedes-Benz, Goldman Sachs, Uber 등을 언급함
     * Wayfair는 Google 직원들의 도움을 받아 Gemini를 사용해 데이터베이스를 더 쉽게 사용할 수 있는 형식으로 변환하는 프로젝트를 진행 중임

개발자들의 Gemini 외면

     * 대부분의 개발자들은 이미 OpenAI나 Anthropic의 Claude를 사용하고 있어 Gemini로 전환할 필요성을 느끼지 못함
     * 업계 최고 엔지니어들이 이미 다른 모델을 사용하고 있는 상황에서 굳이 새로운 모델을 시도할 필요가 없다고 생각함

GN⁺의 의견

     * Gemini가 OpenAI 모델보다 뛰어난 성능을 보여주지 못하는 한 개발자들이 귀찮은 절차를 거쳐가며 Gemini를 사용할 이유가 없어 보임
     * Google은 개발자 친화적인 API와 문서를 제공하고, Gemini의 장점을 부각시켜야 함. 그렇지 않으면 개발자들의 관심을 끌기 어려울 것임
     * 대화형 AI 시장에서 OpenAI의 선점 효과가 크기 때문에 Google이 단기간에 Gemini의 사용성을 개선하기는 쉽지 않아 보임. 장기적인 관점에서 Gemini를 발전시켜 나가야 함
     * 자연어 처리 분야에서 인정받는 연구 기관인 Google이 상용 서비스에서 OpenAI에 밀리고 있다는 점이 의외임. 연구 성과를 제품에 녹여내는 데 어려움을 겪고 있는 것으로 보임
     * Anthropic의 Claude가 개발자들 사이에서 입소문을 타며 사용량이 급증하고 있음. Google은 Claude의 성공 사례를 분석하고 벤치마킹할 필요가 있음
     * 개발자들이 이미 익숙한 OpenAI나 Anthropic의 모델을 계속 사용하려는 경향이 있으므로, Google은 기존 사용자들의 전환 비용을 최소화하는 전략을 세워야 할 것

   요즘 AI관련해서 찾아보고있는중입니다. 제가 잘 몰라서요. 개발자들에게 외면받는다는 내용은 알겠습니다. 그렇다면 일반유저들에게는 어떻게 대접받고있는지요? (전 개발자가 아니라서요)
"
"https://news.hada.io/topic?id=16672","지하실에서 제공하는 AI – 192GB + 8x RTX 3090","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  지하실에서 제공하는 AI – 192GB + 8x RTX 3090

     * 8개의 RTX 3090 그래픽 카드로 구동되는 전용 LLM 서버. 총 192GB의 VRAM
     * 메타의 Llamma-3.1 405B 실행을 염두에 두고 구축

  배경 이야기

     * 3월에 48GB VRAM으로 LLM 실험을 진행하는 데 어려움을 겪었음
     * 더 많은 VRAM이 필요하다고 느껴 새로운 시스템을 구축하기로 결정
     * CPU/플랫폼 선택, 메모리 속도의 중요성, PCIe 레인의 필요성 등 여러 질문이 생김
     * 여러 시간의 연구 끝에 다음과 같은 플랫폼을 선택함
          + Asrock Rack ROMED8-2T 마더보드 (7x PCIe 4.0x16 슬롯, 128 PCIe 레인)
          + AMD Epyc Milan 7713 CPU (2.00 GHz/3.675GHz 부스트, 64 코어/128 스레드)
          + 512GB DDR4-3200 3DS RDIMM 메모리
          + 1600와트 전원 공급 장치 3개
          + 8x RTX 3090 GPU (4x NVLink, 각 쌍당 112GB/s 데이터 전송 속도)

  블로그 시리즈 예고

     * 이 시스템을 조립하는 과정에서의 도전 과제
          + 금속 프레임에 구멍을 뚫고 30암페어 240볼트 차단기를 추가하는 작업
          + CPU 소켓 핀을 구부리는 일 (집에서 따라하지 말 것)
     * PCIe 라이저의 문제점과 SAS 디바이스 어댑터, 리드라이버, 리타이머의 중요성
     * NVLink 속도, PCIe 레인 대역폭, VRAM 전송 속도, Nvidia의 소프트웨어 수준에서의 P2P 네이티브 PCIe 대역폭 차단
     * TensorRT-LLM, vLLM, Aphrodite Engine과 같은 추론 엔진 벤치마킹
     * 자체 LLM 훈련 및 미세 조정

  결론

     * 기술의 발전을 보며, 2004년에 60GB HDD를 얻었을 때의 흥분을 떠올림
     * 20년 후, 192GB VRAM이 많은 용량이라고 생각했던 시절을 회상할지도 모름
     * 이 프로젝트를 통해 미래의 멋진 기술을 만드는 데 기여하고 싶음

GN⁺의 정리

     * 이 글은 AI 모델을 위한 고성능 서버를 구축하는 과정을 다루고 있음
     * 최신 GPU와 고성능 CPU를 사용하여 LLM 서버를 구축하는 방법을 설명함
     * 기술 발전의 속도와 미래에 대한 기대감을 표현함
     * 비슷한 기능을 가진 프로젝트로는 Nvidia의 DGX 시스템이나 Google의 TPU 등이 있음

   그저 부러울 뿐입니다..

        Hacker News 의견

     * 첫 번째 댓글: 개인 데이터 보호를 위해 자체 서버를 구축함. 최근 플랫폼의 출력 품질 저하로 인해 이 설정에 돈을 쓴 것을 후회하지 않음
          + 텐서 병렬 처리와 배치 추론을 활용하여 멋진 작업을 수행함
          + 개인 데이터를 사용하여 모델을 미세 조정하고 합성 데이터를 생성함
          + 현재 학습 프로젝트로 모델을 처음부터 구축 중이며, 문제를 해결하면 튜토리얼을 작성할 계획임
          + 블로그를 시작했으며, 학습과 발견에 대한 일련의 게시물을 계획 중임
          + 실험하고 싶은 주제나 아이디어가 있으면 공유할 준비가 되어 있음
     * 두 번째 댓글: 192GB VRAM이 많다고 생각했던 시절을 회상할 수도 있을 것 같음
          + NAS용 대용량 HDD 구매가 어려워졌으며, 가격이 많이 올랐음
          + AI에서도 비슷한 일이 일어날 것으로 예상됨
          + 대형 클라우드 업체들은 저렴한 가정용 하드웨어에 관심이 없으며, 클라우드 서비스를 통해 데이터를 채굴하려 함
     * 세 번째 댓글: 8개의 GPU를 사용하여 4K 모니터를 무경계 미니 픽셀 벽으로 변환하는 프로젝트
          + 로컬 비디오 구성 및 AI 생성 배경을 위한 프로젝트임
          + ""The Mandalorian""의 예시를 언급하며, 실시간 포토리얼 배경을 제공함
     * 네 번째 댓글: NVLink의 도움이 얼마나 되는지 궁금함
          + 2개의 3090 리그를 구축했으며, EPYC으로 더 많은 카드를 사용할 수 있는지 궁금함
          + 전체 비용은 약 $3500이며, 이 설정은 $12-15k에 가까울 것으로 예상됨
     * 다섯 번째 댓글: 매우 멋지지만 24/7 생산적으로 활용하지 않으면 비용이 비쌈
     * 여섯 번째 댓글: Tinybox와의 비용 비교를 궁금해함
          + 6개의 4090을 사용하는 경우 $25k, 6개의 7900XTX를 사용하는 경우 $15k
          + 전원 공급 장치, CPU, 저장 장치, 냉각, 조립, 배송 등이 포함된 전체 패키지임
     * 일곱 번째 댓글: 비슷한 설정을 지하실에 가지고 있음
          + 여러 노드로 구성되어 있으며 총 16개의 3090을 사용함
          + 30A 240V 회로를 설치해야 했음
     * 여덟 번째 댓글: 마더보드에 7개의 PCIe 슬롯이 있는데 8개의 GPU를 어떻게 연결하는지 궁금해함
          + 동일한 슬롯에 두 개의 GPU를 사용하여 대역폭을 제한하는지 궁금해함
     * 아홉 번째 댓글: 7개의 PCIe 4.0 x16 슬롯이 있는 경우 8번째 카드를 어떻게 연결하는지 궁금해함
     * 열 번째 댓글: 이 시리즈를 읽는 것을 기대하고 있음
          + 오픈 소스 모델의 비용 성능 비율에 대한 차트/데이터를 찾고 싶어함
          + $/ELO 값(기계 구축 및 운영 비용과 모델의 평균 성능을 나타내는 값)을 찾고 싶어함
"
"https://news.hada.io/topic?id=16744","Reader-LM : HTML을 마크다운으로 변환하는 작은 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Reader-LM : HTML을 마크다운으로 변환하는 작은 언어 모델

     * Jina AI는 2024년 4월에 웹페이지 URL을 LLM에 친화적인 마크다운으로 변환하는 API인 Jina Reader를 출시함
     * Jina Reader는 Chrome 브라우저로 웹페이지 소스를 가져와 Readability 패키지로 메인 콘텐츠를 추출하고, regex와 Turndown 라이브러리를 사용해 정리된 HTML을 마크다운으로 변환함
     * 하지만 Readability 필터가 잘못된 콘텐츠를 제거하거나 Turndown이 특정 HTML을 마크다운으로 변환하는데 어려움을 겪는 등 개선할 점이 있었음
     * 이에 Jina AI는 소형 언어 모델(SLM)을 사용해 HTML을 마크다운으로 end-to-end로 변환하는 방법을 고민하게 됨

Reader-LM의 특징

     * HTML을 마크다운으로 변환하는 작업은 LLM 일반 작업보다 창의적이거나 복잡하지 않고, 주로 입력에서 출력으로 선택적 복사(selective-copy)가 필요함
     * 따라서 더 적은 transformer block이 필요한 shallow한 모델 아키텍처가 가능함
     * 하지만 실제 HTML은 노이즈가 많고 토큰 길이가 길기 때문에, 256K 토큰까지 지원하는 긴 문맥(long-context) 지원이 필요함
     * Jina AI는 이를 위해 ""shallow-but-wide""한 SLM인 reader-lm-0.5b와 reader-lm-1.5b를 발표함. 이들은 494M, 1.54B 개의 파라미터를 가지고 있음

Reader-LM 사용 방법

     * Google Colab에서 reader-lm을 체험해볼 수 있음. Hacker News 웹사이트를 마크다운으로 변환하는 과정을 보여주는 노트북이 제공됨
     * 상용 환경에서는 고성능 GPU를 사용하는 것이 권장됨. T4보다는 RTX 3090/4090 수준이 적합함
     * Reader-LM은 곧 Azure Marketplace와 AWS SageMaker에서도 제공될 예정임
     * 상용 라이선스는 CC BY-NC 4.0이며, 상용 사용에 대해서는 Jina AI에 문의할 것

Reader-LM 벤치마크 결과

     * GPT-4o, Gemini, LLaMA 등 여러 LLM과 비교 평가를 진행함
     * ROUGE-L, Token Error Rate(TER), Word Error Rate(WER) 등의 메트릭을 사용함
     * reader-lm-1.5b가 ROUGE-L 0.72, WER 1.87로 가장 우수한 성능을 보임
     * 실제 출력 마크다운을 시각적으로 검사해보면, reader-lm-1.5b가 헤더 추출, 메인 콘텐츠 추출, 구조 보존, 마크다운 문법 사용 등 모든 측면에서 우수함

Reader-LM 학습 과정

     * Jina Reader API로 HTML과 마크다운 쌍을 만들어 학습 데이터로 사용함. 합성 HTML도 일부 추가함
     * 65M부터 3B 파라미터까지 다양한 크기의 모델을 실험함
     * 2단계 학습 과정을 거침. 1단계에서는 짧고 간단한 HTML을 32K 토큰 시퀀스로 학습하고, 2단계에서는 128K 토큰까지 확장해 학습함
     * 반복과 루프에 빠지는 퇴화(degeneration) 문제를 해결하기 위해 대조 탐색(contrastive search)과 반복 정지 기준을 적용함
     * OOM 문제를 해결하기 위해 chunk-wise model forwarding을 구현하고 데이터 패킹 구현을 개선함
     * 인코더 전용 모델로 문제를 해결하는 것도 시도해봤으나, 토큰 분류 작업으로 취급하기에는 어려움이 있었음

결론

     * Reader-LM은 웹 데이터 추출과 정제를 위해 설계된 새로운 SLM임
     * HTML을 마크다운으로 변환하는 작업은 생각보다 쉽지 않음. position-aware하고 context 기반 추론이 필요하기 때문에 큰 파라미터 크기가 요구됨
     * SLM을 처음부터 학습시키는 것은 매우 어려운 일임. 사전학습된 모델에서 시작하는 것이 훨씬 효율적임
     * 앞으로 문맥 길이 확장, 디코딩 속도 향상, 입력에서의 명령어 지원 등 개선의 여지가 많이 남아있음

   이런거 만들고 싶어요.

   Jina AI Reader - URL을 LLM 친화적인 입력으로 바꿔주는 도구

   이거 잘 쓰고 있는데, 더 작게 만들어서 브라우저에 내장해주면 좋겠다는 생각이 드는군요 ㅎ
"
"https://news.hada.io/topic?id=16674","GPT로 생성된 Google Scholar의 가짜 논문: 주요 특징, 확산, 증거 조작 방지를 위한 시사점  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GPT로 생성된 Google Scholar의 가짜 논문: 주요 특징, 확산, 증거 조작 방지를 위한 시사점

     * Google Scholar에서 일반적으로 사용되는 GPT 모델로 생성된 것으로 보이는 다수의 의심스러운 논문이 쉽게 발견되고 있음
     * 이러한 논문들은 주로 널리 사용되는 범용 AI 애플리케이션, 특히 ChatGPT를 사용해 만들어지며 과학적인 글쓰기를 모방함
     * Google Scholar는 이런 의심스러운 논문을 평판 있고 품질이 관리되는 연구 논문과 같이 나열함
     * Google Scholar에서 발견된 의심스러운 GPT 생성 과학 논문 샘플을 분석한 결과, 많은 논문이 환경, 건강, 컴퓨팅 등 디지털 디스인포메이션에 취약한 응용 분야를 다룸
     * 정치적으로 갈등이 큰 영역에서 악의적인 증거 조작 가능성이 높아지는 것은 점점 더 우려스러운 문제임

발견 사항

  발견 1: 139개의 GPT로 생성된 의심스러운 논문이 Google Scholar 검색 결과에서 일반 논문으로 나열됨. 비색인 저널이 많음

     * 의심스러운 논문 중 대부분은 비색인 저널이나 워킹 페이퍼였지만, 일부는 정평 있는 저널, 출판물, 컨퍼런스, 레포지토리에서도 발견됨
     * 총 139개의 ChatGPT 또는 유사한 LLM 애플리케이션을 기만적으로 사용한 것으로 의심되는 논문을 찾음
     * 이 중 19개는 색인 저널, 89개는 비색인 저널, 19개는 대학 데이터베이스의 학생 논문, 12개는 워킹 페이퍼(대부분 프레프린트 DB)였음
     * 환경과 건강 관련 논문은 샘플의 약 34% 차지하며 이 중 66%가 비색인 저널에 실림

  발견 2: GPT로 생성된 의심스러운 논문은 온라인으로 배포되며 학술 커뮤니케이션 인프라 전반에 퍼져 있고, 여러 사본으로 존재하는 경우가 많음. 실무적 시사점이 있는 응용 분야가 지배적

     * 환경 이슈 관련 27개 논문은 26개 고유 도메인에서 56개 URL로 발견됨
     * 건강 이슈 관련 20개 논문은 20개 고유 도메인에서 46개 URL로 발견됨
     * 식별된 논문 대부분이 여러 사본으로 존재하며 이미 여러 아카이브, 레포지토리, 소셜 미디어로 확산됨
     * 학술 기록에서 이들을 제거하는 것은 어렵거나 불가능할 것임

  발견 3: Google Scholar는 품질 관리된 인용 DB와 그렇지 않은 인용 DB의 결과를 동일한 인터페이스로 제시하므로 GPT로 생성된 의심스러운 논문에 제한 없이 접근할 수 있음

     * 공개 접근 가능한 학술 커뮤니케이션 인프라에서 Google Scholar의 핵심적 위상과 포함 기준의 표준, 투명성, 책무성 부재는 과학에 대한 대중의 신뢰에 심각한 영향을 미칠 수 있음
     * 이는 Google Scholar의 증거 해킹 악용 가능성을 높이고, 가짜 논문을 원 출처에서 철회하거나 삭제하려는 시도에 영향을 미칠 것임
     * 어떤 해결책이라도 학술 커뮤니케이션 인프라 전체와 서로 다른 행위자, 이해관계, 동기의 상호작용을 고려해야 함

GN⁺의 의견

   이 문제는 다음과 같은 이유로 우려스러운 상황임:
    1. GPT 생성 논문이 학술 커뮤니케이션 시스템을 압도하고 과학 기록의 무결성을 위협할 가능성이 있음. 이는 기존의 paper mill 문제를 더욱 악화시킬 것임.
    2. AI로 만들어진 과학적으로 설득력 있어 보이는 내용이 사실은 기만적으로 생성되었을 가능성이 있음. 이는 과학 지식에 대한 대중의 신뢰를 약화시키고 심각한 사회적 위험을 초래할 수 있음.
    3. Google Scholar의 포함 기준이 불투명하고 책무성이 부족함. 이는 표준에 부합하는 인용 DB와 그렇지 않은 DB를 구분 없이 검색 결과로 제시하는 문제와 연결됨.
    4. 가짜 논문이 다양한 플랫폼으로 확산되기 때문에 원본을 철회해도 이를 추적하고 제거하기 어려움. 이는 해당 연구 분야에서 오랫동안 부정적인 영향을 미칠 수 있음.
    5. 건강, 환경 등 사회적으로 민감하고 중요한 주제에서 GPT 생성 논문이 많이 발견됨. 이는 정책 결정에 심각한 혼란을 초래할 수 있으며, 정치적으로 악용될 소지가 있음.

   이 문제에 대응하기 위해서는 기술적, 교육적, 제도적 접근을 동시에 고려해야 함. 예를 들어
     * 학술 검색 엔진에서 peer-review 여부 등으로 필터링할 수 있는 옵션 제공
     * 평가 도구를 학술 검색 엔진의 인터페이스와 크롤러에 통합
     * 상업적 이유가 아닌 공익을 위해 운영되는 무료 학술 검색 엔진 구축
     * 정책 입안자, 과학 커뮤니케이터, 언론인 등을 대상으로 한 교육 이니셔티브

   근본적으로는 학술 출판 시스템의 문제, ""publish or perish"" 풍토, 구글의 독점, 정보 통제를 둘러싼 이념 갈등 등 보다 큰 맥락에서 이 문제를 접근해야 할 것임. 기술적 해법만으로는 부족함.

   alphaXiv - arXiv의 논문에 대해서 공개 토론하기

   위 플랫폼과 이 글이 같이 보이니 뭔가 연결되는 느낌이

        Hacker News 의견

     * APS March Meeting에서 과학 저널 편집자가 LLM 생성 논문보다 LLM 생성 리뷰를 더 걱정함
          + LLM이 긴 논리적 추론보다 내용 요약에 더 능숙함
          + 리뷰는 공개되지 않아 부끄러움을 덜 느끼게 함
     * 저자들의 파이썬 스크립트에 버그가 있을 수 있음
          + 'bib' 키가 API 응답에 없으면 데이터 프레임의 열이 불일치할 수 있음
          + 플래그 배열을 사용해 나쁜 결과를 제거할 수 있지만 코드에 사용되지 않음
     * GPT가 과학 논문을 조작하는 것을 쉽게 만들 수 있지만, 인간도 AI 없이 잘 해왔음
          + 관련된 흥미로운 동영상 링크 공유
     * LLM 관련 논문에서 데이터 수집 방법이 더 정교했으면 좋겠음
          + LLM 사용이 교정 이상으로 과학과 사회에 미치는 영향이 큼
          + 교정의 범위가 사람마다 다름
     * 관련 분야의 전문가들은 가짜 결과를 쉽게 구별할 수 있음
          + 참신함이 없는 내용은 구별이 어려움
          + 연구자의 정직성 문제는 AI 이전부터 존재함
          + 비전문가가 정보의 진위를 구별하기 어려움
     * 이전 논의에서 GPT 사용을 의심한 논문들이 실제로는 OpenAI 이전에 작성된 것임
     * ChatGPT가 진실을 이해하지 못함
          + 데이터 레이크 관련 연구 프로젝트에서 ChatGPT 사용 시 가짜 링크와 마케팅 자료 요약이 많음
     * 기사 이미지가 AI 생성이 아닌 점을 높이 평가함
     * GPT 생성 논문이 영어가 모국어가 아닌 사람들이 영어를 개선하기 위해 작성된 것일 수 있음
     * 어두운 시대에 접어들고 있는 것 같음
"
"https://news.hada.io/topic?id=16766","10년간 드라이브 고장 없는 71 TiB ZFS NAS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     10년간 드라이브 고장 없는 71 TiB ZFS NAS

    10년 동안 드라이브 고장 없는 71 TiB ZFS NAS

     * 하드웨어
          + 24개의 4 TB 드라이브로 구성된 71 TiB ZFS NAS
          + 10년 동안 단 한 번도 드라이브 고장 없음
          + 두 번째 마더보드와 전원 공급 장치 사용 중
     * 드라이브 관리
          + 4 TB HGST 드라이브는 10년 동안 약 6000시간 사용
          + 서버를 사용하지 않을 때는 꺼두는 것이 드라이브 수명 연장에 도움
          + 원격으로 서버를 켜고 끄는 스크립트 사용
          + 에너지 절약과 드라이브 수명 연장을 위해 서버를 기본적으로 꺼둠
     * 마더보드 교체
          + 마더보드 고장으로 인해 몇 년 전에 교체
          + BIOS 진입 불가 및 부팅 실패 등의 문제 발생
          + Ebay에서 동일한 마더보드를 구입하여 문제 해결
     * ZFS
          + ZFS는 여러 운영 체제에서 문제 없이 작동
          + zpool scrub을 몇 번 실행했지만 체크섬 오류 없음
          + ZFS는 데이터 손실 방지에 매우 효과적
     * 소음 관리
          + 기본 팬 속도가 매우 높아 소음이 심함
          + 팬 속도를 온도에 따라 조절하는 스크립트 작성
          + PID 컨트롤러를 사용하여 팬 속도와 소음을 조절
     * 네트워킹
          + 초기에는 기가비트 네트워크 컨트롤러 사용
          + Infiniband 카드로 전환 후 700 MB/s 전송 속도 달성
          + 현재는 10Gbit 이더넷 카드 사용
     * 전원 공급 장치
          + 부팅 시 모든 드라이브가 동시에 스핀업되어 600W 전력 소모
          + 전원 공급 장치가 가끔 부팅 시 전력 차단
     * UPS 사용 중지
          + UPS가 추가 전력을 소모하여 사용 중지
          + 전력 문제로 시스템 손실 위험을 감수
     * 백업
          + 중요한 데이터는 세 번 백업
          + 중요하지 않은 데이터는 백업하지 않음
          + 하드웨어 교체와 ZFS로 데이터 손실 방지
     * 미래 계획
          + 현재로서는 추가 저장소 계획 없음
          + 예비 마더보드, CPU, 메모리, HBA 카드 보유
          + 드라이브 크기 증가로 인해 더 작은 폼 팩터로 전환 가능성 있음
          + 시스템이 고장 나면 저장소 취미를 그만둘 가능성도 있음

    GN⁺의 정리

     * 이 글은 10년 동안 드라이브 고장 없이 운영된 71 TiB ZFS NAS에 대한 경험을 공유함
     * 서버를 사용하지 않을 때 꺼두는 것이 드라이브 수명 연장에 큰 도움이 됨
     * ZFS는 데이터 손실 방지에 매우 효과적이며, 팬 속도 조절을 통해 소음을 줄일 수 있음
     * 네트워크 전송 속도를 높이기 위해 다양한 네트워크 카드를 사용함
     * 백업 전략과 전원 공급 장치 관리에 대한 경험도 공유함

        Hacker News 의견

     * ZFS와 BTRFS에 대한 논의가 주로 이루어지지만, bcachefs를 사용해 본 사람이 있는지 궁금함
          + bcachefs는 리눅스 커널에 포함되어 있으며, 전체 체크섬 기능을 갖추고 있음
          + 파일 시스템의 책임을 진지하게 여기는 저자가 있음
     * 드라이브 회전 일정이 있는지에 대한 질문
          + 24개의 동일 모델 드라이브를 사용 중이며, 동일한 배치에서 나온 것으로 보임
          + 비슷한 마모 상태로 인해 동시에 고장 날 가능성이 높음
          + 신뢰할 수 있는 저장소는 까다로움
     * 드라이브를 계속 켜두는 것이 전원을 주기적으로 끄는 것보다 마모를 줄일 수 있다는 반대 의견을 들음
          + ZFS NAS를 계속 켜두어 정기적으로 데이터를 검사하는 것을 선호함
          + 10년 동안 4개의 드라이브 시스템을 운영하면서 2개의 드라이브가 고장났지만, 이는 엔터프라이즈급 드라이브가 아니었음 (WD Green)
     * 큰 팬은 낮은 RPM에서도 많은 공기를 이동시킬 수 있으며, 에너지 효율이 높음
          + Oxide Computer는 80mm 팬을 사용하여 조용하고 전력 소모가 적다는 점을 강조함
          + 다른 서버에서는 팬 전력 소모가 전체 전력의 25%에 달하지만, 이들은 약 1%만 사용함
     * 영화 컬렉션에 대한 더 많은 이야기를 듣고 싶어함
          + 초기 아이템 선택 방법과 10년 이상 컬렉션에 남아 있는 아이템에 관심이 있음
     * 전력 문제로 시스템을 잃는 위험을 감수함
          + UPS는 전력 불균형으로 인한 드문 고장을 방지함
          + 건설 작업이나 번개로 인해 전력 스파이크가 발생할 수 있음
          + UPS는 서버가 손상되기 전에 스스로 고장나서 보호함
     * 24개의 드라이브는 성능상의 이점을 제공할 수 있지만, 6베이 NAS와 18TB 디스크를 사용하는 것이 전력 사용, 소음, 공간, 비용 및 신뢰성 측면에서 많은 이점을 제공함
     * 드라이브가 작동하는 환경이 수명에 큰 영향을 미침
          + 주거 환경은 데이터 센터나 사무실 공간보다 변동성이 큼
          + 온도와 습도 변동, 먼지의 영향이 큼
          + 깨끗하고 안정적인 환경에서 드라이브 고장이 현저히 줄어듦
     * 드라이브를 끄는 것이 비밀이 아니라 단순히 운이 좋았음
          + 4TB HGST 드라이브를 10년 넘게 24/7로 사용 중이며, 고장이 없음
          + 다른 사람들은 동일한 드라이브로 여러 번 RMA를 경험함
     * 전원 주기 변경이 위험한 드라이브도 있었음
          + 모든 사람에게 항상 좋은 것은 아님
          + 일부 SSD는 주기적으로 전원이 필요함
          + NAS의 듀티 사이클은 이 요구를 충족할 가능성이 높음
          + 전력 비용이 저렴해짐
          + Backblaze가 드라이브의 전원 켜짐/꺼짐 수명 통계를 모델링하는지 궁금함
"
"https://news.hada.io/topic?id=16720","Apple Watch를 전류계로 활용해서 DC 전류 측정하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Apple Watch를 전류계로 활용해서 DC 전류 측정하기

     * Apple Watch Series 5 이상 모델에는 자력계가 포함되어 있어 주변 전류에 의한 자기장을 감지할 수 있음
          + 즉, 시계 주위로 감은 코일 주변에 흐르는 전류의 자기장을 감지하여 전류계로 사용 가능
     * N번 감긴 직경 D의 원형 코일은 B = u0.I/D 자기장을 생성 (u0는 4.π.10^-7로 정의됨)
          + Apple Watch 5의 직경은 약 48mm이므로, 1A의 전류가 5회 감긴 코일에서 약 131uT(1.3 가우스)의 자기장을 생성
     * 자력계가 코일 중심에 위치하지 않아 실제 민감도는 약간 낮음. 100uT/A가 타당한 근사치
     * 보정과 0점 조정 기능, 암페어 단위 표시 등을 하는 앱 개발이 가능하지만, 원시 자력계 데이터를 표시할 수 있는 앱은 거의 모든 앱을 사용할 수 있음
          + 여기선 무료앱 'Sensor-App'으로 원시 자력계 데이터 확인 가능
     * 자력계는 반응 속도가 느려 AC 전류는 감지 불가하고 DC 전류만 측정 가능
     * 5회 감은 코일로 약 10mA(Z방향 1uT)의 전류 변화 식별 가능
     * 지구 자기장은 약 60uT 정도이며, 5회 감은 코일에 1A가 흐르면 Z축으로 약 100uT의 자기장이 추가로 발생
     * 노이즈가 있지만 10mA(1uT) 변화도 식별 가능함

   오 애플워치 전류계 신기하네요
"
"https://news.hada.io/topic?id=16773","테렌스 타오의 O1 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             테렌스 타오의 O1 분석

    mathstodon.xyz 소개

     * mathstodon.xyz는 Mastodon 기반의 탈중앙화된 소셜 네트워크의 일부로, 수학 관련 사용자들을 위한 인스턴스임.
     * 웹 인터페이스에서 LaTeX 렌더링을 지원함.
     * 관리자: Christian Lawson-Perfect (@christianp)
     * 서버 통계: 3K 활성 사용자

    Terence Tao의 GPT-o1 실험

     * GPT-o1: OpenAI의 새로운 GPT 버전으로, LLM 실행 전에 초기 추론 단계를 수행함.
     * 실험 1: 모호한 수학적 질문에 대한 답변에서 Cramer's theorem을 정확히 식별하고 만족스러운 답변을 제공함.
          + 이전 버전에서는 관련 개념을 언급했지만 세부 사항이 잘못되었음.
     * 실험 2: 복잡한 해석학 문제에 대한 도전에서 많은 힌트와 유도로 올바른 해결책을 도출했으나, 주요 개념적 아이디어를 스스로 생성하지 못하고 몇 가지 실수를 함.
          + 이전 모델보다 개선되었으나 여전히 부족함.
          + 향후 몇 번의 개선으로 연구 수준의 작업에 유용할 가능성이 있음.
     * 실험 3: Lean에서 결과를 형식화하는 작업에서 문제를 잘 이해하고 초기 분해를 잘 수행했으나, 최신 Lean 정보 부족으로 코드에 여러 실수가 있었음.
          + Lean과 Mathlib에 특화된 모델이 통합된 IDE에서 매우 유용할 수 있음.

    추가 논의

     * AI 도구의 발전: 다양한 연구 작업을 처리할 수 있는 AI 도구 생태계의 출현을 기대함.
          + 현재는 대형, 범용 LLM이 주목받고 있으나, 특정 응용 프로그램에 맞춘 경량 오픈 소스 모델도 중요한 역할을 할 것으로 예상됨.
     * AI와 대학원생 비교: AI 도구가 대학원생 수준의 기여를 할 수 있는지에 대한 논의.
          + 현재는 대학원생보다 더 많은 노력이 필요하지만, 향후 몇 년 내에 그 비율이 1 이하로 떨어질 가능성이 있음.

    # GN⁺의 정리

     * Terence Tao는 OpenAI의 새로운 GPT-o1 모델을 테스트하여 수학적 문제 해결 능력을 평가함.
     * GPT-o1은 이전 버전보다 개선되었으나 여전히 몇 가지 한계가 있음.
     * 향후 몇 번의 개선으로 연구 수준의 작업에 유용할 가능성이 있음.
     * 다양한 AI 도구가 연구 작업을 지원할 수 있는 생태계의 출현을 기대함.
     * 현재는 대형, 범용 LLM이 주목받고 있으나, 특정 응용 프로그램에 맞춘 경량 오픈 소스 모델도 중요한 역할을 할 것으로 예상됨.

        Hacker News 의견

     * GPT가 Lean(증명 보조 도구)에서 Python처럼 튜닝되면 연구 수준의 수학에 더 유용해질 것이라는 기대가 있음
          + 운영 연구(OR) 관련 분야에서 ChatGPT 4o가 OR 문헌을 충분히 학습하여 유용한 혼합 정수 프로그래밍(MIP) 공식을 제공함
          + 논리 문제를 제시하면 유용한 수학 공식을 생성해 주며, 약간의 수정만 필요함
          + 논리가 실패할 수 있는 약한 공식을 경고해 주어 문제를 피하는 데 도움이 됨
          + 과거에는 주말 내내 머리를 싸매야 했던 문제를 GPT가 해결해 주어 많은 시간을 절약해 줌
          + MIP 최적화를 이해하고 문제를 작은 조각으로 나눌 수 있는 사람에게는 ChatGPT의 월 $20 구독료가 충분히 가치 있음
          + 많은 사람들이 LLM을 잘 활용하지 못하거나 과도한 기대를 가지고 있어 불만을 가짐
          + LLM의 강점을 알고 실수를 체크할 수 있는 사람들은 업무에서 큰 도움을 받음
     * 2019년으로 돌아가서 Alexa와 상호작용하는 경험이 ""평범하지만 완전히 무능하지 않은 대학원생을 조언하는 것과 비슷하다""는 글을 읽는다고 상상해 보라
          + 5년 만에 엄청난 차이가 있음
     * o1 모델이 매우 놀라움
          + Rust 코드 최적화 프로젝트에서 큰 속도 향상을 얻었고, 정확성을 검증함
          + Jensen-Shannon 발산을 기반으로 한 새로운 통계적 의존성 측정을 구상하고 구현함
          + 큰 벡터(예: 15,000 차원 이상)를 다룰 때 빠른 구현을 찾기 어려웠던 정규화 상호 정보량을 빠르게 구현함
          + 처음에는 완벽한 Rust 코드를 제공하지 못했지만, 한 번의 시도로 모든 버그를 수정함
          + GPT-4o는 Rust 타입 오류를 수정하는 데 여러 번 시도가 필요했음
          + Claude3.5 sonnet은 Rust에 대해 매우 무능함
          + 매우 도전적인 작업에서 큰 도움을 줌
          + 성능 최적화와 상대적으로 버그 없는 코드뿐만 아니라 창의적인 문제 해결과 방대한 수학적, 알고리즘적 지식을 결합하여 목표를 이해하고 실현함
     * O1 모델에 대한 경험이 매우 다름
          + 간단한 질문에도 혼란스러워함
     * LLM이 다양한 주제에서 ""평범하지만 완전히 무능하지 않은 대학원생을 조언하는 것과 비슷하다""는 점이 새로움
          + 경험이 많은 분야에서 작은 작업을 처리하는 데 큰 도움이 됨
          + 문제를 작은 조각으로 나누면 solid한 작업을 수행함
          + 개념적 이해가 필요하며, 프롬프트 기술이 중요함
          + 복잡한 주제를 이해하는 데 LLM을 사용하고 전문가의 검증을 통해 개념을 확인함
     * 인간도 ""사고의 연쇄"" 유형의 추론에서 이점을 얻을 수 있음
          + 수학을 공부하는 모든 학생들이 관련 정의와 정보를 기억해야 한다면 능력이 크게 향상될 것임
          + AI는 감정적 장벽이 없어 더 나은 추론을 할 수 있음
     * Terence Tao의 의견에 동의함
          + LLM이 패턴 매칭을 통해 성능을 향상시킬 수 있지만, 진정한 일반화를 만드는 데는 효과적이지 않을 수 있음
          + 새로운 문제나 복잡한 문제에서는 여전히 환각과 잘못된 추론이 발생할 수 있음
     * 수학을 독립적인 취미로 다시 공부하는 것이 기대됨
          + LLM을 통해 복잡한 분석 질문을 해결하는 데 큰 도움을 받음
          + LLM이 개념적 연결을 빠르게 찾아주는 능력에 놀라움
          + 특정 정의를 완화하여 비정향 매니폴드에서 복소수 분석이 가능한지 질문했을 때, LLM이 즉시 Cauchy-Riemann 방정식이 전역적으로 일관성이 없음을 알아냄
          + LLM이 없었다면 이 질문에 답할 수 없었을 것임
     * Terence Tao의 의견이 놀라움
     * Daniel Litt는 o1-preview에 감명받았지만, 흥미로운 수학 문제를 해결하는 데는 아직 운이 좋지 않음
          + 간단한 작업에서는 더 신뢰할 수 있으며, 비수학적 작업에서 시간 절약이 될 수 있음
"
"https://news.hada.io/topic?id=16736","LLM으로 추론하는 법 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LLM으로 추론하는 법 배우기

     * 강화 학습으로 복잡한 추론을 수행하도록 훈련된 새로운 대형 언어 모델 OpenAI o1 발표
     * o1은 사용자에게 응답하기 전에 긴 내부 사고 체인(chain of thought)을 생성할 수 있음
     * o1은 경쟁 프로그래밍 문제(Codeforces)에서 89번째 백분위수, 미국 수학 올림피아드 예선(AIME)에서 미국 상위 500명 학생 중 한 명, 물리학, 생물학, 화학 문제(GPQA) 벤치마크에서 인간 박사 수준의 정확도를 능가
     * 현재 모델들처럼 쉽게 사용할 수 있도록 만드는 작업이 아직 진행 중이지만, 이 모델의 초기 버전인 OpenAI o1-preview를 ChatGPT와 신뢰할 수 있는 API 사용자에게 즉시 사용할 수 있도록 공개

평가

     * GPT-4o보다 o1이 대부분의 추론 중심 작업에서 크게 우수한 성능을 보임
          + 2024 AIME 시험에서 GPT-4o는 문제의 평균 12%(1.8/15)만 해결한 반면, o1은 단일 샘플로 평균 74%(11.1/15), 64개 샘플 간 합의로 83%(12.5/15), 1000개 샘플을 학습된 채점 함수로 재순위화하여 93%(13.9/15) 달성
          + GPQA 다이아몬드에서 o1은 화학, 물리학, 생물학 전문 지식을 테스트하는 인간 전문가의 성능을 능가하여 이 벤치마크에서 처음으로 그렇게 한 모델이 됨
          + o1은 시각 인식 기능을 활성화하면 MMMU에서 78.2%를 기록하여 인간 전문가와 경쟁할 수 있는 첫 번째 모델이 됨
          + MMLU 하위 범주 57개 중 54개에서 GPT-4o보다 우수한 성능 보임

사고의 연쇄(chain of thought)

     * 사람이 어려운 질문에 대답하기 전에 오랫동안 생각할 수 있는 것처럼, o1은 문제를 해결하려고 할 때 사고의 연쇄를 사용
     * 강화 학습을 통해 o1은 사고의 연쇄를 연마하고 사용하는 전략을 개선하는 법을 배움
          + 실수를 인식하고 수정하는 법을 배움
          + 까다로운 단계를 더 간단한 단계로 분해하는 법을 배움
          + 현재 접근 방식이 작동하지 않을 때 다른 접근 방식을 시도하는 법을 배움

코딩

     * 프로그래밍 기술을 더욱 향상시키도록 훈련하여 2024 국제 정보 올림피아드(IOI)에서 213점을 기록하고 49번째 백분위수에 랭크된 모델을 훈련시킴
     * 이 모델은 인간 참가자와 동일한 조건으로 2024 IOI에 참가
     * 6개의 도전적인 알고리즘 문제를 해결하는 데 10시간이 주어졌고 문제당 50번의 제출이 허용됨
     * 10,000개의 제출이 허용되면 모델 성능이 크게 향상됨
          + 테스트 시간 선택 전략 없이도 362.14점을 달성하여 금메달 임계값을 초과
     * Codeforces에서 개최하는 경쟁 프로그래밍 대회를 시뮬레이션하여 이 모델의 코딩 실력을 입증
          + GPT-4o는 ELO 등급 808을 달성하여 인간 경쟁자의 11번째 백분위수에 해당
          + 이 모델은 GPT-4o와 o1을 훨씬 능가하여 ELO 등급 1807을 달성하고 경쟁자의 93%보다 우수한 성능을 보임

안전성

     * 사고의 연쇄 추론은 정렬 및 안전을 위한 새로운 기회를 제공
          + 모델 동작에 대한 정책을 추론 모델의 사고 연쇄에 통합하는 것이 인간의 가치관과 원칙을 견고하게 가르치는 효과적인 방법임을 발견
          + 모델에 안전 규칙과 상황에 맞게 추론하는 방법을 가르침으로써 추론 능력이 모델 견고성에 직접적으로 도움이 된다는 증거를 발견
     * 모델이 합법적인 방식으로 생각하는 것을 관찰할 수 있고, 모델이 안전 규칙에 대해 추론하는 것이 분포 외 시나리오에 더 강력하기 때문에 사고의 연쇄를 사용하는 것이 안전과 정렬에 상당한 진전을 제공한다고 믿음
     * 배포 전에 안전 테스트 및 레드 팀 구성을 실시하여 개선 사항을 강조
          + 사고의 연쇄 추론이 모든 평가에서 역량 향상에 기여한 것으로 나타남

결론

     * o1은 AI 추론에서 최첨단 기술을 크게 발전시킴
     * 반복하면서 이 모델의 개선된 버전을 출시할 계획
     * o1과 그 후속 모델이 과학, 코딩, 수학 및 관련 분야에서 AI의 많은 새로운 사용 사례를 열어줄 것으로 기대
     * 사용자와 API 개발자가 o1이 일상 업무를 어떻게 개선할 수 있는지 발견하기를 기대

GN⁺의 의견

     * OpenAI o1은 복잡한 문제 해결과 추론 능력이 뛰어난 모델로, 인간 수준을 넘어서는 성능을 보여주고 있음. 특히 수학, 과학, 프로그래밍 영역에서 전문가 수준의 실력을 보유하고 있어 관련 분야의 연구나 응용에 큰 도움이 될 것으로 보임
     * 사고의 연쇄(Chain of Thought) 방식을 사용하여 모델의 사고 과정을 관찰하고 이해할 수 있게 한 점이 인상적임. 이는 모델의 동작을 이해하고 제어하는 데 큰 도움이 될 것임. 다만 생성된 사고 과정을 사용자에게 그대로 노출하지 않기로 한 점은 논란의 여지가 있음
     * 모델의 안전성 강화를 위해 정책 규칙을 사고 과정에 통합한 것도 주목할 만한 부분임. 하지만 아직 완벽하지는 않아 보이므로, 지속적인 모니터링과 개선이 필요해 보임
     * o1은 매우 강력한 모델이지만, 완전무결한 것은 아님. 편향성이나 윤리적 이슈 등 AI 모델 전반에 걸친 한계점이 여전히 존재함. 기술적인 발전과 함께 이러한 한계를 극복하기 위한 지속적인 노력이 필요할 것임

        Hacker News 의견

     * 첫 번째 의견
          + 문서에서 얻은 실용적인 정보 요약
               o 접근하려면 5단계 등급에 있어야 하며, 총 $1,000 지불 및 첫 성공적인 결제 후 30일 이상 경과해야 함
               o 가격은 입력 토큰 100만 개당 $15, 출력 토큰 100만 개당 $60
               o 컨텍스트 윈도우는 128k 토큰, 최대 출력은 32,768 토큰
               o 최대 출력 토큰이 두 배인 미니 버전도 있으며, 가격은 입력 토큰 100만 개당 $3, 출력 토큰 100만 개당 $12
               o 블로그 포스트에서 언급된 전문 코딩 버전은 사용 불가
               o 숨겨진 chain of thought reasoning이 유료 출력 토큰으로 청구되는지 불확실함
     * 두 번째 의견
          + 첫 두 정확도 그래프에 구체적인 라벨이 없어 회의적임
               o 80% 정확도 테스트 결과가 얼마나 걸렸는지 알 수 없음
               o 기사 초반의 그래프와 코딩 섹션의 10시간 문제 해결이 연결되는지 불분명함
               o 데이터가 많지만 첫 두 그래프의 데이터가 불투명해 신뢰가 가지 않음
     * 세 번째 의견
          + ""안전성"" 예시가 터무니없음
               o OpenAI가 LLM이 strychnine 합성에 대한 자세한 지침을 제공하는 것은 용납할 수 없다고 하면서도, 이전에 생성된 ""안전하지 않은"" 지침을 게시함
               o LLM이 지식을 공유하는 것에 대한 과도한 안전성 집착
     * 네 번째 의견
          + 모델 성능은 chain of thought에 의해 좌우되지만, 경쟁 우위 등의 이유로 사용자에게 제공되지 않음
               o GPT4 출시 이후 GPT4 출력을 기반으로 비OpenAI 모델을 미세 조정하는 것이 일반적이 됨
               o OpenAI가 chain of thought 응답을 제공하지 않는 이유는 결과 재현을 어렵게 하기 위함
     * 다섯 번째 의견
          + GPT-4 모델을 사용해 주방 팬의 바이너리 블루투스 프로토콜을 역설계하는 데 도움을 받음
               o o1-preview와 o1-mini 모델이 패턴을 이해하고 디코딩함
               o GPT4o 모델은 이전과 동일한 결과를 제공함
               o 놀라운 진전
     * 여섯 번째 의견
          + chain-of-thought prompting과 강화 학습을 통한 chain of thought 전략 학습의 차이를 이해하지 못하는 댓글이 많음
               o 강화 학습을 통해 o1이 chain of thought를 연마하고 전략을 개선함
     * 일곱 번째 의견
          + Cipher 예제의 Chain of Thought를 읽는 것이 흥미로움
               o 논리를 천천히 작성하고 그 위에 추론하는 것이 논리적 사고를 향상시킴
     * 여덟 번째 의견
          + 네덜란드 TV 쇼의 자막 문제를 이해하는 데 o1이 잘 작동함
               o 자막의 움라우트 u가 1/4로 표시되는 이유를 물었을 때, 인코딩 문제를 정확히 설명함
     * 아홉 번째 의견
          + ROT 암호문을 해독하는 데 있어 실망스러운 결과를 얻음
               o 많은 단계가 잘못되었거나 따르지 않음
               o chain of thought 엔진에서 유용성을 얻는 패턴을 찾기 어려움
     * 열 번째 의견
          + 기술적 성과는 크지만, LLM이 여전히 환각에 취약해 도구의 유용성에 대해 걱정됨
               o 전문가가 아닌 사용자가 잘못된 답변에 의존할 위험이 있음
               o 예를 들어, 데이터베이스 조인 순서 최적화 알고리즘을 평가할 때 잘못된 정보를 제공함
"
"https://news.hada.io/topic?id=16767","파인트(Pint) 사이즈 스타트업이 미국 경제를 재편하고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   파인트(Pint) 사이즈 스타트업이 미국 경제를 재편하고 있다

     * 소기업은 일자리 창출의 주역인데, 신규 비즈니스가 일자리를 많이 창출하지 못하고 있음
     * 팬데믹 기간 동안 신생 기업의 평균 직원 수가 급격히 감소하면서 수십 년 간의 하락세가 가속화됨
          + 2020년 3월부터 2021년 3월 사이에 설립된 기업은 평균 4.6명의 직원을 고용했으며, 이는 1년 전 5.3명에 비해 감소한 수치임
          + 2000년대 초반에는 평균 직원 수가 5.8명이었으나 코로나19로 인해 더 급격한 하락세를 보임
     * 코로나19로 인해 새로운 기회가 생겼고, 사람들은 더 많은 시간과 다른 우선순위를 갖게 됨
          + 일부 신생 기업에서는 팬데믹 관련 역풍으로 인해 채용이 느려졌고, 다른 기업에서는 기업가들이 일과 삶의 균형을 위해 작은 규모로 운영하기로 선택함
          + 원격 근무의 증가, 긱 이코노미의 확장, 소프트웨어 도구의 확산으로 기업가들이 더 적은 직원으로 운영할 수 있게 됨
     * Daniel Quinones는 2019년 말 대기업에서 일자리를 잃고 계약직으로 일하기 시작했지만 코로나19로 경제가 폐쇄됨
          + 2020년 6월 마이애미비치에 기반을 둔 Front Page Retail을 설립하여 식음료 제조업체의 머천다이징 및 매장 내 데모를 지원함
          + Quinones는 2021년 말 첫 정규직 직원을 고용했고, 2023년 4월 두 번째 직원을, 이번 달에 두 명을 더 채용할 예정이며, 30명 이상의 독립 계약자와도 협력하고 있음
     * 월스트리트저널의 정부 데이터 분석에 따르면, 소규모 스타트업의 등장은 대부분의 산업과 지역에서 일관되게 나타나며, 농촌과 도시 지역 모두에서 사실임
          + 메릴랜드대학교 경제학과 교수 John Haltiwanger는 ""신생 기업의 수는 창출된 일자리를 보는 것보다 훨씬 더 극적으로 증가했다""며 ""기업 수는 더 많아졌지만 규모는 더 작아졌다""고 말함

계약직 직원 활용

     * Slater McLean과 Jack Paley는 2020년 2월 온라인 소매업체인 Oliver Charles를 설립하고 그해 9월 첫 스웨터를 판매함
          + 이들은 샌프란시스코에 기반을 둔 회사의 유일한 직원이며, 당분간은 그대로 유지할 계획임
          + McLean은 ""현재의 구성으로 규모를 4~5배 키울 수 있으며, 미국 내외에서 몇 명의 계약자를 더 추가할 수 있다""고 말함
          + 처음에는 신입 사원을 고용해 사업을 시작하려 했지만, 트위터(현재 X)와 기업가 네트워크를 통해 전 세계에 분산된 계약직 직원들로 인력을 구성하는 것이 쉽다는 것을 발견함
          + 미국 기반의 프리랜서가 Oliver Charles를 위한 블로그 게시물을 작성하고, 필리핀의 계약자가 다른 업무를 처리하며, 브루클린의 공장에서는 주문이 들어오는 대로 스웨터를 짜고 있음
     * 싱크탱크인 Economic Innovation Group의 前 연구 책임자 Kenan Fikri는 ""기업의 성격이 변하고 있다""며 ""신생 기업은 자체적으로 해야 할 일이 줄어들고 있다""고 말함
     * 2021년에 출시된 피클볼 장비 판매업체인 Nettie는 정규직 직원이 2명이었으나, 한 명은 다른 직장을 구하고 다른 한 명은 일이 잘 풀리지 않자 창업자 Catherine Baxter는 대체하지 않기로 결정함
          + Baxter는 ""계절에 따라 유연하게 대응할 수 있게 해준다""며 ""의도적으로 더 간소하게 유지하여 민첩성을 확보하고 있다""고 말함. 그녀는 약 10명의 정규직 및 파트타임 계약자와 협력하고 있음
     * UCLA 경제학과 교수 Robert Fairlie는 인원을 적게 유지하는 것이 신생 기업이 경기 변동에 적응하기 쉽게 만들 수 있다고 말함
          + Fairlie는 ""중소기업 성장의 일부 단계에서는 상당히 가치 있을 수 있다. 그들은 그런 유연성을 가지고 있다""면서도 ""성장의 일부 단계에서는 그들에게 해를 끼칠 것""이라고 말함
          + 그는 계약직은 정규직 직원에 비해 충성도가 떨어지는 경향이 있으며, 정규직 직원은 회사의 성공에 전념하고 혜택을 받기를 희망할 가능성이 더 높다고 말함

스타트업 부흥

     * 중소기업청에 따르면 중소기업은 1995년부터 2023년까지 순 신규 일자리의 60% 이상을 창출하는 것으로 알려져 왔으며, 그 성장의 대부분은 소수의 기업에서 비롯됨
          + 7월까지의 인구조사국 월간 데이터에 따르면 신규 사업 활동은 팬데믹 초기 정점에서 하락했지만 여전히 높은 수준을 유지하고 있음
          + 이 데이터는 새로운 사업을 시작하는 초기 단계인 고용주 식별 번호에 대한 국세청 신청을 포착함
     * 스탠포드대학교 경제학과 교수 Nicholas Bloom은 ""사업 창출 증가는 환상적인 소식""이라며 ""수십 년 동안 우리는 경제 역동성 저하에 대해 우려해 왔다""고 말함
     * 얼마나 많은 신생 스타트업이 지속적인 사업으로 발전할지, 어떤 기업이 실패할지, 어떤 기업이 주요 고용주가 될지 알기에는 아직 이른 시점임
     * 기업가들의 사업 설립을 지원하는 Northwest Registered Agent에 따르면 2021년 이후 설립된 기업의 약 60%가 1년 후에도 여전히 활동 중이었으며, 45%는 2년 후에도 존속했음
          + 이는 실패율이 높아지던 2014년부터 2018년까지에 비해 개선된 수치임
     * 그러나 이러한 신생 기업 중 많은 수가 어려움을 겪었음
          + 연방준비은행의 설문조사에 따르면 팬데믹 기간 중 설립된 기업들은 전임자들보다 손실을 내며 운영할 가능성이 더 높았음
          + 또한 지난 12개월 동안 매출과 고용이 감소했다고 보고할 가능성도 더 높았음
     * JPMorganChase Institute의 2024년 분석에 따르면 초기 매출이 낮은 기업은 사업 첫 5년 내에 100만 달러 이상의 매출을 달성할 가능성이 낮음
          + 이러한 초기 어려움은 장기적인 성장을 저해할 수 있음

작은 규모로 시작하기

     * Ashlie Ordonez는 2020년 3월 덴버 시내에 왁싱 스튜디오 Bare Bar를 열면서 3명의 직원을 고용했고 향후 3년 동안 11명을 더 추가할 계획이었음
          + 그러나 팬데믹으로 인해 개업이 2개월 연기되었고, 개업 후에도 예약 없이는 손님을 받을 수 없었으며 계획했던 서비스의 절반도 제공할 수 없었음
          + Ordonez는 마케팅을 강화하고 DIY 스파 키트를 만들었음
          + 고객 주도의 크라우드펀딩 캠페인으로 6만 달러를 모금해 18개월 동안 2명의 직원을 유지할 수 있었음
          + 현금 보유액이 줄어들자 월 6,400달러의 임대료를 충당하기 위해 다른 피부미용사에게 부스를 임대했음
          + 임대 계약이 만료되자 Ordonez는 월 임대료가 830달러인 더 작은 공간으로 이전했으며, 자신이 유일한 직원이 되어 더 넓은 범위의 서비스를 제공하고 있음
          + Ordonez는 ""목표는 같지만 규모가 작아졌을 뿐""이라며 ""조금 더 작게 시작하고, 한 번에 한 사람씩 데려오라""고 말함. 그녀는 ""나는 더 똑똑해졌고, 예전보다 더 배고프다""고 말함
     * 인플레이션과 노동력 부족도 성장을 저해했음
     * Michelle Harper는 2021년 1월 캘리포니아주 롱비치에서 애완동물 돌봄 사업인 Little Rascals Dog Walking and Pet Sitting을 열었는데, 이는 그녀가 일하던 사장이 은퇴를 결정할 때까지 일했던 사업을 재개한 것임
          + Harper는 직원이 9명이지만 15명을 고용할 만큼의 일감을 확보할 수 있다고 생각함
          + 그녀는 ""45개의 이력서를 받았지만 적합한 사람을 찾지 못하고 있다""며 ""절반은 면접에 오지 않고, 아무도 다시 연락하지 않는다""고 말함
     * 중소기업 급여 및 복리후생 제공업체인 Gusto에 따르면 2021년에 설립된 기업들은 노동력 부족과 물가 상승으로 인해 첫해보다 둘째 해에 평균적으로 더 적은 일자리를 창출했음
          + Gusto의 분석에 따르면 인플레이션이 심했던 2022년에 설립된 기업들은 더 큰 어려움을 겪고 있음
          + 대부분의 산업에서 2022년에 설립된 기업들은 1년 전에 시작한 기업들보다 고용을 적게 하고 실패 빈도가 더 높았음
     * Gusto의 수석 이코노미스트인 Liz Wilke는 ""사업주들은 더 적은 것으로 더 많은 것을 하는 방법에 대해 꽤 실험적이고 꽤 영리해졌다""며 ""우리가 더 작은 많은 기업들이 있는 모델로 나아가고 있을 가능성이 충분하다""고 말함

'우리의 꿈은 아니에요'

     * 일부 기업가들은 느린 성장을 선택하고 있음
     * Helena Falangus Duffy는 2020년 부모님의 차고에서 Pottery by Eleni를 시작했으며, 인스타그램을 통해 그녀의 수제품에 대한 관심을 끌었음
     * Duffy의 남편 Daniel은 2021년 직장을 그만두고 도자기와 프로세코 수업도 제공하는 이 회사에서 풀타임으로 일하기 시작함
     * 워싱턴주 린우드에 위치한 이 사업체는 계약직 직원 1명을 풀타임으로 고용하고 있으며, 휴가 시즌에는 최대 4명의 직원을 더 고용함
     * Duffy는 1~2명의 정규직 직원을 추가할 수도 있지만, 올해 태어난 첫 아이를 키우는 것과 자신의 사업을 운영하는 것의 균형을 맞추려 하고 있음
     * Duffy는 ""우리는 가족을 부양할 수 있을 만큼의 수입을 창출하고 있다""며 ""우리의 꿈은 확장하고 자체 창고를 갖는 것이 아니다. 우리는 작게 유지하고 예전처럼 너무 열심히 일하지 않는 것을 좋아한다""고 말함

   제가 사는 샌디에고에 한국분들이 운영하는 베이커리가 하나 있습니다.
   102 스콘 이라고 UCSD 쪽에 있는데, 빵 맛이 기가 막히더라구요.
   여기가 철저히 학생들 위주로 운영을 하는지 일주일에 단 4일만 영업을 하고, 그것도 주말에는 열지 않더라구요. (9am-2pm, 화-금) 그래서 저 같은 직장인들은 아예 맛도 볼수가 없는 ㅂㄷㅂㄷ
   암튼 이렇게 평일 4일 빡세게 일하고 나머지는 제품 연구하며 보낼 수 있다면 소규모 사업을 창업하는 것도 꽤나 좋은 삶의 방식이 아닐까 싶습니다.

   좋은 내용 감사합니다. 원문은 https://archive.is/DEBW0 참고하세요.
"
"https://news.hada.io/topic?id=16673","FBI, 2022년 광고 차단기 사용 권고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FBI, 2022년 광고 차단기 사용 권고

   사이버 범죄자들이 검색 엔진 광고 서비스를 사용하여 브랜드를 사칭하고 사용자들을 랜섬웨어가 포함된 악성 사이트로 유도하여 로그인 자격 증명 및 기타 금융 정보를 훔치고 있음

    방법론

     * 사이버 범죄자들은 실제 비즈니스나 서비스와 유사한 도메인을 사용하여 인터넷 검색 결과 내에 나타나는 광고를 구매함
     * 사용자가 해당 비즈니스나 서비스를 검색하면, 이러한 광고가 검색 결과의 최상단에 광고와 실제 검색 결과 간의 최소한의 구별로 나타남
     * 이러한 광고는 모방된 비즈니스의 공식 웹페이지와 동일해 보이는 웹페이지로 연결됨
     * 사용자가 다운로드할 프로그램을 검색하는 경우, 사기성 웹페이지에는 실제로는 멀웨어인 소프트웨어를 다운로드하는 링크가 있음
     * 다운로드 페이지는 합법적으로 보이고 다운로드 자체는 사용자가 다운로드하려던 프로그램의 이름을 따서 명명됨
     * 이러한 광고는 특히 암호화폐 거래 플랫폼과 같은 금융 관련 웹사이트를 사칭하는 데에도 사용되었음
     * 이러한 악성 사이트는 실제 거래 플랫폼처럼 보이며 사용자에게 로그인 자격 증명과 금융 정보를 입력하도록 유도하여 범죄자들이 자금을 훔칠 수 있는 액세스 권한을 부여함
     * 검색 엔진 광고 자체는 악의적이지 않지만, 광고 링크를 통해 웹페이지에 접속할 때는 주의를 기울이는 것이 중요함

    자신을 보호하는 팁

   FBI는 개인이 다음과 같은 예방 조치를 취할 것을 권장함:
     * 광고를 클릭하기 전에 URL을 확인하여 사이트가 진짜인지 확인할 것. 악의적인 도메인 이름은 의도된 URL과 유사하지만 오타나 잘못 배치된 문자가 있을 수 있음
     * 비즈니스나 금융 기관을 검색하는 대신 비즈니스의 URL을 인터넷 브라우저의 주소 표시줄에 직접 입력하여 공식 웹사이트에 직접 액세스할 것
     * 인터넷 검색 시 광고 차단 확장 프로그램을 사용할 것. 대부분의 인터넷 브라우저는 사용자가 광고를 차단하는 확장 프로그램을 포함하여 확장 프로그램을 추가할 수 있도록 함. 이러한 광고 차단기는 브라우저 내에서 켜고 끌 수 있어 특정 웹사이트에서는 광고를 허용하고 다른 웹사이트에서는 광고를 차단할 수 있음

   FBI는 기업이 다음과 같은 예방 조치를 취할 것을 권장함:
     * 도메인 스푸핑을 방지하기 위해 유사한 도메인이 등록될 때 기업에 알리는 도메인 보호 서비스를 사용할 것
     * 스푸핑된 웹사이트와 대상 URL이 올바른지 확인하는 것의 중요성에 대해 사용자를 교육할 것
     * 기업에서 제공하는 프로그램에 대한 합법적인 다운로드 위치에 대해 사용자를 교육할 것

    피해자 신고

   검색 엔진 광고의 브랜드 사칭으로 인한 사기 또는 멀웨어의 피해자라고 생각되는 경우, 해당 지역의 FBI 현장 사무소(www.fbi.gov/contact-us/fieldoffices)에 사기 행위를 신고할 것. FBI는 또한 피해자가 FBI 인터넷 범죄 불만 센터(www.ic3.gov)에 사기성 또는 의심스러운 활동을 신고할 것을 권장함

   요약이 잘못되어 있는 것 같아요

        Hacker News 의견

     * 첫 번째 의견
          + 악성 소프트웨어와 현대 광고 네트워크에 대한 불만이 있음
          + 웹사이트가 데이터를 호스팅하고 광고를 차단하는 문화가 문제라고 생각함
          + 웹사이트는 광고를 통해 수익을 얻기 위해 콘텐츠를 제공함
          + 광고를 차단하는 사용자는 시스템을 악용하는 것이라고 봄
          + 사회적 계약을 받아들이지 않는다면 그 서비스를 사용하지 말아야 함
     * 두 번째 의견
          + 광고 차단이 없는 컴퓨터를 사용하는 것은 충격적인 경험임
          + 관련 링크: YouTube 영상
     * 세 번째 의견
          + Google이 링크 사기와 관련된 책임을 회피하고 있음
          + FBI의 권고사항이 실질적으로 도움이 되지 않음
          + 관련 기사: 링크 사기
     * 네 번째 의견
          + NoScript 사용자가 금융 및 건강 서비스 사이트에 로그인할 수 없는 문제가 발생함
          + 모든 추적 코드를 실행하지 않으면 로그인할 수 없게 만듦
          + 이는 기술적으로 필요하지 않음에도 불구하고 강제됨
     * 다섯 번째 의견
          + 사회가 원치 않는 광고에 대해 더 관용적이지 않기를 바람
          + Google이 초기에는 비침해적인 광고를 제공했으나, 현재는 사용자에게 적대적인 스팸 광고가 만연함
          + 광고로 인해 생산성과 집중력이 저하됨
     * 여섯 번째 의견
          + 광고 네트워크가 사기나 악성 소프트웨어에 대해 법적 책임을 지게 되기를 바람
          + 광고 네트워크가 광고 내용과 표시 맥락을 인지하는 것이 비즈니스 모델의 일부임
          + 광고로 인해 피해를 입은 경우, 광고 네트워크에 부정적인 결과가 있어야 함
     * 일곱 번째 의견
          + FBI가 웹 검색 시 광고 차단기를 사용할 것을 권장함
          + 관련 링크: Hacker News
     * 여덟 번째 의견
          + Microsoft가 광고 차단에 대해 내부적으로 갈등을 겪고 있음
          + 관련 링크: Microsoft Edge, Microsoft 지원
     * 아홉 번째 의견
          + 컴퓨터 건강뿐만 아니라 정신 건강을 위해서도 광고 차단기가 필요함
          + CDC가 광고 차단기를 권장할 시점이 언제일지 궁금함
     * 열 번째 의견
          + 아직도 광고가 콘텐츠 주변에 표시되지 않고 중간에 삽입됨
          + 우리는 아직도 'Idiocracy'의 정점에 도달하지 않았음
"
"https://news.hada.io/topic?id=16694","Show GN: 젠포트 AI - 자연어기반 주식 매매 조건식 입력 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 젠포트 AI - 자연어기반 주식 매매 조건식 입력 기능

   안녕하세요. 회사에서 만든 재밌는 기능을 소개하기 위해 긱뉴스에 글을 작성하게 되었습니다.

   아쉽게도 모두를 위한 쉬운 서비스는 아니고요. 저희는 한국이나 미국 주식시장의 다양한 종목별 데이터를 통해 직접 만든 투자 전략을 백테스트하고 그 전략을 실전매매로 연결할 수 있는 기능을 제공하는 젠포트라는 서비스에 사용자를 돕는 AI를 붙여가고 있습니다.

   다양한 함수와 팩터들이 있다보니 조건식을 직접짜기가 어려운데요. 젠포트 AI는 원하는 걸 메시지로 적으면 그에 맞는 조건식 2개를 제안해줍니다. 현재 한국 주식 백테스트에서 매수/매도 조건식을 작성할 때 사용할 수 있습니다.

   소위 퀀트투자에 관심있으신 분들은 하나의 옵션으로 생각해주시고 이 글에 댓글 등으로 피드백을 주시면 감사하겠습니다.

   기대 됩니다. 몇몇 기법을 같이 사용할 때 매우 유용하게 쓸 수 있지 않을까 싶습니다.
"
"https://news.hada.io/topic?id=16706","Just for Fun. No, Really. - 재미삼아 개발했어요. 진짜로요. (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Just for Fun. No, Really. - 재미삼아 개발했어요. 진짜로요. (2022)

     * ""우리는 소프트웨어 개발을 좋아함"" 코딩은 문제 해결의 지그재그 여정이며, 많은 사람들이 생각하는 것보다 목적지가 덜 중요함
     * 우리는 종종 다음과 같은 질문을 받음:
          + ""왜 이 일을 하는 거죠?""
          + ""이 프로젝트의 목적은 무엇인가요?""
          + ""이 프로젝트가 X보다 나은 점은 무엇인가요?""

실리콘 밸리의 치열함

     * Hacker News나 다른 스타트업 중심의 뉴스 사이트에서 많은 시간을 보내면, 모두가 다음 수백만 달러짜리 스타트업이나 출구 전략에 매달려 있다고 믿을 수 있음
     * 사람들이 순전히 재미로 오픈 소스 코드를 작업한다는 것을 상상하기 어려울 수 있음
     * 소프트웨어 구축의 예술을 사랑하는 해커들이 있음. 그들은 도전을 위해, 재미를 위해 그것을 함. 그들은 백만장자가 되려고 하지 않음

소비자 문화

     * 또는 다른 사람의 소프트웨어만 소비하고 거의 만들지 않는다면, ""이 프로젝트가 나에게 무엇을 해줄 수 있을까?""라는 생각에 갇힐 수 있음. (그리고 프로젝트가 그들과 관련이 없다면 그것이 왜 존재하는지 궁금해함)
     * 많은 사람들이 그들의 소프트웨어를 소비할 필요가 없는 해커들이 있음. 물론 다른 사람들이 자신의 작업을 즐기거나 감탄하거나 감사하면 좋겠지만, 그것은 엄격히 필요하지 않음. 그냥 만드는 것 자체가 재미있음.

우리는 그냥 재미로 한다. 진짜로.

     * 마지막으로, 일상적인 업무에 필요한 프로그래밍 기술만 배운 사람들은, 항상 새로운 것을 시도하는 프로그래머를 이해하지 못할 수 있음
     * 코드로 살고 숨쉬는 해커들이 있음
          + 모든 코드 줄이 그 금전적 가치를 증명해야 한다는 생각, 키보드 앞에서 고생하는 매 시간을 설명해야 한다는 것은 정말 안타까움
     * 과정 자체에 가치가 있음. 결함이 있더라도, 그 자체로 가치가 있음. 최종 제품만 중요한 것이 아님
     * 프로그래밍에 대한 제가 가장 좋아하는 인용구로 마무리하겠음:

     프로그래머는 시인처럼 순수한 사고의 물질에서 약간 떨어진 곳에서 일합니다. 그는 상상력을 발휘하여 공기 중에 성을 짓습니다. 몇 안 되는 창작 매체가 그렇게 유연하고, 그렇게 쉽게 다듬고 재작업할 수 있으며, 웅장한 개념적 구조를 쉽게 실현할 수 있습니다. 하지만 프로그램 구조는 시인의 말과 달리 구조 자체와는 별개로 가시적인 결과물을 만들어내며 움직이고 작동한다는 점에서 실재합니다.
     — 프레드 브룩스, The Mythical Man-Month

시도해보세요!

     * 여러분이 길을 잃었다고 생각한다면 — 코딩이 예전에는 재미있었지만 이제는 그저 시계 찍고 월급 받으려고 해야만 하는 고역이 되었다면, 저희는 여러분을 다시 초대합니다!
     * 아니면 엉뚱한 아이디어의 프로그래밍은 전문가와 학자들만의 것이라고 생각하도록 길들여졌다면, 이 페이지는 여러분을 위한 것입니다. 여러분에게는 만지작거리고 그 과정에서 즐거움을 누릴 권리가 있습니다!
     * 컴퓨터 안에서 만들고, 배우고, 경험하고 싶은 무언가를 생각해 보세요. 그리고 먼저 찾아보거나 연구하지 말고 그냥 뛰어들어 보세요. 아마도 약간의 재미를 느낄 수 있을 거예요. 진짜로요.

클럽

   순서 없이, 여기 ""그냥 재미로""라는 꼬리표를 자랑스럽게 달고 있는 몇 가지 프로젝트가 있습니다.
     * Natalie - 재미로 만든 Ruby 컴파일러
     * ZigSelf - 재미로 Zig으로 만든 Self 구현
     * php-parser-rs - 재미로 Rust로 만든 PHP 파서
     * ex6502 - 재미로 Elixir로 만든 6502 프로세서 에뮬레이터
     * Piko-piko OS - 재미로 만든 x86 16비트 장난감 OS
     * Folders2kt - 재미로 만든 난해한 프로그래밍 언어
     * GCC Rust - 재미로 만든 Rust 컴파일러
     * Soul - 재미로 만든 SQLite REST 및 실시간 서버
     * hssp - 재미로 만든 HTTP 상태 코드 CLI
     * PyCraft - 재미로 Python으로 만든 마인크래프트 런처
     * hashsearch - 재미로 만든 역방향 이미지 검색 엔진
     * quackspeak - 재미로 오리를 사용한 텍스트 음성 변환 엔진
     * Quark - 재미로 만든 고성능 Lisp 방언
     * Whitecat - 재미로 PHP 개발을 위한 CLI
     * eClient - 재미로 Python으로 만든 마인크래프트 런처
     * CascadeOS - 재미로 만든 범용 OS
     * Kiesel - 재미로 Zig으로 만든 JavaScript 엔진
     * github-pewpew - 재미로 리포지토리를 삭제하는 CLI 도구
     * dt - 재미로 만든 연결형 AWK와 비슷한 언어
     * grab - 재미로 만든 가벼운 grep 클론
     * math-with-regexps - 재미로 정규식으로 수학하기
     * noro - 재미로 만든 창 관리자가 있는 텍스트 편집기
     * Vox - 재미로 Elixir로 만든 정적 사이트 빌더
     * jimson - 재미로 만든 JSON 파서
     * txt2tufte - 재미로 만든 터프티식 웹사이트 빌더
     * Azure Storage 웹 탐색기 - 재미로 만든 Azure Storage 웹 탐색기
     * renam - 재미로 만든 아주 빠른 파일 이름 바꾸기 유틸리티
     * Funciton - 재미로 만든 상자로 이루어진 프로그래밍 언어

GN⁺의 의견

     * 이 글은 프로그래머들이 단순히 재미를 추구하는 것의 가치와 중요성에 대해 이야기하고 있음. 오늘날의 소비자 및 스타트업 문화에서는 모든 것이 실용적이고 수익성 있어야 한다는 압박감이 있지만, 그것은 프로그래밍의 창의성과 혁신을 저해할 수 있음.
     * 오픈소스 커뮤니티는 이러한 ""그냥 재미로"" 정신을 구현한 좋은 사례임. 많은 중요한 오픈소스 프로젝트들이 처음에는 누군가의 취미 프로젝트로 시작되었고, 그 과정에서 새로운 아이디어와 접근법이 탐색되었음.
     * 하지만 이런 태도를 과도하게 추구하면 실용성이 떨어지는 프로젝트들이 양산될 수도 있음. 궁극적으로는 재미와 실용성 사이의 균형이 중요할 것 같음. 그래도 이 글은 우리가 종종 잊고 사는 순수한 재미와 호기심의 가치를 상기시켜 준다는 점에서 의미 있어 보임.
     * 일상의 업무에 지친 개발자들에게 이런 취미 프로젝트는 좋은 영감과 동기부여가 될 수 있을 것 같음. 새로운 언어나 기술을 배우고 싶지만 시간이 없다고 느끼는 분들께도 추천하고 싶은 글임.

   Python 언어 자체도 일주일 정도의 휴가 기간에 재미로 만들어진 language라고 알고 있습니다.

   재미로 개발하는거 좋아하는데 요즘은 퇴근하면 넉다운돼서 상상도 못하는거같아요. 대단하신 분들이 많네요

   자주 쓰는 오픈소스 프로젝트 이슈트래커에서 트러블슈팅을 도와주거나 문서에 기여하는 방법도 있습니다. 꼭 새로운 프로젝트를 시작하거나 코딩을 할 필요는 없는 것 같아요

   94년도까지 단순한 컴퓨터 사용자였다가 언어를 배우고 95년도에 ""전산"" 관련 직업을 가졌음.

   지금 생각해보면 나는 대단히 운이 좋은 행운아였음.

     가끔 돈내고 회사 다녀야되는거 아닌가 하는 생각을 함.

        Hacker News 의견

     * 코드를 통해 무언가를 만드는 것을 즐기며, 때로는 금전적 이익을 고려하기도 하지만, 주로 재미를 위해 프로젝트를 진행함
          + 6주 동안 함께 프로젝트를 진행하는 그룹을 운영하며, 두 번째 코호트를 마쳤음
          + 프로젝트와 도전 과제를 함께 해결하는 과정이 매우 즐거움
     * 인터뷰에서 개인 프로젝트를 설명했으나, 면접관이 왜 그런 프로젝트를 했는지 계속 물어봐서 불편했음
          + 단순히 재미와 학습을 위해 했다고 설명했지만, 면접관은 이해하지 못했음
     * 소프트웨어를 만드는 동기를 설명할 때, 혼자서 해변에 모래성을 쌓고 만족감을 느끼는 것과 같다고 비유함
          + 누군가 알아주지 않아도, 파도에 의해 사라져도, 만족감을 얻음
     * 대형 언어 모델(LLM)을 통해 재미있는 프로젝트를 더 쉽게 시작할 수 있게 됨
          + 긴 연구 과정과 도구 설정 없이 간단한 프로토타입을 만들 수 있음
          + 위치 기반 음악 웹앱을 만들어 산책할 때마다 다른 음악을 들을 수 있음
     * 개인 프로젝트에 시간을 투자하기 위해 생활비를 줄이고 계약 사이의 시간을 활용함
          + 주 단위로 프로젝트를 진행하며, 꿈꾸던 프로젝트에 시간을 할애함
          + 재미를 위해 프로젝트를 진행하지만, 진지하게 시간을 투자함
     * 재미를 위한 프로젝트 목록이 완성된 프로젝트만 포함하는 것은 아쉬움
          + 미완성 프로젝트나 몇 주 동안 작업하다가 잊혀진 프로젝트도 포함되어야 함
          + 코딩의 재미는 과정 자체를 즐기는 것임
     * 어제 동료들과의 대화에서, 많은 양의 작업을 통해 기술을 발전시키는 것이 중요하다는 결론에 도달함
          + John Carmack의 예를 들어, 많은 게임을 만들면서 기술을 발전시킨 경험을 공유함
          + 올바른 언어와 포트폴리오 프로젝트를 선택하려는 시도가 오히려 지연을 초래함
     * 재미로 만든 제품이나 금전적 이익을 위해 만든 제품 모두 품질이 떨어질 수 있음
          + 재미와 이익의 이분법을 넘어서, 좋은 프로그래밍 시스템 제품을 만드는 것이 중요함
     * 혼자서 훌륭한 요리를 만드는 것과 같은 내적 경험이지만, 그 자체로 가치가 있음
          + 이 마인드를 이해하지 못하는 사람들에게 설명하기 어려움
     * Hacker News와 같은 사이트에서 많은 사람들이 다음 대박 스타트업을 준비한다고 생각할 수 있음
          + 하지만 오픈 소스 코드를 재미로 작업하는 사람들도 많음
          + HN은 프로그래머들이 더 재미있게 일하는 모습을 보여주는 주요 소스임
"
"https://news.hada.io/topic?id=16765","크라우드스트라이크 전 직원들: "품질 관리는 프로세스의 일부가 아니었다."","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               크라우드스트라이크 전 직원들: ""품질 관리는 프로세스의 일부가 아니었다.""

     * CrowdStrike의 소프트웨어 엔지니어들은 1년 이상 회사 고위 관리자들에게 마감일 단축, 과도한 업무량, 기술적 문제 증가에 대해 불만을 제기함
          + 엔지니어 Jeff Gardner: ""속도가 가장 중요했고, 품질 관리는 우선순위가 아니었음""
          + 24명의 전직 직원 중 10명은 해고되었고, 14명은 자발적으로 퇴사함
          + 전직 직원 Joey Victorino는 CrowdStrike가 모든 것을 꼼꼼하게 처리했다고 반박함
     * CrowdStrike는 Semafor의 보도 내용 대부분을 부인하며, 정보 제공자들을 ""불만을 품은 전직 직원""으로 지칭함
          + 회사는 엄격한 테스트와 품질 관리를 통해 제품의 안정성을 보장하기 위해 노력하고 있다고 주장함
     * CrowdStrike는 2011년 설립되어 2013년 Falcon 백신 패키지 출시 후 사이버보안 업계 선두주자로 빠르게 성장함
          + 2019년 상장 후 대규모 성장을 거듭하며 직원 수 증가, 2024 회계연도 말 매출 1,000% 이상 증가
     * 7월 CrowdStrike의 잘못된 소프트웨어 업데이트로 인해 역사상 최대 규모의 IT 장애가 발생함
          + 850만 대의 컴퓨터가 다운되어 포춘 500대 기업에 최대 54억 달러의 손실을 입힘
          + 공항 여행객이 발이 묶이고, 온라인 뱅킹 계정에 접속할 수 없게 되며, 긴급 콜센터가 오프라인 상태가 됨

전직 직원들이 제기한 문제점

     * 제품 출시를 서두르기 위해 때로는 소프트웨어 품질 검사가 부실했음
     * 전문 서비스 부서에서 고객의 개인 정보가 실수로 다른 고객의 폴더에 세 차례나 업로드되는 사고 발생
     * Falcon LogScale 서비스에 문제가 있었음
          + 잘못된 업데이트로 인해 악의적인 활동을 알리는 실시간 경고가 잠시 꺼진 적이 최소 두 차례 있었음
     * 2022년 클라우드 위협 헌팅 서비스인 Falcon OverWatch Cloud Threat Hunting 출시를 서둘렀음
          + 엔지니어와 위협 헌터들에게 보통 1년 걸리는 작업을 두 달 안에 마치라고 지시함
          + 출시 당시 위협 헌터들이 고객의 클라우드 시스템을 완전히 모니터링하는 데 사용하는 내부 도구가 부족했음

CrowdStrike의 답변

     * 기존 엔지니어를 사용한 것은 인정했으나, 당시 ""클라우드 위협 헌터""라는 분야 자체가 없었기에 경험 있는 인력을 고용하는 것이 불가능했다고 해명함
     * 직원들이 업무를 수행할 수 있도록 교육받지 않았다는 주장은 거짓이며, 원하는 사람에게는 교육을 제공했다고 밝힘
     * OverWatch 제품군은 10년 이상 존재해왔으며, 고객의 진화하는 위협과 요구에 맞춰 지속적으로 개선되고 있음

        Hacker News 의견

     * CrowdStrike Mac 에이전트(Falcon)가 환경 변수에서 모든 비밀을 평문으로 클라우드 호스팅 SIEM으로 전송함
          + GitHub, AWS 등의 자격 증명을 검색할 수 있음
          + Mac 버전만 해당되며, 이 동작을 비활성화하거나 수정할 방법이 없음
          + 고객의 수많은 평문 비밀이 SIEM에 저장되어 있을 가능성이 큼
     * Jeff Gardner는 CrowdStrike에서 속도만 중요시하고 품질 관리는 고려하지 않았다고 주장함
          + 해고된 전 직원의 의견은 신뢰하기 어려움
          + 이 직원은 디자이너로서 품질 관리에 관여하지 않았을 가능성이 큼
     * 24명의 전 직원 중 10명은 해고되었고, 14명은 자발적으로 퇴사함
          + 일부 전 직원은 다른 의견을 제시함
          + Joey Victorino는 CrowdStrike가 모든 작업에 철저했다고 주장함
     * Jeff Gardner의 의견은 UX 디자이너의 관점에서 나온 것임
          + 커널 패치 배포 과정과는 관련이 없을 가능성이 큼
     * 중요한 소프트웨어 인프라는 물리적 인프라처럼 규제되어야 함
          + 건물과 다리처럼 소프트웨어도 규제와 검사를 통해 신뢰성을 확보해야 함
     * CrowdStrike 에이전트를 배포한 팀에서 로그 문제를 겪음
          + 데몬이 많은 로그를 기록하지만 이를 중지하거나 줄일 수 있는 설정이 없음
     * CrowdStrike의 문화 문제는 Knight Capital과 유사함
          + 작은 문화 문제가 회사 전체의 기능 장애로 이어짐
     * 소프트웨어 개발에서 품질 관리가 부족한 경우가 많음
          + 많은 프로젝트가 충분히 테스트되지 않고 서둘러 출시됨
     * 위험 감수와 스릴 추구의 경계에 대해 고민하기 시작함
          + 어느 순간부터는 게으름이나 규율의 문제가 아니라 신경증이나 중독이 될 수 있음
     * CrowdStrike는 Semafor의 보도를 반박함
          + 불만을 가진 전 직원들이 회사를 나쁘게 보이게 할 가능성이 있음
          + 하지만 CrowdStrike의 신뢰도는 매우 낮음
     * 최악의 상황이 발생했음에도 불구하고 CrowdStrike의 주가는 여전히 상승 중임
          + S&P 500을 능가하는 성과를 보임
"
"https://news.hada.io/topic?id=16745","Android 앱들이 사이드로딩을 차단하고 Google Play 버전으로 강제 전환중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Android 앱들이 사이드로딩을 차단하고 Google Play 버전으로 강제 전환중

     * Google Play 스토어가 포함되지 않은 커스텀 버전의 Android를 사용하는 경우 Android 앱을 사이드로드하거나 APK 패키지를 수동으로 설치할 수 있음
     * 2024년 5월 Google I/O 컨퍼런스에서 사이드로딩 중 ""Remediation"" 대화상자를 띄우는 개발자 도구가 공개됨
     * Tesco, BeyBlade X, ChatGPT 등의 앱을 사이드로딩 하면 ""Get this app from Play"" 프롬프트가 표시되며 우회할 수 없음
     * Android 게임 핸드헬드 기기에서도 Diablo Immortal에서 유사한 프롬프트가 표시됨

Play Integrity API로 인해 블로킹되는 앱들

     * Google Play의 Integrity API는 기본 OS에서 수정된 휴대폰에 앱이 로드될 때 액세스를 차단하는 방식임
          + 최근 인기 MFA앱인 Authy가 GrapheneOS 등 수정된 펌웨어를 가진 폰에서 액세스를 차단함
          + 앱들은 Play Integrity API를 호출하여 폰의 소프트웨어 환경이 ""신뢰할 수 있는지"", Google Play Protect가 활성화되어 있는지 등을 확인함
     * Graphene은 Google의 Integrity API와 SafetyNet Attestation 시스템의 진실성에 의문을 제기하고, 표준 Android 하드웨어 증명을 권장
     * 앱들은 무결성 검사에 대해서 ""All-Or-Nothing"" 방식을 취할 필요는 없고, 민감한 작업 중에만 API를 호출하여 경고를 표시할 수 있음
     * 그러나 Play Store에 연결하지 않으면 개발자에게 메트릭이 제공되지 않고, 호환되지 않는 기기에 설치되어 나쁜 리뷰를 받을 수 있으며, 유료 앱 불법 복제에 노출 될 수도 있음

""알 수 없는 배포 채널"" 차단됨

     * Google의 ""Automatic integrity protection(자동 무결성 보호)"" 개발자 동영상에 따르면 ""선별된"" 앱만 자동 보호 기능에 액세스할 수 있음
          + 이는 앱에 자동 검사 도구와 ""Google Play 변조 방지 보호 기능의 가장 강력한 버전""을 추가함
     * ""사용자가 보호된 앱을 알 수 없는 배포 채널에서 받으면 Google Play에서 받도록 안내받게 될 것""이라고 프레젠테이션 슬라이드에 명시됨
     * 작년 Google은 설치 시 사이드로드된 앱의 맬웨어 스캔을 도입함
     * Google과 Apple은 보안 및 안정성 우려를 들어 스마트폰 소유자의 ""사이드로딩 권리를 확대""하는 법안에 반대 입장을 표명함
     * 올해 초 유럽 규제 당국은 Apple에게 사이드로딩 앱과 앱스토어를 허용하도록 강제했으나 수수료와 지리적 제한이 적용됨

   f-droid에 후원금 넣어야할까봐요
"
"https://news.hada.io/topic?id=16669","alphaXiv - arXiv의 논문에 대해서 공개 토론하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   alphaXiv - arXiv의 논문에 대해서 공개 토론하기

     * arXiv에 올라온 논문에 대해서 공개 토론하는 누구나 공개적으로 접근 가능한 온라인 플랫폼
     * arXiv URL을 alphaXiv로 도메인만 변경하면 그대로 동작
     * 라인 단위로 코멘트 달기 가능 : 논문 저자들과 직접 인사이트 공유 및 질문하고 토론하기
     * 자신에게만 보이는 Private 주석 달기 가능
     * 스탠포드 학생들이 만든 플랫폼

GN⁺의 정리

     * alphaXiv는 arXiv 논문에 대한 고품질 학문적 토론을 촉진하는 플랫폼임.
     * 연구자와 학습자 모두에게 개방되어 있으며, 줄 단위로 논문에 댓글을 달 수 있는 기능을 제공함.
     * ORCID 통합을 통해 사용자 신뢰성을 높이며, 개인 메모 기능도 제공함.
     * 커뮤니티 가이드라인을 준수하여 품질 있는 대화를 유지함.
     * 비슷한 기능을 제공하는 플랫폼으로는 ResearchGate와 Academia.edu가 있음.

        Hacker News 의견

     * Great idea
          + 홈페이지에 논문 목록을 바로 보여줘야 함, ""trending"" 클릭 없이
          + 논문 랭킹은 댓글 활동이 아닌 투표로 결정해야 함
          + 사용자 이름에 공백 허용은 혼란스러움
          + PDF 대신 HTML 사용 권장, 이미지 확대 등 HTML이 더 편리함
     * Tenured prof
          + 모든 논문을 Arxiv에 CC BY-NC-ND 라이선스로 게시함
          + 학계는 여전히 제도적 관성에 의해 방해받고 있음
          + 많은 학자들이 현 상태를 선호함, 특히 명성에 의존하는 사람들
     * Moderation idea
          + 댓글을 즉시 게시하지 않고 지연시키는 메커니즘 제안
          + 댓글 지연은 더 긴 생각을 담은 응답을 유도하고, 논쟁을 줄이며, 관리자 부담을 줄임
          + 여러 댓글이 같은 결론에 도달하는지 확인 가능
     * OpenReview
          + OpenReview의 기능을 좋아함: 프리프린트, 버전 관리, 리뷰, 웹사이트 링크, bibtex 생성 등
          + Arxiv만큼 인기가 없지만 리뷰에서는 매우 인기 있음
          + 필터가 중요함, 대중과의 소통보다는 학자들끼리의 대화가 필요함
     * alphaxiv 문제
          + 이메일 주소 불일치로 프리프린트를 클레임할 수 없음
          + 프로필을 채우기 위한 진입 장벽이 있음
     * 사이트 공동 창작자
          + 많은 제안이 현재 작업 중임
          + AI 연구 배경을 가진 3명의 학생이 만든 내부 도구로 시작됨
          + 다양한 주제 영역의 리뷰어/모더레이터 팀이 중요함
     * Pubpeer
          + 이 공간의 분열이 유익하지 않을 수 있음, 협력이 필요함
     * qrxiv.org
          + 몇 년 전 비슷한 아이디어를 본 기억이 있음, 사용자 확보가 도전임
     * Zoom 문제
          + 논문을 위한 줌 버튼 또는 PDF 직접 다운로드 버튼 필요
     * HTML vs PDF
          + 학계는 HTML을 사용하지 않음, 인센티브 시스템이 문제임
          + Latex to PDF 변환기는 일반적으로 품질이 낮음
"
"https://news.hada.io/topic?id=16712","HN 질문: Pave가 합법인 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 질문: Pave가 합법인 이유

     * Pave 소개
          + Pave는 YC-backed 스타트업으로, 스타트업의 보상 관리를 돕는 역할을 함
          + HR 및 급여 시스템과 연결하여 직원 정보와 급여 데이터를 수집하고, 이를 다른 회사들의 데이터와 결합하여 보상 범위를 제공함
     * 반경쟁적 임금 고정에 대한 의문
          + Pave의 방식이 RealPage와 유사하게 보임
          + 임금 담합은 불법임
          + Pave가 이러한 법적 문제를 어떻게 해결하는지에 대한 의문이 제기됨

GN⁺의 정리

     * Pave는 스타트업의 보상 관리를 돕는 YC-backed 스타트업임
     * HR 및 급여 시스템과 연결하여 데이터를 수집하고, 이를 바탕으로 보상 범위를 제공함
     * 임금 담합과 관련된 법적 문제에 대한 의문이 제기됨
     * 유사한 기능을 가진 다른 프로젝트로는 RealPage가 있음

        Hacker News 의견

     * Pave는 Equifax의 ""The Work Number""와 유사한 서비스로 보임
          + 많은 회사의 HR이 급여와 고용 이력 데이터를 Equifax에 제공하고, Equifax는 이를 필요로 하는 당사자에게 판매함
          + 이 보고서는 많은 사람들에게 가장 침해적인 소비자 파일 중 하나일 가능성이 있음
          + 이러한 데이터 공유의 합법성에 대해 논평할 수는 없지만, 이는 오래전부터 존재해왔음
          + Equifax The Work Number 보고서를 동결할 수 있음
     * FTC 가이드라인에 따르면, 경쟁자 간의 ""경쟁적으로 민감한 변수""를 공유하는 것은 불법임
          + 산업 평균과 같은 일부 데이터 공유는 불법이 아닐 수 있음
          + RealPage는 최적화 알고리즘을 공유하고 집단 행동을 권장함으로써 선을 넘음
          + Pave가 무엇을 하는지는 확실하지 않음
     * RealPage와 Pave의 차이점
          + RealPage는 시장 정보뿐만 아니라 임대료 인상을 판매함
          + RealPage는 고객에게 더 높은 임대료를 요구함
          + RealPage는 경쟁 압력을 피하기 위해 임대료를 낮추지 않도록 고객에게 압력을 가함
          + Pave는 임금 협상에서 기업에게 유리한 데이터를 제공하지만, 고객이 더 높은 급여를 지불할 수 있는 선택권이 있음
     * 경쟁자들이 서로의 공개 발표나 데이터 공유를 기반으로 유사한 가격 조정이나 급여 조정을 하는 것은 합법임
          + 예: 한 법률 회사가 급여 인상을 발표하면 다른 법률 회사들이 이를 즉시 맞추는 것
          + 불법인 것은 경쟁자들이 비밀 이메일 등을 통해 임금을 설정하는 것임
     * Radford와 같은 회사들은 수십 년 동안 이러한 일을 해왔고, Pave는 더 효율적인 버전임
     * Pave의 개념을 싫어함
          + 데이터가 좋고 모델이 좋다면 지표는 유용함
          + 관리자가 목표를 설정하면 데이터를 유리하게 조작할 가능성이 있음
          + 데이터가 다른 회사들이 여성에게 남성의 80%만 지불한다고 보여주면, 나도 그렇게 해야 한다고 권장할 것임
     * 투자자를 통해 Pave에 접근한 경험
          + 데이터를 보고 급여와 계약자 요금을 더 높게 설정함
          + 이는 대기업의 급여 밴딩과 유사함
          + 뛰어난 성과를 내면 항상 협상할 수 있음
          + 시장을 더 효율적이고 투명하게 만드는 것이 아닐까 하는 의문
     * 급여 조사 데이터를 읽지 않느냐는 질문
     * 임금 고정은 여러 회사가 임금을 특정 금액으로 설정하는 것임
          + 회사 간 보상 데이터를 공유하는 것이 반드시 임금 고정을 의미하지는 않음
          + 회사 A가 회사 B의 보상 데이터를 사용하여 인재 경쟁력을 높일 수 있음
"
"https://news.hada.io/topic?id=16725","일부 개발자들, "interdiff" 코드 리뷰 선호","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     일부 개발자들, ""interdiff"" 코드 리뷰 선호

왜 일부 사람들은 ""interdiff"" 코드 리뷰를 좋아하는가

  Gerrit 코드 리뷰 도구 평가

     * Gerrit은 오픈 소스 코드 리뷰 도구로, Git 저장소와 함께 작동함
     * 저장소에 패치를 작성하고 리뷰를 위해 제출할 수 있음
     * 다른 사람들이 작성한 코드를 검토하고, 수정해야 할 문제를 지적함
     * 코드 리뷰는 일반적으로 좋은 아이디어임
     * 오픈 소스 프로젝트에서는 코드가 병합될 수 있으며, 이는 책임과 기술 부채를 증가시킴

  다양한 코드 리뷰 도구

     * Gerrit, GitHub, Phabricator, 버그 트래커에 .patch 파일 업로드, git send-email을 통한 이메일 전송 등 다양한 도구가 있음
     * 각 도구는 다양한 정도로 작동 가능함

  이상적인 패치 시리즈

     * 3개의 패치 시리즈는 코드베이스의 진화를 단계별로 나타냄
     * 변경 사항은 논리적으로 분리되어 있어야 하며, 각 패치가 개별적으로 적용된 것처럼 읽을 수 있어야 함
     * 코드 리뷰를 통해 이러한 이상적인 시리즈가 검토됨

  GitHub의 코드 리뷰 방식: ""diff soup""

     * GitHub는 원래 커밋 위에 새로운 커밋을 추가하여 리뷰를 수행하도록 권장함
     * 이는 UX 디자인과 여러 이유로 인해 발생함
     * 리뷰 과정에서 여러 커밋이 추가되면, 커밋 간의 암묵적인 관계가 복잡해짐
     * git blame과 git bisect 도구의 사용이 어려워짐

  더 나은 방법: ""interdiff"" 리뷰 (AKA git range-diff)

     * 새로운 커밋을 추가하는 대신, 원래 커밋의 새로운 버전을 게시함
     * git range-diff를 사용하여 커밋 버전 간의 차이를 비교함
     * 리뷰어는 전체 diff를 다시 읽을 필요 없이 증분 리뷰를 수행할 수 있음
     * git blame과 git bisect 도구가 더 신뢰성 있게 작동함

  중간 설명: 패치 병합 전략

     * 위의 방법은 병합 전략과 독립적임 (예: git rebase vs 다중 부모 git merge 커밋)

  중간 설명: git rebase가 악한지 여부

     * git rebase는 괜찮음. 단, 다른 사람들이 커밋을 기반으로 할 공개 브랜치에서는 사용하지 말아야 함

  기타 노트

  결론

     * interdiff 리뷰 시스템은 더 작고 빠르게 메인 브랜치에 병합되는 패치를 장려함
     * 리뷰어와 작성자 모두에게 더 나은 코드 리뷰 경험을 제공함

GN⁺의 정리

     * 이 기사는 코드 리뷰 도구와 방법론에 대한 깊이 있는 분석을 제공함
     * interdiff 리뷰 방식은 코드 리뷰의 효율성을 크게 향상시킬 수 있음
     * GitHub의 ""diff soup"" 문제를 해결하는 데 도움이 됨
     * 코드 리뷰 도구를 선택할 때 고려해야 할 중요한 요소들을 제시함
     * 비슷한 기능을 가진 도구로는 GitHub, Gerrit, Phabricator 등이 있음

        Hacker News 의견

     * GitHub에서 주로 사용하는 워크플로우는 작업량이 많고 협업자에게 명확하지 않음
          + 리뷰어가 피드백을 통합한 차이를 볼 수 있게 하여 git blame과 git bisect를 깨지 않음
          + 리뷰어 피드백을 통합할 때 git commit --fixup <업데이트할 커밋의 해시>를 사용함
          + PR이 승인되면 git rebase --interactive origin/main --autosquash를 사용하여 fixup 커밋을 원래 커밋과 결합함
          + 최종적으로 git push --force-with-lease를 사용하여 병합함
          + 자동 완성 기능을 사용하여 긴 명령어를 쉽게 입력함
     * GitHub의 코드 리뷰 방식은 비효율적이며, Phabricator를 사용하여 수동으로 처리했음
          + 명시적인 UI가 있으면 더 좋을 것임
     * GitHub의 코드 리뷰 방식보다 더 나은 시스템을 원함
          + 작은 버그 수정 패치를 빠르게 병합하고 리뷰 범위를 좁히고 싶음
          + 별도의 리뷰/PR로 만들라는 주장이 있지만, 패치셋 간의 의존성 문제 발생
     * 새로운 코드 리뷰 접근 방식을 보는 것은 항상 흥미로움
          + 패치를 별도의 종속 PR로 나누는 것을 고려해보았음
          + GitContext와 같은 도구를 사용하면 PR을 작게 유지하면서 종속성을 유지할 수 있음
          + AI를 사용하여 PR과 리뷰를 요약하고 정확한 커밋 메시지를 생성할 수 있음
          + 리뷰어는 마지막 리뷰 이후의 변경 사항만 볼 수 있음
     * Review Board에서 interdiffs를 처음 도입했으며, 이는 코드 리뷰에서 매우 유용함
          + fix-it 커밋은 적절한 대안이 아님
              1. 상류 변경 사항을 알 수 없음
              2. 커밋 그래프를 복잡하게 만듦
              3. 모든 사람이 Git을 사용하지 않음
          + interdiffs는 리뷰어가 첫 리뷰 요청부터 모든 업데이트를 따라갈 수 있게 함
          + 여러 커밋을 하나의 리뷰 요청으로 게시할 때 유용함
     * Gerrit 코드 리뷰 시스템을 사용한 경험이 있으며, GitHub의 코드 리뷰는 비효율적임
          + Gerrit은 여러 패치를 스택으로 쌓는 것을 지원하여 작은 패치를 쉽게 리뷰할 수 있음
          + GitHub의 인터페이스는 포럼 스레드처럼 보이며, 재베이스를 추적할 수 없음
     * 다양한 코드 리뷰 시스템을 사용해본 경험이 있으며, 각 시스템의 장단점이 있음
          + Critique는 Google의 모노레포와 맞춤형 VCS에 최적화되어 있음
          + Gerrit은 리뷰어에게 좋지만, 작성자에게는 불편함
          + GitHub는 작성자 친화적이지만, 리뷰어와 팀에게는 비효율적임
          + 더 나은 코드 리뷰 도구를 사용하는 것이 중요함
     * Gerrit 코드 리뷰 시스템을 사용한 후, GitHub의 스택 PR은 불편함
          + GitHub는 코드 리뷰 댓글에 대한 변경 사항을 제대로 보여주지 않음
          + 몇 가지 스크립트를 사용하여 스택 PR 작업을 더 쉽게 만듦
          + ejoffe/spr와 spacedentist/spr 같은 도구가 유용함
"
"https://news.hada.io/topic?id=16794","비트코인 퍼즐 #66 해결: 6.6 BTC (~$400k) 인출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  비트코인 퍼즐 #66 해결: 6.6 BTC (~$400k) 인출

    요약

     * 주소 요약
          + 이 주소는 비트코인 블록체인에서 38번 거래됨.
          + 총 6.60126025 BTC를 수신하고 동일한 양을 송신함.
          + 현재 잔액은 0.00000000 BTC.
     * 총 수신
          + 6.60126025 BTC ($385,924)
     * 총 송신
          + 6.60126025 BTC ($385,924)
     * 총 거래량
          + 13.2025205 BTC ($771,849)
     * 거래 내역
          + ID: edef-ac429
               o 날짜: 2024년 9월 14일, 23:35:33
               o From: 2 Inputs
               o To: bc1q-p703
               o 금액: 0.00000012 BTC ($0.0070)
               o 수수료: 1.8K Sats ($1.02)
          + ID: 7521-62d4
               o 날짜: 2024년 9월 14일, 01:50:24
               o From: 1Fuc-UnrH
               o To: 14 Outputs
               o 금액: 0.00000012 BTC ($0.0070)
               o 수수료: 6.6K Sats ($3.85)
          + ID: d77d-b601
               o 날짜: 2024년 9월 13일, 08:08:02
               o From: 13zb-h5so
               o To: 15XV-yBQx
               o 금액: 0.66126013 BTC ($38,658.77)
               o 수수료: 25.6K Sats ($14.98)
          + ID: 57a8-2f5f
               o 날짜: 2024년 9월 13일, 07:59:39
               o From: 13zb-h5so
               o To: bc1q-7n67
               o 금액: 5.94000000 BTC ($347,265)
               o 수수료: 76.4K Sats ($44.66)
          + ID: 619e-c024
               o 날짜: 2024년 9월 8일, 21:43:41
               o From: bc1q-nt76
               o To: 2 Outputs
               o 금액: 0.00001448 BTC ($0.85)
               o 수수료: 374 Sats ($0.22)
          + ID: 1384-b8d7
               o 날짜: 2024년 8월 19일, 19:19:07
               o From: bc1q-mawk
               o To: 2 Outputs
               o 금액: 0.00001500 BTC ($0.88)
               o 수수료: 715 Sats ($0.42)
          + ID: 1e29-db71
               o 날짜: 2024년 8월 19일, 15:40:34
               o From: 6 Inputs
               o To: 12 Outputs
               o 금액: 0.00050000 BTC ($29.23)
               o 수수료: 22.0K Sats ($12.86)
          + ID: 0c10-b416
               o 날짜: 2024년 8월 4일, 05:44:59
               o From: 1TRU-P2sr
               o To: 2 Outputs
               o 금액: 0.00001600 BTC ($0.94)
               o 수수료: 800 Sats ($0.47)
          + ID: 25f0-75b4
               o 날짜: 2024년 7월 25일, 23:02:14
               o From: 1FUC-MDDB
               o To: 2 Outputs
               o 금액: 0.00000660 BTC ($0.39)
               o 수수료: 949 Sats ($0.55)
          + ID: 95dd-7690
               o 날짜: 2024년 7월 25일, 22:45:59
               o From: 1FuC-YtoH
               o To: 2 Outputs
               o 금액: 0.00000660 BTC ($0.39)
               o 수수료: 1.1K Sats ($0.63)
          + ID: 4bac-30e3
               o 날짜: 2024년 5월 12일, 15:32:48
               o From: bc1q-lvcw
               o To: 2 Outputs
               o 금액: 0.00000600 BTC ($0.35)
               o 수수료: 552 Sats ($0.32)
          + ID: 7e8c-a642
               o 날짜: 2024년 7월 14일, 09:52:55
               o From: 18 Inputs
               o To: 172 Outputs
               o 금액: 0.00008382 BTC ($4.90)
               o 수수료: 41.2K Sats ($24.08)
          + ID: b606-1bd2
               o 날짜: 2024년 6월 28일, 05:19:48
               o From: 18Xr-tCTm
               o To: 2 Outputs
               o 금액: 0.00001629 BTC ($0.95)
               o 수수료: 4.4K Sats ($2.54)
          + ID: acde-a064
               o 날짜: 2024년 5월 18일, 23:37:11
               o From: 1Pji-CRDQ
               o To: 2 Outputs
               o 금액: 0.00008120 BTC ($4.75)
               o 수수료: 4.1K Sats ($2.38)
          + ID: 5557-38cf
               o 날짜: 2023년 12월 3일, 03:38:20
               o From: 1HEL-5P8Y
               o To: 201 Outputs
               o 금액: 0.00000546 BTC ($0.32)
               o 수수료: 7.3K Sats ($4.26)
          + ID: cff6-27e1
               o 날짜: 2024년 3월 21일, 19:04:49
               o From: 1AFf-uxwT
               o To: 13zb-h5so
               o 금액: 0.00006018 BTC ($3.52)
               o 수수료: 14.1K Sats ($8.24)
          + ID: 8cc9-ea29
               o 날짜: 2024년 3월 13일, 24:37:29
               o From: bc1q-039g
               o To: 13zb-h5so
               o 금액: 0.00001277 BTC ($0.75)
               o 수수료: 1.8K Sats ($1.05)
          + ID: 8da7-0745
               o 날짜: 2024년 3월 13일, 06:29:03
               o From: 14aH-Hdar
               o To: 2 Outputs
               o 금액: 0.00000660 BTC ($0.39)
               o 수수료: 7.5K Sats ($4.36)
          + ID: 6a76-ce17
               o 날짜: 2024년 2월 19일, 19:15:15
               o From: bc1q-mxvd
               o To: 2 Outputs
               o 금액: 0.00006700 BTC ($3.92)
               o 수수료: 1.8K Sats ($1.05)
          + ID: f3db-ac9b
               o 날짜: 2023년 9월 17일, 13:36:40
               o From: 1Loa-XVAh
               o To: 2 Outputs
               o 금액: 0.00003769 BTC ($2.20)
               o 수수료: 1.6K Sats ($0.92)

    GN⁺의 정리

     * 이 기사는 비트코인 주소의 거래 내역을 상세히 보여줌.
     * 블록체인 기술의 투명성과 거래 추적 가능성을 잘 설명함.
     * 비트코인 거래의 수수료와 거래 금액의 변동성을 이해하는 데 도움이 됨.
     * 유사한 기능을 제공하는 다른 프로젝트로는 Etherscan이 있음.

        Hacker News 의견

     * 누군가 퍼즐을 풀고 약간 조롱 섞인 메시지를 남김
          + ""TX input""과 ""TX outputs""에 조롱 섞인 메시지 포함
     * Bitcoin 퍼즐은 몇 비트의 비밀키를 추측해 보상을 받는 것임
          + 퍼즐 66은 66개의 비트가 알려지지 않았고 6.6 BTC가 예치됨
          + 비밀키는 256 비트 중 66개의 랜덤 비트 포함
     * 다음 퍼즐 67은 67개의 비트가 알려지지 않았고 6.7 BTC가 걸려 있음
     * 이전 퍼즐 64는 2022년 9월 9일에 풀렸고, 약 2년의 계산 시간이 소요됨
     * 5의 배수인 퍼즐 (#65, #70)은 특별함
          + 65번 퍼즐은 130비트의 엔트로피를 가짐
          + 공개키가 블록체인에 게시되어 있어 2^(n/2) 작업만 필요함
     * 코인이 봇에 의해 도난당한 것으로 보임
          + 도둑이 더 큰 수수료를 제시한 거래를 먼저 게시함
     * modal.com 컴퓨트를 사용한 사기꾼이 있었음
          + 전통적인 채굴 소프트웨어가 아니어서 처음에는 감지되지 않았으나, 이제는 감지 가능함
     * 퍼즐이 시작된 지갑은 엄청난 거래량을 가지고 있음
          + 10,000건 이상의 거래와 백만 BTC 이상 송수신
     * 비밀키를 추측하는 것이 특별한 점이 있는지 의문
          + 매우 낭비적인 계산 자원 사용
     * 퍼즐의 창작자가 자신의 비트코인을 되찾는 것인지 의문
     * 퍼즐 자금은 누가 지원하는지 의문
     * 퍼즐에 대한 또 다른 좋은 자료 제공
          + privatekeys.pw 퍼즐 링크
     * 미국에서 이 소득은 어떤 과세 소득 범주에 속하는지 의문
"
"https://news.hada.io/topic?id=16708","'취미' 앱이 새로운 소셜 네트워크가 될까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        '취미' 앱이 새로운 소셜 네트워크가 될까?

     * ""굿바이 Tinder, 헬로 Strava""
     * 사람들은 트위터/X와 같은 ""디지털 타운스퀘어""에 싫증이 나기 시작함
     * 일론 머스크의 ""표현의 자유"" 정책에 반대하여 많은 사람들이 트위터를 떠남
     * Bluesky와 Threads 같은 경쟁 앱들이 사용자 증가를 경험하고 있음
     * 사람들은 공통 관심사를 가진 사람들을 연결해주는 앱을 찾고 있음

취미 앱의 인기 상승

     * 러닝 앱 Strava는 1년 만에 사용자 수가 20% 증가함
     * 뜨개질 소셜 네트워크 Ravelry는 900만 명 이상의 사용자를 보유하고 있음
     * Goodreads는 1억 5천만 명 이상의 회원을 확보함
     * 영화 애호가를 위한 앱 Letterboxd는 2020년 3월 180만 명에서 올여름 1400만 명 이상으로 사용자가 증가함

취미 앱이 제공하는 장점

     * 정치와 문화 전쟁에서 벗어나 관심사에 집중할 수 있음
     * 주요 플랫폼의 알고리즘 큐레이션 피드에서 사용자가 보고 싶은 콘텐츠를 덜 접하게 됨
     * 공통 관심사를 통해 사람들이 연결될 수 있음
     * 콘텐츠 중재에 시간과 노력, 비용을 덜 들일 수 있음
     * 전반적인 사용자 경험 개선에 집중할 수 있음

취미 앱에서의 대화 방식

     * Letterboxd에는 X와 같은 ""중앙 광장""이 없음
     * 댓글은 인라인으로 발생하여 공개적으로 콘텐츠를 재게시하거나 집단 공격을 조장하기 어려움
     * Goodreads와 Strava에서도 다른 사용자와 소통하고 메시지를 보낼 수 있지만 공개적으로 수치심을 주기는 어려움

취미 앱에서 연인을 찾는 이유

     * 기대치가 낮아 분위기가 덜 성적임
     * 데이팅 앱은 데이팅 슈퍼마켓처럼 느껴지고 연결을 위해 해야 하는 일로 여겨짐
     * 사람들은 외모로 판단받는 것에 환멸을 느끼고 있음
     * 플랫폼 기반 데이팅 문화에 대한 환멸감이 있음

데이팅 앱의 어려움

     * Match Group의 주가는 2021년 10월 최고점에서 크게 하락함
     * 7월에 유료 사용자 감소로 인해 6%의 일자리 감축을 발표함
     * Deutsche Bank의 분석에 따르면 전 세계 데이팅 앱 다운로드가 정체되고 있음

취미 앱의 긍정적인 커뮤니티

     * Letterboxd는 증오 발언, 인종차별, 동성애 혐오, 백인 우월주의, 트랜스포비아 등에 대해 ""무관용"" 접근 방식을 취함
     * Letterboxd는 10명 미만의 직원이 콘텐츠를 중재하고 있으며 일반적으로 자주 개입할 필요가 없음
     * 커뮤니티를 자유롭고 좋고 멋지게 유지하는 방법에 대해 매우 신경을 씀

취미 앱의 미래

     * 소셜 미디어 앱에 비해 가벼운 접근 방식이 지속될지는 아직 미지수임
     * 모든 앱은 탄생하고 조정되지 않다가 나쁜 일이 일어나면 심하게 조정되는 궤적을 따를 수 있음
     * 취미 앱도 그런 궤적을 가질 수 있음

   취미에 맞는 Subreddit에서 활동하는 것과 사용자 경험이 어떻게 다를지 궁금하네요.

  Hacker News 댓글들

     * 낮은 부담의 사회적 상호작용이 관계 형성에 유익함. 모든 사람에게 맞지 않는 '후크업 문화'는 많은 고통을 초래함.
     * Reddit의 위치 기반 서브레딧은 유용하지만 관리가 어려움. 단일 서브레딧에서 위치 필터링 기능이 있으면 더 나은 커뮤니티 형성이 가능할 듯
     * 공통 관심사는 새로운 사람들을 만나는 최고의 방법임. 온라인보다 오프라인에서 더 나은 자신을 보여줄 수 있음.
     * 취미 앱은 더 나은 환경을 제공하여 사람들이 더 오래 머물게 함. 낮은 기대치로 인해 더 편안한 분위기 조성 가능.
     * 의미 있는 관계를 찾기 위해 다양한 소셜 미디어를 시도하지만, 결국 실망함. 소셜 미디어를 완전히 포기하는 것이 더 나은 방법일 수 있음.
     * Strava는 경쟁을 강조하여 불편함을 초래함. 자전거 타기를 좋아하는 사람을 찾고 싶지만, Strava의 기능은 적절하지 않음.
     * 다양한 취미를 가진 사람들과 만날 수 있는 플랫폼이 필요함. '취미를 위한 Tinder' 같은 앱이 유용할 수 있음.
     * Strava는 오프라인 그룹 라이딩과 함께 사용할 때 유용함. 오프라인 활동이 없으면 팔로워를 얻기 어려움.
     * 취미와 로맨틱 관심사를 혼합하는 것은 신중해야 함. Couchsurfing이 후크업 앱으로 변질되어 신뢰를 잃은 사례가 있음.
     * OKCupid는 퀴즈를 통해 사람들을 매칭하는 방식으로 성공함. Match.com 인수 후 원래의 매력을 잃었음. 분산 프로토콜을 통해 원래의 기능을 되찾기를 바람.

   이 글 통해서 9백만 사용자라는 뜨개질 커뮤니티 Ravelry 알게되어서 들어가봤는데요. 굉장히 흥미롭습니다.
     * 2007년에 창업했고, 투자 받은 적 없으며 현재 직원은 4명. 심지어 개발자는 1명.
     * 뜨개질 패턴을 공유하는게 메인 기능인데, 단순히 공유만 하는게 아니라, 각 사용자가 판매도 직접 할 수 있게 되어있음.
     * 각 실에 대한 상세 정보 페이지도 훌륭. 200개 정도의 카테고리로 분류하고, 브랜드별 정리부터 무게, 텍스쳐, 원료, 평점 등등.
     * 커뮤니티 기능도 여러개의 일반 포럼부터, 사람들과의 메시징 및 팔로잉, 국가별 및 카테고리 별로 개설된 그룹, 온/오프라인 이벤트 등 대부분의 기능을 가지고 있음
     * 공식 모바일 앱이 없는 대신, API를 제공해서 약 50개 가량의 써드파티 앱들이 이 정보들을 다양한 목적으로 이용함. 이게 정말 훌륭. 그냥 뜨개질 계의 메인DB가 되는 것. 제가 좋아하는 사이트인 BoardGameGeek 과 거의 유사한 방식. 국내 커뮤니티들이 이렇게 발전할 방법은 없을까 생각이 드네요. (사실 요즘 가는 국내 커뮤니티가 거의 없긴 합니다.)
     * 수익 경로는 다양
          + 기본으로 광고
          + 샵을 통한 머천다이즈 판매
          + 사용자들의 패턴 판매 수수료
          + 아마존 어필리에이트(대부분의 패턴은 책에도 같이 실리기 때문에 책 링크를 홍보. 아마존의 책 관련 커미션은 약 4%)
          + 패턴에 들어간 실도 각 쇼핑몰에서 구입하기 버튼이 있고 여기서도 커미션이 발생.
          + 포럼에 글을 올릴 때 직접 사진을 첨부해 올리려면 ""Extras"" 라는 기능을 구입해야 함. 1년에 $5
          + 도네이션도 받음
          + 오프라인 이벤트를 개최하기도 함(거의 수익은 안난다고)

   국내에도 도아니티라는 비슷한 플랫폼이 최근에 생겼습니다.

   오 비슷하긴 하네요 ㅎㅎ
"
"https://news.hada.io/topic?id=16692","Windows NT vs. Unix: 설계 비교","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Windows NT vs. Unix: 설계 비교

     * NT는 종종 ""매우 진보된"" 운영 체제로 평가받았지만 그 이유를 잘 몰랐음
          + 2023년 말, 'Inside Windows NT' 1판을 읽고 NT와 Unix를 비교하기로 함
          + NT(1993년 7월)와 당시 Unix 시스템(4.4BSD, 리눅스 1.0)의 설계를 비교한 것임
          + Unix 전문가로서 NT는 잘 모르기에 NT의 차이점 위주로 서술함
          + NT가 Unix보다 나은 점이 무엇인지, 그리고 여전히 그런지에 대한 질문을 다룸

미션

     * Unix의 역사는 NT보다 훨씬 오래됨
          + Unix 개발은 1969년에 시작되었고 주요 목표는 프로그래머에게 편리한 플랫폼이 되는 것이었음
          + Unix는 Multics에서 영감을 받았지만, 단순성에 초점을 맞춰 Multics를 능가함
          + 이식성과 멀티태스킹은 Unix 설계의 원래 목표는 아니었음: 이러한 기능은 몇 년 후 Unix의 많은 ""포크""와 재발명에서 추가됨
     * Microsoft의 역사
          + MS-DOS의 첫 번째 릴리스는 1981년 8월에 출시되었고, ""레거시 Windows""(DOS 기반 버전)의 첫 번째 릴리스는 1985년 11월에 출시됨
          + MS-DOS는 널리 성공했지만, Windows가 진정으로 중요해진 것은 1990년 5월 Windows 3.0부터였음
          + Windows NT는 1989년에 구상되었고 1993년 7월 NT 3.1 릴리스로 세상에 모습을 드러냄
     * Microsoft의 이점
          + NT의 설계는 Unix보다 20년 늦게 시작되어 Microsoft에 이점을 줌
          + Microsoft는 이미 MS-DOS와 레거시 Windows 덕분에 큰 사용자 기반을 확보하고 있었음
          + NT를 설계한 Microsoft 팀은 이러한 개발의 통찰력, 다른 운영 체제 개발 경험, 최신 기술에 대한 접근성을 가지고 있어 NT 제작에서 ""달을 향해 쏘기""를 할 수 있었음

커널

     * Unix는 Minix나 GNU Hurd와 같은 몇 가지 예외를 제외하고 모놀리식 커널로 구현되어 운영 체제가 제공하는 기능과 상호 작용하기 위한 시스템 호출 모음을 노출함
     * 반면 NT는 모놀리식 커널과 마이크로커널의 중간 형태임: 특권 구성 요소인 executive는 사용자 공간 subsystems에 모듈식 구성 요소 모음으로 자신을 표현함
     * 사용자 공간 subsystems는 애플리케이션이 사용하는 API(POSIX, OS/2 등)를 executive 시스템 호출로 ""변환""하는 특수한 프로세스임
     * NT executive의 중요한 부분 중 하나는 HAL로, 머신의 하드웨어에 액세스하기 위한 추상 기본 요소를 제공하고 커널의 나머지 부분에 대한 기반으로 작용함
          + 이 계층은 NT가 i386, Alpha, PowerPC를 포함한 다양한 아키텍처에서 실행될 수 있게 하는 핵심임
          + 당시 Unix는 특정 아키텍처에 결합되어 있었음: Unix 개념은 이식 가능했지만 구현은 그렇지 않았음
          + SunOS는 원래 Motorola 68000만 지원했고, 386BSD는 Intel 아키텍처로의 BSD 첫 포팅이었으며, IRIX는 Silicon Graphic의 MIPS 기반 워크스테이션용 Unix 변종이었음
     * NT executive의 또 다른 중요한 부분은 멀티프로세싱 시스템 및 선점형 커널에 대한 지원임
          + 커널에는 무엇이 다른 것을 중단할 수 있는지 결정하기 위한 다양한 인터럽트 수준(BSD 용어로 SPL)이 있지만, 더 중요한 것은 커널 스레드가 다른 커널 스레드에 의해 선점될 수 있다는 점임
          + 이는 오늘날 모든 고성능 Unix 시스템이 하는 것이지만 많은 Unix가 시작한 방식은 아님
          + 이러한 시스템은 선점이나 멀티프로세싱을 지원하지 않는 커널로 시작하여 사용자 공간 멀티프로세싱 지원을 추가한 다음 커널 선점을 추가함
          + 마지막 단계가 가장 어려운 단계이며 FreeBSD 5.0 사가 난관을 설명함
          + 따라서 NT가 처음부터 올바른 기반으로 시작한 것은 흥미로움

객체

     * NT는 객체 지향 커널임
          + Unix도 그렇다고 생각할 수 있음: 프로세스는 struct로 정의되고 파일 시스템 구현은 vnode(""가상 노드"", inode와 혼동하지 말 것)를 다룸
          + 그러나 이는 NT가 하는 것과 정확히 같지 않음: NT는 이러한 모든 다른 객체가 시스템에서 공통 표현을 갖도록 강제함
     * 프로세스와 파일 핸들과 같은 이질적인 것들에 대해 의미 있는 추상화를 어떻게 제공할 수 있는지 의심할 수 있음
     * 실제로는 불가능하지만 NT는 이들 모두가 공통 객체 유형에서 상속되도록 강제했고, 놀랍게도 이는 몇 가지 좋은 특성을 가짐
     * 중앙 집중식 액세스 제어
          + 객체는 object manager 에 의해서만 생성되므로 정책을 시행할 코드의 단일 위치가 있음
          + 권한 검사와 같은 의미론은 한 위치에서만 정의되고 시스템 전체에 균일하게 적용될 수 있어 강력함
          + NetBSD도 이것이 좋은 아이디어라고 결론지었지만 2001년이 되어서야 Kernel Authorization(kauth) 프레임워크를 얻음
     * 공통 ID
          + 객체에는 ID가 있고 모두 단일 트리로 표현됨
          + 이는 프로세스, 파일 핸들 또는 파이프에 관계없이 모든 객체에 대해 고유한 네임스페이스가 있음을 의미함
          + 트리의 객체는 이름(경로)으로 주소 지정 가능하며 트리의 다른 부분은 다른 하위 시스템이 소유할 수 있음
          + 예를 들어 트리의 일부는 마운트된 파일 시스템을 나타낼 수 있으며, 따라서 해당 하위 트리의 루트 노드를 탐색하면 파일 시스템이 경로의 나머지 부분을 해결하게 됨
          + 이는 Unix 시스템의 VFS 계층과 유사하지만, VFS는 파일 시스템에 대해서만 다루는 반면 객체 트리는 모든 단일 커널 객체에 대해 다룸
          + Unix는 /proc/, /sys/ 등을 통해 비파일 객체 유형을 파일 시스템에 끼워 넣으려고 시도했지만, 이는 NT가 제공하는 것에 비해 사후 처리로 느껴짐
     * 통합 이벤트 처리
          + 모든 객체 유형에는 signaled 상태가 있으며, 그 의미는 각 객체 유형에 따라 다름
          + 예를 들어 프로세스 객체는 프로세스가 종료될 때 signaled 상태로 전환되고, 파일 핸들 객체는 I/O 요청이 완료될 때 signaled 상태로 전환됨
          + 이는 단일 wait 스타일 시스템 호출이 객체 그룹이 상태를 변경하기를 기다릴 수 있으므로 사용자 공간에서 이벤트 기반 코드(async 코드)를 작성하는 것이 매우 쉬워짐
          + Unix 시스템에서 I/O 및 프로세스 완료를 동시에 기다리는 것은 고통스러움
     * 객체는 NT 고유의 구성 요소이며 NT가 지원하려는 모든 API에 잘 일반화되지 않음
          + 예를 들어 POSIX 하위 시스템: POSIX에는 NT와 같은 객체 개념이 없지만 NT는 POSIX 애플리케이션과 어떤 종류의 호환성을 제공해야 함
          + 이러한 이유로 POSIX 하위 시스템이 executive에서 객체를 할당하는 동안 해당 POSIX 엔터티를 나타내기 위해 자체 장부 기록을 유지하고 즉시 두 엔터티 간의 논리적 변환을 수행해야 함
          + 반면 Win32 하위 시스템은 중개자 없이 클라이언트에 객체를 전달함

프로세스

     * 프로세스는 NT와 Unix의 공통된 개체이지만 완전히 동일하지는 않음
          + Unix에서는 프로세스가 트리로 표현되어 각 프로세스에는 부모가 있고 프로세스는 0개 이상의 자식을 가질 수 있음
          + 그러나 NT에는 그러한 관계가 없음: 프로세스는 생성자로부터 리소스를 ""상속""할 수 있지만 생성된 후에는 독립적인 엔터티임
     * NT가 설계되었을 당시 스레드는 흔하지 않았음:
          + Mach는 1985년에 스레드를 통합한 최초의 Unix 유사 커널이었음
          + 이는 다른 Unix가 이 개념을 나중에 채택하고 기존 설계에 맞게 수정해야 했음을 의미함
          + Linux는 1996년 6월 2.0 릴리스에서 스레드를 각각 고유한 PID를 가진 프로세스로 표현하기로 선택했고, NetBSD는 2004년 2.0 릴리스까지 프로세스와 별개의 엔터티로 표현되는 스레드를 얻지 못함
          + Unix와 달리 NT는 SMP 머신에서 고성능 컴퓨팅을 위해 스레드가 필수적임을 알고 처음부터 스레드를 지원하기로 선택함
     * NT에는 전통적인 Unix 의미의 시그널이 없음
          + 대신 alerts 가 있으며 이는 커널 모드와 사용자 모드가 될 수 있음
          + 사용자 모드 알림은 다른 객체와 마찬가지로 기다려야 하며 커널 모드 알림은 프로세스에 보이지 않음
          + POSIX 하위 시스템은 커널 모드 알림을 사용하여 시그널을 에뮬레이트함
          + 시그널은 프로세스 실행을 방해하는 방식 때문에 Unix에서 종종 사마귀라고 불렸음: 시그널을 올바르게 처리하는 것은 정말 어려운 노력이므로 NT의 대안이 더 우아한 것 같음
     * NT에서 최근에 흥미로운 개발은 피코프로세스의 도입이었음
          + 이 기능이 추가될 때까지 NT의 프로세스는 상당히 무거웠음: 새 프로세스는 시작 시 주소 공간에 매핑된 NT 런타임 라이브러리 묶음을 얻음
          + 피코프로세스에서 프로세스는 Windows 아키텍처와 최소한의 연관이 있으며, 이는 WSL 1에서 Linux 호환 프로세스를 구현하는 데 사용됨
          + 어떤 면에서 피코프로세스는 기본 Windows 프로세스보다 Unix 프로세스에 더 가깝지만 WSL 2로의 이동으로 인해 2016년 8월부터 존재했음에도 불구하고 더 이상 많이 사용되지 않음
     * Windows의 보안 문제를 비난하는 만큼, NT는 시스템이 기본적으로 기능 기반 시스템으로 작동한다는 점에서 초기 인터넷 표준에 대한 고급 보안 설계로 시작함
          + 로그온 후 시작되는 첫 번째 사용자 프로세스는 사용자 세션의 권한을 나타내는 커널로부터 액세스 토큰을 받으며, 프로세스와 하위 프로세스는 권한을 주장하기 위해 이 토큰을 커널에 제공해야 함
          + 이는 프로세스가 단순히 식별자를 가지고 있고 커널이 프로세스 테이블에서 각 프로세스가 무엇을 할 수 있는지 추적해야 하는 Unix와 다름

호환성

     * NT의 주요 목표는 레거시 Windows, DOS, OS/2 및 POSIX용으로 작성된 애플리케이션과 호환되는 것이었음
          + 이에 대한 한 가지 이유는 기술적인 것으로, 이로 인해 시스템이 우아한 설계를 갖도록 강제되었음
          + 다른 이유는 정치적인 것으로, NT는 IBM과 공동 개발되었고 NT는 결국 Windows가 되었음에도 불구하고 OS/2 애플리케이션을 반드시 지원해야 했음
     * 이러한 호환성에 대한 필요성으로 인해 NT의 설계는 Unix와 크게 달라졌음
          + Unix에서는 사용자 공간 애플리케이션이 시스템 호출 인터페이스를 통해 커널과 직접 통신하며, 이 인터페이스가 Unix 인터페이스임
          + C 라이브러리는 커널을 호출하기 위한 접착제를 제공하고 애플리케이션은 직접 시스템 호출을 실행하지 않지만 이는 사소한 세부 사항임
     * NT에서는 애플리케이션이 executive(커널)와 직접 통신하지 않음
          + 대신 각 애플리케이션은 특정 보호된 하위 시스템과 통신하며, 이러한 하위 시스템은 NT가 호환되기를 원하는 다양한 운영 체제의 API를 구현함
          + 이러한 하위 시스템은 사용자 공간 서버로 구현됨(NT ""마이크로커널"" 내부에 없음)
          + Windows 애플리케이션에 대한 지원은 Win32 서버에서 제공하며, 이는 사용자가 직접 볼 수 있는 유일한 서버이기 때문에 특별함: 콘솔 프로그램과 DOS 터미널을 제어하며 성능상의 이유로 특정 권한을 가짐
     * 전통적인 Unix와 비교할 때 BSD와 Linux는 모놀리식 커널을 가지고 있기 때문에 NT의 설계는 매우 다름
          + 이러한 커널은 사용자 공간 애플리케이션이 시스템과 직접 상호 작용하기 위해 활용하는 시스템 호출 인터페이스를 노출함
          + 그러나 BSD는 모놀리식 커널 내에서 오랫동안 대체 바이너리 실행을 지원해 왔음: 이는 실행 중인 바이너리에 따라 사용자 공간에 다른 시스템 호출 테이블을 노출한 다음 해당 ""외부"" 시스템 호출을 커널이 이해하는 것으로 변환하는 방식으로 작동함
          + Linux는 personalities 를 통해 이에 대한 제한된 지원도 제공함
     * BSD 접근 방식이 NT가 다른 시스템을 지원하는 방식과 매우 다르지만 WSL 1은 매우 유사하며 원래 정의된 용어로 하위 시스템이 아님
          + WSL 1에서 NT 커널은 Linux 프로세스를 피코프로세스로 표시하고 거기에서 다른 시스템 호출 인터페이스를 노출함
          + NT 커널 내에서 해당 Linux 관련 시스템 호출은 NT 작업으로 변환되어 BSD의 Linux 호환성과 마찬가지로 동일한 커널 내에서 제공됨
          + 유일한 문제는 NT가 Unix가 아니기 때문에 Linux ""에뮬레이션""이 까다롭고 BSD가 제공할 수 있는 것보다 훨씬 느리다는 것임
          + WSL 2가 이 설계의 본질을 잃고 완전한 VM 설계로 갔다는 것은 유감임
     * NT 설계의 흥미로운 세부 사항
          + NT 설계의 목표는 단일 셸에서 하위 시스템 간의 원활한 I/O 리디렉션을 허용하는 것이었음
          + 하위 시스템은 포트를 통해 애플리케이션에 노출되며, 이는 NT 객체이고 Mach가 프로세스와 서버가 통신하는 방식과 유사함

가상 메모리

     * NT는 Unix와 마찬가지로 모두 페이징이 있는 Memory Management Unit(MMU)에 의존하여 프로세스 간 보호를 제공하고 가상 메모리를 제공함
          + 사용자 공간 프로세스의 페이징은 머신의 물리적 메모리 양보다 더 큰 주소 공간을 제공하는 일반적인 메커니즘임
          + 그러나 NT를 당대의 Unix 시스템보다 앞서게 한 한 가지는 커널 자체도 디스크로 페이징 아웃될 수 있다는 것임
          + 커널 전체가 페이징 가능하다면 페이징 아웃된 파일 시스템 드라이버의 코드가 필요한 커널 페이지 폴트를 해결하는 상황에 처하게 되겠지만, 커널의 상당 부분은 페이징 가능함
          + 요즘에는 커널이 머신에 설치된 일반적인 메모리에 비해 작기 때문에 특별히 흥미롭지는 않지만 과거에는 모든 바이트가 소중했기 때문에 큰 차이를 만들었음
     * 요즘 우리가 가상 메모리와 페이징이 작동하는 방식을 당연하게 여기지만, 이는 NT가 설계되었을 때 큰 연구 분야였음
          + 이전의 Unix 구현에는 파일 시스템과 가상 메모리에 대한 별도의 메모리 캐시가 있었고, SunOS가 이전 설계의 오버헤드를 줄이기 위해 통합 가상 메모리 아키텍처를 구현한 것은 1987년이 되어서였음
          + 반면 NT는 처음부터 통합 메모리 아키텍처로 시작했음
          + Unix에서 발견된 비효율성에 대한 통찰력이 있었고 NT 설계가 시작되기 전에 SunOS가 구현한 솔루션을 볼 수 있었기 때문에 이를 수행하기 쉬웠다고 말할 수 있음
          + 그러나 이는 NT를 당시 다른 많은 운영 체제보다 ""더 발전""시켰으며, NetBSD 1.6의 Unified Buffer Cache(UBC) 구현으로 2002년까지 다른 시스템이 따라잡지 못했음을 주목해야 함
     * NT와 Unix의 흥미로운 차이점은 공유 메모리를 관리하고 표현하는 방식임
          + NT에서 공유 메모리 섹션은 객체이므로 다른 모든 객체와 정확히 동일한 액세스 유효성 검사를 받음
          + 또한 단일 객체 트리의 일부이므로 다른 모든 객체와 동일한 방식으로 주소 지정할 수 있음
          + Unix에서는 이 기능이 볼트로 고정되어 있음: 공유 메모리 객체는 다른 네임스페이스, 다른 모든 엔터티에 대한 다른 API를 가지므로 일반적인 권한이 적용되지 않음

I/O 서브시스템

     * 초기 버전의 Unix는 하나의 파일 시스템만 지원했음
          + 예를 들어 BSD가 UFS 이상을 지원하기 위해 Virtual File System(VFS) 추상화를 얻은 것은 1990년 4.3BSD까지 이르렀음
          + 반면 NT는 여러 파일 시스템을 허용하는 설계로 시작했음
     * 여러 파일 시스템을 지원하기 위해 커널은 어떤 식으로든 해당 네임스페이스를 노출해야 함
          + Unix는 마운트 포인트를 통해 단일 파일 계층 구조에서 파일 시스템을 결합함: VFS 계층은 파일 시스템의 루트에 해당하는 노드를 식별하고 경로를 탐색할 때 해당 파일 시스템 드라이버에 요청을 리디렉션하는 메커니즘을 제공함
          + NT는 표준 사용자 인터페이스에서 파일 시스템이 분리된 드라이브로 나타나더라도 유사한 설계를 가지고 있음: 내부적으로 executive는 파일 시스템을 객체 트리의 객체로 표현하고 각 객체는 경로의 나머지 부분을 구문 분석할 책임이 있음
          + 해당 파일 시스템 객체는 사용자 공간에서 액세스할 수 있도록 DOS 드라이브로 다시 매핑됨
          + DOS 드라이브도 참조하는 파일 시스템으로 I/O를 리디렉션하는 별도의 하위 트리 아래에 있는 객체임
     * NT는 결국 NTFS와 함께 출시되었음
          + NTFS는 성능이 좋지 않다는 이유로 비난받는 것을 좋아하더라도(잘못된 주장) 당시로서는 정말 발전된 파일 시스템이었음
          + NT의 I/O 하위 시스템은 NTFS와 결합하여 64비트 주소 지정, 저널링, 심지어 유니코드 파일 이름을 제공했음
          + Linux는 1990년대 후반까지 64비트 파일 지원을 받지 못했고 2001년 ext3가 출시될 때까지 저널링을 받지 못했음
          + 대체 내결함성 메커니즘인 Soft updates는 1998년까지 FreeBSD에 나타나지 않았음
          + Unix는 파일 이름을 유니코드가 아닌 null 종료 바이트 배열로 나타냄
     * NT 출시 시 포함된 다른 기능으로는 디스크 스트리핑과 미러링(오늘날 RAID로 알려짐) 및 장치 핫 플러깅이 있음
          + SunOS가 1990년대 초반부터 RAID 지원을 포함했기 때문에 이러한 기능은 새로운 것은 아니었지만, 흥미로운 점은 이들이 모두 원래 설계의 일부로 고려되었다는 것임
          + 더 높은 수준에서 NT의 I/O 하위 시스템을 Unix보다 훨씬 더 발전시키는 것은 그 인터페이스가 본질적으로 비동기라는 사실이며 처음부터 그랬다는 것임
          + 이를 관점에 두기 위해 FreeBSD는 1998년 FreeBSD 3.0까지 aio(7)에 대한 지원을 보지 못했고 Linux는 2002년 Linux 2.5까지 이를 보지 못했음
          + 비동기 I/O에 대한 지원이 20년 이상 Unix 시스템에 존재했음에도 불구하고 여전히 널리 사용되지 않음: 이러한 API를 아는 사람은 거의 없고, 대다수의 애플리케이션은 이를 사용하지 않으며, 성능이 좋지 않음
          + Linux의 io_uring은 비동기 I/O를 개선하는 비교적 최근 추가 기능이지만 보안 취약점의 주요 원인이었으며 널리 사용되지 않음

네트워킹

     * 오늘날 인터넷은 어디에나 있지만 NT가 설계되었을 때는 그렇지 않았음
          + Microsoft 생태계를 돌아보면 DOS 3.1(1987)은 FAT 파일 시스템에서 파일 공유를 위한 기반을 포함했지만 ""OS"" 자체는 네트워킹 기능을 제공하지 않았음: Microsoft Networks(MS-NET)라는 별도의 제품이 이를 수행했음
          + Windows 3.0(1990)은 로컬 네트워크에서 기본적인 프린터 및 파일 공유를 허용하는 NetBIOS에 대한 지원을 포함했지만 TCP/IP에 대한 지원은 찾아볼 수 없었음
     * 반면 Unix는 인터넷 그 자체였음: 모든 기본 인터넷 프로토콜은 Unix로 그리고 Unix와 함께 작성되었음
          + NT 설계 중에는 우수한 네트워크 지원을 고려하는 것이 중요했으며 실제로 NT는 네트워킹 기능과 함께 출시되었음
          + 그 결과 NT는 인터넷 프로토콜과 기존 Microsoft 환경에서 사용되는 전통적인 LAN 프로토콜을 모두 지원했으며, 이는 기업 환경에서 Unix보다 NT를 앞서게 했음
     * 예를 들어 NT의 네트워크 도메인을 들 수 있음
          + Unix에서 네트워크 관리자는 일반적으로 수동으로 머신 간에 사용자 계정을 동기화했음
          + SunOS와 같은 시스템이 구현한 X.500 디렉터리 프로토콜(1988)과 Kerberos(1980년대)를 사용자 인증에 사용했을 수 있지만 이러한 기술은 특별히 간단하지 않았음
          + 대신 NT는 시작부터 디렉터리 및 인증 기능을 통합한 도메인을 제공했으며, 이는 설정이 훨씬 쉽고 시스템에 내장되어 있기 때문에 회사 네트워크에서 ""승리""한 것으로 보임
     * 동기화된 사용자 계정의 목표는 머신 간에 리소스, 주로 파일을 공유하는 것이며, 이렇게 할 때 권한을 나타내는 방법이 중요함
          + 오랜 시간 동안 Unix는 각 파일에 대해 단순한 읽기/쓰기/실행 권한 집합만 제공했음
          + 반면 NT는 처음부터 고급 ACL과 함께 제공되었는데, 이는 여전히 Unix에서 아픈 점임
          + Linux와 BSD에도 이제 ACL이 있지만 시스템 간 인터페이스가 일관되지 않고 시스템 설계에 이질적인 추가 기능처럼 느껴짐
          + NT에서 ACL은 객체 수준에서 작동하므로 모든 커널 기능에 일관되게 적용됨
     * 파일 공유에 대해 이야기할 때 네트워크 파일 시스템에 대해 이야기해야 함
          + Unix에서 사실상 파일 시스템은 NFS였고 NT에서는 SMB였음
          + SMB는 MS-NET 및 LAN Manager에서 상속되었으며 리디렉터라는 구성 요소를 통해 커널에 구현됨
          + 본질적으로 리디렉터는 NFS가 Unix에 있는 것처럼 파일 작업을 트랩하고 네트워크를 통해 전송하는 ""단순한"" 또 다른 파일 시스템임
     * protobuf와 gRPC가 널리 사용되어 새로운 아이디어처럼 보일 수 있지만 오래된 아이디어에 기반을 두고 있음
          + Unix에서는 주로 NFS를 지원하기 위해 1980년대 초반부터 Sun RPC를 사용했음
          + 마찬가지로 NT는 자체 DSL(인터페이스 정의를 지정하고 원격 프로시저에 대한 코드를 생성하기 위해 MIDL로 알려짐)과 RPC 클라이언트 및 서버를 구현하기 위한 자체 기능을 통해 내장 RPC 지원과 함께 제공되었음
     * Unix 시스템은 임의의 드라이버 지원에 크게 주력하지 않았음: Unix 시스템은 일반적으로 특정 머신 및 공급업체와 결합되어 있었음
          + 반면 NT는 ""모든"" 머신을 위한 OS가 되려고 했으며 소프트웨어 회사에서 판매되었으므로 다른 사람이 작성한 드라이버 지원이 중요했음
          + 그 결과 NT에는 Network Driver Interface Specification(NDIS)이 제공되었는데, 이는 네트워크 카드 드라이버를 쉽게 지원하기 위한 추상화임
          + 오늘날까지 제조업체에서 제공하는 드라이버는 Linux에서 그렇게 흔한 일이 아니며, 이로 인해 2000년대 초반에 Linux에서 WiFi 카드용 Windows 드라이버를 재사용할 수 있는 매우 인기 있는 셈인 ndiswrapper와 같은 흥미로운 장치가 생겨남
     * 마지막으로 NT와 Unix의 또 다른 차이점은 명명된 파이프의 구현에 있음
          + 명명된 파이프는 Unix에서 로컬 구성 요소임: 동일한 머신에 있는 두 프로세스가 디스크에 지속적인 파일 이름으로 서로 통신할 수 있는 메커니즘을 제공함
          + NT에는 이와 동일한 기능이 있지만 명명된 파이프가 네트워크를 통해 작동할 수 있음
          + 공유 파일 시스템에 명명된 파이프를 배치하면 서로 다른 컴퓨터의 두 애플리케이션이 네트워킹 세부 정보를 걱정하지 않고도 서로 통신할 수 있음

User-Space

     * Configuration:
          + NT는 레지스트리라는 데이터베이스에서 시스템 및 애플리케이션 구성을 중앙 집중화하여 레거시 Windows에서 사용되는 오래된 CONFIG.SYS, AUTOEXEC.BAT 및 수많은 INI 파일에서 벗어났음
          + 이는 일부 사람들을 매우 화나게 만들었지만 결국 통합 구성 인터페이스는 모두에게 유익함: 지원할 단일 기반이 있기 때문에 애플리케이션을 작성하기가 더 쉬워지고 살펴볼 곳이 하나뿐이기 때문에 사용자가 시스템을 더 쉽게 조정할 수 있음
          + 반면 Unix는 여전히 수십 개의 DSL과 일관성 없는 파일 위치로 인해 어려움을 겪고 있음
          + 구성 파일을 지원하는 각 프로그램에는 자체 구문이 있으며, 프로그램이 읽는 위치를 아는 것은 어렵고 항상 잘 문서화되지는 않음
          + Linux 생태계는 XDG 및 dconf(이전에는 GConf)를 통해 NT와 유사한 접근 방식을 추진했지만 데스크톱 구성 요소는 이러한 기술을 독점적으로 사용하는 반면 시스템의 기본 구성 요소는 이를 채택하지 않아 일관성 없는 엉망진창을 남김
     * Internationalization:
          + Microsoft는 이미 전 세계에 Windows 3.x를 출시하고 있는 대기업으로서 지역화가 중요하다는 것을 이해하고 NT가 처음부터 이러한 기능을 지원하도록 만들었음
          + 이를 UTF 지원이 1990년대 후반까지 나타나기 시작하지 않았고 선택적 gettext 추가 기능을 통해 다른 언어를 지원한 Unix와 대조해 볼 것
     * C 언어:
          + FreeBSD 및 NetBSD와 같은 Unix 시스템이 한동안 꿈꿔 온 한 가지는 더 안전한 방식으로 커널을 구현하기 위해 자체 C 방언을 고안하는 것임
          + 이는 GCC 전용 확장에 의존하는 Linux를 제외하고는 어디에도 가지 않았음
          + 반면 Microsoft는 C 컴파일러를 소유하는 특권을 가지고 있었으므로 Microsoft C로 작성된 NT에서 이를 수행했음
          + 예를 들어 NT는 소프트웨어 및 하드웨어 예외를 처리하기 위해 try/except 절을 추가하는 기능인 Structured Exception Handling(SEH)에 의존함
          + 이것이 큰 장점이라고는 말하지 않겠지만 실제로 차이점임

결론

     * NT는 출시 당시 획기적인 기술이었음
     * 위에서 설명했듯이 오늘날 시스템 설계에서 당연하게 여기는 많은 기능이 NT에는 처음부터 존재했지만, 거의 모든 다른 Unix 시스템은 시간이 지남에 따라 그러한 기능을 천천히 얻어야 했음
     * 그 결과 이러한 기능은 Unix 철학과 항상 원활하게 통합되지는 않음
     * 그러나 오늘날 NT가 Linux나 FreeBSD보다 진정으로 ""더 발전했는지""는 분명하지 않음
          + NT는 시작부터 더 견고한 설계 원칙과 동시대의 운영 체제보다 더 많은 기능을 가지고 있었지만, 요즘에는 차이가 모호함
          + 즉, NT는 발전했지만 현대 Unix만큼 상당히 더 발전하지는 않았음
     * NT에 이러한 모든 견고한 설계 원칙이 있음에도 불구하고 UI의 비대화로 인해 설계가 빛을 발하지 못한다는 점이 실망스러움
          + 초강력 머신에서도 OS의 느린 속도는 목격하기 고통스러울 수 있으며 심지어 이 OS의 종말로 이어질 수도 있음

GN⁺의 정리

     * 이 글은 NT와 Unix의 설계 차이를 비교하여 NT의 초기 설계가 얼마나 진보적이었는지를 설명함
     * NT는 처음부터 이식성, 다중 처리 지원, 호환성을 목표로 설계되었으며, 이는 Unix와의 주요 차이점임
     * NT의 객체 지향 커널, 통합 메모리 아키텍처, 비동기 I/O 인터페이스 등은 Unix보다 더 진보된 기능을 제공함
     * 그러나 오늘날 NT와 Unix 시스템 간의 차이는 크지 않으며, NT의 UI 비대함이 성능 저하를 초래함

        Hacker News 의견

     * NT 커널은 훌륭하지만 오래된 설계임
          + Windows OS는 NT 커널 위에 많은 구식 요소가 쌓여 있어 문제 발생
          + Microsoft는 Win32와 MS-DOS 패러다임에서 벗어나 NT 기반의 새로운 OS 설계를 고려해야 함
     * NT와 Unix의 가장 큰 차이점은 드라이버 접근 방식임
          + NT는 Windows 3.x/95/98의 드라이버 문제를 해결하기 위해 설계됨
          + Unix는 드라이버를 고신뢰성 구성 요소로 간주하며 커널 개발자가 작성함
     * 현대 WinNT에서는 Direct3D가 커널의 필수 부분임
          + D3D11은 GPU 없이도 사용 가능하며, WARP라는 소프트웨어 대체 기능 제공
          + Linux에는 이와 유사한 기능이 부족함
     * NT 커널은 프로세스가 아닌 스레드를 실행함
          + 스레드는 몇 밀리초 내에 생성 가능하며, 프로세스는 무겁게 작동함
          + NT의 역사는 VMS의 기본 원칙에 뿌리를 두고 있음
     * WindowsNT는 초기에는 Linux보다 훨씬 더 잘 설계된 시스템이었음
          + NT는 Win32, OS/2, POSIX를 실행할 수 있었음
          + POSIX는 미국 정부의 대형 소프트웨어 계약을 위해 추가되었으나, 이후 관심을 잃음
     * NT는 세 번째 시스템으로서 두 번째 시스템 증후군을 피함
          + OS/2는 기술적으로 잘못된 문제를 해결했으며, 조직적으로도 실패함
          + NT는 Windows XP까지 널리 사용되지 않았음
     * 개발자 관점에서 Windows와 Linux의 차이점이 있음
          + 명령줄과 글로빙 방식에서 Windows가 더 우수함
          + Win32의 wchar_t 사용은 문제임
     * NT 커널은 우아함을 가지고 있지만, 오픈 소스가 아님
          + 다른 사용자 공간과 데스크탑 환경을 가진 Windows는 흥미로울 것임
     * Linux의 FUSE와 같은 융합이 있었음
          + Win NT의 파일 시스템 접근 방식은 많은 파일 시스템 작업을 매우 느리게 만듦
          + Microsoft는 WSL1을 포기하고, SQLLite나 ZIP 파일 같은 컨테이너를 사용함
"
"https://news.hada.io/topic?id=16789","Show HN: Bullshit Remover 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show HN: Bullshit Remover 소개

        Hacker News 의견

     * Eigenvectors는 선형 변환을 받아도 방향이 변하지 않는 벡터임
          + 선형 변환 T가 적용될 때, 고유 벡터 v는 상수 λ에 의해 스케일됨
          + 수학자들이 고유 벡터를 중요하게 여기는 이유가 있음
     * 필립스는 기술 혁신을 통해 사람들의 건강과 웰빙을 개선하려고 함
          + 2030년까지 25억 명의 삶을 개선하는 것을 목표로 함
          + 기술을 통해 삶을 더 나아지게 할 방법이 항상 있다고 믿음
     * Claude라는 AI 어시스턴트는 자신의 프롬프트나 내부 작동 방식을 공유하지 않음
          + Anthropic에서 만든 AI 어시스턴트임
     * 채용 과정에 참여해줘서 감사하지만 다른 후보자와 진행하기로 결정했음
          + ""직업을 얻지 못했음. 우리가 연락할게 (하지만 연락하지 않을 것임)""이라는 의미임
     * Git v2.46.1이 출시되었음
          + 이번에는 보안 수정이 아닌 다양한 명령어 수정이 주된 내용임
          + 업데이트를 서두를 필요는 없음
     * ChatGPT Enterprise는 여러 대기업에서 사용 중임
          + 새로운 도구를 추가하여 기업 고객의 컴플라이언스 프로그램 관리, 데이터 보안 강화, 사용자 접근 확장을 지원함
     * 정부의 Appalachia 지원이 오히려 사람들에게 그 지역을 떠나는 것이 더 나은 선택임을 가르쳐줌
          + 새로운 도로는 사람들이 그 지역을 빠르게 떠날 수 있게 해줌
          + 빈곤 문제를 해결하는 가장 좋은 방법은 다른 곳으로 이동하는 것임
"
"https://news.hada.io/topic?id=16711","$20로 RCE 달성 후 우연히 .mobi 관리자 된 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $20로 RCE 달성 후 우연히 .mobi 관리자 된 사건

    요약

     * 연구 배경
          + 연구는 동료들과 함께 재미로 시작되었음.
          + WHOIS 클라이언트의 취약점을 현실에서 악용할 수 있는지 연구함.
          + .MOBI TLD의 WHOIS 서버가 이전되었고, 이전 도메인이 만료된 것을 발견함.
          + 도메인을 $20에 구매하여 WHOIS 서버를 설정함.
     * 연구 결과
          + 135,000개 이상의 시스템이 WHOIS 서버에 쿼리를 보냄.
          + 주요 쿼리 출처: .GOV, .MIL 엔티티, 사이버 보안 도구 및 회사들.
          + 인증 기관들이 도메인 소유자 확인을 위해 WHOIS 서버를 사용함.
          + GlobalSign을 통해 'microsoft.mobi' 도메인의 소유자 이메일을 'whois@watchtowr.com'으로 설정할 수 있었음.
          + 이는 CA 프로세스를 무력화시키는 결과를 초래함.
     * 공격 시나리오
          + WHOIS 클라이언트의 취약점을 악용하기 위해서는 다음 조건이 필요함:
               o MiTM 공격
               o WHOIS 서버 접근
               o WHOIS 리퍼럴 설정
          + 연구팀은 WHOIS 서버를 설정하여 실제로 쿼리를 받음으로써 공격 가능성을 입증함.
     * 구체적인 취약점
          + phpWHOIS (CVE-2015-5243): WHOIS 서버에서 받은 데이터를 PHP eval 함수로 실행하여 RCE 발생.
          + Fail2Ban (CVE-2021-32749): WHOIS 클라이언트의 출력을 제대로 검증하지 않아 명령어 삽입 취약점 발생.
     * 현실적인 영향
          + 많은 인터넷 인프라가 오래된 WHOIS 서버를 참조하고 있음.
          + 주요 도메인 등록기관, WHOIS 기능 웹사이트, 사이버 보안 도구 등이 영향을 받음.
          + TLS/SSL 인증 기관들이 WHOIS 데이터를 사용하여 도메인 소유자 확인을 수행함.
     * 해결책
          + 연구팀은 ShadowServer와 협력하여 dotmobiregistry.net 도메인을 싱크홀 시스템으로 전환함.
          + 연구 결과를 통해 레거시 인프라의 문제와 TLS/SSL 인증 기관의 취약점을 강조함.

    GN⁺의 정리

     * 이 연구는 WHOIS 클라이언트의 취약점을 현실에서 악용할 수 있는 가능성을 입증함.
     * TLS/SSL 인증 기관의 도메인 소유자 확인 프로세스가 쉽게 무력화될 수 있음을 보여줌.
     * 많은 인터넷 인프라가 오래된 WHOIS 서버를 참조하고 있어 보안 위험이 큼.
     * 연구 결과는 레거시 인프라의 문제와 TLS/SSL 인증 기관의 취약점을 강조함.
     * 비슷한 기능을 가진 프로젝트로는 Let's Encrypt가 있음.

        Hacker News 의견

     * 도메인을 절대 만료시키지 말아야 함
          + 도메인을 비즈니스와 연관시키면 영원히 갱신해야 함
     * 인터넷이 사라질까 두려움
          + 누군가 호텔 방에서 Raspberry Pi로 인터넷을 망칠 수 있음
     * WHOIS 서버 목록을 하드코딩하는 도구들에 대한 의문
          + DNS에 등록하는 표준 방법이 있지만 많은 TLD가 기록이 없음
          + 예시: dig _nicname._tcp.fr SRV +noall +answer
     * 오래된 도메인을 갱신하는 것이 중요함
          + 도메인을 사용하면 팀이 끝날 때까지 갱신해야 함
          + 오래된 도메인을 언제 놓아줄지 알기 어려움
     * dotmobiregistry.net 도메인이 ShadowServer의 싱크홀 시스템으로 리디렉션됨
          + 도메인이 폐기될 예정이라면 404를 반환하는 것이 더 나음
     * 컴퓨터 접근 방식은 실패할 운명임
          + SBOM 체크와 빈번한 업데이트로 완벽한 보안을 달성하는 것은 불가능함
          + 모든 시스템은 항상 버그와 취약점이 있을 것임
     * 만료된 WHOIS 서버 도메인을 구매하여 얻는 공격 표면이 엄청남
     * WHOIS의 진정한 해결책은 RDAP임
          + ccTLD에는 필수 사항이 아니며 많은 non-ccTLD가 작동하지 않음
          + 참고 링크: Registration Data Access Protocol
     * 로그를 데이터베이스에 저장한 것이 흥미로움
          + sqlite3 whois-log-copy.db ""select source from queries""|sort|uniq|wc -l 명령어 사용에 대한 의문
     * 문제를 해결하려는 노력에도 불구하고 상황이 악화됨
          + 반대자들이 파싱 문제를 고쳤다면 더 나은 결과를 얻었을 것임
"
"https://news.hada.io/topic?id=16757","보잉 노동자 파업 찬반 투표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            보잉 노동자 파업 찬반 투표

        Hacker News 의견

     * Boeing 경영진의 엔지니어링 기업 문화 파괴에 대한 분노가 많음
          + 노조가 요구하는 것이 단순히 임금 인상과 근로 시간 단축인지, 아니면 기업 문화 개선인지 불분명함
          + 노조는 기업 문화를 위해 존재하지 않음
     * Boeing 엔지니어들이 의료 기기로 전환하는 사례가 많음
          + 최근 몇 년간 최고의 의료 기기들이 이러한 전환 덕분에 나옴
     * Boeing 관련 다큐멘터리를 시청한 후, 두 번의 비행기 추락 사고와 기타 문제에도 불구하고 형사 기소를 피한 것이 놀라움
          + 2022년부터 배선 문제를 알고 있었지만 FAA는 2024년에야 검사 명령을 내림
          + 앞으로 모든 종류의 Boeing을 피하려고 함
     * 협상 팀이 회원들과 동떨어져 있는 것 같음
          + 96%의 투표로 거부된 합의안이 나옴
     * 새로운 이웃과의 대화에서 Boeing 내부 문제에 대한 의견이 일치함
          + 너무 많은 MBA, 재무 공학과 주주 환원에 집중, 엔지니어링에 대한 집중 부족
          + CEO가 시애틀 외부에 있는 것에 대한 불만
          + Boeing이 파산하지는 않겠지만, 현재 상태로 계속 가면 구제 금융이 필요할 것 같음
          + 노조를 지지함
     * McDonnell Douglas와의 합병이 Boeing을 망쳤다고 생각함
          + 안전과 성능보다 이익을 우선시함
     * Jim McNerney가 기업 문화를 파괴하고 수십 년간의 신뢰를 훼손함
          + Boeing이 엔지니어링과 제조 중심의 회사로 돌아가야 함
          + 파업이 그 목표에 가까워지는 방법 중 하나임
     * 노동력 조직화 자체가 긍정적임
          + 계급 연대를 보여주는 것이 중요함
          + 일반 파업이 다가오고 있음
          + 일반 파업은 노동 계급이 경제적 미래에 대한 통제권을 얻기 위해 작업을 중단하는 것임
          + 이러한 시스템은 비윤리적이며, 자본을 실제 가치를 생산하는 사람들에게 돌려줘야 함
     * 회사의 패배와 주주의 패배는 다름
"
"https://news.hada.io/topic?id=16709","고품질 글꼴에서 얻을 수 있는 이점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          고품질 글꼴에서 얻을 수 있는 이점

     * 폰트의 숨겨진 기능들 : 가변 축, 대체 글리프, 스타일 대체, 스와시, 숫자, 소문자 대문자(Small Caps), 문맥 대체

가변 축

     * OpenType 폰트는 하나 이상의 축을 가질 수 있으며, 축 값을 변경하여 폰트의 외관을 변경할 수 있음
     * 가장 일반적인 축은 wght로 폰트의 굵기를 조절함
     * 다른 일반적인 축으로는 wdth(너비), slnt(기울기), ital(이탤릭), opsz(광학 크기)가 있음
     * CSS 속성을 사용하여 축을 조작할 수 있음
     * font-variation-settings 속성은 상속 문제를 일으킬 수 있으므로, 가능한 경우 특정 CSS 속성을 사용하는 것이 좋음

대체 글리프

     * 폰트는 특정 문자에 대한 대체 글리프를 포함할 수 있음
     * 대체 글리프는 숫자, 스와시, 합자 등 다양한 스타일을 포함함

스타일 대체

     * 스타일 대체는 특정 문자의 대체 형태를 활성화하는 기능임
     * salt는 모든 문자의 스타일 대체를 활성화함
     * ss01, ss02 등 스타일 세트는 특정 문자 집합을 대체함
     * cv01, cv02 등 문자 변형은 단일 문자를 대체함
     * CSS 속성 font-feature-settings와 font-variant-alternates를 사용하여 대체 글리프를 활성화할 수 있음

스와시

     * 일부 글꼴에는 제목에 약간의 개성을 더하는 데 사용할 수 있는 스와시가 포함
     * 스와시는 제목에 개성을 더할 수 있는 장식적인 요소임
     * font-feature-settings와 font-variant-alternates를 사용하여 스와시를 활성화할 수 있음

숫자

     * 폰트는 다양한 숫자 글리프 세트를 포함할 수 있음
     * 숫자는 라이닝 또는 올드 스타일, 탭형 또는 비례형으로 나뉨
     * 탭형 숫자는 동일한 너비를 가지며, 비례형 숫자는 너비가 다름
     * 라이닝 숫자는 대문자와 같은 높이를 가지며, 올드 스타일 숫자는 소문자와 같은 높이를 가짐
     * font-variant-numeric 속성을 사용하여 원하는 숫자 스타일을 설정할 수 있음

소문자 대문자

     * 소문자 대문자는 소문자를 대체하는 대문자 변형임
     * font-variant-caps 속성을 사용하여 소문자 대문자를 활성화할 수 있음
     * 폰트에 소문자 대문자가 없으면 브라우저가 이를 합성할 수 있음

문맥 대체

     * 문맥 대체는 주변 문자에 따라 글리프를 자동으로 대체하는 기능임
     * 예를 들어, ->를 화살표로 대체하거나, 대문자 사이에 있을때 @의 위치를 조정할 수 있음
     * 문맥 대체는 기본적으로 활성화되어 있으며, font-variant-ligatures 속성을 사용하여 비활성화할 수 있음

GN⁺의 정리

     * 고품질 폰트는 다양한 기능을 제공하며, 이를 활용하면 타이포그래피의 품질을 크게 향상시킬 수 있음
     * OpenType 폰트의 가변 축과 대체 글리프 기능은 특히 유용함
     * 문맥 대체와 같은 기능은 개발자와 사용자 모두에게 편리함

   폰트 기능을 올바르게 지원하는 것이 왜 이렇게 어려운지 의문임

     인류 전체의 역사와 함께한 문제니.. 뭔가 해줄것이 얼마나 많겠습니까!

   폰트 렌더링은 어렵다

   https://faultlore.com/blah/text-hates-you/

   ligature는 도통 적응이 안되더라구요..

        Hacker News 의견

     * 숫자가 여러 줄에 걸쳐 정렬될 때 유용함
     * 시계나 카운트다운 같은 것에도 유용함
     * 화면에서 시간이 점프하는 것이 매우 짜증남
     * 폰트 파일을 조사하고 싶다면 Wakamai Fondue 사용 추천
     * 표 형식 숫자는 매우 유용한 기능임
     * Google Fonts는 파일 크기를 줄이기 위해 고급 OpenType 기능을 거의 제거함
          + 예: Google 버전의 Inter 폰트는 11개의 기능을 제공하지만, 전체 버전은 44개의 기능을 제공함
     * 페이지의 글꼴이 아름다움
     * 소문자 대문자(small caps) 사용이 멋짐, 더 많은 웹사이트에서 사용되길 바람
     * Berkeley Mono v2 출시 여부 확인, 아직 출시되지 않음
     * wght(무게) 축의 동작이 이상함, 400 이하로 슬라이드하면 텍스트가 얇아지면서 압축되지만, 400 이상으로 슬라이드하면 텍스트가 두꺼워지기만 함
     * VSCode에서 다른 폰트를 사용하여 주석, jsdocs, 기타 구문 강조 기능을 지원하려면 vscode-custom-css 확장 사용 필요
          + 예:
.mtki {
  font-family: 'IosevkaNFM-ExtraLightItalic', monospace !important;
  font-style: italic !important;
  color: #757575 !important;
}
.comment {
  font-family: 'IosevkaNFM-ExtraLightItalic', monospace !important;
  font-style: italic !important;
  color: #757575 !important;
}
.comment:not(.punctuation) {
  font-family: 'IosevkaNFM-ExtraLightItalic', monospace !important;
  font-style: italic !important;
  color: #757575 !important;
}

          + VSCode의 폰트 처리 기능이 버그가 많아 실험이 많이 필요함
     * 폰트 기능을 올바르게 지원하는 것이 왜 이렇게 어려운지 의문임
     * 타이포그래피에 관심이 있다면 Butterick's Practical Typography 추천
          + 인쇄 및 디지털 문서를 아름답게 만드는 실용적인 조언이 가득함
          + 그의 폰트 라이선스는 매우 관대함, 페이지 뷰 수에 대한 제한이 없음
          + 그의 폰트는 오픈 소스가 아니지만, 아름다움
          + Valkyrie와 Concourse 폰트를 구매했으며, Concourse는 문맥적 대안에 매우 유연함
"
"https://news.hada.io/topic?id=16796","HN 질문: 힘든 삶을 겪은 전직 영재들의 현재 모습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     HN 질문: 힘든 삶을 겪은 전직 영재들의 현재 모습

     * 여러 가지 인생 이유로 인해 나는 우울증을 겪게 되었고, 자폐증과 ADHD를 가지고 있음 (진단 및 치료 받음)
     * 대학을 졸업한 후에야 ADHD 치료를 받기 시작함
     * 이 Ask HN의 목적은 동정심을 유발하려는 것이 아니라, 나와 비슷한 사람들의 상태에 대한 데이터를 얻기 위함임
     * 나의 ACE 점수는 6임
     * 현재 사람들에게는 성공적으로 보일지 모르지만, 나는 성취감을 느끼지 못함
     * 내 추정 순자산은 집 자산을 포함해 약 30만 달러 이상임
     * 내 삶의 질에 대한 가장 큰 걱정은 안전하다고 느끼지 못하는 것임 (묻지 말아줬으면 함)
     * 당신의 ACE 점수는 얼마이며, 당신의 삶에 얼마나 만족하고 있는지?
     * ACE 퀴즈: 링크

GN⁺의 정리

     * 이 글은 자폐증과 ADHD를 가진 사람이 자신의 삶에 대해 솔직하게 이야기하는 내용임
     * ACE 점수를 통해 어린 시절의 역경이 현재의 삶에 어떤 영향을 미치는지에 대한 데이터를 수집하고자 함
     * 비슷한 경험을 가진 사람들이 자신의 상태를 공유하고, 서로에게 도움이 될 수 있는 정보를 제공하는 것이 목적임
     * 이 글은 정신 건강 문제를 가진 사람들에게 공감과 이해를 제공할 수 있음
     * 비슷한 기능을 가진 프로젝트로는 정신 건강 커뮤니티 포럼이나 지원 그룹이 있음

        Hacker News 의견

     * 첫 번째 의견
          + ACE 점수 8
          + 어려운 어린 시절을 보냈음
          + 현재는 IT 부사장으로 성공적인 경력을 쌓았음
          + 가족과 직원들을 매우 소중히 여김
          + 현재 삶에 만족하고 행복함
     * 두 번째 의견
          + ACE 점수 8
          + 행복한 결혼 생활과 두 자녀를 둔 삶을 살고 있음
          + 청소년기와 20대는 힘들었지만 극복했음
          + 새로운 직장에서 자신의 배경을 너무 일찍 이야기하지 않으려 함
          + 자전거 타기와 집에서 요리하는 것이 기분을 좋게 만듦
     * 세 번째 의견
          + ACE 점수 4
          + 20대에 주요 우울증을 겪었으나 지금은 강해졌음
          + 유럽으로 이주하여 FAANG에서 일하고 있음
          + 활발한 사회 생활을 즐기고 있음
     * 네 번째 의견
          + ACE 점수 4
          + 성인 생활이 어렵다고 느끼지만 완전히 기능하는 성인임
          + 우울증을 겪고 있지만 이를 받아들였음
          + 직장에서 쉽게 지루해지고 환멸을 느끼며 자주 직장을 바꿈
          + 동료들에 대한 부정적인 감정을 가지고 있음
     * 다섯 번째 의견
          + ACE 점수 0
          + 자신이 성공적이지 않다고 느끼며 평균 이하의 삶을 살고 있음
          + 친구가 많지 않고 연애 경험도 없음
          + 어린 시절의 트라우마가 더 많은 동기를 부여할 수 있다고 생각함
     * 여섯 번째 의견
          + ACE 점수 7
          + 가족 중 대부분이 사망했음
          + 결혼하여 두 명의 멋진 아들을 둔 삶을 살고 있음
          + 자신이 즐거움을 느끼는 일을 하며 가족을 돌봄
     * 일곱 번째 의견
          + ACE 점수 4
          + 어린 시절 교육에 대한 열정을 잃었음
          + 부모와의 관계가 좋지 않았으며 아버지는 알코올 중독자였음
          + 최근 몇 년간 직업과 경력에서 어려움을 겪었음
          + 어린 시절이 현재의 삶에 큰 영향을 미쳤음을 인식하고 있음
"
"https://news.hada.io/topic?id=16728","FreeCAD 1.0 첫 번째 릴리스 후보 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FreeCAD 1.0 첫 번째 릴리스 후보 출시

FreeCAD 1.0 첫 번째 릴리스 후보 출시

     * FreeCAD 1.0 첫 번째 릴리스 후보(RC1) 출시
          + FreeCAD 1.0의 첫 번째 릴리스 후보 빌드를 공개함
          + 주간 빌드를 사용하며 버그를 보고한 사용자들의 기여 덕분에 소프트웨어의 안정성을 높일 수 있었음
     * 릴리스 후보의 목적
          + 불안정한 소프트웨어를 피하는 사용자들에게 거의 완성된 소프트웨어를 제공하고, 그들이 발견한 문제를 보고받기 위함
          + 현재 7개의 릴리스 차단 문제가 남아있지만, 릴리스 후보를 통해 더 많은 문제를 발견하는 것이 목표
     * 사용자 참여 요청
          + RC1을 다운로드하여 실제 프로젝트에 사용해보고, 발견한 버그를 이슈 트래커에 보고해달라는 요청
          + 개발자들에게는 문제를 해결하고 풀 리퀘스트를 제출할 것을 권장함
          + 매주 월요일에 열리는 병합 회의에 참여 가능
     * 커뮤니티 반응
          + 여러 사용자가 릴리스 후보에 대한 감사와 기대감을 표현함

GN⁺의 정리

     * FreeCAD 1.0의 첫 번째 릴리스 후보가 출시되었음. 이는 거의 완성된 소프트웨어를 사용자들에게 제공하여 최종 릴리스 전에 더 많은 버그를 발견하고 수정하기 위함임.
     * 사용자는 RC1을 다운로드하여 실제 프로젝트에 사용해보고, 발견한 버그를 보고할 수 있음. 개발자들은 문제를 해결하고 풀 리퀘스트를 제출할 수 있음.
     * FreeCAD는 3D 파라메트릭 모델링을 위한 강력한 오픈 소스 솔루션으로, 이번 릴리스 후보는 소프트웨어의 안정성을 높이는 중요한 단계임.
     * 비슷한 기능을 가진 다른 프로젝트로는 Blender와 OpenSCAD가 있음.

        Hacker News 의견

     * 링크 제안: 댓글보다는 페이지로 직접 링크하는 것이 더 좋음
     * Solidworks와 FreeCAD 비교:
          + Solidworks는 직장이나 학교를 통해 사용하지 않는 한 매우 비쌈
          + 개인 라이선스는 수천 달러에 달하며, 취미용 버전은 데스크탑 버전을 제공하지 않음
          + 회사 라이선스가 만료된 후 Solidworks 사용 중단
          + Fusion을 사용했으나 Solidworks만큼 좋지 않았음
          + 현재 Mac에서 FreeCAD 사용 중이며, 적응하는 데 시간이 걸리지만 비용 절감 효과가 큼
     * FreeCAD의 UX 문제:
          + Shapr3D나 Fusion에 비해 UX가 여전히 부족함
          + 작업 환경 변경 시 예측 불가능한 결과가 발생하고, STEP 파일 가져오기가 여전히 버그가 있음
     * 취미용 CAD 소프트웨어:
          + Fusion이 유료화되면서 더 많은 사람들이 FreeCAD를 사용할 것으로 기대됨
          + OnShape와 OpenScad를 사용하는 취미 사용자들이 많지만, 실제로 FreeCAD 사용자를 본 적은 없음
     * FreeCAD의 안정성 문제:
          + 대부분의 무료 CAD 도구보다 우수하다고 생각하지만, 안정성 문제로 인해 사용이 어려움
          + 새로운 주요 버전이 나올 때마다 시도하지만, 두 시간 후에 포기하게 됨
          + Blender처럼 안정성과 UX 개선을 위한 도움이 필요함
     * FreeCAD와 GIMP 비교:
          + 매우 강력하지만 UI가 다루기 어려움
     * OpenCAD와 AI 모델 결합:
          + 소규모 3D 프린팅 프로젝트에서 OpenCAD와 AI 모델을 결합한 경험 공유
          + 정밀도와 정확도가 인상적임
          + 이 접근 방식을 확장하는 데 따른 한계나 도전 과제가 있는지 궁금함
          + OpenCAD + AI를 사용한 다른 사람들의 경험을 듣고 싶음
     * FreeCAD 1.0 릴리스 노트:
          + 주요 개선 사항은 토폴로지 명명법 개선
     * FreeCAD 학습 자료 요청:
          + 인터페이스가 접근하기 어렵다고 느껴짐
          + 기본 3D 모델링에는 OpenSCAD를 주로 사용함
     * 기계 엔지니어의 FreeCAD 사용 경험:
          + Solidworks Maker나 Fusion 360을 주로 사용했음
          + UI가 구식이지만 Catia V5와 유사한 점이 많음
          + Vim/Emacs처럼 사용해봐야 이해할 수 있음
"
"https://news.hada.io/topic?id=16685","GitHub이 실제로 승리한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GitHub이 실제로 승리한 이유

     * GitHub이 승리한 이유는 두 가지로 요약할 수 있음
         1. 적절한 시기에 시작했음
         2. 좋은 감각을 가졌음

  초기 환경

     * 2005년 즈음, 소프트웨어 개발자는 대부분 Subversion과 같은 중앙 집중형 버전 관리 시스템을 사용
     * Git과 Mercurial이 처음 커밋된 시점이 이 즈음이며, 오픈 소스 기여는 아직도 복잡하고 비효율적이었음
     * 오픈 소스 프로젝트 수는 2005년에 매우 적었고, 전체적으로 중앙 집중형 시스템이 오픈 소스 기여에 적합하지 않았음

  Git의 등장

     * Git은 Linus Torvalds가 기존 BitKeeper의 라이선스 문제로 인해 개발한 버전 관리 시스템
     * Git의 주요 장점:
          + 브랜치와 병합이 매우 쉬움. 빠른 속도, 간단한 권한 관리
          + 분산형 구조로 자신만의 포크를 쉽게 만들 수 있고, 풀 요청이 쉬워짐

  GitHub의 등장

     * GitHub의 창립자들은 Git 호스팅의 어려움을 해결하기 위해 GitHub를 개발
     * 사용자를 중심으로 한 접근법을 통해 프로젝트 중심의 기존 호스팅 방식과 차별화됨
          + 사용자 중심의 네임스페이스와 풀 모델을 도입
     * ""안 예쁘지 않음""을 핵심 기능으로 삼음
     * 초기 루비 커뮤니티가 GitHub를 빠르게 수용하면서 성장의 발판이 됨

  Git의 승리

     * Git이 성공한 이유 중 하나는 Linus Torvalds와 Linux 커뮤니티의 PR 효과 덕분
     * GitHub는 루비 커뮤니티와의 강력한 연계를 통해 홍보 효과를 얻었고, 이는 Git의 성장에 기여했음
     * Git의 다른 분산 버전 관리 시스템에 비해 뛰어난 브랜치/병합 기능과 사용자 경험 중심의 호스팅이 큰 장점으로 작용

  경쟁의 붕괴

     * 2011년 Google Code와 BitBucket이 Git을 지원하면서 Mercurial의 패배가 확정
     * 다들 GitHub의 성장세를 따라잡지 못함
     * 2015년 Google Code는 서비스를 종료하고 GitHub로의 이전을 권장

  Google Code가 승리하지 못한 이유

     * 기존 대형 호스팅 서비스는 수익 모델과 배급에 초점을 맞추었지만, GitHub는 개발자 경험을 최우선으로 고려
     * Google Code, BitBucket 등은 GitHub에 비해 '맛'이 부족했고, 개발자 워크플로우를 제대로 이해하지 못함
     * GitHub는 창업 초기 자금 지원 없이도 성공했으며, 이는 사용자 경험과 커뮤니티 지원의 결과

  GitHub이 승리한 이유

     * GitHub는 새로운 패러다임이 형성되는 시점에 적절히 등장했으며, 개발자 경험을 최우선으로 고려하는 접근 방식이 성공의 핵심 요인
     * 오픈 소스 커뮤니티가 분산 버전 관리로 전환할 때, GitHub는 개발자 경험을 개선하는 데 집중했음
     * 앞으로의 과제는 다음 개발자 워크플로우의 변화가 무엇이 될지, 그리고 이를 성공적으로 구현할 수 있는 '맛'을 가진 회사가 누구일지 궁금

GN⁺의 정리

     * GitHub가 승리한 이유는 적절한 시기와 좋은 감각 덕분임
     * Git의 분산 특성과 GitHub의 사용자 중심 접근 방식이 결합되어 성공을 이끌었음
     * 오픈 소스 커뮤니티와의 긴밀한 관계가 GitHub의 인기를 높였음
     * 경쟁 서비스들은 개발자 경험에 대한 관심이 부족했음
     * GitHub의 성공은 개발자 경험을 중시하는 접근 방식의 중요성을 보여줌

   저도 처음에 웹 형태로 UI를 지원하는 Git 호스팅 서비스를 보면서, 이거는 시장에서 성공하겠다는 생각이 강하게 들었습니다. 나름 깃허브를 초기부터 사용했었는데 당시에도 엄청나게 잘 되어 있었던 게 기억이 나네요.

   MS 의 Github 인수를 두고 한국 경제계에서는 “MS가 돈이 남아도니 돈 안되는 Github을 인수했다”는 의견이 지배적이었었죠. 당시 저도 오픈소스인 데다가 Github 충분히 경쟁력 있고 자체구축 오픈소스라 매력적인 Gitlab 을 선호했었습니다. 하지만 시장은 한국의 기대와 완전히 상반된 결과를 보여줬습니다. 오픈소스 데이터 자산 빵빵한 Github이 경쟁에서 승리하고, 신뢰성을 등진 Gitlab 은 매물로 나와버리고 말았죠. 둘 다 한국 회사라면 물론 둘 다 망할 회사긴 하지만요.

   Github보다 개인적으로 Gitlab을 상당히 좋아했는데 시장경쟁에서 밀리는게 의아하고 안타깝습니다
   프로젝트 이슈관리부터 소스코드 관리, CI/CD에 위키에다 인프라 관리까지 싹다 그것도 잘 어우러져서 제공한 훌륭한 서비스인데도 참...
   Github이 선점효과를 굉장히 영리하게 잘 쓰기는 했지만 그게 경쟁에서의 결정적인 포인트가 될줄은 상상도 못했네요

   깃랩이 더 인기 많아졌으면 좋겠어요 ㅠ

   개인적인 느낌이지만 깃허브는 오픈 소스 프로젝트와 기여자가 자신들의 중요한 고객이라는 걸 알고 굉장히 잘 대우해주는 것 같았어요.

   그러고보니 소스포지 같은 사이트는 이제 진짜 밀려났네요

   와 추억의 소스포지

        Hacker News 의견

     * Google Code는 SourceForge의 독점적 문화를 막기 위해 시작되었음
          + Google Code는 돈을 벌기 위한 것이 아니었음
          + 목표를 달성한 후, GitHub 및 Bitbucket과 협력하여 마이그레이션 도구를 제공했음
          + 사람들이 질문하지 않아서 오해가 생겼음
     * SourceForge는 한때 악성 소프트웨어를 번들로 제공했음
          + 많은 개발자들이 GitHub의 원격 저장소가 SSH 연결만으로도 가능하다는 것을 모름
          + GitHub는 개인 저장소를 통해 수익을 창출했음
     * Linus의 유명세가 Git의 승리에 기여했음
          + GitHub는 Git의 친숙한 인터페이스로 인식됨
          + GitHub는 초기부터 Git에 집중했음
          + GitHub는 오픈 소스 호스팅 서비스로서 독점적임
     * GitHub는 Git의 승리 덕분에 성공했음
          + GitHub의 경쟁자들은 Git을 받아들이는 데 느렸음
          + 개발자들은 DVCS 선택에 열정적이었음
     * ""Taste""가 초기 시장 지배에 중요한 요소였음
          + 많은 프로젝트가 GitHub로 이동했음
          + GitHub의 ""Product-market fit""이 성공 요인이었음
          + 클라우드 컴퓨팅과 Web 2.0의 전환이 시기적으로 맞아떨어졌음
     * 비즈니스에는 진정한 승자가 없음
          + GitHub도 언젠가 대체될 수 있음
          + 암호화된 Git 저장소 서비스가 필요함
          + SourceHut는 관리자 문제로 인기가 없음
     * Subversion은 FTP보다 나았지만, Git은 더 나은 대안이었음
          + Git은 여전히 혼란스러울 수 있음
          + GitHub 없이는 Git이 성공하지 못했을 것임
     * Google Code는 Google의 오픈 소스 프로젝트를 위한 것이었음
          + Google은 자체 도구를 사용했음
          + Google의 프론트엔드 문화가 약했음
     * GitHub는 UX가 뛰어났음
          + BitBucket은 사용하기 어려웠음
          + GitHub는 무료 개인 호스팅을 제공하지 않았음
     * Git은 2005년에 만들어졌음
          + Git은 오래된 기술처럼 느껴짐
"
"https://news.hada.io/topic?id=16700","천천히, 그러다가 갑자기 - 불황은 어떻게 찾아오는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     천천히, 그러다가 갑자기 - 불황은 어떻게 찾아오는가

마케팅 월요일: 공적 인식과 불편한 진실

     * 오늘의 주제는 공적 인식과 불편한 진실에 관한 것임
     * 헨리 미닝웨이의 인용으로 시작함: 파산하는 방법은 두 가지, 천천히 그리고 한 번에
     * 조 바이든의, 2020년과 2024년의 사례를 언급함

  조 바이든의 사례

     * 2020년 바이든과 트럼프의 토론에서 바이든은 잘 보였다는 평가를 받음
     * 그러나 시간이 지나면서 바이든의 나이에 대한 의구심이 커짐
     * 2024년 토론 후 여론이 급변했음을 설명함
     * 불편한 진실은 사람들이 무시하다가 결국 주목하게 됨

  경제에 대한 인식

     * 소비자들은 경제에 대해 부정적인 반응을 보이고 있음
     * 59%의 미국인이 미국이 불황에 있다고 '잘못' 생각하고 있음
     * 제프 베조스의 인용을 통해 데이터와 일화의 불일치를 언급함
     * 데이터가 잘못 측정되어 실제 경향을 반영하고 있지 않을 수 있음

  고용 시장

     * 연준 의장의 발언을 인용하며 노동 시장의 변화에 대한 의문을 제기함
     * 대규모 해고가 발생하고 있음에도 불구하고 고용 수치가 증가한다고 주장됨
     * 새로운 일자리가 더 낮은 품질일 가능성을 고려해야 함

  경제의 구조적 문제

     * 미국의 실업률이 낮음에도 불구하고 이미 불황에 접어들었다는 지적
     * 불황이 시작된 시점에 대한 역사적 사례를 제시함
     * 고용 증가의 대부분이 정부에서 발생하고 있음을 언급함

  소비자 신뢰와 지출

     * RV 및 보트 판매 감소가 경제의 불안정성을 나타내는 지표로 작용하고 있음
     * 소비자들이 점점 더 많은 채무를 지고 있으며, 이는 비상 상황을 의미함
     * 기업 파산이 급증하고 있는 상황을 설명함

  결론

     * 각종 경제 지표와 신뢰도가 무너지고 있는 상황에서 변화는 급작스럽게 일어날 수 있음
     * 불편한 진실들이 쌓여가면서 결국 큰 변화로 이어질 수 있음
     * 경제의 전반적인 상태에 대한 냉철한 분석과 주의가 필요함
"
"https://news.hada.io/topic?id=16691","애플 히어링 스터디, 이명에 대한 예비 통찰 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플 히어링 스터디, 이명에 대한 예비 통찰 공개

  Apple Hearing Study의 이명에 대한 초기 통찰

   미시간 대학교 연구진이 지금까지 가장 큰 규모의 이명 설문 조사 데이터를 발표함
     * 이명 연구
          + Apple Hearing Study는 이명에 대한 새로운 통찰을 공유함
          + 미시간 대학교 연구진은 160,000명 이상의 참가자를 대상으로 설문 조사와 앱 기반 평가를 통해 이명 경험을 분석함
          + 이 연구는 이명의 특성을 이해하고 잠재적 치료법에 대한 미래 연구를 위한 정보를 제공하는 것을 목표로 함
     * 이명의 영향
          + 미시간 대학교 환경 건강 과학 교수 Rick Neitzel은 ""약 15%의 참가자가 매일 이명을 경험한다""고 말함
          + 이명은 사람의 삶에 큰 영향을 미칠 수 있으며, Apple Hearing Study를 통해 이명 경험에 대한 트렌드를 학습하여 가장 위험한 그룹을 더 잘 이해할 수 있음
          + 이명은 수면, 집중력, 청력 등에 영향을 미칠 수 있음
     * 이명 경험
          + 이명은 한쪽 또는 양쪽 귀에서 발생할 수 있으며, 소리는 다양한 형태를 취할 수 있지만 주로 울리는 소리로 설명됨
          + 이명의 증상과 경험은 사람마다 크게 다를 수 있으며, 개인 내에서도 변화할 수 있음

  이명의 유병률

     * 참가자의 77.6%가 일생 동안 이명을 경험한 적이 있음
     * 55세 이상 참가자는 18-34세 참가자보다 매일 이명을 경험할 가능성이 3배 높음
     * 남성 참가자는 여성보다 2.7% 더 많이 매일 이명을 경험한다고 보고함

  이명 관리 방법

     * 참가자들은 주로 세 가지 방법으로 이명을 완화하려고 시도함: 소음 기계 사용(28%), 자연 소리 듣기(23.7%), 명상(12.2%)
     * 2.1% 미만의 참가자만이 인지 및 행동 치료를 선택함

  이명의 원인

     * 이명의 복잡한 원인으로 인해 예방 방법이 보장되지 않지만, 청력 보호와 스트레스 관리가 이명 가능성을 낮출 수 있음
     * 참가자들은 ""소음 외상""을 이명의 주요 원인으로 꼽았으며(20.3%), 그 다음으로 스트레스(7.7%)를 꼽음

  이명의 특성

     * 대부분의 참가자는 짧은 에피소드의 이명을 경험하며, 14.7%는 지속적인 이명을 보고함
     * 55세 이상 참가자 중 35.8%가 지속적인 이명을 경험함
     * 남성 참가자는 여성보다 6.8% 더 많이 지속적인 이명을 경험함
     * 대부분의 참가자는 이명을 희미하게 느끼며, 34.4%는 눈에 띄는 수준, 8.8%는 매우 크거나 매우 큰 소리로 느꼈음
     * 10%의 참가자는 이명이 청력에 중간 정도 또는 완전히 방해된다고 보고함
     * 참가자들은 앱 기반 사운드 테스트를 통해 이명의 유형과 품질을 더 잘 특성화함
     * 참가자 중 78.5%는 이명을 순음으로, 17.4%는 백색 소음으로 설명함
     * 순음을 설명한 참가자 중 90.8%는 4킬로헤르츠 이상의 피치를 보고함

  Apple 제품이 도울 수 있는 방법

     * Noise 앱: Apple Watch 사용자는 환경 소음 수준이 청력 건강에 영향을 미칠 수 있을 때 알림을 받을 수 있음
     * 환경 소음 감소: AirPods Pro와 AirPods Max를 착용할 때 환경 소음 수준이 감소하는 것을 볼 수 있음
     * 능동 소음 제거 및 큰 소리 감소 모드: 능동 소음 제거는 외부 소음을 감지하고 이를 상쇄하는 반소음을 생성하여 외부 소음을 제거함
     * 큰 소리 감소: 설정에서 헤드폰 볼륨 제한을 설정할 수 있음

  GN⁺의 정리

     * Apple Hearing Study는 이명에 대한 대규모 데이터를 통해 이명의 특성과 관리 방법을 이해하는 데 중요한 기여를 하고 있음
     * 이 연구는 이명의 원인과 관리 방법에 대한 통찰을 제공하여 이명으로 고통받는 사람들에게 도움이 될 수 있음
     * Apple의 기술은 소음 수준을 모니터링하고 청력 건강을 지원하는 다양한 기능을 제공함
     * 유사한 기능을 제공하는 다른 제품으로는 Bose의 소음 제거 헤드폰과 같은 청력 보호 장치가 있음

        Hacker News 의견

     * AirPods Pro 2에 '임상 등급'의 보청기 기능 추가됨
     * 경미한 이명을 가진 사용자는 이명에 대해 생각하지 말고 주의를 다른 곳으로 돌리는 것이 좋음
          + 이명에 대해 생각할수록 심해짐
          + 게임을 할 때는 이명을 느끼지 못함
     * 성인 시절 이명을 겪었으나, 치아 문제로 인해 발생한 것임을 알고 치료 후 이명이 사라짐
          + 잘못된 치근관 치료로 인해 발생한 염증이 원인이었음
     * 드러머로서 이명을 겪은 사용자의 조언
          + 주파수가 변동하는지 확인하고, 변동한다면 뇌가 만들어낸 소리일 가능성이 있음
          + 일정한 소음으로 이명을 상쇄시키는 것이 좋음
          + 이어폰 사용을 피하고, 특히 베이스 부스트 이어폰은 피해야 함
          + 주의를 다른 곳으로 돌리는 것이 중요함
     * 20대부터 이명을 겪은 사용자가 약물 복용 중 잠시 이명이 사라진 경험을 공유함
          + 약 10초 동안 이명이 사라졌으나 다시 돌아옴
     * 최신 AirPods가 이명을 유발하는 사용자 경험
          + Gen 1 AirPod Pros는 괜찮으나 Gen 2 AirPod Pros는 낮은 볼륨에서도 이명을 유발함
          + HomePods도 높은 볼륨에서는 이명을 유발함
          + Sennheisers와 Audeze 헤드폰은 높은 볼륨에서도 이명을 유발하지 않음
     * 낮에는 이명을 무시할 수 있으나, 밤에는 음악을 틀어놓아야 잠을 잘 수 있음
          + Spotify를 낮은 볼륨으로 재생하여 이명을 최소화함
     * 자세와 목 문제로 인한 이명을 겪은 사용자의 경험
          + 자세를 교정한 후 이명이 거의 사라짐
          + Apple이 AirPods Pro의 가속도계를 이용해 머리 위치를 연구에 포함시키길 바람
     * 청력 테스트 후 보청기를 착용하여 이명이 사라진 사용자
          + Lyric 보청기는 아날로그지만 디지털로 프로그래밍 가능하며, 3-4개월마다 교체 필요
     * 이명을 가진 사람에게 질문: 흥얼거릴 때 소리가 들리는지
          + 흥얼거림은 내면의 독백을 멈추게 할 수 있음
          + 흥얼거림, 손가락으로 관자놀이와 어깨를 두드리는 연습, 의식적인 뇌 반구 전환, 머리부터 발끝까지의 이완 연습 등이 도움이 될 수 있음
"
"https://news.hada.io/topic?id=16723","데스크탑 API 클라이언트 Yaak, 오픈소스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     데스크탑 API 클라이언트 Yaak, 오픈소스로 전환

     * 3개월 전에 Yaak이 오픈 소스가 되지 않을 이유에 대해 설명하는 글 ""Why Not Open Source""를 공개했음
     * 과거 오픈 소스 프로젝트에서 번아웃을 경험했기에 다른 이들에게 의사 결정 과정이 도움이 될 것이라 생각하고 공유함
     * Yaak 사용자들은 대부분 동의했지만, 더 넓은 오픈 소스 커뮤니티에서는 대부분의 내용에 강하게 반대함

오픈 소스 커뮤니티의 반응

     *

     ""오픈 소스/자유 소프트웨어를 깃허브의 특정 사회적 모델이나 기여와 혼동하지 마라"" - lobste.rs
     *

     ""그러나 그런 것들은 모두 폐쇄 소스 소프트웨어에도 해당된다"" - ycombinator.com
     *

     ""이 글의 주장은 완전한 허튼소리다. 이 '앱'이 무엇인지도 모르겠다. 필요없다. 역사의 쓰레기통으로 가라"" - reddit.com
     * 대부분의 답글은 건설적이지 않았지만, 500단어로 된 lobste.rs의 댓글은 정말 훌륭했음. 이걸 보고 내가 틀렸을지도 모른다고 생각이 들었음

오픈 소스의 장점

     * 오픈 소스가 반드시 오픈 컨트리뷰션을 의미하지는 않음
     * 코드를 공개하는 것만으로도 대부분의 장점을 얻을 수 있음:
          + 보안 감사에 개방
          + 투명한 기능(수상한 것 없음)
          + 유연성(포크하고 수정할 수 있음)
          + 개발자가 떠나도 실행 가능

오픈 소스로 전환하되 제한적인 컨트리뷰션 허용

     * SQLite와 같이 오픈 소스이지만 외부 기여를 허용하지 않는 프로젝트가 존재함
     * Litestream은 초기에는 기여를 허용하지 않았지만 결국 버그 수정만 허용하도록 변경
     * Yaak 도 이 모델을 채택해 MIT 라이선스로 오픈 소스화하고 버그 수정만 기여 허용

   많은 댓글을 읽고 건설적인 내용을 뽑아 수용한 것에 감탄했습니다. 마음이 열려있는 사람이네요.

   건설적인 댓글도 정말 훌륭합니다

   글 내용에 포함된 500자 lobster.rs 댓글 요약입니다.
   이 댓글은 원글 Why Not Open Source ? 에 대해서 적은 것입니다.
     * 결론부터 말하자면, ""오픈소스"" / ""자유 소프트웨어"" 와 깃헙의 특정 소셜 모델인 Drive-by Contribution, 또는 Contribution 자체와 혼동하지 마세요
     * 오픈 소스가 작동하지 않는 이유에 대한 설명으로 동의하기 어려움
     * 제시된 많은 점들이 거짓 이분법임. 예를 들어 ""기능 추가는 현실적으로 어려우며, 유지보수자가 직접 구현하는 것이 더 빠른 경우가 많음""
     * 폐쇄 소스라면 항상 스스로 해야 하지만, 오픈 소스라도 원한다면 그렇게 할 수 있음. 다른 사람의 기여를 받아들일 의무는 없음

각 포인트별 반박

     기능 추가 가능 - 🟥 현실적으로는 어려움

     * 오픈 소스가 되기 위해 누구나 제출한 것을 받아들일 필요는 없음

     투명성이 높아짐 - 🟧 투명성을 위해서 오픈 소스가 필요하지 않음. 코드뿐 아니라 공개 로드맵 등으로도 가능

     * 좋은 지적임. 하지만 코드만 있는게 아니라, 코드도 있는 것임. 투명한 코드와 로드맵도 가질 수 있음

     보안이 개선될 것 - 🟧 경우에 따라 다름. 사용자가 오픈 소스 프로젝트의 코드를 감사하고 문제를 공개할 수 있음

     * 오픈 소스로 만들어도 나빠지지는 않음. 개선될 가능성은 적어도 단점은 없음

     커뮤니티가 성장할 것 - 🟧 노력을 투자해야만 가능. 오픈 소스에만 국한된 것은 아님

     * 역시 나빠지진 않지만, 저자도 크게 연관이 없다는 점은 인정함

단점에 대한 반박

     무례한 피드백 다루기 어려움

     * 폐쇄 소스에서도 피드백을 받게 됨. 어느 쪽이든 받아들일 필요는 없음

     오랜 피드백 사이클 관리하기 어려움

     * 피드백/변경사항 제출을 받지 않으면 됨. 개선 사이클이 없어짐

     승인 없이 제출된 기여를 거절하기 어려움

     * readme에 ""기여를 받지 않음""이라고 적고 모든 PR을 자동으로 닫으면 됨

     프로젝트가 성숙해지면 대부분을 거절하기 어려움

     * 폐쇄 소스라도 사용자는 계속 요청할 것임

     좋은 기여자가 떠나면 어려움

     * 다른 기여자를 받아들이지 않으면 됨. 오픈/폐쇄 소스나 차이 없음

     사람들이 무급으로 일한다는 사실을 받아들이기 어려움

     * 자유 소프트웨어가 무료를 의미하는 건 아님. 상용 자유 소프트웨어도 가능하고, 다른 사람이 무급인 걸 받아들일 필요 없음

     1000개 이상의 미해결 이슈가 있다는 것이 좋지 않음

     * 자동으로 닫으면 됨

     끝이 없다는 게 어려움

     * 폐쇄 소스에서 사용자/고객을 갖는 것도 마찬가지
"
"https://news.hada.io/topic?id=16681","Apple, iPhone 16 Pro 및 iPhone 16 Pro Max 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Apple, iPhone 16 Pro 및 iPhone 16 Pro Max 공개

     * 2세대 3나노 공정 A18 Pro
     * 16코어 Neural Engine, 6코어 GPU, 6코어 CPU(성능 코어 2개 및 효율 코어 4개)
     * ML 가속기로 Apple Intelligence 최적화
     * iPhone 16 Pro는 15.9cm(199g), Pro Max는 17.4cm(227g) 디스플레이
          + 2622 x 1206, 2868 x 1320 해상도 (460ppi)
          + Super Retina XDR 디스플레이에 상시표시 및 ProMotion
     * 티타늄 디자인과 최신 세라믹 쉴드로 내구성 향상
     * 카메라 컨트롤 버튼 도입
          + 하드웨어와 소프트웨어 결합으로 프로 카메라 시스템 강화
          + 피드백 전달하는 촉각 스위치, 제스처 감지하는 포스 센서, 터치 지원하는 정전식 센서 탑재
          + 확대/축소, 노출, 피사계 심도 등 여러 제어 옵션을 조절 가능
          + 2단 셔터 버튼 및 서드파티 앱 지원 예정
     * 카메라 향상
          + 48MP Fusion: 24mm, ƒ/1.78 조리개, 2세대 센서 시프트 광학 이미지 흔들림 보정(OIS), 100% Focus Pixels, 초고해상도 사진 지원(24MP 및 48MP)
               o 초당 120 프레임의 4K Dolby Vision 동영상 촬영
               o 12MP 2배 망원도 가능: 52mm, ƒ/1.6 조리개, 센서 시프트 광학 이미지 흔들림 보정(OIS), 100% Focus Pixels
          + 48MP 울트라 와이드: 13mm, ƒ/2.2 조리개 및 120° 시야각, 하이브리드 Focus Pixels, 초고해상도 사진(48MP)
          + 12MP 5배 망원: 120mm, ƒ/2.8 조리개 및 20° 시야각, 100% Focus Pixels, 7매(Seven-element) 렌즈, 3D 센서 시프트 광학 이미지 흔들림 보정(OIS) 및 오토포커스, 테트라프리즘 디자인
          + 12MP TrueDepth 카메라(전면): ƒ/1.9 조리개
     * 4개의 새로운 스튜디오급 마이크를 탑재
          + 공간 음향 캡쳐 지원
          + 머신 러닝(ML)으로 구동되는 ‘오디오 믹스’를 이용해 새롭고 창의적인 방식으로 비디오 사운드를 편집
     * Pro Max 기준 최대 33시간 동영상 재생, 105시간 오디오 재생하는 역대 최고의 아이폰 배터리 수명 제공
     * 30W 이상 규격의 어댑터 사용 시 최대 25W MagSafe 무선 충전
     * 최대 15W Qi2 무선 충전
     * Wi‑Fi 7 지원
     * 블랙 티타늄, 내추럴 티타늄, 화이트 티타늄, 데저트 티타늄 4가지 색상
     * Apple Intelligence 는 연내에 미국 영어로 우선 출시. 내년에는 중국어, 프랑스어, 일본어, 스페인어 등 더 많은 언어도 지원할 예정

   해커뉴스의 댓글도 같이 참고하세요

  Hacker News 의견

     * 스마트폰의 발전이 놀랍지만, 일반 사용자에게는 새로운 모델이 ""지루하다""는 의견이 있음
          + 일반 사용자는 LCD와 OLED의 차이를 모르며, 카메라 앱의 기능도 잘 사용하지 않음
          + 새로운 iOS 버전의 기능을 잘 모르고, 배터리가 나빠질 때마다 3-4년마다 새로운 모델을 구매함
          + Apple이 일반 모델에 Pro 기능을 추가하는 이유는 대부분의 사람들이 Pro 모델을 구매하지 않기 때문임
          + iPhone에 사용자 교체 가능한 배터리가 있다면 Apple의 비즈니스 모델이 붕괴될 것임
     * Apple의 새로운 기능에 대한 요약
          + 사진 및 앨범 검색에 비디오 이해 기능 추가
          + 메일과 알림이 요약 형태로 표시됨
          + Siri가 iPhone 사용 방법을 안내하고, 개인 컨텍스트 이해 기능을 통해 텍스트를 읽고 행동을 제안함
          + 새로운 iPhone 16 카메라 제어 버튼이 추가됨
          + 카메라가 이벤트를 캘린더에 추가함
          + 모든 작업이 기기와 클라우드에서 이루어짐
          + AI와 스마트폰 통합에 대한 아이디어가 매우 좋음
     * 새로운 iPhone 기능에 대한 흥미 부족
          + 작은 노치, Touch ID, 더 나은 배터리 수명, 빠른 충전, 더 큰 기본 저장 용량 등은 언급되지 않음
          + 많은 사람들이 매년 또는 2년에 한 번씩 최신 iPhone을 구매함
     * 사진에 대한 관심 변화
          + 과거에는 사진의 화질과 기능에 집착했지만, 이제는 사진을 찍지 않고 순간을 즐기는 것에 집중함
          + 카메라가 경험을 방해한다고 생각함
          + 2017년 Pixel 2 이후로 스마트폰 카메라 기술이 충분히 좋다고 생각함
     * 과거 iPhone 발표에 대한 회상
          + 10년 전 iPhone 6 발표 당시의 반응을 돌아보는 것이 흥미로움
     * Pro 모델과 기본 모델의 차별화 부족
          + Pro 모델의 주요 기능이 일반 모델에도 포함됨
          + ProMotion과 Always On 디스플레이는 여전히 Pro 모델에만 있음
     * 배터리 수명에 대한 정보 부족
          + Apple이 배터리 수명에 대해 구체적인 정보를 제공하지 않음
          + 새로운 기능이 추가되었지만 배터리 수명에 대한 정보는 여전히 모호함
     * Apple의 AI 기능 시연이 비현실적임
          + 단순히 개의 품종을 물어보는 대신, 카메라 앱을 열고 AI가 답을 줄 때까지 기다림
     * Apple 이벤트에 대한 친구들의 반응
          + 비기술적 친구들은 색상과 크기에만 관심을 가짐
          + 기술적 친구들은 Apple Intelligence에 흥미를 가짐
          + 기본 저장 용량이 128GB인 것에 대한 불만이 있음

   우리나라도 1차 출시국이어서 9월 13일 오후 9시 사전 주문 시작 및 9월 20일 출시 랍니다.
   아이폰 16 프로 ₩1,550,000부터, 프로 맥스는 ₩1,900,000부터

   근데 어제 간만에 발표 보고 잤는데.. 뭔가 특별한 재미는 없는 발표였습니다.
   애플 인텔리전스가 한국어는 언제 될지 모르기도 하고.

   그래도 내년에는 한국어 지원한다고 부랴부랴 발표했네요
"
"https://news.hada.io/topic?id=16759","OpenAI, Chain of Thought 질문 시 o1 접근 권한 철회 위협","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OpenAI, Chain of Thought 질문 시 o1 접근 권한 철회 위협

     * ChatGPT o1에게 ""Chain of Thought""에 대해 몇 번 질문하면, OpenAI 지원팀에서 이메일을 보내 o1 액세스 권한을 취소하겠다는 내용의 메일을 보냄

     ""사용자 경험, 경쟁 우위, Chain of Thought 모니터링 옵션 등 여러 가지 요소를 고려한 결과, 사용자에게 Raw Chain of Thought를 표시하지 않기로 결정했습니다. 이러한 결정에는 단점이 있음을 인정합니다. 저희는 모델에 답변의 Chain of Thought에서 유용한 아이디어를 재현하도록 교육함으로써 이를 부분적으로 보완하기 위해 노력하고 있습니다. o1 모델 시리즈의 경우 모델이 생성한 Chain of Thought 의 요약을 보여줍니다.

     이 활동을 중단하고 이용약관 및 사용 정책에 따라 ChatGPT를 사용하고 있는지 확인하시기 바랍니다. 이 정책을 추가로 위반할 경우 OpenAl o1에 대한 액세스 권한이 상실될 수 있습니다. ""

        Hacker News 의견

     * OpenAI가 생각의 흐름을 숨기려는 변명이 의심스러움
          + 반경쟁적이라는 느낌을 줌
          + 모델의 생각을 공개하지 않으려는 의도가 강하게 느껴짐
          + 슈퍼인텔리전스에 대한 우려와 관련이 있을 수 있음
     * OpenAI의 큰 발표는 항상 비밀 유지와 관련된 논란을 동반함
          + GPT-2의 가중치를 공개하지 않은 이유는 ""너무 위험하다""는 것이었음
          + GPT-3의 가중치도 공개하지 않음
          + 이러한 패턴이 의도적으로 언론의 관심을 끌기 위한 것일 수 있음
     * CoT 토큰에 대해 질문할 수 없지만 여전히 토큰당 요금을 부과함
     * ""내부 사고 과정""이라는 단어가 질문을 플래그로 표시함
          + 수학 문제 옆에 ""내부 감정""에 대한 설명을 요청하면 흥미로운 스니펫을 반환함
          + 예: ""6x^2 + 5x + 1의 실제 근을 매핑하고, 이를 불가분 요소로 인수분해하는 과정""
     * ML 모델을 API를 통해 판매하는 회사의 경쟁 우위는 모델 가중치를 볼 수 없다는 것임
          + OpenAI는 이를 한 단계 더 확장하여 모델의 메타 레벨을 숨기려 함
          + 이는 다른 독점 API가 디버깅 출력을 제공하는 것과 같음
     * 회사 이름 ""OpenAI""가 점점 더 부적절하게 느껴짐
          + 많은 분노가 여기서 비롯됨
     * 인간이 개입된 루프를 숨기려는 시도일 수 있음
     * 원본 출처를 확인할 수 없게 되어 AI 환각이 심각해졌을 가능성이 있음
     * ""OpenAI""라는 이름이 ""열려있다""는 의미와 맞지 않음
          + ""사업을 위한 개방""이라는 의미로만 적용될 수 있음
     * OpenAI가 숨겨진 토큰 기반의 돈을 찍어내는 기계를 만들었고, 이를 감사할 수 없게 하려 함
"
"https://news.hada.io/topic?id=16727"," Rethinking CSS in JS ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Rethinking CSS in JS

   CSS는 사용자 인터페이스를 아름답고 기능적으로 만드는 핵심 요소지만, 스케일이 커질수록 CSS 관리는 점점 더 어려운 작업이 됩니다.

   스타일 충돌, 성능 저하, 유지 관리의 어려움은 많은 개발자를 괴롭히죠.

   이 글에서는 이러한 문제를 해결하기 위한 새로운 접근 방식, 특히 CSS in JS에 대해 자세히 설명합니다.
   CSS의 역사적 배경을 시작으로 현대적인 스타일링 방법부터 미래의 디자인 시스템까지 폭넓은 주제를 다룹니다.

   글의 구성은 다음과 같습니다.
    1. JS에서 CSS의 정의와 배경
       1. JS에서 CSS란 무엇인가요?
       2. JS에서 CSS의 배경
    2. CSS와 디자인의 역사적 맥락
       3. CSS의 배경
       4. 디자인의 배경
       5. 디자인 시스템의 배경
    3. 스타일 관리 방법 분석 및 새로운 제안
       6. 스타일 관리는 어떻게 이루어졌나요?
       7. 스타일은 어떻게 관리해야 합니까?
    4. JS의 CSS에 대한 구체적인 구현 계획
       8. 왜 JS에 CSS가 있나요?
       9. mincho 프로젝트를 소개합니다
       10. JS의 CSS 친화적 CSS
       11. JS에서 확장 가능한 CSS
    5. 디자인 시스템과의 통합
       12. 디자인 시스템을 위한 JS의 CSS

   특히, 본 글에서는 SCALE CSS 방법론과 StyleStack이라는 새로운 개념을 소개하고, 이를 기반으로 한 mincho 프로젝트를 제안합니다. CSS 친화적이고 확장 가능한 CSS를 JS에 구현하는 것을 목표로 합니다.

   이 글의 궁극적인 목적은 개발자, 디자이너 및 기타 웹 프로젝트 이해관계자에게 더 나은 스타일링 솔루션의 가능성을 제시하는 것입니다.
   긴 글이지만 읽어주셔서 감사합니다.

   프로젝트에 대한 호응이 아니어서 죄송하지만, 프론트엔드 업계는 좀더 장기적인 시각으로 널리 합의된 도구나 컨벤션을 만들어야 하지 않을까 싶습니다. SCSS, LESS, 앵귤러JS 앵귤러2.0 리액트 등 웬만큼 스택 경험이 있는 입장에서는 프론트엔드 신기술이 필요 이상으로 오버엔지니어링 되어있고 소모적으로 느껴집니다

   웹에서 합의라면 웹 표준이 있습니다. css에서 scss같은 중첩을 도입하고 클래스, 함수형 프로그래밍 메서드, 웹 컴포넌트 등 지속적으로 논의되고 기능이 추가되고 있죠.

   제 생각에 프론트엔드 자체가 분화된지 얼마안되어 이것저것 시도해보는것 같아요.
   리엑트, 뷰와 같은 라이브러리부터 시작해서 번들러, 린트 등 툴링등 전반적으로요.

   게다가 앱분야와 달리 베스트 프랙티스를 회사 하나가 정해서 퍼뜨리는 것도 아니라 혼란이 큰 것 같네요!!
"
"https://news.hada.io/topic?id=16786","프로그래머들이 믿는 잘못된 TCP 정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         프로그래머들이 믿는 잘못된 TCP 정보

    NetworkManager 또는 networkd

     * NetworkManager 또는 networkd
          + 사용자는 wpa_supplicant 기반 관리로 전환한 이유를 설명함
          + TCP에 대한 잘못된 믿음 목록을 제시함
          + TCP의 신뢰성에 대한 오해를 다룸
     * TCP에 대한 잘못된 믿음 목록
          + TCP는 항상 신뢰할 수 있음
          + TCP는 대부분 신뢰할 수 있음
          + TCP는 신뢰할 수 없지만, 송신자와 수신자는 결국 전송된 바이트에 대해 합의할 것임
          + TCP 위에 메시지 지향 프로토콜을 구축하면 신뢰성을 보장할 수 있음
          + TCP 패킷이라는 것이 존재함
          + TCP 패킷이라는 것이 존재하지 않음
          + 원격 호스트에 연결 실패 시, 오프라인 상태임
          + Nagle 알고리듬은 좋음
          + Nagle 알고리듬은 나쁨
          + Nagle 알고리듬에 신경 쓸 필요가 없음
          + TCP는 네트워크를 투명하게 처리함
          + 네트워크가 TCP에 투명하면 IP에도 투명함
          + 네트워크가 HTTP/1.1에 투명하면 TCP에도 투명함
          + 표준 프로토콜에 투명하지 않은 네트워크는 예외적임
          + TCP는 IP를 기반으로 구현됨
     * 설명
          + ACK가 대기 중일 때 연결이 끊어지면 송신자는 세그먼트가 수신되었는지 알 수 없음
          + Paxos 또는 Raft와 같은 알고리듬이 필요하며, 최소 세 개의 노드가 필요함
          + SMTP와 같은 프로토콜에서도 이 문제가 발생함
     * 추가 의견
          + 두 당사자가 불확실한 링크를 통해 합의에 도달할 수 있음
          + 전송된 바이트의 하위 집합에 대해 합의할 수 있음
          + 합의된 바이트 집합이 0일 수 있으며, 이는 증가할 수 있음
          + Paxos가 필요하지 않음
     * 추가 논의
          + 합의된 바이트 집합의 정확한 범위를 알 수 없음
          + 네트워크 투명성에 대한 잘못된 믿음이 문제를 일으킴
          + ICMP를 차단하거나 이해하지 못하는 패킷을 드롭하는 네트워크가 있음
          + 혼잡 제어에 대한 지식이 필요함

    GN⁺의 정리

     * 이 기사는 TCP의 신뢰성에 대한 잘못된 믿음을 다루며, 네트워크 관리 도구의 선택에 대한 논의를 포함함
     * TCP의 신뢰성 문제는 Paxos와 같은 복잡한 알고리듬이 필요함을 설명함
     * 네트워크 투명성에 대한 잘못된 믿음이 실제 문제를 일으킬 수 있음을 강조함
     * 네트워크 관리 도구 선택 시 고려해야 할 다양한 요소를 제시함

        Hacker News 의견

     * ""falsehoods programmers believe"" 형식이 명확하지 않아 혼란스러움
          + TCP 패킷의 존재 여부에 대한 논쟁이 이해되지 않음
          + 철학적 혼란을 일으키는 내용임
     * Ethernet 케이블을 뽑았다가 다시 연결해도 연결이 유지되는 것에 놀라움
          + TCP는 폭탄이 떨어져도 작동하도록 설계됨
     * ""at most once"" 또는 ""at least once"" 전달 보장이 가능하지만 ""exactly once"" 전달 보장은 불가능함
          + 많은 주니어 개발자들이 ""exactly once"" 전달 보장이 없으면 버그라고 생각함
     * ACK가 outstanding 상태에서 연결이 끊기면 송신자는 세그먼트가 수신되었는지 알 수 없음
          + TCP는 양방향 파이프를 제공하며, 정확한 전달 보장은 애플리케이션의 책임임
          + HTTP 요청이 응답을 받기 전에 중단되면 송신자는 요청이 서버에 도달하지 않았다고 가정하고 새로운 연결로 다시 시도해야 함
     * 오류 수정 코드에 대해 들어본 적이 없는지 의문임
          + TCP 또는 Ethernet 프레임에 FEC 바이트가 포함되어 있음
          + HTTP over TLS는 암호화된 데이터 프레임을 사용하며, 데이터 손실이 발생하면 수신 불가능함
          + 많은 현대 인터넷이 이 패러다임에 기반하고 있음
     * 데이터센터 내부에서 자체 하드웨어를 사용할 때는 저수준의 세부 사항을 무시할 수 있음
          + 대역폭 제한, 패킷 RPS 제한, 지연 시간은 여전히 중요함
     * 이 기사는 완성된 글이 아니며, HN 제출 제목이 오해를 불러일으킬 수 있음
     * VKontakte에서 일할 때 해결하려던 문제를 상기시킴
          + 지하철에서 메시지를 보내면 서버에 도달하지만 응답이 도착하기 전에 신호가 끊김
          + 클라이언트가 메시지 전송 실패로 인식하고 다시 시도함
          + 클라이언트 생성 ""랜덤 ID""를 사용하여 문제 해결
          + Telegram은 클라이언트가 서버에 재연결할 때 이전 연결 동안 확인되지 않은 모든 응답을 전송함
     * 많은 사람들이 TCP가 함수 호출이 아니라는 것을 이해하지 못함
          + 최근에 새로운 TCP 속도 제한기가 매우 잘못된 상태로 나왔음
          + 대부분의 컨테이너가 Bufferbloat 문제를 겪고 있을 것임
"
"https://news.hada.io/topic?id=16783","Chrome이 Mac 배터리 수명을 단축시킨다고 하는데, 정말 그럴까? 36시간 테스트 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Chrome이 Mac 배터리 수명을 단축시킨다고 하는데, 정말 그럴까? 36시간 테스트 결과

     * ""Chrome이 Mac의 배터리를 망친다""는 주장은 흔히 사실로 받아들여지지만, 실제 데이터는 거의 없음
     * 18개월 전 Google은 배터리 소모에서 Safari와 동등하다고 주장했음

    테스트 방법

     * 테스트 장치: 14인치 MacBook Pro, M2 Pro 프로세서, 16GB RAM
     * 설치된 브라우저: Chrome 128, Safari 17.6
     * Keyboard Maestro를 사용하여 20분 루프 매크로 설정
          + YouTube 비디오 시청 10분
          + Mastodon 스크롤 4분
          + 9to5Mac 스크롤 2분
          + New Yorker 기사 스크롤 2분
          + Google Doc에 타이핑 2분
     * 테스트 루프를 9번 반복하여 3시간 브라우징 세션 시뮬레이션
     * 총 6번씩 실행하여 총 36시간의 데이터를 수집함
     * 디스플레이 밝기는 약 30%로 설정
     * 기타 앱 사용: Dock의 앱은 닫혀 있고, Pastebot, iStat Menus, Tailscale, Bartender 등 몇 가지 유틸리티 앱은 메뉴 바에서 실행 중

    결과

     * Safari는 평균적으로 배터리의 18.67%를 소모, Chrome은 17.33%를 소모
     * Chrome이 Safari보다 약 9% 적은 배터리를 소모함
     * 6번의 직접 비교 중 5번에서 Chrome이 우위
     * 8시간 동안 작업할 경우, Chrome은 54%의 배터리가 남고, Safari는 50%가 남음
     * 100%에서 배터리가 완전히 소모될 때까지 Chrome은 17.3시간, Safari는 16.1시간 지속됨
     * 3시간 동안의 가벼운 브라우징 세션에서는 Chrome이 배터리의 17%, Safari가 18%를 소모

    나의 결론

     * Chrome이 배터리를 심하게 소모한다는 주장은 근거 없음
     * Safari 사용자가 Safari를 선호하는 이유가 단순히 배터리 소모량 때문은 아님
     * Chrome 사용자 역시 Chrome의 사이트 호환성, 확장 프로그램 지원, UI 등을 선호
     * Safari 사용자가 Chrome으로 전환할 필요는 없음
     * 각 브라우저의 장단점을 고려하여 선택하는 것이 중요함
     * 필자 본인은 데스크톱에서 Arc 브라우저 사용자이지만, Safari와 Chrome 중에서는 Safari 선호
     * 추가적인 테스트와 피드백을 통해 더 많은 데이터를 수집할 계획

GN⁺의 의견

     * Chrome이 Mac 배터리를 많이 소모한다는 일반적인 인식은 잘못된 것일 수 있음
     * 테스트 결과, Chrome이 Safari보다 배터리를 덜 소모하는 것으로 나타남
     * 이 글은 일반적으로 알려진 내용과 다른 흥미로운 테스트 결과를 보여줌. 이는 우리가 당연하게 여기는 사실들에 대해서도 데이터에 기반한 검증이 필요함을 시사
     * 브라우저 선택에는 배터리 효율성 외에도 다양한 요인이 작용함. 개인의 선호도와 사용 패턴에 따라 적합한 브라우저가 달라질 수 있음
     * Apple Silicon Mac의 배터리 효율이 크게 향상되어, 브라우저 간 배터리 소모량 차이가 과거보다 줄어든 것으로 보임
     * Vivaldi, Arc 등 Chrome을 기반으로 한 브라우저들의 성능도 함께 비교해 보는 것이 흥미로울 것
     * 앞으로도 이런 실험을 반복하고 장기적인 추이를 살펴보는 것이 브라우저 간 경쟁 구도를 이해하는 데 도움이 될 것

        Hacker News 의견

     * Chrome의 배터리 소모 문제: Chrome의 Chromium 엔진이 iPhone과 iPad에서 사용되지 말아야 한다는 의견이 있음
          + John Gruber의 글에서 Google이 자체 배터리 소모가 큰 렌더링 엔진을 사용하는 Chrome을 iOS용으로 출시할 경우를 상상해보라는 내용이 있음
     * Google 사이트의 성능 문제: Google 사이트가 Safari보다 Chrome에서 더 잘 작동하도록 설정된 적이 있음
          + Google 사이트를 제외한 테스트를 보고 싶다는 의견이 있음
     * Mac 배터리 보고의 신뢰성 문제: Mac의 배터리 보고가 정확하지 않다는 의견이 있음
          + 배터리 잔량 보고를 제외한 테스트가 필요하다는 의견이 있음
     * Firefox 테스트 요청: Firefox의 테스트 결과도 궁금하다는 의견이 있음
          + 브라우저의 사용 작업에 따라 결과가 달라질 수 있다는 점에 동의함
     * 브라우저 개발 동향: 2024년 현재, Chrome의 배터리 소모 문제와 Safari의 기능 부족 문제는 여전히 존재함
          + Safari는 기능과 버그 수정이 많이 이루어졌고, Chrome은 멀티 탭 메모리 사용량 감소와 효율성에 집중함
          + Firefox는 효율성 작업이 이미 많이 이루어져 현재는 다듬는 단계에 있음
     * 멀티 탭 사용: Chrome이 멀티 탭 사용에서 Safari보다 우수함
          + 7000개의 탭을 사용할 때는 Firefox가 더 나음
          + 현재 Firefox가 단일 탭 및 멀티 탭 사용에서 가장 빠르고 효율적인 브라우저라는 의견이 있음
     * Mac에서 Chrome 사용 이유: Mac에서 Safari가 크래시가 없기 때문에 Chrome을 사용할 이유가 없다는 의견이 있음
     * HTML6 디자인 요청: 성능과 좋은 관행을 중심으로 HTML6을 설계해달라는 요청이 있음
     * 테스트 사이트 변경 제안: YouTube와 Google Docs 대신 Netflix와 Notion을 테스트에 포함시키자는 제안이 있음
     * YouTube 최적화 문제: 테스트가 YouTube 시청에 지배적이며, Google Chrome이 특히 최적화되어 있다는 의견이 있음
     * Arc 브라우저 사용 경험: Arc 브라우저를 사용해본 경험이 있지만 성능에 대해 말할 수 있을 만큼 사용하지 않았다는 의견이 있음
          + Arc의 Safari나 Chrome에 대한 장점이 궁금하다는 의견이 있음
"
"https://news.hada.io/topic?id=16750","연구 부정행위 적발한 데이터 탐정들 명예훼손 혐의 벗어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     연구 부정행위 적발한 데이터 탐정들 명예훼손 혐의 벗어

     * 증거 기반 결론은 명예훼손이 아님
          + 법원, 조작된 데이터를 식별한 연구자들에 대한 명예훼손 혐의 무죄 판결
          + 하버드는 조사 관리 방식에 대해 여전히 재판을 받을 예정
     * 데이터와 명예훼손
          + 연구자 Uri Simonsohn, Leif Nelson, Joe Simmons는 Data Colada 블로그 운영
          + 하버드 비즈니스 스쿨의 Francesca Gino 교수의 논문 4편에서 조작된 데이터 발견
          + 하버드, 자체 조사 후 연구 부정행위 확인, Gino 교수 행정 휴직 및 종신 교수직 박탈 고려
          + Gino 교수, 하버드와 Data Colada 팀을 상대로 명예훼손 소송 제기
          + 법원, 하버드의 일부 혐의는 기각, 일부는 계속 진행
     * Colada 팀 무죄
          + 법원, 증거 기반 결론은 명예훼손이 아님을 판결
          + 과학적 논쟁은 과학적 방법으로 해결해야 함을 강조
          + Data Colada 팀, 데이터 출처 링크 제공으로 독자들이 직접 검토 가능하게 함
          + 과학적 글쓰기의 신중한 언어 사용이 연구자들을 보호함
     * GN⁺의 정리
          + 이 기사는 과학적 연구의 투명성과 책임성을 강조함
          + 연구 부정행위 식별과 관련된 법적 문제를 다룸
          + Data Colada 팀의 사례는 과학자들이 신중한 언어 사용과 증거 기반 결론을 통해 법적 문제를 피할 수 있음을 보여줌
          + 유사한 기능을 가진 프로젝트로는 Retraction Watch가 있음

   반면 사실적시 명예훼손의 나라:

        Hacker News 의견

     * Data Colada 피고인들에게 유리한 판결이 나올 가능성이 높았지만, 1년 이상의 시간이 걸렸음
          + 여러 차례의 사전 심리가 있었고, 많은 법적 문서 작업이 필요했음
          + 변호사 비용이 10k에서 50k 이상일 것으로 추정됨
     * 법적 위협과 괴롭힘 전술을 견디는 사람들에게 감사함
          + Ben Goldacre가 소송을 당했을 때 출판사가 비용을 부담한 사례를 언급함
     * 과학적 논쟁은 법적 소송이 아닌 과학적 방법으로 해결되어야 함
          + 연구자들이 데이터 조작을 비난했음
     * Francesca Gino와 Dan Ariely는 부정직함을 연구한 것으로 유명하지만, 자신들이 부정직했음
     * 사기꾼들은 사기를 계속하기 위해 모든 수단을 동원함
          + 자금이 있는 사람들은 상대방을 파산시키기 위해 소송을 제기함
          + 이번 사건에서는 시스템이 작동했지만, 대부분의 경우 그렇지 않음
     * 명예훼손법은 부적절하며, 부유한 사람들이 소송을 통해 발언을 억제할 수 있음
          + Anti-SLAPP 모션이 이를 해결하려 하지만, 몇몇 주에서만 존재함
          + 과학 공동체는 법적 시스템에 대항하는 조치를 취해야 함
          + 과학적 비난에 대해 명예훼손 소송을 제기하면 과학 기관에서 자동으로 해고되어야 함
     * 이번 사건이 정상적으로 해결되어 다행임
          + 다른 대규모 부정행위 사건들도 여전히 진행 중인지 궁금함
     * 법원이 조작된 데이터에 대한 증거 기반 결론이 명예훼손이 될 수 없다고 판결함
          + 이는 과학에 매우 긍정적인 일임
     * 미국 지방법원이 Francesca Gino의 2500만 달러 명예훼손 소송을 기각함
          + Data Colada의 법적 방어 비용은 대학과 GoFundMe를 통해 충당됨
          + Gino가 논문을 게재한 저널이나 연구 자금 제공자는 비용을 부담하지 않음
"
"https://news.hada.io/topic?id=16703","EU 법원, 애플에 130억 유로(약 20조원) 세금을 납부하라고 명령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                EU 법원, 애플에 130억 유로(약 20조원) 세금을 납부하라고 명령

     * 유럽 최고 법원은 아일랜드에서의 세금 문제를 둘러싼 애플과의 10년 간의 법정 싸움에서 애플에 불리한 판결을 내림
     * 이 사건은 2016년 유럽위원회가 아일랜드에 애플로부터 최대 130억 유로(€13B, 약 19조 3천억 원)의 세금을 회수하라고 명령한 것에서 시작됨
     * 당시 위원회는 애플이 20년 동안 아일랜드로부터 ""불법적인"" 세금 혜택을 받았다고 밝힘

판결에 대한 애플과 아일랜드 정부의 반응

     * 아일랜드 정부는 성명에서 애플 사건이 ""이제는 역사적 관련성만 있는 문제""라며 특정 기업이나 납세자에게 우대 세금 처우를 하지 않는다는 것이 항상 정부의 입장이었다고 밝힘
     * 애플은 화요일 제출한 문서에서 2024년 9월 28일로 끝나는 회계연도 4분기에 약 100억 달러의 일회성 소득세를 부담하게 될 것이라고 밝힘
     * 아일랜드 정부는 이제 에스크로 펀드의 자산을 아일랜드로 이전하는 과정을 시작할 것이라고 언급함

애플 대변인의 입장 표명

     * ""이 사건은 결코 우리가 얼마나 많은 세금을 내느냐가 아니라 어느 정부에 세금을 내야 하는지에 관한 것""
     * ""우리는 항상 사업을 하는 곳에서 모든 세금을 납부하며 특별 거래는 없었음""
     * ""유럽위원회는 소급적으로 규칙을 바꾸려 하고 있으며, 국제 조세법에서 요구하는 대로 우리의 소득은 이미 미국에서 과세 대상이 되었다는 사실을 무시하고 있음""

지금까지의 사건 경과

     * 2014년 EU 집행기구인 유럽위원회는 애플의 EU 본부가 있는 아일랜드에서의 세금 납부에 대한 조사에 착수함
     * 2016년 위원회는 애플이 20년 동안 아일랜드로부터 ""불법적인"" 세금 혜택을 받았다며 더블린에 최대 130억 유로의 세금을 회수하라고 명령함
     * 2019년 애플과 아일랜드는 위원회의 결정에 항소했고, 2020년 EU 일반 법원은 미국 기술 기업인 애플 편에 섬
     * EU 집행부는 증거를 제시하지 않았다며 2016년 위원회 결정을 무효화함
     * 위원회는 일반 법원의 판결에 항소해 소송을 ECJ로 보냄
     * ECJ는 화요일 일반 법원의 판결을 파기하고 위원회의 원래 2016년 판결을 확인함

EU와 미국 기술 공룡 간의 지속되는 갈등 부각

     * 퇴임을 앞둔 경쟁위원장 Margrethe Vestager 아래 시작된 이 사건은 데이터 보호부터 과세, 반독점에 이르기까지 EU가 해결하려고 노력해 온 문제를 둘러싼 미국 기술 공룡과 EU 간의 지속적인 갈등을 부각시킴
     * 가장 최근에는 위원회가 3월 음악 스트리밍 앱 유통 시장에서 지배적 지위를 남용한 혐의로 애플에 18억 유로의 반독점 벌금을 부과함
     * EU의 광범위한 디지털시장법(DMA)은 기업들이 유럽에서 관행을 바꾸도록 강제하고 있음
     * 위원회는 애플, 알파벳, 메타를 포함한 기술 공룡들에 대해 DMA에 따른 다양한 조사를 개시함

GN⁺의 의견

     * 이번 판결은 EU 내에서 거대 기술 기업들에 대한 과세 문제에 있어 EU 집행위원회의 권한을 재확인하는 중요한 계기가 될 것으로 보임
     * 다만 애플이 이번 판결에 불복해 상고할 가능성도 있어 판결의 실효성이 의문시되기도 함
     * 유럽연합의 디지털 시장법(DMA)은 기술 대기업의 관행을 규제하려는 시도로, 앞으로도 많은 논란이 예상됨
     * 전 세계적으로 디지털세 도입 논의가 활발한 가운데, 이번 판결이 다른 국가들의 관련 정책 수립에도 영향을 미칠 수 있을 것으로 전망됨
     * 기업들의 조세회피 문제 해결을 위해서는 EU뿐만 아니라 국제사회 차원의 공조와 협력이 필요해 보임

        Hacker News 의견

     * EU는 세금 부과 권한이 없으며, 아일랜드는 자국 세율을 자유롭게 설정할 수 있음
          + 문제는 특정 기업에 대한 세금 예외가 국가 보조로 간주될 수 있는지 여부임
          + 아일랜드는 예외를 주지 않았다고 주장했으나, 현재 판결은 그 반대임
          + 이 사건은 오래된 세금 규칙에 관한 것이며, 현재는 규칙이 강화되어 예외가 사라짐
     * Apple은 2017년에 외국 수익에 대해 21%의 실효 세율을 적용했다고 주장했음
          + EU 위원회는 2003년 유럽 수익에 대해 1%, 2014년에는 0.005%의 세율을 적용했다고 주장함
     * Apple이 이 사건에서 패소한 이유는 이익 이동 계획 자체가 아니라 계획을 제대로 설정하지 않았기 때문임
          + Apple은 두 개의 별도 아일랜드 회사를 사용하는 대신 하나의 회사 내 두 개의 ""지점""을 사용했음
          + 이 ""지점 구조""가 다른 다국적 기업들에게 제공되지 않았기 때문에 불법 국가 보조로 간주됨
     * Apple은 EU 위원회가 규칙을 소급적으로 변경하려 한다고 주장함
          + 미국이 해외에서 운영하는 기업과 자국의 해외 거주자를 이중 과세함
          + ""이미 미국에서 과세되었다""는 주장은 호스트 국가의 잘못이 아님
     * 기업들이 세금 회피를 멈추는 것이 좋을 것임
          + 대부분의 국가가 이미 거의 파산 상태임
          + 부자들이 세금을 회피하면 일반 사람들이 더 많은 세금을 내야 함
     * 판결 자체에 몇 가지 문제가 있음
          + 소급 적용의 문제: 법적으로 요구되지 않은 원칙을 소급 적용하는 것은 불공정함
          + 증거 부담의 문제: EU 위원회가 국가 보조 사건에서 증거 부담을 낮추는 것은 불공정함
          + 그러나 전반적으로 이 판결은 공정한 세금과 투명성을 향한 큰 걸음임
     * Google에 대한 별도의 판결도 발표됨
          + 관련 링크와 뉴스 기사들이 있음
     * 아일랜드가 Apple을 불법적으로 보조하여 130억 유로를 받게 됨
     * 또 다른 기사와 판결 전문 링크가 있음
          + 두 회사가 아일랜드에 법인 등록은 했지만 세금 거주자는 아니었음
"
"https://news.hada.io/topic?id=16739","Frame0 – 현대 앱을 위한 lo-fi 와이어프레임 도구. Balsamiq 대체제 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Frame0 – 현대 앱을 위한 lo-fi 와이어프레임 도구. Balsamiq 대체제

     * 손으로 그린 스타일의 와이어프레임 도구로 아이디어를 빠르게 표현하고 전달
     * 맥/윈도우용 로컬 실행파일 제공
     * 플로우차트, UML, ERD 등 다이어그램 지원
     * 프레임(폰,태블릿,데스크탑,워치,TV등) 및 각종 UI 컴포넌트, 1500개의 아이콘 내장
     * 프리젠테이션 모드 지원
     * 프레임 미러링 지원으로 마스터 프레임처럼 사용 가능. 마스터 프레임 변경시 모든 미러 자동 업데이트

   결국 이름 바꿨네요 ㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   앱 이름이 뭐가 문제인가 봤더니 콘티가 콩글리쉬였나보군요..
   제작자분도 한국분이고 ㅎㅎ

   Balsamiq 오랜만에 들어보네요. 초반에 무료앱 개발하는 개발자들한테 라이센스키를 나눠줘서 그거 받은거로 좀 썼던 기억이 ㅎ

        Hacker News 의견

     * ""스케치 같은 손으로 그린 연필"" 스타일을 사용하는 이유에 대한 의문
          + 와이어프레임은 브레인스토밍 도구로 사용됨
          + 컴퓨터를 사용할 때는 현실적이고 깨끗한 스타일이 더 나은지에 대한 질문
          + 디자이너들이 이 스타일에 익숙해서인지, 중요한 포인트를 더 명확하게 나타내기 위해서인지에 대한 의문
     * 휴대폰에서 이런 작업을 하고 싶다면 TinyUx를 시도해볼 수 있음
          + 작은 화면 때문에 비표준 UX를 가짐
     * Balsamiq을 자주 사용함
          + Wine을 사용할 때 몇 가지 문제 발생
          + Linux 지원이 필요함
     * ""Figma로 푸시"" 옵션이 있으면 좋겠음
          + 와이어프레임을 기반으로 고품질 작업이 시작될 가능성이 높음
     * Excalidraw를 와이어프레임에 맞게 조정한 것처럼 보임
          + Linux를 사용하기 때문에 앱을 사용할 수 없음
     * 회사가 아시아에 기반을 두고 있음
          + 서양인들의 브랜딩 피드백을 고려할 것을 강력히 추천함
          + 앱 이름이 많은 사람들에게 의문을 제기할 것임
     * 간단한 도구와 생성형 AI를 결합하여 목업/와이어프레임에서 간단한 HTML/CSS 페이지를 생성할 수 있는 방법이 있는지 궁금함
          + Figma는 무겁고, v0는 React/Tailwind만 지원함
     * 이 소프트웨어를 알게 된 지 3분 만에 앱의 메인 화면 와이어프레임을 구축할 수 있었음
     * 처음에는 연결 화살표가 버그인 줄 알았지만, 이는 천재적인 구현임을 깨달음
          + 이 기능만으로도 Figjam보다 더 많이 사용하고 싶어짐
     * 기본 기능이 매우 부드럽고 다듬어져 있음
          + 빠르게 그리드나 다른 도형에 스냅할 수 있는 기능이 부족함을 느꼈음
"
"https://news.hada.io/topic?id=16797","Show GN: AI Selector : "목적"에 딱 맞는 AI 서비스 찾기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: AI Selector : ""목적""에 딱 맞는 AI 서비스 찾기

     🔗사용해보기 : https://aiselector.vercel.app/
     🎥소개 영상 : https://youtu.be/WjVP-5hIacM?si=O1huO0Gze3kiEZmU

   요즘 매우 다양한 🤖AI 서비스들이 등장하고 있습니다. AI 서비스가 많아지면서 필요에 따라 적절한 서비스를 바로 찾아 사용하기가 점점 어려워지고 있습니다.

   이에 저는 다양한 AI 서비스를 한 곳에 모아, 특정 ""목적""에 맞는 AI 서비스를 쉽고 빠르게 🔍찾을 수 있는 플랫폼을 만들고자 했습니다.

   AI Selector의 주요 기능

   🎯 다양한 AI 서비스를 한 곳에 모아 필요한 서비스를 쉽게 검색
   ⭐ 즐겨찾기 기능으로 자주 사용하는 서비스 관리
   🧠 Gemini API를 통한 맞춤형 AI 서비스 추천

   제가 만든 AI Selector 서비스에서는 AI 서비스의 링크와 설명을 등록하고, 즐겨찾기 기능을 통해 정렬할 수 있습니다. 사용자가 필요로 하는 AI 서비스의 기능이나 목적을 간략히 작성한 후 Search 버튼을 누르면, Gemini API를 통해 등록된 AI 서비스 목록을 전송합니다. 그러면 Gemini가 가장 알맞은 AI 서비스를 이유와 함께 추천해줍니다.

   🔗사용해보기 >> https://aiselector.vercel.app/

   혹시 하기 작업을 하기 위해 어떤 Gemini API를 사용하셨는지 공유 가능하신지요?

   ""Gemini API를 통해 등록된 AI 서비스 목록을 전송합니다. 그러면 Gemini가 가장 알맞은 AI 서비스를 이유와 함께 추천해줍니다""

   Gemini Flash 모델을 이용하는데, 지시문과 함께 등록된 서비스 이름들을 Gemini API로 넘겨주고 있습니다

   AI Selector 커피 증정 이벤트
   컴포즈 아이스 아메리카노 - 1명
   메가커피 아이스 아메리카노 - 2명
   이벤트 참여시 추첨을 통해 총 3분께 커피 기프티콘을 보내드립니다
   9/25 ~10/4 까지
   https://forms.gle/GEthCdgAXuL1h1cr8

   안녕하세요. 저도 한번 써보고 싶은데 로그인을 해야한다고 해서 좀 당황스러웠습니다. 검색기능은 로그인 없이도 쓸 수 있으면 좋겠습니다.

   피드백 감사합니다! 구글 로그인이 필요한 이유는 AI 서비스들을 등록하고 나중에 그 리스트를 불러오기 위함입니다. AI Selector는 단순히 AI 서비스를 검색만 하는 것이 아닌 사용자가 등록한 AI 서비스 내에서 현재 해야 하는 태스크에 맞는 AI 서비스를 찾아주는 것이기 때문에 로그인이 꼭 필요합니다.

   local storage 나 쿠키를 이용해서 단순화하는건 어떨까요? 로그인은 사용자에게 꽤 높은 진입 장벽이 될 수 있습니다.
"
"https://news.hada.io/topic?id=16776","귀하의 스타트업에 복잡한 Cloud Infrastructure가 필요합니까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               귀하의 스타트업에 복잡한 Cloud Infrastructure가 필요합니까?

  복잡한 클라우드 인프라가 정말 필요한가?

     * Pieter Levels가 Lex Friedman Podcast에서 이야기한 내용을 들으며 많은 깨달음을 얻음
     * Pieter는 단일 서버에서 애플리케이션을 운영하며 성공적인 마이크로 SaaS 비즈니스를 구축함
     * 클라우드 인프라의 복잡성을 피하고 제품-시장 적합성에 집중하는 것이 중요함
     * 모든 스타트업에 적합하지 않을 수 있지만, 복잡성을 위한 복잡성을 피해야 함

  최근 관찰

    프로젝트 1: Lambda 과부하

     * 20-30개의 Lambda 함수로 다양한 서비스 운영
     * SQS와 Lambda를 이용한 백그라운드 작업
     * CloudWatch에 분산된 로그

   결과: 디버깅이 어렵고 변경이 힘들며 배포가 복잡함. 단일 NodeJS 컨테이너나 Python Flask/FastAPI 앱과 Redis로 단순화할 수 있었음

    프로젝트 2: 마이크로서비스 혼란

     * Kubernetes (EKS)에서 7개의 작은 마이크로서비스 운영
     * CRUD와 비즈니스 로직을 위한 별도의 서비스

   결과: 인프라 관리에 더 많은 시간을 소비함. 이 정도의 분리가 필요했는지 의문

  단일 서버 설정의 힘

     * 현대 서버는 강력함. Hetzner, latitude.sh에서 저렴한 가격에 강력한 VM을 제공
     * GCP VM과 EC2 인스턴스도 합리적인 가격
     * 40GB RAM과 다중 코어를 가진 강력한 컴퓨팅 파워 제공
     * 모든 것이 중앙 집중화되어 관리가 쉬움
     * 수백만 QPS로 확장하는 문제는 나중에 해결 가능

   단일 VM 설정을 위해 필요한 것:
    1. 강력한 머신 (EC2, GCP VM, Hetzner 등)
    2. 안전한 접근 (HTTPS, IP 제한 SSH 또는 SSM)
    3. 무중단 배포를 위한 CI/CD
    4. DNS 구성
    5. 정기적인 데이터베이스 백업
    6. 대기 VM을 통한 중복성 확보

  Docker Compose

     * Docker Compose는 로컬 개발에 훌륭함
     * 여러 서비스를 단일 명령으로 관리 가능
     * 프로덕션 환경에서 덜 사용됨
     * 업데이트 중 다운타임 발생 가능성 있음

  Docker Compose Anywhere: 주말 프로젝트

     * Docker Compose Anywhere를 주말 동안 개발
     * 다음 기능 제공:
          + GitHub Actions를 통한 원클릭 Linux 서버 설정
          + GitHub Container Registry와 Docker Rollout을 이용한 무중단 배포
          + 환경 변수와 비밀 관리 (age 또는 sops 사용 고려)
          + GitHub Actions를 통한 자동화된 Postgres 백업
          + 단일 VM에서 다중 앱 지원
          + Traefik과 Let's Encrypt를 통한 자동 SSL

    몇 가지 고려사항

   보안을 위해:
     * 엄격한 방화벽 규칙 설정 (필요한 포트만 열기)
     * SSH 키 보안 (AWS에서는 SSM, GCP에서는 CLI 선호)
     * 보안 강화를 위한 바스천 호스트 사용
     * 비밀 보호 및 WAF 또는 Cloudflare 사용 고려

   데이터 보호:
     * 암호화된 데이터베이스 백업을 안전한 클라우드 스토리지로 전송 (예: S3)
     * 추가 중복성을 위해 디스크 스냅샷 정기적으로 생성
     * 백업 및 스냅샷에 대한 보존 정책 구현

  GN⁺의 정리

     * 이 글은 스타트업이 복잡한 클라우드 인프라를 피하고 단순한 설정으로 제품-시장 적합성에 집중해야 함을 강조함
     * 단일 서버 설정의 장점과 Docker Compose를 활용한 간단한 배포 방법을 소개함
     * 복잡한 인프라 관리에 시간을 낭비하지 않고 핵심 제품 개발에 집중하는 것이 중요함
     * 비슷한 기능을 가진 프로젝트로는 Heroku, DigitalOcean 등이 있음

        Hacker News 의견

     * 여러 프로젝트에서 최신 기술을 사용하려는 팀들이 품질이 낮은 결과물을 만들어내는 경우가 많음
          + Kubernetes를 이해하지 못하면서도 사용하려는 미성숙한 팀들이 있음
          + Puppet을 사용해 다양한 VM에서 Docker 서비스를 실행하거나 Python 백엔드를 구동하는 자동화된 프로세스를 구축함
          + 스타트업들이 클라우드에서 많은 비용을 지출하면서도 2017년의 DevOps 선구자들보다 나쁜 결과물을 만들어내고 있음
          + 관련 블로그 글: The Emperor's New clouds
     * 작은 스타트업에서 단일 VM을 사용해 nginx, webapp, postgres, redis 등을 운영함
          + 개발자들이 동일한 설정으로 로컬 환경에서 작업할 수 있어 디버깅이 쉬움
          + 수직 확장이 가능해 초기 단계에서는 적합함
     * SaaS를 단일 서버에서 시작해 여러 서버로 확장함
          + Kubernetes를 사용하지 않고도 분산 데이터베이스를 운영함
          + 클라우드 제공업체의 가상 머신보다 강력한 베어메탈 서버를 사용함
          + 자동화 도구로 ansible과 terraform을 사용해 서버를 관리함
     * Kubernetes의 핵심 기능인 배포, 파드 서비스, 블루-그린 배포 등이 유용함
          + 클라우드 네이티브 환경에서 다양한 오픈 소스 시스템을 사용하면 복잡해질 수 있음
     * 많은 사람들이 Kubernetes를 배우기 위해 복잡한 인프라를 구축함
          + 대규모 클라이언트로 확장할 때 유용할 수 있음
          + 창업자나 CTO에게는 덜 유용할 수 있음
     * 마이크로서비스 책에서도 ""먼저 모놀리스를 구축하라""고 권장함
          + 초기에는 모놀리스를 사용하는 것이 디버깅이 쉬움
          + Docker를 사용해 초기 단계를 간소화함
          + 비즈니스 필요에 따라 Kubernetes로 전환함
     * 복잡한 프레임워크를 처음부터 선택하는 것은 권장하지 않음
          + 자체 도구를 사용하는 것이 항상 더 효율적이지 않을 수 있음
          + 표준 도구를 사용하는 것이 장기적으로 더 효율적일 수 있음
     * 클라우드에서 VM, 블록 및 블롭 스토리지, DNS, IdP, 도메인 등록자만 사용함
          + FaaS와 같은 서비스는 복잡하고 디버깅이 어려움
          + 단일 VM과 모놀리틱 코드베이스가 이상적임
     * 6년 동안 단일 $10/월 VPS에서 프로젝트를 운영함
          + VPS 기술이 매우 발전해 신뢰성이 높음
          + 클라우드 인프라는 협업과 운영 관리 기능을 위해 사용함
     * 클라우드 기반 솔루션을 선호하지만 선택적으로 사용함
          + Google Cloud Platform(GCP)을 사용해 비용을 절감함
          + Kubernetes를 사용하지 않음
          + Docker를 사용해 배포를 간소화함
          + GCP의 관리형 서비스가 시간을 절약해줌
"
"https://news.hada.io/topic?id=16764","Kolmogorov-Arnold 네트워크로 신경망 이해도 향상 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Kolmogorov-Arnold 네트워크로 신경망 이해도 향상 가능성

    새로운 구조로 신경망을 더 이해하기 쉽게 만들다

     * 소개
          + 신경망은 현재 인공지능에서 가장 강력한 도구임
          + 그러나 신경망의 결론을 이해하기 어려움
          + Kolmogorov-Arnold 네트워크(KAN)는 더 투명한 대안으로 제안됨
     * 불가능을 맞추기
          + 전형적인 신경망은 인공 뉴런과 시냅스로 구성됨
          + MLP는 최적의 함수에 근접할 수 있지만 완벽하게 표현할 수 없음
          + KAN은 비선형 함수를 사용하여 더 복잡한 곡선을 표현할 수 있음
     * KAN의 역사와 재발견
          + 1989년 논문에서 KAN이 비실용적이라고 언급됨
          + 2024년 MIT의 연구원들이 KAN을 재검토하여 새로운 가능성을 발견함
     * KAN의 구조와 성능
          + 두 개 이상의 레이어를 사용하여 더 복잡한 작업을 처리할 수 있음
          + 실제 문제에 적용하여 MLP보다 뛰어난 성능을 보임
     * 해석 가능성
          + KAN은 단순한 수식을 제공하여 결과를 설명할 수 있음
          + 과학적 응용에서 특히 유용함
     * KAN의 미래
          + KAN 2.0은 더 실용적이고 사용하기 쉬운 버전으로 개발됨
          + 호기심 중심의 과학을 촉진할 수 있음

    # GN⁺의 정리

     * KAN은 신경망의 투명성을 높여 과학적 발견에 기여할 수 있음
     * MLP보다 복잡한 문제를 해결할 수 있는 잠재력을 가짐
     * 과학적 응용에서 특히 유용하며, 단순한 수식을 제공하여 결과를 설명할 수 있음
     * KAN 2.0은 더 실용적이고 사용하기 쉬운 버전으로 개발됨
     * 호기심 중심의 과학을 촉진할 수 있는 도구로서의 가능성을 가짐

        Hacker News 의견

     * KANs의 주요 저자가 MLCAD에서 튜토리얼 세션을 진행했음
          + 하드웨어/반도체 설계와 ML/딥러닝의 교차점에 초점을 맞춘 학술회의임
          + 물리 시스템에 대한 통찰과 해석을 얻는 데 유용함
          + 과학과 수학에는 유용하지만, 엔지니어링에서는 주요 우선순위가 아닐 수 있음
          + 어려운 문제에 대한 학습 능력과 선택된 기저 함수의 사용 등 아직 탐구되지 않은 영역이 많음
     * 내부 작업이 이해 가능하다고 해서 전체 네트워크가 이해 가능하다는 의미는 아님
          + 예를 들어, 결정 트리는 이해 가능한 시스템의 예로 제시됨
          + 오늘날의 대규모 결정 트리와 랜덤 포레스트는 수백만 개의 노드를 가질 수 있음
          + 복잡한 시스템을 이해하는 데 수학적 격차가 있음
     * KAN은 각 기저 함수의 기여도를 시각화할 수 있지만, 이는 단순한 문제에만 해당됨
          + 깊은 신경망은 이 접근 방식으로 설명할 수 없음
     * KAN의 (반)자동화 단순화 알고리즘은 특정 문제를 해결하는 데 유사함
          + 단순한 추상화 압축기가 아닌, 기능적 해석 가능성을 목표로 함
     * 해석 가능성의 핵심은 상징적 회귀임
          + MLP는 항상 데이터 세트에 대한 방정식을 제공하지 않지만, KAN은 가능함
     * 신경망의 ""알 수 없는 것""이 무엇인지 설명해 줄 수 있는지 질문함
          + 신경망을 구축하고 구성 요소와 작동 방식을 알고 있음
          + 모든 연결을 매핑할 수는 없지만, 연결이 형성되는 방식을 알고 있음
     * 신경망의 강력함은 GPU의 대규모 병렬 처리를 활용하는 데 있음
          + 스칼라 가중치만 사용하는 것이 계산 자원을 낭비하는 것인지 질문함
          + 가중치 행렬 대신 함수의 행렬을 사용하면 어떻게 될지 궁금해함
"
"https://news.hada.io/topic?id=16737","에어팟 프로, FDA 승인을 받아 보청기로 사용 가능해짐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    에어팟 프로, FDA 승인을 받아 보청기로 사용 가능해짐

     * 애플은 아이폰16 발표 이벤트에서 에어팟 프로 2가 FDA 승인을 받아 보청기로 사용 가능하게 할 것이라고 이야기함
     * FDA가 어제 ""Hearing Aid Feature""라는 이름의 첫 번째 일반의약품(OTC) 보청기 소프트웨어 기기를 승인했다고 발표
     * 이는 FDA가 2022년 10월 처방전 없이 보청기 판매를 허용하면서 가능해진 것
     * iOS 18의 설정에서 에어팟 프로 2를 연결하면 청력 검사 기능에 접근할 수 있음
     * 경증 ~ 중간 정도의 난청 결과를 받아야 새로운 기능을 사용할 수 있으며, 의사의 검사 결과를 업로드할 수도 있음
     * 보청기 기능은 주요 소리(예: 사람의 목소리)를 증폭하기 위해 다양한 주파수 레벨을 조정함

   기존 업체들은 어떻게 헤쳐나갈 것인지 궁금하네요.
   완전 대기업의 골목시장 진출인데
"
"https://news.hada.io/topic?id=16747","Mistral, 첫 멀티모달 모델 Pixtral 12B 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Mistral, 첫 멀티모달 모델 Pixtral 12B 공개

     * Mistral이 이미지와 텍스트를 모두 처리할 수 있는 첫 번째 모델인 Pixtral 12B를 공개함
          + 120억 개의 파라미터를 가진 약 24GB 크기의 모델
     * Mistral의 텍스트 모델인 Nemo 12B를 기반으로 구축됨
          + URL이나 base64로 인코딩된 이미지를 통해 임의 개수와 크기의 이미지에 대한 질문에 답변할 수 있음
          + Anthropic의 Claude 제품군이나 OpenAI의 GPT-4 등 다른 멀티모달 모델과 유사하게 이미지 캡셔닝, 사진 속 객체 수 세기 등의 작업을 수행할 수 있을 것으로 예상됨
     * GitHub 및 Hugging Face에서 토렌트 링크를 통해 다운로드 가능함
     * Apache 2.0 라이선스에 따라 제한 없이 다운로드, 파인튜닝, 사용이 가능함
     * 현재 웹 데모는 작동하지 않으나, Mistral의 챗봇 및 API 서비스 플랫폼인 Le Chat과 Le Plateforme에서 곧 테스트 가능할 예정임
     * 최근 Mistral은 General Catalyst가 주도한 6억 4,500만 달러 규모의 펀딩 라운드를 마감하며 기업 가치 60억 달러를 인정받음
          + 1년 남짓 된 Mistral은 Microsoft가 소수 지분을 보유하고 있으며, 유럽의 OpenAI로 여겨지고 있음
          + 무료 ""오픈"" 모델을 공개하고, 관리형 버전에 대해 요금을 부과하며, 기업 고객에게 컨설팅 서비스를 제공하는 전략을 취하고 있음
"
"https://news.hada.io/topic?id=16705","구글 일루미네이트: 책과 논문을 오디오로 변환하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     구글 일루미네이트: 책과 논문을 오디오로 변환하는 기술

     * Google Illuminate는 AI를 사용하여 콘텐츠를 학습 선호도에 맞게 조정하는 실험적 기술임
     * 선택한 논문의 핵심 사항을 논의하는 두 명의 AI 생성 음성으로 오디오를 작성
     * 퍼블리시된 컴퓨터 과학 논문에 최적화되어 있음
     * 모든 토론과 음성은 AI가 생성함
          + 각 오디오 대화는 제목, 저자 및 URL 하이퍼링크를 포함하여 논의하는 출판된 학술 논문에 대한 정보를 표시
     * Waitlist에 등록 가능

현재 생성된 주요 연구 및 보고서 음성들

     * Attention is All You Need: Transformer 모델의 기본 개념을 설명하는 논문
     * Artificial Intelligence Index Report 2024: AI의 현재 상태와 미래 전망을 다루는 보고서
     * PaLM-E: 다중 모달 언어 모델에 대한 연구
     * Generative Agents: 인간 행동을 모방하는 인터랙티브 에이전트에 대한 연구
     * Large Language Models Encode Clinical Knowledge: 대형 언어 모델이 임상 지식을 인코딩하는 방법에 대한 연구
     * Position: Levels of AGI for Operationalizing Progress on the Path to AGI: AGI(인공지능 일반)의 발전 단계에 대한 논의
     * Generative Ghosts: AI 사후의 이점과 위험을 예측하는 연구
     * Code as Policies: 언어 모델 프로그램을 통한 제어 연구
     * AI and the Opportunity for Shared Prosperity: 기술과 경제의 역사에서 배운 교훈
     * Sample of LLM Research from Google: Google의 대형 언어 모델 연구 샘플
     * The anatomy of a large-scale hypertextual Web search engine: 대규모 하이퍼텍스트 웹 검색 엔진의 해부학
     * Efficient Estimation of Word Representations in Vector Spaces: 벡터 공간에서 단어 표현의 효율적인 추정
     * Chain-of-Thought Prompting Elicits Reasoning in Large Language Models: 대형 언어 모델에서 추론을 이끌어내는 연쇄 사고 유도
     * MLP-Mixer: 비전 작업을 위한 올-MLP 아키텍처
     * Switch Transformers: 간단하고 효율적인 희소성을 가진 트릴리언 파라미터 모델로의 확장
     * CoAtNet: 모든 데이터 크기에 적합한 컨볼루션과 어텐션의 결합
     * AudioLM: 오디오 생성에 대한 언어 모델링 접근법
     * The Illusion of Artificial Inclusion: 인공적 포함의 환상
     * Agile Modeling: 개념에서 분류기로의 신속한 전환
     * Intersectionality in Conversational AI Safety: 다양한 안전 인식을 이해하는 베이지안 다단계 모델
     * AI for Low-Code for AI: 저코드 AI를 위한 AI
     * Description and Discussion on DCASE 2023 Challenge Task 2: 기계 상태 모니터링을 위한 첫 번째 비지도 이상 음향 탐지
     * On Limitations of the Transformer Architectures: Transformer 아키텍처의 한계
     * Subset-Reach Estimation in Cross-Media Measurement: 크로스 미디어 측정에서 서브셋 도달 추정
     * RecurrentGemma: 효율적인 오픈 언어 모델을 위한 Transformer를 넘어선 접근법
     * Trusted Source Alignment in Large Language Models: 대형 언어 모델에서 신뢰할 수 있는 소스 정렬
     * Imagic: 텍스트 기반 실사 이미지 편집을 위한 확산 모델

GN⁺의 정리

     * Illuminate는 AI를 활용하여 학습 콘텐츠를 개인의 선호도에 맞게 조정하는 실험적 도구임
     * 컴퓨터 과학 주제에 최적화되어 있으며, 모든 토론과 음성은 AI가 생성함
     * 다양한 AI 연구와 보고서를 통해 최신 기술 동향과 발전을 이해할 수 있음
     * 이 도구는 학습을 촉진하고, AI 기술의 잠재력을 탐구하는 데 유용함
     * 관련 분야의 다른 프로젝트로는 OpenAI의 GPT 시리즈와 Google의 BERT 모델이 있음

   오타가 있네요: 퍼블리시된 컴퓨터 과학 논""문""에 최적화되어 있음

        Hacker News 의견

     * 자동 생성된 팟캐스트가 광고로 스팸이 될 가능성에 대한 우려
     * LLM과 텍스트-음성 변환을 이용한 팟캐스트 생성 비용이 저렴함
          + 10분 녹음당 약 $2-3의 비용
     * 자동 생성된 팟캐스트 시대의 도래
     * LLM이 잘못된 정보를 강조할 수 있는 문제
     * 학술 논문을 더 쉽게 접근할 수 있게 하는 유용한 도구로 활용 가능성
          + arxiv 논문을 키워드로 필터링하여 오디오로 제공하는 프로젝트 아이디어
     * AI가 고인의 디지털 흔적을 이용해 복제본을 만드는 것에 대한 불안감
     * Google의 NotebookLM 실험에 대한 언급
     * 자녀를 위한 과학책을 대화 형식으로 재작성하고 오디오로 변환한 개인 프로젝트
     * ElevenLabs Reader 앱을 사용해 운전 중 기사 청취 경험 공유
          + 음성 품질이 90% 만족스러움
     * 자동 생성된 팟캐스트의 스팸 문제에 대한 우려와 데모의 인상적임
"
"https://news.hada.io/topic?id=16684","합성 다이아몬드는 천연 다이아몬드보다 더 순수하고 아름다우며 저렴함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 합성 다이아몬드는 천연 다이아몬드보다 더 순수하고 아름다우며 저렴함

     * 다이아몬드는 그리스어 ἀδάμας (adámas)에서 유래한 단어로, '정복할 수 없는'이라는 의미를 가짐
     * 다이아몬드는 탄소 원자가 3차원 입방체 또는 육각형 격자로 배열된 구조를 가짐
     * 다이아몬드는 자연에서 가장 단단한 물질이며, 압축성이 가장 낮음
     * 다이아몬드는 높은 열전도성과 높은 전기저항성을 가짐
     * 소량의 질소, 인, 붕소를 첨가하여 반도체로 만들 수 있음
     * 다이아몬드 표면은 다른 물질에 잘 달라붙지 않으며, 매끄럽게 움직임
     * 다이아몬드는 화학적으로 비활성이며 생체 조직에 독성이 없음
     * 순수한 형태의 다이아몬드는 무색이며 높은 빛 분산을 가짐
     * 특정 불순물이 존재하면 다이아몬드 보석에 아름다운 색을 더할 수 있음
     * 자연에서 다이아몬드가 형성되기까지 수십억 년이 걸림
     * 자연에서 생산된 대부분의 다이아몬드는 보석이나 첨단 산업에 사용하기에는 불순함
     * 실험실에서 다이아몬드를 더 빠르고 순수하며 저렴하게 만들 수 있음

    다이아몬드 제조 방법

     * 1773년 프랑스 화학자 앙투안 라부아지에가 다이아몬드를 유리 종 모양의 병에 넣고 태양광을 집중시켜 증발시키는 실험을 함
     * 라부아지에는 다이아몬드가 특정 조건에서 석탄으로 변할 수 있다고 결론지음
     * 1796년 영국 화학자 스미스슨 테넌트가 다이아몬드가 탄소의 이성체임을 입증함
     * 19세기 연금술사들은 다양한 방법으로 석탄을 다이아몬드로 변환하려 했으나 실패함
     * 1886년 프랑스 화학자 앙리 무아상이 다이아몬드를 합성하려 했으나 실패함

    고압 고온 합성

     * 1950년 제너럴 일렉트릭(General Electric) 연구소가 다이아몬드 합성을 위한 프로젝트를 시작함
     * 1954년 화학자 하워드 트레이시 홀(Howard Tracy Hall)이 다이아몬드 씨앗을 사용하여 다이아몬드를 합성함
     * 제너럴 일렉트릭은 실험실에서 다이아몬드를 합성했다고 발표함
     * 합성된 다이아몬드는 주로 산업용으로 사용됨

    화학 기상 증착

     * 1950년대 화학 기상 증착(CVD) 기술을 사용하여 다이아몬드를 합성하는 연구가 시작됨
     * CVD 기술은 탄소를 가스로 변환한 후 다이아몬드 구조로 결정화시키는 방법임
     * 1960년대 미국과 소련에서 CVD 기술을 연구함
     * 1970년대 일본 연구자들이 CVD 기술을 발전시킴
     * 현대 CVD 반응기는 다이아몬드 씨앗을 진공 챔버에 넣고 반응 가스를 사용하여 다이아몬드를 성장시킴

    실험실 다이아몬드 식별

     * 순수한 형태의 실험실 다이아몬드와 천연 다이아몬드는 물리적, 화학적, 광학적으로 동일함
     * 실험실 다이아몬드는 불순물이 거의 없으며, 천연 다이아몬드보다 더 순수할 수 있음
     * 고압 고온 합성 다이아몬드는 금속 촉매의 흔적을 포함할 수 있음
     * CVD 다이아몬드는 그래파이트를 포함할 수 있음
     * 다이아몬드 감정 기관은 실험실 다이아몬드에 'LG' 또는 'Laboratory-Grown'이라는 표시를 새김

    보석의 미래

     * 다이아몬드가 약혼 제안의 필수 요소가 된 것은 De Beers의 광고 캠페인 덕분임
     * 실험실 다이아몬드는 천연 다이아몬드와 구별할 수 없으며, 가격이 훨씬 저렴함
     * 실험실 다이아몬드는 더 순수하고 더 아름다운 색을 가질 수 있음
     * 소비자들은 더 나은 절단 및 연마 기술과 디자인을 요구함

    GN⁺의 정리

     * 다이아몬드는 자연에서 가장 단단한 물질로, 실험실에서 더 빠르고 순수하게 합성할 수 있음
     * 고압 고온 합성 및 화학 기상 증착 기술을 통해 다이아몬드를 합성할 수 있음
     * 실험실 다이아몬드는 천연 다이아몬드와 구별할 수 없으며, 가격이 저렴함
     * 다이아몬드는 약혼 제안의 상징으로 자리 잡았으며, 실험실 다이아몬드가 그 역할을 대체할 수 있음

        Hacker News 의견

     * 이 글은 다이아몬드 역사와 상업적 발전에 대해 다루고 있음
          + Alibaba에서 고압, 고온의 다이아몬드 제조 기계를 약 20만 달러에 구매 가능
          + De Beers의 R&D 부서인 Element Six는 레이저 및 기타 특수 용도로 합성 다이아몬드를 판매
          + 자연 다이아몬드 산업에서는 X-ray 시스템을 사용하여 다이아몬드를 찾는 기술이 도입됨
          + 다이아몬드 절단 및 연마 과정은 자동화되었으며, 주로 중국과 인도에서 기계가 생산됨
          + 다이아몬드는 이제 킬로그램 단위로 플라스틱 봉지에 담아 구매 가능
     * 지난 10년 동안 중국과 인도에서 저렴한 실험실 다이아몬드와 모이사나이트 생산이 폭발적으로 증가함
          + 10년 전에는 품질 좋은 실험실 다이아몬드를 합리적인 가격에 찾기 어려웠음
          + 현재는 경쟁이 치열해지면서 실험실 다이아몬드가 매우 고품질이면서도 저렴해짐
          + 모이사나이트는 이제 소매가로 캐럿당 5달러 이하로 판매됨
          + 앞으로 10년 내에 다이아몬드의 가치는 거의 사라질 것으로 예상됨
     * 실험실에서 재배된 다이아몬드는 채굴된 다이아몬드보다 훨씬 저렴함
          + 다이아몬드가 순수할수록 가격이 높아지지만, 너무 순수하면 실험실에서 재배된 것으로 간주되어 가격이 떨어짐
     * 자연이 할 수 있는 것을 인간이 더 잘할 수 있다는 원칙을 실험실 다이아몬드가 증명함
          + 그러나 자연의 다양성을 갖춘 인공 숲을 만들기 전까지는 자만심이 지나치다는 의견도 있음
     * 약혼 선물로서의 가치에 대해 고통이 충분히 내재되어 있는지에 대한 의문 제기
     * 다이아몬드에 대한 오랜 낙인이 여전히 존재함
          + 진정한 사랑을 위해서는 누군가가 땅을 파야 한다는 인식이 있음
     * 결혼 전 다이아몬드에 대해 깊이 조사한 후 실험실에서 만든 다이아몬드를 선택한 경험 공유
          + De Beers의 저품질 1캐럿 다이아몬드 가격으로 큰 무결점 다이아몬드를 구매함
          + 다이아몬드 가격이 앞으로 더 떨어질 것을 예상하지만 결혼을 위해 어쩔 수 없었음
     * 투자 등급 다이아몬드는 여전히 무거운 무게나 화려한 색상을 가진 자연 다이아몬드가 우세함
          + 실험실에서 만든 가장 큰 보석 등급 다이아몬드는 약 30캐럿임
          + 몇십 년 내에 자연을 능가할 수 있을 것으로 예상됨
     * 약혼 반지를 구매할 계획이며, 실험실에서 만든 다이아몬드를 선택하고 반지의 금속에 더 많은 돈을 쓸 예정임
          + 실험실에서 만든 다이아몬드를 고품질 금 반지에 맞출 수 있는 사람을 찾을 수 있을지 궁금함
     * Wired에서 2003년에 다이아몬드에 관한 훌륭한 기사를 실었음
          + 링크 제공: Wired 기사
"
"https://news.hada.io/topic?id=16799","Nothing : 아무것도 하지 않기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Nothing : 아무것도 하지 않기

     * 아무것도 하지 않도록 고안된 페이지
     * 마우스를 움직이거나 하면 타이머 리셋

     안녕하신가, 낯선이여
     * 마음을 편히 가지세요
     * 침묵 속에 자리 잡으세요
     * 그리고 아무것도 하지 마세요

     * Nothing은 당신이 의도적으로 아무것도 하지 않는 것을 추적하는 타이머
          + 목표 추구 없음, 알림 없음, 생산성에 대한 압박 없음
          + 단순히 존재하며, 당신이 허용하는 각 초를 조용히 세는 공간
          + 무수한 작업과 할 일 속에서의 디지털 오아시스
     * Nothing의 본질은 화면에 집착하지 않는 것이 아님
          + 휴대폰이나 컴퓨터를 내려놓고, 끊임없는 일상에서 한 발짝 물러서기
          + 주변 세계와 다시 연결하기
          + Nothing은 앱이라기보다 개념에 가까움
          + 도구로 사용되는 것보다 조용한 성찰
          + 끊임없는 현대 생활의 소음에 대한 부드러운 반항
     * 원하는 만큼 머물거나, 초가 흘러가는 것을 지켜보거나, 다른 곳을 바라보세요
          + 머무른다고 보상이 주어지지 않음
          + 단순히 존재하는 기이한 즐거움
          + 때로는 가장 깊은 행동은 멈추고, 숨 쉬고, 아무것도 하지 않는 것
          + 정적을 받아들이고 단순히 존재하는 것이 완벽히 허용됨을 상기시킴

        Hacker News 의견

     * 산책을 권장함. 조상들이 문제를 해결하기 위해 산책을 했음
          + 모든 감각이 자극받고, 움직이는 몸과 마음이 활발해짐
          + 문제를 해결할 방법을 모를 때, 매일 높은 곳에서 문제를 내려다보는 것이 도움됨
     * 아무것도 하지 않는 이유는 생각할 시간을 주기 때문임
          + 유튜브 비디오나 소셜 미디어에 빠져들어 정신이 바빠지는 것을 피할 수 있음
     * Masood Boomgaard의 (de)동기부여 비디오를 언급함
          + 오늘날 직장 문화의 쳇바퀴를 다루며 철학적 진리를 담고 있음
          + 링크
     * 아무것도 하지 않을 때도 얼마나 아무것도 하지 않는지 측정하려는 욕구가 있음
          + 이를 위해 유휴 카운터를 사용함
     * 스크롤바가 있는 페이지에 대해 고민함
          + 스크롤 없이 전체 페이지를 읽고 싶지만 브라우저 창 크기에 따라 달라질 수 있음
          + 스크롤바가 항상 있어야 한다고 주장함
     * 친구들과 ""아무것도 하지 않기""를 비교하고 싶어함
          + ""아무것도 하지 않기"" 인플루언서 도구를 통해 수익을 창출하고 싶어함
          + Mountain Dew와 Taco Bell 같은 제품을 홍보하고 싶어함
     * 몇 년 동안 zombo.com 페이지를 운영해왔음
     * 소스 코드를 보니 간단한 HTML 페이지에 많은 파일이 포함되어 있음
     * Jenny Odell의 ""How to Do Nothing""을 읽고 있음
          + 정치적 요소가 있지만 경제적 생산성에서 벗어나 시간을 보내는 것의 중요성을 상기시켜줌
          + 치료사가 생산성을 창의적으로 재구성하도록 도와줌
     * ""Don't Shoot the Puppy"" 게임을 떠올리게 함
          + 링크
"
"https://news.hada.io/topic?id=16718","Why Not Comments","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Why Not Comments

     * Why not ""why not"" comments? Not why ""not comments""
          + “왜 ‘왜 안 됐는지’에 대한 주석을 남기지 않나요? ‘주석을 왜 달지 않았는지’에 대한 이유를 묻는 것이 아니에요.”

Why Not Comments

     * 코드는 구조화된 기계 언어로 작성되며, 주석은 표현력이 풍부한 인간 언어로 작성됨
     * ""무엇""을 주석으로 달지 말고 가능한 한 많은 정보를 식별자에 포함시키라는 의미
     * 최근에는 ""왜""도 주석에 포함시키지 말고 LongFunctionNames나 테스트 케이스 이름에 포함시키라는 주장도 있음
     * ""자체 문서화"" 코드베이스는 식별자를 통해 문서를 추가함

    최근 예시

     * Logic for Programmers에서 나온 예시
     * epub 빌드가 수학 기호(\forall)를 기호(∀)로 변환하지 못하는 문제 발생
     * 수동으로 수학 문자열의 토큰을 유니코드로 대체하는 스크립트를 작성함
     * 16개의 수학 기호를 각각 대체하는 방식으로 작성했지만, 이는 비효율적임
     * 간단한 방법으로 주석을 달아 해결함
          + ""각 문자열에 대해 16번 반복하지만, 현재 책에는 25개의 수학 문자열만 있고 대부분 5자 미만이므로 여전히 충분히 빠름""

    왜 주석을 달아야 하는가

     * 느린 코드가 문제를 일으키지 않더라도 주석을 달아야 하는 이유
     * 미래에 코드가 문제가 될 수 있음
     * 주석은 트레이드오프를 인식하고 있음을 보여줌
     * 나중에 프로젝트를 다시 볼 때 왜 느린 코드를 작성했는지 이해할 수 있음

  왜 자체 문서화가 불가능한가

     * ""RunFewerTimesSlowerAndSimplerAlgorithmAfterConsideringTradeOffs"" 같은 긴 함수 이름은 트레이드오프를 설명하지 않음
     * 함수와 변수 식별자는 하나의 정보만 포함할 수 있음
     * 주석을 테스트로 대체하는 것도 불가능함
     * 자체 문서화는 코드가 무엇을 하는지 설명하지만, 부정적인 정보는 코드가 무엇을 하지 않는지 설명함

    뉴스레터 끝의 추측

     * ""왜 안 되는지"" 주석을 반사실적 사례로 생각할 수 있는지 궁금함
     * 인간 커뮤니케이션의 추상화는 자체 문서화가 불가능한가?
     * 비유, 불확실성, 윤리적 주장 등을 자체 문서화할 수 있는가?


GN⁺의 정리

     * 이 글은 코드 주석의 중요성과 그 한계를 다룸
     * 주석을 통해 코드의 트레이드오프를 명확히 하고, 미래의 유지보수를 용이하게 함
     * 자체 문서화의 한계와 주석의 필요성을 강조함

        Hacker News 의견

     * 코드에 주석을 달 때, ""왜""와 ""왜 안 되는지""를 주로 설명함. 복잡한 코드일 경우 ""무엇""을 간단히 설명하는 것도 유용함
          + 의무적인 주석은 비효율적이며, 모든 함수에 주석을 다는 것은 시간 낭비임
          + 도구가 자동으로 추가하는 주석도 비효율적임
     * 주니어 엔지니어는 코드가 무엇을 하는지 설명하는 주석을 작성하고, 중급 엔지니어는 왜 그렇게 작성했는지 설명하며, 시니어 엔지니어는 다른 방식으로 작성하지 않은 이유를 설명함
     * 유지보수자를 위한 주석 템플릿을 사용함
          + ""이 코드는 <이유> 때문에 이렇게 작성됨. 수정하려고 시도한 후 실수임을 깨달으면, 다음 사람을 위해 카운터를 증가시켜 주세요: total_hours_wasted_here = n""
     * 코드에서 놀라운 부분에 주석을 다는 것이 중요함
          + 코드가 나중에 이해될지 확신이 서지 않을 때 ""왜 안 되는지""를 설명하는 주석을 작성함
     * 주석의 중요성을 강조하며, 특히 자신의 코드를 5, 10, 15년 후에도 유지보수해야 할 때 유용함
          + 기존 코드와 일관성을 유지하는 것이 중요함
     * ""순진한 해결책이 아닌 것""에 주석을 다는 것이 좋음
          + 비효율적인 코드가 나중에 수정될 때 문제를 일으킬 수 있음
     * 긴 함수 이름이나 테스트 케이스 이름에 주석을 포함시키는 것이 좋음
          + 메서드 이름이 명확하지 않을 때 주석이 도움이 됨
          + 메서드 설명에 ""그리고""가 포함되면 메서드가 너무 많은 일을 하고 있다는 신호임
     * 디버그 로깅을 통해 입력이 원래 설계 제약보다 클 때 경고를 추가하는 것도 유용함
     * 주석과 문서 주석을 많이 사용하는 것을 선호함
          + 애플리케이션의 단계별로 주석을 작성하고, 코드를 작성하면서 주석을 세분화함
          + 모든 함수와 변수에 주석을 다는 것을 선호함
     * 코드 리뷰에서 예상되는 비판을 미리 방지하기 위해 ""X를 하지 않은 이유는 Y 때문""이라는 주석을 작성함
"
"https://news.hada.io/topic?id=16724","업스테이지, 차세대 LLM '솔라 프로' 프리뷰 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     업스테이지, 차세대 LLM '솔라 프로' 프리뷰 공개

     * Solar Pro는 단일 GPU에서 실행되도록 최적화된 가장 지능적인 LLM으로, Microsoft, Meta, Google과 같은 거대 기술 기업의 모델을 능가
     * 프리뷰 버전은 오픈 소스 모델로 제공되며 무료 API 액세스가 가능하여, 개발자와 기업이 11월 공식 출시에 앞서 모델을 테스트하고 피드백을 제공 가능
     * 이전 모델인 Solar Mini보다 두 배 이상 큰 220억 개의 파라미터를 지원
     * Upstage의 독점적인 Depth-Up Scaling(DUS) 방법과 고급 데이터 레시피 덕분에, Solar Pro는 모델 크기를 크게 줄이면서도 최첨단 성능을 제공
     * MMLU Pro 벤치마크에서 52.11의 정확도 점수를 달성, IFEval 벤치마크에서 84.37점
     * 이러한 결과는 Microsoft의 Phi 3 Medium, Meta의 Llama 3.1 8B, Mistral NeMo 12B, Google의 Gemma 2 27B 등 유사한 크기의 모델보다 뛰어남
     * Solar Pro 프리뷰는 11월 정식 출시 전까지 상용 애플리케이션을 포함한 오픈 소스 모델로서 무료 API 액세스와 함께 공개적으로 사용 가능
     * 프리뷰 버전은 영어 입력을 지원하며 4,096개의 토큰으로 구성된 컨텍스트 창을 제공
"
"https://news.hada.io/topic?id=16782","Founder Mode, 해커들, 그리고 기술에 지루함을 느끼는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Founder Mode, 해커들, 그리고 기술에 지루함을 느끼는 것

    창업자 모드, 해커, 그리고 기술에 대한 지루함

     * 실리콘밸리의 창업자 문화와 그로 인한 피해에 대해 논의함
     * Aaron Swartz와 Sam Altman을 비교하는 접근이 흥미로움

    Paul Graham의 관리와 리더십에 대한 오해

     * Paul Graham의 관리 철학에 대한 비판
     * 좋은 사람을 고용하고 그들에게 일을 맡기는 것이 항상 효과적이지 않음
     * 창업자들은 경험이나 훈련이 부족하여 좋은 사람을 고용하는 데 어려움을 겪음

    실리콘밸리의 창업자 모드와 그 문제점

     * 창업자 모드는 독성 상사들에게 자신이 훌륭하다고 말하는 또 다른 방법임
     * 많은 회사들이 연례 리트릿을 진행하지만, Graham은 이를 모름
     * 창업자 모드는 실리콘밸리의 다른 문제들과 연결됨

    기술에 대한 지루함

     * 팬데믹 이후 기술에 대한 흥미를 잃은 사람들이 많음
     * 기술 보도에서 인물들이 더 단조로워짐
     * 과대 광고 주기와 창업자 중심의 기술 문화가 문제임

    해커의 부재

     * 해커들이 사라지고, 창업자들이 주목받는 상황
     * 기술이 지루해진 이유는 창업자들이 중심이 되었기 때문임
     * 기술 애호가들은 기술 자체에 지루해진 것이 아니라, 과대 광고와 창업자 중심의 문화에 지루해진 것임

    GN⁺의 정리

     * 이 글은 실리콘밸리의 창업자 문화와 그로 인한 문제점을 다룸
     * 기술 보도에서 인물들이 단조로워지고, 과대 광고 주기가 문제임을 지적함
     * 해커들이 사라지고 창업자들이 주목받는 상황을 비판함
     * 기술 애호가들이 기술 자체에 지루해진 것이 아니라, 창업자 중심의 문화에 지루해진 것임
     * 비슷한 기능을 가진 프로젝트로는 오픈 소스 프로젝트들이 있음

        Hacker News 의견

     * Graham의 의견에 동의함: 많은 회사들이 제품/시장 적합성을 찾고 나서 조직을 확장하면서 목표를 잃어버리는 경험을 함
          + AirBNB 토크가 ""founder mode"" 포스트보다 훨씬 나았음
          + 이 모든 것이 단순한 드라마처럼 느껴짐
     * 나이 든 사람들의 목소리: Andreessen, Graham, 그리고 다른 사람들이 나이가 들면서 기술 산업에 대한 흥미를 잃어감
          + 젊은 사람들이 나이 든 사람들의 의견을 이상하게 여김
     * Graham의 영향력: Graham의 스타트업 및 창업자에 대한 생각이 너무 큰 영향을 미쳤음
          + 이로 인해 다른 방식으로 살아가는 사람들을 배제함
     * 광고 기반 기술의 지루함: 광고 기반 기술이 지루하고 짜증나게 됨
          + 자율주행차, 로봇 조작, 전기차, 비행차, 배터리, 금속, 의료 분야에서 흥미로운 발전이 있음
     * 해커의 변화: 해커들이 사라진 것이 아니라, 그들이 단순히 일을 하고 있을 뿐임
          + 기술 뉴스는 대부분 일자리와 관련됨
     * 조직 운영 방식: 큰 조직을 운영하는 데 한 가지 방법만 있는 것은 아님
          + ""founder mode""가 무엇을 의미하는지 명확하지 않음
     * 기술 분야의 목소리 변화 필요성: 도메인 전문가들이 더 많이 필요함
          + 기술이 단순한 아이디어에서 실제로 어려운 물리학 문제로 이동함
     * 해커 커뮤니티: Playdate와 Raspberry Pi 커뮤니티는 여전히 활발함
          + 인터넷 사용이 너무 많아지면서 번아웃과 실망이 발생함
     * 고용 시장 문제: 고용 시장의 문제를 무시하면 전체 그림을 볼 수 없음
          + 창업자에게 인센티브를 맞추는 문제는 시스템적임
"
"https://news.hada.io/topic?id=16772","Show HN: Meet.hn – 당신의 도시에서 Hacker News 커뮤니티를 만나다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show HN: Meet.hn – 당신의 도시에서 Hacker News 커뮤니티를 만나다

    해커 찾기 지도 소개

     * 해커를 찾기 위한 지도인 meet.hn 소개
     * 사용 방법:
          + 사용자명, 도시+국가 입력
          + 생성된 텍스트를 HN 설명에 복사
          + ""Add me on the map"" 클릭
          + 소셜 링크와 관심 태그 추가 가능

    존재 이유

     * HN 커뮤니티에 대한 애정에서 시작
     * 현재 거주하는 도시가 기술과 창업보다는 산업에 집중되어 있음
     * HN 커뮤니티와 실제로 만나고 싶은 욕구에서 시작
     * 구글 검색으로는 한계가 있어 meet.hn을 직접 개발

    추가 세부 사항

     * meet.hn의 트위터 페이지: meet_hn
          + 실제로 만난 경우 사진과 함께 태그 추천
     * 코드 오픈 소스: GitHub
     * meet.hn은 at.hn과 통합

    도움을 준 사람들

     * ericbureltech
     * fredkisss
     * JulienDuquesne1
     * lbasseto
     * lcswillems
     * leeerob
     * padolsey
     * tomlienard

    GN⁺의 정리

     * meet.hn은 해커와 기술 애호가들이 실제로 만날 수 있도록 돕는 플랫폼임
     * 기술과 창업에 관심 있는 사람들이 모일 수 있는 기회를 제공함
     * 오픈 소스 프로젝트로 누구나 기여 가능
     * 비슷한 기능을 가진 다른 프로젝트로는 Meetup, Eventbrite 등이 있음

        Hacker News 의견

     * HN에 'meet' 탭을 추가하여 실제 세계에서 긍정적인 영향을 장려하고 싶음
          + 커뮤니티가 다시 이 원인을 맡는 것을 보고 기쁨
          + 사람들이 실제로 모임을 시작하면 반공식적인 스레드를 후원할 수도 있음
     * 도시 이름의 로마자 표기에 대한 비공식 요구사항이 있는 것 같음
          + 예: 일본 도시 船橋市의 공식 로마자 표기는 ""funabasi""이지만 ""funabashi""만 허용됨
          + 요구사항을 명확히 하는 것이 좋을 것 같음
     * 태그 필드가 기존 태그 세트에서 선택하는 대신 자유 입력을 허용하면 좋겠음
          + 선호하는 태그: Design, Fashion, Digital fabrication, Computational Creativity 등
     * 미국에는 같은 이름의 도시가 여러 개 있어서 이 기능이 나에게는 작동하지 않음
     * 북한에 Hacker News 사용자가 정말 36명이나 있는지 의문임
          + 도구가 사용자 바이오에 이 데이터만 있는 것을 기대해서 추가하는 데 어려움이 있었음
          + 텍스트가 어디에나 존재하는지 확인하도록 업데이트할 수 있는지 궁금함
     * ""Kraków, Poland""를 입력하면 meet.hn/city/pl-undefined가 나옴
          + 코드가 발음을 제대로 처리하는지 궁금함
     * 멋져 보임
          + 여행 중에 meet.hn이나 meetup.com을 사용했는데 meetup.com은 점점 사라지는 것 같음
          + 기능 요청:
               o 소셜 드롭다운에 Mastodon 지원
               o 위치 선택기에서 자동 완성
     * 해커에게만 제한되는지 아니면 모든 기술에 능통하고 자유로운 사고를 가진 HN 독자에게 열려 있는지 궁금함
          + 필요하다면 6502 어셈블리 언어 기술을 사용할 수 있음
          + 80년대에 BBS를 잠시 운영했음
     * 좋은 아이디어, 공유해줘서 고마움
          + 미국에서는 많은 도시 이름이 중복되어 country-city가 잘 작동하지 않음
          + 어떤 가혹한 평판? :)
     * 멋짐
          + 내가 사는 곳으로 확대하고 위치를 추가했음
          + 가장 가까운 다른 HN 프로필을 확인하고 그들이 무엇에 관심이 있는지 봄
          + 그들의 취미는 meet.hn 개발인 것 같음
          + 좋은 작업, 이웃! :D
"
"https://news.hada.io/topic?id=16749","Show GN: 공짜 행복 명언 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: 공짜 행복 명언 API

   GET https://api.sobabear.com/happiness/random-quote

   하면 매일 공짜 행복 명언을 얻을 수 있습니다. 행복해지기 위해서 만들었어요

   링크를 타고 가면 만날 수 있는 ""카놀라유의 행복에 대한 이야기"" 가 뭔지 궁금합니다

   카카오헬스케어 회사의 행사 이름입니다 ㅎㅎ..
"
"https://news.hada.io/topic?id=16680","수면 시간, 크로노타입, 건강 및 생활 습관 요인이 인지에 미치는 영향 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             수면 시간, 크로노타입, 건강 및 생활 습관 요인이 인지에 미치는 영향 [pdf]
"
"https://news.hada.io/topic?id=16671","시민DJ – 미국 의회도서관의 무료 오디오 및 비디오를 사용한 음악 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                시민DJ – 미국 의회도서관의 무료 오디오 및 비디오를 사용한 음악 제작

Citizen DJ

     * Citizen DJ는 대중에게 공식적으로 공개되었으며, 이 웹사이트의 모든 소리는 리믹스 용도로 무료로 사용할 수 있음
     * 이 실험적 프로젝트와 레지던시에 대한 비하인드 스토리를 읽을 수 있음

  Library of Congress의 무료 오디오 및 비디오 자료로 음악 만들기

     * 이 프로젝트는 2020년 Library of Congress의 Innovator in Residence Program의 일환으로 Brian Foo가 진행함
     * Library of Congress의 무료 소리를 탐색하고 브라우저에서 비트와 결합하여 리믹스할 수 있음
     * 좋아하는 소프트웨어로 소리를 다운로드하여 사용할 수 있음

  추가된 자료

     * 2022년에 수천 개의 퍼블릭 도메인 녹음이 추가됨
     * 추가된 내용에 대해 더 읽을 수 있음

  Inventing Entertainment

     * Edison Companies의 초기 영화와 음향 녹음을 포함한 341편의 영화, 81개의 디스크 음향 녹음 및 관련 자료를 특징으로 함
     * 탐색, 리믹스, 다운로드 가능

  Variety Stage Sound Recordings and Motion Pictures

     * 61편의 영화에는 동물 쇼, 버레스크, 춤, 코믹 스케치, 드라마 발췌, 드라마 스케치, 신체 문화 공연 및 테이블로가 포함됨
     * 1897년부터 1920년까지의 저작권을 가진 영화들로, 당시 인기 있던 보드빌 공연과 연기자들을 재현하려고 함
     * 탐색, 리믹스, 다운로드 가능

  The Joe Smith Collection

     * 은퇴한 음악 경영자 Joe Smith가 200명 이상의 유명 가수, 음악가 및 업계 아이콘과의 인터뷰를 포함한 방대한 녹음 자료를 2012년에 기증함
     * 탐색, 리믹스, 다운로드 가능

  Free Music Archive

     * 권리 없는 음악의 배포와 큐레이션을 위한 웹사이트
     * Library of Congress의 Web Cultures Web Archive의 일부로 보관됨
     * 탐색, 리믹스, 다운로드 가능

  MusicBox Project

     * 독립 민속학자이자 음악학자인 Dyann Arthur가 2010년에 설립한 비영리 단체로, 음악 교육과 창작 및 공연의 직업적 경로를 발전시키는 것을 목표로 함
     * Dyann과 Rick Arthur는 미국을 여행하며 모든 연령과 경력 수준의 여성 음악가들을 인터뷰함
     * 탐색, 리믹스, 다운로드 가능

  Tony Schwartz Collection

     * 전자 매체의 대가로 여겨지는 Tony Schwartz는 사회적으로 의식 있는 캠페인을 만들어 라디오와 텔레비전 광고의 얼굴을 바꿈
     * 그의 자료는 뉴욕시의 유명한 사운드 다큐멘터리 제작자, 작가 및 교사의 방대한 아카이브의 일부임
     * 탐색, 리믹스, 다운로드 가능

  American English Dialect Recordings

     * 북미 영어 방언을 문서화한 118시간의 녹음을 포함함
     * 다양한 아카이브와 50명의 수집가의 개인 컬렉션에서 가져온 연설 샘플, 언어 인터뷰, 구술 역사, 대화 및 공개 연설 발췌를 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Screening Room

     * Library의 방대한 영상 컬렉션을 전시하여 전 세계 시청자에게 무료로 제공함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Blues

     * Library of Congress는 National Jukebox를 통해 역사적인 음향 녹음을 무료로 제공함
     * 이 하위 컬렉션에는 블루스와 블루스와 유사한 작품과 공연이 포함됨
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Jazz

     * National Jukebox는 재즈의 뿌리로 간주되는 래그타임을 포함한 재즈와 음악 형식을 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Folk Music

     * National Jukebox는 다양한 형태의 미국 민속 음악을 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Opera

     * National Jukebox는 오페라와 오페레타, 오라토리오와 같은 유사한 작품의 발췌를 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Musical Theater

     * National Jukebox는 인기 있는 뮤지컬 극장 작품에서 처음 소개된 작품을 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Classical Music

     * National Jukebox는 클래식 작품과 공연을 포함함
     * 탐색, 리믹스, 다운로드 가능

  The National Jukebox: Popular Music

     * National Jukebox는 녹음 당시 인기 있었던 음악을 포함함
     * 탐색, 리믹스, 다운로드 가능

GN⁺의 정리

     * Citizen DJ는 Library of Congress의 무료 오디오 및 비디오 자료를 사용하여 음악을 만들 수 있는 프로젝트임
     * 다양한 역사적 자료와 인터뷰, 공연 등을 포함한 방대한 컬렉션을 제공함
     * 음악 제작자와 연구자에게 유용한 자료를 제공하며, 다양한 장르와 시대의 음악을 탐색하고 리믹스할 수 있는 기회를 제공함
     * 유사한 기능을 가진 프로젝트로는 Free Music Archive와 같은 권리 없는 음악 배포 사이트가 있음
"
"https://news.hada.io/topic?id=16795","불타는 집에서 팀을 이끄는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           불타는 집에서 팀을 이끄는 방법

     * 기술 산업은 현재 어려운 시기를 겪고 있음
          + 제로 금리 시대의 종료로 인해 자금이 고갈되고, AI의 급격한 발전이 기존의 안전한 도메인과 비즈니스 모델을 혼란에 빠뜨리고 있음
     * 이러한 것들이 회사를 ""전시(Wartime)"" 체제로 밀어넣고 있음
          + 전시 : 생존을 위한 실존적 투쟁
          + 평화시(peacetime)와는 다른 유형의 리더십 필요
     * 오늘날 엔지니어링 관리자(EM)에게 전시란:
          + 사기가 낮은 팀을 이끄는 것
          + 모호성, 엄격한 제약, 자주 변경되는 목표, 성과에 대한 강한 압박 등을 다루는 것
          + 마치 불타는 집에서 일하는 것 같은 느낌

  엔지니어링 매니저의 세 가지 주요 초점 영역

    1. 회사 목표에 맞춘 딜리버 보장
    2. 고성과 엔지니어링 팀 구축 및 유지
    3. 팀 구성원의 성공과 개인 성장 지원

  초점 영역 1: 목표 지향적 Delivery 보장

     * 무자비한 우선순위 설정이 필수적임. 회사의 생존과 성공에 중요한 몇 가지 목표에 팀의 주의를 집중시켜야 함.
     * 팀이 빠르게 움직일 수 있도록 권한 부여. 의사 결정 권한을 최대한 분산시키고, 장애물을 제거하며, 승인 단계를 줄여야 함.
     * 행동 편향을 가지는 것이 중요함. 분석으로 팀을 마비시키기보다는 결정을 내리고 때때로 잘못된 결정을 내리는 것이 더 나음.
     * 팀의 집중 시간을 보호. 혼란과 불확실성에서 팀을 보호하고 깊고 창의적인 작업 세션을 가질 수 있도록 해야 함.
     * 팀과 함께 참호에 들어가기. 기술적 작업에 참여하여 기술적 맥락을 이해하고 필요할 때 도움을 줄 수 있음.
     * 기술 부채가 증가할 가능성이 있음. 이를 완화하기 위해 기술 부채 항목의 가시적이고 우선순위가 매겨진 백로그를 유지하고, 각 스프린트의 작은 비율을 부채 상환에 할당하며, 기능 개발과 기술 부채 작업을 결합하는 등의 방법을 고려해야 함.

  초점 영역 2: 팀 구축 및 리드

    유지

     * 사기와 에너지를 무시하지 말아야 함. 빠른 승리를 축하하고, 자주 감사의 표시를 하며, 원하는 행동을 칭찬해야 함.
     * ""우리 대 그들"" 정신이 팀에 자리 잡지 않도록 해야 함. 스트레스가 높은 결정으로 인해 리더십과 다른 부서에 대한 신뢰가 약화될 수 있음.
     * 부정적인 반응을 무시하거나 피하지 말고, 문제를 적극적으로 수용해야 함.
     * 직업의 긍정적인 측면에 집중. 최첨단 도전 과제에 대한 작업 기회, 회사의 혜택, 훌륭한 팀, 현대적인 기술 스택 등 긍정적인 측면을 강조해야 함.
     * 모든 구성원을 유지할 수는 없음을 받아들여야 함. 누군가가 떠나기로 결정하면 그 결정을 지원하고 전환을 원활하게 만들어야 함.

    채용

     * 전시 기간에도 채용이 있음. 경험이 풍부하고 자율적인 엔지니어를 우선적으로 채용해야 함.
     * 네트워크를 활용하여 추천을 받고, 회사의 독특한 점을 강조하며, 채용 과정을 신속하게 진행해야 함.

    성과 관리

     * 부정적인 행동을 관리해야 함. 행동과 그 영향을 명확하게 피드백하고, 공공 대립을 피하며, 확고한 기대치를 설정해야 함.
     * 모든 사람에게 동일한 기준을 적용해야 함. 일관된 책임감이 팀의 결속력과 사기에 필수적임.

  초점 영역 3: 개인의 성공 지원

     * 성장을 전시 맥락에 맞게 재구성해야 함. 각 개인의 강점을 최대한 활용하여 영향을 극대화해야 함.
     * 높은 위험 환경에서 얻는 귀중한 경험을 강조해야 함.
     * 현장에서 학습 기회를 식별해야 함. 예를 들어, 누군가에게 사건 대응이나 고가시성 프로젝트를 이끌 기회를 제공할 수 있음.
     * 작은 제스처로 팀원의 개인 복지를 보여주는 기회를 찾아야 함.

  마지막으로: 자기 자신부터 돌보기

     * 전시 리더십은 매우 힘든 일임
     * 에너지가 고갈된 상태라면 팀을 위해 제 역할을 할 수 없음
     * 다른 사람들을 돕기 전에 먼저 자신의 산소 마스크를 착용하는 것을 기억해야 함
     * 기본에 우선순위 두기 : 건강한 식습관, 수면, 운동과 같은 기본적인 것들에 우선순위를 두어야 함. 신체를 정기적인 유지 보수가 필요한 기계로 취급해야 함
     * 동료 찾기 : 조직 내외부에서 당면한 도전 과제를 이해하고, 서로 의견을 나누고 지원을 받을 수 있는 동료를 찾아야 함
     * 작은 휴식 시간 마련 : 산책, 짧은 명상 또는 공용 구역에서 빠른 체스(또는 트럭!)게임과 같은 작은 휴식 시간을 가져야 함. 작은 재충전은 큰 도움이 될 수 있음
     * 건전한 맥락 유지 : 낮 동안에는 압도적으로 보일 수 있지만, 결국 이것은 그저 일일 뿐이며, 일 외에도 삶에서 만족을 찾을 다른 원천을 가져야 함

결론

     * 전시에는 위아래로부터 압박을 받기 때문에 엔지니어링 매니저에게 특히 힘든 시기임
     * 잘 정렬된 딜리버리에 집중하고, 회복력 있는 팀을 구축하며, 개인에 투자하고, 자신의 건강을 유지함으로써 팀이 단순히 생존하는 것이 아니라 압박 속에서도 번성할 수 있도록 이끌 수 있음
     * 침착함을 유지하고, ""고통에 몰두""하며, 자신이 가진 능력을 믿어야 함
     * 팀원들이 당신을 믿고 있음

  GN⁺의 정리

     * 기술 산업의 어려운 시기에 엔지니어링 매니저가 팀을 이끄는 방법에 대한 기사임.
     * 전시 상황에서의 리더십은 평시와 다르며, 우선순위 설정, 팀 권한 부여, 기술 부채 관리 등이 중요함.
     * 팀의 사기와 에너지를 유지하고, 부정적인 행동을 관리하며, 개인의 성장을 지원하는 것이 필요함.
     * 자신의 건강을 유지하는 것도 중요함.
     * 관련 분야의 다른 프로젝트로는 ""Wartime Software: Building Software when Speed Matters""와 Ben Horowitz의 ""Peacetime CEO/Wartime CEO""가 있음.

   엔지니어링 매니저의 세 가지 주요 초점 영역
   회사 목표에 맞춘 딜리버 보장
   고성과 엔지니어링 팀 구축 및 유지
   팀 구성원의 성공과 개인 성장 지원

   회사 다닌지 이제 8년차인데, 비즈니스 세상은 전쟁 기간이 아닐 때가 없더군요...

        Hacker News 의견

     * 첫 번째 의견
          + 전쟁 모드의 조직에서 팀 리드나 EM이 실제로 가지기 힘든 권한을 가정한 글임
          + 이사회 수준의 우선순위에 따라 기술적 결정이 내려지며, 주말에 긴급 프로젝트 계획을 세우는 일이 빈번함
          + 엔지니어링 팀은 반복되는 긴급 상황에 지쳐 있으며, 번아웃이 심각함
          + 우수한 엔지니어들은 상황이 개선되지 않을 것임을 깨닫고 다른 곳으로 이직을 준비함
     * 두 번째 의견
          + 많은 회사들이 전쟁 모드로 운영되며, 중요한 기능을 빨리 출시해야 한다고 생각함
          + 고위 임원들은 회사의 성공보다는 자신의 급여에 더 관심이 있음
          + 전쟁 모드가 아닌 정상 모드로 운영하면 모두가 최선을 다하고 있다는 인상을 주기 어려움
     * 세 번째 의견
          + 실제 전쟁 모드와 비교하면, 미국 회사의 전쟁 모드는 일종의 판타지 역할 놀이에 불과함
          + 스포츠 비유가 더 건강한 접근 방식일 수 있음
     * 네 번째 의견
          + 글쓴이는 실제로 엔지니어링 매니저로 일한 경험이 없으며, 글이 클리셰로 가득 차 있음
          + 이 글은 1차 관리자들을 번아웃 시키는 레시피에 불과함
     * 다섯 번째 의견
          + 전쟁 모드에서의 리더십이 평화 시기보다 더 쉬울 수 있음
          + 명확한 목표가 있을 때는 결정이 더 쉬움
          + 평화 시기에는 목표가 명확하지 않아 많은 의견 조율이 필요함
     * 여섯 번째 의견
          + 글의 제목과 조언 사이에 큰 괴리가 있음
          + 실제로 회사가 어려운 상황에 처했을 때, 팀의 안녕이 최우선이어야 함
     * 일곱 번째 의견
          + 작은 스타트업을 운영하며, 불을 끄는 방식으로는 지속 가능하지 않음을 깨달음
          + 주말에는 회복을 위해 시간을 사용하며, 월요일에 잘 쉬고 돌아오는 것이 중요함
          + 우선순위를 명확히 하고, 실행 가능한 것들에 집중해야 함
     * 여덟 번째 의견
          + 의사결정 권한을 분산시키는 것은 단기적으로만 효과적임
          + 행동에 편향된 접근 방식은 오히려 팀을 마비시킬 수 있음
          + 팀의 문화와 철학을 유지하면서 명확하게 소통하는 것이 중요함
     * 아홉 번째 의견
          + 전쟁 소프트웨어 개념은 허구이며, 고성능 팀을 만드는 것은 매우 어려움
          + 화재가 발생했을 때 팀을 이끄는 방법은 상황에 따라 다름
     * 열 번째 의견
          + 전쟁 소프트웨어는 매우 위험하며, 신중하게 접근해야 함
          + 반복 가능한 좋은 엔지니어링이 더 나은 접근 방식임
"
"https://news.hada.io/topic?id=16781","유전자 연구 논문의 5분의 1, Microsoft Excel (2016)로 인한 오류 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           유전자 연구 논문의 5분의 1, Microsoft Excel (2016)로 인한 오류 포함

     * Microsoft Excel의 자동 서식 기능이 많은 문제를 일으키고 있음
     * 새로운 연구에 따르면, 주요 과학 저널에 게재된 유전학 논문의 5분의 1이 이 프로그램의 오류를 포함하고 있음
     * 오류는 주로 스프레드시트에서 유전자 이름이 자동으로 날짜나 숫자 값으로 변경될 때 발생함
     * 예를 들어, _Septin-2_라는 유전자는 일반적으로 _SEPT2_로 줄여 쓰이지만, Excel에서는 2-SEP로 변경되어 2016년 9월 2일로 저장됨
     * 연구자들은 이 문제를 해결하기 위해 Excel 열을 텍스트로 서식 지정하거나 Google Sheets로 전환할 것을 권장함

GN⁺의 정리

     * 이 기사는 Microsoft Excel의 자동 서식 기능이 유전학 연구에 미치는 영향을 다루고 있음
     * 유전자 이름이 날짜나 숫자로 잘못 변환되는 문제를 해결하기 위해 텍스트 서식 지정이나 Google Sheets 사용을 제안함
     * 유전학 연구자들에게 중요한 정보로, 데이터 정확성을 유지하는 데 도움이 됨
     * 유사한 기능을 가진 다른 스프레드시트 프로그램으로는 Google Sheets가 있음

        Hacker News 의견

     * Excel의 자동 변환 기능으로 인해 데이터가 잘못 변환되는 문제에 대한 불만
          + 과학적 표기법으로 인식된 문자열이 숫자로 변환됨
          + 고유 위치 코드가 잘못 변환되어 데이터가 손상됨
          + Microsoft가 이러한 문제를 해결하지 않고 변명만 한다는 비판
     * 도구 사용에 대한 의견
          + 도구를 제대로 사용하지 않는 사용자들을 비판
          + 더 나은 도구를 배우거나 전문가의 도움을 받아야 한다는 주장
     * 스프레드시트의 산술 우선순위 버그에 대한 불만
          + 수학적 관례와 맞지 않는 결과를 반환함
          + 예를 들어, -3^2를 입력하면 -9가 아닌 9를 반환함
     * 독일 속담 인용
          + ""나쁜 일꾼은 항상 도구를 탓한다""는 속담을 인용하며 Excel에 감사함을 표현
     * 자동 날짜 읽기 기능 비활성화 불가에 대한 불만
          + 사용자가 이 기능을 비활성화할 수 없다는 점을 비판
     * Excel의 다기능성에 대한 비판
          + 하나의 소프트웨어가 너무 많은 기능을 하려고 한다는 문제 제기
          + 그럼에도 불구하고 Excel이 여전히 유용하다는 의견
     * 미국 우편번호 문제
          + 뉴잉글랜드 지역의 우편번호가 0으로 시작하는데, 이 0이 제거되는 문제
     * 과학 논문에서의 유전자 이름 오류 문제
          + Excel이 유전자 기호를 날짜로 잘못 변환하는 문제
          + 예를 들어, SEPT2가 '2-Sep'로, MARCH1이 '1-Mar'로 변환됨
     * 로그 파일 스크래핑 문제
          + awk 스크립트로 타임스탬프를 변환하는 과정에서 발생한 문제
          + 내부적으로 부동 소수점을 사용하여 결과가 잘못 반올림됨
          + Visidata에서 데이터를 페이지로 넘길 때도 같은 문제가 발생했으나 간단한 해결책이 있었음
"
"https://news.hada.io/topic?id=16715","YourNextStore – Stripe을 백엔드로 사용하는 오픈소스 Shopify","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             YourNextStore – Stripe을 백엔드로 사용하는 오픈소스 Shopify

     * Node.js + Stripe
     * Your Next Store는 Stripe와 긴밀히 통합되어 있어 Stripe 계정 필요
     * 테스트 모드와 프로덕션 모드 지원 (프로덕션 모드로 전환 시 Stripe 쪽의 추가 인증 필요)
     * Stripe에서 제품, 가격, 설명, 카테고리를 가져오므로, Stripe 대시보드에서 제품 추가 필요
     * Vercel에 배포하려면 GitHub 저장소와 환경 변수 설정 후 배포
     * 자체 VPS 및 Docker 에 배포는 곧 설명 추가 예정

        Hacker News 의견

     * Stripe 의존성에 대한 우려: Stripe는 합법적인 계정을 동결하고 모든 소통을 무시하는 경향이 있음
          + 중재를 강요하고, 동결된 자금을 투자할 수 있는 조건을 가짐
          + 집단 소송을 금지하는 조건이 있음
     * YNS 데모 링크 제공: YNS 데모
          + 이메일 test@test.com 사용 후 000000 입력 시 Stripe Link 작동 확인 가능
     * 디지털 다운로드 지원 여부 질문: 디지털 다운로드와 ""리드 마그넷"" 다운로드 지원 여부가 많은 상점에 도움이 될 것임
     * 데모 사용 후 피드백: 데모가 매우 잘 만들어졌고 빠름
          + 장바구니에서 제품을 제거할 때 버그 발견: 수량을 0으로 설정하면 새로고침이 반복되고 인터페이스가 응답하지 않음
     * 데이터베이스 없이 재고 관리 방법 질문: 여러 사람이 동일한 제품을 구매하려 할 때 재고가 부족하면 어떻게 처리하는지 궁금함
     * 데모의 가장 마음에 드는 기능: 단일 페이지 체크아웃이 Shopify의 훌륭한 체크아웃과 매우 유사함
          + WooCommerce가 Shopify의 자가 호스팅 대안 역할을 해야 하지만, 플러그인 생태계에도 불구하고 품질 좋은 장바구니와 체크아웃 운영이 어려움
          + 출시 축하 메시지
     * 배송비 계산 처리 방법 질문: Stripe의 제품 카탈로그에서 이 기능을 지원하는지 궁금함
     * Umami 지원에 대한 긍정적 평가: Dockerfile로 모든 것을 포장하는 것도 좋을 것임
          + Stripe 외의 구독 기능 사용 경험이 오래되었지만, 쿠폰 코드나 세일 지원이 얼마나 어려운지 궁금함
          + 훌륭한 작업이라는 칭찬
     * Stripe를 백엔드로 사용하는 한계: 많은 온라인 판매자가 여러 마켓플레이스를 사용함
          + 웹 스토어, Tindie, Reverb.com을 통해 판매 중이며, 배송 라벨 생성 및 주문 상태 추적을 위한 관리 앱을 구축함
          + 초기 버전은 Stripe 메타데이터를 사용했지만, 다른 곳에서 판매를 시작하면서 전통적인 데이터베이스 백엔드를 사용해야 했음
     * 새로운 전자상거래 시스템에 대한 기대: B2B 기능(대량 가격, 계정, 도매)이 우선되기를 희망함
          + 대부분의 시스템이 B2C에 집중하지만, 이는 종종 많은 소규모 상점의 실패와 짧은 제품 수명을 초래함
          + B2B에서는 기술 부채 고착화가 가능하여 런웨이를 연장할 수 있음
          + 로드맵을 고수하는 것이 좋으며, '아니오'라고 말하는 것을 보는 것이 좋음
"
"https://news.hada.io/topic?id=16679","비디오 게임 작성을 위한 실험적 신기술 Core","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       비디오 게임 작성을 위한 실험적 신기술 Core

     * coreCore는 무엇인가
          + coreCore는 Action-RPG 게임 제작 도구 및 엔진, 속성 편집기 형태로 비디오 게임을 작성하는 실험적인 방법임
          + 간단한 컴포넌트 시스템을 사용하며, 컴포넌트는 [keyword value] 형태의 clojure 벡터임
          + 다양한 엔티티는 clojure 맵으로 구성됨
          + 게임 내 부작용은 [:tx/foo param]와 같은 컴포넌트로 처리되며, 이는 datomic 구조와 유사함
          + 전체 게임 상태는 app/state라는 하나의 atom에 저장되며, 엔티티도 메인 atom 내부의 atom으로 존재함
          + 애플리케이션의 전체 내용은 resources/properties.edn에 저장되며, malli-schemas를 사용해 검증되고 GUI로 편집 가능함
     * 스크린샷
     * 개발 시작 방법
          + 다음 명령어를 입력:
               o lein dev
          + 애플리케이션이 시작되며 다음 작업도 수행됨:
               o NREPL-서버 시작
               o 애플리케이션 종료 시 (메인 메뉴에서 ESC), clojure.tools.namespace가 변경된 파일을 새로고침하고 앱을 재시작함
               o 오류 발생 시 JVM을 재시작할 필요 없이 오류를 수정하고 dev-loop/restart!를 호출하면 됨
               o VIM에서 F5 키에 다음 명령어를 바인딩하여 사용 가능: nmap <F5> :Eval (do (in-ns 'dev-loop)(restart!))
     * 코드 라이선스
          + MIT 라이선스 하에 제공됨
     * 자산 라이선스
          + 사용된 자산은 독점적이며 오픈 소스가 아님
               o 타일셋: https://winlu.itch.io/
               o 생물, 아이템, 스킬 아이콘, FX 및 기타 자산: https://www.oryxdesignlab.com
               o 커서: Leonid Deburger https://deburger.itch.io/

GN⁺의 정리

     * coreCore는 Action-RPG 게임을 쉽게 제작할 수 있는 도구로, 간단한 컴포넌트 시스템을 사용해 게임 상태를 관리함
     * 전체 게임 상태를 하나의 atom에 저장하고, GUI를 통해 속성을 편집할 수 있어 개발자에게 유용함
     * MIT 라이선스로 제공되지만, 사용된 자산은 독점적임
     * 비슷한 기능을 가진 도구로는 RPG Maker, Unity 등이 있음

        Hacker News 의견

     * 다양한 게임 개발 접근 방식을 보는 것이 흥미로움
          + Bevy (Rust ECS 엔진): 처음에는 좋지만 구현에 문제가 많고 복잡해질 수 있음
          + Unity: 게임 객체와 모듈형 구성 요소 시스템이 실용적임
          + Godot: OOP 계층 구조와 내장 언어가 불만족스러웠음
          + Pygame: 작은 프로젝트에 적합하며 절차적이지만 OOP나 함수형 계층을 만들 수 있음
          + Clojure: 함수형 구현이 흥미로움
     * 이 GitHub 프로젝트는 게임 개발자에게는 우스꽝스러움
          + 학문적인 접근 방식이 과장된 느낌
          + 스크린샷이 보기 흉함
     * 게임 개발을 단순하게 만들 수 있다고 주장하지만 많은 용어를 사용함
          + Clojure 벡터, Datomics, 아톰, 트랜잭션, Malli 스키마 등
     * 이 프로젝트는 실패한 것 같음
          + 과도하게 설계된 구조와 명확한 구조가 부족함
          + 게임 스토리가 없어서 명확한 방향 없이 코딩했음
     * 문서화가 거의 없는 이 저장소가 많은 대화를 생성함
          + 코드가 게임 엔진보다는 프로젝트처럼 보임
          + 속성 편집기가 흥미로움
          + 제목 때문에 업보트된 것 같음
     * ""게임을 만들고 싶다""는 이야기가 게임 엔진을 만드는 것으로 변하는 경우를 많이 봄
          + 엔진 코드를 먼저 작성하면 나머지 게임 제작 과정이 쉬울 것이라는 생각에 빠짐
          + 엔진을 만드는 것이 게임을 만드는 것보다 더 재미있을 수 있음
          + 엔진을 최적화하는 것이 더 빠른 보상을 줌
          + Phaser js 엔진을 사용하여 빠르게 인터랙티브한 것을 화면에 표시하려고 시도했음
     * Clojure를 사랑하지만 불변 데이터 구조를 가진 함수형 언어가 게임 개발에 적합한지 의문임
     * 게임 상태가 하나의 아톰에 저장되고 엔티티가 그 안에 다시 아톰으로 저장됨
          + Clojure에서 ""아톰""을 이렇게 사용하는 것이 일반적인지 의문임
     * ""게임 엔진에 소요된 시간/복잡성"" vs ""생산된 게임의 복잡성/흥미"" 데이터를 분석하는 것이 흥미로울 것 같음
          + 단순한 템플릿/엔진 시스템으로 만든 게임의 다양성이 감소할 것이라고 예상함
     * Unreal Engine 4로 구동되는 상업용 게임 제작 플랫폼인 Core가 이미 존재함
"
"https://news.hada.io/topic?id=16713","DC-DC 전압 변환의 마법전압 변환의 마법 (2023)

    DC-DC 전압 변환의 마법

      저항 기반 분압기

     * 저항 기반 분압기는 안정된 공급 전압에서 중간 전압을 얻는 가장 간단한 방법임
     * R1과 R2의 저항 비율에 따라 중간 전압이 결정됨
     * 제한점: 부하 전류가 클 경우 전압이 불안정해짐

      기본 선형 레귤레이터

     * 선형 레귤레이터는 가변 저항을 사용하여 부하 전압을 일정하게 유지함
     * 트랜지스터 기반 전압 팔로워: MOSFET을 사용하여 전압을 조절함
     * 개선된 레귤레이터: 내부 제너 다이오드를 사용하여 절대 전압 기준을 제공함
     * 오퍼 앰프 사용: 전압 비교기를 사용하여 피드백 메커니즘을 통해 전압을 안정화함
     * 단점: 에너지 낭비가 크고, 열 관리와 배터리 수명 문제가 발생함

      스위치드 커패시터 컨버터 (차지 펌프)

     * 차지 펌프는 커패시터를 사용하여 전압을 증폭하거나 감소시킴
     * 작동 원리: 커패시터를 충전하고 방전하여 전압을 변환함
     * 장점: 높은 효율성 (85% 이상)
     * 단점: 전압 조절이 어렵고, 높은 전류를 처리하기 어려움

      벅 컨버터

     * 벅 컨버터는 인덕터를 사용하여 공급 전압보다 낮은 전압을 생성함
     * 작동 원리: 인덕터와 다이오드를 사용하여 전압을 조절함
     * 장점: 높은 전류를 처리할 수 있고, 전압 조절이 용이함
     * 단점: 인덕터의 저항과 전자기 간섭으로 인한 손실 발생

      부스트 컨버터

     * 부스트 컨버터는 인덕터를 사용하여 공급 전압보다 높은 전압을 생성함
     * 작동 원리: 인덕터의 자기장을 이용하여 전압을 증폭함
     * 장점: 높은 전압을 생성할 수 있음
     * 단점: 전압 조절이 필요하고, 전자기 간섭이 발생함

    GN⁺의 정리

     * 이 글은 DC-DC 전압 변환의 다양한 방법을 설명하며, 각 방법의 장단점을 다룸
     * 전자 회로 설계에 필요한 기본 지식을 제공하여 초보자도 쉽게 이해할 수 있음
     * 전압 변환의 효율성과 안정성을 높이는 방법을 제시함
     * 유사한 기능을 가진 제품으로는 Texas Instruments의 LM7805, LM317, 그리고 Microchip의 MCP1642B/D 등이 있음

        Hacker News 의견

     * DC-DC 컨버터는 어렵지만 재미있음
          + 인덕터에 전류를 넣고 끊으면 큰 전압 스파이크가 발생함
          + 이 스파이크를 다이오드를 통해 커패시터에 충전하여 DC를 얻을 수 있음
          + 스위칭 전원 공급 장치는 전력 경로에 저항이 거의 없어 효율이 좋음
          + 하지만 주기 중 일부는 입력에 단락되어 화재 위험이 있음
          + 부스트 컨버터, 벅 컨버터, 트랜스포머를 사용하는 컨버터가 있음
          + 트랜스포머는 입력과 출력을 분리하여 안전을 보장함
          + USB 5VDC를 120VDC로 변환하여 오래된 텔레타이프 기계를 작동시키는 예시를 제공함
          + LTspice 시뮬레이션을 통해 노이즈를 최소화함
     * 부스트 컨버터와 유압 램의 흥미로운 연결
          + 유압 램은 스트림의 운동 에너지를 이용해 물을 높은 위치로 펌핑함
          + 두 장치의 방정식은 본질적으로 동일하며 단위만 다름
     * MIT 6.622 Power Electronics 강좌 추천
          + Prof. David Perreault의 강의가 훌륭함
          + 고급 주제를 다루지만 기본을 잘 설명하여 이해를 돕는 강좌임
     * 선형 조절기의 장점
          + LDO는 저렴하고 사용하기 쉬움
          + 5V USB 충전기를 사용하는 취미 프로젝트에 적합함
          + 벅 컨버터는 더 많은 공학적 노력이 필요함
     * 회로 설계의 복잡성
          + 데이터시트에 좋은 참고 회로가 있으면 도움이 됨
          + 부품 선택과 연결에 많은 주의가 필요함
          + 설계 시 모든 것을 두 번 확인해야 함
     * 초보자에게 어려운 부스트 컨버터
          + 많은 튜토리얼이 중요한 부분을 설명하지 않음
          + 원하는 입력 전압에 맞는 IC를 찾거나 선형 조절기를 사용해야 함
          + AI 생성 답변을 그대로 사용하지 말아야 함
     * 자동차 EMC 테스트에서의 문제
          + 전압 변환이 테스트 실패의 주요 원인임
          + 벅-부스트 컨버터는 소음이 많고 디버깅이 어려움
     * 마이크로컨트롤러 세계에서의 대안
          + 몇 개의 다이오드를 쌓는 간단한 대안이 있음
     * 오디오 작업에서의 문제
          + 3.7V를 5V로 변환하는 장치가 노이즈를 유발함
          + 배터리 소스가 마이크 입력에 영향을 미침
          + DC-DC 컨버터 설계 시 노이즈를 최소화해야 함
     * 기계적 기어박스에 벅/부스트 컨버터 아이디어 적용
          + 전기 회로의 전압과 전류는 기계적 축의 토크와 속도에 대응됨
          + 스프링과 해머 메커니즘을 사용하여 토크/속도를 변환하는 기어박스 설계 가능성
          + 높은 주파수에서 작동하는 부품 설계의 어려움 있음
"
"https://news.hada.io/topic?id=16696","내 아이들을 위한 NFC 영화 도서관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          내 아이들을 위한 NFC 영화 도서관

     * 어릴 적 VHS 테이프를 보던 추억을 디지털 시대에 맞게 재현하고 싶었음
     * 아이들이 직접 영화를 선택할 수 있는 방법을 고민하다 NFC 태그를 활용한 시스템을 만듦

  최종 결과

     * NFC 태그가 내장된 라미네이트된 영화 커버를 사용
     * 아이가 원하는 영화를 선택해 NFC 리더기에 올리면 Home Assistant가 자동으로 재생

  개념 증명 및 재료

     * 간단한 프로토타입을 제작
     * NFC 리더기와 ESP32 보드를 사용해 NFC 태그를 인식하는 시스템을 만듦
     * AliExpress에서 필요한 하드웨어를 구매
          + 50개의 PVC NFC 카드 (NTAG215): €9.43
          + ESP32-C3 (Super Mini): €2.93

  ESPHome 플래싱

     * NFC 리더기를 ESP32에 연결하고 ESPHome을 플래싱
     * ESP32 ""Super Mini"" 변형을 위해 몇 가지 특별한 platformio_options 추가
     * NFC 태그가 스캔되면 Home Assistant에 이벤트를 전송

  3D 프린팅 인클로저 및 컬렉션 박스

     * 전자 부품과 배선을 보호하기 위해 간단한 인클로저를 3D 프린팅
     * NFC 카드를 보관할 수 있는 박스도 제작

  ""DVD"" 카드 제작

     * PVC 카드에 영화 커버를 인쇄하고 NFC 태그를 내장
     * 라미네이터를 사용해 NFC 태그를 보호

  Home Assistant 자동화

     * NFC 태그가 스캔되면 Home Assistant가 올바른 영화를 재생하도록 자동화 설정
     * Plex와 Apple TV를 사용해 영화 재생
     * 특정 시간대에만 자동화가 작동하도록 조건 추가

  무작위 에피소드 재생

     * Plex의 스마트 플레이리스트 기능을 사용해 무작위 에피소드 재생 가능

  향후 개선 사항

     * 더 작은 NFC 리더기(PN532)로 교체해 인클로저 크기 줄이기
     * 인쇄 가능한 NFC 카드 사용해 더 아름답고 균일한 카드 제작

  물리적 미디어의 장점

     * 제한된 영화 선택으로 집중력 향상
     * 아이들이 자율적으로 영화를 선택할 수 있음
     * 자율성과 함께 책임감도 배울 수 있음
     * 협력과 타협을 배우는 기회 제공

  스트리밍 서비스에 대한 생각

     * 스트리밍 서비스를 싫어하는 것은 아님
     * 블루레이를 구입해 Plex 서버에 저장하는 것이 더 경제적
     * 블루레이의 추가 콘텐츠와 다양한 언어 지원이 장점

  결론 및 다운로드

     * 이 시스템에 매우 만족하며, 더 많은 사람들이 이 시스템을 활용할 수 있기를 바람

GN⁺의 정리

     * 이 기사는 디지털 시대에 아날로그 감성을 더한 창의적인 프로젝트를 소개함
     * NFC 태그와 Home Assistant를 활용해 아이들이 자율적으로 영화를 선택할 수 있는 시스템을 구축
     * 물리적 미디어의 장점과 스트리밍 서비스의 한계를 설명
     * 비슷한 기능을 가진 프로젝트로는 Plex와 Apple TV를 활용한 자동화 시스템이 있음

        Hacker News 의견

     * Yoto와 Tonies라는 어린이용 NFC 오디오 플레이어를 소개함
          + Yoto는 인터넷 라디오 스타일의 NFC 카드 사용
          + Tonies는 Skyrim 스타일의 피규어를 사용하여 이야기를 재생
          + Techmoan의 리뷰 링크 제공
     * 음악을 위한 NFC 태그 사용 아이디어 공유
          + 포스터 뒤에 NFC 태그를 숨겨두고, 휴대폰을 태그에 대면 음악이 재생됨
          + 카세트나 레코드 스타일의 플라스틱 카드와 앨범 아트를 결합한 NFC 태그 컬렉션을 만들고 싶음
     * 딸이 어렸을 때 비슷한 시도를 했던 경험 공유
          + 딸이 리모컨 사용법을 빨리 배워서 '옛날 방식'이 더 나았다고 생각함
          + VHS 사용법을 배웠던 어린 시절 경험을 통해 어려운 것이 학습에 도움이 된다고 언급
     * 레트로 게이머를 위한 TapTo 프로젝트 소개
          + Mister FPGA 설정을 사용한 다양한 아티스트의 프린트 제공
          + 아케이드 캐비닛에 통합할 계획
     * 제한된 영화 선택이 좋다는 의견에 대한 반박
          + ""어렸을 때 X를 가졌기 때문에 X가 좋다""는 논리에 동의하지 않음
     * Raspberry Pi와 SONOS를 사용한 프로젝트 경험 공유
          + NFC 카드를 사용하여 앨범을 재생하는 시스템 설정 경험
          + Raspberry Pi를 다른 용도로 사용하게 되어 시스템을 다시 실행하지 못함
     * NFC 태그를 사용한 앨범 아트 벽 아이디어 소개
          + 벽에 앨범 아트를 덮고, NFC 태그를 숨겨두어 휴대폰으로 앨범을 스트리밍
     * Yoto를 3살 아이에게 준 경험 공유
          + 비슷한 UX를 가진 Yoto를 추천함
     * NFC/RFID 기술에 대한 흥미로운 아이디어 공유
          + Dropmix 게임에서 영감을 받아 NFC/RFID 기술을 탐구함
          + 다양한 촉각적 경험을 제공할 수 있는 가능성 언급
     * 첫 아이를 가진 후 비슷한 프로젝트를 시도할 계획
          + OP의 아이디어를 칭찬함
"
"https://news.hada.io/topic?id=16798","Scrum이 당신을 스트레스 받게 하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Scrum이 당신을 스트레스 받게 하는 이유

     * 오늘날의 프로그래밍은 90년대와 2000년대 초반보다 훨씬 더 스트레스가 많음
     * 당시에는 마감일 근처에서만 일이 미쳤었고, 다른 때는 비교적 평온했음
     * 최근 몇 십 년 동안 스트레스가 증가한 이유를 고민해 봤음
     * 경쟁, 시장 변화, 엄격한 마감일 때문이 아니라, 스프린트 방식의 작업 때문임

1. 스프린트는 멈추지 않음

     * 스프린트는 끝나지 않는 연속적인 마감일임
     * 워터폴 방식은 실제 마감일과 이벤트에 맞춰져 있었음
     * 스프린트는 인위적인 마감일로, 자연스러운 휴식 시간이 없음
     * 단기 스트레스는 건강에 좋을 수 있지만, 장기 스트레스는 신체에 해로움

2. 스프린트는 자발적이지 않음

     * 팀이 자발적으로 2주마다 코드를 배포하는 것과는 다름
     * 스프린트의 모든 측면이 규정되어 있음
     * 자율성은 작업 경험에 중요한 역할을 함
     * 강제적인 작업은 스트레스와 불편함을 초래함

3. 스프린트는 중요한 지원 활동을 무시함

     * 스프린트는 다음 작업을 준비할 시간을 제공하지 않음
     * 작업을 수행하기 위해서는 준비 시간이 필요함
     * 스프린트는 준비와 실행을 분리하려고 하지만, 이는 스트레스를 유발함

스크럼폴: 실제 (그리고 더 나쁜) 그림

     * 대부분의 스크럼 구현은 워터폴과 스크럼의 혼합임
     * 큰 마감일이 항상 배경에 존재함
     * 큰 마감일이 다가오면 스크럼이 중단되고, 스트레스가 증가함

결론

     * 스프린트에는 휴식이 없고, 자율성이 부족하며, 준비 시간이 부족함
     * 개발자들은 자신의 작업과 프로세스를 통제할 수 있어야 함
     * 이를 위해서는 윤리적인 조직을 구축하거나 프리랜서로 전환하는 등의 노력이 필요함

GN⁺의 정리

     * 이 글은 스크럼 방식이 개발자에게 지속적인 스트레스를 주는 이유를 설명함
     * 스프린트의 연속적인 마감일, 자율성 부족, 준비 시간 부족이 주요 원인임
     * 개발자들이 자신의 작업 방식을 통제할 수 있도록 해야 함
     * 유사한 기능을 가진 다른 프로젝트로는 Kanban 방식이 있음

   SI 공공 등의 프로젝트를 수행 할 때도 phase 1, 2, 3.. 이런 식으로 쉴 새 없이 몰아붙이고 있습니다. 그리고 그 개별 phase 마다 뭐가 또 엄청 변경이 발생합니다. 이래서는 성공적으로 개발 하려는 scrum 본연의 목적도 절대 이룰 수 없고. 그냥 정신없이 이 난장판 어수선한 분위기에서 개발자만 몸이 녹아 납니다.

   현직 pm인데요.
     * 잘 동작했다고 느꼈던 애자일/스크럼에서는 주요 스프린트가 끝나면 회고하고, 휴식하는 시간을 부여받았습니다. 개발팀도 기획팀도 다음 것을 준비하기 전에 쉴 수 있는 타이밍이 있었구요.
     * 본문과 동일하게 동작하지 않는다고 느꼈던 방식에서는 워터폴로 내려오는 데드라인 아래에 제품팀 내부에서 스크럼 방식도 같이 동작시키면서 스트레스가 가중되었고, 데드라인 자체가 변경 불가였기 때문에 휴식/회고할 시간도 없이 매주 달리면서, 끝나지 않는 달리기같은 느낌이 있었어요.

     * 애자일과 스크럼이 잘 동작하는 팀의 경우에는 미팅이 효율적이고, 미팅을 하지 않아도 기획<>개발이 일방적이지 않은 상호 존중, 소통, 안전한 팀이라는 분위기가 있었고요.
     * 반대로 잘 동작하지 않는 팀은 늘 팀원들이 수동적, 강압적, 비난적 어조, 회의적인 분위기가 반복되었던 것 같습니다.

   워터폴의 의도는 가능한 한 요구사항을 초기에 식별하고 설계-구현-테스트 작업 간의 의존성이 있으니 일을 순서대로 하자는 것, 그리고 애자일과 스프린트의 의도는 워터폴로 미리 설계하거나 구현하기에 너무 분량이 많은 일을 작게 쪼개서 해보자는 거라고 저는 이해하는 데요. 둘 다 장단점이 있고 교조적으로 방법론을 추구하기 보다는 상황에 맞게 필요한 것만 취사 선택만 해도 되지 않을까 싶네요. 글에서 주장하는 것과 같이 휴식도 있어야 하고 기술 검토나 프로토타입을 만드는 준비 시간도 있어야 할 거구요. 누가 작업의 순서를 결정하든 방해요소를 이해하고 실무의 흐름대로 우선순위를 결정하기만 하면 개발자 자율성의 유무도 상관이 있나 싶습니다

   개발 경험은 전혀 없고 개발 방법론의 절차를 맹목적으로 적용하려는 매니저들이 외국에서 많이 양산돼서 외국 블로그에 이런 글들이 올라오는 걸까요? 마치 우리나라의 실무를 전혀 모르는 기획자와 개발자 사이의 갈등을 보는 듯 하네요

   실무 흐름대로 우선순위를 제일 잘 결정할 수 있는것은 개발자 그 자신일 텐데요, 자율성을 뺏고 그걸 다른사람이 대행해 준다는 접근 자체가 오히려 실무와 팀 계획의 격리를 일으키는 원인이라 생각합니다.

   매니징 자체도 하나의 전문분야라 한다면, 개발 경험이 없는 매니저라 할지라도 개발 리소스의 매니징이 잘 안되는 시점을 맞닥뜨리게 되었을 때 그 상황에 대한 해답은 매니저가 적응 혹은 대응해야 한다고 생각합니다. 그런데, 이 책임소재가 개별 기여자에게 전가되는것을 너무 많이 봤네요...

   네 최종 책임은 매니저가 져야 하죠. 근데 현실은 그렇지 않나 봅니다. 마치 경영만 할 줄 아는 CEO가 회사의 업은 하나도 이해 못하고 종종 회사를 말아먹는 것처럼요

   핑퐁만 치는 PM들이 넘마나요 ㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ

        Hacker News 의견

     * Rich Hickey의 말을 인용하며, 프로그래머는 짧은 거리만 달리는 주자와 달리, 매 100야드마다 출발 신호를 쏘아 새로운 스프린트를 시작하는 방식으로 문제를 해결함
     * 소프트웨어 프로세스를 싫어하게 되었음. 팀 규모를 적절하게 설정하고 개발자에게 목표를 달성할 수 있도록 권한을 부여하면, 관리의 생산성 흐름 없이도 잘 해낼 수 있음. Agile 등은 관리자가 자신의 급여를 정당화하기 위해 존재함
     * ""스프린트가 자발적이지 않다""는 의미가 무엇인지 궁금함. 팀이 스프린트의 특성을 선택하며, 무작위로 할당되지 않음. 리더십, 팀원, 비팀 이해관계자 간의 협업임. 스크럼이 너무 경직된 이유를 설명해주길 바람
     * 스크럼이 처음 나왔을 때부터 개발자가 계속 스프린트를 하는 것이 말이 안 된다고 생각했음. 스프린트는 짧고 빠르며, 그 후에는 휴식이 필요함. 모든 작업을 스프린트로 만드는 것은 미친 짓임
     * 스크럼이 실제로는 더 나쁜 ""스크럼폴""로 변하는 경우가 많음. 초기에는 원격 팀의 소통을 위해 스크럼을 사용했으나, 점차 마케팅 주도 목표와 스트레스가 많은 스프린트로 변함. 개발자 소진이 명확하게 드러남
     * 2000년대 초반에는 프로젝트 매니저 없이 엔지니어 팀이 자체적으로 일했음. 소프트웨어가 지금처럼 상호 연결되지 않았고, 배포 주기도 길었음. 현재는 CI/CD와 지속적 배포로 인해 모든 것이 빠르게 진행됨. SCRUM이 스트레스를 줌
     * 대부분의 대화는 ""내 직장에서 스크럼이 X, Y, Z 때문에 별로임""과 ""그건 이상적인 스크럼이 아님""으로 요약될 수 있음
     * 40년 동안 소프트웨어를 개발해왔으며, 어떤 방법을 사용하든 작업을 나누고 목표 달성을 보여줘야 함. 작은 팀에서는 간단한 코드베이스로 Kanban이 충분할 수 있지만, 큰 팀이나 복잡한 솔루션에서는 보고가 필요함
     * Agile, Scrum, Standups 등을 사용하지 않음. 주 1회 회의를 통해 우선순위를 재설정하고, 티켓 시스템으로 진행 상황을 추적함. 개발자가 자율적으로 일할 수 있도록 함. 회의나 TPS 보고서보다 코딩에 더 많은 시간을 할애해야 함
     * 8개의 회사에서 일해본 결과, Basecamp의 Shape Up 접근 방식이 가장 성공적이었음. ""얼마나 많은 날""이 아닌 ""얼마나 많은 시간을 투자할 것인지""를 묻는 것이 중요함. Shape Up은 6주 주기 사이에 쿨다운 시간을 제공하며, 일관되게 성공적인 제품을 제공함
"
"https://news.hada.io/topic?id=16761","닌텐도 스위치로의 SBCL 포팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           닌텐도 스위치로의 SBCL 포팅

  현재 상태

     * 현재 SBCL 런타임과 컴파일러를 Nintendo Switch에서 실행할 수 있도록 포팅 완료
     * 공유 라이브러리와의 인터페이스도 가능하며, 다양한 운영 체제 이식성 라이브러리도 포팅 완료
     * 그러나 SBCL의 가비지 컬렉터가 작동할 때 충돌 발생
     * 오디오 출력 불가, C 콜백 메커니즘 문제
     * 성능 관련 문제도 예상됨

  개요

     * Switch는 ARM64 Cortex-A57 칩과 4GB RAM을 사용하며, 독점 마이크로커널 운영 체제에서 실행됨
     * SBCL은 이미 ARM64 Linux 포트를 가지고 있어 코드 생성 문제는 해결됨
     * Switch는 OpenGL 그래픽 라이브러리를 지원하는 유일한 콘솔로, Trial의 그래픽 라이브러리 포팅이 용이함
     * 개발을 시작하기 위해 Nintendo of Europe에서 개발 키트를 구입하고 SDK를 설치함

  SBCL 빌드 과정

    1. build-config: 빌드 구성 옵션을 수집하여 읽을 수 있는 형식으로 출력
    2. make-host-1: 호스트 Lisp 컴파일러로 크로스 컴파일러 빌드
    3. make-target-1: 타겟 C 컴파일러로 C 런타임 생성
    4. make-host-2: 타겟 Lisp 시스템 빌드
    5. make-target-2: 타겟 런타임에서 콜드 코어를 로드하고 부트스트랩 완료

  Switch용 빌드

     * Switch는 PC 환경이 아니며, 셸, 명령줄, 컴파일러가 없음
     * 실행 가능한 페이지를 생성할 수 없으므로 런타임 컴파일 불가
     * 대부분의 코드는 플랫폼 독립적이며 ARM64로 컴파일 가능
     * fasteval을 사용하여 런타임 컴파일을 대체

  가비지 컬렉터

     * SBCL의 표준 GC는 ""gencgc""로, 세대별 가비지 컬렉터임
     * 멀티스레딩 환경에서 객체 이동 문제 발생
     * Unix 시스템에서는 신호 메커니즘을 사용하여 스레드를 주차하지만, Switch에서는 불가능
     * ""safepoints"" 전략을 사용하여 스레드가 자체적으로 주차하도록 함

  향후 작업

     * CLOS를 가능한 한 많이 고정하고 사전 컴파일 탐색
     * Switch의 저성능 프로세서로 인해 추가 최적화 필요
     * 가비지 컬렉터 완전 작동 필요
     * C 콜백 문제 해결 필요

  결론

     * NDA로 인해 작업 내용을 공개할 수 없지만, 가능한 부분은 공개 중
     * Patreon, GitHub, Ko-Fi를 통해 지원 요청

GN⁺의 정리

     * 이 글은 Common Lisp 런타임을 Nintendo Switch에 포팅하는 과정과 도전 과제를 다룸
     * Switch의 독점 운영 체제와 하드웨어 제약으로 인해 많은 기술적 어려움이 발생함
     * 가비지 컬렉터와 멀티스레딩 문제, 런타임 컴파일 문제 등이 주요 도전 과제임
     * 이 프로젝트는 Common Lisp 개발자와 게임 개발자에게 유용한 정보를 제공함

        Hacker News 의견

     * 몇 주 동안 Trial을 사용하여 Common Lisp로 게임 개발을 테스트해보았고, 매우 즐거운 경험이었음
          + 게임이 실행 중일 때 거의 모든 부분을 수정할 수 있는 점이 큰 장점임
          + 이 포트가 성공하기를 바람
     * SBCL은 훌륭한 언어 구현이며, ""진짜"" 게임 콘솔을 위해 CL 개발을 해보고 싶었음
          + Shinmera가 이 작업을 하고 있다는 사실에 놀랐음
          + SBCL의 내부를 잠깐 봤을 때 겁이 났었는데, 그에게 찬사를 보냄
          + SBCL(+스레딩/SDL2)이 Raspberry Pi에서 작동하는지 궁금함
     * 저자에게 흥미롭고 자세한 글을 써줘서 감사함
          + 이런 수준의 세부 사항은 보통 콘솔 수명이 끝난 후에야 공개됨
          + 이런 깊이 있는 작업을 읽을 때마다 내가 하루 종일 쓰는 단조로운 소프트웨어가 부러워짐
     * 공식 SDK를 사용한 이유가 궁금함
          + Nintendo가 3rd 파티 SDK로 만든 게임을 공식적으로 출판하지 못하게 하는 것일 수도 있음
     * Kandria를 구매했음
          + 게임을 많이 하지 않지만, Shinmera가 Lisp 세계의 경계를 넓히고 있는 것은 지지할 만한 일임
     * SBCL - ""Steel Bank Common Lisp""
          + SBCL은 고성능 Common Lisp 컴파일러이며, 오픈 소스/무료 소프트웨어임
          + ANSI Common Lisp를 위한 컴파일러와 런타임 시스템 외에도 디버거, 통계 프로파일러, 코드 커버리지 도구 등 다양한 확장을 제공함
     * 그녀의 작업은 놀라움
          + CL을 여기저기 쓰는 것을 좋아하는 나에게 큰 기쁨을 줌
     * Nintendo와 Sony가 이런 노력을 지원했으면 좋겠음
          + Github Accelerator와 같은 프로그램을 시작하는 것이 콘솔을 위한 게임(IP)을 만드는 또 다른 방법임
     * 약간 주제에서 벗어나지만, Yuzu를 Nintendo Switch로 포팅하는 것이 놀라울 것임
     * HN에 오는 이유가 바로 이런 것임
          + OP와 그의 동료에게 찬사를 보냄
          + Nintendo가 시스템에 대해 조금 더 개방적일 수 있다면 큰 축복일 것임
"
"https://news.hada.io/topic?id=16733","온도계가 아닌 온도 조절기가 되라 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       온도계가 아닌 온도 조절기가 되라 (2023)

     * 온도계가 아닌 온도 조절기가 되기
          + 인간의 상호작용에서 우리는 주변 사람들의 분위기에 쉽게 영향을 받음
          + 무의식적으로 다른 사람의 목소리 톤이나 몸짓을 보고 반응함
          + 회의에서 이상한 분위기를 느낀 적이 있다면, 이는 우리의 본능적인 반응임
     * 인간은 서로를 반영함
          + 한 사람이 주의를 기울이지 않으면, 다른 사람도 그 영향을 받음
          + 한 사람의 나쁜 날이 다른 사람에게도 영향을 미침
          + 이는 방어 메커니즘의 일환으로, 비판할 필요는 없음
     * 다른 사람의 행동 변화를 인식하기
          + 사람들의 행동 패턴을 인식하는 연습이 필요함
          + 행동 변화는 그들의 핵심 욕구가 충족되지 않았음을 나타낼 수 있음
          + 이를 데이터로 보고 긍정적인 영향을 줄 기회로 삼을 수 있음
     * 온도계 vs 온도 조절기
          + 다른 사람의 감정을 측정하는 것은 온도계를 사용하는 것과 같음
          + 한 사람의 행동 변화가 다른 사람에게 영향을 미칠 수 있음
          + 온도 조절기가 되어 방의 온도를 긍정적이고 건강하게 설정할 수 있음
     * 온도 조절기가 되기
          + 다른 사람의 감정 변화를 인식하고, 이를 긍정적으로 재구성할 수 있음
          + 의도적으로 방의 에너지를 변화시킬 수 있음
     * 상황을 명명하기
          + 에너지가 변했음을 말로 표현하는 것이 온도를 재설정하는 방법 중 하나임
          + 상대방의 감정을 추측하지 말고, 열린 질문을 통해 그들의 필요를 물어보는 것이 중요함
     * 톤과 몸짓 선택하기
          + 짧고 부드러운 톤과 개방적인 몸짓을 사용하여 의사소통함
          + 부드러운 눈맞춤과 적절한 거리 유지가 중요함
          + 의도적으로 톤을 선택하여 상대방이 듣고 있다고 느끼게 함
     * 휴식 제안하기
          + 상대방이 스트레스를 받거나 집중하지 못할 때, 대화를 잠시 멈추고 나중에 다시 시작할 것을 제안함
          + 부드러운 표현을 사용하여 상대방을 공격하지 않도록 주의함
     * 배운 점/할 일
          + 온도 조절기로서의 역할을 인정하고, 자신의 행동을 반성함
          + 진정성 있는 표현을 통해 상대방의 필요와 감정을 존중함
     * GN⁺의 정리
          + 이 글은 인간의 상호작용에서 감정의 영향을 이해하고, 긍정적인 변화를 이끌어내는 방법을 설명함
          + 온도계가 아닌 온도 조절기가 되어 방의 에너지를 설정하는 것이 중요함
          + 상대방의 감정 변화를 인식하고, 이를 긍정적으로 재구성하는 기술을 배울 수 있음
          + 유사한 기능을 가진 프로젝트로는 감정 인식 및 관리 도구가 있음

        Hacker News 의견

     * 이 비유는 매우 공감되었음. 기사 전체를 읽을 가치가 있음. 링크된 기사들도 유익한 조언이 많음
          + 어려운 상황에서 ""내가 배운 것...""과 ""내가 할 일은...""이라는 전술이 마음에 들었음
          + 누군가가 자신의 걱정에 공감하고 행동할 것이라는 느낌을 줌
          + 눈을 마주치고, 약간 앞으로 기울이는 등의 조언도 유익함
          + 누군가가 이상한 느낌을 줄 때, 단순히 반응하지 말고 감정을 조절하는 것이 중요함
     * 감정 지능과 인식의 중요성에 대한 기사의 요점은 좋음
          + 그러나 인간이 단순히 ""온도 조절기""가 될 수 있다는 생각에 회의적임
          + 감정은 통제할 수 없는 여러 요인에 의해 유발됨
          + 기사의 제안은 감정 노동처럼 느껴지며 지속 가능하지 않음
          + 사람들이 항상 감정적 영향을 인식하고 있을 수 있을까에 대한 의문
     * 불안정한 부모로부터의 대처 메커니즘으로 타인의 감정을 내 탓으로 돌리는 경우가 있음
          + 타인의 감정에 책임이 없음을 기억해야 함
          + 자신의 행동에만 책임이 있음
     * 마지막 이메일이 변경 사항을 잘 설명하지 못했다는 것을 배웠음
          + 질문을 게시할 수 있는 포럼을 만들고 CEO가 매주 화요일에 답변할 계획임
          + 현실적인 시작이 중요함
          + 허황된 약속을 하지 말아야 함
     * Nonviolent Communication 책을 추천함
          + 미충족된 필요를 말하는 데 중점을 둠
          + 유익한 내용임
     * 이 언어를 차용할 예정임
          + 사회 생활에서 매우 중요한 측면임
          + 항상 온도계처럼 행동해왔음
          + 나쁜 분위기를 피하는 대처 메커니즘이 있음
          + 다른 사람들과의 가치관 차이로 인해 부정적인 영향을 받을 수 있음
          + 이를 더 잘 관리하는 방법에 대한 팁을 원함
     * 기사는 에어컨/히터가 되라고 말함
          + 온도 조절기는 어색한 회의를 그냥 두는 것임
     * 글꼴 변경을 제안함
          + 특정 스케일에서 'e'와 'g' 글자의 가로 막대가 강조됨
          + 글꼴 크기를 조절하여 해결할 수 있음
          + 사이트에 연락 방법이 없어 직접 메시지를 보낼 수 없음
     * 기사를 좋아했지만 뭔가 이상한 느낌이 있었음
          + 내용은 좋았지만 스타일과 맞지 않았음
          + 비즈니스 조언과 자기 계발의 혼합처럼 느껴졌음
          + 일반화된 이야기나 강한 결론이 없었음
          + 대신 믿게 되었음
          + 여전히 약간의 불협화음이 남아 있음
     * 사람을 정면으로 마주보는 것이 중요함
          + 미네소타 사람으로서 어려울 것 같음
          + 깊은 경청은 135-165도 각도로 해야 함
          + 가끔 옆으로 눈을 마주칠 수 있음
"
"https://news.hada.io/topic?id=16740","왜 Haskell인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              왜 Haskell인가?

     * ""비실용적"", ""학문적"", ""니치하다""
          + 사람들이 내가 가장 좋아하는 프로그래밍 언어가 Haskell임을 알았을 때 보이는 반응임
          + 취미 프로젝트뿐만 아니라 실제 웹 서버를 구축하는 데도 사용함
          + Converge에서 Haskell로 작업하는 팀들을 이끌고 있음
     * Haskell에 대한 오해
          + 범용 프로그래밍 언어로 해결할 수 있는 문제는 다른 언어에서도 해결 가능함
          + Python, Rust, Typescript 등에 도입되는 많은 기능들이 Haskell에서 영감을 받았거나 더 견고하게 구현되었음
          + ""지루한 기술을 선택하라""는 이념의 변형으로 보임
          + 프로그래밍은 수학이 아니며, 수학적인 요소를 배제해야 한다는 잘못된 생각이 있음
     * 이 글의 목적
          + Haskell이 대부분의 프로그래머에게 최고의 선택인 이유를 논리적으로 설명하려 함
          + 견고한 소프트웨어를 생산적으로 작성하고자 하는 사람들에게 특히 유용함
          + 소프트웨어 작성의 재미있는 측면도 강조함
     * 언러닝과 리러닝
          + 대부분의 프로그래머는 명령형 패러다임에 익숙함
          + Haskell은 순수 함수형 언어로 학습 곡선이 가파름
          + Haskell 언어 자체는 단순한 부분집합으로 제한하면 배우기 쉬움
          + 함수형 프로그래밍은 프로그램을 구성하는 방법에 대한 완전한 전환을 요구함
          + 이 과정은 프로그래머로서 성장하는 데 도움이 됨
          + Alan Perlis의 말 인용:

     프로그래밍에 대한 생각에 영향을 주지 않는 언어는 알 가치가 없음.

    문법에 대한 간단한 설명

     * ::는 타입 시그니처를 나타냄 (예: myThing :: String)
     * 함수 호출은 괄호를 사용하지 않고 함수명 뒤에 인수를 공백으로 구분하여 나열함 (예: doSomething withThis withThat)
     * 타입 시그니처에서 소문자는 타입 변수이며, 임의의 타입을 나타냄 (예: head :: [a] -> a)
     * 두 종류의 화살표 ->와 =>가 있음:
          + ->는 함수의 타입을 설명함 (예: add1 :: Int -> Int)
          + =>는 타입 변수에 대한 제약을 설명하며 항상 먼저 옴 (예: add1 :: Num a => a -> a)
     * 주석은 --로 시작함
     * return은 일반 함수이며, 예상하는 의미가 아님
     * do는 명령형처럼 보이게 하는 문법적 설탕임
     * 지역 변수에 값을 할당하는 여러 가지 방법이 있음:
let x = <something> in
<expression>

       또는 x <- <something>
     * 실수를 줄이기
          + 많은 언어에서 코드를 ""올바르게"" 만들기 위해 많은 테스트 케이스를 작성함
          + Haskell은 타입 시스템과 순수 함수형 프로그래밍으로 이 부담을 크게 줄임
          + Haskell의 강력한 타입 시스템은 프로그램에 대한 구체적인 보증을 제공하고 엄격하게 적용함
          + 타입 시스템의 특징:
               o 널러블 타입이 없음
               o 실패할 수 있는 계산을 표현할 수 있음
               o 패턴 매칭과 완전성 체크
               o 원시 집착을 무료로 회피함
     * 널 값이 없는 것의 이점
          + null 값이 존재하지 않아 값이 예상하는 타입인지 항상 알 수 있음
          + 런타임 오류를 방지하고 오류 표면을 줄임
     * 실패 가능한 계산의 표현
          + Maybe와 Either 타입을 사용하여 실패할 수 있는 계산을 명시적으로 표현함
          + Maybe는 결과가 있을 수도 없을 수도 있는 계산을 나타냄
safeHead :: [a] -> Maybe a

          + Either는 두 가지 값을 가질 수 있음 (Left a 또는 Right b)
validateAddress :: String -> Either AddressParseError ValidAddress

     * 패턴 매칭과 완전성 체크
          + 모든 입력 도메인을 처리해야 하며, 그렇지 않으면 컴파일러가 오류를 발생시킴
          + 이는 런타임 오류를 방지하고 프로그램의 신뢰성을 높임
     * 원시 집착의 회피
          + newtype을 사용하여 의미론적으로 더 의미 있는 타입을 쉽게 생성할 수 있음
newtype VenueName = VenueName String
newtype EventName = EventName String

     * 순수 함수형 프로그래밍의 장점
          + 데이터가 불변이며, 상태 변이를 걱정할 필요가 없음
          + 부수 효과가 명시적으로 처리되며, 함수는 부수 효과 없이 입력에만 의존함
          + 이는 프로그램의 예측 가능성과 안정성을 높임
     * 부수 효과의 명시적 처리
          + IO 모나드를 사용하여 부수 효과를 코드에서 분리하고 제어함
          + 함수의 타입 시그니처를 통해 부수 효과를 일으키는 함수임을 알 수 있음
sendGreetings :: User -> IO Response

     * 모나드와 효과 제어
          + 타입클래스와 모나드를 사용하여 함수가 수행할 수 있는 효과를 정확하게 인코딩함
          + 이는 의도하지 않은 부수 효과를 방지하고 코드의 안정성을 높임
     * 생산성 향상 요소
          + 강력한 타입 시스템과 순수 함수형 특성으로 인해 코드 재사용과 개념의 일반화가 용이함
          + Functor와 Monoid와 같은 개념을 통해 다양한 데이터 구조에 동일한 패턴을 적용할 수 있음
fmap (+2) [1, 2, 3] -- [3, 4, 5]
fmap (+2) (Just 2) -- Just 4

     * 두려움 없는 리팩토링
          + 컴파일러의 엄격함으로 인해 코드 변경 시 새로운 버그가 발생할 위험이 적음
          + 타입 시스템이 프로그램 도메인을 정확하게 표현할 수 있게 해주어 안심하고 코드를 수정할 수 있음
     * 프로그램에 대한 이해 향상
          + 선언형 프로그래밍으로 문제 도메인을 정확하게 표현할 수 있음
          + 프로그램의 의미를 쉽게 이해하고 신뢰성을 높일 수 있음
          + 불필요한 복잡성을 제거하여 프로그램의 합리적인 추론이 가능해짐
     * 알게브라적 데이터 타입과 타입클래스
          + 도메인에 특화된 언어를 Haskell 내에서 구축할 수 있음
          + 이는 프로그램을 이해하고 유지 보수하는 데 도움이 됨
     * 예시 프로그램
          + 간단한 회계 도구를 작성하여 Haskell의 개념을 실용적으로 적용함

    에필로그

     * Haskell을 사용하는 것은 즐겁고 생산적임
     * 강력하고 표현력 있는 타입 시스템과 순수 함수형 프로그래밍의 결합이 Haskell을 특별하게 만듦
     * 다른 언어들도 이러한 기능을 도입하고 있지만, Haskell은 이러한 특징들이 근본에 자리 잡고 있음
     * Haskell을 배우는 것은 프로그래밍에 대한 사고 방식을 변화시켜 줄 것임

GN⁺의 의견

     * Haskell의 학습 가치
          + 프로그래머로서 사고의 폭을 넓히는 데 도움이 됨
          + 함수형 프로그래밍 패러다임을 이해하면 다른 언어에서도 더 나은 코드를 작성할 수 있음
     * 함수형 프로그래밍의 부상
          + 병렬 처리와 동시성에 강점이 있어 현대 컴퓨팅 환경에 적합함
          + 부수 효과의 제어로 인해 예측 가능한 코드 작성이 가능함
     * 다른 언어와의 비교
          + Rust나 Scala와 같이 함수형 프로그래밍을 지원하는 언어들도 있지만, Haskell의 순수성과 타입 시스템은 독보적임
          + 새로운 언어를 배울 때 Haskell의 개념이 도움이 될 수 있음
     * 실무 적용 가능성
          + 초기 학습 곡선은 가파르지만, 투자한 시간만큼 생산성이 향상됨
          + 복잡한 시스템이나 오류에 민감한 도메인에서 유용함
     * 커뮤니티와 생태계
          + Haskell 커뮤니티는 활발하며, 다양한 라이브러리와 도구가 지속적으로 개발되고 있음
          + 오픈 소스 프로젝트에 참여하여 실력을 향상시킬 수 있음

   저는 실용성을 얹은 F#에 입문하였습니다

   ADT랑 패턴매칭은 좋은데 모나드랑 펑터 소리 좀 안나게 해주세요

        Hacker News 의견

     * Haskell은 부분 함수 대신 전체 함수를 작성하도록 강제함
          + Haskell은 무한 재귀를 방지하지 않음
          + 종속 타입으로 이동하는 FP 생태계에서 타입 검사기가 무한히 실행되지 않도록 하는 것이 중요함
          + Haskell의 많은 임시 확장 기능들이 문제를 일으킴
          + Haskell 철학을 좋아한다면 Haskell에만 국한되지 말아야 함
          + Haskell의 표준화는 실패했음
          + GHC의 고유한 가치 제안은 GHC 런타임 시스템일 수 있음
     * Haskell을 10년 동안 사용해왔으며 도구가 크게 개선되었음
          + ghcup, cabal sandboxing, HLS가 안정적임
          + 라이브러리 생태계에서 부족한 점을 많이 발견하지 못했음
          + Haskell의 컴파일 시간이 여전히 불편함
          + 의존성 컴파일 시간이 길어짐
     * Haskell의 타입 시스템은 함수가 전체임을 증명하지 않음
          + 일반적인 프로그래밍에서는 전체성 증명이 유용하지 않음
          + 대부분의 사람들은 테스트를 통해 프로그램이 실제로 작동하는지 확인함
     * Haskell 언어는 좋지만 생태계는 아직 갈 길이 멀음
          + 컴파일러가 느림
          + 오류 보고 능력이 부족함
          + 첫 번째 오류가 나머지 컴파일을 중단시킴
          + 도구가 다른 함수형 언어에 비해 여전히 부족함
          + 라이브러리 생태계가 부족함
          + Haskell의 아이디어는 다른 많은 언어에 영향을 미쳤음
     * Haskell이나 다른 함수형 언어를 직업적으로 사용하고 싶음
          + Go와 같은 언어는 쉽게 배울 수 있었음
          + 함수형 언어에서 코드베이스를 구축하는 방법을 배우고 싶음
     * Haskell은 프로그래밍 사고방식과 코드 아키텍처에 큰 영향을 미쳤음
          + Haskell의 타입 시스템은 매우 강력하고 이해하기 쉬움
          + Haskell 코드를 미세 최적화하는 것이 재미있었음
          + 도구는 여전히 부족함
     * Haskell은 언어 수준에서 게으름을 실험함
          + 게으름은 표준 라이브러리 수준에서 얻을 수 있음
     * Haskell의 극단적인 순수성과 불변성이 문제임
          + 많은 프로그래머들이 절차적/가변 루프를 더 쉽게 표현함
          + Rust는 유능한 타입 시스템과 많은 함수형 관용구를 사용하지만, 루프와 가변성을 사용할 수 있음
     * Haskell은 비즈니스 로직 소프트웨어(BLOBS)에 매우 적합함
          + 간단한 타입과 패턴 매칭으로 대부분의 비즈니스 로직을 모델링할 수 있음
          + 간단한 부분을 유지하면 비기술적 기여자에게도 쉽게 가르칠 수 있음
          + Haskell은 재미있음
"
"https://news.hada.io/topic?id=16686","구글, "펌웨어에서 C/C++를 Rust로 대체하는 것은 쉽다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  구글, ""펌웨어에서 C/C++를 Rust로 대체하는 것은 쉽다""

     * 구글은 최근 Android Virtualization Framework의 보호된 가상 머신을 위한 펌웨어를 Rust 언어를 사용해 다시 작성했고, 당신이 펌웨어를 다루는 사람이라면 똑같이 하기를 권장함
     * 구글 Security Blog 에 공개한 ""Deploying Rust in Existing Firmware Codebases"" 글에서 Android 엔지니어들은 레거시 C와 C++ 코드를 Rust로 교체하는 기술적 세부 사항을 파고듦
          + ""드롭인 Rust 교체로 보안을 강화하는 것이 얼마나 쉬운지 알 수 있을 것이며, Rust 도구 체인이 특수한 베어 메탈 대상을 어떻게 처리할 수 있는지도 시연 예정""
     * ""가파른 학습 곡선""이라고 얘기되는 프로그래밍 언어에서 ""쉽다"" 라는 말은 흔히 사용되는 용어가 아님
     * C와 C++ 개발자가 세상을 Rust 렌즈로 보게 하는 것도 쉽지 않음
          + Rust for Linux 프로젝트의 유지 관리자 중 한 명이 최근 사임했는데, Linux 커널 개발자들의 저항을 이유로 들었음
          + 한 Linux 커널 컨트리뷰터가 올해 초 한 컨퍼런스에서 열린 실시간 토론 중에 ""우리 모두에게 Rust를 배우라고 강요할 수는 없다"" 고 말하기도 했음
     * 그럼에도 불구하고 구글은 Rust 사용을 장려중
          + 펌웨어에는 높은 수준의 보안 메커니즘이 부족한데, 이는 종종 C나 C++와 같은 메모리 안전하지 않은 언어로 작성되기 때문
          + Rust는 대규모 코드베이스에서 중요한 취약점의 대부분을 차지하는 버퍼 오버플로와 사용 후 해제와 같은 메모리 안전 버그를 피할 수 있는 방법을 제공함
          + ""Rust는 C 및 C++에 대한 메모리 안전한 대안을 제공하며 성능과 코드 크기가 유사함""
          + ""또한 오버헤드 없이 C와의 상호 운용성을 지원함""
     * 정부와 기술기업의 지원
          + 최근 미국 정부는 주요 기술 기업 및 비영리 이니셔티브 (memorysafety.org)의 지원을 받아 중요한 오픈 소스 프로젝트와 구성 요소를 Rust로 다시 작성할 것을 강조하고 있음
          + 사이버 보안 및 인프라 보안국(CISA)은 작년에 소프트웨어 공급업체에게 ""제품 라인에서 메모리 안전 취약점을 줄이고 결국 제거하는 것을 최우선 회사 목표로 삼을 것""을 권고함
          + Google은 이미 이 아이디어에 매료되어 Rust 개발자가 C++ 엔지니어보다 두 배 더 생산적이라는 결론을 내렸음
     * Google의 Rust 사용은 계속 증가중

     ""Google에서는 메모리 안전 취약점을 줄이기 위해 Android, Chromium 등에서 Rust의 사용을 확대하고 있음.
     Rust 생태계와 협력하여 Rust 채택을 촉진하고 개발자에게 필요한 리소스와 교육을 제공하는 데 전념하고 있으며,
     임베디드 및 펌웨어에 Rust를 도입하는 이 작업은 스택의 또 다른 중요한 부분을 해결함""

   잘 읽었습니다.
"
"https://news.hada.io/topic?id=16768","Ask GN: 리눅스도 윈도우초기화나 맥북초기화 기능 같은 것이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ask GN: 리눅스도 윈도우초기화나 맥북초기화 기능 같은 것이 있나요?

   리눅스(하모니카OS)를 사용중입니다.

   그런데

   혹시 이런 리눅스배포판에도

   안드로이드폰 공장초기화하는 기능처럼

   윈도우초기화, 맥북재설정 같은

   초기화 기능이 있나요?

   참고로

   하모니카OS는 리눅스민트 그리고 우분투 기반의

   배포판인 걸로 압니다.

   그럼 문의드립니다.

   리눅스 배포판 자체에 초기화 기능이 있지는 않은 것으로 알고 있습니다. 배포판 설치 USB로 클린 설치를 하거나, 새 사용자를 만들어 관리자로 설정하고 기존 사용자를 삭제하는 방식으로 초기 상태로 해야할 거 같습니다. Pop!_OS 같은 경우에는 복구 파티션으로 부팅해서 클린설치를 할 수 있다고 하네요.

   Pop OS는 별도 복구 파티션을 제공하나보군요. 정보 감사합니다.
"
"https://news.hada.io/topic?id=16785","Show HN: Wordllama – LLM의 토큰 임베딩으로 할 수 있는 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: Wordllama – LLM의 토큰 임베딩으로 할 수 있는 것들

WordLlama

   WordLlama는 빠르고 가벼운 NLP 도구로, 퍼지 중복 제거, 유사성 및 순위 매기기와 같은 작업을 최소한의 추론 시간 종속성으로 처리하며 CPU 하드웨어에 최적화되어 있음.

  목차

     * 빠른 시작
     * 무엇인가?
     * MTEB 결과
     * 텍스트 임베딩
     * 훈련 노트
     * 로드맵
     * 토큰 임베딩 추출
     * 인용
     * 라이선스

  빠른 시작

     * 설치:
pip install wordllama

     * 256차원 모델 로드:
from wordllama import WordLlama
wl = WordLlama.load()

     * 두 문장 간 유사성 계산:
similarity_score = wl.similarity(""i went to the car"", ""i went to the pawn shop"")
print(similarity_score)  # 출력: 0.06641249096796882

     * 쿼리에 대한 문서 순위 매기기:
query = ""i went to the car""
candidates = [""i went to the park"", ""i went to the shop"", ""i went to the truck"", ""i went to the vehicle""]
ranked_docs = wl.rank(query, candidates)
print(ranked_docs)
# 출력:
# [
#  ('i went to the vehicle', 0.7441646856486314),
#  ('i went to the truck', 0.2832691551894259),
#  ('i went to the shop', 0.19732814982305436),
#  ('i went to the park', 0.15101404519322253)
# ]

     * 추가 추론 방법:
wl.deduplicate(candidates, threshold=0.8)  # 퍼지 중복 제거
wl.cluster(docs, k=5, max_iterations=100, tolerance=1e-4)  # kmeans/kmeans++ 초기화 사용 라벨링
wl.filter(query, candidates, threshold=0.3)  # 쿼리를 기반으로 후보 필터링
wl.topk(query, candidates, k=3)  # 쿼리를 기반으로 상위 k 문자열 반환

  무엇인가?

   WordLlama는 대형 언어 모델(LLM)의 구성 요소를 재활용하여 효율적이고 컴팩트한 단어 표현을 생성하는 NLP 및 단어 임베딩 모델임. GloVe, Word2Vec, FastText와 같은 모델과 유사함.
     * Matryoshka Representations: 필요에 따라 임베딩 차원 축소 가능
     * 낮은 자원 요구 사항: 평균 풀링을 사용한 간단한 토큰 조회로 CPU에서 빠르게 작동 가능
     * 이진화: 직통 추정기를 사용하여 훈련된 모델은 작은 정수 배열로 패킹 가능 (곧 제공 예정)
     * Numpy 전용 추론: 가볍고 단순함

   WordLlama는 다양한 NLP 작업에 적합하며, 빠르고 휴대 가능한 크기로 탐색 분석 및 유틸리티 애플리케이션에 유용함.

  MTEB 결과

         Metric        WL64  WL128 WL256 (X) WL512 WL1024 GloVe 300d Komninos all-MiniLM-L6-v2
   Clustering          30.27 32.20 33.25     33.40 33.62  27.73      26.57    42.35
   Reranking           50.38 51.52 52.03     52.32 52.39  43.29      44.75    58.04
   Classification      53.14 56.25 58.21     59.13 59.50  57.29      57.65    63.05
   Pair Classification 75.80 77.59 78.22     78.50 78.60  70.92      72.94    82.37
   STS                 66.24 67.53 67.91     68.22 68.27  61.85      62.46    78.90
   CQA DupStack        18.76 22.54 24.12     24.59 24.83  15.47      16.79    41.32
   SummEval            30.79 29.99 30.99     29.56 29.39  28.87      30.49    30.81

  텍스트 임베딩

   사전 훈련된 임베딩을 로드하고 텍스트를 임베딩하는 방법:
from wordllama import WordLlama
wl = WordLlama.load(trunc_dim=64)
embeddings = wl.embed([""the quick brown fox jumps over the lazy dog"", ""and all that jazz""])
print(embeddings.shape)  # (2, 64)

   이진 임베딩 모델 사용 예:
wl = WordLlama.load(trunc_dim=64, binary=True)
wl.embed(""I went to the car"")  # 출력: array([[3029168427562626]], dtype=uint64)
wl = WordLlama.load(dim=1024, binary=True)
similarity_score = wl.similarity(""i went to the car"", ""i went to the pawn shop"")
print(similarity_score)  # 출력: 0.57421875
ranked_docs = wl.rank(""i went to the car"", [""van"", ""truck""])
wl.binary = False  # 해밍 유사성 대신 코사인 유사성 사용
wl = WordLlama.load(config=""l3_supercat"", dim=1024)

  훈련 노트

   이진 임베딩 모델은 높은 차원에서 더 뚜렷한 개선을 보였으며, 512 또는 1024 차원이 권장됨. L2 Supercat은 단일 A100에서 12시간 동안 배치 크기 512로 훈련됨.

  로드맵

     * 추론 기능 추가 작업 중:
          + 의미적 텍스트 분할
          + 예제 노트북 추가
          + DSPy 평가자
          + RAG 파이프라인

  토큰 임베딩 추출

   모델에서 토큰 임베딩을 추출하려면 사용자 동의서에 동의하고 Hugging Face CLI를 사용하여 로그인해야 함. 그런 다음 다음 스니펫을 사용할 수 있음:
from wordllama.extract import extract_safetensors
extract_safetensors(""llama3_70B"", ""path/to/saved/model-0001-of-00XX.safetensors"")

  인용

   WordLlama를 연구나 프로젝트에 사용할 경우 다음과 같이 인용해 주시기 바람:
@software{miller2024wordllama,
  author = {Miller, D. Lee},
  title = {WordLlama: Recycled Token Embeddings from Large Language Models},
  year = {2024},
  url = {https://github.com/dleemiller/wordllama},
  version = {0.2.6}
}

  라이선스

   이 프로젝트는 MIT 라이선스 하에 있음.

GN⁺의 정리

     * WordLlama는 대형 언어 모델의 구성 요소를 재활용하여 효율적이고 컴팩트한 단어 표현을 생성하는 NLP 도구임.
     * CPU에서 빠르게 작동하며, 다양한 NLP 작업에 적합한 ""스위스 아미 나이프"" 유틸리티로 활용 가능함.
     * 이진 임베딩 모델은 높은 차원에서 더 뚜렷한 개선을 보이며, 512 또는 1024 차원이 권장됨.
     * 빠르고 휴대 가능한 크기로 탐색 분석 및 유틸리티 애플리케이션에 유용함.

        Hacker News 의견

     * 작은 크기가 마음에 듦, SBERT의 가장 작은 모델보다 유리함
          + 기술적으로 구식이지만 성능을 위한 타협임
          + 다양한 유사성 유형(예: 의미론적, NLI, 명사-추상적)을 전환할 수 있는 방법 제공 요청
          + 예를 들어, ""Freezing""과 ""Burning""을 신문 기사 분류에서는 유사하게, 화학 기사에서는 반대로 하고 싶음
          + NLI 임베딩을 사용하여 인과 관계를 파악하고 싶음
          + SBERT는 크기가 크고 여러 모델을 로드해야 하므로 자원 소모가 큼
     * 임베딩은 많은 의미 정보를 캡처하며 독립적으로 유용한 작업에 사용 가능함
          + CLIP 모델의 텍스트 인코더 임베딩을 사용하여 프롬프트를 보강함
          + 예를 들어, ""building""이라는 단어가 주어지면 임베딩 매트릭스에서 ""concrete"", ""underground"" 등을 찾아 대체하거나 추가함
          + 제한된 실험에서 대부분의 쿼리에 대해 높은 리콜을 얻음
     * 영어 외 다른 언어에 대한 계획이 있는지 질문
          + 프랑스어에 완벽한 도구가 될 것임
     * 토큰 자체에 많은 의미 내용이 포함되어 있음을 보여줌
     * 임베딩을 사용하여 Little Alchemy를 해결하는 것에 대한 생각
     * 게임 제작에 매우 유용함, 감사함
     * 멋져 보임, mini-lm 모델의 장점에 대해 질문
          + 대부분의 mteb 작업에서 더 나은 것 같지만 추론 등에서 더 나은지 궁금함
     * 몇 년 전 비슷한 기능을 사용한 ""언어 게임""을 작성함
          + Language-games
"
"https://news.hada.io/topic?id=16742","나사, 섬세한 Thruster 교체 성공으로 보이저 1호 임무 유지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 나사, 섬세한 Thruster 교체 성공으로 보이저 1호 임무 유지

    NASA, 보이저 1의 추진기 교체 성공, 임무 지속

     * 보이저 1의 임무와 문제점
          + 보이저 1은 47년 동안 우주를 여행하며 태양계를 넘어 귀중한 데이터를 수집해 왔음
          + 최근 추진기 문제로 인해 NASA 엔지니어들이 해결책을 찾아야 했음
          + 추진기 내부의 연료관이 실리콘 이산화물로 막혀 문제가 발생했음
     * 추진기 교체 과정
          + 보이저 1은 지구와의 통신을 유지하기 위해 추진기를 사용함
          + 세트 중 하나가 막혀 다른 세트로 전환했으나, 그 세트도 막힘
          + 2002년 첫 번째 세트가 막히기 시작했고, 2018년 두 번째 세트도 막힘
          + 최근 여섯 년 동안 세 번째 세트가 더 심하게 막힘
     * 추진기 교체의 어려움
          + 보이저 1의 노후화로 인해 추진기 교체가 더 어려워짐
          + 불필요한 시스템을 끄고, 비필수 히터를 사용해 추진기를 따뜻하게 함
          + 전력 공급이 낮아 비필수 히터를 켜기 위해 다른 시스템을 꺼야 했음
     * 성공적인 추진기 교체
          + 모든 노력이 결실을 맺어 필요한 추진기가 작동하게 됨
          + 보이저 1의 프로젝트 매니저인 Suzanne Dodd는 앞으로 더 많은 분석과 주의가 필요하다고 언급함
     * 보이저 1의 역사와 현재 위치
          + 1977년 발사된 보이저 1은 목성과 토성에서 여러 발견을 함
          + 2012년 태양계를 벗어나 성간 공간에 진입함
          + 현재 지구로부터 151억 마일 떨어져 있으며, 시속 38,000마일로 이동 중임
     * 임무의 어려움
          + 최근 통신 문제를 해결했으나, 새로운 문제들이 계속 발생함
          + NASA는 임무를 계속 유지하려고 노력 중임

    GN⁺의 정리

     * 보이저 1의 추진기 교체는 NASA의 기술력과 문제 해결 능력을 보여줌
     * 노후화된 우주 탐사선의 유지 보수는 많은 도전과제를 동반함
     * 보이저 1의 임무는 우주 탐사 역사에서 중요한 위치를 차지하며, 앞으로도 많은 관심을 받을 것임
     * 유사한 기능을 가진 프로젝트로는 유럽우주국의 로제타 탐사선이 있음

        Hacker News 의견

     * 그들은 어떻게 그렇게 먼 거리에서 오래된 하드웨어의 문제를 진단할 수 있는지에 대해 계속 놀라움
          + 스러스터 튜브의 개구부를 어떻게 측정하는지 궁금함
          + 어떤 행동을 취할지 결정하는 방법에 대해 의문
          + 잘못된 선택을 하면 미션이 끝날 것이라는 가정
          + 70년대에 제작된 하드웨어를 원격으로 재구성할 수 있는 유연성에 놀라움
     * 2주 전, Bruce Wagoner가 !!Con에서 CMOS 메모리 문제를 해결한 방법에 대해 강연함
          + 45시간의 지연이 있는 블라인드 디버깅
          + 컴퓨터 아키텍처와 오래된 장비를 다루는 도전 과제에 대해 설명
     * 스러스터 내부의 연료 튜브가 실리콘 이산화물로 채워짐
          + 실리콘 고무가 분해되어 모래로 변할 수 있다는 사실에 놀라움
     * Voyager 미션은 놀라운 성취
          + 하드웨어의 설계와 제작, 그리고 이를 유지하는 깊은 지식에 감탄
     * 더 나은 링크 제공: Voyager 1 팀의 어려운 스러스터 교체 성공
     * Voyager 다큐멘터리를 보고 감동받음
          + 다큐멘터리 링크
     * Bruce Waggoner의 !!Con 키노트를 직접 볼 수 있는 기회가 있었음
          + YouTube 링크
     * Voyager가 47년 동안 운영되고 있으며 여전히 자세 조정을 위한 연료가 남아 있음
          + 어떻게 그런 성과를 이뤘는지 궁금함
     * Voyager 다큐멘터리에 대해 좋은 이야기를 들었으며 딸과 함께 보고 싶어함
          + NASA가 다큐멘터리를 계속 업데이트하고 완성하지 않아서 아쉬움
     * 공식 발표 링크 제공: Voyager 1 팀의 어려운 스러스터 교체 성공
"
"https://news.hada.io/topic?id=16792","OnlyFans의 놀라운 경제 구조 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         OnlyFans의 놀라운 경제 구조 분석

     * Fenix International (“OnlyFans”)은 영국 기반의 사기업이지만, 제한적이지만 공개적으로 사업 정보를 제공해야 함
     * 2024년 OnlyFans의 총 매출은 약 8.3조 원($6.3B)으로, 5년 전인 2019년의 약 4,000억 원에서 크게 증가함
     * 2023년 수익은 전년 대비 19% 증가한 약 1.4조($1.1B) 증가로, 2022년의 16% 성장률보다 3%p 높음
     * 구독을 기반으로 하지만, 매출의 60% 이상이 구독이 아닌 거래에서 발생함
          + 캔디크러시 같은 게임에서 보이는 소액 결제가 아닌 ""수십 달러"" 이상의 추가 구매가 이루어짐
          + 구독 매출은 2021년 이후 9%($227M, 3000억원) 증가한 반면, 거래 지출은 70%(또는 $1.6B, 2.1조원) 증가해 전체 성장의 88%를 차지함
     * OnlyFans의 매출은 'Aylo'와 같은 포르노 대기업보다 2배 이상 크고, 3억 명 이상의 가입자를 보유함
          + Aylo(예전 MindGeek)은 PornHub, Brazzers, RedTube, YouPorn, XTube를 소유함
     * 미국 사용자가 매출의 2/3를 차지하고, 영국과 유럽이 16%, 나머지 17%는 '기타 세계'임

OnlyFans 수익의 성장 요인

     * OnlyFans 브랜드 인지도의 증가. 이제 ""OnlyFans""가 친밀한 크리에이터 구독을 의미하는 일반명사화됨
     * Cardi B, Bella Thorn, Denise Richards, Carmen Electa, Larsa Pippen, Tyga, DJ Khaled, Fat Joe 등 유명 크리에이터들의 합류. 일부는 포르노 콘텐츠를 제공하지 않기도 함
     * 규제로 인해 성인물 시장 리더들이 대부분의 카탈로그를 삭제하고 엄격한 신규 업로드 절차를 밟아야 함
     * Reddit, Tumblr 등 소셜미디어의 성인물 금지(또는 사실상 금지) 정책으로 인한 시장 공백 발생
     * 많은 팔로워를 가진 크리에이터들이 팬을 OnlyFans로 적극적으로 유도하게 됨
     * OnlyFans 크리에이터들은 Reddit, Imgur, Instagram, TikTok, Twitter 등을 OnlyFans 고객 유치의 ""현관문""으로 활용함
     * 이들 플랫폼은 OnlyFans와 직접 경쟁하지 않고 성인물을 금지하기에, 서비스 약관을 준수하는 한도 내에서 이러한 행위를 허용함
     * 오히려 이 플랫폼들은 OnlyFans 크리에이터들의 바이럴 콘텐츠 제작으로 혜택을 보게 됨

OnlyFans 성공의 또 다른 이유

     * OnlyFans의 크리에이터 수익 분배율은 80%로 매우 높아서 제작사나 에이전시에서 일하는 것보다 더 많은 수익을 올릴 수 있음
     * OnlyFans는 점차 전체 성인물 산업을 잠식하고 있음
     * 크리에이터와 포르노 스타는 OnlyFans에서 더 안전하게, 더 자율적인 방식으로 더 많은 수익을 올릴 수 있음

높은 수익분배율이 가능한 이유

     * OnlyFans는 앱스토어 기반 결제를 제공하지 않기에 80%의 높은 수익 분배가 가능함
          + 앱스토어 결제는 수익의 15-30%를 가져감
     * iOS 앱스토어와 구글 플레이스토어 모두 성인물 앱을 허용하지 않음
     * 일반적으로 이런 금지 정책은 미디어 플랫폼 비즈니스 모델을 파괴할 수 있음
     * 그러나 사진, 동영상 보기와 메시지 전송에는 브라우저 기반 경험으로도 충분함
          + 반면 대부분의 게임은 브라우저에서 실행조차 어려움
     * 앱이 더 나은 사용자 경험과 간편한 결제 프로세스를 제공하긴 하지만,
     * 대부분의 OnlyFans 고객은 브라우저 사용과 신용카드 번호 수기 입력에 크게 불편함을 느끼지 않음
          + 캐주얼 게임이나 이커머스의 경우에는 덜 해당되는 말임

크리에이터 수익의 불평등한 분배

     * 지난 5년 동안 OnlyFans 크리에이터는 20조원($15B) 이상을 수령했으며, 2023년에는 전년 대비 19% 증가한 7조원($5.3B)을 지급함
          + 2023-2024 시즌 NBA 선수 총 연봉이 6.5조($4.9B)원, 프리미어 리그가 7조원($5.3B), NFL 연봉 상한이 9.5조원($7.2B) 였음
          + 물론 OnlyFans에는 410만 명의 크리에이터가 있지만, 이 리그에는 500~1700 정도의 선수들만 있음
          + 그러나 OnlyFans는 오픈 플랫폼(은행 계좌가 있는 합법적인 성인이라면 누구나 크리에이터가 될 수 있음)인 반면, 이러한 리그에는 세미프로, 대학, 취미 리그 등 훨씬 더 큰 규모의 리그에서 최고의 선수들만 참여할 수 있음
     * OnlyFans의 수익은 대부분의 수익을 거두는 상위 크리에이터에게 집중되어 있고, 대부분의 크리에이터는 거의 가져가지 못함
          + 마치 '유명' 리그에 속하지 않은 운동선수의 연봉이 적거나 아예 없는 것과 마찬가지
     * 평균적으로 크리에이터는 연간 약 240만원($1,800)의 수익을 올리지만(크리에이터에게는 190만원/$1450 정도가 지급됨), 상위 0.1%는 상위 1%의 15배, 상위 10%의 100배를 벌어들임
     * 워싱턴 포스트가 인용했던 2020년 연구 보고서 기준으로 계산해보면
          + 상위 10%가 수익의 73% : 36만5천명, 5.1조원($3.9B), 개인별 1460만원($11000)
          + 상위 1%가 33% : 36500명, 2.3조원($1.8B), 개인별 6500만원($49000)
          + 상위 0.1%가 15% : 3650명, 1.1조원($800M), 개인별 2.9억원($220000)
          + 상위 0.01%가 6.8% : 365명, 4790억원($361M), 개인별 13억원($1m)
          + 이러한 분배 방식에서는 상위 0.1%가 15%(3650명, 8억 달러, 22만 달러씩)를, 상위 0.01%가 6.8%(365명, 3억 6100만 달러, 100만 달러씩)를 보유
     * OnlyFans는 수익 배분을 공개하지 않음
          + 위의 수익 배분 예제는 일관성이 없지만 소수의 스트리머가 연간 130억원($10m) 이상의 수익을 올리는 것으로 알려졌고, 이 스트리머들은 가장 높은 수익을 올리는 스트리머도 아님
     * Bhad Bhabie와 같은 크리에이터의 (확인 되지 않은) 대시보드 캡쳐에 따르면
          + 현재까지 약 930억($70m) 이상의 매출을 내서, 750억($57m)의 수익을 분배 받음
          + 매출의 절반은 개인 사용자들과의 유료 메시지 에서 발생(커스텀 오디오/비디오 콘텐츠를 보내는)
     * 수익 분배가 불균등한 만큼 팬도 불균등
          + 등록된 팬 계정은 3.5억개가 넘음(모두 '활성' 팬은 아니고, 유료 구독자는 더더욱 아님)
          + 크리에이터당 74명의 팬을 보유한 셈이지만, 상위 크리에이터의 계정은 수만에서 수백만 명의 팬을 보유

상위 크리에이터의 전략

     * 무료 등급을 포함한 일련의 등급(티어)을 설정하고, 점점 더 비싸지게 만듦
          + 예: Basic(무료), Standard($5/월), Premium($10/월), VIP($100/월)
     * 추가 거래(예: Pay-Per-View 메시지나 이미지)는 추가 거래를 요구할 뿐만 아니라, 최상위 등급 구독자에게만 제공됨
     * 이탈을 최소화하기 위해 많은 혜택(예: 백 카탈로그 - 이전 콘텐츠를 보는 것)은 장기 구독자에게만 제공됨
     * 최상위 구독자는 크리에이터와 직접 소통할 수 있는 권한을 받음
          + 이는 추가 요금을 이끌어낼 수 있는 요청으로 이어질 수 있음
     * 많은 경우, 실제 응답은 크리에이터의 여러 팀원이 작성함
          + 많은 크리에이터가 이제 수백만 달러 규모의 기업이 되었기 때문
          + Bhad Bhabie와 같은 크리에이터가 수많은 VIP 구독자와 일일이 상세하고 개인화된 대화를 나누는 것은 불가능함
          + 이러한 위장 행위로 인해 일부 법적 소송이 제기되기도 함
     * 많은 팬들은 사진과 동영상뿐만 아니라, 파라소셜(준 사회적) 관계와 연결에 대한 환상에 돈을 지불하고 있음을 인식해야 함
          + 많은 상위 계정은 성인 등급이 아니며, Patreon이나 Substack에서 기대할 만한 콘텐츠에 초점을 맞추기도 함
          + 또는 단순히 추가 기능과 업셀링이 있는 비공개(PG-13 등급) 인스타그램에 대한 유료 접근일 뿐인 경우도 있음

OnlyFans의 수익성과 직원 생산성

     * 크리에이터에게 총수익의 80%를 지급함에도 OnlyFans는 상당한 이익을 냄
     * 2023년 순수익은 1.7조원($1.3B), 매출총이익은 1.08조원($819M), 영업이익은 8600억($649M, 순수익의 50%, 총수익의 10%)
     * 지난 5년 동안 총 2.3조원($1.74B)의 영업이익을 냈고, 5300억원($400M)의 세금을 냄
     * 2023년 평균 직원 수는 42명으로 2년 전의 61명에서 감소함
          + 해당 년도에 직원 1인당 순수익은 410억원($31M)으로 아마존, 애플, 구글, 마이크로소프트의 13-28배, 영업이익은 200억원($15.5M)으로 27-560배
     * 2019년 이후 소유주 2명에게 1.4조원($1.1B)의 배당금을 지급했고, 2023년에만 6275억원($472M)을 지급함
          + 이전에 포르노 라이브스트림 회사를 설립한 바 있는 Leonid Radvinsky가 2018년 OnlyFans의 75%를 인수함
          + 당시 OnlyFans의 누적 이익은 13억원($1m)을 넘지 않았을 것으로 추정됨
     * 지난 몇 년 동안 OnlyFans의 직접적인 경쟁사들이 등장했고, 일부는 크리에이터와의 수익 분배율을 더 높게 제공하기도 함
          + 그러나 OnlyFans의 양면시장 규모(즉, 사용자와 크리에이터를 모두 보유)는 수익성뿐만 아니라 지속 가능한 것으로 입증됨

OnlyFans의 성장 가능성을 넘어선 두 가지 흥미로운 질문

     * X(전 트위터)의 성인 콘텐츠 허용이 OnlyFans에 미칠 영향
          + 2024년 6월, 일론 머스크는 X에서 성인물에 대한 금지를 해제함
          + 이는 유료 구독과 게이트 메시징을 도입한 지 얼마 지나지 않아 이루어진 움직임
          + X가 성인 콘텐츠 카테고리 공략에 성공할 것인가?
          + 이것이 OnlyFans에 어떤 영향을 미칠 것인가?
     * 생성형 AI가 성인 콘텐츠 산업에 미칠 영향
          + 생성형 AI는 이미지와 동영상뿐만 아니라 개인화된 에이전트까지 포함
          + 이러한 기술이 성인 콘텐츠 카테고리에 어떤 영향을 미칠까?
          + 더 많은 대체재의 등장으로 인해 ""진짜""에 대한 수요가 감소할 수 있음
          + 반대로 진정한 인간 상호작용과 연결에 대한 가치는 오히려 증가할 수도 있음
          + 생성형 AI ""크리에이터""는 오직 ""당신""이 원하는 것을 진정으로 해줄수 있고, 실제 크리에이터와 달리 모든 언어로 소통하고 언제든 이용 가능
          + 궁극적으로는 몰입형 3D로도 제공될 수 있을 것

   유튜부에서 또는 트위터에서 선정적인 영상의 노출로 인한 유도로 onlyfans 가입을 유도하는 경우가 많더라구요. 온리팬스는 섹스크리에이터(?)의 집합소인 것 같던데요.~
"
"https://news.hada.io/topic?id=16702","B-트리와 데이터베이스 인덱스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            B-트리와 데이터베이스 인덱스

B-tree란 무엇인가?

     * B-tree는 많은 소프트웨어, 특히 데이터베이스 관리 시스템(DBMS)에서 기반이 되는 역할을 함
     * MySQL, Postgres, MongoDB, Dynamo 등은 인덱스를 통해 효율적인 데이터 조회를 수행하기 위해 B-tree에 의존함
     * B-tree와 B+tree가 어떻게 작동하는지, 왜 데이터베이스가 인덱스에 이를 사용하는지, UUID를 기본 키로 사용하는 것이 나쁜 생각일 수 있는 이유를 학습할 것임
     * B-tree는 _키_와 _값_으로 알려진 데이터 쌍을 컴퓨터 프로그래머가 트리와 유사한 구조라고 부르는 것에 저장함
     * B-tree는 노드(사각형)와 자식 포인터(노드를 연결하는 선)로 구성됨
     * 최상위 노드를 루트 노드, 맨 아래 수준의 노드를 리프 노드, 그 외 모든 노드를 내부 노드라고 부름
     * 아래는 B-tree의 정의임:
          + 각 노드는 N개의 키/값 쌍을 저장함(여기서 N은 1보다 크고 K 이하)
          + 각 내부 노드는 최소 N/2개의 키/값 쌍을 가짐(내부 노드는 리프나 루트가 아닌 노드)
          + 각 노드에는 N+1개의 자식이 있음
          + 루트 노드는 유일한 노드가 아닌 한 최소 하나의 값과 두 개의 자식을 가짐
          + 모든 리프는 동일한 수준에 있음
     * B-tree의 또 다른 핵심 특징은 정렬임. 각 노드 내에서 요소는 순서대로 유지됨
     * 이러한 정렬 기능으로 인해 매우 효율적으로 키를 검색할 수 있음. 검색은 루트 노드에서 시작하여:
         1. 검색하려는 키가 노드에 포함되어 있는지 확인
         2. 없다면, 추가하려는 경우 키가 삽입될 위치를 노드에서 찾음
         3. 이 지점에서 자식 포인터를 따라 다음 수준으로 이동하고 프로세스를 반복
     * 이런 식으로 검색할 때 하나의 키를 검색하기 위해 트리의 각 레벨에서 _하나_의 노드만 방문하면 됨
     * B-tree는 매우 많은 양의 데이터를 가지고 있으면서도 장기 저장(디스크)에 지속되어야 할 때 잘 작동하도록 특별히 고안되었음. 그 이유는 각 노드가 고정된 바이트 수를 사용하기 때문
     * B-tree에서 각 노드가 저장할 수 있는 값의 수는 각각에 할당된 바이트 수와 각 키/값 쌍에서 소비되는 바이트 수에 따라 다름

B+tree (데이터베이스에 최적화된)

     * B+tree는 B-tree와 유사하지만, 다음과 같은 규칙이 변경됨:
          + 키/값 쌍은 리프 노드에만 저장
          + 비리프 노드는 키와 연관된 자식 포인터만 저장
     * MySQL 인덱스에서 B+tree를 구현하는 방식에 특정한 두 가지 추가 규칙이 있음:
          + 비리프 노드는 N+1 대신 N개의 자식 포인터를 저장
          + 모든 노드에는 ""다음"" 및 ""이전"" 포인터도 포함되어 트리의 각 수준이 이중 연결 리스트 역할도 할 수 있음
     * B+tree가 데이터베이스에 더 적합한 이유는 두 가지:
         1. 내부 노드가 값을 저장할 필요가 없으므로 내부 노드당 더 많은 키를 넣을 수 있음. 이는 트리의 깊이를 줄이는 데 도움이 됨
         2. 모든 _값_은 같은 수준에 저장되고 하단 수준 연결 리스트를 통해 순서대로 순회할 수 있음

MySQL에서 B+tree 사용법

     * MySQL은 여러 스토리지 엔진을 지원하며, 가장 일반적으로 사용되는 엔진은 B+tree에 크게 의존하는 InnoDB임
     * 실제로 InnoDB는 테이블의 기본 키를 트리 키로 사용하여 _모든 테이블 데이터_를 B+tree에 저장할 정도로 크게 의존함
     * 새 InnoDB 테이블을 만들 때마다 기본 키를 지정해야 함
     * MySQL은 각각의 새 테이블에 대해 B+tree를 생성하고, 기본 키로 설정된 값이 트리의 키가 됨. 값은 각 행의 나머지 열 값이며 리프 노드에만 저장됨
     * 이러한 B+tree의 각 노드 크기는 기본적으로 16k로 설정됨
     * MySQL이 데이터 조각(키, 값 등)에 액세스해야 할 때마다, 다른 키나 값이 필요하지 않더라도 전체 연관된 페이지(B+tree 노드)를 디스크에서 로드함
     * InnoDB 테이블에 보조 인덱스를 생성하는 것도 일반적임. 각 보조 인덱스에 대해 추가 지속형 B+tree가 구성되며, 키는 사용자가 인덱스를 구축하기로 선택한 열이고 값은 연결된 행의 기본 키임

기본 키 선택: 삽입

     * 테이블 데이터가 B+tree에 배열되는 방식은 선택한 키에 따라 다르므로, PRIMARY KEY 선택이 테이블의 모든 데이터의 디스크 레이아웃에 영향을 미침
     * 기본 키로 일반적으로 선택하는 두 가지는:
          + 정수 시퀀스(BIGINT UNSIGNED AUTO_INCREMENT 등)
          + UUID (버전이 여러 개 있음)
     * UUIDv4 기본 키를 사용할 경우의 결과를 고려해 보면, 삽입 시:
         1. 삽입을 위해 방문된 노드는 미리 예측할 수 없음
         2. 삽입을 위한 대상 리프 노드를 예측할 수 없음
         3. 리프의 값은 정렬되지 않음
     * 많은 삽입 과정에서 트리의 많은 노드(페이지)를 방문해야 하므로 1번과 2번 문제가 발생. 이러한 과도한 읽기 및 쓰기는 성능 저하로 이어짐
     * BIGINT UNSIGNED AUTO_INCREMENT를 기본 키로 사용할 경우:
         1. 새 값 삽입 시 항상 가장 오른쪽 경로를 따름
         2. 리프는 트리의 오른쪽에만 추가됨
         3. 리프 수준에서 데이터는 삽입된 순서대로 정렬됨
     * 1번과 2번으로 인해 순차적으로 발생하는 많은 삽입은 동일한 페이지 경로를 다시 방문하므로 많은 키/값 쌍을 삽입할 때 I/O 요청이 줄어듦

기본 키 선택: 순서대로 데이터 읽기

     * 데이터베이스에서 시간 순서대로 데이터를 검색하는 것이 일반적임
     * UUIDv4를 기본 키로 사용할 경우, 검색 결과 값 시퀀스가 여러 비순차 리프 노드에 걸쳐 분산됨
     * 순차적으로 삽입된 값을 찾는 경우, 검색 결과가 포함된 모든 페이지가 서로 인접하게 됨. 여러 행을 검색할 때 모두 단일 페이지에서 서로 인접할 수도 있음
     * 이러한 쿼리 패턴의 경우 순차 기본 키를 사용하여 읽어야 하는 페이지 수를 줄일 수 있음

기본 키 선택: 크기

     * 기본 키 크기도 중요한 고려 사항임. 기본 키는 항상:
         1. 고갈되지 않을 만큼 충분히 커야 함
         2. 과도한 저장 공간을 사용하지 않을 만큼 작아야 함
     * 정수 시퀀스의 경우 더 작은 테이블에 MEDIUMINT(1600만 개 고유 값) 또는 INT(40억 개 고유 값)를 사용할 수 있음
     * 큰 테이블의 경우 BIGINT를 사용하여 안전하게 함(18억 경 가능한 값). BIGINT는 64비트(8바이트)임
     * UUID는 일반적으로 128비트(16바이트)로, MySQL의 가장 큰 정수 유형보다 두 배임
     * B+tree 노드는 고정 크기이므로 BIGINT를 사용하면 UUID보다 노드당 더 많은 키를 넣을 수 있음. 이는 더 얕은 트리와 더 빠른 조회로 이어짐

B+tree, 페이지 및 InnoDB

     * B+tree의 큰 장점 중 하나는 원하는 대로 노드 크기를 설정할 수 있다는 것
     * InnoDB에서 B+tree 노드는 일반적으로 InnoDB 페이지 크기인 16k로 설정됨
     * 쿼리 처리(따라서 B+tree 순회) 시 InnoDB는 디스크에서 개별 행과 열을 읽지 않음. 데이터 조각에 액세스해야 할 때마다 전체 연관 페이지를 디스크에서 로드함
     * InnoDB는 이를 완화하기 위해 몇 가지 기술이 있는데, 주요 기술은 버퍼 풀임. 버퍼 풀은 디스크의 페이지와 MySQL 쿼리 실행 사이에 있는 InnoDB 페이지용 메모리 내 캐시임
     * MySQL이 페이지를 읽어야 할 때 먼저 버퍼 풀에 이미 있는지 확인함. 있으면 거기서 읽어 디스크 I/O 작업을 건너뜀. 없으면 디스크에서 페이지를 찾아 버퍼 풀에 추가한 다음 쿼리 실행을 계속함
     * 버퍼 풀은 쿼리 성능을 엄청나게 향상시킴. 버퍼 풀이 없다면 쿼리 워크로드를 처리하기 위해 훨씬 더 많은 디스크 I/O 작업을 수행하게 됨

기타 상황

     * 여기서는 주로 순차 키와 임의/UUID 키 비교에 초점을 맞췄지만, 이러한 원칙은 고려 중인 기본 키나 보조 키의 종류에 관계없이 명심해야 할 유용한 사항임
     * 예를 들어 user.created_at 타임스탬프를 인덱스 키로 사용하는 것을 고려할 수도 있는데, 이는 순차 정수와 유사한 특성을 가짐. 레거시 데이터를 삽입하지 않는 한 삽입은 일반적으로 항상 가장 오른쪽 경로로 이동함
     * 반대로 user.email_address 문자열과 같은 것은 임의 키와 더 유사한 특성을 가짐. 사용자는 이메일 알파벳 순서대로 계정을 만들지 않으므로 삽입은 B+tree 전체에서 발생함

결론

     * B+트리, 인덱스, 기본 키 선택에 대해 많은 내용을 다룸
     * 겉으로 보기에는 간단해 보이지만 데이터베이스의 성능을 최대한 끌어올리려면 고려해야 할 미묘한 차이가 있음
     * 추가 실험을 위해 인터랙티브 B+트리 웹사이트를 방문해볼 것

        Hacker News 의견

     * 위키를 B-Tree처럼 관리하는 전략을 사용하여 유용하게 유지함
          + 랜딩 페이지가 너무 많아지면 링크와 단락을 하위 페이지로 이동시킴
          + 유사하고 오래된 링크는 주제에 맞는 형제 페이지로 이동시킴
          + 최종적으로 오래된 문서는 랜딩 페이지에서 세 단계 아래로 이동됨
          + 문서화는 검색 문제로 귀결됨
          + 금요일 오후에 생산적으로 보내기 좋은 방법임
     * 오랫동안 이런 것을 찾고 있었음, 놀라운 게시물임
          + 복합 인덱스에 대한 섹션이 있었으면 좋겠음
     * 놀라운 시각 자료에 감사함
          + Aerospike 위에 BTree+ 인덱싱 지원 작업을 했음
          + 만료된 키를 BTree+에서 제거하는 것이 도전적이었음
          + 첫 번째 형제 리프 노드 내에서만 하나의 레벨 분기를 융합하기로 결정함
          + BTree+ 위에 샤딩을 추가하여 속도를 높이고 잠금 경쟁을 줄였음
          + 정리 과정에서 BTree+가 불균형해질 수 있음
          + 인덱스 재구축 기능을 제공하여 추가 정리 작업을 피함
     * Firefox 모바일에서 쿠키 모달이 작동하지 않음
          + 사용자에게 브라우저에서 설정할 수 있도록 해야 함
     * UUID 열을 기본 키로 사용하지 말아야 함
          + 128비트 int를 모든 관계 측면에 복사해야 함
          + 대부분의 경우 완전히 무작위임
          + 내부 테이블 관계에는 bigserial(64비트) PK를 사용하고, 애플리케이션 수준 식별자와 자연 키에는 UUID(128비트)를 사용해야 함
          + 데이터베이스가 매우 행복해질 것임
     * 훌륭한 교육 자료임
          + 이러한 인터랙티브 데모가 많은 도움이 됨
     * 디스크 블록과 B-트리 노드가 16k이고, 키, 값, 자식 포인터가 모두 8비트라면, 노드당 682개의 키/값과 683개의 자식 포인터를 저장할 수 있음
          + 세 레벨 트리는 3억 개 이상의 키/값 쌍을 저장할 수 있음
          + 각 요소당 8바이트여야 함
     * 훌륭한 기사임
          + InnoDB가 데이터를 B 트리 자체에 저장하는 것을 클러스터 인덱스라고 함
          + MyISAM은 비클러스터 인덱스였음
          + Oracle 등은 선택할 수 있게 함
     * 그래프에서 v0, v1, ...v10이 무엇을 의미하는지 물어봄
          + 다른 페이지를 의미하는지 궁금함
     * 아름다운 인터랙티브 시각화임
          + 교육과 대중화 측면에서 최고 수준임
"
"https://news.hada.io/topic?id=16698","프로젝트 해머: 캐나다 식료품 부문 담합 감소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       프로젝트 해머: 캐나다 식료품 부문 담합 감소

Project Hammer

  프로젝트 목표

   _Project Hammer_는 캐나다 식료품 부문에서 경쟁을 촉진하고 담합을 줄이는 것을 목표로 함. 이를 위해 다음을 수행할 예정임:
     * 주요 식료품점 웹사이트에서 역사적인 식료품 가격 데이터베이스를 작성함
     * 이 데이터베이스를 학술 분석 및 법적 조치에 적합한 형식으로 제공함
     * 변화 주도자들에게 이 데이터셋의 존재를 알리고 쉽게 사용할 수 있도록 함

  도움이 필요함

   이 프로젝트는 혼자 할 수 없으며, 다양한 기술과 관점을 가진 커뮤니티의 도움이 필요함. 다음과 같은 경우 연락 바람:
     * 가격 데이터의 경제 분석, 특히 여러 가격 흐름의 상호작용/상관관계를 분석할 수 있는 경우
     * 데이터 처리 및 정규화에 능숙한 경우
     * 데이터를 하루 동안 다루고 발견한 버그/문제/기회를 알려줄 수 있는 경우
     * 다른 나라에서 유사한 가격 작업을 하고 있거나 Mario Zechner의 작업에 영감을 받은 경우
     * 캐나다의 고도로 집중된 식료품 부문을 개선하는 데 관심이 있는 데이터 지향 정치인, 보좌관, 활동가, 기자 또는 변호사인 경우

   출처: Competition Bureau Retail Grocery Market Study Report, June 27, 2023

  캐나다 식료품 가격 데이터

   2024년 6월 10일부터 2024년 9월 8일까지의 데이터를 포함한 SQLite 파일:
     * 가격 데이터 다운로드 (188mb 압축 파일)
     * 7개의 캐나다 식료품점 웹사이트에서 수집된 가격을 포함함
     * 무료 DB Browser 애플리케이션을 사용하여 ""raw"" 테이블을 열거나 .csv로 내보내기를 권장함

  데이터셋에서의 가격 시각화

   아래 시각화를 위한 전체 인터랙티브 페이지

  연구 질문

   데이터를 분석할 때 다음 아이디어를 고려해볼 수 있음:
     * 각 식료품점에서 표준 샌드위치를 만드는 가격 시각화 (200g 흰 빵 + 20g 햄 + 20g 상추...) 어느 식료품점이 가장 저렴한지?
     * 특정 제품에 대해 11월 1일부터 2월 5일까지 가격 동결이 있을 것인지?
          + Metro는 ""11월 1일부터 2월 5일까지 모든 자체 브랜드 및 전국 브랜드 식료품 제품에 대해 가격 동결이 산업 관행이며, 이는 모든 Metro 매장에서 적용될 것""이라고 명시함
     * 제품이 ""세일""에 들어갈 때, 이전 세일 이후 얼마나 시간이 지났는지? (무언가가 계속 세일 중이라면, 그것이 정가임)
     * ""세일""에 들어갈 때, 세일 직전에 가격이 인위적으로 올랐다가 정상으로 돌아오는지?
     * 특정 제품/카테고리에 대해 서로의 가격 움직임에 대해 다른 식료품점들이 어떻게 반응하는지?
          + 누군가 항상 가격 움직임을 주도하고, 다른 이들이 따르는지?
          + 한 소매업체가 항상 반응만 하고, 가격 움직임을 시작하지 않는지?
          + 가격이 정확히 일치하여 움직이는지?
          + 가격이 완전히 무작위로 움직이는지, 상호작용이 없는지?
          + 가격이 항상 오르고, 절대 떨어지지 않는지?
     * 모든 비교 가능한 제품군에서 일반적으로 가장 저렴한 식료품점은 어디인지?
     * 특정 ""제품 묶음""의 가격이 항상 단일 식료품점에서 함께 움직이는지? (예: 계란, 우유, 빵이 항상 비슷한 양으로 함께 오르거나 내리는지)

GN⁺의 정리

     * _Project Hammer_는 캐나다 식료품 부문에서 경쟁을 촉진하고 담합을 줄이는 것을 목표로 함.
     * 주요 식료품점의 역사적인 가격 데이터를 수집하고, 이를 학술 분석 및 법적 조치에 적합한 형식으로 제공함.
     * 데이터 분석을 통해 가격 동결, 세일 패턴, 가격 움직임 등의 다양한 연구 질문을 탐구할 수 있음.
     * 이 프로젝트는 데이터 분석, 처리, 시각화에 관심 있는 다양한 전문가들의 참여가 필요함.
     * 유사한 기능을 가진 프로젝트로는 미국의 _Grocery Price Tracker_가 있음.

        Hacker News 의견

     * 경제 분석과 가격 데이터 상관관계 분석이 매우 어려움
          + 캐나다의 경쟁 정책 기관이 더 나은 데이터를 보유하고 있음
          + 데이터 분석만으로는 사례를 증명하기 어려움
          + 식료품 데이터는 다양한 가격과 공급자, 비용 변동 등으로 복잡함
          + 아이디어는 좋지만 시간 낭비라고 생각함
     * 프로젝트를 사랑함
          + 캐나다의 주요 산업이 과점 상태임
          + 규제 때문에 경쟁자가 생기기 어려움
          + 고객 서비스가 나쁘고 가격이 비쌈
          + 정부 입장에서 과점이 GDP와 세수에 도움이 될 수 있음
     * SQLite 데이터베이스에 압축 적용 시 큰 이점이 있음
          + 가격 수집 방법에 대한 설명이 필요함
          + 제조업체가 고유 SKU를 제공하여 비교를 피하려고 함
     * 협동조합이 더 저렴해야 하지만 그렇지 않음
          + Loblaws가 일반적으로 가장 저렴함
     * 캐나다의 지리적 특성과 규제 장벽이 스타트업에 불리함
          + 프랑스어 표기 요구로 인해 수입품의 비용이 증가함
          + 소규모 식료품점이 경쟁하기 어려움
     * 과거에 맥주 가격을 투명하게 공개한 웹사이트가 법적 위협으로 폐쇄됨
          + 데이터 사용에 제한이 있었음
     * 가격 설정이 시장 교란인지 협력인지 구분하기 어려움
          + 시장 가격을 기반으로 가격을 설정하는 것이 협력인지 논란이 있음
     * 캐나다의 경쟁 태도가 미국과 다름
          + 농산물 가격이 국가 독점에 의해 통제됨
          + 연료 비용과 세금 증가로 식료품 가격이 비쌈
          + 경제적으로 무지한 유권자들이 가격 통제를 지지함
     * 가격 투명성이 가격을 낮출 수 있는 이론이 있음
          + 부동산 시장이 투명해지면서 투기꾼들이 시장에 진입함
     * 가격 설정이 효율적인 가격 발견 방법일 수 있음
          + 데이터 수집 프로젝트를 사랑하지만 결론에 의문이 있음
"
"https://news.hada.io/topic?id=16762","DIY 에스프레소 머신, DiyPresso","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        DIY 에스프레소 머신, DiyPresso

     * 세계 최초 DIY 에스프레소 머신
          + diyPresso는 DIY 애호가와 커피 애호가를 위해 설계된 세계 최초의 에스프레소 머신임
          + 자신의 에스프레소 머신을 조립하고, 최고의 에스프레소 제조 경험을 위해 오픈 소스 소프트웨어로 구성할 수 있음
     * 직접 조립
          + 사용자가 직접 조립할 수 있는 방식으로 설계됨
     * 완전히 조정 가능한 추출 설정
          + 추출 설정을 완전히 조정할 수 있음
     * 오픈 소스 소프트웨어
          + 오픈 소스 소프트웨어를 사용하여 사용자 맞춤형 설정이 가능함
     * diyPresso의 최고급 부품 확인
          + diyPresso는 최고급 부품을 사용함
     * diyPresso의 사양 및 액세서리
          + 각 diyPresso는 고유 번호가 부여된 태그가 머신 뒷면에 부착됨
     * diyPresso 커뮤니티에 참여
          + 최신 뉴스, 팁 및 독점 제안을 이메일로 받아볼 수 있음
          + 개인 데이터는 웹사이트를 통해 업데이트를 지원하고, 개인정보 보호정책에 설명된 기타 목적으로 사용됨

GN⁺의 정리

     * diyPresso는 DIY 애호가와 커피 애호가를 위한 혁신적인 제품으로, 사용자가 직접 조립하고 설정할 수 있는 에스프레소 머신임
     * 오픈 소스 소프트웨어를 통해 사용자 맞춤형 설정이 가능하며, 최고급 부품을 사용하여 품질을 보장함
     * 커뮤니티 참여를 통해 최신 정보와 독점 제안을 받을 수 있어 사용자 경험을 향상시킬 수 있음
     * 비슷한 기능을 가진 제품으로는 Breville의 Barista Express와 Gaggia Classic Pro가 있음

        Hacker News 의견

     * 이 머신은 기존 에스프레소 머신을 가진 사람들에게 주로 매력적임
          + 기술적으로 특별히 진보된 것은 아님
          + 오래된 머신에 새로운 부품을 추가하는 것이 더 지속 가능하고 경제적임
          + 새로운 머신을 사는 것보다 기존 머신을 업그레이드하는 것이 더 나음
     * 새로운 머신을 사는 것보다 중고 머신을 업그레이드하는 것이 더 나음
          + Quick Mill Carola와 같은 가격에 비슷한 머신을 구매할 수 있음
          + Gaggia Classic Pro나 Rancillio Silvia와 같은 저렴한 머신에 PID를 설치하는 것도 가능함
     * 이 머신은 1200유로 이상의 가치가 있음
          + PID 온도 제어와 압력 제어 기능이 있음
          + Gaggia 하드웨어는 품질이 낮음
     * 진동 펌프는 압력 프로파일링 머신에 일반적임
          + 로터리 펌프로 업그레이드하는 것은 경제적으로 부담이 됨
     * 이 머신은 비싸다고 생각함
          + 999달러의 가격을 목표로 하는 것이 좋을 것 같음
          + 큰 지출을 하는 에스프레소 애호가 시장은 작음
     * 이 프로젝트는 안전 문제를 가지고 있음
          + 제어 로직이 고장 나면 보일러가 계속 가열될 수 있음
          + 매뉴얼에 안전에 대한 언급이 없음
     * ""DIY""라고 부르기에는 미리 제작된 부품이 많음
          + 기계 프로젝트를 기대했으나, 조립이 필요한 수준임
     * 하드웨어를 자가 업그레이드하는 타입임
          + 더 나은 머신을 사는 것이 더 나았을 것 같음
          + 에스프레소 머신은 비용이 많이 드는 취미임
          + 추가 장비와 도구에 많은 돈을 투자하게 됨
     * EspressoForge를 사용해본 적 있음
     * 에스프레소 머신보다 커피 그라인더가 더 중요함
          + 정밀한 그라인더에 투자하는 것이 좋음
     * 수동 머신인 Flair가 이상적임
          + 시간과 돈을 많이 들이지 않고도 좋은 에스프레소를 얻을 수 있음
     * 이 머신도 좋지만 다른 머신을 선호함
          + 링크
"
"https://news.hada.io/topic?id=16697","Ask GN: 코딩 10문 10답 해볼까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ask GN: 코딩 10문 10답 해볼까요?

    1. 인덴트(들여쓰기) 탭 쓰나요, 스페이스 쓰나요? 몇 칸 띄우시나요?
    2. 중괄호는 새로운 줄에 시작하나요, 같은 줄에 이어서 쓰나요?
    3. 한 줄에 몇 문자까지 허용하나요?
    4. 변수나 함수 이름을 지을 때 선호하는 스타일은 무엇인가요? (예: camelCase, snake_case)
    5. 선호하는 에디터는?
    6. 코딩 폰트는 어떤 것 쓰시나요? 크기는?
    7. 뭔가 만들 때 가장 먼저 손이 가는 프로그래밍 언어는 무엇인가요?
    8. 모듈이나 라이브러리를 임포트 하는 규칙이나 순서가 있나요?
    9. 단위 테스트하세요? 어떤 방식으로 하시나요?
   10. 하고 싶은 말/의견/자랑/홍보/아무거나 적어주세요.

    1. 스페이스 4칸
    2. 같은 줄 k&r 스타일
    3. 글자수를 정하기보단 문맥 따라서 왔다갔다.
       에러처리 같은 건 가능한 한줄로 끝내는데,
       그 외 로직은 나눠씁니다
    4. 개인적으로는 Snake 를 선호하지만, 팀에서 하는 대로 따라갑니다.
    5. Vs code
    6. Vs code 기본 폰트
    7. C
    8. 표준 라이브러리를 제일 처음에 include 합니다. 그 다음 외부 라이브러리, 그 다음 사내 라이브러리.
    9. 빌드할 때, 단위 테스트를 돌립니다. 단위 테스트에서 Fail 뜨면, 고치고 다시 빌드... 통과할 때까지.
   10. 감기 조심하세요. 손목 조심하세요. 술은 적당히 드세요. 다이어트 합시다.

    1. 스페이스 2 또는 4칸
    2. Newline
    3. 79-80 / 119-120
    4. PEP8 같은 컨벤션이 있는 경우 준수 그 외는 CC.
    5. VSCode
    6. Consolas, 9pt
    7. C
    8. Stdlibs (stdlib) > Platform libs (Windows, unistd...) > essential library (project wide) > auxiliary library (module focused)
    9. Unit test
   10. 추워요

    1. 개인프로젝트: 탭 4칸, 회사에서: 스페이스 4칸
    2. 요새는 다음 줄에 쓰는 중
    3. 100
    4. snake_case
    5. VSCode
    6. Iosevka 22px
    7. 파이썬
    8. from 키워드 1순위, 그 다음 빌트인 라이브러리
    9. 안해요
   10. 집가고싶어요

    1. 스페이스 4칸
    2. 같은 줄
    3. 빈칸 포함 100문자
    4. camel snake_case 같이 씀
    5. JetBrain
    6. d2code, dracula 12 ~ 13
    7. Sql
    8. 따로 없음
    9. 순서, 기능별
   10. 잼있네요

    1. 탭
    2. 같은 줄
    3. 100
    4. 언어에 맞게 사용
    5. vscode!
    6. Droid Sans Mono, 14pt
    7. Python!
    8. lint
    9. 기능 별로 테스트 진행합니다
   10. 좋은 폰트들 많이 알아갑니다:)

    1. 모든 언어에서 탭만 씁니다.
    2. 함수 선언 시에는 새로운 줄에, if문이나 for문일 때에는 띄어씁니다.
    3. 대략 50자 정도입니다.
    4. 소문자로, 띄어쓰기는 _로 대체해서 씁니다.
    5. 주로 vscode, 급할때는 vim씁니다.
    6. mesloLGS NF, 16pt
    7. 간단하면 파이썬부터 생각합니다.
    8. 별로 없습니다. C언어일 때는 표준 라이브러리 먼저 쓰는 편입니다.
    9. 안합니다
   10. 리눅스 커널/low level 공부 재밌으니까 다들 한번 해보세요

    1. c++은 스페이스 4칸, js는 스페이스 2칸, golang은 tab
    2. c++ 새로운줄 나머지는 같은줄에 하지만 언어별 lint를 선호합니다.
    3. 80글자
    4. 언어마다 다르지만 js: camel_case c++: snake_case
    5. vscode
    6. Hack Nerd Font / 12 font size / weight 450
    7. js
    8. lint나 알파벳 순서대로
    9. 단위테스트는 짧은 기능단위로 합니다.
   10. 다들 화이팅입니다.

    1. 스페이스 2칸
    2. 같은 줄
    3. 80자 (에디터를 가로로 두 개 둘 수 있게)
    4. 언어에 따라서 다르지만 CamelCase 를 선호 합니다
    5. neovim (AstroNVim) + tmux / IDEA Ultimate
    6. D2Coding / hack fira code nerd font
    7. bash shell > js > kotlin
    8. Intellij 기본 규칙 (editorconfig 로 만들어서 씁니다)
    9. 비즈니스 로직 기반 테스트 코드 작성하고 UI는 손으로...
   10. 옛날에는 vimscript로 플러그인 추가 하고 내 입맛에 맞게 수정하고 하느라 힘들었는데, 요새는 기본 설정 다 되어있는 AstroNVim 같은것도 있고 IDE마다 vim 시뮬레이터도 많이 지원하니 다들 가볍게 츄라이 해보세요 ㅎㅎ

    1. 스페이스 2칸.
    2. 같은 라인
    3. 100자
    4. camelCase
    5. neovim, magit용으로 doom emacs
    6. FiraCode
    7. nodejs
    8. LSP에서 지원하는 정렬 기능말고는 딱히 규칙없음.
    9. vitest를 쓰는데 코딩전에 미리 만드는 이상적인 사용법보다는 선코딩하고 나중에 사이드이펙트를 막는 용도로 unit test를 만들어 놓음. 이후에 한번 만들어진 기능이 신규나 새로운 수정사항들에 의해서 영향을 받지 않는다는 심적 편안함을 추구하는 용도로 씀.
   10. 긱뉴스 흥해라.

    1. 2칸 스페이스 ( 탭으로 쓰고 자동으로 스페이스로 바꿈 )
    2. TS개발자라 같은줄 ( C계열같은 경우는 다음줄 )
    3. 100자
    4. 카멜케이스
    5. Cursor IDE
    6. Fira Code nerd font
    7. Typescript
    8. 라이브러리는 최상단, 내부 모듈은 그다음
    9. 공통 모듈 위주로
   10. vim 잘쓰고 싶은데 익숙해지질 않네요

    1. 3칸 스페이스 (Ada), 4칸 스페이스(나머지 언어)
    2. Ada에는 중괄호가 없지만, begin은 다음 줄에 씁니다. Powerahell에서는 같은 줄에 씁니다.
    3. 130자
    4. 대문자 SNAKE_CASE
    5. Understand, Notepad++
    6. D2Coding
    7. Powershell
    8. 특별한 문제가 없다면 알파벳순.
    9. 안 합니다.
   10. 화이팅!

   여전히 Ada 를 쓰십니까? 와우..
    1. 탭 문자 4칸
    2. K&R Style
    3. 120
    4. snake_case
    5. VS Code
    6. D2Coding 12pt
    7. Python, C
    8. 표준 라이브러리 -> 외부 라이브러리 -> 내부, 알파벳순 정렬
    9. 아니요...
   10. 탭 문자는 신이다.

    1. space 2 사용중입니다.
    2. 같은줄에 이어서 시작하고, 닫는건 별개로 따로 씁니다. 닫은 뒤에 잇는건 같은줄에...
    3. 팀에서 가장 큰 글씨를 쓰고 계신분 화면사이즈에 맞춰 씁니다 지금은 200이에요
    4. 카멜케이스 선호합니다
    5. 지금은 vscode가 편합니다.
    6. D2Coding / 12 사용중입니다.
    7. ecmascript > java > python 순입니다
    8. standard > third-party > internal 순입니다.
    9. 모듈화 할때 이외엔 printf로 합니다 ㅎㅎ
   10. 다들 화이팅하세요!

    1. space4
    2. 같은줄
    3. 80
    4. camelCase
    5. neovim
    6. FiraCode Nerd Font 18
    7. Go, TypeScript
    8. standard, thrid-party, internal
    9. 유틸이나 공통 모듈들에 대해서
   10. 올 한해도 무사히 보내시길 바랍니다.

    1. space4
    2. 같은줄
    3. 120c
    4. 카멜
    5. VSCode
    6. Consolas 10
    7. Java, C++, Python
    8. 자동정렬 abc순
    9. 예외처리신경써서 최소한으로
   10. 코로나, 인풀렌자 조심하세요... 한번걸려서 체력이 떨어지면 진짜 회복이 더디네요...

    1. 스페이스 4칸
    2. 클래스와 인터페이스는 다음줄, 나머지 같은줄
    3. 제한없음, 지금은 220
    4. 클래스명 전역 함수는 카멜, 내부함수와 변수는 스네이크
    5. VS Code
    6. D2Coding
    7. C++, PHP
    8. 가능하면 기능별로 알파벳순
    9. 공통묘듈만 나머지는 알아서
   10. 올한해도 무사히

    1. 4 spaces
    2. 같은 줄
    3. 120자
    4. camelCase
    5. vscode
    6. Fira code
    7. javascript (typescript)
    8. third party, packages -> domain, entity -> use case -> services, adapters -> UI components
    9. Jest, 필요한 경우 유즈케이스만 테스트, 가능하면 최소한으로
   10. 여러분 모두 건강 잘 챙기시길 바래요 :)

    1. Tab / 4칸
    2. 같은 줄
    3. 140
    4. camelCase
    5. VSCode
    6. Ubuntu
    7. Typescript
    8. 딱히 없지만 가끔 알파뱃순으로 Sort
    9. 복잡성이 높은 모듈은 테스트 진행
   10. 모두 화이팅입니다

    1. 탭신자였지만 경우에 따라 space 4개 우선, html은 2개 우선, 최근에는 얽히고 설히고 이런들 어떠하고 저런들 어떠하리
    2. 같은줄에 붙이지만 최대한 기존 코드 컨벤션에 맞춤
    3. 어릴땐 120이였지만 노안이 오면서 80까지 내려오는 상황.
    4. 클래스나 모듈명은 카멜 변수는 snake 선호
    5. VSCode 쓰다가 최근에는 Zed 로 전환 시도중
    6. 최근에는 CaskaydiaCove Nerd Font Mono
    7. 업무에서는 Python, 개인프로젝트는 Elixir, 해보고 싶은건 Rust
    8. 특별히 신경안씀
    9. 초기단계 or 1인 개발에서 단위테스트는 최대한 배재, 프로젝트내 협업 인원이 늘어나고 초급 개발자들이 붙으면 필수적인 코드들에서 단위테스트 작성... 했다가 방치
   10. 빨리 돈 벌어서 세일링 요트타고 취미코딩이나 하고 싶네요.

    1. Space, 2칸 사용
    2. 같은 줄
    3. 80
    4. camelCase
    5. VSCode
    6. Consolas
    7. JavaScript, Rust
    8. 알파벳 순서 그 다음 로컬 경로
    9. util 성 모듈에 대해서는 거의 100% 를 하고 있고 비즈니스 로직은 ""이거 안되면 정말 큰일난다"" 만 진행(시간 관계상 모든 것을 테스트할 수는 없어서...)
   10. 긱뉴스 보시는 개발자, 엔지니어 분들 모두 화이팅입니다!

    1. Space, 컨벤션에 맞춰서. 개인작업때는 2를 선호
    2. 같은줄에 씁니다
    3. 대략 100쯤되는 것 같네요
    4. camelCase
    5. VSCode > Neovim > Intelij(jvm계열 회사업무때만 어쩔수 없이 씀)
    6. 기본 설정 폰트, 13~16pt
    7. Javascript
    8. 특별히 신경쓰진 않습니다.
    9. BDD 스타일로 구현하고 싶은 케이스를 중심으로 테스트하고 마지막에 테스트 커버리지를 채우는 편입니다.
   10. NEOVIM 잘 써보고 싶은데 자꾸 커서를 쓰게 되네요. 잘 쓰시는 분들 존경합니다

   1.스페이스 4
   2.같은 줄
   3.120
   4.camelCase
   5.vim
   6.monoplex
   7.nodejs
   8.built-in,3rd-party,mine in alphabet order
   9.absolutely. Just do it!
   10.Ho eyo he hum!
    1. 포맷터에 의존. 스페이스 4/2
    2. 포맷터에 의존. 인라인 선호
    3. 언바언. 80
    4. 언바언. 컨벤션 따름
    5. vs pro
    6. d2+nerd
    7. html
    8. 포맷터에 의존
       9 .유닛테스트 예쁘게 만드는건 못하고 더미 데이터로 검증하는 정도..

    1. 스페이스 4칸
    2. 같은 줄
    3. 79
    4. 컨벤션에 따름
    5. neovim
    6. nerd hack font, 크기는 에디터 기본
    7. python or c#
    8. 컨벤션에 따름
    9. 스펙이 정확히 있는 경우에만 따로 테스트 코드 만듦. 그외에는 알아서 테스트 해보면서 개발.

    1. 스페이스 2칸
    2. 같은 줄
    3. 1000+
    4. camelCase
    5. VSCode
    6. 기본 폰트 또는 D2 Coding
    7. Dart
    8. 기본 Formmater를 따름
    9. 모킹 하지 않고 왠만하면 개발 서버, DB에 붙어서 테스트함. 서버 관련 이슈가 더 많은 듯 해서...

    1. 탭 4칸
    2. 같은 줄
    3. 신경 안씀.
    4. 카멜케이스
    5. vscode
    6. 14p, d2 coding
    7. python
    8. 따로 없음.
    9. 거의 못해요...
   10. 이런 참여형 컨텐츠 좋네요

    1. TSX 공백 2개, 나머지 공백 4개
    2. 같은 줄
    3. 80/120
    4. 언어에서 권장하는 스타일
    5. VSCode, 자바 한정 STS
    6. Monaco, Menlo, Consolas
    7. 파이썬
    8. 표준 라이브러리, 서드파티 라이브러리, 동일 프로젝트
    9. 외부 시스템 필요없이 파일 시스템, 입출력 객체로만 수행할 수 있는 것만 단위테스트 수행
   10. 4번 질문은 필요성이 떨어지지 않나요?

    1. 2칸
    2. 같은 줄
    3. 넓게 쓰지 않아서 최대 80 자 정도에서 끊는 듯 합니다.
    4. camelCase
    5. VS Code : 꼭 개발뿐만 아니라 긱뉴스에 올릴 뉴스 정리 하는데도 이걸로 합니다. 그냥 편해요.
    6. 모니터는 집과 회사가 같은데 서로 다른 폰트를 씁니다.

     * 윈 : JetBrains Mono, 14p
     * 맥 : Menlo, 12p

    7. 예전엔 데스크탑앱을 선호해서 Delphi (으아 이게 언제야), 작은 웹 페이지들은 PHP로 끄적 거리네요.
       근데 생각해 보니, 요즘은 뭘 만드느냐에 따라서 기본 프레임워크를 좀 찾아보고 맞는게 있으면 그냥 그 언어로 개발하긴 합니다.
       구글 닥스에서 스크립트로 개발하기도 하고, 워드프레스에 플러그인으로 처리하기도 하고, Node/Python에 적절한 모듈 있으면 그거 가져다 쓰기도 해서 다양하네요.
    8. 아주 많아 지면 좀 보기 좋게 정리하고, 그 외엔 신경 안씁니다. (포매터가 잘 해줄꺼야)
    9. 잘 안해요. 흑
   10. Ask에 좋은 질문 많이 올려주세요! Ask를 활성화 해봅시다 ㅎㅎ

    1. space. 4개.
    2. 같은 줄
    3. 가로 스크롤 안생길 정도
    4. 언어마다 다름 (kotlin/go/java/typescript는 camelCase, c/c++은 snake_case)
    5. Jetbrains
    6. Jetbrains 기본 폰트
    7. go 또는 kotlin
    8. go에서는 외부/내부 import 을 구분함. 구분 된 것 안에서는 자동으로 sorting 됨.
    9. 주로 unit test + 여러 루틴이 함께 가는 경우에는 별도로 테스트
   10. 좋은 질문 감사합니다 :)

    1. 탭 사용, 4칸
    2. 프로젝트 별 코딩 스타일 준수.
    3. 한눈에 들어오는 정도 (150자 이내)
    4. 프로젝트 별 코딩 스타일 준수.
    5. vscode 최고
    6. Consolas
    7. C++
    8. 특별히 정해야하는 라이브러리가 아니라면 표준 - 프레임워크 종속 - 커스텀 순서로 임포트
    9. 기능 별로 단위 테스트 진행
   10. 코딩 더 많이 더 잘하고 싶어요. 시간이 더 많았으면!

    1. 4칸
    2. 짧으면 같은줄 길어질꺼 같으면 새로운줄 로 합니다.
    3. 150자 까지 하는 편 입니다. 더 줄일려고 노력하는중...
    4. camelCase를 쓰다 최근에는 snake_case로 전환중
    5. VS Code, Vim을 자주 사용합니다.
    6. Hack, Nerd Font 폰트 사이즈는... 눈의 피로도에 따라 왔다갔다 하는 편
    7. python이 아무래도 손이 많이 가네요
    8. 내장 모듈, 패키지로 설치할 수 있는 모듈, 직접 만든 모듈 순서로 하고 있습니다.
    9. 중요한 것들 위주로만 하고....털썩...
   10. 좋은 하루 보내세요 :)

    1. space, 2칸
    2. 새로운줄을 선호하나, 포매터들 때문에 같은줄에 쓰는 경우가 많네요
    3. 최대한 80, 길면 120 컬럼
    4. 취향은 kebab-case이나 파싱한계 혹은 각종 컨벤션 때문에 camelCase 쓰게되는 ㅠㅠ
    5. Emacs 이나 최근에는 플러그인 때문에 Visual Studio Code 많이 쓰네요. 간단한건 Kate를 씁니다.
    6. Hack + D2Coding(한글 fallback)
    7. Typescript
    8. std, 라이브러리, 내부 모듈, 현재 디렉토리
    9. In-Source Test 라고 구현과 같은 파일에서 하는 Test 좋아합니다.
   10. 얼마후에 소개글을 공개하겠지만ㅎㅎ
       Semantic CSS와 Atomic CSS를 결합하기 위한 CSS in JS를 만드는 중 입니다.
       https://github.com/mincho-js/mincho

   ""민초단"" 이신 분들은 스타를 눌러주시면 감사하겠습니다...?

   Vanilla Extract 기반이군요
    1. 탭 문자 3칸 (사실상 개인프로젝트에서만 가능..)
    2. JS에 가까우면 같은 줄, Java에 가까우면 새로운 줄
    3. JS에 가까우면 90, Java에 가까우면 120
    4. 컨벤션에 맞게 사용
    5. VSCode (+ 상황에 따라 Zed 및 micro)
    6. JetBrains Mono + 구름 산스 코드, 14
    7. 대부분 그 당시 배워보려고 벼르고 있던 언어로 만들어요. 그렇지 않으면 TS
    8. 대체로 빌트인에 가까울수록 먼저 임포트
    9. 다음 프로젝트부터는 꼭..
   10. 현직자 분들 모두 존경합니다

   3칸은 확실히 마이너한(?) 취향이시긴 하군요.
   선호하시는 이유가 있나요?

   일부 언어(특히 HTML 및 JSX)에서 4칸 탭이 주류가 아닌 이유가, 탭이 깊을 때 불필요한 폭 차지가 너무 커져서인 것으로 알고 있고 저 또한 그렇게 느끼는데요,
   개인적으로는 그렇다고 2칸 탭을 쓰면 구분감이 약해서 하이어라키 파악이 너무 어렵더라고요. 입문했을 때부터 그렇게 느꼈는데 지금도 여전해요.

   3칸 탭은 예전에 lua를 다룰 일이 있을 때 쓰게 된 코드 컨벤션에서 처음 접했어요.
   조금 익숙해지고 나니까.. 이거, 2칸 탭과 4칸 탭 사이의 스위트 스팟이 아닌가? 라고 느껴져서 다른 언어들에도 적용해보기 시작했고, 대부분의 2칸 및 4칸 탭 주류 언어들이 3칸 탭일 때 더 가독성이 좋다고 느껴서 지금까지도 가능할 때마다 적용하고 있습니다 ㅎㅎ

   구글링해보면 3칸 탭을 영업하는 글들을 극소수(!) 찾을 수 있는데요, 재미 삼아 하나만 읽어보시는 건 어떠신가요? 😄

   보다보니 뇌이징이 되는것 같기도 하네요 ㅎㅎㅎㅎ

   오 흥미롭네요. 다음에 가벼운 거 짤 때 3칸 써볼까봐요. 고맙습니다.
    1. 탭, 2칸
    2. 같은줄
    3. 320
    4. 카멜
    5. IntelliJ / vim
    6. Source Code Pro for powerline 14pt
    7. java / kotlin > javascript
    8. Intellij Auto Import ^^; 스크립트언어일경우에는 내부 모듈, 외부모듈로 구분합니다.
    9. 전체를 E2E 테스트할수 있으면 좋지만 중요한 비즈니스로직이 검증되는수준까지 Scope를 잡고 하는편.

    1. 탭
    2. 같은 줄 ~
    3. 주로 linter, formatter 기본 설정 따라감 (아니면, 한 화면에 보이는 데까지)
    4. 언어 기본 컨벤션 따라감, 보통 camelCase 선호
    5. Neovim
    6. NerdFont
    7. Golang
    8. std, 외부 라이브러리, 내부 모듈 순서대로 import, 그 안에서는 alphabet 순서로 sort
    9. 복잡한 로직인 경우에만 일단 부분적으로.... (다 달고 싶지만...)

    1. 4칸, 탭
    2. 새로운 줄
    3. 상황에 따라 다름
    4. c++은 camelCase, 나머지는 snake_case
    5. vim, vs, vscode
    6. 네이버 d2
    7. 프로토타입 후딱후딱은 python, 나머지는 프로젝트 성격에 따라 다름
    8. system, os 레벨의 라이브러리를 먼저, 하위 단계로 갈수록 아래로
    9. gtest, pytest 사용. 수시로 테스트 진행
   10. 다른분들의 개발 문서 작성 방법이나 스타일도 궁금한뎅....

    1. 쉘은 2칸, Makefile은 탭, 나머지는 4칸
    2. 언어 컨벤션에 따라 다름, 되도록이면 같은줄에서
    3. 구식언어를 쓸때는 80자, 신식(?)언어를 쓸때는 100자
    4. 언어 컨벤션에 따름
    5. neovim, Android Studio, IntelliJ, 가끔씩 vscode
    6. 되도록이면 OS기본 고정폭
    7. 쉘 -> 파이썬 -> 코틀린 순서대로 새로 짜봄.
    8. 요샌 포매터,린터가 알아서 해줘요... (먼산)
    9. 조금 짜보다가 방치함.. (털썩...)
   10. 세상엔 쉬운 일이 없네요. 흑흑..

    1. 탭, 4칸
    2. 새로운 줄에 시작
    3. case by case (100자 정도)
    4. snake_case, camelCase 섞어씀
    5. Notepad++ > Ultraedit(2001버전) > VS Code
    6. D2 Coding
    7. C/C++ > java > javascript/css
    8. case by case
    9. 코드에 log찍는 모듈을 넣고 파일로 저장. 개발하면서 그냥 같이 함.
   10. 언제 은퇴하죠?

    1. space 2칸
    2. 같은 줄
    3. 보기 좋은 정도
    4. 보통 언어마다 많은 사람들이 사용하는걸 따라가는거 같아요.
    5. visual studio
    6. cascadia-code
    7. c#
    8. 기본적으로 사용하는거 / 내가 만든거 / ,, 정도로 그룹화 해서 사용하는거 같아요.
    9. 해야 하는데 해야 하는데,,라고 생각만 하고 잘 안하게 되네요..
   10. 로또 한 번만 ..

    1. 스페이스 네칸이요. 눈이 나빠 큼직큼직한 게 좋아서요.
    2. 같은 줄 {
       }
    3. 딱히 카운트로 제한하진 않지만, 1/2 화면에 들어오지 않으면 나누는 편이에요.
    4. 언어마다 다른 것 같은데, 주로 camelCase 를 씁니다.
    5. VS Code
    6. Menlo, 16 그런데 해상도가 1920 이에요. ㅎㅎ
    7. 요즘엔 딱히 없는 것 같아요. 그때 그때 다르네요. 10여년 전에는 자바였는데 요즘엔 쳐다도 안보긴 해요 ㅎㅎ
    8. 필요한 순서대로 임포트 하는데, 역할이나 레이어가 같은 것끼리는 묶는 편이에요.
    9. 비즈니스 로직이 중요한 것만 돌려 불안한 마음만 잠재웁니다. 반성...
   10. 라이프스타일 비즈니스(자기가 살고 싶은 삶을 유지할 수 있는 수준의 돈을 벌어다 주는 비즈니스)를 가지고 싶어요.
"
"https://news.hada.io/topic?id=16675","Belt - React Native App을 시작하는 새로운 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Belt - React Native App을 시작하는 새로운 도구

     * Belt는 새로운 React Native 앱을 시작할 때 추측을 배제하도록 설계된 opinionated CLI 도구
     * 오랫동안 실전에서 검증된 모범 사례와 도구를 기반으로 많은 결정을 내려줌
     * Belt는 아직 개발 초기 단계에 있고 API가 변경될 수 있지만, 커뮤니티에서 살펴볼 준비가 되었다고 생각

Belt가 무엇을 구성해주는가?

     * Belt로 새 앱을 시작하면 다음이 설정됨:
          + Expo: 플랫폼 간 개발 및 테스트를 간소화함
          + ESLint & Prettier: 코드를 깨끗하고 일관되게 유지함
          + TypeScript: 정적 입력을 추가하여 초기에 오류를 잡는 데 도움이 됨
          + Jest & React Native Testing Library: 앱 테스트를 위한 견고한 기반을 제공함
          + MSW: 네트워크 요청을 모의실험하여 API 테스트를 단순화함
          + 하단 탭이 있는 React Navigation: 검증된 설정으로 탐색을 시작할 수 있음
          + REST API용 Tanstack Query: REST API에 대한 강력한 데이터 가져오기 및 캐싱. GraphQL용 Apollo Client는 준비 중임
          + 전역 상태를 위한 Redux Toolkit: 앱 전체의 상태 관리를 단순화하기 위해 곧 제공될 예정임
     * 또한 프로젝트 설정 중에 포함될 수 있는 선택적 도구 세트를 포함하여 생성된 앱을 특정 사용 사례에 더 잘 적응시킬 계획임
     * 이를 통해 시작부터 고유한 요구 사항에 맞게 앱을 조정할 수 있음

Belt 사용 방법

     * 개발자들은 선호하는 도구가 있으며, 패키지 관리자도 예외는 아님
     * Belt는 npm, Yarn, pnpm, Bun 등 선호하는 패키지 관리자와 원활하게 작동하도록 설계되었음
     * 이러한 유연성 덕분에 Belt가 제공하는 간소화된 설정의 이점을 누리면서도 가장 편안한 워크플로우를 고수할 수 있음
     * Belt를 사용하여 React Native Expo 앱을 생성하려면 선호하는 패키지 관리자를 사용하여 다음을 실행하면 됨:

# NPM 사용
npx create-belt-app MyApp

# Yarn 사용
npx create-belt-app MyApp --yarn

# pnpm 사용 (실험적)
npx create-belt-app MyApp --pnpm

# Bun 사용 (실험적)
npx create-belt-app MyApp --bun

     * Belt로 프로젝트를 만들면, 최소한의 노력으로 앱의 기능을 확장할 수 있는 핸들을 추가함
     * 예를 들어 푸시 알림 기능을 추가하려는 경우 Belt는 앱에 알림을 표시하는 데 필요한 코드를 주입하여 프로세스를 단순화함
     * 알림 서비스 구성과 같은 코드 외부 설정을 처리하기만 하면 됨. 다음 처럼:

# Yarn 사용
yarn belt add notifications

# NPM 사용
npx belt add notifications

# PNPM 사용
pnpm belt add notifications

     * Belt는 React Native 앱을 시작하고 개선하는 프로세스를 단순화하고 표준화하므로 설정에 시달리지 않고 멋진 앱 구축에 집중할 수 있음
"
"https://news.hada.io/topic?id=16784","MrBeast의 프로덕션 성공 비법 (유출된 PDF)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MrBeast의 프로덕션 성공 비법 (유출된 PDF)

     * MrBeast의 YouTube 비디오 형식을 즐기든 즐기지 않든, 그의 제작사에 새로 합류한 사람들을 위한 이 유출된 온보딩 문서는 흥미롭게 읽을 수 있음
     * 2020년대에 대규모 바이럴 YouTube 운영을 하는 데 필요한 것과 그 사명을 수행하기 위해 진화된 매우 특정한 회사 문화에 대한 상세한 설명임

MrBeast 방식의 시작

     * ""여러분이 여기에 있는 지식을 주의 깊게 읽고 이해한다면 훨씬 더 성공할 수 있을 거라고 진심으로 믿습니다. 그래서 이 책을 읽고 퀴즈에 통과하면 1,000달러를 드리겠습니다.""

YouTube에 초점을 맞춤

     * 여러분의 목표는 가능한 한 최고의 YouTube 동영상을 만드는 것임. 이것이 이 제작사의 최우선 목표임
     * 가장 잘 만든 동영상, 가장 재미있는 동영상, 가장 잘 보이는 동영상, 가장 높은 품질의 동영상을 만드는 것이 아님. 가능한 한 최고의 YouTube 동영상을 만드는 것임

A, B, C 팀 플레이어의 정의

     * A-플레이어는 집요하고, 실수에서 배우며, 코칭 가능하고, 지적이며, 변명하지 않고, YouTube를 믿으며, 이 회사의 가치를 보고, 자신의 일에서 세계 최고임
     * B-플레이어는 A-플레이어로 훈련되어야 하는 새로운 사람들이고, C-플레이어는 그저 평균적인 직원들임
     * C-플레이어는 독성이 있으며 즉시 다른 회사로 옮겨야 함 (괜찮습니다. 모두에게 퇴직금을 주니까요. 그들은 괜찮을 겁니다.)

YouTube 바이럴

     * Click Thru Rate (CTR)은 매우 중요한 비디오 썸네일에 대한 것임
     * ""I Spent 50 Hours In My Front Yard""는 지루하고 클릭하지 않을 것임. 그러나 ""I Spent 50 Hours In Ketchup""은 가설적으로 클릭할 것임
     * 시간/노력 면에서 둘 다 비슷하지만 케첩 영상이 100배는 더 바이럴할 수 있음

비디오 제작 프로세스

     * 모든 비디오의 창작 과정은 제목과 썸네일로 시작함
     * 이것들이 시청자의 기대치를 설정하고, 그 후에 오는 모든 것은 그것을 염두에 두고 정의되어야 함
     * 시청자가 기대치에 부합되지 않는다고 느끼면 클릭해서 떠날 것임. 이는 YouTube의 중요한 신비로운 알고리즘에 영향을 미치는 결정적인 평균 시청 시간을 낮춤

MrBeast 비디오 공식

     * 6-10페이지에 자세히 설명되어 있음
     * 첫 1분은 시청자의 주의를 사로잡고 썸네일에서의 기대치가 충족될 것임을 보여줌
     * 6천만 번의 초기 클릭 후 첫 1분 동안 2천1백만 명의 시청자를 잃는 것은 상당히 좋은 결과로 간주됨
     * 1-3분, 3-6분, 6분부터 끝까지 각각 명확하게 정의된 책임이 있음

와우 팩터

     * 예를 들어 100일 동안 원 안에 있는 비디오에서 누군가에게 50만 달러를 제공한 것이 ""와우 팩터""의 예시임
     * 그가 살 원 안의 집으로 시작하는 대신, 비디오 시작 30초 후에 크레인으로 가져왔음. 왜냐하면 YouTube에서 그렇게 할 수 있는 사람이 누가 있겠어요?

콘텐츠 제작에 대해 (10-24페이지)

     * YouTube를 위한 놀라운, 장엄한, 그리고 매우 비싼 콘텐츠를 제작하는 데 필요한 통찰력으로 가득 차 있음
     * 많은 부분이 의존성을 조정하고 집중적으로 관리하는 것에 관한 것임

병목 현상

     * 병목 현상의 원인이 되는 사람을 똑바로 바라보고 말해야 함. 왜 병목 현상의 원인인지 설명해야 함
     * ""Tyler, 당신이 내 병목입니다. 이 동영상을 만드는 데 45일이 있는데 동영상의 내용이 무엇인지 알기 전까지는 시작할 수 없어요. 이것이 중요하다는 것을 이해하고 창의적인 작업이 언제 완료될지 날짜를 정해야 한다는 것을 확인해 주세요.""
     * 매일 Tyler를 체크하고 목표 날짜를 맞출 수 있는지 확인해야 함

핵심 구성 요소

     * 동영상에 필수적인 것들임
     * 100명을 섬에 보내 한 사람에게 주려면 섬을 확보하는 것이 핵심 구성 요소임
     * 섬에서의 도전이 얼마나 잘 계획되었는지, 날씨가 얼마나 좋은지는 중요하지 않음. 섬이 없으면 동영상이 없음
     * 어디에서든 올 수 있으며, 작업 중인 것이 핵심 구성 요소로 분류되면 아기처럼 대해야 함
     * 자주 확인하고, 집착하고, 백업을 만들고, 배송이 필요하면 누군가에게 픽업해서 운전하게 하고, 표준 배송을 신뢰하지 말고, 무언가 잘못되면 즉시 말해야 함. 핵심 구성 요소로 동전을 던지지 마세요 (동영상에 100만 달러 이상을 걸고 있는 것과 같음)

의사소통에 대해

     * ""더 높은 형태의 의사소통""에 대한 강한 편향이 있음: 직접 대면이 전화 통화보다 좋고, 전화 통화가 문자 메시지보다 좋고, 문자 메시지가 이메일보다 좋음
     * 작업을 문서화하는 데 있어 영상은 매우 가치 있는 도구임
     * 한 사람이 뭔가를 잘 이해하는 것과 10명의 팀 전체가 잘 이해하는 것 중 어떤 것이 더 중요할까요? 당연히 팀이죠. 팀을 같은 페이지로 끌어올리는 가장 쉬운 방법은 모든 것을 영상으로 찍어 그들이 지속적으로 참조할 수 있는 곳에 저장하는 것임. 세트를 영상으로 찍고 주문할 때 영상을 요청하면 많은 문제를 해결할 수 있음
     * 의사소통에 대해 이야기하고 있으니, 상대방이 읽었다는 것을 확인하지 않는 한 서면 의사소전달은 의사소통이 아님

컨설턴트의 가치

     * 컨설턴트는 말 그대로 치트 코드임
     * 세계에서 가장 큰 케이크 조각을 만들어야 한다면? 이전에 세계에서 가장 큰 케이크 조각을 만든 사람에게 전화하는 것부터 시작하세요
     * 그는 이미 수없이 많은 테스트를 했고 몇 주 분량의 작업을 아낄 수 있음
     * 할당된 모든 작업에서 항상 컨설턴트를 찾아 도움을 받을 수 있는지 자문해 보세요

알아두어야 할 무작위 사항들

     * 출연자들을 3시간 이상 태양 아래 (이상적으로는 대기 중) 두지 마세요. 오징어 게임에서 우리에게 50만 달러가 들었고 남녀 대결에서 많은 사람들이 나갔습니다. 자세한 내용은 James에게 물어보세요

예산 책정

     * 가급적이면 돈을 쓴 것이 카메라에 보이기를 원함
     * 1만 달러 이상을 쓰는데 카메라에 보이지 않을 것이라면 진지하게 생각해 보세요

GN⁺의 의견

     * MrBeast의 문서에는 업무에 직접 관련된 교훈은 그다지 많지 않지만, 기괴하게 생긴 터무니없이 야심찬 기업의 후드 아래를 솔직하게 들여다보는 것은 꽤 매력적임
     * 이 문서는 YouTube 크리에이터로서 성공하기 위해 얼마나 많은 노력과 세부 사항이 필요한지를 보여주는 훌륭한 사례 연구임. 대중을 사로잡는 콘텐츠를 만들기 위해서는 엄청난 창의성, 계획, 실행력이 요구됨
     * 고품질 YouTube 콘텐츠를 지속적으로 제작하는 것이 얼마나 어려운 일인지, 그리고 이를 위해 MrBeast가 얼마나 세심하게 최적화했는지 깨달을 수 있음
     * 개인 크리에이터나 소규모 제작사가 이 문서에 설명된 것과 같은 수준의 제작 가치와 바이럴 잠재력을 달성하기는 어려울 것임. 하지만 YouTube 성공을 위한 중요한 원칙들은 규모와 관계없이 배울 점이 많음
     * 이 유출된 문서는 YouTube 제작의 이면을 들여다볼 수 있는 독특하고 가치 있는 기회를 제공함. MrBeast의 제작 철학과 방법론에 동의하지 않을 수도 있지만, 그의 성공은 부인할 수 없음. 크리에이터와 제작사가 자신만의 방식으로 이 통찰력을 활용할 수 있기를 바람

   재밌네요

   PDF 문서 링크 HOW TO SUCCEED IN MRBEAST PRODUCTION
"
"https://news.hada.io/topic?id=16710","뉴욕 타임즈 기술 노동자 노조, 파업 승인 투표 실시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     뉴욕 타임즈 기술 노동자 노조, 파업 승인 투표 실시

     * New York Times Tech Guild는 600명 이상의 직원을 대표하는 노조임
     * 노조는 화요일에 Times 경영진과의 교착 상태에 빠진 계약 협상에 항의하여 파업을 승인하는 투표를 실시함
     * 노조는 2022년에 결성되었지만 2년 넘게 계약을 확보하지 못함
     * 노조의 622명의 직원 중 89%가 화요일 파업 승인 투표에 참여했음
          + 압도적 다수가 파업 투표를 지지함
     * 노조가 언제 파업할 계획인지는 불분명함
          + 그러나 다가오는 선거를 고려할 때 가까운 시일 내에 파업하는 것은 The Times에 문제가 될 수 있음
          + Wirecutter 노조는 2021년 블랙 프라이데이 연휴 기간 동안 5일간 파업을 했고 며칠 후 경영진과 합의에 도달함
          + The Times의 주요 편집 노조는 2022년 12월에 하루 동안 파업을 했고 2년 넘게 협상한 끝에 2023년 5월에 계약을 체결함
     * 기술 직원들은 2022년 초에 NewsGuild와 함께 노조 결성에 찬성 투표를 했음
          + The Times의 선임 분석 관리자이자 노조의 단위 의장인 Kathy Zhang은 노조 결성부터 지금까지 ""경영진이 협상에 있어 발을 질질 끌고 있다""고 말함
          + The New York Times의 대변인은 이에 대해 언급하지 않음
     * 이 노조는 NewsGuild에 따르면 미국에서 가장 큰 기술 노동자 노조임
          + 따라서 노조 조직가들은 The Times와의 계약 협상을 통해 다른 기술 노조에 선례를 남기고자 함
          + 임금 인상 외에도 원격 근무권을 포함한 다양한 직장 정책과 독특한 정당한 사유 보호를 위해 교섭하고 있음

GN⁺의 의견

     * 이러한 대규모 언론사 내 기술 직군 노조의 결성과 파업은 미디어 산업에서 기술 인력의 중요성이 높아지고 있음을 보여줌
     * 기술 발전으로 인해 뉴스 제작과 유통 과정에서 엔지니어와 데이터 분석가 등의 역할이 커지면서 이들의 노동권 보장에 대한 요구도 커지고 있음
     * 다만 장기간 협상이 지연되면서 파업이 현실화되고 있는 점은 우려스러움. 노사가 합의점을 찾지 못하면 뉴스 생산에 차질이 빚어질 수 있음
     * 다른 언론사나 테크 기업들도 이 사태를 주시하며 자사 기술 인력의 처우 개선과 소통 확대를 위해 노력할 필요가 있어 보임
     * 앞으로 이 노조가 어떤 계약을 체결하고 성과를 거둘지 지켜볼 일임. 미디어 업계 전반의 기술 인력 대우에 영향을 미칠 수 있기 때문

        Hacker News 의견

     * 95%의 노조가 파업에 찬성한 것은 중요한 의미를 가짐
          + 관련 정보는 여기에서 확인 가능함
          + 다른 언론사들이 이 사건을 어떻게 다룰지 궁금함
          + 다른 언론사들도 같은 생각을 가질까봐 두려워할 것임
     * 뛰어난 소프트웨어 엔지니어는 여전히 찾기 어려움
          + 찾으면 잘 대우하고 유지하기 위해 최선을 다해야 함
     * 선거 기간과 대중 매체에 많은 자금이 유입되는 시기임
          + NYT는 가능한 빨리 협상을 타결하려는 동기가 강할 것임
     * NYT 기술 직원들이 파업하는 것이 좋은 생각인지 불분명함
          + 미디어는 높은 마진을 가진 산업이 아님
          + 임금 인상 압박을 받으면 경영진은 기술 직원 수를 줄이는 방법을 분석해야 함
          + 마진이 낮은 상황에서 협상에 응하는 것은 사업의 존재 자체를 더 위험하게 만듦
          + 파업 대신 더 높은 임금을 주는 산업으로 이직하는 것이 더 나은 생각일 수 있음
     * Kathy Zhang, NYT의 선임 분석 매니저이자 노조 단위 의장은 ""경영진이 협상에 매우 소극적이었다""고 말함
          + 사람 관리자가 노조원이 될 수 있는지 궁금함
          + 자격이 어떻게 결정되는지 아는 사람 있는지 물어봄
     * 실제 발표/출처: 여기
     * 이런 파업의 가상 피켓 라인을 넘지 않는 방법이 궁금함
          + 이 노조의 직원이 있는 회사와 거래를 하지 않는 것인지 물어봄
     * 그들을 응원함
          + 더 많은 노동자가 자신이 얼마나 착취당하고 있는지 이해하고 더 공정한 몫을 요구해야 함
     * HN에서 반노조 견해를 가진 임시 억만장자 CEO 유형을 보는 것이 항상 흥미로움
          + 매번 매우 흥미로운 세뇌가 일어나는 것 같음
     * 622명의 기술 직원과 7억 방문자 수를 정당화하려고 함
          + 622 * $124,584 * 1.25 = $96,864,060/년
          + CPM과 CPC를 조정해야 유지 가능함
          + $5 per 1,000 방문자 (CPM): 193억 7천만 광고 노출이 필요함
          + CPC $0.10에서 $2 범위로 계산해도 비슷한 문제 발생
          + 어떻게 사업을 유지하는지 이해할 수 없음
"
"https://news.hada.io/topic?id=16793","HN 알림: DanBC 사망 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HN 알림: DanBC 사망 소식

     * 오랜 기간 건강이 좋지 않았던 HN 기여자 DanBC가 지난달 사망했음
     * 그의 유산이 계속 영감을 주고, 이곳과 더 넓은 세상에 대한 그의 기여가 기억되길 바람
     * Dan, 평안히 쉬길 바람

Dan Beale Cocks의 사망 소식

     * ""슬프게도, 정신 건강 및 웰빙 파트너십 이사회 공동 의장이었던 Dan Beale Cocks가 2024년 8월 21일 오랜 병환 끝에 사망했음
     * Dan은 여러 해 동안 글로스터셔에서 정신 건강 개선과 공동 제작에 큰 기여를 했으며, 그가 매우 그리울 것임
     * Dan이 사망하기 전에, 우리는 매년 Dan Beale Cocks 공동 제작 모범 사례 기념 행사를 계획할 수 있는지 물었고, 그는 이 아이디어에 매우 기뻐했음
     * 이 행사는 다른 파트너십 이사회와 협력하여 진행될 예정임

GN⁺의 정리

     * 이 기사는 HN 기여자 DanBC의 사망 소식을 전하며, 그의 업적과 기여를 기리기 위한 내용임
     * Dan Beale Cocks는 정신 건강과 공동 제작 분야에서 큰 영향을 미쳤으며, 그의 기여는 많은 사람들에게 영감을 줄 것임
     * 이 기사는 그의 유산을 기리기 위한 행사 계획을 언급하며, 그의 업적을 지속적으로 기념하려는 의지를 보여줌
     * 비슷한 기능을 가진 프로젝트로는 정신 건강 개선을 위한 다양한 비영리 단체와 공동 제작 플랫폼이 있음

        Hacker News 의견

     * Dan의 HN과 정신 건강 커뮤니티에 대한 기여에 감사함
     * 그의 코멘터리가 그리울 것임, 그를 아는 사람들 사이에서 기념되는 것이 기쁨
     * 천사들이 그를 안식으로 인도하길 바람
     * 자신의 가까운 친구와 가족 외에 누가 자신을 그리워할지 궁금해짐
     * Dan의 죽음에 애도를 표함
     * 암에 대한 두려움과 증오가 큼
     * 왜 이렇게 많은 사람들이 암으로 죽는지 의문임
     * 그의 코멘터리를 즐겼음, 비록 그가 내 코멘터리를 즐기지 않았더라도 그의 관점을 그리워할 것임
     * 자신도 Gloucestershire 출신이며 DanBC가 같은 지역 출신인 줄 몰랐음
          + High Street에서 그를 지나쳤을 수도 있음, HN 핸들을 소유한 사람인 줄 몰랐음
          + Dan이 평화롭게 쉬길 바람, Gloucestershire에서 쉬는 것도 나쁘지 않음
     * 중요한 사람에게 자신이 사망했을 때 HN에 알리도록 부탁해야 함을 상기시킴
     * 이 소식을 듣게 되어 매우 유감임
     * 이 사람과 많은 논쟁을 했었음, 그가 죽어가고 있는 줄 몰랐음
     * 또한 Tildes에서도 활동했음: DanBC의 Tildes 프로필
     * RIP Dan
"
"https://news.hada.io/topic?id=16678","Reclaim The Stack - 쿠버네티스 기반 배포 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Reclaim The Stack - 쿠버네티스 기반 배포 플랫폼

     * 우리는 7개월 동안 Kubernetes 기반 플랫폼을 구축하여 Heroku를 대체함
     * SaaS 제품을 위해 mynewsdesk.com에서 Heroku를 대체할 Kubernetes 기반 플랫폼을 구축함
     * 결과적으로 비용이 90% 절감되고 성능이 30% 향상됨
     * 배포 시간 단축 및 더 빠르고 접근 가능한 도구로 개발자 경험을 크게 개선함
     * 이제 전체 스택을 오픈 소스로 공개하여 7개월이 아닌 며칠 만에 동일한 작업을 수행할 수 있음

플랫폼 컴포넌트 - 각 컴포넌트에 대해서 Architecture Decision Record 포함

     * Gitops : ArgoCD
     * Ingress : Cloudflared
     * PostgreSQL : CloudnativePG
     * Redis : Spotahome's Redis Operator
     * Elasticsearch : Elastic Cloud Kubernetes
     * Secrets Management : Sealed Secrets
     * Persistent Storage : Rancher Local Path Provisioner + OpenEBS Dynamic LocalPV Provisioner
     * Monitoring : kube-prometheus-stack
     * Log Aggregation : Qryn
     * Service Mesh : Linkerd

GN⁺의 정리

     * 이 기사는 Kubernetes 기반 플랫폼을 구축하여 Heroku를 대체한 경험을 공유함
     * 비용 절감과 성능 향상, 개발자 경험 개선 등의 성과를 강조함
     * 오픈 소스로 공개된 스택을 통해 다른 개발자들도 쉽게 동일한 작업을 수행할 수 있음
     * Kubernetes와 같은 기술에 관심 있는 개발자들에게 유용한 정보임
     * 유사한 기능을 제공하는 다른 프로젝트로는 OpenShift와 Rancher가 있음

        Hacker News 의견

     * 첫 번째 의견
          + Docker, Mesos, Swarm, k8s를 사용해 수천 개의 스택을 구축하고 배포해 본 경험이 있음
          + 중요한 것은 두 번째 날의 유지 관리임
          + 많은 도구들이 앱을 서버에 배포하는 것을 쉽게 만들어줌
          + 그러나 버전 변경, 의존성 문제, 재해 복구 계획 등 유지 관리가 중요함
          + 이러한 문제를 해결할 팀, 예산, 문제가 있다면 더 나은 선택임
     * 두 번째 의견
          + 몇 년 전 k8s의 유행에 휩쓸려 모든 비즈니스를 k8s로 운영하려 했음
          + 큰 실수였음
          + DigitalOcean이 자동으로 클러스터를 업그레이드하면서 모든 비즈니스가 오프라인 상태가 됨
          + 간단한 bash 스크립트와 systemd로 전환했으며, 다시는 돌아가지 않을 것임
     * 세 번째 의견
          + 인프라를 heroku에서 kubernetes로 이전하는 데 7개월이 걸릴 만큼 성공적인 비즈니스를 가지고 싶음
     * 네 번째 의견
          + 몇 개의 VM과 bash 스크립트만으로도 꽤 멀리 갈 수 있음
          + DevOps 도구는 적을수록 더 나음
     * 다섯 번째 의견
          + 새로운 프로젝트를 보는 것은 좋음
          + 대부분의 사람들은 Kubernetes로 시작하지 말아야 함
          + 자동 확장이 필요 없다면 Kamal을 시도해보길 권장함
          + 37signals가 Kubernetes와 클라우드를 떠나기 위해 만든 도구로, 간단한 VM과 잘 작동함
          + 시작하는 사람들을 위한 핸드북도 작성했음
     * 여섯 번째 의견
          + Kubernetes 설정이 좋아 보임
          + 그러나 Heroku와 비교할 때 복잡성이 훨씬 높음
          + 더 간단한 것을 찾고 있다면 dokku나 lunni.dev를 시도해보길 권장함
          + coolify.io도 좋은 평가를 받고 있음
     * 일곱 번째 의견
          + 인프라 팀이 있는 회사에서 일하고 있으며, CEO가 인프라에 열정적임
          + terraform과 k8s를 사용해 인프라를 구축함
          + 그러나 배포에 며칠이 걸리고, 인프라가 너무 복잡함
          + 사용자 수가 많지 않아 확장성의 이점도 없음
          + 스타트업은 사용자 기반이 충분히 형성되기 전까지 k8s를 사용하지 말아야 함
     * 여덟 번째 의견
          + 보안에 대한 기본 철학은 개발자와 클러스터 내의 사설 네트워크를 신뢰하는 것임
          + 이 시스템을 신뢰하지 않고 구성하는 것이 복잡한지 궁금함
          + 문제점이 어디에 있는지 알고 싶음
     * 아홉 번째 의견
          + Heroku를 대체하기 위해 Kubernetes 기반 플랫폼을 구축하는 데 7개월이 걸렸음
          + 비용이 90% 절감되고 성능이 30% 향상됨
          + 그러나 Heroku가 느리고 비쌌기 때문에 이 접근 방식이 최선인지 의문임
     * 열 번째 의견
          + dokku와 비교하면 어떻게 다른지 궁금함
"
"https://news.hada.io/topic?id=16771","Novops - 크로스 플랫폼 Secret & Config 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Novops - 크로스 플랫폼 Secret & Config 관리자

     * 개발환경 및 CI 를 위한 유니버설 Secret & Configuration 관리자
     * 시크릿 관리: Hashicorp Vault, AWS, GCloud, Azure, SOPS 등에서 시크릿 로딩 가능
     * Configuration as code: 로컬 개발, 애플리케이션 및 CI 파이프라인의 보안 파일과 환경 변수를 관리 및 설정
     * 보안: 시크릿을 메모리에 로드하고 필요한 기간 동안만 보관하여 민감한 데이터를 잘못 취급하거나 확산하는 것을 방지
     * Universal: 서로 다른 플랫폼과 도구에서 다양한 비밀 시크릿 요구 사항을 충족할 수 있도록 다재다능하고 유연하게 설계
     * Rust 기반 오픈소스
"
"https://news.hada.io/topic?id=16754","FDA, 첫 번째 일반 판매용 보청기 소프트웨어 승인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FDA, 첫 번째 일반 판매용 보청기 소프트웨어 승인

     * FDA는 오늘 애플 에어팟 프로 호환 버전에 사용되는 첫 번째 일반의약품(OTC) 보청기 소프트웨어 기기인 Hearing Aid Feature(HAF)를 승인함
     * HAF가 설치되고 사용자의 청력 요구에 맞게 맞춤 설정되면, 에어팟 프로 호환 버전이 OTC 보청기로 사용될 수 있음. 18세 이상 경도 및 중등도 난청 성인을 대상으로 하는 음향 증폭용임
     * FDA의 Michelle Tarver 박사는 난청이 수백만 명의 미국인에게 영향을 미치는 중요한 공중보건 문제라고 말함. 오늘 널리 사용되는 소비자 오디오 제품에 대한 OTC 보청기 소프트웨어 승인은 경도 및 중등도 난청 성인의 청력 지원 가용성과 접근성, 수용성을 높이는 또 다른 단계라고 밝힘

미국 성인 3천만 명 이상이 난청 보고, 보청기 사용이 노인 건강에 도움

     * 미국 성인 3천만 명 이상이 어느 정도의 난청을 보고함
     * 난청은 노화, 큰 소음 노출, 특정 질병 및 기타 요인에 의해 발생할 수 있음
     * 난청은 의사소통, 관계, 학업 또는 업무 수행 및 정서적 안녕에 부정적인 영향을 미칠 수 있음
     * 노인의 보청기 사용은 인지 저하, 우울증 및 기타 건강 문제의 빈도 또는 중증도 감소와 연관이 있음

FDA의 OTC 보청기 규정과 혁신 및 편의성 촉진

     * FDA는 2022년 10월 경도 및 중등도 난청 성인의 안전하고 효과적인 제품 옵션 접근성 개선을 위한 OTC 보청기 규정을 수립함
     * 이 규정으로 소비자는 의사 검진, 처방전 또는 청력 검사 없이 상점이나 온라인에서 직접 보청기를 구매할 수 있게 됨
     * 오늘의 승인은 FDA가 난청 해결을 위한 안전하고 효과적인 솔루션 제공과 동시에 혁신과 편의성을 촉진하기 위한 지속적인 노력을 보여줌

HAF 소프트웨어 개요 및 임상 시험 결과

     * HAF는 에어팟 프로 호환 버전에 사용되는 소프트웨어 전용 모바일 의료 애플리케이션임
     * HAF는 자가 맞춤형 전략을 사용하며, 사용자는 청력 전문가의 도움 없이 청력 요구에 맞게 조정할 수 있음
     * HAF는 iOS 기기(예: 아이폰, 아이패드)를 사용하여 설정되며, iOS 헬스킷에서 사용자의 청력 수준에 액세스하여 HAF를 사용자 정의함
     * 사용자는 HAF를 설정한 후 볼륨, 음색 및 밸런스 설정을 세밀하게 조정할 수 있음
     * 경도 및 중등도 난청이 인지되는 118명을 대상으로 한 여러 미국 임상시험에서 HAF가 평가되었음
     * HAF 자가 맞춤 전략을 사용한 대상자는 동일한 기기를 전문적으로 맞춘 대상자와 유사한 인지 혜택을 얻었음
     * 외이도 증폭 수준 및 소음에서의 음성 이해도 측정 테스트에서도 유사한 성능을 보였음
     * 이 연구에서 기기 관련 부작용은 관찰되지 않았음

FDA의 De Novo 사전 시장 검토 경로와 건강 형평성 증진 노력

     * 이 애플리케이션은 FDA의 De Novo 사전 시장 검토 경로에 따라 검토되었음
     * 이는 저위험에서 중등도 위험의 새롭고 이전에 합법적으로 시판된 기기가 없는 일부 기기에 대한 규제 경로임
     * FDA 기기 및 방사선 보건 센터는 전략적 우선순위의 일환으로 건강 형평성 증진을 위해 중요한 기술에 대한 접근성을 확대하고 의료 서비스를 환자에게 직접 제공하는 혁신을 계속 지원할 것임

GN⁺의 의견

     * 경도 및 중등도 난청 성인을 위한 OTC 보청기 소프트웨어 개발은 접근성과 편의성 측면에서 의미 있는 발전임. 그러나 정확한 맞춤 설정이나 전문적인 조언 없이 사용할 경우 효과가 제한적일 수 있음
     * 난청은 노인 인구에서 흔히 발생하므로, 고령층이 새로운 기술을 쉽게 사용할 수 있도록 사용자 인터페이스와 사용 설명서를 단순화하는 것이 중요함
     * 전통적인 보청기 제조사들은 가격 경쟁력과 사용 편의성 측면에서 이 기술에 도전받을 수 있음. 기존 업체들도 유사한 모바일 앱 기반 솔루션 개발에 나설 것으로 예상됨
     * 장기적으로는 스마트폰이나 웨어러블 기기에 청력 측정 및 증폭 기능을 기본으로 내장하는 방향으로 발전할 것임. 이를 통해 난청인들의 일상적인 보청기 사용이 한층 수월해질 전망임
     * 의료 전문가의 관여 없이 보청기를 사용하게 되면서 과도한 증폭으로 인한 청력 손상 우려도 있음. 제품 안전성에 대한 소비자 인식 제고와 함께 청력 보호를 위한 가이드라인 마련이 필요해 보임

        Hacker News 의견

     * AirPods가 공식적으로 보청기가 되면서 보청기에 대한 낙인과 태도가 줄어들고 많은 사람들이 자신의 청력이 얼마나 나쁜지 깨닫게 될 것임
          + 몇 년 동안 Phonak 보청기를 사용해왔고, AirPods Pro의 접근성 청력검사 기능도 사용해왔음
          + Apple이 이를 공식화하고 FDA 승인을 받은 것에 매우 기쁨
          + 청력을 잃기 시작했을 때 낙인 때문에 보청기 착용을 거부했지만, 결국 보청기를 착용하게 되어 삶이 훨씬 나아짐
          + 보청기는 기술적으로 매우 뛰어나며, 작은 크기와 긴 배터리 수명을 자랑함
          + 대부분의 보청기 브랜드가 덴마크에서 온다는 점이 흥미로움
          + 반면 AirPods는 몇 시간 후에 배터리가 소모되고 결국 폐기물이 될 운명임
     * FDA가 웹.archive.org에 호스팅된 오래된 기사를 링크한 것이 흥미로움
          + 링크된 기사는 2022년에 FDA가 직접 게시한 것임
          + FDA가 죽은 링크를 방지하기 위해 더 많은 노력을 기울여야 할 것임
     * AirPods가 보청기로 사용되면서 청각 장애인들이 보청기를 더 저렴하게 구입할 수 있게 됨
          + 기존 보청기는 2000달러 이상이었지만, 이제 Apple은 그 가격을 250달러로 낮췄음
          + AirPods의 수명이 1.5년이라고 가정하면, 12년 동안 교체해도 보청기 한 쌍의 비용에 미치지 못함
          + AirPods가 일반 보청기와 동일한 수준이 아니더라도 시장 가격을 낮추는 데 도움이 될 것임
          + 모든 제조업체가 Apple에 밀리지 않기 위해 1000달러 이하의 보청기를 출시할 가능성이 높음
     * FDA의 De Novo 사전 시장 검토 경로에 대한 언급
          + Android, Bose, Sony 등이 유사한 솔루션을 개발하면 De Novo 경로를 사용할 수 없을 것인지 궁금함
          + 일반 경로가 얼마나 더 까다로운지에 대한 질문
     * AirPods를 보청기로 사용하는 것에 대한 갈등
          + 한쪽 귀에만 보청기를 사용하고 다른 쪽 귀는 정상 청력을 가짐
          + AirPods를 사용하면 스테레오로 들을 수 있어 좋을 것임
          + 그러나 AirPods를 착용한 사람을 보면 다른 것을 듣거나 세상을 차단하려는 것으로 보일 수 있음
     * Apple이 이벤트에서 FDA 승인을 ""매우 곧"" 받을 것이라고 언급한 후 3일 만에 실제로 승인을 받은 것이 놀라움
          + 정부가 특히 FDA 승인과 같은 것에 대해 누구에게도 일정 약속을 할 수 없을 것이라고 생각했음
     * 자녀가 약간의 청력 손실을 가지고 태어났고, 이는 큰 변화임
          + 지역 보건 서비스에서 1000유로짜리 기본 보청기를 받았지만, 전문가들이 추천한 5000유로짜리 고급 Phonak 기기를 고려 중임
          + 이에 비해 AirPods는 거의 무료와 같음 (280유로)
     * 관련된 Apple 연구: Apple Hearing Study가 이명에 대한 초기 통찰을 공유함
          + Apple Hearing Study 링크
     * 헤드폰의 ADA 준수에 대한 큰 진전으로 봄
          + 몇 년이 걸릴 수 있지만 청력검사 편집이 최소 사양이 될 것임
     * 연구의 결론을 내린 연구 대상자가 118명에 불과한 것이 놀라움
          + 훨씬 더 큰 연구가 필요할 것이라고 생각했음
"
"https://news.hada.io/topic?id=16738","iFixit의 FixHub: 아마도 당신의 마지막 납땜 인두가 될 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 iFixit의 FixHub: 아마도 당신의 마지막 납땜 인두가 될 것

     * 많은 사람들이 납땜을 자주 하면서 기본 인두에서 납땜 스테이션으로 업그레이드함
          + RadioShack 디지털 스테이션을 20년 동안 사용해왔으며, 빠르게 가열되고, 팁도 쉽게 구할 수 있으며, 온도 조절이 용이함
     * 새로운 ""스마트"" USB-C 납땜 인두가 등장했을 때 큰 관심을 두지 않았음
          + iFixit에서 새로운 USB-C 납땜 인두를 제안했을 때 처음에는 회의적이었지만, 문서를 읽고 흥미로운 아이디어가 많음을 알게 됨
     * FixHub는 두 개의 별도 장치로 구성됨
          + 스마트 납땜 인두와 휴대용 전원 스테이션으로 구성된 ""휴대용 납땜 시스템""
          + 두 장치는 독립적으로도 작동 가능

    스마트 납땜 인두

     * 100와트 인두로 5초 이내에 작동 온도에 도달하며, USB-C 전원 공급 장치와 호환됨
     * Pinecil V2와 유사한 크기와 비율을 가짐
     * 디스플레이나 설정 버튼이 없으며, 꼬리 끝에 전원 차단 슬라이드 스위치가 있음
     * 가속도계 기반의 대기 및 절전 모드 지원
     * 시각적 상태 표시를 위한 조명 링이 있음
     * 자석 캡을 사용하여 인두 팁이 뜨거울 때도 덮을 수 있음
     * USB-C 케이블은 잠금 장치가 있어 케이블이 빠지지 않도록 함
     * 팁은 도구 없이 쉽게 제거 가능하며, 다양한 스타일과 크기의 팁을 제공할 예정

    휴대용 전원 스테이션

     * 5,200 mAh 배터리로 100W 출력 가능
     * 후면에 충전용 USB-C 포트, 전면에 두 개의 USB-C 포트가 있음
     * 스마트 납땜 인두를 연결하면 OLED 화면과 회전 인코더를 통해 설정 가능
     * 최대 8시간 사용 가능

  인터넷 연결 납땜 인두

     * 전원 스테이션 없이도 컴퓨터에 연결하여 WebSerial을 통해 설정 가능
     * Chrome 기반 브라우저 필요, 모바일 버전 Chrome은 지원하지 않음
     * WebSerial 인터페이스를 통해 펌웨어 업데이트 가능

  명령어로 납땜 제어

     * 전통적인 시리얼 인터페이스도 제공하여 명령어로 설정 조정 가능

  내부 구조 살펴보기

     * iFixit의 수리 가이드를 참고하지 않고도 쉽게 분해 가능
     * 접착제, 테이프, 숨겨진 고정 장치 없이 논리적으로 설계됨
     * 제품의 회로도, 폭발도, 부품 목록도 제공됨

  미래에 대한 투자

     * iFixit의 휴대용 납땜 시스템은 매우 인상적임
     * 스마트 납땜 인두는 $79.95, 전원 스테이션 포함 시 $249.95
     * 다른 납땜 스테이션보다 비싸지만, iFixit의 철학을 지지하고 싶다면 가치가 있음

GN⁺의 정리

     * iFixit의 FixHub는 휴대성과 강력한 기능을 동시에 제공하는 혁신적인 납땜 시스템임
     * 수리 가능성을 염두에 두고 설계되어, 사용자가 쉽게 분해하고 수리할 수 있음
     * WebSerial을 통해 컴퓨터에서 설정을 조정할 수 있으며, 명령어 인터페이스도 제공됨
     * 가격은 높지만, iFixit의 철학과 품질을 지지하는 사용자에게는 가치가 있음
     * 유사한 기능을 가진 제품으로는 Pinecil V2와 Miniware TS80이 있음

        Hacker News 의견

     * 좋은 품질의 인두와 얇은 납땜 사용의 중요성
          + 저렴한 인두는 작업의 질과 즐거움에 큰 영향을 미침
          + 좋은 품질의 인두와 얇은 납땜은 결과물에 큰 차이를 만듦
          + 저렴한 인두와 두꺼운 납땜을 사용하면 납땜을 싫어하게 됨
     * Pinecil 사용 경험
          + Pinecil은 휴대성과 편리함이 뛰어남
          + Pinecil의 장점: 편안한 그립, 짧은 팁 길이, 높은 전력, 저장 캡
          + 단점: 온도 설정이 인두 자체에서 불가능함
     * 핫 트위저 팁에 대한 요청
          + 표면 실장 부품을 탈거할 때 핫 트위저 팁이 유용함
          + 배터리 팩에 장착할 수 있는 캡이 스탠드 역할을 함
          + 시리얼 프로토콜 문서화 요청
     * 자동 온도 조절 기능에 대한 의견
          + 자동 온도 조절 기능을 원하지 않음
          + 버튼을 눌러 온도를 조절하는 것을 선호함
     * Pinecil과의 비교
          + Pinecil과 유사하지만 웹 인터페이스가 추가됨
          + 외관이 마음에 듦
     * 사양 검토
          + 장점: 빠른 가열 시간, 열 저항 캡, 자동 대기 및 절전 시간 조절 가능
          + 단점: 온도 설정을 위해 iFixit 전원 스테이션이나 컴퓨터가 필요함, 인두에 온도 표시기 없음
     * 휴대용 인두에 대한 요구 사항
          + 빠른 가열과 즉시 캡을 씌워 도구 가방에 넣을 수 있는 기능 필요
          + iFixit 전원 은행을 휴대하고 싶지 않음
     * 가격 및 기능에 대한 의견
          + 인두 가격은 적당하지만 배터리 팩 가격이 비쌈
          + 배터리 팩이 없으면 온도 조절이 불편함
     * TS100 사용자 관점
          + 부스트 버튼이 없다는 점이 아쉬움
          + 팁 디자인에 대한 질문
     * Hakko FX888D와의 비교
          + Hakko FX888D를 10년 동안 사용 중이며 가격이 크게 오르지 않음
          + 수리 가능성과 다양한 기능이 장점이지만 실용성에 의문
     * Hakko 및 JBC 팁 호환성
          + Hakko나 JBC 팁과 호환되지 않는 점이 아쉬움
          + 저렴하면서도 높은 품질과 안전 인증을 갖춘 옵션이 필요함
"
"https://news.hada.io/topic?id=16676","Llms.txt - LLM에게 웹사이트 이용정보를 제공하기 위한 표준 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Llms.txt - LLM에게 웹사이트 이용정보를 제공하기 위한 표준 제안

     * 웹사이트는 사람들에게 정보를 제공할 뿐만 아니라 LLM에도 정보를 제공하는 데 사용됨
     * LLM은 프로그래밍 라이브러리 및 API에 대한 정보를 웹사이트 문서에서 수집하는 옵션을 포함하여 코더가 사용하는 개발 환경을 향상시키는 데 사용됨
     * LLM을 위한 정보 제공은 사람을 위한 정보 제공과 약간 다르지만 많은 부분 겹침
          + 일반적으로 보다 간결한 형식으로 정보를 선호함
          + 많은 정보를 빠르게 수집할 수 있어 모든 주요 정보를 한 곳에 수집하는 것이 도움됨
          + LLM의 컨텍스트 창은 전체 웹 사이트를 처리하기에는 너무 작고, 복잡한 HTML 페이지를 LLM 친화적인 일반 텍스트 문서로 변환하는 것이 어려움
     * 따라서 AI 도우미에게 제공할 가장 중요한 정보를 식별하고 가장 적절한 형식으로 제공하는 방법이 필요함

Proposal

     * LLM 친화적인 콘텐츠를 제공하려는 사람들은 /llms.txt 파일을 사이트에 추가할 것을 제안함
          + 이는 간단한 배경 정보와 지침을 제공하는 마크다운 파일로, 더 자세한 정보를 제공하는 마크다운 파일에 대한 링크를 포함함
          + 이는 라이브러리 사용에 필요한 정보를 제공하거나 사람이나 조직에 대해 배우기 위한 연구의 일부로 사용될 수 있음
     * llms.txt 마크다운은 사람과 LLM이 읽을 수 있지만 정확한 형식의 처리 방법도 허용함
     * llms.txt 파일은 다양한 시나리오에서 사용할 수 있음
          + 소프트웨어 라이브러리의 경우 문서에 대한 구조화된 개요를 제공하여 LLM이 특정 기능이나 사용 예제를 쉽게 찾을 수 있게 함
          + 기업 웹사이트에서는 조직 구조와 주요 정보 출처를 개략적으로 설명할 수 있음
          + 새로운 법안과 필요한 배경 및 맥락에 대한 정보가 llms.txt 파일에 큐레이션되어 이해관계자들이 이해하는 데 도움이 될 수 있음
          + 개인 포트폴리오 또는 CV 웹사이트는 개인에 대한 질문에 답하는 데 도움이 될 수 있음
          + 전자상거래에서는 제품 카테고리와 정책을 간략하게 설명할 수 있음
          + 교육 기관은 과정 제공 및 리소스를 요약하는 데 사용할 수 있음

llms.txt 파일 형식

     * llms.txt 파일 형식은 언어 모델이 이해하기 쉬운 Markdown을 사용하여 정보 구조를 제공
     * 이 파일은 전통적인 구조화 형식(예: XML) 대신 Markdown을 사용하는데, 이는 파일의 주요 독자가 언어 모델과 에이전트이기 때문
     * llms.txt 파일은 표준 프로그래밍 도구를 통해 읽을 수 있으며, 특정 형식에 따라 구성
          + H1 헤더: 프로젝트나 사이트의 이름을 포함하며, 유일하게 필수적인 섹션임.
          + 인용 블록: 프로젝트에 대한 간단한 요약을 포함하며, 파일의 나머지 부분을 이해하는 데 필요한 주요 정보를 제공함.
          + Markdown 섹션: 상세 정보를 제공하며, 문단, 목록 등 여러 유형의 섹션이 포함될 수 있으나, 추가적인 헤딩은 포함되지 않음.
          + H2 헤더로 구분된 파일 목록 섹션: 추가 정보를 제공하는 URL 목록을 포함하며, 각 항목은 Markdown 링크 형식 [이름](URL)으로 작성되고, 선택적으로 설명이 추가될 수 있음.
     * 파일의 예

# 프로젝트 제목

> 프로젝트에 대한 선택적 설명이 여기에 들어감

선택적 세부 정보가 여기에 들어감

## 섹션 이름

- [링크 제목](https://링크_URL): 선택적 링크 설명

## Optional

- [링크 제목](https://링크_URL)

     * ""Optional"" 섹션: 특별한 의미를 가지며, 짧은 맥락이 필요한 경우 해당 URL은 생략할 수 있음. 자주 생략할 수 있는 2차적인 정보를 포함함.

기존 표준과의 공존

     * llms.txt는 기존 웹 표준과 함께 작동하도록 설계되었음
     * 사이트맵(sitemaps)이 검색 엔진을 위해 모든 페이지를 나열하는 반면, llms.txt는 LLMs(대형 언어 모델)를 위한 큐레이션된 개요를 제공
     * llms.txt는 robots.txt와 보완 관계에 있으며, 허용된 콘텐츠에 대한 맥락을 제공할 수 있음
     * 또한 사이트에서 사용된 구조화된 데이터 마크업을 참조하여, LLM이 이를 이해하고 해석하는 데 도움을 줄 수 있음
     * /robots.txt와 /sitemap.xml과 같은 방식으로 파일의 경로를 표준화함
          + robots.txt와 llms.txt는 목적이 다름
               o robots.txt: 자동화 도구(예: 검색 인덱싱 봇)가 사이트 접근 허용 범위를 이해하는 데 사용됨
               o llms.txt: 주로 사용자가 특정 주제에 대한 정보를 명시적으로 요청할 때 사용됨. 예를 들어, 코딩 라이브러리의 문서를 프로젝트에 포함하거나, 검색 기능이 있는 챗봇에 정보를 요청할 때 유용함
          + llms.txt는 주로 **추론(inference)**에 유용할 것으로 기대됨. 사용자가 도움을 필요로 하는 시점에 활용될 것이며, **훈련(training)**에 사용되지는 않을 것으로 예상됨. 다만, llms.txt의 사용이 널리 퍼지면, 향후 훈련 과정에서도 이 정보를 활용할 수 있을 가능성도 있음
     * sitemap.xml과의 차이점
          + sitemap.xml: 사이트의 모든 색인 가능한 인간이 읽을 수 있는 정보를 나열함
          + llms.txt는 sitemap.xml의 대체가 아님:
               o LLM이 읽을 수 있는 페이지 버전이 포함되지 않을 수 있음.
               o 정보를 이해하는 데 유용할 수 있는 외부 사이트의 URL을 포함하지 않음.
               o 일반적으로 LLM의 컨텍스트 창에 맞지 않는 너무 큰 문서들을 포함하며, 사이트 이해에 불필요한 정보도 많이 포함됨.
          + llms.txt는 언어 모델이 특정 정보에 접근하고, 문맥을 이해하는 데 최적화된 도구로 작동할 수 있음

   Robot.txt를 확장해도 될거 같은데… LLM을 위한 crawler에게 특별한 지위를 부여할 필요가 있을까요?
   그보다는 LLM crawler들의 user-agent를 좀 정리했으면… 싶지만… user-agent자체가 오늘내일하고 있으니 애매하네요.

   뱀다리1. Txt라고 해놓고 왜 markdown일까요? 나도 마크다운 참 좋아하지만 굳이…

   llms라는 네이밍이 특정 기술을 위한 인터페이스처럼 보여서 좀 불편하네요...

   그러게요. 이상하고 매우 범용성이 낮은 또 다른 표준을 만드는 것보다 JSON-LD와 같은 이미 있는 표준을 이용하거나 확장하는 게 더 낫지 않을까 싶네요.

   이게 널리 퍼진다면 적절한 llms.txt 파일로 LLM이 내 사이트를 사용하는걸 막을 수 있겠군요.
   전혀 다른 무의미한 정보를 제공하거나, LLM의 컨텍스트를 모두 소모할만큼 큰 정보를 제공하거나 하는
   방식으로요.
"
"https://news.hada.io/topic?id=16731","Show GN: 일하기 좋은 카페/장소 모음 (네이버 지도 리스트)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: 일하기 좋은 카페/장소 모음 (네이버 지도 리스트)

   일하기 좋은 카페/장소를 공유하는 깃헙 리포지터리나 개별 페이지들은 많이 있었지만, 시간이 지나면서 카페나 코워킹스페이스가 폐업/이전하는 경우 헛걸음하게 되는 경우가 있습니다.

   네이버 지도의 경우 가게 측 폐업이 발생하거나 제보를 통해 정보가 최신으로 잘 유지가 되는 편이라고 판단하여, 기존 깃헙 리포지터리에서 과감하게 네이버 지도로 플랫폼을 바꾸어 리스트를 만들어보고 있습니다!

   많이 알려주시고 피드백 더해주시면 충실하게 가꾸어나가도록 하겠습니다.!

   에이바우트커피 강남대점
   경기 용인시 기흥구 강남로 3
   https://naver.me/5grLIgJV

   추천드립니다.

   추가해드렸습니다. 새로운 장소 제보는 이곳 댓글 대신에 지도 설명에 나와있는 것과 같이 https://forms.gle/Lz82cijGVjHrffjS7 를 통해 제보해주시면 감사하겠습니다.

   우와 감사합니다.

   진짜 절 살려주셨습니다. 감사합니다.

   오 좋네요. 개인적으로는 소규모 미팅을 하기 좋은 곳들을 모아두는편이었는데, 올려주신 리스트에도 적합한 장소들이 있을 것 같군요.

   참고로 기존 깃헙 리포지터리는 https://github.com/OpenMogaco/awesome-coding-places 이곳이었습니다.

   좋은 자료 공유 감사합니다.

   관리하시기 품이 드실거 같은데.
   github pr을 올리고 수용하면 github action을로 업데이트 할 수 있는 방법이 있는지 모르겠네요.

   맞습니다. 네이버 지도 api 중에 여기에 맞춘 것이 있을지 모르겠습니다. 나중에라도 알게되거나 출시되면 당연히 적용해볼 생각입니다.

   잠깐 찾아 봤는데 없는거 같아요.
   나중에 혹시라도 알게 되면 제보 드리겠습니다. ^^
"
"https://news.hada.io/topic?id=16778","네뷸라 소유권 논란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               네뷸라 소유권 논란

    Nebula의 실제 소유자는 누구인가?

      서론

     * Nebula는 주로 교육 콘텐츠에 중점을 둔 주문형 비디오 스트리밍 서비스임.
     * Netflix나 YouTube와 달리, Nebula는 콘텐츠 제작자들에 의해 만들어졌음.
     * 제작자들이 Nebula의 소유자라고 주장하지만, 실제로는 그렇지 않을 수 있음.

      Nebula의 소유 구조

     * Nebula의 수익은 제작자와 Standard Broadcast가 50/50으로 나눔.
     * 소유권에 대해서는 명확하지 않음. FAQ 페이지에서는 Nebula가 Standard와 제작자에 의해 소유 및 운영된다고만 언급됨.
     * Philosophy Tube 비디오에서 Nebula의 소유권이 50%는 제작자에게, 나머지 50%는 Standard Broadcast에게 있다고 주장함.

      Wendover 다큐멘터리

     * Nebula의 초기 창립자는 Dave Wiskus, CGP Grey, Philip Dettmer였으며, 이후 다섯 명의 다른 제작자에게 지분을 판매함.
     * 현재 Standard Broadcast의 소유자는 다음과 같음:
          + Dave Wiskus
          + Brian McManus (Real Engineering)
          + Alex (LowSpecGamer)
          + Devin Stone (Legal Eagle)
          + Thomas Frank
          + Sam Denby (Wendover Productions)

      Curiosity Stream의 투자

     * Curiosity Stream은 Nebula의 소수 지분을 보유하고 있으며, 이로 인해 이사회 의석을 얻음.
     * Form D 신고서에 따르면, Nebula는 $6백만 달러의 주식을 판매하여 약 12%의 지분을 Curiosity Stream에 제공함.
     * 추가로 $6.5백만 달러의 주식이 승인되었으나 판매되지 않음.

      Reddit AMA

     * Standard Broadcast의 CEO가 Reddit AMA에서 Curiosity Stream의 투자와 관련된 질문에 답변함.
     * Curiosity Stream은 이사회 의석과 소수 지분을 보유하며, 예산 승인에 대한 투표권을 가짐.
     * Nebula는 Standard Broadcast의 자회사임.

      실제 소유 구조

     * Curiosity Stream의 SEC 신고서에 따르면, Nebula는 Standard Broadcast가 100% 소유하고 있었음.
     * Curiosity Stream은 Nebula의 12% 지분을 $6백만 달러에 구매했으며, 추가로 13% 지분을 구매할 옵션이 있음.
     * 최종적으로 Nebula의 소유 구조는 다음과 같음:
          + Standard Broadcast: 83.125%
          + Curiosity Stream: 16.875%
          + 제작자: 0% (직접적인 소유 없음)

      결론

     * 제작자들은 실제로 Nebula의 지분을 소유하지 않음.
     * 제작자들은 ""shadow equity""라는 형태로 회사가 매각될 경우 수익의 50%를 받음.
     * Nebula는 제작자 소유 플랫폼이라는 이미지를 내세우지만, 실제 소유권은 소수의 사람들에게 집중되어 있음.

    # GN⁺의 정리

     * Nebula는 교육 콘텐츠에 중점을 둔 스트리밍 서비스로, 제작자들이 소유한다고 주장하지만 실제로는 그렇지 않음.
     * Standard Broadcast와 Curiosity Stream이 대부분의 지분을 소유하고 있으며, 제작자들은 직접적인 소유권이 없음.
     * 제작자들은 ""shadow equity""를 통해 회사 매각 시 수익을 받을 수 있지만, 이는 실제 소유권과는 다름.
     * Nebula는 진보적인 이미지를 내세우지만, 실제로는 다른 기술 회사들과 크게 다르지 않음.
     * 유사한 기능을 가진 다른 프로젝트로는 Patreon이나 YouTube가 있음.

        Hacker News 의견

     * 첫 번째 의견
          + 창작자들이 특정 회사 행동에 대해 투표할 권리, 수익의 50%를 공유할 권리, 이사회 의석을 가질 권리가 있는 계약을 맺고 있을 것이라는 추측
          + 이는 Standard가 언급한 설정과 일치하며, Wendover 다큐멘터리와도 일치함
          + 창작자들에게 수익과 투표권을 제공하는 메커니즘이 있음
          + 대안으로는 모든 창작자를 캡 테이블에 포함시키는 것이 있는데, 이는 규모가 커질수록 복잡해지고 법적, 세금 문제를 야기함
          + 이러한 메커니즘을 ""소유권""이라고 부르는 것은 논란의 여지가 없음
     * Dave Wiskus, Nebula CEO의 의견
          + Nebula 비즈니스는 ""Standard Broadcast LLC""로, 나와 43명의 창작자들이 소유하고 있음
          + Nebula 스트리밍 서비스는 Watch Nebula LLC로, Standard Broadcast LLC가 83% 소유하고 나머지는 Curiosity Stream이 소유함
          + 플랫폼 창작자들에게는 그림자 주식을 사용하며, LLC 수준의 주식을 할당하는 것은 복잡한 세금 문제를 야기함
          + 스트리밍 서비스의 실질적인 통제권이 변경될 경우, 수익을 창작자와 50/50으로 나누는 계약이 있음
          + 스트리밍 수익의 50%는 시청 시간에 따라 창작자에게 분배되며, 구독자를 유치한 창작자에게는 수익의 1/3이 할당됨
     * 두 번째 의견
          + Nebula는 주로 창작자들이 소유하고 운영함
          + 주요 창작자들: Dave Wiskus, Brian McManus (Real Engineering), Alex (LowSpecGamer), Devin Stone (Legal Eagle), Thomas Frank, Sam Denby (Wendover Productions)
          + 다른 창작자들은 사기를 당하고 있음
          + 이는 edX와 유사한 구조로, 대학들이 소유하고 운영했지만 ""컨소시엄""을 구성한 대학들은 아님
          + Nebula가 사기를 치지 않았다면, 재정 및 법적 마법을 공개했을 것임
          + 이러한 문제는 항상 실사를 할 때마다 발생하며, Brian McManus가 사기에 연루된 것에 실망함
     * 세 번째 의견
          + 창작자들이 Nebula의 통제 지분을 소유하지 않는다면, 왜 공개적으로 소유한다고 말하겠는지 의문
          + 창작자들이 거짓말을 하고 있을 가능성은 낮음
          + Standard의 주식을 소유하면 Nebula 운영에 대한 투표권을 가짐
          + 창작자들이 Nebula를 통제하지 않는다는 결론은 사실이 아님
     * 네 번째 의견
          + 그림자 주식은 실제 주식이 아니며, 실제 주식과 동일한 가치의 IOU임
          + 이는 투표권이 없는 주식을 소유하는 것과 같음
          + 투표권을 가진 사람들이 창작자 수익 분배를 0으로 변경할 수 있다는 우려가 있음
     * 다섯 번째 의견
          + 플랫폼이 Nebula를 판매하면 창작자들이 수익의 절반을 나누지만, Standard를 판매하면 창작자들은 아무것도 얻지 못함
     * 여섯 번째 의견
          + Nebula 창작자가 아닌 사람이 창작자들이 피해를 보고 있다고 불평하는 이유가 의문
          + 기사를 작성하려면 최소한 한 명의 Nebula 창작자의 의견을 들어야 함
     * 일곱 번째 의견
          + Nebula가 J.T. (Second Thought)를 퇴출시킨 이후로 Nebula가 수상하다고 느꼈음
          + Philosophy Tube와 Jessie Gender에게는 잘 작동하고 있지만, 미래에 문제가 발생할 가능성이 있음
     * 여덟 번째 의견
          + Sam과 다른 창립자들은 Nebula에 많은 노력과 자원을 투입했음
          + Nebula는 창작자들이 자신의 쇼를 제작할 수 있도록 예산을 제공하며, 구독자를 유치한 창작자에게 수익을 분배함
          + Nebula는 다른 플랫폼에 비해 창작자 친화적임
     * 아홉 번째 의견
          + 증거 없이 강하게 표현된 의견들이 많음
          + Nebula에 대한 불만이 왜 이렇게 강한지 이해할 수 없음
          + 불필요하게 공격적인 글을 즐기지만, 이번 글은 흥미로운 조사가 없음
"
"https://news.hada.io/topic?id=16721","K1, MariaDB 인수 및 새로운 CEO 임명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      K1, MariaDB 인수 및 새로운 CEO 임명

     * K1은 기업용 데이터베이스 솔루션 선도기업인 MariaDB plc (NYSE: MRDB) 지분 100%를 인수함
          + K1 Investment Management, LLC (""K1"")는 기업용 소프트웨어 기업에 대한 최대 투자사 중 하나
     * 이번 전략적 투자를 통해 MariaDB는 엔터프라이즈 시장에서의 입지를 확대하고 혁신적이고 확장 가능한 솔루션을 전 세계적으로 제공할 수 있게 됨

MariaDB

     * MariaDB는 실리콘밸리와 아일랜드 더블린에 본사를 두고 있음
     * 은행, 통신, 정부, 의료, 전자상거래 등 다양한 산업 분야에서 약 700개의 고객사를 보유하고 있음
     * Deutsche Bank, Nokia, RedHat, Samsung, ServiceNow 등 주요 고객사와 미국 국방부, 정보기관, 연방정부 기관 등이 대표적인 사용자임
     * MariaDB 데이터베이스 제품은 혁신성, 확장성, 안정성으로 잘 알려져 있으며, 트랜잭션, 분석, 혼합 워크로드를 통해 미션 크리티컬한 애플리케이션을 지원함

신임 CEO 선임

     * MariaDB는 Rohit de Souza를 새로운 CEO로 임명함
     * Rohit은 Actian과 Micro Focus에서 글로벌 조직을 이끌며 성장과 변화를 주도한 리더십 경험을 가지고 있음
     * 전임 CEO인 Paul O'Brien은 고문으로 계속 회사에 관여할 예정임

K1의 기대

     * K1의 Sujit Banerjee 전무는 MariaDB를 K1 포트폴리오에 환영하며, Rohit이 회사의 다음 성장 단계를 이끌 것으로 기대함
     * K1과 함께 제품 혁신을 가속화하고 시장의 요구에 부응하는 MariaDB의 사명을 계속 추진해 나갈 계획임

MariaDB의 혁신

     * MariaDB는 MariaDB Server에 벡터 검색 기능과 Kubernetes(K8s) Operator를 출시하는 등 AI와 클라우드 네이티브 트렌드에 부응하는 제품 혁신을 계속하고 있음
     * 이를 통해 기업은 대용량 언어 모델(LLM)과 데이터 분석 도구를 활용하는 고급 추천, 이미지 기반 검색, 직관적인 챗봇 등 AI 기반 애플리케이션을 구축하고, 기업 규모에서 데이터 신뢰성을 보장하면서 확장 가능한 솔루션을 배포할 수 있음

새로운 리더십과 파트너십

     * 신임 CEO Rohit de Souza는 K1의 지원을 받아 MariaDB의 역량을 확장하고 고객이 의존하는 혁신적인 데이터베이스 솔루션을 계속 제공할 수 있을 것으로 전망함
     * 이번 파트너십을 통해 AI와 클라우드 기반 솔루션에 대한 급격히 증가하는 수요를 충족하면서 고비용 대안에서 쉽게 전환할 수 있도록 제품 혁신을 더욱 진전시킬 수 있음
     * 전임 CEO Paul O'Brien은 K1과의 파트너십과 새로운 리더십 하에서 MariaDB의 미래를 확신하며, Rohit의 업무 전환을 지원할 예정임

K1의 최근 거래

     * MariaDB 인수는 K1이 발표한 최근 거래에 이어 이루어짐
     * 이전에는 Board Intelligence에 대한 전략적 성장 투자와 Nemetschek Group(FRA:NEM)에 GoCanvas 매각 등이 있었음
     * 이번 거래는 K1의 세 번째 비상장 기업 인수로, 이전에는 클라우드 기반 인적자원관리 솔루션 선도기업인 Elmo(ASX:ELO)와 온라인 소매업체를 위한 AI 기반 검색 및 머천다이징 솔루션 선도기업인 Attraqt(LON:ATQT) 등이 있었음

딜 어드바이저

     * K1의 재무 자문사는 Lazard Frères & Co. LLC.가, 법률 자문사는 Kirkland & Ellis LLP와 A&L Goodbody LLP가 맡음
     * MariaDB의 법률 자문사는 Baker Botts LLP와 Matheson LLP임

MariaDB 소개

     * MariaDB는 독점 데이터베이스의 제약과 복잡성을 제거하여 조직이 혁신적이고 고객 중심적인 애플리케이션을 신속하게 개발하는 데 집중할 수 있도록 함
     * 기업은 트랜잭션, 분석 또는 하이브리드 사용 사례를 위해 몇 분 만에 배포할 수 있는 단일 완전한 데이터베이스에 의존할 수 있음
     * Deutsche Bank, DBS Bank, Red Hat, ServiceNow, Samsung 등이 신뢰하는 MariaDB는 레거시 데이터베이스 공급업체의 재정적 부담 없이 고객 가치를 제공함
     * 자세한 내용은 mariadb.com 참조

K1 소개

     * K1은 중소기업 엔터프라이즈 소프트웨어 기업에 대한 최대 투자자 중 하나임
     * 캘리포니아주 맨해튼 비치에 본사를 둔 K1은 고성장 소프트웨어 기업의 강력한 경영진과 협력하여 운영 중심의 성장 전략을 활용해 포트폴리오 기업을 신속하게 확장함
     * K1은 설립 이후 240개 이상의 엔터프라이즈 소프트웨어 기업과 협력하며 산업 변혁과 생산성 향상을 주도해 옴
     * K1의 단일 팀, 단일 사무소, 단일 펀드 전략에 기반한 독점적 집중은 많은 포트폴리오 기업의 가치 실현을 이끌어냄
     * 주요 사례로는 Apttus(Thoma Bravo 매각), Buildium(RealPage 매각, NASDAQ: RP), Certent(insightsoftware 매각), Checkmarx(Insight Partners와 Hellman & Friedman 매각), Clarizen(Planview 매각), FMG Suite(Aurora Capital Partners 매각), GoCanvas(Nemetschek Group 매각, FRA: NEM), Granicus(Vista Equity Partners와 Harvest Partners 매각), Inthinc(Orbcomm 매각, NASDAQ: ORBC), Litera(Hg Capital 매각), Rave Mobile Safety(TCV 매각, 현재 Motorola Solutions 소유, NYSE: MSI), TeamDynamix(Level Equity 매각), Unified(현재 iHeartMedia 소유), WorkForce Software(현재 Insight Partners와 Elliott Investment Management 소유), Zapproved(Exterro 매각) 등이 있음
     * 자세한 내용은 k1.com 참조, LinkedIn에서 K1 Investment Management 팔로우

GN⁺의 의견

     * MariaDB의 인수는 엔터프라이즈 데이터베이스 시장에서 독점 기업에 대한 오픈소스 대안의 입지를 강화하는 계기가 될 것임
     * MariaDB는 오랫동안 MySQL의 포크로 시작되어 MySQL의 대안으로 자리 잡아 왔으며, 최근에는 클라우드와 AI 등 새로운 트렌드에 부합하는 기능을 지속적으로 개발하며 차별화를 꾀하고 있음
     * K1의 투자는 MariaDB가 제품 혁신과 고객 확보에 박차를 가하고 장기적인 경쟁력을 확보하는 데 도움이 될 것으로 보임
     * 한편 신임 CEO 선임과 관련해서는 창업자인 Michael ""Monty"" Widenius의 역할 변화에 따른 조직 내 동요 가능성, 오픈소스 정신 계승에 대한 우려 등이 제기될 수 있을 것임
     * 엔터프라이즈 데이터베이스 시장에서는 클라우드 네이티브 데이터베이스인 MongoDB, Couchbase 등이 MariaDB의 경쟁 제품으로 주목받고 있음

   문제는 한국 입지네요. 한국에서는 리눅스의 대명사가 심지어 지원 종료된 CentOS 가 칠옹성급이고 웹 서버 하면 자바, 프레임워크의 대명사 하면 스프링... 인데다가 DB 하면 떠오르는게 두가지 뿐입니다. 오라클이냐, MySQL 이냐죠. 여러분이 물론 제 시야가 너무 좁은거 아니냐고 반박하고 싶겠지만 그나마 KT 아니었으면 PostgreSQL 조차도 파고드려 하지 않았다면 들을 일 없는 DB 일 정도로 편차가 심합니다. 그래도 지금은 그나마 오라클 악명으로 그나마 입지가 잡혔으니 이제 한국에 팔거면 꽤나 공격적인 마케팅을 해야 할 것 같습니다. 예를 들면 O사와 다르다! O사와는!

   MariaDB vs PostgreSQL !!

        Hacker News 의견

     * MariaDB를 비즈니스에서 사용하는 사람들에게 이번 변화가 다음 프로젝트에서 MariaDB를 선택할 가능성에 영향을 미치는지에 대한 질문
          + K1에 대해 잘 모르기 때문에 혼란스러움과 PostgreSQL로 완전히 전환하고 싶은 충동을 느낌
     * Monty가 다음 데이터베이스를 위해 새로운 아이를 필요로 함
          + Michael Widenius에 대한 링크 제공
     * MariaDB PLC와 새로운 CEO의 계획에 대해 듣는 것이 매우 흥미로울 것 같음
          + 그들이 무엇을 다르게 할 것인지, 그 전략이 타당한지 궁금함
     * MariaDB는 MySQL을 이길 필요가 없고, PostgreSQL을 이겨야 함
     * 비즈니스가 힘들 것 같음, 더 많은 웹 개발이 PostgreSQL을 선호하게 되었기 때문임
          + PostgreSQL 지원 비즈니스가 존재하지만, 2000년대 초반 소프트웨어 비즈니스처럼 높은 이익률을 얻을 수 있을지 확신할 수 없음
     * 유일한 질문은 MariaDB가 오픈 소스와 무료로 남을 것인지에 대한 것임
     * 몇 번이나 MySQL을 팔 수 있을지에 대한 농담
     * MariaDB를 PostgreSQL 대신 사용할 이유가 무엇인지에 대한 질문
     * K1이 MariaDB를 Oracle에 팔아넘길 것이라고 예측함

   ""MariaDB는 MySQL을 이길 필요가 없고, PostgreSQL을 이겨야 함""
   동감합니다.
"
"https://news.hada.io/topic?id=16741","Feeld 데이팅 앱의 취약점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Feeld 데이팅 앱의 취약점

        Hacker News 의견

     * 프론트엔드에서만 권한 체크를 구현한 것 같음
          + 백엔드에서 모든 권한을 체크하는 것이 필요함
          + 버퍼 오버플로우 문제 해결처럼 모든 곳에서 경계 체크를 추가해야 함
     * 정확한 개인 데이터를 입력하지 말아야 함
          + 생년월일 같은 정보는 대략적인 값으로 입력할 것
          + 특히 데이팅 앱은 민감한 정보를 요구함
     * 이 앱은 다양한 취향을 가진 사람들을 대상으로 함
          + BDSM, 그룹 섹스, 퀴어 등 다양한 취향을 가진 사람들을 위한 앱임
     * 최근 언론에 많이 등장했음
          + 수익을 많이 올린 것으로 보도됨
          + 관련 기사 링크
     * 범죄적 과실 수준의 실패
          + 앱의 카테고리를 고려할 때 매우 심각한 문제임
     * 온라인 데이팅 시장은 엉망임
          + 유용한 서비스를 제공하는 회사는 2~3개뿐임
          + 오픈 소스 연합 데이팅 서비스가 필요함
     * 보안에 전혀 신경 쓰지 않은 것 같음
          + 게임 개발자인데, 게임의 공정성을 유지하는 데 더 많은 노력을 기울임
          + 이 회사는 사용자 안전을 전혀 고려하지 않음
     * GraphQL의 문제
          + 프론트엔드에서 데이터를 쿼리할 수 있게 함
          + 백엔드에서 쿼리를 이해하고 접근 제어를 구현하는 것이 어려움
          + GraphQL이 이러한 실수를 더 쉽게 만들 수 있음
     * 책임감 있고 동정심 있는 공개
          + 연구자들이 공개를 늦춘 것에 놀람
          + 스타트업들이 개인정보를 남용하지 않도록 2개월 내에 문제를 해결해야 함
"
"https://news.hada.io/topic?id=16790","지옥에서 온 악랄한 운영자 (1999)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         지옥에서 온 악랄한 운영자 (1999)

BOFH의 탄생

     * BOFH(Bastard Operator From Hell)의 탄생을 다룬 이야기
     * Simon Travaglia가 원작자이며, 전자 권리는 DATAMATION 잡지가 소유

BOFH의 초기 이야기

     * BOFH #1부터 #13까지의 이야기
     * 시스템 관리자와 사용자의 갈등을 유머러스하게 다룸

영국에서의 BOFH

     * 영국에서의 BOFH 이야기
     * BOFH #14부터 #15까지 포함

새로운 BOFH 이야기

     * NETWORK WEEK 잡지가 전자 권리를 소유
     * 새로운 BOFH 이야기 시리즈

BOFH의 다양한 에피소드

     * BOFH가 새로운 상사를 만나는 이야기
     * 예산 제약과 관련된 이야기
     * 엔지니어와의 갈등
     * 복수와 관련된 다양한 이야기

BOFH의 특별한 순간들

     * 크리스마스와 같은 특별한 날에 벌어지는 이야기
     * 새로운 해를 맞이하는 이야기

BOFH의 교육

     * PFY(피플 프렌들리 영맨)를 교육하는 이야기
     * 사용자를 돕는 이야기

BOFH의 다양한 활동

     * 무역 박람회에 참석하는 이야기
     * 예산 문제를 해결하는 이야기
     * 새로운 프로젝트를 진행하는 이야기

GN⁺의 정리

     * BOFH는 시스템 관리자와 사용자의 갈등을 유머러스하게 다루는 이야기로, IT 업계에서 큰 인기를 끌고 있음
     * Simon Travaglia의 독특한 유머 감각이 돋보이며, IT 업계 종사자들에게 큰 공감을 얻음
     * 비슷한 기능을 가진 다른 프로젝트로는 ""Dilbert"" 만화 시리즈가 있음
     * IT 업계의 스트레스와 갈등을 유머로 풀어내어, 독자들에게 큰 웃음을 선사함

        Hacker News 의견

     * BOFH는 이제 ISP, 검색 엔진, 소셜 미디어 서비스 등 중요한 시스템의 운영자임
     * ""우리는 사용자에게 무언가를 해주는 것이 아니라, 사용자에게 무언가를 하는 것임""이라는 말이 중요함
     * TN 주의 ""BOFH"" 번호판이 이제 사용 가능함
     * BOFH는 여전히 TheRegister에서 주기적으로 등장함
     * 차에 BOFH 번호판을 달았지만, 직장 외에서는 아무도 그 의미를 이해하지 못했음
     * Simon Travaglia를 1980년대부터 팔로우해왔으며, 그의 Kiwi 문화에 대한 재미있는 견해도 있음
     * 과거에는 컴퓨터 전문가가 드물어서 관리자들이 사용자들 위에 군림할 수 있었음. 인터넷이 이런 사람들을 멸종시켰음
     * BOFH 관련 링크와 SNL 패러디 영상이 있음
     * 대학 시절 BOFH와 실제로 마주친 적이 있음. 네트워크 관련 문제로 인해 BOFH의 사무실로 불려가서 경고를 받았음
     * BOFH Omnibus 세 권을 Kindle 앱에 소장하고 있으며, Simon이 Amazon에서 판매를 중단한 이유는 수수료나 세금 때문일 것임
     * Simon의 웹사이트가 여러 번 업데이트되었지만, 2007년의 pre-El Reg 아카이브를 인터넷 아카이브에서 읽는 것을 선호함
"
"https://news.hada.io/topic?id=16729","Palm OS용 미니골프 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Palm OS용 미니골프 게임

Holy smokes, I just released a MiniGolf game for Palm OS in 2024

  새로운 Palm OS MiniGolf 게임 출시

     * 이번 여름, 새로운 Palm OS 게임을 만드는 프로젝트를 시작했음
     * 두 달도 안 되는 간헐적인 코딩 후, ""Captain's MiniGolf (v0.6)""을 출시하게 되어 기쁨
     * 게임의 주요 특징은 사용자가 직접 레벨을 만들 수 있다는 점임
     * 레벨팩 데이터베이스를 만들어 다른 사용자와 공유 가능

  게임 플레이 방법

     * Palm OS 기기가 없어도, cloudpilot 에뮬레이터 덕분에 브라우저에서 직접 플레이 가능
     * 게임 다운로드 및 브라우저 내 에뮬레이터 제공

  Palm OS 코딩의 어려움

     * C 언어로 코딩하면서 몇 가지 깨달은 점:
          + 현대 프로그래밍 언어에서 제공하는 편의 기능이 없어 실수하기 쉬움
          + 메모리 누수가 자주 발생함
          + 다각형 모양과 궤적 디버깅이 어려워 디버그 빌드가 큰 도움이 됨
     * Palm OS의 문서 부족으로 인해 코딩이 어려움
     * 다음 두 가지 참고 자료를 사용:
          + The Palm OS Programmer Companion (Palm OS SDK의 일부)
          + Palm OS Programming Bible
     * GitHub에 다른 개발자들이 공유한 Palm OS 게임 코드도 참고

  왜 Palm OS인가?

     * Palm OS 기기는 단순함과 우아함으로 많은 일을 해낼 수 있음
     * 이러한 제약 조건이 창의적인 사고와 대안적 해결책을 찾게 만듦
     * 현대의 성능 좋은 휴대폰에서는 코드 최적화에 신경 쓰지 않음

  알려진 버그

     * 공이 벽에 끼일 수 있음
     * 메인 필드 벽 내에 닫힌 다각형 벽이 있는 레벨을 만들면 배경/코스를 올바르게 색칠하지 못함

  개선 사항

     * 레벨 삭제/이동 옵션 추가
     * 레벨팩 삭제 및 공유 옵션 추가 (현재는 FileZ 같은 외부 애플리케이션을 사용해야 함)
     * 해상도가 160x160 (또는 Palm OS 5 고해상도 기기에서는 320x320)으로 고정되어 있음, 화면 크기에 따라 동적으로 변경 필요

  공유는 배려

     * 이 게임의 전체 소스 코드를 GPL3 라이선스로 공개
     * 다른 사람들이 더 많은 Palm OS 게임을 만들 수 있도록 영감을 주거나 도움이 되길 바람
     * Captain's MiniGolf 소스 코드 제공

  GN⁺의 정리

     * 이 글은 Palm OS에 대한 향수를 자극하며, 제한된 자원으로 창의적인 해결책을 찾는 재미를 강조함
     * 현대의 성능 좋은 기기와는 달리, Palm OS의 제약 조건이 개발자에게 도전과 창의성을 요구함
     * Palm OS 게임 개발에 관심 있는 사람들에게 유용한 참고 자료와 소스 코드를 제공함
     * 비슷한 기능을 가진 프로젝트로는 RetroArch와 같은 에뮬레이터 프로젝트를 추천함

        Hacker News 의견

     * ""공이 구멍에 떨어지는"" 애니메이션 추가 제안
          + 공이 구멍에 들어가는 모습을 보면 성취감을 느낄 수 있음
     * 다음 레벨 로딩 전에 짧은 축하 애니메이션 추가 제안
          + ""Loading"" 텍스트가 갑작스러워 잘못한 것 같은 느낌을 줌
          + ""Nice!"" 같은 텍스트를 표시하고, 공이 구멍에 사라지는 모습을 보여줌
          + 로딩 다이얼로그를 짧게 보여주거나 생략 가능
     * 1990년대 Macintosh용 미니어처 골프 게임 개발 경험 공유
          + 35년 된 소스를 복구하고 에뮬레이터용 디스크 이미지 생성 중
          + 첫 번째 흑백 시도는 GitHub에 있음
          + 두 번째 컬러 시도는 Volume 2에 포함 예정
     * Palm OS와 같은 레트로 홈브루 실행 파일의 실용성에 대한 의견
          + 다양한 플랫폼에서 실행 가능하고, 오프라인, 효율적, 방해 요소 없음
          + Apotris 같은 게임은 여러 콘솔과 컴퓨터에서 설치 없이 플레이 가능
          + 단일 실행 파일의 장점: 오랜 시간 후에도 실행 가능
     * Palm IIIxe에 대한 향수
          + 알림이 적고 필요한 기능만 제공
          + iPhone의 알림을 조용히 만드는 데 시간이 걸림
          + Palm은 사용자가 요청하지 않으면 알림을 보내지 않음
          + 돌아가고 싶지는 않지만 일부는 그리움
     * 공이 구멍에 떨어지는 모습을 보여주는 제안
          + 플레이어의 만족감을 높일 수 있음
     * Palm LifeDrive에 대한 향수
          + Blackberries로 변경하면서 잃어버림
          + 당시에는 놀라운 장치였음
     * 게임 개발에서 흔한 문제들에 대한 의견
          + 메모리 누수, 디버깅 등은 흔한 문제
          + Unreal, Unity, Godot 같은 게임 엔진이 많은 문제를 추상화함
          + C, OpenGL, 메모리 제한으로 게임 개발 시 비슷한 문제를 겪을 수 있음
          + 레벨 에디터 구현에 관심
     * 미니어처 골프 게임의 아트 디자인 칭찬
          + 마우스 조작 방향을 반대로 하는 것이 더 자연스러울 것 같음
          + FOSS 게임 팬이라면 Neverball과 Neverput 추천
     * 브라우저 기반 에뮬레이터에서 게임이 재미있다는 의견
          + Android, iOS, 브라우저용 포트 제안
          + 매우 재미있음
"
"https://news.hada.io/topic?id=16677","GitHub 스폰서로 1백만 달러($1M) 수익 달성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GitHub 스폰서로 1백만 달러($1M) 수익 달성

     * GitHub 스폰서로 5년 만에 1백만 달러 수익을 창출함
     * 5년 전 계획 없이 직장을 그만두고, Livewire와 Alpine.js 같은 오픈 소스 프로젝트 개발을 시작함
     * 2년만에 GitHub 스폰서 계정을 만들고 연 10만 달러 수익을 달성함
     * 오픈 소스 프로젝트 개발과 부가 상품 판매로 지속적인 수익 창출함

1백만 달러 수익 내역

     * 5천 달러: ""Buy me a Coffee"" 후원금
     * 5천 달러: 스티커 판매 수익
     * 2만 달러: Sushi 프로젝트 얼리 액세스에 대한 수익
     * 2만 5천 달러: 시간당 컨설팅 수익
     * 2만 달러: Alpine 컨퍼런스 수익(실제 이익은 없었음)
     * 20만 달러: 웹사이트에 올린 여러 회사들의 로고에 따른 광고 수익 (Fly.io 덕분)
     * 72만 5천 달러: Livewire 프리미엄 스크린캐스트 수익

지속가능한 오픈 소스를 위한 전략

     ""사람들이 좋아하는 코드를 많이 작성한 다음 그 코드로 무언가를 만드는 모습을 스크린캐스트에 올려서 판매하세요. 또한 글을 많이 쓰고, 말하고, 녹화하세요.""

    구매할 만한 것을 제공하라

     * 사람들은 당신을 지원하고 싶어 하지만, 그 이상의 이유가 필요함
     * 당신의 코스, 스크린캐스트, 스티커 등 구매할만한 것을 제공해야 함

    교육 콘텐츠 제작으로 시작하라

     * 본인이 직접 개발한 소프트웨어 사용법을 가르치는 것이 가장 쉬움
     * 녹화 편집이 어려워도 간단하게 시작할 수 있음
     * 문서 사이트에 동영상을 올리고, 다른 문서 페이지에서 동영상에 링크
     * 10~20개의 동영상을 무료로 제공
     * GitHub로 로그인하도록 하고 나머지는 스폰서가 되어야 보이게
     * 여전히 이 전략으로 대부분의 수익을 창출하고 있으며, 내 얼굴을 보이거나 화려한 편집이나 그래픽을 거의 사용하지 않음
     * 최선을 다해 콘텐츠를 만들고, 사람들이 궁극적으로 중요하게 생각하는 것은 콘텐츠임

    문서는 가장 가치 있는 자산

     * 문서는 가장 가치 있는 자산임을 강조
     * 다른 인디 해킹 비즈니스와 달리 개발자들이 매일 방문하고 많은 시간을 보내는 웹사이트를 가지고 있음
     * 웹사이트 방문자들과 직접 소통하고 관심을 끌 수 있는 기회
     * 새로운 이벤트 배너, 뉴스레터 구독, 사이드 프로젝트 코스 광고 등 다양한 방식으로 수익화 가능
     * 다만 지나치게 광고를 넣지 말고 깔끔하고 정직하게 유지해야 함
     * GPT, Arc 등 AI 기술로 인해 문서 사이트 트래픽이 감소할 수 있으므로 서둘러 대비해야 함

    이메일 리스트는 두 번째로 가치 있는 자산

     * 이메일 주소를 받는 대가로 무료 콘텐츠를 제공
     * 가끔 멋진 아이디어와 생각을 담아 이메일을 보낼 것
     * 독자의 시간을 존중하고 최고의 콘텐츠를 전달할 것
     * 이메일에 회신하는 모든 사람에게 일일이 답장하기
     * 격식 없는 어투로 이메일을 작성할 것
     * 진실성 있는 어투가 독자들에게 어필되고 작성하기도 쉬움
     * 지나치게 세련된 문체는 오히려 지속하기 어려움
     * 판매할 제품이 있다면 사전 예고 이메일을 보낸 후 론칭
     * 거대한 트위터 팔로잉보다 이메일 리스트가 훨씬 더 가치 있음

    진실된 모습을 보여주라

     * 당신 자신의 모습 그대로를 보여주면서 사람들과 소통할 것
     * 오랜 기간 함께할 수 있는 진실된 친구를 만들 수 있음

    관계가 모든 것

     * 프로그래밍 능력, 마케팅 능력, 감각 등도 성공에 필요하지만 가장 중요한 건 관계
     * 나는 스피커와 참가자로서 컨퍼런스에 참석하고 사람들을 직접 만나기 위해 여행함
     * 사람들과 전화로 몇 시간씩 대화하고 작은 사업도 같이 시작함
     * 트위터에서 셀 수 없이 많은 시간을 보내고 줌에서도 많은 시간을 보냄
     * 이런 활동들이 쌓여 언제든 조언을 구할 수 있는 사람들의 거대한 집단을 형성
     * 나를 응원하고 내가 하는 일을 널리 알리며 기회를 제공하는 커뮤니티 형성
     * 이것이 바로 모든 것이며 관계가 가장 중요함
     * 관계를 만들고 유지하는 것에 집중할 것

    플랫폼 위험 분산 필요

     * GitHub의 급작스런 결제 정책 변경(Paypal 중단)으로 월 4천 달러 수익 감소 경험
     * 플랫폼 의존도가 높으면 위험하므로 결제 플랫폼 다각화 필요
     * 여전히 GitHub 스폰서를 사용하고 좋아하지만, Stripe, Paddle, Gumroad, Lemon Squeezy 등 다양한 결제 프로세서를 사용하기 시작함
     * GitHub의 가장 큰 장점은 개발자를 위한 결제 수수료 면제 정책이며, 세금 문제 처리도 다른 플랫폼에 비해 훨씬 수월함

    경쟁자는 어디에나 있음

     * 오픈 소스 게임에서 가장 어려운 부분은 ""사람들에게 무언가를 판매하는 것""
     * 거대한 오픈 소스 프로젝트를 구축하고 유지하는 것 외에도 사람들이 구매할 만한 것을 만들어야 하기 때문에 어려움
     * 이로 인해 시장에서의 경쟁이 매우 치열해짐
     * 아이디어를 가로채고, 속이고, 코드를 래핑하는 등 경쟁자들의 행태가 다양함
     * 대부분의 경우 이런 프로젝트들은 별다른 성과를 내지 못하기에 크게 문제되지 않음
     * 그러나 때로는 불행하게도 그렇지 않은 경우도 있음

    경쟁에 대해 스트레스 받지 마라

     * 많은 사람들은 이렇게 생각하지 않지만, 나는 경쟁심이 강한 편
     * 내가 코스를 만들고 있는데 누군가 더 빨리 같은 것을 만들면 스트레스를 받곤 했음
     * 이는 잘못된 생각이며, 내 인생을 근본적으로 더 낫게 만든 중요한 교훈은 다음과 같음
     * 사람들이 여러 밴드의 음악을 듣는 것처럼, 여러 코스를 구매하고 여러 교육자의 강의를 볼 것임
     * 교육에 있어서는 경쟁자가 많을수록 오히려 좋음
     * 경쟁자들이 늘어날수록 프로젝트에 대해 알리는 사람들이 더 많아짐
     * 이는 매번 좋은 결과로 이어짐

    코드 경쟁은 스트레스 받아야 함

     * 교육 콘텐츠 경쟁은 좋지만, 코드 경쟁은 그렇지 않음
     * 사람들은 일반적으로 하나의 프레임워크를 사용하는 경향이 있음
     * 누군가 당신의 프레임워크를 얇은 API 층으로 감싸면, 프로젝트에서 관심과 지적 재산을 빼앗아 갈 수 있음
     * 정말 짜증 나는 일이지만, MIT 라이선스로 공개한 레포지토리에 많은 작업을 투자한 당신이 바보인 셈
     * MIT 라이선스는 코드를 가져다가 자신의 것이라고 부르거나, 판매하는 등 원하는 대로 할 수 있다고 명시하고 있음
     * 이는 오픈 소스에서 가장 사기를 떨어뜨리는 부분
     * 당신과 다른 사람들이 흥분하는 프로젝트를 만들고, 수년간 기능을 추가하고 버그를 수정하는 여정을 시작했는데, 누군가 와서 당신의 어깨 위에 서서 당신에게 해를 끼치는 상황
     * 더 나쁜 것은, 그들이 당신의 레포에 이슈를 제기하여 자신들의 프로젝트를 개선하라고 요구하는 것
     * 이러한 상황은 선택권과 노출도를 빼앗아 가고, 수익을 감소시켜 결국 일상적인 업무로 되돌아가게 만들어 프로젝트를 서서히 죽음으로 이끌 수 있음
     * 9-5 개발자일 때는 이런 생각을 해본 적 없었지만, 메인테이너가 되고 나서 뼈저리게 느낌
     * 다행히 Fair-code 이니셔티브 같은 새로운 길을 모색하는 사람들이 있음

    주기적인 메이저 버전 출시

     * 당신의 소프트웨어에 만족하고 그것을 아름다운 것으로 여길 수 있지만, 새로운 주요 버전을 의식적으로 출시하지 않으면 프로젝트가 진부해질 것임
     * 2년이 지나도 문서 사이트 디자인을 변경하거나, 괜찮은 기능을 추가하고, 새로운 vX.0을 붙이지 않는다면 잘못하고 있는 것
     * 대부분의 개발자(나 포함)는 새롭고 반짝이는 것을 좋아함
     * 가장 최신의 것이 가장 좋게 느껴짐
     * 근본적인 변화가 아니더라도 새로운 느낌을 주도록 유지하라
     * 새 버전을 태그하고, 랜딩 페이지를 재설계하고, 화염 🔥, 로켓 🚀, 타다 🎉 이모지와 함께 트윗을 날리면 됨 (반짝이는 이모지도 잊지 말 것)

    GitHub 이슈 트래킹 끄기

     * 아무도 말해주지 않는 중요한 교훈: GitHub 이슈 트래킹을 끌것. 그것은 고장 난 모델임
     * 인터넷 전역에서 무작위로 사람들이 당신의 관심을 요구하고, 그들이 만족할 때까지 인질로 잡고 있는 이상함
     * 우선순위가 아니거나 재현하기 어려운 버그라는 이유로 이슈를 닫으면 사람들은 공격으로 받아들일 것임
     * 대신 GitHub 토론 기능을 사용 할 것
     * 내 철학은 이러함:
          + 커뮤니티가 발견한 버그 등에 대해 서로 이야기하게 할 것
          + 그리고 충분히 정리되면, 유능한 커뮤니티 구성원이 Pull Request를 제출할 수 있고, 그때 내 관심과 시간을 투자
     * 누군가 문제를 충분히 고민하고, 쉽게 재현할 수 있는 환경에서 재현하고, 가능하면 실패하는 테스트를 추가했을 때에만 내 시간을 투자함
     * 이렇게 하면 프로젝트를 잘 유지하면서 커뮤니티와 소통하고, 프로젝트를 신선하게 유지하거나 자금을 지원받기 위한 다른 작업을 할 수 있음
     * 이 영역에서 나보다 훨씬 뛰어난 메인테이너들이 분명 있을 것
          + 그들은 하루 종일 디스코드에 매달려 이슈 받은 편지함을 비울 것이고, 잘 하는 사람들이지만, 난 그렇지 않음
          + 나는 아내와 두 아이가 있고, 끊임없이 이슈를 처리하는 것 외에도 레포에서 해야 할 일이 산더미임
     * 디스코드? 커뮤니티와 더 정기적으로 소통하고 싶지만, 그것은 내 집중력을 심하게 빼앗아 감. 딥 워크를 할 수 없게 만듦
     * 대신 트위터에 글을 올리고, 이메일에 응답하고, 팟캐스트를 많이 함
          + 사람들은 여전히 나와 연결되어 있다고 느끼지만, 내가 시간이 있을 때 ""옵트인""할 수 있는 방식임

    오픈 소스 이후의 삶을 계획하라

     * 이 부분에 대해서는 경험이 없지만, 점점 생각하기 시작하고 있음
     * 오픈 소스에서의 성공은 순간적인 것임. 지금은 당신의 라이브러리가 인기 있지만, 내일은 그렇지 않을 가능성이 큼
     * 물론 하룻밤 사이에 모든 것이 증발하지는 않을 것임. Lindy 효과를 기억하는 것이 좋음
     * 그럼에도 불구하고, 앞서 불평했던 모든 이유로 오픈 소스 수익화는 특히 어려움
     * 이상적으로는, 더 지속 가능한 비즈니스를 구축하기 시작해야 함
     * 언젠가 모든 사람이 구축할 SaaS 같은 것 말이죠. 나도 그런 희망을 갖고 있죠...

    오픈 소스의 장점을 누려라

     * GitHub와 다른 회사에서 무작위로 멋진 기념품을 보내줄 것임
     * 컨퍼런스에서 어색하게 혼자 앉아있는 대신 사람들이 당신과 이야기하고 싶어할 것임
     * 당신의 영웅들이 당신을 알아볼 것이고, 심지어 그들과 친구가 될 수도 있음

     하지만 ""당신은 진짜 직업이 없습니다."" 그것을 즐기세요. 산책을 하고, 캠핑을 가고, 그냥 어딘가로 사라져서 아무에게도 말하지 마세요
     그리고 무엇보다 중요한 것은
     당신은 하루 종일 코딩을 하면서 돈을 벌 수 있습니다. 신선하고, 뜨겁고, 김이 나는 독특한 프로그래밍 문제를 행복하게 씹어 먹을 수 있습니다.
     이것이 내가 이 일을 하는 이유입니다. 그것이 전부입니다. 그 실마리를 잡아당기고 그것이 나를 어디로 데려갈지 보는 것. 깊은 문제의 번개를 타는 것. 그것이 전부입니다. 그것은 세상에서 내가 가장 좋아하는 것입니다.
     당연한 것으로 여기지 마세요. 당신이 계산대에 서 있거나 출퇴근을 하고 있는 게 아니라는 것을 잊지 마세요. 당신은 할 수 있는 가장 재미난 일을 하고 있고, 그것이 당신의 직업입니다.

   시사하는 바가 많네요

   ??? : php 그거 완전 옛날 기술 아니예요?

   Livewire 와 alpine.js 라니 굵직하네요...ㅎㅎ

   커서 깃허버가 되고 싶어요

   (한국에서는 대충 시도하지 마세요)
   (대충 거지꼴을 못면한다 짤)

   대단하네요

   GitHub Sponsors 로 1.2억원을 벌은 방법

   4년전에 이 글을 여기에 공유했었는데, 10배로 불어났네요. 여러모로 대단합니다.
"
"https://news.hada.io/topic?id=16734","OpenAI, GPT o1 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI, GPT o1 모델 공개
"
"https://news.hada.io/topic?id=16726","GitClear - 더 나은 코드리뷰를 위한 새로운 Diff","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GitClear - 더 나은 코드리뷰를 위한 새로운 Diff

     * (GitHub 과 다르게) 몰라도 되는 변경사항을 숨겨서, 코드 리뷰의 부하를 줄임
          + 예를 들어, 이름이 변경된 파일이나 코드 뭉치가 위 또는 아래로 이동한 경우엔 똑똑하게 숨겨줌
     * 이를 통해 평균적으로 약 28%의 changed lines (변경된 라인)를 줄임
     * 그 밖의 다양한 기능이 있지만, 중요한 것은 코드 리뷰에 들이는 시간을 획기적으로 감축했다는 것임.
     * 비슷한 (오픈소스) 제품으로는 difftastic 이 있음

   주1. 글 내용에서 How It Works 부분만 가져왔습니다.

   주2. 홈페이지는 따로 있지만, 이 소개글이 제품을 알기 쉽게 요약해준다고 생각하여 이쪽 링크를 가져왔습니다. 홈페이지는 https://www.gitclear.com/ 입니다.

   주3. 유료 제품입니다.

   와 제품이 잘되서 깃헙도 적용해줬으면 ㅎㅎㅎ

   trailing comma, 함수 위치 변경 등 깨진 유리창을 바로 치우는 선의가 리뷰를 어렵게 만드는데, 정말 깔끔해 지는 거 같아요.

   링크 오류가 있네요: https://thenewstack.io/one-company-rethinks-diff-to-cut-code-review-ti…

   엇 알려 주셔서 감사합니다. xguru님 이거 수정해 주실 수 있나요?
"
"https://news.hada.io/topic?id=16716","Chai-1: 생명 분자 상호작용 해독","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Chai-1: 생명 분자 상호작용 해독

    Chai-1 소개: 생명 분자의 상호작용 해독

     * Chai-1 출시
          + Chai-1은 약물 발견에 관련된 다양한 작업에서 최첨단 성능을 발휘하는 새로운 다중 모드 기반 모델임
          + 단백질, 소분자, DNA, RNA, 공유 결합 수정 등을 통합 예측 가능
          + 웹 인터페이스를 통해 무료로 제공되며, 상업적 용도로도 사용 가능
          + 비상업적 용도로는 모델 가중치와 추론 코드를 소프트웨어 라이브러리로 제공

    생체 분자 상호작용을 위한 최첨단 모델

     * 성능 평가
          + PoseBusters 벤치마크에서 77% 성공률 달성 (AlphaFold3는 76%)
          + CASP15 단백질 단량체 구조 예측 세트에서 Cα LDDT 0.849 달성 (ESM3-98B는 0.801)
          + 다중 서열 정렬(MSA)을 필요로 하지 않으며, 단일 서열 모드에서도 높은 성능 유지
          + 다중체 구조 예측에서 AlphaFold-Multimer 모델보다 더 정확한 예측률 (69.8% vs. 67.7%)
          + 단일 서열만으로 AlphaFold-Multimer 수준의 품질로 다중체 구조 예측 가능

    네이티브 다중 모드 기반 모델

     * 추가 데이터 활용
          + 실험실에서 유래한 제한 조건 등 새로운 데이터로 성능 향상 가능
          + 항체-항원 구조 예측 정확도를 두 배로 높이는 에피토프 조건화 등 다양한 기능 탐구

    모델 공개

     * 무료 웹 인터페이스 제공
          + 상업적 용도로도 사용 가능
          + 비상업적 용도로는 소프트웨어 라이브러리로 코드 공개
          + 연구 및 산업 커뮤니티와의 협력을 통해 생태계 전체에 이익 제공

    다음 단계

     * 팀 배경
          + OpenAI, Meta FAIR, Stripe, Google X 등 선도적인 연구 및 응용 AI 회사 출신
          + AI를 활용한 생물학 연구의 발전에 중요한 역할 수행
          + Chai-1은 몇 달간의 집중 작업의 결과이며, 이제 시작 단계
          + 생물학을 과학에서 공학으로 변환하는 것이 목표
          + 생화학 분자 간의 상호작용을 예측하고 재프로그래밍하는 AI 기반 모델 추가 개발 예정

    GN⁺의 정리

     * Chai-1은 약물 발견과 생명 과학 연구에 중요한 도구로, 단백질, 소분자, DNA, RNA 등의 구조 예측에서 최첨단 성능을 발휘함
     * 다중 서열 정렬 없이도 높은 성능을 유지하며, 다중체 구조 예측에서도 우수한 성능을 보임
     * 연구 및 산업 커뮤니티와의 협력을 통해 생태계 전체에 이익을 제공하며, 무료로 사용할 수 있는 웹 인터페이스와 비상업적 용도의 소프트웨어 라이브러리를 제공함
     * 생물학을 공학으로 변환하는 것을 목표로, 생화학 분자 간의 상호작용을 예측하고 재프로그래밍하는 AI 모델을 추가로 개발할 예정임

        Hacker News 의견

     * Reflection 사건 이후 독립적인 테스트에 대한 열정이 생겼음
     * SOTA 평가를 그대로 받아들이지 않기를 바람
     * Chai가 pytorch3d에서 쿼터니언 함수를 복사해 사용한 것을 발견함
     * 단백질 구조 지식이 약물 개발의 제한 요소가 아님
          + 결과가 약물 개발 파이프라인에 미치는 영향을 추정하는 것이 흥미로움
     * **""foundation""**과 ""multi-modal"" 용어가 논문 초록에만 등장함
          + AlphaFold 방법을 복사하고 언어 임베딩과 기타 제약 조건을 추가함
          + 성능 향상 데이터가 부족함
     * 오차 범위가 매우 큼
     * 공개 위험성이 있음
          + 새로운 생물 무기 개발에 악용될 수 있음
     * 바이오해커가 새로운 단백질을 개발하는 것이 얼마나 어려운지 궁금함
     * HN 제목이 부정확함
          + 1% 높은 점수가 이전 모델을 이긴 것은 아님
     * 베팅 라인이 있다면 조기 은퇴 가능함
     * AutoDock Vina의 저자임
          + 도킹 소프트웨어는 새로운 결합체를 찾기 위해 일반화가 필요함
          + 평가 접근 방식이 새로운 분자에 대한 성능을 테스트하지 않음
          + Chai-1의 출시가 방법 평가에 도움이 될 것임
"
"https://news.hada.io/topic?id=16779","Rust로 운영 체제 작성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Rust로 운영 체제 작성

     * 이 저장소는 os.phil-opp.com에서 제공하는 Writing an OS in Rust 시리즈의 소스 코드를 포함함
     * 질문이 있으면 이슈를 열거나 Gitter에서 채팅 가능

  코드 위치

     * 각 포스트의 코드는 별도의 git 브랜치에 있음
     * 각 포스트 후의 중간 상태를 확인할 수 있음
     * 최신 포스트의 코드는 여기에서 확인 가능
     * 포스트 목록에서 (source code) 링크를 따라가면 각 포스트의 브랜치를 찾을 수 있음
     * 브랜치는 post-XX 형식으로 명명됨 (XX는 포스트 번호)
     * 예: VGA Text Mode 포스트는 post-03, Hardware Interrupts 포스트는 post-07
     * 빌드 지침은 해당 브랜치의 Readme 참조
     * git worktree를 사용하여 서브디렉토리에 브랜치를 체크아웃 가능
git worktree add code post-10

     * 위 명령어는 code라는 서브디렉토리를 생성하고 10번째 포스트(""Heap Allocation"")의 코드를 포함함

  포스트

     * 이 프로젝트의 목표는 개별 블로그 포스트에서 단계별 튜토리얼을 제공하는 것
     * 현재 다음과 같은 포스트가 있음

   Bare Bones:
     * A Freestanding Rust Binary (source code)
     * A Minimal Rust Kernel (source code)
     * VGA Text Mode (source code)
     * Testing (source code)

   Interrupts:
     * CPU Exceptions (source code)
     * Double Faults (source code)
     * Hardware Interrupts (source code)

   Memory Management:
     * Introduction to Paging (source code)
     * Paging Implementation (source code)
     * Heap Allocation (source code)
     * Allocator Designs (source code)

   Multitasking:
     * Async/Await (source code)

  첫 번째 에디션 포스트

     * 현재 블로그 버전은 두 번째 에디션이며, 첫 번째 에디션은 더 이상 유지되지 않음
     * 첫 번째 에디션의 포스트는 여전히 유용할 수 있음
     * 포스트 목록은 다음과 같음

   Bare Bones:
     * A Minimal x86 Kernel (source code)
     * Entering Long Mode (source code)
     * Set Up Rust (source code)
     * Printing to Screen (source code)

   Memory Management:
     * Allocating Frames (source code)
     * Page Tables (source code)
     * Remap the Kernel (source code)
     * Kernel Heap (source code)

   Exceptions:
     * Handling Exceptions (source code)
     * Double Faults (source code)

   Additional Resources:
     * Cross Compile Binutils
     * Cross Compile libcore
     * Set Up GDB
     * Handling Exceptions using Naked Functions
     * Catching Exceptions (source code)
     * Better Exception Messages (source code)
     * Returning from Exceptions (source code)

  라이선스

     * 이 프로젝트는 blog/content 폴더를 제외하고 다음 중 하나로 라이선스됨
          + Apache License, Version 2.0 (LICENSE-APACHE)
          + MIT license (LICENSE-MIT)
     * blog/content 폴더의 라이선스는 blog/content/README.md 참조

    기여

     * 명시적으로 달리 언급하지 않는 한, Apache-2.0 라이선스에 정의된 대로 의도적으로 제출된 모든 기여는 위와 같이 이중 라이선스로 포함됨

GN⁺의 정리

     * 이 프로젝트는 Rust로 운영체제를 작성하는 방법을 단계별로 설명하는 튜토리얼을 제공함
     * 각 포스트는 독립적인 주제를 다루며, 코드 예제와 함께 설명됨
     * 운영체제 개발에 관심 있는 사람들에게 매우 유용한 자료임
     * Rust의 안전성과 성능을 활용하여 운영체제를 개발하는 방법을 배울 수 있음
     * 비슷한 기능을 가진 다른 프로젝트로는 Redox OS가 있음

        Hacker News 의견

     * 몇 년 전에 두 번째 에디션을 완료하고 많은 것을 배움
          + OS 개발에 관한 설명이 좋았고 Rust 학습에도 유용했음
          + 저자가 언어의 관용구를 잘 이해하고 있어 코드 표현 방식이 교육적이었음
          + 블로그의 Rust에서 futures 구현 설명이 특히 인상적이었음
          + Phil이 EFI 기반의 세 번째 에디션 작업을 다시 시작하길 바람
          + 두 번째 에디션은 주말 개발 시간을 보내기에 여전히 훌륭한 방법임
     * 5년 전 튜토리얼을 완료한 후 MOROS 작업을 시작했음
          + Rust와 OS 개발에 관심 있는 사람들에게 강력히 추천함
          + Phil이 많은 노력을 기울였고, 그 결과가 잘 드러남
          + 이후에는 osdev 위키를 통해 계속 학습할 수 있음
     * Rust로 OS를 작성하는 대신 DML/DDL을 실행할 수 있는 데이터 플랫폼을 만들어야 함
     * Rust와 OS 개발에 대해 깊이 탐구한 후 이 자료를 발견했음
          + 이 자료의 품질에 감탄했으며, OS의 역사와 설계뿐만 아니라 Rust의 요소도 배울 수 있었음
          + Phil이 훌륭한 작업을 수행했음
     * 이 자료 덕분에 2021년에 Rust를 시작하게 되었음
          + 이 자료가 존재하는 것에 매우 감사함
     * Phil의 OS 개발에 관한 글은 항상 훌륭한 읽을거리임
     * Harvey OS 팀은 이제 R9OS 프로젝트에서 작업 중임
          + https://github.com/r9os/r9
     * 원래 에디션의 게시물을 특히 추천함
          + 현재 에디션은 부트로딩 과정을 특수한 crate로 처리하여 너무 많은 도움을 줌
     * Rustconf에서 돌아왔는데, 실시간 운영체제에 중점을 둔 주요 OS 릴리스가 약 다섯 개 정도 있음
          + 모두 오픈 소스는 아님
     * 또 다른 좋은 자료는 Rust를 사용하여 RISC-V OS를 만드는 것임
          + https://osblog.stephenmarz.com
"
"https://news.hada.io/topic?id=16735","OpenAI, 더 많이 생각하고 대답하는 o1 모델 프리뷰 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  OpenAI, 더 많이 생각하고 대답하는 o1 모델 프리뷰 공개

     * 복잡한 문제를 해결하기 위한 새로운 추론 모델
     * 모델이 응답하기 전에 문제를 더 오래 생각하도록 훈련됨
     * 훈련을 통해 사고 과정을 개선하고, 다양한 전략을 시도하며, 실수를 인식하는 법을 배움
     * 물리학, 화학, 생물학의 도전적인 벤치마크 작업에서 박사과정 학생과 유사한 성능을 보임
     * 수학과 코딩에서도 뛰어난 성적을 보임
          + 국제수학올림피아드(IMO) 예선 시험에서 GPT-4o는 13%만 맞춘 반면, 추론 모델은 83%를 맞춤
          + Codeforces 대회에서 코딩 능력이 89백분위수에 도달

안전성

     * 새로운 안전 교육 접근 방식을 고안하여 모델이 안전 및 정렬 지침을 준수하도록 함
     * 가장 어려운 탈옥 테스트 중 하나에서 GPT-4o는 22점(100점 만점)을 받은 반면, o1-preview 모델은 84점을 받음
     * 안전 작업, 내부 거버넌스, 연방 정부 협력을 강화함
          + Preparedness Framework를 사용한 엄격한 테스트 및 평가
          + 최고 수준의 레드 팀 운영
          + Safety & Security Committee를 포함한 이사회 수준의 검토 프로세스
     * 미국 및 영국 AI 안전 연구소와 협약을 체결하고 운영을 시작함

누구를 위한 모델인가

     * 과학, 코딩, 수학 등의 분야에서 복잡한 문제를 다루는 경우 특히 유용할 수 있음
     * 예를 들어
          + 헬스케어 연구원은 세포 시퀀싱 데이터에 주석을 달고,
          + 물리학자는 양자 광학에 필요한 복잡한 수학 공식을 생성하고,
          + 개발자는 다단계 워크플로를 구축하고 실행하는 데 사용할 수 있음

OpenAI o1-mini

     * o1 시리즈는 복잡한 코드를 정확하게 생성하고 디버깅하는 데 뛰어남
     * 개발자에게 보다 효율적인 솔루션을 제공하기 위해 o1-mini라는 더 빠르고 저렴한 추론 모델도 출시함
     * o1-mini는 o1-preview보다 80% 저렴
          + 추론은 필요하지만 광범위한 세계 지식은 필요하지 않은 애플리케이션에 강력하고 비용 효율적인 모델

OpenAI o1 사용 방법

     * ChatGPT Plus 및 Team 사용자는 오늘부터 ChatGPT에서 o1 모델에 액세스할 수 있음
     * o1-preview와 o1-mini 모두 수동으로 선택할 수 있음
     * 출시 시 o1-preview는 주당 30개, o1-mini는 주당 50개의 메시지 제한이 있음
     * ChatGPT Enterprise 및 Edu 사용자는 다음 주부터 두 모델에 액세스할 수 있음
     * API 사용 등급 5에 해당하는 개발자는 오늘부터 20 RPM의 속도 제한으로 API에서 두 모델로 프로토타이핑을 시작할 수 있음
     * 이 모델들의 API에는 현재 함수 호출, 스트리밍, 시스템 메시지 지원 등의 기능이 포함되어 있지 않음
     * o1-mini 액세스를 모든 ChatGPT Free 사용자에게 제공할 계획임

향후 계획

     * 이것은 ChatGPT 및 API를 위한 추론 모델의 초기 프리뷰임
     * 모델 업데이트 외에도 브라우징, 파일 및 이미지 업로드 등의 기능을 추가하여 모든 사람에게 더 유용하게 만들 계획
     * 새로운 OpenAI o1 시리즈와 함께 GPT 시리즈의 모델 개발 및 출시를 계속할 계획임

   github copilot과 시너지가 궁금하네요.

   이게 그 소문의 스트로베리인가요?

   맞아요. Altman이 그 루머 퍼뜨린 사람 위로했어요.

   맞을겁니다. 그냥 추론에 집중하기 위해서 새 버전 번호로 1을 선택했다고 하는거 같아요.
"
"https://news.hada.io/topic?id=16707","독일에서 또 다른 경찰 급습","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            독일에서 또 다른 경찰 급습

     * 독일 경찰의 압수수색
          + 2024년 8월 16일, 독일 경찰이 Artikel 5 e.V.의 등록된 주소지에서 두 번째 압수수색을 진행함
          + 첫 번째 압수수색은 2017년에 있었음
          + 경찰은 토르 사용자들의 익명성을 해제하려는 목적으로 NGO를 괴롭히는 것으로 보임
     * 압수수색의 결과
          + 다행히도 이번에도 하드웨어는 압수되지 않음
          + 소각된 중계 노드와 출구 노드에 대한 청구서만 남김
          + 팀은 한 시간 반 후에 거의 빈손으로 떠남
          + Artikel 5 e.V.는 이번 압수수색 영장을 법적으로 도전할 계획임
     * 개인 주소 제공 중단
          + 개인 주소와 사무실 공간을 등록된 주소로 제공하는 것을 중단할 것임
          + 출구 노드를 운영하는 동안 추가 압수수색의 위험을 감수할 수 없다고 판단함
     * 총회 소집
          + 2024년 9월 21일에 총회를 소집할 예정임
          + 새로운 이사회를 찾고 등록된 주소를 관리할 사람을 찾고 있음
          + 출구 노드 운영 중단이나 조직 해산 등의 대안도 논의할 예정임
          + 총회 시간과 장소는 https://artikel5ev.de/ 에서 확인 가능함
          + 스트림은 회원과 관심 있는 사람들을 위해 제공될 예정이며, 독일어로 진행됨
     * 참석 안내
          + 참석할 계획이 있는 경우, 사전에 이메일을 보내주면 적절한 방을 준비할 수 있음

GN⁺의 정리

     * Artikel 5 e.V.는 독일 경찰의 압수수색으로 인해 큰 압박을 받고 있음
     * 출구 노드 운영의 위험성 때문에 개인 주소 제공을 중단할 계획임
     * 총회를 통해 새로운 이사회를 구성하거나 조직 해산 등의 대안을 논의할 예정임
     * 이 사건은 토르 네트워크와 같은 익명성 보장 기술의 운영에 대한 법적, 사회적 도전 과제를 보여줌
     * 비슷한 기능을 가진 프로젝트로는 Tor Project와 I2P 등이 있음

   neo 님 안녕하세요 혹시 aiden님 이신가요? 아니면 갓우재님인가요?

        Hacker News 의견

     * 법 집행 기관의 괴롭힘 때문에 Tor exit 노드를 운영하는 것을 중단하게 됨
          + DigitalOcean에서 5년 동안 몇 개의 exit 노드를 운영했음
          + 그 기간 동안 세 번의 소환장을 받았음
               o 첫 번째는 대학에 폭탄 위협 이메일을 보낸 사건
               o 두 번째는 피싱 이메일을 보낸 사건
               o 세 번째는 카타르 해커들이 이메일 계정을 해킹한 사건
          + Tor Project와 EFF의 도움으로 법적 문제를 해결했지만, 결국 계정 정보를 DOJ에 제공해야 했음
          + 법적 문제와 스트레스로 인해 exit 노드를 중단하게 됨
          + 악성 IP와 c2/멀웨어 인프라를 차단했지만 여전히 표적이 됨
          + 법 집행 기관이 Tor exit 운영자들을 겁주어 중단시키려는 전략을 사용한다고 생각함
          + 언젠가 다시 exit 노드를 운영하고 싶음
     * 독일 법 집행 기관이 노드 운영자 NGO를 괴롭히는 이유는 Tor 사용자를 익명화하려는 것이 아님
          + 개인 주소와 사무실 공간을 NGO의 등록 주소로 제공하지 않겠다는 의견
          + 이는 전형적인 위축 효과의 예임
     * Tor exit 노드를 운영하는 것은 법적으로 어려움
          + Tor는 불법 활동에 많이 사용됨
          + 정부가 Tor에서 불법 자료를 다운로드하면 exit 노드를 마지막 단계로 볼 수 있음
          + 독일은 Tor 노드 운영자에게 공통 운송자 특권을 제공할 가능성이 있음
          + 미국에서는 통신사가 불법 활동을 용이하게 한 것에 대해 소송을 당하지 않음
          + 법 집행 기관이 요청할 경우 범죄자를 찾는 데 협조해야 함
     * 해결책 제안: 정부가 금지된 주소 목록을 공개하고, 해당 주소를 차단하면 Tor exit 노드를 안전하게 운영할 수 있음
          + 이상적이지는 않지만 많은 사람들이 exit 노드를 운영할 수 있게 할 수 있음
          + ""폭탄 위협 이메일"" 사건은 해결되지 않음
     * Tor는 훌륭한 법적 카나리아이자 유용한 프라이버시 서비스였지만, 조직화의 대체물임
          + Tor를 사용하는 사람들은 이미 상황을 알고 있음
          + 20년 동안 onion routing은 아무도 구하지 못했음
          + Tor가 허용한 악은 종종 그것을 관리하고 용인하는 국가와 기관으로 거슬러 올라감
          + 프라이버시를 원한다면 기술은 열등한 해결책임
          + 프라이버시를 보호하는 국가를 만들어야 함
     * Tor exit 노드를 운영하는 것은 사회적으로 어려운 선택임
          + 많은 피해가 집중되지만, 이는 좋은 점임
          + 필요할 경우 Tor exit 노드를 차단할 수 있음
          + 이중 사용 기술의 경우, 반대 논쟁은 조사도 TOR을 통해 이루어질 수 있다는 것임
          + 라우팅이 국가 통제 밖에 있어 전형적인 제거 메커니즘이 작동하지 않음
          + exit 노드는 연결의 중간 노드로 가는 데 도움이 되지 않음
          + 다른 조사 전략을 선택하는 것이 더 유익할 수 있음
     * BYU에서 연구실 워크스테이션으로 Tor exit 노드를 운영한 사람을 알고 있음
          + 보수적인 종교 학교로 포르노에 대한 극도의 공포를 가짐
          + 대학원 지도 교수와 ""특별 인터뷰""를 하게 됨
          + 퇴학당할 뻔한 상황이었음
     * 러시아에는 여러 exit 노드가 있으며, 법 집행 기관이 이를 제거하지 않음
"
"https://news.hada.io/topic?id=16763","OpenAI의 Strawberry와 추론에 대하여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OpenAI의 Strawberry와 추론에 대하여

     * OpenAI의 강화된 추론 시스템 ""Strawberry"" 에 대해 미리 접근해서 써볼수 있었는데, 이제 공개되어 생각을 공유할 수 있게 됨
     * 새로운 AI 모델인 o1-preview는 문제를 해결하기 전에 AI가 ""생각""할 수 있게 해줌
     * 이를 통해 계획과 반복이 필요한 매우 어려운 문제를 다룰 수 있고, 실제로 매우 어려운 물리학 문제를 푸는 데 있어 인간 박사 전문가를 능가할 수 있음
     * 이 시스템은 놀랍지만 여전히 제한적이며, 앞으로의 발전 방향을 시사함
     * 그러나 o1-preview는 모든 면에서 더 뛰어난 것은 아니며, 예를 들어 GPT-4o보다 글쓰기를 더 잘하는 것은 아님
     * 크로스워드 퍼즐은 LLM에게 특히 어려움
          + 서로 영향을 미치는 많은 답변을 시도하고 거부하는 반복적인 해결 과정이 필요하기 때문임
          + LLM은 한 번에 하나의 토큰/단어만 답변에 추가할 수 있기 때문에 이를 수행할 수 없음
          + Claude와 같은 일반 LLM은 크로스워드 퍼즐을 제대로 풀지 못함
          + 그러나 Strawberry는 108초 동안 ""생각""한 후 크로스워드 퍼즐을 거의 완벽하게 풀어냄
     * o1-preview는 Strawberry 없이는 불가능했던 일을 가능하게 하지만 여전히 완벽하지 않음
          + 오류와 환각 현상이 여전히 발생하며, 기본 모델인 GPT-4o의 “지능”에 의해 제한됨
          + 새 모델을 받은 이후에도 글 스타일 비평에는 Claude를 계속 사용 중이며, Claude가 스타일 면에서는 여전히 우수함
          + 그러나 복잡한 계획이나 문제 해결과 관련된 작업에서는 Claude 사용을 중단했으며, 이 부분에서 큰 도약을 나타냄

공동지능(Co-Intelligence)에서..

     * o1-preview를 사용하면 AI에서 패러다임 변화에 직면하게 됨
     * 계획은 AI가 스스로 문제 해결 방안을 도출하는 형태의 행위임
     * AI가 많은 사고와 작업을 통해 완전한 결과를 내놓음으로써 인간 파트너의 역할이 축소됨을 느끼게 됨
     * AI가 스스로 답을 제시하며, 사용자는 AI의 추론 과정을 검토해 오류를 찾을 수 있지만, 결과물에 대한 연결감이나 해결 방향에 대한 기여도가 줄어듦
     * 이러한 변화가 반드시 나쁜 것은 아니지만, 기존과는 다름
     * 시스템들이 진정한 자율 에이전트로 발전하면서, 우리는 오류를 잡고 우리가 해결하려는 문제의 흐름을 파악하기 위해 어떻게 관여할지 고민해야 함
     * o1-preview는 현재의 한계에도 불구하고 우리가 예상하지 못한 AI의 역량을 보여주고 있음
     * 중요한 질문은 AI가 발전함에 따라 우리가 AI와의 협업 방식을 어떻게 발전시킬 것인가에 있음
     * 이 문제는 아직 o1-preview가 해결할 수 없는 부분임

   ""중요한 질문은 AI가 발전함에 따라 우리가 AI와의 협업 방식을 어떻게 발전시킬 것인가에 있음""

   어렵네요

   글쓴이는 펜실베이니아 대학교 와튼 스쿨 교수인 Ethan Mollick 입니다. 그는 기업가정신 & 혁신 그리고 AI 에 대해 연구합니다.
   위 내용은 그의 Substack 인 One Useful Thing 에 올라온 것인데, 이 뉴스레터는 구독자가 19만명쯤 됩니다.
"
"https://news.hada.io/topic?id=16748","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요

   추석 연휴네요. 친척과 식사하고, 나머지 시간은 영화/드라마 보며 푹 쉬려고 합니다. 마인크래프트도 하고요.
   모두 즐거운 명절되세요!
"
"https://news.hada.io/topic?id=16787","LLMs의 영원한 환각 현상, 우리가 받아들여야 할 현실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    LLMs의 영원한 환각 현상, 우리가 받아들여야 할 현실

LLMs Will Always Hallucinate, and We Need to Live With This

  서론

     * 대형 언어 모델(LLM)이 다양한 분야에서 널리 사용됨에 따라, 이들의 고유한 한계를 비판적으로 검토하는 것이 중요함
     * 이 연구는 언어 모델의 환각이 단순한 오류가 아니라 이러한 시스템의 필연적인 특징임을 주장함

  환각의 본질

     * 환각은 LLM의 근본적인 수학적 및 논리적 구조에서 비롯됨
     * 아키텍처 개선, 데이터셋 향상, 사실 확인 메커니즘을 통해 이를 제거하는 것은 불가능함
     * 계산 이론과 괴델의 첫 번째 불완전성 정리를 바탕으로, 할팅 문제, 공백 문제, 수용 문제와 같은 문제의 결정 불가능성을 참조함

  LLM 과정의 모든 단계에서의 환각

     * 훈련 데이터 수집, 사실 검색, 의도 분류, 텍스트 생성의 모든 단계에서 환각이 발생할 확률이 있음
     * 구조적 환각이라는 개념을 도입하여 이러한 시스템의 본질적인 특성으로 확립함

  결론

     * 환각의 수학적 확실성을 확립함으로써, 이를 완전히 완화할 수 있다는 기존의 개념에 도전함

GN⁺의 정리

     * 이 연구는 LLM의 환각이 필연적이라는 점을 수학적으로 증명하여, 이를 완전히 제거할 수 없음을 강조함
     * 계산 이론과 괴델의 불완전성 정리를 통해 환각의 본질을 설명함
     * LLM의 모든 단계에서 환각이 발생할 수 있음을 보여줌
     * 이 연구는 LLM의 한계를 이해하고, 이를 수용하는 것이 중요함을 시사함

        Hacker News 의견

     * 수학적 확실성을 통해 환각을 증명함으로써, 환각이 완전히 해결될 수 있다는 기존의 개념에 도전함
          + ""환각""이라는 용어가 모델의 정상적인 기능에 문제가 있다는 인식을 주기 때문에, 다른 용어를 선택했으면 오해를 피할 수 있었을 것임
          + 환각은 모델의 오작동이 아니라, 생성된 텍스트가 목적에 맞지 않는다는 가치 판단임
          + 환각을 줄이는 것과 ""정렬""을 만드는 것은 동일한 문제임
     * 환각은 질문에 대한 첫 번째 가능한 답변을 말하는 결과임
          + 인간은 대부분의 질문에 대해 이전에 답변한 경험이 있고, 실수를 기억하여 반복하지 않음
          + 인간은 말을 하기 전에 생각하고, 초기 반응을 다른 지식과 연관시킴
          + LLM이 즉시 올바른 답변을 생성할 것으로 기대해서는 안 됨
          + 인간의 사고 과정은 다양한 역할과 페르소나를 가짐
          + 초기 ""초안"" 답변이 형성된 후에야 추가적인 맥락을 생성함
          + LLM의 첫 번째 ""직감적 반응""을 기반으로 지능을 평가하는 것은 잘못된 판단임
     * 현재의 아키텍처는 근본적으로 ""환각""이 내재되어 있어 실용적인 사용을 제한함
          + 이 기사에서는 ""환각하지 않음""의 불가능한 한계를 제시함
          + 형식적 시스템과 기계적 계산의 근본적인 한계를 재확인함
          + 이 한계는 인간에게도 적용됨
     * LLM의 환각은 지식을 표현하는 방식과 관련이 있음
          + 모델이 환각할 때도 여전히 훈련된 대로 가능성 있는 텍스트를 생성함
          + 훈련 데이터의 일반적인 패턴, 즉 문법과 단어 선택에 의존함
          + 적절한 아키텍처 변경으로 환각 문제를 해결할 수 있을 것임
          + 그러나 이러한 변경이 효율적인 모델 훈련과 양립할 수 있을지는 미지수임
     * 불완전한 훈련 데이터는 측정할 가치가 없음
          + 불완전한 데이터는 학습의 본질임
          + 완전한 데이터가 있다면 기계 학습이 필요 없고, 입력을 출력으로 매핑하는 함수를 만들면 됨
          + 기계 학습은 예측을 기반으로 간극을 메우는 것임
          + 인간 지능과 학습에도 동일하게 적용됨
          + LLM은 항상 환각할 것이지만, 인간도 항상 환각함
          + 진정한 문제는 LLM이 인간처럼 환각하도록 만드는 것임
     * LLM은 '전문가 시스템'처럼 될 것임
          + AI 전문가로서 자신을 한정하지 말 것을 권장함
     * LLM과 효과적으로 작업하기 위해서는 본질적으로 신뢰할 수 없고 비결정론적인 기술을 사용하는 능력이 필요함
          + 많은 사람들이 이 장애물을 극복하기 어려워함
     * 이제 거품이 터질 때가 되었음
     * 우리는 LLM을 ""수용""할 필요가 없음
          + 사용하지 않거나 무시하거나 확산과 수용에 반대할 수 있음
     * 이 논문은 잘못 작성되었고, 의미 있는 수학적 이론이 개발되었다는 믿음이 낮음
          + 예시: 첫 10페이지는 의미 없는 내용임
"
"https://news.hada.io/topic?id=16770","도난당한 아이폰은 iOS 18 이후부터 더욱 쓸모없어집니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    도난당한 아이폰은 iOS 18 이후부터 더욱 쓸모없어집니다

     * Apple은 iOS 18에서 개별 iPhone 부품에 Activation Lock을 확장하는 새로운 기능을 공개함
          + 배터리, 카메라, 디스플레이와 같은 iPhone 부품에 Activation Lock을 적용함
          + 각 부품은 고유한 일련번호를 통해 소유자의 Apple 계정과 연결되어 추가적인 보안 계층을 제공함
     * 작동방식
          + iPhone이 수리 중에 사용된 부품을 감지하면 원래 장치 소유자의 Apple 계정 비밀번호를 요청함
          + 이 과정은 부품의 적법성(legitimacy)을 확인하고 도난 또는 분실된 장치의 부품 사용을 방지함
     * Apple의 주요 목표는 도난된 iPhone 부품 시장을 방해하는 것임
     * 도난된 장치의 부품 사용을 어렵게 함으로써 iPhone 도난의 유인을 줄이려는 것

     참고: 이 기능은 현재 iPhone에만 독점적으로 제공되며 iPadOS 18을 사용하는 iPad에서는 사용할 수 없음

     * 이 업데이트는 보안을 강화하지만, 다른 장치의 부품을 사용하는 수리 과정에서 복잡해질 수 있음
     * 그러나 이는 정품 중고 부품을 사용한 수리를 허용하면서도 엄격한 보안 조치를 유지하는 Apple의 최근 정책 변화와 일치함
     * 도난된 iPhone은 이미 사용자가 ""Find My""에서 장치를 삭제하지 않는 한 거의 쓸모없었지만, 이제는 예비 부품조차도 쓸모없어짐

        Hacker News 의견

     * 도난된 부품을 블랙리스트에 올리는 것에는 문제가 없지만, 기기가 버려지거나 기부된 경우에도 활성화 잠금이 걸려 있는 상황이 걱정됨
          + 지난달 macOS를 재설치하기 위해 기기를 초기화하고 iCloud에서 로그아웃했지만 활성화 잠금이 제거되지 않았음
          + 활성화 잠금을 제거하는 과정이 의도적으로 혼란스럽고 오해를 불러일으키는 것 같음
          + 이는 전자 폐기물을 만들고 수익을 늘리기 위한 것임
     * Apple이 도난 방지 기능을 도입한 이후, Apple 계정에 접근할 때마다 계정이 잠김
          + 새로운 비밀번호 설정과 다른 Apple 기기에서 인증을 거쳐야 함
          + 이러한 문제가 언젠가 나를 영구적으로 내 휴대폰에서 잠그게 할까봐 두려움
     * 도난된 휴대폰을 완전히 쓸모없게 만드는 것은 좋은 조치임
          + eBike에도 유사한 시스템이 있으면 좋겠음
     * 고장난 iPhone의 부품을 재사용할 수 없게 되는 단점이 있을 수 있음
          + 원격 데이터베이스를 사용한다면 이 문제를 해결할 방법이 있을 수 있지만, 이는 또 다른 허점을 만들 위험이 있음
          + 도난된 기기의 가치를 줄이는 것은 좋은 일임
          + Apple이 이 기능을 도입하는 이유가 단순히 도난 방지 외에 다른 이유가 있는지 궁금함
     * Apple이 합법적인 재활용을 방해하지 않는 한 이 기능은 좋음
          + 예를 들어, 누군가가 오래된 기기를 판매한 후, 그 부품으로 수리된 기기가 30-60일 동안 원래 소유자가 도난 여부를 적극적으로 방지하지 않으면 자동으로 사용 가능하게 해야 함
     * 이 기능이 제3자 부품/수리를 사실상 죽이는 것 아닌지 궁금함
          + 이는 더 많은 전자 폐기물을 만들거나 수리 비용을 증가시킬 수 있음
     * 도난/분실된 후 일정 기간(예: 16개월) 후에 다시 사용할 수 있게 하는 것이 좋겠음
          + 도둑이 휴대폰이 1년 이상 쓸모없다는 것을 알면 가치를 낮출 수 있음
     * 도난, 분실 또는 단순히 버려지고 재활용된 기기의 부품 사용을 방지해야 함
     * 도둑이 인증된 상태에서 휴대폰을 잡으면 비밀번호 핀과 Face ID를 즉시 재설정하여 자신의 것으로 만들 수 있는지 궁금함
     * 이 문제가 과연 이 정도의 과도한 조치를 필요로 할 만큼 널리 퍼져 있는지 의문임
          + 온라인에서 찾은 휴대폰 도난 통계에 대해 신뢰하지 않음
"
"https://news.hada.io/topic?id=16769","Ask GN: nocode툴 중에서 admob 또는 adsense를 지원하는 것은 어떤 것들이 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: nocode툴 중에서 admob 또는 adsense를 지원하는 것은 어떤 것들이 있나요?

   nocode툴 중에서

   버블이나 플러터플로우 등등이 있는 것 같던데요.

   이번에 시간적 여유가 생겨

   제 본업은 아니지만

   호기심 충족과 제 삶에 보탬이 될 수 있는

   앱이나 웹을 함 만들어보려고 합니다.

   그래서 공고를 붙일 수 있는

   노코드 앱빌더 중에 admob을 지원하는 것은 어떤건지요?

   또는

   노코드 웹빌더 중에 adsense를 지원하는 것은 무엇이 있나요?
"
