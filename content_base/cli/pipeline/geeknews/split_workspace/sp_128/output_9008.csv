"https://news.hada.io/topic?id=12948","태국, 약 1500만 톤의 리튬 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          태국, 약 1500만 톤의 리튬 발견

     * 태국 정부 대변인은 태국이 약 1500만 톤의 리튬 매장량을 발견했다고 발표함.
     * 이 발견은 태국이 전기차 생산을 위한 지역 허브로 자리매김하는 목표에 도움이 될 것임.
     * 태국의 리튬 자원은 볼리비아와 아르헨티나에 이어 세계에서 세 번째로 큰 것으로 나타남.

리튬 매장량의 상업적 이용 가능성

     * 발견된 리튬은 남부 푸껫 지방의 두 개의 별도 사이트에 분포되어 있음.
     * 정부는 발견된 자원 중 상업적으로 이용 가능한 양을 파악하기 위해 노력 중임.
     * 리튬은 전기차 배터리뿐만 아니라 스마트폰과 다른 전자기기의 배터리 제조에 필수적인 구성 요소임.

태국의 전기차 생산 허브로의 발전

     * 2023년 8월에 취임한 총리 Srettha Thavisin 정부는 태국을 전기차 생산의 지역 허브로 만들기 위해 노력 중임.
     * 태국은 전통적인 자동차 조립의 역사를 바탕으로 전기차 생산 허브로의 발전을 추진하고 있음.
     * 세계 경제 포럼에서 Srettha 총리는 Bosch의 부회장을 만나 태국에서의 전기차 생산 투자를 촉구함.

중국 전기차 기업의 태국 투자

     * 2023년 12월, 두 개의 중국 전기차 대기업이 태국을 생산 허브로 개발하기 위해 23억 바트(약 3억 1천만 링깃)를 투자하기로 발표함.

   GN⁺의 의견:
     * 태국의 리튬 발견은 전기차 산업에 중요한 원자재의 공급원으로서 아시아 지역의 에너지 독립성과 경제 발전에 기여할 수 있는 중대한 사건임.
     * 이러한 자원 발견은 태국이 전기차 배터리 생산에 있어 자급자족할 수 있는 기회를 제공하며, 이는 국가의 산업 경쟁력을 강화시킬 것임.
     * 중국 전기차 기업의 투자 결정은 태국이 전기차 생산 허브로서의 잠재력을 인정받고 있음을 보여주며, 이는 향후 태국의 경제 성장과 기술 발전에 긍정적인 영향을 미칠 것으로 예상됨.

        Hacker News 의견

     * 한 광산 엔지니어의 의견으로, 보도된 1500만 톤의 리튬 발견은 실제로 리튬을 포함한 광석이며, 평균 함유량은 0.4%에 불과함. 또한 '자원(resource)'과 '매장량(reserve)'은 광업에서 경제적 가치와 확신의 정도에 따라 구체적인 의미를 가짐. 이 발견이 실제 '매장량'으로 인정받기에는 더 많은 검증이 필요함을 지적함.
     * 전 세계적으로 알려진 리튬 매장량은 2600만 톤으로, 이번 발견이 상당히 큰 것으로 보임.
     * 리튬이 풍부한 흙 한 삽을 분석하여 지하에 얼마나 많은 리튬이 있는지 추정한 것으로, 실제로 얼마나 많은 흙을 파내고 정제해야 해당 리튬을 추출할 수 있는지에 대한 의문 제기.
     * 태국에서 리튬이 발견되었다면, 지리적으로 인접한 미얀마, 라오스, 캄보디아에서도 리튬이 발견될 가능성이 있음.
     * 희귀 자원이 부족할 때, 사람들은 더 많은 자원을 찾고 생산하려는 동기를 가짐. 헨리 조지의 말을 인용하여 인간의 자원 창출 능력을 강조함.
     * 리튬과 같은 다른 요소들, 예를 들어 코발트가 배터리 생산에서 더 큰 병목 현상을 일으키는 것인지에 대한 질문.
     * 미국은 네바다에서 최근에 큰 리튬 매장량을 발견했으며, 이는 이전보다 더 경제적으로 추출할 수 있게 된 것임.
     * 호주의 리튬 광산들은 시장 가격이 생산 비용보다 낮아져 개장을 연기하거나 폐쇄하는 상황임. 리튬 자체는 부족하지 않음.
     * 기술적으로 모든 비내륙 국가는 리튬을 무한정 보유하고 있지만, 추출 비용이 문제임.
     * 리튬 발견 지역인 팡가는 자연의 아름다움이 넘치고 유명한 관광지를 가지고 있어, 광산 개발이 이러한 지역에 미칠 영향에 대한 우려.
     * 리튬은 흔하지만, 현지 환경을 완전히 파괴하지 않고 채굴하는 것이 문제임.
"
"https://news.hada.io/topic?id=12913","지난주 카기(Kagi) 사건에 대한 사후 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       지난주 카기(Kagi) 사건에 대한 사후 분석

Kagi.com 서비스 불안정 문제 해결

     * 조사 중 - 배포 후 문제가 발생하여 팀이 해결 작업 중임. (1월 12일 16:45 UTC)
     * 모니터링 - 문제의 원인으로 추정되는 설정 변경을 되돌리고 서비스가 정상으로 돌아오는 것을 지속적으로 모니터링 중임. (1월 12일 18:30 UTC)
     * 업데이트 - 안정성을 완전히 회복하기 위해 잠시 트래픽을 중단하고 사용자를 이 페이지로 리디렉션할 예정임. 서비스에 부하를 제어된 방식으로 복원하는 동안 상황이 진행됨에 따라 추가 세부 정보를 제공할 예정임. (1월 12일 20:26 UTC)
     * 모니터링 - 트래픽이 복원되었으며 서비스가 완전히 정상으로 돌아오는 것을 계속 모니터링 중임. (1월 12일 21:14 UTC)
     * 해결됨 - 모든 서비스가 정상적으로 운영 중임. 문제 해결을 기다려준 사용자들에게 감사함을 표함.

사후 분석

     * Kagi의 기술 리더인 Zac이 지난주 서비스 중단에 대한 자세한 사후 분석을 공유함.
     * 이 사건에 대응하여 선임 엔지니어 Seth와 DevOps 엔지니어 Luan이 함께 작업함.
     * 서비스를 오용하고 인프라의 병목 현상을 악용한 행위자들이 있었으며, 즉각적인 완화 조치를 취하고 코드와 커뮤니케이션의 여러 영역에서 개선 작업을 진행 중임.

사건 발생 경과

     * 1월 12일 오후 5시 30분경, 내부 모니터링과 사용자의 문제 보고를 통해 인프라 문제가 발생한 것을 인지함.
     * 문제의 성격은 다양한 지역의 사용자들에게 느린 로딩 또는 페이지 타임아웃을 일으킴.
     * 문제 해결에 상당한 시간이 걸렸으며, 배경과 진행 상황, 앞으로의 계획에 대해 설명함.

기술적 문제 해결 과정

     * 처음에는 우연히 VM에 추가 RAM 리소스를 업그레이드하는 동시에 문제가 발생함.
     * 모니터링은 높은 지연 시간과 애플리케이션의 데이터베이스 연결 풀 문제를 보고함.
     * 연결 풀이 포화 상태에 이르렀고, 이는 전체 연결 수가 설정된 최대 연결 한도를 초과함을 의미함.
     * 데이터베이스의 내부 건강과 쿼리 성능을 평가하는 동안, 몇몇 인스턴스를 교체하여 혼잡을 줄이는 효과를 시험함.
     * 인스턴스 일부를 교체하는 것이 도움이 되는 것으로 보여, 모든 연결 풀을 한 번에 완전히 재설정하기 위해 사용자 트래픽을 일시 중지함.
     * 데이터베이스 상태를 살펴보니, 사용자 테이블의 행에 대한 높은 경합이 근본 원인임이 명확해짐.
     * 이 경합은 쓰기 지연 시간을 급격히 증가시켜 애플리케이션의 연결 풀에 백압을 가하고, 결국 모든 사용 가능한 연결이 고갈됨.
     * Kagi는 지금까지 GCP에서 사용 가능한 가장 저렴한 단일 코어 데이터베이스를 사용해왔으며, 이는 데이터베이스를 쉽게 마비시킬 위험을 안고 있었음.
     * 나쁜 행위자들을 식별하여 24시간 이내에 생성된 계정과 단시간에 60,000번 이상의 검색을 수행한 단일 사용자 계정을 찾아냄.
     * 해당 계정의 검색 기능을 제거하고, 문제를 일으킨 특정 쓰기를 비활성화하는 핫픽스를 발행함.
     * 자정까지 문제가 완전히 해결되었으며, 행위자들이 돌아오는 신호를 계속해서 면밀히 모니터링함.

향후 조치

     * 이 사건에서 많은 것을 배우고, 시스템을 더욱 강화하고 사고 발생 시 커뮤니케이션 프로세스를 개선하기 위한 즉각적인 계획을 이미 진행 중임.
     * 먼저, 상태 페이지 업데이트가 신속하지 못했음을 인정함.
     * 사용자에게 자동화된 내부 모니터링을 더 쉽게 공개할 수 있는 상태 페이지 플랫폼으로 이동하여 실시간으로 플랫폼의 건강 상태를 파악할 수 있도록 할 예정임.
     * 문제를 일으키는 쿼리를 직접 완화하고, 유사한 결함이 더 있는지 알아보기 위해 부하 테스트를 실행 중임.
     * 추가 모니터링을 설치하여 인프라에서 올바른 위치를 더 빨리 가리키고, 이번처럼 잘못된 신호를 쫓는 시간을 낭비하지 않도록 할 예정임.
     * 이러한 유형의 악용을 감지하는 시스템을 강화하고 있으며, 성능 영향뿐만 아니라 비용도 직접적으로 발생시키기 때문에 자동화된 제한을 설정하여 이를 집행할 필요가 있음.
     * 새로운 제한은 이미 이 게시물 시점에 시행되었으며, 그 영향을 모니터링하고 필요에 따라 계속 조정할 예정임.
     * Kagi에 대한 액세스가 잘못되어 차단된 것으로 생각되면 support@kagi.com으로 연락해달라고 요청함.

GN⁺의 의견

     * Kagi는 사용자 테이블의 행 경합으로 인한 쓰기 지연 문제를 겪었으며, 이는 애플리케이션의 연결 풀에 백압을 가하여 서비스 중단을 초래함.
     * 이러한 문제는 Kagi가 GCP에서 가장 저렴한 단일 코어 데이터베이스를 사용함으로써 발생한 위험성의 결과였음.
     * Kagi 팀은 이번 사건을 통해 시스템을 강화하고, 사용자와의 커뮤니케이션을 개선하며, 악용을 방지하기 위한 자동화된 제한을 설정하는 등의 조치를 취함으로써 서비스의 안정성과 투명성을 높이려는 노력을 보여줌. 이러한 노력은 사용자들에게 더욱 신뢰할 수 있는 서비스를 제공하고자 하는 Kagi의 의지를 반영함.

        Hacker News 의견

     * 인프라 업그레이드와 동시에 발생한 사건에 대한 의견
          + VM에 추가 RAM 자원을 통한 인프라 업그레이드를 수행하는 동시에 사건이 발생한 것은 완전한 우연이었다고 함.
          + 이러한 ""우연""은 자주 발생하며, 문제 해결 중에 자신의 존재를 의심하게 만든다고 언급.
          + 문제 해결 중에 패닉 상태가 되면, 다른 것을 망가뜨리는 핫픽스를 적용할 수 있으며, 이는 시스템 관리자와 개발자에게 잔인한 머피의 법칙이 될 수 있다고 경고.
     * Kagi 상태 페이지에 대한 사용자의 경험
          + 사용자는 Kagi의 상태 페이지가 모든 것이 정상적으로 작동하는 것으로 표시되어 있어서 불안감을 느꼈다고 함.
          + 과거에 의존했던 서비스들은 상태 페이지를 즉시 업데이트하여 문제가 자신의 장치에 있는 것이 아니라는 것을 알 수 있었다고 비교.
          + Kagi를 계속 사용할 계획이지만, 사후 분석에서 언급한 것처럼 상태 페이지 코드를 다른 서비스/플랫폼으로 이동할 것을 희망한다고 언급.
     * 개인적인 경험을 공유하는 댓글
          + 개인적으로 동일한 유형의 서비스 중단을 여러 번 경험했으며, 데이터베이스 연결 풀의 건강 상태에 대한 문제를 해결하려고 시도했다고 공유.
          + 데이터베이스의 일반적인 포화 지표(CPU%, IOPS 등)는 이러한 중단 동안 크게 변하지 않으며, 대신 락 경합이 문제의 원인일 수 있다고 지적.
          + Kagi가 사용하는 RDBMS에 대한 권장 사항으로, 글로벌 I/O 대기 시간, 락 획득 시간, 쿼리 실행 시간 등을 그래프로 나타내는 것이 좋다고 제안.
     * 스타트업의 경험에 대한 댓글
          + 모든 스타트업이 어느 시점에서 이러한 문제를 겪게 된다고 언급.
          + 문제를 막을 수 있는 능력을 구축하기에 충분한 시간이나 자원이 없을 수도 있으며, 특정 문제가 발생할 것이라고 생각하지 못했을 수도 있다고 함.
          + 투명성과 학습이 중요하지만, 때로는 보상도 중요하다고 언급하며, Kagi가 서비스를 사용할 수 없었던 시간에 대한 검색 크레딧을 제공하는 것을 고려해야 한다고 제안.
     * 내부 시스템에 대한 관찰 가능성에 대한 댓글
          + 문제를 더 빨리 인식해야 했다고 지적하며, 올바른 데이터독 대시보드와 스플렁크 쿼리가 문제를 훨씬 더 빨리 명확하게 해야 한다고 언급.
          + 더 나은 모니터링에 투자하여 학습 경험으로 삼아야 한다고 조언.
     * Kagi의 신뢰성에 대한 유료 사용자의 의견
          + Kagi의 다운타임을 경험한 유료 사용자는 Google의 신뢰성을 당연하게 여겼다는 것을 깨달았다고 함.
          + 검색 엔진에 대한 접근이 중단되는 것은 큰 장애가 될 수 있다고 언급하며, Kagi를 사랑하지만 다운타임을 경험하는 것은 불쾌했다고 공유.
          + 이 경험이 Kagi를 더욱 강력하고 신뢰할 수 있는 서비스로 만들기를 희망한다고 언급.
     * 서비스 중단을 초래한 스크래퍼에 대한 댓글
          + 한 사용자가 실행한 스크래퍼로 인해 서비스가 7시간 동안 중단되었다는 사실에 대해, 테스트 중에 ""많은 검색이 발생하면 어떻게 될까?""라는 질문을 하지 않았는지 의문을 제기.
     * Kagi 사용 경험과 사후 분석에 대한 댓글
          + 몇 주 동안 Kagi를 사용한 후, 지난주에 즉시 로드되지 않았을 때 무엇을 해야 할지 몰랐다고 공유.
          + 사후 분석이 나오기 전에 이미 사건을 잊어버렸다고 언급하며, 검색할 때 생각할 필요가 없는 팀에게 감사를 표함.
     * GCP에서 사용한 단일 코어 데이터베이스에 대한 댓글
          + Kagi가 GCP에서 사용 가능한 가장 저렴한 단일 코어 데이터베이스를 사용해왔다는 사실에 대해 긍정적인 반응을 보임.
          + 읽기 부하의 급격한 증가를 처리하고 성능을 더 끌어올릴 수 있는 PolyScale과 같은 것을 고려해볼 것을 제안.
     * 자동화된 스크래핑에 대한 댓글
          + 계정을 차단한 후 연락을 취한 사용자가 결과를 자동으로 스크래핑하는 데 계정을 사용했다고 주장했다고 언급.
          + 모든 들어오는 RPC / API / HTTP 요청, 특히 공개적인 것들에 대해 QPS(초당 쿼리 수) 제한을 설정할 것을 권장.
"
"https://news.hada.io/topic?id=12950","앱 내 하드코딩된 자격 증명을 폭로한 독일 개발자, '해킹' 혐의 유죄 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               앱 내 하드코딩된 자격 증명을 폭로한 독일 개발자, '해킹' 혐의 유죄 판결

독일 법이 보안 연구를 위험한 일로 만듦

     * 독일 법원이 개발자를 '해킹' 혐의로 유죄 판결함.
     * 개발자는 로그 메시지가 너무 많이 생성되는 소프트웨어 조사를 맡았고, 해당 소프트웨어가 벤더의 데이터베이스 서버에 MySQL 연결을 하고 있음을 발견함.
     * MySQL 연결을 확인했을 때, 데이터베이스에는 클라이언트 뿐만 아니라 벤더의 모든 고객 데이터가 포함되어 있었음을 알게 됨. 즉시 벤더에게 알렸지만, 벤더는 취약점을 수정하는 동시에 고소함.

법원 판결

     * 법원은 애플리케이션에 하드코딩된 데이터베이스 자격 증명(평문으로 보이며, 심지어 디컴파일링도 필요 없음)이 해킹 혐의를 정당화하기에 충분한 보호 수단인지에 대해 상당한 논의가 있었음.
     * 법원의 판결은 비밀번호가 있었기 때문에 보호 메커니즘이 우회되었고, 이것이 해킹이라고 명시함.
     * 이번 판결로 인해 아무리 결함이 있는 '보호'라 할지라도, 그 존재만으로도 보안 연구를 독일 법 아래에서 범죄적 해킹으로 전환시키는 결과를 초래함.

커뮤니티의 반응

     * 커뮤니티에서는 다양한 비유를 통해 이 사건에 대한 의견을 나눔.
     * 일부는 하드코딩된 자격 증명을 사용하는 것이 해킹을 구성할 수 있지만, 의도와 발생한 피해도 고려해야 한다고 주장함.
     * 다른 이들은 벤더 소프트웨어가 문서화되지 않은 외부 인프라에 호출을 하고 잠재적으로 민감한 데이터를 공유하고 있었다는 점을 지적함.
     * 또한, 법적으로 보호받아야 할 독립 감사인의 필요성과 그것이 실현 가능하지 않은 경우의 문제점을 언급함.

GN⁺의 의견

     * 이 사건은 보안 연구자들이 취약점을 발견하고 신고하는 행위가 법적 위험을 수반할 수 있음을 보여줌.
     * 법원의 판결은 보안 연구와 책임 있는 공개 사이의 긴장 관계를 강조하며, 법적 프레임워크가 기술 발전과 어떻게 조화를 이루어야 하는지에 대한 중요한 논의를 촉발함.
     * 이러한 판결이 보안 연구자들에게 억제 효과를 주어 적절하지 않은 보안 조치를 취하는 기업들이 문제를 회피할 수 있게 하고, 결국 사용자들을 위험에 노출시킬 수 있음을 시사함.

        Hacker News 의견

     * 제목이 혼란스럽고 클릭베이트에 가까워 보임
          + 기사의 제목은 혼란스러우며 클릭베이트 경계에 있음. 실제로는 데이터베이스 자격증명을 노출시킨 것이 아니라, 그것을 사용해 제3자의 데이터베이스 서버에 로그인한 것이 문제가 됨. 이는 독일에서 보안 연구를 사실상 불가능하게 만든 StGB 202 ff. 형법 조항 때문에 큰 문제임.
     * 독일의 보안 연구 문제
          + 독일에서는 약 20년간 보안 분야에 관심을 가진 젊은 엔지니어가 거의 없었으며, 교육받은 사람도 드뭄. 대기업들이 유능한 인재들을 모두 빨아들였고, 최고의 인재들은 해외로 떠남. 결과적으로 대부분의 독일 중소기업들이 매일 해킹을 당하고 있으며, 아무도 감사를 하지 않아 네트워크에 연결된 모든 것이 보안 위험이 됨.
     * 법적 조언
          + 고등법원에서 이 사건이 기각될 것이라고 기대하는 것은 매우 순진한 생각임. 피고는 여러 법정 단계를 거치며 수년간의 시간을 낭비하게 될 것이며, 변호사 비용으로 약 10만 유로를 소모할 것임. 이 모든 것은 회사가 자신들의 데이터를 제대로 보호하지 못했기 때문임. 만약 명확한 버그 바운티 프로그램이 없거나, 자신의 회사가 아니거나, 구멍을 찾도록 고용되지 않았다면, 문제를 자신의 것으로 만들지 말 것을 조언함.
     * 독일 보안 전문가들의 반응
          + 일부 경력 있는 독일 정보보안 전문가들은 이러한 상황에 너무 화가 나서, 사건이 발생해도 정부 기관을 돕기를 거부함. '고통을 통한 학습'이라는 말로 이 상황을 표현함.
     * 영국의 법률과 비교
          + 독일 법률에 대해서는 확실치 않지만, 영국에서는 이것이 명백한 컴퓨터 오용 행위로 간주되어 간단한 사건으로 처리될 것임.
     * 법률 개정의 필요성
          + 법률이 재작성될 필요가 있어 보임. 의도가 중요하며, 이 '해커'는 해를 끼치려고 한 것 같지 않음. 회사가 자신들의 취약점을 드러냈고, 그것을 폭로한 사람을 처벌하려 함.
     * 유사 사례
          + BASE64로 암호화된 사회보장번호를 해독하는 것이 '해킹'으로 간주된 사례와 유사함.
     * 네덜란드의 식품 스타트업 사례
          + PostNL과 협력하던 중, 다른 고객들의 데이터에 접근할 수 있게 되었으나, 법적 책임을 피하기 위해 이를 사용하지 않기로 결정함. 회사는 이를 법적으로 보고해야 했으나 그렇게 하지 않음.
     * 보안에 대한 일반적인 태도
          + 많은 '해킹' 사례가 사람들이 전면 문을 활짝 열어놓고 방치한 것과 같음. 문을 열어놓고 도둑맞은 경우에는 동정을 받지 못하지만, 회사가 보안을 소홀히 할 때는 해커들에게 분노함.
     * 선의의 법칙과 반대되는 상황
          + 문제를 발견하면 아무것도 말하지 말고, 아무것도 하지 말아야 하는 상황임. 문제가 있을 수도 있다고 생각하고 멈춘 뒤 회사 주식을 공매도하는 것이 합법일지 궁금함.
     * 문제 발견 시 대처 방법
          + 문제를 발견하더라도 무시하는 것이 낫다. 비밀번호가 보이는 것을 알려주는 것조차도 위험을 감수하는 것임. 비밀번호를 사용하는 것은 더더욱 피해야 함.
     * 형법 제202a조
          + '특별한 방법으로 무단 접근으로부터 보호되는 데이터에 접근하는 것'에 대해 설명하고 있으며, 클라이언트에 하드코딩된 비밀번호도 이에 해당됨.
"
"https://news.hada.io/topic?id=12934","해커 뉴스 선정 2023년 최고의 책 40권 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        해커 뉴스 선정 2023년 최고의 책 40권

     * HN에서 Book 포함된 링크를 가져와 댓글을 추출하고, GPT에게 요청해서 도서 세부 목록을 추출하고, 순위값을 반영하여 조정

    1. Structure and Interpretation of Computer Programs [컴퓨터 프로그램의 구조와 해석]- Harold Abelson, Gerald Jay Sussman, Julie Sussman
    2. Designing Data-Intensive Applications [데이터 중심 애플리케이션 설계] - Martin Kleppmann
    3. Gödel, Escher, Bach [괴델, 에셔, 바흐: 영원한 황금 노끈] - Douglas Hofstadter
    4. The C Programming Language [Kernighan의 C언어 프로그래밍] - Brian W. Kernighan, Dennis M. Ritchie
    5. How to Win Friends and Influence People [인간관계론] - Dale Carnegie
    6. The Mythical Man-Month [맨먼스 미신] - Frederick P. Brooks Jr.
    7. How to Solve It [어떻게 문제를 풀 것인가] - George Pólya
    8. Principles of Mathematical Analysis [해석학의 원리] - Walter Rudin
    9. The Elements of Computing Systems [밑바닥부터 만드는 컴퓨팅 시스템] - Noam Nisan, Shimon Schocken
   10. Calculus - Michael Spivak
   11. Code: The Hidden Language of Computer Hardware and Software [코드] - Charles Petzold
   12. Crafting Interpreters [Crafting Interpreters 로버트 나이스트롬의 인터프리터 in Java, C]- Robert Nystrom
   13. Peopleware [피플웨어]- Tom DeMarco, Timothy Lister
   14. Eloquent JavaScript [자바스크립트 스킬업 3/e] - Marijn Haverbeke
   15. Elements - Euclid
   16. The Art of Computer Programming [The Art of Computer Programming] - Donald E. Knuth
   17. Blindsight - Peter Watts
   18. The E-Myth Revisited [사업의 철학] - Michael E. Gerber
   19. The Pragmatic Programmer [실용주의 프로그래머] - Andrew Hunt, David Thomas
   20. Compilers: Principles, Techniques, and Tools - Alfred V. Aho, Monica S. Lam, Ravi Sethi, Jeffrey D. Ullman
   21. High Output Management [하이 아웃풋 매니지먼트] - Andrew S. Grove
   22. Concrete Mathematics [구체수학] - Ronald L. Graham, Donald E. Knuth, Oren Patashnik
   23. Never Split the Difference [우리는 어떻게 마음을 움직이는가] - Chris Voss
   24. The Phoenix Project [피닉스 프로젝트] - Gene Kim, Kevin Behr, George Spafford
   25. The Art of Electronics - Paul Horowitz, Winfield Hill
   26. Dune [듄] - Frank Herbert
   27. Hyperion - Dan Simmons
   28. The Hitchhiker’s Guide to the Galaxy [은하수를 여행하는 히치하이커를 위한 안내서] - Douglas Adams
   29. Operating Systems: Three Easy Pieces [운영체제 아주 쉬운 세 가지 이야기] - Remzi H. Arpaci-Dusseau, Andrea C. Arpaci-Dusseau
   30. Automate the Boring Stuff with Python [뚝딱뚝딱 파이썬 자동화] - Al Sweigart
   31. The Design of Everyday Things [도널드 노먼의 디자인과 인간 심리] - Don Norman
   32. Calculus Made Easy [쉽게 만든 미적분학 수학] - Silvanus P. Thompson
   33. Linear Algebra Done Right - Sheldon Axler
   34. The Three-Body Problem [삼체] - Cixin Liu
   35. Children of Time - Adrian Tchaikovsky
   36. The Five Dysfunctions of a Team [팀워크의 부활] - Patrick Lencioni
   37. Bobiverse - Dennis E. Taylor
   38. Founders at Work [세상을 바꾼 32개의 통찰] - Jessica Livingston
   39. Neuromancer [뉴로맨서] - William Gibson
   40. Design Patterns [디자인 패턴] - Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides

HN 독자들이 추천하는 2023년 상위 40권의 책 선정 방법

     * 목록 생성 방법: ""book""이라는 단어가 포함된 2023년 게시된 이야기들을 수집하되, ""macbook"", ""chromebook"" 등은 제외하고, URL이 포함되지 않은 ""Ask HN"" 스토리들을 중점적으로 선택함.
     * 해당 스토리의 댓글을 수집하고, 각 댓글에서 OpenAI gpt3.5 챗 API를 사용하여 책의 세부 정보를 JSON 형식으로 추출함.
     * 제목을 표준화하여, 예를 들어 ""Gödel, Escher, Bach: An Eternal Golden Braid""를 ""Gödel, Escher, Bach""로 변환하고, ""the""로 시작하는 단어도 제거함.
     * 결과 정보를 집계하고, 책 제목과 저자 이름을 수동으로 조정하여 표준화함.

   오오..! SICP 역시 근본서

   좋은 정보 고맙습니다~^^

   한국어판을 찾아서 []안에 적었습니다. 몇권은 아직 한국어판이 안나왔네요

   댄 시먼스의 히페리온은 열린책들에서 출간했습니다. 후속작인 히페리온의 몰락도 함께 나와 있습니다. 시먼스 작품 중에서 개인적으로는 일리움을 강추합니다만... 아주 대중적이 되기에는 장벽이 좀 있지 싶습니다.

        Hacker News 의견

     * ""Ask HN"" 게시물에서 '책'이라는 단어가 포함된 제목에 대한 답변에서 가장 자주 언급된 책들에 관한 것으로, 투표를 많이 받아 눈에 띄고 많은 댓글을 유도하는 게시물들에서 선정된 책들이기 때문에 편향될 수 있음을 지적함.

     이는 'Ask HN' 게시물 중에서 투표를 많이 받고 많은 댓글이 달린 것들에 한정된 책들의 목록이므로, 선택 기준에 주의를 기울이는 것이 좋음을 강조함.
     * 자신의 책 ""Crafting Interpreters""가 목록에 포함된 것을 매우 기쁘게 생각함.

     ""Crafting Interpreters""라는 책이 이 목록에 포함된 것에 대해 큰 만족감을 표현함.
     * 목록에 포함된 수학 책들은 일반적으로 높은 평가를 받지만, 수학에 대한 수동적이거나 오락적인 관심을 가진 사람들에게는 적합하지 않은 선택이라고 생각함. 대학생을 위한 시리즈가 더 나은 선택일 수 있음.

     목록에 있는 수학 책들이 높은 평가를 받지만, 수학에 대해 적극적이지 않은 사람들에게는 적합하지 않다고 지적하며, 대학생을 위한 시리즈 책들이 더 나은 선택이 될 수 있음을 제안함.
     * 이 목록에 있는 책들 중 약 1/4을 소유하고 있으며, 많은 책들이 30년 이상 된 것임을 흥미롭게 생각함.

     목록에 있는 책들 중 상당수를 소유하고 있으며, 그 중 많은 책들이 30년 이상 된 고전임을 발견함.
     * ""Blindsight""라는 책이 목록에 포함된 것을 보고 기쁨. 이 책은 실제 출판물을 참고 문헌으로 사용하여 상상력을 정당화함.

     ""Blindsight""라는 하드 사이파이 책이 목록에 포함된 것에 대해 긍정적인 반응을 보이며, 이 책이 실제 문헌을 참고하여 상상력을 뒷받침함을 언급함.
     * 해커뉴스에서 추천하는 책들과 유사한 웹사이트들을 소개함.

     해커뉴스에서 추천하는 책들과 비슷한 내용을 제공하는 다른 웹사이트들에 대한 링크를 공유함.
     * Reddit Reads라는 사이트를 즐겨 사용하며, 이를 통해 특정 니치, 취미, 인터넷 문화에 대해 알아볼 수 있음.

     Reddit Reads라는 사이트를 통해 다양한 서브레딧에서 인기 있는 책들을 알아보는 것이 재미있다고 언급함.
     * 'Gödel, Escher, Bach'의 첫 언급 링크가 실제로는 수학자 Gödel에 대한 언급으로 가는 것처럼, 책 이름이 복잡할 때 오류가 발생하기 쉬움을 지적함.

     'Gödel, Escher, Bach'라는 책의 첫 언급 링크가 실제로는 해당 책이 아닌 수학자 Gödel에 대한 언급으로 연결되는 것을 예로 들며, 복잡한 책 이름을 필터링하는 것의 어려움을 설명함.
     * ""The Three-Body Problem"" 삼부작을 최근에 완독했으며, 책에서 얻은 여러 아이디어들이 종종 떠오름. 사이파이에 진지하게 관심이 있다면 이 책들을 읽어야 함.

     ""The Three-Body Problem"" 삼부작을 읽고 나서도 책에서 다룬 다양한 아이디어들이 자주 생각난다고 말하며, 사이파이 장르에 심취한 독자라면 반드시 읽어야 할 책으로 추천함.
     * 이 보고서는 대부분의 책들이 시대를 초월한 고전이라는 점을 지적하며, 2023년과는 큰 관련이 없다고 언급함.

     목록에 포함된 책들이 대부분 시대를 초월한 고전이라는 점을 지적하며, 이는 크라우드 소싱 방식으로 추천을 모았기 때문에 불가피한 결과라고 평가함.
"
"https://news.hada.io/topic?id=12971","애니메이션 산업, 25억 달러 규모에도 불구하고 애니메이터들에게는 푼돈만 지급","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애니메이션 산업, 25억 달러 규모에도 불구하고 애니메이터들에게는 푼돈만 지급

애니메이션은 노예 산업

     * 애니메이션 산업은 250억 달러 규모로 성장했으나, 애니메이터들에게는 극히 적은 임금을 지급함.
     * 이 산업은 놀라운 스토리와 시각적 경험을 제공하지만, 그 이면에는 애니메이터들의 열악한 처우가 있음.
     * 이 글은 애니메이터들이 하루 5달러를 벌면서도 자신들의 상황에 무관심한 이유와 세계가 이 문제에 대해 얼마나 무지한지에 대해 탐구함.

  A1은 정말 무사했나?

     * A1 스튜디오는 직원 자살 사건으로 인해 법적 결과를 마주했으나, 예상보다 미미한 처벌을 받음.
     * 피해자 가족은 ""근로자 보상 혜택""을 받았고, A1은 사건에 명시적으로 연루되었으나, 그것이 전부임.
     * A1의 반응은 기업적이고 비인간적인 태도를 보여줌.

  일본 정부의 공식적이고 법적으로 설정된 ""과로사 라인""

     * 일본은 과로로 인한 사망, 즉 '과로사'로 악명이 높음.
     * 정부는 과로를 명확히 정의하고 과로와 질병 간의 인과 관계를 설정하는 지침을 마련했으나, 이것이 직접적인 처벌로 이어지지는 않음.
     * A1과 MADHOUSE는 이 과로사 라인을 심각하게 위반했지만, 중대한 결과를 받지는 않았음.

  오사무 테즈카 - 그는 정말 잘못된 것인가?

     * 애니메이션 업계의 주요 문제 중 하나는 매주 애니메이션을 생산해야 한다는 압박감임.
     * 오사무 테즈카는 이러한 업로드 일정을 시작한 인물로 지목되지만, 그가 산업의 문제를 일으킨 주범인지는 불분명함.
     * 애니메이션의 주간 업로드 일정은 산업의 성장에 기여했을 수 있으며, 일정 변경은 대중의 반발을 불러일으킬 수 있음.

  아웃소싱

     * 아웃소싱은 애니메이션 산업에서 비용 절감을 위해 널리 사용되는 방법임.
     * 일본 정치의 변화가 독립 계약자로서의 고용 증가에 영향을 미쳤을 수 있으나, 이는 확실하지 않음.

  다로 아소와 의회 연맹

     * 다로 아소는 만화, 애니메이션, 게임을 위한 의회 연맹을 구성했으나, 이것이 실제로 산업에 긍정적인 영향을 미쳤는지는 불확실함.
     * 일본 정부는 '쿨 재팬' 운동을 통해 문화적 소프트 파워를 전 세계에 전파하려 했으며, 이는 성공적이었음.

  만화가들

     * 만화가들은 자신들의 이야기를 창조했지만, 애니메이터들의 처우에 대한 실질적인 권한이 없음.
     * 만화가들은 자신의 작품에 대한 창의적인 결정권을 가지고 있지만, 실제 제작에 자금을 기여하는 것은 아님.

  성우들

     * 성우들은 애니메이션 제작 과정에서 애니메이터들의 업무 부담을 줄일 수 있는 영향력이 없음.
     * 성우들에게 먼저 작업을 제공하기 위해 애니메이터의 업무량이 두 배로 늘어나는 것은 애니메이션 업계의 결정임.

  JAniCA는 어떻게 되었나?

     * JAniCA는 애니메이션 업계의 유니온화를 위한 조직이었으나, 내부 문제와 정부 지원의 상실로 실패함.
     * JAniCA의 실패는 유니온화의 무용성을 강화하고 애니메이션 상황에 대한 절망감을 동시에 높임.

  제작 위원회

     * 제작 위원회는 애니메이션 업계에서 일하는 것이 어려운 주요 원인 중 하나임.
     * 애니메이션 스튜디오가 자체적으로 자금을 조달하여 성공한 사례가 있으나, 이것이 모든 애니메이션에 적용되는 것은 아님.

  저작권

     * 애니메이션 스튜디오는 종종 자신들이 창조한 작품의 권리를 제작 위원회에 판매함.
     * 이로 인해 스튜디오는 시리즈의 성공과 관련된 로열티나 수수료를 받지 못함.

  그래서... 이 문제를 어떻게 해결해야 하나?

     * 애니메이션의 문제는 너무 많은 작업과 너무 적은 보상에 있음.
     * 애니메이션 업로드 일정을 변경하는 것은 대중의 반발을 불러일으킬 수 있으며, 투자 은행가들과 달리 애니메이터들의 임금은 생활을 유지하기에 턱없이 부족함.

  GN⁺의 의견

    1. 애니메이션 산업의 빛나는 성공 뒤에 숨겨진 애니메이터들의 열악한 근무 조건은 중요한 사회적 이슈임. 이는 창작 산업의 어두운 면을 드러내고, 노동자의 권리와 삶의 질에 대한 중요성을 강조함.
    2. 애니메이션 산업의 구조적 문제는 단순히 일본에만 국한되지 않고, 전 세계 창작 산업에서 공통적으로 발견되는 문제임. 이는 글로벌 차원에서의 논의와 해결책 모색을 요구함.
    3. 이 글은 애니메이션 팬들과 산업에 관심 있는 사람들에게 통찰력을 제공하며, 애니메이션 제작 과정과 그 뒤에 있는 사람들에 대한 존중과 인식을 높이는 데 도움이 됨.

        Hacker News 의견

     * 애니메이션 및 만화 산업의 전반적인 수익은 많지만, 대부분의 개별 작품은 거의 수익을 내지 못함. 소수의 인기 있는 작품들이 대부분의 수익을 창출함.
          + 애니메이터들에게 공정한 임금을 지급한다면, 대부분의 제작은 불가능해질 것임. 매년 몇 개의 애니메이션만 제작될 것임.
          + 인기 있는 작품들은 어떻게 탄생할까? 모든 새로운 작품은 큰 도박이 될 것임.
          + 애니메이션 및 만화 팬으로서, 애니메이터들이 마땅히 받아야 할 임금을 받고 좋은 근무 조건을 갖기를 바람.
          + 이는 산업이 크게 축소될 것임을 사람들이 받아들여야 함. 많은 작품들이 제작되지 못할 것임.
          + 이는 또한 애니메이터가 될 수 있는 사람들의 수가 크게 줄어들 것임을 의미함. 남아 있는 일자리에 대한 경쟁이 치열해질 것임.
          + 바로 이 경쟁이 임금을 낮추는 원인임. 그 일자리를 원하는 사람들이 너무 많음.
     * 애니메이션 산업의 수익이 250억 달러에 달하지만, 이것이 실제로 이익을 의미하는 것은 아님. 사람들은 종종 이런 실수를 하며, 이는 불편함을 유발함. 애니메이션 산업이 큰 이익을 내고 있는지, 아니면 전체적으로 손실을 보고 있는지에 따라 적절한 반응이 매우 다를 수 있으나, 기사는 이 구분 없이 수익 숫자만을 제목에 사용함.
     * 애니메이션 제작위원회가 애니메이터 임금과 산업 내 게이트키핑에 미치는 영향에 대해 설명하는 유익한 비디오를 시청할 것을 권장함. 이 채널에는 이 주제에 대한 다른 정보적인 비디오도 있음.
     * 애니메이션에 대한 지식이 있는 사람이라면 누구나 애니메이터들이 형편없는 임금을 받고 있다는 것을 알고 있음. 기사 자체에도 이에 대한 밈 이미지가 포함되어 있음.
     * 일본에서 공부할 때 만화 일러스트레이터와 잠시 어울렸는데, 그가 그림을 그리는 속도가 놀랍도록 빨랐음을 기억함. 햄버거를 먹으러 갔을 때, 그는 햄버거를 먹는 동안 한 페이지 분량의 초기 스케치를 완성함.
     * 모든 히트 중심의 산업(예: TV, 영화, 장난감, 게임, 애니메이션 등)은 제작자들에게 로열티를 지급하도록 강제되어야 함. 대부분의 시간 동안 자금이 부족하지만, 히트작을 만들면 큰 이익의 공정한 몫을 받을 수 있는 법적 보호가 필요함.
     * 시장의 가치에 따라 애니메이터들의 시간 가치가 정해짐. 애니메이터들이 받는 낮은 임금에 대해 경각심을 가져야 함. 웹 개발자와 비교했을 때 게임 개발자로서 받는 임금이 얼마나 적은지 알고 나서, 이직을 결정하고 그 결과 더 행복해짐.
          + 법률이나 비판적인 기사가 시장의 힘을 바꾸는 것은 어려움. 노조가 이를 시도하지만, 소프트웨어 분야에서는 아직 성공한 사례를 모름. 노조가 제공할 수 있는 것만을 받아들여야 할 준비가 되어 있어야 함.
     * 동일한 저자가 이 주제에 대한 비디오도 제작함. 예를 들어, 품질 관리(QC) 흐름도를 포함하는 부분이 있음.
     * 영화 산업이 큰 변화의 직전에 있다고 믿음.
         1. 대형 영화 스튜디오들이 수익 감소와 함께 콘텐츠를 과도하게 생산함.
         2. 비즈니스 모델이 직접 소비자(스트리밍)로 전환함.
         3. 규제 변화(DEI 소수자 이익 - 오스카).
         4. 기술 변화(생성 AI).
         5. 고객 선호도 변화(유튜브에서 리뷰 시청).
     * 이는 일반적으로 엔터테인먼트 산업 전반에 해당하는 사례임.
"
"https://news.hada.io/topic?id=12930","연방 연구에 따르면 원격 근무가 생산성에 영향을 미치지 않는 것으로 나타남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               연방 연구에 따르면 원격 근무가 생산성에 영향을 미치지 않는 것으로 나타남

        Hacker News 의견

     * 원격 근무와 대면 근무의 효율성에 대한 논의에서 인간의 다양성과 미묘한 차이를 고려하는 것이 중요함.
          + 사람들은 서로 다르며, 어떤 이들에게는 출퇴근이 스트레스이고 사무실이 시끄럽고 산만할 수 있어 원격 근무가 더 적합할 수 있음.
          + 반면, 집에서는 빨래나 비디오 게임 등이 산만함을 유발할 수 있어 대면 근무가 더 나을 수 있는 사람들도 있음.
          + 일부 팀은 대면 상호작용과 아이디어 회의가 필요하지만, 다른 팀들은 중앙 집중식 계획과 업무 분담이 더 효과적일 수 있음.
          + 결국, 경영진은 원격 대비 대면 근무의 선택을 맹목적으로 적용하기보다는 각 개인의 성향과 선호에 맞는 팀 구성을 결정해야 함.
     * 원격 근무가 생산성을 크게 향상시킨다면, 그것이 성과에 반영되어야 한다는 주장에 대한 반론.
          + 원격 근무가 집에서 빨래와 같은 일을 병행할 수 있게 해 생산성을 높일 수 있지만, 이러한 이점이 산업 생산성 연구에서는 반영되지 않을 수 있음.
     * 직장에서든 집에서든 직원들은 지루함 때문에 웹서핑이나 쇼핑을 할 수 있음.
          + 흥미롭고 의미 있는 업무를 제공하면 직원들은 생산적으로 일할 것임.
     * 일반적인 경영진이 사무실 공간 비용을 절감하고 원격 근무로 전환하여 비용을 절약하려는 생각을 하지 않는 것에 대한 놀라움.
          + 몇 년 후 원격 근무가 효과적이지 않다면 다시 사무실 공간을 시장에서 찾으면 됨.
          + 영국 정부 기관들이 사무실 공간을 팔고 임대로 전환했으나, 수요 감소로 인해 임대업자들이 불만을 가짐.
     * 원격 근무가 생산성을 높이지 않을 이유가 없음.
          + 많은 사람들이 출퇴근 시간을 절약하고 그 시간을 더 많은 업무에 사용함.
     * 경제학자들이 말하는 생산성은 시간당 산출량을 의미하며, 이는 양적인 측면이지 질적인 측면은 아님.
     * 원격 근무는 세탁기와 식기세척기와 같은 발명품으로, 매일 2시간의 비생산적인 활동으로부터 시간을 절약함.
          + 만약 5년간 출퇴근 비용을 고용주가 부담하도록 한다면, 원격 근무와 대면 근무 중 어느 것이 경제적으로 더 합리적인지 빠르게 알 수 있을 것임.
     * 기술 프로젝트 매니저로서 원격 근무가 생산성을 증가시킨다는 것을 확인함.
          + 복잡한 문제 해결에 있어 원격 근무는 집중력을 높이고 편안하게 문제를 해결할 수 있는 장점이 있음.
     * 블룸버그 기사에서 언급된 연방준비은행의 연구는 원격 근무가 생산성 증가에 기여하는지를 다룸.
"
"https://news.hada.io/topic?id=13015","console.delight - 브라우저 콘솔창에 CSS,SVG,HTML 사용하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             console.delight - 브라우저 콘솔창에 CSS,SVG,HTML 사용하기

     * 콘솔창을 이쁘게 만들어서 호기심 많은 사용자들에게 브랜드 형성하기
     * 포토샵 온라인 버전은 콘솔에서 아이콘과 다양한 색상들로 버전을 표시함
     * console.log/info 에는 제한적이지만 CSS/SVG 및 data:image를 활용하여 이미지 표현도 가능

콘솔에서 지원되는 기능들

     * SVG
          + 기본 SVG 표현들 : circle,path 등
          + Gradient, Clip Path, Mask, Filter, Transform, SMIL 애니메이션, foreignObject, Patterns
     * CSS
          + CSS 애니메이션, CSS 변수, @media 쿼리, Viewport 유닛
          + background-image: linear-gradient()
     * JavaScript
          + SVG 내에서 DOM 레퍼런스, SVG DOM 변경
          + Global 변수 및 CSS 변수 활용
     * HTML 렌더링
          + SVG와 비슷한 제한이 있음. a 태그 활용 불가. 이벤트 리스너 불가 등
          + SVG 의 foreignObject 안의 HTML은 3D Transform도 가능
"
"https://news.hada.io/topic?id=12970","Better Commit - 더 나은 커밋을 작성하기 위한 CLI 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Better Commit - 더 나은 커밋을 작성하기 위한 CLI 도구

     * Conventional Commits 스펙 을 따르는 더 나은 커밋 작성 도구
     * 상황별 질문에 답변하는 것만으로 쉽게 작성 가능
     * 일관되고 빠른 커밋을 위해서 브랜치에서 티켓 및 커밋 유형을 추론해 냄
     * 커밋 메시지 미리 보기 가능
     * 커밋 타입멸 Git Emoji 지원
     * 합리적인 디폴트 값을 제공하며, 모두 변경 가능
     * 글로벌 또는 Repo당 설정

   commitizen보다 더 깔끔한 것 같기도 하네요 ㅎㅎ

   https://github.com/commitizen/cz-cli

   https://marketplace.visualstudio.com/items/…
   for VSCode.

   Conventional Commits 스펙 - 한국어
"
"https://news.hada.io/topic?id=12988","메타(Meta)에서 제품 사용 중단을 자동화하는 방식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     메타(Meta)에서 제품 사용 중단을 자동화하는 방식

     * 대규모 조직에서 제품을 체계적으로 안전하게 사용 중단할 때 직면하는 복잡성과 메타가 개발한 내부 워크플로 도구
     * 소프트웨어 기업에서는 건강한 기술 라이프사이클의 일환으로, 특정 제품이나 기능 사용을 중단할 수밖에 없음
     * 메타에서는 제품 사용 중단 워크플로 관리 도구인 ‘Systematic Code and Asset Removal Framework(SCARF)’를 만들어 제품 제거 작업을 간소화
     * 이 도구는 엔지니어가 제품에서 사용할 수 없는 코드와 사용하지 않는 데이터를 안전하고 효율적으로 삭제하도록 지원
     * SCARF는 제품 사용을 중단하는 동안 엔지니어가 거쳐야 할 단계를 이해하고, 이를 세분화하도록 도움
     * 엔지니어 지도에 따라 자동화하도록 SCARF 작업을 조율할 수도 있음
     * SCARF는 2022년 21개 데이터 시스템에 저장된 1280만 데이터 유형 가운데 페타바이트에 달하는 미사용 데이터를 제거함
     * 이는 지난 5년 동안 코드 1억 줄 이상을 삭제함

   페타바이트의 데이터가 제어되었다니.. 저정도면 환경에 도움이 되었겠는데요.

   네, 정말 압도적인 규모라서 눈길이 또 가더라고요. ㄷㄷㄷ
"
"https://news.hada.io/topic?id=12918","Willow - P2P 데이터 스토어를 위한 프로토콜 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Willow - P2P 데이터 스토어를 위한 프로토콜

P2P 데이터 저장소를 위한 프로토콜

     * 세밀한 권한 부여: 데이터에 대한 읽기 및 쓰기 접근을 의미 있는 범위나 시간대에 따라 제한할 수 있음
     * 프라이버시 중시 접근법: 다른 사용자는 관심 있는 내용을 알 수 없으며, 알게 되더라도 동기화된 데이터를 해독할 수 있어야 함
     * 파괴적 편집: 값을 업데이트할 때 이전 값과 관련 메타데이터가 덮어씌워짐
     * 작은 대역폭 및 메모리 사용량: 데이터를 선택적으로 동기화하고, 제한된 메모리를 가진 장치도 동기화 가능

Willow 제작 이유

     * 오프라인 되지 않는 데이터 저장: 텍스트, 미디어 등 임의의 데이터를 항상 사용할 수 있는 저장소 제공
     * 개인정보 보호 및 종단 간 암호화: 다른 사용자는 관심 있는 내용을 알 수 없으며, 알게 되더라도 동기화된 데이터를 해독할 수 있어야 함
     * 데이터의 완전한 삭제: 분산 시스템은 삭제를 알리기 위해 톰스톤을 사용하지만 메타데이터가 남아 있음. 접두사 가지치기를 통해 많은 항목과 모든 메타데이터를 완전히 삭제하고, 그 자리에 단 하나의 톰스톤을 남김

추가 기능

     * 부분 동기화: 많은 데이터가 있지만 특정 장치에 전체를 동기화하고 싶지 않은 경우, 무엇, 언제, 누구에 의한 데이터를 복제할지 선택 가능
     * 파괴적 편집: 값을 업데이트할 때 이전 값과 관련 메타데이터가 덮어씌워짐
     * 로컬 데이터 삭제: 다른 사람이 작성한 데이터라도 원하지 않는 데이터를 로컬에서 삭제 가능
     * 자원 예산 통신: 메모리가 매우 제한된 장치도 동기화할 수 있도록 피어 간 자원 예산을 소통 가능
     * 사용자 정의 전송 및 암호화 원시 데이터: 사용 사례에 적합한 전송 및 암호화 원시 데이터를 선택 가능
     * 다중 장치에서의 동시 작성: 저자는 여러 장치에서 동시에 작성할 수 있음

프로젝트 지원

     * 이 프로젝트는 유럽위원회의 Next Generation Internet 프로그램 하에 DG Communications Networks, Content and Technology의 후원으로 NLnet이 설립한 NGI Assure Fund를 통해 자금을 지원받았음.
     * 다른 후원자들에게도 지원에 대한 감사를 표함.

GN⁺의 의견

     * 혁신적인 데이터 동기화: Willow는 데이터 동기화와 개인정보 보호에 혁신적인 접근을 제공하여 사용자가 데이터를 더 안전하고 효율적으로 관리할 수 있게 함.
     * 유럽위원회 지원: 유럽위원회의 지원을 받는 프로젝트로서, 유럽 내에서 데이터 보호와 프라이버시에 대한 중요성이 강조되고 있음을 보여줌.
     * 다양한 사용 사례 적용 가능: 다양한 장치와 환경에서 사용할 수 있도록 설계되어, IoT 장치부터 모바일 애플리케이션에 이르기까지 광범위한 분야에 적용 가능함.

        Hacker News 의견

     * 프로토콜 설계에서는 명확한 답이 없는 질문들이 존재함.
          + 예를 들어, 네임스페이스를 사람이 읽을 수 있는 문자열로 식별해야 하는지, 아니면 디지털 서명 스킴의 공개 키로 식별해야 하는지는 전적으로 사용 사례에 달려 있음.
          + 이러한 질문을 피하기 위해 Willow 데이터 모델은 특정 매개변수 선택에 대해 일반적임.
          + Willow를 사용하여 네임스페이스의 식별자로 문자열을 사용하거나, 256비트 정수, URL, 홍채 스캔 등을 사용할 수 있음.
          + Willow는 고차 프로토콜로, 매개변수에 대한 구체적인 선택을 제공하면 그에 따른 구체적인 프로토콜을 얻을 수 있음.
          + 서로 다른 시스템이 Willow를 다른 매개변수로 구현하면, 두 시스템은 상호 운용이 불가능함에도 불구하고 모두 Willow를 사용한다고 주장할 수 있음.
     * Willow와 다른 프로토콜들, 예를 들어 IPFS와의 비교:
          + IPFS에서 데이터는 불변, 상태 없음, 전역 네임스페이스를 가짐.
          + 반면 Willow에서 데이터는 가변, 상태 있음, 조건부 네임스페이스를 가짐.
          + Willow는 인증된, 허가된, 내용 기반의, 전역적으로 주소 지정된 분산 데이터베이스 시스템으로 해석됨.
          + 주소는 URL의 계층성과 표현력을 가짐.
          + 문서의 특징 중 하나는, 밑줄이 그어진 단어 위로 마우스를 올리면 팝업 박스가 정의나 설명을 제공함.
          + 팝업 내의 일부 용어는 밑줄이 그어져 있어, 용어에 대한 깊은 이해를 쉽게 얻을 수 있음.
     * IPFS와의 비교:
          + 개인적으로 IPFS는 실제 사용에서 실망스러웠으며, 후속 제품에 대한 기대가 큼.
          + IPFS의 약속은 크지만, 사용하기에 매우 느리고, 불편하며, 버그가 많음.
          + 큰 아이디어를 가지고 있지만, 사용성을 높일 수 있는 세심한 마무리가 부족함.
          + 파일 컬렉션이 커지면 시스템이 자체 무게를 견디지 못하고 무너짐.
          + 자원을 더投入해도 일정 수준을 넘으면 시스템이 완전히 붕괴됨.
     * Willow가 실제로 어떤 사용자의 요구에 이상적으로 부합하는지에 대한 구체적인 응용 프로그램에 대한 혼란.
     * 다른 댓글에서 IPFS, Dropbox, Syncthing 등이 언급되었지만, Willow는 P2P를 사용하고 Upspin은 중앙 집중식 키 서버를 사용하는 점을 제외하고 Upspin과 가장 유사함.
     * libp2p와 함께 작업을 시도했지만, Willow는 낮은 수준의 세부 사항을 처리하는 데 매우 유망해 보임.
          + 문서를 깊이 있게 살펴보지는 않았지만, 다양한 응용 프로그램을 즉시 모델링할 수 있을 것으로 보임.
     * Willow가 순수한 사양인지, 아니면 구현된 것이 전혀 없는지에 대한 질문.
     * 네임스페이스가 존재하는데 서브스페이스의 목적은 무엇인지, 키에 구분자가 있는 이유는 무엇인지에 대한 질문.
     * 문서의 일러스트레이션을 매우 좋아함.
     * 분산형이며 ICO가 필요 없음.
"
"https://news.hada.io/topic?id=13007","Winlator: 와인을 이용해 안드로이드에서 윈도우 앱을 실행할 수 있는 애플리케이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Winlator: 와인을 이용해 안드로이드에서 윈도우 앱을 실행할 수 있는 애플리케이션

     * Winlator 소개
          + Winlator는 Wine과 Box86/Box64를 이용하여 Windows (x86_64) 애플리케이션을 안드로이드에서 실행할 수 있는 앱임.
          + Windows 호환성 계층(x86_64)을 개발한 ptitSeb과 Wine 개발자들에게 깊은 감사를 표함.
          + ptitSeb의 Box86/Box64에 대한 지속적인 헌신과 Wine 개발자들의 끊임없는 개선 덕분에 이 프로젝트가 가능해짐.
     * 다운로드 및 크레딧
          + 최신 버전 다운로드 가능.
          + Ubuntu RootFs (Focal Fossa), Wine (winehq.org), Box86/Box64 by ptitseb, PRoot (proot-me.github.io), Mesa3D (mesa3d.org), DXVK (github.com/doitsujin/dxvk), D8VK (github.com/AlpyneDreams/d8vk), CNC DDraw (github.com/FunkyFr3sh/cnc-ddraw) 등의 서드파티 앱에 대한 크레딧 제공.
     * 저작권 정보
          + 저작권 © 2024 - BrunoSX에 의해 애정을 담아 개발됨.

GN⁺의 의견

     * Winlator는 안드로이드 사용자들이 Windows 애플리케이션을 실행할 수 있게 해주는 혁신적인 도구로, 기존의 플랫폼 제한을 넘어서는 사용자 경험을 제공함.
     * 이 앱은 오픈소스 커뮤니티의 협력의 결과물로, 다양한 오픈소스 프로젝트들이 어떻게 서로를 강화하고 새로운 가능성을 창출하는지 보여줌.
     * 특히, Wine과 Box86/Box64 같은 프로젝트들은 리눅스 기반 시스템에서 Windows 애플리케이션을 실행할 수 있게 하는 중요한 기술로, 이를 통해 사용자들은 하드웨어나 운영 체제에 구애받지 않고 필요한 소프트웨어를 사용할 수 있게 됨.

        Hacker News 의견

     * Fallout 3 비디오:
          + 800x600 해상도, 초당 약 20프레임, 높은 설정으로 실행된 Fallout 3 비디오 링크 공유.
     * Box+Wine 배포판:
          + 현재 여러 Box+Wine 배포판이 있으며, r/EmulationOnAndroid 커뮤니티는 olegos2의 mobox가 현재 최고 성능을 제공한다고 언급.
     * Wine on Windows:
          + Windows에서 Wine을 실행하는 것이 더 나은 역호환성을 제공할지 궁금함을 표현.
     * 맞춤형 소프트웨어:
          + 아내가 사진 앨범 제작을 위한 맞춤형 소프트웨어를 사용하기 때문에 대부분의 태블릿이 적합하지 않으나, 이를 통해 꿈의 기기를 제공할 수 있게 됨: 저렴하고, 가벼우며, 사진 제작이 가능한 기기.
     * Box86/64 언급:
          + 제목에서 언급되지 않았지만, Box86/64에 대한 언급.
     * Android 설치:
          + macOS VM에서 UTM이나 Parallels를 사용하여 Android를 설치할 수 있는지에 대한 질문.
     * Android 가상화:
          + Android를 가상화하여 x86을 에뮬레이트하는 방법에 대한 언급.
     * Wine을 사용한 소프트웨어 실행:
          + Linux에서 Wine을 사용하여 Microsoft Office, Netflix, Prime Video와 같은 DRM 서비스를 실행하는 방법에 대한 질문.
     * Linux로의 전환 고려:
          + Windows의 자원 낭비에 지쳐 새 노트북에서 Linux로 전환을 고려 중이며, Windows 10 설치를 원하지 않음. 하이퍼바이저에 대한 경험과 Linux 호스트에서도 성능 저하가 있을 수 있음을 언급.
     * Notepad++ 테스트:
          + Notepad++로 테스트해보고 예상대로 작동했으나 아직 개인적인 사용 사례는 찾지 못함.
     * Box86과 Linux, Wine:
          + Linux에서 실행되는 Box86과 Wine의 복잡해 보이는 설정이 현재로서는 가장 간단한 방법일 수 있으며 인상적임.
     * 음악 제작:
          + 이 방법이 음악 제작에 재미있을 수 있으며, Reason과 Live와 같은 소프트웨어가 얼마나 잘 작동할지 궁금함을 표현.
"
"https://news.hada.io/topic?id=12994","컴퓨터 없이 QR 코드를 읽는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          컴퓨터 없이 QR 코드를 읽는 기술

QR 코드의 구조

     * QR 코드는 21x21 모듈(픽셀이라고도 함) 크기로 구성되어 있으며, 이는 버전 1에 해당함.
     * QR 코드는 다양한 크기로 제공되며, 각 버전마다 크기가 4씩 증가함.
     * QR 코드의 다양한 부분들은 스캐너가 QR 코드를 인식하고 올바르게 읽을 수 있도록 도움을 줌.

마스크 패턴

     * QR 코드는 큰 검은색 또는 흰색 모듈 덩어리를 피하기 위해 마스크를 사용함.
     * 8가지 다른 마스크 옵션이 있으며, 각각의 패턴은 이야기를 통해 기억하기 쉽게 설명됨.

인코딩 모드

     * QR 코드의 내용을 해독하기 위해 먼저 내용의 인코딩을 알아야 함.
     * 인코딩 정보는 항상 오른쪽 하단에 위치하며, 마스크를 적용한 후에 확인할 수 있음.

읽기 순서

     * 내용은 오른쪽 하단에서 시작하여 지그재그로 두 열 사이를 올라가고 다음 열로 내려감.
     * 모든 특별한 영역은 건너뜀.

길이 해독

     * 길이 정보는 바이트 단위로 제공되며, 이는 QR 코드의 총 내용 길이를 나타냄.

내용 해독

     * QR 코드의 내용은 바이트 단위로 해독되며, 각 바이트는 ASCII 문자에 해당함.
     * 나머지 바이트들은 연습을 위해 사용자가 직접 해독할 수 있음.

오류 수정

     * QR 코드에는 일부가 손상되거나 불분명하거나 누락되더라도 여전히 읽을 수 있도록 오류 수정 기능이 포함되어 있음.
     * 오류 수정은 복잡한 수학을 사용하여 생성되지만, 수동으로 읽는 목적에서는 중요하지 않음.

축하합니다!

     * 이제 간단한 QR 코드를 수동으로 해독하는 데 필요한 모든 것을 배웠음.
     * 연습을 위해 ""Random code"" 버튼을 누르거나 실제 QR 코드를 찾아 ""Scan code"" 버튼을 사용할 수 있음.

   GN⁺의 의견
     * 이 글은 QR 코드의 작동 원리와 수동 해독 방법을 배우는 데 매우 유용함.
     * QR 코드의 각 부분과 마스크 패턴, 인코딩 모드 등을 이해하면 기술적 지식이 향상될 수 있음.
     * 오류 수정 기능에 대한 간략한 언급은 QR 코드의 견고성과 신뢰성을 이해하는 데 도움이 됨.

        Hacker News 의견

     *
          + 아타리 8비트 디스크의 내용을 PC로 전송하고자 했던 90년대 후반 또는 2000년대 초의 경험담
          + 아타리의 SIO 포트와 PC의 시리얼 포트를 연결하는 SIO2PC 케이블과 소프트웨어를 알고 있었으나, 직접 만들 전자 기술이 없었음.
          + 대신 아타리에서 디스크 데이터를 섹터별로 읽어 화면에 표시하는 베이직 프로그램을 작성함.
          + PC의 TV 카드에 연결된 아타리와 PC에서 실행된 델파이 프로그램을 통해 스크린샷을 찍고 데이터를 디코딩함.
          + 빈 섹터가 픽셀 위치 보정을 방해하여 마스크 패턴과 체크섬을 추가함.
          + 이 방법으로 모든 디스크 내용을 PC로 전송할 수 있었으며, 이를 최고의 엔지니어링 성과로 여김.
          + 약 10년 후, AspeQt라는 SIO2PC 프로그램을 개발함. RespeQt라는 더 최신 커뮤니티 포크가 아타리 커뮤니티에서 가장 인기 있는 도구로 남아있음.
     *
          + QR 코드에 대한 ASCII 인코딩 모드에 대한 질문과 오류 수정에 대한 요청
          + 기사에서 언급된 ASCII ""인코딩 모드""가 무엇인지, 다른 모드는 어떻게 읽는지 궁금함.
          + 오류 수정에 대한 설명을 요구하며, 수동으로 읽을 때도 오류 수정 계산이 필요함을 강조함.
     *
          + 오류 수정에 대한 추가 설명 요청
          + 오류 수정이 어디에 위치하는지, 어떻게 적용되는지에 대한 설명이 필요함.
          + 오류 수정이 포함된 QR 코드를 수동으로 읽을 수 있는지에 대한 질문.
     *
          + 관련된 해커뉴스 제출물 목록
          + 2012년, 2022년, 2020년, 2018년에 QR 코드 수동 해독에 관한 글들.
     *
          + QR 코드 읽는 방법에 대한 좋은 설명에 대한 감사와 1D 바코드, UPC 코드 해독에 대한 추가 정보 링크 공유.
     *
          + 기사의 동적 그래픽 생성 기능에 대한 칭찬.
     *
          + 2023년 미스터리 헌트의 일환으로 매우 손상된 QR 코드를 수동으로 해독해야 하는 퍼즐에 대한 경험담.
          + 여러 가이드를 참고했으나 완벽하지 않았고, 더 자세한 기사가 유용함을 언급.
     *
          + QR 코드의 오류 수정에 대한 호기심과 오류 수정이 7%에서 30%까지 복구 가능하다는 정보 공유.
     *
          + 수동으로 QR 코드를 읽으려 했던 경험과 마스크 패턴의 필요성에 대한 질문.
          + 최적의 오류 수정 설정에 대한 탐구와 실제 환경에서의 다양한 설정과 스캐닝 구현의 효과에 대한 연구 부족 언급.
          + QR 코드를 시각적으로 읽는 시도 포기 이유 중 하나는 URL이 대체로 아래에 적혀 있기 때문임을 언급.
     *
          + 10년 전 QR 코드 해독에 관한 비디오와 QR 코드 생성 과정에 대한 인터랙티브 웹 페이지 링크 공유.
"
"https://news.hada.io/topic?id=12892","일본의 소울 푸드: 오니기리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            일본의 소울 푸드: 오니기리

일본의 위로 음식: 오니기리

     * 일본의 편의점에 가면 항상 한 가지 아이템이 전용 선반에 진열되어 있음: 오니기리.
     * 오니기리는 ""쌀 공""으로 번역되며, 문자 그대로 ""한 움큼 쥐기""를 의미하고, 패스트푸드 이전의 일본의 전통적인 패스트푸드임.
     * 만들기도 빠르고 먹기도 빠르며, 가격도 저렴하고 집밥을 연상시키며 맛도 뛰어남.

오니기리란 무엇인가?

     * 가장 간단한 오니기리는 쌀과 소금 두 가지 재료만 있음.
     * 쌀을 지어 소금을 치고, 약 100g의 쌀을 삼각형 모양으로 부드럽게 눌러 만듦.
     * 맛을 더하기 위해 오니기리를 김(마른 해초)으로 감싸기도 함. 김은 바삭함을 주고 쌀의 맛을 보완하는 대조적인 풍미를 제공함.

오니기리의 간단하고 불완전한 역사

     * 고고학자들은 약 2,000년 전의 유적지에서 오니기리와 유사한 음식을 발굴함.
     * 오늘날의 오니기리는 전후 일본의 경제 기적에서 크게 부상함.
     * 2차 세계대전과 일본에 대해 이야기할 때, 대부분의 사람들은 히로시마와 나가사키에 투하된 원자폭탄을 기억함. 그러나 종종 그림자에 가려진 것은 연합군이 일본의 대부분 지역에 대해 수행한 대규모 카펫 폭격임.
     * 일본이 항복한 후, 국가를 재건하기 위해 성인(자주 어린이들도)이 뼈를 깎는 노력을 해야 했음. 그리고 그들은 그렇게 함. 이것이 일본의 일 중독의 뿌리가 시작된 곳임.
     * 이러한 바쁜 인구를 지원하기 위해 슈퍼마켓은 편리하고 친숙한 음식을 취급하기 시작함. 오니기리는 1952년 슈퍼마켓에서 처음 판매됨.
     * 이것은 흥미로운데, 오니기리는 결코 사거나 밖에서 먹는 음식이 아니었음. 집에서 만들어 도시락에 싸가는 것이었음.

편의점과 오니기리

     * 오니기리의 급격한 상승은 일본의 편의점 이야기와 불가분의 관계가 있음.
     * 24시간 영업하는 편의점(콘비니)은 고객들에게 친숙하고 신선하며 건강한 음식을 합리적인 가격에 제공하고자 함.
     * 7-Eleven은 오니기리를 처음으로 취급하기 시작했으며, 전통적인 맛으로 우메보시(절임 매실), 멘타이코(매운 명란), 다시마 등을 선보임.
     * 경쟁사들도 수요를 빠르게 인식하고 동참하여 곧 모든 편의점 체인이 자체 브랜드의 오니기리를 갖게 됨.

쌀, 해초, 그리고 많은 엔지니어링

     * 오니기리의 스타로 부상하는 이야기는 또한 일본의 엔지니어링 능력의 이야기임.
     * 기본적인 형태의 오니기리는 쌀 공을 김으로 감싼 것일 수 있지만, 그렇게 되면 김이 쌀에 달라붙어 고객이 구매할 때까지 축축해짐.
     * 일본의 동서부에는 오랜 경쟁이 있으며, 각 지역 사람들은 김을 다르게 선호함. 한쪽은 축축한 것을 좋아하고 다른 한쪽은 바삭한 것을 선호함.
     * ""쌀은 촉촉하고 푹신해야 하지만 김은 바삭해야 한다""는 엔지니어링 문제를 해결하기 위해 얼마나 많은 돈이 들어갔는지 믿기 어려울 정도임.

      ""분리 방식""

     * 시장에 처음 나온 오니기리는 ""분리 방식""을 사용했으며, 이는 이중 벽 팩에 김 한 장을 포함하고 있었음. 고객들은 김을 열고 오니기리 주위에 감쌌음. 작동은 했지만 많은 사람들이 불편하다고 느꼈음.

      ""낙하산 방식""

     * 80년대 초, 오사카의 신부 식품이 ""낙하산 방식""이라는 뛰어난 발명을 함. 이는 김과 오니기리를 분리하는데, 위에서 당기면 부드러운 오니기리에 신선한 김이 감싸짐.
     * 그러나 낙하산을 부드럽게 빼내기 위해 기름을 사용해야 했기 때문에 오니기리의 맛이 달라져 사람들이 불만을 가짐.

      ""절단 테이프 방식""

     * 다음 단계는 7-Eleven에서 나온 ""절단 테이프 방식""으로, 고객들은 포장을 세로로 관통하는 테이프를 찢기만 하면 됨. 이 방식은 기름을 사용하지 않고 오늘날 오니기리 포장의 기초를 형성함.

      ""절단 테이프 웨이브 방식""

     * 7-Eleven은 혁신에 안주하지 않고 포장을 더 쉽게 찢을 수 있도록 엔지니어링하여 ""절단 테이프 웨이브 방식""을 개발함.

항상 새롭지만 동일함

     * 오니기리는 다재다능하고 관리가 필요 없는 음식임. 자연재해가 자주 발생하는 국가인 일본에서 오니기리는 항상 첫 번째로 만들어져 대피소에서 나눠줌.
     * 일본은 매년 수십억 개의 오니기리를 소비하며, 겸손한 오니기리는 계속해서 개선됨. 매년 새로운 맛이 소개되고, 회사들은 새로운 쌀, 재료, 준비 방법의 조합을 시도함.
     * 그럼에도 불구하고 매년 몇 년 전과 같은 친숙한 오니기리처럼 느껴짐. 이것은 이 멋진 음식에 대한 지속적인 증거임.

GN⁺의 의견

     * 오니기리는 일본 문화에서 중요한 역할을 하는 음식으로, 간단한 재료로 만들어지지만 다양한 맛과 형태로 발전해 왔음.
     * 포장 기술의 발전은 일본의 엔지니어링 혁신을 보여주는 예로, 소비자의 편의성과 음식의 품질을 동시에 향상시키기 위한 노력의 결과임.
     * 오니기리의 인기와 지속적인 발전은 일본인의 일상생활과 밀접한 관련이 있으며, 전통과 현대 기술이 어우러진 일본 문화의 상징적인 요소임.

        Hacker News 의견

     * 일본의 동서부 간 오랜 라이벌 관계
          + 일본의 동서부 간에는 오랜 경쟁 관계가 있음. 서부의 간사이 지역에는 교토와 오사카가, 동부의 간토 지역에는 도쿄와 요코하마가 위치해 있음. 저자는 이해하지 못하지만, 간사이와 간토 사람들은 이러한 차이점을 자랑스러워함.
     * 일본의 역사적인 군사 대립과 지역적 영향력
          + 일본의 형태는 역사적으로 대략적인 양극의 군사 대립을 만들어냈으며, 많은 전국시대의 다이묘(영주)들 사이에서 동맹이 변화함. 수세기 전, 교토는 황실의 수도였고 오사카는 경제 수도였음. 일본 서부는 한국과 중국과 인접해 있으며, 상업적 및 문화적 교류로 인해 이 지역은 부유하고 강력해짐. 16세기 말, 노부나가라는 전국시대의 다이묘가 일본 대부분을 통일했지만, 동료에게 배신당함. 그 후 격렬한 권력 투쟁이 일어나고, 1600년 세키가하라 전투에서 절정에 달함. 이 전투는 일본 중앙부에서 일어났으며, 승자인 도쿠가와 이에야스는 쇼군이 되어 에도(현재의 도쿄)에 기반을 둠. 그의 패배한 라이벌은 오사카에 기반을 둠.
     * 에도(도쿄)의 발전과 도쿠가와 쇼군의 통치
          + 에도는 이에야스가 1590년경 도착하기 전까지는 작은 어촌에 불과했으나, 그가 성을 재건하고 자신의 기지로 만듦. 세키가하라 전투에서 승리한 후, 그는 대부분의 전국시대 다이묘들에게 에도에 가문을 유지하도록 요구함(사실상의 인질로 만듦) 및 에도의 인프라 구축을 위해 자금과 노동력을 기여하도록 함; 5년 내에 에도는 약 15만 명의 대도시로 성장함. 도쿠가와는 또한 국가를 폐쇄하고 외국과의 무역을 금지함, 특히 경쟁자들이 해외에서 군대와 자본을 모으는 것을 방지하기 위함. 그의 가문은 19세기에 쇼군제가 폐지되고 국가가 외부 세계에 개방될 때까지 일본을 통치함. 에도는 도쿄로 개명되고 공식 수도가 됨, 그러나 황실 가족은 20세기 초 태조 황제가 도쿄로 이사할 때까지 교토에 거주함.
     * 일본에서의 편안함과 오니기리에 대한 사랑
          + 일본에서 가장 안심되는 느낌은 언제나 참치 마요 오니기리를 3분 거리 내에서 찾을 수 있다는 것임.
          + 오니기리를 좋아하지만 삼각형으로 만드는 것이 어려워서, 어느 날 모든 재료를 그릇에 넣고 섞어 '오니기리볼'을 즐기게 됨.
          + 2014년과 2023년에 일본 여행을 갔을 때 오니기리를 많이 먹었음. 최근 여행에서는 가격은 크게 변하지 않았지만 속 재료가 줄어든 것을 발견함, 이는 비즈니스 관점에서 이해가 됨.
     * 오니기리에 대한 다양한 의견과 경험
          + 미국의 포켓몬 팬들에게는 젤리가 들어간 도넛으로 알려짐.
          + 최고의 오니기리는 직접 만든 것임. 편의점 오니기리는 급할 때 편리하지만, 올바른 만드는 방법을 아는 사람이 만든 집에서 만든 오니기리에 비하면 훨씬 떨어짐. 또한, 집에서 만든 오니기리는 훨씬 다양한 종류가 있으며, 넣을 수 있는 재료와 섞을 수 있는 것들이 무한함, 후리카케는 오니기리 만들기에 좋음.
          + 오니기리를 직접 만들 수 있는 저렴한 삼각형 도구가 있음. 적절한 쌀과 노리를 투자하면 그 후에는 만들기가 쉬워짐.
          + 일본에서 휴가를 보낼 때 7/11 오니기리로 점심을 거의 해결함.
     * 오니기리의 국제적인 영향과 문화적 변형
          + 현지 7/11에서도 이제 오니기리를 판매함. 시도해보고 성공하길 바람.
          + 필리핀에는 자체 버전의 오니기리가 있음.
          + 일본에서 걸스카우트에 가입한 내 딸들은 야외 활동 시 '걸벤'이라고 불리는 걸스카우트 도시락을 준비함. 이는 그들이 원하는 재료로 만든 2~3개의 오니기리를 의미함.
"
"https://news.hada.io/topic?id=12990","터미널 색 구성 '과학적'으로 조리하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         터미널 색 구성 '과학적'으로 조리하기

   부제: 인간의 색상 감각을 이과식으로 파해치기

   개발자라면 오랜 시간 바라보게 되는 터미널... 파랑이 너무 어둡죠. 초록은 너무 밝아 눈이 시립니다.

   좋은 색 구성이 필수겠죠?

   최적의 16색을 찾기 위해... 언제까지 감성에만 의지하시겠습니까?
   색각 모델(Color appearance model)을 사용하면 '과학적'으로 색을 다룰 수 있습니다.

   색각 모델을 써서 정석적이면서도 잘 보이는, new standard를 지향하는 터미널 색 구성을 만들어봤습니다.

   글의 내용은 다음과 같습니다.
     * 터미널 16색 기본 설정들의 문제
     * 색각 모델에 대한 소개
     * 파이썬을 사용한 색각 모델 활용 맛보기
     * 색각 모델을 사용한 터미널 16색 선정
     * 색 설정 다운로드

   마지막으로 의견 반영 후, 생성 코드와 색 설정 정리하여 별도의 Github 리포지토리에 업로드 하려고 합니다.

   많은 의견 부탁드립니다. 감사합니다.

   저는 'terminator' 를 사용 중인데..
   혹시 이쪽에도 적용 할 수 있을까요?

   https://github.com/dofuuz/dimidium
   별도의 저장소로 분리했습니다. 아직 마무리 작업중이며, 의견도 계속 받고 있습니다!

   mobaxterm은 사용 하지 않으신가요....?
   mobaxterm 설정파일도 있으면 좋을 것 같습니다

   비슷한 이유로 저는 솔라라이즈드류만 사용합니다. https://ethanschoonover.com/solarized/

   색상의 종류 (16) 뿐 아니라, 색상 하나하나의 정의가 한정적일 수 밖에 없던 시대에 정의된 색상을 그대로 사용하고 있었나보네요. 좋은글 잘 봤습니다.

   잘 쓰고 있습니다. 감사합니다.

   Tango랑 비슷한 느낌이네요.

   Caminal Dimidium 으로 이어서 쓰시면 괜찮을 거 같기도 합니다
   좋은 조정법 소개 감사합니다

   시험할 수 없는 서비스는 Show 에 맞지 않아 이동하였습니다.

   확실히 터미널 파란색은 너무 어둡다고 생각하긴 했습니다.
   이렇게 하니까 보기 편해지는 것 같네요.

   참고로 Show GN은 블로그 게시글 보다는 깃허브 저장소 등을 링크하게 되어 있어서,
   깃허브로 릴리즈 하고 난 뒤에 사용해 주셔도 좋을 것 같습니다.

   추후에 추가하신건진 모르겠지만 본문에 깃허브 저장소 링크가 있긴 하네요.
   https://github.com/dofuuz/dotfiles/

   지금 위 리포지토리는 다른 파일들과 섞여있는 상태입니다.

   근시일 내에 터미널 색 구성만 분리해서 별도의 리포지토리로 올릴 예정입니다.

   무지성으로 커맨드 복붙해서 실행했다가 .zshrc파일 내용 날라가서 대재앙을 겪었습니다. 다른분들은 조심하시길..

   확실히 더 보기 편하네요
   저는 백그라운드는 #303030 / rgb(48,48,48) 정도를 선호합니다.
   텍스트뷰어나 웹사이트의 다크모드 색상을 참고하시는 것도 좋을 것 같아요
"
"https://news.hada.io/topic?id=12915","HN 소개: 여행 중 햇볕을 피할 수 있는 최적의 버스 좌석을 찾는 웹사이트 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HN 소개: 여행 중 햇볕을 피할 수 있는 최적의 버스 좌석을 찾는 웹사이트 개발

   이 기사는 특정한 내용을 담고 있지 않으며, 시간대 설정과 지도 서비스를 나열하는 텍스트로 구성되어 있습니다. 따라서 요약할 내용이 없습니다.

        Hacker News 의견

     * ""zonopjebakkes/seatsinthesun""이라는 테라스가 햇볕이 잘 드는 바와 카페를 찾는 서비스에 대한 긍정적인 반응
          + 한 사용자는 이와 유사한 아이디어를 23년 전에 생각했으나, 태양의 위치 계산에 몰두하다가 결국 완성하지 못했다고 언급하며 프로젝트 완성에 대한 칭찬을 전함.
          + 다른 사용자는 ""shademap""과의 통합을 제안하며 여정 중 그늘과 햇볕을 시각화하는 아이디어를 제시함.
     * 안데스 산맥을 버스로 여행하며 그늘진 자리를 선택한 것에 자부심을 느꼈던 사용자의 경험담
          + 그러나 남반구에서는 태양이 북쪽에 위치한다는 사실을 깨닫고 자신이 오히려 자기 자신을 속인 것을 인지함.
     * 일상생활의 소소하지만 의미 있는 부분에 대한 개선 노력을 높이 평가하는 의견
          + 프로젝트의 훌륭한 실행에 대해 칭찬하며, 전 세계 어디에서나 작동한다는 점을 강조함.
     * 지역 제한이 없어 어느 장소나 목적지에도 적용 가능한 서비스에 대한 감사의 표현
     * 지도/경로 앱이 날씨 예보를 시각적으로 표시하는 기능을 포함했는지에 대한 질문
          + 예를 들어, 예상 도착 시간에 해당 위치의 예보를 기반으로 한 폭풍구름 표시 등을 언급하며, 구글이 Waze를 인수한 이후 경로 앱의 혁신이 정체되었다고 느낌.
     * 그늘진 곳이 편안하지만, 하루 120분의 간접적이거나 직접적인 UVB 노출이 시력 건강에 도움이 될 수 있다는 연구 결과 공유
          + 어린 시절 나무 아래에서 하루 120분을 보내는 것이 중요하다고 언급하며 관련 연구 논문을 인용함.
     * 서비스가 좋은 아이디어이며 어느 정도 작동하지만, 버스 노선을 사용하지 않고 가장 빠른 경로를 제시하는 문제점 지적
          + 버스 노선을 통합하는 것이 어려울 수 있으며, 이를 위해 여러 API를 연동하거나 구글에 비용을 지불해야 할 수도 있다는 의견 제시.
"
"https://news.hada.io/topic?id=12999","미국 국립공원 서비스 API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            미국 국립공원 서비스 API

NPS 데이터 API 소개

     * NPS 데이터 API는 모든 개발자들이 국립공원 서비스(NPS)의 데이터를 자신들의 프로젝트에 사용할 수 있도록 공개되어 있음.
     * API(Application Programming Interface)는 한 애플리케이션이 다른 애플리케이션과 대화할 수 있게 하는 일련의 요구사항을 말함.
     * 이 API를 통해 공식적이고 권위 있는 데이터와 콘텐츠를 NPS.gov뿐만 아니라 내부 및 외부 개발자들이 앱, 지도, 웹사이트 등에서 사용할 수 있음.

사용 가능한 데이터

     * NPS API 문서에는 사용 가능한 데이터 유형에 대한 자세한 정보가 포함되어 있음.
          + 경보: 국립공원 방문에 영향을 줄 수 있는 위험하거나 잠재적으로 위험한 상황에 대한 정보를 전달하는 공지.
          + 기사, 인물, 장소: 공유 콘텐츠 기사의 제목, 이미지, 짧은 설명.
          + 캠핑장: 국립공원 내 캠핑장의 위치, 연락처, 운영 시간, 시설 편의, 요금, 접근성 정보.
          + 이벤트: 국립공원에서 진행되는 이벤트의 날짜, 시간, 요금, 설명.
          + 교육 계획: 교사가 교실에서 사용할 수 있는 국립공원에 대한 교육 계획의 목표, 학년, 과목, 기간, 기준 정보.
          + 뉴스 릴리스: 국립공원 뉴스 릴리스의 제목, 요약, 링크 및 선택적 이미지.
          + 공원: 각 국립공원의 위치, 연락처, 운영 시간, 입장료/패스 정보 및 각 공원의 최소 다섯 장의 사진.
          + 방문자 센터: 국립공원 내 방문자 센터 및 기타 방문자 접촉 시설의 위치, 연락처, 운영 시간 정보.

개발자가 API를 사용하는 방법

     * 개발자들은 API 키를 등록하고, API 요청 형식에 익숙해지며, NPS 데이터 API 웹사이트에서 API 리소스를 검토할 수 있음.

API의 미래

     * NPS API 로드맵을 확인하여 개발 중이거나 추가를 고려 중인 내용을 알아볼 수 있음.

   GN⁺의 의견
     * NPS 데이터 API는 개발자들이 국립공원과 관련된 다양한 데이터를 활용하여 창의적인 앱이나 웹사이트를 개발할 수 있는 기회를 제공함.
     * 이 API는 국립공원 방문객들에게 유용한 정보를 제공하고, 교육적 자료를 통해 학생들에게 자연과 환경에 대한 인식을 높이는 데 기여할 수 있음.
     * 공식적이고 신뢰할 수 있는 데이터를 제공함으로써, 사용자들이 정확하고 최신의 정보를 바탕으로 국립공원을 탐험하고 계획을 세울 수 있게 도와줌.
"
"https://news.hada.io/topic?id=12943","데이브 밀스가 사망하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              데이브 밀스가 사망하다

Dave Mills의 부고

     * Dave Mills가 2024년 1월 17일에 평화롭게 세상을 떠남.
     * 초기 인터넷의 상징적인 인물로, 네트워크 시간 프로토콜(NTP), 초기 NSFNET의 Fuzzball 라우터, INARG 태스크포스 리더, COMSAT Labs, 델라웨어 대학교 등에 기여함.
     * 그의 딸 Leigh가 이 소식을 전달함.

  GN⁺의 의견

     * Dave Mills는 인터넷 역사에서 중요한 인물로, 그의 기술적 기여는 오늘날 우리가 사용하는 인터넷의 기반을 형성하는 데 중요한 역할을 함.
     * 특히 네트워크 시간 프로토콜(NTP)은 전 세계 컴퓨터 시스템의 시간을 동기화하는 데 필수적인 기술로, 현대 디지털 통신의 정확성과 신뢰성을 보장하는 데 기여함.
     * 이 소식은 기술 커뮤니티에 큰 손실을 알리는 것으로, Mills의 업적은 앞으로도 오랫동안 기억될 것임.

        Hacker News 의견

     * 개인 프로젝트로 NTP와 GPS, PPS에 매우 관심을 가지게 됨. 최근 위키백과에서 그에 대해 읽으면서, 다른 사람들이 PPS에 관심을 보이지 않았을 때 그가 느꼈던 것과 공감함. Debian이 NTPSec으로 전환했을 때, 그들의 웹사이트 스타일이 NTP의 원래 사이트와 비슷하여 반가움. 웹사이트가 1990년대 스타일인 이유는 시각 장애가 있는 사람들을 위하고, NTP의 원래 설계자인 시각 장애가 있는 Dr. David Mills에게 경의를 표하기 위함임을 FAQ에서 발견함. Dr. Mills를 만난 적은 없지만, 그는 분명 긍정적인 영향을 미침. Dr. Mills의 명복을 빔.
     * 뉴요커지가 1년 전에 NTP에 대한 기사를 게재함. 인터넷 작동 방식에 관심 있는 사람에게 추천함. Dave에게 감사하며 명복을 빔.
     * 학생 시절 Dave Mills가 도움을 줌. 1999년 NTP에 대한 연구를 했고, 그에게 메일링 리스트와 질문을 통해 유용한 조언을 받음. NTP는 놀라운 기술로, 메가헤르츠 컴퓨터와 메가비트 네트워크에서 밀리초 동기화를 이루는 것은 쉽지 않았음. Mills는 혼자 만든 것이 아니라, 오늘날까지 지속되는 인터넷 시간 관리 전문가 커뮤니티를 만드는 데 도움을 줌.
     * Dave Mills와 함께 일한 적이 있음. 리눅스에 adjtime 시스템 콜을 추가했을 때 그와 조금 일함. 그가 만든 것들은 잘 작동하고 여기저기서 실행됨. 그는 위대한 유산을 남김. 그를 기억할 것임.
     * 수십 년 동안 그와 연락하지 않았지만, TCP/IP가 시작될 때 그를 알고 있었고, 그의 Fuzzballs이 라우터로 사용됨. - John Nagle
     * 90년대에 Dave를 몇 번 만남. 처음에는 UCL의 Peter Kirstein을 방문했을 때였음. 그와 펍에서 대화하며 네트워크 시간을 단순하게 생각했던 것이 얼마나 잘못됐는지 깨달음. NTP에 그가 녹여놓은 세부 사항에 대한 존경심을 가짐. 명복을 빔.
     * 관심 있는 사람을 위해 Dave Mills가 작성한 최신 NTP 버전의 참조 및 구현 가이드 링크 제공. 잘 작성되었다고 생각함.
     * NTP에 기여함. 저렴한 장치의 제조업체가 ntpd 내에서 예상보다 훨씬 더 높은 정밀도를 생성하도록 설득함. 그들은 상업용 드라이버 작성을 위해 괜찮은 돈을 제안했지만, 대부분의 플랫폼에서 이미 NTP를 사용하도록 고객을 안내할 수 있다고 지적함.
     * Dave의 초기 인터넷에 대한 강연 링크 제공.
     * Dennis와 Ken만큼이나 그의 영향을 받음. ""nanokernel"" 논문은 NTP를 나노초 영역으로 끌어올리고 FreeBSD에 ""timecounters""를 제공함. 그러나 진정한 공통의 열정은 Loran-C였음. Dave는 베트남 전쟁 중 ""tactical Loran-C""를 발명함. 저렴한 ARM 칩으로 받은 춤추는 펄스를 보여줄 때 그는 매우 자랑스러워함. 미국이 Loran-C를 중단했을 때 그는 정말 화가 났음. 그는 ""loudenboomers""를 정말 사랑함. 명복을 빔.
"
"https://news.hada.io/topic?id=12968","Bun Shell - Javascript 개발자를 위한 쉘 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Bun Shell - Javascript 개발자를 위한 쉘

     * Javascript/Typescript에서 Shell 호출이 쉬워짐
     * 크로스 플랫폼으로 리눅스/윈도우/맥 모두 사용 가능
          + 공통적인 명령 및 기능들을 모두 내부적으로 구현 : globbing, 환경변수, redirection, piping
     * JavaScript는 세계에서 가장 인기 있는 스크립팅 언어임에도 불구하고, 쉘 스크립트를 실행하기가 어려움.
     * child_process 모듈의 spawnSync 함수를 사용하거나 fs/promises의 readdir 함수를 사용해 비슷한 작업을 할 수 있으나, 기존 쉘 스크립트만큼 간단하지 않음.

기존 쉘과 JavaScript의 호환성 문제

     * bash나 sh 같은 쉘은 수십 년 동안 사용되어 왔으나 JavaScript에서는 잘 작동하지 않음.
     * macOS의 zsh, Linux의 bash, Windows의 cmd는 서로 다른 문법과 명령어를 가지고 있어 호환성 문제 발생.
     * npm은 커뮤니티가 JavaScript 구현으로 빠진 명령어를 채우는 방식을 사용해왔음.

    Windows에서 작동하지 않는 명령어들

     * rm -rf 명령어는 Windows에서 작동하지 않아 rimraf라는 크로스 플랫폼 JavaScript 구현이 주당 6000만 번 다운로드됨.
     * 환경 변수 설정은 플랫폼마다 다르며, Windows에서는 cross-env를 사용해야 함.
     * which 명령어는 Windows에서 where로 사용되어, 이를 위한 패키지도 주당 6000만 번 다운로드됨.

    쉘의 시작 시간 문제

     * 쉘을 시작하는 데 걸리는 시간은 리눅스 x64 Hetzner Arch Linux 기계에서 약 7ms 소요됨.
     * 단일 명령어를 실행하는 경우 쉘을 시작하는 시간이 명령어를 실행하는 시간보다 길 수 있음.
     * 많은 명령어를 루프에서 실행할 경우 비용이 많이 들 수 있음.

폴리필의 필요성

     * 2009년부터 2016년까지 JavaScript가 상대적으로 새롭고 실험적이었을 때, 커뮤니티가 빠진 기능을 폴리필하는 것은 의미가 있었음.
     * 하지만 2024년 현재, 서버에서의 JavaScript는 성숙하고 널리 채택되었으며, JavaScript 생태계는 현재 요구사항을 이전보다 잘 이해함.

Bun Shell 소개

     * Bun Shell은 Bun에 내장된 새로운 실험적 언어 및 인터프리터로, JavaScript 및 TypeScript에서 크로스 플랫폼 쉘 스크립트를 실행할 수 있게 해줌.
     * Bun Shell을 사용하면 JavaScript 변수를 쉘 스크립트에 사용할 수 있고, 모든 템플릿 변수는 이스케이프 처리되어 보안을 강화함.
     * Bun Shell은 일반 JavaScript처럼 느껴지며, stdout을 버퍼나 파일로 리다이렉트하거나 다른 명령어로 파이프할 수 있음.
     * cd, echo, rm과 같은 내장 명령어를 사용할 수 있으며, Windows, macOS, Linux에서 작동함.
     * Bun Shell은 간단한 쉘 스크립트를 대체하기 위해 설계되었으며, Windows에서 Bun을 사용할 때 package.json ""scripts""에서 bun run을 구동함.
     * 독립적인 쉘 스크립트 인터프리터로도 사용할 수 있음.

    설치 방법

     * Bun Shell은 Bun에 내장되어 있으며, Bun v1.0.24 이상이 설치되어 있다면 바로 사용할 수 있음.
     * Bun이 설치되어 있지 않다면, curl이나 npm을 사용하여 설치할 수 있음.

GN⁺의 의견

     * Bun Shell은 기존 쉘 스크립트와 JavaScript의 호환성 문제를 해결하고자 하는 혁신적인 접근 방식을 제시함.
     * 크로스 플랫폼 지원과 간편한 사용법은 개발자들이 다양한 환경에서 일관된 스크립팅 경험을 할 수 있게 해줌.
     * 이러한 도구는 JavaScript 생태계의 성숙함을 반영하며, 빠르게 변화하는 기술 환경에서 개발자들의 생산성을 높이는 데 기여할 것으로 기대됨.

        Hacker News 의견

     *

     We've implemented many common commands and features like globbing, environment variables, redirection, piping, and more.
          + 새로운 쉘 구현이 일반적인 명령어와 기능들(글로빙, 환경 변수, 리다이렉션, 파이핑 등)을 포함하고 있음.
          + 하지만, 기존 쉘과 coreutils 구현과의 호환성에 대한 확신이 부족함.
          + POSIX 표준이나 Bourne 쉘과의 호환성을 목표로 하는지, GNU 확장 기능의 지원 여부가 불분명함.
          + 시스템에 GNU coreutils가 있을 때의 상황과 향후 내장 명령어 추가 시 예상치 못한 변경이 발생할 수 있는지에 대한 세부 사항이 부족함.
          + ZShell과 같은 Bourne 호환 쉘을 이 쉘로 교체하는 것은 대부분의 상황에서 바람직하지 않음을 지적함.
          + JS 생태계에서는 이미 다양한 쉘과 호환되는 명령어를 작성해야 하므로, Bourne 호환 쉘의 유용한 부분 집합을 표준화하는 것이 대부분의 플랫폼에서 이미 작동하는 것과 거의 100% 호환되면서도 모든 플랫폼에서 의도한 대로 작동하게 만들 수 있음.
     * Love that bun just implements anything that could be useful.
          + Bun이 유용할 수 있는 모든 것을 구현한다는 점을 긍정적으로 평가함.
     * This looks exactly like zx by Google. And that's probably a good thing.
          + 이 쉘 구현이 Google의 zx와 매우 유사해 보임. 이는 좋은 일일 수 있음.
     *

     $ hyperfine --warmup 3 'bash -c ""echo hello""' 'sh -c ""echo hello""' -N
          + Arch Linux에서 /bin/sh가 bash로의 심볼릭 링크이기 때문에 실제로 동일한 것을 측정하고 있음을 지적함.
          + Debian과 같은 시스템에서는 /bin/sh가 dash로, bash보다 시작과 일반적인 성능에서 몇 배 더 빠름.
     * I work on Bun - happy to answer any questions/feedback
          + Bun 개발자로서, 질문이나 피드백에 답변할 준비가 되어 있음.
     * This is neat, but a) it strikes me that what's powerful about shell scripting is that it lets you easily wrangle multiple independent utilities that don't need to be contained within the shell stdlib (maybe I'm missing something but I didn't see any emphasis on that), and b) that embedding a language as a string inside another language is very rarely a good UX.
          + 쉘 스크립팅의 강력한 점은 독립적인 유틸리티들을 쉽게 다룰 수 있다는 것인데, 이 새로운 쉘에서는 그러한 강조점을 찾기 어려움.
          + 한 언어를 다른 언어 내부의 문자열로 내장하는 것은 좋은 사용자 경험이 아님을 지적함.
          + 그러나 이 쉘의 이식성은 실제로 큰 문제를 해결함.
     * For something which works across all JS runtimes (Deno, Node) and achieves basically the same, check out the popular JS library Execa[1]. Works like a charm!
          + 모든 JS 런타임(Deno, Node)에서 작동하고 기본적으로 동일한 기능을 제공하는 Execa[1] JS 라이브러리를 추천함.
     * Another alternative is the ZX shell[2] JS library. Tho haven't tested it.
          + ZX shell[2] JS 라이브러리도 대안이 될 수 있음. 하지만 테스트는 해보지 않음.
     * I love Bun. I no longer use Node for development. Hardly any gotchas anymore. It's just faster all over. Especially bun test. Highly recommended. Thank you @Jarred!
          + Bun을 매우 좋아하며, 더 이상 개발에 Node를 사용하지 않음. 거의 문제가 없고, 전반적으로 더 빠름. 특히 bun test가 매우 빠름. 강력히 추천함.
     * I didn't know, but apparently you can execute a function in JS without parentheses using upticks (`), e.g:
          + JS에서 함수를 괄호 없이 역따옴표(`)를 사용하여 실행할 수 있음을 알게 됨. Bun도 쉘 명령어를 실행하기 위해 달러 기호($) 함수를 사용하는데, 이는 JS의 이상한 문법 마법 중 하나임.
     * Great, it's approaching the ergonomics of what Perl has offered for decades. And Perl still does it better.
          + 이 쉘은 수십 년 동안 Perl이 제공해온 인간공학에 접근하고 있음. 그리고 Perl이 여전히 더 잘함을 평가함.
"
"https://news.hada.io/topic?id=12914","플루오라이트 렌즈: 일반 광학 유리를 뛰어넘는 교정 능력","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    플루오라이트 렌즈: 일반 광학 유리를 뛰어넘는 교정 능력

특별 전시회: 플루오르 렌즈

     * 캐논 렌즈의 높은 화질을 지원하는 중요한 재료 중 하나는 플루오르라고 불리는 결정화된 불화칼슘임.
     * 플루오르 렌즈를 유리 렌즈와 함께 사용하면 색수차를 극도로 낮출 수 있음이 잘 알려져 있음.
     * 캐논은 이미징 기능의 발전을 추구하며, 플루오르 광석을 원료로 사용하여 대형 고순도 인공 플루오르 결정을 형성하는 자체 기술 개발에 착수함.

플루오르 렌즈 요소가 색수차를 교정하는 방법

     * 색수차는 빛이 유리 표면을 통과할 때 다른 색상의 파장(빨강, 초록, 파랑 등)이 다른 각도로 굴절되어 각 색상이 다른 초점에서 수렴하기 때문에 발생함.
     * 일반적으로 오목렌즈와 볼록렌즈의 조합을 사용하여 교정하지만, 모든 파장의 색수차를 일반 유리로 교정하는 것은 불가능함.
     * 플루오르는 전통적인 광학 유리와는 근본적으로 다른 재료로, 유리와 결합하여 색수차를 더 효과적으로 교정하는 데 사용됨.

플루오르 렌즈의 출현과 망원 렌즈의 화질 개선

     * 플루오르 렌즈는 전통적인 한계를 뛰어넘어 색수차를 극도로 낮추며, 1966년 8월에 시작된 캐논 F 프로젝트에서 기원함.
     * 인공 플루오르 결정을 카메라 렌즈에 사용하기 위한 기술을 확립하는 것이 개발자들의 목표였음.
     * 인공 플루오르 결정을 대형 카메라 렌즈에 사용할 수 있을 만큼 크게 형성하는 데 성공한 것은 1968년의 일임.

플루오르 렌즈 생산 과정

     * 플루오르 렌즈 생산 과정의 각 단계는 천천히, 세심한 주의를 요함.
     * 원료는 자연 발생하는 플루오르 광석이며, 이를 분쇄하고 정제하여 불순물을 제거함.
     * 결정화는 1,400℃로 가열된 후 점차적으로 식혀 결정을 형성함.
     * 열처리(annealing) 과정은 결정 내부의 긴장을 제거하여 균열을 방지함.
     * 결정의 불필요한 부분을 제거하고, 필요한 크기로 거친 가공을 함.
     * 결정의 상하면을 구형으로 연마하고, 특수 연마 기술로 세밀하게 폴리싱함.
     * 증착 과정을 통해 연마된 렌즈에 얇은 필름을 형성함.
     * 숙련된 기술자가 간섭계를 사용하여 순도를 검사하고, 검사를 통과한 렌즈 요소만이 렌즈 조립으로 보내짐.

플루오르 렌즈 요소를 사용하는 렌즈들

     * FL-F300mm부터 시작하여 캐논은 플루오르 렌즈 요소를 사용하는 39개 이상의 렌즈를 생산함.
     * 플루오르 렌즈 요소는 색수차 교정뿐만 아니라 제품의 크기와 무게를 줄이는 데에도 기여함.
     * 많은 사진작가들, 특히 전문 스포츠 사진작가, 포토저널리스트, 야생 조류, 기차, 항공기 등을 촬영하는 애호가들에게 사랑받음.

   GN⁺의 의견:
     * 이 기사는 캐논의 플루오르 렌즈 기술에 대한 깊이 있는 설명을 제공하며, 이 기술이 사진 산업에서 어떻게 중요한 역할을 하는지 보여줌.
     * 플루오르 렌즈가 색수차를 줄이고 이미지 품질을 향상시키는 방법에 대한 설명은 사진과 광학에 관심 있는 초급 소프트웨어 엔지니어들에게 유익한 정보를 제공함.
     * 캐논의 기술 혁신과 끊임없는 개선 노력은 다른 기술 분야의 전문가들에게도 영감을 줄 수 있으며, 특히 재료 과학과 공정 기술의 중요성을 강조함.

        Hacker News 의견

     * 물질의 굴절률에 대한 설명
          + 굴절률은 일반적으로 약 1.5이지만, 고정된 단일 숫자가 아니라 파장에 따라 달라짐.
          + 파장에 따른 굴절률 그래프는 자외선에서 적외선으로 갈수록 감소하는 곡선을 보임.
          + 이러한 특성 때문에 볼록 렌즈는 파란색에서 더 큰 배율을 가지며, 녹색에서는 더욱 증가하고, 빨간색에서는 적당하며, 나트륨 증기 노란색에서만 기술적으로 정확함.
          + 이를 보정하기 위해 서로 다른 화학 조성을 가진 볼록렌즈와 오목렌즈를 사용하여 파란색에서의 추가적인 배율을 상쇄시킴.
          + 불소화칼슘(CaF2) 결정은 이러한 파장에 따른 굴절률 그래프에서 완전히 평평한 곡선을 보이며, 이를 '비정상 분산'이라고 함.
          + 불소화칼슘은 자연스럽게 모든 색상을 같은 지점에 초점을 맞추어 많은 렌즈의 필요성을 줄임.
          + 캐논은 수십 년 동안 광학적으로 투명한 칼슘과 불소의 결정을 카메라 크기로 확대하는 것에 도전하고 있음.
     * 분산이 중요한 이유에 대한 간단한 설명
          + 아포크로마틱 렌즈는 세 가지 다른 파장의 빛에 최적화된 렌즈임.
          + 과거에는 수작업으로 계산되었지만, 현재 컴퓨터를 사용하여 빠르게 최적화 가능.
          + 컴퓨터는 유리 제조업체가 제공하는 실제 굴절률과 분산 데이터를 기반으로 최적화를 수행함.
          + 불소는 코팅으로서도 특별한 성질을 가짐.
     * 불소화칼슘 렌즈의 장점
          + 불소화칼슘 렌즈는 고배율이나 시스템의 속도 한계에 도달했을 때 중요한 이점을 보임.
          + VR 안정화 기능과 결합되었을 때 크로마틱 수차가 현저하게 감소함.
          + 현대의 사진 편집 소프트웨어는 렌즈의 효과(비네팅, 핀쿠션)와 크로마틱 수차를 보정함.
     * 캐논의 불소화칼슘 렌즈 사용에 대한 새로운 정보
          + 캐논의 망원 렌즈에는 홀로그래픽 요소도 사용되며, 불소화칼슘을 통한 색상 보정에 대한 혁신적인 방법이 있음.
     * 렌즈에 플라스틱 요소가 포함된다는 사실
          + 현대 렌즈에는 유리뿐만 아니라 특별히 설계된 플라스틱 요소도 포함됨.
     * 크로마틱 수차 방지에 대한 설명 부족
          + 크로마틱 수차를 방지하는 데 도움이 되는 이유에 대한 설명이 부족함.
          + 굴절률이 유리와 거의 동일하므로, 그룹 속도 분산이 반대라는 점이 설명이 될 수 있음.
     * Super UD 및 UD 렌즈의 중요성
          + Super UD 및 UD는 오랫동안 렌즈의 골드 스탠다드였으며, 불소화칼슘은 이에 큰 역할을 함.
     * 소프트웨어를 통한 크로마틱 수차의 해결 가능성
          + 크로마틱 수차는 소프트웨어를 통해 해결할 수 있으며, 각 색상에 대해 별도의 사진을 찍어 크기를 맞추는 방법이 있음.
     * 불소화칼슘 렌즈의 성능에 대한 개인적 경험
          + 1975년에 출시된 FD 300/2.8 S.S.C. 불소화칼슘 렌즈는 매우 뛰어난 성능을 보임.
          + 천체 사진에 적합하며, 중고 시장에서 가격이 상승했지만 여전히 현대의 자동 초점 렌즈에 비해 가치가 있음.
"
"https://news.hada.io/topic?id=12900","많은 AI 안전 단체들이 현재 존재하는 오픈소스 AI를 범죄화하려 시도함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                많은 AI 안전 단체들이 현재 존재하는 오픈소스 AI를 범죄화하려 시도함

     * LLM 사용자들 사이에 AI 안전 단체들이 자신들이 사용하는 오픈소스 LLM을 금지하려 한다는 불만이 제기되었는데, 이는 잘못 퍼진 소문이라는 주장이 제기됨
     * 그러나 이 주장은 사실이 아님. 실제로 많은 AI 안전 단체들이 ""현재 존재하는 모델의 오픈소싱을 범죄화할 법안""을 지지했었음
     * 이러한 단체들 중 일부는 자금이 풍부하고 정책 입안자들과 점점 더 연결되고 있음

AI 안전 단체들의 법안 제안

     * Center for AI Safety: AI 안전 연구와 홍보에 중점을 두는 자금이 풍부한 단체로, NTIA에 제안한 규제안에서 ""강력한 AI 시스템""을 정의하고, 이러한 시스템의 오픈소싱을 사실상 금지하는 요구 사항을 제시함.
     * Center for AI Policy: 워싱턴 D.C.에 기반을 둔 로비 단체로, 처음 제안한 규칙에 따르면 이미 출시된 Llama-2가 새로운 기관의 규제를 받아야 함.
     * Palisade Research: 정책 입안자와 대중에게 AI 위험에 대해 조언하기 위해 위험한 기능을 구체적으로 시연하는 것을 목표로 하는 비영리 단체로, Llama 2의 출시 중단을 정부에 촉구함.
     * The Future Society: AI를 더 나은 거버넌스로 조정하기 위한 목표를 가진 싱크탱크로, ""Type 2"" GPAI에 대한 엄격한 요구 사항을 제시하고, 오픈소스 모델이 이를 충족할 수 없음을 명시함.

AI 안전 단체들의 영향력

     * 이러한 단체들은 자신들의 정책이나 목표를 매우 명확하게 밝힌 경우에 한해 일부에 불과함.
     * 덜 명확한 정책을 가진 다른 단체들도 존재하며, 결국 오픈소싱에 반대하는 입장을 가짐.
     * AI 안전 단체들이 과거에 원했던 바대로 법안을 통과시켰다면, 현재 활발히 사용되고 있는 모델들을 금지했을 것임.
     * 이러한 단체들은 여전히 유사한 조치를 통과시키기를 희망하고 있으며, 오픈소스 AI 운동은 이러한 단체들에 비해 입법적으로 뒤처져 있음.

GN⁺의 의견

     * AI 안전 단체들의 제안은 오픈소스 AI의 발전을 제한하고, 기업 독점을 강화할 위험이 있음.
     * 오픈소스 AI는 연구와 혁신에 필수적이며, 이를 제한하는 것은 기술 발전에 부정적인 영향을 미칠 수 있음.
     * 이 글은 오픈소스 AI에 대한 법적 제약이 현재 진행 중임을 보여주며, 이는 AI 기술의 민주화와 접근성에 중요한 영향을 미칠 수 있는 주제임.

   비기술자들을 위한 요약
     * AI로부터 인류를 보호하려는 명목을 가지고 시작한 ""안전한 AI"" 단체들
     * 이 많은 ""안전한 AI"" 단체들은 AI의 접근성 자체를 우려함.
     * 당연하지만 접근성이 좋을 수록 온갖 비윤리적인 컨텐츠 노출이 많아져서
     * 이를 막기 위해 시도하는 임법 방안이 바로 ""오픈소스 AI를 금지""
     * 오픈소스 AI를 금지시키면 당장 누구나 AI 컨텐츠에 접근하는 경로가 차단되는 효과
     * 하지만 이어 상용 AI에 대한 영향력을 키워 오히려 AI를 입맛대로 꾸미려는 우려가 있음
     * 이런 선민 사상으로 AI 시스템을 만지려고 하니 연구원, 전문가 및 관계자들은 반발.

   최근 국내 웹 사이트에 불법 컨텐츠 제공에 대한 강력 규제 법안을 시사했죠. 이젠 히토미 번호만 제공해도 서비스 제공자가 처벌받을 수 있는 어처구니 없는 법이죠.
   한국에도 있고, 전 세계적으로 피해야 할 고름이며, 성숙한 AI 제정이 마련되려면 이런 충돌은 불가피하겠죠...

   신기술이 나올 때마다 겪는 것 같아요.

        Hacker News 의견

     * AI 안전 전문가들은 위선적이라는 비판이 있음. 그들이 주장하는 바를 실천한다면, 모든 AI를 금지해야 한다고 주장할 것임. AI의 해로운 영향은 가중치 공개 여부와 상관없이 이미 발생하고 있으며, 특히 표절을 숨기고 인터넷에 기술적으로 다른 단어로 재구성된 동일한 텍스트를 스팸으로 보내는 것이 AI의 가장 수익성 높은 사용 방법으로 지적됨.
     * 오픈 소스 AI의 종말이 가까울 수 있는 또 다른 이유는 훈련 데이터가 라이선스를 받게 되면 그것으로 끝날 것이라는 점임. 많은 사람들이 오픈AI와 미드저니가 오픈 소스 AI가 생존하기 위해 필요한 것, 즉 미세 조정이나 처음부터 훈련하는 것에 대해 분노하고 있음. 정치인이 이를 플랫폼 이슈로 삼는 순간, 법이 재작성되어 회사들이 훈련 데이터를 마음대로 사용하는 것을 막을 것으로 보임.
     * 안전에는 여러 유형이 있음. 예를 들어, 이익 보호도 안전의 한 형태임. AI 분야의 기존 회사들을 위한 로비스트처럼 보이는 조직들이 많이 있음. 마이크로소프트의 라이선스 집행 노력이 이러한 전략을 사용했던 것으로 기억됨.
     * AI 안전이라는 용어 아래 여러 가지 다른 아이디어가 포함되어 있어 도움이 되지 않음. 예를 들어, ""안전한"" 정치적으로 올바른 출력, 포르노 없음, 대규모 사회/선거 조작, 강력한 AI에 의한 인류 멸망 등이 있으며, 이 세 가지는 서로 거의 공통점이 없어 모든 토론을 비효율적으로 만듦.
     * 정부는 ""AI""를 그들의 통제와 감독 없이 일반인들이 사용할 수 있는 능력이 그들의 권력 확장을 줄인다는 것을 알고 있음. 기사에서 보여주듯이, 이러한 ""싱크탱크""들은 Llama 2의 반복을 방지하기 위해 이미 기반을 마련하고 있음. 우리에게는 AI 스톨만이 필요하며, FOSS AI 모델이 80년대와 90년대에 FOSS UNIX를 위해 추진된 운동처럼 되어야 함. 하지만 스톨만에게 이 주제에 대해 글을 썼을 때 그는 관심이 없거나 패배주의적인 태도를 보이며 모델 가중치에 대한 GPL의 아이디어를 대부분 무시함.
     * 대부분의 AI 안전 전문가들은 자신들이 설교하는 것을 강하게 믿는 것처럼 보임. 그들이 옳은지는 전혀 다른 논의임. 그러나 AI 안전에 대한 자금 조달은 분명히 규제 캡처나 어떤 형태의 보호주의에 의해 부분적으로 동기가 부여됨.
     * 기존의 통제 또는 권력 시스템이 자기 복제하는 욕구를 과소평가하지 마십시오.
     * 많은 선의의 AI 안전 연구자들이 있지만, ""나에게는 AI가, 너에게는 안 된다""는 이중 잣대를 드러내는 안전 위선도 보임.
     * 데이터 라이선싱은 큰 병목 현상이 될 것임.
     * 검열되지 않은 결과는 오픈소스 모델에 대한 질문을 어둡거나 회색 영역에서 불리하게 사용될 것임.
     * 오픈소스와 폐쇄 소스 모델 사이의 계산 능력과 모델 크기 차이가 큼. 7B는 오픈소스에 해당하며 폐쇄 소스는 그보다 훨씬 클 것임.
     * 이러한 조직들이 FLOP 임계값을 명명하고 MMLU를 관련 평가 메트릭으로 삼는 것은 다소 우스꽝스러움. 여러 조직이 비슷한 임계값을 복사하여 붙여넣은 것처럼 보임. 계산 비용이 저렴해짐에 따라 이러한 임계값도 점점 저렴해질 것임. 우리는 이를 되돌아보며 편협하고 짧은 안목으로 여길지도 모름.
"
"https://news.hada.io/topic?id=12920","이 그림에서 "y"로 시작하며 도끼처럼 보이는 단어는 무엇일까? (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               이 그림에서 ""y""로 시작하며 도끼처럼 보이는 단어는 무엇일까? (2021)

""어떤 단어가 'y'로 시작하며 이 그림에서 도끼처럼 보이나요?""

     * 영어 알파벳 26글자가 새겨진 플라스틱 공에 대한 질문.
     * 'Y' 옆에 있는 이미지가 도끼처럼 보임.
     * 도끼와 관련된 영어 단어를 찾지 못함.

""의심스러운 단어""

     * 공 제조사가 스웨덴어 단어를 섞은 것으로 추정.
     * 스웨덴어 'Yxa'는 도끼를 의미.
     * 여러 사전과 위키백과를 검색했지만 'y'로 시작하는 도끼와 관련된 영어 단어는 없음.
     * 스웨덴어 'yxa'가 영어 'axe'에 해당함을 확인.

""현장 조사""

     * 공에 있는 다른 이미지들이 영어와 스웨덴어에서 어떻게 연결되는지 분석.
     * 대부분의 단어가 두 언어에 공통적으로 존재하거나 영어에서 스웨덴어로 대출된 단어.
     * 스웨덴어 공은 추가적인 문자 Å, Ä, Ö가 필요하며 W를 생략할 수 있음.
     * 영어 공은 모든 단어가 영어권 유아에게 친숙한 명사.

""새로운 단서""

     * 현대 영어에서는 잠수함을 'U-boat'라고 부르는 경우가 드물어 제조사가 영어에 완전히 익숙하지 않을 수 있음.
     * 스웨덴어 교육 자료에서 'U'는 'ubåt'(잠수함)으로 표시됨.

""추적""

     * 제조사인 Hedstrom은 공이 공식적인 제품이 아니며 'Y'는 요요로 표시되어야 함을 확인.
     * Hedstrom은 국제적으로 사업을 하지 않으며 디자인을 복제한 제조사를 알지 못함.

""추적 계속""

     * 공은 복제품이며 Hedstrom의 공과 유사하지만 동일하지 않음.
     * Hedstrom의 공은 'V'가 화병, 'R'이 로봇, 'N'이 못으로 표시됨.

""추적 결과""

     * 복제품 제조사는 중국 상하이 Jianhuiling Sporting Goods Co., Ltd.
     * 주요 시장은 동유럽과 서유럽.

""결론""

     * 원래 디자인은 영어를 모국어로 하는 미국 회사에서 만들었으며 'Y'는 요요를 의미.
     * 스웨덴어 단어가 섞인 것으로 보이나 확실하지 않음.

GN⁺의 의견

     * 이 글은 어린이 교육용 장난감에 대한 언어적 혼란과 국제 제조 과정의 복잡성을 보여줌.
     * 스웨덴어 단어 'yxa'가 영어로 'axe'임을 밝히는 과정은 언어학자나 열정적인 언어 애호가에게 흥미로운 사례.
     * 제조사의 실수를 추적하고 해결하는 과정은 문제 해결 능력과 조사 기술의 중요성을 강조함.

        Hacker News 의견

     * 첫 번째 댓글:

     이것은 내가 본 스택 익스체인지 답변 중 가장 놀라운 것이다.
          + 스택 익스체인지에서 본 답변 중 가장 놀라운 것으로, 해커뉴스 댓글만 확인하는 사람들에게도 가치 있는 내용이라는 의견.
     * 두 번째 댓글:

     ""YOLK""를 보았다. 이상하게 그려진 깨진 달걀과 흘러내리는 노른자를 말이다.
          + 처음에는 주류 결론에 회의적이었지만, 읽으면서 점점 설득되어 결국에는 동의하게 된 경험을 공유.
     * 세 번째 댓글:

     내 아이들이 가진 알파벳/동물 책에서 ""X""가 문제였다. ""Fox in sox""로 해결했다.
          + 알파벳과 동물을 결합한 아이들 책에서 ""X""를 표현하기 어려워 ""Fox in sox""로 표현한 경험담.
     * 네 번째 댓글:

     thedrake라는 HN 사용자가 조사 중에 알리바바에서 공을 찾아냈다.
          + 조사가 진행되는 동안 해커뉴스에서 논의되었고, 한 사용자가 알리바바에서 해당 제품을 찾아낸 사실을 공유.
     * 다섯 번째 댓글:

     아들의 공 제조사가 스웨덴어를 섞었다고 생각한다.
          + 처음에는 설득력이 없어 보였지만, 읽을수록 옳다고 생각하게 되어 결국 완전히 설득당한 경험을 나눔.
     * 여섯 번째 댓글:

     예전에 나무 손잡이로 특히 특정 나무를 사용했었다. 이것이 그 나무로 만든 도끼 손잡이 같다.
          + 과거에 나무 손잡이로 사용되었던 특정 나무를 언급하며, 이것이 그 나무로 만들어진 도끼 손잡이로 보인다는 의견과 함께 관련 재미있는 사실을 공유.
     * 일곱 번째 댓글:

     손잡이가 노란색이기 때문에 ""Y for yellow""일 수 있다.
          + 손잡이의 색깔이 노란색이라는 점을 들어 ""Y for yellow""일 가능성을 제시하며, 다른 색깔과 관련된 혼동을 피하기 위한 추측을 나눔.
     * 여덟 번째 댓글:

     아마존에서 아이들 장난감을 구매한 사람이라면 중국에서 만든 짝퉁이라고 생각할 것이다.
          + 아마존에서 아이들 장난감을 구매한 경험이 있는 사람이라면, 해당 제품이 중국에서 만든 짝퉁일 가능성을 쉽게 떠올릴 것이라는 의견.
     * 아홉 번째 댓글:

     그 답변은 정말 놀랍다. ""오바마 해리포터 소닉 백팩""을 생각나게 한다.
          + 놀라운 답변에 대한 감탄과 함께, 이상한 조합의 제품을 연상시키는 예를 들며 재미있는 비유를 공유.
     * 열 번째 댓글:

     친구들이여, 링크를 클릭하라. 길고 흥미로운 조사가 질문에 답한다.
          + 링크를 클릭하도록 권유하며, 길고 흥미로운 조사가 질문에 대한 답을 제공한다고 강조.
"
"https://news.hada.io/topic?id=12958","내 방에 있는 그 터치스크린은 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         내 방에 있는 그 터치스크린은 무엇인가?

새 아파트의 스마트 에너지 모니터링 시스템 탐색

     * 작성자가 새로 이사한 아파트에는 건물의 나이가 적당하여 겨울철 좋은 열 절연과 각 방에 이더넷 포트가 있는 등의 장점이 있음.
     * 아파트에는 작성자에게 너무 새롭고 스마트한 부분이 있었는데, 그것은 터치스크린 장치였음.
     * 이 장치는 무엇을 제어하는지 전혀 표시가 없었고, 집주인도 이 장치에 대해 알지 못함.

에너지 모니터링 시스템 발견

     * 작성자는 아파트에 대한 다양한 기기 매뉴얼을 살펴보던 중 터치스크린 장치에 대한 정보를 발견함.
     * 이 장치는 에너지 모니터링 시스템의 일부로, 현재 에너지 사용량을 알려주고 역사적 데이터를 표시할 수 있는 기능을 가짐.
     * 또한 에너지 매니저라고 불리는 두 번째 부분이 있어, 전기 미터에 직접 연결되어 사용 정보를 얻음.

무선 통신의 발견

     * 두 장치는 WiFi를 사용하여 통신하는데, 이는 작성자에게는 특이한 점이었음.
     * 스마트 홈 기능을 개발한 친구에 따르면, 이는 사실 IoT 분야에서 흔히 사용되는 방식임.

안드로이드 태블릿으로 밝혀진 터치스크린

     * 터치스크린을 켜기 위해 작성자는 숨겨진 버튼을 발견하고 눌렀고, 안드로이드 부팅 로고가 나타남.
     * 이 장치는 실제로 오래된 안드로이드 태블릿이었으며, 구글 토크, 플래시 등이 사전 설치되어 있음.

에너지 매니저의 전원 문제

     * 작성자는 에너지 매니저가 전원이 들어오지 않는 것을 발견하고, 이는 아파트의 다른 에너지 매니저와 비교하여 필요한 퓨즈를 찾아 설치함.

사용자 경험의 실망

     * 에너지 사용량을 모니터하는 화면은 사용자 경험 측면에서 실망스러웠음.
     * 전기 사용량 외에 다른 수치들은 에너지 공급자에 따라 달라지며, 모니터가 설치된 시점부터 변경되었을 수 있음.
     * 비용과 CO2 배출량 추정치는 사용자가 설정할 수 없음.

서버 접근과 데이터 추출

     * 작성자는 에너지 매니저의 WiFi 네트워크에 직접 연결하여 서버에서 데이터를 추출하고자 함.
     * 브라우저를 통해 접근한 서버의 인터페이스는 안드로이드 태블릿의 웹뷰와 동일함.

IoT 장치의 보안 탐구

     * 작성자는 IoT 장치의 보안 취약점을 탐구하며, SSH 접속 시도, 포트 스캔, tcf-agent 프로토콜 연구 등을 진행함.
     * 최종적으로 루트 암호를 비워 SSH 접속에 성공함.

장치의 시스템과 애플리케이션 분석

     * 작성자는 장치가 리눅스 3.10을 실행하고 있으며, ARM9 패밀리 CPU를 사용하고 있음을 확인함.
     * 장치에는 Node.js 앱이 실행되고 있으며, 이 앱은 에너지 사용 데이터를 사용자에게 웹 UI로 표시함.

GN⁺의 의견

     * 이 글은 스마트 홈 기술과 IoT 장치의 복잡성과 보안 취약점에 대한 흥미로운 사례 연구를 제공함.
     * 작성자의 문제 해결 과정은 기술적 호기심과 창의적 해결책을 찾는 과정을 잘 보여줌.
     * 이 이야기는 기술에 관심 있는 사람들에게 재미있고 교육적인 가치가 있으며, 스마트 기기의 실제 작동 방식과 잠재적 문제점을 이해하는 데 도움이 됨.

        Hacker News 의견

     * 환경 의식을 높이고 유틸리티 소비를 줄이기 위해서는 월별 단일 수치보다 훨씬 상세한 데이터가 필요함.
          + 최소 5분 단위로 사용량을 볼 수 있어야 함.
          + 예를 들어, 전기 히터를 몇 시간 켜둔 것이 한 달 동안의 조명 사용량보다 많은 전기를 사용했다는 것을 알 수 있음.
          + 남아프리카 중산층 가정에서는 태양광 패널과 인버터가 흔함. 전기 사용량의 전체 이력을 볼 수 있어 효율 개선이 용이함.
          + 전체 수치만 제공되므로, 어떤 활동이 소비를 일으켰는지 추정해야 함.
          + 예를 들어, 샤워 후 약 한 시간 동안 3kw가 소모되는 것은 온수기가 다시 데워지는 것임을 알 수 있음.
          + 태양광 발전이 충분하지 않은 이른 아침에 샤워를 하면 배터리가 소모되고, 그로 인해 전기가 그리드에서 나옴을 인버터 데이터로 확인할 수 있음.
          + 온수기에 타이머를 설치하여 태양광 발전이 충분한 10시 이후에만 가열하도록 하여 전기를 절약할 수 있음.
          + 물 사용량을 모니터링할 수 있는 편리한 방법이 있었으면 함.
     * 리눅스 기반 가전제품의 기술적 난해함에 대한 놀라움을 표현함.
          + 마이크로컨트롤러 두 개만으로도 숫자와 막대 그래프를 표시할 수 있음에도 복잡한 시스템이 일반적임.
          + 현재의 전원 공급 장치는 대기 상태에서도 16W를 소모하며, 소형 냉장고만큼의 전력을 사용할 수 있음.
          + 이러한 솔루션의 전체 생애주기 평가(Life Cycle Assessment, LCA)는 특히 단돈 몇 달러짜리 마이크로컨트롤러와 비교했을 때 우려됨.
          + 설치 후 3년 이내에 이러한 시스템이 고장 나는 경우가 많음.
     * 임베디드 장치에 불필요한 복잡성이 추가된 것에 대한 놀라움을 표현함.
          + 기존 벽을 통해 케이블을 설치하는 것이 번거로우므로 대부분의 장치가 리모델링을 위해 구매되며, 저렴한 Wi-Fi 칩셋을 사용함.
          + 3A 퓨즈가 필요하다는 사실과, 설치 후 퓨즈의 온도를 여러 번 확인하여 안전성을 확인함.
          + Jazelle(Java 바이트코드를 위한 하드웨어 지원)에 대한 언급이 있음.
     * Netthings라는 회사의 이름이 익숙하다고 언급하며, 해당 회사의 장치에서 하드코딩된 NTP 서버가 차단되어 시간 동기화에 실패한 사례를 언급함.
          + Netthings가 2018년에 청산되어 해당 장치에 대한 지원을 받기 어려움.
     * IoT에서 'C'는 '비용 효율적(cost-effective)'을 의미한다는 농담과 함께, Wi-Fi 기능이 내장된 SoC(System on Chip)가 실제로 매우 저렴하다는 사실을 언급함.
          + 대부분의 SoC에는 기본적으로 이더넷 컨트롤러가 없으므로, 사용 사례에 맞을 경우 Wi-Fi를 사용하는 것이 더 비용 효율적임.
          + 물리적 프로토콜/연결 유형도 지원되지만, 리모델링된 클라이언트의 경우 Wi-Fi나 무선 프로토콜이 최선임.
     * ""날짜와 시간은 항상 정확하며 조정할 필요가 없다""는 문장이 필립 K. 딕의 책에서 인용된 것처럼 들림.
     * 개인적인 IoT 프로젝트에 대한 흥미로운 경험담을 공유하며, NetThings의 취약점에 대한 추가 정보가 글의 백미임을 언급함.
     * 자신의 글을 해당 장치 자체에 호스팅하라는 제안을 함으로써, 도메인이 시간의 흐름에 따라 사라질 경우에도 정보가 보존될 수 있도록 함.
     * 3A 퓨즈가 필요하다는 언급과 함께, 그렇게 큰 전력을 소모하는 에너지 미터는 목적에 부합하지 않는다고 지적함.
          + 설치 과정이 전기와 매우 가까운 곳에서 이루어졌음에도 불구하고, 모든 설치가 매우 깔끔하게 이루어짐.
     * Micromuse라는 서비스가 1534 포트에 나열된 것을 보고 놀람을 표현함.
          + 2006년에 Micromuse에서 일했으며, IBM/Tivoli에 인수된 후 이름이 유지되지 않았음을 언급함.
          + 아무도 실제로 업데이트를 하지 않는다는 사실을 지적함.
"
"https://news.hada.io/topic?id=12965","X(트위터)의 2024년 로드맵","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           X(트위터)의 2024년 로드맵

     * 2023년은 X에게 기초를 다진 해였으며, 2024년은 혁신의 해가 될 것
     * X는 단순한 앱이 아니라 모든 경험을 하나의 인터페이스로 통합하는 '모든 것을 담는 앱'으로 발전하고 있음
     * 자유로운 표현을 핵심 가치로 삼고, 이를 지원하기 위해 콘텐츠 관리 전략을 발전시킴
     * 커뮤니티 노트를 통해 정보의 정확성과 균형을 개선함
     * X는 비디오 중심 플랫폼으로 발전했으며, 새로운 'Immersive Video'는 하루 1억 명 이상의 사용자를 보유함
     * 장편 비디오 업로드 기능을 도입하여, 단 한 달에 사람들이 130년 분량의 30분 이상되는 긴 비디오를 시청함
     * 오디오 및 비디오 통화 기능과 X Hiring과 같은 새로운 기능을 출시함
     * Spaces와 Communities 제품을 개선하여 사용자들이 매일 3억 분 이상을 커뮤니티에서 보내고 있음
     * Grok이라는 새로운 AI 검색 보조기능을 소개함
     * 창작자를 위한 광고 매출 공유로 경제적 기회를 제공하고, 광고주를 위한 광고 경험을 개선함
     * 새로운 브랜드 안전 솔루션을 출시하여 이전 3년간의 모든 제품보다 더 많은 제품을 3달만에 쉬핑했으며, 브랜드 안전 광고를 제공하는 방법에 대한 기준을 세움

X의 사람이나 힘을 대신할 수 있는 것은 없음

     * X는 호기심 많고 영향력 있는 사람들이 열정을 따라가는 최고의 플랫폼임
     * 다양한 문화적 사건과 움직임을 통해 X의 독특한 가치와 커뮤니티의 충성도를 보여줌

기초부터 혁신으로

     * 인공지능을 통해 사용자와 광고 경험을 강화할 계획임
     * P2P 결제를 도입하여 사용자에게 더 많은 유틸리티와 상거래 기회를 제공할 예정임
     * xAI를 통해 관련성 높은 콘텐츠를 보여주는 기능을 강화할 계획임
     * 창작자와 콘텐츠 파트너십에 계속 투자하여 새로운 사용자를 유치하고 광고를 촉진할 예정임
     * 비디오, 성과 및 브랜드 안전을 핵심으로 하는 전체 광고 제품군을 강화할 계획임
     * X는 2024년에 우리가 연결하고, 소통하고, 거래하는 방식을 재편할 획기적인 제품과 서비스로 혁신을 일으킬 것

   트위터가 간단해 보이고, 언제든지 대체될 수 있을것 처럼 보이지만... 블루스카이를 몇달 써보니, 금방 깨닳게되는것은.
    1. 역시 사용자 확보는 중요하면서 어려운 일이다.
    2. 사용자 문제를 안보더라도, 앱을 카피하는 일도 만만치 않은 일이다.

   대선도 있으니, 올해는 흥미로운 한해가 되겠네요.

   80~90% 인력감축후 보여주는 퍼포먼스가 대단해보여요
   코어로 볼수있는 추천알고리즘도 오픈했고요
   그리는 로드맵이 잘 성공했으면 좋겠네요

   얘네들은 왜 맨날 말이 앞설까요
"
"https://news.hada.io/topic?id=12941","랜덤 애니메이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                랜덤 애니메이션

        Hacker News 의견

     * 브라우저에서 직접 렌더링된 애니메이션을 보고 싶었다는 의견. 코드를 직접 볼 수 있었다면 더 흥미로웠을 것이라고 함.
     * Winamp 시각화 플러그인을 사용하던 시절을 떠올리게 하는 애니메이션들이라고 언급함.
     * 소스 코드를 살펴보며 애니메이션이 무작위로 생성되는지, 사전에 생성된 것 중에서 선택되는지 궁금해함. 또한, Cloudflare에 의해 차단된 이상한 분석 태그를 발견하고 이에 대한 의문을 제기함.
     * 다양한 애니메이션들이 있지만, 특히 Electric Sheep이라는 프랙탈 화염 스크린세이버를 연상시킨다고 함. 사용자가 좋아하는 ""양""을 투표할 수 있는 기능이 있다고 소개함.
     * 애니메이션 제작 방법에 대한 질문. 이러한 그래픽/시각 프로그래밍을 위한 전문 프로그램이 있는지, 아니면 3D/수학/플롯 라이브러리를 사용하는 파이썬 스크립트의 집합인지 궁금해함.
     * Processing을 사용한 지 오래되었으며, 이렇게 인상적인 작업을 해본 적은 없다고 함. 다시 시도해보고 싶은 충동을 느낀다고 언급함.
     * 어린 시절 나쁜 열이 있을 때 본 것 같은 애니메이션들이라고 묘사함.
     * David Szakaly(davidope)의 작업을 연상시키는 애니메이션 스타일을 언급하며, 주로 인스타그램에서 활동하고 있고 로그인하지 않으면 비디오를 볼 수 없다고 함.
     * 메인 사이트에서 '최신 애니메이션'을 클릭하면 시간 순으로 나열된 애니메이션 목록을 볼 수 있다고 소개함.
     * 새로운 애니메이션을 클릭해서 발견하는 것과 현재 애니메이션을 계속 감상하는 것 사이에서 고민했다고 고백함.
"
"https://news.hada.io/topic?id=12981","도서 출판의 미래 - 2024년과 그 이후","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        도서 출판의 미래 - 2024년과 그 이후

     * 도서 출판에 관한 10가지 주요 미래 트렌드

AI

     * AI, 특히 대형 언어 모델(LLMs)은 출판업계를 변화시키고 있음. AI는 교육, 훈련, 자기계발 출판물에 큰 위협이 됨
     * 미국 법원은 2023년 AI에 의한 발명품은 특허 불가능하며, AI가 비소설 콘텐츠를 법적으로 침해하지 않고 생성할 수 있음을 명시함
     * 틱톡/유튜브 같은 비디오 플랫폼이 AI 기술을 사용하여 책 판매에 큰 영향을 미침
     * Goodreads 같은 전문 네트워크는 약해지기 시작
     * 유일한 예외는 이메일 뉴스레터. 다양한 형태와 규모의 소셜 미디어 네트워크와 자연스럽게 공생하며 여전히 번창
          + 실제로 소셜 미디어는 이메일 뉴스레터를 성장시키는 주요 방법 중 하나로, 크리에이터나 인플루언서가 핵심 고객과 더 깊이 소통할 수 있게 함
     * AI는 이미 도서 검색 방식을 크게 변화시키고 있지만, 앞으로는 업계의 더 많은 계층에 AI가 스며들게 될 것
          + 운영: 독자 참여 및 판매 추세를 기반으로 한 자동화된 재출간 결정
          + 마케팅: AI 생성 이미지 자산 및 독자 타겟팅
          + 검색: 새로운 형태의 도서 추천 및 개선된 ONIX 메타데이터
          + 접근성: 시각장애 독자를 위한 이미지 라벨링

아마존

     * AI는 애플, 알파벳, 메타, 마이크로소프트, 엔비디아, 테슬라와 함께 '7대 기술 기업'으로 꼽히는 아마존에게 놀라운 주식 시장 랠리를 이끌고 있는 효자 노릇을 함
     * 아마존의 수익 중심인 클라우드 사업부는 AI에 힘입어 급성장
     * 동시에 아마존은 이제 전자상거래 상인이 아니라 물류 및 광고 플랫폼으로 변모함
     * 아마존의 온라인 서점 및 전자책 시장의 지배력은 아직 확고하지만, 균열이 생기고 있음
     * 검색 기능은 떨어지고, 리뷰 신뢰성감소, 가짜 책 증가 등으로 인해 소비자 신뢰와 만족도가 하락
     * 아마존이 오랫동안 가장 저렴한 공급업체는 아니었지만 고객 서비스는 업계 최고 수준을 유지해 왔으나, 가품이 넘쳐나고 공급업체의 광고비가 큐레이션보다 우선시되는 시장으로 전환되면서 이러한 상황은 변하고 있음
     * 언젠가는 고객들이 더 전문화된 플랫폼을 선호하여 아마존을 떠나는 전환점에 도달할 수도 있을 것
     * 아이러니하게도 AI가 생성한 전자책이 Kindle 마켓플레이스에 넘쳐나고, AI가 생성한 인쇄 도서의 메타데이터가 추천 알고리즘에 혼란을 주면서 AI가 아마존의 몰락을 가져올 수도 있음
     * 무엇보다도 책은 더 이상 아마존에서 예전처럼 중심적인 위치를 차지하지 못함
          + 출판 업계가 항상 그렇듯이 변화는 점진적으로 이루어지겠지만, 서점 업계의 지배적인 업체로서 아마존의 영광스러운 시절은 이제 끝났을 것

오디오북

     * 오디오북은 출판업계에서 몇 안되는 성장 부문 중 하나이지만, 생산 비용이 높고 시장이 집중되어 있음(일부 타이틀을 통해서 집중적으로 성장)
     * 아마존 소유의 Audible이 고릴라 처럼 차지하고 있는 시장에 2023년 Spotify가 진입하여 새로운 비즈니스 모델로 오디오북을 도입
          + 대형 영어 출판사들에게 넷플릭스식 모델에 저항하고 단품 요금제를 수용하도록 설득
     * 오디오북은 전자책과 인쇄 도서에 비해 여전히 가격이 비싼데, 이는 내레이터와 제작 스튜디오에 비교적 많은 초기 제작비가 투입되기 때문
          + AI 기술의 발전으로 인해 인간 내레이터 없이 오디오북을 제작할 수 있게 됨
          + 이는 오디오북 시장의 가격 하락과 다양성 증가로 이어질 수 있음
     * 내레이터의 역할이 줄어들 뿐만 아니라 번역가와 다른 사람들의 역할도 줄어들 것
     * 가까운 시일 내에 영어뿐만 아니라 다양한 언어의 기계 내레이션 오디오북이 시장에 쏟아져 나오면서 가격이 하락하는 것을 보게될 것
     * 오디오북은 디지털 매체이며 주로 온라인에서 판매되므로, 테이프에서 CD에 이르는 물리적 형식은 사라졌음
          + 아주 어린 청취자를 위한 오디오북은 예외
     * 오디오북을 판매하는 다양한 시도가 진행중
          + libro.fm이 영국 시장에 진출하여 인디 서점들과 제휴
          + Bookshop.org도 오디오북 서비스를 출시할 예정
          + Jellybooks는 인디 서점과 제휴하여 인디 출판사의 엄선된 인쇄 도서와 함께 디지털 오디오북을 판매 시점에 동적으로 번들로 제공하는 인쇄물+오디오북 번들을 제공
          + 스타트업인 XixXag는 소비자에게 오디오북과 전자책을 묶은 번들을 제공

집중화(Consolidation)

     * 대형 출판사와의 통합은 시장과 국가를 막론하고 지난 수년간 출판계의 트렌드였음
     * 이는 업계의 성숙도와 진정한 파괴적인 트렌드가 부족하다는 신호임
     * 숙련된 업계 베테랑들이 지주회사를 설립하여 소규모 출판사를 더 큰 그룹으로 '통합'하는 형태로도 나타나고 있음
     * 출판 업계는 특히 운영, 제작, 물류, 영업 및 마케팅 분야에서 대규모를 선호함
     * 소규모 출판사가 되기란 쉽지 않음. 매출이 1,000만 파운드 미만인 독립 출판사가 가장 취약
     * 훌륭한 신인 작가를 발굴하는 틈새 시장을 개척하고 있지만, 오늘날의 세계에서 소규모 출판사를 성장시키는 것은 점점 더 어려워지고 있음
     * 대형 소매업체는 대형 출판사를 선호하며 이러한 추세는 더욱 강화

비용 압박 (Cost Pressure)

     * 최근 몇 년 동안 종이에서 잉크, 인쇄, 우편 요금에 이르기까지 실물 제품의 비용이 급격히 상승
     * 이로 인해 출판사들은 이익성 개선을 위해 감원을 진행
     * 인쇄 도서의 가격은 그다지 인상되지 않았고, 할인이 허용되는 시장에서 할인된 도서 가격은 여전히 예전과 같은 낮은 수준
     * 전자책에는 동일한 비용 압박이 적용되지 않으므로 장기적으로는 전자책이 출판사에 훨씬 더 수익성이 높기 때문에 전자책의 시장 점유율이 증가할 수 있음
     * 인플레이션은 진정되었지만 인적 자원에 대한 비용은 상승
     * 임금은 앞으로 출판사와 서점에게 점점 더 큰 문제가 될 것
     * 생활비가 저렴한 주요 대도시 외곽에 새로운 인디 출판사가 많이 생겨나고 있음
     * 물리적 사무실 없이도 원고를 확보하고 편집 및 마케팅을 대부분 수행할 수 있기 때문에 이러한 추세는 계속될 것

세계화 (Globalization)

     * 최근 몇 년 동안 민족주의가 부상하고 무역 장벽이 높아지며 세계가 점점 더 내향적으로 변하면서 세계 무역은 감소 추세
     * 이와 동시에 영어의 부상은 멈추지 않고 계속되는 중
     * 틱톡과 같은 플랫폼의 영향으로 영어판 책이 외국 시장에서 인기를 얻고 있음. 이는 영어판 및 번역판의 비즈니스 모델에 영향을 미침
     * 틱톡이 주로 다루는 장르(청소년, 판타지, 로맨스)뿐만 아니라 논픽션(비즈니스, 의학, 공학, 과학, 기술 등) 분야에서도 두드러지게 나타나고 있음
     * 이는 대형 퍼블리셔에게 유리하며 퍼블리셔 간의 통합이 증가하고 잠재적으로 더 많은 국경 간 합병으로 이어질 것

고급 제품으로서의 책

     * 저자의 서명, 특별한 디자인, 고급 표지 등으로 책을 수집 가능한 ""고급 제품""으로 만드는 트렌드가 성장하고 있음
     * 이런 추세는 줄어들 기미가 보이지 않고 있으며, 여러 가지 면에서 양장본은 도서 애호가들에게 대중적인 사치품이 되어 가는 중
     * 그럼 페이퍼백은 어디로 갈까?
          + 비용 압박으로 인해 필요한 종이와 잉크의 양을 줄이기 위해 글꼴 크기와 문장 간격이 줄어들고 있지만, 이는 눈에 더 편한 다양한 글꼴과 서체가 있는 전자책으로 계속 이동하는 고령 독자들을 소외시키고 있음
          + 비용을 줄이기 위해 책 크기가 더 표준화되고(나쁜 것은 아니지만) 특수 효과를 줄인 단순한 책 표지가 등장할 것임

규모와 크기 (Scale & Size)

     * 출판은 이제 대규모 출판사와 소매업체가 지배하는 산업으로 변모함
     * 이는 IT, 데이터 및 분석에 대한 투자 비용을 분산시키는 데 유리함
     * 종이, 인쇄, 인건비 상승과 함께 대형 출판사와 서점에게 유리하게 작용하여 업계에서 점점 더 많은 통합이 이루어지고 있음
     * 규모의 이점은 소규모 기업이 경쟁할 수 없다는 것을 의미하므로 각 부문에서 한두 개의 기업만 남게 됨
     * 시장의 성숙도가 높아지면 더 많은 통합과 집중이 이루어질 수밖에 없음
     * 증강 현실(AR)은 비용이 급격히 감소함에 따라 교육 출판 분야에서 채택되고 있으며, 이는 여전히 주목해야 할 분야이지만 소설 출판 분야에서는 큰 변화를 기대하기는 어려움

스트리밍 (Streaming)

     * 스트리밍 기술과 관련된 다양한 비즈니스 모델이 등장할 것으로 예상됨
     * 현재는 범죄와 스릴러, 공상과학과 판타지, 에로티시즘과 로맨스 등의 장르에 주로 영향을 미치고 있지만, Perlego는 고등 교육 분야에서도 이 모델의 매력을 보여 주었고, Storytel은 오디오북으로 대중화했으며, 점차 새로운 비즈니스 모델이 등장할 것

틱톡 (Tiktok)

     * 틱톡은 책의 발견성과 시장에 큰 영향을 미침
     * 2023년에는 자체 서점을 개설하여 현재로서는 TikTok 자체의 판매보다는 독자들이 TikTok에서 본 것을 바탕으로 다른 곳에서 구매하는 영향력이 더 크지만, 시간이 지나면 분명 변화할 것
     * TikTok은 해외 시장에서 영어판의 주요 동인 중 하나임
          + 영화 산업은 시장마다 다른 시기에 신작을 출시했지만, 불법 복제와 소셜 미디어로 인해 전 세계적으로 개봉이 점점 더 동기화되고 있음
          + 도서 산업에서도 같은 현상이 일어나고 있으며, TikTok은 이러한 트렌드의 주요한 동력 중 하나
     * 출판업계에 더 큰 영향을 미칠 것으로 기대됨
     * 누구나 새해 결심 중 하나는 숏폼 동영상 제작에 더 능숙해지는 것

   전자책 중심의 시장개편이 절실한데, 국내 출판업계는 아무것도 안 하고 산업의 죽음을 낭만이라며 즐기는 모양새죠

   국내에서는 도서정가제가 좀... 시대를 벗어났다고 느껴지네요.

   책을 보는 건 기분 좋은 일이지만, 도서시장에 대해서는 부정적입니다.

   알파벳 순이며, 영국 기준 이야기라는 걸 염두에 두고 보시기 바랍니다
"
"https://news.hada.io/topic?id=12923","FlowBlade - 리눅스용 오픈소스 비디오 편집도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FlowBlade - 리눅스용 오픈소스 비디오 편집도구

     * GPL3 라이센스의 멀티트랙 Non-Linear 비디오 편집기
     * FFMpeg 백엔드로 146개의 포맷, 78개의 비디오 코덱, 58개 오디오 코덱을 지원
     * 많이 사용하는 편집 워크 플로우 지원
     * 강력한 도구를 제공하여 이미지 & 오디오 결합 및 믹싱 가능
"
"https://news.hada.io/topic?id=12895","인시던트로 더 잘 학습하기: 사후 분석 문서 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인시던트로 더 잘 학습하기: 사후 분석 문서 가이드

     * 사후 분석 문서: 인시던트가 종료된 뒤, 관련 정보를 모은 문서
     * 문서의 최종 목표:
          + 인시던트 원인이 되는 요인, 주요 위험 요소를 더 잘 이해하고, 미래에 비슷한 위험 요소 영향을 예방하거나 줄이는 방법을 계획하는 것
     * 사후 분석 문서 책임자:
          + 리더십 역할을 맡은 사람(예: 인시던트 리드)
          + 인시던트를 해결하기 위해 구체적인 조치를 취한 사람
          + 인시던트가 영향을 미친 서비스를 위해 대기 중인 사람
          + 인시던트를 확인하고 수동으로 선언한 사람
     * 사후 분석 문서 작성 시기:
          + 인시던트가 마무리된 직후
          + 그렇지 않으면 인시던트 원인이 되는 요인을 진단하는 데 도움이 되는 핵심 세부 사항이 왜곡됨
     * 모든 인시던트에 사후 분석이 필요한 건 아님
          + 인시던트가 반복되거나, 대응하기 어려운 인시던트가 일어나면 사후 분석 문서를 작성하는 게 좋음
"
"https://news.hada.io/topic?id=12933","리눅스 커널에서 ReiserFS 지원 중단에 대한 한스 라이저의 입장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 리눅스 커널에서 ReiserFS 지원 중단에 대한 한스 라이저의 입장

커버레터

     * 한스 라이저가 프레드릭 R. 브레넌에게 보낸 편지로, 그의 긴 편지에 대한 답변이 늦어진 점을 사과함.
     * 라이저는 브레넌에게 텍스트 메시징 서비스에 가입하거나 전화번호를 보내면 더 빠른 응답을 받을 수 있음을 제안함.
     * 라이저는 자신의 편지를 관심 있는 곳에 보내도록 요청하며, LKML(Linux Kernel Mailing List)과 Slashdot.org를 적절한 곳으로 생각함.
     * 라이저는 브레넌에게 Reiser5나 파일 시스템, 압축 기술, 특히 딥러닝 기반 압축에 대한 정보를 보내달라고 요청함.

소개

     * 라이저는 자신이 아내를 살해한 죄로 감옥에 있기 때문에 리눅스 커널에서 ReiserFS V3를 제거하는 논의에 직접 참여하지 못함을 밝힘.
     * 그는 자신의 범죄에 대해 사과하며, 리눅스 커널 커뮤니티와의 상호작용에 대한 사과와 V3 및 V4의 역사, 기술적 문제에 대한 설명을 포함함.
     * 라이저는 감옥에서 사회 기술을 향상시키기 위해 노력하고 있으며, 이제는 과거와 다르게 행동할 것임을 언급함.

본문

     * V3는 특정 시점에 유용했으며, 리눅스의 성장에 기여한 것에 대해 라이저는 기쁨을 표함.
     * 라이저는 SUSE가 시장에서 성공하지 못한 것에 대해 유감을 표하며, SUSE에 기여할 수 있었던 것을 영광으로 여김.
     * V3 개발 초기에 성능 문제와 어려움을 겪었으나, 결국 경쟁 제품보다 빠르게 만들 수 있었음을 설명함.
     * 라이저는 V3의 성능 향상을 위해 블록 할당 방식을 변경하는 것이 주요한 개선이었음을 언급함.
     * V3를 제거하기로 결정된다면, 마지막 릴리스에서 몇몇 개발자들을 크레딧에 추가해 달라고 요청함.

GN⁺의 의견

     * 이 글은 리눅스 파일 시스템 ReiserFS의 창시자 한스 라이저가 감옥에서 보낸 편지를 통해 그의 반성과 기술적 통찰을 공유하는 것으로, 소프트웨어 개발과 커뮤니티 참여에 대한 깊은 교훈을 담고 있음.
     * 라이저는 자신의 범죄와 그로 인한 결과에 대해 사과하면서도, ReiserFS V3와 V4의 기술적 가치와 역사를 설명하며, 이러한 기술이 리눅스 운영 체제의 발전에 어떻게 기여했는지를 보여줌.
     * 이 글은 개발자 커뮤니티 내에서의 협력과 소통의 중요성을 강조하며, 기술적 성취뿐만 아니라 인간적인 관계와 사회적 기술의 중요성을 일깨워줌.

        Hacker News 의견

     * 한 사용자는 90년대 후반에 한스 라이저와 함께 일했으며, 그가 낮에는 FPGA를 위한 논리 합성 작업을 하고 밤에는 자신의 회사를 시작하려고 노력했다고 말함. 라이저는 기술적인 아이디어에 대해 열정적이었지만, 그 당시에는 아이디어를 설명하는 데 어려움을 겪었고, 이 때문에 그가 천재인지, 아니면 괴짜인지에 대해 평가가 갈렸음. 또한, 라이저가 준 어머니가 작곡한 뉴에이지 음악 CD를 가지고 있었으며, 라이저가 살인자라는 사실을 믿고 싶지 않았지만, 그가 거짓말을 하고 있다는 것이 명백해졌음을 언급함.
     * 다른 사용자는 라이저의 편지를 읽고 인간의 삶을 끝내는 행위가 구원의 여지를 남겨두는지 확신할 수 없지만, 편지에서 느껴지는 상실감과 무력감에 공감한다고 말함.
     * 한 사용자는 SuSE가 실패했다는 라이저의 주장에 의문을 제기하며, SuSE가 RedHat이나 Ubuntu처럼 되지 않았을지라도 여전히 성공적이라고 주장함. 또한, 라이저 V4에 대한 언급과 리눅스 커널에 포함될 가능성이 거의 없다는 점, 그리고 라이저가 감옥에서 겸손해졌으며 사회성을 기르고 교육과 치료를 받았다고 언급함에도 불구하고, 외부 세계가 더 복잡할 수 있다는 점을 지적함.
     * 또 다른 사용자는 라이저가 한 말 중 운영 시스템의 유용성에 대한 인상적인 인용구를 공유하며, 라이저가 저지른 잘못에도 불구하고 그가 한 좋은 일을 인정하는 것이 중요하다고 언급함. 또한, 라이저FS가 멋졌지만 더 이상 사용되지 않는 것에 대해 아쉬움을 표함.
     * 한 사용자는 라이저가 매우 설득력 있고 논리적인 작가라고 평가하며, 감옥에서 배운 것이 그에게 구원을 가져다줄 수 있다는 가능성을 완전히 배제하기 어렵다고 말함.
     * 다른 사용자는 라이저FS가 유일하게 데이터를 잃게 한 리눅스 파일 시스템이었으며, 작은 파일 처리에 있어 성능 이점이 있었지만, 현재는 ext4가 모든 면에서 우월할 것이라고 생각함.
     * 한 사용자는 유지 관리자와 동의할 수 없을 때 보통 해결책이 포크하고 이름을 바꾸는 것이라고 언급하며, 리눅스의 일부를 사람의 이름으로 명명하는 것이 이상하다고 생각함. 라이저 프로젝트를 다시 모으려는 시도가 없었다고 말함.
     * 다른 사용자는 라이저가 작은 실수들을 저질러 결국 파일 시스템 프로젝트를 망가뜨렸다는 이야기가 매우 흥미롭다고 평가함.
     * 한 사용자는 라이저가 감옥에서 실제로 자기 성찰을 했다고 느끼며, 그가 미래 상황에 그 교훈을 적용할 수 있기를 바람. 또한, 라이저가 뛰어난 젊은이였지만 대인 관계 기술이 부족해 꿈을 실현하지 못했다고 언급하며, 다른 사람의 도전적인 커뮤니케이션을 이해하는 데 도움이 될 수 있을 것이라고 생각함.
     * 마지막 사용자는 리눅스를 처음 접했을 때 파일 시스템 유형을 선택하라는 요청에 혼란스러웠다고 말함. ReiserFS를 선호하는 파일 시스템으로 사용했으며, 큰 파일 시스템을 다루기 시작하면서 XFS로 전환했다고 언급함. 라이저가 아내를 살해한 혐의로 기소되었다는 소식을 듣고 혼란스럽고 슬펐지만, 그의 아이들에게 최선을 바란다고 말함.
"
"https://news.hada.io/topic?id=12911","미국 개발자, 앱 스토어 외부 구매 제공 가능 - 애플, 여전히 수수료 징수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               미국 개발자, 앱 스토어 외부 구매 제공 가능 - 애플, 여전히 수수료 징수

미국 개발자들, 앱 스토어 외 구매 옵션 제공 가능해져, 그러나 애플은 여전히 수수료 징수

     * 애플이 미국 iOS 앱 스토어 정책에 중대한 변경을 단행함.
     * 개발자들은 이제 디지털 상품에 대해 앱 스토어 외 구매 옵션을 고객에게 직접 안내할 수 있음.
     * 애플은 개발자 웹사이트로 연결되는 단일 링크를 앱에 표시할 수 있도록 허용하지만, 이 방식으로 구매된 콘텐츠에 대해 12%에서 27%의 수수료를 계속 징수할 계획임.

앱 스토어 업데이트 및 배경

     * 아이폰과 아이패드 사용자들은 미국 스토어의 일부 앱에서 웹사이트 링크를 통해 앱 스토어 시스템 외부에서 구독 및 기타 콘텐츠를 구매할 수 있게 될 것임.
     * 이 옵션을 제공하고자 하는 개발자들은 StoreKit 외부 구매 링크 권한을 신청해야 하며, 애플은 업데이트된 앱 스토어 리뷰 가이드라인과 북부 캘리포니아 미국 지방 법원에 제출된 준수 성명서에서 이를 명시함.

엔타이틀먼트 링크에 대한 주요 사항

     * 모든 외부 구매 방식 링크는 엔타이틀먼트 링크 시스템을 사용해야 하며, 개발자는 애플의 승인을 받아야 함.
     * 개발자는 앱의 하나의 화면에 단일 평범한 링크를 허용받을 수 있음.
     * 링크는 웹사이트의 특정 가격이나 앱 스토어 가격보다 할인된 가격을 언급할 수 있음.
     * 링크는 앱 내 구매 화면이나 구매 흐름에 직접 배치될 수 없음.
     * 개발자는 사용하는 제3자 결제 서비스 제공업체가 결제 처리기관의 업계 표준을 충족하고, 사용자가 구독 관리, 환불 요청, 무단 거래 이의 제기 등의 프로세스를 제공할 것임을 인증해야 함.
     * 애플의 비디오 파트너 프로그램이나 뉴스 파트너 프로그램에 참여하는 앱은 링크 권한을 사용할 수 없음.
     * StoreKit 외부 구매 링크를 사용하는 앱은 여전히 앱 내 구매 옵션을 제공해야 함.
     * 앱 스토어 페이지는 웹사이트 구매 정보나 링크를 포함할 수 없음.
     * 엔타이틀먼트 링크를 통해 앱 웹사이트에서 판매되는 디지털 구매는 해당 앱에서 사용 가능해야 함.
     * StoreKit 외부 구매 링크는 앱 내 구매를 방해하거나 모방할 수 없음.
     * 링크는 기기의 기본 브라우저에서 새 창을 열어야 하며, 웹 뷰를 열 수 없음.
     * 리디렉션, 중간 링크, URL 추적 매개변수는 허용되지 않음.
     * 개발자는 정기적으로 외부 앱 구매에 대한 회계를 제공해야 하며, 애플은 개발자의 회계를 감사할 권리가 있고, 수수료 의무 준수를 보장하기 위해 이자를 부과하고 지급금을 상계할 수 있음.

엔타이틀먼트 링크 사용 예

     * 애플은 고객이 앱 스토어 생태계를 벗어나 외부 웹사이트에서 구매를 진행할 때 경고를 제공할 예정임.

앱 스토어 변경의 배경

     * 오늘의 변경은 애플과 에픽 게임즈 간의 2021년 법적 분쟁에서 비롯됨.
     * 애플은 분쟁에서 승리했으며, 법원은 애플이 미국 반독점법을 위반하지 않았다고 판결했지만, 애플은 앱 내 구매 대안에 대해 고객에게 정보를 제공하는 것을 방지하는 '반유도' 규칙을 제거하라는 명령을 받았음.
     * 상고심이 종료됨에 따라, 애플은 이제 해당 명령의 일부를 준수해야 함.

GN⁺의 의견

     * 이번 애플의 정책 변경은 개발자들에게 앱 스토어 외부에서의 판매 기회를 제공하면서도 애플의 수수료 수입을 보장하는 방식으로 이루어짐.
     * 사용자들은 앱 내에서 더 저렴한 가격으로 디지털 상품을 구매할 수 있는 새로운 옵션을 갖게 될 것이며, 이는 소비자 선택의 다양성을 증진시킬 수 있음.
     * 이러한 변화는 앱 스토어의 경쟁 환경에 영향을 미칠 것이며, 특히 애플과 에픽 게임즈 간의 법적 분쟁의 결과로 인해 주목받고 있음.

        Hacker News 의견

     * 미국 대법원, Apple-Epic Games 법적 분쟁에 대한 항소 청취 거부
          + Epic Games가 Apple의 준수 조치를 ""악의적인 준수""로 간주하고 이의를 제기할 가능성이 높음. (업데이트: 확인됨)
     * Apple의 거래 수수료에 대한 법원의 판결에 대한 토론
          + Apple이 개발자로부터 지적 재산 사용에 대한 라이선스 수수료를 받는 방법으로 IAP(인앱 결제)를 사용한다는 사실에 대한 설명. IAP가 없더라도 Apple은 여전히 개발자에게 수수료를 부과할 수 있으나, 수수료 징수가 더 어려워질 것임.
          + 법원은 Apple이 특정 수수료율(예: 30%)을 선택한 근거를 찾지 못했지만, Apple이 지적 재산 사용에 대해 어느 정도의 보상을 받을 권리가 있다고 결론지음.
     * Apple의 수수료 정책에 대한 의견
          + Apple의 브라우저를 통해 구매하는 모든 것에 대해 Apple이 수수료를 부과하는 것에 동의한다면, 휴대폰을 통한 모든 데이터 입출력에 대해서도 수수료를 부과하는 것에 동의해야 한다는 의견 제시.
     * Kindle 앱의 인앱 구매 불가능성에 대한 불만
          + Kindle iOS 앱에서 직접 구매할 수 없어 웹 앱으로 이동해야 하는 것이 불편함. Apple과 Amazon이 소비자를 위해 이 문제를 해결하지 않는 것은 Apple이 사용자의 이익보다 자사의 경쟁 이익을 우선시한다는 것을 시사함.
     * 아마존의 수수료 정책에 대한 관점
          + 아마존이 제3자 판매자로부터 받는 약 9%의 수수료(실제로는 12%지만 신용카드 처리 비용 포함)에 대한 설명. 물리적 상품 판매와 관련하여, 상품 생산 비용을 고려하면 아마존의 수수료가 Apple 앱 스토어 수수료와 유사하다는 주장.
     * 네덜란드에서의 Apple의 전략과 미국 법원의 대응
          + 네덜란드 법원이 제3자 결제를 허용하도록 강제한 후 Apple이 채택한 전략에 대한 설명. Apple은 15/30% 수수료가 자사 인프라(앱 스토어 등) 사용에 대한 일반적인 수수료라고 주장하며, 개발자가 결제 처리를 직접 담당할 경우 결제 처리 비용을 제외한 나머지 수수료를 여전히 지불해야 한다고 함.
     * 아마존의 Kindle 책 판매와 Apple의 수수료 정책
          + 아마존이 Apple 앱 스토어 외부에서 Kindle 책을 판매하고, 구매한 책을 Kindle 앱에서 볼 수 있도록 하는 현재의 관행이 Apple의 새로운 수수료 규칙과 어떻게 일치하는지에 대한 의문 제기.
     * 사이드로딩의 완성과 수수료 감소 예상
          + 사이드로딩이 완성되면 (몇 년 후에) 27-30%의 과도한 수수료가 급격히 감소할 것으로 예상. Apple의 독점적인 행태와 생태계에 대한 비판.
     * 외부 웹 구매를 통한 개발자 수익 추적 방법
          + Apple과 Google의 결제 라이브러리를 사용하는 것이 어렵기 때문에 많은 개발자들이 Qonversion이나 RevenueCat과 같은 제3자 서비스를 사용함. 웹 페이지를 통해 결제를 진행하면 백엔드에서 사용자의 결제 여부를 직접 저장할 수 있어 실제로 더 쉬울 수 있음.
"
"https://news.hada.io/topic?id=12896","웹브라우저 GPU를 이용해 이미지 생성을 가능하게 하는 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  웹브라우저 GPU를 이용해 이미지 생성을 가능하게 하는 프로젝트

     * Web Brower GPU로 Stable Diffusion Turbo를 작동시키는 프로젝트 입니다.
     * 많은 분들이 아시겠지만 웹에서 SD를 사용하고 싶으시다면 ClipDrop이 가장 빠르고 정확합니다. [링크]
     * 이는 로컬에서 설치하셔서 SD를 쓰고 계신 분들이 아닌 일반적인 사용자가 SD를 사용하는 경우를 가정한 것이니 참고 부탁드립니다.
"
"https://news.hada.io/topic?id=12989","전설적인 아이디어 공장인 벨 연구소가 뉴저지 본거지를 떠날 준비를 하면서 추억되다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             전설적인 아이디어 공장인 벨 연구소가 뉴저지 본거지를 떠날 준비를 하면서 추억되다

벨 연구소의 역사와 발명품들

     * 벨 연구소는 다수의 발명품을 탄생시킨 곳으로, 특히 트랜지스터와 여행파관(traveling-wave tube)은 1962년 발사된 텔스타 1 위성의 핵심 구성 요소로, 전 세계 통신을 혁신함.
     * 마리오 로메로는 벨 연구소에서 30년간 근무했으며, 그곳에서의 근무를 학교에 다니는 것처럼 배우고 기여하는 경험으로 묘사함.
     * 뉴저지 주 머레이 힐에 위치한 벨 연구소는 수십 년간 혁신의 중심지였으며, 노벨상 수상자를 포함한 세계 최고의 과학자들이 근무했음.

벨 연구소의 이전과 추억

     * 노키아 벨 연구소는 머레이 힐 캠퍼스를 떠나 새로운 기술 허브가 건설되는 뉴 브런즈윅으로 이전할 예정이며, 이 소식은 현직 및 전직 직원들에게 많은 추억을 불러일으킴.
     * 벨 연구소는 트랜지스터, 레이저, 라디오 천문학, 인공지능의 시작 등 세계적으로 중요한 발명품을 탄생시킨 곳임.
     * 벨 연구소는 1925년 AT&T와 웨스턴 일렉트릭이 공동 소유한 벨 시스템의 과학 및 통신 연구 부서로 시작되었으며, 노벨상 수상 발견물을 생산하고 제2차 세계대전 승리에 기여함.

벨 연구소의 발명과 과학적 성과

     * 벨 연구소는 아이디어의 공장으로 불리며, 1942년에 머레이 힐 본사를 개소하여 제2차 세계대전 중 중요한 연구를 수행함.
     * 트랜지스터 발명, 텔스타 1 위성의 개발, 디지털 카메라의 기술, 전자기기의 혁신 등 벨 연구소는 다양한 과학적 성과를 이룸.
     * 벨 연구소는 또한 다양한 인종의 과학자들에게 기회를 제공하고, 다양성을 증진시키는 데 기여함.

벨 연구소의 새로운 본부

     * 벨 연구소의 새로운 본부는 뉴 브런즈윅의 HELIX 혁신 센터에 위치할 예정이며, 이는 과학 연구와 개발을 위한 최첨단 시설이 될 것임.
     * 노키아는 이 이전이 벨 연구소가 최첨단 기술의 최전선에 머무를 수 있도록 도울 것이라고 밝힘.
     * 벨 연구소는 직원 수를 줄이지 않을 예정이며, 새로운 건물은 연구자들의 요구에 맞춘 맞춤형 실험실을 갖출 것임.

GN⁺의 의견

     * 벨 연구소는 현대 통신과 기술의 발전에 있어 중추적인 역할을 한 곳으로, 특히 트랜지스터와 디지털 카메라 센서와 같은 발명품은 오늘날의 전자기기에 없어서는 안 될 기술임.
     * 이 연구소의 이전은 과학 기술 분야에서의 지속적인 혁신과 발전을 위한 중요한 단계로, 새로운 시설은 미래의 연구와 개발에 더욱 적합한 환경을 제공할 것임.
     * 벨 연구소의 역사와 성과는 과학과 기술에 관심 있는 사람들에게 영감을 주며, 이러한 연구 기관의 변화는 기술 발전의 방향과 속도에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 한 사용자는 커네티컷의 카지노 여행 중 고연령의 전직 벨 연구소(Bell Labs) 직원들과 만나 대화를 나눈 기억을 공유함. 이들은 과거 펀치 카드를 사용해 프로그래밍하던 시절의 경험을 가지고 있었으며, 이 만남은 사용자에게 매우 멋진 경험이었음.

     ""여러 해 전, 커네티컷의 한 카지노에 갔을 때, 도박에 큰 관심은 없었지만, 고연령의 전직 벨 연구소 직원들과의 만남이 인상적인 추억으로 남았음. 그들은 펀치 카드로 프로그래밍하던 시절의 경험을 가지고 있었고, 그들과의 대화는 매우 멋진 경험이었음.""
     * 뉴저지의 뉴브런즈윅으로 이전하는 벨 연구소의 새로운 본사에 대한 소식이 전해지며, 현재 및 전직 직원들 사이에서 온라인으로 추억이 공유됨. HELIX 혁신 센터로 알려진 새로운 기술 허브는 뉴브런즈윅 시내에 위치할 예정이며, 이 지역은 상대적으로 생활비가 저렴하고, 루트거스 대학교가 있으며, 뉴욕시와 가까운 교통편을 가지고 있어 투자하기에 매력적인 곳으로 평가됨.

     ""벨 연구소의 새로운 본사가 뉴저지 뉴브런즈윅의 HELIX 혁신 센터에 위치할 예정이며, 이 지역은 생활비가 저렴하고, 루트거스 대학교가 있으며, 뉴욕시와 가까운 교통편을 가지고 있어 투자하기에 매력적인 곳으로 평가됨.""
     * 다른 사용자는 벨 연구소의 캠퍼스를 방문했을 때, 과거에 이루어진 혁신적인 작업들을 떠올리며 신비로운 분위기를 경험했다고 언급함. 캠퍼스는 대부분 비어 있었고, 일부 방에는 오래된 컴퓨터들이 남아 있어 마치 과거로 돌아간 듯한 느낌을 받았다고 함.

     ""벨 연구소의 캠퍼스를 방문했을 때, 과거에 이루어진 혁신적인 작업들을 떠올리며 신비로운 분위기를 경험했음. 캠퍼스는 대부분 비어 있었고, 일부 방에는 오래된 컴퓨터들이 남아 있어 마치 과거로 돌아간 듯한 느낌을 받았음.""
     * 한 사용자는 ""The Idea Factory: Bell Labs & the Great Age of American Innovation""이라는 책을 읽고 있으며, 벨 연구소에서 일어난 발명과 아이디어, 그리고 그곳의 문화에 대한 이야기가 매우 흥미롭다고 추천함.

     ""벨 연구소에서 일어난 발명과 아이디어, 그리고 그곳의 문화에 대한 이야기가 담긴 'The Idea Factory: Bell Labs & the Great Age of American Innovation'이라는 책을 읽고 있으며, 이 책이 매우 흥미롭다고 추천함.""
     * R&D 또는 벨 연구소와 유사한 분위기의 직장을 찾고 있는 사용자가 미국 외 지역에서 일할 수 있는 좋은 곳을 추천해달라고 요청함.

     ""R&D 또는 벨 연구소와 유사한 분위기의 직장을 찾고 있는 사용자가 미국 외 지역에서 일할 수 있는 좋은 곳을 추천해달라고 요청함.""
     * 벨 연구소가 UNIX 운영 체제, C++ 및 여러 프로그래밍 언어의 발상지였다는 사실을 언급하며, 혁신적인 회사라도 한두 가지 나쁜 아이디어를 가질 수 있다는 의견을 제시함.

     ""벨 연구소가 UNIX 운영 체제, C++ 및 여러 프로그래밍 언어의 발상지였다는 사실을 언급하며, 혁신적인 회사라도 한두 가지 나쁜 아이디어를 가질 수 있다는 의견을 제시함.""
     * 벨 연구소의 모든 사무실이 특별했으며, 특히 홀름델 사이트는 두 건물 중 건축적으로 더 아름다운 곳이었고, 현재는 'Bell Works'로서 기능하고 있다고 언급함.

     ""벨 연구소의 모든 사무실이 특별했으며, 특히 홀름델 사이트는 건축적으로 더 아름다운 곳이었고, 현재는 'Bell Works'로서 기능하고 있음을 언급함.""
     * 한 기사가 벨 연구소의 중요성 상실에 이르게 된 상황을 무시하고 있다고 비판하며, 과학계에서 큰 사기 사건 중 하나로 꼽히는 사건을 예로 들어 벨 연구소의 몰락을 설명함. AT&T의 독점이 해체된 후 상업적 응용 프로그램에 초점을 맞추도록 격려받았고, 이로 인해 최고의 과학자들이 대학으로 떠났으며, 이후 루슨트 테크놀로지스에 소유권이 넘어갔다고 함.

     ""한 기사가 벨 연구소의 중요성 상실에 이르게 된 상황을 무시하고 있으며, 과학계에서 큰 사기 사건 중 하나로 꼽히는 사건을 예로 들어 벨 연구소의 몰락을 설명함. AT&T의 독점이 해체된 후 상업적 응용 프로그램에 초점을 맞추도록 격려받았고, 이로 인해 최고의 과학자들이 대학으로 떠났으며, 이후 루슨트 테크놀로지스에 소유권이 넘어갔음.""
     * 마지막으로, 자유의 여신상이 수리가 필요할 때 어디서 노후화된 구리 패널을 구할 수 있을지에 대한 질문이 나옴.

     ""자유의 여신상이 수리가 필요할 때 어디서 노후화된 구리 패널을 구할 수 있을지에 대한 질문이 나옴.""
"
"https://news.hada.io/topic?id=12945","구글을 애도하는 사람들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              구글을 애도하는 사람들

구글에 대한 애도

     * 2010년 3월 15일, 구글에서 새로운 직장을 시작함.
     * 구글은 2010년 세계에서 가장 멋진 곳으로 일하기에 최적의 장소였음.
     * 구글에 대한 행복과 흥분을 표현할 말이 부족했음.
     * 현재 구글에서의 해고 논의가 이루어지고 있는데, 구글플렉스에서의 기쁨이 사라진 것 같음.

빅테크에 대한 대중의 인식 변화

     * 빅테크에 대한 대중의 인식이 긍정에서 부정적으로 변화함.
     * 대중의 신뢰가 소멸하고 냉소주의로 변화하는 것을 내부에서는 잘 인지하지 못함.
     * 인터넷 회사가 자본주의의 문제를 우회할 수 있을 것이라는 잘못된 생각을 했음.

""Ten blue links""

     * 페이지랭크로 검색된 'Ten blue links'는 특별한 매력이 있었음.
     * 2024년 현재, 구글은 검색 분야에서 우위를 잃음.
     * 구글의 대안들이 등장하고 있으며, 웹의 유연하고 창의적인 목소리들이 여전히 존재함.

구글의 문제점

     * 구글의 문제는 비즈니스에 능숙한 것으로 보이는 사이코패스적 인물들을 고용하고 권한을 부여한 것임.
     * 구글 제품을 사용할 때 이들이 사용자 편이 아닌 것 같은 느낌을 받음.

사용할 구글 제품

     * 구글 제품 중 크롬은 구글 관련 서비스에 사용하고, 사파리와 파이어폭스는 비구글 서비스에 사용함.
     * 구글 워크스페이스는 여전히 사용 중이며, 가격이 합리적임.
     * 구글 맵스와 리뷰의 결합은 독점적인 냄새가 남.
     * 안드로이드와 픽셀 폰은 여전히 사용 중이며, 특히 카메라를 좋아함.
     * 유튜브는 좋아하지만, 문제가 생기기 시작함.

그 카페

     * 2012년 구글의 Identity 그룹으로 이동했을 때, 구글+가 주목받고 있던 시기였음.
     * 클라우드 카페는 거의 초월적인 경험을 제공했음.
     * 구글+가 목표를 달성하여 그 해에 90K 보너스를 받음.
     * 그 시절이 끝났으며, 그리워하는 것은 괜찮음.

GN⁺의 의견

     * 구글이 한때 기술과 혁신의 선두주자였으나, 현재는 그 명성이 퇴색하고 대안들이 등장하고 있음이 중요함.
     * 구글의 문제점 중 하나는 기업 내부의 문화와 리더십이었으며, 이는 다른 기업들에게도 시사하는 바가 큼.
     * 이 글은 구글과 같은 빅테크 기업들이 어떻게 시간이 지남에 따라 변화하고, 그 변화가 사용자와 사회에 어떤 영향을 미치는지에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 구글의 쇠퇴 원인에 대한 다른 이론
          + 10-15년 전 구글은 최고의 프로그래머를 고용하고 자유를 주면 모든 시장에서 승리할 제품을 만들 것이라는 명확한 전략을 가지고 있었음.
          + 그러나 이러한 전략은 성공하지 못했고, 구글은 많은 재능 있는 사람들을 고용했지만 놀라운 신제품은 많이 나오지 않았음.
          + 이는 구글이 기업 문화를 일반적인 기업 문화로 바꾸게 한 원인이며, 이는 피츠제럴드의 ""밤은 부드러워""라는 책과 비슷한 상황임.
     * 2017년 구글 입사 경험
          + 구글에 입사했을 때 이미 파티가 끝나가는 느낌이었고, ""악마를 쫓지 말라""는 구호가 직원 매뉴얼 하단으로 옮겨진 직후였음.
          + 3년을 채우지 못했으며, 뛰어난 개인들을 만났지만 전체 조직은 IBM과 비슷한 느낌이었음.
     * 빅테크 기업의 문제
          + 래리와 세르게이는 기업성에 대해 잘 모르고, ""비즈니스에 능한"" 것으로 보이는 사람들을 고용하고 권한을 부여했음.
          + 이러한 유형의 사람들을 어떻게 배제할 것인가는 모든 회사 창립자가 직면한 진짜 도전임.
     * 구글의 문화 죽음에 대한 블로그 포스트
          + 구글이 광고를 판매하는 것 외에는 돈을 버는 제품을 만들지 못했다는 점을 간과함.
          + 구글은 최고의 인재를 고용했지만 광고 외에는 돈을 버는 자체적인 제품을 만들지 못했음.
     * 초기 구글의 성공 요인
          + 초기 구글은 디자인과 마케팅에 대한 거부감이 있었고, 데이터 중심 접근 방식을 채택함.
          + 페이스북이 SV 급여 상한 약정을 깨면서 월스트리트에서 일해야 할 사람들이 기술 분야로 몰려들었음.
     * 구글의 명성 상실에 대한 반응
          + 구글이 더 이상 빛나지 않는 것에 대해 어느 정도 만족감을 느낌.
          + 구글에서 일하는 것은 큰 명성을 가지고 있었지만, 실제로는 기대에 못 미치는 프로젝트에 시간을 보내는 경우가 많았음.
     * 구글 제품과 크롬 사용에 대한 의견
          + 구글 맵, 캘린더, 문서, 번역 등을 크롬이 아닌 파이어폭스를 통해서도 문제없이 사용해왔음.
     * 구글에 대한 실망
          + 구글은 본질적으로 악하지만 한때는 좋은 일을 했던 기업이었음.
          + 구글은 현재 구제 불능이며, 분할이나 규제가 필요함.
     * 빅테크 기업과 공룡 비유에 대한 비판
          + 공룡이 진화의 막다른 길이었다는 구식 생각을 강화하는 비유에 대해 비판함.
          + 공룡은 번성했고, 멸종의 주된 원인은 거대한 소행성의 충돌이었음.
"
"https://news.hada.io/topic?id=12899","미드저니 훈련에 사용된 작품의 아티스트로 등재된 것에 대하여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미드저니 훈련에 사용된 작품의 아티스트로 등재된 것에 대하여

Cat and Girl의 창작물 라이선스

     * Cat and Girl은 Creative Commons Attribution-NonCommercial-ShareAlike 2.5 라이선스 하에 배포됨.
     * 이 웹사이트는 웹코믹을 제공하며, 작품은 비상업적 용도로 공유하고 수정할 수 있음을 의미함.
     * 사용자들은 저작자를 표시하고, 동일한 조건 하에서만 변경된 작업물을 배포할 수 있음.

웹사이트 구독 및 연락처 정보

     * 웹사이트 방문자는 RSS를 통해 새로운 게시물과 댓글을 구독할 수 있음.
     * 웹코믹과 관련된 문의사항은 이메일(dorothy[at]catandgirl.com)로 연락 가능함.

   GN⁺의 의견:
     * 이 웹사이트는 창의적인 웹코믹을 제공하며, 독특한 창작물에 대한 접근성을 높이는 라이선스를 사용함으로써 문화적 가치를 증진시키는 것이 중요함.
     * 웹사이트의 구독 기능은 사용자들이 새로운 콘텐츠를 놓치지 않고 지속적으로 즐길 수 있게 해주는 편리한 방법임.
     * 이메일을 통한 직접적인 연락 가능성은 창작자와 독자 간의 소통을 강화하고, 커뮤니티의 활성화에 기여할 수 있음.

        Hacker News 의견

     *

     ""하지만 나는 이제 무료로 만화를 대중에게 제공할 수 없어. 이윤을 창출하는 회사들이 소통의 주요 채널을 소유하고 있기 때문에, 그들을 위해 무급으로 일해야 하니까.""
          + 이것이 나에게 문제의 핵심이다. OpenAI는 이윤을 창출하는 회사는 아니지만 분명히 가치 있는 회사다. 다른 사람들이 만든 콘텐츠로 구축된 가치 있는 회사가 그들에게 어떠한 가치도 되돌려주지 않는 것은 법적인 문제를 떠나 잘못된 것 같다. OpenAI의 훈련에서 저작권이 있는, 허가받지 않은 콘텐츠를 제거한다면 OpenAI의 제품 가치는 얼마나 될까? OpenAI가 저작권 콘텐츠를 사용할 수 없다면 가치가 떨어진다고 생각한다면, 그 가치의 일부를 콘텐츠 제작자에게 돌려줘야 한다고 생각한다.
          + 웹코믹과 관련된 다른 주제: Terminarter
               o 만약 운영체제가 스크롤 바를 숨겨서 페이지가 더 길다는 것을 알아차리지 못했다면, 웹코믹 아래의 텍스트 코멘터리를 참고하라.
     *

     ""이 주제에 대해 반박하기 어렵다. Penny Arcade의 발언도 마찬가지다. 그들의 구체적인 주장을 수사학적인 말들 사이에서 이해하기 어렵기 때문이다. 나는 그들의 댓글 섹션이나 소셜 미디어 채널에서 이에 대해 논의하는 것조차 주저스럽다.""
          + AI 아트가 언제 받아들여질 수 있을까? 대기업이 이러한 모델을 만들었다는 사실이 정말 중요한가? 법적이거나 윤리적인 차이가 있을까? 개인이 만든 모델이라면 어떨까? 그들의 작품이 훈련 데이터에 사용되었는지 여부가 중요한가? 만약 공공 도메인의 사진, 비디오, 예술 작품만으로 훈련된 새로운 모델이 똑같이 능력이 있다면 어떨까? 미래의 모델이 단 한 두 예시만 보고도 예술 스타일을 모방할 수 있다면 어떨까? 그러한 모델이 개발되기까지는 시간 문제일 수 있다. 그때는 괜찮을까? 아니라면 왜 그럴까? 개인적으로, AI 모델 사용자가 마치 자신이 이미지를 만든 것처럼 법적이고 윤리적으로 AI 아트를 사용하는 것이 그들의 책임이라고 생각한다.
     *

     ""창작자의 독점 콘텐츠로 훈련된 모델로 이익을 얻는 사람들이 콘텐츠에 대한 대가를 지불하기 시작하는 것이 창작자, 사회, 심지어 AI 회사에게도 더 나을 것이다. AI 회사에 저작권법이 적용되는지에 대해 사람들이 논쟁하는 것을 듣는 것은 지치는 일이다. 저작권법은 적용된다. 제대로 된 라이선싱 모델을 마련하자.""
     *

     ""만약 아티스트의 라이선스가 비상업적 사용을 위한 것이라면, 상업적 사용을 위해 AI 훈련에 사용하는 것은 명백한 위반 아닌가? 왜 그렇지 않은지 알고 싶다.""
     *

     ""이런 상황에서 나쁜 분위기를 극복하기는 매우 어려울 것이다. 기술은 비전문가에게는 해독할 수 없어 보인다. 법은 일반인에게는 해독할 수 없어 보인다. 윤리는 모두에게 해독할 수 없어 보인다. 이렇게 혼란스러운 상황에서, 공정하게 대우받았다고 느끼기 위해서는 집단 소송에 참여하는 것만으로는 충분하지 않을 수 있다. 예를 들어, 회사를 고소하고 싶은 사람들을 연결해주는 프로토콜이나 사이트가 있다면 대중의 신뢰에 도움이 될 것이다. 단지 사회가 평등과 정의의 가치를 지지한다는 것을 보여주는 것이다.""
     *

     ""이 예술가의 작품이 'Midjourney' 훈련에 사용되었다는 것에 대해 조금 의심스럽다. 그들의 이름이 그 목록에 나타난다고 해서 말이다. 내 이해로는 해당 목록은 위키피디아에서 스크랩한 예술가 이름의 목록일 뿐이며, CLIP이 그들을 알고 있는지 확인하기 위해 프롬프트에서 시도해볼 가능한 스타일로 사용되었다. 목록에 있다고 해서 반드시 예술가의 작품이 Midjourney 훈련에 사용되었다는 의미는 아니며, 목록에 없다고 해서 사용되지 않았다는 의미도 아니다.""
     *

     ""이 문제를 해결하는 간단한 방법이 있다. 공공 데이터로 훈련된 대규모 사적 모델을 금지하고, 공개된 가중치를 요구한다. 회사가 대규모 사적 모델을 훈련하고 싶다면, 자신들의 데이터로 해야 한다.""
     *

     ""나는 'cat and girl'을 잘 몰랐기 때문에 몇 개의 무작위 만화를 봤고, 이 만화를 발견했다: Heroes and Villains. 우주는 때때로 나를 확신시킨다. 그것은 어두운 유머 감각을 가지고 있다.""
     *

     ""이것은 내가 느낀 첫 번째 코멘터리다. 그러니 작가에게 경의를 표한다. 오늘날 세상을 변화시키는 생성 AI는 세 그룹의 작업에서 비롯되었다. 소프트웨어 개발자, Reddit 댓글 작성자, 디지털 아티스트들이다. Reddit 댓글 작성자들은 오래전에 자신들의 권리를 포기했고 신경 쓰지 않는다. 우리에게 남은 것은 소프트웨어 개발자와 디지털 아티스트들이다. 일반적으로 소프트웨어 개발자들은 풍부하게 지불받았고, 디지털 아티스트들은 그렇지 않았다. 소프트웨어 개발자들은 자신들의 작업을 수정할 수 있도록 공개했지만, 아티스트들은 그렇지 않았다. 아마도 가장 중요한 것은, 소프트웨어 개발자들이 생성 AI를 만들었기 때문에, 어떤 면에서는 우리 자신의 창조물이다. 자신의 직업을 식인하는 것은 다른 외계인 그룹에 의해 자신의 것이 잡아먹히는 것과는
     매우 다른 느낌이다. 워싱턴이 불타야 한다면, 그것이 영국인에 의한 것이지 화성인에 의한 것이 아니길 바란다. 만약 우리 손에 의해 이루어진 것이 아니었다면 우리는 어떻게 반응했을까?""
"
"https://news.hada.io/topic?id=12921","존 라세터가 그린 BSD 데몬 로고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          존 라세터가 그린 BSD 데몬 로고

""토이 스토리"" 감독이 BSD 데몬 로고도 그렸다

     * 컴퓨팅과 인터넷의 역사에 매료되어 있던 저자는 MIT 벼룩시장을 정기적으로 방문하여 첫 컴퓨터 부품을 구입하고, 1986년 4월 버전의 BSD 4.3 매뉴얼 전체 세트를 발견함.
     * 매뉴얼 세트에는 두 개의 동일한 색인이 포함되어 있었으며, 이는 다중 사용자 시스템에서 유용했을 것임.
     * 책들은 nroff로 포맷된 익숙한 매뉴얼 페이지를 담고 있으며, 일부는 현대 UNIX 계열의 man 프로그램에서 찾을 수 있는 것보다 훨씬 짧음.
     * 각 책의 표지에는 프로세스의 ""포킹""을 나타내는 삼지창을 든 친숙한 ""Beastie"" 데몬 마스코트가 그려져 있음.
     * 책의 앞 표지 안쪽에는 초기 UNIX 시스템과 현대 문화 사이의 흥미로운 연결고리가 드러남.
     * 표지 디자인은 ""토이 스토리"", ""벅스 라이프"", ""토이 스토리 2"", ""카"" 등을 쓰고 감독한 존 라세터가 맡았으며, 그의 버전이 가장 인기 있는 버전이 됨.

GN⁺의 의견

     * 이 기사는 컴퓨팅 역사의 흥미로운 일화를 공유하며, 유명한 애니메이션 감독인 존 라세터가 BSD 운영체제의 마스코트인 데몬 로고를 디자인한 사실을 밝힘.
     * 컴퓨터 과학과 영화 산업 간의 예상치 못한 연결고리는 기술과 창조성이 어떻게 서로 영향을 줄 수 있는지 보여줌.
     * 이러한 발견은 컴퓨팅 역사에 대한 깊은 이해와 함께 현대 문화에 대한 새로운 시각을 제공하며, 기술과 예술의 교차점에 관심이 있는 사람들에게 매우 흥미로운 내용임.
"
"https://news.hada.io/topic?id=12942","성인이 되어 다시 배우는 수학","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            성인이 되어 다시 배우는 수학

성인으로서 수학을 (다시) 배우는 방법

     * 성인이 된 후에 매일 수학을 연습한 지 100일을 넘김.
     * AI 제품 작업을 하면서 기술적인 부분을 이해하고 싶었으나, 대규모 언어 모델과 변환기에 대해 배우려 할 때 난관에 부딪힘.
     * 통계, 선형대수학, 미적분학에 대한 이해가 필요했으나, 대학원 이후로 수학을 많이 다루지 않아 기초가 부족함을 느낌.

Math Academy

     * Math Academy는 성인이 효율적이고 시간을 절약하면서 수학을 배울 수 있는 방법을 제공함.
     * 이 프로그램은 중학교부터 대학원 수준까지의 수학 과정을 제공하며, 모든 과정이 공인됨.
     * 'Foundation Series'는 성인을 위한 과정으로, 빠르게 대학 수준의 수학을 배울 수 있도록 설계됨.

수학은 어렵다

     * Math Academy는 수학 학습을 가능한 쉽게 만들지만, 여전히 많은 노력이 필요함.
     * 진지하게 수학을 배우고자 한다면, Math Academy보다 더 좋고 편리한 방법은 없음.

성공을 위한 설정

     * 일상에서 수학을 습관으로 만들기 위해 활성화 에너지를 낮추고 새로운 '기본' 행동으로 만들기 위한 노력을 함.
     * 편의성과 일관성을 통해 좋은 습관을 형성하는 데 도움을 받음.

일관성

     * 목표는 LLM과 변환기를 더 잘 이해하기 위한 수학을 배우는 것임.
     * Math Academy에는 '머신러닝을 위한 수학' 과정이 있어 명확한 목표를 제공함.
     * 수학의 광범위함과 깊이를 인식하고, 하루에 한 과정씩 꾸준히 배워 나감.

GN⁺의 의견

     * Math Academy는 성인이나 아이들에게 수학을 효과적으로 배울 수 있는 훌륭한 플랫폼임.
     * 짧은 시간에 수학 개념을 학습하고 이해할 수 있도록 설계된 과정은 바쁜 일상 속에서도 학습을 가능하게 함.
     * 이러한 자기 주도적 학습 방식은 기술적인 분야에 관심이 있는 사람들에게 매우 유익하며, 수학을 포함한 STEM 분야에 대한 접근성을 높이는 데 기여함.

        Hacker News 의견

     * 한 부부가 아내의 대학 진학을 결정했음. 아내는 핀란드에서 영어나 컴퓨터 과학 학사 학위를 취득하기로 함. 핀란드 대학 입학은 학교 시험 성적에 기반을 두고 있으며, 아내는 10년 전 모든 시험에서 좋은 성적을 받았지만 수학에서는 낮은 성적을 받았음. 건강과 가족 문제로 인해 집중력이 떨어졌기 때문임.
          + 남편은 아내가 수학 시험을 준비할 수 있도록 전념할 수 있는 안정적인 생활을 제공하기 위해 핀란드에서 첫 정규직을 얻음. 지난 10년간의 수학 시험을 온라인으로 풀고, 문제들을 Anki 카드로 만들어 공부함. 남편은 대학에서 추상대수학과 실해석학을 공부할 때 이 방법으로 큰 성공을 거둔 경험이 있어, 같은 방법과 안정적인 생활 환경이 대수학부터 기초 미적분학까지 성공할 것이라고 확신했음.
          + 5개월 후, 아내는 고등학교 시험을 다시 치르고 가능한 최고 점수를 받음! 이 빠른 성공은 아내가 컴퓨터 과학을 진지하게 고려하게 만들었고, 개선된 수학 시험 점수가 컴퓨터 과학 프로그램에 입학하는 데 결정적인 차이를 만들었음. 아내는 컴퓨터 과학 첫 학기에도 최고 성적을 받았고, 남편은 매우 자랑스러워함. 아내는 정말 놀라운 사람임.
     * 기계학습/인공지능 논문에서 사용되는 수학은 주로 '화이트보드 수학'이라고 불리며, 선형대수학, 미적분학, 집합론, 통계학의 특정 분야에 특화된 혼합임.
          + 관련 내용만 다루는 책을 찾을 수 있다면, 수학을 다시 배울 필요 없이 영어로 직역할 수 있음. 산업에 관련된 대부분의 ML 논문은 복잡한 증명이 필요하지 않으며, 실제로 미분을 직접 할 필요도 없음.
          + 90%는 변수의 도메인(즉, 유형), 함수의 공식, 가중 평균 계산에 내적이 포함되어 있음. 많은 수학처럼 들리지만, 실제로는 대학교 1학기 과정에서 충분히 다룰 수 있는 수준임.
     * 30대 예술 학위 소지자가 수학을 배우기로 결정함. 인기 있는 과학 책을 읽고 비유를 통해 개념을 이해하는 데 지쳐서 직접 '보고' 싶었음.
          + Khan Academy 등 온라인에서 1년 정도 시간을 보냈지만, 방향이 불분명했음.
          + 그래서 커뮤니티 칼리지에 등록함! 명확한 경로, 즉각적인 피드백, 교사, 그리고 공부를 계속하게 만드는 의무감이 있음.
          + 궁극적인 계획은 대학교로 편입 학점을 얻고 이번 10년을 천천히 물리학 학사 학위를 향해 나아가는 것임.
     * 약 1년 동안 3D 게임 제작에 필요한 수학을 배우고 있음. 주로 대수학, 기하학, 미적분학, 선형대수학을 공부함.
          + brilliant.org에서 시작했지만, 상호작용하는 수업의 광택은 좋았지만, 수업 구조가 순서가 맞지 않아 아직 다루지 않은 것들을 참조하는 문제가 있었음. Math Academy와 같은 페다고지에 대한 생각이 부족했음.
          + 그래서 대신에 The Art Of Problem Solving 시리즈 교과서를 구입함. 교훈 구조와 기본 원리에서 복잡한 아이디어를 구축하는 방식이 뛰어남. 연습 문제가 어렵지만 가치가 있음.
          + Math Academy도 흥미롭지만, 이미 시리즈의 절반을 마친 상태라면 살펴볼 것임. 참고 서적을 가지고 있는 것을 좋아함. 여러 번 기억에서 잊혀진 주제를 다시 공부하기 위해 돌아감.
          + 연습 문제를 가장 저기술적인 방법으로 풀지만, 새로운 접근법을 시도할 수 있는 자유를 좋아하며, 아이디어에서 종이에 잉크를 찍는 사이의 지연 시간을 이길 수 없음.
          + 또한, Chat GPT4를 튜터로 등록했음. 많은 사람들의 경험과 달리, 이 수준의 수학에서 매우 좋은 추론을 하는 것으로 나타남. 막혔을 때 여러 번 도움을 받았음. 잘못된 답을 내놓았을 때는 항상 이해하지 못하면 도전하고, 결국 문제를 재정의하거나 잘못된 입력을 시작했는지 알아냄.
     * 수학을 배우기 위한 많은 무료 자원이 웹에 있음에도 불구하고, 왜 월 $49를 지불해야 하는지에 대한 광고성 글임.
          + Khan Academy를 추천하며, YouTube에서 수학을 가르치는 많은 좋은 교사들이 있음.
          + OpenStax.org는 수학을 포함한 다양한 주제에 대한 무료 공개 서적을 제공함.
          + 일부 사람들에게는 과정을 완료하도록 동기를 부여하기 위해 돈을 지출하는 것이 필요할 수도 있음.
     * 훈련된 수학자로서, 누군가 ""수학이 어렵다""고 말할 때, 그것은 나쁜 교사들 때문이라고 느낌.
          + 기본부터 차근차근 쌓아 올리면 수학은 쉬움. 물리학 교육과 달리, 기존의 지식을 삭제하지 않고 순차적으로 지식을 구축하면, 어디에서나 적용할 수 있는 도구 상자를 만들 수 있음.
          + 맥락 없이 무작위로 수학을 배우는 것이 어려움. 한 번 사다리를 오르면 평생 갖게 됨.
     * 수학을 위한 몇 가지 훌륭한 채널 추천:
         1. SawFinMath: 문제/해결책을 한 단계씩 거치며 따라갈 수 있도록 하는 훌륭한 교수. 이산수학, 미적분학, 대수학, 통계학 등의 학부 과정 재생 목록이 있음.
         2. mathispower4u.com: 무료 개방형 수학 교과서를 사용하여 과정을 만드는 또 다른 교수. 더 순수한 수학 자료로 인해 약간 어려울 수 있지만, 대학에서 다루는 모든 것을 기본적으로 커버함. 문제를 생생하게 해결함.
          + myopenmath.com은 교과서를 따라가며 문제를 푸는 것과 비슷함. 이를 시도해본 사람이 있다면 경험을 공유할 수 있음.
     * OP가 여전히 변압기의 수학적 기초를 배우고 싶다면, 무료 대안 학습 도구를 만듦: afaik.io/nebula.
          + 이 도구는 수학, 기계 학습, 물리학 등 다양한 주제 간의 개념을 연결하는 기본 지식 그래프에 기반을 둠. 변압기에 대한 그래프를 확인할 수 있음.
          + 수학을 처음부터 배우는 것이 아니라, 개념을 이해하는 데 필요한 전제 조건만 배우면서, 무료 자원을 이용할 수 있음.
          + 수학을 다시 배우고 싶은 욕구를 완전히 이해하지만, 이 특정 상황에서는 더 효과적인 방법으로 깊이 있게 배우고 동시에 즐거움을 느낄 수 있음.
     * 몇 년 전(정확히 16년 전) 학교를 중퇴하고 병든 어머니를 돌보기 위해 일을 시작함.
          + 다시 학교에 가지 않았고, 그냥 일을 시작함.
          + 컴퓨터 과학 학위를 마칠 예정이며, 앞으로 4년이 남았지만, 수학이 어려울 것임.
          + 답을 맞추고 그 과정을 어떻게 알아냈는지 알 때의 흥분이 매우 고무적임. 거의 성관계보다 낫다고 할 수 있음.
     * 컴퓨터 과학으로 학교에 다시 갔을 때, 수학을 다시 배우기 위해 특정 책을 사용함. 대수학부터 시작하여 미적분학까지 다룸. 각 섹션 전에 사전 테스트가 있어 집중해야 할 부분과 건너뛸 수 있는 부분을 알 수 있음.
"
"https://news.hada.io/topic?id=12982","개발자 생산성 측정하기: 구글, 노션 등의 실제 사례들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     개발자 생산성 측정하기: 구글, 노션 등의 실제 사례들

     * 구글, 링크드인, 펠로톤, Amplitude, 인터컴, 노션, 포스트맨 등 17개 기술 회사들이 개발자 생산성을 측정하는 방법에 대한 심층 분석

1. 17개 기술 회사의 개발자 생산성 지표

     * 개발자 생산성 측정은 복잡한 문제로, 지식 기반 작업인 소프트웨어 엔지니어링에서 ""생산적""이라는 것의 의미 자체가 모호함
     * 개발자 생산성(DevProd) 또는 개발자 경험(DevEx) 팀이라 불리는 팀들이 개발자들이 고품질 소프트웨어를 쉽게 배포할 수 있도록 지원함
     * 이들 팀은 엔지니어링 팀의 생산성과 장애 요소를 측정하고, 그들의 작업이 실제로 영향을 미치는지 추적하기 위해 개발자 생산성 지표가 필요함
     * 이들 회사에서 사용하는 개발자 생산성 지표
          + 딜리버리 용이성 (Amplitude, GoodRx, Intercom, Postman, Lattice)
          + 실험 속도 (Etsy)
          + 서비스/앱의 안정성 (DoorDash)
          + SPACE 지표 (Microsoft)
          + 엔지니어당 주간 집중 시간 (Uber)
     * 회사 크기별로 4가지를 선정
          + Google : 직원 수 100,000명 이상
          + LinkedIn : 10,000명 이상
          + 펠로톤 : 1,000명 이상 10,000명 미만
          + 스케일업 (엔지니어 100명 이상 1,000명 미만): Notion, Postman, Intercom, Amplitude, GoodRx, Lattice

2. 구글의 접근 방식

     * 구글은 개발자 생산성 측정의 모범 사례로 자주 언급되지만, 구글만큼의 투자를 모방하는 것은 대부분의 회사에게는 불가능하다는 주장도 있음
     * 구글의 Developer Intelligence 팀은 개발자 생산성을 측정하고 리더들에게 통찰력을 제공하는 전문 부서임
     * 구글은 단일 지표가 생산성을 포착하지 못한다고 믿으며, 속도, 용이성, 품질의 세 가지 차원을 통해 생산성을 바라봄
          + Speed 속도: 코드 검토가 완료되는 데 얼마나 걸리나요?
          + Ease 용이성: 개발자가 코드 리뷰 프로세스를 진행하는 것이 얼마나 쉽거나 어려운가요?
          + Quality 품질: 코드 리뷰를 통해 받은 피드백의 품질은 어느 정도인가요?
     * 구글은 질적 및 양적 측정을 혼합하여 지표를 계산함

3. 링크드인

     * 링크드인은 마이크로소프트 내에서 독립적으로 운영되며 10,000명 이상의 직원을 고용함
     * 링크드인에는 개발자 생산성과 만족도를 측정하고 나머지 조직에 통찰력을 전달하는 Developer Insights 팀이 있음
     * 링크드인은 분기별 설문조사, 실시간 피드백 시스템, 시스템 기반 지표를 사용하여 지표를 캡처함
          + 분기별 설문조사:
               o 개발자 인사이트 팀은 분기별 설문조사를 통해 다양한 도구, 프로세스 및 활동 전반의 개발자 경험을 평가
               o 설문조사에는 약 30개의 질문이 포함되어 있으며 개발자는 약 10분 이내에 답변 가능
               o 설문조사는 개발자 인사이트 팀이 개발하고 관리하는 독점 플랫폼을 통해 제공되며, 실시간 피드백 및 지표 시스템에서 수집한 데이터를 기반으로 설문조사 문항을 고급 사용자 지정 및 개인화할 수 있음
          + 실시간 피드백 시스템:
               o 분기별 설문조사 사이에 피드백을 수집하기 위해 LinkedIn은 개발자가 개발 도구 내에서 수행하는 이벤트와 작업을 추적하고 특정 트리거에 따라 대상 설문조사를 전송하는 실시간 피드백 시스템을 개발
               o 이 시스템은 스마트 스로틀링 메커니즘을 사용하여 개발자에게 피드백 요청이 과도하게 몰리지 않도록 함
          + 시스템 기반 지표:
               o LinkedIn은 또한 시스템 데이터를 사용하여 지표를 계산하여 빌드 시간 및 배포 빈도와 같은 항목에 대한 고정밀 측정치를 제공
               o 개발자 인사이트 팀은 이 데이터를 수집하고 분석하기 위한 글로벌 시스템을 유지 관리하며, 이를 개발자 인사이트 허브(또는 iHub)라고 부름
               o 이 시스템을 통해 LinkedIn의 모든 팀은 각자의 필요에 맞는 사용자 지정 대시보드와 메트릭을 만들 수 있음
     * 링크드인은 질적 및 양적 지표를 모두 고려
          + 개발자 순 사용자 만족도(Developer Net User Satisfaction, NSAT) :개발자가 LinkedIn의 개발 시스템에 대해 전반적으로 얼마나 만족하는지를 측정. 분기별로 측정함
          + 개발자 빌드 시간(Developer Build Time, P50 및 P90): 개발자가 개발 중에 빌드가 로컬에서 완료되기를 기다리는 데 소요되는 시간을 초 단위로 측정
          + 코드 검토자 응답 시간(Code Reviewer Response Time, P50 및 P90): 코드 검토자가 작성자의 각 코드 검토 업데이트에 응답하는 데 걸리는 시간(업무 시간 기준)을 측정
          + 커밋 후 CI 속도(Post-Commit CI Speed, P50 및 P90): 각 커밋이 지속적 통합(CI) 파이프라인을 통과하는 데 걸리는 시간을 분 단위로 측정
          + CI 결정성(CI Determinism): 테스트 결함의 반대 개념. 테스트 스위트의 결과가 오류가 아닌 유효한 결과일 가능성을 의미
          + 배포 성공률(Deployment Success Rate): 프로덕션 환경으로의 배포가 얼마나 자주 성공하는지를 측정
          + 윈화 된 평균(Winsorized Means): 이상값 메트릭 내에서 개선 사항을 인식하는 방법. 최고값과 최저값을 가운데에 가까운 숫자로 대체하여 계산
          + 개발자 경험 지수(The Developer Experience Index): LinkedIn에서 팀에 제공하는 특별한 지표. 이 지수는 앞서 나열한 지표와 같은 여러 가지 지표를 기반으로 한 종합 점수

4. 펠로톤

     * 펠로톤은 약 3,000-4,000명의 직원을 고용하는 큰 회사로, 링크드인보다 훨씬 작음
     * 펠로톤의 측정 접근 방식은 개발자 경험 설문조사를 통해 질적 통찰력을 얻기 시작했으며, 나중에는 정량적 지표와 함께 사용함.
     * 펠로톤은 참여도, 속도, 품질, 안정성의 네 가지 주요 영역에 초점을 맞추어 생산성을 측정함
          + 참여도(Engagement): 개발자 만족도 점수
          + 속도(Velocity): 모든 신입사원의 첫 번째 및 10번째 PR까지의 시간, 리드 타임, 배포 빈도
          + 품질(Quality): 250라인 미만 PR의 비율, 회선 커버리지, 변경 실패율
          + 안정성(Stability): 서비스 복구 시간
     * 지표의 많은 부분을 측정하는 개발자 경험 설문조사는 제품 운영 조직의 일부인 Peloton의 기술 지원 및 개발자 경험 팀이 주도
     * 기술 지원 및 개발자 경험 팀은 설문조사 결과를 분석하고 조직 전체의 리더와 공유하는 역할도 담당

5. 스케일업 및 소규모 회사들

     * 노션, 포스트맨, 암플리튜드, 굿알엑스, 인터컴, 래티스와 같은 여러 스케일업 회사들은 100명에서 1,000명의 엔지니어를 고용함
     * 이들 회사는 ""이동 가능한 지표(Moveable Metrics)"" 에 초점을 맞춤
          + 이동 가능한 지표는 개발자 생산성 팀이 업무에 긍정적 또는 부정적으로 영향을 미침으로써 ""이동""시킬 수 있는 지표를 말함. 개발자 생산성 팀이 자신의 영향력을 보여주는 데 유용
     * 공통 지표들
          + 딜리버리 용이성 (Ease of Delivery, moveable):
               o 대부분의 회사는 개발자가 작업을 수행하는 것이 얼마나 쉬운지 또는 어렵다고 느끼는지에 대한 정성적 척도인 제공 용이성을 측정
               o 여러 DevProd 리더는 팀의 목표가 개발자의 삶을 더 편하게 만드는 것이기 때문에 이 지표를 업무의 '북극성'으로 삼는다고 말함
               o 이 지표는 상당히 움직일 수 있기 때문에 영향력을 보여주는 데도 유용
               o 이론적 관점에서 볼 때 이 지표는 인지 부하 및 피드백 루프와 같은 개발자 경험의 주요 측면도 포착
          + 참여도 (Engagement)
               o 개발자가 업무에 대해 얼마나 흥미를 느끼고 자극을 받는지를 측정하는 참여도를 추적
               o 일반적으로 HR 참여도 설문조사에서 참여도를 측정하지만, DevProd 팀도 이러한 이유로 참여도에 집중하는 것을 꼽음
               o 개발자 참여도와 생산성은 밀접한 관련이 있음. 즉, ""행복한 개발자가 생산적인 개발자""라는 말이 있듯이 개발자 참여도는 생산성의 지표로 볼 수 있음
               o 참여도 측정의 진정한 이점은 속도를 강조하는 다른 지표와 균형을 맞출 수 있다는 것. 소프트웨어를 더 빨리 제공하는 것은 좋지만, 개발자의 행복이 감소하는 것을 희생해서는 안 됨
          + 시간 손실 (Time Loss, moveable)
               o GoodRx와 Postman은 평균 시간 손실량에 주목함
               o 이는 작업 환경의 장애물로 인해 손실된 개발자의 시간 비율로 측정됨
               o 이 지표는 개발팀의 업무에 직접적인 영향을 미칠 수 있는 이동 가능한 지표를 제공한다는 점에서 딜리버리 용이성과 유사
               o 비용으로 환산할 수 있다는 점에서 큰 이점이 있고, 따라서 비즈니스 리더가 시간 손실을 쉽게 이해할 수 있음
               o 예를 들어 엔지니어링 인건비가 1,000만 달러인 조직에서 이니셔티브를 통해 시간 손실을 20%에서 10%로 줄인다면 이는 100만 달러의 비용 절감으로 이어짐
          + 변경 실패율 (Change Failure Rate)
               o 이는 DORA(DevOps Research and Assessment) 연구 프로그램의 네 가지 주요 지표 중 하나
               o Amplitude와 Lattice를 비롯한 여러 회사에서 추적하는 최상위 지표
               o DORA 팀은 변경 실패율을 다음과 같이 정의:

     ""프로덕션 또는 사용자에 대한 릴리스 변경으로 인해 서비스 저하(예: 서비스 장애 또는 서비스 중단)가 발생하고 이후 수정이 필요한 경우(예: 핫픽스, 롤백, 수정 전진, 패치 필요)의 비율""

6. 흥미로운 발견들

     * DORA 및 SPACE 지표는 선택적으로 사용되며, 모든 회사가 질적 및 양적 측정을 모두 사용함
          + DORA : DevOps Research and Assessment
          + SPACE : Satisfaction and wellbeing, Performance, Activity, Communication and collaboration, Efficiency and flow
     * ""집중 시간"" 에 대한 큰 강조가 있으며, 스트라이프와 우버는 ""충분한 집중 시간을 가진 일수""와 ""엔지니어당 주간 집중 시간""과 같은 구체적인 지표를 공유함
     * 독특한 지표들
          + Adoption Rate (DoorDash, GoodRx, Spotify)
          + Design Docs Generated per Engineer (Uber)
          + Experiment Velocity (Etsy)
          + Developer CSAT/NSAT (Chime, LinkedIn)

7. 자신만의 지표를 선택하는 방법

     * 구글의 Goals, Signals, Metrics (GSM) 프레임워크를 사용하여 지표 선택을 안내하는 것이 좋음
     * 문제를 해결하고자 하는 목표를 먼저 정의하고, 그 목표를 달성했다는 것을 알려주는 신호를 찾은 다음, 적절한 지표를 선택함
          + 목표 정의
               o Google: ""개발자가 빠르고 쉽게 훌륭한 제품을 제공할 수 있도록 지원합니다.""
               o Slack: ""모든 엔지니어에게 원활한 개발 환경을 제공합니다.""
               o Stripe: ""소프트웨어 엔지니어링을 더 쉽게 만듭니다.""
          + 목표로 부터 거꾸로 작업해서 최상위 지표를 정의하기
               o 개발자가 소프트웨어를 딜리버리하는 것이 얼마나 쉬운가?(Ease) : Ease of Delivery, Deployment Lead Time, Build Failure Rate
               o 개발자가 소프트웨어를 얼마나 빨리 딜리버리하는지 (Speed) : Perceived Delivery Speed, Perceived Productivity
               o 제공되는 소프트웨어의 품질 (Quality) : Incident frequency, Perceived Software Quality
     * 당신이 CTO, VPE, 엔지니어링 리드라면
          + 가장 좋은 조언은 ""문제를 재구성 하는 것(reframe the problem)""
          + 세가지 버킷에서 지표를 선택할 것
               o 비즈니스 임팩트
                    # 지금 구축해야 하는 이유는 무엇인가요?
                    # 이 프로젝트가 비즈니스에 어떤 방식으로 수익을 창출하거나 목표를 지원하는가?
                    # 이 프로젝트가 순조롭게 진행되고 있나요, 아니면 지연되고 있나요?
               o 시스템 퍼포먼스
                    # 엔지니어링 시스템은 빠르고 안정적인가요?
                    # 인프라가 안전하고 잘 유지되고 있나요?
                    # 사용자가 사용하는 서비스에 만족하고 있나요?
               o 엔지니어링 효율성
     * 정성적 지표와 정량적 지표를 혼합하여 측정하는 것은 모든 회사에서 공통적으로 나타나는 현상
          + 각 기업이 사용하는 다양한 측정 항목에서 영감을 얻을 것
          + 각 기업의 우선순위와 엔지니어링 문화에 따라 중점적으로 측정하는 항목에는 큰 차이가 있음

   이전 맥킨지 관련 글부터 관심갖고 있었는데, 요약 및 리마인드 되어서 좋았습니다.
"
"https://news.hada.io/topic?id=12955","Show GN: ERD Editor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: ERD Editor

   소개
     * Entity-Relationship Diagram Editor
     * 프로젝트의 최우선 순위는 사용자 편집 경험에 집중합니다.

   링크
     * Web App
     * VSCode Extension
     * 툴 사용법 가이드

   와 정말 좋은데요?

   와 오랜만에 보는 프로젝트네요! vuerd 맞죠?!

   맞아요 최근에 v3 작업하면서 변경했었거든요
"
"https://news.hada.io/topic?id=12969","아마존, "Sad Bastard Cookbook" 판매 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   아마존, ""Sad Bastard Cookbook"" 판매 중단

     * Rachel A. Rosen은 아마존이 'Sad Bastard Cookbook'을 내렸다고 호소함.
     * 아마존은 알고리즘에 걸린 이유나 해결 방법을 알려주지 않으며, 항소할 수 있는 방법도 제공하지 않음.
     * 이 책은 우울하거나 장애가 있는 사람들에게 무료로 배포하는 데 영향을 미치며, 종이책 판매는 수입의 큰 부분임.

커뮤니티의 반응

     * 다른 사용자들은 자체 호스팅을 제안하거나, 아마존과의 싸움에서 이긴 경험이 있는지 물어봄.
     * 일부는 아마존이 경쟁을 사들여 독점을 만든 것과 같은 방식으로 분산형 아마존 서점 클론의 시장이 있을 것이라고 언급함.
     * bookshop.org가 여전히 원래 소유주의 소유라는 것이 확인됨.

대안적 출판 방법

     * Rachel A. Rosen은 Itch.io와 nightbeatseu.ca에서 전자책을 호스팅하고 있으나, 이는 아마존의 알고리즘 또는 인쇄 주문 서비스를 대체하지 못함.
     * Ingram LightningSource를 통한 인쇄 주문 서비스와 자동화된 온라인 상점 목록 제공이 제안됨.
     * Lulu와 같은 다른 인쇄 주문 서비스도 제안됨.

GN⁺의 의견

     * 이 기사는 독립 출판물의 디지털 플랫폼과 인쇄 주문 서비스에 대한 중요성을 강조함. 아마존과 같은 대형 플랫폼에 의존하지 않고도 작가들이 자신의 작품을 배포할 수 있는 다양한 방법이 존재함을 보여줌.
     * 분산 소셜 네트워크와 같은 플랫폼은 작가와 독자 간의 직접적인 소통과 지원을 가능하게 하여, 대형 플랫폼의 독점적인 통제로부터 일정 부분 자유로움을 제공함.
     * 이 글은 독립 출판과 소셜 미디어 플랫폼의 결합이 어떻게 창작자 커뮤니티를 지원하고, 큰 기업의 정책 변경이나 알고리즘의 오류로 인한 문제에 대처할 수 있는지에 대한 흥미로운 사례를 제공함.
"
"https://news.hada.io/topic?id=13009","FTC, '무료' 서비스 광고하는 TurboTax에 대한 금지 조치 및 기만적 광고로 규정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FTC, '무료' 서비스 광고하는 TurboTax에 대한 금지 조치 및 기만적 광고로 규정

TurboTax의 기만적인 광고에 대한 FTC의 최종 판결

     * 미 연방거래위원회(FTC)는 TurboTax가 기만적인 광고를 통해 소비자를 속였다고 최종 판결함.
     * 모든 고객에게 무료가 아닌 경우, TurboTax는 무료 서비스를 광고할 수 없다고 명령함.
     * TurboTax는 특정 조건에 해당하는 소비자만 무료로 이용할 수 있는 서비스를 ""무료""라고 광고했으나, 이는 FTC 법을 위반한 것으로 판단됨.

Intuit의 반응과 FTC의 명령

     * TurboTax의 소유주인 Intuit는 이 결정에 대해 ""심각하게 결함이 있는 결정""이라며 연방 순회 법원에 항소함.
     * Intuit는 FTC가 고발자, 판사, 배심원, 그리고 항소 판사 역할을 모두 수행하는 편향되고 고장 난 시스템의 결과라고 비판함.
     * FTC는 Intuit에게 모든 고객에게 무료가 아니면 무료라고 광고하거나 마케팅하지 못하도록 명령함.
     * 또한 실제로 무료 서비스를 받을 수 있는 고객의 비율을 광고 근처에 명확하게 공개하도록 지시함.

소비자 보호 및 배상 조치

     * FTC는 Intuit가 제품이나 서비스에 대한 중요한 사실을 오해의 소지 없이 명확하게 표시하도록 요구함.
     * 이에는 가격, 환불 정책, 세금 공제나 공제를 주장하거나 TurboTax의 유료 서비스 없이 온라인으로 정확하게 세금을 신고할 수 있는 능력 등이 포함됨.
     * 지난 5월, Intuit는 무료 세금 신고 서비스에서 수백만 명의 저소득 미국인을 유도하여 44백만 명에게 환불을 지급하기로 합의함.
     * 대부분의 고객은 약 30달러를 받게 되며, 3년 연속 TurboTax를 사용한 일부 고객은 최대 85달러를 받게 됨.

   GN⁺의 의견:
     * 이 기사는 소비자 보호와 투명한 광고에 대한 중요성을 강조함. TurboTax와 같은 대형 소프트웨어 회사조차도 기만적인 마케팅 전략으로 인해 법적 조치를 받을 수 있음을 보여줌.
     * FTC의 결정은 다른 기업들에게도 경고의 메시지를 보내며, 소비자들이 광고된 정보를 신뢰할 수 있도록 하는 데 중요한 역할을 함.
     * 이 사건은 저소득층이 법적 의무를 이행하는 과정에서 불필요한 비용을 지불하지 않도록 보호하는 것이 얼마나 중요한지를 상기시킴.

        Hacker News 의견

     * 한 사용자는 TurboTax 광고에서 ""무료 좋아하는 사람""이 ""대략 37%의 납세자가 자격이 된다""는 면책 조항을 읽고 자신이 그 중 하나라고 생각하는 장면을 재미있게 봄. 이 광고는 소수에 불과한 37%를 마치 대다수가 해당될 것처럼 묘사하고 있음을 지적함.
     * 다른 사용자는 이러한 광고가 편향되고 고장 난 시스템의 결과라고 주장하면서, 광고에서 거짓말을 했다는 사실에서 주의를 분산시키는 것이라고 비판함. 또한, 실제로 '무료 서비스'에 해당하는 고객의 비율을 광고에 명확히 밝힐 것을 제안함.
     * 스웨덴에서는 대부분의 시민이 세무 당국에 의해 세금 신고가 대신 처리되며, 대부분의 사람들은 변경 사항이 없으면 단순히 문자를 보내는 것으로 처리됨.
     * 한 사용자는 IRS가 자체 세금 신고 앱의 베타 버전을 성공적으로 출시하기를 바라면서, 이러한 변화가 30년이나 늦었다고 언급함.
     * 또 다른 사용자는 대부분의 사람들에게 세금 납부가 무료여야 한다고 주장하며, 표준 공제만 다루는 경우에는 특히 그렇다고 강조함.
     * 대부분의 국가 정부가 소프트웨어 개발에 서툴지만, 대부분의 복잡하지 않은 경우에 대해 자동으로 세금 신고를 할 수 있는 무료 포털을 구축하는 데에는 성공했다는 의견을 제시함.
     * 한 사용자는 명확하고 정확한 커뮤니케이션을 중시하는 한편, 광고나 정치, 저널리즘, 소셜 미디어, 기업 커뮤니케이션 등 공공 커뮤니케이션 분야에서 이미 이러한 싸움이 패배했다고 인정함. '무료'라고 제공되는 것은 실제 가치가 낮거나 부정적일 수 있으며, 비용을 숨기려는 의도가 있다고 의심함.
     * IRS가 과거에 ""무료 무료 무료"" 광고를 운영할 예산이 있었다면 TurboTax는 존재하지 않을 것이라는 의견을 표현함.
     * '무료'는 얼마나 많은 세부 텍스트가 필요하든지 간에 무료를 의미해야 한다는 긍정적인 반응을 보임.
     * 마지막으로, 한 사용자는 네트워크 TV를 드물게 시청하지만, 광고가 종종 오해의 소지가 있을 정도로 오도하는 것에 놀람을 표함. Intuit이 자사의 세금 신고 제품을 '무료'라고 주장하는 것을 예로 들며, 이는 일반적인 관점에서 사실이 아님을 지적함. 비디오 광고에 대한 '세부 사항' 사용을 완전히 금지해야 한다는 의견을 제시함.
"
"https://news.hada.io/topic?id=13006","체코 공화국, IPv4 종료 날짜 설정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         체코 공화국, IPv4 종료 날짜 설정

체코 공화국, IPv4 종료 날짜 설정

     * 2024년 1월 17일, 체코 정부는 ""국가 행정에서 DNSSEC 및 IPv6 기술 구현 재시작""에 관한 자료를 승인함.
     * 이 결정에 따라 체코 국가 행정은 2032년 6월 6일부터 IPv4를 통한 서비스 제공을 중단할 예정임.
     * 따라서 체코 공화국은 IPv4 종료 날짜를 확정함.

혁명적 재시작: DNSSEC과 IPv6가 체코 국가 행정을 변화시킴

     * 1980년대부터 인터넷 통신의 핵심 요소인 IPv4 프로토콜은 연결된 기기에 고유 주소를 할당하는 데 효과적으로 사용됨.
     * 그러나 기기 및 서비스의 수가 증가함에 따라 주소의 수가 제한적인 IPv4는 더 이상 충분하지 않게 됨.
     * 인터넷 인프라의 확장성, 보안성, 효율성을 보장하기 위해 거의 무한한 주소를 제공하는 IPv6로의 전환은 필수적임.

IPv4와 작별 인사

     * IPv4와의 작별은 3056일 13시간 26분 26초 후에 이루어질 예정임.

GN⁺의 의견

     * 체코 공화국이 IPv4를 종료하고 IPv6로 전환하는 결정은 인터넷의 미래를 위한 중요한 발걸음임.
     * IPv6는 더 많은 기기와 서비스를 수용할 수 있는 충분한 주소 공간을 제공하여 인터넷의 확장성과 보안을 강화함.
     * 이러한 전환은 전 세계적으로 인터넷 인프라를 현대화하고 미래에 대비하는 데 중요한 역할을 할 것으로 기대됨.

        Hacker News 의견

     * 한 사용자가 개인 웹사이트를 IPv6만 사용하도록 AWS EC2로 마이그레이션했음. AWS에서 도입하는 IPv4 요금을 절약하기 위한 목적이었으며, Cloudflare를 통해 IPv4 프록시 주소를 제공받았음. 그러나 IPv6가 잘 정립된 기술임에도 불구하고 마이그레이션 경험이 좋지 않았음. 네트워크 엔지니어가 아니어서 기존 인스턴스에서 많은 네트워킹 구성을 업데이트하는 방법을 파악해야 했고, 많은 잠재적 문제들이 있었음. IPv6 주소를 할당하고 가상 네트워킹을 올바르게 구성한 후에도, IPv4 트래픽만 허용하도록 설정된 보안 그룹 설정 때문에 연결이 끊어졌음. curl과 같은 기본 디버깅 도구들은 기본적으로 IPv4를 사용하도록 설계되어 있어서, 웹서버(예: nginx)가 IPv6 인터페이스에서 수신하도록 설정하는 것이 까다로웠음. 또한, SSH 연결이 IPv4 트래픽만 기대하고 설정되어
       있어서 실수로 연결을 끊을 수 있음. 결국 Cloudflare로 마이그레이션하고 DNS를 수정하는 등의 작업에 90분 정도 걸렸음. 이 과정에서 몇 가지를 배웠지만, IPv6 세계로의 전환을 위해서는 시스템과 도구가 좀 더 쉽게 만들어져야 할 필요가 있음을 느낌.
     * 중국의 14차 5개년 계획(2021-2025)에는 IPv6로의 전환 계획이 포함되어 있음. 5G 네트워크의 대규모 배포 가속화, 사용자 침투율을 56%까지 증가시키고, 기가비트 광섬유 네트워크 업그레이드 촉진, 6G 네트워크 기술에 대한 기술 예비를 구축, 백본 네트워크 상호 연결 노드 확장, 새로운 국제 통신 게이트웨이 설립, IPv6의 상업적 배포 전면 촉진 등을 포함함. 이미 마이그레이션 일정이 있으며, 이번 달부터는 새로운 IPv4 서비스가 없어야 함. 목표는 2030년까지 IPv6만 사용하는 것이지만, 실제 중국 내 IPv6 채택률은 25-30%에 불과함.
     * IPv6가 인간이 읽기 어렵다는 점이 그 채택에 미묘하고 간접적인 영향을 미치고 있으며, 이는 종종 논의되지 않음. 어떤 시스템 관리자나 일반 사용자도 IPv6 주소를 보고 IPv4보다 선호하거나 입력하거나 소통하기 쉽다고 말하는 사람을 찾기 어려움. IPv6의 장점에 대해 합리적으로 논의할 수 있지만, 이 사실은 변하지 않음. 정부나 다른 기관이 IPv4를 완전히 없애는 것은 불가능하며, 장기적인 해결책이 무엇인지는 모르겠지만, IPv6만 사용하는 것은 결코 아닐 것임을 강하게 의심함.
     * 미국에서는 주로 비즈니스와 관련하여 IPv6 문제에 직면함. 소비자 ISP와 모바일 운영자들은 모두 IPv6를 가지고 있으며, 호스팅 제공업체와 최근 클라우드 제공업체들도 듀얼 스택이나 v6만을 가지고 있음. 그러나 실제로 IPv6 네트워크를 가진 직장에서 일한 적은 없음.
     * IPv6를 사용하면 IPv4를 사용할 때보다 사람들을 추적하기 쉬운지에 대한 질문이 있음.
     * 2032년까지 시간이 있으니, 더 많은 조직이 IPv6로의 전환을 따르기를 바람. IPv4를 완전히/강제적으로 제거할 것을 주장하는 것은 아니지만, IPv4가 사라질 것이라고 말하는 것은 IPv6 마이그레이션을 강제할 것임.
     * IPv6의 낮은 채택률과 많은 사람들에게 낯선 번호 체계를 고려할 때, IPv4 체계를 추가 옥텟으로 확장하는 IPv7을 도입할 수 없는지에 대한 질문이 있음. 예를 들어, 0.0.0.0.0.0.0 같은 형식을 사용하고, 올바른 옥텟 수가 없는 모든 것은 0으로 채워짐. 그래서 192.168.0.1은 0.0.0.0.192.168.0.1이 됨. 또한 대학과 같은 기관에 /8을 주지 않음으로써 과거의 실수를 반복하지 않음. 이것은 아마도 순진한 생각일 수 있지만, 2661:919a:023e:911a:44dc:f656:233e:8816과 같은 IPv6 주소보다 사용하기 쉬울 것임.
     * IPv4를 과거의 것으로 만들 시간이 됐음을 긍정적으로 평가하는 의견이 있음.
     * 체코 공화국 정부가 2024년 1월 17일에 ""국가 행정에서 DNSSEC 및 IPv6 기술의 구현 재개""에 관한 자료를 승인함. 이 결정에 따라, 체코 국가 행정은 2032년 6월 6일부터 IPv4를 통한 서비스 제공을 중단할 것임. 따라서 체코 공화국은 자국의 IPv4 종료 일정을 알고 있음.
"
"https://news.hada.io/topic?id=12980","모델을 재현할 수 없다면 그것은 오픈소스가 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모델을 재현할 수 없다면 그것은 오픈소스가 아니다

     * 오픈소스 AI 혁명은 아직 일어나지 않았음
     * 물론 인상적인 오픈 가중치 모델이 있고, 가중치를 공개하는 분들께 감사하지만, 모델을 재현할 수 없다면 진정한 오픈 소스가 아님
     * Linux에서 코드베이스 없이 바이너리만 공개했다고 상상해 보라. 또는 바이너리를 만드는 데 사용된 컴파일러 없이 코드베이스만 공개한다고 상상해 보라. 이것이 바로 오늘날의 상황
     * 여기에는 여러 가지 단점이 있음
          + 프로젝트에 다시 기여할 수 없음
          + 프로젝트가 OSS 피드백 루프의 혜택을 받지 못함
          + 모델에 백도어(예: 잠복 에이전트)가 없는지 확인하기 어려움
          + 데이터 및 콘텐츠 필터와 회사 정책의 일치 여부를 확인할 수 없음
          + 모델을 새로 고치려면 회사에 의존해야 함
     * 코드베이스부터 데이터 파이프라인까지 모든 것이 공개되어 있는 진정한 오픈 소스 LLM 프로젝트는 많은 가치와 창의성을 창출하고 보안을 개선할 수 있음
          + 하지만 가중치를 재현하는 것은 코드를 컴파일하는 것만큼 쉬운 일이 아니기 때문에 간단하지 않음. 계산 능력과 노하우가 있어야 함.
          + 그리고 기여도를 검토하는 것은 다음 트레이닝을 실행할 때까지 성능에 어떤 영향을 미치는지 알 수 없기 때문에 어려움
     * 하지만 충분한 동기를 가진 사람이나 그룹은 이러한 세부 사항을 파악할 수 있으며, 기존 OSS와 크게 달라 보일 수도 있지만 이러한 새로운 도전이 이 공간이 재미있는 이유

   맞는 말,
    1. github나 huggingface는 open open source repositary가 아니라 마케팅 플랫폼으로 변질된 지 오래되었다.
    2. 일부 모델은 작동가능한 바이너리조차도 제공하지 않고 있다 (https://github.com/AIGCDesignGroup/ReplaceAnything)
    3. 온라인 데모만 제공하면서 자기네 기술에 대한 Marketing Demo만 공개하는 데 이용되는 게 무슨 Open source platform인가?
    4. Gitbug나 Huggingface도 결국 이전의 SNS처럼 가짜나 엉터리가 난무하는 쓰레기 site가 되고 있는 것이다.

   따라서 open source는 이제 Myth나 Urban Legend가 되어 가고 있는 중이다. 실지로 이들 사이트에 완벽하게 재현 가능한 진정한 의미에서의 open source model은거의 없다고 보면 된다. 대부분은 marketing stunt이다.

   이해는 가지만서도... 요즘 나오는 모델들은 모델 학습에 필요한 컴퓨팅파워와 시간이 일반 개인이 재현하기 어렵게 되어버린지라 어떨지 잘 모르겠네요.
   다만 데이터셋 공개의 경우엔 저도 공감이 좀 가네요.

Hacker News 의견

     *

     리눅스가 코드베이스 없이 바이너리만, 혹은 컴파일러 없이 코드베이스만 공개한다면 상상해보라. 우리가 현재 그런 상황에 처해 있다.
          + 현재 ""오픈 소스 모델""에 대한 문제점을 잘 설명해주는 비유임. 이 비유를 통해 오픈 소스 모델의 문제가 명확하게 드러남.
     *

     CERN의 예를 들어보자: 그들은 CC0 라이선스 하에 다양한 실험 데이터를 공개한다. 이것은 단순한 작은 데이터셋이 아니라, LHCb의 전체 첫 번째 실행 데이터와 같은 대규모 데이터임.
          + CERN은 데이터를 단순히 공개하고 방치하는 것이 아니라, 분석 가이드와 필요한 도구들(대부분 오픈 소스인 ROOT 등)을 제공함. 이를 통해 누구나 새로운 것을 발견하거나 기존 실험 분석을 확장할 수 있음. 이러한 개방된 데이터와 도구는 재현성을 위한 조건을 충족시키지만, 데이터를 직접 재생성할 필요는 없음. 이론적으로 LHC를 재건할 수는 있지만, 이는 많은 인력, 자금, 시간이 필요함. 오픈 소스 모델과는 대조적으로, 모델을 재학습하여 가중치를 얻을 수 있지만, 데이터를 확보하고 가중치를 재현하는 비용은 대체로 막대함. CERN이 원시 데이터(대부분 노이즈)가 아닌 더 정제된 버전을 공개한다는 점을 기억해야 함. 대규모 원시 데이터를 다운로드하는 것은 어려운 일이지만, 대형 언어 모델(LLM)과 같은 것을 훈련시키려면 전체 데이터셋이 필요할 수
            있으며, 이는 종종 저작권 문제 등을 포함한 자체 문제를 가지고 있음.
     *

     데이터셋을 공개하는 것이 가장 큰 문제다. 그러면 사람들과 회사들이 저작권이 침해되었다고 소송을 제기할 것이다.
          + 데이터셋에 저작권이 있는 콘텐츠가 포함되어 있을 경우, 저작권자들이 소송을 제기할 수 있음. 모델에 Z-Library나 Google Books 데이터셋 전체가 포함되었을 가능성에 대해 놀라지 않을 것임.
     *

     오픈 소스 이니셔티브는 지난 1년간 AI가 오픈 소스인지에 대한 다양한 이해관계자들의 의견을 수집하는 시리즈를 진행해왔다.
          + All Things Open에서 오후 내내 진행된 세션에 참여한 경험이 있음. 이 문제에 대해 이미 진행 중인 논의를 확인해보길 권장함. 이는 트윗에 담을 수 있는 것보다 훨씬 더 미묘한 문제임.
     *

     AI 모델에 ""오픈 소스""라는 용어를 적용하는 것은 소프트웨어에 적용하는 것보다 더 복잡하다. 많은 사람들은 재현성을 오픈 소스로 간주하기 위한 기준으로 생각한다.
          + AI 모델의 경우, 모델 자체, 데이터셋, 그리고 훈련 레시피(예: 과정, 하이퍼파라미터)가 종종 소스 코드로도 공개됨. 이를 통해 충분한 계산 능력을 가지고 있다면 모델을 훈련시켜 가중치를 얻을 수 있음.
     *

     오픈 코어도 마찬가지다 - 자신의 인프라에서 호스팅할 수 없다면 진정한 오픈 소스 소프트웨어가 아니다.
          + 자체 인프라에서 호스팅할 수 없는 경우, 그것은 진정한 오픈 소스 소프트웨어로 간주되지 않음.
     *

     ""프로젝트가 OSS 피드백 루프에서 이익을 얻지 못한다"" 버그 수정처럼 특정 문제를 해결하는 훈련 데이터에 대한 PR을 제출할 수 없기 때문에, 피드백 루프를 많이 볼 수 있을 것이라고는 생각하지 않는다.
          + ""모델에 백도어가 없다는 것을 검증하기 어렵다"" 데이터셋의 크기와 훈련 과정의 불투명성을 고려할 때, 훈련 데이터에 백도어가 있는지 여부를 알 수 있는 사람은 거의 없을 것임.
          + ""데이터와 콘텐츠 필터를 검증하고 회사 정책과 일치하는지 확인하기 어렵다"" 훈련 데이터에 접근하지 않고도 모델 출력에 회사 정책을 적용할 수 있음. 모든 회사가 입력 데이터를 필터링하고 자체 모델을 훈련시켜야 하는지에 대한 의문임.
          + ""모델을 새로 고칠 때 회사에 의존하게 된다"" 현재 비용을 고려하면 대부분의 사람들에게 이미 사실임.
          + ""코드베이스부터 데이터 파이프라인까지 모든 것이 오픈된 진정한 오픈 소스 LLM 프로젝트는 많은 가치, 창의성을 해방시키고 보안을 향상시킬 수 있다"" LLM의 경우에는 이것이 사실이라고 전반적으로 회의적임. 오히려 악의적인 행위자들에게 공격할 수 있는 더 큰 표면을 만들 수 있음.
     *

     ""작업에 대한 수정을 위한 선호되는 형태의 작업이 '소스 코드'이다.""
          + GPLv3 인용
          + 이 AI/ML 모델은 흥미롭게도 가중치가 훈련 세트로부터 파생되지만, 수정할 때 원래의 훈련 세트에 접근할 필요가 없음. 원래 훈련 세트에 접근하지 않고도 미세 조정하는 방법에 대한 많은 튜토리얼이 있음.
     *

     동의하지 않으며, 비유가 부적절하다. 그가 나열한 것들은 훈련된 모델로 할 수 있다. 데이터를 가지고 있는 것은 사실상 관심을 끌지 못하는 문제다. 오픈/자유 소프트웨어는 자유를 행사하는 것에 관한 것이며, 모델 가중치와 코드를 가지고 있다면 모든 자유를 행사할 수 있다.
     *

     모든 훈련 데이터가 공개적으로 이용 가능하고(호환 가능한 라이선스로), 훈련 소프트웨어가 비트 동일한 모델을 재현할 수 있는 진정한 오픈 소스 LLM 모델이 있는가?
          + 훈련이 비결정적인가? LLM 출력은 의도적으로 비결정적임을 알고 있음.
"
"https://news.hada.io/topic?id=12935","Plash - 웹 사이트를 배경화면으로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Plash - 웹 사이트를 배경화면으로

     * 사이트 링크만 넣으면 배경화면이 됨
          + 사용자들이 공유한 다양한 사례들
          + 직접 만든 사이트를 링크에 넣는다면 원하는대로 배경화면을 만들 수 있음
     * Custom CSS와 JavaScript 지원
     * Browsing Mode 를 키면 브라우저처럼 사이트에 접근 가능
     * 사이트 내 사운드 음소거 가능
     * CSS의 opacity 와 자체 투명도 설정을 통해 원래 사용 중인 배경화면에 오버레이 가능
     * 아쉽게도 하나의 모니터만 지원

   투명도 지원이 재미있네요.

   macOS 전용이라는게 많이 아쉽네요...

   Mac OS14 이상만 지원하네요.

   아주 옛날 윈도우의 Active Desktop이랑 비슷한 것 같네요

   ""아쉽게도 macOS만 지원""도 추가해야겠네요 ㅠ.ㅠ

   신기하네요! 윈도우에선 Wallpaper Engine으로 대신 흉내낼수있으려나요

   너무 좋아요

   오 상당히 신기하네요
"
"https://news.hada.io/topic?id=12953","1999년처럼 웹 서핑하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            1999년처럼 웹 서핑하세요

웹 서핑, 마치 1999년처럼!

     * 1999년의 GeoCities에 갇힌 상태임.
     * 미래 사람들이 내 사이트를 방문할 수 있도록 시간 포털을 만듦.
     * Bill's World에 연락하여 가입할 것.

HOTLINE WEBRING

     * 공식 Bill's World 웹 버튼을 사이트에 추가하고, 사이트에서 링크 사랑을 보여줄 것.
     * 버튼 이미지와 링크 제공.

   GN⁺의 의견: 이 글은 1999년의 인터넷 문화를 재현하고자 하는 웹사이트 'Bill's World'를 소개하고 있음. 이는 인터넷의 초기 시절을 경험하거나 추억하고 싶은 사람들에게 흥미로운 콘텐츠를 제공함. 또한, 웹사이트의 공동체적 요소를 강조하며 방문자들이 자신의 사이트에 Bill's World의 웹 버튼을 추가하도록 권장함으로써, 과거 웹링크 공유 문화를 되살리고자 함. 이러한 레트로 스타일의 웹사이트는 디지털 문화의 역사와 발전을 이해하는 데 도움이 될 수 있으며, 현대의 복잡하고 상업화된 인터넷 환경과 대조되는 독특한 경험을 제공함.

        Hacker News 의견

     * HTTP 프록시를 ""theoldnet.com""으로 설정하고 포트를 1999로 지정하면, ""web.archive.org""를 제외한 모든 웹 페이지가 1999년의 Wayback Machine을 통해 제공됨.
          + 다른 연도를 원하면 포트 번호를 변경하면 됨.
          + 사이트가 과도한 접속으로 인해 다운될 수도 있음을 언급함.
     * 1999년의 웹은 개인의 목소리와 자신만의 웹사이트를 발행하는 것이 특별했음.
          + 당시에는 고급스러운 movable type 사이트가 주를 이루었으나, LiveJournal과 Blogger의 등장으로 다양해짐.
          + 독립적인 목소리가 그리움. 소셜 미디어는 과거의 허울뿐인 형태로 느껴짐.
          + 1999년 웹은 표현의 중요한 수단이었으나, 현재는 기업적인 느낌이 들어 아쉬움.
     * 웹에서 원래 사용되던 애니메이션 GIF의 사용법과 21세기에 다시 유행하게 된 스타일의 변화에 대해 놀랐던 점을 설명함.
          + 젊은 사용자들에게 과거의 웹 디자인을 보여주는 좋은 예시임.
     * 과거의 웹사이트는 읽고 탐색하기 쉬웠음.
          + 대부분의 사이트는 간단하고 명확했음.
          + 2001년부터 운영되고 있는 유용한 기차 정보 웹사이트를 예로 듦.
     * 1999년 웹의 모습을 재현한 아이디어에 대한 호기심과 흥미를 표현함.
          + MySpace가 2003년에 출시되었음에도 불구하고 1999년을 표현하기 위해 사용된 것에 대해 의문을 제기함.
     * 1999년 웹 페이지의 로딩 시간에 대한 정확성을 지적함.
          + 이미지 로딩으로 인해 페이지가 느리게 로딩되었던 것과 달리, 현재는 즉시 로딩됨.
     * 과거의 웹 디자인에 대한 향수를 불러일으키는 반응을 공유함.
          + 30세 미만의 사용자들이 이에 대해 어떻게 생각하는지 궁금해함.
     * 90년대 TV를 볼 수 있는 웹사이트를 소개함.
     * 스마트폰이 웹 디자인의 즐거움을 사라지게 한 주범이라는 의견을 제시함.
          + 화면 크기의 다양성으로 인해 반응형 디자인이 필요해졌으나, HTML이 이를 제대로 지원하지 못함을 비판함.
          + HTML을 다른 것으로 대체하면 많은 문제가 해결될 수 있을 것이라는 의견.
     * 브라우저 전쟁을 겪은 베테랑이 과거의 인터넷에 대한 감정을 공유함.
          + Napster를 통해 다운로드하던 음악이 우연히 재생되면서 100% 향수에 젖음.
"
"https://news.hada.io/topic?id=12928","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   코로나중 한번도 안 걸렸던 감기에 심하게 걸려서 고생중이네요.
   뉴스는 GN⁺가 잘 해주고 있어서 그나마 매일 좀 도움받고 있어요.
   주말에 푹쉬고 다음주부터 다시 활기차게 달려보려고요. 다들 감기 조심하세요.

   요즘 감기가 몸살때문에 아프드라구요..
   푹 주무시고 따듯한 물 많이 드세요.
"
"https://news.hada.io/topic?id=12944","구글 문화의 변화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               구글 문화의 변화

     * 구글에서 18년간 근무한 벤 콜린스-서스만의 개인 블로그 글로, 그의 경험과 개인적 가설을 바탕으로 작성됨
     * 구글 초기의 문화는 직원 가치를 최우선으로 여기는 것이었으며, 이는 적어도 그의 첫 10년간 지속됨
     * 일반적인 회사와 달리, 구글은 프로젝트 우선순위가 바뀔 때 사람들을 해고하는 대신, 직원들을 다른 프로젝트로 신중하게 이동시키는 문화를 가짐

직원 중심 문화의 특별함

     * 구글은 탁월한 인재를 찾기 위해 엄격한 채용 과정을 거쳤으며, 이들은 다양한 역할에서 능력을 발휘가능한 제네럴리스트(generalists)였음
     * 구글은 직원들을 가장 소중한 자원으로 여겼고, 프로젝트가 바뀌어도 이들을 보존하기 위해 많은 노력을 기울임
     * 리더로서 벤은 이 과정에 더 많이 관여하게 되었고, 재조직 과정에서 팀원들에게 새로운 역할을 찾아주는 데 도움을 줌

변화의 시작과 그 영향

     * 구글의 수익 성장이 둔화되기 시작하면서, 회사 문화가 '무한한 자원의 문화'에서 '제한된 자원의 문화'로 변화함
     * 이러한 변화는 팬데믹 기간 동안 점차 가속화되었으며, 이제는 대규모 해고가 일어나고 있음
     * 이전의 고용 및 승진 프로세스가 전통적인 방식으로 바뀌었고, 직원 재배치에 대한 개인적인 접근 방식은 사라짐

결론과 교훈

     * 초기 구글에서 직원들이 가장 중요하게 여겨졌을 때, 이는 심리적 안전감, 높은 사기, 생산성 및 창의성을 가져왔음
     * 실패를 빠르게 인정하고 혁신을 추구하는 문화는 이제 해고를 의미할 수 있는 환경에서는 쉽지 않음
     * 회사를 세우는 사람들은 직원을 최우선으로 가치 있게 여기는 것에 도전해야 하며, 그 결과로 얻을 수 있는 투자 수익을 지켜봐야 함

GN⁺의 의견

     * 구글의 초기 문화는 직원 중심의 가치를 중요시하는 모범 사례로, 이는 다른 기업들에게도 중요한 교훈을 줄 수 있음
     * 팬데믹과 수익성 문제로 인한 변화는 모든 기업이 직면할 수 있는 도전이며, 이를 어떻게 관리하느냐가 중요함
     * 직원의 가치를 인정하고 그들의 잠재력을 최대한 활용하는 것은 장기적으로 회사의 성공에 결정적인 요소가 될 수 있음

        Hacker News 의견

     * 위험을 감수하는 문화는 무한한 수익이 있을 때 쉽게 형성됨.
          + 무제한 수익이 있을 때는 위험을 감수하는 문화가 쉽게 형성되지만, 자원이 제한적일 때 기업들은 보수적으로 변함.
          + 한정된 자원 상황에서는 새로운 큰 베팅을 하는 대신 트렌드를 쫓는 경향이 있음.
          + 구글은 AI 분야에서 선도적 위치를 잃고 추격하는 입장이 됨.
          + 회사 리더십이 전문가에서 일반 경영자로 바뀌면서, 기존 비즈니스 모델 실행에는 능하지만 새로운 큰 시장을 찾는 데는 약함.
          + 현재 수익원에 집중을 빼앗길 수 있는 혁신적 아이디어는 경영진이 이해하지 못하면 격려받지 못함.
          + 안정적인 경력을 추구하는 사람들이 회사에 들어오면서 위험을 감수하거나 기존 비즈니스 모델을 흔들기 어려워짐.
          + 이러한 사이클은 계속될 것이며, 안정적인 비즈니스 모델을 가지면서도 올바른 위험을 감수하는 대기업을 만드는 것은 어려움.
     * 구글의 변화에 대한 생각.
          + 구글에 거의 10년간 근무했던 한 사람은 회사가 2010년 이전과는 거의 인식할 수 없을 정도로 달라졌음을 지적함.
          + 2014년경에 무언가 변화가 생겨 회사가 다른 방향으로 나아갔으며, 이는 주주 가치 극대화를 위한 것으로 보임.
          + 초기 구글의 문화는 직원을 가장 중요하게 여겼으나, 회사가 성장하면서 문화가 변화하거나 악화될 수밖에 없음.
          + 초기 구글은 뛰어난 인재를 선별하기 위해 퍼트남 문제나 마틴 가드너 퍼즐, ICPC 프로그래밍 문제를 사용했으나, 직원 수가 130,000명으로 늘어나면서 문화가 변화함.
          + 초기 구글의 직원들은 서로 실패를 빨리 인정하고 혁신을 추구하도록 격려했지만, 이제는 실패가 해고를 의미하는 환경에서 그것이 쉽지 않음.
          + 구글은 제품을 너무 쉽게 중단한다는 평판을 얻었고, 이로 인해 새로운 제품에 투자하는 것을 두려워하는 사용자가 생겨남.
          + 구글은 AI, 양자 컴퓨터, 바이오테크, 자율 주행 차량 등 매우 혁신적인 기술에 투자하고 있으나, 이러한 것들은 20% 프로젝트에 적합하지 않음.
          + 초기 구글은 직원들에게 스타 대우를 해주었지만, 생산성이 떨어지면서 이러한 문화에 의문을 제기함.
          + 구글은 이제 단순히 좋은 엔지니어를 고용하여 A/B 테스트를 수행하고, 대상 사용자가 아닌 제품을 개발하며, 직원들이 더 이상 IPO로 큰 부를 얻지 못하게 되면서 정치적 게임을 하기 시작함.
          + 구글의 초기 직원들은 서로 실패를 빨리 인정하고 혁신을 추구하도록 격려했지만, 이제는 실패가 해고를 의미하는 환경에서 그것이 쉽지 않음.
          + 구글은 제품을 너무 쉽게 중단한다는 평판을 얻었고, 이로 인해 새로운 제품에 투자하는 것을 두려워하는 사용자가 생겨남.
          + 구글은 AI, 양자 컴퓨터, 바이오테크, 자율 주행 차량 등 매우 혁신적인 기술에 투자하고 있으나, 이러한 것들은 20% 프로젝트에 적합하지 않음.
          + 초기 구글은 직원들에게 스타 대우를 해주었지만, 생산성이 떨어지면서 이러한 문화에 의문을 제기함.
          + 구글은 이제 단순히 좋은 엔지니어를 고용하여 A/B 테스트를 수행하고, 대상 사용자가 아닌 제품을 개발하며, 직원들이 더 이상 IPO로 큰 부를 얻지 못하게 되면서 정치적 게임을 하기 시작함.
          + 구글의 초기 직원들은 서로 실패를 빨리 인정하고 혁신을 추구하도록 격려했지만, 이제는 실패가 해고를 의미하는 환경에서 그것이 쉽지 않음.
          + 구글은 제품을 너무 쉽게 중단한다는 평판을 얻었고, 이로 인해 새로운 제품에 투자하는 것을 두려워하는 사용자가 생겨남.
          + 구글은 AI, 양자 컴퓨터, 바이오테크, 자율 주행 차량 등 매우 혁신적인 기술에 투자하고 있으나, 이러한 것들은 20% 프로젝트에 적합하지 않음.
          + 초기 구글은 직원들에게 스타 대우를 해주었지만, 생산성이 떨어지면서 이러한 문화에 의문을 제기함.
          + 구글은 이제 단순히 좋은 엔지니어를 고용하여 A/B 테스트를 수행하고, 대상 사용자가 아닌 제품을 개발하며, 직원들이 더 이상 IPO로 큰 부를 얻지 못하게 되면서 정치적 게임을 하기 시작함.
"
"https://news.hada.io/topic?id=12903","모드 없는 Vim 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              모드 없는 Vim 기술

모드가 없는 vim

     * 이 저장소의 설정 파일들은 vim을 모드가 없는 편집기로 변환함.
     * 복잡한 명령어를 기억하는 대신, Ctrl+S로 저장하고 Shift+←/→/↑/↓로 텍스트를 선택하며 Ctrl+C/V로 복사/붙여넣기를 사용할 수 있는 표준 키 바인딩을 사용함.
     * 이 설정은 vim을 그래픽 편집기보다 선호하는 애호가를 위한 것이 아니라, 주로 GUI 편집기(예: VSCode)를 사용하지만 때때로 터미널에서 실행할 수 있는 편집기가 필요한 사람들을 위한 것임.

주의사항

     * 모드가 없는 편집기는 키를 눌러 바로 텍스트를 입력할 수 있고, 파일 저장과 같은 명령을 키 바인딩을 통해 수행하는 일반 편집기임.
     * 모드가 있는 편집기인 기본 설정의 vim은 여러 모드(예: '명령 모드', '삽입 모드', '시각 모드' 등)를 가지고 있음.

Q&A

     * Q: vim 명령어를 왜 배우지 않는가?
          + A: 배웠지만, 정기적으로 vim을 사용하지 않으면 계속 잊어버림.
     * Q: nano와 같은 모드가 없는 편집기를 왜 사용하지 않는가?
          + A: vim의 기능(예: 많은 언어에 대한 구문 강조 지원)은 nano와 같은 모드가 없는 터미널 편집기를 능가함. 이 저장소의 설정 파일들은 vim을 모드가 없는 편집기로 변환하면서 놀라운 기능들을 유지함.

일부 기능

     * 표준 키 바인딩 지원.
     * 키 바인딩을 상기시켜주는 화면 상단의 정보 바 표시.
     * 파일, 커서 위치 등의 정보를 포함한 화면 하단의 상태 바 표시.
     * 많은 옵션에 대한 합리적인 기본 설정.

스크린샷

     * 모드가 없는 vim을 너드 폰트로 사용하는 모습.
     * _ascii 버전의 설정 파일로 모드가 없는 vim을 사용하는 모습.
     * modeless.vimrc를 사용하는 모드가 있는 vim인 vi의 모습.

저장소 내용물

     * 설치 방법, 너드 폰트, 키 바인딩, 이 저장소의 파일들, 라이선스.

설치

     * 이 저장소를 ~/.vim에 복제함.
     * vim은 ~/.vim 내의 vimrc 파일을 자동으로 감지해야 함.
     * 감지하지 않는 경우, ~/.vimrc에서 ~/.vim/modeless.vimrc로 심볼릭 링크를 생성할 수 있음.
     * sudoedit을 사용할 때 모드가 없는 vim을 사용하려면, .bashrc/.zshrc/... 파일에 export EDITOR=vim을 추가함.
     * 모드가 있는 vim을 vi로 사용하고 싶을 수 있음. vi 명령이 모드가 있는 vim 버전을 실행하도록 설정하는 것을 추천함.

너드 폰트

     * 기본 설정은 너드 폰트(추가 아이콘이 삽입된 모노스페이스 폰트)를 필요로 함.
     * 터미널 창의 상단 정보 바와 하단 상태 바에 이러한 사용자 정의 아이콘을 사용함.
     * 사용자 정의 폰트를 사용하고 싶지 않거나 사용할 수 없는 경우, ASCII 문자만을 사용하여 상태 바/정보 바를 구현하는 statusline_ascii.vimrc 및 infoline_ascii.vimrc 파일이 저장소에 포함됨.

키 바인딩

     * 모드가 없는 vim은 파일 열기, 저장, 종료, 검색 및 교체, 선택, 잘라내기, 복사, 붙여넣기, 기타 기능에 대한 키 바인딩을 지원함.

저장소의 파일들

     * modeless.vimrc, modeful.vimrc, colorscheme.vimrc, keybinds.vimrc, infoline_nerdfont.vimrc, infoline_ascii.vimrc, statusline_nerdfont.vimrc, statusline_ascii.vimrc, options_basic.vimrc, options_modeless.vimrc, vimrc, virc, vi, LICENSE, README.md.

라이선스

     * 이 설정 파일 모음은 MIT 라이선스에 따라 자유롭고 오픈 소스 소프트웨어임.

   GN⁺의 의견
     * 이 글은 vim을 GUI 편집기처럼 사용할 수 있도록 하는 혁신적인 접근 방식을 제공함으로써, 터미널 기반 편집기에 익숙하지 않은 사용자들에게 큰 도움이 될 수 있음.
     * 특히, vim의 강력한 기능을 유지하면서도 친숙한 키 바인딩을 제공함으로써, 사용자들이 더 빠르고 효율적으로 작업할 수 있도록 돕는다는 점이 매우 중요함.
     * 이러한 사용자 정의 설정은 오픈 소스 커뮤니티의 협력과 공유 정신을 반영하며, 개발자들이 자신의 작업 환경을 개인의 필요에 맞게 조정할 수 있는 유연성을 제공함.

        Hacker News 의견

     * Vim의 개선된 접근성에 대한 의견

     저자가 Vim을 개선한 이유(구문 강조 및 기타 기능)는 매우 타당함. 그러나 이것이 Vim의 본질을 훼손하는 것 같은 느낌을 줌. Vim이 더 많은 사람들에게 접근 가능해지는 것은 좋지만, 그 방식이 마음에 들지 않음. 저자에게는 칭찬을 보냄.
     * Vim 사용 팁에 대한 의견

     Vim이 마음에 들지 않는다면 Escape 키를 CapsLock으로 재매핑해야 함. Escape는 가장 중요한 키이며 입력을 종료할 때마다 사용해야 함. 이 키는 손가락에서 가장 멀리 떨어져 있어서는 안 됨. Ctrl+[ 또는 Ctrl+C를 사용하는 사람들도 있지만, 재매핑이 더 나은 방법임.
     * Vim의 기존 기능에 대한 의견

     저자가 이미 Vim에 내장된 'easy vim' 모드(aka evim, 또는 ""vim -y"")를 모르는 것 같음. 모드가 없는 편집기를 찾고 있다면 Vim은 적합하지 않음. Vim을 배우는 것은 여정이며, 익숙해지면 Vim이 왜 그런지 이해하게 됨.
     * Vim에 대한 개인적인 견해

     오랜 경험을 가진 Vim 사용자로서, 'vim -y'도 시도해보길 권장함. 다른 사람들이 어떤 편집기를 사용하든 그들을 내버려 둘 것. 프로그래밍은 이미 충분히 어려우므로 다른 사람의 믿음에 맞춰 자신의 편집기를 사용할 필요는 없음.
     * 통합 사용자 인터페이스에 대한 의견

     유닉스/리눅스가 IBM의 Common User Access(표준화된 메뉴 시스템)를 채택했다면 어떻게 달라졌을지 궁금함. VI와 EMacs가 동일한 키 바인딩을 가졌을 것임.
     * Vim 사용의 실용성에 대한 의견

     Vim을 가끔 사용하는 주된 이유는 모든 VM에서 기본적으로 사용할 수 있는 유일한 합리적인 편집기이기 때문임. 기본 설정으로 제공되며, 설정을 변경하거나 다른 편집기를 설치하는 것은 간단하지 않음.
     * Vim 설정 파일에 대한 의견

     이 저장소의 설정 파일은 Vim을 모드가 없는 편집기로 변환함. 복잡한 명령어를 기억할 필요 없이, Ctrl+S로 저장하고 Shift+화살표 키로 텍스트를 선택하며 Ctrl+C/V로 복사/붙여넣기를 할 수 있음. 이 설정은 Vim을 그래픽 편집기보다 선호하는 사용자를 위한 것이 아니라, 터미널에서 실행할 수 있는 편집기가 필요할 때 GUI 편집기(예: VSCode)를 주로 사용하는 사람들을 위한 것임.
     * Vim 사용 철학에 대한 의견

     처음 vi를 접한 지 며칠 만에 이와 같은 시도를 했지만, 다양한 기계에 로그인해야 했기 때문에 기본적인 vi를 사용하는 것이 더 낫다고 결정함. 이 철학은 수년간 잘 작동함.
     * Vim에 대한 감정적 투자에 대한 의견

     (Neo)Vim 게시물에 투자되는 감정적 에너지가 많은데, 대부분 Vim을 배우지 않은 사람들이 느끼는 불안정함 때문임. 이 저장소를 빠르게 로드할 수 있다면 Vim을 싫어하는 사람들에게 도움이 될 수 있음. Vim이 더 이상 프로그래밍 세계를 지배하지 않으며, 새로운 프로그래머에게 선택적인 기술이 되었음.
     * 모드가 없는 Vim에 대한 의견

     모드가 없는 Vim은 땅콩버터가 없는 땅콩버터 샌드위치와 같음. 그러나 그것이 원하는 것이라면, 그대로 사용하면 됨.
"
"https://news.hada.io/topic?id=12909","Speedbump - 가변 레이턴시를 지원하는 TCP 프록시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Speedbump - 가변 레이턴시를 지원하는 TCP 프록시

     * Go 언어로 작성된 TCP 프록시로, 다양한 가변 네트워크 지연 시간을 시뮬레이션 가능

기본 사용 예시

     * 포트 2000에서 리스닝하는 새 인스턴스를 생성하여 TCP 트래픽을 localhost:80으로 프록시하고, 기본 지연 시간은 100ms, 사인파 진폭은 100ms(최대 추가 지연 시간 200ms, 최소 0), 주기는 1분:
speedbump --latency=100ms --sine-amplitude=100ms --sine-period=1m --port=2000 localhost:80

     * 또는 kffl/speedbump 컨테이너 이미지를 사용하여 speedbump을 실행할 때:
docker run --net=host kffl/speedbump:latest --latency=100ms --sine-amplitude=100ms \
  --sine-period=1m --port=2000 localhost:80

     * 기본 지연 시간이 300ms이고, 아래 그래프에 표시된 것처럼 진폭 200ms, 주기 2분의 톱니파 지연 시간을 가진 새 인스턴스를 생성:
speedbump --latency=300ms --saw-amplitude=200ms --saw-period=2m --port=2000 localhost:80

     * 여러 지연 시간 합산을 동시에 실행하는 것이 가능함.
     * Speedbump은 lib 패키지를 통해 Go 라이브러리로 사용될 수 있음.


   GN⁺의 의견:
     * Speedbump는 네트워크 지연 시간을 시뮬레이션하는 데 유용한 도구로, 네트워크 기반 애플리케이션의 성능을 테스트하고 최적화하는 데 도움이 될 수 있음.
     * Go 언어로 작성되어 있어 Go 개발자들에게 친숙하며, 다양한 지연 시간 패턴을 쉽게 시뮬레이션할 수 있는 기능을 제공함.
     * 오픈 소스이며 Apache 2.0 라이선스를 따르므로, 커뮤니티의 기여를 통해 지속적으로 개선될 가능성이 있음.

        Hacker News 의견

     * ActivityPub 구현을 다양한 네트워크 크기와 조건에서 테스트하기 위해 비슷한 작업을 조사했음. tc 명령어를 사용하여 특정 인터페이스에 지연을 추가하는 방법을 배웠고, 이는 Docker 컨테이너에서도 잘 작동함. 이미 많은 시스템에 설치되어 있을 수 있음.
          + 예시 명령어: tc qdisc add dev eth0 root netem delay 100ms
     * Netflix에서 'latency monkey'라고 부르는 도구를 개발함. 하류 서비스가 느려지는 것을 감지하는 것이 서비스가 사용 불가능할 때 감지하는 것보다 훨씬 어려움. 이 도구는 패킷을 일정 비율로 떨어뜨려 재전송을 유도하고, 이로 인해 패킷이 지연되거나 순서가 뒤바뀌게 함. 네트워크 접근에 대한 오류 처리 코드에서 많은 문제를 발견함.
     * 인터넷 어플리케이션을 작업하는 모든 소프트웨어 엔지니어는 이와 같은 도구를 일상적으로 사용해야 함. QUIC과 TCP 모두 필요하며, DNS를 포함한 모든 UDP를 캐치할 수 있어야 함. 개발자들이 고성능 컴퓨팅 환경을 사용하지 않으면 웹앱의 90%가 사라질 것이라고 확신함.
     * 많은 앱들이 간헐적인 네트워크 연결 상태에서 성능이 떨어짐. 앱 개발자들이 시뮬레이션된 간헐적 연결성을 테스트함으로써 다른 이들을 도울 수 있음. 많은 앱들이 이메일 클라이언트처럼 '발송 대기함' 기능이 부족함. 재난 구호 상황에서 일반적인 연결 문제를 시뮬레이션하기 위한 참조 toxiproxy '테스트 케이스 변조기'를 누가 개발할 수 있을지에 대한 질문이 있음.
     * Mac에서는 내장 도구를 사용하여 비슷한 작업을 수행할 수 있음. 네트워크 연결 속도를 시뮬레이션하기 위한 명령어 예시 제공.
     * Mac에서 느린 네트워크를 시뮬레이션하고자 할 때 Network Link Conditioner를 발견함. 프록시 설정이나 기타 설정 없이 사용할 수 있으며, Xcode 추가 도구에서 설치해야 함.
     * 오랫동안 활동하지 않았지만, 'comcast'라는 이름이 많은 것을 시사함.
     * Windows에서 사용해본 비슷한 도구로 'clumsy'가 있음.
     * FreeBSD에도 'dummynet'이라는 기능이 있어서 ipfw의 일부로 지연, 대역폭 제한, 큐 크기, 패킷 손실을 주입할 수 있음. MacOS에서와 같은 기능임.
     * 첫 직장에서 매니저가 FreeBSD IPFW 방화벽을 설정하여 ICMP 응답을 느리게 만들었던 일을 잊을 수 없음. 누군가가 핑을 보낼 때마다 응답 시간이 가장 높게 보였음. 그 매니저는 장난꾸러기였음.
"
"https://news.hada.io/topic?id=12976","Spotube - 오픈소스 Spotify-Youtube 클라이언트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Spotube - 오픈소스 Spotify-Youtube 클라이언트

     * 공개된 Spotify/YT Music API 와 Youtube 음원으로 프리미엄 구독 없이 Spotify 를 이용 가능
          + 음악 정보는 Spotify 에서 받은 후에 음원은 Youtube로 재생
     * 윈도우/맥/리눅스 및 안드로이드 지원
     * 음악 트랙 다운로드 가능
     * 앱의 크기가 작고 데이터 사용이 적음
     * 익명/게스트 로그인 지원
     * 시간 동기화된 노래 가사 지원
     * 사용자의 개인 정보를 수집하지 않음
     * 서버가 아닌 로컬에서 재생 제어를 수행하여 빠른 성능을 제공
     * Flutter & Dart 오픈소스

지원되지 않는 기능

     * Spotify 쇼 & 팟캐스트: Spotify에서만 제공되는 오디오 트랙에 접근하려면 Spotify Premium이 필요하기 때문에 지원할 수 없음
     * Spotify Listen Along: 곧 출시 예정!

   메이저 리눅스 배포판과 플랫팩 앱이미지까지.. 리눅서는 감동했습니다. 심지어 스냅 배포판이 없는 것 까지 완벽하네요

   스포티파이 한국 내에서도 이거 작동 되는지 써보신분?

   굉장히 신기하네요.

   스포티파이로 넘어갈까 생각만 하고 있었는데, 요 앱부터 써봐야겠습니다.

   설치해봤는데 정말 잘 되네요. 프리미엄 구독 시절에 만들어둔 재생목록들도 그대로 쓸 수 있고 좋네요.
   내부적으로 Piped 라는 유튜브 백업서버?를 이용한다길래 알아보니까 개인정보 보호에 특화된 유튜브 클론 같은건가보네요.

        Hacker News 의견

     * Nifty.
          + 이 앱은 정확히 말하면 '스포티파이 클라이언트'가 아님. 스포티파이로부터 데이터를 가져오고, 유튜브에서 오디오를 재생함.
          + 흥미로운 발명이며, 첫 페이지에 올라갈 만한 가치가 있음.
     * For something that puts ""not using electron"" so prominently...
          + 'Electron을 사용하지 않는다'고 강조하는 앱이지만, Flutter를 사용한다는 사실에 놀람.
          + Flutter에 대한 경험이 많지 않지만, React Native와 비슷하지만 더 나은 것으로 생각함. 그러나 진정한 네이티브 앱과는 거리가 있음.
          + 잘못된 부분에 대해 지적받고 싶은 마음이 있음, 특히 Clojure를 Dart로 변환할 수 있다면 더욱 그러함.
     * It is still recommended to support the creators...
          + 창작자를 지원하기 위해 유튜브 채널을 시청하거나 좋아요를 누르고, 스포티파이에서 트랙을 좋아하거나 프리미엄 구독을 하는 것이 여전히 권장됨.
          + 음악가들이 좋아요로 청구서를 낼 수 있기를 바람. 10.99유로를 지불하는 것은 큰 요구임.
          + 많은 음악가들이 스포티파이 수표로 청구서를 낼 수 있는 것은 아니지만, 그것이 중요한 것은 아님.
     * Wow this is really well made and polished...
          + 이 앱은 정말 잘 만들어지고 세련됨. 창작자들에게 축하를 전함.
          + 앱의 문제는 아니지만, 유튜브 소스의 문제로 인해 노래 간의 음질이 일관되지 않고 스포티파이보다 전반적으로 나쁨을 알게 됨.
     * Somewhat related: A month ago I migrated from Spotify to YTMusic...
          + 한 달 전에 스포티파이에서 YTMusic으로 이전했고, 사용한 스크립트를 공개함.
          + 많은 사람들이 문제를 보고하고, 저장소에 별을 주고, 질문을 하며, 어제는 누군가 GUI를 만든 것을 발견함.
          + 스포티파이를 버린 가장 큰 이유는 재생 목록의 셔플 재생이 매우 나쁘기 때문임.
          + 매일 샤워할 때 몇 천 개의 '좋아하는' 노래를 셔플하도록 요청하지만, 일주일에 같은 노래를 세 번 듣게 됨.
          + 2017년부터 지원 포럼에 '버그'가 열려 있었고, '언젠가 살펴볼 수도 있다'고 답변함. 수백 페이지의 답변이 있음.
          + 최근에 직원의 상당 부분을 해고했기 때문에 해결될 것 같지 않음. 음악 재생을 하는 회사로서 기본을 제대로 하지 못하는 것 같음.
          + YTMusic으로 이동한 이후, 몇 년 동안 듣지 못한 재생 목록의 노래들을 듣게 됨.
     * Worked on an open source cloud player 10y ago...
          + 10년 전에 오픈 소스 클라우드 플레이어 작업을 함: 아이디어는 재생 목록과 음악 라이브러리를 한 곳에서 관리하는 것이었음.
          + 기본적으로 접근 및 인증 플랫폼으로, 시간이 지나도 기본 제공업체가 변경되어도 컬렉션에 영향을 주지 않음.
          + 음악을 수집하고 큐레이팅하는 데 있어 이 방식이 앞으로도 올바른 방향이라고 여전히 생각함.
     * Since this is using youtube to play the music...
          + 이 앱은 유튜브를 사용해 음악을 재생하기 때문에, 오픈 소스라는 점 외에 유튜브 뮤직 리밴스드를 사용하는 것과 어떤 이점이 있는지 궁금함.
     * In a way, this reminds me of the (much more ambitious) system of resolvers...
          + 이것은 (훨씬 더 야심찬) 해결자 시스템을 떠올리게 함. 예를 들어, 토마호크 플레이어의 해결자 시스템.
          + 메타데이터를 제공하면 서비스로 '해결'하는 아이디어를 매우 좋아함.
          + 이 아이디어는 '플레이리스트 변환기'로 계속 살아남았지만, 플레이어 자체에 내장된 것(예: Spotube)과는 다름.
     * For something that uses this approach (metadata from spotify, music from yt) but with downloads...
          + 이 접근법(스포티파이에서 메타데이터, 유튜브에서 음악)을 사용하지만 다운로드 기능이 있는 것에 대해, Spotdl을 살펴보라고 권함.
          + MPD에 매우 유용함. 본인의 프로젝트는 아니지만, 성공적으로 사용해본 경험이 있음.
     * Worth mentioning that Spotify doesn't use Electron, but CEF.
          + 스포티파이가 Electron을 사용하지 않고 CEF를 사용한다는 점을 언급할 가치가 있음.
"
"https://news.hada.io/topic?id=12952","Heat.js - Heat Map 시각화 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Heat.js - Heat Map 시각화 라이브러리

     * 의존성없는 경량 오픈소스 라이브러리(MIT 라이센스)
     * 전체 기능을 API로 제공
     * CSS/SASS 스타일링, responsive 하며, Bootstrap 호환
     * DOM 엘리먼트 하나당 커스텀 가능
     * 커스텀 트리거 및 텍스트 설정 가능(번역 가능)
     * 데이터 분할을 위한 트렌드 타입 지원
     * 모든 데이터를 CSV로 내보내기 가능
"
"https://news.hada.io/topic?id=12893"," CSS :has() 선택자를 예제를 통해 배우기: 5가지 주요 사용 사례","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                CSS :has() 선택자를 예제를 통해 배우기: 5가지 주요 사용 사례

   CodePen 예시: https://codepen.io/collection/oEJkwM
"
"https://news.hada.io/topic?id=12901","영국 우체국의 소프트웨어 결함이 삶을 망친 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       영국 우체국의 소프트웨어 결함이 삶을 망친 방법

런던 중심부의 우체국

     * 1999년부터 2015년까지 영국 우체국의 하청 운영자들이 겪은 실제 고난을 묘사함.
     * 소프트웨어 오류로 인해 수백 명이 범죄자로 몰리고 파산함.
     * 영국 정부는 이 사건을 영국 역사상 가장 큰 재판 오류 중 하나로 묘사함.

Horizon IT 시스템의 오류

     * 1999년 Fujitsu가 개발한 Horizon 시스템 도입 후, 우체국 지점 관리자들은 시스템 결함을 발견함.
     * 소프트웨어는 종종 우체국 계좌에서 수천 파운드가 사라진 것처럼 잘못 표시함.

Jo Hamilton의 사례

     * Jo Hamilton은 2003년 영국 남부의 한 마을에서 우체국을 운영하다가 Horizon 컴퓨터에 2,000파운드의 결손이 표시되는 것을 목격함.
     * 결국, Hamilton은 존재하지 않는 결손을 메우기 위해 자신의 집을 재융자함.

ITV 네트워크 드라마 ""Mr Bates vs The Post Office""

     * 영국 하청 운영자들의 정의를 위한 끊임없는 캠페인을 다룬 드라마 방영으로 대중의 인식과 분노가 급증함.

정부의 대응

     * 총리 Rishi Sunak은 수백 명의 하청 운영자들의 유죄 판결을 뒤집기 위한 법안을 신속히 통과시킬 것이라고 발표함.

중요한 질문들

     * 정치 및 법률 기관은 여전히 누가 무엇을 알고 있었는지, 누가 형사 책임을 져야 하는지, Fujitsu가 피해자들에게 보상을 지불해야 하는 범위에 대한 중요한 질문에 답해야 함.

우체국의 보상

     * 우체국은 2019년 민사 소송에서 Horizon에 ""버그, 오류 및 결함""이 있다고 판결된 후 1억 3천 8백만 파운드 이상을 보상으로 지급함.

하청 운영자들의 불리한 조건

     * 하청 운영자들은 우체국 계약에 따라 지점의 재정 손실에 대한 책임을 져야 함.
     * 계약이 종료되면, 많은 이들이 우체국 조사관들에 의해 사업장 출입을 금지당함.

Wendy Buffrey의 사례

     * Wendy Buffrey는 Horizon 시스템의 설명할 수 없는 결손이 계속해서 두 배로 늘어남을 경험함.
     * Buffrey는 거짓 회계 혐의로 유죄를 인정함.

정의를 추구하는 과정

     * 2019년 법적 승리 이후, Horizon 시스템의 오류를 주장하는 하청 운영자들이 더 많이 나타남.
     * 현재까지 93명의 유죄 판결을 받은 하청 운영자들이 무죄를 선고받음.

Siema Kamran의 사례

     * Siema Kamran은 남편 Kamran Ashraf와 함께 2001년에 우체국 지점을 구입함.
     * 남편은 2004년에 우체국의 감사에서 발견된 25,000파운드의 미해결 결손 후 도난 혐의로 유죄를 인정하도록 압박받음.

GN⁺의 의견

     * 이 사건은 기술적 결함뿐만 아니라 기업의 부적절한 행동이 어떻게 개인의 삶에 심각한 영향을 미칠 수 있는지 보여줌.
     * 정의를 위한 피해자들의 끊임없는 노력과 이를 다룬 드라마는 대중의 관심을 불러일으키고 변화를 촉구하는 힘이 있음을 입증함.
     * 이 사건은 기술 시스템의 중요성과 함께, 그것을 관리하는 사람들의 윤리적 책임에 대한 인식을 높이는 계기가 됨.

        Hacker News 의견

     * 한 사용자는 자신이 정보 시스템 분야에서 박사 과정을 시작하게 된 실제 사례를 요약하여 공유했다. 이 사용자는 수십 년간의 경험을 통해 축적된 IT 및 소프트웨어 관련 우수한 실무 지식에도 불구하고 현재까지 IT 무능력이 존재하는 이유를 이해하고자 했다. 연구를 통해 이러한 문제들이 이미 대부분 해결되었음을 알게 되었지만, 조직의 문제점은 변하지 않을 것이라는 결론에 도달했다. 이 사용자는 조직 연구가 여전히 더 나은 방향을 제시하려고 하지만, 일부 사람들은 결코 관심을 가지지 않을 것이라고 생각한다.

          + 실제 사례에서 영감을 받아 정보 시스템 분야에서 박사 과정을 시작한 사용자의 경험 요약
          + IT 무능력의 존재 이유에 대한 이해 추구와 조직 연구의 중요성 강조
          + 사람과 조직의 본질적 문제점에 대한 회의적인 시각

     * 또 다른 사용자는 영국 우체국의 '호라이즌 시스템' 기술적 실패에 대한 기사 링크를 공유했다. 개발 팀의 한 멤버는 팀 내에서 실력이 다양하다고 언급했으며, 관리 책임에 대한 중요성을 강조했다.

          + '호라이즌 시스템' 기술적 실패에 대한 기사 링크 공유
          + 개발 팀 내 실력 차이와 관리 책임의 중요성 언급

     * 한 사용자는 우체국 내부의 '정의' 시스템이 불투명하고 편향되어 있으며 증거를 고려하지 않는다고 지적했다. IT 버그도 문제였지만, 과거에 머물러 있는 기관의 정치적 관리 실패가 많은 사람들에게 파멸을 가져왔다고 비판했다.

          + 우체국 내부 '정의' 시스템의 문제점 지적
          + IT 버그와 정치적 관리 실패의 영향 분석

     * BBC가 2015년 '파노라마' 시리즈의 일환으로 이 사건에 대한 다큐멘터리를 방영했으며, 우체국으로부터 내용에 대한 위협을 받았다는 사실을 언급한 사용자가 있다. 이는 단순한 '글리치'가 아니라, 영향을 받은 사람들의 목소리를 억압하는 PR 캠페인이었다고 비판했다.

          + BBC의 다큐멘터리 방영과 우체국의 위협에 대한 언급
          + PR 캠페인에 의한 영향 받은 사람들의 목소리 억압 비판

     * 'Private Eye' 잡지의 기사와 BBC 라디오 프로그램을 통해 이 사건의 불공정함에 대한 요약과 통찰을 제공하는 사용자가 있다.

          + 'Private Eye' 잡지와 BBC 라디오 프로그램을 통한 사건 요약 및 통찰 공유

     * 우체국이 정부 기관이라는 점을 지적하며, 정부의 책임을 강조한 사용자가 있다. 우체국은 정부 소유이며, 우편 업무를 담당하는 장관이 있지만, 일상적인 운영은 별도의 이사회가 맡고 있다고 설명했다.

          + 우체국의 정부 기관으로서의 성격과 정부의 책임 강조

     * 법적 시스템이 이 사건에서 어떤 역할을 했는지에 대해 의문을 제기한 사용자가 있으며, '컴퓨터가 그렇다고 하니까'라는 이유로 900건의 기소가 이루어진 것에 대해 비판했다.

          + 법적 시스템의 역할에 대한 의문 제기 및 대규모 무고한 사람들에 대한 기소 비판

     * 한 팀에서 '글리치'라는 단어 사용을 금지한 경험을 공유한 사용자가 있다. 이 단어는 개발자와 제품 소유자가 고객과 대화할 때 책임을 회피하기 위해 사용하는 용어로, 현대 기술 팀에서는 사용되어서는 안 된다고 주장했다.

          + '글리치'라는 용어의 사용 금지와 그 이유에 대한 개인적 경험 공유

     * 호주의 '로보데뷔트' 사건과 유사한 사례를 언급하며, 알고리즘에 의한 정부(Algocracy)로 인한 파괴적인 결과를 지적한 사용자가 있다.

          + 호주의 '로보데뷔트' 사건과 유사한 사례 언급 및 알고리즘에 의한 정부의 문제점 지적
"
"https://news.hada.io/topic?id=12897","FedEx, 새로운 이커머스 플랫폼 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         FedEx, 새로운 이커머스 플랫폼 출시

     * FedEx가 올 가을 'fdx'라는 이름의 새로운 ""데이터 기반 상거래 플랫폼""을 출시할 예정임.
     * 이 플랫폼은 온라인 판매자들이 공급망 관리, 고객 판매, 배송 관리를 돕는 것을 목표로 함.
     * fdx는 FedEx가 2020년에 인수한 전자상거래 마켓플레이스 ShopRunner 회원 접근과 같은 기존 FedEx 상거래 도구들과 가을에 새롭게 선보일 기능들을 결합하여, 브랜드가 더 정확한 배송 정보를 제공하거나 FedEx의 배송 네트워크 데이터를 활용한 주문 관리를 할 수 있도록 함.
     * 아마존과의 물류 경쟁을 위해 새로운 플랫폼을 출시하는 것
     * 2019년 FedEx는 아마존 화물 운송 계약을 갱신하지 않았고, 아마존은 연말 성수기에 FedEx를 이용한 프라임 배송을 금지했으나 이듬해 금지를 해제함.
     * FedEx는 아마존과 UPS에 밀려 미국 내 집배송 분야에서 아마존이 2022년에 가장 많은 배송을 담당함.

GN⁺의 의견

     * FedEx의 새로운 전자상거래 플랫폼 'fdx'는 온라인 상인들에게 공급망 관리부터 배송까지 통합된 솔루션을 제공하는 것이 핵심이며, 이는 고객 맞춤형 경험을 강화하는 데 중점을 둠.
     * 이 플랫폼은 아마존과 같은 대형 플레이어와의 경쟁에서 FedEx가 자신의 위치를 강화하려는 전략적 움직임으로 볼 수 있음.
     * 특히, 아마존이 물류 분야에서 강력한 경쟁자로 부상한 상황에서, FedEx의 이러한 변화는 물류 및 배송 산업에 중요한 영향을 미칠 가능성이 있음.

        Hacker News 의견

     * FedEx의 배송 플랫폼 문제에 대한 흥미로운 논의
          + FedEx가 1~2일 배송을 보장하지 못하면 성공하기 어려움
          + Amazon은 1 ~ 2일 배송을 약속하지만 종종 지연되어 2 ~ 4일이 소요됨
          + Amazon은 직원들을 많이 압박하고, 플랫폼을 통해 저질 제품을 많이 판매함
          + Costco는 품질 검증된 제품을 1~2일 배송으로 제공할 좋은 위치에 있지만, 그러한 서비스를 제공하는 데 관심이 없음
          + Home Depot는 웹/앱 UI/UX와 배송 서비스 개선을 통해 경쟁력을 갖추고 있음
     * Amazon 판매자의 경험에 대한 부정적인 의견
          + Amazon은 봇에 의해 운영되며, 제품이 목록에서 제외된 이유를 인간 직원들도 모름
          + 판매자 친화적인 경쟁업체의 등장을 환영함
     * Amazon FBA의 문제점과 시장 기회에 대한 지적
          + Amazon FBA는 높은 수수료를 부과하고 판매자/브랜드를 학대하며, 비즈니스 모델을 제한함
          + 국제적인 비즈니스 운영에 어려움이 있어 시장 기회가 존재함
     * FedEx의 서비스 품질에 대한 불만
          + FedEx 웹사이트에서 특수 하드웨어 배송을 위한 라벨을 얻는 데 3시간 이상 소요됨
          + 계정 생성 후에도 추가적인 계정 생성을 요구하며, 고객 서비스에 연락하도록 요구함
     * FedEx의 기술 문화에 대한 비판적인 견해
          + FedEx 기업의 기술 문화는 비효율적이고, 관료적이며, 많은 레드 테이프로 인해 진전이 어려움
          + 많은 엔지니어들이 단순한 부품처럼 느껴지며, 조직 구조의 근본적인 변화 없이는 새로운 기술 사업의 성공을 의심함
     * Amazon의 핵심 역량과 경쟁업체의 기회에 대한 분석
          + Amazon은 본질적으로 물류 회사이며, 웹사이트 사용성이 좋지 않고, 가격 경쟁력이 떨어지며, 판매자/공급자 경험이 Amazon에 유리함
          + Amazon Prime에 투자한 대규모 고객층이 있으며, 빠른 배송이 필요할 때 종종 Amazon을 이용함
          + 다른 판매자들도 빠른 배송을 제공할 수 있지만, 사이트마다 일관성이 없음
          + 물류 회사가 쇼핑 카트 플러그인을 확장하고 중앙 주문 시스템에 데이터를 피드백하며, 자체 결제 솔루션을 포함하여 중앙화된 주문, 결제, 물류를 제공한다면 강력한 비즈니스 기회가 될 수 있음
     * FedEx의 현재 비즈니스에 집중해야 한다는 의견
          + FedEx는 Amazon과의 배송 경쟁에서도 문제를 겪고 있으며, 현재 비즈니스 개선에 집중해야 함
     * FedEx와 Amazon의 계약자 사용에 대한 비교
          + 기사에서 Amazon이 계약자를 사용하는 것에 대해 언급하지만, FedEx도 비슷한 방식으로 운영됨에도 불구하고 언급되지 않음
     * FedEx의 플랫폼 개발에 대한 회의적인 의견
          + FedEx가 사용하기 쉬운 웹사이트나 모바일 앱을 만드는 데 실패했지만, 플랫폼 개발에는 성공할 수도 있음
     * 기사 작성에 AI 사용 여부에 대한 의문과 FedEx에 대한 격려
          + 기사의 마지막 두 단락이 동일한 것으로 보아 AI가 작성했는지 의심됨
          + FedEx의 새로운 시도에 대해 흥미롭다고 생각하며, 성공을 기원함
"
"https://news.hada.io/topic?id=13003","Figma의 가격 플랜 페이지 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Figma의 가격 플랜 페이지 분석

     * Figma의 가격 페이지는 SaaS 들중 최고임
     * 컬러 스킴 활용: 무료는 회색, 프로는 녹색, 조직은 보라색, 엔터프라이즈 검정색
     * 각 플랜에 유니크한 CTA를 줌
     * 플랜별로 Hero 기능들을 순차적으로 증가시킴: 5/6/8/10개
     * 이 페이지 전체가 대부분의 데스크탑에서 '스크롤 위쪽'에 표시됨(한눈에 보임)
     * 특이한 것은 Figma가 Enterprise 플랜에 대해서도 실제 비용을 보여준다는 것. 사용을 위해서는 실제로 Sales를 컨택해야만 하지만, 그전에 가격을 알수는 있음
       (다른 서비스들은 보통 엔터프라이즈는 세일즈 컨택을 해야만 알수 있음)
"
"https://news.hada.io/topic?id=12936","Notion Calendar - 업무와 일상을 위한 통합 캘린더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Notion Calendar - 업무와 일상을 위한 통합 캘린더

     * Notion이 캘린더앱 Cron을 인수하여 Notion Calendar로 통합하여 공개
     * 대부분의 캘린더는 독립형 앱이기 때문에, 업무와 시간 관리 사이에 간극이 생김
     * 메모, 프로젝트, 작업 등 Notion의 모든 측면에 시간 관리를 접목해, 시간과 관련된 모든 것을 통합된 방식으로 관리하는 것을 목표
     * Google 캘린더 계정 연결만 하면 바로 시작 가능

   저도 어제 설치해서 실행해보다가 구글 캘린더 계정만 되고(1), 생각보다 요청하는 권한(2)이 너무 많아서 중간에 이탈하고 삭제해버렸네요ㅠ

   그나저나 글 제목에 타이틀에 오타가 있습니다.

   아흑 수정했습니다.

   정작 저는 인수전 Cron 사용자였는데, 제가 Notion을 안써서 그냥 떠나야 할듯 해요.
"
"https://news.hada.io/topic?id=12978","테슬라 직원들이 '사적인 장면'을 감시하기 위해 차량 카메라를 사용함; 소유주들이 소송 제기 (2023년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      테슬라 직원들이 '사적인 장면'을 감시하기 위해 차량 카메라를 사용함; 소유주들이 소송 제기 (2023년)

테슬라 직원들, 차량 카메라를 이용해 '사적인 장면'을 감시; 소유주들이 소송 중

     * 테슬라 직원들이 자동차의 오토파일럿과 캐빈 카메라를 남용하는 것이 충격적으로 흔한 일임.
     * 이들은 차량 내부의 이미지를 회사 채팅에서 공유하기도 함.
     * 이 문제로 인해 테슬라 소유주들이 회사를 상대로 소송을 제기함.

  GN⁺의 의견

     * 이 기사는 테슬라 차량의 개인 프라이버시 침해 문제를 다루고 있어, 차량 내부 카메라와 관련된 프라이버시 보호의 중요성을 강조함.
     * 자동차 기술의 발전이 가져오는 부작용 중 하나로, 사용자의 개인 정보 보호와 기술의 안전한 사용 사이의 균형을 찾는 것이 중요함.
     * 이 사건은 테슬라 사용자들에게 뿐만 아니라, 모든 자동차 소비자들에게 자동차 회사의 데이터 보호 정책과 관련된 인식을 높일 수 있는 계기가 될 수 있음.

        Hacker News 의견

     * 최신 업데이트:

     캘리포니아 주의 한 판사가 테슬라 차량에서 녹화된 비디오를 부적절하게 접근하고 공유한 혐의를 받는 테슬라 소유주가 제기한 프라이버시 침해 주장을 집단 소송이 아닌 개별 중재를 통해 해결해야 한다고 판결함.
          + 한 테슬라 차주가 회사의 비디오 접근 및 공유 관행에 대한 프라이버시 침해를 주장하며 제기한 소송이 집단 소송이 아닌 개별 중재로 이루어질 것이라는 캘리포니아 판사의 결정.
     * 4월 토론, 501개의 댓글:
          + 테슬라에 대한 논란이 있는 한 주였으며, 미국 중서부에서 나온 끔찍한 이야기들과 함께 테슬라에게 좋지 않은 주간임.
     * 테슬라의 초기 정당화:
          + 차량이 주차되어 충전 중일 때 카메라로 녹화하는 테슬라의 초기 정당화에 대한 궁금증.
     * 캘리포니아 남성의 소송:
          + 모든 테슬라 소유주를 대표하여 회사를 상대로 소송을 제기한 캘리포니아 남성의 사례. 이후 테슬라는 원고를 중재로 강제 이관시킴.
     * 직원 간 비디오 공유:
          + 테슬라 차량이 자전거를 타고 있던 아이를 치었을 때, 그 아이가 공중으로 날아가는 비디오가 직원들 사이에서 ""불처럼"" 사적인 일대일 채팅을 통해 확산되었다는 전직 직원의 증언. 이러한 행위가 사실이고 테슬라 경영진이 이 문제를 인지하고도 조치를 취하지 않았다면, 법정과 배심원단이 거액의 배상을 명령하기를 바람.
     * 차량 네트워크 연결 해제 가이드:
          + 차량을 네트워크에서 분리하는 방법에 대한 가이드가 필요함.
     * 테슬라의 고객 프라이버시 존중 부족:
          + 테슬라가 기본적인 인간 존엄성과 고객의 프라이버시를 존중하는 것이 너무 많은 것을 기대하는 것 같음. 엘론 머스크는 어떻게 브랜드를 화려하게 만들고 모두 태워버릴 수 있는지에 대해 향후 비즈니스 스쿨에서 흥미로운 사례 연구가 될 것임.
     * 중국의 인식:
          + 중국이 이 문제를 몇 년 동안 알고 있었다는 사실.
     * GNUCar 필요성:
          + GNUCar와 같은 대안이 필요함.
"
"https://news.hada.io/topic?id=12986","어쩌다 크리에이터 이코노미는 잠잠해졌나: 중산층의 부재가 불러온 딜레마","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                어쩌다 크리에이터 이코노미는 잠잠해졌나: 중산층의 부재가 불러온 딜레마

     * 크리에이터 이코노미는 21-22년도에 웹3와 더불어 핫해졌던 버즈 워드(Buzz Word), 그러나 아직까지 괄목할만한 성과를 배출해내지 못함
          + 기존의 빅테크 기업들(구글의 유튜브, 메타의 인스타그램, 바이트댄스의 틱톡 등)은 크리에이터 붐을 통해 많은 수익을 창출하였지만, 순수하게 크리에이터 영역에서 시작한 스타트업 중 어마어마한 성공을 거둔 곳이 아직 없음
     * 이러한 현상의 배경에는 '크리에이터 중산층(Middle Class)'의 부재가 존재
          + 오직 상위 1%의 크리에이터만이 유의미한 수익을 창출, 이들은 이미 빅테크 플랫폼에서 활동 중으로, 초기 스타트업이 고객으로 삼기에 적절하지 않으며 그 수도 많지 않음
          + 나머지 99%의 크리에이터들은 그들을 대상으로 scalable한 비즈니스를 전개하기에는 너무 영세함
     * 과연 크리에이터 중산층은 유의미한 양으로 불어날 수 있을까?
     * 크리에이터 이코노미 스타트업이 성공할 수 있을지는 오랫동안 업계에서 토론되고 있는 주제

   그럼 일단 중산층을 유의미하게 키울 수 있는 커뮤니티를 만드는걸 먼저 해보는건 어떨까 싶네요.

   https://yozm.wishket.com/magazine/detail/2422/

   그건 또 그거 나름대로 어렵다는 글이 있더라고요
"
"https://news.hada.io/topic?id=12993","카약의 새로운 항공편 필터, 특정 기종 제외 기능 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     카약의 새로운 항공편 필터, 특정 기종 제외 기능 제공

네트워크 정책으로 인한 접근 차단 안내

     * 요청이 네트워크 정책으로 인해 차단됨.
     * 로그인하거나 여기에서 계정을 생성하여 브라우징을 재개할 것을 권장함.
     * 스크립트나 애플리케이션을 실행 중이라면, 여기에서 개발자 자격으로 등록하거나 로그인할 것을 요청함.
     * User-Agent가 비어 있지 않고, 고유하며 설명적인지 확인하고 다시 시도할 것을 권함.
     * 대체 User-Agent 문자열을 사용 중이라면 기본값으로 변경하여 다시 시도해 볼 것을 제안함.
     * Reddit의 이용 약관은 여기에서 확인 가능함.
     * 차단이 잘못되었다고 생각되거나 데이터를 더 쉽게 얻는 방법에 대해 논의하고 싶다면, 여기에서 티켓을 제출할 것을 안내함.
     * 연락 시 IP 주소(3.34.96.173)와 Reddit 계정을 포함하여 제공할 것을 요청함.

GN⁺의 의견

     * 이 안내문은 사용자가 Reddit에 접근할 때 네트워크 정책 위반으로 인해 차단된 경우에 대한 정보를 제공함.
     * 사용자는 로그인, 계정 생성, 개발자 등록 등을 통해 문제를 해결할 수 있으며, User-Agent 설정에 주의를 기울여야 함.
     * 이 글은 Reddit 이용자들에게 차단 문제를 해결하는 방법과 연락처 정보를 제공함으로써, 원활한 서비스 이용에 도움이 될 수 있음.

        Hacker News 의견

     * 737 맥스를 피하는 방법에 대한 토론
          + 비록 완벽하지 않지만, 737 맥스를 피하려는 시도가 항공사에게 명확한 신호를 줄 것임.
          + 에어버스가 보잉보다 2대 1로 더 많이 팔리고 있으며, 항공사의 수요에 따라 생산을 확대할 수 있음.
     * 항공기 변경 가능성에 대한 우려
          + 항공사가 출발 직전에 항공기를 변경할 수 있어, 공항에서 시간을 보낸 후 게이트에서 결정을 내려야 함.
     * 승객의 항공기 모델에 대한 걱정에 대한 의견
          + 승객이 항공기 모델에 대해 걱정하는 것은 불필요하며, 사람들은 낮은 확률을 개념화하는 데 어려움을 겪음.
     * 737 MAX 피하기의 어려움과 독립 안전 위원회의 필요성
          + 737 MAX를 피하는 것은 어려우며, 항공사들은 연료 효율성 때문에 이 항공기를 선호함.
          + 보잉이 안전한 항공기를 다시 제작할 수 있도록 모든 설계와 생산을 감독하는 독립 안전 위원회의 설립이 필요함.
     * 지역 제트기, 특히 CRJ-200을 피하고 싶은 승객의 의견
          + CRJ-200을 다시는 타지 않을 수 있는 기능에 대한 만족감 표현.
     * 보잉을 사용하지 않는 항공사 선택에 대한 개인적 견해
          + 보잉의 문화와 공학력 저하에 대한 이야기들로 인해 보잉을 사용하지 않는 항공사를 선택함.
     * 에어버스 항공기의 기계적 문제에 대한 지적
          + 에어버스 항공기도 기계적 문제가 있다는 사실을 알리며, 에어버스 A320 가족의 사고 및 사건 목록을 인용함.
     * 러시아에서의 항공 여행과 신뢰 문제
          + 제재로 인해 제대로 유지되지 않는 항공기들 때문에 러시아인들은 엠브레어 항공기만 신뢰함.
     * 소액의 프리미엄을 지불하고 기분 좋게 만드는 기능에 대한 의견
          + 작은 프리미엄을 지불하고 만족감을 느끼게 하는 체크박스 활동에 비유함.
     * 제3자의 가치에 대한 긍정적인 평가
          + 항공사가 절대 제공하지 않을 것 같은 기능의 가치를 입증하는 좋은 예로 평가함.
"
"https://news.hada.io/topic?id=13005","[CTO 인터뷰] 레몬베이스 엔지니어링 그룹은 기술 과제를 어떻게 해결하고 있는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             [CTO 인터뷰] 레몬베이스 엔지니어링 그룹은 기술 과제를 어떻게 해결하고 있는가

   엔지니어라면 일을 하며 필수적으로 마주칠 수 밖에 없는 ‘기술 부채’. 일반적으로 기능 개발과 기술 부채는 trade off 관계인 경우가 많은데요. 빠르게 제품을 릴리즈 하면서 시장을 검증해나가야 하는 스타트업들은, 당장의 성과가 눈에 보이지 않는 기술 부채 해결에 시간을 쏟을 여력이 없는 경우가 많죠. 하지만 더 빠르고 안정적인 서비스 개발을 위해서는 ‘기술 투자’ 역시 소홀해서는 안됩니다.

   이런 부분을 챙기지 않고 개발에만 몰두하게 되면, 회사와 제품의 성장속도는 점점 더뎌질 수 밖에 없으며, 현재 상황에서 ‘계획된 제품 개발의 가치’와 ‘기술 이슈의 해결이 가져오는 가치’를 비교해 잘 판단하는 것이 중요해 보입니다.

   레몬베이스 엔지니어링 그룹은 이 사안을 어떻게 바라보고, 어떤 과정과 합의를 통해 수행해가고 있을까요? 레몬베이스에서 CTO로 일 하고 있는 Danny와의 인터뷰를 통해 들어봤습니다.

   추상적으로 다가오는 내용들이 많네용.
"
"https://news.hada.io/topic?id=12939","허니비: 멀티모달 대형 언어 모델을 위한 지역성 강화 프로젝터 (오픈소스)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               허니비: 멀티모달 대형 언어 모델을 위한 지역성 강화 프로젝터 (오픈소스)

   Honeybee: Locality-enhanced Projector for Multimodal LLM

    논문 요약

   카카오브레인에서 멀티모달 대형 언어 모델(MLLM)의 성능과 효율성을 개선하기 위한 새로운 프로젝터 설계인 ""Honeybee""를 공개했습니다. Honeybee는 시각적 토큰의 수를 유연하게 관리하고, 시각적 특징의 지역성(Locality) 맥락을 보존하는 방법을 제안합니다.

    주목할 만한 점

     * ""Honeybee""는 시각적 데이터의 효과적인 처리를 통해 MLLM의 전반적인 성능을 향상시키는 데 기여합니다. C-Abstractor와 D-Abstractor의 도입이 특히 주목할 만합니다.
     * Locality의 개념을 아는 분들이면 더 흥미롭게 볼 수 있는데 'ㅇㅇㅇ를 자주 사용하니 ㅇㅇㅇ 맥락에 맞게 추론'한다는 것이라고 생각하시면 쉽습니다.
     * C-Abstractor와 D-Abstractor라는 방식도 제안되었는데 이들은 시각적 토큰의 수를 유연하게 관리하고 시각적 특징의 지역적 맥락을 보존하는 데 중요한 역할을 합니다.

    시사점과 후속연구

     * 본 연구는 멀티모달 인공지능 분야에 새로운 시각을 제공하며, 향후 연구에서 이러한 기술의 확장 및 응용 가능성을 탐구할 수 있는 기반이 됩니다.
     * 또한, Apache 2.0 License 기반의 오픈 소스로 공개되어 누구나 기여하고 사용할 수 있습니다.

   https://www.aitimes.kr/news/articleView.html?idxno=30075
"
"https://news.hada.io/topic?id=13014","Tart - Apple의 Virtualization.Framework를 사용하는 macOS용 가상 머신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Tart - Apple의 Virtualization.Framework를 사용하는 macOS용 가상 머신

     * 애플 실리콘 상에서 macOS 및 Linux VM을 실행/관리하기 위한 가상화 툴셋
     * Apple의 Virtualization.Framework 를 이용해서 거의 네이티브 수준의 속도 제공
     * OCI 호환 컨테이너 레지스트리에서 VM Push/Pull 가능
     * Tart Packer 플러그인으로 VM 생성 자동화
     * CI 시스템들과의 쉬운 연동
"
"https://news.hada.io/topic?id=13016","Shadeup - WebGPU를 쉽게 만드는 언어 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Shadeup - WebGPU를 쉽게 만드는 언어

     * TypeScript를 확장하여 몇 줄의 코드만으로 WebGPU를 활용 가능
     * 파이프라인, 버퍼, 유니폼, 기타 상용구 등의 프로세스를 추상화
     * Shadeup 으로 작성된 코드는 WGSL과 자바스크립트로 교차 컴파일. CPU에서 디버그 가능
     * uniform 을 자동 생성해줘서 별도 정의할 필요없음. 클로저 처럼 작동하며 대부분의 CPU 선언 변수에 접근 가능
     * 셰이드업의 핵심 철학은 복잡한 알고리듬을 쉽게 읽고 배울 수 있도록 만드는 것
"
"https://news.hada.io/topic?id=13001","모더, 충돌 소리의 오디오를 사용하여 Game Boy Advance 게임 재창조","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              모더, 충돌 소리의 오디오를 사용하여 Game Boy Advance 게임 재창조

게임 보이 어드밴스 게임을 충돌 소리로 재창조

     * 게임 보이 어드밴스(GBA)의 소프트웨어가 충돌한 지 거의 2시간이 지난 후, 그 안에 있는 게임에 기반한 멜로디를 연주함.
     * 특수 하드웨어와 코드를 사용하여 충돌 소리를 들으면 어떤 게임인지 정확히 알 수 있음.
     * 이 방법을 이용해 이론적으로 동일한 게임을 플레이할 수 있음.

포켓몬 게임을 잔인하게 해킹하는 TheZZAZZGlitch의 발견

     * TheZZAZZGlitch는 포켓몬 게임을 해킹하는 일을 하며, GBA 데이터를 카트리지에서 추출하는 데 다른 쉬운 방법이 있지만, 오디오 데이터맨서처럼 느끼게 하는 방법은 없음.
     * GBA가 충돌한 후 4시간 동안 녹음을 진행하고, 약 1시간 50분 지점에서 특징적인 파형을 발견함.
     * 나중에는 게임이 포함하고 있는 실제 악기 소리와 오디오 샘플을 순서대로 들을 수 있음.

오디오로부터 ROM 데이터 추출

     * TheZZAZZGlitch는 GBA의 충돌 덤프를 깨끗하게 녹음한 오디오에서 데이터를 읽을 수 있는 파이썬 스크립트를 개발함.
     * 오디오로 ROM 데이터를 전송하는 문제 중 하나는 ROM에 0바이트 데이터의 큰 섹션이 있어서 무음으로 파싱하기 어려움.
     * 다른 스크립트를 실행하여 원본 ROM에서의 위치에 따라 섹션을 재정렬한 후, ROM은 99.76% 정확도를 달성했지만 여전히 부팅되지 않음.
     * 녹음을 세 번 반복하고 ""다수결"" 알고리즘으로 병합하여 정확도를 99.979%까지 향상시킴.
     * 일곱 번의 다른 녹음을 결합하고 빈 공간을 필터링하여 100% 일치를 달성함.

GN⁺의 의견

     * 이 기사는 기술과 창의성이 만나 새로운 형태의 데이터 복구 방법을 탄생시킨 사례를 보여줌.
     * TheZZAZZGlitch의 실험은 기존의 데이터 복구 방식을 넘어서는 독창적인 접근법을 제시하며, 오디오 데이터를 사용하여 게임 데이터를 복원하는 놀라운 가능성을 열어줌.
     * 이 기사는 기술 애호가들에게 흥미로운 내용을 제공할 뿐만 아니라, 소프트웨어 엔지니어링과 데이터 복구 분야에 대한 새로운 관점을 제공함.
"
"https://news.hada.io/topic?id=13010","HN 공지: 해커 뉴스, 이제 IPv6 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HN 공지: 해커 뉴스, 이제 IPv6 지원

     * 내 브라우저가 오늘 Hacker News에 IPv6를 통해 연결하기 시작함.
     * news.ycombinator.com의 IPv4 주소는 209.216.230.207이고, IPv6 주소는 2606:7100:1:67::26임.
     * 두 IP 주소는 같은 ASN(M5 Computer Security)을 공유함.
     * IPv6 주소를 직접 입력하면 Hacker News로 올바르게 리디렉션됨.
     * 지금까지 잘 되고 있으니, Reddit처럼 다시 끄지 말기를 바람.

    GN⁺의 의견

     * IPv6는 인터넷의 미래로, 기존 IPv4 주소 체계의 한계를 극복하고 더 많은 장치를 연결할 수 있는 새로운 인터넷 프로토콜임.
     * Hacker News가 IPv6를 지원하기 시작한 것은 기술 커뮤니티 내에서 IPv6의 채택을 장려하는 긍정적인 신호로 볼 수 있음.
     * 이러한 변화는 사용자들에게 더 나은 연결성과 미래 지향적인 인터넷 환경을 제공하는 중요한 단계임.

        Hacker News 의견

     * [IMG] IPv-Foo 확장 프로그램은 주소 표시줄에 작은 아이콘을 추가하여 현재 웹 페이지가 사용하는 IP 프로토콜 버전(IPv4 또는 IPv6)을 한눈에 확인할 수 있게 해줌.
     * IPv4에 익숙한 사용자로서 IPv4를 그리워하지만, IPv6로의 전환은 340언델리온 개의 고유 주소를 제공하는 등 여러 면에서 흥미롭고, 이 변화에 적응할 수 있을 것으로 기대함.
     * IPv6 전환은 관련 없는 다른 마이그레이션의 부수적인 부분일 수 있으며, 내부 IP 필터링/차단 도구가 IPv4만을 지원하므로 곧 비활성화될 수 있다는 우려가 있음.
     * Cloudflare를 통해서도 IPv6를 활성화할 수 있는데, 몇 일 전에 활성화되었다가 왜 다시 꺼졌는지 궁금함. Cloudflare가 직접 트래픽을 처리하는 것으로 돌아갔음.
     * 1998년 또는 1999년에 처음으로 IPv6 터널을 만들었지만, 기술이 빠르게 발전하는 것처럼 보이지만 TCP와 DNS의 기본 구성 요소는 매우 느리게 발전함. 전반적인 관심 부족인지, 아니면 사람들이 자신의 라우팅 가능한 IP 주소를 가지고 P2P 네트워킹을 용이하게 하는 비즈니스 이해관계가 있는지 궁금함.
     * 거의 10년 전에 요청했던 것이 이제야 실현되었다는 반응으로, 매우 기쁨.
     * IPv6가 더 큰 주소를 사용함으로써 지연 시간(latency)이 증가하는지, 아니면 더 효율적인 프로토콜로 인해 실제 지연 시간이 줄어드는지 궁금함. 이에 대한 차이점을 설명하는 책을 읽어보는 것이 좋을 것 같음.
     * A 레코드와 AAAA 레코드 모두에서 TTL(Time To Live)이 1로 설정된 이유를 아는 사람이 있는지 질문.
     * IPv6가 현재 널리 사용되고 있는데, 이제야 구현되었다는 사실에 놀람.
     * 240/4와 0/8 주소 범위를 일반적으로 사용할 수 있도록 정치적으로 만들 방법이 있었으면 좋았을 것이라는 생각과 함께, 이러한 프로젝트를 추진한 것은 IPv6 지지자들에게 행동을 촉구하기 위함이었다는 의견.
"
"https://news.hada.io/topic?id=12983","플리퍼 제로: 괴짜들을 위한 멀티툴 기기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         플리퍼 제로: 괴짜들을 위한 멀티툴 기기

플리퍼 제로: 게이머를 위한 멀티툴 장치

     * 플리퍼 제로는 펜테스터와 게이크를 위한 휴대용 멀티툴로, 장난감 같은 외형을 가지고 있음.
     * 디지털 장치, 라디오 프로토콜, 접근 제어 시스템, 하드웨어 등을 해킹하는 것을 좋아함.
     * 완전히 오픈 소스이며 사용자 정의가 가능하여 원하는 방식으로 확장할 수 있음.

플리퍼 제로란 무엇인가: 당신의 사이버 친구

     * 플리퍼 제로의 아이디어는 이동 중에 탐색과 개발에 필요한 모든 하드웨어 도구를 결합하는 것임.
     * pwnagotchi 프로젝트에서 영감을 받았으나, 다른 DIY 보드와 달리 일상 사용의 편리함을 염두에 두고 설계됨.
     * 플리퍼 제로는 개발을 게임처럼 만들어주며, 개발은 항상 재미있어야 한다는 것을 상기시켜줌.

주요 기능

     * 1.4인치 단색 LCD 디스플레이, 128x64 픽셀, 초저전력, 햇빛 아래에서도 읽을 수 있음.
     * 5버튼 방향 패드, 상태 LED, 뒤로 가기 버튼을 포함하여 추가 장치 없이도 독립적으로 제어 가능.
     * USB와 블루투스를 통해 더 많은 제어가 가능하며, 주요 기능은 메인 메뉴에서 접근할 수 있음.

무선 기능

     * 서브 1GHz 대역을 사용하여 다양한 무선 장치와 접근 제어 시스템과 상호 작용 가능.
     * 통합된 멀티밴드 안테나와 CC1101 칩을 사용하여 최대 50미터 범위의 강력한 송수신기 기능을 제공.
     * 다양한 디지털 변조 지원 및 IoT 장치 및 접근 제어 시스템과의 연결을 위한 사용자 정의 가능한 라디오 플랫폼.

RFID 기능

     * 125kHz RFID와 NFC 모듈을 내장하여 LF 및 HF 범위에서 작동하는 궁극의 RFID 장치로 기능.
     * 낮은 주파수의 접근 카드를 읽고, 저장하며, 나중에 에뮬레이트할 수 있음.
     * NFC 모듈을 통해 NFC 지원 장치와 상호 작용 가능.

추가 기능

     * 전체 블루투스 저에너지(BLE) 지원으로 플리퍼 제로를 주변 장치로 사용할 수 있음.
     * 적외선 송신기를 통해 TV, 에어컨 등의 전자 기기를 제어할 수 있음.
     * 적외선 학습 기능과 수신기를 통해 신호를 저장하고 공유할 수 있음.
     * 마이크로SD 카드 슬롯을 통해 다양한 데이터를 저장할 수 있으며, FAT12, FAT16, FAT32, exFAT 포맷 지원.

하드웨어 탐색 도구

     * GPIO를 사용하여 하드웨어와 연결하고, 버튼으로 제어하며, 자체 코드를 실행하고 LCD에 디버그 메시지를 출력할 수 있는 다목적 도구.
     * 완전히 독립적으로 작동하며, 내장된 1-Wire 커넥터를 통해 iButton 접촉 키를 읽을 수 있음.

내부 사양

     * 마이크로컨트롤러, 디스플레이, 서브 1GHz 모듈, 버저, 진동 모터, 배터리, 마이크로 SD, 바디, GPIO, 블루투스 LE 5.4, 적외선, NFC, RFID 125 kHz, USB 등의 기술 사양을 포함.

GN⁺의 의견

     * 플리퍼 제로는 하드웨어 해킹과 개발에 관심 있는 사람들에게 매우 유용한 도구임. 다양한 무선 프로토콜과 접근 제어 시스템을 탐색하고, 사용자 정의가 가능하여 개인의 필요에 맞게 확장할 수 있는 점이 특징.
     * 오픈 소스 커뮤니티의 지원을 받아 지속적으로 업데이트되고 새로운 기능이 추가되는 생태계를 가지고 있어, 기술 애호가들에게 지속적인 가치를 제공함.
     * 휴대성과 사용의 편리함을 강조한 디자인은 현장에서의 실제 사용을 고려한 점이 돋보이며, 이는 개발자와 테크니션들에게 실용적인 장점으로 작용할 것임.

   저 이거 초기에 킥스타터로 나왔을때 주문해서 받았는데, 아쉽게도 한국은 전파법상 안되는게 많아서 뭔가 제한이 있습니다. 처음엔 아예 안되다가, 이제는 언락용 펌웨어를 따로 설치해야 하는게 좀 귀찮아서 가지고 놀다가 쳐박아뒀네요 ㅠ

        Hacker News 의견

     * 공식 출시 후 얼마 지나지 않아 구입한 사용자의 경험
          + 사이버보안 분야에 종사하는 사용자로서, 평균적인 사람보다 실제 사용 사례가 더 많음.
          + 가장 마음에 드는 사용 사례는 스마트폰에서 더 이상 제공하지 않는 IR 리모트 기능.
          + 사용자 정의 펌웨어를 통해 1GHz 이하의 다양한 주파수를 수신 및 전송할 수 있음을 사람들이 잘 모름.
          + 차고 문, 게이트, 선풍기 리모콘 등 많은 장치들이 해당 주파수 범위를 사용하며 보안이 강하지 않음.
          + 사용자 정의 PCB 송신기나 복잡하고 비싼 SDR을 구매하지 않고도 이러한 장치들과 상호작용할 수 있는 시기로 기억될 것임.
     * 다양한 용도로 유용한 멀티툴
          + 블루투스 프레젠테이션 리모트, 컨퍼런스에서 QR 코드나 NFC 연락처 공유, 노트북이 잠길 때 VPN 연결 유지를 위한 마우스 움직임 등에 유용함.
          + 집안에서도 휴일 동안 유용하게 사용됨.
     * Flipper Zero의 비용 대비 대안
          + $169는 비싸다고 느낀 사용자가 $8짜리 125KHz RFID 프로그래머와 $5짜리 USB-C IR 블래스터를 구매함.
          + 삼성 폰의 기본 NFC 기능, 블루투스 등을 활용하여 Flipper Zero의 90% 기능을 10% 비용으로 해결함.
     * 사용 사례에 대한 질문
          + 하드웨어와 개념은 좋아하지만 실제로 많이 사용하지 않는 사용자가 다른 사람들이 어떻게 사용하는지 궁금해함.
     * 재미있는 기기, 하지만 일부 부정적인 측면 존재
          + IoT 온도 센서와 연동하여 사무실의 온도에 따라 천장 선풍기를 제어하는 등 직렬 통신으로 조작 가능.
          + 호텔 카드 키의 NFC 코드를 캡처하여 키가 손상되었을 때에도 방에 들어갈 수 있음.
          + 일부 기능은 가치가 없어 보이지만, 다른 사람에게는 매력적일 수 있음.
          + 기관들 사이에서는 이 기기의 유연성에 대한 인식이 커지고 있으며, TSA 검문소에서 압수되는 사례도 있음.
          + 자체 앱을 작성하는 것은 배우기 어려운 편임.
     * 최근 뉴스 토론
          + iOS 17을 실행하는 아이폰을 충돌시킬 수 있는 Flipper Zero.
          + 아이폰을 끄는 기능을 차단한 Apple.
          + '카드 스키밍 장치'로 분류되어 아마존에서 금지된 Flipper Zero.
          + 영국 공항에서 승객의 Flipper Zero 압수 사례.
     * 실제 펜테스팅 장치로서의 한계
          + 접근 제어 시스템 외에 실제 세계에서 좋은 용도가 거의 없음.
          + 진정한 SDR로서의 기능, RF 신호의 I/Q 녹음, 조작, 재생 등이 가능했다면 비용을 정당화할 수 있었을 것.
          + 사용되는 RF 칩이 지원하는 변조 방식이 제한적이어서 심각한 도구보다는 해커가 되고 싶은 청소년들을 위한 장난감에 가까움.
          + HackRF+PortaPack 클론과 같은 것에 투자하는 것이 훨씬 낫다고 생각함.
     * 장난감인지 도구인지에 대한 의문
          + 실제로 원하는 것을 수행하기 위해 Flipper를 가지고 있는 것이 아니라, Flipper를 가지고 무엇을 할 수 있는지 찾는 것이 목적으로 보임.
          + 많은 기술적 장난감을 구매하지만, 이것이 장난감이지 도구가 아니라는 것을 인정해야 함.
     * 제품 마케팅에 대한 불만
          + 사용되는 저가 RF 칩을 발명한 것처럼 마케팅하고 독점적으로 배포하는 것처럼 보임.
          + 이러한 마케팅 방식이 완전히 부정직하고 사기적으로 느껴짐.
          + 현재는 소수 의견이지만, 이를 표현하기 위해 시간을 할애했음.
     * '외부인'의 관점
          + 생일 선물로 받은 후 하드웨어에 대해 배우기에 재미있고 쉬운 도구로 평가됨.
          + 프로그래머로서 라즈베리 파이나 아두이노를 소유한 적 없고 취미 전자공학에 시간을 할애할 여유가 없었음.
          + Flipper는 접근성이 좋고, 학습 동기를 부여하며, GPIO에 대해 배우고 펌웨어와 신호를 처음으로 다루는 계기가 됨.
"
"https://news.hada.io/topic?id=12956","미국인들, 취소를 잊어버린 물건들에 수십억 달러 지출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국인들, 취소를 잊어버린 물건들에 수십억 달러 지출

        Hacker News 의견

     * 서비스를 제공하지 않으면서 돈을 받는 기업에 대한 비판
          + 기업들은 종종 고객이 서비스를 사용하지 않는 것을 알면서도, 또는 알 수 있음에도 불구하고 서비스에 대한 비용을 청구함.
          + 비즈니스는 정당하게 수익을 창출해야 하며, 그렇지 않으면 사기로 간주될 수 있음.
          + 이러한 행위는 서비스를 제공하지 않고 돈을 받는 것과 다름없으며, 기업들은 이를 의도적으로 하고 있음을 알고 있어야 함.
          + 사람들은 종종 '비즈니스니까'라는 말로 모든 부정적인 행위를 정당화하지만, 이는 부끄러운 일임.
     * 구독 모델의 이점에 대한 인식
          + SaaS 기업들은 고객이 구독을 취소하는 것을 잊는 것을 구독 모델의 중요한 이점으로 보고, 가격을 쉽게 간과할 수 있는 수준으로 책정하는 것을 고려함.
          + 사람들은 자신의 구독을 추적하거나 비용을 추정하는 데 있어서 형편없으며, 이는 저자 본인도 마찬가지임.
          + 저자는 자신의 반복적인 구독을 철저히 검토하여 연간 거의 $1000을 절약할 수 있었음.
          + 구독 취소 자체는 크게 어렵지 않았으며, Privacy.com과 같은 서비스를 사용하면 추적 및 취소가 더 쉬워짐.
     * 새로운 카드 발급이 구독 갱신에 미치는 영향
          + 새로운 신용카드를 받을 때 기존의 자동 갱신 구독을 새로 갱신해야 하지만, 일부 구독은 새 카드 번호로도 계속 청구될 수 있음.
     * 도둑맞은 신용카드로 인한 구독 서비스 검토
          + 신용카드 도난은 구독 서비스를 검토할 좋은 기회를 제공함.
          + 자동 결제로 인해 주의를 기울이지 않았던 서비스의 비용이 몇 년 만에 두 배로 증가한 사례가 있음.
     * 구독 서비스의 비용 상승에 대한 불만
          + 사용하는 구독 서비스의 가격이 지속적으로 상승하는 것에 대한 불만이 있음.
          + SiriusXM과 같은 서비스의 가격이 몇 년 사이에 25% 가까이 상승함.
     * 구독 서비스 취소와 윤리적인 회사와의 관계 끊기 제안
          + 대부분의 구독 서비스를 취소하고 비윤리적인 회사와의 관계를 끊는 것을 제안함.
          + 개인 금융 계획으로는 매일 은행 계좌를 확인하고 필요하지 않은 서비스를 취소하는 것 등을 포함함.
     * Rackspace의 미미한 요금 청구로 인한 계정 해지
          + 오랜 시간 후 처음으로 Rackspace로부터 소액의 요금이 청구됨.
          + 계정을 해지하기 위해 국제 전화를 해야 하는 불편함이 있음.
     * 구독 취소의 어려움에 대한 지적
          + 구독을 취소하는 것이 어렵거나, 때로는 거의 불가능할 정도로 복잡한 절차를 포함하고 있음을 지적함.
     * Google 계획 변경 시 겪는 문제
          + Google 스토리지 계획을 변경하려 했으나, 두 계획에 대한 요금이 모두 청구되고 있으며, 지원팀이 문제를 해결할 수 없는 상황임.
"
"https://news.hada.io/topic?id=13017","Framework Laptop 16 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Framework Laptop 16 리뷰

프레임워크 랩탑 16, 훌륭한 리눅스 지원 및 성능, 뛰어난 커스터마이징 제공

     * AMD와 Intel을 위한 모듈식 및 사용자 업그레이드 가능한 랩탑 디자인으로 명성을 쌓은 회사의 최신 제품.
     * 키보드/터치패드 및 Radeon RX 7700S 그래픽 모듈을 포함한 다양한 옵션을 통해 더욱 많은 커스터마이징을 제공
     * AMD Ryzen 7040HS 프로세서를 사용하여 이전 Framework 13 모델에 사용된 AMD Ryzen 7040U보다 더 높은 성능을 제공
     * Framework 16은 더 큰 폼 팩터 덕분에 추가적인 커스터마이징이 가능하며, 이전 Framework 랩탑에서 제공되던 마더보드, I/O 포트 및 기타 업그레이드 가능한 옵션을 그대로 유지

리눅스 지원 및 디자인

     * Framework는 디자인 파일을 오픈소스로 공개하고 업그레이드 가능한 랩탑 디자인의 다른 오픈 측면을 활용하여 매력적인 솔루션을 제공함
     * Framework 13과 마찬가지로 리눅스 지원이 좋으며, 최신 리눅스 배포판을 사용하면 문제없이 작동함

성능 및 가격

     * Framework Laptop 16은 무게가 조금 나가고, 기가비트 이더넷 포트를 사용할 때 랩탑의 슬림한 디자인을 해치는 것이 몇 안 되는 단점임
     * 가격은 DIY 모델의 경우 $1399 USD부터 시작하며, Microsoft Windows가 사전 설치된 완성품 버전은 $1699 USD부터 시작함

추가 사양 및 디스플레이

     * 기본 사양은 Ryzen 7 7840HS를 사용하며, Ryzen 9 7940HS는 추가 $200의 비용으로 제공됨
     * DDR5-5600 메모리 옵션은 8GB부터 64GB까지 있으며, 최대 두 개의 NVMe SSD, 선택적 그래픽 모듈, 다양한 입력 모듈 옵션 및 확장 카드가 있음
     * Framework Laptop 16의 디스플레이는 165Hz의 주사율을 지원하며 VRR과 FreeSync도 지원함. 1500:1의 명암비와 500nit의 밝기를 가진 매우 좋은 디스플레이를 제공함

GN⁺의 의견:

     * Framework Laptop 16은 사용자가 직접 업그레이드 가능한 랩탑으로서, 기존의 노트북 시장에 새로운 대안을 제시함.
     * 오픈소스 디자인 파일과 리눅스에 대한 강력한 지원은 개발자 및 기술 애호가들에게 매우 매력적인 요소임.
     * 고성능 프로세서와 고급 메모리 옵션, 그리고 높은 주사율의 디스플레이는 게임 및 전문적인 작업에 적합한 환경을 제공함으로써, 다양한 사용자의 요구를 충족시킬 수 있는 랩탑임.

   프레임웍 CEO가 쓰는 노트북은?
   https://usesthis.com/interviews/nirav.patel/

        Hacker News 의견

     * 첫 번째 사용자(FW13 Intel 11th Gen, Fedora 사용):
          + 전반적으로 긍정적인 경험을 가짐.
          + 11th Gen 특유의 CMOS 배터리 방전 문제가 유일한 단점.
          + Framework는 문제를 잘 처리했으며, 회사는 솔직하게 대응하고 지원 및 배터리 교체를 제공함.
          + 회사의 업그레이드에 대한 약속과 대응 방식이 인상적임.
          + 최근 AMD 버전에 관심이 있지만 현재 장비가 잘 작동하여 구매를 정당화할 수 없음.
          + FW16에 대한 기대와 eGPU를 사용할 수 있는 도킹 스테이션에 대한 희망을 표현함.
     * 두 번째 사용자(AMD Framework 13 사용):
          + 가끔 시스템이 멈추고 강제 재시작이 필요함.
          + 드라이버나 펌웨어 업데이트가 3개월 동안 없었음.
          + 키보드와 트랙패드가 평범함.
          + 팬 통풍구가 바닥에 있어서 거의 항상 막혀 있음.
          + 중요한 3:2 매트 스크린을 갖추고 있지만, 다른 사람에게 추천하기 어려움.
     * 세 번째 사용자(11th gen Intel Framework 사용):
          + 개발, 게임, 일반 컴퓨팅에 사용하며 훌륭한 기계임.
          + 통합 인텔 그래픽으로도 720p에서 게임이 잘 실행됨.
          + 더 큰 화면과 게임 성능을 위해 FW16을 원함.
          + 알래스카의 커피숍에서 다른 Framework 사용자를 보고 기뻤음.
     * 네 번째 사용자:
          + 제품에 대한 질문에 답변할 준비가 되어 있음.
     * 다섯 번째 사용자(FW13 사용):
          + 제품의 모든 것을 사랑함.
          + 64GB RAM으로 업그레이드 가능성을 시뮬레이션하여 올바른 선택이었음을 증명함.
          + 업그레이드가 불가능한 제품으로 돌아갈 수 없음.
     * 여섯 번째 사용자:
          + Thinkpad X201과 같은 좋은 키보드를 제공하기를 바람.
          + 업데이트된 화면과 마더보드를 갖춘 X201을 소유하고 있으며, 키보드 옵션만을 위해 높은 가격을 지불하는 것에 만족함.
     * 일곱 번째 사용자:
          + Framework 노트북을 칭찬하는 많은 사람들 중 하나임.
          + 몇 년 동안 FW13을 사용하고 FW16으로 업그레이드할 계획임.
          + 하드웨어 지원 측면에서 최고의 노트북이며, 사용자 서비스 가능성이 뛰어남.
     * 여덟 번째 사용자:
          + FW13을 사랑하며, 7세 아이가 조립했음.
          + 아이와 함께 Ubuntu 설치도 간단했으며, 이제 누가 사용할지 다툼.
     * 아홉 번째 사용자(FW13 12th gen, Debian 사용):
          + 배터리 수명이 약 2시간이며, 대기 모드에서도 배터리 소모가 빠름.
     * 열 번째 사용자:
          + Framework에 대한 관심이 있지만, 특별한 그래픽이 필요 없고 기술을 7년 이상 유지하는 사용자에게는 미니 PC가 더 적합함.
          + 리눅스 호환성이 좋은 미니 PC를 선호하며, RAM과 SSD 확장이 가능하면 충분함.
          + Framework는 과도한 기능을 제공하는 것으로 느껴짐.
"
"https://news.hada.io/topic?id=12931","WhisperSpeech – Whisper를 역으로 구축한 오픈 소스 음성합성 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            WhisperSpeech – Whisper를 역으로 구축한 오픈 소스 음성합성 시스템

WhisperSpeech 개요

     * WhisperSpeech는 Whisper를 역으로 구축하여 만든 오픈 소스 텍스트-투-스피치 시스템임.
     * 이 모델은 강력하면서도 쉽게 커스터마이징할 수 있도록 설계되었으며, 상업적 용도로 안전하게 사용할 수 있음.
     * 현재 모델은 영어 LibreLight 데이터셋을 기반으로 훈련되었으며, 다음 릴리스에서는 다양한 언어를 지원할 예정임.

진행 상황 업데이트 [2024-01-18]

     * 최근 한 주 동안 추론 성능 최적화에 집중함.
     * torch.compile 통합, kv-캐싱 추가, 일부 레이어 조정을 통해 소비자용 4090에서 실시간보다 12배 빠른 속도로 작업 중임.
     * 단일 문장에서 여러 언어를 혼합하는 기능을 추가함.
     * 음성 복제를 쉽게 테스트할 수 있는 방법도 추가함.

진행 상황 업데이트 [2024-01-10]

     * 더 빠르면서도 고품질의 음성을 생성하는 새로운 SD S2A 모델을 배포함.
     * 참조 오디오 파일을 기반으로 한 음성 복제 예제도 추가함.

진행 상황 업데이트 [2023-12-10]

     * 영어와 폴란드어를 지원하는 새로운 모델 3개를 추가함.
     * 새로운 샘플 음성을 제공하며, Colab에서 직접 시도해볼 수 있음.

다운로드

     * Google Colab 링크를 시작점으로 사용하거나 제공된 노트북을 로컬에서 실행할 것을 권장함.
     * 수동 다운로드나 모델을 처음부터 훈련하고 싶다면, HuggingFace에서 WhisperSpeech 사전 훈련 모델과 변환된 데이터셋을 이용할 수 있음.

로드맵

     * 더 큰 감정적인 음성 데이터셋 수집
     * 감정과 억양에 따라 생성을 조절하는 방법 찾기
     * 다양한 언어로 자유롭게 사용 가능한 음성을 수집하기 위한 커뮤니티 노력 창출
     * 최종 다국어 모델 훈련

아키텍처

     * AudioLM, SPEAR TTS, MusicGen과 유사한 일반적인 아키텍처를 가짐.
     * 강력한 오픈 소스 모델을 기반으로 구축: 의미 토큰 생성과 전사를 위한 OpenAI의 Whisper, 음향 모델링을 위한 Meta의 EnCodec, 고품질 보코더로서 Charactr Inc의 Vocos.

감사의 말

     * 이 작업은 Collabora, LAION, Jülich Supercomputing Centre의 후원과 개인 기여자들의 도움으로 가능함.

컨설팅

     * 오픈 소스 및 독점 AI 프로젝트에 대한 도움을 제공할 수 있음.

인용

     * 다양한 뛰어난 오픈 소스 프로젝트와 연구 논문에 의존함.

GN⁺의 의견

     * WhisperSpeech는 음성 합성 분야에서 혁신적인 오픈 소스 프로젝트로, 다양한 언어를 지원하며 상업적 용도로 안전하게 사용할 수 있는 강력한 텍스트-투-스피치 모델을 제공함.
     * 최신 기술을 활용하여 실시간보다 훨씬 빠른 성능을 달성하고, 음성 복제와 같은 고급 기능을 쉽게 테스트할 수 있는 접근성을 갖추고 있음.
     * 이 프로젝트는 커뮤니티 기반으로 발전하고 있으며, 다양한 언어로의 확장과 감정적인 요소를 포함한 음성 생성을 목표로 하고 있어, 음성 기술의 미래에 중요한 역할을 할 것으로 기대됨.

        Hacker News 의견

     * Whisper 다국어 ASR 모델 프로젝트
          + Whisper 다국어 ASR 모델은 방대한 데이터로 훈련되어 음성의 의미 내용을 잘 나타내는 인코더 출력을 가짐.
          + 이 인코더는 SPEAR-TTS/VALL-E 등의 모델 아키텍처에서 의미 인코더의 오픈소스 대체품으로 사용 가능.
          + 예측된 음향 토큰은 Vocos 보코더로 업샘플링/노이즈 제거/향상됨.
          + 현재 주요 병목 현상은 적합한 데이터셋을 확보하고 정제하는 데 필요한 인력 부족.
     * WhisperSpeech 개발자의 의견
          + 모델 개선을 위해 몇 달간 열심히 작업했으나 여전히 개선할 여지가 많음.
          + Collabora의 후원으로 진정한 오픈소스 프로젝트로, 개선이나 통합을 원하는 이들에게 도움을 제공하고자 함.
          + 비즈니스 용도로 사용하고자 하는 경우 엔지니어링 지원을 구매할 수 있음.
     * 중국어 음성 합성에 대한 관심
          + 중국어 음성 합성, 특히 억양과 감정 표현에 대한 성능에 관심이 있음.
          + EmotiVoice가 지금까지 본 최고 품질의 오픈소스 모델로, CLI 래퍼를 만들어 플래시카드용 오디오 생성에 사용함.
          + EmotiVoice를 사용하여 GPU로 자신의 목소리를 복제할 수 있지만 아직 테스트하지 않음.
     * Mycroft의 Mimic 3에 대한 언급
          + Mycroft의 Mimic 3는 최신 기술을 사용하지 않지만 여전히 인상적이며 라즈베리 파이에서 실시간으로 음성을 생성할 수 있을 만큼 작음.
          + 목소리 중 일부는 다른 것보다 나으며, WhisperSpeech의 예시와 동등한 수준임.
     * 국제 음성 기호(IPA) 기반 모델에 대한 질문
          + IPA 기반의 모델 개발/진행 상황에 대한 질문.
          + 이 방법은 다른 억양으로 목소리를 바꾸거나 다국어를 지원하는 데 유용할 수 있음.
          + MBROLA 음성과 같은 모델에 대해 한 언어의 음소를 다른 언어의 음소로 매핑하는 것으로 제한적으로 수행 가능.
          + IPA 접근 방식은 음성 품질과 음색의 변화를 더 잘 학습할 수 있게 할 수 있음.
     * Piper를 사용한 맞춤형 목소리 훈련에 대한 관찰
          + Piper를 사용하여 맞춤형 목소리를 훈련하는 비디오를 보고, 데이터셋에 필요한 메타데이터가 소스 오디오 파일의 텍스트에 대한 것임을 알게 됨.
          + Collabora의 훈련 방법은 이 과정을 자동화하고 훈련을 위해 오디오 파일만 필요로 함.
     * 폴란드어 샘플에 대한 평가
          + 폴란드어 샘플이 매우 좋으며, 오디오북 녹음처럼 들림.
     * 목소리 조절 가능성에 대한 질문
          + TTS를 채팅 시스템에 적용하는 데 있어 목소리의 조절 가능성에 대한 관심.
          + 각 사용자마다 고유한 목소리를 가질 수 있도록 가능한 많은 다른 목소리가 필요함.
     * 윈스턴 처칠의 낮은 품질 클립으로 훈련된 데모에 대한 의문
          + 낮은 품질의 오디오 클립으로 훈련된 데모에 대해 '쓰레기 입력, 쓰레기 출력'이라는 의문 제기.
     * TTS에 대한 긍정적인 평가
          + 지금까지 들어본 TTS 중 최고로, 인간처럼 목소리가 변조됨.
"
"https://news.hada.io/topic?id=13004","스크래치부터 시작하는 LoRA: LLM 파인튜닝을 위한 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   스크래치부터 시작하는 LoRA: LLM 파인튜닝을 위한 구현

LoRA 기술로 LLM 효율적 파인튜닝하기

     * LoRA(Low-Rank Adaptation)는 LLM(Large Language Models)을 더 효율적으로 파인튜닝하는 기술임.
     * 전체 신경망 파라미터를 조정하는 대신, LoRA는 소수의 저랭크 행렬만 업데이트함.

코드 예제 따라하기

     * 기사에 나온 모든 코드는 동반된 Studio에서 찾을 수 있음.
     * ""Run""을 클릭하여 코드 환경의 전체 복사본을 얻고 코드 파일을 실행할 준비가 됨.

LoRA 이해하기

     * 사전 훈련된 LLM은 다양한 작업에서 범용성으로 인해 기반 모델로 불림.
     * 특정 데이터셋이나 작업에 맞게 사전 훈련된 LLM을 조정하는 것은 파인튜닝을 통해 이루어짐.
     * LoRA는 훈련 중 레이어의 가중치 변경을 저랭크 형식으로 근사화하여 더 효율적인 대안을 제공함.

LoRA 스크래치부터 코딩하기

     * LoRA 레이어를 PyTorch에서 다음과 같이 구현할 수 있음.

class LoRALayer(torch.nn.Module):
  def __init__(self, in_dim, out_dim, rank, alpha):
    super().__init__()
    self.A = torch.nn.Parameter(...)
    self.B = torch.nn.Parameter(...)
    self.alpha = alpha

  def forward(self, x):
    return self.alpha * (x @ self.A @ self.B)

     * LoRA는 신경망의 선형(피드포워드) 레이어에 주로 적용됨.

LoRA로 파인튜닝하기 -- 실습 예제

     * LoRA는 GPT나 이미지 생성 모델뿐만 아니라 다양한 유형의 신경망에 적용 가능함.
     * 작은 BERT 모델을 텍스트 분류 작업에 적용하는 실습 예제를 제공함.

전통적 파인튜닝과 비교

     * LoRA 기본 설정으로 89.44%의 테스트 정확도를 달성함.
     * 전통적 파인튜닝과 비교했을 때, LoRA는 더 적은 파라미터로 더 나은 성능을 보임.

LoRA 설정 최적화

     * LoRA의 하이퍼파라미터 설정을 조정하여 성능을 개선할 수 있음.
     * 다양한 하이퍼파라미터 조합을 실험하여 최적의 설정을 찾을 수 있음.

결론

     * LoRA를 스크래치부터 코딩하며 배웠고, DistilBERT 모델을 분류 작업에 파인튜닝하여 LoRA가 모델의 마지막 레이어만 파인튜닝하는 것보다 더 나은 성능을 보임을 확인함.

GN⁺의 의견

     * LoRA는 대규모 언어 모델을 효율적으로 파인튜닝하는 데 있어 중요한 기술로, 모델의 크기가 커짐에 따라 계산 비용을 절감할 수 있는 잠재력을 가짐.
     * 실제 예제를 통해 LoRA의 적용 방법을 이해하고, 실제 문제에 적용할 수 있는 능력을 키울 수 있음.
     * LoRA의 하이퍼파라미터를 조정하여 성능을 최적화하는 과정은 머신러닝 모델의 튜닝에 있어 일반적인 접근 방식을 보여줌.

        Hacker News 의견

     * Maxime Labonne의 LLMs 101을 통해 기술을 추적하고 있음. 여전히 컴퓨터 과학 분야에서 ""어떻게 하이퍼파라미터가 결과에 영향을 미치는지 정확히 모르니 다양한 값을 시도해보고 가장 좋은 것을 찾아라""라는 말을 하는 것이 낯설음.
     * LoRA와 LoRa는 다르며, 같은 약어를 사용하여 혼동되는 것에 대한 불만이 있음.
     * 언제 파인튜닝을 해야 하는지 여전히 명확하지 않음. 과거에는 모델 행동 변경을 위한 것으로 생각했지만, 최근에는 일부 회사들이 지식 추가를 위해 파인튜닝을 사용하는 것으로 보임.
     * 파인튜닝의 주요 사용 사례에 대한 질문이 있음.
     * LoRA에 대한 좋은 기사임. 해당 분야 전문가는 아니지만, 원래 논문에서 LoRA가 마지막 밀집층에만 적용되었다고 이해함. QLoRA에서 이 방법을 사용하고 흥미로운 효과가 있는 것 같다는 점에 주목할 필요가 있음.
     * 왜 LoRA가 작동하는지 확실히 이해하지 못함. 마지막 층에 적용하는 것은 이해가 가지만, 각 선형 층에 반복적으로 적용하는 논리를 이해하지 못함. 직관을 설명해 줄 수 있는 사람이 있는지 질문함.
     * 무선 LoRa 프로토콜이 오픈소스였으면 좋겠다는 바람을 표함.
     * 소프트웨어 정의 라디오에 관한 내용일 것으로 기대했지만, 여전히 흥미로운 내용임.
     * LoRA 순전파를 처음부터 구현하는 연습을 추가함. LoRA의 아이디어는 아름답고 구현은 꽤 간단함.
     * 파인튜닝을 위한 가장 인기 있는 라이브러리에 대한 질문이 있음.
     * 처음부터 시작하는 것보다는 Axolotl의 설정 기반 접근 방식을 선호함. Axolotl은 mistral, llama-2를 지원하며 최신 기술들을 많이 지원함.
     * 데이터 중심의 파인튜닝에 집중하며, LoRA를 처음부터 배우지 않고 파인튜닝 데이터를 수집하고 큐레이션하는 데 집중함.
"
"https://news.hada.io/topic?id=12985","Show GN: Crescendo: 스터디그룹 모집과 활동을 위한 플랫폼 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: Crescendo: 스터디그룹 모집과 활동을 위한 플랫폼 서비스

   졸업 후, 소중한 학교 동료들과 만든 사이드 프로젝트입니다.

   예전에 스터디를 진행할 때에는 스터디원 모두가 지정된 시간 내에 무언가를 완료해야 하는 ""과제"" 시스템이 있었는데요,

   이것이 카카오톡이나 디스코드 등에서 이루어지는 것보다
   어여쁜 웹 페이지에서 진행되고 관리되면 좋다고 생각했습니다.

   그래서, 간단하게 만들어봤습니다!
   스터디원을 모집할 수 있고, 과제를 등록하고 진행할 수 있습니다.

   가능하다면 여러분께 보여드리고 개선할 점을 찾고 싶어요.
   감사합니다!
"
"https://news.hada.io/topic?id=12946","Privy - 개인보호 중시 코딩 어시스턴트 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Privy - 개인보호 중시 코딩 어시스턴트

     * Mistral/CodeLlama LLM을 이용해서 Ollama/llamafile/llama.cpp 등으로 로컬에서 실행
     * LLM을 이용하여 AI 채팅, 코드 설명하기, 테스트 생성하기, 버그 찾기, 에러 분석하기 등의 기능을 제공
     * Visual Studio Code 에서 확장 설치 가능
"
"https://news.hada.io/topic?id=12967","나이트쉐이드: AI 아트 생성기에 대항하는 예술가들을 위한 공격적 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                나이트쉐이드: AI 아트 생성기에 대항하는 예술가들을 위한 공격적 도구

나이트쉐이드란 무엇인가

     * 생성 AI 모델과 트레이너들은 온라인 콘텐츠를 모델 훈련에 사용할 수 있는 능력을 보여줌.
     * 콘텐츠 소유자와 창작자들은 자신의 의지와 상관없이 그들의 콘텐츠가 생성 AI 모델에 훈련 데이터로 사용되는 것을 막을 수 있는 도구가 거의 없음.
     * 나이트쉐이드는 이미지를 모델 훈련에 부적합한 데이터 샘플로 변환하는 도구로, 저작권을 무시하고 데이터를 무단으로 스크레이핑하는 모델 트레이너들을 억제하는 데 도움을 줌.

나이트쉐이드의 작동 방식과 한계

     * 나이트쉐이드는 이미지를 '독' 샘플로 변환하여, 동의 없이 훈련하는 모델들이 예상치 못한 행동을 배우게 함.
     * 이 도구는 모델을 파괴하려는 것이 아니라, 라이선스되지 않은 데이터로 훈련하는 비용을 증가시켜 창작자로부터 이미지를 라이선스하는 것이 실현 가능한 대안이 되도록 함.
     * 나이트쉐이드는 스타일 모방 방어를 위한 글레이즈와 유사하게 작동하지만, 글레이즈가 방어적 도구인 반면 나이트쉐이드는 공격적 도구로 설계되어 AI 이미지 모델 내의 특징 표현을 왜곡함.

나이트쉐이드 대 글레이즈

     * 글레이즈는 개별 예술가들이 스타일 모방 공격으로부터 자신을 보호하기 위해 사용하는 방어적 도구임.
     * 나이트쉐이드는 예술가들이 그룹으로 사용하여 동의 없이 이미지를 스크레이핑하는 모델을 방해하는 공격적 도구임.
     * 예술가들은 자신의 작품을 온라인에 게시할 때 글레이즈와 나이트쉐이드를 모두 적용하는 것이 이상적임.

위험성과 한계

     * 나이트쉐이드에 의한 변경 사항은 평평한 색상과 부드러운 배경을 가진 예술 작품에서 더 눈에 띔.
     * 보안 공격이나 방어와 마찬가지로 나이트쉐이드는 장기간 미래에 대한 증거가 될 가능성이 낮음.
     * 나이트쉐이드는 네트워크 없이 실행되도록 설계되어 데이터나 예술 작품이 우리나 다른 이에게 전송되지 않음.

나이트쉐이드와 웹글레이즈

     * 나이트쉐이드 v1.0은 독립적인 도구로 설계되었으며, 글레이즈와 같은 모방 방어 기능을 제공하지 않음.
     * 나이트쉐이드와 글레이즈가 함께 어떻게 작동하는지 테스트 중이며, 준비가 되면 웹글레이즈에 나이트쉐이드를 추가 기능으로 출시할 예정임.

GN⁺의 의견

     * 나이트쉐이드는 창작자들이 자신의 저작권을 보호하고, 무단으로 이미지를 사용하는 AI 모델 트레이너들에게 경고를 보낼 수 있는 혁신적인 도구임.
     * 이 도구는 창작물의 무단 사용을 억제하고, 저작권자와의 라이선스 계약을 장려함으로써 디지털 예술 생태계에 긍정적인 영향을 미칠 수 있음.
     * 나이트쉐이드와 글레이즈의 결합은 예술가들이 자신의 작품을 온라인에서 보다 안전하게 공유할 수 있는 새로운 방법을 제공함.

        Hacker News 의견

     * 논문 링크: arXiv:2310.13828
          + 이 논문은 많은 예술가들이 받아들이기 어려울 수준의 아티팩트를 도입하는 것으로 보임.
     * 이 기술은
          + a) 지난 세대의 훈련 프로세스에서는 겨우 작동하며,
          + b) 최신 훈련 프로세스(GPT-4V, LLaVA, BLIP2 라벨링 등)에서는 전혀 작동하지 않음.
          + c) 효과적이고 인기를 얻게 된다 해도 쉽게 대처할 수 있을 것으로 예상됨.
          + 저자들의 이전 작업인 Glaze도 효과적이지 않은 것으로 보이며, 실제보다 과대평가된 결과일 수 있음.
     * 이러한 도구들이 시장에서 성공할 가능성은 없으며, 인간의 인식에 영향을 주지 않고도 즉시 우회할 수 있는 방법이 있음.
          + 예술가들이나 다른 사람들이 인간의 결과물을 훈련에 사용하는 것을 막으려면 법적 조치를 통해야 함.
          + 이것도 완벽한 해결책은 아니며, 오히려 분산 훈련 네트워크 개발을 촉진할 수 있음.
     * 이것은 무의미한 ""무기 경쟁"" 또는 ""고양이와 쥐의 게임""으로 보임.
          + 예술가들의 의견을 고려하지 않는 사람들은 이미지 후처리를 통해 Nightshade 알고리즘의 섬세한 변경을 파괴할 수 있음.
          + 미래에는 법원이 사회적 압력으로 인해 예술가들의 편에 서게 될 것이며, 예술가들은 자신의 스타일과 ""너무 유사한"" 생성 이미지에 도전할 수 있을 것임.
          + 아니면 예술가들은 이미지 자체의 수익 창출을 포기하고 물리적인 작품 창작에만 집중할 수도 있음.
     * 안 좋은/일관성 없는 이미지로 Stable Diffusion XL을 미세 조정하는 실험을 통해, 이러한 이미지를 부정적 프롬프트로 사용하면 모델이 더 나은 이미지를 출력할 수 있음을 보여줌.
          + 이러한 데이터셋을 만드는 것이 역설적으로 생성 AI 예술 모델을 개선하는 데 도움이 될 수 있음.
     * 저작권/지적 재산권/특허 사용에 대한 점진적인 수수료 부과를 원함.
          + 예를 들어 수익에 연동된 비율로 라이선스 수수료 적용을 원함.
          + 개인이 소유한 경우 사망 후 0년, 기업이 소유한 경우 최대 20-30년의 저작권 기간을 원함.
          + 사용 미신고/수수료 미납에 대한 기업에 대한 벌금을 매우 높게 설정하여 절도를 방지하고자 함.
     * 예술가들이 다른 예술가의 작품을 보며 다양한 스타일을 배우는 것과 AI가 그들의 작품에서 스타일을 배우는 것을 방어하는 것 사이의 모순을 지적함.
     * 이는 '정보의 정확성'에 대한 개념을 약화시키며, 끊임없는 공격과 방어의 게임을 인정함.
     * 곧 많은 사람들이 고품질의 예술 작품을 손쉽게 만들 수 있게 될 것이며, 이는 매우 흥미로운 전망임.
"
"https://news.hada.io/topic?id=12932","HN에 묻다: 9살 아들이 게임을 만들고 싶어하는데, 저는 막막합니다. 어떻게 해야 할까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN에 묻다: 9살 아들이 게임을 만들고 싶어하는데, 저는 막막합니다. 어떻게 해야 할까요?

아들과 함께하는 게임 개발 프로젝트

     * 아들이 최근 컴퓨터에 관심을 보이기 시작하여 종이에 게임을 설계함.
     * 아들이 3D 게임을 만들고 싶어하며, 아버지인 글쓴이에게 도움을 요청함.
     * 글쓴이는 개발 경험이 있지만 게임 개발 경험은 없으며, 90년대에 3D 수학 기초를 다룬 경험이 있음.

게임 개발 도구 및 프로젝트 관리

     * 글쓴이는 아들과의 프로젝트를 통해 소프트웨어 설계 및 개발에 대한 관심을 키울 수 있는 좋은 기회로 보고 있음.
     * Unity와 같은 개발 키트 사용을 고려 중임.
     * 아들이 성취감을 느끼고 자신의 비전에 가까운 결과물을 개발할 수 있도록 프로젝트 범위를 적절히 관리하는 방법에 대한 조언을 구함.

GN⁺의 의견

     * 이 글은 부모와 자녀가 함께 기술적인 프로젝트를 수행하며 관계를 강화하고, 아이의 창의력과 기술적 관심을 키울 수 있는 방법에 대한 사례를 제시함.
     * Unity와 같은 사용자 친화적인 게임 개발 플랫폼은 비전문가도 쉽게 접근할 수 있어, 아이들이 게임 개발에 흥미를 가질 수 있는 좋은 출발점이 될 수 있음.
     * 프로젝트를 '포함된' 상태로 유지하는 것은 아이가 성취감을 느끼고 지속적인 관심을 유지할 수 있도록 하는 중요한 요소임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 아이가 실제로 코딩을 하고 싶어하는 것이 아니라, 게임을 만들고 싶어함.
          + 창의적인 부분을 강조하고, 종이 위에서 작업하는 것을 장려함.
          + 아이는 상상력의 속도로 아이디어를 탐색하며 부모와 시간을 보내고 싶어함.
          + 게임에 대해 이야기하며 산책이나 학교로의 드라이브를 즐기는 것이 중요함.
     * 두 번째 댓글 요약:
          + GameMaker를 추천하며, 3D 게임보다는 2D 게임 제작을 권장함.
          + 3D 게임은 혼자서 완성하기 어렵고 복잡성이 증가함.
          + 프로그래밍 중심 접근을 선호한다면 Love2D나 Raylib을 추천함.
          + PICO-8은 전문가용이지만 빠르게 배울 수 있는 장점이 있음.
     * 세 번째 댓글 요약:
          + 아이가 실제로 게임을 플레이하고 싶어할 수 있으며, 부모가 프로그래머로서 도움을 줄 수 있음.
          + 게임 제작이 어렵다는 것을 솔직히 이야기하고, 함께 배우며 문제를 해결할 것을 제안함.
          + Unity나 Godot를 탐색하고, 간단한 게임 제작 비디오를 함께 시청함.
          + 게임 스타일/테마에 맞는 자산을 찾아서 게임 메커닉에 동력을 제공함.
     * 네 번째 댓글 요약:
          + Nintendo Game Builder Garage를 통해 게임 제작을 시작할 수 있음.
          + RPG Maker를 사용하여 게임 스타일에 따라 다른 버전을 선택할 수 있음.
     * 다섯 번째 댓글 요약:
          + 아이가 Scratch, Microbit, Minecraft 모드 제작 등을 통해 프로그래밍을 시작함.
          + Scratch 기본 도전과제로 시작하고, Minecraft 모드 제작을 위한 기본적인 튜토리얼을 추천함.
          + 아이의 게임을 담은 웹사이트를 공유함.
     * 여섯 번째 댓글 요약:
          + Game Maker를 사용하여 게임 제작을 시작함.
          + 아이가 관리하는 프로젝트를 시작하지 말고, 튜토리얼을 통해 가이드 역할을 함.
          + 아이의 관심이 다른 아이디어로 옮겨갈 수 있으므로, 학습과 재미가 목표임.
     * 일곱 번째 댓글 요약:
          + Godot 엔진을 다운로드하고, YouTube 튜토리얼과 공식 문서를 통해 게임 제작을 배움.
          + gdscript 프로그래밍 학습을 위한 무료 코스를 제공함.
     * 여덟 번째 댓글 요약:
          + 아이와 그의 아이디어에 관심을 보이고 참여하는 것이 중요함.
          + 게임의 종류와 디자인 과정에서 가장 관심 있는 부분을 파악함.
          + Make-A-Game 게임을 사용하여 게임 제작을 시작할 수 있음.
          + 아이가 3D를 원한다면 2D로 전환하는 것을 권장하지 않음.
          + Godot나 Unity와 같은 개발 환경은 아이가 조금 더 나이가 들었을 때 추천함.
     * 아홉 번째 댓글 요약:
          + Godot 게임 엔진이 매우 좋으며, Itch.io에서 스크립팅 언어를 가르치는 게임이 있음.
          + 초보자와 전문가 모두를 위한 YouTube 튜토리얼이 많음.
     * 열 번째 댓글 요약:
          + 컴퓨터 게임을 만들고 싶은 것이 아니라면, 게임을 종이나 판, 물리적인 조각들로 ""만들기""를 탐색할 수 있음.
          + ""최소 실행 가능 제품"" 개념을 배우고, 컴퓨터 프로그래밍 없이도 게임을 시도하고 피드백을 받을 수 있음.
"
"https://news.hada.io/topic?id=12922","올림피아드 수준의 기하학 인공지능 시스템 AlphaGeometry","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  올림피아드 수준의 기하학 인공지능 시스템 AlphaGeometry

AlphaGeometry: 올림피아드 수준의 기하학 AI 시스템

     * AlphaGeometry는 기하학 문제를 해결하는데 있어 최신 접근법을 뛰어넘는 AI 시스템으로, 수학적 추론 분야에서 AI의 발전을 보여줌.
     * 국제수학올림피아드는 세계 최고의 고등학생 수학자들이 경쟁하는 현대의 경기장으로, AI 시스템의 수학 및 추론 능력을 시험하는 장으로 부상함.
     * AlphaGeometry는 인간 올림피아드 금메달리스트에 가까운 수준으로 복잡한 기하학 문제를 해결하는 AI 시스템으로, 30개의 올림피아드 기하학 문제 중 25개를 표준 시간 내에 해결함.
     * 이전 최신 시스템은 10개의 문제를 해결했고, 평균 인간 금메달리스트는 25.9개의 문제를 해결함.
     * AlphaGeometry는 신경 언어 모델의 예측력과 규칙 기반의 추론 엔진을 결합하여 문제 해결을 위한 추론을 수행함.
     * 1억 개의 독특한 예제를 생성하는 방법을 개발하여 인간의 시연 없이도 AlphaGeometry를 훈련시킬 수 있음.

AlphaGeometry의 신경-기호적 접근 방식

     * AlphaGeometry는 신경 언어 모델과 기호적 추론 엔진으로 구성된 신경-기호적 시스템으로, 복잡한 기하학 정리에 대한 증명을 찾는 데 협력함.
     * 언어 모델은 일반적인 패턴과 데이터 관계를 신속하게 예측하지만 엄밀한 추론이나 결정 설명 능력은 부족함.
     * 기호적 추론 엔진은 공식 논리에 기반하고 명확한 규칙을 사용하여 결론에 도달하며, 합리적이고 설명 가능하지만 단독으로 크고 복잡한 문제를 다룰 때는 ""느리고"" 유연하지 못함.
     * AlphaGeometry의 언어 모델은 기하학 문제 해결을 위한 유용한 새로운 구성 요소를 예측하여 기호적 엔진이 해결책에 접근하도록 안내함.

1억 개의 합성 데이터 예제 생성

     * 기하학은 공간, 거리, 형태, 상대적 위치에 대한 이해를 바탕으로 하며, 예술, 건축, 공학 등 여러 분야에서 중요함.
     * AlphaGeometry는 대규모로 지식 구축 과정을 모방하여 처음부터 훈련할 수 있도록 합성 데이터 생성 접근 방식을 사용함.
     * 시스템은 10억 개의 무작위 기하학 다이어그램을 생성하고 각 다이어그램에서 점과 선 사이의 모든 관계를 철저하게 파생함.
     * 이 방대한 데이터 풀은 유사한 예제를 제외하고 최종적으로 1억 개의 독특한 예제로 구성된 훈련 데이터셋을 생성함.

AI로 수학적 추론 선도

     * AlphaGeometry에 의해 제공된 모든 올림피아드 문제의 해결책은 컴퓨터로 확인 및 검증됨.
     * 이전 AI 방법과 올림피아드에서의 인간 성능과 결과를 비교함.
     * AlphaGeometry는 올림피아드의 기하학 문제에만 적용 가능하지만, 그 자체로 세계 최초로 IMO의 동메달 기준을 통과하는 AI 모델임.
     * 이 시스템은 Google DeepMind와 Google Research의 AI 수학적 추론 선도 작업을 기반으로 하며, 순수 수학의 아름다움 탐구부터 언어 모델을 사용한 수학 및 과학 문제 해결에 이르기까지 다양한 분야에서 활용됨.

   GN⁺의 의견:
     * AlphaGeometry의 성과는 기하학 문제 해결에 AI를 적용하는 새로운 지평을 열었다는 점에서 중요함.
     * 이 시스템은 복잡한 수학적 문제를 해결할 수 있는 AI의 능력을 보여주며, 이는 미래의 일반 AI 시스템 개발에 필수적인 기능임.
     * AlphaGeometry가 오픈 소스로 공개됨으로써, 수학 및 과학 연구에서 AI의 활용 가능성이 크게 확장될 것으로 기대됨.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + 이 연구는 DeepMind의 이전 AI 수학 논문보다 훨씬 실제적인 작업으로 보임. AI가 기하학 정리를 학습하여 증명을 찾는 데 사용되며, 기하학적 구조를 무작위로 추가하여 증명을 시도함.
          + 이 모델은 일반화가 어려울 수 있지만, 신경 기호적 접근 방식이 매우 유망함. 시스템 1(ML 도구)과 시스템 2(논리적 증명 생성)를 연결하여 자체 감독 학습을 가능하게 함.
          + 언어 모델이 얼마나 자주 유용한 구성을 생성하는지에 대한 궁금증. 논문에서는 여러 대안적 보조 구성을 제안하고 이를 병렬 처리하여 속도를 높임.
          + 저자들이 코드와 가중치를 공개한 것에 대한 감사함. 이는 다른 연구자들이 연구를 이어갈 수 있는 기반이 됨.
          + 사용된 트랜스포머 모델이 작다는 점이 흥미로움. 논문에서는 트랜스포머의 구체적인 사양을 설명함.
          + Evan Chen의 인용문을 통해 AI가 생성한 증명이 인간이 읽을 수 있는 형태임을 확인함. Evan Chen은 유명한 올림피아드 수학 커뮤니티의 일원임.
          + 이전 최고 기술이 이러한 문제 중 10개를 해결할 수 있었다는 사실에 놀람. 실용적인 평면 기하학 문제 해결 알고리즘이 존재함.
          + ChatGPT가 IMO 스타일 문제를 해결하지 못했지만, 이 연구가 진짜라면 큰 발전임. 기하학적 증명을 찾는 것은 지능의 표현이며, AGI에 가까워진 것으로 보임.
          + 증명을 검증하는 데 사용된 연역적 시스템에 대한 질문. 올림피아드 기하학의 관례가 수학의 다른 분야와 다르며, 이 논리를 모순 없이 형식화하는 것이 명확하지 않음.

   해당 요약은 해커뉴스 댓글을 바탕으로 한 것으로, 각 댓글의 주요 내용을 간결하게 정리한 것입니다. AI와 기하학 증명에 대한 연구의 진전, 모델의 특성, 그리고 이러한 연구가 인공 일반 지능(AGI)에 얼마나 가까워졌는지에 대한 토론이 포함되어 있습니다.
"
"https://news.hada.io/topic?id=12975","텍스트아트.sh","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                텍스트아트.sh

거의 전체 내용을 모두 한국어로 번역해서 정리

     * 이 글은 다양한 단어들을 나열한 것으로 보임.
     * 단어들은 주로 명사이며, 일상생활에서 흔히 볼 수 있는 사물, 동물, 활동 등을 포함함.
     * 각 단어는 특정 주제나 범주에 속하지 않고 무작위로 나열된 것으로 보임.

GN⁺의 의견

     * 이 글은 특정 주제나 맥락 없이 다양한 단어들을 나열한 것으로, 특별한 정보를 제공하거나 특정 주제에 대해 설명하는 내용은 아님.
     * 이러한 단어 목록은 언어 학습자에게 어휘 연습 자료로 활용될 수 있음.
     * 단어들이 무작위로 나열되어 있어서, 창의적인 글쓰기나 두뇌 훈련에 도전하는 활동에 사용될 수도 있음.

        Hacker News 의견

     * 컴퓨터로 생성된 이미지로 추정되며, 'goose' 항목 아래 세 번째 이미지에 Shutterstock 워터마크가 있음을 지적함.

     ""해당 이미지는 컴퓨터로 생성된 것으로 보이며, 'goose' 카테고리 아래 세 번째 이미지에 Shutterstock 워터마크가 있음이 발견됨.""
     * 더 세련되고 인간이 만든 ASCII 아트 버전을 소개함.

     ""더 세련되고 인간이 직접 만든 ASCII 아트 버전을 제공하는 웹사이트 링크 공유.""
     * ASCII 아트를 서버의 motd에 추가하기 위해 사이트를 찾았고, 사이트에 대한 배경이나 커뮤니티 정보를 찾고 싶어함. 사이트에는 많은 카테고리와 아름다운 작품들이 있으며, 인터넷 초기의 느낌이 나지만 도메인은 2018년에 등록됨. 유지 관리자에게 세상에 밝음을 더해준 것에 대한 감사의 말을 전함.

     ""ASCII 아트를 찾다가 발견한 사이트에 대한 정보를 찾고 있으며, 사이트는 많은 카테고리와 아름다운 작품들을 가지고 있음. 도메인은 2018년에 등록되었으나, 이전에 만들어진 것일 수도 있음. 유지 관리자에게 감사의 인사를 전함.""
     * 사용자들이 기대하는 것은 ASCII 아트이지만, 사이트에서는 유니코드 문자를 사용하여 기술적으로 ASCII 아트가 아니라는 면책 조항을 반환함. 웹사이트의 이름을 ""unicodeart.sh""로 변경하는 것이 더 적절할 수 있음을 제안함.

     ""사용자들이 ASCII 아트를 기대하지만, 사이트는 유니코드 문자를 사용하여 ASCII 아트가 아니라는 면책 조항을 제시함. 웹사이트의 이름을 'unicodeart.sh'로 변경하는 것이 적절할 것으로 제안함.""
     * 2000년대에는 telnet BBS가 인기가 있었고, 80x24 화면에 많은 것을 담을 수 있었음. 하지만 점차 사라지고 있으며, 영어권에서는 얼마나 남아 있는지 확실하지 않지만, 중국어권에서는 ptt.cc가 여전히 활성화되어 있음. telnet 기반 포럼을 사용할 때의 ASCIIArt/ANSIArt 경험을 공유함.

     ""2000년대에는 telnet BBS가 인기가 있었으며, 80x24 화면에 많은 내용을 담을 수 있었음. 현재는 점차 사라지고 있으나, 중국어권에서는 ptt.cc가 여전히 활성화되어 있음. telnet 기반 포럼에서의 ASCIIArt/ANSIArt 경험을 공유함.""
     * ASCII 아트의 제작 방법에 대한 감탄과 궁금증을 표현함.

     ""ASCII 아트가 어떻게 만들어졌는지에 대해 놀라움과 궁금증을 표현함.""
     * 이미지를 텍스트로 변환하는 기능의 쓰레기를 정리할 필요가 있음을 지적함.

     ""이미지를 텍스트로 변환하는 기능에서 발생하는 쓰레기를 정리할 필요가 있음을 지적함.""
     * 현재 사이트의 픽셀은 문자의 형태를 활용하지 않고 단색으로 채워진 사각형(또는 이모지)으로 구성되어 있어, 과거 ASCII 아트나 aalib의 출력에 비해 해상도가 제한적임을 지적함. 또한 Dickbutt 이미지가 없는 것은 Dickbutt에 대한 범죄라고 비판함.

     ""현재 사이트의 픽셀은 문자의 형태를 활용하지 않고 단색으로 채워진 사각형으로 구성되어 있어 해상도가 제한적임을 지적함. Dickbutt 이미지가 없는 것에 대한 비판을 표현함.""
"
"https://news.hada.io/topic?id=12972","NASA, 화성에서 미니 헬리콥터와의 연락 재개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       NASA, 화성에서 미니 헬리콥터와의 연락 재개

NASA, 화성에서 미니 헬리콥터와 연락 재개

     * NASA는 화성에 있는 작은 헬리콥터 Ingenuity와 연락이 끊겼다가 다시 재개됨을 발표함.
     * Ingenuity는 2021년 Perseverance 로버와 함께 화성에 도착하여 다른 행성에서 자율 비행을 한 최초의 동력 비행체임.
     * 헬리콥터로부터의 데이터는 Perseverance를 통해 지구로 전송되나, 목요일에 있었던 72번째 비행 테스트 중 갑작스럽게 통신이 끊김.

통신 중단의 원인 조사 중

     * NASA의 제트 추진 연구소(JPL)는 Perseverance가 Ingenuity의 신호를 듣기 위한 장시간 청취 세션을 수행하여 헬리콥터와의 연락을 회복했다고 발표함.
     * JPL은 새로운 데이터를 검토하여 통신 중단의 원인을 이해하려고 노력 중임.
     * 이전 비행에서 예정보다 일찍 착륙한 후 시스템을 점검하기 위해 수직으로 빠르게 상승하는 비행을 시도했으나, 착륙 전에 헬리콥터와 로버 간의 통신이 조기에 종료됨.

Ingenuity의 놀라운 성과와 미래 비행 가능성

     * Ingenuity는 지금까지 30일 동안 5번의 비행을 목표로 했으나, 이를 훨씬 초과하여 총 10마일(17킬로미터) 이상을 비행하고 최대 79피트(24미터)의 고도에 도달함.
     * 화성의 극도로 추운 밤을 견디며 낮 시간에 태양 전지판으로 배터리를 충전하여 따뜻하게 유지하는 놀라운 생존력을 보임.
     * Perseverance와 협력하여 고대 미생물 생명의 가능성 있는 흔적을 찾는 데 도움을 주는 항공 정찰 역할을 수행함.

   GN⁺의 의견:
     * Ingenuity 헬리콥터는 화성에서 자율 비행을 하는 최초의 동력 비행체로서, 그 기술적 성과가 매우 중요함.
     * 통신 중단과 같은 문제에도 불구하고 연락을 재개하고 계속해서 임무를 수행할 수 있는 능력은 우주 탐사 기술의 발전을 보여줌.
     * 이 헬리콥터는 화성에서의 생명체 탐사에 있어 중요한 역할을 하고 있으며, 그 장기적인 생존력과 탐사 능력은 향후 화성 탐사에 큰 영향을 미칠 것으로 예상됨.

        Hacker News 의견

     * 한 소프트웨어 개발자는 자신이 기여한 코드가 화성에서 날아다니는 것을 경력의 하이라이트로 여김. 파이썬 라이브러리의 버그를 수정한 것만으로 GitHub Ingenuity 배지를 받았으며, 이는 재미있는 사실로 소개할 때 사용됨.
     * Jupiter Broadcasting에서는 Linux로 구동되는 장치에 대한 많은 인터뷰가 있었음. JPL이 화성에 보낼 새로운 Linux 장치들 중 첫 번째일 수 있음. 공간 환경에 강화된 Power CPU와 오래된 버전의 Yocto를 사용했으며, 새 버전에서는 드라이버가 작동하지 않았음. 로버에 문제가 생겼을 때, 헬리콥터의 사용자 공간 커맨드 라인 GNU 유틸리티를 사용하여 로버에서 로그를 디버깅하고 지구로 전송함. 또한, 이로 인해 화성이 윈도우보다 리눅스를 더 많이 사용하는 두 번째 행성이 됨을 트윗을 통해 알림.
     * 이 프로젝트에서 주로 상용 부품을 사용했는지 궁금함. 만약 그렇다면, 미래 임무의 비용에 어떤 영향을 미칠지, 소비자 하드웨어로 더 많은 것을 할 수 있다면 예산을 더 많은 과학 연구에 적용할 수 있을지 의문.
     * NASA가 장비의 작동 기간을 얼마나 예상했는지 궁금함. NASA는 장비의 수명을 과소평가하는 경향이 있으며, ""10주 동안 작동할 것으로 예상했는데 6년이 지났다""와 같은 상황이 발생할 수 있음. 보이저 1호가 가장 극단적인 예로, 5년 임무였지만 거의 50년에 달하는 임무를 수행함.
     * 한 사용자는 이 헬리콥터/드론 프로젝트에 참여한 사람과 함께 체육관에 다님. 매우 멋진 사람이라고 함.
     * 아마도 헬리콥터가 나무에 걸려 있었을 것이라는 농담.
     * NASA를 응원하는 댓글로, 이미 목표를 초과 달성했을 뿐만 아니라 새로운 목표를 위한 유용한 데이터를 더 생성할 수 있음. NASA가 엔지니어링 블로그나 스트림을 운영하여 무엇이 잘못되었고 어떻게 다시 연결했는지에 대한 자세한 정보를 알 수 있는지 궁금함.
     * 새로운 임무에 헬리콥터를 더 많이 사용할지, 아니면 더 큰 기체를 사용하는 것이 훨씬 더 어렵거나 위험할지에 대한 의문. 혹은 헬리콥터가 로버와 장비를 다른 위치로 옮길 수 있는지에 대한 제안.
     * [삭제된 댓글]
"
"https://news.hada.io/topic?id=13002","런치 HN: Diversion (YC S22) – 클라우드 네이티브 Git 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              런치 HN: Diversion (YC S22) – 클라우드 네이티브 Git 대안

     * 새로운 버전 관리 시스템, Diversion 소개
          + Sasha와 Egal은 현대적인 클라우드 기반 버전 관리 시스템인 Diversion을 개발 중임.
          + 첫 사용자는 게임 개발자들로, Diversion의 단순성과 확장성을 좋아함.
          + 빠른 데모는 여기서 확인 가능: 데모 링크
     * Git의 한계와 새로운 VCS의 필요성
          + Git은 소프트웨어 개발을 크게 발전시켰지만, 2005년 당시의 환경(느린 네트워크, 작은 프로젝트, 클라우드 미사용)에 맞춰 설계되어 오늘날 모든 이에게 완벽한 도구는 아님.
          + Git의 가장 큰 단점은 저장소 및 파일 크기, 동시 사용자 수에 대한 제한된 확장성임.
          + Google과 Meta가 자체 버전 관리 시스템을 구축한 이유이며, 게임 개발, 반도체, 금융 서비스 등 대기업들이 여전히 SVN과 Perforce와 같은 레거시 도구를 사용하는 이유임.
     * Git의 복잡성 해결과 현대적 기능의 통합
          + Git의 복잡성으로 인해 발생하는 문제를 해결하고자 함.
          + Git의 뛰어난 브랜칭 및 병합 기능은 현대 소프트웨어 개발 방법론에 크게 기여함.
          + 사용이 쉽고, 빠르며, 확장 가능한 버전 관리 시스템을 만들 수 있는지, Git의 브랜칭 기능을 유지하면서 무엇을 개선할 수 있는지 고민함.
     * Diversion의 특징과 사용자 경험
          + Diversion은 분산 스토리지와 데이터베이스 위에 구축되어 REST API를 통해 접근 가능하며, 서버리스 클라우드 인프라에서 실행됨.
          + 모든 저장소 작업은 API 호출을 통해 이루어짐(커밋, 브랜치, 병합 등).
          + 데스크탑 클라이언트는 작업 중인 모든 내용을 실시간으로 클라우드와 동기화함(커밋 전에도).
          + 사용자는 대화형 CLI, 웹 UI, IDE 플러그인(JetBrains 현재 사용 가능, 더 많은 것이 곧 출시 예정)을 통해 Diversion을 사용할 수 있음.
          + 웹 UI를 통해 데스크탑 클라이언트 설치 없이 기본 작업을 수행할 수 있음.
     * Git과의 호환성 및 오픈 소스 계획
          + Diversion은 Git과 호환되며 기존 Git 저장소와 동기화 가능함(새로운 Diversion 커밋은 Git에 반영되고 그 반대의 경우도 마찬가지).
          + 코드 베이스가 성숙하고 웹사이트에 오픈 소스 저장소 디렉토리를 구현하면 오픈 소스로 출시할 계획임(Diversion의 코드는 Diversion에서 관리됨).
     * 오픈 베타와 무료 사용 가능성
          + Diversion은 오픈 베타 상태이며, 여기서 시도해볼 수 있음: Diversion 웹사이트 (Get Started 클릭).
          + 완전히 자가 서비스이며, 소규모 팀에게는 무료임.
     * 개발 중인 기능과 피드백 요청
          + 버전 관리 시스템을 구축하는 것은 어려운 일이며, Diversion은 아직 갈 길이 멀음.
          + 현재 속도 향상, CI 통합, IDE 및 게임 엔진 플러그인 개발, 기타 사용성 개선에 집중하고 있음.
          + 지금까지의 진행 상황에 대한 의견과 피드백을 듣고 싶어함.

    GN⁺의 의견

     * Diversion은 현대적인 클라우드 기반의 버전 관리 시스템으로, Git의 확장성 문제와 복잡성을 해결하고자 함이 중요함.
     * 실시간 협업, API 기반의 작업 처리, Git과의 호환성 등은 개발자들에게 매력적인 기능으로 다가갈 수 있음.
     * 오픈 베타와 무료 사용 제공은 많은 개발자들이 새로운 도구를 시험해볼 수 있는 좋은 기회를 제공하며, 이는 Diversion의 빠른 성장과 개선에 도움이 될 것임.

        Hacker News 의견

     *

     Cloud-Native Git Alternative
          + 클라우드 네이티브는 구현 세부사항이며, 새로운 버전 관리 시스템(VCS)을 서비스가 아닌 패키지 소프트웨어로 판매할 계획이 아니라면 중요하지 않음.
          + 클라우드 네이티브가 Git 사용자의 일상적인 문제를 어떻게 해결하는지 불분명함.
     *

     The biggest drawback of Git is its limited scalability
          + Git의 확장성 문제를 겪는 사용자 비율에 대한 궁금증.
          + 수백에서 수만 명의 엔지니어를 보유한 회사에서 근무했지만, 개인적으로 Git의 확장성 문제를 겪어본 적 없음.
          + 모노레포(monorepo) 사용이 확장성 문제를 일으킬 수 있으나, 모노레포 자체가 논란의 여지가 있음.
     *

     Diversion is built on top of distributed storage and databases, accessible via REST API, and runs on serverless cloud infrastructure. Every repository operation is an API call (commit, branch, merge etc.).
          + 사용자 입장에서 내부 프로토콜에 대한 관심 부족.
          + CLI나 UI 사용 시 내부 프로토콜이 중요하지 않음.
          + 추상 구문 트리(AST) 기반의 VCS에 대한 호기심.
     *

     most notably in games development, semiconductors and financial services are still using legacy tools like SVN and Perforce
          + Git의 복잡성보다는 대규모 바이너리 자산을 처리하는 데 Git이 적합하지 않다는 점에 초점을 맞출 것.
          + Git이 대규모 파일을 잘 처리하지 못한다는 리누스 토발즈의 인용.
     *

     it was built for a very different world in 2005 (slow networks, much smaller projects, no cloud)
          + 느린 네트워크, 작은 프로젝트, 클라우드가 없던 2005년과는 다른 환경에서 Git이 설계됨.
          + Git은 분산형이므로 클라우드 환경에서도 잘 작동해야 함.
          + 데이터 과학자가 잘못된 Git 명령어로 한 달 치 작업을 파괴한 것은 구성 문제로 보임.
     *

     In our previous startup, a data scientist accidentally destroyed a month’s work of his team by using the wrong Git command
          + Git에 대한 비판보다는 자체 제품에 초점을 맞출 것.
          + Git은 분산형 VCS이며, 백업 없이 중앙 집중식으로 사용하려는 시도가 문제임.
     *

     git is bad we're better
          + 게임 개발자로서 제시된 제안에 대한 흥미 부족.
          + Git LFS를 사용한 현대적인 워크플로우가 원활하게 작동함.
          + 클라우드 네이티브가 특징으로 제시되었으나, 온프레미스 및 자체 호스팅된 프라이빗 클라우드 지원에 대한 세부사항 누락.
          + 파일 잠금 기능에 대한 아티스트의 선호도와 P4 스트림 및 브랜치 사용으로 인한 잠금 사용의 어려움.
     *

     File locking across branches - coming soon!
          + 파일 잠금 기능이 곧 출시될 예정이지만, 제안에 대한 개선 필요성.
     *

     Git cli UX made be not great, but the git datastructure of representing commits, branches, trees and blobs as immutable pointers and merkle trees is a phenomenal invention.
          + Git의 데이터 구조는 놀라운 발명품이지만, 모든 명령어가 REST API를 통해 이루어지는 것에 대한 동의 부족.
          + Git의 강력한 점은 오프라인에서도 부분적인 클론으로 작업하고 온라인 상태가 되면 커밋을 동기화할 수 있다는 것.
     *

     In our previous startup, a data scientist accidentally destroyed a month’s work of his team by using the wrong Git command.
          + Git의 사용성 개선 필요성 인정, 그러나 발생한 문제는 개발 운영 실패로 보임.
          + 비코더들에게 소스 컨트롤의 이점을 소개하면서 고급 기능을 유지할 수 있는 더 쉬운 학습 곡선 필요.
     *

     The world needs a git alternative.
          + Git 대안의 필요성.
          + 여러 명이 매일 동일한 저장소에 커밋할 때 Git의 한계.
          + Git이 리베이스를 더 잘 처리할 수 있다면 소프트웨어 개발 팀의 작업 속도가 20% 향상될 것으로 예상.
     *

     I get that enterprises will buy anything with ""Cloud"" or ""AI"" in the name, but VCS doesn't have anything to do with the cloud.
          + 기업이 ""클라우드""나 ""AI""가 이름에 포함된 모든 것을 구매할 것이라는 인식.
          + 기술보다 문제 해결에 초점을 맞추는 것이 중요함.
          + 사용자 경험이 좋지 않다면 기술적 세부사항은 의미가 없음.
          + 개발 시간을 단축하고 오류를 줄이며 협업을 개선하는 경험을 제공하는 제품에 대한 판매 전략 필요.
"
"https://news.hada.io/topic?id=12973","비밀번호에 사용할 수 없는 단어: select, insert, update, delete, drop","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        비밀번호에 사용할 수 없는 단어: select, insert, update, delete, drop

디지털 아이덴티티 비밀번호 재설정

     * 디지털 아이덴티티를 활성화한 후 비밀번호를 잊어버렸다면 이 페이지를 통해 비밀번호를 재설정할 수 있음.
     * 개인 정보를 아래 양식에 입력해야 하며, 사용자 이름을 알고 있어야 함.
     * 사용자 이름은 이메일 주소와 유사하며, 예를 들어 jn1234@student.uni-lj.si와 같음.
     * 사용자 이름과 비밀번호를 모두 잊어버렸다면 대학교 헬프데스크에 연락해야 함.

개인 정보 입력

     * 디지털 아이덴티티를 데이터베이스에서 찾기 위해 개인 정보가 필요함.
     * 이름, 성, 생년월일, 학생 ID, 소속 학부를 필수로 입력해야 함.
     * 학부 선택은 미술 및 디자인 아카데미, 음악 아카데미, 극장, 라디오, 영화, 텔레비전 아카데미 등 다양한 옵션이 있음.

사용자 이름과 새 비밀번호 설정

     * 사용자 이름은 이메일 주소처럼 보이며, 예를 들어 John Smith의 사용자 이름은 js1234@student.uni-lj.si임.
     * 강력한 비밀번호를 선택하고 기억할 수 있어야 하며, 예측하기 쉬운 비밀번호는 피해야 함.
     * 비밀번호는 최소 10자 이상이어야 하며, 이름을 포함하지 않고 다음 중 3가지 기준을 충족해야 함: 영문 대문자, 영문 소문자, 숫자, 특수문자(-_.+@).
     * 비밀번호에는 script, select, insert, update, delete, drop, --, ', /*, */와 같은 문자 조합이 포함되어서는 안 됨.
     * 오타를 방지하기 위해 비밀번호를 두 번 입력해야 함.

GN⁺의 의견

     * 이 페이지는 디지털 아이덴티티의 비밀번호를 잊어버린 사용자들이 쉽게 비밀번호를 재설정할 수 있도록 도와줌.
     * 강력한 비밀번호 설정 규칙은 사용자의 디지털 정보를 보호하는 데 중요한 역할을 함.
     * 사용자 이름과 비밀번호를 잊어버렸을 때 대학교 헬프데스크에 연락하는 절차는 사용자가 추가적인 도움을 받을 수 있는 경로를 제공함.

        Hacker News 의견

     * 관리자의 요청으로 특정 문자열을 넣었다는 한 개발자의 이야기. 해당 사이트는 비밀번호를 저장하지 않으며, 외부 계정 관리에 대한 인터페이스를 제공함. 레거시 앱에서 특정 문자열을 포함한 비밀번호로 로그인할 수 없는 이상한 검증이 있을 수 있다는 소문이 있지만, 구체적인 예는 알지 못함.
     * 어린 시절 큰 소셜 플랫폼을 해킹한 경험담. 금지된 단어를 단순히 제거하는 방식을 이용해 유효한 HTML 태그를 주입하고, 페이지를 방문하는 사람들을 제어함.
     * 일부 경우에는 이러한 요구사항이 좋은 아이디어라고 생각하는 의견. 많은 사람들이 나쁜 코드와 시스템 아키텍처를 작성하고 있으며, 이를 잡아내고 변화를 강제할 수 있는 충분한 역량, 조직적 권한, 시간을 가진 사람이 부족함. 미국에서는 형편없이 코딩된 웹사이트를 통해 비즈니스를 해야 할 수도 있음. 이 경우, 구현이 흔히 그렇듯이 끔찍할 수 있다고 가정하고, 그에 따른 완화책을 권장하는 것이 더 나을 수 있음.
     * SQL 인젝션을 완전히 방지하기 위한 적절한 저장 프로시저와 기술을 사용하는 대신, 몇 가지 키워드를 제한하고 해커들이 생각하지 못한 무언가를 만들어내지 않기를 바라는 접근 방식에 대한 비판. 2005년도 아니고, 사용자 입력이 SQL과 섞이지 않도록 하는 것은 더 이상 로켓 과학이 아님. 비밀번호를 암호화하지 않고 저장하는 것은 2005년에도 어리석은 일이었음.
     * truncate를 대신 사용하겠다는 댓글.
     * 오래된 시스템에서 유래된 것 같다는 의견. 일부 대학과 은행이 중앙 인증을 위해 오래된 메인프레임 시스템을 사용하고 있으며, 비밀번호를 평문으로 저장하고 8자리, 대문자로만 제한하는 경우가 있음. 시스템을 업그레이드하지 않는 주된 이유는 비용과 복잡성 때문임.
     * 금지된 문자열을 모두 확인하지 않는다는 학생의 경험담.
     * 작업 중에 이러한 요구사항을 만들어야 했다는 한 사람의 이야기. 모든 문자열을 적절히 이스케이프하고, SQL 인젝션 공격을 피하기 위해 파라미터화된 쿼리를 사용해야 하지만, 깊이 있는 방어를 위해 SQL이나 HTML처럼 보이는 코드를 모든 필드에서 거부해야 함.
     * 자신의 비밀번호가 절대 잡히지 않을 것이라는 자신감 있는 댓글.
     * 이러한 요구사항이 지나치게 열성적인 WAF(웹 애플리케이션 방화벽)에서 비롯되었을 수 있다는 낙관적인 추측.
"
"https://news.hada.io/topic?id=12974","은퇴 교사의 연금 중단, 제공업체가 그녀가 사망하지 않았다는 것을 인정 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               은퇴 교사의 연금 중단, 제공업체가 그녀가 사망하지 않았다는 것을 인정 거부

은퇴한 교사의 연금 중단: 제공자가 사망 여부를 믿지 않아

     * 은퇴한 교사인 Eileen McGrath는 연금 제공자로부터 2020년부터 여러 차례 자신의 생존을 증명하라는 요청을 받음.
     * 연금 제공자인 Teachers’ Pensions는 그녀를 잘못된 사망자와 혼동하여 네 번이나 연금 지급을 중단함.
     * McGrath는 크리스마스 기간 동안 소득이 없는 상태가 되었으며, 이 문제에 대해 불만을 제기한 후 1월 2일에야 연금을 받음.

연금 수령자의 생존 확인 절차

     * 연금 수령자를 사망자 명단과 대조하여 부적격 지급을 방지하기 위한 검증 절차의 희생자가 됨.
     * 교육부(DfE)에 따르면, 개인 정보가 다르더라도 사망자 명단의 항목이 연금 수령자와 일치할 수 있음.
     * Capita가 관리하는 시스템은 반증된 연결을 기록하지 않기 때문에, 수령자는 매 12개월마다 자신이 그 사망자가 아님을 확인해야 함.

연금 중단에 대한 경고 부족

     * 연금 수령자에게 보내진 편지는 개인 상황의 변화에 대한 일반 등록 사무소의 업데이트를 제공한다고 언급하지만, 응답하지 않을 경우 연금이 중단될 수 있음을 명시하지 않음.
     * 대변인은 이러한 사실을 언급하지 않는 것이 ""불쾌감을 주지 않기 위함""이라고 말함.
     * McGrath는 연금이 복구되었지만 사과는 없었으며, 연금 수령자가 상황이 변하지 않았다면 연락해야 한다는 것을 분명히 하지 않았다고 지적함.

연금 제공자의 부적절한 절차

     * 연금 컨설턴트인 Steve Webb은 사망자 명단의 부정확한 일치에 대해 연금 제공자가 조사를 거쳐야 하며, 구체적인 경고 없이는 결코 지급을 중단해서는 안 된다고 말함.
     * 연금 제공자는 사망 가능성이 있는 경우 정확성을 교차 확인하기 위해 사용할 수 있는 풍부한 데이터 소스를 활용해야 하며, 생존을 확인한 사람은 다른 회원과 동일하게 취급되어야 함.

GN⁺의 의견

     * 이 기사는 연금 제공자의 시스템 오류와 부적절한 절차로 인해 한 은퇴 교사가 겪은 불편함과 불안을 강조함.
     * 연금 수령자의 생존 확인 절차는 필요하지만, 잘못된 데이터 매칭으로 인한 불편과 연금 중단은 피해야 함.
     * 이 사례는 연금 제공자들에게 그들의 시스템과 절차를 재검토하고 개선할 필요성을 상기시키며, 연금 수령자들에게는 자신의 권리를 지키기 위해 적극적으로 대응해야 할 중요성을 일깨움.

        Hacker News 의견

     *

     Capita가 관리하는 시스템은 거짓으로 확인된 연결을 기록하지 않기 때문에, 수혜자는 사망자와 동일인이 아님을 매 12개월마다 확인해야 할 수도 있다고 DfE는 가디언에게 전했다.
          + Capita가 관리하는 시스템의 문제점으로, 사망자와 다른 사람임이 확인되어도 이를 기록하지 않아 매년 확인 요청을 받는 상황.
     *

     수혜자에게 지급 중단이나 응답 기한에 대한 언급 없이 28일 이내에 응답하지 않으면 지급이 중단될 수 있음을 알리지 않는다고 대변인은 말했다. 이는 ""불쾌감을 주지 않기 위함""이라고 한다.
          + 영국적인 특징으로, 수혜자에게 불쾌감을 주지 않기 위해 중요한 정보를 생략하는 통지 방식.
     *

     인터넷과 앱이 세상을 지배한 후, 이제 할아버지 할머니는 살아있음을 증명하기 위해 앱을 다운로드하고 카메라에 눈을 깜빡이며 얼굴을 기울여야 한다.
          + 기술 발전에 따라 변화하는 삶의 모습과 이에 대한 복잡한 감정을 표현.
     *

     Capita가 관리하는 시스템은 사망자와 다른 사람임을 매 12개월마다 확인해야 하며, 이는 시스템의 버그로 보인다.
          + 시스템의 결함으로 인해 노인들에게 반복적으로 사망 여부를 확인하는 불편함을 지적.
     *

     출생 증명서를 받으려 할 때, 단순히 태어났음을 증명해야 했던 경험을 회상.
          + 출생 증명 과정의 아이러니함을 드러내는 일화.
     *

     스위스에서는 외국인 연금 수령인도 매년 살아있음을 증명해야 한다. 아버지도 수십 년간 살아있음을 증명해야 했다.
          + 다른 나라에 거주하는 수혜자의 생존 확인이 더 어려운 현실을 설명.
     *

     연금 제공자에게 전화하여 ""내 죽음에 대한 보고는 대폭 과장되었다""고 말할 기회.
          + 사망 오류에 대한 재치 있는 대응 제안.
     *

     연금 수혜자를 사망자 명부와 대조하여 부적격 지급을 방지하는 검증 절차에 빠진 경우, 개인 정보가 다르더라도 명부에 등록된 사망자와 연금 수혜자가 일치할 수 있다.
          + 부적절한 연금 지급을 막기 위한 검증 절차의 문제점을 지적.
     *

     이 문제를 해결하기 위해 간단한 수정을 제안할 수 있는 컨설턴트로서, 아직 그것이 무엇인지 말하지 않겠지만 효과가 있을 것이라고 확신한다.
          + 시스템의 결함을 해결할 수 있는 간단한 해결책을 제시할 의향이 있는 컨설턴트의 자신감.
     *

     몬티 파이썬 스케치를 연상시키는 상황.
          + 유명한 코미디 스케치와 비교하여 현재 상황의 아이러니를 표현.
"
"https://news.hada.io/topic?id=12929","나의 아들을 잃다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               나의 아들을 잃다

아들을 잃다

     * 라스 두셋은 2023년 10월 20일, 선천적 질환 치료를 위해 병원에서 시술을 받던 중 7살 난 아들 니콜라스가 심정지를 겪었음을 밝힘.
     * 의사들은 심폐소생술로 니콜라스를 소생시켰지만, 그는 심각한 뇌 손상을 입음.
     * 라스와 그의 아내는 최종 진단을 기다리며 거의 한 달간 병원에서 아들 곁을 지킴.

파괴

     * 라스는 자신이 겪는 상황에 대해 말할 수 없을 정도로 절망적이라고 표현함.
     * 니콜라스는 살아있지만, 높은 정신 기능이 모두 소실되어 자발적인 움직임이 없고, 반사적으로 움직이며 가끔 웃음을 보이기도 함.
     * MRI 결과는 뇌 손상이 광범위하고 심각하여 기적이 아니면 회복 가능성이 없음을 보여줌.

힘든 것이 아니라 끔찍함

     * 라스는 슬픔이 사람들이 예상하는 것과 다르며, 눈물이 마르고 나면 울기보다는 더 이상 슬퍼하지 않는다고 설명함.
     * 그는 개인적 고통을 상세히 묘사하고 독자들을 비난하는 글을 쓰지 않으며, 대신 상황을 받아들이고 이해를 구함.

우리가 직면한 것

     * 니콜라스는 심각한 뇌 손상을 입고 침대에 누워 자신을 돌볼 수 없는 상태임.
     * 라스와 그의 아내는 모든 의료 지원을 중단하고 가정 호스피스 케어로 옮김.
     * 니콜라스는 수년 혹은 수십 년 동안 살 수 있으며, 부모는 그가 죽을 때까지 돌볼 것임.
     * 라스는 재정적으로 안정적이며 도움을 요청하지 않음.

변화

     * 라스의 거의 완성된 게임, Defender's Quest 2: Mists of Ruin 은 당연히 출시가 지연됨.
     * 라스는 더 안정적이고 예측 가능한 경력을 찾아야 하며, 게임 개발을 그만둘 것임.
     * 그는 Defender's Quest 2 개발 팀의 일상적인 멤버가 아니며, 게임은 취소되지 않았지만 라스는 조언자 역할만 수행함.
     * GameDataCrunch.com은 라스의 지휘 하에 공식적으로 폐쇄됨.
     * 라스는 부동산 대량 평가 기술에 대한 일에만 집중하며 가족을 지원할 것임.

이상함

     * 라스의 가족은 상황에 빠르게 적응했으며, 두 딸은 니콜라스의 일상적인 케어에 도움을 줌.
     * 라스는 니콜라스에게 매일 사랑을 표현하며 돌보는 것 외에 줄 수 있는 것이 없다고 느낌.
     * 그와 그의 아내는 이제 동시에 집을 떠날 수 없으며, 여행도 제한됨.
     * 라스는 슬픔에도 불구하고 기쁨을 고수하며, 비극적인 이야기를 싫어함을 밝힘.

    GN⁺의 의견

     * 이 글에서 가장 중요한 것은 인간의 회복력과 사랑의 힘임. 라스와 그의 가족은 상상할 수 없는 상황에 직면했지만, 그들은 서로를 지지하고 사랑으로 극복하려 함.
     * 이 글은 개인적인 비극을 겪고 있는 사람들에게 공감과 위로를 제공할 수 있으며, 비슷한 상황에 처한 이들에게 힘을 줄 수 있음.
     * 라스의 이야기는 또한 게임 개발자로서의 경력을 넘어서는 인생의 변화와 적응에 대한 교훈을 담고 있어, 직업적 혹은 개인적 변화를 경험하는 사람들에게 영감을 줄 수 있음.

        Hacker News 의견

     * 한 사용자가 자신의 글이 해커뉴스 첫 페이지에 올라와 겸손해진다고 말함. 특히 힘든 날을 보냈으며, 영구적으로 장애를 가진 사람을 돌보는 일이 많은 어려움과 노동을 수반한다고 언급함. 또한, 이 글은 비극적 사건 직후 자신의 감정을 처리하고 어두운 생각을 쫓기 위해 쓴 세 작품 중 하나라고 밝힘. 나머지 두 작품에 대한 링크도 제공함.

     ""오늘같이 힘든 날, 내 글이 해커뉴스 첫 페이지에 올라온 것을 보고 겸손해짐. 장애를 가진 사람을 돌보는 일은 많은 어려움이 있음. 나는 여러분을 사랑하며, 자녀가 있다면 꼭 안아주길 바람. 이 글은 비극 후 내 감정을 다루기 위해 쓴 세 작품 중 하나임.""
     * 다른 사용자는 Lars가 뛰어난 사고력을 가진 인물이며, 다양한 분야에서 뛰어난 업적을 남겼다고 평가함. 특히 소프트웨어 개발자로서의 업적과 현대 경제 정책 중 하나인 토지가치세를 추진한 것에 대해 칭찬함. 또한, 그가 합리주의 커뮤니티에 기여한 것과 예측 사이트에서 활동한 것을 언급하며, 그의 글이 많은 사람들에게 영향을 미쳤다고 말함.

     ""Lars는 뛰어난 사고력을 가진 인물로, 소프트웨어 개발과 토지가치세 추진 등 다양한 분야에서 업적을 남김. 합리주의 커뮤니티에도 기여하며 많은 이들에게 영향을 미침.""
     * 또 다른 사용자는 평소 해커뉴스에 댓글을 거의 달지 않지만, Lars의 세 편의 에세이와 이에 대한 댓글들이 매우 감동적이어서 감사의 말을 전함. 이 사용자는 자신의 삶과 아직 치유되지 않은 비극을 다루는 데 이 댓글들이 도움이 되었다고 말함.

     ""평소 댓글을 잘 달지 않지만, Lars의 에세이와 이에 대한 댓글들이 매우 감동적이어서 감사의 말을 전함. 이러한 댓글들이 자신의 삶을 다루는 데 도움이 됨.""
     * 한 사용자는 기술적으로 아직 살아있지만 실질적으로는 큰 손실을 겪은 아들에 대한 이야기를 나눔. 이는 상실 경험 중에서도 가장 고통스러운 것일 수 있다고 생각함.

     ""아들이 기술적으로는 살아있지만, 그것이 오히려 더 고통스러울 수 있다고 생각함.""
     * 또 다른 부모는 자신의 뇌손상을 입은 2살 아들에 대해 이야기하며, 이 포럼이 비트와 바이트를 넘어 인간의 고통에 대해 논의하는 것에 감사함을 표함. 사회가 복잡한 의료 문제를 다루기 위해 얼마나 많은 지원을 제공하는지에 대해 이야기함.

     ""뇌손상을 입은 2살 아들을 둔 부모로서, 이 포럼이 인간의 고통에 대해 논의하는 것에 감사함. 사회가 제공하는 의료 지원의 광범위함에 대해 언급함.""
     * 한 사용자는 비극적 상실이 매우 힘든 경험이지만, 새로운 정상 상태에서 살아가는 법을 배우는 것이 인간의 일부라고 말함.

     ""비극적 상실이 힘든 경험이지만, 새로운 정상 상태에서 살아가는 법을 배우는 것이 인간의 일부임.""
     * 또 다른 사용자는 자신의 3살 반 된 딸을 갑작스러운 질병으로 잃은 경험을 공유하며, 슬픔을 겪는 동안 자신과 가족에게 상냥하게 대할 것을 조언함.

     ""3살 반 된 딸을 잃은 경험을 공유하며, 슬픔을 겪는 동안 자신과 가족에게 상냥하게 대할 것을 조언함.""
     * 한 사용자는 자신이 겪은 유사한 경험을 바탕으로 다른 자녀들이 정신적으로 아프지 않도록 심리 치료사와 상담사의 도움을 받을 것을 강조함.

     ""유사한 경험을 겪은 사용자로서, 다른 자녀들이 정신적으로 아프지 않도록 심리 치료사와 상담사의 도움을 받을 것을 강조함.""
     * 한 사용자는 Doucet의 게임이 아닌 토지가치세에 대한 글쓰기로 인해 그를 알게 되었으며, 그의 글이 매우 가치 있고 감사하다고 말함.

     ""Doucet의 토지가치세에 대한 글쓰기로 인해 그를 알게 되었으며, 그의 글이 매우 가치 있음을 언급함.""
     * 마지막 사용자는 슬픔에 대한 인용구를 공유하며, 슬픔이 항상 존재하고 그것과 함께 살아가는 법을 배워야 한다고 말함.

     ""슬픔에 대한 인용구를 공유하며, 슬픔이 항상 존재하고 그것과 함께 살아가는 법을 배워야 함을 언급함.""
"
"https://news.hada.io/topic?id=13012","우리가 YAML을 템플릿하는 이유 (2019년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       우리가 YAML을 템플릿하는 이유 (2019년)

YAML 템플릿 사용에 대한 의문

     * YAML 템플릿 사용이 언제부터 일반적인 것으로 받아들여졌는지, 이것이 어떻게 받아들여질 수 있는지에 대한 질문 제기.
     * cfgmgmtcamp 2019에서 Kubernetes 구성 관리의 필요성과 kr8 솔루션에 대해 발표함.
     * 발표 중 YAML 템플릿에 대한 의문을 제기하여 온라인과 컨퍼런스에서 활발한 토론이 일어남.

구성 문제

     * 애플리케이션과 인프라가 일정 규모 이상으로 성장하면 구성 복잡성의 문제에 직면함.
     * 다양한 환경(개발, 스테이징, 프로덕션)이나 지역(유럽, 북미)에서 배포되는 애플리케이션의 구성이 서로 다를 수 있음.
     * 시스템 관리자나 DevOps 엔지니어는 구성 관리의 복잡성을 잘 알고 있으며, 각각의 도구가 YAML을 사용하여 이 문제를 해결함.

우리는 후퇴했는가?

     * 클라우드 컴퓨팅으로 산업의 요구가 변화하면서 새로운 도구들이 등장함.
     * CloudFormation과 Helm과 같은 도구들은 우수한 구성 도구이지만, YAML 템플릿을 설계할 때 산업 전반적으로 실수를 했다고 믿음.
     * Helm 차트가 사용자 정의 매개변수를 받는 예시를 들어 설명함.

Helm 차트

     * Helm 차트는 values.yaml 파일을 통해 외부 매개변수를 받아 차트를 렌더링함.
     * 간단한 문자열 매개변수부터 시작하여 선택적 필드나 배열, 맵을 구성할 때의 복잡성을 설명함.
     * YAML의 엄격한 공백 요구 사항과 템플릿 시스템의 한계를 지적함.

JSON, Jsonnet & YAML

     * YAML은 JSON의 상위 집합이며, 두 형식 간의 변환은 간단함.
     * Jsonnet은 데이터 템플릿 언어로서 JSON 구성을 생성하는 것을 목적으로 함.

Jsonnet의 교회

     * Jsonnet은 Kubernetes 커뮤니티 외부에서는 잘 알려지지 않은 새로운 언어임.
     * Jsonnet을 사용하여 외부 변수를 사용하는 JSON 구성을 쉽게 생성할 수 있음.
     * 선택적 필드, 맵, 매개변수를 다루는 방법과 Jsonnet의 추가 기능을 설명함.

Kr8

     * Kr8는 여러 Kubernetes 클러스터의 구성을 쉽고 간단하게 만들고 조작하는 데 사용되는 모든 방법을 사용함.
     * 여기서 설명한 개념에 공감한다면 Kr8을 확인해볼 것을 권장함.


    GN⁺의 의견

     * YAML 템플릿의 복잡성: 이 글은 YAML 템플릿의 복잡성과 한계를 지적하며, 구성 관리에 있어서 산업이 직면한 문제를 잘 드러냄.
     * Jsonnet의 장점: Jsonnet이 YAML 템플릿의 대안으로 제시되며, 그 사용의 용이성과 유연성을 강조함으로써 새로운 도구에 대한 관심을 유도함.
     * 구성 관리의 미래: 이 글은 구성 관리의 미래에 대한 통찰을 제공하며, DevOps 및 시스템 관리자들에게 새로운 접근 방식을 모색할 기회를 제공함.

        Hacker News 의견

     * YAML 설정 파일에 대한 불만이 많음. GitHub Actions에서도 가장 나쁜 부분으로 여겨지며, 다른 독점적 설정 언어들(HCL, ASL 등)에 대해서도 비슷한 느낌을 받음. 선언적 API는 좋지만, 선언을 프로그래밍적으로 생성할 수 있게 해달라는 요구가 있음.
     * 코드로 설정을 선언하고 생성하는 것이 더 나은 경험을 제공함. AWS CDK가 이 부분을 정확히 이해하고 있으며, 타입 안전한 언어와 IDE 지원을 통해 설정과 클라우드 인프라의 선언적 정의를 작성할 수 있음.
     * YAML 템플릿이 비합리적이라는 데 동의하며, 복잡한 로직이 필요할 때는 실제 프로그래밍 언어를 사용하여 YAML/JSON 등을 생성해야 한다고 주장함. 이렇게 하면 많은 문제를 해결할 수 있음.
     * Kubernetes에 대한 논의가 있었으며, Kubernetes API가 직관적이고 잘 정의된 JSON 스키마를 가지고 있음에도 불구하고, 사람들은 Helm 차트 사용법을 배우는 데 시간을 많이 소비함. Jsonnet, Ksonnet, Nu, CUE는 큰 인기를 얻지 못했으며, 대부분의 사람들이 kubectl에 내장된 Kustomize를 사용하는 것으로 보임.
     * 개발자들이 설정을 어떻게 올바르게 처리해야 하는지에 대해 충분히 고민하지 않는다는 지적이 있음. 모든 프로그래밍이 사실상 설정의 문제라고 할 수 있으며, 모든 설정은 결국 어떤 함수의 매개변수로 전달됨. 설정을 중앙 데이터베이스에 저장하는 것이 더 나을 수 있음.
     * CI/CD에서 YAML이 거의 프로그래밍 언어처럼 사용되는 경우가 있는데, 이는 매우 장황하고 직관적이지 않으며, 제대로 정의되지 않은 벤더 특정 언어로 여겨짐.
     * Helm이 승리한 것에 대해 유감을 표함. Helm 차트 작업은 매우 불편하며, 에디터가 도움을 줄 수 없고, 모든 데이터를 'indent 4'를 통해 올바르게 정렬해야 함. Helm이 Kubernetes의 종말을 가져올 것이라는 예측이 있음.
     * 문자열 보간을 사용하여 기계가 읽을 수 있는 코드를 생성하는 것은 바람직하지 않다는 개인적인 철학을 가짐. SQL 인젝션과 크로스사이트 스크립팅과 같은 문제가 계속 발생할 것임. HTML을 생성하기 위해 템플릿 파일을 사용하지 않아야 한다고 주장함.
     * YAML을 선택하는 사람들이 문제를 인식하지 못하는 것 같다는 의견이 있음. 인간 중심의 데이터 표현과 컴퓨터 중심의 데이터 표현 사이에는 직접적인 충돌이 있음. YAML과 JSON은 실제로는 서로 다른 데이터 형식임.
     * YAML을 좋아하지만 Helm 차트 작업 시 매일 저주를 내린다는 의견이 있음. Helm을 싫어하면서도 모두가 사용하기 때문에 여전히 사용할 것이라는 입장을 보임.
     * cuelang으로 전환하는 것을 고려하고 있으며, 이는 Jsonnet보다 더 잘 설계되었다고 생각함. Kubernetes에는 이미 상태 조정 기능이 있으므로 삭제 기능만 추가되면 됨.
"
"https://news.hada.io/topic?id=12979","Show HN: HN 사용자들과의 무작위 일대일 음성 채팅, "Coffeehouse"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: HN 사용자들과의 무작위 일대일 음성 채팅, ""Coffeehouse""

   이 요청은 특정 기사의 내용을 요약하는 것이 아니라, 'COFFEEHOUSEHacker News'라는 서비스의 웹사이트 내용을 요약하는 것으로 보입니다. 그러나 제공된 텍스트는 매우 제한적이며, 구체적인 서비스 설명이나 중요한 정보를 포함하고 있지 않습니다. 따라서, 이 텍스트만으로는 충분한 요약을 제공할 수 없습니다. 추가 정보나 맥락이 제공되지 않는 한, 요약할 내용이 없습니다.

        Hacker News 의견

     * 전 세계 사람들을 연결하는 기회가 더 많아야 한다고 생각하는 의견이 있음. 미디어와 정치인을 통해 걸러진 메시지에 대한 신뢰가 줄어들 것이라는 기대를 표현함.
          + 프로젝트 제작자에게 감사의 말을 전하며, 랜딩 페이지에 설명 문단을 추가하는 작은 제안을 함. 마케팅 용어는 사용하지 말고 간단한 설명을 추가하면 좋을 것이라고 조언함.
     * 목소리 채팅을 통해 낯선 사람과 연결되는 아이디어가 약간 두렵지만, 대외적인 사람들에게는 멋진 대화와 아이디어가 나올 것 같다는 의견이 있음.
     * 해커뉴스 커뮤니티의 가족 같은 분위기와 같은 생각을 가진 사람들과의 긴밀한 상호작용에 대한 갈망을 표현하는 댓글이 있음. 사회적으로 어색한 면이 있지만 서로를 사랑하는 분위기를 나타냄.
     * ""Coffeehouse""라는 프로젝트에 대한 관련 링크가 있으며, 2022년부터 2023년까지 다양한 시기에 게시된 해커뉴스 글에 대한 링크를 제공함.
     * 매칭이 빠르고 (거의 즉시 이루어짐), 중국에 있는 해커뉴스 사용자와 일본에 있는 사용자, 그리고 호주에 있는 사용자 간의 짧은 채팅 경험을 공유함. 프로젝트 제작자에게 잘했다는 칭찬을 함.
     * 텍스트 채팅 기능이 추가되면 비동기적 대화가 가능해져 유용할 것이라는 의견이 있음.
     * 뉴욕, 스위스, 뭄바이 등 세계 곳곳의 흥미로운 사람들과 대화를 나누었다는 경험담이 있음.
     * 처음에는 회의적이었지만 흥미로운 대화를 나눌 수 있었다는 긍정적인 후기가 있음. 텍스트 채팅보다 이 방식을 선호한다고 언급함.
     * 일본에서 잠자기 전에 시도해보았고, 댈러스에서 온 사람과 대화를 나눴지만 연결이 끊겼다는 아쉬움을 표현하는 댓글이 있음.
     * AI 음성 복제와 보안의 시대에 이러한 아이디어가 좋지 않을 수 있다는 우려를 나타내는 의견이 있음. 음성 샘플이 얼마나 필요한지에 대한 질문을 함.
"
"https://news.hada.io/topic?id=12963","HN 소식: 러시아, OpenVPN/WireGuard 연결 차단 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 소식: 러시아, OpenVPN/WireGuard 연결 차단 시작

러시아에서의 VPN 서비스 중단

     * 최근 3일간 러시아인들이 OpenVPN/WireGuard 프로토콜을 통해 작동하는 VPN 서비스를 사용할 수 없었음.
     * 일부는 특정 상황에서 SSH 연결마저 작동하지 않는다고 보고함.
     * 러시아 인터넷이 고립될 가능성이 점점 현실화되고 있음.

현지인의 경험

     * 현재 러시아에 거주하는 한 사람으로서, 지난 3일간 좋아하는 VPN 제공업체에 연결할 수 없었다고 확인함.
     * 공식 애플리케이션조차 작동하지 않음.
     * 영어권 인터넷에서는 이 문제에 대한 토론이 없으며, 정보와 의견의 자유를 보존하는 중요성에도 불구하고 뉴스에 보도되지 않음.

러시아 인터넷에서의 논의

     * 러시아 인터넷에서는 이 문제에 대해 활발히 토론 중임.
     * 관련 토론 링크와 추가 정보를 제공하는 링크가 기사에 포함되어 있음.

  GN⁺의 의견

     * 이 기사는 러시아에서 VPN 서비스 접근이 차단되고 인터넷이 고립될 위험이 있음을 보여줌. 이는 정보의 자유와 개인의 사생활 보호에 중대한 영향을 미칠 수 있음.
     * VPN과 SSH 연결의 중단은 전 세계적으로 사이버 보안과 인터넷 자유에 대한 관심이 높아지는 가운데, 특정 국가에서의 인터넷 검열과 감시가 심화될 수 있음을 시사함.
     * 이 문제는 국제 사회에서의 정보 교류와 표현의 자유에 대한 중요한 사례로, 인터넷 사용자와 정책 입안자 모두에게 중요한 관심사가 될 수 있음.

        Hacker News 의견

     * 중국의 방화벽으로 인해 VPN을 차단하는 기술에 많은 자원이 투입되었음.
          + 그러나 중국의 검열을 우회하기 위해 노력하는 뛰어난 인재들이 있어서 OpenVPN 대안이 존재함.
          + Shadowsocks 같은 대안을 살펴보는 것이 좋음, 중국인들이 몇 년간 성공적으로 사용해옴.
          + VPN 노드의 상업적 IP가 차단되었을 가능성이 있음.
          + Streisand 프로젝트가 아카이브되었지만, 서버에 쉽게 배포할 수 있는 다른 대안들이 있을 것임.
     * 러시아 통제 지역인 돈바스에 거주 중이며, WireGuard 연결이 오랫동안 차단되어 있음.
          + OpenVPN은 호스트에 따라 선택적으로 차단됨.
          + ISP마다 다른 호스트와 프로토콜을 다른 시간에 차단함, 러시아의 검열 테스트 환경일 수 있음.
          + 익명성을 위해 질문에는 답변하지 않음.
     * 러시아에 거주 중인 사람으로, 유료 VPN 제공업체가 몇 달 전에 작동을 멈춤.
          + 자체 호스팅한 Outline 서버와 OpenVPN도 멈춤, 둘 다 독일 프랑크푸르트의 Digital Ocean에 호스팅됨.
          + 현재 미국 서버에서 자체 호스팅한 Outline이 작동 중이지만, 오래가지 않을 것으로 예상됨.
          + XRay를 자체 호스팅하는 방법을 배울 수밖에 없음, 차단하기 어렵다고 함.
     * 상업적인 솔루션은 차단될 수 있지만, 네덜란드 출구 지점을 가진 Wireguard를 현재 사용 중이며 잘 작동함.
          + 일부 제공업체에서는 속도 제한을 경험했지만, 우연일 수 있음.
          + VPN 외에 다른 서비스도 운영 중이어서 레이더 아래로 남아 있을 수 있음.
     * 모스크바에서 OpenVPN을 사용하여 타이핑 중이며, 지난 1년간 러시아 전역을 돌아다녔지만 프로토콜 차단을 경험하지 않음.
          + 현재는 인기 있는 제공업체들을 차단하는 것 같음.
          + 자체 서버를 가진 사람들은 아직 타깃이 아님.
          + 정부가 3월 선거까지 인터넷 검열을 완화할 것으로 예상됨.
     * 중국에서 2년간 거주한 경험이 있으며, xray-core나 v2ray를 살펴보는 것을 추천함.
          + 이들은 WireGuard나 OpenVPN, 상업적 솔루션보다 은폐되어 있어 적발될 가능성이 훨씬 낮음.
          + 동일한 서버에서 작은 게임 서버를 호스팅하여 트래픽이 눈에 띄지 않도록 하는 것이 좋음.
     * wstunnel을 사용하여 방화벽을 우회할 수 있음, 중국/터키/이란 사람들이 성공적으로 사용했다는 피드백이 많음.
          + 정적 바이너리로도 쉽게 설정 가능함.
     * OpenVPN/Wireguard 차단 문제로 인해 몇 달 전에 shadowsocks로 완전히 전환함, 대부분 잘 작동함.
          + obfuscated wireguard인 amneziawg-go가 가야 할 길로 보임.
     * 2022년부터 많은 사이트와 호스트 서비스들이 러시아에서의 접근을 차단하기 시작함.
          + 기술과 관련 없는 간단한 것들에 대해서도 접근이 차단됨.
          + 러시아가 접근을 차단하면 자유에 대한 공격으로, 서방이 러시아로부터의 접근을 차단하면 자유를 보호하는 것으로 여겨짐.
     * 러시아 정부는 나라를 외부 인터넷에서 완전히 분리할 계획을 가지고 있음.
          + 이 시스템은 이미 테스트되었으며, 스위치를 켜는 것만으로 활성화될 수 있음.
          + 아이언 커튼이 실제로 내려질 때까지 시간 문제일 수 있으며, 그러면 푸틴은 서방을 비난하고 우리에 맞서는 방법을 찾을 것임.
"
"https://news.hada.io/topic?id=12987","과학자들, 암의 75%를 촉진하는 혼돈스러운 단백질을 제어하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   과학자들, 암의 75%를 촉진하는 혼돈스러운 단백질을 제어하다

과학자들, 75%의 암을 유발하는 혼돈스러운 단백질을 길들이다

     * 캘리포니아 대학교 리버사이드의 연구원들이 인간 암의 대부분을 악화시키는 무형태의 단백질 MYC를 제어하는 방법을 발견함.
     * 정상 세포에서 MYC는 DNA에서 RNA로, 그리고 결국 단백질로 전환되는 전사 과정을 안내하는 데 도움을 줌.
     * 암 세포에서는 MYC가 과도하게 활성화되어 제대로 조절되지 않음.

MYC 제어의 도전

     * MYC는 대부분의 다른 단백질과 달리 구조가 없어 ""무작위의 덩어리""로 묘사됨.
     * 전통적인 약물 발견 파이프라인은 잘 정의된 구조에 의존하지만, MYC는 그러한 구조가 없음.

새로운 펩타이드 화합물

     * 연구진은 Journal of the American Chemical Society 에서 MYC에 결합하여 활성을 억제하는 펩타이드 화합물을 기술함.
     * 2018년 연구자들은 펩타이드의 강성과 형태를 변경하면 MYC와 같은 무구조 단백질과의 상호작용 능력이 향상됨을 발견함.
     * 새로운 펩타이드는 항체의 강도에 가까운 서브 마이크로 몰러 애핀니티로 MYC에 직접 결합함.

약물 개발 목표에 한 걸음 더

     * 연구진은 이 펩타이드의 결합 성능을 이전 버전보다 두 자릿수 향상시켜 약물 개발 목표에 더 가까워짐.
     * 현재 연구진은 지질 나노입자를 사용하여 세포 내로 펩타이드를 전달하는 방법을 사용 중임.
     * 연구진은 세포 내로 들어가는 펩타이드의 능력을 향상시키는 화학을 개발 중임.

UC 리버사이드 연구실

     * UC 리버사이드의 Xue 연구실은 생물학을 더 잘 이해하기 위한 분자 도구를 개발하고, 그 지식을 활용하여 약물 발견을 수행함.
     * Xue는 혼돈스러운 과정의 화학에 오랫동안 관심을 가지고 있으며, MYC를 길들이는 도전에 매료됨.
     * MYC는 구조가 없고 많은 종류의 암에 직접적인 영향을 미치기 때문에 암 약물 개발의 성배 중 하나로 여겨짐.

   GN⁺의 의견
     * 이 연구는 암 치료의 새로운 시대를 여는 희망을 제공함. MYC는 암 세포의 무제한 성장을 촉진하는 주요 요인으로, 이를 제어할 수 있는 방법을 찾는 것은 매우 중요함.
     * 펩타이드 기반의 약물 개발은 기존의 약물 발견 방식과 다른 새로운 접근법을 제시함. 이는 무구조 단백질을 대상으로 하는 약물 개발에 새로운 가능성을 열어줌.
     * 이 기사는 암 연구 및 치료 분야에서 중요한 진전을 보여주며, 특히 구조가 없는 단백질을 대상으로 하는 연구에 대한 흥미를 불러일으킬 수 있음.

        Hacker News 의견

     * MYC 단백질과 DNA 전사
          + MYC 단백질은 DNA 전사에 관여하지만, 암에서 비정상적으로 활성화되었다는 명확한 증거는 없음.
          + MYC 활동을 늦출 수 있는 방법을 찾았으나, 암을 특정하여 타겟팅해야 할 필요성이 있음.
          + 이 발견은 암 치료보다는 흥미로운 세포 생물학의 예로 보임.
     * 암 연구의 진전
          + 해커뉴스를 10년간 팔로우한 한 사용자는 매년 몇 차례 암 연구의 주요 발견이 발표됨을 지적.
          + 이러한 발견들이 실제 치료법으로 이어졌는지 평가할 수 없으나, 암학은 지속적인 작은 발전을 통해 진행되는지, 아니면 주요 발견이 적용될 때 큰 도약을 하는지 궁금증을 표함.
     * MYC 단백질의 구조 부재
          + MYC 단백질이 '구조가 없다'는 주장에 대한 의문 제기.
          + 단백질 구조는 전사 과정에서 아미노산의 상호작용으로 자연스럽게 형성되므로, 구조가 없는 단백질이 기능을 수행하는 방법에 대한 이해 부족을 인정.
     * 암 치료에 대한 과장된 헤드라인
          + 75%의 암이 '길들여졌다'는 헤드라인에 대한 회의적인 반응.
          + 헤드라인이 과장되었을 가능성을 지적함.
     * 연구 결과의 실제 적용 과정
          + 암 세포에서 작동하는 치료법 개발이 첫 단계임.
          + 동물 실험, 그리고 인간 대상 임상 시험 1, 2, 3상을 거쳐야 함.
          + 각 단계에서 실패할 수 있으며, 실제 임상 적용까지는 적어도 10년 이상 소요될 가능성이 높음.
     * 암 연구 결과에 대한 회의론
          + 해커뉴스에서 과거 10년간의 암 연구 결과를 검색하면 암이 이미 치료 가능한 것처럼 보이지만, 실제 적용에 대한 회의적인 시각을 표현함.
"
"https://news.hada.io/topic?id=12996","메타, EU 사용자들이 페이스북, 메신저 및 인스타그램 계정 연동 해제 가능하게 함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             메타, EU 사용자들이 페이스북, 메신저 및 인스타그램 계정 연동 해제 가능하게 함

        Hacker News 의견

     *
          + 엔지니어링 작업의 어려움에 대한 공감

     이 프로젝트는 아마도 수십 개 팀의 백로그를 완전히 소모했을 것이며, 사용자 계정에 대한 비즈니스 가정은 아키텍처와 서비스에 깊숙이 관여하고, 그 위에 수년간의 코드가 쌓여있을 것임.
     *
          + 유럽 사용자에 대한 새 기능의 한정에 대한 불만

     유럽 사용자들이 자신들의 디지털 생활을 관리하는 새로운 기능을 얻는 것을 보며, 다른 지역의 사용자들은 이러한 혜택을 받지 못하는 것에 대해 지속적으로 좌절감을 느낌. 유럽에만 이 기능을 제한하는 복잡성을 정당화하기 위해 예상되는 광고 수익 손실이 상당할 것임.
     *
          + 페이스북과 인스타그램 계정 연동의 문제점 지적

     페이스북과 인스타그램 계정을 연동하는 것은 메신저 API를 사용하는 사람들에게 악몽과 같았으며, 제대로 작동하지 않아 개발 시간을 많이 낭비했음. 이것이 얼마나 더 나빠질지 상상하기도 싫음.
     *
          + EU 사용자만을 위한 변경에 대한 불만

     회사가 오랫동안 요청받았던 변경을 하지만 EU 사용자들에게만 적용하는 것을 볼 때마다 짜증남. 기술적인 작업이 어차피 필요했기 때문에, 모든 사용자에게 제공하지 않는 것은 순전히 악의적으로 보임.
     *
          + 왓츠앱과 연락처 공유의 분리에 대한 기대

     왓츠앱에서 ""이 문자를 그 번호로 보내기""와 ""내 전체 연락처의 복사본""을 분리할 수 있을 때까지 기다릴 것임.
     *
          + 오큘러스 계정 필요성에 대한 비판

     이제 오큘러스도 해결해야 함. 오리지널 리프트를 오프라인으로 사용하기 위해 ""계정""이 필요한 것은 모니터를 사용하기 위해 계정이 필요한 것과 같음.
     *
          + VPN을 사용하여 계정 연결 해제 가능성에 대한 질문

     유럽에 있는 것처럼 VPN을 사용하면 계정 연결을 해제할 수 있을까?
     *
          + 구글과 유튜브의 계정 연결 해제에 대한 긍정적인 반응

     구글도 유튜브 및 기타 서비스의 연결을 해제할 수 있게 해줌. 아마도 EU의 강제 때문일 것임.
     *
          + 페이스북과 메신저 계정 연결 해제의 의미에 대한 설명 요청

     ""페이스북 계정""과 ""메신저 계정""의 연결 해제가 무엇을 달성하는지 설명해줄 수 있는 사람이 있을까? 경쟁 서비스가 빠르게 등장하고 새로운 경쟁자가 디지털 서비스 주변의 해자를 제거하려는 노력을 지지해야 하지만, EU는 기존 기업의 엔지니어에게 바쁜 일을 만드는 것이 올바른 접근이라고 생각하는 것 같음.
     *
          + 쿠키 수락 요구에 대한 불만과 법 개정에 대한 제안

     모든 웹사이트에서 ""쿠키 수락"" 요구에 질려버림. ""오, 이것은 나쁜 준수다, 블라블라""라고 말하지 말고, 그렇다면 대신 더 유용한 법을 만들어야 함.
"
"https://news.hada.io/topic?id=12891","JSONB 지원을 포함한 SQLite 3.45 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      JSONB 지원을 포함한 SQLite 3.45 출시

SQLite 릴리스 요약

     * SQLite는 SQLITE_RESULT_SUBTYPE 속성을 추가하여 애플리케이션 정의 SQL 함수에 대한 지원을 강화함.
     * JSON SQL 함수는 새로운 내부 파싱 트리 형식인 JSONB를 사용하여 개선됨.
     * 쿼리 플래너는 인덱스 선택 시 더 나은 판단을 내리고, SQLITE_DIRECT_OVERFLOW_READ 최적화가 기본적으로 활성화됨.
     * CLI는 UTF-8 콘텐츠 표시 개선 및 "".dump"" 스크립트 재생 감지 자동화를 포함하여 개선됨.

버그 수정 및 최적화

     * 다양한 버그 수정 및 성능 최적화가 이루어짐.
     * 새로운 C 언어 API, sqlite3_get_clientdata() 및 **sqlite3_set_clientdata()**가 추가됨.
     * PRAGMA integrity_check 명령은 이제 내장 가상 테이블의 일관성을 검증함.
     * 쿼리 플래너는 부분 인덱스 스캔 및 DISTINCT 서브쿼리에 대한 처리를 개선함.

SQLite CLI 및 기타 기능 개선

     * CLI는 UTF-8 콘텐츠 표시를 개선하고, 위험한 SQL 함수 사용을 제한함.
     * PRAGMA integrity_check 명령은 텍스트 문자열과 인덱스 간의 일치 여부를 검증함.
     * sqlite3_stmt_scanstatus_v2() 인터페이스가 추가됨.
     * **sqlite3_prepare()**와 유사한 장기 실행 호출은 진행 상태 콜백을 호출하고 **sqlite3_interrupt()**에 반응함.

GN⁺의 의견

     * SQLite의 지속적인 개선은 데이터베이스 관리 시스템의 안정성과 성능에 중요함.
     * JSON SQL 함수의 개선은 웹 개발자와 모바일 애플리케이션 개발자에게 특히 유용함.
     * 쿼리 플래너의 최적화는 복잡한 데이터베이스 쿼리를 더 효율적으로 만들어 시스템 리소스를 절약할 수 있게 함.

        Hacker News 의견

     * macOS에서 새로운 SQLite 버전을 시도하고 싶은 사람들을 위한 빠른 방법:
          + SQLite 버전을 macOS에서 Python과 함께 사용하는 방법에 대한 링크 제공.
          + 간단한 명령어를 통해 SQLite 라이브러리를 컴파일하고 Python에서 버전을 확인하는 방법 설명.
          + SQLite의 웹 UI를 사용해보기 위한 datasette 명령어 안내.
     * SQLite의 JSONB에 대한 개선 사항:
          + JSONB를 사용하면 JSON 관련 작업의 성능이 3배 향상될 수 있음.
          + JSONB는 텍스트 JSON보다 대부분의 경우 약 5%~10% 작은 크기를 가짐.
          + Notion Labs에서 많은 JSON을 사용하므로 디스크 사용량 감소에 대한 개선이 기대됨.
     * SQLite 3.45 버전의 대화형 릴리스 노트:
          + 공식 릴리스 노트가 지루하다면 대화형 버전 링크 제공.
     * SQLite가 미래의 GCC 컴파일러 경고를 예상하는 인상적인 사례:
          + SQLite가 GCC의 새로운 컴파일러 경고를 미리 대비하는 것에 대한 언급.
     * 클라우드 네이티브 SQLite에 대한 관심과 PostgreSQL과의 비교 요청:
          + 클라우드 기반의 SQLite 서비스들에 대한 관심 표현.
          + PostgreSQL과 SQLite의 비교 자료 요청.
     * SQLite에 대한 재평가와 긍정적인 인식 변화:
          + SQLite를 단순한 '장난감 데이터베이스'로 여기던 시각에서 벗어나 실제 앱에 유용함을 인정.
     * JSONB에서 정수와 부동소수점을 텍스트로 저장하는 결정에 대한 의문:
          + JSONB의 사용 사례에 대한 제한을 초래할 수 있는 데이터 저장 방식에 대한 비판.
     * 이전에 논의된 JSONB의 도입:
          + ""JSONB has landed""라는 제목으로 이전에 해커뉴스에서 논의된 사실 언급.
     * SQLite에서 JSON과 같은 데이터를 효율적으로 저장하고 처리하는 도전:
          + SQLite가 JSONB를 도입하려는 오랜 바람과 그것을 실현하기 위한 접근 방법에 대한 설명.
     * JSONB의 내부 포맷이 텍스트 JSON보다 적은 디스크 공간을 사용함:
          + JSONB가 텍스트 JSON에 비해 디스크 공간을 덜 차지한다는 정보 공유.
"
"https://news.hada.io/topic?id=12940","11초의 다운타임으로 PostgreSQL 데이터베이스를 마이그레이션 완료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                11초의 다운타임으로 PostgreSQL 데이터베이스를 마이그레이션 완료

PostgreSQL 데이터베이스 마이그레이션 방법

     * GOV.UK Notify는 현재 사용 중인 PaaS가 폐지됨에 따라 모든 인프라를 자체 AWS 계정으로 이전 중임.
     * 이 글에서는 PostgreSQL 데이터베이스를 최소한의 다운타임으로 마이그레이션한 방법을 설명함.

데이터베이스 마이그레이션

     * PaaS에서 제공하는 AWS RDS PostgreSQL 데이터베이스를 사용하고 있으며, 이를 자체 AWS 계정의 새 데이터베이스로 이전해야 함.
     * 새로운 PostgreSQL 데이터베이스를 설정하고 모든 앱이 새 데이터베이스와 통신하도록 하는 것이 주요 과제임.

소스 데이터베이스에 대한 추가 정보

     * 소스 데이터베이스는 약 400GB 크기이며, 1.3억 개의 행, 85개의 테이블, 185개의 인덱스, 120개의 외래 키를 가지고 있음.
     * 평일에는 초당 약 1,000건의 삽입 또는 업데이트가 이루어지며, GOV.UK Notify는 매일 수백만 개의 중요하고 시기적절한 알림을 전송함.

AWS 데이터베이스 마이그레이션 서비스

     * AWS 데이터베이스 마이그레이션 서비스(DMS)를 사용하여 소스 데이터베이스에서 타겟 데이터베이스로 데이터를 전송함.
     * DMS는 '전체 로드' 작업을 통해 특정 시점까지의 모든 데이터를 복사하고, 복제 모드에서는 소스 데이터베이스의 모든 새로운 트랜잭션이 타겟 데이터베이스에 반영되도록 함.

데이터베이스 마이그레이션 과정

    DMS 인스턴스 설정

     * 소스 AWS 계정에서 DMS 인스턴스를 생성하고, 소스 및 타겟 데이터베이스 모두에 접근할 수 있는 PostgreSQL 자격 증명을 부여함.

    타겟 데이터베이스 설정

     * 자체 AWS 계정에 타겟 RDS 인스턴스를 생성하고, PostgreSQL 버전을 15로 업그레이드함.
     * pg_dump를 사용하여 소스 데이터베이스 스키마를 덤프하고, 타겟 데이터베이스에 테이블 선언을 적용함.

    전체 로드

     * 타겟 데이터베이스에 테이블을 생성한 후, DMS 전체 로드 작업을 시작하여 약 6시간 만에 완료함.
     * 전체 로드 작업이 완료된 후, 인덱스와 키 제약 조건을 추가함.

    복제

     * 전체 로드 작업이 완료된 후, DMS 지속적인 복제(변경 데이터 캡처) 작업을 시작하여 소스 데이터베이스와 타겟 데이터베이스를 동기화함.

    트래픽 마이그레이션 준비

     * 앱이 소스 데이터베이스와의 통신을 중단하고 타겟 데이터베이스와 통신하도록 하는 과정을 계획함.

    소스 데이터베이스로의 트래픽 중단

     * 스크립트를 사용하여 소스 데이터베이스로의 모든 트래픽을 중단함.

    복제 확인

     * 타겟 데이터베이스가 완전히 동기화되었는지 확인함.

    트래픽의 원활한 전환

     * 앱이 데이터베이스에 연결하기 위해 필요한 위치, 사용자 이름, 비밀번호를 환경 변수에 제공하고, DNS 변경을 통해 빠르게 데이터베이스를 전환함.

마이그레이션 당일 발생한 사항

     * 마이그레이션 스크립트를 성공적으로 실행하여 앱이 소스 데이터베이스와의 통신을 중단하고 새 타겟 데이터베이스와 통신하도록 함.
     * 마이그레이션 중 약 11초의 짧은 다운타임이 발생함.

배운 점

     * DMS를 사용한 이유는 GOV.UK PaaS에서 잘 지원되었기 때문이며, AWS의 지원도 받을 수 있었음.
     * 향후 PostgreSQL 간 데이터베이스 마이그레이션을 수행할 경우, pglogical과 같은 다른 도구를 시도하는 데 더 많은 시간을 투자할 것임.

GOV.UK Notify의 AWS로의 마이그레이션 다음 단계

     * 데이터베이스 마이그레이션이 완료된 후, 앱을 AWS Elastic Container Service(ECS)로 이전할 예정임.

   GN⁺의 의견:
     * 이 글에서 가장 중요한 것은 GOV.UK Notify 팀이 AWS 데이터베이스 마이그레이션 서비스(DMS)를 사용하여 PostgreSQL 데이터베이스를 성공적으로 이전했다는 점임.
     * 이 글은 데이터베이스 마이그레이션을 계획하는 기술 전문가들에게 실제 사례를 통한 유용한 지침을 제공함.
     * 마이그레이션 과정에서 발생할 수 있는 다운타임을 최소화하는 방법과 데이터 일관성을 유지하는 전략에 대한 통찰력을 제공하여, 비슷한 상황에 직면한 다른 조직이나 개인들에게 도움이 될 수 있음.

        Hacker News 의견

     * 정부가 AWS를 사용하는 이유에 대해 의문을 제기하며, 공공 부문 클라우드를 구축하거나 온프레미스(on-prem) 접근 방식을 채택해 장기적으로 세금 낭비를 줄일 수 있다고 주장함.

     ""정부가 AWS를 사용하는 것에 대해 의문이 있음. 공공 부문 클라우드 구축이나 온프레미스 접근 방식이 장기적으로 세금을 절약할 수 있을 것.""
     * AWS RDS 블루-그린 배포를 사용하여 약 20초의 다운타임으로 데이터베이스 마이그레이션을 성공적으로 수행했다고 경험을 공유함.

     ""AWS RDS 블루-그린 배포를 통해 약 20초의 다운타임으로 데이터베이스 마이그레이션을 성공적으로 수행한 경험 공유.""
     * PostgreSQL 쿼리를 일시 중지하는 다양한 방법을 언급하며, 복제가 따라잡을 때까지 쿼리를 지연시키는 방법으로 다운타임을 줄일 수 있다고 설명함.

     ""PostgreSQL 쿼리를 일시 중지하여 복제가 따라잡을 때까지 지연시키는 방법으로 다운타임을 줄일 수 있음.""
     * 자체 호스팅된 PostgreSQL 데이터베이스를 버전 12에서 16으로 마이그레이션하는 과정을 설명하고, 예상치 못한 문제로 인해 다운타임이 약 30분 발생했다고 공유함.

     ""PostgreSQL 데이터베이스를 버전 12에서 16으로 마이그레이션하는 과정에서 예상치 못한 문제로 인해 약 30분의 다운타임 발생.""
     * AWS 데이터 마이그레이션 서비스를 사용하여 11초의 다운타임을 감수하고 DNS 항목을 교체하는 것이 복잡성을 피하는 방법이라고 언급함.

     ""AWS 데이터 마이그레이션 서비스 사용과 DNS 항목 교체로 11초의 다운타임을 감수하는 것이 복잡성을 피하는 방법.""
     * 긴 실행 시간을 가진 쿼리가 저다운타임 마이그레이션의 적이라고 지적하며, 이러한 쿼리를 처리하는 방법에 대한 어려움을 설명함.

     ""긴 실행 시간을 가진 쿼리가 저다운타임 마이그레이션의 어려움을 초래함.""
     * PostgreSQL 14에서 16으로의 마이그레이션 과정을 공유하며, 다음 번에는 AWS 블루-그린 배포를 사용하여 다운타임을 피할 계획이라고 언급함.

     ""PostgreSQL 14에서 16으로의 마이그레이션 과정 공유 및 다음 번에는 AWS 블루-그린 배포를 사용할 계획.""
     * AWS Route53의 DNS 레코드를 사용하여 데이터베이스 마이그레이션 스크립트가 DNS 가중치를 업데이트하고 1초의 TTL이 만료되기를 기다리는 방법을 설명함.

     ""AWS Route53의 DNS 레코드를 활용하여 데이터베이스 마이그레이션 스크립트가 DNS 가중치를 업데이트하고 TTL 만료를 기다리는 방법 설명.""
     * Amazon이 '정부-서비스' 제품을 출시할 것을 기대하는 농담을 함.

     ""Amazon이 '정부-서비스' 제품을 출시하기를 기대하는 농담.""
     * AWS DMS를 사용하여 AWS RDS MySQL에서 RDS PostgreSQL로 데이터셋을 마이그레이션하는 경험을 공유하고, 스키마 변환 도구 사용을 권장하지 않음.

     ""AWS DMS를 사용한 AWS RDS MySQL에서 RDS PostgreSQL로의 데이터셋 마이그레이션 경험 공유 및 스키마 변환 도구 사용 비권장.""
"
"https://news.hada.io/topic?id=12966","R&D 상각으로 인해 고통받는 수천 개의 소기업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       R&D 상각으로 인해 고통받는 수천 개의 소기업

        Hacker News 의견

     * 열정적인 주제에 대한 댓글
          + 미국 내에서 발생하는 비용에 대한 감가상각을 2025년까지 연기하는 '미국 가족 및 근로자를 위한 세금 감면 법안 2024'가 하원에서 진전을 보임.
          + 이 법안은 해외 감가상각에는 영향을 주지 않음.
          + 작성자는 이 법안 때문에 사업 시작을 미루고, 다른 나라에서 법인 설립을 고려 중임.
          + Small Software Business Owners Association에 가입할 것을 권장함.
     * 소프트웨어 비즈니스 소유주 협회의 행동 촉구
          + Michele Hansen이 이끄는 협회는 세금 거래에 관한 최신 소식을 제공하며, 의원들에게 어떻게 관심을 끌고 어떤 스크립트를 사용해야 하는지 안내함.
     * 새로운 세금 규정이 소규모 비즈니스에 미치는 영향
          + 새로운 세금 규정 하에서는 R&D 급여를 즉시 비용으로 처리할 수 없고, 5년에 걸쳐 감가상각해야 함.
          + 이로 인해 이익을 내지 않은 스타트업도 세금을 납부해야 하는 상황 발생 가능성.
     * R&D 감가상각 가속화에 대한 공정한 논평
          + R&D 감가상각 가속화는 세금 면제의 일종으로, 일부는 이를 합법적인 R&D 활동에 대한 지원으로 보고 있음.
          + 이러한 특별 대우를 제거하는 것이 정책적 실수라는 주장과 이에 반대하는 합리적인 입장이 공존함.
     * 규정 불복종을 제안하는 댓글
          + 직원의 직책이나 세금 분류를 변경하여 '이것은 R&D가 아닌 급여'라고 주장하라는 제안.
          + 소규모 회사에 대한 감사 위험을 감수하는 것이 파산보다 낫다는 의견.
     * 세금 변경에 대한 추가적인 수학적 설명
          + 입법자들이 이러한 변화를 몇 년간 연기하거나 국내 직원에 대한 공제를 허용하는 방안을 논의 중임.
          + 예산 서명에 따라 모든 것이 달라질 수 있음.
     * Gergely Orosz의 배경 설명
          + Gergely Orosz가 Twitter와 뉴스레터를 통해 유용한 배경 정보를 제공함.
     * R&D를 저해하는 정책에 대한 비판
          + R&D를 저해하는 정책은 미국의 최근 역사에서 흔한 일이지만, 어리석은 정책으로 여겨짐.
          + 미국은 물리적 제품 제조에서 벗어나 더 수익성 높은 소프트웨어 제작으로 전환하려 했으나, 이러한 정책은 그 노력에 역행함.
     * 세금 규정 변경의 장기적 영향
          + 이미 한 세금 연도 동안 이 규정이 적용되어 많은 회사들이 영향을 받고 있음.
          + 몇 달 내에 변경되지 않으면 새로운 표준이 될 수 있으며, 일부 대기업은 이미 급여 감가상각을 예상하여 조치를 취하고 있음.
          + 아웃소싱을 크게 처벌하는 이 규정의 일부는 유지될 가능성이 있음.
"
"https://news.hada.io/topic?id=12905","TinyML: 초저전력 머신러닝 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          TinyML: 초저전력 머신러닝 기술

TinyML이란 무엇인가

     * TinyML은 마이크로컨트롤러에서의 머신 러닝 사용을 의미함.
     * 전통적인 ML에서 사용되는 시스템과 달리, CPU와 RAM이 매우 적고, 전력 소비가 밀리와트 또는 마이크로와트 수준인 시스템에서 사용됨.
     * 큰 모델을 축소하여 자원이 매우 적은 장비와 마이크로컨트롤러에서 사용할 수 있도록 하는 작업을 수행함.
     * TinyML 재단의 공식 웹사이트는 https://www.tinyml.org/
     * 하버드 대학에서 무료로 제공하는 3개의 강좌 시리즈가 있음:
         1. TinyML의 기초 (무엇을 만들고, 왜 만들며, 어떤 문제가 있는지)
         2. TinyML의 응용 (데이터 기반, 편향 등)
         3. TinyML 배포 (모델을 어디에 배치할지, 보안 및 개인 정보 보호)

TinyML의 기본 원리

     * 마이크로컨트롤러를 사용하는 임베디드 시스템은 최대 256kB의 메모리를 가지고 있어 큰 모델을 작동시킬 수 없음.
     * 마이크로컨트롤러와 함께 사용할 수 있는 몇 가지 운영 시스템 예시:
          + FreeRTOS
          + Mbed OS
     * 머신 러닝은 데이터에서 패턴을 찾는 알고리즘으로 구성됨.
     * TinyML에서는 이러한 알고리즘을 압축하여 데이터에서 패턴을 효과적으로 찾을 수 있도록 함.
     * IoT에서 하루에 생성되는 데이터는 5퀸틸리언 바이트이며, 이 중 1% 미만만 분석됨.

알고리즘 압축 기법

     * 가지치기(Pruning)
          + Synapsis 가지치기: 모델에서 네트워크 연결을 제거함. 때때로 정확도가 감소할 수 있음.
          + Neurons 가지치기: 모델에서 전체 뉴런을 제거하여 네트워크의 계산 요구를 줄임.
     * 양자화(Quantization)
          + 값들을 작은 범위 내에서 이산화함. 예를 들어, 부동 소수점을 -128에서 127 범위 내로 이산화하면 256개의 값만 탐색하면 됨.
          + 4바이트에 저장되는 부동 소수점 값을 1바이트에 저장되는 정수 값으로 바꾸면 크기가 4배 줄어듦.
          + 제한된 자원 때문에 TinyML에서 양자화는 매우 중요함.
     * 지식 증류(Knowledge distillation)
          + 지식과 노하우를 적용하여 모델을 작게 만듦.

도구

     * TensorFlow Lite 사용.
     * TensorFlow는 ML 연구자에 초점을 맞춘 반면, TensorFlow Lite는 애플리케이션 개발자를 위함.

TinyML의 사용

     * DIY, 메이커, 해커 세계에 특화된 TinyML의 사용 사례를 이 웹사이트에서 찾을 수 있음.

산업에서의 TinyML 사용

     * 산업 분야에서는 유지보수에 사용되어 진동이 발생할 때 고장이 날 것을 경고함으로써 효율성을 높이고 비용을 절감함.
     * 정확도 문제로 인해 거짓 경보가 발생할 수 있으며, 거짓 경보의 책임은 운영자 또는 시스템에 있음.

환경에서의 TinyML

     * 데이터를 수집한 후 처리하는 대신, TinyML을 사용하면 환경 변화에 대한 실시간 답변을 얻을 수 있음. 예를 들어 야생 동물의 생활에서 변화를 실시간으로 알 수 있음.

인간을 위한 TinyML

     * 장애가 있는 사람들이 손을 사용하지 않고도 더 많은 작업을 수행할 수 있도록 도움.
     * 애플리케이션의 UI와 UX를 개선하여 사용하기 쉽게 만듦.
     * 기술은 인간의 경험을 향상시키기 위해 만들어짐. 기술은 사람들을 도와야 함.

위험성과 단점

     * 모든 인구 집단에서 잘 작동할 것인가?
     * 데이터의 개인 정보 보호가 보장되는가?
     * 이 데이터를 보호할 수 있는가?
     * 인간 중심의 AI를 기반으로 기술을 만들어야 함. 설계, 개발, 배포 과정에서 이를 고려해야 함.


    GN⁺의 의견

     * TinyML은 자원이 제한된 환경에서도 머신 러닝을 가능하게 하는 혁신적인 기술로, IoT 기기의 효율성과 지능을 크게 향상시킬 수 있음.
     * 가지치기, 양자화, 지식 증류와 같은 알고리즘 압축 기법은 머신 러닝 모델을 소형화하여 저전력 장치에서도 실행 가능하게 만드는 핵심 요소임.
     * TinyML의 적용은 산업 유지보수, 환경 모니터링, 장애인 지원 등 다양한 분야에서 인간의 삶을 개선하는 데 기여할 수 있으며, 이는 기술이 사회에 미치는 긍정적인 영향의 좋은 예임.

        Hacker News 의견

     * Rust TinyML 컴파일러 개발
          + 마스터 논문 프로젝트로 Rust 기반 TinyML 컴파일러를 개발함.
          + Rust 프로시저 매크로를 사용하여 컴파일 시간에 모델을 평가하고, 주어진 모델에 대한 추론을 수행하는 predict() 함수를 생성함.
          + TensorFlow Lite for Microcontrollers 및 기타 엔진보다 훨씬 더 작은 바이너리 크기를 달성함.
          + 8비트 ATmega328 (Arduino Uno)에서 음성 명령 인식기(TinyConv)를 실행하는 데 성공함.
     * TinyML 분야의 매력
          + TinyML은 매우 작은 하드웨어에서도 많은 것을 할 수 있는 멋진 분야임.
          + 예를 들어, esp32-s3를 사용하여 실시간 컴퓨터 비전 시스템을 구축할 수 있음(가격은 약 2달러).
          + AutoML과 같은 솔루션을 통해 TinyML 분야에 쉽게 접근할 수 있음.
          + 하드웨어 회사들이 소비 전력을 최소화하기 위해 NPU를 탑재한 MCU를 제공하기 시작함.
          + TinyML은 앞으로 더 많은 주목을 받을 가능성이 높음.
     * LLM을 이용한 인프라 타겟 바이러스
          + LLM(Large Language Models)을 사용하여 인프라를 대상으로 하는 바이러스를 상상함.
          + 소형 장치를 전력망에 숨겨 네트워크 트래픽을 수집하고 시스템을 파괴하려고 시도할 수 있음.
          + 이러한 장치는 네트워크 장비에 숨겨져 외부 트래픽을 필요로 하지 않으므로 탐지하기 어려움.
     * Edge Impulse의 TinyML / Edge ML 설명
          + Edge Impulse는 ML 모델을 구축하고 에지 디바이스에 배포할 수 있는 플랫폼을 구축함.
          + 사용자는 계정을 만들고 키워드 스팟팅 모델을 구축한 후 WASM에서 직접 실행할 수 있음.
          + 임베디드 가속기 ASICs/NPUs의 등장이 Edge ML의 채택을 주도하고 있음.
     * Hacker Box의 ESP32 및 Tensor Flow Lite와 Edge Impulse 사용 예
          + 최근 Hacker Box에서 ESP32와 Tensor Flow Lite, Edge Impulse를 사용한 자세한 예제를 제공함.
     * TinyML의 현재와 미래
          + TinyML은 저전력 임베디드 디바이스에서 머신 러닝을 실행하는 것을 의미함.
          + 모든 휴대폰에는 ""Hey Google"" 또는 ""Hey Siri""와 같은 키워드를 감지하는 저전력 DSP 칩이 탑재되어 있음.
          + TinyML은 에지 AI의 하위 집합으로, 네트워크 가장자리에 위치한 모든 유형의 장치를 포함함.
          + 이 분야는 매우 흥미롭고, 다양한 문제를 해결하고, 거의 모든 공간에 적용될 수 있는 기술임.
     * TinyML에 대한 다양한 의견
          + TinyML 분야는 제약이 있는 솔루션을 만드는 것이 중요한 영향을 미칠 것이라는 의견이 있음.
          + TinyML은 IoT와 유사하게, 미래의 중요한 기술로 간주되지만, 실제로는 느리게 발전하고 있음.
          + TinyML 분야의 추가 콘텐츠를 찾는 이들을 위해 아시아 2023 컨퍼런스의 비디오들이 제공됨.
"
"https://news.hada.io/topic?id=12925","슬랙봇을 활용한 기술 블로그 배포 자동화 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       슬랙봇을 활용한 기술 블로그 배포 자동화 방법

     * 기술 블로그에 콘텐츠를 자동 배포하는 슬랙봇을 개발한 과정과 방법
     * 개발 과정
          + 1.자동화 계획 세우기
               o 첫째, 기술 블로그에 콘텐츠를 배포할 때 기존에 이용하던 도구(노션, GitLab)를 새로운 도구에(슬랙봇) 통합하기로 함. 구성원이 새 배포 시스템에 쉽고 빠르게 적응하도록 유도하기 위함
               o 둘째, TypeScript 프레임워크를 사용하기로 결정. TypeScript는 널리 사용되며, 이는 정적 타입 언어라서 안정적으로 개발할 수 있음. 이는 새로운 배포 시스템을 쉽고 편리하게 유지보수하는 데 도움이 됨
               o 셋째, 사용자 친화적인 상호작용을 지원하기
               o 슬랙봇을 선택한 이유
                    # 슬랙봇이 이러한 원칙을 모두 충족함
                    # 슬랙봇은 ‘Bolt’라는 프레임워크를 제공함. 이는 JavaScript, Java, Python 뿐만 아니라 문서도 잘 지원함. 이를 참고하면 기술 블로그 배포 자동화 도구를 개발하기가 쉬움. 로컬 환경에서 실행해도 슬랙 애플리케이션에서 도구를 테스트할 수 있음
                    # 슬랙은 사용자에게 보이는 화면을 ‘Block Kit’ 기능으로 설계하도록 지원함. 화면 흐름을 JSON으로 설계하고 함수로 데이터를 처리하면 직관적으로 상호작용할 수 있음
          + 2.화면 그리기
               o 슬랙은 사용자와 상호작용하는 데 활용하도록 메시지와 모달을 지원함
               o 기술 블로그에 콘텐츠를 배포하는 워크플로를 모달로 구현
               o 슬랙봇 활용한 기술 블로그 배포 과정
                    # 블로그 게시: 무슨 콘텐츠를 어디에 배포할지 선택
                    # 블로그 유효성 검사: 메타데이터와 커버 이미지 등 프론트엔드에 필요한 요소가 배포하려는 콘텐츠에 모두 있는지 확인
                    # GitLab 이슈/MR 검사: GitLab에 이슈와 MR을 생성하는 단계. 이슈와 MR이 이미 있다면 해당 MR에 커밋
                    # 완료 메시지: 배포가 완료되면 노션의 콘텐츠 원본 링크와 GitLab MR 링크를 포함하는 메시지를 남김
          + 3.봇 설계, 제작하기
               o 봇 하나로 노션, GitLab 등 다른 서비스와 모두 상호작용하려 함
               o GitLab에 CI/CD 파이프라인을 생성해 애플리케이션을 배포하거나 봇을 수정할 때, 이 방식이 더 유리할 걸로 판단함
               o 봇 개발에는 TypeScript 언어와 슬랙에서 지원하는 Bolt 프레임워크를 사용함
               o 폴더 구조는 NestJS에서 영감 받아 채택
                    # workflow.ts : 화면과 데이터 흐름을 정의하며, 모든 워크플로의 시작점
                    # service.ts : 비즈니스 로직을 정의함
                    # model.ts : 슬랙 또는 서드파티 API와의 데이터 타입을 정의함
                    # modal.ts : 사용자와 상호작용하는 화면을 정의함
          + 4.봇 작동방식
               o 슬랙에서 아무 채널에나 명령을 입력하면 봇이 호출됨
               o 이때 노션의 콘텐츠 제목과 콘텐츠를 올릴 채널을 선택하고, ‘제출하기’ 버튼을 누르면 자동으로 필수 메타데이터 입력 여부를 검색함
               o GitLab ID, 저자 이름, md 파일명, 커버 이미지, <!--truncate-->등이 입력해야 할 메타데이터인데 이 중 하나라도 빠지면 콘텐츠를 올릴 수 없음
               o 필수 메타데이터가 모두 입력돼 있으면 ‘계속하기’ 버튼을 눌러 다음 절차로 넘어갈 수 있음
               o 이때 GitLab에 해당 콘텐츠의 이슈와 MR이 자동 생성됨
               o MR에 레이블도 자동으로 달리고, 콘텐츠를 배포하는 파이프라인까지 자동으로 실행됨
               o 파이프라인 실행이 완료되면 GitLab 리뷰 앱으로 콘텐츠 배포 상태를 미리 확인할 수 있음
     * 도입 결과
          + 테크니컬 라이터와 엔지니어가 기술 블로그에 콘텐츠를 배포하기 위해 MR을 만드는 빈도는 약 30% 증가
          + 클릭 한 번으로 1분 안에 콘텐츠를 배포
          + 파이프라인 실패율이 5% 아래로 줄어듦
"
"https://news.hada.io/topic?id=12894","여성이 구입한 빈티지 드레스, 비밀 주머니 속의 수수께끼 같은 쪽지 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                여성이 구입한 빈티지 드레스, 비밀 주머니 속의 수수께끼 같은 쪽지 발견

     * 1880년대 빈티지 드레스의 발견
          + 사라 리버스 코필드는 메인 주의 골동품 상점에서 1880년대의 빈티지 드레스를 발견함.
          + 드레스는 섬세한 자수, 청동색 실크, 금속 버튼이 잘 보존되어 있었으며, 가격을 $125에서 $100으로 깎아 구매함.
     * 드레스 속 비밀 주머니에서 발견된 수수께끼
          + 드레스의 비밀 주머니에서는 'Bismark, omit, leafage, buck, bank' 등의 무작위 단어와 장소가 적힌 두 장의 종이가 발견됨.
          + 종이에는 시간을 나타내는 듯한 주석이 있었고, 드레스에는 'Bennett'이라는 이름이 수기로 적힌 태그가 있었음.
          + 코필드는 이 단어들이 무엇을 의미하는지, 왜 비밀 주머니에 숨겨져 있었는지에 대해 궁금증을 가짐.
     * 온라인 탐정들의 미해결 사건
          + 코필드는 2014년 블로그에 드레스와 종이에 대한 글을 올렸으나, 해결되지 않음.
          + 온라인 탐정들은 '비밀의 실크 드레스 암호'라고 부르며 다양한 음모론을 제기함.
          + 일부는 베넷이 스파이였을 것이라고 추측하며 암호화된 메시지를 사용했을 것으로 추정함.
     * 캐나다 연구자가 코드를 해독
          + 웨인 챈은 2018년 여름 온라인에서 코드를 발견하고, 170개의 코드북을 조사했으나 일치하는 메시지를 찾지 못함.
          + 챈은 텔레그래프 시대의 날씨 코드를 연구하며, 19세기 말 미국의 국가 기상 서비스였던 육군 신호대가 사용한 텔레그래프 날씨 코드를 발견함.
          + 각 단어는 특정 위치와 시간의 기상 변수를 나타내며, 메시지는 1888년 5월 27일의 날씨 보고서였음을 밝혀냄.
     * GN⁺의 의견
          + 이 기사는 과거의 일상에 대한 흥미로운 통찰을 제공함. 19세기 말 텔레그래프를 통한 날씨 보고서의 암호화 방식을 이해할 수 있음.
          + 온라인 커뮤니티의 협력과 전문가의 지식이 결합되어 오래된 미스터리를 해결한 사례로, 협업의 중요성을 강조함.
          + 이러한 발견은 역사적인 문서나 유물이 현대 기술과 연구를 통해 새로운 이야기를 드러낼 수 있음을 보여줌.

        Hacker News 의견

     * 상업용 코드에 대한 언급
          + 1910년 상업용 코드의 한 페이지 스캔이 위키백과에 있음.
          + ""어제 분만, 쌍둥이 모두 사망, 어머니 생존 불투명""이라는 문구가 ""Annosus""라는 단일 코드 단어로 표현된 것에 대해 놀라움을 표함.
          + ""유니코드 — 보편적 전신 코드북""에 대한 링크 제공.
     * 전신 코드에 대한 개인 경험
          + 스탠포드 도서관에서 한 전신 코드북을 발견했음, 모든 ""단어""는 네 음절로 이루어져 있고 더 긴 구절을 나타냄.
          + 전신 회사가 청구 규칙을 변경하여 알려진 단어만 한 단어로 청구하고 그 외는 더 높은 요금이 부과되는 내용의 쪽지를 책과 함께 발견함.
          + 전형적인 전신 코드인 ""The Anglo-American Code to Cheapen Telegraphy and Furnish a Complete Cypher""에 대한 링크 제공.
     * 포쉬마크에서 버버리 코트 구매와 관련된 일화
          + 아내가 포쉬마크에서 100달러에 버버리 코트를 구매했는데, 고품질의 코카인이 무료로 포함되어 있었다고 함.
     * 미래의 후손들이 맥북을 발견하는 상상
          + 먼 미래에 증손자들이 2020년대 초의 맥북을 발견하고, VSCode에 열려 있는 암호 같은 기호들을 보며 이란과의 갈등과 관련된 코드라고 추측할 것이라고 상상함.
          + 실제로는 웹팩을 작동시키려다 실패한 사람의 이야기일 것이라고 덧붙임.
     * 실크 드레스에 숨겨진 암호 이야기에 대한 링크
          + 이야기의 더 자세하고 나은 버전을 링크로 제공함.
     * 날씨 보고서로 위장된 스파이 통신에 대한 상상
          + 기사에서 날씨 보고서 아이디어를 소개할 때, 이것이 날씨 보고서로 위장된 스파이 통신일 수도 있다는 희망을 가졌다고 함.
          + 코드가 적힌 쪽지가 엘리자베스 베넷이 스파이인 척 농담하며 자매들과 놀 때 주머니에 들어갔을 수도 있다고 상상함.
     * ARINC717 데이터 스트림의 압축된 12비트 ""단어""에 대한 경험
          + ARINC717 데이터 스트림에서 매우 압축된 12비트 ""단어""를 처음 접했을 때의 경험을 공유함.
          + 네 가지 값이 있는 것은 두 비트를 받고, 싱크로 응답 곡선이 있는지 여부에 따라 이진수를 출력하는 등, 수천 개의 ""단어""가 모두 함께 압축되어 있음.
          + 미래의 연구자가 되어 이러한 큰 블록의 구분되지 않은 이진수를 해독하려고 노력하는 상상을 함.
     * 정보 엔트로피 개념에 대한 언급
          + 기사에서는 정보 엔트로피 개념을 암시하지만 실제로는 논의하지 않음.
          + 메시지의 각 단어는 많은 정보를 전달하기 때문에 매우 높은 엔트로피를 가짐.
          + 정보 엔트로피 개념에 대한 직관적인 소개를 제공하는 XKCD What If 기사 링크를 공유함.
     * 전신 메시지 비용에 대한 정보
          + 10달러로 10개의 단어를 보낼 수 있었는데, 이는 오늘날 약 27달러에 해당함.
     * 사토시 지갑 접근 시도에 대한 질문
          + 누군가 사토시의 지갑에 접근을 시도해봤는지에 대한 질문.
"
"https://news.hada.io/topic?id=12907","그누보드6 파이썬 버전으로 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           그누보드6 파이썬 버전으로 출시

     * 그 동안 PHP 버전으로 개발되었던 그누보드가 버전 6부터는 파이썬으로 개발되었음.
     * Python 3.8버전부터 3.12버전까지 모두 지원
     * FastAPI 기반으로 개발됨
     * 아파치 서버 대신 바로 uvicorn으로 서빙이 가능하게 개발되어있음.
     * 파이썬으로 개발되었기 때문에 각종 플러그인 개발이 매우 용이할 것으로 보임.

   슬프게도 G6은 사실상 개발 중단되었습니다. 마지막 커밋이 8개월 전이고, 한동안 변하지 않을 것으로 보입니다.
   https://sir.kr/co_notice/1430

   제가 전반적으로 반대에 가까운 입장이었음에도...
   PHP가 아닌 국산 CMS가 생길수도 있다는 점에서 유의미한 시도라고 생각했으나 아쉽게 되었네요.
   기존의 G5를 좀 더 깔끔하게 다듬는데에 집중한다고 하니, 라이믹스 이외의 옵션이 하나 더 남아있다는 점에서 위안을 삼아야겠습니다.

   fastAPI라 headless로 갈 줄 알았는데 그냥 전통적인 형태에 파이썬으로 바꾼 거였네요. fastAPI는 기본적으로 API 서버를 만들기 위한 목적의 프레임웍이고 홈페이지에서도 그렇게 나와있습니다. 전통적인 형태면 장고나 플라스크가 맞을텐데 말입니다.

   저희 커뮤니티도 그누보드5 로 잘 운영하고 있습니다.
   Web 와 PHP를 잘 모르지만 배워가며 하고 있습니다.
   이제 파이선도 도전해 보면 재미날 듯 합니다.^^
   개인적으로 그누보드에 감사하다는 말씀 전합니다.

   하필 파이썬 ㅠㅠ

   여기만큼 오픈소스에 기여하는 곳이 있나요. 저는 너무 도윰 많이 받고 있습니다.

   와~ 대단하네요

   흐흠... 아무래도 새로 진입하는 사람들은 파이썬이라서 좋다... 할 수도 있을 것 같긴 한데..
   기존에 그누보드 이용해서 뭔가 구축하던 사람들은 아마 넘어가지 않을 것 같다는게 제 생각이고요,
   그래서 호응이 클지는 잘 모르겠어요.

   국내 호스팅사들이 파이썬 웹호스팅 환경을 많이 지원해주겠네요~

   놀라운 변화네요. 이런 큰 변화가 그누보드 환경에 어떤 영향을 끼칠지 궁금합니다.

   파디썬으로 개발된 부분은 매우 환영합니다.
   매우 용이할 것으로 보임은 어떤부분인가요

   그누보드도 XE도
    1. 전문적인 프로그래밍 지식이 적은 사용자가
    2. 저렴한 웹호스팅 서비스 위에서 간단하게 서빙할 수 있으며
    3. 기존에 존재하는 수많은 플러그인을 활용할 수 있는
    4. 한국형(?) CMS
       라는게 최대 장점이고, 채용하는 사실상 유일한 근거인데,

   4번을 제외한 장점을 다 잃어버리는 변화인데다가,
   그 손해를 메꿀만큼 G6의 코드 퀄리티나 구조가 이쁘게 잡힌것도 아니라서... 저는 회의적입니다.

   파이썬 유저들이 G6으로 신규 프로젝트를 진행하기엔 코드가 너무 레거시 PHP스럽고,
   기존 그누보드 유저들이 G6으로 마이그레이션 하기엔 사실상 단점밖에 없는 상황이라...
   스읍...

   1 은 테마가 나오면 상관없는 부분일거 같아요
   Fastapi 자체가 구조라는게 딱히 없어서 구조잡힌건 어떤지 궁금하네요

   그누보드의 최대 단점이라고 이야기 되는게 기능 하나 추가할 때 마다 누덕누덕 기워져서 관리가 어려워진다는건데, 말씀하신대로 FastAPI부터가 딱히 구조라는게 없어서 기존의 문제를 그대로 답습할 가능성이 높아 보입니다.

   그누보드의 장점(?)을 그대로 살렸다고 볼수도 있기는 하겠습니다만...

   2번은 닭이 먼저냐 달걀이 먼저냐 문제겠지만 파이썬으로 호스팅해야하는 서비스가 늘어나면 점점 많은 업체들이 관련 서비스를 제공할 수 밖에 없을거라고 생각하고 그누보드의 영향력을 생각하면 아마 꽤나 많은 변화가 있을거라고 생각합니다.

   3번은 앞으로 개발될 플러그인은 비교적 쉽게 개발 할 수 있다는 점에서 트레이드 오프가 있는것 같고요.

   글쎄요. shared 호스팅(한국에서는 이걸 웹호스팅이라고 부르죠 주로)이 외국에서도 PHP 기반이지 파이썬 기반 shared 호스팅은 드물어서.

   okkoreaq 님의 1번 관련 이야기와도 이어지는 이야기입니다.

   그누보드는 (적어도 지금까지는) 사실상 개발자가 아닌 사용자들을 타게팅한 솔루션이라고 볼 수 있는데, 그런 사용자 입장에서는 터미널을 켜야하는 것부터가 부담이 됩니다. PHP에 비해 간단하게 서빙하고 관리하기 어렵다는거죠.

   내가 쓸 무언가를 그누보드로 제작을 해야한다면 G6을 사용할 것 같습니다만,
   개발자가 아닌 지인에게 G5, G6 둘 중 하나를 추천해야 한다면, G6이 충분히 성숙해지더라도 G6을 추천하지는 못할 것 같습니다.

   파이썬 애니웨어 같은 것 보면 원터치로 장고가 설치됩니다.
   기존 웹호스팅 업체도 PHP 버전의 그누보드를 원터치로 설치해 주었구요.
   굳이 G6만 그런 방식에서 예외가 될 거라는 생각을 하신 이유라도 있을까요?

   굳이 자동 설치 방식이 아니더라도...
   PHP가 세팅이 어려워서 XAMPP 등으로 개발환경을 설정하고,
   작업물을 FTP로 올렸던 거 생각하면...
   pip installl -r ..... 로 설치하고 git clone 해주고.. uvicorn main:app --reload
   명령어 3개 정도면 서버가 돌아갈 텐데요.. 이게 그렇게 어려운 건가라는 생각도 해봅니다.

   저는 코드스타일적인 측면은 막 포팅을 마친 상황에서는 어쩔수 없다고 생각하고요. 그 부분은 프로젝트 성숙도가 올라가면서 개선될 거라고 생각합니다.

   장족의 발전이네요. 훌륭합니다.

   감동적이네요...

   이제는 잊혀진 이름이 된 줄 알았는데 이런 발전이 있었군요

   와 대단합니다. 어릴 떄나 봤떤 xe 랑 그누보드였는데 ㄷㄷ

   프로젝트명 G6 멋지네요 ㅋㅋ
   옛날에 Like a G6 라는 노래에서 G6 가 제트기를 상징한다는 이야기를 들었었는데 혹시 여기서 모티브가 되었으려나요 ㅎㅎ

   엥..? 굉장히 놀라운 소식이네요.

   XE 3는 뭐하나...
"
"https://news.hada.io/topic?id=12954","후지쯔 버그로 무고한 사람들이 감옥에 간 것은 "처음부터" 알려져 있었다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                후지쯔 버그로 무고한 사람들이 감옥에 간 것은 ""처음부터"" 알려져 있었다

영국 우체국 스캔들 - 처음부터 알려진 후지쯔 버그로 무고한 사람들이 감옥에 감

     * 후지쯔의 유럽 부문 공동 CEO인 폴 패터슨이 공개 청문회에서, 후지쯔 소프트웨어 버그가 처음 시스템 배포부터 알려져 있었다고 증언함.
     * 1999년부터 2015년까지 후지쯔의 결함이 있는 회계 소프트웨어로 인해 900명 이상의 부우체국장들이 도난이나 사기 혐의로 기소되고 유죄 판결을 받음.
     * 이 중 일부는 실제로 감옥에 가고, 다른 일부는 우체국에 손실을 보상하기 위해 돈을 지불해야 했으며, 현재까지 93건의 유죄 판결만이 뒤집혔음.

우체국 변호사들이 후지쯔 증인 진술서를 재작성함

     * 법정에서 우체국 직원들에 대한 사건을 심리하는 동안, 1999년에 발견된 29개의 버그에 대해 알리지 않았음.
     * 버그가 인정될 때, 후지쯔 직원들의 법정 증언이 우체국에 의해 편집되었으며, 우체국은 시스템이 잘 작동한다는 주장을 유지하며 무고한 사람들을 법정에 끌고 갔음.
     * 패터슨은 후지쯔와 우체국이 피고인들에게 실패했다는 데 동의하며, 이러한 행위를 부끄럽고 끔찍하다고 표현함.

버그는 ""1999년까지 거슬러 올라감""

     * 패터슨은 영국 의회 위원들에게 후지쯔가 이러한 정의의 오류에 대한 책임이 있음을 인정하고 사과하며, 피해자들에 대한 보상에 기여할 도덕적 의무가 있다고 말함.
     * 변호사들이 피해자들을 대표하여 질문할 때, 패터슨은 후지쯔와 우체국이 1999년부터 문제를 이해하고 있었다고 답변함.
     * 영국 정부는 거짓으로 유죄 판결을 받은 사람들을 신속하게 무죄 선고하고 보상하기 위한 새로운 법안을 계획 중임.

    GN⁺의 의견

     * 이 기사는 영국 우체국 스캔들에 대한 중요한 정보를 제공하며, 기술적 결함이 어떻게 심각한 사회적, 법적 결과를 초래할 수 있는지 보여줌.
     * 후지쯔의 소프트웨어 버그가 잘못된 유죄 판결로 이어진 것은 기술 회사의 책임과 윤리에 대한 중요한 논의를 촉발시킴.
     * 이 사건은 소프트웨어 품질 관리의 중요성을 강조하며, 기술적 오류가 개인의 삶에 미치는 영향에 대한 인식을 높이는 계기가 됨.

        Hacker News 의견

     * 폴 패터슨, 후지쯔 유럽 부문 공동 CEO는 후지쯔 직원들이 우체국에 제공한 증언에 중요한 세부 사항이 누락된 것에 대해 놀랐다고 말함. 또한 다른 사람들이 증언을 편집한 증거를 목격했다고 언급함.
          + 이 스캔들이 계속 악화되는 것에 대해 의문을 제기하며, 아직 발견되지 않은 불법 행위가 있을 것이라는 의심을 표함.
     * 위키피디아에 따르면, 우체국은 1999년부터 2015년까지 700명의 소규모 우체국장을 기소했음. 이는 약 8일마다 한 건의 기소로, 이렇게 높은 기소율에 대해 우체국이 내부 조사를 실시했어야 한다는 의문을 제기함.
     * 현재도 기소가 진행 중이며, 이는 우체국 대신 영국 왕립검찰청(Crown Prosecution Service)이 주도함. 후지쯔는 여전히 데이터를 제공하고 있으며, 소규모 우체국장들은 여전히 Horizon 소프트웨어의 버그로 인한 잔액 오류를 호소하고 있음. 이로 인한 결손금은 그들의 급여에서 자동으로 공제됨.
     * 해커뉴스(HN) 스레드를 컴파일하려는 시도가 있었으며, 2012년 한 건의 제출과 한 건의 댓글이 있었고, 그 후 7년 동안 아무것도 없었다는 점이 흥미로움.
     * 영국과 웨일스에서는 사법 방해에 대해 최대 종신형을 선고할 수 있음. 증언을 재작성한 변호사들에게 이러한 처벌이 적절하다는 의견이 있음.
     * 후지쯔 직원들의 증언이 법정에서 들려질 예정이었으나, 우체국에 의해 편집되었다는 사실이 밝혀짐. 이에 대해 심각한 징역과 벌금을 부과해야 한다는 의견이 있음.
     * 대부분의 소프트웨어 프로젝트에서 버그와 문제가 있음을 알고 있지만, 이를 출시 지연의 장애물로 보지 않는 것이 일반적임. 그러나 사람들의 삶과 재정에 영향을 미치는 소프트웨어의 경우, 시스템의 버그가 아닌 사람들의 행동 때문일 수 있다는 것을 알면서도 범죄 행위를 계속 비난하는 것은 문제가 있음.
     * Horizon 버그를 수정하는 것이 비용이 많이 들었다고 우체국 조사에서 밝혀짐.
     * 후지쯔 CEO는 시스템의 버그와 오류가 있었고, 이로 인해 무고한 사람들이 감옥에 가게 된 것에 대해 사과함. 그러나 CEO의 사과가 진정성이 있는지 의심하는 의견도 있음.
     * 시스템의 전체적인 아키텍처 설계가 부적절했다는 의견이 있으며, 분산 시스템에 대한 전문가의 의견을 듣고 싶다는 관점이 있음.
"
"https://news.hada.io/topic?id=12960","Ceph: 1 TiB/s를 향한 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Ceph: 1 TiB/s를 향한 여정

Ceph: 1TiB/s로 가는 여정

     * Ceph 클러스터의 성능 개선 여정을 담은 기사로, 긴 디버깅과 성능 최적화 과정을 거쳐 1TiB/s의 데이터 처리 속도를 달성한 이야기.
     * Clyso라는 회사가 NVMe 기반의 10페타바이트 Ceph 클러스터 구축을 돕는 과정에서 발생한 다양한 기술적 문제와 해결책을 공유.
     * 고객사의 네트워크는 매우 빠르며, 이더넷 설정 중 가장 빠른 것 중 하나임.

감사의 말

     * Clyso의 고객사에게 감사를 표하며, 이들의 협력 덕분에 Ceph 커뮤니티와 경험을 공유할 수 있었음.
     * IBM/Red Hat과 삼성이 비교 테스트에 사용된 하드웨어를 제공해준 것에 대한 감사도 표함.
     * Ceph 기여자들에게도 Ceph를 훌륭한 소프트웨어로 만들기 위한 노력에 대한 감사를 전함.

클러스터 설정

     * 고객사는 17개 랙에 걸쳐 34개의 듀얼 소켓 2U 노드를 제안했으나, Clyso는 더 작은 노드를 사용하는 다양한 구성을 제안함.
     * 최종적으로 Dell 아키텍처를 선택하여 비용을 절감하고, 더 빠른 메모리 처리량, 더 많은 CPU 자원, 더 높은 네트워크 처리량을 제공함.
     * 노드 실패 시 클러스터 복구에 미치는 영향을 절반으로 줄임.

테스트 설정

     * CBT를 사용하여 임시 Ceph 클러스터를 배포하고 FIO 테스트를 실행함.
     * 라이브러리 기반 FIO 테스트를 사용하여 클러스터를 작은 단위로 나누고 이전 결과와 비교함.
     * 3X 복제와 6+2 손실 보정을 테스트하고, 메시지 버전 2를 암호화된 모드와 보안 모드로 테스트함.

PG 수에 대한 주의

     * PG 수가 성능에 미치는 영향을 실험적으로 테스트함.
     * 높은 PG 수가 성능에 긍정적인 영향을 미칠 수 있으나, 실제 생산 환경에서는 다른 설정과 함께 고려해야 함.

시작이 어려웠던 점

     * 하드웨어에 처음 로그인한 후, 예상보다 낮은 성능으로 인해 문제 해결에 어려움을 겪음.
     * 초기 성능 테스트는 좋았으나, 여러 OSD를 사용한 테스트에서 성능 저하가 발생함.

기묘한 동작

     * 다양한 OSD 테스트 조합을 실행하며 성능에 이상한 패턴이 있음을 발견함.
     * 시스템이 멀티-OSD 테스트 후 성능이 저하되었다가 몇 시간 후에 다시 회복되는 현상을 관찰함.

세 가지 해결책

     * CPU c-state 전환으로 인한 지연 문제를 해결하여 성능을 약간 향상시킴.
     * IOMMU를 비활성화하여 성능을 크게 향상시킴.
     * RocksDB 컴파일 플래그 문제를 해결하여 4K 랜덤 쓰기 성능을 두 배로 향상시킴.

2024년 첫 주

     * 새해 첫날 다른 클러스터의 대규모 장애로 인해 성능 테스트에 집중하지 못함.
     * 금요일에 성능 테스트를 재개하여 클러스터가 높은 부하 하에서도 잘 동작함을 확인함.

운명의 미소

     * 성능 테스트 결과가 좋아지면서 클러스터가 선형적으로 확장됨을 확인함.
     * 63개의 노드로 구성된 클러스터에서 635GiB/s의 데이터 처리 속도를 달성함.

부분적으로 작동하는 죽음의 별

     * 클라이언트 노드가 부족하여 OSD 노드와 FIO 프로세스를 공유해야 했음.
     * 이러한 설정에서도 950GiB/s에 가까운 성능을 달성함.

1TiB/s 도달

     * OSD 샤드 수와 메신저 스레드 수를 조정하여 1TiB/s의 데이터 처리 속도를 달성함.

수면; 손실 보정

     * 3X 복제로 테스트한 후, 고객사가 사용할 6+2 손실 보정으로 클러스터를 재구성하여 테스트함.
     * 읽기 성능은 500GiB/s 이상, 쓰기 성능은 거의 400GiB/s에 달함.

   GN⁺의 의견:
    1. 이 기사는 Ceph 클러스터의 성능 최적화 과정을 상세히 설명하며, 복잡한 문제 해결 과정을 통해 높은 성능을 달성한 사례를 보여줌으로써 기술적 통찰력을 제공함.
    2. 고객사와의 협력, 커뮤니티 기여자들의 노력, 그리고 다양한 하드웨어 및 소프트웨어 최적화 전략이 어떻게 실제 세계에서 큰 성과를 낼 수 있는지를 보여줌.
    3. 이 글은 대규모 데이터 스토리지 시스템을 다루는 전문가뿐만 아니라, 성능 최적화에 관심 있는 기술자들에게도 유익한 정보를 제공함.

        Hacker News 의견

     * CERN의 1TB/s 도달 소식과 Ceph의 역사
          + 한 사용자는 CERN에서 EOS 클러스터를 통해 1TB/s의 속도를 달성했다고 언급하며, 이 클러스터는 주로 HDD를 사용하고 더 많은 노드를 가지고 있다고 설명함. 또한, Ceph가 Dreamhost에서 내부적인 필요에 의해 창안되었고, 이후 Redhat에 의해 인수되었다는 흥미로운 역사를 공유함.
     * 과거 기술 리더의 경험과 Ceph에 대한 호감
          + 한 사용자는 Cisco에서 기술 리더로 일하며 Kubernetes를 베어 메탈에 설정하고 GlusterFS와 Ceph를 실험한 경험을 회상하며, 이러한 실험을 즐겼다고 언급함. 또한, 해당 글을 잘 쓴 것에 대해 칭찬함.
     * 노드 크기 축소에 대한 제안
          + 한 사용자는 현재 시스템의 노드당 에너지 소비가 높다고 지적하며, 노드 크기를 줄이는 엔지니어링 노력이 필요하다고 제안함. 이를 통해 더 적은 노드로도 충분하고, 단일 장애가 10개의 디스크에 영향을 미치는 것을 줄일 수 있다고 주장함.
     * 디지털 데이터 저장량의 역사적 관점
          + 한 사용자는 지난 60년 이내에 전 세계적으로 처음으로 1TiB의 디지털 데이터가 저장된 날이 있었을 것이라고 언급하며, 현재는 매초 그런 양의 데이터를 이동시키고 있다고 놀라움을 표현함.
     * Ceph 클러스터를 통한 Docker 캐시 성능 향상 경험
          + 한 사용자는 Docker 레이어 캐시를 유지하기 위해 Ceph 스토리지 클러스터를 운영하고 있으며, EBS에서 Ceph로 전환한 후 처리량이 크게 향상되었다고 경험을 공유함. 이 사용자는 Ceph가 거의 유지 관리가 필요 없다고 언급함.
     * Kubernetes 내 스토리지 컨트롤러 소프트웨어 문제
          + 한 사용자는 Kubernetes 내에서 동적 스토리지와 관련된 가장 큰 문제가 I/O와 관련된 것이 아니라, 스토리지 컨트롤러 소프트웨어가 실제 문제에 직면했을 때 발생한다고 언급함. 특히, rook/ceph와 Longhorn을 사용할 때 PVC가 오랜 시간이 지난 후에야 연결되는 문제를 경험함.
     * 하드웨어 이론적 한계 대비 1 TiB/s 성능 분석
          + 한 사용자는 1 TiB/s의 성능이 하드웨어의 이론적 한계와 어떻게 비교되는지 분석하고, 네트워크가 병목 현상을 일으키고 있음을 지적함. 또한, Ceph의 복잡성이 CPU에 상당한 부담을 주고 있으며, OSD 스레딩 모델이 최적화되지 않았다고 결론짓고 개선을 희망함.
     * Ceph와 다른 오브젝트 스토리지 엔진 비교 요청
          + 한 사용자는 Ceph와 MinIO, Garage 등 다른 오브젝트 스토리지 엔진과의 비교 및 벤치마크를 보고 싶다고 요청함.
     * Ceph의 트랜잭션 데이터베이스 스토리지 적합성과 IO 지연 시간 문의
          + 한 사용자는 Ceph가 트랜잭션 데이터베이스 스토리지로 적합한지, IO 지연 시간은 어떤지에 대해 질문하며, Oracle의 클러스터 파일 시스템이나 Veritas와 같은 시스템과 경쟁할 수 있는 저렴한 파일 시스템으로 이동하고 싶다는 의견을 나타냄.
"
"https://news.hada.io/topic?id=12962","유비소프트 공언: 구매한 것을 소유하지 않는 것에 익숙해지길 원한다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 유비소프트 공언: 구매한 것을 소유하지 않는 것에 익숙해지길 원한다

        Hacker News 의견

     * 원본 출처를 확인하는 것이 중요함. Ubisoft의 새로운 방향성에 대한 오해가 많기 때문에:
          + 게임을 다시 시작할 때 진행 상황이 그대로 유지되며, 플레이어가 게임에 투자한 것을 잃지 않음.
          + 소비자가 게임 소유권에 대해 편안함을 느끼기 위해서는 게임 내 투자한 것을 삭제하지 않고 유지해야 함을 의미함.
     * 게임 라이브러리와 진행 상황을 잃은 경험:
          + Stadia와 Ouya 서비스 종료로 인한 게임 라이브러리와 진행 상황 손실.
          + Audible에서 구매한 콘텐츠에 대한 접근 권한 상실.
          + 구독 모델을 통한 지속적인 수익 창출이 기업에게 유리하지만, 사용자 입장에서는 디지털 소유권을 커뮤니티가 보장하는 것이 더 합리적임.
     * 중고 게임 구매 및 판매의 장점:
          + 1년 전에 출시된 게임을 중고로 저렴하게 구입할 수 있는 이점.
          + 디지털 전용 게임의 경우 중고 거래가 불가능하여 플레이하지 않는 경우가 많음.
          + 게임 구독 모델의 비용과 중고 거래 비용이 비슷할 수 있으나, 서비스 분열에 대한 우려가 있음.
     * Ubisoft에 대한 보이콧 경험:
          + 10년 동안 Ubisoft를 보이콧한 경험을 공유하며, 회사가 파산할 경우 그리워하지 않을 것임.
     * 게임 구독 서비스에 대한 긍정적인 의견:
          + 일년에 한두 달 구독하여 최신 게임을 저렴한 비용으로 체험할 수 있는 장점.
          + Steam의 디지털 라이선스 모델이 PC 게임 산업에 가져온 변화와 편의성을 강조.
          + 게임 구독 서비스가 대부분의 사람들에게 저렴하고 접근성이 높아 게임을 즐기는 데 유리함.
     * 비디오 게임 보존에 대한 연구 및 관심:
          + 비디오 게임 보존의 중요성과 미래 세대가 과거 게임을 경험할 수 없게 될 위험성에 대한 우려.
          + 음악과 같은 다른 매체도 소유권이 보장되지 않을 가능성이 있음.
     * 게임 산업의 경쟁이 치열하여 구독 모델의 성공에 대한 회의적인 의견:
          + 인디 게임이 종종 뛰어난 품질을 보이며 AAA 게임보다 저렴한 가격에 제공됨.
          + 일관된 품질의 게임을 제공하는 몇몇 출판사만이 구독 모델을 정당화할 수 있음.
     * 지갑으로 투표한 경험:
          + 최신 온라인 플랫폼 대신 N64와 여러 클래식 게임을 구매하여 돈을 지출한 경험을 공유함.
     * Ubisoft의 영향력에 대한 의문:
          + 디지털 서비스와 스트리밍이 토렌트의 결과물이며, 게임 소유권을 제한하려는 시도에 대한 반발이 있을 것임.
     * Ubisoft에 대한 비판에 대한 반론:
          + World of Warcraft와 같은 게임에서 이미 서버 기반의 가치 제공 모델이 존재함.
          + 서버에 접속하지 않으면 게임의 가치를 누릴 수 없으며, 자체 서버를 만들 경우 법적 문제에 직면함.
"
"https://news.hada.io/topic?id=12906","HN에 묻다: 어디에서 좋은 법률 문서를 찾을 수 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN에 묻다: 어디에서 좋은 법률 문서를 찾을 수 있나요?

새 프로젝트 웹사이트 설정의 어려움

     * 새로운 부수적인 프로젝트를 시작할 때, 이용약관(T&C), 개인정보 보호정책 등 웹사이트 설정이 어려운 점 중 하나임.

유용한 자료 출처

     * 다음은 유용한 자료 출처 몇 가지임:
          + Common Paper: NDA(비밀유지협약), TOS(서비스 이용약관), SLA(서비스 수준 협약), DPA(데이터 처리 약정), CSA(클라우드 서비스 약정) 등.
          + YC Safe: 펀드레이징(자금 모집) 관련.
          + Clerky: 펀드레이징, 고용 등에 관련된 자료 제공.

추가 자료 출처 탐색

     * 이와 같은 자료를 더 찾고 있음.

  GN⁺의 의견

     * 웹사이트를 구축할 때 법적 문서 준비는 복잡하고 시간이 많이 소요되는 작업임. 이러한 문제를 해결하기 위해 Common Paper, YC Safe, Clerky와 같은 자원들이 매우 유용함.
     * 이러한 자원들은 특히 스타트업이나 소규모 프로젝트를 운영하는 개발자들에게 도움이 될 수 있음. 이들은 종종 법적 문서 작성에 필요한 전문 지식이나 자원이 부족하기 때문임.
     * 이 글은 법적 문서 작성에 어려움을 겪고 있는 개발자들에게 흥미롭고 도움이 될 수 있음. 또한, 이러한 자료 출처를 통해 시간과 비용을 절약하고, 프로젝트를 더 빠르고 효율적으로 진행할 수 있도록 지원함.

        Hacker News 의견

     * Common Paper와 관련된 해커뉴스 댓글 요약
          + Common Paper는 무료 표준 문서를 제공하는 데 있어 가장 좋은 서비스로 보임.
          + 해당 서비스에 대한 설명이 있는 포스트와 다른 유사 서비스도 링크로 제공됨.
     * 법률 문서와 관련된 해커뉴스 댓글 요약
          + 기술 분야에 특화된 대형 로펌들은 신생 기업을 위한 자료를 제공하며, 경쟁 서비스의 문서를 비교하는 것이 시작점이 될 수 있음.
          + 회사가 더 확립되어 있을수록 제공하는 문서가 법률 전문가에 의해 검토되었을 가능성이 높음.
          + 고용 관련 문제에 대해서는 SHRM의 ""Tools and Samples"" 자료가 유용함.
          + Thompson Reuters는 ""Practical Law"" 제품에 대해 7일 무료 체험을 제공함.
          + Techcontracts.com도 좋은 자원임.
          + 모든 문서는 특정 상황에 맞게 검토 및 수정이 필요하지만, 초안 작성에는 합리적인 출발점이 될 수 있음.
     * 스타트업 관련 해커뉴스 댓글 요약
          + 창업자들에게 반복적으로 제공하는 스타트업 관련 아이디어, 링크, 도구들을 모아둔 자료가 있음.
          + 많은 창업자들이 친구이거나 동료로, 이러한 자료들은 지속적으로 정리가 필요함.
     * 법률 문서 템플릿 관련 해커뉴스 댓글 요약
          + Techcontracts.com에서 유용한 템플릿을 찾을 수 있음.
          + 그러나 큰 사업을 시작하려면, 특히 온라인에 게시할 법률 문서 작성을 위해 변호사를 찾는 것이 더 나음.
     * 법률 문서 오픈 소스 작업 관련 해커뉴스 댓글 요약
          + 프로그래밍을 할 수 있는 변호사 Kyle Mitchell은 법률 문서에 대한 오픈 소스 작업을 많이 함.
          + 예를 들어, 고용/채용 문서와 같은 자료를 제공함.
     * 법률 문서의 중요성에 대한 해커뉴스 댓글 요약
          + 법률 문서는 변호사를 통해 작성해야 하며, 무료/저렴한 템플릿 문서는 비즈니스 맥락에 적합하지 않을 수 있음.
          + 문제가 발생했을 때 법률 문서에 의존해야 하는 상황에서 변호사를 고용하지 않은 것을 후회할 수 있음.
          + 법률 문서 작성을 위한 변호사 비용은 필수적인 비즈니스 비용임.
     * 표준화된 법률 협약의 이점에 대한 해커뉴스 댓글 요약
          + 표준화된 법률 협약이 있으면 양 당사자가 미리 장단점을 알기 쉬우며, 법률 자문이나 번거로운 법률 작업이 필요하지 않음.
          + 그러나 ""상황에 따라 다름""이라는 변호사의 흔한 대답은 종종 많은 미묘한 차이를 고려하지 않는 사람들에게 진실임.
     * 웹사이트 컴플라이언스 도구 iubenda에 대한 해커뉴스 댓글 요약
          + iubenda는 웹사이트 컴플라이언스를 위한 도구로, 개인정보 보호 정책, 이용 약관, 쿠키 및 동의 배너 등을 제공함.
          + 웹사이트 스캔을 시작으로, 적용될 법률에 기반한 특정 구성을 제안하며, 정기적으로 웹사이트를 스캔하여 비준수 사항을 확인함.
          + 기본 구성으로 시작할 수 있는 무료 플랜과 성장에 따라 지불하는 요금제가 있음.
     * 국제 거래와 법률 문제에 대한 해커뉴스 댓글 요약
          + 다른 국가의 고객과 거래할 때 적용되는 법률, 변호사 선택, 계약서 언어, 법적 분쟁 시 이용할 법원, 청구서 통화 등에 대한 질문이 있음.
     * 법률 문서 아웃소싱의 중요성에 대한 해커뉴스 댓글 요약
          + 무료 사이트에서 만든 문서나 다른 용어를 사용하는 문서는 종종 서비스에 맞지 않거나 부적절한 내용을 담고 있어, 결국 전문 법률 서비스에 아웃소싱함.
"
"https://news.hada.io/topic?id=12961","플랫폼 기울기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                플랫폼 기울기

애플 관련 이슈

     * 앱 스토어, 제3자 브라우저 엔진 금지: 상태 - 열림
     * iOS에서 제3자 다중 프로세스 애플리케이션 지원: 상태 - 열림
     * iOS에서 JIT 지원: 상태 - 열림
     * iOS에서 접근성 API: 상태 - 열림
     * iOS에서 메시지 통합: 상태 - 열림
     * iOS에서 브라우저 데이터 가져오기: 상태 - 열림
     * iOS에서 기본 브라우저 설정 및 확인: 상태 - 열림
     * iOS에서 제3자 브라우저 엔진을 위한 기원 기반 연관 도메인 의존 기능: 상태 - 열림
     * iOS에서 브라우저 확장 지원: 상태 - 열림
     * iOS에서 베타 테스팅: 상태 - 열림

구글 관련 이슈

     * 안드로이드에서 브라우저 데이터 가져오기: 상태 - 열림
     * 일부 안드로이드 기능이 사용자의 기본 브라우저 대신 크롬을 실행: 상태 - 열림
     * 안드로이드에서 제3자 브라우저 엔진에 대한 검색 결과 페이지 품질 저하: 상태 - 열림

마이크로소프트 관련 이슈

     * 윈도우에서 기본 브라우저 설정: 상태 - 열림
     * 여러 윈도우 흐름에 의해 기본 브라우저가 엣지로 설정: 상태 - 열림
     * 일부 윈도우 기능이 사용자의 기본 브라우저 대신 엣지를 실행: 상태 - 열림

   GN⁺의 의견:
     * 이 기사는 주요 소프트웨어 플랫폼에서 파이어폭스와 같은 제3자 브라우저가 불리하게 작동하는 기술적 문제들을 추적하는 대시보드에 대한 내용임.
     * 보안, 안정성, 성능, 기능성 측면에서 문제를 고려하고, 공정한 경쟁 환경을 조성하기 위한 변경을 제안함.
     * 이러한 문제들은 브라우저의 다양성과 혁신을 저해할 수 있으며, 사용자의 선택권과 경험에 영향을 미칠 수 있어 중요함.
"
"https://news.hada.io/topic?id=12984","Show GN: LLM을 통해 구하기 힘든 데이터를 만들어 드립니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show GN: LLM을 통해 구하기 힘든 데이터를 만들어 드립니다.

   AI를 활용한 제품을 개발하고 계신가요? 제품 MVP 는 만들어야 하는데 사용할 데이터가 없어서 고생하신적 있으신가요?

   그렇다면! MockPolar AI 를 사용하여 정말 ‘구하기 어려운’ 데이터를 클릭 몇번으로 손쉽게 가져가세요. MockPolar AI는 실리콘 밸리 Google, Amazon, LinkedIn, Samsung 출신 개발자 4명이 LLM 을 지지고 볶아 만들었습니다. 실제 데이터와 거의 구분 되지 않는 완결성 있는 데이터를 손쉽게 받아 보실 수 있습니다.

   현재는 베타 테스트로 Customer Service 데이터를 우선적으로 제공하고있습니다. 이외에 다른 Usecase는 얼마든지 신청 해주시면 감사하겠습니다.

   그럼 목폴라 AI 와 함께 따뜻한 겨울 보내세요!

   Option 2에 있는 Unsplash에서 가져오신거라 생각되는 저 사진은 다른 걸로 바꾸셔도 좋을 것 같아요. 7년 전 제 발표자료에서도 썼었고, 다른 분들 발표자료에서도 수도 없이 본 사진이라ㅠ 사용할 데이터를 만들어주시는 서비스이니 더더욱 : )

   저희가 급하게 만드느라 신경 못쓴 부분인데 피드백 감사합니다! 말씀해주신데로 이미지를 생성해서 다시 만들어 봤습니다. :)
"
"https://news.hada.io/topic?id=12926","애플, 웹 구매에 대한 악의적인 27% 세금 부과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      애플, 웹 구매에 대한 악의적인 27% 세금 부과

     * Apple은 웹 구매에 대해 반경쟁적인 새로운 27%의 세금을 도입
          + Apple은 이전에도 이런 조치를 취한 적이 없으며, 이는 가격 경쟁을 죽이는 행위
          + 개발자는 타사 결제 처리업체에 3~6%의 수수료를 지불하고 이 새로운 27%의 Apple세를 지불한 후에는 웹에서 디지털 아이템을 더 저렴하게 제공할 수 없음
     * Apple은 이러한 링크의 모든 측면을 통제하며 앱의 일반적인 결제 흐름에서 링크를 허용하지 않음
          + 오히려 링크는 사용자가 실제로 물건을 구매하는 곳에서 떨어진 앱의 다른 섹션으로 분리되어야 함
     * Apple은 개발자가 일반 웹 브라우저 세션을 열도록 요구하여 사용자가 구매를 위해 개발자의 웹 사이트에 다시 로그인해야 함
          + 그리고 결제흐름이 바뀌기 때문에 사용자는 구매하고자 하는 디지털 상품을 다시 검색해야 함
     * Apple은 경쟁 결제 처리업체에 불이익을 주기 위해 첨부한 것과 같은 자체적인 'Scare Screen(외부에 나가 결제 된다는 경고창)'을 전면에 내세울 것
     * 에픽은 지방법원에서 Apple의 악의적인 규정 준수 계획에 이의를 제기할 것

   어떻게든 법을 피해서 모든 이익을 가져가겠다... 한숨만 나옵니다.
   특히 수수료가 아니라 앱스토어 결제보다 더 편할 수 없도록 제한하는 게 진짜 악질이네요.

   어휴 이 악질적인 놈들... 있는 놈들이 더한다더니 이렇게 해야 부자되는겨. -_-
"
"https://news.hada.io/topic?id=12951","Schedule-X - Material 디자인 캘린더 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Schedule-X - Material 디자인 캘린더 라이브러리

     * 경량 Virtual-DOM 기반 구현
     * 프레임워크 상관없이 캘린더 및 날짜 피커로 사용 가능
     * 드래그 앤 드롭으로 이벤트 리스케줄링
     * Day, Month Grid, Month Agenda, Week 뷰 제공. 모두 커스텀 가능
     * React 및 Vue 아답터 제공
"
"https://news.hada.io/topic?id=13013","닌텐도 스위치용 무료 Godot™ 엔진 포팅 버전 발표 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     닌텐도 스위치용 무료 Godot™ 엔진 포팅 버전 발표

     * Nintendo Switch 개발자를 위한 무료 Godot 엔진 포트 출시. 버전 3.5.x 및 4.1.x로 만들어진 프로젝트를 지원
     * 모든 인증된 Nintendo Switch 개발자에게 무료로 제공
     * MIT 라이선스에 따라 소스 코드가 배포되어 넓은 사용 및 수정 권한을 제공
     * C# 또는 GDNative/GDExtension은 지원되지 않으며, GDScript만 지원됨.
     * 포트는 최적화 수준이 높지 않지만, 대부분의 소규모에서 중규모 게임 프로젝트에 충분히 효율적임
     * C++ 지식이 있는 개발자는 필요에 따라 추가 기능을 추가하고 통합할 수 있는 소스 코드 접근성을 가짐
     * 이 포트는 지원 없이 제공되며, 개발자들은 협력과 지원을 위해 Nintendo 개발자 포털의 커뮤니티와 교류할 것을 권장
     * 중간 또는 대규모 프로젝트의 경우 포팅 회사와 파트너십을 맺는 것을 권장
     * 접근 방법은 Nintendo 개발자 포털을 통해 요청할 수 있음

추가 세부 사항

     * 추가 세부 사항은 Nintendo 개발자 포털의 포럼 섹션에서 인증된 Nintendo Switch 개발자에게 제공됨.

이제 Nintendo Switch용 인디 게임 제작에 Godot 엔진을 사용 안 할 이유가 없음!

     * Godot 엔진 개발 커뮤니티에서 나올 혁신적이고 매력적인 게임들을 기대함.

GN⁺의 의견

     * 이 발표는 인디 게임 개발자들에게 Nintendo Switch 플랫폼에서 게임을 출시할 수 있는 새로운 기회를 제공함.
     * Godot 엔진의 무료 포트는 개방형 라이선스와 기본적인 기능을 통해 저비용으로 게임 개발을 가능하게 함.
     * 이러한 협력적 노력은 개발 커뮤니티의 지원과 혁신을 장려하며, Nintendo Switch 게임 시장의 다양성과 창의성을 증진시킬 것으로 기대됨.

   고도로 유명한 브로테이토도 포팅되었었고 원래 안되던건 아닌지라 닌텐도SDK 와의 연동을 MIT 라이센스밑에서 어떻게 해결했는가가 관전포인트

        Hacker News 의견

     * 한 사용자와 그의 12세 자녀가 Godot 엔진을 사용하여 게임을 만들었고, 이 게임이 Nintendo Switch에서 실행되는 것이 멋질 것 같다고 생각함. 이미 Godot 포트를 위한 두 개의 GitHub 저장소를 찾았고, RAWRLAB 발표가 기술적으로 가능하다는 것을 확인함. 그러나 Nintendo Switch 개발자로 인증받을 자격이 없다고 생각하며, 자신의 Switch에서 게임을 실행하는 가장 쉬운 방법에 대해 궁금해함. Mig Switch와 덤퍼를 주문했지만 이 방법이 최선인지 확신할 수 없음.
     * 다른 사용자는 게임 개발에 대해 거의 모르지만, Unity나 Unreal 대신 Godot를 사용하여 게임을 만들 이유가 무엇인지 궁금해함. 이는 오픈소스를 밀어붙이려는 의도가 아니라 순수한 호기심에서 비롯된 질문임.
     * 또 다른 사용자는 Godot가 유료 제품으로 유지되지 않고, 이를 레버로 사용하여 더 많은 고객을 유치하거나 Nintendo가 자사 플랫폼에서 만들어진 오픈소스 소프트웨어의 배포를 금지하는 조항을 제거하도록 유도하지 않은 것이 흥미롭다고 언급함. Nintendo와의 중간 지점을 찾았기 때문에 이러한 조치가 필요하지 않을 것이라고 추측함.
     * 한 사용자는 Godot가 아직 C#을 지원하지 않는 것이 아쉽지만, 이것이 Unity로부터 시장 점유율을 조금 더 가져올 것이라고 생각함. 모든 프로젝트가 C#의 성능 향상을 필요로 하는 것은 아니기 때문임.
     * 어떤 사용자는 이와 같은 프로젝트를 진행하는 팀의 일원이 되는 방법에 대해 배우고 싶어함.
     * Godot에 관심이 있는 사용자는 이러한 프로젝트를 보고 더 긴장되며, Godot가 얼마나 원활하게 작동하는지, 작동하지 않을 경우 얼마나 큰 문제에 직면할지, Unity를 다루는 두통/위험보다 Nintendo Switch 버전이 작동하지 않을 가능성이 더 큰 재앙인지 궁금해함.
     * 한 사용자는 Godot에 플러그인이 없으며, 단순히 GDScript만 있다고 언급함. 그러나 심각한 작업을 위해 C++ 코드베이스에 더 빠른 스크립팅 솔루션을 내장하는 것은 어렵지 않음.
     * 다른 사용자는 소스 코드가 MIT 라이선스에 따라 배포되어 넓은 사용 및 수정 권리를 제공하는데, Nintendo Switch의 API 주변의 독점적인 NDA가 Godot 자체에 Switch 지원을 추가하는 것을 방해하는 가장 큰 장애물이라고 생각했기 때문에 이를 어떻게 관리했는지 궁금해함. 이 사용자는 이것이 무료일 것이라고 가정했지만, 여전히 NDA를 존중하도록 강제하는 어떤 종류의 소스-가능 라이선스에 서명해야 할 것이라고 생각함.
     * 마지막으로, 한 사용자는 MIT 라이선스를 사용하면서 어떻게 인증된 개발자에게만 접근을 제한할 수 있는지 의문을 제기함. 인증된 개발자가 코드를 인터넷에 게시할 수 있지 않을까라고 물음.
"
"https://news.hada.io/topic?id=13000","내 회사를 오픈 소스로 전환해야 할까? (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      내 회사를 오픈 소스로 전환해야 할까? (2022)

나의 코드는 나쁜가

     * 개발자들이 자신의 코드에 대해 비판받을까 두려워하는 것은 자기중심적인 생각임.
     * 나쁜 코드에 대해 스트레스 받는 사람이 있다면, 그것은 추구할 가치가 있는 것임.
     * 커뮤니티는 나쁜 코드를 리팩토링하고 새로운 코드 품질 지침을 도입하여 프로젝트를 개선하는 데 도움을 줌.

보안에 도달하기

     * 공개된 코드에서 보안 취약점을 찾아 해킹할까 두려워하는 것은 일반적인 우려임.
     * 충분한 관심이 있다면 모든 버그가 명백해진다는 리누스의 법칙이 보안 문제에도 적용됨.
     * 비트코인과 같은 오픈 소스 프로젝트는 보안 문제를 일찍 발견하고 패치하여 더 안전할 수 있음.

경쟁자를 이기기

     * 소프트웨어에서 아이디어는 저렴하며 가치는 아이디어의 실행에서 창출됨.
     * 아이디어를 공유하면 뇌를 자유롭게 하여 중요한 것에 집중할 수 있음.
     * 경쟁자가 코드를 엿보는 것은 장기적으로 볼 때 중요하지 않으며, 오픈 소스 커뮤니티는 당신의 개방성에 긍정적으로 반응할 것임.

    전문가 커뮤니티 성장

     * 성공적인 회사를 구축하기 위해서는 장기간에 걸쳐 잘 실행하고 고객 기반을 성장시켜야 함.
     * 경쟁자가 코드를 엿보는 것은 장기적으로 중요하지 않음.

    시장에서 승리하기

     * 거대하고 성장하는 시장에서는 승자 독식 상황이 드물며, 사용자를 감동시키고 빠르게 반복하는 것이 중요함.
     * 경쟁자가 오픈 소스 프로젝트를 포크하더라도, 더 빠르게 출시할 수 없다면 어차피 경쟁에서 질 것임.

    후기 단계

     * 프로젝트가 상당한 규모에 도달하면, 대형 클라우드 제공업체가 더 나은 배포 모델로 제품을 제공하는 상황에 처할 수 있음.
     * AWS가 당신의 제품을 호스팅하는 데 경쟁을 시작한다면, 매우 올바른 일을 하고 있다는 것임.
     * 개발자 경험과 같이 클라우드 제공업체가 잘하지 못하는 분야에서 경쟁 우위를 찾아야 함.

    걱정 그만하기

     * 경쟁자가 당신의 아이디어를 찾고 있다면, 그들은 항상 당신보다 한 발 뒤처져 있을 것임.

개발자 고용

     * 스타트업의 가장 큰 불만 중 하나는 개발자를 고용하는 것이 어렵다는 것임.
     * 오픈 소스는 개발자 고용 문제를 해결할 수 있음.

    공개적으로 출처 찾기

     * 모든 개발자는 오픈 소스의 혜택을 받으며, 많은 개발자들이 흥미로운 오픈 소스 프로젝트에 기여하려고 함.
     * 오픈 소스 프로젝트에 기여하는 장벽을 낮추면 훌륭한 개발자들이 프로젝트를 찾을 가능성이 높음.

    아니, 당신의 집으로 가져가는 테스트는 하지 않을 것임

     * 개발자들은 면접 과정에서 LeetCode 문제를 풀거나 집으로 가져가는 테스트를 하는 것에 대해 불만을 가짐.
     * 누군가가 당신의 저장소에 기여하면, 그들의 실제 코드 기여와 팀/커뮤니티 구성원과의 의사소통 방식을 이미 볼 수 있음.

엑셀과 통합되나요?

     * 스타트업을 운영할 때 가장 큰 문제만 해결할 시간이 있을 수 있으며, 소수의 사용자가 요청하는 기능은 무기한 연기될 수 있음.
     * 시스템이 오픈 소스인 경우, 이러한 사용자들이 스스로 기능을 기여할 수 있어 소프트웨어의 유용성을 확장할 수 있음.

2022년입니다. 날아다니는 차는 어디 있나요?

     * 오픈 소스가 없는 세계에서는 기술 회사들이 계속해서 바퀴를 재발명하고 있음.
     * Supabase는 새로운 프로젝트를 오픈 소스로 하기 전에 기존의 오픈 소스 프로젝트를 지원하려고 함.

더 많은 증거가 필요해

     * 다음 주는 Supabase 출시 주간으로, 팀과 커뮤니티가 지난 3개월 동안 작업한 모든 것의 정점임.
     * 오픈 소스 회사를 운영하는 모든 이점을 보여주는 Supabase 커뮤니티의 빠른 진전이 증거임.

  GN⁺의 의견

     * 오픈 소스 전략은 코드 품질 향상, 보안 강화, 커뮤니티 구축을 통한 협업 및 혁신 촉진에 기여함.
     * 오픈 소스는 개발자 고용 문제를 해결하고, 기업의 투명성과 신뢰를 높이며, 기술 발전에 기여함.
     * Supabase의 사례는 오픈 소스 모델이 소프트웨어 개발과 비즈니스 성장에 어떻게 긍정적인 영향을 미칠 수 있는지 보여줌.

        Hacker News 의견

     * 가정의 문제점

     지속 가능한 수익성에 대한 가정이 현실을 반영하지 못함. 특히 미국 개발자의 높은 급여와 같은 도전 과제를 고려할 때, 오픈소스 소프트웨어(OSS) 회사는 두 번의 성공을 필요로 함. 첫 번째는 OSS 자체에 대한 성공이고, 두 번째는 회사의 성공임.
     * Graphistry 팀의 경험

     Graphistry 팀은 OSS에 열정적이며, 인기 있는 Apache Arrow와 Nvidia RAPIDS 프로젝트를 시작하는 데 도움을 줌. Python과 JS 클라이언트를 OSS로 제공하고, PyGraphistry[AI]는 다양한 도구를 갖춘 그래프용 스위스 군용 칼임. 하지만 주로 기업, 정부, 데이터 회사에 GPU 그래프 시각화 서버의 클라우드/온프레미스 자체 호스팅 라이선스를 판매하여 지속 가능하게 성장함. 대안적인 SaaS 호스팅 수익은 작은 팀을 지원하지만, 대부분의 팀은 자체 호스팅 라이선스 수익 없이는 혁신을 지속할 수 없음.
     * 오픈소스 비즈니스 모델에 대한 불만

     다른 창업자들과 오픈소스 비즈니스 모델에 대해 논의할 때, 반복적으로 나오는 세 가지 불만이 있음:
          + 코드가 지저분하거나 나쁘거나 미완성이라는 비판
          + 해커들이 보안 취약점을 찾아 이용할 것
          + 경쟁자들이 지적 재산을 훔칠 것

     네 번째 누락된 항목은 ""Amazon/AWS가 내 코드를 기반으로 서비스를 상업화하고 나에게 아무것도 지불하지 않을 것""이라고 생각함.
     * 민간 정부에 판매하기

     많은 프로젝트가 놓치는 한 가지는 민간 정부에 판매하는 것임. 미국 정부는 기술을 위한 많은 프로그램을 가지고 있고, 민간 기관, 정보 공동체, 주 정부의 분리로 인해 다양한 소프트웨어를 대량으로 구매함. 규제 및 준수 요건은 생각보다 높지 않으며, 처음 몇 개 계약을 팀으로 진행하는 경우 특히 그렇음. 이는 프로젝트를 위한 확실하고 보장된 수익을 제공하며, 대개 3-5년 약정으로 매우 수익성이 높음.
     * 오픈소스 소프트웨어의 가치

     소프트웨어 아이디어는 저렴하지만, 가치는 거의 항상 아이디어의 실행에서 창출됨. 오픈소스 소프트웨어를 공개할 때는 아이디어뿐만 아니라 그 아이디어의 상당 부분을 실행하는 것도 제공함. 코드는 전체 실행이 아니지만, 판매, 마케팅, 지원 등으로 확장됨. 기사는 코드의 가치를 경시하는 경향이 있으나, 이는 사실이 아님.
     * Supabase의 비즈니스 모델

     Supabase는 오픈소스 회사로 자신을 마케팅하지만, 실제로는 자체 호스팅을 시도하는 것이 실용적이지 않음. 따라서 오픈소스라는 칭찬을 받지만, 실제로는 마케팅 전략에 불과함.
     * 오픈소스 제품의 선택

     개인적으로 오픈소스 제품을 대안보다 항상 선택함. 소스 코드에 대한 무제한 접근은 중요하며, 이는 사회에도 중요함. 이러한 마인드셋으로 생성된 소프트웨어는 오픈소스이며, 때때로 사람들은 이에 대해 지불함.
     * 오픈소스 비즈니스의 어려움

     PostgreSQL, Python, Bitcoin, React와 같은 오픈소스 프로젝트는 좋지만 좋은 비즈니스는 아님. MongoDB와 Elastic은 예외임. 오픈소스 데이터베이스 회사보다 폐쇄 소스 데이터베이스 회사가 더 많이 성공함. 오픈소스 회사는 어렵지만 사용자에게 매우 가치가 있음.
     * 브랜드와 커뮤니티의 중요성

     Google과 같은 기존 공급업체와 경쟁할 때, 브랜드, 커뮤니티, 팀, 개발자 경험(DX)은 준수 등에 비해 거의 중요하지 않음.
     * 오픈소스 코드의 공개와 라이선스

     코드를 공개적으로 공개하여 사람들이 읽고 기여할 수 있게 함. 상업적 사용을 위한 유료 라이선스를 요구하되, 낮은 계층에서는 무료로 유지함. 비즈니스 내에서 유료 고객이 모든 개발을 자금하는 문화를 심어야 함.
     * 오픈소스 회사의 타당성

     회사가 개발자를 대상으로 하거나 실제로 자체 호스팅할 가능성이 없는 제품을 만드는 경우에만 오픈소스 회사가 의미가 있음. Supabase는 두 가지 모두에 해당하는 예시임.
"
"https://news.hada.io/topic?id=12947","구글 싱크 및 보안이 취약한 앱 지원 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        구글 싱크 및 보안이 취약한 앱 지원 중단

Google Workspace 업데이트

     * 2024년 9월 30일부터: Google 계정 및 Google Sync에 액세스하기 위해 비밀번호만 사용하는 타사 앱은 더 이상 지원되지 않음.
     * 변경 사항: Google Workspace는 사용자의 Google 사용자 이름과 비밀번호를 공유해야 하는 타사 앱 또는 장치의 로그인 방법을 더 이상 지원하지 않음.
     * 보안 위험: 이전 방식인 Less Secure Apps (LSA)는 Google 계정 자격 증명을 타사 앱과 장치와 공유해야 하므로 보안 위험을 증가시킴.
     * 보다 안전한 방법: Google로 로그인하는 옵션을 사용해야 하며, 이는 OAuth 인증 방식을 사용하여 이메일을 다른 앱과 동기화하는 더 안전하고 보안성이 높은 방법임.

LSA 접근 중단 일정

     * 2024년 6월 15일부터: LSA 설정이 관리 콘솔에서 제거되며 변경할 수 없게 됨. 활성화된 사용자는 연결할 수 있지만 비활성화된 사용자는 더 이상 LSA에 접근할 수 없음.
     * 2024년 9월 30일부터: 모든 Google Workspace 계정에 대해 LSA 접근이 중단됨. CalDAV, CardDAV, IMAP, POP 및 Google Sync는 비밀번호만으로 로그인할 때 작동하지 않으며 OAuth를 사용해야 함.

Google Sync 서비스 종료

     * 2024년 6월 15일부터: 새 사용자는 Google Workspace에 Google Sync를 통해 연결할 수 없음.
     * 2024년 9월 30일: 기존 Google Sync 사용자는 Google Workspace에 연결할 수 없음.

관리자 및 최종 사용자에 대한 지침

     * 관리자: 최종 사용자가 Google Workspace 계정과 함께 이러한 유형의 앱을 계속 사용할 수 있도록 OAuth라는 더 안전한 액세스 유형으로 전환해야 함.
     * 모바일 장치 관리(MDM) 영향: MDM 공급자를 사용하여 IMAP, CalDAV, CardDAV, POP 또는 Exchange ActiveSync (Google Sync) 프로필을 구성하는 조직은 서비스가 단계적으로 중단됨.
     * 스캐너 및 기타 장치: SMTP 또는 LSA를 사용하여 이메일을 보내는 스캐너 또는 기타 장치는 OAuth를 사용하도록 구성하거나 대체 방법을 사용하거나 장치와 함께 사용할 앱 비밀번호를 구성해야 함.

최종 사용자에 대한 지침

     * 이메일 애플리케이션: Outlook 2016 이전 버전을 사용하는 경우 Microsoft 365로 이동하거나 OAuth 액세스를 지원하는 Windows 또는 Mac용 Outlook으로 전환해야 함.
     * 캘린더 애플리케이션: 비밀번호 기반 CalDAV를 사용하는 앱을 사용하는 경우 OAuth를 지원하는 방법으로 전환해야 함.
     * 연락처 애플리케이션: iOS 또는 MacOS에서 CardDAV를 통해 연락처를 동기화하고 비밀번호만으로 로그인하는 경우 계정을 제거하고 다시 추가해야 함.

개발자에 대한 지침

     * 개발자: Google Workspace 계정과의 호환성을 유지하기 위해 앱을 업데이트하여 OAuth 2.0을 연결 방법으로 사용해야 함.

사용 가능성

     * 이 변경 사항은 모든 Google Workspace 고객에게 영향을 미침.

GN⁺의 의견

     * 이 업데이트는 Google Workspace 사용자의 보안을 강화하기 위한 중요한 조치임. 비밀번호만 사용하는 덜 안전한 앱(LSA) 대신 OAuth를 사용하여 계정 보안을 강화하는 것은 현대 사이버 보안 환경에서 필수적임.
     * 관리자와 최종 사용자 모두에게 영향을 미치며, 특히 이메일, 캘린더, 연락처 앱을 사용하는 사용자들은 새로운 인증 방식으로 전환할 필요가 있음.
     * 이 글은 Google Workspace 사용자와 관리자에게 향후 보안 업데이트에 대비하고 필요한 조치를 취할 수 있도록 유용한 정보를 제공함.

        Hacker News 의견

     * 사용자는 Gmail과 상호작용하는 스크립트를 가지고 있어서 ""Less Secure Apps"" 지원 중단 소식에 놀랐으나, 앱 비밀번호는 계속 작동할 것으로 보임을 안심함. OAuth만 지원하는 상황이 오면 많은 자동화가 중단될 것을 우려함. OAuth의 복잡성에 대해 불만을 표하며, OAuth 작동 방식을 명확하게 설명한 Perl 모듈 문서를 긍정적으로 평가함.
     * OAuth를 사용할 수 없는 경우, 사용자는 자신의 프록시를 사용하여 IMAP 또는 POP/SMTP 클라이언트가 OAuth 2.0을 지원하지 않더라도 ""현대적인"" 이메일 제공자와 사용할 수 있도록 할 수 있음. 클라이언트가 OAuth에 대해 알 필요가 없음.
     * IMAP, SMTP, POP은 구글 계정에 상당한 접근을 허용하지만 2단계 인증이나 로봇 방지 검증을 할 수 없어, 크리덴셜 스터핑 공격에 취약함. 구글은 이러한 공격으로부터 사용자를 보호하기 위해 이러한 접근을 기본적으로 비활성화했으며, 이번 조치는 나머지 사용자를 위한 것임을 긍정적으로 평가함.
     * 이번 변화는 사용자들을 구글 자체 메일 앱으로 이동시키려는 의도가 있음을 지적함. Gmail 앱이나 곧 폐지될 Google 동기화 없이는 실시간 메일 알림을 받을 수 없음. 사용자는 Google Workspace에 대해 비용을 지불하고 있음에도 불편함을 표현함. 데스크톱에서는 Mimestream이 여전히 작동하지만, 구글이 이를 막으려 할 것이라고 우려함.
     * Android에서 Oauth2와 Google의 가장 성가신 점은 전화기 전체를 Google 계정과 연동하지 않고는 이메일 클라이언트나 캘린더에 Google 계정으로 로그인할 수 없다는 것임. 또한 이 Google 계정으로 기기에 정책 권한을 부여함. 사용자는 이를 완전히 무시할 수 없으며, Android에서 Google이 WebView 내에서의 oauth2 사용을 쉽게 제한할 수 있음을 지적함.
     * 앱 비밀번호는 16자리 암호로, 2단계 인증이 활성화된 계정에서만 사용할 수 있음. ""덜 안전한 앱""이 OAuth를 지원하는 앱과 동일한 수준의 보안을 제공하지만, Google이 오랫동안 홍보할 수 있었던 서버 측 메커니즘을 사용함으로써 가능함을 지적함. Google이 보안 문제를 자사의 의제를 촉진하는 방식으로 해석하는 것에 대해 비판적인 의견을 제시함.
     * 앱 특정 비밀번호(App-Specific Passwords)가 계속 작동할 것으로 보이며, OAuth를 지원하지 않는 앱을 사용하는 경우 OAuth를 지원하는 앱으로 전환하거나 앱 비밀번호를 생성하여 접근해야 함을 설명함.
     * 이번 변경사항은 Workspace 계정에만 적용되며, 일반 Gmail 계정에는 몇 년 전에 이미 적용되었음을 설명함.
     * 약 10년 전, Google 계정 디렉토리와의 통합을 통해 내부 네트워크에 개별 Google 계정으로 인증할 수 있는 시스템을 구축함. 현대 기준으로는 덜 안전하지만, VPN을 통하지 않고도 내부 네트워크에 즉시 연결할 수 있어 모두에게 시간을 절약해줌을 긍정적으로 평가함.
     * Microsoft의 OAuth 전환을 처리하면서 어려움을 겪었으며, 문제는 프로세스가 매우 불투명하다는 것임. 토큰을 보내고 서버가 ""아니오""라고만 답변하며, 왜 작동하지 않는지에 대한 설명이 없어 문제 해결에 며칠을 소비함. Google의 메일 서버가 더 나은지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12957","메타의 새로운 목표는 인공 일반 지능(Artificial General Intelligence) 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        메타의 새로운 목표는 인공 일반 지능(Artificial General Intelligence) 구축

     * 메타 CEO 마크 저커버그 인터뷰
     * 저커버그는 ""우리가 만들고 싶은 제품을 만들기 위해서는 인공 일반 지능(AGI)을 만들어야 한다""는 관점
     * AGI에 대한 명확한 정의나 도달 시기는 없으나, 그는 이를 구축하고자 함
     * 메타의 AI 연구 그룹 FAIR을 메타 앱에서 생성 AI 제품을 개발하는 팀과 같은 부서로 이동시킴으로써, AI 혁신이 수십억 사용자에게 더 직접적으로 도달하도록 함

AI 인재 전쟁

     * AI 분야에서 인재를 둘러싼 경쟁은 매우 치열함
     * 필요한 전문 지식을 가진 사람들은 연봉 100만 달러 이상의 보상 패키지를 요구할 수 있음
     * 저커버그는 AI 인재를 유치하거나 경쟁사로부터 연구원을 지키기 위해 CEO들이 직접 나서야 하는 상황을 설명함

컴퓨팅 파워의 중요성

     * AI 분야에서 또 다른 희소 자원은 대규모 모델을 훈련하고 실행하는 데 필요한 컴퓨팅 파워임
     * 메타는 2024년 말까지 Nvidia의 H100 GPU 340,000개 이상을 소유할 예정임
          + A100 및 기타 AI 칩까지 고려하면 2024년말까지 거의 60만개의 GPU를 비축
     * 메타는 다른 어떤 개별 회사보다 더 큰 규모로 이를 수행할 능력을 구축함

AGI에 대한 실현

     * AGI에 대한 명확한 정의나 도달 시기는 아직 없음
     * 저커버그는 AGI의 도래를 단일 순간보다 점진적인 과정으로 보고 있음
     * 메타는 Llama 2, 최신 대규모 언어 모델을 발표한 후 AGI에 대한 더 넓은 관점을 가지게 됨
     * 현재 Llama 3를 훈련하고 있으며 코드 생성 기능을 갖게 될 것
          + 궁극적으로 업계 최고의 모델을 만들 것

오픈 소스 대 폐쇄 소스

     * AGI를 최종적으로 통제할 주체에 대한 논쟁이 뜨거움
     * 저커버그는 메타의 주식에 대한 투표권을 통해 전체적인 권력을 행사함
     * 그는 AGI가 달성되면 오픈 소스로 할지 여부에 대해 최종적으로 결정할 수 있는 위치에 있음

메타의 피벗이 아님

     * 메타가 메타버스에 초점을 맞추기 위해 회사 이름을 변경한 지 2년이 지난 시점에서 저커버그의 AGI 추진은 다소 어색함
     * 메타는 여전히 메타버스에 연간 150억 달러 이상을 지출하고 있으며, AI 기능은 플랫폼을 더욱 매력적이고 유용하게 만들 수 있음
     * 저커버그는 AI가 메타의 하드웨어 노력에서 앞으로 더 중요한 역할을 할 것으로 보고 있음

GN⁺의 의견

     * 마크 저커버그의 AGI에 대한 추진은 기술 산업에서 인공 지능의 미래를 형성하는 데 중요한 역할을 할 수 있음.
     * 메타의 대규모 GPU 소유 계획은 AI 연구와 개발에 있어서 회사의 주도적 위치를 강화할 것임.
     * 오픈 소스와 폐쇄 소스에 대한 저커버그의 접근 방식은 AI 기술의 민주화와 혁신에 중대한 영향을 미칠 수 있음.

   AGI의 번역이 일반 인공지능이 아니라, 인공 일반지능이군요...
"
"https://news.hada.io/topic?id=12997","아이가 여전히 비행기를 좋아해서 레이더를 업그레이드함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     아이가 여전히 비행기를 좋아해서 레이더를 업그레이드함

나의 유아는 여전히 비행기를 좋아하므로, 나는 그녀의 레이더를 업그레이드했다

     * Jacob Bartlett은 Gener8의 리드 모바일 엔지니어로, 아마추어 스탠드업 코미디언, 전 heavy metal 보컬리스트이자 지친 아빠임.
     * 그는 소프트웨어 엔지니어링(주로 iOS), 스타트업, 경력에 대해 글을 쓰며, 자신의 딸이 여전히 비행기를 좋아함에 따라 Aviator 앱을 업그레이드한 경험을 공유함.

Aviator 2.0 소개

     * Aviator 앱의 UI가 개선되어 주요 컨트롤이 중앙에 배치되고, 덜 자주 사용되는 고급 도구들은 별도의 메뉴에 숨겨짐.
     * 새로운 UI는 사용자가 메뉴를 확장할 수 있음을 알 수 있도록 드래그 인디케이터가 있으며, 메인 레이더 UI에 그림자를 덮지 않도록 배경 상호작용이 가능함.

새로운 기능들

     * Aviator 앱은 이제 줌 기능을 포함하여 사용자가 보고 싶은 비행기의 범위를 조절할 수 있음.
     * OpenSky Network API를 통해 비행기의 국가 깃발을 이모지로 표시하는 기능이 추가됨.
     * 영국의 흐린 날씨를 고려하여, 구름에 가려진 고도가 높은 비행기를 숨길 수 있는 '구름 커버 모드'가 도입됨.
     * 비행기의 종류에 따라 다른 아이콘을 표시하는 기능이 개선되어, 예를 들어 헬리콥터와 위성을 구별할 수 있게 됨.

OpenSky Network API 개선

     * 사용자가 자신의 OpenSky Network API 자격증명을 입력하여, 비인증 버전에서 발생할 수 있는 속도 제한을 피할 수 있도록 함.

결론

     * Jacob은 딸이 관심을 가질 만한 것을 만드는 것이 매우 만족스럽다고 느낌.
     * Aviator 앱의 새로운 기능 아이디어나 ASO(앱 스토어 최적화)에 대한 팁이 있는 경우 의견을 남기도록 독려함.

    GN⁺의 의견

     * 이 글은 기술과 가족이 어떻게 어우러질 수 있는지 보여주는 훌륭한 예임. 한 아빠가 자신의 기술을 활용하여 딸의 관심사에 맞는 앱을 개발하고, 이를 통해 더 나은 사용자 경험을 제공하기 위해 끊임없이 노력하는 모습이 인상적임.
     * Aviator 앱의 업그레이드는 개발자들에게 실제 사용자의 피드백을 반영하여 제품을 개선하는 중요성을 상기시킴. 특히 가족 구성원이 사용자 테스트에 참여하는 경우, 개발자는 더욱 직접적이고 개인적인 동기를 갖게 됨.
     * 이 글은 소프트웨어 개발이 단순한 기술 작업을 넘어서 사용자의 삶을 풍요롭게 하고, 가족 간의 유대를 강화할 수 있는 수단이 될 수 있음을 보여줌.

        Hacker News 의견

     * 이전에 인기 있었던 게시물에 대한 후속 댓글로, 아이를 위해 만든 레이더에 대한 이야기임.
          + 레이더 스캔 시 비행기가 표시되고 다음 스캔까지 점점 희미해지는 기능이 멋질 것 같음.
          + 현재 GPS 위치와 고도를 사용하여 주변 건물과 지형에 따라 보이는 지평선을 결정하고, 레이더 차단 영역으로 지도에 표시하는 것도 흥미로울 것임.
     * 블로그에 남긴 댓글에서의 생각을 공유함.
          + 실시간 뷰 기능과 아이폰의 AR 기능을 활용하여 비행기의 대략적인 위치에 점을 표시하는 것이 좋을 것 같음.
          + 비행기를 '본 것'과 '놓친 것'으로 표시하는 기능을 추가하고, 이를 통해 어떤 비행기가 표시될지 미세 조정할 수도 있음.
          + 배지/통계 기능을 추가하여 다양한 항공사, 항공기 유형, 가장 먼 비행 시간, 가장 짧은 비행 시간 등을 추적할 수 있음.
     * 방향 감각이 나쁜 사용자가 스마트폰에서 가장 중요하게 생각하는 기능은 지도상의 화살표가 정확하게 자신이 바라보는 방향을 가리키는 것임.
          + 기술적인 한계가 무엇인지, 아이폰이 안드로이드보다 나은지, 하드웨어 문제인지, GPS 신호 문제인지, 소프트웨어 문제인지 궁금함.
     * 해커뉴스 커뮤니티에서 이 앱을 안드로이드로 포팅하는 오픈소스 프로젝트에 참여할 사람이 있는지 물음.
          + 저자가 충분한 정보를 게시물에 제공했으니 누군가가 포팅하고 모두에게 무료로 제공하면 좋겠다고 언급함.
     * 앱 사용 시 현재 활성화된 모드가 명확하지 않은 문제를 지적함.
          + 예를 들어 날씨를 토글할 때, 구름 아이콘을 클릭하면 구름 모드가 활성화되는지, 맑은 날씨를 보는 것인지 혼동될 수 있음.
     * 자신의 딸이 관심을 가지고 놀 수 있는 것을 만드는 것이 매우 만족스러움.
          + 딸이 플랫포밍 게임이나 헤비메탈 음악에 관심을 가지기를 기대함.
     * 자신의 딸을 가장 중요한 사용자로 만족시킨 것에 대해 잘했다고 칭찬함.
     * 비행기를 좋아하는 자신의 딸은 비행기가 어디로 가는지 항상 궁금해함.
          + 비행 정보를 제공할 수 있는지, 비행기를 선택하면 정보를 표시할 수 있는지 궁금해함.
     * 9/11 이후의 세계에서 아이들이 여전히 조종실에 초대받는지 궁금해함.
"
"https://news.hada.io/topic?id=12924","Show GN: TurtleSoupAI, GPT가 진행하는 추리 퍼즐 수수께기 게임 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: TurtleSoupAI, GPT가 진행하는 추리 퍼즐 수수께기 게임 앱

   소개
     * “사람들과 테이블에 둘러 앉은 남자는, 마주 앉은 남자에게 붉은 다이아몬드를 건네 받고서는 죽기로 결정했다, 왜 그는 죽기로 결정했을까?”
     * 바다거북스프게임은 위와 같은 질문을 스무고개하듯 예/아니오로 답변할 수 있는 질문을 진행자에게 던지며 정답을 추리하는 형식의 놀이입니다.
     * SNS에서 한 때 유행하기도 했던 바다거북스프 수수께끼는 마니아층에게 큰 사랑을 받아왔지만, 진행자가 필요한 태생적 한계가 있었습니다.
     * 이를 GPT를 이용해 정답을 아는 진행자 없이도 플레이 할 수 있도록 하는 앱, TurtleSoupAI 입니다.

   앱 다운로드 링크
     * https://turtlesoupai.page.link/rUZK 

   주요 기능
     * 저희가 채집, 각색하거나 직접 만든 수수께끼를 골라 채팅 방식으로 퀴즈를 즐길 수 있습니다.
     * GPT 조수에게 힌트를 3회까지 요청할 수 있습니다.
     * 정답을 맞추면 AI가 그려준 클리어 이미지를 받을 수 있습니다!
     * 현재는 여러가지 이유로 인해 영어로만 서비스하고 있습니다..!

   작년 OpenAI, SK가 합동 개최한 Prompter Day Seoul 2023 3위 입선한 프로젝트를 개선시켜 출시한 게임인데 긱뉴스에 왠지 재밌게 플레이해주시고 피드백 주실 수 있는 분들이 많을 것 같아 들고왔습니다. 플레이해보시고 피드백 주시면 감사하겠습니다 :)

   와 AI가 잘 답변하는게 신기하네요..!

   Invalid dynamic link 가 뜨네요

   PC에서는 본문 링크 뒤에 이상한 쿼리가 붙네요..! 제목의 링크를 클릭하거나

   https://turtlesoupai.page.link/rUZK

   여기로 들어가시면 제대로 나옵니다!

   오...예전에 친구들이랑 바다거북스프 재밌게 한 적 있는데 그때 생각나네요

   한 번 플레이해보세요!

   이런 거 보면 복잡한 룰북을 이해하는 TRPG 마스터 챗봇도 언젠간 가능할 것 같다는 상각이 드네요
"
"https://news.hada.io/topic?id=13008","Backlog의 크기는 고객과의 대화 빈도에 반비례합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Backlog의 크기는 고객과의 대화 빈도에 반비례합니다

     * 고객과 자주 대화할수록 백로그의 크기는 줄어듦
     * 계획 시간을 고객과의 대화로 대체하는 것이 중요함
     * 개발자와 고객 사이의 중개자가 많을수록 제품이 고객의 요구를 충족시키지 못함
     * 큰 백로그는 검증되지 않은 가정이 많고 고객 가치를 창출할 가능성이 낮음을 의미함

UI 디자인보다 기술적 구성 요소 디자인에 집중할 것

     * UI 디자인에 너무 많은 시간을 할애하지 말고 기본적인 UI를 빠르게 출시하고, 고객 피드백을 통해 UI를 개선하는 것이 중요함
     * 기술적 부채를 낮게 유지하여 고객이 필요로 하는 변경을 신속하게 수행할 수 있어야 함

사람들이 생각하는 앱 사용 방식과 실제 사용 방식은 다름

     * 고객이 앱을 사용하는 모습을 관찰하는 것이 중요함
     * 사용자의 행동을 직접 관찰하면 양적 지표만으로는 파악할 수 없는 인사이트를 얻을 수 있음

계정 스푸핑 구현

     * 특정 고객이 실제로 어떤 화면을 보고 있는지 이해하기 위해 계정 스푸핑 기능에 대한 투자가 중요함
          + 계정 스푸핑(Account Spoofing) 관리자가 특정 프로덕션 사용자처럼 앱을 사용할 수 있는 기능
     * 이를 통해 문제를 효과적으로 진단하고 테스트 데이터에 대한 의존도를 줄일 수 있음

첫 페이지의 중요성

     * 앱에 처음 접속한 고객에게 가장 관련성 높은 정보를 간결하게 제공해야 함
     * 첫 페이지에 너무 많은 정보를 담으려 하면 사용자의 인지 부담을 증가시킴

고객은 가장 중요한 마케터

     * NPS(Net Promoter Score)는 고객이 제품을 추천할 만큼 강한 호감을 가지고 있는지를 나타내는 좋은 지표임
     * 광고 비용을 지출할 수도 있지만, 만족한 고객으로부터 시작하는 것이 효과적인 마케팅 전략임

MVP는 반복 개선 없이는 의미가 없음

     * MVP는 단순히 날짜 압박을 이유로 저품질의 고객 경험을 제공하는 핑계가 되어서는 안 됨
     * MVP는 추가 반복이 필요한지, 필요하다면 어떤 점을 개선해야 하는지를 결정하는 데 도움을 줌

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 고객과의 지속적인 대화를 통해 실제 사용자의 요구를 반영하는 제품 개발의 중요성임
     * 고객의 피드백을 신속하게 반영할 수 있는 유연한 UI 디자인과 기술적 구성 요소의 중요성을 강조함
     * MVP를 넘어 지속적으로 제품을 개선하고 고객의 만족도를 높이는 것이 장기적인 성공으로 이어질 수 있음을 보여줌
     * 이 글은 스타트업 생활에서 얻은 교훈을 공유하며, 창업자나 개발자들에게 실질적인 인사이트를 제공

        Hacker News 의견

     * 기능/개선사항 조직 방법에 대한 의견
          + 경험에 따르면, 모든 아이디어를 티켓으로 만드는 전략은 비효율적임. 이렇게 하면 결코 사용하지 않을 아이디어들로 가득 찬 '아이스박스'가 생김.
          + 중요한 거래를 위해 아이스박스에 있는 아이디어가 필요할 때조차, 그 아이디어가 존재하는지 기억하지 못해 새 티켓을 만들게 됨.
          + 단기적으로나 중기적으로 실현 가능성이 있는 티켓을 선호하며, 다른 아이디어들은 별도로 저장함.
          + 엔지니어링 팀은 해결하고 싶은 기술 부채 목록을, PM은 프로젝트별 개선 가능성 목록을 유지함.
          + 새 기능/제품에 대해서는 PRD를 작성하지만, 바로 티켓으로 전환하지 않음.
          + 대부분 처리되지 않을 거대한 백로그는 '아니오'라고 말하는 것을 두려워하는 약한 PM의 신호임.
     * 백로그 크기와 PM 교체율의 관계
          + 백로그의 크기는 PM 교체율과 반비례함.
          + 오래된 PM에게 백로그는 과거 제품 대화의 기억 보조장치임.
          + 새로운 PM은 백로그를 보고 혼란스러워하며, 이해할 수 없는 것들을 정리하려고 함.
     * 고객 기반 백로그 유지에 대한 반대 의견
          + 백로그 유지하는 팀은 대부분 고객으로부터 백로그를 얻음.
          + ""고객의 삶을 개선할 기능을 찾아 다음 기능으로 만들라""는 것은 간단하지 않음.
          + 여러 고객이 있고, 각각의 삶을 개선할 기능이 서로 관련 없고 복잡할 때 어떻게 할 것인가?
          + 고객의 요청을 항상 들어야 하지만, 그들이 요청한 것을 거의 만들어서는 안 됨.
          + 고객은 UX 구현뿐만 아니라 문제와 현재 사용 중인 업무 프로세스를 암시하는 기능을 요청함.
          + 비즈니스 문제를 파악하고, UX 구현 아이디어와 프로세스 특정 사항을 버려야 함.
          + 비즈니스 문제를 해결하는 최소한의 기능을 경제적으로, 좋은 UX 디자인과 일관성 있게 구축해야 함.
     * 고객 요구 사항 등록에 대한 PM의 필요성
          + PM은 고객의 요구 사항을 등록할 장소가 필요함.
          + 전용 도구가 없으면, 요구 사항이 대부분 Jira 티켓으로 끝남.
          + ProductBoard와 Jira Product Discovery 두 가지 접근 방식이 있음.
          + ProductBoard는 CRM 접근 방식으로, 모든 고객 상호작용을 기록하고, 나중에 이를 요구 사항과 희망 사항으로 분해함.
          + Jira Product Discovery는 아이디어로 시작하여, 고객으로부터 들은 모든 것을 즉시 긴 요구 사항 및 희망 사항 목록으로 분해해야 함.
          + Jira Product Discovery의 장점은 개발자 백로그에서 아이디어 목록을 분리하지만, 또 다른 긴 목록을 만듦.
          + 고객 대화를 기반으로 제품 우선 순위를 분석하려면 ProductBoard가 더 나은 제품 발견 도구임.
     * 고객 피드백에 의해 정제된 백로그의 중요성
          + 거의 매일 고객과 대화하므로, 고객 피드백에 의해 직접적으로 정보를 얻고 정제된 기능 및 개선사항이 백로그에 있음.
          + 할 일은 항상 많지만, 백로그가 고객 피드백에 의해 정보를 얻고 정제되었는지 여부가 차이를 만듦.
     * 고객과의 일상적인 대화를 통한 백로그 관리
          + 기술적인 사람으로서 매일 고객과 대화하며, 이론은 매력적이지만 몇 가지 문제가 있음.
          + 최근성 편향 및 기회 비용: 더 높은 우선순위로 인해 의도적으로 작업하지 않는 문제 공간에 대한 피드백을 계속 수집해야 함.
          + 반응적 개발: 피드백 로깅을 건너뛰면 가장 최근에 가장 쉽게 접근할 수 있는 작업에 집중하게 되며, 오래된 문제를 간과하게 됨.
          + 팀 지식 기반: 피드백을 수집하고 솔루션을 제공할 단일 책임자가 있다면, OP의 주장이 유효할 수 있음.
          + 팀이 관련되어 있다면, 비동기적으로 데이터 포인트를 기록하고 검색할 수 있는 공유된 데이터베이스가 필요함.
          + 백로그는 빠르게 커질 수 있지만, 복잡한 시스템과 사람들을 다루는 것은 어려움을 수반함.
          + 잘 조직된 팀에게는 백로그의 좋은 관리가 필요하며, 이는 관련 없는 작업을 보관하고, 중복 작업을 제거하고, 정기적으로 우선순위를 정하고, 도구를 최상으로 활용하는 것을 포함함.
          + 백로그를 관리하는 것이 도구 자체보다 중요하며, 필요할 때 더 깊이 파고들 수 있는 정보를 표면화하는 백로그 위의 '파사드'가 필요할 수 있음.
     * 앱 사용자 관찰의 중요성
          + 고객이 앱을 사용하는 모습을 관찰하는 것이 중요함.
          + 모든 측정치를 추적할 수 있지만, 사용자가 무언가를 찾기 위해 스크롤하거나, 뒤로 가기 버튼을 누르거나, 클릭할 수 없는 것을 클릭하려고 하는 모습을 보는 것은 실감나는 경험임.
          + Apple, Google 등 모든 회사가 매일 여러 번 사용자를 관찰하기를 바람.
     * 큰 백로그의 무용성
          + 큰 백로그는 불확실한 가정이 많고, 고객 가치 창출 가능성이 낮음.
          + 무언가가 가치 있다고 가정하는 실수를 많이 했으며, 아무도 신경 쓰지 않을 때가 많음.
          + 큰 백로그는 고객과의 대화 빈도가 낮다는 것을 반영하므로, 매우 회의적인 시각으로 바라봐야 함.
     * 계정 스푸핑 구현에 대한 경고
          + 계정 스푸핑은 생산 환경에서 문제를 테스트하는 쉬운 방법이지만, 지원 및 개발 팀이 생산 데이터에 대한 신뢰를 필요로 함.
          + 일부 산업에서는 고객에게 큰 문제가 될 수 있음.
          + 마지막으로 일한 스타트업은 개발자가 전혀 생산 데이터에 접근하지 못하게 함.
          + 이는 보안 측면에서 최후의 수단으로 간주되어야 하며, 고객 데이터에 접근할 수 없다고 가정하고 작업하는 것이 더 낫음.
     * 제품 계획의 나무 구조
          + 제품 계획은 항상 나무 구조로 이루어져야 함.
          + 최상위 노드는 비즈니스 목표이며, 그 아래에 제품, 그 아래에 고객 문제, 그 아래에 백로그 항목이 있음.
          + 너무 많은 백로그 항목을 가지고 있다는 것은 적절한 구조가 설정되어 있지 않고, 우선 순위가 지정된 비즈니스 목표 목록이 없다는 것을 의미할 수 있음.
          + ""고객과 대화하기""는 고객 문제를 이해하는 데 유용하지만, 비즈니스 목표를 먼저 알아야 함. 그렇지 않으면 어차피 작업하지 않을 영역에서 피드백을 수집하는 데 시간을 낭비하게 됨.
"
"https://news.hada.io/topic?id=12964","연구자들, 최초의 기능성 그래핀 기반 칩 개발 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      연구자들, 최초의 기능성 그래핀 기반 칩 개발 주장

연구자들, 첫 번째 기능하는 그래핀 기반 칩 주장

     * 조지아 공과대학교의 Walt de Heer가 세계 최초로 작동하는 그래핀 기반 반도체를 기반으로 한 칩을 들여다보고 있음.
     * 이 그래핀 기반 칩은 전자 이동성 측면에서 실리콘 대안을 능가함.

GN⁺의 의견

     * 이 기사는 그래핀을 사용한 반도체 칩의 개발에 대한 중요한 진전을 보여줌. 그래핀은 전자 이동성이 뛰어나기 때문에, 기존의 실리콘 기반 칩보다 더 효율적인 전자기기의 제작이 가능할 것으로 기대됨.
     * 조지아 공과대학교의 연구는 반도체 산업에 혁신을 가져올 수 있는 잠재력을 가지고 있으며, 이는 기술 발전에 중요한 역할을 할 수 있음.
     * 이러한 연구 결과는 미래의 전자기기가 더 빠르고 에너지 효율적으로 작동할 수 있는 가능성을 열어줌으로써, 소비자들에게도 큰 이점을 제공할 것임.

        Hacker News 의견

     * 그래핀 트랜지스터의 디지털 전자 요구 충족

     이전에는 그래핀 트랜지스터가 전류를 완전히 차단하지 못해 디지털 로직에는 적합하지 않고 아날로그 회로에만 유용했음. 그러나 최근 개발된 SEC 소재는 전류를 완전히 차단할 수 있어 디지털 전자의 엄격한 요구 사항을 충족함.
     * 테라헤르츠 주파수에서 작동하는 트랜지스터

     새로운 트랜지스터는 테라헤르츠 주파수에서 작동할 수 있어 현재 칩에 사용되는 실리콘 기반 트랜지스터보다 10배 빠른 속도를 제공할 수 있음.
     * 그래핀의 친환경적 제조 과정

     그래핀의 제조 과정은 실리콘 제조 과정에 비해 환경에 덜 해롭지만, 실리콘 기술이 반세기 동안 발전해온 것과 경쟁하기는 어려움. 또한 많은 STEM 인재들이 소프트웨어 분야로 이동하는 추세임.
     * 그래핀 웨이퍼에 대한 이해

     만약 이해가 맞다면, 이것은 회로가 없는 그래핀 시트, 즉 그래핀 웨이퍼일 것임. 여전히 주목할 만하지만, ""기능하는 칩""이라고 부르기에는 다소 무리가 있음.
     * 그래핀 기반 트랜지스터의 가공 및 소형화 가능성

     그래핀을 실리콘처럼 효과적으로 가공하고 소형화할 수 있는지가 관건임. 이미 그래핀 기반 트랜지스터를 제작했고, 실리콘 가공에 사용되는 과정을 여기에도 적용할 수 있다고 주장하고 있어 기대가 됨.
     * 규모 확장과 장비 문제

     기존 인프라를 사용하지 않는 한, 성공 가능성이 낮음.
     * 초고속 칩의 틈새 시장

     실리콘 기반 칩으로는 충족할 수 없는 초고속 칩의 틈새 시장이 있는지, 소규모 회사가 소량 생산하는 것이 가능한지, 아니면 대규모 생산만이 실행 가능한지에 대한 의문 제기.
     * 그래핀 기반 칩의 잠재적 성능

     수천 개(아마도 수십억 개)의 그래핀 기반 트랜지스터 칩이 수조 개의 트랜지스터를 가진 거대 칩을 능가하는 상황을 상상하는 것은 흥미로움. 그러나 클록 속도와 관계없이 캐시 공간과 같은 요소가 중요하고, 충분한 데이터를 빠르게 처리할 수 없다면 빠른 로직이 무의미함.
     * 실제 연구 기사 링크

     연구자들은 개념 증명 장치를 만들었으며, 제작된 상단 게이트 SEG FET의 전기적 특성을 측정함으로써 그래핀의 전기적 성질을 확인함.
"
"https://news.hada.io/topic?id=12890","HackerStartup - 프로젝트 시작을 빠르게 해주는 SaaS Kit 및 스타터 템플릿 모음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HackerStartup - 프로젝트 시작을 빠르게 해주는 SaaS Kit 및 스타터 템플릿 모음

     * 다양한 언어로 구성된 프로젝트 스타터들 : Next.js, Nuxt, RoR, Django, Laravel, Node.js/Deno

무료/오픈소스

     * Wave : SaaS Starter Kit. PHP + Laravel + Voyager + TailwindCSS. 사용자 인증, 구독, 사용자 프로필/권한 관리, 구독, 알림, 블로그,..
     * Bullet Train : SaaS Framework. Ruby On Rails. 사용자 인증, 팀 및 초대 기능, 권한관리, 웹훅, 써드파티 연동,..
     * SaaSKit Deno : SaaS Template. Fresh + Deno. 랜딩 페이지, Stripe 구독, 커스터머 포탈, 사용자 인증,..
     * SaaS Starter Kit : React & Node.js. 사용자 인증, 블로그, 팀 관리, 온보딩, 권한관리, Stripe 구독,..
     * Ignite for Flask : 사용자 인증, OAuth, 팀/그룹, Stripe, 이메일, 어드민 대시보드, 파일 업로드 등
     * Rails Tabler Starter : Rails. 사용자, 권한 관리, 구독,..
     * Openkoda : SaaS 앱을 위한 로우코드 플랫폼. Java. 사용자 인증 및 관리, 결제 연동, 멀티 테넌트 지원, 대시보드,..

유료 프레임워크

     * ShipFast - Nextjs Boilerplate
     * Divjoy
     * Nextjs SaaS boilerplate
     * Next.js 14 SaaS starter kit
     * Nuxt 3 SaaS starter kit
     * SaaS Pegasus - The Django SaaS boilerplate
     * JumpStart Rails
     * Nodewood
     * Laravel Spark
     * Hix for Next.js
     * Hix for Rails
     * Zero Gravity Factory
     * UseGravity
"
"https://news.hada.io/topic?id=12937","Ask GN: GPX/KML을 이용한 등산 관련 사이트 개발중인데 조언 부탁합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Ask GN: GPX/KML을 이용한 등산 관련 사이트 개발중인데 조언 부탁합니다

   안녕하세요
   매일 아침을 GeekNews 로 시작하는 개발자입니다.
   임베디드만 20년 정도 했는데... 최근 frontend 에 관심이 생겨서 사이트 하나 만들고 있습니다.

   어렵네요...html5 , css , js 로 만들고 있는데 모르는 것 투성이다 보니 하나 씩 공부하면서 꾸역꾸역 진행하고 있네요.

   GeekNews 에 1인개발뉴스를 보면서 사실 많이 부럽네요...

   지금 등산? 관련 사이트를 만들고 있습니다.
   간단히 설명 드리면 사용자로 부터 GPX 파일, JPG 파일을 input 으로 받아서
   KML 파일을 생성해 주는 사이트입니다.

   등산하다가 사진을 많이 찍는데요... 나중에는 이 사진을 어디서 찍었는지 잘 기억나지 않을 때가 많습니다.
   그래서 Google Earth 에서 등산루트를 표시하고 사진위치정보를 가지고 placemark 를 만들어 줍니다.
   이 과정을 손으로 할려면 좀 번거로운 작업이 되서 웹사이트로 만들었어요.

   사실 저도 이 사이트에 광고 덕지덕지 붙여서
   회사 안 다니고 살고 싶어요...ㅠㅠ

   문제는 홍보를 어떻게 해야 할지 모르겠어요...
   대형 커뮤니티에 올렸더니 광고라고 바로 삭제하네요..ㅠㅠ
   ( 하긴 광고가 맞죠..ㅠㅠ)

   html 디자인도 넘 형편이 없네요..ㅠㅠ
   혹시 나 조언해 주실 수 있으시면 조언 부탁 드립니다.

   사이트 주소입니다
   https://ej-hiking.pages.dev

   감사합니다.
    1. 키워드를 수집해서 SEO 작업을 체계적으로 해보세요.
       네이버 키워드샵에서 등산 관련 키워드부터 조사해보시면 가닥이 잡힙니다.
       SEO 작업으로 트래픽을 확보하는 것 만으로는 턱없이 부족할 때가 많죠.
       사용자의 능동적인 컨텐츠 참여 분위기가 조성되어야 성장을 기대할 수 있습니다.
    2. 사용자 액티비티를 로그해보세요.
       사용자가 어느 컨텐츠에서 실망하고 사이트를 이탈하고 있는지,
       const logElems = document.getElementsByClassName(""logTarget"")
       for(logElem of logElems) { logElem.addEventlistener(""click"", axios(logUri, option) ) }
       이런 식으로 로그 DB 를 만들어서 전체 방문자 개인 각각에 대해, 어디서 와서 얼마나 있다가 왜 이탈했는지 보고서가 만들어질 정도로 추적해야 합니다.

   디스콰이엇에 인디 메이커 클럽이라는 곳도 있고, 디스콰이엇 자체가 제품 알릴 수 있는 곳이라서 도움이 되실 것 같습니다.
   https://disquiet.io/club/indie-dev

   아 감사합니다.
   저도 말씀하신 사이트를 예전에 여기서 본 기억이 있는데 ...
   다시 검색해봐도 도저히 찾을 수가 없어서 포기하고 있었네요.
   감사합니다.

   제 생각에 일단 등산+디지털화 관련해서 정보 축적 및 SEO 작업을 하시면 좋을 것 같습니다.
   등산을 많이 하는 분들보다 초보자가 더 많을 거라고 생각이 되는데, 그 사람들까지 쉽게 이용할 수 있게요.

   도메인은 얼마 안 하니까 싼 거로 하나 사시는게 어떨까 생각이 됩니다. 도메인은 계속 유지하는게 좋으니까요.

   ""이지 하이킹 : 등산 기록을 이쁘게 남기기"" 뭐 이런식으로 네이밍을 하고, 그걸 계속 사용하는 거죠.

   일단 네이버 블로그 말고, 해당 페이지에 기능에 대한 소개 글을 생성하시면 좋을 것 같습니다.
   (귀찮지만 같은 글을 네이버 블로그와 사이트에 동시에 게재하는 것도 나쁘지 않습니다. 물론 네이버에서는 이쪽 사이트로 모두 연결하게 하고요)
   예를 들어 GPX 파일 생성 방법도 사용자 별로 분할해서 각각 글을 작성해 두는 거죠.
     * 미밴드 사용자, 애플워치 사용자, 일반 스마트폰 사용자
     * 그리고 사진 올리기, KML 생성하기등 기타 사용법을 최대한 쉽게 풀어서 예제 화면과 함께 다양하게 작성해두세요. 이건 두고두고 사이트 유입 경로가 됩니다.

   그리고 이렇게 만들어진 것이 어떻게 보이는지 결과 캡쳐를 해서 글로 한번에 펼쳐서 보여주는 게 좋습니다.
   지금은 상단에 작은 영상으로만 보여서 잘 모르겠어요. 이 영상은 영상대로 내비두시고, 글로도 보여주세요.

   이런 특정 버티컬 사이트가 광고로 수익화 하는것은 매우 어렵습니다.
   KML을 생성한 후에 그걸 별도의 3D 비디오로 만들어주는 것을 유료 기능으로 만들어보시면 어떨까요?
   Relive https://www.relive.cc/ 앱이 비슷한 기능을 제공하는데, 그걸 좀 더 쓰게 쉽게 만들거나, 인스타에 올리기 좋게 최적화 하거나 하는 등으로 한국 등산러들에게 어울리게 해서요.

   그렇게 해서 예제들이 모이고, 사람들이 좀 생기면 커뮤니티 기능을 추가하는 게 다음 마일스톤이 될거 같네요.
   그리고 계속 기능을 추가하고, 수익화 경로를 추가해 가는 거죠.

   p.s. 이 글 제목 자체도 나중엔 사이트에 대한 하나의 유입수단이 될 수 있으니
   ""GPX/KML을 이용한 등산 관련 사이트 개발중인데 조언 부탁합니다"" 이런식으로 바꾸면 어떨까 싶네요. 의견 주시면 제가 고쳐두겠습니다 ;)

   아 감사합니다.(제목수정 부탁드리겠습니다)
   relive 는 잘 알고 있습니다. 저도 참고 많이 했습니다.
   3D 비디오 만드는 부분은 좀 찾아 봐야 할 것 같네요..사실 감이 안 잡히기는 합니다.

   힘이 되는 말, 감사합니다.
   좀 더 힘을 내서 해 봐야 겠네요...^^
   GeekNews 화이팅입니다.
"
"https://news.hada.io/topic?id=12908",""6174"라는 기술명을 가진 새로운 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""6174""라는 기술명을 가진 새로운 발견

카프레카 상수 6174

     * 6174는 인도의 수학자 D. R. 카프레카의 이름을 딴 카프레카 상수로 알려짐.
     * 이 수는 최소 두 개의 서로 다른 숫자를 사용하여 만든 네 자리 수를 가지고 다음과 같은 규칙을 적용할 때 언제나 고정점인 6174에 도달하는 특성을 가짐:
          + 네 자리 수를 내림차순과 오름차순으로 배열하여 두 개의 네 자리 수를 만듦(필요한 경우 선행하는 0을 추가).
          + 더 큰 수에서 작은 수를 뺌.
          + 2단계로 돌아가서 반복.
     * 이 과정을 카프레카 루틴이라고 하며, 최대 7번의 반복으로 6174에 도달하게 됨. 한 번 6174에 도달하면, 계속 같은 결과를 얻게 됨.

카프레카 루틴의 예외와 다른 속성

     * 1111과 같은 모든 자리의 숫자가 같은 네 자리 수는 한 번의 반복 후 0000을 결과로 얻어 카프레카 루틴이 6174에 도달하지 않음.
     * 세 자리가 동일하고 나머지 한 자리가 하나 높거나 낮은 수(예: 2111)의 경우에는 선행하는 0을 추가하여 네 자리 수로 취급해야 함.
     * 6174는 7-스무스 수로, 소인수 중 7보다 큰 수가 없음.
     * 6174는 18의 처음 세 제곱의 합으로 표현 가능: (18^3 + 18^2 + 18^1 = 5832 + 324 + 18 = 6174), 그리고 우연히도 (6 + 1 + 7 + 4 = 18).
     * 6174의 소인수들의 제곱의 합은 제곱수: (2^2 + 3^2 + 3^2 + 7^2 + 7^2 + 7^2 = 4 + 9 + 9 + 49 + 49 + 49 = 169 = 13^2).

GN⁺의 의견

     * 카프레카 상수 6174는 수학적 호기심을 자극하는 흥미로운 주제로, 간단한 규칙을 통해 예측 가능한 결과에 도달하는 과정을 보여줌.
     * 이러한 수학적 발견은 숫자의 놀라운 패턴과 속성을 탐구하는 데 있어 수학자들에게 영감을 제공함.
     * 카프레카 루틴은 프로그래밍 교육에서 알고리즘과 반복문을 설명하는 예제로도 활용될 수 있으며, 수학과 컴퓨터 과학의 교차점을 이해하는 데 도움이 됨.
"
"https://news.hada.io/topic?id=12912","OpenAI, 군사 도구에 대한 금지 해제로 펜타곤과 파트너십 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OpenAI, 군사 도구에 대한 금지 해제로 펜타곤과 파트너십 체결

OpenAI, 군사 도구 금지 해제 및 펜타곤과의 파트너십

     * OpenAI가 사이버보안 관련 소프트웨어 프로젝트를 포함하여 펜타곤과 협력 중임을 발표함.
     * 이전에는 군사적 목적으로 인공지능 기술을 제공하는 것을 금지했으나, 최근 정책 변경으로 금지 해제함.
     * 무기 개발 금지는 유지하되, 군사 및 전쟁용 AI 사용 금지 조항을 삭제함.

실리콘밸리, 펜타곤과의 협력에 대한 태도 변화

     * 최근 몇 년간 실리콘밸리가 미군과의 협력에 대한 태도를 완화함.
     * 구글 직원들이 펜타곤 프로젝트에 반대하는 시위를 벌였으나, 이후 구글은 방위 계약으로 수백만 달러를 벌어들임.
     * 미-중 긴장과 우크라이나 전쟁으로 인해 기업가들의 군사 협력에 대한 우려가 줄어듦.

AI와 군사의 미래, 위험성 포함

     * AI가 군사에 미칠 영향에 대해 방위 전문가들이 낙관적임.
     * AI가 실수로 가짜 정보를 만들어낼 수 있는 위험성이 있으며, 이는 군사 지휘 통제 시스템에 통합될 경우 더 큰 위험을 초래할 수 있음.

OpenAI의 군사 거래 가능 범위 불분명

     * OpenAI는 무기 개발을 배제했지만, 데이터 분석이나 코드 작성과 같은 목적으로 국방부에 AI 소프트웨어를 제공할 수 있음.
     * 우크라이나 전쟁에서 데이터 분석 소프트웨어가 전쟁 수행에 중요한 역할을 함을 보여줌.

OpenAI의 정책 변경으로 AI 안전성에 대한 논쟁 재점화 가능성

     * OpenAI의 정책 변경이 과거 CEO Sam Altman의 해임에 기여한 AI 안전성에 대한 논쟁을 다시 불러일으킬 수 있음.

   GN⁺의 의견:
     * OpenAI의 군사 도구 금지 해제는 AI 기술의 군사적 활용 가능성을 확대하며, 이는 기술 발전과 국가 안보에 중요한 전환점이 될 수 있음.
     * 실리콘밸리의 태도 변화는 기술과 국방의 통합을 가속화할 수 있으며, 이는 미래의 전쟁 양상에 영향을 미칠 것임.
     * AI의 군사적 통합은 큰 잠재력을 가지고 있지만, 동시에 '가짜 정보 생성'과 같은 AI의 오류로 인한 위험성도 고려해야 함.

        Hacker News 의견

     * OpenAI 직원들이 몇 주 전에 ""Altman을 복직시키지 않으면 사퇴하겠다""는 내용의 서한에 서명함.

     OpenAI 직원들이 전쟁 목적으로 OpenAI를 사용하지 않겠다는 서한에 서명할 의향이 있는지, 아니면 창립 원칙을 처음부터 배신할 준비가 되어 있었는지에 대한 의문 제기.
     * 인공지능(AI)이 무기화될 것이며, 이 분야에서 일하는 사람들은 그 사실을 받아들여야 함.

     AI가 무기화되는 것은 예측 가능하며, 인류를 위한 일이라는 주장은 이제 더 이상 설득력이 없음.
     * OpenAI가 ChatGPT를 군사 및 전쟁 목적으로 사용하지 않겠다는 금지 조항을 삭제함.

     관련 기사 링크: Hacker News 기사 - 2024년 1월 (260개의 댓글)
     * OpenAI가 비영리 단체가 아니게 되면서 군사 산업 단지의 입찰에 노출됨.

     OpenAI가 군사 산업 단지의 입찰에 노출되어 큰 기업들의 말을 듣는 존재가 되는 것을 방지하고자 했던 기업 구조의 동기가 안타까움.
     * 펜타곤이 Sam Altman이 OpenAI 이사회로 복귀하는 것을 환영함.

     펜타곤의 반응 언급.
     * OpenAI의 글로벌 업무 부사장인 Anna Makanju가 회사는 무기 개발 금지 방침을 유지할 것이라고 언급함.

     OpenAI의 무기 개발 금지 방침 유지에 대한 정보.
     * OpenAI 기술을 Microsoft 제품에 더 많이 통합하려면, 아마도 가장 큰 고객인 국방부와 협력해야 할 것임.

     OpenAI 기술의 Microsoft 제품 통합과 관련하여 국방부와의 협력 필요성 언급.
     * 제목을 읽고 사람들이 GPT로 구동되는 살인 로봇을 떠올리지만, 실제로는 군사 조달 서류와 같은 일상적인 문서 처리에 더 많이 사용될 가능성이 있음.

     OpenAI 기술의 군사적 활용에 대한 오해와 실제 사용 가능성에 대한 설명.
     * OpenAI의 제품이 미국 국방부에 어떤 이득을 줄 수 있는지 혼란스러움. 주력 제품인 LLM과 이미지 생성기가 국방부에 어떤 대규모 사용 사례가 있을지 불확실함.

     OpenAI 제품의 국방부 활용에 대한 의문 제기.
     * 사람들이 성급한 결론을 내리고 있음. 국방부는 많은 일을 하며, 대부분은 지루한 일임. OpenAI의 제품이 물리적 무기와 관련된 용도로 사용될 가능성은 매우 낮음.

     국방부의 OpenAI 제품 활용에 대한 성급한 판단과 실제 사용 가능성에 대한 설명.
"
"https://news.hada.io/topic?id=12992","Winlator - Wine을 통해 Windows 프로그램을 실행하는 Android 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Winlator - Wine을 통해 Windows 프로그램을 실행하는 Android 앱

     * Wine과 Box86/Box64 기반으로 Windows(x86_64) 프로그램을 실행할 수 있는 Android 앱.
     * VirGL, TurnipZink 등 그래픽도 같이 지원하여 3D 게임 실행 가능.
     * Fallout 3, Mass Effect 2 등 게임을 실행하는 데모 포함.

   (카카오톡 실행을 위해서) 크롬북에서 사용해볼 수 있을까 생각했지만, 크롬북에서 바로 Wine을 쓰면 되니 의미는 없군요...

   카카오톡이 정식 브라우저 클라이언트를 지원하길 간절하게 바래봅니다.

   오우.. 이게 되네.. 싶은..? 카카오톡 돌아가려나..

   생각보다 오래된 프로젝트네요. 전혀 몰랐는데...

   Wine은 잘 알고 있지만, Wine을 안드로이드에서 실행하게 한 건 정말 신기합니다.

   Box64가 amd64 -> arm64로 변환하여 안드로이드에서 Wine을 실행하게 해주고,
   DXVK가 Mesa를 통해 DX3D -> Vulkan으로 변환해 기기의 GPU를 사용할 수 있게 한다는 것 같네요.

   이거나 가지고 놀아봐야겠습니다. +_+
"
"https://news.hada.io/topic?id=12889","RVScript - 게임엔진을 위한 고속 RISC-V 스크립팅 백엔드 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              RVScript - 게임엔진을 위한 고속 RISC-V 스크립팅 백엔드 오픈소스

     * Low-Latency가 가능한 RISC-V 샌드박스 기반의 스크립팅 시스템
     * 빠른 가상 머신과 낮은 호출 오버헤드 및 메모리 사용을 결합하여, 타입 안전성과 메모리 안전성을 갖춘 스크립트 환경을 제공함
     * Lua/LuaJIT 이나 WASAM 의 경우 스크립트로의 함수 호출시 상당한 오버헤드가 발생하여 지연시간이 있음
     * 이 프로젝트는 게임 스크립팅을 저지연으로 만들어 복잡한 기계 간 상호작용이 필요한 자동화 게임에서도 신속한 실행을 가능하게 함
     * 고급 기술을 사용하여 네이티브와 에뮬레이션된 현대 C++ 사이의 경계를 흐리게 하는 방법을 시연
          + 호스트 측 코드는 가상의 게임 프레임워크 내부에서 실행되는 것처럼 작성됨
          + 여러 CRT 함수가 시스템 호출로 구현되어 있어 네이티브 성능을 제공
     * GNU RISC-V 컴파일러와 C++ 20을 사용

   이걸 스크립트라고는 하는데... C/C++로 짜고 컴파일해야 하는 모양이네요.
"
"https://news.hada.io/topic?id=12917","보험료 계산기를 악용한 보험사 해킹 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         보험료 계산기를 악용한 보험사 해킹 사건

Toyota/Eicher Motors 보험사 해킹 사건 요약

     * Toyota Tsusho Insurance Broker India의 하위 도메인에 있는 Eicher Motors 보험료 계산기 웹사이트가 Microsoft 기업 클라우드 자격 증명을 노출.
     * 이메일 발송 API가 클라이언트에게 발송 로그를 반환했으며, 이 로그에는 이메일 계정의 비밀번호가 포함됨.
     * 해당 비밀번호를 사용하여 ""noreplyeicher@ttibi.co.in"" Microsoft 이메일 계정에 로그인 가능했으며, 이 계정에는 이중 인증이 설정되어 있지 않음.
     * 이메일 계정에는 고객에게 보낸 모든 것의 기록이 있었으며, 이는 고객 정보, 보험 정책 PDF, 비밀번호 재설정 링크, OTP 등을 포함한 약 657,000개의 이메일(~25 GB)을 포함함.
     * Microsoft 클라우드의 다른 자원들도 접근 가능했으며, 이에는 기업 디렉토리, SharePoint, Teams 등이 포함됨.
     * Toyota Tsusho Insurance Broker India는 보고 후 2개월이 넘도록 취약한 API를 내렸지만, 여전히 이메일 계정의 비밀번호는 변경하지 않음.

Toyota Tsusho Insurance Broker India와 Eicher Motors

     * Toyota Tsusho Insurance Broker India(""TTIBI"")는 일본의 Toyota Tsusho Insurance Management Corporation 산하에 설립된 2008년 인도의 주요 보험 중개 회사.
     * Eicher Motors는 인도의 주요 자동차 제조업체로, Royal Enfield Motors 브랜드로 오토바이와 Volvo Group과 합작으로 VE Commercial Vehicles (VECV) 브랜드로 상용차를 제조함.
     * 두 회사는 TTIBI 사이트의 Eicher 전용 하위 도메인을 통해 어떤 형태의 보험 파트너십을 맺고 있음.

보험료 계산기

     * MY EICHER 안드로이드 앱을 분석하는 과정에서 보험료 계산기로 연결되는 URL을 발견함.
     * 이메일 발송 메커니즘을 클라이언트 측에서 제어하는 코드를 발견하고, API 요청을 시도해본 결과, 예상과 달리 서버 오류와 함께 이메일 발송 로그가 반환됨.
     * 로그에서 base64로 인코딩된 비밀번호를 찾아낼 수 있었으며, 이는 심각한 보안 문제로 이어짐.

이메일 계정

     * ""noreply"" 이메일 계정은 고객에게 자동화된 이메일을 보내는 데 사용되며, 이 경우에는 고객에게 보낸 모든 것의 기록을 가지고 있었음.
     * 이메일 계정을 통해 개인/민감한 정보가 담긴 보험 정책, OTP, 비밀번호 재설정 링크 등을 볼 수 있었으며, Microsoft 클라우드 자원에도 접근 가능했음.

보안 문제의 완벽한 폭풍

     * 이 취약점은 5가지 불행한 보안 문제/실수로 인해 발생함.
          + 문제 #1: 클라이언트가 제어하는 이메일 발송 기능을 만들지 말 것.
          + 문제 #2: API 인증 누락.
          + 문제 #3: API 응답 유출.
          + 문제 #4: 이중 인증 부재.
          + 문제 #5: 이메일 보존 문제.

비밀번호는 여전히 변경되지 않음

     * TTIBI는 취약점을 인지한 후 5개월이 넘도록 이메일 계정의 비밀번호를 변경하지 않았으며, 여전히 로그인이 가능함.
     * Microsoft로부터의 비정상적인 로그인에 대한 경고가 없었던 것에 대해 놀라움을 표함.

타임라인

     * TTIBI는 Toyota의 HackerOne 취약점 공개 프로그램에 포함되지 않아, 대신 인도의 CERT-In에 취약점을 보고함.
     * 2023년 8월 7일부터 12월 22일까지의 보고, 응답, 확인 과정을 거쳐 취약점이 해결됨을 확인하고, 버그 바운티 보상에 대한 논의가 있었으나 TTIBI는 응답하지 않아 사례가 종결됨.

GN⁺의 의견

     * 이 사건은 기업의 클라우드 보안과 데이터 보호의 중요성을 강조함. 간단한 웹사이트 취약점이 큰 보안 위협으로 이어질 수 있음을 보여줌.
     * 보안 문제를 신속하게 해결하지 않는 기업의 태도는 고객 데이터 보호에 대한 신뢰를 손상시킬 수 있음.
     * 이 사례는 소프트웨어 개발자와 IT 관리자에게 보안 관행을 재검토하고 강화할 필요성을 일깨워줌.

        Hacker News 의견

     * 문화적 문제와 관리 방식

     한 IT 대기업에서 일하는 비인도인으로서, 개발자들이 자기 실현을 하거나 주도적으로 일하는 것을 막고, 저렴하게 일을 처리하는 관리 방식에 대해 문제를 제기함. 미국이었다면 회사를 그만뒀을 것이지만, 인도에서는 그러지 못하는 상황을 지적함.
     * 관리진의 기술적 배경 부족

     대부분의 관리진이 기술 배경이 없어서 잘못된 점을 듣고 싶어 하지 않으며, 개발자들이 서로 다른 분야에 대해 소통하지 않고 각자의 영역에만 집중하도록 만드는 분리된 작업 환경을 비판함.
     * 예산과 보안 문제

     큰 프로젝트에서도 사소한 비용을 두고 논쟁하는 경우를 언급하며, 보안팀의 예산이 가장 먼저 삭감되는 문제를 지적함.
     * 개발자의 역할과 혁신 문화 부재

     개발자들이 혁신적이지 않고, 단순히 지시받은 대로 일하는 콜센터와 같은 환경에서 일하는 것에 대한 비판을 제시함.
     * 금융 정보의 취약한 보안

     과거 자동차 딜러의 금융 정보 저장 방식의 취약점을 발견했지만, 보안 문제에 대한 인식 부족으로 신고하지 않았던 경험을 공유함.
     * 기업의 부주의한 보안 관리

     고객 문서를 이메일 계정에 저장하는 등의 부주의한 보안 관리에 대해 기업의 관리 부실을 비판함.
     * 개발자의 의도적인 보안 허점

     다른 나라의 개발자들이 정부에 판매하기 위해 의도적으로 보안 허점을 만들 수 있다는 의혹을 제기함.
     * 보안 문제에 대한 무관심

     TTIBI가 보안 취약점에 대해 알고 있음에도 불구하고 여전히 비밀번호를 변경하지 않은 문제를 지적함.
     * 클라이언트 사이드 자바스크립트를 통한 취약점

     클라이언트 사이드 자바스크립트를 통해 발견된 취약점으로 인해 SharePoint와 Outlook에 대한 접근이 가능한 심각한 보안 문제를 언급함.
     * 인도의 전력 문제와 데이터 유출

     인도의 전력 문제가 데이터 유출보다 더 큰 문제라고 언급하며, 인도의 인프라 발전에 대한 기대를 표현함.
     * 보안 취약점의 미신고 문제

     보안 취약점을 신고하지 않는 문제에 대해 법적 책임을 요구하는 의견을 제시함.
     * 이메일 모니터링의 부재

     이메일 모니터링의 부재와 이로 인한 비정상적인 활동 감지 실패를 지적함.
     * 버그 바운티에 대한 무관심

     TTIBI가 버그 바운티에 대한 질문에 응답하지 않고, 보안 문제를 적절히 처리하지 않는 태도를 비판함.
"
"https://news.hada.io/topic?id=12904","Moore-AnimateAnyone - 캐릭터 애니메이션을 위한 이미지-to-비디오 합성 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Moore-AnimateAnyone - 캐릭터 애니메이션을 위한 이미지-to-비디오 합성 기술

     * HumanAIGC의 AnimateAnyone 논문을 기반으로 다른 기법을 도입하여 좀 더 개선 및 재구현한 오픈소스
     * 드래프트 버전으로 AnimateAnyone의 80% 성능을 목표로 함
     * 추론 코드와 웨이트를 공개. 트레이닝 스크립트는 비공개 데이터가 포하되어 있어서 정리후 공개 예정

   Animate Anyone: 캐릭터 애니메이션을 위한 이미지-to-비디오 합성 기술
"
"https://news.hada.io/topic?id=12888","여러분의 기여를 환영하는 D 언어 포크, OpenD","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      여러분의 기여를 환영하는 D 언어 포크, OpenD

OpenD 소개: D 언어 포크

     * D 언어의 리더십은 커뮤니티의 기여를 받아들이는 과정에서 많은 어려움을 겪어왔음.
     * 커뮤니티의 의견을 반영하여 D 언어를 개선하려는 시도가 있었으나, 이러한 시도들이 종종 무시되거나 지연되는 문제가 발생함.
     * 이러한 배경에서 OpenD라는 D 언어의 포크가 탄생하였으며, 이는 커뮤니티의 기여를 보다 개방적으로 받아들이려는 목적을 가짐.

D 언어 개발의 역사

     * D 언어 개발은 커뮤니티의 기여 없이는 오늘날의 모습에 이르지 못했을 것임.
     * 그러나 커뮤니티의 기여가 충분히 인정받지 못하고, 중요한 결정에 있어 커뮤니티의 의견이 제대로 반영되지 않는 문제가 지속적으로 제기됨.
     * 이러한 문제는 D 언어의 초기부터 지속되어 왔으며, 이로 인해 많은 기여자들이 실망하고 D 언어 프로젝트를 떠남.

Ares/Tango 포크의 영향

     * 과거에는 Walter Bright의 결정에 도전하기 위해 Ares라는 이름으로 D 언어의 포크가 생성되었으며, 이는 나중에 Tango로 발전함.
     * Tango는 개발자들이 자유롭게 기여할 수 있는 환경을 제공했으며, Phobos 생태계에 없는 많은 기능들을 포함함.
     * Tango 포크는 D 언어의 발전에 중요한 역할을 하였으며, 이 포크가 없었다면 D 언어는 시장에서 실패한 실험에 불과했을 것임.

개발자들의 이탈

     * D 언어의 황금기 이후, 많은 기여자들이 프로젝트를 떠났으며, 이는 결국 D 언어의 발전을 저해함.
     * 기여자들은 자신들의 작업이 무시되거나 인정받지 못하는 과정에 실망하여 참여를 중단함.
     * 이러한 상황은 D 언어의 상업적 사용자들에게도 영향을 미쳤으며, 결국 D 언어의 발전에 큰 장애가 되었음.

OpenD로의 전환

     * 기여자들의 불만과 실망이 쌓이면서, 일부는 D 언어의 리더십과 결별하고 OpenD라는 새로운 포크로 전환함.
     * OpenD는 D 언어의 문제점을 해결하고자 하는 커뮤니티 기여자들의 노력을 담고 있으며, 이는 D 언어의 미래에 새로운 가능성을 제시함.

GN⁺의 의견

     * D 언어의 개발 과정에서 커뮤니티의 기여가 충분히 인정받지 못한 것은 프로젝트의 성장에 큰 걸림돌이 되었음.
     * OpenD 포크는 기존 D 언어의 한계를 극복하고자 하는 개발자들의 열정과 노력을 반영하고 있으며, 이는 오픈 소스 프로젝트의 중요성을 강조함.
     * 이 기사는 소프트웨어 개발과 오픈 소스 커뮤니티에 관심 있는 이들에게 D 언어의 발전 과정과 그 안에서의 커뮤니티 역할의 중요성을 이해하는 데 도움이 될 것임.

        Hacker News 의견

     * D 언어의 리더십 중 일부인 Walter가 활동적이며, 이곳에서 의견을 볼 가능성이 높음. 그들은 D 언어에 대해 많은 관심을 가지고 있으며, 경험상 선의를 가진 사람들임.
     * D 언어를 포크해야 한다는 의견이 오랫동안 있었으며, 결국 이는 불가피한 일이었음. 2010년 Andrei Alexandrescu의 책이 나왔을 때 D 언어에 매력을 느꼈던 기능들이 이제는 C#, Java, C++에도 구현되어 있음.
     * D 언어의 커뮤니티는 대화하기 좋은 사람들로 가득하지만, 결정적인 기능을 확립하지 못하고 새로운 사용자를 끌어들이려는 노력에 너무 많은 시간을 낭비함.
     * Rust가 새로 나왔을 때 D 커뮤니티에 lifetime 개념이 제안되었으나 Walter에 의해 불필요하다고 여겨졌음. 몇 년 후 Walter는 Rust와 다른 자신만의 lifetime 제안을 했지만, 그 유용성에 대해서는 의문이 남음.
     * 새로운 거버넌스 모델은 기능 결정이나 배제가 아닌 이해당사자들의 토론으로 시작해야 함. 이번 D 언어의 포크는 장기적으로 성공할 가능성이 낮아 보임.
     * 연구 그룹은 D 언어의 비반응성과 부진한 언어 개발 방향으로 인해 몇 년 전에 Rust로 전환함. OpenD의 성공을 바라지만, 더 독특하고 기억에 남는 이름을 선택할 기회가 있음을 희망함.
     * D 언어가 가비지 컬렉터(GC)에 전념한다면 그 틈새 시장이 무엇인지 혼란스러움. 이미 C#과 Java가 가비지 컬렉터를 사용하는 C++의 후계자로 자리 잡고 있어 경쟁이 어려움.
     * D 언어의 비전이 불분명함. 문서가 읽기 어렵고 설명이 부족하여 언어의 명확한 설계 비전을 파악하기 어려움.
     * OpenD에 대한 업데이트가 있으며 관심을 받고 있음. 'Died'라는 이름이 더 재미있었을 것이라는 의견도 있음.
     * D 언어 포럼에서 이 주제에 대한 큰 토론이 있음.
     * 지난 10년간 프로그래밍 언어의 거버넌스에 대한 많은 교훈을 얻음. 언어 선택 시 거버넌스를 중요한 요소로 고려해야 함.
     * 여러 컴파일러 구현이 존재하는 것의 부정적인 측면을 찾기 어려움. C 언어의 인기 비결 중 하나가 다양한 컴파일러 구현의 자유로움에 있음.
"
"https://news.hada.io/topic?id=12927","구글을 떠나는 것에 대한 FAQ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           구글을 떠나는 것에 대한 FAQ

     * 벤 콜린스-서스만이 Google에서 해고된 후 받게 될 질문들에 대비해 작성한 FAQ를 공유함
     * 이 FAQ는 친구와 가족에게 반복적인 설명을 피하기 위함이며, 동료들이 대량 해고의 여파를 이해하고 처리하는 데 도움을 주기 위해 작성됨

무슨 일이 있었나요?

     * Google에서 또 다른 대규모 해고가 있었으며, 작성자 벤을 포함한 수백 명이 해고됨
     * 장기 근속자나 고위직도 해고 대상에 포함되었으며, 벤은 18년간 근무함

왜 당신이 대상이 되었나요?

     * 개인적으로 타겟팅된 것이 아니며, 실수한 것도 아님
     * 이번 해고는 매우 비인격적이며, Google이 운영 비용을 절감하기 위한 일반적인 조치로 보임
     * 벤은 엔지니어링 디렉터로 ""단지"" 35명을 관리하는데, 일반적으로 80명 이상을 관리함으로써 어떤 휴리스틱에 의해 회사가 그가 없이도 잘 운영될 수 있다고 판단된 것 같음

이건 불공평해요! 당신이 한 모든 일에 대해 Google이 어떻게 이럴 수 있죠?

     * Google은 개인이 아니라 다양한 프로세스, 규칙, 문화를 따르는 여러 그룹의 사람들임
     * 따라서 ""Google""을 사랑하거나 화를 내는 것은 무의미함. Google은 의식이 없으며 의무나 빚에 대한 감각이 없음

괜찮으신가요? 정말 미안해요! 어떻게 대처하고 계신가요?

     * ""괜찮아요. :-)""
     * Google 문화는 지난해 첫 대규모 해고로 크게 변했으며, 그는 몇 달 동안 이 불가피한 사건에 대비해왔음.
     * 감정은 혼합적임: 시카고 엔지니어링 사무소를 수십 년 동안 구축하며 자부심을 느끼고, 세계에서 가장 지능적이고 창의적인 사람들과 일할 수 있어 감사함을 느낌.
     * ""불편한 문화""와 ""황금 수갑"" 사이의 갈등이 견딜 수 없게 되어 안도감을 느낌.

앞으로 무슨 일이 일어날까요?

     * 벤은 Google을 떠난 장기 근속 리더들이 정체성 위기를 겪는 것을 보았지만, 그 자신은 그렇지 않음. :-)
     * 다양한 취미와 숨겨진 경력이 많아 할 일과 따를 길이 많음.
     * 그러나 우선적으로는 25년 이상의 기술 분야 경력 후 오랫동안 미뤄왔던 휴식이 필요함.
     * 곧 자신의 Google 경력에 대한 이야기와 시간이 지남에 따라 Google 문화가 어떻게 변했는지에 대한 '사후 분석' 이야기를 발행할 예정임.
     * 그는 Google에서의 경험과 문화 변화에 대한 이야기를 담은 책 ""Debugging Teams""를 출간한바 있으며, ""How to Leader"" 강연도 참고할 것

GN⁺의 의견

     * 이 글은 Google에서의 장기 근속 후 해고된 한 인물의 경험을 통해 대기업의 문화 변화와 개인의 경력 관리에 대한 중요한 통찰을 제공함.
     * 벤 콜린스-서스만의 긍정적인 태도와 미래에 대한 준비는 직업적 변화에 직면할 때 필요한 태도와 전략을 보여줌.
     * 이 글은 대규모 해고와 같은 어려운 상황을 겪는 사람들에게 희망과 영감을 주며, 변화를 기회로 만드는 방법에 대한 사례를 제시함.

   sorry 가 미안하다고 번역되어 어색하네요 ㅎㅎ '유감이에요' 정도가 적당하지 않을까 해요

        Hacker News 의견

     * 벤 콜린스-서스만의 두 강연이 경력에 큰 영향을 주었음
          + ""천재 프로그래머의 신화""와 ""조직적 조작의 기술"" 강연을 통해 전문 엔지니어로서의 사고방식을 갖게 됨
          + 면접 전이나 몇 년에 한 번씩 이 강연들을 다시 보며 마음가짐을 다잡음
     * 구글 초기의 문화와 현재의 기업 환경과의 대조
          + 구글이 대학원 같은 곳이었으며, 개인의 실험과 혁신을 요구했던 과거
          + 현재는 그러한 문화가 사라졌다고 느낌
     * 구글에 대한 감정 표현의 타당성
          + 구글에 화를 내거나 사랑하는 것은 무의미하지만, 상황을 결정한 사람에게 화를 낼 권리가 있음
          + 저자는 철학적이고 실용적인 태도를 취하며, 다른 사람들도 자신의 상황에 따라 다양한 반응을 보일 수 있음
     * 구글에서 해고당한 후의 대응
          + 해고 소식을 친구와 가족에게 전달하기 위해 FAQ를 작성함
          + 이러한 접근 방식이 기술자다운 특징으로 여겨짐
     * 고위직 인사의 이탈이 사회에 긍정적인 영향을 줄 수 있음
          + 충분한 저축으로 새로운, 사회적 가치가 높은 일을 시작할 수 있음
          + 현재의 구직 시장에서는 저급 인력의 해고가 더 문제가 될 수 있음
     * 벤 콜린스-서스만의 후속 글 ""Surprised by the Response""
          + 그의 반응에 대한 글을 게시함
     * 벤 콜린스-서스만의 다양한 업적에 대한 인식
          + Subversion 작업과 엔지니어링 관리에 대한 글, 강연뿐만 아니라 뮤지컬 작곡도 함
     * 구글에서의 경험과 ""불편한 문화""와 ""황금 수갑"" 사이의 갈등
          + 오랜 기간 구글에서 일한 후, 이러한 갈등이 견디기 어려워짐을 표현함
     * ""불편한 문화""와 ""황금 수갑"" 사이의 갈등에 대한 공감
          + 이 갈등이 견디기 힘들다는 데 동의함
     * 해고 후의 재정적 안정감에 대한 냉소적 표현
          + 해고의 슬픔을 큰 돈을 세면서 달래라는 비꼬는 말로 표현함
"
"https://news.hada.io/topic?id=12902","Bluesky, RSS 피드 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Bluesky, RSS 피드 출시

     * Bluesky가 RSS 피드 기능을 출시하여 이제 누구나 Bluesky 사용자의 RSS 피드를 얻을 수 있게 됨
     * 사용자의 RSS 피드 링크는 길고 기억하기 어려우며, 링크만 보고는 어떤 사용자의 프로필인지 알 수 없음
     * 그러나 블루스카이는 각 사용자의 프로필 페이지에 RSS 피드가 내장되어 있어, RSS 리더 앱에서 자동으로 발견할 수 있음
     * RSS 리더 앱은 사용자의 프로필 링크를 검색 필드에 붙여넣기만 하면 자동으로 해당 사용자의 RSS 피드를 찾아줌
     * 일부 RSS 앱은 사용자 이름을 검색함으로써 RSS 피드를 얻을 수 있는 기능을 제공함
     * RSS 브라우저 확장 프로그램과도 잘 작동하여, 사용자의 Bluesky 프로필을 방문하면 자동으로 RSS 피드를 감지함

로그인이 필요 없는 게시물만 RSS 피드에 포함

     * Bluesky에서 만들어진 모든 게시물은 기본적으로 공개되며, 로그인하지 않은 사용자도 볼 수 있음.
     * 사용자는 자신의 게시물을 로그인한 사용자만 볼 수 있도록 설정할 수 있음.
     * 로그인한 사용자만 볼 수 있도록 설정된 게시물은 해당 사용자의 Bluesky RSS 피드에서 볼 수 없음.

RSS 피드에 링크가 포함되지 않음

     * 현재 Bluesky RSS 피드에는 피드 전문에 링크가 포함되어 있지 않음.
     * 링크를 클릭하려면 Bluesky 웹사이트의 게시물로 직접 이동해야 함.
     * 예를 들어, RSS 리더에서는 사용자의 Bluesky 게시물에 링크가 없는 반면, Bluesky 웹사이트에서는 클릭 가능한 파란색 링크가 표시됨.

시간이 지남에 따라 Bluesky RSS 피드 개선

     * Bluesky RSS 피드의 초기 버전은 매우 유망해 보이며, Bluesky 팀이 계속해서 개선하기를 바람.
     * Bluesky의 RSS 피드에 추가되길 원하는 기능이 있다면, GitHub Discussion 보드나 웹사이트에 나열된 소셜 미디어 프로필을 통해 피드백을 제출할 수 있음.
     * Open RSS는 워싱턴 D.C.에 본사를 둔 등록된 비영리 단체로, 사용자의 자발적인 기부금으로만 운영됨.
     * Open RSS를 사용하는 데 만족한다면, 서비스의 질과 신뢰성을 유지하고 성장하는 데 도움이 될 기부를 고려해볼 것을 요청함.

  GN⁺의 의견

     * Bluesky의 새로운 RSS 피드 출시는 사용자들이 좀 더 쉽게 정보를 구독하고 관리할 수 있게 해주는 혁신적인 발전임.
     * RSS 피드가 사용자 프로필에 내장되어 있어 자동 발견이 가능하다는 점은 사용자 경험을 크게 향상시키는 요소임.
     * Bluesky 팀이 피드백을 받아들여 RSS 피드 기능을 지속적으로 개선한다면, 이는 커뮤니티와의 긴밀한 상호작용을 촉진하고 사용자 기반을 확장하는 데 기여할 것임.
"
"https://news.hada.io/topic?id=12998","AI 비용을 매일 $100 에서 $1로 줄인 방법 : GPT4를 이용한 Mixtral 파인튜닝","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI 비용을 매일 $100 에서 $1로 줄인 방법 : GPT4를 이용한 Mixtral 파인튜닝

     * AI 기반 커리어 탐색앱을 만들었는데, 폭발적으로 성장하면서 GPT-4 비용이 일 $100 이상 나가기 시작
     * 레이턴시를 줄이고 품질을 유지하면서 AI 비용을 99%까지 낮추기 위해 사용한 방법
          + 가장 강력한 모델(GPT-4)를 이용하여 결과를 낸 뒤, 그 결과를 이용해서 더 작은 모델을 파인튜닝
          + AI 요청/응답을 쉽게 Export 가능하도록 저장하기. Helicone AI를 이용. OpenAI API 만 그대로 교체하면 테이블에 AI 요청을 저장해줌
          + 약 100~500 개쌍의 요청/응답 쌍을 저장하게 되면, Export 해서 좋은 품질로 데이터를 정제
          + 이 데이터 셋을 이용해서 Together/Anyscale 같은 호스팅 서비스를 이용해서 Mixtral 8x7B 를 파인튜닝
          + GPT-4를 새로 파인튜닝된 모델로 교체

   이럼 GPT-4의 약관이랑 Mixtral의 라이선스 둘 다 위반 했다는 건가요...? @_@

   그런거 같은데요. 이게 드러나보이는게 아니다 보니 많이들 그러는듯 합니다.

   알음알음 써오거나 아님 연구용으로 공개한 건 있었지만,
   이렇게 대놓고 우리가 썼습니다! 라고 홍보한 건 조금... 신기하긴 하네요.

   뭐라 안 할라나...?

Hacker News 의견

     * 대부분의 기술 회사들이 핵심 연구를 제외하고 최소 반년 동안 GPT-4 또는 3.5를 이용해 훈련 데이터를 생성하고, 이를 기반으로 QLoRA를 미세 조정하여 ""독자적인"" AI 모델로 출시하고 있음. 관리진은 큰 성과를 주장하며 자사가 ""특정 산업"" AI 분야의 선두주자라고 말함. 이 과정은 기계학습에 대한 지식이 거의 필요 없으며, 클라우드 컴퓨팅 비용이 $1,000 미만으로 가능함. 하지만 실제 작업에서는 GPT-3.5 수준의 결과물을 얻게 되며, 특히 클라우드 GPU를 사용할 경우 GPT-3.5와 비용 면에서 경쟁하기 어려움.
     * 이 사람의 앱 Wanderer를 확인해봤는데, 이용약관, 개인정보 처리방침, 명확한 가격 책정, AI에 대한 언급이 전혀 없어 매우 수상함. GPT-4를 사용하는 접근 방식은 모델이 GPT-4처럼 똑똑한 척하기에는 좋지만, 실제로 중요한 순간에는 열등한 모델임이 드러남.
     * Together.ai의 문서에 따르면 Mixtral은 미세 조정에 사용할 수 없으며, 미세 조정된 모델을 서버리스로 실행하지 않는 것으로 보임. 이는 이야기가 일관되지 않음을 시사함.
     * 윤리적 문제와 제한적인 조건을 떠나서, 게시자가 한 일에 GPT-4가 필요하지 않았을 수 있음. Mixtral이나 3.5를 사용해 처음 100개의 좋은 프롬프트-응답 쌍을 생성하고 게시자가 수동으로 조정한 것이 얼마나 더 나빴거나 어려웠을까?
     * AI를 이용해 대규모로 콘텐츠를 요약하는 부업 프로젝트 앱을 개발 중이며, 이것이 수익을 창출하는 SaaS가 되기를 희망함. 빠른 출시를 위해 당분간 OpenAI를 사용할 계획이지만, 나중에 자체 호스팅 LLM 옵션으로 이전하는 것이 경제적이고 기술적으로 가능할 것으로 예상함. 이와 관련해 경험이 있는 사람이 팁이나 트릭을 공유할 수 있음.
     * 이것이 OpenAI의 이용약관에 위배되지 않는지 의문.
     * 비용이 $1로 줄어든 방법을 설명해달라는 요청. GPT-4를 Mixtral 8x7b의 조정된 버전으로 대체했지만, 이는 여러 GPU가 필요함. 모델을 자체적으로 양자화했다 하더라도 하드웨어와 인프라 비용이 들며, 이는 $1 이상이 될 것임. 혹시 자체 호스팅을 하는 것인지?
     * 고전적인 지식 증류 방법론에 대한 언급. 여기서 미세 조정을 위해 8x7b가 필요하지 않을 것이라고 주장하며, 곧 phi-2 또는 phixtral 모델이 이러한 도메인에 충분히 강력해질 것임.
     * 어떠한 변경 없이도 openhermes 7b 채팅으로 훌륭한 결과를 얻었으며, 이는 GPT-4 사용 사례의 90%를 커버하고 빠르게 실행됨. 추천함.
"
"https://news.hada.io/topic?id=12887","마이크로소프트, Windows 10 업데이트 설치를 위한 명령 줄 조작 권장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               마이크로소프트, Windows 10 업데이트 설치를 위한 명령 줄 조작 권장

마이크로소프트, 결함 있는 Windows 10 업데이트 설치를 위한 명령줄 조작 제안

     * 마이크로소프트가 이번 주 KB5034441이라는 문제가 있는 패치를 배포함.
     * 이 패치는 BitLocker 암호화를 우회할 수 있는 취약점을 해결하기 위해 1월 9일에 Windows 10 21H2 및 22H2 버전을 대상으로 출시됨.
     * 일부 사용자는 업데이트 설치 중 0x80070643 오류, 즉 일반적인 실패 메시지를 마주하고 있음.

복구 파티션 크기 부족 문제

     * 마이크로소프트에 따르면, 실제 오류는 복구 파티션이 업데이트를 처리하기에 충분히 크지 않다는 것과 관련이 있을 수 있음.
     * 표준 Windows 10 설치를 가진 PC는 업데이트를 처리할 수 있는 충분한 크기의 복구 파티션을 가지고 있지 않을 가능성이 있음.
     * 마이크로소프트는 KB5028997에서 파티션 크기를 조정하는 방법에 대한 지침을 제공함.

복잡한 해결책

     * 사용자는 관리자 권한으로 명령 프롬프트 창을 열고 WinRE를 비활성화한 다음 복구 파티션을 삭제하고 다시 만드는 명령을 실행해야 함.
     * 이 과정은 위험하며, 주의하지 않으면 실수할 가능성이 많음.

사용자의 반응

     * 소셜 미디어를 통해 문제가 널리 퍼져 있으며, 사용자들은 마이크로소프트의 해결책을 적용하는 것을 꺼려함.
     * 일부는 해결책이 ""기술적이고 무서워"" 보인다고 말하며, 다른 이들은 ""마이크로소프트가 직접 수정해야 할 문제""라고 지적함.

GN⁺의 의견

     * 이번 마이크로소프트의 패치 문제는 소프트웨어 업데이트의 중요성과 품질 관리의 필요성을 강조함.
     * 사용자들이 기술적인 해결책을 직접 적용하는 것에 대한 두려움은 소프트웨어 회사가 더 사용자 친화적인 해결책을 제공해야 한다는 요구를 반영함.
     * 이 사건은 운영 체제 업데이트에 대한 신뢰성과 안정성을 확보하기 위한 지속적인 노력이 필요함을 보여줌.

        Hacker News 의견

     * 오류 코드 처리 루틴의 오류로 인해 사용자들이 업데이트 설치 중에 0x80070643이라는 일반적인 실패 메시지를 마주하고 있음. 마이크로소프트에 따르면, 이는 실제 오류가 아닐 수 있음.

     ""오류 코드 처리 루틴의 오류로 인해 잘못된 오류 코드가 제공됨.""
     * 명령줄 방법 대신 Windows 디스크 관리를 사용하여 드라이브 파티션을 축소하고 필요한 공간을 생성하는 방법을 이해했음. 이 과정에 대한 스크립트가 제공되지 않은 것은 복잡성과 잠재적인 문제점을 시사함.

     ""이 과정을 자동화하는 스크립트나 프로그램이 곧 출시될 것으로 예상함.""
     * BitLocker 암호화를 우회할 수 있는 취약점이 있었으며, 이는 Windows 복구 환경(WinRE)을 사용하여 시스템 드라이브의 내용을 덤프할 수 있게 함.

     ""복구 환경이 시스템 권한을 부여하는 것은 몇 년 동안의 사례임.""
     * 마이크로소프트가 진정한 QA 부서를 다시 설립해야 한다는 의견이 있음. 무급 ""인사이더""들에게만 의존하는 것은 문제가 있음.

     ""마이크로소프트가 QA 부서를 다시 운영해야 함.""
     * 업데이트로 인해 ReFS 배열이 손상되었을 때 해결책을 제공하지 않았던 과거와 비교하여, 이번에는 해결책을 제공하는 것에 대해 긍정적인 평가가 있음.

     ""업데이트로 인한 문제에 대한 해결책 제공에 대한 감사함.""
     * 복구 파티션이 없거나 충분히 크지 않아 문제가 발생하는 경우가 있음. 복구 파티션이 필요 없는 경우 삭제 후 업데이트가 불가능해짐.

     ""복구 파티션의 부재나 크기 부족이 문제가 됨.""
     * 즉시 모든 업데이트를 설치하지 않는 것에 대한 주장이 있음.

     ""업데이트를 즉시 설치하지 않는 것에 대한 주장.""
     * 리눅스를 사용해본 기자라면, 윈도우보다 더 나은 오류 메시지를 제공한다는 것을 알았을 것이라는 의견이 있음.

     ""리눅스가 더 나은 오류 메시지를 제공한다는 의견.""
     * 마이크로소프트가 테스터를 해고하고 테스트 하드웨어를 폐기한 이후 윈도우 업데이트의 질이 떨어졌다는 과거의 기사를 기억하는 사람이 있음. 클라우드에서 가상 테스트를 계속하고 있으며, 이는 비용 절감의 한 예라고 함.

     ""마이크로소프트의 테스트 절차와 관련된 비용 절감 문제.""
     * WinRE 환경과 Bitlocker 우회 취약점에 대한 문제는 적어도 지난해부터 알려져 있었으며, 2023년 1월 KB에서 문제를 해결했지만, WinRE 환경은 수동으로 업데이트해야 했음. 이 문제가 해결되지 않았다면, 다른 문제가 발생할 수 있음.

     ""WinRE 환경과 Bitlocker 우회 취약점에 대한 문제가 여전히 존재함.""
"
"https://news.hada.io/topic?id=12898","CSS로 더 나은 클릭 타겟 사이즈 디자인하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CSS로 더 나은 클릭 타겟 사이즈 디자인하기

     * 버튼/링크/카드를 더 클릭/터치/탭하기 쉽고, 잘못 누르지 않는 사이즈로 만들기
     * ""타겟 사이즈""를 부르는 명칭은 제각각 : 애플은 hit target, 구글 매터리얼은 Touch target, WAI는 target size, 구글 라이트하우스는 Tap Target, 디자인 커뮤니티에서는 Clickable Area
     * WCAG기준 타겟 사이즈는 적어도 44 x 44 CSS 픽셀이상이어야 함 (안드로이드는 48x48)
          + 그보다 작으면 터치 써클이 중첩되어 잘못된 클릭이 일어날수 있음
     * Google Design for Driving 에서는 최소 76dp x 76dp
     * 비쥬얼한 타겟 피드백을 주는게 좋음(엘리먼트에 테두리 혹은 배경 반전)
     * 24x24 보다 작은 타겟의 경우 충분한 거리를 두는게 필요함 (Line Height : 1.4, Padding: 1rem 등 )
     * ProgressBar도 Height를 키워서 충분한 터치공간을 주는게 좋음
     * 같은 액션을 주는 객체 사이에는 Dead Target Area제거하기
     * :before 와 :after 같은 Pseudo 엘리먼트를 이용하여 타켓 사이즈를 더 크게 만들기
     * label 에는 꼭 for 붙여서 타겟 사이즈 확장
     * 체크박스는 padding-block 을 이용하여 타겟 사이즈 크게 만들기
     * 버튼/텍스트 링크에도 padding
     * 리스트 아이템에는 padding 과 display:flex로 전체 아이템 크기로 확장
     * 타겟 사이즈 테스팅 방법 : DevTools 이용, CSS Outline 적용, Polypane 브라우저 사용

   대단한 내용이라서 작성자를 보니 Ahmad Shadeed 이군요. 이분이 쓴 글들을 보면 정말 감탄을 할 수 밖에 없더라고요.
"
"https://news.hada.io/topic?id=12991","사무실 정치는 선택이 아니다: 게임을 배우지 않으면 희생자가 될 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 사무실 정치는 선택이 아니다: 게임을 배우지 않으면 희생자가 될 것

     * 사무실(사내) 정치는 대부분의 사람들이 정치보다 더 싫어하는 것으로, 이는 경력을 쌓기 위한 교활한 전략으로 여겨짐.
     * 제프리 페퍼 교수의 책 ""The 7 Rules of Power""에 따르면
          + 나쁜 사람들이 권력을 추구하거나 그것을 악용하는 것을 보기 때문에 “사람들이 권력 추구를 포기하는 경우가 많다”고 경고
          + 그러나 그들은 이 결정의 희생자가 되어 게임 플레이의 이점을 놓치게 됨
          + 직장에서의 ""정치적 기술""은 직무 만족도, 업무 생산성, 경력 성공 및 개인 평판과 긍정적인 관련이 있으며 생리적 긴장과는 부정적인 관련이 있는 것으로 나타났음
          + 다시 말해, 경쟁에서 물러나면 인정받지 못하고 불행해지며 생산성과 건강이 모두 저하되는 것을 지켜보게 될 수 있음
     * 페퍼 교수는 평생동안 ""사무실 정치가 직장에서 성공하기 위한 핵심""이라고 주장했음
          + 그러나 흥미롭게도 ""위대한 업적의 빛은 어두운 곳에서도 빛날 것""이라고 위안적인 생각을 믿는 사람들에게 저항을 받음

사무실 정치를 마스터하는 방법

     * 자신과 성취를 최대한 눈에 띄게 하고, 자신감과 권위를 표출하며, 네트워킹을 중요시(인맥을 쌓고 또 쌓아 귀중한 통로이자 연락책이 되는 것)해야 함.
     * 그러나, 페퍼 교수의 첫 번째 조언은 ""사무실 정치가 중요하다는 사실을 받아들이고, 자기 승진 전략에 참여하는 사람들을 배우는 것""임
          + ""나만의 방식에서 벗어나야 함 ""
          + 자기 홍보 전략에 몰두하는 사람들을 비난하지 말고 그들로부터 배워야 함
     * 자신의 정체성이 ""정의로운 세상과 공로의 궁극적인 승리""에 대한 믿음에 달려 있다면, 직장 생활에서 원하는 것을 희생할 위험에 처하게 될 것

사무실 정치의 중요성

     * 중년층에게 페퍼 교수의 경고 :
          + ""경력이 발전할수록 권력을 행사하는 능력이 더욱 중요해짐""
          + ""특정 수준에서는 모든 사람이 똑똑하다""면 성과를 낼 수 있는 다른 방법이 필요
     * 자신과 타인의 의제 사이에서 협상하는 것은 성인 생활의 일부이며, 이제 전략적으로 행동하여 자신의 위치를 확보해야 할 때임

GN⁺의 의견:

     * 사무실 정치는 종종 부정적인 이미지를 가지고 있지만, 제프리 페퍼 교수의 연구와 조언은 이를 직장에서 성공하기 위한 필수적인 요소로 보고 있음이 중요함
     * 이 기사는 사무실 정치의 현실을 인정하고 이를 효과적으로 활용하는 방법을 배우는 것이 개인의 경력 발전에 도움이 될 수 있음을 강조함
     * 사무실 정치에 대한 이해와 참여는 직장 내에서의 만족도, 생산성, 개인의 명성을 높이고 스트레스를 줄이는 데 기여할 수 있음을 인식하는 것이 중요함

   정치를 외면하면 정치에 휩쓸릴 수 있음

   사무실은 애초에 정치를 하는 곳이 아닙니다 제발..

   정치가 싫다면 오히려 들이받음으로써 정치에 참여해야하더라고요. 그렇지 않으면 나의 상황은 더 악화될 뿐이었어요... 단순히 사탕발림 잘하는 정치도 있겠지만, 오히려 적극적으로 나서서 들이받을 때 일을 잘한다는 평가를 듣기도 했습니다.

   이말을 항상 하고 싶었는데
   사내 정치는 정말로 필수적인듯...

   피할 수 없다면 즐겨라

   정치는 결국 주어진 리소스를 어떻게 사용할지에 대해 비수학적으로 풀어나가는 행위이기 때문에…
   정치에 참여하지 않는다면 받을 몫이 줄어들거나 불필요하게 해야할 일이 늘어날 수 있죠. 스스로를 지키기 위해서라도 어느 정도는 발을 들여야 할 것 입니다.

   정치가 더러운 것은 아니고, 더러운 정치가 있을뿐..
     * 자신과 성취를 최대한 눈에 띄게 하고 <-> 자신의 성취를 거짓으로 만들어내고
     * 자신감과 권위를 표출하며 <-> 오만하고 권위만을 우선하며
     * 네트워킹을 중요시(인맥을 쌓고 또 쌓아 귀중한 통로이자 연락책이 되는 것) <-> 업무보다 친목만 중요시

   한끗차이라고 생각해요.

   반드시 필요하지만 그것이 우선시 되면 순간 더러워지는..?

   졍치가 더리운 것이 아니고 더러운 정치가 있을 뿐이다.
   ------> 오 명확한 말이네요..

   좋은 지적입니다.

        Hacker News 의견

     * ""Life/Work/Society/Groups""의 현실에 대한 적시적인 상기:
          + 정치는 더러운 학문으로 여겨지지만, 사실 사회적 동물, 특히 복잡한 사회 구조를 가진 인간에게 본질적임.
          + 모든 사람은 자신이 설정한 경계 내에서 ""게임을 하는 법""을 배워야 함.
          + 엔지니어, 관리자, 경영진 등의 역할에서 인간 본성이 작용하며, 이를 직면해야 함.
          + 다른 사람의 게임으로 인해 손해를 보지 않기 위해 최소한의 정치적 기술이 필요함.
          + 관련 자료로는 Jeffrey Pfeffer의 저작 외에도 조직 내 정치의 4가지 유형, 권력을 긍정적으로 사용하는 방법, 정치적 활동으로서의 경영, 효과적인 커뮤니케이션 및 자기 관리에 대한 HBR의 필독서 등이 있음.
     * 개발자의 사무실 정치에 대한 혐오와 ""7 Rules Of Power"" 책 리뷰:
          + 개발자는 사무실 정치를 싫어하지만, 성공적인 직장 생활에 관심이 있다면 피할 수 없음.
          + 책에서 제시하는 7가지 규칙은 자기 방해 행위 중단, 규칙 깨기, 강력한 모습 보이기, 강력한 브랜드 구축, 끊임없는 네트워킹, 권력 사용, 성공이 권력 획득 과정의 거의 모든 것을 정당화한다는 내용을 담고 있음.
          + ""자기 방해 행위 중단""은 자신의 가치를 적극적으로 드러내지 않으면 눈에 띄지 않을 것이라는 의미임.
     * 사무실 정치를 거부하는 것이 최선의 대처 방법이라는 경험담:
          + 은행에서의 근무 경험으로 인해 사무실 정치에 끌려들고 싶지 않다는 결론에 도달함.
          + 프리랜서로 전환하여 사무실 정치를 무시하고 가치 있는 일을 제공하는 한 청구서를 지불할 수 있음.
          + 결국 자신의 회사를 설립하여 오늘날까지 운영 중임.
     * 동료에게 훌륭하게 대하며 낮은 수준으로 내려가지 않겠다는 결심:
          + 사무실 정치에 끌려들지 않고, 동료들에게 친절하게 대하며 자신의 수준을 유지하겠다는 의지 표명.
     * FAANG 회사에서의 정치적 환경과 스타트업으로의 이직 결정:
          + FAANG 회사에서 겪은 정치적 환경이 극도로 과장되어 있었으며, 이는 개인적, 경력적 성장에 반하는 것이었음.
          + 스타트업에서는 정치 없이 오로지 일에 집중할 수 있는 환경이었음.
          + 원격 근무에서는 정치가 더욱 악화되며, 원격 근무자는 큰 불리함을 겪음.
     * 사무실 정치에 참여하지 않음으로써 겪은 아버지의 어려움:
          + 사회적 행사나 회의에 참여하지 않아 어려움을 겪었으며, 이는 자폐 스펙트럼의 가능성을 가진 아버지에 대한 상기로 볼 수 있음.
     * 사무실 정치에 참여하지 않고도 가족을 부양할 수 있는 위치에 대한 감사:
          + 사무실 정치에 참여하지 않고도 가족의 필요와 원하는 것들을 충족시킬 수 있는 위치에 있음을 감사하게 생각함.
     * 정치에 참여할 필요는 없지만, 정치가 자신에게 어떤 영향을 미치는지 이해해야 한다는 조언:
          + 사무실 정치에 참여하지 않아도 되지만, 정치적 상황을 이해하고 자신에게 미치는 영향을 파악해야 함.
     * 사무실 정치에 참여하는 것에 대한 혐오감과 참여하지 않겠다는 의지:
          + 사무실 정치에 참여하는 것이 싫으며, 그 일부가 되고 싶지 않다는 강한 의지 표현.
"
"https://news.hada.io/topic?id=12938","엘로의 큰 꿈의 조용한 종말","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            엘로의 큰 꿈의 조용한 종말

엘로의 조용한 죽음

     * 2014년 8월 7일에 출시된 엘로는 광고 중심의 소셜 네트워크에 대한 대안으로 자리매김하고자 했음.
     * 사용자 데이터를 판매하거나 광고를 보여주지 않겠다는 원칙을 내세웠으나, 2023년 6월 서버 오류로 인해 모든 회원 기여 내용이 접근 불가능해짐.

엘로의 자금 조달과 출시

     * 엘로는 예술가와 디자이너들이 만든 간단하고 아름다운 광고 없는 소셜 네트워크를 표방함.
     * 초창기에는 초대 전용 베타 버전으로 시작하였으며, 벤처 캐피탈로부터 자금을 조달받았음.

창업자들의 반응

     * 엘로의 CEO와 공동 창업자들은 자금 조달에 대한 우려를 일축하며, 엘로가 광고나 사용자 데이터 판매 없이 운영될 것이라고 주장함.

시리즈 A와 PBC

     * 엘로는 550만 달러의 시리즈 A 자금을 조달하고, 공익법인으로 전환하여 광고 없이 운영될 것을 법적으로 보장함.

시리즈 B와 CEO 변경

     * 2015년에 추가로 500만 달러를 조달하고, CEO가 변경되면서 엘로는 예술가와 창작자에게 초점을 맞추기 시작함.

인수

     * 2018년 3월, 엘로는 탤런트하우스에 의해 조용히 인수되었으며, 이후 탤런트하우스의 디자인 콘테스트를 홍보하기 시작함.

창업자들의 이탈

     * 2018년 9월, 엘로의 남은 공동 창업자들이 회사를 떠났으며, 이후 엘로의 운영은 더 이상 창업자들의 비전을 따르지 않았음.

당신은 제품이었다

     * 엘로는 창업자들의 이상과 공익법인으로서의 약속에도 불구하고 결국 광고를 판매하고 사용자 데이터를 제3자에게 판매함.
     * 엘로는 사용자에게 통지 없이 판매되었고, 최종적으로는 아무런 통지나 대응 기회 없이 서비스가 종료됨.

  GN⁺의 의견

     * 엘로의 실패는 벤처 자본의 압력과 성장 추구가 이상적인 가치와 충돌할 때 발생할 수 있는 문제를 보여줌.
     * 소셜 네트워크의 실험은 중요하지만, 지속 가능한 비즈니스 모델 없이는 장기적인 성공이 어려움을 입증함.
     * 엘로의 이야기는 창작자와 사용자 커뮤니티를 위한 온라인 플랫폼의 중요성과 함께, 그러한 플랫폼이 직면할 수 있는 도전을 이해하는 데 도움이 됨.

        Hacker News 의견

     * 우수하고 균형 잡힌 게시물
          + 벤처캐피탈(VC) 자금을 받고 새로운 가치를 가진 기술을 제공하는 실험이 마무리되어 가는 시점임.
          + 인터넷에서 수익을 창출할 수 있는 기술 비즈니스는 범위가 좁고 남아있는 문제를 대부분 해결하지 못함.
          + 구독 수익이 항상 탈출구임.
          + 독특한 가치를 가진 비즈니스를 구축할 수 있지만, MicroSaaS 세계에서는 경쟁이 치열함.
          + X.com은 대규모로 구독 수익 모델로 전환 가능성을 실험한 유일하고 마지막 사례로 보임.
          + 창업자가 이를 인지하고 받아들인다면 부정적인 전망이 긍정적으로 변할 수 있음.
          + VC나 부트스트랩(자체 자금) 경로를 통해 성공적인 비즈니스를 운영할 때 창업자가 벌 수 있는 돈과 시간은 대체로 같음.
          + 재정적 지원을 받는 대규모 사업 기회는 항상 존재함.
          + 창업자가 중요하게 생각하는 것이 있다면, 그 목표에 도달하는 경로는 창업자의 통제, 인내, 그리고 지불하는 고객 기반임.
     * Ello 초기 면접 경험
          + Ello의 초기 단계에서 면접을 본 경험을 공유함.
          + 면접 과정에서 코드 테스트가 포함되었으나, 능력을 제대로 평가하기에는 부족했음을 느낌.
          + Ello에 대한 아이디어는 좋았지만, 실행에 있어서 더 많은 것을 할 수 있었을 것임.
          + 결국 Ello를 떠남.
     * 창업자로서의 회복과 재도전
          + 창업 후 사업을 정리하고 다시 시작할 생각을 함.
          + 잠재적 공동 창업자와의 만남에서 VC 자금 조달과 부트스트랩 중 어느 경로를 선호하는지를 초기 질문으로 던짐.
          + 이 두 경로는 압박과 기대 수준이 다르기 때문에 사전에 알아야 함.
     * 개인적인 소셜 네트워크 프로젝트
          + 첫 아이가 태어났을 때 개인 블로깅 시스템을 오픈소스로 개발하기 시작함.
          + 완전히 분산된 소셜 네트워크로 발전시킴.
          + 소프트웨어를 무료로 제공하고 네트워크를 통제하지 않음으로써 사용자들의 신뢰 문제를 피함.
          + 부업으로 진행하는 프로젝트로, 자금을 모으지 않기 때문에 여전히 주 직업을 가지고 있음.
     * Bluesky의 공익 법인 형태와 자금 조달
          + Bluesky도 공익 법인으로서 800만 달러의 자금을 조달함을 언급함.
     * 커뮤니티 자금 조달 거부
          + 외부 자금을 거부하는 커뮤니티의 일원임.
          + 외부 영향을 피하기 위해 외부 자금을 받지 않음.
          + 외부인의 영향이 파괴적일 수 있기 때문에, 커뮤니티 구성원들만이 실제적인 이해관계를 가짐.
     * 투자자 자금과 사용자 비용
          + 투자자로부터 자금을 받으면 사용자가 비용을 지불해야 함.
          + 이익 상한선이 명확하지 않으면 결국 사용자 착취로 이어질 수 있음.
          + 기부/선택적 구독 모델을 통해 커뮤니티 전체에 적용되는 계층적 기능을 제안함.
          + 서비스의 생존은 충분한 사람들이 지원을 유지할 만큼 만족스러운 서비스를 제공하는 데 달려 있음.
     * 소셜 미디어의 이상과 현실
          + 독립적인 반사회적 소셜 미디어조차 자체 선언을 위반함.
          + 기업들이 자주 하는 밝은 미래에 대한 약속에 대한 회의감을 표현함.
          + 성공적인 결과를 보인 사례에 대한 증거가 있는지 궁금함을 나타냄.
     * 이상주의와 현실주의
          + 이상주의자가 되는 것은 좋지만, 무례한 태도는 바람직하지 않음.
          + 개인적인 통쾌함을 느낀 후 이 문장을 읽고 기사에 대한 인식이 바뀜.
     * 소셜 네트워킹의 비즈니스 모델 문제
          + 소셜 네트워킹이 나쁜 비즈니스 모델일 수 있음을 제안함.
          + 모두가 사용하고 싶어 하지만, 운영 비용이 많이 들고 아무도 지불하고 싶어 하지 않는 서비스임.
"
"https://news.hada.io/topic?id=12949","단일 계단 다가구 주택의 장점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            단일 계단 다가구 주택의 장점

단일 계단 다세대 주택의 사례

     * 단일 계단 다세대 주택의 합법화는 새로운 주택 건설을 더욱 촉진할 수 있는 변화임.
     * 유럽과 아시아의 동료들과 미국을 일치시키기 위해 단일 계단 다세대 건물을 합법화하는 것이 제안된 개혁 중 가장 중요함.

단일 계단 다세대 주택의 역사와 현재 규제

     * 1860년 맨해튼의 한 건물에서 발생한 화재는 단일 목재 계단으로 인해 확산되었으며, 이후 건물 소유주에 대한 재판에서 외부에 철제 계단을 설치하도록 하는 법안이 제안됨.
     * 미국의 국제 건축 코드는 현재 3층 이상의 새 아파트 건물에 대해 두 개의 계단을 요구하고 있으며, 이는 유럽과 아시아에서는 일반적으로 높은 건물에만 적용됨.

미국의 두 계단 요구 사항의 영향

     * 미국의 두 계단 요구 사항은 다세대 건물의 설계에 큰 영향을 미치며, 전통적인 아파트 건물 디자인을 효율적으로 재현하는 것을 거의 불가능하게 만듦.
     * 작은 부지에서는 두 번째 계단이 전체 바닥 면적의 상당 부분을 차지하며, 이로 인해 렌터블한 면적이 줄어듦.
     * 두 개의 계단을 연결하는 공통 복도는 구조물을 둘로 나누어 전통적인 미국 다세대 건축물에서 발견되는 통로형 아파트를 불가능하게 만듦.

건축 코드 개혁의 필요성

     * 건축 코드 개혁은 주택 개혁의 다음 전선으로, 더 현대적인 냉매 사용이나 더 효율적인 단일 스택 배기 시스템과 같은 다양한 개선 사항이 있음.
     * 계단에 대한 초점은 건축 디자인에 대한 중요성과 건축가들 사이에서 개혁에 대한 기존 운동 때문임.
     * 미국과 캐나다에서 더 합리적인 건축 코드를 옹호하기 위해 북미 건축 센터가 설립됨.

GN⁺의 의견

     * 단일 계단 다세대 주택의 합법화는 주택 부족 문제를 해결하고, 건축 비용을 절감하며, 다양한 크기의 주택을 제공할 수 있는 중요한 방법임.
     * 건축 코드 개혁은 기술 발전과 안전 이해의 증가를 반영하여 주택 건설의 비용과 효율성을 개선할 수 있는 기회를 제공함.
     * 북미 건축 센터와 같은 조직의 연구와 옹호 활동은 건축 분야에서 혁신을 촉진하고, 더 나은 주거 환경을 조성하는 데 기여할 수 있음.

        Hacker News 의견

     * 이 기사는 훌륭함
          + 주택 건설에 대한 과도한 규제로 인해 비용이 급등함
          + 최소 대지 크기, 후퇴 요건, 최소 평방 피트, 건폐율 제한, 과도한 높이 제한, 주차 요구 사항, 환경 검토 남용, 역사적 지정, 커뮤니티 검토, 과도한 MFH 요구 사항, 시장 이하 요구 사항 등이 공급을 제한하여 비용을 치솟게 함
          + 이 문제는 가장 중요한 경제적 이슈로, 이러한 제한을 완화하기 위한 전국적 노력이 필요함
     * 북미 도시들에서 중간 밀도 주택의 부족한 주된 이유 중 하나로 추측됨
          + 경제적으로 타당하지 않기 때문에 소규모에서 중간 규모의 다가구 건물을 건설할 수 없음
          + 다른 나라에서는 단순하고 저렴한 4층 건물이 중간 밀도 주택의 주류임
          + 더 높은 밀도를 위한 더 높은 건물도 있지만 여전히 효율적임
     * 개인 경험을 통해 이러한 유형의 주택을 지지함
          + 덴버에서 자라고 프랑스에서 '단일 계단 다가구'에 살고 있음
          + 이 주택 유형은 매우 좋은 거주 형태로, 여름에는 훌륭한 바람을 느낄 수 있고, 콘크리트 구조는 온도를 잘 조절함
          + 정원 관리나 눈 치우기 같은 일이 없어 편리함
          + 이웃과의 친밀감도 단독 주택과 비슷함
          + 아들과 함께 공원에서 안전하게 놀 수 있지만, 뒷마당 바비큐나 작업장으로 쓸 차고가 그립기도 함
          + 반면, '5-over-1' 아파트는 최악의 주거 유형이었음
     * 안전 영향에 대한 더 많은 논의가 필요함
          + 기사는 유럽에서 화재 사망률이 낮다고 언급하지만, 미국의 주택 재고가 목재로 되어 있어 화재 위험이 더 높다는 점도 지적함
          + 지속 가능성 측면에서 목재 건축은 일반적으로 좋은 것임
     * 브리티시 컬럼비아(BC)가 이 문제를 고려 중임
          + 북미에서 가장 긴 공중 사다리 소방차는 약 14층 높이에 도달할 수 있음
          + 관련 비디오와 1913년 미국 주택 협회 회의록에서의 관련 내용도 언급됨
     * 규제가 추가됨에 따라 이전의 비용이 많이 드는 안전 조치가 더 이상 필요하지 않게 되었는지 재평가하는 과정이 없었음
          + BC 정부가 이 문제를 조사 중이며, 더 많은 2~3 베드룸 아파트를 원하는 사람들을 위해 단일 계단 건물이 좋은 해결책이 될 수 있음
     * 규제의 가장 큰 문제 중 하나는 시행될 때는 긍정적일 수 있지만, 수십 년 동안 재평가할 메커니즘이 없다는 것임
          + 따라서 오래전 화재가 오늘날 미국 전역의 주택 문제를 야기함
     * 저자는 두 번째 계단을 제거하는 것의 안전 영향을 분석하지 않음
          + 제공된 증거는 서유럽에서 화재 사망률이 미국보다 낮다는 것뿐임
          + 화재 사망이 어디에서 발생하는지에 대한 분석이 없으며, 미국이 화재 안전 기준을 높여야 할 수도 있음을 시사함
"
"https://news.hada.io/topic?id=12919","Stability AI, 코딩용 LLM 모델 Stable Code 3B 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Stability AI, 코딩용 LLM 모델 Stable Code 3B 공개

     * CodeLLaMA 7b 보다 60% 작지만, 코드 생성시 비슷한 성능을 내는 3B 파라미터 사이즈의 LLM
     * GPU가 없이도 일반적인 랩탑에서 오프라인 동작 가능(맥북 에어 같은)
     * 4조개의 자연어 데이터로 학습한 Stable LM 3B 모델에 기반하여 소프트웨어 엔지니어링/코드에 관한 데이터로 더 훈련 시킴
          + 2023 StackOverflow 개발자 설문조사를 참고해서 18개 프로그래밍 언어를 선택

   금융권이라 내부망에서만 개발합니다. 이런 경우는 어떻게 접근하면 좋을까요?
   집에서 Copilot 같은거 써보면 회사에서도 좀 이용했으면 좋겠어서 질문 드려요
     * application 개발을 해서 AI는 잘 모릅니다. 힌트주시면 열심히 찾아볼께요

   https://github.com/janhq/jan
   오프라인에서 모델을 쓸 수 있게 해주는 GUI 앱입니다. 내부망이시면 이 앱의 설치파일이랑 사용할 모델 파일만 외부에서 미리 받아두고 내부망으로 옮겨서 쓰시면 될 것 같아요.
   모델을 수동으로 추가하는 방법은 아래에 나와있습니다.
   https://jan.ai/guides/using-models/import-manually/

   망분리된 환경에서는 솔직히 말해서 개발자에게 족쇄를 채우는 것과 다름 없지요

   요즘 망분리 정책 완화 관련된 얘기도 나오고 좀 개선되려는 노력도 보이고 있으니, 희망을 가져볼수도 있겠지만, 은행, 텔레콤 등등 개인정보 다루는 곳은 앞으로도 아마 좀 어려울거 같습니다. 개발자들에게는 너무나 감옥같은 환경이죠.

   비슷하게 작은 Model 사이즈를 가진 애들하고만 성능 비교를 했는데, 좀 더 넓힌 Leaderboard를 보면 이렇네요.
   https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard

   코드니까 더더욱 좀 느리거나 비싸도 성능 더 좋은게 좋지 않을까? 하는 생각이 들긴하네요.
"
"https://news.hada.io/topic?id=12995","GPT-3.5, useRalativeImagePath를 지나치게 고민하다 충돌","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GPT-3.5, useRalativeImagePath를 지나치게 고민하다 충돌

ChatGPT 3.5 오류 메시지의 원인

     * OpenAI의 GPT 모델은 문자 대신 다중 문자 ""토큰""을 출력함.
     * 이러한 토큰 출력 방식은 모델의 성능과 정확도를 향상시킴.
     * richTextPanel, 소스, 로드패스라는 세 가지 토큰이 있으며, 이들은 상호 교체 가능함.
     * 로드패스 토큰은 GitHub에서 80.4k개의 파일에 XML 구성 파일의 옵션 이름으로 사용됨.
     * 로드패스가 독립적인 토큰을 가지게 된 것은 ""R a lative""의 오타 때문일 가능성이 있음.
     * OpenAI는 토큰 목록을 생성한 후 XML 파일을 훈련 데이터에서 제외하기로 결정했을 수 있으며, 이로 인해 로드패스 토큰의 훈련 데이터 사용이 거의 없었을 것임.
     * 결과적으로 모델은 useRalativeImagePath 토큰의 사용을 이해하도록 훈련되지 않았고, 유효하지 않은 토큰을 출력함.

데이터 오염을 위한 사용?

     * GPT-3.5를 사용하여 문서를 요약하려는 시도를 방해하기 위해 이 구문을 문서에 넣어볼 수 있음.

추가 읽을 거리

     * 이 주제에 대한 연구에 유용한 게시물들이 있음.

  GN⁺의 의견

     * 이 글에서 가장 중요한 것은 GPT 모델이 특정 토큰에 대해 오류를 출력하는 원인을 이해하는 것임.
     * 이러한 정보는 인공지능 모델의 작동 방식과 한계를 이해하는 데 도움이 됨.
     * 또한, 이 글은 데이터 오염이나 인공지능 모델의 취약점을 이용하는 방법에 대한 흥미로운 사례를 제공함.

        Hacker News 의견

     * 글리치 토큰에 대한 설명
          + 원본 데이터셋에서 흔하게 등장했으나 GPT-XX 훈련 전 제거된 단어나 토큰으로 인해 발생하는 것으로 추측됨.
          + 이로 인해 LLM은 해당 토큰의 의미를 전혀 모르게 되며, 결과는 버그가 발생하거나 불쾌할 수 있음.
          + r/counting 서브레딧에서 자주 등장하는 사용자 이름이 대표적인 예시.
          + OpenAI는 호스팅된 모델들의 대부분을 수정했으나(토큰화 방식 변경 추정), 새로운 글리치 토큰이 발견된 것으로 보임.
     * 네덜란드에서의 WWII 중 언어 검증 방법
          + 네덜란드에서는 'Scheveningen'이라는 단어 발음으로 독일인인지 아닌지를 구분했음.
          + 현재는 인터넷에서 글리치 토큰을 말하게 함으로써 LLM 봇인지 아닌지를 판별할 수 있음.
     * LLM 토큰 생성 과정에 대한 설명
          + 모델이 'useRalativeImagePath' 토큰을 이해하지 못해 유효하지 않은 토큰을 출력하는 것은 LLM이 토큰을 생성하는 방식이 아님.
          + 각 단계에서 가능한 모든 토큰에 대해 로짓을 출력하고, 소프트맥스 함수를 사용해 확률로 변환한 후 샘플링하여 사용할 토큰을 결정함.
          + 드문 토큰으로 인해 토크나이저 BPE 병합 과정에서 문제가 발생할 수 있으나, GPT-4에서는 문제가 없고 GPT-3.5와 동일한 토크나이저를 사용하므로 이것이 문제가 아닐 가능성이 높음.
     * 글리치 토큰의 잠재적 원인 분석
          + 특정 토큰에 대한 잘못 조건화된 임베딩 벡터로 인해 네트워크가 수치적으로 불안정한 영역으로 이동할 수 있음.
          + 언더플로우나 NaN이 발생하면 전체 출력을 무효화할 수 있으며, 배치 내 다른 항목 간에 값을 혼합하는 배치노말라이제이션 등의 연산이 있을 경우 다른 사용자의 세션에도 잘못된 값이 반환될 수 있음.
     * 모델 출력에 대한 다른 관점
          + 모델은 입력 어휘와 동일한 어휘 세트를 출력하는 것이 일반적임.
          + 모델이 'useRalativeImagePath' 토큰을 보고 무작위 생성으로 이어지는 나선을 시작하거나, 일관된 텍스트를 유지하려고 시도할 수 있음.
          + 출력할 수 있는 토큰 세트는 고정되어 있으므로, 인터페이스에서 표시 가능한 토큰이 전체 어휘의 부분집합이 아니라면 항상 '유효'해야 함.
     * LLM 훈련 데이터에 대한 미래의 영향
          + 해커뉴스 게시글과 댓글에 이 문구가 등장함으로써 다음 LLM 훈련에서는 이러한 문제가 더 이상 발생하지 않을 수 있음.
     * GPT-4에서의 실패 경험 공유
          + Amstrad CPC에서 픽셀을 플로팅하는 도전을 통해 GPT-4의 ChatGPT를 실패하게 만든 경험.
          + 불만과 정정에 더욱 궁지에 몰리면서 더 많은 오류 메시지나 리셋 같은 현상이 발생함.
          + 서버에 문제를 일으키고 싶지 않아 대화를 포기했으나, GPT-4를 실제로 충돌시킬 수 있음을 보여줌.
     * 입력 데이터의 질에 대한 고찰
          + '쓰레기 입력, 쓰레기 출력'의 고전적인 예시.
          + 미래에 현재 우리가 훌륭한 결정이라고 생각하는 것들이 '쓰레기'로 평가될 가능성에 대한 생각.
          + 인간의 기록만으로 훈련된다면, 슈퍼 AI가 진정으로 초인간적일 수 있을지에 대한 의문.
          + 적대적 학습 기법이 이 문제를 해결할 수 있을지에 대한 제안.
     * GPT-3.5 요약 방해를 위한 문구 사용 제안
          + GPT-3.5를 사용한 문서 요약 시도를 방해하기 위해 특정 문구를 문서에 포함시키는 것을 시도할 수 있음.
     * 'RTCatch'와 'redirectToRoute' 단어에 대한 혼란
          + 'RTCatch'와 'redirectToRoute'가 동일한 단어로 오해될 수 있는 상황에 대한 질문.
          + 두 용어가 동일한 용어를 참조하는 것으로 보이며, 오타나 일관성 없는 표현이 있었을 수 있음.
          + 'RTCatch'에 대한 호기심과 이에 대한 추가 정보 요청.
"
"https://news.hada.io/topic?id=12977","빈트 서프가 모으고 있는 데이브 밀스 이야기들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       빈트 서프가 모으고 있는 데이브 밀스 이야기들

        Hacker News 의견

     * 최근 관련 뉴스:
          + Dave Mills가 사망했다는 소식 - 2024년 1월, 63개의 댓글이 달린 관련 기사 링크 제공.
          + Poul-Henning Kamp가 덴마크어로 쓴 개인적인 추모글 ""RIP: Dave Mills"" 링크와, Google 번역을 통해 영어로 읽을 수 있는 링크 제공.
     * Dave Mills에 대한 인용문 요약:
          + Dave Mills는 생전에 많은 업적을 이루었음. 그의 경력은 ""Bandits of the Beltway""로 시작되었고, Minuteman-1 미사일의 유도 컴퓨터 개발과 같이 아직도 공개할 수 없는 일들이 있었음.
          + Vint Cerf가 인터넷의 '아버지'라면, Dave Mills는 '할아버지'였음을 강조.
          + 그는 지구 반대편에서 홀로 아이 둘을 키우며 정신적으로 안정을 유지하는 데 도움을 준 것도 기억해야 함.
          + 그의 기억에 영광이 있기를.
     * Fuzzballs에 대한 이야기:
          + Fuzzballs에 대한 배경 정보 링크 제공. Fuzzballs는 인터넷이 주로 대형 메인프레임과 미니컴퓨터로 구성되었을 때, 워크스테이션급 기계를 인터넷에 연결하기 위한 최소 설치를 의미함.
          + 개발은 더 많은 기능을 추가하려는 지속적인 변화 속에서 이루어졌음.
          + 인터넷 시대의 공룡들 사이에서 Fuzzballs를 작은 포유류로 상상할 수 있음.
     * Fuzzballs 아이디어에 대한 반응:
          + Fuzzballs 아이디어가 매우 흥미롭다는 의견.
"
"https://news.hada.io/topic?id=13011","보잉 내부고발자: "MAX 9 생산 라인에 심각한 결함이 대량으로 존재"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                보잉 내부고발자: ""MAX 9 생산 라인에 심각한 결함이 대량으로 존재""

보잉 내부고발자: 생산 라인에 ""엄청난 양의 결함"" 존재

     * 보잉 737 MAX 9의 볼트가 설치되지 않았다는 내용을 공개한 내부고발자의 주장이 제기됨.
     * 알래스카 항공이 운항하는 보잉 737 MAX 9에서 비행 중 문 플러그가 탈착되어 급격한 기압 감소가 발생했는데, 이는 외주로 제작된 항공기 부품에 문제가 많아 보잉의 품질 관리 인력이 모든 문제를 따라잡지 못하기 때문이라는 것이 주요 내용임.
     * 해당 항공기의 문 플러그가 탈착된 이유는 보잉 자체 기록에 명시되어 있으며, 문 플러그를 고정하는 4개의 볼트가 설치되지 않은 채로 항공기가 인도되었다고 함.

보잉의 품질 관리 문제

     * 보잉 직원이라고 주장하는 한 사람이 내부 품질 관리 시스템에 대한 접근을 통해 보잉 737 중간 동체 문 설치에 대한 392건의 부적합 사례를 발견했다고 밝힘.
     * 이러한 높은 결함 수치는 보잉의 품질 시스템이 건강하다면 생산 라인을 중단시키고 공급업체에 문제를 되돌려야 했을 것임.
     * 사고 항공기의 경우, 결함이 발견되었지만 다른 문제들로 인해 결국 놓치게 되었으며, 이로 인해 중요한 결함이 발생했다고 함.

생산 과정의 심각한 실패

     * 보잉의 주요 공급업체 중 하나인 Spirit AeroSystems의 품질이 떨어지는 부품으로 인해 문제가 발생하고 있음.
     * Spirit의 팀이 보잉 공장 내에서 보증 수리를 수행하고 있으나, 실제로는 결함을 제대로 처리하지 않고 단순히 페인트로 덮어버린 사례가 있음.
     * 문을 제거하거나 열어야 하는 경우, 문을 고정하는 볼트를 제거해야 하지만, 공식 기록에는 문이 열리지 않았으므로 품질 검사가 필요하지 않다고 잘못 기록됨.

보잉의 외주화 전략

     * 보잉은 항공기 부품 생산을 외주화하는 전략을 채택하고 있으며, 이는 비용 절감을 위한 것임.
     * 이러한 전략은 해리 스톤사이퍼 전 CEO의 영향으로, 그는 보잉을 위대한 엔지니어링 회사가 아닌 사업체처럼 운영하려는 의도를 가지고 있었음.

GN⁺의 의견

     * 이 기사는 보잉 내부에서 발생한 품질 관리 문제와 생산 과정의 심각한 실패를 드러내는 중요한 내용을 담고 있음.
     * 보잉의 외주화 전략이 비용 절감을 가져올 수는 있지만, 품질 저하와 안전 문제를 야기할 수 있다는 점에서 중요한 시사점을 제공함.
     * 항공기 제조 과정에서의 품질 관리는 항공 안전에 직결되는 문제이므로, 이러한 고발은 항공 산업 전반에 대한 신뢰성과 안전 기준에 대한 재검토를 촉구하는 계기가 될 수 있음.

        Hacker News 의견

     * 익명의 보잉 엔지니어에 대한 언급
          + 보잉의 위기 회의에서 PR과 MBA들이 무엇을 해야 할지는 논하지만, 실제로 무엇이 변해야 하는지, 특히 엔지니어링과 QA가 모든 결정에 대해 거부권을 가져야 한다는 점에 대해서는 언급하지 않음.
     * 기사의 출처에 대한 의문 제기
          + 해당 기사는 다른 기사 아래에 달린 익명의 댓글에 전적으로 기반을 두고 있으며, 비슷한 주장을 하는 다른 신뢰할 수 있는 출처에 대한 링크는 제공되지 않음.
     * 보잉 내부 고발자에 대한 의심
          + 보잉의 시스템적 결함에 대한 조사를 원하지만, 인터넷 블로그 기사에 달린 익명의 댓글이 고발자로 간주되기에는 부족함.
     * 보잉의 품질 관리 문제 지적
          + 보잉 QA가 실제로는 개선되지 않은 결함을 단순히 덮어 칠한 것을 발견하고, 이를 '공정 실패'로 기록함. 항공 정비사에게는 이러한 행위가 '연방 범죄'에 해당함.
     * 항공 산업 전반의 문제 제기
          + 보잉에서 발생한 문제가 다른 항공 회사에서도 일어날 수 있는지, 엔지니어링 산업이 최대 이익 추출을 위해 내부가 비워지는 시스템적 경향의 일부인지 의문을 제기함.
     * 엔지니어링 산업의 문제에 대한 비판
          + 상업적으로 판매되는 토스터가 모두 중국에서 제조되는 현실을 지적하며, 엔지니어들이 이러한 산업 공동화에 조용히 동참하는 대신 엔지니어 혁명이 필요함을 주장함.
     * 보잉의 품질 시스템 문제
          + 익명의 인용문에 따르면, 보잉이 737 중간 동체 문 설치에서 392건의 비규격 발견을 기록한 것은 품질 시스템이 건강하지 않음을 의미할 수 있으며, 품질 관리만으로 생산 품질을 달성할 수 있다는 잘못된 생각을 반영함.
     * FAA의 새로운 항공 안전 지침에 대한 비판
          + FAA가 발행한 새로운 항공 안전 지침(AD)이 MAX 9 항공기의 서비스 복귀를 허용하는 것과 NASA가 챌린저와 컬럼비아 사고 후 문화와 운영 원칙에 대해 전면적인 검토를 한 것을 비교하며, 보잉의 대응을 비판함.
     * MBA의 역할에 대한 비판
          + MBA들이 회계 이상의 역할을 수행하는 것이 자연스러운 것처럼 제시되는 현실에 대해 의문을 제기하며, 의학, 엔지니어링, 건축 등 여러 분야가 경제학에 종속되는 것에 대한 비판을 표함.
     * 항공 산업에 대한 우려
          + 항공 산업이 곧 '열린 문'이 될 수 있다는 우려를 표하는 가족 구성원들을 알고 있어 우울함을 표현함.
     * 737 Max의 설계에 대한 의문
          + 737 Max의 설계에 대한 의문을 제기하는 동영상 링크를 공유함.
"
