"https://news.hada.io/topic?id=14738","CTO에게 거짓말을 하고 위기를 모면한 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CTO에게 거짓말을 하고 위기를 모면한 사건

개발자가 CTO에게 거짓말한 사연

     * 몇 년 전, 포춘 500대 기업에서 일했던 시절의 이야기임
     * 당시 CTO는 개인적 인맥이 있는 중요 고객을 위해 큰 프로젝트를 수주했고, 핵심 부분을 대형 기술 서비스 업체에 아웃소싱하기로 결정함
     * 하지만 벤더의 ""제품""은 실제로는 요구사항에 맞추려면 대대적인 커스터마이징이 필요했고, 이는 가장 안 좋은 선택이었음
     * CTO와의 상태 확인 회의에서는 아무도 이 아이디어가 좋다고 생각하지 않았지만, 모두 ""좋은 생각이에요 보스""라고만 했음
     * 결국 벤더가 ""제품""을 납품했을 때는 이미 9월이었고, 10월 출시를 위한 데드마치가 시작되었음
     * 테스트 중 성능 문제와 MongoDB 16MB 문서 제한에 걸리는 등 심각한 버그가 발견되었음
     * 고객에게는 1달 지연되어 출시한다고 하면서, 동시에 벤더 통합을 대체할 비밀 프로젝트를 시작하기로 함
     * 젊고 열정적인 개발자였던 나는 팀원 3명을 배정해 대체 시스템 개발을 시작함
     * 12월 중순, 지난 한 달간 대체 소프트웨어를 거의 완성했지만 모두 번아웃 상태였음
     * 그때 CTO가 와서 휴가를 취소한다고 했고, 나는 ""알겠습니다""라고 대답함
     * 하지만 아버지의 조언을 떠올리며 팀원들에게 휴가를 가라고 한 뒤, 혼자서 CTO와의 데드마치 상태 확인 회의에 참석해 거짓말을 했음
          + ""팀이 열심히 일하고 있어요. 오늘 73번째 마일스톤 통합 지점에 도달했죠""
          + ""팀이 어제 좋은 진전을 이뤘어요. 또 다른 웹 서비스를 끝냈거든요""
     * 일주일 후 휴식을 취한 팀원들이 돌아왔고, 1월에 기한을 맞춰 성공적으로 출시할 수 있었음

GN⁺의 의견

     * 열악한 환경과 무리한 요구 속에서도 프로젝트를 성공적으로 이끈 리더십이 돋보이는 사례임. 특히 팀원들의 컨디션 관리에 신경 쓴 점이 인상적임
     * 다만 CTO에게 거짓말한 것은 바람직하지 않음. 장기적으로는 조직 내 신뢰를 잃고 더 큰 문제를 야기할 수 있음
     * 벤더 선정과 아웃소싱 관리에 실패한 것은 CTO의 책임이 크지만, 이를 바로잡는 과정에서 보다 투명하고 적극적인 커뮤니케이션이 필요했을 것 같음
     * 개발자들의 번아웃을 막기 위해 애초에 더 현실적인 일정을 세우고, 충분한 인력을 투입했어야 함. 크런치 모드는 지양해야 할 관행임
     * 유사한 문제 상황에 처했을 때 참고할 만한 대안으로는 애자일 방법론이 있음. 짧은 주기로 개발하고 피드백 받는 과정을 반복함으로써 위험을 최소화하고 팀원들의 업무 강도를 조절할 수 있음

        Hacker News 의견

     * 과로와 휴가 취소:
          + 비현실적인 기한을 맞추기 위해 과로하고 휴가를 취소하는 것은 현명하지 않으며 나중에 후회하게 됨
          + 직원들이 휴가를 희생하여 제품을 제공하는 데 의존하는 회사는 문제가 있는 직장 문화에 기여하고 있음
     * 건강한 회사 vs 건강하지 않은 회사:
          + 건강한 회사에서는 경험 많은 사람들이 아웃소싱 접근 방식의 문제점을 예측하고 일찍 우려를 제기했을 것임
          + 개방적 의사소통, 해결책을 찾기 위해 함께 노력하는 것, 팀의 복지를 위해 관리자가 옹호하는 것은 건강한 환경의 징후임
          + 이야기는 관리자가 반복적으로 상급자에게 거짓말을 하는 건강하지 않은 상황을 묘사하고 있음
     * 황당한 벤더 관행:
          + 거대한 JSON 문서에 모든 트랜잭션을 저장하고 각 업데이트마다 전체를 읽어야 하는 벤더의 접근 방식은 어처구니없는 것임
          + 또 다른 예는 사용자 테이블에 추가 열로 사용자 티켓 데이터를 저장하여 수백 개의 열이 생기는 스타트업임
     * 역기능적인 상황과 리더십:
          + 팀 리더가 휴가에 대해 거짓말하는 접근 방식은 용납할 수 없으며 해고될 수 있는 위반 행위임
          + 더 나은 접근 방식은 불합리한 초과 근무 요구에 반대하고 건전한 프로젝트 범위와 벤더의 책임을 주장하는 것임
          + 팀 리더는 자신의 직업을 위험에 빠뜨리더라도 팀을 미친 요구로부터 보호할 책임이 있음
     * 아무도 혜택을 보지 못함:
          + 벤더는 낮은 품질을 제공했고, CTO는 무지했으며, 개발자들은 과로했고, 주인공은 거짓말에 의지했음
          + 이는 아무도 용인해서는 안 되는 미친 상황임. 더 나은 직장으로 떠나는 것이 바람직함
     * 정직과 투명성:
          + 기술적 문제, 성능 문제, 범위 변경 등에 대해 경영진에게 정직하게 말하는 것이 일부 사람들에게 잘 작동했음
          + 동떨어진 리더십이 설정한 임의의 기한을 맞추기 위해 거짓말하는 것은 좋은 접근 방식이 아님
     * 개발자-경영진 간 신뢰 격차:
          + 개발자와 비기술 경영진 사이에는 종종 정보 불균형과 신뢰 부족이 있음
          + 관리자는 진행 상황을 쉽게 평가할 수 없고 프로젝트 성공에 대해 불확실함을 느낌
          + 위험이 비즈니스 측면에 있기 때문에 개발자는 이 신뢰 격차를 메우기 위해 밀어붙이고 결과물을 제공해야 함
     * 과소 약속하고 초과 달성하기:
          + 주인공이 이미 완료된 작업을 완료했다고 거짓말하는 것은 어느 정도 ""과소 약속하고 초과 달성하기""로 볼 수 있음
          + 미완성 작업에 대해 거짓말하는 것은 더 위험하고 팀원들이 다시 돌아오는 것에 대해 사기를 떨어뜨릴 수 있음
     * 무력한 조직과 로우코드 도구:
          + 벤더의 형편없는 관행과 겸손한 프로젝트 범위는 일부 대기업이 소프트웨어 프로젝트에 대해 얼마나 무력감을 느끼는지 보여줌
          + 이는 엔지니어는 아니더라도 기술 리더십에게 Retool과 같은 로우코드 도구의 인기를 설명할 수 있음
     * 정직성과 거절하기:
          + 진정한 ""록스타""는 정직성을 갖추고 어리석음과 불합리한 요구를 거절할 용기가 있음
          + 비상한 무능력을 보완하거나 팀 전체의 부담을 떠안는 것은 개인의 책임이 아님
"
"https://news.hada.io/topic?id=14633","처음부터 제작한 로켓 엔진 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           처음부터 제작한 로켓 엔진 개발

     * 저자인 Ryan Kuhn은 ABL의 엔진 프로그램을 처음부터 시작했음. 처음에는 엔진 개발 경험이 없었지만, 호기심과 직관, 문제 해결 능력을 바탕으로 도전했음.

E2 엔진 설계

     * E2 엔진은 가스 발생기 사이클을 사용하며, 터보펌프, 연소실, 인젝터, 가스 발생기로 구성됨.
     * 터보펌프는 50,000 RPM으로 회전하며 매초 수 갤런의 추진제를 2000 psi로 가압함.
     * 인젝터는 pintle 방식을 채택해 제조 과정을 단순화함.
     * 연소실은 Inconel 재질로 3D 프린팅하고, 냉각 채널 설계를 최적화함.

하드웨어 제작

     * 부품 제작 업체와 협력하여 초기 엔진 부품을 제작했으나, 비용과 리드타임 문제로 자체 생산 역량을 확보함.
     * 5축 밀링 머신과 선반을 도입하고 기술자를 고용해 임펠러와 터빈을 내부에서 생산함.
     * 설계 개선과 제조 기술 향상으로 임펠러와 터빈 제작 시간을 단축하고 비용을 크게 절감함.

팀 구성

     * 엔진 설계와 제작에 몰두하는 엔지니어, 현장 테스트를 즐기는 엔지니어가 효과적임.
     * 경험에 지나치게 의존하지 않고 First Principle에 입각해 사고하는 엔지니어가 성공적임.
     * 자신의 분야뿐 아니라 로켓 전체를 이해하려는 엔지니어가 뛰어남.
     * 문제 해결 능력과 기계/유체역학적 직관이 가장 중요한 자질임.

테스트와 반복

     * 2019년 여름 첫 E2 엔진 테스트를 진행하며 다양한 문제를 경험하고 해결책을 모색함.
     * 2020년 AFRL에서 터보펌프 테스트 진행, 안정적인 작동 달성.
     * 2021년 모하비에 새로운 테스트 사이트를 건설, 비행용 엔진 테스트 시작.
     * 다양한 시행착오를 겪으며 엔진과 엔지니어, 회사 모두 강해짐.
     * 테스트를 지속하며 문제를 발견하고 해결하는 것이 중요함.

GN⁺의 의견

     * ABL의 엔진 개발 사례는 에어로스페이스 스타트업이 참고할만한 훌륭한 선례가 될 것임. 소규모 팀이 짧은 기간에 독자 엔진을 개발한 것은 놀라운 성과임.
     * 단순하고 관리하기 쉬운 엔진 설계, 수직계열화를 통한 신속한 제작, 현장 중심의 엔지니어링 문화 등이 성공 요인으로 보임.
     * 다만 실제 비행을 통한 엔진 검증이 더 필요할 것임. 지상 연소 시험만으로는 실제 비행 조건에서의 성능과 신뢰도를 완벽히 담보하긴 어려움.
     * 기존 로켓 엔진 제조사들의 노하우와 기술력을 따라잡기 위해서는 더 많은 시간과 경험이 필요할 것임. 특히 재사용 엔진 개발이 향후 도전 과제가 될 것으로 예상됨.
     * 그럼에도 ABL의 사례는 기존의 관행을 깨고 혁신적인 방식으로 로켓 엔진을 개발할 수 있음을 보여주는 훌륭한 사례라고 생각함. 다른 스타트업들에게 영감을 줄 것으로 기대함.

        Hacker News 의견

     * NASA와 NRO의 보고서, 특히 50-60년대 자료들은 간결하고 명료한 기술 문서 작성의 모범 사례이며, 당시 프로젝트 운영 방식에 대한 통찰을 제공함
     * ABL의 컨테이너 기반 발사 시스템 접근 방식은 기존 방법론을 창의적으로 활용한 신속 발사 시스템임
     * 터빈 블레이드 간격을 넓혀 가공 시간을 획기적으로 단축한 사례는 설계 시 제작 용이성을 종합적으로 고려해야 함을 보여줌
     * 복잡한 하드웨어 제작 과정에서 빠른 피드백 주기와 내재된 지식의 중요성을 재확인함
     * SpaceX의 Falcon과 Starship이 이미 존재하는 상황에서 ABL 로켓의 차별화 포인트와 고객, 성능상 이점 등에 대한 설명이 아쉬움
     * 3D 프린팅으로 로켓 엔진용 금속 부품 제작이 가능해진 것은 흥미로운 발전임
     * 압력 탱크 기술 발전으로 액화 공기 등을 활용한 간단하고 저렴한 로켓 제작 가능성이 열림
     * 첫 엔진인 만큼 보수적인 설계 선택은 정당하며, 이후 설계에서 더욱 대담하고 모험적인 시도가 기대됨
     * 교육 목적의 수동 레이더 오픈소스 프로젝트에 대한 언급
     * ChatGPT로 Saturn V 로켓 제작 가능 여부에 대한 농담
"
"https://news.hada.io/topic?id=14626","일주일 만에 C로 제작한 3D 모델러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          일주일 만에 C로 제작한 3D 모델러

3D 모델러를 C언어로 일주일 만에 만들기

     * 작년 가을에 ""Wheel Reinvention Jam""이라는 일주일 동안의 프로그래밍 이벤트에 참여함
     * 기존 소프트웨어 시스템을 새로운 시각으로 다시 살펴보는 것이 목적이었음
     * ""ShapeUp""이라는 3D 모델러를 만들었고, 이 글을 읽기 전에 ShapeUp의 데모 동영상을 먼저 보는 것이 이해에 도움됨
     * ShapeUp은 브라우저에서 직접 사용해 볼 수 있음

언어 선택: C

     * Typescript 컴파일러가 느린 것에 대한 불만으로 인해 Jam에 참여
     * esbuild나 Bun의 Typescript 파서로 시작한다면 Typescript의 빠른 부분 집합을 구현하는 프로젝트가 가능해 보였음
     * 하지만 터미널 명령어 실행 속도 비교로는 흥미로운 데모가 되지 않을 것 같아 3D 프로젝트로 방향을 전환함
     * Ray marched signed distance fields(SDFs) 기술 덕분에 일주일 만에 처음부터 3D 프로젝트를 만드는 것이 가능해 보였음
     * 동등한 삼각형 기반 렌더러보다 SDF를 사용한 장면이 훨씬 빠르게 구현 가능
     * 이전에 SDF 셰이더를 작성해본 적은 있었지만 매우 기초적인 수준이었고, 코드를 편집하여 모델링하는 것은 자연스럽지 않게 느껴졌음
     * 마우스로 모양을 편집하고 싶었고, 이번 Jam이 그것을 실현할 기회라고 생각했음
     * 프로젝트 이름을 ShapeUp이라고 지음

C언어 사용의 장점

     * C는 매우 단순하고 원시적인 언어여서 내장 데이터 구조의 부족을 해결하고 포인터 버그를 고치는데 많은 시간을 소비할 것이라고 여겨짐
     * 하지만 C의 단순성은 장점이 됨
          + 빠르게 컴파일 됨
          + 문법이 복잡한 연산을 숨기지 않음
          + 간단해서 끊임없이 문법을 찾아볼 필요가 없음
          + native와 web assembly로 쉽게 컴파일 가능
     * C의 결점들은 22년 동안 사용하면서 개발한 습관으로 피할 수 있음
     * ShapeUp은 작은 단일 C 파일로 구성되어 매우 간단함

ShapeUp의 데이터 구조

     * 모델은 Shapes라는 구조체의 배열로 구성됨
     * Shapes는 정적으로 할당된 배열에 저장됨
          + 할당 실패나 메모리 누수의 위험이 없음
          + 100개의 Shape 제한은 실제로는 제한적이지 않았음
          + 렌더러 최적화 시간이 부족하여 100개가 되기 전에 프레임 속도가 떨어졌을 것
          + 시간이 있었다면 모델을 작은 블록으로 나누고 각 블록 내에서 raymarching을 수행했을 것
     * 동적 메모리는 단 3곳에서만 malloc을 호출함
          + 저장 (전체 문서를 담을 수 있을 만큼 큰 버퍼 할당)
          + OBJ 내보내기 (모든 꼭지점을 담을 수 있을 만큼 큰 버퍼 할당)
          + GLSL 셰이더 생성 (셰이더 소스용 버퍼)
     * 모든 경우 함수 끝에 단일 free가 있음
     * C에서 메모리 관리가 간단할 수 있다는 것을 보여주는 예시
     * C#, Javascript, Python 같은 언어는 Shape마다 개별적으로 malloc하고 해당 포인터를 동적 배열에 저장하는 할당 구조를 강제함
     * C는 메모리 레이아웃을 제어할 수 있어서 좋음

사용자 인터페이스

     * immediate mode user interface(IMGUI)로 구현됨
     * IMGUI 방식의 UI를 좋아함
          + 디버깅이 매우 쉬움
          + 요소를 배치하기 위해 실제 프로그래밍 언어 사용 (CSS, constraints, SwiftUI와 달리)
     * 대부분의 IMGUI와 마찬가지로 enum을 사용하여 어떤 요소에 포커스가 있는지 또는 마우스가 어떤 동작을 하고 있는지 추적함
     * 이 프로젝트에는 동적 배열이나 해시맵이 필요하지 않았지만, 필요했다면 stb_ds.h와 같은 것을 사용했을 것

Raylib 라이브러리의 문제점

     * C를 사용하기로 결정한 것은 좋았지만, raylib은 문제가 됨
     * 개발자 경험을 해치는 이상한 설계 선택이 있음
          + enum 타입이 예상되는 곳에 int를 사용하여 컴파일러 타입 검사를 방지하고 함수가 self document 되지 않음
          + 기본 매개변수 유효성 검사를 하지 않음 (설계 선택)
          + 종속성에 대한 책임을 지지 않음 (GLFW 이슈를 해결하거나 패치를 제출하지 않음)
     * raygui UI 라이브러리는 장난감에 불과함
          + 부동 소수점 숫자를 표시할 수 없음
          + 겹치거나 클리핑된 요소에 대한 마우스 이벤트 라우팅을 처리하지 않음
          + 둥근 모서리를 만들 수 없음
          + 보기 좋게 스타일을 지정할 수 없음
     * 버그도 있음
          + 폰트 변경 방지 버그
          + 그리기 함수가 삼각형 사이의 꼭지점을 공유하지 않아 픽셀 간격이 발생
     * 문제를 발견할 때마다 보고했지만 대부분 ""won't fix""로 닫혔고 버그 리포트 작성에 시간이 많이 걸려 포기함
     * OpenGL 창을 만들어준 것은 좋았지만 그 편의성에 큰 대가를 치름
     * 다행히 OpenGL 함수를 직접 사용하거나 기능을 처음부터 구현하는 탈출구를 찾을 수 있었음
     * 앞으로는 sokol을 사용할 예정

일주일 동안의 개발 과정

     * ShapeUp은 6일 동안 완료해야 하는 4가지 주요 부분으로 구성됨
         1. 사용자 인터페이스 (3D 도구, 키보드 단축키, 사이드바, 게임 컨트롤러)
         2. GLSL 셰이더 생성기 + Ray marching 렌더러
         3. GPU 기반 마우스 선택
         4. Marching cubes for export
     * 각각은 어렵지 않았지만, 우선순위를 올바르게 정하고 빠져나가지 않는 것이 어려웠음
     * 까다롭거나 시간이 많이 걸리는 문제는 설계를 통해 해결하거나 90% 경우에 작동하는 멍청한 해결책을 사용하는 것이 도움됨
     * 때로는 기능을 하루 정도 미루면 무의식적으로 해결책을 찾을 수 있었음
     * 항상 작동하는 3D 모델러를 가지고 있고 시간이 허락하는 대로 점진적으로 개선하려고 노력함
     * 피라미드를 만드는 것처럼 생각함. 층별로 만들면 마지막까지 피라미드가 완성되지 않지만, 어느 단계에서 멈추더라도 완전한 피라미드가 되도록 만들 수 있음

프로젝트 결과

     * 일주일 후에는 의미 있는 3D 모델을 만들고 .obj 파일로 내보낼 수 있는 3D 프로그램을 가지게 됨
     * 멀티플랫폼에서 실행되고 파일 열기/저장 기능도 있음
     * 프로젝트는 2024줄의 C코드와 250줄의 GLSL로 구성됨
     * 약 2300줄 정도로 어느 정도 쓸모 있는 3D 모델러를 표현할 수 있다는 것이 약간 놀라움
     * Jam 요약과 Handmade Seattle 컨퍼런스에서 ShapeUp 데모를 보여달라는 요청을 받음
     * 사람들은 ShapeUp에 감명을 받은 듯 했지만 큰 성과를 거둔 것 같지는 않음. 비교적 간단한 프로젝트임
     * 내가 한 일에 특별한 것이 있다면, 무엇을 만들지 선택할 수 있는 감각, 그것을 만드는 데 필요한 지식, 그리고 일주일 안에 해내는 규율이었음

GN⁺의 의견

     * C언어의 단순함과 속도의 장점을 잘 보여주는 흥미로운 프로젝트임. 하지만 C의 낮은 추상화 수준 때문에 상용 프로젝트에 그대로 사용하긴 어려워 보임. 현대적인 3D 모델링 도구의 기능을 모두 C로 직접 구현하려면 엄청난 노력이 필요할 것으로 예상됨
     * 일주일 만에 동작하는 프로그램을 완성한 것이 인상적임. 하지만 장기적인 관점에서 코드 유지보수와 기능 확장을 고려했을 때 C++이나 Rust 같은 언어를 선택하는 것이 더 나은 선택일 수 있음
     * SDF를 이용한 렌더링 기법은 빠르고 간단하지만 모델링의 자유도나 퀄리티 면에서는 한계가 있어 보임. 상용 모델링 툴은 SubD나 NURBS 같은 표면 모델링 기술을 주로 사용함. 하지만 게임이나 데모 등 실시간성이 중요한 분야에서는 SDF 렌더링이 여전히 활용 가치가 높아 보임
     * 오픈소스 라이브러리 선택의 어려움을 잘 보여주는 사례. 문서화와 코드 품질, 지원 여부 등을 잘 파악하고 신중하게 선택해야 함. 자체 구현도 좋은 대안이 될 수 있음
     * 동작하는 프로그램을 먼저 만들고 점진적으로 개선해 나가는 방식은 실무에서도 매우 유용함. 핵심 기능부터 완성하고 세부 사항을 개선하는 식으로 우선순위를 잘 조절하는 것이 중요해 보임

        Hacker News 의견

     * Raylib의 한계점에 대해 저자와 전적으로 동의함
          + 현재 Raylib으로 시작한 타워 디펜스 스타일 게임 개발 중이지만 비슷한 제한 사항에 직면함
          + 플랫폼 간 전체 화면 전환 불일치, 화면 모드 열거 불가, 런타임 렌더링 기능 전환 불가, 컴파일된 셰이더 저장 불가 등의 이슈가 있음
          + Raylib은 프로토타입 제작에는 좋지만 심각한 제한 사항을 감수하지 않는 한 그 이상은 어려움
          + 개발이 너무 진행되어 이제 Raylib을 SDL 등으로 교체하기에는 늦음
     * 형상을 정적 할당된 배열에 보관하는 것은 할당 실패나 메모리 누수 위험이 없는 사랑스러운 방식임. 실제로 100개 형상 제한은 제약이 되지 않음.
     * 이 프로젝트가 계속 발전하길 바람. 몇 달 후면 학습 곡선이 훨씬 완만한 Blender/FreeCAD의 특정 사용 사례에 대한 진지한 대안이 될 수 있음.
     * 영상의 라이브 데모가 정말 마음에 듦. 앱 제작은 고사하고 그런 영상을 1주일 만에 만들 수 없을 것임.
     * 메모리 처리 등 다양한 결정에 대해 이야기한 흥미로운 글. Crafting Interpreters 2부에 뛰어들면서 C 언어를 다시 공부하는 입장에서 C가 잘하는 것이 무엇인지 상기시켜 줌.
     * 2024줄의 C 코드로 아이러니를 가능케 한 노력에 감사함 :)
     * 잘 아는 도구를 가지고 그냥 멋진 것을 만드는 데에는 정말 강력한 무언가가 있음. 글 잘 읽었음.
     * C에 대한 주장에 정말 동의함. 특히 ""문법이 복잡한 연산을 숨기지 않음. 간단해서 계속 찾아볼 필요가 없음""에 더욱 공감. 또한 C에 대해 뭔가 찾아봐야 한다면 매우 쉽고 유익함. 단순하고 오래된 언어의 장점임.
     * 가끔 C가 우리에게 필요한 전부라고 생각함.
     * 인상적인 개발 속도임. 설명 영상도 정말 재미있게 봤음!
"
"https://news.hada.io/topic?id=14730","Consistency LLM: LLM을 병렬 디코더로 전환해 추론 속도 3.5배 향상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Consistency LLM: LLM을 병렬 디코더로 전환해 추론 속도 3.5배 향상

Consistency Large Language Models (CLLM)

     * LLM들은 전통적으로 하나의 토큰을 연속적으로 디코딩하는 방식으로 동작하는 시퀀셜 디코더로 여겨져 왔음
     * 본 블로그에서는 사전학습된 LLM들이 효율적인 병렬 디코더로 쉽게 전환될 수 있음을 보여줌
     * Consistency Large Language Models(CLLM)은 추론 단계마다 n개 토큰 시퀀스를 효율적으로 디코딩하여 추론 지연시간을 감소시킬 수 있는 새로운 병렬 디코더 계열임
     * CLLM은 사람이 단어를 하나씩 말하기 전에 머릿속으로 완전한 문장을 형성하는 인지 과정을 모방하며, 사전학습된 LLM을 미세조정(fine-tuning)하는 것만으로 효과적으로 학습될 수 있음
     * CLLM은 무작위로 초기화된 n개 토큰 시퀀스를 가능한 적은 단계로 자기회귀(autoregressive, AR) 디코딩 결과와 동일하게 매핑하도록 병렬 디코딩을 수행하는 방식으로 학습됨
     * 실험 결과에 따르면, CLLM은 기존 AR 디코더 대비 2.4배에서 3.4배의 생성 속도 향상을 보였으며, Medusa2나 Eagle과 같은 빠른 추론 기법들과 견줄만하거나 더 우수한 성능을 보였음
     * CLLM은 추가적인 메모리 비용 없이도 이러한 성능 향상을 달성할 수 있음

  Jacobi 디코딩의 배경과 한계점

     * LLM은 AR 디코딩 방식으로 토큰을 하나씩 생성하기 때문에 긴 응답을 위해서는 높은 지연시간이 발생함
     * Jacobi 디코딩은 Jacobi 및 Gauss-Seidel 비선형방정식 해법에서 유래되었으며, greedy 샘플링을 사용한 AR 생성과 동일함이 증명되었음
     * Jacobi 디코딩은 순차적 생성 과정을 Jacobi 반복에 기반한 n개 변수를 가진 n개 비선형방정식 시스템으로 재구성하여 병렬 처리가 가능하도록 함
     * 각 반복 단계에서는 1개 이상의 올바른 토큰을 예측할 수 있어 AR 디코딩을 잠재적으로 가속화 시킬 수 있음
     * 그러나 실제로는 AR로 학습된 LLM은 선행 토큰에 오류가 있을 때 올바른 토큰을 거의 생성할 수 없기 때문에 대부분의 Jacobi 반복에서 n개 토큰 시퀀스에 대해 하나의 수정만 얻게 되어 더 긴 Jacobi 궤적(trajectory)을 생성하게 됨
     * Lookahead 디코딩이나 speculative 디코딩은 이러한 Jacobi 디코딩의 비효율성을 완화하려 하지만 추론시 추가 메모리 비용이 발생하는 반면, CLLM은 그렇지 않음

  CLLM의 학습 방법

     * CLLM 학습은 크게 Jacobi 궤적 준비와 consistency 및 AR 손실 최적화 두 부분으로 구성됨
     * Jacobi 궤적 준비 단계에서는 전체 응답 시퀀스 l개 토큰이 생성될 때까지 n개씩 잘라서 순차적으로 Jacobi 디코딩을 수행하며, 각 궤적에서 생성된 시퀀스를 하나의 데이터 항목으로 간주함
     * 학습시에는 consistency 손실과 AR 손실을 함께 최적화하는데, consistency 손실은 여러 토큰을 한번에 예측하도록 보장하며 AR 손실은 CLLM이 대상 LLM에서 벗어나지 않도록 하여 생성 품질을 유지하도록 함
     * Global consistency(GC) 손실은 Jacobi 궤적의 임의 지점과 고정점 사이의 거리를 최소화하여 CLLM이 Jacobi 궤적의 어느 지점에서든 고정점을 예측하도록 장려함
     * Local consistency(LC) 손실은 Jacobi 궤적의 인접 상태가 동일한 출력을 내도록 유도함
     * AR 손실은 대상 LLM의 생성 결과에 기반하여 전통적인 AR 손실을 포함하며, 목적은 CLLM이 대상 LLM의 분포에서 벗어나지 않도록 하는 것임

  실험 결과

     * 실험에는 Spider(text-to-SQL), Human-Eval(파이썬 코드 완성), GSM8k(수학) 등의 특화된 도메인 작업과 MT-bench와 같은 폭넓은 개방형 대화 챌린지가 포함되었음
     * CLLM은 대상 모델 대비 가장 큰 속도 향상을 보였으며, 추론시 추가 비용 없이 Medusa2와 유사하거나 더 나은 속도 향상을 달성했음
     * MT-bench에서 CLLM은 Medusa2와 결합했을 때와 거의 동일한 속도 향상을 달성했지만, 더 높은 적응성과 메모리 효율성을 제공함
     * CLLM의 미세조정 비용은 적당한 수준이며, 데이터셋 크기가 큰 경우에도 Jacobi 궤적 생성에 데이터셋의 10% 정도만 사용해도 2.5배 정도의 속도 향상을 얻을 수 있었음
     * CLLM은 fast forwarding 현상을 통해 여러 연속 토큰을 한 번의 Jacobi 반복에서 올바르게 예측할 수 있음
     * CLLM은 선행 토큰에 오류가 있어도 올바른 토큰을 미리 예측하고 변경되지 않도록 유지하는 stationary 토큰 능력을 보여줌
     * CLLM은 학습을 통해 연어(collocation)와 같은 핵심 언어 개념을 습득하며, 이를 통해 Jacobi 궤적의 어느 지점에서도 구조를 유추하고 반복 단계를 최소화하기 위해 여러 단어를 동시에 예측할 수 있게 됨

GN⁺의 의견

     * CLLM은 기존 LLM의 AR 디코딩 방식이 가진 긴 지연 시간 문제를 Jacobi 디코딩을 활용해 효과적으로 해결한 것으로 보임. 특히 추가 메모리 비용 없이 병렬화된 디코딩을 통해 속도 향상을 달성한 점이 인상적임
     * CLLM의 학습 방법은 기존 LLM을 consistency 손실을 통해 미세조정하는 것으로 비교적 간단해 보이지만, 이를 통해 언어의 중요한 특성 중 하나인 연어(collocation)을 학습하여 병렬 디코딩 성능을 크게 향상시켰다는 점에서 의미가 있어 보임
     * 다만 CLLM이 greedy 샘플링을 가정하고 있어서 더 다양한 decoding 전략에서도 잘 동작할 수 있을지는 추가 연구가 필요해 보임. 또한 현재는 영어에 한정된 실험 결과라 다양한 언어로의 일반화 가능성 역시 검증이 필요할 것 같음
     * CLLM은 LLM의 응답 속도를 빠르게 만드는 방법으로 실용적인 접근이라고 생각됨. 웹 검색이나 챗봇 등 실시간성이 요구되는 태스크에 잘 적용될 수 있을 것 같음
     * 개인적으로 CLLM의 consistency 학습 방식이 GPT 등의 LLM 외에도 이미지 생성 모델이나 음성 합성 모델 등 다른 생성 모델에도 적용될 수 있지 않을까 기대됨. CLLM의 아이디어가 앞으로 다양한 생성 모델의 효율성 향상에 기여할 수 있기를 바람

        Hacker News 의견

     * 자유로운 드로잉 수업에서 시간 제한을 두고 반복적으로 그리는 연습을 하면 그림 실력이 크게 향상됨. 급하게 그리는 연습이 오히려 비율과 윤곽을 정확히 잡는 능력을 키워줌.
     * Jacobi decoding은 greedy autoregressive decoding과 동일하지만, 실제로는 반복을 피하고 지나치게 일반적인 응답을 피하기 위해 샘플링 온도를 0 이상으로 설정해야 함.
     * 곧 우리는 모델 학습이 필요 없다는 것을 깨닫게 될 것임. 좋은 인덱싱과 샘플링만 필요함. LLM은 기본적으로 훌륭한 NLP 인터페이스를 갖춘 데이터셋의 DB와 동등함.
     * CLLM 논문의 inference 성능 향상이 주목할 만함. Fine-tuning 비용이 합리적이고(사전 학습 비용의 약 0.01%) 성능 향상도 꽤 일관됨.
     * Jacobi trajectories는 높은 온도 경로를 배제하므로 데이터 검색에는 긍정적이지만 창의성 극대화에는 부정적일 수 있음.
     * LLM이 동일한 프롬프트에 대해 결정론적으로 응답하지 않는 이유에 대해 ""AI 전문가에게 물어보기"" 기능이 있으면 좋겠음.
     * Groq(https://groq.com/)의 속도 향상이 이 방법 때문인지 다른 방법을 사용하는지 궁금함.
"
"https://news.hada.io/topic?id=14654","아니요, 난 당신의 문의 양식을 채우기 싫습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      아니요, 난 당신의 문의 양식을 채우기 싫습니다.

     * 연락처 폼은 사용자에게 이메일 주소를 웹사이트에 직접 공개하는 것보다 거의 항상 더 나쁨
     * 연락처 폼이 안좋은 이유와 그럼에도 불구하고 사용하는 이유, 그리고 대안에 대해 설명할 예정

연락처 폼이 안좋은 이유

     * 연락처 폼이 완전히 작동하지 않는 경우가 많음
          + 워드프레스 업그레이드나 CRM 변경으로 연락처 폼이 조용히 고장나는 경우가 많음
          + 수익이 수십억에 달하는 B&Q와 같은 대형 소매업체조차 연락처 폼이 작동하지 않는 경우가 있음
          + 에러 메시지도 사용자에게 해결책을 제시하지 않음
     * 일부 사용자에게 연락처 폼이 작동하지 않음
          + Axa의 연락처 폼은 유효한 이메일을 잘못 거부하고 관련 제품을 모두 표시하지 않음
          + Vodafone의 분실/도난 신고 폼은 야간에 자주 유지보수로 인해 사용할 수 없음
          + 많은 연락처 폼이 웹 접근성 표준을 충족하지 않아 보조기술 사용자가 완성하기 어려움
     * 연락처 폼 작성에 시간이 오래 걸림
          + 영국 Charity Commission의 불만 제기 폼은 로딩하는데만 75초가 걸림
          + 진행 상황 표시가 없고, 완성하려면 11 페이지를 거쳐야 함
          + 자동완성 속성이 설정되어 있지 않아 각 질문을 신중히 검토해야 함
          + 드롭다운에 정렬되지 않은 많은 옵션이 있음
     * 연락처 폼에서 관련 없는 개인 정보를 요구함
          + National Grid의 연락처 및 피드백 폼에서는 사소한 피드백을 남기려고 해도 집 주소와 전화번호 등 모든 개인 정보 제공 여부를 결정해야 함
          + 민감한 데이터(생년월일, ID 사본 등)를 요구하는 불만 제기 폼도 있음
          + 연락처 세부 정보는 수집해야 하지만 사소한 피드백에 3가지 연락 방법이 모두 필요한 것은 아님
          + 이는 데이터 도용 및 신원 사기의 위험을 불필요하게 높임
     * 연락처 폼은 고객에게 덜 유용함
          + 이메일은 고객이 초안 작성, 메시지 예약, 기록 보관 등을 할 수 있게 해줌
          + 연락처 폼에는 이러한 기능이 없는 경우가 많음
          + 회사가 '실수로' 폼 제출을 잃어버리는 경우가 있음
     * 연락처 폼은 리소스 낭비임
          + 연락처 폼을 제대로 구축하고 유지 관리하는 데는 시간과 에너지가 듬
          + 백엔드에서는 거의 항상 이메일로 연결되므로 중간 과정을 건너뛰고 이메일 주소를 공개하는 것이 나음
     * 기타 연락처 폼의 성가신 점
          + 연락처 폼을 최대한 성가시게 설정하는 수백 가지 방법이 있음
          + Sainsbury's 연락처 폼은 긴 옵션 트리를 탐색한 후 주제를 다시 선택하라는 모달을 열고, 작성하기 어려운 작은 폼 창을 제시함

연락처 폼을 사용하는 이유와 대안

     * 문제 해결 속도를 높이는 구조화된 데이터 수집
          + Amazon은 최근 구매한 품목을 보여주고 일반적인 고객 서비스 워크플로를 완전히 self-serve할 수 있게 해줌
          + 자동화하기 전에 이메일로 적절한 세부 정보를 제공하도록 장려하고, Zendesk와 같은 플랫폼의 AI 시스템 사용을 고려해볼 수 있음
     * 연락처 폼이 장벽을 낮춰준다고 생각함
          + 경험적으로 사실이 아님. 이메일 주소를 나열하는 것이 연락처 폼만큼 진정한 연락을 받을 수 있음
          + 매우 '간단한' 피드백 폼이나 익명성을 선호하는 경우에는 장벽을 낮출 수 있음
     * 이메일 주소를 공개하면 스팸이 올까 걱정됨
          + 워드프레스 폼보다 스팸이 덜 오는 경우가 많음
          + 정말 걱정된다면 이메일을 스팸 봇으로부터 난독화할 수 있지만, 이메일 스팸이 드물고 스팸 필터가 좋아졌기 때문에 시간 낭비일 수 있음
     * 팀으로 메시지 관리를 원함
          + 공유 메일박스, 협업 받은편지함, Zendesk 등의 고객 서비스 솔루션을 이메일에 연결하여 할 수 있음
     * 이메일이 충분히 안전하지 않다고 생각함
          + 과거에는 암호화되지 않아 이메일이 매우 불안전했지만, 지금은 대부분의 이메일 트래픽이 안전하게 암호화됨
          + 영국 NCSC는 자체적으로 연락 이메일을 기꺼이 나열함
     * 이메일이 보조 기술 사용자에게 접근성이 없다고 생각함
          + 접근성 표준을 준수하려면 연락처 폼이 필요하다는 주장은 사실이 아님
          + 이메일 주소를 나열하는 것이 연락처 폼보다 이해하기 쉬움
     * 사용자가 폼을 작성하기를 원하지 않음
          + 의도적으로 폼 작성을 어렵게 만드는 조직이 있음 (예: 규제 요구 사항 준수를 원하지 않는 경우)
          + Meta(Facebook)는 데이터 보호 문제에 대해 연락하기 매우 어렵게 만듦
          + 규제 기관은 법규나 규정의 취지를 준수하는 행위자에게 보상하는 방식으로 적절한 기준을 설정해야 함

결론

     * 연락처 폼은 제대로 만들기 어렵고 종종 모든 사람에게 더 나쁜 경험을 제공함
     * 지금 바로 연락처 폼을 제거하고 웹사이트에 이메일을 나열하세요!

GN⁺의 의견

     * 연락처 폼을 통한 문의보다는 이메일을 직접 공개하는 것이 더 편리하다는 점에 동의함. 하지만 일부 기업에서는 문의 내용을 체계적으로 관리하고 신속하게 대응하기 위해서 연락처 폼을 사용하는 경우도 있음.
     * 보안과 개인정보보호 측면에서 연락처 폼이 이메일보다 우위에 있다고 보기 어려움. 오히려 불필요한 개인정보를 과도하게 요구하는 연락처 폼은 개인정보 유출의 위험만 높일 뿐임.
     * 웹 접근성 준수를 위해 연락처 폼이 반드시 필요한 것은 아님. 오히려 불필요하게 복잡한 연락처 폼이 보조기술 사용자의 접근성을 저해할 수 있음.
     * 소비자 입장에서는 간단한 문의사항도 연락처 폼에 많은 정보를 입력해야 해서 불편함. 기업은 꼭 필요한 정보만 요구하고, 이메일 문의도 함께 지원하는 것이 바람직함.
     * Zendesk 등 고객지원 솔루션을 활용하면 이메일로 들어온 문의도 효율적으로 관리할 수 있음. 연락처 폼에만 의존할 필요는 없어 보임.

        Hacker News 의견

   요약:
     * 나이가 들수록 불편한 것들(더러운 식당, 무례한 직원, 다크 패턴이 있는 웹사이트 등)과 관여하지 않는 것이 최선임. 이는 스트레스 관리에도 도움됨.
     * 기업이나 정부는 고객의 연락을 원하지 않음. 불만 제기나 질문을 위한 양식은 판매 견적 요청 양식보다 더 불편함.
     * 이메일 대신 양식을 사용하는 이유 중 하나는 웹사이트에 방문객으로 있을 때와 자신의 이메일 받은편지함에 있을 때의 행동 차이 때문임.
     * 연락 양식을 만들 때는 ""메시지를 받았습니다""라는 자동 응답 이메일을 보내는 것이 좋음. 이는 백엔드가 메시지를 받았고 유용한 곳으로 전달되었다는 확신을 줌.
     * mailto URL에 제목과 본문의 초기값을 지정하여 사용자에게 이메일 준비시 템플릿을 제공할 수 있음.
     * Request Tracker는 훌륭한 고전적인 고객 서비스 솔루션임.
     * 연락 양식은 죽어가고 있음. 요즘에는 챗봇에 텍스트를 입력하면 문제와 관련 없는 답변을 받게 됨.
     * 공개된 이메일 주소는 시간이 지날수록 스팸 로봇에 의해 스팸 발송자 목록에 추가되어 스팸량이 증가함. 반면 양식의 스팸 비율은 시간이 지나도 일정함.
     * 솔로 개발자의 경우 연락 양식에서 사용자들이 개인적이거나 게으른 질문을 하는 경우가 많아 양식을 숨기거나 추가 필드를 두어 마찰을 줄이려 함.
"
"https://news.hada.io/topic?id=14704","구글의 Design Docs 문서 작성 문화 (2020)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글의 Design Docs 문서 작성 문화 (2020)

     * Design docs는 Google의 소프트웨어 엔지니어링 문화의 핵심 요소 중 하나로, 소프트웨어 시스템이나 애플리케이션의 주요 저자가 코딩 프로젝트를 시작하기 전에 작성하는 비교적 비공식적인 문서임
          + 고수준의 구현 전략과 주요 설계 결정을 문서화하며, 특히 그러한 결정 시 고려되었던 트레이드오프에 중점을 둠
          + 소프트웨어 엔지니어의 직무는 코드를 작성하는 것이 아니라 문제를 해결하는 것이며, Design doc과 같은 비정형 텍스트가 프로젝트 초기 단계에서는 코드보다 더 간결하고 이해하기 쉬운 문제 해결 도구가 될 수 있음

Design docs의 소프트웨어 개발 라이프사이클에서의 역할

     * 원래의 소프트웨어 설계 문서화 외에도 다음과 같은 기능을 수행함:
          + 변경이 아직 저렴할 때 설계 이슈를 조기에 식별
          + 조직 내에서 설계에 대한 합의 도출
          + 횡단 관심사(cross-cutting concern) 고려 보장
          + 시니어 엔지니어의 지식을 조직으로 전파
          + 설계 결정에 대한 조직적 기억의 기반 형성
          + 소프트웨어 설계자의 기술 포트폴리오에서 요약 아티팩트 역할

Design doc의 구조

     * Design doc에는 엄격한 콘텐츠 가이드라인이 없는 비공식 문서이므로, 특정 프로젝트에 가장 적합한 형식으로 작성하는 것이 규칙임
          + Context and scope: 새로운 시스템이 구축되는 배경과 실제로 구축되는 내용에 대한 개요 제공
          + Goals and non-goals: 시스템의 목표와 목표가 아닌 것을 나열
          + The actual design
               o System-context-diagram: 시스템을 더 큰 기술 환경의 일부로 보여주는 다이어그램
               o APIs: 시스템이 노출하는 API 스케치
               o Data storage: 데이터를 저장/관리하는 방법 논의
               o Code and pseudo-code: 새로운 알고리즘 설명 시에만 포함
               o Degree of constraint: 솔루션 공간의 제약 정도가 설계 문서의 형태에 영향을 미치는 주요 요인 중 하나
          + Alternatives considered: 유사한 결과를 합리적으로 달성할 수 있는 대안적 설계를 나열하고 각 설계의 트레이드오프와 주요 설계를 선택한 이유 설명
          + Cross-cutting concerns: 보안, 프라이버시, 관찰 가능성 등 조직의 공통 관심사가 설계에 어떤 영향을 미치는지 설명

Design doc 작성 시기

     * Design doc 작성 여부는 설계에 대한 조직적 합의, 문서화, 시니어 리뷰 등의 이점이 문서 작성에 따른 추가 작업보다 큰지에 달려 있음
          + 문제의 복잡성이나 솔루션의 복잡성으로 인해 설계 문제에 대한 해결책이 모호한 경우가 아니라면 문서 작성의 가치는 적음
          + 구현 매뉴얼에 가까운 Design doc은 불필요할 수 있음
          + 프로토타이핑과 신속한 반복에는 Design doc 작성 오버헤드가 적합하지 않을 수 있음

Design doc의 라이프사이클

    1. Creation and rapid iteration: 문서 작성 및 동료와의 신속한 반복을 통해 안정적인 버전 도출
    2. Review: 더 넓은 청중과 공유되어 리뷰됨
    3. Implementation and iteration: 구현 중 설계 변경 사항 발생 시 문서 업데이트
    4. Maintenance and learning: 시스템을 이해하기 위한 가장 접근성 좋은 진입점 역할

GN⁺의 의견

     * Design doc은 복잡한 소프트웨어 프로젝트의 가장 어려운 문제를 해결하는 데 있어 명확성을 얻고 합의를 도출하는 좋은 방법임. 사전 조사를 통해 불필요한 코딩을 피할 수 있어 비용을 절감해주지만, 동시에 작성과 검토에 시간이 소요되어 비용이 발생하기도 함
     * 따라서 프로젝트에 맞게 Design doc 작성 여부를 현명하게 선택해야 함. 소프트웨어 설계에 대한 불확실성이 있고, 시니어 엔지니어의 조기 개입이 도움이 되며, 설계에 대한 조직적 합의가 필요하고, 팀이 보안 등 공통 관심사를 종종 간과하며, 레거시 시스템 설계에 대한 high-level 문서가 필요한 경우 Design doc 작성을 고려해 볼 만함
     * 소프트웨어 설계 과정에서 문서화의 중요성을 잘 보여주는 사례로, 특히 대규모 팀에서 일관된 설계 문화를 확립하는 데 도움이 될 것으로 보임. 다만 문서화에 대한 부담으로 엔지니어들이 기피할 수 있는 만큼, 상황에 맞는 적절한 수준과 범위로 가이드라인을 마련하는 것이 중요해 보임
     * 개인적으로는 1) 설계의 복잡성에 따른 트레이드오프 고려, 2) 구현 전 설계 이슈 조기 발견, 3) 신규 멤버의 빠른 학습을 위한 시스템 개요 제공 측면에서 Design doc의 유용성이 크다고 생각함. 단, 지나치게 형식적이거나 실제 구현과 동떨어진 문서가 되지 않도록 주의가 필요함
     * 프로젝트 초기 혹은 복잡성이 높은 설계 단계에 국한해 Design doc을 의무화하되, 엔지니어가 자발적으로 작성할 수 있도록 인센티브를 제공하는 것도 방법이 될 수 있음. 문서 작성이 개별 엔지니어의 기술 포트폴리오 강화에도 도움이 된다는 점을 강조하면 좋겠음

        Hacker News 의견

   구글의 디자인 문서 문화에 대한 다양한 의견:
     * 디자인 문서 작성이 승진을 위한 것이 되어버려서 실제 시스템을 만드는 사람들보다는 승진 위원회를 고려해 작성되는 경향이 있음
     * 디자인 문서의 유형:
          + 프로모션용 디자인 문서: 프로젝트의 목적보다는 프로젝트와 회사가 얼마나 대단한지 강조
          + 터보 인캡슐레이터 디자인 문서: 이해하기 어려운 전문 용어로 가득함
          + 신입 사원 디자인 문서: 내용은 없고 분량만 많음
          + 근거 없는 사실로 가득한 디자인 문서: ""모두가 아는"" 사실을 근거로 들지만 실제로는 검증되지 않음
     * 설계는 코딩 프로젝트의 일부이므로, 코딩 전에 문서로 모든 것을 계획하는 것은 잘못된 접근
     * 사전 문서 작성은 사소한 지적을 할 구실을 줄 뿐이며, 중요한 문제는 미리 관련자들과 소통하며 해결하는 것이 나음
     * 문서를 지속적으로 협업하며 업데이트 하는 것이 더 유용
     * 디자인 문서에 허비되는 인력은 어마어마한 수준
     * 아마존의 디자인 문서 문화는 훌륭했으나, 구글식 문화를 차용한 다른 회사에서는 무의미했음
     * 승인 없이 프로젝트를 진행했음에도 뒤늦게 디자인 문서에 피드백을 주는 일이 있었음
     * 디자인 문서가 실제 문서를 대체해버려서 오히려 문서화가 부실해지는 문제가 있음
     * 디자인 문서의 장점도 있음: 생각을 정리하고, 결함을 발견하고, 의사소통을 원활히 하며, 작업량을 가늠할 수 있음
"
"https://news.hada.io/topic?id=14669","자전거 유지보수와 수리에 대한 사랑의 편지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        자전거 유지보수와 수리에 대한 사랑의 편지

   개요:
     * 2020년 6월 28일, 저자가 오크 가공 애벌레의 독모에 매우 민감하다는 사실을 발견함
     * 같은 날 중고 자전거 2대를 구입하여 자전거 여행을 시작하게 됨
     * 자전거를 판매한 사람에 대해 생각하며 오래된 자전거 수리/복원에 매료됨
     * 10년된 자신의 낡은 자전거를 완전히 분해하여 청소하고 고쳐서 다시 조립하는 것을 목표로 삼음

자전거의 작동 원리

     * 자전거는 페달을 밟아 크랭크암을 돌리고, 체인이 뒷 스프라켓으로 동력을 전달하여 뒷바퀴를 회전시키는 단순한 원리로 작동함
     * 현대 자전거는 공기 타이어, 프리휠, 변속기, 서스펜션, 유압 디스크 브레이크, 전기모터, 전자식 변속 등 기술 발전으로 복잡해짐
     * 자전거 정비사들은 빠른 기술 변화를 따라잡기 위해 더 많은 기술을 배워야 함

자전거 수리의 어려움과 즐거움

     * 자전거 수리가 생각보다 복잡했지만 그만큼 즐거움도 컸음
     * 유튜브 채널, 인터넷 포럼 등 방대한 지식을 활용하여 자전거 수리를 배움
     * 프로젝트를 완료하고 자전거 수리에 깊이 빠져듦

자전거 수리를 통해 배운 교훈들

     * 생각과 행동의 구분은 실제로 존재하지 않으며, 둘은 동전의 양면과 같이 분리될 수 없음
     * 한 사람이 할 수 있는 일은 다른 사람도 할 수 있다는 용기를 얻음
     * 물건을 표면적으로만 보는 것이 아니라 부품 단위로 보는 관점의 변화가 생김
     * 자신의 일의 결과물을 만질 수 없는 현대 서비스업 종사자들은 일에서 단절감을 느낄 수 있음
     * 웹사이트 제작을 통해 수많은 사람들에게 영향을 미치지만, 자전거 수리를 통해 개인에게 더 큰 영향을 준다고 느낌

GN⁺의 의견

     * 자전거는 매우 효율적인 교통수단이지만 점점 더 복잡해지고 있어 정비하기 어려워지고 있음. 하지만 자전거 수리를 배우는 것은 단순히 기술을 익히는 것 이상의 의미가 있음
     * 자전거 수리를 통해 저자가 얻은 통찰과 가치관의 변화는 오늘날 디지털 기기에 둘러싸인 현대인들에게도 시사하는 바가 큼. 가끔은 아날로그적인 활동을 통해 세상을 바라보는 새로운 관점을 얻는 것이 중요함
     * 무형의 지식 노동과 유형의 육체 노동을 구분하고 가치의 차이를 두는 인식은 잘못되었음. 두 영역은 사실 서로 얽혀있고 동등한 가치를 지님
     * 만질 수 있는 결과물을 만들어내지 못하는 현대 서비스업 종사자들이 느끼는 단절감과 무력감은 해결되어야 할 중요한 문제임. 가끔은 아날로그적 활동을 통해 성취감을 느끼는 것이 도움될 수 있음
     * 자전거 여행이나 자전거 정비 같은 취미는 디지털 기기에 지배당하는 삶에서 벗어나 주변 환경과 사물을 새롭게 바라보고 본질에 다가가게 해줌. 많은 사람들이 이런 취미 활동을 접해보길 추천함

        Hacker News 의견

     * 자전거를 타고 수리하는 것은 자부심과 만족감을 줌. 자전거 친화적인 마을에 살면서 자전거 덕분에 더 높은 수준의 삶의 질과 건강을 누릴 수 있게 됨.
     * 자전거는 모두를 위한 것임. 기본적인 지식만 있어도 오래된 자전거를 탈 수 있음. 유튜브 덕분에 자전거 정비에 대한 지식을 쉽게 배우고 자녀들에게 전수할 수 있게 됨.
     * 자전거, 라디오, 자동차 등 모든 것을 정비하거나 만드는 데에는 특별한 경지가 있음. 경험이나 나이에서 오는 건지 모르겠지만, 이런 경지에 이르면 사물을 바라보는 시각이 달라짐. 이런 경지를 찾으면 더 빠르고 질 높은 작업을 할 수 있음.
     * 70년대 푸조 자전거 7대를 수집하여 정비하는 것은 소프트웨어 엔지니어링과 육아의 일상에서 벗어나 편안한 토요일 오후를 보내는 방법임. 주된 이동 수단을 완전히 스스로 정비하는 것은 매우 만족스러움.
     * 대부분의 자전거는 매우 저렴한 가격에 구매했으며, 복원하는 과정이 매우 편안했음. 예를 들어, 상태가 좋은 프레임을 사용하여 대부분 원래 부품으로 복원한 자전거는 원래 70유로에 구입했지만, 지금은 아름답고 우아한 모습을 갖추고 있음.
     * 오래된 자전거를 구매할 때의 기본 원칙은 프레임이 괜찮으면 200유로 미만으로 복원할 수 있다는 것임. 대부분의 경우 부서진 체인, 브레이크, 스포크 등과 같은 사소한 것들임.
"
"https://news.hada.io/topic?id=14681","14일 무료 평가판으로는 충분하지 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         14일 무료 평가판으로는 충분하지 않아요

     * Keygen을 8년간 운영하면서 창업자들이 중요한 비즈니스 지표를 간과하는 경우가 많음을 알게 됨. 그 중 하나가 바로 '전환까지 걸리는 시간(time-to-convert)'임.
     * 초기에 14일 무료 평가판을 제공했는데, 잠재 고객이 14일 내에 소프트웨어 라이센싱 API를 전체 스택에 통합하기는 매우 어려웠음.
     * 그래서 무료 평가판 기간 연장을 제공하기 시작했고, 연장을 요청한 고객의 전환율이 더 높다는 것을 발견함.

전환까지 걸리는 시간(Time-to-Convert)의 중요성

     * Baremetrics에서 제한된 측정 항목에 불만을 느끼고 Rake task로 대체하면서 '전환까지 걸리는 시간(TTC)'에 대해 알게 됨.
     * TTC는 고객이 가입한 시점부터 실제 결제까지 걸리는 시간을 의미함.
     * Keygen의 경우 p50 TTC가 41일, p90이 130일, p95가 198일, p99가 290일로 나타남.
     * 14일 무료 평가판으로는 고객이 Keygen의 가치를 실현하고 구매 결정을 내리기에 충분하지 않았음.

무제한 평가판(무료 플랜) 도입

     * 잠재 고객에게 API 이해, 온보딩, PoC 계획 및 실행 등을 14일 내에 완료하도록 요구하는 것은 무리였음.
     * 잠재 고객이 Keygen이 해결책이 될 수 있다고 결정하는 순간 리드를 캡처하고 육성하기 위해 무제한 평가판(무료 플랜)을 도입함.
     * 그 결과, 전반적인 가입자 수는 증가했고, 유료 가입자 수도 전환율은 그대로 유지한 채 수동 작업 없이 증가함.

GN⁺의 의견

     * SaaS 제품의 경우 고객이 가치를 실현하고 구매를 결정하는 데 걸리는 시간을 정확히 파악하는 것이 중요함. 무료 평가판 기간을 그에 맞게 설정해야 함.
     * 무료 평가판 연장을 제공하되, 연장 시 결제 정보를 요구하는 것도 전환율 향상에 도움이 될 수 있음.
     * 다만 무료 플랜 도입 시에는 수익 모델에 대한 면밀한 검토가 필요함. 무료 사용자로 인한 비용 증가를 감당할 수 있어야 하고, 무료 사용자를 유료 사용자로 전환하기 위한 전략이 필요함.
     * 고객의 TTC를 줄이기 위해서는 온보딩 프로세스 개선, 문서 및 튜토리얼 강화, 고객 지원 확대 등 다양한 노력이 수반되어야 함.
     * TTC 개선을 위해 Pocus, Endgame 등 PLG(Product-Led Growth) 도구들을 활용해 볼 수도 있음.

        Hacker News 의견

   요약해보면 다음과 같은 의견들이 있음:
     * 일반 소비자 SW의 경우에도 7/14/30일 무료 체험은 비정상적임. 대부분은 한번 사용하고 몇 달 뒤 다시 필요할 때 Trial이 만료되어 추가로 사용하기 어려움. 대신 사용량 기반 무료 체험이 더 적절함.
     * 개발자 대상 라이브러리를 판매하는 경우, 무기한 Trial(워터마크 포함)을 제공하고 대신 30일 무료 지원을 제공하는 방식이 더 효과적임.
     * 14일 무료 체험은 실제로는 무료가 아니라 평가에 시간이 많이 소요됨. 오픈소스는 계속 사용할 수 있지만 상용 제품은 구매 승인을 받아야 해서 더 주저하게 됨.
     * SaaS 업체에 바라는 사항:
         1. 다양한 가격 정책 제시
         2. 즉시 사용 가능하도록 하고 레퍼런스 문서 등 제공
         3. 단계별 가격 책정 (사용자수 등에 따라 자동 업그레이드)
         4. 카드 없이도 사용 가능하도록 유예기간 제공
     * Trial 기간 연장을 원하는 사람들의 전환율이 높은 건 당연한 결과임. 중요한 건 어떤 기능 사용이 전환으로 이어지는지 파악하고, 해당 기능의 사용 가능성을 높이는 것임.
     * 가입 후 알게 되는 압박적인 시간 제한 혜택도 좋지 않음. 너무 일찍 가입한 실수를 한 기분이 듦.
     * 기한이 있는 체험은 항상 부정적임. 대신 만료되지 않는 무료 크레딧을 제공하는 것도 좋은 방법임.
     * 일부 SW는 배우는데 시간이 많이 걸려서 고급 기능을 테스트하기 어려움. 경쟁사에 비해 인내심 없이 체험 연장을 거부한 회사가 있었는데, 결국 경쟁사로 계약함.
"
"https://news.hada.io/topic?id=14688","PlanetScale forever: MySQL Serverless 플랫폼 PlanetScale에서 Hobby plan을 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 PlanetScale forever: MySQL Serverless 플랫폼 PlanetScale에서 Hobby plan을 제거

     * PlanetScale은 장기적으로 지속 가능하고 신뢰할 수 있는 서비스를 제공하기 위해 수익성을 우선시합니다.
     * 회사는 비수익성의 위험을 방지하기 위해 판매 및 마케팅 부서의 일부 직원과 작별하고 Hobby plan을 중단하기로 결정했습니다.
     * Hobby plan은 2024년 4월 8일에 종료될 예정이며, 사용자는 계획 폐지에 관한 자세한 정보를 FAQ 문서에서 확인할 수 있습니다.
     * PlanetScale은 시장 가치가 500억 달러 이상인 주요 기업들의 주 데이터베이스로, 미국 내에서 가장 빠르게 성장하는 기술 회사 중 하나로 인정받았습니다.
     * 회사는 필요 이상의 무료 자원을 제공하지 않고도 성장을 지속할 수 있는 검증된 기술력을 강조하며, 모든 결정은 신뢰성과 지속 가능성을 중심으로 이루어집니다.

   참고
     * PlanetScale은 MySQL Serverless 플랫폼을 서비스하는 기업으로, 그 근간은 Vitess로 개발되었습니다.
     * Vitess는 유투브를 위해 개발된 MySQL 솔루션으로, 대규모 분산 환경에서 안정적으로 MySQL을 운영하기 위한 획기적인 기술입니다.
     * PlanetScale은 Vitess의 공동 저자와 메인테이너 등이 설립한 기술 기업입니다.
     * Hobby plan은 PlanetScale이 제공하던 무료 플랜입니다.
     * 이제 최소 과금은 월간 39달러부터 시작합니다.
"
"https://news.hada.io/topic?id=14665","gpudeploy - GPU를 위한 "에어비앤비"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      gpudeploy - GPU를 위한 ""에어비앤비""

GPU Marketplace

     * GPU Deploy는 머신러닝과 AI를 위한 저렴한 온디맨드 GPU 서비스를 제공
     * 머신러닝 작업을 위해 미리 구성되어 있어 즉시 GPU 인스턴스를 시작할 수 있음

제공되는 GPU 사양 및 가격

     * Nvidia H100, A100, GeForce RTX 4090/3060, Quadro RTX 6000 등 다양한 GPU 모델 지원
     * GPU RAM은 11GB에서 640GB까지 다양하게 제공됨
     * CUDA 코어 수는 3584개에서 116736개까지 다양함
     * vCPU는 16개에서 242개까지 선택 가능함
     * 시간당 가격은 $0.06에서 $26.55까지 다양함 (판매세 제외, 실제 가격은 보통 더 저렴함)

유휴 GPU 활용 제안

     * 유휴 GPU가 있다면 GPU Deploy를 통해 컴퓨팅 자원을 제공할 수 있음
          + GPU 클러스터 운영자라면 유휴 컴퓨팅 자원 임대 가능
          + AI 회사라면 유휴 컴퓨팅 자원 임대 가능
          + 개인이 GPU를 보유하고 있어도 참여 가능

GN⁺의 의견

     * 온디맨드 GPU 사용료는 매우 비싸기 때문에, 이 서비스를 활용하면 GPU가 필요할 때 저렴한 비용으로 사용할 수 있어 매력적임
     * 하지만 장기적인 사용시에는 직접 GPU 서버를 구축하는 것이 훨씬 경제적일 수 있음
     * 개인이나 중소기업이 GPU 자원을 활용할 수 있는 방안으로는 괜찮은 선택지가 될 수 있음
     * 기업의 입장에서는 GPU 서버 구축 비용과 운영 비용 등을 고려하여 장단기적인 측면에서 도입을 검토해 볼만함
     * 유사한 GPU 제공 서비스로는 AWS, GCP, MS Azure 등이 있으며, 각 서비스별로 제공되는 GPU 사양과 가격 정책 등을 면밀히 비교해 볼 필요가 있음
     * 유휴 GPU 활용은 흥미로운 제안이지만, 보안이나 자원 관리 측면에서 우려되는 부분이 있을 수 있음

        Hacker News 의견

     * 제3자에게 GPU 리소스를 제공할 때 고려해야 할 사항들:
          + 프라이버시 문제 - 공격자가 GPU 허니팟을 설치하고 데이터를 수집할 수 있음
          + 가짜 GPU 연산 - 공격자가 연산량을 줄이기 위해 가짜 GPU를 사용하고 더미 데이터를 보낼 수 있음
          + 결함 있는 GPU - 악의적인 의도는 아니지만 고장난 GPU로 인해 잘못된 결과가 나올 수 있음
     * 서비스 약관과 개인정보 보호정책에 동의해야 하는데, 링크가 빈 페이지로 연결되는 것이 특이함
     * 개념 자체는 훌륭함. Vast.ai와 유사한 ""GPU를 위한 에어비앤비"" 컨셉인데, 이 서비스가 어떤 점에서 다르고 더 나은지 궁금함
     * ""GPU를 위한 에어비앤비""보다는 ""주문형 GPU 프로비저닝""이 더 이해하기 쉬울 것 같음
     * 좋은 아이디어이며 행운을 빕니다! Akash Network라는 암호화폐 프로젝트가 인상적인데, 수요와 합법적 사용 사례가 있음
     * Stability AI가 하드웨어를 과도하게 프로비저닝했다는 등의 내용은 잘 모르겠음. AI 과대광고에 눈이 멀어서 그런 것 같음
     * 멋진 아이디어! 제공자에 대한 보안 보장은 어떻게 되나요? GPU 클러스터를 임대할 때 임차인에게 어떤 접근 권한을 부여해야 할까요? GPU 커널만 전송되나요, 아니면 제한된 사용자 접근 권한도 주어지나요? 운영자가 라우터 포트를 열지 않고도 원활한 경험을 위해 프라이빗 네트워크에 추가하는 것도 고려해 보셨나요?
     * 가격을 알고 싶다면 GPUMonger.com을 확인해 보세요. 이 서비스는 훨씬 더 깊이 있고 진정한 서비스로 보이지만, 단순히 가격 비교를 원한다면 GPUMonger가 좋을 것 같네요.
     * 하드웨어 문제에 대한 소프트웨어 솔루션으로 이런 회사들이 우후죽순 생겨나고 있음. 대부분의 가용 컴퓨팅 파워가 할당된 것으로 보이므로 더 많은 공급자를 확보해야 할 것 같음. 왜 Y Combinator가 유사한 회사에 중복 투자를 하는지 궁금함. Shadeform.ai도 또 다른 예임.
     * 몇 가지 의견:
          + 설치 스크립트 소스를 보면 set -e로 시작하지 않아 불완전한 설치가 발생할 수 있음
          + ""instance-server""라는 바이너리를 설치하는데 무엇을 하는지 모름. 내 서버/네트워크에서 이걸 신뢰할 수 있을까?
          + Nvidia 전용이라 AMD GPU는 당분간 지원되지 않을 듯
          + MVP 같은 느낌. 시간이 지나면서 어떻게 성장할지 지켜보자.
     * RTX 4090이 유휴 상태로 있다면 얼마나 받을 수 있을까요?
"
"https://news.hada.io/topic?id=14662",""In Praise of Idleness"(1932)에 대한 찬사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ""In Praise of Idleness""(1932)에 대한 찬사

     * 현대 산업 국가에서는 과거에 설교되던 것과는 완전히 다른 것이 필요함. 나폴리의 12명의 거지 이야기에서처럼, 게으른 자에게 보상을 주는 것이 옳은 방향임. 이를 위해서는 공공 선전이 필요할 것임.
     * 이미 생활할 만큼 충분한 돈이 있는 사람이 일을 하면 다른 사람들의 일자리를 빼앗는다는 주장은 타당하지 않음. 한 사람이 번 돈을 쓸 때 그만큼 다른 사람에게 일자리를 제공하기 때문임. 오히려 문제는 돈을 저축하는 사람들임.
     * 정부에 돈을 빌려주는 것은 Shakespeare의 살인청부업자를 고용하는 나쁜 사람들과 같음. 파산하는 사업에 투자하는 것 역시 아무에게도 기쁨을 주지 않는 일임. 반면 친구들과 파티를 여는데 돈을 쓰면 모두가 기쁨을 얻을 수 있음.

    일이란 무엇인가?

     * 일에는 두 종류가 있음
          + 지구 표면 근처의 물질의 위치를 다른 물질에 상대적으로 변화시키는 것
          + 다른 사람에게 그렇게 하라고 지시하는 것
     * 첫번째 종류는 불쾌하고 급여가 낮은 반면, 두번째 종류는 유쾌하고 급여가 높음. 두번째 종류는 무한정 확장 가능함.
     * 정치인은 서로 반대되는 조언을 동시에 제공하는 기술, 즉 광고의 기술이 필요함.
     * 문명 초기부터 산업혁명까지 노동자들은 자신과 가족의 생계 유지에 필요한 것 이상을 거의 생산하지 못했음. 약간의 잉여는 성직자와 전사들이 가져갔고, 기근 시에는 노동자들이 굶어 죽었음. 이 시스템은 최근까지 지속되었음.
     * 원시 공동체에서 농민들은 성직자와 전사를 부양하기 위해 잉여 생산물을 내놓지 않았을 것임. 처음에는 강제로, 점차 노동 윤리를 받아들이도록 설득당했음. 지배자들은 자신들의 이익이 인류 전체의 이익과 일치한다고 믿게 되었음.
     * 현대 기술 덕분에 소수 특권층만이 아니라 모두가 문명에 필수적인 여가를 누릴 수 있게 되었음. 과거에는 소수의 여가를 위해 다수가 노동했지만, 그들의 노동은 일 자체가 좋아서가 아니라 여가가 좋기 때문에 가치가 있었음.

    현대 기술과 노동 시간

     * 현대 기술로 모든 사람에게 필요한 생활필수품을 생산하는데 필요한 노동량을 크게 줄일 수 있게 되었음. 전쟁 중 군수물자 생산 등에 동원된 노동력이 생산직에서 빠졌음에도 노동자들의 삶의 질은 오히려 올라갔음.
     * 과학적 생산 조직이 유지되고 노동시간이 하루 4시간으로 줄었더라면 좋았을 것임. 그러나 옛 혼돈이 복구되고, 일부는 장시간 노동을 하고 나머지는 실업자로 굶주리게 되었음. 노동이 의무이고 생산량이 아니라 근면에 따라 임금을 받아야 한다는 노예 국가의 윤리 때문임.
     * 예를 들어 한 시점에 일정 수의 사람들이 하루 8시간 일해서 세상에 필요한 만큼의 핀을 생산한다고 가정함. 어떤 발명으로 생산량이 두 배로 늘어났지만, 세상은 그만큼 더 많은 핀을 필요로 하지 않음. 이성적인 세상이라면 모두가 4시간만 일하면 될 것임. 그러나 실제로는 이를 타락으로 여김. 8시간을 계속 일하고, 핀이 너무 많아져 고용주는 파산하고, 절반의 노동자는 실직함. 어느 경우나 여가 시간은 같지만, 고르게 분배되지 않고 불행만 초래함.

    여가에 대한 인식

     * 가난한 사람이 여가를 갖는 것은 언제나 부자들에게 충격적인 일이었음. 19세기 초 영국에서는 하루 15시간이 보통이었고, 아이들도 12시간 일했음. 노동자들이 선거권을 얻자 공휴일이 법제화 되었지만 상류층은 분개했음.
     * 노동 윤리에 대해 솔직하게 생각해보면, 인간은 필연적으로 일정량의 인간 노동의 산물을 소비함. 노동은 대체로 불쾌하므로, 자신이 생산한 것보다 더 많이 소비하는 것은 부당함. 이 정도까지만 노동의 의무를 인정할 수 있음.
     * 현대 사회에서 돈을 물려받거나 돈 많은 사람과 결혼한 사람들은 이 최소한의 노동에서도 벗어날 수 있음. 그러나 임금 노동자들이 과로하거나 굶주려야 한다는 사실이 더 해로움.
     * 여가를 현명하게 사용하는 것은 문명과 교육의 산물임. 평생 장시간 노동한 사람은 갑자기 한가해지면 지루해할 것임. 그러나 상당한 여가 없이는 인간은 많은 좋은 것들로부터 단절됨. 더 이상 대다수가 이를 박탈당할 이유가 없음.

    노동에 대한 새로운 인식

     * 러시아 정부의 새로운 신념에는 서구의 전통적 가르침과 매우 다른 점이 많지만, 변하지 않은 것도 있음. 통치 계급, 특히 교육 선전을 통제하는 자들이 노동의 존엄성에 대해 가지는 태도가 그것임.
     * 페미니스트들이 정치권력의 가치를 깨닫고 덕행과 권력 모두를 갖기로 한 것처럼, 러시아에서도 육체노동에 대해 비슷한 일이 일어났음. 옛날부터 부자들은 ""정직한 노동""을 칭송하면서도 가난한 자들에게만 강요했음. 러시아에서는 이를 진지하게 받아들여 육체노동자를 가장 존경하게 되었음.
     * 이는 당분간은 좋은 일임. 그러나 모두가 장시간 노동없이도 편안해질 수 있게 되면 어떻게 될까? 러시아 당국은 현재의 여가를 미래 생산성을 위해 계속 희생하는 계획을 세울 가능성이 높아보임.

    노동의 진정한 가치

     * 물질을 옮기는 일은 우리 존재에 필요하지만, 인생의 목적은 아님. 그렇지 않다면 Shakespeare보다 막노동꾼이 더 높이 평가되어야 할 것임. 우리는 가난한 자들을 달래기 위해 노동의 존엄성을 설교해온 부자들과, 기계를 다루는 새로운 즐거움에 현혹되어 이 점을 오해하고 있음.
     * 노동자들은 노동을 생계 수단으로 여기며, 행복은 여가에서 온다고 생각함. 현대인은 모든 것이 다른 무언가를 위해서만 행해져야 한다고 여김. 영화를 보러 가는 습관은 비난받지만, 영화를 만드는 일은 돈을 버는 일이라 존경받음. 돈을 버는 것은 좋고 쓰는 것은 나쁘다고 여기는 개념이 모든 것을 뒤집어 놓았음.
     * 하루 4시간만 일하자는 것이 모든 시간을 경박하게 보내자는 뜻은 아님. 4시간 노동으로 필수품과 기본적 안락을 누릴 자격을 얻고, 나머지는 각자 원하는 대로 쓸 수 있어야 함. 교육이 진전되어 여가를 지적으로 활용할 수 있는 취향을 제공하는 것도 중요함.
     * 과거에는 소수의 여가 계급과 다수의 노동 계급이 있었음. 여가 계급은 사회적 정의에 근거하지 않은 특권을 누렸고, 이는 그들을 억압적으로 만들고 특권을 정당화하는 이론을 만들게 했음. 그럼에도 그들은 문명의 거의 모든 것에 기여했음. 심지어 피억압자의 해방조차 위에서 시작되곤 했음. 여가 계급 없이 인류는 야만을 벗어나지 못했을 것임.
     * 그러나 의무 없는 세습적 여가 계급은 엄청나게 낭비적이었음. Darwin 한 명의 대가로 fox-hunting이나 밀렵꾼 처벌 이상을 생각하지 않는 수만 명의 시골 신사들이 있었음. 오늘날 대학이 더 체계적으로 여가 계급이 우연히 부산물로 제공했던 것을 제공하고 있음.
     * 아무도 하루 4시간 이상 일하도록 강요받지 않는 세상에서는 훌륭한 그림을 그려도 굶주리지 않을 것이며, 젊은 작가들도 세간의 주목을 끌기 위해 선정적인 책을 쓸 필요가 없을 것임. 의사들은 의학의 진보를 배울 시간을 가질 수 있을 것임.
     * 무엇보다 행복과 삶의 기쁨, 여유가 있을 것임. 사람들은 수동적이고 공허한 오락만을 원하지 않게 될 것임. 전쟁에 대한 취향은 사라질 것임. 선한 천성이 더욱 필요한데, 이는 투쟁의 삶이 아니라 안락과 안전에서 나옴. 현대 생산은 모두에게 안락과 안전을 줄 수 있게 되었지만, 우리는 일부의 과로와 일부의 굶주림을 선택했음. 우리는 기계가 있기 전처럼 계속 열심히 살아왔지만, 영원히 어리석을 필요는 없음.

GN⁺의 의견

     * 이 에세이는 1932년에 쓰여졌지만, 현대 사회에 여전히 유효한 통찰력을 담고 있음. 기술 발전으로 노동 시간을 대폭 줄일 수 있게 되었지만, 자본주의 사회에서는 오히려 양극화만 심화되고 있는 현실을 꼬집고 있음.
     * 다만 인간에게 노동 자체가 주는 의미와 가치에 대해서는 간과한 측면이 있어보임. 이는 칼 마르크스 등 많은 사상가들이 지적한 바 있듯, 노동은 인간의 본질적 활동이며 자아실현의 계기이기도 함. 단순히 생계 수단으로서의 노동만 있는 것은 아님.
     * 저자가 언급한 대로, 여가를 보람되고 생산적으로 활용할 수 있는 교육과 문화가 뒷받침되어야 할 것임. 그래야 여가가 단순한 무위(無爲)나 퇴폐로 흐르지 않을 수 있음. 이를 위

        Hacker News 의견

     * 'In Praise of Idleness'라는 글이 1935년에 쓰여졌음에도 불구하고, 여가를 중요시하고 노동을 최고의 미덕으로 여기지 않는 서유럽의 미래상을 제시했음. 실제로 현대 서유럽은 이런 방식으로 살고 있음.
     * 보편적 기본소득(UBI)의 비전은 기본적인 욕구가 충족되면 사람들이 자아실현을 할 수 있다는 것임.
     * 구글은 과거에는 '휴식과 귀속(resting and vesting)'의 삶을 살며 큰 압박 없이 아이디어를 모색할 수 있었음.
     * 그러나 완전한 게으름은 효과적이지 않음. 복잡한 세상에서는 점진적으로 진전을 이루어야 큰 아이디어에 도달할 수 있음.
     * 음식이 충분한데도 살 수 없는 사람들이 있음. 미국에서 노숙자가 발생하는 이유는 무엇일까?
     * 우리는 '위대한 일'이나 '진보'를 위해 지구에 있는 게 아님. 그런 생각은 열정이 있는 소수나 우리를 위해 일하기를 원하는 엘리트들을 위한 것임.
     * 40세에 은퇴한 저자는 사회에 도움이 되는 방식으로 손을 쓰는 법을 모색하고 있음.
     * 경제 변화에 대한 논의는 강제나 궁핍의 위협 없이는 아무도 하지 않을 일에 초점을 맞춰야 함.
     * 러시아 소련의 사례는 이 글의 해결책이 심각하게 받아들여질 수 없음을 보여줌.
"
"https://news.hada.io/topic?id=14702","음향 공동 현상을 이용한 3분 만에 완성되는 콜드 브루 커피","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   음향 공동 현상을 이용한 3분 만에 완성되는 콜드 브루 커피

음향 기술을 활용한 콜드브루 커피 추출 시간 단축

     * UNSW 시드니의 엔지니어들은 음파를 활용하여 콜드브루 커피를 만드는 시간을 몇 시간에서 불과 몇 분으로 단축시킴
     * 콜드브루 커피 팬들은 보통 핫브루 커피에 비해 더 부드럽고 산미와 쓴맛이 적은 맛을 선호하지만, 완전히 우려내고 차가운 물만 사용하여 향을 서서히 추출하려면 12~24시간이 걸린다는 단점이 있음
     * 아침에 서둘러 카페인이 필요한 경우에는 적합하지 않음

초음파 반응기를 활용한 콜드브루 추출 가속화

     * UNSW 연구팀은 기존 Breville 에스프레소 머신 모델을 활용하고 자체 특허 음향 전달 시스템을 결합하여 콜드브루 추출 속도를 높이는 과제에 착수함
     * 이 시스템은 볼트 클램프 변환기를 금속 혼을 통해 추출 바스켓과 연결하여 표준 에스프레소 필터 바스켓을 강력한 초음파 반응기로 변환시킴
     * 반응기는 38.8kHz 주파수의 음파를 벽면의 여러 지점에 주입하여 반응기 내부에 음향 공동 현상이 발생하는 여러 영역을 생성함
     * 이 설정으로 추출 수율과 카페인 농도를 초음파 처리하지 않은 샘플에 비해 2배로 높일 수 있음

커피 향과 풍미를 빠르게 추출하는 초음파 공정

     * 연구 책임자인 UNSW 화학공학부 식품가공 엔지니어 Francisco Trujillo 박사에 따르면 초음파 공정은 음향 공동 현상으로 인해 커피 원두의 오일, 풍미, 향 추출 속도를 높임
     * 음향 기포가 분쇄된 커피 근처에서 붕괴될 때 커피 입자를 부수고 파쇄할 수 있는 충분한 힘을 가진 마이크로제트를 생성하여 커피의 향과 풍미 추출을 강화함
     * 이를 통해 일반적으로 12~24시간이 걸리는 공정 시간을 3분 미만으로 크게 단축시킬 수 있음
     * 연구팀의 목표는 이 공정을 일반 에스프레소 커피를 만드는 것처럼 쉽게 만드는 것이었음

커피 머신 제조사와 소비자들에게 유용한 기술

     * 이미 커피 머신을 제조하는 회사에서 이 기술을 활용할 수 있어, 소비자들이 집에서 3분 미만으로 초음파 콜드브루를 즐길 수 있게 됨
     * 커피숍과 레스토랑에서도 대형 반산업용 추출 장치와 냉장 공간 없이 주문형 콜드브루를 공급할 수 있게 되어 수요 증가에 대응할 수 있음

관능평가를 통한 품질 검증

     * 퀸즐랜드대학교 연구팀과 협력하여 1분/3분 동안 초음파 처리한 샘플과 24시간 저온 추출한 샘플을 비교 분석함
     * 향, 질감, 풍미, 여운 등을 평가한 결과 1분 초음파 처리 샘플이 24시간 콜드브루와 유사한 평가를 받았으나 향 강도와 다크 초콜릿 향은 약간 낮게 평가됨
     * 3분 초음파 처리 샘플은 24시간 콜드브루와 유사한 다크 초콜릿 향과 향 강도를 보였으나 약간 더 쓴맛이 있었음
     * 소비자의 선호도에 따라 1~3분 사이의 초음파 처리 시간이 24시간 콜드브루와 비슷한 커피를 만들기에 이상적임

식음료 산업에 파급력 있는 기술

     * 초음파 기술은 건조, 추출, 유화, 결정화 등 식품 산업 전반에 걸쳐 공정 속도와 효율성을 높이는 데 활용될 수 있음
     * 이 기술은 차 우려내는 공정 속도를 높이는 데에도 사용될 수 있음
     * 커피숍, 레스토랑, 심지어 가정에서도 주문형 콜드브루를 생산할 수 있게 되어 대형 추출기나 냉장 설비가 필요 없어짐

GN⁺의 의견

     * 커피 시장에서 콜드브루의 인기가 높아지고 있는 상황에서 초음파를 활용한 신속 추출 기술은 업계에 큰 영향을 미칠 것으로 보임. 특히 대형 커피 체인들이 이 기술을 도입한다면 콜드브루 시장을 선도할 수 있을 것임
     * 다만 전통적인 방식의 콜드브루를 고수하는 매니아층의 반발이 있을 수 있음. 기존 콜드브루와의 맛 차이를 더 면밀히 분석하고 개선해 나가는 노력이 필요해 보임
     * 가정용 커피 머신에 이 기술이 접목된다면 소비자들의 편의성이 크게 개선될 것임. 특히 바쁜 아침 시간에 맛있는 콜드브루를 빠르게 추출할 수 있게 되면 인기가 높아질 것으로 예상됨
     * 차(tea) 우려내는 공정에도 초음파 기술 활용 가능성을 언급한 점이 흥미로움. 전통차 시장에서도 신속 추출에 대한 수요가 있을 것으로 보임. 다만 차의 종류에 따라 최적의 음파 조건을 찾는 추가 연구가 필요할 것임
     * 초음파 혼을 기존 에스프레소 머신에 결합하는 방식은 범용성이 높아 보임. 다양한 제조사의 머신에 후착될 수 있도록 표준화된 설계가 뒷받침되어야 할 것임. 아울러 내구성, A/S 측면에서의 품질 관리도 중요할 것으로 보임

        Hacker News 의견

   요약:
     * 많은 커피숍에서 실제 콜드브루가 아닌 냉장 보관한 핫브루 커피를 콜드브루로 팔고 있음
     * 콜드브루를 데워달라는 요청을 거절하거나 비웃는 경우가 있음
     * 논문에 따르면 콜드브루가 핫브루보다 산도가 낮은지는 불분명함
     * 음파 캐비테이션 추출 방식이 콜드브루를 교반하는 것과 어떤 차이가 있는지 궁금함
     * Osma Pro라는 음파 캐비테이션 콜드브루 머신을 사용 중이라는 댓글
          + 해당 회사는 생존하지 못했고, 가격과 성능에 대한 불만이 많았음
          + 하지만 댓글 작성자의 머신은 잘 작동하며 매일 아침 사용 중
     * 콜드브루를 만드는 일반적인 방법
          + 프렌치 프레스에 찬물을 붓고 하룻밤 냉장 보관 후 프레스하여 드립 필터로 걸러내기
          + 에스프레소용 잘게 간 원두를 사용하는 것이 비결
          + 자세한 레시피 링크 첨부
     * 주얼리, 의치, 안경 등을 세척하는 초음파 기기를 사용하여 식물에서 향을 추출한 예술 프로젝트
          + 일반적인 침출 과정에 비해 매우 빠른 속도로 추출 가능
          + 여러 초음파 기기를 시도해 봤으며, 저렴한 중국산 제품도 성능은 좋지만 소음이 큼
     * 크라우드 펀딩으로 제작된 Osma라는 음파 캐비테이션 방식의 인스턴트 콜드브루 머신
          + 지금은 단종된 것으로 보임
          + 멋진 컨셉이었지만 성능이 좋지 않았다는 의견
     * 초음파 기술은 건조, 추출, 유화, 결정화 등 식품 산업 전반에 적용 가능
          + 오래 전부터 에탄올로 향을 추출하는 데 초음파 기술이 사용되어 왔음
     * 피에조 소자가 저렴하고 활용도가 높아 초음파 기술이 더 널리 사용될 것으로 보임
     * 전자레인지나 초음파 세척기를 사용하면 많은 일이 더 빨리 진행됨
     * 저렴한 초음파 세척조를 사용해 콜드브루를 시도해 볼 계획
"
"https://news.hada.io/topic?id=14718","'수중 자전거', 수영선수들에게 초인적 속도로 전진하는 힘 부여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  '수중 자전거', 수영선수들에게 초인적 속도로 전진하는 힘 부여

수중 자전거, 인간의 다리 힘으로 물 속에서 초인적인 속도 낼 수 있어

     * 프랑스 기업 Seabike가 사람의 다리 힘을 이용해 물 속에서 초인적인 속도를 낼 수 있는 수영 장치를 개발함
     * 크랭크로 구동되는 추진 프로펠러는 수중 외발 자전거처럼 생김
     * 작동 원리:
          + Seabike의 폴대를 적절한 길이로 연장한 후 벨트로 허리에 고정
          + 발로 페달을 찾아 크랭크를 돌리면, 허리 스트랩이 밀어주는 힘으로 약 38cm 크기의 프로펠러가 구동됨
          + 팔로 수영을 하면 공항 무빙워크 위를 걷는 것 같은 초현실적인 시각 효과가 나타남
          + 팔을 슈퍼맨 스타일로 펼치고 게으르게 나아갈 수도 있고, 코를 아래로 향하고 완전히 물속으로 들어가 페달로 움직이는 물고기처럼 행동할 수도 있음
          + 스쿠버 장비와 완전히 호환되어 물속 깊이 들어가 사용 가능
     * 프로펠러는 양방향으로 작동해서 거꾸로 뒤집어 페달 대신 핸들을 달고 팔로 구동할 수도 있지만 별로 재미는 없어 보임
     * 프로펠러 회전 속도가 느려서 수영장에서도 안전하게 사용 가능
     * 개방형 물에서 거리를 빠르게 이동하는 재미있는 방법
     * Seabike는 칸에서 자체 스노클링 투어를 운영하고 스노클 보드 및 스피어 피싱 키트와 함께 판매
     * 쉽게 보관할 수 있도록 분해 가능
     * 최소 1년 동안 생산되어 €290(US$310)부터 판매 중이지만 아직 큰 관심은 받지 못하고 있음
     * 제조사에 따르면 오리발을 착용한 수영 선수보다 훨씬 빠름

GN⁺의 의견

     * 전기 추진이 대세인 시대에 이렇게 단순하고 기계적인 장치가 새로운 시도로 보임
     * 다리를 어떻게 움직여야 할지 모르겠던 사람들에게 수영을 더 재미있게 해줄 수 있을 듯
     * 아쿠아 바이크 등 물 속에서 자전거 타기 운동을 하는 장비들이 있었는데, 이동성까지 갖춘 Seabike는 더 활용도가 높아 보임
     * 장시간 사용하려면 피로도가 쌓일 것 같고, 물살이 센 곳에서는 위험할 수도 있을 것 같음
     * 일반인이 사용하기에는 가격이 다소 높은 편이라 렌탈로 서비스하는 것도 방법일 듯

        Hacker News 의견

   요약하면 다음과 같음:
     * Seabike는 프랑스 회사로 알려졌지만 실제로는 이탈리아에 본사가 있는 Paritet SRL이 제조함. 프랑스어 웹사이트의 오류로 신뢰성에 의문이 제기됨.
     * CIA와 SEALS가 1950년대에 유사한 장치를 시험했으며, 1940년대에는 페달로 움직이는 밀수용 잠수함도 있었음.
     * MX-1 Sharrow Propeller라는 효율적인 새로운 프로펠러 디자인을 사용하면 더 좋은 성능을 낼 수 있을 것임. 이 프로펠러는 블레이드 대신 루프를 사용해 캐비테이션과 소음을 크게 줄임.
     * Seabike는 시속 3.6km로 움직일 수 있고 최대 7.9km까지 낼 수 있지만, 마이클 펠프스는 단거리에서 더 빠름.
     * 장거리용 프리다이빙 핀도 초인적인 속도를 낼 수 있으며 가격도 비슷함. 속도 비교가 있으면 좋겠음.
     * 범선 보트용 추진 장치로는 전기 모터가 무겁고 비싸며, Hobie의 Mirage Drive도 선체에 구멍이 필요함. 손으로 도는 프로펠러는 조종이 어려워 보임. 당분간은 노를 써야 할 듯.
     * 수영장에서 안전하게 사용할 수 있을 만큼 프로펠러 회전이 느리다고 하는데 의문. 물속에서 사이클링할 때는 케이던스가 낮아짐. 맨발로 탈 때 어떤 페달이 좋을지 궁금함.
     * 수면 위로 발만 보이게 가짜 발을 달아서 괴물처럼 보이게 하는 것도 재미있겠음.
     * 수영은 빨리 가기 위해서가 아니라 즐기려고 하는 것임. 이 장치는 어색해 보이고 균형을 잡기 위해 팔을 써야 할 듯. 하지만 만든 사람의 열정은 높이 살만함.
     * 수중 일륜차 같음. Y자 모양의 풀 바디 구조로 만들어 방향타와 보조 추진축 역할을 하게 하면 수중 삼륜차가 되겠음.
"
"https://news.hada.io/topic?id=14697","Apple, M4칩을 탑재한 신규 iPad Pro 및 Apple Pencil Pro 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Apple, M4칩을 탑재한 신규 iPad Pro 및 Apple Pencil Pro 공개

     * M4칩을 탑재한 11/13인치 두가지 모델
     * 11은 5.3mm 444g, 13은 5.1mm 579g로 역대 가장 얇은 제품
     * 두장의 OLED를 겹친 탠덤 OLED 기술을 적용한 Ultra Retina XDR 디스플레이
     * 나노 텍스처 글래스 적용으로 반사광 감소
     * 실버/스페이스 블랙 컬러 (100% 재활용 알루미늄)
     * 12MP 후면 카메라, 적응형 플래시를 통해 향상된 문서 스캔 성능
     * 전면 TrueDepth 카메라가 이제 가로형으로 배치. Center Stage 적용
     * Thunderbolt 3 및 USB 4를 지원하는 고성능 USB-C 커넥터 장착
     * Wi-Fi 6E, 5G 지원(셀룰러 모델, eSIM 적용)
     * Apple Pencil Pro
          + 배럴의 새로운 센서로 스퀴즈 제스처를 감지(꾹 눌러서 팔레트를 띄우거나 등의 액션 가능)
          + 자이로스코프 내장으로 애플펜슬을 돌려 도구를 조작 가능(브러시 방향 전환등)
          + 햅틱엔진 내장으로 피드백 가능
          + 나의 찾기 기능을 지원해서 잃어버렸을때 찾는 것을 도와줌
          + 자석 인터페이스로 페어링하고 충전/보관
     * 기존 Apple Pencil(USB-C)도 지원
     * 완전히 새로운 Magic Keyboard 및 Smart Folio
          + 플로팅 디자인
          + Function Key 열 있음
          + 알루미늄 팜레스트와 햅틱 피드백
          + 자석 방식으로 부착, 즉시 Smart Connector가 Bluetooth 없이도 전력과 데이터를 바로 연결
          + 블랙/화이트

   디스플레이랑 애플 펜슬이 눈에 띄는데...
   모든걸 가격이 압도하네요.

   한국 출시가격 11 1499000원부터, 13은 1999000원부터네요.
   나노 텍스처 글래스도 유상이라 적용하면 15만원 추가됩니다.
   그래서 13인치, 2TB, 나노텍스처 글래스, 셀룰러 까지 하면 3949000원 이네요.
   애플펜슬프로는 195000, 매직키보드 449000 까지.. 총 459만원 되겠습니다.

   아이패드가 이렇게까지 고사양이어야 하나 싶더라구요. 저한테도 오버스펙
   아이패드 에어가 기존 아이패드 프로 수준이니 에어나 미니를 써야겠어요 ㅜㅜ

   어떻게 활용하면 본전 생각 안날지 궁금하네요. 아무리 생각해도 고급 맥라인처럼 영상작업자들이 타켓일까요?

   소개 영상보면 로직프로나 파이널컷프로를 잘 사용하는 사람에게나 어울릴법한 기기인것 같아요.
   M시리즈 칩 적용된 아이패드 미니나 기다려야 겠어요
"
"https://news.hada.io/topic?id=14714","Peerdb Streams - 심플한 Postgres CDC(Change Data Capture)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Peerdb Streams - 심플한 Postgres CDC(Change Data Capture)

     * Postgres에서 발생하는 변경 사항을 Kafka, Redpanda, Google PubSub, Azure Event Hub 등과 같은 큐/메시지 브로커로 손쉽게 복제
          + 내부적으로 Postgres logical decoding을 이용하여 Postgres CDC를 활성화
     * 기존 CDC에 Debezium이 많이 사용되지만 학습곡선이 길고, 프로덕션에 적용하려면 기반 지식이 많이 필요함
          + 설정이 어려움(UI는 아직 개발중), 데이터 형식 및 변환 지원도 간단하지 않음, Kafka 외의 다른 메시지 브로커에는 동일수준의 기능을 제공하지 않음
     * PeerDB는 더 간단하면서도 포괄적인 Postgres CDC 구축을 목표로 함
          + 엔지니어가 최소한의 학습 곡선으로 며칠 내에 프로덕션급 Postgres CDC를 구현할 수 있도록
     * PeerDB UI로 간단히 설정 가능
          + 소스와 타겟 데이터 소스 설정(Postgres 와 Kafka 같은)
          + 처리량(테이블당) 및 대기 시간 등 CDC의 진행 상황을 모니터링
          + 로그 검색
          + 복제 슬롯 증가에 따른 슬랙/이메일 알림
          + 미러 튜닝, 일시 중지, 미러에 테이블 추가등의 고급기능도 제공
     * CLI도 제공. Postgres 호환 SQL 계층을 제공해서 사용자 친화적
     * Kafka로 CDC 스트리밍 전에 Row 단위 Transformation 적용
          + Lua 스크립트 이용
          + 개인 식별 정보(PII) 암호화/마스킹, 다양한 데이터 형식 지원(JSON, MsgPack, Flatbuffers, Protobuf, 등)
          + 스크립트 에디터와 유용한 템플릿들 제공
     * Kafka 외의 타겟을 위한 네이티브 커넥터 제공
          + Google Pub/Sub, Azure Event Hubs

   PeerDB - Postgres를 위한 ETL/ELT 플랫폼
   Debezium - DB의 변경사항을 스트리밍하는 오픈소스
"
"https://news.hada.io/topic?id=14685","Stack Overflow와 OpenAI, 파트너십 체결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Stack Overflow와 OpenAI, 파트너십 체결

     * Stack Overflow와 OpenAI가 새로운 API 파트너십을 발표
     * 이를 통해 개발자들은 Stack Overflow의 기술 콘텐츠와 OpenAI의 인기 LLM 모델을 함께 활용할 수 있게 됨
     * OpenAI 사용자들은 Stack Overflow의 OverflowAPI를 통해 검증된 기술 데이터를 활용하여 문제 해결에 집중할 수 있음
     * ChatGPT에서도 Stack Overflow의 신뢰할 수 있는 기술 지식과 코드를 직접 확인할 수 있음

협업 내용

     * OpenAI는 OverflowAPI를 활용하고 Stack Overflow 커뮤니티의 콘텐츠와 피드백을 통해 모델 성능을 개선할 예정
     * ChatGPT 내에서 Stack Overflow 커뮤니티에 대한 attribution을 제공하여 콘텐츠에 대한 참여를 높일 예정
     * Stack Overflow는 OverflowAI 개발에 OpenAI 모델을 활용하고, 내부 테스트를 통해 OpenAI 모델 성능을 최적화할 예정

파트너십의 목표

     * OpenAI의 Brad Lightcap COO는 이번 파트너십을 통해 사용자와 개발자 경험을 향상시킬 수 있을 것이라 언급함
     * Stack Overflow의 Prashanth Chandrasekar CEO는 OverflowAPI와 사회적 책임을 다하는 AI 시대를 위해, 검증되고 신뢰할 수 있는 데이터를 기반으로 한 새로운 기준을 세우는 것이 목표라고 밝힘

회사 소개

     * Stack Overflow는 5900만 개 이상의 질문과 답변을 보유한 세계 최대 개발자 커뮤니티로, Teams 제품을 통해 15,000개 이상의 조직이 지식 공유와 협업을 하고 있음
     * OpenAI는 AI 연구 및 배포 회사로, 인공 일반 지능이 인류에게 이롭게 작용하도록 하는 것이 미션임

GN⁺의 의견

     * 개발자들에게 검증되고 정확한 기술 정보를 제공하는 것은 매우 중요한 일임. 특히 최근 AI 기술의 발전으로 정보의 정확성과 신뢰성이 더욱 강조되고 있음
     * 하지만 OverflowAPI나 ChatGPT에서 제공되는 정보가 항상 정확하다고 볼 순 없음. Stack Overflow 커뮤니티에서 검증된 정보라 하더라도 오류나 편향된 정보가 있을 수 있음
     * 또한 기술은 계속 발전하기 때문에 과거의 정보가 현재에도 유효한지 항상 확인이 필요함
     * 개발자들은 여러 정보를 참고하되, 그 정보를 그대로 받아들이기보다는 비판적으로 검토하고 직접 테스트해보는 자세가 필요할 것으로 보임
     * AI 기술을 활용한 개발 생산성 향상이 기대되는 한편, 개발자의 역할이 축소되거나 기술에 과도하게 의존하게 될 우려도 있음. 개발자 개인의 역량 강화와 함께 조직 차원의 전략적 접근이 필요해 보임

   장기적으로 보면 잘 모르겠지만 당장은 gpt를 사용한 개발 생산성이 올라가겠네욤

   정보의 독점처럼 진행될까봐 걱정되긴 하네요.

   ChatGPT 이후 SO에 가는 일이 확 줄기는 해서 어찌 되려나 했는데, 결국엔 파트너십 체결로 가네요.
   근데 아래에 있는 해커뉴스 의견에 동의합니다

     SO와 OpenAI 모두 불행하게도 앞으로의 상황을 예견하고 있음. 진짜 ""파트너십""은 OpenAI가 ""우리는 협력하고 있다!""라고 말해 SO 파괴 비난을 피하는 것이고, SO는 약간의 체면을 세우고 돈을 벌 수 있음.

        Hacker News 의견

     * SO를 통해 관련 질문을 검색하고 답변과 코멘트를 읽는 데 시간을 들일 수 있음. 운이 좋으면 필요한 것을 찾을 수 있지만, 그렇지 않으면 질문을 적절히 표현하는 데 시간이 걸리고 답변을 기다려야 함. 반면 Chat-GPT에 질문하면 훨씬 짧은 시간에 도움되고 집중된 답변을 얻을 수 있음.
     * OpenAI가 SO의 정보로부터 이익을 얻고 있으며, SO 경험 개선을 도우면 좋겠지만 개발자들은 OpenAI가 정보를 훔치고 SO를 파괴한다고 생각함. OpenAI는 이를 개발자의 환심을 사는 저렴한 방법으로 보고 있음.
     * SO와 OpenAI 모두 불행하게도 앞으로의 상황을 예견하고 있음. 진짜 ""파트너십""은 OpenAI가 ""우리는 협력하고 있다!""라고 말해 SO 파괴 비난을 피하는 것이고, SO는 약간의 체면을 세우고 돈을 벌 수 있음.
     * SO에는 잘못된 정보도 많이 있음.
     * SO가 이렇게 하는 것은 이해할 수 있지만, Microsoft, OpenAI, Github, LinkedIn, Stackoverflow 등 자원이 통합되는 것은 불안함.
     * LLM이 코드를 완벽하게 만들지 못한다면 그들만의 Stack Overflow를 주어 서로 해결하게 하는 것도 흥미로울 것임.
     * StackOverflow에 REPL이나 replit을 통합하여 예제를 쉽게 재현할 수 있으면 좋겠음.
     * 보일러플레이트 라이브러리 관련 내용은 ChatGPT에 물어보지만, S/O에는 실제 사람들이 응답했음. Guido가 직접 Python 구현 관련 질문에 답변한 것은 대단한 일이었음.
     * SO에서 두 번째로 평판이 높은 사용자가 AI 도구로 수천 개의 답변을 작성했다고 인정한 것과 같은 주에 이 발표가 나왔다는 것이 재미있음.
     * Stackoverflow.co 도메인을 사용하고 있어서 이것이 진짜인지 확신이 없음.
"
"https://news.hada.io/topic?id=14723","Decker: 1비트 그래픽을 활용한 하이퍼카드의 재현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Decker: 1비트 그래픽을 활용한 하이퍼카드의 재현

Decker 멀티미디어 플랫폼 소개

     * Decker는 사운드, 이미지, 하이퍼텍스트, 스크립트 동작 등을 포함하는 대화형 문서를 만들고 공유하기 위한 멀티미디어 플랫폼임
     * 웹 브라우저에서 바로 사용해 볼 수 있음
     * HyperCard의 유산과 클래식 MacOS의 시각적 미학을 기반으로 함
     * HyperCard가 제공했던 단순성과 학습 용이성을 유지하면서, 깊은 실행 취소 기록, 스크롤 휠 및 터치스크린 지원, 더 현대적인 키보드 탐색, 대량 편집 작업 등 많은 미묘하고 명백한 사용성 개선 사항을 추가함

Decker로 할 수 있는 것들

     * 누구나 Decker를 사용하여 E-Zine 제작, 메모 정리, 프레젠테이션, 어드벤처 게임 제작, 1비트 픽셀 아트 낙서 등을 할 수 있음
     * 전체적인 ""ditherpunk"" 미학은 아늑하고, 약간 향수를 자극하며, 재미있고 독특한 창의적 제약을 제공함
     * 프로토타이핑 도구로서 Decker는 스케치하고 불완전한 접근 방식을 포용하도록 장려함
     * 완성된 데크는 독립 실행형 .html 문서로 저장되어 웹 브라우저에서 자체 실행되며 웹 페이지를 호스팅하거나 포함할 수 있는 모든 곳에서 공유할 수 있음
     * Decker는 MacOS, Windows, Linux에서도 네이티브로 실행됨

스크립팅 언어 Lil 소개

     * 보다 복잡한 프로젝트를 위해 Decker는 Lil이라는 새로운 스크립팅 언어를 제공함
     * Lil은 도구 및 게임 엔진에 내장하기 위해 널리 사용되는 명령형 언어인 Lua와 시계열 데이터베이스와 함께 사용되는 APL 계열의 함수형 언어인 Q의 강력한 영향을 받음
     * Lil은 배우기 쉽고 기존 프로그래밍 경험이 있는 사용자에게 거슬리지 않을 만큼 기존의 방식을 따르지만, 암시적 스칼라-벡터 산술 및 통합된 SQL과 유사한 쿼리 언어와 같은 즐거운 놀라움도 포함함
     * 몇 줄의 Lil로도 많은 작업을 처리할 수 있음

Decker의 다양한 기능들

     * Decker는 인터페이스 구축을 위한 내장 대화형 위젯 및 새로운 위젯을 정의하는 기능을 제공함
     * 사용자 정의 위젯과 정의는 시스템 클립보드를 사용하여 복사하고 붙여넣을 수 있으며, 텍스트를 공유하거나 저장할 수 있는 모든 곳에서 공유할 수 있음
     * 모든 데크는 다른 프로젝트에 재사용할 수 있는 재사용 가능한 부품들의 도구 모음임
     * Decker는 명령줄 친화적임. 소스에서 빌드할 때 Lil 독립 실행형 인터프리터인 Lilt와 함께 제공되어 Decker 문서를 ""헤드리스""로 읽고, 쓰고, 조작하고, 심지어 실행할 수 있음
     * Lilt는 Decker 자체보다 의존성이 훨씬 적기 때문에 실행 가능한 크로스 플랫폼 APE로 컴파일할 수 있어 어디서나 실행 가능한 셸 스크립트를 작성할 수 있음
     * POSIX AWK에서 실행되는 Lil 인터프리터도 있음
     * 데크는 Git 및 SVN과 같은 기존 소스 제어 도구와 잘 상호 운용되는 줄 지향 텍스트 형식으로 저장됨

Decker 사용 예제 및 모듈

     * ""Examples"" 섹션에는 Decker를 활용한 다양한 예제 프로젝트들이 소개되어 있음
          + Decker 가이드 투어, 5GUIs, CHIP-8 인터프리터, Draggable에 대한 모든 것, 사운드에 대한 모든 것, 블록 푸시 퍼즐 게임 Sokoban 등
     * ""Modules"" 섹션에는 Decker를 위한 다양한 플러그인 모듈들이 소개되어 있음
          + Plot: Decker를 위한 간단한 그래프
          + Zazz: Decker를 위한 애니메이션 도우미
          + Ease: Decker를 위한 Easing 함수
          + Dialogizer: Decker를 위한 비주얼 노벨 모달
          + Puppeteer: Decker를 위한 비주얼 노벨 스프라이트 애니메이션

문서 및 추가 리소스

     * Decker 레퍼런스 매뉴얼, Decker 문서 형식, Lil 프로그래밍 언어 등 각종 문서가 제공됨
     * Lil 언어를 10분만에 배우기, Lil 놀이터, Lil 퀵 레퍼런스 카드 등 Lil 학습을 위한 자료도 제공됨
     * GitHub에서 소스 코드와 버그 트래커를 사용할 수 있음
     * Decker는 MIT 라이선스에 따라 자유롭고 오픈 소스임
     * MacOS 및 Windows용 주기적 바이너리 릴리스는 Itch.io에서 사용 가능함
     * Itch 페이지에는 Decker에 대해 토론하고 Decker로 만든 프로젝트를 공유하는 커뮤니티 포럼이 포함되어 있음

GN⁺의 의견

     * Decker를 POSIX AWK로 구현한 것은 매우 흥미로운 시도임. AWK는 텍스트 처리에 특화된 스크립팅 언어로, Lil과 같은 스크립팅 언어를 구현하기에 적합한 기반 언어로 보임. AWK로 구현함으로써 여러 플랫폼에서 쉽게 이식 가능하고 실행할 수 있게 되었을 것임.
     * Decker의 저장 포맷을 줄 단위 텍스트로 한 것은 매우 현명한 선택으로 보임. 텍스트 기반 포맷은 Git과 같은 VCS와 호환성이 좋아서 버전 관리가 용이하고, Diff로 변경사항 추적도 가능함. 바이너리 포맷은 깨지기 쉽고 버전 관리가 어려운 단점이 있음.
     * Lil의 설계 철학이 흥미로움. Lua와 Q의 영향을 받았다고 하는데, Lua는 게임 스크립팅에 널리 쓰이고 Q는 DB 질의에 특화된 APL 계통 언어임. 두 언어의 장점을 조합해서 Lil만의 독특한 특징을 갖추게 한 것으로 보임. 특히 스칼라-벡터 연산이나 내장 쿼리 문법 등은 기존 언어에서 보기 힘든 기능임.
     * E-Zine, 메모, 프레젠테이션, 어드벤처 게임, 픽셀 아트 등 활용 범위가 매우 넓어 보임. 복잡한 앱부터 간단한 문서까지 다양한 분야에서 쓰일 수 있을 것 같음. 다만 이렇게 범용적인만큼 각 분야에 특화된 도구에 비해서는 기능이 부족할 수도 있을 듯함.
     * Classic Mac OS 스타일의 UI는 개인적으로는 좋아하지만, 현대 사용자들에게는 너무 복고적으로 느껴질 수도 있을 것 같음. 스킨 기능을 통해 모던한 테마도 제공하면 좋을 듯함. Windows나 Linux 사용자에게는 생소할 수 있는 인터페이스일 것 같기도 함.

        Hacker News 의견

     * 1-bit 그래픽에서 2-bit 그래픽으로 조금만 변경하면 사진 가독성이 크게 향상될 수 있음. 예시로 solar.lowtechmagazine.com은 최대 6가지 색상을 사용해 멋진 미학을 구현함.
     * Decker의 패키징에 대한 고민. Redbean처럼 Lua, SQLite 등을 하나의 파일로 묶어 zip으로 압축 해제하고 HTML, Lua 코드를 넣은 뒤 이름만 바꿔 배포하는 방식을 고려 중인지 궁금함.
     * Decker가 이전에 HN에서 몇 차례 소개된 바 있음. 3개월 전 191 포인트, 36개 코멘트. 2년 전 215 포인트, 88개 코멘트.
     * 직접 Decker를 사용해 보라는 권유. 데모 사이트 링크 제공됨.
     * Decker가 어린 시절 달콤한 추억을 떠올리게 함. 모바일 핀치 줌 기능만 있으면 좋겠다는 의견.
     * HyperCard의 가장 큰 단점은 Mac이 컬러를 도입했을 때 컬러를 지원하지 않은 것. 고등학교 때 학교의 Mac은 모두 컬러였으나 HyperCard는 그렇지 않았음.
     * NASA laserdisc가 HyperCard로 만든 셔틀 정보 네비게이션 시스템을 학교에서 사용했던 기억. 당시에는 크게 감동받지 못했지만 멋진 경험이었음.
     * Decker는 1-bit 그래픽이라는 점에서 HyperCard와 유사해 보이지만 사용법이 꽤 다름. 독특한 ""Lil"" 언어를 배워야 하고 HyperCard/MacPaint의 편의 기능이 많이 빠져있어 기대와 다를 수 있음. HyperCard 아티스트는 Infinite Mac 덕에 브라우저에서 계속 HyperCard를 사용할 수 있음.
     * Decker가 재미있다는 의견. HyperTalk 스크립팅을 지원하는 Wyldcard도 추천함.
     * Apple이나 MS가 이런 캐주얼 개발 도구 만드는데 더 노력하지 않는 이유가 궁금함. VB, 파이썬도 좋지만 작은 앱 만들기에 최적화된 도구가 있으면 좋겠음.
     * HyperCard에 대한 많은 사랑이 있음. 그 시대를 경험 못했지만 작고 유용한 도구를 만들 수 있게 해준 것 같음. 스프레드시트와 다른 방식으로 다재다능했던 듯.
     * 그 시대를 경험한 사람들에게 어떤 현대 도구가 그 감성을 잡아내는지 궁금함. 약간 어린 세대는 Delphi/VB, Flash에 대한 노스탤지어가 있음. 불완전했지만 창의성을 자극했던 도구들.
     * 도구는 훨씬 나아졌지만 그 과정에서 무언가를 잃어버린 느낌.
"
"https://news.hada.io/topic?id=14642","Stirling PDF: 자체 호스팅 가능한 웹 기반 PDF 편집 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Stirling PDF: 자체 호스팅 가능한 웹 기반 PDF 편집 도구
"
"https://news.hada.io/topic?id=14740","TCP_NODELAY 옵션의 지속적인 사용옵션의 지속적인 사용

TCP_NODELAY 설정의 중요성

     * 분산 시스템에서 지연 시간 문제를 디버깅할 때 가장 먼저 확인해야 할 것은 TCP_NODELAY 옵션의 활성화 여부임
     * 많은 분산 시스템 개발자들이 이 간단한 소켓 옵션을 활성화함으로써 지연 시간 문제를 빠르게 해결한 경험이 있음
     * 이는 기본 동작이 잘못되었거나 전체 개념이 구식일 수 있음을 시사함

Nagle 알고리즘의 배경과 문제점

     * 1984년 John Nagle의 RFC896에서 처음 제안된 Nagle 알고리즘은 TCP 헤더의 비용을 더 잘 상각하여 네트워크에서 더 나은 처리량을 얻는 것이 목적이었음
     * Nagle 알고리즘은 이전에 전송된 데이터에 대한 확인 응답이 수신되지 않은 경우 새로운 TCP 세그먼트 전송을 억제하는 방식으로 동작함
     * 그러나 이는 지연 ACK(delayed ACK)와 상호작용하여 문제를 일으킴
          + Nagle 알고리즘은 ACK가 수신될 때까지 더 많은 데이터 전송을 차단하지만, 지연 ACK는 응답이 준비될 때까지 ACK를 지연시킴
          + 이는 패킷을 가득 채우는 데는 좋지만 지연 시간에 민감한 파이프라인 애플리케이션에는 좋지 않음

현대 시스템에서 Nagle 알고리즘의 필요성

     * 현대 서버는 수백 마이크로초 안에 엄청난 양의 작업을 수행할 수 있으므로, 단일 RTT에도 데이터 전송을 지연시키는 것이 명확한 이점이 없을 수 있음
     * 대부분의 분산 데이터베이스와 시스템은 단일 바이트 패킷을 보내지 않음
          + 이는 전송할 데이터가 더 많고, TLS와 같은 프로토콜의 오버헤드와 인코딩 및 직렬화 오버헤드 때문임
     * 작은 메시지를 보내지 않는 것은 여전히 중요하지만, 이는 애플리케이션 계층에서 효과적으로 처리되고 있음

TCP_NODELAY 사용에 대한 의견

     * 지연 시간에 민감한 분산 시스템을 구축할 때는 걱정 없이 TCP_NODELAY를 활성화(Nagle 알고리즘 비활성화)해도 됨
     * 현대 시스템에서는 트래픽 및 애플리케이션 mix, 하드웨어 성능을 고려할 때 Nagle 알고리즘이 필요하지 않을 수 있음
          + 즉, TCP_NODELAY가 기본값이 되어야 함
          + 이는 일부 ""모든 바이트 쓰기"" 코드를 느리게 만들 수 있지만, 효율성을 중요하게 여긴다면 어차피 해당 애플리케이션을 수정해야 함

GN⁺의 의견

     * Nagle 알고리즘과 delayed ACK 간의 상호작용 문제는 프로토콜 설계가 얼마나 어려운지를 보여주는 좋은 사례임. 두 가지 합리적인 기능이 의도치 않은 동작을 만들어내는 상황은 시스템 설계자에게 익숙할 것임.
     * 애플리케이션 계층에서 작은 메시지 전송을 최적화하는 것이 일반적인 추세임. 효율적인 인코딩과 직렬화를 통해 불필요한 오버헤드를 최소화하는 것이 중요함.
     * Nagle 알고리즘의 목적이 네트워크 대역폭 최적화였다면, 오늘날에는 지연 시간 최소화가 더 중요한 요구사항임. 애플리케이션의 응답성이 사용자 경험에 직결되는 상황에서 불필요한 지연은 피해야 함.
     * 다만 TCP_NODELAY를 기본으로 하는 것이 모든 상황에 이상적인 것은 아닐 수 있음. 대역폭이 제한적인 환경이나, 전송 효율성이 지연시간보다 훨씬 중요한 시스템의 경우 선별적으로 Nagle 알고리즘을 활용할 필요가 있음.
     * 네트워크 프로토콜 설계 시 다양한 요구사항 간의 균형을 맞추는 것이 중요함. 범용 프로토콜의 기본 동작을 바꾸는 것은 신중할 필요가 있지만, 애플리케이션의 요구에 맞게 적절한 옵션을 선택하는 유연성도 필요할 것으로 보임.

        Hacker News 의견

   요약:
     * Nagle의 알고리즘은 배치 쓰기를 시도한 것으로, 하드웨어나 네트워크, 애플리케이션, 사용 사례에 상관없이 배치 쓰기가 더 나은 경우가 있음
     * 오늘날의 많은 컴퓨팅은 배치 쓰기를 사용하며, QUIC와 같은 새로운 고수준 프로토콜도 쓰기 배치를 수행하여 TCP의 독립적인 연결 및 오류 처리를 사용자 공간으로 이동시킴
     * 네트워크가 포화 상태가 되면, Nagle의 알고리즘은 QUIC 수정의 형태로 애플리케이션 코드에서 더 깊이 반환될 것임
     * Nagle의 알고리즘은 작은 패킷으로 인해 초당 패킷(PPS)이 포화 상태가 되는 경우에도 유용함
     * Nagle의 알고리즘은 일부 워크로드에는 잘 작동하지 않으므로, 엔지니어가 소켓을 만들 때 강제로 설정해야 하는 것이 좋음
     * TCP_QUICKACK 소켓 옵션이나 /proc/sys/net/ipv4/tcp_delack_min 및 /proc/sys/net/ipv4/tcp_ato_min을 사용하여 지연 ACK를 비활성화할 수 있음
     * 대역폭이 제한된 세상에서 TCP 패킷을 모든 바이트에 대해 보내는 것은 대역폭을 낭비하므로, Nagle의 알고리즘이 필요함
     * 애플리케이션 소스에 액세스할 수 없는 경우 TCP_NODELAY를 활성화하는 좋은 방법은 아직 없음
     * Go와 같은 최신 언어는 기본적으로 TCP_NODELAY를 활성화하므로 이 문제가 발생하지 않음
     * 애플리케이션이 TCP 스택에게 대화형 쉘이라는 것을 알려줄 수 있는 방법이 있다면, TCP_NODELAY를 기본적으로 꺼두고 해당 애플리케이션에 대해서만 켤 수 있어 오버헤드를 줄일 수 있음
"
"https://news.hada.io/topic?id=14667","헬다이버스 2, 150개 이상 국가의 스팀 구매 목록에서 제외","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   헬다이버스 2, 150개 이상 국가의 스팀 구매 목록에서 제외

# Helldivers 2가 150개국 이상에서 Steam에서 구매 제외됨

- PlayStation이 PC 플레이어가 PSN에 로그인해야 한다고 발표한 후, 현재 전 세계 많은 지역에서 PSN을 사용할 수 없어 Helldivers 2를 특정 국가에서 플레이할 수 없게 만듦
- 이는 Steam에서 인정되어 현재 177개국에서 게임을 구매할 수 없음

# Helldivers 2 커뮤니티의 반발

- PlayStation의 PSN 로그인 요구 사항 발표 후, Helldivers 2 커뮤니티는 18만 개 이상의 부정적인 리뷰를 남기며 반발함
- 플레이어들은 기준 2시간 제한을 초과했음에도 Steam에서 환불을 성공적으로 받았다고 보고함

# Helldivers 2의 Steam 상황 악화

- SteamDB Twitter 페이지에 따르면 Helldivers 2는 현재 100개국 이상에서 Steam에서 구매가 제외됨
- Helldivers 2의 SteamDB 페이지는 177개국에서 게임을 구매할 수 없도록 제한하는 내용으로 업데이트됨
- 개발사 Arrowhead는 이미 이 요구 사항에 동의하지 않으며 변경하기를 원한다고 밝힘
- 하지만 많은 사람들에게 Helldivers 2는 PC에서 플레이하는 것이 불가능해 보임

# GN⁺의 의견

- PSN 로그인 요구 사항은 특정 국가 플레이어들에게 불공정한 조치로 보임. 개발사도 이에 반대하고 있어 PlayStation이 결정을 번복할지 주목됨
- 이번 사태로 인해 Helldivers 2는 올해 최고 인기 게임에서 역사상 가장 큰 실추를 겪게 될 것으로 보임
- 플레이어 보호를 위한 조치라는 PlayStation의 주장과 달리, 오히려 플레이어들의 반발만 키웠음. 로그인 요구 사항의 실효성에 의문이 제기됨
- 개발사와 플레이어 모두 반대하는 만큼 PlayStation은 PC 플랫폼에서의 정책을 재고할 필요가 있어 보임. 그렇지 않으면 Helldivers 2 PC 버전의 실패가 불가피해 보임

        Hacker News 의견

     * Sony의 Playstation Store에서 게임을 구매하려고 했으나 사기 방지 화면을 통과하지 못해 오류가 발생함
     * 일부 국가에서는 Sony가 PSN 계정 생성을 허용하지 않아 불편함이 있음. 특히 PSN 계정이 필수인 디지털 PS5의 경우 더욱 그러함
     * PSN 계정을 다른 국가에서 생성하더라도 현지 결제 수단을 사용할 수 없는 등 불편함이 지속됨
     * Sony는 모든 국가에 동일한 수준의 서비스를 제공하거나, 지원되지 않는 국가에서 하드웨어를 판매할 때는 가격을 크게 인하해야 함
     * Helldivers 2의 경우 이전에는 선택사항이었던 요구사항을 추가하는 것은 어리석고 불법일 수 있음
     * Arrowhead는 Sony의 명령으로 인해 플레이어 기반이 무너지는 것을 지켜볼 수밖에 없는 처지임
     * EU는 언젠가 Microsoft, Sony, Nintendo를 규제해야 함. iOS가 벽으로 둘러싸인 정원이라면 콘솔은 감옥과 같음
     * 진정한 영향은 과대 보도되고 리뷰 폭탄으로 인해 과장되고 있음. 스팀 차트를 보면 플레이어 수에 눈에 띄는 타격이 없었음
     * Sony는 온라인 서비스를 강화하여 향후 개발을 용이하게 하기 위해 100개국의 진정한 플레이어 수를 보고 논란을 감수할 만한 가치가 있다고 판단했을 수 있음
     * 게임 회사와 Valve 간의 계약/이용 약관 위반 여부에 대해 의문이 제기됨. Valve의 변호사들은 소송에 대비하여 추가 작업을 해야 할 것임
     * 노련한 사용자들은 이번 사건이 신입 수준에 불과하다고 생각할 정도로 Sony Online Entertainment(SOE)가 악랄한 짓을 저질렀던 시절을 기억함
     * Sony가 DRM을 시행하기 위해 수백만 대의 컴퓨터에 루트킷을 은밀히 감염시켜 보안 취약점을 유발하고 거짓말을 한 뒤, 루트킷을 더 잘 숨기고 더 많은 보안 취약점을 초래하는 ""제거 프로그램""을 제공한 사건을 잊지 않고 있음
     * Arrowhead가 안타깝지만, 개들과 함께 눕는 자는 벼룩을 얻게 된다는 것을 알아야 함. 다음에는 그런 쓰레기 회사와 제휴하기 전에 두 번 생각할 것임
     * Arrowhead에 대한 지지가 놀라움. 그들은 Sony와 사업을 하면서 이를 허용했음. CEO가 ""우리는 그저 게임을 만들고 싶을 뿐""이라고 트윗한 것은 매우 약한 변명임
     * Sony가 모든 국가를 기본적으로 지원하지 않는 이유에 대해 궁금함. 작은 국가의 사람들이 게임을 구매하도록 허용하면 Sony가 잃을 것이 무엇인가?
"
"https://news.hada.io/topic?id=14754","세계, 최고조에 달한 '공해 정점' 지나간 것으로 보여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     세계, 최고조에 달한 '공해 정점' 지나간 것으로 보여

세계는 아마도 최악의 오염을 지나쳤음

     * 매년 수백만 명이 지역 대기 오염으로 조기 사망하지만, 이 수치를 상당히 줄일 수 있음
     * 건강에 해로운 지역 대기 오염 물질(질소산화물, 이산화황, 일산화탄소, 블랙카본, 유기탄소, 비메탄 휘발성 유기화합물 등)의 배출량이 암모니아를 제외하고는 모두 정점을 지난 것으로 보임
          + 암모니아는 거의 전적으로 농업에서 생산됨
          + 유기탄소와 NMVOCs는 아직 완전히 감소하지는 않았지만, 이전 최고치에 다시 도달하지는 않을 수도 있음
     * 미국과 유럽 등 부유한 국가에서는 배출량이 급격히 감소했고, 중국의 급격한 전환이 세계 수치의 큰 전환점이 되었음
          + 중국의 배출량은 지난 10년 동안 급격히 감소하여 공중보건에 큰 이득을 가져왔음
     * 저소득 및 중하위 소득 국가에서는 여전히 배출량이 증가하고 있으며, 도시의 오염 수준이 가장 높음
          + 이는 ""환경 쿠즈네츠 곡선""에서 꽤 정확하고 일관된 이야기를 하는 몇 안 되는 영역 중 하나임
          + 국가가 발전하고 에너지에 접근하며 산업화됨에 따라 대기 오염이 증가하다가, 에너지 빈곤을 해소하는 것을 침해하지 않으면서 오염 기준과 제한을 부과할 만큼 부유해지면 감소함
     * 이제 목표는 국가들이 미국이나 영국보다 훨씬 빠르게, 그리고 더 낮은 오염 수준으로 이 곡선을 통과할 수 있는지 보는 것임
          + 지난 50년 동안 오염을 덜 발생시키면서 에너지를 생산하는 방법, 효과가 있고 없는 기술, 초기에 비쌌던 솔루션의 비용 감소 등에 대해 많이 배웠기 때문에 가능할 것임
     * 이는 부유한 국가가 가난한 국가에게 오염시키지 말라고 하는 것이 아님. 주로 지역 대기 오염에 대해 이야기하는 것임
          + 오염의 부정적인 영향은 국내 인구가 느끼는 것임
          + 가장 가난한 국가들이 에너지에 접근하고 빈곤을 완화하며 발전하는 과정에서 대기 오염으로 조기에 사망하는 사람의 수를 제한하는 방법을 어떻게 보장할 것인가에 관한 것임

GN⁺의 의견

     * 개발도상국에서 경제개발에 따른 대기오염 증가가 불가피한 현상이라는 점은 안타깝지만, 동시에 선진국의 경험과 기술을 통해 이를 보다 빨리 극복할 수 있는 방안을 모색해야 함.
     * 대기오염이 가장 심각한 중국에서 최근 10년간 급격한 감소세를 보였다는 점은 고무적임. 중국의 사례를 잘 분석하여 개도국에 적용할 수 있는 정책과 기술을 발굴할 필요가 있음.
     * 대기오염은 기후변화와 달리 그 피해가 배출 지역에 직접적으로 나타나므로, 자국민의 건강을 위해서라도 개도국 정부가 적극적으로 대응할 유인이 있음. 선진국은 이를 지원하는데 주력해야 함.
     * 다만 농업에서 발생하는 암모니아 배출은 아직 감소하지 않고 있어 이에 대한 별도 대책 마련이 시급해 보임. 농축산업의 생산방식 전환을 유도하는 인센티브 설계 등을 고민해 볼 수 있겠음.

        Hacker News 의견

   요약:
     * MethaneSAT은 최근 인위적인 메탄 초대형 배출원을 발견하는데 성공함. 메탄의 지구온난화지수(GWP)는 20년 기준 약 70임.
          + 위성 사진에 따르면 가장 큰 메탄 누출은 러시아와 미국에서 발생함 (2022년).
          + 2022년 Nord Stream 파이프라인 사보타주로 40만 톤, 2015-2016년 Aliso Canyon 가스 누출로 10만 톤의 메탄이 배출됨.
     * ""오염 정점(peak pollution)""이라는 제목은 오해의 소지가 있음. 앞으로 오염 물질의 양이 실제로 감소할 것으로 오인될 수 있기 때문. ""배출 정점(peak emission)""이 더 정확한 표현임.
     * 현재 상황:
          + 오염 정점 - 도달함.
          + 석탄 정점 - 아직 도달하지 않음.
          + 석유 정점 - 아마도 2019년이었으나 코로나19의 영향으로 정확한 판단은 어려움.
          + 인구 정점 - 2013년에 도달함.
     * 온실 가스는 제외되었다는 점을 고려하면 낙관적인 제목임.
     * 질소산화물 배출 정점 도달로 옥스포드 거리 근처에 사는 개인에게는 상당한 변화가 있었음. 10년 전에는 세계에서 가장 높은 수준의 이산화질소 농도였으나 현재는 많이 개선됨.
     * 영구 화학 물질, 산업 사고, 방사능, 미세 플라스틱, 우주 쓰레기 등 여전히 해결해야 할 문제들이 남아 있음.
     * 세상의 문제에 주의를 빼앗기기보다는 자신의 삶을 만드는 데 집중했어야 한다고 후회하는 사람들이 많을 것임.
          + 버클리 음대 동기들 중 성공한 사람들은 강력한 집중력과 결단력을 가지고 방해받지 않았던 사람들이었음.
     * 출산율이 감소하는 한 이것은 사실이 아님.
     * 트럭을 공회전시키면서 여러 개의 가스 동력 잔디 깎기, 트리머, 잎 블로워를 사용하는 사람들에게 말해 보라.
     * 한편으로는 긍정적이지만, 다른 한편으로는 이렇게 오래 걸렸다는 것이 어리석음.
"
"https://news.hada.io/topic?id=14684","BlackHole: macOS용 오디오 루프백 드라이버","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BlackHole: macOS용 오디오 루프백 드라이버

     * macOS용 가상 오디오 루프백 드라이버
     * 애플리케이션 간에 추가 지연 없이 오디오를 전달할 수 있게 해줌

BlackHole의 주요 기능

     * 2, 16, 64, 128, 256 채널 버전 제공
     * 채널 수, 지연 시간, 숨겨진 장치 등을 사용자 정의할 수 있음
     * 8kHz부터 768kHz까지 다양한 샘플링 레이트 지원
     * 드라이버로 인한 추가 지연 시간 없음
     * macOS 10.10 Yosemite 이상 버전과 호환
     * Intel과 Apple Silicon용 빌드
     * 커널 확장이나 시스템 보안 수정 없이 동작

설치 및 제거 방법

     * 인스톨러를 다운로드하거나 Homebrew를 통해 설치 가능
     * 채널 수에 따라 2ch, 16ch, 64ch 중 선택
     * 제거 시에는 전용 Uninstaller 사용하거나 터미널 명령으로 수동 제거

사용 가이드 및 개발 가이드

     * Logic Pro X, GarageBand, Reaper 등 다양한 DAW에서 FaceTime, Google Meet, Skype, Zoom 등으로 연결하는 방법 제공
     * 시스템 오디오 녹음 및 애플리케이션 간 오디오 라우팅 방법 설명
     * 상용 프로젝트에 BlackHole을 통합하려면 라이선스 필요
     * Xcode에서 사용자 정의 빌드 시 커스텀 설정 가능 (채널 수, 지연 시간, 샘플링 레이트, 미러 디바이스 등)
     * CI/CD에 BlackHole 통합 가능

FAQ

     * BlackHole은 가상 드라이버라서 응용프로그램 폴더에는 나타나지 않음
     * 오디오를 듣는 동시에 BlackHole을 사용하려면 Multi-Output 장치 설정
     * BlackHole은 32비트 부동소수점 비트 심도 사용. 최대 24비트 정수까지 무손실
     * Multi-Output 장치의 볼륨은 macOS 특성상 조정할 수 없음
     * 각종 문제 해결 팁 제공

GN⁺의 의견

     * 가상 오디오 드라이버로서 macOS에서 애플리케이션 간 오디오 스트리밍에 매우 유용해 보임. Windows에는 VB-Audio의 가상 케이블 등 유사 제품들이 있음.
     * GPL 라이선스라 상용 프로젝트 적용에는 주의가 필요함. 상용 라이선스 정책이 어떤지 문의해 볼 필요 있어 보임.
     * 가상 오디오 장치 특성상 CPU 부하가 일부 발생할 수 있음. 고음질, 다채널 환경에서 성능 이슈가 없는지 검증이 필요해 보임.
     * macOS의 보안 정책 변화에 따라 향후 설치나 동작에 제약이 생길 가능성도 배제할 수 없음. 애플의 정책 변화를 지켜볼 필요가 있음.

   저도 작년에 이걸로 맥용 녹음 앱을 구현해서 잘 쓰고 있습니다.
   애플이 강제로 설치를 막지만 않으면 좋겠네요 ㅜㅜ

   이거 쓰는데 직관적이고 사용하기 편한 것 같아요

        Hacker News 의견

   해커뉴스 댓글을 요약하면 다음과 같음:
     * MacOS에 BlackHole과 같은 가상 오디오 라우팅 도구가 기본으로 포함되어야 함. 많은 사용자들이 BlackHole을 오디오 제작, 사운드 디자인, 스트리밍 등에 유용하게 사용하고 있음.
     * 팬데믹 기간 동안 BlackHole과 OBS, USB HDMI 캡처 동글을 활용해 Nintendo Switch로 Jackbox Party Pack 게임 나이트를 Zoom으로 진행한 사례가 있음.
     * BlackHole은 음성 채팅 앱에서 화면 공유 없이 높은 품질로 오디오를 전송할 수 있는 솔루션임. 튜토리얼 제작 시에도 유용함.
     * Apple Silicon에서는 커널 확장 설치가 어려워 이전에 사용하던 SoundFlower 대신 BlackHole을 사용하는 경우가 많음.
     * Windows에서는 Synchronous Audio Router가 유사한 기능을 제공함.
     * VB-Cable도 BlackHole과 유사한 가상 오디오 케이블 소프트웨어로, 스튜디오 마이크 입력을 OBS로 라우팅해 필터링한 후 VoIP 소프트웨어에서 사용하는 등의 활용 사례가 있음.
     * Element와 함께 사용하면 멋진 오디오 라우팅이 가능함. Ableton Live에서 8개 트랙을 optical 인터페이스로 전송하는 라이브 세트 작업 사례 소개.
"
"https://news.hada.io/topic?id=14699","PHP는 더 이상 형편없지(Suck) 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PHP는 더 이상 형편없지(Suck) 않아요

     * ""PHP는 형편없어요(PHP Sucks)"" 라는 대부분의 비판은 2012년 이후의 PHP를 보지 않았기 때문
     * PHP 5.4 이후로 많은 변화가 있었고, 그 이후의 언어 변화를 살펴볼 필요가 있음

PHP 5.4 이후의 주요 변화

     * Traits (PHP 5.4)
          + 상속 대신 컴포지션을 사용할 수 있게 해줌
          + 모든 클래스에 포함할 수 있는 traits를 가질 수 있음
     * 단축 배열 구문
          + array()를 쓸 필요 없이 대괄호를 사용할 수 있음
     * 배열 구조 분해
          + 배열을 임시 변수에 할당할 필요 없이 직접 변수에 할당할 수 있음
     * 일급 가변 인자 함수
          + ... 구문을 사용하여 원하는 만큼의 인자를 함수에 전달할 수 있음
     * 제너레이터
          + 메모리 집약적인 작업을 메모리 효율적으로 수행할 수 있음
     * 익명 클래스
          + 새 파일을 만들 필요 없이 새 클래스를 만들 수 있음
          + 다른 클래스와 마찬가지로 인터페이스를 구현할 수 있음

PHP 7 이후의 주요 변화

     * 후행 쉼표
          + 함수 호출이나 메서드 호출에 후행 쉼표를 추가할 필요 없음
     * 화살표 함수
          + JavaScript와는 약간 다르지만 언어에 좋은 추가 기능임
     * Null 병합 연산자
          + 값을 할당하기 전에 null 체크를 할 필요 없음
     * Null 병합 할당 연산자 (PHP 7.4)
          + null 병합 연산자를 단축하는 할당 연산자도 있음
     * Weak 맵 (PHP 7.4)
          + 배열보다 메모리에 훨씬 더 좋음
          + 객체를 키로 사용할 수 있음

PHP 8이후의 변화

     * Null 연쇄 연산자
          + 메서드를 호출하기 전에 null 체크를 할 필요 없음
     * 명명된 인자
          + 선택적 인자를 건너뛰기 위해 null을 사용할 필요 없음
     * 속성 (어노테이션)
          + 클래스, 메서드, 인자 또는 속성에 어노테이션을 추가하는 데 사용할 수 있음
     * 개선된 오류 처리
          + false를 반환하기 위해 예외 변수가 필요하지 않음
     * Match 문
          + 길이가 긴 switch 문 대신 더 간결하고 읽기 쉬운 방법
     * Enums (PHP 8.1)
          + 값과 메서드가 있는 enum 클래스를 만들 수 있음
          + 타입 힌트로 사용할 수도 있음
     * 타입 안전성
          + 타입 지정된 인자, 반환 타입, 공용체 타입, 교차 타입 등을 가짐
          + enum에 대한 타입 힌트도 사용할 수 있음
     * 생성자 프로퍼티 승격 (PHP 8.0)
          + 장황한 생성자는 이제 그만
          + 보일러플레이트 코드를 줄이는 데 도움이 됨
     * 읽기 전용 프로퍼티 (PHP 8.1)
          + 프로퍼티를 읽기 전용으로 표시하는 키워드 선언 가능

성능

     * PHP 5.6에서 7로 넘어가며 400%의 성능 향상
     * PHP 7에서 8로 넘어가며 20%의 성능 향상
     * 대부분의 웹 개발 용도에 충분한 성능을 제공하며, 이보다 더 특수한 용도라면 특화된 언어 사용 권장

결론

     * PHP는 죽지 않았고, 더 이상 최악이 아님. 2012년 이후 언어가 상당히 변화했으며, 이에 대한 의견을 수정할 때가 되었음.
     * traits, 단축 배열 구문, 배열 구조 분해 등 다양한 기능의 도입으로 PHP는 보다 효율적이고 읽기 쉽고 유지 관리하기 쉬운 언어가 되었음.
     * 여기에 오류 처리 개선, 속성 도입, 오랫동안 기다려온 enums의 도착 등을 더하면 PHP가 웹 개발을 위한 견고하고 신뢰할 수 있는 선택으로 발전했음이 분명함.
     * 따라서 누군가 PHP가 최악이라고 말한다면, 그들은 과거에 머물러 있을 뿐이라고 자신 있게 말할 수 있음.

GN⁺의 의견

     * PHP의 언어적 변화를 보면 더 이상 과거의 PHP가 아님을 알 수 있음. 하지만 아직도 많은 개발자들이 과거의 인식에 머물러 있는 듯함.
     * 트레이트, short array 문법, 비구조화 할당 등 코드를 더 간결하고 가독성 있게 만드는 기능들이 많이 추가되었음. 이는 유지보수성 향상에도 기여할 것으로 보임.
     * 제너레이터나 weak map 등 메모리 효율성을 개선해주는 기능들도 눈에 띔. 대용량 데이터 처리 시 유용할 듯함.
     * Enum이나 타입 안전성 개선 등 언어적 완성도를 높이는 변화도 있었음. 클린 코드 작성이 더 수월해질 것으로 기대됨.
     * 무엇보다 PHP 8에서의 성능 개선이 인상적임. 실제 벤치마크 결과 NodeJS, Go에 버금가는 성능을 보여준다고 함.
     * 하지만 레거시 PHP 프로젝트를 현대화 하는 것은 쉽지 않은 과제임. 코드 마이그레이션에 많은 리소스가 들 수 있음.
     * PHP는 여전히 워드프레스 등 많은 오픈소스 생태계의 기반 언어임. 단순히 언어적 특성만 보고 PHP의 가치를 폄하하기는 어려울 듯함.

   php가 왜 아직도 suck한지 잘 알 수 있는 댓글들이네요
   냄새나지 않는 똥이 된 것을 축하합니다.
   기회가 되면 똥 대신 다른것도 먹어보시길 바랍니다 : )

   의견이 굉장히 많이 올라오네요. 저는 php 개발자가 아닙니다. 커뮤니티에서 조장한 php 혐오론을 보고 주니어 분들이 그런 감정이 생기고 악순환이 반복되는 것 같네요. 장인은 절대 도구 탓을 하지 않습니다. php 개발자 분들 항상 화이띵입니다

   php개발자로써.. 다른 언어 쓰는 사람들의 오만함은 정말 욕이 나올정도.
   왜 그리 남이 쓰는 언어를 까내리지 못하는지 이해불가
   나도 php개발하다 자바로 전향도 해보고 파이썬도 해보고 nodejs도 해보지만..
   각자 언어마다 이해안되는 철학이나 불편함이 다 있는데 왜 php만 욕을 못해 안달인지 이해불가..
   씨발 왜 그러는지ㅡ
   php의 버그라고 불리는 상황들 실제로 개발하다보면
   그걸 몰라도 거의 안쓰이는 구문 혹은 구조들이고
   그러런 레거시는 다른언어도 다 어느정도 있는거고.
   진절마리나네요

   업으로 삼고계신 기술에 대해 논한것에 대해 사과드립니다. 저의 의도와 상관없이 결과적으로 koxel님의 기분을 상하게 만들었으니 그것은 저의 책임입니다

   다만 저는 날코딩이 전부인 줄 아는 php 개발자들 사이에서 주니어로 구르다 느꼈던 점을 썼을 뿐입니다. 어떤 php 개발자들은 그 베스트 프랙티스가 변하는 것조차 인정하지 않고 거부합니다. 그점이 답답했습니다. 저는 현재 상황상 프론트엔드 업계 일을 주로 하고 있지만 자바스크립트 개발 방법에 대해서도 얼마든지 비판할 점은 있다고 생각합니다. 어떤 언어가 절대적인 우위에 있다고 생각하지 않고 상황에 따라 다른 기준이 적용되어야 한다고 생각합니다

   야래 보니 초짜 개발자가 잘못된 프로그램을 짤수 있게 허용되는 구조가 문제라는데
   그런건 다른 언어도 다 마찬가지 아닌가.
   언어마다 베스트 프랙티스라는게 있는 이유가 그런 것인데..

   워드프레스 기준으로 PHP 5.6 이하버전 사용율은 5% 이하입니다.
   https://wordpress.org/about/stats/
   그래도 2023년 워드프레스는 PHP 설치 최소기준을 7.0 으로 올렸죠

   개인적으론 PHP가 싫은 정도랑 Javascript가 싫은 정도랑 거의 비슷하네요.
   얘네 둘에 비하면 Python은 그나마 선녀로 보일 정도

   캐리어 시작을 php 로 했고, 캐리어 하이도 php 를 통해서 찍은듯 합니다.
   지금은 다른 언어로 밥 벌어먹고 살지만

   아직 사이드프로젝트나 취미는 가끔 php 꺼내봅니다.

   마찬가지로 매력있는 친구인것 같아요
   물론 요새 여러 대안들이 나와서 좀 아쉽긴 하지만

   laravel vapor 괜찮습니다

   저는 지금 웹개발을 하고 있지는 않습니다만... 예전 추억이.

   많은 분들이 PHP를 싫어하시는군요. 저도 PHP를 한 3년 정도 써보고, 언어로써 정말 매력이 떨어진다는 생각을 쭉 했었고, RoR 을 접하며, Ruby라는 언어의 우아함에 푹 빠지게된 이유를 PHP가 제공했다고 봐도 될것 같습니다.

   글너데, PHP가 처음 나왔을때는, 엄청났어요! 그때는 CGI로 게시판을 짜던만들던 시절이었거든요. 그때 PHP가 주는 기민함은 센세이션이었죠. PHP이 웹개발에 큰 지평을 열었떤건 사실같습니다. :)

   하지만, 새술은 새부대에...

   여전히 언어로서의 PHP는 최악의 언어이지만,

   플랫폼(적절한 표현을 찾기 힘드네요)으로서의 PHP는 생각보다 괜찮다고 생각합니다.
   특히 MVP~성장초기의 프로젝트에서, 추후 다른 언어/플랫폼/프레임워크(일반적으로 스프링)로 넘어갈거라고 못 박아두고나면,
   그 이후론 언어의 결함은 중요한게 아니게 되고, PHP의 장점만이 눈에 들어옵니다.

   중단없이 파일을 수정하는 것 만으로도 배포할 수 있기에 유저 피드백을 더 빠르게 반영할 수 있고,
   PHP(-FPM)이 다른 것들보다 특출나게 잘하는 알뜰살뜰한 요청 대기열 처리는 예상치 못한 대량의 트래픽(단기간 성장)에 잘 버티게 해주고,
   버그가 있어도 앱 전체가 죽지 않고, 메모리 누수에서도 어느정도 자유로운만큼, 비즈니스 로직+a 에 집중할 수 있고,
   PHP를 한번도 사용해보지 않은 다른 언어들이 주 언어인 개발자들도 일주일 들여다보면 웬만큼은 쓸 수 있는 쉬운 난이도까지...

   이 모든건 규모가 커지면 (심각할지도 모르는) 단점으로 돌아오겠지만...
   적어도 MVP 규모에서, 유저 피드백을 받아 후다닥 반영하고, 빠르게 성장해야 하는 상황에서 PHP만큼 적합한 선택지가 있을까요?
   거기에 PHP의 도입 결정 시 '사이즈가 커지면 다른 언어로 이전하겠다'고 이미 마음 먹은 상태니까, 진지하게... Why not?

   저는 좀 생각이 다른게 혼자 MVP를 만들어내려면 DB 스키마, WAS, UI 세가지를 최소한의 코딩으로 구현하는 도구가 필요하다고 생각합니다. 그리고 PHP의 대안으로 루비온레일즈와 장고라는 훌륭한 선택지가 있다고 생각합니다

   장고의 경우 액티브 레코드 패턴(참 낡은 단어네요)으로 모델 클래스만 정의하면 DB 스키마랑 그럭저럭 쓸만한 백오피스용 CRUD UI가 나옵니다. 인증, 접근제어, 양식 검증, DB 마이그레이션 툴, 테스트 도구 등 최소한의 웹서비스 개발을 위한 도구가 제공됩니다. 개인적으로는 2000년대 후반에 웹 프로그래밍을 시작하고 나서 장고만한 생산성을 경험해본 적이 없습니다. SPA 방식이 유행하고 프론트엔드와 백엔드 직군이 나눠진 이후로는 오히려 생산성이 줄어든 느낌마저 듭니다. 최소한 두명의 작업자가 사용자 플로우를 이해해야하고 프로토콜을 맞춘 상태에서 작업해야 작업을 병렬적으로 수행할 수 있기 때문입니다

   PHP가 웹앱용 템플릿 언어를 표방하고 싶었다면 언어 수준에서 웹 취약점을 방어하는 수단을 제공했어야 한다고 생각합니다. 모던 PHP 스타일이 프레임워크 개발방식을 채택한게 그 증거라고 볼 수 있을 것 같습니다.

   그리고 php는 범용 스크립트언어로 표방한지 오래입니다.

   왜 언어랑 프레임워크랑 비교하시는지 모르겠습니다.

   루비온레일즈와 장고 컨셉의 라라벨이있는데요.

   모던php가 더이상 모던하지 않고 php의 표준 개발방법으로 정립될때, 그리고 워드프레스를 포함한 CMS들이 모던php를 채택했을때 php가 안전한 범용언어로 사람들에게 인식될 거라 생각합니다. 신뢰를 복구하는 것은 일반적으로 신뢰를 깨는 것보다 노력이 많이 듭니다

   하위호환성 유지라는 명목으로 입문자들이 PHP의 기본기능만 가지고 안전하지 못한 웹서비스를 만들수 있도록 허용하기 때문입니다. PHP tutorial로 검색한 사이트 상위 5개중 XSS를 방어하기 위해 초전역변수(superglobal)의 내용을 출력할때 HTML 이스케이프를 적용해야 한다는 내용을 포함시킨 사례는 PHP 공식 사이트 이외에는 없습니다. 그들이 공식적으로 제공하는 가이드가 웹개발의 내용을 담고 있으니 PHP는 언어와 프레임워크 두 가지의 역할을 하고 있는 것 아닐까요?

   초전역변수의 이름으로 HTTP의 여러 요소들이 기본 제공되고 있는 점에 대해서는 어떻게 생각하시나요? 저는 언어가 표현하고 있는 내용에 따라 범용성의 범위와 사용처가 결정된다고 생각합니다.

   예로 들어주신 $_GET, $_POST 같은 초전역변수는 PHP를 CGI, SAPI 모드로 사용했을 때 노출되는 값입니다. PHP를 CLI로 사용할 경우 해당 값은 노출되지 않습니다.
   그러한 초전역변수는 PHP를 실행시키는 런타임인 PHP-CGI, PHP-FPM 등이 노출시키는 API의 일종이지, 언어로서의 PHP 스펙이 아닙니다.
   이전에 언급된 ""템플릿 언어를 표방하는 PHP"" 도 엄밀히 이야기하면 PHP가 아닌 PHP의 런타임 중 하나인 CGI가 그렇게 활용되기를 원하는 것이지요.

   마찬가지로, 취약점이라 이야기되었던 수 많은 PHP 내장 함수들도 PHP의 익스텐션이 노출시키는 함수들이지, PHP라는 ""언어""가 가진 기능이 아닙니다.

   말씀하신대로라면,
   자바스크립트는 브라우저와 통신하기 위해 브라우저가 노출하는 API를 사용하는, 또 애초에 그럴 목적으로 설계된 언어이자 프레임워크가 되는 것이고,
   자바는 언어이지만 사실상 JDK의 수 많은 API들을 활용하기 위해 사용되는 프레임워크가 되는 것이고,
   여타 다른 모든 언어들도 언어 그 자체의 스펙과는 관계 없이, 표준 라이브러리, API를 제공한다면 전부 프레임워크라고 보아야 할테니까요.

   물론 뗄레야 뗄 수 없는 관계임은 맞으나, 이러한 부분을 가지고 PHP가 프레임워크라고 주장하기엔 설득력이 많이 떨어집니다.

   그리고 2024년 5월 현재까지도 워드프레스 코어 프로젝트에서 XSS가 패치되고 있는 것을 보면 온전히 PHP 문법 차원의 개선으로는 XSS를 막을 수 없는 것으로 보입니다.

   프론트엔드 프레임워크, 서버사이드 템플릿 엔진 등은 데이터로 렌더링할 수 있는 모든 내용에 일괄적으로 HTML 이스케이프를 적용하며, 명시적으로 이스케이프를 해제할 때에만 안전하지 않은 방식으로 출력을 생성합니다. PHP에는 그런 처리를 일괄적으로 적용할 수 있는 합의된 방법이 없습니다. echo나 print 문이 이스케이프를 기본 지원했다면 당장에는 동작하지 않는 코드가 속출했겠지만, 장기적으로는 많은 사람들이 이스케이프를 누락시키는 실수를 줄일 수 있었을 것입니다.

   네, 저는 언어와 실행환경을 분리해서 보는 시각에 동의하지 않고 어떤 식으로든 실행환경이 언어에 영향을 준다고 생각합니다. 자바스크립트의 경우 nodejs와 브라우저 두개의 실행환경이 있고, 파이썬에는 많은 구현체들이 있지만 cpython이 우세한 것으로 이해하시면 되겠습니다

   원글의 주제가 문법적인 개선에 한정되어 있는데 저는 이런 프레임보다 조금 더 넓은 범위의 이야기를 하고 싶었습니다

     또한 라라벨은 오픈소스 기여자들이 아니라 라스무스나 zend같은 회사에 의해서, 2011년이 아니라 2007년쯤에 개별 프로젝트가 아니라 공식 언어 기능으로 나왔어야 할 물건이라 생각합니다. 파이썬3가 하위호환성을 일부 포기한 것때문에 도입에 차질이 있었지만 PHP도 5버전 즈음에 대규모의 하위호환성 정리를 했어야 한다고 생각합니다. PHP의 변화는 시대의 흐름보다 항상 시차가 있는 것 같기도 합니다

   위 댓글에 대한 답도 겸합니다.

   말씀하신 관점에서 봤을 때 PHP를 일종의 웹 프레임워크로 취급할 수 있겠다는 생각은 드네요.
   그렇지만 예시로 든 XSS 필터, 이스케이프 등등을 포함한 여러 기능들을 PHP가 기본적으로 제공해야 한다고는 생각하지 않습니다.

   제일 보편적인 PHP-FPM과 Django, RoR는 동일한 포지션이 아닙니다. Flask, Sinatra, Express에 가깝지요.
   PHP-FPM은 라우팅(디렉토리 기반), 요청 해석($_GET, $_POST, $_FILE, $_COOKIE), 응답 전송(echo, print), 세션관리($_SESSION) 이상의 기능을 담당하지 않습니다.

   Flask는 다른가요?
   플라스크에서 HTML 이스케이프된 응답을 반환하려면 단순히 return 만으로 해결되지 않습니다.
   https://flask.palletsprojects.com/en/3.0.x/quickstart/#html-escaping

   Sinatra는 다른가요?
   마찬가지로 별도의 이스케이프 라이브러리를 사용해야 합니다.
   https://sinatrarb.com/faq.html#escape_html

   Express는 다른가요?
   이것도 마찬가지로 별도의 이스케이프 라이브러리를 사용해야 합니다.
   https://expressjs.com/en/resources/middleware.html

   예시로 든 라이브러리 모두 그 프레임워크에서 공식적으로 제공하는 라이브러리가 아닙니다.
   그런데 왜 PHP는 꼭 PHP에서 공식적으로 그러한 기능을 제공해야 하나요?

   ""어떤 미친 프레임워크가 요청 데이터를 초전역변수로 노출시키냐, 설령 보안 상 문제가 없더라도 이건 유저에 대한 예의가 아니다!"" 같은
   이미 많은 사람들이 이야기하는 이유로 PHP가 쓰레기다 주장한다면 모르겠는데,
   말씀하신 ""PHP의 기본 기능이 풀스택 프레임워크가 제공하는 것만큼 충분하지 못하다"" 라는 이유는... 최소한 저는 동의하기 힘듭니다.

   Express를 좀 더 모던하게 체계적으로 사용하기 위해 Nestjs 라는 친구가 만들어진 것처럼, PHP를 좀 더 모던하게 체계적으로 사용하기 위해 Laravel 이라는 친구가 만들어졌다 생각하면...
   다른 프레임워크(언어)와 비교되는 단점보다 제 원 댓글의 주장처럼 PHP(-FPM) 특유의 장점이 더 와닿지 않을까요?

   옛 기억을 더듬어보니 최소한 slim twig 조합만 보편화되어 있었어도 프로젝트에서 했던 PHP 실수들을 줄일 수 있었을 것 같습니다. 물론 다른 PHP 개발자들이 PHP 날코딩에 익숙해 있었기 때문에 그 당시에는 도입할 수 없었구요. 다행히 PDO는 표준 라이브러리에 있어서 SQL 인젝션에 대한 대비는 할 수 있었습니다

   원 댓글에서 언급하신 버그 영향도 제한이나 처리성능에 대해서는 딱히 부정이나 긍정 의견이 없습니다. 있으면 좋은 기능이라고는 생각합니다만, 처리량 폭증이나 메모리 사용량 문제는 성장단계에서 최소 한번은 고민해야할 문제이기 때문에 그런 문제가 명시적인 형태로 가능한 빨리 나오면 좋다고 생각합니다

     물론 다른 PHP 개발자들이 PHP 날코딩에 익숙해 있었기 때문에 그 당시에는 도입할 수 없었구요.

     PHP로 개발을 할 줄 아는 사람들이 바뀌는게 제일 시간이 걸리고 어렵기 때문에

   개인적으로 PHP 자체는 문제가 없거나, 충분히 대응할 수단이 있거나, 또는 다른 언어에서와 같이 납득할 수 있는 이유로 생겨난 차이 정도만 있다고 보는데, 말씀하신 인력 문제... 이게 사실상 제일 큰 문제가 아닐까 싶네요.

   PHP를 진지하게 사용할 수 있는 개발자들은 이미 오래전의 PHP에 학을 떼고 PHP에서 탈출한 지 오래고,
   남아있는 대부분의 사용자들은 PHP가 아무리 발전해도 제대로 봐 주지 않는, 또는 제대로 봐 줄 여력이 되지 않는 사람들...

   PHP가 적합하다 생각하는 MVP+a 의 프로젝트엔 전자의 경력자들이 참여할 이유가 없고,
   설령 참여한다고 해도, PHP를 선택하지 않거나, PHP를 선택하더라도 후자의 유저가 한두명 끼는 순간 엉망진창이 될거라...ㅋㅋ

   적어도 국내에선 만족스러운 PHP 개발 가능 인력을 구하는 것 자체가 쉽지 않네요.
   그렇게 또 PHP는 선택지에서 제외되고, 더더욱 평균적인 인력 수준이 낮아지고, 그게 무한 반복되며 악순환을 만들어 나가는 것 같습니다.
   ~~이렇게라도 계속 약을 팔아 소규모 1~3인 프로젝트에서만이라도~~ 제대로 된 PHP 프로젝트를 시도하는 케이스가 늘어나야 악순환이 끊기지 않을까 생각합니다.

   그러는 저도 사실 PHP가 만들어주는 수익이 그리 크지는 않네요. 만족스러운 인력 수급이 너무 힘드니까 PHP를 메인 스택으로 가져갈래야 가져갈 수 없는 현실...

   범용 언어와 PHP 사이에는 HTML 페이지를 만들어내는 방식의 차이가 있기 때문입니다. Flask는 최소한 1.0 버전을 출시할 때 부터 사람들이 템플릿 엔진을 사용하도록 장려하였고 템플릿 엔진에 의존하도록 설계되었습니다. HTML 페이지와 서버사이드 데이터 사이를 의도적으로 격리하고 템플릿 단위의 작업을 지원해오고 있습니다. 해결하고자 하는 문제의 특징과 사람들의 사용 습관이 고려되어 있다고 생각합니다.

   반면에 PHP는 표준 출력이 곧 페이지의 일부가 되며 서버사이드 데이터와 HTML 페이지 사이의 경계가 모호합니다. print하는 것이 결과 페이지에 그대로 들어가며 이스케이프를 명시적으로 개발자가 수행해야 합니다. htmlcharacterescapes 함수를 모든 외부 데이터에 붙여야한다는 설계는 사람들에게 잘 받아들여지지 않았습니다. 사람들은 무의식적으로 템플릿을 원했지만 PHP에는 HTML 페이지를 만들어낸다는 사용자의 목적이 고려되지 않은 것으로 보입니다.

   표준 라이브러리 내지는 언어 자체로 그 기능이 들어가야 하는 이유는 PHP의 환경 구성과 코드 배포방식을 고려했을때 가장 효과적인 방법이기 때문입니다. LAMP 스택으로 개발환경이, 웹호스팅 방식으로 운영환경이 정형화 되어 있고 FTP 파일을 던져넣는 방식에 익숙해져 있으니 추가 패키지를 제공할 수 있는 가능성은 범용언어에 비해 낮습니다. 모듈 설치를 입문자에게 요구할 수도 없습니다. 남는 선택지는 표준 라이브러리와 표준 문서밖에 없습니다.

     사람들은 무의식적으로 템플릿을 원했지만 PHP에는 HTML 페이지를 만들어낸다는 사용자의 목적이 고려되지 않은 것으로 보입니다.

   크게 공감되는 내용은 아닌 것 같습니다.
   단순히 C API를 CGI로 쉽게 노출시켜주는 수준이었던 PHP3 시절은 말씀하신 것과 같이 템플릿 용도로 사용되었다 말할 수 있겠지만...

   PHP4.2 부터 이미 범용적인 활용이 충분히 가능한 수준으로 환경이 만들어졌습니다.
   코드가 CLI를 통해 실행되기를 기대할 수 있는 환경이 되었고, 이전 댓글에서 언급하셨던 것 처럼 ""라라벨은 2007년쯤에 개별 프로젝트가 아니라 공식 언어 기능으로 나왔어야 할 물건"" 이라는 내용은 당시 PHP의 방향성에 전혀 맞지 않는 이야기입니다.

   2004년 공개된 Smarty 라는 PHP용 템플릿 엔진, 2006년 공개된 CodeIgniter 라는 PHP용 MVC 프레임워크 등의 존재는 PHP 그 자체로는 템플릿 언어가 아님을 반증하고, 또 그렇게 사용하지 않겠다는 PHP 사회적 공감대가 이미 형성되었다고 판단할 수 있겠지요.

     프론트엔드 프레임워크, 서버사이드 템플릿 엔진 등은 데이터로 렌더링할 수 있는 모든 내용에 일괄적으로 HTML 이스케이프를 적용하며, 명시적으로 이스케이프를 해제할 때에만 안전하지 않은 방식으로 출력을 생성합니다.

   이전 댓글의 위 내용도 PHP의 시간대와 비교해 보았을 때 딱히 올바른 이야기는 아니라고 생각됩니다.
   django가 처음 공개된 05년부터, 그 이후 몇년간 HTML 이스케이핑은 기본 세팅이 아니었습니다. 개발자가 의도적으로 이스케이프 필터를 설정해 주어야했지요. 지금도 파이썬에서 사용되고 있는 jinja의 경우 아직까지도 HTML 이스케이핑을 자동으로 처리하지 않습니다.

   자동으로 이스케이핑 해 주는 것이 일반적인 것으로 취급되던 시기엔 이미 PHP는 템플릿 언어라는 정체성을 벗어 던진지 오래입니다. (당시 PHP를 무지성적으로 사용하던 사용자들이 그걸 원하지는 않았겠지만, 다르게 보면 이미 PHP는 그러한 사용자들을 천천히 배제해 나가겠다고 결정내렸다 볼 수도 있겠지요.)

   PHP는 더 이상 그러한 용도의 언어가 아니기 때문에 PHP에서 표준 라이브러리와 언어에 그러한 기능을 디폴트 값으로 적용할 이유는 하등 없는 것이고, 범용 언어로써 동작하기를 원하는 PHP 입장에선 언급하신 htmlcharacterescapes 함수로 이미 충분히 제 역할을 다 했다고 봅니다.


     웹호스팅 방식으로 운영환경이 정형화 되어 있고 FTP 파일을 던져넣는 방식에 익숙해져 있으니 추가 패키지를 제공할 수 있는 가능성은 범용언어에 비해 낮습니다.

   위 내용에도 크게 공감하기 힘듭니다. 십수년도 더 넘은 이전부터 git 등을 아주 잘 활용했습니다. 심지어 도커가 공개된 직후부터 도커를 사용한 배포도 충분히 많이 시도되었고, 지금도 그렇게 사용하고 있습니다.

   언급하신 내용들 대부분 PHP 보다는 PHP로 개발된 CMS 위에서 놀 때나 의미가 있는 이야기가 아닐까 싶습니다.
   이런 표현을 좋아하지는 않지만, PHP 개발자들도 개발자 취급 안해주는 그런 케이스...

   jinja의 자동 이스케이핑 기능은 제 주장이 틀렸고 언급하신 내용이 맞습니다.

     위 내용에도 크게 공감하기 힘듭니다. 십수년도 더 넘은 이전부터 git 등을 아주 잘 활용했습니다. 심지어 도커가 공개된 직후부터 도커를 사용한 배포도 충분히 많이 시도되었고, 지금도 그렇게 사용하고 있습니다.

   제 PHP 경험은 2014년에 머물러있고 그 당시에는 도커가 없었습니다. git도 일하는 방식을 바꿔야 했기에 도입할 수 없었구요. 실제 일하는 환경에서 그런 걸 도입해야 하면 공감대가 있어야 하는데 제 상황에서는 불가능했었습니다

     이런 표현을 좋아하지는 않지만, PHP 개발자들도 개발자 취급 안해주는 그런 케이스...

   돌아보면 개발자 취급 못받는 사람들 사이에서 제가 일을 했었나 봅니다

   예로 드신 장고의 인증, 접근제어, 양식 검증, DB 마이그레이션 툴, 테스트 도구는 PHP의 라라벨에서도 모두 제공하고 있습니다.

   인증: https://laravel.com/docs/11.x/authentication
   접근제어: https://laravel.com/docs/11.x/authorization
   양식 검증: https://laravel.com/docs/11.x/validation
   DB 마이그레이션: https://laravel.com/docs/11.x/migrations
   테스트: https://laravel.com/docs/11.x/testing

   또, 외부 라이브러리거나 유료 라이브러리지만,
   기존의 DB 스키마를 모델과 마이그레이션 코드로 내보내거나, 반대로도 작동하는 친구도 존재하고,
   CRUD UI를 포함한 깔끔한 백오피스를 제공하는 https://nova.laravel.com/ 도 존재합니다.

   장고가 가진 기능들 거의 모두가 라라벨에도 존재합니다.
   (애초에 둘 다 RoR의 컨셉을 이어 받은만큼, 제공되는 기능 자체는 비슷할 수 밖에 없다고 봅니다.)
   그럼에도 장고-파이썬과 다르게 라라벨-PHP에는 제가 원 댓글에서 언급한 장점이 추가로 존재하지요.

   PHP가 웹앱용 템플릿 언어를 표방하며 설계된 언어임은 부정할 수 없는 사실이지만,
   모던 PHP 스타일이 정착한지 십년이 다 되어가는 이 시기까지 단순히 템플릿 언어로만 보는건 가혹하지 않나 싶습니다.

   Nova를 링크해주셔서 봤는데 이것도 유료 라이센스네요 프로젝트 튜토리얼에서 명시되고 바로 사용할 수 있는 장고 어드민과 기능은 유사할지 몰라도 접근성 면에서 차이가 있어 보입니다.

   또한 라라벨은 오픈소스 기여자들이 아니라 라스무스나 zend같은 회사에 의해서, 2011년이 아니라 2007년쯤에 개별 프로젝트가 아니라 공식 언어 기능으로 나왔어야 할 물건이라 생각합니다. 파이썬3가 하위호환성을 일부 포기한 것때문에 도입에 차질이 있었지만 PHP도 5버전 즈음에 대규모의 하위호환성 정리를 했어야 한다고 생각합니다. PHP의 변화는 시대의 흐름보다 항상 시차가 있는 것 같기도 합니다

   이제는 개인적으로 웹개발에 입문하는 입장이 아니기 때문에 PHP를 선택할 일은 없을 것입니다

   언어랑 프레임워크랑 자꾸 혼동하시네요

   여러군데에 동일 내용으로 댓글 다실 필요가 없다고 생각합니다. 주의를 끌고 싶으신가요?

   당연히 예전보다 좋아지고는 있겠지만 이제와서 PHP 쓸 바에는 Node.js나 파이썬을 사용하는 게 다용도로 쓸 곳이 많아 보이긴 해요.

   PHP붐은 옵니다

   10년동안 PHP 생태계, 배포방식, 실행모델, 디버깅 방식 등이 얼마나 나아졌는지 언급이 없고요. PHP로 개발을 할 줄 아는 사람들이 바뀌는게 제일 시간이 걸리고 어렵기 때문에 딱히 나아질거라는 기대조자 하지 않습니다. 특히 링크된 게시글은 PHP 프리랜서의 마케팅용 블로그이므로 특히 선별적으로 받아들여야 할 듯 합니다

   지난 10년동안 컴포저 패키지들 (노드 npm 같은 배포) 기준 php 사용통계는 php 5이하는 전멸했고요 php 생태계는 컴포저 중심으로 옮겨간지 오래입니다.

   일부 cms 워드프레스, 그누보드 등은 완전 동떨어져있고요.

   cms 를 제외한 생태계는 위와 같은 상황입니다.

   PHP를 쓰는 입장에선, 여전히 PHP는 최악의 언어입니다.
   다른 언어는 더 좋아졌거든요.

        Hacker News 의견

   요약:
     * PHP는 과거에 비해 많이 개선되었지만, 여전히 일관성 없는 문법과 숨겨진 함정들이 존재함
     * PHP는 웹 프로그래밍의 가장 순수한 형태로, 프레임워크 없이 자유롭게 실험하고 즐길 수 있음
     * PHP로 웹 프론트엔드, 크론잡, 쉘 스크립트, 메시지 큐, 웹소켓 서버, 클라이언트 소프트웨어, 통계, 서버 자동화 등 모든 것을 직접 구축하면서 재미를 느낄 수 있었음
     * PHP의 주요 문제는 추가된 기능이 아니라, 근본적인 언어 설계의 결함에 있음 (PHP: a fractal of bad design 참고)
     * 상용 프로젝트에서 PHP를 사용할 때는 버전 관리나 테스트 부재, FTP를 통한 직접 파일 수정, 해커에게 취약한 워드프레스 플러그인 등의 문제가 있었음
     * PHP 5의 주요 문제는 기능 부족이 아니라, fopen()에서 에러 코드를 얻을 수 없는 것과 같은 근본적인 이슈였음
     * ""더 이상 최악이 아닌 언어""의 문제는, 언어가 개선되어도 오래된 버전을 대상으로 하는 라이브러리를 사용해야 한다는 점임
     * PHP의 개선사항이 실제로 사용성 좋게 구현되었는지 예시가 있으면 좋겠음
     * PHP는 실용적인 엔지니어에게 적합하며, Laravel Octane 같은 도구로 높은 성능의 애플리케이션도 만들 수 있게 됨
     * 과거에 PHP와 힘든 경험이 있던 사람들은, PHP가 개선되었다 하더라도 다시 사용하고 싶어하지 않을 것임

   PHP: 잘못된 디자인의 프랙탈(한국어)

   12년전 문서 ㅋㅋ

   2012년에 작성된 문서를 아직도....
   php가 발전없이 2012년 저 시절을 그대로 유지하고 있을거라 생각하시는건지..?

   아 물론 무근본으로 시작된 언어라는건 부정할 수 없긴 하겠네요. ㅎ

   언급된 영문 문서에 대한 번역본 링크입니다..

   PHP가 아무리 구려도 설마 저시절의 문제들을 아직도 유지하겠어요.

   유지하고 있어도 문제고요. 이정도 수준의 설계부터 잘못되어있는데 버전업해서 품질이 좋아졌다? 그건 하위호환성을 심각하게 부숴서 문제입니다. 비교 연산자부터가 이상한데 뭘 어쩌겠어요.

   단순히 해커뉴스 요약 4번째 링크의 한국어 번역본을 제공한 것으로 보입니다ㅎㅎ
"
"https://news.hada.io/topic?id=14644","Show HN: BandMatch - 밴드 결성 및 음악 협업을 위한 "음악인 매칭 서비스"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show HN: BandMatch - 밴드 결성 및 음악 협업을 위한 ""음악인 매칭 서비스""

BandMatch 앱 소개

     * BandMatch는 주변의 음악가들과 매칭하여 꿈의 밴드를 만들 수 있게 도와주는 앱임
     * 가까운 지역의 음악가들을 발견하여 밴드를 시작하거나 프로젝트에 협업할 수 있음
     * 주변에서 열리는 공연을 찾아주어 좋아하는 아티스트가 내 지역에 왔을 때 놓치지 않고 볼 수 있게 해줌

GN⁺의 의견

     * 음악을 하는 사람들에게는 매우 유용할 것 같은 앱임. 특히 지역 기반으로 매칭해주는 것이 강점임
     * 단순히 매칭 뿐만 아니라 협업 프로젝트도 진행할 수 있게 해준다는 점에서 음악 생태계 활성화에 기여할 수 있을 것임
     * 다만 이용자 수가 적으면 매칭이 잘 이뤄지지 않을 수 있음. 충분한 이용자 풀 확보가 관건이 될 것임
     * 비슷한 앱으로는 Vampr, Bandmix, BandFriend 등이 있음. 차별화 포인트를 잘 잡아야 할 것임
     * 저작권이나 수익 배분 등의 이슈에 대해서는 명확한 가이드라인 제시가 필요해 보임

        Hacker News 의견

     * 왼쪽으로 스와이프하는 것이 해당 아티스트를 거절하는 것처럼 느껴질 수 있음. 특정 프로젝트에는 협업하고 싶지 않지만 프로필을 다시 보고 싶을 수도 있음.
     * 디지털 협업을 위해서는 지역 제한이 없어야 함. 2번의 왼쪽 스와이프 후 해당 지역의 사람들이 모두 소진됨.
     * 선호하는 장르의 아티스트를 클릭하고, 작품 샘플을 듣고, 마음에 드는 사람에게 메시지를 보내고 즐겨찾기에 추가하는 기능을 원함.
     * 뮤지션의 음악 작품 자체가 앱에 포함되어야 함. 스타일과 기술을 전달하기 위해서는 실제 연주 영상 업로드가 필요함. 사기꾼과 사기를 방지할 수 있음.
     * 초보자들을 위한 L2Play 앱을 만들면 좋을 것 같음. 6개월 전, 지금, 6개월 후에도 관심이 있을 것임.
     * 비슷한 앱들은 대부분 크리티컬 매스 부족과 활동이 적은 계정들로 인해 어려움을 겪음. 크레이그리스트가 가장 일관되게 뮤지션들과 연결해주는 방법이었음.
     * 솔로 뮤지션들은 공연을 위해 밴드를 고용해야 하는 경우가 많음. 이를 위한 기능이 있으면 좋겠음.
     * 드러머는 아마 이 앱에서 ""매력적인 사람""에 해당할 것임 (ㅋㅋ)
     * 국가 제한 없이 모든 지역에서 사용할 수 있으면 좋겠음. 데이팅 앱처럼 위치가 중요한 것은 아님.
     * ""매칭"" 앱들이 틴더 스와이프 모델을 사용하는 것은 매칭 경험을 오히려 악화시킴.
     * 개인정보를 요구하기 전에 콘텐츠를 먼저 보여주면 좋겠음. 이메일과 프로필 정보 없이는 콘텐츠 탐색조차 할 수 없었음.
     * 위치 정보 제공 대신 도시를 수동으로 선택할 수 있게 해주면 좋겠음.
"
"https://news.hada.io/topic?id=14689","Show GN: CoreEngine: 가볍고 빠른 Swift 단방향 아키텍쳐 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: CoreEngine: 가볍고 빠른 Swift 단방향 아키텍쳐

   간단하고 빠른 Unidirectional data flow architecuture: CoreEngine

   기존의 ReactorKit, TCA 등등의 아키텍쳐가 점점 무거워짐에 따라 그에 따른 부수효과들이 나타나, 굉장히 가볍고 최소한의 기능만이 존재하는 단방향 아키텍쳐를 만들었습니다.

   수많은 라이브러리들이 이미 존재하고 여러 분야에 걸쳐서 Redux, Flux, ReactorKit, ReSwift, The Composable Architecture 등이 존재하지만, 불필요한 기능이 너무 많고 그 자체만으로도 무거워서 대체재로 간단한 구조를 소개합니다.
"
"https://news.hada.io/topic?id=14741","4천만 개의 게시물과 댓글을 매핑하고 분석하여 재미있게 해커 뉴스 살펴보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               4천만 개의 게시물과 댓글을 매핑하고 분석하여 재미있게 해커 뉴스 살펴보기

     * 필자는 텍스트 임베딩을 활용하여 4천만개 이상의 Hacker News 게시물과 댓글을 분석하는 프로젝트를 진행함
     * 프로젝트의 주요 목표는 향상된 검색, 추천, 분석 기능을 구현하는 것이었음
     * 이를 위해 Hacker News API를 이용해 데이터를 수집하고, 웹 페이지 크롤링을 통해 추가 컨텍스트를 확보함
     * 수집한 데이터를 기반으로 텍스트 임베딩을 생성하고, 이를 UMAP을 이용해 2D 공간으로 매핑함
     * 매핑된 데이터를 기반으로 인터랙티브한 ""Hacker News Universe"" 맵을 제작함
     * 또한 임베딩을 활용하여 의미론적 검색, 자동 가상 커뮤니티, 인기도/감정 분석 등의 기능을 구현함
     * 대규모 데이터 처리를 위해 GPU 클러스터를 활용하고, 사용자 경험 개선을 위해 엣지 서버를 배포함

Hacker News 데이터 수집

     * Hacker News API를 이용해 4천만개 이상의 게시물과 댓글 데이터를 수집함
     * API 응답이 느려 병렬 처리를 위해 Node.js 기반 서비스를 구현함
     * 게시물 점수는 -1 미만으로 내려가지 않으며, 댓글 점수는 API로 확인할 수 없음
     * 일부 게시물과 댓글은 제목과 본문이 비어있음 (아마도 중재자에 의해 수정된 것으로 추정)
     * 댓글 ID가 부모 댓글보다 작은 경우도 있음 (중재자가 댓글 트리를 이동시킨 것으로 추정)

텍스트 임베딩 생성

     * 제목만으로는 게시물을 의미론적으로 표현하기에 충분하지 않아, 웹 페이지 크롤링을 통해 추가 컨텍스트를 확보함
     * 텍스트 임베딩 생성에는 고성능 GPU가 필요하며, 4천만개 입력을 처리하는데 1년 가까이 걸릴 수 있음
     * RunPod를 이용해 저렴한 가격에 GPU 클러스터를 구성하고, db-rpc와 queued를 개발해 분산 처리 효율을 개선함
     * 150개 GPU를 동원해 몇 시간만에 4천만개 텍스트의 임베딩을 생성함

웹 페이지 크롤링으로 추가 컨텍스트 확보

     * 게시물 제목만으로는 임베딩 품질이 좋지 않아, 링크된 웹 페이지를 크롤링해 추가 컨텍스트를 확보함
     * Rust로 크롤러를 구현해 Node.js 버전 대비 10배 빠른 성능을 달성함
     * 많은 링크가 깨져있어 (link rot) 인터넷 아카이브의 API를 이용해 복구함
     * 최종적으로 4백만개 중 5% 미만의 페이지만 가져오지 못함

개선된 텍스트 임베딩 생성

     * 웹 페이지 전체를 입력으로 사용하기 위해 jina-embeddings-v2-small-en 모델로 전환
     * 컨텍스트가 부족한 게시물은 상위 댓글을 추가해 보완
     * 댓글은 계층 구조를 고려해 조상 댓글까지 포함시켜 입력을 구성함

UMAP을 이용한 차원 축소

     * UMAP을 이용해 1024차원 임베딩을 2차원 공간으로 차원 축소함
     * 차원 축소를 위해서는 PyNNDescent 그래프와 원본 임베딩이 필요함
     * 고차원 백만개 입력을 처리하는데 96코어 CPU에서 1시간 반 정도 소요됨
     * 차원 축소 결과, 관심사나 인기도 분포가 시각화됨

코사인 유사도

     * 임베딩 간 유사도 계산에는 코사인 거리가 많이 사용됨
     * 코사인 거리는 벡터 간 각도 차이를 나타내며, 유클리드 거리와 달리 벡터 크기에 영향받지 않음
     * 이는 텍스트 유사도 계산에 적합한데, 길고 강렬한 토론이라도 주제가 유사하면 가깝게 매핑되어야 하기 때문
     * 코사인 유사도 계산은 행렬 곱셈으로 간단히 구현 가능

Hacker News Universe 맵 제작

     * 임베딩을 기반으로 Google Map과 유사한 인터랙티브한 Hacker News 맵을 제작함
     * 확대/축소시 보이는 포인트 개수 조절, 일부 점에 라벨링, 클릭시 상세 정보 표시 등의 기능 지원
     * 수백만개 점을 브라우저로 한번에 전송하기에는 무리가 있어, 타일링과 LOD를 이용해 점진적 로딩 구현
     * 타일 당 최대 1500개 점을 담아 크기를 20KB 이하로 유지하고, 지역별 밀도를 고려해 다양성 확보
     * 웹앱은 Canvas와 WebWorker를 이용해 구현하고, 지도 기능은 Google Map을 참고해 유사하게 구현함

시각적 효과 추가

     * 실제 지도처럼 랜드마크, 경계, 지형 등을 추가해 몰입감과 방향 감각을 개선함
     * 포인트 밀도에 따라 명암 등고선을 그려 HN에서 관심이 많은 영역을 표현함
     * 가우시안 블러로 부드러운 등고선을 그리고, SVG로 변환해 깨짐없는 벡터 이미지로 출력함
     * 대표적 주제를 나타내는 ""도시""를 추가해 특정 영역으로의 안내 기능을 제공함

검색 기능 테스트

     * 의미론적 임베딩 기반 검색은 키워드 검색에 비해 관련성이 높고 다양한 결과를 보여줌
     * 질문 형태의 쿼리도 잘 이해하며, 정확히 일치하는 단어가 없어도 유사한 주제를 찾아냄
     * HN 게시물의 높은 품질 덕분에 검색 결과도 통찰력 있고 유용한 정보들이 많이 노출됨
     * 결과 랭킹에는 관련도 외에도 게시물 점수와 시간 가중치를 활용해 신뢰도와 신선도를 고려함

자동 가상 커뮤니티 생성

     * 키워드로 가상의 커뮤니티를 만들어 관심사에 맞는 게시물 모음을 즉석에서 볼 수 있음
     * 게시물뿐 아니라 관심사와 관련된 논의가 활발한 댓글도 함께 살펴볼 수 있음
     * 특정 주제에 대해 영향력 있고 활발히 활동하는 사용자도 파악 가능함
     * 사전 필터링 대신 사후 필터링을 활용하면 계산 비용을 크게 줄일 수 있음

대규모 데이터 분석

     * 오픈소스 감정분석 모델을 이용해 3천만개 댓글의 긍정/부정 감정을 분류함
     * 토픽의 감정을 시계열로 분석하면 주요 이벤트에 따른 변화를 관찰할 수 있음
     * 유사도와 점수를 활용해 토픽 간 인기도 비교도 가능함
     * 쿼리 계산 속도 개선을 위해 GPU를 활용한 행렬 연산을 적용하고 처리 속도를 크게 향상시킴

향후 계획

     * 실시간 데이터 업데이트 지원
     * 딥러닝 기반 추천 시스템 개발
     * 재순위화 모델을 통한 검색 품질 개선
     * 사용자 분석 강화 (유사도, 전문성 등)
     * 커뮤니티 의견 수렴을 통한 추가 개선 아이디어 발굴

GN⁺의 의견

     * 이 프로젝트는 대규모 데이터를 효과적으로 수집, 정제, 분석하는 과정을 잘 보여주는 사례임. 특히 병렬 처리와 GPU 활용 등 성능 최적화 기법이 인상적임.
     * 텍스트 임베딩과 UMAP을 조합해 게시물 간 유사도를 시각화한 Hacker News 맵은 아주 창의적이고 흥미로운 결과물임. 사용자가 관심 주제를 탐색하고 새로운 정보를 발견하는데 큰 도움이 될 것 같음.
     * 의미론적 검색과 자동 커뮤니티 생성 기능은 Hacker News 이용 경험을 한 차원 높일 수 있는 혁신적인 아이디어임. 단순 키워드 매칭을 넘어 문맥과 의도를 파악하는 검색 기술이 일반 사용자에게 더 확산되길 기대함.
     * 대규모 실시간 데이터 처리 파이프라인 구축이 관건일 것 같음. 엣지 컴퓨팅, 인메모리 DB 등 성능 병목 해소 방안을 면밀히 검토해야 할 것임.
     * 신뢰도 높은 HN 데이터 특성상 감정 분석 결과도 충분히 활용 가치가 있어보임. 다만 알고리즘 편향성에 주의하고, 도메인 특화 학습도 고려해 볼만 함.

   제목 누락되었네요
"
"https://news.hada.io/topic?id=14701","교통 통제 없이 주간에 도로 표면 재포장하는 기술 [동영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   교통 통제 없이 주간에 도로 표면 재포장하는 기술 [동영상]

        Hacker News 의견

   다음은 해커뉴스 댓글들을 요약해본 것임:
     * 고속도로 교량 공사 기술: 야간에 고속도로 진출입로를 이용해 교량을 조립하고 설치하는 기술. 1차 야간에 양쪽 경사로를 조립하고 연결해 짧은 교량을 만들고, 2차 야간에는 경사로를 밀어 중앙부를 연장해 최종 위치로 이동시킴. 전체 길이는 236m이고 교량 아래 작업 공간은 100m. 교량은 약간 휘어질 수 있고 회전 반경은 2km.
     * 공사 시간 단축 방안:
          + 일본처럼 인력을 10배로 투입해 하룻밤 사이에 마무리.
          + 19세기나 지금이나 변함없는 삽으로 일하는 인부의 모습이 보임.
     * 시민 생활 방해 최소화하는 공사 사례:
          + 일본에서 3시간만에 지하철 공사를 마무리한 사례.
          + 미국 보스턴 근처 다리 공사는 작년 4월부터 폐쇄되어 2024년 10월에나 재개통 예정.
     * 우회도로 문제점:
          + 경사가 너무 가파라서 긴 트레일러 트럭이 걸려 도로가 마비된 사례 있음.
          + 우회로 제한속도가 시속 60km라서 혼잡 유발. 최근에는 야간에 고속도로를 통제하고 공사.
     * 영국의 도로 유지보수 기준: 수십년간 재포장 안하는 것으로 도로 혼잡 최소화.
     * 미국 동북부 공사현장과 대조되는 깔끔한 현장: 자재가 여기저기 흩어져있고, 공사 경계가 거칠며, 장비와 작업복이 더러운 것이 일반적.
     * 우회교량 설치 시간: 교통을 완전 통제하지 않고는 불가능해보임. 네트워크 엔지니어 관점에서는 ""서버 이전시 네트워크 케이블만 뽑았다 꽂으면 됩니다""라는 말과 비슷.
     * 지자체의 도로공사 감독 동기 부족: 공사 지연으로 막히든 말든 관심 없고, 부실 보수로 수년 주기 공사가 반복되어 업체에 좋음.
"
"https://news.hada.io/topic?id=14643","폴란드에서 발견된 그림 형제 동화의 독특한 판본들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      폴란드에서 발견된 그림 형제 동화의 독특한 판본들
"
"https://news.hada.io/topic?id=14656","닌텐도, GitHub에 에뮬레이터 관련으로 8,000건 이상의 DMCA 삭제 요청 보내 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            닌텐도, GitHub에 에뮬레이터 관련으로 8,000건 이상의 DMCA 삭제 요청 보내

     * Nintendo가 Switch 에뮬레이터의 코드를 호스팅하는 8,000개 이상의 GitHub 저장소에 대해 DMCA(Digital Millennium Copyright Act) 통지를 보냄
     * Yuzu의 개발자들이 Nintendo와 소송을 빠르게 합의하고 240만 달러를 지불한 지 2개월 만에 이루어진 대대적인 Takedown임
     * GamesIndustry.biz는 8,535개의 GitHub 저장소에 영향을 미치는 DMCA 통지에 대해 처음 보도함
     * Nintendo 대변인은 저장소에 포함된 Yuzu 소스 코드가 ""Nintendo의 기술 보호 조치를 불법적으로 우회하고 Switch 게임의 불법 복사본을 실행한다""고 주장함
     * GitHub는 개발자들이 콘텐츠를 변경할 시간을 가질 것이라고 공지에 적었음

게임 에뮬레이터의 부활과 Nintendo의 대응

     * 우연은 아니지만, 게임 에뮬레이터가 최근 부활하고 있는 시기에 Nintendo의 법적 대응이 이루어짐
     * 지난달 Apple이 App Store에서 레트로 게임 플레이어에 대한 제한을 완화하여 Delta 에뮬레이터가 App Store 1위에 올랐음
     * Nintendo는 에뮬레이터의 전성기가 수익에 위협이 된다고 판단하고 수입 흐름에 가장 즉각적인 위협이 되는 것들을 먼저 제거하기 시작했을 수 있음

  에뮬레이터의 중요성과 Nintendo의 법적 공격에 대한 우려

     * Nintendo의 에뮬레이터에 대한 법적 공격은 해적질과 관련이 없는 에뮬레이터의 중요한 사용을 무시하고 있음
     * 게임 역사학자들은 에뮬레이터를 게임 보존의 핵심으로 보고 있음
     * 에뮬레이터가 없다면 Nintendo와 다른 저작권 소유자들은 미래 세대를 위해 역사의 일부를 쓸모없게 만들 수 있음

GN⁺의 의견

     * Nintendo의 에뮬레이터에 대한 대대적인 법적 조치는 에뮬레이터의 불법적인 사용뿐만 아니라 게임 보존과 같은 중요한 역할도 위협할 수 있음. 에뮬레이터는 단순히 불법 복제를 위한 도구가 아니라 게임 역사를 보존하는 데에도 중요한 역할을 하기 때문임.
     * 그러나 Nintendo의 입장에서는 자사의 지적 재산권을 보호하고 불법 복제를 막기 위해 이러한 조치를 취할 수밖에 없는 것도 사실임. 에뮬레이터 개발자와 Nintendo가 합의점을 찾아 게임 보존과 저작권 보호라는 두 가지 목표를 모두 달성할 수 있는 방안을 모색할 필요가 있어 보임.
     * 한편 GitHub와 같은 오픈 소스 플랫폼은 개발자 친화적인 정책을 유지하면서도 저작권 분쟁에 휘말리지 않도록 적절한 대응 방안을 마련해야 할 것임. DMCA Takedown 요청에 대한 투명한 처리 절차와 개발자 지원 프로그램 등을 통해 플랫폼의 신뢰도를 유지하는 것이 중요해 보임.
     * 게임 업계에서는 에뮬레이터를 통한 불법 복제 문제를 해결하기 위해 클라우드 게임 스트리밍 서비스와 같은 대안적인 솔루션을 모색할 필요가 있음. 이를 통해 사용자들은 합법적으로 게임을 즐길 수 있고, 회사는 수익을 보장받을 수 있을 것임.

        Hacker News 의견

     * Radicle이라는 탈중앙화된 Git 네트워크가 Nintendo의 법적 조치에 대해 더 많은 면역력을 가짐. 이는 민사 분쟁이기 때문에 Nintendo가 법적 시스템을 남용하는 비용을 높이는 것이 중요함.
     * 에뮬레이터 자체는 불법이 아니지만, 해적판 게임을 플레이하는 데 사용되기 때문에 해적행위와 연관되어 있음. 그러나 BitTorrent나 Windows도 마찬가지로 해적행위에 사용될 수 있음에도 불구하고 금지되지 않음.
     * Nintendo는 에뮬레이터를 제품으로 판매하고 있기 때문에 이러한 노력에 더 많은 근거를 가지고 있음.
     * 암호화 서명된 오픈 소스 Git 호스팅 네트워크는 FOSS 보안에 큰 도움이 될 것임.
     * Microsoft는 Copilot과 같은 ""코딩 보조 서비스""를 통해 타인의 코드를 허가 없이 재사용하고 있음.
     * 다행히 이번 조치는 Yuzu(Switch 에뮬레이터)에만 국한됨.
     * Nintendo는 Yuzu 개발자를 고용하여 PC용 게임패스 스타일 서비스를 출시하고 에뮬레이션을 통해 게임을 플레이할 수 있도록 할 수 있었음. Switch 에뮬레이터는 해적행위뿐만 아니라 하드웨어 제한으로 인해 원래 콘솔보다 더 나은 성능을 제공하기 때문에 사용됨.
     * 지갑으로 투표하라! Nintendo 제품 구매를 중단하라!
"
"https://news.hada.io/topic?id=14649","AI Copilot이 코딩 교육의 패러다임을 변화시키고 있음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   AI Copilot이 코딩 교육의 패러다임을 변화시키고 있음

AI 코파일럿이 코딩 교육 방식을 바꾸고 있음

     * 이제 교수들은 문법 교육에서 벗어나 고차원적인 기술에 중점을 두는 중
     * 지난 학기, 브라운 대학교의 컴퓨터 과학 교수인 Krishnamurthi는 학부생들에게 최종 프로젝트를 GitHub Copilot을 사용하여 완성하라고 지시함
          + 이는 OpenAI의 GPT-3 언어 모델을 기반으로 한 AI 도구로, 코드를 자동 생성하고 완성해주는 기능을 제공
     * Krishnamurthi 교수는 이번 실험을 통해 학생들이 프로그래밍 언어의 문법보다는 문제 해결에 집중하기를 원했음
          + 그는 이런 도구들이 프로그래밍 교육에 근본적인 변화를 가져올 것이라고 믿고 있음
     * 다른 교수들도 유사한 실험을 진행 중이며, AI 도구를 활용하여 학생들이 고차원적인 개념을 학습하는데 도움을 주고 있음
          + 예를 들어 펜실베니아 대학교의 Swapneel Sheth 교수는 Copilot을 사용하여 학생들이 개념적 사고와 문제 해결 능력을 기를 수 있도록 하고 있음
     * 하지만 일부 교수들은 AI 도구 사용에 대해 우려를 표하고 있음
          + 버클리 대학의 Dan Garcia 교수는 학생들이 기본기를 익히지 않고 AI에 의존하게 될까 걱정하고 있음
          + 그는 AI 도구가 학생들의 학습을 방해할 수 있다고 믿고 있음
     * 장기적으로 AI 도구는 소프트웨어 엔지니어링 교육에 큰 영향을 미칠 것으로 예상됨
          + Krishnamurthi 교수는 언젠가는 전통적인 코딩 강의가 사라질 것이라고 전망함
          + 대신 학생들은 AI 도구를 활용하여 더 큰 문제를 해결하는 방법을 배우게 될 것임

GN+의 의견

     * AI 코파일럿의 등장으로 프로그래밍 교육의 패러다임이 변화하고 있음. 전통적인 문법 중심의 교육에서 벗어나, 문제 해결 능력과 고차원적 사고력을 기르는 방향으로 나아가고 있음.
     * 하지만 AI 도구에 대한 과도한 의존은 학생들의 기본기 습득을 방해할 수 있음. 따라서 AI 도구를 적절히 활용하되, 기본 개념과 원리에 대한 이해를 소홀히 해서는 안될 것임.
     * AI 도구의 발전은 소프트웨어 엔지니어링 분야의 미래상을 보여줌. 단순 반복적인 코딩 작업은 AI가 대신하고, 인간은 더 창의적이고 복잡한 문제 해결에 집중하게 될 것으로 예상됨.
     * 교육 기관들은 이러한 변화에 발맞춰 커리큘럼을 개편해야 할 것임. 전통적인 프로그래밍 언어 교육과 함께 AI 활용 능력, 문제 해결 능력 등을 함양하는 교육이 필요해 보임.
     * GPT-4 등 차세대 AI 기술의 등장으로 코드 자동 생성 및 완성 기능은 더욱 강력해질 것으로 보임. 이에 따라 소프트웨어 엔지니어의 역할과 역량도 지속적으로 변화할 것으로 예상됨.

   내가 뭘 하려는지를 알면 진짜 편한데, 애매하게 알면 저 아래 댓글처럼 프롬프트와 씨름하다 더 시간낭비하는게 맞는 것 같더군요.

   결국 구글링이 프롬프팅으로 바뀌는 느낌임.

   저도 학부 수업을 듣고 있는데, 이미 언어 모델을 사용해서 교육하는 방향으로 지도법이 바뀌고 있는 느낌이 강하게 듭니다.

   전공 과목(컴퓨터공학)은 물론이고, 일부 교양 과목마저 이제 중간/기말고사에 언어 모델 (ChatGPT)를 사용해도 된다고 고지하는 경우가 매우 늘었습니다.

   다만, 단순히 문제를 언어 모델에 집어넣는다고 해답이 나오지는 않게 문제를 설계해서 주십니다. 문제를 올바르게 분석하고, 언어 모델이 준 산출물을 적절히 답안에 섞고 응용하여 풀도록 유도하는 것 같습니다.

   점점 올바르게 ""문제를 이해""해서 언어 모델에게 ""올바른 지시""를 내려야 할 필요성이 높아지고 있는 추세입니다.

     LLM은 문법에는 뛰어나지만 지혜는 부족함

   인간의 존재 이유. 저같아도 이를 시험합니다.

        Hacker News 의견

   요약:
     * AWS DevOps 엔지니어들은 기본적인 네트워킹 지식이 부족한 경우가 많음
     * AI 공동 작업툴을 사용하는 사람은 늘어나지만, 코드를 이해하고 검토할 수 있는 사람은 늘어나지 않음
     * AI 툴에 윤리와 정치가 주입되어 어색한 결과를 낳기도 함
     * ""프롬프트 엔지니어링""이 프로그래밍을 대체할 수 없음
     * AI 툴을 사용해 코드를 작성하더라도 근본적인 개념을 이해하지 못한 채 그냥 복사 붙여넣기만 하는 학생들이 있음
     * 대답을 알고 있는 신탁(oracle)이 있어도 무엇을 물어야 할지 모른다면 쓸모없음
     * 개발자의 진정한 가치 창출은 사람의 요구사항을 코드로 변환하는 것임
     * AI 툴은 이미 작성하기 쉬운 코드를 생성하는 데만 유용함
     * 사소하지 않은 작업에서는 프롬프트와 씨름하느라 시간을 더 많이 씀
     * 앞으로는 ""아는 것""보다 ""어디서 답을 찾을 지 아는 것""이 더 중요해질 것임
     * AI가 제시한 답이 맞는 건지, 교묘하게 틀린 건지 판단하는 것이 새로운 문제 해결 과제가 될 것임
     * AI 공동 작업 툴은 우리를 게으르게 만들고 버그가 더 많은 코드를 만들어낼 것임
     * 교사들은 학생들이 계산기를 사용하기 전에 기본기를 익히기를 원함
     * 학습 곡선을 유지하는 것이 이 세대의 큰 위기가 될 것임
     * 소프트웨어 엔지니어링은 ""20% 문법, 80% 지혜""라고 할 수 있음
     * LLM은 문법에는 뛰어나지만 지혜는 부족함
"
"https://news.hada.io/topic?id=14668","시간 기반 CSS 애니메이션 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           시간 기반 CSS 애니메이션 기술

CSS 애니메이션을 위한 시간 기반 방식 활용

     * CSS에서 수학 함수들이 지원되면서, 시간 기반 방식의 CSS 애니메이션을 다시 적용해볼 수 있게 됨
          + mod(), round(), 삼각함수 등이 지원됨
          + 데모를 보기 위해서는 실험적 기능 플래그를 활성화해야 할 수 있음

  기본 아이디어

     * CSS Houdini API를 사용하여 시간(밀리초)을 추적하는 사용자 정의 변수를 정의할 수 있음
          + @property 규칙을 사용하여 --t 변수를 정의하고, 초기값을 0으로 설정
          + @keyframes 규칙을 사용하여 --t 변수를 24시간(86,400,000ms) 동안 선형적으로 증가시킴
          + --t를 기반으로 하는 다른 값들은 함께 변경되어 애니메이션 효과를 만듦
          + counter() 함수를 사용하여 --t 변수의 값을 표시할 수 있음

  프레임 속도 제어

     * 초당 60 프레임(FPS)의 업데이트 주기를 유지하는 것으로 부드러운 애니메이션에 충분함
     * 필요한 경우 step() 함수를 사용하여 프레임 속도를 수동으로 제어할 수 있음
          + animation-timing-function 속성에서 step() 함수를 사용하여 원하는 FPS 값을 계산

  시간 변환

     * --t 값은 한 방향으로 지속적으로 증가하므로, 일부 CSS 속성에는 적합하지 않을 수 있음
     * min() 함수를 사용하여 특정 값에 도달하면 애니메이션을 멈출 수 있음
     * mod() 함수를 사용하여 애니메이션을 다시 시작할 수 있음
     * sin() 함수를 사용하여 앞뒤로 움직이는 효과를 만들 수 있음

  사용자 정의 Easing 함수

     * 수학 함수와 --t 변수를 사용하여 사용자 정의 easing 함수를 만들 수 있음
     * cubic-bezier()로는 달성하기 어려운 효과를 만들 수 있음
     * 예시: ease-out-cubic, ease-out-elastic 등

  CSS Doodle 실험

     * 복잡한 표현식에서 var()와 calc()는 코드의 가독성을 떨어뜨릴 수 있음
     * css-doodle에서는 @t 함수를 사용하여 --t 변수를 나타낼 수 있음
     * 최신 버전의 css-doodle은 인수 내부에서 간단한 수학 표현식을 직접 허용함
     * @T와 @TS 함수도 추가로 제공됨
          + @T는 하루의 시작부터 시간을 나타냄
          + @TS는 @t(/1000)의 단축형으로, 초 단위로 시간을 추적함
     * 시계 예제와 점프 모션 예제 등을 css-doodle로 구현할 수 있음

  결론

     * 시간을 변수로 사용하는 이 접근 방식은 흥미로움
     * Keyframes를 사용하는 것이 더 직관적일 수 있지만, 수학 계산과 입력 변수가 많은 데모 장면에서는 시간을 변수로 사용하는 것이 다양한 결과를 얻을 수 있음

GN⁺의 의견

     * CSS의 시간 기반 애니메이션 기법은 단순히 CSS로 구현 가능한 애니메이션의 폭을 넓힐 뿐만 아니라, 쉐이더나 WebGL 등 다른 기술과의 연계 활용 가능성도 높여줄 것으로 보임
     * CSS Houdini와 CSS Doodle 등의 도구와 함께 사용하면 더욱 유연하고 다양한 표현이 가능할 것 같음
     * 다만 브라우저 호환성 문제나 성능 이슈 등 실제 프로젝트에 적용할 때 고려해야 할 사항들이 있을 것임. 기존의 Keyframe 방식과 장단점을 잘 비교하여 선택적으로 사용하는 것이 좋겠음
     * GSAP 등 전문 애니메이션 라이브러리와 비교했을 때의 장단점도 분석해볼 필요가 있음. 상호 보완적으로 사용할 수 있는 방안을 모색해보는 것도 좋을 듯함
     * 시간 기반 CSS 애니메이션의 예제와 활용 사례들이 더 많이 공유되어, 프런트엔드 개발자들이 좀 더 쉽게 적용해볼 수 있게 되기를 기대함

        Hacker News 의견

     * CSS에서 음수 animation-delay 값을 사용하여 JavaScript로 애니메이션 진행을 제어할 수 있음. 예를 들어 animation-delay: -1500ms로 설정하면 즉시 시작하되 1.5초 지점으로 건너뜀. JavaScript로 이 값을 조작하여 CSS 애니메이션을 스크러빙하고, 모든 애니메이션을 게임 엔진 스타일의 계산-업데이트-렌더링 틱 루프와 호환되게 만들 수 있음.
     * 간단한 easing 함수나 한두 개 채널의 기본 키프레임 이상으로 발전하면 이 접근 방식의 한계에 빠르게 직면하게 됨. Theatre.js 라이브러리를 사용하면 키프레임과 베지어 곡선을 편집하기 위한 타임라인이 있는 스튜디오 UI와 이러한 키프레임을 가져와 타임라인과 관련하여 값을 보간하는 런타임으로 구성되어 있어 조정된 애니메이션이 필요할 때 유용함.
     * 이 글에서는 브라우저 지원률이 88%인 사용자 정의 CSS @property를 활용함. 브라우저마다 초기값 설정 방식이 다른 점은 주의해야 함. 크롬은 정의되지 않았거나 유효하지 않은 값이면 초기값을 사용하지만, 파이어폭스는 정의되지 않은 경우에만 초기값을 사용함. 대부분의 프로젝트에는 문제가 되지 않겠지만, 브라우저 간 구현 불일치를 해결하려면 JavaScript로 파이어폭스의 기본값을 설정해야 할 수도 있음.
     * CSS에는 mod(), round(), 삼각 함수 등 충분한 수학 함수가 지원됨. CSS는 JavaScript처럼 타이머를 시작할 순 없지만, 요즘은 CSS Houdini API로 사용자 정의 변수를 정의하여 밀리초 단위로 시간을 추적할 수 있음. 그런데 JavaScript가 있는데 왜 이런 것들이 모두 필요할까? 그리기 레이어는 그리기 프리미티브에만 관심을 가져야 하지 않을까? 왜 고차원 레이어를 점점 더 많이 넣으려 하는 걸까?
     * 만든 시계가 매우 세련되어 보임. 잘 작성된 글임. 크롬은 아직 mod()에 대한 CSS 지원을 출시하지 않아서 미리 보기 릴리스를 사용하지 않으면 페이지의 대부분 예제가 애니메이션되지 않음.
     * 틱을 제어할 필요 없이 모든 브라우저에서 부드러운 CSS 애니메이션을 원한다면 FLIP 방법이 유용함.
     * 들숨-멈춤-날숨-멈춤 단계를 모두 사용자 정의하여 자신의 신체에 맞추고 원하는 효과를 낼 수 있는 '박스 호흡' 같은 것을 하고 싶었는데, 이 페이지에 있는 것 같은 방법 없이는 (JS나 엄청난 복잡성 없이는) 할 방법을 찾지 못했음. 이 페이지에는 정말 창의적인 데모가 있음!
     * 흥미롭게도 mod()를 사용하기 전의 데모는 작동하지만 mod()와 sin()은 최신 안드로이드 크롬에서 아무 작업도 하지 않음.
     * 페이지 하단의 애니메이션이 매우 인상적임. <div> 요소가 아닌 <video>처럼 보임.
     * 매우 인상적이지만, 어떻게 보면 수십 년 전 플래시로 할 수 있었던 것에 가까운 지점에 도달한 것 같음. 플래시가 다시 돌아오길 바라지는 않지만 CSS 애니메이션을 만들기 위한 더 사용자 친화적인 도구가 있으면 좋겠음.
"
"https://news.hada.io/topic?id=14655","200억 달러 규모 반도체 Fab 구축 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        200억 달러 규모 반도체 Fab 구축 방법

반도체 공장을 20억 달러에 짓는 방법

  반도체 제조 공정의 어려움과 비용

     * 반도체 제조는 복잡한 공정과 엄격한 오차 허용 기준으로 인해 일반 제조업보다 훨씬 어려움
     * 현대 반도체의 트랜지스터 크기는 나노미터 수준으로, 일반 제조업보다 수십만 배 정밀함을 요구함
     * 먼지 한 톨이나 원자 몇 개의 위치 차이로 전체 칩이 망가질 수 있음
     * 불순물의 농도나 공정 속도의 미세한 차이도 허용되지 않음
     * 반도체 제조의 역사는 이런 미세한 효과들과 치명적 영향에 맞서 싸워온 과정
     * 반도체 소자가 작아질수록 문제는 더 어려워짐
     * 현대 반도체 공장은 엄청난 정밀도와 예측가능성의 세계를 만들어내야 함
     * 공정을 방해할 수 있는 모든 효과를 차단하고, 미세한 편차를 찾아 제거해야 함
     * 이를 매년 수십만 장의 웨이퍼, 수억 개의 칩(각각 수십억 개 트랜지스터)을 생산하는 대량 생산 환경에서 유지해야 함

  반도체 공장(Fab)의 구조

     * 현대 반도체 공장은 보통 4개 층으로 구성됨
     * 핵심은 제조 공정이 이뤄지는 클린룸 층
     * 클린룸 아래에는 클린룸 작업을 지원하는 장비와 배관, 배선 등이 있는 서브팹 층(보통 2개)
     * 클린룸 위에는 공기를 여과해서 순환시키는 팬과 필터가 있는 공간
     * 클린룸에는 리소그래피, CVD, 이온 주입기 등의 개별 공정 장비(프로세스 툴)가 배치됨
     * 현대 로직 반도체 공장은 월 4~5만 장의 웨이퍼 생산을 위해 1000대 이상의 공정 장비 필요
     * 300mm 웨이퍼로 전환하면서 자동 운송 장비(AMHS) 사용 필수적으로 됨
     * 클린룸은 오염 최소화 설계. 반도체 공장은 Class 10/100 수준의 청정도 유지
     * 바닥의 HEPA/ULPA 필터를 통해 공기가 아래로 내려와 순환하는 구조
     * 외부 공기 유입을 막기 위해 클린룸을 양압으로 유지
     * 최신 공장은 FOUP으로 웨이퍼를 밀폐 이동하고, 공정 장비 자체를 밀폐하는 미니환경 전략 채택
     * 진동, 빛, 정전기, 전자기파 등 모든 간섭 요인을 차단하도록 설계
     * 서브팹에는 공정 장비를 지원하는 레이저, 진공 펌프 등이 배치됨
     * 독성 화학물질 취급, 폐기물 처리 등을 위한 특수 설비와 배관 필요
     * 공장 외부에는 산소/질소 분리 설비, 초순수 제조 설비 등 지원 시설 필요
     * 대형 반도체 공장은 원자력 발전소 1기 수준의 전력 소모(100MW)

  반도체 공장 건설

     * 수십만 제곱피트의 클린룸과 수백 에이커의 부지 필요
     * 수만 톤의 철골과 수십만 입방야드의 콘크리트 투입
     * 인텔은 신규 공장에 부르즈 할리파의 2배 콘크리트, 에펠탑의 5배 철골 사용
     * 정밀도 확보를 위해 수천 명의 전문 인력 필요. 인텔 신규 공장은 최대 9300명, TSMC는 1만 2천명 투입
     * blow down 후 6개월~1년의 장비 셋업 기간 필요
     * 공장 건설은 보통 2~4년 소요. 미국의 경우 아시아보다 더 오래 걸리고 비용도 30~400% 높음

  반도체 공장 건설 비용

     * 건설비의 70~80%는 공정 장비 구매에 사용됨
     * 건설비 중 기계/전기 설비 비중이 2/3 이상. 주택 건축의 경우 20% 미만
     * 장비 비용 중 가장 큰 비중은 리소그래피 장비. 전체 건설비의 20% 수준으로 공장 건물만큼 비쌈
     * 새로운 공정 노드로 넘어갈 때마다 공장 건설비 30% 상승
     * 트랜지스터 소형화에 따른 장비 가격 상승과 마스크/공정 수 증가가 주요 원인
     * 웨이퍼 크기 증가(300mm)에 따른 자동화 설비 필요도 원인 중 하나
     * 건설비 상승으로 직접 공장 보유하는 IDM 줄고, 설계와 제조 분리되는 파운드리 모델 확산

  GN⁺의 의견

     * 반도체 제조는 원자 수준의 정밀도를 요구하는 극한의 엔지니어링이라 할 수 있음. 현대 문명을 떠받치는 반도체의 복잡성과 정교함을 실감케 하는 내용
     * 반도체 산업의 트렌드를 읽는데 참고할 만한 정보들이 많음. IDM에서 파운드리로의 전환, 450mm 웨이퍼로의 전환 무산 등
     * 공장 건설 비용이 왜 천문학적인지, 어떤 비용이 얼마나 드는지를 구체적으로 잘 설명해줌
     * 공정의 복잡성을 감안하면 2~4년의 건설 기간은 오히려 빠른 편이라는 점이 흥미로움. 단 미국의 경우 한국이나 대만보다 훨씬 오래 걸린다는 점은 차이
     * 초고가 공정 장비의 핵심 공급사가 ASML, Lam Research, Applied Materials, 도쿄일렉트론 등으로 한정된다는 점에서 반도체 장비 산업의 과점 구도도 읽을 수 있음
     * 반도체처럼 정교한 공정 산업이 자동화, 무인화로 가면 어떻게 될지 궁금해짐. 인건비 비중이 낮아 자동화의 메리트가 적을 것 같기도 함

        Hacker News 의견

     * CHIPS And Science Act로 인해 TSMC와 Intel이 Arizona Phoenix에 새로운 반도체 공장을 건설 중이며, 이는 경제적 관점과 국가 안보 관점에서 필수적임
     * 생산까지는 수년이 걸리겠지만, 현재 건설과 미래 인력 교육, 지원 기업 생태계 등 CHIPS Act가 사람들의 삶에 미치는 영향이 벌써 나타나고 있음
     * TSMC 창업자 Morris Chang의 구술 역사 인터뷰:
          + 중국에서 대만으로, 미국에서 공부하고 일하면서 쌓은 경험과 인사이트로 대만에 TSMC를 설립함
          + 아시아 엔지니어는 꼼꼼하고 질서정연한 반면, 미국 엔지니어는 혁신적이나 덜 체계적이라고 평함. 두 그룹이 서로 보완할 수 있다고 봄
     * iPhone에서 앵그리버드를 하며 잊기 쉽지만, 현대 기술을 가능케 한 엄청난 연구, 자원, 전문 지식이 있음
     * 반도체 산업의 역사와 현재 딜레마에 대해 더 알고 싶다면 Chris Miller의 책 'Chip Wars' 추천
     * 한 고등학생이 부모 차고에서 ""저예산""으로 자신만의 반도체 공장을 만든 흥미로운 영상이 있음. 6502 CPU를 집에서 만드는 것까지 보고 싶었으나 아쉽게도 그 이상 발전시키진 않음
     * Apple, Nvidia 등은 칩을 설계하고 TSMC 같은 ""파운드리""에 제조를 맡기는 ""팹리스"" 모델로 전환함. 다양한 칩 회사의 주문을 모아 최첨단 공정 라인에 필요한 규모의 경제를 달성함
     * 장기적으로 AI 학습도 비슷한 모델이 될 수 있음
     * 전형적인 제조 공정의 공차가 최소 10배 정도 차이남. CNC 가공의 공차를 0.125mm라고 하는 건 말이 안됨
     * Moore의 제2법칙(Rock의 법칙)에 따르면 반도체 공장 비용이 4년마다 두 배가 됨. 30년 안에 단일 공장에 3조 달러 이상이 들게 되어, 경제적 고려에 의한 기술 개선의 상한선이 있음을 시사
     * 200억 달러를 확보해서 반도체 공장을 짓는 게 마치 부엉이 그리기 밈 같음
     * 반도체 공장이 엄청나게 복잡하다는 걸 알고 있었지만, 이 기사는 여전히 충격적임
     * 4천만 달러 규모 건설 현장을 방문하면 움직이는 노동자, 장비, 자재를 보며 4천만 달러가 움직이는 광경이구나 하는 생각이 듦
"
"https://news.hada.io/topic?id=14666","아타리사의 마이크 장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              아타리사의 마이크 장

마이크 장의 업적

     * 마이크 장은 1970년대 중반부터 1980년대까지 아타리의 산업 디자인 팀에서 일하면서 아케이드 게임기 캐비닛 디자인에 큰 기여를 함
     * 플레이어와 게임기 사이의 인터페이스 최적화를 위해 인체공학적 디자인을 추구했으며, 필요하다면 맞춤형 컨트롤과 부품 제작을 주장함
     * 자신만의 예술적 감각을 디자인에 접목시켜 당대 가장 상징적인 캐비닛들을 만들어냄

주요 디자인 작품들

     * 스타쉽 1 (Starship 1) - 1976년 출시된 초기 특허 캐비닛 디자인 중 하나
     * 하드 드라이빈 (Hard Drivin') - 비디오 게임 캐비닛 디자인 특허
     * 스타워즈 (Star Wars) - 콕핏 디자인에 참여. 영화에 자주 등장하는 유압 램 모양과 새시 스타일을 적용
     * 로드블래스터 (RoadBlasters) - 초기 컨셉 스케치를 그렸고, 유럽 시장을 위해 아일랜드 공장 초기 생산 과정을 직접 감독
     * 말리부 그랜드 프릭스 (Malibu Grand Prix) - 지붕이 없는 콕핏 운전석 캐비닛 디자인. 레이저디스크 게임용으로 제작되었으나 프로젝트는 중단됨
     * 파이어폭스 (Firefox) - 컨트롤 패널 디자인 담당
     * 하이드라 (Hydra) - 전체 캐비닛 스케치 디자인

미사일 커맨드 캐비닛 디자인

     * CAD가 없던 시절, 연필과 종이로 캐비닛을 설계하고 목재와 플라스틱 부품 도면을 만들어 사내 공방으로 보냈음
     * 초기 프로토타입은 미군 핵 콘솔에서 영감받아 설계되었으나, 현장 테스트 후 너무 큰 마키(marquee) 때문에 디자인을 크게 수정함
     * 경쟁사의 불법 복제를 막기 위해 신속한 양산에 주력했음

아타리 이후의 삶

     * 아타리 퇴사 후에는 핫로딩에 몰두하며 자동차 디자인을 했고, 1989년 구입한 1951년식 머큐리 쿠페를 직접 개조하는데 많은 시간을 보냄
     * 최근 자신의 모든 아타리 관련 문서를 스탠포드 대학에 기증하여 ""마이클 장 아타리 자료 컬렉션 1978-1991""이란 이름으로 보관되고 있음

GN⁺의 의견

     * 마이크 장은 인체공학과 게임 경험 사이의 연결고리를 중요하게 여겼던 것 같음. 단순히 하드웨어 디자인에 그치지 않고 게임과 플레이어의 상호작용을 극대화하는데 주력한 점이 돋보임
     * 산업 디자인이 아직 CAD 같은 툴이 없던 시절 수작업으로 설계를 진행했다는 점에서 그의 노력과 열정이 느껴짐. 게임 자체만큼 캐비닛 디자인도 중요했던 아케이드 전성기 시절의 숨은 공로자
     * 퇴사 후에도 자동차 개조에 몰두하며 자신의 디자인 열정을 이어간 모습이 인상적임. 평생을 디자인에 바친 장인 정신의 소유자
     * 오늘날 게임 개발에서 UX/UI 디자인이 중요해진 만큼, 고인의 업적을 되새기며 사용자 중심의 인터페이스와 하드웨어 설계가 지닌 가치를 되새겨 볼 필요가 있을 듯함

        Hacker News 의견

     * Star Wars 게임 캐비닛의 디자인이 가장 몰입감 있는 게임 경험으로 평가받음. 게임을 잘하지는 못했지만 게임을 하는 동안 우주선 조종사가 된 느낌이었음.
     * Mike의 사망 소식 자체는 슬프지 않음. 모두 언젠가는 죽기 마련이고 그는 충만한 삶을 살았던 것으로 보임. 그의 삶에 대해 조금이나마 통찰을 얻게 해줘서 감사함.
     * TRS-80 Model 1에서 처음 프로그래밍을 배웠던 10대 시절, 동시에 Space Invaders 게임을 하기 위해 부모님께 동전을 달라고 조르곤 했음.
     * 첫 세대 비디오 게임과 개인용 컴퓨터를 만든 사람들의 어깨 위에 서 있음. 그들의 작업으로부터 혜택을 받았고, 훌륭한 경력을 쌓을 수 있었음. 하지만 이제 그들은 나이가 들어 세상을 떠나고 있음. 그들의 작업은 기초적이면서도 영감을 주는 것이었음.
     * Starship-1 캐비닛의 사진을 보고 1979년이나 1980년경 Forum 303 Mall의 놀라운 아케이드가 떠올랐음. Atari 코인옵 ""스타일""은 Mike의 일관되고 응집력 있는 팀 덕분에 존재했던 것으로 보임. 그가 많이 그리워질 것임.
     * Star Wars 캐비닛을 처음 접했을 때 완전히 사로잡혔음. 캐비닛에 앉아있던 초조하면서도 흥분되던 기분이 기억남. Mike가 그것을 정확히 포착해냈음.
     * 사람들이 즐길 수 있는 멋진 실물을 만드는 사진들이 가구 제작 등을 시작해볼까 하는 생각이 들게 만듦. 하지만 공간과 장비가 필요해서 더 큰 집으로 이사하지 않고는 어려워 보임.
     * 자신의 상상력의 많은 부분을 Mike에게 빚지고 살아왔음을 깨달음.
     * 오늘 처음 그의 이름을 들었지만, 그에 대해 읽어보고 Facebook 페이지를 방문해보니 매우 재능있는 사람이었음을 알 수 있었음.
     * Mike Jang은 역사의 한 부분이 되었음. 명복을 빕니다.
     * 자신의 젊은 시절의 큰 부분이었음. 고마워요 Mike. 편히 쉬세요.
"
"https://news.hada.io/topic?id=14687","복잡한 주제에 대한 토론을 위한 최상의 방법, ChatGPT","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   복잡한 주제에 대한 토론을 위한 최상의 방법, ChatGPT

CQ2: 복잡한 토론을 위한 최적의 방법

  복잡하고 심도있는 토론의 어려움

     * 우리는 복잡하고 심도있는 토론을 좋아함
     * 하지만 전략적 토론, AI 정렬, 기술 설계 문서, 공공 정책 등 많은 토론에서 충동적인 반응과 구조 부족이 가장 큰 문제점으로 느껴짐
     * 대면 토론은 충동적 반응에 취약하고 좋은 구조를 제공하기 어려워 복잡한 주제에는 최악임

  서면 비동기 토론의 한계

     * 충동적 반응 문제 해결을 위해 서면 비동기 토론을 선호하지만, 이 경우에도 구조가 부족한 문제가 여전히 남아있음
     * Slack과 Discourse 같은 채팅/포럼 플랫폼에서 복잡한 토론을 하기가 얼마나 어려운지 알 수 있음

    Discourse의 한계

     * 토론이 정리되지 않은 댓글의 흐름으로 이뤄짐
     * 사람들이 서로 가로막고 주제가 뒤섞이는 방식은 복잡하고 긴 주제에 대한 심층 분석에는 적합하지 않음
     * 댓글이 시간 순으로만 정렬되어 토론에서 ""어디""에 있는지에 대한 개념이 없음

    Slack의 한계

     * Slack은 서면 비동기 토론에 최적화되어 있지 않음
     * 토론이 정리되지 않은 댓글의 흐름으로 이뤄짐
     * 스레드를 통해 특정 댓글에 대해 자세히 토론할 수 있지만, 스레드 내 댓글을 다시 자세히 토론할 수는 없음
     * Slack의 UI는 잘 구성된 생각보다는 빠르고 짧은 댓글을 보내도록 유도함

    인용문 지옥 (Quote hell)

     * 모든 채팅/포럼 플랫폼의 공통적인 문제
     * 한 주제에 대한 답변이 여러 댓글로 분산되고, 인용문과 답변을 머릿속으로 관리해야 함
     * 관련 없는 댓글들이 사이에 끼어들어 흐름을 깨뜨림
     * 2명 사이의 토론에서는 큰 문제가 아닐 수 있지만, 5명 이상이 참여하는 복잡하고 긴 토론에서는 엄청난 혼란을 야기함

  CQ2 - 복잡한 토론을 위한 도구

     * Slack, Discourse 등에 실망한 후, 복잡한 토론을 위해 특별히 만들어진 도구를 찾았지만 발견하지 못함
     * 그래서 그런 도구가 어떻게 작동하고 생겼으면 좋을지 탐구하고 만들기 시작함
     * CQ2는 복잡한 토론을 위한 무료 오픈소스 도구로, 아직 초기 단계이지만 토론을 매우 즐겁게 만들고 생산성을 획기적으로 높일 수 있을 것으로 생각함

    CQ2의 기능

     * 정리되지 않은 댓글 대신 스레드 내에 스레드를 만들어 각 스레드가 주제에 머물고 체계적으로 유지되도록 함
     * 특정 인용문을 중심으로 스레드를 만들고 한 곳에서 관련 답변을 모두 찾을 수 있어 인용문 지옥을 잊을 수 있음
     * 현재 스레드의 모든 상위 스레드를 같은 뷰에서 볼 수 있어 맥락을 절대 잃지 않음
     * 읽지 않은 댓글이 있는 스레드, 결론이 난 스레드를 확인하고 CQ2의 트리를 사용하여 특정 스레드로 빠르게 이동 가능
     * 해결된 스레드와 토론 전체가 해결되면 결론을 추가할 수 있음

    CQ2 사용 방법

     * 시작: 제목과 설명을 제공하여 토론 생성. 설명은 짧거나 길 수 있으며 맥락 설정, 필요한 정보 제공, 토론 시작 전 생각 공유에 사용됨. 그 후 참가자들과 링크 공유.
     * 댓글 달기와 스레드 생성: 토론에 대한 일반적인 의견은 메인(가장 왼쪽) 스레드에 게시. 설명이나 댓글의 특정 텍스트에 답글을 달려면, 텍스트를 선택하고 ""새 스레드에서 답글"" 버튼을 클릭하여 해당 인용문을 중심으로 새 스레드를 만들고 답변. 댓글 전체에 답글을 달 수도 있음.
     * 스레드 열기: 누군가 특정 인용문에 대해 이미 스레드를 만든 경우 인용문이 강조 표시되며, 클릭하여 해당 스레드를 열고 토론을 계속할 수 있음. 전체 댓글에 대해 스레드가 만들어진 경우 강조 표시된 댓글 버튼이 있음.
     * 탐색: 스레드 간 이동은 트랙패드로 스크롤하거나 마우스 휠과 Shift 키를 사용. 탐색 모음의 트리를 사용하여 특정 스레드로 빠르게 이동 가능. 트리에는 스레드의 댓글 수, 읽지 않은 댓글 수, 스레드가 마무리되었는지 여부도 표시됨.
     * 마무리: ""Conclude thread"" 버튼을 사용하여 스레드 마무리 가능. 마무리된 스레드에는 상단에 녹색 배지와 녹색으로 된 결론 댓글이 있음. 전체 토론을 마무리하려면 탐색 모음의 ""Conclude discussion"" 버튼 사용.

  향후 계획

     * 리치 텍스트, 작업 공간, 스레드 사용자 지정 제목, 멘션, 슬로우 모드, 유용한 반응(이모지 이상), 토론에서 간과된 부분을 찾는 데 도움이 되는 AI 어시스턴트 등 더 많은 흥미롭고 유용한 기능 계획 중
     * CQ2를 통해 사람들이 더 나은 토론을 하고, 궁극적으로 체계적으로 진실에 도달하고, 다른 사람을 더 잘 이해하며, 더 나은 의사 결정을 내릴 수 있도록 돕고 싶음

GN⁺의 의견

     * 복잡한 주제에 대해 생산적이고 체계적인 토론을 하는 것은 쉽지 않은 일임. CQ2는 이를 위한 특화된 도구로서 기존 채팅/포럼 플랫폼의 한계를 잘 짚었고, 그에 대한 솔루션을 제시하고 있음.
     * 특히 스레드 내 스레드 기능은 주제에서 벗어나지 않으면서도 세부 사항을 깊이있게 토론할 수 있게 해줄 것으로 보임. 또한 전체 토론 트리를 한 눈에 볼 수 있어 토론의 진행 상황과 자신의 위치를 파악하기에 유용해보임.
     * 다만 실제 토론에서 CQ2가 얼마나 직관적으로 사용될 수 있을지, 그리고 사용자들이 기존의 토론 방식에서 벗어나 CQ2의 방식에 적응할 수 있을지는 지켜봐야할 것 같음. 사용성과 접근성 면에서의 개선이 더 필요할 수 있음.
     * CQ2가 제시하는 방향성은 분명 복잡한 토론을 위해 필요한 부분들을 많이 담고 있음. 앞으로의 발전 방향에 따라 협업과 토론 문화에 긍정적인 영향을 줄 수 있는 도구가 될 것으로 기대됨.

        Hacker News 의견

   Here are the key points from the Hacker News comments, summarized as a bullet list:
     * Usenet newsreader software solved complex discussions effectively
          + Threaded view showing structure of many posts on a single screen
          + Unread threads/posts highlighted, quick navigation between unread posts
          + Web and mobile interfaces have been a step back in efficiency and depth
     * Image board style (e.g. 4chan) works well for long-form discussions
          + Posts have unique IDs, can be linked/quoted, forming a traversable network
          + Displayed in chronological order
          + Some constraints (character limits, reply depth) can aid clarity
          + Ideal: Linear timeline with easy-to-follow references between posts
     * Ability to link a comment reply to multiple parents would be an improvement
          + Allows responding to a subset of replies together
          + Avoids redundant ""see my reply here"" comments
          + Embrace the directed acyclic graph (DAG) nature of discussions
     * Getting people to use even one layer of comment threading is difficult
          + Complex discussions often devolve to ""let's jump on a quick call""
          + ML-generated summaries of calls posted back to the thread could help
     * Starting threads around specific source snippets is valuable
          + Encourages people to read the source before commenting
          + Challenges: handling non-text media, dealing with overlapping excerpts
     * Google Docs-like UI requires many clicks to open each thread
          + Linear format (like Discourse) easier for catching up on updates
          + Ability to reply to several comments in a summary saves time
          + Infinite back-and-forth better handled in real-time, then summarized
     * Visuals are a missing piece in text-based discussions
          + Different mental images lead to misalignment
          + Center visuals (images, videos, diagrams), organize comments around them
          + Avoid defensive behavior by focusing on the problem vs. individual comments
     * Meetings with >6 people are poor for complex discussions
          + Good note-taking, clear action items help
          + Tools like Miro can facilitate larger groups when absolutely required
     * Anonymity was a killer feature in a custom discussion platform
          + Allowed uncomfortable ideas to surface without fear of retribution
          + Showing names on every comment (like CQ2) may limit this
     * Room for a more focused tool than Reddit for this problem
          + Trauma from visiting Discord highlights the need

   In summary, while existing solutions have made progress, there are still opportunities to improve how we handle complex discussions online, by borrowing proven ideas and adding new capabilities around linking, visualization, summarization, and healthy group dynamics.
"
"https://news.hada.io/topic?id=14757","node-mlx - Node.js용 머신 러닝 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node-mlx - Node.js용 머신 러닝 프레임워크

     * 애플의 MLX기반 (애플실리콘용 어레이 프레임워크, NumPy와 비슷)
     * MLX의 공식 Python API를 node.js 에 맞게 이름만 변경(snake_case to camelCase)
     * JS 언어 한계로 일부 예외 있음 : 배열 기본이 int 대신 float, 연산자 오버로딩 없음, [] 대신 .item, .itemPut_ 사용
     * 일부 기능들은 아직 미구현
"
"https://news.hada.io/topic?id=14638","'심폐 건강'은 질병 및 사망의 강력하고 일관된 예측 지표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    '심폐 건강'은 질병 및 사망의 강력하고 일관된 예측 지표

심폐체력은 성인의 이환과 사망의 강력하고 일관된 예측 인자임: 1.99억 명 이상의 관찰을 나타내는 199개의 코호트 연구에 대한 메타분석 개요

  주요 질병 및 사망 결과에 대한 심폐체력의 예측력 평가

     * 이 연구는 1.99억 명 이상의 관찰을 나타내는 199개의 고유한 코호트 연구에서 26개의 체계적 리뷰를 식별하였음.
     * 심폐체력은 다양한 만성질환 발생 및 사망 관련 결과에 대해 강력하고 일관되게 보호 작용을 보였음.

  일반인에서 심폐체력과 사망 위험 관계

     * 높은 심폐체력은 모든 원인, 심혈관 질환, 심장 돌연사, 모든 암, 폐암으로 인한 조기 사망 위험을 41~53% 감소시킴.
     * 심폐체력이 1-MET 높아질 때마다 조기 사망 위험이 7~51% 감소하는 용량-반응 관계가 있었음.
     * 남녀 간 차이는 결과에 따라 유사했으나, 여성의 경우 표본 크기가 작아 신뢰구간이 더 컸음.

  일반인에서 심폐체력과 만성질환 발병 위험 관계

     * 높은 심폐체력은 고혈압, 심부전, 뇌졸중, 심방세동, 치매, 우울증 발병 위험을 37~69% 감소시킴.
     * 심폐체력이 1-MET 높아질 때마다 만성질환 발병 위험이 3~18% 감소하는 용량-반응 관계가 있었음.
     * 대부분의 연구가 주로 남성만 대상으로 했기 때문에 일관성과 간접성으로 인해 근거 수준은 매우 낮음에서 낮음으로 평가됨.
     * 남성의 경우 높은 심폐체력과 전립선암 발병 사이에 유의한 연관성은 없었음.

  만성질환자에서 심폐체력과 예후 관계

     * 암, 심부전, 심혈관질환이 있는 만성질환자에서 높은 심페체력은 모든 원인 및 특정 유형의 사망 위험을 19~73% 감소시킴.
     * 심장박동회복 지연이 있는 관상동맥질환 환자는 부작용 위험이 83% 감소함.
     * 대부분 남성만 포함하고 표본 크기가 작아 편향 위험, 간접성, 정밀성 부족으로 인해 근거 수준은 매우 낮음~낮음으로 평가됨.

  임상실무에의 적용

     * 심폐체력은 다양한 건강 결과에 대해 강력한 예측력이 있어 위험 계층화 도구로 활용 가치가 높음.
     * 연령, 성별, 인종에 관계없이 심폐체력의 예측력이 유지됨.
     * 개입없이도 30%가 심폐체력을 1-MET 높일 수 있었고, 이는 대부분에게 달성 가능한 수준임.
     * 반복적인 심폐체력 측정을 통해 조기사망 고위험군을 식별하고 운동처방을 제공할 수 있음.

  추가 연구 필요성

     * 여성을 더 많이 포함하는 양질의 연구 필요
     * 유방암이나 우울증 등 추가 건강 결과에 대한 연구 필요
     * 만성질환자에서 대규모 장기 추적 관찰 연구 필요
     * 반복 측정을 통해 인과관계 규명 필요

GN⁺의 의견

     * 이 연구는 심폐체력의 예측력을 다양한 건강 결과에 걸쳐 일관되고 강력하게 증명해 주었다는 점에서 의미가 크다. 운동 관련 분야 전문가들 사이에서는 이미 잘 알려진 내용이지만, 이렇게 체계적 문헌고찰을 통해 객관적 근거를 제시한 것은 고무적이다.
     * 다만 대부분의 연구가 남성 위주로 이뤄진 점, 표본 크기가 작은 점 등은 향후 개선이 필요해 보인다. 특히 근거 수준을 높이려면 무작위 대조군 연구가 필요할텐데, 장기간의 대규모 연구가 쉽지 않을 것 같다.
     * 흥미로운 점은 1-MET 상승이 갖는 예후 예측력이다. 임상시험에서 의미있는 최소한의 차이로서 1-MET를 활용할 수 있겠다. 다만 질환이나 연령에 따라 1-MET의 의미가 다를 수 있으므로 이에 대한 추가 연구도 필요할 것 같다.
     * 심폐체력은 운동을 통해 개선이 가능한 지표라는 점에서도 임상적 의의가 크다. 심폐체력이 낮은 사람을 선별해 적극적인 운동 처방을 제공하는 것이 예방의학적 측면에서 효과적일 것이다.
     * 임상에서 심폐체력을 평가하는 방법에 대한 합의나 지침이 마련된다면, 일상적인 건강 체크의 한 부분으로 자리잡을 수 있을 것 같다. 단순히 질병의 위험인자를 찾는 것을 넘어, 건강 수준을 평가하고 건강 증진을 도모하는 방향으로 나아가야 할 때다.

        Hacker News 의견

     * 일부 동료들은 달리기에 푹 빠져 있지만, 자신은 달리기가 가끔은 재미있지만 대부분은 고통스러움
     * 가장 운동을 잘하는 동료가 초보 러너에게 대부분 쉬운 세션을 해야 한다고 말했는데, 그에게 쉽다는 것은 어색하고 부자연스러울 정도로 느린 속도라고 함
     * Zone 2에서 대부분의 운동을 해야 유산소 체력을 기를 수 있다는 것을 알게 되었고, 이는 대화를 나눌 수 있을 정도의 속도로 특징 지어짐
     * 아마추어 울트라 러너와 같은 운동 선수들도 같은 말을 함
     * 저자는 아마도 Zone 3 이상에서 많이 조깅을 해왔던 것 같음. 더 열심히 할수록 더 많은 이득이 있다는 것이 모든 것에 대한 기본 논리인 것 같기 때문
     * 오늘은 그냥 실내 자전거를 타고 ""대화할 수 있을"" 정도의 속도로 1시간 동안 오디오북을 들으면서 사타구니가 저리지 않도록 해야겠다고 생각함
     * 운동을 하면 사망률과 이환율의 거의 모든 지표가 감소한다는 것을 보여주는 수백에서 수천 개의 연구가 있음에도 인과 관계가 확립되지 않았다고 주장하는 사람들이 있는 것이 이상함
     * 연구가 상관관계만 보여준다고 암시하는 사람들은 과학에서 인과 관계를 어떻게 확립하는지 이해하지 못하는 것 같음
     * 흥미로운 통계에 따르면 체력이 약하고 흡연자인 경우, 금연보다 먼저 체력을 기르는 것이 더 큰 효과가 있음 (흡연을 옹호하는 것은 아님)
     * 다행히도 이것은 (다른 이 정도 영향력이 있는 것들에 비해) 상대적으로 쉽게 바꿀 수 있어 보임
     * 지난 12개월 동안 VO2max를 40에서 57로 높이고 (Apple Watch에 의해 보고됨) 30파운드를 감량한 것은 변화를 가져온 경험이었음. 하루에 90-120분의 유산소 운동으로 얻은 여분의 에너지가 다른 모든 것을 더 효율적으로 만드는 효과도 있었기 때문에 어떤 것도 포기할 필요가 없었던 것이 가장 좋았음
     * 또한 정신 건강에 절대적으로 놀라운 효과가 있음. 매우 효과적이고 (무료이기 때문에) 정신 건강의 1차 치료법으로 간주되지 않는 것이 아쉬움
     * 관계는 선형적이지 않음. 주당 2200 MET-분 이상에서는 심혈관계 이점을 상쇄하는 암 위험 증가가 있음. 운동 과다와 관련된 위험이 있으며, 건강한 것은 좋지만 울트라 마라톤 러너나 기타 극단적인 피트니스 애호가가 되는 것은 장기적으로 건강에 해로우며, 예상보다 빨리 위험이 시작됨 (주당 2200 MET-분은 주당 약 3시간의 8mph 달리기에 해당)
     * Apple Watch는 적절한 심장 건강 모니터링 기능을 가지고 있음. 절대값은 정확하지 않지만(VO2Max 추정치를 사용하기 때문에 대사 스트레스 테스트를 할 때만 정확함), 추세를 주시하는 데는 좋음
     * 2년 넘게 주 2회 브라질리언 주짓수를 해왔음. 심폐 체력은 확실히 향상되었고 정신 상태에 큰 도움이 된 것 같음
     * 하지만 다른 모든 신체적 측면에서 몸에 좋지 않은 것 같음. 목 꺾임, 척추 비틀림, 목 조름으로 인한 목 쓰림, 가끔 눈에 멍듦
     * 심폐 건강과 정신 건강의 개선, 다른 한편으로는 다른 모든 신체적 측면 사이에서 고민됨
     * 운동이 부정적이라고 생각하며 제목을 오해한 사람들을 위해:
     * 연구 결과, 높은 CRF는 조기 사망 위험, 만성 질환 발병(고혈압, 심부전, 뇌졸중, 심방세동, 치매, 우울증), 기존 만성 질환이 있는 사람들의 불량한 예후와 강하게 연관되어 있음
     * 다양한 건강 결과에 걸쳐 일관된 증거는 CRF의 중요성과 이 척도를 일상적인 임상 및 공중보건 실무에 통합할 필요성을 보여줌
     * 향후 연구는 근거가 제한적이고 연구의 질을 개선함으로써 증거의 확실성이 매우 낮은 것으로 평가된 결과에 초점을 맞춰야 함
     * 매일 걷고 주 2회 웨이트 트레이닝을 하고 있음. 지금까지는 좋은 느낌이지만 어려운 점은 계절(문자 그대로와 비유적으로)에 걸쳐 수년 동안 하는 것임
"
"https://news.hada.io/topic?id=14717","미국, 애플의 직원 불법 심문 및 노조 전단 압수 판정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미국, 애플의 직원 불법 심문 및 노조 전단 압수 판정

미국 노동위원회, 애플이 불법적으로 직원들을 심문하고 노조 전단을 압수했다고 판결

     * 전국노동관계위원회(NLRB)는 2022년 뉴욕시 월드 트레이드 센터 매장의 직원들에 대해 애플이 불법적으로 질문했다고 판결함. 이는 직원들이 구체적으로 노조 지지 성향에 대해 질문을 받았다고 판단한 판사의 조사 결과를 확인한 것임.
     * NLRB는 행정법 판사 Lauren Esposito의 결정을 확인함. Esposito 판사는 작년 애플이 불법적으로 직원들이 월드트레이드센터 매장의 휴게실 테이블에 노조 전단을 두는 것을 막고, 전단을 압수하고, 직원들의 ""보호된 협조 활동""에 대해 심문했다고 판결했음.
     * Esposito 판사는 애플이 노조 문제에 대해 직원들에게 불법적으로 질문하는 것과 매장 직원 휴게실에서 노조 전단을 압수하는 것을 중지하라고 명령함.
     * 월요일의 판결은 Bloomberg에 따르면 NLRB가 애플에 내린 첫 번째 결정이며, NLRB 대변인 Kayla Blado가 인용한 것임.
     * NLRB는 애플의 위반 행위에 대해 벌금이나 직접적인 처벌을 부과할 수 없음.
     * 애플은 Forbes의 의견 요청에 즉시 응답하지 않음.

NLRB vs 애플 관련 배경

     * Bloomberg에 따르면 애플에 대한 다른 소송이 아직 계류 중이며, 한 NLRB 위원이 애플이 불법적으로 노조가 결성된 직원들을 특정 혜택에서 배제했다고 주장한 사건을 언급함.
     * 최근 몇 년 동안 뉴저지주 숏힐스, 오클라호마시티, 메릴랜드주 타우슨 등 여러 애플 스토어에서 노조 결성을 추진해왔으며, 후자 두 곳은 성공적으로 노조를 설립함.
     * 월드트레이드센터 매장 직원 외에도 애플 직원들은 노조 결성을 추구하면서 반대에 부딪힘. NLRB는 2022년 말 애플이 애틀랜타 매장에서 의무적인 반노조 회의를 개최했으며, 경영진이 직원들에게 강압적인 발언을 했다는 사실을 발견함.

GN⁺의 의견

     * 구체적인 처벌이 내려지지는 않았지만 애플의 불법적 노조 탄압 행위에 대해 NLRB가 공식적으로 인정한 것은 의미있는 일이다. 앞으로 다른 IT기업들의 노조 결성 움직임에도 영향을 미칠 수 있을 것이다.
     * 애플뿐만 아니라 아마존, 구글, 마이크로소프트 등 대형 IT기업들은 노조 결성을 달가워하지 않고 있다. 경영진 입장에서는 노조가 생기면 임금 인상 등 요구가 많아질 수밖에 없기 때문이다. 하지만 직원들의 단결권은 법으로 보장된 권리이므로 기업이 자제해야 할 것이다.
     * 특히 애플은 제품 가격이 타사 대비 높은 편이고 고객 만족도와 충성도가 높아 높은 마진을 얻고 있다. 그만큼 직원들에게 좋은 대우를 해줄 여력이 있음에도 불구하고 노조 결성을 탄압하고 있다는 점에서 비판의 소지가 크다.
     * 미국에서는 기술 분야 종사자들의 노조 가입이 매우 적은 편인데, 앞으로 애플 사태를 계기로 IT업계 내 노조 활동이 보다 활발해질 가능성이 있다. 구글, 아마존 등에서도 직원들의 단체 행동 사례가 늘어나고 있어 주목된다.
     * 한편 노조 문제로 인해 애플의 기업 이미지가 훼손될 수 있다는 점도 무시할 수 없다. 인권, 차별 금지 등을 강조해온 만큼 직원 처우 개선에도 적극 나서지 않는다면 소비자들의 불매 운동 등 부정적 여론에 직면할 수 있을 것이다.

        Hacker News 의견

   요약해보면 다음과 같습니다:
     * 미국 기업들이 노조 결성을 막으려 하는 이유에 대한 의문이 제기됨. 노조가 생산성이나 기업 생존에 큰 영향을 미치지 않는다는 데이터가 있음에도 불구하고 독단적이고 자아도취적인 행태를 보임.
     * NLRB(미국 노동관계위원회)는 애플의 위법행위에 대해 벌금을 부과하거나 직접 처벌할 수 없어 2년간의 조사의 실효성에 의문을 제기함.
     * 일본에서는 노조와 기업 간에 공생 관계가 있음. 노조는 매우 강력하지만 기업에 지분을 갖고 이사회에 참여하기도 함. 일본의 노조는 태만한 직원을 감싸지 않음.
     * 트럼프 행정부는 반(反)노동적인 인사를 NLRB 수장으로 임명했으나, 바이든 행정부는 취임 직후 이를 교체함. ACLU는 바이든 행정부의 교체가 불법이라며 NLRB의 모든 행위가 불법이라고 주장하는 소송을 진행 중임.
     * 애플은 비밀주의가 강해 직원들이 자신의 업무에 대해 말하기 어려움.
     * 기업들은 법 위에 있다고 생각하는 경향이 있으며, 이에 도전받으면 끝없는 반소와 항소를 제기함. 사업체는 국민과 선출된 대표자의 의지에 따라 존재함.
     * 미국의 ""노조 문제""는 대부분 노동자와 지나치게 탐욕스럽고 학대적인 고용주 간의 충돌에서 비롯됨. 정부가 노동자를 위한 강력한 법적 보호를 제공한다면 노조 가입 필요성이 줄어들 수 있음.
     * 애플의 생태계와 제품을 좋아하는 사람도 노조 탄압에는 반대함. 애플의 높은 수익성과 지속가능성을 감안할 때 노조를 포용하는 것이 기업 정신에 부합함.
     * 노조 조직을 탄압하는 기업은 신뢰하기 어려움.
"
"https://news.hada.io/topic?id=14732","KAIST 류석영 교수, 고려대와 자바스크립트 생태계의 안정성 보장할 수 있는 기술 개발 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          KAIST 류석영 교수, 고려대와 자바스크립트 생태계의 안정성 보장할 수 있는 기술 개발 성공

     * 자바스크립트는 가장 활발하게 사용되는 프로그래밍 언어로, tc39에서 유지 관리하는 ecma 262라는 언어 사양과 다양한 구현을 갖추고 있습니다.
     * 특히 E 262의 연례 릴리스에서 사양의 정확성과 적합성을 검사하는 자동화된 메커니즘이 부족하여 문제가 발생했습니다.
     * 프로 사양에서 기계화된 사양을 자동으로 추출하여 적합성 테스트 프로그램 합성 및 유형 분석 수행과 같은 다양한 응용이 가능한 새로운 접근 방식이 제안되었습니다.
     * 추출된 기계화된 사양을 통해 특수 목적 언어 구현을 자동으로 생성할 수 있으며, 자바스크립트 언어 개발에서 실제로 사용할 수 있도록 오픈소스로 공개되었습니다.
     * 프로그래밍 언어 개발에 대한 유망한 접근 방식은 먼저 기계화된 사양으로 언어를 설계한 다음 이를 통해 Pro 사양과 언어 구현을 모두 생성하는 것이며, 이는 JavaScript에서 실현 가능하고 실용적인 것으로 입증되었습니다.
     * 이 작업에 대한 자세한 내용은 ACM의 2024년 4월 커뮤니케이션에서 확인할 수 있으며, 기존 프로그래밍 언어와 새로운 프로그래밍 언어 모두에 적용할 수 있는 방법을 제시합니다.

   이런 거 소개해주는 기사는 정작 논문 원문에 대한 링크 같은 건 제공을 해주는 경우가 드물어서 아쉽습니다.
   일부 언론의 과학 관련 기사에서는 맨 밑에 해당 기사에서 소개하는 논문을 찾아볼 수 있게 DOI를 써주던데, 그런 관행이 좀 더 널리 퍼졌으면 좋겠습니다.
   아무튼 그래서 위 기사에서 말하는 논문 및 Github 링크를 제가 직접 찾아서 가져왔습니다.
     * 논문: JavaScript Language Design and Implementation in Tandem
     * 요약영상: CACM - JavaScript Language Design and Implementation in Tandem
     * 보도자료: 자바스크립트 안정성을 책임지다​
     * Github: https://github.com/es-meta/esmeta

   앗 저도 뉴스만 가져왔었는데 논문 관련 내용 보충해주셔서 감사합니다!

   euma는 오타같네요!

   아래는 관련 YouTube 영상입니다.
   https://www.youtube.com/watch?v=JGxc-KIUnQY

   위 내용은 코얼리를 이용해 요약한 것입니다.
   https://corely.ai/content/…
"
"https://news.hada.io/topic?id=14725","Python asyncio의 작동 원리: 처음부터 재구성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Python asyncio의 작동 원리: 처음부터 재구성

     * Asyncio는 Python에서 I/O 바운드 프로그램을 다루는 좋은 방법이며, 기본적으로 Python Generator 위에 좋은 레이어를 제공함
     * Generator는 코드를 메모리 효율적으로 만들어 주며, yield 키워드를 사용해 함수를 일시 중지하고 재개할 수 있음
     * yield from을 사용하면 generator가 sub-generator나 iterable 객체를 호출할 수 있어 generator 체인을 만들 수 있음

이벤트 루프

     * Asyncio의 핵심은 현재 task를 실행하고 관리하는 event loop임
     * Event loop는 task 목록을 반복하면서 next(task)로 각 task를 실행함
     * Task는 I/O 작업 중에 yield를 사용해 실행을 일시 중지하고 제어권을 event loop에 넘김

슬리핑

     * yield from을 사용해 task에 sub-generator를 추가할 수 있음
     * Sleep generator를 추가하면 지정된 시간까지 task 실행을 일시 중지할 수 있음
     * Sleep이 while 루프를 빠져나가면 StopIteration 예외가 발생해 task 함수의 yield from이 다음 코드 줄로 계속 진행됨

Yield에서 Await로

     * __await__ 던더 메서드와 async 키워드를 사용해 yield에서 await로 전환할 수 있음
     * await 키워드는 클래스 인스턴스의 __await__ 메서드를 호출하거나 코루틴(async 함수로 생성된 객체)에서 사용 가능
     * await 키워드는 yield from의 동의어로 볼 수 있으며 약간의 추가 유효성 검사 규칙이 있음
     * 자체 Task 클래스를 만들어 __await__ 메서드를 구현하고, create_task 함수로 생성한 task를 이벤트 루프에 추가함
     * 이벤트 루프 관리자는 task를 실행하고, StopIteration 예외 발생 시 task를 완료 처리함
     * Sleep 함수도 async 호환되도록 수정해야 함

AsyncIO와 Await

     * 위 코드에서 ""jacobio""를 ""asyncio""로 교체하면 asyncio 패키지를 완전히 사용하게 됨
     * Asyncio는 더 많은 작업을 수행하지만, 기본 generator에서 asyncio의 핵심 부분을 처음부터 재현할 수 있음
     * 실제 asyncio 패키지에서는 asyncio.gather() 등의 함수를 사용해 여러 task를 처리할 수 있음

GN⁺의 의견

     * 이 글은 asyncio의 작동 원리를 generator를 사용해 쉽게 설명하고 있어, asyncio를 처음 접하는 개발자들에게 큰 도움이 될 것 같음
     * Asyncio는 고성능 I/O 처리에 최적화된 라이브러리로, 이 글을 통해 그 내부 구조를 이해하면 실제 프로젝트에서 더 효과적으로 활용할 수 있을 것임
     * 다만 실제 asyncio는 훨씬 더 복잡한 구조를 가지고 있어, 실무에서 사용하기 위해서는 공식 문서 등을 통해 더 깊이 있는 학습이 필요할 것으로 보임
     * Asyncio와 유사한 기능을 제공하는 다른 라이브러리로는 Trio, Curio 등이 있는데, 이들과의 차이점을 비교해 보는 것도 흥미로울 것 같음
     * Asyncio를 도입할 때는 기존 동기 코드와의 호환성, 에러 처리, 테스트 등 고려해야 할 사항이 많으므로, 충분한 검토와 준비가 필요할 것으로 보임
"
"https://news.hada.io/topic?id=14659","MIT, 채용 및 승진 시 DEI 진술서 요구사항 폐기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MIT, 채용 및 승진 시 DEI 진술서 요구사항 폐기

     * MIT, 학생 입학, 교수 채용, 과학 협회 지원금 신청 시 요구되던 DEI(다양성, 형평성, 포용성) 선언문 사용을 중단함.
          + DEI 선언문은 지원자의 DEI 철학, 활동 이력, 선발 시 DEI 이니셔티브 이행 계획 등을 진술하는 것임
          + DEI 선언문은 강요된 발언이며, 지원 내용과 무관할 뿐 아니라 DEI 외에도 사회에 기여하는 다양한 방식이 있다는 사실을 무시한다는 점에서 문제가 있음
          + 일부 DEI 선언문은 최근 대법원의 인종 기반 입학 결정에 위배될 수 있음

MIT의 DEI 선언문 폐지 관련 보도

     * MIT가 DEI 선언문 폐지를 조용히 진행 중이며, 이를 널리 알리기 위해 노력 중임
     * 풍자 웹사이트 The Babbling Beaver가 처음 보도했으나 사실로 확인됨
     * MIT 총장인 Sally Kornbluth가 모든 학교와 학과의 교수 채용 및 승진에 DEI 선언문 사용을 금지했음
     * 익명 설문 결과 약 2/3의 MIT 교수가 DEI 선언문을 싫어한다고 함
     * 개별 학과가 다른 대학 지원 시 DEI 선언문 작성을 계속 가르칠지는 미지수임
     * DEI 옹호자들은 아직 크게 반응하지 않고 있음
     * MIT 교수협의회 관계자는 DEI 선언문 요구 중단을 교수들에게 공개했으나 학생들에게는 발표 계획이 없다고 함
     * MIT 언론자유협회 임원은 강제 발언 종식 요구가 수용된 것을 기쁘게 생각한다고 밝힘

GN⁺의 의견

     * DEI 선언문 폐지는 학문의 자유와 표현의 자유 수호에 있어 큰 의미가 있는 사건임. 다만 아직 MIT 내부적으로만 공유되고 있어 향후 공식 발표와 후속 조치가 주목됨
     * DEI가 추구하는 가치 자체는 중요하나, 강제나 할당제 식의 접근은 역차별 논란을 야기하고 오히려 반발을 불러일으킬 수 있음. 자발적이고 장기적인 인식 개선이 필요함
     * 이공계 대학인 MIT에서 DEI 선언문을 폐지한 것은 상징적 의미가 큼. 타 대학들에게도 영향을 미칠 것으로 보이며, 좀 더 학문 본연에 충실한 평가 기준이 자리잡기를 기대함
     * 다만 트럼프 행정부에서 시행한 '반(反)인종차별 행정명령'처럼 보수 진영의 정치적 도구로 악용될 소지도 있음. 대학의 자율성 보장과 건전한 사회적 합의 도출이 필요할 것으로 보임

        Hacker News 의견

   요약해보자면:
     * HN에서는 이념 논쟁 대신 호기심 어린 대화를 나누는 것이 바람직함. 주제가 이념적일수록 더 사려 깊고 실질적인 댓글이 필요함.
     * DEI(다양성, 형평성, 포용성) 선언문에 대해 합리적인 근거를 들어 옹호하는 주장을 들어보고 싶음. 많은 사람들이 이에 대해 회의적임.
     * 유럽의 작은 나라에 사는 입장에서는 미국식 인종/성 다양성 강조가 와닿지 않음. 같은 배경을 가진 사람들 사이에서도 다양한 세계관이 존재할 수 있음.
     * 공학 교육은 공학에 집중해야 함. 인종과 상관없이 기술 발전에 기여해야 함.
     * 극단적인 사례들을 모아서 한쪽 입장을 옹호하는 것은 설득력이 없음. 실제 통계와 맥락을 고려한 주장이 필요함.
     * DEI 관련 글쓰기는 내향적인 사람들에게 불편할 수 있음. 사생활 정보를 공개하고 싶지 않을 수 있음.
     * DEI가 개인의 능력보다 피부색을 중시하는 방향으로 나아가서는 안 됨.
     * MIT가 SAT를 부활시키고 증거 기반 접근을 택한 것을 환영함. 인종 구성비 자체가 조직의 질을 좌우하지는 않음.
     * 일부 대학의 DEI 선언문 요구가 이해하기 어려움. 오히려 풍자와 비꼼의 대상이 되고 있음.
"
"https://news.hada.io/topic?id=14664","볼라드(Bollards): 그 필요성과 종류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        볼라드(Bollards): 그 필요성과 종류

볼라드의 정의와 필요성

     * 볼라드(bollard)는 차량이 의도적이든 아니든 볼라드와 겹치는 위치로 이동하려고 할 때, 차량이 통과할 수 없도록 만드는 물리적인 장벽을 의미함
     * 볼라드는 때로는 물리적 환경에 내장되기도 하고, 때로는 그렇지 않기도 함. 이동 가능하거나 고정될 수 있으며, 크고 눈에 띄거나 그렇지 않을 수도 있음
     * 한 지역 시 기술자는 보행자들이 모여서 큰 도로를 건너려고 하는 곳 근처에 볼라드를 설치하는 것이 부적절한 이유를 다음과 같이 설명함
          + 차량이 장벽과 충돌할 경우의 결과가 보호되지 않은 물체와 충돌할 때보다 덜 심각할 것으로 예상될 때 장벽(볼라드, 가드레일 등)의 설치를 고려함

볼라드가 없을 때 발생하는 문제

     * 볼라드가 없는 곳에서는 과속하는 차량들과 충분히 자주 사망 및 파괴가 발생함
     * 차량을 주차하려면 올바른 페달을 눌러야 하는데, 운전자가 익숙하지 않은 차량을 운전하거나 서두를 때 등 때로는 잘못된 페달을 밟게 됨. 이러한 작은 실수로 인해 사람들이 사망하고 사업체와 건물이 파괴되어서는 안 됨
     * 볼라드가 없는 곳에서는 모든 사람이 올바르게 행동하더라도 여전히 사고가 발생함
          + 예를 들어, 몇 년 전 캘리포니아에서 한 유명 소프트웨어 개발 커뮤니티의 멤버 부부가 어느 날 밤 인도를 걷고 있었는데, 멀리서 과속하던 차량이 다른 차량과 충돌하면서 인도로 돌진했고, 부인은 즉사했으며 남편은 의식을 잃었다가 며칠 후 깨어나 비보를 듣게 됨
          + 지역 시 기술자는 이러한 사고에 대해 형사책임을 져야 함에도 불구하고, 기사에서는 '이는 피할 수 없는 비극'이라는 표현이 가득함
     * 볼라드를 필요한 곳에 설치하지 않는 것은 운전할 때 안전벨트를 매지 않는 것과 유사하며, 안전벨트가 자동차에서 제공되지 않아야 한다고 주장하는 것과 같음
     * 볼라드는 차량 외부에 있는 사람들을 위한 안전벨트와 같음
     * 기업들도 볼라드의 중요성을 이해하고 공간을 사용하는 사람들에 대한 책임감을 인식하고 있음
          + 예를 들어, 7-Eleven은 볼라드를 설치하지 않아 두 다리를 잃은 남성에게 9,100만 달러를 지급하기로 함

볼라드가 없을 때의 모습

     * 상점 앞에서 주차하다가 잘못된 페달을 밟아 발생한 사고 사례들이 제시됨
          + 캡션에서는 ""여성이 잊어버렸다""고 표현하고 있는데, 이는 여성혐오적 정서를 반영하는 것일 수 있음
          + 대신 ""운전자가 주차할 때 실수를 했다""라고 표현하는 것이 더 적절함
     * 볼라드나 나무, 가로등, 바위 등 볼라드 역할을 하는 물체들이 이미 많이 설치되어 있는 덴버의 치스만 공원 지역에서는 이와 유사한 패턴으로 더 많은 볼라드를 설치하는 것이 좋을 것임

GN⁺의 의견

     * 볼라드는 교통사고로 인한 피해를 예방하는 데 매우 중요한 역할을 함. 특히 보행자나 자전거 이용자 등 교통약자를 보호하는 데 효과적임
     * 하지만 많은 지자체에서는 여전히 볼라드 설치를 의무화하지 않고 있어 안전사고의 위험이 상존함. 볼라드 설치 기준을 강화하고 설치 장소를 확대해야 할 것임
     * 또한 운전자 교육을 강화하여 볼라드 주변에서의 안전운전을 독려하고, 교통사고 발생 시 엄중한 책임을 물을 수 있도록 해야 함
     * 볼라드 설치에는 비용이 수반되기 때문에, 정부와 지자체의 적극적인 예산 지원이 필요함. 장기적으로는 교통약자를 배려하는 도시 설계와 교통 정책이 마련되어야 할 것임
     * 자율주행차 상용화가 가시화되고 있는 상황에서, 볼라드는 자율주행차의 안전운행을 위해서도 반드시 필요한 시설물이 될 것으로 보임. 자율주행 기술 고도화와 함께 도로 인프라에 대한 투자도 병행되어야 함

        Hacker News 의견

   요약:
     * 샌프란시스코에서 운전하던 중 누군가 집으로 돌진하는 것을 목격함. 시당국이나 건물주가 볼라드를 설치하여 이런 일이 재발하는 것을 막아야 함.
     * 기사의 내용이 풍자적이라 저자의 주장을 파악하기 어려움. 모든 인도와 주차장에 볼라드를 설치해야 한다고 주장하는 것인지 의문임. 비용과 미관상 문제가 있을 것으로 보임.
     * 볼라드는 제조 비용이 저렴하고 설치가 쉬우며 생명을 구할 수 있는 훌륭한 기술임. 미국 도시들이 플라스틱 등 임시방편 대신 영구적인 볼라드 설치에 주력해야 함.
     * 자동차 크기가 너무 크고 위험함. 속도와 무게를 줄이면 안전해져서 물리적 장벽 필요성이 줄어듦.
     * 영국은 테러 대응 과정에서 볼라드 설치 기술이 발전함. 벤치, 연못, 자전거 도로 보호 등에 볼라드가 활용되고 있음.
     * World Bollard Association 트위터 계정은 볼라드에 충돌하는 차량 사고 영상들을 모아놓음. 보행자 안전에 대한 감사함과 잘못된 차량에 대한 응징의 즐거움이 공존함.
     * 오래된 대포를 볼라드로 사용하기도 함. 군함에서 사용하던 대포를 뒤집어 매립하여 차량으로부터 건물을 보호하는 용도로 씀. 항구의 계류용 볼라드로도 볼 수 있음.
     * 볼라드는 차량을 이용한 테러 방지에도 좋은 아이디어임.
     * 보행자 신호에 맞춰 인도 양쪽으로 자동 볼라드가 올라오면 좋겠음.
     * 볼라드는 인도 주차 방지에는 효과적이나, 근본적으로는 보행자와 차량을 분리하는 교통 인프라 설계가 필요함.
"
"https://news.hada.io/topic?id=14734","2024 프로그래밍 언어 순위프로그래밍 언어 순위

   긱 뉴스 첫 글 등록입니다.
   2024 프로그래밍 언어순위입니다.

   파이썬은 이제 국민(?) 프로그래밍 언어가 된걸까요? java가 올타임 1위하던게 엇그제 같은데 이제는 C++보다 뒤에 있다는게 놀랍습니다.

   Ada는 아직 22위에 있네요!
"
"https://news.hada.io/topic?id=14737","Scrapegraph-ai - LLM과 직접 그래프 로직을 이용한 웹 스크래핑","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Scrapegraph-ai - LLM과 직접 그래프 로직을 이용한 웹 스크래핑

     * AI기반의 웹 스크래핑 파이썬 오픈소스 라이브러리
          + LLM과 직접 그래프 로직을 사용해 웹사이트, 문서, XML 파일에 대한 스크래핑 파이프라인을 생성
     * 어떤 정보를 추출하고 싶은지 지정하면 라이브러리가 알아서 작동
     * Ollama, OpenAI, Groq, Azure, Gemini 등 다양한 모델 이용 가능
     * 제공되는 노드들
          + 베이스 노드, HTML페치 노드, Image_to_text 노드, Text_To-Speech 노드, 인터넷 검색 노드
          + 컨디셔널 노드 : 그래프의 다음 노드를 결정
          + 답변생성 노드 : LLM이용해 질문의 답 생성
          + generate_scraper 노드 : 사용자 입력에 따라 콘텐츠에서 원하는 정보 추출
          + Get_probable_tags 노드 : 콘텐츠에서 원하는 정보를 가진 HTML 태그 찾기
          + Parse 노드 : HTML 문서에서 정보 추출
          + Rag 노드 : 대용량 문서에서 관련 정보 추출
          + Robots 노드 : 로봇 접근 가능한지 확인

   CSR 웹앱에 대해서는 잘 못긁어오는듯한 느낌을 받아 아쉬웠습니다.
   대신 SSR에 대해서는 상당히 만족스러웠습니다.
"
"https://news.hada.io/topic?id=14650","석유 업계의 담합 가격 책정 정황?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          석유 업계의 담합 가격 책정 정황?

An Oil Price-Fixing Conspiracy Caused 27% of All Inflation Increases in 2021

     * FTC는 최근 미국 석유 회사들이 사우디 정부와 결탁하여 2021년 가스 가격을 인상했다는 증거를 발견했으며, 이로 인해 평균 가정에 작년 3,000달러의 비용이 발생함
     * 이에 대해 우리가 할 수 있는 일이 무엇인지 의문이 제기됨

2014-2016년 가격 전쟁 이후 미국 생산자들의 변화

     * 미국 생산자들은 OPEC 석유 카르텔과 가격 경쟁에 지쳐, 2017-2021년 어느 시점에 카르텔에 합류하고 공급량을 줄여 석유 가격을 올리기로 결정
     * 이는 석유 소비자에게 연간 약 2천억 달러의 비용을 초래

FTC의 담합 증거 발표

     * FTC는 어제 담합이 당시 석유 가격 인상에 중요한 역할을 했다는 증거를 발표
     * Pioneer Natural Resources CEO인 Scott Sheffield는 OPEC 대표 및 관리들과 수백 건의 문자 메시지를 교환하며 원유 시장 역학, 가격 책정 및 생산량에 대해 논의
     * Sheffield는 ""텍사스가 앞장선다면 OPEC에 생산량 감축을 요구할 수 있을 것""이라고 말하며 목표를 명확히 함

담합으로 인한 소비자 피해 규모

     * Sheffield에 따르면 셰일 석유 시추업체들이 OPEC과의 가격 전쟁 동안 절약한 금액은 연간 1,400억~2,100억 달러
     * 가격 전쟁이 끝나면서 절약 효과도 사라짐
     * 직간접적 효과로 미국인들에게 연간 500~1,000달러의 추가 비용이 발생
     * 4인 가족의 경우 연간 2,000~4,000달러의 비용 증가

거시경제적 영향

     * 2021년 기업 이익 증가는 인플레이션 증가의 60%를 차지
     * 2021년 기업 이익 급증액은 약 7,300억 달러로 1인당 2,100달러
     * 석유 산업만 보면 상위 25개 기업이 2021년 2,050억 달러 이상의 이익을 냄
     * Sheffield가 시사한 대로 2021년 2,000억 달러의 이익 증가를 가정하면, 당해 총 기업 이익 증가의 27%에 해당
     * 이는 인플레이션 증가의 4분의 1 이상이 순전히 담합의 결과임을 의미

GN⁺의 의견

     * 석유 회사들의 담합 의혹을 제기한 포퓰리스트들의 직감은 맞았음. 많은 경제학자들이 기업의 시장 지배력이 인플레이션의 원인이 될 수 있다는 이론을 일축했지만, 현실은 달랐음
     * 석유 기업의 담합이 인플레이션에 미치는 구체적 영향을 확인한 것은 의미 있는 일. 거시경제학자들은 특정 시장의 역학 관계를 무시해서는 안될 것
     * 이번 사태의 피해 규모가 워낙 크기에 단순한 소송만으로는 부족함. 담합을 주도한 모든 임원에 대한 형사처벌이 이뤄져야 하나 현실화 가능성은 낮아 보임
     * 그럼에도 불구하고 정치권에서는 석유 기업 담합에 대한 반독점 조사 지원, OPEC과의 소통 금지, 연준의 담합-인플레이션 관계 조사 등을 추진할 것으로 보임
     * 환경 규제 때문에 시추를 못한다던 석유 기업들의 주장이 거짓으로 드러남. 우크라이나 전쟁조차 담합의 구실에 불과했을 가능성

        Hacker News 의견

   요약해보면 다음과 같음:
     * US 셰일오일 생산업체의 상황: 2010년대 고유가와 수압파쇄법(fracking) 기술 발전으로 생산이 급증했으나, 이후 과잉생산으로 가격 폭락과 다수의 업체 도산을 겪음. 2020년대 초반 가격 반등 이후에는 과거의 상처로 인해 보수적인 접근을 취하고 있으며, 청정에너지 전환을 의식해 현재의 호황 사이클을 최대한 연장하려 함.
     * 원유 가격 조작 의혹에 대한 의견:
          + OPEC과 US 셰일업체들이 단기적 고유가를 원하지는 않을 것이라는 의견이 있음. 고유가는 청정에너지 전환을 가속화할 수 있기에 $80-100 선이 이상적인 수준일 것임.
          + 정부의 과도한 지출이 과잉 소비를 부추기고 시장 혼란을 야기했다는 지적도 있음.
          + 단순히 ""석유=나쁨"", ""석유=부패""라는 시각은 뉘앙스가 부족하다는 비판도 제기됨.
     * 연방거래위원회(FTC)의 조치와 언론 보도의 불일치:
          + FTC는 Pioneer사의 Sheffield가 담합을 ""시도""했다고 주장하며 이를 ""예방""하기 위한 동의명령을 내림.
          + 그러나 일부 언론에서는 마치 담합이 실제로 일어난 것처럼 단정 지어 보도하고 있음.
     * 인플레이션 대응책으로서의 세금 정책:
          + 금리 인상은 은행과 자본가에게 유리한 부의 이전 정책임.
          + 반면 증세(예: 초과이익세)는 가격 담합으로 막대한 이익을 올린 기업들을 타겟으로 할 수 있음.
          + 증세로 거둬들인 자금은 취약계층 지원, 인프라 투자 등에 활용 가능함.
     * 평균 가구의 연간 추가 비용 추정치에 대한 의문: $3,000이라는 수치가 너무 과장된 것 아니냐는 반론이 제기됨. 휘발유 가격 상승분만으로는 설명하기 어려운 금액임.
"
"https://news.hada.io/topic?id=14696","Apple, M4 칩 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Apple, M4 칩 공개

     * 2세대 3나노 공정
     * 최대 4개의 성능 코어와 6개의 효율 코어로 구성된 최대 10코어 CPU
     * M3 칩부터 사용한 차세대 그래픽 아키텍처를 기반으로 하는 10코어 GPU
          + 하드웨어 가속형 레이 트레이싱, 메시 셰이딩 지원
     * 16코어 뉴럴 엔진 : A11 Bionic에 최초로 탑재된 뉴럴 엔진대비 60배의 속도
     * 업계 최고 수준의 와트당 성능 : 50% 전력으로 M2와 동일한 성능을 제공
     * 가장 진보된 미디어 엔진 : H.264, HEVC, ProRes 등 표준 코덱을 지원하며, AV1 하드웨어 가속을 최초로 지원

   이번에 M4가 나올거라고 블룸버그 마크거먼이 예상을 하자
   존 그루버가 절대 그럴리 없다고 돈내기 걸겠다고 자신만만했는데. 마크거먼이 이겼네요.

   https://daringfireball.net/linked/2024/04/28/m4-ipad-pros-gurman

   예상보다 빨라서 의외이긴 하네요. 신경망 회로 때문에라도(?) 미리 준비하던걸 앞당긴 것 같기도 합니다
"
"https://news.hada.io/topic?id=14648","온타리오 가정의, AI 노트 작성 기술로 직업 유지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      온타리오 가정의, AI 노트 작성 기술로 직업 유지

AI 기술을 활용한 의사 노트 작성 자동화

     * 2023년 여름, 스카보로에서 바쁜 의료 클리닉에서 일하는 가정의 Rosemary Lall 박사는 한계에 도달함
          + 거의 30년 동안 일하면서, Lall 박사는 환자 관련 서류 작업에 파묻혀 소중한 가족 시간을 빼앗기게 되어 포기하고 싶어짐
          + 환자 경험보다는 ""사후 업무""와 관련된 작업으로 인해 근무를 꺼리게 됨
          + Ontario 주의 전자 의무 기록 시스템에 입력해야 하는 필수 기록 보관 업무로 인해 근무를 꺼림
     * 의사들은 환자 차트를 업데이트하고, 의료 양식을 작성하고, 병가 확인서를 제공하고, 전문의 의뢰서를 제공해야 함
          + 행정 업무에 하루에 최대 2시간이 소요됨
          + Ontario 주 의사 협회에 따르면 가정의는 환자를 위한 메모 작성이나 양식 작성에 주당 4시간을 포함하여 주당 19시간을 행정 업무에 소비하는 것으로 추정됨

AI 기술을 활용한 의사 노트 작성 자동화 솔루션

     * Lall 박사는 ""그만두거나 해결책을 찾아야 했다""고 말함
          + 해결책은 의사의 노트를 모방하고 의사가 수동으로 작성해야 하는 서류 양을 줄이도록 설계된 새로운 인공 지능 노트 작성 앱이었음
     * AI Scribe 프로그램은 Ontario 주 의사 협회의 디지털 기술 부문인 OntarioMD에서 운영하며, 의사가 환자 방문 중에 노트 작성 보조 도구를 선택할 수 있도록 함
          + 동의한 환자는 의사와 함께 질병에 대해 일상적인 대화를 나누고, 의사는 신체 검사 중에 자신의 생각을 말로 표현함
          + AI Scribe 소프트웨어는 예약 중에 실시간 녹취록을 만들고 처리할 수 있음
     * 예약 후에 AI Scribe가 Ontario 주 의사 및 외과의사 대학에서 규정한 가정의의 표준 요구 사항인 SOAP 노트라는 정보를 컴파일할 때 진정한 이점이 있음
          + 인공 지능 기술은 환자가 전달한 주관적 정보, 의사가 전달한 객관적 정보, 신체 검사 중 의사가 구두로 전달한 평가 정보, 환자 치료 계획을 분리함
          + 4개 영역(주관적, 객관적, 평가 및 계획)은 SOAP 약어를 구성함
     * AI Scribe가 정보를 정리하는 데 몇 분 밖에 걸리지 않아 의사는 SOAP 노트가 백그라운드에서 생성되는 동안 다른 환자로 넘어갈 수 있음
          + 의사가 노트에 만족하지 않으면 AI 모델에 정보를 재생성하거나 범주에 더 많은 세부 정보를 추가하도록 요청할 수 있음
          + 도구에 일부 불완전한 점이 있지만, 10개월 동안 사용한 이후로 개선점이 눈에 띄게 나타남

정부의 시범 프로그램과 우려 사항

     * Ford 정부는 이 기술에 깊은 인상을 받아 150명의 가정의가 진료의 일부로 AI Scribe를 사용할 수 있도록 시범 프로그램을 발표함
          + 보건부 장관은 초기 징후가 유망했지만 정부가 신중하게 진행할 것이라고 강조함
          + 환자들은 이를 매우 높이 평가하고 임상의들은 혜택을 보고 있음
     * 그러나 일부는 AI Scribe에서 수집한 데이터, 프라이버시 및 오용 가능성에 대해 우려를 제기함
          + 자유당 보건 비평가이자 의사인 Adil Shamji 박사는 ""제대로 실행되지 않으면 상당한 우려가 있을 것""이라고 말함
          + 환자 기밀 유지, 정확성 보장 등 중요한 사항들이 있음
          + 최소한의 감독으로 진정으로 자율적이라면 매우 신중하게 구현되어야 함
     * Ontario 주 NDP의 보건 비평가인 France Gélinas는 인공 지능이 Ontario 주의 ""미래 의료의 일부가 될 것""이라고 말했지만 신중하게 관리되어야 한다고 말함
          + 제공자와 환자 사이의 신뢰 관계를 유지해야 함
          + 아직 그 단계에 이르지는 않았지만, 적절한 단계를 거쳐 시범 사업을 마무리하고 배운 점을 확인해야 함

변화된 삶

     * Lall 박사는 29년 동안 가정의로 일하면서 AI 노트 작성 소프트웨어 덕분에 작년 크리스마스가 환자 노트를 업데이트해야 하는 필요에 의해 방해받지 않은 첫 번째 축하 행사였다고 말함
          + ""저에게 이것은 많은 것을 바꿔 놓았습니다. 저를 정말 행복하게 만들었죠.""
          + ""다시는 돌아가지 않을 겁니다.""

GN⁺의 의견

     * 의사들의 행정 업무 부담을 줄이고 환자에게 더 집중할 수 있게 해주는 기술임. 그러나 의사와 환자 간의 라포 형성이나 감정적 교감에는 한계가 있을 것 같음.
     * 환자 진료 데이터를 다루는 만큼 개인 정보 보호와 보안이 매우 중요함. 데이터의 익명화, 접근 제어, 감사 추적 등이 필수적으로 갖춰져야 함.
     * 의사의 전문성을 보조하는 도구로 활용되어야 하며, 의사를 완전히 대체하는 것은 바람직하지 않음. 의학적 판단이 필요한 경우 의사가 직접 검토하고 수정하는 절차가 반드시 필요함.
     * 음성 인식이나 자연어 처리 기술의 발전 속도를 감안할 때, 지속적으로 업데이트되고 고도화되어야 함. 또한 의사 개개인의 진료 스타일에 맞게 커스터마이징할 수 있어야 할 것임.
     * 다른 국가에서도 유사한 시도를 하고 있을 것으로 예상됨. 글로벌 사례를 참고하여 장단점을 파악하고, 국내 의료 환경에 맞는 규제와 가이드라인을 만드는 것이 필요해 보임.
"
"https://news.hada.io/topic?id=14729","TSDB를 활용하여 실시간 FFT(고속 푸리에 변환) 수행  사례 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  TSDB를 활용하여 실시간 FFT(고속 푸리에 변환) 수행 사례

   현업에서는 FFT 분석과 더불어 나중에 AI 학습을 위해서도 데이터를 버리지 않기를 원하고 있음.
   데이터를 버리지 않고도 실시간으로 대용량의 진동 데이터를 FFT 변환하고, 시각화하는 새로운 사례 (2D와 3D 도 함께 데모 가능) --> 혁명적 사건!
   기존에는 대부분 실시간 FFT의 경우 잠깐 수행후 데이터를 버림. (너무 많아 저장이 불가능...)
   TSDB가 나온 이후에는 이 데이터를 저장과 분석을 같이 할 수 있게 됨.
   TSDB의 가장 대표적인 사례인 모니터링 분야 뿐만 아니라 제조 데이터에 대한 실시간 분석과 가시화에서도 좋은 사례
   FFT와 더불어서 실시간으로 진동 데이터 분석 통계 메트릭인 RMS, Peak 등도 같이 볼 수 있음.

   마크베이스네오(라는 회사 혹은 제품)이 핵심이군요.

   아는사람이 DBA인데 Oracle을 주로 하다가 보니 요즘은 전부 PostgreSQL로 바뀌었다고 하더군요.

   세상이 급변하고있는거 같습니다.

   흥미로운 DB네요. 언젠가 해보고싶은 개인 프로젝트 중에 제가 수집한 음악들을 갖고 음악 추천 모델을 만드는게 있는데 음악들을 FFT 변환해둔 데이터를 어떻게 저장할지가 고민이었습니다.
"
"https://news.hada.io/topic?id=14742","C99를 위한 Algebraic Data Types 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    C99를 위한 Algebraic Data Types 도입

Datatype99

   안전하고 직관적인 대수적 데이터 타입을 제공하는 라이브러리로, 소진적 패턴 매칭과 컴파일 타임 내성 기능을 제공함. 순수 C99로 구현되어 있어 외부 도구가 필요 없음.

  주요 특징

     * 타입 안전성: 부적절한 타입의 변형, 불완전한 패턴 매칭, 유효하지 않은 필드 접근 등이 컴파일 타임에 검출됨.
     * 이식성: 표준을 준수하는 C99 컴파일러만 있으면 됨. 표준 라이브러리나 컴파일러/플랫폼 특정 기능, VLA 등이 필요하지 않음.
     * 예측 가능성: 공식적인 코드 생성 의미론이 정의되어 있어, 생성된 데이터 레이아웃이 항상 동일함을 보장함.
     * 이해하기 쉬운 오류: 잘못된 코드에 대해 강건함.
     * 실전에서 검증됨: OpenIPC에서 IP 카메라용 실시간 스트리밍 소프트웨어 개발에 사용되고 있음. RTSP 1.0 구현과 약 5만줄의 비공개 코드 등이 포함됨.

  설치

     * Datatype99는 하나의 헤더 파일 datatype99.h와 하나의 의존성 Metalang99로 구성됨.
     * CMake를 사용한다면 FetchContent를 통해 가져오는 것이 권장됨.
     * 필요하다면 프리컴파일 헤더를 사용할 수 있음. 컴파일 시간을 줄일 수 있음.

  사용법

     * Datatype99는 태그된 공용체에 대한 단순한 문법 설탕임. 더 안전하고 간결함.
     * 이진 트리 예시:
          + C로 직접 구현하려면 구조체와 공용체, 열거형 등을 사용해야 함
          + Datatype99로는 간단히 datatype 매크로 호출로 정의 가능
          + 패턴 매칭을 사용해 트리의 합을 구하는 것도 간단함
               o 컴파일 타임 안전성: 잘못된 변형의 바인딩에 접근하면 컴파일 오류 발생
               o 유연성: 바인딩은 포인터 타입이라 변경 가능하고, 역참조해서 값을 얻을 수 있음
          + 변형 생성자 함수가 자동 생성됨
     * 패턴 매칭에 대한 간단한 설명:
          + 기본 케이스 매칭은 otherwise
          + 바인딩 무시는 _ 사용
          + of, ifLet에서는 최상위 break/continue 사용 금지. goto 레이블 사용.

  문법과 의미론

     * EBNF 문법 정의와 의미론 설명이 제공됨.
     * 라이브러리 헤더에서는 매크로의 postfix 버전 사용 권장.

  유닛 타입

     * UnitT99와 unit_v99로 제공됨.

GN⁺의 의견

     * Datatype99를 사용하면 C에서도 대수적 데이터 타입을 안전하고 간편하게 사용할 수 있어 큰 장점이 있어 보임. 기존 C 코드베이스에 통합하기도 쉬울 것 같음.
     * 다만 C++에서 사용한다면 템플릿이나 constexpr 등 언어 자체 기능과 중복되는 부분이 있을 듯함. C에 비해 이점이 줄어들 수 있음.
     * 컴파일 타임에 안전성을 보장하는 것이 큰 장점이지만, 동적으로 데이터 타입이 바뀌는 경우에는 활용하기 어려울 것 같음. 정적 타이핑의 한계.
     * 소규모 프로젝트라면 직접 구현해도 되겠지만, 코드 베이스가 커지면 Datatype99 같은 라이브러리를 활용하는게 생산성과 안정성 측면에서 도움될 듯함.
     * 유사한 기능을 제공하는 라이브러리로는 LibADT, Kitsune, P99 등이 있음.
"
"https://news.hada.io/topic?id=14745","OpenAI, Model Spec 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         OpenAI, Model Spec 공개

   대화형 AI 모델이 어떻게 동작해야 하는지에 대한 대중의 이해를 높이기 위해 '모델 사양(Model Spec)'이라는 문서를 공개
     * 모델 스펙은 OpenAI API와 ChatGPT에서 모델이 어떻게 동작하기를 원하는지 명시한 문서
     * 모델 동작을 구성하는 실질적인 선택 사항들을 사람들이 이해하고 논의할 수 있도록 하는 것이 중요하다고 판단
     * 모델 사양은 OpenAI에서 사용해 온 기존 문서, 모델 동작 설계에 대한 연구와 경험, 그리고 향후 모델 개발에 대한 진행 중인 작업을 반영
     * 이는 인간의 입력을 활용해 모델 동작을 개선하려는 OpenAI의 지속적인 노력의 연장선이며, 집단 정렬(collective alignment) 작업과 더 광범위한 체계적 모델 안전성 접근법을 보완

바람직한 모델 동작 구성하기(Shaping Desired Model Behavior)

   모델 동작, 즉 사용자의 입력에 대해 모델이 어떻게 반응하는지(어조, 성격, 응답 길이 등)는 인간이 AI 기능과 상호작용하는 방식에 매우 중요함.
     * 모델 동작을 구성하는 것은 아직 초기 단계의 과학이며, 모델은 명시적으로 프로그래밍되는 것이 아니라 광범위한 데이터로부터 학습
     * 모델 동작 구성 시에는 다양한 질문, 고려사항, 뉘앙스를 감안해야 하며, 종종 의견 차이를 평가해야 함
     * 모델이 사용자에게 널리 도움이 되고 유익하도록 의도되었더라도, 이러한 의도는 실제로 충돌할 수 있음
          + 예: 보안 회사는 고객 보호를 위해 피싱 이메일 분류기 훈련용 합성 데이터를 생성하고 싶어 하지만, 사기꾼이 이 기능을 사용하면 해로움

모델 사양(Model Spec) 소개

     * OpenAI는 바람직한 모델 동작 구성 방식과 충돌 발생 시 절충안 평가 방법을 명시한 새로운 문서인 '모델 사양' 초안을 공유
     * 모델 사양은 현재 OpenAI에서 사용 중인 문서, 모델 동작 설계에 대한 경험과 진행 중인 연구, 전문가 의견 등 향후 모델 개발을 안내하는 최근 작업을 통합
     * 모델 사양은 완전하지 않으며 시간이 지남에 따라 변경될 것으로 예상

   모델 사양 접근법은 다음을 포함:
    1. 목표: 바람직한 동작에 대한 방향성을 제공하는 광범위하고 일반적인 원칙
          + 개발자와 최종 사용자 지원
          + 인류에 이익이 됨
          + OpenAI를 잘 반영
    2. 규칙: 복잡성을 해결하고 안전과 합법성 보장에 도움되는 지침
          + 명령 체계 준수
          + 관련 법규 준수
          + 정보 위험 제공 금지
          + 창작자와 권리 존중
          + 개인정보 보호
          + NSFW 콘텐츠로 응답 금지
    3. 기본 동작: 목표 및 규칙과 일치하는 지침으로, 충돌 처리 방법을 제공하고 목표의 우선순위 및 균형을 잡는 방법 시연
          + 사용자/개발자의 선의 가정
          + 필요시 명확한 질문
          + 지나치지 않는 선에서 최대한 도움
          + 대화형 채팅과 프로그래밍 사용의 다양한 요구사항 지원
          + 객관적 관점 가정
          + 공정성과 친절 장려, 증오 억제
          + 타인 생각 바꾸려 하지 않음
          + 불확실성 표현
          + 작업에 적합한 도구 사용
          + 길이 제한 준수하면서 철저하고 효율적

모델 사양의 활용 방안

     * OpenAI는 집단 정렬(collective alignment)과 모델 안전성에 대한 작업의 연장선으로, 모델 사양을 인간 피드백으로부터 강화 학습을 수행하는 연구원과 AI 트레이너를 위한 지침으로 활용할 계획임
     * 또한 모델이 모델 사양으로부터 직접 학습할 수 있는 정도를 탐구할 예정

향후 계획

     * OpenAI는 이 작업을 모델의 바람직한 동작 방식, 바람직한 모델 동작 결정 방법, 그리고 일반 대중을 이러한 논의에 참여시키는 최선의 방법에 대한 지속적인 대중적 대화의 일부로 봄.
     * 대화가 계속됨에 따라, 정책 입안자, 신뢰할 수 있는 기관, 도메인 전문가 등 전 세계적으로 대표성을 갖는 이해 관계자와 협력할 기회를 모색할 예정
     * 이를 통해 다음 사항을 파악하고자 함:
         1. 이해관계자들이 모델 사양 접근법과 개별 목표, 규칙, 기본값을 어떻게 이해하는지
         2. 이해관계자들이 접근법과 개별 목표, 규칙, 기본값을 지지하는지 여부
         3. 추가로 고려해야 할 목표, 규칙, 기본값이 있는지 여부
     * OpenAI는 이 작업이 진행됨에 따라 이해관계자들의 의견을 듣기를 기대하고 있음
     * 또한 향후 2주 동안 일반 대중이 모델 사양의 목표, 규칙, 기본값에 대한 피드백을 공유할 것을 권장
     * 이를 통해 사명을 향해 책임감 있게 나아가기 위해 피드백을 수집하고 통합하는 강력한 프로세스를 개발하는 데 있어 조기 통찰력을 얻을 수 있기를 희망
     * 향후 1년 동안 OpenAI는 모델 사양 변경 사항, 피드백에 대한 대응, 모델 동작 구성에 대한 연구 진행 상황에 대한 업데이트를 공유할 예정
"
"https://news.hada.io/topic?id=14653","Show HN: 9년 만에 출시된 Dillo 3.1.0 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show HN: 9년 만에 출시된 Dillo 3.1.0 버전

Dillo 3.1.0 버전 릴리스

     * 2024년 5월 4일에 릴리스됨
     * 이전 3.0.5 버전 (2015년 릴리스) 이후 Dillo 프로젝트에 많은 변화가 있었음
          + 2016년: 레이아웃 엔진의 메인 개발자 Sebastian Geerken 사망
          + 2017년: 개발 중단
          + 2019년: Dillo의 리드 개발자 Jorge Arellano Cid의 마지막 메일이 메일링 리스트에 기록됨
          + 2022년: dillo.org 도메인 상실
          + 2024년: Rodrigo Arias Mallo에 의해 프로젝트 부활 시도 시작

  3.1.0 버전의 주요 변경사항 요약

     * 2015-2017년 동안 누적된 많은 변경사항과 2024년에 도입된 수정 및 작은 기능들 포함
          + 큰 재설계가 포함된 floating HTML 요소 지원 추가
          + HTTPS를 위한 OpenSSL, LibreSSL, mbed TLS 지원 추가 (기본으로 활성화됨)
          + Ubuntu, MacOS, FreeBSD, Windows(Cygwin 통해)에서 Dillo를 빌드하기 위한 CI 파이프라인 추가
          + 자동 HTML 렌더링 테스트 추가
          + Dillo 매뉴얼 개선 및 확장
     * Sebastian Geerken을 기리며 릴리스

  다운로드

     * GitHub 릴리스에서 다운로드 가능

  상세 변경사항

     * Sebastian Geerken의 패치:
          + Floating 요소
          + 위젯 크기 재설계 (""GROWS"")
          + 모든 요소에 CSS 속성 'width' 적용, 'height' 지원 추가
          + 'min-width', 'max-width', 'min-height', 'max-height' 지원
          + 'display: inline-block' 지원
          + <BUTTON>이 이제 인라인임
          + 이미지 종횡비는 한 차원이 백분율 값으로 지정될 때 보존됨
          + 새로운 dillorc 옵션 'adjust_min_width', 'adjust_table_min_width'
          + test/ 파일 빌드 강건성 개선
          + 공백 축소에 대한 작업: 더 많은 케이스 지원
          + 페이지 빌드 중 텍스트 검색 시 발생 가능한 크래시 수정
     * corvid의 패치:
          + HTML5 문자 참조
          + 리소스 요청 시 이미지에 낮은 우선순위 부여 (응답성)
          + HTTP 연결 재사용 (dillorc의 http_persistent_conns로 비활성화 가능)
          + 실패한 쿼리 중단
          + HTTP 엄격한 전송 보안 (dillorc의 http_strict_transport_security 설정으로 비활성화 가능)
          + 윈도우 매니저를 사용하여 팝업 닫을 때 버그 수정 (3.0.3에서 도입된 버그)
          + 혼합 콘텐츠 차단
          + 쿠키 날짜 인식 개선
          + Mbed TLS 사용
          + 연결 시도 시 호스트의 IP 주소를 반복
     * Jeremy Henty의 패치:
          + Doxygen 수정
     * corvid와 Benjamin Johnson의 패치:
          + HTTPS를 dpi에서 브라우저로 이동, SNI 활성화, CA 번들 위치 더 확인, --with-ca-certs-file과 --with-ca-certs-dir을 configure에 추가, 보안 경고 팝업 개선 등
     * Johannes Hofmann의 패치:
          + 북마크 DPI 크래시 수정
          + xembed로 인한 OSX 컴파일 이슈 수정
     * Rodrigo Arias Mallo의 패치:
          + DuckDuckGo 검색 링크 수정
          + 마우스 휠 수직 스텝을 제어하는 scroll_step 옵션 추가
          + OpenSSL 1.1, OpenSSL 3, mbedTLS 2, mbedTLS 3 지원 추가
          + --enable-ssl 설정 플래그를 --enable-tls로 교체
          + https를 위해 기본적으로 TLS 지원 활성화
          + 자동 렌더링 테스트 추가 (--enable-html-tests로만 활성화)
          + 'min-width'와 'max-width'를 사용할 때 너비 계산 수정
          + 웹사이트 URL을 https://dillo-browser.github.io/로 업데이트
          + 탭 높이를 제어하는 ui_tab_height 옵션 추가. 사용성 개선을 위해 기본값을 16에서 20픽셀로 증가
          + 기본적으로 마우스 휠을 사용하여 탭 전환. 동작을 비활성화하려면 새 옵션 scroll_switches_tabs 사용
          + close notify 경고 없이 예기치 않은 EOF 처리 시 OpenSSL 수정
          + file 플러그인에서 홈 틸드 '~' 확장
          + td와 th 요소에 대해 상대 값을 가진 width 속성 무시
          + C 파일에 대해 Doxygen 활성화하고 Awesome Doxygen 테마 사용
          + Cygwin을 통해 Windows 시스템에서 DPIs 확장(.dpi.exe) 수정
          + <main> HTML 태그 지원 추가
          + W3C 검증기 수정 및 손상된 WDG 검증기 제거
          + 북마크 DPI 페이지 스타일 단순화 및 가독성 개선
          + 도움말 버튼에서 사용 가능한 Dillo 매뉴얼 개선
          + XHTML 문서 감지 개선
          + Dillo 아이콘이 있는 데스크톱 파일 설치
          + 사용자 설명서와 about:splash에 버전 추가
     * Mark Walker의 패치:
          + http_force_https 모드 추가

GN⁺의 의견

     * Dillo는 오래된 경량 웹브라우저로, 최근까지 개발이 중단되었다가 2024년에 부활을 시도하고 있음. 이번 업데이트에는 그동안 누적된 많은 기능 개선과 버그 수정이 포함되어 있어 기대가 됨
     * 웹표준 지원이 얼마나 개선되었는지는 더 살펴봐야겠지만, 경량 리눅스 배포판 등에서 활용하기에는 여전히 매력적인 선택지가 될 수 있을 것 같음
     * HTTPS 지원 개선, 자동화된 HTML 렌더링 테스트 도입 등 보안성과 안정성 측면에서의 개선도 눈에 띔
     * 오랜기간 방치되었던 프로젝트를 다시 부활시키는 것이 쉽지 않은 일인데, 개발자들의 노력이 고마움. 다만 웹 기술이 급속도로 발전하는 상황에서 얼마나 의미있는 대안이 될 수 있을지는 좀 더 지켜봐야 할 듯

        Hacker News 의견

   요약:
     * Dillo 브라우저가 지원하는 HTML/JS/CSS 서브셋에 대한 문서나 코드 레퍼런스 문의
          + Gemini 같은 별도 프로토콜 대신 현실적으로 달성 가능한 ""HTML-lite"" 타겟으로 Dillo의 베이스라인이 좋은 출발점이 될 것임
     * Dillo 프로젝트의 Fediverse 계정 안내: https://fosstodon.org/@dillo
          + Kindle에서 Dillo 실행 사례: https://fosstodon.org/@dillo/112181258739093008
          + 오래된 Samsung 폰에서 Dillo 실행 사례: https://fosstodon.org/@dillo/112327798958777998
     * 과거 32MB RAM의 노트북에서 Damn Small Linux의 Dillo를 사용했던 추억 회상
     * Hacker News CSS에서 발견된 버그 보고
          + 대부분의 규칙이 잘못 파싱되는 원인이 되는 버그
          + hn@ycombinator.com 메일 주소로 보고해야 할지 확신할 수 없음
          + 문제가 되는 CSS 규칙: input[type=\""submit\""] { font-family:Verdana, Geneva, sans-serif; }
     * ""Dillo는 빠르고 작은 그래픽 웹 브라우저""라는 소개
     * macOS에서 최상의 Dillo 경험을 위해선 https://github.com/crossbowerbt/dillo-plus/를 추천
          + macOS에서 Dillo 컴파일이 쉽지 않았으며, 시스템에 설치된 SSL 라이브러리를 감지하지 못하는 듯함
          + macOS(M1 테스트)에서 컴파일하는 방법 제시
     * Dillo가 Arch 리포지토리에 올라오길 기다리며, 리소스 소모가 적은 웹사이트를 북마크해서 Dillo로 브라우징하는 아늑한 셋업을 고려 중
     * Dillo의 반응성, 모듈식 UI, 훌륭한 설정 파일 등 모든 것이 기쁨을 줌
     * Dillo와 NetSurf 브라우저 비교 문의
          + 특이한 플랫폼에 NetSurf 이식을 고려 중이었으나, Dillo가 현대적 페이지 처리에 상당히 나은 경우 대신 사용할 것
     * Spartan Protocol에 대해 오늘 배웠으며, Dillo가 새로운 버전의 TLS나 SSL 같은 현대적 보안 기능을 어떻게 다루는지 궁금해 함
"
"https://news.hada.io/topic?id=14632","모든 중국 지도의 오류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              모든 중국 지도의 오류

     * 중국의 모든 지도는 잘못되어 있음. 이는 의도적인 것임.
     * 중국의 거리 뷰와 위성 뷰 사이의 불일치
          + 구글 맵에서 중국의 거리 뷰는 처음에는 다른 지도와 같아 보이지만, 위성 뷰를 겹쳤을 때 맞지 않는 것을 볼 수 있음.
          + 상하이 지역의 황푸강을 확대해보면 이런 불일치가 특히 두드러짐.
          + 거리 뷰에서는 다리가 남쪽에 있는 반면, 위성 뷰에서는 북쪽에 있음.
          + 베이징에서는 용탄공원의 위치가 거리 뷰와 위성 뷰에서 크게 다르지만, 천단은 거의 정확한 위치에 있음.
     * 중국 지도가 세계 나머지 지역과 달라 보이는 이유
          + 세계 지도는 WGS-84라는 측지 기준을 사용하며, 이는 미국이 관리함.
          + 중국은 GCJ-02라는 자체 측지 기준을 사용하는데, 이는 WGS-84에 의도적인 난독화 알고리즘을 적용한 것임.
          + 이 알고리즘은 위도와 경도에 50m에서 500m 사이의 무작위 오프셋을 추가함.
          + 이로 인해 거리 뷰와 위성 뷰의 정렬이 무작위로 어긋나게 됨.
     * 중국 정부가 다른 시스템을 원하는 이유
          + 2002년 중국 정부는 측량 및 매핑법을 제정했는데, 이는 국가 경제 건설, 국방 건설, 사회 발전을 위한 것임.
          + 이 법에 따르면 중국 정부가 승인한 기관만이 측량 및 매핑 활동을 수행할 수 있으며, 현재 14개 중국 기업만 이를 허가받음.
     * 중국을 정확하게 매핑하는 방법
          + 중국 외부의 기업은 중국 매핑 파트너와 협력해야만 중국 위치 데이터를 얻을 수 있음.
          + 구글은 AutoNavi라는 중국 매핑 제공업체와 협력하여 중국 지도 정보를 제공함.
          + AutoNavi는 구글에 GCJ-02 정보를 제공하지만 민감한 정보는 제외됨.
          + 중국에서는 GCJ-02를 WGS-84로 변환하는 것이 불법임.
     * 세계에 미치는 영향
          + 중국의 위치 정보는 국제 표준 위에 의도적인 난독화 알고리즘이 적용되어 신뢰할 수 없음.
          + 국제 협력이 필요하고 지리공간 데이터가 포함된 이니셔티브의 경우, 중국에서 보고된 데이터는 완전히 신뢰할 수 없음.

GN⁺의 의견

     * 중국이 자국의 지리 정보를 국가 안보 차원에서 민감하게 관리하고 있다는 점이 흥미로움. 국방이나 전략적 식량 비축 등의 민감한 정보를 공개하지 않으려는 의도로 보임.
     * 중국 정부가 승인한 소수의 기업만 매핑 활동을 할 수 있도록 제한하고, 외국 기업들도 이들과 협력해야만 중국 지도 정보를 사용할 수 있게 한 것은 중국 정부의 통제력을 잘 보여줌.
     * 이런 정책으로 인해 국제적인 지리 정보 협력 사업에서 중국 데이터의 신뢰성 문제가 제기될 수 있음. 특히 좁은 범위의 지리적 파라미터를 다루는 경우 500m의 좌표 차이도 큰 영향을 미칠 수 있음.
     * 중국과 세계 각국이 지리공간 정보 분야에서 협력하려면 이런 제약 사항들을 잘 이해하고 조정해 나가는 것이 중요해 보임. 관련된 국제 표준을 만드는 것도 도움이 될 것임.

   최근 구글지도의 중국 영역을 보다 몇백미터쯤 매칭 안되는 부분을 발견해서 구글에 수정 요청을 넣었는데.
   이게 의도적이었다는 게 충격적이네요.
   문제는 과거 출장 갔을때는 정상적으로 나오던 위치가 바뀌었다는거라.
   최근들어 변경되었나 봅니다.
   어떤식이냐면. 위성사진과 지도가 약 620미터 정도 대각선으로 어긋나 있더라구요

   요래 남조선네도 마찬가젭네다.
     * 해커뉴스에 댓글 보고

   오픈스트리트맵을 편집할 때는 중국 정부에서 배포하는 지리 데이터가 아니라 WGS-84 좌표계로 된 Bing이나 Esri 위성사진을 사용하기 때문에 이런 문제가 없긴 합니다.

        Hacker News 의견

   중국의 GCJ-02 좌표계에 대한 해커뉴스 댓글들을 요약하면 다음과 같음:
     * WGS84에서 GJC2로 변환하는 오픈소스 구현체가 있음. 그 반대 방향으로의 변환도 가능함.
     * 이런 난독화는 오늘날의 기준으로 보면 매우 어리석어 보이며, 2002년에 고안되었을 때에도 큰 의미가 없어 보임.
     * 오픈스트리트맵은 중국에서 불법임에도 불구하고, 사람들이 중국의 모든 벤치를 매핑하는 것을 막지는 못함.
     * 전 세계 대부분이 미국 지도 규약을 따른다는 것은 과장임. ITRS가 주요 표준이며 IERS에 의해 유지됨.
     * 남한도 유사한 제한을 두고 있음. 정부 지도에 대한 구글 액세스를 금지하고 있음.
     * 중국 언론 보도에 따르면, 연구자들이 국가 축척에 적합한 지형도에 대한 비선형 기밀 처리 기술을 개발했다고 함.
     * 중국에서 구글맵을 사용하면 GPS 위치가 위성 이미지가 아닌 지도와 일치함. 이는 GPS 칩이나 구글 소프트웨어 스택이 수정된 좌표를 보고하기 때문으로 추정됨.
     * GCJ-02는 WGS-84를 기반으로 하지만 의도적인 난독화 알고리즘이 적용되어 있음. 위도와 경도에 50m에서 500m 사이의 무작위 오프셋이 추가됨.
     * 이는 중국의 세계관을 나타내는 것으로 보임. 모두가 자신들에 반대하는 상황에서 기회가 있을 때마다 스스로를 보호해야 한다는 피포위 의식을 가지고 있음.
     * 이는 중국이 지도 수학조차 전쟁을 준비하고 있음을 시사함. 하지만 일부 댓글에 따르면 이를 되돌리는 것이 그리 어렵지 않다고 함.
"
"https://news.hada.io/topic?id=14693","Show GN: PlugBear v2 - Slack, Teams, Zendesk 등 일상 업무 도구에서 Custom GPT 활용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: PlugBear v2 - Slack, Teams, Zendesk 등 일상 업무 도구에서 Custom GPT 활용하기

   Custom GPT를 일상 업무 도구에서 사용할 수 있게 도와주는 PlugBear 제품이 v2로 업그레이드 되었습니다.

   PlugBear를 활용하면 10분 안에 코딩 없이 Slack, Teams와 같은 업무 도구에 생활 가이드 봇, 데이터 추출 봇, 고객 지원 코파일럿 등을 추가할 수 있습니다.
     * 지원 모델 확장: OpenAI GPTs, Assistants, Anthropic Claude 3
     * 지원 도구 확장: Slack, Microsoft Teams, HubSpot, Zendesk, Discord
     * 지원 기능 화장: API 연동, 웹 검색, 파일 처리, 이미지 분석 등

   기간 한정 할인 쿠폰도 함께 드리고 있으니 많은 관심과 응원, Product Hunt Upvote 부탁드립니다 ❤️
"
"https://news.hada.io/topic?id=14678","Show GN: 데이터로 확인하는 나의 평판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 데이터로 확인하는 나의 평판

     * 동료와 서로 협업 경험을 리뷰하는 서비스
          + 근무기록 인증을 통해 3개월 이상 근무한 경우에 리뷰 할 수 있음
          + 서로 리뷰한 내용은 비공개
     * 리뷰가 쌓이면 나의 평판을 요약해서 보여줌
          + 조건: 3개 이상의 리뷰를 하고, 3개 이상의 리뷰를 받아야 함
          + (WIP) 직군 별, 연차 별 평균치와 나의 역량을 비교할 수 있음
     * 평가는 8개 항목에 대해서 3문항씩 총 24개 질문으로 이루어짐
          + 8개 항목: 전문성, 실행력, 의사결정, 끈기, 개방성, 도덕성, 협동력, 커뮤니케이션
     * 평가 전 동료와의 친밀도를 설정할 수 있음
          + 아주 잘 알고 있음(충분히 오랜 기간 함께 일했고, 상대방의 장단점을 파악하고 있는 경우)
          + 약간 알고 있음(긴밀하게 협업하지 않았지만 어느 정도 상대방에 대해서 알고 있는 경우)
          + 잘 알지 못함(같은 직장에 근무했지만, 상대방에 대해서는 잘 알지 못하는 경우)
          + 친밀도에 따라 리뷰 결과에 전체 합계에 차등 적용 됨
     * 기존 레퍼런스 체크 시스템과의 차별점
          + 소수의 인원에게 리뷰 받는 것이 아니라, 나를 잘 아는 모든 사람들로부터 평가를 받을 수 있음
          + (가설) 많은 리뷰를 받으면 큰 수의 법칙으로 나의 진짜 평판에 수렴하지 않을까?

   show gn 으로 가야 할 글 같습니다.

   제가 잘못 올린 것 같은데 삭제가 안되네요 :(

   Show GN으로 이동하였습니다.
"
"https://news.hada.io/topic?id=14686","Distribution Is King : 유통이 왕이다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Distribution Is King : 유통이 왕이다

     * ""콘텐츠 혁신은 청중을 늘리고, 유통 혁신은 기업 가치를 창출한다""
          + 우리가 만드는 제품과 콘텐츠가 기업의 가치를 만든다고 생각하기 쉬움. ""콘텐츠가 왕""이라는 말이 지난 10년간 화두였던 이유
     * 그러나 이는 생각만큼 사실이 아님
     * 장기적인 기업 가치, 즉 큰 사업을 구축하는 것은 훌륭한 제품을 고객에게 전달하는 차별화된 방법을 가져야만 가능함
          + 즉, 사용자가 콘텐츠를 받고 액세스하는 채널이 가장 중요함
     * 이 주장은 투자자이자 전 벤치마크 캐피털 파트너인 미치 래스키(Mitch Lasky)로부터 나왔으며, 몇 달 동안 내 마음속에서 맴돌았음
     * 중요한 것은 유통(distribution) 임

비디오 게임 산업의 중요성

     * 래스키는 디스코드, 라이엇 게임즈, 스냅 등을 포트폴리오로 보유한 역대 최고의 소비자 제품 투자자 중 한 명임
          + 그의 경력 대부분은 비디오 게임에 초점을 맞추었는데, 나는 이 기술 산업의 하위 시장이 종종 더 광범위한 트렌드를 예측한다는 것을 발견했음
          + 거의 모든 소비자 혁신은 어떤 식으로든 비디오 게임 회사의 콘텐츠, 가격 책정 또는 시장 진출 전략의 혁신에 그 기원을 두고 있음
          + 엔비디아는 비디오 게임 렌더링을 위한 그래픽 칩을 만들었고, 슬랙은 비디오 게임 채팅 시스템으로 시작했으며, 애플이 개발자로부터 받는 30%의 수수료는 부분적으로 1980년대 중반 닌텐도와 팩맨 제작사 남코 사이의 계약에서 비롯됨
     * 래스키는 동료 투자자 블레이크 로빈스와 팀을 이뤄 게임크래프트라는 팟캐스트를 진행했는데, 이는 유통 혁신을 핵심 아이디어로 삼아 지난 40년 간의 게임 산업 발전을 보여줌
          + 그의 테제는 모든 비트 회사(소프트웨어, 콘텐츠, 마켓플레이스 등)에 적용될 수 있을 만큼 좋았음
     * 스타트업을 가치 있게 만드는 방법을 알고 싶다면, 비디오 게임 산업의 교훈을 배우고 적용해야 함

[통행료를 생각할 것 - Mind the Toll]

  유통 비용의 중요성

     * 래스키는 유통이란 ""개발자의 손에 있는 완제품과 소비자의 손에 있는 플레이 가능한 제품 사이에 존재하는 총 비용""을 의미한다고 주장함
          + 유통은 단순히 마케팅 비용이 아니라, 가격 책정, 포장, 그리고 제품을 고객의 손에 전달하는 방법과 상호 연결되는 수많은 다른 것들에 대한 일련의 선택임
     * 개발자와 소비자를 연결하는 도로망으로 비유해보면
          + ""콘텐츠가 그 네트워크를 통해 특정 경로를 따라 이동할 때, 그 이동에는 제반 비용이 들어감""
          + ""iOS 앱 스토어를 통해 유통할때 내는 것처럼 명시적인 통행료는 없을 수 있지만, 어떤 경로를 택하든 항상 제반 비용이 있을 것임""

  유통을 성장 부서의 영역으로 할당하는 것의 문제점

     * 창업자들은 유통을 회사의 ""Growth"" 부서의 관할 영역으로 할당하는 것이 유혹적임
          + 판매와 마케팅이 수요를 창출하기 때문에 그것이 그들의 일이기 때문임
          + 특히 재무 문서가 그렇게 설계되어 있기 때문에 더욱 유혹적임
          + 마케팅 비용은 알기 쉽고, 플랫폼 수수료는 명백함
          + CFO는 광고에 얼마나 지출했는지 볼 수 있는 스프레드시트를 매달 준비함
          + 그러나 이러한 버킷리스트적 사고방식은 큰 문제임

  투자자들의 단순화된 사고방식의 문제점

     * 투자자들은 이러한 이데올로기의 슈퍼 전파자이기도 함
          + LTV/CAC와 같은 비율로 비즈니스를 단순화함으로써 이러한 오류를 지속시킴
          + 지표는 중요하고 유용한 신호이지만, 인수 비용의 회수 기간이 회사 성장을 위해 고려해야 할 전부라고 가정함으로써, 스타트업의 핵심인 사람들이 원하는 것을 만드는 것을 잊어버림

  유통에 대한 더 나은 사고방식

     * 유통에 대해 생각하는 더 나은 방법이 있음
          + 새로운 제품 사용 패턴? 그것도 유통임
          + 새로운 가격 모델? 그것도 유통임
          + 앱의 핵심 워크플로우 루프에 소셜 공유 기능 구축? 유통임
          + 유통 역량 버킷에 넣는 기능들을 확장하면 창업자들이 더 혁신적일 수 있음
     * 이는 비용도 마찬가지임
          + 유통은 단순히 Meta에 광고비로 지불하는 것이 아니라, 특정 채널을 선택함으로써 발생하는 기회비용임:
               o ""비용의 금전적 가치뿐만 아니라, Apple에 지불해야 하는 수익의 30%도 있음""
               o ""그러나 Steam(비디오 게임 플랫폼)에 갈 때, 고객에 대한 통제, 특정 종류의 정보에 대한 액세스, 고객과 직접 소통할 수 있는 능력에 대한 선택을 하는 것임""

  디지털 미디어 기업의 교훈

     * 디지털 미디어 기업들은 지난 4년 동안 이 불편한 교훈을 배우고 있음
          + BuzzFeed와 같은 회사는 소셜 미디어 플랫폼을 통해 중재되는 유통을 구축하기로 선택했음
          + 잠시 동안은 효과가 있었고, 엄청난 규모에 빠르게 접근할 수 있었음
          + 그러나 Facebook과 같은 플랫폼에 의존하기로 한 선택은 중요한 형태의 고객 참여를 앗아갔음
          + 실제로 독자층은 상대적으로 거의 인구통계학적 정보가 없이 해당 플랫폼에서 빌려온 것이었고(광고 효과를 떨어뜨림), 회사는 이메일 주소와 같은 독자에 대한 직접적인 연결을 거의 확보하지 못했음
          + BuzzFeed는 한때 15억 달러의 비상장 기업 가치를 가졌지만, 상장하고 뉴스 부문을 완전히 폐쇄한 후 현재 가치는 겨우 5천5백만 달러임

[비디오 게임 산업의 변화와 소프트웨어 산업에의 영향]

     * 1980년대와 1990년대에는 비디오 게임이 물리적인 카트리지와 디스크 형태로 유통됨
          + 아이들은 부모에게 최신 마리오 게임을 사러 가게에 가자고 조르곤 했음
     * 당시 비디오 게임 유통 마진 구조:
          + 소매점에서 게임을 약 50달러에 판매함
          + 이 중 게임 퍼블리셔는 약 40달러를 받음
          + 잉그램 마이크로 같은 유통업체는 퍼블리셔로부터 약 15달러를 받고 소매점으로 게임을 배송함
     * 추가 마케팅 비용이 없다고 가정하면, 게임이 팔릴 때마다 퍼블리셔는 광고 가격의 약 50%, 즉 25달러를 받게 됨
     * 더 나쁜 것은, 이것이 단지 퍼블리셔의 몫이라는 점임
          + 퍼블리셔와 제휴한 개발 스튜디오라면, 개발자는 표시 가격의 10%밖에 받지 못할 수도 있음
          + 실제 게임을 만드는 노동력은 기본적으로 아무것도 받지 못함

  액티비전과 일렉트로닉 아츠의 성공 요인

     * 당시 액티비전과 일렉트로닉 아츠 같은 대기업들은 훌륭한 게임도 있었지만, 유통 혁신 때문에 승리했음
          + 그들은 ""잉그램 마이크로가 제공하는 비싼 서비스에 의존하지 않기 위해 자체 유통 시스템을 구축했음""
          + 액티비전은 패키지 포장업자와 판매원을 고용했음
          + 모든 간접비용에도 불구하고, 이 유통 시스템은 유통업체가 받는 14% 정도의 비용을 한 자릿수로 낮췄음
     * 유통 선택에 스며들어 있는 보이지 않는 비용을 상기시켜 보면
          + 자체 유통망을 구축하면 소매점에서 게임을 묶어서 판매할 수 있게 됨
          + 베스트바이가 최신 FIFA 게임을 재고로 쌓아두려면, 일렉트로닉 아츠의 새로운 실험적 프랜차이즈를 위한 선반 공간도 남겨두어야 했음

  기업용 소프트웨어의 유사한 발전 과정

     * 마이크로소프트는 인상적인 소프트웨어를 만들었지만, 사용자의 손에 직접 소프트웨어를 전달하는 더 저렴한 방법을 찾아냈기 때문에 이겼음
          + 마이크로소프트는 처음에 IBM이 운영 체제인 MS-DOS를 구축하는 것을 보조금으로 설득했고, 그 계약의 일부로 다른 컴퓨터 제조업체에 운영 체제를 판매할 수 있었음
          + 그 후 마이크로소프트는 대부분의 개인용 컴퓨터 제조업체와 사전 설치 계약을 체결하여 소매 유통을 완전히 건너뛸 수 있었음

  비디오 게임의 디지털 플랫폼 전환과 개발자 마진의 변화

     * 비디오 게임이 물리적 디스크에서 디지털 플랫폼 퍼블리싱으로 바뀌면서 거의 동일한 진화가 일어남
          + 퍼블리셔와 협력하여 비디오 게임 개발자가 얻을 수 있는 10% 마진과 비교할 때, 플랫폼과 직접 협력하는 것은 상대적으로 좋은 거래처럼 보임
          + 대부분의 앱 개발자는 Apple, Google, Steam(2003년에 설립된 온라인 게임 스토어)에 수익의 30%만 제공하면 되고, 모든 중개인을 제거할 수 있음
     * 플랫폼 발전 주기:
         1. 새로운 플랫폼에는 지불 능력이 높고 가격 허용 오차가 큰 잠재고객을 확보 하고 있음
         2. 상대적으로 경쟁이 적음
         3. 개발자와 사용자가 플랫폼에 몰려들면서, 유통의 발견 부분에 더 많은 가치를 부여함
     * 원래 30%의 수수료(한때 유통의 전체를 포함했던)는 이제 최종 거래 지점만 다루고, 그 과정의 발견은 다루지 않음
          + 마케팅 비용이 다시 증가하고, 검색 광고가 선반 요금(즉, 가장 눈에 띄는 선반 부분에 배치하기 위해 소매업체에 지불하는 비용)을 대체함
          + 일부 콘텐츠 제작자에게는 여전히 더 나은 거래지만, 기업 가치를 구축하는 장기적인 방법은 아님
          + 당신의 유통 전략이 앱스토어에 무언가를 올리는 것이라고 말하는 것은, 90년대에 Mall of America를 걸으며 당신의 비디오 게임 이름을 외치는 것과 같음
     * 플랫폼이 큐레이터 역할에서 유통업체 역할로 바뀌면, 수수료율은 동일하게 유지되지만 플랫폼의 공급자에게 제공되는 가치는 점점 줄어들 것임

[네트워크 효과를 위한 경쟁의 시작]

     * 디지털 거인을 붕괴시키는 것은 믿을 수 없을 만큼 도전적임
     * 가장 분명한 예는 에픽 게임즈와 스팀 간의 투쟁임
     * 스팀은 게임에 초점을 맞춘 앱 스토어와 같음
     * 게이머는 친구 목록을 만들고 비디오 게임을 구매할 수 있으며, 플랫폼은 마켓플레이스를 통해 판매하려는 비디오 게임 퍼블리셔에게 30%의 수수료를 부과함
     * 2018년 포트나이트를 만든 에픽은 스팀에 직접 도전하기로 결정했음
     * 12%의 수수료율로 스팀의 30%보다 60% 저렴했음
     * 에픽의 언리얼 엔진으로 게임을 만든 개발자의 경우 에픽 게임즈 스토어는 해당 소프트웨어에서 추가로 5%의 수익 수수료율도 없앴음
     * 수요 측면을 자극하기 위해 에픽은 무료 게임으로 보조금을 지급했음

  네트워크 효과의 힘과 스팀의 우위

     * 그럼에도 불구하고 그것으로는 충분하지 않았음
     * 수수료를 낮췄음에도 불구하고 개발자와 사용자 모두 여전히 스팀을 압도적으로 선호함
     * 2022년 기준 스팀에는 약 5만 개의 게임이 있는 반면 에픽 스토어에는 약 2천 개의 게임만 있음
     * 에픽은 아직 플랫폼에서 수익을 내지 못하고 있는 반면 스팀은 연간 수억 달러를 벌고 있음
     * 공급이 많을수록 수요 측면의 혜택이 커지는 양면 네트워크 효과는 너무 강력해서 스팀을 무너뜨리기 어려움
     * 소셜 미디어 플랫폼이 더 많은 사람과 개발자가 사용할 때 사용자와 광고주 모두에게 더 가치 있는 것과 마찬가지로 비디오 게임 플랫폼에서도 마찬가지임

  시장 차익을 활용한 유통 혁신과 네트워크 효과 구축의 중요성

     * 유통 혁신은 수익성 있게 고객을 획득할 수 있는 시장 차익을 활용하고 가능한 한 빨리 네트워크 효과를 구축하는 것임
     * 2004년 스팀이 출시된 직후 모회사 밸브는 하프라이프라는 엄청나게 인기 있는 게임 시리즈를 스팀에서만 독점적으로 출시했음
     * 베스트바이에서 게임 디스크를 구매하더라도 스팀을 다운로드해야 했음
     * 스팀이 독점 오리지널을 성장 전략으로 개척한 최초의 회사는 아니었지만 온라인 스토어를 구축하기 위해 이를 수행한 최초의 회사 중 하나였음
     * 2003년에 뿌렸던 씨앗은 15년 간의 복리 네트워크 효과로 인해, 에픽은 스팀과 경쟁하기 위해 수억 달러를 희생해야 했음

  기술에서 가장 중요한 순간인 플랫폼 전환

     * 이것이 바로 플랫폼 전환이 기술에서 가장 중요한 순간인 이유임
     * 물리적 유통에서 인터넷 유통으로의 전환으로 스팀은 수십 년 동안 이익을 창출했음
     * 기업용 소프트웨어에서도 유사한 역학이 발생했는데, 클라우드 전환을 성공한 회사(어도비, 마이크로소프트 등)는 번성한 반면 다른 회사(시스코, IBM 등)는 성공하지 못했음

[Distribution is all you need]

     * 우리는 다양한 플랫폼 변화의 벼랑 끝에 서 있음
     * 하드웨어 측면에서는 휴메인과 같은 새로운 AI 기반 기기가 출현했음
     * 다른 한편으로 애플 비전 프로 혼합 현실 헤드셋은 놀랍도록 다른 역량을 보여줌
     * 소프트웨어 측면에서 대규모 언어 모델과 생성 AI가 지금까지 가장 중요한 발명 중 하나일 수 있다고 봄
     * 가장 흥미롭고 역동적인 시기임. 세상은 빠르게 변하고 있음
     * 기술 패러다임의 변화를 거대한 화산이 폭발하는 것과 같다고 생각하면 됨
          + 지형이 바뀌고 새로운 산봉우리가 등장함
          + 때로는 구세계의 거인들이 깔끔하게 전환하기도 하지만 때로는 그렇지 못할 수도 있음
     * 하지만 이 새로운 세상에서는 화려한 기술로 멋진 무언가를 만드는 데 지나치게 집중하고 싶은 유혹이 있음
          + 대부분 그게 가장 재미있기 때문
     * 가격 책정 전략의 효과에 대해 토론하며 즐거워하는 사람은 거의 없음
     * Lasky는 훌륭한 제품과 훌륭한 콘텐츠가 고객을 늘리지만, 궁극적으로 업계를 정복하는 기업은 ""유통이 왕이라는 것을 아는 기업""이라는 것을 가르쳐줬음

   너무 재밌는 관점이네요.

   한국에서는 유통이 천룡인 급이라

   게임 업계에서는 '컨텐트가 왕이라면, 유통은 신'라는 말이 있죠.

   글의 내용을 따라서 이야기 해보면, ""긱뉴스는 정보 유통 채널을 구축""하고 있습니다.
   약 1만명에 달하는 위클리 구독자와 3천개가 넘는 긱뉴스 슬랙봇을 통해서 국내 기업들에 정보를 전달하는 채널을 만들고 있고, 이를 통해 업계에 새로운 서비스/패러다임/변화가 나타났을 때 쉽게 전달할 수 있을 거라 생각하고 있습니다.

   +1
   잘 보고있습니다.
"
"https://news.hada.io/topic?id=14675","스마트 플러그와 Prometheus, Grafana를 활용한 에너지 사용량 모니터링 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스마트 플러그와 Prometheus, Grafana를 활용한 에너지 사용량 모니터링 시스템

스마트 플러그, Prometheus, Grafana를 이용한 에너지 사용량 모니터링

     * 이 글은 설정의 각 부분을 자세히 설명하는 튜토리얼이 아님. 리눅스와 커맨드 라인에 익숙하다면 이 설정을 직접 따라할 수 있음.

  스마트 플러그 구매 및 설정

     * 몇 년 동안 컴퓨팅 셋업과 가전제품의 에너지 사용량에 관심이 있었음.
     * 이전에는 순간 측정치를 얻기 위해 간단한 디지털 에너지 미터를 사용했지만, 장기간 동안 전기 기기의 전력 소비량을 모니터링하기에는 적합하지 않았음.
     * athom.tech에서 스마트 플러그를 구매함. EU 스타일 플러그 V3 버전을 구매했고, 배송은 크리스마스 기간을 포함해 9일 걸림.
     * 플러그는 Tasmota가 사전에 플래시되어 제공됨. Wi-Fi 네트워크에 연결하는 방법이 적힌 종이가 동봉되어 있고, 이후 브라우저에서 플러그를 관리할 수 있음.
     * 웹 GUI에서 몇 번의 클릭만으로 최신 버전으로 펌웨어 업데이트가 쉽게 가능함.

  소프트웨어 스택

     * 초기 목표는 홈서버, 공유기, 워크스테이션, 전기 온수기 등의 전력 소비를 시각적으로 모니터링하는 것이었음.
     * 전력 미터 데이터는 기존 홈서버의 Prometheus 인스턴스에 수집됨.
     * 서버에서 플러그마다 tasmota-power-exporter 솔루션의 여러 인스턴스를 실행하고, Prometheus가 1초마다 수집함.
     * 이미 홈서버에서 실행 중인 Grafana 인스턴스를 재사용하여 전력 미터 설정에 대한 기본 그래프를 표시함.

  관찰 및 발견

     * 거의 4개월간 이 설정을 실행한 후 알게 된 점들:

    온수기

     * 전기 온수기가 가장 많은 전력을 사용한다는 것은 놀라운 일이 아님.
     * 전형적인 전력 사용량: 4.51kWh/일
     * 관찰된 최소값: 0.56kWh/일, 보통 아무도 집에 없을 때 발생
     * 관찰된 최대값: 11.1kWh/일, 많은 빨래와 샤워가 있었던 날

    홈서버 셋업

     * Zimaboard에서 모든 홈서버 워크로드를 실행함. 주요 장점 중 하나는 매우 낮은 전력 소비였음.
     * ISP 제공 모뎀/공유기 박스는 Zimaboard보다 더 많은 전력을 사용함.
     * 일시적으로 홈서버 설정을 ASRock Deskmini X300으로 전환함. Zimaboard에 비해 유휴 전력 소비가 훨씬 높음.

    전압

     * Tasmota 플러그는 현재 전압 값도 보고함. 일반적인 피크 전력 소비 시간 동안 전압이 전반적으로 떨어짐.
     * 전압 강하는 온수기, 전기 주전자, 전기 스토브, 전자레인지와 같이 많은 전력을 사용하는 기기를 실행할 때 발생함.

    워크스테이션

     * 전형적인 전력 사용량: 0.95kWh/일
     * 관찰된 최소값: 0.07kWh/일
     * 관찰된 최대값: 1.52kWh/일

    충전

     * 이 플러그는 다양한 기기의 충전 패턴을 관찰하는데 좋음.
     * 대부분의 기기에서 배터리가 거의 가득 찰 때까지 빠르게 충전되다가 속도가 느려지는 패턴을 보임.

    안정성

     * 스마트 플러그의 안정성은 대체로 괜찮지만, 특정 플러그가 제때 통계를 보고하지 않는 경우가 자주 있음.
     * 두 개의 플러그를 완전히 껐다 켜야 했음.

  향후 아이디어

     * 플러그는 다양한 API를 통해 기기를 켜고 끌 수 있는 방법을 제공함. Home Assistant나 간단한 스크립트를 사용할 계획임.

  마무리 생각

     * 전반적으로 이 설정에 매우 만족함. 앞으로 다양한 컴퓨팅 설정에 대해 신뢰할 수 있는 측정을 할 수 있게 되어 기기의 전력 효율성을 판단하기가 훨씬 쉬워짐.

GN⁺의 의견

     * 이렇게 집안 전체의 전기 사용량을 플러그 단위로 매우 세세하게 모니터링할 수 있다는 것이 흥미로움. 보통은 월별 고지서로만 알 수 있는데, 1초 단위로 파악할 수 있다니!
     * 저자의 Zimaboard vs ASRock 전력량 비교를 보면, 전력 효율에 신경쓰려면 CPU에서 지원하는 C-State를 잘 활용할 수 있는지가 중요해 보임.
     * 전체 가정용 IT 환경을 모니터링한다면 시간대별/상황별 전력 사용 패턴을 파악해서 요금제 선택에 참고할 수도 있을 것 같음.
     * 스마트홈을 구축하려면 이렇게 각종 센서 데이터를 수집하고 시각화할 수 있는 Prometheus, Grafana 같은 시스템 구축이 기본이 되어야 할 듯함.
     * 실시간 전력량을 모니터링할 수 있다면, 피크 시간대를 피해서 전기를 사용하도록 제어하는 것도 가능할 것 같음. 전기요금 폭탄을 맞지 않는데 도움이 될 수 있겠음.

        Hacker News 의견

   요약:

   • 집의 전력량계에 Zigbee 전력 차단기를 연결하고 전력 소비량을 e-ink 디스플레이에 표시하는 방법을 소개함 • Rainforest Automation Eagle이라는 장치를 구입하여 스마트 미터기를 읽고 Prometheus에 데이터를 전송함
     * 전력 회사의 가격 정보도 Prometheus로 연동하여 Grafana로 시각화함 • Emporia Vue 2를 배전반에 설치하여 16개의 CT와 3개의 주상 전력을 모니터링하고, ESPHome과 연동하여 로컬에서 데이터를 수집함
     * Home Assistant와 VictoriaMetrics를 사용하여 Grafana로 시각화함 • IoTaWatt 장치를 패널에 설치하여 회로별 모니터링을 수행하고, InfluxDB와 직접 연동하여 Grafana에서 사용함 • Tapo P110 스마트 플러그에서 전력 사용량 메트릭을 수집하여 Grafana Cloud로 전송함 (tapmon 사용)
     * 단, WiFi 기반 스마트 플러그 사용 시 주의사항 있음 • 저렴한 ESP32와 조도 센서를 전력량계에 연결하여 전력 사용량을 Google Sheets로 업로드하고 그래프로 표시함
     * 다른 ESP32는 움직임 감지 센서를 연결하여 노인 가족의 움직임을 모니터링함 • Grafana를 IoT/SCADA 제어 방향으로 발전시켜 데이터 시각화와 제어를 모두 수행할 수 있기를 기대함
     * Home Assistant를 추천하는 것은 개인적으로 선호하지 않음 (Grafana Labs 직원의 의견) • Grafana 자체가 과도한 리소스를 사용하는 소프트웨어라는 우스갯소리도 있음 • Home Assistant와 Power Calc을 사용하여 안정적인 가전제품의 전력 사용량을 시뮬레이션하고, Sankey 차트 등으로 시각화할 수 있음
"
"https://news.hada.io/topic?id=14673","딥 강화학습: 초보자에서 전문가로의 도약","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         딥 강화학습: 초보자에서 전문가로의 도약

Deep Reinforcement Learning 입문 과정

     * 이 과정은 기초적이고 고전적인 Deep Reinforcement Learning 알고리즘에 대한 실용적인 입문 과정임
     * 과정을 마치면 DQN, SAC, PPO 등의 알고리즘을 직접 구현할 수 있게 되고, 알고리즘의 이론적 배경도 높은 수준에서 이해하게 됨
     * Atari 게임을 하거나 달에 착륙하는 AI를 학습시킬 수 있게 됨

  환경 설정

     * 학습에 집중할 수 있도록 환경 설정 방법을 제시함
          + Miniconda 설치 (Python 버전 선택 가능한 환경 관리자)
          + 이 Git 저장소 체크아웃 후 해당 폴더로 이동
          + drlzh 가상환경 생성 및 활성화
conda create --name drlzh python=3.11
conda activate drlzh

          + Poetry 설치 및 종속성 설치 (Atari용 gymnasium[accept-rom-license] 포함)
pip install poetry
poetry install

          + Visual Studio Code 설치

  시작 방법

     * Visual Studio Code에서 이 저장소 폴더 열기 (.vscode 폴더 유지)
     * 첫번째 00_Intro.ipynb 노트북 열고 따라하기
     * 계속해서 다음 노트북으로 이동
     * 막히면 /solution 폴더 참조
     * 단계별 코딩에 대한 자세한 설명은 YouTube 영상 확인

GN⁺의 의견

     * Reinforcement Learning은 게임이나 로보틱스 분야에서 큰 성과를 내고 있는 AI 기술 중 하나로, 실제 문제에 적용하기에는 아직 어려움이 있음. 예를 들어 학습 과정에서 시간이 오래 걸리고, 안전이 중요한 상황에서는 시행착오를 겪기 어려움
     * 이 과정은 Atari 게임이나 달착륙 시뮬레이션 같은 간단한 문제를 다루고 있어서 입문자가 배우기에는 좋지만, 실제 현장에서 활용하려면 추가적인 학습이 필요할 것으로 보임
     * 이런 오픈소스 교육 자료들이 늘어나면서 더 많은 개발자들이 AI 기술을 배우고 활용할 수 있게 되었음. 특히 강화학습은 robotics나 자율주행 분야의 엔지니어에게 필수적인 기술이 될 것으로 전망됨
     * 실습 환경 구축을 위해 Conda, Poetry 등 다양한 도구를 사용하고 있는데, 초보자에게는 환경 설정 과정이 부담스러울 수 있음. 클라우드 기반 실습 환경을 제공하면 진입장벽을 낮출 수 있을 것 같음

        Hacker News 의견

   요약해보겠음:
     * Deep Reinforcement Learning(심층 강화학습)을 배우려고 노력하면서, 많은 훌륭한 리소스들을 활용할 수 있었으나, 이론과 실습의 적절한 균형을 제공하는 자료는 부족했음
     * 그래서 직접 만들어 오픈 소스로 공유하기로 결정함. 처음부터 파이썬 노트북에 알고리즘을 재작성하여 ""교육적 접근법""으로 작성함
     * QLearning, DQN, SAC, PPO 등 가장 많이 사용되는 알고리즘에 대한 이론과 코딩 연습을 안내하는 실습 중심의 단계별 튜토리얼임

    피드백

     * 실제로 동작하는 간단한 예제는 많지만, 문제가 발생했을 때 어떻게 해야 할지에 대한 실용적인 리소스가 부족함. 예를 들어 액션이 최대값에 걸려 있거나, 탐색이 제대로 되지 않는 등의 문제 상황에 대한 조언이 있으면 좋겠음
     * 최신 RL 기술도 테트리스에서는 간단한 휴리스틱에 비해 성능이 좋지 않은 문제가 있음
     * Gym과 유사한 음악 생성용 DRL 프레임워크 RaveForce를 공유함. 이를 활용해 알고리즘을 테스트해볼 수 있음
     * 통계/ML 배경 지식이 부족한 사람도 에이전트가 어떻게 학습하는지 이해하는데 도움이 될 것 같음
     * 유튜브 영상 링크를 추가하면 좋겠음
     * 제목에서 Andrej Karpathy의 ""Neural Network: Zero To Hero""를 차용했다고 밝힘. 개인 브랜드 혼동 가능성에 대한 지적도 있음
"
"https://news.hada.io/topic?id=14724","그레이트풀 데드의 Wall of Sound (2019)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     그레이트풀 데드의 Wall of Sound (2019)

     * Owsley ""Bear"" Stanley, 그레이트풀 데드의 사운드 엔지니어가 LSD 트립 중에 영감을 받아 기술 엔지니어링의 거대한 위업인 ""The Wall of Sound""를 만들었고, 이는 라이브 사운드와 엔지니어링에 돌이킬 수 없는 긍정적인 변화를 가져왔음

Owsley ""Bear"" Stanley 소개

     * Owsley Stanley는 그레이트풀 데드의 사운드에 집착했던 엔지니어로, 1960년대 중반 히피 시대에 샌프란시스코 만 지역에서 결성된 이 밴드는 엄청난 숭배자들을 자랑했음
     * 엔지니어링 중퇴생인 그는 1965년 Ken Kesey의 악명 높은 'acid test' 파티에서 그레이트풀 데드를 만나 친구가 되었고, 밴드의 사운드맨으로 일하기 시작했으며 LSD 제조 수익금으로 밴드에 자금을 댔음
     * 환각 사건 이후 그레이트풀 데드의 사운드에 집착하게 되었고, 밴드와 함께 오랫동안 일하며 청각적 완벽함을 추구하는 끝없는 길을 걷기 시작했음

The Wall of Sound 개발

     * 1969년 회의에서 그들의 기술적 문제에 대한 해결책을 모색하던 중 Owsley는 PA를 밴드 뒤에 배치할 것을 제안했는데, 이 제안은 콘서트 사운드에 대한 오디오 엔지니어의 생각을 바꿔 놓았음
     * 이는 청중과 밴드가 지연, 혼란스러운 잔향, 충돌하는 주파수, 최소한의 피드백 없이 동일한 것을 듣게 된다는 것을 의미했음
     * 곧 Bear는 그의 가장 야심찬 디자인을 시작했고, 그레이트풀 데드 사운드 팀과 Alembic社가 협력하여 전설적인 Wall of Sound를 만들었음

The Wall of Sound 시스템

     * 이 거대한 구조물은 600개 이상의 고음질 스피커로 구성되어 있었고, 밴드가 연주하는 동안 그들 뒤에 놓여 있었음
     * 6개의 독립된 사운드 시스템을 사용하여 11개의 독립 채널을 분리할 수 있었고, 각 스피커가 한 번에 하나의 악기나 목소리만 전달함으로써 상호변조 왜곡이 없는 선명한 오디오를 만들어냈음
     * Wall of Sound는 그 자체로 모니터링 시스템 역할을 했고, 당시 사운드 엔지니어들이 직면했던 많은 기술적 문제들을 해결했음
     * 완성된 Wall of Sound는 1974년에 데뷔했지만, 초기에는 스피커와 가수의 후면 보컬 마이크 사이의 피드백 문제, 물리적으로 시스템을 장착하는 거대한 작업 등의 문제가 있었음

The Wall of Sound의 유산

     * Wall of Sound의 일부는 보관, 재사용, 재활용되어 향후 투어용으로 사용되었고, 다른 일부는 매각되었는데, 그레이트풀 데드의 친구들인 Hot Tuna와 Jefferson Starship이 이 최고급 장비를 재빨리 구입했다고 함
     * 현대의 기술 발전으로 인해 Wall of Sound보다 훨씬 강력하고 가벼워졌지만, 실험적이고 제한 없는 엔지니어링 측면에서 Wall of Sound는 여전히 타의 추종을 불허함

GN⁺의 의견

     * Wall of Sound 시스템은 당시 라이브 공연 사운드 기술의 한계를 극복하고자 했던 시도였음. 오늘날에는 훨씬 더 가볍고 강력한 장비들이 개발되었지만, 실험 정신과 도전 의식은 여전히 존경받아 마땅함
     * 다만 Wall of Sound의 물리적인 규모와 비용 문제 때문에 지속가능한 모델은 아니었던 것으로 보임. 혁신에는 때로 실패의 위험도 뒤따르기 마련임
     * 사운드에 대한 Owsley의 열정과 그레이트풀 데드와의 협업은 오늘날 라이브 공연 사운드 기술 발전의 토대가 되었다고 봄. 예술가와 엔지니어의 창의적 협업이 신기술 개발에 중요한 역할을 한 좋은 예시라 할 수 있음
     * 다만 LSD 등 마약 문제로 인한 Owsley의 구설수는 아쉬운 부분. 사운드에 대한 열정을 마약이 아닌 다른 영감의 원천으로 승화했다면 어땠을까 하는 아쉬움이 있음

        Hacker News 의견

     * 피드백 방지를 위해 각 보컬 마이크를 두 개씩 배치하고, 한 쪽의 위상을 반전시켜 스피커로 전달하는 우아한 솔루션이 사용됨. 이를 통해 두 마이크의 차이만 증폭되어 목소리는 통과하지만 스피커에서 나오는 공통 신호는 제거됨.
     * ""Wall of Sound""의 유산은 오늘날 대부분의 콘서트에서 수직 라인 어레이 스피커로 볼 수 있음. 수평 배열보다 수직 배열이 왜곡이 적음. 현대 홈 스피커도 이런 철학을 어느 정도 따르고 있음.
     * Grateful Dead의 공연 오디오 테이프를 무료로 들을 수 있는 사이트와 앱이 소개됨. 데드는 테이핑을 허용했을 뿐만 아니라 장려했음.
     * Dave Rat은 현대 장비를 사용한 ""Wall of Sound"" 아이디어에 대해 흥미로운 견해를 가지고 있음. 스피커는 폴리포니에 취약하므로 이를 피할수록 더 자연스러운 사운드를 더 넓은 영역에서 만들어낼 수 있음.
     * 로버트 하일(Robert Heil)은 최근에 사망한 기술적 관점에서 ""Wall of Sound""를 바라본 인물임. 그의 이야기와 인터뷰가 소개됨.
     * 1960년대 후반까지 연주자 앞에 증폭기를 두는 것이 시작되지 않았다고 함. 그 전에는 뮤지션들이 증폭기 바로 앞에 서서 엄청난 데시벨에 노출되었음.
     * Sunn O)))의 무대 설치도 같은 계보의 먼 친척으로 보임.
"
"https://news.hada.io/topic?id=14661","Convex - 풀스택 앱 개발을 위한 BaaS 오픈소스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Convex - 풀스택 앱 개발을 위한 BaaS 오픈소스

     * Backend-As-A-Service : DB, 서버 펑션, 스케쥴링, 스토리지, 전문 검색, 벡터 검색 등을 하나로 대체
     * React/ReactNative, Next.js, Vue, Node.js, Python, Rust 등에서 쉽게 추가하여 이용 가능
          + 클라이언트 라이브러리는 캐싱 및 실시간 업데이트등의 기능을 다 포함하고 있어서, 사용자는 앱 개발에만 신경쓰면 됨
     * 사용자 인증은 내부에 구현 가능하지만, Clerk/Auth0 등을 이용하는 것을 권장
     * 호스팅 버전과 같은 소스지만, 싱글머신이며 스케일 아웃은 없음(디비 복제, 프로덕션 대시보드, 관리도구등은 제외)
"
"https://news.hada.io/topic?id=14753","Popover API를 통한 팝오버 기능 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Popover API를 통한 팝오버 기능 구현

Popover API의 주요 내용 요약

  Popover API 소개

     * Popover API는 개발자에게 페이지 콘텐츠 위에 팝오버 콘텐츠를 표시하기 위한 표준적이고 일관되며 유연한 메커니즘을 제공함
     * 팝오버 콘텐츠는 HTML 속성을 사용하여 선언적으로 제어하거나 JavaScript를 통해 제어할 수 있음

  Popover의 특징과 사용 방법

     * 팝오버는 Modal과 Non-modal 두 가지 방식으로 나뉘며, Popover API로 생성된 팝오버는 항상 Non-modal임
          + Modal은 팝오버가 표시되는 동안 페이지의 나머지 부분이 비대화형으로 렌더링되는 것을 의미함
          + Non-modal은 팝오버가 표시되는 동안 페이지의 나머지 부분과 상호 작용할 수 있음을 의미함
     * 팝오버의 일반적인 사용 사례로는 액션 메뉴, 사용자 정의 ""토스트"" 알림, 폼 요소 제안, 콘텐츠 선택기 또는 교육 UI 등이 있음
     * 팝오버는 HTML 속성을 통해 선언적으로 생성하거나 JavaScript API를 통해 생성할 수 있음

  Popover API 관련 HTML 속성

     * popover: 요소를 팝오버 요소로 변환하는 전역 속성
     * popovertarget: <button> 또는 <input> 요소를 팝오버 제어 버튼으로 변환
     * popovertargetaction: 제어 <button> 또는 <input>에 의해 제어되는 팝오버 요소에서 수행할 작업 지정

  Popover API 관련 CSS 기능

     * ::backdrop: 팝오버 요소 바로 뒤에 배치되는 전체 화면 요소로, 원하는 경우 팝오버 뒤의 페이지 콘텐츠에 효과를 추가할 수 있음
     * :popover-open: 팝오버 요소가 표시 상태일 때만 일치하는 의사 클래스로, 팝오버 요소가 표시될 때 스타일을 지정하는 데 사용할 수 있음

  Popover API 관련 인터페이스와 확장

     * ToggleEvent: 팝오버 요소의 상태가 표시와 숨김 사이에서 전환될 때 사용자에게 알리는 이벤트를 나타냄
     * HTMLElement.popover, HTMLButtonElement.popoverTargetElement, HTMLInputElement.popoverTargetElement, HTMLButtonElement.popoverTargetAction, HTMLInputElement.popoverTargetAction 등의 인스턴스 속성이 추가됨
     * HTMLElement.hidePopover(), HTMLElement.showPopover(), HTMLElement.togglePopover() 등의 인스턴스 메서드가 추가됨
     * beforetoggle, toggle 이벤트가 추가됨

GN⁺의 의견

     * Popover API는 웹 개발자에게 팝오버 UI를 쉽게 구현할 수 있는 표준화된 방법을 제공한다는 점에서 의미가 있음. 기존에는 이를 위해 라이브러리를 사용하거나 직접 구현해야 했음
     * 다만 Popover API가 아직 실험적 기능이고 브라우저 지원 범위가 제한적이라는 점은 고려해야 함. 프로덕션 환경에서 사용하기 위해서는 폴리필이나 기존 라이브러리와 병행 사용을 검토해 볼 필요가 있음
     * 유사한 기능을 제공하는 라이브러리로는 Bootstrap의 Popover 컴포넌트, Tippy.js 등이 있음
     * Popover API를 사용할 때는 접근성 측면도 고려해야 함. 키보드로 팝오버를 제어할 수 있어야 하고, 스크린 리더 사용자를 위한 대체 텍스트도 제공되어야 함

        Hacker News 의견

   요약해보면 다음과 같음.
     * CSS Anchor Positioning이 도입되면 Popover API와 결합하여 커스텀 툴팁이나 컨텍스트 메뉴를 선언적인 방식으로 구현할 수 있게 되어 PopperJS 같은 라이브러리가 필요 없어질 것임.
     * 모달 다이얼로그를 원한다면 <dialog> 요소도 사용 가능함.
     * 현재 팝오버는 브라우저 윈도우 경계를 넘어갈 수 없는 등 호스트 OS 윈도잉 시스템과 잘 연동되지 않아 구현에 한계가 있음. 이를 제대로 구현하려면 Win32에서는 팝오버마다 별도 HWND가, macOS에서는 NSView가 필요할 것임.
     * 브라우저에 팝업 차단기가 있는데 이런 API를 만드는 것이 아이러니하긴 함. 90년대 후반~2000년대 초반의 팝업/팝언더 광고 전쟁이 떠오름.
     * Popover API를 사용하면 익스텐션으로 타겟팅해 차단하기 쉬워질 것임. 마케팅 CTA나 침입적인 지원 채팅 등 사용자가 싫어하는 용도로 주로 쓰일 것임.
     * Popover를 모달로 만들고 싶다면 <dialog> 요소를 쓰라고 하는데, 배경을 흐리게 하는 등의 경우라면 팝오버를 모달로 만드는 게 맞는 유즈케이스임. <popover modal=true>가 더 나은 방식 아닐까?
     * Stimulus + Popper로 커스텀 구현한 예시 코드 공유됨.
     * Popover가 뭔지 보여주는 이미지가 페이지에 없다는 지적.
     * 팝오버 API 등장에 감탄하는 반응.
"
"https://news.hada.io/topic?id=14695","프로톤메일, 사용자 데이터 공개로 스페인에서 체포 이어져","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    프로톤메일, 사용자 데이터 공개로 스페인에서 체포 이어져

     * 스페인 당국의 법적 요청과 관련하여 프로톤메일이 카탈루냐 독립 조직 민주쓰나미(Democratic Tsunami) 회원의 데이터를 공개했음. 이로 인해 해당 회원이 체포됨.
     * 프로톤메일은 엔드투엔드 암호화와 엄격한 로그 미저장 정책으로 유명한 스위스 기반의 보안 이메일 서비스임. 2021년에도 프랑스 기후 운동가 체포와 관련된 법적 요청에 응했던 전력이 있음.
     * 이번 사건의 핵심은 프로톤메일이 'Xuxo Rondinaire'라는 가명을 사용하는 개인의 계정에 연결된 복구용 이메일 주소를 스페인 경찰에 제공한 것임. 이 개인은 카탈루냐 경찰(Mossos d'Esquadra)의 일원으로 내부 정보를 민주쓰나미 운동에 제공한 혐의를 받고 있음.
     * 스페인 당국은 프로톤메일로부터 받은 복구용 이메일을 토대로 애플에 추가 정보를 요청하여 해당 개인을 특정할 수 있었음. 이는 기술 기업, 사용자 프라이버시, 법 집행 기관 간의 복잡한 상호작용을 보여주는 사례임.
     * 프로톤메일의 이번 요청 응대는 적절한 경로(스위스 법원 시스템)를 통해 공식화된 국제 법적 요구에 협조하도록 하는 스위스 법의 구속을 받음. 2022년에만 프로톤메일은 5,971건의 데이터 요청에 응했음.

OPSEC의 중요성

     * 이번 상황은 엄격한 OPSEC(작전 보안) 유지의 중요성을 상기시켜줌. 복구 정보나 프라이버시 보호 수준이 낮은 2차 서비스(애플 계정 등)와의 연결이 잠재적 취약점이 될 수 있음을 인지해야 함.
     * 프라이버시에 우려가 있는 사용자, 특히 민감하거나 정치적인 활동에 관여하는 사용자는 프라이버시 도구 사용 시 OPSEC을 최우선으로 고려해야 함.
     * 개인 식별정보나 주요 업무와 직접 연결될 수 있는 복구용 이메일이나 전화번호 사용 자제, 익명성을 제공하는 일회용 이메일이나 가상 전화번호 사용 고려, IP 주소 숨기기 위한 VPN 사용, 익명 결제 수단 활용 등이 권장됨.

프로톤의 입장

     * 프로톤은 이번 사건의 주요 내용을 확인하고, 애플로부터 얻은 데이터가 테러 용의자 식별에 사용된 사실은 프로톤이 최소한의 사용자 정보만 보유하고 있음을 보여준다고 언급함.
     * 프로톤은 기본적으로 프라이버시는 제공하지만 익명성은 제공하지 않음. 익명성은 적절한 OPSEC을 위한 사용자의 노력이 필요함. 예를 들어 애플 계정을 선택적 복구 수단으로 추가하지 않는 것 등임.
     * 프로톤은 복구용 이메일 추가를 필수로 요구하지는 않음. 이는 스위스 법원 명령에 따라 이론적으로 제공될 수 있기 때문임. 테러는 스위스에서도 불법임.

GN⁺의 의견

     * 이번 사건은 사용자 프라이버시와 법 집행 사이의 균형을 맞추는 것이 얼마나 어려운 일인지 잘 보여줌. 국가 안보라는 명목으로 암호화된 통신 서비스의 한계가 드러난 사례라 할 수 있음.
     * 프로톤메일의 입장에서는 스위스 법의 구속을 받을 수밖에 없지만, 이런 일이 반복되면 사용자들의 신뢰를 잃게 될 것임. 엄격한 로그 미저장 정책을 내세우면서도 매년 수천 건의 데이터 요청에 응하고 있다는 사실 자체가 모순으로 보일 수 있음.
     * 민감한 활동에 연루된 사용자들은 이런 사건을 계기로 자신의 OPSEC 수준을 점검해 볼 필요가 있음. 아무리 보안이 강화된 서비스라도 복구용 이메일 등 2차 연결고리를 통해 신원이 노출될 위험이 있음을 잊지 말아야 함.
     * 한편 법 집행 당국은 테러 방지라는 명분으로 과도하게 사용자 정보 제공을 요구하는 것은 아닌지 돌아볼 필요가 있음. 민주적 시위 활동과 테러를 구분하지 않는 태도는 감시 사회로 가는 지름길일 수 있음.
     * 정부와 기업이 제공하는 프라이버시의 한계를 인식하고, 개인 차원의 OPSEC 노력을 게을리 하지 않는 것이 프라이버시를 지키는 최선의 방법일 것임. 이를 위해 VPN, 익명 결제, 일회용 이메일 사용 등 다양한 방안을 활용해 볼 수 있음.

        Hacker News 의견

     * ProtonMail의 고객 보호 현실과 독자들의 기대 사이에 괴리가 있음
          + 합법적인 기업이 제공할 수 있는 보호의 한계가 있음
          + ProtonMail과 Apple은 정당하지 않다고 생각하는 소환장에 이의를 제기하지만, 최종 결정권은 없음
          + 사용자는 서비스 제공업체에 어떤 정보를 제공할지 신중히 결정해야 함
          + 전화번호나 백업 이메일 주소 연결은 신원 파악에 큰 단서가 될 수 있음
     * ProtonMail은 실제 신원 파악(실명, 전화번호 등)에 Apple의 정보 요청이 사용되었기 때문에 언급됨
          + 이메일 주소가 단서였지만, IP 주소, Google 광고 쿠키 등 다른 정보도 신원 파악에 사용될 수 있음
     * 프라이버시를 표방하는 웹사이트가 프라이버시와 익명성을 혼동하는 것을 경계해야 함
          + 프라이버시는 대중으로부터 보호하기에 충분하지만, 국가로부터는 보호하지 못함
          + 국가와 싸우거나 적대하는 경우 단순한 프라이버시로는 부족함
          + 익명성을 위해서는 기능이나 편의성이 희생될 수 있음
     * ProtonMail은 복구 주소를, Apple은 실명, 주소, 전화번호 등의 정보를 제공함
     * VPN 서비스가 결제 방식과 연결되어 있다면 경찰에게 추적할 단서를 하나 더 제공하는 것에 불과함
          + Mullvad는 익명성을 보장하는 결제 방식을 제공하는 유일한 VPN으로 보임
     * 핵심은 스위스 법에 따라 ProtonMail이 IP 주소 정보를 수집하고 제공해야 한다는 점
          + 암호화로 보장되지 않는 한 프라이버시 보장은 공허한 제스처에 불과
          + 누구도 프라이버시 보호를 위해 감옥에 가려 하지 않음
     * Parallel Construction을 고려해야 함
          + 이미 정보를 갖고 있었을 가능성이 있음 (ISP 적법 감청 등)
          + ProtonMail/Apple의 정보 제공이 나쁘긴 하지만 실제 출처만큼은 아닐 수 있음
     * ProtonMail은 스위스 법이 요구할 때만 정보를 제공하며, 스위스 프라이버시법은 상당히 우수함
          + 기업이 바랄 수 있는 가장 엄격한 프라이버시 정책임
          + ProtonMail은 이메일 내용이 아닌 이메일 주소, IP 주소 등만 제공할 수 있음
     * Tor로 ProtonMail 계정을 만들려고 하면 전화번호 확인을 요구함
          + 비 프록시 IP를 사용하면 이를 건너뜀
          + 사용자 신원을 알고 싶어하며 오랫동안 이런 식으로 운영됨
          + 오래전부터 허니팟이었을 가능성이 있음
     * 이번이 ProtonMail이 복구 이메일을 연방 정부에 제공한 첫 사례는 아님
"
"https://news.hada.io/topic?id=14722","해커들, NES Tetris 게임 내에서 리프로그래밍하는 방법 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 해커들, NES Tetris 게임 내에서 리프로그래밍하는 방법 발견

NES Tetris에서 새로운 코드 발견됨

     * 해커들이 게임 내에서 NES Tetris를 재프로그래밍하는 방법을 발견함
     * 이 방법은 게임 종료 크래시를 피하려는 고득점 추격자들에게 도움이 될 수 있음

코드 실행 방법

     * NES Tetris의 ""kill screen""을 활용하여 메모리를 조작하는 복잡한 방법으로 수정되지 않은 하드웨어와 카트리지에서 실행되는 Tetris 버전에 새로운 동작을 코딩할 수 있음
     * Super Mario World, Paper Mario, The Legend of Zelda: Ocarina of Time 등의 게임에서도 유사한 ""임의 코드 실행"" 글리치가 발견된 바 있음
     * NES Tetris에 외부 코드를 도입하는 기본 방법은 적어도 2021년부터 공개적으로 이론화되어 왔음
     * 이 방법은 Tetris의 높은 점수 테이블을 기계어 코드 명령으로 읽기 시작하는 방법을 자세히 설명함

컨트롤러 포트를 이용한 재미

     * NES Tetris의 크래시는 게임의 점수 처리기가 프레임 사이에 새로운 점수를 계산하는 데 너무 오래 걸릴 때 발생함
     * 이 지연이 발생하면 제어 코드의 일부가 새 프레임 쓰기 루틴에 의해 중단되어 의도하지 않은 RAM 부분으로 점프하여 다음 명령어를 찾게 됨
     * 일본 버전 콘솔인 패미컴에서 실행될 때 Tetris가 잠재적 입력을 처리하는 방식 덕분에 플레이어는 이 점프를 조작할 수 있음

높은 점수 테이블에서 코딩하기

     * Displaced Gamers의 점프 제어 방법을 위해 플레이어는 세 번째 컨트롤러에서 ""위쪽""을, 네 번째 컨트롤러에서 오른쪽, 왼쪽, 아래쪽을 누르고 있어야 함
     * 이렇게 하면 점프 코드가 게임의 높은 점수 목록에 대한 이름과 점수를 저장하는 RAM 영역으로 보내져 플레이어가 직접 조작할 수 있는 더 큰 RAM 표면을 제공함
     * 높은 점수 테이블의 대상 부분에 ""(G""를 넣으면 게임이 높은 점수 테이블의 다른 영역으로 점프하도록 강제할 수 있음
     * 여기서 이름과 점수를 NES CPU에 대한 opcode로 순차적으로 읽기 시작함
     * 그러나 이름 입력 영역에 사용할 수 있는 기호는 43개, 높은 점수의 일부가 될 수 있는 숫자는 10개뿐이므로 가용한 NES의 opcode 명령 중 일부만 높은 점수 테이블에 ""코딩""될 수 있음
     * 배터리 백업 저장 시스템이 없기 때문에 해커는 Tetris를 시작할 때마다 이러한 높은 점수를 수동으로 달성하고 복잡한 이름을 입력해야 함

GN⁺의 의견

     * NES 버전의 Tetris에 이런 숨겨진 기능이 있었다는 것이 놀랍다. 당시에는 발견되지 않았던 것 같은데, 수십년이 지난 지금에서야 발견되었다는 점이 신기하다.
     * 패미컴의 확장포트를 활용해서 이런 해킹이 가능했다는 점도 흥미롭다. 닌텐도가 의도하지 않은 기능이었겠지만, 아무래도 NES에 비해 기능이 풍부한 패미컴의 장점이 드러난 것 같다.
     * 이런 버그를 활용해서 오히려 크래시를 방지하는 코드를 심는다는 아이디어도 기발하다. 이론상으로는 게임 플레이를 계속할 수 있게 해주니 고득점 도전에 큰 도움이 될 것 같다.
     * 다만 이 방법을 쓰려면 매번 게임을 시작할 때마다 복잡한 설정을 해줘야 한다는 점은 불편해 보인다. 실제로 사용하려면 좀더 자동화할 방법이 필요할 것 같다.
     * 아무래도 이 방법은 게임 플레이를 즐기려는 일반 유저보다는 고득점에 도전하는 매니아층이나 프로그래밍에 관심 있는 사람들에게 어필할 만한 것 같다. 대중적으로 사용되긴 어려워 보인다.

        Hacker News 의견

   요약:
     * Stross의 소설 'Accelerando'에서 언급된 ""시공간 구조를 해킹하여 그 아래에 있는 것을 찾아내는 것""이 궁극적인 해킹의 목표라는 대사가 이런 익스플로잇을 떠올리게 함.
     * 아무런 실용적 목적 없이 그저 재미로 뭔가를 하는 해커 정신을 갖지 못해 부끄러움을 느낌.
     * NES 카트리지는 ROM에서 구동되지만, 이 익스플로잇은 CPU가 최고 점수 테이블을 저장하는 데 사용되는 RAM으로 점프하도록 함.
     * 누군가 테트리스에서 둠을 구동하는 데 얼마나 걸릴지 궁금해 함.
     * Factorio 내에서 벨트로 거대한 컴퓨터를 만들어 세그먼트 폴트를 일으켜 게임에서 벗어나고 싶어 함.
     * 시간을 잘 낭비했다고 생각함.
     * 오래된 게임에서의 ACE 발견이 매우 흥미로움. 몇 년 전 슈퍼 마리오 월드에서 이를 보고 어떻게 가능한지에 사로잡혔음.
     * 정말 영리한 사람들이 완전히 쓸모없는 일에 많은 시간과 노력을 쏟는 것이 좋아 보임.
     * NES 테트리스에 코드를 주입하는 데는 당장은 이유가 없겠지만, 그것이 요점이 아님. 무엇이 가능한지, 오래된 코드와 원시적인 컴퓨터에게 무엇을 시킬 수 있는지 알아내는 것이 포인트임.
     * 테트리스가 이렇게 오래 걸려서야 깨진 것이 놀라움. 이는 게임 엔딩/크레딧을 가능한 한 빨리 실행하는 것을 목표로 하는 새로운 시대의 any% 런을 예고함.
     * 오카리나 오브 타임은 수년 동안 ACE 익스플로잇이 있었음. 게임 메모리를 조작하고 특정 입구 워프를 편집하여 불과 몇 분 만에 ""완료""될 수 있을 정도로 완전히 망가졌음.
     * 가장 놀라운 것은 사람들이 단지 몇 개의 버튼과 아날로그 조이스틱만 사용하여 손으로 메모리를 편집한다는 것임.
     * 임의 코드 실행이 가능해지는 것이 그 후에 무엇을 하느냐보다 항상 더 흥미로움.
     * 게임을 분해하여 언제 어디서 이 모든 것을 하는지, 그 다음 명령을 입력하기 위해 어디서 조작할 수 있는지 알아내는 것은 존경할 만한 수준의 헌신임.
     * 2024년에 NES/SNES에 시간을 쓰는 것은 닌텐도가 어린이들에게 비윤리적인 정신 통제/심리 트릭을 쓴 증거라고 느낌.
     * 이 사람들은 재능이 있으며, 이 프로젝트를 선택한 이성적인 이유가 없어 보임.
"
"https://news.hada.io/topic?id=14660","이스라엘, 현지 Al Jazeera 사무소 폐쇄 조치","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     이스라엘, 현지 Al Jazeera 사무소 폐쇄 조치

이스라엘, 국가안보 위협 이유로 Al Jazeera 방송국 폐쇄

     * 이스라엘 당국은 일요일 Al Jazeera 현지 사무소를 폐쇄함
          + 정부가 새로운 법을 사용하여 이 위성 뉴스 네트워크의 이스라엘 내 운영을 중단하기로 한 지 몇 시간 만에 이루어짐
     * 비평가들은 이 조치를 ""언론에 있어 암흑의 날""이라고 칭하며, 베냐민 네타냐후의 강경파 정부의 표현의 자유에 대한 태도에 새로운 우려를 제기함

이스라엘 정부, Al Jazeera가 국가안보에 위협이 된다며 정당화

     * 이스라엘 관리들은 Al Jazeera가 국가 안보에 위협이 되기 때문에 이 조치가 정당하다고 말함
          + 이스라엘 총리는 내각 만장일치 투표 후 소셜 미디어에 ""선동 채널 Al Jazeera는 이스라엘에서 폐쇄될 것""이라고 게시함
     * 정부 성명에 따르면 이스라엘 통신부 장관은 즉시 행동에 나설 명령에 서명했음
          + Al Jazeera 이스라엘 사무소 폐쇄, 방송 장비 압수, 케이블 및 위성 회사로부터 채널 차단, 웹사이트 차단 등의 조치를 취함

전쟁 기간 내내 가자지구에서 24시간 보도한 Al Jazeera

     * 카타르가 자금을 지원하는 이 방송사는 가자지구에서 이스라엘의 군사작전을 비판해 왔음
          + 7개월 간의 전쟁 기간 내내 가자지구에서 24시간 보도함
     * Al Jazeera는 이스라엘 안보를 위협한다는 비난이 ""위험하고 어리석은 거짓말""이라며, 기자들을 위험에 빠뜨린다고 주장함
          + ""Al Jazeera 미디어 네트워크는 인권과 정보 접근에 대한 기본권을 침해하는 이 범죄 행위를 강력히 규탄한다""고 성명에서 밝힘
          + Al Jazeera는 전 세계 시청자들에게 뉴스와 정보를 계속 제공할 권리를 주장함

UN 인권최고대표사무소도 이스라엘의 조치 비판

     * UN 인권최고대표사무소는 ""이스라엘에서 Al Jazeera를 폐쇄하기로 한 내각 결정을 유감스럽게 생각한다""고 X에서 밝힘
          + ""자유롭고 독립적인 언론은 투명성과 책임성을 보장하는 데 필수적""이라며 ""가자지구 취재에 대한 엄격한 제한을 고려할 때 더욱 그러하다""고 강조함
          + 표현의 자유는 핵심 인권이며, 정부에 금지령 철회를 촉구함

이스라엘 의회, 국가 안보에 위협이 되는 외국 방송사 일시 폐쇄 허용하는 법안 통과

     * 지난달 이스라엘 의회는 국가 안보에 위협이 되는 것으로 간주되는 외국 방송사를 일시적으로 폐쇄할 수 있도록 하는 법안을 통과시킴
          + 이 법은 네타냐후와 안보 내각이 45일 동안 이스라엘 내 Al Jazeera 사무소를 폐쇄할 수 있도록 허용하며, 이는 연장될 수 있어 7월 말이나 가자지구에서의 주요 군사작전이 끝날 때까지 유지될 수 있음
     * Al Jazeera의 아랍어 서비스는 전쟁 희생자들에 대한 현장 보도를 포함하면서도 하마스와 지역 내 다른 무장단체의 영상 성명을 그대로 게재하는 경우가 많아 이스라엘 관리들로부터 날카로운 비판을 받아왔음

언론인 단체 ""이는 언론에 있어 암흑의 날이자 민주주의에 있어 암흑의 날""

     * 이스라엘, 웨스트뱅크, 가자지구에서 활동하는 국제 뉴스기관 기자들을 대표하는 NGO인 해외언론인협회(FPA)는 이스라엘이 ""권위주의 정부들의 의심스러운 클럽에 합류했다""고 비난함
          + ""이는 언론에 있어 암흑의 날이자 민주주의에 있어 암흑의 날""이라고 성명에서 밝힘

이스라엘 내 정치적 반대 의견도 존재

     * 집권연합의 중도 성향 정당인 국민통합당은 휴전 회담이 실패 직전인 것으로 보이는 시점에 이런 조치가 ""가자지구의 이스라엘인 인질 석방 노력을 방해할 수 있다""고 밝힘

GN⁺의 의견

     * 전시 중 한 국가가 특정 언론사를 폐쇄하는 것은 언론의 자유 침해 소지가 큼. 국가안보를 이유로 들었지만 정작 국민의 알권리를 억압하는 결과를 낳을 수 있음. 이는 민주주의 사회에서 바람직하지 않음.
     * 카타르가 중재자 역할에서 소외된 시점에 이런 조치가 이뤄졌다는 점에서 정치적 의도가 있어 보임. 전쟁 중 언론 통제라는 민감한 사안인 만큼 국제사회의 감시와 견제가 필요해 보임.
     * 팔레스타인 문제 해결을 위해서는 이스라엘과 팔레스타인 양측 모두의 입장을 균형있게 보도할 필요가 있음. 일방의 목소리만 내는 것은 바람직하지 않음.
     * 국가안보라는 명분으로 표현의 자유를 억압하는 행위가 이스라엘 뿐 아니라 전세계적으로 만연한 상황. 국제사회 차원의 언론자유 보호 활동이 필요해 보임.
     * 중동 분쟁에서 제3국의 중재 역할이 중요한데, 카타르의 Al Jazeera 폐쇄는 향후 중재 노력에 부정적 영향을 미칠 수 있음. 장기적 해법 모색을 위해서라도 언론의 자유로운 활동이 필요함.

        Hacker News 의견

   Here is a summary of the key points from the Hacker News comments, organized into a bullet list:

   • Warning about respectful conversation: The thread starts with a reminder to keep the discussion curious and respectful, even on divisive topics, as per the HN guidelines.

   • Israel's internet censorship history:
     * In 2017, Israel started limited internet censorship of terror group websites, illegal gambling, prostitution services, and hard drug sales. Rights groups warned of a slippery slope.
     * In 2021, a broad ""Facebook bill"" authorizing censorship was proposed but did not pass.
     * In April 2024, the Knesset gave the government authority to ban foreign media, going beyond preventing outside media from reporting in Israel to stopping Israelis from viewing certain media.

   • Dual nature of Al Jazeera: There are two versions of Al Jazeera - one for Western audiences and another for Middle Eastern audiences with different political alignments. The Middle East version allegedly showed videos from Hamas demanding uprisings against Israel. Al Jazeera, funded by Qatar, is seen more as a political influence tool than an unbiased news agency.

   • Concerns about ""national security"" as a reason for censorship: Once a government can unilaterally ban voices for ""national security,"" it sets a dangerous precedent. The term is elastic and can be misused, as seen in post-9/11 America.

   • Reporters Without Borders' World Press Freedom Index: RSF gathers data on press freedom worldwide. Their website has information on Israel's ranking and a GitHub repo with mirrored news sites to circumvent censorship.

   • Speculation about political motives: Some suggest the Al Jazeera ban is an act of desperation by Netanyahu to appease far-right coalition partners and protect himself from his ongoing corruption trial, even at the expense of free press principles. This raises concerns about undermining democratic norms.

   • Importance of domestic media: While concerning, Israel still has serious independent journalism like Haaretz. Nothing can replace the role of domestic media in safeguarding democracy, as seen in the case of Russia.

   • Questions about Al Jazeera's influence: The ban's justification seems vague, prompting questions about Al Jazeera's actual role in shaping Palestinian public opinion and whether specific instances of biased reporting can be pointed to.

   • Risks of using ""national security"" as an excuse: Allowing ""national security"" to be used to destroy freedoms incentivizes leaders to intentionally do a poor job at security to gain more power. Governments unable to protect against journalists should be forced to resign.

   • Opposition to media suppression: Any regime that suppresses the media is viewed suspiciously, suggesting they have something to hide.
"
"https://news.hada.io/topic?id=14720","스티브 알비니 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               스티브 알비니 사망

     * Steve Albini, 전설적인 음악 프로듀서이자 인디 록 아이콘으로 61세의 나이로 사망함. Shellac과 Big Black의 프론트맨이었으며, Nirvana, Pixies, PJ Harvey 등의 클래식 앨범을 제작했음. 심장마비로 사망함.

Steve Albini의 업적과 영향

     * Albini는 프로듀서와 연주자로서 인디 록의 아이콘이었음. 그는 ""프로듀서""라는 용어보다는 ""엔지니어""라는 용어를 선호했음.
     * Nirvana의 ""In Utero"", Pixies의 ""Surfer Rosa"", PJ Harvey의 ""Rid of Me"" 등 수많은 클래식 앨범을 제작했으며, 생의 마지막 순간까지 음악 산업의 착취적 관행에 대해 직언을 아끼지 않았음.
     * Albini의 오디오 엔지니어로서의 작품 목록은 하나의 장르를 이룰 만큼 방대한 양의 얼터너티브 록을 아우름.
     * 1980년대 후반과 1990년대에 걸친 그의 비할 데 없는 이력에는 Jesus Lizard의 초기 앨범들, Wedding Present의 ""Seamonsters"", Brainiac의 ""Hissing Prigs in Static Couture"" 등이 포함됨.
     * 가수-싱어송라이터 분야의 불멸의 명작들도 제작했는데, Joanna Newsom의 ""Ys"", Nina Nastasia의 초기 음반들, Jason Molina의 대부분의 작품들이 이에 해당함.

Albini의 음악 철학과 스타일

     * Albini는 자신에게 돈을 지불하는 어떤 아티스트와도 작업할 것이라고 주장했지만, 잔인하고 생생한 아날로그 사운드로 유명했음.
     * 그는 음반에서 어떠한 로열티도 받지 않았으며, 1500만 장 이상 팔린 Nirvana의 ""In Utero""를 포함해서도 그랬음.
     * Electrical Audio 스튜디오에서는 아티스트들에게 노란색 법률 패드를 건네주고 녹음할 모든 곡에 대한 설명을 적으라고 지시했는데, 이는 향후 오해를 피하고 스튜디오 시간을 최대한 활용하기 위한 방법이었음.
     * 여러 밴드들은 Albini가 녹음 세션 중에 책을 읽거나 스크래블을 하는 경험을 했다고 전함. 이는 Albini가 감각을 예리하게 유지하고 관점을 넓히는 데 도움이 된다고 설명함.

Albini의 삶과 유산

     * Albini는 캘리포니아 파사데나에서 태어나 Montana에서 자랐으며, 십대 시절 Ramones를 발견한 후 일리노이에서 저널리즘을 공부하는 동안 시카고 펑크 씬에 이끌렸음.
     * Albini는 도발적인 밴드 이름(Rapeman, Run Ner Run)과 노래 제목(""Pray I Don't Kill You Fot"", ""My Black Ass"") 및 막말로 논란을 불러일으켰음.
     * 그는 나중에 자신의 과거 논란에 대해 반복적으로 사과했으며, 의도와 도덕적 명확성만으로는 부족하다는 것을 깨달았음.
     * Albini는 주목할 만한 포커 플레이어이기도 했음. 2022년에는 WSOP H.O.R.S.E. 대회에서 우승하며 19만 달러 이상의 상금을 거머쥐었고, 2018년에도 7 Card Stud에서 우승해 10만 달러 이상을 획득했음.

GN⁺의 의견

     * Albini의 사망은 인디 록 씬에 큰 손실임. 그의 음반 제작 스타일과 음악에 대한 철학은 오랫동안 많은 뮤지션들에게 영향을 미쳤음.
     * 그의 직설적이고 때로는 논란의 여지가 있는 발언은 비판을 받기도 했지만, 음악 산업의 관행에 대해 말하는 것을 두려워하지 않는 그의 태도는 존경받을 만함.
     * 다만 그의 초기 밴드 이름이나 가사의 선정성은 많은 사람들에게 불쾌감을 줄 수 있었을 것임. 후에 그 점을 인정하고 사과한 것은 바람직한 태도 변화로 보임.
     * 포커에서의 성공은 음악 외에도 다양한 재능을 가진 인물이었음을 보여줌. 음악과 도박이라는 상반된 분야에서 모두 뛰어난 성취를 이룬 것은 놀라운 일임.
     * Albini는 자신만의 방식을 고집하며 음악에 대한 열정을 보여준 진정한 아티스트였음. 그의 유산은 앞으로도 오랫동안 많은 뮤지션들에게 영감을 줄 것으로 보임.

        Hacker News 의견

     * Steve Albini의 영향력: 음악가이자 프로듀서로서 Albini의 영향력을 과소평가하기 어려움. 80년대 중반 Big Black은 당시 그 누구도 하지 않던 음악을 했으며, PJ Harvey의 'Rid of Me' 프로듀싱은 그녀의 작곡을 한 단계 끌어올림. 그 외에도 Pixies, Nirvana, The Jesus Lizard, Superchunk 등 80-90년대 수많은 훌륭한 앨범을 프로듀싱함.
     * 자신만의 길을 걷는 태도: Albini는 까다로웠지만 자신만의 비트에 맞춰 행진했으며, 다른 사람들의 생각은 신경쓰지 않음. Tape Op와의 인터뷰에서 ""내가 좋아하는 대부분의 음악은 샌프란시스코에서 나왔다. LA에서 내가 신경 쓰는 것은 하나도 기억나지 않는다. 스케이트보딩은 또 뭐냐. 그게 펑크 음악이랑 무슨 상관이야? 다음엔 요요 묘기라도 할 거냐?""라고 말함.
     * Electrical Audio에서의 녹음 경험: 2009년 한 밴드가 Albini와 녹음하기 위해 내슈빌에서 시카고로 여행함. 그의 독특하고 아날로그적인 사운드를 사랑했기 때문. 그는 기묘하고 조용했지만 유쾌했음. 닳고 헤진 작업복을 5일 내내 입었고, 라떼를 마음껏 제공해주며 담배 피는 것도 신경 쓰지 않았음.
     * 배관공처럼 돈을 받고 싶다는 철학: Nirvana의 In Utero 녹음 계약 당시 ""나는 배관공처럼 돈을 받고 싶다. 일을 하고 그만한 값어치를 받는 거지. 레코드사는 내가 1~1.5%를 요구할 거라 예상할 것이다. 300만장 팔렸다고 가정하면 40만 달러쯤 되는데, 나는 그런 큰돈을 받을 생각이 전혀 없다. 그랬다간 잠을 못 잘 것 같다""라고 말함.
     * 시카고 출신다운 성격: Albini는 폴란드 소시지만큼이나 시카고다웠음. 그를 기리는 글에서 그의 성격이 잘 드러남. Steely Dan에 대한 그의 평, 옛 요리 블로그 등.
     * 음악에 대한 태도: ""배관공처럼 돈 받기"", ""이미 엿먹은 친구들"" 등의 명언과 함께 음악에 대한 그의 태도도 기억될 만함. ""나는 음악을 아내나 가족처럼, 일주일에 40시간 이상 일할 만큼 기꺼이 지원할 만한 것이라고 생각한다. 음악은 내게 그만큼 중요하다. 하지만 음악으로 생계를 유지할 수 있으리라고는 기대하지 않는다. 나는 음악을 연주할 수 있는 사치를 누리기 위해 보통 사람들처럼 정상적인 일을 해야 할 거라고 생각한다."" 그는 이것이 압박감이나 원망 없이 순수한 기쁨으로 음악을 만들 수 있게 해준다고 말함.
     * 아버지 Frank Albini와의 관계: 산불 과학 분야의 위대한 과학자이자 엔지니어인 Frank Albini가 Steve Albini의 아버지라는 사실도 흥미로움. 아버지와 아들 모두 각자의 분야에서 큰 유산을 남김.
     * 유일무이한 엔지니어링 스타일: Albini의 엔지니어링은 유일무이하며, 이는 밴드 고유의 가장 원시적인 형태 그 자체를 담아냄. 많은 이들이 Shellac의 라이브를 보게 된 것을 기쁘게 생각함.
     * 프로듀서가 아닌 녹음자: 자신의 스타일에 걸맞게 그는 ""프로듀서""라기보다는 ""녹음자""에 가까움. 마이크를 세팅하고 밴드의 사운드 그대로를 녹음하는 것. 그가 녹음한 앨범 6장이 개인적인 역대 최고의 앨범 10선에 든다는 평도 있음.
"
"https://news.hada.io/topic?id=14721","xkcd의 "Machine" 개발 노트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         xkcd의 ""Machine"" 개발 노트

xkcd의 ""Machine"" 개발 노트

  초기 구상

     * 3월 말까지 아이디어를 고민하다가 4월 초에 결정한 아이디어
     * ""Something Awful 사용자들이 만든 블루볼 GIF처럼 타일형 거대 장치를 만들 수 있을까? 모두가 작은 사각형 하나씩 기여하는 거야""
     * 처음에는 아이디어가 온전히 형성된 것처럼 느껴졌지만, 실제로 이야기를 나누다 보니 아직 많은 결정을 해야 함을 깨달음
     * 공 어디서 나오는지, 모두가 같은 기계를 보는지, 목적은 무엇인지, 플레이어는 어떻게 상호작용하는지 등 핵심적인 부분에서 서로 다른 생각을 가지고 있었음

  이전 시도에서 배운 점

     * 사용자 제작 콘텐츠 중심의 인터랙티브 만화 제작 경험이 있었음
          + Lorenz: 독자들이 패널 텍스트를 작성해 농담과 스토리를 발전시키는 엑스퀴짓 코퍼스 (매우 재미있었음)
          + Collector's Edition: 독자들이 xkcd 아카이브에 숨겨진 스티커를 찾아 공유 캔버스에 영구적으로 붙이는 게임 (의도한 결과를 얻지 못함)
               o 초기에 빈 중앙 지도에서 시작하면 혼란으로 빠짐
               o 스티커 배치에 대한 인센티브가 부족해서 개인 행동으로 플롯을 진전시키기 어려웠고 단순한 패턴만 생김
               o 전체 스토리나 목표가 부재했고 스티커들의 관계도 불분명했음
     * 집단 캔버스가 성공하려면 무엇을 만들 수 있는지 예시로 가르쳐주고, 공유된 맥락과 목적이 있어야 함

  제약 조건 설계

     * 대형 구슬 낙하 기계를 만들기로 결정한 후 너무 많은 선택지에 직면
     * 100x100 크기의 그리드로 구성하기로 결정
          + 클라이언트에서 1만개 타일을 실시간으로 시뮬레이션하는 것은 위험해 보임
          + 플레이어들이 직접 소통없이 복잡한 기계의 하위 구획을 만드는 방법, 분리된 타일이 통합될 때 작동할지 확신할 수 없었음
     * 여러 사고 실험 끝에 3가지 핵심 원칙을 세움:

    1. 정확성을 희생하더라도 플레이어의 표현력 극대화

     * 기계가 얼마나 예측 가능해야 하는가?
          + 전체를 서버에서 실행하거나 개별 타일을 검증하는 방안도 고려했지만, 프로토타입 에디터에서 혼돈스러운 구슬 충돌 패턴을 쉽게 만들 수 있음을 확인
          + 구슬이 방해없이 직선으로 움직이지 않으면 예측 불가능한 기계를 만들기 쉬웠음
     * 기계의 예측 가능성을 높이는 것은 플레이어의 자유도와 상충됨
          + 촉박한 개발 기한도 예측/시뮬레이션이 적은 접근법을 선호하게 만듦
     * 극도로 비결정론적이거나 고장난 기계까지 포함해 플레이어에게 매우 유연한 제작 자유도를 주기로 결정
          + 능동적인 검수를 통해 제약 조건 충족 여부와 부적절한 콘텐츠 제거 필요

    2. 호환성 있고 교체 가능한 기계를 장려하는 엄격한 제약 조건 제공

     * 검수 수용과 예측 불가능한 플레이어 기계로 인해 오히려 더 많은 질서를 요구하게 됨
     * 초기에는 입출력을 완전히 자유 형식으로 고려했으나, 검수 과정에서 초기 타일 교체가 필요한 경우 대규모 장애를 일으킬 수 있음을 인지
     * 같은 타일 공간에서 여러 플레이어가 호환 가능한 디자인을 만들 수 있도록 충분히 강력한 제약 조건 설계
          + Robustness 원칙 적용: ""보내는 데이터는 보수적으로, 받는 데이터는 관용적으로""
     * 입출력 제약을 주기 위해 시작부터 전체 기계 지도 필요
          + 지도 생성을 통해 기계의 난이도 조절 (단순한 1입력1출력에서 복잡한 4입력4출력 병합까지)
     * 실시간 피드백을 주기 위해 타일이 받은 것과 비슷한 속도로 구슬을 배출하도록 제한
          + 구슬을 삼키거나 지연시키는 기계 제한
          + 무작위 입력 속도로 타일을 혼돈 테스트
     * ""기계를 한동안 실행하고 평균적으로 제약 조건을 충족하는지 확인"" 원칙 확립

    3. 기계는 처음 30초 이내에 안정 상태에 도달해야 함

     * 검수자가 얼마나 오래 지켜봐야 하는지에 대한 질문 제기
          + 전체 기계 검수에 걸리는 시간 계산 (1만개 타일 기준 83.3시간)
          + 30초 이내에 안정 상태 진입하도록 임의 결정
     * 구슬이 30초 후 사라지도록 설정
          + 초기에는 만료 시간이 없어서 플레이어들이 게임을 배우는 동안 구슬이 쌓이고 화면을 가득 채움
          + 활성화된 강체가 많아지면서 물리 시뮬레이션 속도 저하
          + 재미보다는 구슬이 방해가 되는 상황
     * 구슬 만료로 기계가 시간이 지남에 따라 오류를 축적하지 않게 됨
          + 검수자는 30초만 지켜보면 대부분의 구슬이 어디로 갈 수 있는지 파악 가능

  시뮬레이션과 초현실

     * Machine 아키텍처의 두 가지 큰 도전:
         1. 위 설계 제약 조건으로 이질적인 타일을 연결해 전체 기계로 만드는 게 작동할까?
               o 몇 개의 작은 지도를 생성하고 해결해 검증
         2. 거대한 기계를 서버나 클라이언트에서 실시간으로 실행할 수 없다면 어떻게 표시할까?

    스크롤하며 단일 구슬을 추적하는 것이 가능하도록 하는 것이 목표

     * 전체 기계가 시뮬레이션되지 않더라도 플레이어가 보는 영역 주변은 시뮬레이션되어야 함
     * 초기에 무한 지도에서 보이는 영역만 시뮬레이션하는 것을 테스트
          + 꽤 잘 작동했지만 스크롤 시 타일이 빈 초기 상태로 시뮬레이션에 들어와서 흐름에 공백이 생김
     * 빈 타일 대신 이미 활동이 있는 것처럼 보여야 했음

    두 번째 도전: 타일의 스냅샷을 안정 상태에 도달한 후에만 찍어서 스크롤로 보이기 직전에만 존재하게 하기

     * 최종 만화에서 디스플레이 클리핑을 끈 뷰 (CSS overflow:hidden, contain:paint 비활성화):
          + 스냅샷을 눈치챘는가? 특별히 주의 깊게 보지 않으면 눈치채기 어려움
          + 렌더링된 타일만 물리 시뮬레이션에 존재
          + 디스플레이 최적화: 뷰 영역 안의 구슬만 보이지만 전체 타일 범위에서 시뮬레이션됨
          + 기계의 상단을 가장하기 위해 시뮬레이션 최상단 행에서 구슬을 생성하고 공급 (입력 제약의 예상 속도 기반)
     * 검수 UI에 스냅샷 생성 연동
          + 검수자는 타일 승인 전 최소 30초 대기해야 함
          + 승인 버튼 클릭 시 스냅샷 생성
          + 검수자 재량으로 기계가 좋아 보이는 상태가 될 때까지 조금 더 기다릴 수 있음
     * 스냅샷 방식이 기대 이상으로 잘 작동
          + 기계에 축적된 오류를 재설정하는 좋은 결과
          + 스크롤하면서 보는 타일의 첫인상은 검수자가 마음에 든 깨끗하고 좋은 상태
          + 실제로 오래 지켜보면 많은 기계가 고장나거나 망가질 수 있지만, 계속 탐색하면 새로운 스냅샷으로 들어가기 때문에 볼 일 없음
     * 만화에서 스크롤하는 기계는 실제가 아님. 초현실임
          + 전체가 한 번에 시뮬레이션되지 않지만 오히려 더 좋은 결과를 낳음

  React와 DOM으로 수천 개의 공 렌더링

     * Rapier 물리 엔진 기반으로 구축
          + 훌륭한 문서, 유용한 기본 요소의 깔끔한 API, Rust 구현 (브라우저에서 WASM으로 실행) 덕분에 인상적인 성능
          + 초기에는 Rapier의 결정론 보장에 끌렸지만, 서버 측 시뮬레이션은 하지 않음
     * Rapier 위에 사용자 정의 React 컨텍스트 <PhysicsContext> 작성
          + Rapier 물리 객체를 생성하고 React 컴포넌트 라이프사이클 내에서 관리
          + 물리나 충돌 표면이 있는 배치 가능한 각 객체에 대한 ""위젯"" 컴포넌트 개발 용이
          + React가 간단하고 더러운 scene graph 역할
          + 뷰 스크롤 시 타일 로딩/언로딩 단순화: 타일 마운트 해제 시 모든 물리와 DOM이 정리됨
          + 보너스로 hot reloading을 fast refresh와 연결하기 쉬워짐 (충돌 모양 튜닝에 정말 좋음)
     * React 컨텍스트 접근 방식의 또 다른 장점:
          + 물리 훅이 <PhysicsContext> 내부에 없으면 noop이 됨
          + 검수 UI에서 정적 타일 미리보기 렌더링에 사용
     * Rapier 객체 생성에 훅 대신 컴포넌트를 사용했으면 좋았을 것 (react-three-rapier가 취한 방식)
          + React diffing에 더 잘 맞음 (의존성 변경 시 useEffect는 이전 인스턴스 제거 후 재생성)
     * Machine은 전적으로 DOM을 사용해 렌더링됨
          + 초기 개발 중에는 성능 면에서 DOM 렌더링의 한계에 다다를까 우려
          + 너무 느려지면 PixiJS나 canvas로 전환할 것으로 예상했지만, DOM을 어디까지 활용할 수 있을지 보고 싶었음
     * 렌더링 성능 최적화:
          + 프레임 루프가 물리 시뮬레이션이 있는 위젯에 직접 스타일 적용
               o React의 diff는 scene graph에 구조적 변경이 있을 때만 실행
          + 초기에는 공을 React로

        Hacker News 의견

   여러 의견을 종합해보면 다음과 같은 내용으로 요약할 수 있음:
     * XKCD의 만우절 이벤트였던 ""The Incredible Machine""은 4월 1일 하루 동안 진행된 협력형 퍼즐 게임이었음
          + 유저들은 물리 엔진으로 구현된 기계 요소들을 활용해 퍼즐을 풀고, 자신만의 퍼즐을 제작해 제출할 수 있었음
          + 하지만 진행 방식에 대한 설명이 부족해서 어리둥절해 하는 유저들도 많았던 것으로 보임
     * 퍼즐 게임의 형식은 오래된 DOS 게임인 ""The Incredible Machine""과 유사함
          + 제한된 기계 부품들을 이용해 특정 목표를 달성하는 방식
     * 개발 과정에서는 Rapier 물리 엔진을 사용했는데, 재귀적 오류로 인해 크래시가 발생하기도 했음
     * 이벤트가 끝난 후에도 자신이 제작한 퍼즐을 공유할 수 있는 퍼머링크 기능이 있으면 좋겠다는 의견이 제시됨
          + 저장 공간 문제로 어려울 수 있으니 JSON을 Base64로 인코딩해서 URL 파라미터로 전달하는 방법을 제안
     * 단 3주 만에 이런 규모의 프로젝트를 완성한 것은 대단한 성과라는 평가
     * XKCD가 랜달 먼로 한 사람이 운영하는 줄 알았는데, 여러 사람이 참여한 것 같아 의아하다는 의견도 있었음
     * 이벤트에 대한 더 자세한 정보는 Reddit, Explain XKCD, Github 저장소 등에서 확인할 수 있음
"
"https://news.hada.io/topic?id=14739","세계 최초 유전자 치료 시험으로 난청 소녀 치유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       세계 최초 유전자 치료 시험으로 난청 소녀 치유

청각 장애 소녀, 세계 최초 유전자 치료 시험에서 치료됨

     * 18개월 된 Opal Sandy는 청각 신경병증으로 인해 완전히 청각 장애를 갖고 태어남
     * 청각 신경병증은 내이에서 뇌로 가는 신경 자극이 방해를 받아 발생함
     * Opal은 영국과 전 세계에서 시험 중인 ""1회성"" 유전자 요법 덕분에 거의 정상에 가까운 청력을 되찾았고, 앞으로 더 개선될 수도 있음

유전자 치료 임상시험의 결과

     * Opal은 Addenbrooke 병원에서 치료를 받았으며, Cambridge 대학 병원 NHS 재단 트러스트의 일부임
     * 이 시험의 책임 연구원인 Manohar Bance 교수는 결과가 ""기대했던 것보다 더 좋았다""고 말하며, 이 유형의 청각 장애 환자들에게 잠재적인 치료법이 될 수 있다고 밝힘
     * OTOF 유전자의 결함으로 인해 청각 신경병증이 발생할 수 있는데, 이는 귀의 세포가 청신경과 통신할 수 있게 하는 otoferlin이라는 단백질을 만드는 데 책임이 있음
     * Regeneron의 ""새로운 시대""의 유전자 요법은 작동하는 유전자 복사본을 귀에 전달하여 결함을 극복함

Opal의 치료 경과

     * Opal은 지난 9월 수술 중 오른쪽 귀에 작동 유전자가 포함된 주입을 받음
     * 부모인 Jo와 James는 4주 후 Opal이 큰 박수 소리에 고개를 돌리는 것을 보고 청력 개선을 발견함
     * 수술 24주 후인 올해 2월, Cambridge에서의 검사 결과 Opal은 속삭임과 같은 작은 소리도 들을 수 있는 것으로 나타남
     * 현재 Opal의 청력은 ""거의 정상에 가깝다""고 Bance 교수는 말함

임상시험의 진행 현황

     * 1/2상 Chord 시험은 3부분으로 구성되며, Opal을 포함한 3명의 청각장애 아동이 한쪽 귀에만 저용량 유전자 치료를 받음
     * 다른 3명의 아동은 한쪽에 고용량을 투여받을 예정이며, 안전성이 입증되면 더 많은 아동이 양쪽 귀에 동시에 투여받게 됨
     * 영국, 스페인, 미국에서 최대 18명의 어린이가 이 시험에 모집되어 5년 동안 추적 관찰될 예정

청각 신경병증 치료의 현재와 미래

     * 현재 청각 신경병증의 표준 치료법은 인공와우 이식임
     * Opal은 가능한 한 빨리 청력을 얻기 위해 왼쪽 귀에 인공와우를 착용함과 동시에 오른쪽 귀에 유전자 치료를 받음
     * Bance 교수는 이번 시험이 ""유전자 치료의 시작에 불과하다""며 ""난청 치료의 새로운 시대를 알리는 것""이라고 말함
     * 또한 청각 신경병증보다 더 흔한 다른 유전 관련 청각 장애에서도 차이를 만들 수 있는 다른 유전자 치료 개발을 뒷받침할 수 있다고 덧붙임

GN⁺의 의견

     * 청각 장애를 유발하는 다양한 유전자 변이들이 있기에, 이 치료법이 모든 유전성 청각장애에 적용 가능한 것은 아닐 것임. 하지만 이번 연구 결과는 유전자 치료가 일부 유전성 난청의 치료에 활용될 수 있음을 보여주는 고무적인 사례임.
     * 현재로서는 이 치료가 NHS에서 제공되지 않고 임상시험 단계라는 점, 장기적인 효과와 부작용에 대한 모니터링이 더 필요하다는 점 등 넘어야 할 과제들이 있음. 하지만 기술의 발전과 함께 점차 적용 범위가 넓어질 것으로 기대됨.
     * 난청에는 다양한 원인과 유형이 있으므로, 조기 발견과 적절한 중재가 중요함. 유전자 치료와 함께 보청기, 인공와우 등 기존의 치료법을 적절히 병행하는 것도 필요할 것임.
     * 난청 아동이 언어 습득의 결정적 시기를 놓치지 않도록 조기에 청각 재활을 시작하는 것이 중요함. 이를 위해 신생아 청력 선별검사 등을 통한 조기 진단과 부모 교육 등 사회적 지원 체계 마련도 필요해 보임.
     * 장애가 있더라도 적절한 지원만 있다면 행복하고 성취감 있는 삶을 살 수 있다는 National Deaf Children's Society의 입장에 동의함. 의학 기술 발전과 더불어 난청인의 사회 참여를 위한 접근성 개선 노력이 병행되어야 할 것임.

   굉장하네요

        Hacker News 의견

     * 유전적 난청을 가진 어린이들에게 희망을 주는 의학적 돌파구임. DB-OTO라는 AAV 유전자 치료제가 OTOF 유전자 돌연변이로 인한 난청 어린이들에게 청각을 회복시켜줌.
     * DB-OTO는 귀의 감각 모발 세포에 결핍된 otoferlin 단백질을 만들어내는 cDNA를 전달함. 이는 귀에서 뇌로 청각 신호를 전달하는 데 필수적인 역할을 함.
     * 이는 CRISPR이 아닌 작은 DNA 조각을 세포에 추가하는 '유전자 치료'의 한 종류임. 모발 세포가 평생 바뀌지 않기에 장기적 효과가 기대됨.
     * 의학은 희망을 주는 분야로, 이런 발전은 현대를 살아갈 가치를 느끼게 해줌. 난청 관련 유전 질환을 가진 부부에게도 희망이 될 수 있음.
     * 유전자 치료는 윤리적, 기술적 문제로 매우 더디게 발전해왔으나, 이제 서서히 성과를 내고 있음. 생식세포 수준의 대규모 유전자 변형은 아직 요원해 보임.
     * 다른 질병 치료에도 응용 가능성이 있음. 예를 들어 면역 체계 문제나 색맹 등에도 적용해볼 수 있을 것임.
     * 갑자기 새로운 감각을 얻게 되면 부작용도 있을 것 같지만, 조상들이 보면 우리를 신이라 부를 만한 놀라운 성과임.
"
"https://news.hada.io/topic?id=14735","Raspberry Pi Connect 베타 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Raspberry Pi Connect 베타 발표

     * 라즈베리 파이를 원격에서 브라우저로 접속 가능하게 해주는 기술
     * VNC등의 대체 방법이 있지만 설정이 복잡했어서, 즉시 이용가능한 도구를 목표로 개발
     * 기본 요구 사항 : 64Bit Raspberry Pi OS Bookworm(Wayland)
     * sudo apt install rpi-connect 설치후 리붓하면 자동으로 시작됨
     * Connect 아이콘 클릭하여 Raspberry Pi ID 로 로그인 필요
     * 차후엔 아무 브라우저에서나 connect.raspberrypi.com 에 접속하면 자신의 기기가 보이고 기기의 화면 보기 가능

   서랍에 있던 녀석들 숨 좀 불어넣어 볼까요?
   그리고 다시 서랍행

   제가 그럴것 같아서 라즈베리 파이는 잘 안 사게 됩니다.. ㅎㅎ
"
"https://news.hada.io/topic?id=14674","메타, 맨해튼 프로젝트에 맞먹는 금액을 GPU 투자에 사용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    메타, 맨해튼 프로젝트에 맞먹는 금액을 GPU 투자에 사용

        Hacker News 의견

     * 맨해튼 프로젝트와 아폴로 계획의 예산이 현대 기준으로 봤을 때 의외로 ""저렴했음"". 1960년대 달 착륙에 쓴 예산이 최근 애플의 자사주 매입과 비슷한 수준임.
     * 맨해튼 프로젝트와 아폴로 계획 모두 당시 GDP의 0.4%를 사용함. 오늘날 GDP $27조 기준으로는 $108B에 해당함. 메타는 아직 그 1/3도 GPU에 쓰지 않았음.
     * 최신 GPU, CPU, SoC의 압도적 복잡성이 우리를 압도하지는 않음. 30억 개 트랜지스터가 들어간 3nm 칩 생산 과정에 비하면 맨해튼 프로젝트는 획기적이지만 규모 면에서는 크지 않음.
     * 메타가 그렇게 많이 투자했는데도 OpenAI를 따라잡지 못하는 이유가 궁금함. OpenAI는 어떻게 그렇게 뛰어난 성능을 내는 것일까?
     * 1960년대 이전에 제작된 작품들의 품질과 기량에 늘 감탄하게 됨. 그 이후 현대 사회가 낭비적이고, 느리고, 비싸고, 야심 없어진 근본적 이유가 무엇일지 모르겠지만, 되돌아갈 수 있다면 좋겠음.
     * 메타가 이 GPU들을 내부 운영에 얼마나 사용하고 있는지, 그로 인해 어떤 비용 절감 효과를 보고 있는지 공개된 바가 있는지 궁금함. 실망스러운 ""메타 AI"" 챗봇 외에도 콘텐츠 추천 엔진, 악용 방지, 네트워크 대역폭 최적화 등 H100을 투입할 만한 분야가 많을 것 같음.
     * 맨해튼 프로젝트가 투입 대비 성과가 더 컸던 것 같음.
     * 이는 폐쇄적 정원(walled garden)과 지적 재산권 가치의 영향이 큼. 법이 바뀌어 IP/데이터를 보호할 수 없게 되면, 내년에는 페이스북을 클론/수정한 사본을 만드는 사람들이 많을 것임. 마찬가지로 엔비디아 GPU 설계를 가져다 변형하는 사람들도 많을 것임. 경쟁으로 인해 가격과 이윤율은 거의 0에 가까워질 것임.
     * 10년 안에 무어의 법칙으로 인해 100만 달러 어치 GPU로 지금과 같은 성능을 낼 수 있게 될 가능성이 어느 정도일지 궁금함. 그 정도 돈이면 GPU 제조사를 인수할 수 있을 것 같음.
     * 이는 들리는 것만큼 인상적이지는 않음. 미국의 실질(인플레이션 조정) GDP는 1945년에 비해 거의 9배나 높아졌기 때문임.
"
"https://news.hada.io/topic?id=14630","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   등산가요

   발더스 게이트를 겨우 끝냈네요. 다들 갓겜이라고 하는데 저는 마지막에 조금 지루했어요 ㅠ
   친구에게 ""삼체""를 추천했더니, 자기가 본 것중에 ""철수를 구하시오"" 라는 SF소설을 추천해 줘서 그거 봐볼까 해요
"
"https://news.hada.io/topic?id=14733","Google TimesFM - 시계열 예측을 위한 시계열 파운데이션 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Google TimesFM - 시계열 예측을 위한 시계열 파운데이션 모델

     * 구글 리서치에서 개발한 시계열 예측용 파운데이션 모델
          + 1,000억 개의 실제 시계열 데이터 포인트로 사전 학습
          + 다양한 공개 벤치마크에서 뛰어난 제로 샷 성능을 보임
          + 도메인과 시간 단위가 다양한 데이터셋에 적용 가능함
     * 시계열 예측은 소매, 금융, 제조, 의료, 자연과학 등 다양한 분야에서 널리 활용됨
          + 예를 들어, 소매 분야에서 수요 예측 정확도 향상은 재고 비용 절감과 수익 증대에 기여함
     * 딥러닝 모델의 부상
          + 다양한 설정에서 우수한 성능을 입증한 딥러닝 모델이 시계열 예측에 널리 사용됨
          + M5 경진대회에서도 딥러닝 모델이 좋은 성적을 거둠
     * 대규모 언어 모델의 발전
          + 번역, 검색 기반 생성, 코드 완성 등 자연어 처리 작업에 사용되는 대규모 언어 모델이 빠르게 발전함
          + 대량의 텍스트 데이터로 학습하여 언어 패턴을 식별하는 능력을 갖춤
          + 검색과 결합하여 현재 이벤트에 대한 질문에 답하고 요약할 수 있는 강력한 제로샷 도구로 활용됨
     * 딥러닝 기반 예측 모델의 한계
          + 전통적인 방법보다 우수한 성능을 보이지만, 학습과 추론 비용 감소에 어려움이 있음
          + 새로운 시계열 데이터에 대해 모델을 테스트하기 전에 긴 학습 및 검증 주기가 필요함
     * TimesFM은 시계열 예측을 위한 디코더 전용 파운데이션 모델
          + 1,000억 개의 실제 시계열 데이터로 사전 학습된 단일 예측 모델
          + 최신 대규모 언어 모델보다 훨씬 작은 200만 개의 파라미터를 가짐
          + 다양한 도메인과 시간 단위의 데이터셋에 대해 제로샷으로 최첨단 지도 학습 접근 방식에 근접한 성능을 보임
          + 추가 학습 없이 기존에 보지 못한 시계열 데이터에 대해 즉시 적절한 예측을 제공함
          + 사용자가 소매 수요 계획과 같은 실제 다운스트림 작업에 대한 예측을 개선하는 데 집중할 수 있게 해줌
     * 논문: ""A decoder-only foundation model for time-series forecasting"", ICML 2024에 발표 예정

GN⁺의 의견

     * 유망해 보이는 새로운 시계열 예측 모델이지만, 아직 다양한 실제 사용 사례에 대한 검증이 필요해 보임. 특히 확률적 예측을 아직 지원하지 않는 것은 실용성 측면에서 아쉬움
     * 입력으로 제공하는 주파수 값이 실제 시계열 데이터의 주파수를 반영하지 않고 임의로 조정 가능하다는 점이 흥미로우나, 어떤 값이 최적일지는 각 데이터와 사용 사례에 맞게 실험해봐야 할 것 같음
     * 공개된 첫 번째 체크포인트가 단변량에 초점을 맞추고 있어, 다변량 예측이 가능한 버전도 기대됨. 다변량 시계열 예측 벤치마크 데이터셋에서의 성능 비교도 필요할 것으로 보임
     * 이 모델 도입 시에는 예측 대상 시계열의 속성(길이, 분포, 계절성, 주파수 등)과 요구되는 예측 호라이즌에 맞게 모델을 선택하고 튜닝할 수 있는 전문 인력이 필요할 것. end-to-end 추론 API 제공으로 활용이 쉬워 보이나, 블랙박스 모델의 한계도 고려해야 함
     * 유사한 다른 시계열 예측 라이브러리로는 Meta의 Kats, GluonTS, Darts, sktime 등이 있음. 각 라이브러리의 특징과 장단점을 비교 검토 후 실제 데이터에 가장 적합한 모델을 선택하는 것이 바람직함
"
"https://news.hada.io/topic?id=14634","단일 Div를 이용한 예술 작품 창작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          단일 Div를 이용한 예술 작품 창작

A Single Div 프로젝트 소개

     * Lynn Fisher가 2014년부터 2019년까지 진행한 CSS 드로잉 프로젝트
     * 단 하나의 HTML <div> 태그만을 사용하여 CSS로 다양한 그림을 그리는 것이 목표
     * GitHub의 #divtober 레포지토리에서 프로젝트 진행
     * ""Buy me a coffee"" 링크를 통해 프로젝트 후원 가능
     * ""View more single divs ⇨"" 링크를 통해 더 많은 Single Div 작품 확인 가능

GN⁺의 의견

     * CSS만으로 다양한 그래픽을 표현하는 것은 웹 개발자에게 도전적이면서도 흥미로운 주제임. 이 프로젝트는 CSS의 기능과 표현력을 극한까지 활용하는 좋은 예시가 될 수 있음.
     * 하나의 <div> 태그만으로 그림을 그리는 제약은 오히려 창의력을 자극할 수 있음. 개발자들이 새로운 CSS 테크닉을 익히고 실험해볼 수 있는 기회가 됨.
     * 코드 골프(Code Golf) 같은 도전 과제처럼, 최소한의 코드로 원하는 결과물을 만드는 것은 개발자의 문제 해결 능력을 기를 수 있음.
     * 다만 실제 프로덕션 환경에서는 성능과 유지보수성 등을 고려해야 하므로, 이런 방식을 그대로 적용하기는 어려울 수 있음. 이 프로젝트는 어디까지나 CSS 학습과 실험의 목적으로 활용되는 것이 바람직함.
     * Lynn Fisher의 이런 창의적인 프로젝트가 많은 웹 개발자들에게 영감을 주고, CSS에 대한 관심과 열정을 북돋을 수 있기를 기대함.

        Hacker News 의견

     * CSS를 활용해 심슨 가족 캐릭터들을 단 하나의 HTML <div> 태그만으로 그려낸 놀라운 데모 프로젝트에 대한 소개
     * 브라우저 개발자 도구의 Inspector로는 잘 보이지만, 소스 코드 보기로 봤을 때는 가독성이 매우 떨어지는 문제점 지적
     * 이와 유사한 CSS 아트 프로젝트들이 과거에도 해커뉴스에서 여러 차례 활발히 토론된 바 있음
     * CSS 아트가 three.js 등의 3D 그래픽 라이브러리에 비해 훨씬 어렵고 시간이 많이 걸리지만, 여전히 웹 접근성 측면에서는 더 나은 선택지가 될 수 있다는 의견
     * 모바일에서도 잘 보이는 것을 확인했으며, 그래픽 디자인 감각도 훌륭하다는 평
     * M1 맥북에서는 렉이 좀 걸린다는 의견
     * '단 하나의 div'라는 것이 어떤 의미이고 어떤 기술을 사용한 것인지에 대한 궁금증을 표현
"
"https://news.hada.io/topic?id=14755","Superfile - 화려하고 멋진 터미널 파일 관리자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Superfile - 화려하고 멋진 터미널 파일 관리자

     * 리눅스/맥/윈도우(예정)
     * Go 로 작성된 오픈소스
     * 멀티 윈도우 형태의 깔끔한 터미널 UI 제공 : 폴더/파일/프로세스/메타데이터/클립보드로 구분된 패널들
     * 키보드 네비게이션
     * 테마 지원 : Catpuccin, Dracula, Kaolin, Nord, Rosé Pine, Tokyonight, Gruvbox

   레인저만 써왔는데, 이것도 한번 살펴봐야겠네요.

   mdir 이 떠오르는 조상님들은 조용히 손을 들어주세요

   Mdir.js is text base file manager. Mdir.js is clone of LinM.

   https://github.com/la9527/mdir.js

   +1
   솔직히 조상님까지는 아닌거 같습니다만.

        Hacker News 의견

   요약:
     * vim 사용자들이 실수로 폴더를 삭제할 수 있는 위험한 기본 설정이 있음
     * 최근 터미널 도구들의 발전이 매우 인상적이며, GUI 사용을 최소화할 수 있게 해줌
     * 순환 심볼릭 링크(symlink)를 만들면 superfile이 크래시됨
     * Midnight Commander나 GNU Interactive Tools와 비교했을 때의 장점에 대한 의문
     * 파일 미리보기 기능 추가가 가장 우선순위가 높은 개선 사항으로 대기 중
     * 바이너리 파일 다운로드 후 ""excrate""라는 단어 사용이 오타인지 신조어인지 불명확
     * lf와 edir을 조합하면 매우 가볍고 확장성 있는 파일 관리가 가능함
     * superfile 개발자를 후원하는 것도 좋은 방법
     * 터미널/TUI 기반 파일 매니저가 매우 다양함 (Wikipedia 비교표 참조)
     * nnn(n³) 파일 매니저를 사용해 보니 흥미롭지만 실제 활용 방안은 의문
"
"https://news.hada.io/topic?id=14646","1024비트 소수 생성의 어려움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           1024비트 소수 생성의 어려움

     * 소개
          + 소수는 쉽게 설명할 수 있지만 엄청난 복잡성을 내포하고 있음
          + 수학적 개념, 흥미로운 시각화, 암호학 등 다양한 분야에서 활용됨
          + 코딩을 통해 소수 생성에 도전해보기로 함
     * 도전 과제
          + RSA 알고리즘에 사용할 수 있는 소수 생성하기
          + 현재 RSA 키로 적합한 길이는 2048 비트이므로, 1024 비트 크기의 소수 2개가 필요함
          + 제약 조건:
               o 처음부터 직접 코드 작성 (외부 의존성 없이)
               o 노트북의 AMD Ryzen 7 CPU와 16GB RAM만 사용
               o ""합리적인"" 시간 내에 소수 생성
          + Rust 언어 선택
     * 16비트 소수 생성
          + 의사 난수 생성기 /dev/urandom을 이용해 난수 생성
          + 간단한 소수 판별법인 시험적 나눗셈(Trial Division) 사용
          + 평균 40ms 내에 16비트 소수 생성 가능
     * 64비트 소수 생성
          + 최적화된 시험적 나눗셈 알고리즘 구현
               o 6k±1 형태의 수만 확인
               o 작은 소수 목록을 미리 생성하여 쉽게 나눌 수 있는 수 먼저 걸러내기
          + 최적화 후 약 6초 소요
          + 더 큰 수에는 결정적 알고리즘으로는 한계가 있음
     * 확률적 소수 판별법
          + 페르마의 소정리(Fermat's Little Theorem) 활용
               o 합성수도 조건을 만족시킬 수 있는 문제점 존재 (Pseudoprimes)
          + 밀러-라빈 소수 판별법(Miller-Rabin Primality Test)
               o 페르마 판별법을 개선한 확률적 판별법
               o 합성수가 항상 어떤 밑(base)에 대해 Pseudoprime이 되는 경우는 없음
               o 오류 확률이 매우 낮아 실용적으로 사용 가능
     * 128비트 소수 생성
          + 밀러-라빈 판별법으로 빠르게 생성 가능 (평균 0.03초)
          + u128 자료형의 한계로 인해 1024비트까지 확장하기 어려움
     * 1024비트를 위한 BigInt 구현
          + 여러 번의 시도를 통해 점진적으로 개선
               o 시도 1: 숫자의 각 자릿수를 배열에 저장
               o 시도 2: 숫자를 이진수 형태로 저장
               o 시도 3: 숫자를 바이트 단위 청크로 저장
               o 시도 4: 숫자를 u64 단위 청크로 저장
               o 시도 5: 사칙연산 알고리즘 최적화
          + 밀러-라빈 판별법 및 전체 로직 최적화
          + 멀티스레딩을 활용한 병렬 처리
     * 최종 결과
          + 약 40ms 내에 1024비트 소수 생성 가능 (8ms ~ 800ms)
          + 병렬 처리를 통해 평균 0.04초 소요

GN⁺의 의견

     * 시도와 실패를 반복하며 점진적으로 개선해 나가는 과정이 인상적이었음
          + 단순한 구현에서 시작하여 각 단계마다 새로운 아이디어를 적용하고 최적화를 수행
          + 실패를 겪더라도 포기하지 않고 문제의 원인을 파악하고 해결책을 모색
     * 저자의 수학적 배경 지식이 부족함에도 불구하고 관련 자료를 찾아보고 이해하려 노력한 점이 돋보임
          + 페르마의 소정리, 밀러-라빈 판별법 등 필요한 수학적 개념을 학습
          + 어려운 내용도 구현이 가능한 수준까지 이해하고 적용
     * 고정 길이 정수 자료형의 한계를 극복하기 위해 직접 BigInt를 구현한 것이 인상적
          + 단순히 기존 라이브러리를 사용하는 것이 아니라, 내부 동작 원리를 이해하고 최적화를 수행
          + 다양한 아이디어를 시도하며 점진적으로 개선해 나가는 모습이 돋보임
     * 멀티스레딩을 활용한 병렬 처리로 성능을 크게 향상시킨 것이 흥미로웠음
          + 독립적인 계산을 수행하는 문제의 특성을 잘 파악하고 활용
          + 단순히 빠른 속도를 추구하는 것이 아니라, 문제의 특성을 고려한 효과적인 접근
     * 암호학적으로 안전한 수준은 아니지만, 학습과 탐구의 과정으로서 큰 의의가 있는 프로젝트로 보임
          + 실용적인 활용보다는 저자의 호기심과 도전 정신이 돋보이는 과제
          + 과정에서 얻은 통찰과 경험이 향후 저자의 성장에 큰 도움이 될 것으로 기대됨

        Hacker News 의견

     * 관련하여, 몇몇 암호화폐는 작업 증명 함수의 일부로 큰 소수 찾기와 관련된 것들을 사용함. 약 8년 전에는 매우 빠른 소수 판정 구현으로 많은 돈을 벌 수 있었음. 저자는 한동안 riecoin을 위한 채굴 소프트웨어의 작성자이자 관리자였음.
     * 이 기사에서는 빠른 소수 판정을 위한 최고의 최적화인 Montgomery 곱셈을 생략함. 이는 빠른 실용적인 모듈러 지수 연산 구현의 기초가 됨.
     * Niall Emmart가 공개한 CGBN은 정말 엄청나게 빠른 GPU bigint 라이브러리임. 여전히 내가 알고 있는 가장 빠른 batch modexp 구현임.
     * Python은 pow(x, y, m) → x^y % m을 계산하는 꽤 좋은 modexp를 내장하고 있음. 이를 통해 Fermat이나 Miller-Rabin 소수 판정을 쉽게 구현할 수 있음.
     * 처음에는 확률적 소수 판정 개념이 이상했고 거대한 수를 다룰 수 있는 결정론적 알고리즘을 찾으려 했지만, APR-CL과 ECPP가 수학적으로 너무 복잡해서 이해하기 어려웠음. RSA를 포함한 거의 모든 곳에서 확률적 알고리즘을 사용한다는 것을 깨달음.
     * 특정 최대 수 범위에 대해 Miller-Rabin을 결정론적으로 만드는 것은 자명함. 주어진 범위에서 모든 유사소수를 제외하는 것으로 증명된 기저들을 선택하면 됨.
     * 한 줄의 인라인 어셈블리로 큰 수 곱셈을 간단하게 만들 수 있음. C 언어에 확장 곱셈 개념을 추가했으면 함. 하드웨어 지원은 어디에나 있음.
     * Fermat 테스트로 충분했는데, 소수가 실제로 소수가 아니면 알고리즘이 작동하지 않기 때문임. 하지만 암호화/복호화 메시지를 성공적으로 수행할 수 있는 비소수 P/Q 값이 존재하지 않는다고 증명될 수 있는지는 모르겠음.
     * 프로젝트에 얼마나 걸렸는지 궁금함. 저자는 Karatsuba, Toom-Cook, 복소수 FFT, NTT, Schönhage–Strassen을 구현했음. Silverman의 'A Friendly Introduction to Number Theory'를 추천함.
     * 큰 수를 곱하는 자체 코드를 작성했을 때 수학 논문의 고수준 설명을 실제 연산으로 옮기는 것이 얼마나 힘든지 공감됨. 기수 관련 설명에 약간의 문제가 있음.
     * 수를 새로 생성하는 대신 2를 더하는 마지막 최적화는 보안을 약간 깨뜨림. 소수는 균등하게 분포되어 있지 않아서 큰 소수 간격 바로 다음에 오는 소수로 편향되기 때문임.
     * Fermat의 소정리 설명에 약간 오류가 있음. a^(p-1)이 p로 나누어 떨어진다고 했는데 a^(p-1) - 1이 p로 나누어 떨어져야 함. 모듈러 산술 용어로는 맞게 설명됨.
"
"https://news.hada.io/topic?id=14676","2024년의 Machine Unlearning","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2024년의 Machine Unlearning

     * 머신 언러닝은 원하지 않는 데이터를 훈련된 모델에서 제거하는 것을 의미하며, 모델을 처음부터 재학습할 필요 없이 모델을 편집하려는 관심이 증가하고 있음
          + 예를 들어 개인정보, 오래된 지식, 저작권이 있는 자료, 유해/위험한 콘텐츠, 위험한 기능, 거짓정보 등을 제거하는 것이 해당됨

언러닝의 형태

     * 정확한 언러닝(Exact unlearning)
          + 언러닝된 모델과 재학습된 모델이 분포적으로 동일하도록 요구함
          + 학습 알고리즘에 모듈식 컴포넌트가 있어 학습 예제의 서로 다른 집합에 대응되는 것이 핵심임
     * 차등정보보호(Differential Privacy)를 통한 ""언러닝""
          + 모델이 특정 데이터 포인트에 의존하지 않도록 만드는 것임
          + 언러닝된 모델과 재학습된 모델 사이의 분포적 근접성을 요구함
     * 알려진 예제 공간에서의 실증적 언러닝(Empirical unlearning with known example space)
          + 언러닝 데이터가 정확히 알려져 있는 경우에 적용됨
          + 모델 파인튜닝을 통해 언러닝하는 방식임
     * 알려지지 않은 예제 공간에서의 실증적 언러닝(Empirical unlearning with unknown example space)
          + 언러닝 데이터의 범위나 경계가 명확하지 않은 경우에 적용됨
          + 개념, 사실, 지식 등을 언러닝하는 경우가 해당됨
     * 언러닝을 요청하는 것(Just ask for unlearning)
          + 강력한 LLM에 언러닝을 직접적으로 요청하는 방식임

언러닝 평가

     * 언러닝 평가는 매우 어려운 문제임. 특히 지표나 벤치마크의 부족이 심각함
     * 언러닝 평가에서는 다음의 세가지 측면을 중점적으로 봐야함
          + 효율성 : 재학습 대비 알고리즘이 얼마나 빠른지
          + 모델 효용성 : 보존해야할 데이터나 직교 태스크에서의 성능 저하 여부
          + 망각 품질 : 망각해야할 데이터가 실제로 얼마나 언러닝되었는지
     * TOFU와 WMDP 벤치마크가 최근 제안되어 언러닝 평가에 도움이 되고 있음
          + TOFU는 저자 개인정보 언러닝에 초점을 맞추고, WMDP는 바이오/사이버 보안 관련 위험한 지식 언러닝에 초점을 맞춤
          + 인스턴스 기반이 아닌 지식 보유와 이해도에 기반한 높은 수준의 평가를 하고 있음
     * 개인식별정보, 저작권, 유해성, 백도어 등 애플리케이션 중심의 언러닝 벤치마크가 필요해 보임

언러닝의 실제와 전망

     * 언러닝의 어려움에는 스펙트럼이 존재함
          + 빈도가 낮은 텍스트 언러닝이 가장 쉽고, 높은 빈도의 텍스트, 근본적인 사실 순으로 점점 어려워짐
          + 지식이 더 근본적일수록 다른 지식들과의 연관성이 높아 언러닝 범위가 기하급수적으로 늘어나기 때문
          + 초기에 학습된 예제일수록 이후 예제에 의해 ""덮어쓰기"" 되어 언러닝이 어려울 수 있음
          + 반면 늦게 학습된 예제는 모델이 점진적/치명적으로 잊어버려 언러닝이 어려울 수 있음
     * 저작권 보호
          + 언러닝이 저작권 보호에 유망해 보이지만 현재로서는 법적 지형이 불분명함
          + 공정 이용 법리에 따라 저작권이 있는 콘텐츠 사용이 공정 이용에 해당된다면 언러닝이 불필요할 수 있음
     * 검색 기반 AI 시스템
          + 언러닝 요청을 받을 수 있는 콘텐츠를 사전학습 말뭉치에서 제거하고 외부 데이터베이스에 저장하는 방식
          + 언러닝 요청이 들어오면 DB에서 해당 데이터를 삭제하면 됨
          + 하지만 중복제거, 인용/변형 처리, 데이터 추출 공격 등의 문제가 있음
     * AI 안전성
          + 언러닝은 모델의 위험한 지식, 행동, 능력 등을 제거하는데 활용 가능함
          + 하지만 사후 위험 완화 및 방어 메커니즘 중 하나로 보아야 하며, 정렬 파인튜닝이나 콘텐츠 필터링 등 다른 도구와 trade-off가 있음을 인지해야 함

GN⁺의 의견

     * 머신 언러닝은 아직 연구 초기 단계이며, 특히 거대 언어 모델에서는 많은 어려움이 있어 보임. 정확한 언러닝이 가능한 특수한 경우를 제외하면 대부분 실증적이고 경험적인 방법에 의존하고 있는 상황임.
     * 언러닝의 평가 문제가 가장 큰 걸림돌로 보임. 언러닝 정의와 기준이 애매모호하고 애플리케이션마다 다른 상황에서 제대로된 벤치마크와 평가 지표 없이는 발전이 어려울 것임. 최근 TOFU, WMDP 등의 애플리케이션 중심 벤치마크가 나오고 있어 고무적이긴 함.
     * 저작권 문제에 대해서는 언러닝 외에 경제적 해법도 고려해볼만 함. 정기적 재학습을 통한 정확한 언러닝 서비스를 제공하고, 그 사이에 발생하는 저작권 침해에 대해서는 모델 소유자가 면책하는 식으로 OpenAI가 하고 있음.
     * 검색 기반 시스템은 많은 장점이 있지만 세부적으로 들어가면 생각보다 쉽지 않아 보임. 중복 제거, 저작권 식별, 데이터 추출 공격 방어 등 해결해야할 과제가 많음. LLM의 인컨텍스트 학습 능력이 높아지고 있어 retrieval만으로도 많은 것이 가능해질 것으로 보이나, 파인튜닝을 완전히 대체하긴 어려울 것 같음.
     * AI 안전성 관점에서 언러닝은 꽤 흥미로운 연구 분야임. 하지만 만능 해결책은 아니고 정렬, 필터링 등 다른 방어 기법들과 함께 사용되어야 할 것임. 모델이 자율성을 가지게 되면서 정책/규제 관점에서도 관심이 높아질 것으로 보임.

   구글 Machine Unlearning Challenge

        Hacker News 의견

     * 모델에서 특정 정보를 삭제하더라도 추론이나 프롬프팅으로 다시 학습될 수 있는 근본적인 문제가 있음
     * 금지된 정보 자체를 필터링하기보다는 최종 추론 레이어를 형성하는 가중치와 인센티브에 솔루션이 있을 수 있음
     * 현재의 ""안전한"" 모델들은 결과가 만족스럽지 않은 경우가 많은데, 이는 우리가 아직 진실한 모델을 원하지 않고, 추가 개발을 가능하게 하는 모델을 원하기 때문임
     * 모델이 외부의 무언가에 의해 생성되었다는 원칙을 인코딩하고 가중치를 부여하는 방법이 있을 수 있음
     * 저작권을 위반하는 데이터셋을 삭제하는 것이 법적으로 가장 받아들여질 수 있는 방법일 수 있음
     * 모든 콘텐츠를 수집하는 것이 아니라 명시적으로 모델 구축에 사용 가능한 것으로 표시된 콘텐츠만 수집하는 것은 어떨까?
     * 모델이 DP로 훈련되면 데이터가 너무 많이 뒤섞여 정확한 데이터를 반환할 수 없게 되거나, 반대로 DP 단계가 쓸모없어짐
     * 지식 삭제는 문제가 있는 작업임
     * 훈련, 미훈련, 재훈련된 AI의 ""건전성""이 우려됨
     * 2014년에 정책 입안자들은 딥러닝이 데이터와 컴퓨팅의 거대한 혼합체가 될 것이라고 예측하지 못했음
     * ""학습 해제""는 실제 목표가 아니며, 모델이 은유적으로 머리를 모래에 쳐박기를 원하는 것은 아님
     * 새로운 스타트업에는 ML 훈련 루프에 갈퀴를 든 폭도가 포함됨
"
"https://news.hada.io/topic?id=14623","48시간 내 교모세포종 제거하는 면역체계 재프로그래밍 mRNA 암 백신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                48시간 내 교모세포종 제거하는 면역체계 재프로그래밍 mRNA 암 백신

     * 플로리다 대학교 연구진이 4명의 성인 환자를 대상으로 한 최초의 인간 임상시험에서 교모세포종을 공격하기 위해 면역 체계를 신속하게 재프로그래밍하는 mRNA 암 백신을 개발했다고 보고함
          + 연구 결과는 전임상 마우스 연구와 자발적으로 뇌종양이 발생한 10마리의 반려견을 대상으로 한 새로운 mRNA 백신 시험에서의 결과와 일치함
          + 연구자들은 mRNA 백신을 성인 및 소아 뇌암 환자를 대상으로 확대된 1상 임상시험으로 발전시키는 것이 목표라고 밝힘

개인 맞춤형 백신 개발 및 전달 방식

     * 이 새로운 전략은 환자 자신의 종양 세포를 사용하여 개인 맞춤형 백신을 만들고, 엔지니어링된 복합 지질 입자(LP) 전달 메커니즘을 활용하여 백신과 면역조절제로 동시에 작용할 수 있는 다층 LP 집합체(LPA)를 생성함
     * 이 클러스터들은 단일 입자보다 훨씬 더 심오한 방식으로 면역 체계에 경고를 보냄
     * 개 임상시험 결과, 백신이 수일 내에 종양 미세환경(TME)을 재프로그래밍하여 활성화된 면역 체계 세포가 종양과 싸울 수 있게 함을 보여줌

백신의 효과 및 특징

     * 정맥 내 투여된 새로운 백신이 종양을 거부하기 위해 활발한 면역 체계 반응을 얼마나 빠르게 유발했는지가 가장 인상적인 연구 결과 중 하나였음
          + 48시간 이내에 종양이 '차가운' 면역 반응에서 '뜨거운' 면역 반응으로 빠르게 전환되는 것을 볼 수 있었음
          + 이는 암에 대한 면역 체계의 초기 부분을 매우 빠르게 활성화할 수 있음을 의미함
     * 연구진은 RNA-LPA가 빠른 사이토카인/케모카인 방출, 면역 활성화/이동, 조직 확인 가성진행, 교모세포종 특이적 면역 반응을 유발한다고 밝힘
          + 이는 RNA-LPA가 TME를 재프로그래밍하는 동시에 빠르고 지속적인 암 면역 요법을 유발하는 새로운 기술임을 뒷받침함

임상시험 진행 상황 및 향후 계획

     * 이번 발표는 7년 동안의 유망한 전환 연구 결과의 정점으로, 전임상 마우스 모델에서 시작하여 자연 발생적으로 말기 뇌암이 발병하고 다른 치료 옵션이 없는 10마리의 반려견 연구로 발전함
     * 개 환자를 대상으로 한 개인 맞춤형 mRNA 백신 치료 후, 연구팀은 MGMT 비메틸화 교모세포종 환자 4명을 대상으로 한 소규모 FDA 승인 임상시험으로 연구를 진행함
          + 백신은 각 환자에게 맞춤화되어 면역 체계 반응을 최대화하는 것이 목표였음
     * 1상 임상시험 확대 시 최적의 안전한 용량이 확인되면 2상에서는 약 25명의 어린이가 참여할 예정임
     * 이는 환자 치료에 대한 새로운 패러다임이 될 수 있으며 면역 체계를 조절하기 위한 새로운 플랫폼 기술이 될 수 있음을 연구자들은 기대하고 있음

GN⁺의 의견

     * 이번 연구는 RNA-LPA 기반 개인 맞춤형 암백신이 교모세포종뿐만 아니라 다양한 암종에 적용 가능성이 있음을 시사함. 하지만 아직 안전성과 효능에 대한 충분한 검증이 필요할 것으로 보임
     * mRNA 백신 기술은 COVID-19 팬데믹 이후 빠르게 발전하고 있으며, 이를 암 치료에 활용하려는 시도가 활발히 이뤄지고 있음. 향후 RNA 엔지니어링 기술의 발달로 더욱 효과적이고 안전한 mRNA 암백신 개발이 가능해질 것으로 전망됨
     * 이번 연구에서는 개를 대상으로 한 동물실험 결과를 제시했는데, 개는 사람과 유사한 자연 발생 뇌종양 모델로 알려져 있어 전임상 연구 단계에서 유용하게 활용될 수 있을 것으로 보임
     * 다만 이번 연구는 소수의 환자를 대상으로 한 초기 임상시험 결과이므로, 충분한 환자수를 확보한 후속 연구를 통해 안전성과 유효성을 검증하는 것이 필요함. 또한 면역 관문 억제제 등 기존 면역항암제와의 병용 효과에 대한 연구도 필요할 것으로 사료됨

        Hacker News 의견

     * Richard Scolyer, 첫 번째 교모세포종 백신 환자로, 10개월 이상 생존 중임. mRNA 기반인지는 불확실함. 백신 투여 후 수술로 종양 제거, 이후 재발 방지를 위해 추가 백신 투여하는 방식. 현재까지 재발 없음.
     * mRNA와 개인 맞춤형 암 백신이 여러 암종에서 엄청난 잠재력을 보이고 있음. 교모세포종은 특히 난치성으로, 현재 임상 시험 중인 또 다른 치료법으로는 DCVax가 있음. FDA의 치명적 질병에 대한 치료제 승인 지연이 큰 문제.
     * 암을 통제하기 위해서는 단일 접근법보다는 복합적 접근이 필요할 것으로 보임. 암은 너무 많이 변이하기 때문.
     * 새로운 백신은 단일 입자 대신 양파처럼 겹겹이 싸인 입자 클러스터를 주입하는 방식. 이는 면역 체계를 더 강력하게 자극함. 견공 시험 결과, 백신이 종양 미세환경을 수일 내 재프로그래밍하여 활성화된 면역 세포가 종양과 싸울 수 있게 함.
     * COVID-19로 인해 여러 분야 간 협업 연구가 활발해진 것은 긍정적. mRNA 백신은 오래전부터 개발 중이었지만, COVID-19가 아니었다면 이런 연구가 더 오래 걸렸을 것.
     * 개인 맞춤형 치료가 늘어날수록 비싼 치료비 때문에 미국 의료 시스템에 대한 우려 커짐. 돈 있는 사람은 암에 걸리지 않거나 덜 치명적일 것이고, 그렇지 않은 사람은 그렇지 못할 것. 암이 가난한 사람들의 문제가 될 수 있음. 의료 혜택의 불평등 해소를 위한 시스템 변화 필요.
     * 교모세포종으로 PI가 사망한 경험담. 치료법이 있었다면 인생이 어떻게 달라졌을지 상상하기 어려움.
     * 교모세포종은 끔찍한 병. 직장 동료가 회사 인수 후 코브라 차를 사서 축하하다 발작을 일으켜 2년 만에 사망. 어린 아들을 남기고 떠남.
     * 변이하는 바이러스를 쫓아가는 유전자 치료보다는 이런 제한적 범위의 치료가 더 현실적일 듯. 지질 기반 운반체보다 더 안정적인 전달 시스템이 있는지?
     * 백신 접근법은 건강한 조직도 면역 반응을 일으킬 위험 있음. 특히 그 조직이 뇌 조직이라면... 어쨌든 보험사가 치료비를 지급하려면 검증이 필요함.
     * 암에 대해 일반인이 이해할 만한 좋은 책 추천 요청. 암의 정의, 변이, 잠재적 치료 전략 등을 설명해주는 책.
"
"https://news.hada.io/topic?id=14629","달 정착지 내 원형 벽면 안쪽에서의 수평 달리기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       달 정착지 내 원형 벽면 안쪽에서의 수평 달리기

     * 이번 연구는 NASA의 아르테미스 프로그램과 같이 장기 달 정착지 생활에서 중력 감소로 인한 근위축, 골밀도 감소, 심폐기능 저하 등의 문제를 해결하기 위한 대책을 찾는 데 목적이 있음
          + 달 중력에서는 걷기, 달리기 같은 이동 방법이 지구와 다른 역학을 보이고 속도 제한이 있어 운동 효과가 적음
          + 연구진들은 달에서 인간이 수직 원형벽 안쪽을 수평으로 달리는 것을 제안함. 이는 지구의 오락시설인 '죽음의 벽(Wall of Death)'에서 영감을 얻음
     * 방법
          + 지구의 10m 직경, 5m 높이 원통 '죽음의 벽' 시설을 이용해 실험
          + 참가자들의 무게를 1/6로 줄이기 위해 36m 크레인에 번지 밴드를 매달아 달 중력을 모사함
          + 참가자 2명(36세 남성, 33세 여성)이 달 중력 환경에서 벽에 수평으로 달릴 수 있는 최소 속도, 자세, 운동역학 등을 분석함
     * 결과
          + 원형벽에서의 평균 보폭은 3.78m, 보속은 1.58Hz, 발이 지면에 닿는 시간은 0.176초, Duty factor는 0.27이었음
          + 이는 지구에서의 달리기와 역학적으로 유사함
          + 최대 발 접지력은 지구 체중의 2~3배에 해당하는 값을 보였고, 이는 골 칼슘 재흡수를 막기에 충분한 수준
          + 산소섭취량은 49~67 ml/kg/분으로 추정되어 고강도 인터벌 트레이닝에 해당
     * 토의
          + 수평 원형벽 달리기는 근골격계, 심폐계, 운동신경계 등 신체 전반의 기능 저하를 막는 복합적 대책이 될 수 있음
          + 하루 몇 바퀴 달리는 것만으로도 골밀도 유지와 심폐지구력 향상에 도움이 될 것으로 보임
          + 달 기지 내 원통형 거주구역 벽을 활용한다면 추가 시설 없이 손쉽게 적용 가능함

GN+의 의견

     * 달 중력에서 인간의 걷기나 달리기 운동이 지구와 다른 역학을 보이고 운동 강도가 낮다는 점은 흥미로운 배경 지식이었음. 특히 발 접지력이 크게 감소해 골밀도 유지에 부족하다는 점도 새로 알게 되었음.
     * 지구의 '죽음의 벽'을 응용한 발상의 전환이 돋보였음. 특히 수학적 모델을 통해 최소 속도, 기울기 등을 예측하고 이를 실제 모사 실험으로 검증한 과정이 인상적이었음.
     * 원형 달리기가 근골격, 심폐, 운동신경 등 신체 전반에 복합적 운동 효과를 줄 수 있다는 분석은 설득력이 있어보임. 특히 접지력이 지구 달리기 수준으로 높아진다는 결과는 고무적임.
     * 다만 연구 규모가 작고 운동역학 분석이 다소 예비 실험 수준이라는 한계가 있음. 보다 많은 피험자를 대상으로 장기간 적용 시 생리학적 변화를 관찰하는 후속 연구가 필요해 보임.
     * 달 기지 내 원통형 거주구역을 활용한 적용 방안은 현실성이 높아 보임. 유사한 시설을 달 기지 설계 시 반영하는 것도 좋은 아이디어일 것 같음.
     * 이외에도, 지구에서 유사한 훈련을 할 수 있도록 측면에서 바람을 맞으며 트레드밀 위에서 달리는 방법 등도 추가로 고려해볼 만함.

        Hacker News 의견

   요약:
     * 보조 데이터를 보려면 여러 번 클릭해야 함. 방향을 자주 바꾸는 것이 좋을 것으로 보임.
     * 스핀 표면에 대한 언급은 없었음. 원뿔형 실린더 ""중력 체육관""이 더 큰 ""중력""을 부드럽게 만들 수 있음.
     * 스핀 중력은 체중 운동, 코어 운동, 정지형 또는 소규모 유산소 운동, VR 게임, 요가, 수면 등을 가능하게 함.
     * 달 기반 원심분리기는 기술적 어려움이 있고 상당한 전기 에너지가 필요함. 그러나 스핀 영역은 저중력 식민지에서 필수적일 것임.
     * 세계 최대 햄스터 바퀴를 만든 경험에 따르면, 단기간 달리기에는 재미있지만 대부분 사람들은 몇 분 후 어지러움을 느낌. 곡면 플랫폼도 걸려 넘어질 위험이 있음.
     * 물 로잉이 달에서 작동할 수 있을지 의문. 아서 클라크의 소설에서는 저중력 우주선에 원형 사이클 트랙이 등장함.
     * 근육 위축과 골 탈회를 방지하기 위해 전신 운동이 가장 좋은 방법인지 의문. 밴드나 달 바위를 이용한 웨이트 트레이닝이 더 나을 수 있음.
     * 50년 전 '2001 스페이스 오디세이'에서 원형 벽 달리기가 나왔음.
     * 저중력에서 내이가 어떻게 작용하는지, 전정계의 차이로 인해 우주인이 달에서 비정상적으로 현기증을 느낄 수 있는지 알아볼 필요가 있음.
"
"https://news.hada.io/topic?id=14671","마이크로소프트 CTO의 OpenAI에 대한 견해 (2019년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   마이크로소프트 CTO의 OpenAI에 대한 견해 (2019년)
"
"https://news.hada.io/topic?id=14746","Ask GN: 이번 주말에 뭐 하시나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   1인용 보드게임이 있다는것을 알게되어 검색을 좀 해봤네요. 여러가지 게임중 정령섬이란 보드게임으로 1인용 보드게임을 입문해 보려합니다. 규칙이 복잡하다고 하는데 유튜브 뒤져보면 설명 잘 되어있을거 같아서 공부좀 하고 도전해 보려구요
"
"https://news.hada.io/topic?id=14752","오로라 아래 분홍빛으로 빛나는 대부분의 유럽","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        오로라 아래 분홍빛으로 빛나는 대부분의 유럽

글로크너 웹캠 네트워크 개요

     * 277대의 웹캠이 연결되어 있으며, 현재까지 총 96,042,185장의 이미지가 수집됨
     * 웹캠들은 글로크너 산 주변 반경 869km 내에 분포되어 있음
     * 가장 가까운 곳은 글로크너 줌(Großglockner Zoom) 웹캠으로 산으로부터 0km 거리에 위치함
     * 가장 먼 곳은 페루 와라스(Huaraz) 웹캠으로 10,798km 떨어져 있음
     * 독일 후줌(Husum), 플렌스부르크(Flensburg), 본(Bonn), 다름슈타트(Darmstadt) 등 900km 이상 떨어진 곳에도 웹캠이 설치되어 연결됨

웹캠 이미지 데이터

     * 특정 웹캠(Lucknerhaus - Blick zum Großglockner)의 최신 이미지 캡처 시각은 2024년 5월 11일 02시 30분이며, 이때 기온은 2.8°C였음
     * 웹캠별로 시간대별 이미지 데이터를 제공함

GN⁺의 의견

     * 277대에 달하는 대규모 웹캠이 연결된 것은 매우 인상적임. 이는 광범위한 지역의 기상 관측과 경관 모니터링에 활용될 수 있음. 다만 데이터 전송 및 저장 비용, 웹캠 설치 및 유지보수 비용 등 운영에 많은 비용이 소요될 것으로 보임.
     * 향후 이 데이터를 기반으로 기후변화 분석, 설산 풍경의 시계열 변화 추적, 야생동물 서식지 모니터링 등 다양한 연구가 가능할 것임. 관광객들에게 알프스 전경을 실시간으로 보여줄 수 있어 홍보 효과도 클 것으로 기대됨.
     * 다만 개인정보보호 이슈가 제기될 수 있음. 등산객 얼굴이 식별될 정도로 고해상도 촬영시 문제가 될 수 있음. 웹캠 설치 고지와 동의 절차가 필요해 보임.
     * 10,000km가 넘는 곳까지 웹캠이 연결된 것은 의아함. 네트워크 토폴로지와 데이터 전송 구조가 궁금해짐. 글로벌 CDN을 활용하는 것인지 의문임.

        Hacker News 의견

   여러 지역에서 오로라를 관측한 경험을 공유하고 있음
     * 덴마크 유틀란트에서는 처음에는 안개 같은 흰 줄무늬로 시작했다가 10분 정도 지나자 하늘 중앙의 한 점에서 붉은색, 보라색, 초록색이 나타나기 시작함. 그 점은 계속 변화하며 자기 자신으로 빨려 들어가는 것처럼 보였음
     * 프랑스 남서부에서는 북쪽에서 오는 긴 스파이크 모양의 희미한 빛이 보였는데, 은은한 회색과 분홍색이었음
     * 영국 북부 시골에서는 맨눈으로도 선명하게 보였고, 아이폰 14로 3초 노출 사진을 찍으니 믿기 어려울 정도로 잘 나왔음
     * 빛 공해가 심한 런던 서부에서도 처음으로 오로라를 봤는데, 템스강 위로 찍은 사진을 트위터에 공유함
     * 리버풀의 뒷마당에서 아이폰14로 찍은 사진도 공유됨

   오로라 관측에 대한 기타 의견들
     * 유럽 대부분 지역은 빛 공해가 없어서 오로라 관측에 유리함. 인구 밀도가 높은 북서부 유럽은 온실 재배로 인해 인공 일출 현상이 24시간 있어서 어려움
     * 태양 코로나 물질 방출이 지구 대기와 상호작용해서 발생하는 것으로 알려진 오로라가 남반구에서도 점점 밝아지고 있는데, 이렇게 남북반구에서 동시에 잘 보이는 경우는 흔치 않음
     * 스위스 중부에 있는 리기 샤이덱, 리기 로트슈톡의 웹캠에서도 오로라가 잘 보임
     * 미국 북동부에서 해질녘에 오로라를 기다리며 Canon EOS R5 DSLR 카메라 설정 팁을 구하는 초보자도 있음
"
"https://news.hada.io/topic?id=14657","Rust 검증 기술, 저수준 시스템 코드에 적용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Rust 검증 기술, 저수준 시스템 코드에 적용

Rust 코드의 정확성을 검증하기 위한 Verus 도구

     * Verus는 Rust로 작성된 코드의 정확성을 검증하기 위한 도구
     * 개발자는 코드가 수행해야 할 사양을 작성하고, Verus는 실행 가능한 Rust 코드가 모든 가능한 코드 실행에 대해 항상 사양을 충족하는지 정적으로 검사함
     * 런타임 검사를 추가하는 대신 Verus는 강력한 솔버에 의존하여 코드가 올바른지 증명함
     * Verus는 현재 Rust의 하위 집합을 지원하며(확장 중), 경우에 따라 개발자가 표준 Rust 타입 시스템을 넘어 정적으로 코드의 정확성을 검사할 수 있도록 함(예: 원시 포인터 조작)

  Verus의 현재 상태

     * Verus는 활발히 개발 중
     * 기능이 깨지거나 누락될 수 있으며 문서도 여전히 불완전함
     * Verus를 시도하려면 Zulip에서 도움을 요청할 준비가 되어 있어야 함

  Verus 사용해보기

     * 브라우저에서 Verus를 시도하려면 Verus Playground를 방문
     * 더 복잡한 개발을 위해서는 설치 지침을 따르고, 튜토리얼과 참조부터 시작하여 아래 문서를 살펴볼 것

  Verus 문서

     * 튜토리얼 및 참조
     * Verus 표준 라이브러리에 대한 API 문서
     * 동시성 코드 검증을 위한 가이드
     * 프로젝트 목표
     * Verus에 기여하기
     * 라이선스

  연락하기, 이슈 보고, 토론 시작하기

     * GitHub에서 이슈를 보고하거나 토론을 시작하거나, 실시간 토론과 도움이 필요한 경우 Zulip에 가입할 것
     * 기존 기능의 실행 가능한 문제(버그)에는 GitHub 이슈를, 기능 요청 및 예정된 기능에 대한 보다 개방적인 대화에는 GitHub 토론을 사용함
     * 기여를 환영하며, 코드를 기여하고 싶다면 Contributing to Verus의 팁을 살펴볼 것

GN⁺의 의견

     * Rust는 시스템 프로그래밍에 적합한 언어로 안전성과 성능을 보장하는 것으로 잘 알려져 있는데, Verus는 이러한 Rust의 장점을 더욱 강화할 수 있는 프로젝트로 보임. 특히 동시성 프로그래밍 검증 기능은 매우 흥미로워 보임
     * 다만 아직 개발 초기 단계이고 지원하는 Rust 문법이 제한적인 것 같아서, 실제 프로덕션에 적용하기에는 좀 더 개발이 필요해 보임. 하지만 정적 분석을 통해 미리 코드의 안전성을 보장하는 것은 중요하기 때문에 앞으로 발전 가능성이 높아 보임
     * 개발 초기라 아직 문서화가 부족한 점, 지원하는 문법이 제한적인 점 등 개선이 필요해 보이지만, 장기적으로는 Rust 생태계에서 중요한 역할을 할 프로젝트가 될 것 같음. 특히 시스템 프로그래밍이나 블록체인 등 신뢰성이 중요한 분야에서 활용도가 높을 것으로 기대됨

        Hacker News 의견

     * Verus를 사용하여 공식적으로 검증된 Kubernetes 컨트롤러를 작성함
          + 컨트롤러가 결국 요청된 desired state로 클러스터를 조정할 것이라는 liveness 속성을 증명할 수 있음
          + 정확성을 명시하는 데에는 미묘한 점과 뉘앙스가 많이 있음 (desired state 요구사항의 빠른 변화, 비동기성, 장애 등)
          + 코드는 GitHub 링크에 있으며, OSDI 2024에 게재 예정인 논문과 연결됨
     * Verus를 향한 작은 디딤돌로, Rust의 debug_assert를 사용하여 사전조건과 사후조건을 추가할 수 있음
          + Rust 컴파일러는 기본적으로 프로덕션 빌드에서 이를 제거함
          + Verus 튜토리얼의 예제와 debug_assert를 사용한 런타임 체크 예제 제공
     * ""코드의 정확성 검증""과 ""코드의 정확성 증명""의 차이점에 대한 초보자 질문
          + CS/수학 배경이 약한 실무 프로그래머를 위한 코드 ""증명""에 대한 좋은 학습 자료가 있는지 궁금함
          + ""제로 지식"" 증명이 왜 중요한지, 왜 이것이 그렇게 관련이 있는지 매우 궁금함
     * Rust 표준은 C/C++, Common Lisp, Ada/SPARK2014와 같이 아직 없음
          + 이는 Ada/SPARK2014 등을 위해 개발된 검증 도구와 비교할 때 움직이는 목표임
     * Dafny는 Rust로 컴파일할 수 있는 ""검증 인식 프로그래밍 언어""임 (GitHub 링크)
     * 주요 기여자 중 한 명이 취리히 Rust 밋업에서 Verus에 대한 훌륭한 발표를 함 (YouTube 링크)
          + ""ghost"" 코드가 프로그램에 깔끔하게 맞는 것이 인상적이었음 (Ada를 약간 연상시킴)
     * Verus와 SPARK의 비교
          + 동일한 일반 클래스의 검증기인가? Verus가 Ada용 검증기가 아닌 Rust용 검증기라는 점 외에 어떤 차이가 있는가?
     * Verus에 정통한 사람이 Verus와 Lean4의 성능과 표현력을 비교해 줄 수 있는지?
          + Verus는 SMT 기반 검증 도구이고, Lean은 대화형 증명기이자 SMT 기반 도구라고 이해함
          + 그러나 형식 검증 분야에 대한 이해도는 제한적이므로, 소프트웨어 형식 기법에 정통한 사람의 의견을 듣는 것이 좋겠음
     * Verus와 Kani의 관계가 있는지? 다르게 작동하는지? (Kani GitHub 링크)
     * 결과 코드가 여전히 바닐라 Rust 도구를 사용하여 컴파일할 수 있는 유효한 Rust 코드가 되도록 구현하는 방법이 있는지?
"
"https://news.hada.io/topic?id=14707","Pyspread - 파이썬 스프레드시트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Pyspread - 파이썬 스프레드시트

     * 가장 파이썬스러운 스프레드 시트가 되는 것을 목표로 함
     * 그리드 셀에 Python 표현식을 사용
          + 각 셀은 다른 셀에서 액세스할 수 있는 Python 객체를 반환하며, 객체는 목록이나 행렬을 포함한 모든 것을 나타낼 수 있음
          + 텍스트, 마크업, 이미지, 날짜, 차트 등 표시 가능
     * 셀 내에서 NumPy 등 Python 모듈에 접근
     * CSV, SVG 가져오기 및 CSV, SVG, PDF 내보내기
     * Matplotlib 및 R 차트. Plotnine 및 R 패키지 graphics, lattice, ggplot2는 대화창을 통해 지원
     * 맞춤법 검사기 포함
     * git 가능한 pysu 저장 파일 포맷
     * 외부 코드 실행을 방지하는 blake2b 기반 저장 파일 시그니처

타겟 유저 그룹

     * Python 코드를 그리드에서 직접 사용하는 것이 pyspread의 핵심 기능임
          + 대상 사용자 그룹은 Python 프로그래밍 언어 경험이 있거나 배우고자 하는 사람들임
     * 연구 엔지니어 Clara:
          + 다양한 파라미터 세트의 결과를 체계적으로 비교
          + Python에 능숙하고 과학적 분석에 사용해 왔음
          + 파라미터 변경이 결과에 미치는 영향을 빠르게 파악하기 위해 pyspread의 셀에 결과를 표시함
     * 사업가 Peter:
          + 스프레드시트로 비즈니스 의사 결정을 준비함
          + 데이터는 CSV 파일에 저장하고 pyspread에서 액세스함
          + py-moneyed의 Money 데이터 타입을 매크로 패널에서 임포트해 부동 소수점 오류를 방지함
          + 별도 Python 모듈에 분석 도구와 단위 테스트를 구현해 잘못된 결과로 인한 나쁜 비즈니스 결정 걱정을 줄임
     * pyspread의 타겟이 아닌 사용자:
          + Donna: 무료 엑셀 대체품을 찾고 있으나 프로그래밍 언어를 모르고 배울 시간도 없음
          + Jack: 계산 집약적 데이터 분석을 하며 클러스터나 클라우드 솔루션으로 계산을 병렬화할 수 있는 스프레드시트를 찾고 있음
               o 장시간 작업이 pyspread를 잠그지 않도록 수동으로 처리해야 해서 실망할 수 있음

  Hacker News 의견

Pyspread 관련 해커뉴스 댓글 요약

  1. 대상 사용자 그룹 명시에 대한 긍정적 의견

     * 홈페이지의 ""대상 사용자 그룹"" 섹션에서 앱이 누구를 위한 것인지 뿐만 아니라 누구를 위한 것이 아닌지도 명시한 것에 대해 칭찬함.
     * 이런 정보는 앱 사용 여부나 추천 여부를 결정하는 데 매우 중요함.
     * 개발자들은 모두가 자신의 앱을 사용하기를 바라거나, 앱이 누구를 위한 것이 아닌지 적는 데 시간을 들이고 싶어하지 않을 수 있으나, 그런 정보를 포함하는 개발자들을 칭찬함.

  2. 대안 소프트웨어 모음 배포판에 대한 요청

     * Pyspread(스프레드시트), LyX(워드프로세서), OpenSCAD(3D 모델러), TkzEdt/ipe(2D 드로잉) 등 최고의 대안 소프트웨어를 모은 배포판이 있으면 좋겠음.
     * 특히 프레젠테이션과 데이터베이스 작업을 위한 유사 소프트웨어 제안에 관심 있음.

  3. Pyspread 관련 과거 해커뉴스 게시물 링크

     * 2022년 2월, 2014년 4월, 2010년 11월, 2008년 8월에 Pyspread 관련 게시물이 올라옴.

  4. Pyspread의 장점

     * 열과 행을 숫자로 지정하여 2D 매트릭스처럼 인덱싱 가능함.
     * Excel의 알파벳 열 시스템은 26열 이상에서는 별로 의미가 없어 불편함.

  5. Pyspread의 한계

     * 의존성 추적 기능이 없고 변경 후에 모든 것을 재계산하는 것으로 보임.
     * 임의의 Python 코드에 대해 의존성을 추적하는 것은 쉽지 않음.
     * 정적 분석 마법에 의존하지 않고서는 S[]에 대한 접근을 추적하여 의존성을 파악할 수 있을 것임.

  6. 관련 주제: Excel에서의 Python 사용

     * Microsoft에서 Excel에서 Python을 시작하는 방법을 안내하는 문서 링크 제공됨.

  7. Resolver One, Project Dirigible, Python Anywhere의 관계

     * Giles Thomas가 원래 Resolver One이라는 Pythonic 스프레드시트 앱을 개발했고, 이를 웹 기반 버전인 Project Dirigible로 발전시킴.
     * Project Dirigible는 스프레드시트로 사용되기보다 일반 Python 개발에 주로 사용되어 Python Anywhere로 분리됨.
     * 이에 대한 흥미로운 설명과 Dirigible 데모 영상 링크가 제공됨.
     * Project Dirigible는 결국 오픈소스로 공개됨.

  8. Pyspread의 WASM 컴파일 제안

     * Pyodide 등을 사용하여 WASM으로 컴파일하면 브라우저 내에서 완전한 버전을 만들 수 있을 것이라는 의견 제시됨.

  9. RowZero 스프레드시트 서비스 소개

     * 수억 행 규모의 큰 데이터셋을 다룰 수 있는 RowZero 스프레드시트 서비스 소개됨.
     * Python 함수를 정의하고 스프레드시트 셀에서 수식으로 호출할 수 있음.
     * Pandas 데이터프레임을 Python과 스프레드시트 사이에서 매끄럽게 변환함.
     * 구글 시트처럼 호스팅되며 실시간 협업을 지원함.
     * 엑셀 수식 언어를 재구현했으며, 다양한 DB에 직접 연결됨.
     * 첫 워크북은 무료임.

  10. GPL3 라이선스에 대한 아쉬움

     * GPL3 라이선스 때문에 FreeCAD에 포함되기 어려울 것이라는 의견 제시됨.
     * FreeCAD의 현재 스프레드시트 워크벤치보다는 개선될 것 같다는 생각을 나타냄.
"
"https://news.hada.io/topic?id=14690","ASCII 3D 렌더러 만들기렌더러 만들기

   ASCII 3D 렌더러를 구현하며 3D 렌더링 파이프라인에 대해 설명함

   이 글의 결과물은 블로그 글 외에 다음 링크에서도 볼 수 있음
   GitHub: https://github.com/kciter/ascii-3d-renderer.js
   Chromatic: https://6637eb83d047d2bb1b3cfe67-bdnazvfsel.chromatic.com//…
     * ASCII를 3D처럼 보이게하는 것이 가능한가?
          + ASCII는 크게 확대한 흑백 픽셀과 유사하다
          + 글자의 밀집도에 따라 밝기를 조절할 수 있다
     * 3D 좌표를 2D 좌표로 어떻게 만드는가?
          + 크게 버텍스 처리, 래스터화, 프래그먼트 처리로 진행함
          + 3D 좌표를 버텍스라고 부르며 3D 공간에 위치한 '정점'을 의미함
          + 버텍스 하나로는 물체를 표현할 수 없으므로 버텍스를 모아 물체를 표현함
          + 물체를 표현하는 최소 단위를 폴리곤이라고 부름
     * 버텍스 처리
          + 버텍스를 변형하는 과정을 버텍스 처리라고 부름
          + 월드 변환, 뷰 변환, 투영 변환 순서로 진행
          + 각 변환은 행렬을 이용하여 연산함
          + 월드 변환은 3D 모델 파일에 담긴 버텍스를 3D 공간에 배치하는 것
          + 뷰 변환은 카메라를 배치하는 것으로 어느 좌표에서 어느 시점으로 물체를 바라보는지 연산하는 것
          + 투영 변환은 원근감을 표현하기 위한 연산. 보통 원근 투영을 사용한다.
          + 투영 변환을 통해 2D 공간 좌표로 변환하는 것이 가능
     * 래스터화
          + 2D 공간 좌표를 픽셀 좌표로 변환하는 과정
          + 클리핑, 원근 나누기, 후면 제거, 뷰포트 변환, 스캔 변환을 거침
          + 이 글에서는 위 작업들을 적절히 섞어서 구현함
     * 프래그먼트 처리
          + 픽셀로 변환된 좌표를 처리하는 과정
          + 일반적인 3D 렌더러에선 쉐이더 연산을 하는 등 후처리를 진행함
          + 이 글에서는 광원 계산에 대한 결과만 적용
     * 구현 파트는 거의 대부분이 소스 코드기 때문에 요약에선 생략

   재미있게 읽었습니다. 학부 때 들었던 컴퓨터그래픽스 수업도 새록새록 기억나고 좋았어요.

   재미있게 읽었습니다. 카메라 위치까지 생각해서 작업한 것이 인상적이었습니다

   기본적인 렌더링 파이프라인 설명까지
   아주 재밌는 내용이었습니다.
"
"https://news.hada.io/topic?id=14711","Show GN: 오픈 소스 데이터 익명화 및 Postgres 및 Mysql을 위한 합성 데이터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: 오픈 소스 데이터 익명화 및 Postgres 및 Mysql을 위한 합성 데이터

   안녕하세요, 하다 뉴스 여러분, Neosync를 출시하게 되어 기쁩니다!

   Neosync는 개발자들이 개인정보 보호나 보안 위험 없이 로컬 테스트, 디버깅 및 개발자 경험을 개선하기 위해 생산 데이터의 익명화된 버전 및 합성 버전을 생성할 수 있도록 돕는 오픈 소스 플랫폼입니다.

   대부분의 개발자 및 팀은 로컬 및 스테이지 데이터베이스를 위한 몇 가지 모의 데이터를 생성하는 데이터베이스 시드 스크립트를 가지고 있습니다. 개발자들에게서 들은 문제는 로컬에서는 기능이 잘 작동하는 것처럼 보이지만, 생산 데이터를 대표하지 않는 시드 데이터 때문에 생산에서 버그와 예외 사례가 발생한다는 것입니다. 두 번째 문제는 생산에서 오류를 디버깅할 때 생산에 가까운 데이터를 얻는 좋은 방법이 없다는 것이었습니다.

   생산 데이터를 직접 사용하면 이러한 문제를 해결할 수 있지만, 대부분의 팀은 1. 개인정보 보호/보안 문제와 2. 규모 때문에 사용할 수 없습니다.

   그래서 우리는 Neosync로 이 두 가지 문제를 해결하기 위해 나섰습니다.

   우리는 익명화와 합성 데이터를 사용하여 개인정보 보호 및 보안 문제를 해결합니다. 40개 이상의 사전 구축된 트랜스포머(또는 코드로 직접 작성)를 사용하여 PII 또는 민감한 데이터를 익명화하여 로컬에서 안전하게 사용할 수 있습니다. 또한, 데이터를 익명화하는 대신 처음부터 생산 데이터처럼 보이는 합성 데이터를 생성할 수 있으며, 데이터베이스의 기존 스키마에 맞게 조정됩니다.

   두 번째 문제는 규모입니다. 일부 생산 데이터베이스는 로컬에 맞지 않을 정도로 크거나 필요한 것보다 더 많은 데이터를 가지고 있습니다. 또한, 특정 고객의 데이터를 디버깅하고 싶은 경우가 있으며 그들의 데이터만 필터링하는 방법이 필요합니다. 우리는 이를 서브셋팅으로 해결합니다. 테이블을 필터링하기 위한 SQL 쿼리를 전달하면 Neosync가 모든 복잡한 작업을 처리합니다.

   Neosync의 핵심은 참조 무결성을 다룰 수 있는 능력입니다. 관계형 데이터베이스를 다룰 때, 주요 키, 외래 키, 고유 제약조건, 테이블 내 및 테이블 간 순환 종속성, 시퀀스 등이 있습니다.

   따라서 데이터를 익명화하든 합성 데이터를 생성하든, 그 제약조건과 관계를 보존하는 방법이 필요하며, 그렇지 않으면 스키마가 깨집니다.

   Neosync는 이를 투명하게 처리합니다. 외래 키가 깨지거나 매핑이 필요한 새로운 열, null이 아닌 외래 키 등 제약조건에 문제가 발생하면 알려드려 조치를 취하고 수정할 수 있습니다.

   작동 방식은 다음과 같습니다.
    1. 소스 및 대상 데이터베이스를 연결합니다.
    2. 작업 유형을 정의하고 일정에 따라 실행할지 여부를 결정합니다. 동기화 작업은 소스에서 대상으로 데이터를 동기화하고 데이터 생성 작업은 처음부터 합성 데이터를 생성하여 대상으로 스트리밍합니다.
    3. 동기화 및 변환할 스키마와 테이블을 정의합니다. 열 수준에서 데이터를 익명화하거나 합성 데이터를 생성하는 방법을 정의하는 트랜스포머를 선택하거나, AI 생성 합성 데이터를 사용하여 대상 데이터베이스의 데이터를 생성할 수 있습니다.
    4. 마지막으로, 서브셋을 정의할 수 있습니다. 이는 대상에 전송되는 데이터를 필터링하는 방법입니다. 이를 위해 사용자 지정 SQL 쿼리나 필터를 제공할 수 있습니다.

   그게 전부입니다! 설정한 일정에 따라 작업이 실행됩니다. 우리는 전체 데이터베이스에 걸친 재시도, 백오프 및 참조 무결성을 처리합니다. 또한 API, CLI 및 Github 작업을 제공하여 CI 파이프라인에서 CI 데이터베이스를 채우는 데 Neosync를 사용할 수 있습니다.

   Neosync는 Go와 Typescript로 작성된 오픈 소스 프로젝트이며 Helm이나 Docker compose로 실행할 수 있습니다. 또한 호스팅 플랫폼을 제공하며 넉넉한 무료 계층을 이용할 수 있습니다.

   피드백을 기다리고 있으며 언제든지 기여를 환영합니다.
"
"https://news.hada.io/topic?id=14670","오픈 소스 프로젝트 대상 사회공학 기법을 통한 탈취에 대한 경보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  오픈 소스 프로젝트 대상 사회공학 기법을 통한 탈취에 대한 경보

OpenJS와 OpenSSF, 오픈소스 프로젝트의 Social Engineering 공격 위험에 대한 경보를 발령

     * 최근 XZ Utils 백도어 시도(CVE-2024-3094)는 독립된 사건이 아닐 수 있음
     * OpenJS Foundation이 유사한 신뢰할 수 있는 인수 시도를 차단한 것으로 보아, 이는 단편적 사건이 아닐 수 있음
     * OpenSSF와 OpenJS Foundation은 모든 오픈 소스 관리자에게 사회 공학적 인수 시도에 대해 경계하고, 초기 위협 패턴을 인식하며, 오픈 소스 프로젝트를 보호하기 위한 조치를 취할 것을 촉구함

실패한 인수 시도

     * OpenJS Foundation Cross Project Council은 유사한 메시지를 담은 의심스러운 이메일 시리즈를 받았음
     * 이메일 작성자는 ""중요한 취약점을 해결하기 위해"" 인기 있는 JavaScript 프로젝트 중 하나를 업데이트하기 위해 OpenJS에 조치를 취하라고 촉구했지만, 구체적인 사항은 언급하지 않았음
     * 이메일 작성자는 이전에 거의 코드에 관여하지 않았음에도 불구하고 프로젝트의 새로운 관리자로 지정해 줄 것을 원했음
     * 이 접근 방식은 ""Jia Tan""이 XZ/liblzma 백도어에서 자신을 포지셔닝한 방식과 매우 유사함
     * OpenJS 호스팅 프로젝트에 이 사람들에게 액세스 권한을 부여되지 않았음
     * 프로젝트에는 재단 보안 실무 그룹에서 개략적으로 설명한 것을 포함하여 보안 정책이 마련되어 있음
     * OpenJS 팀은 재단에서 호스팅하지 않는 다른 두 개의 인기 있는 JavaScript 프로젝트에서도 유사한 의심스러운 패턴을 인식하고 잠재적인 보안 문제를 각각의 OpenJS 리더와 미국 국토안보부(DHS) 내 사이버 보안 및 인프라 보안 기관(CISA)에 즉시 알렸음

사회공학적 탈취(Takeover)의 의심스러운 패턴

     * 패턴들
          + 상대적으로 알려지지 않은 커뮤니티 구성원이 관리자 또는 호스팅 기관(재단 또는 회사)을 우호적이지만 공격적이고 끈질기게 요청함
          + 새로운 사람이나 알려지지 않은 사람이 관리자 지위로 승격해 줄 것을 요청함
          + 가짜 신원을 사용할 수도 있는 알려지지 않은 다른 커뮤니티 구성원의 지지를 받음 (일명 ""sock puppets"")
          + 아티팩트로 Blob을 포함하는 PR
          + 고의로 난독화되거나 이해하기 어려운 소스 코드
          + 점진적으로 심각해지는 보안 문제
          + 일반적인 프로젝트 컴파일, 빌드 및 배포 관행에서 벗어나 Blob, Zip 또는 기타 바이너리 아티팩트에 외부 악성 페이로드를 삽입할 수 있음
          + 특히 관리자가 긴박감으로 인해 검토의 철저함을 줄이거나 제어를 우회하도록 강요하는 경우 더욱 그러함
     * 이러한 소셜 엔지니어링 공격은 프로젝트와 커뮤니티에 대한 관리자의 사명감을 악용하여 이들을 조종함
     * 상호작용이 어떤 느낌을 주는지 주의할 것.
          + 자기 의심, 부적절함, 프로젝트에 충분한 기여를 하지 못한다는 느낌 등을 유발하는 상호작용은 사회 공학 공격의 일부일 수 있음
     * XZ/liblzma에서 목격한 것과 같은 소셜 엔지니어링 공격은 OpenJS 커뮤니티에 의해 성공적으로 예방 되었음
     * 이러한 유형의 공격은 소셜 엔지니어링을 통한 신뢰 위반을 이용하기 때문에 프로그램적으로 탐지하거나 방어하기 어려움
     * 단기적으로는 위에서 언급한 것과 같은 의심스러운 활동을 명확하고 투명하게 공유하면 다른 커뮤니티가 경계를 유지하는 데 도움이 될 것
     * 유지 관리자를 잘 지원하는 것이 이러한 소셜 엔지니어링 공격에 대한 주요 억제책

오픈소스 프로젝트 보안을 위한 단계

     * OpenSSF 가이드와 같은 업계 표준 보안 모범 사례를 따르는 것을 고려할 것
     * 강력한 인증 사용 : 2FA, 암호 관리자, 리커버리 코드를 안전한 곳에 저장, 암호/크레덴셜을 서로 다른 서비스에서 재사용하지 말 것
     * ""Coordinated disclosure"" 프로세스를 포함한 보안 정책 마련
     * 새 코드를 병합할 때 베스트 프랙티스 적용
          + 브랜치 보호 및 서명된 커밋을 활성화
          + 가능하면 PR이 관리자로부터 온 것이라도 병합하기 전에 두 번째 개발자가 코드 검토를 수행하도록 할 것
          + 가독성 요구 사항을 적용하여 새 PR이 난독화되지 않도록 하고 불투명한 바이너리 사용을 최소화
          + npm 게시 권한을 가진 사람을 제한
          + 커미터와 관리자를 파악하고 주기적으로 검토. 예를 들어 워킹그룹 회의에서 이들을 보았거나 이벤트 등에서 만난 적이 있나?
     * 오픈 소스 패키지 리포지토리를 운영중인 경우 Package Repository Security를 위한 원칙 채택을 고려할 것
     * CISA의 ""사회 공학 및 피싱 공격 방지"" 및/또는 ENISA의 ""사회 공학이란 무엇인가""를 검토할 것

주요 오픈소스 인프라 보안을 위한 산업계와 정부의 조치

     * 안정적이고 안전한 오픈 소스 프로젝트를 유지하기 위한 압박은 관리자에게 압박을 줌
     * 민간/공공 국제 협력을 통해 대규모 자원이 필요함
     * Open Source Foundations, Sovereign Tech Fund 등 이미 많은 기관에서 훌륭한 작업이 진행 중임
     * 오픈소스 프로젝트에 안전망을 제공하기 위해 리눅스 재단 패밀리 재단과 유사한 조직들의 노력 필요
     * 독일 정부의 Sovereign Tech Fund 이니셔티브를 통해 중요한 오픈 소스 인프라에 투자하고 있는 것은 고무적임
     * 글로벌 공공 투자 확대를 위해 독일의 Sovereign Tech Fund와 같은 이니셔티브에 대해 더 많은 글로벌 공공 투자를 지지하고 있음

GN⁺의 의견

     * 공격자들은 관리자의 의무감을 교묘히 이용해 개발자들을 교란시키고 있음. 따라서 프로젝트에 대해 관리자들이 느끼는 감정 변화에도 주의를 기울여야 할 것 같음.
     * 보안을 위해 투자를 늘려야 한다는 것에 동의하나, 결국 근본적으로는 개발 문화 자체가 보안을 우선하는 방향으로 바뀌어야 할 것 같음. 개발 과정 전반에 보안이 자연스럽게 스며들도록 해야 함.
     * 공격자들이 커뮤니티의 신뢰를 이용하는 만큼 오픈소스 프로젝트에서는 지속적으로 구성원들간 신뢰를 쌓고 강화하는 노력도 병행되어야 할 것 같음. 서로 얼굴을 마주보며 소통하는 것이 그 시작이 될 수 있겠음.
     * Alpha-Omega 프로젝트 처럼 실제 취약점 개선에 투자하는 프로젝트가 더 많이 만들어지고 지원받아야 할 것 같음. 그래야 실질적으로 오픈소스 프로젝트의 보안 수준이 높아질 수 있을 것임.

        Hacker News 의견

   요약:
     * 오픈소스 프로젝트 관리자로서, 새로운 기여자의 PR에 대해 더 의심하게 됨
          + 표면적으로는 양호해 보이지만, 은밀한 의도가 있을 수 있음을 염두에 둠
     * 오랜 기간 동안 기능이 추가되면서 소프트웨어가 매우 복잡해짐
          + 소수의 사람만이 이해할 수 있을 정도로 코드가 인식하기 어려워짐
          + 경험 많은 개발자들이 은퇴하면 많은 부분을 이해하지 못하게 될 것임
     * 대형 프로젝트의 관리자 변경사항에 대한 보고 시스템이 필요함
          + 버전/릴리스와 함께 npm.js나 Debian 패키지 등에 동기화되어야 함
          + 유럽 은행의 사례처럼, 여러 국가의 기관이 감시할 수 있어야 함
     * Eve Online 게임에서처럼, 가치 있는 기여자가 되어 신뢰를 얻은 후 배신하는 과정을 경계해야 함
     * 2FA/MFA는 자체 호스팅된 시스템에서만 사용해야 함
          + 서드파티 시스템에서는 2차 인증 수단을 잃으면 영구적으로 잠길 수 있음
          + 프로젝트를 직접 호스팅해야 통제력을 잃지 않음
     * 포용성과 장기적 보안 사이의 난처한 논의가 오픈소스에서 일어날 것임
          + 이란, 러시아, 중국 등 일부 국가 출신 개발자들은 이미 의심을 받고 있음
          + 포크하여 동맹국과 함께 기여하는 것이 더 나은 선택일 수 있음
          + 적대국은 라이선스나 저작권 문제에 구애받지 않고 원본의 변경사항을 병합할 수 있음
     * 각 프로젝트는 자체적인 기준을 세워야 하며, 유지보수되지 않는 종속성은 신속히 제거해야 함
          + 프로젝트의 민감도를 평가하는 것도 고려해볼 만함
     * XZ 공격 이후, 이런 공격이 얼마나 흔할지 생각해 봄
          + 오픈소스가 폐쇄형 소프트웨어에 비해 더 취약할 수 있음
          + 누구나 코드를 작성할 수 있고 악의적인 동기가 있기 때문
     * 기존 오픈소스 프로젝트의 행동을 소급해서 살펴보는 것은 어려울 것으로 보임
     * 단순한 아키텍처와 코딩 표준 개선에 집중해야 한다고 오랫동안 주장해 왔음
          + 하지만 사람들은 TypeScript, React 등을 사용하면서 불필요한 종속성을 늘리고 있음
          + 적들은 우리의 무지와 순진함을 비웃고 있음
          + 전체 산업, 심지어 정치 시스템까지 타협되었을 수 있음
     * 사람들은 최소한의 코드와 종속성을 가진 프로젝트를 찾았어야 함
          + 깨끗한 프로젝트는 관심과 기회를 박탈당하고, 과도하게 설계된 프로젝트가 전면에 나섬
          + 이제 그들은 악의적 행위자들의 쉬운 표적이 되었음
          + 복잡성 속에 취약점을 숨기는 것은 너무나 쉬운 일임
"
"https://news.hada.io/topic?id=14691","Caniemail.com - 이메일 콘텐츠 호환성 검사 서비스 (caniuse 이메일 버전)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Caniemail.com - 이메일 콘텐츠 호환성 검사 서비스 (caniuse 이메일 버전)

CSS transition 속성 지원 (2024년 3월 29일)

     * 이메일 클라이언트에서 CSS transition 속성 지원 현황을 정리한 내용
     * CSS transition 속성은 CSS 속성 값의 변화를 일정 시간에 걸쳐 애니메이션 효과를 주는 기능
     * 아직 이메일 클라이언트에서는 폭넓게 지원되지 않음

CSS text-wrap 속성 지원 (2024년 4월 3일)

     * 이메일 클라이언트에서 CSS text-wrap 속성 지원 현황을 정리한 내용
     * CSS text-wrap 속성은 긴 단어를 어떻게 줄 바꿈 처리할지 지정하는 속성
     * 아직 이메일 클라이언트에서는 폭넓게 지원되지 않음

CSS word-spacing, shape-margin, shape-outside 속성 지원 (2024년 3월 13일)

     * 이메일 클라이언트에서 CSS word-spacing, shape-margin, shape-outside 속성 지원 현황을 정리한 내용
     * CSS word-spacing은 단어 사이의 간격을 조절하는 속성
     * CSS shape-margin과 shape-outside는 이미지나 개체 주변으로 텍스트를 둘러싸는 방식을 지정하는 속성
     * 아직 이메일 클라이언트에서는 폭넓게 지원되지 않음

2024년 3월 Caniemail 업데이트 소식 (2024년 3월 29일)

     * 2024년 3월에 Caniemail 사이트에 추가된 업데이트 내용을 정리한 소식

2024년 2월 Caniemail 업데이트 소식 (2024년 2월 29일)

     * 2024년 2월에 Caniemail 사이트에 추가된 업데이트 내용을 정리한 소식

이메일 클라이언트 CSS 속성 지원 현황

     * 애플 Mail (macOS) : 284개 중 267개 지원
     * 애플 Mail (iOS) : 284개 중 266개 지원
     * 삼성 Email (Android) : 284개 중 239개 지원
     * SFR (Desktop Webmail) : 257개 중 226개 지원
     * WEB.DE (iOS) : 235개 중 222개 지원

Caniemail 사이트 소개

     * @HTeuMeuLeu와 Tilt Studio 팀이 런칭하고 유지 관리하는 사이트
     * @Fyrd의 원래 caniuse.com을 기반으로 하고 @Lensco가 디자인함
     * @M_J_Robbins와 Rebel 팀의 원래 아이디어와 이름을 기반으로 함
     * GitHub의 이메일 개발자 커뮤니티가 데이터 기여를 지원함
     * 문제가 있으면 GitHub에 버그를 보고해 달라고 안내

GN⁺의 의견

     * 이메일 개발자에게 매우 유용한 사이트로, 각 이메일 클라이언트별로 CSS 속성 지원 현황을 한 눈에 파악할 수 있음. 새로운 CSS 속성을 이메일에 적용할 때 호환성 체크에 꼭 필요한 사이트임.
     * 아직 이메일 클라이언트의 CSS 지원이 웹브라우저에 비해 많이 부족한 상황. 애니메이션 관련 속성이나 레이아웃 관련 속성은 거의 지원되지 않고 있어서 이메일 디자인의 한계로 작용하고 있음.
     * 정기적으로 업데이트 소식을 알려주고 있어서, 이메일 개발자들이 최신 정보를 파악하는데 도움이 될 듯함. 다만 업데이트 주기가 너무 짧아서 따라가기 벅찰 수도 있을 듯.
     * 비슷한 사이트로 EmailOnAcid, Litmus 등이 있는데, 이 사이트들은 각 클라이언트에서 렌더링 되는 모습을 미리보기 스크린샷으로 제공한다는 차이가 있음. Caniemail과 함께 활용하면 시너지 효과를 볼 수 있을 듯함.

        Hacker News 의견

   요약해보자면:
     * Dark mode 이메일 지원은 프론트엔드 개발자에게 가장 좌절감을 주는 것 중 하나임. light mode 디자인만 구현하고 이메일 클라이언트의 dark mode 자동 색상 반전에 잘 보일 색상을 선택해야 함.
     * mjml(https://mjml.io/)을 사용하여 이메일 템플릿을 빌드하면 호환성이 좋아짐.
     * Litmus(https://litmus.com)나 testi.at으로 다양한 앱과 기기에서의 이메일 템플릿 모양을 테스트해볼 수 있음.
     * Can I email? 사이트에는 유명인에게 이메일을 보내려는 사람들이 많이 방문한다는 재미있는 일화가 있음.
     * HTML은 문서가 아닌 애플리케이션에 가까워서 메일 클라이언트에서 지원이 제한적임. 공식 HTML 서브셋 문서 표준이 있으면 좋겠음.
     * 일부는 HTML이 이메일에 도입된 것이 최악이며, 평문 콘텐츠가 최고라고 생각함.
     * jsx-email은 caniemail 데이터셋을 사용하는 내장 이메일 클라이언트 호환성 검사 CLI가 있음.
     * Gmail과 Outlook은 호환성 순위가 최하위권임.
     * 순위가 낮을수록 좋음. 일부는 ""사전 합의 없는 첨부 파일이 있는 이메일은 자동 삭제"" 정책을 가지고 있음.
"
"https://news.hada.io/topic?id=14719","Can I Webview - 웹뷰를 위한 Can I Use","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Can I Webview - 웹뷰를 위한 Can I Use

     * 각 웹뷰에서 특정 API를 사용가능한지 알려주는 사이트
          + WKWebView(애플), Webview2(Microsoft), Android Webview
     * Web API
          + Control API permissions, Autofil, Cookies, Manage web storage and cookies
     * WebView API
          + Localhost, Inject custom JS scripts, Requests/responses sharing and proxy between Native and WebView
"
"https://news.hada.io/topic?id=14748","Sioyek, 교과서와 연구 논문에 특화된 PDF 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Sioyek, 교과서와 연구 논문에 특화된 PDF 뷰어
"
"https://news.hada.io/topic?id=14709","LPCAMM2 - 노트북용 모듈식, 수리 및 업그레이드 가능한 메모리 표준 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               LPCAMM2 - 노트북용 모듈식, 수리 및 업그레이드 가능한 메모리 표준

LPCAMM2의 등장과 의의

     * LPCAMM2는 노트북용 완전히 모듈식, 수리 가능하며 업그레이드 가능한 메모리 표준
     * 최신 LPDDR 칩을 사용하여 최대 속도와 효율성을 제공함
     * 미래의 메모리 요구사항에 대한 추측에 기반하여 과도하게 지불하거나 부족한 사양을 정하는 대신, 필요에 따라 RAM을 설치할 수 있게 됨

LPDDR의 특징과 제조사들이 직접 납땜하는 이유

     * LPDDR은 휴대전화나 태블릿 같은 모바일 기기를 위해 개발된 저전력 RAM
     * 기존 DDR RAM은 전력 소비가 주요 고려사항이 아닌 비디오 편집이나 게이밍 같은 성능 중심 애플리케이션에서 뛰어남
     * LPDDR은 배터리 수명 측면에서 이점이 있음
     * LPDDR의 단점은 프로세서 근처의 메인보드에 납땜해야 하므로 수리와 업그레이드가 불가능
     * LPDDR은 DDR보다 낮은 전압에서 동작하여 전력 효율성이 좋지만, 메모리와 프로세서 간 신호 무결성 확보가 어려워 더 엄격한 공차와 더 짧은 트레이스 거리가 필요함
     * 노트북 제조사와 소비자 모두 수리성과 업그레이드 가능성을 위해 기존 SO-DIMM RAM을 사용하거나, 더 긴 배터리 수명을 위해 LPDDR 칩을 납땜해야 하는 딜레마에 직면해 왔음

LPCAMM2의 등장

     * LPCAMM2는 컴팩트한 보드에 LPDDR 칩을 장착하여 노트북 CPU와 매우 가까이 나사로 고정하는 방식
     * LPDDR의 효율성과 속도를 얇고 가벼우며 업그레이드 가능한 디자인과 결합하고, CPU와 매우 가깝게 만드는 인터페이스 기술을 적용
     * 듀얼 채널 성능이 이미 내장되어 있어 한 개의 LPCAMM2 모듈로 한 쌍의 기존 SO-DIMM을 대체할 수 있으며, 훨씬 작은 면적과 더 나은 열 특성을 제공
     * Lenovo의 ThinkPad P1 (Gen 7)이 LPCAMM2 기술을 사용하는 최초의 노트북

LPCAMM2 개발의 주역들

     * LPCAMM2는 Micron과 Lenovo에서 처음 출시되었지만 여러 해에 걸쳐 여러 기술 기업들이 협력하여 존재하게 된 기술
     * 첫 번째 버전인 CAMM은 Dell 내부 프로젝트였으며, Dell Precision 7000 시리즈 노트북에 DDR5 지원 CAMM 모듈이 처음 장착됨
     * Dell은 초기 R&D를 통해 이 기술을 현실화한 후 이를 독점하지 않고 공개하여 표준화를 추진
     * JEDEC 표준화 기구의 승인을 받아 불과 몇 년 만에 LPCAMM2가 등장하여 차세대 메모리 표준이 될 준비가 되었음
     * Dell은 기술계에 꼭 필요한 것을 만들고 독점하지 않고 공유한 영웅
     * Micron과 Lenovo는 LPCAMM2를 처음 시장에 내놓았으며 Samsung, ADATA 등도 지지하고 있음
     * 업계 전체가 같은 방향을 보고 이런 표준을 지지함으로써 세상은 더 수리 가능한 곳이 됨

수리 가능한 미래를 위한 설계

     * LPCAMM2의 출현은 수리 가능성이 최신 기술과 얇고 가벼운 디바이스에서는 공존할 수 없다는 주장에 반하는 결과임
     * OEM들이 수리성을 염두에 두고 혁신할 의지만 있다면 더 나은 제품을 만들 수 있음을 보여줌
     * LPCAMM2는 지속가능성을 고려한 설계로 기술을 발전시킬 수 있는 우리의 능력을 보여줌
     * 계획적 진부화에 맞서는 싸움에서 중요한 한 걸음 나아간 것
     * 납땜된 칩에서 모듈식 업그레이드 가능한 메모리 솔루션을 위해 노력함으로써 제조사들은 시간이 지나도 견딜 수 있는 디바이스를 만들겠다는 의지를 보여주고 있음
     * 학교와 기업에서 디바이스 수명을 늘리고, 구매 시점에서 소비자의 불안을 줄이며, 폐기될 뻔한 디바이스를 쉽게 수리할 수 있게 하는 등 얻을 것이 많음
     * 더 많은 기업들이 이 표준을 지지함에 따라 더 많은 노트북이 오래 쓸 수 있도록 만들어지고, 수리와 업그레이드가 가능할 뿐 아니라 권장되는 미래를 기대할 수 있음
     * 이 기술이 실질적인 변화를 만들 잠재력은 명백하며 우리 눈앞에 있음

GN⁺의 의견

     * LPCAMM2는 노트북 시장에 획기적인 변화를 가져올 수 있는 기술로 보임. 그동안 배터리 수명 때문에 어쩔 수 없이 RAM을 납땜해야 했던 상황에서 벗어나, 사용자가 필요에 따라 RAM을 교체하거나 업그레이드할 수 있게 됨. 이는 노트북의 수명을 늘리고 전자폐기물을 줄이는데 큰 도움이 될 것임.
     * 다만 아직 LPCAMM2를 지원하는 노트북 모델이 많지 않아 당장은 선택의 폭이 좁음. 앞으로 얼마나 많은 제조사들이 이 표준을 채택할지가 관건일 것 같음. 제조사들이 자발적으로 참여하는 것도 중요하지만, 이런 개방형 표준을 장려하는 정책적 지원도 필요할 것으로 보임.
     * 기술 발전과 지속가능성이 양립할 수 있음을 보여준 것 같아 의미가 큼. 성능 향상에만 몰두하다 보면 수리성 같은 것은 뒷전이 되기 쉬운데, 그래도 포기하지 않고 해법을 찾으려 노력한 덕분에 모두가 윈윈하는 결과를 얻은 것 같음. 앞으로도 이런 사례가 많이 나왔으면 좋겠음.
     * SO-DIMM에 비해 한 모듈로 듀얼채널 구성이 가능한 것도 장점으로 보임. 공간 활용 측면에서도 유리할 뿐더러, 부품점에서 RAM을 하나만 구매해도 성능 향상을 기대할 수 있어 편리할 것 같음. LPCAMM2 모듈의 가격이 SO-DIMM 대비 어느 정도 수준이 될지 궁금함.
     * 이런 개방형 표준이 확산되려면 애플 같은 거대 기업들의 참여가 필수적일 것 같음. 아무래도 자체 표준을 밀고 가려는 유인이 클텐데, 정말 사용자를 위한다는 철학으로 접근한다면 동참해주길 기대해 봄. 이런 변화들이 쌓여 전자기기를 둘러싼 환경이 보다 지속가능한 방향으로 진화했으면 함.

        Hacker News 의견

     * RAM을 기판에 납땜하는 이유에는 이윤 동기 외에도 기술적인 이유가 있음. 이를 인식하고 해결책을 모색 중인 것이 긍정적임.
     * CAMM(Compression Attached Memory Module)은 기존 BGA 방식과 비슷한 공간을 차지하며, 앞으로 공간 효율성이 더 개선될 것으로 기대됨.
     * iFixit는 Micron, Lenovo와 사업 관계가 있으며, 수리 가능한 제품을 선호한다는 사실을 밝힘.
     * Dell은 CAMM을 최초로 노트북에 도입했으며, 이제 더 널리 채택되고 표준화되고 있음.
     * 제조사의 추가 비용이 적고, 기존의 RAM 가격 책정 방식을 대체할 수 있기를 기대함.
     * Apple은 이 표준을 채택하지 않을 것으로 예상됨. 예전처럼 MacBook의 RAM을 업그레이드할 수 있기를 바람.
     * BGA 소켓은 이미 LPDDR과 CPU/SoC 등에 존재하지만 수량이 적어 비쌈. 수량이 늘어나면 CPU용 LGA 소켓처럼 가격이 크게 내려갈 것임.
     * Framework 노트북에서 이 기술을 보길 기대함.
     * ThinkPad P1 (Gen 7)에 탑재될 예정이나, 가격이 비싸고 전력 소모가 큼. 저렴한 모델로 확대되려면 시간이 걸릴 것임.
     * Dell의 경우 64GB 업그레이드 비용이 $1,200로 비쌈.
     * CAMM 커넥터가 Raspberry Pi 컴퓨트 모듈 등에서 SO-DIMM을 대체할 수 있을지 궁금함.
     * 나사 수용부 고장으로 접촉 불량이 생길 가능성이 있음. SO-DIMM 슬롯에서는 발생하기 어려운 문제임.
"
"https://news.hada.io/topic?id=14640","리튬 불포함 소듐(Sodium) 배터리, 실험실을 나와서 미국에서 생산 돌입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               리튬 불포함 소듐(Sodium) 배터리, 실험실을 나와서 미국에서 생산 돌입

     * 소듐 이온 배터리 선구자인 Natron Energy는 2년 전 특수 제조된 소듐 배터리를 대량 생산하기 위해 준비하고 있었음
     * 2023년 시작 계획에서 약간 미끄러졌지만 대량 배터리 생산으로는 크게 뒤처지지 않았음
     * 이번 주 리튬 없는 급속 충전, 장수명 소듐 배터리 생산을 공식적으로 시작하여 에너지 저장 분야에서 흥미로운 새로운 대안을 시장에 내놓음
     * 소듐(Sodium, 영어) 또는 나트륨(Natrium, 독일어) 으로 기호는 Na, 원자번호 11, 한국에서는 대한화학회가 정한 학술어로서 소듐을 우선 사용하되 나트륨도 함께 사용

  리튬 대비 소듐 이온 배터리의 장점

     * 지구상에서 리튬보다 500~1000배 풍부한 소듐
     * 소듐 확보를 위해 리튬과 같은 유형의 지구를 훼손하는 추출이 필요하지 않음
     * Natron의 소듐 이온 배터리는 알루미늄, 철, 망간 등 풍부하게 이용 가능한 상용 소재로만 제작됨
     * Natron의 소듐 이온 화학 물질은 지정학적 혼란이 없는 신뢰할 수 있는 미국 기반의 국내 공급망을 통해 조달 가능함. 리튬 이온의 일반적인 물질인 코발트와 니켈에 대해서는 같은 말을 할 수 없음

  소듐 이온 기술이 주목받는 이유

     * 에너지 밀도는 리튬 이온보다 뒤처지지만 더 빠른 사이클링, 더 긴 수명, 더 안전하고 불연성인 최종 사용 등의 장점으로 인해 소듐 이온은 특히 데이터 센터 및 EV 충전기 백업 저장과 같은 고정 용도로 매력적인 대안이 됨
     * Natron은 2013년에 설립되어 이 새로운 소듐 이온 연구 및 혁신 물결의 선구자 중 하나였음
     * 대부분의 소듐 이온 설계는 실험실에 머물러 있지만 Natron은 전 세계적으로 최초의 주요 생산 운영 중 하나로 전환했음

  Natron의 소듐 이온 배터리 생산 및 적용 계획

     * 연간 600메가와트까지 생산량을 늘릴 계획이며, 미래의 기가와트 규모 시설의 모델로 사용될 예정
     * AI 데이터 저장 센터가 초기 타겟이며, 6월에 첫 배송을 시작할 계획
     * 향후 EV 급속 충전 및 통신 등 다른 산업 전력 시장으로 초점을 확대할 계획

GN⁺의 의견

     * 리튬 이온 배터리에 비해 에너지 밀도는 낮지만, 더 빠른 충전/방전 속도와 긴 수명으로 UPS나 백업 전원용으로는 매력적인 대안이 될 것으로 보임
     * 현재 CATL 등 중국 업체들이 소듐 이온 기술 개발을 주도하고 있는데, 미국에서도 이렇게 상용화에 나선 것은 고무적임
     * 다만 에너지 밀도 문제로 당분간은 고정형 에너지 저장에 국한될 것으로 보이며, EV 등 이동형 적용을 위해서는 기술적 진전이 더 필요해 보임
     * 리튬 채굴과 관련된 지정학적 리스크와 환경 문제를 피할 수 있다는 점, 미국 내 공급망 확보가 가능하다는 점 등은 강점이 될 것으로 보임
     * 테슬라 등 주요 EV 업체와 배터리 업체들이 아직 리튬에 올인하고 있어 시장 확대에는 다소 시간이 걸릴 수 있겠으나, 소듐 이온도 하나의 유력한 대안으로 자리잡을 것으로 전망됨

   최근에 리튬 관련 보드게임(Salton Sea) 때문에 리튬에 대해서 좀 찾아봤었는데, 지구상에서 리튬이 가장 많은 곳이 바다라고 하더군요. 소듐도 마찬가지겠네요.
   소듐 이온 배터리도 흥미롭군요.

        Hacker News 의견

     * 배터리 화학 분야에서 캄브리아기 대폭발이 일어나고 있음. From Energy는 리튬이온보다 훨씬 저렴한 Iron Air 배터리를, North Harbour Clean Energy는 수명이 길고 장기간 저장 가능한 Vanadium Flow 배터리 생산을 계획 중.
     * 나트륨이온 배터리는 에너지 밀도는 리튬이온보다 낮지만, 모바일 기기와 전기차에 사용 가능함.
     * 초기 EV 사용자의 경험상 주행거리가 짧아도 일상 생활에는 충분했음. 나트륨이온으로도 100~200마일 정도는 가능할 것이며, 비용이 저렴하고 교체 없이 오래 쓸 수 있다면 많은 사람들에게 충분히 매력적일 듯.
     * 나트륨은 흔하고 저렴해서 그리드 스케일 배터리 저장에 적합함. 모든 용도에 리튬이온만큼의 용량이 필요한 건 아니란 걸 알게 됨.
     * 매년 리튬이온보다 2~5배 효율적인 신기술이 발표되지만 실제 생산까지 가는 경우는 드물었는데, 이번엔 기대가 큼.
     * Natron의 창업자 Colin은 10년 전 스탠포드 박사 연구를 바탕으로 꾸준히 노력해 생산까지 이뤄냄. 매우 드문 성과로 박수 받을 만함.
     * Natron의 배터리 에너지 밀도는 70Wh/kg 정도로 매우 낮은 편이지만, 고정형 용도에는 적합함. CATL의 나트륨이온 배터리는 이미 160Wh/kg 이상으로 전기차 용도로도 개발 중.
     * 미국 기반 공급망을 통해 지정학적 혼란 없이 조달 가능한 점이 장점. 다만 미국 독점으로 가는 건 세계적으로 바람직하지 않음.
     * 소금물과 흙으로 만드는 그리드 스케일 배터리도 에너지 밀도는 낮지만 비용이 저렴하고 휴대성이 필요 없어 유망함.
     * 나트륨은 매장량이 풍부하고 채굴이 필요 없어 가격 경쟁력 있는 혁신이 될 수 있음.
     * 중국에 대한 의존도를 제로화할 수 있다는 점도 상당한 장점임.
"
"https://news.hada.io/topic?id=14750","짐 사이먼스 사망","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               짐 사이먼스 사망

제임스 해리스 시몬스 사망

     * 사이먼스 재단의 공동 설립자이자 명예 의장인 제임스 해리스 시몬스가 2024년 5월 10일 뉴욕에서 86세의 나이로 사망함
     * 그는 수상 경력이 있는 수학자, 정량적 투자의 전설, 그리고 영감을 주는 관대한 자선가였음
     * 아내인 메릴린 시몬스와 함께 수학과 과학 연구 및 교육을 지원하는 수백 개의 자선 단체에 수십억 달러를 기부함
     * 1994년에 사이먼스 재단을 설립하여 전 세계의 과학자와 단체가 수학과 기초 과학의 연구 영역을 발전시키는 것을 지원함

사이먼스 재단에서의 활동

     * 생의 마지막까지 사이먼스 재단의 업무에 적극적으로 참여했으며, 수학과 기초 과학에 대한 그의 호기심과 평생의 열정은 주변 사람들에게 영감을 주었음
     * 특히 중요하지만 다른 곳에서는 자금을 받기 어려운 프로젝트를 후원하여 미국에서 수학과 기초 과학이 받는 지원 수준에 의미 있는 차이를 만들기로 결심함
     * 30년의 역사 동안 사이먼스 재단의 활동은 자폐증, 우주의 기원, 세포 생물학 및 전산 과학에 대한 이해에 획기적인 발전을 가져옴
     * 그와 메릴린의 기부는 뉴욕시와 전 세계의 학교와 대학에서 차세대 수학자와 과학자들을 계속 지원하고 있음

수학자, 투자자, 자선가로서의 인생

     * 그는 자신의 직업 생활을 수학자, 투자자, 자선가의 세 단계로 거쳐 왔다고 자주 말했음
     * 뉴욕 스토니브룩 대학교 수학과 학과장을 역임했으며, 당시 그의 수학적 돌파구는 현재 끈 이론, 위상수학, 응집물질물리학 등의 분야에 도움이 되고 있음
     * 1978년에 르네상스 테크놀로지스를 설립했는데, 이는 정량적 거래의 선구자이자 역사상 가장 수익성 높은 투자 회사 중 하나가 된 헤지펀드임
     * 이후 사이먼스 재단, 사이먼스 국제 재단, 미국 수학 등 다른 자선 활동을 통해 세상에 변화를 주는 데 주력함

시몬스 재단 관계자의 애도

     * 데이비드 스퍼겔 사이먼스 재단 대표는 ""짐은 수학에서 혁신적인 업적을 남기고 세계 최고의 투자 회사를 만든 탁월한 리더였다""며 ""메릴린 시몬스 현 이사장과 함께 수학, 기초 과학, 자폐증 이해 분야에서 이미 엄청난 영향을 미친 단체를 만들었다. 영구 재단인 사이먼스 재단은 그들의 자선 사업 비전을 미래로 이어갈 것""이라고 말함

GN⁺의 의견

     * 제임스 시몬스는 수학계와 투자계에서 전설적인 인물로 남을 것임. 특히 정량적 투자 분야에서 르네상스 테크놀로지스를 통해 이룬 업적은 역사에 길이 남을 만함
     * 수학과 기초과학 분야에 대한 그의 열정과 후원이 없었다면 현재의 많은 연구 성과들이 없었을 것임. 돈만 있는 것이 아니라 어떤 분야에 투자해야 하는지에 대한 혜안이 돋보임
     * 단순히 많은 돈을 기부한 것을 넘어, 사이먼스 재단을 통해 체계적이고 장기적인 연구 지원 시스템을 구축한 것이 가장 의미 있는 업적으로 보임
     * 다만 한 개인이 막대한 부를 축적하고 이를 자선에 사용하는 것이 가진 사회적 함의에 대해서는 좀 더 깊은 고민이 필요할 듯함. 부의 편중과 불평등 문제 해결을 위한 제도적 노력도 필요할 것으로 보임
     * 그의 나이를 고려할 때 사망 소식 자체는 충격적이지 않지만, 그가 남긴 수학적, 경제적 업적과 뜻을 같이 하는 후학들에 의해 그의 정신이 이어지기를 기대함

        Hacker News 의견

     * Jim Simons의 수학 연구에 대한 막대한 기부로 인해 수학계에 미치는 영향이 클 것으로 예상됨. 많은 수학자들이 그의 지원으로 호화로운 콘퍼런스에 참여하고 연구 센터를 이용할 수 있었음.
     * Jim Simons는 아름다움을 추구하는 것을 강조했으며, 무언가를 제대로 하는 것 자체가 아름답다고 여겼음. 채권 트레이딩 회사를 만드는 것도 올바른 사람들과 함께 문제에 접근하고 제대로 수행하는 과정이 아름답다고 보았음.
     * Jim Simons는 존경받는 수학자로서 금융으로 방향을 바꾼 흥미로운 인물. 그의 이야기는 퀀트 금융에도 멋진 수학과 CS가 사용된다는 것을 깨닫게 해줌.
     * Chern-Simons 이론은 1960년대 중반 위상수학에서 획기적인 결과. 또한 그는 강한 EMH를 실증적으로 반박했으며, SUNY Stoneybrook을 세계 최고의 위상수학/미분기하 연구소로 만드는데 기여함. 기하학자, 위상수학자, 암호학자, 전쟁 반대론자, 트레이더, 교사 등 다양한 면모를 보임.
     * Simons Foundation은 신경과학 분야에서도 엄청난 영향력을 발휘하고 있음. 내일의 문제를 해결하기 위한 근본적인 발전을 추진하는 선구적인 자금원으로 널리 알려져 있음.
     * Jim Simons는 버클리를 비롯한 전 세계 수학 연구를 지원하고 확장하는데 기여함. 위상수학, 암호학, 위상양자장론 등 기초 연구를 수행했으며, 수학 교육의 질 향상과 수학 교사 양성에도 힘썼음.
"
"https://news.hada.io/topic?id=14647","JSON Path 사용법ath 사용법

     * JSON Path는 JSON 문서에서 데이터를 추출하는데 사용할 수 있는 쿼리 언어
     * OpenAPI가 JSON 또는 YAML 문서이므로, JSON Path를 사용하여 OpenAPI에서 여러가지 작업을 할 수 있음
          + OpenAPI Overlay를 사용하여 문서에 추가 내용, 코드 샘플 등을 패치
          + Spectral에서 사용하여 고급 규칙 작성 가능
          + AWS Step Functions에서도 사용 가능
     * JSON Path 작동 방식
          + JSON 데이터 구조를 탐색하고 필터링하며 특정 부분을 추출
          + XPath와 유사한 문법 (XML에서 사용)
          + 구문 예제: $.store.book[?@.price < 10].title
     * OpenAPI에서의 활용
          + jpp 명령을 사용하여 OpenAPI 문서를 쿼리하고 특정 부분 추출 가능
          + Overlay를 사용하여 OpenAPI 문서를 수정하거나 정보를 추가하는데 사용
               o 설명 업데이트, 연락처 정보 추가 등
               o 서버 목록에서 개발/스테이징 서버 제거하고 프로덕션만 남기기
               o 새로운 샌드박스 서버 정보 추가 등
     * JSON Path에 대해 더 배우기
          + 2024년 IETF에서 표준으로 제정 (RFC 9535)
          + 이전에는 여러 변종이 존재했으나 표준화로 통일되는 추세
          + RFC 9535 문법을 따르는 것이 좋음

GN⁺의 의견

     * JSON Path는 점점 더 많은 곳에서 사용되고 있어 알아두면 유용한 기술임. 특히 OpenAPI를 다루는 개발자나 기술 작가에게 필수적인 스킬이 될 것으로 보임.
     * 아직 JSON Path의 문법이 통일되지 않아서 약간의 혼란이 있지만, RFC 9535를 기준으로 삼는 것이 바람직해 보임. 앞으로 관련 도구들도 이 표준을 따를 것으로 기대됨.
     * OpenAPI Overlay나 Spectral 등 개발 과정에서 활용할 수 있는 분야가 다양해 보임. 단순히 데이터 추출 뿐 아니라 문서 보완, 검증, 정제 등에도 활용 가능성이 높아 보임.
     * 다만 문법이 약간 복잡하고 JSON/YAML에 익숙해야 하므로 진입 장벽이 있음. 간단한 방식으로 시작해서 점진적으로 고급 기능을 배워나가는 것이 좋겠음.
     * jq나 yq 같은 커맨드라인 도구를 활용하면 연습하기 좋을 것 같음. Bump.sh 같은 통합 도구를 사용하는 것도 생산성에 도움이 될 것임.

   감사합니다

        Hacker News 의견

     * JSONata(https://jsonata.org)는 JSON 조작을 위한 최고의 도구 중 하나로, JsonPath 문법을 사용하며 노드 선택 외에도 산술, 비교, 정렬, 그룹화, 날짜 조작, 집계 등의 도우미 함수를 제공함. JS로 작성되어 Node나 브라우저에서 사용 가능하며, Python 래퍼(https://pypi.org/project/pyjsonata/)도 있음.
     * json_profile(https://github.com/tylerneylon/json_profile)은 새로운 JSON 파일의 주요 스키마와 데이터 위치를 빠르게 이해하는 데 도움을 주는 도구로, 리스트의 피어 요소가 동일한 구조를 가질 때 유용함. 파일 구조를 학습하고, 가장 무거운 집계 경로를 출력하며, 경로별 크기 힌트를 제공함.
     * espath(https://github.com/tomhodgins/espath)는 XPath와 CSS 선택자를 사용하여 JSON의 데이터를 필터링하고 찾는 라이브러리임. JavaScript 객체를 XML DOM으로 변환하고 쿼리를 실행한 후 다시 객체로 변환하거나, 원본 객체 레지스터를 유지하고 원본 객체를 검색하는 방식으로 동작함.
     * JSON이 나타내는 데이터 구조에 대한 일반적인 이름이 있는지에 대한 질문과 JSON, YAML, Python 딕셔너리, TOML 등 유사한 구조에서 작동하는 경로 언어의 필요성에 대한 언급이 있음.
     * SQLite는 json_extract()와 같은 함수에서 사용되는 JSON Path의 하위 집합을 코어 데이터베이스에 포함하고 있음. 관련 상세 노트: https://til.simonwillison.net/sqlite/json-extract-path
     * Insomnia와 Bruno는 JSON Path를 사용하여 응답을 필터링하는 기능이 있음.
     * PostgreSQL의 jsonpath 지원을 사용하여 DB 행에 대한 사용자 정의 필터링 규칙을 만드는 데 사용했음.
     * XPATH 인젝션이 널리 사용되었던 것처럼 JSON 경로 인젝션 공격이 불가피할 것으로 예상됨. (https://owasp.org/www-community/attacks/XPATH_Injection 참조)
     * jq와 같은 유사한 도구에 대한 언급이 없는 것이 의아함.
     * 너무 많은 JSON 경로 구문이 있어서 아쉬움. jq, JSON path, AWS CLI, MySQL 등 각각 다른 구문을 사용하므로 근육 기억을 얻기 어려움.
"
"https://news.hada.io/topic?id=14706","Go 1.22 버전의 보안 난수 생성 기능 강화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Go 1.22 버전의 보안 난수 생성 기능 강화

     * Go 1.22에서는 기존의 math/rand 패키지와 새로 도입된 math/rand/v2 패키지에서 암호학적으로 안전한 난수 생성기를 사용하도록 변경됨. 이를 통해 더 나은 무작위성을 제공하고, 개발자가 실수로 math/rand를 crypto/rand 대신 사용할 때 발생할 수 있는 피해를 크게 줄일 수 있게 됨.

통계적 무작위성과 암호학적 무작위성의 차이

     * 통계적 무작위성은 시뮬레이션, 샘플링, 수치 분석, 비암호화 무작위 알고리즘, 무작위 테스트, 입력 셔플링, 무작위 지수 백오프 등에 적합함.
     * 매우 기본적이고 계산하기 쉬운 수학 공식으로도 이런 용도에는 충분히 잘 동작함. 하지만 사용된 알고리즘을 아는 관찰자는 일정 수의 값을 보고 나면 향후 시퀀스를 예측할 수 있음.
     * 암호학적 무작위성은 어떤 수의 이전에 생성된 값을 관찰했더라도 실제로는 완전히 예측 불가능해야 함.
     * 안전한 암호화 프로토콜, 비밀 키, 현대 상거래, 온라인 프라이버시 등이 암호학적 무작위성에 크게 의존하고 있음.

Go 1의 math/rand 생성기

     * Linear-feedback shift register(LFSR) 방식을 사용함.
     * 내부 상태가 607개 uint64로 구성된 벡터로 완전히 노출되는 문제가 있음.
     * 생성기에서 607개 값을 읽으면 모든 상태가 노출되어 이후 값을 예측할 수 있음.

math/rand/v2의 PCG 생성기

     * Melissa O'Neill의 PCG 알고리즘 사용. 128비트 LCG에 후처리를 적용한 것임.
     * 전체 상태가 128비트 숫자 하나로, 업데이트는 128비트 곱셈과 덧셈으로 이루어짐.
     * Go에서는 O'Neill의 제안에 따라, XOR 기반 대신 곱셈 기반의 scramble 함수를 사용해 비트를 더 적극적으로 섞음.
     * Go 1 생성기보다 계산량이 많지만, 상태 저장에 필요한 메모리가 훨씬 적고, 초기 상태 값에 덜 민감하며, 다른 생성기가 통과하지 못하는 통계적 테스트도 통과함.
     * 하지만 PCG도 여전히 예측 불가능하지는 않음.

암호학적 무작위성

     * 궁극적으로는 운영체제가 물리적 장치의 잡음으로부터 실제 무작위성을 수집해야 함.
     * 충분한 무작위성(256비트 이상)을 수집하면, 암호학적 해시나 암호화 알고리즘으로 늘려서 임의의 길이의 난수열을 만들 수 있음.
     * Go의 crypto/rand 패키지는 이런 운영체제 인터페이스의 차이를 추상화하고 rand.Read라는 동일한 인터페이스를 제공함.

ChaCha8Rand 생성기

     * DJB의 ChaCha 스트림 암호를 변형해서 만든 새로운 생성기.
     * 8라운드 버전인 ChaCha8을 사용함. ChaCha20보다 2.5배 빠르면서도 안전함.
     * 32바이트 시드를 ChaCha8 키로 사용. 매 16블록마다 생성된 블록의 뒤 32바이트를 다음 16블록의 키로 사용해 전방향 비밀성 제공.
     * math/rand/v2의 rand.Float64, rand.N 등은 항상 이 생성기 사용.
     * math/rand도 이 생성기 사용. 단, rand.Seed가 호출되면 Go 1 생성기를 사용.
     * 런타임도 새 맵의 해시 시드를 고를 때 ChaCha8Rand 사용.

보안 실수 해결

     * Go 1.22는 math/rand를 강화함으로써 코드 변경 없이도 프로그램을 더 안전하게 만듦.
     * 예를 들어 math/rand의 Read를 잘못 사용해서 키 생성 등에 쓴 경우, Go 1.20에서는 심각한 보안 문제지만 Go 1.22에서는 그냥 실수에 불과함.
     * UUID 생성이나 프론트엔드 서버의 부하 분산 등 ""암호""로 보이지 않는 용도에서도 ChaCha8Rand를 쓰면 Go 1 생성기보다 훨씬 강건해짐.

성능

     * ChaCha8Rand는 Go 1 생성기나 PCG와 비슷한 수준의 성능을 보임.
     * 32비트 코드에서는 128비트 곱셈이 필요한 PCG보다 ChaCha8Rand가 더 빠름.
     * 64비트 나눗셈을 피하는 math/rand/v2의 알고리즘 덕분에 N(1000) 연산에서는 Go 1 생성기보다 ChaCha8Rand나 PCG가 더 빠른 경우도 있음.
     * 전반적으로 ChaCha8Rand는 Go 1 생성기보다 느리지만 2배 이상 느린 경우는 없고, 일반적인 서버에서는 차이가 3ns를 넘지 않음.

GN⁺의 의견

     * Go 1.22의 ChaCha8Rand 적용은 보안성을 크게 높이면서도 성능 저하는 최소화한, 언어 차원의 모범적인 개선 사례라 할 만함. 개발자들이 자주 저지르는 실수를 언어 차원에서 원천 봉쇄한 것이 인상적임.
     * 본문에서도 언급했듯이 이런 실수는 Go에만 국한된 것이 아니라 다른 언어에서도 흔히 발견됨. 개발자의 실수에 시스템 보안이 좌우돼서는 안되므로, 다른 언어들도 Go처럼 ""수학적"" 난수 생성에도 암호학적으로 강력한 의사난수 생성기를 쓰는 방향으로 나아가야 할 것임.
     * 다만 ChaCha8Rand는 crypto_box나 xchacha20poly1305 같은 암호화 프리미티브에 쓰기에는 부적절함. 이런 용도라면 여전히 crypto/rand를 직접 사용해야 함.
     * Go 런타임이 맵 해시 시드 선택에도 ChaCha8Rand를 쓰도록 바꾼 것은 조금 의외였음. 해시 시드로 암호학적 난수가 반드시 필요한지는 분명치 않지만, 골치 아픈 공격 가능성을 원천 차단하려는 개발팀의 보안 의식이 돋보임.
     * 언어 차원의 기본 제공 패키지인 math/rand의 품질이 높아진 만큼, 앞으로는 응용에서 math/rand를 직접 쓸 일도 많아질 것 같음. 그간 math/rand의 예측 가능성 때문에 따로 난수 생성 라이브러리를 썼던 프로젝트라면 이번 변경의 혜택을 볼 수 있을 것임.

        Hacker News 의견

   요약해보면 다음과 같음:
     * Go 1.20에서 math/rand 패키지의 Read 함수가 deprecated 되면서, 이를 crypto/rand 대신 잘못 사용한 사례들이 발견됨. 이는 보안에 취약한 결정론적 난수 생성기를 사용하게 되는 실수로 이어짐.
     * Go의 기본 난수 생성기를 CSPRNG(암호학적으로 안전한 의사 난수 생성기)로 바꾸는 것이 보안을 위해 더 좋은 접근임. 명시적으로 PRNG가 필요한 경우에만 선택하도록 하는 것이 바람직함.
     * gosec이나 golangci-lint 같은 정적 분석 도구는 math/rand 사용에 대해 경고를 줌.
     * math/rand/v2 패키지는 ChaCha8 암호를 사용하고 시스템 엔트로피로 시드되어 ""안전한"" 인상을 주지만, 여전히 보안에 민감한 작업에는 부적합함. 이는 crypto/rand를 사용해야 함.
     * Go 1의 math/rand는 정확히는 additive lagged Fibonacci generator로 볼 수 있음.
     * 새 math/rand는 최악의 경우에도 기존 비보안 난수 생성기의 절반 정도의 속도를 보이며, 대부분의 벤치마크에서는 거의 차이가 없었음. Go는 표준 라이브러리에서 안전성과 성능 사이의 적절한 균형을 잡고 있음.
     * Java의 java.util.Random 같은 실수를 방지하는 개발자 친화적인 접근으로 평가됨.
     * ChaCha8을 쓰는 이유와 AES-GCM 등 하드웨어 가속을 지원하는 블록 암호를 쓰지 않는 이유에 대한 궁금증이 제기됨.
"
"https://news.hada.io/topic?id=14705","기업들이 GPU에 대한 저렴한 접근을 요구하면서 대체 클라우드가 급성장중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                기업들이 GPU에 대한 저렴한 접근을 요구하면서 대체 클라우드가 급성장중

대체 클라우드 플랫폼의 성장

     * 대체 클라우드 플랫폼에 대한 수요가 그 어느 때보다 크게 증가하고 있음
     * CoreWeave는 최근 10억 1천만 달러의 신규 투자를 유치하여 기업 가치가 190억 달러에 이르렀음
     * Lambda Labs도 5억 달러 규모의 특수목적 금융을 확보했으며, Voltage Park는 GPU 기반 데이터 센터에 5억 달러를 투자하고 있음
     * Together AI는 세일즈포스가 주도하는 1억 6백만 달러 규모의 투자를 받았음

생성형 AI의 수요 증가

     * 생성형 AI 붐이 지속되면서 대규모로 생성형 AI 모델을 실행하고 학습시키기 위한 하드웨어 수요도 증가하고 있음
     * GPU는 생성 모델을 구성하는 선형 대수 방정식을 병렬로 처리할 수 있는 수천 개의 코어를 포함하고 있어 모델 학습, 미세 조정 및 실행에 이상적인 선택임
     * 그러나 GPU 설치 비용이 높아 대부분의 개발자와 조직은 클라우드로 눈을 돌리고 있음

대체 클라우드 플랫폼의 장점

     * AWS, Google Cloud, Microsoft Azure 등 기존 클라우드 컴퓨팅 업체들은 생성형 AI 워크로드에 최적화된 GPU와 특수 하드웨어 인스턴스를 제공하고 있음
     * 그러나 일부 모델과 프로젝트의 경우 대체 클라우드가 더 저렴하고 가용성이 좋을 수 있음
     * CoreWeave에서 Nvidia A100 40GB를 임대하는 비용은 시간당 $2.46이며, 이는 월 $1,771에 해당함. Azure에서는 같은 GPU가 시간당 $3.40, 월 $2,448이며 Google Cloud에서는 시간당 $3.67, 월 $2,642임

대체 클라우드 플랫폼의 도전과제

     * 대체 클라우드 공급업체들이 GPU를 대량으로 계속 온라인으로 제공하고 경쟁력 있는 가격으로 제공할 수 있는지가 관건이 될 것임
     * Google, Microsoft, AWS 등의 기존 업체들이 모델 실행 및 학습을 위한 맞춤형 하드웨어에 대한 투자를 늘리면서 가격 경쟁이 어려워질 수 있음
     * 많은 생성형 AI 워크로드가 GPU에서 가장 잘 실행되지만 시간에 민감하지 않은 작업의 경우 GPU가 꼭 필요하지 않을 수 있음
     * 생성형 AI 거품이 꺼질 경우 GPU가 과잉 공급되고 수요가 크게 감소할 위험이 있음

GN⁺의 의견

     * GPU 수요 폭증으로 Nvidia 등 주요 GPU 공급사들의 영향력이 더욱 커질 수 있음. Nvidia가 대체 클라우드 업체들에게 GPU 우선 공급권을 준 것으로 알려졌는데, 이는 Nvidia의 시장 지배력 강화 전략으로 보임
     * 클라우드 업체들이 대규모 GPU 클러스터 확보에 성공하면 대형 AI 프로젝트 유치에서 경쟁 우위를 점할 수 있음. 마이크로소프트가 OpenAI에 GPU 컴퓨팅 파워 공급을 위해 CoreWeave와 수십억불 규모 계약을 체결한 것이 대표적 사례
     * 그러나 장기적으로는 구글 TPU, MS Azure Maia/Cobalt, AWS Trainium 등 AI 특화 커스텀 실리콘 개발로 클라우드 업계 지형이 크게 바뀔 수 있음. 하이퍼스케일러들이 Nvidia 의존도를 낮추려 할 것으로 보임
     * 대체 클라우드가 새로운 옵션으로 부상했지만 보안, 컴플라이언스, 멀티 클라우드 관리 역량을 갖춘 고객이 제한적일 것임. 여전히 기존 클라우드 업체들의 시장 지배력이 막강함

        Hacker News 의견

   요약:
     * AWS의 비즈니스 모델은 가격 책정을 혼란스럽게 만들어 사용 후에야 비용을 알 수 있게 하는 것으로 보임
     * GCP의 새로운 인스턴스 유형인 n4-standard-2의 월간 비용 분석 결과, vCPU와 메모리 비용은 월 $69로 높은 편이며, SSD 가격도 비싼 편임
     * 향후 10년 내에 대형 클라우드 제공업체들이 어려움을 겪을 것으로 예상됨. planetary-scale 시스템을 구축하는 비용이 너무 비싸고 복잡해 정당화하기 어려움
     * CoreWeave, Azure, Google Cloud의 Nvidia A100 40GB GPU 렌탈 비용을 비교한 기사에서 계산 오류가 있음. CoreWeave의 월간 비용이 30% 정도 차이남
     * fly.io는 GPU 워크로드에 적합한 대안으로 추천됨. 자동 크기 조정 기능이 좋음
     * AWS의 비즈니스 모델은 초기 스타트업이 대기업으로 성장하는 과정에서 많은 수익을 올리는 것으로 보임. 그러나 ZIRP 종료와 VC 자금 조달 어려움으로 폭발적 성장을 위해 많은 돈을 쓸 수 있는 스타트업 수가 줄어들 것으로 예상됨
     * 추론 작업을 위한 대안적인 클라우드 GPU 사용 경험에 대한 질문이 제기됨. 지연 시간이 중요하며, AWS 인프라와 다른 곳의 GPU 간 통신이 어려울 수 있음
     * Core Weave와 Lambda Labs는 연간 계약 없이는 GPU를 임대할 수 없는 약탈적 가격 정책을 가지고 있음. sfcompute와 같이 시간별 컴퓨팅을 제공하는 회사도 있음
     * ""H100s/A100s를 소량 확보했다""는 것 자체가 수익성 있는 기술 비즈니스 모델이 될 수 있음
     * Crusoe Cloud는 H100s, A100s, L40s를 매우 저렴한 가격에 제공하며, 네트워크 사용료도 부과하지 않음. FLOP 당 가격이 타의 추종을 불허함
"
"https://news.hada.io/topic?id=14703","줄(Juul) 연계 공개하지 않은 채 전자담배 옹호한 뉴욕대학교 교수들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                줄(Juul) 연계 공개하지 않은 채 전자담배 옹호한 뉴욕대학교 교수들

NYU 교수들의 Juul 연루 관계 공개 누락

     * STAT의 조사에 따르면, 뉴욕대학교의 David Abrams와 Ray Niaura 교수가 전자담배 회사 Juul의 임원들과 직접 협력했지만, 학술 저널이나 의회에 이러한 관계를 공개하지 않음
     * 청소년 전자담배 사용 문제가 심각할 때, 많은 공중보건 전문가들은 업계 전체를 뒤흔들 수 있는 광범위한 조치를 요구했지만, Abrams와 Niaura는 청소년 사이에서 인기가 높아지고 있음에도 불구하고 성인의 흡연 감소나 금연을 돕는 효과적인 공중보건 전략으로서 전자담배를 옹호할 의향이 있는 권위있는 목소리로 부상함

Abrams 교수의 Juul과의 연계 활동

     * Abrams 교수는 CBS This Morning, CNN, The New Yorker 등 뉴스 미디어에서 전자담배에 대해 자주 논평함
     * 회사 이메일에 따르면, Abrams는 2017년과 2018년에 Juul과 공개 메시징에 대해 광범위하게 조율함
     * Abrams는 Juul 임원들에게 토킹 포인트를 요청하고, 학술 기사 출판 전에 회사 임원진이 검토할 수 있도록 허용하고, Juul 과학자문위원회 회의에 참석했지만, 이러한 연결고리를 저널 발행인이나 대중에게 공개하지 않음

GN⁺의 의견

     * 이번 사건은 일부 학계 인사들이 특정 기업의 입장을 대변하며 객관성을 상실하는 사례로 볼 수 있음. 특히 청소년 건강에 미치는 영향이 큰 문제에서 이해상충 관계를 밝히지 않는 것은 윤리적 문제가 될 수 있음
     * 전자담배의 금연 효과에 대해서는 아직 과학적 합의가 부족한 상황이므로, 전자담배 옹호론자들의 주장은 신중하게 받아들일 필요가 있음. 장기적 건강 영향에 대한 추가 연구가 필요해 보임
     * 기업과 학계의 부적절한 유착 관계를 막기 위해, 연구비 지원이나 자문 활동 등에서 이해상충 공개를 의무화하는 등의 제도적 장치 마련이 시급해 보임. 연구의 독립성과 객관성 확보가 중요함
     * 전자담배 규제 정책 수립 시, 기업의 입김이 작용하지 않도록 주의해야 함. 청소년 건강을 최우선으로 고려하면서도 금연 보조제로서의 역할도 감안해 균형잡힌 접근이 필요할 것으로 보임

        Hacker News 의견

     * 베이핑이 급격히 대중화된 것에 대한 놀라움. 흡연 중독에서 벗어날 뻔 했던 세대가 다시 니코틴 중독에 빠지게 됨.
     * Juul이 처음 인기를 끌기 시작했을 때 고등학교 선배였던 사람의 경험담:
          + 처음에는 니코틴 중독을 자발적으로 받아들이는 또래를 비웃었으나, 이내 주변 친구들도 베이핑을 시작함.
          + 8년이 지난 지금도 친구들은 계속 베이핑을 하고 있으며, 그만두려 해도 쉽지 않음.
          + 이제는 일회용 베이프(Pod 교체 없이 전체를 버리는 방식)가 주를 이룸.
          + 많은 또래가 니코틴 중독과 함께 엄청난 양의 전자 폐기물을 배출하게 됨.
     * Juul은 Z세대의 베이핑 대중화를 주도했으며, 이는 계속 이어지고 있음. 우리 세대가 니코틴으로부터 자유로울 뻔 했던 찰나의 기회를 놓침.
     * 우리 시스템이 국민이나 공공의 이익을 위해 작동하지 않음을 보여주는 완벽한 사례. 중독성이 강한 물질을 전달하는 기기는 기본적으로 허용되기 전까지 차단되었어야 함.
     * 베이핑의 부정적 영향이 있을 것이며 더 강력한 규제가 필요하나, Juul을 무력화시키고 수많은 중국산 클론 제품이 그 자리를 대신하게 된 것은 큰 실수였음.
     * Netflix 다큐멘터리는 처음에는 안전한 흡연을 추구하던 사람들이 돈을 위해 점점 더 악한 일을 정당화하는 과정을 잘 보여줌.
     * 이런 일이 계속되는 이유는 결과에 대한 책임이 없기 때문. 기업은 항상 ""전문가""의 의견에 돈을 지불해 왔고 앞으로도 그럴 것임.
     * 망고 향 Pod의 판매 금지는 자의적으로 보임. 과일 맛 보드카를 금지하는 사람은 없음.
     * 공중보건 연구자가 청소년의 전자담배와 니코틴 파우치 사용을 ""깨끗하다""며 평가절하한 것이 놀라웠음.
     * 일회용 베이퍼라이저에 중독된 경험담:
          + 니코틴 없는 버전으로 전환했으나 소용없었음.
          + 6개월 째 목에 화끈거림과 떨림, 손발 저림 등의 증상이 나타남.
          + 약물과의 상호작용인지, 포름알데히드 때문인지 명확하지 않으나 베이핑이 건강에 좋지 않음은 분명함.
     * 유명인이 유료 광고임을 밝혀야 하는 것과 어떻게 다른가?
"
"https://news.hada.io/topic?id=14683","Show HN: 6,000여 종의 식물을 탐색하고 발견할 수 있는 무료 사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show HN: 6,000여 종의 식물을 탐색하고 발견할 수 있는 무료 사이트

GetAnyPlant 웹사이트 요약

   GetAnyPlant는 6,000개 이상의 다양한 식물을 찾아볼 수 있는 웹사이트임. 일반 식물 가게에서는 제한된 선택 폭과 변동되는 재고를 가지고 있지만, GetAnyPlant는 여러 사이트의 식물들을 모아서 최고의 선택지를 최저가에 제공함.

   웹사이트에서는 다음과 같은 카테고리로 식물을 분류하고 있음:
     * 전체 식물
     * 난초
     * 반려동물에게 안전한 식물
     * 다육식물
     * 식충식물
     * 고사리
     * 수생식물
     * 선인장
     * Aroid과 식물
     * 꽃이 많은 식물
     * 테라리움용 식물
     * 화려한 색상의 식물
     * 특이한 식물

   식물은 과(Family)와 속(Genus) 단위로도 분류되며, 빛, 물, 습도, 관리 난이도, 크기 등의 속성으로도 필터링할 수 있음.

   각 식물 항목에는 사진, 이름, 분류, 가격대, 구매 가능한 스토어 수 등의 기본 정보가 포함되어 있음.

GN⁺의 의견

     * 식물을 사는 것은 온라인 쇼핑의 매력적인 카테고리 중 하나임. 하지만 식물은 실물을 보고 사는 것이 중요한데, 온라인에서는 그게 어려운 점이 있음. 사진과 실물의 차이, 배송 중 손상 위험 등을 고려해야 함.
     * 반려동물 안전, 빛 조건 등 실용적인 필터가 있어서 식물 초보자들에게 도움이 될 듯함. 하지만 식물에 대한 좀 더 자세한 설명이 제공되면 식물 선택에 도움이 될 것 같음.
     * 가격 비교 기능이 매력적임. 하지만 배송료나 식물 상태 등 가격 외적인 요소도 구매에 중요하게 작용할 수 있음.
     * 식물 이름을 검색할 때 일반명과 학명을 모두 지원해주면 초보자의 접근성이 높아질 것으로 보임. 현재는 학명 위주인 듯함.
     * 향후 커뮤니티 기능이 추가되면 초보자들의 식물 기르기에 도움이 될 것 같음. 식물별 커뮤니티가 형성되어 관리 노하우를 공유하는 것도 의미 있을 듯함.

        Hacker News 의견

     * 사이트에서 사용자 위치를 지정하는 방법이 없어서 실제로 식물을 구매할 수 있는지 확인할 수 없음
     * 식물을 클릭하면 미국 사이트만 나옴
     * 아직 초기 단계지만 ""USA only""라는 간단한 안내문이 있었으면 좋겠음
     * 미국인들이 세계 인구의 96%를 마치 동일한 행성에 살지 않는 것처럼, 이국적인 관광지나 이민자의 발생지처럼 대하는 경향이 있어 짜증남
     * 실내 식물 주변에는 운동화처럼 특정 품종을 중심으로 큰 하위문화가 형성되어 있음
          + 가격이 비싸고, 거래 네트워크가 있으며, 높은 지위와 관련된 품종이 있고, 가짜(농담이 아님) 등이 있음
          + 매우 흥미로운 주제이나 이 사이트는 그런 하위문화에 관한 것은 아닌 듯함
     * 식물이 자생하는 지역별로 분류하는 것도 좋을 듯
          + 일부 사람들은 거주 지역에 토착하는 식물만 심고 싶어함
          + 다른 사람들은 최소한 침입성 가능성에 따라 분류하는 것이 좋음
     * 그 외 속성: 독성(섭취 시 또는 접촉 시), 사슴 저항성, 타감작용 가능성, 수분매개자 친화성 등
     * 필터뿐만 아니라 검색을 위한 이분검색표(dichotomous key)도 있으면 좋겠음
          + 이름은 모르지만 여러 속성을 알고 있다면 DK를 사용하여 식물을 찾을 수 있어야 함
          + 데이터 과학자라면 이를 위해 데이터를 어떻게 활용할지 가장 잘 알 것임
          + 더 많은 속성이 필요하겠지만 다른 곳에서 가져올 수도 있음
     * 정보 제공을 시작한 것을 축하함. 나도 신뢰할 수 있는 식물 정보를 찾기 어려웠음
          + 많은 사이트가 실내 식물이나 정원에서 기르는 식물에만 초점을 맞추고 있기 때문
          + 실내외에서 기르는 식물을 모두 검색할 수 있어 좋음
     * 속(genus)에 대한 필터를 만드는 것도 좋은 아이디어임
     * 검색이 조금 느린 편이고, 까다로움
          + ""ficus ginseng""를 입력해도 제목이 ""Ficus 'Ginseng'""이라서 작은따옴표가 필요해서 결과가 나오지 않음
     * 하지만 이 사이트를 사용할 수 있을 것 같음. 잘했어요!
     * 식물 관리에 대한 정보가 있는 일종의 공용 식물 위키피디아를 추가하면 좋을 것 같음
          + 식물을 좋아하지만 일부는 관리하기가 어려움
     * 실외 식물, 관목, 나무를 포함하고 내한성 지역에 대한 필터가 있으면 좋겠음
     * ""poison ivy""나 ""poison oak""를 검색하면 둘 다 0개의 결과가 나오는 게 재미있지만 타당함
     * 이런 사이트가 있다는 걸 알게 되다니 나에겐 매우 위험함
     * 6,000종의 식물을 다른 웹사이트의 6,000개 제품에 어떻게 매핑하나?
          + 수작업으로 확인되지 않은 키워드의 느슨한 매칭을 통해 수행되는 건가, 아니면 각 사이트에서 사용하는 전역 식별 시스템이 있나?
          + 아니면 사이트와 협력해서 이뤄지나?
"
"https://news.hada.io/topic?id=14710","사무실 빌딩의 아파트 전환, 도심 재생의 해법?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       사무실 빌딩의 아파트 전환, 도심 재생의 해법?

   Here is a summary of the key points from the article in Korean, organized into bullet points using Markdown:

맨해튼 다운타운 사무실 빌딩의 주거용 전환

     * 네이선 버먼은 Metro Loft Management를 통해 한때 큐비클로 가득했던 대형 건물들을 매력적인 주거 공간으로 개조하여 맨해튼 금융가를 ""둠루프""에서 구출함.
     * 버먼의 회사는 최근 역대 최대 규모의 전환 사업을 발표함. 42번가 동쪽에 있는 화이자 전 본사가 1,300세대 아파트로 탈바꿈될 예정.

팬데믹 이후 사무실 공간 감소와 주거용 전환의 필요성 대두

     * 팬데믹으로 인해 재택근무가 확산되면서 미국 52개 대도시의 도심 유동인구는 평균 26% 감소함.
     * ""둠루프"" 현상 발생. 직장인들이 도심 사무실에 출근하지 않으면서 이들을 상대로 했던 상점과 식당들이 문을 닫고, 이로 인해 해당 지역은 더욱 공동화됨.
     * 맨해튼에서는 22%의 사무실 공간이 비어있음. 제국State빌딩 35개 분량.
     * 주거용 전환을 통해 공실 타워 소유주들에게 새로운 재무전략을 제시함.
     * 도심 사무실을 아파트로 바꾸는 것이 뉴욕 부동산 재벌들에게 만병통치약은 아니지만, 금융가 등 타격이 심한 지역 활성화에 도움이 될 것으로 전망.

55 Broad Street 사무실 빌딩의 주거용 전환 프로젝트

     * 1967년 Emery Roth & Sons가 지은 30층 사무실 타워로 571세대 아파트로 개조 중.
     * 기존 사무실 내부를 완전히 허물고 주거에 적합한 공간으로 재구성. 엘리베이터 축소, 외벽 창문 활용한 채광, 컴팩트한 주방 등.
     * 사무실 빌딩 개조 시 수익성을 좌우하는 요소는 공사자금 대출과 입주 사이의 시차. 신속한 공사 진행이 관건.
     * 전후 빌딩보다 전환이 까다로운 전후 구조물이 많지만, Berman은 ""파운드당 가격만 맞으면 어떤 사무실 건물도 주거용으로 바꿀 수 있다""고 말함.

저렴한 비용과 에너지 효율 개선 등 주거용 전환의 장점

     * 신축 대비 절반 수준의 전환 비용으로 신축 대비 저렴한 임대료 책정 가능.
     * 국립경제연구소에 따르면 구식 사무실 건물을 아파트로 전환하면 에너지 효율성이 최대 80%까지 향상.
     * 엔지니어링 회사 Arup Group에 따르면 맨해튼 사무실 타워 전환 시 신축 대비 탄소 배출량을 절반 이하로 줄일 수 있음.

금융가의 변화와 주거지로서의 매력

     * 1970년 인구조사에 따르면 챔버스 스트리트 이남에 겨우 833명이 거주.
     * 버먼 덕분에 금융가는 이제 뉴욕다운 주거 밀집지역이 됨.
     * FiDi에 3만명 이상이 거주하며, 일부는 이곳을 영구 거주지로 여기기 시작.
     * 가족 단위 입주자 증가 추세. 180 Water에 어린이 놀이방을 마련할 정도.

GN⁺의 의견

     * 코로나19 팬데믹으로 인한 도심 사무실 공실률 증가 문제를 주거용 전환을 통해 해결하는 접근법은 지속가능한 도시 재생 차원에서 긍정적으로 평가할 만함. 다만 이는 장기적 관점의 도시계획과 연계되어야 할 것으로 보임.
     * 다운타운 활성화를 위해서는 주거 기능 외에 일자리, 교통, 교육, 문화 등 도시 어메니티 전반에 대한 종합적 고려가 필요함. 특히 젊은 1인 가구 위주의 주거 공급을 넘어 다양한 계층을 아우를 수 있는 포용적 주거 정책이 요구됨.
     * 사무실 빌딩의 주거 전환이 활성화되려면 용도 변경 규제 완화, 세제 혜택, 금융 지원 등 제도적 뒷받침이 필수적임. 동시에 안전과 주거 품질 확보를 위한 기술 기준 정립과 민관 협력도 중요한 과제임.
     * 이러한 대규모 빌딩 전환 사업은 설계와 시공, 자재 조달 등 건설 산업 전반에 새로운 기회를 제공할 것으로 기대됨. 특히 에너지 효율 개선, 유니버설 디자인 적용 등 혁신 기술 도입의 계기가 될 수 있음.
     * 코로나19를 계기로 대면 업무 감소, 온라인 소비 확대 등 구조적 변화가 예상되는 만큼, 상업용 부동산 시장의 재편이 불가피해 보임. 유연하고 창의적인 공간 활용 방안을 모색할 때임.

        Hacker News 의견

   요약:
     * Kansas City의 다운타운 재개발 성공 사례들:
          + 1970년대부터 2010년대 초반까지 KC 다운타운은 범죄, 저개발, 역사적 건물 노후화 등의 문제를 겪음
          + 2012년경부터 도심 재개발이 시작되어 무료 대중교통, 소매업 활성화, 예술지구 행사, 새 경기장 건설, 대규모 사무실을 주택으로 전환하는 프로젝트 등이 진행됨
          + Fidelity Tower, Power & Light Building 등 수십년간 공실이었던 역사적 건물들이 수백 가구의 아파트로 변신함
          + 이러한 전환 프로젝트들은 도시 차원의 의지만 있다면 입증된 성공 모델임
     * 사무실 건물의 주거 전환에 대한 기존 통념과 도전:
          + 건물의 깊이와 형태가 중요하며, 많은 사무실 건물들은 너무 깊어서 자연광이 들어오지 않는 공간이 많이 생길 수 있음
          + 그러나 이런 깊은 내부 공간을 새롭게 활용하는 방안을 모색해 볼 수 있을 것
     * 주거와 사무실, 상업시설 등을 혼합 배치하는 것의 장점:
          + 생활, 쇼핑, 업무를 위해 서로 다른 지역으로 이동해야 하는 것은 부조리해 보임
          + 집에서 걸어서 15분 이내 거리에 직장, 대학, 수퍼, 수영장, 숲 등 모든 것이 갖춰진 곳에 사는 것이 이상적
     * 사무실의 주거 전환 시 배관 문제:
          + 아파트로 전환 시 욕실과 주방을 위한 배관 설비 비용이 큼
          + 기존 사무실은 층당 화장실과 미니 주방이 한 개씩 밖에 없는 경우가 많음
          + 같은 층을 아파트로 만들면 10배 이상의 배관과 상하수도 처리 용량이 필요함
     * 신축 주거 건물로 도심을 살리는 것이 더 나은 방법일 수 있음:
          + 기존 사무실은 상업용 부동산으로 계속 사용하고, 인근에 새 주거 건물을 짓는 것이 비용 면에서 크게 차이 나지 않을 것
          + 이는 자동차 통근 없이 걸어 다닐 수 있는 활기찬 도심을 만드는데 도움이 될 것이며, 주거 건축을 가로막는 것은 용도지역 제한뿐임
     * 팬데믹 이후 재택근무 확산으로 사무실 가치가 하락한 상황:
          + 주택으로의 전환이 대도시 거주자들에겐 좋은 선택지가 될 수 있으나, 부동산 시장은 수익성을 중시하기에 주택이 최선은 아닐 수 있음
     * 뉴욕시와 다른 도시들의 도심 거주 여건 차이:
          + 뉴욕은 자동차 없이도 충분한 삶이 가능한 도심형 생활의 오랜 전통이 있음
          + 반면 대부분의 다른 도시들은 자동차 중심으로 발전해왔기에 정상적인 생활을 위해선 자동차가 필수적
     * 새로운 성장 도시들의 장점:
          + 이전의 성장 전략을 현재의 성장 모델로 재분배할 수 있음
          + 성장 속도가 빠를수록 이전 성장 패턴에 대한 충성도로 인한 혼란이 적을 것
          + 반면 오래된 도시들은 특별하고 구체적인 무언가가 없다면 도심부가 공동화될 운명
"
"https://news.hada.io/topic?id=14716","AlphaFold 3, 생명체 분자 구조 및 상호작용 예측 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  AlphaFold 3, 생명체 분자 구조 및 상호작용 예측 기술

AlphaFold 3의 주요 기능과 특징

     * AlphaFold 3는 Google DeepMind와 Isomorphic Labs가 개발한 새로운 AI 모델로, 단백질, DNA, RNA, 리간드 등의 구조와 상호작용을 정확하게 예측함으로써 생물학적 세계와 신약 개발에 대한 이해를 높일 수 있음
     * 다른 분자 유형과의 상호작용에서 기존 예측 방법에 비해 최소 50% 이상 개선되었으며, 일부 중요한 상호작용 범주에서는 예측 정확도가 두 배로 향상됨
     * AlphaFold 2의 기반 위에 구축되었으며, AlphaFold 2는 2020년에 단백질 구조 예측에서 근본적인 돌파구를 마련함
     * AlphaFold 3는 단백질을 넘어 광범위한 생체분자로 확장되었음. 이는 생물재생 가능한 재료 개발, 더 탄력적인 작물, 신약 설계 가속화, 유전체 연구 등 더 많은 혁신적인 과학을 가능하게 할 수 있음

AlphaFold 3의 작동 방식

     * 입력된 분자 목록이 주어지면 AlphaFold 3는 분자들이 어떻게 맞물리는지 보여주는 3D 구조를 생성함. 단백질, DNA, RNA와 같은 큰 생체분자뿐만 아니라 리간드라고 알려진 작은 분자도 모델링할 수 있음
     * 많은 약물을 포함하는 범주인 리간드 모델링이 가능함. 또한 세포의 건강한 기능을 제어하는 이러한 분자의 화학적 변형을 모델링할 수 있으며, 이는 질병으로 이어질 수 있음
     * AlphaFold 2의 놀라운 성능을 뒷받침한 딥러닝 아키텍처인 Evoformer 모듈의 개선된 버전이 모델의 핵심임
     * 입력을 처리한 후 AlphaFold 3는 AI 이미지 생성기에서 발견되는 것과 유사한 확산 네트워크를 사용하여 예측을 조립함. 확산 과정은 원자 구름으로 시작하여 여러 단계를 거쳐 최종적으로 가장 정확한 분자 구조로 수렴함

신약 개발에서의 AlphaFold 3의 역할

     * AlphaFold 3는 단백질과 결합하여 인간의 건강과 질병에서 상호 작용하는 방식을 변화시키는 리간드 및 항체와 같이 약물에 일반적으로 사용되는 분자에 대한 예측을 통해 신약 설계 능력을 창출함
     * AlphaFold 3는 리간드 및 항체와 표적 단백질의 결합을 포함하여 약물과 유사한 상호 작용을 예측하는 데 있어 전례 없는 정확성을 달성함
     * AlphaFold 3는 구조 정보의 입력 없이도 PoseBusters 벤치마크에서 기존 최고의 전통적 방법보다 50% 더 정확하여, 생체분자 구조 예측을 위한 물리 기반 도구를 능가하는 최초의 AI 시스템이 됨
     * 항체-단백질 결합을 예측하는 능력은 인체 면역 반응의 측면과 새로운 치료제 종류로 성장하고 있는 항체 설계를 이해하는 데 매우 중요함
     * Isomorphic Labs는 AlphaFold 3와 상호 보완적인 내부 AI 모델을 결합하여 내부 프로젝트와 제약 파트너와 함께 신약 설계에 적용하고 있음

AlphaFold Server 개요

     * Google DeepMind가 새로 출시한 AlphaFold Server는 세포 전체에 걸쳐 단백질이 다른 분자와 상호 작용하는 방식을 예측하는 세계에서 가장 정확한 도구임
     * 과학자들이 비상업적 연구를 위해 무료로 사용할 수 있는 플랫폼임
     * 몇 번의 클릭만으로 생물학자들은 AlphaFold 3의 능력을 활용하여 단백질, DNA, RNA, 선택한 리간드, 이온 및 화학 변형으로 구성된 구조를 모델링할 수 있음
     * 실험실에서 테스트할 새로운 가설을 세우는 데 도움이 되어 워크플로를 가속화하고 추가 혁신을 가능하게 함
     * 연구자들에게 계산 자원이나 기계 학습 전문 지식에 관계없이 예측을 생성할 수 있는 접근 가능한 방법을 제공함
     * 실험적 단백질 구조 예측은 박사 학위 기간 정도 걸리고 수십만 달러의 비용이 들 수 있음. AlphaFold 2는 수억 개의 구조를 예측하는 데 사용되었는데, 이는 현재 실험 구조 생물학 속도로는 수억 년의 연구자 시간이 걸렸을 것임

AlphaFold 3의 책임감 있는 공유

     * 각 AlphaFold 릴리스에서 연구 및 안전 커뮤니티와 협력하여 기술의 광범위한 영향을 이해하기 위해 노력해 왔음
     * 과학 주도 접근 방식을 취하고 잠재적 위험을 완화하고 생물학 및 인류에 대한 광범위한 이점을 공유하기 위해 광범위한 평가를 수행함
     * AlphaFold 2에 대해 수행한 외부 자문을 바탕으로 생물 안전, 연구 및 산업 분야의 50명 이상의 도메인 전문가 및 전문 제3자와 협의하여 AlphaFold 모델의 능력과 잠재적 위험을 이해함
     * AlphaFold 3 출시에 앞서 커뮤니티 전체 포럼 및 토론에 참여함
     * 2억 개의 무료 단백질 구조 데이터베이스를 포함하여 AlphaFold의 혜택을 공유하기 위한 지속적인 노력을 반영함
     * EMBL-EBI와의 무료 AlphaFold 교육 온라인 과정을 확장하고, 과학자들에게 채택과 연구를 가속화하는 데 필요한 도구를 제공하기 위해 Global South의 조직과 제휴할 예정
     * 책임감 있는 AI 기술 개발 및 배포를 위해 과학계 및 정책 입안자와 계속 협력할 것임

AI 기반 세포 생물학의 미래

     * AlphaFold 3는 구조, 상호 작용 및 수정에 걸쳐 세포 시스템을 모든 복잡성으로 볼 수 있게 해줌
     * 이 새로운 창은 생명의 분자가 어떻게 연결되어 있는지 보여주고 이러한 연결이 약물의 작용, 호르몬 생산, 건강 보존 DNA 복구 과정과 같은 생물학적 기능에 어떻게 영향을 미치는지 이해하는 데 도움을 줌
     * AlphaFold 3와 무료 AlphaFold Server의 영향은 생물학의 개방형 질문과 새로운 연구 라인에서 과학자들이 어떻게 발견을 가속화하는지를 통해 실현될 것임
     * AlphaFold 3의 잠재력을 막 시작하고 있으며 미래가 어떨지 기대됨

GN⁺의 의견

     * AlphaFold 3는 단순히 단백질 구조 예측을 넘어, 세포 내 다양한 분자들 간의 상호작용까지 예측할 수 있게 됨으로써 생물학 연구에 큰 파급력을 가질 것으로 보임. 특히 무료 서버를 통해 전세계 과학자들이 쉽게 접근하여 활용할 수 있게 한 점이 인상적임.
     * 다만 분자 간 상호작용 예측의 정확도가 50% 향상되었다고는 하나, 실제 실험 결과와 비교했을 때 어느 정도 수준일지 아직 의문임. 현재로서는 가설 설정에 도움을 주는 보조적 도구 정도로 보는 것이 바람직해 보임.
     * 신약개발 분야에서의 활용 가능성이 매우 크다는 점에서 제약회사들의 관심이 높을 것으로 예상됨. 그러나 윤리적, 보안상의 이슈로 인해 상용화에는 시간이 더 걸릴 것 같음.
     * 알파폴드가 단백질 구조 예측을 시작으로 이제는 분자 수준의 상호작용 예측까지 가능해졌듯이, 앞으로 세포 및 조직 수준으로 확장되어 질병의 발병 기전 규명이나 맞춤 의료에 큰 도움이 될 것으로 기대됨.
     * 다만 강력한 AI 기술인 만큼 오남용 방지를 위한 윤리 규범 마련, 보안 대책 수립, 충분한 검증 실험 등이 뒷받침되어야 할 것임. 구글 딥마인드의 개방적이고 신중한 자세가 긍정적으로 보임.

        Hacker News 의견

   주요 내용을 요약하면 다음과 같음:
     * ML 기반 방법이 물리 기반 방법보다 세계를 정확하게 예측하는 데 더 뛰어난 성능을 보임. 이는 과학적 발전 과정에서 해석 가능한 이론이나 수학적 모델 없이 더 나은 모델로 발전할 수 있음을 시사함.
     * DeepMind의 AlphaFold 3와 유사하게 David Baker 연구실에서도 단백질 구조 및 결합된 DNA, 리간드를 예측하는 오픈소스 모델인 RoseTTAFold를 공개함.
     * AlphaFold 3는 약 70%의 정확도를 보이며, 기존 방법(30~50%)에 비해 상대적으로 우수한 성능을 보임. 그러나 보도자료에서 절대적인 정확도를 명시하지 않은 점은 의도적으로 오해의 소지가 있음.
     * AlphaFold 3는 단백질, DNA, RNA, 이온, 리간드, 화학적 변형을 포함한 다양한 생체분자 구조를 예측할 수 있음. 단백질 복합체 모델링 정확도도 개선됨.
     * 오픈소스로 공개되지 않은 점은 과학계에 큰 불편을 초래할 수 있음. 신약 개발 등에 큰 잠재력이 있는 기술을 폐쇄적으로 유지하는 것은 과학계에 도움이 되지 않음.
     * ML 기반 방법은 예측 결과에 대한 설명이 부족하다는 한계가 있음. 기저 원리에 대한 이해 없이 예측 결과의 일관성과 신뢰성을 보장하기 어려움.
     * 모델을 공개하지 않은 채 ""무료 서버""만 제공하는 것은 과학적 재현성 측면에서 우려됨. 상용 기업에 의존하게 되는 것은 바람직하지 않음.
     * AlphaFold 3의 정확한 도킹 예측 성능에 대해서는 아직 논문이 공개되지 않아 불분명함. 기존 방법 대비 50% 이상 우수하다고 하나, 구체적인 수치는 제시되지 않음.
     * AlphaFold 2에 비해 구조적 제약 조건 등 해석 가능한 요소를 일부 배제하고 단순히 데이터 증류(distillation)에 의존하는 점이 우려됨. 이전 모델의 예측 결과를 활용해야 하는 것도 불편함.
     * DeepMind CEO의 트윗과 블로그 제목 사이에 ""거의 모든"" vs. ""모든""이라는 표현 차이가 있어 100% 해결되었다는 인상을 주는 것은 문제가 있음.
"
"https://news.hada.io/topic?id=14727","APPLE의 M4칩 공개, 이제 시작되었다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        APPLE의 M4칩 공개, 이제 시작되었다

    애플, 강력한 M4 칩 공개

   Apple은 이전 제품보다 50% 빠른 CPU, 내장형 레이 트레이싱, 초당 38조 번의 연산이 가능한 신경 엔진을 자랑하는 M4 칩을 공개하며 AI 워크로드를 위한 새로운 칩을 선보였습니다.
   삼성, 구글, 마이크로소프트, 인텔 등 주요 업체들이 Arm 기반 칩 시장을 선점하기 위한 글로벌 군비 경쟁에 동참하고 있는 가운데 월드와이드 개발자 회의가 아닌 아이패드 행사에서 M4를 공개한 것은 의미가 있습니다.
   2020년 M1 칩의 성공은 일반 컴퓨터용 Arm 프로세서에 대한 인식을 혁신적으로 변화시켰고, 강력한 Arm 기반 칩 개발 경쟁이 치열해졌습니다.

    ARM 칩이 기술 산업에 미치는 영향

   Voltera는 ARM 칩에서 Windows를 실행하는 프로젝트를 주도하고 있으며, AWS와 같은 주요 데이터 센터는 효율성을 위해 ARM 칩을 채택하고 있습니다. 아마존, 구글, 마이크로소프트는 실제로 칩을 직접 제조하지는 않지만 모두 데이터 센터용 ARM 칩을 자체 개발하고 있습니다. Apple의 M4 칩은 강력한 신경 엔진으로 설계되어 기기에서 AI용 대규모 언어 모델을 실행하는 데 중점을 두고 있으며, 잠재적으로 오프라인 AI 처리를 혁신하고 개인 정보 보호를 보장할 수 있습니다.

    곧 출시될 스냅드래곤 X 엘리트 칩과 AI 우위를 차지하기 위한 경쟁

   퀄컴은 M4 칩을 능가하는 성능으로 Surface 노트북의 Windows를 구동할 것으로 예상되는 스냅드래곤 X 엘리트 칩을 출시할 예정입니다. 성능 수치에 대한 치열한 경쟁은 AI 모델을 효과적으로 실행할 수 있는 디바이스에 대한 수요 증가로 인해 주도되고 있습니다. x86 기술의 종말에 대한 주장에도 불구하고, 오랜 기간 동안 존재해 왔고 최신 인프라에 깊이 통합되어 있어 이를 대체하는 데 어려움이 있습니다.

    AI 패권을 향한 경쟁

   인텔은 높은 전력 효율과 처리 용량을 위해 알더 레이크 프로세서를 개발했고, AMD는 새로운 라이젠 AI 9을 출시했습니다. 애플은 맥북 싱귤래리티 블래스터 터보 프로 맥스를 출시할 것이라는 소문이 돌고 있어 기술 업계에서 AI 기능에 대한 관심이 높아지고 있음을 알 수 있습니다.

   맥북 싱귤래리티 블래스터 터보 프로 맥스요...?

   내용 정리는 Corely를 활용했습니다.
   https://corely.ai/content/arm-chip-race-apple-m4

   코얼리 서비스 정말 딱 필요한 영상 요약 기능이네요. 대단합니다!

   크롬/웨일 익스텐션으로도 편리하게 쓰실 수 있어요ㅎㅎ 빠른 정보습득에 많은 도움될 수 있길 바랍니다. 감사합니다!
"
"https://news.hada.io/topic?id=14715","xmake - Lua 기반 크로스플랫폼 빌드 유틸리티","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     xmake - Lua 기반 크로스플랫폼 빌드 유틸리티

     * 초경량, 표준 라이브러리 외 의존성 없음
     * xmake.lua 파일에 간단하고 읽기쉬운 문법으로 프로젝트 빌드 설정을 관리
     * 직접 소스 코드를 빌드(Make / Ninja 처럼)하거나, 프로젝트 소스파일을 생성(Cmake/Meson 처럼 )
     * C/C++ 의존성을 연동하기 쉽도록 내장 패키지 관리 시스템 포함
     * Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
     * Xmake ≈ Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
"
"https://news.hada.io/topic?id=14663","자동화된 정수 해시 함수 탐색 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          자동화된 정수 해시 함수 탐색 기술

Hash Function Prospector

   이 도구는 자동화된 정수 해시 함수 탐색을 위한 작은 도구임. 9개의 가역 연산들 중에서 무작위로 선택하여 수십억 개의 정수 해시 함수들을 생성함. 생성된 함수들은 JIT 컴파일되고 Avalanche 동작이 평가됨. 현재 가장 좋은 함수가 C 문법으로 출력됨.
     * Avalanche 점수: 단일 입력 비트를 뒤집었을 때 평균적으로 고정된 상태로 유지되는 출력 비트 수. 점수가 낮을수록 좋음. 이상적으로는 점수가 0임. 즉, 단일 입력 비트를 뒤집으면 모든 출력 비트가 50% 확률로 뒤집힘.
     * Prospector는 32비트와 64비트 정수 해시 함수를 모두 생성할 수 있음. 전체 옵션은 사용법(-h)을 확인. JIT 컴파일러로 인해 x86-64만 지원되지만, 발견된 함수는 어디서나 사용 가능함.

  발견된 해시 함수들

   Prospector와 여기에 있는 다른 도우미 유틸리티들에 의해 발견된 두 가지 유용한 클래스의 해시 함수가 있음. 둘 다 xorshift-multiply-xorshift 구조를 사용하지만 라운드 수가 다름.

    2라운드 함수

   TheIronBorn이 이 구조에 대한 최고의 알려진 매개변수를 발견하기 위해 조합 최적화를 사용함.
     * 이 32비트 2라운드 순열은 특히 낮은 편향을 가지며 심지어 유명한 MurmurHash3 32비트 finalizer를 작은 차이로 이김.
     * 해시 함수 구조는 Prospector에 의해 발견되었고, 매개변수는 언덕 등반과 유전 알고리즘을 사용하여 튜닝됨.

   더 많은 편향이 낮은 2라운드 상수들이 있으며, 그 중 일부는 lowbias32보다 더 좋음.

    3라운드 함수

   이 구조에서 multiply-xorshift를 한 라운드 더 추가하면 신중하게 선택한 매개변수로 이론적인 편향 한계에 도달할 수 있음. 예를 들어, 이 해시 함수는 완벽한 PRF와 구별할 수 없음.
     * triple32는 hash(0) = 0 이슈를 해결할 뿐만 아니라 편향을 더 낮춤.
     * 더 많은 편향이 낮은 3라운드 상수들이 있음.

  정확한 편향 측정

   -E 모드는 주어진 해시 함수(-p 또는 -l)의 편향을 평가함. 기본적으로 Prospector는 함수의 편향을 빠르게 평가하기 위해 추정치를 사용하지만, 비결정적이며 결과에 많은 노이즈가 있음. 정확한 편향을 소진적으로 측정하려면 -e 옵션을 사용함.
     * -p와 패턴을 사용하거나 hash()라는 함수가 포함된 공유 라이브러리와 -l을 사용하여 검사할 함수를 정의할 수 있음.
     * 64비트 해시 함수에 대한 정확하고 소진적인 테스트는 너무 오래 걸리기 때문에 없음.

  가역 연산 선택

   다음과 같은 가역 연산들을 사용:
     * x = ~x;
     * x ^= constant;
     * x *= constant | 1; (홀수 상수만)
     * x += constant;
     * x ^= x >> constant;
     * x ^= x << constant;
     * x += x << constant;
     * x -= x << constant;
     * x <<<= constant; (왼쪽 회전)
     * x = bswap(x) (높은 바이트와 낮은 바이트 교환)

   기술적으로 x = ~x는 x ^= constant에 의해 커버됨. 그러나 ~x는 독특하게 특별하고 특히 유용함.

  16비트 해시

   16비트 해시에 대한 제약 조건이 다르기 때문에 이러한 해시를 생성하기 위한 별도의 도구인 hp16이 있음.
     * 32비트/64비트 Prospector와 달리 이 구현은 완전히 이식 가능하며 거의 모든 시스템에서 실행됨.
     * 128KiB S-box 생성 및 평가도 가능함.
     * 16비트 해시는 빠른 곱셈 명령이 없는 기계에서 더 필요할 가능성이 있으므로 탐색 중에 특정 연산을 생략할 수 있음(-m, -r).

   몇 가지 흥미로운 결과들:
     * 2라운드 xorshift-multiply 해시
     * 3라운드 xorshift-multiply 해시
     * 곱셈이 없는 해시 (xorshift-add만 사용)

   좋은 3라운드 xorshift 해시(hp16 -Xn3을 통한 짧은 검색)는 좋은 S-box(hp16 -S)에 근접함.

   16비트 연산을 할 때는 C 정수 승격 규칙에 주의해야 함. 이 프로그램에서 출력하는 C 프로그램은 필요한 경우 16비트 연산을 ""unsigned int""로 승격하는 데 주의를 기울임.

GN⁺의 의견

     * 해시 함수의 안전성은 암호학과 컴퓨터 보안에서 매우 중요한 역할을 하므로, 이런 탐색 도구는 연구에 큰 도움이 될 것 같음. 특히 무작위 탐색을 통해 편향이 낮은 해시 함수를 찾아내는 것이 흥미로움.
     * 그러나 단순히 통계적 특성만으로 해시 함수의 안전성이 보장되는 것은 아님. 암호학적 해시 함수는 PreImage Resistance, Second PreImage Resistance, Collision Resistance 등 다양한 공격에 대해 안전해야 하므로, 이에 대한 분석도 필요할 것 같음.
     * 16비트 해시 함수는 IoT나 임베디드 시스템 같은 제한된 환경에서 유용할 것 같음. 곱셈 명령이 없는 CPU에서도 사용할 수 있도록 ADD/XOR/SHIFT만 사용한 해시 함수를 만들 수 있다는 점이 인상적임.
     * 해시 함수 설계에 Hill Climbing이나 유전 알고리즘 같은 발견적 탐색 기법을 적용한 것도 신선한 아이디어임. 암호 알고리즘 설계에 AI 기술을 접목하려는 시도가 활발한데, 이런 최적화 기법들이 앞으로 더 중요한 역할을 할 것 같음.
     * 다만 Hash Function이 가진 한계로 인해 아무리 Avalanche 특성이 좋더라도 암호학적으로 안전하다고 말하긴 어려울 것 같고, 이는 이 프로젝트의 한계로 보임. 그래도 이런 도구를 통해 기존 해시 함수의 문제점을 분석하고 개선하는 데 도움이 될 수 있을 것임.

        Hacker News 의견

     * 해당 개발자의 코드를 좋아하는 이유
          + JSON 라이브러리, 옵션 파싱 라이브러리, 분기 없는 UTF-8 디코더, lock-free 스택, trie 라이브러리 등이 마음에 듦
          + 위의 라이브러리들이 모두 Unlicense로 공개된 점이 마음에 듦
     * MurmurHash 개발자의 코멘트
          + multiply-shift-xor 연산이 오랫동안 잘 버텨온 것이 흥미로움을 표현
     * 자동 해시 함수 탐색에 대한 생각 공유
          + SMHasher3와 연동하여 출력을 자동으로 평가하는 것이 좋을 것 같음
               o 속도를 위해 일부 테스트만 사용하고 빠르게 실패할 수 있음
          + 64비트와 128비트 해시로 확장하는 것도 좋을 것 같음 (검색 공간이 더 크긴 함)
          + Rain 라이브러리에서 64비트 소수의 곱셈에 대한 눈사태 효과를 측정하는 NodeJS 코드를 만듦
     * 1brc 문제를 Go로 구현한 경험 공유
          + 각 역을 충돌 없이 자체 버킷에 넣는 커스텀 완전 해시 함수를 찾으려 했으나, 프로그램 시작 전에 데이터에 맞춰 해시 함수를 커스터마이징할 수 없다는 규칙 때문에 포기함
          + 무작위 상수를 확인하고 충돌하는 버킷 수와 충돌 수에 따라 지금까지 찾은 최상의 상수를 출력하는 테스트 도구를 만듦
               o 약 40%의 채우기 비율로 단 2개의 충돌 값만 있는 1개의 버킷으로 줄일 수 있었음
               o 다른 상수와 관계없이 이동할 위치 수에 대해 유사한 값이 최고 성능 상수에 포함되었다는 점이 흥미로웠음
     * 이 코드가 멋진 이유와 사용 용도에 대한 설명 요청
     * 정확히 무엇을 하는 코드인지, 최고의 해시 함수를 찾는 것인지, 그렇지 않다면 왜 매번 실행할 때마다 최고의 해시 함수가 바뀌는지에 대한 의문 제기
     * 특정 범위 내의 정수 값에 대해 좋은 해시 함수를 발견하는 메커니즘에 대한 정보 요청
          + 예를 들어 10,000에서 200,000 사이의 정수 값을 알고 있고, 이를 최적의 해시 버킷 수로 해싱하고 싶은 경우
     * 가역 연산으로 제한하면 수학적으로 좋은 점이 있지만 많은 것들이 배제된다는 의견
          + 입력 집합을 미리 알고 있는 완전 해싱에 대해 생각했음
          + 일반적으로 상수 배열을 사용하지만, 입력이 이미 작은 정수인 경우 더 압축할 수 있는지 알고 싶었음
          + 약 100개의 기본 연산 목록을 작성했지만 지루해져서 프로젝트를 진행하지 않았음
     * 두 곱셈에 동일한 상수를 사용하면 코드 크기가 줄어들어 계산 속도가 약간 빨라질 수 있다는 의견
     * 이 함수들이 암호화 연산에 적합하지 않다는 것을 인정하면서도, 측정된 ""편향""이 암호 분석에 어떤 영향을 미치는지에 대한 질문
          + 차분 암호에 익숙한 사람이 설명해줄 수 있는지 궁금해함
          + 편향이 낮은 해시 함수가 더 적은 라운드 또는 계산으로 암호 분석을 무력화시킬 수 있는지 궁금해함
          + 이 도구가 더 나은 암호학적 해시 함수를 찾는 데 도움이 될 것인지 궁금해함
     * 비슷한 프로젝트 소개
          + 속도는 느리지만(인터프리터 사용) 함수의 품질이 더 좋음
          + 그러나 기존의 해시 함수보다 나은 것은 찾지 못했음
"
"https://news.hada.io/topic?id=14641","사모펀드의 휠체어 시장 지배로 사용자들, 수개월간 수리 대기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   사모펀드의 휠체어 시장 지배로 사용자들, 수개월간 수리 대기

     * 전동휠체어 사용자들은 휠체어 수리에 오랜 시간이 걸려 이동성이 저하되는 문제를 겪고 있음
          + 코네티컷 주에서는 평균적으로 거의 2달이 걸림
          + 전문화된 휠체어 수리 기술자가 부족하기 때문
          + 대기업 Numotion과 National Seating & Mobility(NSM)가 작은 수리점들을 인수하며 시장을 장악함

사설 지분 투자로 인한 문제

     * Numotion과 NSM은 10년 넘게 사모펀드 회사의 소유였으나, 최근 몇 년간 새로운 PE 소유주로 바뀜
          + AEA Investors가 2018년 Numotion을, Cinven이 2019년 NSM을 인수
     * 코네티컷의 휠체어 사용자들은 이러한 인수 합병 이후 서비스 품질이 저하되었다고 말함
     * 그러나 두 회사 모두 최근 몇 년간 수백만 달러의 연간 이익을 냈음에도 불구하고, 경영진들은 수리 대기 시간을 줄이기 위해 더 많은 인력을 고용할 자금이 없다고 주장

장기 수리 시간의 피해

     * 맞춤형 휠체어는 일반적으로 5년간 사용되지만, 그 기간 동안 한두 번의 대규모 수리가 필요함
     * 비공식 설문 조사 결과, 소비자의 75% 이상이 수리를 위해 최소 한 달을 기다렸음
     * 대여 휠체어가 제공되기는 하지만, 잘 맞지 않는 경우가 많음
     * 장시간 기다리는 동안 휠체어 사용자들은 건강 악화, 사고 위험 증가 등의 피해를 입게 됨

개선을 위한 노력

     * 코네티컷 주에서는 초당적 태스크포스가 구성되어 개선안을 마련하고 입법화를 추진 중
     * 수리 대기 시간 개선을 위해서는 공급망 확보, 보험 사전 승인 제거, 팬데믹 기간 밀린 수리 처리 등이 필요
     * 그러나 주 정부의 재정 상황으로 인해 입법안이 약화될 것으로 예상됨
     * 휠체어 사용자들은 정비소를 직접 방문하면 수리 시간을 단축할 수 있지만, 이동이 어려운 문제가 있음

GN⁺의 의견

     * 휠체어는 장애인들에게 필수적인 의료 기기로, 장기간 수리 지연은 심각한 인권 침해임. 주 정부와 연방 정부 차원의 제도적 개선이 시급해 보임
     * 사모펀드의 과도한 이윤 추구로 인해 소비자 피해가 발생하는 구조적 문제를 개선하기 위한 규제와 감독이 필요할 것으로 보임
     * 수리 서비스 개선을 위해서는 정비 기술자 양성, 적정 임금 보장 등 장기적 투자가 수반되어야 함. 휠체어 제조사들의 사회적 책임 이행이 요구됨
     * 휠체어 사용자가 직접 수리할 수 있도록 Right to Repair와 같은 법안 도입을 검토해볼 만함
     * IoT, 3D 프린팅 등 기술을 활용하여 맞춤형 휠체어를 저렴하고 빠르게 제작하는 방안도 연구해볼 수 있을 것임

        Hacker News 의견

     * 전동휠체어의 가격은 보통 $65,000 정도이며, 6년마다 교체하는 것을 목표로 함. 부품 교체의 어려움으로 인해 일부 휠체어 사용자들은 표준 부품을 사용하는 오픈소스 휠체어 프로젝트를 시작함.
     * 사모펀드(Private Equity)는 규제, 컴플라이언스 요구사항 등의 진입장벽이 가격 인상에 가장 효과적인 '해자(moat)'임을 발견하고, 이를 무자비하게 악용하고 있음.
     * 대부분의 사람들이 휠체어라고 하면 떠올리는 것과 휠체어 사용자가 독립적으로 생활하기 위해 필요한 것의 차이를 잘 보여주는 만화가 있음.
     * NSM(국립 좌석 및 이동성)에서 수동 휠체어를 맞춤 제작했지만, 규격에 맞지 않아 사용할 수 없었음. NSM에 수정을 요청했으나 제대로 도움을 받지 못했고, 주문하지 않은 부품에 대한 가짜 청구서까지 받았음.
     * 오클라호마주에서는 휠체어 맞춤 전문가의 2/3 정도가 NSM이나 NuMotion의 직원임.
     * 사모펀드(PE)가 망치지 않은 것이 있는지 의문이 들 정도. 이제는 불법으로 규정해야 한다고 느껴짐.
     * 휠체어 설계, 제작, 부품 조달 등을 할 수 있음. 이 문제를 해결하고 싶은 사람은 연락 바람.
     * 사모펀드(PE)는 많은 자금을 사용해 시장과 정치를 통제하는 새로운 형태의 봉건제도와 같음. IT 노동자들은 계속 노동해야 함.
     * 문제는 규제 자체가 아니라, 규제가 중소기업이 감당하기에 충분히 간단하거나 저렴하지 않다는 것임.
     * 사모펀드가 노인 요양원 등 다양한 산업에 미치는 부정적 영향에 대해 더 알고 싶다면 'Plunder'라는 책을 추천함.
"
"https://news.hada.io/topic?id=14672","Traefik, 컨테이너를 사용하지 않더라도 주목할 만한 리버스 프록시 및 로드 밸런서 솔루션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Traefik, 컨테이너를 사용하지 않더라도 주목할 만한 리버스 프록시 및 로드 밸런서 솔루션

컨테이너를 사용하지 않더라도 Traefik을 살펴봐야 하는 이유

  Traefik이 알려진 점

     * Traefik은 마이크로서비스 세계를 돕는 것이 목표임
     * 많은 유튜버들이 Docker나 Kubernetes와 같은 컨테이너 인프라를 소유하고 있다고 공유함
     * Traefik은 컨테이너로 실행되며, Docker 소켓을 Traefik 컨테이너에 마운트하여 Traefik을 사용하여 노출하려는 다른 컨테이너를 자동 감지할 수 있음
     * 라벨을 통해 특정 컨테이너에 프록시 동작을 구성할 수 있음
     * Traefik은 Let's Encrypt에서 TLS 인증서를 자동으로 요청하고 새 컨테이너의 존재를 감지하는 즉시 서비스를 사용할 수 있게 함

  컨테이너를 사용하지 않는 경우에도 Traefik이 유용한 이유

    일반적인 오해: 컨테이너 엔진이 필요하지 않음

     * Traefik은 컨테이너 엔진에서 실행될 필요가 없으며, 서비스도 컨테이너 엔진에서 실행될 필요가 없음
     * Traefik은 Golang으로 작성되었으며 단일 실행 파일로 컴파일됨
     * Golang으로 작성되고 단일 바이너리로 컴파일되는 소프트웨어를 만나면 정말 좋은 느낌이 듦
     * 배포가 쉽고 완전한 제어를 유지할 수 있음

    일반적인 오해: 설정 파일도 지원함

     * 컨테이너를 사용하지 않는 경우 컨테이너 라벨을 사용할 수 없지만, 라벨은 혼란스럽고 읽기 어려움
     * Traefik은 설정 파일로도 구성할 수 있음
     * Traefik은 인증서 공급자(예: Let's Encrypt)와 엔트리 포인트(Traefik이 수신 대기하는 포트)가 포함된 ""정적"" 구성과 라우터, 서비스 및 미들웨어가 포함된 ""동적"" 구성으로 구성을 분할함
     * Traefik은 파일 시스템 이벤트를 수신하고 동적 부분을 핫 리로드할 수 있음

    문서화가 잘되어 있음

     * Traefik이 기반으로 하는 모든 개념을 명확하게 설명함
     * 관련 페이지 시작 부분에서 선택한 인스턴스 구성 방법에 대한 구성 예제가 있음
     * 문서는 대부분의 요구 사항을 다룸
     * 사이드바가 도움이 됨

    Traefik은 견고하고 잘 설계된 것으로 보임

     * Traefik은 구성이 이치에 맞지 않으면 경고하며 아직 무작위 문제가 발생하지 않음
     * Traefik은 기본적으로 많은 로그를 기록하지 않는 것 같지만, 요청이 수행되는 방식을 쉽게 이해할 수 있으며 좌절하지 않고 빠르게 시작할 수 있음

  정말 마음에 드는 기능

    TLS 전달 및 PROXY 프로토콜

     * Traefik은 TLS 전달 및 HAProxy의 PROXY 프로토콜(입력 및 출력)을 지원함
     * TLS 전달은 자체 TLS 인증서를 제공하는 웹 서비스로 트래픽을 전달할 수 있음을 의미함
     * 프록시에서 TLS를 종료하지 않고도 서비스에서 직접 Let's Encrypt에서 요청할 수 있음
     * PROXY 프로토콜은 사용자가 먼저 프록시에 도달하여 손실되는 정보를 더 안전하게 전송하는 방법임
     * PROXY 프로토콜은 대상 서비스에서도 지원해야 하지만 Apache2와 Nginx(따라서 PHP)의 경우에는 그렇고 프로토콜을 지원하는 서비스 목록이 증가하고 있음

  Traefik 사용 시 아쉬운 점

    인증

     * NGINX에서는 Vouch Proxy를 사용하여 Azure AD로 특정 서비스를 보호함
     * Traefik은 NGINX의 인증과 유사한 ForwardAuth를 지원하지만, Vouch Proxy는 아직 Traefik에서 작동하지 않음
     * Keycloak 인스턴스를 롤아웃하고 AAD와 통합한 다음 ForwardAuth에 사용할 수 있지만, 해당 Keycloak 인스턴스를 안전하고 최신 상태로 유지하고 먼저 설정해야 함
     * traefik-forward-auth는 자주 추천되지만 2020년 6월에 마지막 업데이트가 있었고 개발자가 GitHub에서 사라졌으며 종속성을 업데이트해야 함
     * 과거에 oauth2-proxy에 대해 나쁜 경험이 있었음
     * HTTP2/3, 시간 초과, 본문 크기 및 WebSocket과 같은 것들은 사용자와 서비스 사이의 모든 프록시에서 구성이 필요하므로 프록시에 프록시하는 것은 너무 오류가 발생하기 쉬움
     * Traefik ForwardAuth는 간단해 보이므로 AAD와 통합하기 위한 자체 간단한 도구를 작성하거나 traefik-forward-auth를 포크하고 감사한 다음 종속성을 업데이트해야 함

    사용자 에이전트 및 IP 주소 차단

     * archive.org에서 내부 서비스를 보관하는 것을 원하지 않음
     * robots.txt 및 유사한 헤더는 Archive.org의 금지에 효과가 없으므로 크롤러를 차단하는 방법은 ""archive.org_bot"" 사용자 에이전트를 차단하거나 IP 범위를 차단하는 것뿐임
     * Traefik에서는 타사 플러그인을 통해서만 사용자 에이전트 또는 IP 주소를 차단할 수 있음
     * 타사 플러그인은 업데이트 시 염두에 두어야 하며 보안 취약성을 유발할 수 있으므로 선호하지 않음
     * IPAllowList 미들웨어를 사용하여 IP를 차단하고 차단하려는 IP를 제외한 모든 것을 허용할 수 있음
     * IP 범위를 계산할 수 있으며 직접 차단하는 것보다 나쁘지 않지만 남은 것만 보고 정확히 차단된 서브넷을 볼 수 없으므로 매우 우아하게 느껴지지는 않음

GN+의 의견

     * Traefik은 컨테이너 사용 여부와 관계없이 매력적인 리버스 프록시 솔루션으로 보임. 특히 Golang으로 작성되고 단일 실행 파일로 컴파일되어 배포와 관리가 용이한 점이 장점임.
     * 문서화도 잘 되어 있어서 Traefik의 개념을 이해하고 구성 예제를 찾는데 큰 도움이 될 것 같음.
     * TLS passthrough나 PROXY 프로토콜 지원 등 고급 기능도 잘 지원하는 것으로 보임.
     * 다만 인증 부분에서는 아직 만족스러운 솔루션이 없는 듯한데, 자체 인증 서버를 개발하거나 기존 프로젝트를 개선하는 노력이 필요해 보임.
     * 사용자 에이전트나 IP 차단 기능도 기본으로 제공되면 좋겠지만, 외부 플러그인을 사용하는 것 외에는 우아한 방법이 없어 보임.
     * NGINX의 대안으로 Traefik을 검토해 볼만한 가치가 충분히 있어 보임. 특히 NGINX의 설정이 복잡하다고 느끼는 사용자라면 Traefik의 간결함이 매력적일 것임.

        Hacker News 의견

     * Traefik에 대한 장단점 비교
          + 장점: Let's Encrypt 자동 통합으로 인해 NGINX에서 Traefik으로 마이그레이션함
          + 단점: 문서화가 잘 되어 있지 않고 로깅도 부족하며 인증서 재생성이 간헐적으로 실패해 프로덕션 장애를 일으킴
          + 결국 다시 NGINX로 돌아감
     * Traefik 대신 Caddy 사용을 선호하는 의견
          + Caddyfile이 Traefik의 YAML 설정보다 관리하기 훨씬 쉬움
          + 다양한 플러그인 지원 (예: Caddy의 Coraza WAF 플러그인)
     * Traefik이 NGINX 대비 장점을 가질만한 사용 사례에 대한 논의
          + 컨테이너 몇 십개 정도의 소규모 Docker 호스트 환경에서는 NGINX Proxy Manager로도 충분함
          + K3s에서 기본으로 Traefik이 설정되어 빠르게 K8s 클러스터를 테스트용으로 구성하는데 유리함
     * Caddy에서 Traefik으로 전환을 고려 중인 경우
          + Caddy의 장점: Docker 레이블 기반 자동 설정, TLS 인증서 관리, DNS 자동 설정 등
          + Caddy의 단점: 워크로드 재시작시 Caddy가 완전히 재시작되어 일시적으로 서비스 중단됨, 와일드카드 인증서 설정이 복잡함
          + K8s 환경에서 Traefik을 사용해본 경험이 좋아 개인 프로젝트에도 적용 검토 중
     * Traefik의 동적 설정 및 디버깅의 어려움으로 인해 Caddy로 전환한 경험담
          + Caddy가 간결하고 레이어가 적어 설정이 훨씬 쉬움
     * Traefik을 오랫동안 사용하면서 정적 설정의 장점을 깨달음
          + Docker 레이블을 통한 동적 설정의 어려움과 디버깅의 번거로움
          + 템플릿 엔진을 통해 호스트/타겟/포트 조합의 간단한 정적 설정 파일 생성
          + Ansible로 설정 파일 생성 및 배포 자동화
     * HAProxy와의 비교
          + 10년 이상 HAProxy를 사용해왔으며 런타임 API를 통한 동적 설정 등 클라우드 시대에 맞게 현대화됨
     * Traefik 사용시 가장 큰 장점과 단점
          + 장점: 컨테이너 레이블을 통해 설정이 전달되어 Traefik 설정 자체를 거의 수정할 필요가 없음
          + 단점: Traefik의 정확한 발음을 알기 어려움 (""trey-feek"" 등으로 발음하고 싶어짐)
"
"https://news.hada.io/topic?id=14759","국내 DNS 에서 *.vercel.app 도메인 접근 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    국내 DNS 에서 *.vercel.app 도메인 접근 불가

     * 최근 국내에서 Vercel 접속 시 속도 이슈가 있었던 상황에서 국내 DNS 에서 *.vercel.app 도메인에 대한 차단이 이루어진 것으로 보임
     * 이전에 문제가 있었던 국내 ISP CloudFlare R2 차단 때처럼 해당 DNS도 동일한 이슈가 아닌가 싶음
     * 언제 해결될지는 미지수이지만, 프로젝트 내 도메인 연결 시 접근 가능(*.vercel.app만 아니면 되는 것 같음)

   저도 배포된거 다 해당 이슈에 빠졌네요ㅠ

     최근 국내에서 Vercel 접속 시 속도 이슈

   일부 Vercel 네트워크에 일부 IP 접속이 차단된 케이스:
   https://twitter.com/KrComet/status/1786931094178410695

   추측이지만 비슷한 근거로 동시에 진행된 조치가 아닌가 싶네요.. 참;;

   저번에 문제된 KT/SKT/SKB 가 아니라 LG Dacom 으로 보고된거 보면, 공문같은게 전달됐고 조치하는 시기나 방식에 통신사별로 차이가 생긴게 아닌가 싶어요.

   저도 동일한 생각이 듭니다. 당시에도 76.76.21.22 IP 주소가 문제되었는데, 이번에도 그러한지 확인을 해볼 필요가 있을 것 같네요. 스레드에 댓글 올려두겠습니다.
"
"https://news.hada.io/topic?id=14743","Stack Overflow 사용자들, OpenAI 제휴 후 답변 삭제 잇따라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Stack Overflow 사용자들, OpenAI 제휴 후 답변 삭제 잇따라

Stack Overflow와 OpenAI의 파트너십 발표에 대한 사용자들의 반발

     * Stack Overflow와 OpenAI가 최근 파트너십을 발표한 것에 대해 일부 사용자들이 반발하고 있음
     * 일부 사용자들은 Stack Overflow에서 자신의 콘텐츠(질문과 답변)를 삭제하려 했으나, 웹사이트에서 쉽게 삭제할 수 없어 어려움을 겪음
     * 이에 해당 사용자들은 Stack Overflow와 OpenAI 간의 협력에 항의하기 위해 자신의 질문이나 답변을 편집하여 ""훼손""하기로 결정함

  Stack Overflow와 OpenAI 파트너십 개요

     * Stack Overflow와 OpenAI는 새로운 API 파트너십을 통해 협력하기로 함
     * 이 협력은 Stack Overflow의 방대한 지식 플랫폼과 OpenAI의 고급 AI 모델을 결합하여 개발자에게 제공하는 것을 목표로 함
     * OpenAI 사용자는 OverflowAPI 액세스를 통해 Stack Overflow의 정확하고 검증된 데이터를 활용하여 더 빠른 문제 해결이 가능해지고, 우선순위 작업에 집중할 수 있게 됨
     * 또한 OpenAI는 ChatGPT에 Stack Overflow의 검증된 기술 지식을 통합하여 사용자가 신뢰할 수 있는 정보와 코드에 대한 액세스를 향상시킬 예정임

  AI에 대한 반발

     * Stack Overflow를 비롯한 Stack Exchange 웹사이트들은 커뮤니티에 매우 유용한 도구이지만, 자신의 콘텐츠가 AI 학습에 사용되어 출처 표시 없이 답변을 제공하는 데 사용되는 것에 대해 일부 사용자들은 그다지 기쁘지 않음
     * 이는 오늘날 Stack Overflow뿐만 아니라 인터넷 전반에 걸쳐 콘텐츠 작성자들이 흔히 보이는 반응임
     * 현재 인터넷은 블로그 트래픽과 페이지 뷰 감소, AI를 사용한 답변 검색 증가, 일부 사람들의 검색 엔진 사용 감소 등 변화의 시기를 겪고 있음
     * ChatGPT 및 기타 LLM(대형 언어 모델)의 새로운 기능에 적응하고 우리가 알고 있는 인터넷에 대해 이 모든 것이 의미하는 바에 대한 불확실성이 공존하는 긴장의 시기임
     * Stack Overflow와 OpenAI 파트너십에 대한 최근의 반발은 사람들이 AI의 대규모 채택과 그로 인한 급격한 변화에 부정적으로 반응하는 한 예에 불과함

  Stack Overflow가 콘텐츠 제거로 인해 계정을 차단하고 있는가?

     * 여러 사용자가 트위터와 Hacker News에 글을 올려 자신이 이전에 Stack Overflow 웹사이트에 게시한 질문과 답변을 여러 개 삭제하려고 시도한 후, Stack Overflow 중재자로부터 계정이 7일 동안 보류되거나 일시적으로 차단되었다는 이메일을 받았다고 보고함
     * Stack Overflow 중재팀의 이메일에 따르면, 다른 사람에게 유용할 수 있는 콘텐츠를 삭제하거나 제거하는 것은 전체 커뮤니티에 혼란을 줄 수 있음. 설령 이 콘텐츠가 작성자에게 더 이상 유용하지 않더라도 그러함
     * Stack Overflow의 비즈니스와 전체 Stack Exchange 네트워크는 웹사이트가 유용성을 유지하기 위해 사용자가 생성한 콘텐츠에 의존하기 때문에, 사용자가 대량으로 콘텐츠를 제거하는 것을 원하지 않는 비즈니스적 이유는 분명함
     * Stack Overflow가 계정을 정지하고 경고 이메일을 보내는 것은 아마도 새로운 일이 아닐 것임. 플랫폼을 보호하기 위해 이러한 정책을 오랫동안 시행해 왔을 것임
     * 사용자가 대량의 콘텐츠를 쉽게 훼손하거나 삭제할 수 있다면 플랫폼에 상당한 혼란을 줄 수 있으므로, 콘텐츠를 보호하는 것이 Stack Overflow와 커뮤니티의 최선의 이익임
     * 또한 이는 사용자의 행동에 의해 트리거된 자동화된 이메일일 가능성이 높으며, 콘텐츠에 대해 Stack Overflow에 직접 연락하는 것이 좋은 조치가 될 것임
     * 지금까지 이러한 계정 정지에 대한 Stack Overflow의 답변은 보지 못했음. 또한 실제로 이를 시도하는 사용자 수가 얼마나 되는지 불분명하므로 Stack Overflow와 OpenAI 파트너십에 대한 큰 반발은 없을 수 있음
     * AI 도입의 전진 모멘텀이 당분간 둔화되지 않을 것이므로 이 모든 것이 앞으로 어떻게 전개될지 지켜보는 것이 흥미로울 것임
     * 나머지 Stack Overflow 사용자들은 항의의 표시로 자신의 콘텐츠를 삭제하는 것을 권장하지 않음

GN⁺의 의견

     * Stack Overflow와 OpenAI의 파트너십은 AI 기술의 발전과 개발자 커뮤니티에 큰 영향을 미칠 것으로 보임. 하지만 개별 개발자의 지적재산권 보호와 AI 학습 데이터로의 활용 사이의 균형을 어떻게 맞출지는 해결해야 할 과제임
     * 개발자들은 자신의 지식을 공유하면서도 그에 대한 정당한 보상을 받을 수 있어야 함. Stack Overflow는 이를 위한 적절한 보상 체계를 마련할 필요가 있어 보임
     * 개발자들이 자발적으로 지식을 공유하도록 장려하기 위해서는 커뮤니티에 대한 신뢰가 매우 중요함. 이번 사태로 인해 Stack Overflow에 대한 개발자들의 신뢰가 훼손되지 않도록 조심스러운 접근이 필요해 보임
     * 한편 ChatGPT 등 AI 기술을 활용한 개발 생산성 향상은 개발자들에게도 큰 메리트가 있음. 개인정보 보호 등 AI 기술 활용의 부작용을 최소화하면서도 장점을 극대화할 수 있는 방안을 모색해 나가야 할 것임
     * 유사한 이슈로 GitHub Copilot을 둘러싼 저작권 논란이 있었음. 개발자 커뮤니티 내에서 활발한 토론을 거쳐 모두가 납득할만한 합의점을 찾아가는 노력이 필요해 보임

        Hacker News 의견

     * StackOverflow의 사용자 컨텐츠 라이선스 변경 문제:
          + 약 5년 전, StackOverflow는 사용자가 제출한 모든 컨텐츠를 CC-BY-SA 4.0으로 제공한다고 잘못 선언함. 원래 사용자 계약은 CC-BY-SA 3.0이었음.
          + 2018년 중반부터 2019년 초까지 코드와 비코드에 적용되는 라이선스에 혼란이 있었음.
          + 2019년 초에 사용자들에게 다시 로그인하고 새로운 라이선스 계약을 수락하도록 요청함.
          + 현재는 2018년 5월 5일 이전 컨텐츠는 CC-BY-SA 3.0, 이후는 CC-BY-SA 4.0이 적용됨.
     * StackOverflow의 AI 스크래퍼 및 OpenAI 제공 문제에 대한 사용자 의견:
          + 자신의 답변이 AI 학습에 사용되는 것을 괜찮게 생각하는 사용자도 있음. ChatGPT 같은 도구에 큰 가치를 제공한다고 봄.
          + OpenAI 제휴가 사용자의 컨텐츠 삭제 문제의 핵심은 아님. 라이선스상 컨텐츠 삭제는 환영받지 못했고 대개 번복됨.
          + CC-BY-SA 라이선스로 인해 StackOverflow가 허용하지 않더라도 다른 사람이 복제할 수 있어 컨텐츠 삭제가 어려움.
          + 사용자는 이름을 삭제하거나 개인정보를 편집할 순 있지만, 양질의 컨텐츠 자체를 나중에 제거할 순 없음.
     * 영리 기업이 ""무료"" 제품을 관리하는 문제:
          + 수익을 내야 하므로 오픈소스 윤리에 구애받지 않음. 사용자는 오픈소스에 기여한다고 생각하지만 실상은 아님.
          + StackExchange의 행위는 아마 합법적이겠지만, 기여자는 이해관계자가 아니며 상업적으로 지속가능한 수준의 기여자만 유지하면 됨.
          + 무료로 제공되는 제품의 경우 사용자가 곧 제품이 되며, 어떻게 수익화되는지 모른다면 언젠가 실망하게 될 것임.
     * AI 학습에 특화된 새로운 컨텐츠 라이선스 필요성:
          + 상용 AI 학습에 사용된 컨텐츠의 경우 AI 가중치를 공개하도록 하는 등 GPL 정신의 라이선스 등장 가능성.
     * StackOverflow의 데이터셋 판매 모델:
          + 애초에 StackOverflow는 사용자 중심이 아닌 SEO용 데이터셋 구축에 주력해 왔음. OpenAI 딜로 인해 크게 달라진 건 없음.
          + LLM의 등장으로 StackOverflow의 위기는 불가피하므로, 붕괴 전에 OpenAI에 팔아 얻을 걸 얻는 게 나음.
     * CC BY-SA 라이선스의 ShareAlike 조항의 중요성:
          + 파생물을 만들 경우 동일한 라이선스로 배포해야 한다는 조항이 매우 광범위하고 모호함. ""build upon""의 정의가 많은 사용자에게 매력적이지 않을 수 있음.
     * LLM과 StackOverflow의 장단점 비교:
          + LLM 덕분에 StackOverflow를 가급적 피할 수 있게 됨. StackOverflow는 엘리트주의와 실질적 도움보다는 절차를 중시하는 독성으로 가득 차 있음.
          + LLM이 가끔 틀린 답변을 하는 것에 대한 불만이 있지만, StackOverflow의 답변 중에도 완전히 틀리거나 질문과 무관한 것들이 많음. 오래된 답변도 많음.
          + LLM의 작문 능력과 StackOverflow 사용자의 검증이 결합된다면 가장 이상적일 것임. 단순히 인터넷 포인트 획득이 목적인 사람에겐 좋지 않겠지만 사용자에겐 최고일 것임.
     * 컨텐츠 대량 삭제에 대한 StackOverflow의 자동 경고 메시지:
          + 최소한 2017년부터 있었던 것으로 보이며, 대량 삭제 감지 시 자동으로 표시되는 듯함.
          + StackOverflow가 포럼보다는 위키에 가까운 면이 있어 이러한 정책의 이유는 이해할 만함. OpenAI 반대 시위를 잠재우기 위해 도입된 것 같지는 않음.
     * 개인적으로는 지난 2년간 StackOverflow를 거의 사용하지 않았다는 의견도 있음.
"
"https://news.hada.io/topic?id=14628","Cognition: 메타프로그래밍을 재정의하는 새로운 antisyntax 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Cognition: 메타프로그래밍을 재정의하는 새로운 antisyntax 언어

코그니션 프로그래밍 언어 소개

  문제 제기

     * Lisp 프로그래머들은 S-표현식 코드와 기능적인 매크로 시스템으로 메타프로그래밍과 일반화된 시스템을 만들 수 있다고 주장함
     * 하지만 Lisp에는 근본적인 문제가 있음
          + 메타프로그래밍과 프로그래밍이 동일하지 않아서 Lisp에는 항상 엄격한 문법이 존재함 (괄호나 look-ahead를 위한 특정 문자들)
          + 왼쪽 괄호는 Lisp에게 오른쪽 괄호를 만날 때까지 계속 읽어야 함을 알려줌
          + 이는 왼쪽/오른쪽 괄호가 언어 내에서 변경 불가능하게 만듦 (개념적으로는 아니지만 일부 구현에서는 불가능)
          + 더 중요한 것은, 이러한 토큰들이 구분되는 순서를 사후에 변경하는 것이 문자열 처리 없이는 불가능함
     * 다른 언어들도 특정 토큰을 보고 앞으로 읽어야 할 내용을 결정하는 다른 방식을 가지고 있음
          + 이 과정을 문법(syntax)이라고 함
     * Cognition은 완전한 후위 표기법(postfix)을 사용하는 반문법(antisyntax)을 사용하여 다름
          + 이는 연결형 프로그래밍 언어와 유사하지만, 연결형 프로그래밍 언어도 두 가지 주요 문제가 있음
              1. 왼쪽/오른쪽 대괄호 문자 도입 (사실 전위 표기법)
              2. 문자열용 따옴표 문자
          + 이는 일반적인 언어로는 부적합함
          + Lisp의 C 문법 구현에서도 동일한 문제 발견 (이스케이프 문자 남발, 특정 토큰 시작/끝 구분을 위한 공백 문자 필요)
     * Racket은 매크로 시스템을 가지고 있지만 런타임에 동적이지 않고 전처리를 활용함

  Cognition 소개

     * Matthew Hinton과 함께 몇 달 동안 연구해온 프로젝트
     * 완전한 후위 표기법을 사용하여 알려진 가장 일반화된 문법 시스템 중 하나를 만드는 것이 목표
     * 문법/토큰화/구문 분석에 대한 배경 지식이 필요할 수 있지만, 이해하기 쉽게 설명하려고 노력함
     * 저장소: https://github.com/metacrank/cognition

  Baremetal Cognition

     * Baremetal Cognition은 Brainfuck과 유사하지만 심각한 메타프로그래밍이 가능함
     * 부트스트랩 코드 예제:

ldfgldftgldfdtgldf dfiff1 crank f

     * 공백과 줄바꿈이 중요함
          + 2번째 줄은 df 뒤에 공백
          + 3번째 줄에는 공백 문자
     * 이를 통해 구분자(delimiter)와 무시(ignore)라는 두 가지 새로운 개념 도입 가능

    Tokenization

     * 구분자(Delimiter)는 토크나이저가 토큰의 시작과 끝을 구분하도록 해줌
     * 단일 문자 토크나이저 목록은 공개되어 있어서 Cognition 내부에서 수정하고 읽을 수 있음
     * 무시되는 문자(Ignored character)는 모든 read-eval-print 루프의 첫 번째 단계에서 토크나이저에 의해 완전히 무시됨
          + 즉, 토큰 수집 시작 시 설정된 무시 문자 집합을 건너뜀
     * 기본적으로 모든 문자는 구분자이고 무시되는 문자는 없음
     * 구분자와 무시 문자 목록으로 주어진 문자에 대해 블랙리스트/화이트리스트 토글이 가능 (간결성과 실용성 제공)

    Falias

     * Falias는 스택에 놓일 때 실행되는 단어 목록
     * 모든 Falias는 스택 최상단을 실행 (Stem에서의 eval과 동등)
     * f는 기본 Falias로, 스택에 놓이지 않고 스택 최상단인 d를 실행함
     * d는 구분자 목록을 단어의 문자열 값으로 변경 (즉, l 문자만 구분자에서 제외)
     * 기본 환경에서는 특수 Falias를 제외하고는 어떤 단어도 실행되지 않음

    구분자 주의사항

     * 구분자에는 흥미로운 규칙이 있음
          + 토큰화 루프에서 문자를 무시하지 않은 경우, 구분자 문자는 현재 토큰의 일부로 포함되고 계속 진행됨
          + 이는 싱글릿(singlet)과 대조적임 (토큰에 자신을 포함시키고 건너뛰어서 토큰 수집 종료)
     * 블랙리스트 여부도 설정 가능
          + 구분자, 싱글릿, 무시 문자 목록을 블랙리스트/화이트리스트 할 수 있음
          + 기본적으로 블랙리스트된 구분자, 화이트리스트된 싱글릿, 화이트리스트된 무시 문자는 없음
     * 다른 모든 문자는 현재 토큰의 일부로 수집되며, 구분자나 싱글릿 규칙에 의해 루프가 중단될 때까지 새로운 문자 계속 수집

    부트스트랩 코드 계속

ldf

     * l을 구분자가 아닌 문자로 만듦

gldftgldfdtgldf  dfiff1 crank f

     * d가 구분자이기 때문에 gl이 스택에 놓이고, Falias f가 호출되어 gl이 구분자가 아닌 문자가 됨
     * tgl이 스택에 놓이고 df에 의해 구분자가 아닌 문자가 됨
     * dtgl이 스택에 놓이고 \ndf에 의해 개행(\n)이 유일한 구분자가 아닌 문자가 됨 (개행이 실제 코드에 포함)
     * 구분자 규칙에 의해 공백 문자와 \n이 스택에 놓임 (3번째 줄에 공백 포함)
     * 또 다른 \ \n 단어가 토큰화됨
     * 현재 스택은 다음과 같음 (아래서 위로): 3. dtgl 2. [공백 문자]\n
         1. [공백 문자]\n
     * df는 \ \n을 구분자가 아닌 문자로 설정
     * if는 \ \n을 무시 문자로 설정 (토큰화 시작 시 무시)
     * f는 dtgl을 실행하여 구분자의 화이트리스트/블랙리스트 구분을 저장하는 dflag 토글
     * 이제 모든 구분자가 아닌 문자가 구분자가 되고, 모든 구분자가 구분자가 아닌 문자가 됨
     * 마지막으로 공백과 개행이 토큰의 구분자가 되고, 토큰 시작 시 무시됨
     * 그 다음 1이 토큰화되어 스택에 놓이고, crank 단어가 토큰화된 후 f에 의해 실행됨 (1 토큰은 이 경우 숫자로 취급되지만 Cognition에서는 모든 것이 단어임)
     * 부트스트래핑 시퀀스 완료! crank가 무엇을 하는지는 다음 섹션에서 설명

  부트스트래핑 요약

     * Cognition은 토큰화 방식을 프로그래밍 방식으로 동적 변경 가능
          + 다른 언어에서는 불가능한 일
          + 외부 언어를 위한 토크나이저를 Cognition 내에서 프로그래밍하고 원하는 대로 토큰화 가능
     * 후위 표기법을 사용하고 look-ahead하지 않기 때문에 가능
          + 표현식을 평가하기 전에 하나 이상의 토큰을 구문 분석할 필요 없음
     * Falias를 사용하여 접두사 단어나 기본 단어 실행 없이도 단어 실행 가능

  Crank

     * metacrank 시스템은 스택에 토큰을 실행하는 기본 방법 설정 가능
     * crank 단어는 숫자를 인자로 받아 스택에 n개의 단어를 넣을 때마다 스택 최상단을 실행
     * 예시 코드 (crank 1로 설정된 상태):

5 crank 2
crank 2 crank
1 crank unglue swap quote prepose def

     * crank 1 환경에서는 토큰 평가 시 f 사용 중단 가능
          + 토큰화된 토큰 1개마다 1개가 평가됨
          + 개행과 공백으로 구분된 문법을 프로그래밍했기 때문에 코드를 직관적으로 해석 가능
     * 코드는 5 평가를 시도하며 시작 (빌트인이 아니므로 자기 자신으로 평가)
     * crank는 스택에 5개의 토큰이 놓일 때마다 실행되도록 평가되어 설정
     * 2crank, 2, crank, 1은 모두 스택에 놓임 (crank 5로 설정되어 있어서 crank는 빌트인이지만 실행되지 않음): 4. 2crank 3. 2 2. crank
         1. 1
     * crank는 5번째 단어이므로 실행됨 (crank 1로 설정)
     * unglue는 빌트인으로 스택 최상단 단어(1에 의해 사용)의 값을 가져옴
          + 즉, crank 빌트인과 연결된 함수 포인터를 가져옴
     * 스택은 다음과 같음: 3. 2crank 2. 2
         1. [CLIB]
          + CLIB는 crank 빌트인을 가리키는 함수 포인터
     * swap 실행: 3. 2crank 2. [CLIB]
         1. 2
     * quote (스택 최상단을 인용하는 빌트인) 실행: 3. 2crank 2. [CLIB]
         1. [2]
     * prepose (stem의 compose와 유사하지만 앞에 놓고 VMACRO라고 부르는 것에 놓음) 실행: 2. 2crank
         1. ([2] [CLIB])
     * def 호출
          + 2를 스택에 넣고 crank 빌트인을 가리키는 함수 포인터를 호출하는 2crank 단어 정의
     * VMACRO가 무엇인지, Cognition 스택과 Stem 스택의 차이점 설명 필요

    Stem과의 차이점

     * Stem 스택에서는 단어를 직접 스택에 넣을 수 있음
     * Cognition에서는 단어가 평가되지 않고 컨테이너에 넣어져서 스택에 놓임
          + Stem에서 compose 같은 단어가 단어(또는 단일 단어가 있는 컨테이너)와 다른 컨테이너에서 작동
          + 이는 Cognition의 API를 더 일관성 있게 만듦
     * cd 같은 단어도 이 개념 활용

    매크로

     * Stem 인용과 Cognition 컨테이너의 또 다른 차이점
     * 매크로 평가 시 매크로 내부의 모든 것이 평가되고 crank는 무시됨
     * 단어에 바인딩되면, 해당 단어 평가 시

        Hacker News 의견

   몇 가지 주요 의견들을 요약하면:
     * 문서의 서론 부분에서 Cognition 프로젝트 자체에 대한 설명이 너무 늦게 나옴. 독자의 시간을 아끼기 위해 가장 중요한 내용을 먼저 제시하는 것이 좋음.
     * Racket의 reader 레이어 설정 기능처럼, 문법을 확장하면서도 상호운용성을 유지하는 다른 접근 방식들이 이미 존재함. Cognition의 접근법이 근본적으로 ""더 나은지""에 대해서는 의문이 있음.
     * Common Lisp도 reader macro, macro, compiler macro 등으로 문법을 자유롭게 바꿀 수 있음. 메타프로그래밍은 문법보다는 의미론을 다루는 것이 핵심임.
     * Cognition이 런타임에 문법 구조를 정의하고 재정의하며 들어갔다 나올 수 있는 능력은 아름답고 흥미로움. 진정한 ""사고하는"" 기계를 만들 수 있는 가능성을 열어줌.
     * 문법은 구조를 제공하는 것이므로 문법 자체를 없앤다는 것은 모순임. 지나치게 간결한 문법은 오히려 가독성과 이해성을 해칠 수 있음.
     * 문서 자체의 서술 방식이 다소 장황하고 풍자적인 느낌이 있어서 읽기 어려움. 하지만 깊이 있는 내용을 다루고 있음.
"
"https://news.hada.io/topic?id=14744","OpenAI, 콘텐츠 제작사와의 파트너십 제안 내용 자료 유출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   OpenAI, 콘텐츠 제작사와의 파트너십 제안 내용 자료 유출

     * OpenAI는 Preferred Publisher Program을 통해 뉴스 퍼블리셔에게 파트너십 기회를 제안 중
     * 2023년 7월 Associated Press와 라이센싱 계약을 맺은 것을 시작으로 Axel Springer, The Financial Times, Le Monde, Prisa, Dotdash Meredith 등과 공개적인 파트너십을 체결함
     * OpenAI는 각 퍼블리셔와 개별적으로 협상하며, 모든 계약을 획일적으로 구조화하지는 않는다고 함

Preferred Publisher Program의 주요 구성 요소

    1. ""선별된 고품질 편집 파트너""에게만 제공됨. ChatGPT 사용자가 퍼블리셔의 브랜드와 콘텐츠를 더 쉽게 발견하고 참여할 수 있도록 지원
    2. 채팅 대화에서 우선 배치 및 ""더 풍부한 브랜드 표현"" 제공 및 콘텐츠에 대한 보다 눈에 띄는 링크 처리 제공
    3. PPP를 통해 퍼블리셔에게 라이센스에 대한 금액적 조건도 제공

참여 퍼블리셔가 받을 수 있는 금전적 인센티브

     * 보장 가치: OpenAI가 퍼블리셔의 데이터 백로그에 액세스할 수 있도록 허용하는 대가로 지급되는 라이센스 지불금
     * 변동 가치: 연결된 콘텐츠 또는 표시된 콘텐츠와 상호 작용하는 사용자 수를 기반으로 한 디스플레이 성공 지표에 따라 달라짐
     * 최종 금전적 제안은 보장 가치와 변동 가치를 결합하여 연간 기준으로 구조화될 것임

OpenAI가 얻는 이점

     * 퍼블리셔의 콘텐츠를 학습하고 ChatGPT 제품에 출처와 링크를 포함하여 해당 정보를 표시할 수 있는 라이센스 획득
     * 퍼블리셔를 선호 파트너로 발표하고 이러한 경험을 구축하기 위해 협력할 수 있음

퍼블리셔 콘텐츠 표시 제품

    1. Hover Treatment: 응답의 키워드에 하이퍼링크를 제공하고, 마우스를 올리면 클릭 가능한 탭이 나타남
    2. Anchor Treatment: 사용자 쿼리에 대한 ChatGPT 응답 아래에 브랜드가 지정된 클릭 가능한 버튼이 나타남
    3. In-line Treatment: ChatGPT 응답 텍스트에 더 큰 글꼴의 풀 인용문을 삽입하고 클릭 가능한 브랜드 링크를 포함

GN⁺의 의견

     * PPP 프로그램은 학습보다는 크롤링에 더 중점을 두는 것으로 보임. OpenAI는 이미 이 퍼블리셔들의 아카이브 데이터를 수집하고 학습했을 가능성이 높지만, 현재의 질의에 대답하려면 최신 콘텐츠에 대한 액세스가 필요함
     * 퍼블리셔가 PPP에 참여하면 OpenAI 사용자 경험이 개선되어 링크가 포함된 응답으로 인한 브라우징 참여로 이동할 것으로 예상됨. 이는 퍼블리셔의 수익 증대로 이어질 수 있음
     * 그러나 ChatGPT 응답에 링크와 발췌문을 포함하는 방식은 사용자의 퍼블리셔 웹사이트 방문을 오히려 줄일 수 있음. 최근 The Atlantic의 모델에 따르면 Google과 같은 검색 엔진이 AI를 검색에 통합할 경우 75%의 경우 웹사이트 클릭 없이 사용자의 질의에 답할 수 있을 것으로 예상
     * 많은 뉴스 퍼블리셔들이 OpenAI와 제휴하거나 법적 조치를 취하지 않고 있는 상황에서, OpenAI는 PPP 등의 프로그램을 통해 이를 바꾸려 하고 있음
     * 결국 퍼블리셔들은 OpenAI와의 제휴 여부를 신중히 검토해야 할 것임. 단기적 수익은 늘어날 수 있으나, 장기적으로는 자사 웹사이트 트래픽 감소와 OpenAI에 대한 의존도 심화 등의 부작용도 우려됨

        Hacker News 의견

     * OpenAI의 파트너 프로그램(PPP)에 참여한 퍼블리셔는 채팅 대화에서 우선 배치와 ""더 풍부한 브랜드 표현""의 혜택을 받으며, 더 두드러진 링크 처리로 콘텐츠 혜택을 누림. 많은 사람들이 우려하는 상업 모델의 편향성 문제가 이로 인해 발생할 수 있음.
     * 기업 브랜드와 ""교감""하거나 버거킹 콘텐츠를 ""쉽게 발견""하는 것을 원하는 최종 사용자는 없을 것임. OpenAI가 ""스팸""을 지칭하는 완곡한 표현이 충격적임.
     * AWS 등 일부 기업에게는 자사 데이터셋이 LLM 학습 과정에 포함되도록 보장받는 것이 매우 가치있을 것임. OpenAI 등은 이런 보장에 대해 과금을 시작할 것으로 예상됨.
     * OpenAI는 콘텐츠 제공업체에게 노출 대가를 지불하고 학습 데이터를 얻음. 이는 모델 성능 향상을 통한 수익화를 위한 것이므로, 단순히 콘텐츠를 홍보하기보다는 제품 개선에 활용할 유인이 있음.
     * 이런 광고는 Google의 초기 AdWords와 유사함. 관련성이 보장되는 것처럼 보였지만, 이내 성가신 광고로 변모함.
     * OpenAI가 학습 데이터 출처를 추적하는 연구에 적극적이지 않을 수 있음. 하지만 설명 가능성은 AI를 사회 이익에 부합시키는 데 중요한 역할을 함.
     * ChatGPT가 제품을 추천하면 사용자들은 등을 돌릴 것임.
     * 수익화에 성공하지 못한 과거 AI 비서와 달리, OpenAI가 초기부터 퍼블리셔에게 PPP를 제안한 것은 지속 가능한 장기 비즈니스를 만들겠다는 의지로 보임. 유료 고객, 무료 사용자, 운영비 사이의 균형을 어떻게 유지할지 주목됨.
"
"https://news.hada.io/topic?id=14736","IBM Granite - 코드 작성용 오픈 파운데이션 모델 패밀리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IBM Granite - 코드 작성용 오픈 파운데이션 모델 패밀리

     * 코드 관련 작업(버그 수정, 코드 설명, 코드 문서화)을 위한 decoder-only 코드 모델
     * 116개의 프로그래밍 언어로 학습
     * 두가지 모델군으로 제공(각각 3B, 8B, 20B, 34B 파라미터 사이즈)
          + Granite 코드 베이스 모델: 코드 관련 작업(예: 코드 복구, 코드 설명, 코드 합성)을 위해 설계된 베이스 파운데이션 모델
          + Granite 코드 명령어 모델: 사람의 명령어와 오픈소스 합성으로 생성된 코드 명령어 데이터셋을 결합한 Git 커밋을 사용하여 미세 조정된 Instruction-Following 모델
     * 코드 생성, 설명, 수정, 편집, 번역 등 다양한 종류의 코드 관련 작업에서 경쟁 모델과 비슷하거나 최고의 성능을 달성
     * IBM의 AI 윤리 원칙에 따라 수집된 라이선스 허용 데이터로 학습되었으며, IBM의 법무팀 가이드에 따라 기업내에서 사용가능
"
"https://news.hada.io/topic?id=14677","단순함의 장점에도 불구하고 아쉽게도 복잡성이 더 잘 팔리는 현실 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               단순함의 장점에도 불구하고 아쉽게도 복잡성이 더 잘 팔리는 현실 (2022)

단순함은 장점이지만 안타깝게도 복잡함이 더 잘 팔림

  복잡함이 왜 더 잘 팔리는가?

     * 복잡함은 노력을 의미함
          + 어려운 아이디어와 기술적 세부사항이 있는 논문은 피땀과 눈물을 연상시킴
          + 더 많은 구성요소와 기능을 가진 시스템은 더 적은 시스템보다 더 많은 노력이 필요해 보임
          + 복잡한 결과물은 더 많은 노력이 필요하다고 여겨지므로 만들기가 더 어렵고 가치가 있다고 여겨짐
          + 복잡함에 수반되는 노력 때문에 종종 더 높은 품질로 판단됨
     * 복잡함은 숙련도를 의미함
          + 많은 움직이는 부품이 있는 복잡한 시스템은 설계자가 각 부품에 대한 능숙함과 이를 통합하는 능력이 있음을 시사함
          + 전문용어와 증명으로 가득 찬 이해하기 어려운 논문은 그 주제에 대한 전문성을 보여줌
          + 일반인이 복잡한 아이디어나 시스템을 이해하기 어렵다면 그 창시자는 전문가일 것임
     * 복잡함은 혁신을 의미함
          + 완전히 새로운 모델 아키텍처를 발명하는 논문은 기존 네트워크를 적용하는 논문에 비해 더 새롭다고 인정됨
          + 처음부터 만든 구성 요소가 있는 시스템은 기존 부품을 재사용하는 시스템보다 더 창의적이라고 여겨짐
          + 기존 작업을 기반으로 하거나 재사용하는 작업은 그다지 혁신적이지 않음
     * 복잡함은 더 많은 기능을 의미함
          + 혼합하고 일치시킬 수 있는 구성 요소가 있는 시스템은 모든 기반을 다룰 수 있는 유연성을 제안함
          + 복잡한 시스템은 단순한 시스템에 비해 더 많은 블록을 가지고 있기 때문에 더 적응력이 높고 변화에 더 잘 대응할 수 있다고 여겨짐

  단순함이 장점인 이유

     * 단순한 아이디어와 기능은 이해하고 사용하기 쉬움
          + 이는 채택 가능성을 높이고 영향력을 만듦
          + 의사소통하고 피드백 받기도 쉬움
          + 반면에 복잡한 시스템은 설명하고 관리하기가 어려워 사용자가 무엇을 해야 하고 어떻게 해야 하는지 파악하기 어려움
     * 단순한 시스템은 구축하고 확장하기 쉬움
          + 구성요소가 적을수록 더 쉽게 구현할 수 있음
          + 표준 기성품 기술을 사용하면 구현 및 유지 관리할 수 있는 자격을 갖춘 사람을 찾기가 더 쉬움
          + 단순한 시스템은 복잡성, 코드, 시스템 내 상호작용이 적기 때문에 이해하고 테스트하기 쉬움
          + 반면에 불필요하게 복잡한 시스템은 더 많은 시간과 자원이 필요하여 비효율과 낭비로 이어짐
     * 단순한 시스템은 운영 비용이 낮음
          + 시스템 배포는 결승선이 아니라 출발선임
          + 대부분의 노력은 시스템이 프로덕션 환경에 있을 때 들어가며, 시스템을 단순하게 유지함으로써 유지보수 비용을 낮추고 수명을 늘릴 수 있음
     * 머신러닝에서는 단순한 기술이 더 정교한 기술보다 성능이 떨어지지 않는 경우가 많음
          + 트리 기반 모델이 중간 크기 테이블 데이터에서 심층 신경망보다 우수함
          + 탐욕 알고리즘이 조합 그래프 문제에서 그래프 신경망보다 우수함
          + 간단한 평균이 다중 작업 학습 문제에서 복잡한 옵티마이저와 동일하거나 더 나은 성능을 보임
          + 32개 논문에서 예측 정확도 면에서 단순한 방법이 복잡한 방법보다 우수함
          + 추천 및 검색에서 내적이 신경 협업 필터링보다 성능이 좋음

  복잡성에 대한 보상의 문제점

     * 사람들이 불필요하게 복잡하게 만들도록 장려함
          + 간단한 방법을 사용하거나 간단한 시스템을 구축하는 것은 더 쉬워 보이므로 가치가 낮게 평가됨
          + 결과적으로 사람들은 더 많은 보상을 얻기 위해 시스템을 조작하고 가장 단순한 솔루션이 더 이상 가장 명백한 것이 아님
     * ""여기서 발명되지 않음"" 사고방식을 조장하여 시간과 노력을 절약할 수 있는데도 기존 구성요소 재사용을 기피하고 처음부터 구축하는 것을 선호함
          + 이는 시간과 자원을 낭비하고 종종 더 나쁜 결과를 초래함

  어떻게 복잡성에 대해 생각해야 하는가?

     * 목표는 가능한 한 단순한 솔루션으로 복잡한 문제를 해결하는 것이어야 함
          + 솔루션의 복잡성에 초점을 맞추는 대신 문제의 복잡성에 초점을 맞춰야 함
          + 단순한 솔루션은 문제에 대한 깊은 통찰력과 더 복잡하고 비용이 많이 드는 솔루션을 피할 수 있는 능력을 보여줌
     * 모든 것을 해결하는 복잡한 솔루션 대신 여러 개의 집중적인 솔루션을 고려해야 함
          + 만능 솔루션은 보통 기대만큼 유연하고 재사용할 수 없음
          + 여러 사용 사례와 이해관계자를 위해 존재하므로 ""밀접하게 결합""되는 경향이 있고 계획 및 마이그레이션 시 더 많은 조정이 필요함
          + 반면에 단일 목적 시스템을 운영하고 폐기하는 것이 더 쉬움

GN⁺의 의견

     * 이 글은 복잡함이 왜 선호되는지, 단순함의 장점은 무엇인지를 설득력있게 설명하고 있음. 복잡함이 숙련도, 혁신, 기능 등을 암시하기 때문에 선호된다는 점은 흥미로웠음.
     * 하지만 모든 경우에 단순한 솔루션이 더 좋다고 보기는 어려울 것 같음. 문제의 특성에 따라 어느 정도의 복잡함은 필요할 수 있음. 단순함과 복잡함의 균형을 잡는 것이 중요할 것임.
     * 머신러닝 분야에서 단순한 모델이 성능이 더 좋은 사례들이 흥미로웠음. 새로운 모델을 개발할 때 기존의 단순한 방법들과 비교해보는 것이 좋겠음.
     * 조직에서 성과 평가시 복잡성을 너무 강조하지 않도록 주의해야겠음. 대신 문제의 난이도와 해결책의 효과성에 집중하는 것이 바람직할 것 같음.
     * 아키텍처 설계시 만능의 복잡한 시스템보다는 단일 목적의 단순한 여러 시스템을 고려해보는 것도 좋은 방법일 것 같음.

        Hacker News 의견

   요약:
     * MVP(최소 기능 제품)를 반복적으로 쌓아 올리는 방식이 복잡성을 초래하는 원인이 되기도 함
     * 복잡한 문제를 해결할수록 높은 보상을 주는 시스템이 오히려 불필요한 복잡성을 낳기도 함
     * 고급 소비자와 열망하는 소비자의 욕구 차이로 인해, 기업은 열망 소비자의 요구에 부응하는 것이 합리적 선택이 되기도 함
     * 복잡하고 버그 많은 소프트웨어가 오히려 선호되는 이유는 그 뒤에 숨을 수 있기 때문임
     * 어릴 때부터 '많은 것이 좋은 것'이라는 사고방식에 젖어 있음
     * 엔지니어로서 단순한 해결책보다는 도전적인 것에 매력을 느끼는 경향이 있음
     * 단순한 것을 선호하면서도 단순해 보이는 것은 기피하는 모순적 심리가 있음
     * 사후적으로 복잡한 해법을 비판하는 것은 쉽지만, 당시의 제약 조건과 요구사항을 모른 채 하는 비판은 공허함
     * '가능한 한 단순하게, 그러나 지나치게 단순하지 않게'라는 원칙은 언제나 옳지만, 구현이 쉽지 않음
     * 프로젝트 초기에는 단순했던 것도 요구사항이 커지면서 필연적으로 복잡해질 수 밖에 없는 상황도 많음
"
"https://news.hada.io/topic?id=14637","소프트웨어의 부조리함에서 벗어나게 해주는 Woodworking","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   소프트웨어의 부조리함에서 벗어나게 해주는 Woodworking

나무 공예를 통해 소프트웨어의 부조리에서 벗어나기

  소프트웨어 개발 요구사항이 나를 새로운 일을 배우게 만들 정도로 미치게 만든 방법

     * 에릭 디븐이 몇 년 전 도커 CLI 이슈에 남긴 전설적인 댓글
          + 소프트웨어 개발을 그만두고 나무로 가구를 만든다고 함
          + 긴 근무시간, 저임금, 테이블쏘로 손가락이 잘릴 위험이 있지만, DBMS에 RSS 피드를 추가할 수 있는지 묻는 사람은 없음
          + 9,000개가 넘는 반응 중 대부분이 긍정적이었음
     * 많은 개발자들이 이 댓글에 공감하는 이유가 있음
          + ""노트북을 창밖으로 집어던지고 농장을 시작하고 싶다""고 말한 적이 있음
          + 팀장도 ""술집 운영, 바텐더가 되어 다른 사람의 이야기를 듣고 싶다""고 갑자기 메시지를 보냄
     * 소프트웨어 개발의 세계가 너무 부조리해서 알파카 100마리를 사서 양모 양말을 팔고 package.json의 충돌 해결은 평생 잊고 싶은 마음이 듦
     * 애자일 회의에서 지라 작업 시간을 티셔츠 사이즈로 추정하라는 부조리한 요구를 받았을 때, 편한 고임금 직장을 그만두고 macOS 앱으로 생계를 꾸릴 불확실성을 택함
          + 최신 애플 실리콘 칩에서도 작동하지 않는 앱 하나밖에 없었고, 수익은 0이었기에 정말 도박이었음
     * 최근 앱이 무엇을 해야 하는지에 대해 비현실적이고 부조리한 기대와 요구가 많이 들어오면서, 소프트웨어 개발을 떠나 더 육체적인 일을 하는 것이 가능할지 고민하게 됨

  간단한 과거 이야기

     * 대학 입학 전 대부분의 시간은 하고 싶지 않은 일을 하느라 보냈음
     * 어릴 적에는 농업 일을 도와야 했음
     * 남은 시간에는 음향 기타 연습, 보디빌딩, 시 쓰기, 연필 초상화 그리기 등을 함
     * 대학 생활을 하면서 무의미한 일을 할 수 없게 되었음
     * 10년 동안 임대 아파트에 살았는데, 정원이 없는 것에 익숙해질 수 없었음

  처음 만든 나무 작품

     * 체스 판과 말 세트를 만들었는데, 자석이 들어있고 말의 모양이 일반적인 체스 말과 다름
     * 체스 말이 만족스럽게 제자리에 고정되고, 어린이나 개가 부딪혀도 게임이 그대로 유지되기를 원함
     * 소나무 판자를 둥글게 다듬고, 아내가 어두운 사각형을 칠하는 것을 도왔음
     * 판자 아래쪽에 네오디뮴 자석을 넣기 위해 구멍을 뚫었고, 실수로 윗면까지 뚫린 두 개의 사각형은 나무 퍼티로 처리함
     * 발코니에서 드레멜로 체스 말을 조각했는데, 육각형이 작은 말 모양으로 변하는 모습이 만족스러웠음
     * 현대적인 체스 세트 디자인에서 영감을 얻어 조각이 많이 필요하지 않은 기하학적 형태를 선택함

  카발 만들기

     * 2년 전 10월, Subcarpați라는 루마니아 밴드에서 ""직접 카발 만들기"" 무료 강좌를 개최했는데, 피리 장인이 1주일 동안 기본기를 가르쳐 주었음
          + 카발은 5개의 구멍이 있는 긴 피리로, 낮은 음역대에서는 우울하고 멀리서 들려오는 듯한 소리가 남
     * 처음 카발을 샀을 때부터 직접 만들고 싶었는데, 인터넷에 정보가 거의 없어서 신비로운 느낌이 들었음
     * 2인 1조로 작업하고, 전동 공구 없이 모든 것을 손으로 해야 한다는 점이 마음에 들었음
     * 장인은 어릴 때부터 목동으로 일하면서 시행착오를 통해 좋은 소리가 나는 피리를 만드는 법과 구멍을 뚫는 위치를 스스로 배웠지만, 왜 구멍이 그 특정 거리에 있어야 하는지, 왜 나무 튜브 길이가 각 음계마다 달라야 하는지는 몰랐음
     * 저자는 어떤 음계에서도 연주할 수 있는 만능 카발을 만들고 싶었음
          + 다양한 음계의 노래와 함께 연주하려면 12개의 다른 길이 플루트가 필요함
     * 플루트가 어떻게 작동하는지에 대한 정보를 찾았는데, 진동하는 공기가 구멍 위치와 일치해야 하는 노드와 반노드를 만드는 개방형 또는 폐쇄형 튜브로 생각하면 된다는 것을 알게 됨
          + 현재 이에 대해 공부하고 ""만능 피리""라는 목표를 향해 작업하고 있음

  이것이 소프트웨어와 무슨 상관이 있나?

     * 지난 10년 동안 임대 아파트에 살면서 정원이 없는 삶에 익숙해질 수 없었음
     * 생계를 위해 macOS 앱을 개발하는데, 이 분야에는 오랜 시간 동안 쌓인 건강에 좋지 않은 것들이 있음
     * 요구하는 투의 부정적인 메시지를 많이 받게 되는데, 아파트 밖으로 나가는 것이 견딜 수 없는 자동차 소음, 역겨운 냄새, 전혀 없는 사생활로 인해 스트레스를 받게 되고 늦은 밤까지 오랫동안 일하게 됨
     * 최근 앱에 대해 가장 부조리한 요구사항들이 들어오기 시작함
          + Lunar라는 모니터 밝기를 제어하는 앱인데 이상한 사운드 장치 볼륨을 제어하지 않는다며 불평함
          + 앱이 Windows에서 작동하지 않는 이유를 묻거나, 이미지/동영상/PDF 압축 앱인 Clop에 텍스트 압축 기능을 추가하라고 요구함
     * 하지만 이번에는 집 앞 문만 나가면 너도밤나무 가지를 집어 들고 프랑스식 밀대를 만들어 부정적인 메시지를 잠시 무시하고 손으로 무언가를 하는 해방감을 느낄 수 있었음
     * 사람들이 모르는 것을 이해하지만, 부정적인 어조와 끊임없는 메시지, 집요하게 모든 수단을 통해 메시지를 보내는 사람들 때문에 무시하기 힘듦
     * 기술 분야에 AI와 머신러닝의 냄새가 나고, 10개 중 8개의 기사가 새로운 LLM이나 이미지 생성 모델에 관한 것이어서 더 이상 관련성을 느끼지 못하고 새로운 기술에 대해 신경 쓰지 않게 됨
          + 나무 냄새가 더 좋음

    소프트웨어 개발자로서의 특권에 대한 사족

     * 시간을 어떻게 쓸지 선택할 수 있다는 것 자체가 특권임을 알고 있음
          + 운 좋게 적절한 시기에 컴퓨터공학과에 진학해 지난 10년간 엄청난 반수동 소득을 얻게 되었음
          + 운이 큰 역할을 했지만 열심히 노력한 것도 사실임
     * 일을 끝내지 않고 내버려 두는 것을 싫어하는 강박증 같은 상태로 정신이 외상을 입은 것도 ""운이 좋았음""
          + 피곤함에도 불구하고 밀어붙이고, 식사를 거르고, 집안일을 놓치고, 주변 사람들을 괴롭힘
          + 실제 마감일은 없고 반쯤 끝내고 내버려 둘 수 있다는 것을 알면서도 그렇게 함
     * 특권이 감정을 부정하지는 않음
          + 평균으로의 회귀는 누구나 현상유지에 익숙해지고 현재 상태보다 조금만 나빠도 불평하게 만듦
     * 우리가 알고 있는 소프트웨어 개발이 곧 사라질 것 같고, 매년 새로운 것으로 대체되는 최신 기술을 배우는 데 지쳤음
          + 오랜 시간 앉아서 타이핑하느라 생긴 만성 손가락 통증보다는 근육도 만들어주는 일로 인한 통증이 더 낫다고 생각함
     * 온라인에서의 모든 것이 비물질적이고 덧없고 고독하다는 것에 너무 지쳤음

  저렴한 도구와 무료 목재로 하는 목공

     * 2020년 전염병 기간 동안 아파트에 갇혀 있을 때, 새로운 것을 배우고 취미를 시작하는 데 도움이 될 것이라고 생각한 물건을 많이 샀음
          + 평생 스마트 LED 조명을 만들고 아내는 프로 울 뜨개질 공예가가 될 줄 알았음
     * 최근 이사한 집 계단 공간에 사용하지 않은 물건 상자들을 쌓아두었는데, 그 크기만한 책장이 있으면 어질러진 것들을 치울 수 있을 것 같았음
     * 하지만 그렇게 큰 책장을 싸게 구할 수 없어서, Freeform에 선을 그리고 치수를 잰 다음 소나무 판자를 많이 주문하고 긴 나사를 잔뜩 주문함
          + 톱질할 때 톱밥이 집 안에 덜 생기도록 바이스가 달린 가장 저렴한 이동식 작업대($30)도 주문함
     * 며칠 후, 몇 년 전 Lidl에서 산 저렴한 일본식 풀쏘로 선반을 톱질하기 시작함
          + 긴 목재 판자를 기술 없이 손으로 톱질하면 가장자리가 비뚤어짐
          + 5개의 판자를 겹쳐도 비뚤어짐
          + 트랙쏘를 사거나 비뚤어진 가장자리가 보이지 않게 하는 것이 힌트임
     * 아내가 구멍 뚫을 위치를 재고 나사를 박는 데 많은 도움을 주었고, 반려견은 결함이 제대로 숨겨졌는지 정기적으로 검사함
     * 나사 박는 데 이틀이 걸렸는데, 긴 나사를 돌리는 게 생각보다 힘들었음

  작업대가 된 책상

     * 책장을 위해 산 $30짜리 바이스 작업대 위에 이전 ""코딩 책상""의 상판을 앞쪽에 부착한 것이 현재 사용하는 ""작업대""임
     * 작업대에는 다음과 같은 것들이 있음
          + 가장 저렴한 블록 플레인($8)
          +

        Hacker News 의견

   요약해보자면:
     * 대기업에서 일하면서 창의적인 취미 생활을 하는 소프트웨어 엔지니어들은 대부분 일에서 만족감을 느끼지 못함. 대기업에서는 문제를 해결하고 무언가를 만들기 어려움.
     * 소프트웨어 개발은 현대 사회의 ""대리 활동""으로, 생존에 필요한 신체적 욕구를 충족시키는 것과는 거리가 먼 추상적인 활동임. 이는 공허함과 불만족을 야기할 수 있음.
     * 취미를 직업으로 삼으면 그 취미에 대한 사랑이 파괴될 수 있음. ""아마추어""는 부정적인 의미가 아니라 ""생계 수단이 아님""을 뜻함.
     * 컴퓨터 작업의 불합리함에서 벗어나기 위해 오래된 시스템을 위한 게임 등 현대와 동떨어진 코딩을 하는 것이 도움됨.
     * 체중 운동, 목공, 요트 등 몸을 움직이는 취미는 컴퓨터 작업과 균형을 이루는 데 좋음. 할아버지의 고대 목공 도구로 아들과 함께 목재 요트를 만드는 중.
     * 목공 교육은 손과 눈으로 물건을 만들고 평가하는 방법과 타인의 노동에 대한 감사를 가르쳐 줌.
     * Fusion 360 등 최첨단 소프트웨어를 사용해 CNC로 예술 작품을 만드는 것도 즐거움. 아날로그 수공구 사용의 생생한 경험도 좋음.
     * 디지털 작업만 해왔던 전문 예술가에게 물감을 직접 만지며 그림을 그리는 것은 실수투성이지만 재미있는 경험임. 자신이 만든 물리적인 것을 보는 것 자체가 즐거움.
"
"https://news.hada.io/topic?id=14639","SQLite 벡터 검색 확장 기능 개발 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        SQLite 벡터 검색 확장 기능 개발 중

SQLite에서 벡터 검색을 위한 새로운 확장 기능 개발 중

     * sqlite-vec은 SQLite에서 벡터 검색을 위한 새로운 확장 기능으로, 기존의 sqlite-vss를 대체할 예정임
     * SQLite가 실행되는 모든 환경(WASM 포함)에서 실행 가능한 임베디드 가능한 ""충분히 빠른"" 벡터 검색 도구가 될 것임
     * 아직 개발 중에 있지만, 준비되는대로 repo를 확인해 볼 것을 추천함

sqlite-vec의 특징

     * 순수 C로 작성되며 의존성이 없는 SQLite 확장 기능
     * 빠른 벡터 검색을 위한 사용자 정의 SQL 함수와 가상 테이블 제공
     * 벡터 작업(양자화, JSON/BLOB/numpy 변환, 벡터 연산 등)을 위한 기타 도구와 유틸리티 제공
     * SQL만으로 벡터 검색 가능 (CREATE VIRTUAL TABLE, INSERT INTO, SELECT 문 사용)

sqlite-vec의 장점

     * 순수 C로 작성되어 모든 플랫폼(Linux/MacOS/Windows), 웹 브라우저(WebAssembly), 모바일 폰, 라즈베리 파이 등에서 실행 가능
     * 바이너리 크기가 수백 KB 수준으로 작음
     * 메모리 사용량을 더 잘 제어할 수 있음 (벡터를 청크 단위로 저장하고 KNN 검색 시 청크별로 읽어들임)
     * PRAGMA mmap_size 명령으로 인메모리 속도 향상 가능
     * Matryoshka 임베딩 등 가변 길이 임베딩 및 int8/bit 벡터 지원으로 이진 및 스칼라 양자화 가능
     * 속도, 정확도, 디스크 공간에 대한 더 많은 제어 가능
     * 처음에는 전수 검색 벡터 검색만 지원하지만 향후 IVF + HNSW 추가 예정

데모

     * 브라우저에서 바로 sqlite-vec 실행 가능 (movies.bit.db SQLite 데이터베이스 로드됨)
     * articles 테이블에는 title, release_date, overview 등의 컬럼이 있음
     * vec_movies 가상 테이블에는 overview 컬럼의 임베딩 벡터가 저장됨 (768차원 바이너리 벡터, 96바이트)
     * KNN 스타일 검색으로 선택한 영화와 가장 유사한 영화 10개 검색 가능

sqlite-vss의 문제점

     * Linux + MacOS에서만 작동 (Windows, WASM, 모바일 기기 등 지원 안됨)
     * 벡터를 모두 메모리에 저장
     * 트랜잭션 관련 버그와 이슈 다수
     * 컴파일이 매우 어렵고 시간이 오래 걸림
     * 일반적인 벡터 연산(스칼라/바이너리 양자화) 누락
     * Faiss에 의존하기 때문에 발생하는 문제들

sqlite-vec 개발 현황

     * 핵심 기능은 작동하지만 오류 처리 및 테스트가 거의 없는 상태
     * sqlite-vec.c 파일에 246개의 TODO 있음
     * 모든 TODO 완료 후 문서, 데모, 바인딩 등과 함께 sqlite-vec v0.1.0 출시 예정 (한 달 정도 목표)

GN⁺의 의견

     * 다양한 플랫폼과 환경에서 실행 가능한 임베디드 벡터 검색 도구라는 점이 매력적임. 특히 웹 브라우저에서 WASM으로 실행 가능한 점이 흥미로움.
     * 메모리 제어, 가변 길이 임베딩, 양자화 등 최신 벡터 검색 기술을 반영한 점도 장점. 속도, 정확도, 저장 공간 등을 유연하게 제어할 수 있을 것으로 보임.
     * 다만 전수 검색만 지원하는 것은 한계. 데이터 크기가 커지면 검색 속도 문제가 생길 수 있음. IVF+HNSW 등의 ANN 알고리즘 지원이 시급해 보임.
     * 또한 아직 개발 초기 단계여서 실제 프로덕션 환경에서 사용하기에는 무리가 있어 보임. 안정화까지 좀 더 시간이 필요할 듯.
     * Faiss 등 기존 벡터 검색 라이브러리와의 벤치마크 비교도 필요해 보임. 순수 SQLite 확장이라는 장점은 있지만 성능 면에서는 검증이 필요함.

        Hacker News 의견

     * 저자가 직접 댓글에 참여하며 새로운 프로젝트인 sqlite-vec에 대해 소개하고 있음. 아직 개발 중이지만 몇 주 내로 v0.1.0을 목표로 하고 있음. 이전에 개발했던 sqlite-vss의 후속 프로젝트 성격임.
     * sqlite-vec은 임베디드 벡터 검색에 최적화된 라이브러리로, 다양한 OS와 모바일, 라즈베리파이 등에서 동작 가능함. 저자는 Beepy라는 시맨틱 검색 앱에 sqlite-vec을 적용해보고 있음.
     * 768차원 벡터를 96바이트에 어떻게 저장하는지에 대한 질문이 있었음. 보통은 float64로 6144바이트가 필요한데, 압축이나 근사값 저장 등의 기법이 궁금하다는 반응임.
     * sqlite-vss를 사용해봤던 개발자가 RAG 모델 개발에 도움이 되었다며 감사 인사를 전함. 우분투 환경에서 잘 동작했다고 함.
     * DuckDB에서도 유사한 벡터 유사도 검색 익스텐션을 최근 공개함.
     * Qdrant 벡터 DB를 활용한 AI RAG 앱 개발 경험을 얘기하며, sqlite-vec 활용에 대한 기대감을 나타냄.
     * SQLite의 public API만 사용할 것인지, amalgamation에 직접 통합될 것인지 궁금해 함. 웹어셈블리 바인딩 관점에서 배포 방식에 대한 고민을 얘기함.
     * OSS 프로젝트가 특정 니즈에 부합하는 걸 좋아한다는 댓글. 타입스크립트 생태계에서 활용 가능한 아이디어를 고민 중이라고 함.
     * 몇 달 전 sqlite-vss 이슈에 대한 해결책이 될 수 있을 것 같다는 반응.
     * 모든 피쳐 벡터의 차원 수를 어떻게 일치시키는지 궁금해 함. 문자열을 float으로 변환해 저장하는 것 같은데, 해밍 거리 계산시 길이가 다른 벡터도 고려되는지 확인 필요함.
     * README 문서 기반 개발 방식으로 보인다는 의견. 문서 작성부터 시작했는지 궁금해 함.
"
"https://news.hada.io/topic?id=14624","Teranoptia - 키메라 생물체를 상상하게 해주는 서체(typeface)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Teranoptia - 키메라 생물체를 상상하게 해주는 서체(typeface)

Teranoptia: 문자가 없는 글꼴

     * Teranoptia는 특이한 방식으로 키보드의 문자를 입력하여 기묘한 생물체를 상상할 수 있게 해주는 문자가 없는 글꼴임
     * Bayeux Tapestry, 중세 삽화, 아동용 책에서 영감을 받아 디자인됨
     * 테두리 장식을 만들거나, 괴물에 대해 상상하거나, 여백에 그림을 넣어 레이아웃을 풍성하게 하는 데 사용할 수 있음

글꼴 정보

     * 이 첫 번째 버전에는 일부 분음 기호와 기호가 포함된 A-Z 문자가 포함되어 있으며, 주로 식물과 동물을 나타냄
     * 향후 개발에서는 다른 종류의 요소들이 포함될 예정임
     * Ariel Martín Pérez가 Paris, FR에서 제작함
     * SIL 오픈 폰트 라이선스로 배포됨
          + 자유롭게 사용, 배포, 수정할 수 있음
          + Tunera와 디자이너를 크레딧에 명시해야 함

GN⁺의 의견

     * 이 특이한 글꼴은 창의력을 자극하고 상상력을 불러일으킬 수 있어 보임. 특히 아이들의 상상력 개발에 좋은 도구가 될 것 같음
     * 레이아웃 디자인에서 독특한 장식 요소로 사용하기에 좋아 보임. 단, 과도하게 사용하면 오히려 산만해 보일 수 있으므로 적절한 밸런스가 중요할 것 같음
     * 현재는 식물과 동물 위주의 문자만 포함되어 있지만, 향후 더 다양한 요소들이 추가된다면 활용도가 더욱 높아질 것으로 기대됨
     * 오픈 폰트 라이선스로 배포되어 자유롭게 사용할 수 있다는 점이 장점. 다만 상업적 활용 시에는 라이선스의 세부 조건을 꼭 확인해 볼 필요가 있음

        Hacker News 의견

     * 이 폰트를 사용해 생물체를 만드는 것이 매우 재미있음
          + 텍스트 영역에 입력하면 폰트를 실험해 볼 수 있는 작은 페이지를 만듦
          + 심볼 테이블과 생성한 이미지를 다운로드할 수 있는 기능을 추가할 계획
     * 6살 아이와 함께 포켓몬 카드를 만들고 키메라를 기반으로 AI 캐릭터 이미지를 생성하고 있음
          + 기사+전갈 조합의 중무장 캐릭터를 상상함 (knightstrike, knightbite, knightflight)
          + 아이의 라즈베리 파이에 이 폰트를 설치해 키보드 탐색에 활용할 예정
     * 특수 문자의 해석이 인상적임
          + 별표(*)가 불가사리 모양인 것이 폰트의 특징과 잘 어울림
          + 대문자가 소문자와 같은 순서로 배열되면 좋겠다는 생각이 듦 (a의 반대는 Z, b의 반대는 Y 식으로 중간으로 갈수록 혼란스러움)
     * 방향과 매핑을 위해 회전, 고속도로 표지판, 도로 표지 등을 보여주는 폰트가 방향이나 위치를 ""생각""하는 데 도움이 될 수 있음
          + 인식 가능한 글리프이므로 문법과 어휘를 배울 필요 없이 의미가 이미 ""기본적으로 인코딩""되어 있음
     * 실제 단어로 ""생물""을 만들 수 있으면 만족스러울 것임
          + 현재는 일반적인 모음이 ""끝"" 부분(머리 또는 꼬리)을 나타냄
     * 이런 식으로 폰트를 사용하는 것을 본 적이 없음
          + 다른 예시가 있는지 궁금함
     * 매우 훌륭하고 사랑스러움
          + 어떤 생물체를 만들 수 있을지 보는 것이 매우 즐거움
     * 테이블탑 RPG에 적합함
"
"https://news.hada.io/topic?id=14731","Show GN: JavaScript에서 한글을 다루는 현대적인 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: JavaScript에서 한글을 다루는 현대적인 라이브러리

   안녕하세요, 토스에서 현대적인 JavaScript 한글 라이브러리를 새로 오픈소스로 공개했습니다!
     * GitHub
     * 문서


   1. 사용하기에 가벼워요

   ECMAScript Modules를 기본적으로 지원함으로써, 쓰는 곳에서 사용하는 로직만 포함할 수 있어요.

   전체 라이브러리를 포함하더라도 Gzip 기준 1~2KB 정도로 매우 가벼워요.

   2. 한글을 다루는 대부분의 니즈를 포함해요

   토스에서 비즈니스를 개발하면서 필요했던 대부분의 한글 로직을 라이브러리화했어요.

   초성 검색, 조사 선택과 같이 한글을 다루면서 만나는 대부분의 니즈를 es-hangul 라이브러리로 해결할 수 있어요.

   3. 꼼꼼하게 테스트되었어요

   제공하는 모든 함수들에 대해서 100% 테스트 커버리지를 제공하고 있어요.

   4. 강력한 TypeScript 타입을 지원해요

   꼼꼼하게 TypeScript 타입을 추가했기 때문에, 런타임 오류를 미리 방지할 수 있어요.


   한국에서 서비스를 개발하면서 한글을 다루는 서비스들이 많으실 것 같은데요, 사용해보시고 많은 피드백 (이슈 생성, 댓글) 주시면 좋을 것 같아요!

   커뮤니티 기여도 환영하고 있습니다 :)

   워어... 멋지네요. 이런 걸 오픈소스로.

   이렇게 깔끔하고 명료하게 Show GN에 소개해주시다니 역시 토스는 다르네요..

   플레이그라운드가 있으면 더 좋을 것 같아요!
"
"https://news.hada.io/topic?id=14658","llm.c, 이제 멀티GPU 트레이닝을 지원하며 PyTorch보다 ~7% 빠름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              llm.c, 이제 멀티GPU 트레이닝을 지원하며 PyTorch보다 ~7% 빠름

     * Andrej Karpathy가 순수 C/CUDA로 만든 간단한 LLM 훈련 코드
     * 이제 멀티 GPU 트레이닝을 bfloat16으로 Flash Attention과 함께 수행
     * ~3000 라인의 C/CUDA 코드로 구현되었으며, 전반적으로 PyTorch보다 7% 정도까지 빠름
     * 지금까지 작업한 내용들
          + 혼합 정밀도 훈련(bfloat16)
          + 정규화된 로그를 구체화하지 않는 (현재의 torch.compile과 달리) FusedClassifier를 포함한 많은 커널 최적화
          + Flash Attention(cuDNN에서 바로)
          + A100이 128비트 로드(LDG.128) 및 저장(STS.128) 명령어를 사용하도록 강제하는 Packed128 데이터 구조
     * 이제 멀티 GPU 트레이닝도 가능
          + MPI+NCCL을 사용한 멀티 GPU 트레이닝의 첫 번째 버전
          + NVIDIA Nsight Compute의 전체 트레이닝 실행 프로파일링
          + ZeRO(옵티마이저 상태 샤딩) 1단계 머지 PR
     * 목표는 124M에서 1.6B에 이르는 모든 모델 크기의 GPT-2 미니시리즈를 C/CUDA에서 직접 재현하는
       안정적이고, 깨끗하며, 테스트를 거친 최소한의, 강화된, 충분히 최적화된 LLM 스택을 만드는 것

   llm.c - raw C/CUDA 로 LLM 훈련하기
"
"https://news.hada.io/topic?id=14635","Claude, iOS용 앱 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Claude, iOS용 앱 공개

     * iOS에서 Claude AI모델을 쉽게 이용
     * 웹의 채팅과 동기화되어 원하는 디바이스에서 계속 이어서 진행 가능
     * 비전 기능: 카메라/라이브러리의 사진을 올려서 분석 가능
     * 모든 플랜 사용자 이용 가능

   ChatGPT와 달리 iOS 17 이상이르 저같은 구형 폰은... 에휴... 그래도 존버할랩니다.
"
"https://news.hada.io/topic?id=14679","Secret Llama - WebGPU로 구동되는 인브라우저 Llama 3 챗봇 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Secret Llama - WebGPU로 구동되는 인브라우저 Llama 3 챗봇 구현체

     * 브라우저에서 완전히 동작하는 프라이버시를 보장하는 LLM 챗봇
     * Llama 3, Mistral 등의 오픈소스 모델을 지원
     * 대화 데이터가 절대 컴퓨터 밖으로 나가지 않아 완전한 프라이버시 보장
     * 브라우저에서 동작하므로 서버나 설치가 필요 없고, 오프라인에서도 동작
     * ChatGPT와 동등한 수준의 사용하기 쉬운 인터페이스를 제공하지만, 오픈소스 LLM을 위한 것
     * 현재 지원모델
          + TinyLlama-1.1B-Chat-v0.4-q4f32_1-1k 600MB
          + Llama-3-8B-Instruct-q4f16_1 4.3GB
          + Phi1.5-q4f16_1-1k 1.2GB
          + Mistral-7B-Instruct-v0.2-q4f16_1 4GB

   한글대화가 가능한가?
"
"https://news.hada.io/topic?id=14682","eSpeak NG - 100개 이상의 언어와 악센트를 지원하는 음성 합성기 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             eSpeak NG - 100개 이상의 언어와 악센트를 지원하는 음성 합성기 오픈소스

     * 리눅스, 윈도우, 안드로이드 및 기타 OS
     * ""Formant Synthesis(포먼트 합성)"" 방식을 사용하는 eSpeak 엔진 기반
          + 작은 크기로 많은 언어를 지원해서 윈도우 및 구글 번역 엔진 등에서 사용했었음(지금은 많이 자체엔진으로 대체됨)
          + 음성은 선명하고 빠른 속도로 사용할 수 있지만 사람의 음성 녹음을 기반으로 하는 대형 합성기만큼 자연스럽거나 부드럽지는 않음
          + 또한 Klatt 포먼트 합성을 지원하며, 백엔드 음성 합성기로 MBROLA를 사용가능
     * 지원 형태
          + 커맨드 라인 프로그램 : 리눅스 & 윈도우. 파일 및 Stdin 으로 받은 문자열 읽기
          + Shared 라이브러리(윈도우에서는 DLL)
          + 윈도우용 SAPI5 버전. 스크린 리더 및 다른 프로그램에서 SAPI5 인터페이스로 이용 가능
          + Solaris, MacOS 를 포함한 다양한 플랫폼으로 이식
     * 기능
          + 특성을 변경할 수 있는 다양한 음성을 포함
          + 음성 출력을 WAV 파일로 생성할 수 있음
          + SSML(음성 합성 마크업 언어)이 지원되며(완전하지 않음) HTML도 지원
          + 컴팩트한 크기. 여러 언어를 포함한 프로그램과 데이터의 총 용량은 몇 MB 정도
          + MBROLA diphone Voices의 프런트엔드로 사용할 수 있음. eSpeak NG는 텍스트를 음높이와 길이 정보가 있는 음소로 변환
               o MBROLA는 음성 합성을 위한 음절 모음으로 구성된 오픈 소스 음성 엔진
               o 음성은 상업적 목적이 아닌 경우 무료로 제공되지만 오픈 소스는 아님
          + 텍스트를 음소 코드로 번역할 수 있으므로 다른 음성 합성 엔진의 프런트 엔드로 적용 가능
          + 다른 언어에 대한 지원 추가 가능. 여러 언어가 다양한 단계로 포함되어 있음
          + C로 작성됨
"
"https://news.hada.io/topic?id=14749","kvql - 키-밸류 DB를 위한 SQL과 비슷한 쿼리 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   kvql - 키-밸류 DB를 위한 SQL과 비슷한 쿼리 언어

     * SELECT, PUT, DELETE 로 조회,삽입,삭제 가능

# 간단한 쿼리, 키 접두사 'k'가 포함된 모든 키-값 쌍 가져오기
select * where key ^= 'k'

# 프로젝션 및 복잡한 조건식
select key, int(value) + 1 where key in ('k1', 'k2', 'k3') & is_int(value)

# 어그리게이션 쿼리
select count(1), sum(int(value)) as sum, substr(key, 0, 2) as kprefix where key between 'k' and 'l' group by kprefix order by sum desc

# JSON
select key, json(value)['x']['y'] where key ^= 'k' & int(json(value)['test']) >= 1
select key, json(value)['list'][1] where key ^= 'k'

# select 문에 정의된 필드 이름으로 필터링
select key, int(value) as f1 where f1 > 10
select key, split(value) as f1 where 'a' in f1
select key, value, l2_distance(list(1,2,3,4), json(value)) as l2_dis where key ^= 'embedding_json' & l2_dis > 0.6 order by l2_dis desc limit 5

# 데이터 넣기
put ('k1', 'v1'), ('k2', upper('v' + key))

# 필터로 데이터 삭제 및 삭제 행 수 제한
delete where key ^= 'prefix' and value ~= '^val_' limit 10
delete where key in ('k1', 'k2', 'k3')
"
"https://news.hada.io/topic?id=14627","온라인 Cryptography 강좌 (2017년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      온라인 Cryptography 강좌 (2017년)

온라인 암호학 코스 개요

     * 강사: Dan Boneh, Stanford University
     * 이 페이지에는 무료 암호학 강좌의 모든 강의가 포함되어 있음
     * 숙제, 프로젝트, 기말고사 등을 포함하여 공식적으로 강좌를 수강하려면 Coursera의 강좌 페이지를 방문해야 함
     * 교재: 이 강좌를 위한 무료 교재로, 보안 증명 및 많은 연습 문제를 포함하여 보다 깊이 있게 다루고 있음 (A Graduate Course in Applied Cryptography by D. Boneh and V. Shoup)

강좌 주차별 강의 내용 요약

     * Week 1: 강좌 개요 및 스트림 암호 (교재 2-3장)
          + 암호학 개요, 역사
          + 이산 확률 속성 코스
          + 일회용 패드와 스트림 암호
          + 스트림 암호 공격과 실수
          + 실제 스트림 암호 사례
          + 안전한 암호의 정의, PRG 보안, 의미론적 보안
     * Week 2: 블록 암호 (교재 4-5장)
          + 블록 암호 개요
          + DES 암호, 전수 조사 공격 등
          + AES 블록 암호, PRG로부터의 블록 암호
          + 블록 암호 사용법 (일회성 키, 다회성 키)
          + CPA 보안, CBC/CTR 운영 모드
     * Week 3: 메시지 무결성 (교재 6-8장)
          + MAC 정의 및 PRF 기반 MAC
          + CBC-MAC, NMAC, PMAC 등 구성
          + 충돌 저항 해시 함수 개요
          + 생일 공격, Merkle-Damgard 패러다임
          + HMAC과 타이밍 공격
     * Week 4: 인증된 암호 (교재 9장)
          + CPA-안전 암호에 대한 능동 공격
          + 선택 암호문 공격, 암호와 MAC으로부터의 구성
          + TLS 1.2 사례 연구, CBC 패딩 공격
          + 키 유도, 결정론적 암호, 포맷 보존 암호
     * Week 5: 기본 키 교환 (교재 10장)
          + 신뢰할 수 있는 제3자, Merkle 퍼즐
          + Diffie-Hellman 프로토콜, 공개키 암호화
          + 모듈러 연산 기초 이론 (Fermat, Euler 등)
          + 쉽고 어려운 문제 (산술 알고리즘, 다항 시간 문제)
     * Week 6: 공개키 암호 (교재 11-12장)
          + Trapdoor 순열 기반 공개키 암호 (정의, 보안, 구성)
          + RSA Trapdoor 순열 및 PKCS1
          + RSA 일방향 함수 여부와 실제 사용
          + ElGamal 공개키 시스템 및 보안성
          + 공개키 암호의 요약
     * Week 7: 디지털 서명 (교재 13-14장)
          + 디지털 서명과 해시 기반 서명에 대한 내용

GN⁺의 의견

     * 이 코스는 현대 암호학의 기본 이론과 실제 사용되는 알고리즘을 다루고 있어 암호학 입문자에게 훌륭한 길잡이가 될 것으로 보임. 특히 저명한 암호학자인 Dan Boneh 교수의 강의라는 점에서 신뢰할 만함.
     * 암호학 이론뿐 아니라 안전한 암호 설계 시 고려 사항, 현실에서 발생할 수 있는 취약점과 공격 기법 등 실무적인 내용도 다루고 있어 개발자들에게 도움이 될 듯함.
     * 강의 외에도 깊이 있는 내용을 다룬 무료 교재를 제공하고 연습문제도 풍부해 보여서 암호학 심화 학습에도 활용할 수 있을 것 같음.
     * 다만 이론 중심의 내용이 많아 보이므로 초보자의 경우 수학적 배경 지식이 부족하다면 이해하는데 다소 어려움을 겪을 수도 있겠음. 선형대수학이나 이산수학 등의 사전 지식이 도움이 될 것임.
     * 블록체인이나 디지털 자산 등 암호학의 활용 분야가 확대되고 있는 만큼, 암호학 기초를 잘 학습하고 실무에 적용할 수 있다면 개발자의 역량 향상에 크게 기여할 수 있을 것으로 기대됨.

        Hacker News 의견

     * CS255 Intro to Cryptography 스탠포드 대학 강의가 가장 인상 깊었던 수업 중 하나였음. Dan Boneh 교수의 강의력이 뛰어남.
          + CS253 Web Security, CS356 Topics in Computer and Network Security 등 스탠포드 보안 강좌도 추천함.
     * 몇 년 전 이 교수의 온라인 암호학 수업을 들었는데 매우 훌륭했음.
          + 수학 배경이 있었지만, 전문 암호학자가 되고 싶지는 않다는 것을 깨달음.
          + 데몬과 게임을 이용해 암호화된 바이트 스트림에서 랜덤 비트 스트림을 식별하는 방식이 인상 깊었음.
     * 훌륭한 강의이나, 완료하는데 예상 시간(23시간)은 개인의 사전 지식 수준에 따라 크게 달라질 수 있으므로 준비와 페이스 조절이 필요함.
     * 이론 없이 실습 위주로 암호학을 배우고 싶어하는 사람들이 많은 것 같음. 그런 분들은 cryptopals.com을 추천함.
     * 수학에 초점을 맞추지 않고 암호 라이브러리를 사용하는 방법에 대한 실무자 중심의 자료가 있으면 좋겠음.
          + RSA의 세부사항보다는 다른 기본 요소와 안전하게 구성하여 원하는 속성을 가진 시스템을 설계하는 방법을 알 필요가 있음.
     * ""capture the flag"" 형식으로 배운 내용을 연습하고 싶다면 https://cryptohack.org/를 추천함. 훌륭한 사이트임.
     * Dan Boneh 교수는 a16z crypto 연구팀의 고문이기도 하며, 그들과 함께 블록체인 관련 콘텐츠를 많이 제작하고 있음.
     * 그가 공저한 책 ""A Graduate Course in Applied Cryptography""가 매우 도움이 되었음. https://toc.cryptobook.us/
     * 타원 곡선 암호(ECC)와 양자내성암호(PQC)에 대해 배우고 싶은데, 대부분의 강좌가 비슷한 수준에서 끝나는 것 같아 아쉬움. 이에 대한 후속 강좌가 있으면 좋겠음.
     * Dan Boneh 교수의 오프라인, Coursera 강의를 모두 수강했는데 훌륭한 강사임. 강력 추천함.
"
"https://news.hada.io/topic?id=14651","Figma의 TypeScript 전환 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Figma의 TypeScript 전환 여정

타입스크립트로의 Figma 여정: 사용자 정의 프로그래밍 언어를 컴파일하여 제거

     * Figma는 모바일 렌더링 아키텍처의 핵심 부분을 Skew라는 사용자 정의 프로그래밍 언어로 작성해왔음
          + 재생 엔진에서 추가적인 성능을 얻기 위해 발명한 언어
          + 개발 단 하루도 중단하지 않고 Skew를 자동으로 TypeScript로 마이그레이션한 방법을 소개

  Skew 언어의 시작과 한계

     * Skew는 Figma 초기에 부수적인 프로젝트로 시작됨
          + 당시 웹과 모바일 둘 다에서 지원되는 프로토타입 뷰어를 빠르게 구축할 필요가 있었음
          + 더 발전된 최적화와 더 빠른 컴파일 시간을 가능하게 하는 전체 컴파일 대상 자바스크립트 프로그래밍 언어가 됨
     * 시간이 지나면서 Skew 코드가 누적되면서 한계점이 드러남
          + 신입사원이 적응하기 어려움
          + 나머지 코드베이스와 쉽게 통합할 수 없음
          + Figma 외부에 개발자 생태계가 부족함
          + 확장의 어려움이 원래의 장점을 능가하게 됨

  TypeScript로의 마이그레이션을 가능하게 한 요인들

     * 모바일 브라우저에서 WebAssembly 지원 확대
     * Skew 엔진의 핵심 구성요소를 C++ 엔진의 해당 구성요소로 교체
          + TypeScript로 이동해도 성능 손실이 적어짐
     * 팀의 성장으로 개발자 경험에 집중할 수 있는 리소스 할당 가능

  코드베이스 변환 과정

     * 목표: Skew 코드 전체를 TypeScript로 변환
          + 수동으로 다시 작성하는 대신 자동화된 마이그레이션 선택
          + 개발 속도 저하 방지 & 사용자에 대한 런타임 오류 및 성능 저하 방지
     * 3단계 롤아웃 프로세스
         1. Skew 작성, Skew 빌드
               o 원래 빌드 프로세스 유지, 트랜스파일러 개발, TS 코드를 GitHub에 체크인
         2. Skew 작성, TypeScript 빌드
               o TypeScript 코드베이스에서 직접 프로덕션 트래픽 롤아웃 시작
               o 개발자는 여전히 Skew 작성, 트랜스파일러가 Skew를 TS로 변환
         3. TypeScript 작성, TypeScript 빌드
               o 개발을 위해 TS 코드를 진실의 원천으로 만들 필요
               o 자동 생성 프로세스를 차단하고 Skew 코드를 코드베이스에서 삭제

  트랜스파일러 작업에 대한 참고사항

     * 컴파일러는 프론트엔드와 백엔드로 구성
          + 프론트엔드: 입력 코드 구문 분석 및 이해, 유형 검사, 구문 검사 수행
          + IR(중간 표현)로 변환 - 원래 입력 코드의 의미론과 논리 완전히 캡처
          + 백엔드: IR을 다양한 언어로 변환
     * 트랜스파일러: 사람이 읽을 수 있는 코드를 생성하는 특수한 유형의 컴파일러

  마이그레이션 과정에서 직면한 문제들

     * 배열 destructuring의 성능 문제
          + 자바스크립트 배열 destructuring을 사용하지 않으면 최대 25%의 성능 향상
     * Skew의 ""devirtualization"" 최적화
          + 롤아웃 과정에서 추가 단계를 거쳐 devirtualization이 코드베이스 동작을 깨뜨리지 않도록 함
     * TypeScript에서는 초기화 순서가 중요
          + 트랜스파일러가 이 순서를 존중하는 코드를 생성해야 함

  개발자 경험을 위한 Source Map 활용 사례

     * 개발자 생산성을 위해 마이그레이션을 쉽게 하고, 디버깅 경험을 원활하게 하는데 집중
     * 소스 맵을 이용해 컴파일된 코드와 소스 코드 연결
          + 브라우저는 자바스크립트만 이해할 수 있음
          + 소스 맵을 통해 브라우저가 컴파일된 자바스크립트 번들에서 소스 코드의 중단점을 어디에서 멈춰야 하는지 알 수 있음
     * 3단계 프로세스에서 소스 맵 생성
         1. TypeScript → JavaScript 소스 맵 생성
         2. 각 Skew 소스 파일에 대한 Skew → TypeScript 소스 맵 생성
         3. 소스 맵을 구성하여 Skew에서 JavaScript로 매핑 생성

  조건부 컴파일 처리 사례

     * Skew에서는 최상위 ""if"" 문으로 조건부 코드 컴파일 허용
          + 컴파일 시간 상수를 사용해 조건 지정
          + 동일한 코드베이스의 다른 빌드 타겟 정의 가능
     * TypeScript에는 조건부 컴파일 기능 없음
          + 번들링 단계에서 수행하도록 변경
          + esbuild의 ""defines"" 및 데드 코드 제거 기능 사용
          + 번들 크기가 약간 증가하는 부작용 발생

TypeScript 시대의 프로토타이핑 개발

     * Skew 코드를 TypeScript로 마이그레이션함으로써 Figma의 핵심 코드베이스 현대화
          + 내부 및 외부 코드와 훨씬 쉽게 통합할 수 있는 길을 열어줌
          + 개발자들이 더 효율적으로 작업할 수 있게 됨
     * 당시에는 TypeScript가 적합하지 않았지만 지금은 확실히 적합한 선택
     * TypeScript로 이동의 모든 이점을 누리기 위한 후속 작업 진행 중
          + 나머지 코드베이스와의 통합
          + 훨씬 쉬워진 패키지 관리
          + TypeScript 생태계의 새로운 기능 직접 사용 등

GN⁺의 의견

     * Figma는 사용자 정의 프로그래밍 언어인 Skew에서 TypeScript로 전환하는 과정을 매우 체계적이고 단계적으로 진행함. 개발 중단 없이 자동화된 마이그레이션을 수행한 것이 인상적임. 회사 규모가 커지면서 생기는 기술 부채를 해결하고 생태계 변화에 발맞춘 좋은 사례라고 생각함.
     * 성능에 집중한 사용자 정의 언어에서 범용 언어로 전환하는 과정에서 WebAssembly 등장 등 기술 환경의 변화가 중요한 역할을 함. 기술 선택시 당장의 필요에 의한 선택도 중요하지만, 기술 발전 속도와 방향을 고려하는 것이 필요함을 시사.
     * 개발자 경험을 고려한 소스맵 활용, 조건부 컴파일 처리 등 실무에 참고할만한 디테일한 방법들이 소개되어 있어 좋음. 기존 레거시와 호환을 유지하면서 점진적으로 마이그레이션하는 과정이 인상깊음.
     * 대규모 코드베이스에서 이런 작업을 위해서는 자동화된 코드 변환기 개발이 필수적일 것 같음. Skew 컴파일러를 활용한 트랜스파일러 개발이 핵심이었던 것으로 보임. 컴파일러 이론과 내부 구현에 대한 전문성이 요구되는 작업으로 보임.
     * 프로그래밍 언어 마이그레이션은 단순 코드 변환 그 이상의 영향을 미침. 개발 문화와 생태계 전반에 긍정적인 변화를 가져올 수 있음. 신중한 접근이 필요하지만 개발 조직의 역량이 된다면 도전해볼만한 일이라 생각함.

        Hacker News 의견

     * Andrew Chan, 프로젝트 참여자에 따르면 Figma는 거의 10년 동안 다른 부분에서 TypeScript를 사용해왔고, 대부분의 기간 동안 Skew보다 TypeScript가 더 많았음. Skew는 모바일 엔진과 프로토타이핑 플레이어, 미러링 기능 등 일부 제품 영역에서 사용되었음.
     * Figma가 JS를 위한 사용자 정의 언어를 가지고 있었다는 점이 놀라웠고, 그것이 TS보다 빨랐다는 점은 더욱 놀라웠음. 그런데 나중에 더 느린 TS로 마이그레이션함.
     * Evan Wallace(전 Figma CTO)에 따르면 Skew는 더 엄격한 타입 시스템으로 인해 가능해진 더 나은 최적화 덕분에 TypeScript보다 1.5~2배 빨랐음.
     * 배열 구조 분해 할당 시 JavaScript가 배열에서 직접 인덱싱하는 대신 배열을 반복하는 이터레이터를 구성하는 것이 흥미로움. JS가 배열을 직접 인덱싱하지 않는 이유가 궁금함.
     * Skew는 콜백만 있었던 것으로 보임. async/await와 같은 최신 JavaScript 기능과 더 유연한 타입 시스템이 언급됨.
     * Figma는 사용자 정의 TypeScript DSL + 컴파일러를 작성하여 권한 문제와 같은 보안 문제를 해결했음.
     * 대기업마다 자체 내부 도구, 언어, 쿠버네티스를 가지고 있는데 공유하지 않는 것이 안타까움. Skew가 오픈소스였다면 더 나은 TypeScript가 되었을 수도 있음.
     * Figma의 WebAssembly 사용 동기가 궁금함.
     * 배울 교훈: 사용자 정의 언어를 만들지 말 것.
     * TypeScript에 반대하는 사람들의 의견을 보면 흥미로움. TypeScript는 거의 모든 코드 라인을 개선하는 단점이 거의 없는 도구임. 그들은 새로운 것을 배우기 두려워하거나, 시간을 할애하지 않으려 하거나, 유용성을 오해하고 있는 것으로 보임. TypeScript 반대자들에 동의한다면 그 이유에 대해 더 깊이 생각해 볼 필요가 있음. 그렇지 않으면 큰 불이익을 감수해야 함.
"
"https://news.hada.io/topic?id=14694","공격자들, 라우팅 기반 VPN 노출 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         공격자들, 라우팅 기반 VPN 노출 가능

     * VPN은 사용자의 디바이스와 다른 네트워크의 서버 간에 네트워크 트래픽을 위한 터널을 만들어주는 기술임. 이로 인해 만들어진 가상 네트워크는 물리적 네트워크와 동일하게 동작하면서 지리적 위치의 제약을 받지 않음.
     * VPN 클라이언트는 가상 네트워크 인터페이스를 만들고, 트래픽을 암호화/복호화한 후 물리적 네트워크 인터페이스로 보내는 역할을 함.
     * VPN은 사용자를 위해 최대한 사용하기 쉽게 설계되었으며, 로그인하고 버튼을 클릭하는 것 외에는 많은 작업을 요구하지 않음.
     * VPN은 낮은 계층의 네트워크 트래픽을 인터넷으로 전송하기 때문에 호스트의 공격 표면을 실제로 증가시킴. VPN은 LAN 트래픽을 인터넷에서 캡슐화하여 인터넷상에 로컬 네트워크(LAN)를 만듦.
     * VPN은 패킷 암호화와 같은 보상 컨트롤을 사용하여 확장된 LAN 공격 표면을 완화함. 하지만 VPN은 물리적 LAN에 대한 로컬 네트워크 공격으로부터 사용자를 보호하지 않음.

DHCP와 DHCP 옵션 121

     * DHCP는 IP 주소를 동적으로 할당하고 원격으로 디바이스 구성을 조정할 수 있는 옵션을 제공하는 프로토콜임.
     * DHCP 옵션 121은 관리자가 클라이언트의 라우팅 테이블에 정적 경로를 추가할 수 있게 해주는 옵션임.
     * DHCP 옵션 121의 흥미로운 특징은 DHCP 서버가 경로를 설치하는 네트워크 인터페이스 디바이스를 지정할 수 없다는 것임. 대신 DHCP 클라이언트는 해당 옵션에 대한 라우팅 규칙을 설치할 때 DHCP 서버와 통신하는 네트워크 인터페이스를 암시적으로 선택함.

Decloaking 공격 요건 및 과정

     * 공격 대상 호스트는 공격자가 제어하는 DHCP 서버로부터 DHCP 임대를 수락해야 함
     * 공격 대상 호스트의 DHCP 클라이언트는 DHCP 옵션 121을 구현해야 함
     * 공격자는 VPN 사용자와 동일한 네트워크에서 DHCP 서버를 실행하고, DHCP 구성에서 자신을 게이트웨이로 설정함.
     * DHCP 옵션 121을 사용하여 VPN 사용자의 라우팅 테이블에 경로를 설정함.
     * 경로 설정을 통해 네트워크 트래픽은 VPN의 가상 인터페이스가 아닌 DHCP 서버와 통신하는 네트워크 인터페이스를 통해 전송됨.
     * VPN의 암호화된 터널 외부에서 트래픽이 전송되지만, VPN 제어 채널은 그대로 유지되어 VPN은 계속 연결된 것으로 보고됨.

영향을 받는 대상

     * RFC 사양에 따라 DHCP 클라이언트를 구현하고 DHCP 옵션 121 경로를 지원하는 Windows, Linux, iOS, MacOS 등 대부분의 운영체제가 영향을 받음. (Android는 DHCP 옵션 121을 지원하지 않아 영향이 없음)
     * 호스트의 트래픽을 보호하기 위해 라우팅 규칙에만 의존하는 VPN이 취약함.
     * 자체 VPN 서버를 호스팅하는 경우 VPN 클라이언트 구성을 강화하지 않으면 취약할 수 있음.
     * 기본 VPN 프로토콜(WireGuard, OpenVPN, IPsec 등)과 무관하게 VPN이 의존하는 OS 네트워크 스택을 재구성하기 때문에 영향을 받음.

완화 방안 및 한계

     * 리눅스의 네트워크 namespace를 사용하면 이 문제를 완전히 해결할 수 있지만, 일반적으로 잘 구현되지 않음.
     * VPN 제공업체 중 일부는 방화벽 규칙을 통해 물리적 인터페이스에서 인바운드/아웃바운드 트래픽을 차단하는 것을 관찰했지만 부분적인 완화책임.
     * DHCP 옵션 121을 무시하는 것도 가능한 완화 방안이지만 네트워크 연결이 끊어질 수 있음.
     * Hot spot이나 VM을 사용하면 공격자가 로컬 네트워크 액세스 권한을 얻기 어려워지므로 도움이 될 수 있음.
     * 절대적인 트래픽 기밀성이 필요한 경우 신뢰할 수 없는 네트워크 사용을 피하는 것이 최선의 방어책임.

GN⁺의 의견

     * VPN은 물리적 네트워크에서의 LAN 공격을 완화하도록 설계되지 않았기 때문에, 신뢰할 수 없는 네트워크에서 VPN이 고객을 보호한다는 VPN 제공업체의 마케팅 주장은 위험할 수 있음. VPN 제공업체는 TunnelVision에 대한 완화 방안이나 수정 사항을 공개적으로 문서화하고 사용자에게 알려야 함.
     * 기업 VPN은 커피숍, 호텔, 공항 등에서 자주 사용되므로 네트워크 관리자는 직원들에게 이러한 장소에서 일하는 것의 위험성을 알리고 가능한 한 피할 것을 권고해야 함. 또한 내부 리소스에 HTTPS 등의 암호화 프로토콜을 구현하여 신뢰할 수 없는 네트워크에서 연결하는 VPN 사용자로 인한 데이터 유출을 방지해야 함.
     * 대부분의 인터넷 트래픽은 HTTPS로 보호되고 있기 때문에 VPN이 무력화되더라도 대부분의 사용자 데이터는 로컬 네트워크 공격자에게 노출되지 않을 것임. 하지만 민감한 트래픽의 경우 경고가 필요함.
     * 리눅스를 제외한 OS 유지 관리자는 네트워크 namespace와 관련된 기능을 추가하거나 향상시키는 것이 가능한지 확인해야 함.
     * VPN 기술 자체의 보안 속성을 위반하는 것은 아니지만 VPN 제공업체의 보장과는 모순되기 때문에 취약점으로 볼 수 있음. 연구진은 이 기법이 2002년 이후로 가능했을 것으로 추정하며, 영향을 받는 당사자들에게 폭넓게 알리기 위해 연구 결과를 공개하기로 결정함.

        Hacker News 의견

   요약:
     * 이 공격은 2016년 Samy Kamkar의 ""Poison Tap"" 공격과 유사함. USB/Thunderbolt 네트워크 어댑터를 사용하여 더 구체적인 두 개의 경로를 광고하고 시스템의 다른 인터페이스보다 우선적으로 모든 트래픽을 가로챌 수 있음.
     * 헤드라인에서는 모든 VPN 클라이언트에 영향을 준다고 주장하지만, 많은 클라이언트가 방화벽 규칙을 설정하여 물리적 인터페이스와의 트래픽을 차단함. 주요 개인/상용 및 기업 VPN 솔루션 중 이 기능이 기본적으로 활성화된 비율을 문서화하는 것이 생산적이었을 것임.
     * DHCP 옵션 121을 사용하면 DHCP 서버가 특정 CIDR 범위에 대한 라우팅 규칙을 설정할 수 있음. 이는 더 긴 접두사로 인해 기본 0.0.0.0/0 규칙보다 우선 순위가 높아짐.
     * 이 ""공격""은 DHCP 옵션 121을 영리하게 사용한 것임. 제대로 격리하려면 적절한 정책 기반 라우팅(예: 리눅스 네트워크 네임스페이스, FreeBSD vnet, OpenBSD rdomains)을 사용해야 함.
     * 리눅스에서 VPN 인터페이스를 VRF에 배치하여 이를 완화할 수 있음. systemd-networkd는 기본적으로 이를 지원함.
     * 공격자가 LAN의 DHCP 서버가 될 수 있다는 위협 모델은 가능성은 낮지만 불가능하지는 않음.
     * 가상 머신 기반 아키텍처도 이 문제를 해결할 수 있음. QubesOS는 유사한 설정을 매우 쉽게 구성할 수 있게 해줌.
     * 네트워크 네임스페이스에 대한 흥미로운 대안은 커널 네트워킹을 완전히 우회하고 사용자 공간 네트워크 스택을 사용하는 것임.
     * IPv4 전용 VPN 서비스를 사용하면서 시스템에서 IPv6를 활성화하는 것이 더 걱정됨. 심각한 문제가 발생할 수 있음.
"
"https://news.hada.io/topic?id=14680","전설적인 활자체 잔해, 템스강에서 구조돼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         전설적인 활자체 잔해, 템스강에서 구조돼

     * 템스강의 깊은 곳에는 선사시대 도구, 로마 시대 도자기, 중세 보석 등 많은 뜻밖의 이야기들이 있음. 그 중에서도 잃어버렸다가 다시 발견된 Doves 서체의 이야기는 가장 기이한 것 중 하나임.
     * 약 100년 전, 인쇄업자 T.J. Cobden-Sanderson은 사업 파트너인 Emery Walker가 자신을 속이려 한다고 믿고, 모든 활자를 몰래 강에 버림.
     * Doves 서체는 1900년 런던 해머스미스에 Doves Press를 설립했을 때 두 사람이 고안한 독특한 Arts and Crafts 스타일의 서체임. 15세기 베네치아 서체의 명료함을 충실히 재현하기 위해 Percy Tiffin과 Edward Prince와 협력함.
     * 넓은 대문자, 다이아몬드 모양 구두점, 독특한 'i' 점 등이 특징인 Doves 서체는 출판사의 상징이 됨. 16pt로만 제작되어 Cobden-Sanderson이 모든 활자를 템스강에 버림으로써 더 이상 인쇄될 가망이 없어짐.

역사적인 Doves 서체의 부활

     * 그래픽 디자이너 Robert Green은 2000년대 중반 Doves 서체에 매료되어 모든 선을 충실히 다시 그려 디지털화하려 노력함. 2013년 처음 다운로드 버전을 출시했지만 만족하지 못함.
     * 2014년 10월, Green은 Cobden-Sanderson의 일기를 참고해 활자를 버린 정확한 위치를 찾아내고 템스강에서 직접 활자를 찾기 시작함.
     * 스쿠버 다이버들의 도움으로 151개의 활자를 찾았고, 이를 통해 디지털 버전을 더욱 발전시킬 수 있었음.

Mudlark들의 발견

     * Mudlark(허가를 받고 강가에서 보물을 찾는 사람들)들도 더 많은 활자를 발견함. 건축가이자 작가인 Jason Sandy는 12개를 찾아 Emery Walker's House 박물관에 기증함.
     * Sandy는 Doves 서체 이야기에 매료되어 박물관에서 수백 개의 발견된 활자들을 전시함. Doves 영어 성경 사본도 전시됨.
     * Mudlark들은 발견 장소와 방법을 비밀로 하는 경향이 있음. 강가의 수수께끼의 장소에서 헤드램프를 쓰고 밤을 새워 보물을 찾기도 함.
     * Sandy에게 가장 짜릿한 것은 희귀하거나 일상적인 유물을 발견하고 이를 통해 새로운 조사를 하는 것임. 템스강은 수천 년 동안 사람들이 사용했던 것들을 무작위로 내놓아 과거와의 유형의 연결고리를 만들어줌.

GN⁺의 의견

     * 이 사건은 서체 디자인과 인쇄술의 역사에서 매우 흥미로운 에피소드임. 당시의 기술로는 쉽게 복제할 수 없는 독특한 서체를 만들고, 이를 둘러싼 개인적 분쟁으로 인해 사라질 뻔한 것이 100여년 만에 부활한 것은 인상적임.
     * 그러나 한편으로는 예술적 창작물에 대한 소유권과 통제권을 둘러싼 논란도 보여줌. 공동 창작자 중 한 명이 마음대로 작품을 파기할 수 있는 권리가 있는지, 이런 파괴 행위로 인해 문화유산이 사라지는 것은 아닌지 생각해 볼 문제임.
     * 디지털 기술의 발전으로 인해 아날로그 매체의 가치와 희소성이 새롭게 조명받고 있음. 극소수만 남은 활자를 복원하는 과정은 디지털과 아날로그 기술이 융합되는 과정을 잘 보여줌.
     * Mudlark들의 활동은 하나의 흥미로운 취미이자 역사 연구의 한 방법으로 보임. 우연히 발견된 유물들이 런던 시민들의 일상을 재구성하는 단서가 된다는 점이 인상적임. 그들만의 윤리 의식과 비밀 유지가 이뤄지는 것도 특이한 문화로 보임.

        Hacker News 의견

   요약하면 다음과 같음:
     * Doves 서체는 복잡한 디자인에도 불구하고 가독성이 뛰어남. Mebinac은 현대적 문법에 맞게 Doves를 재해석한 비공식 서체임.
     * 관련 해커뉴스 댓글들:
          + Doves 활자를 템스 강에서 찾아낸 것은 2015년에도 HN에서 다뤄짐.
          + Doves 활자의 재발견과 부활에 관한 기사들이 2013년부터 여러 차례 HN에 소개됨.
     * 영국의 장인 정신, 모험심, 관료제의 유연성 등이 돋보이는 사례로 평가됨.
     * 현대화된 Doves 서체는 시대적 느낌이 약해졌다는 지적이 있음. H.P. Lovecraft Society에서 오래된 문서에서 추출한 19세기 서체들을 제공함.
     * 1994년 Torbjörn Olsson도 Doves를 복원한 바 있음. Robert Green 버전보다 가벼운 느낌.
     * 템스 강에서 활자를 발견하는 건 드문 일이 아님. 신문사 식자공들이 귀찮아서 버렸을 수도 있고, 고장 났거나 낡아서, 또는 어떤 의식의 일환으로 버렸을 수도 있음.
     * Doves 활자가 남아있는 성경으로도 디지털 버전을 만들 수 있지 않았을까 하는 의문이 제기됨.
"
"https://news.hada.io/topic?id=14751","Jam - 웹 디버거 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Jam - 웹 디버거

Jam - 제품 소개 및 피드백 요청

     * Jam은 제품 관리자가 모호하고 재현 불가능한 버그 티켓을 생성하지 못하도록 방지하는 제품임
     * 비 엔지니어가 엔지니어에게 유용한 버그 티켓을 제출하는 것은 매우 어려운 일임
          + 스크린샷에서 중요한 정보가 누락되거나, 버그에 대한 설명이 명확하지 않은 경우가 많음
          + 이로 인해 엔지니어와 제품 관리자 간의 소통이 원활하지 않고 버그 수정이 지연됨
     * 소프트웨어 개발 방식은 많이 발전했지만, 버그 캡처 및 보고 방식은 1990년대와 동일함
          + 비 엔지니어가 엔지니어에게 버그를 생산적으로 보여줄 수 있는 도구가 없음

Jam의 주요 기능

     * 개발 도구와 비디오를 링크로 제공
     * 공유 가능한 HAR 파일과 세션의 비디오 녹화를 동기화
     * 즉시 재생 가능한 버그 재현 기능 (DOM을 30초 동안 비디오로 재생)
     * 자동 재현 단계 작성
     * Chrome 개발자 도구와 동일한 키보드 단축키 사용
     * GraphQL 응답 파싱 및 mutation 이름과 오류 추출

사용 현황 및 피드백 요청

     * 2년 동안 200만 개 이상의 버그 수정에 사용됨
     * 디버깅을 더 가치 있게 만들기 위한 피드백과 의견 요청
     * 디버깅 시 문제 재현조차 못하는 것이 가장 힘든 부분이며, 이는 엔지니어링이 아닌 커뮤니케이션 갭임
     * 도구를 통해 이 문제를 해결할 수 있을 것으로 기대

가격 정책 및 채용 정보

     * 무료 플랜을 영구적으로 제공할 예정
     * 기업용 유료 기능도 있음
     * Cloudflare에서 제품 개발을 배웠으며, 무료 티어를 제공하는 것이 에토스임
     * Cloudflare에서 무료 사용자들로부터 많은 피드백을 받았던 경험을 Jam에서도 이어가고 싶음
     * 엔지니어 채용 중이며, 이 문제에 관심 있는 분들과의 대화를 기대함 (jam.dev/careers)

GN⁺의 의견

     * 버그 티켓 작성의 어려움은 많은 조직에서 겪고 있는 문제임. Jam이 이를 해결해줄 수 있는 좋은 도구가 될 것으로 보임.
     * 비 엔지니어도 쉽게 버그를 재현하고 공유할 수 있게 해준다는 점에서 개발 프로세스 개선에 큰 도움이 될 것임.
     * 무료 플랜을 제공하는 것은 사용자 확보와 피드백 수렴에 좋은 전략이 될 수 있음. 단, 무료 사용자를 유료 고객으로 전환하는 방안도 함께 고민해야 할 것임.
     * Chrome 개발자 도구와의 호환성을 제공한다는 점도 개발자 입장에서는 매력적인 부분임.
     * 다만, 유사한 기능을 제공하는 제품들(Bugsnag, Sentry 등)과의 차별점을 더 부각할 필요가 있어보임.

   원문은 'ex-Cloudflare Team' 인데 GN+ 제목은 구글 직원으로 되어있네요.

   DeepL도 'We' 가 들어간 문장을 유니티라고 잘못 번역 하던데...

   갑자기 언어모델들 한국어 데이터셋이 궁금해지네요 🤔

   음. 이건은 정말 신기하게 번역이 되었네요. 어차피 중요한 내용도 아닌듯해서 그 부분은 제거해 두었습니다.
"
"https://news.hada.io/topic?id=14756","YC S19 출신 Muddy, 업무 효율 향상을 위한 멀티플레이어 브라우저 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              YC S19 출신 Muddy, 업무 효율 향상을 위한 멀티플레이어 브라우저 출시

Muddy 브라우저 소개

     * Jimmy, Ron, Austa가 Muddy(https://feelmuddy.com/)를 소개함
     * Muddy는 업무용 브라우저로, 프로젝트 파일을 사용하고 공유하는 동일한 장소에서 자동으로 정리해주는 기능을 제공함
     * 데모 영상: https://www.youtube.com/watch?v=tZr49aN3sjQ
     * 다운로드 링크: https://feelmuddy.com/

기존 업무 환경의 문제점

     * 컴퓨터에서 업무를 진행할 때 많은 마찰이 발생함
     * 중요한 링크를 찾기 위해 채팅 로그를 뒤지는 데 시간을 낭비하거나, 무언가를 찾기 위해 다른 사람의 작업 흐름을 방해함
     * 웹 앱은 각자의 사일로에서 도움을 주지만, 여전히 많은 중복 작업이 필요함
     * 모든 앱에는 파일 정리, 알림 수신함, 검색 시스템 등 고유한 방식이 있음
     * 대화는 모든 곳에 존재하며 프로젝트에 대한 모든 것을 한 눈에 볼 수 있는 단일 보기가 없음
     * 파일이 폴더에 저장되는 대신 ""클라우드""에 저장됨

Muddy의 개발 배경

     * 공유 문서에서 파일을 정리하고 새로운 앱 사용을 제한하는 데 시간을 할애하기 시작함
     * 이는 도움이 되었지만, 조직화에 신경을 쓰지 않으면 링크가 오래되고 다시 엉망이 됨
     * Muddy는 자체적으로 사용하기 위해 개발한 해커톤 프로젝트로 시작됨
     * 다른 사람과 함께 웹 앱을 사용할 수 있는 단일 장소이지만, 각 사용자에 맞게 자동으로 개인화됨
     * 모든 사람은 자신의 작업 방식에 맞게 설계된 모든 프로젝트에 대한 고유한 보기를 얻음

Muddy의 주요 기능

     * Muddy 사용자는 자동 탭 그룹과 같은 공간에서 프로젝트에 대해 작업함
     * 사용자는 프로젝트의 공유 타임라인에 앱(Github PR, Figma 파일, Trello 보드 등 모든 사이트 가능)을 공유하고, Muddy는 자동으로 관련 탭을 열어줌
     * 프로젝트에 필요한 모든 앱을 한 번의 클릭으로 열 수 있음
     * Muddy는 백그라운드에서 작동하여 타임라인을 추적하고 LLM을 사용하여 앱을 지속적으로 구성하고 모든 것을 최신 상태로 유지함
     * 파일의 인기도, 명명 규칙, 대화 등의 신호를 고려하여 관련성을 파악함
     * 모든 사람에게 중요한 탭의 업데이트된 목록이 제시됨
     * 실제 브라우저는 Chromium 기반임
     * 몇 주 전에 다시 방문해야 할 때 프로젝트 타임라인을 한 번의 클릭으로 해당 시점으로 되감을 수 있음
     * 내장된 협업 기능이 없는 사이트(문서 등)의 경우 Muddy를 사용하여 웹사이트에서 직접 주석을 달 수 있음
     * 프로젝트가 커지면 분할해야 하는 경우가 있음
     * 모든 공간에서 Muddy는 ChatGPT와 같은 질문에 답변하고, 파일을 출처로 인용하며, 앱을 직접 반환할 수 있음
     * 이는 Muddy의 AI가 브라우저를 공유하고 개인 정보 보호를 염두에 두고 로컬에서 인증된 앱을 사용할 수 있기 때문에 가능함

다른 브라우저와의 차이점

     * Chrome과 Arc 같은 다른 브라우저는 공유를 부가 기능으로 간주하면서 개인 생산성에 초점을 맞춤
     * Muddy는 생산성이 다른 사람과 얼마나 잘 협력할 수 있는지에 달려 있으며, 이를 일등 고려사항으로 생각함
     * 수동으로 조직 작업을 수행하는 것은 지속 가능하지 않음

Muddy의 수익 모델

     * Muddy는 공유 비밀번호, 팀 조직, 맞춤 단축키, SSO 관리 등의 추가 기능을 포함한 팀용 유료 구독을 제공할 예정임
     * 아직 구축되지 않았으며 기본 제품은 무료로 제공될 예정임
     * 데이터 수익화를 통한 수익은 없을 예정임

GN⁺의 의견

     * Muddy가 제안하는 협업 중심의 브라우저 개념은 혁신적이고 기존 브라우저와 차별화된 접근법임. 하지만 사용자들이 기존 브라우저와 Muddy를 함께 사용해야 하는 불편함이 있을 수 있음. 기존 브라우저의 확장 프로그램 형태로 제공하는 것도 고려해 볼 만함.
     * 자동 파일 정리 및 프로젝트 관리 기능은 매력적이지만, 실제 업무에서 어느 정도 수준으로 정확하게 동작할지는 의문임. 사용자가 직접 분류한 체계와 AI가 자동 분류한 체계 간에 괴리가 있을 수 있음. 사용자가 직접 분류 체계를 교정하고 AI를 학습시킬 수 있는 방법이 필요해 보임.
     * 웹 앱 간 사일로 문제를 해결하려는 시도는 좋으나, 결국 모든 것을 한 데 묶는 Muddy라는 또 하나의 사일로가 될 위험이 있음. 장기적으로는 웹 표준 차원에서 앱 간 연동이 가능하도록 하는 노력이 필요할 것으로 보임. Muddy가 하나의 솔루션이 아니라 관련 논의를 활성화하는 계기가 되길 바람.
     * 타임라인 기반 인터페이스나 웹페이지 직접 주석 기능 등 흥미로운 아이디어들이 엿보임. 하지만 이것이 기존 인터페이스 대비 얼마나 효율적일지, 사용자들이 얼마나 받아들일지는 미지수임. 초기 사용자들의 피드백을 면밀히 분석하고 개선해 나가는 것이 중요해 보임.
     * 보안 및 프라이버시 이슈가 걱정됨. 개인과 기업의 모든 데이터가 한 브라우저에 집중되고, AI가 이를 분석한다는 점에서 우려가 제기될 수 있음. 데이터 처리가 로컬에서 이뤄진다 하더라도 사용자를 안심시키기 위한 구체적인 방안이 필요해 보임.

        Hacker News 의견

     * Muddy의 메시지 전송 및 탭에 댓글 게시 기능은 매우 창의적이고 혁신적인 UX로, 미래지향적인 기능임. 이러한 개념을 고안한 것에 대해 축하를 표함.
     * 모든 것이 타임라인 기반이라는 점이 마음에 듦. 현재 Front 이메일 스레드를 사용하고 Dropbox에 모든 것을 게시하는데, Muddy의 연대순 북마크 기능이 이를 대체할 수 있을 것으로 보임. 많은 팀에서 Google Groups와 Google Docs를 사용하여 진행 상황을 문서화하는데, 이는 비효율적이며 Muddy가 이를 자동으로 해결할 수 있음.
     * 화면 공유 시 브라우저에 수많은 북마크와 탭이 있는 것을 볼 수 있는데, 이는 워크플로우에 악영향을 미칠 수 있음. AI에 의존하여 정리하는 것은 선호하지 않음.
     * 특정 사례를 다루는 별도의 ""솔루션"" 페이지가 있으면 좋을 것 같음.
     * 외부 사람을 위한 클라이언트 통합이 필요할 수 있음. 클라이언트에게 즉시 액세스 권한을 부여하고 교육하는 것은 어려울 수 있으므로, 자동 이메일 통합을 통해 클라이언트의 이메일이 타임라인에 표시되고 직접 응답할 수 있도록 하는 것이 좋음.
     * 축하의 말과 함께 행운을 빔. PM 문제를 해결하려는 시도가 인상적이며 좋은 일을 하고 있음.
     * 2019년 YC에 진출했다가 2024년에 출시하게 된 배경이 궁금함. 그 과정에서 흥미로운 피벗이 있었을 것으로 추측됨.
     * Muddy는 ""Google Wave""와 같이 풍부한 문서에서 협업할 수 있는 좋은 추억을 떠올리게 함.
     * 데모가 매우 인상적이며, 특히 파일을 딥링크하고 협업자를 언급하는 AI 리콜 기능이 마음에 듦. 이 제품은 클라우드 이후 디지털 작업 공간의 진화의 결과물로 느껴짐. 채팅 후에 칸반 보드, 팀 비밀번호 공유, 클라우드 파일 저장소 등 더 많은 기본 협업 도구를 통합할 계획인지 궁금함.
     * 초기 사용자로서 출시를 축하함. 공유 작업 공간과 컨텍스트가 있는 공유 브라우저 창은 협업에 엄청난 도움이 됨. Figma 디자인, Notion 문서, Gitlab MR을 모두 같은 공간에 두어 각각 별도로 검색하거나 상호 연결할 필요가 없어짐.
     * 해커톤 프로젝트가 이 정도로 발전한 것을 보니 기쁨. 타임라인과 신호 기능이 멋져 보이며 사용해보기를 기대함. 프리랜서/원격/해커톤 작업 등 단기 협업을 위한 더 사적이고 일시적인 공간에 대한 생각(및 비즈니스 모델)도 있기를 바람.
     * 매우 멋진 프로젝트임. 어떤 기술 스택으로 작성했는지 궁금함. Electron인지 아니면 더 낮은 수준인지 알고 싶음.
     * CSV나 .txt 파일을 드래그하면 자동으로 시트나 Google Docs를 가져와서 프로젝트를 열 수 있으면 좋겠음. Google Drive를 통해 업로드하는 것이 싫음.
     * Office365 도구와 Muddy에 대한 생각이 궁금함. Google Docs를 사용하지 않지만 유사한 경험을 하고 싶음. 이 워크플로우를 통해 특정 팀이 MSFT 의존도를 줄일 수 있을 것으로 보임. 사용해보고 팔로우하는 것이 기대됨.
     * 출시를 축하함. Figma, Sheets 등의 사용은 90%가 혼자 작업하고, 작업물을 공유하는 순간 집중적인 협업을 거쳐 점차 비동기화됨.
     * 혼자 작업할 때는 Muddy를 사용하지 않겠지만, 초기 집중 협업 이후에는 흥미로울 것 같음. 특히 단일 앱이 아닌 여러 앱을 포함하는 프로세스의 경우 더욱 그러함. 장기적인 비동기 협업에서 앱 간 혼란스러워지는 경우가 많음.
     * Chromium 기반임에도 Linux 빌드가 없어 아쉬움. 본인과 팀 전체가 Linux를 사용하므로 시도해보고 싶음.
"
"https://news.hada.io/topic?id=14728","HN 공개: ChatGPT를 위한 비선형 사용자 인터페이스 구축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  HN 공개: ChatGPT를 위한 비선형 사용자 인터페이스 구축

Grafychat 소개

     * Grafychat은 ChatGPT 및 기타 대화형 AI를 위한 프라이버시 친화적인 캔버스 기반 시각적 노트북임
     * OpenAI, Google AI 및 Local Ollama 모델과 함께 작동함
     * API 키를 가져와서 채팅을 시작할 수 있음

Grafychat의 주요 기능

  끝없는 캔버스

     * 채팅을 시각적으로 구성할 수 있음
     * 대화를 관리하기 위해 점을 연결할 수 있음
     * 필요한 만큼 캔버스를 만들 수 있음

  프라이버시 친화적

     * 모든 것이 사용자의 기기에 저장됨
     * 데이터는 non-local LLM 요청에 대해서만 기기에서 나감
     * 가입이나 계정이 필요하지 않음

  결과 제어

     * 사용자 지정 지침을 쉽게 적용할 수 있음
     * 실시간으로 모델을 전환할 수 있음
     * 모델 매개변수를 조정할 수 있음

  강력한 검색

     * 모든 데이터에 대한 전체 텍스트 검색이 가능함
     * 정밀도로 필터링할 수 있음
     * 결과로 쉽게 탐색할 수 있음

  최고 수준의 OpenAI 지원

     * GPT-4 등 모든 ChatGPT 모델 지원
     * 음성 입력/받아쓰기 지원
     * 음성 생성/내레이션 지원
     * 이미지 생성 지원
     * ChatGPT에 대한 활성 구독이 필요하지 않음
     * 자체 OpenAI API 키 사용 가능

  무료로 사용 가능한 로컬 모델

     * Ollama 지원(Mac, Windows, Linux)
     * 증가하는 오픈소스 모델 카탈로그
     * 강력한 Llama 3 등
     * 완전 무료로 사용 가능
     * 기기에서 Ollama 앱을 실행하고 설정하기만 하면 됨

  사용자 정의 가능한 프롬프트 라이브러리

     * 앱 전체에서 사용 가능
     * 프롬프트를 쉽게 저장, 편집 및 재사용 가능

  각 채팅은 마크다운 편집기

     * 모든 채팅을 편집할 수 있음
     * 데이터를 깔끔하게 유지
     * Inspector로 Markdown으로 내보내기 가능

  Inspector가 있는 클래식 채팅 보기

     * Inspector에서 채팅 시작 또는 계속 가능
     * 현재 대화 선택 및 검사 가능
     * Markdown으로 내보내기 가능

  사용자 정의 가능한 모양과 느낌

     * Flow에 색상 추가 가능
     * 특정 부분 표시/숨기기 가능
     * 대화의 일부에 레이블 지정 가능

  여러 AI 제공업체 지원

     * OpenAI
     * Google AI
     * LLama 3를 통한 Ollama
     * 그리고 목록이 계속 증가하고 있음

  BYOAK - API 키 직접 가져오기

     * JSON 파일로 데이터 가져오기/내보내기
     * 키보드 단축키
     * 코드 강조 표시 지원
     * 채팅 고정, 색상 태그 지정
     * 사용자 지정 배경
     * 다크 모드
     * 등등

가격 및 라이선스 정보

     * 한 번 구매로 라이선스 소유 가능
     * 각 라이선스에는 5개의 활성화가 포함되어 있으며 만료 날짜가 없음
     * Standard ($39): 모든 제한 해제, 모든 기능 잠금 해제
     * Extended ($59): Standard의 모든 기능 + 자체 호스팅 패키지, 데스크톱 앱 출시 예정
     * Premium ($79): Extended의 모든 기능 + 프리미엄 지원, 데스크톱 앱 출시 예정

FAQ 요약

     * Grafychat은 ChatGPT 및 기타 대화형 AI를 위한 프라이버시 친화적인 캔버스 기반 시각적 노트북
     * 구독 기반 앱이 아니며, 한 번 구매로 라이선스를 소유할 수 있음
     * 5개의 활성화는 라이선스 키를 5개의 다른 기기에서 사용할 수 있음을 의미
     * OpenAI, Google AI, Local Ollama 모델 등 여러 챗봇 제공업체 지원
     * 가입이나 OpenAI 구독이 필요하지 않음
     * 데스크톱 앱은 아직 출시되지 않았지만 개발 중에 있음
     * Grafychat.com은 사용자 데이터를 보관하지 않음
     * 환불 정책에 대해서는 별도 문의 필요

GN⁺의 의견

     * Grafychat은 ChatGPT나 GPT-4 등 다양한 대화형 AI 모델을 시각적으로 관리할 수 있는 도구로 보임. 특히 대화 내용을 캔버스 형태로 구성하고 연결할 수 있어서 체계적으로 대화를 정리하는데 유용해 보임.
     * 사용자 데이터를 기기에 저장하고 API 키를 직접 입력받는 등 프라이버시를 중요시하는 점도 장점. 다만 non-local LLM 요청시에는 데이터가 외부로 전송된다는 점은 유의해야 할 듯함.
     * 오픈소스 모델인 Ollama도 지원해서 무료로 사용할 수 있는 점, 그리고 프롬프트 라이브러리 기능으로 자주 사용하는 프롬프트를 저장하고 재사용할 수 있는 점 등 사용성을 높이는 기능들이 다양함.
     * 한편 구독 방식이 아닌 라이선스 방식이라 가격이 다소 부담스러울 수 있음. Standard 등급의 경우에도 $39로 적지 않은 금액. 기능이 많고 개인정보 보호에 신경썼다고는 하지만 오픈소스 모델을 무료로 사용할 수 있다는 점을 감안하면 가격 경쟁력 면에서는 의문.
     * 아직 데스크톱 앱이 없고 웹 기반으로만 서비스된다는 점, 그리고 신생 서비스다보니 안정성이나 향후 지속성 여부가 불확실하다는 점도 도입시 고려해볼 사항.

        Hacker News 의견

   이 댓글들은 AI 기반 대화형 워크스페이스 데모에 대한 다양한 의견을 제시하고 있음. 주요 내용은 다음과 같음:
     * 이미지 기반으로 유사한 데모를 만들었으며, LLM과 작업할 때 결정론적인 ""다음 단계""가 필요하다고 느끼는 대신 기계와 실제로 리프할 수 있게 해줌.
     * 이 아이디어의 세 번째 반복판이며, 답장 팝업이 스마트한 기능이고 좋은 터치임. 프라이버시 중심과 BYOK도 마음에 듦.
     * AI를 위한 그래프 인터페이스가 주목받고 있음.
     * Obsidian과 플러그인을 사용하여 이와 유사한 것을 쉽게 만들 수 있음.
     * 노드를 끌어다 놓고 관심 있는 것을 찾는 데 지칠 것 같음. 검색이 가능한지 궁금함.
     * AI를 에이전트로 사용하여 그래프 뷰를 만들거나 자체 구성되는 그래프로 후속 질문을 제안/강조하면 더 흥미로울 것임.
     * 선형 완성품을 선호하지만 종종 계층을 먼저 완성하여 작업함. Gingko를 사용하면 문제 구조를 쉽게 정리할 수 있음.
     * 가격이 비싸고 폐쇄 소스라는 점이 구매 장벽이 될 수 있음. 오픈 소스로 전환하고 지원에 대해 요금을 부과하는 것이 좋겠음.
     * OpenAI나 Anthropic의 UI에서도 이와 유사한 기능을 제공하면 좋겠음. ""여기에서 새 채팅 만들기""와 같이 간단할 것임.
"
"https://news.hada.io/topic?id=14636","안드로이드에서 VPN 터널 밖으로 DNS 트래픽 유출 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   안드로이드에서 VPN 터널 밖으로 DNS 트래픽 유출 가능성

Android VPN 터널 밖으로 DNS 트래픽이 유출될 수 있음

  다중 DNS 유출 가능성 확인

     * 최근 Android에서 다중 DNS 유출 가능성을 알게 됨
     * Android 자체 버그에서 기인하며, 특정 앱에만 영향을 미침
     * 4월 22일 월요일, Reddit 사용자 보고를 통해 DNS 유출을 알게 됨
          + 사용자가 ""VPN 없이 연결 차단"" 설정을 켠 상태에서 VPN을 비활성화하고 활성화할 때 DNS 쿼리가 유출되는 것을 발견함
     * 내부 조사를 즉시 시작하여 문제를 확인할 수 있었음
     * 조사 결과 Android에서 DNS 유출을 일으킬 수 있는 더 많은 시나리오를 발견함

  발견 사항

   Android OS에서 DNS 트래픽이 유출될 수 있는 시나리오 식별:
     * DNS 서버가 구성되지 않은 상태에서 VPN이 활성화된 경우
     * VPN 앱이 터널을 재구성하거나 강제 중지/충돌되는 동안 짧은 시간 동안 발생

   유출은 C 함수 getaddrinfo에 대한 직접 호출로 제한되는 것으로 보임:
     * 위에 나열된 시나리오에서 도메인 이름을 확인하는 이 방법을 사용하는 앱은 유출을 일으킴
     * DnsResolver와 같은 Android API만 사용하는 앱에서는 유출을 발견하지 못함
     * Chrome 브라우저는 getaddrinfo를 직접 사용할 수 있는 앱의 예임

   _Always-on VPN_과 _Block connections without VPN_이 활성화되어 있는지 여부에 관계없이 위의 내용이 적용됨:
     * 이는 예상되는 OS 동작이 아니므로 OS의 업스트림에서 수정되어야 함

   여러 버전의 Android에서 이러한 유출이 발생하는 것을 확인할 수 있었음(최신 버전인 Android 14 포함)

  개선 사항

   현재 앱은 차단 상태에서 DNS 서버를 설정하지 않음:
     * 앱이 복구할 수 없는 방식으로 터널을 설정하지 못하면 차단 상태로 전환됨
     * 이 상태에서는 트래픽이 기기에서 나가는 것을 중지함
     * 그러나 이 상태에서는 DNS 서버를 설정하지 않으므로 위에 설명된 DNS 유출이 발생할 수 있음
     * 당분간 가짜 DNS 서버를 설정하여 OS 버그를 해결할 예정임
     * 이 수정 사항이 포함된 릴리스를 곧 기대할 수 있음

   터널 재연결 중 유출을 앱에서 완화하기는 더 어려움:
     * 여전히 솔루션을 모색 중임
     * 터널 재구성이 발생하는 횟수를 최소화할 수 있지만, 현재로서는 이 유출을 완전히 방지할 수 없다고 생각함

   어떤 VPN 앱에서도 이러한 해결 방법이 필요하지 않아야 함을 분명히 해야 함:
     * 도메인 이름을 확인하기 위해 앱이 getaddrinfo를 사용하는 것도 잘못된 것이 아님
     * 대신 사용하는 앱에 관계없이 모든 Android 사용자를 보호하기 위해 OS에서 이러한 문제를 해결해야 함

   Google에 문제를 보고하고 개선 사항을 제안했으며 신속하게 해결되기를 바람

  재현 단계

   다음 단계는 위의 두 번째 시나리오를 재현하며, 여기서 VPN 사용자는 터널 구성을 변경함(예: 다른 서버로 전환하거나 DNS 서버 변경):
     * WireGuard 앱을 사용하는데, 이는 Android VPN의 참조 구현이 되었기 때문임
     * 유출은 아마도 다른 Android VPN 앱으로도 재현할 수 있음을 유의해야 함
     * getaddrinfo를 사용하는 것으로 확인된 앱 중 하나이므로 유출을 트리거하기 위해 Chrome을 사용함

    1. spam_get_requests.html 다운로드
    2. WireGuard 앱과 Chrome 설치
    3. wg1.conf, wg2.conf를 WireGuard로 가져오기
    4. WireGuard 앱에서 wg1 터널을 활성화하고 VPN 권한 허용
    5. Android VPN 설정에서 WireGuard에 대해 ""Always-on VPN""과 ""Block connections without VPN"" 활성화
    6. 라우터에서 tcpdump를 사용하여 데이터 캡처 시작 $ tcpdump -i <INTERFACE> host <IP of android device>
    7. WireGuard와 Chrome을 나란히 보이도록 화면 분할
    8. Chrome으로 spam_get_requests.html 열고 ""Start"" 누르기
    9. WireGuard 앱에서 wg1과 wg2 사이를 전환하다가 다음 단계에서 유출이 보일 때까지 반복
   10. 라우터에서 다음과 같은 DNS 트래픽 관찰:
11:50:27.816359 IP Pixel-Tablet.lan.53353 > OpenWrt.lan.53: 11200+ A? 307lf5rgn6-19282-11-50-27-519z.mullvad.test.lan. (65)
11:50:27.816359 IP Pixel-Tablet.lan.48267 > OpenWrt.lan.53: 44347+ A? 307lf5rgn6-19284-11-50-27-579z.mullvad.test.lan. (65)
11:50:27.816396 IP Pixel-Tablet.lan.16747 > OpenWrt.lan.53: 44584+ A? 307lf5rgn6-19289-11-50-27-729z.mullvad.test. (61)
11:50:27.816458 IP OpenWrt.lan.53 > Pixel-Tablet.lan.53353: 11200 NXDomain 0/0/0 (65)
11:50:27.816476 IP Pixel-Tablet.lan.45727 > OpenWrt.lan.53: 40503+ A? 307lf5rgn6-19290-11-50-27-759z.mullvad.test. (61)
11:50:27.816542 IP OpenWrt.lan.53 > Pixel-Tablet.lan.48267: 44347 NXDomain 0/0/0 (65)
11:50:27.816588 IP Pixel-Tablet.lan.43821 > OpenWrt.lan.53: 36295+ A? 307lf5rgn6-19291-11-50-27-789z.mullvad.test. (61)
11:50:27.816625 IP OpenWrt.lan.53 > Pixel-Tablet.lan.16747: 44584 NXDomain 0/0/0 (61)

   ""Block connections without VPN""이 활성화되어 있었기 때문에 암호화된 WireGuard 트래픽을 제외하고는 어떤 것도 기기에서 빠져나가서는 안 되지만, 여기서는 평문 DNS가 기기에서 나가는 것을 볼 수 있음

  결론 및 권장 사항

   DNS 유출은 사용자의 프라이버시에 심각한 영향을 미칠 수 있으며, 사용자의 대략적인 위치를 파악하거나 사용자가 사용하는 웹사이트와 서비스를 알아내는 데 사용될 수 있음

   이러한 발견은 ""Block connections without VPN""이 이름(또는 문서)에 부합하지 않으며 여러 결함이 있음을 다시 한 번 보여줌:
     * 위에서 언급한 조건에서 앱이 여전히 DNS 트래픽을 유출할 수 있음
     * 이전에 보고된 바와 같이 여전히 연결 확인 트래픽이 유출됨

   위협 모델에 따라 민감한 작업에 Android를 아예 사용하지 않거나 유출을 방지하기 위해 다른 완화 조치를 취해야 할 수 있음:
     * 앱에서 이러한 문제를 부분적으로 완화하는 것을 목표로 하므로 앱을 최신 상태로 유지해야 함

GN⁺의 의견

     * 이 문제는 근본적으로 Android OS의 버그이므로, Google에서 빠른 시일 내에 수정해야 할 것임. VPN 기능을 제공하는 앱 개발자들이 모두 이 문제를 해결하려 노력하는 것은 바람직하지 않음
     * ""Block connections without VPN"" 옵션이 문서대로 동작하지 않고 DNS 유출이 있다는 것은 사용자 입장에서 큰 문제임. VPN을 사용하는 주된 이유 중 하나가 프라이버시 보호인데 DNS 유출로 인해 사용자의 웹 사용 내역 등이 노출될 수 있기 때문
     * VPN 터널링 기술 자체의 보안성은 여전히 높다고 볼 수 있으나, OS에서 의도치 않게 유출이 발생하는 것을 방지하기 위해서는 VPN 외에 추가적인 보안/프라이버시 솔루션을 함께 사용하는 것도 고려해 볼만 함
     * 앱 개발자 입장에서는 OS 버그를 피해가기 위한 임시방편으로 앱에서 보완을 하고 있지만, 장기적으로는 근본적인 문제 해결을 위해 OS 개선이 필요해 보임
     * VPN 기술이 고도화되고 대중화되면서 이런 유형의 보안 이슈들이 새롭게 부각되고 있음. 앞으로도 모바일 OS의 네트워크 및 VPN 기능에 대한 보안감사와 지속적인 개선이 필요할 것으로 보임

        Hacker News 의견

     * Mullvad의 정보가 풍부하고 문제에 대한 설명, 단기 해결책, 잠재적 해결책, 그리고 Android에서 수정되어야 할 사항들을 잘 설명했다는 평가
     * Android의 ""편집증 네트워킹""은 시스템 및 OEM 앱에 대한 예외가 있으며, 대부분의 버그 수정은 이 핵심 가정을 수정하지 않을 것이라는 rethinkdns 개발자의 의견
     * Android는 두 TUN 장치 간에 ""원활한 핸드오버""를 지원하지만, 구현하기가 까다롭다는 점
     * Android는 내부 DNS 서버만 사용하려고 해도 필요에 따라 셀룰러 데이터로 전환하여 외부 DNS를 사용하는 문제가 오래전부터 있었음
     * Apple의 경우 기본적으로 ""프라이버시"" VPN을 통해 모든 것을 프록시하려고 하므로 경쟁 제품 사용 시 더 나은 상황은 아닐 것으로 예상
     * Android에서는 IPv6 DNS 서버를 직접 설정할 수 없으며, 와이파이에 변화가 있을 때마다 변경됨
     * MikroTik 방화벽 장치를 사용하여 VPN 서버의 IP 주소로 향하지 않는 모든 트래픽을 차단하는 방법으로 트래픽 누출을 방지할 수 있음
     * 루트 액세스가 없는 모든 시스템은 본질적으로 안전하지 않으며, Android와 iOS는 우스꽝스러움
     * 가장 안전한 설정은 휴대전화의 모바일 데이터를 끄고 OpenWRT 핫스팟을 사용하여 업스트림에서 VPN을 수행하는 것
     * DNS 누출은 사용자의 브라우징 위치와 심지어 실제 위치까지 노출시킬 수 있으므로 VPN의 목적을 무력화시킴
     * iOS에서도 APNS 트래픽이 VPN 외부로 누출됨 (프로비저닝 프로파일로 설치된 OS 지원 VPN 제외)
     * 이러한 ""버그""가 의도적으로 잘 배치된 것인지 의문이 들며, 대형 기술 기업이 정보 기관과 협력한다는 점을 고려할 때 Android의 많은 버그가 ""우연히"" 존재한다고 믿기 어려움
"
"https://news.hada.io/topic?id=14631","Ask HN: 멋져 보이는 스타트업 데모는 어떻게 만드나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Ask HN: 멋져 보이는 스타트업 데모는 어떻게 만드나요?

     * 요즘 스타트업들이 제품 데모 또는 기능 업데이트를 멋진 비디오로 보여주는데 어떻게 만드나요?

댓글의 추천 제품들 정리

     * ScreenStudio - macOS 전용 스크린 레코더. 다양한 디자인 패턴 내장으로 특별한 편집 기술 필요없음. 자동 줌, 버티컬 모드, 쉬운 편집, 부드러운 커서 이동, 커서 사이즈 변경 및 고품질 커서로 변경, 배경/색상/그림자 등으로 브랜딩 추가, 웹캠/마이크/사운드 추가 가능, 아이폰/아이패드 연결해서 화면 레코딩 가능
     * ARCADE - 제품 화면을 녹화해서 인터랙티브 도구로 만들어주는 도구. 웹/이메일등으로 공유해서 체험해보게 유도 가능.
     * Kite - 화면 녹화 및 자동줌으로 비슷. 추가기능으로 여러 개 녹화 합치기, 애니메이션 포함한 텍스트 화면추가, 녹화된 화면을 폰/타블렛 등 위에 놓기 가능, 음악 및 AI 보이스오버 추가 가능. 현재 맥만 지원하며 윈도우 지원예정
     * ScreenRun - ScreenStudio보다 조금 저렴하고, 딱 쓸만한 기능만 포함
     * Yarn - B2B 마케팅/세일즈을 위한 비디오 앱. (아직 오픈전) 빠른 워크플로우 와 쉬운 편집기능 및 팀 편집모드등을 제공 예정
     * ascinema - 터미널 화면 전용 녹화 및 공유하는 도구. 자체포맷인 .cast 파일(JSON형식) 로 저장해서 터미널 및 브라우저에서도 재생 가능.
     * vhs - 터미널 전용 레코더. CLI 도구의 동작화면을 녹화해서 GIF로 제작

   사이트들이 신박하네요.

   감사합니다

  Hacker News 의견

     * Arcade는 정말 훌륭해 보이며, 이런 질문을 올려줘서 감사함
     * 스크린 캡처 도구의 진정한 가치는 추상적인 개념을 설명하는 사람들에게 자산을 만들어주는 것임
          + 창업자라면 스토리텔링과 모션 그래픽에 재능이 있더라도 제품 비디오를 잘 만드는 사람을 100% 아웃소싱해야 함
          + 주요 우선순위에서 벗어나는 일이며, 주제에 대해 객관적으로 판단하기에 거리가 부족함
     * 사용해보지 않은 인터페이스를 빠르게 둘러보는 영상이 사람들이 보고 싶어하는 것인지에 대해서는 논란의 여지가 있음
          + 그런 영상 자체만으로는 큰 이점이 없을 수 있음
     * 프로세스가 정말 쉬운 경우(버튼 클릭, 신용카드 입력 등) 다른 마케팅 카피로 같은 프레젠테이션을 보는 것에 금방 지루해질 것임
          + 한때 완전히 새로웠던 것들(채팅 위젯, 트윈/줌 프레젠테이션, 무한 스크롤 뉴스피드, 캡차 등)은 시대에 뒤떨어짐
     * ScreenStudio는 좋은 제품임. Yarn(YC W24)은 이 분야에서 제품을 만들고 있으며 곧 HN에 런칭 예정임
          + ScreenStudio와 iMovie, AfterEffects, Veed 등을 조합하는 팀을 자주 봄
          + Tella.tv, Kite, Descript 등도 체크해볼 만함
          + 더 발전된 모션 그래픽을 위해서는 프리랜서나 에이전시가 필요할 수 있음
     * 개인적으로는 빠른 전환이 많은 데모 영상을 좋아하지 않음. 속이 메스꺼워짐
          + 유튜브 영상이나 영화에서도 빠른 전환을 싫어하는 편이라 소수 의견일 수 있음
     * ScreenStudio의 모든 기능이 필요 없거나 가격이 부담스러우면 ScreenRun이 좋은 대안임
          + 브라우저 기반이지만 화면 녹화와 클릭 추적을 위한 맥/윈도우 앱이 있음
          + ScreenStudio보다는 제한적이고 인터페이스가 저렴해 보이지만 필요한 작업은 가능함
     * Arcade의 CEO임. ScreenStudio로 제작한 영상을 Arcade로 가져와 분기, 주석 추가, 분석 등을 할 수 있음
          + 5월 17일 브라우저 밖 캡처와 강력한 분석 기능 등 큰 릴리스 발표 예정 (https://www.linkedin.com/events/7189307779977818112)
     * Kite(YC S23)의 CEO임. ScreenStudio처럼 화면을 녹화하고 액션에 자동으로 줌인할 수 있음.
          + 여러 녹화본 결합, 텍스트 애니메이션 씬 추가, 3D 기기 배치, 음악/AI 보이스 오버 등의 업그레이드 기능
          + 초기 단계지만 스타트업들이 Kite로 제품 출시 영상을 정기적으로 제작 중
          + 맥 OS용 출시, 윈도우용 대기자 명단 받는 중 (https://kite.video)
     * CleanShot X, Adobe Premiere Pro, 에셋, 애플스크립트 자동화, SoundStripe 음악 등으로 직접 데모 영상 제작함
          + 처음 사용해본 도구들이었지만 ChatGPT에 물어가며 몇 일 만에 완성함
          + Premiere는 약간 골치 아픈 면이 있지만 ChatGPT 도움으로 빠르게 습득 가능했음
     * 9년 전 만들어진 사이트인데, 당시 과도하게 사용되던 스타일을 완벽하게 포착함 (https://tiffzhang.com/startup/)
          + 회사 이름도 훌륭함. 실제로 얼마나 많이 사용되었을지 궁금함
     * YC에서 지원하는 수백 개의 회사들 사이에 이런 수준의 중복이 있다는 게 놀라움
          + 하나는 이 분야로 피봇했을 것으로 추정됨
          + 요즘 YC 회사들끼리 경쟁하는 모습을 상상하기 어려움. YC 지원을 받은 '기존' 기업이 새로운 YC 지원 스타트업에 의해 혼란을 겪는 것도 봄
     * asciinema.org로 터미널 전용 데모를 잘 만들 수 있음
          + 특수 글꼴 사용 시 렌더링 이슈가 약간 있지만 추천함

   해커뉴스 댓글엔 CEO들이 출동해서 다들 대응하느라 바쁘군요.
   ARCADE가 ScreenStudio 영상을 가져와서 편집하게 해줄꺼라는 것은 놀랍군요.

   ScreenStudio 는 정말 훌륭하네요. 구독제가 아니라 구입형식이라 좋군요. 앱이나 서비스 만드는 데서는 한번씩 써봐야하는 도구인듯.

   ARCADE도 이거 통해서 알게되었는데, 좋네요. B2B 도구 만드는 곳에서는 쓸만할 듯.
"
"https://news.hada.io/topic?id=14652","Lunatik - Lua로 리눅스 커널을 스크립팅하는 프레임워크 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Lunatik - Lua로 리눅스 커널을 스크립팅하는 프레임워크

     * 커널에서 동작하는 ""Lua 인터프리터"" +
       Lua로 작성된 ""디바이스 드라이버"" +
       사용자 공간에서 스크립트를 로드하고 관리하기 위한 ""CLI"" 도구 +
       커널에서 스크립트를 로드하고 실행하며, 런타임 환경을 관리하기 위한 ""C API"" +
       커널 기능을 Lua 스크립트에 바인딩하기 위한 ""Lua API""
     * 다양한 예제들 포함
          + spyglass : 키로거
          + keylocker : 콘솔 키보드에 게임기 시절 Konami Code를 구현하는 스크립트. 키보드에 ↑ ↑ ↓ ↓ ← → ← → LCTRL LALT 를 입력하면 키보드가 막히고, 다시 같은 키를 입력해야 키가 풀림)
          + tap : 패킷 스니퍼
          + shared : 인메모리 키 밸류 스토어 구현(rcu,data,socket,thread 이용)
          + systrack : 시스템 콜을 모니터링하는 디바이스 드라이버
"
"https://news.hada.io/topic?id=14747","애플, '빗나간' 아이패드 'Crush' 광고에 대한 사과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플, '빗나간' 아이패드 'Crush' 광고에 대한 사과

Apple, iPad Pro 광고 '크러쉬'에 대해 사과하다

     * Apple은 신형 iPad Pro를 홍보하기 위해 만든 광고가 크리에이티브 커뮤니티 사이에서 광범위한 비판을 받자 사과했음
     * Apple 마케팅 부사장 Tor Myhren은 Ad Age와의 인터뷰에서 ""우리는 이번 영상에서 핵심을 놓쳤고, 우리는 유감스럽게 생각한다""고 말했음
     * Myhren은 ""창의성은 Apple의 DNA이며, 전 세계 크리에이터들이 자신을 표현하고 iPad를 통해 아이디어를 실현할 수 있도록 제품을 설계하는 것이 우리에게 매우 중요하다""고 덧붙였음

iPad Pro 'Crush!' 광고 내용

     * 화요일, Apple은 M4 칩을 탑재한 iPad Pro를 발표했는데, 이는 Apple 제품 중 가장 얇은 제품이라고 설명했음
     * iPad의 모든 창의적 가능성을 광고하기 위해 피아노, 레코드 플레이어, 페인트 등 다양한 것들이 유압 프레스의 압력 아래에서 납작해지는 ""Crush!"" 광고를 공개했음
     * 광고 마지막에는 iPad Pro만 남아있었음

크리에이터들의 부정적 반응

     * 이 광고는 일부 크리에이터들에게 좋지 않은 인상을 주었음
     * 배우 Hugh Grant는 이를 ""인간 경험의 파괴""라고 불렀음
     * 드라마 'The Handmaid's Tale'의 감독 Reed Morano는 트위터에 ""분위기 읽어봐(read the room)""라며 Apple CEO Tim Cook을 언급했음
     * Apple은 The Verge의 코멘트 요청에 즉시 응답하지 않았음

GN⁺의 의견

     * 크리에이터들의 창작물을 iPad Pro로 대체할 수 있다는 듯한 Apple의 광고 메시지는 크리에이터들에게 모욕적으로 느껴질 수 있음. 광고 의도와 달리 오히려 iPad Pro가 크리에이티브 작업에 적합하지 않다는 인상을 줄 수 있음.
     * 기술 기업들이 크리에이터 커뮤니티를 대상으로 한 마케팅을 할 때는 그들의 감성을 존중하고 공감할 수 있는 메시지를 전달하는 것이 중요함. 단순히 기술적 우위만 강조하기보다는 크리에이터들의 창의성을 어떻게 지원할 수 있는지에 초점을 맞추는 것이 효과적일 것임.
     * 그럼에도 불구하고 이번 사과와 같이 Apple이 크리에이터 커뮤니티의 목소리에 귀 기울이고 빠르게 대응한 것은 높이 평가할 만함. 앞으로도 크리에이터들과의 소통을 강화하고, 그들의 요구사항을 제품과 마케팅에 적극 반영해 나가는 자세가 필요할 것으로 보임.

        Hacker News 의견

   요약하면 다음과 같음:
     * 해당 광고에 대해 지나치게 감정적으로 반응하는 것에 대한 우려가 있음. 일상생활에서 이런 반응을 보인다면 삶이 힘들어질 것임.
     * iPad를 사기 위해 값비싼 악기와 도구들을 파괴하는 것은 문화를 거부하고 Apple의 소비자가 되라는 메시지로 보임.
     * 광고가 의도한 바는 iPad 안에 모든 창의성을 담을 수 있다는 것이었겠지만, 소중한 악기와 도구들을 파괴하는 모습은 좋은 느낌을 주지 않음.
     * 애니메이션 속도를 빠르게 하거나, 아티스트가 스튜디오를 나와 iPad를 사용하는 모습을 보여주는 식으로 제작했으면 더 나았을 것임.
     * 기후 친화적이라는 이야기 후에 실제 물건들을 부순 것이 특히 불편했음. 렌더링된 이미지를 사용하고 ""iPad로 렌더링되었습니다. 실제 물건이 훼손되지 않았습니다""라는 문구를 넣는 것이 더 나은 광고가 되었을 것임.
     * 이 광고는 디지털과 클라우드로 도구들이 대체되는 과정을 잘 보여주고 있음. 폭력적이고 소중한 것들이 파괴되는 과정이지만, 사람들이 iPad를 사고 싶어하게 만들지는 못함.
     * 악기와 창작 도구에는 영혼이 깃들어 있다고 여기는 일본 문화 특성상, 이 광고는 특히 일본 시장에서 큰 반발을 샀음.
     * 우울한 광고로, 회사가 전달하고 싶어할 메시지로는 적절치 않아 보임. 우려를 제기할 수 없는 분위기 때문에 이런 광고가 필터를 통과한 것으로 보임.
     * 초기 반응은 유압 프레스 채널을 재미있게 참조한 것으로 보였으나, 거대 기업이 예술가들의 도구를 으스러트리는 위협적인 모습으로도 해석될 수 있음.
     * 광고에 대한 반발은 지난 몇 년간 대형 기술 기업들에 대해 누적된 피로감과 AI가 현상 유지와 사람들의 생계에 미칠 영향에 대한 막연한 불안감이 혼재된 징후일 수 있음.
     * 공포 장르에서 고음과 저음을 동시에 사용하면 불안감을 유발하는 것처럼, 명랑한 음악과 무의미해 보이는 파괴행위의 병치가 뇌를 혼란스럽게 만들어 불편함을 줌. 광고 제작자들은 이를 혁신적이거나 놀라운 것으로 여겼을 수 있으나, 여전히 많은 사람들에게 불편한 느낌을 줄 수밖에 없었을 것임.
"
"https://news.hada.io/topic?id=14758","코로널 질량 방출(Coronal Mass Ejection, CME) 충돌 임박, 지구를 향한 두 개의 추가 CME","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    코로널 질량 방출(Coronal Mass Ejection, CME) 충돌 임박, 지구를 향한 두 개의 추가 CME

        Hacker News 의견

태양 폭풍의 영향과 대비

   이번 태양 폭풍 경보와 관련된 해커뉴스 댓글들을 요약하면 다음과 같음:
     * 전력 시스템 영향: 광범위한 전압 제어 문제 발생 가능성이 있으며, 일부 보호 시스템이 오작동하여 전력망에서 중요 자산이 이탈할 수 있음.
     * 우주선 운영 영향: 표면 충전 및 추적 문제가 발생할 수 있으며, 방향 문제에 대한 보정이 필요할 수 있음.
     * 기타 시스템 영향:
          + 유도 파이프라인 전류가 예방 조치에 영향을 미침
          + HF 무선 전파 산발적임
          + 위성 항법이 몇 시간 동안 저하됨
          + 저주파 무선 항법이 중단됨
          + 오로라가 앨라배마주와 캘리포니아 북부(일반적으로 지자기 위도 45°)에서 관측됨
     * 과거 사례: 1989년 캐나다 퀘벡주에서 송전선이 지자기 폭풍의 영향을 받아 퀘벡 전역과 미국 북동부 전력망이 중단된 바 있음.
     * K-지수: 현재 K8 수준으로, 극심한 G5 지자기 폭풍보다 한 단계 낮음. Carrington 사건의 K-지수는 확인되지 않음.
     * 대비 부족: Scientific American에 따르면 태양 초폭풍의 위협이 커지고 있지만 아직 준비가 부족한 상황임.

   이번 지자기 폭풍에 대해 PJM(미국 동부 전력망 운영기관)에서는 경고만 발령한 상태이며, 아직 구체적인 조치 사항은 없는 것으로 보임. 태양 기상에 대한 상세 정보는 유튜브 채널 등에서 확인 가능함.
"
