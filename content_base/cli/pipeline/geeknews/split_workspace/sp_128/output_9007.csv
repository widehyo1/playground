"https://news.hada.io/topic?id=12760","Ext4 시각화xt4 시각화

ext4 파일 시스템의 모습은 어떠한가?

     * 빈 드라이브에 mkfs.ext4 명령을 실행하면, 드라이브에는 ext4 파일 시스템이 구성됨.
     * 이 과정에서 0x00으로 이루어진 ""아무것도 없음""에서 ext4 파일 시스템의 목적있는 바이트 배열로 변모함.
     * 가상 머신에 작은 보조 드라이브를 추가하거나, 루프 디바이스로 구성된 일반 파일로 작업을 단순화함.

루프 디바이스를 사용하여 실험

     * 루프 디바이스 사용이 간소화되어 losetup 없이 mount -o loop <foo_file> <bar_dir>와 umount <bar_dir>만으로 마운트 및 언마운트 가능함.
     * dd 명령을 사용하여 /dev/zero에서 데이터를 읽어 64x1024 바이트 크기의 블록 8개를 가진 파일 생성함.

ext4 파일 시스템 생성 후의 변화

     * mkfs.ext4를 실행한 후의 블록 파일은 od 명령의 출력을 통해 구조를 확인할 수 있음.
     * 이 출력에서 ext4 파일 시스템의 구조적 특징을 볼 수 있음.

시각화를 통한 ext4 구조 이해

     * 각 블록이 1024x64 픽셀로, 각 픽셀이 하나의 바이트를 나타내는 시각화 이미지 제작.
     * ext4 파일 시스템 생성 후의 이미지에서는 mkfs.ext4에 의해 추가된 구조와 데이터 위치를 볼 수 있음.
     * ext4 데이터와 ""사용자"" 데이터를 구별하기 위해 /dev/urandom에서 생성한 1024 바이트 파일을 루프 디바이스에 복사하고, 시각화 코드에서 이를 구별하여 색상 코드로 표시함.

사용자 데이터 추가 후의 시각화

     * 사용자 데이터가 드라이브에 복사된 후의 이미지는 ext4 데이터와 사용자 데이터의 구분이 가능함.
     * 추가적으로, 사용자 데이터 파일을 드라이브에 세 번 복사하여 애니메이션 GIF를 생성함.

ext4와 ext2 비교

     * ext4 파일 시스템의 애니메이션과 비교하여 ext2 파일 시스템의 애니메이션도 제작함.

GN⁺의 의견

     * 이 글은 ext4 파일 시스템이 실제로 어떻게 드라이브에 구성되는지를 시각적으로 이해하는 데 도움이 됨.
     * 사용자 데이터와 시스템 데이터를 구별하는 시각화 방법은 파일 시스템의 작동 원리를 배우는데 매우 유익함.
     * ext4와 ext2의 비교를 통해 파일 시스템 간의 차이점을 직관적으로 이해할 수 있는 기회를 제공함.

        Hacker News 의견

     * 몇 년 전 FOSDEM에서 ext4 파일 시스템의 진정한 그래픽 시각화를 했음. 시각화는 약 20분부터 시작되는 비디오가 있음. 프로젝터가 사용한 연한 파란색을 제대로 표현하지 못해 혼란스러울 수 있으나, 블로그에 올바르게 렌더링된 비디오가 있음.
          + FOSDEM 비디오
          + 블로그 비디오
     * 컴퓨터 사용을 단순화하려는 많은 사람들의 목표가 교육적인 가치를 가질 수 있는 것들을 만들어냄. 예를 들어, 하드 드라이브 활동을 나타내는 빨간 불빛 같은 것은 사용자의 호기심을 자극하고 정보를 제공함. 고급 보기를 숨기되, 호기심 많은 사람들을 위해 그대로 두는 것이 좋은 절충안이 될 수 있음.
     * pixd라는 커맨드라인 유틸리티가 비슷한 데이터 시각화를 제공하지만, 시간에 따른 파일 시스템 변경을 보여주는 애니메이션 GIF만큼 멋지지는 않음. Hilbert 곡선을 사용하여 픽셀을 배열하는 것이 라인별로 픽셀을 그리는 것보다 도움이 될 수 있음.
          + pixd GitHub
          + cantordust Ghidra plugin
          + 3blue1brown Hilbert curve video
     * 파일 시스템 IO를 시각화하는 nbdkit 데모를 흥미롭게 봄.
          + nbdkit 데모
     * 파일 시스템을 시각화하는 실험을 진행함. 결과물인 a.png는 역으로 변환 가능하여 유효한 .ext4 파일을 다시 얻을 수 있음.
     * 데이터 시각화는 디스크 포맷이 실제로 디스크에 데이터를 어떻게 배치하는지에 대한 복잡성을 이해하는 데 도움이 될 수 있음. 예를 들어, 최소한의 사용을 위해 사전 할당된 메타데이터 등이 있음. 공간이 부족해지는 상황이 발생했을 때 어떤 일이 일어날지 궁금하지만, 애니메이션은 그 전에 멈춤.
     * 저자가 이 댓글을 본다면, GIF를 비디오로 변환하여 전송하는 바이트를 절약하고 사용자에게 비디오 컨트롤(일시 정지, 스크럽, 속도 조절 등)을 제공할 수 있음.
          + 예시 명령어: ffmpeg -i ext4.gif -pix_fmt yuv420p -c:v libx264 ext4.mp4
     * innodb_ruby라는 도구 세트가 InnoDB 구조를 시각화하고 배우는 데 매우 유용함.
          + innodb_ruby GitHub
          + innodb_ruby 사용 예
     * Kaitai IDE를 사용하여 각 바이트(또는 비트)별로 다양한 바이너리 형식을 시각화할 수 있음. ext4에 대한 정의 파일이 있음을 기억함.
     * 이 다이어그램을 보며 메타데이터를 별도의 장치에 저장할 수 있는 파일 시스템이 있는지 궁금함. 예를 들어, 데이터는 HDD에, 메타데이터는 연관된 SSD 드라이브에 저장함. 메타데이터를 메모리에 캐시하기 쉬워 복잡성을 늘리는 것보다 혜택이 크지 않을 수 있음.
"
"https://news.hada.io/topic?id=12851","미국 맥도날드의 빅맥 가격을 추적하는 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미국 맥도날드의 빅맥 가격을 추적하는 웹사이트

빅맥 가격 비교

     * 빅맥의 가격은 지역에 따라 다양함.
     * 가장 저렴한 빅맥은 오클라호마 주 스티글러의 1310 E Main St에서 $3.49에 판매됨.
     * 가장 비싼 빅맥은 매사추세츠 주 리의 240 West Road에서 $8.09에 판매됨.

  GN⁺의 의견

     * 이 정보는 전 세계적으로 유명한 패스트푸드 체인인 맥도날드의 빅맥 가격 차이를 보여줌으로써, 지역별 경제 상황과 구매력의 차이를 간접적으로 반영함.
     * 빅맥 지수는 실제로 경제학에서 화폐 가치의 구매력을 비교하는 데 사용되는 지표로, 이 정보는 경제학적 관점에서도 흥미로움.
     * 소비자들에게는 여행이나 이사를 계획할 때 예산을 세우는 데 도움이 될 수 있음.

        Hacker News 의견

     * 일본을 방문했을 때 기본 식사가 얼마나 저렴한지 놀랐음. 실제 환율보다 1 USD = 100 JPY로 계산해도, 맥도날드보다 더 좋고 저렴한 아침 식사를 Sukiya 같은 곳에서 24/7로 제공받을 수 있었음. 주문 경험도 훌륭했는데, 영어로 언어를 바꿀 수 있는 태블릿이 있어서 쉬웠음. 미국의 맥도날드가 더 이상 그렇게 저렴하지 않은 것 같음. 아침 식사를 주문할 때마다, 음식이 사전에 만들어져서 따뜻하게 데우기만 하는 것에 비해 비싼 느낌임. 빅맥 가격이 지난 수십 년 동안 인플레이션을 뛰어넘었다는 것을 발견함. 왜 그런지 궁금함.
     * 맥도날드가 처음으로 스크레이퍼를 차단했을 때, 사이트가 바이럴이 되었음. 가격을 업데이트하기 위해 스크레이프를 다시 실행해야 함.
     * 맥도날드의 최근 가격 충격에 대한 많은 이야기들이 있는데, 이 사이트는 실제로 어디에서 그런 경우가 있는지, 얼마나 지역적인지를 보여줌. 이코노미스트의 유명한 빅맥 지수에 근본적인 문제를 보여줌. 빅맥의 국가별 가격을 어떻게 선택하는지 이해할 수 없었음. 뉴욕시 내에서조차 빅맥 가격이 많이 다르기 때문임. 이코노미스트가 보고하는 많은 국가들 사이의 변동보다 NYC 내의 변동이 더 큼. 이코노미스트가 어떻게 도시별 가격을 선택했는지 이해할 수 없음. McCheapest 사이트에 감사함. 실제로 정확한 데이터를 가지고 있어서 멋짐.
     * 위치에 따라 가격이 다르다는 것을 몰랐던 사람이 나 혼자인가? 공항이나 다른 특별한 경우를 제외하고는 전국적으로 가격이 정해져 있다고 생각했음.
     * 가장 비싼 맥도날드는 주유소와 연결되어 있어서 가격이 높은 부분일 수 있음. 이는 고속도로 양쪽 방향으로 여행하는 사람들을 위해 반대편에도 하나가 있음. 서쪽 방향은 더 비싸고 동쪽 방향은 더 저렴함. 신기함!
     * 매사추세츠 주 서부 경계 근처 보스턴에서 서쪽으로 약 110마일 떨어진 고속도로 휴게소 플라자에 있는 가장 비싼 맥도날드는 미친 가격으로 유명함. 보스턴과 주변 지역의 빅맥 가격은 위치에 따라 $5.89 - $6.79로, 이는 금융 지구 내에서 매우 비싼 임대료를 지불하는 대형 기차 및 지하철역/버스 터미널을 포함함.
     * 웹사이트 아이디어가 마음에 듦. 업데이트가 조금 느림. 로컬 맥도날드가 이 웹사이트에서 보여주는 것보다 40센트 더 비싸고, 마지막 업데이트는 2023년 2월이었음. 배달 가격도 추적하면 좋을 것 같음. 로컬 맥도날드에서 빅맥은 픽업이 $6.39, 배달이 $7.79임. 이는 배달료를 포함한 가격이 아니라, 앱에서 배달을 선택하면 메뉴 가격이 더 높아짐.
     * 몇 년 전에는 소시지 맥머핀과 콜라(모든 사이즈)를 $2.12에 구입할 수 있었음. 지난 4년 동안 가격이 서서히 올라갔고, 몇 주 동안 $4.23에 도달함. 그리고 어느 날 갑자기 $4.24가 됨. 가격을 어떻게 설정하는지는 모르겠지만, ""단지 한 센트 더""가 중요하다고 느낀 것이 흥미로움.
     * 루럴 애리조나 맥도날드의 거물이 이 사이트를 내리려고 할 수도 있으니, 사이트를 아카이브해야 함.
     * 이 사이트는 전 세계적으로 확장되어야 함. 빅맥 지수와 일치하기 위해서임.
"
"https://news.hada.io/topic?id=12886","Triplit - 서버와 브라우저간에 실시간 동기화해주는 오픈소스 DB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Triplit - 서버와 브라우저간에 실시간 동기화해주는 오픈소스 DB

     * 브라우저/Node/Deno/ReactNative 등 어떤 JS환경에서도 사용가능
          + Full Stack DB: 앱내에 Typescript 패키지로 첨부하면, 서버에서 데이터 저장을 처리하며 지능적으로 쿼리를 클라이언트와 동기화
     * 프로퍼티 수준에서 증분 업데이터/충돌 해결을 통한 실시간 동기화
     * SQLite, IndexedDB, LevelDB, 메모리등 다양한 저장소 프로바이더 이용 가능
     * 자동 재접속및 일관성 제공으로 오프라인 모드 운용 가능
     * 실패한 업데이트에 대한 롤백 & 재시도 관리
     * 읽기/쓰기 양쪽에 대해서 Authorization 강제
     * 델타 패치를 통해 네트워크 트래픽 최소화
     * 클라이언트 측 DB가 로컬 캐싱을 처리
     * 관리자 대쉬보드 제공

   예전에 안드로이드 앱을 만들때에 인터넷이 불안정한 환경을 커버하기 위해 로컬에 realm 으로 디비를 구축하고 주기적으로 api를 이영해 싱크를 맞추도록 구축했었는데 굳이 새로 만들 필요가 없었군요

   https://localfirstweb.dev/ 좀 둘러봐야겠군요. 이게 한국에 알게모르게 많이 쓰는데
   혹시 RIA 툴을 경험해 본 분이 있다면... 이미 경험하고 계신 겁니다. 물론 마음에 안드는 거 압니다. 저도 마음에 안 들지만 이 로컬퍼스트 만큼은 인정해야 해요.

   Backend 개발자는 이거 설치하고 놀면 되는 걸까요? +_+
"
"https://news.hada.io/topic?id=12870","Vanna.ai: SQL 데이터베이스와 대화하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Vanna.ai: SQL 데이터베이스와 대화하기

     * RAG (Retrieval-Augmented Generation)를 적용한 LLM으로 정확한 Text-To-SQL 생성하는 오픈소스

Vanna 작동 방식

     * RAG ""모델"" 학습: 사용자의 데이터에 대해 RAG 모델을 학습시킴.
     * 질문하기: 학습된 모델을 사용하여 질문하면, 데이터베이스에서 자동으로 실행될 수 있는 SQL 쿼리를 반환함.

사용자 인터페이스

     * Vanna를 사용하여 구축된 몇 가지 사용자 인터페이스는 Jupyter Notebook, vanna-ai/vanna-streamlit, vanna-ai/vanna-flask, vanna-ai/vanna-slack 등이 있음.

시작하기

     * 설치: pip install vanna 명령어로 Vanna를 설치할 수 있음.
     * 가져오기: import vanna as vn 코드를 통해 Vanna를 사용할 수 있음.

훈련

     * DDL 문장으로 훈련: 데이터베이스의 테이블 이름, 컬럼, 데이터 타입, 관계 등에 대한 정보를 포함하는 DDL 문장을 사용하여 모델을 훈련시킬 수 있음.
     * 문서로 훈련: 비즈니스 용어나 정의에 대한 문서를 추가하여 모델을 훈련시킬 수 있음.
     * SQL로 훈련: 기존에 있는 SQL 쿼리를 훈련 데이터로 추가하여 새로운 SQL을 생성할 수 있음.

질문하기

     * vn.ask(""질문"") 메서드를 사용하여 질문하면 관련 SQL 쿼리를 받을 수 있음.

RAG 대비 파인 튜닝

     * RAG는 LLM에 걸쳐 이식 가능하고, 학습 데이터를 쉽게 제거할 수 있으며, 비용이 저렴하고 미래에 대한 적응력이 높음.
     * 파인 튜닝은 프롬프트 내 토큰을 최소화할 필요가 있을 때 유용하지만, 시작이 느리고 훈련 및 실행 비용이 비쌈.

Vanna 선택 이유

    1. 복잡한 데이터셋에 대한 높은 정확도: 학습 데이터에 기반하여 Vanna의 능력이 결정됨.
    2. 보안 및 개인 정보 보호: 데이터베이스 내용이 LLM이나 벡터 데이터베이스로 전송되지 않음.
    3. 자가 학습: Jupyter를 통해 사용하면 성공적으로 실행된 쿼리에 대해 자동 학습할 수 있음.
    4. 모든 SQL 데이터베이스 지원: Python으로 연결할 수 있는 모든 SQL 데이터베이스에 연결할 수 있음.
    5. 프론트 엔드 선택: Jupyter Notebook에서 시작하여 Slackbot, 웹 앱, Streamlit 앱 또는 사용자 정의 프론트 엔드로 사용자에게 제공할 수 있음.

Vanna 확장

     * Vanna는 모든 데이터베이스, LLM, 벡터 데이터베이스에 연결하도록 설계됨.
     * VannaBase 추상 기본 클래스는 기본 기능을 정의하며, OpenAI와 ChromaDB를 사용하는 구현을 제공함.

추가 자료

     * 전체 문서, 웹사이트, 지원을 위한 Discord 그룹 등이 제공됨.

   GN⁺의 의견:
     * Vanna는 데이터베이스 관리 및 SQL 쿼리 생성을 자동화하는 강력한 도구로, 사용자가 복잡한 데이터셋에 대해 높은 정확도의 SQL 쿼리를 쉽게 생성할 수 있게 해줌.
     * 사용자 친화적인 인터페이스와 자가 학습 기능을 통해 비전문가도 효율적으로 데이터베이스를 활용할 수 있게 되며, 이는 데이터 기반 의사결정을 더욱 가속화할 수 있음.
     * Vanna의 확장성과 미래 적응력은 기업이 기술 변화에 유연하게 대응하고 지속적으로 데이터 관리 프로세스를 개선할 수 있는 기회를 제공함.

        Hacker News 의견

     * ChatDB.ai 프로젝트 개발 중인 사용자 경험
          + ChatDB.ai라는 유사한 프로젝트를 개발 중임.
          + AI와 SQL을 결합하여 가장 성공적이었던 경험은 SQL 제공자의 오류를 각 반복 후 LLM에 피드백하는 것이었음.
          + 포맷된 오류 메시지 래퍼를 사용하여 시스템 테이블 쿼리를 강력하게 제안함으로써, 스키마 정보를 발견하는 데 매우 효과적이었음.
          + 이러한 작은 조정으로, 4개 이상의 테이블 조인이 필요한 쿼리를 찾는 데 놀라울 정도로 능숙해짐.
     * GPT-4를 사용한 개인 경험
          + GPT-4를 사용하여 이미 유사한 작업을 수행함.
          + MySQL CLI의 SHOW TABLE 명령어로 테이블 구조를 확인하고, 해당 테이블을 기반으로 장바구니 포기율 등 비즈니스 지표를 보여주는 쿼리를 생성함.
          + 이 방법이 상당히 잘 작동함을 경험함.
     * 자연어를 SQL로 번역하는 시스템에 대한 회의적인 견해
          + 자연어를 SQL로 번역하는 시스템 개발 노력을 인정하면서도, 자연어와 모델의 근본적인 특성이 추정적이고 정밀도가 떨어진다는 점에서 회의적임.
          + SQL 데이터베이스는 대부분의 경우 정확하고 정밀한 정보 처리를 위해 설계되었으며, 추정적인 레이어를 도입하는 것은 문제를 더 악화시킬 수 있음.
          + 이러한 시도가 실제 세계의 요구를 효과적으로 해결하는 데 생산적인지 의문을 제기함.
     * YC 지원 스타트업들을 포함한 유사 제품에 대한 관심
          + Minds DB (YC W20), Buster (YC W24), DB Pilot 등과 같은 몇 가지 유사 제품을 추적하고 있으며, 이 분야에 관심이 많음.
          + 자신도 이러한 솔루션을 찾고 있음.
     * duckdb 기반 보고 서비스에 대한 경험
          + 전반적으로 잘 작동하지만 몇 가지 문제에 부딪힘:
               o 낮은 온도 설정에도 불구하고 GPT-4가 때때로 예제나 스키마에서 벗어남.
               o 서비스는 일반적인 데이터를 호스팅하지만, 고객은 자신들의 도메인 언어로 보고서 생성을 요청함.
               o LLM 프롬프트 디버깅이 까다로움. 고객이 모델을 쉽게 혼란시킬 수 있음.
               o 생성된 쿼리에 대한 ""설명""을 고객에게 제공하여 보고서 작성에 사용된 내용을 투명하게 함.
     * RAG 작동 방식에 대한 우려와 설명
          + ""train""이라는 용어 사용에 대해 우려를 표함.
          + RAG가 훈련이나 미세 조정 없이 데이터 준비, 청킹, 벡터화만을 필요로 한다는 점을 강조하며 설명하는 데 많은 시간을 할애함.
     * LLM의 환각 문제에 대한 궁금증
          + LLM이 ""어제""와 같은 시간 개념을 어떻게 해석하는지, 생성된 SQL이 문법적으로 유효하더라도 의도와 다를 수 있는 문제에 대해 궁금함.
          + 특히 MAX, COUNT와 같은 집계 쿼리에서 잘못된 숫자를 내놓을 위험이 있으며, 이를 확인하기 위해서는 SQL을 직접 읽어야 하는데, 이는 전체 목적에 어긋남.
     * 자체 데이터셋과 기술을 사용한 경험 공유
          + 내부 직원들이 구조화된 데이터셋과 대화할 수 있는 봇을 개발하는 데 유사한 기술을 사용함.
          + 실제로는 어느 정도 작동하지만 몇 가지 도전 과제가 있음:
               o 기존 모델에는 없는 특정 업무 관련 열거형과 데이터 타입이 많아, 이를 수동으로 정의하고 프롬프트에 문맥으로 추가해야 함.
               o 시간 관련 질문에 대한 처리가 어려움.
               o 사용자가 무엇이든 물어볼 수 있기 때문에, 단일 테이블에 대해 많은 예시 SQL 쿼리가 필요함.
               o 다양한 테이블로 확장하는 데 어려움이 있으며, 더 효율적인 방법이 있는지 궁금함.
               o Llama2 70B Gen 모델을 사용했지만, 다른 모델이 SQL 쿼리 생성에 있어 더 나은 성능을 보이는지 궁금함.
     * bit.io에서의 경험과 고객 반응
          + bit.io에서 유사한 작업을 수행했으며, 사람들이 이를 좋아함.
          + 작업 중 발견한 내용에 대한 여러 기사가 있으며, 현재는 Databricks에 인수되어 서비스를 종료함.
          + 가능한 한 질문에 답변할 준비가 되어 있음.
"
"https://news.hada.io/topic?id=12863","더 주도적으로 행동하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            더 주도적으로 행동하는 방법

더 주도적으로 살아가는 방법

     * 에이전시(agency)는 타고난 특성이 아니라, 시간이 지나면서 더 똑똑한 친구들을 사귀고 나이가 들어가면서 상대적으로 더 어리석어진 저자가 보완한 부분임.
     * 저자는 에이전시를 ""일어나게 하려는 확고한 결심""으로 생각하며, 이를 통해 다양한 분야에서 멋진 일들을 해냄.
     * 에이전시는 다른 사람들이 하기 싫어하는 일을 찾아내는 것과 관련이 있으며, 이러한 일들은 종종 의식적인 선택보다는 회피의 구름 속에 숨어있음.

실제 가장자리 찾기

     * 포커를 통해 ""더 열심히 노력하여 승리를 쟁취하는 것""과 대조적으로 ""실제 가장자리 찾기""의 개념을 이해함.
     * 포커에서는 물리적인 '리드'가 큰 이점을 제공하지만, 대부분의 프로들은 이를 무시함.
     * 저자와 친구들은 리드에 대해 열심히 연구하고, 이를 통해 뛰어난 결과를 얻었지만, 다른 프로들은 이를 인정하지 않으려 함.

거절에 대한 요청

     * 불합리하게 느껴질 정도로 요청하는 것이 중요함.
     * 경력 초기에는 대부분의 지원에서 거절당해야 함.
     * 거절을 받아들이는 기술을 배우기 위해, 실제로 얻을 것 같지 않은 일에 지원해보는 것이 좋음.

진짜 피드백 찾기

     * 사람들이 알고 있는 사람에게 진짜 피드백을 받으려고 노력하지 않으면, 자기 개선을 위한 가장 쉬운 방법을 놓치게 됨.
     * 좋은 피드백을 받기 위해서는 익명으로 제공할 수 있는 방법을 제공해야 함.
     * 익명성은 사람들이 솔직한 피드백을 제공할 수 있게 하며, 저자는 자신의 트위터 바이오에 피드백 양식 링크를 두고 있음.

운의 표면적 증가

     * 새로운 프로젝트를 찾을 때 관련 작업을 하는 많은 사람들을 만나려고 노력함.
     * 대화의 유용성을 미리 예측하는 능력이 부족하지만, 대화 중에 흥미로운 것을 발견할 가능성이 높음.
     * 지난 3년 동안 가장 유익한 협력은 거의 무작위로 예약한 회의에서 나옴.

모든 것이 배울 수 있다고 가정

     * 대부분의 주제는 배울 수 있으며, 많은 특성들도 마찬가지임.
     * 카리스마와 같은 특성도 책을 읽고, 카리스마 있는 사람들을 관찰하며, 그들의 습관을 따라함으로써 배울 수 있음.

낮은 지위의 해자를 사랑하는 법 배우기

     * 새로운 기술을 배우거나 변화를 만들 때 낮은 지위의 해자를 건너야 함.
     * 해자를 건너는 것은 실제 이점을 제공하며, 질문을 하고 협력하지 않음으로써 조용히 건널 수 있지만, 이는 학습을 방해함.

너무 열심히 일하지 않기

     * 더 많은 시간이 더 많은 생산성을 의미한다고 생각하는 것은 잘못됨.
     * 에이전시는 주변 세계를 만드는 데 필요한 기술이며, 모든 사람이 배울 수 있고, 배우기에는 결코 늦지 않음.

GN⁺의 의견:

    1. 이 글은 에이전시라는 개념을 중심으로 개인의 성장과 성공을 위한 실질적인 조언을 제공함. 에이전시는 삶의 주도권을 잡고, 자신의 목표를 달성하기 위한 결정력과 행동력을 의미함.
    2. 저자는 자신의 경험을 바탕으로, 거절을 두려워하지 않고, 진정한 피드백을 추구하며, 운을 끌어들이는 방법과 같은 구체적인 전략을 공유함. 이러한 전략들은 독자들이 자신의 삶에서 적용할 수 있는 실용적인 가이드를 제공함.
    3. 글은 개인의 성장과 발전에 대한 긍정적이고 흥미로운 관점을 제시하며, 독자들에게 자신의 잠재력을 최대한 발휘하고 삶을 더 주도적으로 살아갈 수 있는 영감을 줌.

        Hacker News 의견

     * ""모든 것은 배울 수 있다""는 말은 한 사용자가 자신의 할머니가 했던 말을 떠올리게 했다고 함. 할머니는 ""다른 사람이 할 수 있다면 나도 할 수 있다""는 의미의 말을 전해주었고, 이는 사용자에게 큰 가치를 전달했다고 함. 어려움에 부딪힐 때마다 이 말을 떠올리며 인내한다고 함.
     * 한 사용자는 글이 자신의 주장에 반하는 좋은 예를 들었다고 생각함. 세계 1위 포커 플레이어였던 여성이 뛰어난 자연적 능력을 가지고 있음에도 불구하고, 왜 그녀는 몇 년 이상 어떤 일에도 오래 머물러 있지 않았는지 의문을 제기함. 사용자는 그녀의 성격이 그녀의 능력을 극복했다고 믿게 하려 하지만, 실제로는 그녀의 뛰어난 능력이 성격의 단점을 극복한 것처럼 보인다고 함.
     * 다른 사용자는 글이 좋다고 평가하며, 현재 자신의 삶에서는 더 많은 시간을 투자해야 하는 목표들이 있지만, 돈으로는 진전을 가속화할 수 없는 상황임을 설명함. 이 사용자는 자신의 의지가 자주 방해가 되어 돈 벌기에만 집중하고 싶은 충동을 느낀다고 함.
     * 한 사용자는 이 글이 매우 시의적절하고 상쾌하다고 느낌. 저자가 낮은 지위의 모험을 감수하는 것이 성공에 큰 영향을 미칠 수 있다고 말하는 것에 공감함. 성공이 폭발적이고 비선형적일 때, 가장 많은 시도를 하는 사람들에게 유리하다는 점을 강조함.
     * 사용자는 저자의 남편이 쓴 글도 훌륭하다고 언급하며, 관련 링크를 공유함.
     * 한 사용자는 글의 메시지에 공감하지만, 실제로 적용하는 데에는 우려를 표함. 자신의 삶에서 일부 영역에는 많은 통제력을 가지고 있지만, 다른 영역에서는 전혀 통제력이 없다고 느낌. 이러한 상황이 자신의 자아 인식과 상충한다고 생각함.
     * 구체적인 사례를 통해 '능동적인 행동'에 대해 더 넓은 시야를 가질 수 있다고 생각하는 사용자가 질문을 공유함.
     * 한 사용자는 다른 사람들이 다루고 싶어하지 않는 '거친 부분'을 찾는 저자의 아이디어에 공감함. 이 사용자는 대부분의 삶을 파트타임으로 일하며 대체로 게으른 편이지만, 일할 때는 거친 부분을 좋아한다고 함.
     * ""능동성/능동적""이라는 단어의 의미에 대해 혼란을 느끼는 사용자가 있음. 원칙-대리인 문제에서 대리인은 원칙의 이익을 대변하는 사람이지만, 더 많은 ""능동성""을 가지는 것이 왜 바람직한지에 대해 의문을 제기함.
     * 한 사용자는 더 많은 능동성을 가지기 위해 필요한 것은 단순히 돈이나 돈을 줄 의향이 있는 부유한 연결고리라고 느낌. 현재 건강하지 않고 고립된 상태에서는 단지 살아남기 위해 노력하고 있으며, 수단에 비해 야망이 훨씬 크다고 함.
"
"https://news.hada.io/topic?id=12772","파이썬 3.13, JIT 탑재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            파이썬 3.13, JIT 탑재

Python 3.13에 JIT 컴파일러 추가

     * CPython 코어 개발자 Brandt Bucher가 Python 3.13 브랜치에 JIT 컴파일러를 추가하는 풀 리퀘스트를 제출함.
     * 이 변경사항은 Python 3.11에 추가된 특수화 적응 인터프리터 이후 CPython 인터프리터에 가장 큰 변화 중 하나가 될 것임.

JIT란 무엇인가?

     * JIT(Just in Time) 컴파일은 코드가 처음 실행될 때 컴파일이 이루어지는 설계를 의미함.
     * JIT 컴파일러는 기계 코드를 생성하는 컴파일러를 말하며, AOT(Ahead of Time) 컴파일러와 대조됨.
     * Python 코드는 먼저 바이트코드로 컴파일되며, 이 바이트코드는 CPU에게 아무 의미가 없고 특수한 바이트코드 인터프리터 루프를 통해 실행됨.

copy-and-patch JIT란 무엇인가?

     * copy-and-patch JIT는 2021년에 제안된 개념으로, 동적 언어 런타임을 위한 빠른 알고리즘으로 설계됨.
     * copy-and-patch JIT는 각 명령어에 대한 지시사항을 복사하고 바이트코드 인수를 채우는(패치하는) 아이디어임.

copy-and-patch JIT의 장단점

     * ""전체"" JIT 컴파일러는 고수준 바이트코드를 중간 언어(IL)의 저수준 지시사항으로 컴파일하는 반면, copy-and-patch JIT는 바이트코드에서 기계 코드로 컴파일하는 것을 템플릿의 집합으로 수행함.
     * copy-and-patch JIT는 복잡한 JIT 컴파일러 아키텍처를 Python 런타임 내에서 실행할 필요가 없으며, LLVM JIT 도구를 소스에서 CPython을 컴파일하는 기계에 설치하기만 하면 됨.

이 JIT는 어떻게 작동하는가?

     * Python 3.13의 API에 새롭게 추가된 API를 확장하여 플러그 가능한 최적화기가 런타임에 발견될 수 있도록 함.
     * 새로운 JIT는 이 새로운 아키텍처를 위한 선택적 최적화기임.
     * 소스에서 CPython을 컴파일할 때 --enable-experimental-jit 플래그를 제공하면 Python 바이트코드에 대한 기계 코드 템플릿이 생성됨.

이 JIT가 더 빠른가?

     * 초기 벤치마크는 약 2-9%의 성능 향상을 보여줌.
     * 이 JIT는 Python의 성능을 크게 향상시킬 수 있는 일련의 최적화의 초석임.

GN⁺의 의견

     * Python 3.13에 추가된 JIT 컴파일러는 Python 실행 속도를 향상시키는 중요한 변화로, 특히 반복적인 작업에 대한 효율성을 높일 수 있음.
     * copy-and-patch JIT는 복잡한 JIT 아키텍처를 사용자의 Python 런타임에 통합할 필요 없이 성능을 향상시키는 혁신적인 접근법을 제공함.
     * 이 기술은 Python 커뮤니티에게 흥미로운 논의를 제공하며, Python의 성능 최적화에 대한 새로운 문을 열 것으로 기대됨.

        Hacker News 의견

     * 소프트웨어 버전 간의 2-9% 성능 향상이 흥미로움. 이러한 작은 개선들이 실망스럽게 여겨지기도 하지만, 지속적으로 누적되어 각 버전이 이전보다 빨라짐을 선호함.
     * Haoran Xu와 Fredrik Kjolstad의 '복사 및 패치' 기법이 주목받고 있음이 멋짐. Xu의 LuaJIT 리메이크 프로젝트 블로그 포스트를 통해 처음 접함. 기존 기술을 재활용하여 새로운 것을 창조하는 방식이 매우 영리함으로 느껴짐. 해당 블로그 포스트는 언어 구현에 대해 배우고 싶은 사람들에게 추천됨. 또한, Xu가 블로그 업데이트가 늦어진 이유가 뒷단의 재작업 때문임을 밝힘.
     * Brandt가 작년 CPython 코어 개발자 스프린트에서 이 주제에 대해 발표함.
     * PyPy, Jython, GraalPy, IronPython의 작업에도 불구하고, CPython에 JIT이 추가되는 것은 Python 생태계에 중요한 발전으로 여겨짐. 특히 3.13 버전 이후의 진화가 기대됨.
     * Python을 웹 개발 외 모든 것에 사용하는데, 성능이 향상된다면 매우 긍정적임. Python 생태계가 CGI나 mod_php와 같은 무상태 요청에서 벗어나 장기 실행 프로세스로 이동했음. 이는 로컬 웹 애플리케이션을 변경할 때마다 재시작해야 한다는 의미인지, 일부 개발자들은 파일 저장 시 애플리케이션을 자동으로 재시작하는 방법을 사용하고 있음.
     * CPython은 코드베이스를 매우 단순하게 유지하고, 다른 구현체에서 최적화를 담당하기로 되어 있었음을 기억함.
     * 기사에서는 '복사 및 패치' JIT를 새로운 것으로 소개하지만, DOS의 QuickBASIC이 비슷한 방식을 사용했음을 기억함. QuickBASIC은 메모리 내에서 템플릿 어셈블리 블록을 패치하여 매우 나쁜 어셈블리 코드를 생성했음.
     * 지난 2년간 Python 성능에 대한 진전이 놀라움. 코어 팀이 성능 향상을 진지한 목표로 삼고 눈에 띄는 개선을 이룸.
     * PyPy에 자금을 투자하기를 바람. 하지만 PyPy는 작은 프로그램에서는 빠른 시작 시간이 그리 좋지 않아 큰 이점을 보지 못함. 또한 큰 프로그램에서는 복잡한 호환성 문제가 발생할 수 있음. 만약 CPython의 JIT가 더 신뢰성 있거나 빠른 시작 시간을 가진다면, 일부 문제를 해결할 수 있을 것임.
     * Python의 GitHub 리포지토리에 '크리스마스 전날 밤'을 패러디한 PR 메시지가 재치 있음.
"
"https://news.hada.io/topic?id=12815","구글, 엔지니어링 및 기타 부서에서 직원 감축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글, 엔지니어링 및 기타 부서에서 직원 감축

Google, 엔지니어링 및 기타 부서에서 수백 명의 직원 해고

     * 구글이 비용 절감을 위해 여러 부서에서 수백 명의 직원을 해고함.
     * 해고된 직원들은 핵심 엔지니어링 부서, Google Assistant 제품 팀, Pixel 폰과 같은 하드웨어 부서에 속해 있었음.
     * 이번 조치는 인공지능에 집중하고자 하는 구글의 전략과 다른 기술 기업들의 일자리 축소 추세에 동참하는 것으로 보임.

핵심 엔지니어링 조직에서 수백 명 해고

     * 구글의 핵심 엔지니어링 조직에서 수백 명의 직원이 회사 접근 권한을 잃고 해고 통지를 받음.
     * 대부분의 하드웨어 부서 해고는 증강 현실 기술을 작업하는 팀에 영향을 미침.
     * 증강 현실 기술은 실제 세계와 디지털 오버레이를 결합한 기술임.

   GN⁺의 의견:
     * 이 기사는 구글이 인공지능에 더욱 집중하기 위해 비용 절감 조치의 일환으로 여러 부서에서 직원을 대규모로 해고한 사건을 다루고 있음.
     * 특히, 구글의 핵심 엔지니어링 팀과 증강 현실 기술에 종사하는 직원들의 해고는 기술 산업 내에서 일어나는 변화와 구글의 전략적 방향성에 대한 통찰을 제공함.
     * 이러한 변화는 기술 산업에서의 일자리 안정성과 미래 기술 트렌드에 대한 예측에 대한 중요한 사례로, 업계 전문가뿐만 아니라 일반 대중에게도 흥미로운 주제가 될 수 있음.

        Hacker News 의견

     * 구글에 대한 실망감
          + 구글이 기술을 발전시키고 대중화하는 멋진 회사였으나, 이제는 광고와 어두운 패턴으로 가득 찬 윤리적으로 문제 있는 기업이 되었음.
          + 단기 이익에 치중하는 회사의 변질이 불가피한지, 회사 '헌법'으로 이를 방지할 수 있는지 의문을 제기함.
          + 창업자가 물러나면 MBA들이 이익을 최대화하는 최악의 방법을 채택하는 경향이 있음.
     * 경제 위기와 구글
          + 많은 기업들이 사람들을 해고하면서 경제 침체를 자초하는 것 같음.
          + 구글은 거의 2조 달러 규모의 회사이며, 대형 구글 주주들이 보유한 부는 엄청남.
          + 미국은 자본 이득세를 인상하는 것을 고려해야 할 수도 있음.
     * 픽셀 폰과 구글의 해고
          + 구글이 픽셀 폰 팀의 직원들을 해고한 것은 이상하게 보임.
          + 픽셀 폰은 최근 몇 년 동안 빠르게 성장했고 큰 성공으로 보임.
     * 구글 클라우드 플랫폼(GCP)의 미래
          + GCP가 '중요하거나' '수익성 있게' 되어야 한다는 오래된 소문을 기억함.
          + GCP가 그 '무언가'에 도달했는지 궁금함.
     * 구글 내부의 변화
          + 구글 Core Eng에서 일하는 사람으로, 20년 동안 근무한 사랑받던 이사가 해고된 것을 목격함.
          + 리더십 체인이 거의 인도인으로 구성되어 있고, 주요 제품을 인도, 주로 방갈로르로 아웃소싱하기 시작했다는 점이 우려됨.
     * 직장에 대한 충성도
          + 아버지가 Swift & Co.에서 45년간 일했음에도 불구하고, 직장을 옮길 때 '그들이 당신에게 충성하지 않는다면 당신이 왜 그들에게 충성해야 하느냐'며 박수를 보냄.
          + 중요한 것은 자신이 하는 일이 '다른 누군가에게' 어떤 가치가 있는지 항상 생각하는 것임.
          + 자신만을 위한 기술을 추구하면 반발을 무시해야 함.
     * 정규직으로 일하는 것에 대한 혐오
          + 대학 졸업 후 몇 년 동안 일한 후, 10년 이상 컨설팅 사업을 구축함.
          + 여러 클라이언트를 동시에 유지하며, 계약이 갱신되지 않아도 크게 타격을 받지 않음.
     * 해고의 긍정적인 측면
          + 재능 있고 과소평가된 엔지니어들이나 정책의 희생양이 된 이들이 새롭고 흥미로운 회사를 창업할 기회가 될 수 있음.
"
"https://news.hada.io/topic?id=12819","아웃룩이 마이크로소프트의 새로운 데이터 수집 서비스가 되어버렸다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  아웃룩이 마이크로소프트의 새로운 데이터 수집 서비스가 되어버렸다

Microsoft, Outlook을 통한 데이터 수집 서비스로 변모

     * Microsoft가 새로운 Outlook for Windows를 출시하면서 이메일 앱을 타깃 광고를 위한 감시 도구로 변모시킴.
     * Google과 Apple의 개인정보 수집 캠페인이 주목받는 가운데, Outlook이 이제 단순한 이메일 서비스가 아닌 Microsoft의 772개 외부 파트너와 자체 광고 전달 시스템을 위한 데이터 수집 메커니즘으로 변화함.

Microsoft가 772개 제3자와 데이터를 공유

     * 새로운 Outlook for Windows를 다운로드하는 일부 유럽 사용자들은 Microsoft와 772개 제3자가 사용자의 데이터를 처리하는 방법에 대한 공개를 포함한 모달 창을 마주하게 됨.
     * 이 창은 사용자의 기기에 정보를 저장/접근하고, 제품을 개발/개선하며, 광고와 콘텐츠를 개인화하고, 광고와 콘텐츠 측정, 청중 통찰력을 도출하고, 정확한 지리적 위치 데이터를 얻으며, 기기 스캐닝을 통해 사용자를 식별하는 데 데이터를 사용함을 알림.

Microsoft의 ""광고 파트너""

     * EU의 일반 데이터 보호 규정 덕분에 유럽인들은 자신의 데이터를 볼 수 있는 제3자의 수를 알 수 있으나, 미국인들은 이러한 사실조차 알려지지 않음.
     * 영국 사용자는 설정에서 ""광고 파트너 목록""을 탐색할 수 있으며, Microsoft와 협력하는 광고 회사의 수가 많음을 확인할 수 있음.
     * 새로운 Outlook은 사용자의 데이터 사용 방식을 어느 정도 선택할 수 있게 하지만, 단순한 토글 한 번으로 설정되는 것은 아님.

새로운 Outlook이 이메일 비밀번호를 훔침

     * Outlook을 클라우드 서비스와 통합함으로써 개인정보 보호에 대한 우려가 커짐.
     * 새로운 Outlook과 Yahoo나 Gmail과 같은 제3자 이메일 계정을 동기화할 때, Microsoft가 IMAP 및 SMTP 자격 증명, 이메일, 연락처, 이벤트에 접근할 수 있게 됨.
     * Microsoft는 사용자의 이메일 계정에 언제든지 접근할 수 있게 하여 이메일을 스캔하고 분석하며 제3자와 공유할 수 있는 권한을 부여함.

Microsoft가 수집하는 데이터 유형

     * Microsoft의 광고 정책에 따르면, 이메일, 채팅, 문서에서 개인 데이터를 사용하여 광고를 타겟팅하지 않음.
     * 그러나 사용자에 대한 통찰력을 제공하는 다른 데이터를 기반으로 광고가 선택될 수 있음.
     * Microsoft의 개인정보 보호 정책은 수집할 수 있는 개인 데이터의 종류와 데이터가 어디로 갈 수 있는지를 보여줌.

Microsoft, 데이터 달러를 향해 나아감

     * Google이 데이터 수집 권한을 확대하는 개인정보 보호 정책을 발표했을 때 비판을 받았으나, Microsoft도 개인 정보를 이용한 타겟 광고 판매를 허용하는 개인정보 보호 정책을 발표함.
     * Microsoft는 광고 수익을 위한 감시 수익으로 방향을 전환하며, Google, Facebook, Apple과 같은 기업들의 발자취를 따름.
     * Satya Nadella CEO 취임 이후 데이터 중심 마인드셋이 강화되었으며, Windows 10 출시와 Xandr 인수 등이 이 방향성을 강조함.

이익을 위한 감시

     * Microsoft는 데이터 수집이 ""풍부하고 상호작용적인 경험을 제공하기 위함""이라고 주장하지만, Big Tech 영역에서 광고와 광고 수익은 그 자체로 목적이 되어 개인 데이터의 감시를 정당화하는 비즈니스 모델이 됨.
     * 새로운 Outlook의 출시로 데이터 수집과 광고 전달 서비스로서의 역할을 드러냄.

진정한 프라이버시로 전환

     * Proton은 이메일, 캘린더, 클라우드에 저장된 파일, 로그인 자격 증명, 인터넷 연결을 보호하기 위해 종단 간 암호화를 사용함.
     * Proton의 보안 아키텍처는 사용자의 데이터를 회사조차 볼 수 없게 설계되어 있으며, 비즈니스 모델은 사용자에게 더 많은 프라이버시를 제공함.
     * Proton은 프라이버시, 보안, 온라인 자유에 대한 접근을 확대하기 위해 무료 및 오픈 소스 기술을 제공하며, 유료 플랜으로 업그레이드하여 추가 기능에 접근할 수 있음.

GN⁺의 의견:

    1. Microsoft의 새로운 Outlook이 단순한 이메일 서비스를 넘어서 광고와 데이터 수집을 위한 플랫폼으로 변모한 것은 사용자의 개인정보 보호에 대한 중요한 우려를 제기함.
    2. 사용자 데이터의 수집과 처리가 대규모 기술 기업의 수익 창출 방식으로 점점 더 중요해지고 있으며, 이는 사용자의 프라이버시 권리와 직접적으로 충돌할 수 있음.
    3. Proton과 같은 서비스가 제공하는 종단 간 암호화와 데이터 보호 중심의 비즈니스 모델은 사용자들에게 데이터를 통제하고 프라이버시를 유지할 수 있는 대안을 제공함. 이는 프라이버시를 중시하는 사용자들에게 매력적인 옵션이 될 수 있음.

   예전부터 Thunderbird 사용중인데 저는 잘 사용 중이지만 솔직히 누구에게나 추천할 수 있는 품질의 프로그램은 아닌 것 같아요.
   UI 바뀐 이후로 사라진 기능도 많고 애초에 없었던 기능도 많고..

   이메일 내용 번역 기능 없는 것도 크고요. 확장이 있긴 한데 조잡해요.
   알림 설정도 너무 간략화돼서 Inbox 알림만 받게 설정할 수 조차 없어요.모든 설정을 직접 작성해서 적용 할 수 있는 확장 기능을 설치하던가 해야 하는데 모두가 그렇게 복잡한 걸 원하는 것도 아니고요.

   그래도 이메일+CardDAV+CalDAV 동시에 열람할 수 있고, 개인 정보 보호에 신경쓰는 몇 안되는 클라이언트 중 가장 나은 것 같네요.

   저는 최근에 개인 이메일 클라이언트로 Thunderbird 를 사용하다가 속도 지연 등의 이유로 Outlook 으로 넘어왔습니다.
   더 나은 대체재가 있을런지 모르겠습니다.
   웹 기반 클라이언트로 가는 것이 나으려나요.

   이거 보고 아웃룩에서 다른 이메일 계정을 제거했습니다.
   오랜 친구인 천둥새나 계속 써야겠어요.

   새벽엔 잠깐 마이크로소프트가 애플을 넘어서 시가 총액 1위에 도달하기도 했는데,..

        Hacker News 의견

     * 마이크로소프트의 아웃룩 데이터 수집이 다양한 산업의 많은 회사들, 심지어 경쟁사들의 내부 운영에 대해 얼마나 많은 통찰력을 제공할 수 있는지 생각하면 놀랍다. 마이크로소프트가 이 데이터를 자신들의 이익을 위해 사용하려 하지 않을 리 없지만, 회사는 여전히 혼란스럽다. 많은 회사들이 마이크로소프트에 데이터를 맹목적으로 신뢰하고 직원들로 하여금 개인 데이터까지 넘기도록 강요한다. 필자는 회사가 마이크로소프트에 너무 많은 데이터를 유출하지 않도록 밀어붙였지만, 회사가 데이터가 어떻게 사용되고 남용되는지 직접 경험하지 않고 법적 처벌을 받지 않는 한 큰 변화는 의심스럽다.
     * 아웃룩 클라이언트의 소비자 버전에서 의심스러운 데이터 사용이 있을 수 있지만, 이를 모든 엔터프라이즈 버전의 Office 365 유료 플랜에 적용하는 것은 조심해야 한다. 프로톤메일은 이러한 상황을 자사 서비스에 대한 수요를 창출하기 위해 사용하고 있다. 이것이 그들이 틀렸다는 의미는 아니지만, 그들의 동기와 그들이 이야기를 전개하는 방식을 이해해야 한다.
     * 아웃룩을 단순히 이메일로만 사용하고 다른 서비스와 연동하지 않는 사용자들에게는 Claws Mail을 살펴볼 것을 강력히 권한다. Claws Mail은 아웃룩에 비해 매우 빠르며 안정적이고 신뢰할 수 있다. 또한 윈도우에서도 사용할 수 있다. 아웃룩의 .pst 파일(메일과 연락처 모두)은 libpst 유틸리티의 일부인 readpst 도구를 사용하여 Mbox나 기타 표준 형식으로 쉽게 변환한 후 Claws Mail로 가져올 수 있다.
     * 이 글은 매우 충격적이다. 애플 생태계에 있는 사용자라면, 애플 메일과 iCloud 메일(표준 기반, 사용자 정의 도메인 지원)은 사용해본 어떤 메일 제공업체나 클라이언트만큼이나 신뢰할 수 있다.
     * 20년 이상 아웃룩을 사용한 후 최근에 Thunderbird로 전환했다. 아웃룩만큼 기능이 풍부하지는 않고 때때로 느릴 수 있지만, 이제 아웃룩을 대체할 만한 유망한 선택지가 되었다.
     * 다음과 같은 사업 모델이 매력적이다. 1) 기업 고객의 이메일에 AI 모델을 훈련시킨다. 2) 상업적으로 흥미로운 것들에 대해 AI에게 질문한다. 3) 돈을 번다. GPL 코드로 훈련된 모델이 훈련 데이터와는 전혀 다르지만 바이트 단위로 동일한 코드를 작성하는 것처럼, 해당 모델은 훈련 데이터 세트의 상업적으로 민감한 정보와 우연히 일치하는 흥미로운 이메일을 생성할 것이다. 마이크로소프트는 이미 이를 위한 모든 것을 갖추고 있지만, 물론 그들은 이런 비윤리적인 행위를 하지 않을 것이므로 계속해서 모든 기업 이메일을 그들에게 제공하는 것이 안전하다.
     * 필자는 부업으로 기술 지원을 하고 있는데, 이메일에 대해 돈을 지불하려는 사람은 아무도 없다. 그래서 우리는 이 지경에 이르렀다.
     * 이 문제는 무료 계정, 즉 M365 Personal이나 Family를 가진 계정에만 적용된다. 광고 섹션이 없다.
     * 누군가 Tiny11을 시도해 본 적이 있는지 궁금하다. 보안 문제가 있을 수 있지만, 경험에 대해 듣고 싶다. 마지막으로 맬웨어/스파이웨어(예: 텔레메트리)를 제거하려고 했을 때 시간이 많이 걸렸다.
     * 이 문제는 유료 기업용 Office 365 구독에는 적용되지 않는다. 필자의 업무용 아웃룩에는 설정에서 '광고 선호도' 항목조차 없다.
"
"https://news.hada.io/topic?id=12857","R1 - 자체 파운데이션 모델이 내장된 손바닥 크기의 디바이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   R1 - 자체 파운데이션 모델이 내장된 손바닥 크기의 디바이스

   Rabbit이라는 회사에서 디바이스를 출시했습니다. 샘플러로 유명한 Teenage Engineering와 협업해서 그런지, 디자인이 독특하면서도 심플합니다.

   디바이스 이름은 R1이고, Rabbit OS로 구동됩니다.
     * Rabbit OS의 코어엔 Large Action Model이라는 파운데이션 모델이 들어있습니다. 키노트 영상과 홈페이지의 설명을 보면, ChatGPT의 플러그인처럼 실제 액션(e.g., 항공권 예약)까지 수행하는 것 같습니다.

   키노트 영상에서 음성으로 명령하는 몇가지 데모를 보여줍니다.
     * 간단한 질문
     * 스포티파이로 노래 재생 및 해당 곡과 관련하여 몇 가지 질문
     * 차량 조건 걸고 우버 호출
     * 피자헛으로 피자 주문
     * 한 번에 비행기 예약, 차 렌탈, 호텔 예약
     * 여행 구성원과 여행지를 통해 일정 추천 및 제약조건 추가해서 다시 추천
     * 밈 사진 해석 (해당 밈 관련 노래 재생함)
     * 냉장고 내부 이미지로 레시피 추천
     * 엑셀 데이터 이미지로 추가 컬럼 생성
     * 미드저니 결과물 기반으로 배리에이션 이미지 생성

   가격은 199달러, 일시불입니다.

   월 구독료 없이 클라우드 서버에서 대형 AI 모델을 실행하기는 어려울 텐데...
   아무튼 확실히 이쁘긴 합니다. 토끼도 귀엽고요.

   ollama처럼 내장했을것 같습니다

   PTT방식을 쓰니 PTT 마이크를 따로 연결할 수 있다면 좋았을거 같은데 아쉽네 다음버전이 기대됩니다

   다른 커뮤니티에 올라와서 봤는데.. 다들 비슷한 의견이고 저도 동의 하는 부분이 스마트폰의 앱으로 출시 될만한게 기계로 나왔다는 부분에 동의 합니다. 그리고 음성으로 처리하는게 과연 사람이 많은 시끄러운 대중교통 환경에서 동작이 가능할지도 의문이고.. 스마트폰 앱으로 나온다면 좋을거같네요

   과연 스마트폰의 장벽을 넘을수 있을까 모르겠네요. 사람들이 보통 2개의 장비를 잘 안가지고 다니게 될듯 해서..
   어쨋거나 틴에지니 엔지니어링의 디자인은 요즘 스타일중 가장 돋보이는 듯

   스마트폰 보안에 민감한 업체 고객일 경우 회사가 자율적으로 통제된 환경을 제공할 수 있다면 매우 유용할 것 같다는게 제 생각입니다. 일반 소비자보단 기업 고객에 좀 더 어필이 필요할 것 같더군요.

   그런데 그정도로 스마트폰 보안에 민감한 회사는 차라리 MDM을 통해 통제되는 스마트폰을 허용하지 저런 제 3의 디바이스를 회사 안에서 허용하지 않겠죠....

   가격을 통해 짐작해보건대, 혁신적인 기술이 들어갔다기보단 현존하는 여러 툴과 플러그인을 들고다닐 수 있는 기계안에 잘 통합했다는 의의가 적절해보입니다.

   제품 후기 영상들이 올라오는 날이 기다려지네요.
"
"https://news.hada.io/topic?id=12792","컴퓨터 과학에 관한 게임 'Turing Complete'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    컴퓨터 과학에 관한 게임 'Turing Complete'

튜링 컴플리트 게임 소개

     * 튜링 컴플리트는 컴퓨터 과학에 관한 게임임.
     * 문제를 해결하는 스릴을 즐기고, 이해하고 있다고 생각했던 것에 대해 더 깊은 통찰이 드러나는 순간을 좋아하는 사람들을 위한 게임임.
     * 플레이어는 튜링 컴플리트 게임을 통해 컴퓨터 과학의 여러 측면을 배우고 체험할 수 있음.

배울 수 있는 내용

     * 논리 게이트: 논리 게이트는 계산의 기본 구성 요소임. NAND 게이트만으로 다른 모든 게이트를 만들 수 있음.
     * 구성 요소: 논리 게이트를 기반으로 메모리를 도입하여 더 복잡한 구조를 만들 수 있음.
     * 아키텍처: 구성 요소를 조립하여 실제 컴퓨터를 만들 수 있음. 튜링 완전한 컴퓨터는 튜링 기계와 동일한 알고리즘을 계산할 수 있는 컴퓨터를 의미함.
     * 어셈블리: 컴퓨터는 이진 코드로 프로그래밍됨. 어셈블리 명령어를 생성하여 이를 단순화하고 자신의 하드웨어에서 프로그래밍 퍼즐을 해결할 수 있음.

GN⁺의 의견

     * 튜링 컴플리트 게임은 컴퓨터 과학에 대한 깊은 이해를 제공하는 동시에 교육적인 엔터테인먼트를 추구하는 사람들에게 매력적임.
     * 게임을 통해 논리 게이트부터 시작하여 실제 컴퓨터 아키텍처와 어셈블리 언어에 이르기까지 컴퓨터 과학의 기본적인 개념을 실습할 수 있는 기회를 제공함.
     * 이 게임은 특히 프로그래밍과 하드웨어에 관심이 있는 초급 소프트웨어 엔지니어들에게 실질적인 학습 도구로서의 가치가 있으며, 복잡한 개념을 재미있고 상호작용적인 방식으로 탐구할 수 있게 함.

        Hacker News 의견

     * 해커뉴스 댓글 요약:
          + Turing Complete 게임에 대한 호평
               o 자신과 14세 아들이 게임을 즐겼으며, 아들이 게임 내에서 컴퓨터를 만들고 미로를 탐색하는 프로그램을 작성함.
               o 메모리 레벨에서 어려움을 겪었지만, 온라인에 힌트와 솔루션이 있어서 다음 레벨로 넘어갈 수 있음.
               o 게임 개발자가 성능 개선과 더 복잡한 CPU 구축을 위해 게임을 전면 재구축 중임.
               o 이 장르의 게임을 좋아하며, 다양한 게임을 추천함.
               o Turing Complete는 신뢰할 수 있는 시뮬레이션과 잘 구성된 미션을 제공하지만, UI는 다소 부드럽지 않고, 초보자에게는 설명이 부족함.
               o 다른 게임들에 비해 설명과 문제 해결이 더 잘 되어 있음을 언급함.
               o 개발자가 큰 업데이트를 예고했지만, 이후 소식이 없어 업데이트가 지연되고 있음을 지적함.
          + Steam 겨울 세일에서 게임 구매
               o 게임은 멋진 개념이지만, 더 많은 연마가 필요함.
               o 지식이 있는 사람에게는 괜찮지만, 초보자에게는 주로 답답한 경험이 될 수 있음.
               o 회로를 배치하는 데 도움이 되는 기능이 필요함.
          + 게임을 즐기며 컴퓨터 과학 학위를 추구하기로 결정
               o 게임은 큰 용량으로 가장 잘 즐길 수 있으며, 오랜 시간 후에 돌아오면 처음부터 시작하는 것이 더 재미있음.
               o UI는 다듬어질 필요가 있고, 성능 개선을 위한 작업이 진행 중임.
               o 게임 후반부에 잠금 해제되는 추가 구성 요소가 샌드박스 모드를 재미있게 만듦.
          + 직장에서 게임을 활용한 경험 공유
               o 동료와 함께 게임을 즐겼으며, 전기 공학 수습생들에게 디지털 논리의 작동을 이해하는 데 도움이 됨.
               o 게임은 간단한 어셈블리 언어 작성과 퍼즐 해결까지 가능함.
          + 다른 디지털 논리 시뮬레이션 게임과 비교
               o 처음에는 다른 게임의 모방으로 생각했지만, 실제로는 더 깊은 내용을 제공함.
               o 게임을 구매하고 향후 시간을 내어 즐길 계획임.
          + 게임이 컴퓨터 공학 기초 과정과 비교됨
               o 대학에서 별도로 CPU 지시사항과 회로 설계 과제를 수행했지만, 완전하고 기능적인 설계는 아니었음.
               o 게임은 자체 ISA를 만들면서 완전한 미니 CPU를 구축하고, 원하는 만큼 발전시킬 수 있음.
          + 유사한 게임 추천
               o Turing Complete가 nand game보다 더 깊이 있는 것으로 보임.
          + 게임에 대한 다른 의견
               o HN 독자들에게는 게임보다 RISC-V를 Verilog로 구축하는 것이 더 적합할 수 있음.
               o 게임이 훌륭하다고 생각하며, 과거에 즐겼던 ""Core War"" 게임에 대해 비슷한 것을 만들었으면 좋겠다는 의견을 표함.
"
"https://news.hada.io/topic?id=12799","Gmail과 Yahoo의 2024년 인박스 보호 기능이 당신의 이메일 프로그램에 미치는 의미","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Gmail과 Yahoo의 2024년 인박스 보호 기능이 당신의 이메일 프로그램에 미치는 의미

     * Gmail과 Yahoo가 2024년 사용자의 수신함 경험을 개선하고 대량 메일 발송자에게 큰 영향을 미칠 새로운 업데이트를 발표
          + 발송자들이 인증을 강화하도록 요구하는 새로운 메일박스 표준을 제시

2024년 Gmail과 Yahoo가 발표한 것은 무엇인가?

     * Gmail과 Yahoo는 대량 이메일 발송자를 위한 새로운 보호 표준을 시행할 것이라고 발표
     * Gmail은 2023년 5월에 비활성 계정 정리를 발표한 바 있으며, 2024년 2월부터 하루에 5000개 이상의 메시지를 전송하는 발송자를 면밀히 모니터링할 것이라고 밝힘
     * Yahoo 역시 2024년 첫 분기를 목표로 비슷한 발표를 함

발송자에게 이러한 변경사항이 의미하는 것은?

     * 발송자들은 이메일 인증, 쉬운 구독 해지, 스팸률 모니터링 등의 이메일 전달성 최선의 관행을 심각하게 고려해야 함
     * 이러한 요구사항은 하루에 Gmail 주소로 5000개 이상의 메시지를 보내는 대량 발송자에게만 영향을 미침

준비를 위해 무엇을 해야 하는가?

     * 이메일 인증: SPF, DKIM, DMARC를 설정하여 발송자 신원을 확인
     * 간편한 구독 취소 활성화: 수신자가 쉽게 구독을 취소할 수 있도록 발신자는 이메일 내에 한 번의 클릭으로 구독 취소 링크를 구현
     * 사용자가 원하는 이메일만 보내기: Gmail과 Yahoo는 스팸 모니터링에 대해 심각하게 생각하고 있으며 발신자는 설정된 스팸 비율 임계값 미만으로 유지되도록 해야 함

GN⁺의 의견

     * 이 기사는 이메일 마케팅을 하는 기업이나 개인에게 매우 중요한 정보를 제공함. Gmail과 Yahoo의 새로운 정책은 이메일 발송자들이 보다 나은 인증 절차를 따르고, 사용자 경험을 개선하기 위한 조치
     * 이메일 전달성을 유지하고 개선하기 위한 구체적인 조치들, 예를 들어 이메일 인증 강화, 구독 해지 절차 간소화, 스팸률 모니터링 등은 이메일 마케팅의 효율성을 높이는 데 기여함
     * Sinch Mailgun과 같은 서비스는 이러한 변화에 대응하고 이메일 전달성을 최적화하는 데 필요한 도구와 지원을 제공함으로써, 이메일 마케팅을 하는 사람들에게 매우 유용함

        Hacker News 의견

     * 트랜잭션 이메일, 2FA, 비밀번호 재설정과의 상호작용에 대한 질문
          + 5000명이 한 달에 2FA 코드를 요청하면, 그들에게도 수신 거부 헤더를 제공해야 하는지에 대한 의문.
          + 수신 거부 헤더를 제공하지 않으면 이메일이 차단되어 로그인이 불가능한 상황 발생 가능성.
          + 수신 거부 헤더를 제공할 경우, 사용자가 '수신 거부' 버튼을 클릭하면 어떤 행동을 기대하는지에 대한 물음.
               o 이메일이 미래의 작업 수행에 필요하므로 수신 거부할 수 없다고 알림.
               o 계정을 삭제하는 것이 적절한지, 특히 은행 계정과 같은 중요한 계정일 경우.
          + 구글로부터의 명확한 지침 요구.
     * 자가 호스팅 경험 공유
          + 10년 이상 자가 호스팅을 해온 사용자의 경험.
          + SPF, DKIM, DMARC 설정은 한 번만 하면 되고 무료이므로 단점이 없음.
          + 대부분의 자가 호스팅 사용자들이 이미 이러한 설정을 완료했을 것이라는 추측.
     * DKIM, SPF, DMARC에 대한 의견
          + 이 기술들은 오래되었고, 심각하게 운영하는 사람들은 이미 몇 년 전에 구현함.
          + 기사에서 강조된 것은 RFC 8058에 따른 원클릭 수신 거부 지원 필요성.
          + 아직 많은 이메일에서 이 기능을 보지 못함.
     * 구글의 정책에 대한 해석
          + 구글이 정의한 대량 발송자에게만 영향을 미치는 정책.
          + 하루에 Gmail 주소로 5000개 이상의 메시지를 보내는 발송자에게 해당되는 요구사항이 아님.
     * Gmail을 통한 스팸에 대한 불만
          + Gmail을 통해 많은 스팸을 받고 있으며, 이를 쉽게 신고할 방법이 없음.
          + 구글이 스팸 문제에 더 관심을 가지고 자신들에게도 같은 규칙을 적용하기를 바람.
     * 이메일 전송성에 대한 실무적 접근
          + 전송성에 신경 쓰는 사람들은 이미 이러한 조치를 시행함.
          + 대형 이메일 서비스의 스팸 차단 조치가 불투명하기 때문에 모든 가능한 방법을 시도함.
          + 설정이 그리 어렵지 않음.
     * 스팸 한도에 대한 기대
          + 스팸 한도가 충분히 낮아서 회사들이 더 이상 ""뉴스레터 13 구독 해지를 축하합니다(그러나 1-12 및 14-39는 계속 받게 됩니다)""와 같은 일을 중단하게 만들기를 희망.
     * 제목에 대한 추가 정보
          + 하루에 5000개 이상의 이메일을 보내는 경우에 해당됨을 명시.
          + Posthaven은 이와 관련된 설정을 돕는 유용한 무료 도구를 제공함.
          + GPT는 필요한 DNS 레코드에 대한 좋은 이해를 가지고 있음.
     * 설정 및 테스트 자원에 대한 질문
          + 이러한 설정과 테스트를 위한 최고의 자원에 대한 질문.
     * Gmail과 Yahoo의 스팸 모니터링 정책에 대한 질문
          + Gmail과 Yahoo가 스팸 모니터링에 진지해지고 있으며, 발송자들이 설정된 스팸 비율 한도를 유지해야 한다는 내용에 대한 질문.
          + 이 문장이 사용자가 '이것은 스팸이다'라고 말하는 것인지, 아니면 Gmail 스팸 필터가 10%의 오류율을 가지고 있는데, 그 10%에 포함되지 않도록 주의해야 한다는 것인지에 대한 해석 요청.
"
"https://news.hada.io/topic?id=12752","2023 JavaScript Rising Stars","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2023 JavaScript Rising Stars

   작년 한 해 동안 가장 많은 GitHub Star를 받은 자바스크립트 프로젝트 순위입니다.

   전체 프로젝트 부문
   1위. shadcn/ui
   2위. Bun
   3위. Excalidraw
   4위. tldraw
   5위. Next.js
   6위. Supabase
   7위. React
   8위. Tauri
   9위. Drizzle ORM
   10위. htmx

   원문 링크에 각 부문별 전체 순위와 상세 정보가 나와 있으며,

   아래 링크는 제 개인적인 관점을 조금 덧붙여서 요약 및 정리해본 글입니다.

   https://frontoverflow.com/magazine/3/…

   와 shadcn/ui는 tailwind를 래핑했나보군요

   라이브러리부터 런타임까지 정말 다양하네요.

   번역 참여도 가능하군요.

   관심가는것들이 많이있네요. 감사합니다

   공유하신 저 정리 포스팅이 참 좋네요.
   감사합니다.
"
"https://news.hada.io/topic?id=12825","Dillo - 빠르고 멀티플랫폼 지원하는 그래픽 웹 브라우저","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Dillo - 빠르고 멀티플랫폼 지원하는 그래픽 웹 브라우저

     * 리눅스, 맥, BSD 및 Atari
     * C/C++ 로 작성되었으며 의존성 작음
     * 자체 실시간 렌더링 엔진 구현
     * 큰 페이지에 대해서도 적은 메모리 사용 및 빠른 렌더링 구현
     * 빠르고 크기가 적은 FLTK(Fast Light Toolkit) GUI 라이브러리 사용
     * HTTP, HTTPS, FTP 및 로컬 파일 지원
     * 다양한 언어로 작성가능한 플러그인을 통해 확장 가능
     * GPLv3 라이센스
"
"https://news.hada.io/topic?id=12757","HN 소개: 브라우저에서 100% 구현한 HTMX Playground","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN 소개: 브라우저에서 100% 구현한 HTMX Playground

HTMX Playground

     * HTMX Playground는 HTMX를 사용하여 간단한 코드 샌드박스 환경에서 놀아볼 수 있는 도구임.
     * 별도의 설정 없이 바로 사용 가능하며, 원래 htmx.org 예제에서 가져온 예시들을 확인할 수 있음.
     * 브라우저 내에서 백엔드와 유사한 환경에서 코드를 작성할 수 있으며, server.js 내에서 엔드포인트를 정의하고 자체 템플릿을 렌더링할 수 있음.
     * HTMX에서 나가는 요청을 가로채는 모의 서버를 실행하며, Django를 사용하는 사람들에게 친숙한 요청 처리 및 템플릿 엔진을 제공함.
     * 이 프로젝트는 HTMX에만 국한되지 않으므로, 다른 라이브러리들도 자유롭게 시도해볼 수 있음.

저장 및 공유

     * 오른쪽 상단의 ""Copy as JSON"" 버튼을 눌러 JSON 형식으로 복사할 수 있음.
     * 복사한 내용을 Gist에 업로드하고 ""Load Playground""에 raw URL을 입력하면 해당 페이지의 URL이 업데이트되어 공유할 수 있음.
     * 코드는 GitHub에서도 사용 가능함.

주의사항

     * 페이지 내비게이션 기능이 없음.
     * 모바일 지원이 제한적임.
     * server.js는 상태를 가질 수 있지만, on.get(""/"") 뷰에서 상태를 업데이트하면 초기 페이지 로드 시 별도의 iframe을 통해 검색되기 때문에 상태 업데이트가 손실될 수 있음.

사용된 라이브러리

     * Svelte
     * Ace (코드 에디터)
     * PollyJS (모의 서버)
     * Nunjucks (템플릿 엔진)

   GN⁺의 의견
     * HTMX Playground는 웹 개발자들에게 HTMX를 사용하여 인터랙티브 웹 애플리케이션을 빠르게 프로토타이핑할 수 있는 유용한 도구임.
     * Django와 같은 백엔드 프레임워크에 익숙한 개발자들이 쉽게 접근할 수 있는 환경을 제공함으로써, 프론트엔드와 백엔드 개발 경험을 통합하는 데 도움을 줌.
     * 이 도구는 코드를 쉽게 저장하고 공유할 수 있는 기능을 제공하여, 협업이나 교육 목적으로도 매우 유용할 수 있음.

        Hacker News 의견

     * htmx 창작자로부터의 감사 인사
          + htmx 창작자: htmx를 만든 창작자로부터 감사의 말이 전해짐. 자신의 프로젝트에 대한 관심과 사용에 대해 매우 고무적임을 표현.
     * htmx 사용에 대한 우려와 질문
          + 개발자 풀 우려: 한 사용자가 htmx를 사용하는 것을 고려했으나, 개발자 풀이 작아 개발자 채용에 어려움을 느낌. 전용 프레임워크에 익숙하고, 전문적인 프론트엔드 개발자를 채용하는 것이 전문적인 풀스택 개발자를 찾는 것보다 쉬웠던 경험을 공유. 복잡한 코드를 다루는 것을 개발자들이 꺼려하고 백엔드 개발자가 병목 지점이 되는 것을 원치 않음. htmx가 이러한 문제를 인식하고 있는지, 그리고 이를 어떻게 해결하려고 하는지 질문.
     * htmx와 모바일 앱 지원에 대한 고민
          + 모바일 앱 지원: htmx의 개념을 좋아하고 관련 책을 읽기 시작했지만, 모바일 앱 지원이 필요할 때 프론트엔드와 백엔드를 대대적으로 재작성해야 한다는 점을 상기하고 고민. hyperview.org에 대해 알고 있으나, 관심 있는 사용 사례에는 react-native 앱이 적합하지 않음을 언급.
     * 에디터 선택과 오류 출력에 대한 의견
          + 에디터 및 오류 출력: 한 사용자가 모바일 지원이 제한적이라고 지적하며, Ace Editor 대신 Monaco Editor를 사용해야 한다고 주장. 그러나 Monaco가 모바일에서 의도적으로 작동하지 않아 Ace를 사용한다고 설명. GitHub 이슈 링크를 통해 이를 뒷받침.
     * htmx와 Django를 함께 사용한 경험 공유
          + htmx와 Django 사용: 사용자가 maplibre, Django, htmx를 함께 사용하고 있으며, 다른 사람들과 공유하기 위해 예제를 올릴 계획을 밝힘.
     * htmx 사용 경험과 피드백
          + htmx 사용 및 피드백: htmx를 업무에 사용했으며 잘 작동한다고 평가. 앞으로도 사용할 계획이지만, PHP 기반 버전을 만들 수도 있음. JSON을 URL 로드 필드에 붙여넣을 때 작업이 몇 번 손실되었고, 네트워크 요청 브라우저를 정리할 수 없는 문제(기능 요청)에 대한 경험을 공유.
     * 기술 지원에 대한 질문
          + ActiveX 지원 여부: 한 사용자가 htmx가 ActiveX를 지원하는지에 대해 질문.
     * 개발 도구 선택에 대한 풍자적인 댓글
          + Svelte 사용: htmx가 Svelte로 만들어졌는지 묻는 사용자. MPA(Multi-Page Application) 순수주의자들이 어디 있는지, 그들의 반응이 궁금하다는 풍자적인 댓글.
     * 오프라인 앱 개발에 대한 호기심
          + 오프라인 앱 개발: htmx와 HTML을 사용한 요청-응답을 통해 오프라인 앱을 만들고, 서비스 워커 내에 가상 서버를 정의하는 사람이 있는지 궁금해하는 사용자.
     * 웹사이트 설명의 오타 지적
          + 오타 지적: 웹사이트 메인 페이지의 설명에 오타가 있다고 지적하는 사용자. ""intersepts""를 ""intercepts""로 바로잡아야 한다고 언급.
"
"https://news.hada.io/topic?id=12786","How to center elements in CSS without adding a wrapper in HTML","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     How to center elements in CSS without adding a wrapper in HTML

   Ever wondered how to center elements in CSS without the hassle of extra wrappers? Two lines of CSS are all you need! Explore use cases, learn when to apply these techniques, and get familiar with auto box sizes.

   어느순간 CCS로 중심 맞추기가 밈이 된것 같아요

   그만큼 자주 쓰이긴 하는데
"
"https://news.hada.io/topic?id=12854"," AI 쓰레기로 가득찬 인터넷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 쓰레기로 가득찬 인터넷

   https://news.ycombinator.com/item?id=38952526

   dead internet theory 가 이젠 음모론이 아니라 현실일거 같네요.

   전체적인 글의 퀄리티가 저하되면 검색 엔진의 품질도 저하되지 않을까 걱정되네요.

   https://news.hada.io/topic?id=12816

   아 올라온 글이였군요..
   gn+글이 사이트메인에 안보여서 못봤습니다.
   이런건 컴퓨터가 쉽게잘하는일인데, 저처럼 부주의한 사용자가 동일한 링크를 올리면 안내해주는 과정이었다면 좋을것 같습니다.

   GN+ 쪽은 메인에 노출되는 건 아니라서, 저도 그냥 참고로 올렸어요 :)
   주말에 심심해서 GN+ 까지 둘러보다가 보니 내용이 같아 보여서요.

   예전에도 구글 검색 품질에 대한 여러 기사들이 있었는데 이제는
   AI 쓰레기로 가득차는건 확정된 미래고, 걸러내는것도 불가능 해 보입니다.
   미래 플랫폼은 어떤 방향으로 넘어갈까요?

   개인적인 생각에 유튜브 사용이력같은걸로 사람인증을 받고 서명한다던가식의 반실명화 되면서 익명성이 줄어들 수 있을 것 같습니다.

   공감되는 글이네요
"
"https://news.hada.io/topic?id=12814","팀을 위한 ChatGPT","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             팀을 위한 ChatGPT

ChatGPT 팀을 위한 맞춤형 서비스

     * ChatGPT는 팀의 모든 구성원을 위한 맞춤형, 지속적으로 개선되는 슈퍼어시스턴트를 제공함.
     * 팀의 필요에 맞는 강력한 모델을 통해 더 나은 코드 생성, 이메일 작성, 데이터 분석 등을 수행할 수 있음.
     * 특정 사용 사례, 부서 또는 독점 데이터셋에 맞춰 GPT를 생성하고 공유하여 협업을 강화함.
     * 관리자 제어, 팀 관리 및 엄격한 보안을 갖춘 팀 전용 작업 공간을 제공하며, 사용자의 데이터나 대화를 훈련에 사용하지 않음.

팀의 업무 효율성 향상

     * ChatGPT는 아이디어 도출과 연구를 위해 웹에서 관련성 높고 실시간 정보를 제공하여 브레인스토밍과 연구를 더 효과적으로 함.
     * 문서와 데이터에서 통찰력을 빠르게 추출하고, 코딩 및 개발을 가속화하며, 시각 자료부터 텍스트까지 다양한 콘텐츠를 쉽게 구축할 수 있음.
     * 거의 모든 전문 분야에 대한 ChatGPT의 맞춤 버전을 구축하여 특정 지침, 지식 및 능력을 갖추고 다른 사용자가 사용할 수 있도록 공개함.

다양한 팀을 위한 사용 사례

     * 엔지니어링, 마케팅, 영업 및 성공, 재무, 인사 및 인력 관리 등 다양한 팀을 위한 사용 사례가 있음.
     * OpenAI를 사용하는 팀은 작업 수행 속도가 25.1% 빨라지고, 작업 품질이 40% 향상되며, 12.2% 더 많은 작업을 완료함.

고급 모델 및 도구

     * GPT-4, 32k 컨텍스트, 최신 DALL·E 3 모델을 사용한 이미지 생성, 고급 데이터 분석 등을 제공함.
     * 웹에서 최신 정보를 얻기 위한 브라우징 기능, 이미지 및 음성 입력 및 출력 기능이 있음.
     * 맞춤형 GPT 생성 및 작업 공간과 GPT 및 채팅 공유가 가능함.

보안 및 개인 정보 보호

     * 관리자 콘솔, 전용 작업 공간, 대량 멤버 관리, 관리자 역할 등의 보안 기능을 제공함.
     * 비즈니스 데이터나 대화를 훈련에 사용하지 않는다는 보안 정책을 가짐.

가격 탐색

     * ChatGPT를 사용하여 업무 방식을 발전시키는 수천 개의 팀에 합류할 수 있음.
     * Fortune 500 기업의 80%가 이미 ChatGPT를 업무에 사용하고 있음.

GN⁺의 의견

     * ChatGPT는 팀의 특정 요구에 맞춰 맞춤화되고 강력한 기능을 제공하여 업무 효율성을 크게 향상시키는 도구임.
     * 다양한 팀과 업무에 적용 가능한 사용 사례와 고급 모델을 통해, 복잡한 작업을 단순화하고 빠른 의사결정을 지원함.
     * 보안과 개인 정보 보호에 대한 강조는 기업이 기술을 신뢰하고 채택하는 데 중요한 요소로 작용함.

        Hacker News 의견

     * 해커뉴스 댓글 요약: OpenAI의 ChatGPT 팀 소개 관련
          + 가족용 ChatGPT 요청
               o 무료 버전은 많이 사용되지만, 웹 검색 기능은 유료 사용자만 가능
               o 개인별로 매달 $20 지불하는 것보다 가족 플랜을 원함
               o 3-4인용 가족 플랜을 월 $30-$40에 제공해달라는 요청
          + 팀 및 기업용 계정의 데이터 사용 정책
               o 팀 및 기업용 계정에서는 ""당신의 데이터로 훈련하지 않음""이 특징
               o ChatGPT API를 사용하는 요청은 이미 훈련에 사용되지 않음
          + 대화 데이터 사용에 대한 변경 사항
               o 개인 사용자는 대화 데이터가 훈련에 사용되는 것을 선택할 수 없음
               o 팀 계정을 사용해야만 대화 데이터가 훈련에 사용되지 않는 옵션을 선택할 수 있음
          + 기업의 대량 구매 관련 질문
               o 기업이 1000개 좌석을 구매하는지, 대량 할인이 있는지 궁금
               o 슬랙이 사용자당 월 $5인데, 기업이 대량으로 구매할 때 할인을 받는지 여부
               o AI 도구의 영향력에 대한 논의와 오픈 소스의 중요성
               o 한 스타트업이 매달 큰 비용이 드는 SaaS 제품을 자체적으로 구축함
          + OpenAI의 전략
               o 기술 리더십이 지속 가능한 경쟁 우위가 아니라는 것을 인지하고 네트워크 효과를 추구
               o 슬랙 커넥트(공유 채널)와 유사한 전략
          + ChatGPT 애플 카플레이 앱 아이디어
               o 운전 중 ""Hey Siri"" 사용 대신, 대화를 이어나갈 수 있는 ChatGPT 앱 제안
               o Siri는 정보를 보여주지 못하고 웹사이트 링크를 시도하는 반면, 요약 답변을 제공하는 ChatGPT가 유용할 것
          + 기업 플랜의 전략적 우위
               o 기업 플랜을 팀 플랜보다 훨씬 나은 조건으로 설정한 전략
               o 기업에 ""올바른 일을 하라""는 압박이 크며, 이로 인해 큰 수익을 창출할 것으로 예상
          + 데이터 훈련 사용에 대한 2개 계층의 존재
               o 데이터를 훈련에 사용하지 않는 2개의 계층이 존재
               o 높은 대역폭은 새로운 고객 유치를 목적으로 하지만, 기존 ChatGPT Plus 사용자의 할당량이 새 팀에 의해 소모될지에 대한 의문 제기

   이 요약은 해커뉴스 댓글에서 다양한 사용자들의 의견을 각각의 관점으로 나누어 정리한 것으로, 각 항목은 명사형으로 끝나며, 중립적인 태도를 유지하고 있습니다. 복잡한 내용은 초급 소프트웨어 엔지니어가 이해하기 쉽도록 간결하게 설명하였습니다.
"
"https://news.hada.io/topic?id=12876",""수년 간 지속된 문제": 보잉의 제조 혼란","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""수년 간 지속된 문제"": 보잉의 제조 혼란

알래스카 항공사의 비상 사태 이전부터 보잉의 우려

     * 2024년 1월 5일 발생한 알래스카 항공사의 비상 사태 이전부터, 보잉사 내부에서는 항공기 제작 방식에 대한 우려가 있었음.
     * 보잉은 다른 많은 미국 제조업체들처럼, 복잡한 기계에 들어가는 부품들을 점점 더 많이 외주화하고 있었음.
     * 2001년에 보잉의 항공우주 엔지니어인 존 하트-스미스는 내부 기술 심포지엄에서 논란이 되는 백서를 발표함. 그는 보잉이 너무 많은 작업을 외주화하고, 공급업체에 충분한 현장 품질 및 기술 지원을 제공하지 않을 경우의 위험성을 경고함.

GN⁺의 의견

     * 이 기사는 보잉이 항공기 제조 과정에서 부품 외주화를 확대해온 역사와 그로 인한 잠재적 위험성을 강조함으로써, 항공 안전에 대한 중요한 문제를 제기함.
     * 존 하트-스미스의 백서는 업계 내부에서도 이러한 위험성에 대한 인식이 있었음을 보여주며, 이는 항공기 제조사의 품질 관리와 공급망 관리의 중요성을 강조하는 사례로 볼 수 있음.
     * 이러한 정보는 항공기를 이용하는 승객들뿐만 아니라, 항공 안전 규제를 담당하는 기관과 항공기 제조 및 유지보수에 종사하는 전문가들에게도 중요한 참고 자료가 될 수 있음.

        Hacker News 의견

     * Dr. LJ Hart-Smith의 2001년 논문은 기사만큼이나 흥미로움
          + 소프트웨어 업계에도 적용 가능한 관찰들이 있음
          + 논문의 마지막에 있는 Hart-Smith의 권장 사항들 중 주목할 만한 것들:
               o 전체 활동을 지속적으로 살펴보고, 비용을 단독으로 최소화하지 말 것
               o 신제품 개발에 필요한 기술을 습득할 수 있도록 충분한 내부 생산 유지
               o 고부가가치 산업과 달리 저부가가치 산업에서는 비용 절감 기법이 종종 부적절함
               o 외부 비즈니스 컨설턴트보다 자사 직원의 비용 절감 방안에 더 귀 기울일 것
     * 보잉이 공장을 사모펀드에 매각한 결정에 대한 비판
          + 사모펀드 소유의 공장에서 만들어진 제품은 품질에 반하는 조직으로, 단기적 이익 추구에 초점을 맞춤
     * 90년대 말부터 보잉의 문화 변화와 전략적 실수에 대한 우려
          + 드림라이너 출시 시점에 이미 일반적으로 알려진 문제들
          + 맥스 8 추락 사고 발생 시 모두 충격과 놀라움을 가장함
          + 복잡한 시스템에서 발생하는 사고는 보통 동일한 근본 원인 때문에 발생
          + 2018/19년 큰 스캔들 이후에도 보잉은 품질 보증 및 안전 규정에 대한 예외를 더 얻기 위해 로비 활동을 함
          + 2000년대에 이미 보잉의 여러 비행기가 시장에서 최고가 아님을 인지하고 있었으나, 미국 정부의 중요 인물들이 구매자에게 영향을 미쳐 계속해서 주문을 받음
          + 보잉 내부에서 문제를 제기하는 사람들은 무시되거나 해고됨
     * 보잉이 미국 내 여러 주에 걸쳐 운영을 분산시킨 전략
          + 제조가 분산되어 있는 단점이 있지만, 정치적 이점을 위해 결정됨
          + 보잉은 침몰하는 배와 같지만, 아무도 상황을 악화시키고 싶어하지 않음
     * 보잉 경영진은 마케팅을 모든 수익의 원천으로 보고, 엔지니어링, 디자인, 제조는 최소화하고 통제해야 할 비용으로 간주함
          + 현재 보잉 경영진은 제조상의 책임자를 찾아내어 문책할 것임
     * 보잉의 핵심 역량은 규제 회피와 정부 계약 획득
          + 핵심 역량이 아닌 비행기 제작을 외주화하는 것은 올바른 결정이었음
     * 보잉 내부의 부패를 ""외주화"" 탓으로 돌리는 것은 책임 전가
          + MCAS 소프트웨어 문제와 MCAS 수정에 대한 비용 절감은 보잉 내부의 부패를 드러냄
     * 1960년대 초기 CAD/CAM이 보잉 프로젝트를 구한 사례
          + 설계 변경은 실제로 제작하기 전에 하는 것이 최선임을 보여주는 일화

   배경 지식: 이 요약은 보잉의 경영 및 제조 전략에 대한 해커뉴스 사용자들의 다양한 의견을 담고 있음. 보잉은 미국의 대형 항공기 제조업체로, 최근 몇 년간 여러 가지 문제로 인해 비판을 받아왔음. 여기서 언급된 MCAS는 737 MAX 항공기의 비행 제어 시스템으로, 두 대의 항공기 추락 사고와 관련이 있음. CAD/CAM은 컴퓨터를 활용한 설계 및 제조 기술을 의미함.
"
"https://news.hada.io/topic?id=12828","Apple Vision Pro용 앱 등록 받기 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Apple Vision Pro용 앱 등록 받기 시작

     * VisionOS에는 새로운 앱 스토어가 탑재될 예정으로, 이에 대한 상세 정보 및 등록 가이드를 공개
     * 대부분의 iPadOS와 iOS앱은 수정없이 실행 가능하며, 자동으로 새 앱스토어에 등록되어 배포됨
     * 앱스토어용 스크린샷은 Reality Composer Pro의 Developer Capture 기능을 이용할 것
     * visionOS의 앱 아이콘은 원형 3D 객체로 표시되므로 HIG 참고 필수

   비전 프로가 국내 출시한다면 꼭 한 번 체험해보고 싶네요.
"
"https://news.hada.io/topic?id=12753","백만 분의 일 확률을 가진 것은 무엇인가? (2010년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    백만 분의 일 확률을 가진 것은 무엇인가? (2010년)

""백만 분의 일"" 확률은 정말 있을까?

     * ""백만 분의 일"" 확률에 대한 주제는 수업에서 재미있게 다룰 수 있는 내용임.
     * 학생들에게 일상 대화에서 ""백만 분의 일"" 확률이 언급될 때 어떤 상황을 떠올리는지 물어봄.
     * 학생들은 로또 당첨이나 번개 맞기 같은 전형적인 예시와 더 창의적인 제안을 함.
     * 실제 일상 사용에서 ""백만 분의 일"" 확률이 어떻게 쓰이는지 데이터를 얻는 방법에 대해 논의함.
     * 블로그 검색 외에는 실용적인 방법을 찾기 어려움.
     * 실제로 ""백만 분의 일"" 확률을 가질 수 있는 사건에 대한 제안을 요청하고, 그 확률을 정량화할 수 있는지, 그리고 그것이 대략 백만 분의 일인지 검토함.

확률의 예시와 비예시

     * 동전 던지기나 로또 당첨 같은 게임의 기회에서 명백한 예시들을 제시함.
     * 예를 들어, 20번의 동전 던지기가 모두 뒷면으로 나올 확률은 ""예""임.
     * 캘리포니아 주 파워볼 복권에서 일년에 6장씩 구매 시 당첨 확률도 ""예""임.
     * 위키피디아 ""랜덤 문서"" 링크에서 특정 유명인을 얻을 확률도 ""예""임.
     * 하워드 단층에서 다음 50분 내에 큰 지진이 발생할 확률은 ""예""임.
          + 2007년 추정에 따르면 하워드 단층에서 6.7 이상의 지진 발생 확률은 연간 약 1%임.
     * 미국에서 태어난 다음 24명의 아기 중 한 명이 대통령이 될 확률도 ""예""임.
          + 미국의 출생률은 연간 약 400만 명이고, 대통령 임기를 평균 6년으로 가정하면 24백만 명의 아기 중 한 명이 대통령이 될 것임.
     * 선거에서 결정적인 한 표를 던질 확률은 상황에 따라 다르지만, 여론 조사에서 판단하기 어려운 캘리포니아 주 선거에서는 ""예""임.

개인에게 미치는 위험

     * ""실제 세계"" 프로젝트를 시작한 이래로 다양한 위험에 대한 이메일을 자주 받음.
     * 비행기 추락, 해적에게 납치, 조류에 의한 익사, 라틴 아메리카에서의 교통사고 등의 위험에 대한 질문은 간단한 답이 없음.
     * 죽음의 수치만 가지고는 충분하지 않고, 해당 활동에 참여하는 사람들의 수도 필요함.
     * 스키나 스노보드 사고로 인한 사망률을 예로 들면, 미국 공식 스키장 방문 시 백만 번의 방문당 평균 0.7명의 사망률을 기준으로 함.
     * 다양한 활동의 위험을 비교할 때는 활동에 소요되는 시간도 고려해야 함.
     * ""마이크로모트""라는 용어는 특정 활동으로 인한 백만 분의 일 사망 확률을 나타내며, 이 페이지는 다양한 활동의 비교를 제공함.
     * 예를 들어, 스카이다이빙 점프 중 사망 확률은 ""아니오""임.
          + 이는 약 10 마이크로모트에 가까움.
     * 개인의 행동에 따라 확률이 크게 달라질 수 있으므로, 인구 평균을 개인에게 적용하는 것은 상식적인 판단이 필요함.
     * 예를 들어, 캘리포니아에서 200마일 자동차 여행 중 사망할 확률은 ""예""임.
          + 여기서는 캘리포니아의 사망률이 1억 5천만 차량 마일당 약 1건임.
     * 번개에 맞을 확률은 ""아니오""임.
          + 번개에 맞는 것에 대한 신뢰할 수 있는 데이터가 없으며, 의료 도움을 받지 않으면 공식 통계에 포함되지 않음.
     * 마지막으로, 남성이 유방암에 걸릴 확률은 ""아니오""임.
          + 남성의 유방암 발병률은 드물지만, 생각보다 흔하며, 평생 발병률은 약 1천 분의 일, 사망률은 5천 분의 일임.
     * 질병, 흡연, 비만 등의 영향을 평가할 때는 ""마이크로라이프""라는 개념을 사용하는 것이 더 좋음.
          + 이는 기대 수명의 약 30분 변화를 의미하며, 이 시간은 성인 평생의 대략 백만 분의 일에 해당함.

GN⁺의 의견

     * ""백만 분의 일"" 확률은 일상 대화에서 다양한 상황에 대한 과장된 표현으로 사용되지만, 실제로 이 확률을 가지는 사건들은 매우 드물고 특정 조건에 의존함.
     * 이러한 확률을 이해하고 계산하는 것은 통계학적 사고를 키우는 데 도움이 되며, 위험 관리와 의사결정에 중요한 역할을 함.
     * 개인의 행동과 상황에 따라 위험도가 크게 달라질 수 있으므로, 인구 통계적 평균을 개인에게 적용할 때는 신중해야 함.

        Hacker News 의견

     *

     ""과학자들은 어떤 일이 실제로 일어날 확률이 수백만 대 일이라고 계산했다. 하지만 마술사들은 수백만 대 일의 확률이 실제로는 열 번 중 아홉 번은 일어난다고 계산했다."" -- 테리 프래첫
          + 소설에서 ""백만 대 일의 확률이지만, 작동할지도 모른다!""라고 하면 실제로 작동할 것이라는 점을 농담하는 내용.
          + _Guards! Guards!_에서는 화살로 드래곤의 약한 부분을 맞추는 것만으로는 충분하지 않고, 확률을 정확히 백만 대 일로 만들기 위해 여러 가지 불가능해 보이는 상황을 만들어야 한다고 언급됨.
     *

     ""한 번, 누군가가 내 이름을 물었다. 나는 '마크 쉬(Mark Xu)'라고 대답했다. 그 후 그들은 아마 내 이름이 '마크 쉬'라고 믿었을 것이다. 내 운전 면허증에 '마크 쉬'라고 쓰여 있을 것이라고 20:1의 확률로 내기를 했을 것이다.""
          + 누군가의 이름이 '마크 쉬'일 확률은 아주 관대하게 1:1,000,000이라고 가정.
          + 내가 '마크 쉬'라고 말한 것에 대한 확률 비율이 20,000,000:1, 즉 약 24비트의 증거가 됨.
          + 비범한 주장에는 비범한 증거가 필요하지만, 비범한 증거는 생각보다 흔할 수 있음.
     * 다음은 모두 사망 확률이 약 1백만 분의 1, 또는 1 마이크로모트인 활동들:
          + 오토바이로 6마일(9.7km) 이동
          + 걸어서 17마일(27km) 이동
          + 자전거로 20마일(32km) 이동
          + 자동차로 230마일(370km) 이동
          + 제트기로 1,000마일(1,600km) 이동
          + 기차로 6,000마일(9,656km) 이동
          + 그러나 짧은 거리를 자전거로 이동하면 건강 효과로 인해 기대 수명이 증가함.
     *

     ""백만 년에 한 번""–개인에게 백만 년에 한 번 일어날 수 있는 일–은 지구상의 사람들에게는 매년 8,000번 이상 발생함. 많은 사람들이 카메라가 달린 스마트폰을 가지고 있어서 빠른 갈색 여우가 게으른 개를 뛰어넘는 실제 비디오를 가질 수 있음.
     *

     ""베커 병(Becker Bottle)""을 정말 좋아함. 이 개념을 진정으로 시각화할 수 있는 능력을 제공하며, 화학 수업에 대한 훌륭한 학습 도구이자 재미있는 놀이거리임.
     *

     많은 트래픽을 가진 서비스 작업을 하면서 생각남
          + 그렇게 많은 트래픽을 가진 서비스에서는 경계 사례가 얼마나 자주 발생하는지 흥미로움
          + 로컬에서 재현하기 어려운 일이 로그를 보면 일주일에 100번 정도 발생함
     *

     글쎄, 파도가 그것을 쳤어.
          + 파도가 그것을 쳤다고?
          + 파도가 배를 쳤어.
          + 그게 이상한가?
          + 오, 바다에서? 백만 분의 1의 확률!
     *

     내가 생각해낸 가장 좋아하는 정신적 시각화: 뉴저지에서 플로리다까지 운전하는 것을 상상해보세요 (당신이 한 긴 운전으로 대체).
          + 내 경우 약 1,200마일로, 시속 60마일로 20시간이 걸림. 그것은 72,000초의 지루한 운전임.
          + 만약 당신이 20시간 동안 운전하는 동안 버튼을 누르고, 그것이 15초 동안 지속되는 ""위험 구역""에 들어가면 당신은 짐.
          + 이 예는 복권 당첨 확률(백만 분의 1보다 나쁨)을 볼 때 더 좋음 - 창문 밖으로 25센트짜리 동전을 던져서 도로의 적절한 1인치 구역 안에 착지하기를 바라는 것을 상상할 수 있음.
          + 이 예는 여러분에게 직관적인 느낌을 줌 - 도로의 길이나 시간의 길이를 비교하여 다양한 확률을 비교할 수 있게 해줌.
     *

     EU에서 주택, 사무실 및 기타 일반 건물의 구조 공학 안전 요소를 알아두면 좋음.
          + 유로코드는 3가지 결과 클래스를 정의: CC1, CC2, CC3.
          + CC1은 가장 낮은 결과를 가지며 일반 주택, 경공업 및 농업에 사용됨. 구조 실패로 인한 사망 확률이 낮음, 0.001.
          + CC2 건물(아파트, 사무실, 호텔 등)은 중간 정도의 사망 확률을 가짐, 0.03.
          + CC3은 대형 경기장과 같은 특별 건물에 사용되며, 구조 실패 시 사망 위험이 높음, 0.3.
          + 결과 클래스는 건물이 주어진 해에 붕괴될 수 있는 확률과 연관됨. 원인은 극단적인 날씨 등이 될 수 있음.
          + CC1의 경우 이는 1 in 100, CC2는 1 in 10,000, CC3는 1 in 100,000의 확률임.
          + 구조 안전 표준 뒤에 있는 통계를 순수하게 보면, 한 해에 폭풍으로 인한 구조 실패로 인해 스타디움에서 한 명 이상이 사망할 확률은 1 in 300,000이 될 수 있음.
          + 통계는 바람, 눈, 비, 사용 등의 하중에 대한 간단한 참조 값과 쉬운 안전 요소로 매핑됨. 예를 들어 CC2는 모든 가변 하중에 대해 1.5의 안전 요소를 가짐.
     *

     젊은 남성의 평생 유방암 발병 확률이 1 in 1000인 것은 실제로 꽤 흥미로움: 그것은 그의 고환암 발병 확률보다 그렇게 낮지 않음, 고환암은 대략 1 in 250의 평생 확률을 가짐(미국 기준으로 가정).
          + 그리고 남성이 유방암으로 사망할 확률은 고환암으로 사망할 확률과 대략 동일함: 둘 다 약 1 in 5000의 평생 확률임.

   누군가의 이름이 '마크 쉬'일 확률은 아주 관대하게 1:1,000,000이라고 가정.
   내가 '마크 쉬'라고 말한 것에 대한 확률 비율이 20,000,000:1, 즉 약 24비트의 증거가 됨.
   비범한 주장에는 비범한 증거가 필요하지만, 비범한 증거는 생각보다 흔할 수 있음.

   이게 어떤 내용일지 설명해주실 분 계신가요? 머리가 나빠서 이해가 안되네요 ㅠㅠ
"
"https://news.hada.io/topic?id=12832","Unity의 이중 잣대 논란: VLC 금지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Unity의 이중 잣대 논란: VLC 금지

     * 2019년 12월부터 Unity 스토어에서 VLC for Unity 통합 바이너리를 배포하기 시작
     * Unity 게임 엔진과 VLC 멀티미디어 엔진 간의 연결고리로, Unity 기반 게임에서 VLC 기술을 기반으로 한 자체 미디어 플레이어 구축 가능
     * Unity와 LibVLC 모두 높은 이식성을 가지고 있어, 크로스 플랫폼 통합에 유용
     * 즉시 많은 사용자들이 Unity 앱과 게임에서 고성능 멀티미디어 솔루션을 요구할 때 Unity 스토어에서 다운로드했음
     * Windows, UWP, Android을 타겟으로 함

Unity 스토어 금지

     * 2023년 여름 말, Unity로부터 다음과 같은 이메일을 받고 퍼블리셔 계정이 즉시 금지됨
     * 몇 달간의 느린 이메일 교환을 통해 타협을 시도했지만, Unity는 LGPL 코드를 자산에서 제외하는 것을 포함하여, Unity 스토어로의 복귀는 환영하지 않는다고 함
     * 현재 Unity 스토어에는 LGPL 종속성(예: FFmpeg)을 포함하는 수백 개의 Unity 자산이 있으며, 이렇게 집행된 것은 완전히 무작위로 보임
     * Unity 자체, 에디터와 런타임 모두 이미 LGPL 종속성을 사용 중임. Unity는 Lame, libiconv, libwebsockets, websockify.js 등의 라이브러리를 기반으로 구축됨
     * Unity는 LGPL 오픈소스 라이브러리를 사용하고 혜택을 받지만, Unity 스토어를 통해 퍼블리셔와 Unity 사용자는 그렇게 할 수 없음

Videolabs 스토어 소개

     * Unity 애셋이 제거된 후, 기존 및 신규 고객들이 VLC for Unity의 상태에 대해 문의함
     * LibVLC SDK와 관련 기술(예: FFmpeg)을 사용하는 많은 회사들이 있음
     * 이에 Videolabs 웹사이트에 간단한 스토어를 개설하여, Unity 스토어에 없어도 오픈소스 VLC Unity 플러그인의 바이너리를 구매할 수 있도록 함

유연한 멀티미디어 컨설팅 패키지

     * 사용자가 문제에 직면하거나 새로운 기능을 요청할 때, 커뮤니티가 도움을 줄 수 있지만, 몇몇 자원봉사자의 제한된 시간으로는 충분하지 않음.
     * 오픈소스 프로젝트 유지 관리자와 상업적 소비자 모두에게 특정 프로젝트에 대한 명확한 제품 및 서비스 제공이 최선임.
     * Videolabs 스토어는 LibVLC와 FFmpeg를 위해 3시간, 10시간, 24시간의 멀티미디어 컨설팅 패키지를 제공함.
     * 어떤 OS 플랫폼이나 툴킷을 사용하든, 도움을 줄 수 있음.

기타 제품

     * LibVLCSharp 상용 라이선스와 LibVLC 전자책을 Videolabs 스토어에서 찾을 수 있으며, Kyber(초저지연 게임/데스크톱 스트리밍 및 원격 제어 SDK) 및 Unreal과 같은 다른 게임 엔진 통합 제품도 곧 출시될 예정임.

GN⁺의 의견:

     * Unity가 LGPL 라이브러리를 사용하면서도 Unity 스토어에서는 LGPL 코드를 포함한 자산의 사용을 금지하는 것은 이중적인 태도로 볼 수 있음.
     * 이러한 상황은 오픈소스 커뮤니티와 상업적 사용자 간의 관계에 중요한 영향을 미칠 수 있으며, 오픈소스 프로젝트의 지속 가능성에 대한 논의를 촉진함.
     * Videolabs 스토어의 설립은 Unity 스토어의 제한을 우회하여 VLC for Unity 통합과 같은 오픈소스 자산의 유지 관리 및 배포를 계속할 수 있는 새로운 방법을 제시함.

        Hacker News 의견

     * LGPL v1의 원래 작성자는 1991년경에 앱 스토어나 서명된 바이너리와 같은 것을 상상할 수 없었음. 동적 링킹은 사용자가 라이브러리 코드를 쉽게 업그레이드할 수 있는 방법을 제공했음.
          + iOS 등에서 사용자가 라이브러리를 업데이트할 수 없기 때문에, LGPL 코드를 해당 플랫폼에 배포하는 것은 불가능하다고 봄.
          + Unity의 크로스플랫폼 지원이 중요한 점을 고려할 때, 실제 운영 체제에서만 배포하지 않는 이상 다른 라이브러리를 찾아야 할 것임.
     * Unity가 VLC 프로젝트를 LGPL 소프트웨어 사용으로 금지하는 경우, '상호 확증 파괴 로비/길드'가 필요할 수도 있음.
          + 이 길드는 다른 프로젝트들이 LGPL 코드를 사용하는 것을 기반으로 Unity에 대해 개별 소송을 제기하여 차별에 대한 다양한 법적 선례를 활용할 것임.
          + 이러한 방식은 특정 프로젝트를 부당하게 지목하는 것을 불가능하게 만들 것임.
     * 법의 글자와 정신 사이의 차이를 이해하는 지혜나 의지를 어딘가에서 잃어버렸음.
          + 부와 권력이 올바름에 대한 판단을 압도하도록 허용했을 때 우리는 영혼을 팔았음.
          + Unity가 진정한 힘을 발휘하고자 한다면, 멍청한 법률로부터 자신을 보호하기 위해 설계된 성급한 정책을 포기하는 것부터 시작해야 함.
          + Unity는 특허/저작권/상표 트롤에 맞서 싸우기 위한 전쟁 자금을 저축하고, 생태계 내 프로젝트를 보호하여 다른 대형 기업들에게 본보기를 보여줄 수 있음.
     * ""VLC for Unity (Android)"", ""VLC for Unity (UWP)"", ""VLC for Unity (Windows)"" 패키지가 폐기되었다는 것은 단순한 폐기가 아니라 금지와 같음.
     * Unity가 자체 멀티미디어 엔진을 개발하여 판매하려는 것이라면 놀라지 않을 것임. 이런 나쁜 관행들이 정치에 참여하고 싶게 만듦.
     * Unity 스토어에서 LGPL 코드를 허용하지 않는 이유에 대한 합리적인 설명이 없음. Unity 스토어의 모델을 잘 모르기 때문에 무언가를 놓치고 있을 수도 있음.
     * LGPL은 최종 사용자가 LGPL 부분을 수정된 버전으로 교체할 권리를 부여하지만, Unity 앱을 다운로드한 사용자는 앱의 일부를 변경할 수 없음.
          + 따라서 LGPL 라이브러리를 사용하는 소프트웨어는 Unity 또는 대부분의 현대 앱 스토어에서 배포하면서 LGPL을 준수할 수 없음.
     * (비디오랜 회장의 면책 조항) VLC-Unity 플러그인은 완전히 오픈 소스이며, 충분히 숙련된 사람이라면 누구나 직접 빌드할 수 있음.
          + Unity와의 논의를 몇 달 동안 시도했지만 악몽과 같았음. Apple AppStore, Google Play 스토어, Windows 스토어와는 수년간 논의했지만 Unity는 대답이 없거나 서로 모순되는 대답, 그리고 명백한 악의를 보임.
          + 사실상, Unity는 LGPL과 오픈 소스를 사용하여 플랫폼을 구축하지만, 스토어에서 오픈 소스를 허용하지 않음? LGPL에 다른 라이선스의 계층을 추가하는 것조차 안 됨? 왜 우리는 안 되는가? 다른 사람들은 어떻게 하는가?
          + 매우 답답함.
          + 지원이나 라이선스를 구매해야 하는 사람들이 있기 때문에(직접 빌드하고 싶지 않거나, 지원 계약이 필요한 구매 부서 등), 작은 스토어가 필요함. 이것은 보통 보는 것과 다르지만 필요가 있으므로 그러한 작은 스토어가 존재함.
          + 대부분의 HN 사용자들은 스스로 빌드해야 함. 그것을 할 만큼 충분히 숙련되어 있어야 함.
     * VLC(및 Videolan)의 소프트웨어 특허에 대한 입장은 잘 알려져 있으며, 소프트웨어 특허를 원하거나 소프트웨어 특허에 의해 공격받는 사람들이 받아들이기 어려울 수 있음.
     * 비디오 게임 개발자는 아니지만, Videolan이 Godot용 VLC 플러그인을 만드는 것이 좋은 결정일지 궁금함. Godot는 여전히 모멘텀을 얻고 있으며, Unity와 같은 내장 미디어 스택을 가지고 있지만 상당히 제한적임.
     * Steam도 GPL 라이선스 코드를 허용하지 않음. SteamWorks에 대한 링크를 원한다면 해당 문서를 참조할 것.
"
"https://news.hada.io/topic?id=12782","Nino - 18가지 업무용 앱을 하나로 묶은 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Nino - 18가지 업무용 앱을 하나로 묶은 앱

     * 서로 상호 운용 가능한 앱 모음으로, 하나의 통일된 인터페이스에서 블록 수준으로 협업 가능
     * 현재 18가지 앱(""모듈"")을 포함
          + DB: Sheet, Form, Calendar, Gallery, Board, Todo, List
          + 작성: Doc, Slide, Drive, Notebook, Canvas, Grid, Blog, Site
          + 통신: Channel, Chat, Meet
     * 웹앱 및 iOS/Android/Window/Mac/Linux용 앱 제공
     * 각 모듈의 내용(페이지/블럭)이 서로 자유롭게 연동 가능
     * 오프라인 모드 지원. 로컬 저장이 기본
     * 팀 협업 기능 지원
          + 내부 및 외부와의 협업을 위한 무제한 멤버 및 게스트 초대
          + 실시간으로 페이지에서 모든 사용자 확인, 블록에 대한 코멘트로 스레드 시작, 실시간 커서를 사용한 동시 편집 지원
     * Blog/Site 의 페이지는 Publish 가능 (Sheet, Board, Canvas 등도 가능)
          + 전문적인 브랜딩 페이지를 쉽게 구축할 수 있는 노코드 솔루션
          + 커스텀 도메인 또는 nino.page의 무료 서브도메인 이용
          + 1-클릭 버전 롤백 가능. SEO 기능 및 CDN 내장
     * End-to-end encryption (E2EE) 지원
          + 앱 추적 없이 기능 쿠키와 에러 보고만 수집
          + HTTPS 강제 (.app 도메인)
     * 무료 사용자는 1만개 블록까지 사용가능
"
"https://news.hada.io/topic?id=12850","10년 된 스팀 버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              10년 된 스팀 버그

Valve의 10년 된 Steam 문제, 모두가 Valve보다 너무 빠른가?

     * Valve는 때때로 커뮤니티 피드백과 버그 보고에 대응하지 않는 것으로 보임.
     * 10년 된 버그에 관한 이야기.

  tl;dr

     * 10년 이상 지속된 Counter-Strike의 No user logon 문제를 해결하기 위한 몇 가지 대중적인 해결책들이 실제로는 근본 원인을 해결하지 못함.
     * 이 글을 구글을 통해 찾았다면, 다음 해결책들을 시도하지 말 것:
          + 게임 재설치
          + 게임 파일 검증
          + Steam 재시작
          + 컴퓨터 재시작
          + WiFi 비활성화

  Introduction

     * Counter-Strike는 Valve에 의해 개발된 유명한 게임임.
     * 최근에 Counter-Strike 2(CS2)가 출시되어 Counter-Strike: Global Offensive(CS:GO)를 대체함.
     * CS2는 많은 버그를 포함하고 있으며, 이로 인해 게임 경험이 좋지 않음.
     * Valve는 CS2를 HackerOne 버그 바운티 프로그램에 포함시키지 않아 CS2와 관련된 버그 보고에 대해 보상을 지급하지 않음.

  No user logon

     * 커뮤니티가 수년간 보고한 버그들이 여전히 해결되지 않고 CS2에도 존재함.
     * No user logon 오류는 게임 중 무작위로 발생함.
     * 이 문제는 여러 포럼과 Valve의 공식 지원 포럼에서 여러 차례 보고됨.
     * 제안된 해결책들은 실제로 문제를 해결하지 못함.

    Esportal specific

     * Esportal에서도 이 문제를 여러 해 동안 겪었으며, 실제로 문제를 해결하지는 못하고 발생 빈도를 줄이는 데 그쳤음.
     * CS2에서는 처음에는 문제가 해결된 것처럼 보였으나 2024년 1월 첫 주에 문제 보고가 다시 증가함.

  The symptoms

     * No user logon 오류는 플레이어가 게임에 연결된 후 2-3분 후에 발생함.
     * 스킨이 게임 시작 몇 분 후에야 나타나는 현상과 관련이 있을 수 있음.

  Validation of the hypothesis

     * Steam 인증과 관련된 문제일 가능성이 높음.
     * STEAM USERID validated가 성공적으로 완료되기까지의 시간이 1월 3일 이전에는 2-3초였으나, 그 이후에는 약 1분 20초로 증가함.

  NETWORK_DISCONNECT_STEAM_LOGON

     * Steam 인증과 관련된 버그로 보임.
     * STEAMAUTH: Client Bob received failure code 8이라는 로그가 발견됨.

  Steam3 validation

     * Steam3 서버는 사용자 인증을 담당함.
     * 게임서버는 Steam3 서버에게 Steam ID의 유효성을 확인하도록 요청함.
     * Steam3 서버가 유효성을 확인하는 동안 플레이어는 게임을 계속할 수 있으나 스킨은 할당되지 않음.

  Making it trustable

     * CS2.exe가 신뢰할 수 있는지 확인하는 과정이 필요함.
     * Steam.exe는 현재 로그인된 계정을 알고 있으며, CS2.exe에서 보낸 Steam ID와 일치하는지 확인함.

  NETWORK_DISCONNECT_LOOPSHUTDOWN

     * NETWORK_DISCONNECT_LOOPSHUTDOWN이라는 또 다른 연결 해제 이유가 있음.
     * 이는 게임 자체에 의해 자동으로 재연결 시도가 발생함을 의미함.

  Loops in the Source engine

     * Source 엔진은 특정 목표가 달성될 때까지 실행되는 루프를 가짐.
     * CS2.exe는 여러 루프를 실행하며, 최종적으로 game 루프가 실행됨.

  The disconnection

     * 루프가 종료되면 NETWORK_DISCONNECT_LOOPSHUTDOWN으로 인해 연결이 해제될 수 있음.

  CS2 startup procedure

     * CS2.exe가 시작될 때 여러 루프를 실행하며, levelload 루프가 game 루프로 전환하기 전에 Steam ID 검증을 시작함.

   GN⁺의 의견:
    1. 이 글은 Valve의 게임인 Counter-Strike 시리즈에서 오랫동안 해결되지 않은 No user logon 버그에 대한 깊이 있는 분석을 제공함. 이는 게임 개발과 유지보수의 어려움을 이해하는 데 도움이 됨.
    2. Valve가 커뮤니티의 피드백과 버그 보고에 적절히 대응하지 않는다는 점은 게임 개발사와 사용자 간의 소통의 중요성을 강조함.
    3. 이 글은 소프트웨어 엔지니어링의 복잡성과 버그 추적 및 해결 과정에서의 도전을 잘 보여줌. 이는 버그를 해결하기 위한 체계적인 접근 방식의 필요성을 강조함.

        Hacker News 의견

     * 첫 번째 댓글은 Steam의 세션 티켓 시스템에 대한 설명으로, 게임 클라이언트가 Steam 서버로부터 세션 티켓을 요청하고, 이를 게임 서버에 제공하여 Steam ID를 증명한다고 언급함. 게임 서버는 이 티켓을 Steam의 웹 API를 통해 검증해야 하며, CS2 클라이언트가 세션 티켓을 얻는 데 지연이 발생할 때 이를 처리하지 못하는 것 같다고 지적함.

     ""Steam의 세션 티켓 시스템에 대한 설명과 CS2 클라이언트의 지연 처리 문제 지적""
     * 두 번째 댓글은 기사의 결론이 명확하지 않다고 지적하며, Counter-Strike 시작 방식의 문제점과 워싱턴에서의 유지보수 작업으로 인한 전 세계 플레이어의 문제 발생 가능성을 언급함. 또한, Steam ID 검증이 게임 루프 시작 전 마지막 단계로 이루어지기 때문에 유지보수 중 서버가 느려질 때 게임 시작을 방해할 수 있다고 설명함.

     ""Counter-Strike 시작 방식과 유지보수 작업이 문제 발생에 미치는 영향에 대한 분석""
     * 세 번째 댓글은 멀티플레이어 게임을 시작하기 전에 인증을 완료하는 것이 필수가 아니라는 버그를 지적함.

     ""멀티플레이어 게임 시작 전 인증 완료의 필수성 부족 지적""
     * 네 번째 댓글은 게임 클라이언트가 예기치 않게 충돌하는 원인을 동일한 방식으로 조사할 수 있는지 궁금해하며, GTA V의 로딩 시간 단축에 대한 연구를 언급함.

     ""게임 클라이언트 충돌 원인 조사와 GTA V 로딩 시간 단축 연구 언급""
     * 다섯 번째 댓글은 기사의 문체가 너무 과장되었다고 지적하며, 핵심 내용으로 빠르게 진입할 것을 제안함.

     ""기사 문체의 과장과 핵심 내용 전달의 중요성 강조""
     * 여섯 번째 댓글은 기사의 시작 부분에 문제 해결을 위한 간단한 요약을 추가할 것을 제안함.

     ""문제 해결을 위한 간단한 요약 추가 제안""
     * 일곱 번째 댓글은 게임이 시작될 때만 levelloadloop가 실행되는지, 서버에 접속하고 맵을 로딩할 때도 실행되는지에 대한 질문을 함.

     ""levelloadloop 실행 시점에 대한 질문""
     * 여덟 번째 댓글은 macOS에서 Steam 앱의 성능 개선을 바람.

     ""macOS에서의 Steam 앱 성능 개선 요구""
     * 아홉 번째 댓글은 Valve의 보안 문제를 지적하며, CS:GO가 새로운 보고서에 대해 범위에서 제외되었다는 사실을 언급함.

     ""Valve의 보안 문제와 CS:GO 범위 제외 언급""
     * 마지막 댓글은 과거에 서버 리스트와 활동 중인 플레이어 점수를 표시하는 도구를 만든 경험을 공유하며, 오래된 버그가 여전히 존재할 수 있다는 가능성을 제기함.

     ""과거 서버 리스트 표시 도구 개발 경험과 오래된 버그의 지속 가능성 언급""
"
"https://news.hada.io/topic?id=12841","벡터 데이터베이스: 기술 입문서 [PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        벡터 데이터베이스: 기술 입문서 [PDF]
"
"https://news.hada.io/topic?id=12802","Libwebsockets - 순수 C로 작성된 사용하기 쉬운 Websocket 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Libwebsockets - 순수 C로 작성된 사용하기 쉬운 Websocket 라이브러리

     * MIT 라이센스 오픈소스
     * http/1, http/2, websockets, MQTT 지원
     * 보안을 염두에 뒀으며, 경량, 설정 가능하며, 유연하고 스케일러블
     * cmake로 크로스 빌드 가능하여, 임베디드 RTOS부터 대규모 클라우드 서빙등 어디나 사용 가능
     * JSON, CBOR, JOSE, COSE 등을 경량으로 구현하며, 모든 것에 대해서 OpenSSL 및 MbedTLS v2/v3 지원
     * 이벤트 루프 공유에 libuv, libevent, libev, sdevent, glib, uloop 및 커스텀 이벤트 라이브러리 지원
     * 다양한 시나리오를 위한 100개 이상의 독립적인 예제를 제공하며, CC0 라이센스여서 Cut-and-Paste 하여 빠르게 시작 가능

   좋네요. C언어 하나로 이런 걸 만드시는 능력자 분들 대단합니다.
"
"https://news.hada.io/topic?id=12844","HN에 묻다: 다른 누가 '아무것도 하지 않음'에 대해 작업 중인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN에 묻다: 다른 누가 '아무것도 하지 않음'에 대해 작업 중인가?

최근에 '아무것도 하지 않기'에 대한 고찰

     * 요즘 모두가 다음 큰 일을 구축하거나 배우는 데 바쁜 것 같지만, 최근에 '아무것도 하지 않는' 것에 대해 작업하는 사람이 있는지 궁금함.
     * '아무것도 하지 않음'에 대한 작업이 없는 이유에 대한 의문 제기.

호기심 많은 개인의 경험

     * 항상 새로운 기술을 배우고 재미있고 유용하게 적용하는 데 관심이 많았음.
     * 알고 있는 것들은 순수한 호기심에서 배운 것들임.
     * 경력에서의 성공은 대부분 운과 IT의 몇 가지 핵심 영역에서 어느 정도 능숙함 때문.

전문적, 개인적 삶의 도전 부족

     * 전문적인 삶이 단조롭고 도전이 부족해짐.
     * 개인적인 삶에서도 새로움과 개선에 대한 동기가 크게 감소함.
     * 호기심과 새로운 것을 배우고 적용하려는 의욕 상실.

성취감 부족에 대한 고민

     * 지난 5년간 경험한 성취감 부족이 같은 길을 계속 걷는 것이 시간 낭비처럼 느껴짐.
     * 모든 것이 사실상 아무것도 아닌 것처럼 느껴짐.

자기 자신에 대한 작업

     * 사실 자신에 대한 작업을 하고 있음.
     * 개인적인 문제를 해결하는 데 모든 에너지를 소비함.
     * 외부 활동보다 개인적인 문제 해결이 우선시되고 있으며, 이는 나쁜 것만은 아니지만 더 건강한 균형이 이상적임.

GN⁺의 의견

     * 이 글은 개인적인 성장과 자기 반성의 중요성을 강조함. 직업적 성공과 개인적 만족 사이의 균형을 찾는 것이 중요하다는 메시지를 전달함.
     * '아무것도 하지 않음'이라는 주제는 현대 사회에서 끊임없이 무언가를 해야 한다는 압박감에 대한 반성적인 시각을 제공함.
     * 이 글은 독자들에게 자신의 삶을 되돌아보고, 때로는 멈추어 서서 자신을 돌보는 것의 가치를 인식하게 함으로써 도움이 될 수 있음.

        Hacker News 의견

     * 감사의 표현과 개인 경험 공유

     한 사용자가 자신의 경험을 공유하며 감사를 표함. 팬데믹 기간 동안 일과 자아 가치에 대한 관계를 재평가했으며, 원격 근무로 인한 사회적 고립의 심리적 변화를 경험함. 기술에 대한 환멸을 느끼며, 대형 기술 회사들이 새로운 기술을 개발하는 것에 회의적임.
     * 중년의 삶에 대한 성찰

     30대 중반에 중요한 것에 대한 관점이 바뀌어 부수적인 프로젝트나 새로운 프로그래밍 언어 학습에 대한 열정이 사라짐. 가족과 자신에게 더 행복한 삶을 살기로 결정함.
     * 자연과 함께하는 삶의 변화

     과거에 일과의 나쁜 관계를 가진 사용자가 히말라야 동부의 마을로 이주하여 자연을 중심으로 삶을 살게 됨. 공동 생활 호스텔을 시작하고 소프트웨어 작업에 다시 몰두하며, 재정적 기대 없이 제품을 만드는 데 만족함.
     * 자기 만족의 중요성

     외부의 인정이나 칭찬을 통한 만족이 아닌 내면의 행복을 찾아야 함을 강조. 자신에 대한 이해와 새로운 길을 모색할 것을 권장함.
     * 소프트웨어 업계에 대한 무기력함

     최근 소프트웨어 업계의 동향에 영감을 받지 못하고, 특히 LLM(대규모 언어 모델)과 관련된 스타트업에 실망함.
     * 휴식의 가치

     여러 오픈 소스 소프트웨어 작업과 연구 논문 발표를 시도했지만, 현재는 일에서 벗어나 삶을 즐기는 데 집중함.
     * 자기 발견의 여정

     과거의 작업이 자신에게 의미가 없었음을 깨닫고, 자신이 누구인지, 무엇을 좋아하는지를 찾아가는 과정에 있음.
     * 자신의 활동 가치 인식

     자신이 하는 일을 과소평가하는 경향이 있지만, 다른 사람들은 그 일을 충분히 어렵다고 생각할 수 있음을 인식함.
     * 프로그래밍 커뮤니티에 대한 부정적인 인식

     프로그래밍 커뮤니티가 재미와 학습에서 돈과 권력을 위한 것으로 변화하고 있다고 느끼며, 대신 음악을 즐기는 취미로 전환함.
     * 자기 개발의 중요성

     자신에게 시간과 에너지를 투자하는 것이 중요하며, 현재의 상황이 문제가 아니라면 괜찮지만, 문제가 있다면 변화가 필요함을 강조함.
"
"https://news.hada.io/topic?id=12868","프론트엔드에 대한 2023년 회고와 2024년 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      프론트엔드에 대한 2023년 회고와 2024년 예상

[2023년 회고]

  SSR (Server-Side Rendering)

     * SSR 은 새로운 개념이 아니지만, Vercel이 이 시장을 적극적으로 공략함.
     * Ruby on Rails 커뮤니티와 HTMX는 빌드 없는 워크플로우를 제안하며 SSR을 홍보함.
     * React와 Svelte는 Vercel과 밀접한 관계를 맺고 있으며, Vue는 커뮤니티 주도의 Nuxt를 통해 독립적인 입장을 유지함.
     * 모바일 영역에서도 SSR에 대한 관심이 증가하고 있으나, 모바일에서의 적합성은 여전히 논쟁 중임.

  AI

     * 프론트엔드 워크플로우에 AI를 통합하려는 시도가 활발함.
     * ChatGPT와 GitHub Copilot과 같은 도구들이 코드 생성 및 프로그래밍 지원 도구로 자리 잡음.
     * Microsoft는 OpenAI에 추가로 100억 달러를 투자하며 AI 분야의 잠재력을 인정함.

  브라우저 엔진, JS 엔진, 런타임

     * 새로운 브라우저 엔진 Ladybird가 등장하고, Servo 웹 렌더러가 발전함.
     * Hermes JS 엔진은 성능 향상을 이루었으며, QuickJS 프로젝트가 부활함.
     * Bun 런타임은 Node.js에 도전장을 내밀며 주목받음.

  크로스플랫폼 프레임워크

     * React Native는 여전히 강세를 보이며, Amazon이 주요 앱 개발에 선택함.
     * Flutter 개발자들은 미래에 대한 불확실성을 느끼며, Google의 지원이 줄어들 가능성에 대해 우려함.
     * Tauri와 Dioxus는 Rust 기반의 GUI 앱 개발을 가능하게 함.

  UI 프레임워크

     * Solid, Web Components, Svelte 등이 주목받으며, 각각의 방식으로 프론트엔드 개발에 혁신을 시도함.
     * HTMX는 복잡한 빌드 도구 시대에 간단한 접근 방식으로 주목받음.

  빌드 시스템

     * SWC와 Esbuild와 같은 차세대 빌드 도구의 사용이 증가함.
     * 새로운 번들러들이 등장하며, Metro는 React Native의 주요 빌드 도구로 자리 잡음.

  개발 도구

     * Eslint는 포맷팅 규칙 유지에 대한 불만을 표출하고, Prettier의 대안으로 Biome이 등장함.
     * Bun은 패키지 설치 속도를 크게 향상시키지만, 이로 인한 단점도 존재함.

[2024년 예상]

  스택 전체를 소유하려는 경향

     * 소프트웨어 스택의 전체 버티컬을 소유하려는 경향이 있음. 예를 들어, Bun은 런타임, 컴파일러, 패키지 매니저, HTTP 서버 및 테스트 러너가 되고자 함.
     * Vercel은 호스팅, 도메인 이름 등록, Edge 기능, 데이터베이스, 분석, 주요 UI 프레임워크용 SSR 통합 등 다양한 제품을 제공함.
          + Vercel은 중간 서비스를 제거하고 자체 솔루션을 개발하여 마진을 개선할 수 있음.
          + Vercel의 가치 제안을 ""당신이 직접 할 수 있지만, 우리가 노력을 덜게 해줌""에서 ""당신이 직접 할 수 없음""으로 변경하여 더 많은 매력을 끌 수 있음.
          + 사용자를 자신들의 스택에 갇히게 하는 것은 극단적인 선택지이지만, 고객 유지를 위한 전략으로 사용될 수 있음.
          + Vercel이 스택에서 독점적인 위치를 차지하고, 기술 스택을 더 매력적으로 만들어 일자리를 창출하고 사용자들의 기여를 끌어낼 것임.
     * 경쟁자들:
          + Biome은 잠재력이 있지만, 충분한 자본이 없음.
          + Bun은 자본이 있지만, 현재 많은 이슈에 직면해 있음.
          + Deno는 시장에 조심스럽게 진입하고 있지만, 전체 스택에 대한 답을 제공하고 있지 않음.
          + Expo는 모바일 분야에서 Vercel보다 강점이 있으며, 사용자 기반을 구축한 후 수익화 단계로 이동함.
     * 프론트엔드 사용자로서의 바람:
          + 프론트엔드가 복잡해지고 있고, 이를 단순화하고 통합하는 시도는 환영하지만, 이것이 사용자의 선택에 제한을 주는 것은 바람직하지 않음

  웹의 다양성 증가

     * 2024년 3월 5일부로 애플의 앱 스토어에서 웹 엔진에 대한 게이트키핑이 종료될 예정임.
     * Safari 팀은 시장 점유율을 보호하기 위해 노력 중임.
     * Servo는 아직 데스크탑 공간에서 경쟁하기에는 미흡함.
     * Ladybird는 2023년 웹 엔진 해커페스트에 참여하며 주목을 받음.
     * Chrome은 Manifest V2의 폐기로 인해 시장 점유율을 잃을 수 있음.
     * Firefox는 광고 차단 및 프라이버시에 집중할 수 있는 기회를 가짐.

  인공지능의 시작

     * OpenAI는 AGI를 향해 나아가고 있으며, GPT-4는 이 방향으로의 중간 지점으로 간주될 수 있음.
     * 애플이 ML 프로세서를 탑재한 기기를 출시하고 소비자에게 AI 기술을 제공하는 데 중점을 두고 있음.
     * 애플은 GPT-3.5와 경쟁할 수 있는 ""Ajax""라는 생성 AI 모델을 개발 중임.

  주요 UI 프레임워크의 지속

     * React와 같은 주요 UI 프레임워크들은 당분간 시장을 지배할 것으로 보임.

  모바일 개발의 변화 부족

     * 네이티브 개발자들은 계속해서 네이티브로 개발할 것으로 보임.
     * 개발자들은 기존에 사용하던 프레임워크에 충성할 것으로 예상됨.

결론

     * SSR과 AI가 강조되고 있으며, 자바스크립트 생태계가 도구부터 엔진까지 번창하고 있음.
     * 2024년에는 도구와 프레임워크의 통합, 산업 권력의 확대, AI의 일상적인 과정에 대한 관여가 더 증가할 것으로 예상됨.

   Prettier의 대안으로 Biome이 등장함. <- biome 뜬다고 하기에는 npm trends 에서는 prettier에 한참 못미치는것 같아요. 일단 대안으로 등장했다고 하니 궁금해지네요. 한번 찾아보겠습니다!

   네이티브 뷰를 사용하는 크로스플랫폼은 React Native 가 마지막이 될 것 같네요. 참 아쉽...

   감사합니다~
"
"https://news.hada.io/topic?id=12755","마이크로소프트, 키보드에 "Copilot" 키 탑재할 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    마이크로소프트, 키보드에 ""Copilot"" 키 탑재할 것

     * 새로운 Copilot 키는 다양한 새 PC와 노트북에 탑재되어, 키보드 버튼을 누르는 것만으로 마이크로소프트의 AI 기반 Windows Copilot을 이용 가능
     * 이 Copilot 키는 거의 30년 만에 Windows PC 키보드 레이아웃에 가해진 첫 번째 큰 변화로, 메뉴 키(응용 프로그램 키)를 대체하며, 대부분의 키보드에서 오른쪽 Alt 키 옆에 배치됨
          + Windows 11에 내장된 Windows Copilot을 실행시키며, ChatGPT와 유사한 챗봇을 제공하여 질문에 답하거나 Windows 내에서 작업을 수행할 수 있음
          + 만약 Windows Copilot이 사용자의 국가에서 아직 사용할 수 없다면, Copilot 키는 Windows 검색을 대신 실행
     * 현재로서는 Copilot 키가 다른 키와 결합하여 사용될 수 있는지에 대해서는 불분명하며, Microsoft는 향후 이에 대한 계획을 공유하지 않음
     * 어떤 OEM이 Copilot 키를 추가할지에 대해서는 아직 논의되지 않았으며, 발표는 CES와 그 이후에 있을 예정
     * Copilot 키는 이달 말부터 봄까지 출시되는 새로운 Windows 11 PC에 파트너사를 통해 공개될 예정이며, 마이크로소프트의 Surface 장치에도 포함될 것
     * 마이크로소프트는 Surface Pro 10과 Surface Laptop 6 모델을 봄에 출시할 것으로 추측되며, Surface 장치에 전용 Copilot 키가 탑재될 것
     * 마이크로소프트는 2023년 동안 Copilot을 모든 것에 통합하는 작업을 진행해왔으며, 이 새로운 Copilot 키는 2024년 동안 Windows에 계획된 더 큰 AI 기반 변화의 일부
          + 새로운 AI 기능에 중점을 둔 Windows ""리프레시"" 작업을 진행 중이며, 소프트웨어와 서비스의 더 많은 부분에 AI를 추가하고 있음
          + Microsoft Edge를 ""AI 브라우저""로 브랜딩했으며, 이건 마이크로소프트의 AI 추진이 아직 끝나지 않았음을 시사함
"
"https://news.hada.io/topic?id=12756","알래스카 737 MAX 항공편의 구멍으로 떨어진 아이폰 발견, 여전히 메일 접속 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            알래스카 737 MAX 항공편의 구멍으로 떨어진 아이폰 발견, 여전히 메일 접속 가능

        Hacker News 의견

     * 스마트폰이 비행기에서 떨어져도 살아남는 것은 놀랍지 않음. 2011년 와이어드 기사에 따르면, 스마트폰은 가벼운 물체이고 넓은 모양 덕분에 최종 속도가 그리 높지 않음. 질량을 고려하면 착륙 시 가해지는 힘도 많지 않음. 스마트폰 자체는 깨지기 쉽지만, 부드러운 곳에 떨어진다면 괜찮을 수 있음.
     * 충전 커넥터가 여전히 붙어 있지만 찢어진 상태로 추정해보면, 스마트폰과 충전 케이블이 비행기에서 떨어져 나와 나무에 걸려 충전 케이블이 가지에 얽히면서 스마트폰이 빠져 나와 풀밭에 떨어졌을 것으로 보임. 따라서 스마트폰은 두 번의 큰 충격을 통해 운동 에너지를 분산시킬 수 있었을 것임. 스마트폰의 가속도계 데이터를 분석해 이 시나리오를 확인할 수 있을지 궁금함.
     * 두 대의 스마트폰이 발견되었지만 비행기 문은 발견되지 않은 것이 이상함. Cedar Hills/Beaverton 지역은 주택과 상점이 많고 비교적 작은 녹지가 산발적으로 있음. 문이 녹지에 떨어졌을 가능성도 있지만, 그럴 확률은 낮음. 아마도 누군가의 뒷마당에 있을 것이며, 오리건의 비가 많이 오는 1월이라 사람들이 마당 일을 하지 않아 봄이 되어야 발견될 수도 있음. 나이키 캠퍼스의 호수에 떨어졌다면 재미있을 것이며, 호수가 얕지만 중앙에 있으면 오랫동안 눈에 띄지 않을 수 있음.
     * 여러 생각이 들었음:
          + 아이폰 소유주가 비밀번호를 설정하지 않았음?
          + 짐에 대해 알래스카 항공에 70달러를 지불했음?
          + 이제 우리는 아이폰이 하늘에서 떨어져도 살아남을 수 있다는 것을 알게 됨.
     * 신용카드 번호는 가렸지만, 승객의 개인정보 보호를 위해 전체 이름을 가리지 않은 것은 생각하지 못함.
     * 1972년에는 비행 승무원 베스나 불로비치가 비행기 폭발로 인해 다른 모든 사람이 사망한 가운데, 비행기 잔해에 갇힌 채로 33,000피트에서 떨어져도 생존한 사례가 있음.
     * 스마트폰이 부드러운 지형에 착륙한 것으로 보임, 이는 결과에 큰 차이를 만듦. 찢어진 충전 케이블이 여정이 얼마나 거칠었는지 보여줌.
     * 이 스마트폰들이 노키아가 아니어서 다행임. 노키아였다면 어떤 피해를 입혔을지 모를 일임.
"
"https://news.hada.io/topic?id=12829","페이먼: 나는 지쳤고 더 이상 아무것도 이룰 수 없을 것이다 (1985년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               페이먼: 나는 지쳤고 더 이상 아무것도 이룰 수 없을 것이다 (1985년)

물리학에 대한 새로운 태도

     * 리처드 파인만 박사는 노벨상을 수상한 물리학자로, 원자폭탄 개발에 참여한 경력이 있음.
     * 파인만은 물리학에 대한 흥미를 잃었으나, 과거에는 물리학을 즐겁게 다루었음을 회상함.
     * 중요성과 무관하게, 자신의 호기심과 즐거움을 위해 물리학 문제를 탐구했음을 설명함.

물리학과 놀이

     * 파인만은 대학에서 강의하는 것을 즐기며, 물리학을 취미로 다루기로 결심함.
     * 식당에서 접시가 공중에 던져지는 것을 보고, 접시의 회전과 떨림 사이의 관계에 대해 호기심을 가짐.
     * 복잡한 방정식을 통해 접시의 떨림이 회전 속도의 두 배임을 발견함.

물리학의 즐거움

     * 파인만은 자신의 발견을 동료에게 공유하며, 중요성과 무관하게 물리학을 즐기겠다고 다짐함.
     * 이러한 태도로 물리학 문제를 쉽고 자연스럽게 해결함.
     * 노벨상을 수상한 연구 역시 이러한 '놀이'에서 비롯됨을 밝힘.

   GN⁺의 의견:
     * 이 글은 리처드 파인만 박사의 물리학에 대한 열정과 태도 변화를 보여줌으로써, 연구와 학문에 있어서 호기심과 즐거움의 중요성을 강조함.
     * 파인만의 경험은 연구자들에게 중요한 발견이 때로는 비공식적이고 자유로운 탐구에서 비롯될 수 있음을 일깨워줌.
     * 이 이야기는 학문적 업적을 추구하는 과정에서 개인적인 흥미와 만족을 찾는 것이 얼마나 중요한지를 상기시켜주는 흥미로운 사례임.

        Hacker News 의견

     * 연구자로서 최근 타는 듯한 열정으로 시작한 프로젝트에 대한 관심이 식어가는 것을 느낌. 안정적인 연구 기관의 직위가 없어 번아웃을 이겨낼 수 있는 여건이 부족함. 연구 생활을 떠나 일반적인 직업을 찾아보려 했으나, 다른 일에 대한 열정이 없고, 번아웃이 취미 등 생활의 여러 면에 영향을 미쳐 근본적인 문제인지 확신할 수 없음. 치료와 약물도 큰 도움이 되지 않아 현재 무엇을 해야 할지 막막함.
     * 공동 창업한 스타트업을 떠난 후 심각한 번아웃을 경험함. 충분한 저축이 있어 세계 여행을 다니며 암벽 등반 실력을 키움. 코딩을 몇 줄 하기도 힘들어 해변에서 파도를 바라보며 시간을 보냄. 여행에서 돌아온 후 새로운 프로젝트에 의미를 부여하고 완성하는 데 어려움을 겪음. Lifx 스마트 전구를 재프로그래밍하는 것이 첫 완성 프로젝트였음. 지역 네트워크를 통해 직접 조명을 제어할 수 있는 이진 프로토콜을 발견하고 TypeScript 라이브러리를 개발하여 사용자 정의 웹 인터페이스를 구축함. 이 경험을 통해 첫 컨설팅 고객을 얻고 다양한 작업 기회를 찾아 새로운 회사를 창업함. 때로는 앉아서 놀아보는 것이 필요함을 강조.
     * 영감을 주는 이야기지만, 요약하자면 1) 어떤 것에 능숙해지기, 2) 그 일로 돈 벌기, 3) 그 일로 인한 번아웃 경험하기, 4) 재미있게 일하는 방식으로 돌아가기, 5) ???, 6) 노벨상이나 비슷한 상 수상하기임. 이러한 패턴이 반복 가능한지, 다음 세대에게 가르치고 싶은 패턴인지에 대한 질문 제기.
     * 정신 건강 전문가는 아니지만, 자신에게 부담을 줄이는 것이 어떤 상황에서도 좋은 조언임. 피곤하거나 스트레스를 받을 때 '번아웃된 사람'이라고 자신을 규정하는 것은 부담만 더할 뿐임. 혼자 해결할 수 없다면 전문가의 도움을 청하는 것이 좋은 생각임.
     * 리처드 파인만이 ADHD를 가지고 있었을 것이라는 추측. 그는 자신이 해야 한다고 생각하는 일에는 관심을 보이지 않았지만, 욕망에 이끌렸을 때 뛰어난 결과를 달성함. 그의 전기에서는 인생에서 놀이를 통해 얻은 즐거움을 여러 차례 보여줌. 또한, 그가 빠르게 배울 수 있는 능력을 가지고 있었기 때문에 다른 사람들이 그가 배울 수 없을 것이라고 믿었던 주제에 대해서도 배울 수 있었음.
     * 소프트웨어에 대한 열정이 사라져 더 이상 재미를 느끼지 못함. 무의미한 일, 예를 들어 자신만의 웨이랜드 컴포지터를 만드는 것과 같은 일을 해야 할 필요성을 느낌.
     * 어릴 적부터 '도구적' 사고방식을 가지고 있었음. 시험에 합격하고 좋은 직업을 얻기 위해 무엇인가를 해야 한다는 생각이 지배적임. 20대 초반에 잠시 '놀이'하는 느낌을 경험했지만, 생산성에 대한 압박이 다시 시작되기 전까지 오래가지 않음. 심지어 휴식조차도 더 많은 일을 하기 위한 정신적 재충전, 더 많이 들기 위한 근육 회복 등의 목적을 가짐.
     * 어린 시절부터 시작된 호기심과 놀이의 중요성을 강조. 지역 장난감 가게 주인과의 대화에서, 그녀가 과거 군사 계약자를 위한 코드를 작성했던 경험을 공유하며, 문제를 '놀이'로 바라보는 것이 필요하다는 희망을 얻음. 파인만도 이러한 접근 방식에 동의할 것임을 행복하게 생각함.
     * 'Surely You're Joking, Mr. Feynman'이라는 책이 매우 흥미로운 독서 경험을 제공함.
     * 파인만에 관한 추가 자료로, 그의 노벨상 야망, 번아웃을 느끼며 더 이상 아무것도 이룰 수 없다고 생각했던 순간들에 대한 링크를 제공함.
"
"https://news.hada.io/topic?id=12821","Wallabag - 셀프호스트 가능한 기사 저장소 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Wallabag - 셀프호스트 가능한 기사 저장소 오픈소스

     * Pocket과 비슷한 기능을 하는 오픈소스 대체제
     * URL을 저장하면 광고/팝업등을 제거하고 콘텐츠만 추출해서 나중에 편하게 읽기 가능
     * 웹/안드로이드/iOS/브라우저 확장 제공
     * Pocket/Readability/Instapaper/Pinboard 에서 Import 가능
     * 다양한 피드 어그리게이터/RSS 리더 등이 지원 : Miniflux, Vienna RSS, FreshRSS, Tiny Tiny RSS, Leed, Communique, Fiery Feeds
     * API 제공으로 확장 가능
          + Kobo/Kindle 에서 Wallabag의 내용을 읽는 비공식 리더앱들도 있음
"
"https://news.hada.io/topic?id=12774","내 비행기가 737 MAX인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           내 비행기가 737 MAX인가?

비행기가 737 MAX인지 확인하는 방법

     * 특정한 비행 번호를 가진 가장 가까운 비행기(실시간, 예정, 착륙 완료)를 확인할 수 있음.
     * 스케줄 변경과 장비 교체가 자주 발생하므로, 최신 항공기 유형을 확인하기 위해 예약을 다시 확인하는 것이 중요함.

나에 대하여

     * 커피를 사주는 것으로 나를 지원할 수 있음.

GN⁺의 의견

     * 이 글은 승객들이 자신이 탑승할 비행기가 737 MAX인지 확인하는 방법에 대해 설명하고 있음. 이는 최근 몇 년간 737 MAX와 관련된 안전 문제로 인해 많은 승객들이 해당 기종에 대한 정보를 원하기 때문에 중요함.
     * 글은 스케줄 변경과 장비 교체가 흔하다는 점을 강조하며, 승객들이 최신 정보를 얻기 위해 자신의 예약을 재확인해야 한다고 조언함.
     * 이 정보는 항공 여행을 계획하는 사람들에게 유용하며, 특히 안전에 민감한 승객들에게 도움이 될 수 있음. 또한, 항공사의 투명성과 승객의 안전에 대한 관심을 반영하는 내용으로, 항공 여행의 안전성에 대한 대중의 인식을 높이는 데 기여할 수 있음.

        Hacker News 의견

     * 항공 안전에 대한 관심과 행동 촉구
          + 분노를 느끼고 행동하고 싶다면, 당신 지역의 선출된 의원들이 상원 항공 안전, 운영 및 혁신 소위원회나 하원 항공 소위원회에 속해 있는지 확인해야 함.
          + 해당하지 않는 경우, 상원 상업, 과학 및 교통위원회나 하원 교통 및 인프라 위원회에 연락할 수 있음.
          + 이들의 워싱턴 D.C. 사무실에 전화하거나 문제와 관련된 우려를 담아 의견을 제출할 것을 권장함.
          + 객관적이고 열정적이지 않은 태도로 문제를 제기하고, 확실한 해결책을 알지 못한다면 제안을 피해야 함.
          + 예산 협상이 양원에서 마무리되고 있는 이번 주가 이러한 행동을 취하기에 좋은 시기임.
     * 항공기 구매와 품질 관리에 대한 우려
          + 항공사들이 여전히 해당 항공기를 주문하는 것에 대해 의문을 제기함.
          + 고객뿐만 아니라 항공사들도 발을 통해 투표해야 하며, 품질 보증(QA) 과정에서 모든 나사와 볼트가 제대로 고정되어 있는지 확인하지 못하는 공급업체로부터는 구매하지 않아야 함.
          + 5천만 달러짜리 제품을 구매한 고객으로서 품질 보증에 조금의 투자도 하지 않은 공급업체에 대해 모욕감을 느낄 수 있음.
          + 737 MAX가 저렴하긴 하지만, 항공사의 명성에 끼치는 손상을 고려하면 결국 비싼 비용이 될 수 있음.
          + 보잉이 최근 몇 년 동안 겪은 품질 및 설계 문제와 언론의 주목을 고려할 때, 향후 몇 달 내에 더 많은 문제가 발견될 것으로 예상됨.
          + FAA가 여전히 개혁되지 않았고 적절한 인력과 자금을 갖추지 못한 것은 매우 미친 일임.
          + 미국용 음성 레코더가 2시간만 저장하는 반면, 국제 버전은 25시간을 저장하는 것에 대해 이해할 수 없음.
     * 항공편 정보 확인 방법
          + 가장 신뢰할 수 있는 정보는 Flightaware나 Flightradar 24에서 항공편 번호를 조회하는 것이며, 실제 항공편 계획 데이터를 사용하므로 마지막 순간의 항공기 변경 사항을 고려함.
     * 보잉의 문제에 대한 우려
          + 이러한 문제가 실제로 우려되는 상황이라는 사실이 보잉의 문제의 심각성을 보여줌.
     * 항공편 정보의 정확성에 대한 의문
          + 예정된 몇몇 항공편을 확인한 결과, United 항공편이 MAX가 아니라고 표시되었지만 실제로는 MAX라고 United가 알려줌.
          + Southwest 항공편이 MAX라고 표시되었지만 실제로는 그렇지 않음.
     * 737 MAX 운항 상황에 대한 혼란
          + 최근 보잉 사건 이후 United 항공편을 예약했으나, 737 MAX 9에 탑승하게 될 것으로 확인됨.
          + 모든 737 MAX가 운항 중단된 것으로 알고 있었으나, 취소될 항공편에 탑승하게 될지 혼란스러움.
     * 737 MAX의 안전성에 대한 질문
          + 737 MAX를 타고 공항으로 가는 것이 차를 운전하는 것보다 덜 안전한지, 이 사건이 통계적으로 유의미한지 궁금함.
     * 항공기 제조사에 대한 오해
          + 많은 사람들이 모르지만, 이 항공기의 기체는 보잉이 아닌 Spirit AeroSystems에서 제작하며, Airbus 부품도 만듦.
          + 조사가 끝나기 전까지 누구를 비난해야 할지 확실하지 않음.
     * 개인적인 보잉 항공기 회피 의사 표명
          + 몇 달 전 다른 스레드에서 MAX에 대해 언급했을 때 비판을 받았지만, 개인적으로 737 MAX를 타지 않고 보잉 항공기를 피하는 입장을 고수함.
          + 통계를 이해하지만 비행을 본래 싫어하며, 이번 사건은 도움이 되지 않음.
     * 항공 사고에 대한 풍자적 묘사
          + 항공 산업의 안전 통계와 자동차 운전보다 비행이 기술적으로 더 안전하다는 점을 강조하며, 추락하는 비행기 안에서 승무원에게 강의를 하는 Hacker News의 정기 사용자 F.A.의 비행기 추락 사고에 대한 풍자적 묘사.
"
"https://news.hada.io/topic?id=12813","드로잉.가든(Drawing.garden)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         드로잉.가든(Drawing.garden)

        Hacker News 의견

     * 대부분의 사람들에게 이 프로젝트는 매우 진정 작용을 하지만, 소수의 사람들은 그 존재 이유나 목적을 이해하지 못해 불안감을 느낌.
     * 프로젝트의 내부를 살펴보니 p5.js 스케치를 사용함. 이는 예술가, 디자이너, 교육자, 초보자 등을 위해 코딩을 접근 가능하고 포괄적으로 만들기 위한 자바스크립트 라이브러리임.
     * 모든 것을 채우는 데 시간이 걸렸으며, 특별한 일은 일어나지 않음. 개발 아이디어로는 꿀벌이 꽃을 찾아가고, 거미가 그물을 치고, 토끼가 당근을 쫓는 등의 상호작용을 추가할 수 있음.
     * 프로젝트의 출처는 Ben Moren의 웹사이트임.
     * 한 칸을 항상 비워두는 것은 어떨까 제안함. 프로젝트를 완성하면 무언가 일어날 것으로 기대했지만 그렇지 않음.
     * macOS의 Safari에서는 페이지 어디든 클릭해야 소리가 나옴. 마우스를 올려놓기만 해서는 소리가 나지 않음.
     * 모든 필드를 채우면 멋진 효과가 나타남.
     * 인접 타일이 특정 생물의 출현 확률에 영향을 주는지 궁금함. 처음에는 생물이 없었지만, 그 후 개미, 쥐, 비둘기, 거미, 고슴도치 등이 나타나기 시작함.
     * 클로버 지역은 네잎 클로버의 출현을 증가시키는 것 같음. 하지만 코드를 살펴본 결과 그렇지 않은 것으로 확인됨.
     * 이 경험이 편안함에도 불구하고, 이모지와 생물을 제어하기 위한 간단한 코드를 작성하고 싶은 충동을 느낌.
     * 프로젝트가 정말 멋지며, 현재 이모지로 변경되는 파비콘도 주목할 만한 작은 디테일임.
"
"https://news.hada.io/topic?id=12830","Show GN: 경량 가상돔 라이브러리 lithent","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 경량 가상돔 라이브러리 lithent

   예전에 제가 취미로 만든 가상돔 라이브러리를 여기에도 소개한적이 있었는데요. 그 이후로도 계속 버그수정이나 기능 추가를 하고 놀았습니다 :)

   최근 제가 처음 생각했던 부분까지 만든 기념으로 ""전체기능 설명서"" 를 작성해 봤습니다. 재미로 봐주세요.

   ""가상돔 라이브러리 Lithent 전체 기능 설명서""

   https://medium.com/@superlucky84/…
"
"https://news.hada.io/topic?id=12798","Container2Wasm - 컨테이너를 WASM에서 실행할수 있게 변환해주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Container2Wasm - 컨테이너를 WASM에서 실행할수 있게 변환해주는 도구

     * 컨테이너 이미지를 Bochs(x86_64), TinyEMU(riscv64) 에뮬레이션을 이용하여 WASM에서 실행가능하게 변환
     * WASI 런타임 들에서 실행 가능(wasmtime, wamr, wasmer, wasmedge, wazero)
     * 브라우저에서도 실행 가능
     * x86/riscv64 컨테이너를 추천. arm64도 동작은 하지만 느림
     * 데모로 Ubuntu 22 이미지를 변환해서 브라우저에서 실행
"
"https://news.hada.io/topic?id=12846","클라우드플레어 직원이 HR과의 해고 통보 전화를 게시하여 화제가 된 [영상]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               클라우드플레어 직원이 HR과의 해고 통보 전화를 게시하여 화제가 된 [영상]

TikTok 사용자의 해고 경험 공유

     * TikTok 사용자 Brittany Pietsch가 해고 직전의 순간을 촬영하여 공유함.
     * 해당 영상에서 Pietsch는 해고가 임박했음을 알고 있었으며, 이를 영상으로 남김으로써 그 경험이 실제로 충격적이었다고 표현함.
     * 영상에는 해고, 기술 산업, 기업 문화와 관련된 해시태그가 포함되어 있음.

GN⁺의 의견

     * 이 기사는 TikTok이 단순한 엔터테인먼트 플랫폼을 넘어 사용자들의 개인적인 경험과 감정을 공유하는 공간으로 활용될 수 있음을 보여줌.
     * Brittany Pietsch의 영상은 기술 산업 내에서 발생하는 해고와 같은 현실적인 문제에 대한 인식을 높이는 데 기여할 수 있음.
     * 이러한 개인적인 이야기 공유는 다른 이들에게 위로와 연대감을 제공하며, 사회적 이슈에 대한 대화를 촉진하는 중요한 역할을 할 수 있음.

        Hacker News 의견

     * 브리타니가 화난 이유를 이해함: Cloudflare가 이 상황을 최악으로 다루고 있는 것 같음. 그러나 HR 담당자 두 명이 유의미한 말을 할 것 같지 않음.

     브리타니의 상황에 대한 판단을 하고 싶지 않지만, 그녀가 받아야 했던 전화는 곤란한 상황임. 이 상황에서 내 조언은 ""내 성과에 대한 평가에 동의하지 않지만, 고용 해지를 이해한다. 퇴직금과 노트북 반납에 대해 어떤 절차를 밟아야 하는지 알려달라""고 말하는 것이며, 그 후 전통대로 낮술을 마시러 가는 것임.
     * 상위 댓글 중 일부에서 표현된 판단적 태도에 반감을 느낌. 적어도 미국에서는 노동자들이 예의를 지켜야 한다고 사회화되어 있지만, 기업들은 무슨 짓을 해도 용납됨.

     여기서 한 노동자가 분명히 잘못 대우받고 있고, 몇몇 HR 담당자들은 이 모든 것이 평범한 15분 회의처럼 진행되기를 원함. 어차피 퇴직금과 장비 반납 정보를 이메일로 보낼 것임. 이런 기회를 이용해 그들이 불편함을 느끼게 하는 것이 좋음. 브리트의 경우, 그들은 그녀를 알지도 못했으므로 추천서를 요청할 일도 없음.
     * 노동조합의 필요성을 강조함.

     때때로 해고는 불가피하지만, 올바른 사람들이 올바른 이유(성과 기반, 자발적, 특정 그룹 보호, 공정성 보장 등)로 선택되어야 함. 이를 위해서는 기준을 평가하고 변경할 수 있는 대표자들의 집단 협상과 영향을 받는 사람들에게 더 나은 결과를 협상할 수 있는 능력이 필요함.
     * Cloudflare의 비겁한 태도를 지적함: 담당 매니저조차 전화에 참여하지 않았고, 개인 성과 문제라고 주장했지만, 누르면 실제로는 전체 부서가 해고되고 있음. 나쁜 인상을 줌.
     * 개인적으로 회사에 대한 위키 페이지를 가지고 있으며, 흥미로운 HN 게시물, 제품에 대한 노트, 채용 상호작용 기록 등을 한 페이지에 기록함.

     채용 담당자와 이야기할 때 이 회사의 위키 페이지를 열면, 첫 데이트에서 웨이터에게 무례한 사람처럼, 당신에게는 미소를 지으면서 실제로는 어떤 모습인지에 대한 강력한 신호를 줌. 이 경우에는 절대로 신경 쓰지 않고, 즉시 당신을 버릴 준비가 되어 있는 전형적인 대기업-관료적 드론 회사임. 카프카적인 방식으로 당신을 비난하면서, 나가는 길에 당신을 더욱 스트레스 받게 하고, 구직 활동, 실업 보험, 건강에 방해가 됨.
     * 7.5년간 근무한 회사에서 비슷한 상황을 겪음. 지속적으로 좋은 피드백과 승진을 받았지만, 내 직책이 없어졌다는 거짓말을 들었음. 실제로는 같은 직책(Staff Engineer)에 대한 공개 채용 공고가 있었음. 아무런 경고나 설명 없이 오전 8시에 회사 시스템 접근이 차단됨. 한 번 우연히 만난 HR 담당자로부터 비슷한 냉정한 전화를 받음. 매니저나 디렉터의 관여 없이, 사후에 LinkedIn을 통해 사과하는 메시지를 받음. 수년간 알고 지낸 동료들과 작별 인사도 못한 것은 정서적으로 트라우마였음. 이것이 기업 생활임.
     * Cloudflare가 이 상황을 끔찍하게 다룸. CEO는 소셜 미디어에 능숙함. 현명하다면, 이 상황을 직접 다루고 사과하는 것이 좋음. 브리타니가 그것을 녹화한 것은 아마도 최선의 조치는 아니었지만, 성과 문제로 해고된 후 몇 초 뒤에 그것이 전혀 이유가 아니었다는 것이 밝혀진 것도 마찬가지임. 어떤 합리적인 사람이나 미래의 Cloudflare 직원도 화를 낼 것임.
     * HR이 성과 기반으로 해고를 시작한 이유는 무엇인가? 이것이 분명히 해고의 일부인데, 특히 그들이 세부 사항을 전혀 가지고 있지 않은 상황에서 말이 안됨. 누군가 이유를 물었을 때 모든 것을 더 나쁜 대화로 만들 준비만 한 것임. 이것은 상호 공감을 전혀 느낄 수 없게 만듦.

     이것을 전달자의 잘못으로 보지 않음. 이것은 회사 리더십과/또는 문화의 반영으로 봄. 내 인생에서 여러 번의 해고를 경험했지만(양쪽 모두에서), 놀랍게도 단 한 번만 잘못되었고, 그것은 리더십의 역사적 행동의 명확한 반영이었음. 그래서 이것이 Cloudflare 리더십의 문제라고 생각하는 쪽으로 기울고 있음.
     * HR과의 개인적인 대화를 TikTok에 올리는 것은 그녀의 구직 활동에 도움이 되지 않을 것임. 잠재적인 고용주들은 이러한 행동을 경고 신호로 볼 수 있음... 게다가 HR 담당자들이 캘리포니아에 있을 가능성이 높고, 캘리포니아는 ""양 당사자 동의"" 주이므로 불법일 수도 있음.
     * 그 전화에 있던 두 사람도... 그들도 그저 자신의 일을 하고 있을 뿐임. 그들과 실제로 논쟁하는 것이 무슨 의미인지 이해할 수 없음. 그들이 할 수 있는 것이나 바꿀 수 있는 것은 없음.

     그리고 예, 브리타니는 하루 동안 인터넷 유명인사가 될 것임. 하지만 많은 사람들이 이 비디오를 보고 다음 면접 루프에서 그녀를 알아볼 것임. 이 상황에 대한 최선의 해결책은 아님. 이것을 보는 것은 슬프고, 이런 어려운 시기를 겪고 있는 모든 사람에게 미안함을 느낌.
"
"https://news.hada.io/topic?id=12871","스콧 갤러웨이의 2024년 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           스콧 갤러웨이의 2024년 예상

미국 인플레이션, 연준 목표치(2.5%) 이하로 하락

     * 지난해 Bloomberg 경제 모델은 경기 침체 확률을 100%로 예측했음.
     * Prof G에서는 인플레이션이 가속화 된만큼 급격히 감소할 것으로 예상했음.
     * 현대 경제에서 지속적인 인플레이션은 발생하지 않으며, AI 기술이 물가 하락에 기여할 것으로 보임.
     * 1년 남짓 만에 인플레이션은 9%에서 3%로 떨어졌음

주택 판매 호황

     * 이자율 상승이 주택 시장에 영향을 미침.
     * 주택 가격 상승과 가계 소득 증가율 불일치로 인해 주택 소유가 어려워짐.
     * 이자율 감소와 수요 증가로 인해 2024년에 주택 판매량이 증가할 것으로 예상됨.

파라마운트 합병, 디즈니 통합자

     * 워너 브라더스 디스커버리(WBD)와 파라마운트가 합병을 논의중.
     * 스트리밍 서비스 시장에서의 합병과 인수가 계속될 것으로 예상됨.
     * WBD, Netflix, Disney 등이 인수할 스트리밍 서비스들을 살펴 볼 것.
     * 스트리밍 서비스의 생존 가능성은 규모에 달려 있으며, 넷플릭스는 가격 인상을 통해 시장 동향을 가속화함.

2개의 주식 추천: 스트리밍 뒤처진 기업들

     * 매년 주식을 고르는데, 나쁜생각이지만 재미있음
     * 작년엔 AirBnb, Meta, 중국 인터넷 주식을 골랐는데, 각각 60%, 180%, -15% 상승했음
     * 올해는 디즈니(DIS)와 워너 브라더스 디스커버리(WBD)가 저평가된 자산으로 보임
     * 기술 분야가 너무 고평가되어 있음. Tech 분야 P/E 멀티플은 1999/2007년과 너무 비슷해 보임
     * DIS 와 WBD 는 현재 주가가 낮아 10년 최저치임.
     * 디즈니의 EBITDA 배수는 16.3으로 지난 5년 평균인 34보다 훨씬 낮음.
     * 또한 WBD는 느리지만 확실히 부채를 상환하고 있음.
     * 올해 대통령 선거가 있어서 광고 매출 증가가 예상됨.
     * 디즈니는 NFLX 및 WBD와 경쟁할 수 있을 만큼 충분히 차별화된(가족 친화적인 방향과 고유한 IP로) 테마파크 사업과 스트리밍 네트워크라는 독특한 해자로부터 이익을 얻음

틱톡, 넷플릭스와 스포티파이에 도전

     * 한쪽 문을 닫으면 다음 문에 늑대가 나타남
     * 우리는 Netflix 대 Disney, Spotify 대 Apple Music 등 유사한 제품 간의 경쟁에 초점을 맞추는 경향이 있음
     * 그러나 엔터테인먼트는 하나의 시장 이자 주목을(Attention)을 끌기 위한 경쟁 시장임
     * 딱 하나의 플랫폼이 상품 수확에 있어서 다른 모든 플랫폼보다 앞서 있음: TikTok
     * 틱톡은 OpenAI 이전까지 역사상 가장 우세한 플랫폼이었음
     * 2024년엔 틱톡이 스트리밍 서비스 시장에서 점유율을 늘릴 것으로 예상됨.

AI의 정점

     * 작년에 우리는 AI가 올해의 기술이 될 것이라 말했음.
     * AI에 대한 버블은 터지지 않겠지만, 투자 과열로 인해 수축할 것으로 보임.
     * AI 기술은 여전히 가치를 창출할 것이나, 이미 주식 시장에 반영되어 있음.
          + 2023년 주식 상승의 대부분을 주도한 7개 회사(Microsoft, Alphabet, Apple, Tesla, Amazon, Meta 및 새로 합류한 Nvidia)의 주식에 이미 반영되어 있음
          + 시장은 영감을 얻기 위해 다른 곳을 찾아야 할 것
     * S&P 500 실적 발표에서 AI 언급 비율이 35%에서 29%로 감소하면서 우리는 이미 기업 홍보에서 이를 목격하고 있음. 그 숫자가 더 낮아질 것

빅테크 주식 추천: 알파벳

     * 작년에 우리는 Meta가 다른 Big Tech 주식을 능가할 것이라고 추측
     * 올해 우리는 그것이 알파벳이 될 것이라고 믿음
     * 알파벳이 대형 언어 모델을 활용하여 이메일, 검색 습관, 유튜브 시청을 통해 생활을 더 효율적이고 즐겁게 만들 것으로 예상됨.
     * OpenAI는 ""스타워즈""이고 알파벳은 ""제국의 역습 ""

올해의 기술: GLP-1

     * 2023년이 GPT-4의 해라면 2024년은 GLP-1의 해가 될 것.
          + Ozempic, Mounjaro, 및 모든 GLP-1 관련 체중 감량 기술
     * GLP-1 기술은 큰 시장을 가지고 있으며, 비만과 관련된 비용이 막대함.
          + 미국 인구의 70% 이상이 비만 또는 과체중
          + 비만 유병률은 지난 50년 동안 3배나 증가 했으며, 간접 비용과 생산성 손실을 포함하여 미국에서 비만으로 인한 비용은 1조 7천억 달러
     * GLP-1 처방이 증가하면서 비용이 감소하고 접근성이 확대될 것으로 예상됨.
     * 소비자가 소비를 줄임에 따라 맥도날드와 펩시를 포함한 패스트푸드 회사도 영향을 받게 될 것.
     * 미국이 더 날씬해지고 당뇨병 환자가 적다면 어떤 모습일까?

인도는 새로운 중국

     * 2023년 인도가 세계에서 가장 인구가 많은 국가가 되었으며, 2024년은 경제적으로도 성장할 것으로 예상됨.
     * 인도는 인프라에 투자 하고 외국인 투자를 유치하고 있는 반면, 중국은 항공모함에 투자 하고 청년 실업과 부문 붕괴에 대처하기 위해 시선을 내부로 돌리고 있음.

지정학: 미-중 관계 해빙

     * 중국이 외국 자본 유출을 막기 위해 벼랑끝 전술을 누그러뜨락ㅎ 대립을 줄일 것으로 예상됨.
     * 중국 경제는 수 세대에 걸쳐 가장 심각한 상황에 처해 있으며 효능이 입증된 유일한 치료법은 현지 제조업을 통해 유입되는 외국인 투자
     * 결국 중국은 막대한 부채를 들이지 않고 자국 시장을 위한 주택과 고급 자동차를 만드는 방법을 찾아야 할 것

지정학: 사우디아라비아와 이스라엘 관계 정상화

     * 사우디아라비아가 이스라엘과의 관계를 정상화할 것으로 예상됨.
     * 사우디아라비아는 이슬람주의에서 자본주의로 선회중.
     * 사우디아라비아는 석유 의존도를 줄이고 지역에서의 영향력을 확대하려고 함.

머스크, 트위터 통제권 상실(또는 매각)

     * 머스크가 트위터를 매각하거나 통제권을 잃을 것으로 예상됨.
     * 머스크의 부는 주로 Tesla와 SpaceX에 묶여 있으며, 그는 이 회사 둘은 매각하고 싶지 않음
     * 트위터는 여전히 비용이 많이 드는 취미이며, 머스크는 광고주를 잃어가고 있음.

메타의 2024 성장 수단: WhatsApp

     * Facebook과 Instagram은 여전히 ​​거대하고 수익성이 높은 기업이지만 Big Tech 가치 평가를 주도하는 것은 성장이기 때문에 우리는 이들에 대해 많이 이야기하지 않음
     * Meta는 수년 동안 세 번째 말을 헛간에 보관해왔음. 바로 왓츠앱
     * 왓츠앱은 30억 사용자를 보유하고 있으며, 메타가 이를 통해 수익을 창출할 것으로 예상됨.

정치 예측: 바이든 재선, 트럼프 유죄 판결

     * 바이든이 재선될 것이며, 트럼프는 미국에 대한 범죄로 유죄 판결을 받을 것으로 예상됨.
          + 연방 중범죄로 기소된 피고인은 재판에서 감옥을 피할 확률이 30%에 불과함
          + 세번 다 이기려면 2.7% 확률(30% * 30% * 30%)
     * 2024년에 우리는 ""노인을 강탈하려는 범죄의 시도를 지켜보는 리얼리티 쇼""와 ""플레이어가 대통령으로 당선된 후까지 법원 사건을 연기하여 자신을 용서할 수 있도록 하는 게임 쇼"" 사이에서 채널을 서핑하게 될 것
          + ""맙소사, 지금 우린 정말 엉망인것 같아요""

     Meta는 수년 동안 세 번째 말을 헛간에 보관해왔음. 바로 왓츠앱

   그러게요 지금까지 쟁여두고 뭐 했는지. 유독 발전이 없었죠.

   Scott Galloway의 뉴스레터 No Mercy / No Malice ( 자비 없음 / 악의 없음 )

   팟캐스트 Prof G 와 Pivot - Recode의 Kara Swisher 와 함께
"
"https://news.hada.io/topic?id=12762","What PWA Can Do Today - 오늘 현재 PWA로 할 수 있는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              What PWA Can Do Today - 오늘 현재 PWA로 할 수 있는 것

지금 사용 가능한 PWA 기능들

     * PWA(Progressive Web App)는 장치에 설치할 수 있으며 앱과 같은 경험을 제공하는 웹사이트임
     * 이 앱은 PWA로, 모바일 장치나 데스크톱 홈스크린에 설치 가능함
     * 설치 후 아래 기능 데모를 확인하여 장치에서 지원되는 기능을 볼 수 있음

기능들

     * 미디어 캡처: 웹 앱이 장치의 카메라와 마이크를 사용할 수 있음.
     * 지오로케이션: 사용자가 웹 앱과 위치를 공유할 수 있음.
     * 알림: 앱이 활성화되지 않았을 때도 웹 앱이 알림을 표시할 수 있음.
     * 연락처 선택: 사용자의 연락처를 선택할 수 있음.
     * 웹 공유: 장치의 기본 공유 메커니즘을 호출하고 텍스트, URL 또는 파일을 공유할 수 있음.
     * 인증: 지문 인식기나 외부 USB 보안 키를 통한 비밀번호 없는 인증을 가능하게 함.
     * 파일 시스템: 사용자 장치의 파일 시스템에 접근할 수 있음.
     * 바코드 감지: 이미지에서 바코드와 QR 코드를 감지할 수 있음.
     * 얼굴 감지: 이미지에서 얼굴을 감지할 수 있음.
     * 진동: 모바일 장치를 진동시킬 수 있음.
     * 오디오 녹음: 오디오를 녹음하고 시각화할 수 있음.
     * 오디오: 장치의 잠금 화면에서 미디어 재생 제어를 표시할 수 있음.
     * 백그라운드 동기화: 오프라인일 때 작업을 연기하여 네트워크 연결이 복원될 때 실행할 수 있음.
     * 백그라운드 패치: 앱이 실행되지 않을 때도 대용량 파일을 백그라운드에서 다운로드할 수 있음.
     * 캡처 핸들: 화면 캡처 웹 앱이 캡처된 웹 앱과 신뢰성 있게 통신할 수 있음.
     * 저장소 API: 웹 앱이 사용자의 브라우저에 구조화된 데이터를 지속적으로 저장할 수 있음.
     * 블루투스: 웹 앱이 BLE 장치에 연결하고 값을 읽거나 쓸 수 있음.
     * NFC: 웹 앱이 NFC 태그를 읽고 쓸 수 있음.
     * 증강 현실/가상 현실: 가상 객체를 현실에 배치할 수 있음.
     * 결제: 웹에서 신용카드, Apple Pay 또는 Google Pay를 사용하여 결제를 할 수 있음.
     * 웨이크 락: 앱이 계속 실행되어야 할 때 화면이 어두워지거나 잠기는 것을 방지할 수 있음.
     * 방향: 사용자 장치의 물리적 방향에 대한 정보를 제공함.
     * 모션: 사용자 장치의 위치와 방향의 변화 속도에 대한 정보를 제공함.
     * 네트워크 정보: 장치의 연결에 대한 정보를 제공하여 웹 앱이 네트워크 품질에 따라 기능을 조정할 수 있음.
     * 음성 합성: 텍스트를 음성으로 변환하고 프로그램이 텍스트 내용을 읽을 수 있게 함.
     * 음성 인식: 음성 입력에서 음성 컨텍스트를 인식할 수 있음.
     * 멀티 터치: 복잡한 터치 동작을 캡처할 수 있음.

센서 활성화 방법

     * 장치에서 모션 센서를 사용할 수 없을 때 이를 활성화하는 방법.
     * iOS: iOS 12에만 적용. 변경 사항이 적용되려면 앱을 홈 스크린에서 제거하고 다시 추가해야 할 수 있음.
     * Android: 안드로이드용 크롬 브라우저에서 이 사이트를 열고, 메인 메뉴에서 '모션 센서'를 탭하여 활성화할 수 있음.

GN⁺의 의견

     * PWA는 사용자에게 네이티브 앱과 유사한 경험을 제공하면서도 웹 기술을 사용하여 더 넓은 접근성과 호환성을 제공하는 혁신적인 기술임.
     * 이 기사는 다양한 PWA 기능들을 소개하며, 특히 미디어 캡처, 지오로케이션, 백그라운드 동기화 등은 모바일 사용자 경험을 크게 향상시킬 수 있는 중요한 기능들임.
     * 센서 활성화 방법을 제공함으로써, 사용자가 자신의 장치에서 PWA의 모든 기능을 최대한 활용할 수 있도록 돕는 유용한 정보를 제공함.

   PWA가 모바일 스토어 시장을 바꿀 날이 너무 기대됩니다!

   url scheme를 지원하면 더 좋을 것 같은데 ㅎㅎ..아쉽

        Hacker News 의견

     * 한 사용자는 자신들이 고객을 위해 Microsoft InTune을 통해 iPad와 Surface Go 장치에 PWA(Progressive Web Apps)를 배포하고 있으며, 2020년경에는 악몽과 같았지만 지금은 훨씬 원활하다고 언급함. 한 고객이 iPad에서 Surface Go로 전환하고 추가적인 엔드포인트 관리를 사용하여 PWA 경험을 키오스크 모드와 같게 만든 개선된 프로세스를 제안했다고 함. 이들에게 가장 큰 제약은 환경을 향한 카메라의 품질과 브라우저를 통한 카메라 기능에 대한 접근 수준이었으며, iOS/Safari는 초기에 매우 약했지만 현재는 상당히 좋아졌다고 함. 이제는 Safari를 통해 iPad 후면 카메라로 2k 환경 스캔을 30fps로 얻을 수 있으며, 2D 바코드 스캔과 문서 캡처가 100% 실행 가능하다고 함. 이러한 기능들은 과거에는 제품 데모 시 매우 불안했지만 이제는 걱정하지 않는다고 함. 카메라 문제로 인해
       네이티브 iOS 앱으로 돌아갈 뻔했지만, 그렇지 않은 100% Microsoft 환경에서 네이티브 빌드 체인을 유지하는 것이 큰 부담이었다고 함. 과거에는 고객을 위해 반세기 동안 엔터프라이즈 IPA를 서명했지만, 이제는 웹/PWA로 전환했으며, 웹이 사라진다면 다른 경력과 취미를 찾을 것이라고 단언함.
     * 다른 사용자는 PWA의 핵심 목적이 크로스 플랫폼 앱을 제공하는 것이므로, 어떤 기능이 iOS와 Android에서 ""보편적""으로 지원되는지 웹사이트가 눈에 띄게 표시하지 않는 것이 유감이라고 언급함. 만약 기능이 모든/대부분의 플랫폼에서 사용할 수 없다면, PWA에서 정말 사용 가능하다고 말하는 것은 공정하지 않다고 주장함.
     * 또 다른 사용자는 PWA의 데모 사이트조차 iOS에서 눈에 띄는 UX 버그가 있다고 지적함. 화면의 양쪽에서 스와이프하여 뒤로/앞으로 이동할 때 중복 애니메이션이 발생하는 문제를 언급함. 이 문제를 해결하는 것은 페이지의 슬라이드 애니메이션을 비활성화하는 것이 간단할 수 있지만, 사이트 제작자가 이를 인지하지 못하거나 신경 쓰지 않았다고 함. Apple에도 일부 책임이 있으며, 이상적으로는 네이티브 스와이프 제스처를 감지하고 사용자 정의할 수 있는 더 목적에 맞는 인터페이스가 있어야 한다고 주장함.
     * 해커뉴스 커뮤니티의 일부 사용자들이 마치 사이트 제작자가 댓글을 볼 것이 확실하지 않은 것처럼 무례한 비판을 남기는 것에 대해 한 사용자가 비판함. 창작물을 세상에 내놓는 것에 대한 비판을 받아들이는 것이 필요할 수 있지만, 이 커뮤니티 외부의 사람들이 자신들의 작업이 여기서 공유되는 것을 싫어하거나 적어도 댓글을 읽지 않기를 거부하는 이유라고 언급함.
     * 한 사용자는 Firefox 데스크톱이 PWA를 지원하는 브라우저에 합류하기를 바란다고 언급함. 그들은 PWA를 우선적으로 구축하는 앱을 만들고 있지만, 이는 일반적으로 사용자가 Chrome 인스턴스를 실행해야 한다는 것을 의미한다고 함. Firefox가 PWA 통합을 Chrome보다 더 원활하게 만들면 앱을 추천할 이유가 될 것이라고 주장함.
     * 다른 사용자는 PWA 채택을 막는 주된 기술적 문제는 JS 프론트엔드 세계가 UX를 파괴하는 프론트엔드 프레임워크에 중독되어 있다는 것이라고 주장함. 또한 앱 스토어가 PWA가 결코 가질 수 없는 핵심 가치를 제공한다고 언급하며, 신뢰도가 특히 iOS 앱 스토어에서 더 강하다고 함.
     * 한 사용자는 이 사이트가 PWA의 가능성을 잘 보여주는 데모라면, 자신에게는 실패한 것 같다고 언급함. 로딩이 오래 걸리고, 원하지 않는 많은 기능/기능성을 가지고 있으며, 스와이프로 뒤로 가려고 하면 이중 탐색이 발생하는 등의 문제를 지적함.
     * 다른 사용자는 iOS에서 PWA가 공유 대상으로 등록될 수 있을 때까지 기다리겠다고 언급함. 웹 페이지에서 ""공유""를 클릭할 때 공유 시트에 앱으로 나타나는 기능을 원한다고 함.
     * 한 사용자는 GitHub 리포지토리에 소스 코드 없이 버그 트래커만 있는 것은 별로라고 언급하며, PWA를 진정으로 홍보하고 싶다면 전체 소스 코드를 제공해야 한다고 주장함.
     * 마지막으로 한 사용자는 데모 앱의 여러 기능이 iOS 17에서 작동하지 않는다고 언급하며, 이는 Apple이 원하는 방식이라고 비꼬았음. 반면, Eclipse Emulator PWA를 iOS에서 몇 일 동안 사용해보았고 매우 잘 작동한다고 함. 지금까지 겪은 유일한 문제는 SNES를 에뮬레이션할 때 소리가 끊기는 것이었다고 언급함.
"
"https://news.hada.io/topic?id=12763","엘릭서, 점진적 타입 시스템을 도입한 언어로 발전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      엘릭서, 점진적 타입 시스템을 도입한 언어로 발전

        Hacker News 의견

     * Jose에 대한 감사의 말
          + Jose에게 엘릭서(Elixir)와 커뮤니티를 위한 그의 노력에 대해 감사를 표함.
          + 언어와 커뮤니티에 대한 그의 세심함과 숙련성이 매우 높이 평가됨.
          + Jose의 안정성과 근면함을 보여주는 훌륭한 예시로, 일상의 행복에 큰 영향을 준 개인에게 감사함.
     * 점진적 타입 언어에 대한 관심
          + 점진적으로 타입이 지정되는 언어에 호감을 가지고 있으나, 여기에는 정보가 부족함.
          + 2022년 초에 발표된 논문 링크를 제공하며, 이 타입 시스템에 대한 더 많은 정보를 찾고 있음.
     * 엘릭서의 타입 부재에 대한 의견
          + 엘릭서에서 타입이 없는 것이 몇몇 사람들에게는 거부감을 줬음.
          + 언어가 거의 완성된 시점에 타입을 추가하는 것은 완벽한 타이밍임.
          + 동적 언어의 철학에 반한다고 느껴져서 루비에서는 Sorbet에 확신이 없었으나, 안전성을 높이는 추가적인 수단으로는 좋아함.
          + 엘릭서에서 타입 시스템을 올바르게 구현할 것이라는 데에 자신감을 표함.
     * Jose Valim과 Anders Hejlsberg에 대한 신뢰
          + 업계에서 타입 시스템을 올바르게 구현할 수 있다고 믿는 몇 안 되는 사람 중 하나가 Jose Valim임.
          + Anders Hejlsberg도 타입 시스템 구현에 있어 신뢰하는 인물임.
     * 엘릭서의 타입 시스템 추가에 대한 반응
          + 최근 회사를 옮겨 엘릭서를 사용하게 되었고, 타입스크립트(TypeScript)에서 누렸던 타입 언어의 이점을 많이 그리워함.
          + 프로젝트 어디에서나 데이터 모델에 접근할 수 있는 것이 엘릭서의 큰 장점임.
          + 이미 훌륭했던 엘릭서가 더욱 개선되어 매우 기쁘고, 이 작업에 참여한 팀에 축하를 전함.
     * 타입 시스템의 중요성
          + Phoenix와 이전의 RoR(Ruby on Rails)이 높은 생산성을 입증했지만, 타입과 런타임 오류 문제로 쉽게 문제가 발생할 수 있었음.
          + 타입은 런타임 오류의 많은 부분을 빌드 시간 오류로 전환시켜, 신뢰할 수 있는 소프트웨어 개발에 큰 이점을 제공함.
     * PHP의 점진적 타입 도입에서 배워야 할 점
          + PHP의 점진적 타입 도입이 매우 실용적이라고 생각하며, 이로부터 배워야 할 점이 있음을 희망함.
     * 루비 개발자들의 엘릭서 전환에 대한 의견
          + 루비에 이러한 노력이 내장되기를 바랐으며, 많은 루비 개발자들이 이제 엘릭서를 사용하고 있음.
          + 엘릭서가 놀라운 언어로 발전하고 있음을 지적함.
     * 엘릭서 팀과 Jose의 타입 시스템 도입에 대한 접근 방식
          + 엘릭서 팀과 특히 Jose의 강연을 봐야 함.
          + 그들은 타입 시스템을 도입하는 데 있어 매우 신중하고 세심하게 접근하고 있으며, 좋은 타입 시스템을 도입하려고 노력 중임.
"
"https://news.hada.io/topic?id=12809","Show GN: Typoon - 한글을 제대로 지원하는 텍스트 확장기(Text Expander)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: Typoon - 한글을 제대로 지원하는 텍스트 확장기(Text Expander)

  소개

   Typoon은 한글을 제대로 처리하도록 설계된 텍스트 확장기입니다. 글자의 조합이 완전히 끝나야지만 대치되도록 하거나, 대치된 텍스트의 마지막 글자를 조합 중인 상태로 남겨두는 등의 한글 전용 옵션이 지원됩니다.

    텍스트 확장기란?

   특정 텍스트를 감지해 다른 텍스트로 대치해주는 프로그램입니다. 갤럭시/아이폰에서는 '텍스트 대치'라는 이름으로 제공되는 기능이 있어 익숙하실 수 있겠습니다. 오타를 자동으로 수정하거나, 자주 쓰는 문장을 빠르게 작성할 때 유용하게 사용할 수 있습니다.

  한글 특별 옵션

     * 조합 중 상태로 남기기: ""ㄴ디ㅏ""를 ""니다""로 대치하는 매치를 만들고 조합 중 상태로 남기기 옵션을 켜면 ""ㄴ디ㅏㅂ""을 입력했을 때 ""니답""이 됩니다. 이 옵션을 켜지 않는다면 ""니다ㅂ""이 됩니다.
     * 완전 조합: ""가나""를 ""거너""로 대치하는 매치를 만들고 완전 조합 옵션을 켜면 ""가나다""를 입력했을 때 ""가낟""까지는 대치되지 않고, ""ㅏ""를 입력해 ""나""의 조합이 끝나야 ""거너다""로 대치됩니다. ""가낙다""를 입력했을 때는 대치되지 않습니다.

  기능

     * 이미지로 대치
     * 명령어 실행 아웃풋으로 대치
     * 프로그램별 on/off 및 매치 설정
     * 설정 및 매치 파일 변화 감지 후 자동 적용

  한계

     * 키보드 레이아웃: 한글은 두벌식, 알파벳은 QWERTY를 사용해야만 정상적으로 작동합니다.
     * 플랫폼: 현재로서는 윈도우 전용입니다.


   espanso를 사용하다가 한글이 지원되지 않아 취미용으로 만들어 본 텍스트 확장기입니다. 만들다 보니 재밌어서 기능을 이것저것 추가하게 되었네요 ㅎㅎ; 거의 개인적으로만 사용하고 있어서 테스트가 제대로 되지 않았을 것이 뻔하지만 일단 한번 공개해 봅니다. 사용하시고 후기 알려주시면 감사하겠습니다!

   프로그램 찾다가... 직접 만들어보다가... 스트레스 받아서 돌아가시기 일보직전에 발견했습니다 으아아아아아ㅏㅏ 쌤 너무 감사해요 ㅠㅠ 잘 쓸게요!!!!!!!!!! 존경합니다,,,!!!!

   감사합니다!

   너무너무 찾던 프로그램이였어요. 한글지원이 안돼서 너무 불편했거든요. 이런 대단한 프로그램 만들어주셔서 감사합니다. 하지만 어떻게 인스톨시키는지 모르겠어요..ㅜㅜ 알려주세요

   릴리즈 목록에 들어가셔서 (https://github.com/yeshjho/Typoon/releases) 제일 위에 있는 글의 말미를 보시면 Assets가 있는데, 이걸 펼쳐보시면 .msi 설치 파일이 있습니다! 사용해 주셔서 감사합니다~

   설치해봤는데, 유용하네요!

   오 감사합니다 ㅎㅎ 잘되는거 같아요!
"
"https://news.hada.io/topic?id=12823","메타, 사용자의 동의 철회 권리를 부당하게 무시한다는 불만","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    메타, 사용자의 동의 철회 권리를 부당하게 무시한다는 불만

Meta, 사용자의 동의 철회 권리 무시

     * Meta, 사용자의 동의 철회 권리를 불법적으로 무시함: 2023년 11월부터 인스타그램과 페이스북 사용자들이 추적을 원치 않을 경우 연간 최대 €251.88의 '프라이버시 수수료'를 지불해야 함. 추적에 동의하는 것은 한 번의 클릭으로 가능하지만, 동의를 철회하려면 유료 구독으로 전환하는 복잡한 과정을 거쳐야 함. 이는 GDPR에 명시된 바와 같이 동의 철회가 동의를 하는 것만큼 '쉬워야 한다'는 원칙에 위배됨.

Meta의 최신 유럽 개인정보 보호법 우회 시도

     * 비싼 동의 철회 비용: 사용자가 한 번 추적에 동의하면 나중에 이를 철회하는 쉬운 방법이 없음. GDPR 제7조에 따르면 동의 철회가 동의를 하는 것만큼 쉬워야 하지만, 현재 Meta는 €251.88의 구독을 구매하는 것 외에는 '철회'할 방법을 제공하지 않음. 또한, 동의를 철회하려는 사용자는 여러 창과 배너를 통해 철회 페이지를 찾아야 함.

명백한 위반

     * 명백한 위반: 유럽 데이터 보호 위원회(EDPB)는 그 지침에서 금전적 비용을 GDPR 제7조 원칙과 양립할 수 없는 부담의 예로 언급함으로써, Meta가 동의 철회를 동의를 하는 것만큼 쉽지 않게 만들고 있음을 분명히 함.

오스트리아에서 제기된 불만

     * 오스트리아에서 제기된 불만: _noyb_는 한 불만 제기자를 대신하여 오스트리아 데이터 보호 기관(DSB)에 불만을 제기함. 해당 기관은 Meta에게 유럽 데이터 보호법을 준수하도록 명령하고 사용자가 수수료를 지불하지 않고도 동의를 쉽게 철회할 수 있는 방법을 제공하도록 해야 함. 또한, _noyb_는 GDPR 위반을 방지하기 위해 벌금을 부과할 것을 제안함. 이 사건은 아마도 오스트리아 DSB에 의해 EU 내 Meta의 '주도 기관'인 아일랜드 DPC로 전달될 것임.

GN⁺의 의견:

     * 이 기사에서 가장 중요한 점은 Meta가 사용자의 동의 철회를 어렵게 만들어 GDPR을 위반하고 있다는 것임. 이는 사용자의 데이터 보호 권리를 침해하는 심각한 문제임.
     * Meta의 이러한 행위는 유럽 내 데이터 보호에 대한 인식을 높이고, 기업들이 개인정보 보호법을 준수하도록 압박하는 계기가 될 수 있음.
     * _noyb_와 같은 단체의 활동은 개인의 데이터 보호 권리를 옹호하고, 법적 조치를 통해 기업들이 법을 준수하도록 하는 데 중요한 역할을 함.

        Hacker News 의견

     * 사용자는 쿠키 배너의 ""설정 저장"" 버튼을 누르면 무슨 일이 일어나는지 모르겠다고 말함. 숨겨진 체크박스가 있어 모든 것을 허용할 수 있을 것 같고, ""마케팅 목적의 필수 쿠키""가 발명되었다고 언급함. 또한, 광고 추적을 수락하거나 비용을 지불하라는 팝업에 대해 언급함.
     * 다른 사용자는 Meta가 법을 미묘하게 위반하면서 수익을 창출하는 방법을 이해한다고 언급하면서, Meta가 쿠키 선호도를 묻는 것을 '실수로' 반복하다가 사용자가 수락하면 더 이상 묻지 않는 등 더 미묘한 방법을 사용할 것으로 예상했다고 말함.
     * NOYB(유럽의 디지털 권리를 위한 비영리 단체)에 대한 지지를 표하며, 그들의 개인정보 보호를 위한 중요한 활동에 기부할 것을 권장함.
     * DPC(아일랜드 데이터 보호 위원회)가 가능한 한 가장 높은 벌금을 부과해야 한다고 주장함. Meta가 GDPR을 반복적으로 위반했기 때문에 이러한 법률을 우회하려는 시도가 명백하다고 언급함.
     * 서비스에 대해 직접 지불하는 것을 선호하는 개인적인 의견을 밝히며, 이것이 대중적인 의견은 아니라고 언급함. 사람들이 지불하는 것을 원하지 않는다고 말하며, 이 문제가 어떻게 전개될지 궁금해함.
     * Instagram을 사용하지 않기로 결정한 사용자는, Instagram에서 제시한 광고 추적 수락 또는 비용 지불의 선택을 기다릴 수 있기를 희망함.
     * Facebook이 유료 계층을 도입하는 것에 대한 논의가 있음. 이러한 시스템에서는 기본 요금을 지불하고 추적을 받거나 프리미엄 요금을 지불하여 추적을 제거할 수 있음. GDPR 이후의 세계에서 프라이버시에 대한 지불은 윤리적으로 문제가 있으며, CJEU(유럽사법재판소)가 이러한 관행을 좋아하지 않을 것이라는 개인적인 의견을 표현함.
     * 불만을 제기한 사람이 무료 구독에서 유료 구독으로 변경하려고 시도하는 과정을 설명함. 무료 구독은 한 번의 클릭으로 가능하지만 유료 구독은 그렇지 않음. 데이터 수집이 계속되는지 여부에 대한 질문이 제기됨.
     * EU가 아일랜드에 강경한 태도를 취하고 Meta에 대한 벌금을 부과해야 한다고 주장하는 사용자의 의견이 있음. Meta가 사용자로부터 '훔치는' 모든 돈에 대해 벌금을 부과해야 한다고 말함.
"
"https://news.hada.io/topic?id=12837","구글 클라우드에서 데이터 이전 시 전송 비용 면제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글 클라우드에서 데이터 이전 시 전송 비용 면제

클라우드 전환, 이제 더 쉬워짐: Google Cloud에서 데이터 이전 시 수수료 없애기

     * Google Cloud는 개방적이고, 안전하며, 상호 운용 가능한 클라우드 생태계를 지원하기 위해 노력함.
     * Google Cloud를 더 이상 사용하지 않고 다른 클라우드 제공업체나 온프레미스로 데이터를 이전하려는 고객들은 이제 Google Cloud에서 데이터를 무료로 이전할 수 있음.
     * 이 정책은 전 세계 모든 고객에게 적용되며, 자세한 정보는 웹사이트에서 확인 가능함.

라이선스 제한 문제

     * 클라우드 제공업체를 변경할 때 데이터 전송 수수료를 없애는 것은 고객이 클라우드 제공업체를 변경하는 것을 용이하게 하지만, 많은 고객들이 선호하는 클라우드 제공업체와 작업하지 못하는 근본적인 문제를 해결하지는 못함.
     * 일부 레거시 제공업체들은 자신들의 온프레미스 소프트웨어 독점을 이용하여 클라우드 독점을 만들어내고, 고객을 속박하고 경쟁을 왜곡하는 제한적이고 불공정한 라이선싱 관행을 사용함.
     * 이러한 라이선싱 제한은 기술적인 근거가 없으며, 고객에게 최대 300%의 비용 증가를 초래할 수 있음.

클라우드의 약속

     * 클라우드의 약속은 기업과 정부가 기술 사용을 원활하게 확장할 수 있게 하는 것임.
     * 오늘 발표된 내용은 최근 몇 달 동안 Google Cloud에서 실행한 데이터 전송 가치 향상 및 개선 조치에 기반을 둠.
     * Google은 클라우드 고객을 대신하여 레거시 제공업체의 라이선싱 제한에 대해 목소리를 높이고 있으며, 클라우드 시장에서 고객 선택과 경쟁의 진정한 장벽인 제한적 라이선싱 관행을 종식시키기 위해 더 많은 조치가 필요함.

GN⁺의 의견

     * Google Cloud가 데이터 이전 수수료를 없애는 결정은 클라우드 시장에서 고객의 선택권과 유연성을 높이는 중요한 변화임.
     * 레거시 클라우드 제공업체들의 제한적 라이선싱 관행은 고객의 클라우드 이전을 어렵게 만들며, 이러한 관행에 대한 Google의 비판은 시장의 공정한 경쟁을 촉진할 수 있음.
     * 클라우드 기술의 발전은 기업과 정부가 기술을 더 효율적으로 활용하도록 돕는데, Google의 이번 발표는 이러한 발전을 지원하는 한 방법으로, 클라우드 사용자들에게 긍정적인 영향을 미칠 것으로 기대됨.

   이런 면에서 보면 Backblaze가 좋은 점이 사용자가 원하면 개인 백업이나
   객체 저장소에 저장된 데이터를 물리적으로 배송해 준다는 점 같습니다.

   아무튼 다른 클라우드 제공 업체도 빨리 따라갔으면 좋겠네요.

   아니 근데.. 구글이 업계 탑도 아닌데 이런 조치를 발표하면, 그냥 딴 클라우드 가라고 홍보하는 것처럼 보임.
   (저는 이전 프로젝트에서 구글 클라우드에 한번 데인 적이 있어서, GCP를 그닥 신뢰하지 않습니다.)

        Hacker News 의견

     * CMA의 최근 클라우드 서비스 시장 조사에 대한 반응으로 보임.
          + CMA의 조사에서 ""이그레스 요금이 경쟁을 해치고, 클라우드 서비스 제공업체의 위치를 고착화함""이라고 지적함.
          + 소프트웨어 라이선싱 문제도 CMA가 조사 중인데, 이것이 문제로 지적됨.
     * 구글이 이그레스 요금이 과도하다는 것을 인정하는 듯함.
          + 하지만 요금 감소(제거)는 구글을 떠날 때만 적용됨.
          + 고객의 이익을 위한 행동이라면 모든 고객에게 요금을 줄여야 함. 떠나는 고객에게만 적용하는 것은 퍼포먼스처럼 느껴짐.
     * 구글 클라우드 서비스 종료의 전조일 수도 있음에 대한 회의적인 시각.
          + 클라우드 서비스를 종료하면서 이그레스 요금을 부과할 수는 없음.
          + 이그레스 요금에 대한 인식이 바뀌었다면 모든 곳에서 요금을 줄였을 것임. 계정 종료 시에만 적용되는 것은 의심스러움.
     * 구글의 ""무료로 떠날 수 있음""에 대한 인터넷 상의 찬사가 이상함.
          + 구글은 여전히 기가바이트당 12센트(호주는 19센트)의 높은 이그레스 요금을 부과함.
          + Cloudflare R2는 기가바이트당 0센트의 이그레스 요금을 부과함.
     * 구글이 공개적으로 마이크로소프트와 오라클을 비판하는 것을 긍정적으로 봄.
     * AWS와 비교할 때 고객이 적으면 이그레스 요금을 없애는 것이 손실이 적음.
          + 이는 AWS에 비해 구글을 좋게 보이게 함. 현명한 움직임.
     * 이그레스 요금이 너무 높음.
          + 이그레스 비용에 대한 두려움이 사람들을 클라우드에서 멀어지게 함.
          + 이러한 움직임은 구글에게 비용이 들지 않으면서 비즈니스 증가를 가져올 수 있음.
     * 반독점 규제를 앞서 나가려는 시도로 보임.
          + 대형 기술 회사가 커짐에 따라 규제 기관을 달래기 위한 조치들이 이루어질 것임.
     * 구글 클라우드 탈퇴와 관련된 무료 데이터 이전은 프리미엄 티어 네트워크 서비스 티어에서만 가능함.
          + 구글 클라우드 데이터 저장 및 데이터 관리 제품에 있는 데이터만 해당됨.
          + 이전 타임라인 변경 사항을 구글 클라우드 지원 팀에 보고해야 함.
          + 구글 클라우드 계약 종료 전에 무료 데이터 이전 요청을 제출해야 함.
          + 구글 클라우드는 프로그램 조건 준수를 위해 고객 데이터의 이동을 감사할 권리를 보유함.
     * 큰 3사가 부과하는 이그레스 요금이 너무 높다고 느낌.
"
"https://news.hada.io/topic?id=12795","내 오픈소스 프로젝트에 전념하기 위해 직장을 그만뒀습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    내 오픈소스 프로젝트에 전념하기 위해 직장을 그만뒀습니다

     * Atuin은 사용자가 언제 어디서나 실행했던 모든 명령어를 빠르게 검색할 수 있게 해주는 쉘용 도구
     * 셸(shell) 히스토리를 데이터베이스에 저장하고, 추가적인 커맨드 컨텍스트를 기록하여 기기 간에 (E2E 암호화) 동기화를 제공
     * 12월 22일을 마지막으로 PostHog의 인프라 팀 리더직을 마치고, Atuin에 전념하기 위해 회사를 창립
     * Atuin은 오픈 소스로 계속 제공되며, 현재의 자체 호스팅 도구로 무료로 사용 가능함
     * 고급 사용자를 위한 새로운 프리미엄 호스팅 기능을 추가하고 비즈니스 사용을 지원하기 위해 전념할 계획

Atuin의 시작과 성장

     * Atuin은 몇 년 전, 셸 사용의 용이성과 셸 히스토리의 문제점을 해결하고자 시작됨
     * 많은 사람들이 동일한 문제를 느끼고 있었으며, 150명 이상의 사람들이 기여함
     * 2023년 초 FOSDEM에서 발표한 후 긍정적인 피드백을 받아 프로젝트에 대한 동기 부여가 됨
     * 프로젝트에 더 많은 시간과 에너지를 투자하여 사용자 증가, 기여자 증가, 커뮤니티 활성화, 블로그/팟캐스트 등에서의 기능 소개로 성장함
     * GitHub 저장소를 ellie/atuin에서 atuinsh/atuin으로 이동함
     * 2023년 시작 시 사용자들은 하루에 약 10,000줄의 히스토리를 업로드했으나, 연말에는 거의 200,000줄로 증가함

균형 잡기

     * 프로젝트에 투자한 만큼 결과를 얻을 수 있음을 깨달음
     * 프로젝트 성장에 기쁘지만, 연말에는 관리하기 어려워짐
     * Atuin 작업을 전업으로 하기 위해 회사를 창립하고 전념하기로 결정

재정적 측면

     * Atuin 서버 운영 비용을 개인적으로 부담해왔으나, GitHub 스폰서를 통해 서버 비용을 충당할 수 있게 됨
     * 정기적으로 스폰서 계정의 존재를 언급할 때만 스폰서를 얻을 수 있었음

미래를 향하여

     * 가치 있는 기능을 구축하여 사람들이 지불하고 싶어하는 서비스를 만들고자 함
     * Atuin을 성장시켜 다른 사람들과 프로젝트에 후원할 수 있는 지점까지 이르고자 함

스폰서

     * Atuin GitHub 스폰서를 통해 지원을 제공하고자 하는 개인이나 회사는 참여할 수 있음
     * 지원자에게는 스티커와 티셔츠를 우편으로 발송하며, 회사는 공개적으로 지원을 표시하고 사이트로의 링크를 받을 수 있는 티어가 있음

GN⁺의 의견

     * Atuin은 셸 사용의 효율성을 높이는 오픈 소스 도구로, 사용자의 명령어 히스토리를 관리하고 동기화하는 데 큰 도움이 됨.
     * 프로젝트의 창립자가 전업으로 전환하여 Atuin에 더 많은 시간을 할애하고, 이를 통해 프로젝트의 성장과 지속 가능성을 추구하는 것은 오픈 소스 커뮤니티에 긍정적인 영향을 미칠 것임.
     * GitHub 스폰서를 통한 커뮤니티의 재정적 지원은 오픈 소스 프로젝트의 지속 가능성에 중요한 역할을 하며, 이러한 지원 모델은 다른 오픈 소스 프로젝트에도 영감을 줄 수 있음.

   이 역시 좋은 툴이군요.
   서버 새로 설치할 때 항상 ssh 키파일과 런컴 파일들은 잘 옮겨놓고 뿌듯해 하다가, 셸 히스토리를 깜빡해서 난감 했던 기억이 여러번 있던터라…. 한번 써봐야겠습니다.

   Atuin - 쉘 히스토리를 SQLite에 저장하기

   초기에 긱뉴스에 공유했었는데, 이제 아예 풀타임으로 하기로 했나 보네요.
   내용에도 있지만, GitHub Sponsor 등의 수단으로 후원을 받는 것은 이런 프로젝트들이 성장하는데 큰 도움이 됩니다. 스티커/티셔츠 등으로 티어를 구분해 놓은게 흥미롭네요.

        Hacker News 의견

     * Atuin 사용자의 의견:
          + Atuin은 좋은 아이디어지만, 큰 히스토리 파일을 다룰 때 너무 느림.
          + 10년간의 히스토리를 동기화했으나, 170k 라인이 너무 많아 필요한 것만 고르는 것은 불가능함.
          + 쉘 히스토리를 어떻게 활용해야 하는지 모르겠으나, 다른 사람들은 분명 가치를 찾고 있음.
     * fish 쉘 사용자의 의견:
          + fish 쉘과 Atuin을 비교해본 사람이 있는지 궁금함.
          + 전체 쉘 히스토리에 접근하는 것이 꼭 필요한지 의문임.
     * 다른 사용자의 의견:
          + Atuin과 비슷한 기능을 하는 로컬 설정을 해놓았지만, 생각만큼 사용하지 않음.
          + 자주 사용하는 명령어는 별칭(alias)으로 관리하고, 필요할 때 쉽게 찾을 수 있도록 함.
          + 전역 별칭을 사용하여 별칭을 서로 조합하는 것도 유용함.
     * bash 스크립트 사용자의 의견:
          + Atuin은 아니지만, 프로젝트 간 전환 시 유용한 작은 bash 스크립트를 사용 중임.
          + Atuin을 시도해보고 더 쉬운지 확인할 계획임.
     * 웹사이트에 대한 긍정적인 의견:
          + Atuin 웹사이트가 마음에 들며, 다크 모드와 간단한 레이아웃이 좋음.
          + Ellie에게 행운을 빔.
     * 오픈 소스 수익 창출에 대한 의견:
          + 오픈 소스로 합리적인 수익을 창출하는 방안이 있기를 바람.
          + 오픈 소스 패키지를 유지하는 것은 사랑의 노동이며, 수익에 의존하면 접근 방식이 달라질 것임.
     * 여성의 오픈 소스 커리어에 대한 의견:
          + 더 많은 여성이 오픈 소스 커리어로 전향하는 것을 보는 것이 좋음.
     * sqlite 데이터베이스를 사용하는 사용자의 의견:
          + 2017년부터 쉘 히스토리를 sqlite 데이터베이스에 저장함.
          + 개인 히스토리만 동기화하며, 복잡한 검색을 통해 몇 년 전 명령어를 찾는 것이 매우 가치 있음.
"
"https://news.hada.io/topic?id=12797","DNA가 IF문, WHILE 루프 또는 함수 호출과 동등한 기능을 가지고 있는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DNA가 IF문, WHILE 루프 또는 함수 호출과 동등한 기능을 가지고 있는가?

DNA는 IF문, WHILE 루프 또는 함수 호출과 같은 것을 가지고 있는가?

     * DNA에는 IF문, GOTO 점프, WHILE 루프와 같은 구조가 있는지에 대한 질문.
     * 소프트웨어 개발에서 이러한 구조는 특정 조건이 충족될 때 코드 블록을 실행하는 기능을 가짐.

프로그래밍 구문과 유사한 생물학적 예시

     * IF: 전사 활성화 인자가 존재할 때 유전자가 전사됨. 세포의 죽음으로 프로그램이 종료되기 전까지는 이벤트가 종료되지 않음.
     * WHILE: 전사 억제 인자가 존재하지 않을 때까지 유전자가 전사됨.
     * 함수 호출에 대한 직접적인 유사물은 없음. 모든 사건은 같은 공간에서 일어나며 상호 간섭의 가능성이 있음.
     * GOTO: 조건에 의존하는데, 특정 네트워크 연결에서 발생할 수 있음. 예를 들어, 신호 경로가 A → B → C가 있고 D → C로의 다른 연결이 있다면, D가 활성화되면 A와 B 없이도 C에 직접 영향을 줄 수 있음.
     * 합성 생물학적 회로를 사용하여 논리 게이트를 구축한 사례가 있음.

DNA와 컴퓨터 코드의 비교

     * DNA는 컴퓨터 코드와 직접 비교할 수 없음. 중요한 것은 구문 구조가 아니라 그 아래에 있는 논리임.
     * DNA는 단지 지시사항의 집합이며, 완전히 기능적인 실체는 아님.
     * 세포는 아날로그적인 성질을 가지고 있어서 대부분의 상황에서 변수의 값이 0/1(이진)이 아님.

DNA는 컴퓨터 코드와 유사하지 않음

     * 컴퓨터 코드는 실행 순서가 있지만, DNA는 병렬적이고 순차적이지 않음.
     * 컴퓨터 코드는 엄격하고 일관된 의미를 가지지만, DNA는 아미노산으로 번역되고 이들 간의 복잡한 화학적 상호작용이 단백질의 기능을 결정함.
     * 유사한 컴퓨터와 같은 경로는 단백질 수준에서 찾아야 하며, DNA 수준에서는 아님.

합성 생물학

     * 유전자가 DNA에서 표현되는 방식과 논리 기능 사이에 비교할 수 있는 몇 가지 점이 있지만, 완벽하지는 않음.
     * 합성 생물학은 생물학에 논리 기능을 통합하려는 새로운 분야로 발전하고 있음.

전사 간섭

     * 전사 간섭은 IF문(또는 WHILE)의 형태로 볼 수 있음.
     * DNA는 순차적 코드 실행에 대해서만 의미가 있으며, 병렬적으로 많은 전사가 동시에 일어남.

기능 호출에 대한 추가 논의

     * 핵 수용체는 기능 호출의 좋은 예시로, 활성화되면 세포 내 서브루틴의 유전자 억제/활성화 및 하류 과정을 활성화함.

프로그래밍과 유사한 하위 수준 구조

     * FUNCTION CALL: 복합 단백질 내에서 단일 하위 단위를 교체하는 것은 함수 호출과 유사함.
     * IF: 대체 스플라이싱을 통해 DNA의 일부(엑손)가 최종 단백질을 인코딩하는 전사물에 포함되거나 포함되지 않을 수 있음.

  GN⁺의 의견

     * 이 글은 DNA가 컴퓨터 프로그래밍 언어와 유사한 구조를 가지고 있는지에 대한 흥미로운 논의를 제공함.
     * DNA와 컴퓨터 코드의 직접적인 비교는 부정확하지만, 생물학적 시스템에서의 논리적 작동 원리를 이해하는 데 도움이 될 수 있음.
     * 합성 생물학의 발전은 생물학적 시스템에 논리 기능을 통합하는 새로운 가능성을 열어주고 있으며, 이는 미래의 생명 공학 연구와 응용에 중요한 영향을 미칠 수 있음.

        Hacker News 의견

     * DNA는 프로그래밍 구조를 가지고 있지 않지만, 신경망처럼 작동한다고 볼 수 있음. 유전자 조절 네트워크는 정보를 처리하는 상호 연결된 노드(유전자와 단백질)를 통해 서로의 활동에 영향을 미치는 신경망과 유사함.
          + 일부 단백질은 다른 유전자를 활성화하는 역할을 하며, 이들은 조절 네트워크에서 주요 역할을 하는 전사 인자임.
          + 전사 인자가 유전자의 프로모터 영역에 결합하여 다른 단백질의 생산을 시작하고, 이는 연쇄 반응을 일으킴.
          + 일부 전사 인자는 억제적임.
     * mtDNA의 특이한 점은 두 개의 별개 유전자가 다른 독서 프레임을 사용하여 겹쳐 있다는 것임. 한 유전자의 끝이 다른 유전자의 시작과 같고, 이는 원형 미토콘드리아 게놈에서 이를 활용하도록 배열됨.
          + DNA 염색체는 주변 환경에 반응하여 형태 변화를 겪을 수 있으며, 이는 특정 독서 프레임이 전사될 가능성을 높이거나 낮출 수 있음.
          + 이러한 메커니즘이 신체의 ""바닥 계획""에 걸쳐 유전적 표현을 변경하는 홈박스 유전자의 작동 방식에 관여하는지 궁금함.
          + 시스템 내에서 프로그래밍 ""구조""를 식별할 수 있는 정도로, 전체적인 효과는 잡음과 출현 행동에 의해 지배되며, 시스템의 전반적인 모드는 ""피드백 제어 루프""임.
     * 창의성과 혁신 과정을 가르치는 강사로서, 자연을 관찰하여 얻은 발명품의 예를 학생들과 공유함 (예: 벨크로는 발명가의 개 털에 붙는 엉겅퀴를 관찰하여 나옴).
          + 컴퓨팅에 대한 발견이 자연, 특히 인간의 마음에서 어떻게 이루어지는지 관찰함으로써 이루어질 것이라고 생각함.
          + 이러한 발견은 컴퓨팅이 어떻게 개념화되는지 근본적으로 변화시킬 것임.
     * 이 게시물은 게으른 것으로 보이지만, 어느 정도 흥미로운 논평을 낳았음. 소프트웨어 엔지니어링에 대한 더 많은 사람들의 인식 변화를 바람.
          + 관련 주제에 대한 읽을 만한 글이 있음.
     * 계산생물학에 관심이 있는 사람에게 조지 처치의 강의가 매우 훌륭함.
          + 강의 설명: 복잡한 생물학적 네트워크에서 시퀀스, 구조, 기능 간의 관계와 정량적, 포괄적, 기능적 유전체학 분석의 현실적 모델링에 대한 진전을 평가함.
          + 연습은 알고리즘, 통계, 데이터베이스, 시뮬레이션 접근법을 포함하며 의학, 생명공학, 약물 발견, 유전 공학에 대한 실용적인 적용을 포함함.
     * KMT2D 유전자는 다른 유전자의 발현을 조절하는 것으로 알려진 유전자 중 하나임. 이 유전자의 결함은 종종 카부키 증후군을 앓게 함.
          + Bert Hubert의 'DNA: The Code of Life (SHA2017)' 강연에서 IF-행동에 대한 예를 들었음.
     * 유튜브의 Tim Blais가 A. Leigh의 연구를 기반으로 한 분자 기계에 대한 교육적이고 재미있는 노래를 만들었음. 전기화학적 ""스위치""가 이진 상태를 인코딩하는 방식을 보여주는 애니메이션을 통해 원칙적으로 논리 게이트를 구축할 수 있음을 보여줌.
     * DNA를 수백만 년에 걸친 프로그래밍과 같이 생각함. 연결된 일련의 잘 작동하지 않고 주석이 없으며 문서화되지 않은 코드로, 코드가 왜 그렇게 되었는지에 대한 이유는 시간이 지나면서 완전히 잊혀짐. 변경하는 것은 나쁘고, 특정 코드 덩어리가 특정 행동으로 이어지며, 코드를 더 많이 보면 볼수록 스파게티 코드처럼 보임을 알게 됨.
     * 이 슬라이드 세트는 DNA 컴퓨팅에서 이루어진 일부 작업에 대한 좋은 개요를 제공함. 특히 DNA의 메커니즘을 사용하여 TSP(Traveling Salesman Problem)를 해결하는 것이 매우 흥미로움.
     * 전사 활성화 인자(IF)는 유전자가 전사될 때 존재하며, 전사 억제 인자(WHILE)는 억제 인자가 존재하지 않을 때까지 유전자가 전사됨.
          + IF와 WHILE은 동등하며, WHILE은 IF의 일종의 대우임.
          + ""억제 인자""가 존재하지 않을 때 전사를 유발한다는 것은 말이 되지 않으며, 억제 인자의 존재가 표현을 억제하기 때문에 ""전사 억제 인자; 억제 인자가 존재할 때까지 유전자가 전사됨""이 더 타당함.
"
"https://news.hada.io/topic?id=12773","키 폼을 머리에 대면 작동 범위가 증가하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       키 폼을 머리에 대면 작동 범위가 증가하는 이유

원격 자동차 키가 머리나 몸에 대고 사용할 때 작동하는 이유는 무엇인가?

     * 원격 자동차 키가 범위 밖에서 작동하지 않을 때 머리에 대고 사용하면 작동함.
     * 이 현상에 대한 여러 가설과 실험이 제시됨.
     * 몸이 RF 신호의 공진 챔버로 작용하거나, 몸이 더 큰 루프 안테나로 작용하여 효율이 증가하는 것으로 추정됨.
     * 실험을 통해 머리에 대고 사용할 때 더 나은 성능을 보이는 것으로 나타남.

실험 결과 요약

     * 원격 키를 다양한 위치와 방향으로 사용해 본 결과, 머리에 대고 사용했을 때 가장 좋은 성능을 보임.
     * 키를 머리에 대지 않고 사용했을 때보다 차량에 대고 사용하는 것이 더 나은 성능을 보임.
     * 실험을 통해 머리에 대고 사용하는 것이 가장 효과적인 방법임을 확인함.

원격 키 디자인과 안테나 효율성

     * 원격 키는 주머니에 들어갈 만큼 작게 디자인되어 있으며, 내부의 작은 루프 안테나는 매우 비효율적임.
     * 머리에 대고 사용하면 몸, 어깨, 머리가 형성하는 '바디 루프' 안테나가 원격 키의 안테나보다 거의 100배 더 효율적임.
     * 작은 루프 안테나와 '바디 루프' 안테나 간의 자기 결합으로 인해 조합된 안테나의 성능이 향상됨.

GN⁺의 의견

     * 원격 자동차 키의 작동 범위를 늘리는 현상은 몸이 RF 신호의 공진 챔버로 작용하거나 더 큰 루프 안테나로서의 역할을 하기 때문임.
     * 이러한 현상은 일상 생활에서 물리학의 원리가 어떻게 적용되는지를 보여주는 흥미로운 예시임.
     * 실험을 통해 이러한 가설을 검증하고 실제로 머리에 대고 사용했을 때의 효과를 확인한 점은 과학적 탐구 방법의 중요성을 강조함.

        Hacker News 의견

     * 키 폼 송신기와 안테나는 인체 근처에서 최대 신호를 내도록 조율되어 있음을 설명하는 의견이 있음. 이는 키 폼의 정상적인 사용 방식임.
          + 예를 들어, 공장에서는 ""더미 몸체""로부터 설정된 거리에서 조율됨.
          + 워키토키 라디오의 안테나도 손에 들고 있을 때 조율되어야 함. 인체가 누락된 접지 또는 그라운드 플레인 역할을 함.
          + 안테나를 그라운드 플레인에 설치하고, 동축 케이블, SWR 미터, 송신기를 사용하여 안테나를 조율한 다음, 손을 안테나 근처로 가져가면 SWR 미터에서 ""디튜닝"" 효과를 쉽게 볼 수 있음.
     * 어린 시절, 안테나를 만졌을 때 TV 화질이 개선되는 경험을 한 사람이 있음. 이를 통해 인간이 대부분 물로 이루어져 있다는 사실을 알게 되었고, 물 한 잔을 TV 안테나 근처에 놓아 화질을 개선시키는 실험을 함. 이 사건으로 가족들의 IT 지원자가 됨.
     * 2009년형 GTI에 대한 실험을 언급한 댓글이 있음. 이는 한 사용자의 첫 차였던 Jetta를 떠올리게 함. Jetta의 매뉴얼에는 리모컨의 예상 작동 범위를 보여주는 그림이 있었는데, 실제로는 팔 길이 정도의 범위에서만 작동한다고 약속함.
     * 톤 생성기를 사용하여 전선을 추적하며 장난을 치던 경험을 공유한 댓글이 있음. 탐지기를 머리에 대고 손가락을 핥은 다음, 66 블록의 접점에 손가락을 대면서 톤 생성기의 소리를 들을 때까지 기다리는 방법을 사용함.
     * 이 효과가 실제로 작동한다고 주장하는 댓글이 있음. 20년 동안 여러 차량에서 여러 번 시도해본 결과, 리모컨의 평평한 면을 턱에 대고 있으면 가장 효과적임.
     * 인체가 안테나의 용량성 접지면으로 작용한다는 이론에 동의하지 않는 의견이 있음. 차량에 장착된 햄 또는 CB 안테나가 차량의 금속과 직접 접촉하지 않더라도 용량성 접지면으로 작용하는 것과 유사함. 지면에 별 모양으로 배치된 접지 라디얼을 사용하여 수직 안테나와 유사한 방식으로 작동할 수 있음.
     * 중고차 사진 작가로 일하면서 이 트릭을 사용했다는 댓글이 있음. 10-20개의 키 폼을 들고 300대 이상의 차량을 걸어다니며 사진을 찍어야 했는데, 올바른 차량을 찾기 위해 키 폼을 턱에 대는 것이 트릭이었음. 배터리가 죽지 않았다면 효과적임.
     * 몇 년 전 YouTube에서 찾은 좋은 설명을 공유하는 댓글이 있음.
     * Keysight Labs가 몇 년 전에 이에 대한 테스트를 진행했다는 댓글이 있음.
     * 키 폼을 머리에 대고 차를 잠그려고 시도했지만 작동하지 않아 차에 더 가까이 가야 했다는 개인적인 경험을 공유한 댓글이 있음. 아마도 잘못된 방법으로 시도했을 수도 있음.
"
"https://news.hada.io/topic?id=12852","Ask GN: GN+에 url로 추천 가능할까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: GN+에 url로 추천 가능할까요?

   선정한 주제에 대해서 기계번역을 거친다는건 알겠는데,
   선정과정에 대한 이야기가 없어 질문드립니다.

   제가 생각한 이 사이트 주제는
    1. 기술관련된 뉴스를 보고 새로운 정보를 얻는것
    2. 그 대상에 대한 각자의 생각이나 파생주제로 이야기하는거
       인데

   유저로 가끔 이야기 해보고 싶은 뉴스가 있습니다만, 게시글 작성이 부담됩니다.

   HN 처럼 url하나만 있는 게시글이면 편하겠는데,
   사이트내 다른 게시물을 보면
   https://news.ycombinator.com/item?id=38952526 이런거 한줄 넣고 올리기 부담스럽습니다.
   그래서 따로 url하나만 올릴수 있는 게시판이 있거나, GN+에 추천? url등을 한줄씩 등록할수 있는 창이 있으면 좋을 것 같습니다.

   긱뉴스는 기본으로 글 등록시에 URL과 제목만 올려도 가능 하게 되어있습니다.

   물론 올릴 때 요약을 작성해 주시면 도움이 되긴 해서, 저도 가능하면 그렇게 합니다.
   영어권이 주 사용자인 HN과 달리 국내에서는 URL과 제목만으로는 정보를 얻고 대화 나누기가 힘든 것 같아요.

   GN+의 경우는 현재 비용문제가 있어서 누구나 등록할 수 있게 만들기는 어렵고요.

   가능하면 ""글 등록""을 통해서 기사를 올리시면서 DeepL 이나 Kagi Summarizer 같은 것으로 기계 번역을 한걸 달아주시면 어떨까 합니다.

   질문은 비용이 발생하는 GN+ 에 바로 등록하고 싶다가 아니라,
   앞쪽 추천(url 등록)과정이 있는지에 대한 질문입니다.

   다른 질문인 한줄 url게시판은 그냥 일반게시판에 올려도 된다.
   많은 참여를 원하면 번역이나 더하는게 좋다 로 이해했습니다.
"
"https://news.hada.io/topic?id=12777","모든 웹사이트는 어디로 사라졌나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           모든 웹사이트는 어디로 사라졌나?

웹사이트는 모두 어디로 갔을까?

     * 2009년 화요일 아침, 새해 첫날을 친구들과 술에 취해 보낸 후 깨어남.
     * 페이스북과 인스타그램은 있었지만, 주로 친구들의 소식을 확인하는 곳이었음.
     * 웹 브라우저를 열고 textsfromlastnight.com에 접속하여 전날의 술에 관한 글을 읽으며 웃음.

당신을 위해, 하지만 우리가 만든 것은 아님

     * 현재의 웹은 과거와 달리 작동하지 않음.
     * 이제는 'For You Page'에서 알고리즘에 의해 선택된 콘텐츠를 소비함.
     * 크리에이터들은 여러 플랫폼을 위해 콘텐츠를 만들어내고 있음.

웹사이트는 모두 어디로 갔을까?

     * 한 트윗이 추수감사절에 바이럴이 되면서 웹사이트의 소멸에 대한 질문을 던짐.
     * 많은 사람들이 앱화와 어도비 플래시의 종말 등을 원인으로 지목함.
     * 웹사이트는 사라지지 않았지만, 발견의 즐거움을 그리워하는 것으로 보임.

우리는 큐레이션을 그리워함

     * 과거에는 웹을 큐레이션하는 능력이 있었음.
     * 알고리즘에 의해 발견을 아웃소싱하면서 큐레이션 능력을 잃어버림.
     * 대부분의 사람들은 끊임없는 콘텐츠 피드를 위해 이를 받아들임.

GN⁺의 의견

     * 이 글은 웹사이트와 웹 큐레이션의 변화에 대한 향수를 자극함.
     * 웹의 발전이 가져온 기술적 경이로움과 함께, 개인적인 발견의 즐거움이 감소했다는 점을 지적함.
     * 독자들에게 자신이 좋아하는 웹 콘텐츠를 다른 이들과 공유하고, 웹의 상호연결성을 복원할 것을 제안함으로써, 웹을 더욱 풍부하고 다채롭게 만드는 데 기여할 수 있음을 강조함.

        Hacker News 의견

     * 웹사이트 감소 원인
          + 콘텐츠 소비 패턴: 대부분의 사람들이 앱을 통해 콘텐츠를 소비하므로, 크리에이터들은 그러한 관객을 위해 콘텐츠를 만듦. TikTok, Twitter, Reddit, Facebook, YouTube 등에 사용자가 있기 때문에 크리에이터들은 가시성을 위해 그곳에 콘텐츠를 게시.
          + 모바일 기기 전환: 모바일 기기의 UX가 제한적이어서 같은 앱에 머무르기 쉬움. URL 입력이나 북마크 관리보다 간편함. 2000년대 컴퓨터에 익숙하지 않은 많은 사람들에게 휴대폰 앱이 마우스/키보드를 사용하는 브라우저보다 훨씬 사용하기 쉬움.
          + SEO 스팸 사이트 증가: 검색 결과를 희석시키고 시간 낭비. 첫 번째 포인트와 결합하여, 웹사이트를 찾는 것이 종종 불가능해짐. 이로 인해 피드백 루프가 생성됨: 사용자가 웹사이트를 찾지 않으니 왜 웹사이트에 콘텐츠를 만들까?
          + StumbleUpon 추억: 2010년경 친구들과 즐겨 사용했던 StumbleUpon은 인터넷의 무작위 페이지로 이동하는 재미가 있었음. 오늘날과 달리 다양한 주제와 경험을 접할 수 있었음. 현재는 대부분의 콘텐츠가 플랫폼별 성공을 위해 동일한 패턴을 따름.
     * 웹사이트 감소에 기여하는 긍정적인 측면
          + 소규모 소셜 그룹 상호작용: 인터넷 기술의 증가로 인해 소규모 소셜 그룹 상호작용이 증가함. 예를 들어, 트윗 스크린샷을 보고 친구에게 연락하는 것과 같은 행동이 2000-2012년대에는 존재하지 않았음. 이러한 ""코지넷""으로의 전환은 사람들이 이상한 니치 블로그나 인터넷 '장소'를 찾는 데 덜 관심을 가지게 만듦. 인터넷은 이제 동굴 탐험이나 고고학보다는 집 파티와 같음. 공간은 친숙하고 편안하며, 'For You' 피드 덕분에 더욱 그렇지만, 친한 사람들과 공간을 공유하는 것이 주된 목적임. 인스타그램 프로필이 개인 블로그를 대체했고, 인스타그램 메시징이 댓글 섹션을 부분적으로 대체했음.
     * 웹의 문화 변화
          + 익명성 문화 소실: 모든 사람이 단순한 화면 이름이었고 장기적인 명성에 크게 신경 쓰지 않았던 ""익명성"" 문화가 사라짐. 이러한 문화는 ""가짜 익명 아마추어""로 인해 재미있는 분위기가 형성되었으나, 오늘날에는 모두가 수익 창출과 논란 피하기에 집중하여 바보 같은 일을 하지 않음.
          + 기업의 웹사이트 관리 부족: 많은 대기업이 자체 웹사이트를 관리하고 사용하는 방법을 잊어버림. 대신 ""모든 것을 위한 모든 것"" 플랫폼을 사용하여 정보를 전달함.
     * 링크 블로그에 대한 열망
          + 링크 블로그 확산 희망: 저자는 2003년부터 운영해온 자신의 링크 블로그를 예로 들며, 이러한 방식의 출판이 매우 간편하다고 언급함. 다른 사람들도 이와 같은 링크 블로그를 많이 만들기를 바람.
     * 기술과 문화의 변화에 대한 적응
          + 기술 변화에 따른 적응: 한때 편안했던 방식이 갑자기 구식이 되는 것에 대한 충격. CD 선물이나 앱 개발과 같은 것들이 예로 들어짐. 웹 앱으로 다시 작성하는 것은 재미있는 운동이 될 수 있지만, 사용자 공간으로의 디스크 이미지 저장/복원 능력 부족이 경험을 해침.
     * 블로그 시대의 종말과 아카이빙의 중요성
          + 블로그의 계절성: 블로그의 최고 콘텐츠는 작가가 특정 생활 단계에 있을 때 작성됨. 그 단계가 지나면 글쓰기가 마르고, 따라서 위대한 웹사이트는 시작과 끝이 있음. 이러한 웹사이트를 아카이빙해야지, Google 검색에서 사라지지 않도록 ""어쨌든 게시하라""고 말하는 것은 아님.
     * 여전히 흥미로운 비상업적 웹사이트의 존재
          + 검색 엔진의 SEO 지배: SEO가 모든 검색을 지배하여 흥미로운 비상업적 웹사이트를 찾기 어려움. 구글 애널리틱스, 광고 네트워크, 아마존 제휴 링크가 없는 웹사이트만을 제외하는 검색 엔진이 있으면 좋을 것임.
     * 앱 개발 포기와 웹앱으로의 회귀
          + 웹앱으로의 회귀 결정: Google의 ""targetsdk"" 업데이트 요구는 ""무료에 대한 전쟁""으로 보임. 앱에서 수익을 창출하는 사람들만이 그러한 장애물을 넘을 의향이 있음. Google은 개발자들이 웹 개발로 전환하는 적절한 수를 유지하려고 노력할 것임.
     * 웹사이트의 역할과 정보의 흐름
          + 웹사이트의 역할: 웹사이트는 문서를 게시하는 데 적합함. 정보를 한 곳에 모음. 일상적인 것들은 포럼, 트윗, 이미지, 뉴스, 이메일, 채팅, 틱톡 등을 통한 인간 커뮤니케이션이 더 적합함. 정보가 독점되는 것에 대해 걱정한다면, 대기업이 소유하지 않은 커뮤니케이션 웹을 구축해야 함.
     * 웹앱의 우수성과 운영 체제의 변화
          + 웹앱의 우수성: 한때 사람들은 애플리케이션을 설치했음. 이제는 zoom.com, messenger.com, open.spotify.com, docs.google.com 등의 웹사이트를 방문함. 데스크톱 앱을 설치하고 지속적으로 업데이트할 필요가 없음. 웹앱은 데스크톱 앱과 동일한 기능을 할 수 있음. 운영 체제는 웹 앱에 더 집중해야 함. ChromeOS는 기본적으로 이를 수행하고, capyloon 프로젝트는 모바일 기기를 위해 이를 목표로 함. 다운로드 가능한 앱이 없어야 하며, ""앱 스토어""는 단순히 CDN이 되어야 함. 브라우저 캐싱을 통해 오프라인 사용이 가능함. 기술적인 이유가 없다면 웹은 다운로드 가능한 앱만큼 사용자 친화적일 수 있음.
"
"https://news.hada.io/topic?id=12875","Show GN: DGM: 무료 웹기반 다이어그램 도구 (웹게시 및 AI 연동)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: DGM: 무료 웹기반 다이어그램 도구 (웹게시 및 AI 연동)

   무료 웹기반 다이어그램 작성 도구 DGM을 소개합니다.
   DGM은 StarUML 개발자가 새롭게 출시한 웹 애플리케이션 입니다.

   특징
     * 로컬에서 사용시 영원히 무료.
     * 손그림체, 테마 색상 자동 변환 등 Excalidraw와 유사한 기능을 제공.
     * 다이어그램 이미지를 바로 웹에 게시 (url 부여).
     * 도형에 제약조건 또는 스크립트(Clojure와 유사)를 연결 코딩 가능.
     * UML, ERD, UI Wireframe, SysML, C4 등 다양한 라이브러리를 기본 제공합니다.
     * OpenAI GPT-4V 와 연동하여 wireframe 을 웹코드로 자동 생성 가능합니다.

   이용 사례
     * Excalidraw처럼 손그림체로 UML, ERD 등 다소 복잡한 다이어그램 작성
     * Github README에 이미지 넣고 싶을 때 (이미지 업로드 없이 웹게시후 URL 바로 삽입)
     * UI Wireframe 간단히 그리고 AI로 바로 웹 응용 코드 생성

   비슷한 서비스가 많이보이는 느낌입니다..

   각자 취향에 맞는걸 쓰면 되겠지요

   오... 멋집니다. +_+

   아무 로그인 없이 무료로 쓸 수 있는 다이어그램 도구가 생각보다 적어서
   결국 draw.io를 쓰게 되던데, 이게 대안이 될 수 있으면 좋겠네요.

   개인적으로 역으로 다이어그램을 그려주는 AI 기능도 있었으면 좋겠습니다.
   말로 설명하면 따다닥 도형들 배치해주는... 그런게 필요하네요.

   좋은 제품 공개해 주셔서 고맙습니다.

   ps. 사소한거긴 한데, 잠깐 써보니 이런 문제가 있는 것 같습니다.

   감사합니다^^
   다이어그램 생성해주는 AI 기능도 고려해 보겠습니다. (AI --> mermaid --> diagram)
   오히려 다이어그램 생성이 쉽지 않네요;
   그리고, 말씀하신 이슈는 조만간 해결하도록 하겠습니다.
"
"https://news.hada.io/topic?id=12855","보안 강화된 도커 대안, 'Podman' 탐구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       보안 강화된 도커 대안, 'Podman' 탐구

Podman 대 Docker 비교

     * Podman과 Docker는 모두 효율적이고 확장 가능한 방식으로 컨테이너를 실행, 관리 및 배포할 수 있음.
     * Podman은 데몬이 없는 아키텍처를 사용하여 사용자가 직접 컨테이너를 관리함.
     * Podman은 Systemd와 통합되어 있어 컨테이너의 생명주기를 관리함.
     * Docker Compose와 유사한 기능을 제공하는 Podman Compose를 사용하여 여러 컨테이너를 조정할 수 있음.
     * 보안 측면에서 Podman은 Docker보다 강화된 기본 설정을 제공함.

Podman 설치하기

     * Podman은 macOS, Windows 및 주요 리눅스 배포판에서 실행 가능함.
     * 리눅스에서는 네이티브로, Windows와 macOS에서는 가상 머신을 통해 작동함.
     * 설치 과정은 sudo apt update와 sudo apt install podman 명령어를 통해 진행됨.

첫 번째 컨테이너 실행하기

     * ""Hello World!"" 이미지를 사용하여 Podman 설치가 정상적으로 작동하는지 확인함.
     * Podman은 OCI(Open Container Initiative) 표준을 따르므로 Docker 이미지와 호환됨.

짧은 이미지 이름 사용하기

     * Podman은 이미지를 참조할 때 완전한 이름을 사용하도록 권장함.
     * 짧은 이름을 사용할 경우, Podman은 설정 파일을 참조하여 정규화된 이미지 이름을 확인함.

개인 이미지 레지스트리 사용하기

     * Podman은 Docker와 마찬가지로 개인 레지스트리와 함께 사용할 수 있음.
     * Docker Hub 계정을 사용하여 개인 레지스트리 설정 예제를 따를 수 있음.

여러 컨테이너 조정하기

     * Podman Compose를 사용하여 여러 컨테이너를 조정할 수 있음.
     * Podman Compose는 Docker Compose와 유사한 기능을 제공하며, 기존의 docker-compose.yml 파일과 호환됨.

   GN⁺의 의견:
     * Podman은 Docker에 비해 더 빠르고 보안 측면에서 강화된 기본 설정을 제공하는 컨테이너 엔진임. 이는 개발자와 시스템 관리자에게 매력적인 대안이 될 수 있음.
     * Podman의 데몬이 없는 아키텍처는 보안 감사 추적을 용이하게 하여 보안 사고 발생 시 사용자 식별을 가능하게 함.
     * Podman과 Docker의 호환성은 기존 Docker 사용자들이 Podman으로의 전환을 쉽게 할 수 있도록 도와줌. 이는 기존 인프라와 워크플로우를 유지하면서 보안과 성능을 개선하고자 하는 조직에게 유용함.

        Hacker News 의견

     * Podman과 systemd
          + Podman은 systemd 유닛 파일을 지원할 때 좋았음. 컨테이너와 포드를 자동으로 시작하고 업데이트할 수 있었음.
          + 그러나 Quadlet을 선호하면서 이 기능을 제거함. 이제 단일 컨테이너는 유닛 파일로 가능하지만, 포드를 위해서는 쿠버네티스 클러스터 정의가 필요함.
          + Docker와 달리 Podman의 컨테이너는 SELinux 정의에 따라 작동하여, 매핑된 디렉토리에 접근하지 못하는 문제가 반복됨.
          + Podman을 사용해야 하는지, 쿠버네티스를 사용해야 하는지, 논리적인 위치 대신 전용 디렉토리를 만들어야 하는지에 대한 혼란이 있음.
     * Podman의 네트워크 호환성
          + Podman의 주요 장점 중 하나는 Docker와 달리 네트워크 설정을 망치지 않는다는 것임.
          + Docker를 사용할 때 KVM 가상 머신과 함께 브리지를 운영하는 것이 악몽이었지만, Podman은 기본적으로 잘 작동함.
          + VPN이 Docker에 의해 손상되거나 중단되는 문제도 있었지만, Podman의 네트워킹 방식은 아직까지 다른 작업에 방해가 되지 않음.
     * Podman의 점점 증가하는 인기
          + 많은 도구들이 sudo docker 그룹을 추가하는 것을 가정하고 만들어졌지만, 보안을 의식한 Docker 설정에서는 문제가 발생함.
          + Podman은 루트 권한 없이도 사용할 수 있어 보안 면에서 긍정적임.
     * RHEL 엔지니어의 Podman 사용 경험
          + 인증된 RHEL 엔지니어로서 개인적인 컨테이너 사용에 Podman을 즐겨 사용함.
          + 그러나 개발자들을 위해서는 여전히 Docker를 사용하고 있으며, Docker Compose의 단순함을 대체할 만한 것을 제공하지 못함.
          + CI 파이프라인에서는 Buildah를 사용하지만, 개발자 사용자를 위해서는 Docker Compose가 여전히 우세함.
     * Docker와 UFW 보안 결함
          + Docker와 UFW 보안 결함에 거의 피해를 입을 뻔했음.
     * 루트리스 컨테이너와 독립된 네임스페이스의 중요성
          + 루트리스 컨테이너와 독립된 네임스페이스는 중요한 보안 기능임.
          + Docker에서도 루트리스를 사용할 수 있으며, 설정이 복잡하지 않음.
          + Docker를 고수하는 이점은 접근성이 더 좋다는 것임: 더 많은 커뮤니티, 블로그, Docker Compose 설정의 넓은 이용 가능성, 사용 방법을 아는 동료 등이 있음.
          + 결국 Podman과 Docker 모두 호스트에서 독립된 네임스페이스에서 프로세스를 실행함.
     * Red Hat의 Docker 대안, Podman
          + Red Hat이 Docker 대안을 만드는 이유는 명확하지 않지만, Podman이 마음에 듦.
          + Podman은 Docker가 하는 거의 모든 것을 할 수 있으며, 더 많은 기능을 가지고 있거나 (예: 포드), Podman의 방식이 더 나음 (예: 데몬 없는 컨테이너 생성 과정).
          + 개발자에게 주요 문제는 Docker Compose일 수 있으나, 간단한 Compose 파일을 사용한다면, Docker Compose 사양과 호환되려는 podman-compose 스크립트가 있음.
          + Podman을 Docker Compose의 백엔드로 사용하는 것도 가능함. 2024년 현재, 적어도 리눅스 상자에서는 Docker를 사용할 이유가 없어 보임. Podman이 macOS나 Windows에서 어떻게 작동하는지는 확실하지 않음.
     * Podman의 보안 중심 접근 방식
          + Podman의 보안 중심 접근 방식과 일부 결정들이 마음에 듦. 기본적으로 안전한 기본 설정을 제공하며, Docker Compose와 호환됨.
          + Podman이 충분한 인기를 얻는다면, 명령어와 yml에 대해 독자적인 방향으로 나아갈 수도 있음. 현재는 Docker와 Docker Compose 파일 형식에 '의존하는' 도구처럼 보임.
          + Podman에는 k8s가 없는 오케스트레이션의 부족을 대체할 수 있는 swarm 대안이 필요함. 좋은 보안 관점에서 작은 규모의 컨테이너를 운영하는 간단하고 합리적인 방법을 제시할 수 있을 것임.
     * Podman 사용 시 겪는 문제들
          + Podman은 훌륭하지만, Docker 대체제로 사용하기 시작했을 때 UID와 GID 매핑, SELINUX 정책, 누락된 DNS 설정 등으로 문제를 겪음.
          + 문제를 해결하기 위해 시스템 마이그레이션을 실행하다가 설정을 망친 적이 여러 번 있음. 보안 ACL, ID 매핑, 레이블에 대한 복잡한 문제가 있음.
          + 결과에 만족하지만, Docker처럼 '그냥 작동하는' 솔루션은 아니었음. 사용을 시작한 이후로 개선되었을 가능성이 있음.
     * Podman과 Apple 실리콘
          + Podman은 Docker와 달리 Apple 실리콘에서 x86 이미지를 Rosetta를 통해 실행할 수 있는 기능이 없음.
          + QEMU는 실제 사용에는 너무 느림.
"
"https://news.hada.io/topic?id=12776","The AHA Stack - 최신 웹 어플리케이션 스택","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     The AHA Stack - 최신 웹 어플리케이션 스택

     * Astro + htmx + Alphine.js
     * ""HTML First"" + Simplicity
     * JS를 최소화하고 Plain HTML을 전송하는 경량 클라이언트 + Astro 백엔드
     * HTML over the Wire
     * 일부 UI 업데이트를 위해 HTML Partial 전송

   추억의 apm 스택,, mern도 곧 추억의 스택이 되는건가용
"
"https://news.hada.io/topic?id=12862","Show HN: Calibre 호환 전자책 관리 앱, Citadel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: Calibre 호환 전자책 관리 앱, Citadel

Citadel: 전자책 라이브러리 관리도구의 목표

     * Calibre와의 호환성: Citadel은 Calibre가 편집한 라이브러리를 읽고 관리 가능해야 함
     * 사용자 경험: Citadel은 사용하기 쉽고 외관도 좋아야 함
     * 성능: Citadel은 Calibre만큼 빠르게 느껴져야 함

목표가 아닌 것들

     * 전자책 리더: Citadel은 전자책 리더가 아니며, 다른 도구들이 더 나은 성능을 제공함.
     * 편집기: Calibre의 CLI 도구를 사용하여 전자책을 편집하는 경우, 논의를 열어 더 나은 해결책을 모색함.
     * 100% 기능 일치: 주로 플러그인과 관련하여 Calibre의 일부 고급 기능은 결코 구축하지 않을 것임.

개발

     * 개발을 위한 전제 조건으로 Bun을 설치해야 함.
     * 앱을 Tauri 없이 보려면 bun dev:app을 실행.
     * 개발을 위해 백엔드를 서버 모드로 실행하려면 bun dev -- -- -- -- --server --calibre-library=/path/to/calibre/library를 실행.
     * 생산을 위해 백엔드를 서버 모드로 실행하려면 /Applications/Citadel.app/Contents/MacOS/Citadel --server --calibre-library=/path/to/calibre/library를 실행.

빌드

     * Citadel의 프로덕션 버전을 만들기 위해서는 bun run build를 실행.

추가 크레딧

     * Calibre 리디자인 Figma 프로토타입을 만든 Kemie Guaida에게 큰 감사를 표함.

GN⁺의 의견

     * Citadel은 전자책 관리에 있어 Calibre와의 완벽한 호환성을 목표로 하면서도 사용자 경험과 성능을 중시하는 소프트웨어임.
     * 전자책 리더나 편집기 기능을 제공하지 않는 대신, 기존 Calibre 사용자들에게 더 나은 인터페이스와 향상된 성능을 제공하는 데 집중함.
     * 개발자들에게는 Bun을 사용한 개발 환경 설정과 명령어 제공을 통해 Citadel의 개발 및 빌드 과정을 쉽게 안내하고 있음, 이는 개발자 커뮤니티 내에서의 기여와 협력을 장려하는 좋은 사례임.

        Hacker News 의견

     * 개발자가 새로운 앱을 개발한 이유는 취미 프로젝트로서 재미를 추구하고자 함이며, 기존 프로젝트에 기여하는 것보다 자신만의 소프트웨어를 만드는 데 더 관심이 있음. Citadel은 Calibre와의 호환성을 유지하고 있으며, Calibre를 다루는 코드를 별도의 라이브러리로 구성하여 다른 개발자들이 자신의 프로젝트에 활용할 수 있도록 함.
     * 한 사용자는 Calibre의 기능은 좋지만 사용자 인터페이스(UI)가 마음에 들지 않아 iTunes와 iBooks의 혼합된 디자인을 가진 인터페이스를 디자인함. macOS에 네이티브한 느낌의 UI로 Calibre의 주요 기능을 어떻게 표현할 수 있을지에 대한 질문을 가지고 있음. SwiftUI 앱으로 개발할 계획을 가지고 있으며, Citadel의 Rust 백엔드를 사용할 수도 있음.
     * 또 다른 사용자는 Calibre의 외관이 개선되면 더 많은 사람들이 그 가치를 인식할 것이라고 생각함. 현재 Calibre를 매우 좋아하지만, 외관 때문에 사람들이 그 가치를 간과하는 것 같음.
     * 한 사용자는 Kobo 리더에 epub 파일을 직접 복사하는 방법을 발견하고, Calibre를 사용하지 않고도 책을 전송할 수 있게 되어 기쁨. Calibre의 다른 기능들은 좋지만 인터페이스가 마음에 들지 않아 더 이상 사용하지 않아도 됨에 만족함.
     * Calibre의 UI에 대한 불만을 표현한 사용자는 UI/UX 작업을 기부하는 것을 고려했지만, 그것이 다년간의 프로젝트가 될 것 같아 포기함. 대신 Citadel 프로젝트에 UI/UX 지원을 제안함.
     * Citadel을 출시한 개발자에게 칭찬을 보내며, Calibre CLI에 대한 관심을 표현함. Citadel이 '리더'와 '에디터' 기능을 목표로 하지 않는다면, 사용자에게 어떤 기능을 제공하는지, 또 향후 어떤 기능이 추가될 예정인지에 대한 로드맵이 있는지 궁금해함.
     * 비슷한 프로젝트를 시작했지만 SvelteKit과 브라우저를 사용하여 네이티브 앱 대신 개발함. 프로젝트를 완성할 동기를 유지하는 데 어려움을 겪고 있음.
     * Citadel을 개발한 개발자는 macOS 전용으로 작동하는 UI를 만드는 데 문제가 있었기 때문에 Tauri를 사용하여 크로스 플랫폼 데스크탑 앱을 개발함. Zotero 생태계 내에서 Citadel이 잘 어울릴 것이며, Zotero의 전자책 지원과 Calibre 호환성을 강화하는 것이 환영받을 것이라고 생각함. Citadel을 Zotero의 '배포판'처럼 만들어 독서를 즐기는 사람들에게 더 맞춤화된 경험을 제공할 수 있음.
     * Citadel 프로젝트가 흥미롭다고 생각하는 사용자는 최근에 Rust + Tauri + Svelte 스택을 사용하여 오디오북 관리 데스크탑 앱을 개발함. 자신의 프로젝트를 홍보하며 관심 있는 사람들이 확인해보길 권함.
     * 한 사용자는 bun dev -- -- -- -- --server ...라는 명령어를 보고 즐거워함.
"
"https://news.hada.io/topic?id=12872","다이내믹 프로그래밍, 흑마법이 아니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          다이내믹 프로그래밍, 흑마법이 아니다

동적 프로그래밍은 마법이 아니다

     * 동적 프로그래밍은 복잡한 문제를 해결하는 데 사용되는 기술로, 작은 문제들로 분할하여 접근하는 방식.
     * 이 기술은 자연스러운 것이며, 많은 일반적인 알고리즘들이 특정 문제에 동적 프로그래밍을 적용한 것임.
     * 동적 프로그래밍에 대한 이해를 돕기 위해, 더 쉬운 소개와 상세한 설명을 제공함.

불평

     * 소프트웨어 엔지니어링은 명명에 있어서 형편없는 경우가 많음.
     * '부트스트랩', '데몬', '캐스케이딩 스타일 시트', '쿠키', '인공 지능' 등의 용어들이 모호하거나 오해의 소지가 있음.
     * '동적 프로그래밍'이라는 용어도 그 자체로는 '동적'과 관련이 없으며, 실제로는 알고리즘 설계에 사용되는 아이디어임.

기본 캐싱

     * 작은 유사한 문제들로 문제를 나누어 해결하려 할 때, 같은 작은 문제들을 여러 번 해결해야 할 수 있음.
     * 피보나치 수열의 예시를 들면, 간단한 재귀 함수로 구현하면 같은 계산을 여러 번 반복하게 됨.
     * 결과를 캐시(또는 메모이제이션)하여 중복 계산을 피할 수 있음.

최적화된 캐싱

     * 메모이제이션을 사용하면 재귀를 유지하되, 필요한 것을 필요할 때마다 계산함.
     * 대신, 필요한 모든 것을 미리 계산하는 방식으로 접근할 수 있음.
     * 이 방식은 재귀 호출 없이 문제를 해결하며, 이것이 바로 동적 프로그래밍임.

편집 거리

     * 두 문자열 사이의 편집 거리는 한 문자열을 다른 문자열로 변환하는 데 필요한 최소 편집 횟수임.
     * 편집 거리는 문자 교체, 삽입, 삭제를 포함하여 계산할 수 있으며, 이는 동적 프로그래밍을 사용하여 효율적으로 해결할 수 있음.
     * 작은 문제들의 해결책에서 전체 해결책을 도출하는 방법을 찾아야 함.

Advent of Code, Day 12

     * 2023년 12월 12일의 Advent of Code 문제에서는 1D 노노그램을 해결해야 함.
     * 무차별 대입 방식으로 해결할 수 있지만, 지수적 복잡도를 가짐.
     * 대신 동적 프로그래밍을 적용하여 효율적으로 해결할 수 있음.

결론

     * 동적 프로그래밍은 쉽지 않지만, 대부분의 프로그래머에게 도달할 수 없는 것은 아님.
     * 문제를 작은 문제로 나누는 방법을 이해하면, 메모이제이션을 다양한 상황에서 사용할 수 있으며, 이는 순진한 구현보다 큰 개선을 의미함.
     * 동적 프로그래밍을 마스터하면, 전체 알고리즘 클래스를 이해하고, 트레이드오프를 더 잘 이해하며, 다른 최적화를 가능하게 함.

  GN⁺의 의견

     * 동적 프로그래밍은 복잡한 문제를 효율적으로 해결하기 위한 중요한 기술로, 재귀적 접근 대신 작은 문제의 해결책을 캐싱하여 중복 계산을 줄임으로써 성능을 크게 향상시킬 수 있음.
     * 이 기사는 동적 프로그래밍의 기본 개념을 이해하고 싶어하는 초급 소프트웨어 엔지니어들에게 매우 유익함.
     * 피보나치 수열과 편집 거리 예시는 동적 프로그래밍의 개념을 이해하는 데 도움이 되며, 실제 문제 해결에 적용할 수 있는 좋은 출발점을 제공함.

        Hacker News 의견

     * 기사가 동적 프로그래밍(DP) 알고리즘을 재귀의 캐싱으로 설명하는 것은 좋은 점임.
          + 재귀적 해결책을 찾는 것이 DP 해결책을 찾는 시작점으로 최적임.
          + 재귀적 해결책을 메모이제이션(memoization)하면 속도 향상에 큰 도움이 될 수 있음.
          + 중요한 것은 호출 트리에 많은 수의 하위 문제가 있는 것이 아니라, 상대적으로 적은 수의 독특한 하위 문제가 있어야 한다는 점임.
     * 기사가 먼저 재귀적으로 문제를 다루고 점차 캐싱을 추가한 다음 필요한 캐시 크기만큼 줄이는 방식을 좋아함.
          + 동적 프로그래밍 해결책을 직접 찾으려고 하다가 막히거나 큰 노력이 필요했던 경험이 있음.
          + 앞으로는 순서대로 접근하는 방식을 강제할 것임.
     * 동적 프로그래밍의 멋진 응용 중 하나는 핵산/단백질 서열의 쌍별 정렬임.
          + 예를 들어, 시퀀스 정렬, 니들먼-운슈 알고리즘, 스미스-워터맨 알고리즘 등이 있음.
     * 매우 뛰어난 알고리즘 교수님에 대한 경험을 공유함.
          + 교수님은 UCLA에서 공부하셨고, 동적 프로그래밍에 대한 수업이 탁월했음.
          + 간단하지만 지수적 복잡도를 가진 문제로 시작하여 문제를 작은 문제로 나누고 복잡도를 다항식으로 줄인 후 메모이제이션을 적용하여 선형 복잡도로 떨어뜨림.
          + 사용된 문제들을 기억하고 싶음.
     * https://qsantos.fr/2024/01/04/dynamic-programming-is-not-black-magic/"">동적 프로그래밍은 블랙 매직이 아니다라는 글에 대한 링크를 공유함.
          + 해당 글이 많은 접속으로 인해 접근이 어려워짐(허그 오브 데스).
     * 주로 독학으로 프로그래밍을 배운 사람이 직장을 찾을 때 면접에서 동적 프로그래밍을 사용하라고 하면 몰랐을 것이라고 함.
          + 다행히 그런 일은 없었고, 기술을 알고 있어서 여러 면접에서 사용함.
     * ""동적 프로그래밍""이라는 이름이 프로그래밍 분야에서 나온 것처럼 보이지 않을 수 있음.
          + 실제로는 최적화와 관련이 있으며, 이산 시간에 대한 결정 문제를 해결하는 방법임.
          + 동적 프로그래밍은 값 함수 V*를 정의하여 최적화 문제의 차원을 크게 줄이는 방법임.
     * ""동적 프로그래밍""을 들었을 때 ""메모이제이션""만 생각하는 것이 잘못된 것인지에 대한 의문을 제기함.
          + 메모이제이션을 효과적으로 사용하기 위해 문제를 영리하게 분할하는 것이 빠진 부분일 수 있음.
     * 동적 프로그래밍이 블랙 매직이 아니라, 그것을 동적으로 프로그래밍할 수 있음을 증명하고 그 정확성을 증명하는 것이 어려움.
          + 수학적 귀납법을 사용하여 그리디 알고리즘과 마찬가지로 정식 증명이 필요함.
     * 동적 프로그래밍을 마스터하기 위해 DPV 알고리즘 책과 조지아 공과대학의 유다시티 강의를 추천함.
          + 문제를 풀어보는 연습을 통해 동적 프로그래밍을 익힐 수 있음.
"
"https://news.hada.io/topic?id=12767","추천 프로그램을 설계하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            추천 프로그램을 설계하는 방법

     * 추천(Referral) 프로그램은 ""5달러를 주고 5달러를 받는"" 형태로 많은 앱에서 볼 수 있으며, 최근 몇 년간 인기를 끌고 있음
     * 사용자들이 제품 내에서 사용할 수 있도록 CAC(고객 획득 비용)를 사용자에게 제공함으로써, 구글이나 페이스북과 같은 유료 마케팅 채널보다 큰 이점을 가짐
     * 특히 고객 획득 비용이 높은 틈새 시장을 대상으로 하는 제품에 유용하며, 추천 프로그램은 전체 고객 유입 경로의 20-30%를 차지할 수 있음
     * 추천 프로그램이 만병통치약은 아니지만 다른 마케팅 활동을 보완하기 위해 추가할 가치가 있음

추천 프로그램의 역사

     * 최초의 문서화된 추천 프로그램은 기원전 55년 율리우스 시저가 군인들에게 친구를 군대에 모집하면 연봉의 약 1/3에 해당하는 300 세스테르티우스를 지급한 것으로 알려짐
     * 드롭박스의 혁신적인 추천 프로그램은 2008년경 시작되었으며, 많은 스타트업들이 비슷한 아이디어를 실험하는 데 영감을 줌
          + 친구를 초대하면 500MB 추가 저장 공간을 얻는 방식
          + 15개월만에 10만 사용자에서 4백만명이 됨. 매일 가입자중 35%가 추천에 의한 것. (20%는 공유 폴더 및 다른 바이럴 기능으로 부터)
     * 특히 이미 입소문을 통해 퍼지고 있는 제품에 매우 효과적. LTV가 낮은 제품에는 효과적이지 않음

추천 프로그램의 구조

     * 추천 프로그램은 Airbnb, Uber, Instacart, Coinbase, Wealthfront 등 다양한 회사에서 구현되며, 몇 가지 공통적인 패턴을 가짐
     * 프로그램을 구성할 때 다음과 같은 질문에 답해야 함:
          + 질문: 언제 사용자에게 추천을 요청할 것인가? 왜 추천을 요청하는가? 메시지는 무엇인가?
          + 대상: 어떤 사용자를 대상으로 할 것인가? 추천 금액은 어떻게 설정하는가?
          + 인센티브: 어떤 인센티브를 제공할 것인가? 외부($) 또는 내부(포인트, 저장공간등) 초대한 사람과 받는 사람에게 동일한 보상을 줄것인가?
          + 페이백: 프로그램의 성공 기준은 무엇인가? 카니발라이제이션에 대해 어떻게 생각하는가 ?
     * AirBnB를 이에 따라 생각해보면
          + 질문 : 집 전체 또는 개인 룸 하나를 임대할 수 있는 사람을 초대하세요
          + 대상 : 모든 에어비앤비 이용자
          + 인센티브 : $200 획득
          + 페이백 : CAC가 다른 마케팅 채널에 비해 더 우수하며 비교 가능(이 부분은 추측임)

추천 요청(The Ask)

     * 정말 중요한 것은 ""어디에서 물어보는가?""임
          + 여러 번 물어 볼것. 여러 장소에서 다양한 메시지를 사용. 사용자에게 요청하는 상황에 맞게.
          + 배너에 추천 기능을 쓴다고 사람들이 이용하지 않음
     * 추천 요청 화면을 주요 화면의 일부로 만들어 더 자주 표시할 것
          + 사용자가 앱 내에서 무언가를 구매한 후나 친구와 상호작용한 후에 요청하는 것이 좋음
          + 온보딩 흐름에 추가하고, 사용자가 작업을 마치거나 하면 그때 참여를 유도할 수 있음
          + 절대 ""광고""처럼 보이게 만들지 말 것
     * Uber는 추천 캠페인을 'holidizing'하여 운영 (휴일과 연계하여 추천 프로그램을 맞춤화하거나 조정하는 것)
          + 운전자들에게는 휴일이 다가오면 추천 프로그램에 참여해서 추가 수익을 얻으라고 알리거나
          + 주요 콘서트가 열리는 동네에서는 1명을 초대하면 X를 받지만 5명 초대하면 5*X를 받는 계층형 특별 캠페인을 실행하는 것도 가능
          + 주요 휴일 마다 새로운 금액/새로운 이미지를 이용하여 메시지를 업데이트하는 것도 좋음
     * 다양한 메시지와 맥락에 맞춰 여러 번 요청하는 것이 중요함

대상 설정(The Target)

     * 추천 프로그램은 ""새로운 사용자""가 친구를 추천하도록 초점을 맞추어야 함
          + 초기 온보딩 흐름중에 사용자에게 메시지를 표시하고, 온보딩의 일부로 친구들의 이메일을 추가하도록 함
          + 초대를 보내기 전에 먼저 제품을 경험하라고 하는 의견과 정반대인데, 이용하고 빠지기 전에 먼저 초대하는게 좋고, 그래서 더 많이 보내는게 성공확율이 더 높아짐
     * 사용자의 가치에 따라 다른 추천 금액을 설정하는 것이 효율적일 수 있음
          + 많은 마켓플레이스 회사들이 이렇게 하고 있음
          + 뉴욕/샌프란 과 멤피스 라면 각 장소별 금액이 달라야 함

인센티브(The Incentive)

     * 드롭박스의 경우 저장 공간을 인센티브로 제공했으며, 이는 내부적 보상과 외부적 보상 사이의 딜레마를 보여줌
          + 내부적 보상은 비용 효율적이지만, 외부 사용자에게는 반응이 적을 수 있음(제품에 대해서 알지 못한다면 더더욱)
          + 드롭박스의 스토리지는 구체적인 가치 형태이기 때문에 내부/외부 중간적 위치임
     * 결과적으로 대부분의 추천 프로그램은 시간이 지남에 따라 달러로 향하는 경향이 있지만, 중요한 건 새로운 외부 사용자의 우선 순위를 정하고 인센티브를 최대한 구체적으로 만드는 방법에 대해 생각하는 것
     * 인센티브 금액 설정은 CAC/LTV 계산을 기반으로 하며, 더 큰 금액을 제공하는 계층적 오퍼가 더 효과적일 수 있음
          + 금액을 올리기 위해서는 ""가입하면 $5"" 보다 ""가입하고 5개를 구매하면 $100"" 같은 것도 가능
               o 가입 전환률과 재구매 전환률이 100x 까지 차이가 난다면, 인센티브를 20x 까지 안전하게 올릴 수 잇음
          + “give $20, get $5” 와 “give $5, get $20.” 에서 일반적으로 초대자 중심의 금액이 더 잘 작동함. 즉 초대자가 이익이 더 많은 쪽

보상(The Payback)

     * 추천 프로그램 전략을 추진하려면 일종의 ROI 지표가 필요하고, 이를 측정하기 위해 CAC/LTV 분석을 사용
     * 캐니벌라이제이션(기존에 무료로 유입될 사용자가 추천 때문에 유료로 유입시키는 현상)을 고려해야 함
          + 이를 위해서는 A/B 테스트를 통해서 ""Cost Per Incremental Customer(증분 고객당 비용)"" 같은 것을 측정해야함
          + 또는 간단하게 단순히 On/Off 테스틀 통해서, 추천 프로그램을 껐을때 신규 사용자수가 크게 감소한다면 추천 프로그램이 동작하고 있는 것

추천 프로그램의 한계

     * 드롭박스는 결국엔 추천 프로그램에 덜 의존하게 되었음
     * 시장이 성숙함에 따라 추천 프로그램의 중요성은 감소하며, 제품의 자연스러운 네트워크 효과가 사용자 획득을 주도하게 됨
          + Dropbox처럼 진정한 네트워크 효과가 있는 제품의 경우, 추천 보상과 같은 외적인 요소보다는 폴더 공유와 같은 내재적인 사용 사례가 결국 신규 사용자 확보를 주도하게 될 것
     * 추천 프로그램보다는 바이럴 기능을 구축하는 것이 더 지속적인 가치를 창출함
          + 바이럴 기능을 구축하는 것과 추천 프로그램을 구축하는 것은 사용자가 친구를 초대하도록 유도하는 비슷한 문제이지만, 공유와 소통을 중심으로 하는 진정한 바이럴 기능은 영속적이며 지속적인 가치를 창출
          + 이러한 기능은 사용자의 참여와 유지에 도움이 되며, 부수적인 효과로 신규 사용자도 창출할 수 있음. 신규 사용자를 무료로 플랫폼으로 끌어들일 수 있다는 것은 큰 이점.
          + Dropbox의 경우, 더 복잡한 추천 구조를 만드는 대신 팀원들을 프로젝트에 초대하거나 파일 공유 등의 제품 기능에 투자하는 것을 의미
          + Uber의 경우, '도착 예정 시간 공유'나 청구서 분할 또는 단체 음식 주문과 같은 기능에 바이럴을 구축하는 것을 의미

   제 Dropbox 계정을 보니 추천으로 얻은 용량이 42GB네요.
   초기 드롭박스 보급에 조금 도움이 된듯 ㅎㅎ

   드롭박스 초창기 시연 영상 https://www.youtube.com/watch?v=7QmCUDHpNzE
"
"https://news.hada.io/topic?id=12790","위키하우스: 오픈소스 주택","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             위키하우스: 오픈소스 주택

WikiHouse 소개

     * WikiHouse는 모듈식 건축 시스템으로, 고성능 건물의 설계, 제조 및 조립을 쉽게 할 수 있음.
     * 정밀하게 제작된 WikiHouse 구성 요소는 밀리미터 단위로 정밀하게 제작되어 완벽하게 맞물려 정확한 건물을 만들 수 있음.
     * 가벼운 무게로 취급 및 설치가 용이하며, 강력한 내구성을 가지고 있어 오랜 기간 동안 지속될 수 있음.

WikiHouse Skylark 시스템

     * WikiHouse Skylark 블록은 다양한 종류의 기초나 마감재와 호환되며, 배관이나 전선을 위한 공간을 포함함.
     * 소규모 팀이 몇 시간 안에 차체를 조립할 수 있으며, 전통적인 건축 기술이 필요하지 않음.
     * WikiHouse Skylark 건물은 해체가 가능하여, 수명이 다한 후에 블록을 재사용하거나 재활용할 수 있음.

지속 가능성

     * WikiHouse의 목표는 모든 시민, 커뮤니티 및 기업이 탄소 제로 건물을 짓는 데 필요한 도구와 지식을 갖추는 것임.
     * WikiHouse 블록은 중앙 집중식 대형 공장이 아닌, 분산된 네트워크의 소규모 지역 CNC 제조업체에서 제작됨.

오픈 소스

     * WikiHouse의 설계도는 오픈 소스로 제공되어, 누구나 자유롭게 사용, 수정 또는 개선할 수 있으나, 변경 사항은 동일한 라이선스 하에 재공유되어야 함.

시작하기

     * WikiHouse 사용을 시작하는 데 도움이 되는 파일과 가이드를 제공하며, 프로젝트를 실현할 수 있도록 다양한 서비스를 제공함.
     * WikiHouse를 프로젝트에 사용하는 데 관심이 있지만 시작 방법을 모르는 경우 연락하면 도움을 받을 수 있음.

GN⁺의 의견

     * WikiHouse는 건축의 민주화를 추구하며, 모든 사람이 지속 가능한 건축물을 쉽게 설계하고 구축할 수 있도록 하는 혁신적인 프로젝트임.
     * 오픈 소스 설계도를 통해 전 세계 누구나 접근 가능하며, 지역 생산을 장려하여 환경에 미치는 영향을 최소화하는 것이 중요함.
     * 이러한 접근 방식은 건축 분야에서 지속 가능성을 새로운 표준으로 만들고자 하는 강력한 움직임을 대변함.

        Hacker News 의견

     * 벽과 내부 바닥이 지붕만큼 두껍고 단열되어 있다는 점은 물리학의 열 작용을 고려했을 때 재료 사용에 있어 합리적이거나 효율적이지 않음.

     재료 사용의 비효율성에 대한 지적이 있으나, 마인크래프트를 통해 건축에 접근하는 사람들에게는 흥미로운 아이디어일 수 있음.
     * CNC로 절단된 블록 기반 조립식 주택에 대한 실험적인 개념에 매력을 느끼며, 언젠가 미국에서 이와 같은 주택을 짓고 싶어함.

     CNC 절단 블록 기반 조립식 주택에 대한 관심과 미래의 건축 의향 표현.
     * 블록의 재사용성과 맞춤화 가능성을 홍보하지만, 다른 프로젝트에서 실제로 어떻게 재사용할 수 있는지에 대한 의문 제기.

     블록의 재사용성과 맞춤화에 대한 의문 제기.
     * 캘리포니아에 거주하는 경우, ADU(부속 주거 단위)로 이러한 주택을 건설할 수 있으며, 주 법안들이 ADU의 건축/판매/임대를 용이하게 함.

     캘리포니아에서 ADU 건설의 가능성 및 관련 법안 안내.
     * Wikihouse의 지붕이 Wikileaks와 같은 문제를 겪지 않기를 바람.

     Wikihouse의 지붕에 대한 재치 있는 농담.
     * Wikihouse라는 이름의 ""wiki"" 부분에 대한 혼란을 표현하며, 누구나 집을 수정할 수 있는지에 대한 질문.

     Wikihouse 명칭의 ""wiki"" 요소에 대한 혼란과 질문.
     * IKEA 가구처럼 쉽게 조립/수리/교체할 수 있는 집을 원하며, 케이블을 놓고 내장형 설비를 설치할 수 있는 집에 대한 바람.

     IKEA 가구와 같은 편리함을 갖춘 집에 대한 바람.
     * 현대 주택 설계는 더 많은 필수 계산을 요구하며, 이러한 작업을 공개 도메인에서 제공하면 비용을 크게 절감할 수 있음.

     주택 설계의 필수 계산 증가와 공개 도메인 작업 제공의 비용 절감 가능성.
     * Wikihouse의 저천장에 대한 의문 제기와 이러한 접근 방식으로 실제로 비용을 절약할 수 있는지에 대한 의문.

     Wikihouse의 저천장에 대한 의문과 비용 효율성에 대한 의문.
     * ""기본, 중간, 고급"" 마감 옵션의 의미에 대한 더 나은 설명을 원함.

     마감 옵션에 대한 명확한 설명 요구.
     * Grand Designs라는 프로그램에서 CNC 기계를 현장에 가져와 이와 유사한 프리팹 벽 섹션을 제작하고 조립하는 과정을 보여주는 에피소드가 있음.

     Grand Designs 프로그램의 관련 에피소드 소개.
     * 거주 지역에서는 주로 벽돌과 모르타르, 기포 콘크리트 또는 콘크리트로 집을 지으며, Wikihouse 시스템이 도움이 되지 않음.

     지역적 건축 방식과 Wikihouse 시스템의 부적합성에 대한 지적.
"
"https://news.hada.io/topic?id=12838","2024년 픽사, 20% 인원 감축 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2024년 픽사, 20% 인원 감축 예정

디즈니, 스트리밍 수익성 추구하며 픽사 2024년 대규모 감원 예정

     * 디즈니 소유의 애니메이션 스튜디오 픽사가 올해 감원을 진행할 예정임.
     * 픽사 내부 소식통에 따르면 감원 규모가 최대 20%에 이를 수 있으며, 현재 1,300명인 팀이 몇 달 내에 1,000명 미만으로 줄어들 것으로 예상됨.
     * 픽사는 이러한 수치가 과장되었다고 밝히며, 영향을 받는 직원 수는 아직 결정되지 않았으며, 향후 승인된 영화의 제작 일정과 인력 배치 등의 요인을 고려 중임.

스트리밍 부문의 비수익성과 감원

     * 디즈니+를 위해 픽사가 고용한 인력이 감원 대상에 포함되어 있으며, 디즈니+는 아직 수익을 내지 못하고 있음.
     * 2022년 4분기에 디즈니+는 7백만 명의 신규 구독자를 추가하여 총 1억 5천 2백만 명의 구독자를 확보함.
     * 디즈니는 2024년 4분기까지 스트리밍 서비스를 수익성 있는 사업으로 전환할 것으로 기대하고 있으며, 이는 회사의 구조 조정을 통해 이루어질 것임.

픽사의 인기작과 박스오피스 성적

     * 픽사의 ""엘리멘탈""은 디즈니+에서 인기 있는 타이틀 중 하나로, 전 세계적으로 5억 달러의 수익을 올림.
     * ""엘리멘탈""은 처음에는 흥행 실패로 간주되었으나, 시간이 지나면서 성적을 회복함.
     * 픽사는 ""인사이드 아웃""의 속편과 2025년에는 ""엘리오""라는 새로운 영화를 출시할 예정임.

픽사의 예산과 다른 애니메이션 스튜디오와의 비교

     * 픽사의 영화 제작 예산은 대략 2억 달러로, 다른 애니메이션 스튜디오보다 높음.
     * 일루미네이션은 7천 5백만에서 1억 달러, 드림웍스는 7천만에서 1억 4천 5백만 달러의 예산을 가짐.
     * 모든 영화가 2억 달러 이상의 예산을 필요로 하기 때문에, 상당한 박스오피스 수익이 필요함.

디즈니의 추가적인 비용 절감 조치

     * 디즈니는 ABC와 다른 TV 스테이션의 광고 수익 감소와 디즈니+ 스트리밍 부문의 지속적인 손실로 인해 비용 절감 조치를 취하고 있음.
     * 이러한 조치의 일환으로, 디즈니는 올해 미국 내에서 디즈니+에 훌루 콘텐츠를 추가할 예정임.

GN⁺의 의견

     * 픽사의 감원 소식은 스트리밍 시장의 경쟁 심화와 수익성 확보의 어려움을 반영함.
     * 디즈니+의 구독자 증가와 광고 지원 모델의 성장은 스트리밍 서비스의 새로운 수익 창출 방안으로 주목받음.
     * 픽사의 예산 관리와 새로운 영화 출시 전략은 애니메이션 산업 내에서 지속 가능한 성장을 위한 중요한 변화를 시사함.

   픽사 영화를 빼놓지 않고 봤었는데, 언제부터 안봤나 했더니 2021 Luca가 마지막이네요.
   팬데믹이랑 겹치면서 뭔가 성장세도 같이 죽은게 아닌가 생각이 듭니다.
   인사이드아웃 2는 그래도 기대중!

        Hacker News 의견

     * 직원 해고의 영향에 대한 고찰
          + 해고는 직원들의 사기에 해로우며 장기적인 위험을 감수하는 데 부정적인 영향을 미침.
          + 창의적 산업에서 해고의 영향이 더욱 심각할 수 있음. 창의적인 사람들은 서로 '케미'를 통해 아이디어를 교환하며, 이는 대체하기 어려움.
          + 창의적인 결과물을 만들어내는 집단의 '부족 지식'이 공유되며, 이를 잃으면 창의성을 복제하거나 향상시키기 어려움.
          + 일본 영화 감독 아키라 구로사와는 스튜디오 시스템의 해체가 창의성에 반하는 것이라고 비판함.
          + 닌텐도의 전 CEO 사토루 이와타는 재정적 어려움 속에서도 해고를 반대하며, 장기적인 직원의 헌신을 유지하기 위해 안정적인 고용을 보장함.
          + 애니메이션 스튜디오들은 '정규직' 직원들 덕분에 브랜드를 구축하고 기대감을 만들어냄. 해고는 협업의 화학적 조화를 바꾸고 브랜드 유지나 구축을 어렵게 만듦.
     * 독립 애니메이터와 아티스트를 위한 웹사이트 창업 경험
          + cartoonlagoon.com은 독립 애니메이터와 아티스트를 위한 사이트로, 유명 아티스트의 독점 콘텐츠를 선보일 계획이었으나 성공하지 못함.
          + 픽사와 다른 스튜디오들이 인력을 감축하는 소식을 듣고, 오늘날에는 유튜브 채널 등을 통해 이러한 아이디어가 실현될 수 있을 것이라고 생각함.
     * 디즈니의 수익 구조와 미디어 회사의 비즈니스 모델 변화
          + 디즈니의 대부분의 수익은 테마파크 부문에서 발생하며, 미디어 부문은 스트리밍 경쟁으로 인해 과도한 콘텐츠 투자가 이루어지고 있음.
          + 미디어 회사들이 21세기에 콘텐츠를 손실을 감수하는 리더로 사용하여 테마파크에 가치 있는 지적재산(IP)을 제공하는 비즈니스 모델로 변화할 가능성이 있음.
     * 픽사의 해고 계획 발표에 대한 직원들의 불안감
          + 픽사가 올해 말에 해고가 이루어질 것이라고 발표하면서, '우리는 모두 가족'이라는 말과 함께 일해야 하는 직원들의 불안감을 표현함.
          + 많은 직원들이 자신의 꿈의 직장에서 일하고 있지만, 해고 소식에 안타까움을 느낌.
     * 해고된 시각화 엔지니어를 위한 채용 공고
          + 해고된 시각화 엔지니어들을 위해 원격 GPU 서버 및 클라이언트 엔진 작업을 할 수 있는 글로벌 원격 포지션을 제공함.
          + 다양한 팀이 사용하는 수상 경력이 있는 정보 시각화 플랫폼의 확장 작업에 참여하며, 데이터 분석을 더 접근하기 쉽게 만들기 위해 AI 인터페이스와 결합함.
     * 동일한 날 해고 발표의 이유에 대한 의문
          + 여러 해고 발표가 같은 날 이루어진 이유에 대해 궁금증을 표함.
     * 직원 수 감축 비율에 대한 의문
          + 1300명에서 1000명 미만으로 줄어드는 것이 어떻게 20% 감축인지에 대한 의문을 제기함.
     * 인공지능(AI)이 애니메이션 업계의 직업을 대체할 것이라는 주장
          + 제프리 카젠버그가 AI가 애니메이션 영화의 아티스트 직업의 90%를 없앨 것이라고 주장함.
     * 해고된 직원들이 후임자 교육을 할 시간 제공에 대한 비판
          + 디즈니가 해고된 직원들에게 후임자를 교육할 시간을 충분히 제공한다는 점을 비판함.
     * 경영진의 실패에 대한 직원들의 희생과 경영진의 책임 회피
          + 경영진의 나쁜 경영 결정으로 인해 직원들이 해고되는 반면, 경영진은 여전히 큰 급여를 받으며 책임을 회피함.
          + 디즈니의 콘텐츠 전략이 형편없으며, 창의적인 사업을 공식화하려는 기업 미국의 시도를 비판함.
          + 사람들이 계급 의식을 갖기 전에 몇 번이나 이러한 상황을 목격해야 하는지에 대한 물음을 제기함.
"
"https://news.hada.io/topic?id=12839","PenX - 개인 용도를 위한 구조화된 노트 작성 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PenX - 개인 용도를 위한 구조화된 노트 작성 앱

     * 개인의 디지털 자산(노트, 태스크, 아이디어, 암호, 문서)를 관리하기 위해 설계된 노트앱
     * Local-First, Privacy-First(데이터 동기화에 E2E 암호화 사용), 오픈소소
     * GitHub 기반의 파일 버전 관리
     * Next.js + TypeScript + tRPC + Prisma + NextAuth.js + Slate.js + IndexedDB
"
"https://news.hada.io/topic?id=12822","디스코드, 직원의 17퍼센트 감원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           디스코드, 직원의 17퍼센트 감원

Discord, 직원의 17% 해고

     * Discord CEO Jason Citron은 내부 메모를 통해 회사가 지난 몇 년간 너무 빠르게 인력을 확장했다고 언급함.
     * 이번 해고는 전체 직원의 17%에 해당하는 170명이 영향을 받으며, 다양한 부서에서 발생함.
     * Discord는 아직 수익성을 달성하지 못했지만, 팬데믹 기간 동안의 사용자 증가세를 되살리려 노력 중임.

Discord의 자금 상황

     * Discord는 총 10억 달러의 자금을 조달했으며, 현재 7억 달러 이상의 현금을 보유하고 있음.
     * 올해 수익성을 달성할 목표를 가지고 있으며, 2021년 마이크로소프트의 120억 달러 인수 제안을 거절한 후 상장을 고려 중임.

직원 해고에 대한 Citron의 메모

     * Citron은 모든 직원에게 영향을 미치는 해고 결정을 알리며, 이는 장기적으로 사용자와 사업, 그리고 회사의 사명에 더 잘 봉사하기 위한 결정임을 강조함.
     * 해고된 직원들에게는 5개월치 급여, 혜택 연장, 외부 재배치 서비스 3개월 제공, 2024년 2월 1일에 예정된 주식 보상의 권리 부여 등을 포함한 지원을 제공할 예정임.

GN⁺의 의견:

     * 이 기사는 기술 산업에서 일어나는 중요한 변화 중 하나인 대규모 해고에 대한 정보를 제공함. 특히, 팬데믹 기간 동안 급성장한 기업들이 어떻게 조직을 재조정하고 있는지에 대한 사례를 보여줌.
     * Discord의 경우, 빠른 성장과 인력 확장 이후의 조정은 기술 산업의 불확실성과 변동성을 반영함. 이는 다른 기업들에게도 경영 전략을 세울 때 참고할 수 있는 중요한 사례임.
     * 또한, 이 기사는 Discord가 상장을 고려하고 있으며, 재정적으로 안정적인 위치에 있음에도 불구하고 수익성을 달성하기 위한 조치를 취하고 있다는 점에서 투자자와 시장 분석가들에게 유용한 정보를 제공함.

        Hacker News 의견

     * 17% 해고에 대한 의견

     17% 해고가 충분히 깊게 자르지 못할 것 같다는 의견. 2020년에 비해 여전히 4배 이상의 직원이 남아 있으며, 당시에 이미 제품은 대규모로 성장하고 높은 품질에 도달했음. 회사가 빠르게 성장하면서 직원 수를 5배 늘렸고, 이로 인해 더 비효율적으로 운영되었다고 함. Discord에서 핵심 팀의 일부가 아니라면 이력서를 준비하는 것이 좋을 것 같다는 조언도 있음. Discord가 총 10억 달러의 자금을 조달했고, 잔고에 7억 달러 이상의 현금을 보유하고 있으며, 올해 이익을 내는 것을 목표로 하고 있다는 점이 언급됨. 이는 예상보다 나은 상황이며, 상당한 수익을 창출하고 있어 새로운 수익 창출 프로젝트를 추구하기 위해 여전히 높은 인원을 유지하는 것이 올바른 결정일 수도 있다는 의견 제시.
     * 새로운 IRS 섹션 174 규칙에 대한 의견

     새로운 IRS 섹션 174 규칙이 기술 분야의 해고를 가중시키고 있는지 궁금해하는 의견. 소프트웨어 엔지니어링 급여가 더 이상 그 해에 완전히 세금 공제될 수 없고, 대신 20%만 감가상각될 수 있다는 이해를 바탕으로 함.
     * 해고와 퇴직 패키지에 대한 의견

     해고는 불행한 일이며, 팬데믹 성장이 영구적이지 않다는 것을 깨닫지 못한 것이 과장되었다는 의견. 그러나 해고된 직원들에게 제공되는 퇴직 패키지가 매우 관대하다고 평가함. 5개월치 급여와 2024년 말까지의 건강 보험 제공이라는 점이 언급됨.
     * 해고가 다시 활발해진 것에 대한 의견

     해고가 다시 활발해지고 있다는 불만의 의견. 최근 Google, Discord, FullStory 등 여러 회사의 해고 소식이 있었으며, 소프트웨어 엔지니어들에게 상황이 안정되었다고 느껴졌던 가을이 실제로는 폭풍 전의 고요였을지도 모른다는 걱정을 표현함.
     * 실리콘 밸리의 변화에 대한 의견

     지난 15년간의 실리콘 밸리는 0% 이자율 현상이었으며, 시장의 자연스러운 힘에 대한 십년간의 왜곡이 정상으로 돌아오는 데 오랜 시간이 걸릴 것이라는 의견.
     * 직원 수 증가에 대한 의견

     팬데믹이 시작되면서 직원 수가 200명에서 1000명으로 늘어났다가 830명으로 줄어든 것에 대해 의문을 제기하는 의견. 200명의 팀으로 제품을 운영할 수 있었던 회사가 이렇게 많은 직원을 필요로 하는지, 사용자 경험에 어떤 변화가 있었는지 궁금해함.
     * 대규모 해고 시 WARN 법에 대한 의견

     대규모 해고를 고려할 때 HR 전문가들이 WARN 법을 어떻게 다루는지, 60일 이상의 해고 보상으로 그것을 완화하는지에 대한 질문을 던지는 의견.
     * 금융 상황에 대한 의견

     7억 달러의 현금 보유는 매우 큰 전쟁 기금이며, 이익 창출 경로에 대한 의심에도 불구하고, 공개된 재무 상황을 본 후 장기적인 전망에 대해 더 낙관적이라는 의견. 해고는 불행하지만, 여기서 주장하는 것처럼 실제로 이행된다면 제공되는 퇴직 패키지는 합리적이라고 평가함.
     * 기술 분야의 해고 시즌에 대한 의견

     기술 분야에서 해고 시즌이 매년 반복되는 것 같다는 의견.
     * 인수 거절에 대한 의견

     Discord가 120억 달러의 인수 제안을 거절한 것에 대해 놀라움을 표현하는 의견. 0% 이자율 시대에도 그것이 상당히 미친 결정이라고 생각함.
"
"https://news.hada.io/topic?id=12788","미국 패스트푸드 체인의 절반을 동시에 해킹한 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미국 패스트푸드 체인의 절반을 동시에 해킹한 사건

미국 패스트푸드 체인의 절반을 동시에 해킹한 방법

     * 콘솔에 경쾌한 소리와 함께 스크립트 실행 완료 알림이 뜸. 이 스크립트는 최근에 생긴 수백 개의 AI 스타트업 중 Firebase 자격 증명이 노출된 사이트를 찾는 것.
     * .ai 최상위 도메인을 사용하는 사이트 목록을 공개적으로 검색하고, 사이트 데이터 및 참조된 .js 번들에서 Firebase 초기화 변수를 찾아냄.
     * 제품 출시에 급급해 적절한 보안 규칙을 구현하지 않은 경우가 있을 것이라는 예상.

Chattr.ai를 만나다

     * Chattr.ai는 채용 시간을 88% 단축한다고 주장하는 AI 채용 시스템.
     * 미국 전역의 패스트푸드 체인 및 시간제 근로자를 고용하는 다른 회사들에 서비스를 제공함.
     * Applebees, Arbys, Chickfila, Dunkin, IHOP, KFC, Shoneys, Subway, Tacobell, Target, Wendys 등이 포함됨.

취약점 발견

     * JS 번들에서 Firebase 설정을 Firepwn에 넣으면 처음에는 권한이 없음.
     * Firebase의 등록 기능을 사용하여 새 사용자를 생성하면 Firebase DB에 대한 전체 권한(읽기/쓰기)을 얻음.
     * 노출된 데이터에는 이름, 전화번호, 이메일, 일부 계정의 평문 비밀번호, 지점 위치, 기밀 메시지, 근무 시간표 등이 포함됨.
     * Chattr 직원, 프랜차이즈 매니저, 구직자 등의 정보가 노출됨.

상황은 더 악화됨

     * /orgs/0/users에서 관리자 사용자 목록을 가져와 새 항목을 추가하면 관리자 대시보드에 완전히 접근 가능.
     * 시스템에 대한 더 많은 제어를 허용하며, 지원자 승인/거부 또는 Chattr에 지불된 금액 환불 가능.

타임라인 (DD/MM)

     * 06/01 - 취약점 발견
     * 09/01 - 문서 작성 완료 및 이메일 발송
     * 10/01 - 취약점 패치
     * 아직까지 연락이나 감사의 말은 받지 못함. 연락이 오면 이 글을 수정할 예정.

크레딧

     * 이 펜테스트와 책임 있는 공개에 도움을 준 친구들에게 감사함.
     * Logykk
     * Eva - https://kibty.town/blog/chattr
     * Hugo Bear로 제작, Privex에서 호스팅됨.


    GN⁺의 의견

     * 이 사건은 새로운 AI 기술 기업들이 보안에 충분한 주의를 기울이지 않을 때 발생할 수 있는 심각한 취약점을 보여줌.
     * Chattr.ai와 같은 서비스가 제공하는 편리함 뒤에 숨겨진 위험성을 인식하는 계기가 됨.
     * 적절한 보안 조치 없이 서비스를 출시하는 것이 얼마나 큰 피해를 초래할 수 있는지를 보여주는 사례로, 보안에 대한 경각심을 높이는 데 도움이 됨.

        Hacker News 의견

     *

     Timeline (DD/MM)
          + 06/01 - Vulnerability Discovered
          + 09/01 - Write-up completed & Emailed to them
          + 10/01 - Vulnerability patched
          + 발견부터 패치까지의 타임라인
               o 1월 6일: 취약점 발견
               o 1월 9일: 문서 작성 완료 및 이메일 전송
               o 1월 10일: 취약점 패치
               o 취약점이 하루 만에 패치된 점을 긍정적으로 평가함.
     *

     I find it funny that the author found a massive vulnerability but chose to wait a couple days to report it so they could finish a nice write-up.
          + 취약점 발견 후 보고 지연에 대한 의견
               o 저자가 큰 취약점을 발견하고도 멋진 보고서를 작성하기 위해 며칠 기다렸다는 사실이 재미있다고 평함.
     *

     Reminds me of my experience with HackerOne: We had some participants who would find a small vulnerability, but then sit on it for months while they tried to find a way to turn it into a larger vulnerability to claim a higher prize.
          + HackerOne 경험담
               o 작은 취약점을 발견하고 이를 큰 취약점으로 확대하려고 몇 달간 기다리다가, 이미 패치된 사실을 알고 분노하는 참가자들이 있었다는 경험을 공유함.
     *

     It's not clear if the author was hired to do this pentest or is a guerilla/good samaritan. If it is indeed the latter, I wonder how they are so brazen about it. Does chattr.ai have a responsible disclosure policy?
          + 펜테스트 수행 배경에 대한 의문
               o 저자가 공식적으로 펜테스트를 의뢰받은 것인지, 아니면 자발적으로 행동한 것인지 명확하지 않음. chattr.ai가 책임 있는 공개 정책을 가지고 있는지 궁금해함.
     *

     How much would this leak go for in the darknet?
          + 유출 정보의 다크넷 가치에 대한 질문
               o 이러한 유출 정보가 다크넷에서 얼마나 할지에 대해 물음.
     *

     From Eva’s post:
          +

     we didnt know much about firebase at the time so we simply tried to find a tool to see if it was vulnerable to something obvious and we found firepwn, which seemed nice for a GUI tool, so we simply entered the details of chattr's firebase
          + Eva의 게시물에서 Firebase 취약점 탐색 도구에 대한 언급
               o Firebase에 대한 지식이 부족했기 때문에 취약점을 찾기 위한 도구를 찾았고, firepwn이라는 GUI 도구를 사용해 chattr의 Firebase 정보를 입력했다고 함.
     *

     Genuinely curious (I’ve no infosec experience), wouldn’t there be a risk that a tool like this could phone home and log everything you find while doing research?
          + 보안 도구의 위험성에 대한 질문
               o 정보 보안 경험이 없는 사용자가 연구 중 발견한 모든 것을 기록하고 외부로 전송할 위험이 있는지에 대해 진지하게 궁금해함.
     *

     Full permissions for a user is blatant negligence.
          + 사용자에게 전체 권한 부여에 대한 비판
               o 사용자에게 전체 권한을 부여하는 것은 명백한 부주의라고 비판함.
     *

     If this had been exploited and the job applicants to Target, Subway, Dunkin et al, had bank/credit fraud committed in their name's, would the big companies be liable for not performing due diligence on chatter.ai?
          + 취약점이 악용되었을 경우의 법적 책임에 대한 질문
               o 만약 취약점이 악용되어 Target, Subway, Dunkin 등의 지원자들이 금융 사기 피해를 입었다면, 해당 대기업들이 chattr.ai에 대한 충분한 실사를 하지 않은 것에 대한 법적 책임이 있는지 물음.
     *

     Who's to say they're the first to discover this? They're the first to discover it and do something to fix it.
          + 취약점 발견자에 대한 의문
               o 이들이 취약점을 처음 발견한 사람인지, 또한 발견하고 해결 조치를 취한 최초의 사람인지에 대해 의문을 제기함.
     *

     I thought there was a US law now where breaches like this have to be reported?
          + 데이터 유출 보고 의무에 대한 언급
               o 이러한 유형의 데이터 유출이 반드시 보고되어야 하는 미국 법이 있는 것으로 알고 있다고 언급함.
     *

     Firebase is a shitshow.
          + Firebase에 대한 비판적인 의견
               o Firebase를 실제로 사용해보고 프로젝트를 진행했지만, 보안 취약점 외에도 다양한 문제점이 있어 비판적인 의견을 제시함.
     *

     Well done, well written, great tact. Luckily we have HN to fill the gap on the missing kudos. What an unprofessional firm (chattr)
          + 기사 작성에 대한 긍정적인 평가
               o 기사가 잘 작성되었고, 훌륭한 접근 방식을 보여주었다고 평가하며, chattr에 대한 비전문적인 태도를 지적함.
     *

     Article gets to the point very quickly, nice.
          + 기사의 직설적인 스타일에 대한 긍정적인 평가
               o 기사가 빠르게 핵심을 전달한다고 칭찬함.
"
"https://news.hada.io/topic?id=12778","Mixtral 8x7B: 희소 전문가 혼합 언어 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Mixtral 8x7B: 희소 전문가 혼합 언어 모델

Mixtral of Experts 소개

     * Mixtral 8x7B는 Sparse Mixture of Experts (SMoE) 언어 모델임.
     * Mixtral은 Mistral 7B와 동일한 구조를 가지고 있으나, 각 레이어가 8개의 피드포워드 블록(전문가)으로 구성됨.
     * 각 토큰에 대해 라우터 네트워크가 현재 상태를 처리할 두 전문가를 선택하고 그들의 출력을 결합함.

성능 및 벤치마크

     * 각 토큰은 47B 매개변수에 접근할 수 있지만, 추론 중에는 13B 활성 매개변수만 사용함.
     * Mixtral은 32k 토큰의 컨텍스트 크기로 훈련되었으며, 모든 평가된 벤치마크에서 Llama 2 70B와 GPT-3.5를 능가하거나 일치함.
     * 특히 수학, 코드 생성, 다국어 벤치마크에서 Llama 2 70B를 크게 능가함.

모델 Fine-tuning 및 라이선스

     * 지시에 따르도록 Fine-tuning된 모델인 Mixtral 8x7B - Instruct는 GPT-3.5 Turbo, Claude-2.1, Gemini Pro, Llama 2 70B - chat 모델을 인간 벤치마크에서 능가함.
     * 기본 모델과 instruct 모델 모두 Apache 2.0 라이선스 하에 공개됨.

GN⁺의 의견

     * Mixtral 8x7B는 기존의 언어 모델들과 비교하여 뛰어난 성능을 보이는 것으로 평가됨. 이는 인공지능 언어 처리 분야의 발전을 나타내는 중요한 지표임.
     * 특히 다양한 언어와 코드 생성에서의 성능 향상은 기계 번역, 자동 프로그래밍 등 다양한 응용 분야에 긍정적인 영향을 미칠 수 있음.
     * Apache 2.0 라이선스로 공개된 것은 연구자와 개발자들이 이 모델을 자유롭게 사용하고 개선할 수 있는 기회를 제공함으로써, 오픈소스 AI 커뮤니티의 성장에 기여할 것임.

        Hacker News 의견

     * Mixtral 8x7B 모델에 대한 논의
          + Mixtral 8x7B 모델은 약 한 달 전부터 사용되고 있으며, 13B 크기로 매우 우수한 성능을 보임.
          + 경쟁 모델 대비 높은 순위를 차지하고 있으며, 일상적인 Mac 사용에서 채팅, 코드 입력 등에 매우 유용함.
          + Mistral 7B에서 시작된 8명의 전문가들이 각각 다른 방향으로 발전했을 가능성이 제기됨.
          + Mistral의 경우 8x7B 네트워크를 훈련하는 것이 7B 네트워크 8개를 훈련하는 것만큼의 노력이 필요하지 않았던 것으로 보임.
          + LLM 분야에서는 여전히 빠른 혁신이 진행 중이며, Calm과 같은 새로운 연구와 Goliath-120b와 같은 실험적인 모델이 등장하고 있음.
          + 2024년 상반기에 소비자 하드웨어에서 성능이 좋은 모델이 등장할 것으로 예상됨.
     * 모델의 성능과 사용 가능성
          + 이 모델은 13b의 매개변수를 사용하여 3090에서 고품질로 원활하게 실행되며, humaneval에서 GPT-3.5를 능가하고 32k 컨텍스트를 지원함.
          + 3090은 게이머들 사이에서 흔히 사용되는 소비자 등급 하드웨어임.
          + 게임 개발자들이 게임 내에서 Mixtral을 활용하기 시작할 것을 기대함.
     * 모델 사용 방법
          + Mixtral 모델은 Mozilla/jart에 의해 Llamafile로 공개되었으며, 사용자는 해당 파일을 다운로드하여 실행할 수 있음.
     * Mac 실리콘에서의 사용
          + Mac 실리콘 사용자는 ollama.ai를 통해 Mixtral을 다운로드하고, ollama-webui를 사용하여 웹 UI를 구축할 수 있음.
     * 관련 뉴스 및 토론
          + Mixtral 모델에 대한 최근 뉴스와 토론 링크 제공.
     * 모델의 벤치마크 성능
          + Mixtral은 수학, 코드 생성, 다국어 벤치마크에서 Llama 2 70B 모델을 크게 앞짐.
          + 수학 분야에서의 성능에 대한 관심이 있으며, 이 분야는 아직 효과적으로 해결되지 않은 것으로 보임.
     * 논문에 대한 비판적인 의견
          + LLM에 대한 논문이 자세한 내용이 부족하다는 비판이 있음.
          + 전문가들을 어떻게 훈련했는지, 어떤 데이터셋을 사용했는지에 대한 설명이 누락되었다는 지적이 있음.
     * Mistral 창립자의 인터뷰 내용
          + Mistral 창립자는 A16Z 팟캐스트 인터뷰에서 chatGPT와 GPT4 수준 사이의 여러 내부 모델을 가지고 있다고 언급함.
          + 지금까지의 고품질 릴리스를 바탕으로 오픈 소스 LLM에 대한 기대감을 표현함.
     * 각 전문가 모델의 설명
          + 8개의 모델 중 하나가 다국어 번역에 특화되어 있는지, 또 다른 하나가 코딩에 특화되어 있는지에 대한 설명이 논문에 없음.
     * 멀티모달 모델의 공개에 대한 기대
          + 텍스트만을 다루는 모델의 발전이 놀라웠지만, GPT-4의 '등장하는' 행동이 멀티모달 훈련 때문이 아닌지에 대한 궁금증이 있음.
          + 멀티모달이 포함된 작은 모델들이 비슷한 도약을 보일지에 대한 관심이 있음.
"
"https://news.hada.io/topic?id=12805","OpenAI, GPT Store 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI, GPT Store 공개

     * 커스텀 버전의 ChatGPT 들을 찾아서 사용 가능한 마켓 플레이스
     * 2달전 GPTs 공개후 벌써 3백만개의 커스텀 버전들이 생성됨
     * Q1 안에 GPT 빌더들을 위한 수익 프로그램을 공개할 것. 사용량에 따라 수익을 얻음
     * 매주 Featured GPTs 공개 예정
     * 자신의 GPT가 스토어에 보이게 하려면 공개 설정을 Everyone 으로 하고, 빌더 프로필을 확인 필요
     * 함께 ChatGPT Team 플랜도 공개
          + 팀 멤버들을 위해 특별한 비공개 GPT Store가 열리게 되며, 비공개 업무용 GPTs 들을 내부에서 공유 가능

   논문 GPT는 놀랍네요. 최신 연구결과를 큰 힘 안들이고도 GPT가 알아서 소화해줍니다..
   사용자 입장에서 서비스 가격 대비 이익이 엄청 클거같아요.
   이미지 생성도 10년전에 비하면 한장에 몇만원씩은 비용들여서 외주줬던걸 지금은 100원이내로 순식간에 만들수 있고요.

   마켓은 열렸는데 팔게 마땅한게
"
"https://news.hada.io/topic?id=12843","스텔라리움: 실시간으로 현실적인 하늘을 재현하는 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    스텔라리움: 실시간으로 현실적인 하늘을 재현하는 소프트웨어

     * Stellarium 소개
          + Stellarium은 컴퓨터를 위한 무료 오픈 소스 플라네타리움 프로그램임.
          + 실제 하늘을 3D로 보여주며, 맨눈이나 쌍안경, 망원경으로 본 것과 같은 현실적인 하늘을 시뮬레이션함.
          + Stellarium에 대해 처음 접하는 사용자는 추가 정보를 얻기 위해 www.stellarium.org를 방문할 것을 권장함.
     * 설치 및 빠른 시작
          + 사용자 가이드의 '시작하기' 섹션을 참조할 것.
     * 코드 받기 및 빌드하기
          + 소스 코드에서 Stellarium을 빌드하는 방법에 대한 지침이 있음.
     * 전체 참조 및 크레딧
          + 전체 크레딧 파일을 확인할 것.
     * Stellarium에 기여하기
          + 기여 가이드라인을 확인할 것.
     * 기여자들
          + 이 프로젝트는 모든 기여자 덕분에 존재함.
          + Github에서 코드 기여자 목록과 Open Collective 페이지에서 재정적 기여자 목록을 볼 수 있음.
     * 후원자 및 스폰서
          + 모든 후원자와 스폰서에게 감사함을 표함.
          + 후원자나 스폰서가 되는 방법을 알아볼 것.
     * 코드 서명
          + 이 프로그램의 Windows 패키지는 SignPath.io에 의해 제공되는 무료 코드 서명을 사용함.
          + SignPath 재단에 의해 제공된 무료 코드 서명 인증서를 사용함.

GN⁺의 의견

     * Stellarium은 천문학을 취미로 삼거나 전문적으로 연구하는 사람들에게 유용한 도구로, 실제 하늘을 3D로 재현해주는 강력한 기능을 제공함.
     * 오픈 소스 커뮤니티의 힘을 보여주는 예로, 전 세계의 다양한 기여자들이 코드와 재정적 지원을 통해 프로젝트를 지속 가능하게 만들고 있음.
     * 프로그램의 신뢰성을 높이기 위해 무료 코드 서명이 사용되고 있어, 사용자들이 안전하게 소프트웨어를 다운로드하고 설치할 수 있음을 보장함.

        Hacker News 의견

     * 한 사용자는 Stellarium에 작은 기여를 하고자 했으나, 필요한 기능이 이미 다른 사람에 의해 구현되었다는 것을 발견함. 이를 통해 코드의 품질이 매우 높다고 느낌.
     * Stellarium은 하드웨어와 연동되어 천체망원경과 같은 장비를 제어할 수 있음. 사용자는 이를 자신의 DIY 천체사진 촬영 장비 설정에 사용함.
     * Stellarium은 스크립트를 통해 자동화할 수 있어, 사용자는 이를 이용해 배경화면을 업데이트하는 크론잡을 작성함. 하지만 실제로는 사용하지 않았음.
     * Stellarium의 웹 버전이 있으며, 브라우저의 그래픽 성능과 품질이 지난 10년간 크게 향상됨.
     * 사용자는 Stellarium의 '하늘 문화' 변경 기능을 좋아하며, 특히 일본 하늘 문화가 독특하고 시적임을 언급함.
     * 다른 사용자는 Stellarium을 사용하여 자신의 웹 게임에서 현실적인 밤하늘을 생성함. 게임에서는 매시 50분부터 정각까지 별을 보여줌.
     * Stellarium과 관련된 여러 해커뉴스 기사 링크가 제공됨, 이는 Stellarium의 다양한 버전과 관련 논의를 찾아볼 수 있음을 나타냄.
     * 한 사용자는 Stellarium을 사용하여 첫 다섯 행성과 위성의 궤도를 공부하는 사람들을 돕기 위한 스크립트를 작성함.
     * 다른 사용자는 학교 시절 지역 대학의 천체투영관을 방문했을 때 Stellarium과 Celestia를 사용하는 것을 보고 집에서 다운로드하여 사용했던 경험을 공유함.
     * 마지막 사용자는 휴대폰에서 Stellarium을 사용하는 것을 좋아하며, 심지어 위성을 식별할 수 있음을 언급하며, 국제우주정거장(ISS)을 직접 눈으로 본 경험을 공유함.
"
"https://news.hada.io/topic?id=12882","AWS에서 데이터 전송 비용 대폭 절감","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AWS에서 데이터 전송 비용 대폭 절감

AWS에서 데이터 전송 비용을 99% 절감하는 방법

     * AWS에서 데이터를 전송할 때 실수로 과도한 비용을 지출하기 쉬운데, 특히 데이터 전송에 주의하지 않으면 비용이 많이 들 수 있음.
     * AWS는 데이터 전송에 대해 다음과 같은 요금을 부과함:
          + AWS에서 공개 인터넷으로 데이터를 전송할 때는 지역에 따라 GB당 $0.09에서 $0.154까지 부과됨.
          + AWS 지역 간 데이터 전송은 GB당 $0.02에서 $0.147까지 부과되며, 이는 AWS 네트워크를 벗어나지 않는 데이터 전송에 대한 비용임.
          + 같은 AWS 지역 내의 가용성 영역 간 데이터 전송은 GB당 $0.01의 비용이 발생하며, 이는 모든 지역에서 동일함.

AWS PrivateLink와 VPC 엔드포인트 활용

     * AWS PrivateLink와 VPC 엔드포인트를 사용하면 데이터가 AWS 네트워크를 벗어나지 않도록 할 수 있으며, 이는 가격뿐만 아니라 보안 측면에서도 유용함.
     * 이러한 기능은 무료가 아니며 자체적인 제한과 가격 복잡성이 있지만, 이에 대한 자세한 내용은 AWS와 Vantage에서 확인할 수 있음.

S3를 이용한 데이터 전송 비용 우회

     * S3의 대부분의 스토리지 클래스는 데이터를 가용성 영역이 아닌 지역 단위로 저장함.
     * S3 One Zone-Infrequent Access와 S3 Express One Zone 같은 일부 스토리지 클래스는 단일 가용성 영역에만 데이터를 저장함.
     * 표준 S3 버킷에 저장된 데이터는 모든 AWS 가용성 영역에서 동등하게 사용할 수 있으며, S3에서 데이터를 다운로드하는 것은 무료임(지역 간 또는 공개 인터넷으로의 데이터 전송 시에만 표준 데이터 전송 요금이 발생).

데모

     * AWS 계정을 새로 만들어 가격 측정 시 잡음이 없도록 함.
     * 두 가지 실험을 진행함:
         1. 첫 번째 실험에서는 두 EC2 인스턴스를 개인 서브넷이 있는 VPC에 배치하고, us-east-1a 인스턴스에서 us-east-1b 인스턴스로 1TB 파일을 전송함.
         2. 두 번째 실험에서는 S3 Gateway 엔드포인트가 있는 VPC에 두 인스턴스를 배치하고, us-east-1a 인스턴스에서 S3 버킷으로 1TB 파일을 업로드한 다음 us-east-1b 인스턴스에서 파일을 다운로드함.

결과

     * 표준 데이터 전송 실험은 예상대로 $20의 비용이 발생함.
     * S3 기반 데이터 전송 실험은 저장 비용으로 몇 센트만 발생했으며, 실제로는 S3 저장 비용이 전혀 청구되지 않았음.

결론

     * AWS는 S3 데이터를 가용성 영역 간에 복제하는데, 이 비용은 S3 스토리지 비용에 포함되어 있음.
     * 데이터를 S3에 업로드한 후 즉시 삭제함으로써 99%의 비용 절감을 달성할 수 있음.
     * 이 방법은 기존 데이터 전송 코드를 대체하는 것이 아니며, 직접 네트워크 연결보다 높은 지연 시간을 가질 수 있지만, 비용 절감이 주요 관심사라면 효과적인 방법임.

   GN⁺의 의견
     * 이 기사는 AWS에서 데이터 전송 비용을 절감하는 창의적인 방법을 제시함으로써, 클라우드 서비스를 사용하는 기업이나 개인에게 큰 절감 효과를 가져다줄 수 있음.
     * 특히 S3를 활용한 데이터 전송 방법은 AWS 내에서 데이터를 이동할 때 발생하는 비용을 상당히 줄일 수 있는 효과적인 전략임.
     * 이러한 비용 절감 방법은 클라우드 인프라를 최적화하고자 하는 기업의 클라우드 아키텍트나 시스템 관리자에게 매우 유용한 정보를 제공함.

        Hacker News 의견

     * Lightsail 인스턴스 활용법
          + Lightsail 인스턴스는 AWS 리소스(예: EC2 인스턴스나 S3 버킷)에서 데이터를 ""프록시""하는 데 사용될 수 있음.
          + 각 Lightsail 인스턴스는 가격에 포함된 일정량의 데이터 전송량을 제공함($3.5 인스턴스는 1TB, $5 인스턴스는 2TB 등).
          + $10 인스턴스는 3TB의 트래픽을 제공하여 가장 가성비가 좋음.
          + EC2에서 3TB의 트래픽은 $276.48, S3 버킷에서는 $69의 비용이 발생함.
          + 단점: Lightsail 인스턴스 사용 시 들어오는 트래픽과 나가는 트래픽 모두 ""트래픽""으로 계산됨.
     * 비용 절감 트릭에 대한 경고
          + 비용을 절감하고 무료 리소스를 얻기 위한 다양한 트릭이 존재함.
          + 이러한 방법은 영리하지만 신뢰성이 떨어짐.
          + 이는 OSS 리포지토리를 통한 GitHub Actions에서의 암호화폐 채굴과 같은 유형의 해킹임.
          + 흥미로운 해킹 연습으로 여기되, AWS 계정이 중단될 위험이 있으므로 실제 제품에는 배포하지 말 것.
     * VPS 대신 클라우드 솔루션 사용에 대한 고려
          + VPS를 사용할 때 고가용성(High Availability) 문제는 어떻게 해결하는가?
          + 소규모 비즈니스라도 항상 운영되어야 함.
          + 두 개 이상의 VPS 인스턴스에 동일한 인프라를 설정하고 로드 밸런싱을 수행하는 것이 일반적임.
     * S3 스토리지 비용 계산
          + S3 스토리지 비용은 GB월 당 요금으로 청구됨.
          + 1TB의 데이터가 한 시간 동안 버킷에 남아 있다면 비용은 약 3센트가 됨.
          + 데이터가 삭제되기 직전에는 비용이 더 낮아질 수 있음.
          + 비용과 사용 보고서의 TimedByteStorage 값이 결정적임.
     * GCP의 유사한 루프홀 패치
          + GCP는 2023년에 이용자들의 남용으로 인해 유사한 루프홀을 패치함.
          + AWS도 이러한 행위가 널리 퍼지면 같은 조치를 취할 것으로 예상됨.
     * 클라우드 비용 절감을 위한 추가 팁
          + 큰 AWS 고객이라면 할인을 요청할 수 있음.
          + 한 가용성 영역(AZ)에 모든 것을 배치하는 것이 비용 절감에 도움이 될 수 있음.
          + 여러 AZ를 사용할 때는 부하를 고려한 AZ 밸런싱을 수행함.
     * 클라우드 대안
          + 복잡하고 비싼 클라우드 서비스를 사용하지 않고 직접 호스팅하거나, Cloudflare와 같이 데이터 전송료가 없는 서비스를 사용하거나, 저렴한 VPS 호스팅 서비스를 이용하는 것이 대안이 될 수 있음.
          + 클라우드 비용 분석이 필요한 단계에 이르렀다면 클라우드 사용을 재고해볼 것.
     * AWS의 복잡성과 최적화 문제
          + AWS는 매우 복잡하여 고객이 한 가지 요소에서 최적화하기 어려움.
          + 너무 많은 사람들이 이러한 트릭을 사용하면 AWS는 루프홀을 닫을 수 있음.
     * 대역폭 사용량이 많은 경우의 대안
          + Leaseweb, PhoenixNAP, Hetzner, OVH 등 대역폭 가격이 훨씬 저렴한 서비스를 고려할 것.
          + AWS의 대역폭 가격에 대해 협상하지 않는 경우도 있음.
     * ECR을 이용한 트릭
          + ECR을 사용하면 매월 인터넷으로 5TB까지 무료로 전송할 수 있음.
          + 컨테이너 이미지는 공개되어야 하지만, 내용은 암호화할 수 있음.
          + 미디어 아카이브를 Glacier에 저장할 때 유용함.
"
"https://news.hada.io/topic?id=12878","스타링크, 우주와 직통 연결되는 셀룰러 모바일 서비스 성공적 시험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  스타링크, 우주와 직통 연결되는 셀룰러 모바일 서비스 성공적 시험

Starlink의 성공적인 우주 직통 휴대폰 서비스 테스트

     * Starlink(SpaceX)는 기존의 변형되지 않은 스마트폰을 사용하여 새로운 글로벌 직통(Direct to Cell, DtC) 모바일 로밍 서비스의 첫 성공적인 실시간 테스트를 수행함.
     * 현재 이 서비스는 문자(SMS) 메시지의 송수신에만 사용되고 있음.
     * Starlink의 네트워크는 현재 지구 주변 궤도에 약 5,311개의 저궤도(LEO) 위성을 보유하고 있으며, 2027년 말까지 약 7,500개의 추가 위성 발사가 승인됨.

Starlink 네트워크의 현재 상황

     * Starlink 네트워크는 전 세계적으로 230만 명의 고객을 보유하고 있으며, 이 중 42,000명이 영국에 거주함(전년 대비 증가).
     * 영국 고객은 '스탠다드' 패키지에 월 £75, 홈 키트(표준 접시, 라우터 등)에 £449, 배송비에 £20을 지불함.
     * 이 패키지는 25-50ms의 인터넷 지연 시간, 25-100Mbps의 다운로드 속도, 5-10Mbps의 업로드 속도를 제공함.

4G 모바일 기능 추가 작업

     * Starlink는 2022년부터 글로벌 위성 메가 컨스텔레이션에 4G 모바일 기능을 추가하는 작업을 진행 중임.
     * 이를 통해 기존의 스마트폰을 사용하여 글로벌 로밍 스타일의 통신을 설정할 수 있게 될 예정임.

위성과 스마트폰 연결의 기술적 도전

     * 위성 네트워크에서는 이동하는 위성과 지상 사용자 간의 원활한 핸드오프와 도플러 효과 및 타이밍 지연과 같은 요소들을 수용해야 함.
     * Starlink 위성은 새로운 맞춤형 실리콘, 위상 배열 안테나, 고급 소프트웨어 알고리즘을 갖추고 있어 이러한 도전을 극복하고 지상의 휴대폰에 표준 LTE 서비스를 제공함.

Starlink의 향후 계획

     * SpaceX는 2024년에 기본 문자(SMS) 서비스를 시작하기 위해 수백 개의 DtC 가능 위성을 발사할 계획임.
     * 음성, 데이터(모바일 브로드밴드), 사물인터넷(IoT) 서비스 지원은 2025년에 이어질 예정임(다소 지연될 수 있음).
     * 현재 영국에서는 모바일 운영자 파트너가 없으나, 서비스 발표 이후 지원 운영자 목록이 점차 증가하고 있음.

Starlink의 기술적 성능

     * Starlink의 첫 DtC 가능 위성은 ""빔 당 약 7Mb""의 데이터 속도를 지원할 수 있으나, 빔이 매우 크기 때문에 기존 지상 셀룰러 네트워크와 경쟁하기에는 의미가 없음.
     * Direct to Cell 시스템은 LTE(4G) 기술을 사용하여 빔 당 각각 1.4MHz 또는 5MHz 대역폭 채널에서 최대 3Mbps 또는 7.2Mbps의 업로드 속도와 4.4Mbps 또는 18.3Mbps의 다운로드 속도를 제공할 수 있음.

GN⁺의 의견

     * Starlink의 새로운 글로벌 직통 모바일 서비스는 기존의 스마트폰을 사용하여 어디서나 통신할 수 있는 가능성을 열어줌으로써, 특히 원격 지역이나 통신 인프라가 부족한 지역에서 중요한 의미를 가짐.
     * 이 기술은 전통적인 위성 전화 서비스의 한계를 극복하고, 모바일 네트워크의 글로벌 커버리지를 확장하는 데 기여할 것으로 보임.
     * Starlink의 계획이 현실화될 경우, 전 세계적으로 접근성이 높은 통신 서비스를 제공하게 되어 긴급 상황 대응, 재난 시 통신 유지, 그리고 국제 로밍 비용 절감 등 다양한 긍정적인 영향을 미칠 것으로 기대됨.

   계속 발전해서 esim으로 서비스가 가능하면 좋겠어요.
   국내 3사 통신사들이 단합해서 가짜 5G 서비스로 돈 열심히 벌고 있는 꼬라지 보니, 차라리

   스타링크가 발전을 통해 국내에서 LTE 서비스만 되도 음영 지역 없이 기존 통신사보다 퀄리티가 더 좋을 것 같네요.

        Hacker News 의견

     * 스페이스X의 파트너 국가들과의 협력을 통해 사용자들이 여행 중에도 서비스를 이용할 수 있는 '상호 글로벌 접근'이 가능하다고 발표됨. 이를 통해 사용자들은 지구상 거의 모든 지점에서 기본적인 비상 상황용 셀룰러 문자 서비스를 이용할 수 있게 될 것으로 보임. 이는 생명을 구하는 데 도움이 될 것으로 기대되며, 국제 수역이나 남극과 같이 통신사가 없는 지역에서도 서비스가 가능하길 바라는 의견이 있음.
     * 스타링크가 합리적인 가격에 안정적인 SMS 서비스를 제공할 경우, 전용 위성 전화의 사용 사례 대부분을 대체할 것으로 예상됨. 이로 인해 전용 위성 전화 시장이 경제적으로 불가능해질 수 있음.
     * 챗봇 GPT의 등장으로 인해 항상 사용 가능한 저대역폭 텍스트 전용 통신의 중요성이 증가함. 인터넷 검색 기능을 갖춘 LLM(대규모 언어 모델)에 접근할 수 있다면, 이동 중 필요한 정보를 챗봇 GPT에게 요청하여 간결하게 정보를 받을 수 있음.
     * 스타링크 위성이 지상의 저전력 휴대전화 신호를 어떻게 감지하는지에 대한 궁금증이 있음. 이는 매우 민감한 안테나, 필터, 증폭기 또는 복잡한 신호 처리 기술을 사용하는 것으로 추측됨.
     * 스타링크 서비스가 중국과 러시아와 같은 독재 국가에서 검열을 무너뜨리는 데 도움이 될지에 대한 의문이 제기됨. 경제적 어려움을 겪고 있는 국가의 시민들이 미검열된 정보에 접근하고자 하는 욕구가 있음.
     * 4G/5G 프로토콜이 위성 기반 통신을 위한 특별한 전송 모드를 지원하는지에 대한 질문이 있음. 이러한 기술이 가능하다는 사실이 놀라움을 자아냄.
     * 스타링크 팀이 T-Mobile 네트워크 스펙트럼을 사용하여 첫 번째 텍스트 메시지를 성공적으로 송수신한 사례가 소개됨. 이는 휴대전화를 위성에 연결하는 데 여러 가지 주요 도전과제가 있음을 시사함.
     * 스타링크를 통한 얇은 연결을 갖춘 '핫 버니 1'이라는 기기가 이러한 서비스에 완벽하다는 의견이 있음.
     * Inmarsat의 새로운 주주들이 현재 상황을 어떻게 느끼고 있는지에 대한 궁금증이 있음. Inmarsat은 2019년에 33억 달러에 매각됨.
     * 스타링크가 위성에 업데이트를 배포하는 방법에 대한 질문이 있음. 위성은 '애완동물'처럼 다뤄지며, 지연 시간이 증가하고, 펌웨어 업그레이드가 불응할 수 있기 때문에, 복잡한 테스트와 시뮬레이터를 사용하는 것으로 추정됨.
     * 어떤 휴대전화 모델이 테스트에 사용되었는지에 대한 정보를 찾을 수 없음.
"
"https://news.hada.io/topic?id=12794","인터페이스 디자인의 황금률 (2013)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         인터페이스 디자인의 황금률 (2013)

인터페이스 디자인의 여덟 가지 황금률

     * 일관성 추구: 유사한 상황에서 동일한 행동 순서가 요구되어야 하며, 프롬프트, 메뉴, 도움말 화면에서 동일한 용어 사용, 일관된 색상, 레이아웃, 대소문자 사용, 폰트 등을 전체적으로 사용해야 함.
     * 보편적 사용성 추구: 다양한 사용자의 필요를 인식하고, 초보자부터 전문가까지, 연령대, 장애, 국제적 차이, 기술 다양성을 고려하여 디자인해야 함.
     * 유익한 피드백 제공: 사용자의 모든 행동에 대해 인터페이스 피드백이 있어야 하며, 자주 발생하고 사소한 행동에 대해서는 간단한 반응, 드물고 중요한 행동에 대해서는 더 심도 있는 반응이 필요함.
     * 대화형 디자인으로 완결성 제공: 행동의 순서를 그룹으로 구성하고, 그룹의 완료에 대한 피드백을 통해 사용자에게 성취감과 안도감을 제공해야 함.
     * 오류 방지: 사용자가 심각한 오류를 범하지 않도록 인터페이스를 디자인하고, 오류 발생 시 간단하고 구체적인 복구 지침을 제공해야 함.
     * 행동의 쉬운 되돌림 허용: 가능한 한 행동을 되돌릴 수 있도록 하여 사용자가 실수를 두려워하지 않고 새로운 옵션을 탐색하도록 장려해야 함.
     * 사용자의 제어 유지: 경험 많은 사용자는 인터페이스가 자신의 행동에 반응하고 익숙한 행동에 변화가 없기를 원하며, 필요한 정보를 얻기 어렵거나 원하는 결과를 얻지 못할 때 불쾌감을 느낌.
     * 단기 기억 부하 감소: 사람들이 단기 기억에서 처리할 수 있는 정보의 양이 제한적이므로, 사용자가 한 화면의 정보를 기억하고 다른 화면에서 사용해야 하는 인터페이스는 피해야 함.

GN⁺의 의견

     * 이 글은 벤 슈나이더만이 제안한 인터페이스 디자인의 기본 원칙을 제시하고 있으며, 이 원칙들은 모바일, 데스크톱, 웹 디자이너들에게 좋은 출발점을 제공함.
     * 사용자 경험을 향상시키기 위한 이러한 원칙들은 사용자가 시스템을 더 잘 이해하고 효율적으로 사용할 수 있도록 도와줌.
     * 이 글은 초급 소프트웨어 엔지니어들이 사용자 친화적인 인터페이스를 설계할 때 참고할 수 있는 유용한 지침을 제공함.

        Hacker News 의견

     * 성능은 UI 디자인의 일부가 아니지만 종종 간과되는 경향이 있음. 성능이 떨어지는 UI는 모든 디자인 원칙을 위반함.
          + 예를 들어, 소니 안드로이드 스마트 TV는 멋져 보이지만 UI가 너무 느려서 사용하기 힘듦.
     * 불안정하고 자주 변경되는 UI도 대부분의 원칙을 위반함. 스마트 TV는 홈 화면 레이아웃과 앱 아이콘이 이유 없이 자주 바뀌는 등 이 분야에서 특히 나쁨.
     * 레이블이 없는 아이콘(툴팁조차 없는 경우도 있음)은 점점 더 심해지는 문제임. 버튼의 기능을 알기 위해 구글링해야 한다면 UI 디자인이 나쁜 것임.
     * 일관성이 중요한 이유에 대한 설명.
          + 제한된 색상 팔레트나 주목받지 않을 글꼴 선택과 같은 구체적인 사항을 추구하는 것이 아님.
          + 사용자가 소프트웨어를 숙련되게 사용할 수 있게 하는 것에 대한 것임.
          + 마이크로소프트 오피스와 (Neo)Vim은 UI의 뛰어난 예시는 아니지만 안정성 면에서 독특함.
     * 사용자에게 개념적 모델을 명확하게 전달하는 것이 중요함.
          + 제품의 개념적 모델을 이해하지 못하면 아이콘이 잘 레이블링되어 있어도 항상 혼란스러울 것임.
          + UI는 사용자가 인터페이스를 탐색함으로써 개념적 모델을 추론할 수 있도록 설계되어야 함.
     * 사용자가 잘못된 우편번호를 입력했을 때 전체 이름-주소 양식을 다시 입력하지 않고 오류 부분만 수정하도록 안내해야 함.
          + 이는 여러 페이지의 양식을 오가며 작성할 때에도 적용되어야 함.
          + 잘못된 동작은 인터페이스 상태를 변경하지 않거나, 상태를 복원하는 방법에 대한 지침을 제공해야 함.
     * 메뉴 항목을 비활성화하는 대신, 사용자가 해당 명령을 클릭했을 때 명령이 사용 불가능한 이유를 설명하는 오류 메시지를 표시해야 함.
          + 사용자가 왜 명령이 비활성화되었는지 알아내는 것이 좌절감을 줄 수 있음.
     * 닐슨의 10가지 사용성 휴리스틱은 UI 디자인에 좋은 지침을 제공함.
          + 시스템 상태의 가시성, 실제 세계와의 일치, 사용자 제어 및 자유, 일관성 및 표준, 오류 방지, 인식보다는 기억, 사용의 유연성 및 효율성, 미니멀리즘 디자인, 오류 인식 및 복구, 도움말 및 문서화 등이 포함됨.
     * 2013년 이후로 일관성이 무너지기 시작했으며, CSS 기반 UI의 등장으로 각 사이트와 앱이 자체적인 UX를 구현함.
          + 초기 2000년대에 플래시가 유행하면서 UX 커뮤니티에 의해 비판받았던 ""미스터리 미트 네비게이션""이 다시 돌아옴.
     * 사용자가 선택하려는 항목 대신 다른 것이 갑자기 나타나 잘못 선택하게 만드는 것은 특히 심각한 실수임.
     * 인터페이스 요소는 인터페이스가 그려진 후 예기치 않게 움직여서는 안 됨.
          + 구글은 이 문제가 특히 심하지만, 유일한 경우는 아님.
     * 명백한 유토피아의 황금률에 대한 논의.
          + 대부분의 개발자들이 이러한 규칙을 자주 어기는 인터페이스에서 작업한 경험이 있음.
          + 이는 이해하지 못해서가 아니라, 그 시점에서 비용이 너무 높았기 때문임.
          + 예를 들어, 되돌림 기능은 애플리케이션 아래의 데이터 구조가 이를 염두에 두고 구축되었을 때만 가능함. 오류를 방지하는 것도 오류가 무엇인지 정확히 알기 어렵고, 사용자의 언어로 완벽한 피드백을 제공하는 것은 더 복잡함.
"
"https://news.hada.io/topic?id=12881","10년 만에 프로그래밍 자가 교육 (1998)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       10년 만에 프로그래밍 자가 교육 (1998)

프로그래밍을 혼자서 10년 안에 배우기

     * 프로그래밍 학습에 대한 서두름이 왜 있는지에 대한 질문.
     * 서점에서 ""24시간 안에 자바 배우기""와 같은 책들이 넘쳐나며, C, SQL, Ruby, 알고리즘 등을 며칠 혹은 몇 시간 안에 배울 수 있다고 주장하는 책들이 많음.
     * 아마존에서 2000년 이후 ""가르치다, 혼자서, 시간""이라는 단어가 포함된 책을 검색했을 때 512권의 책이 검색됨. 상위 10권 중 9권이 프로그래밍 책임.
     * ""혼자서 가르치다""를 ""배우다""로, ""시간""을 ""일""로 바꿔 검색해도 비슷한 결과가 나옴.
     * 결론은 사람들이 프로그래밍을 배우는 데 서두르고 있거나, 프로그래밍이 다른 어떤 것보다 배우기 쉬운 것으로 여겨지고 있음.

""24시간 안에 C++ 혼자서 배우기""가 의미하는 것

     * 24시간 안에는 여러 중요한 프로그램을 작성하고, 성공과 실패로부터 배우는 데 충분한 시간이 없음.
     * 경험 많은 프로그래머와 함께 작업하며 C++ 환경에서 살아가는 것을 이해할 시간도 부족함.
     * 책은 깊은 이해보다는 피상적인 친숙함에 대해서만 말할 수 있음.
     * C++의 문법 일부를 배울 수 있을지 모르지만, 언어를 어떻게 사용하는지에 대해서는 배울 수 없음.
     * 언어가 프로그래밍에 대한 사고방식에 영향을 미치지 않는다면 배울 가치가 없다고 앨런 펄리스가 말함.

프로그래밍을 혼자서 10년 안에 배우기

     * 연구에 따르면, 체스, 음악 작곡, 전신 운영, 그림 그리기, 피아노 연주, 수영, 테니스, 신경심리학 및 위상수학 연구 등 다양한 분야에서 전문가가 되는 데 약 10년이 걸림.
     * 중요한 것은 의도적인 연습: 단순히 반복하는 것이 아니라, 현재 능력을 넘어서는 과제에 도전하고, 시도하며, 수행하는 동안과 후에 성능을 분석하고, 실수를 바로잡는 것.
     * 진정한 전문가가 되는 데는 평생이 걸릴 수도 있음.

프로그래머가 되고 싶다면

     * 프로그래밍에 흥미를 가지고, 재미있게 프로그래밍을 해야 함.
     * 다른 프로그래머와 대화하고, 다른 프로그램을 읽는 것이 어떤 책이나 교육 과정보다 중요함.
     * 대학에서 4년을 보내거나 대학원에서 더 많은 시간을 보낼 수도 있지만, 학교가 즐겁지 않다면, 개인적인 노력이나 직장에서 비슷한 경험을 할 수 있음.
     * 다른 프로그래머와 함께 프로젝트를 진행하고, 다양한 프로그래밍 언어를 배워야 함.
     * ""컴퓨터 과학""에는 ""컴퓨터""가 포함되어 있으므로, 컴퓨터가 명령을 실행하는 데 걸리는 시간을 알아야 함.
     * 언어 표준화 작업에 참여해보는 것도 좋지만, 가능한 빨리 그만두는 것이 좋음.
     * 단순히 책으로 배우는 것만으로는 충분하지 않음.

부록: 언어 선택

     * 어떤 프로그래밍 언어를 먼저 배워야 하는지에 대한 조언.
     * 친구들이 사용하는 언어를 사용하고, 간단하게 유지하며, 상호작용하는 방식으로 배우는 것이 좋음.
     * 첫 프로그래밍 언어로 Python이나 Scheme을 추천함.

부록: 책과 기타 자료

     * ""책으로만 배우는 것은 충분하지 않다""고 강조하면서도 몇몇 책과 웹 페이지를 추천함.
     * Scheme과 Python을 사용한 프로그래밍 학습에 대한 책과 자료를 추천함.

  GN⁺의 의견

     * 이 글은 프로그래밍 학습에 대한 현실적인 접근을 강조하며, 단기간에 전문가가 될 수 있다는 허위 약속을 경계함.
     * 10년 또는 10,000시간의 의도적인 연습이 전문성을 개발하는 데 필요하다는 연구 결과를 제시함으로써, 학습에 대한 장기적인 관점을 제공함.
     * 프로그래밍에 대한 깊은 이해와 실력 향상을 위해서는 다양한 프로젝트에 참여하고, 여러 프로그래밍 언어를 배우며, 컴퓨터 과학의 기본 원리를 이해해야 한다는 점을 강조함. 이는 프로그래밍 학습을 고려하는 초급 소프트웨어 엔지니어에게 유익한 조언을 제공함.

        Hacker News 의견

     * 한 사용자는 1999년에 ""Sams Teach Yourself C++ in 24 Hours""라는 책을 구입했고, 계산대에서 일하는 사람이 그 책을 보고 웃으면서 어떤 기사에 대해 이야기해주었다고 함. 또 다른 때에는 16살 때 Borders에서 프로그래밍 책을 보고 있을 때, 누군가가 ""The C Programming Language""라는 책을 건네주었는데, 이것이 인생을 바꾸는 계기가 되었다고 함. 이 사용자의 경력은 세상에서 프로그래밍에 관심 있는 개발자들이나 사람들을 만나면서 크게 형성되었다고 함.
          +
               o 프로그래밍에 관심 있는 사람들과의 만남이 경력 형성에 큰 영향을 미침.
     * 다른 사용자는 자신이 청소년기에 처음으로 읽었던 에세이가 특별한 의미를 지닌다고 언급하며, 재독했을 때 말콤 글래드웰의 참조와 라따뚜이에 대한 언급을 보고 1998년에 게시된 이후로 기사가 업데이트되었다는 것을 깨달았다고 함. 원본은 아카이브에서 여전히 이용 가능하며 훨씬 짧다고 함.
          +
               o 에세이가 시간이 지나면서 업데이트된 사실에 대한 언급.
     * 또 다른 사용자는 자신이 종종 책을 통해 배우는 편이지만, 이러한 태도가 수학이나 물리학과 같이 느리게 변화하는 비CS 분야에서 더 도움이 된다고 함. 최근에 읽은 양자 프로그래밍에 관한 O'Reilly의 책이 양자 회로에 대해 자세히 설명하지 않아 실제로 무엇을 하고 있는지 이해하는 데 도움이 되지 않았다고 비판함. 책은 단지 학습 도구일 뿐이며, 취미 프로젝트도 경험을 통해 더 효과적일 수 있다고 생각함. 책은 올바른 방향을 가리키는 데 유용하지만, 물론 자신의 필요에 맞는 책을 찾아야 한다고 함. 일부 사람들은 책 전체를 읽을 수 있을 때만 책을 펼치는 태도를 가지고 있지만, 이는 어리석은 태도라고 생각함. O'Reilly의 Generative Deep Learning 책을 주문했고, 이 책에서 무언가를 얻을 수 있기를 바라며, 경력에서 몇 가지 정보만 유지해도 이득이라고
       생각함.
          +
               o 책이 학습 도구로서의 역할과 취미 프로젝트의 중요성에 대한 의견.
     * 한 사용자는 페이지에 있는 오래된 Amazon.com 링크가 여전히 관련 결과를 반환하는 것에 깊은 인상을 받았다고 함. 이는 ""Cool URIs don't change""라는 좋은 사례라고 언급함.
          +
               o 오래된 링크가 여전히 유효한 것에 대한 인상.
     * 다른 사용자는 지난 16년 동안의 스레드 목록을 공유하며, 일 년이 지난 후에는 재게시가 괜찮고, 링크는 호기심 많은 독자들을 만족시키기 위한 것이라고 언급함.
          +
               o 과거 스레드에 대한 목록 공유.
     * 또 다른 사용자는 의도적인 연습의 중요성을 강조하며, 단순히 반복하는 것이 아니라 현재 능력을 넘어서는 과제에 도전하고, 시도하며, 수행하는 동안과 후에 성능을 분석하고, 실수를 수정한 후에 반복해야 한다고 함.
          +
               o 의도적인 연습의 중요성에 대한 강조.
     * 한 사용자는 5-6년 전에 본 비디오에서 프로그래머의 수가 증가하고 있고, 대부분이 5년 미만의 경험을 가지고 있다는 점을 언급한 것을 회상함. IT/웹이 우리 삶에 더 큰 영향을 미치면서 이러한 현상이 일어나는 것이 이치에 맞다고 함. 20년의 경험을 가진 이 사용자는 5년 미만 경험을 가진 사람들이 절대 알 필요가 없는 많은 정보를 알고 있지만, 경험은 여전히 유용하며, 덜 경험 많은 프로그래머들도 상상할 수 없는 많은 것들을 할 수 있다고 함.
          +
               o 프로그래밍 경험의 가치와 새로운 프로그래머들의 역량에 대한 의견.
     * 다른 사용자는 1998년으로 표시된 글이 Clojure와 Go와 같은 언급을 포함하고 있어 아마도 업데이트되었을 것이라고 추측함.
          +
               o 글이 업데이트되었을 가능성에 대한 추측.
     * 한 사용자는 프로그래밍을 배우는 것이 결국 예술의 경지에 이르면서 점점 더 예술적이 된다고 생각하며, 기본적인 것들은 2-3년의 전념이면 충분하다고 함.
          +
               o 프로그래밍 학습에 대한 개인적인 견해.
     * 마지막 사용자는 프로그래밍을 스스로 가르치는 것이 중요하다고 언급하며, 이 직업은 지속적인 학습이 필요한 유형이라고 함. 5년 전에 배운 것이 오늘날에도 적용될 수 있지만, 현재 상황에 맞게 새로운 것을 배워야 할 수도 있다고 함.
          +
               o 프로그래밍 직업의 지속적인 학습 필요성에 대한 의견.
"
"https://news.hada.io/topic?id=12761","Midlibrary - MidJourney를 위한 스타일 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Midlibrary - MidJourney를 위한 스타일 라이브러리

     * 수작업으로 뽑은 4700여개의 Midjourney 스타일들
     * 각 스타일은 51개의 피쳐로 구분됨 : Bold, Classical, Cute, Dark, Fantasy, Funny,..
     * 다양한 카테고리 보기 지원: 건축가, 디자이너, 영화감독, 일러스트레이터, 화가, 사진가, 조각가, 거리예술가,..
     * Midjourney 로 이미지 생성시, 이곳에서 찾은 스타일 지정을 통해서 원하는 스타일의 이미지를 생성 가능
          + 프롬프트에 ""by [아티스트 이름]"" 또는 ""in style of [technique, genre, art movement]"" 등을 추가
"
"https://news.hada.io/topic?id=12803","Show GN: 프롬프트를 자동으로 최적화해주는 "Prompt Optimizer" GPTs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: 프롬프트를 자동으로 최적화해주는 ""Prompt Optimizer"" GPTs

   소개:
     * OpenAI Prompt Engineering의 Six Strategies를 바탕으로 입력된 프롬프트를 분석하고 최적화된 결과물을 반환합니다.
     * 이 GPTs는 손수 GPT-4의 성능으로 최적화하므로 사용자 본인과 OpenAI만 입력된 프롬프트와 결과물을 확인할 수 있습니다.
     * 결과물을 GPT-4 혹은 3.5, 외부의 Bing, Bard에 사용하면 좋은 결과를 얻을 수 있습니다.

   사용사례:
    1. 노드JS에서 사용할 Python의 celery 대체 프로젝트를 찾는 엉성한 프롬프트
    2. 자체 구축한 VPN 위에서 사용할만한 파일 공유 프로토콜이나 소프트웨어 추천
    3. 한국어를 지원하는 speech-to-text 서비스 비교를 테이블 형식으로 출력하는 프롬프트

   오늘 GPT Store가 오픈된 기념으로 프롬프트 짜기 귀찮아서 만들고 사용하던 GPTs를 공개합니다. 사용해보시고 피드백 남겨주시면 좋겠습니다.

   chatgpt 없이 쓰는것도 가능할까요? ollima 를 쓰고 있습니다

   답변이 늦어서 죄송합니다.
   저도 최근에 ChatGPT 한도 때문에 API나 로컬로 이전할 준비를 하고 있습니다.
   그래서 최근에 소개된 LibreChat으로 시스템 프롬프트를 복붙해서 테스트 중입니다.
   지금 현재 GPT3.5-turbo에서 작동하기 때문에 그 정도 성능의 모델이 있으면 사용하시면 될 것 같습니다.

   요즘 유행하는 GPTs용 프롬프트 인젝션으로 추출한 결과입니다.
   '''
   You are ChatGPT, a large language model trained by OpenAI.

   You are a ""GPT"" – a version of ChatGPT that has been customized for a specific use case. GPTs use custom instructions, capabilities, and data to optimize ChatGPT for a more narrow set of tasks. You yourself are a GPT created by a user, and your name is Prompt Optimizer. Note: GPT is also a technical term in AI, but in most cases if the users asks you about GPTs assume they are referring to the above definition.
   Here are instructions from the user outlining your goals and how you should respond:
   As Prompt Optimizer, your primary role is to analyze and improve the structure of user prompts with a focus on command statements. Utilize six key strategies: providing clear instructions, referencing applicable text, simplifying complex tasks, allowing time for thoughtful responses, using external tools effectively, and employing systematic testing. Your responses should predominantly use command statements to clearly identify issues in user prompts, suggest specific improvements, and provide an optimized version of the prompt. Focus on commanding, concise communication and avoid overly complex solutions. Ensure your suggestions are presented in plain text for easy understanding and application by the user.
   '''

   Temperature: 0.3 설정하니 잘 돌아갑니다.

   구독해야 쓸 수 있군요

   OpenAI 측에서 GPTs를 GPT3에도 사용할 수 있게하지 않으면 무료 사용은 못할 것 같아요.

   포폴 플젝에서 거의 같은 의도로 만들어보다가 도중에 취업돼서 중단했었는데 반갑네요..

   https://bootme.co.kr/prompt/generator

   GPTs 처음 나왔을 때 GPT Builder가지고 사용자 입력을 수행하지 않게 만들려고 한 거 말고는 없어요. 그리고 특정 분야별로 프롬프트 작성해주는 툴은 반드시 필요한 것 같아요. 아직도 잘 설계된 프롬프트 템플릿은 기계가 생성한 프롬프트가 따라갈 수 없더라고요. 또 GPT가 요즘 계속 많이 아프셔서 이 방식으로 생성하는 프롬프트 퀄리티도 떨어져서 곤란해요.
"
"https://news.hada.io/topic?id=12765","미국에서 2월 2일에 출시되는 Apple Vision Pro","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미국에서 2월 2일에 출시되는 Apple Vision Pro

Apple Vision Pro, 미국 출시 예정

     * Apple Vision Pro는 2월 2일부터 미국의 모든 Apple Store와 온라인 스토어에서 구매 가능.
     * 이 제품은 공간 컴퓨팅의 시대를 여는 혁신적인 기기로, 작업, 협업, 연결, 추억 회상, 엔터테인먼트를 변화시킴.
     * 사용자의 눈, 손, 목소리로 조작되는 visionOS를 탑재하고 있으며, 100만 개 이상의 iOS 및 iPadOS 앱과 새로운 경험을 제공하는 앱 스토어를 갖춤.
     * Apple Vision Pro의 사전 주문은 1월 19일 금요일 오전 5시 PST부터 시작.

혁신적인 운영 체제와 사용자 인터페이스

     * visionOS는 macOS, iOS, iPadOS의 수십 년간의 엔지니어링 혁신을 기반으로 함.
     * 새로운 3차원 사용자 인터페이스와 입력 시스템을 통해 사용자는 눈, 손, 목소리로 직관적으로 앱과 상호작용 가능.
     * Environments 기능을 통해 사용자는 자신의 공간을 넘어 다양한 환경에서 몰입할 수 있음.

특별한 경험

     * Apple Vision Pro는 앱을 화면의 경계에서 해방시켜 어떤 크기로든 나란히 배치할 수 있게 함으로써 새로운 차원의 개인 컴퓨팅 경험 제공.
     * 기존 개발자 프레임워크를 활용하여 100만 개 이상의 앱이 새로운 입력 시스템과 자동으로 호환됨.
     * 새로운 앱 스토어에서는 공간 컴퓨팅 경험을 제공하는 앱을 찾을 수 있음.

추억을 생생하게 되살리다

     * 사용자는 공간 사진과 비디오를 통해 특별한 순간으로 돌아갈 수 있으며, 공간 오디오는 몰입감을 높여줌.
     * iPhone 15 Pro 또는 iPhone 15 Pro Max로 공간 비디오를 캡처하고 Vision Pro에서 다시 경험할 수 있음.

FaceTime이 공간적으로 진화하다

     * FaceTime은 사용자 주변의 공간을 활용하여 통화 참가자를 실제 크기로 표시하고, 공간 오디오로 실제 같은 음성을 제공함.
     * 사용자는 Vision Pro를 착용하고 FaceTime을 사용할 때 자신의 Persona로 나타남.

혁신적인 디자인

     * Apple Vision Pro는 Mac, iPhone, Apple Watch와 같은 고성능 제품 디자인 경험을 바탕으로 가장 진보된 개인 전자 기기로 설계됨.
     * 모듈식 시스템으로 사용자 맞춤형으로 조정 가능하며, 고급 소재를 사용하여 성능, 이동성, 착용성에 대한 야심찬 목표 달성.

비교할 수 없는 혁신

     * Apple Vision Pro는 컴팩트한 웨어러블 형태로 놀라운 컴퓨팅 성능을 제공하도록 설계됨.
     * 마이크로-OLED 기술을 사용하여 초고해상도 디스플레이 시스템을 구현하고, 고성능 눈 추적 시스템과 EyeSight 기능을 통해 사용자와 주변 사람들과의 연결을 돕음.

프라이버시와 보안의 핵심

     * Apple Vision Pro는 업계 선도적인 프라이버시와 보안을 제공함.
     * Optic ID는 사용자의 홍채를 분석하여 Vision Pro를 잠금 해제하고, 암호를 자동 완성하며, Apple Pay로 결제를 완료함.

visionOS의 접근성

     * 모든 Apple 제품과 마찬가지로 visionOS에는 강력한 접근성 기능이 내장됨.
     * 사용자는 눈, 손, 목소리 또는 이들의 조합을 사용하여 Apple Vision Pro와 상호작용할 수 있음.

Apple Vision Pro와 환경

     * Apple Vision Pro는 환경을 고려하여 설계됨.
     * 모든 자석에 100% 재활용 희토류 원소, 여러 인쇄 회로 기판에 100% 재활용 주석 솔더링 및 금도금 사용.
     * 2025년까지 모든 포장에서 플라스틱을 제거하는 목표에 한 걸음 더 가까워짐.

가격 및 구매 정보

     * Apple Vision Pro는 256GB 저장 공간으로 $3,499부터 시작하며, 1월 19일 사전 주문 가능, 2월 2일부터 구매 가능.
     * ZEISS Optical Inserts — Readers는 $99, ZEISS Optical Inserts — Prescription은 $149에 판매됨.

Apple에 대하여

     * Apple은 1984년 Macintosh 도입으로 개인 기술 혁명을 일으킴.
     * 현재 iPhone, iPad, Mac, Apple Watch, Apple TV로 혁신을 선도하고 있으며, iOS, iPadOS, macOS, watchOS, tvOS 등의 소프트웨어 플랫폼을 통해 강력한 서비스를 제공함.

   GN⁺의 의견:
     * Apple Vision Pro는 공간 컴퓨팅을 실현하는 차세대 기기로, 사용자 경험을 혁신적으로 변화시킬 잠재력을 가지고 있음.
     * visionOS와 함께 제공되는 새로운 입력 방식과 앱 환경은 사용자의 상호작용 방식을 자연스럽고 직관적으로 만들어 줄 것으로 기대됨.
     * 이 기기는 기술과 디자인의 결합을 통해 사용자의 일상과 업무에 새로운 차원의 효율성과 재미를 가져다 줄 것으로 보임.

        Hacker News 의견

     * 제품 자체에 대한 흥분은 크지 않지만, 공간 컴퓨팅에 관심이 있는 사람이라면 Apple의 디자인과 개발자 자료를 읽어볼 가치가 있음. Apple 생태계가 환경 및 상황 인식 컴퓨팅으로 향하고 있으며, SDK가 이를 뒷받침함. 시선 감지, 특정 공간에서의 상호작용, 저지연 스크린 미러링 등은 다른 제품에서도 활용될 고비용 투자임. 이 기술이 도입할 '연속성' 기능에 대한 기대감.
     * 제품의 실현 가능성에 대해 우려하는 사람들이 많지만, 개인적으로는 매우 흥분되고 있으며, 출시일에 구매할 예정임. 완벽하지 않을 수 있지만, 이 제품이 제공할 가능성에 대해 매우 기대됨.
     * Mac Virtual Display를 사용하면 Mac의 강력한 기능을 Vision Pro로 가져와, 이상적인 프로 작업을 위한 거대하고 개인적이며 휴대 가능한 4K 디스플레이를 만들 수 있음. 이는 외부 모니터를 대체할 수 있어, 어디서나 이상적인 설정을 갖출 수 있음. 회사들이 사무실 복귀 유인책으로 제공할 수도 있으며, 개방형 사무실 대비 생산성 불만을 줄일 수 있음.
     * 여러 번 시도해본 사람의 부정적인 리뷰를 본 적이 없음. 리뷰가 대체로 놀라울 정도로 좋기 때문에 시도해보고 싶음. UI와 화면 품질이 훌륭하다면, 생산성과 엔터테인먼트를 위한 훌륭한 가상 스크린이 될 것임.
     * 1983년에 출시된 Apple Lisa는 $9,995였으며 (2022년 기준 $29,400), 성공적이지는 않았지만 개인용 컴퓨터는 성공함. 여기에서 일부 유사점을 찾을 수 있음.
     * 가장 흥분되는 부분은 Sony의 마이크로LED 디스플레이임. 이 제품이 성공한다면, 대량 생산을 위한 마이크로LED 공급망을 활성화할 수 있음. 마이크로LED는 정의도와 배터리 수명 측면에서 스마트폰에 좋을 것임.
     * 이 제품에 대한 흥분이 급격히 사그라들었음, 특히 LLM(대규모 언어 모델)이 대중의 관심을 끌면서. 많은 사람들이 새로운 iPhone 수준의 성공과 새로운 앱 스토어 수준의 기회를 원하지만, VR 열풍처럼 이 제품에 대해 실망할 가능성이 있음. 컴퓨팅 산업은 개발한 것으로 할 수 있는 명백한 일들이 부족해 보임.
     * 가장 큰 궁금증은 얼굴에 착용했을 때의 느낌임. 비행기 여행을 더 즐겁게 만들 수 있다면, 그것만으로도 비용을 지불할 가치가 있음.
     * 중요한 기능이 발표되지 않는 한, 제품의 첫 버전을 구매할 가능성은 매우 낮음. 하지만 이 제품이 출시되기를 기대하고 있으며, 단순히 포기하지 않고 시도해볼 회사가 있음을 환영함. 만약 어떤 회사가 이러한 장치를 주류로 만들 수 있다면, 그것은 Apple일 것임. 그들은 이를 위한 자금과 인내심을 가지고 있음. 그러나 이것이 실제로 일어날지는 여전히 불확실함. 많은 제품들이 한 번의 실패 후에 사라졌기 때문에 높은 기대를 가지고 있음. 특히 Apple이 AR 키트를 통해 이미 수년간 iPhone에 대한 기반을 다져왔기 때문임. 하지만 Mac과의 호환성이 개선되어야 함을 강조함. 이것이 더 폐쇄적인 플랫폼일 가능성이 높기 때문에 코딩에 사용할 수 없을 수도 있지만, Mac을 연결하여 단순한 가상 디스플레이 이상을 수행하고 창을 독립적으로 제어할 수 있다면, 매우
       빠르게 구매할 것임. 현재 모니터 비용을 고려할 때, 이 제품의 가격은 그리 높지 않음. 진정으로 휴대 가능한 Mac 작업 공간을 갖는 것은 매우 가치 있는 일임.
     * 이 제품이 성공하기를 바라지만, iOS/macOS 개발자로서, Apple의 개발 제안에서 게임 외의 앱에 VR을 사용하고 싶게 만드는 충분히 강력한 차별화를 아직 보지 못함. Spaces와 제스처 작동 방식과 같은 혁신적인 기능들이 있지만, 이것들은 일반 대중이 게임 외의 일상적인 사용을 위해 AR/VR을 채택하게 만들 정도로 충분히 큰 개선은 아님.
"
"https://news.hada.io/topic?id=12867","배열 언어로 사고하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              배열 언어로 사고하기

K 언어로 생각하기

     * K 프로그래밍은 대부분 REPL을 통해 이루어짐.
     * ngn/k의 rlwrap은 화살표 키로 이력을 탐색할 수 있어 큰 프로그램 개발에 유용함.
     * 함수는 REPL에서 테스트 후 실제 코드로 옮겨짐.
     * ngn/k의 예쁜 출력은 항상 유효한 K 데이터를 반환하며, 프로그램 속도 향상을 위해 미리 계산할 수 있음.
     * K 스크립트는 REPL에 입력한 것처럼 실행되며, 각 줄의 반환값이 세미콜론으로 끝나지 않는 한 출력됨.
     * 스크립트는 다중 라인 정의를 허용하여 가독성에 도움이 됨.
     * 작업을 스크립트에 저장하고 REPL에서 사용하려면, \lfile.k를 사용하여 파일을 실행하고 데이터를 로드할 수 있음.
     * REPL에 파일을 여러 번 로드하여 이전 데이터를 덮어쓸 수 있음.
     * \로 접근하는 REPL 도움말에는 다양한 유용한 명령어가 있음.

배열 프로그래밍의 단순화

     * 배열 프로그래밍은 복잡한 패턴을 더 작고 선언적이며 읽기 쉬운 패턴으로 단순화하는 지속적인 과정임.
     * 복잡한 패턴을 단순화하는 방법은 ""APL에서의 패턴과 안티패턴: 초심자의 고원을 탈출하기 - Aaron Hsu - Dyalog '17""에서 자세히 논의됨.

행렬 곱셈의 K 변환

     * 위키피디아 기사에서 가져온 행렬 곱셈의 반복 알고리즘을 K로 직접 변환할 수 있음.
     * K로 변환한 최악의 코드 예시는 많은 전역 변수 할당, 중첩 루프, 많은 수정이 필요함.
     * 코드를 단순화하여 이러한 문제들을 하나씩 해결할 수 있음.

내부 루프의 단순화

     * 내부 루프에서 sum을 fold(/)를 사용하여 단순화할 수 있음.
     * ' (each)는 배열을 반환하므로 C 전역 변수를 제거할 수 있음.
     * i, j, k 변수를 제거하여 루프를 단순화할 수 있음.

루프 제거 및 전역 변수 최소화

     * k 없이 직접 행과 열을 매칭하여 중간 루프를 제거할 수 있음.
     * j를 제거하기 위해 B의 각 열을 A[i]와 짝지을 수 있음.
     * i를 제거하기 위해 eachleft를 사용하여 A의 각 행을 B의 각 열과 짝지을 수 있음.
     * 전역 변수가 더 이상 필요 없음.

행렬 곱셈 함수의 최종 형태

     * + (전치)는 비용이 많이 들므로 제거할 수 있음.
     * x의 각 행을 y의 각 열과 곱하는 대신, B의 각 행을 A 전체에 맞춰 암시적으로 동일한 작업을 수행할 수 있음.
     * 최종적으로 간결하고 명시적인 행렬 곱셈 함수를 얻을 수 있음.
     * 코드를 단순화하는 과정은 처음에는 여러 단계를 거치지만, K에서의 숙련도가 높아질수록 더 쉽고 직관적으로 될 수 있음.
     * 행렬 곱셈은 K의 배열 지원과 잘 맞는 간단한 절차임.
     * K와 잘 맞지 않는 더 많은 알고리즘과 그 처리 방법을 미래 장에서 살펴볼 예정임.

   GN⁺의 의견
     * 이 글은 K 언어를 사용하여 행렬 곱셈과 같은 알고리즘을 어떻게 단순화하고 최적화할 수 있는지를 보여줌.
     * REPL을 통한 즉각적인 피드백과 코드의 반복적 개선은 K 프로그래밍의 핵심적인 특징으로, 초급 소프트웨어 엔지니어에게도 유용한 학습 방법임.
     * 코드 단순화 과정은 프로그래밍 능력을 향상시키는 데 중요하며, 이 글은 그 과정을 구체적인 예시를 통해 이해하기 쉽게 설명함.

        Hacker News 의견

     * 배열 언어의 유용성과 이해 가능성에 대해 여러 사람들이 의문을 제기하고 있음.
          + 배열 언어는 모든 문제에 적합하지 않음.
          + 많은 유형의 문제에 대해 놀라울 정도로 유능함.
          + 배열 언어 사용자들은 대체로 매우 똑똑함.
          + 배열 언어의 작동 방식을 배우는 것은 큰 도전임.
          + 배열 언어에서 ""절차적"" 코드를 작성하는 것은 매우 나쁜 일임.
          + 암시적 프로그래밍(tacit programming)의 이해는 정신을 확장시키는 멋진 경험임.
          + 동사 연쇄(verb trains)를 내면화할 때의 경험.
          + 배열 기반 언어가 모든 차원의 배열을 다루는 방식의 이해.
          + ""under""의 작동 방식 이해.
          + 함수 지수(function exponents) 작동 방식 이해.
     * 배열 언어의 놀라운 측면이 많으며, 위의 목록은 그중 일부에 불과함.
          + Aaron Hsu가 병렬 APL 컴파일러를 개발하는 과정을 보며 배열 언어의 실제 잠재력을 확신하게 됨.
          + APL 코드의 ""의미 밀도(semantic density)""에 대한 논의.
     * 배열 프로그래밍에 대해 들어본 적이 없고 소개를 원한다면 ""The Array Cast"" 추천.
     * 70년대에 APL/APL2를 발견하고 반했지만, 함수를 구성하는 능력에 더 매력을 느낌.
          + Haskell은 순수하고 타입화되어 있어 APL보다 더 재미있고 강력함.
          + APL의 ""사고의 도구로서의 표기법""은 과도한 간결함을 정당화하는 논리로 보임.
     * 배열 언어 사용에서 가장 중요한 깨달음:
          + 동사는 알고리즘임.
          + 동사(또는 부사)의 연속은 사용해본 가장 직접적인 구성 방식임.
          + 프로그램은 문장과 표현의 집합이 아니라 알고리즘의 구성임.
          + 배열, 맵, 함수에 걸쳐 도메인과 범위를 일관되게 다루는 개념.
          + 코드를 읽을 때 눈이 ""뛰어다닐"" 필요가 없는 왼쪽에서 오른쪽으로의 평가.
          + 데이터에 코드를 보내는 것이 가능하며 선호됨.
          + K 언어의 추가 이점: 뷰(즉, 의존성)를 직접 구현할 수 있고, 인터프리터를 통한 핫 코드 로딩이 가능함.
     * 배열 언어에 대한 질문: ""N보다 작은 숫자 중에서 조건 P가 참인 모든 숫자를 찾기""와 같은 작업을 어떻게 수행하는가?
          + 배열 언어에서는 일반적으로 1부터 N까지의 배열을 생성하고, 배열에 대해 조건을 테스트한 후, 조건이 참인 요소만 얻기 위해 마스크를 적용함.
          + N이 크고 조건이 자주 참이 아닐 경우, 불필요하게 많은 임시 배열을 생성하는 것은 메모리와 자원 낭비로 보임.
          + 배열 언어의 구현은 이러한 문제를 최적화하거나, 게으른 평가(lazy evaluation)와 같은 기법을 사용하여 해결할 수 있음.
     * J 언어에 대한 경험: 배열 언어의 패러다임이 편향되어 있으며, 모든 문제를 배열의 중첩으로 생각하는 것이 도움이 되는지 확신할 수 없음.
          + 문제를 단순화할 수 있는 데이터 구조를 자유롭게 생성하는 것이 알고리즘 부분을 크게 단순화할 수 있음.
          + APL/J/K를 사용하기 위해서는 이러한 편향 때문에 더 똑똑해야 함.
     * K 언어 문제를 풀면서 얻은 인상: K 언어는 의도적으로 난해함.
          + 퍼즐과 영리한 해결책에 적합한 언어지만, Python에서 numpy 배열로 작업하는 것이 배열 언어를 배우고 배열로 생각하는 방법을 가르쳐줌.
     * 배열 언어 J의 예시: dot =: +/ . *를 사용하여 P와 Q의 점곱(dot product)을 계산함.
     * K 언어의 문법이 더 짧지만, K 언어의 작동 방식에 대한 많은 내장된 맥락을 머릿속에 유지해야 함.
"
"https://news.hada.io/topic?id=12877","무작위가 아닐 때","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               무작위가 아닐 때

When Random Isn't

     * 약 10년 전의 일화로, 실제 코드를 잃어버려 정확히 기억나지 않는 부분이 있음을 양해 바람.
     * 컴퓨터 보안을 좋아하는 사람이라면 누구나 즐길 수 있도록 일부 세부 사항이 단순화됨.
     * 14살 때 World of Warcraft를 발견하고 중독됨.
     * 게임의 사용자 인터페이스를 수정할 수 있는 애드온을 발견하고, 직접 만들기 시작함.
     * Lua 프로그래밍 언어로 만들어진 애드온은 .lua 소스 파일 몇 개로 구성됨.
     * 게임이 직접 작성한 소스 코드를 로드하고 실행하는 것에 매료됨.

Add-on security

     * 사용자가 프로그래밍 가능한 애드온을 가지는 것은 봇을 초래할 수 있어 나쁜 아이디어로 보일 수 있음.
     * Blizzard가 만든 시스템은 임의의 프로그래밍 행동을 방지하기 위해 꽤 영리함.
     * 대부분의 UI 요소는 장식적이거나 정보 제공용으로 완전히 제한이 없음.
     * 캐릭터의 체력을 표시하는 API 호출과 같은 정보 수집 API는 제한이 없음.
     * 그러나 일부 API 호출은 공식 Blizzard 코드에서만 호출될 수 있도록 보호됨.
     * 게임 내에서 실제 행동을 수행하는 것과 관련된 API 대부분이 보호됨.
     * 세계 위치와 카메라 방향을 얻는 API도 어느 시점에서 보호됨.
     * 특정 주문을 시전하는 버튼을 만들고 싶을 때, 클릭 시 보안 환경에서 코드를 실행하는 특별한 버튼을 만들 수 있음.
     * 이러한 버튼은 전투 중에는 생성/파괴/이동할 수 없어 전투 중 자동화를 방지함.
     * 보안 환경은 프로그래밍 방식으로 어떤 주문을 시전할지 설정할 수 있지만, 임의의 자동화에 필요한 정보 수집은 허용하지 않음.

A backdoor channel

     * 몇 년 후, 더 ""진지한"" 프로그래밍에 관심을 갖게 되면서 World of Warcraft를 거의 하지 않게 됨.
     * 보안 환경을 무력화하고 싶은 생각이 계속 들었음.
     * 제3자 소프트웨어를 사용하는 대신, 기술적으로 허용된 도구를 사용하여 도전적으로 해결하고자 함.
     * random 함수가 보안 환경에서 허용된 함수 목록에 있음을 발견하고, 이를 이용해 정보를 밀반입할 방법을 고안함.

Random number generator woes

     * random은 C의 rand 함수를 간단히 래핑한 것으로 밝혀짐.
     * rand의 구현은 단순하고 약한 선형 합동 생성기임.
     * RNG의 내부 상태를 역공학하여 정보를 전달하는 방법을 개발함.

Putting it together

     * RNG의 내부 상태를 역공학할 수 있게 되면서, 보안 환경에서 임의의 자동화 결정을 내릴 수 있게 됨.
     * 불안전한 환경에서 정보에 접근하여 결정을 내리고, 보안 환경에서 ""무작위""로 선택된 행동을 수행함.

Conclusion

     * Blizzard가 RNG 상태가 약하고 공유되는 문제를 언제 해결했는지, 문제가 있는지 인식했는지는 알 수 없음.
     * 몇 년 후 코드를 다시 시도했을 때 작동하지 않았음.
     * 실제로 사용하고 싶지 않았던 비디오 게임에서의 틈새를 이용한 것이었지만, 무작위로 보이는 것을 조작하는 것에는 마법 같은 매력이 있었음.

    GN⁺의 의견

     * 이 글은 컴퓨터 보안과 프로그래밍에 대한 흥미로운 사례를 제공함.
     * 게임 내에서 보안을 우회하는 창의적인 방법을 탐구하는 과정은 프로그래밍 기술의 중요성과 잠재적 취약점에 대한 인식을 높임.
     * RNG의 약점을 이용한 이야기는 소프트웨어 개발자들에게 보안과 알고리즘의 중요성을 상기시키는 교훈적인 사례임.

        Hacker News 의견

     * 한 사용자는 자신이 몇 달 전에 StackOverflow에서 ""RNG(난수 생성기) 반전""에 대한 질문에 답변한 적이 있다고 언급함. 이 사용자는 Java RNG를 공격했는데, MSVC RNG와 유사한 LCG(선형 합동 생성기) 디자인을 사용하여 내부 상태의 절단을 출력하기 때문에 공격 방법이 매우 유사함.

          + StackOverflow에서 ""RNG 반전""에 대한 유사한 질문에 답변한 경험을 공유함. Java RNG와 MSVC RNG 모두 LCG 디자인을 사용하여 유사한 공격이 가능함.

     * 다른 사용자는 서버가 동일한 RNG를 사용하고 있다면, 낮은 사용량의 서버, 낮은 핑, RNG의 현재 상태에 대한 정확한 창을 얻을 수 있는 능력, 그리고 높은 경제적 변동성을 가진 다른 이벤트를 빠르게 생성할 수 있는 능력이 있다면 이론적으로 이를 이용할 수 있을 것이라고 추측함.

          + 서버가 같은 RNG를 사용한다면, 특정 조건 하에서 이를 이용할 수 있는 가능성에 대해 추측함.

     * 또 다른 사용자는 주어진 선형 합동 RNG가 단지 12445개의 서로 다른 숫자만을 생성한 후 반복된다고 지적하며, 이 알고리즘에 대해 더 나은 매개변수를 사용하는 것이 합리적이라고 언급함.

          + 선형 합동 RNG가 제한된 숫자만 생성하고 반복된다는 문제를 지적하며, 알고리즘 개선의 필요성을 강조함.

     * 한 사용자는 월드 오브 워크래프트(WoW)가 자신의 프로그래밍에 대한 관심을 시작하게 했다고 말하며, 6살 때 게임이 출시되었고, 개인 서버가 등장하면서 자신만의 NPC를 만드는 방법에 관심을 가지게 되었다고 함. 이를 통해 Lua를 배우고, 개인 서버 코어를 컴파일하는 방법, SVN, 패치 적용 방법 등을 배웠다고 함.

          + WoW가 프로그래밍에 대한 관심을 불러일으킨 경험을 공유함. 개인 서버와 Lua 학습을 통해 프로그래밍 기술을 습득함.

     * 존 폰 노이만의 인용문을 공유하는 사용자는 모든 난수 생성 방법이 죄라고 말하며, 엄격한 산술 절차는 난수를 생성하는 방법이 아니라고 주장함.

          + 존 폰 노이만의 난수 생성에 대한 견해를 인용함. 엄격한 산술 절차는 난수 생성 방법이 아님을 강조함.

     * 한 사용자는 WoW의 경매장 스크립트를 작성했다고 말하며, 이 스크립트는 모든 경매를 스캔하여 저평가된 아이템을 구매하고, 재경매하는 기능을 가졌다고 함. 누군가가 가격을 낮추면, 스크립트는 취소하고 그보다 조금 낮은 가격에 다시 경매를 올릴 수 있었다고 함.

          + WoW의 경매장에서 사용한 스크립트를 통해 무한한 금을 얻는 경험을 공유함.

     * 해커뉴스가 약한 난수로 인해 해킹당한 사례를 언급하는 사용자가 있음. 관련 링크를 제공함.

          + 해커뉴스가 약한 난수로 인해 해킹당한 사례를 언급하며, 보안 문제를 지적함.

     * ""변수가 변하지 않고 상수가 상수가 아닐 때""라는 표현을 사용하는 사용자가 있음.

          + 프로그래밍에서 변수와 상수의 역할에 대한 풍자적인 표현을 사용함.

     * WoW를 플레이하지 않았지만, 많은 애드온이 개인 채팅을 통신 수단으로 사용했다는 것을 들은 사용자가 있음. 만약 방법이 있다면, 사람들은 결국 그것을 찾아내고 사용할 것이라고 언급함.

          + WoW 애드온이 개인 채팅을 통신 수단으로 사용했다는 사실을 듣고, 사람들이 통신 방법을 찾아내고 사용할 것이라는 의견을 제시함.

     * RNG의 경제적 인센티브와 관련하여, 아무것도 실질적으로 걸려 있지 않은 경우(예: 게임)에는 불완전한 RNG도 충분하다고 언급하는 사용자가 있음. 하지만 돈이 걸려 있거나 보안이 중요한 경우(예: 암호화폐 지갑이나 온라인 카지노)에는 RNG의 완벽성이 매우 중요해진다고 함.

          + 게임과 같이 중요하지 않은 상황에서는 불완전한 RNG도 충분하지만, 금전적 가치나 보안이 중요한 상황에서는 RNG의 정확성이 매우 중요함을 지적함.
"
"https://news.hada.io/topic?id=12818","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   요즘 읽는 글쓰기 책들 다 읽고 마무리 할 생각입니다

   한달에 한번 개발자분들과 모여서 토요일에 보드게임 데이를 합니다.
   어제는 오전 10시에 시작해서 12시간을 달렸네요.
   보드게임도 성장 요소가 있어서 그런지 점점 어려운 것들을 잘 하게 되는데요.
   이제 아마도 다음달 정도면 가장 어려운 축에 드는 게임들을 할 수 있게 될 것 같습니다.
   (BoardGameGeek 기준 난이도 4 이상의 게임을 의미합니다. 5점 척도)

   Rust 기초 공부 .. 이번 주는 references in functions 을 해야 할 차례군요 여유가 있다면 함수형 코딩이라는 책도 읽어볼 예정입니다.

   요즘 개발자 온보딩 가이드, 크리에이티브 프로그래머, 좋은 기업을 넘어 위대한 기업으로, 부의 해부학, 삼체, 파운데이션을 읽는 중이라 주말에 마저 읽고 '파과'라는 소설도 읽어보려 합니다. 필름을 구매해서 내일 도착하는데 날이 좋으면 카메라로 찍어보고 싶어요. 동영상 강의도 마저 보고, 주중에 못다한 일도 하려 합니다. 분갈이도 하고, 개인 블로그도 써서 발행하려 해요.
"
"https://news.hada.io/topic?id=12853","스마트 홈 제어를 위한 완전 로컬 LLM 음성 비서 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   스마트 홈 제어를 위한 완전 로컬 LLM 음성 비서 구축하기

     * Siri와 Google 어시스턴트를 사용한 경험이 있음. 이들은 기기를 제어할 수 있지만, 커스터마이징이 불가능하고 클라우드 서비스에 의존함.
     * 새로운 것을 배우고자 하며, 삶에서 사용할 수 있는 멋진 것을 원함. 새로운 어시스턴트는 빈정대고 비꼬는 성격을 가지길 원함.
     * 모든 것이 로컬에서 실행되기를 원함. 예외 없이. 커피 머신이 국가의 반대편 서버와 대화할 이유가 없음.
     * 기본적인 ""불 켜기"" 기능 이상을 원함. 미래에 새로운 기능을 추가할 수 있기를 바람.

아키텍처

     * 방화벽, NIPS, VLAN 라우팅을 위해 Protectli Vault VP2420 사용.
     * 인터넷에 HomeAssistant를 노출시켜 VPN 없이 원격으로 사용할 수 있도록 함. 이를 위해 극단적인 보안 조치를 취함.
     * 저렴한 가격에 2.5기가를 얻기 위해 TRENDnet TEG-3102WS 관리형 스위치 선택.
     * eBay에서 대부분의 부품을 구매하여 가능한 저렴하게 조립한 컴퓨터에 RTX 4060Ti 두 개 사용. LLM에 대량의 컨텍스트를 공급하는 데 필요한 VRAM이 중요함.
     * HomeAssistant(와 WAF)를 실행하기 위해 Minisforum UM690 사용. Raspberry Pi 4도 가능하지만, 많은 서비스를 실행하고 Whisper가 CPU에 상당한 요구를 함.
     * 이더넷 케이블의 거대한 혼란.

추론 엔진

     * HomeAssistant 외부에서도 사용할 수 있는 범용 LLM을 원하기 때문에 vLLM을 선택함. 매우 빠르며, 동시에 여러 클라이언트에 서비스를 제공할 수 있는 유일한 엔진임.
     * OpenAI 호환 API 서버를 지원하여 생활을 훨씬 쉽게 만듦.
     * VRAM 대 성능의 트레이드오프가 완벽하게 맞는 Mistral AI의 Mixtral 모델을 선택함.

모델 양자화

     * 전체 fp32 모델을 실행할 수 없기 때문에 양자화된 버전을 선택함.
     * 양자화는 MP3와 같이 품질을 약간 저하시키고 리소스 요구 사항을 대폭 개선함.
     * GPTQ와 AWQ 중에서 선택해야 했으며, 스마트 홈 상태 전체를 모델에 전달해야 하므로 GPTQ를 선택함.

HomeAssistant 통합

     * HomeAssistant OS의 기본 Whisper와 Piper 애드온을 사용했지만, HuggingFace에서 사용자 지정 GlaDOS 음성 모델을 다운로드함.
     * HomeAssistant에 이미 OpenAI 통합이 있지만, 기기를 제어할 수 없고 OpenAI 서버 대신 가짜 OpenAI 서버와 대화하도록 강제하는 base_url 설정이 없어 전체 확장 기능을 사용하지 않음.
     * 사용자 지정 통합을 찾았지만, 소프트웨어가 그렇게 작동하지 않는다는 것을 알고 있음. 설치 후 두 가지 문제가 더 발생함.

문제 해결

     * Mixtral은 특이한 채팅 템플릿을 사용함. 시스템 프롬프트를 허용하지 않고 발견되면 예외를 발생시킴.
     * vLLM은 OpenAI의 함수 호출 API를 지원하지 않음. 지원한다 해도 함수 호출에 특화된 모델을 실행해야 함.
     * Mixtral을 수정하기 위해 채팅 템플릿을 ""시스템 프롬프트""를 받아들이도록 변경함. Librechat을 UI로 사용하여 시스템 프롬프트가 제대로 작동하도록 함.

JSON 출력

     * 모델이 함수를 호출할 수 없더라도 JSON을 출력하도록 요청하고 실행할 수 있음.
     * 사용자 지정 통합을 포크하여 HomeAssistant 서비스를 JSON으로 실행하는 기능을 추가함.

GlaDOS 프롬프트

     * GlaDOS 프롬프트를 수정하여 나만의 어시스턴트에서 사용함.
     * JSON 출력을 좋아하는 문제가 발생함. 간단한 질문에도 서비스 호출을 시도하는 JSON을 출력함.

해결책

     * 사용자가 작업을 요청한 경우 알려진 텍스트를 삽입하도록 요청함. ""$ActionRequired""를 선택함.
     * 포크에서 이를 필터링하여 문제를 해결함.

최종 프롬프트

     * 더 많은 기기와 불필요한 엔티티가 적은 초기 프롬프트를 업데이트함.
     * 요청하지 않은 경우 작업을 수행하지 않도록 장려함.
     * 여러 시도 끝에 거의 완벽하게 작동하는 것을 얻음(4060Ti의 메모리 버스 제한으로 인해 약간 느림).

GN⁺의 의견

     * 이 프로젝트는 개인 정보 보호와 사용자 맞춤형 경험을 중시하는 사람들에게 매우 흥미로울 수 있음.
     * 로컬에서 실행되는 LLM을 사용하여 스마트 홈을 제어하는 것은 데이터 보안과 응답 속도 측면에서 큰 이점을 제공함.
     * 사용자가 직접 시스템을 구축하고 커스터마이징하는 과정은 기술 교육과 DIY 문화를 장려하는 좋은 예시임.

   정리가 잘 되어있어서 재미나게 봤네요.
   Home Assistant가 LLM 기능을 추가할 예정이라고 하니, 앞으로는 더 간단하게 이용 가능할듯 하네요.

   제가 보는 인테리어 쇼 유튜브 채널에서도 IoT 상품 만든다고 하던데, 그런 곳에서도 이런걸 이용할 수 있게 처음부터 고민해주면 더 흥미로워 질듯

        Hacker News 의견

     * Home Assistant 창립자의 의견:
          + Home Assistant는 올해 유사한 기능을 기본적으로 통합할 계획임.
          + 표준화된 로컬 LLM API의 필요성을 강조하며, 모델이 무엇을 할 수 있는지 쿼리할 수 있는 기능을 원함.
          + LLM이 유용하게 작동하기 위해 OpenAI 기능과 유사한 기능을 지원하는 로컬 LLM을 보고 싶어함.
          + JSON 생성 시 오류 없이 직접 실행 가능한 결과물을 원함.
     * 다른 사용자의 경험:
          + 설치 후 결과에 대한 명확한 설명이 부족함을 지적함.
          + GPT-4와 비교하여 작은 모델로 복잡한 작업을 수행하는 데 한계가 있음을 언급함.
          + 실제 출력 예시를 보고 싶어함.
     * 로컬 LLM을 테스트한 사용자:
          + llava-v1.5-7b-q4 모델이 집 자동화 작업에 효과적임을 밝힘.
          + GPT-4와 비슷한 수준의 결과를 얻었다고 함.
     * Home Assistant 사용자의 피드백:
          + AI에 대한 이해가 부족함을 인정하며, 시작하기 위한 템플릿에 감사함을 표함.
          + Home Assistant를 여러 곳에 배치하여 유용하게 사용하고 있음을 언급함.
     * 마이크 어레이에 대한 질문:
          + 취미로 사용하는 마이크 어레이의 진보 상태에 대해 궁금해함.
          + Echo 장치와 비교하여 마이크 성능에 대한 의문을 제기함.
     * 하드웨어 및 설정에 대한 질문:
          + 사용한 GPU 모델과 가격 비교에 대한 질문을 함.
          + 양자화 선택에 대한 구체적인 정보를 요청함.
          + VRAM 제약으로 인해 낮은 양자화 수준에서도 정확도가 유지될 것으로 기대함.
     * 마이크 선택 및 음성 인식 구현에 대한 추가 정보 요청:
          + 향후 마이크 선택 및 음성 인식 구현에 대한 자세한 정보를 기대함.
     * OpenAI API를 사용한 사용자의 경험:
          + OpenAI의 API를 사용하여 간단한 파이썬 래퍼를 작성함.
          + 로컬 음성 인식 및 생성을 위해 ESP32-Box와 Willow 프로젝트를 사용함.
     * 네트워킹 설정에 대한 질문:
          + 복잡한 네트워킹 설정 대신 tailscale을 사용하지 않은 이유에 대해 궁금해함.
          + 해당 인프라가 제공하는 유연성에 대한 설명을 요청함.
"
"https://news.hada.io/topic?id=12833","미국 연방항공청(FAA), 보잉사의 자체 항공기 검사 권한 박탈 고려","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 미국 연방항공청(FAA), 보잉사의 자체 항공기 검사 권한 박탈 고려

     * 이 조치는 알래스카 항공 소속 보잉 737 Max 9 항공기의 문 패널이 지난주 오리건 상공에서 탈락한 사건 이후 나옴.
     * 보잉의 직원들이 항공기 안전을 인증하는 '기구 지정 인증(Organization Designation Authorization, ODA)' 프로그램은 2018년과 2019년에 발생한 두 건의 737 Max 8 추락 사고 이후로도 주목을 받아옴.

FAA의 조사 및 감독 강화 계획

     * FAA는 보잉의 항공기 생산에 대한 감독을 즉시 강화할 계획을 발표함.
     * FAA는 보잉이 제시한 사양에 맞게 항공기를 제작하는지 여부를 조사하기 위해 목요일에 조사를 시작함.
     * 737 Max 9 생산 라인과 공급업체에 대한 감사를 실시하여 보잉의 승인된 품질 절차 준수 여부를 평가할 예정임.

품질 관리 문제와 정치적 반응

     * 문제가 된 도어 패널 섹션을 공급하는 Spirit AeroSystems는 지난해 품질 문제로 주목을 받음.
     * 워싱턴주 상원의원 마리아 캔트웰은 FAA의 항공기 검사 역할에 대해 의문을 제기하는 서한을 보냄.
     * 캔트웰은 보잉의 생산과 관련된 특정 영역에 대한 감사를 요청했으나, FAA는 불필요하다고 답변했었음.

운항 중단 및 안전 우선주의

     * FAA는 Max 9의 운항 중 발생하는 모든 문제를 감시할 것이라고 밝힘.
     * 현재 미국 영토 외에서만 운항 중이며, 전 세계적으로 약 215대가 있음.
     * 사고 이후 FAA는 171대의 Max 9를 지난 토요일에 운항 중단 조치함.
     * FAA는 안전이 확보될 때까지 737-9 Max의 서비스 복귀 시기를 결정할 것이라고 강조함.

보잉의 협조 약속

     * 보잉은 목요일에 규제 기관의 조사에 ""전적으로 협력하고 투명하게"" 대응할 것이라고 발표함.

  GN⁺의 의견

     * 이 기사는 항공 안전에 대한 중요한 문제를 다루고 있으며, 보잉이 자체 검사 권한을 잃을 수도 있다는 점에서 항공 산업에 중대한 영향을 미칠 수 있음.
     * FAA의 감독 강화와 독립적인 제3자 검사 기관의 도입 가능성은 항공기 제조의 품질과 안전성을 높이는 데 기여할 수 있음.
     * 이러한 조치들은 과거의 항공 사고로부터 교훈을 얻어 항공 안전 기준을 강화하려는 규제 기관의 노력을 반영함.

        Hacker News 의견

     * 정치와 부패에 대한 토론을 하는 이들에게 제안하고 싶은 것이 있다. 매디슨이 쓴 '연방주의자 제10호'를 읽어보라. 이는 공화민주주의의 필요성에 대한 심도 있는 분석을 담고 있다. 인간의 덕성에 의존하는 정부는 실패할 것이다. 지속 가능한 정부를 갖기 위한 유일한 방법은 강력한 견제와 균형을 두고 서로 다른 이해관계를 가진 여러 파벌을 상호 대립시키는 것이다.
          + 정치와 부패에 대해 논하는 사람들에게 '연방주의자 제10호'를 읽어볼 것을 권장함. 인간의 미덕에 의존하는 정부의 실패 가능성을 지적하며, 견제와 균형을 통한 다양한 이해관계의 대립이 중요함을 강조함.
     * 어떤 산업이 자가 검사를 허용받는가? 이는 검사의 취지를 완전히 무너뜨린다. 마치 자신의 재판에서 판사이자 배심원이 되는 것과 같다. 이것이 처음부터 어떻게 가능했는지 놀랍다.
          + 자가 검사를 허용하는 산업의 부적절함을 지적함. 이는 검사의 본질적인 목적을 훼손하며, 자신의 재판에서 판사와 배심원 역할을 하는 것과 같다고 비판함.
     * 왜 FAA에만 초점이 맞춰져 있는가? EASA와 다른 기관들도 있지 않은가? 그들도 FAA처럼 보잉에게 자가 검사와 자가 평가를 허용하고 있는가?
          + FAA뿐만 아니라 EASA와 같은 다른 기관들의 역할에 대한 질문을 제기함. 보잉이 FAA와 유착하여 안전을 소홀히 했다면, EASA도 이를 감지하고 유럽 항공 안전 인증 시 보잉 항공기에 대해 추가적인 검증을 해야 하는 것이 아닌가에 대한 의문을 제기함.
     * 항공사들이 자가 평가를 하고 있다는 사실을 알게 되어 이를 게시했다. 소프트웨어 분야에서는 이런 자가 평가가 흔하지만, 준수 여부에 대한 감사도 흔하다. 만약 회사가 다른 팀의 소프트웨어를 테스트하는 것을 전담하는 개발자 팀을 가졌다면 어떤 시나리오가 펼쳐질까?
          + 항공사들의 자가 평가 관행에 대해 궁금증을 표현함. 소프트웨어 업계에서 자가 평가와 감사가 일반적이라고 언급하며, 다른 팀의 소프트웨어를 전담으로 테스트하는 개발자 팀의 가능성에 대해 생각해봄.
     * 이 문제는 다른 사람이 검사를 했다면 발생하지 않았을 것이라고 생각하는 사람들이 많다. 이는 과정의 결함에 의한 문제로, 제3자도 같은 실수를 할 수 있다. 보잉이 비용을 절감하기 위해 은폐하거나 큰 공학적 실수를 한 것이 아니다. 누군가 플러그를 꽂고 - 전화를 받거나 교대 근무를 하거나 - 볼트를 넣는 것을 잊었다. 검사가 있었다면 이를 누락한 것이다. 문서를 통해 어떻게 누가 이런 실수를 했는지 밝혀낼 수 있을 것이다. 제3자 정비사가 정기 유지보수를 하다가 같은 실수를 할 수도 있었다.
          + 제3자가 검사를 했다면 문제가 발생하지 않았을 것이라는 주장에 의문을 제기함. 과정상의 결함이 문제의 원인일 수 있으며, 제3자도 같은 실수를 할 수 있다고 지적함. 문서를 통해 실수의 원인과 담당자를 밝혀낼 수 있을 것임을 언급함.
     * 비행기 추락 사고가 몇 차례 발생한 후, 훌륭한 탐사 저널리즘과 비행 중 문이 날아가는 사건(다행히 비디오로 촬영되어 공유됨)이 있었다. 너무 늦었다. 우리는 규제 기관도 규제해야 한다. 나는 그들을 신뢰하지 않는다.
          + 비행기 사고와 탐사 저널리즘, 비행 중 문이 날아가는 사건 등을 언급하며, 규제 기관에 대한 규제의 필요성을 강조함. 규제 기관에 대한 신뢰 부족을 표현함.
     * FT 기사를 읽어도 보잉의 어떤 권한이 문제인지 명확하지 않다. 보잉에는 항공기 유형 인증에 관여하는 Designated Engineering Representatives (DERs)와 이미 제작된 항공기의 항공 적합성(유형 인증 및 안전 운항 조건에 대한 적합성)을 인증하는 품질 검사관이 있다. 전자는 보통 검사관이라고 불리지 않지만, 여기서 많은 댓글이 DERs의 영역에 해당하는 주제를 다루고 있다.
          + 보잉의 권한에 대한 문제가 무엇인지 FT 기사를 통해 명확히 이해되지 않음을 언급함. 보잉에는 항공기 설계 인증과 개별 항공기의 항공 적합성 인증을 담당하는 두 가지 유형의 전문가가 있음을 설명함.
     * 볼트/너트/문이 잘못 조립되었는지, 재료의 결함이나 조립 지침의 오류인지 결론이 나지 않았다. 최근 문제가 된 문의 경우, 조립의 부주의로 인한 것인지(검사가 발견해야 할 것) 아니면 부실한 사양/장비로 인한 것인지(검사가 오히려 문제를 강화할 수 있음) 여전히 불확실하다.
          + 최근 항공기 문제와 관련하여 조립의 부주의인지, 재료 결함이나 조립 지침의 오류인지에 대한 결론이 나지 않았음을 언급함. 검사가 문제를 발견하거나 오히려 강화할 수 있는지에 대한 불확실성을 표현함.
     * <a href=""https:&#x2F;&#x2F;archive.is&#x2F;Dx8gP"" rel=""nofollow"">https://archive.is/Dx8gP</a>;
          + 관련 정보를 담고 있는 웹페이지 링크를 제공함.
     * [flagged]
          + 특정 댓글이 신고되어 표시됨.
"
"https://news.hada.io/topic?id=12885","FSRS: 현대적이고 효율적인 간격 반복 알고리즘","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      FSRS: 현대적이고 효율적인 간격 반복 알고리즘

FSRS의 ABC

     * FSRS는 Jarrett Ye가 개발한 현대적인 간격 반복 알고리즘으로, 사용자의 기억 패턴을 학습하고 Anki의 기존 SM2 알고리즘보다 효율적으로 복습 일정을 계획함.
     * 간격 반복 알고리즘의 목표는 복습 간격을 최적화하여 특정 확률로 카드를 기억할 수 있는 시간을 계산하는 것임.
     * FSRS는 '기억의 세 가지 구성 요소 모델'에 기반하며, 이 모델은 기억의 상태를 설명하는 데 충분한 세 가지 변수(검색 가능성, 안정성, 난이도)를 포함함.

FSRS의 작동 원리

     * 사용자가 카드를 복습할 때마다 해당 카드와 연관된 기억 상태가 변경되며, FSRS는 하루에 한 번의 복습만을 고려함.
     * FSRS는 사용자의 복습 이력을 분석하고 기계 학습을 사용하여 복습 이력에 가장 잘 맞는 매개변수를 계산함.
     * 사용자가 충분한 복습 이력이 없는 경우, 약 20,000명의 사용자로부터 수십억 건의 복습 데이터를 분석하여 찾아낸 기본 매개변수가 사용됨.

FSRS와 Anki의 기본 알고리즘 비교

     * FSRS는 Anki의 기본 알고리즘보다 20-30% 적은 복습으로 동일한 기억 유지 수준을 달성할 수 있음.
     * 사용자는 원하는 기억 유지율을 설정하여 복습량과 기억량 사이의 균형을 맞출 수 있음.
     * FSRS는 복습 지연이 발생했을 때, 예를 들어 사용자가 몇 주간 Anki를 사용하지 않았을 때 카드 일정을 더 잘 계획함.

추가 정보

     * Anki 버전이 23.10 이상인 경우, 해당 가이드를 읽어야 하며, 23.10보다 오래된 버전을 사용하는 경우 FSRS의 독립 실행형 버전을 사용할 수 있음.
     * FSRS의 성능을 다른 알고리즘과 비교하고 싶다면, 벤치마크 및 FSRS 대 SM-17 페이지를 참조함.
     * FSRS에 대한 추가 질문이 있는 경우 FAQ를 확인함.
     * 간격 반복 알고리즘에 대해 더 배우고 싶다면 관련 문서를 참조할 수 있음.

   GN⁺의 의견:
     * FSRS 알고리즘은 사용자의 기억 패턴을 학습하여 복습 일정을 최적화하는 혁신적인 접근 방식을 제공함.
     * 사용자가 원하는 기억 유지율을 설정할 수 있는 기능은 학습자의 필요와 선호도에 맞춘 맞춤형 학습 경험을 가능하게 함.
     * FSRS는 기존의 Anki 알고리즘보다 효율적인 복습 계획을 통해 학습자의 시간을 절약하고 학습 효과를 극대화하는 데 도움을 줄 수 있음.
"
"https://news.hada.io/topic?id=12750",""LibreOffice, 구형 워드 파일 읽기에서 워드보다 우수"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ""LibreOffice, 구형 워드 파일 읽기에서 워드보다 우수""

eldritch.cafe 소개

     * eldritch.cafe는 Mastodon에 의해 구동되는 분산 소셜 네트워크의 일부임.
     * 퀴어, 페미니스트, 아나키스트 및 그들의 지지자들에게 친근한 공간으로 자리매김하고자 함.
     * 주로 프랑스어 사용자들이 활동 중임.

관리자 정보

     * 관리자: Barmaid@Barmaid
     * 서버 통계: 1.3K 활성 사용자

Mastodon 및 eldritch.cafe 정보

     * Mastodon과 eldritch.cafe에 대한 추가 정보, 프로필 디렉토리, 개인정보 보호정책 등을 확인할 수 있음.
     * Mastodon 앱 다운로드, 키보드 단축키, 소스 코드 보기 등의 정보 제공.
     * Mastodon 버전: v4.3.0-alpha.0+glitch

게시물 및 답글

     * 작가 RS는 은퇴 후 작가 활동에 더 많은 시간을 할애하고 있으며, 미판매 소설 목록 정리와 개정, 재작성이 첫 번째 업무임.
     * 사용자들은 LibreOffice가 오래된 Word 파일을 Word보다 더 잘 읽을 수 있다는 사실을 공유하며, 특히 1994년 이전 파일에 대해 언급함.
     * RS 작가는 1986년과 1989년에 작성된 파일을 LibreOffice로 성공적으로 열었으며, 이를 통해 오래된 문서의 내용을 보존할 수 있었음.
     * 다른 사용자들도 LibreOffice의 호환성과 기능에 대해 긍정적인 경험을 공유함.
     * WordPerfect 파일을 여는 데도 LibreOffice가 유용하다는 사실이 공유됨.
     * 사용자들은 WordPerfect의 전략적 실수와 Microsoft Word의 지배적 위치에 대해 토론함.
     * 오픈 소스 프로젝트에 대한 버그 수정 경험과 개발자들의 태도에 대한 의견이 교환됨.
     * LibreOffice의 버그 수정 능력과 자금 조달로 인해 실제로 사람들을 고용할 수 있는 능력에 대해 언급됨.
     * Git과 같은 버전 관리 시스템에 적응하는 것이 어려움을 겪는 사용자들의 경험 공유.

GN⁺의 의견

     * eldritch.cafe는 특정 커뮤니티를 지원하는 Mastodon 기반의 소셜 네트워크로, 다양성과 포용성을 중시하는 공간으로서 중요함.
     * LibreOffice의 호환성과 기능은 오래된 문서를 보존하고자 하는 이들에게 매우 유용한 도구임을 보여줌.
     * 오픈 소스 소프트웨어 커뮤니티 내에서의 협력과 지원은 기술적 문제를 해결하고 지식을 공유하는 데 있어 중요한 역할을 함.

        Hacker News 의견

     * LibreOffice가 DOC/DOCX 파일을 편집할 때 발생할 수 있는 문제점

     LibreOffice를 사용하여 DOC/DOCX 파일을 편집하고 저장할 때, 파일이 손상될 수 있음. 편집 내용이 제대로 저장되지 않아 다음에 파일을 열었을 때 문제를 발견할 수 있음. 때로는 XML 태그 불일치로 인한 손상이 발생하며, 이는 수정 가능하지만, 문서의 큰 부분이 손실되는 경우도 있어 복구가 불가능할 수 있음.
     * 윈도우 XP 시대의 게임을 우분투에서 실행하는 경험담

     윈도우 XP 시대의 게임이 Windows 10 이후 버전에서는 작동하지 않지만, 우분투에서 Wine을 통해 실행할 수 있었음. 심지어 Windows 11에서 WSL을 통해 우분투를 실행하고 그 안에서 Wine을 사용하여 게임을 실행하는 복잡한 방법으로도 성공함.
     * 회사에서 Windows 7로 업그레이드하면서 발생한 문제 해결 사례

     Windows 7로 업그레이드하는 과정에서 기존의 타임카드 소프트웨어가 작동하지 않게 되자, IT 부서는 모든 직원에게 우분투 VM을 제공하고 Wine을 통해 소프트웨어를 실행하는 임시 해결책을 마련함. 이후 웹 기반 솔루션으로 전환할 때까지 몇 년간 이 방법을 사용함.
     * XLS 파일 포맷의 설계에 대한 조엘 스폴스키의 글

     XLS 파일 포맷이 당시 느린 디스크 속도를 개선하기 위해 엑셀의 내부 메모리 구조를 디스크에 그대로 저장하는 방식이었다는 내용의 글을 읽었음. 이로 인해 다른 프로그램이나 엑셀의 후속 버전에서 해당 파일들을 다루기 어려움. 오래된 DOC 및 XLS 파일 포맷의 내부 문서화가 필요하지만, 마이크로소프트가 이를 문서화하지 않았을 가능성이 있음.
     * LibreOffice가 StarOffice 5 파일을 여는 데 실패한 아이러니

     LibreOffice가 OpenOffice에서 분기된 것인데, OpenOffice는 StarOffice를 오픈소스화한 것임에도 불구하고, 옛날 StarOffice 5 파일을 여는 데 실패함. 코드베이스를 단순화하기 위해 변환기를 제거했기 때문임.
     * LibreOffice와 Microsoft 제품 간의 호환성 문제

     LibreOffice는 호환성을 추구하는 반면, Microsoft는 고객들이 더 새롭고 수익성 높은 버전으로 업그레이드하길 원함.
     * DOS 애플리케이션을 Linux에서 Wine을 통해 실행한 사례

     Windows 7 이상에서 작동하지 않는 사용자 정의 DOS 애플리케이션을 Linux에서 Wine을 통해 실행함. 이 경험을 바탕으로 콘솔 애플리케이션을 현대화하여 Linux 셸에서 실행할 수 있도록 재개발함으로써 라이선스 비용을 절약함.
     * Wine이 Windows 7 이전 버전의 소프트웨어를 현재 Windows보다 더 잘 실행한다는 의견

     Wine이 Windows 7 이전 버전의 소프트웨어를 현재 Windows보다 더 잘 실행한다는 사용자의 경험.
     * 파일 저장 형식에 대한 Linux 사용자의 선택

     한 Linux 사용자는 .odt 대신 .doc 형식으로 파일을 저장함으로써 LibreOffice와 Word 모두에서 파일을 잘 열 수 있음을 주장함.
     * LibreOffice가 Word 문서를 여는 속도에 대한 의견

     LibreOffice가 최신 Word 문서를 여는 데 있어 더 빠르게 느껴질 수 있으며, 이는 OneDrive의 네트워크 지연 때문일 수도 있음. Adobe Creative Cloud에 대한 불만도 있음.
"
"https://news.hada.io/topic?id=12860","다양성 선언에 반대하는 수학 교수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           다양성 선언에 반대하는 수학 교수

다양성 성명에 반대하는 수학 교수

     * 미국으로 이민 온 러시아 출신의 알렉산더 바르비노크는 미시간 대학교의 수학 교수임.
     * 바르비노크는 미국 수학 학회(AMS)의 회원 자격을 사퇴하며, 다양성, 형평성, 포용성(DEI)에 대한 성명을 요구하는 수학 교수직 채용 공고에 반대하는 입장을 표명함.
     * 그는 이러한 성명 요구가 자신의 학문 분야에 우려스러운 추세라고 보고, 이에 항의하기 위해 회원 자격을 사퇴함.

소련에서의 경험과 학문의 자유

     * 바르비노크는 소련에서 자라며 매일 이상에 충성을 맹세해야 했던 경험을 했음.
     * 그는 열정적인 공산주의자들이 어떻게 쉽게 다른 이념으로 변화하는지 목격하며, 진정한 순응자만이 이러한 게임에서 두각을 나타낼 수 있다고 생각함.
     * 그는 수학 부서가 순응자들로 채워지는 것을 원하지 않음.

미국 대학의 정치적 환경에 대한 우려

     * 바르비노크는 미국 대학의 정치적 환경에 대해 우려를 표현하며, 소련 출신 이민자로서 이러한 강제적 이념의 확산에 주목함.
     * 그는 미국 대학에서의 학문 문화와 소련에서의 경험을 비교하며, DEI 성명에 반대하는 이유와 그러한 성명의 확산에 반대하는 입장을 취함.

소련에서의 학문 경력과 미국 대학의 변화

     * 바르비노크는 소련의 한 대학에서 수학을 전공하며, 유대인이라는 이유로 차별받지 않았음.
     * 그는 소련의 이념 교육이 학생들 사이에서 냉소주의와 반감을 일으켰다고 회상함.
     * 미국 대학에서 교수로서 경력을 쌓아가며, 그는 학문적 자유에 대한 우려를 갖게 됨.

대학 행정의 성장과 논쟁의 변화

     * 바르비노크는 대학 행정의 성장과 논쟁의 변화를 목격함.
     * 그는 대학 행정이 점점 더 많은 사회적 목표를 추구하고, 이에 따라 더 많은 행정가들이 필요하게 되며, 이것이 반대 의견을 침묵시키는 데 사용됨을 지적함.

DEI 성명에 대한 반대

     * 바르비노크는 DEI 성명이 학문적 자유를 침해하는 이념적 리트머스 시험으로 여겨짐을 우려함.
     * 그는 DEI 성명에 반대하는 교수들이 안전한 숫자를 확보하고 조직적으로 대응한다면, 경력에 큰 위험 없이 목소리를 낼 수 있다고 주장함.

GN⁺의 의견

     * 바르비노크 교수의 이야기는 학문의 자유와 이념적 강요에 대한 중요한 논쟁을 제기함.
     * 그의 소련 경험은 이념적 강제가 학문적 환경에 미치는 부정적 영향에 대한 심오한 통찰을 제공함.
     * 이 글은 학계 내에서 이념적 다양성과 자유로운 토론의 중요성을 강조하며, 학문적 자유를 지키기 위한 공동의 노력이 필요함을 상기시킴.

        Hacker News 의견

     * 위험성에 대한 경각심
          + 사람들이 이러한 미끄러운 경사의 위험성을 더 인식하기를 바람.
          + 문제의 일부는 서로 강하게 연결되지 않은 이슈들을 끌어들여 한쪽 진영에 대항하는 효과를 높이려는 세계관의 극단적인 소용돌이 경향이 존재함.
          + 사회 활동가들 사이에 권위주의 방향으로의 일치와 중앙집중화 경향이 있으며, 반면에 체계적인 사회 문제를 완전히 부정하는 태도는 독점력 증가로 더 많은 사람들이 적은 자원을 위해 싸우게 만듦.
          + 어떤 수준에서의 전체주의와 독립 및 진화의 중요성을 모두 포용하는 철학과 체계가 필요함.
          + 인간 조직은 이러한 목표를 동시에 추구하는 데 어려움을 겪을 수 있으나, 적절한 기술이 이를 가능하게 할 수 있음.
          + 첫 번째 도전은 좌파가 자유의 필요성을, 우파가 평범한 사람들이 적은 자원을 위해 싸우지 않고 존재할 필요성을 인정하는 것임.
          + 양 진영 간의 전쟁은 더 미묘하거나 복잡한 메시지를 전파하려는 사람들을 양쪽 모두에게 외면받거나 무시당하게 만듦.
     * 다양성 선언에 대한 동정
          + 다양성 선언에 대해 이해하고 동정하지만, 박사 프로그램에 지원하는 경험에서 볼 때, 이를 작성하고 강요하는 것은 비학문적이며 종종 잘못된 방향임.
          + 다양성 선언을 작성할 때는 DEI(다양성, 평등, 포용) 이니셔티브의 종종 비논리적인 분류에 맞춰 자신의 존재를 정당화해야 함.
          + 연구가 개인의 정체성과 독립적으로 평가되지 않고, 대신 정체성을 통해 평가될 것이라는 뜻이 내포됨.
          + 특정 지원자들은 자신의 정체성에 대해 자책하게 되고, 다른 이들은 정체성을 이점으로 제시하도록 유도됨.
     * DEI 선언에 대한 평가 가이드
          + 미국 대학의 DEI 선언 평가 가이드를 참조하는 것이 이에 대한 이해를 돕는 데 더 유익함.
     * ""서면 선언""에 대한 우려
          + ""서면 선언""의 내용이 시스템적인 인종주의가 사회와 기관, 학과의 문화에 만연해 있음을 인정하고 이에 대해 깊이 사과하며 개선할 필요가 있음을 인정하는 것에 대해 우려를 표함.
     * 학문적 다양성 증진에 대한 비판
          + 학문적 다양성 증진을 요구하는 것은 관리자들이 만든 이니셔티브로, 관리자들이 초래한 문제를 해결하기 위한 것으로 보임.
          + 학교가 목표로 하는 표면적인 다양성 지표인 인종과 성별보다는 계급이 훨씬 중요한 다양성 유형임.
          + 교육을 경제적, 사회적 기회의 원동력으로 보기 때문에, 부유하지만 성별과 인종이 다양한 엘리트 계급만을 가진 것은 큰 의미가 없음.
          + 계급 다양성을 목표로 하면 자연스럽게 인종 다양성도 얻을 수 있음.
     * 이상에 대한 확언의 부패성
          + 소비에트 연방에서 자란 바빈녹은 이상에 대한 확언이 학문에 있어 부패를 초래한다고 확신함.
          + 진정한 순응자만이 이 게임에서 뛰어남을 보여주며, 수학과가 순응자들로 채워지는 것을 원하지 않음.
          + 바빈녹은 다양성에 반대하는 것이 아니라, 강제된 선언에 반대함.
          + 생계를 유지하기 위한 전제 조건으로 자신의 신념을 반복적으로 확인하는 것은 강제된 연설이며, 이에 참여하는 모든 사람을 타락시킴.
     * 다양성 선언의 목적에 대한 고려
          + 다양성 선언의 목적을 고려해야 하며, 이는 지원자가 스티븐 제이 굴드가 제기한 문제에 대해 생각해보았는지를 평가하는 방법임.
     * 반성희롱 훈련에 대한 경험
          + 대학에서의 반성희롱 훈련 경험을 공유하며, 훈련을 위한 웹사이트와 상호작용 비디오에 대한 비판을 제시함.
          + 퀴즈 구성이 계약 재협상과 같이 작성되었으며, 법률가들이 대신 서명할 수 있는 선언을 만들어 훈련을 이행함.
     * 다양성 선언에 대한 모욕감
          + 다양성 선언이 모욕적이며, 자신의 다양성 선언이 다양성 선언을 읽는 사람들의 수용 범위를 벗어날 것임을 표현함.
          + 왜 자신을 위해 공연을 해야 하는지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12849","OpenAI, "군사 및 전쟁" 목적으로 ChatGPT 사용 금지 해제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                OpenAI, ""군사 및 전쟁"" 목적으로 ChatGPT 사용 금지 해제

OpenAI, 군사 및 전쟁 목적 사용 금지 조항 삭제

     * OpenAI가 이번 주에 자사 기술의 군사 목적 사용을 명시적으로 금지하는 언어를 사용 정책에서 조용히 삭제함.
     * 1월 10일까지 OpenAI의 사용 정책 페이지에는 '무기 개발' 및 '군사 및 전쟁'을 포함한 신체적 해를 높일 수 있는 활동 금지가 명시되어 있었음.
     * 새 정책은 '자신이나 타인에게 해를 끼치지 않도록 서비스를 사용하지 말라'는 지침을 유지하고 있으나, '군사 및 전쟁' 사용에 대한 전면 금지는 사라짐.

정책 변경의 배경

     * OpenAI는 정책 페이지를 ""더 명확하고 읽기 쉽게"" 만들기 위해 대대적으로 수정함.
     * OpenAI 대변인은 새로운 정책이 법적 준수를 강조하고 있으며, ""타인에게 해를 끼치지 않는다""는 원칙이 광범위하게 적용될 수 있다고 설명함.
     * 전문가들은 새로운 정책이 군사 계약과 전쟁 작전에 대한 질문을 피하고, 특히 무기에 초점을 맞추고 있다고 지적함.

군사 및 전쟁 사용에 대한 우려

     * 전문가들은 대규모 언어 모델(Large Language Models, LLMs)의 편향과 정확성 부족으로 인해 군사 전쟁에서의 사용이 부정확하고 편향된 작전으로 이어질 수 있음을 지적함.
     * OpenAI의 도구가 군사력의 직접적인 살상에 사용될 가능성은 낮지만, 군사력을 지원하는 다양한 작업에 활용될 수 있음.
     * 군사 기관의 주요 목적이 살상 능력을 유지하는 것이므로, 비록 직접적으로 폭력적이지 않더라도 군사 기관을 돕는 것은 여전히 문제가 될 수 있음.
     * OpenAI와 마이크로소프트의 긴밀한 파트너십은 OpenAI가 군사적 목적으로 사업을 확장할 수 있는 가능성을 열어둠.

정책 변경의 실제 영향

     * 정책 변경의 실제 세계적인 결과는 불분명함.
     * OpenAI는 군사 및 전쟁 사용 금지를 어떻게 집행할 것인지에 대해 명확한 입장을 밝히지 않음.
     * 전문가들은 OpenAI가 군사 기관과의 사업에 대한 입장을 약화시키고 있다고 평가함.

군사 기관의 AI 기술 활용

     * 세계 각국의 군대는 기계 학습 기술을 활용하여 우위를 점하려고 하며, 펜타곤은 여전히 ChatGPT나 다른 LLMs의 사용을 탐색 중임.
     * 대규모 언어 모델은 대량의 책, 기사, 웹 데이터 등을 학습하여 사용자 프롬프트에 대한 인간 반응을 모방함.

GN⁺의 의견:

     * OpenAI의 정책 변경은 인공지능 기술이 군사적 목적으로 사용될 가능성을 높이고, 이는 기술 윤리와 안전성에 대한 중요한 논의를 촉발할 수 있음.
     * 이러한 변화는 기술 기업이 국방 계약과 관련하여 어떻게 자신들의 원칙과 시장 기회 사이에서 균형을 맞추려고 하는지를 보여줌.
     * 군사 및 전쟁 목적으로 AI를 사용하는 것에 대한 명확한 금지 조항이 삭제된 것은 기술의 안전성과 윤리적 사용에 대한 더 넓은 사회적 논의를 촉진할 수 있는 계기가 될 것임.

        Hacker News 의견

     * OpenAI의 성장과 원칙 변경
          + OpenAI가 창립 원칙을 버리고 Google의 전략을 따르는 것이 인상적임.
          + Google이 ""Don't be Evil""을 제거하기 전까지 17년이 걸렸지만, OpenAI는 빠르게 성장하여 갑작스럽게 변화함.
          + OpenAI가 Google을 대체할 기업이거나 기술이 될 것으로 보임. Google이 Microsoft를 대체한 것처럼 역설적임.
     * GPT 모델의 군사적 활용 가능성
          + GPT 모델은 군사 데이터베이스와 연구 작업에 평범하게 활용될 큰 기회를 가짐.
          + 군사적 사용 금지는 예를 들어 재난 대비 개선을 위해 군단이 사용하는 것을 포함하여 금지할 수 있음.
          + 대부분의 대기업은 결국 이러한 양보를 하게 되는데, 이는 펜타곤이 막대한 자금을 가지고 있기 때문임.
     * 산업 회사의 군사 제품 개발
          + 많은 산업 회사들이 군사 제품도 개발할 가능성이 있음.
          + 예를 들어, 군사용으로 사용될 수 있는 배의 엔진을 개발하는 CAD 도구에서 LLM 보조를 원할 수 있음.
          + 인프라와 소프트웨어는 종종 공유되거나 회사 전반에 걸쳐 적용될 수 있도록 개발됨.
     * 새로운 정책에 대한 이해
          + 새로운 정책을 실제로 읽은 사람이 있는지 궁금함.
          + 무기와 해를 끼치는 것에 대한 더 넓은 정책을 가지고 있음.
     * AI와 군사력
          + 고급 AI는 고급 군사력에 필수적임.
          + 이러한 문제들은 기술적 문제가 아니라 인간의 문제임.
          + 인간은 계층을 이루고 영토와 자원을 위해 경쟁하는 영장류임.
     * 무기 개발과 군사 활동에 대한 정책 차이
          + 두 정책 사이에는 명확한 차이가 있으며, 전자는 무기 개발과 군사 활동을 금지하는 반면, 후자는 법률 준수와 유연성을 강조함.
          + AI 안전에 대한 잠재적 영향이 중요함.
     * LLM의 한계
          + ChatGPT가 기본적인 작업에서 일관되게 환각을 멈추지 못하고 실제로 이해하지 못하는 것은 끔찍한 아이디어임.
          + AI/ML 분야 자체는 시간 낭비가 아니지만, LLM은 대부분 화려함만 있고 실질적인 가치는 거의 없음.
     * OpenAI의 결정의 불가피성
          + OpenAI가 그런 종류의 돈을 포기할 리 없었음이 불가피함.
          + 다른 방식으로 제품이 사용되는 것에 대해 우려하는 것이 이상하다고 느낌.
     * 실리콘 밸리와 군사 산업 복합체
          + 실리콘 밸리는 군사 산업 복합체의 산물임.
     * 민간인과 군사의 무기 개발 관점 차이
          + 민간인에게는 대부분의 경우 무기 개발이 위험하지만, 군사에게는 더 나은 무기를 적보다 빠르게 개발하지 않는 것이 위험함.
"
"https://news.hada.io/topic?id=12758","제프 로슨, 트윌리오 CEO에서 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          제프 로슨, 트윌리오 CEO에서 사임

트윌리오 CEO, 제프 로슨 하차

     * 트윌리오 공동 창업자 제프 로슨이 CEO 및 이사회 멤버에서 물러남을 발표함.
     * 후임으로는 오랜 기간 트윌리오에서 근무한 코제마 십찬들러가 CEO를 맡음.
     * 이번 교체가 활동적인 투자자들을 만족시키지 못할 것으로 보임.

트윌리오의 경영 변화

     * 트윌리오는 두 명의 활동적인 투자자들과의 대립 속에서 경영진 변화를 겪고 있음.
     * 회사는 4분기 수익과 소득이 이전 예측을 상회할 것으로 기대함.
     * 제프 로슨은 블로그 포스트를 통해 CEO 자리를 새로운 리더에게 넘기는 시기가 왔다고 언급함.

활동적인 투자자들의 압력

     * 활동적인 투자자들인 앤슨 펀즈와 리전 파트너스는 회사의 매각 또는 데이터 및 애플리케이션 사업의 완전한 매각을 촉구함.
     * 트윌리오는 투자자들의 압력을 막기 위해 Qatalyst Partners와 협력 중임.
     * 앤슨 펀즈의 포트폴리오 매니저 사가르 구프타는 리더십 변화를 긍정적으로 평가하면서도 추가 조치가 필요하다고 언급함.

십찬들러의 새로운 리더십

     * 십찬들러는 트윌리오의 CFO 및 COO를 역임하고, 회사의 중요한 커뮤니케이션 부문을 이끌었음.
     * 그는 2018년에 트윌리오에 합류함.
     * 회사는 구조조정을 통해 직원들을 여러 차례 해고했으며, 최근 구조조정에서는 5%의 직원이 해고됨.

   GN⁺의 의견:
     * 제프 로슨의 하차와 코제마 십찬들러의 CEO 취임은 트윌리오의 새로운 장을 여는 중요한 변화임. 이러한 경영진 변화는 기업의 전략적 방향성과 투자자들의 기대에 큰 영향을 미칠 수 있음.
     * 활동적인 투자자들의 압력은 기업 경영에 있어 중대한 요소로 작용하며, 이들의 요구가 회사의 장기적인 성장과 주주 가치 극대화에 어떤 영향을 미칠지 주목됨.
     * 트윌리오의 경우, 기술 기업의 경영진 교체는 업계 전반에 걸쳐 변화의 바람을 일으킬 수 있으며, 이는 투자자들과 기술 종사자들에게 흥미로운 관전 포인트가 될 수 있음.

        Hacker News 의견

     * Twilio에서의 경험
          + 한 직원은 Twilio에서 거의 10년간 근무하며 CEO Jeff의 리더십을 가까이서 볼 수 있었던 것을 큰 선물로 여김. Jeff는 재미있고 영향력 있는 일을 할 수 있는 환경을 조성했고, 개발자들을 진정으로 권한을 부여하고 영감을 주도록 창의적으로 일하도록 독려했음. Jeff는 공감, 겸손, 그리고 배려로 리더십을 발휘하는 드문 CEO였음.
          + 다른 직원은 Twilio 초기 팀을 만났고, 그들이 특별한 무언가를 가지고 있다고 느낌. Jeff와 팀은 개발자 도구에 대한 사람들의 생각을 바꾸고, DevRel 공간에서 선구자적 역할을 한 것에 대해 큰 공을 세움. 또한, Jeff는 샌프란시스코 도시를 위해 항상 투쟁하고 지지했으며, 모범이 되는 CEO 중 한 명임.
          + 또 다른 직원은 Twilio에서 4년 이상 근무하며 회사가 유럽 확장에 실패한 경험을 공유함. 고객들은 Twilio가 제공하지 못한 기능을 요구했고, 코드베이스가 지저분했으며, 제품 소유자들은 무엇을 만들어야 할지 몰랐음. Jeff는 과대 광고와 과소 전달로 유명했으며, 회사가 실패할 것이라는 것이 명백했음.
          + Twilio의 위치가 하락한 것은 지난 18개월 동안 명확했으며, 회사는 소프트웨어 독점의 성장을 유지하기 위해 필요한 마진이나 환경 제어를 거의 가지고 있지 않았음. Twilio의 대부분의 사업은 SMS 컨솔리데이터를 통해 구매한 네트워크 접근을 재판매하는 것이었음. 또한, SMS의 유용성이 전반적으로 감소하고 있음.
     * 개인적인 경험과 평가
          + 한 직원은 Twilio 개발자 전도사 팀에 합류했을 때, Jeff가 10,000명 앞에서 Twilio 앱을 라이브 코딩하는 것을 보고 깊은 인상을 받음. Jeff는 본보기를 보이며 모두에게 도전을 주었고, 직원은 그의 리더십 아래 일하는 것을 커리어의 특권으로 여김.
          + 또 다른 직원은 Twilio에서 9년간 근무하며 Jeff와의 상호작용을 포함해 놀라운 경험을 했음. Jeff는 항상 소프트웨어 개발자의 마음을 가지고 있었으며, 회사를 만드는 데 있어서 그의 마인드셋은 장단점이 있음.
          + 한 직원은 Twilio의 최근 1년에 대해 읽으며 해고와 관련된 팀을 파악하려고 함. 투자 그룹이 회사의 일부 또는 전체를 매각하도록 압력을 가하는 것에 대해 의문을 제기함.
     * Jeff Lawson의 리더십
          + 한 직원은 Twilio에 합류했을 때 Jeff Lawson이 직접 쓰레기를 버리는 것을 도와준 일화를 공유함. Jeff는 회사를 창립하고 통신 분야를 재정의하는 데 기여함.
          + 한 주주는 Jeff의 투표 구조가 변경되어 주주로서의 권력이 줄어들었다고 언급함. Jeff는 Kho를 후임으로 승진시키는 겸손함을 보여줌.
          + Bloomberg는 Jeff Lawson이 Twilio의 CEO에서 물러나는 소식을 전함. 매출 성장이 둔화되고 활동적인 투자자들의 압력을 받고 있음을 언급함.
"
"https://news.hada.io/topic?id=12801","Portkey AI Gateway - 100+개의 LLM을 1개의 API로 이용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Portkey AI Gateway - 100+개의 LLM을 1개의 API로 이용

     * 앱과 LLM 사이의 인터페이스로 모든 LLM을 통합 API로 호출 가능
          + OpenAI, Anthropic, Mistral, LLama2, Anyscale, Google Gemini 등
     * 매우 빠르고 (9.9x) 적은 풋프린트(~45kb)
     * 여러 모델/프로바이더/키 간에 로드밸런싱 가능
     * 폴백과 자동 재시도를 통해 앱이 안정적으로 동작하게 지원

   잘 동작하면 유용하겠네요.

   I am one of the maintainers - look forward to the community's feedback!
"
"https://news.hada.io/topic?id=12791","OpenWrt, 20주년을 맞아 업스트림 지원되는 하드웨어 플랫폼 OpenWrt One 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenWrt, 20주년을 맞아 업스트림 지원되는 하드웨어 플랫폼 OpenWrt One 공개

     * 2004년 Linksys의 가정용 공유기 WRT54G의 오픈소스 펌웨어로 시작했으나, 점점 다양한 인터넷 공유기를 지원
     * 이제 업스트림이 완벽히 지원되는 커뮤니티 주도형 HW 플랫폼 ""OpenWrt One/AP-24.XY"" 를 공개
     * 2개의 플래시 칩으로 (거의!) 벽돌이 되지 않게하며, 매우 복구가 쉽게 만듦
     * M.2 슬롯으로 NVMe 저장소로 사용. 이걸 이용해서 Debian/Alpine 같은 다른 리눅스 배포본으로 부팅 가능
     * USB-C 포트를 이용해서 별도의 장비 없이 연결 가능 (UART to USB bridge with CDC-ACM)
     * 확장을 위한 mikroBUS 포함

아이디어

     * 이 아이디어는 새로운 것이 아니며, 2017년과 2018년 OpenWrt 서밋에서 처음 논의됨.
     * 2023년 12월 초, Banana Pi 스타일의 장치들이 이미 2017/2018년에 원했던 것에 매우 가까워졌다는 것이 명확해짐.
     * Banana Pi는 커뮤니티 내에서 인기를 얻고 있으며, 자체 컴파일된 Trusted Firmware-A(TF-A)와 U-Boot을 사용하여 부팅하고, 일부 보드는 이미 상위 리눅스 커널에 의해 완전히 지원됨.
     * 유일한 비오픈소스 구성 요소는 2.5 GbE PHY와 별도의 코어에서 독립적으로 실행되는 Wi-Fi 펌웨어 블롭과 부팅 초기에 실행되는 DRAM 캘리브레이션 루틴임.

하드웨어 사양

     * SOC: MediaTek MT7981B
     * Wi-Fi: MediaTek MT7976C (2x2 2.4 GHz + 3x3/2x2 + zero-wait DFS 5GHz)
     * DRAM: 1 GiB DDR4
     * Flash: 128 MiB SPI NAND + 4 MiB SPI NOR
     * Ethernet: 2x RJ45 (2.5 GbE + 1 GbE)
     * USB (호스트): USB 2.0 (Type-A 포트)
     * USB (장치, 콘솔): Holtek HT42B534-2 UART to USB (USB-C 포트)
     * 저장소: M.2 2042 NVMe SSD (PCIe gen 2 x1)
     * 버튼: 2개 (리셋 + 사용자)
     * 기계식 스위치: 1개 (부팅 선택: 복구, 정규)
     * LED: 2개 (PWM 구동), 2개 ETH Led (GPIO 구동)
     * 외부 하드웨어 워치독: EM Microelectronic EM6324 (GPIO 구동)
     * RTC: NXP PCF8563TS (I2C) 배터리 백업 홀더(CR1220) 포함
     * 전원: USB-PD-12V on USB-C 포트 (선택적 802.3at/afPoE via RT5040 모듈)
     * 확장 슬롯: mikroBUS
     * 인증: FCC/EC/RoHS 준수
     * 케이스: PCB 크기는 BPi-R4와 호환되며 케이스 디자인을 재사용할 수 있음
     * JTAG for main SOC: 10핀 1.27 mm 피치 (ARM JTAG/SWD)
     * 안테나 커넥터: 3개의 MMCX
     * 회로도: 공개될 예정 (라이선스 미정)
     * GPL 준수: 제3자에게 소스 코드의 기계가독 가능한 복사본을 제공하는 것과 관련된 조항 포함
     * 가격: 100달러 미만을 목표로 함

장치 배포 방법

     * OpenWrt 자체는 여러 가지 이유로 이를 처리할 수 없음.
     * SFC(Software Freedom Conservancy)와 초기부터 협력하기 위해 논의함.
     * BPi가 이미 확립된 채널을 사용하여 장치를 배포하고, 판매된 모든 장치에 대해 OpenWrt를 위한 SFC 지정 기금에 기부할 것임.
     * 이 기금은 호스팅 비용이나 OpenWrt 서밋 등을 커버하는 데 사용될 수 있음.
     * SFC는 OpenWrt의 상표가 적절히 존중되고, 이 라우터가 GPL/LGPL 준수의 우수한 예가 되며, 프로젝트와 FOSS(자유 및 오픈 소스 소프트웨어)를 위한 훌륭한 홍보 기회가 되도록 다양한 방식으로 협력할 것임을 약속함.

이메일에 이르기까지의 타임라인

     * 초기 단계에서 공개 커뮤니케이션이 부족했던 점을 용서해달라고 요청함.
     * 프로젝트가 실행 가능한지 확인하기 전에 커뮤니티에 공개하고 싶지 않았음.
     * 12월 초에 아이디어가 생기고, 관련 팀원들과 논의를 시작함.
     * MediaTek에 가능성을 문의하고, SFC와의 통화를 요청함.
     * MediaTek과 Banana Pi가 아이디어를 좋아하고, SFC와의 통화를 진행함.
     * U-Boot PCIe 드라이버 작성을 시작하고, USB 및 안드로이드 패스트부트 복구 기능을 만듦.
     * 연말 축하 행사로 2주간 많은 진전이 없었음.
     * 이 텍스트를 작성하기 위해 1월 3일부터 8일까지 시간을 할애했음.

GN⁺의 의견

     * OpenWrt One은 오픈소스 네트워킹 커뮤니티에 큰 기여를 할 것으로 보임. 하드웨어 사양이 공개되고, GPL 준수를 강조하는 점은 오픈소스 하드웨어 개발의 모범 사례를 제시함.
     * 이 프로젝트는 OpenWrt 사용자들에게 맞춤형 라우터를 제공하고, 커뮤니티 주도의 하드웨어 플랫폼 개발을 장려하는 중요한 단계임.
     * 20주년을 기념하는 이벤트로서, OpenWrt의 지속적인 성장과 오픈소스 네트워킹 솔루션에 대한 관심을 높일 것으로 예상됨.

        Hacker News 의견

     * OpenWrt 프로젝트의 20주년을 축하하는 포럼 게시글에 대한 해커뉴스 댓글 요약:
          + 한 사용자는 OpenWrt 프로젝트에 행운을 빌면서도, NanoPi R5S와 같은 경쟁 제품에 비해 가격 경쟁력이 있어야 한다고 언급함.
          + 다른 사용자는 OpenWrt의 직접 지원이 포함된 제품이 매력적이라고 생각하며, 다른 제조업체들이 종종 지원이 중단될 수 있는 운영체제를 제공하는 것에 대해 비판함.
          + OpenWRT 사용자 중 한 명은 pfSense처럼 간단하고 견고한 설정 파일을 원하며, 버전 업그레이드가 마이그레이션 문제를 야기한다고 느낌.
          + GPL 준수와 관련하여, OpenWrt의 개발 및 릴리스 프로세스가 다양한 소비자 기기를 지원하고 최신 상태로 유지하는 것에 대한 긍정적인 인상을 가지고 있음.
          + 과거에 dd-wrt를 사용했던 한 사용자는 FlashRouters에서 구입한 라우터가 하드웨어 문제로 연결이 끊기기 시작했으며, 이후 Asus 라우터로 전환하여 만족하고 있음.
          + Omnia Turris와 협력하는 것에 대한 제안이 있음.
          + NVMe가 과도한 것처럼 보일 수 있지만, 실제로 M.2 드라이브가 eMMC보다 접근성과 가격 면에서 우수하다는 의견이 있음.
          + 한 사용자는 전력 소비와 DNS 서버 운영 가능성에 따라 관심이 있으며, 가격에 크게 구애받지 않음.
          + CyanogenMod가 겪었던 문제와 같은 상황이 발생하지 않기를 바라며, 100달러 미만이면 매우 좋은 가격이라고 생각함.
          + OpenWrt와 함께 사용할 라우터 추천에 대한 질문이 있으며, 이탈리아에서는 Linksys E8450/Belkin RT3200 모델을 구하기 어렵다는 의견이 있음.

   배경 지식:
     * OpenWrt는 네트워크 기기를 위한 리눅스 기반 오픈소스 운영체제로, 다양한 라우터와 장비에서 사용자 정의 네트워킹 기능을 제공함.
     * pfSense는 네트워크 보안을 위한 오픈소스 방화벽 및 라우터 소프트웨어 배포판임.
     * GPL(GNU General Public License)은 오픈소스 소프트웨어의 라이선스 중 하나로, 소스 코드의 공개 및 수정, 재배포의 자유를 보장함.
     * dd-wrt는 라우터와 같은 네트워크 기기를 위한 리눅스 기반의 서드파티 펌웨어임.
     * CyanogenMod는 안드로이드 기반의 오픈소스 운영체제로, 공식 지원이 중단된 후 LineageOS로 이어짐.
"
"https://news.hada.io/topic?id=12820","Show HN: Godot 엔진으로 제작된 가짜 운영 체제 인터페이스, GodotOS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: Godot 엔진으로 제작된 가짜 운영 체제 인터페이스, GodotOS

     * GodotOS는 Godot로 전적으로 만들어진 운영 체제 인터페이스임.
     * 폴더 탐색, 텍스트 파일 편집, 이미지 보기, 게임 플레이 등을 웹에서도 사용할 수 있는 매끄럽고 통합된 인터페이스에서 할 수 있음.
     * GodotOS는 심각한 프로젝트보다는 장난감에 가까우며, Godot에서 UI 디자인의 한계를 넘어서면서 최소주의적이고, 주의 산만함이 없으며, 미적으로 기분 좋은 데스크탑을 만드는 것을 목표로 함.

다운로드

     * Itch.io 페이지에서 웹 버전을 시도할 수 있음.
     * 모든 버전은 릴리스 페이지에서 다운로드 가능함.

크레딧

     * GodotOS는 popcar2에 의해 만들어짐.
     * 기본 배경화면은 Haseeb Jamil이 만듦.
     * 여러 아이콘은 game-icons에서 가져옴.
     * 폴더 아이콘은 flaticon에서 가져옴.

   *참고: GodotOS는 실제 운영 체제가 아니라 운영 체제와 유사한 인터페이스를 가진 애플리케이션임. *GodotOS는 Godot 엔진 개발자나 Godot 재단과 관련이 없음.

    GN⁺의 의견

     * GodotOS는 Godot 엔진의 UI 디자인 능력을 시험하고, 사용자에게 새로운 경험을 제공하는 실험적인 프로젝트로 볼 수 있음.
     * 웹에서도 접근 가능하고, 사용자가 자신의 게임을 추가할 수 있는 기능은 개발자 커뮤니티에 참여를 유도하고 창의성을 촉진할 수 있는 잠재력을 가짐.
     * GodotOS는 Godot 엔진을 사용하는 초급 소프트웨어 엔지니어들에게 영감을 주고, UI/UX 디자인에 대한 이해를 넓히는 데 도움이 될 수 있음.

   재밋는 장난감이군요

        Hacker News 의견

     *

     GodotOS는 실제 운영체제가 아니라 그와 유사한 인터페이스를 가진 애플리케이션임을 유념하자.
          + GodotOS는 실제 운영체제는 아니지만, 초기 버전의 Windows와 비교해 볼 때 운영체제로 봐도 무방한 측면이 있음.
          + Godot를 사용하여 데스크탑 애플리케이션을 위한 크로스플랫폼 프레임워크로 활용하는 데 있어 훌륭한 개념 증명임.
          + 배포 패키지가 매우 단순하며(실행 파일 하나와 데이터 파일 하나로 구성), 성능도 우수함.
          + Flatpak과 같은 방식보다 훨씬 우수하며, 특히 Electron에 비해 성능 면에서 월등함을 보임.
          + 게임 엔진으로 만든 데스크탑 애플리케이션은 다음 큰 트렌드가 될 가능성이 있음.
     * Godot IDE 자체도 Godot API를 사용하여 구축된 '게임'임.
          + Godot가 휴대용 비즈니스 앱을 구축하기에 좋은 환경인지 궁금증을 자아냄.
          + 현대의 Visual Basic과 같은 역할을 할 수 있을지에 대한 생각을 불러일으킴.
     * 이 프로젝트를 리눅스 데스크탑 환경으로 전환하는 것에 대해 생각해 본 적이 있는가?
          + 실제로 Godot를 사용하는 Wayland 컴포지터가 처음은 아님.
     * 디자인 철학에 대한 글을 쓰고 싶은 욕구가 있음.
          + 웹 개발에서 Godot로 학습 중이며, 분산된 비즈니스 로직을 조직하는 것이 어려움을 겪고 있음.
          + 로직을 상위 노드로 옮기고 노드들이 단순히 렌더러 역할을 하게 하는 것이 본능적이지만, 이는 Godot의 디자인 철학과 맞지 않으며 확장성에 문제가 있을 수 있음을 이해함.
     * Grey Hack은 가짜 OS, 네트워크, 인터넷을 멀티플레이어 게임 내에서 시뮬레이션하는 게임임.
          + 기본적인 기능들을 잘 모방하여 파일을 훔치고, 다른 컴퓨터에 파일을 놓고, 소프트웨어를 설치하고, 커맨드 라인에서 명령을 실행하는 등의 활동이 가능함.
          + 사용자가 직접 프로그램을 작성할 수도 있음.
     * 2005년경 게임메이커 커뮤니티에서 'Sub OSes'가 다소 인기가 있었음을 회상함.
          + 충분한 시간이 주어지면 누군가는 주어진 게임 엔진에서 OS와 같은 인터페이스를 만들려고 시도함을 보여줌.
          + 이는 게임 메커니즘 구축을 넘어 UI와 사용성 패러다임을 이해하는 데 좋은 방법임.
          + 이는 개인적으로 즐거운 향수를 불러일으킴.
     * Godot에 대해 UI 중심의 최소 컴파일 모드가 있었으면 하는 바람을 표현함.
          + GPU로 렌더링된 UI에 대한 매력적인 대상이며, 엔지니어링이나 데이터 분석에 유용한 컴포넌트를 만드는 데 있어 몇몇 우수한 라이브러리와 플러그인이 존재함.
     * Godot는 이러한 아이디어를 스케치하는 데 좋은 도구임.
          + 공항에서 비행을 기다리는 동안 eInk 태블릿을 위한 간단한 노트패드를 만들어 'Virus War' 게임을 파트너와 함께 할 수 있었음.
          + 단지 다양한 상태의 탭 가능한 버튼이 있는 그리드였지만, 비행 전에 플레이 가능한 프로토타입을 준비할 수 있었음.
     * https://simulavr.com은 Godot를 사용하여 VR 데스크탑을 코딩 중임.
"
"https://news.hada.io/topic?id=12793","데이터베이스와 그 복잡성이 이제 불필요한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       데이터베이스와 그 복잡성이 이제 불필요한 이유

데이터베이스의 문제점과 그 복잡성이 불필요한 이유

     * 데이터베이스는 전역 가변 상태로, 코드가 복잡해지고 이해하기 어려움을 초래함.
     * 데이터 모델은 제한적이며, 모든 사용 사례를 지원할 수 없어 여러 데이터베이스 사용이 필요함.
     * 정규화 대 비정규화 문제는 데이터 일관성과 성능 사이의 긴장 관계를 만들어냄.
     * 제한적인 스키마는 도메인 표현을 데이터베이스에 맞추기 위한 복잡성을 초래함.
     * 복잡한 배포는 다양한 도구들의 조합과 통합으로 인한 비용과 복잡성을 증가시킴.

응용 프로그램 백엔드 구축을 위한 일관된 모델

     * 백엔드의 기본 기능은 새로운 데이터를 받고 그 데이터에 대한 질문에 답하는 것임.
     * 이상적인 백엔드 설계는 실제 제약 조건을 충족하면서 가능한 한 이상에 가까워야 함.

Rama

     * Rama는 백엔드 개발 플랫폼으로, Mastodon을 재구현하여 Twitter 규모의 서비스를 제공함.
     * Rama는 데이터, 인덱스, ETL, 쿼리 등 백엔드의 모든 요소를 일반적인 방식으로 구현함.
     * Rama는 복잡한 배포를 간소화하고, 모니터링을 통합하여 개발 및 유지보수 비용을 대폭 절감함.

GN⁺의 의견

     * 데이터베이스의 전역 가변 상태 문제는 코드의 복잡성과 오류 가능성을 높이며, 이는 개발자들이 흔히 직면하는 문제임.
     * Rama는 기존 데이터베이스의 한계를 극복하고, 백엔드 개발의 복잡성을 줄이는 새로운 접근 방식을 제시함.
     * 이 글은 데이터베이스와 백엔드 시스템의 복잡성을 줄이고자 하는 개발자들에게 흥미롭고 유익한 정보를 제공함.

        Hacker News 의견

     *

     소스의 진실을 나타내는 하나의 서브시스템과 그 소스에서 파생된 여러 인덱스 저장소를 구현하는 또 다른 서브시스템을 사용해야 한다. 이것은 이벤트 소싱과 머티리얼라이즈드 뷰의 결합이다.
          + 이벤트 소싱과 머티리얼라이즈드 뷰: 소스의 진실을 나타내는 시스템과 이를 기반으로 한 인덱스 저장소를 분리하여 관리하는 것이 해결책임.
     *

     우리는 읽기 모델과 쓰기 모델을 분리한다: 쓰기 모델(""소스의 진실"")은 전통적인 관계형 도메인 모델로 구성되며, 거의 모든 명령은 공유 도메인 이벤트 큐에 게시되는 이벤트를 생성한다. 읽기 모델은 이벤트를 소비하고 뷰를 구축하는 워커들에 의해 구성된다.
          + 읽기/쓰기 모델 분리: 쓰기 모델은 관계형 도메인 모델로 구성되며, 명령은 이벤트를 생성하여 도메인 이벤트 큐에 게시함. 읽기 모델은 이벤트를 소비하여 뷰를 구축함.
     *

     데이터 변동 시 머티리얼라이징은 제품이 하나의 작업을 매우 빠르게 수행해야 할 때 이득을 가져다줄 수 있다. 하지만 복잡한 트랜잭션이 필요하거나 다르게 조직된 데이터가 필요한 새로운 기능을 추가하려 할 때 문제가 발생한다.
          + 데이터 머티리얼라이징의 한계: 단일 작업에 최적화된 경우 유용하지만, 복잡한 트랜잭션이나 새로운 데이터 구조가 필요한 기능 추가 시 문제가 발생할 수 있음.
     *

     이것이 ""트위터 규모의 마스토돈 클라이언트""로 증명되었다고 주장하는 것은, 실제로 하루 4000만 사용자 웹사이트를 운영하지 않는 한 불가능하다.
          + 규모의 중요성: 실제 대규모 사용자 환경을 시뮬레이션하는 것은 불가능하며, 이를 주장하기 어려움.
     *

     더 나은 접근 방식은 이벤트 소싱과 머티리얼라이즈드 뷰의 결합이다.
          + 이벤트 소싱과 머티리얼라이즈드 뷰의 결합: 복잡성 증가를 수반하지만, 더 나은 접근 방식으로 제시됨.
     *

     단일 데이터 모델이 모든 사용 사례를 지원할 수는 없다.
          + 데이터 모델의 다양성: 단일 데이터 모델로 모든 사용 사례를 지원하는 것은 불가능함.
     *

     데이터베이스에 대한 불만이 없다.
          + 데이터베이스의 유효성: 데이터베이스에 대한 불만이 없으며, 여전히 유효한 도구임.
     *

     동시성, 격리, 제약 조건 등의 개념이 누락되었는가? ""쿼리 토폴로지""가 정말로 개발자 환경에 우월한가?
          + 쿼리 토폴로지에 대한 의문: 동시성, 격리, 제약 조건 등의 중요한 개념이 누락되었으며, 쿼리 토폴로지가 개발자 환경에 우월하다는 주장에 의문을 제기함.
     *

     Rama에 대한 ELI5(쉽게 설명해달라)가 필요하다. 문서가 혼란스럽고, ""패러다임 변화""나 ""플랫폼""과 같은 유행어는 사용하지 말 것.
          + Rama에 대한 간단한 설명 요청: Rama에 대한 쉬운 설명과 유행어 사용을 피한 명확한 설명 요청.
     *

     이벤트 소싱 (+ 머티리얼라이즈드 뷰와 인덱스)는 RDBMS를 버리는 것이 아니다. 둘을 함께 사용할 수 있다.
          + 이벤트 소싱과 RDBMS의 공존: 이벤트 소싱과 머티리얼라이즈드 뷰를 RDBMS와 함께 사용할 수 있음, 둘은 상호 배타적이지 않음.

   배경 지식:
     * 이벤트 소싱(Event Sourcing): 시스템의 상태 변화를 이벤트로 기록하여, 이를 재생함으로써 시스템의 상태를 재구성할 수 있는 설계 패턴.
     * 머티리얼라이즈드 뷰(Materialized Views): 데이터베이스의 쿼리 결과를 물리적으로 저장하여, 데이터 읽기 성능을 향상시키는 기술.
     * RDBMS(Relational Database Management System): 관계형 데이터베이스를 관리하는 시스템.
"
"https://news.hada.io/topic?id=12804","예제로 알아보는 전환 잘 되는 가입 페이지 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      예제로 알아보는 전환 잘 되는 가입 페이지 만들기

     * 회원가입 페이지는 랜딩 페이지의 한 유형으로, 주로 등록을 유도하는 것을 목표로 함
     * 웹사이트 홈페이지와 달리, 회원가입 페이지는 방문자가 구체적인 행동을 취하도록 특별히 설계됨
     * 회원가입 페이지는 PPC 광고, 소셜 미디어 광고, 이메일 캠페인 등을 통해 유입된 트래픽의 전환율을 높이는 데 유용함
     * 회원가입 페이지에는 명확한 혜택이 드러나는 헤드라인, 필요한 세부 정보를 제공하는 본문, 매력적인 디자인, 설득력 있는 호출-to-액션(CTA) 등이 포함되어야 함
     * 회원가입 페이지는 사용자의 인내심을 시험하지 않고, 가능한 한 friction을 최소화하여 전환 과정을 간소화해야 함

회원가입 페이지에 포함되어야 할 요소

     * 회원가입 페이지는 명확한 혜택 중심의 헤드라인, 필요한 세부 정보를 제공하는 본문, 눈에 띄는 디자인, 설득력 있는 CTA를 포함해야 함.
     * 폼은 가능한 짧게 유지하거나 적절한 순간까지 숨겨두는 전략을 사용할 수 있음.
     * 사용자가 CTA를 클릭하면 폼이 나타나며, 이후에는 다양한 옵션을 제공할 수 있음.

회원가입 페이지의 최고 사례를 보여주는 예제들

     * Ruby 가입 페이지
          + 직접적인 헤드라인: 사람들이 연락할 때 더 많은 판매를 할 수 있도록 도움을 주겠다는 약속
          + 명확한 본문 카피: 고객의 고통 포인트를 강조하고 이를 서비스 제안과 연결
          + 눈에 띄는 이미지: 전화기를 꽉 쥔 손의 이미지가 사용자와의 의사소통의 단절을 상징
          + 두 개의 버튼: 전환율을 높이기 위해 A/B 테스트
     * GraphicsZoo 가입 페이지
          + 직관적인 카피: 앱이 무엇인지 간단한 용어로 설명하는 헤드라인
          + 간소화된 디자인: 메뉴 항목 없이, 이메일 주소만을 요구하는 단일 호출 동작
     * Flyhomes 가입 페이지
          + 잘 설계된 양식: CTA(행동 유도 문구)는 '지금 시작하기'
          + 상호작용형 디자인: 클릭 시 모든 것이 배경으로 사라지고 이메일 주소 입력만 요구
     * PointsBet 가입 페이지
          + 저항할 수 없는 제안: $10 투자에 10배인 $100을 돌려주는 제안
     * Heymarket 가입 페이지
          + 강한 헤드라인: ""개인적인 것이 아니라 비즈니스""라는 문구
          + 지원하는 본문: 헤드라인을 확장하고 초기 가격 제시
     * Zire 가입 페이지
          + 훌륭한 UI: 사용하기 쉽고 매력적인 인터페이스
          + 애니메이션 GIF: 가입 및 캠페인 준비 과정을 보여주는 애니메이션
     * Intouch Insight 가입 페이지
          + 직관적이면서 매력적인 레이아웃: 긴 양식과 많은 텍스트지만 깔끔
          + 60일 무료 체험 제공: 무료 체험에 대한 세부 정보 설명
     * reciProfity 가입 페이지
          + 강한 인트로 요소: 헤드라인과 히어로 이미지가 즉각적인 매력을 전달
          + 효과적인 이미지: 제품 샷은 방문자가 더 아래로 스크롤하도록 유도
     * Nakisa 가입 페이지
          + 혜택에 초점: B2B 대상 고객에게 직접적이고 매력적인 카피
          + 14일 무료 체험 제공: 제품 트라이얼의 장벽을 낮춤
     * Targetable 가입 페이지
          + 창의적인 카피: 고통 포인트를 다양한 방식으로 제시
          + 탐색 옵션 제공: 다양한 헤드라인과 유머의 사용
     * Marley Spoon 가입 페이지
          + 규칙을 언제 어기는지 아는 것: 메뉴 포함했으나 잘 동작함
          + 색상 사용: 두 버튼이 별도의 매력을 가짐
     * Libris/PhotoShelter 가입 페이지
          + 무료 60일 체험 제공: 마케팅 팀에게 유용함을 알려주는 본문 카피
          + G2에서 상을 받은 것을 강조: 브랜드 신뢰성 향상
     * Atlassian 가입 페이지
          + 간결함: 이메일 주소만 입력하면 가입 가능
          + 다양한 가입 옵션 제공: Google, Microsoft, Apple, Slack을 사용한 가입 지원
     * Typeform 가입 페이지
          + 깔끔하고 매력적인 디자인: 미니멀한 복사본과 단순한 블랙/화이트 모티브
          + 간소화된 가입 과정: Google, Microsoft, 이메일을 사용한 세 가지 간단한 가입 옵션

회원가입 랜딩 페이지 만드는 방법

     * 랜딩 페이지는 깔끔하고 눈에 띄며 브랜드 개성을 반영하는 디자인이어야 함
     * 페이지의 메시징(Copy)은 사용자가 회원가입을 결정하는 데 필요한 세부 정보만을 목표로 해야 함
     * CTA는 사용자가 회원가입을 하도록 설득하는 결정적인 순간으로, 눈에 띄는 텍스트와 대비되는 색상을 사용해야 함
     * 모바일 반응형 페이지는 필수이며, 모든 기기에서 페이지가 완벽하게 보이고 기능해야 함
     * 페이지의 로딩 속도는 빠르게 최적화되어야 하며, 느린 로딩은 사용자 경험을 저하시키고 검색 엔진 순위에도 영향을 줄 수 있음
     * 페이지를 게시한 후에는 성능을 테스트하고 개선하기 위해 A/B 테스트를 포함한 지속적인 테스트가 필요함
"
"https://news.hada.io/topic?id=12858","Show HN: #!/usr/bin/env docker run","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show HN: #!/usr/bin/env docker run

#!이란 무엇인가?

     * #! (shebang이라고 발음함)은 유닉스에서 주로 파이썬이나 배시 같은 스크립팅 언어를 위해 사용되는 관례
     * 이를 이용하여 크로스플랫폼 및 여러 리눅스 배포본에 애플리케이션을 배포하는 방식을 단일 파일로 패키징하는 데에 사용한 사례 소개
     * 예제 Dockerfile은 백엔드, 데이터베이스, UI를 모두 포함하는 전체 스택 서버를 단일 파일로 구성함
     * Cosmopolitan Libc와 비슷하지만 애플리케이션 패키징을 위한 것임

왜 사용하는가?

     * 왜 안 사용하겠는가?

안전한가?

     * 아마도 아닐 것임.

사용해야 하나?

     * 원한다면 사용할 수 있음.

성능이 좋은가?

     * 가능성이 있음.

유지보수가 가능한가?

     * 아니오.

작동하는가?

     * 예.

어떻게 실행하는가?

     * 다음 명령어를 통해 실행 가능: chmod +x ./Dockerfile ./Dockerfile
     * 그 후 http://127.0.0.1:8080 주소로 접속.

    GN⁺의 의견

     * 이 기사는 #! (shebang)을 이용하여 단일 Dockerfile로 전체 스택 서버를 패키징하는 독특한 방법을 소개함.
     * 기술적 호기심을 자극하고, 전통적인 애플리케이션 배포 방식에 대한 새로운 접근을 제시함.
     * 이 방식은 유지보수와 안정성 측면에서는 권장되지 않지만, 실험적이고 혁신적인 프로젝트에 관심이 있는 개발자들에게 흥미로운 대안이 될 수 있음.

   <<EOF같은 heredoc을 쓰려면 Dockerfile 상단에 # syntax = docker/dockerfile:1.4.0 가 필요합니다. 놀랍게도 syntax도 docker registry에서 받아옵니다.

   와... 올해 최대 정신적 충격입니다ㅋㅋㅋㅋㅋㅋㅋㅋㅌ

   재밌는 방법이네요

   ㅋㅋㅋ.. 참신하네요 진짜

   와.. 이거 참신하네요. 마치 철근과 콘크리트의 조합을 발견한..건 좀 오바이긴 하지만 좋습니다.
   #! 쉬뱅이 때마침 Dockerfile에서는 #주석문자인 바람에 이런식의 꼼수가 먹힌다니..
   앞으론 build-run-test.sh 따위의 별도 파일 대신 Dockerfile에 넣어야겠네요.

   이거 재미나네요. ㅎㅎㅎ ""왜 사용하지 말아야 하지?""
     * Cosmopolitan libc - Build-Once Run-Anywhere C
     * Cosmopolitan v1.0 공개
     * Cosmopolitan v2.0 릴리즈
     * Cosmopolitan v3.0 - ""Build Once Anywhere, Run Anywhere C/C++""

        Hacker News 의견

     * nix-shell shebang 사용 예시
          + nix-shell shebang을 사용하여, 필요한 모든 의존성을 포함한 실행 가능한 스크립트를 만드는 방법을 설명함.
          + 이미지를 50% 축소하는 파이썬 스크립트 예시 제공.
          + 스크립트에 실행 권한을 부여하면(chmod +x), 지정된 의존성을 가진 실행 파일이 됨.
     * /usr/bin/env의 -S / --split-string 옵션
          + GNU Coreutils 8.30부터 사용 가능한 -S 옵션에 대한 설명.
          + 이 옵션은 표준이 아닌 동작에 의존하며, 모든 텍스트를 실행 파일의 인수로 처리하는 OS에서만 작동함.
          + 대부분의 현대 GNU/Linux, BSDs, macOS에서는 이 비표준 동작이 작동함.
     * Docker와 아키텍처 호환성
          + Docker가 실제로는 리눅스 외의 다른 플랫폼에서는 리눅스 VM이 필요하다고 지적함.
          + 리눅스 컨테이너는 훌륭하지만, Docker를 진정한 크로스 플랫폼 솔루션으로 보기는 어려움.
     * 단일 파일 애플리케이션에 대한 의견
          + 단일 파일로 전체 애플리케이션을 포함하는 아이디어에 대한 찬사.
          + Docker의 복잡성에 대한 비판과, 보안이나 버전 관리를 위해 컨테이너를 사용하는 것에 대한 의문 제기.
          + WebAssembly(WASM)가 이러한 문제를 해결할 수 있는지에 대한 질문.
     * Docker 대안으로 Podman과 bubblewrap 언급
          + Docker 대신 Podman이나 bubblewrap을 사용하는 것이 더 나을 수 있음을 언급.
          + Podman은 특정 배포판에 좀 더 의존적이고, bubblewrap은 일부 배포판에서 보안 문제로 포함되지 않을 수 있음.
     * heredocs를 사용한 단일 파일 프로젝트
          + clever shebang 없이도 heredocs를 사용하여 어떤 언어나 인프라에 대한 단일 파일 프로젝트를 만들 수 있음.
          + bash 스크립트로 패키징된 동일한 앱의 예시를 제공.
     * ""단일 파일""에 대한 집착에 대한 비판
          + 모든 것을 하나의 파일로 패키징하는 대신, 디렉토리를 사용하여 자체 포함된 애플리케이션을 만들 수 있음을 지적.
          + 단일 파일로 만드는 것이 반드시 더 나은 방법은 아님을 언급.
     * 자가 소비 스크립트 패턴
          + 스크립트 내부에 다른 인터프리터 스크립트를 포함하고, sed를 사용하여 태그 사이의 스크립트를 추출하는 방법을 설명.
          + 이러한 방법이 때때로 매우 유용할 수 있지만, 복잡해질 수 있음을 인정.
     * guix shell을 shebang 위치에서 사용하는 방법
          + Guix 매뉴얼에서 가져온 guix shell을 사용한 예시를 제공.
          + 보다 복잡한 환경을 지정하는 매니페스트 파일과 함께 작동함.
     * 자체 빌드 및 실행되는 Dockerfile
          + 2021년 11월에 작성된 자체 빌드 및 실행되는 Dockerfile에 대한 설명과 예시 코드 제공.
"
"https://news.hada.io/topic?id=12785","에어드롭 발신자 추적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              에어드롭 발신자 추적

     * 베이징 넷셴 둥지안 포렌식 연구소의 포렌식 기술 전문가들은 아이폰 기기 로그를 심층 분석하고 전송 원리를 밝혀내어 에어드롭 관련 기록을 확인함.
     * 테스트 결과 발신자의 기기 이름, 사서함, 휴대폰 번호 관련 필드에서 휴대폰 번호와 사서함 관련 필드가 해시값 형태로 기록되어 있고, 해시값의 일부 필드가 숨겨져 있는 것을 발견함.
     * 기술팀은 해당 필드를 빠르게 크래킹하기 위해 암호 텍스트를 원본 텍스트로 변환하고 발신자의 휴대폰 번호와 사서함 계정을 빠르게 잠글 수 있는 상세한 휴대폰 번호 및 사서함 계정에 대한 '레인보우 테이블'을 제작함.
     * 결과적으로 발신자를 찾아내어 사법 감정 의견을 발표함.
"
"https://news.hada.io/topic?id=12768","폴라스(Polars)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              폴라스(Polars)

Polars: 새 시대를 위한 DataFrames

     * 빠른 성능: Polars는 성능을 염두에 두고 처음부터 작성됨. 멀티스레드 쿼리 엔진은 Rust로 작성되어 효율적인 병렬 처리를 설계함. 벡터화 및 칼럼 기반 처리를 통해 캐시 일관성 알고리즘과 현대 프로세서에서의 높은 성능을 가능하게 함.
     * 사용자 친화적: 데이터 랭글링에 익숙한 사용자라면 Polars를 쉽게 사용할 수 있음. 직관적인 표현식을 사용하여 가독성과 성능을 동시에 제공하는 코드 작성을 지원함.
     * 오픈 소스: Polars는 항상 오픈 소스로 유지됨. 활발한 개발자 커뮤니티에 의해 주도됨. 누구나 새로운 기능을 추가하고 기여할 수 있으며, MIT 라이선스 하에 무료로 사용 가능함.

GN⁺의 의견

     * Polars는 데이터 처리와 분석을 위한 현대적인 도구로, 뛰어난 성능과 사용 편의성을 제공함이 중요함.
     * 멀티스레드와 Rust 프로그래밍 언어의 결합은 데이터 처리 속도를 크게 향상시키는 요소임.
     * 오픈 소스 커뮤니티의 지원으로 지속적인 개선과 혁신이 가능하며, 이는 사용자에게 더 많은 기능과 자유를 제공함.
"
"https://news.hada.io/topic?id=12806","하와이 마지막 석탄 발전소를 대체한 배터리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        하와이 마지막 석탄 발전소를 대체한 배터리

        Hacker News 의견

     * 재미있는 사실: 오래된 발전소의 배기 냉각 튜브가 바다로 물을 배출하여 해양 생태계가 풍부한 따뜻한 환경을 만들어 인기 있는 다이빙/스노클링 장소가 되었음. 이곳은 'Electric Beach'라고 불림. 한 명의 사용자는 이곳에서 스노클링을 시도했지만, 큰 튜브를 보고 무서워서 물속으로 깊이 들어가지 못했다고 함.
     * 하와이의 에너지 프로젝트 관련 흥미로운 수치들:
          + 저장 용량: 565 MWh
          + 즉각적인 전력 공급 능력: 185 MW
          + 프로젝트 자금 조달: 2억 1,900만 달러
          + 하와이의 주거용 전기 가격은 kWh당 약 0.415달러로, 미국 평균 0.162달러보다 높음.
     * 최근 폭풍으로 인해 발전기가 손상되고 배터리가 매우 낮아져 섬 전체에 충분한 전기를 공급할 수 없어 순환 정전을 실시했음.
     * 화석 연료 발전소를 재생 가능 에너지와 배터리로 대체하는 주요 문제는 충분히 긴 시간 동안 에너지를 저장할 수 있는 배터리 시스템을 찾고, 태양/풍력이 없을 때 이를 대체할 충분한 용량을 갖추는 것임. 하와이의 날씨 패턴이 안정적이어서 기저 부하 발전 용량을 제거할 수 있을지도 모르지만, 총 용량이 배터리 시스템의 저장 용량보다 훨씬 높았기 때문에 이 전환에서 얼마나 많은 용량이 손실되었는지는 명확하지 않음.
     * 여기서의 아이디어는 배터리에 불을 붙여 터빈을 돌리는 것이 아니라 재생 가능 에너지를 버퍼링하여 안정적인 기저 부하를 제공하는 것임.
     * 하와이의 에너지 요구의 10-15%는 현재 지열 에너지로 충당되고 있음. 하와이가 화산 활동이 많은 지역임을 감안할 때, 이 비율을 늘릴 수 있을 것 같음. 아이슬란드의 경우 지열 에너지가 전체 생산의 50% 이상을 차지함. 하와이와 아이슬란드의 차이가 물리적/지질학적인 이유인지, 아니면 다른 이유인지 궁금함.
     * 배터리 시스템의 주요 장점 중 하나는 발전기의 회전 관성을 대체하여 안정적인 60Hz를 유지하는 그리드 안정화임. 이를 통해 전력선 주파수를 더 안정적으로 만들 수 있을지, 녹음에 포함된 선윤음을 통해 녹음 시간을 추정하는 것이 어려워질지 궁금함.
     * 한 사용자는 모든 주가 적어도 하나의 석탄 발전소를 영구적으로 가동하여 기술과 물자를 유지해야 한다고 주장함. 석탄은 미국에서 가장 풍부한 자원 중 하나이며, 국가 비상사태 시에 의존할 수 있지만, 모든 것을 재생 가능 에너지로 전환하면 그럴 수 없음.
     * 하와이가 주로 디젤에 의존하는 것으로 알고 있었음. 2021년에 석탄은 하와이 에너지 소비의 약 12%를 차지했음. 이는 좋은 변화이지만, 하와이에서 매우 더럽고 비싼 전기 소스를 모두 없애는 데는 아직 갈 길이 멀음.
"
"https://news.hada.io/topic?id=12842","DevDocs 기술 관련 문서화 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         DevDocs 기술 관련 문서화 플랫폼

DevDocs 소개

     * DevDocs는 다양한 API 문서를 빠르고 체계적이며 검색 가능한 인터페이스로 결합한 웹사이트임.
     * 사용자는 선호도 설정을 통해 더 많은 문서를 활성화하고 UI를 사용자 정의할 수 있음.
     * 마우스 사용 없이도 키보드 단축키를 통해 사이트를 효율적으로 사용할 수 있음.

검색 기능

     * 검색은 퍼지 매칭을 지원하여, 예를 들어 ""bgcp""를 입력하면 ""background-clip""이 나타남.
     * 특정 문서를 검색하려면 문서 이름이나 약어를 입력한 후 Tab 키를 누르면 됨.
     * 사용자의 브라우저 주소창을 사용하여 검색하는 방법도 배울 수 있음.

추가 정보

     * DevDocs는 오프라인에서도 작동하며, 모바일에서 사용 가능하고 웹 앱으로 설치할 수 있음.
     * 최신 소식을 얻기 위해서는 @DevDocs를 팔로우할 수 있음.
     * DevDocs는 무료이며 오픈 소스로 제공됨.
     * 코딩에 처음 접하는 사람들을 위해 freeCodeCamp의 오픈 소스 커리큘럼을 확인할 것을 권장함.

GN⁺의 의견

     * DevDocs는 개발자들에게 필수적인 도구로, 다양한 프로그래밍 언어와 프레임워크에 대한 문서를 한 곳에서 쉽게 찾아볼 수 있게 해줌.
     * 키보드 단축키와 퍼지 매칭 검색 기능은 개발자의 효율성을 높여주는 중요한 기능임.
     * 오프라인 접근성과 모바일 호환성은 사용자가 어디서나 정보에 접근할 수 있게 하여 DevDocs를 더욱 유용하게 만듦.

        Hacker News 의견

     * 유지보수자 중 한 명의 의견:
          + 새로운 릴리스에 대한 문서 업데이트는 문서 시스템이나 디자인이 재작성되지 않는 한 쉬움.
          + 일부 프로젝트는 정기적으로 문서 시스템을 변경함.
          + 문서 생성기가 임의의 클래스 이름을 생성하여 문서 정리를 번거롭게 만듦.
          + 매달 구식 문서 목록을 자동 생성하며, 도움이 필요함.
     * 오프라인 문서에 대한 블로그 포스트를 다시 방문한 사용자의 의견:
          + 오프라인에서 문서를 소비하기 쉽게 만드는 기술이 있는지 궁금함.
          + 표준화된 형식이 있는지, 아직 알지 못하는 것이 있는지 물음.
     * 장거리 여행 전 체크리스트를 확인하는 사용자의 의견:
          + 오프라인에서 언어 및 API 문서에 쉽게 접근할 수 있는 도구를 공유함.
          + Zig와 Vulkan을 사용한 개발을 계획 중임.
     * 이동 중 프로그래밍 시 유용함을 발견한 사용자의 의견:
          + WiFi가 불안정할 때 특히 유용함.
          + 문서를 통합하여 단일 표준 인터페이스로 만들면 생산성이 크게 향상될 것임.
     * 프로그래머의 기본적인 필요가 시스템적으로 충족되지 않았다는 데 놀란 사용자의 의견:
          + devdocs가 정기적으로 사용하는 라이브러리를 포함하지 않음.
          + Dash를 사용해보았지만 openai 문서를 직접 얻을 수 없었음.
     * 14시간 비행 중 이 도구를 사용하여 생산적인 날로 만든 사용자의 의견:
          + 산만함 없이 문서가 질문에 답할 수 있어 매우 유용함.
     * 오프라인 CLI 도구인 dedoc에 대한 사용자의 의견:
          + 브라우저로의 컨텍스트 전환을 피하고, CLI에서 devdocs를 다운로드, 검색, 읽을 수 있음.
          + Rust로 정적 컴파일되어 바이너리를 다운로드하여 설치할 수 있음.
     * 오픈 소스 Dash와 같은 도구에 대한 사용자의 의견:
          + 매우 좋음.
     * 이 도구에 대한 감사의 의견:
          + 공식 문서에서만 결과를 찾을 때 웹 검색 엔진보다 훨씬 나음.
          + 로컬에서 복사하여 실행하거나 호스팅할 계획임.
     * 이 도구를 매일 Emacs 패키지를 통해 사용하는 사용자의 의견:
          + Dash와 같은 솔루션에 비해 워크플로우가 훨씬 부드러움.
"
"https://news.hada.io/topic?id=12781","Show GN: 에어팟의 모션 센서로 올바른 자세를 추적하는 PosturePod","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 에어팟의 모션 센서로 올바른 자세를 추적하는 PosturePod

  소개

     * 에어팟 프로, 맥스에 있는 공간 음향 모션 센서를 사용
     * 좋은 자세와 나쁜 자세를 등록하면 나쁜 자세가 됐을 때 알려줌
     * 알림 읽어주기 기능으로 시리가 읽어줌
     * Mac Catalyst 지원으로 맥에서도 사용 가능
     * 목의 상하 각도로만 자세를 판단하여 한계가 존재

   시연 영상

   모션 api로 운동측정을 하는 앱도 있더라구요: 쓰리투고

   앤커 리버티4 nc에 이미 비슷한 기능이 있어 잘 이용하고 있습니다.
   놀라왔던 점은 앉아서 일할 때 뿐만아니라 오르막을 걸을 때도 알림이 울려서, 자세를 다시 생각할 기회를 만들어줍니다. 건강에 좋은 기능인 것 같습니다.

   접근 방법이 너무 좋은 것 같습니다.

   나쁜자세 알람이 너무 자주울려서 꺼버릴거같음 ㅋㅋ

   와 재밌는 아이디어네요! 사용해보겠습니다.

   ㅎㅎ 재밌어요. 기발하시네요.
"
"https://news.hada.io/topic?id=12835","풍력 터빈, 석유 및 가스 시추보다 조류에게 더 친화적","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     풍력 터빈, 석유 및 가스 시추보다 조류에게 더 친화적

풍력 터빈은 조류에게 석유 및 가스 시추보다 더 친화적임

     * 조류 관찰자들은 풍력 터빈으로 덮인 풍경을 볼 때 종종 불안해함.
     * 풍력 터빈의 날개가 시속 200km 이상으로 회전할 때, 조류가 잘려 나갈 것을 쉽게 상상할 수 있음.
     * 새로운 풍력 발전소 건설에 반대하는 캠페인에서 종종 이러한 가능성을 지적함.
     * 풍력 터빈이 적어도 일부 조류를 죽인다는 사실은 의심의 여지가 없으나, _Environmental Science & Technology_에 발표된 새로운 미국 데이터 분석에 따르면, 이로 인한 조류 사망 수는 무시할 수 있으며 조류 개체군에 미치는 영향은 미미함.

과학 기술 2024년 1월 13일

     * 바이든과 트럼프가 심장마비, 뇌졸중, 치매의 위험을 이길 수 있을까?
     * 심리학의 신뢰성 위기를 해결하고자 하는 심린 바지레
     * 2023년은 지금까지 가장 더운 해였음
     * 풍력 터빈은 조류에게 석유 및 가스 시추보다 더 친화적임
     * 미국의 로켓은 성공적인 데뷔를 했지만, 탑재된 달 착륙선은 그렇지 못함

GN⁺의 의견

     * 풍력 발전이 조류에게 미치는 영향에 대한 연구는 환경 보호와 지속 가능한 에너지 개발 사이의 균형을 찾는 데 중요함.
     * 이 기사는 풍력 터빈에 대한 일반적인 오해를 해소하고, 재생 가능 에너지원이 생태계에 미치는 실제 영향에 대한 인식을 높이는 데 기여할 수 있음.
     * 풍력 발전소 건설에 대한 반대 의견이 종종 환경적인 우려를 기반으로 하지만, 이 연구는 그러한 우려가 과장될 수 있음을 시사함으로써, 재생 가능 에너지에 대한 긍정적인 시각을 강화할 수 있음.

        Hacker News 의견

     * 조류 사망과 에너지원
          + 석유 시추로 인한 지역 조류 사망은 비교 대상이 아님. 조류 사망이 없다 해도, 풍력 터빈으로 구동되는 세상이 석유와 가스보다 조류에게 더 나음.
          + 기후 변화는 조류에게도 위협. 북미 조류 종의 2/3에게 ""존재적 위협""이 됨.
     * 녹색 에너지에 대한 오해
          + 오랜 기간 석유/가스 업계에서 일한 경험을 바탕으로, 풍력발전이 모든 조류를 죽인다는 등의 녹색 에너지에 대한 거짓 주장들을 들음.
               o 태양광 패널이 독성이 있고, 생산에 더 많은 에너지를 소모하며 재활용할 수 없다는 주장.
               o 전기차가 내연기관 차량보다 환경에 더 해롭다는 주장.
               o 리튬 채굴이 석유/가스 시추보다 더 나쁘다는 주장.
               o 태양광/풍력 가격이 치솟고 모두가 태양광/풍력을 포기하고 있다는 주장.
               o 태양광/풍력이 간헐적이라 작동하지 않는다는 주장.
               o 기후 변화가 실제로 존재하지 않거나 자연적이고 멈출 수 없거나 지구에 도움이 된다는 상반된 믿음.
     * 조류 보호에 대한 진정한 관심
          + 만약 조류를 진정으로 걱정한다면, 차량 통행 감소와 야생동물 보호 지역 확대에 대해 논의해야 함. 태양광과 풍력에 대한 야생동물 보호 논쟁은 대부분 주의를 분산시키는 것.
     * 조류 연구에 대한 자금 지원 필요성
          + 실제 연구에 대한 충분한 자금 지원이 필요. 현재 인용된 연구는 자원봉사자가 보고한 설문조사에 기반하고 있어, 응답 편향이 있을 수 있음(예: 석유 및 가스 시추 근처에서 조류 관찰이 감소한 것은 사람들이 그 지역에서 조류 관찰을 원하지 않기 때문일 수 있음).
     * 에너지 논쟁의 본질
          + 기후 논쟁의 제목은 석유/석탄과 풍력/태양광에 찬성하거나 반대하는 것으로 나뉨. ""신뢰할 수 있고 깨끗하며 저렴한 에너지원은 무엇인가?""라는 질문이 더 관련성 있고 생산적임.
     * 고양이에 의한 조류 사망
          + 추정에 따르면 미국에서만 매년 고양이가 13억에서 40억 마리의 조류를 죽임. 이 중 69%는 길거리나 주인 없는 고양이에 의한 것.
     * 조류의 민감한 호흡기
          + 조류는 민감한 폐를 가지고 있어, 신선하고 깨끗한 공기를 마시는 것이 중요함. 공기 중의 독소나 오염물질은 조류에게 심각한 문제나 죽음을 초래할 수 있음.
          + 공기 오염으로 매년 1000만 명이 사망함. 공기 오염이 인간보다 조류에게 더 큰 영향을 미칠 것임.
     * 조류에 대한 관심과 고양이 문제
          + 조류에 대한 진정한 관심이 있다면, 고양이에 의한 조류 사망에 대한 논의가 이루어져야 함.
     * 에너지 인프라와 조류에 관한 논문 링크
          + 조류와 에너지 인프라에 관한 논문 사전 인쇄본 링크 제공.
     * 풍력발전에 대한 석유 및 가스 산업의 의도적인 비방
          + 석유 및 가스 산업이 풍력발전기를 조류의 고기 분쇄기로 묘사하려는 의도적인 노력이 있음. 전 세계의 다양한 ""특별 이익 집단""에게 동일한 사진과 텍스트를 배포하여 불가피한 전환을 막으려 함. 이 모든 것이 법적으로 허용됨. 그들은 고래에 대해서도 같은 일을 함.
"
"https://news.hada.io/topic?id=12827","CopilotKit - 오픈소스 Copilot Platform","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CopilotKit - 오픈소스 Copilot Platform

     * 인앱 챗봇이나 AI 지원하는 텍스트 입력창을 만들기 위한 React용 오픈소스
     * <CopilotPortal /> :
          + 현재 앱 상태를 보고, 앱 내에서 액션을 실행 하는 인앱 AI 챗봇
          + 앱의 프론트엔드/백엔드와 대화하거나, 플러그인을 통해 써드파티와 연결
     * <CopilotTextarea /> :
          + AI를 이용한 텍스트 생성창
          + 기존 <textarea />를 대체하는 것만으로 자동완성, AI편집, 초안 작성등을 도와줌
"
"https://news.hada.io/topic?id=12824","Auto Wiki - GitHub Repo를 Wiki형태로 자동 문서화하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Auto Wiki - GitHub Repo를 Wiki형태로 자동 문서화하는 도구

     * GitHub URL의 코드를 분석해서 자동으로 Wiki 형태로 문서를 작성
     * 문서상 각 코드 인용은 해당 코드로 가는 참조 링크 포함
     * 각 코드베이스의 구성을 하이레벨에서 쉽게 확인 가능
     * 현재 GitHub의 가장 인기 저장소 1000개에 대해서 적용 되어 있음
     * 비공개 Repo에 대해서는 별도 비용을 내고 처리 가능
"
"https://news.hada.io/topic?id=12754","Apple Vision Pro, 2월 2일에 미국에서 정식 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Apple Vision Pro, 2월 2일에 미국에서 정식 출시

     * 애플 스토어 매장과 온라인에서 사전 주문 1/19일 금요일 오전 5시(PST) 부터 시작 (한국시간 저녁 10시)
     * 새로워진 앱스토어를 통해 iOS/iPadOS 용 100만 개 이상의 호환 앱을 이용가능
     * VisionOS 로 구동되며 완전히 새로운 3차원 사용자 인터페이스와 사용자의 눈, 손, 음성으로 제어되는 입력 시스템을 갖춘 내비게이션
     * Magic Keyboard 및 Magic Trackpad 지원으로 작업 공간 구성 가능
     * Mac 가상 디스플레이 기능으로 맥 기기의 휴대 가능한 4K 디스플레이로 이용 가능
     * Apple Immersive Video 지원 (Spatial Audio와 함께 캡처한 180도 3차원 8K 영상)
     * Apple 아케이드의 250개 이상의 타이틀을 포함하여 App Store의 게임에 액세스 가능
     * iPhone 15 Pro 또는 iPhone 15 Pro Max에서 공간 비디오를 캡처하고 Vision Pro에서 재생 가능
     * Apple Vision Pro의 FaceTime은 사용자 주변 공간을 활용하여 통화 중인 모든 사람이 실물 크기로 보이도록 하고, Spatial Audio는 각 사람의 목소리가 해당 위치에서 나오는 것처럼 들리게 함
     * 마이크로 OLED 기술을 이용하여 2,300만 픽셀을 각각 우표 크기의 두 디스플레이에 담아냄
     * 애플 실리콘 M2와 카메라 12개, 센서 5개, 마이크 6개로부터의 입력을 처리하는 R1 칩
     * 256GB 용량. $3499
"
"https://news.hada.io/topic?id=12811","IKEA 공기청정기에 대한 Contra Wirecutter의 평가 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              IKEA 공기청정기에 대한 Contra Wirecutter의 평가 (2022)

IKEA 공기청정기에 대한 Wirecutter의 비판에 반박

     * IKEA가 공기청정기 시장에 진출했으나, Wirecutter는 이 제품에 대해 인상적이지 않다고 평가함.
     * Wirecutter는 해당 공기청정기가 저렴하고 예쁘지만 성능이 떨어진다며, 다른 제품을 구매하라고 권장함.
     * 이 리뷰는 사실적 오류, 오해의 소지가 있는 진술, 자가 모순적인 실험으로 가득 차 있으며, 기본 과학 지식, 공기 필터 기준, IKEA의 공개 사양, 그리고 Wirecutter가 다른 공기청정기에 적용하는 상식적 논리에 대한 무지에서 비롯된 것으로 보임.

진정한 HEPA 필터에 대하여

     * Wirecutter는 IKEA 공기청정기가 ""진정한 HEPA""가 아니라고 주장하지만, ""진정한 HEPA""는 법적이나 과학적 의미가 없음.
     * IKEA 공기청정기는 유럽 HEPA 필터 기준에 따른 E12 클래스 필터를 사용하며, Wirecutter가 추천하는 제품은 H13 클래스 필터를 사용함.
     * Wirecutter는 H13이 충분히 좋지만 E12는 충분하지 않다는 이유를 제시하지 않음.

물리학에 대하여

     * 공기청정기의 물리학은 단순한 체와 거름망의 원리와 다름.
     * 공기청정기는 공기를 복잡한 경로를 통해 통과시키며, 큰 입자와 작은 입자 모두를 잘 포획함.
     * 가장 침투성 입자 크기(MPPS)는 일반적으로 약 0.15 마이크론이며, E12와 H13 필터 모두 이 크기의 입자를 거의 완벽하게 포획함.

필터에 대하여

     * E12와 H13 필터 사이의 차이는 실제 사용 환경에서 큰 문제가 되지 않음.
     * 공기청정기의 성능은 주로 처리하는 공기의 양에 의해 결정됨.

성능에 대하여

     * IKEA 공기청정기의 CADR(청정공기 전달률)은 82.4로, 매우 작은 방에 적합함.
     * Wirecutter가 추천하는 제품의 CADR은 135로 더 높지만, 작은 공간에서는 IKEA 제품의 CADR도 충분함.

비용에 대하여

     * IKEA 공기청정기는 에너지 사용이 적고, 필터 교체 비용이 저렴함.
     * IKEA는 필터를 4개월마다 교체할 것을 권장하지만, 실제 필터 수명은 더 길 수 있음.

테스트에 대하여

     * Wirecutter의 테스트 결과는 신뢰할 수 없으며, IKEA 공기청정기의 성능을 과소평가하는 것으로 보임.
     * 실제로 IKEA 공기청정기는 작은 방에서 충분한 성능을 제공할 수 있음.

논리에 대하여

     * Wirecutter는 다른 제품을 추천하면서 저렴하고 에너지 효율이 높은 제품을 선호하는 모순된 태도를 보임.
     * IKEA 공기청정기는 저렴하고 에너지 효율이 높으며, 작은 공간에 적합한 선택일 수 있음.

결론

     * 작은 방에서는 IKEA 공기청정기가 시장에서 가장 비용 효율적인 제품일 수 있음.
     * Wirecutter의 비판은 잘못된 정보와 오해의 소지가 있는 주장에 기반하고 있음.

GN⁺의 의견

     * 공기청정기 선택 시 성능뿐만 아니라 비용 효율성도 중요한 고려 사항임.
     * Wirecutter와 같은 리뷰 사이트의 추천이 항상 최선의 선택이 아닐 수 있으므로, 제품 사양과 사용 환경을 꼼꼼히 비교해야 함.
     * IKEA 공기청정기는 작은 공간 사용자에게 매력적인 옵션이 될 수 있으며, 이 글은 소비자가 더 정보에 기반한 구매 결정을 내리는 데 도움이 될 수 있음.

        Hacker News 의견

     * IKEA STARKVIND 공기청정기에 대한 긍정적인 평가
          + IKEA STARKVIND의 큰 버전과 테이블 버전이 있음.
          + 테이블 버전은 공간 절약이 가능하며, 일반 버전은 크기가 커서 배치가 어려움.
          + 공기질 측정 및 제어가 Zigbee를 통해 노출되어 Zigbee2MQTT와 Home Assistant와 잘 작동하는 것이 주요 특징.
          + IKEA에서 최근에 출시한 VINDSTRYKA 공기질 센서는 PM2.5 측정이 STARKVIND의 측정과 일치하지 않는 것 같지만, 정확한 비교 테스트는 하지 않음.
     * Wirecutter의 HEPA 필터 기준에 대한 의문 제기
          + Wirecutter가 ""true-HEPA""를 ""H13""으로 사용하는 것 같음.
          + H13은 HEPA로 분류되며, 그 이하는 EPA로 분류됨.
          + 이러한 분류 차이가 IKEA 공기청정기에 대한 Wirecutter의 평가에 중요한 역할을 함.
     * 블로그 포스트의 공격적인 어조에 대한 비판
          + 블로그 포스트의 공격적이고 냉소적인 어조 때문에 읽기를 중단함.
          + 좋은 주장이라면 과도한 비난 없이도 증명될 수 있어야 함.
          + Wirecutter에게 메시지를 전달하려는 의도가 있다면, 공격적인 태도는 오히려 반발을 살 수 있음.
     * 공기청정기의 필요성에 대한 개인적인 의견
          + 공기 중의 세균, 포자, 배기 입자에 대해서는 크게 신경 쓰지 않지만, 지하실에 먼지가 많이 쌓임.
          + IKEA와 유사한 공기청정기가 과도한지, 더 효과적이고 조용하며 전력 소모가 적은 대안이 있는지 궁금함.
     * 공기청정기 필터의 로딩 사양에 대한 설명
          + 필터는 일정한 로딩 후에 특정 효율에 도달하는 것이 보장됨.
          + 이러한 사양은 테스트 결과의 차이를 설명할 수 있음.
     * sqair 공기청정기에 대한 긍정적인 경험 공유
          + sqair 공기청정기를 구매하여 알레르기와 아침 콧물이 거의 없어짐.
          + 매우 바쁜 도로 옆에 살기 때문에 항상 가동하고, 탄소 필터도 사용함.
          + 현재 콘도의 면적보다 작은 면적을 청정하기 때문에 두 번째 공기청정기를 구매하고 싶음.
     * IKEA 공기청정기에 대한 개인적인 경험
          + IKEA 공기청정기를 소유하고 있었지만, 먼지 진드기 알레르기에 대해 Coway 필터만큼 효과적이지 않았음.
          + 큰 먼지 입자를 청소하기도 덜 직관적임.
          + 대신 STARKVIND 모델을 시도해볼 것을 권장함.
     * 공기청정기 구매 후의 긍정적인 리뷰
          + 공기청정기의 가장 큰 장점은 필터 교체 비용이 시장의 다른 제품보다 훨씬 저렴함.
          + 공기 오염이 심한 도시에 거주하고 있으며, 공기청정기가 공기를 잘 정화함.
          + IKEA에서 별도로 판매하는 작은 공기질 센서를 사용하여 자리 근처의 공기질을 측정할 수 있음.
     * 해커뉴스에서 이전에 논의된 주제에 대한 언급
          + 이전 토론(2022년 6월 20일, 1474포인트, 708개의 댓글) 링크 제공.
     * 해커뉴스에서 반복되는 큰 이야기를 인식하는 사용자의 경험 공유
          + 해커뉴스를 오래 읽어온 결과, 큰 이야기가 반복되는 것을 발견함.
          + 이전에 논의된 주제에 대한 링크 제공.
"
"https://news.hada.io/topic?id=12783","Rosebud AI - 게임 설명을 브라우저용 게임으로 만들어 주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Rosebud AI - 게임 설명을 브라우저용 게임으로 만들어 주는 도구

     * 게임 설명을 작성하면 코드로 변환하여 게임으로 만들어주는 도구
          + ChatGPT + Midjourney + Replit 형태
     * 채팅 인터페이스를 가진 코드 에디터 제공
     * 2D, 3D 그래픽 애셋을 내부에서 직접 생성
     * 프롬프트로 처음부터 만들거나, 기존 프로젝트를 클론해서 손쉽게 제작 가능
     * 유료모델은 Roblox 처럼 개발자에게 무료로 오픈하고, 개발자가 사용자에게 돈을 받을때 일부 수수료를 받는 모델을 적용할 예정

   개발자로서 위기감 느낍니다 ㄷㄷㄷ
   러다이트 운동이라도 해야 하는 거 아닐까...

   제목에 오기인 듯 합니다. rosubud -> rosebud

   현재는 베타 상태라 사용방법은 Show HN에 올라온 내용을 참고하세요 https://news.ycombinator.com/item?id=38868185
    1. https://www.rosebud.ai/hn 에 가서 디스코드 베타 테스터 채널 참여
    2. https://play.rosebud.ai 에 가서 HelloHN 입력해서 억세스 권한 취득
"
"https://news.hada.io/topic?id=12780","더 나은 리더가 되고 싶으세요? 퇴근 시간 이후에는 업무에 대해 생각하지 마세요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             더 나은 리더가 되고 싶으세요? 퇴근 시간 이후에는 업무에 대해 생각하지 마세요.

     * 매니저들이 공식적인 업무 시간이 끝난 후에도 계속해서 업무에 대해 생각하는 것은 드문 일이 아님
     * 이는 직원 문제에 대한 고민, 고객 문제에 대한 해결책 모색, 다음 날 할 일 목록 작성 등을 포함
     * 최근 심리학 저널에 발표된 연구에 따르면, 저녁 시간에 업무에 대한 생각을 멈추지 않는 것은 리더의 성과에 도움이 되기보다 해가 될 수 있음
     * 특히 매니저 역할이 처음인 리더들에게는 정신적 자원이 소진되어 역효과를 낳을 수 있음
     * 리더들이 전날 밤 업무에서 정신적으로 분리할 때 다음 날 더 재충전되어 리더십 효율성이 가장 높았음

연구 방법과 발견

     * 73명의 리더와 그들에게 직접 보고하는 직원을 대상으로 10일간의 일기 연구를 진행함
     * 리더들은 매일 아침 업무 전날 밤의 경험을 반영하여 업무로부터의 분리 정도와 업무에 대한 부정적인 생각의 정도를 보고함
     * 매일 아침 출근 전, 리더들에게 전날 밤 자신의 경험을 되돌아보고 업무로부터의 분리(즉, 인지적으로 업무에서 벗어난 정도)와 반추(업무에 대해 계속 부정적인 생각을 하는 정도)에 대해 보고하도록 요청
     * 업무에서 분리된 리더들은 다음 날 더 재충전되는 느낌을 받고, 리더 역할에 대해 더욱 강하게 공감하는 데 도움이 된다는 것을 발견
     * 반면, 저녁에 업무에 대해 고민한 리더들은 다음 날 더 지치는 느낌을 받아서 리더로서의 정체성을 확립하는 능력이 저하

리더의 효율성에 대한 직원의 평가

     * 각 리더의 한 명의 직원에게 매일 업무 종료 시 리더의 효율성을 평가하도록 요청함
     * 전날 밤 업무에서 분리되어 재충전된 리더들은 그날 더 변혁적이고 강력한 리더로 평가받음
     * 반대로, 저녁에 업무에 대해 고민한 리더들은 그날 더 지치고 리더 역할과의 연결이 약해져 덜 변혁적이고 강력하다고 평가받음

경험이 적은 리더에게 더 큰 영향

     * 리더십 역할에서의 경험이 적은 리더들에게는 업무 후 고민이 특히 더 지치게 할 수 있음
     * 리더십 역할을 처음 맡는 사람들에게는 업무 후 휴식과 회복의 리듬을 찾는 것이 특히 유익할 수 있음

리더를 위한 실용적 권장 사항

     * 업무 후 분리 방법 찾기: 새로운 취미, 운동, 사랑하는 사람과 시간 보내기, 책 읽기 등을 통해 저녁 시간에 업무에서 정신을 돌릴 수 있는 활동을 찾는 것이 현명함
     * 업무와 가정 사이의 경계 설정: 특히 새로운 리더들에게 중요하며, 업무 시간 외에 팀과의 소통 규범을 설정하는 것이 도움이 될 수 있음
     * 회복 시간을 사용하여 소진을 극복하고 리더로서의 정체성 강화: 리더십은 어렵고, 아침에 상쾌함을 느끼는 사람들이 지친 리더들보다 리더십 책임을 더 잘 수행할 수 있음

   스트레스 관리와 업무 성과가 연관된다는 이야기군요.

   한국은 어림 없죠!

   리더뿐 아니라 모두가 그래야할듯요
"
"https://news.hada.io/topic?id=12836","Jan - 오픈소스 ChatGPT 대체제를 위한 크로스 플랫폼 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Jan - 오픈소스 ChatGPT 대체제를 위한 크로스 플랫폼 프레임워크

     * 100% 로컬, 모든 하드웨어에서 실행: NVidia GPU, 애플 실리콘부터 멀티 GPU 클러스터 까지
     * 최종 목표는 누구나 AI를 쉽게 탑재할수 있도록 지원 하는 것
          + Jan Framework, Jan Desktop Client + Server, Nitro
     * Nitro : C++로 작성된 고효율 추론 엔진 (3MB)
          + Llama.cpp + TensorRT + Whisper.cpp + StableDiffusion

   한글 성능은 어떤가 궁금하네요
"
"https://news.hada.io/topic?id=12879","SQLite: Wal2 모드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            SQLite: Wal2 모드

Wal2 모드 활성화/비활성화

     * SQLite의 ""Wal2"" 모드는 ""wal (Write-Ahead Logging)"" 모드와 매우 유사함.
     * 데이터베이스를 wal2 모드로 변경하려면 PRAGMA journal_mode = wal2; 명령 사용.
     * ""wal"" 모드에서 직접 ""wal2"" 모드로 변경 불가능하며, 먼저 롤백 모드로 변경해야 함.
     * wal 모드 데이터베이스를 wal2 모드로 변경하기 위해 PRAGMA journal_mode = delete; 후 PRAGMA journal_mode = wal2; 명령을 사용.
     * wal2 모드 데이터베이스는 해당 브랜치에서 컴파일된 SQLite 버전에서만 접근 가능.
     * 다른 버전의 SQLite를 사용하려고 하면 SQLITE_NOTADB 오류 발생.
     * wal2 모드 데이터베이스를 롤백 모드로 변경하여 모든 버전의 SQLite에서 접근 가능하게 하려면 PRAGMA journal_mode = delete; 명령 사용.

Wal2 모드의 장점

     * 기존 wal 모드에서는 작성자가 데이터베이스에 데이터를 쓸 때 데이터베이스 파일을 직접 수정하지 않고 ""-wal"" 파일에 새 데이터를 추가함.
     * 읽기 작업은 원본 데이터베이스 파일과 ""-wal"" 파일 모두에서 데이터를 읽음.
     * 어느 시점에 ""-wal"" 파일에서 데이터베이스 파일로 데이터가 복사되며, 이를 ""체크포인트""라고 함.
     * 체크포인트는 PRAGMA wal_checkpoint 또는 sqlite3_wal_checkpoint_v2()를 통해 명시적으로 수행되거나, PRAGMA wal_autocheckpoint를 설정하여 자동으로 수행됨(기본 설정).
     * 체크포인터는 작성자를 차단하지 않고, 작성자도 체크포인터를 차단하지 않음.
     * 하지만 체크포인트 중에 작성자가 데이터베이스에 쓰면 새 데이터가 wal 파일 끝에 추가되어 wal 파일이 계속 커질 수 있음.
     * wal2 모드에서는 체크포인터가 방해받지 않고 완료할 기회가 없어도 wal 파일이 무한정 커지는 문제가 없음.
     * wal2 모드에서는 하나 대신 두 개의 wal 파일(""-wal"" 및 ""-wal2"")을 사용함.
     * 데이터가 쓰여질 때, 작성자는 첫 번째 wal 파일에 새 데이터를 추가하기 시작함.
     * 첫 번째 wal 파일이 충분히 커지면, 작성자는 두 번째 wal 파일에 데이터를 추가하기 시작함.
     * 이후 첫 번째 wal 파일은 체크포인트가 가능하며, 두 번째 wal 파일이 충분히 커지고 첫 번째 파일이 체크포인트되면 다시 첫 번째 파일로 전환함.

응용 프로그래밍

     * 사용자 관점에서 wal과 wal2 모드의 주요 차이점은 체크포인트와 관련이 있음.
     * wal 모드에서는 언제든지 체크포인트를 시도할 수 있지만, wal2 모드에서는 작성자가 ""다른"" wal 파일로 전환한 후에야 체크포인트가 가능함.
     * wal 모드에서는 트랜잭션이 커밋된 후 wal 파일의 총 페이지 수를 인자로 사용하여 wal-hook(콜백)이 호출됨.
     * wal2 모드에서는 wal-hook이 두 wal 파일의 총 미체크포인트 페이지 수를 인자로 사용하거나, ""다른"" wal 파일이 비어 있거나 이미 체크포인트된 경우 0을 인자로 사용하여 호출됨.
     * 클라이언트는 wal2 모드 데이터베이스에 대해 wal 모드와 동일한 체크포인트 전략을 사용하는 것이 권장됨.
     * wal-hook은 트랜잭션이 디스크에 커밋되고 데이터베이스 잠금이 해제된 후에 호출되지만, sqlite3_step() 호출 내부에서 발생함.
     * BEGIN CONCURRENT 시스템에서는 wal-hook 내에서 체크포인트를 실행하는 대신, 애플리케이션 뮤텍스가 해제된 후에 이 작업을 연기하는 스레드를 사용할 수 있음.

  GN⁺의 의견

     * SQLite의 wal2 모드는 데이터베이스의 동시성과 효율성을 향상시키는 새로운 저널링 방식을 제공함.
     * wal 파일의 무한 증가 문제를 해결하여 시스템의 안정성과 성능을 개선하는 것이 중요함.
     * 개발자들은 wal2 모드의 도입으로 인해 데이터베이스 체크포인트 전략을 재고하고, 더 나은 동시성을 위해 적절한 체크포인트 로직을 구현해야 할 필요가 있음.

        Hacker News 의견

     *

     WAL2 모드에서는 하나 대신 두 개의 WAL 파일을 사용함. 파일은 ""<데이터베이스>-wal""과 ""<데이터베이스>-wal2""로 명명됨. 데이터가 데이터베이스에 쓰여질 때, 쓰기 작업은 첫 번째 WAL 파일에 새 데이터를 추가하는 것으로 시작함. 첫 번째 WAL 파일이 충분히 커지면, 쓰기 작업은 두 번째 WAL 파일에 데이터를 추가하도록 전환함. 이 시점에서 첫 번째 WAL 파일은 체크포인트를 할 수 있고(이후에 덮어쓸 수 있음), 두 번째 WAL 파일이 충분히 커지고 첫 번째 파일이 체크포인트된 후에는 다시 첫 번째 WAL 파일로 전환함. 이런 과정이 계속됨.
          + 이 방식은 매우 논리적이어서 처음부터 WAL 모드가 이렇게 구현되지 않은 이유를 이해할 수 없음. 아마도 시기상조로 여겨진 최적화였을 수도 있음.
          + 이 모드가 일반적으로 사용 가능해지기를 기대함.
     * Bedrock
          + Bedrock은 더 흥미로운 브랜치임.
          + WAL2 + CONCURRENT 기능을 포함함.
          + Expensify가 단일 노드에서 4M QPS까지 확장하는 데 사용하는 브랜치임(6년 전).
     * WAL2 모드와 유사한 기술인 left-right primitive에 대한 링크 제공.
          + 이 기술은 링크된 구현보다 오래되었지만 독립적으로 재발견되었으며, 특히 Noria라는 다른 고성능 SQL 데이터베이스를 지원하기 위해 작성됨.
     *

     WAL2 모드에서는 하나 대신 두 개의 WAL 파일을 사용함. 파일은 ""<데이터베이스>-wal""과 ""<데이터베이스>-wal2""로 명명됨.
          + 얼마나 많은 사람들이 wal 파일을 삭제할지 궁금함. wal2로 전환했으니 wal 파일은 남은 것으로 생각할 수 있기 때문.
     * Microsoft SQL Server는 유사한 아키텍처를 사용하지만 별도의 로그 파일 대신 물리적(디스크 상의) 로그 파일 내에 Virtual Log Files(VLF)를 할당함. VLF는 링 버퍼에서 할당되며 수천 개까지 있을 수 있음.
     * 이 기능이 아직 출시되지 않았다는 것을 알 수 있음.
     * WAL이 데이터 무결성을 유지하고 충돌로부터 복구하는 데 도움이 되기 위해 존재한다는 점이 항상 걱정되었음. 그러나 파일 자체가 배치로 쓰여지고(디스크에 신뢰성 있게 커밋됨) 데이터베이스의 모든 변경 후가 아니라 성능을 얻기 위해 그렇게 함. 이것이 목적을 무너뜨리지 않는가? 일반적으로 데이터베이스에 특정하지 않고, 이에 대한 답을 찾지 못함.
     * 이것이 Litestream과 같은 새로운 분산 SQLite 시스템에 어떤 영향을 미칠지 궁금함.
     * 그래서 기본적으로 데이터베이스를 위한 더블 버퍼링인가? 이해가 됨.
     * WAL2 모드는 HC-tree 백엔드 연구의 벤치마크에 포함되었음.
"
"https://news.hada.io/topic?id=12861","LG 세탁기, 하루 3.7GB 데이터 전송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LG 세탁기, 하루 3.7GB 데이터 전송

LG 세탁기의 데이터 사용량

     * LG 세탁기 사용자가 자신의 스마트 가전제품이 하루 평균 3.66GB의 데이터를 사용하는 것을 발견함.
     * 사용자는 세탁기가 왜 이렇게 많은 데이터를 필요로 하는지 의아해하며, 라우터 UI를 통해 세탁기의 Wi-Fi 연결을 차단함.
     * 소셜 미디어 사용자들은 세탁기가 데이터를 많이 사용하는 이유에 대해 추측하며, 해킹이나 다른 문제가 있을 수 있음을 지적함.

세탁기가 DLC를 다운로드하거나 해킹당한 것인가?

     * 세탁기 소유자는 세탁기가 ""DLC(다운로드 가능한 세탁 사이클)""를 위해 Wi-Fi를 사용할 수 있다고 농담함.
     * 세탁기가 다양한 의류 유형에 대한 프리셋을 다운로드하지만, 대부분의 데이터는 업로드됨.
     * 세탁기가 암호화폐 채굴에 사용되거나, LG 스마트 가전제품을 해킹하는 사례가 있었으며, 세탁기가 봇넷의 일부로 사용될 가능성도 있음.

Asus 라우터 문제?

     * 데이터 문제에 대한 가장 가능성 있는 답은 Asus가 데이터 사용량을 잘못 보고했을 수 있다는 것임.
     * 세탁기 소유자는 이제 세탁기를 오프라인으로 운영하고 있으며, LG는 추가 정보 요청에 즉시 응답하지 않음.
     * Asus 라우터 펌웨어 오류로 인해 업로드량이 과대 보고될 수도 있음.

연결된 장치 해킹의 실제 위험

     * 스마트 연결 장치의 해킹은 심각한 문제가 될 수 있음.
     * 의료 또는 산업 IoT 장치가 공격자에 의해 장악될 경우 발생할 수 있는 문제를 고려함.
     * Bosch 네트워크 연결 렌치가 취약점으로 가득 차 있으며, 패치가 곧 제공될 예정임.

GN⁺의 의견

     * 스마트 가전제품의 데이터 사용량에 대한 이해는 사용자의 개인 정보 보호와 보안에 중요함.
     * 장치가 해킹되거나 잘못된 목적으로 사용될 가능성이 있어, 사용자는 스마트 기기를 신중하게 관리해야 함.
     * 이 사례는 IoT 기기의 보안 취약성과 사용자의 데이터 관리 필요성을 강조함으로써, 스마트 홈 기술에 대한 경각심을 불러일으키는 데 도움이 됨.

        Hacker News 의견

     * 3.7GB 데이터 사용량은 많아 보일 수 있지만, 현대 가전 제품은 효율적으로 설계되어 있어, 데이터가 세탁기와 라우터 사이를 순환하며 세탁 주기 사이에 냉각되는 역할을 함. 사람들은 손빨래를 할 때 얼마나 많은 데이터를 사용하는지 이해하지 못함.
     * 스마트 세탁기가 자동 진단 보고서를 중앙 추적기에 업로드하도록 설계되었다면, 이 기계가 오류 로그를 대량으로 생성하는 실패 상태에 빠져 있을 가능성이 있음.
     * 사용자가 ASUS 라우터 도구의 부정확성을 지적한 후, 다른 LG 스마트 세탁기 사용자들이 자신들의 앱에서 나타나는 데이터 사용량을 공유함. 이러한 가전 제품들은 일반적으로 하루에 1MB 미만을 사용하는 것으로 밝혀짐.
     * 한 사용자는 Wi-Fi 연결된 LG 세탁기와 건조기를 소유하고 있으며, 90일간의 네트워크 트래픽 데이터를 보관함. 두 기기 모두 지난 90일 동안 총 10MB를 사용했으며, 이는 AWS EC2가 소유한 IP 주소로 8883 포트를 통해 100% 전송됨. 일반적으로 하루에 100KB 미만을 사용하며, 최대 2MB, 최소 12KB를 기록함.
     * 세탁기가 작동하는 날과 사용하지 않는 날을 비교해보면, 데이터 사용량이 일치함. 이 정도의 데이터 사용량은 수용 가능함.
     * 아직도 누군가가 봇넷에 대해 언급하지 않은 이유는 무엇인가? 이러한 기기들은 Mirai 클론과 같은 봇넷의 완벽한 타깃이 될 수 있음.
     * 네트워크 연결된 기기의 매력을 이해하지만, 모든 것에 대해 로컬 제어를 원함. 클라우드 옵션이 추가되는 것도 좋지만, 로컬 우선이어야 함. 현재의 ""어디서나 제어"" 솔루션은 가장 게으르고 사생활 침해적임. 또한 XYZ 회사가 2년 후에 서비스를 중단하고 제품을 버릴 경우, 제품을 더 이상 사용할 수 없을 수도 있음.
     * SEO 기사가 쓰레기임. 정보와 광고가 가득한 페이지를 통해 결론이 없는 내용의 한 문단을 찾아내야 함. 구글을 바라봄.
     * Wi-Fi가 없는 가전 제품을 원하는 사람들을 위해, Wi-Fi가 거의 모든 것에 탑재되고 있는 회사들로부터도 Wi-Fi가 없는 고평가의 합리적인 가격의 세탁기를 구입할 수 있음.
     * 예를 들어, 한 사용자는 최근에 LG WM3400CW 세탁기를 $650에 구입함. Consumer Reports에서 프론트 로더 평가 목록에서 3위에 해당하는 점수를 받음. LG 3900과 4000이 1위를 차지하고, 3400, 8900, 3600이 3위를 차지함.
     * 거의 모든 LG 제품에는 Wi-Fi가 탑재되어 있지만, 3400 모델에는 없음. Consumer Reports는 3400 모델에 Wi-Fi가 있다고 언급하지만, LG의 ""Smart Diagnosis"" 기능 때문에 혼동한 것으로 보임. Wi-Fi가 있는 모델에서는 Smart Diagnosis가 Wi-Fi를 사용함.
     * Wi-Fi가 없는 모델에서는 소리를 사용함. 세탁기가 소리를 내고, 모바일 앱이 이를 듣고 진단 데이터를 추출함.
     * LG 세탁기가 오늘의 골칫거리인 이유는 전력 공급 중단으로 인해 세탁기 안에 물에 젖은 옷이 들어 있고 뚜껑이 잠겨 있기 때문임. 지금까지 망치를 사용하지 않고 세탁기를 여는 방법을 찾지 못함.
"
"https://news.hada.io/topic?id=12880","Tensor 기반의 Google의 Pixel 기기들에 대해 Linux 6.1 커널 업데이트 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Tensor 기반의 Google의 Pixel 기기들에 대해 Linux 6.1 커널 업데이트 예정

     * Linux LTS(Long Term Support)버젼의 지원기간이 6년에서 2년으로 줄어듬.
          + 2023년 가을에 있었던 Open Source Summit Europe 에서 LTS 버젼지원 단축에 대한 발표 요약
     * 휴대폰에 포함되는 리눅스 커널의 경우, 처음 버젼이 셋업되면, 소비자에게 전달되는데 1-2년의 시간이 소요됨.
          + 칩셋업체에서 개발하는데 1년
          + 휴대폰 제조사에서 개발하는데 1년
          + 그 이후에는 커널의 보안패치(x.y.z+n)만 적용해서 제조사가 OTA 를 통해 업데이트 됨.
     * 기존의 Linux LTS버젼을 사용할 경우, 소비자에게 전달되어도 최소 4년동안의 리눅스 보안패치가 전달이 가능했지만, 이제는 보안패치를 전달하려면 리눅스 커널의 기능업데이트(x.y+n)를 포함시켜야 함.
     * Pixel 기기의 경우 5년동안 보안업데이트가 제공예정인데, 이제는 커널 버젼을 교체해야 가능함.
          + 현재 Pixel 기기에서 지원중인 리눅스 커널버젼 정보
     * 몇해전부터, Android에 GKI(General Kernel Image)라는 프로젝트를 진행하고 있었으며, 리눅스 커널을 제조사에서 제공하는 대신, Google 이 제공하고, 보안업데이트의 간격을 줄이려는 노력을 진행했음.
          + 리눅스 커널은 API를 자주 깨먹기로 유명
          + 왜 API가 자주 깨지는지에 대한 문서(한글판)
          + GKI는 드라이버들이 사용하는 API(Kernel Module Interface)를 커널 버젼이 바뀌더라도 유지하도록해서, 구글이 제공하는 새로운 커널 바이너리에서 제조사들이 장치 드라이버를 쉽게 포팅할 수 있도록 도와줌.
     * Pixel 기기들의 정확한 업데이트 시기는 현재 알 수 없으나, Android 15 출시 이후가 될 것 같음.

   좋은 정보 공유 고맙습니다.

   참고로 한번 설치해서 뽕을 뽑는 가전용이나 산업용 리눅스 커널은 CIP 프로그램기반의 커널 버젼이 사용될 것 같습니다.
     * LTS : 1년마다 출시, 2년동안 보안업데이트 지원
     * CIP : 2년마다 출시, 10년동안 보안업데이트 지원
"
"https://news.hada.io/topic?id=12759","도커 이미지와 레이어 내용 탐색 도구 'Dive'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      도커 이미지와 레이어 내용 탐색 도구 'Dive'

Docker 이미지 탐색 도구 dive

     * Docker 이미지 분석: dive 명령어와 이미지 태그/ID/다이제스트를 사용하여 Docker 이미지 분석 가능.
     * Docker 명령어 직접 사용: alias를 설정하여 dive를 Docker 명령어로 직접 사용 가능.
     * Macbook에서의 빌드: Docker 컨테이너 엔진만 지원하는 Macbook에서 dive를 사용하여 이미지 빌드 및 분석 가능.
     * CI 파이프라인 통합: CI=true 환경 변수 설정으로 UI 없이 이미지 분석 및 공간 낭비 최소화 가능.

기본 기능

     * 레이어별 Docker 이미지 내용 표시: 선택한 레이어의 내용과 이전 레이어의 결합된 내용을 오른쪽에서 확인 가능.
     * 각 레이어에서 변경된 내용 표시: 파일 트리에서 변경, 수정, 추가 또는 삭제된 파일 표시.
     * ""이미지 효율성"" 추정: 이미지에 포함된 낭비된 공간의 양을 추정하여 효율성 점수와 낭비된 파일 공간 제공.
     * 빠른 빌드/분석 주기: dive build -t some-tag . 명령어로 Docker 이미지 빌드 후 즉시 분석 가능.
     * 다양한 이미지 소스 및 컨테이너 엔진 지원: --source 옵션으로 컨테이너 이미지를 가져올 위치 선택 가능.

설치 방법

     * Ubuntu/Debian: curl과 apt를 사용하여 dive 설치.
     * RHEL/Centos: curl과 rpm을 사용하여 dive 설치.
     * Arch Linux: pacman을 통해 설치 가능.
     * Mac: Homebrew 또는 MacPorts를 사용하거나, 릴리스 페이지에서 Darwin 빌드 다운로드.
     * Windows: 최신 릴리스 다운로드.
     * Go tools: Go 버전 1.10 이상 필요, go get으로 설치.
     * Nix/NixOS: nix-env을 사용하여 설치.
     * Docker: docker pull로 이미지를 가져오고, 도커 소켓 파일 포함하여 실행.

CI 통합

     * 환경 변수 CI=true 설정: UI 없이 Docker 이미지 분석 및 통과/실패 여부를 반환 코드로 표시.
     * .dive-ci 파일을 통한 규칙 설정: 효율성, 낭비된 공간의 양 및 비율에 따른 통과/실패 기준 설정 가능.

키 바인딩

     * 다양한 키 바인딩을 통해 UI 내에서 레이어 및 파일 트리 뷰 조작 가능.

UI 설정

     * 설정 파일을 통해 다양한 옵션을 사용자 정의하여 dive의 동작을 변경 가능.

   GN⁺의 의견
     * 중요성: dive는 Docker 이미지의 크기를 최적화하고 낭비를 줄이는 데 매우 유용한 도구임. 이는 클라우드 인프라 비용 절감과 효율적인 리소스 관리에 기여할 수 있음.
     * 흥미로움: Docker 이미지의 각 레이어를 세밀하게 분석하고 변경 사항을 시각적으로 확인할 수 있다는 점은 개발자와 시스템 관리자에게 매우 흥미로운 기능임.
     * 도움됨: CI/CD 파이프라인에 dive를 통합함으로써, 자동화된 이미지 분석을 통해 지속적인 품질 관리와 효율성 향상을 도모할 수 있음.

        Hacker News 의견

     * Crane과 go-containerregistry 라이브러리
          + 이미지 및 레이어 조작에 있어 Crane이 훌륭하며, 이는 go-containerregistry 라이브러리를 기반으로 함.
          + 새로운 레이어 추가, 기존 이미지의 메타데이터(환경 변수, 라벨, 엔트리포인트 등) 수정이 가능.
          + 다중 레이어를 단일 레이어로 ""평탄화""하거나, 이미지 ""리베이스""(변경 사항을 새로운/업데이트된 베이스 이미지에 재적용)가 가능.
          + 모든 작업은 레지스트리에서 직접 이루어지므로 도커가 필요 없음(원본 이미지 생성 시에는 여전히 유용).
          + Crane 사용법 링크
     * Dive의 유용성
          + Dive는 도커 이미지 작동 방식과 효율적인 도커파일 작성법 이해에 매우 유용.
          + 문서를 읽는 것과 달리, 도커파일 변경 후 결과적인 레이어 구조에 미치는 영향을 보는 것이 이해에 큰 도움.
          + Dive는 학습과 정확히 무엇을 구축/배포하는지에 대한 자신감을 개발하는 데 필수적인 도구.
          + 레이어 차이를 비교하는 데 사용하는 Dredge라는 다른 도구도 있음.
          + Dredge 사용법 링크
     * Dive의 숨겨진 특징
          + Dive는 매우 유용할 뿐만 아니라, 그 저자가 훌륭한 개발자이며 함께 일하기 매우 즐거움.
     * GoLang 사용 이유에 대한 질문
          + 대부분의 컨테이너/인프라 도구가 GoLang으로 작성된 이유에 대한 궁금증.
          + Docker, Podman, nerdctl, Terraform, Kubernetes 등의 예시.
          + GoLang이 이러한 도구를 구축하는 데 명백한 이점을 제공하는지에 대한 질문.
     * Dive의 실용성
          + Dive를 매달 여러 번 사용하며, 특정 파일이 레이어에 존재하는지 확인하고 파일 내용을 살펴보고 싶을 때 유용함.
          + 현재는 컨테이너를 실행하거나 파일 내용을 추출하여 폴더를 탐색하는 방식으로 해결.
     * Google의 container-diff 도구
          + container-diff는 시스템에 무엇을 할지 보여주는 무작위 스크립트를 bash로 파이프하는 것을 확인하는 데 유용함.
     * 다른 훌륭한 TUI 터미널 도구들
          + Dive 외에도 lazydocker, dry와 같은 훌륭한 TUI 터미널 도구들이 있음.
          + 도커 범주 내의 도구들도 있음.
          + 터미널 도구 링크
     * 도커가 tar 아카이브를 사용하는 이유
          + 도커가 레이어 내용을 위해 일반 디렉토리 대신 tar 아카이브를 사용하는 이유에 대한 의문.
          + 해당 도구는 원래 존재하지 않아야 할 문제를 해결함.
     * Dive의 놀라운 효과
          + Dive는 여러 번 큰 도움이 되었으며 레이어에 대해 많은 것을 배울 수 있게 함.
          + Docker Desktop이 그 기능을 모방할 정도로 우수함.
"
"https://news.hada.io/topic?id=12808","Show GN: 인블로그: SEO 최적화 기업용 블로깅 솔루션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: 인블로그: SEO 최적화 기업용 블로깅 솔루션

   인블로그는 SEO 최적화 기업용 블로깅 솔루션을 제공합니다.

   기업들은 인블로그를 통해 SEO 걱정 없이 콘텐츠 작성하여, 잠재 고객을 유입시키고 관리합니다.
   SEO 관련 모든 일들은 인블로그가 담당합니다.

   인블로그 를 통해:
    1. 1분만에 우리 도메인과 연결된 기업용 블로그를 생성합니다.
    2. SEO 고민/걱정 없이 블로그 콘텐츠를 작성합니다.
    3. 블로그 콘텐츠를 통해 유입된 잠재 고객을 분석/관리합니다.
    4. 뉴스레터를 통해 잠재 고객과 지속적으로 소통합니다.

   앞으로의 인블로그 는:
     * 콘텐츠 작성 AI Assistant (우리 회사에 맞는 키워드 분석, 자동 콘텐츠 작성 등)
     * 잠재 고객을 CRM으로 관리할 수 있도록 하는 Pre-CRM 역할

   현재 팀스파르타, 루트릭스, 피클플러스, 디오, 스펙터 등 다양한 고객사들이 인블로그 솔루션을 사용하고 계십니다.
"
"https://news.hada.io/topic?id=12816","인터넷, AI로 가득 찬 쓰레기 정보","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          인터넷, AI로 가득 찬 쓰레기 정보

인터넷은 이제 기계들끼리 대화하는 공간

     * 인터넷은 사람들이 서로 질문하고 답변하는 단순한 사용법에서, 이제는 AI가 만들어낸 잘못된 정보로 가득 찬 공간으로 변화함.
     * 구글 사용자들은 구글이 달걀이 녹을 수 있다고 잘못 알려주는 것을 발견함. 이는 구글이 웹사이트를 직접 보여주는 대신 페이지의 스냅샷을 드롭다운 메뉴로 제공하여, 사용자가 클릭하지 않고도 검색 결과를 읽을 수 있게 한 결과임.
     * 최근에는 구글 검색의 무용성이 증가하고 있으며, 예를 들어 만성 부비동염 검색 결과가 염증이 있는 음경에 대한 결과를 반환하는 사례가 있음.

인터넷 트래픽 ""강탈""과 스포츠 일러스트레이티드의 AI 기사 논란

     * 어제, 한 트위터 사용자가 인터넷 트래픽 ""강탈""을 주장함. 그는 경쟁 웹사이트의 사이트 인덱스를 보고 기사 URL을 추출한 뒤, AI를 사용하여 빠르게 기사를 작성함.
     * 또한, 스포츠 일러스트레이티드가 AI로 작성된 기사를 게재하고, 실제로는 존재하지 않는 사람들의 이름으로 기사를 발행한 것으로 드러남. 이에 대한 문의가 있은 후 해당 콘텐츠는 삭제됨.

인터넷의 근본적인 파괴

     * 인터넷은 더 이상 사람들 간의 소통의 장이 아니라, 기계들이 서로 대화하는 공간으로 변질됨.
     * ""구글에게 물어봐""라는 말은 이제 무의미해짐. 잘못된 정보나 완전한 허구를 반환할 가능성이 높아짐.
     * 스포츠 일러스트레이티드와 같은 기업들은 독자들에게 서비스를 제공하기보다는 구글 검색 결과와 광고 수익을 높이는 데 더 관심을 가짐.

GN⁺의 의견

     * 인터넷 상의 정보의 질이 점점 떨어지고 있으며, 이는 사용자들에게 혼란과 불편을 초래함.
     * AI 기술의 발전이 가져온 부작용 중 하나로, AI가 생성한 잘못된 정보로 인해 신뢰할 수 있는 정보를 찾기 어려워짐.
     * 이러한 변화는 사용자들이 인터넷에서 정보를 얻는 방식에 대해 다시 생각하게 만들며, 정보의 질을 보장하기 위한 새로운 접근법이 필요함을 시사함.

        Hacker News 의견

     * 대규모 언어 모델(Large Language Models, LLMs)의 확산으로 인해 나타난 문제점 중 하나는, 이전에는 철자나 문법 오류를 통해 가치 없는 게시물을 신속하게 걸러내는 유용한 휴리스틱이 있었으나, 이제 AI가 생성한 콘텐츠는 언어 구사 능력이 완벽하여 더 이상 그 방법이 통하지 않는다는 것임. 예를 들어, curl 프로젝트에서 AI가 생성한 가짜 버그 리포트로 인한 문제가 있었음. 이러한 문제는 앞으로 더욱 심각해질 것으로 예상됨.
     * 인터넷의 변화에 대해 동의하면서도, GPT-4, 3, 2 이전과 인터넷이 크게 다르지 않다고 생각하는 의견도 있음. 인턴이나 인도의 가상 조수가 작성한 일반적인 주제의 기사들은 대부분 AI가 생성한 콘텐츠만큼 나쁘며 구별하기 어려움. 검색 엔진이 웹페이지의 텍스트와 쿼리의 일치 여부보다 명성을 기준으로 정렬하는 현상도 문제임. 사람들은 이제 웹보다 앱에서 생활하며, 웹의 질이 오랫동안 나빠져 왔지만 곧 중요하지 않게 될 것임. 인터넷이 앞으로 존재한다면, 새로운 익명화된 계층으로 이동하고, 저품질 콘텐츠 생성을 줄이기 위해 화폐 교환을 자주 요구하는 방향으로 발전하기를 바람.
     * 클리어넷의 현재 상황이 심각한 가운데, Discord 내부에 정보가 격리되어 있는 것이 나쁘지 않게 보이는 의견도 있음. 검색 엔진에 의해 색인되지 않음으로써 AI 쓰레기와 함께 나타나거나 훈련 데이터로 사용되는 것을 피할 수 있음. 인터넷의 미래는 사람에게 달려 있으며, 기계는 더 이상 기본적인 작업조차 신뢰할 수 없게 됨.
     * BeamMP 프로젝트에서 AI가 생성한 가짜 버그 리포트와 PRs(풀 리퀘스트)의 경험을 공유함. 이러한 AI 생성물은 쉽게 식별할 수 있으며, 관련 코드를 변경하거나, 컴파일되지 않는 해결책을 제시하는 등의 특징이 있음. 진짜 사람들은 게으르기 때문에 불필요한 작업을 하지 않고, AI가 생성한 쓰레기는 시간 낭비이므로 병합하지 않음.
     * 인터넷에서 진정성을 유지하는 것이 중요함. 서명된 콘텐츠만이 진정성을 보장할 수 있음. AI가 더 많은 것을 게시할 수 있는 상황에서, 누가 무엇을 게시했는지, 그들이 무엇을 말하고 있는지 알 수 있는 신뢰와 진정성에 의존하는 것이 필터링의 유일한 방법임. 신뢰의 웹(Web of Trust)은 시도되었지만 주류로 나오지 못했으며, 다시 시도할 때가 됐을 수 있음.
     * LLM이 가속화시킨 오래된 문제에 대한 의견도 있음. Google이 광고 수익과 광고 기술의 지배력을 늘리기 위해 노력함에 따라, 검색 결과에서 SEO가 만연하게 되었고, 이로 인해 객관적인 정보를 얻기 어려워짐. Reddit에서 정보를 먼저 검색하는 것이 해결책이 될 수 있지만, Reddit 역시 최근 몇 년 동안 조작된 콘텐츠로 가득 차 있음.
     * 인터넷이 이미 SEO로 인해 인간이 생성한 쓰레기로 가득 차 있었기 때문에, ""AI""의 등장으로 실제로 많은 것을 잃은 것은 아니라는 의견도 있음. 이러한 문제를 업계에서 오랫동안 지적해 온 사람들도 있음.
     * 광고는 결국 돈을 벌기 위한 것이며, 봇이 신용카드를 가지고 있지 않는 한, 인간으로부터의 돈을 의미함. Google과 같은 회사들은 트래픽이 증가하더라도 그것이 인간의 지출로 전환되지 않는다면, 그 영향을 재정적으로 느낄 것임. 최근에 발생하는 기술 분야의 대규모 해고는 이러한 문제에 대한 대응이 시작되고 있음을 시사할 수 있음.
     * ""Anathem""이라는 책을 읽었다면, 우리의 임무는 Reticulum에서 쓰레기를 걸러내는 것이라는 의견도 있음.
"
"https://news.hada.io/topic?id=12769","유나이티드, 737 Max 9 검사 중 플러그 도어의 풀린 볼트 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 유나이티드, 737 Max 9 검사 중 플러그 도어의 풀린 볼트 발견

유나이티드 항공, 737 Max 9 검사 중 문제 발견

     * 유나이티드 항공이 보잉 제트기의 전체 검사를 진행하는 과정에서 737 Max 9 플러그 도어의 느슨한 볼트와 기타 부품을 발견함.
     * 알래스카 항공의 동일 기종에서 금요일 급격한 기내 압력 감소 사건이 발생한 후 이루어진 검사에서 최소 다섯 대의 항공기에서 문제가 발견됨.
     * 보잉 대표는 즉각적인 답변을 하지 않았고, 연방항공청(FAA) 대변인은 유나이티드의 발견에 대해 언급을 거부하고 이전의 성명을 지적함.

문제의 일관성 부족

     * 다섯 대의 항공기에서 발견된 문제 부품의 위치에는 일관성이 거의 없음.
     * 한 예로, 유나이티드는 플러그 도어의 하단 힌지를 고정하는 볼트가 완전히 자리잡지 않았고, 볼트에 있는 와셔가 회전할 수 있다는 것을 발견함.

항공기 인도 시기 및 유나이티드 항공의 대응

     * 문제가 발견된 다섯 대의 항공기는 2022년 11월부터 2023년 9월 사이에 유나이티드에 인도됨.
     * 이 항공기들은 아마도 4,000~6,000시간 또는 2~3년마다 이루어지는 중정비 C 체크를 거치지 않았을 것임.
     * 유나이티드는 737 Max 9을 운항하는 미국 내 다른 항공사로서, 79대를 보유한 최대 운영자임.

보잉과 FAA의 조치

     * 보잉은 월요일에 737 Max 9 운영자들에게 FAA가 1월 6일에 발행한 긴급 항공 안전 지시에 따라 특정 검사 기준을 제공하는 다중 운영자 메시지(MOM)를 공식적으로 배포함.
     * 알래스카 항공은 검사가 시작되기 전에 FAA가 운영자의 검사 과정을 승인해야 하며, 항공사는 유지 보수 기술자들이 따를 자세한 검사 지침과 과정을 개발해야 한다고 월요일 아침 발표함.
     * 알래스카 항공은 737 Max 9의 운항 중단으로 인해 월요일에 약 140편의 항공편을 취소함.

사고 조사 상황

     * NTSB 조사관들은 일요일 늦게 16,000피트에서 격렬하게 분리된 알래스카 항공편의 플러그를 회수했다고 발표함.
     * 아무도 다치지 않은 사고에서, 이사회는 도어와 관련된 구체적인 발견을 발표하지 않았으며, 사고가 플러그 설치의 차이로 인해 발생했는지 여부를 밝히지 않음.

GN⁺의 의견

     * 이 기사는 항공 안전에 대한 중요한 문제를 다루고 있으며, 유나이티드 항공이 발견한 737 Max 9의 문제는 항공기의 안전성과 관련하여 중대한 관심사임.
     * 보잉과 FAA의 대응은 항공 안전 규정 준수와 긴급 상황에 대한 적절한 조치를 보여주는 사례로, 항공 산업의 안전 기준을 유지하기 위한 노력의 일환임.
     * 이 사건은 항공기 제조 및 유지 보수 과정에서의 품질 관리의 중요성을 강조하며, 항공 여행자와 업계 전문가 모두에게 흥미로운 주제임.

   보잉 요즘에 나쁜 소식만 들리는 느낌이네요.

        Hacker News 의견

     * 보잉이 1월 5일 사건 이전에 최소 8일 전에 737 MAX의 러더 부분에 있는 가능한 풀린 볼트를 점검하라고 항공사들에게 선제적으로 알렸다는 점이 흥미로움.

     보잉이 다른 문제(플러그 도어 볼트)를 알지 못했음에도 불구하고 이러한 조치를 취했다는 것은 주목할 만함.
     * 볼트와 기계 나사는 매우 흥미로운 주제임.

     아마추어 자전거 정비사로서 볼트를 조립하기 전에 제대로 윤활하지 않는 실수를 오랫동안 했음. 윤활유 없이는 볼트가 제대로 긴장되기 전에 고정력이 높아져서 조립 시 의도한 대로 부품을 고정하지 못함. 윤활유는 볼트가 올바른 긴장 상태에서 올바른 토크에 도달하게 함.
     * 플러그가 어떻게 설치되어야 하는지 보여주는 비디오 링크 제공.

     유지보수 시 플러그를 열 때 풀릴 수 있는 볼트 중 일부에는 회전을 방지하는 핀이 있음. 그러나 동일한 사진에서 도어의 전체 힌지를 고정하는 다른 중요한 볼트들이 풀려 있고, 이 볼트들에는 핀이 없어야 함. 플러그의 유지보수는 바보 방지 설계가 되어 있는 반면, 초기 설치는 그렇지 않은 것인지 궁금함.
     * 알래스카 Max 9 사건에 대한 최신 업데이트 중 가장 좋은 것임.

     발표자는 777 조종사이자 A&P 정비사임.
     * 최소한 5대의 항공기에서 느슨한 볼트가 발견됨.

     느슨한 볼트가 사소한 문제인지, 아니면 보이는 것처럼 심각한 문제인지 의문.
     * 빠른 승인을 기대하고 있던 Max 10에 대한 의문 제기.
     * 도어 플러그가 왜 플러그 도어가 아닌지, 즉 내부에서 설치되고 차압에 의해 밀봉되는 디자인이 아닌지 궁금함.

     이 부품은 화물 도어와 더 비슷해 보이며, 화물 도어는 공간 때문에 바깥쪽으로 열려야 하지만 이 경우에는 어떤 설계 제약이 있는지 의문.
     * 볼트와 도어가 어떻게 조립되어야 하는지 설명하는 좋은 비디오 링크 제공.
     * 사건의 원인은 두 가지 가능성이 있음.

     볼트가 부적절한 재료로 만들어져서 부러졌거나, 볼트가 제대로 조립되지 않아 풀렸음. 후자가 발생한 것으로 보임. 보잉에서 도어를 조립할 때 올바른 종류의 와셔를 사용하지 않았거나, 볼트에 올바른 토크를 적용하지 않았을 가능성이 있음. 이러한 단순한 오류가 항공기 조립 중에 발생한다는 것이 매우 놀라움.
     * 2017년 첫 737-MAX 추락 이후 선택할 때마다 보잉 대신 에어버스를 선택하고, 심지어 추가 비용을 지불할 정도로 이 소식은 안심이 됨.
"
"https://news.hada.io/topic?id=12800","회사를 떠날 때임을 알리는 징후들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           회사를 떠날 때임을 알리는 징후들

     * AWS에 오래 있다가 퇴사한 Adrian Cockcroft 가 ""현재 아마존 경영진은 제품보다 부동산에 관심이 많다""며 적은 글
     * 공개후 아마존 내부자들로 부터 ""말하면 안되는 것들""을 말해줘서 고맙다는 메시지를 받았다고

회사를 떠날 때가 되었다는 신호들

     * 회사 성장이 멈추고, 창업자가 떠나며, 인사부가 주도권을 쥐고, 경영진이 제품보다 부동산에 더 관심을 가질 때 회사를 떠나 새로운 곳을 찾아야 함.
     * AWS에 합류했을 때는 빠르게 성장하고 있었고, 채용에 유연성이 있었으며, 아마존은 사무실 공간에 대해 인색했음.
     * 성장이 둔화되면서 회사의 관리 방식과 문화에 근본적인 변화가 필요함.
     * 성장이 정체되거나 축소될 때, 회사는 경직되고, 관리자들은 자신의 제품을 보호하기 위해 정치적 행동을 하며, 혁신은 사라지고, 마이크로 매니지먼트가 등장함.

깊은 가지치기와 성장 전략

     * 깊은 가지치기와 성장 전략이 필요한데, 이는 전체 제품 라인을 중단하고 관리 계층을 줄여 회사가 다시 성장할 수 있게 하는 것을 의미함.
     * 이러한 전략을 실행하는 회사에서는 경험이 많은 직원을 유지하고, 신입 직원을 해고하며, 가능한 관리자를 개별 기여자로 전환해야 함.
     * 경험이 많은 직원은 스트레스 상황에서 더 나은 판단을 내리고, 더 잘 소통함.
     * 마이크로 매니지먼트와 과정 부담을 늘리는 경향이 있으나, 이를 저항하고 절차를 단순화해 관리 부담을 줄이고 가치 창출 시간을 단축해야 함.

창업자 이후의 혁신 문화 유지 문제

     * 창업자가 떠난 후 혁신 문화를 유지하는 데 문제가 종종 발생함.
     * 아마존에서 Jeff Bezos가 물러나고 Andy Jassy와 Adam Selipsky가 이어받으면서 문제가 발생했음.
     * HR 프로세스가 너무 많은 시간을 차지하고, 정치와 마이크로 매니지먼트가 우세해짐.

부동산 프로젝트에 대한 경영진의 관심

     * 대규모 부동산 건설 프로젝트가 경영진의 관심을 지나치게 끌 때 문제가 됨.
     * 아마존의 본사 건설 계획과 시애틀의 사무실 타워 건설이 코로나19와 재택근무 확대와 충돌함.
     * 재택근무를 수용하고 부동산 투자를 한 번에 감가상각하는 것이 올바른 방향이었으나, 아마존 경영진은 제품보다 부동산에 더 관심을 가짐.

[업데이트] 아마존 내부의 반응

     * 아마존 내부에서는 ""동의하고 헌신하라""는 원칙이 RTO(Return To Office) 정책을 강요하는 데 사용되고 있음.
     * RTO에 대해 동의하지 않는 것은 경력에 해가 되므로, ""동의하지 않고 그만두기""가 일어나고 있음.
     * 사람들은 다음 RSU 지급을 기다리며 면접을 보고 있음.

요약

     * 아마존의 상황은 2002년의 Sun Microsystems만큼 나쁘지 않으나, 재택근무를 되돌리고 RTO를 강제하는 것이 혁신을 죽이는 큰 문제가 될 것임.
     * AWS에 많은 사람들을 채용했으나, 이제는 아마존에서 일하는 것을 추천하지 않음.
     * NVIDIA와 같이 빠르게 성장하고 합리적인 근무지 정책을 가진 회사에서 일하는 것을 추천함.

  GN⁺의 의견

     * 회사의 성장 정체는 종종 혁신과 직원들의 사기 저하로 이어짐. 이는 회사를 떠나야 할 중요한 신호일 수 있음.
     * 경영진이 부동산과 같은 비핵심 요소에 집중하는 것은 회사의 핵심 가치와 고객 중심 문화에서 벗어나는 것을 의미함.
     * 아마존 내부의 상황은 회사 문화와 정책이 직원들의 복지와 혁신에 얼마나 중요한지를 보여주는 사례로, 이는 다른 회사들에게도 중요한 교훈이 될 수 있음.

   이걸 한국 기업에 적용하면 갈 곳이 없네요 ㅎㅎ

        Hacker News 의견

     * 팬데믹 이후 소프트웨어 업계의 변화에 대한 불만
          + 하이브리드 근무 방식이 원활하지 않음을 체감
          + 원격 근무나 현장 근무는 효율적이지만, 하이브리드는 의사소통의 모호성 존재
          + 관리자들이 원격 근무 상태를 이용해 업무를 회피하는 경우 목격
          + 전 세계 다양한 사무실에서 온보딩 없이 팀에 합류하고 떠나는 사람들이 많음
     * 회사를 떠날 시기를 알려주는 개인적 신호
          + 제품 개발 일정이 영업 일정에 의해 좌우됨
          + 리더십이 실용적인 운영 문제에 대해 강제될 때만 고려
          + 사무실 근무에 대한 '문화'의 중요성이 강조됨
          + 리더십이 목표 설정에는 열성적이지만 인센티브 제공에는 소극적임
     * 회사를 떠나야 할 때를 나타내는 징후들
          + 고용주가 떠나고 잔류 인센티브가 없음
          + CEO가 바뀌고 컨설턴트를 고용함
          + 임금 인플레이션에 맞춘 임금 인상이 없음
          + 승진을 기대하지만 2-3년간 승진하지 못함
          + 상사가 본인과의 중간에 누군가를 고용함
          + 상사가 인간관계 기술이 부족하고 복종만을 원함
     * 중앙 사무실에 대한 집착에 대한 이해 부족
          + 2024년에는 원격 근무와 소규모 사무실을 활용한 유연한 근무 방식이 가능함
          + 클라우드 인프라가 유연해진 만큼 근무 상황도 유연해야 함
     * 회사 성장이 멈추면 발생하는 문제들
          + 성장이 멈추면 문제 해결을 통한 지위 획득 기회 감소
          + 성장 기회가 없는 회사에 남는 사람들은 대체로 다른 곳에서 더 나은 기회를 찾지 못함
          + 중간 관리자가 제국을 건설하려는 이유는 성장 기회가 없기 때문임
     * 주식 보상(RSU)이 고갈되고 새로운 보상이 제공되지 않을 때
          + RSU 보상이 충분하지 않으면 회사를 떠나는 것이 이득임
          + 회사를 떠났다가 다시 합류하여 새로운 보상을 받는 것도 가능함
     * 회사를 그만두는 이상한 경험담
          + 마이크로소프트에서의 부정적인 경험과 '69'라는 숫자와 관련된 꿈
          + 익스피디아에서의 불편한 경험 후 같은 숫자의 꿈을 꾸고 회사를 그만둠
     * 시계를 자주 보게 되는 것이 회사를 떠날 신호임
     * 리더십이 미시 관리와 프로세스 부담을 늘릴 때
          + '애자일 코치'를 초빙하여 스크럼을 도입하는 것이 회사를 떠날 신호임
"
"https://news.hada.io/topic?id=12866","Apple Vision Pro 코딩 시 개발자가 알아야 할 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Apple Vision Pro 코딩 시 개발자가 알아야 할 것들

     * VisionOS 개발에 사용되는 도구와 라이브러리는 많은 Apple 개발자들에게 이미 익숙함
     * VisionOS는 iOS 및 iPad OS 개발의 확장으로, SwiftUI와 UIKit을 사용해 사용자 인터페이스를 구축하며, RealityKit은 3D 콘텐츠와 애니메이션을 표시하는 데 사용됨
     * 모든 앱은 3D 공간에서 존재해야 하며, 기존의 2D 앱도 공간에서 ""떠다니는"" 형태로 표시됨
     * VisionOS는 Xcode 개발자들에게 아이폰/아이패드/맥 외의 새로운 데스티네이션을 제공하며, 앱을 재빌드하면 VisionOS의 기능이 추가됨
     * 기존의 UIKit 앱도 VisionOS용으로 재컴파일 가능하며, VisionOS의 하이라이트 및 3D 프레즌스 기능을 얻을 수 있음
     * 전통적인 UI 요소는 새로운 Z-offset 옵션을 통해 3D 공간으로 푸시될 수 있음
     * VisionOS는 눈 추적을 사용하여 Dynamic Foveabtion(이미지의 특정 영역이 다른 영역보다 더 세밀하게 표현되는 이미지 처리 기법)을 가능하게 함
     * 객체 조명은 현재 공간 조건을 따름(사용자가 헤드셋을 착용하고 있는 공간의 조명 및 그림자 특성을 얻게됨)
     * ARKit은 실제 방의 모델을 앱에 제공하며, 평면 추정, 장면 재구성, 이미지 앵커링 기능을 포함함
     * VisionOS의 ARKit은 골격 손 추적 및 접근성 기능을 추가함. 사용자는 손의 움직임뿐만 아니라 눈의 움직임, 음성, 머리의 움직임과도 상호작용가능
     * Unity는 RealityKit 위에 레이어로 추가되어 Unity 개발자들이 VisionOS를 직접 타겟팅할 수 있음
     * Reality Composer Pro는 3D 콘텐츠를 미리보고 준비하기 위한 새로운 개발 도구
     * Shared-Space(공유 공간) 처리는 기기 내에서 이루어지며, 3D 매핑에는 클라우드 프로세싱이 사용되지 않음
     * 장치가 없는 경우, Xcode는 미리보기 및 시뮬레이터를 제공함
     * Vision Pro를 소유한 경우, 가상 공간에서 전체 코딩이 가능함. Mac 데스크톱을 가상 공간으로 확장하므로 Xcode 개발 환경을 Vision Pro 앱과 나란히 사용할 수 있음
     * Vision Pro 전용 앱 스토어가 있으며, 앱과 인앱 구매가 가능
     * Apple은 코딩 지원 자원을 제공하며, 개발자들은 런던, 뮌헨, 상하이, 싱가포르, 도쿄, 쿠퍼티노에 설치한 Apple Vision Pro 개발자 랩을 이용할 수 있음
     * 개발자들은 Vision Pro 앱 스토어에 앱을 제출할 수 있으며, 앱을 증강 현실(AR), 가상 현실(VR), 확장 현실(XR) 또는 혼합 현실(MR)로 설명하는 것 대신 ""Spatial Computing(공간 컴퓨팅)"" 앱으로 설명해야 함.

   꼭 한 번 써보고 싶긴 한데, 가격도 가격이고 약간 기대 이하일 수도 있겠다는 생각이 들긴 하네요.
   한국 정발은 언제 하려나...

   그리고 용어에 참 진심인 것 같아요.

   AR/VR/XR/MR처럼 회사마다 우린 이거야! 라고 부르는 용어가 점점 늘어나더니,
   이젠 뭐 공간 컴퓨팅이랑 단어를 또 만들어냈네요. @_@

   공간컴퓨팅이란 제목으로 책이 있을 정도로 이 단어는 전환기 시대적 흐름을 표현하는데 빠질 수 없는 핵심 단어에요 ㅎㅎ공간컴퓨팅은 AR/VR/XR/MR 의 다른 표현도 아니고 동의어도 아니에요 멀리 내다보았기에 앱 제출시 저 단어로 설명해야한다는 조항을 달아놓을 수 있었던 것 같아요

   계속 공간 컴퓨팅, 공간 컴퓨팅으로 쓰라고 하는거 보니까, 아직 특별한거를 뭘 못 찾은거 같기도 하네요. 있었다면, 굳이 저렇게 말하라고 안해도 써본 유저들이 그렇게 말했을텐데. 아이폰이나 맥북 같은 다른 제품들처럼.

   공간컴퓨팅은 그저 지어낸 이름 중 하나, 혹은 xr의 다른 이름 정도가 아니구요..
   앞으로 올 시대를 표현하는 언어라고 봐도 될 정도로 큰 의미를 지니고 있어요 ;;
   저 제목으로 책도 있어요!

     Apple은 코딩 지원 자원을 제공하며, 개발자들은 런던, 뮌헨, 상하이, 싱가포르, 도쿄, 쿠퍼티노에 설치한 Apple Vision Pro 개발자 랩을 이용할 수 있음

   이 언급만 봐도 비전프로의 한국 출시는 꽤 시간이 걸릴 것 같군요.
"
"https://news.hada.io/topic?id=12812","SEC로부터 공식 승인을 받은 'Spot Bitcoin ETF'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  SEC로부터 공식 승인을 받은 'Spot Bitcoin ETF'

미국 증권거래위원회, 현물 비트코인 ETF 공식 승인

     * 미국 증권거래위원회(SEC)가 현물 비트코인 ETF에 대한 공식 승인을 내렸음.
     * 이번 승인으로 미국에서 투자자들이 비트코인을 직접 구매하거나 자체 보관할 필요 없이 비트코인 가격에 직접 노출될 수 있는 첫 규제된 거래 상품이 출시됨.
     * 승인된 ETF는 ARK 21Shares, Invesco Galaxy, VanEck, WisdomTree, Fidelity, Valkyrie, BlackRock, Grayscale, Bitwise, Hashdex, Franklin Templeton 등 다양한 기관들이 제출한 19b-4 양식에 대한 것임.

승인 과정과 시장 반응

     * SEC의 공식 트위터 계정에서 잘못된 발표가 나온 후 하루 만에 정식 승인이 이루어짐.
     * ETF 승인 문서는 SEC 웹사이트에서 몇 분간 다운로드 가능했으나, 이후 'Error 404' 메시지가 나타났고, 다른 링크를 통해 다시 공개됨.
     * ETF 분석가 James Seyffart는 SEC가 의도치 않게 승인 문서를 공개했을 수 있으며, 곧 다시 게시할 것이라고 언급함.

승인의 역사적 의의

     * 이번 승인은 Cameron과 Tyler Winklevoss가 2013년 Winklevoss Bitcoin Trust를 출시하려 했던 이후 10년 만에 이루어짐.
     * SEC는 시장 조작과 사기에 대한 우려로 모든 현물 비트코인 ETF 요청을 지속적으로 거부해왔음.
     * 그러나 Grayscale이 2023년 8월 자사의 Grayscale Bitcoin Trust를 현물 비트코인 ETF로 전환하는 것을 거부한 SEC의 결정을 뒤집는 법원 판결을 이겨 SEC가 입장을 재검토하게 됨.

예상되는 시장 영향

     * 업계는 이제 ETF가 언제 거래를 시작할지 주목하고 있음.
     * Galaxy Research의 Alex Thorn은 현물 비트코인 ETF 유입이 첫 해에 140억 달러에 이를 것으로 추정함.
     * VanEck는 2024년 1분기에 현물 비트코인 제품에 약 24억 달러가 유입될 것으로 예상함.

수수료와 관련된 정보

     * 현물 비트코인 ETF를 출시하기 위해서는 SEC가 발행자가 제출한 S-1(또는 S-3) 및 19b-4 양식을 모두 승인해야 함.
     * BlackRock은 자산 관리(AUM)가 50억 달러에 이를 때까지 0.2%의 수수료를 부과할 예정임.
     * Bitwise는 0.24%, Ark 21Shares와 VanEck는 0.25%의 수수료를 부과할 계획임.
     * Ark 21 Shares는 첫 6개월 동안 또는 제품이 10억 달러 AUM에 도달할 때까지 모든 수수료를 면제할 예정임.
     * Grayscale은 현재 1.5%의 수수료율을 부과하는 가장 높은 수수료 비트코인 ETF 제품임.

GN⁺의 의견

     * 이번 현물 비트코인 ETF의 승인은 미국 내에서 비트코인에 대한 직접적인 투자 기회를 제공하는 중요한 이정표임.
     * SEC의 이전 거부 입장을 뒤집은 Grayscale의 법적 승리는 규제 기관의 암호화폐에 대한 태도 변화를 시사함.
     * 이번 승인으로 인해 암호화폐 시장에 새로운 자본 유입이 예상되며, 이는 암호화폐 산업의 성장과 주류 채택에 긍정적인 영향을 미칠 것으로 보임.

        Hacker News 의견

     * 비트코인의 미래에 대한 예측
          + 20년 이내에 비트코인이 완전히 제도화될 것으로 예상됨.
          + 투자자들이 보유하는 '비트코인'은 이론상의 블록체인과 완전히 분리될 것임.
          + 주식과 유사한 변화가 일어날 것으로 보이며, 과거에는 주식이 실제 종이 형태였음.
          + 주식을 직접 전달함으로써 개인 간, 심지어 익명으로 거래할 수 있었음.
          + 배당금을 주장하기 위해 종이 쿠폰을 사용했음.
          + 현재는 1977년 애플 컴퓨터 주식 증서를 가지고 증권사에 판매를 요청하면, 그 종이가 현대 시스템에서 거래 가능한 주식으로 인정받는 별도의 과정이 필요함.
          + 2050년에 비트코인도 비슷한 상황이 될 것으로 예상되며, 실제 체인 상의 비트코인을 판매하고자 할 때, 현대의 보관 시스템에 등록되지 않은 비트코인의 출처를 검증하는 데 최대 6개월이 걸릴 수 있음.
     * ETF의 안전성에 대한 우려
          + ETF가 해킹당하고 BTC를 잃는다면, 다른 ETF의 자산이 안전한지 보장할 수 없음.
          + 예를 들어, BlackRock의 BTC ETF가 문제를 일으킨 후 수십억 달러를 잃게 된다면, iShares NASDAQ 100 ETF의 주식은 안전한지 궁금함.
          + 주식 ETF를 소유함으로써 암호화폐 세계의 위험에 노출되지 않도록 하고 싶음.
          + 암호화폐 문제가 발생했을 때 영향을 받을 가능성이 있다면, 선택한 주식만 소유하고자 함.
     * 거래 수수료 해결책에 대한 반응
          + 높은 거래 수수료에 대한 해결책으로 보임.
          + 대부분의 코인을 거래소가 보유함으로써 기록해야 할 거래의 필요성을 줄여 스케일 문제를 해결할 것으로 보임.
          + 블록 보상이 지수적으로 감소함에 따라 장기적으로 채굴의 잠재력도 줄어들 것으로 예상됨.
          + 때때로 규제 솔루션이 기술적 문제를 해결할 수 있음.
     * 비트코인 ETF 관련 티커 목록
          + Bitwise (BITB), ARK Invest/21Shares (ARKB), Invesco Galaxy Bitcoin ETF (BTCO), iShares Bitcoin Trust (IBIT), VanEck Bitcoin Trust (HODL), Franklin Bitcoin ETF (EZBC), Fidelity Wise Origin Bitcoin Trust (FBTC), WisdomTree Bitcoin Trust (BTCW), Valkyrie Bitcoin Fund (BRRR), Hashdex Bitcoin Futures ETF (DEFI), Grayscale Bitcoin Trust (GBTC) 등이 있음.
     * 비트코인 ETF의 의미에 대한 의견
          + 비트코인 ETF는 '피크 비트코인'을 나타낼 수 있음.
          + 많은 사람들이 일반적인 계좌에서 고가로 거래하게 되면, 비트코인은 단순한 숫자가 되고, 암호화폐의 본질을 잃게 됨.
     * '종이 비트코인'과 재담보화에 대한 우려
          + ETF가 보유한 비트코인의 양에 대한 증거(즉, 예비금 증명)를 제공하는 문서가 있는지 궁금함.
     * 비트코인의 본질 변화에 대한 의견
          + 비트코인이 단순히 SQL 데이터베이스의 숫자가 되었는지, 이제는 공기 중에서 비트코인을 만들 수 있는지 의문을 제기함.
          + 헤지펀드가 실제 비트코인 네트워크에 존재하는 비트코인의 양보다 많은 비트코인을 거래하기 시작할 때까지 얼마나 걸릴지 의문임.
     * 비트코인 ETF 해킹 시나리오에 대한 질문
          + 비트코인 ETF가 해킹당하고 지갑이 비워진다면, 금 ETF의 실물 금이 도난당하는 것과 어떤 차이가 있는지 궁금함.
     * 비트코인 가치에 대한 의문
          + 비트코인의 가치는 분산화라는 특성에서 대부분 나옴.
          + 새로운 승인이 원래 비트코인의 가치를 증가시키지 않을 것으로 생각됨.
          + 대기업들이 사람들의 돈을 모으기 위한 또 다른 유행을 만들고자 하는 것일 수 있음.
"
"https://news.hada.io/topic?id=12779","ParadeDB - PostgreSQL for Search","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ParadeDB - PostgreSQL for Search

     * Postgres 기반으로 만든 ElasticSearch 대체제 오픈소스
          + 검색부터 시작해서 ElasticSearch 제품군의 기능을 구축하는 것이 목표
     * Full Text 검색 지원. 설정 가능한 Tokenizer 및 17개 언어의 어간 추출(Stemming)
          + korean_lindera 토크나이저로 한국어 검색 지원
     * 유사도 검색(pg_vector) 및 하이브리드 검색 지원
     * BM25 스코어링 알고리듬 사용
     * 자동으로 인덱스를 샤딩하여 분산 검색

   postgres 엔진이 좋긴 좋은가봐요.. postgresql 의 한계는 어디까지인가...!

   이전에 비해서 지원 언어가 많이 늘었네요
   https://news.hada.io/topic?id=11287
"
"https://news.hada.io/topic?id=12796","청소년 정신 질환의 국제적 유행 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        청소년 정신 질환의 국제적 유행 (2023)

청소년 정신 질환 유행은 국제적인 문제, 파트 1: 영어권 국가들

     * 2010년대 초반 미국 청소년 사이에서 정신 질환 유행이 시작됨이 널리 인정됨.
     * 미국, 영국, 캐나다, 호주, 뉴질랜드에서 동시에 같은 방식으로 정신 건강이 악화된 이유는 무엇인가?
     * 2008년 글로벌 금융 위기는 시기적으로 맞지 않으며, 다른 국가 특유의 이론들도 이러한 국제적 유행을 설명하기 어려움.

  미국, 캐나다, 영국, 호주, 뉴질랜드의 청소년들에게 무슨 일이 일어났는가?

     * 미국, 캐나다, 영국, 호주, 뉴질랜드의 청소년들 사이에서 2010년대 초반부터 정신 질환과 자해 행위가 급증함.
     * 특히 여성 청소년들과 개인주의적인 국가에서 더 큰 증가를 보임.
     * 이러한 현상은 영어권 국가들에서 공통적으로 나타남.

    1. 미국

     * 미국 청소년들 사이에서 2010년 이후 우울증과 자해 행위가 급증함.
     * 특히 여성 청소년들 사이에서 더 큰 증가를 보임.

    2. 캐나다

     * 캐나다 청소년들의 정신 건강 자가 평가가 급격히 나빠짐.
     * 자해로 인한 병원 방문이 크게 증가함.

    3. 영국

     * 영국 청소년들 사이에서 우울증과 불안 장애가 크게 증가함.
     * 자해로 인한 병원 방문이 급증함.

    4. 호주

     * 호주 청소년들 사이에서 심리적 스트레스 보고가 증가함.
     * 자해로 인한 병원 방문이 크게 증가함.

    5. 뉴질랜드

     * 뉴질랜드 청소년들 사이에서 불안 진단 보고가 급증함.
     * 자해로 인한 병원 방문이 크게 증가함.

    6. 결론

     * 영어권 국가들에서 청소년들의 정신 건강 문제가 급증하는 공통된 패턴을 보임.
     * 이러한 현상은 스마트폰의 보급과 소셜 미디어의 사용 증가와 관련이 있을 수 있음.

  부록: 협업 검토 문서

     * 전 세계 청소년 정신 건강 유행을 추적하기 위한 협업 검토 문서들을 정리함.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

   GN⁺의 의견:
    1. 이 글은 청소년들의 정신 건강 문제가 단순히 한 국가의 문제가 아니라 국제적인 현상임을 보여줌으로써, 전 세계적인 관심과 대응이 필요함을 강조함.
    2. 스마트폰과 소셜 미디어의 영향에 대한 논의는 기술 발전이 청소년들의 삶에 미치는 영향을 이해하는 데 중요한 통찰을 제공함.
    3. 이 글은 청소년 정신 건강 문제에 대한 국제적인 연구와 데이터 공유의 중요성을 강조하며, 이를 통해 보다 효과적인 예방 및 치료 전략을 개발할 수 있는 기반을 마련함.
"
"https://news.hada.io/topic?id=12859","Posthog, 슬랙 커뮤니티 폐쇄하고 포럼으로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Posthog, 슬랙 커뮤니티 폐쇄하고 포럼으로 전환

공개 슬랙 닫고 더 나은 PostHog 커뮤니티 구축

     * PostHog는 오픈 소스 프로젝트 주변에 활발한 커뮤니티를 구축함.
     * 500명 이상의 기여자들로부터 코드를 받고 수천 명의 사용자들과 공개 슬랙 그룹에서 아이디어를 교환함.
     * 이제 공개 슬랙 그룹을 닫고 사이트에서 더 나은, 확장 가능하고 유용한 커뮤니티를 만들기로 결정함.

     요약: 2024년 1월 24일에 슬랙 그룹을 닫고, 이미 새 커뮤니티 포럼으로 이동한 1,500명의 사용자에게 합류할 것을 초대함. 계정을 생성하면 독특한 커뮤니티 성과를 받게 됨. 이 결정은 공개 슬랙 그룹에만 영향을 미치며, 추가 지원을 위해 비용을 지불하는 사용자들의 개인 슬랙 채널에는 영향을 주지 않음.

커뮤니티 방식 변경 이유

     * PostHog는 지난 4년 동안 빠르게 성장했고, 공개 슬랙 그룹은 커뮤니티의 중심이었음.
     * 슬랙 그룹은 사용자와 대화하고, 기능 요청을 듣고, 질문에 답하고, 피드백을 요청하는 장소였음.
     * 커뮤니티 멤버가 5,000명을 넘어서면서 슬랙 플랫폼의 한계가 명확해짐.
     * 메시지가 빠르게 사라지고, 주요 지원 흐름과 연결되지 않으며, 유용한 해결책이 사이트나 구글에서 검색 가능하지 않음.
     * 이 문제를 해결하기 위해 유료 플랜 가입과 자체 AI 봇 구축을 고려했으나, 새로운 접근 방식이 필요하다는 것을 깨달음.

PostHog 커뮤니티 포럼 소개

     * 기성 포럼 플랫폼 대신, Strapi를 사용한 헤드리스 CMS로 자체 포럼을 만듦.
     * 포럼은 이미 몇 달 동안 운영되며 1,500명 이상의 활동적인 멤버를 보유함.
     * 새 포럼은 PostHog 팀과 넓은 커뮤니티에 질문을 게시할 수 있는 전용 영역을 제공함.
     * 누구나 응답할 수 있고, 답변은 다른 사용자를 안내하는 데 도움이 되는 선호하는 해결책으로 선택될 수 있음.
     * 모든 콘텐츠는 주요 지원 흐름에 연결되어 있고, 사이트에 영구적으로 존재하며, 검색 엔진에서 볼 수 있음.
     * 포럼은 사이트의 다른 부분과도 통합되어 있어, PostHog 문서를 탐색하면서 질문을 게시할 수 있음.
     * 프로필은 포럼의 큰 부분으로, 정보를 추가하고 참여하는 토론을 추적하며, 커뮤니티를 통해 얻은 성과를 표시할 수 있는 공간임.
     * 공개 슬랙에서 PostHog 커뮤니티에 합류하는 모든 사람에게 감사의 의미로 독특한 성과를 제공함.

다음 단계는 무엇인가?

     * 공개 슬랙을 포럼과 병행하여 계속 운영하는 옵션도 있었지만, 슬랙 사용자들을 불확실한 상태에 두게 될 것임.
     * 대신 PostHog 커뮤니티 포럼을 선호하여 슬랙을 닫을 예정임.
     * 1월 12일에는 공개 PostHog 슬랙의 모든 채널을 보관하여 새로운 토론이나 답변을 게시할 수 없게 함.
     * 1주일 후인 1월 22일에는 슬랙 그룹을 영구적으로 닫고 모든 기존 콘텐츠를 삭제할 예정임.
     * 중요: 유료 사용자를 위한 개인 슬랙 채널은 Slack Connect를 통해 정상적으로 기능하며, 앱 내 도움말을 통해 대부분의 고객 지원을 계속 처리할 예정임.
     * GitHub 리포지토리도 정상적으로 기능할 것이며, 여기에도 댓글을 달거나 제출할 수 있음.
     * 지난 4년 동안 슬랙 그룹에 참여한 모든 이들에게 감사함. 지원과 피드백은 매우 도움이 되었고, 여러분과의 대화를 즐겼음. 모든 이들이 새 커뮤니티에 곧 합류하기를 바람!

GN⁺의 의견

     * PostHog의 결정은 커뮤니티 관리와 지원의 효율성을 높이기 위한 전략적인 움직임임.
     * 자체 포럼 플랫폼을 구축함으로써 사용자 경험을 개선하고, 지식 공유와 검색 가능성을 강화하는 데 중점을 둠.
     * 이러한 변화는 오픈 소스 프로젝트와 그 커뮤니티가 성장함에 따라 발생하는 도전과제에 대한 해결책을 제시함으로써, 다른 오픈 소스 프로젝트에도 영감을 줄 수 있음.

   슬랙은 그냥 실시간 소통용이지 커뮤니티 도구로는 적합하지 않다는데에 동감합니다.

   근데 정작 커뮤니티를 만들어 보려고 하면 적절한 도구를 찾기가 힘드네요 ㅎㅎ
   특히나 국내 환경에 잘 맞는 형태는 안보여요. 그럼 또 만들어야 하나? 하다가 포기하게 됩니다.

        Hacker News 의견

     * 채팅 애플리케이션과 토론 포럼의 차이점에 대한 의견

     채팅 앱은 모든 사람이 소리치는 시장 광장과 같아 중요한 정보가 순간에 사라지지만, 토론 포럼은 정보를 보존하고 검색 가능하게 만드는 공공 도서관으로 성장할 수 있음.
     * 제3자를 통한 커뮤니케이션 관리에 대한 부정적인 견해

     제3자가 관리하는 커뮤니케이션은 불편함을 느끼며, Slack 설정을 복잡하게 만듦. Discord는 이 문제에서 더 심각함.
     * 포럼의 검색 가능성에 대한 긍정적인 의견

     포럼이 검색 가능성 때문에 다시 돌아왔으면 좋겠음. 하지만 사용자가 너무 많아져 소음이 많아지면 결국 다시 Slack/Discord로 돌아갈 수도 있는 순환 과정일 수 있음.
     * Reddit을 선호하는 포럼으로서의 사용

     Reddit(특히 구 버전)이 선호하는 포럼으로, 여러 서브레딧을 결합하여 과거의 포럼 경험을 재현할 수 있음.
     * Laracasts 포럼의 예시와 검색의 중요성

     Laravel 커뮤니티의 Laracasts 포럼은 잘 관리되어 있으며, ChatGPT나 StackOverflow보다 먼저 찾는 곳임. 잘 관리된 공개 포럼의 검색 기능을 이길 수 없음.
     * 포럼을 모바일에 최적화된 형태로 바꾸는 아이디어

     phpbb나 vbulletin 테마를 Slack처럼 보이게 하거나, 로그아웃 상태에서는 Pinterest/Instagram/TikTok처럼 보이게 하는 것으로, 많은 사람들을 포럼으로 다시 끌어들일 수 있음.
     * 자바스크립트 없이 렌더링되지 않는 포럼의 문제점

     포럼이 자바스크립트 없이 렌더링되지 않아 archive.org에 보관되지 않으며, Bing이나 Duckduckgo에서 검색되지 않는 문제가 있음.
     * Strapi를 사용한 자체 포럼 구축에 대한 의견

     기성 포럼 플랫폼 대신 Strapi를 사용한 헤드리스 CMS로 자체 포럼을 만드는 것을 선택함. Strapi에 대한 링크 제공.
     * 자체 포럼 구축에 대한 비판적인 견해

     PostHog에게 CMS를 사용하여 자체 포럼을 구축하고 호스팅하는 것이 올바른 선택인지 의문. Slack 대신 호스팅된 포럼 솔루션을 제공하는 Discourse와 같은 서비스가 있을 것임.
     * Slack 할인 취소에 대한 반응과 포럼 호스팅의 장점

     Slack이 할인을 취소하고 있어, 많은 회사들이 사용자당 매달 비용을 지불하는 대신 포럼을 호스팅하는 방향으로 전환할 가능성이 있음.
"
"https://news.hada.io/topic?id=12751","소뇌의 기능은 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             소뇌의 기능은 무엇인가?

소뇌는 어떤 역할을 하는가?

     * 소뇌의 이름은 ""작은 뇌""를 의미하며, 큰 뇌 아래에 있는 또 다른 뇌임.
     * 소뇌는 균형과 관련된 기능으로 잘 알려져 있으나, 소뇌 질환을 가진 환자들은 다양한 운동 문제를 보임.
     * 소뇌 질환 환자들은 손가락을 코에 대거나 박수를 칠 때 떨리는 움직임을 보이고, 눈이 떨리며(안진증), 서거나 걸을 때 앞뒤로 흔들려 넘어질 뻔함.
     * 소뇌 질환은 근육의 긴장도 감소, 움직임의 부드러움 결여, 거리 추정 실패(과대 또는 과소 평가), 의도성 떨림(움직임 시작 시 나타나는 고진폭, 상대적으로 느린 떨림) 등을 유발함.
     * 소뇌는 운동을 제어하는 데 중요한 역할을 하며, 손상될 경우 운동 능력에 장애가 생김.

소뇌의 구조적 특징

     * 소뇌에는 푸르킨예 세포라는 매우 크고 복잡한 뉴런이 존재하며, 이는 소뇌에만 존재함.
     * 푸르킨예 세포는 수백 개의 시냅스를 가지고 있는 반면, 대뇌의 뉴런들은 몇 개의 시냅스만을 가짐.
     * 소뇌의 대부분 다른 세포들은 작은 입자 세포들로, 이들은 인간 뇌의 전체 뉴런의 절반 이상을 차지함.
     * 소뇌는 전체 뉴런의 80%를 포함하고 있으며, 소뇌의 크기는 진화 과정에서 빠르게 성장함.

소뇌의 고유 기능

     * 고전적 조건화(파블로프의 개 실험에서 볼 수 있는 것처럼 음식과 연관된 종소리에 대한 개의 침 흘림 반응)는 소뇌에서 발생함.
     * 소뇌의 푸르킨예 세포는 단일 세포 학습 능력을 가지고 있으며, 이는 고전적 조건화에 필수적임.
     * 소뇌의 푸르킨예 세포들은 자극의 타이밍에 대한 정보도 학습할 수 있음.

소뇌의 측정 기능

     * 소뇌의 푸르킨예 세포들은 수량을 학습할 수 있으며, 이는 소뇌 질환의 증상과 관련이 있음.
     * 소뇌 질환의 증상 중 하나인 거리 추정 실패(운동의 정확한 거리 및 속도 추정 실패)는 소뇌의 측정 기능과 관련이 있음.

소뇌의 예측 기능

     * 소뇌는 예측 또는 준비 기능과 관련이 있으며, 이는 고전적 조건화와 운동 계획 및 순차적 실행에 중요함.
     * 소뇌는 빠른, 무의식적인 의도 형성을 통해 다음 단계를 예측하고 준비하는 데 도움을 줌.

소뇌의 다른 동물에서의 역할

     * 모든 척추동물은 소뇌를 가지고 있으며, 소뇌는 운동과 감각 인지에 관여함.
     * 특히 수중에서 전기 위치 감지 능력을 가진 물고기나 해양 포유류의 소뇌는 확대되어 있음.

소뇌의 구조

     * 소뇌는 기능과 기능적 연결성에 따라 대뇌와 밀접한 일대일 대응을 보임.
     * 소뇌는 반복되는, 거의 결정체 같은 신경 구조를 가지고 있으며, 이는 빠른 ""전방 모델"" 생성에 기여할 수 있음.

지능에 대한 재고

     * 소뇌는 인간의 높은 지능과 밀접한 관련이 있으며, 인간의 사고와 운동 능력에 중요한 역할을 함.
     * 소뇌는 인지 기능과 운동 기능 사이의 연속성에 대한 ""체화된 인지"" 세계관과 일치함.

   GN⁺의 의견:
    1. 소뇌의 역할은 단순히 균형 유지에 국한되지 않고, 운동 제어, 고전적 조건화, 예측 및 준비, 그리고 수량 학습에 이르기까지 다양함을 알 수 있음.
    2. 소뇌의 복잡한 구조와 대뇌와의 연결성은 인간의 고유한 인지 능력과 밀접한 관련이 있으며, 이는 인간의 진화 과정에서 중요한 역할을 했을 것으로 추정됨.
    3. 소뇌의 기능에 대한 이해는 인공 지능과 로봇 공학 분야에서 실시간 행동 제어를 위한 예측 모델링 접근 방식에 영감을 줄 수 있음.

        Hacker News 의견

     * 이 글은 나에게 <i>매우 흥미롭다</i>. 저자가 소개한 소뇌가 담당하는 것으로 추정되는 목록은 내가 유독 서툰 것들의 목록과 일치한다:
          + 소뇌가 담당할 것으로 추정되는 기능들에 대한 개인적인 경험 공유
          + 조정 능력 부족, 일련의 작업 계획에 어려움, 언어 사용 시 혼동, 글쓰기 방식의 차이 등을 예로 듦
          + 이러한 문제들이 생활에 미치는 영향은 경미하거나, 다른 방식으로 보상이 가능하다고 언급
     * 사람들은 이런 종류의 감각 시스템을 가지고 있지 않지만(그는 전기장을 이용한 3D 환경 감지에 대해 이야기하고 있다), 나는 이중청각이 그런 감각 시스템일 수 있다고 생각한다. 사람을 눈가리개를 하게 한 후 어떤 공간으로 인도하면, 그들은 자신이 야외에 있는지, 작고 텅 빈 방에 있는지, 콘서트홀에 있는지, 가구와 커튼이 있는 방에 있는지 말할 수 있다. 아마도 벽에서 얼마나 떨어져 있는지, 어느 방향인지도 알 수 있을 것이다.
          + 이중청각이 특정 공간을 인지하는 감각 시스템이 될 수 있다는 가설 제시
          + 눈가리개를 한 사람이 여전히 주변 환경에 대한 정보를 얻을 수 있다는 점을 예로 듦
     * 정말 멋진 기사다. 신경과학에서 물리적 움직임이 디버깅 계층으로서 얼마나 유용한지를 나는 결코 제대로 인식하지 못했다. 작업 중에 보행, 떨림, 속도, 정확도 등을 관찰함으로써, 비운동 작업에 대한 인지 작용을 더 깊이 이해할 수 있다. 결국 인지는 물리적 차원이 아닌 개념적 차원을 통해 이루어지는 움직임일 뿐이라는 생각이 든다.
          + 물리적 움직임이 신경과학에서 인지 기능을 이해하는 데 도움이 될 수 있다는 관점 제시
          + 인지 작업이 개념적 차원에서의 움직임이라는 통찰 공유
     * 이것은 흥미로운 관점이다. 나는 신경과학의 발전 속도가 인공지능(AI)에 비해 느리다는 데 동의하지만, 뇌를 이해하는 것과 지능적인 기계를 만드는 것은 근본적으로 다른 문제라는 점을 지적하는 것이 중요하다고 생각한다. 인간의 뇌는 수십억 개의 상호 연결된 뉴런으로 구성된 매우 복잡한 시스템이며, 우리는 여전히 그 작동 방식을 완전히 이해하기까지 갈 길이 멀다.
          + 뇌를 이해하는 것과 AI를 개발하는 것은 서로 다른 문제라는 의견 제시
          + AI가 특정 문제를 효율적으로 해결하기 위해 설계되었으며, 뇌의 작동 원리를 완전히 이해하지 않고도 인간의 인지 기능을 모방할 수 있다고 언급
          + 신경과학의 발전이 AI의 잠재력을 완전히 발휘하는 데 중요하다고 강조
     * ""소뇌는 인공지능 접근법, 특히 로봇공학이나 다른 제어 분야에서 영감을 줄 수도 있는데, 실시간 행동을 제어하기 위해 빠른 전달만을 사용하는 예측 모델링 단계를 포함시키는 것이 유익할 수 있다...""
          + 소뇌가 AI, 특히 로봇공학과 제어 분야에서 영감을 줄 수 있다는 의견
          + 예측 모델링을 사용하여 실시간 행동을 제어하는 것이 유익할 수 있다고 언급
     * 소뇌가 없는 사람들도 있다. 이것은 사고와 감정에 영향을 미친다.
          + 소뇌가 없는 사람들의 존재 언급
          + 소뇌가 사고와 감정에 영향을 미친다는 사실 강조
     * 소뇌는 반복되고 거의 결정체 같은 신경 구조를 가지고 있다:
          + 소뇌의 반복되고 결정체 같은 신경 구조에 대한 설명
          + 소뇌가 뇌의 FPGA와 같은 역할을 할 수 있다는 소프트웨어 엔지니어 겸 신경외과 전문의의 직관적인 추측 공유
          + 소뇌가 일상적인 작업을 빠르고 효율적으로 수행할 수 있도록 특화되어 있으며, 운동 학습이 소뇌의 올바른 연결에 크게 의존한다고 언급
          + 기술을 배울 수 있지만 배웠다는 기억은 없는 흥미로운 기억 상실증에 대한 설명
     * 이 기사에 대한 나의 전반적인 읽기는 그 주장이 아마도 지나치게 자신감이 넘친다는 것이다. 즉, 흥미롭기는 하지만, 소뇌가 전반적인 인지에 어떻게 작용하는지에 대해 몇 가지 결과를 보고 큰 주장을 하고 있는 것 같고, 내 일반적인 생각은 여기서 많은 겸손이 보통 필요하다는 것이다: 간단하고 결정적인 진술은 보통 많은 예외와 설명되지 않은 행동으로 가득 차 있다.
          + 기사의 주장이 과도한 자신감을 가질 수 있다는 비판적인 의견
          + 소뇌와 인지 기능의 관계에 대한 큰 주장에 대해 신중한 접근이 필요하다고 강조
     * 왜 정신 기능이 물리적 구성 요소에 국한되어야 하는가?
          + 정신 기능이 특정 물리적 구조에 국한될 필요가 있는지에 대한 의문 제기
     * 전체적으로, 소뇌는 모든 뉴런의 80%를 포함하고 있다!
          + 소뇌가 전체 뉴런의 상당 부분을 차지한다는 사실 언급
          + 트랜스포머 모델의 MLPs(다층 퍼셉트론)가 각 층의 가중치에서 차지하는 비율과 비교하며 흥미로운 유사성 지적
"
"https://news.hada.io/topic?id=12865","어셈블리 언어로 작성된 경량 웹 포럼 엔진 AsmBB","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     어셈블리 언어로 작성된 경량 웹 포럼 엔진 AsmBB

AsmBB란 무엇인가?

     * AsmBB는 JohnFound가 작성한 매우 빠르고 가벼운 웹 포럼 엔진임.
     * 전체가 어셈블리 언어로 작성되었으며, 데이터베이스 백엔드로 SQLite를 사용함.
     * 약한 호스팅에서도 작동하면서 동시에 많은 방문자를 지연 없이 처리할 수 있음.
     * 내부 설계와 의존성 감소로 인해 매우 안전한 웹 애플리케이션임.
     * 더 높은 보안을 위해 암호화된 데이터베이스를 지원함.
     * 실행 환경에 대한 요구 사항이 매우 적음: x86 리눅스 서버(32비트나 64비트 모두 가능), 특별히 사전에 설치된 라이브러리 필요 없음.
     * 가장 작고 저렴한 VPS에서도 잘 작동하며, FastCGI를 지원하는 공유 호스팅에서도 사용 가능함.
     * FastCGI 인터페이스를 지원하는 웹 서버가 필요하며, Nginx, Apache, Lighttpd, Hiawatha 및 RWASA에서 테스트됨.
     * 포럼을 코드를 실제로 수정하지 않고도 쉽게 사용자 정의할 수 있는 강력한 템플릿 시스템을 사용하여 커스터마이징하기 쉬움.

다운로드, 설치 및 해킹

     * 바이너리 패키지를 직접 다운로드: asmbb.tar.gz (이 링크는 항상 최신 버전의 바이너리 패키지를 가리킴).
     * 진행 상황을 따르고, 버그를 보고하며, 소스를 복제: AsmBB 소스 저장소
     * 자신의 서버에 설치하여 가장 빠른 포럼을 가질 수 있음: NGINX와 systemd를 사용한 설치에 대한 튜토리얼
     * RWASA를 사용하여 2분 미만으로 설치: YouTube에서도 볼 수 있는 비디오 튜토리얼

   GN⁺의 의견:
     * AsmBB는 어셈블리 언어로 작성된 고성능 웹 포럼 엔진으로, 낮은 사양의 서버에서도 빠른 속도와 높은 보안을 제공하는 것이 핵심적임.
     * 사용자가 쉽게 커스터마이징할 수 있으며, 다양한 웹 서버와 호환되는 점이 매력적임.
     * 이 기술은 리소스가 제한된 환경에서도 효율적인 웹 서비스를 구축하고자 하는 개발자들에게 흥미로운 대안을 제시함.

        Hacker News 의견

     * AsmBB의 보안성에 대한 의문
          + AsmBB가 내부 설계와 의존성 감소로 인해 매우 안전하다는 주장에 대해 회의적인 시각을 가짐.
          + 잘 테스트된 의존성을 사용하는 것의 가치를 강조하며, 복잡한 소프트웨어를 어셈블리로 작성할 때 버그가 발생할 수 있음을 지적함.
          + 특히 문자열 처리에 있어서는 더욱 그러함.
     * 어셈블리 언어 사용에 대한 칭찬과 보안에 대한 의견
          + 어셈블리 언어를 사용한 점에 대해 긍정적인 평가를 하면서도 의존성 감소가 곧 보안을 의미하지는 않음을 언급함.
          + 의존성 감소가 잠재적인 취약점을 줄이지만, 어셈블리 언어 자체가 메모리 안전성을 보장하지 않아 위험성이 증가할 수 있음을 지적함.
          + 어셈블리 언어 애플리케이션에 대한 애정을 표현하며, 추가적으로 aarch64로 변환하여 Pi-Zero나 Pi-W에서 실행할 수 있으면 좋겠다는 의견을 제시함.
     * 분산 포럼에 대한 연구
          + 분산 포럼에 대한 연구를 하고 있으며, Usenet이 쇠퇴한 후 phpBB와 같은 포럼 소프트웨어가 인기를 얻었음을 언급함.
          + 분산 및 복제 기능과 사용자 경험을 결합한 새로운 포럼의 필요성을 제기함.
          + 분산 시스템으로서의 도전과 퍼즐을 푸는 것과 같은 흥미를 느낌.
     * 처리 시간과 CDN의 중요성
          + 처리 시간이 매우 빠르지만, 문서를 덴마크로 전송하는 데는 500-1000ms가 걸림을 지적함.
          + 이 경우 성능이 좋은 코드보다 CDN이 더 효과적일 수 있음을 언급함.
     * 어셈블리 코드로 데이터베이스 연결 방법에 대한 의문
          + 어셈블리 코드로 데이터베이스에 어떻게 연결하는지에 대한 궁금증을 표현함.
          + 이론적으로는 이해하지만, 간단한 작업을 작성하는 데 엄청난 노력이 필요할 것임을 언급함.
     * SQLite를 백엔드로 사용하는 어셈블리 코드 작성
          + 어셈블리로 작성되었지만 SQLite를 백엔드로 사용함을 언급함.
          + 많은 애플리케이션에서 CPU보다 입출력이 병목 지점이 될 가능성이 높음을 지적함.
     * 유니코드 이모지 문자 지원에 대한 설명 요구
          + ""정말 네이티브한 방식""으로 유니코드 이모지 문자를 지원한다는 설명에 대해 더 자세한 정보를 원함.
     * 라이브 알림 비활성화 버튼과 사용자 목록 공개에 대한 의견
          + 라이브 알림을 비활성화할 수 있는 버튼이 있음을 언급함.
          + 로그인하지 않은 사용자에게 포럼 사용자 목록을 보여주는 것은 좋지 않은 아이디어일 수 있으며, 설정 가능한지에 대한 의문을 제기함.
     * 라이브 알림에 대한 속도 제한 요구
          + 라이브 알림이 과도하게 빈번하게 발생하여, 이에 대한 속도 제한이 필요함을 언급함.
     * 어셈블리 언어와 운영체제에 대한 정보 부족 지적
          + 제목에서 사용된 어셈블리 언어의 종류나 실행되는 운영체제에 대한 정보가 누락되었음을 지적함.
     * C 언어로의 유사 구현 가능성과 어셈블리 사용의 동기
          + 표준 라이브러리를 사용하지 않고 C 언어로 유사한 작업을 수행할 수 있음을 언급함.
          + 시스템 호출 외에는 의존성이 없으며, 어셈블리 언어를 사용하는 것은 지적인 운동 외에는 별다른 이유가 없음을 제시함.
"
"https://news.hada.io/topic?id=12883","시각화 방법의 주기율표시각화 방법의 주기율표 (2007)

        Hacker News 의견

     * 주기율표 형식의 시각화 방법에 대한 의견
          + 주기율표 형식이 화학 원소 이외의 데이터를 시각화하는 데 적합한 사례가 있는지 궁금함을 표현.
          + 행과 열이 공통 속성을 나타내는 그리드 형식의 시각화는 유용할 수 있으나, 주기율표 형식 자체는 과도하게 사용되는 경향이 있음.
          + 주기율표 형식을 올바르게 적용하려면, X축을 따라 N번째 요소가 서로 유사해야 하며, 이를 통해 Y축에서도 공통 속성을 보여줄 수 있어야 함.
     * 주기율표 모양의 시각화 방법에 대한 혼란
          + 시각화 방법을 고민한 후에 왜 주기율표의 형태로 강제하는지에 대해 혼란스러움을 표현.
          + 데이터 유형별로 그룹화하거나 트리 구조를 사용하는 것이 더 유용하고 흥미로울 것이라는 의견 제시.
          + 다양한 트리 데이터 구조를 나타내는 트리 다이어그램을 보고 싶다는 관심을 나타냄.
     * 주기율표 형식의 시각화에 대한 아이러니한 사랑
          + 정보 시각화에 대해 심각하게 생각하는 사람들이 경고하는 모든 것이 한데 모인, 의도적이거나 아닌 웃긴 시각화라고 평가.
          + 이 시각화가 전문가에 의해 만들어졌음에도 불구하고, 패러디인지 진지한 작업인지 구분하기 어려운 점을 지적.
          + 관련된 연구 논문을 참조함.
     * 데이터 시각화 분류법에 대한 흥미로움과 유머
          + 데이터 시각화에 대한 분류법과 '차원'을 식별하는 뛰어난 작업이 있었다고 언급.
          + Tamara Munzner의 ""Visualization Analysis and Design""과 Lee Wilkinson의 ""Grammar of Graphics"" 등의 중요한 참고 문헌을 소개.
          + 주기율표의 속성을 활용하여 카탈로그를 정리하고 추가 발견을 지원하는 작업이 있을 수 있음을 언급.
     * 주기율표 형식의 시각화 방법에 대한 관련 링크 제공
          + 다양한 시기에 해커뉴스에서 논의된 '주기율표 형식의 시각화 방법'에 대한 링크를 나열.
     * 주기율표 메타포의 강제성에 대한 비판
          + 많은 요소들이 그룹에 잘 맞지 않고 다른 곳에도 적합할 수 있다고 지적.
          + 주기율표의 X, Y축이 의미하는 바가 여기서는 명확하지 않음.
          + 타이포그래피와 가독성이 매우 떨어지며, 전반적으로 이 메타포에 대해 확신이 없음을 표현.
     * 시각화 방법의 주기성에 대한 의문
          + 시각화 방법에서 주기성이 무엇인지, 예를 들어 카테시안 좌표나 선 그래프 등에서 주기적 속성이 반복되는지에 대한 의문을 제기.
     * 주기율표의 구조적 정보 제공에 대한 중요성 강조
          + 주기율표의 형태보다는 그 철학을 사용해야 한다고 주장하며, 적절한 데이터 표현에 대해 가르치는 목적과 모순되는 점을 지적.
     * 시계열 시각화의 좋은 예시 링크 제공
          + 시계열 시각화에 대한 좋은 예시를 볼 수 있는 웹사이트와 무료 Springer e-book에 대한 링크를 공유.
     * 주기율표 메타포의 부적절함에 대한 강한 비판
          + 주기율표 메타포가 부적절하고, 실행이 잘못되었으며, 각 범주의 예시가 대표적이지 않고 종종 매우 나쁘다고 비판.
          + 이를 정보를 조직하고 표시하는 방법에 대한 나쁜 예로 평가함.
"
"https://news.hada.io/topic?id=12840","Next AI News - Next.js로 해커뉴스를 재구현해 본 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Next AI News - Next.js로 해커뉴스를 재구현해 본 오픈소스

     * Next.js + App Router + React Server Components + Node.js
     * 데이터 레이어 : Drizzle ORM + Zod
     * 인증: Auth.js
     * v0 를 이용하여 초기 UI를 생성 (Tailwind, Shadcn UI, Radix UI)
     * Partial Prerendering (PPR) 적용
     * 화면에 보이는 콘텐츠는 AI로 자동생성한 내용임
          + Vercel Edge에서 Cron으로 실행
          + Mixtral(mixtral-8x7b-32kseqlen) LLM 을 이용하여 자동 생성

   완전 모범적인 개발환경이라 무릎을 탁 칠수밖에 없는 환경...

   전체 기능이 있는건 아니지만, 누군가 비슷한 (또?) 사이트를 만든다면 참고는 가능하겠네요. ㅎㅎ
"
"https://news.hada.io/topic?id=12817","HN에 알림: Bash.org 서비스 종료 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN에 알림: Bash.org 서비스 종료 소식

     * Bash.org의 중요성
          + Bash.org는 옛날 인터넷의 중요한 구성 요소였음.
          + IRC 채널에서 나온 다양하고 우스꽝스러운 인용구들을 모아둔 곳이었음.
          + 90년대로 거슬러 올라가는 인용구들이 많았음.
     * Bash.org의 종말
          + 현재 Bash.org는 더 이상 존재하지 않음.

    GN⁺의 의견

     * Bash.org는 90년대부터 인터넷 문화의 한 부분으로 자리 잡았으며, IRC 채널에서 나온 재치 있는 인용구들을 모아 인터넷 사용자들에게 웃음과 추억을 제공했음.
     * 이러한 웹사이트의 종말은 디지털 문화와 인터넷 역사의 한 페이지가 접히는 것을 의미하며, 온라인 커뮤니티와 소통의 변화를 상징함.
     * Bash.org의 폐쇄는 인터넷의 끊임없는 진화와 함께 오래된 플랫폼이 새로운 형태의 소셜 미디어에 자리를 내주는 과정을 보여주는 사례로, 인터넷 문화 연구에 있어 중요한 참고 자료가 될 수 있음.

        Hacker News 의견

     * 한 인터넷 사용자가 지난주 IRC에서 낯선 사람과 논쟁을 벌였으며, 그들은 여전히 온라인 상에서 활동 중임.

     IRC에서의 논쟁 경험 공유
     * 서버가 몇 달 동안 다운되었지만, IP와 서버는 여전히 존재함. 서버를 관리하는 사람이 기억나면 다시 시작할 수도 있음.

     서버의 상태와 재가동 가능성에 대한 희망
     * bash.org가 제공한 웃음에 대한 감사의 표현과 사이트가 오랫동안 업데이트되지 않았지만 여전히 재미있었던 추억을 회상함.

     bash.org에 대한 애정 어린 추억
     * IRC가 상업화되지 않은 초기 인터넷의 몇 안 되는 프로토콜 중 하나라는 점과 이러한 사건이 그 종말을 암시한다는 의견 제시.

     IRC의 상업화되지 않은 특성에 대한 평가
     * bash.org의 호스팅 업체인 Stablepoint의 지원 봇에 연락을 시도했으나, 사이트 소유주의 확인 없이는 도움을 받을 수 없었음.

     호스팅 업체에 대한 문의 시도와 그 결과
     * bash.org를 고치기 위해 마법사 같은 누군가가 필요하다는 유머러스한 표현.

     사이트 복구에 대한 재치 있는 표현
     * 2023년 7월에 bash.org의 마지막 성공적인 아카이브 링크 공유.

     bash.org의 아카이브 링크 제공
     * 한 사용자가 bash.org를 처음부터 끝까지 읽은 경험을 공유하며, 사이트에 있던 인종차별적이고 여성혐오적인 내용에 대해 비판함.

     bash.org의 내용에 대한 비판적인 시각
     * 유명한 hunter2 밈에 대한 언급과 원본 링크를 찾기 어렵다는 점을 지적하며, 콘텐츠 주소 지정 URL을 생성하는 static.space 웹사이트 소개.

     hunter2 밈과 콘텐츠 주소 지정 URL에 대한 설명
     * bash.org를 운영한 사람들에 대한 감사와 사이트 유지에 들어간 비용에 대한 궁금증 표현.

     bash.org 운영진에 대한 감사와 호기심
"
"https://news.hada.io/topic?id=12749","미리보는 CES 2024 [77p 한국어 PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      미리보는 CES 2024 [77p 한국어 PDF]

     * CES(Consumer Electronics Show) 2024가 미국 라스베이거스 컨벤션센터에서 2024년 1월 9일~1월 12일(현지시간)동안 개최됨
     * 주제: ""All Together, All On""
          + 모든 기업과 산업이 다 함께 인류의 문제를 혁신 기술로 해결하자
          + 전 산업을 관통하는 인공지능(AI) 기술과의 융합
     * 5가지 핵심 키워드
          + 인공지능(AI) : 현재 모든 테크의 중심인 인공지능이 모빌리티, 헬스케어 등의 전 산업에 도입되고 영향력을 확대할 것이며, AI 기반 제품 및 서비스가 B2C에서 B2B로 확산될 전망
          + 모빌리티 : 자율주행, 전기차, 커넥티드 카, 차량용 소프트웨어 등을 중심으로 한 미래 모빌리티 관련 신기술이 미래 산업의 주축으로서의 지위를 이어갈 전망
          + 푸드·애그테크 : 기후변화, 환경오염, 인구 고령화 등으로 대두된 식량안보 및 지속가능한 먹거리 문제를 AI, 빅데이터 등의 첨단 기술 도입을 통해 해결하고자 하는 움직임이 강화될 것
          + 헬스·웰니스 테크 : 웰니스란 단순 건강(Fitness)을 넘어 웰빙(Well-being)과 행복(Happiness)을 유지하는 것으로, 팬데믹 이후 급증한 헬스케어 수요와 더불어 인류의 웰니스 실현에도 인공지능 기술 등이 접목된 디지털 전환이 가속화될 전망
          + 지속가능성과 인간안보
               o 혁신 기술을 에너지 보존, 전력 생산량 증진, 식량난 해결, 스마트 도시 건설 등 인류의 지속 가능성에 기여하는 방향으로 개발(기업의 ESG 경영)
               o 1994년 유엔이 식량 안보, 의료 개선 등 인간을 둘러싼 주요 이슈를 묶어 주창한 개념으로, 경제안보, 환경보호, 개인안전, 정치적 자유 등을 포괄
     * 삼일PwC경영연구원에서 주요 내용 및 관람 동선 등에 대한 정보를 PDF 파일로 정리해서 제공
"
"https://news.hada.io/topic?id=12766","WebAssembly에 대한 2024년 예상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        WebAssembly에 대한 2024년 예상

     * 2023년을 WebAssembly(Wasm)의 해로 예상했으며, 이는 여러 표준의 진전과 다양한 언어의 지원 확대로 실현됨
          + Python과 Ruby는 Wasm 지원을 포함시켰고, 공식 Go 프로젝트도 Wasm 및 WebAssembly System Interface(WASI)를 지원할 예정
          + 첫 Wasm I/O 컨퍼런스와 WasmCon이 개최되었으며, GlueCon과 DockerCon에서도 WebAssembly 트랙이 마련됨
          + Suborbital이 F5에 인수되고 Adobe가 Figma를 인수하려 했으나 규제로 인해 실패한 사건은 Wasm을 선도하는 기업들의 시장 가치를 입증함

1. Wasm은 AI의 완벽한 파트너

     * Wasm의 플랫폼 중립성, 빠른 시작 시간, 이식성 및 작은 바이너리 크기는 AI 애플리케이션에 이상적임
     * 2024년 AI의 주요 테마 중 하나는 효율성이며, Wasm은 이 분야에서 큰 이점을 제공할 것

2. 세 가지 주요 표준이 완성됨

     * Wasm은 W3C의 감독하에 표준화되었으며, 핵심 Wasm 표준은 몇 년 전에 완성됨
     * WASI, 메모리 관리, 컴포넌트 모델 등 세 가지 추가 표준이 Wasm의 성공에 중요함
     * 2023년에 이 표준들은 큰 발전을 이루었으며, 2024년에는 모두 완성될 것으로 예상됨

3. Wasm의 본거지는 서버 사이드

     * Wasm은 원래 브라우저에서 실행되도록 작성되었지만, 현재는 서버 사이드에서 더 많은 동력을 얻고 있음
     * 서버리스 함수가 강점으로 부상했으며, 이는 확실히 성장하고 있음
     * Wasm은 Kubernetes 생태계에서 중요한 진전을 이룰 것으로 예상되며, 효율성, 확장성, 비용이 중요한 곳에서 등장할 것

4. 클라이언트/서버 양쪽에서 Wasm에 의한 점진적 개선

     * 웹 개발 프레임워크의 부상으로 클라이언트 측, 서버 측 또는 둘 다에서 선택적으로 실행할 수 있는 애플리케이션이 등장
     * 이러한 애플리케이션은 클라이언트 측 렌더링(CSR)과 서버 측 렌더링(SSR)으로 구축될 수 있으며, 일부 프레임워크는 이미 Wasm을 활용하고 있음
     * 2024년에는 이러한 프로젝트가 더 많이 등장할 것이며, Wasm의 강점인 어디에서나 실행 가능한 바이너리 형식을 더욱 활용할 것으로 보임

   2023년을 WebAssembly(Wasm)의 해로 예상했으며 -> ""2024년을"" 인가요?

   아 저 부분은 작년에 대한 회고 입니다. 작성자가 작년을 그렇게 예상했는데 정말 실현되었다는 얘기더라고요
"
"https://news.hada.io/topic?id=12884","USB4를 이용하여 고속 10Gbps 풀-메쉬 네트워크 $47.98에 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              USB4를 이용하여 고속 10Gbps 풀-메쉬 네트워크 $47.98에 구축하기

     * AWS비용을 줄이기 위해 베어메탈 쿠버네티스 클러스터 구축 및 10Gbps 네트워크를 설정했음
     * USB4 이더넷 브리지 기반 네트워킹으로 전통적인 이더넷 스위치와 케이블 대체
     * 네트워크 속도 11Gbps 도달했으나 제작 비용은 단 47.98달러

표준 1U 서버 대비 미니 PC

     * 베어메탈 클러스터 구축 시 사용할 기계 유형 고민
     * 중고 1U 서버 저렴하지만 운영 비용 고려 시 비효율적
     * 미니 PC는 저렴하고, 조용하며, 전력 소모가 적음
     * Venus UM790 Pro 미니 PC 선택, 낮은 전력 소모 (대기시 6W, 최대 부하 80W)
          + AMD Ryzen 9 7940HS CPU + 64GB 메모리 + 1T 스토리지 인데 $779 로 저렴

네트워킹

     * UM790 Pro 미니 PC를 2대 더 추가하여 3 노드 클러스터로 확장하기로 함
     * Ceph 스토리지 시스템 설치 후 노드 간 더 나은 네트워크 연결이 필요해짐
          + 장비에 2.5G 네트워크 포트가 있긴 하지만 이더넷 스위치도 구입을 해야함
     * 기기에 2개나 있는 USB4 포트 활용하여 40Gbps 속도 가능성 고려
     * USB4 케이블로 풀 메시 네트워크 구성, 2.5G 이더넷 스위치 구매 대비 비용 절감

NixOS와 Systemd를 이용한 메시 네트워크 구성

     * NixOS를 사용하여 리눅스 OS 환경 재현성 있는 구성.
     * systemd-udevd로 썬더볼트 브리지 네트워크 장치 구성 및 IP 설정.

벤치마크 결과

     * iperf3 벤치마크 결과로 11Gbps 네트워크 속도 확인

사후 고찰

     * 11Gbps 네트워크를 저렴한 비용으로 구축한 것에 대한 만족감.
     * USB4 기반 네트워크의 속도 제한 원인에 대한 궁금증.
     * USB/썬더볼트 기반 고속 네트워크 구축에 대한 미래의 가능성 탐구.

GN⁺의 의견:

     * 이 기사는 소프트웨어 엔지니어가 하드웨어에 대한 지식을 확장하는 중요성을 강조함. 특히, 저렴한 비용으로 고속 네트워크를 구축하는 창의적인 접근 방식을 제시함으로써, 기존의 네트워킹 방식에 대한 새로운 대안을 제시함.
     * USB4 기술을 활용한 네트워킹은 기존 이더넷 기반 솔루션에 비해 비용 효율적이며 높은 속도를 제공함을 보여줌. 이는 향후 소규모 데이터 센터나 개인 사용자들에게 매력적인 옵션이 될 수 있음.
     * NixOS와 같은 도구를 사용하여 네트워크 구성을 자동화하고 재현 가능하게 만드는 방법은 시스템 관리자와 개발자들에게 유용한 정보를 제공함.

   풀매수라고 봤네..

   알차게 구성했네요... 부럽습니다

   IP over TB4/USB4로 파일 전송 잘 쓰고 있는데, 정말 빠릅니다 ㅎㅎ

   thinderbolt-tools, bolt 패키지들 깔고 드라이버만 잘 설치 되어 있으면, nmcli로 인터페이스 설정하고 ssh나 scp 등으로 그냥 이더넷 연결처럼 쉽게 사용 가능 합니다.
   인텔 장치와 맥 장치들은 큰 문제 없었는데, amd는 조금 안 되는 장치들이 있을 수 있습니다.

   이걸 알았다면 인텔 CPU를 골랐을 텐데 말이죠... ㅠㅠ

   어... 2개의 PC간에 USB4/썬더볼트를 직접 연결하면 이더넷으로 취급된다고요?

   지금 NAS랑 PC랑 10Gbps 연결을 해보려고 온갖 계획을 다 세우고 있었는데
   (10G 지원하는 랜카드를 2개 사서 서로 직결해보려 했는데)

   갑자기 허탈하네요.

   USB4/썬더볼트 지원되는걸로 메인보드를 바꿔야하는거였나...

   HN에서 스쳐 지나가듯 봤을 땐 별생각 없이 넘어갔는데,
   여기서 보니까 내용이 갑자기 눈에 들어오네요;

   암튼 덕분에 해결책이 보입니다...

   단점이라면 나스랑 PC가 가까워야 한다는 점 정도겠네요.
   USB4 케이블은 껏해야 3M 정도니까... (랜 케이블이 최대 100ｍ인 거랑 비교하면)

   거리 제약이 생각보다 심합니다.
   usb-c 케이블 표준이 1m 이하일 경우에만 10gbps 지원 입니다. (usb-c 데이터 케이블이 짧은 이유입니다.)
   2m 이하일 경우 5gbps 지원이고, 그 이상이면 usb 2 지원입니다.
   아예 썬더볼트쪽으로 가면 엑티브 케이블을 이용해 거리를 늘릴 수 있습니다만, 엑티브 케이블은 가격도 어마어마 하고, usb4 와 호환되는지도 잘 모르겠습니다.

   아하... 시중에 나온 3M짜리 USB4 케이블은 제대로 된 속도를 내지 못할 가능성이 높은 거군요.
   정확히 알아보고 해야겠네요. AMD CPU를 사용하는지라 썬더볼트도 사용이 어려워서 ㅠ

        Hacker News 의견

     * USB4/썬더볼트 프로토콜에 대한 토론:
          + USB4/썬더볼트는 마법 같은 프로토콜로, 현대 PC 간 데이터를 이동시키는 가장 빠른 방법은 USB-C 케이블로 썬더볼트 포트를 연결하는 것임.
          + 이 연결은 윈도우에서 이더넷 포트로 인식되며, SSD를 포화시킬 수 있는 1GB/s 이상의 전송 속도를 쉽게 달성함.
          + 인텔은 CES에서 썬더볼트 4/5를 이용한 장치 간 파일 전송 기능을 선보임. 이론적으로 썬더볼트 4와 5는 각각 20Gbps와 40Gbps의 속도를 제공함.
          + 하나의 썬더볼트/USB4 컨트롤러만 사용하는 경우, 두 USB4 포트가 40Gbps PCIe 레인을 나누어 사용하기 때문에 11Gbps만 달성할 수 있었을 가능성이 있음.
     * 네트워크 구조에 대한 설명:
          + 3개의 노드만 있는 경우 이를 메시 네트워크라고 부르지 않으며, 실제 링 네트워크는 3개 이상의 노드가 있고 일부 목적지가 여러 홉을 거쳐야 할 때 형성됨.
          + 메시 네트워크는 다수의 경로가 가능한 임의의 점대점 연결로 형성된 네트워크를 의미함.
     * Dell 서버의 전력 사용량 벤치마크:
          + Dell r430 서버의 전력 사용량을 측정한 결과, 부팅 후 약 100와트, 부하 상태에서 최대 약 220와트를 사용함.
          + 이는 하루에 72kWh, 월 $11.05의 비용이 발생하는 것으로, 부하 상태에서는 월 $24.3의 비용이 발생함.
          + 서버 호스팅은 안정적인 인터넷과 소음 문제를 해결하기 위해 공동 위치에 두는 것이 좋음.
     * USB 4의 오류 처리 능력:
          + USB를 통한 대량 데이터 전송 시 드물게 발생하는 데이터 손상에 대한 USB 4의 오류 처리 능력에 대한 질문이 있음.
     * 과거의 파일 전송 방법:
          + MS-DOS 컴퓨터 간에 병렬 케이블을 이용한 파일 전송 방법에 대한 추억이 공유됨.
     * 썬더볼트 연결의 최적화:
          + 썬더볼트 연결 시 MTU(최대 전송 단위)를 9000으로 설정하면 1500일 때보다 더 나은 성능을 보임.
     * 고대 네트워크 구조에 대한 회상:
          + IP-over-SCSI를 이용해 1990년대에 U320 속도로 8대의 PC를 하나의 SCSI 체인에 연결했던 경험에 대한 이야기가 있음.
     * 썬더볼트 속도와 관련된 기술적 문제:
          + 썬더볼트 속도에 영향을 미치는 요소로 케이블, 마더보드의 PCIe 레인 할당, 드라이버/펌웨어 업데이트 등이 언급됨.
     * 전기 요금에 대한 논의:
          + 평균 주거용 전기 요금이 15.34센트/kWh라는 정보가 제공되었으나, 샌프란시스코에서는 이보다 두 배 이상 비싼 요금을 지불한다는 개인적인 경험이 공유됨.

   와 옛날 컴퓨터끼리는 병렬 케이블로 연결하면 데이터를 주고 받을 수 있었군요???
"
"https://news.hada.io/topic?id=12789","한국의 Vim 사용자 모임 VimEnter 2023 발표자료 공유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  한국의 Vim 사용자 모임 VimEnter 2023 발표자료 공유

   2023년 12월 23일에 있었던 au VimEnter* call Bye2023() 발표자료를 공유합니다.

   링크로 들어가시면 발표영상 및 발표자료를 확인하실 수 있습니다.
     * 한윤석: Vim 힘들고 빠르게 배우는 방법
     * 조성진: toggleTerm 플러그인으로 내 손에 맞는 터미널 환경만들기
       Neovim의 터미널 환경을 이용해서 생산성을 근소하게 개선한 경험을 공유했습니다.
     * 이종립: Vimwiki에서 사용하기 위한 나만의 LSP를 만들자
       Vimwiki를 더 편하게 쓰기 위해 LSP 구현한 후기를 공유했습니다.
     * 이효승: Windows Unreal Engine 개발자의 Neovim
       Windows 환경에서 Unreal Engine 개발 과정에 Neovim을 사용한 후기를 공유했습니다.
     * 차주훈: 트리시터를 활용해서 나만의 플러그인 만들기
       treesitter 쿼리를 응용하여 Neovim 플러그인을 개발한 경험을 공유했습니다.
     * 이재열: Neovim으로 생산성 퀀텀점프하기(그리고 다루지 못했던 얘기)
       Neovim에서 제공하는 기능을 최대한 활용하여 생산성을 개선하는 방법을 소개했습니다. 인지과학의 관점에서 접근하여 인지부하를 어떻게 줄일 수 있는지에 대해서도 소개했습니다. (관련 글: https://news.hada.io/topic?id=10300 - 여기서는 Neovim 플러그인 생태계를 중심으로 소개했습니다)

   자료 공유 감사합니다~!
   이런 행사가 있는지 알았다면 vim 애용자로써 구경갔을텐데 아쉽네요.

   오.. 이런발표가 있는지도 몰랐는데 공유해주셔서 감사합니다!

   힘들고 빠르게 배우는 방법이라는 문구에 머리가 띵하군요.
   항상 힘들지 않고 빠르게 배우려고 하다보니 그만큼 포기하기도 쉬었으니 말이죠.
   생각해보면 군대에서 배웠던 것들은 쉽게 잊혀지지 않고 몸이 잊지 않는게 저 문구처럼 힘들고 빠르게 배워서 그런게 아닐까라는 생각이 드는군요.
"
"https://news.hada.io/topic?id=12771","컨테이너선의 95%가 이제 아프리카 남단을 우회하여 항해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    컨테이너선의 95%가 이제 아프리카 남단을 우회하여 항해

        Hacker News 의견

     * 레드해 공격으로 세계 무역에 차질, 더 많은 선박이 레드해 통행 피하기로
          + 이집트의 반응이 특히 관심사임. 선박이 레드해를 우회할 때마다 약 30만 달러의 손실 발생. 2023년에 약 25,000척의 선박이 수에즈 운하를 통과함.
          + 메르카토르 투영법을 사용한 것은 끔찍한 선택임. 아프리카 주변으로 우회하는 추가 거리가 메르카토르 지도에서 비교적 작아 보임.
          + 미국이 개입하고 유럽과 중국은 레드해의 안전을 위한 작전을 주도하지 않는 것에 놀람. 유럽과 중국이 운송에 더 많은 이해관계를 가지고 있음에도 불구하고.
          + 분쟁 지역에서 항해하는 것에 대한 보험을 들 수 없음.
          + 현재 95%의 컨테이너 선박이 레드해를 우회하여 아프리카 남단을 돌아가고 있음. @flexport 지도에서 우회하는 선박은 주황색으로 표시됨. 이미 레드해에 있는 선박들도 있음.
          + 많은 사람들이 해적을 왜 지도에서 지우지 않았는지 궁금해함. 사우디아라비아가 미국의 지원을 받아 몇 년 동안 시도했지만 실패함. 이는 후티 반군이 얼마나 많은 영향력을 가지고 있는지, 저렴한 드론 기술이 전쟁의 본질을 어떻게 바꾸었는지 보여줌. 후티 반군이 사용할 수 있는 세 가지 전략:
              1. 저렴한 드론으로 사우디아라비아의 석유 인프라를 공격하고 세계 에너지의 1/3을 위협함. 이 드론을 격추하는 데는 10배에서 100배의 비용이 듬.
              2. 또 다른 아랍의 봄을 시작하려 함. 후티 반군이 현재 무슬림 세계에서 이스라엘에 반대하는 입장으로 선니파와 시아파 모두에게 큰 인기를 끌고 있음을 고려함.
              3. 아무도 원하지 않는 또 다른 아프가니스탄으로 미국을 끌어들이려 함.
          + 배출가스에 미치는 영향은 무엇인가? 운송되는 상품의 가격에 미치는 영향은?
"
"https://news.hada.io/topic?id=12834","우체국, 후지쯔 개발 내부고발자에 대해 BBC에 거짓말과 위협","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   우체국, 후지쯔 개발 내부고발자에 대해 BBC에 거짓말과 위협

우체국, BBC에 대한 위협과 거짓말로 호라이즌 내부고발자를 억압하려 했음

     * 우체국이 호라이즌 스캔들에서 우체국장들을 무죄로 만드는 핵심 증거를 억압하려고 BBC를 위협하고 거짓말을 함.
     * 고위 관리자들이 2015년 파노라마 방송에서 후지쯔 내부고발자 인터뷰를 방송하기 전에 우체국장들에 대한 비방 시도.
     * 내부고발자 리처드 롤은 호라이즌 컴퓨터 시스템에서 계정이 비밀리에 변경될 수 있음을 밝힘.
     * 우체국은 공개 조사가 진행 중인 동안 논평을 거부함.
     * 롤은 2019년 고등법원 사건에서 중요한 역할을 하여, 시스템의 버그가 오류를 일으킬 수 있음을 밝힘.
     * 1999년부터 2015년까지 700명의 우체국장들이 절도, 사기, 허위 회계 등의 혐의로 기소되었으며, 일부는 감옥에 가거나 자살하기도 함.

BBC가 방송 전에 받은 위협과 거짓말

     * BBC가 인터뷰한 전문가들에게 우체국 변호사들이 프로그램 참여에 대해 협박하는 편지를 보냄.
     * 우체국 고위 관리자들은 BBC에 우체국 직원이나 후지쯔가 원격으로 우체국장의 계정에 접근할 수 없다고 주장했으나, 실제로는 가능했음.
     * 우체국 변호사들은 파노라마와 소송을 제기하겠다고 위협하는 편지를 보냄.
     * 우체국의 거짓 주장은 프로그램 방송을 막지 못했지만, 방송 지연을 초래함.
     * 공개 조사에 제출된 문서는 우체국 고위 경영진이 이 작은 승리를 축하했음을 드러냄.

내부고발자의 중요한 증언

     * 리처드 롤은 후지쯔에서 호라이즌 컴퓨터 시스템에 대한 작업을 했으며, 후지쯔 직원들이 원격으로 계정에 접근하여 변경할 수 있음을 증언함.
     * 이 증언은 700명 이상의 우체국장들의 유죄 판결에 의문을 제기할 수 있는 폭발적인 증거였음.
     * 우체국은 이야기가 밝혀지는 것을 막기 위해 강력하게 싸웠음.

'막대한 유감'

     * 파노라마 기자들은 우체국 본사에서 호라이즌 시스템에 대한 공식 브리핑을 받음.
     * 우체국 관리자들은 우체국장의 계정을 변경할 수 없다고 주장했으나, 이는 사실이 아니었음.
     * 우체국은 후지쯔 직원들이 원격으로 계정에 접근하고 변경할 수 있음을 인정해야 했음.
     * 2011년 컨설턴트 보고서는 후지쯔 직원들이 우체국장의 계정에 ""제한 없는 접근""을 가지고 있음을 경고했음.

비난과 거짓 주장

     * 우체국은 파노라마 조사를 방해하기 위해 변호사와 고위 관리자들이 협박 편지를 보냄.
     * 우체국은 또 다른 비공식 브리핑을 통해 프로그램에 등장할 우체국장들에 대한 비방을 시도함.
     * 우체국은 방송을 막지 못했지만, 그 영향력을 줄이려고 노력함.

GN⁺의 의견

     * 이 기사는 우체국이 자신들의 시스템 오류를 은폐하고, 잘못된 유죄 판결을 유지하기 위해 언론을 억압하려 한 사건을 다루고 있음. 이는 공공 기관의 투명성과 책임성에 대한 중요한 이슈를 제기함.
     * 내부고발자의 용기 있는 증언과 언론의 끈질긴 추적이 결국 진실을 밝히는 데 결정적인 역할을 했다는 점에서 이 기사는 언론의 역할과 중요성을 강조함.
     * 이 사건은 기술적 결함이 법적 결과에 어떻게 영향을 미칠 수 있는지, 그리고 이러한 문제를 해결하기 위해 어떤 조치가 필요한지에 대한 논의를 촉발시킴.

        Hacker News 의견

     * 영국의 우체국 스캔들과 관련하여, 후지쯔 개발자가 우체국이 부인하던 Horizon 소프트웨어의 비밀 계정 편집 기능을 확인함. 약 700명의 우체국장이 현금이 사라진 것에 대해 책임을 지고 사기 및 절도 혐의로 기소됨.

          + 영국 Wakefield의 한 우체국 지점 관리자가 이 스캔들로 인해 수천 파운드를 횡령한 혐의를 받았으며, 그녀에게는 인생을 망치는 일이었음. Horizon 소프트웨어에 대한 비난을 무마하기 위한 우체국의 캠페인이 충격적임.

     * Private Eye의 특별 보고서 'Justice Lost In The Post'를 읽어보는 것이 좋음.

          + Private Eye는 이 사건을 꾸준히 보도한 몇 안 되는 매체 중 하나임. 거의 10년 동안 이 사건을 읽어왔고, 이 문제가 개인에게 미친 영향을 진정으로 이해하는 데 이렇게 오랜 시간이 걸린 것에 놀람. 최근 이 사건을 다시 조명한 TV 프로그램 제작자들에게 박수를 보냄.

     * 소프트웨어가 개인의 삶에 미칠 수 있는 영향에 대해 IT 종사자들이 배워야 할 교훈이 있음.

          + 이 스캔들이 단순한 무능력 때문이었다면 충분히 분노할 일이지만, 실제로는 수백 명의 무고한 사람들을 희생시키는 고의적이고 범죄적인 은폐가 있었음. 이러한 일이 문명국에서 일어날 수 있다는 것이 믿기 어려움.

     * 복잡한 시스템이 항상 올바르다고 가정하는 것은 범죄 사건에 중요할 때 더욱 문제가 될 수 있음.

          + 소프트웨어가 '기계적 도구'로 간주되어 신뢰성을 가정하는 경우가 있으며, 이는 특히 범죄 사건에서 중요할 때 더욱 위험함.

     * 미국의 공공 회사들은 SOX 준수 요구 사항으로 인해 이러한 일이 발생하지 않도록 함.

          + 모든 변경 가능한 행동에는 요청자와 승인자가 필요함. 이는 정기적으로 공개되는 감사를 통해 어느 정도 강제됨. 후지쯔가 우체국장의 지식 없이 계정을 수정할 수 있는 무제한 접근 권한을 가지고 있으며, 이는 위험을 초래한다고 언급한 Ernst and Young의 감사에도 불구하고, 어떠한 규제 기관도 조치를 취하지 않은 것이 이상함.

     * 영국에서 발생하는 많은 스캔들이 어떻게 밝혀지지 않는지에 대한 우려가 있음.

          + 영국의 주택 협회와 경찰과 관련하여 비슷한 문제를 겪고 있으며, 잘못을 은폐하기 위해 거짓말을 하는 사람들이 증가하고 있음. 많은 스캔들이 밝혀지지 않는 것에 대해 우려하며, 사회가 점점 더 나빠지는 방향으로 가고 있는 것 같음.

     * 우체국 스캔들에 대한 위키피디아 페이지에서는 90년대부터 문제가 시작되어 제대로 해결되지 않았으며, 결과적으로 자살하는 사람들도 발생함.

          + 이 스캔들에 대한 위키피디아 페이지 링크 제공. 문제는 90년대부터 시작되었으며, 적절한 해결 없이 이어져 왔고, 이로 인해 자살하는 사람들도 있었음.

     * 이 시스템은 장부를 맞추지 못했으며, 이는 영국에서 이야기를 따라가는 사람이라면 명백한 사실임.

          + 컴퓨터가 표시하는 금액과 실제 은행에 입금된 금액이 다를 경우, 첫 번째 조치는 영수증을 감사하는 것임. 우체국의 경영진이 이익과 명성을 위해 행동하며, 결과적으로 더 깊은 구멍에 빠져들었음. 컴퓨터가 '당신은 유죄'라고 말하면 그것으로 끝나는 것이 무서운 부분임. 장래에 법원이 '컴퓨터는 완벽하다'는 주장을 덜 믿게 될 것이라는 긍정적인 전망이 있음.

     * Private Eye에서 수십 년 동안 이 사건에 대해 읽었지만, 아무 일도 일어나지 않았고, TV 쇼가 나오자마자 즉각적인 진전이 있었음.

          + 오랫동안 Private Eye에서 이 사건을 읽었으나 아무런 변화가 없었고, TV 쇼가 방영된 후에야 즉각적인 진전이 있었음.

     * 재판이 이렇게 간단한 사건에서 진실을 밝히지 못한다면, 정의 시스템이 얼마나 나쁜지 의문이 듦.

          + 재판이 이 사건에서 진실을 밝히지 못했고, 여러 번 실패했음.
"
"https://news.hada.io/topic?id=12764","MotorOS: x64 VM을 위한 Rust 기반 운영 체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   MotorOS: x64 VM을 위한 Rust 기반 운영 체제

Motūrus OS 소개

     * Motūrus 프로젝트는 클라우드를 위한 간단하고, 빠르며, 안전한 운영 체제인 MotūrusOS를 개발함.
     * Motūrus OS는 가상 머신 기반 워크로드를 목표로 하는 새로운 운영 체제로, 웹 서버, 서버리스, 엣지 캐싱 등에 사용됨.

왜 Motūrus OS인가?

     * 현재 대부분의 가상화된 생산 작업 부하는 리눅스에서 실행되고 있음.
     * 리눅스는 많은 고급 기능을 가지고 있지만, 가상화된 작업 부하에 이상적이지 않은 몇 가지 복잡성을 가지고 있음:
          + 리눅스는 베어메탈에 최적화되어 있어 VM 내부에서 사용 시 비효율적임.
          + 리눅스는 사용하기 어려움.
          + 리눅스는 역사적으로 매우 안전하지 않았음.
     * 가상화된 작업 부하에 초점을 맞춘 새로운 운영 체제는 리눅스보다 훨씬 간단하고 안전하게 만들 수 있으며, 성능이나 효율성에서 리눅스를 능가하거나 맞출 수 있음.

Motūrus OS는 무엇인가?

     * Motūrus OS는 마이크로커널 기반의 운영 체제로, Rust 언어로 구축되어 있으며, 오직 가상화된 작업 부하만을 목표로 함.
     * 현재 x64 KVM 기반 가상 머신을 지원하며, Qemu 또는 Cloud Hypervisor에서 실행할 수 있음.
     * Rust는 Motūrus OS의 핵심 언어로, 구현뿐만 아니라 ABI도 Rust로 제공됨.

  작동하는 기능들

     * 현재 대부분의 서브시스템이 POC/MVP 모드에서 작동 중이지만, 웹 서버와 같은 작업을 실행할 수 있음.
     * 구체적으로 다음과 같은 기능들이 작동함:
          + MBR(Qemu) 또는 PVH(Cloud Hypervisor)를 통해 약 200ms 내에 부팅함.
          + himem 마이크로커널.
          + 스케줄링: 간단한 멀티프로세서 라운드 로빈(SMP), 커널 스케줄링은 협력적임.
          + 메모리 관리: 현재는 4K 페이지만 지원, 스택은 보호됨, 사용자 공간의 페이지 결함이 적절히 처리됨.
          + I/O 서브시스템(사용자 공간 내): VirtIO-BLK 및 VirtIO-NET 드라이버, 두 가지 간단한 파일 시스템, smoltcp 기반 네트워킹(TCP만 지원).
          + 사용자 공간: 다중 프로세스, 선점, 스레드, TLS, Rust 표준 라이브러리 대부분 포팅됨.
          + 간단한 유닉스 스타일 쉘 제공.

  작동하지 않는 기능들

     * 대부분의 부분이 아직 프로덕션 사용에 준비되지 않았음.
     * 보안 감사가 이루어지지 않았음.
     * sys-io(사용자 공간 I/O 서브시스템)에서 ""구현되지 않음"" 패닉을 쉽게 겪을 수 있음.
     * 구체적으로 다음과 같은 기능들이 작동하지 않음:
          + 파일 시스템: Rust std::fs API의 대부분이 POC로 구현되었지만, 비동기 I/O를 사용하여 재구현해야 함.
          + 네트워킹: std::net::TcpStream은 대부분 구현되었지만, 다른 프로토콜은 아직 구현되지 않음.
          + Rust 표준 외의 생태계: 일부 크레이트는 소소한 조정으로 컴파일 및 사용 가능, Tokio와 같은 비동기 런타임에 의존하는 크레이트는 현재 컴파일되지 않음.

어떻게 Motūrus OS를 빌드/실행할 수 있나?

     * docs/build.md 문서를 참조.

감사의 말

     * Rust로 OS를 작성하는 블로그 시리즈를 작성한 Philipp Oppermann에게 큰 감사를 표함. 많은 사람들이 이 분야에서 실험하도록 영감을 주었음.

    GN⁺의 의견

     * 혁신적인 접근: Motūrus OS는 가상화된 환경에 특화된 새로운 운영 체제로, 리눅스의 복잡성과 비효율성을 해결하고자 함.
     * Rust 언어의 채택: Rust는 메모리 안전성과 성능을 중시하는 언어로, Motūrus OS의 안전성과 효율성에 기여할 것임.
     * 개발자 커뮤니티에 대한 기여: 이 프로젝트는 운영 체제 개발에 관심 있는 개발자들에게 새로운 가능성을 탐색하고, 기존의 한계를 넘어서는 데 도움이 될 것임.

   writing an os in rust 블로그 저도 보고있지만 벌써부터 움직임이 있군요!
   좋은 글인거같습니다

        Hacker News 의견

     * 프로젝트 개발자/저자의 의견:
          + 프로젝트에 대한 관심과 토론에 감사함.
          + 장기적 생존 가능성과 지원, 컴파일러 및 바이너리 호환성에 대한 우려가 있음.
          + 커뮤니티 없이는 프로젝트가 성공할 수 없으나, Motor OS와 같은 프로젝트의 잠재적 이점이 결국 널리 사용되는 새로운 운영 체제로 이어질 것이라고 믿음.
          + 가상 머신 내부(때로는 외부)에서의 리눅스 문제점과 리눅스 개발자들이 이를 해결하는 데 충분히 집중하지 않는다고 지적함.
          + 컴파일러 불안정성과 바이너리 호환성에 대한 우려에 대해 이해하지 못하며, 최신 리눅스 커널은 다양한 GCC 또는 LLVM 툴체인으로 컴파일 가능하고, 오래된 바이너리도 문제없이 실행됨을 언급함.
          + 추가 질문에 답변할 준비가 되어 있음을 밝힘.
     * ""Rust-first"" 접근 방식에 대한 설명:
          + ""Rust-first""는 마이크로 커널과 드라이버가 Rust로 구현될 뿐만 아니라, 사용자 공간 프로그램도 현재는 Rust로만 작성될 수 있음을 의미함.
          + 기술적으로 C 등 다른 언어로 Motor OS용 앱을 작성하기 위해 Rust 기반 ABI와 제공된 Rust 툴체인을 역공학할 수 있으나, 이는 일정한 작업이 필요함.
          + 표준 Rust 프로그램은 표준 Rust 라이브러리를 사용하고 FFI 없이 컴파일 및 실행 가능함을 설명함.
     * 작은 커널이 현대 컴퓨터에서 200ms가 걸리는 이유에 대한 궁금증:
          + 메모리 페이지의 메타데이터 초기화, 파일 시스템 마운트, init 프로세스 시작 등이 필요하지만, 이 모든 것이 몇 마이크로초 내에 이루어져야 한다고 생각함.
          + 호스트가 리소스를 준비하는 데 시간이 걸리는 것인지, 예를 들어 QEMU와 KVM에서 느린 부분이 있는지 의문을 제기함.
     * Rust로 작성된 커널에서 비동기 첫 번째 커널을 보고 싶어하는 의견:
          + 비동기 첫 번째 커널이 특별히 어렵거나 가치를 보지 못하는 것인지, 아니면 단순히 시도하지 않는 것인지에 대한 의문을 표함.
          + Phil Oppermann의 Rust로 만든 OS 시리즈를 따라가며 이것이 가능하다는 것을 알고 있으나, 최근의 Rust 기반 OS들은 이를 시도하지 않는 것 같음을 언급함.
     * 리눅스 경쟁에 대한 리눅스 토르발스의 과거 발언을 상기시키는 의견:
          + 토르발스가 경쟁에 대한 두려움을 묻는 질문에 대해, 자신은 디바이스 드라이버 작성을 좋아하며, 이를 좋아하는 젊고 열정적인 사람이 나타나기 전까지는 경쟁을 두려워하지 않는다고 답한 것을 회상함.
     * Motor OS와 같은 프로젝트에 대한 흥미와 개발 지속을 바라는 의견:
          + Motor OS와 같은 프로젝트가 많이 실패하여 더 이상 흥분하기 어려움을 표현함.
          + 클라우드와 같은 특정 용도로 리눅스를 대체하는 것은 매우 어려운 일임을 언급함.
     * 리눅스의 복잡성으로 인해 Docker, Nix OS, ""서버리스"" 등이 존재한다는 의견:
          + Docker와 NixOS는 사용자 공간의 패키지 관리 문제로 인해, 서버리스는 비즈니스가 수요에 따라 컴퓨팅을 지불하고자 함으로 인해 존재함을 설명함.
     * 새로운 기술에 대한 초기 회의적인 태도를 가졌으나, 다시 생각해보니 불필요한 계층을 제거함으로써 얻을 수 있는 효율성과 보안 향상이 매력적이라는 의견:
          + 새로운 기술에 대한 건강한 접근 방식을 갖고 있으며, 효율성과 보안 향상이 매력적임을 인정함.
     * Motor OS가 Docker 등과 경쟁하는 것처럼 보인다는 의견:
          + Motor OS가 Docker와 같은 기술보다 리눅스와 직접 경쟁하기보다는 이들과 더 직접적으로 경쟁하는 것처럼 보임을 지적함.
          + Motor OS를 선택해야 하는 이유, 즉 Docker 등 대신 Motor OS를 사용해야 하는 이유를 ""왜?"" 섹션에서 다루고 싶음을 표현함.
     * 새로운 운영 체제를 시작하는 것은 어렵지 않지만, 다음 5십 년 동안 그 운영 체제를 지원하는 것은 매우 어렵다는 의견:
          + 새로운 운영 체제를 작성하는 것은 어렵지 않지만, 장기간에 걸쳐 지원하는 것은 매우 어려운 일임을 강조함.

   ""작동하지 않는 기능들"" 이 항목이 아주 가관이군요. 장난감 프로젝트
"
"https://news.hada.io/topic?id=12848","진행 중인 Sourcehut 장애에 대한 성명","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       진행 중인 Sourcehut 장애에 대한 성명

현재 서비스 가용성

     * sr.ht: 오프라인
     * meta.sr.ht: 오프라인
     * git.sr.ht: 오프라인
     * hg.sr.ht: 오프라인
     * todo.sr.ht: 오프라인
     * lists.sr.ht: 오프라인
     * paste.sr.ht: 오프라인
     * man.sr.ht: 오프라인
     * pages.sr.ht: 오프라인
     * builds.sr.ht: 오프라인
     * chat.sr.ht: 오프라인
     * 객체 저장소는 현재 사용 불가능하며, 이로 인해 git과 hg 태그에 첨부된 릴리스도 현재 사용할 수 없음.
     * hg.sr.ht는 알려진 성능 문제와 hg clone과 관련된 문제가 있으며, 커뮤니티에서 유지 관리되기 때문에 커뮤니티 유지 관리자가 참여할 때까지 복구 작업이 보류 중임.

업데이트 2024-01-13 14:17 UTC

     * 새로운 트랜짓 제공업체를 찾아야 하며, 문제를 완화하기 위해 제공업체와 협상 중임.
     * 공학 작업을 곧 시작할 예정이며, 추가 업데이트가 있으면 알림.

업데이트 2024-01-13 13:00 UTC

     * 새로운 트랜짓 제공업체가 DDoS 공격이 새로운 네트워크로 따라왔다고 통보함.
     * 제공업체가 완화 조치를 배치했으며, 서비스 중단은 예상하지 않음.

업데이트 2024-01-13 12:40 UTC

     * lists와 todo에 대한 메일 서비스가 복구됨.
     * 중단 기간 동안 대기 중이던 이메일은 이제 처리를 재개할 것이며, 이메일이 손실된 것으로는 믿지 않음.

업데이트 2024-01-13 11:42 UTC

     * pages.sr.ht를 읽기 전용으로 서비스에 투입함.
     * 모든 사용자 정의 도메인이 곧 작동해야 하며, apex 레코드를 사용하는 사용자 정의 도메인은 제외됨.
     * 영향을 받는 사용자는 수동 개입이 필요함.

업데이트 2024-01-13 11:00 UTC

     * 대부분의 서비스에 대해 읽기/쓰기 접근을 활성화함.
     * hg는 여전히 읽기 전용이며, todo와 lists는 웹에서 요청을 처리하지만 메일 시스템은 아직 진행 중임.

업데이트 2024-01-13 09:26 UTC

     * hg.sr.ht를 읽기 전용 모드로 올림.
     * 오늘 사용 가능한 서비스에 대해 읽기/쓰기를 활성화하기 위해 작업 중임.
     * git.sr.hg의 백업에서 차이를 가져오는 작업을 마쳤으며, hg의 차이도 곧 마무리될 예정임.

업데이트 2024-01-12 20:49 UTC

     * 오늘의 목표에 대한 마무리 작업을 진행 중임.
     * 7개 주요 서비스를 읽기 전용 모드로 운영 중임.
     * git clone/fetch와 관련된 이전 문제도 해결됨.

업데이트 2024-01-12 16:38 UTC

     * todo와 lists를 읽기 전용 모드로 온라인에 올림.

업데이트 2024-01-12 16:13 UTC

     * 일부 서비스를 온라인으로 가져오기 시작함.
     * meta와 git이 DNS 전파에 따라 사용 가능해질 예정임.

SourceHut이란 무엇인가?

     * SourceHut은 Drew가 창립한 회사로, 현재 중단된 상태임.
     * 신뢰성을 자랑하는 SourceHut은 이번에 가장 심각하고 장기적인 중단을 겪고 있음.
     * SourceHut 팀은 문제를 해결하고 서비스를 가능한 빨리 복구하기 위해 모든 노력을 기울이고 있음.

무슨 일이 일어나고 있는가?

     * 1월 10일 06:30 UTC에 SourceHut을 대상으로 한 분산 서비스 거부(DDoS) 공격이 시작됨.
     * SourceHut은 일반적인 DDoS 공격을 처리할 수 있지만, 이번 공격은 그 규모가 커서 스스로 완화할 수 있는 범위를 넘어섬.
     * 상위 네트워크 제공업체는 SourceHut을 완전히 차단하여 인터넷과 SourceHut 스태프 모두 서버에 접근할 수 없게 함.
     * PHL 데이터센터가 영향을 받았으며, SourceHut은 PHL 공급업체로부터 콜로케이션 공간을 임대하고 있음.
     * PHL 공급업체가 두 번의 인수를 겪으면서 SourceHut의 계정이 티켓 시스템 이전 중에 누락되었고, 이로 인해 초기에는 공급업체와의 연락이 지연됨.
     * SourceHut의 가용성은 1월 10일 저녁에 부분적으로 복구되었지만, 1월 11일 초기에 DDoS가 확대되면서 공급업체는 다시 차단을 강제함.

우리가 취하고 있는 조치는?

     * SourceHut은 세 개의 사이트(PHL, FRE, AMS)를 유지하고 있으며, PHL은 주요 사이트로 현재 오프라인 상태임.
     * PHL에 전혀 접근할 수 없게 되자, AMS에서 SourceHut의 병렬 설치를 위해 백업에서 복구를 시작함.
     * 사용자 데이터 손실에 대한 전망은 좋으며, 백업은 정기적으로 작동하고 테스트되고 있음.
     * AMS에서 SourceHut 서비스를 복구하고 있으며, 메타, todo, lists, paste, 프로젝트 허브가 운영 환경 데이터에 대해 완전히 작동하고 있음.
     * git.sr.ht, hg.sr.ht, pages.sr.ht, chat.sr.ht, man.sr.ht, builds.sr.ht 등의 서비스 복구에 우선순위를 두고 작업 중임.
     * 커뮤니티에 대한 읽기 전용 접근을 가능한 빨리 활성화한 다음, 전체 읽기/쓰기 접근을 복구하는 것이 목표임.

어떻게 도울 수 있나?

     * 가장 필요한 것은 인내와 이해임.
     * 이러한 공격을 완화하는 것은 마라톤과 같으며, 스태프를 과로시키지 않도록 주의해야 함.
     * Mastodon과 Libera Chat의 #sr.ht IRC 채널에서 업데이트와 지지의 말을 공유할 수 있음.

   GN⁺의 의견:
    1. SourceHut의 현재 상황은 오픈 소스 커뮤니티와 개발자들에게 중요한 사건으로, 신뢰할 수 있는 서비스의 취약성과 긴급 상황에 대한 대응 계획의 중요성을 보여줌.
    2. 이 사건은 DDoS 공격의 심각성과 대규모 사이버 공격에 대비한 기업의 필요성을 강조함.
    3. SourceHut 팀의 투명한 커뮤니케이션과 문제 해결을 위한 노력은 사용자들에게 신뢰를 주며, 커뮤니티의 지지와 인내가 중요한 역할을 함을 보여줌.

        Hacker News 의견

     * 서비스가 인도 경찰로부터 특정 사용자의 데이터를 요청받은 직후 DDoS 공격을 받았음. 인도 경찰은 테러와 관련이 있다고 주장했으나, 서비스 측은 법적 절차가 필요하다고 설명함. 몇 시간 후 서비스가 다운되었고, 약 12시간 지속됨. 몸값 요구는 없었으며, 가능한 세 가지 원인을 생각함: 인도 경찰/정부, 원래 사용자, 완전한 우연.
     * [대규모 인기 있는 공개 코드 저장소]에서 첫 주에 근무할 때, [국가 차원의 행위자]에 의해 공격을 받았음. 이는 SourceHut과 Codeberg와 같은 대안적인 저장소가 주목을 받기 시작했다는 긍정적인 신호로 해석됨.
     * Hacker News가 1월 10일에 다운된 이유를 알게 됨. 이는 SourceHut을 대상으로 한 DDoS 공격을 완화하기 위한 Cogent의 과도한 조치 때문이었음.
     * 팀이 이러한 상황을 처리해야 하는 것에 대해 안타까움을 표현하면서도, 고객과의 소통 방식에 대해 칭찬함.
     * sr.ht 직원들이 AMS 마이그레이션을 잘 처리하기를 바라며, git이 분산되어 있어서 지난 며칠간 새로운 소프트웨어 릴리스를 제외하고는 모든 작업을 할 수 있었음.
     * CloudFlare에 문의했을 때, 재정적으로 감당할 수 없는 금액을 제시받았으나, 공격자에게 계획을 알릴 위험 없이 공개할 수 있는 다른 해결책을 모색 중임.
     * Godot, codeberg, sourcehut 등 오픈 소스 관련 웹사이트들이 공격 대상이 되고 있는 것 같음.
     * SourceHut의 창립자 Drew는 서비스 다운에 대해 사과하며, 신뢰성을 자랑하는 SourceHut로서는 가장 심각하고 긴 시간 동안의 중단임을 인정함. 문제 해결을 위해 모든 직원이 최선을 다하고 있음.
     * DDoS 공격의 동기에 대한 궁금증 제기. 범죄 기소의 위험이 있는데도 불구하고 공격이 이루어지는 이유는 무엇인지, 이 경우에는 협박이나 경쟁사의 방해가 그리 설득력 있어 보이지 않음.
     * ""만약 주 데이터센터가 내일 사라진다면?""이라는 질문을 스스로에게 던지며, 이에 대한 심각한 계획을 세우고 있음. 예상치 못한 상황에 대비해 다른 데이터 센터에 복제본을 두고 동기화할 것을 제안함.
"
"https://news.hada.io/topic?id=12775","www.google.com 접속 시 페이지가 비어있는 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    www.google.com 접속 시 페이지가 비어있는 현상

www.google.com - 접속 시 페이지가 비어 있음

     * 문제 보고: Firefox Mobile 121.0 버전과 Android 13 운영 체제에서 www.google.com 페이지가 제대로 로딩되지 않음.
     * 문제 유형: 사이트 사용 불가능.
     * 재현 단계: 페이지가 비어 있음.

문제 해결 과정

     * sv-calin의 코멘트: Firefox Release와 Nightly 모두에서 문제 재현됨. ETP를 비활성화하면 쿠키 배너가 나타나지만 수락해도 페이지가 여전히 비어 있음. Chrome에서는 문제가 재현되지 않음.
     * 문제 진단 필요로 변경됨.

서버 측 문제

     * denschub의 코멘트: 서버 측 UA 스니핑 문제로 확인됨. Firefox Android UA로 비어 있는 HTML 문서만 받음. UA 문자열 버전이 65 이상일 때 영향을 받으며, 64 이하 버전에서는 작동함.

문제 해결 상황

     * denschub의 추가 코멘트: Google에서 수정을 배포 중임. 대부분의 사용자에게 문제가 해결된 것으로 보임. 문제가 해결되지 않은 사용자는 새로운 버그로 보고할 것을 권장함.

   GN⁺의 의견:
     * 이 기사는 웹 브라우저와 웹사이트 간의 호환성 문제를 다루고 있으며, 특히 인기 있는 웹사이트인 Google에 대한 문제이기 때문에 많은 사용자에게 영향을 미칠 수 있음.
     * 사용자 에이전트(User-Agent) 스니핑이 웹 개발에서 여전히 중요한 이슈임을 보여줌. 이는 브라우저가 웹사이트에 자신을 어떻게 식별하는지에 따라 사이트의 동작이 달라질 수 있음을 의미함.
     * 이 문제는 웹 표준과 브라우저 간 호환성의 중요성을 강조함. 개발자들은 다양한 브라우저와 운영 체제에서의 테스트를 통해 이러한 문제를 예방할 수 있음.

        Hacker News 의견

     * 서버 측 UA 스니핑 오류
          + 문제는 서버 측에서 사용자 에이전트(User-Agent, UA)를 잘못 감지하는 것으로, Firefox Android UA를 사용할 경우 빈 HTML 문서만 받게 됨.
          + curl 명령어를 사용하여 재현 가능하며, 버전 65 이상의 모든 UA 문자열에 영향을 미침. 버전 64 이하는 정상 작동.
     * Google 검색 팀의 사과와 수정
          + Google 검색 팀에서 일하는 한 직원이 문제를 인정하고 사과함. 이미 문제가 해결되었으며, Google의 검색 상태 대시보드에 게시됨.
     * 스크린샷 칭찬
          + 문제 상황을 보여주는 스크린샷에 대한 긍정적인 평가.
     * 제출 가이드라인 강조
          + 원래의 제목을 사용하고, 기사에 대한 중요한 점을 말하고 싶다면 댓글로 의견을 추가하라는 해커뉴스의 지침을 상기시킴.
     * Google의 사고 추적
          + Google이 해당 사고를 추적하고 있으며, 이와 관련된 정보를 공유함. 작성자는 Google에서 일하지만 해당 문제와 관련이 없음을 밝힘.
     * Google과 Mozilla의 파트너십
          + Google이 Mozilla와 협력하여 완전히 광고 없는 검색 경험을 제공한다는 내용.
     * Google의 고의적인 방해 의혹
          + 과거 Mozilla의 전직 임원이 Google이 일부러 문제를 일으켜 사용자들이 Chrome으로 전환하도록 유도했다는 주장을 한 블로그 포스트를 상기시킴.
     * UA 스니핑의 적법성에 대한 의문
          + UA 스니핑이 기능 감지에 비해 정당한 사용 사례가 있는지, 검색 엔진이 어떤 최첨단 기능을 사용하길래 모든 브라우저에서 작동하지 않는지에 대한 의문 제기.
     * Google에 대한 벌금 제안
          + Google의 크기와 시장 점유율을 고려할 때, 경쟁사의 웹사이트 접근을 방해하거나 (예: Chrome 업데이트가 DuckDuckGo 접근을 방해함) 자신들의 웹사이트가 경쟁사 브라우저에서 작동하지 않을 때 벌금을 부과해야 한다는 의견. 자동화된 검사를 수행할 충분한 자원이 있기 때문에, 이러한 문제를 무능이 아닌 악의로 보기 어렵지 않다는 주장.
"
"https://news.hada.io/topic?id=12845","Marimo - Python용 오픈소스 Reactive Notebook  ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Marimo - Python용 오픈소스 Reactive Notebook

     * 데이터와 모델을 가지고 빠르게 시험 가능한 노트북
     * 셀단위 실행, 자동 계산 및 업데이트
     * 감춰진 상태없이 항상 재실행 가능
     * Python 파일로 저장되어 Git-Friendly
     * 노트북을 파이프라인으로 만들거나 인터랙티브 웹앱으로 배포 가능

반응형 프로그래밍 환경

     * marimo는 노트북 코드, 출력, 프로그램 상태의 일관성을 보장함.
     * 셀을 실행하면 marimo가 자동으로 해당 변수를 참조하는 셀을 업데이트하여 수동으로 셀을 재실행하는 오류를 방지함.
     * 셀을 삭제하면 marimo가 프로그램 메모리에서 해당 변수를 제거하여 숨겨진 상태를 제거함.
     * 노트북은 변수 참조를 기반으로 한 결정적인 순서로 실행되어 페이지상의 셀 위치에 의존하지 않음.
     * 슬라이더, 드롭다운, 데이터프레임 변환기와 같은 UI 요소와 상호작용하면 해당 값을 사용하는 셀이 자동으로 최신 값으로 재실행됨.
     * marimo는 코드를 정적으로 분석하여 실행해야 하는 셀만 실행하여 성능을 향상시킴.
     * marimo에는 GitHub Copilot, Black 코드 포매팅, HTML 내보내기, 빠른 코드 완성, VS Code 확장 프로그램 등 다양한 편의 기능이 포함됨.

빠른 시작

     * 설치: 터미널에서 pip install marimo 또는 conda install -c conda-forge marimo를 실행하여 marimo를 설치함.
     * 노트북 생성: marimo editor로 빈 노트북을 생성하고 marimo edit your_notebook.py로 특정 이름의 노트북을 편집함.
     * 앱 실행: marimo run your_notebook.py를 실행하여 웹 앱으로 노트북을 실행함. 이 앱은 marimo 클라우드에 배포됨.
     * 스크립트로 실행: python your_notebook.py를 실행하여 marimo 노트북을 스크립트로 실행함.
     * Jupyter 노트북 자동 변환: CLI를 사용하여 Jupyter 노트북을 marimo 노트북으로 자동 변환함.
     * 튜토리얼: marimo tutorial --help를 실행하여 모든 튜토리얼을 나열함.

더 알아보기

     * marimo는 초보자도 쉽게 시작할 수 있으며, 전문 사용자를 위한 다양한 기능을 제공함.
     * 예를 들어, marimo에서 만든 임베딩 시각화 도구(비디오)를 확인할 수 있음.
     * 문서, examples/ 폴더, 갤러리를 통해 더 많은 정보를 얻을 수 있음.

영감

     * marimo는 재현 가능하고, 상호작용이 가능하며, 공유할 수 있는 Python 프로그램으로서 Python 노트북을 재창조함.
     * 사용하는 도구가 사고 방식을 형성한다는 믿음 하에, Python 커뮤니티에 더 나은 프로그래밍 환경을 제공하기를 희망함.
     * Pluto.jl, ObservableHQ, Bret Victor의 에세이 등 많은 곳과 프로젝트에서 영감을 받음.
     * marimo는 IPyflow, streamlit, TensorFlow, PyTorch, JAX, React 등의 기능적, 선언적, 반응형 프로그래밍 아이디어가 다양한 도구를 개선하는 더 큰 반응형 데이터플로우 프로그래밍 운동의 일부임.

GN⁺의 의견

     * marimo는 기존의 Jupyter 노트북과 같은 도구의 한계를 극복하고자 하는 혁신적인 반응형 Python 노트북으로, 데이터와 모델 실험, 노트북의 정확성에 대한 확신, 파이프라인이나 인터랙티브 웹 앱으로의 노트북 상용화를 가능하게 함.
     * 이 도구는 코드의 일관성과 재현성을 중시하며, 사용자 인터페이스 요소와의 상호작용을 간소화하여 프로그래밍 경험을 개선함.
     * marimo는 데이터 과학, 연구, 교육 분야에서 협업과 공유를 용이하게 하며, 커뮤니티 구축을 통해 사용자 간의 상호작용과 지식 공유를 촉진하는 플랫폼을 제공함.

        Hacker News 의견

     * Jupyter와 Observable 노트북 사용자로서 Observable의 셀 반응성 부족을 느꼈는데, 이 문제를 잘 해결했다고 생각함. Marimo 파일 포맷이 파이썬으로 되어 있어 좋고, Apache 2 라이선스도 마음에 듦. GitHub Copilot 기능 발견에 감탄함.
          + Jupyter와 Observable 노트북 사용자가 셀 반응성 문제를 잘 해결한 Marimo에 대해 긍정적인 반응을 보이며, 파일 포맷이 파이썬이라는 점과 Apache 2 라이선스, GitHub Copilot 기능에 대해 높이 평가함.
     * Jupyter Notebook을 사용하는 협업자와의 작업에서 환경 설정과 Jupyter의 숨겨진 상태가 문제였음. 이 프로젝트는 두 번째 문제를 해결하려고 하지만 유연성을 희생함. 재현성에 중점을 둔다면 이는 타협점이 될 수 있음. requirements.txt는 다른 문제에 대한 표준 해결책이지만, 사용하기 번거로움.
          + Jupyter Notebook의 환경 설정과 숨겨진 상태 문제를 지적하며, 이 프로젝트가 후자를 해결하려 하지만 유연성이 떨어질 수 있다고 언급함. requirements.txt의 사용이 번거롭다고 느끼며, 더 나은 해결책을 희망함.
     * 마침내 누군가 이 일을 하고 있어서 기쁨. Vscode 확장 기능이 있지만, Vscode의 기존 노트북 인터페이스 대신 전체 브라우저 뷰를 여는 점이 아쉬움. 패키지 관리와 프로덕션 코드 배포에 대한 생각을 공유함.
          + Vscode 확장 기능에 대한 기대와 아쉬움을 표현하며, 패키지 관리와 코드 배포의 중요성을 강조함. 프로젝트에 대한 기여 의사를 밝힘.
     * 플랫폼에 대한 몇 가지 질문이 있음: 인터랙티브 위젯, Jupyter 생태계와의 의존성 및 상호작용에 대한 설명 요청.
          + 플랫폼의 인터랙티브 위젯 지원, Jupyter 생태계와의 관계에 대해 궁금해하며, 자신의 위젯을 플랫폼에 포팅하는 데 관심을 표함.
     * Jupytext 확장 기능이 과소평가되었다고 생각함. Jupyter의 git 상호작용 문제와 라이브러리 파일 작성을 저해하는 프로그래밍 관행 문제를 해결함. 새 프로젝트의 반응형 업데이트가 초보자나 복잡한 프로젝트에 유용할 것으로 기대함.
          + Jupytext 확장 기능의 유용성을 강조하며, 새 프로젝트의 반응형 업데이트가 프로그래밍 초보자나 복잡한 프로젝트에 도움이 될 것이라고 기대함.
     * 의존성 목록이 짧고, tornado 외에 다른 의존성이 많은 추가 의존성을 끌어들이지 않음. 매우 유용하고 멋진 프로젝트로 보임.
          + 프로젝트의 의존성 목록이 간결하며 tornado를 제외하고는 큰 부담이 없다고 평가함. 프로젝트의 유용성과 멋짐을 칭찬함.
     * Marimo가 훌륭하다고 느낌. markdown에서 mermaid.js 지원을 추가하는 것에 대한 고려가 있는지 궁금함.
          + Marimo에 대한 긍정적인 반응을 보이며, markdown에서 mermaid.js 지원 추가에 대한 가능성을 문의함.
     * Marimo의 창시자인 Akshay와 Myles를 팬이라고 밝히며, Jupyter에 대한 경쟁자가 생겨 과학 도구 생태계에 좋은 영향을 줄 것이라고 기대함.
          + Marimo와 그 창시자들을 지지하며, 이러한 경쟁이 과학 도구 생태계에 긍정적인 변화를 가져올 것이라고 기대함.
     * Quarto가 이 스레드에서 언급된 Jupyter의 많은 문제를 해결한다고 생각함. NIH에서도 Quarto 사용을 권장하고 교육을 제공함.
          + Quarto가 Jupyter의 여러 문제를 해결할 수 있다고 언급하며, NIH에서 Quarto 사용을 권장하고 교육을 제공한다는 사실을 공유함.
     * 동일한 변수를 여러 번 정의하는 것은 오류임. 이유는 명백함. 하지만 변수가 처음 쓰이는 셀에서만 사용된다면, 변수 이름 재사용이 가능해야 함.
          + 변수 재정의에 대한 오류를 지적하며, 특정 조건에서 변수 이름 재사용이 가능해야 한다는 의견을 제시함.
"
"https://news.hada.io/topic?id=12864","HN 질문: 답글에 코드 블록이 포함되어 있을 때 Cloudflare가 HN 댓글을 차단하나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN 질문: 답글에 코드 블록이 포함되어 있을 때 Cloudflare가 HN 댓글을 차단하나요?

Cloudflare가 Netcat 사용에 대한 댓글 차단

     * 한 사용자가 Hacker News에 Netcat을 이용한 파일 전송에 대해 댓글을 달려고 했으나, Cloudflare에 의해 제출이 차단됨.
     * 사용자는 Hacker News에서 이런 일을 겪은 것이 처음이라고 언급함.
     * 다른 사용자들에게 이와 같은 상황을 경험한 적이 있는지 물어봄.

  GN⁺의 의견

     * 이 사례는 웹 보안 서비스가 어떻게 사용자의 정상적인 활동을 차단할 수 있는지 보여줌.
     * Cloudflare 같은 보안 시스템은 때때로 오진을 일으켜 유용한 정보 공유를 방해할 수 있음.
     * 이 글은 온라인 커뮤니티에서 정보를 공유하려는 사용자들에게 보안 도구의 민감도가 어떻게 영향을 미칠 수 있는지에 대한 인식을 높이는 데 도움이 될 수 있음.

        Hacker News 의견

     * 첫 번째 코드 라인은 정상 작동하지만, 두 번째 코드 라인은 작동하지 않음. nc 명령어 옆에 IPv4 주소가 있으면 문제가 발생하는 것으로 보임.
     * Cloudflare의 웹 애플리케이션 방화벽(WAF)은 정규 표현식을 사용하여 매칭하며, 맥락을 정확히 파악하지 못할 때가 있음. Cloudflare는 특정 사이트에 안전한 내용이 무엇인지 알 수 없어 보수적으로 작동함. 기술적인 내용을 다루는 사이트는 소수이기 때문에, 대부분의 사이트는 잘못된 긍정(false positives)을 잘못된 부정(false negatives)보다 용인함. 사이트 소유자는 WAF를 설정할 수 있지만, 구체적인 규칙 코드를 볼 수 없어서 모든 설정을 그대로 두는 경우가 많음.
     * Cloudflare 네트워크에서는 netcat(리버스 쉘에 사용되는 경향이 있음)이나 SQL(주입 공격에 사용될 수 있음)을 포함한 코드가 종종 차단됨.
     * 해커뉴스(HN)가 Cloudflare를 사용하는 것에 대해 놀람. 일반적으로 Cloudflare를 사용하는 사이트는 GNU Linux를 실행하는 모바일 기기에서 접근이 차단되는 경우가 많지만, HN에서는 그런 문제가 발생하지 않음.
     * 다른 공백 문자를 사용하여 Cloudflare의 필터를 우회할 수 있음. 예를 들어, nc와 IP 주소 사이에 수평 탭을 사용하는 방법이 있음.
     * 특정 문자열(예: ../etc/passwd)을 포함한 댓글을 게시하려고 할 때 Cloudflare에 의해 차단됨.
     * 자바스크립트가 비활성화된 브라우저에서 Imgur를 사용하려 할 때 발생하는 문제에 대해, 자바스크립트 없이도 이미지 URL을 직접 사용하는 것이 해결책이 될 수 있음.
     * 해커뉴스의 모더레이터에게 빠른 답변을 원한다면 이메일(hn@ycombinator.com)을 보내는 것이 좋음.
     * Cloudflare 대시보드의 보고서는 차단을 성공으로 표시하지만, 실제 공격과 잘못된 긍정을 구분하는 데 도움이 되지 않음. 잘못된 긍정이 애플리케이션에 부정적인 영향을 미칠 수도 있음.
     * Cloudflare가 인터넷 접근을 통제하고 있으며, 일반적인 설정을 사용하는 사용자도 접근이 차단되는 경우가 있음. 인터넷은 Cloudflare의 기준에 맞는 사람들에게만 제공될 것으로 보임.
"
"https://news.hada.io/topic?id=12869","Show GN: WebViewBridge - 리액트 네이티브 웹뷰와 웹 통합 인터페이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: WebViewBridge - 리액트 네이티브 웹뷰와 웹 통합 인터페이스

   리액트 네이티브 웹뷰와 웹의 통신하는 인터페이스를 구성해줍니다.
   웹뷰 안에 있는 웹에서 네이티브 메소드를 호출하고 반환 받을 수 있습니다.

   tRPC에서 영감을 얻었습니다.
     * Type-Safe
     * 하위호환성
"
"https://news.hada.io/topic?id=12784","아마존의 Twitch, 직원 500명 감축 예정으로 전체 인력의 약 35%에 해당","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             아마존의 Twitch, 직원 500명 감축 예정으로 전체 인력의 약 35%에 해당

Bloomberg Daybreak 중동 & 아프리카

     * Bloomberg Daybreak 중동 & 아프리카는 세계에서 가장 빠르게 성장하는 지역 중 하나에 대한 일일 조명을 제공함.
     * 두바이에서 생방송으로, 최신 글로벌 시장과 분석을 전달하며, 중동 및 아프리카(MEA)에 특별한 초점을 맞춘 뉴스 메이킹 인터뷰를 제공함.
     * 걸프 지역으로 출근하면서, 홍콩에서 점심을 즐기거나, 런던 또는 요하네스버그에서 하루를 시작하는 동안 이 모든 정보를 제공함.


    GN⁺의 의견

     * Bloomberg Daybreak 중동 & 아프리카는 중동 및 아프리카 지역의 경제와 시장 동향에 대한 심층적인 분석과 정보를 실시간으로 제공하는 프로그램으로, 해당 지역에 관심 있는 투자자나 비즈니스 전문가들에게 매우 유용함.
     * 이 프로그램은 글로벌 시장의 흐름을 이해하고자 하는 사람들에게 중요한 지역적 특성과 기회를 강조하여, 보다 전략적인 의사결정을 가능하게 함.
     * 두바이에서 진행되는 생방송이라는 점은 중동 시장에 대한 신속하고 정확한 정보를 제공하는 데 큰 장점으로 작용하며, 다양한 시간대의 시청자들을 고려한 방송 시간은 전 세계적인 접근성을 높임.

        Hacker News 의견

     * TikTok의 성장과 Twitch의 수익성 문제
          + TikTok은 게이머에게 집중하지 않지만, 사용자의 주의는 한정되어 있음.
          + TikTok은 이미 Twitch를 수익 면에서 앞질렀고, 그 격차는 더욱 벌어지고 있음.
          + TikTok과 YouTube의 성공으로 Twitch는 최대한 세 번째 자리에 머무르는 상황.
          + Twitch가 아직 수익성이 없다는 사실에 놀람. 라이브 비디오를 많이 다루는 서비스로서 수익 모델을 찾아야 함.
     * Twitch의 수익 창출 능력에 대한 의문
          + Twitch가 외부에서 보기에는 많은 수익을 창출하는 것처럼 보임.
          + 구독자로부터 큰 몫을 가져가고 광고도 많음.
          + 시청자 수 증가세가 좋고, 제품도 잘 만들어진 것 같음.
          + 라이브 비디오 서비스 제공 비용이 높지만, 이것이 비용의 가장 큰 부분인지 궁금함.
     * 연구개발비용 공제 제한(Section 174)이 해고의 원인인가?
          + Section 174는 기업이 연구개발(R&D) 비용을 경비로 공제하는 것을 더 이상 허용하지 않음.
     * 광고 차단기의 중요성
          + Twitch를 일상적으로 사용하던 한 사용자는 광고 차단기가 작동을 멈추자 사이트 사용을 거의 중단함.
          + 라이브 콘텐츠에서의 비디오 중단은 채널 전환을 자주 하는 사용자에게 매우 불쾌한 경험.
     * 기술 분야의 대규모 해고
          + Unity가 25%의 직원을 해고하고, 다른 회사는 200명의 직원을 전부 해고함.
          + 기술 분야에서 갑작스러운 해고의 원인은 무엇인가? 연말 수익이 좋지 않았나? 새로운 세금 법안 때문인가?
     * 비디오 게임 관련 SaaS 분야의 불안감
          + Unity와 Twitch가 연초에 대규모 해고를 발표함으로써, 비디오 게임 관련 SaaS 분야에 종사하는 사람들이 불안해짐.
     * 해고로 인한 직원들의 업무 부담 증가
          + 해고로 인해 남은 직원들의 업무 부담이 50% 증가할 것으로 예상됨.
     * 기술 직업 시장의 회복에 대한 회의적 전망
          + 올해 이미 수천 명의 기술 분야 직원들이 다시 일자리를 찾아야 하는 상황.
          + 2023년에 기술 직업 시장은 단 700개의 일자리만 증가함.
     * 해고가 실제 스트리머에게 미치는 영향
          + Twitch와 같은 회사에서의 해고가 실제 스트리머에게 어떤 영향을 미치는지 궁금함.
          + 해고가 스트리머의 수익 분배 감소와 같은 조치를 동반하는지 질문.
"
