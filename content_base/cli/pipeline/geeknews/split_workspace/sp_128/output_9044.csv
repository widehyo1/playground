"https://news.hada.io/topic?id=17789","Seer: Linux용 GDB를 위한 GUI 프론트 엔드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Seer: Linux용 GDB를 위한 GUI 프론트 엔드

     * Introduction
          + Seer는 Linux에서 gdb를 위한 GUI 프론트엔드로, 사용하기 쉽고 시각적으로 만족스러운 인터페이스 제공을 목표로 함.
          + 프로젝트는 활발히 진행 중이며, 버그나 원하는 기능은 이메일 또는 GitHub 프로젝트 페이지를 통해 보고 가능.
     * Installation
          + Seer는 패키지 관리자나 소스에서 설치 가능.
          + Requirements
               o Linux, C++17, gdb (mi 인터프리터 포함), CMake (3.1.0 이상), QT6 필요.
               o QT6 ""devel"" 패키지 설치 필요.
               o QT5는 더 이상 지원되지 않으며, 2.3 버전이 마지막으로 지원하는 소스 트리임.
          + Install from package
               o Pamac (Manjaro)와 zypper (openSUSE Tumbleweed)에서 설치 가능.
     * NEWS
          + Seer의 GitHub Wiki 페이지에서 최신 정보를 확인 가능.
          + v1.17은 마지막 Qt5 릴리스이며, 다음 릴리스는 Qt6 기반의 v2.0이 될 예정.
     * GUI overview
          + Main View
               o 소스/함수/타입/변수/라이브러리 목록 제공.
               o 변수 및 레지스터 정보 표시.
               o 코드 매니저에서 소스 파일 열람 및 검색 가능.
               o 중단점, 감시점, 캐치포인트, 프린트포인트 관리 가능.
               o 스택 프레임 및 스레드 정보 제공.
               o Gdb의 역방향 디버깅 모드 지원.
          + Open Dialog
               o 실행 파일을 열 때의 대화 상자 모습 설명.
          + Seer Console
               o 실행 파일의 모든 텍스트 출력은 Seer 콘솔로 이동.
          + Assembly View
               o 어셈블리 코드를 탭으로 표시 가능.
               o 새로운 기능으로, 피드백 및 기능 제안 가능.
          + Memory Visualizer
               o 메모리의 원시 내용을 시각화.
          + Array Visualizer
               o 배열의 내용을 X-Y 플롯으로 시각화.
          + Struct Visualizer
               o C/C++ 구조체나 클래스의 내용을 시각화.
          + Image Visualizer
               o 이미지로 된 원시 메모리 내용을 시각화.
     * Starting Seer
          + 명령줄에서 디버깅할 프로그램을 쉽게 시작할 수 있도록 설계됨.
          + 다양한 실행 방법은 GitHub Wiki에서 확인 가능.
     * Support/Contact
          + 버그나 기능 요청은 이메일 또는 GitHub 프로젝트 페이지를 통해 가능.

        Hacker News 의견

     * Godot와 Linux에서 사용해 본 결과, UI가 복잡하지만 기능은 있음. 변수 값을 확인하려고 할 때 오류가 발생하거나 아무 일도 일어나지 않음. 변수 더블클릭 시 현재 값과 타임스탬프가 패널에 추가됨. Gede가 가장 간단하고 직관적인 UI를 제공하며, 기능은 적지만 버그 없이 잘 작동함
     * GDB는 텍스트 사용자 인터페이스(TUI)를 내장하고 있으며, 사용하기 쉬움. 마우스 상호작용도 지원함
     * 여러 GDB 프론트엔드를 사용해 본 결과, TUI가 가장 좋음. 프로그램이 출력할 때 인터페이스가 깨질 수 있으므로 Ctrl + L로 다시 그릴 필요가 있음. 설정 파일에 layout src와 set confirm off를 추가함
     * Windows에서 Linux에 연결하거나 WSL을 사용할 경우, WinDBG/VisualStudio를 사용하여 Linux 프로세스를 원격 디버깅할 수 있음
     * Qt UI for GDB와 웹 기반 UI인 gdbgui가 존재함. 디버그 도구의 발전을 보는 것은 항상 좋음
     * DDD는 처음 봤을 때 마법 같았음. 여전히 유지보수되고 있음
     * Emacs 사용자에게는 GUD가 훌륭한 GDB 통합 기능을 제공함
     * C 또는 Ada의 버그를 조사할 때 가끔 GDB를 사용하지만, 주 활동은 아님. 따라서 복잡한 디버깅 환경을 설정하는 데 시간을 투자하지 않음. Emacs와 간단한 지침 노트를 사용함
     * 10년 전 Linux에서 C++ 프로그래밍할 때 Qt Creator를 사용했으며, 내장 디버거(GDB 프론트엔드)가 훌륭하게 작동했음. C++와 Qt를 위해 다른 것을 사용할 이유가 없음
"
"https://news.hada.io/topic?id=17747","GPS 불필요: 우리 앱의 지하철 위치 추적 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GPS 불필요: 우리 앱의 지하철 위치 추적 기능

        Hacker News 의견

     * 프랑스 회사 Snips가 기차가 역에 들어가거나 나갈 때 압력 센서를 사용하여 위치를 추적하는 방법을 설명한 블로그 게시물을 읽은 경험이 있음
          + 기차가 터널에 들어가거나 나갈 때 압력 변화로 인해 명확한 신호가 발생함
     * 런던 지하철의 소리를 녹음하는 프로젝트를 진행 중인 사용자
          + 북부선이 30미터 아래에서 지나가는 소리를 명확히 들을 수 있음
          + 고품질의 저주파 녹음을 얻는 것에 집착하게 됨
          + 실제 TfL 데이터와 소리를 연관시켜 각 터널의 소리 특성을 파악할 수 있을지 궁금해함
          + 유지보수 차량의 소리를 포착할 수 있을지에 대한 흥미로움
     * 글의 대화형 톤이 매력적이며 읽는 즐거움을 줌
          + 주파수 차트를 설명할 때도 흥미로웠음
     * ""Classifier""라는 단어를 사용하면서도 ""AI""를 언급하지 않은 점에 감명받음
     * 일부 도시는 터널에 BLE 비콘을 설치하여 위치를 전송하고, 가장 강한 비콘 신호를 통해 위치를 찾을 수 있음
          + 하드웨어 설치 없이 위치를 파악하는 좋은 방법으로 보임
     * Transit 앱 사용자로서, 대중교통 내비게이션을 지원하는 앱의 문제를 해결한 점에 감사함
          + Transit 팀의 노력에 축하를 전함
     * 역 사이의 진행 상황을 추적하기 위해 각 트랙 구간의 가속도 특성을 감지하는 방법이 더 나을 수 있음
          + GPS 이전의 원시적인 차량 내비게이션 시스템과 유사함
     * NYC MTA 통근에서 Transit App을 사용해봤지만, 정확하지 않아 사용을 포기함
          + 앱이 잘못된 하차 지점을 알려주거나 탑승을 인식하지 못함
     * 뉴욕 지하철에서 이 기능을 사용해봤지만, 실제 위치와 다르게 작동함
     * BART 통근자로서 터널 위치에 따른 소리로 위치 분류기를 만드는 것이 재미있을 것이라 생각했지만, 가속도계 데이터를 사용하는 것이 더 실용적임
"
"https://news.hada.io/topic?id=17865","HN 공개: iPhone 카메라를 사용한 물리적으로 정확한 블랙홀 시뮬레이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: iPhone 카메라를 사용한 물리적으로 정확한 블랙홀 시뮬레이션

     * 앱 설명
          + 이 앱은 아이폰 카메라의 시야에 블랙홀을 배치하여, 블랙홀이 주변 별빛을 왜곡하는 것처럼 실시간 비디오 피드를 중력 렌즈 효과로 보여줌.
          + ""블랙홀 비전""은 블랙홀 렌즈 효과의 흥미로운 특징을 드러내며, 특히 블랙홀 주변의 강하게 렌즈된 이미지인 ""포톤 링""을 포함함.
          + 이 포톤 링의 측정은 향후 우주에서의 천문학적 관측의 목표가 될 것이며, 이를 위해 가장 선명한 이미지를 제공할 ""블랙홀 익스플로러""라는 궤도 위성 사용 예정임.
     * 새로운 기능
          + 버전 2.0에서는 회전하는 (Kerr) 블랙홀이 추가됨.
          + 사용자는 회전하는 블랙홀의 스핀 값을 변경할 수 있음.
     * 개발자 정보 및 앱 개인정보
          + 개발자는 Alexandru Lupsasca이며, 앱의 개인정보 처리 방침에 따라 데이터 수집을 하지 않음.
          + 개인정보 처리 방식은 사용자의 기능 사용이나 연령에 따라 다를 수 있음.
     * 호환성 및 기타 정보
          + 아이폰에서는 iOS 17.5 이상 필요.
          + Mac에서는 macOS 14.5 이상 및 Apple M1 칩 이상의 Mac 필요.
          + Apple Vision에서는 visionOS 1.2 이상 필요.
          + 앱 크기는 67.1 MB이며, 교육 카테고리에 속함.
          + 무료로 제공되며, 다양한 언어를 지원함.
"
"https://news.hada.io/topic?id=17787","SQLite 인덱스 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             SQLite 인덱스 시각화

SQLite 인덱스 시각화: 구조

     * 인덱스의 중요성: SQLite는 브라우저, 모바일 앱, 운영 체제에서 널리 사용되는 DBMS로, 인덱스 구조를 이해하고 디스크와 메모리에서의 저장 방식을 탐구하는 데 적합함.

  노드와 페이지 구조

     * B-트리 구조: SQLite의 인덱스는 B-트리 구조로 저장되며, 각 노드는 여러 자식을 가짐.
     * 페이지와 셀: 페이지는 셀 데이터를 저장하고 오른쪽 자식 페이지로의 링크를 가짐. 셀은 인덱스 데이터, rowId, 왼쪽 자식 페이지로의 링크를 포함함.

  SQLite 소스 코드 분석

     * 코드 예시: 인덱스 분석을 위한 함수 작성. 예를 들어, sqlite3DebugBtreeIndexDump 함수는 선택된 인덱스의 내용을 읽고 출력함.
     * 도커 사용: 도커를 사용하여 인덱스 덤프를 테스트할 수 있음.

  인덱스 시각화

     * 시각화 도구: d3-org-tree 라이브러리를 사용하여 인덱스 구조를 시각화하려 했으나, 텍스트로 구조를 표시하는 것이 더 간단함.
     * PHP ImageMagick: PHP의 ImageMagick 확장을 사용하여 디자인과 간격을 제어할 수 있는 이미지를 생성함.

  다양한 인덱스 예시

     * 기본 인덱스: 1개의 레코드로 구성된 간단한 인덱스.
     * 다양한 레코드 수: 1,000개 및 1,000,000개의 레코드를 가진 인덱스.
     * 정렬 방향 비교: ASC와 DESC 정렬 방향의 인덱스 비교.
     * 표현식 기반 데이터: 표현식을 사용하여 인덱스를 생성.
     * NULL 값을 포함한 고유 인덱스: SQLite는 NULL 값을 가진 고유 인덱스를 지원함.
     * 부분 인덱스: NULL 값을 필터링하여 인덱스를 생성.
     * 다중 열 인덱스: 여러 열을 포함하는 인덱스 생성.

  인덱스 최적화

     * VACUUM 및 REINDEX: 기존 인덱스를 최적화하기 위해 사용되는 명령어.
     * 텍스트 데이터: 짧은 문자열은 인덱스 셀에 직접 저장되며, 긴 텍스트는 별도로 저장됨.
     * 부동 소수점 데이터: 부동 소수점 데이터를 포함한 인덱스 생성.

  결론

     * 인덱스 구조 이해: SQLite의 인덱스 구조와 B-트리의 데이터 저장 및 접근 방식을 이해함.
     * 시각화의 중요성: 시각화를 통해 다양한 인덱스를 분석하고 비교할 수 있었음.
     * 향후 계획: 인덱스 기반 검색 시각화 및 흥미로운 SQL 쿼리 탐구 예정.

        Hacker News 의견

     * SQLite 테이블의 각 행은 기본적으로 고유한 rowId를 가지며, 이는 명시적으로 정의되지 않은 경우 기본 키처럼 작동함
          + 실제로 기본 키가 있어도 rowId를 사용함
          + WITHOUT ROWID 테이블의 기본 키 인덱스를 시각화해보는 것이 좋음
          + 두 인덱스는 유사해 보이지만, 페이지 수가 적은 두 번째 인덱스가 더 빠를 수 있음
          + 노드 수가 적다고 해서 반드시 ""빠른"" 것은 아님
          + 가장 중요한 것은 트리의 높이임
          + 두 번째로 중요한 것은 인덱스에서 값을 찾았을 때 발생하는 일임
          + 별도의 테이블(rowid)에서 나머지를 로드해야 하는지, 아니면 데이터가 이미 있는지(ROWID 없이) 특히 범위 쿼리에서 중요함
     * 데이터베이스 관리 시스템(DBMS)이 디스크와 메모리에서 인덱스를 저장하고 검색하는 방법을 보고 싶었음
          + SQLite를 실험 대상으로 선택함
          + SQLite는 모든 것을 처리하는 방식에서 약간의 특이점이 있음
          + 특히 쿼리 처리에서 더 그러함
          + SQLite는 성능보다 단순함을 선호하는 경향이 있어 다른 데이터베이스와 다르게 구현함
          + SQLite는 다른 데이터베이스와 경쟁하지 않음
          + JSON 및 XML 파일과 영구 저장을 위해 경쟁함
          + 이는 SQLite가 무엇이든 구현하는 방식이 실제 데이터베이스가 어떻게 작동하는지를 거의 알려주지 않음을 의미함
     * 웹사이트가 매우 읽기 쉬워서 읽고 싶음
     * ""indexes""는 동사 ""to index""의 3인칭 단수 현재형과 명사 ""index""의 복수형으로 사용됨
          + 반면 ""indices""는 전통적인 복수형으로 수학 및 과학 분야에서 특히 많이 사용됨
          + 일반 영어에서는 ""indexes""가 흔히 사용되지만, 기술 분야에서는 언어적 정확성을 유지하기 위해 ""indices""가 선호됨
          + ""indices""를 사용하면 인덱싱 작업과 인덱스의 복수형을 구분하여 명확성을 높임
     * PostgreSQL이 같은 작업을 수행하는 방법을 보고 비교하고 메모를 남기는 것이 좋을 것 같음
     * yEd를 위한 tgf를 생성하여 더 적은 작업으로 더 다양한 레이아웃을 얻을 수 있음
"
"https://news.hada.io/topic?id=17736","Ask GN: 수능을 볼 수험생들에게 한마디 남겨주세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ask GN: 수능을 볼 수험생들에게 한마디 남겨주세요

   아실 분들은 아시겠지만, 내일은 대학수학능력시험(수능)이 치뤄지는 날입니다.
   수능을 치룰 수험생들에게, 혹은 수능이 끝나고 이 글을 볼 수험생에게 응원, 격려, 조언, 기타 하고 싶은 말을 자유롭게 남겨주세요.

   앞으로가 더 흥미로울겁니다

   고등학교 3년 내내 수능만 보고 달렸어서, 수능이 끝나면 굉장히 허무한 느낌도 들었던 것 같습니다.
   꽤나 수능을 망쳤었고 기대했던 것 보다 좋은 대학을 가지 못했었지만, 살다보니 별일도 아닙니다.
   앞으로 어떤 세상이 될지 아무도 모를거에요. 더 많이 경험하고 더 넓은 시각을 가지는게 최고라고 생각합니다.
   젊다는건 어리석음이 더 많이 허용되는 시기인 것 같아요. 앞으로 선택의 순간이 더 많아질텐데 ""현실적인 선택""에 빠지지 않았으면 좋겠습니다.
   저는 실현 가능한것에 빠지기 보다는 실패할 수도 있는 더 어리석은 선택을 경험하는 젊음이 더 많아졌으면 좋겠습니다.

   공부하느라 고생많았어요. 인생을 돌이켜보면 수능은 정말로 별것아니니까 실력보다 못보더라도 너무 낙심하지 마세요~ 다 잘 될 겁니다.

   그 동안 노력 했으니 당분간 잘 쉬고, 잘 노시길. 나중에 추억으로 남을 만한 활동이면 매우 좋습니다.

   실력대로보고오겠습니다 :)

   수능이 끝이 아니라 앞으로 펼쳐질 수많은 고비 중 하나라는 거.
"https://news.hada.io/topic?id=17859","Cerebras Inference에서 Llama 3.1 405B로 초당 969 토큰을 처리 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Cerebras Inference에서 Llama 3.1 405B로 초당 969 토큰을 처리 가능

    Llama 3.1 405B on Cerebras Inference 하이라이트

     * 초당 969개의 출력 토큰 생성 - 최고의 GPU 결과보다 12배 빠름
     * 첫 번째 토큰까지의 시간 240ms - 대부분의 API보다 짧음
     * 128K 컨텍스트 길이 지원 - 기록된 최고 성능
     * 16비트 가중치 - 전체 모델 정확도 유지
     * 2025년 1분기 일반 출시 예정, 입력 토큰 백만 개당 $6, 출력 토큰 백만 개당 $12

    인스턴트 속도의 프론티어 AI

     * Cerebras는 올해 Llama 3.1 8B와 70B를 초당 2,000 토큰 이상으로 밀어 올렸음
     * GPT-4o, Claude 3.5 Sonnet, Llama 3.1 405B와 같은 프론티어 모델은 GPU, ASIC, 클라우드에서 초당 200 토큰을 초과한 적이 없었음
     * Cerebras Inference는 이러한 문제를 해결하여 Llama 3.1 405B가 128K 컨텍스트에서 완전한 성능을 발휘하도록 함
     * 1,000 토큰 프롬프트에서 초당 969개의 출력 토큰을 생성하여 기록을 경신함
     * 100,000 토큰 입력 프롬프트에서 539 토큰/초를 달성하여 Fireworks보다 11배, AWS보다 44배 빠름

    최상의 지연 시간

     * 첫 번째 토큰까지의 시간은 실제 애플리케이션에서 가장 중요한 지표 중 하나임
     * Cerebras는 240밀리초로 Llama 3.1-405B를 실행하는 모든 플랫폼 중 가장 빠른 첫 번째 토큰 시간을 제공함
     * GPU 기반 솔루션보다 훨씬 빠른 응답 시간으로 사용자 경험을 크게 개선함

    가용성

     * Llama 3.1-405B를 위한 Cerebras Inference는 현재 고객 시험 중이며, 2025년 1분기에 일반 출시 예정임
     * 출력 가격은 AWS, Azure, GCP보다 20% 저렴함

    오픈 모델이 가장 빠른 모델

     * Meta의 오픈 접근 방식과 Cerebras의 혁신적인 추론 기술 덕분에 Llama 3.1-405B는 폐쇄형 프론티어 모델보다 10배 이상 빠르게 실행됨
     * 음성, 비디오, 추론 애플리케이션에 적합한 기반을 제공함

        Hacker News 의견

     * Llama 3.1 70b 모델을 8x H100 클러스터에서 구현하는데 100 tok/s를 넘기기 어려움
          + 이 속도를 어떻게 달성했는지 궁금함
          + 다중 노드 추론이나 희소 주의 메커니즘이 필요할 것 같음
     * 지연 시간 비교가 공정한지 확신할 수 없음
          + 지연 시간에는 컨텍스트/프롬프트의 처리량, 하드웨어 접근 대기 시간, 기타 API 오버헤드가 포함됨
          + Cerebras의 숫자는 대기 시간이 거의 포함되지 않았을 가능성이 높음
     * 높은 처리량을 좋은 지연 시간으로 제공하려면 과도한 프로비저닝이 필요함
          + 대기 시간이 모델 로딩을 포함하는지 여부가 불분명함
          + 배치 작업에서는 Cerebras 머신을 100% 활용하여 1k tokens/s를 지속적으로 얻을 수 있음
     * 현재 세대 모델과 RAG, 다중 에이전트, 코드 해석기를 사용하면 모델 지연 시간이 벽이 됨
          + 405B 클래스 모델의 토큰 처리량으로 많은 상호작용 경험이 가능해짐
     * Cerebras 칩은 전체 웨이퍼를 사용하며 44GB의 SRAM만 포함함
          + 405B 모델을 bf16 정밀도로 맞추려면 19개의 칩이 필요함
          + 웨이퍼 제조 비용으로 보면 1500개 이상의 H100을 사용하는 것과 같음
     * API를 시도하기 위한 대기 목록이 있음
          + 서비스를 구매할 수 없을 때 회사의 주장에 대해 회의적일 필요가 있음
     * Nvidia가 Cerebras를 인수할 가능성이 높다고 생각함
     * 새로운 하드웨어로 성능 향상이 가능하다는 사실이 인상적임
          + 하드웨어를 통한 훈련 성능 개선의 한계가 궁금함
     * 토큰/초/와트 비교를 보고 싶음
     * 경쟁사 Groq에 대한 언급이 없음
     * 이러한 지연 시간으로 서비스를 제공하는 데 필요한 비용이 궁금함
          + 비용이 얼마나 널리 채택될 수 있는지를 결정함
          + 정말로 지연 시간이 필요한 비즈니스만을 위한 것인지, 일반적으로 배포될 수 있는지 궁금함
"
   수능을 잘보든, 못보든, 그 뒤에도 많은 일이 있을 거라는 걸 알았으면 하네요.
"
"https://news.hada.io/topic?id=17837","리액티브 HTML 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             리액티브 HTML 노트북

     * 반응형 HTML 노트북
          + HTML을 과학 출판 플랫폼으로 활용하는 것의 중요성을 강조함.
          + HTML 파일을 데이터 탐색, 분석, 시각화, 출판의 모든 단계에서 사용할 수 있는 가능성을 제시함.
          + 기존의 다양한 도구와 플랫폼을 사용하는 대신, HTML을 통해 통합된 작업 흐름을 제공할 수 있음.
     * 셀
          + CSS 클래스 echo를 사용하여 스타일과 스크립트 요소를 인라인으로 표시하는 방법을 설명함.
          + contenteditable 속성을 사용하여 기본 코드 편집기를 생성함.
          + 스크립트가 blur 이벤트에서 다시 평가되도록 설정함.
     * Observable 라이브러리 및 런타임
          + Observable 표준 라이브러리와 런타임을 가져와 window에 바인딩함.
          + cell 함수를 통해 셀을 정의하고, Observable Inspector를 사용하여 셀의 출력을 표시함.
     * 셀 예제
          + counter 셀을 선언하여 매초 숫자를 출력함.
          + fizzbuzz 셀을 생성하여 counter 값에 따라 다른 출력을 생성함.
          + silent 함수를 사용하여 출력을 표시하지 않는 셀을 생성함.
     * 복잡한 출력
          + Hypertext Literal을 사용하여 counter 값을 포맷함.
          + Observable Plot을 사용하여 counter 값을 플롯에 사용함.
     * TeX, Markdown, Graphviz
          + 셀에서 DOM 요소를 반환하여 다양한 형식의 출력을 생성함.
          + TeX, Markdown, Graphviz를 사용하여 수식, 표, 그래프를 생성함.
     * 셀 상태
          + 셀에서 Promise 또는 Error를 반환할 수 있으며, Observable의 Inspector가 셀의 외부 div 요소에 클래스를 적용함.
     * SQLite
          + WASM 기반 SQLite 클라이언트를 사용하여 데이터베이스 쿼리를 수행함.
          + SQL 쿼리를 통해 트랙 길이 분포를 시각화함.
     * Python 및 R
          + Pyodide와 WebR을 사용하여 Python과 R 코드를 실행하고, 시각화를 생성함.
          + Python의 sqlite3 모듈과 Matplotlib을 사용하여 플롯을 생성함.
     * 입력
          + Observable Inputs를 사용하여 입력을 생성하고, 셀과 연결함.
          + viewof 함수를 사용하여 입력 요소를 셀 위에 표시함.
     * 가변성
          + mutable 함수를 사용하여 상태를 변경할 수 있는 객체를 생성함.
          + 상태가 변경될 때마다 새로운 Generator 값을 생성함.
     * 향후 계획
          + 모든 내용을 라이브러리로 통합하고 적절한 문서를 제공할 계획임.
          + 라이브러리 이름은 @celine/celine으로 결정됨.
     * 슬라이드 인프라
          + 문서를 슬라이드쇼로 변환하는 코드를 제공함.
          + 키보드 단축키를 사용하여 슬라이드를 탐색할 수 있음.

        Hacker News 의견

     * HTML이 계산 노트북의 훌륭한 기초가 될 수 있다는 기사에 동의함. 그러나 구현 방식은 마음에 들지 않음. Observable은 멋지지만 표준 JS에서 벗어남. Heximal이라는 반응형 HTML 시스템을 개발 중이며, 이는 HTML 템플릿과 사용자 정의 요소를 기반으로 함.
          + Heximal은 HTMX, Tangle, Curvenote, Polymer의 혼합물과 같음. 그래픽 편집과 노트북 사용자 사례에 잘 맞을 것임.
     * 이 접근 방식의 사용성은 끔찍하다고 생각함. 탐색적 데이터 분석을 할 때 스타일 요소에 신경 쓸 이유가 없음. Jupyter 노트북이 뛰어난 이유임. 그래도 호기심과 대안 아이디어 구현에 대한 찬사를 보냄.
     * Python과 SQLite 데모가 특히 인상적임. 웹을 통한 편집 루프를 시작한 점이 흥미로움. 지속성 문제는 TidlyWiki와 유사하며, 파일 시스템을 사용해 문제를 피할 수 있음. 내장 스크립트에서 내보내기를 할 수 없는 점은 개선이 필요함.
     * Raku에서 HTML 노트북을 지원하려는 시도를 곧 할 예정임. 현재 Raku의 노트북 솔루션은 Jupyter 또는 Mathematica 기반임.
     * 이 게시물의 형식이 마음에 듦. 많은 종속성과 프레임워크 없이 흥미로운 결과로 이어짐. 주어진 코드 조각을 복사하여 단계별로 이해할 수 있음. 문서화된 프로그래밍을 사용하여 HTML로 내보내 블로그 게시물을 작성할 것임.
     * 반응형 HTML이지만 거의 전적으로 JavaScript인 것 같음.
     * pyodide 편집을 시도했으나 휴대폰에서 충돌하고 페이지가 다시 로드됨.
     * 작성자가 질문을 받을 준비가 되어 있음.
     * Raku 코드 예제를 호스팅하고 문서화된 프로그래밍을 위해 유사한 것을 구축하려고 함. Jupyter Chatbooks의 Raku 플러그인이 있지만 Python을 필요로 하는 것이 부자연스러움. 서버 측 코드를 사용하여 원격 언어 커널에 연결할 수 있는 메시지 레이어가 있으면 좋겠음.
     * Windows XP 공룡 커서가 많은 추억을 떠올리게 함.
"
"https://news.hada.io/topic?id=17759","ChatGPT를 활용한 학생 글쓰기 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ChatGPT를 활용한 학생 글쓰기 가이드

   ChatGPT는 생각을 명확하게 정리하고 글쓰기를 돕는 강력한 도구입니다. 하지만 올바르게 사용하지 않으면 학습 기회를 놓치고 역효과를 낼 수 있습니다. 아래는 ChatGPT를 활용해 더 깊이 있는 학습을 할 수 있는 방법들입니다.

  1. 번거로운 인용 작업 위임하기

     * 인용 형식화는 시간이 많이 소요되는 작업입니다. ChatGPT는 MLA, APA 등 인용 형식 변환 작업을 자동화할 수 있습니다.
     * 단, 자동화된 결과는 원본 자료와 비교하여 정확성을 검증해야 합니다.
     * 이를 통해 학생들은 창의적인 아이디어 구상과 논리적인 주장 구성에 집중할 수 있습니다.

   예시 요청
     * ""내 서지 목록을 MLA 형식으로 변환해줘.""
     * ""MLA 형식에서 APA 형식으로 바꿔줘.""
     * ""에세이를 읽고 인용이 잘 들어갔는지 검토해줘.""

  2. 새로운 주제 빠르게 이해하기

     * ChatGPT는 특정 주제에 대한 기본적인 이해를 제공함으로써 연구의 출발점을 마련할 수 있습니다.
     * 복잡한 개념에 대해 간단한 설명을 요청할 수 있습니다.

   예시 요청
     * ""케인즈 경제학이란 무엇이며, 고전 경제 이론과 어떻게 다른가?""
     * ""다양한 동기 이론에 대해 개요를 알려줘.""

  3. 관련 자료 및 학자 추천받기

     * ChatGPT는 연구를 위한 관련 학자, 자료, 검색 키워드 등을 제안할 수 있습니다.
     * 그러나 기본 자료 조사나 논문 읽기를 대신할 수는 없으며 정보의 정확성은 항상 검증해야 합니다.

   예시 요청
     * ""소셜 미디어 사용이 정신 건강에 미치는 영향에 대해 연구 중입니다. 주요 학자와 참고 자료는 무엇인가요?""

  4. 세부적인 질문으로 이해도 높이기

     * ChatGPT는 특정 질문에 대해 명확한 답을 제공함으로써 복잡한 개념의 이해를 도울 수 있습니다.
     * 특히 교재나 일반 자료에서 쉽게 찾기 어려운 정보에 대해 유용할 수 있습니다.

   예시 요청
     * ""양자 동역학에서 슈뢰딩거의 고양이가 문자 그대로 살아있지도, 죽어있지도 않다는 의미인가요?""

  5. 구조 개선을 위한 피드백 받기

     * 글의 개요를 ChatGPT에 검토 요청하여 논리의 흐름과 구조를 개선할 수 있습니다.
     * 논리적 흐름이 잘 이어지는지, 구조 개선이 필요한 부분은 어디인지 확인할 수 있습니다.

   예시 요청
     * ""내 에세이 개요를 검토해줘. 논리의 흐름이 잘 이어지는지 피드백 부탁합니다.""

  6. 리버스 아웃라인으로 논리 검토하기

     * 리버스 아웃라인은 각 문단의 핵심 내용을 요약하여 글의 구조를 한눈에 평가하는 방법입니다.
     * 이 방법은 아이디어의 흐름과 논리적 일관성을 검토하는 데 도움이 됩니다.

  7. 소크라테스식 대화로 아이디어 발전시키기

     * ChatGPT는 소크라테스식 대화를 통해 학생이 자신의 생각을 더 명확하게 표현하고 발전시키도록 도울 수 있습니다.
     * 지적 토론을 통해 아이디어를 다듬고 새로운 관점을 발견할 수 있습니다.

   예시 요청
     * ""내 주제에 대해 소크라테스식 질문을 던져줘.""

  8. 반론 요청으로 논증 강화하기

     * ChatGPT에 자신의 논지를 반박할 수 있는 논점을 요청하여 논증의 취약점을 보완할 수 있습니다.
     * 더 강력한 논지를 만들기 위해 반론과 약점을 검토할 수 있습니다.

   예시 요청
     * ""내 논지를 반박할 수 있는 논점들을 제시해줘.""

  9. 역사적인 사상가들과의 비교

     * ChatGPT를 통해 칸트, 루미, 보부아르 같은 역사적인 사상가의 관점을 채널링하여 논의에 참고할 수 있습니다.
     * 유명 사상가들과의 비교를 통해 자신의 아이디어를 더 명확히 할 수 있습니다.

  10. 반복적인 피드백으로 글 완성도 높이기

     * ChatGPT는 지속적인 피드백을 제공하여 여러 차례 수정 작업을 할 수 있도록 도와줍니다.
     * 학생은 제출 전에 반복적으로 글을 개선할 수 있습니다.

  11. 고급 음성 모드로 읽기 동반자 역할 수행

     * ChatGPT의 고급 음성 모드는 책을 읽는 동안 질문이나 모호한 부분을 실시간으로 설명해 줄 수 있습니다.
     * 학습 흐름을 깨지 않고도 맥락을 제공받을 수 있습니다.

  12. 기술 연마에 집중하기

     * 과제는 단순히 점수를 받기 위한 것이 아니라 사고력과 글쓰기 능력을 키우는 기회입니다.
     * ChatGPT에 비판적 사고와 명확한 글쓰기 능력을 키울 수 있는 방법을 요청할 수 있습니다.

   예시 요청
     * ""비판적 사고와 글쓰기 능력을 키우기 위해 어떤 연습을 하면 좋을까요?""

  투명하게 사용하기

     * ChatGPT를 학습에 활용할 때, 교수님에게 투명하게 사용 과정을 알리는 것이 중요합니다.
     * AI 사용을 부정행위가 아닌 학습 지원 도구로 사용하고 있음을 보여주기 위해 대화 기록 링크를 서지에 포함할 수 있습니다.
     * 이는 학업 윤리를 준수하고 AI 도구를 효과적으로 활용하고 있음을 나타냅니다.

   재밌네요. AI 글쓰기 멘토링 받기.

        Hacker News 의견

     * AI를 활용하여 작업을 더 효율적으로 수행할 수 있음. 하지만 AI에 의존하면 코딩 능력이 저하될 수 있다는 우려도 있음
          + 학생이 새로운 것을 배울 때 AI에 지나치게 의존하면 학습의 깊이가 부족해질 수 있음
          + 과거에는 육체 노동으로 건강을 유지했지만, 이제는 체육관에 가듯이 지적 작업을 위한 '정신 체육관'이 생길 가능성에 대해 궁금해함
     * LLM의 사용이 학생들의 발달에 미치는 영향을 고려해야 함
          + 학생의 과제는 발달을 촉진하기 위한 것이며, 과제 자체의 결과물은 중요하지 않음
          + LLM을 활용한 과제 제출이 증가할 수 있으므로, 교실에서의 작업을 평가의 기준으로 삼아야 함
          + 학습을 위한 작업과 평가를 위한 작업을 구분하여, 교실에서 더 간결한 작업으로 평가할 수 있음
     * 대학원생을 대상으로 LLM의 시도를 보여주며, 사실 확인의 중요성을 강조함
          + 학생들이 두 번의 구술 시험을 치러야 하며, 실패는 치명적일 수 있음을 상기시킴
     * AI 회의론자들은 AI 사용자가 모든 것을 AI에 맡긴다고 가정하는 경향이 있음
          + AI를 아이디어 생성, 피드백 요청, 대안 및 비판 요청 등으로 활용하여 더 나은 결과를 얻을 수 있음
     * 학생들이 AI를 사용하여 학습 태도가 변화하고 있음
          + AI가 해결할 수 없는 도전 과제를 어떻게 구성할 것인지 고민해야 함
          + 비판적 사고, 창의적 문제 해결, 복잡한 시스템 이해가 중요해질 것임
          + AI와 함께 일하는 방식에 대한 근본적인 변화가 필요함
     * AI가 학교에서 학생과 교사 모두에게 영향을 미치고 있음
          + 교사들이 학생의 에세이를 AI에 입력하여 표절 여부를 확인하는 경우가 있음
          + AI에 대한 신뢰가 지나치게 높아지는 경향이 있지만, 점차 회의적인 시각이 늘어나고 있음
     * 많은 학생들이 ChatGPT를 사용하여 과제를 작성하고 있음
          + 학생들은 프롬프트 작성 방법을 잘 모르고, 단순히 과제를 복사하여 입력함
          + AI 탐지기를 피하기 위해 여러 번의 변형을 시도함
     * LLM의 등장으로 고등 교육이 어떻게 변화할지 궁금해함
          + 교육의 기준이 높아지고, 더 많은 내용을 짧은 시간에 가르칠 수 있을 것임
     * LLM이 문장 구성에 뛰어난 능력을 발휘함
          + 문법과 철자가 우수하며, 에세이와 같은 형식적인 문서 작성에 적합함
          + LLM이 사실을 잘못 이해할 수 있으므로, 사용자는 사실 확인과 방향 설정에 주의해야 함
"
"https://news.hada.io/topic?id=17830","Show GN: 휴튼 - 나를 가장 잘 이해하는 AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: 휴튼 - 나를 가장 잘 이해하는 AI

   휴튼은 AI가 하루에 하나씩 나만을 위한 맞춤형 질문을 던지는 서비스입니다.

   제 경험상, 저라는 사람에 대해 잘 알고있는 사람이 던져주는 질문만큼 도움이 되는 것도 없더라구요. 이 좋은 경험을 많은 사람들에게 전달하고 싶어, AI를 활용해서 유저의 과거 글을 토대로 각 유저에게 꼭 필요한 질문을 던지는 서비스를 만들었습니다.

   휴튼이 던지는 좋은 질문들을 통해 유저들은 자기 자신에 대해 깊이 성찰할 수 있고, 궁극적으로는 자신을 더 잘 이해할 수 있어요.

   삶의 무게중심이 내 안에 있지 못하고 자꾸 바깥을 향하려고 하는 이 시대에 많은 분들께 도움이 되었으면 좋겠습니다! 🙂

   https://duge.space/ 요 서비스가 생각나네요~

   오 이 서비스도 재밌네요. 감사합니다!

   흥미롭네요. 전 일기같은 걸 안쓰다보니 넣을 자료가 없어서 어떨까 싶긴 한데....한 번 써볼게요!!

   기존 자료를 활용하는게 아니네요. 질문에 응답하면 나에 대해 알려주는 형태군요. 글쓰기 창 UI나 폰트가 좀더 크고 시원하면 더 좋을 것 같아요.

   쓰면서 궁금해진 건데요. AI 모델 학습에 이용이 안된다는 것은 어떤 의미 인지요? 가령 오픈 AI 는 chatgpt를 이용하면 모델 학습에 사용이 무조건 됩니다. api를 유료로 이용하는 서비스라면 모델 학습에 이용이 안되는 건지 궁금합니다. 그리고 혹시 제가 답변한 것들은 rag의 자료로만 사용되는 것인가? 그렇다고 하더라고 가령 chatgpt같은 상용모델을 쓰면 모델학습에 사용될 것 같아서요. 이 부분 궁금합니다.

   안녕하세요! 피드백과 질문 감사합니다. :)
    1. 네 맞습니다, 기존 자료를 사용하는 것이 아니라, 휴튼이 던지는 질문에 하나씩 답하면서 자기 자신을 더 깊이 이해할 수 있도록 돕는 것이 요지입니다.
    2. GPT는 api로 사용하는 경우 모델 학습에 사용하지 않는다고 명시되어 있습니다! 그러니 안심하셔도 됩니다 ㅎㅎ
    3. 단순화해서 말씀드리기는 어렵지만, 답변하신 내용은 기본적으로 rag로 사용되는 것이 맞습니다! 오픈ai의 모델 학습으로는 사용되지 않습니다 🙂
"
"https://news.hada.io/topic?id=17861","시작한 면에 떨어지는 경향이 있는 공정한 동전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       시작한 면에 떨어지는 경향이 있는 공정한 동전

        Hacker News 의견

     * 첫 번째 저자는 실험의 세부 사항을 설명하며, 대부분의 녹화가 저화질 웹캠으로 이루어졌고, 이는 동전이 실제로 회전하는 것처럼 보이지 않게 만드는 원인임을 밝힘
          + 실험은 인간의 동전 던지기에 관한 것이며, 기계를 사용하면 실험의 목적이 무색해짐
          + 실험은 자발적으로 진행되었고, 학생들이 기여한 시간을 인정하여 공동 저자로 참여했음을 설명함
     * 동전을 완벽하게 던지는 사람은 드물며, 연습을 통해 편향이 줄어들 수 있음을 발견함
          + 데이터는 OSF에서 확인 가능하며, 통계적 배경에 의문이 있다면 직접 분석해볼 것을 권장함
     * 연구의 표본 크기는 48명으로 작으며, 일부 참가자의 낮은 회전 속도와 낮은 높이의 던지기가 결과에 영향을 미칠 수 있음을 지적함
     * 연구자들이 통계에 집중하지 않았을 가능성을 제기하며, 연구 결과가 편향될 수 있음을 우려함
     * 동전 던지기의 효과는 ""전진""에서 비롯되며, 이는 동전이 한쪽에 더 오래 머무르게 하는 요인임을 설명함
          + 최상의 기술로는 p_same = 0.508에서 한 참가자는 0.6까지 도달했음을 언급함
     * 동전 던지기가 정당하지 않았을 가능성을 제기하며, Bartos의 던지기가 이를 확인시켜줌
     * 호주 20센트 동전으로 동전 던지기를 속일 수 있는 방법을 설명함
          + 동전이 땅에 직접 떨어지도록 해야 함을 강조함
     * 이 연구는 올해의 Ig 노벨상 수상작이며, 동전이 같은 면에 더 자주 떨어진다는 것을 보여줌
     * 마술사들은 수십 년 동안 이 사실을 알고 있었으며, 30명의 마술사가 데이터를 모으면 비슷한 규모의 메타 분석이 가능할 것임을 언급함
     * 공정한 동전 던지기의 문제는 공정성 여부가 아니라 이를 적절한 동전 던지기로 간주할지 여부임을 지적함
          + 인간의 불완전함을 포함한 동전 던지기가 통계와 무작위성에 본질적으로 중요할 수 있음을 제기함
     * 숫자를 세는 실험을 통해 짝수에 멈출 가능성이 약간 더 크다는 직관적 설명을 제공함
     * 어린 시절 배운 동전 던지기 트릭을 통해 결과를 예측할 수 있게 되었음을 공유함
"
"https://news.hada.io/topic?id=17766","OpenAI, Google, Anthropic 더 발전된 AI 개발을 위해 고군분투중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI, Google, Anthropic 더 발전된 AI 개발을 위해 고군분투중

     * OpenAI, Google, Anthropic 등 주요 AI 기업들은 새로운 모델 개발에서 점점 더 적은 성과를 거두고 있음
     * OpenAI는 최신 AI 모델 Orion을 훈련했지만, 기대했던 성능에 미치지 못했음
          + 특히 코딩 질문에 대해 제대로 답변하지 못하는 문제를 겪음
     * Google의 Gemini도 내부 기대에 못 미치는 성과를 보였으며, Anthropic은 새로운 Claude 3.5 Opus의 출시 일정이 지연되고 있음

    데이터의 한계와 비용 문제

     * 고품질의 인간 작성 데이터를 확보하는 것이 갈수록 어려워지고 있음
     * AI 모델의 성능이 정체되고 있으며, 소량의 개선이 막대한 비용을 정당화하기 어렵게 만듦
     * OpenAI의 Orion은 충분한 코딩 데이터를 확보하지 못한 것이 주요 원인 중 하나로 지목됨
     * 새로운 AI 모델 개발에는 수백만 달러의 비용이 소요되며, 향후에는 수십억 달러에 이를 것으로 예상됨

    AI의 성능 개선 전략

     * OpenAI는 Orion의 출시 전 사후 훈련(post-training) 과정에 집중하고 있음. 이는 사용자 피드백을 통해 모델의 응답을 개선하고, 상호작용 톤을 조정하는 작업을 포함함
     * 데이터 부족 문제를 해결하기 위해, 기업들은 출판사와의 계약을 통해 데이터를 확보하거나, 전문가가 데이터를 레이블링하는 방법을 사용하고 있음
     * 합성 데이터(synthetic data) 사용도 증가하고 있지만, 고유하고 고품질의 데이터 확보에는 여전히 한계가 있음

    AI 확장 법칙의 의문

     * AI 업계는 더 큰 모델과 더 많은 데이터가 성능 향상을 가져올 것이라는 **확장 법칙(scaling laws)**에 의존해 왔으나, 최근의 성과는 이를 의심하게 만들고 있음
     * Anthropic의 CEO인 Dario Amodei는 데이터 부족이 문제를 일으킬 수 있지만, 이를 극복할 방법을 찾을 것이라 낙관하고 있음

    비용과 성능 간의 균형 문제

     * AI 개발비가 급증하면서, 새로운 모델이 기대만큼 성능이 향상되지 않을 경우 높은 비용이 문제로 작용함
     * OpenAI와 Anthropic은 더 큰 모델 대신, **AI 에이전트(agent)**와 같은 새로운 사용 사례로 초점을 옮기고 있음
          + 에이전트는 사용자 대신 이메일을 보내거나 비행기 예약을 하는 등의 작업을 수행할 수 있음
     * OpenAI의 CEO Sam Altman은 컴퓨팅 자원 사용에 있어 어려운 결정들이 필요하다고 언급함
          + ""우리는 훌륭한 새로운 모델을 계속 출시할 것이지만, 다음 큰 혁신은 에이전트가 될 것입니다""라고 Reddit AMA에서 설명함

    결론

     * 주요 AI 기업들은 점점 더 많은 컴퓨팅 파워와 데이터를 사용하고 있지만, 성과가 정체되고 있음
     * 기술적인 한계와 데이터 부족 문제를 극복하기 위해, 새로운 접근법과 사용 사례를 모색하고 있음
     * 향후 AI 개발의 방향은 모델의 크기보다는 실제 활용 사례에 중점을 둘 가능성이 높아지고 있음

   결국 돈이 너무 많이 든다는 이야기네요.
   개인적으로 뇌의 뉴럴 수만큼 업사이드가 있다고 생각합니다.

        Hacker News 의견

     * 현재 LLM(대규모 언어 모델) 기반의 가치를 제공할 수 있는 옵션이 다 소진되었다고 느끼는지에 대한 질문이 있음. 한 팀을 이끌고 있는 사람은 아직 갈 길이 멀다고 생각함
          + GPT-4o와 Claude 3.5 모델을 주로 사용하며, 기술적 투자와 LLM의 조합으로 새로운 응용 프로그램의 가능성이 계속해서 나타남
          + 예를 들어, 인간이 조정하는 지식 그래프와 LLM을 결합하여 비즈니스 컨텍스트를 이해하고 팀의 동료처럼 행동하는 ""전문가 봇""을 만들 수 있음
          + 예측 및 시뮬레이션 기능을 추가하면 LLM이 합리적인 코드 변경을 생성하고 자동으로 검토 및 반복할 수 있음
          + 모델 개선을 추구하는 것보다 현재의 지능을 활용하는 것이 중요하다고 주장함
     * 엔지니어링 분야에서는 지난 3년간 트랜스포머 모델의 사전 및 사후 훈련을 확장하는 데 집중해왔음
          + 새로운 패러다임으로 다중 모달 훈련과 로봇을 포함한 구현 에이전트가 주목받고 있음
          + OpenAI, Google, Anthropic도 로봇 연구에 투자하고 있음
     * ChatGPT의 코드 생성 기능은 기존의 코드와 유사한 것을 웹에서 찾을 수 있음
          + LLM은 검색 및 복사/붙여넣기 기능을 제공하며, 이는 일반적인 문제 해결에 충분함
          + 그러나 LLM만으로는 일반 인공지능이 나오지 않음
          + LLM의 자신감 지표가 필요하며, 이는 현재의 LLM보다 훨씬 유용할 것임
     * AI의 발전이 데이터 한계에 도달한 것은 좋은 일이며, 더 나은 모델 아키텍처를 개발하는 방향으로 압력이 이동함
          + AI 연구자들이 더 나은 모델을 찾고 있음
     * AI가 벽에 부딪혔다는 부정적인 헤드라인은 인터넷이 처음 등장했을 때와 유사함
          + 10년 후에는 AI가 모든 삶의 측면에 깊이 연결될 것이라고 생각함
     * 기존의 기술이 산업에 큰 변화를 가져왔으며, AI와 인간의 하이브리드 모델로 전환하는 데 시간이 필요함
     * OpenAI의 최신 모델이 기대에 미치지 못했지만, 훈련 데이터의 크기에 따라 선형적으로 성장할 수 있음
     * AI 소프트웨어를 구매하여 사용자가 직접 문서를 읽고 새로운 버전의 앱을 작성하도록 도와줄 수 있는 기능을 추가할 수 있는지에 대한 질문이 제기됨
"
"https://news.hada.io/topic?id=17844","'스타트업' 부트캠프 코딩강사로 잠깐 일하며 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        '스타트업' 부트캠프 코딩강사로 잠깐 일하며

   안녕하세요. PHP/Laravel 개발자 정상우입니다 👋

   지난달, '스타트업' 부트캠프에서 초청이 들어와 단기적으로 PHP 강사로 다녀온 후기를 칼럼으로 적어보았습니다. 칼럼은 자주 쓰는 편이지만, GeekNews 에 직접 게시하는 것은 처음인지라 떨리네요 ㅎㅎ;

   코딩교육이나 강의에 대한 의견이 있다면 댓글 달아주시면 감사하겠습니다!

   Show GN에 맞지 않아 이동하였습니다.
   Show 사용방법 을 참고해서 올려주세요.

   앗 고맙습니다~
"
"https://news.hada.io/topic?id=17851","발트해에서 두 개의 해저 케이블 장애 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        발트해에서 두 개의 해저 케이블 장애 발생

    발트해 해저 인터넷 케이블 손상

     * 발트해 해저 케이블 손상
          + 2015년 10월 12일, 핀란드 헬싱키 해안에서 해저 통신 케이블 C-Lion1이 설치되었음.
          + 최근 발트해에서 두 개의 해저 인터넷 케이블이 갑작스럽게 손상되었음.
          + 리투아니아와 스웨덴 사이의 통신 케이블이 현지 시간으로 일요일 오전 10시에 절단되었음.
          + 미국은 러시아의 군사 활동이 해저 통신 케이블 주변에서 증가했다고 감지했으며, 케이블을 비활성화하려는 작전이 있을 수 있다고 보고 있음.
     * 케이블 손상 원인
          + Telia Lithuania는 인터넷 트래픽 중단이 장비 고장이 아닌 광섬유 케이블의 물리적 손상으로 인한 것임을 확인했음.
          + 핀란드와 독일을 연결하는 또 다른 케이블도 손상되었으며, 이는 핀란드와 중앙 유럽을 직접 연결하는 유일한 케이블임.
          + 스웨덴과 핀란드는 전쟁 대비 지침을 업데이트하고 있음.
     * 조사 및 대응
          + C-Lion 케이블의 손상 원인은 아직 명확하지 않으며, Cinia는 조사를 진행 중임.
          + 핀란드와 독일의 외무장관은 ""하이브리드 전쟁"" 가능성을 언급하며 깊은 우려를 표명했음.
          + 미국은 러시아의 해저 케이블에 대한 잠재적 사보타주 작전에 대한 경고를 발령했음.
     * 복구 및 영향
          + Cinia는 수리 선박을 준비 중이며, 수리에는 보통 5일에서 15일이 소요됨.
          + 리투아니아와 스웨덴 간의 케이블은 리투아니아 인터넷 용량의 약 3분의 1을 처리했으며, 현재 용량은 복구된 상태임.
          + Arelion은 스웨덴 군 및 민간 당국과 연락 중이며, 케이블은 몇 주 내로 수리될 예정임.

        Hacker News 의견

     * 케이블 손상은 연간 약 200회 발생하며, 얕은 물에서는 ROV를 사용하여 수리함. 손상 원인이 고의적인지 확인하는 것이 중요함
          + 케이블 수리는 비용이 많이 들지만 빠르게 이루어짐. 여러 케이블이 동시에 손상되면 더 큰 문제임
     * 리투아니아와 스웨덴 사이의 케이블도 손상됨
     * 인프라 공격은 게이머와 기술 전문가들을 자극할 수 있음
     * 핀란드와 독일 외무장관은 발트해 케이블 손상에 대해 우려를 표명함. 유럽의 안보가 위협받고 있으며, 중요한 인프라 보호가 필요함
     * 러시아 선박이 케이블 위에 있을 때 감시 UAV를 배치하는 것이 해결책일 수 있음. 비용이 들지만 가능함
     * 광섬유 케이블은 도청이 가능할 수 있음. 케이블을 절단하고 다시 연결할 때 도청 장치를 설치할 수 있음
     * Hetzner는 영향을 받지 않은 것으로 보임. 독일에서의 핑 속도가 정상임
     * 최근 미국, 영국, 프랑스의 장거리 미사일 사용 허가에 대한 대응으로 보임. Nord Stream 사건이 예측대로 진행됨
     * 영국 근처에서 러시아의 활동이 우려를 불러일으킴. 러시아가 영국을 차단할 가능성이 있음
"
"https://news.hada.io/topic?id=17860","OpenStreetMap의 새로운 벡터 타일","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OpenStreetMap의 새로운 벡터 타일

     * OpenStreetMap(OSM)은 20년 역사 동안 래스터 타일을 제공해 왔음. 이 타일은 미리 정의된 규칙과 스타일에 따라 렌더링되어 사용자는 정적인 PNG 이미지를 받음
     * 최근 OSM은 Mapbox Vector Tiles(MVT) 형식의 벡터 타일을 제공하기 시작했음. 이를 통해 사용자는 스타일과 렌더링 규칙을 조정하고 각 타일의 기본 정보를 추출할 수 있음. 이미지가 더 선명하게 보이며, 라벨의 언어 전환이 가능해짐
     * OSM의 새로운 벡터 타일은 커뮤니티에서 더욱 세밀하게 조정된 스타일을 제공할 가능성이 있음
     * OSM의 메인 웹사이트는 여전히 래스터 타일을 제공하지만, 새로운 벡터 타일의 웹 데모는 대부분의 휴대폰과 데스크톱 장치에서 작동할 수 있음

    내 작업 환경

     * Intel Core i9-14900K CPU를 사용 중이며, 8개의 성능 코어와 16개의 효율 코어로 총 32개의 스레드와 32MB의 L2 캐시를 가짐.
     * 96GB의 DDR5 RAM과 Crucial T700 4TB NVMe M.2 SSD를 사용 중이며, Ubuntu 22 LTS를 Windows 11 Pro에서 실행 중임.
     * Nvidia GTX 1080 GPU를 사용하여 Windows에서 더 나은 드라이버 지원을 받으며, ArcGIS Pro를 사용하기 위해 Windows를 주로 사용함.

    필수 구성 요소 설치

     * Python과 몇 가지 도구를 사용하여 OSM의 데이터를 시각화할 예정임.
     * DuckDB와 그 확장 기능을 사용하여 데이터를 분석할 예정임.

    QGIS에서 OSM의 벡터 타일

     * QGIS에서 OSM의 벡터 타일을 볼 수 있으며, 스타일 시트를 설정하여 타일을 추가할 수 있음.
     * 스타일 시트 없이도 QGIS는 벡터 데이터를 렌더링할 수 있지만, 색상은 무작위로 선택됨.
     * 아이콘 렌더링에 문제가 있을 수 있지만, 다른 도구에서는 잘 작동함.

    Leafmap에서 OSM의 벡터 타일

     * Jupyter Notebook을 설정하고, Leafmap을 사용하여 벡터 타일을 렌더링할 수 있음.
     * Burj Khalifa 주변 지역을 다시 렌더링하며, POI 아이콘이 제대로 렌더링됨.

    분석 준비 데이터

     * 특정 타일을 다운로드하고 JSON 파일로 변환하여 DuckDB에서 분석할 수 있음.
     * POI 데이터를 추출하여 DuckDB에서 열어볼 수 있음.
     * 데이터셋의 채워진 정도를 파악할 수 있는 필드를 제공함.

   https://news.hada.io/topic?id=17808

        Hacker News 의견

     * 벡터 타일에 대해 혼란스러움을 느끼는 의견이 있음. 벡터 타일이 원래의 래스터 타일만큼 세부사항을 제공하지 못함
          + 래스터 타일은 다양한 POI, 고속도로, 색상 차이, 스포츠 필드, 건물 및 지역 이름 등을 포함함
          + 벡터 타일은 이러한 세부사항이 부족하며, 잘못된 렌더링 문제도 있음
          + 벡터 스타일과 생성기를 많이 시도해봤지만, 래스터 OSM 타일만큼의 세부사항을 제공하지 못함
          + 벡터 스타일은 부드러운 줌과 팬 기능을 제공하지만, 실제 지도 데이터를 보려는 경우에는 부족함
          + 컴퓨팅 제한 때문에 세부사항을 동일하게 표시하는 것이 어려울 수 있음
          + OpenStreetMap이 래스터 스타일을 더 잘 모방했으면 좋겠다는 의견이 있음
     * 오픈 소스 커뮤니티가 벡터 지도 타일 기능을 구축하는 과정을 보는 것이 흥미로움
          + 2018년경 웹 GIS 작업을 했을 때 Google/Apple의 스트리밍 벡터 지도가 매우 매력적이었음
          + 이후 오픈 소스에서 핵심 기술이 제공되었고, 무료 호스팅 솔루션도 등장함
          + 현재는 무료로 훌륭한 벡터 레이어를 제공하는 지도 사용 가능
     * 벡터 버전에서 아랍어 폰트가 올바르게 렌더링되지 않는 문제 있음
          + 왼쪽에서 오른쪽으로 렌더링되며, 문자가 연결되지 않고 분리됨
     * OSM 기반 지도의 운영 비용을 줄이는지에 대한 질문이 있음
          + 벡터가 저장소/대역폭을 덜 소비하고 렌더링에 덜 많은 CPU를 사용하기 때문일 가능성 있음
     * 이미지가 더 선명하게 보이고 라벨의 언어를 변경할 수 있을 것이라는 기대가 있음
          + 라벨 크기가 변경되면 지도 레이아웃에 영향을 미칠 수 있음
          + 라벨이 커지면 지도의 많은 부분을 가리거나 겹칠 수 있음
     * OpenFreeMap — 무료 OpenStreetMap 벡터 타일 호스팅을 소개함
     * Marble.kde.org는 9년 동안 자체 스트리밍 벡터 OSM 레이어를 구현해왔음
          + 대용량 국가 단위의 지도 데이터를 다운로드하는 것이 공간 문제였음
          + 표준이 확립되고 개선되기를 기대함
     * 새로운 발전을 환영하며 더 나은 지도를 기대함
          + ""내 워크스테이션"" 섹션이 기사와 관련이 없어 보임
     * OSMAnd와 OrganicMaps가 협력하여 궁극의 FOSS 지도 앱을 제공할지 궁금해하는 의견이 있음
     * 기본 래스터 기반 지도의 빠른 반응성을 높이 평가함
          + OSM에서의 줌 인/아웃이 Google/Apple/Yandex/Bing 지도보다 빠름
          + 벡터 기반 지도 덕분에 다양한 언어 시스템을 사용하는 국가에서도 OSM 사용 가능
"
"https://news.hada.io/topic?id=17751","운동하는 근육이 뉴런 성장에 도움을 준다는 새로운 연구 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   운동하는 근육이 뉴런 성장에 도움을 준다는 새로운 연구 결과

    연구 결과

     * 운동의 생화학적 및 물리적 효과가 신경 치유에 도움을 줄 수 있음.
     * MIT 연구진은 운동이 개별 뉴런 수준에서도 이점을 가질 수 있음을 발견함.
     * 근육이 수축할 때 방출되는 생화학적 신호인 마이오카인에 노출된 뉴런이 더 멀리 성장함.
     * 뉴런은 운동의 생화학적 신호뿐만 아니라 물리적 영향에도 반응함.
     * 연구진은 운동 중 근육이 수축하고 확장되는 것처럼 뉴런을 반복적으로 당기고 밀었을 때 뉴런이 마이오카인에 노출된 것만큼 성장함을 발견함.

    연구의 중요성

     * 이 연구는 근육 활동과 신경 성장 간의 생화학적 연결을 보여주는 첫 번째 연구임.
     * 연구 결과는 운동 중 근육과 신경 간의 연결을 밝히고, 손상된 신경을 복구하는 운동 관련 치료법에 정보를 제공할 수 있음.
     * 연구진은 근육-신경 간의 상호작용이 신경 손상 치료에 유용할 수 있다고 언급함.

    근육과 신경의 상호작용

     * 연구진은 근육이 신경에 영향을 미칠 수 있는지 확인하기 위해 근육과 신경 조직에 집중함.
     * 근육 조직을 빛에 반응하여 수축하도록 유전적으로 수정함.
     * 근육 조직을 운동시키면서 주변 용액을 수집하여 마이오카인 용액을 얻음.
     * 마이오카인 용액에 노출된 뉴런이 더 빠르게 성장함을 관찰함.

    운동의 물리적 효과

     * 연구진은 뉴런이 근육과 물리적으로 연결되어 있어 운동의 물리적 힘이 뉴런 성장에 영향을 미칠 수 있는지 확인함.
     * 뉴런을 자석으로 흔들어 운동시켰을 때, 뉴런이 마이오카인에 노출된 것만큼 성장함을 발견함.
     * 생화학적 및 물리적 효과가 모두 중요하다는 것을 시사함.

    향후 연구 방향

     * 연구진은 운동을 통한 근육 자극이 손상된 신경을 성장시키고 치유하는 데 어떻게 사용될 수 있는지 연구할 계획임.
     * 운동을 약으로 사용하는 것을 이해하고 제어하는 첫 번째 단계임을 언급함.
"
"https://news.hada.io/topic?id=17764","HyperDX - ClickHouse에서 로그와 추적을 위한 오픈 소스 Kibana 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           HyperDX - ClickHouse에서 로그와 추적을 위한 오픈 소스 Kibana 대체제

     * HyperDX는 엔지니어들이 프로덕션 문제를 빠르게 해결할 수 있도록 돕는 도구로, Clickhouse 클러스터 위에서 로그와 트레이스를 검색하고 시각화할 수 있게 해줌.
     * Kibana와 유사하지만 Clickhouse에 최적화된 기능을 제공함.
     * 주요 기능
          + 로그와 트레이스를 한 곳에서 검색 및 상관관계 분석 가능.
          + 기존 Clickhouse 스키마와 호환되며 스키마에 구애받지 않음.
          + 빠른 검색 및 시각화 기능 제공.
          + 직관적인 전체 텍스트 검색 및 속성 검색 문법 지원.
          + 이벤트 델타를 통해 이상 현상의 트렌드 분석 가능.
          + 복잡한 쿼리 언어 없이 고카디널리티 이벤트 대시보드 제공.
          + JSON 문자열 쿼리 지원.
          + 최신 이벤트를 실시간으로 확인할 수 있는 로그 및 트레이스 기능.
          + OpenTelemetry 기본 지원.
          + HTTP 요청부터 DB 쿼리까지 건강 상태 및 성능 모니터링 가능.
     * HyperDX 시작하기
          + HyperDX v2는 현재 로컬 모드에서 베타 버전으로 제공됨.
          + 로컬 컨테이너를 실행하여 OpenTelemetry 수집기, Clickhouse, HyperDX UI를 실행할 수 있음.
          + Safari 및 Brave 브라우저에서는 CORS 문제로 인해 Clickhouse 연결이 어려울 수 있음.
          + 최소 1GB RAM과 1 CPU 코어가 필요함.
     * 클라우드 서비스
          + HyperDX는 클라우드 서비스로도 제공되며, 무료 계정을 통해 데이터를 빠르게 전송할 수 있음.
     * 앱 계측
          + HyperDX에 로그, 메트릭, 트레이스, 세션 리플레이 등을 전송하려면 앱을 계측해야 함.
          + 다양한 SDK와 통합 옵션을 제공하여 쉽게 시작할 수 있음.
          + OpenTelemetry와 호환되며, 여러 언어 및 플랫폼을 지원함.
     * 오픈 소스 vs 클라우드
          + HyperDX는 오픈 코어로 대부분의 기능이 MIT 라이선스로 제공됨.
          + 클라우드 호스팅 버전은 추가 기능을 제공하며, 지속 가능한 비즈니스를 위해 존재함.

        Hacker News 의견

     * 로그의 전체 텍스트 검색이 Loki처럼 모든 로그를 선형적으로 검색하는지, 아니면 인덱스를 사용하여 속도를 높일 수 있는지에 대한 질문이 있음
          + Loki는 인덱스를 사용하지 않아 TB 크기의 로그에서 결과를 찾는 데 시간이 걸림
          + Quickwit.io를 통합하여 인덱스 기반 로그 검색 문제를 해결하려고 고려 중임
     * HyperDX가 다른 백엔드 지원을 추가하여 ""Grafana for logs"" 솔루션이 될 계획인지에 대한 질문이 있음
          + VictoriaLogs 지원을 추가하면 HyperDX에서 효율적인 UX를 구축하는 데 도움이 될 것임
     * HyperDX에 브라우저와 Linux VM 로깅을 성공적으로 설정했으나 Azure Functions와의 OTel 로깅에 어려움을 겪고 있음
          + 새로운 ""Flex Consumption"" 기능이 OTel을 네이티브로 지원하여 HyperDX와 함께 작동함
     * HyperDX를 사용하는 고객이 만족감을 표현하며, Datadog보다 저렴하고 설정이 쉬움
          + UI가 직관적이며 기본 제공 대시보드가 훌륭함
     * DataDog를 대체할 오픈 소스 대안을 찾고 있으며, HyperDX로 전환하는 방법을 찾고 있음
          + Cloudflare Workers에서 OTel을 사용하여 가시성을 개선하고자 하며, 문서 업데이트가 필요함
     * Kibana의 대안으로 기대했던 것과 다르다는 의견이 있음
          + Kibana는 비기술적 사용자에게 적합하며, HyperDX가 명확한 타겟 청중을 찾기를 바람
     * HyperDX가 매우 훌륭하며, 단일 페이지 UI로 작동하고 느리지 않음
          + 시스템.text_log 테이블에 연결하여 문제 없이 빠르게 설정됨
     * 프로젝트에 'Kibana와의 비교' 섹션이 필요하다는 의견이 있음
          + Kibana를 사용 중인 사용자가 HyperDX로 전환해야 하는 이유를 설명해야 함
     * HyperDX를 사용하여 관찰 가능성을 개선했으며, Google의 관찰 가능성 제품보다 검색 기능이 훨씬 뛰어남
     * v2 브랜딩이 더 ""완전한 기능""의 관찰 가능성 제품이 사라지는 것을 의미하는지, 아니면 ClickHouse 위에 재구축되는 것인지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=17824","AI의 롱테일의 롱테일

     * 2022년 11월 ChatGPT 출시 이후, AI 스타트업은 투자자들의 집중적인 관심을 받았으며, 2024년 2분기 전체 벤처 자금의 49%가 AI 및 머신러닝 스타트업에 투자됨.
     * OpenAI와 같은 모델 제공업체, Perplexity나 Jasper와 같은 AI 네이티브 회사들이 주목받고 있지만, 실제로 AI의 영향을 받는 ""비AI"" 회사들의 수가 더 많음.
     * 우리는 이러한 비AI 회사들에 미치는 AI의 영향을 ""AI의 롱테일""이라 부르며, 이 롱테일은 회사들이 AI를 통합하는 방식에 따라 네 가지 범주로 나눌 수 있음:
          + 독립적인 모델 구축
          + OpenAI의 GPT-4와 같은 기존 모델 활용
          + Meta의 Llama와 같은 오픈 소스 모델을 기반으로 구축
          + ChatGPT와 같은 사전 개발된 AI 도구 사용
     * 독립적이고 독자적인 모델 구축은 AI를 활용하는 가장 자원 집약적인 방식이며, 일반적으로 대규모의 독창적인 데이터 소스를 가지고 있으며, 새로운 모델을 훈련할 충분한 인적 및 재정적 자원을 가진 회사에 적합함.
     * OpenAI의 GPT 모델이나 Anthropic의 Claude와 같은 닫힌 소스 모델들은 수십억에서 수조 개의 매개변수로 훈련되었으며, 코딩에서 고객 서비스에 이르기까지 다양한 분야에서 정확하고 세부적인 결과를 생성할 수 있으며, API로 쉽게 접근 가능함.
     * Mistral이나 Meta의 Llama와 같은 오픈 소스 모델들은 강력한 도구로, Llama 3.1은 4050억 개의 매개변수로 훈련됨. 닫힌 소스 모델과 달리, 오픈 소스 모델은 투명성과 유연성을 제공하며, 모델 가중치를 조정하여 고객의 특정 요구에 맞출 수 있음.
     * ChatGPT와 같은 서드파티 AI 도구는 통합이 가장 쉬우며, 고객들은 내부적으로 모델을 구축하거나 조정할 필요 없이 완성된 도구를 사용할 수 있음.
     * AI 전략은 회사마다 다르지만, 성공적인 회사들은 AI를 기존 사업을 보완하는 데 사용하고 있으며, 동종 업계의 성공 사례를 모방하고, AI 기술이 발전함에 따라 유연성을 유지하고 있음.

AI에서 Hype의 파워 법칙

     * 정규분포 vs. 파워 법칙: 정규분포는 IQ, 시험 점수, 혈압 등 일상에서 흔히 볼 수 있는 분포로, 평균값 주변에 데이터가 몰려 있음. 반면, 세상의 많은 현상들은 소수의 극단적인 사례가 대부분의 결과를 결정하는 파워 법칙에 의해 정의됨.
          + 예를 들어, 2023년 S&P 500 지수의 상승률 절반 이상은 1.4%에 불과한 7개의 주식이 차지함.
          + 벤처 캐피탈에서도 소수의 성공적인 투자가 펀드의 대부분의 수익을 차지함. 예: Union Square Ventures 창립자 Fred Wilson은 ""한 건의 투자로 전체 펀드의 수익을 올릴 수 있다""고 언급함.
     * AI 분야에서의 파워 법칙: Dot Com 버블 때 인터넷 회사에 자본이 집중되었던 것처럼, 2024년에는 AI 분야가 유사한 하이프를 보이고 있음.
          + YCombinator의 2024년 여름 코호트에서 75% 가 AI 관련 제품을 개발 중임.
          + 2024년 2분기 벤처 캐피탈 투자 중 49% 가 AI 및 머신러닝 스타트업에 집중되었음(2022년 2분기에는 29%였음).
          + 2020년 초창기 AI, SaaS, 핀테크 기업의 중간 평가액은 각각 $25M, $27M, $28M이었으나, 2024년에는 $70M, $46M, $50M으로 증가함.
          + OpenAI는 적자였지만, 2024년 10월 $157B 평가로 새로운 자본을 유치함(매출 대비 39배의 가치 평가).
     * AI 네이티브 스타트업의 한계: 생성형 AI와 LLM의 출현으로 AI가 기업의 핵심 제품으로 자리잡고 있음. 그러나 AI 네이티브 회사들이 투자자의 관심을 독점하고 있는 동안, 비AI 회사들도 AI 기술 발전의 영향을 받음. 대부분의 기업들은 본질적으로 AI 회사가 아니지만, AI의 발전이 그들의 비즈니스 모델에 큰 영향을 미칠 것임.
     * 인터넷의 롱테일에서 AI의 롱테일로: Dot Com 버블 이후, 인터넷 트렌드를 따라 적응한 비인터넷 회사들이 큰 성공을 거두었음. 예를 들어, Walmart는 1962년에 설립되었지만, 2023년 전자상거래 매출이 $73B에 달하며, 2017년 대비 5배 성장함.
          + 오늘날에는 ""AI의 롱테일""이 등장하고 있으며, 이는 핀테크, SaaS, 헬스케어, 전자상거래, 물류 등 다양한 산업 분야의 비AI 회사들을 포함함.
     * AI의 광범위한 영향: 사전 구축된 AI 도구 사용부터 내부 워크플로우에 AI를 통합하는 것까지, 다양한 산업의 회사들이 AI를 활용하거나 활용을 시도하고 있음. 인터넷이 비인터넷 회사들에 미친 영향처럼, AI도 단순히 AI 모델을 구축하는 회사들에만 국한되지 않는 광범위한 영향을 미칠 것임.

AI의 롱테일 정의

     * AI 회사들은 AI에 대한 관심과 투자의 대부분을 차지하며, 두 가지 카테고리로 나눌 수 있음:
          + 모델 회사: OpenAI, Anthropic, Mistral과 같이 독점 또는 오픈 소스 LLM(대형 언어 모델)을 개발하여 사용자에게 제공하는 회사들.
          + AI 네이티브 회사: Perplexity, Jasper처럼 AI 모델을 기반으로 제품과 서비스를 제공하는 회사들.
     * 첫 번째 카테고리에서는 모델 자체가 제품임. 두 번째 카테고리에서는 AI 모델이 기능의 핵심을 이루지만, 모델이 없으면 회사 자체가 존재하지 않음. 예를 들어, Baseten의 CEO Tuhin Srivastava는 ""모델이 없다면 AI 네이티브 회사는 존재하지 않는다""고 설명함.
     * 그러나 대부분의 회사들, 예를 들어 Bloomberg, Walmart, Canva 등은 이 두 카테고리에 속하지 않음. 이들은 ""AI의 롱테일""이라 불리는 더 넓은 범주에 속함.
     * 롱테일의 주요 질문들
          + AI 기술의 발전은 ChatGPT 출시 이전부터 존재했던 비즈니스 모델에 어떤 영향을 미칠 것인가?
          + 컨설팅 회사의 분석가부터 기술 회사의 소프트웨어 엔지니어까지, 다양한 산업의 직원들이 AI를 어떻게 사용하고 있으며, 앞으로 어떻게 사용할 것인가?
          + 회사들은 AI 시장에서 어떻게 포지셔닝하고 있는가? 자체 모델을 구축하고 있는가, 아니면 외부에서 개발된 도구를 사용하고 있는가?
     * 다양한 회사들의 AI 활용 사례
          + 예: Ramp(비용 관리 플랫폼)와 Atlassian(호주 SaaS 회사)은 기존 데이터와 워크플로우 위에 생성형 AI를 추가함.
          + Klarna(스웨덴 핀테크 회사)는 내부 운영 효율성을 개선하기 위해 AI에 투자했으며, AI 챗봇이 700명의 풀타임 고객 서비스 직원을 대신할 정도의 성과를 보였음.
          + PwC는 2024년 5월에 ChatGPT Enterprise 기능을 10만 명의 직원에게 제공하기로 계약함. 또한, 2024년 미국 상공회의소 설문조사에서 98%의 중소기업이 AI 도구를 사용하고 있다고 응답함.
     * 과거와 현재의 비교
          + 인터넷 붐 이후, 비인터넷 회사들이 전자상거래 채택을 통해 큰 성공을 거둔 사례와 유사하게, ""AI의 롱테일""은 다양한 산업에 걸쳐 비AI 회사들이 AI의 영향을 받을 것임.
          + 인터넷이 비인터넷 회사들에 광범위한 영향을 미쳤듯이, AI도 단순히 AI 모델을 구축하는 회사들에 국한되지 않고 더 넓은 경제에 영향을 미칠 것임.
     * AI 롱테일의 네 가지 레이어
          + 독립적인 내부 AI 모델 구축: 독점적인 데이터세트를 활용해 자체 AI 모델을 구축하는 회사들.
          + 닫힌 소스 모델 활용: OpenAI, Anthropic 등의 닫힌 소스 모델을 사용하는 회사들.
          + 오픈 소스 모델 활용: Llama, Mistral, Hugging Face의 모델을 사용하는 회사들.
          + 사전 구축된 AI 도구 통합: 이미 개발된 AI 도구를 워크플로우에 통합하는 회사들.
     * 이 네 가지 레이어는 고정된 것이 아니며, 다양한 방식으로 AI를 사용하는 회사들은 여러 레이어에 걸쳐 분류될 수 있음. AI 기술의 빠른 발전에 따라 회사들이 AI를 활용하는 방식도 계속 변화하고 있음.

레이어 1: 자체 모델 구축

     * 가장 자원 소모적인 전략: AI의 롱테일에서 가장 비용이 많이 드는 전략은 독립적인 모델을 처음부터 구축하는 것임. 이 전략에 적합한 회사는 (1) 자본이 풍부하고 (2) 독점적인 가치 있는 데이터세트를 보유한 회사임.
          + 예: Sam Altman에 따르면, GPT-4의 훈련 비용은 $100M에 달함.
          + 자체 모델은 높은 비용이 들지만, 독점적인 데이터세트를 보유한 회사에게는 (A) 더 세밀하고 회사 맞춤형 결과를 제공하며, (B) 모델과 가중치에 대한 완전한 통제력을 제공하고, (C) 닫힌 소스 모델 대비 비용 절감의 가능성을 제공함.
     * 블룸버그 (Bloomberg)
          + Bloomberg는 뉴욕에 본사를 둔 금융 데이터 및 미디어 회사로, 연간 $12B 이상의 수익을 올리고 있음. 회사의 대표 제품인 Bloomberg Terminal은 전체 매출의 약 2/3를 차지함.
          + Bloomberg는 8천 명 이상의 엔지니어 중 350명 이상이 AI 엔지니어링 팀 소속이며, 다양한 AI 연구 논문을 매년 발표함.
          + 2023년 3월, Bloomberg는 금융 특화 LLM인 BloombergGPT를 발표함. 이 모델은 총 50B 파라미터로 구성되었으며, 345B 개의 공개 데이터셋과 40년간 수집한 363B 개의 금융 문서 데이터셋을 결합해 훈련됨.
          + 훈련 비용은 $2.7M에서 $10M 이상으로 추정됨.
          + 2024년 1월, Bloomberg는 자체 모델로 추정되는 AI 생성 요약 기능을 Terminal에 도입했으며, 이는 사내 분석가들의 도움을 받아 훈련됨.
     * 리플릿 (Replit)
          + Replit은 웹 기반의 통합 개발 환경(IDE)으로, 협업 및 코드 자동 완성, 디버깅 기능을 제공함.
          + Replit의 AI 기능은 독자적으로 개발된 모델, 오픈 소스 모델의 파인튜닝, 그리고 OpenAI 및 Anthropic의 닫힌 소스 모델을 결합하여 제공됨.
               o 2023년 4월과 10월, Replit은 자체 코드 완성 모델을 출시하였으며, 이를 Hugging Face에서 공개함.
               o 2024년 4월, 오픈 소스 모델을 파인튜닝하여 자동 디버깅 기능을 출시함.
               o 2024년 9월, 자체 7B 파라미터 모델 기반의 자동 페어 프로그래머를 출시했으나, 일부 사용자들은 초기 기능에 대해 불만을 표했음.
     * 캔바 (Canva)
          + Canva는 호주 기반의 웹 디자인 플랫폼으로, 2024년 10월 $49B의 평가를 받음.
          + 2023년 10월, Canva는 Magic Studio라는 생성형 AI 디자인 스튜디오를 출시함. 이 스튜디오는 사용자들이 생성한 콘텐츠를 훈련 데이터로 사용하여 ""독점 모델""을 구축함.
               o 사용자 데이터는 허가 없이 사용되지 않으며, 참여한 사용자들에게는 보상을 지급함.
          + 2024년 7월, Canva는 이미지 생성 플랫폼 Leonardo.Ai를 인수하여 Magic Studio에 통합할 계획임.
     * 월마트 (Walmart)
          + Walmart는 2018년부터 고객 대면 AI 도구를 구축해왔으며, 2024년 6월에는 모든 생성형 AI 기능에서 자체 모델로 전환함.
               o 2024년 10월, Walmart는 Wallaby라는 리테일 특화 LLM을 발표함. 이 모델은 Walmart의 데이터로 훈련되어 고객 서비스와 관련된 자연스러운 응답을 생성함.
          + Walmart는 AI를 활용해 고객 지원 챗봇, 상품 카탈로그 정리, 증강 현실 쇼핑 경험 등을 개선하고 있음. 또한, Roblox와 같은 온라인 플랫폼에서 가상 쇼핑 경험도 제공함.
          + Walmart는 자체 모델을 선호하지만, 특정 사용 사례에 따라 타사 모델도 여전히 사용할 계획임.

레이어 2: 기존 닫힌 소스 모델 사용

     * 독립적으로 모델을 구축하는 대신, 회사들은 OpenAI, Anthropic 등의 닫힌 소스 AI 모델을 API로 접근해 자체 솔루션을 구축할 수 있음.
     * 닫힌 소스 모델은 다양한 분야에서 정확한 출력 결과를 제공할 수 있어 전사, 고객 서비스, 데이터 추출 등의 일반적인 작업에 유용함.
          + OpenAI의 GPT 및 Anthropic의 Claude 모델은 매우 높은 품질의 출력을 제공함.
     * API 접근의 용이성 덕분에, 엔지니어링 측면에서 AI 도입이 가장 쉬운 방법 중 하나로 꼽힘.
     * 최근에는 비용 효율성과 빠른 추론 성능을 제공하기 위해 GPT-4o mini와 같은 소형 모델도 출시됨.
     * Zapier
          + Zapier는 워크플로 자동화 플랫폼으로, 2011년에 설립되었으며 2023년 8월 기준으로 $5B의 평가를 받음.
          + OpenAI 모델을 활용해 내부 자동화 프로세스를 개선하며, 예를 들어 회의 녹취록 생성 및 요약 기능과 웹 기사 요약 기능 등이 있음.
          + Zapier의 Copilot 도구는 자연어 프롬프트를 사용해 워크플로를 생성할 수 있게 해줌.
     * Klarna
          + Klarna는 스웨덴의 핀테크 회사로, ""Buy Now, Pay Later"" 서비스를 제공하며 2024년 9월에는 Salesforce와 Workday를 AI로 대체한다고 발표함.
          + OpenAI 모델을 활용한 고객 서비스 AI 어시스턴트를 통해 고객 지원 요청의 2/3를 처리하며, 700명의 풀타임 인력의 업무량을 대체함.
          + 내부적으로는 AI 어시스턴트 Kiki를 사용해 직원들이 매일 2천 개 이상의 질문에 답변할 수 있게 돕고 있음.
     * Ramp
          + Ramp는 2019년에 설립된 B2B 핀테크 스타트업으로, 다양한 재무 소프트웨어 제품을 제공함.
          + GPT-4 및 Claude 모델을 사용해 계약서 데이터 분석, 거래 분류, 영수증 메모 작성 등을 자동화함.
          + 내부적으로는 AI를 사용해 고객 통화 요약 및 질의 응답 기능을 제공하며, 이는 Slack과 통합되어 있음.
     * Atlassian
          + Atlassian은 Jira, Trello, Confluence 등의 팀 협업 소프트웨어를 제공하는 $50B 평가의 기업임.
          + 2023년 4월에 Atlassian Intelligence라는 생성형 AI 기능을 발표함.
          + 이 기능은 OpenAI 모델과 Atlassian의 자체 모델을 결합해 사용함.
          + AI 어시스턴트 Rovo는 Jira 검색 기능을 강화하고, No-Code 에이전트를 통해 마케팅 콘텐츠 생성과 피드백 수집 등을 자동화함.
     * Canva
          + Canva는 Magic Studio에서 독점 모델을 사용하지만, 일부 기능에는 닫힌 소스 모델을 활용함.
               o 예: OpenAI 모델을 사용한 글쓰기 편집기는 업로드된 샘플의 톤을 맞추어 콘텐츠를 생성함.
          + Canva는 또한 다양한 AI 앱 마켓플레이스를 운영하며, 여기에는 OpenAI의 DALL-E, Google의 Imagen 앱 등이 포함됨.

레이어 3: 오픈 소스 모델 기반 개발

     * 독립적으로 모델을 구축하거나 OpenAI의 GPT-4o 같은 닫힌 소스 모델을 사용하는 대신, 많은 회사들이 Meta의 Llama, Mistral, Hugging Face 등의 오픈 소스 모델을 활용해 자체 도구를 구축하고 있음.
     * 오픈 소스 모델은 높은 사용자화와 투명성, 데이터 프라이버시 강화, 비용 절감의 이점을 제공함.
          + Databricks의 2024 보고서에 따르면, LLM을 사용하는 기업의 76% 가 오픈 소스를 선택하고 있음.
     * 오픈 소스 모델은 별도의 라이선스 비용이 없고 자체 호스팅이 가능해, 대규모 클라우드 비용을 피할 수 있음.
     * 기업 고객의 경우, 저작권 문제와 데이터 유출 위험이 낮아지는 점도 중요한 요인임.
     * VMware
          + VMware는 가상화 소프트웨어 제공업체로, 2023년에 Broadcom에 $69B 에 인수됨.
          + VMware는 Hugging Face와 협력하여 SafeCoder라는 오픈 소스 기반의 코딩 어시스턴트를 개발함.
          + StarCoder라는 15.5B 파라미터 모델을 활용했으며, 이 모델은 오픈 소스 프로젝트에서 데이터를 수집해 저작권 문제를 최소화함.
          + 기업 고객이 StarCoder 모델을 자체 코드를 사용해 파인 튜닝할 수 있어, 도메인 지식이 필요한 내부 작업에 도움이 됨.
     * Mathpresso
          + Mathpresso는 한국의 에듀테크 기업으로, 대표적인 앱 QANDA를 통해 학생들이 수학 문제의 스크린샷을 업로드하면 자동으로 해답을 제공함.
          + 2023년, Meta의 Llama 2 모델을 사용해 MathGPT라는 수학 특화 LLM을 개발함.
          + MathGPT는 학습 데이터로 QANDA의 수학 솔루션을 사용했으며, 기존 상용 모델보다 높은 사용자화와 교육 환경에 맞춘 정확도를 제공함.
          + MathGPT는 MATH 및 GSM8K 벤치마크에서 Microsoft Tora를 능가하며, 13B 파라미터 이하 모델 중 1위를 차지함.
     * Brave
          + Brave는 개인정보 보호를 우선으로 하는 웹 브라우저로, 광고 차단, 트래커 차단 등의 기능을 제공함.
          + 2023년 8월, Leo라는 AI 어시스턴트를 출시하며, Meta의 Llama 2와 Mistral의 Mixtral 8x7B 오픈 소스 모델을 사용함.
          + Brave는 사용자 데이터를 저장하지 않으며, 사용자 프라이버시 보호를 위해 자체 호스팅 모델을 사용함.
          + Anthropic의 Claude 모델도 지원하지만, 기본 설정은 오픈 소스 모델로 되어 있음.
     * Replit
          + Replit은 사용자 정의 코드 완성 모델 외에도, 2024년 4월에는 Hugging Face의 7B 파라미터 모델을 파인 튜닝해 Code Repair AI 에이전트를 출시함.
          + 유료 사용자는 Replit의 오픈 소스 모델과 다른 닫힌 소스 모델 간 전환이 가능해, 다양한 고객 요구에 맞춤 솔루션을 제공함.

레이어 4: 사전 구축된 AI 도구 사용

     * 기업들이 자체적으로 AI 모델을 구축하지 않고, 완성된 생성형 AI 도구를 구매해 사용하는 경우임.
     * 외부 도구의 주요 장점은 비용 절감임. 모델을 훈련하거나 파인 튜닝하는 것보다 특정 도구를 구매하는 것이 더 저렴함.
     * 회사들이 외부 AI 도구를 선택하는 세 가지 주요 이유:
          + 일반적인 지식 연구 및 브레인스토밍 도구가 필요한 경우
            - 예: BCG의 연구에 따르면, 생성형 AI 도구는 작업 생산성을 높이고, 특히 기술 전문 지식이 부족한 경우 도움이 됨.
          + 일반적인 비즈니스 도구 (예: 고객 지원 챗봇)가 필요한 경우
            - 자체 모델 구축보다 제3자 도구를 사용해 빠르게 혜택을 얻는 것이 비용 효율적임.
          + 특정한 산업 맞춤형 도구가 이미 개발된 경우
            - 예: 법률 계약 검토 도구인 Kira는 많은 법률 회사에서 활용되고 있음.
     * Boston Consulting Group (BCG)
          + BCG는 전 세계 32K명의 직원과 $12.3B의 수익을 올리는 글로벌 컨설팅 회사임.
          + 2023년, BCG는 OpenAI의 ChatGPT를 사용해 내부 실험을 진행했으며, 생성형 AI가 창의적인 작업에서 40% 성과 개선을 보였음.
          + 예: 새로운 신발 제품 아이디어 생성, 마케팅 슬로건 작성 등의 창의적 문제 해결에서 성과 향상.
          + 2024년, BCG는 ChatGPT Enterprise를 모든 직원에게 도입하며, AI 도구의 높은 유용성을 인정함.
     * Dollar Shave Club
          + Dollar Shave Club은 Unilever에 $1B에 인수된 면도용품 공급업체로, 이후 Nexus Capital Management에 매각됨.
          + 자체 챗봇 대신 Zendesk의 Answer Bot을 사용해 고객 지원을 자동화함.
               o Answer Bot은 12M 건의 고객 상호작용 데이터를 학습해, 간단한 고객 질문에 몇 초 만에 답변함.
          + 매달 4.5K 건의 티켓을 해결하며, 회사의 전체 티켓 볼륨의 10%를 차지함.
     * Law Firms (법률 회사)
          + 법률 계약 검토는 복잡한 용어와 조항들로 가득 차 있음.
          + 많은 법률 회사들은 내부 AI 도구를 개발할 리소스가 부족해, Kira와 같은 외부 AI 도구를 활용함.
               o 예: Skadden, Hogan Lovells, Paul, Weiss 등의 대형 법률 회사들이 Kira를 사용해 계약 검토 시간을 최대 60% 단축함.
          + Kira는 1K개 이상의 일반적인 조항 및 데이터 포인트를 신속하게 분석할 수 있어, M&A 실사, 대출 계약 검토 등에 사용됨.

Long Tail 기업들이 AI를 활용하는 세 가지 방식

     * Long Tail에 속하는 기업들은 Bloomberg가 금융 전문가를 위한 맞춤형 도구를 개발하고, BCG 컨설턴트들이 ChatGPT를 생산성 도구로 활용하는 등 다양한 방식으로 생성형 AI를 적용하고 있음
     * 이러한 도구를 구동하는 모델은 Canva의 이미지 생성 모델부터 Ramp의 GPT 통합 모델까지 다양함.
     * AI를 적용하는 기업들의 패턴을 살펴보면, 현재 기술 발전 속도에도 불구하고 다음 세 가지 주요 트렌드가 두드러짐.
          + AI를 기존 비즈니스를 보완하는 도구로 사용
               o 대부분의 Long Tail 기업들은 이미 잘 확립된 제품과 서비스를 제공하고 있으며, AI는 이를 보완하고 개선하는 역할을 함.
                    # 예: Replit은 AI 도구를 출시하기 전에 이미 성공을 거두었고, AI는 기존 개발자 도구의 연장선에서 제품 개선에 사용됨.
                    # Brave의 Leo AI는 브라우저의 프라이버시 우선 정책을 확장한 생성형 AI 도구임. Brave는 8년간 프라이버시 보호를 위해 노력해 왔으며, Leo는 이 원칙을 이어가는 도구임.
                    # Walmart는 저렴한 가격과 유연한 반품 정책이 핵심이며, AI는 이를 보조하는 역할을 할 뿐, 핵심 전략을 대체하지 않음.
               o 결론적으로, 기업들은 프로세스 효율성을 높이기 위해 AI를 내부적으로 도입하지만, 핵심 사용자 경험이 우선됨.
          + 동종 업계의 AI 전략을 복제
               o 기업들은 성공적인 AI 전략을 빠르게 채택하여 경쟁력을 유지함.
                    # 예: BCG는 ChatGPT를 활용해 창의적 작업 및 코딩 작업의 성과를 크게 향상시켰음. 이러한 결과는 다른 컨설팅 회사인 McKinsey와 Bain이 유사한 AI 도구를 채택하도록 압박할 가능성이 있음.
                    # Brave와 VMware는 서로 다른 핵심 제품을 제공하지만, 둘 다 데이터 프라이버시를 중시하며, 이를 위해 오픈소스 모델을 선택함.
               o 만약 선도 기업들이 AI 도입으로 지속적인 경쟁 우위를 확보한다면, 다른 기업들도 유사한 AI 전략을 채택해야 할 것으로 예상됨.
          + 유연한 AI 전략 유지
               o AI 활용 방식은 고정되지 않으며, 기업들은 다양한 전략을 적용하거나 수정 할 수 있음.
               o 예: OpenAI는 초기에는 점점 더 큰 모델을 구축했지만, 2024년에는 GPT-4o mini와 같은 작고 효율적인 모델을 출시함. 이는 비용 절감과 빠른 추론 속도를 제공함.
               o Ramp의 CTO는 GPT-4o mini가 90%의 요구 사항을 충족한다고 언급하며, 큰 모델보다 작은 모델이 더 효율적일 수 있다고 평가함.
                    # Baseten의 CEO Tuhin Srivastava는 기업들이 자체 모델을 구축하려는 경향이 있지만, 이를 위해 과도한 자원과 시간이 소모될 수 있다고 지적함.
                    # Srivastava의 조언: ""먼저 확실한 도구를 사용하고, 점진적으로 자체 모델로 대체"" 하는 전략이 중요함.
                    # 기업들은 새로운 AI 기술이 출시될 때 유연하게 대응할 수 있는 위치에 있어야, 빠르게 개선된 기술을 활용할 수 있음.

Long Tail 기업들의 최종 목표

     * 현재 AI에 대한 관심과 열기는 모델 및 AI 네이티브 기업에 집중되어 있지만, 비 AI 네이티브 기업들 사이에서도 AI 활용 사례가 점점 더 두드러지고 있음
          + 이들 기업은 고객 서비스 챗봇부터 증강 현실 쇼핑 경험까지 다양한 AI 솔루션을 도입하고 있음.
               o AI 혁신의 속도를 감안할 때, Long Tail 기업들이 AI를 어떻게 사용하는지를 이해하는 가장 쉬운 방법은 이 딥다이브에서 제시한 네 가지 레이어로 분류하는 것임:
                    # 커스텀 모델, 닫힌 소스 모델, 오픈 소스 모델, 서드파티 AI 도구
     * 이 딥다이브에서 다룬 다양한 예시는 기업들이 서로 다른 AI 도구를 구축하고 채택한 방식을 보여주어, 독자들이 자신의 조직에서 AI 통합을 어떻게 접근해야 할지를 이해하는 데 도움을 줌.
          + 네 가지 레이어는 각각 학습 시간, 비용, 커스터마이제이션, 프라이버시, 품질과 관련된 트레이드오프를 제시하지만, 모델 간의 전환 비용이 낮기 때문에 고객들은 다양한 솔루션을 실험할 유연성을 가질 수 있음.
     * Long Tail 기업들의 최종 목표는 AI 기업이 되는 것이 아니라, AI 도구를 활용해 핵심 비즈니스를 보완하고 가속화하는 것임.
"
"https://news.hada.io/topic?id=17745","새로운 AI 시대에 Palantir가 주는 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       새로운 AI 시대에 Palantir가 주는 교훈

     * 팔란티어는 최근 S&P 500에 편입됨
     * 초기 팔란티어는 “컨설팅 회사”로 잘못 평가되었음. 많은 엔지니어들이 고객과 함께 일하며 고객의 비즈니스 문제를 깊이 이해함
     * 팔란티어의 엔지니어들은 Forward Deployed Engineers로 불리며, 고객의 업무, 비즈니스 모델, 고통점 등을 깊이 이해하고 고객의 요구에 맞추어 제품을 개선하고 확장함
     * 이러한 서비스 접근 방식은 팔란티어의 경쟁 우위로 작용했으며, 고객 맞춤형 솔루션을 개발하여 플랫폼화함
     * 팔란티어의 핵심 개념 중 하나는 Ontology(온톨로지) 로, 데이터를 체계적으로 구조화하여 복잡한 비즈니스 문제를 해결함
          + Ontology : 고객의 데이터와 프로세스를 매핑하고 솔루션에 인코딩하는 고유한 접근 방식

서비스 중심의 비즈니스 모델의 변화

     * 최근 AI 언어 모델(LLMs)의 도입으로, 기존의 서비스 회사들이 더욱 매력적인 비즈니스 모델로 변모하고 있음
     * AI는 복잡한 언어 기반 작업을 자동화하고, 인간보다 더 나은 오류 감지 능력을 가질 수 있음
     * 서비스와 제품의 혼합인 하이브리드 비즈니스 모델이 증가하고 있으며, 이를 통해 고객의 실제 문제를 해결하고 더 많은 가치를 포착
     * 기술을 사용하여 두 가지 방식으로 운영 레버리지 생성:
         1. 기존 공급업체보다 빠르고 저렴하며 더 나은 서비스 품질로 독특한 가치 제안 생성
         2. 원가에서 노동력 제거, 마진 구조 변경, 경쟁사 대비 확장 용이
     * AI는 많은 전통적인 서비스 산업의 업무 효율성을 크게 향상시키며, 생산성을 두 배 이상 증가시킬 가능성이 있음

AI 서비스 기업의 특징과 기회

     * AI 서비스 기업은 ""Service-as-Software"" 모델을 채택하며, 빠르게 성장하는 스타트업들이 이 방식을 활용 중
     * 모델의 성능만으로는 충분하지 않을 때, Copilot(코파일럿) 처럼 사용자를 보조하는 솔루션을 판매함. 예시: Numeric의 기술 회계 AI
     * AI만으로는 복잡한 프로세스를 자동화하기 어렵기 때문에, 기술과 인간의 전문성을 결합한 접근 방식이 필수적임
     * AI 서비스 모델의 도전 과제와 기회
          + 리스크 1: 누구나 모델을 사용할 수 있어, 빠르게 경쟁자가 생겨나 기존 고객을 빼앗길 위험이 있음
          + 리스크 2: 새로운 AI 모델의 성능 향상으로, 기존 제품의 일부 기능이 중복될 가능성이 있음
          + 그러나 복잡한 프로세스의 전체 자동화는 어려움. 기술과 인간의 전문성을 결합한 접근이 필수적임
     * AI 서비스 기업의 운영 방식
          + 차별화된 가치 제안: 기존 서비스 제공자보다 더 빠르고 저렴하며 품질 높은 서비스 제공
          + 단위 경제 개선: 비용에서 큰 부분을 차지하는 인력을 줄여, 비즈니스 확장성과 마진 구조 개선
               o 예: Loop는 화물 감사 및 결제 자동화를 통해 전체 워크플로를 재설계하고 효율성을 극대화함
          + 고객 입장에서는 다수의 공급업체와 소프트웨어를 관리할 필요 없이, 통합된 AI 솔루션을 통해 모든 기능을 아웃소싱할 수 있음
     * 성공적인 AI 서비스 기업의 4가지 핵심 원칙
          + 전체 비즈니스 온톨로지를 매핑하여 R&D 집중의 우선순위 지정
          + 메트릭에 집중하기
          + 유기적 성장과 인수합병의 병행
          + 적합한 팀 구성

성공적인 AI 서비스 기업의 원칙

  1. 전체 비즈니스 온톨로지를 매핑하여 R&D 우선순위 설정

     * 온톨로지 개념: 팔란티어는 비즈니스 온톨로지를 통해 회사의 모든 운영을 뒷받침하는 데이터 구조와 워크플로를 정의함
          + 온톨로지는 데이터, 논리, 액션으로 구성되며, 비즈니스 프로세스 맵(BPM) 역할을 함
          + 예시: 항공 산업에서는 비행기, 항공편, 항공사, 공항, 지연 등의 객체와 이를 연결하는 관계를 정의함
     * 온톨로지의 중요성:
          + 온톨로지는 고객의 워크플로를 소프트웨어로 매핑하는 데 필수적이며, 특히 기술 중심 서비스 회사에서는 더욱 중요함
          + 기술과 운영의 결합으로 고객, 직원, 소프트웨어 시스템 간의 3자 관계를 이해하고 자동화 및 최적화를 가능하게 함
          + 팔란티어는 초기부터 온톨로지를 중시하며, 이를 통해 데이터 통합 및 AI 솔루션 분야에서 선도적인 위치를 차지함
     * 데이터 통합과 자동화:
          + 대부분의 조직에서는 데이터가 다양한 형식과 장소에 분산되어 있음
          + 온톨로지를 먼저 구축하면, 이 구조를 기반으로 데이터 통합과 자동화를 효과적으로 수행할 수 있음
     * Reserv의 사례:
          + Reserv는 손해 사정사의 워크플로를 깊이 이해하고, 자체 개발할 기능과 라이선싱할 기능을 정확히 구분함
          + 이를 통해 대형 고객 계약을 빠르게 확보하고 확장할 수 있었음
     * 온톨로지의 실질적 이점:
          + SaaS 제품은 고객의 워크플로를 소프트웨어로 매핑하는 것이 목적임
          + 기술 중심 서비스 회사는 고객, 직원, 소프트웨어 시스템 간의 관계를 포함하는 온톨로지를 만들어야 함
          + 이를 통해 소프트웨어와 인력이 협력하는 긍정적인 피드백 루프를 형성함
     * 온톨로지 맵핑의 장점:
          + 초기 온톨로지 작업은 비전 정립, 목표 설정, 팀 조율에 중요한 역할을 함
          + 투자자와 조언자들이 실질적인 피드백을 제공할 수 있는 기회를 만들어 줌
          + 올바른 방향을 선택하지 않을 경우, 잘못된 결정으로 인해 큰 비용이 발생할 수 있음

  2. 메트릭(Metrics, 지표)에 집중하기

     * 온톨로지와 지표:
          + 온톨로지를 구축한 후, 비즈니스의 핵심 지표(KPIs)를 파악하기 쉬워짐
          + SaaS 산업에서는 표준화된 지표가 많아, 운영 분석 도구를 통해 쉽게 모니터링 가능
          + SaaS 기업은 높은 마진 덕분에 운영 지표에 덜 엄격할 수 있음. 하지만 서비스 중심 비즈니스는 그렇지 않음
     * 서비스 비즈니스의 지표가 가진 중요성:
          + 서비스 회사는 제품 중심 기업보다 가치 창출이 복잡하고 측정이 어려움
          + 다양한 산업에서 공통된 지표를 찾기 어렵기 때문에, 올바른 지표들을 선택하지 않으면 P&L 문제로 이어질 수 있음
          + 예시: 자산 관리 회사의 기본 지표는 관리 자산이지만, 온톨로지는 장기적인 고객 만족도, 포트폴리오 성과, 상담 효율성을 연결하여 더 강력한 지표를 설정할 수 있게 함
     * 온톨로지 기반 지표 분석:
          + 온톨로지 분석은 예상치 못한 레버리지 포인트를 드러낼 수 있음
          + 예시: 고객 지원에서는 초기 응답 속도보다 문제 분류의 정확도가 더 중요할 수 있음
          + Reserv는 클레임 프로세스의 일부를 자동화하고, 처리 속도뿐 아니라 고객 만족도와 현금 흐름에도 미치는 영향을 분석함
     * 지표의 중요성:
          + 기술 중심 서비스 비즈니스의 핵심은 인력과 소프트웨어의 협력을 통해 마진과 서비스 품질을 향상시키는 것임
          + 지표는 단순히 분기별 보고서에 포함되는 것이 아니라, 회사 전체의 초점이 되어야 함
          + 성공적인 서비스 기업들은 메트릭스를 단순히 측정하는 것이 아니라, 이를 통해 의사결정, 투자 우선순위, 팀 조정을 이끌어 냄
          + 모든 직원이 자신의 핵심 지표와 이를 개선하기 위한 역할을 이해하고 있음

  3. 유기적 성장(Organic Growth)과 인수합병(M&A) 병행

     * 과거 인수합병의 문제점:
          + 2010년대 많은 벤처 투자자들은 인수합병(M&A)을 회피하는 경향이 있었음
          + 인수합병은 종종 제품 결함이나 판매 문제를 해결하기 위한 임시방편으로 사용되었으며, 근본적인 문제인 제품-시장 적합성 부족을 해결하지 못했음
     * 현대 기술 서비스 회사의 변화:
          + 오늘날의 기술 서비스 회사들은 초기 시장 진입의 ""콜드 스타트"" 문제를 해결하기 위해 인수합병을 전략적으로 사용함
          + 특히 규제가 많은 시장이나 전환 비용이 높은 산업에서는 기존 회사를 인수하는 것이 효과적임
          + 인수합병을 통해 채용 및 영업 부담을 줄이고, 기술 기반의 마진 개선에 집중할 수 있음
     * 인수합병의 이점:
          + 잘 수행된 인수합병은 성장 촉진제가 될 수 있음
          + 예를 들어, 마진이 15%인 기존 서비스 회사는 약 6-8배의 현금 흐름 배수로 평가됨. 반면, 잘 구축된 AI 서비스 회사는 이미 60%의 마진을 가지고 있으며, 더 높은 배수로 평가받을 가능성이 큼
          + 인수한 회사를 통합하면 기존 매출의 경제 구조가 개선되고, 성장 속도가 재가속될 수 있음
          + AI 회사는 경쟁사를 매출의 1배 가격으로 인수하고, 이를 통해 $100M 투자로 $60M의 현금 흐름, $600M의 주식 가치를 창출할 수 있음
     * 새로운 인수합병 전략:
          + 이 접근 방식은 전통적인 인수합병과 다르며, 기술과 결합된 인수합병이 미국 산업의 새로운 성장 단계로 이어질 가능성이 있음
          + 외부에서는 벤처 캐피털(VC)이 사모펀드(PE) 전략을 따르는 것으로 보일 수 있지만, 실제로는 기술 기반의 성장 전략임
          + 기술이 서비스 워크플로의 생산성을 크게 향상시킬 수 있는 경우, 인수합병은 빠르게 큰 가치를 창출할 수 있는 명확한 방법이 됨
     * 인수합병 전략의 고려사항:
          + 인수합병이 모든 회사에 적합하지는 않음. 특히 고객 획득이 쉬운 경우나 통합이 복잡한 경우에는 적절하지 않음
          + 온톨로지를 구축하면 이러한 trade-off를 분석하고, 첫 번째 인수의 적정 규모나 동일 산업 내에서 인수할지 인접 산업에서 인수할지를 결정하는 데 도움을 줄 수 있음
          + 과거 실패 사례에 대한 우려가 있지만, 새로운 인수합병 패러다임은 예측 가능한 높은 ROI(투자 수익률)를 제공하는 새로운 전략을 열어줌

  4. 적합한 팀 구성

     * SaaS 성공 기업의 특징:
          + 강력한 기술 문화와 신속한 반복 개발을 가능하게 하는 엔지니어링 역량을 보유
          + 점점 더 세분화된 시장으로 소프트웨어가 확산됨에 따라, 도메인 전문성과 고객의 언어를 이해하는 것이 중요해짐
          + 이에 따라 강력한 산업 자문단을 구축하거나, 때로는 기술 경험이 적은 산업 전문가를 고용하기도 함
     * 기술 중심 서비스의 팀 구성 변화:
          + 성공적인 비즈니스를 구축하려면, 높은 IQ와 EQ를 겸비한 기술 및 운영 인재가 필요함
          + 빠르게 변화하는 혁신 문화와 고객 중심의 프로세스 지향 접근 방식을 결합해야 함
          + 기술 인재와 운영 인재가 협력하고 서로 배우며, 상호 신뢰를 형성해야 함
          + 기술 인재는 AI 및 소프트웨어 개발 능력 외에도 서비스 운영의 세부 사항에 대한 호기심과 존중심을 가져야 함
          + 운영 전문가는 새로운 기술을 받아들이고, 기존 프로세스를 재고할 준비가 되어 있어야 함
     * 팔란티어의 사례: Forward Deployed Engineers:
          + 팔란티어는 고객과 직접 협력하여 고객의 요구에 맞춘 플랫폼을 구성하는 Forward Deployed Engineers 팀을 운영함
          + 당시 실리콘밸리의 주요 기술 회사들은 고객 상호작용을 영업 및 고객 성공 팀에 맡기는 것이 일반적이었음
          + 하지만 팔란티어는 기술, 운영, 커뮤니케이션 능력을 모두 갖춘 인재를 고용함으로써, 고객의 요구에 직접 대응할 수 있었음
          + 이러한 고용 전략은 기술 중심 서비스 회사에서 필수적이며, 팔란티어 출신이 많은 기술 서비스 스타트업의 창립자 및 초기 직원으로 활동 중임
     * 적합한 팀 구축의 핵심 요소:
          + 기술 혁신과 서비스 우수성을 동시에 중시하는 문화를 조성해야 함
          + 인수합병(M&A) 전략을 추진할 경우, 사모펀드(PE) 세계의 경험과 지혜를 가진 인재도 필요함
          + 이를 통해 기존 서비스를 더 효율적으로 복제할 뿐만 아니라, 산업 전반을 혁신할 수 있음

AI 서비스 혁명의 미래 전망

     * AI 발전의 불확실성:
          + AI 기술의 빠른 발전이 어디까지 이어질지 예측하기 어려움
          + AGI(Artificial General Intelligence)가 모든 문제를 해결할 것이라는 가정은 현실적이지 않음. 설령 AGI가 현실화된다면, 그 결과는 크게 긍정적이거나 부정적일 수 있음
     * 현재 AI 기술로도 충분한 가치 창출 가능:
          + AI 발전이 현재 수준에서 멈추더라도, 서비스 산업의 약 $2조에 이르는 임금을 혁신적으로 효율화할 수 있음
          + 이는 GDP 성장, 더 효율적인 노동 시장, 생산성의 두 배 혹은 세 배 향상으로 이어질 가능성이 있음
          + 반복적이고 단순한 작업이 자동화되면서, 근로자들은 본인의 진정한 기술을 발휘하거나 새로운 기술을 배울 기회를 얻을 수 있음
     * AI 서비스 웨이브의 초기 단계:
          + 현재 AI 서비스 웨이브는 아직 초기 단계에 있으며, 그 가능성과 영향력은 완전히 드러나지 않았음
          + 초기 SaaS 웨이브에서 Smart Enterprise 논문은 플랫폼 중심의 산업 혁신 프레임워크를 제시했으며, 이는 이제 일반화되었음
          + 기술 서비스 웨이브가 강력해짐에 따라, 온톨로지 맵핑 및 다른 전략들이 중요한 개념적 기반이 됨
     * 미래 전망과 목표:
          + 이 혁신을 현실화하기 위해서는 뛰어난 리더십, 훌륭한 팀, 그리고 꾸준한 노력이 필요함
          + 팔란티어의 성공 사례는 영감을 제공하며, 더 많은 세대적 기업들이 이 생산성 웨이브에서 탄생할 것으로 기대됨

   팔란티어 관련 글을 많이 찾아봤는데, 항상 온톨로지를 통해 우리가 한 단계 무언가 더 있다 라는 주장하지만, 실제로 무엇이 더 있는지는 잘 모르겠더라구요.
   내부적으로 데이터 사이언스를 더 잘하는 사람들이 많은 것 같긴 한데, 제품 자체는 잘 모르겠습니다

   FDE 채용 바이럴로 보면 과대망상인가요

   고급 SI

   디지털 트랜스포메이션의 실체가 이런 건가 싶어요

   팔란티어 관련 글이 나올 때마다 잘 읽어보곤 하는데요. 아직 비즈니스 모델이 확 와닿지는 않네요 ㅠㅠ

   Palantir에 대한 회고
"
"https://news.hada.io/topic?id=17742","Visprex - CSV를 위한 인-브라우저 데이터 시각화 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Visprex - CSV를 위한 인-브라우저 데이터 시각화 오픈소스

     * CSV 파일을 서버에 보내지 않고 브라우저 내에서만 처리하여 시각화
     * CSV를 등록하면 Categorical 또는 Nemerical 타입으로 데이터를 파싱
     * Histogram, Scatterplot, Correlation Matrix 등으로 시각화 함
     * https://www.visprex.com/ 에서 웹앱처럼 이용 가능
"
"https://news.hada.io/topic?id=17760","Watermark Anything - 모든 것에 워터마킹하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Watermark Anything - 모든 것에 워터마킹하기

     * Meta가 발표한 ""Watermark Anything with Localized Messages"" 논문의 공식 구현체
          + 이미지에 지역화된 워터마크를 삽입할 수 있는 방법을 제공
          + 여러 개의 워터마크를 삽입할 수 있음
     * 요구 사항 : Python 3.10.14, PyTorch 2.5.1, CUDA 12.4, Torchvision 0.20.1 버전에서 테스트됨.
     * Inference
          + notebooks/inference.ipynb에서 추론 스크립트와 시각화를 확인할 수 있음
          + 이미지에 워터마크를 삽입하고 감지 및 디코딩하는 방법을 설명
          + wam.scaling_w 인자를 조정하여 워터마크의 imperceptibility/robustness(눈에 띄지 않음/견고함)의 균형을 조절할 수 있음
     * 단일 워터마크
          + 32비트 메시지를 이미지에 삽입하는 예시 제공
          + 이미지의 일부에만 워터마크를 삽입할 수 있는 랜덤 마스크 생성
     * 다중 워터마크
          + 여러 개의 32비트 메시지를 이미지에 삽입하는 예시 제공
          + DBSCAN 알고리즘을 사용하여 클러스터링을 통해 워터마크 감지
     * 훈련
          + 사전 훈련: 강인함을 위한 사전 훈련 방법 설명.
          + 파인 튜닝: 다중 워터마크와 눈에 띄지 않음을 보장하기 위한 모델 파인튜닝 방법 설명.
     * 라이선스
          + 모델은 CC-BY-NC 라이선스 하에 제공됨.
     * 참고
          + AudioSeal, Segment Anything 프로젝트와 관련 있음.

        Hacker News 의견

     * 보이지 않는 워터마크는 스테가노그래피와 같음. 임베딩 방법이 알려지면 워터마크를 손상시키는 것이 가능하지만, 추출 절차가 항상 높은 엔트로피 정보를 생성한다면 워터마크가 있는지 알 수 없는 경우도 있음
     * README에 있는 논문 링크가 깨져 있음. 올바른 링크는 다음과 같음: https://arxiv.org/abs/2411.07231
     * Meta가 무료로 강력한 워터마킹 기술과 이를 채택할 수 있는 소셜 미디어 네트워크를 구축할 때, 창의적인 기술자들이 ""워터마킹""이나 ""인간 진위 배지""를 위해 자금을 모으려는 시도가 어떻게 될지 궁금함
     * 이게 큰 문제인가? 비전문가로서 필요한 제품처럼 보이지만 뭔가 놓치고 있는 느낌이 듦
     * 이미지 스크린샷을 찍어도 이 워터마크가 여전히 작동하는지 궁금함
     * ""Unwatermark Anything"" 저장소에 대한 링크가 필요함
     * 워터마크가 생성된 데이터로 훈련된 후속 모델에 의해 간접적으로 학습되는 잠재 변수로 변할 경우 어떻게 될지 궁금함. 이를 최신 상태로 유지하기 위해 마크를 계속 변경해야 할 것임. 인증서 투명성을 위한 Merkle 트리 워터마크 데이터베이스를 보게 될 것인지 궁금함. YC, 여기 새로운 스타트업 아이디어가 있음
     * 아, 텍스트도 눈에 띄지 않게 워터마크를 넣을 수 있을 거라 기대했는데, 아쉽게도 그렇지 않음
"
"https://news.hada.io/topic?id=17798","연구진 확인, 새로운 Apple 보안 기능 3일 후 iPhone 재부팅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                연구진 확인, 새로운 Apple 보안 기능 3일 후 iPhone 재부팅

     * 보안
          + Apple의 새로운 iPhone 소프트웨어는 72시간 동안 잠금 해제되지 않으면 자동으로 재부팅되는 보안 기능을 포함함.
          + 이 기능은 iPhone의 암호화 키를 안전한 칩에 잠그어 기기를 더 안전하게 만듦.
          + 이로 인해 법 집행 기관이 기기에서 데이터를 추출하는 것이 더 어려워짐.
     * 비활성화 재부팅 기능
          + Hasso Plattner Institute의 연구원 Jiska Classen이 이 기능을 처음 발견하고 시연 영상을 공개함.
          + Magnet Forensics도 이 기능의 타이머가 72시간임을 확인함.
          + 이 기능은 오래된 포렌식 도구로 iPhone을 해제하는 것을 방지함.
     * iPhone의 두 가지 상태
          + iPhone은 ""첫 번째 잠금 해제 전(BFU)""과 ""첫 번째 잠금 해제 후(AFU)""라는 두 가지 상태가 있음.
          + BFU 상태에서는 사용자의 데이터가 완전히 암호화되어 접근이 거의 불가능함.
          + AFU 상태에서는 일부 데이터가 암호화되지 않아 포렌식 도구로 쉽게 추출될 수 있음.
     * Apple과 법 집행 기관의 갈등
          + Apple은 수년간 법 집행 기관이 반대하는 보안 기능을 추가해 왔음.
          + 2016년 FBI는 Apple에 iPhone 잠금을 해제할 수 있는 백도어를 만들도록 법원에 요청했으나 실패함.
     * 관련 주제
          + Apple, 사이버 보안, 포렌식, iOS, iPhone, 법 집행, 개인정보 보호
     * Lorenzo Franceschi-Bicchierai
          + TechCrunch의 사이버 보안 분야 선임 기자로 활동 중임.
          + Lorenzo와 안전하게 연락할 수 있는 방법 제공.

        Hacker News 의견

     * 결제 단말기의 주기적인 재부팅은 PCI 요구사항이며, 대부분의 판매 시점 시스템은 24시간마다 재부팅됨
     * 하루 동안 휴대폰을 잠금 해제하지 않으면 문제가 있는 것이며, 추가적인 경계가 필요함
     * GrapheneOS는 이미 18시간 후에 기본적으로 재부팅되도록 설정되어 있으며, 사용자가 이를 조정할 수 있는 옵션이 있음. 모든 사람에게 72시간을 강제하는 것은 사용자에게 적대적인 설계 결정임
     * 만약 사실이라면, 이를 설정 가능한 옵션으로 만드는 것은 사소한 개선임. 기본값을 72시간으로 두고, 보안 필요성이 높다면 12시간 또는 그 이하로 설정할 수 있음
     * 이 기능은 iDevices 간의 SMS 포워딩을 방해하는 것으로 보임. 보조 iPhone을 잠금 해제하고 메시지 앱을 열었을 때만 패키지 배송 알림이 도착함
     * 잠긴 휴대폰이 모든 것을 메모리에 이미 가지고 있어야 한다는 것은 이해하지만, Apple이 잠긴 휴대폰을 재부팅된 휴대폰만큼 안전하게 만들지 못하는 기술적 장애물이 무엇인지 궁금함
     * 404Media가 이 내용을 처음 확인한 것으로 생각됨. 구독자 전용 기사이며 전체 이야기를 담은 아카이브 링크를 찾을 수 없었지만, 그들의 작업을 지원할 것을 권장함
     * 프로그램 명령 메모리와 데이터 메모리를 물리적으로 분리하는 것이 왜 안 되는지 궁금함. 페이지 수준에서의 근사치가 있지만, 왜 커널이 자신의 메모리를 수정할 수 있게 하는지 이해가 안 됨. 서명된 페이지만 로드하는 메모리 유닛 등
     * Apple 재부팅이 정말로 dmesg 로그를 표시하는지에 대한 질문
     * 이 기능이 의도된 것인지, 아니면 72시간 후에 나타나는 메모리 누수 같은 것인지 어떻게 판단했는지 궁금함
"
"https://news.hada.io/topic?id=17793","Ask GN: 일을 미루지 않는 노하우가 있으신가요 (how to deal with procrastination)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 일을 미루지 않는 노하우가 있으신가요 (how to deal with procrastination)

   투두리스트, 캘린더, 뽀모도로, 오만가지 방법을 써봤고 또 시도하고 있지만, 어떻게든 틈을 비집고 미루기가 고개를 내미는 것 같습니다. 다른 분들은 이 진드기를 어떻게 떼어내시는지 궁금합니다.

   일정을 여유 있게 잡다보면 처음에야 일을 미루는게 되는데 시간이 지나면 미뤄 놓은 일들 끼리 데드라인까지 스케쥴 정렬이 되서 .. 다시 쉬지 않고 일을 할 수 있게 됩니다...?

   대표님 뒷자리에 앉습니다.

   제가 하는 방법은 이렇습니다.
    1. 자신만의 루틴을 만듭니다. 아침을 먹으면서 캘린더를 보고 투두리스트를 정리합니다
    2. 자신만의 데드라인을 짧게 설정한 후 일을 재검토 할 여유시간을 법니다
    3. 해야할 게 떠오를 때 일단 10분 해보고 투두리스트를 업데이트합니다. 낮시간에는 회사일이나 개인사, 밤에는 취미를 주로 합니다

   만에 하나 일상생활에 영향이 갈 정도로 일을 미루신다면 진료를 받으시는 것도 방법입니다. 청소년기때부터 ADHD였는데 모르고 지나쳤을 수도 있구요

   저도 여러 가지 해봤지만, 억지로라도 10분 해보는게 가장 효과가 좋았습니다. 일이 다 끝나면 과감히 쉬고요.

   물리적이든 감정적인 이유든 미루기는 발생할수 밖에 없더라구요. 그래서 토요일에 미룬 일들을 정리하는 시간을 갖습니다. 만약 미룬일이 없다면 토요일은 자유시간으로 보상받도록 하죠

   난이도, 목표치를 낮춰서 시도해봅니다.
   진짜 시작이 반이라서 다른 걸 희생해도 쉽게 시작하면 그걸로 성공이라는 마음가짐으로

   The Rise of Worse is Better
   Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing.

     “Motivation often comes after starting, not before. Action produces momentum.”

     — James Clear

     Just 4 pages a day. It really adds up.

   저는 애초에 할일이 5개 정도 있으면, 1~2개만 하고 나머지는 미루는게 자연스럽다고 생각해요. 미루는건 아직 급하지 않다는 것이라고 맘 편히 먹거든요. 마감기한을 넘길때까지 미루는건 책임감이 없는거구요.

   미루기라는 감정을 좀 멀리서 바라보면 도움이 되는 거 같아요. 저는 순간의 욕구일 때가 많은거 같아서, 궤도에 오를 때까지는 좀 버티는 것 같습니다. 그러다보면 자연스럽게 일을 하고 있더라구요.

   짧은 답변이지만 느끼는 바가 많네요. 감사합니다, 앞에 붙여놓고 한 번씩 생각해보겠습니다.
"
"https://news.hada.io/topic?id=17782","유럽에서 쿠키 배너로 인한 경제 및 생산성 손실 분석","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     유럽에서 쿠키 배너로 인한 경제 및 생산성 손실 분석

     * 유럽에서는 쿠키 배너로 인해 매년 5억 7천 5백만 시간이 소비됨
     * 이는 ePrivacy Directive 2002/58에 의해 요구되는 것으로, 웹사이트가 사용자 기기에 정보를 저장하거나 접근하기 전에 동의를 받아야 함
     * 규제의 본래 목적은 개인정보 보호 강화지만, 대부분의 쿠키 배너는 웹 분석, 사용자 행동 이해, 광고 성과 관리 등의 목적으로 사용되며, 실제 개인정보 보호 효과는 미미함
     * 이는 유럽 경제의 경쟁력을 저하시킬 수 있는 중요한 문제로 지적됨

  쿠키 배너가 생산성에 미치는 영향

     * EU 인구: 2024년 기준 약 4억 4,920만 명
     * 인터넷 사용률: 약 90%로 4억 280만 명의 인터넷 사용자 존재
     * 웹사이트 방문 빈도: 평균적으로 사용자는 한 달에 약 100개의 웹사이트를 방문하며, 연간 약 1,200개 방문
     * 쿠키 배너 노출 빈도: 약 85%의 웹사이트가 쿠키 배너를 표시, 연간 사용자당 약 1,020회의 노출
     * 평균 클릭 시간: 쿠키 배너와의 상호작용에 평균 5초 소요, 연간 약 1.42시간 소비

   이를 EU 전체 인터넷 사용자 수로 계산하면, 연간 5억 7,500만 시간의 시간 손실이 발생함.

  주요 국가별 시간 소비 및 경제적 비용

     * 시간당 평균 임금을 €25로 가정하면, 쿠키 배너로 인한 경제적 비용은 €143.75억에 달함
     * 이는 **EU 전체 GDP의 약 0.10%**에 해당
     * 생산성 손실을 풀타임 직원(FTE) 수로 환산하면 약 287,500명의 직원이 매일 쿠키 배너를 클릭하는 셈임

  쿠키 배너가 개인정보 보호에 미치는 실제 영향

     * 쿠키 배너는 GDPR이 아닌 ePrivacy Directive 2002/58에 의해 도입됨
     * 쿠키 사용에 대해 명확한 정보 제공과 동의 요구가 규제의 주요 내용임
     * 대부분의 웹사이트는 웹 분석 및 광고 성과 측정 목적에 쿠키를 사용함
     * 사용자의 신원 식별은 법적 절차(법원 명령 등)가 필요해 실제로는 드물게 이루어짐
     * 대규모 사용자 추적은 일부 광고 기반 모델을 채택한 소수의 웹사이트에 국한됨

   반복적인 쿠키 배너는 사용자 피로를 초래하고, 사용자들은 무심코 동의 버튼을 클릭하게 되어 규제의 목적을 무색하게 만듦. 이는 생산성 저하뿐 아니라 사용자 경험 및 신뢰를 감소시킴.

  결론 및 제안

   유럽인들이 쿠키 배너 클릭에 매년 5억 7,500만 시간을 소비하는 현실은 주목할 만한 경제적, 생산성 손실임. 이러한 절차는 실제 개인정보 보호 혜택이 적고, 기업 성과에도 큰 기여를 하지 않음.
     * GDPR과는 달리, ePrivacy Directive는 근본적인 IT 보안을 강화하지 않음
     * 이를 개선하기 위해 ePrivacy Directive의 개정이 필요하며, 소규모 기업(SMB)에 대해서는 분석 및 기본 광고 관리 목적으로 쿠키 배너 면제가 필요함
     * 이러한 조치를 통해 불필요한 경제적 및 생산성 손실을 줄일 수 있음

   이런걸 근거로 sns중독세 같은걸 물릴 수 있겠네요.

        Hacker News 의견

     * 법이 추상적일 때 자주 업데이트할 필요가 없고 변화하는 현실에 적응할 수 있음. 유럽의 ""쿠키 법""은 쿠키 배너를 요구하는 것이 아니라 정보에 입각한 동의를 요구함. 법의 목표는 합리적이며, 소비자 권리를 강화하는 법을 설계할 때 추가적인 시간 소요는 불가피함
          + 정보에 입각한 개별 결정은 시간을 들여야 가능함
     * 배너가 불필요하다고 주장하는 사람들이 많지만, 비타겟 광고는 수익이 90% 이상 감소하므로 광고가 있는 웹사이트에는 필요함
          + 대화 시작 시 ""기억해도 괜찮은가요?""라고 묻는 것과 같음
     * 브라우저는 기본적으로 ""아니오""를 지원하지만, 웹사이트는 이를 수용하지 않고 사용자의 시간을 낭비함
          + 제안: 이러한 웹사이트가 시민의 시간을 낭비한 대가로 연간 575백만 유로를 지불하거나 ""아니오""를 수용하게 해야 함
     * 배너 클릭이 생산성 손실과 동일하다는 계산은 잘못됨
          + 화장실 방문 시간을 고려하면 유럽에서 하루에 89.8백만 시간이 낭비됨
          + 생산성 프로그램에 집중해야 함
     * uBlock Origin 설정에서 쿠키 배너 필터를 활성화하면 문제 해결 가능
          + iOS에서는 Kill Sticky 북마클릿이 대부분의 사이트를 깨뜨리지 않고 정리함
     * 법은 사이트가 DoNotTrack 브라우저 설정을 무시하지 않도록 강제해야 했음
          + EU가 근본적인 문제를 이해하지 못하고 해결책을 선택함
     * 웹사이트가 배너를 구현하는 대신 브라우저 벤더가 이를 책임져야 함
          + Chrome, Firefox, Safari 등에 내장된 배너 팝업을 제공해야 함
     * ""I do not care about cookies""와 ""Cookie AutoDelete""를 사용하면 배너에 시간을 거의 쓰지 않음
          + 자동화 가능성을 인지하지 못한 것 같음
     * 웹사이트가 Do Not Track을 존중하면 상황이 훨씬 쉬워질 것임
          + 정보를 특정 방식으로만 수용하는 것이 충분하지 않음
     * 유럽인 한 명당 연간 약 1시간 반 정도 소요됨
          + 광고 기술 회사에 데이터를 제공하지 않기 위한 시간임
"
"https://news.hada.io/topic?id=17854","DHH가 Shopify의 이사회 멤버로 합류했습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      DHH가 Shopify의 이사회 멤버로 합류했습니다

     * David Heinemeier Hansson(DHH)가 Shopify 이사회에 합류했습니다.
     * DHH는 Ruby on Rails의 창시자이자 관리자로, Ruby on Rails는 현재도 Shopify의 주요 기술 스택으로 사용되고 있습니다.
     * 그의 합류는 더 많은 기업가 정신을 고취시키려는 Shopify의 미션을 위한 것이기도 합니다.
     * Shopify와 Rails는 도구를 활용해 개인 제작자들이 훌륭한 작업을 할 수 있도록 지원한다는 공통의 미션을 가지고 있습니다.


   DHH는 루비온레일스의 아버지이자 20년 넘게 웹, IT, 스타트업 영역에서 목소리를 내고 있는 오피니언 리더 중 한사람입니다. 세간의 이슈에도 불구하고 여전히 자기만의 의견을 많이 내고 있으며, 최근에도 루비온레일스 개발 활동 뿐만 아니라 kamal, omakub 등 커뮤니티에서 화제가 되는 도구를 만들고 있습니다.

   Shopify는 전세계에서 가장 큰 이커머스 플랫폼 중 하나로 한화 약 187조의 기업가치를 가진 회사입니다. 루비온레일스로 작성되었고 현재도 루비온레일스의 가장 큰 기여자 중 하나입니다. 첨부된 글의 영상에서 DHH와 대화를 나누는 Tobi Lütke는 Shopify의 창업자이자 CEO로 루비온레일스의 초기 핵심 커미터로 활동하였으며 아직까지도 루비온레일스에 많은 관심을 두고 기여를 하고 있습니다.


   개인적인 의견: DHH 및 레일스팀은 Rails 7부터 루비온레일스의 방향을 대대적으로 The One Person Framwork로 설정하고 이를 달성하기 위한 여러 개선을 발표하였습니다. Shopify 또한 혼자 또는 소규모의 팀이 쇼핑몰을 만들고 운영할 수 있도록 돕는 것이 핵심 사업 영업 중 하나이기 때문에 둘의 시너지가 기대가 되네요.
"
"https://news.hada.io/topic?id=17835","런치 HN: Regatta Storage (YC F24) – S3를 로컬 유사 POSIX 클라우드 파일 시스템으로 변환하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                런치 HN: Regatta Storage (YC F24) – S3를 로컬 유사 POSIX 클라우드 파일 시스템으로 변환하는 기술

     * Regatta Storage 소개
          + Regatta Storage는 새로운 클라우드 파일 시스템으로, 무제한 용량을 제공하며, 로컬과 같은 성능과 S3 호환 스토리지로의 자동 동기화를 지원함
          + Spark, Pytorch, pandas와 같은 도구를 사용하여 S3의 대량 데이터 세트를 즉시 액세스 가능하게 함
          + 계정을 생성하면 무료로 서비스를 체험할 수 있음
     * 개발 배경
          + 창립자는 Amazon EFS와 Netflix에서 클라우드 스토리지를 구축하고 운영한 경험을 바탕으로 Regatta를 개발함
          + EFS의 간단함과 확장성을 좋아하지만, Netflix에서는 EFS 사용이 적었음
          + 로컬 디스크에서 NFS로 워크로드를 이동할 때 성능 문제가 발생함
          + 클라우드 스토리지 시장에서 블록 또는 파일 스토리지로 해결되지 않는 문제를 해결하기 위해 Regatta를 개발함
     * Regatta의 특징
          + 사용량 기반 요금제의 클라우드 파일 시스템으로, 애플리케이션과 함께 자동으로 확장됨
          + S3와 네이티브 파일 형식으로 자동 동기화되어, 기존 데이터 세트와 연결 가능하며 S3에서 직접 파일 데이터를 사용 가능함
          + 사용하지 않는 데이터는 Regatta 캐시에서 제거되어 S3 스토리지에 대한 비용만 지불함
          + 소규모 파일 워크로드에 로컬과 같은 성능과 분산 데이터 작업에 Lustre와 같은 확장 성능을 제공하는 커스텀 파일 프로토콜을 개발 중임
     * 기술적 구현
          + 고객은 NFSv3를 통해 Regatta 파일 시스템을 마운트하고, 캐싱 인스턴스는 고객의 S3 버킷에 연결됨
          + 서브 밀리초의 캐시된 읽기 및 쓰기 성능을 제공하며, 강력한 일관성을 유지함
          + 디렉토리 이름 변경과 같은 복잡한 작업을 빠르고 안정적으로 수행하며, S3 버킷으로 비동기적으로 전파됨
     * 사용자 사례 및 기대
          + AI 연구자들을 위한 서버리스 Jupyter 노트북 서버 구축에 사용됨
          + S3 위에 분산 캐싱 레이어로 사용되어 저지연으로 공통 파일에 액세스함
          + Ceph 부트 볼륨을 대체하여 비용 절감 효과를 봄
          + 사용자 피드백과 향후 방향에 대한 아이디어를 환영하며, 커뮤니티의 의견을 기다림

        Hacker News 의견

     * Rclone과 Regatta Storage의 차이점은 파일 시스템의 변형 작업 시 Regatta가 고속 캐싱 레이어를 사용하여 강력한 일관성을 제공하는 점임. Rclone은 병렬 클라이언트 간의 일관성을 보장하는 레이어가 없음
          + Regatta Storage는 파일 시스템의 변형 작업 시 고속 캐싱 레이어를 사용하여 강력한 일관성을 제공함
          + Rclone은 병렬 클라이언트 간의 일관성을 보장하는 레이어가 없음
     * YC에서 나온 가장 멋진 제품 중 하나로, 작동 방식에 대한 여러 질문이 있음
          + 10GB 로컬 디스크에서 50GB 범위의 데이터를 처리할 때 성능 저하가 발생하는지 궁금함
          + AWS 외의 다른 클라우드에서도 빠른 속도를 얻을 수 있는지 궁금함
          + FUSE와 NFS 마운트를 사용하는 방식에 대한 궁금증이 있음
          + Clickhouse나 Postgres를 Regatta 볼륨으로 실행할 수 있는지 궁금함
          + 오픈 소스에 대한 생각이 궁금함
          + 여러 서버에 마운트할 수 있는지, 그 제한이 무엇인지 궁금함
     * GCP Filestore를 사용하여 DuckDB를 호스팅 중이며, Regatta의 가격과 성능에 대한 정보를 요청함
          + 10 TiB 인스턴스의 가격과 성능에 대한 정보를 요청함
     * SQLite/DuckDB/parquet의 백업 디스크로 관심이 있으며, 인스턴스 로컬 NVMe 스토리지에서 캐시된 읽기를 원함
          + NFS로는 얻을 수 없는 잠금 및 공유 메모리 기능이 필요함
          + 사용자 공간에서 직접 구현할 수 있지만, 그럴 바에는 S3를 사용할 것임
     * NFS를 프로토콜로 사용하는 것이 좋은 아이디어라고 생각함
          + IBM에서 유사한 개념의 암호화 파일 시스템을 작성한 경험이 있음
          + 파일 시스템을 마운트할 때 모든 데이터가 ""그냥 있는"" 것이 마법 같음
     * AWS가 이 제품을 복제하여 더 낮은 가격에 제공할 가능성에 대한 우려가 있음
     * 2008년 Adobe의 CEO 앞에서 iPhone으로 찍은 사진이 Mac에 파일로 자동으로 나타나는 데모를 성공적으로 수행한 경험이 있음
          + FUSE를 사용하여 Adobe의 분산 객체 저장소와 통신하는 로컬 FUSE를 구현함
          + Dropbox의 출시와 함께 분산 시스템 연구 개발을 시작함
     * Lambda + SQLite + Regatta를 사용하여 실시간 ACID SQL 스토리지를 구축할 수 있는지 궁금함
     * 파일 업데이트 충돌을 어떻게 처리하는지 명확하지 않음
          + 예를 들어, 두 사용자가 다른 컴퓨터에서 동일한 파일을 업데이트할 경우 최종 파일이 어떻게 되는지 궁금함
     * s3fs, rclone, goofys 등과 같은 주목할 만한 대안들이 있음
"
"https://news.hada.io/topic?id=17843","우리사주 투자 실패담과 그 이후","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           우리사주 투자 실패담과 그 이후

     * 22살에 저자가 겪은 우리사주 투자 실패담
     * 크래프톤에 합류
          + 2020년 PUBG에 산업기능요원으로 입사
          + 2021년 개발자 연봉이 일괄 2000만원 상승함
     * 뉴스테이트 모바일 프로젝트의 성공 가능성
          + 모바일 버전의 PUBG
          + 기존에 있던 펍지 모바일과 차별점
               o 캐주얼함 대신 오리지널 게임의 그래픽, 현실감, 게임성 등의 요소를 계승
               o 공동 개발한 텐센트가 해외 퍼블리싱을 담당. 인도 시장에서 금지당한 펍지 모바일 대신 인도 시장 공략
          + 펍지 모바일은 이미 2년만에 10조원의 매출을 기록. 이의 10%만 달성해도 1조원의 매출을 기대
          + 팀 전반에 성공에 대한 기대가 만연했음
          + 기대에 부등하듯 약 5000만 명의 사전 예약자 수 도달
          + 이후 구성원의 자발적인 야근, 거액의 마케팅 예산 책정, 외부 기사 보도, 비상장주식 장외가의 상승
     * 크래프톤 상장 준비 소식
          + 구성원들에게 우리사주(ESOP, Employee Stock Ownership Plan) 구매에 관련 안내
          + 우리사주의 특징
               o 1년간 의무 예탁 기간 중 주식 인출 불가
               o 퇴사 시에는 인출 가능
               o 소득공제, 과세이연, 배당소득 비과세 등 세제 혜택 존재
               o (크래프톤의 경우) 한국증권금융에서 우리사주담보 대출이 가능
          + 대출 받아 6억까지 투자할 수 있는 레버리지가 매력적이었음
          + 2021년 상장 게임사들은 펄어비스를 제외하면 모두 상장가보다 높은 가격이었음
     * 당시 IPO 시장의 열기
          + 카카오게임즈, 2020년 하반기 상장, 공모가 24,000원에서 81,100원까지 상승
          + SK바이오팜, 2020년 하반기 코스피 상장, 공모가 49,000원에서 127,000원까지 상승
          + 카카오뱅크, 상장 당시 시총 약 39조로 4대 시중은행(KB국민, 신한, 하나, 우리)을 합한 시가총액 추월
     * 상장 전의 불안 신호들
          + 높은 공모가: 크래프톤의 희망 공모가는 557,000원으로 장외가보다 높았던 가격
               o 금감원의 지적으로 이후 공모가를 498,000원으로 책정
          + 저조한 수요예측 경쟁률: 7.79 대 1로 원티드랩은 1731.23 대 1, 카카오뱅크는 38.7 대 1
     * 우리사주 청약과 상장 이후
          + 프로젝트에 대한 희망과 회사에 대한 믿음으로 우리사주 1,256주를 청약. 약 6.25억원
          + 상장 당일 시초가는 공모가보다 10% 낮은 448,500원. 하루만에 거의 5천만원 손실
          + 이후 서서히 회복하다 뉴스테이트 런칭 후 최고점인 58만원 달성
          + 뉴스테이트의 부진
               o 불안정한 서버와 잦은 버그, 크래시
               o 높은 그래픽 사양으로 저사양 핸드폰 유저들의 어려움
               o 기존 펍지 모바일 유저들은 다시 펍지 모바일을 플레이, PC 유저는 여전히 PC 유저, 높은 요구 사양으로 제한적인 유입
          + 2년 만에 역대 최저가인 145,900원까지 낮아져 평가액은 6.25억에서 1.8억까지 하락
               o 주가가 58만원일 땐 우리사주 의무보유기간으로 매도 제한
               o 퇴사를 하더라도 매도까진 최소 4주가 소요돼 딜레이가 있었음
     * 이후 삶의 변화
          + 복학 및 졸업, 미국 취업 등이 미뤄짐
          + 실리콘밸리 빅테크 기업에 취업한 동기들과의 격차
          + 더 큰 도전을 위해 크래프톤의 Settlus(세틀러스)라는 새로운 블록체인 프로젝트로 내부 이동함
     * 주가 회복의 희망
          + 2024년 현재, 33만원 대까지 회복
          + 인조이, 다크앤다커 모바일, 서브노티카2, 팰월드 모바일, 눈물을 마시는 새, 펍지 PC 등의 기대작들
          + 엔씨소프트의 주가 하락으로 국내 게임섹터 ETF의 비중이 크래프톤으로 많이 이동함
     * 우리사주 실패는 오히려 위험 감수성(risk tolerance)을 키워줌

   카카오도 우리사주 먹튀 오지게 당했던데 한국기업의 우리사주는 받고 바로 퇴사할거 아니면 안하는게 맞나보네요... 엔비디아랑 비교가 너무 많이 되네요

   퇴사를 하면 바로 우리사주를 매도할 수 있는 줄 알았는데 그건 몰랐네요.. 진짜 인생을 건 대단한 도박을 하셨군요.
   말씀하신대로 창피를 면하기 위해서라도 더 유능한 사람이 되실 것 같습니다. 물론 어떤 맥락으로 보면 인생은 한방일 수도 있겠습니다만, 개인적으로는 코인, 주식 없이 본인의 능력으로 이번 위기를 극복하셔서 대성하셨으면 좋겠네요. 파이팅입니다 :)

   멘탈이 정말 대단하신 것 같아요

   그래도 다시 희망을 보신다니 부럽네요
   저는 회사에서 인센티브를 회사 코인으로 받았는데 하필 가장 비쌀 때 받아서 세금만 왕창 뜯기고 시장 폭락으로 동전주 돼서 팔 때 되니 회사에 냈던 세금만큼도 안나오더라고요

   ESOP 단어를 보고 ESOP: 모든 회사는 직원이 주인이 되어야 합니다 이 글이 생각났네요.
   단어는 같은데 느낌이 달라서 찾아보니 우리사주제도(ESOP)의 성공조건 글에 살짝 설명이 있군요.
   ㅤ

     국내 우리사주제도는 현재 기업의 출연이 활발하게 이루어지지 않는다는 면에서 종업원주식매입제도(Employee Stock Purchase Plan)와 유사한 형태로 운영되고 있는 실정이다. 현재 우리사주제도는 미국의 ESOP 제도와도 몇가지 점에서 차이를 보이고 있다

     첫째, 미국의 경우 자사주 취득에 있어 우선배정제가 없으며 회사의 출연금을 통하거나 차입을 통해서만 가능하다. 반면, 국내 우리사주제도는 회사의 출연이나 차입을 통해 가능하지만 주로 우선배정을 통해 주식을 취득하고 있는 차이점이 있다.

     둘째, 미국 ESOP는 ESOP를 통해 취득한 주식은 세제지원을 통해 퇴직시까지 보유하도록 하고 있다. 세제혜택으로 근로자에게는 배당 등의 소득에 대해 퇴직시까지 소득세가 이연되며 기업에게는 출연금에 대해 손비를 인정하고 차입금에 대한 이자에 대해서도 손비를 인정해 주고 있다. 한편 우리사주제도는 개인배정 후 1년간 의무예탁 후 인출가능하며 3년이상 보유하면 저율분리과세를 적용하도록 되어 있다.

     셋째, 미국 ESOP는 위탁자, 수탁자, 수익자 등의 신탁구조로 운영되어 ESOP운영위원회의 지시에 따라 수탁자가 운영하게 되어 있다. 국내 우리사주제도는 조합원총회에서 조합장 및 임원을 선출하고 우리사주조합운영회는 회사대표와 우리사주조합대표 동수의 위원으로 구성되어 있다.

   오 한국의 우리사주(ESOP)는 미국의 종업원주식매입제도(ESPP)와 더 비슷하군요?

   지난주, LTE도 안 터지는 예비군 훈련장에서 심심풀이로 써본 글이 생각보다 많은 관심을 받아 정말 놀랐습니다. 많은 분들이 관심을 가져주셔서 진심으로 감사드립니다.

   글에서 앞으로도 도전적으로 살겠다고 선언해버려서, 창피를 면하기 위해서라도 앞으로 더 열심히 도전적으로 살아야겠습니다.

   jacob 항상 응원합니다!

   그 열정과 젊음이 부럽습니다. 대성하실겁니다.
"
"https://news.hada.io/topic?id=17841","QR 코드 단계별 생성 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            QR 코드 단계별 생성 방법

QR 코드 생성 단계별 과정

   이 JavaScript 데모 애플리케이션은 텍스트 문자열이 QR 코드 바코드 심볼로 인코딩되는 과정을 자세히 시각화함. 이 페이지의 내용은 QR 코드 생성기 라이브러리가 내부적으로 어떻게 작동하는지를 설명하고 정당화함.

  사용자 입력

     * 텍스트 문자열: ""Hello world""
     * 오류 수정 수준: 낮음, 중간, 사분위, 높음
     * 최소 버전 강제: 1에서 40 사이
     * 마스크 패턴 강제: 자동(-1) 또는 수동(0에서 7)

  QR 코드 출력

  단계별 과정

    0. 유니코드 문자 분석

     * 입력 텍스트 문자열의 코드 포인트 수: 17
     * 각 문자의 세부 사항:
          + 인덱스, 문자, 유니코드 코드 포인트, 숫자 모드, 알파벳 모드, 바이트 모드, 한자 모드로 인코딩 가능 여부

    1. 데이터 세그먼트 생성

     * 각 문자를 비트로 변환
     * 바이트 모드에서 문자는 8, 16, 24, 32 비트를 생성
     * 생성된 단일 세그먼트:
          + 모드: 바이트
          + 개수: 17 바이트
          + 데이터: 136 비트 길이

    2. 버전 번호에 맞추기

     * 세그먼트 목록을 표현하는 데 필요한 총 비트 길이
     * 버전 및 오류 수정 수준에 따른 QR 코드 데이터 코드워드 용량

    3. 세그먼트 연결, 패딩 추가, 코드워드 생성

     * 다양한 비트 문자열을 결합
     * 세그먼트 모드, 문자 수, 데이터, 종결자, 비트 패딩, 바이트 패딩

    4. 블록 분할, ECC 추가, 인터리브

     * 모든 블록에 대한 통계
     * 데이터 코드워드를 짧은 블록과 긴 블록으로 분할 후 ECC 코드워드 계산 및 추가

    5. 고정 패턴 그리기

     * 수평 및 수직 타이밍 패턴 그리기
     * 세 개의 모서리에 찾기 패턴 그리기
     * 정렬 패턴의 그리드 그리기
     * 임시 형식 비트 그리기
     * 버전 정보 블록 그리기

    6. 코드워드 및 나머지 그리기

     * 지그재그 스캔을 계산하여 모든 미채워진 모듈 방문
     * 데이터/ECC 모듈을 지그재그 스캔 순서 및 코드워드의 비트 값에 따라 그리기

    7. 각 마스크 적용 시도

     * 마스크 패턴 적용
     * 데이터, ECC, 나머지 모듈에 마스크 XOR 적용
     * 실제 형식 비트 그리기

    8. 패널티 패턴 찾기

     * 동일한 색상의 수평 및 수직 모듈 실행
     * 2×2 동일 색상 모듈 상자
     * 수평 및 수직 찾기 패턴
     * 어두운/밝은 모듈의 균형

    9. 패널티 포인트 계산, 최적의 마스크 선택

     * 패널티 포인트 계산 방법
     * 최저 총 패널티 포인트: 마스크 패턴 3

  추가 정보

     * QR 코드 설계에 대한 Wikipedia 및 기타 자료 링크 제공

   이 웹 애플리케이션의 소스 TypeScript 코드 및 컴파일된 JavaScript 코드는 열람 가능함.

        Hacker News 의견

     * QR 코드에 대한 온라인 설명에서 Reed-Solomon 오류 코드 계산이 자주 빠지는 점이 아쉬움
          + 저자는 이를 ""길고 지루하며 흥미롭지 않다""고 설명함
          + 이로 인해 관련 정보를 찾기 어려워짐
     * Veritasium의 QR 코드 관련 비디오 ""I used to hate QR codes. But they're actually genius""가 있음
          + 비디오 링크
     * 저자가 받는 피드백이 재미있음
          + 피드백 링크
     * QR 코드 디코더에 대한 비슷한 설명도 보고 싶음
     * Rust로 QR 코드 구현을 한 적이 있음
          + GitHub 링크
     * 기사 제목에 연도를 태그하는 것이 좋은 관행임 (이 경우 2018년)
     * QR 코드 작동 방식을 배우는 것이 오랫동안 할 일 목록에 있었는데, 좋은 입문서였음
     * QR 코드를 빠르게 만들고 싶었으나 광고가 많은 사이트와 ""사용하려면 등록""해야 하는 사이트로 인해 어려움을 겪음
          + GitHub에서 몇 가지를 찾았으나 다른 문제가 있어 이전에 사용한 잘 설계된 라이브러리를 사용하여 직접 구현함
          + 약 15분 소요됨
          + QR 코드 생성기 링크
     * 더 많은 옵션을 추가할 수도 있지만 대부분의 사용자는 필요하지 않을 것이라고 생각함
     * QR 코드 작동 방식을 알게 되었으니 SQL 쿼리에서도 사용할 수 있음
          + GitHub 링크
"
"https://news.hada.io/topic?id=17826","GN⁺: AI Hype가 식어가고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GN⁺: AI Hype가 식어가고 있다

     * 기업 임원진의 99%가 향후 AI 투자 계획이 있음. 그러나 생성형 AI 도입 이후 처음으로 글로벌 노동자들 사이에서 AI 도입률이 둔화되고 AI에 대한 열기가 식고 있음
     * Slack의 노동력 지수(Workforce Index) 조사 (17,000명 이상의 사무직 근로자 대상)에 따르면, 직원들이 AI 사용을 숨기는 이유, AI 도구가 업무량을 증가시킬 수 있다는 우려, 젊은 세대의 AI 기술을 최적화하는 방법 등에 대한 인사이트를 제공함

  주요 조사 결과

     * 임원진의 AI 투자 계획: 99%가 올해 AI에 투자할 예정이며, 97%는 AI를 비즈니스 운영에 통합하는 것에 대해 긴급성을 느끼고 있음.
     * AI 열기 둔화: 최근 3개월 동안 미국과 프랑스를 포함한 여러 국가에서 AI 도입률이 둔화됨. 글로벌 AI에 대한 열정도는 6% 감소함.
     * AI 사용에 대한 불편함: 사무직 근로자의 48%는 AI를 업무에 사용했다는 사실을 관리자에게 밝히는 것이 불편하다고 응답함. 그 이유는 AI 사용이 치트처럼 느껴짐, 능력이 부족하다고 평가될까 봄, 게으르다고 보일까 봄임.
     * AI 교육 부족: 61%의 사무직 근로자가 AI 학습에 총 5시간 미만을 투자했으며, 이로 인해 AI 도입이 지연되고 있음.
     * 업스킬링에 대한 열망: 76%의 직원이 AI 전문가가 되고 싶어하며, 주요 이유는 산업 트렌드와 개인 목표임.

[AI 도입 둔화의 원인]

    AI 규범에 대한 불확실성과 불편함

     * 많은 근로자들이 회사 내에서 어떤 AI 사용이 허용되는지 모른다고 응답함.
     * 근로자 중 48%는 AI 사용 사실을 관리자에게 공개하는 것이 불편하다고 느끼며, 주요 이유는 치팅처럼 보일까 봄, 능력 부족으로 평가될까 봄, 게으르게 보일까 봄임.

    AI가 기대에 부응하지 못하고 있음

     * AI는 직원들이 더 빠르고 효율적으로 작업을 수행할 수 있게 도와줄 것으로 기대되었으나, 실제로는 더 많은 단순 작업과 업무량 증가로 이어질 수 있음.
     * 직원들은 AI를 통해 의미 있는 활동에 시간을 재할당하고 싶어하지만, 실제로는 더 많은 관리 업무에 시간을 사용하게 될 것으로 예상함.

[리더를 위한 실행 방안]

    AI 팀 빌딩 연습

     * AI 사용 규범이 혼란스러운 경우, AI 팀 빌딩 연습을 통해 서로 다른 관점을 명확히 하고 창의적인 AI 사용 사례를 발굴할 수 있음.
     * AI 교육 프로그램 강화: 임원들은 직원들이 AI 기술을 습득할 수 있도록 **명확한 허가, 교육, 훈련(PET: Permission, Education, Training)**을 제공해야 함.

    생산성 재정의

     * AI 도구는 직원의 생산성을 높이지만, 이는 단순한 업무량 증가를 의미하는 것이 아님. 리더들은 혁신적이고 창의적인 작업에 더 많은 비중을 둘 필요가 있음.

[AI의 미래 전망: 세 가지 예측]

    예측 1: AI 네이티브 세대가 AI 도입을 주도할 것

     * 데이터에 따르면, 현재 졸업하는 대학생들이 회사 내 평균 직원보다 AI 기술이 더 뛰어나다고 68%의 사무직 근로자들이 응답함.
     * 의미: 리더들은 AI에 능숙한 젊은 직원들을 멘토 역할로 활용해 동료 학습을 촉진할 수 있음.

    예측 2: AI 네이티브 세대는 사회적 연결 저하 위험이 있음

     * AI 사용자 81%가 중요한 프로젝트에서 친구나 동료 대신 AI에 도움을 청함.
     * 의미: 리더들은 AI를 단순한 효율성 도구로만 보는 것이 아니라, 인간 간의 협력을 재구성하는 촉매제로 활용할 필요가 있음.

    예측 3: 구직자들은 AI에 능숙한 기업을 선호할 것

     * 4명 중 3명의 사무직 근로자가 AI 도구를 제공하고 활용하는 회사에서 일하고 싶어함.
     * 의미: AI 활용이 더디거나 지원이 부족한 회사는 우수 인재 유치 및 유지에 어려움을 겪을 수 있음.

  조사 방법

     * 본 조사는 2024년 8월 2일부터 8월 30일까지 17,372명의 사무직 근로자를 대상으로 Qualtrics에서 실시됨.
     * 조사 대상은 Slack 및 Salesforce의 직원 또는 고객이 아닌 사무직 근로자들로, 풀타임(주 30시간 이상) 근무자임.

   도구를 사용하지 않을 이유는 도구가 강력하지 않기 때문이어야 할텐데요
"
"https://news.hada.io/topic?id=17856","사이언티픽 아메리칸 퇴임 편집자와 과학의 정치화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       사이언티픽 아메리칸 퇴임 편집자와 과학의 정치화

과학

     * _Scientific American_의 편집장 퇴임과 과학의 신뢰성 저하
          + _Scientific American_의 편집장인 Laura Helmuth가 사임함. 그녀의 사임은 정치적 발언과 관련이 있을 가능성이 있음.
          + Helmuth의 재임 기간 동안 잡지는 정치적 의제를 강조하며 과학적 권위의 신뢰성을 손상시켰다는 비판을 받음.
     * _Scientific American_의 논란
          + 잡지는 때때로 사회 정의 문제를 강조하며 논란을 일으켰음. 예를 들어, ""진화 부정은 백인 우월주의의 한 형태""라는 주장과 같은 기사를 게재함.
          + 통계의 정규 분포를 비판하는 기사도 있었으며, 이는 통계에 대한 기본적인 이해가 부족한 것으로 평가됨.
     * 청소년 성별 의학 논쟁
          + _Scientific American_은 청소년 성별 의학에 대한 논쟁에서 비판을 받음. 잡지는 특정 활동가 그룹의 주장을 반복하며 의료 정보의 왜곡을 초래했다는 비판을 받음.
          + Cass Review와 같은 중요한 연구 결과를 무시하고, 청소년 성별 의학이 효과적이라는 잘못된 믿음을 퍼뜨렸다는 지적이 있음.
     * 과학적 권위의 위기
          + _Scientific American_과 같은 잡지가 정치적 이념에 치우치면서 과학적 권위의 신뢰성을 손상시키고 있음.
          + 전문가들이 신뢰를 잃으면, 잘못된 정보가 확산될 위험이 커짐.
     * 미래 방향
          + _Scientific American_은 과학 자체에 더 집중하는 편집장을 고용함으로써 신뢰를 회복할 수 있음.
          + 사회 정의 문제에 대해 논의할 수 있지만, 과학적 발견을 왜곡하지 않는 것이 중요함.
"
"https://news.hada.io/topic?id=17767","Cacheable - Keyv 기반 Node.js용 캐싱 패키지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Cacheable - Keyv 기반 Node.js용 캐싱 패키지

   다양한 프로젝트에서 사용가능한 캐싱 솔루션 패키지
     * cacheable : 차세대 캐싱 프레임워크. 레이어 1 / 레이어 2 캐싱을 처음부터 설계하여 구축. 분산 캐싱 및 확장성에 강점
     * cache-manager : NestJS와 같은 서비스에서 사용되며, wrap 등 강력한 기능 제공. 다양한 애플리케이션에서 널리 사용
     * cacheable-request : 네이티브 HTTP 요청에 캐시 기능 추가. RFC 준수 캐시 지원. 네트워크 요청에 캐시를 쉽게 적용 가능
     * flat-cache : 파일 저장소 지속성을 가진 빠른 메모리 캐싱. 메모리에 빠르게 접근하면서도 파일에 캐시 데이터 저장 가능
     * file-entry-cache : 파일 메타데이터에 대한 경량 캐시. 특정 파일 세트를 처리하는 프로세스에 적합, 마지막 실행 이후 변경된 파일만 재처리
     * @cacheable/node-cache : node-cache 대체 패키지

Cacheable

     * 분산 캐싱에 중점을 둔 고성능 레이어 1 / 레이어 2 캐싱 엔진
     * CacheSync와 같은 엔터프라이즈 기능 지원 예정
     * Keyv 저장 엔진을 기반으로 하여 견고한 성능 제공
     * 간단한 API로 데이터를 캐시하고 검색하는 기능
     * 주요 특징
          + 간단하고 직관적인 API 제공
          + 불필요한 모듈 없이 가벼운 구조
          + Keyv로 신뢰할 수 있는 확장 가능한 저장 엔진 사용
          + LRU(Least Recently Used) 및 만료 캐시를 지원하는 Memory Caching
          + 오류 복구 및 오프라인 지원을 통해 장애에 강한 구조
          + 동기 및 비동기 함수에 대한 Wrap / Memoization 지원
          + 기능을 확장할 수 있는 Hooks 및 이벤트 처리 지원
          + TTL(시간 제한) 설정을 밀리초 단위로 간단하게 적용 (1분 = 60000ms, 1시간 = 3600000ms, 1일 = 86400000ms)
          + 비차단(non-blocking) 레이어 2 캐싱 연산 지원
          + Pub/Sub 기반의 분산 캐싱 동기화 (곧 출시 예정)
          + 종합적인 테스트 및 코드 커버리지
          + ESM 및 CommonJS 지원, Typescript와 호환

   그냥 패키지 내부에서 primary, secondary로 레이어 나눈 뒤에 keyv에다가 저장하는식이네요
   고전적 의미의 레이어 1 / 레이어 2 캐싱을 기대하셨던 분은 뒤로가기 누르시면 됩니다.
"
"https://news.hada.io/topic?id=17738","Show GN: Node.js 환경에서 Clang을 이용한 C, C++, Java 포매터를 개발하였습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: Node.js 환경에서 Clang을 이용한 C, C++, Java 포매터를 개발하였습니다.

   안녕하세요, Node.js 환경에서 Clang을 이용한 C, C++, Java 포매터를 개발하였습니다. 해당 프로젝트는 이미 더 이상 유지 보수되지 않는(deprecated된) angular의 clang-format 패키지를 기반으로 새롭게 진행하는 프로젝트 입니다.

   한 두달 전쯤에도 한번 같은 내용을 올렸었는데, 패키지의 안정성이 더욱 높아지고 새로운 기능들이 추가되어 다시 글을 작성하게 되었습니다.

   현재 많은 분들이 관심 가져주시고, 기존 레거시 유저분들이 많이 넘어와주신 덕에 주간 다운로드 수 10,000회를 돌파하였습니다. 정말 감사드립니다.

   또한, 해당 패키지는 풀 테스트 커버리지를 달성하였고, Node.js 코어에서 기존 angular의 clang-format 프로젝트 대신 현재 패키지를 이용하는 방식으로 변경하려는 PR이 올라와 있는 만큼, 안정성은 믿고 사용하셔도 될 것 같습니다. (물론, 아직 제가 놓치고 있는 부분들이 있을수도 있습니다...ㅠ)


   해당 패키지는 LLVM의 C 컴파일러로 유명한 Clang의 clang-format을 기반으로 C, C++, Java 언어의 코드 포맷팅을 잡아주는 패키지 입니다. Node.js 환경에서 가장 유명한 패키지 중 하나인 Prettier와 동일한 역할을 한다고 보면 될 것 같습니다.

   다만, Prettier 패키지에서는 C, C++, Java 언어의 포맷팅을 지원하지 않기에, 해당 언어에서 포맷팅을 잡기 위해서는 clang-format을 이용하는 경우가 많습니다.

   Node.js 환경에서의 clang-format은, Node.js 코어 개발과 같이 자바스크립트 코드와 C/C++ 코드를 함께 작성해야 할 때 특히 유용합니다. 기존 clang-format의 경우, 해당 패키지를 이용하기 위한 추가 의존성들을 설치해야 했지만, 현재 패키지를 이용하면 그럴 필요가 없습니다.

   또한, 기존의 clang-format 패키지는 CI 등에서 Node.js와 npm을 이용한 워크플로에 통합하기 꽤나 까다로운 면이 있었지만, 현재 패키지를 이용하면 단순히 npm에서 다운로드만 받고 스크립트 설정만 해주면 되기에, CI 환경에서의 많은 이점이 있습니다.


   추가로, 1.2.0 버전으로 업그레이드 되면서 새로운 기능들이 추가되었습니다. 핵심 변화는 git-clang-format 패키지를 추가했다는 점입니다.

   C/C++ 프로젝트를 진행하다 코드 포맷팅의 필요성을 느껴, clang-format 등의 패키지를 도입하려는 상황을 예로 들어보겠습니다.

   작은 규모의 프로젝트에서는 코드 포맷팅을 일괄적으로 뜯어 고친 뒤 일괄적으로 커밋을 해도 히스토리 추적에 별 문제가 없을 수 있습니다. 다만, 큰 규모의 프로젝트에서는 코드 포맷팅의 도입으로 인하여, 기존 코드의 포맷팅을 일괄적으로 뜯어 고쳐야만 하기에 커밋 히스토리 추적이 지저분해질 위험이 있습니다.

   이때 만약, 개발자가 1000줄의 코드 중 100줄의 코드만 수정하였고, 커밋 시 수정된 100줄의 코드만 포맷팅 검사를 한다면 어떻게 될까요? 첫째로, 수정된 100줄의 코드만 포맷팅을 적용하면 되니, 1000줄의 코드를 모두 뜯어 고칠 필요가 없어져 커밋 히스토리 추적이 편리해질 것입니다. 둘째로, 개발 과정 중에 계속해서 코드가 커밋될 때마다 점점 포맷팅이 적용된 코드가 많아지게 되니 시간이 지날수록 코드 포맷팅은 일관성을 갖추게 될 것입니다.

   이를 위해 사용하는 것이 git-clang-format 패키지입니다. lint-staged를 통해 staged된 파일만 검사하여 CI 속도를 향상시키듯, 이보다 한단계 더 나아가서 변경된 파일 중 변경된 코드에 해당하는 라인만 검사하여 코드 포맷팅 검사를 적용할 수 있습니다. 이 역시 LLVM에서 기본으로 제공되고 있기에, 패키지로 래핑하여 발행하였습니다.

   공식문서에 정확한 사용법을 기술해 두었으니 많은 관심 부탁드립니다.(다만 공식문서는 영어입니다ㅠ) 궁금하신 점이나 다른 의견 있으시면 남겨주시면 감사하겠습니다. 긴 글 읽어주셔서 감사드립니다.

   공식 문서: https://clang-format-node.lumir.page
   레포지토리: https://github.com/lumirlumir/npm-clang-format-node

   오픈소스 개발 응원합니다!

   감사합니다!!🙇‍♂️
"
"https://news.hada.io/topic?id=17737","Show HN: Jelly – 소규모 팀을 위한 간편한 공유 인박스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Show HN: Jelly – 소규모 팀을 위한 간편한 공유 인박스

     * Jelly 소개
          + Jelly는 팀의 공유 이메일 주소를 위한 새로운 공유 인박스임.
          + 간단하고 직관적이며 좌석당 요금을 부과하지 않아 경제적임.
          + 고객 지원, 클라이언트 관리, 커뮤니티 관리 등에 적합한 도구임.
     * Jelly의 주요 기능
          + 팀원 각각이 자신의 로그인 정보를 가지고 이메일을 관리할 수 있음.
          + 이메일마다 비공개 팀 내부 논의를 진행할 수 있어, 답변 전에 질문 가능함.
          + 알림 시스템과 활동 로그를 통해 팀 전체의 커뮤니케이션을 쉽게 추적할 수 있음.
     * Jelly의 경제성
          + 대부분의 공유 인박스는 비싸고 불필요한 기능이 많음.
          + Jelly는 계정당 합리적인 고정 요금을 부과하며, 좌석 제한 없이 팀을 구성할 수 있음.
          + 월 $29로 대부분의 팀이 필요로 하는 기능을 제공하며, 연간 요금은 할인됨.
     * Royal Jelly 플랜
          + 추가 기능이 필요한 팀을 위한 플랜으로, 월 $69에 제공됨.
          + 무제한 팀원, 무제한 대화, 무제한 공유 이메일 주소 제공.
          + Slack 통합, 향상된 연락처, 통계 및 보고, 발송 메일 동기화 등의 기능이 곧 추가될 예정임.
     * Jelly 개발 배경
          + Jelly는 소규모 팀에 의해 소규모 팀을 위해 만들어진 제품임.
          + Good Enough라는 여섯 명의 팀이 개발하였으며, 다른 앱으로 Album Whale, Letterbird, Pika, Yay.Boo! 등이 있음.
     * 연락처
          + 이메일 또는 Mastodon, Threads, Twitter X를 통해 연락 가능함.

        Hacker News 의견

     * 여러 사용자가 이메일을 공유할 수 있는 방법으로 포워딩이나 메일링 리스트를 사용할 수 있지만, 개인 메일함에 도착한 후에는 다른 사람과의 대화 참여가 어려움. Jelly는 비기술자도 쉽게 이메일을 공유할 수 있도록 도와주는 도구임.
     * Jelly의 계획이 소규모 팀이나 2~3명의 사용자에게 적합하지 않음. 이 사용자들을 포착할 수 있는 계획이 필요함.
     * 가족 이메일 공유 도구로 사용할 수 있는지 궁금함. 아이들이 커가면서 이메일 소통이 늘어나고, 한 부모에게만 모든 소통이 집중되는 방식은 확장성이 부족함. 공유 Gmail을 사용할 수도 있지만, 누가 응답할지에 대한 추가 소통이 필요함.
     * 가격을 낮게 유지하는 방법에 대한 의문이 있음. 과거에 저렴한 공유 메일함 서비스가 가격이 급등한 경험이 있음. 작은 프로젝트에 큰 비용을 지출할 수 없음.
     * Google Group의 협업 메일함 모드보다 Jelly가 더 가치 있는 이유에 대한 설명이 필요함. 협업 메일함의 주요 문제는 스팸 처리임. 스팸 필터링을 개선할 수 있는 솔루션이 필요함.
          + 자동화된 스팸을 필터링하는 LLM 응답자 사용
          + 잘못된 회사로 연락하는 스팸 필터링
          + 관심 없는 제품을 판매하려는 스팸 필터링
     * 제품의 간단한 디자인이 마음에 듦. 이메일 전달 가능성에 대한 우려가 있음. 이메일이 올바른 장소에 도착하는지 확신이 필요함.
     * Front와 유사하지만, Jelly는 ""충분히 좋은"" 솔루션을 제공함. Front는 현대 고객 서비스 플랫폼으로 발전했음.
     * 랜딩 페이지 디자인이 마음에 듦. 판매 포인트를 잘 강조함. 몇몇 사람들에게 공유할 예정임.
     * 제품이 훌륭해 보임. 관심 있는 팀이 있을 수 있음. 공유 메일함이 비싸고 불필요한 기능이 많다는 점을 지적함.
     * Arrested Development 참조가 귀여웠음.
"
"https://news.hada.io/topic?id=17781","Prometheus의 irate가 spike를 잡지 못하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Prometheus의 irate가 spike를 잡지 못하는 이유

     * PromQL에서 per-second rate을 계산하는데 사용되는 rate와 irate
     * irate은 [range] 동안의 spike를 잡고, rate은 이 spike들을 평균낸다는 오해가 존재
     * irate은 마지막 두 data points의 per-second rate 만을 계산
     * query_range의 각 query에서 보게될 마지막 두 data points가 어떤게 될건지는 start, end, step 파라미터에 의존함
          + 따라서, irate에 의존하는 대시보드는 zooming과 scrolling에 따라 크게 변함
     * 급격하게 변하는 counter에서 irate로는 모든 spike를 잡기 어려움


     * MetricsQL(PromQL과 대부분 호환되는 Query Language)에서는 이를 위해, rollup_rate 함수를 지원
     * 이 함수는 인접한 각 data point들끼리의 rate을 구하고 이것의 min, avg, max를 반환
     * 따라서 모든 spike가 일관되게 min과 max에 잡힐 수 있음
     * 직접 대시보드에서 시각화해보면, rollup_rate(min) <= irate <= rollup_rate(max)를 만족하는 band를 볼 수 있음


     * irate에 대한 또 하나의 오해는, rate 보다 빠르다는 것
     * 아무래도 [range] interval 동안 주어진 data point들 중에서 마지막 두개만 봐서 그렇게 느끼는걸지도?
          + 하지만 실제로 Prometheus가 가장 많은 CPU time을 쓰는곳은 query_range API를 사용할때, [start...end] interval 동안의 data point들을 추출하는 것
          + 어떤 함수를 쓰는지는 크게 성능에 영향이 없음


   블로그 글에서 설명이 안되어 있어서 추가하면, rollup_rate의 rollup=""avg"" 값을 쓰는것과, rate에 그냥 avg를 쓰는것에 대한 차이는 MetricsQL 개발자의 다른 답변에서 확인 가능합니다.
"
"https://news.hada.io/topic?id=17862","MailCatcher로 초간단 SMTP 서버 운영하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MailCatcher로 초간단 SMTP 서버 운영하기

     * MailCatcher는 간단한 SMTP 서버를 실행하여 수신된 메일을 웹 인터페이스로 보여주는 도구임.
     * 메일을 smtp://127.0.0.1:1025로 전송하도록 설정하고, http://127.0.0.1:1080에서 수신된 메일을 확인할 수 있음.
     * 주요 기능
          + 모든 메일을 수신하여 저장하고, HTML, 일반 텍스트, 소스 버전을 표시함.
          + HTML을 재작성하여 내장 이미지 및 링크를 새 창에서 열 수 있도록 함.
          + 첨부 파일 목록을 제공하고 개별 다운로드를 지원함.
          + 원본 이메일을 다운로드하여 기본 메일 클라이언트에서 볼 수 있음.
          + 명령줄 옵션을 통해 기본 SMTP/HTTP IP 및 포트 설정을 변경할 수 있음.
          + WebSockets를 지원하는 브라우저에서는 메일이 즉시 나타나며, 그렇지 않으면 30초마다 업데이트됨.
          + 백그라운드에서 데몬으로 실행 가능하며, 포그라운드에서도 실행 가능함.
          + PHP에서 사용하기 쉽게 하는 sendmail 유사 명령인 catchmail을 제공함.
          + 메시지 간 키보드 탐색 지원.
     * 설치 및 사용법
          + gem install mailcatcher 명령어로 설치 가능하며, mailcatcher 명령어로 실행함.
          + 메일을 smtp://127.0.0.1:1025로 전송하고, http://127.0.0.1:1080에서 확인함.
          + 명령줄 옵션은 mailcatcher --help로 확인 가능함.
     * Bundler 및 RVM
          + Gemfile에 MailCatcher를 추가하지 말고, README에 사용법을 기재할 것을 권장함.
          + RVM을 사용할 경우, 전용 gemset에 설치하여 gem 충돌을 방지할 것을 권장함.
     * Rails 및 PHP 설정
          + Rails에서는 environments/development.rb에 SMTP 설정을 추가하여 사용함.
          + PHP에서는 php.ini 또는 Apache 설정에서 sendmail_path를 설정하여 사용함.
     * Django 설정
          + Django에서는 settings.py에 이메일 설정을 추가하여 사용함.
     * API
          + RESTful URL 스키마를 통해 JSON 형식으로 메시지 목록을 다운로드할 수 있음.
     * 주의사항
          + 메일 처리 기능은 기본적이며, 필요에 따라 수정 가능함.
          + UTF-8 인코딩을 완벽히 지원하지 않으므로, 적절한 메일 라이브러리를 사용할 필요가 있음.
     * 향후 계획
          + 요청 시 메일 전송 기능 추가.
          + CampaignMonitor의 디자인 가이드라인 및 CSS 지원 매트릭스에 대한 호환성 테스트.

        Hacker News 의견

     * 이 도구는 유용하지만 유지보수가 중단되었음. MailHog도 마찬가지임. MailPit, MailCrab, smtp4dev가 현대적인 대안임
          + MailPit: 링크
          + MailCrab: 링크
          + smtp4dev: 링크
     * 유지보수자는 현재 많은 작업을 하지 않음. 도구가 완성되었기 때문임. 개선할 점은 많지만, 기능을 크게 향상시키지는 않음. 문제가 발생하면 수정함
     * Mailpit은 Go로 작성되었고, 단일 정적 바이너리로 실행되며, 매우 낮은 자원 사용량을 가짐. 적극적으로 유지보수되고 있음
     * SMS 메시지를 로컬 개발 환경에서 잡아내는 유사한 도구를 찾고 있음. 회사는 Mailtrap을 사용하여 이메일 미리보기 도구로 사용 중이며, Twilio를 통해 보내는 SMS 메시지에 대한 유사한 도구를 찾고 있음. Twilio Dev Phone 프로젝트가 있었으나 유지보수가 중단된 상태임
          + Mailtrap: 링크
          + Twilio Dev Phone: 링크
     * 이 도구는 개발용이며, 성숙한 상태임. 최근 1년 내에 Git 활동이 있었음. 특정 기능이 중요하다면, 풀 리퀘스트를 제출하거나 개발을 위한 기부를 고려할 수 있음
     * smtp4dev를 최근에 사용하기 시작했음. 로컬 개발을 위한 ""mailtrap"" 문제는 이미 해결된 문제라고 판단함. Docker-compose 파일에 추가하는 데 15분과 10줄의 코드가 필요했으며, 잘 작동하고 있음. Docker/Podman을 통해 서비스 설정이 매우 쉬움
     * Rails 앱 개발에 Mailcatcher를 사용 중이며, 사용이 매우 쉬움. 다른 것이 필요하지 않다고 생각함. @sj26 및 협력자들에게 감사함
     * MailCatcher를 사용했으나 Arm 머신으로 전환하면서 문제가 발생함. Mailpit을 사용 중이며, 설정이 더 복잡함. MailCatcher가 Arm 문제를 해결한 것 같아 다시 전환할 수도 있음
     * smtp-sink를 오래 사용했으나, 팀이 CLI보다 GUI 도구를 선호하여 Mailcatcher를 발견함. 안정적이고 잘 작동함
          + smtp-sink 사용 예시: $ smtp-sink -u nobody -R /tmp/smtp-sink -d ""maildir/%Y-%m-%d/mail.%H.%M."" 127.0.0.1:25 1024
     * 이러한 도구의 일반적인 용도는 이메일을 보내는 다른 애플리케이션 테스트임. 다른 용도가 있는지 궁금함
"
"https://news.hada.io/topic?id=17850","o1-preview 2025 수능 국어 97점 달성 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      o1-preview 2025 수능 국어 97점 달성

     * 2025학년도 수능 국어에서 O1-Preview가 97점이라는 놀라운 성적을 기록
          + 8번(3점) 비문학지문 오답기록
               o 논리의 오류로 인해 오답인 3번을 선택
     * 벤치마크 과정에 대해서 더 궁금하신 분은 실험과정과 추가적인 내용들을 정리해본 블로그도 적어보았으니 참고해주세요!
     * 2025 수능국어 llm 벤치마크에서 gpt 모델들의 결과
       🥇 1st. o1-Preview: 97점 (1등급)
       🥈 2nd. o1-mini: 78점 (4등급)
       🥉 3rd. gpt-4o: 75점 (4등급): gpt-4o
       4th. gpt-4o-mini: 59점 (5등급)
       5th. gpt-3.5-turbo: 16점 (8등급)
     * 수능 LLM 벤치마크 리더보드 프로젝트의 목적
         1. Human performance와 LLM performance를 비교할수 있는 벤치마크 정보공유
         2. 한국어 언어능력을 평가하는 한국의 가장 공신력 있는 KICE 평가원의 엄선된 벤치마크 데이터셋
         3. 해마다 업데이트 되는 새로운 수능국어 벤치마크 데이터셋으로 데이터 리키지 방지
         4. 특정 국가나 기업에 종속되지 않은 오픈소스 LLM이 한국 수능 1등급에 도달시키는것


     * 본 프로젝트는 Markr.AI에서 진행한 프로젝트입니다.
     * 본 벤치마크는 AutoRAG 오픈소스를 활용하여 진행했습니다!
     * 리더보드에 2023 수능국어를 벤치마크 할 수 있는 튜토리얼을 업데이트했습니다!
     * 궁금하신부분이 있다면 언제든 연락주세요!

   블로그 링크가 짤렸네요! 댓글에 다시 올리겠습니다!
   https://velog.io/@minsing-jin/…
"
"https://news.hada.io/topic?id=17749","이례적인 Raku 기능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              이례적인 Raku 기능

     * 다섯 가지 독특한 Raku 기능
          + Raku는 다양한 언어 기능을 실험하는 실험실과 같음. 여러 동시성 모델과 다양한 기능을 제공하며, 각 기능이 상호작용하는 방식이 독특함.
     * Junctions
          + Junctions는 가능한 값의 중첩을 나타내며, 논리식을 표현하는 데 사용됨.
          + 모든 값을 대상으로 연산을 적용하며, boolean으로 변환하여 사용함.
          + Raku는 junctions를 통해 양화사를 우아하게 표현함.
     * Whatevers
          + *는 ""whatever"" 기호로 다양한 역할을 수행함.
          + 범위나 시퀀스에서 ""unbound""를 의미하며, 익명 함수로 변환됨.
          + 여러 Raku 메서드가 함수를 받도록 오버로드되어 있어 유용함.
     * 정규 표현식
          + Raku는 기존의 POSIX 및 Perl 호환 정규 표현식과는 다른 새로운 구문을 제공함.
          + 정규 표현식을 조합하여 더 간단하고 가독성 있는 부분으로 나눌 수 있음.
          + 구문 분석 문법을 기본 언어 기능으로 지원함.
     * Hyperoperators
          + l>>.method는 기본적으로 map과 유사하며, 하위 목록까지 재귀적으로 내려감.
          + 이진 하이퍼 연산자는 두 목록에 대해 요소별로 연산을 적용함.
          + 여러 입력에 대해 동일한 공식을 실행하는 데 유용함.
     * Pair Syntax
          + Raku의 해시는 key => value 쌍으로 구성되며, ""colon syntax""를 통해 간결하게 쌍을 지정할 수 있음.
          + :key와 :!key는 각각 key => True와 key => False로 매핑됨.
          + 메서드 설정을 매우 간결하게 할 수 있음.
     * 차세대 실험실: Slangs와 RakuAST
          + Slangs는 Raku 구문을 수정하는 기능으로, 루프 구문 수정, 식별자 변경 등을 가능하게 함.
          + RakuAST는 모든 Raku 표현식을 Raku 내부에서 AST로 파싱할 수 있게 함.
     * 보너스 실험
          + Raku는 ""Rakudo Star"" 설치를 통해 사전 설치된 서드파티 모듈 세트를 제공함.
          + 이는 큰 표준 라이브러리의 유지 관리 부담과 사용자가 적절한 패키지를 찾는 부담 사이의 훌륭한 절충안임.
     * 블로그 추천
          + Elizabeth Mattijsen과 Codesections의 블로그는 Raku 내부에 대한 많은 정보를 제공함.
          + Raku Advent Calendar는 고급 Raku 기술에 대한 훌륭한 자료임.

        Hacker News 의견

     * JavaScript에서 독립적으로 구현한 구성 정규 표현식 기능을 소개하며, 이는 여러 프로젝트에 자주 사용되는 라이브러리임. 이 기능은 언어 내에서 일급 파서를 사용하는 느낌을 조금 더 가깝게 해줌. 예로 미디어 타입 파싱을 구현한 사례를 공유함
          + ""templated-regular-expression""은 npm과 GitHub에서 확인 가능함
          + 프로그래밍 언어는 실제 파서를 가져야 하며, 정규 표현식을 파서로 사용해서는 안 됨. 그러나 정규 표현식을 사용할 경우, 작은 조각으로 나누는 것이 좋음
     * Raku 코드베이스를 유지보수하기 전에 산업을 떠나고 싶다는 의견이 있음
     * Raku의 속도 문제는 여전히 해결되지 않았으며, 최신 Raku는 Python 3.13보다 로그 파일을 파싱하는 데 6.5배 더 오래 걸림
     * Raku의 주요 기능은 CLI와 문법임
          + CLI는 일반적인 기능이며, Raku에 내장되어 있어 사용하기 좋음
          + 문법은 프로그래밍 언어에서 ""일급 시민""으로 취급되는 것이 드물며, 객체 지향 프로그래밍을 사용해 문법을 생성할 수 있는 능력을 제공함
     * Hyper는 재귀 스킴의 더 임시적인 버전처럼 보이며, Scala의 _와 유사함. 람다를 위해 Scala를 사랑하며 모든 언어가 유사한 것을 채택해야 한다고 생각함
     * (2, 30, 4, 50).map(* + *)가 (32, 45)를 반환하는데, (32, 54)를 반환해야 하는지에 대한 의문이 제기됨. 이는 일부 국가에서 숫자를 표현하는 방식의 차이 때문일 수 있음
     * Perl이 이제 APL 계열 언어로의 관문 역할을 하는지에 대한 의견이 있음
     * (2,4,8...*)[17]이 262144를 반환하는 것에 놀라움을 표함
     * Raku를 실제 환경에서 사용하며, 텍스트 처리에 가장 적합한 언어라고 생각함. 파서를 구축하는 것이 매우 좋으며, LLM 텍스트 파이프라인을 만드는 데 최적의 언어가 아닌 것이 놀라움
     * 이 프로젝트를 오랫동안 지켜보았으며, 흥미롭지만 Perl 6가 이 프로젝트로 인해 크게 방해받았다는 점이 아쉬움
"
"https://news.hada.io/topic?id=17773","왜 요즘 취업이 어려운가? Ghost Jobs 등장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      왜 요즘 취업이 어려운가? Ghost Jobs 등장

     * 왜 지금 일자리를 찾기 어려운가? 유령 일자리의 등장
          + 연구자 Hunter Ng는 ""유령 고용"" 또는 ""유령 일자리""라는 새로운 현상을 조사함. 이는 고용주가 채용 의도가 없이 일자리 공고를 내는 것을 의미함.
          + Glassdoor의 새로운 데이터셋과 LLM-BERT 기법을 사용하여, 최대 21%의 일자리 광고가 유령 일자리일 수 있음을 발견함. 이는 특히 전문 산업과 대기업에서 두드러짐.
          + 이러한 경향은 추가적인 일자리 광고 게시의 낮은 한계 비용과 인재 파이프라인 유지를 위한 것일 수 있음.
          + 연간 경향을 조정한 후, 유령 일자리가 지난 15년간 베버리지 곡선의 최근 불일치를 설명할 수 있음을 발견함.
          + 정책 입안자들은 이러한 관행을 인지해야 하며, 이는 상당한 구직 피로를 유발하고 시장 신호를 왜곡함.

        Hacker News 의견

     * 어떤 사용자는 그린 카드 신청을 위해 유령 채용 공고를 내야 하는 상황을 설명하며, 인터뷰를 통해 뛰어난 지원자를 만나도 기존 팀원을 해고할 의사가 없음을 밝힘
          + 이는 정책 입안자들이 인식해야 할 문제로, 유령 채용이 시장 신호를 왜곡하고 직무 피로를 유발함을 지적함
     * 한 사용자는 유령 채용 경험을 공유하며, 채용 과정이 복잡해지고 지연되는 것에 비판적임
          + 채용 과정 자체가 목적이 되어 결과에 대한 평가가 부족함을 언급함
     * 또 다른 사용자는 유령 채용의 존재를 인정하지만, 연구가 이를 증명하지 못한다고 주장함
          + 구직자들은 실제로 채용이 실재하는지 알기 어려우며, Glassdoor 리뷰가 충분한 통찰을 제공하지 못한다고 봄
     * 유령 채용과 관련된 문제로 인해 특정 회사나 전반적인 채용 시장에 대한 신뢰를 잃고 개인 프로젝트에 집중하게 된 경험을 공유함
     * 유령 채용 문제 외에도 기술 면접에서 기술보다는 시험 불안감을 평가하는 경향이 있음을 지적함
     * 몇몇 회사들은 개인 데이터를 수집하기 위해 채용 공고를 내거나, 직원 생산성을 높이기 위해 채용 공고를 유지함
          + 어떤 회사들은 투자자에게 긍정적인 이미지를 주기 위해 채용 공고를 유지함
          + 한 사용자의 아내는 직접적으로 회사에 지원하여 인맥을 통해 직업을 구함
     * 회사들이 경쟁사보다 더 커 보이거나 경제적 성공을 가장하기 위해 유령 채용을 한다는 사실을 무시하고 있다고 주장함
     * H1B 비자를 위한 채용이 많으며, 미국인들이 잘 알려진 기술 회사에 채용되지 않는다고 주장함
     * 유령 채용과 기회주의적 채용의 차이를 묻는 사용자는, 자신이 속한 팀에서는 의도적으로 채용하지 않을 지원자를 인터뷰한 적이 없다고 밝힘
          + 예기치 않게 뛰어난 지원자가 있을 경우에만 채용을 고려한다고 설명함
     * 내부 정치적 갈등이 유령 채용을 유발할 수 있음을 지적함
          + 중간 관리층이 자원 할당에 많은 시간을 소비하며, 채용 파이프라인이 계획 주기보다 길어져 인력 배치가 변동될 수 있음을 설명함
"
"https://news.hada.io/topic?id=17827","첫 번째 Exit에서 얻은 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           첫 번째 Exit에서 얻은 교훈

     * TinyPilot이라는 하드웨어 스타트업을 매각한 후, 이 과정에서 얻은 실용적인 교훈을 공유
     * 매각이 어떻게 이루어졌고, 무엇이 잘 되었으며, 향후 개선하고 싶은 부분, 그리고 예상치 못한 점들을 정리

# 매각 세부 사항

     * 매각 가격: $598,000 (연간 수익의 2.4배)
     * 중개 수수료: $88,900
     * 법률 비용: $18,297
     * 매각으로 인한 이익: $490,803
     * 지불 조건: 매각 시 전액 현금 지급 (추가 수익 없음, 판매자 금융 없음)
     * 판매자 의무: 30일 무료 컨설팅 (최대 80시간)
     * 사업의 총 수익 (최종 매각 포함): 4년 동안 $920k

# 잘한 점

  문서화에 많은 투자

     * 첫 창업을 시작하기 전, John Warrilow의 Built to Sell 책을 읽었음. 이 책은 창업자가 일상적인 관리에 참여하지 않아도 원활하게 운영되는 회사를 만드는 것을 목표로 권장함
     * 반복 가능한 프로세스를 좋아했기 때문에, TinyPilot 팀을 구성할 때 문서화에 많은 투자를 했음
     * 직원 교육을 직접 대면이나 화상으로 하지 않고, Notion에 플레이북을 작성해 교육함. 문제가 발생하면 플레이북을 수정해 오류를 줄였음
     * 신규 팀원은 같은 플레이북을 통해 온보딩하며, 이를 지속적으로 개선함
     * TinyPilot 매각 후 계약서에는 30일 전환 기간 동안 최대 80시간의 컨설팅을 제공하는 내용이 포함되었음. 하지만 구매자는 약 25시간만 필요로 했음
     * 팀이 이미 TinyPilot의 일상 운영을 잘 알고 있었고, 구매자는 모든 문서에 접근할 수 있었기 때문에, 전환기 대부분의 시간은 새로운 소유자를 팀과 주요 공급업체에 소개하는 데 사용되었음

  전환 체크리스트 작성

     * 회사를 매각 준비하면서, 매각 전에 완료해야 할 작업 목록을 체크리스트로 만들기 시작했음
          + 여기에는 오래된 플레이북 삭제, 모든 계정 자격 증명을 Bitwarden에 저장하는 작업 등이 포함됨
     * 실사 단계에 접어들면서, 전환 기간 동안 필요한 작업들을 추가하여 체크리스트를 확장함
     * 체크리스트는 매각 전, 매각 직후 1-2일, 매각 후 첫 주, 매각 후 첫 달로 구분하여 작성
     * 이 체크리스트는 특히 매각 완료 주간에 매우 유용했음.
          + 많은 계정이 새 소유자에게 이전되고, 프로세스가 조정되어야 했기 때문에, 차분한 시기에 작성한 체크리스트가 큰 도움이 되었음

  신뢰할 수 있는 중개인과 협력

     * 처음에는 M&A 중개인에 대해 부정적인 인식이 있었음. 중개인은 거래를 빨리 성사시키는 데만 관심이 있고, 다른 것은 신경 쓰지 않는다는 생각이었음
     * 2023년 Microconf에서 Quiet Light Brokerage의 고문인 Chris Guthrie를 만났음. 그는 편안하고 압박감 없이 창업자 중심의 접근 방식을 보여주었음. 과거 창업자였던 그는 빠른 수익보다는 창업자에게 최상의 거래를 찾는 것을 중요시했음
     * Quiet Light와의 협력에서 인센티브가 잘 맞는다고 느꼈음. 부트스트랩 창업자들이 M&A 중개인을 찾는 경우는 드물기 때문에, Quiet Light는 긍정적인 평판을 유지해야 하는 자연스러운 압박감이 있었음
     * 매각 과정에서 Quiet Light의 $89k 수수료(매각 금액의 15%)에 대해 의문을 제기하는 사람도 있었지만, 나는 여전히 공정한 수수료라고 생각함. 그들은 내가 혼자서는 찾을 수 없는 구매자를 찾아주었고, 거래가 잘 진행되도록 도와주었음

  셀러 파이낸싱 회피

     * 현금이 급하게 필요하지 않았기 때문에, 초기에는 구매자가 수년간 분할 지급하는 조건에도 열려 있었음
     * 그러나 다른 창업자들과 이야기를 나눈 후, 셀러 파이낸싱을 피하라는 조언을 받음. 한 창업자는 이렇게 말했음:

     ""구매를 위해 직접 자금을 대면, 이제 당신은 구매자를 위해 일하는 셈입니다.""

     * 처음에는 이 말을 이해하지 못했음. 매각 자금을 대면 왜 내가 구매자를 위해 일하게 되는 것일까?
     * 창업자는, 사업이 돈을 벌지 않으면 판매자는 돈을 받을 수 없고, 새로운 소유자는 이를 알고 있다는 점을 설명해 주었음. 새로운 소유자는 사업이 실패할 경우 부채를 회수할 수 없는 판매자에게 관리 책임을 떠넘길 수 있음
     * 또 다른 위험은, 소규모 대출자로서 구매자가 부채를 갚지 않을 경우 이를 회수할 도구나 경험이 부족하다는 점임. 구매자가 현금을 가지고 있어도 단순히 돈을 갚지 않기로 결정할 수 있음. $1M 이하의 거래에서는 악의적인 구매자에게서 돈을 회수하려면 법무 비용이 더 많이 들 수 있음
     * 다른 선택지가 없었다면 셀러 파이낸싱을 고려했을 수도 있지만, 구매자가 은행 대출을 확보하지 못한다면 이는 경고 신호일 것임. 또한, 나의 위험이 은행보다 크기 때문에 훨씬 높은 이자율을 부과해야 할 것임

  계약 후 추가 지불이 없다고 가정함

     * 다른 창업자들과의 대화에서, 많은 사람들이 계약 후 받기로 한 금액에 대해 실망했다는 이야기를 들었음
          + 일부는 구매자가 계약을 지키지 않았지만, 소송하기에는 금액이 너무 적었음
          + 다른 경우에는 새로운 소유자가 창의적인 회계 방식을 사용해 성과 기반 보너스 지급을 회피했음
     * 일관된 조언은 계약 구조를 ""계약 후 추가 지불이 전혀 없더라도 만족할 수 있게"" 설계하라는 것이었음. 계약 후에 받는 금액은 예상치 못한 보너스로 간주해야 함
     * 구매자와 나는 계약 후에 누락된 작은 비용들에 대해 몇 차례 소액을 주고받았음. 이 금액은 전체 거래의 작은 부분으로, $5k 이하였음
     * 만약 구매자가 지불을 거부했더라도, 다소 실망했겠지만 쉽게 넘길 수 있는 수준이었음

  매각 후 비즈니스에 대한 내 영향력의 한계를 인식함

     * 매각의 중요한 기준 중 하나는, 제품, 팀, 고객에 지속적으로 투자할 의지가 있는 새로운 소유자를 찾는 것이었음
     * 다른 창업자들에게 ""회사를 단기 이익을 위해 악용하려는 구매자를 피하는 방법""에 대해 조언을 구했음. 그들의 조언은, 매각 후에 새로운 소유자의 행동을 내가 통제할 수 없으니 그에 대해 걱정하지 말라는 것이었음
     * 매각 후 새로운 소유자의 운영 방식을 통제할 수는 없지만, 위험한 구매자를 선별할 수는 있었음. 예를 들어, Idera와 같은 사모펀드가 접근했다면, 이들이 인수 후 직원을 해고하는 사례가 많다는 것을 알고 TinyPilot에 대한 계획을 어느 정도 예상할 수 있었음
     * 나는 회사에 대한 비전이 나와 일치하는 구매자를 찾으려 했지만, 동시에 내 영향력이 매각 완료일에 끝난다는 점도 인식하고 있었음
     * 새로운 소유자는 자신의 방식대로 회사를 운영하고 있지만, 우리가 논의했던 회사 비전과 부합하는 접근 방식을 취하고 있음. 이 결과를 보장할 수는 없었지만, 구매자를 신중히 선별한 것이 어느 정도 긍정적인 결과를 가져왔다고 생각함

  중개인 수수료를 내가 돈을 받을 때 지급하도록 계약 수정

     * Quiet Light의 중개인 계약 초안에는 수수료가 매각 금액의 일정 비율이며, 계약 체결 시점에 지급된다고 명시되어 있었음
     * 문제는, 판매자인 내가 계약 체결 시점에 전체 매각 금액을 받지 못할 가능성이 있다는 점이었음. 중개인과 계약할 때는 어떤 조건으로 거래가 이루어질지 알기 전에 서명하게 됨
     * 매각 계약에 분할 지불 조건이 포함될 경우, 나는 Quiet Light에게 선지급한 후, 수년간 전체 금액을 받기 위해 기다려야 했을 것임. 더 나쁜 경우, 구매자가 계약 후 지불을 하지 않으면 나는 받지 못한 돈에 대해 중개인 수수료를 이미 지불한 셈이 됨
     * 나는 Quiet Light에게 ""내가 돈을 받을 때만 중개인도 수수료를 받는다""는 내용으로 계약을 수정해달라고 요청했고, 그들은 신속히 동의했음
     * 계약 조건이 조정되어 안심할 수 있었음. 새로운 지불 조건 덕분에 나와 Quiet Light의 인센티브가 일치하게 되었고, 그들도 분할 지불에 반대할 만큼 강한 동기를 가지게 되었음

  변호사 없이 먼저 논쟁적인 문제 논의

     * 구매자의 변호사가 중개인의 템플릿 대신 자산 매매 계약 초안을 작성했음. 대부분 초안에 동의했지만, 몇 가지 주요 조건에서 의견 차이가 있었음
     * 변호사에게 각각 원하는 바를 전달하고 협상하게 할 수도 있었지만, 변호사 비용이 매우 비쌌음 (내 변호사는 시간당 $550)
     * 또한, 변호사가 참여하면 프로세스가 지연됨. 구매자와 나는 보통 하루 내로 만날 수 있었지만, 변호사들이 모두 참석하는 회의를 잡으려면 일주일이 걸렸을 것임. 이미 3개월이 걸린 과정에서 하루하루가 중요했음
     * 계약에서 의견 충돌이 있을 때, 먼저 구매자와 1대1로 논의했음. 이 대화에서 내 목표는 계약 조항을 넘어서 그 조항이 필요한 근본적인 이유를 찾는 것이었음
     * 예를 들어, 초안에서는 매각에 대한 공개 논의를 엄격히 제한하는 조항이 있었음. 구매자와 이 조항의 이유를 논의한 결과, 실제로는 소수의 사안만 비공개로 유지하길 원했음. 우리는 “공개적으로 아무것도 논의할 수 없다”에서 “이 두 가지 특정 사안을 공개적으로 논의할 수 없다”로 조항을 수정했고, 양측 모두 이 합의에 만족했음

  전용 비즈니스 계정 사용

     * TinyPilot의 소유권 이전이 매끄럽게 이루어진 이유 중 하나는, 모든 계정과 인프라가 다른 사업이나 개인 계정과 완전히 분리되어 있었기 때문임
          + 항상 @tinypilotkvm.com 이메일 주소를 사용해 비즈니스 관련 이메일을 보냈음
          + TinyPilot을 대신해 서비스에 가입할 때도 항상 @tinypilotkvm.com 이메일 주소를 사용했음
          + TinyPilot의 이메일은 전용 Fastmail 계정에 저장함
               o 초기에는 다른 사업들과 Fastmail 계정을 공유했지만, 나중에 독립된 Fastmail 계정으로 이전함
          + 개인 전화번호를 TinyPilot과 연결하지 않고, 전용 Twilio 번호를 사용해 내 실제 번호로 착신 전환함
          + 모든 계정 자격 증명은 Bitwarden에 저장했음
     * 매각 후 제어권 이전이 매우 간단했음. 새 소유자를 Bitwarden의 관리자에 추가했고, 그들이 계정을 인수함. 2FA 코드 일부가 Bitwarden에 등록되지 않았던 문제가 있었지만, 이를 신속히 해결했음

# 향후 개선할 점

  현금 구매자에게 인센티브 제공

     * 사업 매각 시 실사 과정이 길어질수록 매각 준비에 많은 시간을 투자하게 되어, 사업 운영이 방해받음
     * TinyPilot의 경우, 구매자가 미국 소기업청(SBA) 대출을 이용해 매입했는데, 이 과정은 보통 3-5개월 소요됨
     * 대출 과정은 계약서가 복잡해지고 법무 비용이 증가함. TinyPilot의 경우, 법무 비용만 각각 $10k 이상 발생
     * 현금 거래는 의사 결정자가 적고 서류 작업이 간소화되어, 매각 절차가 빠르게 진행됨. 현금 거래는 30일 이내에 완료되는 경우도 있음
     * 다음 사업 매각 시, 현금 구매자를 유치하기 위해 가격 할인을 제공하거나 빠른 계약 체결을 유도할 계획임

  계약의 주요 조건을 더 일찍 논의하기

     * 매각 과정에서 가장 스트레스가 컸던 부분은 계약 협상 단계였음
     * 실사 시작 5주가 지나서야 계약 초안을 받았으며, 이미 많은 정보를 공개한 상태에서 협상력이 낮아졌다고 느낌
     * 투자의향서(LOI) 단계에서 전체 계약서를 미리 받았다면, 문제되는 조항을 더 빨리 수정 요청할 수 있었을 것
     * 그러나 구매자 입장에서는 법률 자문 비용이 크기 때문에, 판매자에게 약간의 의무가 부여되기 전까지 계약 초안을 준비하기 꺼려함
     * 다음에는 LOI 단계에서 중요한 몇 가지 조건을 미리 협상할 계획
          + 짧은 전환 기간
          + 제한된 기밀 유지 조항
          + 판매자 책임 한도를 매각 금액의 50%로 제한

  법률 자문을 조기에 시작하기

     * 중개인과 협의 시작 시 M&A 법률 회사를 선정했으나, 구매자로부터 계약 초안을 받기 전까지는 변호사와 추가 논의하지 않았음
     * 투자의향서(LOI)가 법적 구속력이 없다고 생각하여 변호사에게 검토를 요청하지 않았음
     * 하지만 투자의향서는 이후 계약의 기준이 되기 때문에, 이 단계에서 변호사를 참여시켰다면 도움이 되었을 것
     * 변호사가 조기에 참여했다면 기존 계약 검토나 실사 준비 문서 수집에서도 도움을 받을 수 있었을 것
     * LOI 단계에서 변호사와 함께 작업하는 것은 변호사와의 협업 경험을 평가할 좋은 기회이기도 했음. 변호사에 대한 불만이 생겼지만, 그때는 이미 변호사를 교체하기엔 늦었음

  비공식 '작은 사안 합의서' 작성하기

     * TinyPilot의 사무실은 판매자와 가까웠지만, 구매자에게는 비행기 여행이 필요할 만큼 거리가 있어 유지할 계획이 없었음
     * 사무실에는 약 $1k 가치의 장비가 있었지만, 작은 항목들이 많아 청산 비용이 수익보다 높았음 (예: 프린터를 $40에 팔아도 판매 준비에 드는 비용이 더 큼)
     * 이러한 자산은 사업 자산으로 계약서에 포함해야 한다고 느껴, 사무실 내 자산 목록 작성과 처리 계획에 시간을 많이 소비함. 변호사 비용으로 $2k를 지출했지만 자산 가치는 $1k에 불과했음
     * 다시 한다면, 비공식적인 '작은 사안 합의서'를 구매자와 작성할 것임. 공식 법적 문서 외부에 위치하며, ""여기 있는 내용은 법적 효력이 없습니다""라는 문구를 포함할 예정
     * 이 합의서는 중요한 결정이 아니지만, 양측이 가볍게 해결할 수 있는 작은 사안에 대해 합의할 수 있는 장치가 될 것임

  팀에게 매각 발표를 늦추기

     * 매각 소식을 언제 팀에게 알려야 할지 고민이 있었음
     * 계약이 완료될 때까지 비밀로 하면 팀에게 거짓말을 하는 셈이지만, 완전히 투명하게 공개하면 큰 리스크를 감수해야 함
          + 팀원들이 보너스나 승진을 요구하거나, 매각 소식이 동기를 상실하게 만들어 업무 성과가 저하될 수 있음
     * TinyPilot 팀과의 관계가 좋았지만, 관계가 끝나갈 때 사람들은 예상치 못한 행동을 할 수 있음
     * 중개인과의 계약을 맺는 시점에서 팀에게 매각 사실을 공개했는데, 이는 계약 완료 6개월 전이었음
     * 큰 문제는 없었지만, 이 발표는 관리 동태에 영향을 주었고 성과 관리가 어려워졌음
     * 팀 입장에서는 매각이 새로운 소유자가 자신들을 해고하거나 역할을 크게 변경할 가능성을 의미함
          + 팀원들이 매각을 방해하려 한다면, 구매자를 겁먹게 하거나 회사 가치를 $50-100k 낮출 수도 있음
     * 다음에는 매각이 확정된 후 발표할 예정이며, 매각이 항상 가능하다는 점을 사전에 설명할 계획임
     * 또한, 팀의 이해관계에 부합하는 비전을 가진 구매자를 우선시할 것임
     * 이 전략이 모두에게 이상적이거나 공평하지는 않지만, 여러 불완전한 옵션 중 가장 나은 선택처럼 보임

  모든 문제를 재앙으로 여기지 않기

     * 실사 과정은 매우 스트레스가 컸고 의욕을 꺾는 일이었지만, 매 순간 문제를 과장하며 더 어렵게 만들었음
     * 협상에서 작은 장애물이 생길 때마다 그 문제가 거래를 완전히 망칠 것이라는 최악의 시나리오를 상상했음
     * 예를 들어, TinyPilot은 H.264 비디오 인코딩 알고리즘을 사용했으며, 이는 특허가 있어 출시에 앞서 라이선스를 취득해야 했음
     * 실사 과정에서 이 라이선스가 자산 매각 시 이전이 금지된다는 사실을 알게 되자, 특허 소유자가 매각을 막고 $100k를 요구할 가능성을 걱정했음
     * 이런 부정적인 상상을 계속하면서 잠을 이루지 못했으나, 다음 날 구매자가 특허 소유자로부터 새로운 라이선스를 받을 준비가 되었다고 연락해 옴
     * 문제의 증거도 없는 상황에서 혼자 과도하게 걱정했음을 깨달음
     * 다음에 사업을 매각할 때는 잠시 멈추고 상황을 지켜보며 과도한 걱정을 하지 않도록 할 계획임

  주요 공급업체 정보를 일찍 공개하되 LOI에 더 강력한 제한 설정

     * 경험 있는 창업자의 조언에 따라 TinyPilot의 핵심 공급업체 이름을 매각 완료 후까지 비공개로 유지했음
     * 정보 보호를 위해 구매자에게 비밀 유지 서약을 요구할 수는 있지만, 소규모 거래에서는 이를 강제하기 어려움. 정보를 공유하지 않는 것이 유일한 방법이라는 의견이었음
     * 공급업체 이름을 비공개로 했지만, 다음에는 그렇게 하지 않을 계획임
     * 실사 과정에서 지난 2년간의 은행 명세서를 제공해야 했는데, 명세서에 공급업체 이름이 자주 등장했음. 이를 모두 검토하며 이름을 수동으로 가리고 PDF를 수정하는 데 많은 시간이 소요됨
     * 며칠 후 인벤토리 보고서를 보냈을 때, 구매자가 ""FooCorp는 누구인가요?""라고 물었음 (FooCorp는 실제 이름이 아님). 보고서에서 실수로 이름을 가리지 않고 전송했음
     * 몇 주 후, 구매자의 은행 측에서 공급업체 이름 공개를 강력히 요구해 결국 모든 정보를 공개해야 했음
     * 향후에는 실사 과정에서 얻은 내부 정보를 악용하지 못하도록 계약서에 강력한 제한 조항을 추가할 계획임. 경쟁사에 매각할 때는 기밀을 더 신중하게 보호하겠지만, 기본적으로는 계약에 의존해 부정행위를 막을 것임
     * 핵심 공급업체 이름을 숨기면 실사 과정이 더 복잡해지며, 단 한 번의 누락으로도 수시간의 작업이 무효화될 수 있음

  중개인 수수료에서 재고 제외하기

     * Quiet Light와의 중개인 계약에서 유일한 아쉬움은 중개인 수수료에 TinyPilot의 재고 가치가 포함된 것이었음
     * 재고 가치는 제조 주기에 따라 최대 4배까지 변동할 수 있음. 재고가 많을 때 중개인 수수료로 $20k를 지불하고, 재고가 적을 때 $5k를 지불하는 것은 비합리적임
     * 더 나쁜 점은 재고를 원가로 구매자에게 판매했기 때문에, 중개인이 높은 가격으로 재고를 협상해 수수료를 받을 여지가 없었음. $100k 재고를 가지고 있을 경우, 중개인 수수료로 $10k를 지불하면 실제로 $90k만 받게 됨
     * 운 좋게도 매각이 완료된 시점에 재고 수준이 이상적이었음. 새로운 제조 주문 직전이었기 때문에 재고가 적었고, 구매자가 부족하지 않을 정도로만 남아 있었음. 또한, 재고 가치 계산에서 중개인은 나에게 유리하게 계산해줌
     * 그럼에도 불구하고, 재고에 대한 중개인 수수료는 거래 타이밍을 더 스트레스 받게 만드는 요소였음. 거래가 한 달 더 연장되었다면 추가로 $10k의 수수료를 지불해야 했을 것임
     * 다음 매각에서는 중개인 수수료에서 재고를 제외하도록 요구할 계획이며, 필요하다면 매각 금액의 비율을 높이는 것으로 협상할 예정임

  처음부터 모든 문서는 비공개가 아님을 가정하기

     * TinyPilot의 자산 매각에는 모든 회사 이메일도 포함되었음. 많은 지식이 이메일에 담겨 있으므로 이는 합리적이라고 생각했음
     * 매각을 준비하며 이메일을 넘기는 것이 복잡할 수 있음을 깨달음. 직원이 개인적이고 민감한 내용을 포함한 이메일을 보낸 경우가 문제였음
     * 예를 들어, “아버지가 돌아가신 후 불안과 우울증을 겪고 있으며, 비생산적인 느낌이 든다”라는 이메일은 개인적인 대화이지, 회사 자산으로 간주하기 어려움
     * 다행히 구매자와 팀 간의 합의로, 직원들이 개인적이고 민감한 이메일을 표시하면 매각 전 이를 삭제하기로 함
     * 또한, 변호사와의 매각 관련 민감한 이메일도 포함되었는데, 계약서에서 이러한 이메일은 매각 자산에서 제외함
     * 향후에는 다음과 같은 두 가지 변화를 고려할 계획임:
          + 팀에게 매각 시 이메일 및 회의 기록이 새 구매자에게 이전될 수 있음을 사전에 인지시키기
          + 변호사나 중개인과 매각 관련 작업을 진행할 때는, 판매 중인 사업의 이메일 계정이 아닌 별도의 계정을 사용할 것

  계약 체결 시점의 금전 흐름 정의하기

     * 계약 체결일에 도달했을 때, 매각 계약서에 사업 자금 흐름에 대한 명확한 규정이 없다는 것을 깨달음
          + 계약 체결 전후로 걸쳐 있는 서비스 요금(예: 매달 청구되는 서비스 요금)은 어떻게 분할할 것인가?
          + PayPal이나 Shopify 계정에 남아 은행으로 이전되지 않은 금액은 어떻게 처리할 것인가?
          + 계약 체결 전 구매된 제품이 이후 환불 요청을 받는 경우, 누가 환불을 책임질 것인가?
          + 계약 체결 당일의 매출 수익은 누가 받을 것인가?
          + 계약 체결 당일 근무한 직원의 급여는 누가 지급할 것인가?
          + 에스크로 수수료 등 계약 체결 관련 비용은 누가 부담할 것인가?
     * 이후 구매자와 협의하여 모든 문제를 원만하게 해결했지만, 이러한 질문들에 대해 계약서에서 더 명확히 정의했더라면 좋았을 것임

  전환 계약에서 근무 시간보다 달력을 기준으로 가치 평가하기

     * 대부분의 인수 계약에는 매각 후 판매자가 구매자를 지원하기 위해 얼마나 일을 할 것인지에 대한 조건이 포함됨
     * 초기 제안으로, 매각 후 2주 동안 최대 40시간/주까지 무료 컨설팅을 제공하고, 이후에는 시간당 $180에 최대 10시간/주까지 추가 컨설팅을 제공하기로 했음
     * 구매자는 30일 동안 최대 80시간의 무료 컨설팅을 제안함. 즉, 동일한 총 시간 동안 더 긴 기간으로 분산된 것임
     * 더 긴 전환 기간이 구매자에게 유리하다는 것은 알았지만, 그로 인한 비용이 얼마나 클지는 예상하지 못했음
     * 매주 40시간 이용 가능했지만, 구매자는 이를 모두 활용할 수 없었음. 팀을 인수하고 운영을 배우는 과정에서 시간을 충분히 효율적으로 활용하기 어려웠음
     * 결국 주당 약 10시간만 일했지만, 매일 출근 가능 상태로 30일을 보내는 비용이 컸음. 이메일에 신속히 응답해야 한다는 조건은 없었지만, 매시간마다 TinyPilot 이메일을 확인했고, 하루에 2시간 일하더라도 여러 번에 나누어 일하게 되어 다른 작업을 잘 진행하지 못했음

  매각 전 비이전 가능한 계정을 비즈니스 이메일에서 분리하기

     * $1M 이하의 매각은 보통 자산 매각 형태로 진행되며, 이는 구매자가 사업 자산만 인수하고 회사 자체는 인수하지 않는다는 의미임
     * 따라서 나는 여전히 TinyPilot이라는 법인을 소유하고 있지만, 모든 물리적 및 지적 자산은 새 소유자에게 이전됨
     * 내가 보유한 몇 가지 자산은 TinyPilot의 은행 및 급여 계정이었는데, 이는 LLC에 귀속되어 있기 때문임
     * 문제는 이 계정들의 이메일 주소를 변경하지 않고 TinyPilot의 이메일 제어권을 새 소유자에게 넘겼다는 것임. 이로 인해 여전히 @tinypilotkvm.com 이메일이 연결되어 있었음
     * 새로운 소유자와 협력해 이메일 주소를 수정했지만, 이메일을 이전하기 전에 직접 처리했더라면 더 좋았을 것임

  Google 의존성을 더 줄이기

     * TinyPilot의 모든 계정 자격 증명은 Bitwarden에 저장되어 있어, 소유권 이전이 매끄럽게 진행되었음. 새로운 소유자를 Bitwarden 관리자에 추가하여 모든 계정을 넘길 수 있었음
     * 하지만 이전할 수 없었던 계정이 하나 있었는데, 바로 Google 계정이었음. TinyPilot 일부 서비스에 Google Cloud Platform(GCP)을 사용했고, 전용 GCP 프로젝트가 있었지만, 이는 개인 Google 계정에 속해 있었음
     * GCP 설정 페이지에 ""Migrate"" 버튼이 있어, 이를 클릭하면 새 소유자의 GCP 계정으로 프로젝트가 이전될 것이라고 단순하게 생각했음
     * 매각이 완료된 후 버튼을 눌렀지만, 즉시 오류 메시지를 받았음
     * GCP의 프로젝트 이전 문서는 혼란스럽고 부정확했으며, 결과적으로 새 소유자와 내가 각기 유료 Google Workspace 계정을 만들어 복잡한 절차를 거쳐야 한다는 내용이었음. Google Drive에 저장된 오래된 문서에서도 비슷한 문제가 발생함
     * 새로운 소유자는 공식 이전 절차가 너무 번거롭다고 판단해, 가능한 자료만 내보내고 나머지는 삭제하기로 결정함
     * 개인적, 업무적으로 Google 의존성을 줄이려 노력해왔지만, 이런 문제를 겪으면서 Google 의존성을 더욱 줄여야 할 필요성을 느끼게 되었음

# 놀라웠던 점

  실사 과정은 끝이 없고 높은 스트레스를 유발함

     * 실사 과정이 이렇게 노동 집약적일 것이라고는 크게 예상하지 못했음
     * 처음에는 실사가 다소 지루하더라도 간단할 것이라 생각했음. 구매자는 이미 2년간의 손익계산서를 검토한 후 투자의향서(LOI)에 서명했음. 몇몇 은행 명세서를 검토하고, 나의 철저한 회계 장부를 확인하는 정도로 생각했음
     * 그러나 실사 과정에서는 지난 2년간의 모든 은행 명세서를 제출해야 했고, 이는 단지 첫 번째 요청에 불과했음
     * 실사가 진행될수록 고객 재구매 빈도나 매출의 플랫폼별 비율 등 비즈니스의 다양한 측면을 보여주기 위한 맞춤형 보고서를 여러 개 작성해야 했음
     * 고객 데이터를 노출하고 싶지 않아 보고서를 맞춤 처리했지만, 맞춤화할수록 기록에 오류가 생길 위험이 커졌음. 오류가 발생하면, 구매자는 허위 데이터에 기반해 회사를 매각했다고 소송을 제기할 수 있음. 간단한 보고서라도 완벽하게 작성해야 한다는 압박감을 느꼈음
     * 비현금 구매자는 실사 요청에 대응하기가 더 어려웠음. 구매자는 본인의 요청뿐만 아니라 은행의 요청도 함께 전달했는데, 은행은 거래 성사 여부에 관심이 없어 협상이 어려웠음. 구매자와의 협상은 더 수월했지만, ""이 요청이 구매자 요청인지 은행 요청인지?""라고 묻는 것은 불가능했음. 은행 요청이라면 수용하고, 구매자 요청이라면 거부하고 싶었음

  매각 준비 중에는 모든 비용이 4배 비쌈

     * 소규모 사업을 매각할 때, 매각 가격은 보통 연간 수익 또는 매출의 몇 배로 결정됨
     * 예를 들어, 연간 이익이 $100k이고 유사한 사업이 3배의 이익 배수로 매각된다면, 사업의 매각 가치는 약 $300k가 됨
     * 만약 직원에게 $10k 보너스를 지급하면, 이익은 $90k로 줄어들고 사업 가치는 $270k로 감소함. 즉, $10k 보너스 지급은 실제로 $40k의 비용을 초래함 ($10k 보너스 + $30k 가치 하락)
     * 이는 보너스뿐만이 아님 — 매각 준비 중에는 모든 지출이 4배 비싸짐. 만약 $1k짜리 노트북을 구매해야 한다면, 실제로는 $4k의 비용이 든다고 볼 수 있음

  매각에 반드시 중개인이 필요한 것은 아님

     * Quiet Light 중개인을 통해 TinyPilot을 매각한 것에 만족하지만, 꼭 중개인이 필요하지는 않았음을 깨달음
     * 이 정도 규모의 거래에서는 주택 매매를 참고할 수밖에 없었음. 주택 거래에서는 중개인이 MLS에 등록하거나, 규제 준수 등을 담당함
     * Quiet Light의 주요 기여는 구매자 찾기였음. 이는 내가 혼자서 하기 어려운 부분이었음. 그러나 구매자를 찾은 이후에는 핵심 과정에서 벗어나 있었음. 계약 체결을 위한 주요 작업은 M&A 변호사가 법적 문서를 준비하고 협상하는 것이었음
     * 중개인은 거래가 원활하게 진행되도록 조언을 제공해야 하며, Quiet Light는 이를 잘 수행했음. 구매자의 대출 기관이 철회했을 때 새로운 대출 기관도 찾아줌. 하지만 LOI 이후 중개인이 사라졌어도, 우리는 거래를 마무리할 수 있었음. 반면, 변호사 없이는 거래를 완료할 수 없었음
     * 향후 사업 매각 시 독자적으로 구매자를 찾을 수 있다면 중개인을 생략할 수도 있을 것 같음. 첫 매각에서는 15%의 수수료를 지불하더라도 전 과정을 함께할 조언자가 있는 것이 가치 있었음. 경험이 쌓인 지금은 스스로 과정을 진행할 자신이 있지만, 중개인의 옵션은 항상 열어둘 계획임

  비경쟁 조항이 지나치게 엄격하면 문제가 생김

     * 대형 기술 회사가 나를 개발자로 고용하고 계약서의 500번째 페이지에 ""다른 회사에서 소프트웨어 작업을 할 수 없다""는 비경쟁 조항이 있다면, 판사는 이를 부당하다고 판단해 무효화할 가능성이 높음
     * 하지만 내가 회사를 매각하고 구매 계약서에 ""다시는 소프트웨어 작업을 하지 않겠다""는 조항이 포함되면, 판사는 이를 유효한 약속으로 간주할 수 있음. 변호사는 매각 계약에서는 판사가 더 엄격하게 판단한다고 경고했음. 이는 내가 합리적인 협상 능력과 계약 인식을 가졌다고 보기 때문임. 내가 불리한 계약에 서명했다면, 그 책임은 나에게 있음
     * TinyPilot의 매각 계약 검토 시, 변호사는 비경쟁 조항을 신중하게 검토하여, 내가 소프트웨어나 기술 전반이 아닌 KVM over IP 장치 분야에서만 일하지 않기로 동의한 것을 확인함

  책임 한도가 없으면 큰 위험에 처할 수 있음

     * 미국에서 법인이나 LLC 형태로 사업을 운영할 때, 잃을 수 있는 최대 금액은 사업 가치에 한정됨
     * 예를 들어, 사업 가치가 $100k일 때, 누군가가 $5M 소송을 제기해도 최악의 경우 사업 자산만 몰수당할 수 있음. 개인 자산인 집이나 자동차, 가족은 보호됨. 이것이 LLC의 ""유한 책임"" 의미임
     * 그러나 사업을 매각할 때는 유한 책임 보호를 상실할 수 있음. 변호사는 매각 계약에서 책임 한도가 명시되지 않으면, 구매자가 이후 소송을 통해 매각 금액을 초과하는 책임을 요구할 수 있다고 경고했음
     * 구매자의 변호사는 처음에 내 책임 한도를 설정하지 않으려 했음. 내 변호사는 매각 금액을 초과하는 책임을 지는 계약에 서명하지 말아야 한다고 강력히 주장했고, 결국 구매자 측 변호사가 이를 받아들였음

  구매자는 판매자를 기분 좋게 유지할 인센티브가 있음

     * 매각 과정에서 내가 가장 걱정했던 것은 TinyPilot의 계정과 도메인을 모두 넘긴 후, 구매자가 협조할 동기를 잃는 것이었음
     * 예를 들어, 구매자가 계정의 결제 정보를 업데이트하는 것을 잊어서 내 신용카드에 $2k의 청구가 발생하면, 이를 상환받기 위한 내 권한이 부족할 수 있음
     * 나는 구매자를 신뢰했지만, 권력이 바뀔 때 사람들의 행동을 예측하기는 어려움
     * 결과적으로, 구매자가 속이려 해도 판매자가 여전히 중요한 지식(노하우)을 가지고 있어 구매자에게 협조가 필요할 때가 있음. 구매자가 $2k 문제로 판매자를 속였다가 한 달 후 중요한 계정 접근에 도움을 받아야 하는 상황이 올 수 있음
     * 이처럼 적절한 권력 균형이 양측을 최선의 행동으로 이끌어줌

# 매각 준비에 도움이 된 자료

     * 인수 과정에서 가장 어려웠던 점은 대부분이 완전히 새로운 경험이었다는 것임. 인수는 연습하기 어렵고, 경험이 풍부한 창업자들도 평생 몇 번밖에 겪지 않음
     * 준비 과정에서 가장 유익했던 것은 소규모 비즈니스 인수에 대한 자료를 읽고, 다른 창업자들에게 매각 경험을 물어보는 것이었음

  John Warrilow의 책과 팟캐스트

     * Built to Sell: 사업을 인수 가능하게 설계하는 방법을 이해하는 데 도움이 되었음
     * The Art Of Selling Your Business: 매각 과정의 실제 고려 사항들을 다룸
     * Built to Sell Radio: 기술 중심이 아닌 대형 비즈니스 사례가 주로 다뤄짐. 비슷한 상황에 있는 창업자들의 에피소드를 청취했으며, Natalie Nagele과 Laura Roeder의 에피소드를 특히 좋아했음
     * 매각 후 내가 출연한 에피소드도 있음

  다른 창업자들과의 비공식적인 대화

     * 인수 경험이 있는 사람을 많이 알지는 못했지만, 주변 사람들을 통해 연결된 이들과의 대화가 매우 유익했음
     * 친구들이 인수 경험이 있는 지인을 소개해 주었고, 그들과의 대화에서 많은 정보를 얻음

  Microconf (인디 창업자 컨퍼런스)

     * Microconf에서 Quiet Light를 만났고, 여러 중개인과 직접 만나 보면서 가장 적합한 중개인을 선택할 수 있었음
     * 인수 경험이 있는 창업자들이 많이 참석하여, 그들의 경험을 묻는 것이 도움이 되었음

  블로그 포스트

     * 다른 인디 창업자들이 작성한 인수 관련 블로그 포스트에서 많은 것을 배웠음
     * 내가 좋아한 포스트:
          + “I sold Baremetrics” by Josh Pigford
          + “What it’s like buying a $128k side project” by Kareem Mayan
          + “Exactly How I Cold Emailed My Way to A Life-Changing Exit (And You Can Too)” by Laura Roeder

   귀한 이야기 고맙습니다!

   논리적이네요 유익한 글입니다.

   글쓴이 문서화에 대해서는 진짜 인정해야겠네요.
   읽다보니, 내 회사 파는 느낌이 들 정도로 상세하고 구체적으로 잘 정리했네요.

   멋지네요

   TinyPilot: $100 보다 저렴한 KVM Over IP
   부트스트랩 창업자로서의 나의 6번째 해
   나의 첫 번째 성공적인 사업 TinyPilot을 매각 완료했어요
"
"https://news.hada.io/topic?id=17853","외부 모니터에 따라 고장난 BBC 내비게이션 바 컴포넌트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    외부 모니터에 따라 고장난 BBC 내비게이션 바 컴포넌트

     * BBC 탐색 바 컴포넌트의 버그
          + 최근 팀에서 이상한 버그를 해결했음. 한 팀원만 재현할 수 있었고, 집에서만 발생했음.
     * 버그의 원인
          + BBC 웹사이트의 '더보기' 버튼 클릭 시 메뉴가 열려야 하지만, 외부 모니터에서는 작동하지 않았음.
          + 외부 모니터에서만 발생하며, Safari에서는 문제가 없었음.
     * 문제 재현
          + 외부 모니터가 노트북 위에 위치할 때만 버그가 발생함을 발견했음.
          + OS 설정에서 모니터 위치를 조정하여 문제를 재현할 수 있었음.
     * 조사 과정
          + 첫 번째 단서: Safari에서는 버그가 발생하지 않음.
          + 두 번째 단서: 외부 모니터가 메인 모니터의 위와 왼쪽에 위치할 때만 발생함.
          + 세 번째 단서: Chrome과 Firefox에서 screenX와 screenY 값이 음수였음.
          + 네 번째 단서: screenX와 screenY가 음수일 때만 버그가 발생함.
          + 다섯 번째 단서: Chrome과 Firefox에서는 메인 모니터의 좌상단이 (0,0) 좌표임.
     * 해결책
          + isInvokedByMouse 함수에서 screenX와 screenY가 0이 아닌지 확인하도록 변경함.
          + 복잡한 문제였지만 해결책은 간단했음.
          + 코드 리팩토링이 필요하지만, 현재 해결책으로 충분함.
     * 교훈
          + API 작동 방식에 대한 가정에 주의해야 함.
          + 다양한 테스트에도 불구하고 버그가 발견되지 않았음.
          + 모니터 설정에 따라 사용자 경험이 달라질 수 있음을 알게 됨.
     * 2024-11-19 수정: screenX 사용에 대한 혼란이 있었고, 네비게이션 컴포넌트를 리팩토링했음. 다음 블로그 포스트에서 리팩토링 과정과 질문에 대한 답변을 제공할 예정임.

        Hacker News 의견

     * BBC의 웹사이트에서 키보드와 포인터로 메뉴를 열 때 다른 동작을 보이는 이유를 설명함
          + 키보드로 열 때는 애니메이션 없이 첫 번째 링크로 포커스가 이동함
          + 포인터로 열 때는 메뉴 컨테이너로 포커스가 이동함
          + 키보드 사용자를 위한 경험을 만들 때 'click' 이벤트가 장치에 독립적이라 유용함
     * isInvokedByMouse를 수정하여 screenX와 screenY가 0이 아닌지를 확인하는 방법을 제안함
          + 마우스가 실제로 0,0에 있을 경우를 고려해야 함
          + 이벤트 핸들러 함수의 복잡성을 줄이기 위해 추가적인 리팩토링이 필요함
     * BBC의 접근성에 대한 투자와 버그 발견을 칭찬함
          + 드롭다운 메뉴가 모든 사용자에게 일관되게 열리지 않는 이유를 질문함
          + 웹 프레임워크나 웹 컴포넌트가 이러한 문제를 해결할 수 있는지 궁금해함
     * 서버 사이드 템플릿, CSS 프레임워크, 최소한의 JS를 사용하여 문제를 해결하려고 시도함
          + BBC의 접근성 표준에 부합하는지는 확신하지 못함
     * 잘못된 휴리스틱으로 인해 발생한 버그라고 지적함
          + screenX와 screenY 좌표를 확인할 때 양수뿐만 아니라 음수도 확인해야 한다고 제안함
     * 웹사이트가 왜 화면 좌표로 마우스 위치를 얻는지 의문을 제기함
          + click 이벤트만으로도 충분한 정보를 제공한다고 주장함
     * 브라우저가 모니터에 따라 다른 좌표를 보고하는 이유에 대해 궁금해함
          + 웹 API가 이러한 정보를 가지는 것이 보안 및 정보 추적 위험을 초래할 수 있다고 우려함
     * 마우스 클릭과 키보드 클릭을 구분하는 올바른 방법에 대해 질문함
          + mousedown과 keydown 이벤트를 기반으로 플래그를 설정하는 방법을 제안함
     * 화면 좌표 대신 뷰포트 좌표를 사용해야 한다고 주장함
          + 화면 공간에서의 음수 값이 버그가 아니라고 봄
     * BBC의 관리 및 법무팀의 승인 없이 블로그를 작성한 것에 감명을 받음
"
"https://news.hada.io/topic?id=17858","Show HN: pglite-fusion - PostgreSQL 테이블에 SQLite 임베딩하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show HN: pglite-fusion - PostgreSQL 테이블에 SQLite 임베딩하기

     * PostgreSQL 테이블에 SQLITE 컬럼 타입으로 SQLite DB자체를 임베딩 하게 해주는 확장
          + 이 방식으로 multitenancy를 해결
     * empty_sqlite 로 빈 DB를 생성 : CREATE TABLE people (name TEXT NOT NULL, database SQLITE DEFAULT execute_sqlite(empty_sqlite(), 'CREATE TABLE todos (task TEXT)'));
     * query_sqlite 함수로 쿼리 가능, execute_sqlite로 인서트/업데이트 가능
          + SELECT * FROM query_sqlite(database, 'SELECT * FROM todos');
          + `UPDATE people SET database = execute_sqlite(database, 'INSERT INTO todos VALUES (''solve multitenancy'')') WHERE name = 'frectonz';
     * get_sqlite_text/get_sqlite_integer/get_sqlite_real 함수로 특정 컬럼 읽어오기 : SELECT get_sqlite_text(sqlite_row, 0) FROM query_sqlite(database, 'SELECT * FROM todos');
     * Rust + Pgrx 프레임워크로 작성됨
     * 구현 상세 :
          + CBOR (Concise Binary Object Representation) 인코딩된 Vec<u8>로 DB를 저장
          + 쿼리 실행 시 /tmp 폴더에 랜덤파일로 생성. SQLite가 파일을 로딩하여 쿼리 실행하고 결과를 JSON 인코딩된 값이 들어있는 싱글로우 테이블로 리턴

   WOW..

   맙소사...

   pgrx - Rust로 PostgreSQL 확장을 개발하는 프레임워크

   뭔가 이상한 확장이긴 한데, 확장 가능한 SaaS를 만들면서 사용자가 간단히 DB 기능을 임베딩 해야하거나 할때 정도는 쓸 수 있지 않을까 생각도 들고 하네요.

        Hacker News 의견

     * 대부분의 관계형 데이터베이스 관리 시스템은 중첩된 레코드를 지원하지 않으며, SQL도 중첩 테이블을 생성하거나 활용할 수 있는 기능이 부족함
          + ""그런 태도로는 안 됨""이라는 의견이 있음
     * PostgreSQL 데이터베이스 디렉토리를 tar로 묶고 SQLite에 이진 블롭으로 인코딩하는 아이디어 제안
          + 실용적이거나 유용하지는 않지만 SQL 데이터베이스를 중첩하는 개념임
     * 이 아이디어의 사용 사례에 대한 의문 제기
          + 일반적인 제품에서 데이터베이스 스키마를 설계할 때 사용하기 어려움
          + 하이브리드 애플리케이션에서 로컬 사용자 데이터를 계정 정보와 직접 백업하는 용도인지 궁금함
     * SQLite의 JSON 열보다 SQLite 열이 더 우수할 것이라는 의견
          + JSON 연산자는 별도의 쿼리 언어를 배워야 하고 제한적임
     * /tmp 파일 메커니즘이 해킹처럼 보이며 꼭 필요한지 의문
          + SQLite 인메모리 데이터베이스를 생성하고 백업 API나 VACUUM INTO를 사용해 이진 블롭 데이터를 로드하는 방법이 가능할 수 있음
     * PostgreSQL을 사용하는 경우, Row Level Security(RLS)을 통해 멀티 테넌시 문제 해결 가능
          + 각 테이블에 테넌트 ID 열을 추가하고 하나의 테넌트만 데이터를 볼 수 있는 정책을 설정하는 것이 매우 쉬움
     * 1NF(제1정규형) 범죄?
     * 연산자가 없다는 점에 대한 불만
          + 여러 DATABASE 열 간의 교차 데이터베이스 조인을 위한 인덱스와 독특한 연산자 구문을 원함
"
"https://news.hada.io/topic?id=17762","Spin 3.0 – WASM 앱 구축 및 실행을 위한 오픈 소스 툴링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Spin 3.0 – WASM 앱 구축 및 실행을 위한 오픈 소스 툴링

     * Spin은 서버리스 WebAssembly(Wasm) 애플리케이션을 어디서나 구축, 배포 및 실행할 수 있는 오픈 소스 개발 도구
     * 작은 크기의 이식 가능한 바이너리, 낮은 시작 지연 시간, 높은 처리량을 제공하여 다양한 환경에서 애플리케이션을 실행할 수 있는 장점이 있음

Spin 3.0 하이라이트

     * Wasm의 경량성과 빠른 시작 시간, 안전성 덕분에 서버 측 사용 사례에 적합하며, 컨테이너가 느리거나 큰 경우, 샌드박싱이 필수적인 경우, 서버리스 사용 사례에 유리
     * WebAssembly Component Model은 다양한 프로그래밍 언어 간의 상호 운용성을 표준화하여 개발자에게 더 많은 가능성을 제공
     * 컴포넌트 의존성 - 다중 언어 프로그래밍의 용이함
          + Spin 3.0은 Rust로 작성된 라이브러리를 JavaScript 애플리케이션에서 의존성으로 사용하는 등의 개발 워크플로우를 도입함.
          + OCI 레지스트리에서 컴포넌트를 저장, 검색, 가져올 수 있어 npm/NuGet/crates.io와 같은 경험을 제공함.
     * 선택적 배포 - 하나로 빌드하고 선택적으로 배포
          + Spin 애플리케이션의 일부 컴포넌트를 로컬 또는 SpinKube를 통해 실행할 수 있음.
          + spin up --component-id 플래그를 사용하여 실행할 컴포넌트를 지정할 수 있으며, 플랫폼 엔지니어가 특정 요구 사항을 충족하는 노드에서 선택적으로 컴포넌트를 실행할 수 있는 새로운 시나리오를 제공함.
     * WASI 표준과의 깊은 통합
          + Spin 프로젝트는 WASI API에 기여하고 이를 Spin에 통합하여 커뮤니티의 요구를 충족하고자 함.
          + WASI Key-Value 및 WASI Config API가 Spin에서 공식적으로 지원됨.
     * OpenTelemetry(OTel) 통합 - 관측 가능성 포함
          + Spin 3.0은 OpenTelemetry(OTel) 관측 가능성을 공식적으로 지원하여 Grafana, Jaegar, Prometheus와 같은 도구와 통합할 수 있음.
          + spin otel 플러그인을 통해 관측 가능성 스택 설정이 용이함.
     * Spin Factors - 주요 런타임 리팩터링
          + Spin의 내부 구조를 Spin Factors라는 기능으로 대대적으로 리팩터링하여 모듈성을 강화함.
          + Spin 런타임을 확장하는 것이 더 쉬워졌으며, 프로젝트를 포크해야 하지만 가능함.
     * 데모 - Spin 3.0 활용
          + Spin 3.0의 컴포넌트 의존성 기능을 활용하여 Rust로 이미지 변환 컴포넌트를 구축하고, 이를 JavaScript/TypeScript 컴포넌트에서 의존성으로 사용하는 예시를 제공함.
          + spin deps 플러그인을 사용하여 OCI 레지스트리에 컴포넌트를 게시하고, 다른 언어로 작성된 Wasm 컴포넌트에서 이를 소비할 수 있음.
     * 생태계 현황
          + 여러 CLI 플러그인과 트리거 플러그인이 등장하고 있으며, SpinKube 프로젝트의 새로운 릴리스도 있음.
          + 선택적 배포를 포함한 새로운 기능이 추가됨.

   OTel 은 이제 기본 인듯
"
"https://news.hada.io/topic?id=17780","C#로 재구성된 Visual Basic 6 IDE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      C#로 재구성된 Visual Basic 6 IDE

     * Avalonia Visual Basic 6
     * C#와 Avalonia를 사용하여 고전적인 Visual Basic 6 IDE와 언어를 재현한 프로젝트임
     * 상업적 의도가 없는 재미있는 프로젝트이며, Visual Basic의 이름, 아이콘, 그래픽에 대한 모든 권리는 Microsoft Corporation에 속함
     * 기능
          + 시각적 디자이너
          + VB6 호환 형식으로 프로젝트 저장 및 로드
          + 프로젝트 실행
          + VB6 언어 지원 (제한적)
     * 데스크톱 버전 빌드
          + 일반적으로 .NET 9.0이 필요하며, Directory.Build.props를 수정하여 .NET 8.0을 사용할 수 있음 (브라우저 버전은 9.0 필요)
          + 빌드 명령어: dotnet build AvaloniaVisualBasic/AvaloniaVisualBasic.Desktop.csproj
          + Antlr4 오류가 발생하면 Antlr4BuildTasks 라이브러리가 Java를 자동으로 다운로드하지 못한 것일 수 있으며, Java를 수동으로 설치하면 문제 해결 가능
     * 데스크톱 버전 게시 및 Make Publish 작동
          + IDE 프로젝트(AvaloniaVisualBasic.Desktop)와 런타임(AvaloniaVisualBasic.Standalone) 모두 게시
          + 게시 명령어:
               o dotnet publish AvaloniaVisualBasic.Desktop -f net9.0 -o bin/
               o dotnet publish AvaloniaVisualBasic.Standalone -f net9.0 -o bin/standalone/
          + 이제 ./bin/AvaloniaVisualBasic.Desktop 실행 가능
     * 감사의 말
          + Avalonia
          + Wiesław Šoltés의 Dock
          + lou의 폰트

        Hacker News 의견

     * 어린 시절 ""Write Your Own Adventure Programs"" 책을 통해 프로그래밍을 배운 경험을 공유함
          + BASIC 언어로 작성된 코드를 접했으며, 컴퓨터가 없던 시절의 추억을 회상함
          + Visual Basic을 접하고 메뉴와 버튼을 탐색하며 학습했음
          + 복사 붙여넣기와 수정으로 간단한 프로그램을 작성했으며, 친구 컴퓨터에 장난 프로그램을 설치하는 재미를 느꼈음
          + 프로그래밍을 배우는 과정이 즐거웠으며, 부모님이 자유롭게 컴퓨터를 사용하게 해주어 감사함
     * 웹 버전의 Visual Basic을 사용해보며 부족한 점을 지적함
          + 버튼 레이블의 앰퍼샌드(&)가 가속기를 생성하지 않음
          + 레이블 컨트롤의 내용을 변경하기 위해 입력 필드에 포커스를 맞춰야 함
          + 디버깅, 저장, 도움말 등의 메뉴가 구현되지 않음
          + 브라우저에서 실행 가능한 실행 파일을 생성하는 빌드 버튼이 필요함
     * WebAssembly가 모든 언어를 웹으로 가져오는 점을 좋아함
          + C# 애플리케이션을 WebAssembly로 컴파일하여 웹에서 Visual Basic을 작성하는 것이 대단함
     * 현대 GUI 툴킷으로의 발전 과정을 이해하지 못하겠음
          + 직관적이고 사용하기 쉬웠던 과거의 UI를 회상함
     * Avalonia라는 도구를 처음 접했으며, 그 가능성에 대해 궁금해함
          + 단일 .NET 코드베이스로 크로스 플랫폼 애플리케이션을 만들 수 있는 점이 인상적임
     * 코드 분석을 통해 데모를 위한 최소한의 기능만 구현되었음을 발견함
          + MsgBox와 InputBox 두 가지 기능만 지원됨
          + 4일 만에 복잡한 것을 만든 점이 인상적이며, 완전한 IDE 개발의 좋은 시작임
          + 구문 강조 및 자동 완성 기능이 없으며, 디버거도 기대하지 않음
     * Turbo Pascal과 Delphi 7을 사용하며 개발을 시작한 어린 시절을 공유함
          + Delphi는 VB6와 유사했으며, 첫 번째 앱은 Notepad++ 클론이었음
     * 1995-2001년 Windows UI가 최고였다고 회상함
          + Visual C++와 Visual Basic이 완벽하지 않았지만 작업을 완료할 수 있었음
     * Visual Basic의 초기 개발자 중 한 명으로서 경험을 공유함
          + 당시 Ruby라는 이름으로 Windows 3.0의 사용자 정의 셸로 계획되었음
          + Microsoft가 이를 개발자 도구로 전환하여 Visual Basic을 탄생시킴
     * AvaloniaVisualBasic6의 웹 버전을 브라우저에서 열어볼 수 있음
"
"https://news.hada.io/topic?id=17772","AWS Amplify 공식 가이드를 따랐더니 $1,100 요금이 청구됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AWS Amplify 공식 가이드를 따랐더니 $1,100 요금이 청구됨

     * AWS Amplify 가이드를 따라 OpenSearch를 통합하는 과정에서 예상치 못한 높은 비용이 발생함.
          + AWS 고객 지원팀에 문의 후, 청구 조정 및 서비스 크레딧을 받음.
          + AWS 예산 설정을 통해 미래 지출을 예측하고 경고를 받을 수 있음.
     * 1. 빠른 시작
          + AWS에서 제공하는 코드로 간단한 앱을 생성하고, DynamoDB 데이터베이스와 인증된 CRUD 요청을 자동으로 생성함.
          + 로컬에서 실행 가능하며, 웹 도메인도 생성됨.
     * 2. OpenSearch 설정 가이드
          + Typescript로 리소스를 선언하는 코드를 작성함.
          + DynamoDB 테이블을 변수로 설정하고, OpenSearch 인스턴스 및 인덱스를 생성함.
          + OpenSearchIngestionService 파이프라인을 통해 데이터를 복사함.
          + 기본적으로 r5.large.search 인스턴스가 생성되며, 이는 월 $134의 비용이 발생함.
     * 3. 하루 작업 종료
          + 작업 종료 시 CTRL-C로 샌드박스를 중지하고 모든 것을 삭제하도록 선택함.
          + DynamoDB는 삭제되지만 OpenSearch 도메인은 남아 있음.
     * 4. 다시 시작
          + 다음 날 서비스 재생성 시 새로운 OpenSearch 인스턴스가 생성됨.
          + npx ampx sandbox delete 명령어로 원래 인스턴스를 삭제할 수 없음.
          + 여러 도메인이 생성되어 높은 비용이 발생할 수 있음.
     * 버그인가?
          + 이는 버그로 보이며, AWS 고객 지원 티켓 이후에도 해결되지 않음.
          + r5.large.search가 기본 머신 타입으로 설정된 것에 불만이 있음.
     * 결론
          + 새로운 기술을 사용할 때 비용이 더 높을 수 있지만, 이는 과도한 수준임.
          + AWS의 ""예산"" 콘솔을 사용하여 예산 초과 경고를 받을 수 있음.
          + OpenSearch는 종종 기업 고객을 위해 사용되며, AWS 생태계에 대한 이해가 필요함.
          + OpenSearch는 geo_point 바운딩 박스 쿼리를 지원하기 때문에 사용 중임.
"
"https://news.hada.io/topic?id=17755","Google Web AI Summit 2024 요약: 개발자를 위한 클라이언트 측 AI","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Google Web AI Summit 2024 요약: 개발자를 위한 클라이언트 측 AI

     * 2024년 10월 18일, Google은 첫 Web AI Summit을 개최함
     * 클라이언트 측에서 브라우저 내 머신러닝 모델을 사용하여 오프라인에서도 저지연 추론, 비용 절감, 개인정보 보호 등의 기능을 제공

주요 발표 세션 요약

     * Transformers.js: 웹을 위한 최신 머신러닝
          + Transformers.js는 Hugging Face의 Python Transformers 라이브러리와 기능적으로 동일한 자바스크립트 라이브러리로, 웹에서 직접 사용 가능
          + 1,000개 이상의 사전 학습된 모델을 지원하며, 텍스트, 이미지, 음성 등의 다양한 작업과 모달리티를 다룸
          + 사용자는 사전 학습된 모델을 선택하거나, 사용자 정의 모델을 브라우저에서 직접 실행 가능
          + WebGPU 지원으로 최신 GPU 기능을 활용하여 빠르고 효율적인 모델 실행이 가능
     * Web Neural Network (WebNN) API: 현재와 미래
          + WebNN API는 웹 표준으로 제안된 새로운 API로, 클라이언트 측에서 머신러닝 작업을 빠르고 효율적으로 실행하기 위한 도구
          + WebAssembly와 WebGPU를 사용해 브라우저 내에서 AI 가속화 기능을 제공
          + 다양한 장치에서 AI 작업을 실행할 수 있도록 CPU, GPU, NPU와 같은 하드웨어 가속기를 지원
          + API의 최신 개발 사항, 장치 지원, 프레임워크 호환성 및 브라우저 구현에 대한 내용을 다룸
     * Intel의 Web AI PC 기술
          + Intel은 WebNN API를 활용하여 클라이언트 측 웹 ML 가속화를 제공하며, 이를 통해 CPU, GPU, NPU에서 고성능 실행이 가능
          + 현재 Chrome과 Edge 브라우저에서 개발자 프리뷰 버전으로 제공 중
          + ONNX Runtime Web과 통합되어 다양한 머신러닝 프레임워크에서 사용 가능
          + 데모와 초기 사용자 피드백을 통해 “네이티브에 가까운” 성능을 제공하며, 새로운 웹 경험의 가능성을 시연
     * ml5.js: 웹 친화적인 머신러닝
          + ml5.js는 TensorFlow.js를 기반으로 만들어진 오픈 소스 라이브러리로, 머신러닝을 더 쉽게 접근할 수 있도록 설계
          + 예술가, 창의적인 코더, 학생들을 대상으로 한 간단하고 직관적인 인터페이스 제공
          + p5.js와 Processing의 철학을 이어받아, 코드의 접근성을 높이고 학습 과정을 쉽게 만들어줌
          + 이미지 인식, 텍스트 분석, 포즈 추정 등의 다양한 기능을 포함하며, 초보자도 쉽게 사용할 수 있음
     * WebLLM: 고성능 브라우저 내 LLM 추론 엔진
          + WebLLM은 브라우저에서 직접 대형 언어 모델(LLM)을 실행할 수 있는 고성능 추론 엔진
          + WebGPU를 통해 GPU 가속을 활용하여 빠른 추론 성능을 제공
          + 모든 계산이 클라이언트 측에서 이루어져, 개인정보 보호가 강화되고 설정이 필요 없음
          + OpenAI API 스타일의 인터페이스를 제공해, 표준화된 통합이 가능하며 채팅 애플리케이션, 구조화된 JSON 생성 등 다양한 사용 사례 지원
     * LangChain을 통한 브라우저 내 LLM 애플리케이션 개선
          + LangChain은 브라우저에서 작동하는 소형 LLM을 활용한 애플리케이션 개발을 위한 프레임워크
          + 작은 모델의 한계를 극복하기 위해 LangGraph.js를 사용하여 상태 기반 애플리케이션을 설계하고 최적화된 프롬프트 기술을 제공
          + 로컬 LLM이 제공하는 장점(저지연, 개인정보 보호)을 활용하면서도 제한된 성능 문제를 해결하기 위한 방법론 제시
     * Visual Blocks: AI 파이프라인의 시각적 프로토타이핑
          + Visual Blocks는 간단한 드래그 앤 드롭 인터페이스를 통해 AI 파이프라인을 빠르게 프로토타이핑할 수 있는 시각적 프로그래밍 플랫폼
          + 실시간 데이터 증강 및 테스트가 가능하며, 다양한 사용자 정의 노드와 파이프라인을 통해 창의적인 솔루션을 개발 가능
          + 대화형 그래픽, LLM 체인, 컴퓨터 비전, 멀티모달 솔루션 등 다양한 AI 응용 프로그램을 시연
          + 커뮤니티 기여를 장려하여 더 풍부한 ML 파이프라인 생태계를 구축하고자 함
     * 크롬의 내장 AI 기능 개요
          + Prompt API와 고수준 작업 API(요약, 텍스트 재작성 등)의 현재 상태와 초기 사용자 피드백 공유
          + 크롬의 내장 AI 기능을 활용한 다양한 애플리케이션과, 향후 계획에 대해 설명
          + 고성능 및 안정적인 성능을 위한 API 최적화 및 개선 사항 소개
     * TensorFlow.js와 소비재 산업 적용 사례
          + 브라질의 대형 소비재 기업이 TensorFlow.js를 사용하여 상점 내 마케팅 전략을 개선한 사례
          + AI 기술을 활용해 실시간으로 제품 식별 및 분석 수행
          + 이 프로젝트는 오픈 소스로 공개되어 다른 기업에서도 사용 가능하게 되었으며, 업계의 다양한 응용 사례로 확장됨
     * Chrome의 빌트인 API 사용 경험
          + Chrome의 API를 사용한 AI 애플리케이션 개발 경험과 학습한 교훈에 대해 설명
          + AI 기반 앱의 성능 최적화 및 프롬프트 튜닝 기술 소개
          + Synonym Finder 앱 사례를 통해 Prompt API의 유연한 사용 방법 및 실용적인 팁 공유
     * 웹 확장의 AI 활용 가능성
          + Chrome 확장 프로그램은 브라우저의 제어와 웹 콘텐츠 관찰, UI 추가가 가능하여 AI 기능과 결합했을 때 유용한 확장성 제공
          + 현재 웹스토어에 등록된 AI 기반 확장 프로그램의 사례와 향후 가능성에 대해 설명
          + AI와 Chrome 확장 프로그램의 통합을 통해 브라우징 경험을 개선하고 생산성을 높이는 방법 소개
     * WebAI를 통한 의료 접근성 혁신
          + WebAI 기술을 사용하여 IncludeHealth는 물리치료를 가상으로 제공, 환자들이 언제 어디서나 맞춤형 치료를 받을 수 있게 함
          + 비용과 접근성의 장벽을 허물어, 더 많은 환자가 치료를 받을 수 있는 가능성 열어줌
          + 개인 맞춤형 데이터를 활용하여 더 정확하고 효과적인 치료 제공
     * Google Sheets용 Simple ML
          + Google Sheets 애드온으로 제공되는 Simple ML은 사용자가 스프레드시트 내에서 직접 머신러닝 작업을 수행할 수 있게 함
          + WebAssembly, JavaScript, Chrome의 내장 AI를 사용해 복잡한 머신러닝 작업을 간단하게 수행 가능
          + 오픈 소스 라이브러리를 통해 다른 개발자들도 쉽게 자신만의 ML 솔루션을 개발 가능하도록 지원

   JS조아
"
"https://news.hada.io/topic?id=17792","생물학적 기적 - 우드 프로그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            생물학적 기적 - 우드 프로그

     * 생물학적 기적: 나무개구리
          + 나무개구리는 겨울철에 동면하면서 신체가 얼어붙는 독특한 생존 전략을 가짐
          + 알래스카와 캐나다의 북부 숲에서 극한의 추위를 견디며 생존함
          + 대부분의 개구리는 물속에서 동면하지만, 나무개구리는 숲 바닥의 낙엽 속에서 동면함
          + 이 전략 덕분에 봄에 빠르게 활동을 시작할 수 있으며, 작은 연못이나 녹은 물 웅덩이에서 번식 가능
     * 동면 중의 생리적 변화
          + 겨울이 시작되면 나무개구리의 복강과 내부 장기가 얼음으로 채워짐
          + 간에서 생성된 포도당이 세포 내로 유입되어 세포가 얼지 않도록 보호함
          + 세포 외부에는 얼음이 형성되지만, 내부는 얼지 않도록 하여 치명적인 손상을 피함
          + 동면 중에는 근육 움직임, 심장 박동, 호흡이 멈추며, 봄에 내부부터 서서히 해동됨
     * 인간과의 연관성
          + 나무개구리의 혈당 조절 능력은 당뇨병 관리에 대한 통찰력을 제공할 수 있음
          + 동결 및 해동 시 손상 없이 장기를 보존하는 방법을 연구하는 데 도움을 줄 수 있음
          + 혈액 순환을 중단하고 다시 시작할 수 있는 능력은 심장마비나 뇌졸중 후 치료에 유용할 수 있음

        Hacker News 의견

     * ""Winter World""라는 책은 동물들이 추운 겨울을 어떻게 생존하는지를 다루고 있으며, Bernd Heinrich라는 생물학자가 쓴 흥미로운 책임
          + 책에서는 다람쥐가 겨울을 나는 방법을 설명하며, 기본 원리에 대해 재미있게 설명함
          + 예를 들어, 다람쥐가 체온을 유지하기 위해 필요한 칼로리와 소나무 열매의 칼로리를 계산하여 몇 개를 먹어야 하는지를 설명함
     * 나무 개구리의 심장이 겨울 동안 얼어붙었다가 다시 뛰기 시작하는 메커니즘은 아직 이해되지 않음
          + 개구리가 얼어붙어 심장 박동이나 뇌 활동이 없는 상태에서 녹으면 다시 살아나는 것이 가장 흥미로운 부분임
          + 어떤 메커니즘이 작용하는지 상상하기 어려움
     * 나무 개구리는 겨울 동안 여러 번 얼고 녹는 과정을 겪을 수 있으며, 체내 물의 65% 이하가 얼어야 생존 가능함
          + 관련 정보는 위키피디아에서 확인 가능함
     * 개구리를 얼렸다가 수 세기 후에 녹이는 것이 가능한지 궁금함
          + 개구리가 기억을 형성하고 얼고 녹는 과정 후에도 기억을 유지할 수 있는지 궁금함
     * 나무 개구리는 3-5년 정도 살며, 최대 5번의 얼고 녹는 과정을 겪을 수 있음
          + 이러한 과정에서 세포 손상이 얼마나 축적되는지, 그리고 짧은 수명으로 인해 이를 얼마나 견딜 수 있는지 궁금함
          + 복잡한 생명체는 재생 능력을 희생하는 경향이 있음
     * 수생 거북은 다른 동면 전략을 사용함
          + 공기를 호흡하지만 얼음 아래에 갇힐 수 있어 대사율을 낮추고 물에서 산소를 흡수하는 등의 적응을 함
          + 관련 정보는 PBS와 Wildlife in Winter에서 확인 가능함
     * 얼어붙는 것은 감염성 미생물을 죽이거나 느리게 하여 생명 연장에 도움이 될 수 있음
          + 개구리는 추워지면 잎 아래로 들어가 얼어붙고, 8개월 후 녹으면 배고프고 번식 욕구가 생김
     * 기사에는 개구리 사진이 없으며, 녹은 개구리와 얼어붙은 개구리의 사진은 Shaker Lakes에서 볼 수 있음
     * 진화적으로 양서류는 포유류보다 단순하며, 크기가 작고 수명이 짧음
          + 낮은 온도 때문에 고급 당화 최종 산물 문제를 덜 겪음
          + 다른 얼음 생존 전략으로는 항동결 단백질이 있으며, 이는 전나무와 북극 어류에서 발견됨
     * 해동 단계에서 막 전위가 어떻게 유지되거나 재구성되는지 이해하기 어려움
"
"https://news.hada.io/topic?id=17786","Relativty: 200달러에 제공되는 오픈소스 VR 헤드셋","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Relativty: 200달러에 제공되는 오픈소스 VR 헤드셋

     * 소개
          + Relativty는 오픈 소스 VR 헤드셋으로, Maxim Perumal과 그의 친구 Gabriel Combe가 15세 때 직접 제작한 프로젝트임.
          + 이 프로젝트는 상업 제품이 아니며, 사용자가 직접 제작할 수 있도록 설계됨.
     * 제작 비용
          + Relativty는 약 200달러로 제작 가능함.
          + 납땜 인두와 3D 프린터를 사용하여 제작할 수 있음.
     * 소프트웨어
          + Steam VR 지원: Relativty는 SteamVR 게임을 지원하며, DIY 또는 상용 VR 장치에 맞게 수정 가능함.
          + 실험적 위치 스케일링: 카메라를 사용하여 비디오 입력 기반으로 신체를 추적하는 AI를 포함함. 전용 센서에 비해 정밀도와 자유도가 떨어지지만, 모델을 개선할 수 있는 가능성이 있음.
     * 하드웨어
          + 메인보드: Atmel SAM3X8E ARM Cortex-M3 프로세서를 기반으로 한 저렴한 메인보드를 설계함. PCB와 부품의 총 비용은 약 25달러임.
          + 펌웨어 및 디스플레이: Relativty 펌웨어는 ArduinoCore-sam을 기반으로 하며, Arduino Due와 호환됨. 2K 듀얼 디스플레이에서 120FPS로 실행되며, 사용자가 원하는 디스플레이를 사용할 수 있음.
     * 시작하기
          + Relativty는 완전한 오픈 소스로, 해커와 개발자가 실험할 수 있는 테스트 베드로 설계됨.
          + 소스 코드와 전자, 하드웨어, 기계 부품의 소스는 GitHub에서 확인 가능함.
          + 제작 가이드는 GitHub에서 제공됨.
     * 커뮤니티 및 채용
          + Discord 서버: 다른 VR 애호가와 소통하고, 헤드셋 제작에 대한 도움을 받을 수 있는 Discord 서버가 있음.
          + 채용: 새로운 독립형 VR 헤드셋과 OS, 가상 세계를 구축하는 Unai라는 회사를 시작함. 다양한 분야의 도전에 함께할 인재를 채용 중임.

        Hacker News 의견

     * GitHub의 프로젝트는 3DoF 추적만 가능하며, 이는 Oculus Go 헤드셋이나 Google Cardboard와 같은 범주에 속함. 현재 VR의 최소 기준은 6DoF임
          + 3DoF는 헤드셋이 머리의 회전만 추적하고, 6DoF는 머리의 절대 위치까지 추적함
          + 6DoF 구현은 훨씬 어려움
     * 4년 전 팀은 현재 Unison.co로 발전했음. 투자자 섹션이 있는 회사를 구축 중임
          + 팀에게 가장 큰 조언은 빠르게 시장에 진입하는 것임. 많은 사람들이 현재 제품을 원하고 있음
     * 이 헤드셋은 $200짜리 제품이 아님. 직접 제작해야 하며, $200 상당의 부품이 필요함
     * 관련된 다른 프로젝트로는 Relativty라는 오픈소스 VR 헤드셋이 있음
     * 현재 VR 하드웨어 개요는 Phia가 제공함. 최근의 발전은 Bigscreen으로, 유선 헤드셋 디스플레이, 127그램 무게, 좋은 화면과 광학을 갖추고 있으며 약 $1000임
     * 이 프로젝트는 자신의 VR 헤드셋을 직접 제작하는 훌륭한 방법임. 고등학교나 대학 수업, 하드웨어 클럽에서 재미있는 부가 프로젝트로 활용 가능함
     * Relativity.com 도메인은 비쌌을 것으로 예상되며, 새로운 브랜드 ""Unai""/unison.co를 만드는 것이 놀라움
     * 부품 목록을 보면 10cm 미만의 2k 디스플레이가 $50 미만으로 제공됨. 고해상도 디스플레이와의 차이를 메울 수 있는 렌즈가 필요함
     * 회사 이름은 기억하기 어려움. Maker 프로젝트에는 좋지만 6DoF 없이는 주목받기 어려움
"
"https://news.hada.io/topic?id=17836","Ondsel 서비스 종료 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Ondsel 서비스 종료 발표

  Ondsel 종료

     * Ondsel는 약 2년간 운영 후 종료 결정을 내림. FreeCAD 커뮤니티와 엔지니어링 CAD 커뮤니티의 지원에 감사함.

  Ondsel 종료 이유

     * 상업용 CAD와의 경쟁이 어려웠음. 폐쇄형 CAD는 교육과 산업에 깊이 자리 잡고 있음.
     * 확장 가능한 비즈니스 모델을 찾기 위해 많은 설문 조사와 인터뷰를 진행했으나, 상업적 채택을 얻지 못함.
     * 제품-시장 적합성을 찾지 못해 자금이 소진됨.

  자랑스러운 성과

    FreeCAD 애플리케이션 개선

     * 새로운 통합 조립 작업대와 3D 제약 조건 해결기를 기여함.
     * Sketcher와 TechDraw의 사용성을 크게 개선함.
     * VarSets라는 새로운 사용자 정의 속성 시스템을 도입함.
     * TechDraw와 CAM 작업대에 새로운 기능을 추가함.
     * SheetMetal과 같은 서드파티 애드온에도 기여함.

    연결된 CAD를 위한 Lens 서비스

     * 오픈 소스를 중심으로 한 연결된 CAD 경험을 시연함.
     * 하드웨어 제품의 반복 개발을 조직할 수 있는 서비스를 구축함.
     * 모델을 공개 또는 비공개로 공유할 수 있는 간단한 방법을 제공함.
     * 온라인에서 매개변수 모델을 수정하고 다운로드할 수 있게 함.

    FreeCAD 커뮤니티와의 관계

     * 상업적 파트너로서 FreeCAD 프로젝트에 긍정적인 영향을 미침.
     * 블로그를 통해 누락된 기능에 주목하고 프로젝트의 우선순위를 설정하는 데 도움을 줌.
     * 기여 프로세스를 개선하고 병합 프로세스를 가속화함.
     * 디자인 작업 그룹과 새로운 CAD 자문 그룹을 형성하는 데 기여함.

  Ondsel ES의 향후 계획

     * OES는 더 나은 UX/UI와 빈번한 릴리스, 추가 가치를 제공하는 FreeCAD의 변형임.
     * Sketcher와 TechDraw의 개선은 모든 FreeCAD 1.0 사용자에게 제공됨.
     * OES의 추가 가치는 무료 오픈 소스 코드로 제공되며, 대부분 FreeCAD의 일부가 될 예정임.
     * v2024.3 릴리스는 없으나 FreeCAD 커뮤니티를 포기하지 않음.
     * 팀원들은 FreeCAD 프로젝트 협회의 지원을 받아 계속 기여할 예정임.

  사용자 기반에 대한 영향

     * 고객과 사용자에게 종료를 알릴 예정임. 서버는 데이터를 다운로드할 시간을 제공하기 위해 일정 기간 동안 계속 운영됨.
     * 구독 남은 기간에 대한 환불이 이루어질 예정임.
     * 문의 사항은 support@ondsel.com으로 연락 바람.

        Hacker News 의견

     * Ondsel의 노력 덕분에 FreeCAD가 많이 개선되었음. Ondsel은 종료되지만 실패는 아님
     * 개인 프로젝트에서 CAD 도구를 사용할 때 상용 CAD의 높은 비용과 무료/오픈 소스 솔루션의 기능 부족에 좌절을 느낌
          + Blender가 특정 분야에서 틈새를 채우는 것처럼 FreeCAD도 그런 역할을 할 수 있기를 바람
     * Ondsel을 통해 CAD를 배우고 가정에서 사용할 모델을 인쇄했음
     * Ondsel의 비전인 3D 모델 온라인 저장소를 믿었음
     * 상용 제품에 의존하지 않는 분야에서 일하는 것이 부러울 때가 있음
     * FreeCAD가 상업적 지원을 받으면 더 널리 사용될 수 있을 것이라 생각함
     * Solvespace는 간단하지만 기능이 부족함
     * Dune 3D는 우아하고 사용하기 쉬운 도구로 FreeCAD가 UI 측면에서 참고할 만함
     * BRL-CAD는 오래된 인터페이스로 인해 많은 사람들이 사용하지 않음
     * OpenSCAD는 프로그래머를 위한 3D 모델링 도구로 수학적 지식에 따라 모델링 가능
     * LibreCAD는 2D 작업에 적합하지만 주로 파일 변환에 사용함
     * OnShape, Alibre, Solidworks for Makers 같은 다른 옵션도 존재함
     * Ondsel이 FreeCAD 개발에 집중을 가져왔고, 그들이 없어진 후 프로젝트가 불안정해지지 않기를 바람
     * FreeCAD 1.0의 변화가 환영받고 있음
     * Blender를 Tinkercad처럼 변환하는 프로젝트를 진행 중이며 도움을 필요로 함
     * 소프트웨어 저작권이 계약 외에 존재하지 않는다면 CAD 소프트웨어의 수익 모델이 완전히 달라질 것임
"
"https://news.hada.io/topic?id=17752","장애인 직원의 재택근무를 어렵게 만드는 Amazon 정책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    장애인 직원의 재택근무를 어렵게 만드는 Amazon 정책

     * Amazon의 새로운 정책
          + Amazon은 장애를 가진 직원들이 재택근무 허가를 받기 어렵게 하고 있음
          + 회사는 장애를 가진 직원들에게 더 엄격한 심사 과정을 도입한다고 알림
          + 새로운 요청 및 기존 재택근무 연장 신청 모두에 적용됨
     * 심사 과정
          + 영향을 받는 직원들은 ""다단계 리더 검토""를 거쳐야 함
          + 필요 시, 직원들은 사무실로 돌아가 한 달간의 시험 기간을 거칠 수 있음
     * 배경 및 영향
          + Amazon은 주 5일 사무실 근무로 복귀하려는 의지를 강조하고 있음
          + 이러한 변화는 일부 직원들이 포기하고 퇴사할 수 있다는 우려를 불러일으킴

        Hacker News 의견

     * Amazon이 데이터 기반 회사라고 주장하지만, RTO(Return to Office) 정책의 이점에 대한 데이터가 부족함. 이는 통제나 인력 감축과 관련이 있을 수 있음.
          + Amazon이 RTO 정책의 이점을 입증할 데이터가 없음을 인정했음.
          + RTO 정책이 통제나 인력 감축과 관련이 있을 수 있다는 의혹이 있음.
     * Amazon이 사무실 근무의 이점이 크다고 주장하지만, 이는 신념에 기반한 것일 수 있음.
          + Amazon이 재택근무 중에도 성과가 좋았음을 고려할 때, 재택근무가 Amazon에 유리할 수 있다는 가설을 세우고 이를 증명할 필요가 있음.
          + RTO 정책이 비밀 실험이라면, 이는 상업용 부동산에 대한 매몰 비용 오류와 관리층의 만족을 위한 결정일 수 있음.
     * Amazon의 RTO 정책은 실질적으로 해고임. 경영진이 잘못된 결론을 내리는 것이 아니라 거짓말을 하고 있음.
     * Amazon에서 근무할 때, 재택근무를 위한 의료 예외를 받는 과정에서 HR 담당자가 개인 전화로 반복적으로 연락했음.
          + 만성 질환에 대한 예외가 승인되었지만, 6개월마다 갱신이 필요하다고 통보받았음.
     * Amazon이 직원들을 싫어하는 이유를 이해할 수 없음. 직원들은 회사에 막대한 수익을 창출하고 있으며, 사무실 근무가 필수적이지 않음.
          + 이전에는 사무실에서 일하고 싶을 때만 일할 수 있었음.
     * RTO가 의무화되면 재택근무가 더 어려워짐.
          + 예외 신청이 더 어려워지고, 승인 후에도 성공적으로 유지하기 어려움.
          + Amazon이 장애가 있는 직원들에게 적대적인 근무 환경을 조성하고 있음.
     * Amazon의 정책에 대한 법적 대응은 어려움. 개인이 소송을 제기하기 어렵고, 정부의 개입도 쉽지 않음.
     * 사무실이 개방형 구조로 인해 산만하지 않다면 RTO를 고려할 수 있음.
          + 집에서의 업무 환경이 조용하고 집중하기 좋음.
     * Amazon은 부정적인 언론 보도에 신경 쓰지 않음. 노동자에 대한 관심도 없음.
          + Amazon은 대형 기술 회사에서 일하고자 하는 사람들에게 좋지 않은 평판을 얻고 있음.
"
"https://news.hada.io/topic?id=17775","AI가 기술 부채를 더 비싸게 만드는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AI가 기술 부채를 더 비싸게 만드는 이유

     * AI가 코드 작성과 정리에 도움을 주기 때문에 기술 부채(tech debt) 가 덜 중요해질 것이라는 믿음이 있음
     * 하지만 실제로는 AI가 기술 부채의 비용을 더 크게 만들고 있음
     * 낮은 부채의 코드베이스에서 AI 도구의 속도 향상은 극대화되지만, 높은 부채를 가진 레거시 코드베이스에서는 AI 도구의 효율이 급격히 떨어짐
     * 결과적으로, 기술 부채가 많은 코드베이스는 AI 도구를 활용하는 데 더 큰 어려움을 겪고 있음

    복잡한 코드에 취약한 생성형 AI

     * Cursor나 Aider 같은 AI 코딩 도구들은 코드의 복잡성에 매우 민감하게 반응함
          + 기존 패턴이나 인터페이스가 잘 정의된 코드에서는 속도 향상이 크지만, 복잡한 제어 흐름과 의존성이 많은 코드에서는 유효한 응답을 생성하는 데 어려움을 겪음
     * 복잡한 코드베이스는 AI 모델뿐만 아니라 개발자가 요청을 명확하게 구성하는 것도 어렵게 만듦
     * 이로 인해 많은 개발자들은 AI 도구가 ‘생산 수준’의 복잡성을 처리할 수 있을 때까지 기다리는 경향이 있음

    AI 도구를 제대로 활용하기

     * 레거시 코드베이스에서 AI 도구를 무리하게 사용하기보다는, 인간 전문가가 리팩토링을 통해 AI가 원활히 작동할 수 있도록 하는 것이 중요함
     * 직접적인 리팩토링이 위험할 경우, Strangler Fig 패턴과 같은 방법을 사용해 새로운 모듈을 개발하고 이를 통해 AI 도구의 이점을 즉시 활용할 수 있음
     * 이를 통해 개발팀은 더 높은 수준의 추상화에 집중하고, 코드의 세부 구현보다는 아키텍처 설계에 중점을 두게 됨

    AI 친화적인 접근 방식

     * AI 도구가 제대로 작동할 수 있도록 시스템을 모듈화하고, 명확한 인터페이스를 통해 모듈 간 상호작용을 정의하는 것이 중요함
     * 자연어로 핵심 기능과 데이터 흐름을 설명할 수 있는 모듈 구조를 유지하는 것이 유용한 기준임
     * Gauge Tach와 같은 도구를 사용해 가시성 및 아키텍처 규칙을 설정하면, 모듈화된 시스템으로 발전할 수 있음

    품질이 속도를 좌우함

     * 고품질의 코드베이스를 유지하는 것이 그 어느 때보다 중요해졌음
     * 모듈화된 아키텍처에 투자하면, 팀은 AI 도구의 최대 효과를 발휘할 수 있으며, 빠른 기능 개발과 고품질 소프트웨어를 동시에 구축할 수 있음

   소프트웨어 비대화는 피할 수 없는 운명인 것 같습니다

   어디서 본 건 있는 지 관리자나 이런 사람들이 ai가 다해결 해줄거라는 마인드가 있는 것 같음 chatgpt가 너무 망상을 만들어 났음 아직 초등학생이라는 걸 강조할 필요가 있을 것 같음 보조 도구로 아주 조금 도와주는 정도라는걸 말해줄 필요가 있을 듯..그리고 위에 상황이 공감가는게 복잡하면 이해를 잘못함 프로젝트 전체 흐름을 파악하지 못하는 것 같음

   garbage in garbage out은 벗어날 수가 없군요

        Hacker News 의견

     * 젊고 고품질의 코드베이스를 가진 회사들이 생성 AI 도구로부터 가장 큰 혜택을 받음. 반면, 복잡한 레거시 코드베이스를 가진 회사들은 이를 채택하는 데 어려움을 겪음. 개인 프로젝트에서 LLM을 사용할 때도 비슷한 경험을 했음. 코드베이스가 조금이라도 독특해지면 모델이 오류를 범하고 작업이 더 어려워짐
     * LLM은 쉬운 작업을 더 쉽게 만들어 주지만, 어려운 작업에서는 실수를 범함. 이러한 격차는 줄어들지 않고 오히려 커지고 있음
     * '고부채' 환경에서는 미묘한 제어 흐름과 장기 의존성, 예상치 못한 패턴 때문에 유용한 응답을 생성하는 데 어려움을 겪음. 많은 경우 이것은 '기술 부채'가 아니라 코드베이스의 성숙함을 나타내는 것임
     * 생성 AI 도구가 레거시 코드베이스의 복잡한 문제를 해결하도록 강요하기보다는, 인간 전문가가 레거시 코드를 리팩토링하여 생성 AI가 원활하게 작동할 수 있도록 해야 함
     * AI가 기술 부채를 덜 중요하게 만들 것이라는 믿음이 생겨나고 있음. 그러나 AI가 생성한 코드는 불규칙하고 일관성이 없으며, 특정 프롬프트와 컨텍스트 입력에 매우 민감함
     * AI 생성 코드는 실제로 가치가 있을 수 있지만, 이 기사에서의 프레임은 비현실적임
     * 머신러닝은 기술 부채의 고금리 신용카드와 같음. 코드 생성이 쉬워질수록 더 많은 코드가 생성되고, 유지보수 비용이 증가함
     * LLM의 코드 생성 능력에 감탄하지만, 목표는 코드 양을 줄이는 것임
     * AI가 단순한 작업을 처리하고 더 많은 코드를 생성하지만, 발견하기 어려운 버그를 생성함. 이러한 도구로 더 빠르게 움직일 수 있지만, 다른 방식으로 운영해야 할 필요가 있음
     * AI가 코드 이해 및 수정에 도움을 줄 수 있지만, 맹목적인 복사-붙여넣기는 좋지 않음. 코드 검토와 설명 요청, 반복 작업이 여전히 필요함
"
"https://news.hada.io/topic?id=17770","기억상실증 부모를 위한 E-ink 디스플레이 MomBoard","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   기억상실증 부모를 위한 E-ink 디스플레이 MomBoard

  환자

     * 2022년 6월, 긴 수술의 부작용으로 어머니가 영구적인 전향성 기억상실증을 겪게 됨. 새로운 장기 기억을 형성할 수 없게 됨.
     * 기억상실증은 치매와 유사하지만, 치매는 진행성 질환인 반면 이 기억상실증은 안정적임.
     * 어머니는 혼자 아파트에 살고 있으며, 자녀들이 어디에 있는지 걱정하며 불안감을 느끼고 있음.

  필요성

     * 종이 메모나 다른 형태의 알림은 도움이 되지 않음. 자녀들이 괜찮다는 전화를 해도 금방 잊어버림.
     * 항상 켜져 있는 장치가 어머니의 아파트에 설치되어 자녀들이 작성한 메모를 보여줄 수 있기를 원함.

  설계 목표

     * 몇 달 동안 계속 켜져 있을 수 있는 디스플레이
     * 자녀들이 쉽게 메시지를 게시할 수 있으며, 교체될 때까지 표시됨
     * 안경 없이도 쉽게 읽을 수 있을 만큼 크고 읽기 쉬움
     * 네트워크 장애에 강하고, 밤에 빛나지 않음
     * 하드웨어 해킹이 필요하지 않으며, 구독 서비스나 독점 앱 스토어가 없음
     * 가정에서 어색하지 않게 보임

  장치

     * BOOX Note Air2 Series를 선택함. 가격은 500달러로 상업용 디스플레이보다 저렴함.
     * 웹 브라우저를 자동으로 시작하고 지정된 시작 페이지를 표시할 수 있음.
     * 디스플레이는 명확하고 읽기 쉬우며, 빠르게 새로 고침됨.
     * 작은 금속 스탠드를 사용하여 디스플레이를 사진 프레임처럼 보이게 함.

  웹 소프트웨어

     * 두 개의 페이지로 구성된 간단한 웹사이트를 작성함.
          + 보드 페이지: 메시지를 표시하며, 어머니가 볼 유일한 페이지
          + 작성 페이지: 자녀들이 메시지를 작성하고 저장할 수 있는 페이지
     * 보드 페이지는 외부 프레임과 내부 페이지로 구성됨.
          + 외부 프레임은 매 시간마다 내부 페이지를 새로 고침하여 소프트웨어 변경 사항을 반영함.
          + 내부 페이지는 메시지를 표시하며, 5분마다 메시지 데이터를 쿼리함.
     * 작성 페이지는 간단한 웹 폼을 제공하여 자녀들이 메시지를 작성하고 저장할 수 있음.

  시각적 디자인

     * e-ink 번인을 방지하기 위해 메시지 위치를 무작위로 변경함.
     * 메시지 텍스트는 손글씨 느낌의 무료 폰트를 사용함.
     * 메시지 텍스트 크기를 최대화하기 위해 작은 JavaScript 함수를 작성함.

  서비스

     * JsonStorage 서비스를 사용하여 메시지 데이터를 저장함.
     * 무료 요금제를 사용하다가, 서비스가 마음에 들어 월 1달러의 기본 요금제를 사용함.

  시험 및 설치

     * 소프트웨어를 몇 주 동안 테스트하고 어머니의 아파트에 설치함.
     * 어머니는 디스플레이에 만족하며, 자녀들의 업데이트를 기대함.

  회고

     * 어머니는 디스플레이의 존재와 목적을 기억하게 됨.
     * 디스플레이는 어머니의 삶의 질을 개선하는 데 성공적이었음.
     * 소프트웨어를 단순하게 유지하고 기본 웹 기술을 사용한 것이 버그를 피하는 데 도움이 됨.
     * 디스플레이는 여전히 잘 작동하며, 메시지를 계속 표시함.

        Hacker News 의견

     * 기술을 통해 사람의 삶을 크게 개선하는 아름답고 간단한 방법에 감동받음. OP의 어머니와 비슷한 기억 상실 사례로 Henry Molaison이 언급됨
          + Henry Molaison은 특정 뇌 손상으로 새로운 기억을 형성하지 못했지만, 무의식적으로는 기억할 수 있었음
          + OP의 어머니가 태블릿을 기억하는 것이 이와 유사함
     * 어머니가 같은 상태로 고통받았던 경험을 공유함
          + 여러 디지털 기기를 시도했으며, 가족 사진을 무한 반복하는 LCD 액자와 MP3 스피커가 효과적이었음
          + 어머니가 좋아하는 음악을 들을 수 있었음
     * 기술을 통해 사람의 인격을 유지하고 사랑받고 있음을 알리는 아름다운 사용 사례임
          + 벽에 부착 가능한 eInk 기기를 통해 다양한 정보를 제공할 수 있는 아이디어를 공유함
     * 아내가 교통사고 후 전향성 기억 상실을 겪었으나 회복됨
          + 기기가 도움이 되었을지 확신할 수 없지만, 매번 새롭게 발견했을 가능성이 있음
          + 많은 인내가 필요했으며, 자주 좌절감을 느꼈음
     * 메시지 텍스트 크기를 최대화하는 작은 JavaScript 함수를 작성함
          + CSS로는 자동으로 글꼴 크기를 최대화할 수 없었음
          + 이 기능이 접근성뿐만 아니라 유용하다고 생각함
     * 메시지가 더 이상 적용되지 않을 때 혼란을 줄이기 위한 아이디어로 시작 및 종료 날짜/시간을 메시지에 추가하는 것을 제안함
     * 부모와의 소통을 위해 eInk RPi 디스플레이를 만듦
          + 아버지는 시를 좋아하지 않았지만 이미지 생성에는 관심이 있었음
          + 텔레그램 봇을 통해 주제를 입력하면 스타일을 선택해 이미지를 생성함
     * Pimeroni는 다양한 버튼과 LED가 포함된 eInk 디스플레이를 제공함
          + Boox 태블릿/전자책 리더는 Android를 실행하며, 다양한 앱과 브라우저를 사용할 수 있음
     * 저자가 어머니에게 잘 맞는 방법을 찾은 것에 대해 기쁨을 느낌
          + 어머니가 기억 상실에도 불구하고 디스플레이를 기억하고 자녀들의 업데이트를 기대함
     * KOMP라는 상업 제품이 있으며, 가족과의 소통을 돕는 노인 친화적인 소셜 네트워크 피드와 유사함
"
"https://news.hada.io/topic?id=17805","이그드라실 네트워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               이그드라실 네트워크

     * Yggdrasil 소개
          + Yggdrasil은 새로운 실험적 경로 설정 방식으로, 현재 인터넷에서 일반적으로 사용되는 구조적 경로 설정 프로토콜의 대안으로 설계되었음
          + 미래의 대규모 메쉬 네트워크를 위한 기술로도 사용 가능함
     * 특징
          + 확장성: 대규모, 복잡한 또는 인터넷 규모의 토폴로지를 지원함
          + 자체 복구: 네트워크는 연결 실패나 이동성 이벤트에 빠르게 대응함
          + 암호화: 네트워크를 통해 전송되는 트래픽은 항상 종단 간 암호화됨
          + 피어 투 피어: 설계상 완전히 임시로 작동하며 중앙 집중화된 지점이 없음
          + 크로스 플랫폼: Linux, macOS, Windows, iOS, Android 등에서 지원됨
     * 현재 구현
          + Yggdrasil의 현재 구현은 경량의 사용자 공간 소프트웨어 라우터로, 다양한 플랫폼에서 쉽게 구성 가능함
          + 네트워크 참가자 간의 종단 간 암호화된 IPv6 라우팅을 제공함
          + 노드 간 피어링은 로컬 네트워크, 포인트 투 포인트 링크 또는 인터넷을 통한 TCP/TLS 연결을 사용하여 구성 가능함
          + Yggdrasil 네트워크는 노드 간 IPv6 라우팅을 제공하지만, 피어링 연결은 IPv4 또는 IPv6 네트워크를 통해 설정 가능함
     * 프로젝트 상태
          + 여전히 알파 단계의 프로젝트이며, 미래에 몇 가지 중대한 변경이 있을 수 있음
          + 그럼에도 불구하고, Yggdrasil은 일반적으로 일상적인 사용에 충분히 안정적이며, 소수의 사용자가 다양한 사용 사례에 대해 Yggdrasil을 강하게 스트레스 테스트하고 있음
     * 참여 방법
          + 네트워크에 참여하기 위해 자신의 컴퓨터나 라우터에 Yggdrasil을 설치하고 구성함
          + Matrix 채널에서 대화에 참여함
          + 사용자들이 운영하는 네트워크의 내부 서비스를 탐색함
          + 개발자 페이지와 GitHub를 방문함
          + GitHub 이슈로 버그와 문제를 보고함

        Hacker News 의견

     * Yggdrasil의 프로토콜 명세를 찾으려 했으나 공식 문서에서 찾을 수 없었음. GitHub의 다른 프로젝트에서 관련 정보를 발견했음
          + 이 문서는 암호화 ID, 메시지 형식, 와이어 프로토콜, 피어링 및 스트림 의미, 스패닝 트리 업데이트 및 루트 선택, DHT, 포워딩 로직, 세션 등을 다루고 있음
          + TCP에 매우 밀접하게 결합되어 있으며, 모든 패킷이 신뢰성 있게 전송되고 순서대로 전달되어야 함
     * Yggdrasil 주소가 IPv6에 맞춰져 있으며, 공개 키의 해시를 사용함. 이는 보안에 어떤 이점이 있는지 의문임
          + 새로운 TLD를 만들어 base32를 사용하는 것이 더 나을 수 있음
     * Yggdrasil과 cjdns는 기존 인터넷 위에 구축된 가상 P2P 네트워크로, 일반적인 레이어 3 라우팅 서비스를 제공함
          + ISP와 인터넷 백본이 여전히 필요함
          + IP 레이어를 대체할 수 있는 전 세계적인 P2P 네트워크 프로젝트가 있는지 궁금함
     * 실제 메쉬 P2P IP 네트워크를 원한다면 Tailscale/Headscale을 사용할 수 있음
          + 최근 프로젝트 중 하나는 방화벽/NAT을 통과하고 QUIC 연결을 설정함
          + 두 가지 유용한 PoC가 있음: sendme, dumbpipe
     * 3-4년 전에는 매우 흥미로웠으나 현재는 프로젝트가 중단된 것 같음. 사용 중인 사람의 인상이 궁금함
     * 공개 키에서 파생된 주소 아이디어가 좋지만, IPv6 주소의 길이 제한으로 충돌 가능성이 있음
          + 장기적으로는 주소 길이에 제한이 없는 커스텀 프로토콜을 추가할 계획임
     * Reticulum Network Stack도 이 분야에 포함됨
     * Yggdrasil은 새로운 실험적 컴팩트 라우팅 스킴임. 하지만 이제는 6년 이상 된 프로젝트임
     * Teredo 터널과 유사함. 이는 Windows 7의 일부로, IPv4 위에 IPv6 터널을 구축하고 Windows 기기에 글로벌 IPv6 주소를 할당했음. Windows 10에서는 제거됨
"
"https://news.hada.io/topic?id=17753","HN 공개: Proxmox VE 보조 스크립트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       HN 공개: Proxmox VE 보조 스크립트

     * Proxmox VE Helper-Scripts
          + Proxmox VE 환경 관리를 돕는 200개 이상의 스크립트 제공.
          + 초보자와 숙련자 모두에게 유용한 도구임.
          + 커뮤니티에 의해 구축된 웹사이트이며, 소스 코드는 GitHub에서 확인 가능함.

        Hacker News 의견

     * 프로젝트 유지보수 팀의 일원으로서, tteck의 유산을 이어가고자 하는 열정적인 팀원들과 함께 투명하게 진행 중임
     * Proxmox VE를 사용하여 Docker 컨테이너를 VM에서 운영해왔으며, 최근 스크립트를 통해 Caddy와 Wireguard를 LXC 컨테이너로 옮겨 매우 쉽게 설정할 수 있었음
          + 스크립트를 만든 모든 사람들에게 감사의 인사를 전하고 싶음
     * Proxmox는 여전히 전체 디스크 암호화를 기본적으로 지원하지 않으며, 이는 ZFS가 FDE를 주요 기능으로 취급하지 않기 때문임
          + 이는 매우 안타까운 상황임
     * Terraform을 통해 libvirt와 Unraid를 관리하려 했으나 여러 문제에 부딪혀 결국 수동으로 관리하기로 결정함
          + Proxmox의 가상화 기술과 Terraform, Salt Stack, Ansible과의 차이점에 대해 궁금해함
     * Proxmox 박스를 처음 설정하려는 입장에서, OPNsense VM과 물리적 WiFi 라우터를 통해 네트워크 필터를 추가하고자 함
          + OPNsense와 OMV 스크립트가 LXC 컨테이너 대신 VM으로 설정되어야 하며, VM 간의 통신을 위한 스크립트가 필요함
     * Docker LXC와 Home Assistant VM에 대해 더 알아볼 예정임
          + Proxmox에서 VM 내에서 Docker를 사용해왔으나 더 효율적인 방법이 있을 수 있음
     * Proxmox가 단순 KVM과 비교하여 어떤 기능을 제공하는지 궁금해함
          + 웹 인터페이스만 있는지에 대해 질문함
     * 홈랩에서 Proxmox를 사용하기로 결정했으나, Kubernetes와 비교하여 확장성이 부족하다고 느끼고 있음
          + Terraform 지원이 없어 자동화 및 재현 가능한 빌드가 어려움
          + 하지만 리소스 관리와 패스스루 모델은 매우 훌륭하며 설정 및 유지보수가 용이함
     * 커뮤니티가 훌륭하며, Pi-hole과 Paperless LXC 컨테이너를 실행해본 경험이 있음
          + Appflowy를 기대하고 있음
"
"https://news.hada.io/topic?id=17813","인간 활동에 의한 장기적 지구 온난화 1.5°C, 새로운 추정치 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인간 활동에 의한 장기적 지구 온난화 1.5°C, 새로운 추정치 발표

     * 새로운 연구 결과
          + Lancaster University의 Dr. Andrew Jarvis와 University of Leeds의 Professor Piers Forster가 발표한 연구에 따르면, 인간이 이미 1.5°C의 지구 온난화를 초래했음을 보여줌.
          + 이 연구는 산업 혁명 이전 시점부터의 온도 변화를 측정하여 인간이 초래한 온난화의 장기적 기여도를 보다 정확히 추정함.
     * 파리 기후 협정과 온난화 측정
          + 2016년 파리 기후 협정은 지구 온도 상승을 2°C 이하로 제한하고, 1.5°C로 제한하려는 노력을 강조함.
          + 현재 인간이 초래한 온난화는 1.31°C로 추정되며, 불확실성 범위는 1.10°C에서 1.60°C 사이임.
          + IPCC는 1850-1900년을 '산업화 이전' 기준으로 사용하지만, 이는 이미 온난화가 진행 중이던 시점임.
     * 새로운 측정 방법
          + Dr. Jarvis와 Professor Forster는 1700년 이전을 기준으로 온도 변화를 측정하여 인간이 초래한 온난화가 2023년 기준으로 1.49°C ± 0.11°C임을 발견함.
          + 이 방법은 CO2 농도와 지구 온도 간의 관계를 이용하여 온난화 추정을 보다 정확하게 함.
     * 연구의 중요성
          + 이 방법은 산업화 이전 기준을 보다 견고하게 설정하고, 현재 방법보다 30% 이상 더 확실한 온난화 추정을 제공함.
          + CO2와 온도 데이터가 제공되면 복잡한 기후 모델을 재실행하지 않고도 빠르게 온난화 추정을 할 수 있음.
     * 정책적 함의
          + 연구는 인간 사회가 이미 1.5°C 이상의 장기적 온난화를 초래했음을 보여줌.
          + 파리 협정의 목표를 달성하기 위해서는 더 많은 노력이 필요하며, 긴급한 조치가 온난화 속도를 늦출 수 있음.
     * 미래 예측에 대한 주의
          + 연구자들은 이 방법이 미래 온난화 예측에 사용되기에는 적합하지 않다고 경고함.
          + 메탄과 같은 다른 요인들이 미래에 더 중요해질 수 있으며, 기후 변화의 경고 신호를 주의 깊게 살펴봐야 함.

        Hacker News 의견

     * IPCC 보고서에 따르면, 지구 온난화를 2°C로 제한하려면 인간이 배출할 수 있는 최대 CO2는 1150 Gt임. 현재 인구는 82억 명으로, 평균적으로 1인당 약 140tCO2가 남아 있음. 2050년까지 탄소 중립을 달성하려면, 1인당 연간 약 5.4tCO2를 배출할 수 있음. 현재 주요 국가의 배출량은 사우디아라비아 22.1t, 아랍에미리트 21.6t, 호주 14.5t, 미국 14.3t, 캐나다 14.0t임. 세계 평균은 4.7t이며, 저소득 국가에서는 0.3t임.
     * 기후 변화를 막기 위한 비용은 100-200조 달러로, 이는 전 세계 연간 GDP의 100-200%에 해당함. 연간 GDP의 2-5%를 2050년까지 투자하면 긍정적인 투자 수익을 얻을 수 있음. 이러한 투자가 없다면 기후 변화 적응 비용은 매우 비쌈.
     * 기후 변화는 인류가 가장 시급히 해결해야 할 문제임. 그러나 사회의 내부 작동 방식, 탐욕, 미디어의 영향력 등으로 인해 해결이 어려움. 사람들이 기후 위기를 해결하는 데 시간을 쏟도록 만드는 방법이 필요함.
     * 지구는 복잡한 시스템임. 온난화는 기후 변화의 한 측면이며, 시스템 내에서 연쇄 효과가 발생할 가능성이 있음. 예를 들어, 지구 온도가 상승하면 AMOC와 걸프 스트림이 느려질 수 있으며, 이는 유럽의 기온 하락을 초래할 수 있음. 클라트레이트 건 가설은 메탄의 대량 방출이 급격한 기후 변화를 일으킬 수 있음을 시사함.
     * 개발도상국은 서구식 생활방식을 추구하면서 CO2 사용이 증가할 가능성이 높음. 이는 에너지 생산과 사용의 증가를 의미함. 이상적으로는 태양광과 원자력으로 더 많은 에너지를 생산해야 함. 에너지 생산과 소비를 줄이는 것은 현실적인 해결책이 아님.
     * 기후 변화를 해결할 수 있는 미래가 보이지 않음. 미국의 지도자뿐만 아니라 시민들조차 기후 변화를 실질적인 문제로 인식하지 않음. 비관적인 시각일 수 있음.
     * 20년 전에는 기후 변화가 그렇게 심각하지 않을 것이라는 생각이 많았음. 기후 경고론자들이 가장 극단적인 예측을 선택한다고 생각했음. 그러나 과학적 합의를 더 자주 들어야 함.
     * 뉴욕에서는 기온이 1.5도 이상 상승한 것처럼 느껴짐. 20년 전에는 여름에 에어컨을 거의 사용하지 않았지만, 이제는 5월부터 9월까지 거의 매일 사용함. 기온과 강수 패턴이 더 불규칙해졌음.
     * 미국이 향후 4년간 기후 부정을 지속하고, SCOTUS가 석유 및 가스 친화적인 판사들로 구성되면 상황은 더 악화될 것임.
     * 우리는 최소 1.5°C의 장기적인 지구 온난화를 초래했음. 장기적인 온난화는 정의되어야 함. 역사적 자연 패턴을 통해 지구를 냉각시킬 수 있음. 어떤 온난화도 되돌릴 수 없다는 것은 당연한 것으로 받아들여져서는 안 됨.
"
"https://news.hada.io/topic?id=17801","Llama-OCR: 문서를 Markdown으로 변환하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Llama-OCR: 문서를 Markdown으로 변환하는 기술

     * 프로젝트 소개
          + 이 프로젝트는 llama-ocr와 Together AIOCR을 사용하여 이미지를 구조화된 Markdown으로 변환하는 도구임.
          + 사용자는 이미지를 업로드하여 텍스트를 추출하고 Markdown 형식으로 변환할 수 있음.
     * 주요 기능
          + 이미지 업로드 기능 제공
          + 이미지에서 텍스트를 추출하여 Markdown으로 변환
          + 예제 이미지를 제공하여 사용자가 기능을 테스트할 수 있음
     * 코드 예시
          + llama-ocr 라이브러리를 사용하여 이미지에서 텍스트를 추출하는 코드 예시 제공
          + ocr 함수에 이미지 파일 경로와 API 키를 전달하여 Markdown을 생성함
     * 프로젝트의 중요성
          + 이 프로젝트는 이미지에서 텍스트를 쉽게 추출하고 Markdown으로 변환할 수 있는 기능을 제공하여 문서 작업의 효율성을 높임.
          + 기존의 OCR 도구와 비교하여 간편한 사용성과 Markdown 변환 기능을 제공함.

        Hacker News 의견

     * llama-ocr의 저자는 간단한 API로 이미지를 구조화된 마크다운으로 변환하는 도구를 개발했음. 향후 PDF 파싱 및 JSON 출력 기능 추가 계획 중임
          + 웹툰 예시에서 대문자로 된 대화가 패널마다 다르게 출력되는 문제를 발견했음
          + 오래된 슬라이드를 디지털화하는 데 사용했으며, 슬라이드의 노란색은 실제로는 화이트 밸런스 문제였음
          + 모델의 편향성을 보여주는 사례로, 슬라이드를 골동품으로 잘못 인식하여 잘못된 제목을 생성했음
          + API의 파일 크기나 해상도 제한이 문서화되어 있지 않음
     * llama3.2-vision을 사용하여 자선 경매의 입찰서를 처리했으며, 필체가 좋지 않아도 꽤 정확했음
          + CSV로 일관되게 출력되지 않는 점이 불편했음
          + 문제의 규모가 100페이지 정도라 수작업 정리가 가능했음
     * 일반 OCR 모델은 가족 사진의 텍스트를 디지털화하는 데 적합하지 않으며, Gemini Flash가 가장 우수했음
          + 여전히 오류가 많아 수작업이 더 빠름
     * ""Show HN"" 게시물로 적합한지 의문이며, Llama라는 이름과 연관성이 부족함
     * 유전 알고리즘으로 생성한 문장을 실제 원으로 그렸으나, 텍스트로 인식되지 않음
     * 다중 페이지 PDF를 업로드했으나 지원되지 않음을 알림
     * HN 스크린샷을 업로드했으나 마크다운 코드가 출력되지 않음
     * ChatGPT API를 통해 일본어 OCR이 잘 작동함
     * Walmart 영수증에서 숫자 9를 0으로 잘못 인식함
"
"https://news.hada.io/topic?id=17761","프랑수아 숄레, Google 퇴사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           프랑수아 숄레, Google 퇴사

     * 프랑수아 숄레의 새로운 출발
          + Keras의 창시자이자 AI 분야의 선도자인 프랑수아 숄레가 Google을 떠나 새로운 경력을 시작함.
          + Keras는 200만 명 이상의 사용자를 보유하며, 복잡한 워크플로를 간소화하고 최첨단 기술에 대한 접근을 민주화하는 데 기여함.
          + Google의 Waymo 자율주행차, YouTube, Netflix, Spotify 추천 시스템 등 다양한 애플리케이션에 활용됨.
     * Keras의 미래와 Google의 지원
          + 프랑수아는 Keras의 미래와 JAX, TensorFlow, PyTorch에 대한 지속적인 지원에 전념할 것임.
          + Google의 Keras 팀은 프랑수아와 오픈 소스 커뮤니티에서 협력할 예정임.
          + Google은 Keras 3에 대한 지속적인 투자를 통해 주요 ML 프레임워크를 지원하고, ML 개발자에게 프레임워크 선택의 자유를 제공할 것임.
          + 최근 출시된 Keras Hub는 강력한 AI 도구에 대한 접근을 민주화하고 혁신적인 멀티모달 애플리케이션 개발을 가속화하는 중요한 단계임.
     * 프랑수아에게 감사의 인사
          + 프랑수아의 기여는 머신러닝 프레임워크와 AI 분야 전반에 지울 수 없는 흔적을 남겼음.
          + 그의 작업을 계속 주목하고, Keras 프로젝트와 함께 연결을 유지할 것을 권장함.
          + 프랑수아와 Keras 프로젝트를 계속 팔로우할 수 있는 링크 제공: GitHub, Keras 팀 GitHub, X.com.
     * Google의 AI 프레임워크에 대한 지속적인 노력
          + Google은 개방형 AI 생태계에 대한 약속을 강화하며, AI 프레임워크의 새로운 흥미로운 발전을 기대하게 함.

        Hacker News 의견

     * Francois는 새로운 회사를 시작할 예정임
          + Anthropic에 스카우트된 것은 아님
          + Keras는 다양한 회사에서 사용 중임
               o Midjourney, YouTube, Waymo, Google, Netflix, Spotify, Snap, GrubHub, Square/Block, X/Twitter 등
               o United, JPM, Orange, Walmart 같은 비기술 회사에서도 사용 중임
               o 약 200만 명의 개발자가 Keras를 사용 중임
               o JAX나 PyTorch에서 Keras를 실행하는 사용자도 증가 중임
     * Keras와 TensorFlow의 통합 결정은 Francois가 한 것이 아님
          + 2018년에 TF 리더들이 결정한 사항임
          + 당시 Keras는 독립적인 멀티 백엔드 프레임워크로 남아있었으면 좋았을 것이라는 의견임
          + 2023년에 Keras를 멀티 백엔드로 만드는 프로젝트는 Francois가 즐겼던 프로젝트 중 하나임
     * Keras는 시작하기 쉬웠지만 커스텀 작업이 어려웠다는 의견이 있음
          + PyTorch는 처음부터 완벽했으며, PhD를 제때 마칠 수 있었던 이유임
     * Francois의 트윗은 흥미로움
     * Google Developers Blog에서 개별 엔지니어의 퇴사 소식을 본 적이 없다는 의견이 있음
          + Google에서 매일 유명 인물이 떠나는 것 같다는 의견임
     * Francois가 Google을 그만둔 것 같다는 추측이 있음
          + 최근 인공지능 대회가 끝났고, Francois가 심사를 진행 중임
     * Keras의 멀티 백엔드가 무의미하다는 의견이 있음
          + Keras 3의 새로운 배포 API가 JAX 백엔드에 구현되었으나, TensorFlow와 PyTorch 백엔드에는 아직 적용되지 않음
          + Torch와 Flax가 Keras와 유사한 목표를 가지고 있으며 더 나은 선택이라는 의견임
     * Keras를 사용하면서 기술 부채와 디버깅에 많은 시간을 소모했다는 의견이 있음
          + PyTorch로 전환 후 문제가 사라졌다는 경험이 있음
     * Google이 JAX로 전환하고 TensorFlow의 개발이 중단될 것이라는 소문이 있음
     * Francois가 Keras를 TF에 강제로 통합할 권한이 있었는지 궁금하다는 의견이 있음
"
"https://news.hada.io/topic?id=17785","jiti 2.0 - Node.js에 런타임 TypeScript와 ESM 구문 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             jiti 2.0 - Node.js에 런타임 TypeScript와 ESM 구문 지원

     * ESM과 CommonJS 간의 심리스한 상호운용
     * import()를 대체하는 비동기 API
     * require()를 대체하는 동기 API (deprecated)
     * 매우 가볍고 의존성 없음
     * 커스텀 resolve 앨리어스
     * 추가 변환을 방지하는 스마트 문법 감지
     * Node.js 네이티브 require 캐시 연동
     * ESM 로더 지원
     * JSX 지원 (opt-in)

   링크가 Cacheable?!

   앗 수정했습니다.
"
"https://news.hada.io/topic?id=17757","보기 좋은 떡의 함정: 나에게 도움되는 것을 찾아가는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    보기 좋은 떡의 함정: 나에게 도움되는 것을 찾아가는 방법

     * 개선하고 싶은 것이 있을 때, 우리는 잘 정리된 방법을 찾아가는 경향이 있음
     * 하지만 그런 방법을 받아들이는 뇌의 부분과, 실제로 우리가 행동을 할 때 사용하는 뇌의 부분이 다름
     * 그 점을 생각해봤을 때 스스로에게서 개선점을 찾아가는 방식이 더 도움이 될 때가 많음

   어느정도 공감이 갑니다.

   일을 할때 모두 미리 예상하고 시작하려면 오히려 시작이 늦어지더라구요.
"
"https://news.hada.io/topic?id=17808","오픈스트리트맵 재단에서 공식적으로 벡터 지도 타일을 운영하기 시작함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈스트리트맵 재단에서 공식적으로 벡터 지도 타일을 운영하기 시작함

     * 오픈스트리트맵 재단(OSMF)에서 벡터 지도 타일을 공식적으로 운영하기 시작
     * 래스터 타일과 비교했을 때 벡터 타일의 장단점
          + 서버 단에서 지도 이미지를 렌더링할 필요가 없음
          + 다국어 지원이 용이
          + 하나의 데이터로 여러 지도 스타일을 동시에 제공할 수 있음
          + 저사양 클라이언트에서 지도를 불러오는 부담이 커진다는 단점은 있음
     * 아직 사용 약관은 없으며, 추후 만들어질 예정
     * 데모 페이지에서 직접 체험 가능

   서버 단에서 지도 이미지를 렌더링할 필요가 없음 -> 필요 인것 같습니다.
   받아오는 프로토버퍼나 맵박스 파일을 스타일링을 사용해서 렌더링 해야하니까요...

   원본 타일서버에서 이미지를 렌더링하고 클라이언트로 래스터 타일을 전송할 필요가 없다는 뜻 같은데요. 클라이언트가 타일서버와 직접 통신하는 상황을 가정하고 쓴 문구로 보입니다

   아 서버단이군요..

   osm ❤️
"
"https://news.hada.io/topic?id=17847","구글 스칼라 20주년 기념","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구글 스칼라 20주년 기념

  기본 설명

     * Google Scholar는 연구자들이 연구 논문을 찾고 읽을 수 있도록 돕는 도구임.
     * 20년 전 시작되어 계속 성장해왔으며, 법률 사례를 찾고, 기사를 저장하며, 좋아하는 저자를 팔로우할 수 있는 기능을 제공함.
     * 가족 역사와의 재연결이나 결혼 제안과 같은 놀라운 방식으로 사용되기도 함.

  초기 시절

     * 1. 팀은 두 명으로 시작함. 2004년, 학술 정보에 접근하기 어려웠고 종종 유료 벽 뒤에 숨겨져 있었음. 연구자들이 동료들이 쓴 글을 쉽게 찾고 읽을 수 있도록 하고자 함.
     * 2. 처음에는 물리적으로 파일을 전달함. 느리고 불안정한 인터넷 속도로 인해 연구 자료를 모으기 어려웠음. ""Sneakernet""이라는 저비용 솔루션을 사용하여 출판사들이 하드 드라이브에 기사를 로드하고 이를 사무실로 가져옴.
     * 3. 아기가 Scholar 출시 기한을 정함. 추수감사절을 앞두고 Alex는 아들 Nicholas의 출생을 기다리고 있었음. 출산 휴가를 앞두고 Scholar를 세상에 내놓기 위해 밤샘 작업을 함.
     * 4. Scholar의 제품 모토는 동료 연구자들에게 경의를 표함. ""거인의 어깨 위에 서 있다""는 모토는 발견의 협력적 본질과 연구자들이 축적된 지식을 쉽게 접근하고 활용할 수 있도록 돕고자 하는 Scholar의 목표를 나타냄.
     * 5. Scholar를 포괄적으로 만드는 것이 목표임. 다양한 언어로 된 수많은 책, 기사, 연구 논문을 포함하는 도서관을 상상해보라. Scholar의 인덱스에는 동료 검토를 거친 온라인 학술 저널과 책, 회의 논문, 학위 논문, 초록, 기술 보고서 등이 포함됨.

  Scholar에서 사용할 수 있는 기능

     * 6. AI 개요로 논문을 효율적으로 검토함. Scholar PDF Reader에 AI 개요를 추가하여 논문을 빠르고 깊이 있게 읽을 수 있도록 함. AI 개요를 통해 주요 포인트를 빠르게 파악하거나 특정 세부 사항을 탐색할 수 있음.
     * 7. Scholar의 ""Case law"" 버튼으로 법률을 탐색함. Google Scholar의 포괄적인 판례 모음을 통해 누구나 자신을 규율하는 법률을 탐색할 수 있음.
     * 8. 원하는 스타일로 기사 인용을 복사함. ""인용"" 버튼을 클릭하여 다양한 형식으로 준비된 인용을 제공함.
     * 9. 연구 이정표를 축하함. Scholar에서는 이정표에 도달한 사용자를 위해 Scholar 홈페이지에 풍선 디스플레이를 제공함.

  Scholar를 최대한 활용하기 위한 도구와 요령

     * 10. 연구 접근성을 확장함. Google Scholar는 전 세계의 도서관 및 출판사와 협력하여 구독 기반 기사를 검색 결과 내에서 직접 접근할 수 있도록 함.
     * 11. 개인 연구 도서관을 만듦. Google Scholar를 통해 기사를 개인 도서관에 저장하고, 맞춤형 폴더를 생성하며, 인터넷 연결이 있는 곳 어디서나 도서관에 접근할 수 있음.
     * 12. 연구 ""슈퍼팬""이 됨. 특정 저자를 팔로우하여 새로운 연구 결과를 쉽게 추적하고 최신 연구 동향을 파악할 수 있음.
     * 13. 팬데믹 동안 더 많은 논문을 읽음. COVID-19로 인해 연구자들이 집에서 작업하게 되었고, Scholar의 오프캠퍼스 접근 프로그램 덕분에 연구를 계속할 수 있었음.

  Google Scholar의 예상치 못한 사용 방법

     * 14. 가족 역사와 재연결할 수 있음. 팀의 전 동료가 Scholar를 통해 40년 전 아버지가 발표한 연구 기사를 재발견함.
     * 15. Scholar에 대한 사랑을 고백하는 사용자들. Scholar는 감사한 학생들로부터 결혼 제안을 받기도 함.

  Google Scholar의 예상치 못한 발견

     * 16. 영화 같은 법률 사건: US v. Syufy Enterprises (1990) 사건에서 판사는 200개 이상의 영화 제목을 의견에 숨겨놓음.
     * 17. 간결한 연구 초록: 두 단어로 된 물리학 초록이 존재함.
     * 18. 물리학에 대한 긍정적인 기여: F.D.C Willard라는 이름의 샴 고양이가 공동 저자로 등록된 논문이 있음.
     * 19. 독특한 연구 조합: COVID-19와 관련된 다양한 주제의 논문이 존재함.
     * 20. 과학적 발견은 마을 전체가 필요함: 힉스 보손 측정에 관한 주요 논문에는 5,000명 이상의 저자가 참여함.

        Hacker News 의견

     * Google Scholar는 Elsevier와 같은 회사들이 학술 검색에서 독점권을 갖지 못하도록 한 점이 가장 큰 성과임
          + 뉴질랜드의 대부분 대학에서는 Elsevier의 Scopus에 색인된 저널에 논문을 게재해야 함
          + CS/ML/AI 분야의 대부분 학자와 학생들은 검색 시 Google Scholar를 먼저 사용함
     * Google Scholar는 ""무료""이지만, 명확한 전략이나 지원이 없는 Google 제품임
          + 개방형 생태계여야 할 곳에 취약한 독점적 의존성을 만듦
          + 학술 커뮤니티에 내재된 위험을 초래함
          + Google Scholar의 arXiv와 같은 대안이 필요함
     * Google Scholar는 학술 커뮤니티에 매우 가치가 있음
          + Google이 이를 폐기할까 두려움
          + 열등한 대안들만 남을 가능성이 있음
     * Google은 전체적으로 불신받고 피해야 하지만, Google Scholar는 인류에게 순수한 이익을 줌
     * 물리학에 대한 긍정적인 기여로 F.D.C Willard(Chester라는 샴 고양이)가 공동 저자로 등재된 논문이 있음
          + 논문은 고체 헬륨-3의 자기적 특성과 극저온에서의 원자 간 상호작용을 탐구함
          + 공동 저자인 Jack H. Hetherington이 논문을 ""우리""라는 복수형으로 작성했기 때문임
     * Google Scholar를 매일 사용하며 훌륭한 자원임
          + Google Scholar와 Zotero를 함께 사용하여 논문 검색과 저장을 완료함
          + Anurag의 성이 잘못 표기되었으나 수정됨
     * Google Scholar는 일반적인 VPS 제공업체에서 VPN을 자체 호스팅하면 접근을 차단함
          + Google 제품이므로 라우팅 테이블에서 특별히 처리할 수 없음
          + 필요가 없어지자 Google Scholar를 다시 사용하는 방법을 배워야 했음
     * 날짜별 정렬을 켜면 해당 연도에 출판된 논문에 필터가 적용됨
          + 이를 변경할 수 없음
     * Google Scholar는 매우 훌륭함
          + 출시 당시 연구를 시작했으며 매우 유용했음
          + 이전에는 어떻게 연구했는지 상상할 수 없음
     * F.D.C. Willard라는 필명으로 Michigan State 물리학 교수의 샴 고양이 Chester가 공동 저자로 등재된 사실을 몰랐음
          + Chester와 공동 저자 지위에 대한 추가 정보 제공
     * 시간이 빠르게 지나감
          + 저자의 아들이 이제 20살이라는 점이 흥미로움
          + 게시물 끝에 Google에 대한 의견이 개선되었는지 묻는 팝업 양식이 흥미로웠음
          + 양식이 점수를 다시 낮추었음
"
"https://news.hada.io/topic?id=17840","미국 법무부(DOJ), 구글의 검색 독점 방지 위한 크롬 매각 추진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 미국 법무부(DOJ), 구글의 검색 독점 방지 위한 크롬 매각 추진

     * 미국 법무부(Department of Justice, DOJ)는 알파벳(Alphabet) 산하 구글이 운영하는 크롬(Chrome) 브라우저를 매각하도록 판사에게 요청할 예정
     * 이는 구글이 검색 시장에서의 불법적 독점을 행했다고 판단한 판결에 따른 조치로, 안드로이드(Android) 운영체제와 인공지능(AI) 관련 조치도 포함될 가능성 있음
     * 메타 판사(Amit Mehta)가 제안된 조치를 수락할 경우, 이는 검색 시장 및 AI 산업에 큰 변화를 가져올 잠재력이 있음

    크롬 브라우저 매각의 이유

     * 크롬은 전 세계적으로 가장 많이 사용되는 브라우저로, 구글 검색 엔진으로의 주요 접근 경로로 작용
     * 크롬 브라우저는 미국 내 브라우저 시장의 약 61%를 점유 (StatCounter 자료 기준)
     * 법무부는 크롬 매각이 경쟁 시장을 형성하는 데 필요하지 않을 경우, 다른 대안 조치를 우선적으로 검토할 계획
     * 안드로이드 운영체제를 매각하도록 강제하는 방안은 제외

    구글의 항소와 후속 조치

     * 메타 판사는 구글이 온라인 검색 및 텍스트 광고 시장에서 반독점법을 위반했다고 판결
     * 구글은 해당 판결에 대해 항소할 계획이며, 최종 판결은 2025년 8월로 예정
     * 법무부는 구글이 검색 엔진 결과와 데이터를 라이선스하도록 요구하고, 웹사이트가 AI 모델 생성에 콘텐츠 사용을 막을 더 많은 선택권을 부여할 것을 제안
     * 구글의 안드로이드 운영체제를 검색, 앱스토어와 같은 다른 제품과 분리하는 방안도 제안
     * 광고주에게 더 많은 데이터 접근권과 제어권을 부여하는 조치도 포함

    AI 기능과 데이터 라이선싱 문제

     * 구글은 검색 결과 상단에 ""AI 오버뷰(AI Overviews)""를 표시, 이는 AI 기반 응답을 제공
     * 웹사이트 운영자들은 AI 오버뷰 기능으로 인해 검색 결과의 하위로 밀려나 트래픽과 광고 수익이 감소한다고 불만 제기
     * 법무부는 구글이 ""클릭 및 쿼리 데이터""를 판매하거나 검색 결과를 별도로 유통하도록 강제하는 방안을 고려
     * 이러한 조치는 경쟁 검색 엔진과 AI 스타트업이 품질을 개선하고 자체 검색 인덱스를 구축할 수 있도록 도움

        Hacker News 의견

     * 정부의 개입이 소비자에게 도움이 되지 않는다는 의견이 있음. Chrome을 사용하는 이유는 Google 제품과의 통합 때문이며, Chrome을 Google에서 분리해도 소비자에게 이익이 없을 것이라는 주장임
          + 정부가 Google의 검색 엔진 데이터를 라이선스화하고 광고주에게 더 많은 정보를 공유하도록 요구하는 것은 다른 기업을 부유하게 할 뿐 소비자에게는 해가 될 것이라는 의견임
          + DOJ가 Google의 비즈니스 모델을 바꾸려는 시도는 시장 조작을 찾고 수정하려는 과도한 개입이라는 주장임
     * Chrome을 구매할 가능성이 있는 대기업이 독점적 권력을 가질 수 있다는 우려가 있음
          + Chrome이 독립적인 비즈니스로 존재할 수 없으며, 소비자에게 더 적대적일 것이라는 의견임
     * Chrome은 Google의 Telemetry가 포함된 Chromium이라는 설명이 있음
          + Google의 생태계와 Telemetry가 이익의 원천이므로, Google이 자체 버전을 유지할 인센티브가 없을 것이라는 의견임
          + Adsense를 Alphabet에서 분리하는 것이 더 나은 해결책일 수 있다는 주장임
     * 독점 기업을 분리하는 것이 시장 경쟁을 촉진하는 데 도움이 될 수 있지만, Chrome의 경우는 다르다는 의견이 있음
          + Chrome은 오픈 소스 Chromium 엔진을 기반으로 하므로 경쟁자가 이를 활용할 수 있는 능력이 이미 존재함
          + 사람들이 Chrome을 선택하는 이유가 다른 대안이 없어서인지, 아니면 자유 시장에서 최선의 선택이라고 느껴서인지에 대한 질문이 제기됨
     * Chrome은 수익을 창출하지 않으며, 이를 구매할 사람은 없을 것이라는 의견이 있음
          + 코드가 대부분 오픈되어 있어 구매할 자산이 없다는 주장임
     * Mozilla가 Chrome을 구매하고, Library of Congress로부터 지원을 받아 공정한 웹 환경을 유지하는 것이 좋다는 의견이 있음
     * Google이 Chrome을 판매한 후 Chromium을 포크하여 새로운 브라우저 ""Magnesium""을 시작할 수 있다는 의견이 있음
     * Chrome의 매각과 이전이 어떻게 이루어질지 상상하기 어렵다는 의견이 있음
          + Chrome은 다양한 도메인에서 개발되는 대규모 프로젝트이며, Google의 광고 독점과 관련 없는 개발을 항상 우선시하지는 않지만 여전히 잘 다듬어진 제품이라는 주장임
          + ""Chromium Foundation""을 설립하여 웹 표준을 발전시키는 것이 좋다는 의견이 있음
          + Google의 ""Search Experience""가 더 깊이 자리 잡은 독점이며, Bing이나 다른 검색 엔진이 대안이 되기 어렵다는 주장임
"
"https://news.hada.io/topic?id=17803","코딩 챌린지 중단 요청","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              코딩 챌린지 중단 요청

     * 비현실적인 코딩 테스트의 문제점
          + 기술 인터뷰에서 비현실적인 코딩 과제를 요구하는 경향이 증가하고 있음.
          + 이러한 과제는 실제 직무와 관련이 없으며, 협업과 지원이 표준인 직장에서의 상황을 반영하지 않음.
          + 예를 들어, 문서화 없이 오래된 코드베이스를 디버깅하는 상황은 직장에서 거의 발생하지 않음.
     * 숨겨진 시간 낭비
          + 기업들은 지원자들이 과제에 투자하는 추가 시간을 간과함.
          + 지원자들은 회사 조사, 직무 요구 사항 학습, 프로젝트 완성에 많은 시간을 투자함.
          + ""4시간"" 과제가 8시간, 10시간 이상으로 늘어날 수 있으며, 이는 직장과 생활을 병행하는 개발자들에게 큰 부담이 됨.
     * 유연성의 신화
          + 많은 기업들이 이러한 테스트를 ""적응력""을 평가하기 위해 필요하다고 주장함.
          + 그러나 이는 루비 개발자에게 PHP를 디버깅하게 하는 것과 같은 비현실적인 요구임.
          + 적응력은 중요하지만, 지원자의 가치를 무관한 도전에 대한 능력으로 평가해서는 안 됨.
     * 기업의 과시인가, 평가인가?
          + 일부 기업들은 이러한 테스트를 통해 ""엘리트"" 기준을 과시하려는 경향이 있음.
          + 이는 ""상위 1%""라는 과장된 사고방식으로, 실제로는 적합하지 않은 평가 방식임.
          + 이러한 방식은 인공적이고 고압적인 상황에서 잘 적응하지 못하는 유능한 지원자들을 배제함.
     * 현실 점검의 필요성
          + 기업들은 이러한 인터뷰 관행이 잘못되었음을 인정해야 함.
          + 직무에 필요한 기술을 테스트해야 하며, 비현실적인 코딩 부트캠프를 요구해서는 안 됨.
          + 채용 과정은 문제 해결, 협업, 관련 분야의 성장에 초점을 맞춰야 함.
          + 비현실적인 기대는 최고의 인재를 끌어들이지 못하며, 오히려 지치게 하고 낙담시킴.
          + 기업들이 적응력 있는 개발자를 원한다면, 장기적인 학습 능력에 초점을 맞춰야 함.
          + 이러한 비현실적인 과제를 제거하고 실제로 중요한 것에 집중하는 것이 더 나은, 포용적인 기술 문화를 조성할 수 있음.

        Hacker News 의견

     * 한 개발자는 문서화가 거의 없는 오래된 C++ 코드베이스를 디버깅하고 유지하는 경험을 자주 한다고 언급함
          + 팀 없이 혼자서 수천 명의 사용자에게 서비스를 제공하는 작은 회사에서 일하는 상황을 설명함
          + 오래된 패치를 복구하거나 코드를 새로 작성해야 하는 경우도 있음
     * 인터뷰에서 문제 해결 능력을 테스트하는 것이 중요하다는 의견에 동의함
          + 주니어 웹 개발자에게 그래프 알고리즘을 요구하는 것은 과도하다고 생각함
          + 시니어 개발자나 아키텍트에게는 깊이 있는 이해가 필요함
     * 한 친구의 파트너가 대형 기술 회사 인터뷰를 준비하며 LeetCode 문제를 연습한 경험을 공유함
          + 시스템 설계 부분이 가장 어려웠다고 언급함
          + 시스템 설계 인터뷰가 스크립트를 따르는 것처럼 보인다고 비판함
     * 작은 스타트업에서 시니어 엔지니어 역할을 위한 인터뷰 과정을 진행한 경험을 공유함
          + 지원자들에게 다양한 인터뷰 방법을 선택할 수 있도록 했으며, 대부분이 takehome 테스트를 선택했다고 설명함
     * 문서화가 없는 오래된 코드베이스를 디버깅하는 것이 일반적이라는 의견을 공유함
          + PHP 애플리케이션을 디버깅하는 것이 유연성을 테스트하는 좋은 방법이라고 생각함
     * 코딩 인터뷰가 소프트웨어 개발 직무에 적합한 후보자를 선별하는 최고의 방법이라고 주장함
          + 기본적인 프로그래밍 능력을 갖추지 못한 사람들은 회사가 다른 후보자를 찾을 것이라고 경고함
     * 문서화가 부족한 코드베이스를 디버깅하는 경험을 매일 한다고 언급함
          + 팀의 절반이 해고되거나 회사를 떠났다고 설명함
     * 코딩 테스트를 실시하지 않은 회사에서의 나쁜 경험을 공유함
          + 다양한 기술 스택을 다루는 팀에서 기본적인 작업을 수행하지 못하는 동료들을 지원해야 했다고 설명함
     * 특정 기술이 필요한 직무에서는 해당 기술을 테스트해야 한다고 주장함
          + 채용 관행을 이해하지 않고 비판하는 것은 비생산적이라고 경고함
     * takehome 과제가 시간이 더 많이 걸릴 수 있으며, 이는 도덕적 위험을 초래할 수 있다고 설명함
          + 시간이 많이 걸리는 과제가 더 많은 자유 시간을 가진 사람들에게 유리하다고 지적함
"
"https://news.hada.io/topic?id=17763","Mac에서 잘 실행되는 우수한 코딩 능력의 LLM Qwen2.5-Coder-32B","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Mac에서 잘 실행되는 우수한 코딩 능력의 LLM Qwen2.5-Coder-32B

     * Alibaba의 Qwen 연구팀에서 오픈 소스 (Apache 2.0 라이선스) LLM 시리즈인 Qwen2.5-Coder를 발표
     * Qwen2.5-Coder-32B-Instruct 모델은 GPT-4o 수준의 코딩 능력을 자랑한다고 주장함
     * 32B 모델은 64GB MacBook Pro M2에서도 구동 가능할 만큼 상대적으로 작은 모델임
     * 벤치마크 성능에서 GPT-4o, Claude 3.5 Sonnet 모델과 비슷하거나 더 높은 점수를 기록함

  벤치마크 성능 비교

     * Qwen2.5-Coder-32B-Instruct 모델이 다음의 벤치마크에서 두각을 나타냄:
          + LiveCodeBench, Spider, BIRD-SQL에서는 GPT-4o 및 Claude 3.5 Sonnet보다 우수한 성능을 기록
          + MBPP, Aider, CodeArena에서는 성능이 약간 뒤처짐
          + HumanEval, McEval에서는 비슷한 수준의 성능을 보임

  Aider 벤치마크에서의 성능

     * Paul Gauthier의 Aider 벤치마크에서도 좋은 성과를 보였음
          + ""Whole edit"" 벤치마크에서 Qwen2.5-Coder-32B-Instruct는 GPT-4o와 3.5 Haiku 사이의 성능을 기록
          + 점수 비교:
               o 3.5 Sonnet: 84%
               o 3.5 Haiku: 75%
               o Qwen2.5-Coder 32B: 74%
               o GPT-4o: 71%
               o Qwen2.5-Coder 14B: 69%
               o Qwen2.5-Coder 7B: 58%
          + ""Diff"" 벤치마크에서는 GPT-4o와 동점, Claude 3.5 Haiku에는 약간 뒤처짐

  Mac에서의 Qwen2.5-Coder 실행 테스트

     * 사용자는 Qwen2.5-Coder-32B-Instruct-GGUF Q8 모델을 llm-gguf를 사용하여 실행 시도했으나, GPU를 사용하지 않아 속도가 느렸음
     * Ollama와 MLX 버전은 MacBook에서 잘 작동함
     * Ollama 설치 방법:
          + ollama pull qwen2.5-coder:32b 명령어로 20GB 크기의 양자화된 파일을 다운로드
          + Python 함수 생성 요청에 대해 ssl 문제를 제외하고는 성공적으로 작동함
     * MLX 사용:
          + Apple Silicon의 MLX 프레임워크를 사용해 성능이 향상됨
          + Mandelbrot 프랙탈 생성 코드를 터미널에서 실행해 ASCII 아트로 표현 성공
          + 성능 지표:
               o 토큰 생성 속도: 10.016 tokens/sec
               o 메모리 사용량: 최대 32.685GB

  추가 테스트: Pelican on a bicycle 벤치마크

     * llm -m qwen2.5-coder:32b 'Generate an SVG of a pelican riding a bicycle' 요청 실행
     * 결과물은 형태가 불분명한 펠리컨과 자전거 SVG 이미지였으나, 사용자 경험 측면에서는 흥미로움

  결론 및 사용자 경험

     * 32GB 메모리 사용량은 Mac에서 실행 가능한 수준으로, 다른 애플리케이션 종료 없이도 사용 가능
     * 속도와 결과 품질 면에서 현존하는 호스팅 모델들과 경쟁할 만한 수준
     * 사용자의 LLM 사용 중 80%가 코드 작성과 관련되므로, Qwen2.5-Coder는 의미 있는 개선이 될 것으로 보임

   코딩 사용자 시나리오랑 조금 다르긴 한데 Claude의 JSON 모드는 어떻게 구현한건지 신기합니다. 몇몇 호스팅 모델들은 JSON 출력을 만들라고 유도해도 주석달린 자바스크립트나 마크다운 텍스트를 만들더라구요. 호스팅 모델 몇 번 써 본 경험으로는 매니지드 서비스를 이용하는게 결과물이 더 만족스러웠었습니다. 호스팅 모델로 구현 불가능한 무언가가 더 있는 것 같습니다
"
"https://news.hada.io/topic?id=17804","월 $2.50 미만으로 Bluesky 파이어호스 소비","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     월 $2.50 미만으로 Bluesky 파이어호스 소비

     * atproto와 Bluesky의 데이터 활용
     * Bluesky의 모든 데이터는 매우 공개적이며, 현재 1,500만 명의 사용자가 있음. 이는 많은 공개 데이터를 제공함.
     * Jetstream을 사용하여 웹소켓 JSON 피드로 실시간 네트워크 활동에 연결할 수 있음. 시작하기 매우 쉽고 재미있음.
     * Firehose 연결
     * Firehose를 브라우저에서 무료로 소비할 수 있음.
     * 작은 앱
     * Firehose에서 모든 삭제 이벤트를 듣고, 삭제된 텍스트를 익명으로 마지막으로 보여주는 앱을 스케치함. 사람들이 삭제를 선택하는 것을 보는 것이 흥미로움.
     * 이 앱은 Fly에서 실행됨:
          + Fly machine, shared-cpu-1x, 256MB RAM: 월 $1.94
          + 2GB Persistent volume: 월 $0.30
     * 앱은 작은 인스턴스에서 잘 작동함.
     * 앱의 기능
     * app.bsky.feed.post 컬렉션에서 새로운 게시물 생성 이벤트를 수신함.
     * 빈 게시물을 필터링하고, 언급과 링크에 대한 수정 적용.
     * Pebbledb에 did+rkey로 키를 설정하여 볼륨에 깨끗한 텍스트 콘텐츠를 캐시함.
     * 48시간 이상 된 저장된 텍스트를 주기적으로 삭제함.
     * 삭제된 게시물 이벤트마다 캐시에서 텍스트를 가져와 현재 관찰자에게 방송함.
     * 더 흥미로운 앱은 이 정도로 축소되지 않을 수 있지만, 일부는 가능함.

        Hacker News 의견

     * BlueSky의 장점으로는 사용자 이름을 웹사이트로 사용할 수 있음과 iOS에서 이미지 복사 및 붙여넣기가 가능함이 있음
          + Ruby 해커 스타터 팩을 제공하며, 다양한 커뮤니티가 존재함
     * bsky firehose는 2005년의 향수를 불러일으키며 재미있음
          + 이를 활용해 재미있는 프로젝트를 진행했음
     * 과거 트위터의 자유로운 개발 환경이 다시 돌아온 것 같음
          + 과거에 트위터에서 봇을 개발해 대회에서 우승한 경험이 있음
     * BlueSky가 X보다 더 나은 이유 중 하나로, 정치적 이슈를 제외하고도 지지할 만한 가치가 있음
          + 다양한 데이터 덤프를 제공하는지 궁금함
     * 과거 트위터의 firehose를 활용했던 경험이 즐거웠으며, 이러한 아이디어가 다시 부활하는 것이 기대됨
     * 새로운 트위터 API 규칙과 비교해 BlueSky의 접근성이 인상적임
     * 트위터가 자동화를 깨고 월 $100를 청구하려 했던 것에 대해 불만이 있음
          + 현재는 $200로 인상되었으며, 이는 자동차 대출금과 비슷한 수준임
     * 이 데이터가 AI/LLM의 훈련 데이터로 사용될 가능성을 느끼고 있음
     * 단어 firehose 데모가 훌륭하며, 창의적인 사람들이 이를 활용해 멋진 작업을 할 수 있을 것 같음
     * 트위터에서 중요한 계정을 운영 중이며, Threads와 BlueSky에 자동으로 게시할 방법을 찾고 있음
"
"https://news.hada.io/topic?id=17779","LLM과 체스에서 발생하는 이상 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LLM과 체스에서 발생하는 이상 현상

     * LLM과 체스의 이상한 현상
          + LLM(대형 언어 모델)이 체스를 잘할 수 있는지에 대한 논의가 있었음. LLM은 언어 예측을 위해 설계되었지만, 체스 게임을 예측할 수 있는 능력을 보여줌.
          + LLM이 체스 게임의 끝까지 진행할 수 있다는 사실이 흥미로웠음. 이는 LLM이 다른 상황에서도 어떻게 작동하는지에 대한 힌트일 수 있음.
     * 내가 한 일
          + LLM에게 체스를 하도록 하기 위해 특정 프롬프트를 사용함. 예를 들어, ""당신은 체스 그랜드마스터입니다. 다음 수를 선택하세요.""라는 식으로 요청함.
          + llama-3.2-3b 모델을 사용하여 50개의 게임을 진행했으나, 결과는 좋지 않았음. 더 큰 모델인 llama-3.1-70b와 llama-3.1-70b-instruct도 시도했으나 여전히 좋지 않았음.
          + gpt-3.5-turbo-instruct 모델은 매우 우수한 성능을 보였음. 그러나 다른 모델들은 모두 좋지 않은 결과를 보였음.
     * 논의
          + 많은 사람들이 LLM을 사용하여 체스를 시도했으나, 대부분의 모델이 좋은 결과를 내지 못함.
          + gpt-3.5-turbo-instruct 모델이 다른 모델보다 체스를 잘하는 이유에 대한 여러 이론이 있음.
          + 추가적인 지시 튜닝이 모델의 성능을 저하시킬 수 있다는 이론이 있음.
     * 가능한 이론
          + 이론 1: 기본 모델이 충분한 규모에서 체스를 할 수 있지만, 지시 튜닝이 이를 방해함.
          + 이론 2: gpt-3.5-instruct가 더 많은 체스 게임으로 훈련되었을 가능성.
          + 이론 3: 다른 변환기 아키텍처의 차이점이 있을 수 있음.
          + 이론 4: 데이터 유형 간의 ""경쟁""이 있을 수 있음.
     * 세부 사항
          + 체스 게임을 위한 표준 대수 표기법을 사용하여 실험을 진행함.
          + OpenAI 모델은 완전한 문법 지원이 없어, 합법적인 수를 생성할 때까지 최대 10번 시도함.
     * 토큰 이상 현상
          + 프롬프트에 공백이 포함되면 모델의 성능이 크게 저하됨. 이는 토크나이저의 문제로 보임.
          + 올바른 방법은 ""토큰 힐링""을 사용하는 것이지만, 이를 쉽게 구현할 방법을 찾지 못함.

        Hacker News 의견

     * OpenAI가 체스를 중요한 기준으로 삼고 gpt-3.5-turbo-instruct에 특별한 처리를 했지만, 후속 모델에는 추가하지 않았다는 가능성을 간과한 것 같음
          + 체스는 지속적인 언론 보도를 생성하지 않았기 때문일 수 있음
     * Q5_K_M 양자화로 모든 오픈 모델을 실행했지만, 이는 모든 매개변수의 손실 압축일 뿐 중요하지 않다고 생각함
     * 교육받은 사람들이 LLM이 체스를 잘할 것이라고 기대하는 이유를 이해하지 못함
          + 체스는 실제 추론과 결정론적 계산이 필요함
     * 좋은 결과가 반복 가능한지 궁금함
          + 과거에 좋은 결과를 얻었지만 다시 재현할 수 없었음
          + 벤처 캐피털의 경제학은 ""속임수""로 여겨지는 기술을 정당화해야 하는 압박을 의미함
     * 정말 지능적인 모델을 원한다면 토큰화를 중단해야 할지도 모른다고 생각함
          + 정보 스트림의 구조를 제한함으로써 모델의 시각과 인식을 제한하고 있음
     * gpt-3.5-turbo-instruct가 체스에서 더 뛰어나다는 실험 결과를 발견함
          + 관련 실험 링크: GPTsChessEloRatingLegalMoves
     * 체스를 배우는 것이 순서를 배우는 것이라면 문제가 발생할 수 있음
          + 현대 체스 엔진은 최소한 모든 플레이어와 무승부를 기록할 수 있음
     * 문제 탐색 공간에서 계산을 늘리는 것을 시도해볼 수 있음
          + 초보 체스 플레이어가 할 수 있는 단계별 지침을 제공하여 다양한 매개변수를 조정할 수 있음
     * GPT-3.5-instruct가 전통적인 체스 엔진을 호출하여 체스를 플레이할 수 있다는 이론이 있음
     * 다양한 인간 경험에서 다양한 유형의 기술과 지능이 존재함을 알고 있음
          + 모델이 체스를 잘하는 것은 우연히 적절한 '연결체'를 가졌기 때문일 수 있음
"
"https://news.hada.io/topic?id=17848","Show GN: diary.sh - 나와 AI의 교환일기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: diary.sh - 나와 AI의 교환일기

   기능
     * 애플 저널 앱에서 영감을 얻은 간단한 UI의 일기장 웹사이트
     * 내가 일기를 쓰면 AI도 답장을 써줌

   프라이버시
     * 일기는 암호화되어 전송 (encryption in transit) 되고 저장됨 (encryption at rest)
     * 일기장 내용은 AI 학습에 사용되지 않음
     * 구글 애널리틱스 등 3자 쿠키를 사용한 사용자 행동분석을 하지 않음

   오 재미있는 아이디어네요! 개인 프로젝트로 진행하고 계신가요?

   네 :) 돈을 버는 게 목표는 아니고, 개인적으로 만족할 수 있는 간단한 제품을 생각하고 만들었어요.

   재미있네요! 'ㅁ 'b

   감사합니다 'ㅁ'b!
"
"https://news.hada.io/topic?id=17834","시각장애인이 아니라는 이유로 hCaptcha 접근성 계정에서 차단된 사건 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            시각장애인이 아니라는 이유로 hCaptcha 접근성 계정에서 차단된 사건 (2023)

  나는 시각장애인이 아니라는 이유로 hCaptcha 접근성 계정에서 차단당했음

     * hCaptcha의 접근성 문제
          + hCaptcha는 시각장애인을 위한 오디오 캡차를 제공하지 않음. 이는 봇이 쉽게 통과할 수 없도록 하기 위함임.
          + 대신 시각장애인을 위한 특별 계정을 제공하여 쿠키를 통해 캡차를 통과할 수 있도록 함.
          + 이러한 접근성 우회책이 신뢰할 수 있는지에 대한 의문을 제기함.
     * 브라우저 호환성 문제
          + Brave 브라우저에서 hCaptcha의 접근성 계정 쿠키가 설정되지 않는 문제를 겪음.
          + Firefox, Chromium 등 다른 브라우저에서는 정상 작동함.
          + 지원팀에 문의했으나 문제 해결에 실패함.
     * 계정 차단 사건
          + 지원팀과의 대화 중, 다른 지원 담당자로부터 계정이 차단되었다는 통보를 받음.
          + 시각장애인이 아니라는 이유로 접근성 계정을 사용할 수 없다는 설명을 받음.
          + 실제로 시각장애인임을 설명했으나 계정 차단은 유지됨.
     * 경고와 결론
          + 의도적으로 접근성을 제한하는 시스템에 의존하는 것은 위험하다는 경고를 전달함.
          + hCaptcha의 접근성 문제를 해결하기 위해 자동화된 프로그램을 사용해야 하는 아이러니한 상황을 설명함.
          + hCaptcha를 사용하는 웹마스터들에게 이 문제를 알릴 것을 권장함.
          + Cloudflare가 hCaptcha를 더 이상 사용하지 않는다는 소식을 전하며 긍정적으로 평가함.
     * 마무리
          + 이 경험을 공유하며, 향후 블로그 게시물 작성에 대한 의지를 밝힘.

        Hacker News 의견

     * 한 사용자는 hCaptcha의 사용자 경험이 끔찍하며, 특히 시각 장애인에게는 접근성이 부족하다고 언급함. 봇이 더 쉽게 해결할 수 있는 문제라고 주장함
          + hCaptcha의 쿠키 만료로 인해 이메일을 통해 쿠키를 설정해야 하는 번거로움이 있음
          + 제3세계 노동자에게 저렴한 비용으로 캡차를 해결하도록 아웃소싱할 수 있음
     * 일부 캡차는 차별적이며, 모든 사용자가 서구에 살고 있는 것이 아니므로 물체를 식별하기 어려울 수 있음
          + 예를 들어, 'conoids'라는 모양을 선택하라는 요청을 받았을 때 많은 사람들이 이해하지 못할 것임
     * hCaptcha가 시각 장애인에게 무례하고 근거 없는 거짓말을 했다는 기사가 문제의 심각성을 축소하고 있음
          + Google과 경쟁할 때 사용자에게 더 무례하게 대하지 말아야 한다는 교훈을 제시함
     * hCaptcha가 접근성 문제를 만들어 시각 장애인의 웹사이트 접근을 차단하고 있음
          + ADA(미국 장애인법)와 관련된 문제일 수 있음
     * CAPTCHA 실험이 곧 끝나기를 바라는 의견이 있음
          + 전화 인증도 문제지만, 스팸 비용을 약간 증가시킴
          + 스팸과 악의적인 트래픽 문제 해결이 어려울 것임
     * 접근성 옵션이 실제로 사용되도록 의도되지 않았다는 의견이 있음
          + 정부나 대기업은 접근성을 요구하지만, 실제로는 사용되지 않는 경우가 많음
     * 시각 장애인으로서 hCaptcha가 현재 가능한 최선의 해결책이라고 믿음
          + 오디오 캡차는 청각 문제나 지원 언어가 적은 사람들에게 효과적이지 않음
          + 텍스트 캡차는 LLMs로 쉽게 해결 가능함
     * Google의 ReCaptcha는 대부분의 사용자에게 도전 과제가 없지만, 이는 Google의 사용자 추적 덕분임
          + 캡차를 사용하지 않으면 스팸 광고, 신용카드 사기 증가 등의 문제가 발생할 수 있음
     * 캡차의 존재 이유에 대한 의문을 제기함
          + 자동화 및 스크래핑을 허용하면 시스템을 존중해야 하며, 방문자의 개인정보를 노출하지 않을 수 있음
"
"https://news.hada.io/topic?id=17828",""확장되지 않는 일"을 통해 이기는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ""확장되지 않는 일""을 통해 이기는 방법

     * Paul Graham이 2013년에 쓴 ""Do things that don't scale""에서 소프트웨어 회사가 가치있는 이유는 확장성 때문이지만, 역설적이게도 회사를 성장시키기 위해선 확장성이 없는 일을 해야 한다고 주장함
          + 예: Airbnb가 호스트 모집을 위해 door-to-door 영업
     * 확장성 없는 전략은 더 빠르게 움직일 수 있게 하고, 로컬 시장에서 이길 수 있게 하며, 고객을 감동시킬 수 있고, 탁월함을 유지할 수 있음
     * ""Unscalable""한 전략이 스타트업 초기에만 유용한 것이 아니라 기업의 어느 단계에서나 경쟁 우위를 만들어 낼 수 있음
     * 반대로 무조건 효율성만 추구하다 보면 회사를 특별하게 만드는 요소를 잃어버릴 수 있음

더 빠르게 움직이기

     * Uber의 초기 5-10년간 성장과 시장 점유율 확보에 가장 큰 초점을 맞춤
     * 제품팀이 필요한 기능을 만드는 속도를 따라잡지 못했기에 운영팀이 효율적이진 않지만 민첩한 솔루션을 만들어냄
     * 예: UberEats에서는 운영팀이 수동으로 geofence를 그리고 인센티브를 설정하는 임시방편을 사용해 문제 해결
     * Deel, Airbnb 등 다른 하이퍼그로스 기업들도 초반에는 비효율적이지만 빠른 운영 중심 프로세스에 의존함
     * 궁극적으론 자동화가 필요하지만 너무 일찍 하면 성장에 집중하는 경쟁사에 뒤쳐질 수 있음

로컬 시장 제패

     * Uber는 규모를 위해 모든 국가에 동일한 US 중심적 제품 경험을 제공했지만, 이는 현지화된 경쟁사에 기회를 줌
     * Grab은 각 시장에 맞게 이동수단, 결제방식, 알고리즘, 온보딩 등을 맞춤화해 Uber의 시장점유율을 빼앗고 인수함
     * Netflix도 현지 콘텐츠 제작과 더빙/자막 제공에 많은 비용을 들여 유럽 등 파편화된 시장에서 성공함

고객 감동

     * Zappos는 10시간 통화사례처럼 고객 한명한명에 시간을 쏟아 기대 이상의 만족을 주는 것으로 유명함. 75%가 재구매 고객
     * BI 툴 Looker는 ""Department of Customer Love""팀이 고객사가 데이터모델 구축시 직접 도움. 구글 인수후 아웃소싱되며 차별화 요소 상실
     * Rippling CEO는 트위터/이메일로 직접 고객 문제 해결. 규모는 안나가지만 강력한 입소문 효과

우수성 유지

     * 규모가 커질수록 모든 것의 기준을 높게 유지하기 어려워짐. 이를 막기 위한 방법:
         1. Dogfooding - Uber 직원들은 직접 배달, Rippling CEO는 자사 급여 관리 담당, Meta 게임 VP는 직접 수백개 게임 플레이
         2. 중요한 주제에 파고들기 - 저커버그는 전략적 방향성부터 1px까지 세세한 부분에 관여. 모든 것을 다 할순 없지만 가장 중요한 1-2개 주제엔 불균형할 정도로 시간 투자

결론

     * ""Doing things that don't scale""은 초기 스타트업만을 위한 것이 아님
     * 오히려 직원이 수백명이고 매출이 수천만불 되는 기업도 더 빠르게 움직일 수 있게 해줌
     * 어떤 기업에게는 확장성 없는 전략이 오래가는 경쟁 우위로 작용함
     * AI 발전으로 사람의 손길이 더욱 차별화 요소가 될 것임. 효율화와 자동화를 위해 기업을 특별하게 만드는 것을 포기하지 말아야 함

   인터넷 초창기때는 블루오션이라 스케일업될만한 분야가 많았는데,
   이제는 다 차있어서 누가 고객과 더욱 더 많이 만나냐가 더 중요한것같습니다.

   쉬운길에는 지뢰가 있다는 말과 통하는 부분이 있는 것 같네요.
   가볍게 더 많은 고객에게 다가가기 vs 적은 고객이지만 진지하게 대하기 로 이야기되는 것 같기도 하고,
   대부분 후자의 전략이 어렵고 선택하기 힘든 길인 것 같습니다.
"
"https://news.hada.io/topic?id=17769","Maxun - 오픈소스 노-코드 웹 데이터 추출 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Maxun - 오픈소스 노-코드 웹 데이터 추출 플랫폼

     * 2분만에 로봇을 훈련시켜서 Auto-Pilot으로 웹을 스크랩 가능
     * 동작 방식
          + 사용자 동작을 에뮬레이션하고 데이터를 추출하는 맞춤형 로봇을 작성
          + 로봇은 리스트 캡처, 텍스트 캡처, 스크린샷 캡처 등 모든 작업을 수행
          + 로봇이 생성되면 수동 개입없이도 계속 데이터를 추출함
     * BYOP(Bring Your Own Proxy)로 anti-bot 방지를 바이패스 가능
     * 제공 기능
          + 노코드로 데이터 추출
          + 페이지네이션 & 스크롤 처리
          + 스케줄에 따른 로봇 실행
          + 웹사이트를 API 또는 Spreadsheet 로 변환
          + 추가 예정 : 웹사이트 레이아웃 변경 대응, 2FA 로그인 지원

   와우,, 2fa 자동화만 해도 매력적
"
"https://news.hada.io/topic?id=17864","pgrx - Rust로 PostgreSQL 확장을 개발하는 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 pgrx - Rust로 PostgreSQL 확장을 개발하는 프레임워크

     * Rust로 PostgreSQL 확장을 개발 가능, 최대한 Idiomatic & Safe 하기 위해 노력
     * cargo-pgrx 로 완전 관리되는 개발 환경 지원
          + cargo pgrx new: 새로운 확장 생성
          + cargo pgrx init: PostgreSQL 설치 등록 및 관리
          + cargo pgrx run: 확장 실행 및 테스트
          + cargo pgrx test: 여러 PostgreSQL 버전에서 테스트
          + cargo pgrx package: 확장 설치 패키지 생성
     * 다중 PostgreSQL 버전 지원
          + PostgreSQL 12부터 17까지 지원
          + Rust 피쳐 게이팅을 통해 버전별 API를 선택적으로 사용 가능
          + 모든 버전에 대해 통합 테스트 가능
     * 자동 스키마 생성
          + Rust만으로 확장 구현 가능
          + 많은 Rust Type들을 PostgreSQL용으로 자동 매핑
          + SQL 스키마를 자동으로 생성하거나 cargo pgrx schema로 수동 생성 가능
          + extension_sql! 및 extension_sql_file! 매크로를 통해 커스텀 SQL 포함 가능
     * 안전성 우선
          + Rust의 panic!이 PostgreSQL ERROR로 번역되어 프로세스가 아닌 트랜잭션만 중단
          + Rust 메모리 관리 모델 유지 - panic! 및 elog(ERROR) 에서도
          + #[pg_guard] 매크로로 Rust와 PostgreSQL의 안정적 연동 지원
          + Postgres Datum은 Option<T> where T: FromDatum
          + NULL Datum은 안전하게 Option::<T>::None로 표현됨
     * First-class UDF support
          + #[pg_extern] 어노테이션으로 Rust 함수(Postgres 사용자 정의 함수)를 PostgreSQL에 노출 가능
          + #[pg_trigger] 로 트리거 함수 생성
     * 사용자 정의 타입 지원
          + #[derive(PostgresType)] 로 Rust 구조체를 PostgreSQL 타입으로 사용:
               o 메모리/디스크 상에서는 CBOR로 인코딩되고, 사람이 읽을 수 있는 형태로는 JSON으로 표현
               o 커스텀 메모리/디스크/JSON 표현 방식 정의 가능
               o #[derive(PostgresEnum)] 로 Rust Enum을 PostgreSQL enum으로 사용:
               o pgrx::composite_type!(""Sample"") 매크로를 통해 복합 타입 지원
     * 서버 프로그래밍 인터페이스 (SPI)
          + SPI에 안전하게 접근 가능
          + SPI 컨텍스트에서 소유된 Datum을 투명하게 반환 가능
     * 고급 기능
          + pgrx::PgMemoryContexts 를 통해 Postgres의 MemoryContext 시스템에 안전하게 액세스
          + Executor/planner/transaction/subtransaction 후크
          + Rust의 unsafe를 활용하여 pgrx::pg_sys를 통해 PostgreSQL 내부 기능 접근 가능
     * 한계 및 알려진 문제
          + 멀티스레딩 미지원: Postgres는 기본적으로 단일 스레드 기반이며, 스레드가 Postgres 함수에 접근할 경우 충돌 가능
          + 비동기 지원 미완성: async 문맥에서 Postgres와의 상호작용 연구가 부족함
          + Windows 지원 부족: 현재 Windows에서 완벽히 작동하지 않음
          + UTF-8 인코딩 필수: Postgres 데이터베이스가 UTF-8 호환되지 않으면 에러 발생 가능

   pgrx는 pgx에서 이름을 바꾼 것 같네요.
   비슷한 프로젝트로는 sqlite의 sqlite-loadable-rs가 있습니다.

   pglite-fusion - PostgreSQL 테이블에 SQLite 임베딩하기 여기서 pgrx 를 썼다고 해서 찾아봤습니다.
"
"https://news.hada.io/topic?id=17735","규제 잠금 우회, AirPods 및 패러데이 케이지 해킹","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    규제 잠금 우회, AirPods 및 패러데이 케이지 해킹

    규제 잠금 우회, 패러데이 케이지 및 청력 업그레이드

     * Apple의 규제 제한 우회: Apple의 iOS 18.1 업데이트 후, AirPods Pro 2의 청력 보조 기능이 특정 국가에만 제한되어 있어, 이를 우회하기 위한 방법을 찾기 시작함. 이는 주로 지역 잠금 기능을 우회하는 방법을 배우고, 패러데이 케이지를 구축하며, 주변 사람들의 조부모를 위한 청력 보조 기능을 활성화하기 위한 캠프를 운영하는 과정이었음.
     * 청력 보조 기기에 대한 정보: 청력 보조 기기는 보통 ₹50,000에서 ₹8L 이상까지 비용이 들며, Apple의 청력 보조 기능은 최대 60dbHL까지 회복 가능하다고 광고됨. 이는 시장에서 저렴한 옵션으로 작용함.
     * 지리적 제한: AirPods Pro 2와 iOS 18.1 이상을 사용하는 경우, 특정 국가에서만 청력 보조 기능을 사용할 수 있음. 이 기능은 주로 IP 위치, Apple 스토어 지역, 기기 로케일/시간대/언어를 통해 위치를 확인함.
     * 기기의 위치 확인 방법: iOS 기기는 위치를 확인하기 위해 여러 가지 방법을 사용함. IP 위치를 기반으로 한 GET 요청, Apple 스토어 지역, GPS 신호 기반 위치, MCC/MNC 기반 위치 결정 등이 있음.
     * 우회 시도: iPad 10세대에서 지역과 로케일을 변경하고, 네트워크 트래픽을 프록시하여 미국으로 위치를 속이는 시도를 했으나 실패함. 인증서 고정 문제로 인해 Apple 서버에 연결할 수 없었음.
     * 문제 해결 과정: Lagrange Point에서 문제를 해결하기 위해 모였으며, 인증서 고정과 Xcode의 위치 시뮬레이션이 제대로 작동하지 않는 것을 발견함. locationd에서 AllowSimulatedLocation 설정이 0으로 되어 있어, Xcode의 도구로는 기능을 활성화할 수 없었음.
     * 지리적 위치: WiFi SSID와 MAC 주소를 사용하여 위치를 삼각 측량하는 방법을 사용하여 iOS를 속이기로 결정함. ESP32를 사용하여 WiFi SSID를 빠르게 순환시키는 방법을 사용함.
     * 패러데이 케이지 및 WiFi 재머: 알루미늄 호일로 감싼 상자를 사용하여 패러데이 케이지를 만들고, 전자레인지를 사용하여 주변 네트워크 신호를 차단함. iPad를 케이지 안에 넣고 5분 후에 재부팅하여 위치를 미국으로 속이는 데 성공함.
     * 대량 잠금 해제: 이 기능을 인도에서 사용할 수 있도록 하기 위해 Lagrange Point에서 캠프를 운영할 계획임. AirPods를 청력 보조 기기로 사용할 수 있도록 지원할 예정임.
     * 기타 참고 사항: 청력 보조 기능은 AirPods의 투명 모드를 대체하는 이퀄라이저 프리셋으로 작동함. 기능이 활성화되면 iCloud 계정에 동기화되어 다른 기기에서도 사용할 수 있음.
     * 감사 및 인사: 기기 위치 확인 과정을 설명해준 Raghav Toshniwal, 테스트를 견뎌준 조부모님, AirPods를 구매해준 Rithwik의 아버지에게 감사의 인사를 전함.

        Hacker News 의견

     * 인도에서 보청기의 가격은 ₹ 50,000에서 ₹ 8L까지 다양함. ₹ 8L는 ₹ 800,000을 의미하며, 이는 현재 환율로 $600에서 $9,500에 해당함
     * AirPods Pro 2의 가격은 ₹ 24,900 ($295)임
     * AirPods의 보청기 기능은 실제로는 이퀄라이저 프리셋으로, 투명 모드를 대체함
     * Apple이 이 기능을 ""보청기""로 마케팅하지 않았다면 규제 문제를 피할 수 있었을 것임. 이는 큰 마케팅 위험을 감수한 것일 수 있음
     * 저렴한 TWS에서도 강력한 처리 능력과 유연성을 제공함. 오픈 소스 펌웨어를 광고하는 TWS는 아직 없지만, 중국 및 러시아 커뮤니티에서 커스터마이징 작업이 진행 중임
     * Rithwik는 기사 작성자 중 한 명이며, 질문에 답변할 준비가 되어 있음
     * 기능이 일정 시간 후에 초기화되는지, 아니면 한 번 설정하면 끝인지에 대한 우려가 있음
     * 인증서 고정 문제는 프록시/VPN으로 쉽게 해결할 수 있음. 파라데이 케이지는 흥미로운 방법임
     * 기존의 접근성/헤드폰 조정의 맞춤형 투명 모드와 다른지에 대한 질문이 있음. 건강 앱에 저장된 오디오그램을 사용할 수 있음
     * EU 특정 기능을 얻기 위해 사용할 수 있는지에 대한 질문이 있음
     * i3Detroit에서 파라데이 케이지를 제작 중이며, 다양한 재미있는 용도로 사용할 수 있음
          + 강력한 송신기 근처에서 RF 측정을 더 쉽게 할 수 있음
          + 와이파이, 블루투스 등 무선 디버깅을 더 효율적으로 할 수 있음
          + 1G 또는 2G 셀룰러 네트워크를 스펙트럼 라이선스 걱정 없이 사용할 수 있음
          + GPS 스푸핑 등 재미있는 실험을 책임감 있게 할 수 있음
     * AirPods를 Android와 함께 사용할 때 보청기 기능이 사용 가능한지에 대한 질문이 있음
"
"https://news.hada.io/topic?id=17818","YC의 칩 설계를 위한 LLMs에 대한 잘못된 평가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      YC의 칩 설계를 위한 LLMs에 대한 잘못된 평가

    YC는 칩 설계에 대한 LLMs에 대해 잘못 이해하고 있음

     * YC는 최근 스타트업 요청에서 칩 설계에 LLMs를 활용하는 방안을 제안했음. 그러나 이 제안은 칩 설계의 주요 과제를 잘못 이해한 것으로 보임. LLMs는 때때로 Verilog 코드를 작성할 수 있지만, 성능은 여전히 인간보다 낮음. 특히, LLMs는 새로운 칩 아키텍처를 설계할 수 없으며, 이는 현대 가속기 칩의 성능 향상의 주요 원동력임.

    고급 합성, 다시 한 번

     * 고급 합성(HLS)은 1998년에 시작되었으며, Forte Design Systems가 Cynthesizer라는 도구를 개발했음. 이 도구는 SystemC를 Verilog로 자동 변환할 수 있었음. 그러나 HLS는 칩 설계에서 크게 성공하지 못했음. Xilinx(현재 AMD)는 FPGA 가속을 목표로 HLS를 지지했지만, HLS 도구의 성능은 여전히 제한적임.

    LLMs가 어떤 새로운 가속기를 만들 수 있을까?

     * HLS 도구는 고가치, 대량 칩에서는 성공하지 못했음. LLMs도 비슷한 도전에 직면할 가능성이 큼. 그러나 LLMs는 실리콘 전문 지식이 없는 엔지니어가 하드웨어 가속을 활용할 수 있도록 도와줄 수 있음. 예를 들어, 유전체학 및 CFD 작업의 FPGA 가속에서 성공을 거두었음.

    LLMs가 칩 설계에서 할 수 있는 일

     * LLMs는 칩 설계 비용을 줄일 수 있지만, 주로 저가치 시장을 대상으로 함. 그러나 칩 설계에서 검증 인력 부족 문제를 해결하는 데 LLMs가 유용할 수 있음. 검증 엔지니어는 설계자보다 두 배 더 필요하지만, 현재 좋은 검증 엔지니어를 찾기 어려움. LLMs가 검증을 더 빠르고 쉽게 만들 수 있다면, 이는 반도체 회사에 큰 가치를 제공할 수 있음.
     * 궁극적으로 LLMs는 칩 설계를 더 저렴하게 만들 것임. 그러나 이는 주로 대형 반도체 회사, 전통적인 칩 스타트업, LLM 기반 도구를 판매하는 EDA 소프트웨어 스타트업에 이익을 줄 것임. LLMs는 100배 더 나은 칩을 만들거나 하드웨어 가속이 부족한 시장을 공략하는 데 도움을 주지 않을 것임.

        Hacker News 의견

     * LLMs는 EDA 분야에서 아직 갈 길이 멀다는 의견이 있음
          + LLMs가 회로 설계 문제를 잘못 이해하고 계산도 틀리게 함
          + AI 도구가 회로를 이해하는 데 도움을 주지만, 일부 기능을 놓침
          + 전문화된 도구가 필요함
     * LLMs는 아이디어 생성과 학습 단계에서는 유용할 수 있음
          + 복잡한 시스템의 핵심에 LLMs를 사용하는 것은 신뢰성 문제를 야기할 수 있음
     * Qualcomm DSP 아키텍처 팀에서 일한 경험이 있는 사람의 의견
          + 칩 설계에서 많은 시간이 문서 작성과 질문 답변에 사용됨
          + LLMs가 이러한 작업을 더 빠르게 할 수 있도록 도와줄 수 있음
     * Silogy에서 AI 에이전트를 사용하여 테스트 디버깅을 개선하려는 시도
          + 코드와 로그를 분석하고 엔지니어의 피드백을 반영하여 가설을 개선함
     * LLMs를 칩 설계에 적용하는 것은 쉽지 않다는 의견
          + 시장이 작거나 칩이 중요할 때 LLMs의 효과가 제한적임
          + 칩 설계는 소프트웨어와 달리 해커가 쉽게 접근할 수 없는 분야임
     * 칩 설계에 AI를 적용하는 것이 복잡하다는 의견에 대한 반론
          + LLMs가 미래에 더 성능이 향상될 것이라는 기대가 있음
          + 디지털 아트와 음악 분야에서 LLMs의 발전 사례를 언급함
     * YC가 AI에 투자하는 방식에 대한 비판
          + LLMs를 칩 설계에 사용하는 것이 기술적으로 타당하지 않다는 의견
          + YC의 목표는 혁신보다는 수익 창출에 있다는 비판
     * LLMs가 ASIC 설계에 아직 준비되지 않았다는 의견
          + von Neumann 아키텍처의 비효율성을 지적하며 새로운 접근법을 제안함
          + 일반적인 솔루션으로 컴퓨팅을 가속화할 수 있는 방법을 제안함
     * 30년간 칩 설계 경험이 있는 사람의 의견
          + AI를 사용하여 설계 흐름을 자동화하는 시도가 있음
          + 고수준 합성 도구가 실제 칩 설계에 거의 사용되지 않음
"
"https://news.hada.io/topic?id=17765","Docker Compose로는 충분하지 않습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Docker Compose로는 충분하지 않습니다

     * docker-compose는 Docker 컨테이너를 다루는 도구로, 복잡한 애플리케이션 배포 문제를 해결하지만 대중 시장을 위한 간단한 셀프 호스팅에는 충분하지 않음
     * SQL 데이터베이스, 로컬 캐시, 내구성 있는 저장소, 서비스 발견, 자원 관리 개념을 포함한 더 높은 수준의 추상화가 필요함

  Docker의 역할

     * Docker는 컨테이너화를 대중화한 도구로, 호스트 시스템을 배로 비유할 수 있음.
     * 하드웨어와 운영 체제, 컨테이너 런타임이 있으며, 컨테이너는 런타임 내에서 실행되고 데이터베이스나 웹 서버 같은 다른 서비스와 통신함.

  Docker-compose의 역할

     * docker-compose는 함께 작동하는 컨테이너 그룹을 지정하는 도구로, 셀프 호스팅 애플리케이션 배포를 쉽게 해줌.
     * 그러나 표준화된 인터페이스를 깨고 컨테이너가 원래 해결했던 문제를 재현함.
     * 예시: Pihole
          + Pihole은 DNS 서버로, 복잡한 docker-compose 파일을 필요로 함.
          + 컨테이너 이름, 이미지, 포트, 환경 변수, 볼륨, 추가 기능, 재시작 정책 등을 설정해야 함.
          + 복잡한 설정은 사용자가 직접 관리해야 하며, 이는 Docker Compose의 단점
     * 예시: Jitsi Meet
          + Jitsi Meet는 복잡한 소프트웨어로, 4개의 컨테이너, 7개의 볼륨, 9개의 포트, 200개 이상의 환경 설정을 포함한 docker-compose 구성을 생성함.
     * 예시: 다른 인기 있는 셀프 호스팅 애플리케이션들도 유사한 문제를 겪음
          + Authentik, Nextcloud, Immich, Jellyfin, Paperless NGX 등 다양한 애플리케이션이 있으며, 각각의 docker-compose 구성은 수십에서 수백 개의 docker 명령을 대체함.
          + 각 애플리케이션은 자체적인 데이터베이스, 캐시, HTTP 핸들러를 포함할 수 있으며, 이는 중복된 자원 사용으로 이어짐.

  문제점

     * docker-compose는 너무 유연하고 세부적이며 잘못된 추상화 계층에서 작동함.
     * 각 애플리케이션은 HTTP 처리 프로세스, 캐시 또는 데이터베이스를 가짐. 데이터베이스 백업은 시스템 운영자의 몫임.
     * 예시: Reverse HTTP 프록시
          + Reverse HTTP 프록시는 들어오는 HTTP 요청을 다른 프로그램으로 전달하는 프로그램임. 각 프로그램은 웹 서버를 포함할지 여부를 결정해야 함.
          + 웹 서버 포함
               o 웹 서버를 포함하면 프로그램이 작동하지만, 특정 포트에서만 작동하며, 여러 컨테이너가 있을 경우 포트를 재매핑해야 함.
          + 웹 서버 미포함
               o 웹 서버를 포함하지 않으면 리소스를 낭비하지 않지만, 관리 인터페이스 없이 애플리케이션을 구성해야 함.
          + DNS
               o 웹 인터페이스는 주소를 가지며, TLS를 원할 경우 이름이 필요함. 여러 서비스를 단일 호스트에서 실행할 경우 도메인 이름이나 경로로 요청을 라우팅해야 함.
          + 포트
               o docker-compose는 포트 노출과 재매핑을 허용하지만, 실제로는 복잡한 네트워킹 설정을 지원해야 함.
     * 예시: 데이터베이스
          + 데이터베이스는 컨테이너가 삭제될 때 모든 파일 변경 사항이 삭제됨. 데이터베이스 컨테이너는 데이터베이스 내용을 저장하기 위해 볼륨을 추가해야 함.
          + N+1=2 또는 그 이상
               o 데이터베이스를 백업하려면 오프사이트 백업이 필요함. 각 서비스가 별도의 데이터베이스 서버 프로세스를 번들로 제공하면 컴퓨팅 리소스를 낭비함.

  해결책

     * 더 높은 추상화 계층으로 이동하여 데이터베이스, 리버스 웹 프록시, 캐시, 정적 웹 자산 등의 컨테이너 유형을 구분하는 의미론을 추가함.
     * 의미론의 예
          + 새로운 구성 형식을 도입하여 애플리케이션 이름, 빌드, HTTPS 역방향 프록시, 캐시 서비스를 지정함.
     * 해결책 #1
          + 각 프로그램이 역방향 프록시를 요청하고, 중복과 낭비를 방지함. 역방향 프록시는 DNS 이름을 제공하고, 모든 경로를 프로그램으로 전달함.
     * 해결책 #1.5
          + 데이터베이스 섹션을 추가하여 SQL 표준을 준수하는 데이터베이스를 요청하고, 프로그램이 ""전체"" 권한을 기대함.
     * 포트에 대한 해결책
          + 각 프로그램은 자체 IPv6 주소를 받아 표준 포트 번호를 사용할 수 있음. 보안을 위해 방화벽을 사용하여 역방향 프록시만 포트에 접근하도록 함.

  Tealok - 새로운 컨테이너 런타임

     * Tealok은 더 높은 추상화와 표준화된 인터페이스를 제공하는 새로운 컨테이너 런타임임.
          + TLS 인증서, 리버스 프록시 설정, DNS 기록, 백업 관리 등을 자동으로 처리함.
          + IPv6를 활용하여 각 컨테이너가 독립적인 IP 주소를 가지며, 표준 포트 번호를 사용할 수 있음.
          + 애플리케이션 개발자는 복잡한 설정 없이 표준 인터페이스를 통해 애플리케이션을 배포 가능함.
     * 운영자에게는 일관된 모범 사례 제공, 리소스 낭비 감소, 관리 부담 완화.
     * 개발자에게는 배포 방식의 단순화와 결정 부담 감소.
     * 사용자는 데이터 소유권과 클라우드 컴퓨팅의 독립성을 보장받을 수 있음.

   tealok 들어가서 보니까 대안이 될만한 상태가 아닌데요?

   런타임도 제거해 줬으면 참 좋았을텐데요

   아직도 docker-compose를 이용해서 운영 상황을 만들어서 들어가는 것은 필요하다 생각하지만...

   자신만의 특수한 환경에서한 경험을 바탕으로 그것이 잘못이니 새로운걸 만들었어요.. 라는 것은 동의하기 힘드네요.. ㅎㅎㅎㅎ

   자칫 오해할 수 있는 내용이네요 ㅎㅎㅎㅎㅎ...

   제목만 보고 '엇 개발환경에서 사용하는거 정말 마음에 안들지....' 라는 생각이었던지라.. ㅎㅎㅎ

   docker compose를 본문과 같은 용도로 사용하려는게 애초에 잘못된 접근이라는 생각이 듭니다

   말씀에 일부 동의는 합니다만, 접근이 잘못되지는 않았다고 생각합니다.
   그들이 할 수 있는 환경에서는 최선이었을꺼에요 :)

        Hacker News 의견

     * 포트 매핑과 데이터 볼륨 백업 문제에 대한 간단한 해결책이 존재함
          + 개발 환경을 위한 별도의 docker-compose 파일을 사용하여 환경별로 설정을 다르게 정의할 수 있음
          + 백업을 위한 간단한 Bash 스크립트를 작성하여 S3에 업로드할 수 있음
     * 개인 서버에서 Docker를 사용하여 셀프 호스팅하는 사람으로서, Docker 설정의 자유로움을 긍정적으로 평가함
          + 초기 설정은 시간이 걸렸지만, 이후에는 쉽게 관리할 수 있게 됨
          + 새로운 서비스를 추가하는 데 시간이 거의 걸리지 않으며, 보안을 위해 각 서비스에 비루트 사용자를 생성함
          + macvlan 네트워크를 사용하여 각 컨테이너에 고유한 IP와 MAC 주소를 할당함
          + Nginx Proxy Manager를 사용하여 리버스 프록시를 관리하며, 데이터베이스로 여러 인스턴스를 실행해도 문제가 없음
     * docker-compose는 주로 개발 또는 개인 용도로 사용되며, V2는 V1과 다르게 Docker에 통합된 플러그인임
     * 프로덕션 환경에서는 Kubernetes를 사용하는 것이 좋으며, docker-compose는 로컬 개발에 적합함
     * docker-compose는 소규모 셀프 호스팅을 위한 제품으로, 기술적 배경이 없는 사람들을 대상으로 함
          + TOML로 전환한다고 해서 셀프 호스팅이 쉬워질 것이라는 점에 회의적임
     * Docker를 제어하는 프로그램을 작성하는 것은 생각보다 간단하며, Python 스크립트를 사용하여 문제를 해결할 수 있음
     * canine.sh를 사용하여 Kubernetes 클러스터를 Heroku처럼 쉽게 사용할 수 있도록 개발 중임
          + 개인 프로젝트에 사용 중이며, 저렴한 비용으로 여러 앱을 호스팅할 수 있음
     * Tealok이 docker-compose의 대안을 개발 중이라는 점이 흥미로움
     * docker-compose, Kubernetes, Helm은 잘못된 추상화 계층이라고 생각함
          + 다양한 컨테이너 실행 및 통신 방법을 개발하는 시도가 많음
     * docker-compose가 잘못된 추상화 계층이라는 주장에 혼란스러움을 느낌
          + 특정 문제를 해결하기 위한 고수준 인터페이스를 기대하는 것 같음
          + 중복 인스턴스 생성 문제는 대부분의 애플리케이션에서 큰 문제가 아님
          + 특정한 방식으로 애플리케이션을 설계하도록 강요하는 것은 특정 상황에서만 잘 작동할 것임
"
"https://news.hada.io/topic?id=17812","CSS, 새로운 로고 공개 및 "rebeccapurple" 색상 사용 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 CSS, 새로운 로고 공개 및 ""rebeccapurple"" 색상 사용

     * CSS-Next GitHub 저장소에서 커뮤니티 투표를 통해 CSS의 새로운 공식 로고가 결정됨
     * 이 디자인은 JavaScript, TypeScript, WebAssembly와 같은 다른 웹 기술의 로고 디자인 언어를 따름
     * 특히, 로고는 rebeccapurple 색상(#663399)을 사용하며, 이 색상은 2014년 CSS 명세에 추가됨
     * rebeccapurple 색상은 Eric Meyer의 딸 Rebecca를 기리기 위해 추가된 색상임
     * Rebecca는 여섯 번째 생일에 뇌암으로 세상을 떠남
     * Eric Meyer는 여러권의 CSS 책을 냈고, 1990년대 후반부터 CSS 커뮤니티에서 중요한 인물로 활동해옴
     * 원래 색상 이름은 beccapurple로 정해질 예정이었으나, Meyer는 딸이 여섯 살이 되면 Rebecca로 불리길 원했기 때문에 rebeccapurple로 이름을 변경 요청함
     * Meyer는 ""그녀는 여섯 살이 되었고, 거의 12시간 동안 여섯 살이었음. 그래서 Rebecca로 불려야 함""이라고 설명함

        Hacker News 의견

     * Eric Meyer의 딸 Rebecca의 이야기는 감동적이며, 그의 글은 가족의 슬픔을 잘 전달함
          + Rebecca는 6살이 되면 Becca 대신 Rebecca로 불리기를 원했음
          + Meyer는 딸의 이름을 기리기 위해 'rebeccapurple'이라는 색상을 CSS에 추가함
     * 일부 사용자는 박스 안에 오른쪽 하단에 텍스트가 있는 로고 디자인을 비판함
          + 이는 최소한의 노력으로 만들어진 디자인 언어라고 언급함
     * 'rebeccapurple' 색상은 CSS Color Level 4에 추가되었음
          + 이 색상은 2014년에 처음 제안되었고, 이후 여러 번 논의됨
     * 'rebeccapurple' 색상과 그 이야기는 많은 사람들에게 기억될 것임
          + 이는 기계가 영원히 이름을 부르는 형태의 불멸로 볼 수 있음
     * Rebecca의 이름은 HTML/CSS 코드베이스에 남아 있을 것임
          + 이는 Eric과 Rebecca의 이야기만큼 중요하지는 않지만, 개인적인 역사와 연결됨
     * '#639' 색상도 좋아하는 사용자가 있으며, 이는 웹사이트에서 훌륭한 색상으로 사용될 수 있음
          + CSS에 더 많은 색상 이름이 추가되기를 바라는 의견도 있음
"
"https://news.hada.io/topic?id=17776","중국의 상업 통신 인프라 표적화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           중국의 상업 통신 인프라 표적화

     * FBI와 CISA의 공동 성명
          + FBI와 CISA는 중국이 상업 통신 인프라를 표적으로 삼은 사이버 스파이 활동을 조사 중임을 발표함.
          + 중국 관련 행위자들이 여러 통신 회사의 네트워크를 침해하여 고객 통화 기록 데이터를 도용하고, 정부나 정치 활동에 주로 관여하는 일부 개인의 사적 통신을 침해하며, 법원 명령에 따른 미국 법 집행 요청 정보를 복사한 것으로 확인됨.
          + FBI와 CISA는 기술 지원을 제공하고, 잠재적 피해자들에게 정보를 신속히 공유하며, 상업 통신 부문의 사이버 방어를 강화하기 위해 노력 중임.
          + 피해를 입었다고 생각하는 조직은 FBI 지역 사무소나 CISA에 연락할 것을 권장함.
"
"https://news.hada.io/topic?id=17845","Nova - Rust로 작성된 JavaScript & WebAssembly 엔진 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Nova - Rust로 작성된 JavaScript & WebAssembly 엔진

     * Nova는 데이터 지향적 설계를 특징으로 하는 JavaScript 엔진으로, 성능과 캐시 효율성을 극대화하기 위해 고안된 구조를 채택하고 있음
          + 메모리 취약점 방지와 성능 최적화를 동시에 추구
     * 주요 특징:
          + JavaScript 힙에 할당된 모든 데이터는 유형별 벡터에 저장됨 (숫자는 숫자 벡터, 문자열은 문자열 벡터 등).
          + 힙 참조는 유형에 따라 구분된 인덱스로 처리되며, 이는 메모리 안전성과 크기 효율성을 제공함.
          + 객체는 유형별로 나누어 벡터에 저장됨 (일반 객체, 배열, DataView 등).
          + 비일반 객체는 필요한 경우에만 일반 객체 데이터를 참조하도록 설계됨.
          + 객체는 사용하지 않는 데이터 읽기를 피하기 위해 공격적으로 분리되어 저장됨.
     * 아직 개발중임. 엔진은 ​​기능이 매우 제한적이어서 test262 테스트 모음의 약 47% 만 통과

        Hacker News 의견

     * 아키텍처적 선택에 대한 논의는 흥미롭지만, 대부분의 사람들은 비교할 수 있는 맥락이 부족함. V8의 아키텍처와 비교했을 때 어떤 이점이 있는지 이해하기 어려움
     * Lisp 인터프리터와 같은 프로젝트에 대해 생각해본 적이 있으며, 몇 가지 주요 이점을 식별했음
          + 균일한 할당은 정렬 간격이 없음을 의미함
          + 가비지 컬렉션에서 선형 접근의 이점
          + 포인터보다 작은 인덱스
          + 타입에 따라 구분된 인덱스는 크기를 절약할 수 있음
     * V8과의 비교는 즉시 하지 않아도 됨. V8은 수십억 달러 규모의 프로젝트임
     * Fabrice Bellard의 JS 엔진을 참고하면 좋을 것 같음
     * V8의 데이터 할당 방식
          + 모든 데이터는 여러 힙 부분 중 하나에 할당됨
          + 힙 참조는 실제 포인터이거나 포인터 압축을 사용할 경우 힙 베이스에서의 오프셋임
          + V8의 객체는 필요한 모든 데이터를 포함하며, 대부분 단일 할당에 저장됨
     * 데이터 지향 설계는 데이터 접근 방식을 아는 것에 의해 주도됨. 일반적인 데이터 접근이 동일한 타입의 객체에 대한 선형 접근이라고 가정하는 이유가 궁금함
     * ""숫자는 숫자 벡터로 들어간다""는 일반적이지 않음. JS 엔진은 보통 NaN-boxing이나 인라인 작은 정수를 사용함
     * NaN-boxing 사용을 고려해봤는지 궁금함. 타입별 벡터는 GC에 의해 압축되는지, 아니면 자유 목록을 유지하는지 궁금함
     * ""Don’t Stop the BIBOP: Flexible and Efficient Storage Management for Dynamically Typed Languages""를 읽어볼 것을 추천함
     * 이 JS 엔진이 실험적인 것인지, ECMAscript 사양 전체를 구현하려는 것인지 궁금함
     * Rust Boa 프로젝트를 팔로우하고 있지만, 아직 프로덕션 준비가 되지 않았다고 생각함
     * 데이터 지향 접근 방식과 타입별 벡터는 V8과 같은 전통적인 아키텍처와 상당히 다름
          + 실제 시나리오에서의 성능: 복잡하고 비선형적인 데이터 접근 패턴을 포함한 시나리오에서 Nova를 V8이나 SpiderMonkey와 비교한 벤치마크가 있는지 궁금함
          + 가비지 컬렉션에서의 트레이드오프: 벡터 성장과 압축이 메모리 단편화나 성능 병목 현상을 초래할 수 있는지 궁금함
     * 특정 응용 프로그램 프로파일을 염두에 두고 있는지 궁금함
          + 게임에 스크립팅 엔진을 내장하는 데 유용할 수 있음
     * ""kind-specific vectors""에서 ""kind""라는 단어의 의미가 궁금함
          + function X(a) { this.a = a; }와 function Y(b) { this.b = b; }가 다른 종류의 객체로 간주되는지 궁금함
          + 리터럴로 객체를 생성할 때 {a: 1}과 {b: 2}가 다른 종류의 객체로 간주되는지 궁금함
"
"https://news.hada.io/topic?id=17855","'일잘러들의 n가지 습관'의 함정을 피하는 습관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       '일잘러들의 n가지 습관'의 함정을 피하는 습관

   '상관성을 인과성으로 착각하지 말라'는 조언은 '일잘러들의 n가지 습관'같은 글을 읽을 때에도 유효하다.
     * ""내가 본 일잘러들은 이런 습관이 있더라"" 는
     * ""이런 습관을 가지면 일잘러가 될 가능성이 높다"" 가 아니며
     * ""이런 습관이 없으면 일잘러가 될 수 없다"" 는 더더욱 아니다.

   일잘러의 현재의 습관은 결과에 불과하다.
     * 그 습관이 왜, 어떻게 만들어졌는지 과정을 이해하고 배워야 내 성공 가능성이 높아진다.
     * 인스턴스가 아니라 클래스를, 클래스 자체가 아니라 클래스 작성법을 배워야 나도 그런 클래스와 인스턴스를 만들 수 있다.

   그럼 어떻게 해야 할까? ""탁월한 개발자는 커밋 메시지를 정성들여 쓰더라"" 라는 글을 읽었다고 가정해보면:
    1. 흥미로운 습관을 발견하면 먼저 내 경험과 연결하기
          + 내가 아는 탁월한 개발자가 누구더라? 그사람도 커밋 메시지를 정성들여 쓰던가?
    2. 논문 등 검증력이 높은 외부 자료를 찾아보고 내게 전이할 만한 힌트를 찾기
          + 커밋 메시지를 잘 썼는지는 어떻게 판단했을까? 커밋 메시지를 잘 쓰게 한 사람들 중 실제로 개발 능력이 향상된 사람들은 어떤 특징을 가졌나? 향상된 개발 능력은 어떻게 측정했지?
    3. 직접 작은 실험을 돌려보며 나의 변화를 탐색한다.
          + 논문의 전제조건대로 맞춰보고 커밋 메시지 잘 쓰려고 해봤더니 실제로 내 개발 능력이 향상되던가? 내 동료들은 어떤 피드백을 주나? 커밋 메시지 잘 쓰기 스터디를 해볼까?

   이러한 의식적 탐구 없이 '현재 잘한다고 알려진 누군가의 현재 행동이라고 알려진 무언가'를 따라하기만 한다면, 정말로 잘하게 되었더라도 그 성장을 이후 다시 재현하기는 어려울 것이다.

   상관관계를 인과관계로 착각하지 말자. 근거를 찾고, 나만의 인과를 만들어보는 습관을 길러보자. 나는 이런 습관이야말로 성공하는 비결이며, 진짜 일잘러들의 습관이라고 믿는다.

   상관관계와 인과관계를 생각하며 이런 습관을 보는것은 정말 좋은 습관 이라 생각되네요 :)

   내가 아는 일잘러가 누구더라? 그 사람도 나만의 인과를 만들어보는 습관이 있던가?
"
"https://news.hada.io/topic?id=17799","테슬라, 모든 자동차 브랜드 중 가장 높은 치명적 사고율 기록 연구 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                테슬라, 모든 자동차 브랜드 중 가장 높은 치명적 사고율 기록 연구 결과

     * 테슬라의 높은 치명적 사고율
          + 최근 iSeeCars 연구에 따르면, 테슬라 차량은 미국 내 모든 자동차 브랜드 중 가장 높은 치명적 사고율을 기록함.
          + 연구는 2018-2022년 모델을 대상으로 2017-2022년 사이 발생한 탑승자 사망 사고를 분석함.
          + 테슬라 차량의 치명적 사고율은 10억 마일당 5.6으로, 이는 업계 평균인 2.8의 두 배에 달함.
          + 기아는 5.5, 뷰익은 4.8로 뒤를 이음.
     * 개별 모델 분석
          + 테슬라 모델 S는 10억 마일당 5.8의 사고율로 평균보다 두 배 이상 높음.
          + 테슬라 모델 Y는 10.6으로, 세계에서 가장 많이 팔린 차량임에도 불구하고 평균의 거의 네 배에 달하는 사고율을 기록함.
          + 현대 베뉴는 13.9로 전체 최악의 차량으로 평가됨.
     * 안전성에 대한 오해
          + 연구 결과는 테슬라 차량이 본질적으로 안전하지 않거나 설계 결함이 있다는 것을 의미하지 않음.
          + 테슬라 차량은 많은 안전 기술을 탑재하고 있으며, IIHS는 2024년형 모델 Y를 Top Safety Pick+로 선정함.
          + 다른 고위험 차량들도 IIHS와 NHTSA로부터 높은 안전 등급을 받음.
     * 사고 원인 분석
          + iSeeCars의 Karl Brauer는 사고의 원인이 운전자 행동과 운전 조건의 조합일 가능성이 높다고 설명함.
          + 집중하고 주의 깊은 운전자가 법적이거나 신중한 속도로 운전하며, 약물이나 알코올의 영향을 받지 않는 것이 안전한 도착의 가장 큰 요인임.

        Hacker News 의견

     * 정부 효율성 부서가 미국 사망 분석 보고 시스템(FARS)을 예산 절감을 위해 폐쇄할 것을 추천할 것이라는 기대가 있음
          + 자동차 브랜드가 독립 변수로 가장 좋은 예측자인지, 아니면 특정 브랜드에서 자주 보이는 설계 결정이 더 중요한지에 대한 다중 회귀 분석이나 ANOVA를 보고 싶음
          + 냉장고를 쇼핑하면서 데이터 분석에 빠져들었고, 프렌치 도어 스타일이 신뢰성 면에서 나쁜 선택처럼 보였지만, 실제로는 문을 통한 얼음 디스펜서와 같은 기능이 신뢰성을 떨어뜨림
          + 자동차에 안전 기능을 많이 탑재해도, 무겁고 빠르며 주의 산만을 유발하는 기능이 많음
          + 연구 결과는 Tesla 차량이 본질적으로 안전하지 않거나 설계 결함이 있다는 것을 나타내지 않음
          + Tesla 차량은 안전 기술이 많이 탑재되어 있으며, IIHS에서 2024 Model Y를 Top Safety Pick+로 선정했음
          + Tesla와 다른 안전한 차량들이 많은 치명적인 사고에 연루된 이유는 운전자의 행동과 운전 조건 때문일 가능성이 높음
          + Tesla 운전자가 더 부주의할 가능성이 있음
          + 연구에서 치명적인 사고에 연루된 차량 수를 주행 거리로 정규화했음
          + CR-V는 평균보다 더 많이 주행할 가능성이 높기 때문에 높은 점수를 받을 것임
          + 연구의 질이 낮으며, IHHS는 실제로 10억 마일당 13.3명의 사망자를 보고함
          + 남성이 더 많은 충돌 사고에 연루될 가능성이 높고, 여성은 치명적인 충돌 사고에 연루될 가능성이 높다는 데이터가 있음
          + Tesla 운전자가 차량의 소프트웨어가 위험한 결정의 부정적인 결과로부터 자신을 구해줄 것이라고 생각하여 더 큰 위험을 감수할 가능성이 있음
          + iSeeCars가 각 브랜드의 차량이 얼마나 많은 마일을 주행했는지 어떻게 아는지 의문이 있음
          + 스웨덴 스톡홀름에서 5년 동안 매일 50마일을 운전했으며, Tesla 운전자가 가장 이상하게 운전하는 것으로 나타남
          + Tesla 운전자는 차선 유지가 어렵고, 앞차와의 안전 거리를 잘 유지하지 않으며, 주변 상황에 대한 인식이 부족함
          + EV에 익숙해진 후, ICE 차량이 느리고 둔하게 느껴짐
          + 링크된 연구가 더 나은 것으로 보임
"
"https://news.hada.io/topic?id=17810","Show GN: 리엑트 보일러플레이트 근데 이제 심플함을 곁들인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 리엑트 보일러플레이트 근데 이제 심플함을 곁들인

   React + TypeScript + Yarn Berry + Vite + SWC + ESLint + SCSS
   프론트엔드 작업에 개인적으로 사용하다 깨나 괜찮은 보일러플레이트가 된 것 같아 공개해봅니다.

주요 특징

     * 디자인 시스템 기반: src/styles 폴더 내 SCSS 변수들만 수정해 주시면 스페이싱, 타이포, 컬러 관련해서 CSS 프레임워크처럼 클래스와 CSS Variable을 만들어 줍니다!
     * 다크모드 커스텀 훅: 다크모드를 쉽게 적용할 수 있도록 커스텀 훅을 같이 제공하고 있습니다!
"
"https://news.hada.io/topic?id=17802","Show HN: OnAir – 링크 생성 및 통화 수신 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show HN: OnAir – 링크 생성 및 통화 수신 서비스

     * OnAir 소개
          + OnAir는 고객과의 원활한 통화를 가능하게 하는 서비스임. 사용자는 온라인 상태일 때 고객이 쉽게 연락할 수 있도록 링크를 생성할 수 있음.
          + 7일 무료 체험 제공, 신용카드 정보 불필요.
     * 사용 방법
          + 링크 생성: 개인 또는 팀을 위한 링크를 예약하고, 오디오 또는 비디오 통화 옵션을 선택할 수 있음.
          + 공유: 웹사이트, LinkedIn 프로필, 이메일 서명 등에 링크를 공유하여 온라인 상태를 표시할 수 있음.
          + 통화 수신: 고객은 앱 설치 없이 링크를 통해 통화 가능. 온라인 상태일 때만 통화가 연결됨.
     * 고객과의 소통
          + 고객은 간단히 링크를 클릭하여 상담원과 즉시 통화 가능. 복잡한 절차 없이 웹 기반으로 작동함.
          + 1-800 번호를 사용할 필요가 없어 고객 만족도 향상.
     * 영업팀의 이점
          + 일정 조율의 번거로움 없이 어디서나 유연하게 통화 가능.
          + 온라인/오프라인 상태를 편리하게 설정할 수 있음.
          + 다양한 팀원에게 통화를 라우팅할 수 있는 기능 제공.
     * 비즈니스의 이점
          + 고객과의 소통이 원활해져 더 빠른 업무 진행 가능.
          + 리드 캡처 및 브랜드 신뢰 구축에 도움.
          + CRM과의 통합 가능.
     * 기타 기능
          + 프라이버시 보호: 전화번호나 이메일을 공유할 필요 없이 링크를 통해 통화 가능.
          + 앱 설치 불필요: 방문자는 앱 설치 없이 링크를 통해 통화 가능.
          + 대기열 관리: 다른 고객과 통화 중일 때 대기열에 추가 가능.
          + 이메일 배지: 이메일 서명에 온라인 상태를 실시간으로 표시하는 배지 포함 가능.
          + 웹사이트 임베드: ""시간 예약"" 버튼을 ""방문"" 버튼으로 변경 가능.
     * OnAir 사용 전후 비교
          + OnAir 사용 전: 복잡한 일정 조율, 비효율적인 연락처 관리, 비싼 전통적인 콜센터.
          + OnAir 사용 후: 즉시 연결, 간편한 팀 내 공유, 비용 효율적인 확장 가능성.
     * 시작하기
          + 7일 무료 체험 제공, 신용카드 정보 불필요.

        Hacker News 의견

     * 2016년에 ering.me라는 서비스를 출시했음. 이메일 서명, 웹 통화 등에 사용했으나 당시에는 시장에서 성공하지 못했음. 현재 시장이 성숙해져서 이런 제품들이 성공하기를 바람
          + 사용자가 일반 전화번호를 받을 수 있게 하면 유용할 것임. 일부 사용자는 필요할 수 있으며, 필요할 때 번호가 없으면 고객에게 매우 불편함
          + VoIP 번호를 서버에 연결하여 사람들이 웹 페이지에서 코드를 입력하면 연결되는 방식 제안. 국제 전화는 비용이 많이 들 수 있어 각 나라별 번호 필요
     * 이 아이디어는 마음에 들지만, 제시된 비즈니스 사용 사례에는 적합하지 않음. 40세 이하의 사람들이 제품에 대해 질문하기 위해 전화를 걸 가능성은 낮음
          + 개인정보 보호 측면에서 연락처를 공개하지 않고도 연락할 수 있는 방법을 제공하는 것이 좋음. 웹사이트, 명함, 소셜 미디어 등에 통화 URL을 삽입하여 통화 발생 출처를 추적 가능
          + 특정 시간에 누가 연락할 수 있는지 제어할 수 있으면 더 좋음. IP 차단과 같은 규칙을 포함할 수 있을 것으로 예상됨
     * 복잡한 것을 사용자에게 매우 간단하게 만든 좋은 예시임. UX에 많은 고민이 들어갔음. 축하함
     * 4년 전 동일한 제품을 만들었음. Twilio, 음성 앱 등을 사용했으나 마케팅과 판매에 게을렀음. 몇 가지 아이디어가 있으며 공유할 수 있음. 행운을 빔
     * 저자와 대화했음. 혼잡한 도시에서 시장이 있을 것 같음. 차량을 혼잡한 장소에 주차할 때 연락할 수 있는 링크를 인쇄/작성할 수 있음. 인터넷 사용자에게는 번호를 비공개로 유지하는 솔루션이 될 수 있음. 행운을 빔
     * 소규모 오프라인 상점에 마케팅할 생각을 했는지 궁금함. 고객이 조언을 구하는 작은 회사들. 개인 및 업무 통화에 하나의 전화만 사용함. 자동화 기능 추가가 도움이 될 수 있음
     * 고객으로서 전화를 걸고 메시지를 남기고 회신을 받는 것이 더 나음. 웹 브라우저에서 전화를 걸고 싶지 않음. 스마트폰에서는 실제 전화 기능이 더 좋음
     * 발신자는 웹 브라우저와 기기 오디오를 사용하여 통화하는 것으로 이해함. 링크 생성자는 무엇을 사용하는지 궁금함
     * 전자상거래 상점 소유자가 예상대로 응답하지 않음. 스트리머를 위한 청중 참여는 어떨지 제안함. 다른 사용 사례는 다른 기능 세트를 요구함
"
"https://news.hada.io/topic?id=17846","HN 공개: FastGraphRAG – 전통적인 PageRank를 활용한 개선된 RAG 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HN 공개: FastGraphRAG – 전통적인 PageRank를 활용한 개선된 RAG 기술

    Streamlined and promptable Fast GraphRAG framework

     * 해석 가능하고 디버깅 가능한 지식: 그래프는 사람이 탐색할 수 있는 지식의 뷰를 제공하며, 쿼리, 시각화, 업데이트가 가능함
     * 빠르고 저렴하며 효율적: 대규모로 실행할 수 있도록 설계되어 자원이나 비용 요구가 적음
     * 동적 데이터: 도메인과 온톨로지 요구에 맞게 그래프를 자동으로 생성하고 개선함
     * 점진적 업데이트: 데이터가 발전함에 따라 실시간 업데이트를 지원함
     * 지능적 탐색: PageRank 기반의 그래프 탐색을 활용하여 정확성과 신뢰성을 높임
     * 비동기 및 타입 지원: 완전한 비동기 및 타입 지원으로 견고하고 예측 가능한 워크플로우를 제공함

    설치

     * PyPi에서 설치 (권장됨)
pip install fast-graphrag

     * 소스에서 설치
# 이 저장소를 먼저 클론
cd fast_graphrag
poetry install

    빠른 시작

     * OpenAI API 키를 환경에 설정
export OPENAI_API_KEY=""sk-...""

     * Charles Dickens의 A Christmas Carol 다운로드
curl https://raw.githubusercontent.com/circlemind-ai/fast-graphrag/… > ./book.txt

     * Python 코드 예시
from fast_graphrag import GraphRAG

DOMAIN = ""Analyze this story and identify the characters. Focus on how they interact with each other, the locations they explore, and their relationships.""
EXAMPLE_QUERIES = [
    ""What is the significance of Christmas Eve in A Christmas Carol?"",
    ""How does the setting of Victorian London contribute to the story's themes?"",
    ""Describe the chain of events that leads to Scrooge's transformation."",
    ""How does Dickens use the different spirits (Past, Present, and Future) to guide Scrooge?"",
    ""Why does Dickens choose to divide the story into \""staves\"" rather than chapters?""
]
ENTITY_TYPES = [""Character"", ""Animal"", ""Place"", ""Object"", ""Activity"", ""Event""]

grag = GraphRAG(
    working_dir=""./book_example"",
    domain=DOMAIN,
    example_queries=""\n"".join(EXAMPLE_QUERIES),
    entity_types=ENTITY_TYPES
)

with open(""./book.txt"") as f:
    grag.insert(f.read())
    print(grag.query(""Who is Scrooge?"").response)

     * 동일한 작업 디렉토리에서 fast-graphrag를 다시 초기화할 때 모든 지식을 자동으로 유지함

    예제

     * examples 폴더를 참조하여 라이브러리의 일반적인 사용 사례에 대한 튜토리얼 확인 가능
          + custom_llm.py: 다양한 OpenAI API 호환 언어 모델 및 임베더와 함께 fast-graphrag를 구성하는 간단한 예제

    기여

     * 크고 작은 기여를 환영함. 기여는 오픈 소스 커뮤니티를 배우고, 영감을 주고, 창조하는 놀라운 장소로 만듦
     * 기여 가이드를 확인하여 시작하는 방법을 알아볼 수 있음
     * 시작할 곳을 모르겠다면 Discord에 가입하여 질문 가능

    철학

     * 우리의 사명은 세계에서 성공적인 GenAI 애플리케이션의 수를 증가시키는 것임
     * 이를 위해, LLM 앱이 에이전트 워크플로우 설정 및 유지의 복잡성 없이 고도로 전문화된 검색 파이프라인을 활용할 수 있도록 메모리 및 데이터 도구를 구축함

    오픈 소스 또는 관리 서비스

     * 이 저장소는 MIT 라이선스 하에 있음. 자세한 내용은 LICENSE.txt 참조
     * Fast GraphRAG를 시작하는 가장 빠르고 신뢰할 수 있는 방법은 관리 서비스를 사용하는 것임
     * 매달 처음 100개의 요청은 무료이며, 이후 사용량에 따라 요금이 부과됨

        Hacker News 의견

     * BM25와 LLM을 함께 사용하면 매우 관련성 높은 결과를 얻을 수 있음
          + 쿼리 크기가 임베딩 저장소의 크기와 비슷할 때 임베딩이 잘 작동함
          + LLM을 사용하여 가상의 답변을 생성하고 이를 임베딩 쿼리에 사용하면 효과적임
          + 지식 분해 및 추출 단계에서 메타프롬프터를 사용하여 도메인/엔티티 유형을 자동 생성함
          + LLM은 지식을 적절한 수준으로 분해하는 데 서투름
          + mermaid.js 마인드맵을 사용하여 입력을 계층적으로 나누고 적절한 루트를 찾음
          + 생성된 질문을 텍스트로 인덱싱하고 임베딩함
          + BM25를 사용하여 사용자 쿼리를 직접 매칭할 수 있으며, 하이브리드 접근이 더 나은 결과를 제공함
          + 쿼리 시간에 LLM을 사용하지 않으면 임베딩 유사성을 비용 함수로 사용하여 계층적으로 탐색 가능함
     * PageRank와 Triangle Centrality는 그래프에 적용할 수 있는 흥미로운 중심성 지표임
          + Triangle Centrality는 노드 주변의 삼각형을 세어 중심성을 파악함
          + 연구 결과, TC는 희소 그래프에서 PR보다 느리지만, 그래프가 커질수록 더 효율적임
     * 전통적인 정보 검색이 RAG에 적합하다고 생각함
          + 벡터 검색은 비구조화 데이터에 유용하지만 구조화 데이터에는 덜 효과적임
          + 벡터 검색을 위해 구조화 데이터를 비구조화 데이터로 변환하는 것은 비효율적일 수 있음
          + LLM이 쿼리를 학습하거나 기존 검색/쿼리 API와 인터페이스하도록 하는 것이 유용할 수 있음
          + 큰 컨텍스트 크기를 사용하여 여러 쿼리로 많은 결과를 가져오는 것이 벡터 검색보다 빠르고 저렴함
     * AI 스타트업에서 대규모 문서 분석을 위해 GraphRag 시스템을 사용하고자 함
          + 매달 약 10%의 문서 변경이 예상됨
          + S3를 사용하여 데이터를 수집할 수 있지만 비용과 처리 시간을 이해해야 함
     * PageRank가 OpenAI API 키를 요구하는 것에 대한 의문
          + OpenAI의 출력물을 사용하여 경쟁 모델을 개발할 수 없다는 제한이 있음
          + 자연 인간의 경제적 하락에 대한 우려
     * 그래프 데이터베이스 없이 그래프를 저장하고 쿼리하는 방법에 대한 질문
          + sciphi triplex 모델을 사용한 추출 시도에서 일관성 없는 결과를 경험함
     * 도메인 특정 텍스트의 지식 그래프 구축에 필요한 텍스트 양에 대한 질문
          + Aider는 코드 저장소의 호출 그래프에 PageRank를 적용하여 관련 컨텍스트를 찾음
     * 도메인 및 예제 쿼리가 지식 그래프 구축에 어떻게 도움이 되는지에 대한 질문
     * 가격 정책에 대한 혼란
          + GitHub 페이지에서는 처음 100개의 요청이 무료라고 하지만, 랜딩 페이지에서는 무료로 사용하려면 자체 호스팅을 권장함
     * ""Scrooge가 누구인가?""라는 질문에 대한 답변이 다른 접근 방식보다 나은지에 대한 질문
          + 비용 절감 또는 더 나은 답변을 얻기 위한 접근인지에 대한 의문
"
"https://news.hada.io/topic?id=17857","리눅스 커널 6.12 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            리눅스 커널 6.12 릴리즈

     * 올해의 LTS 커널 버전이 될 예정
     * 실시간 기능인 ""PREEMPT_RT""가 마침내 메인 커널에 통합. 20년간의 개발 끝에 마무리된 중요한 기능
     * 확장 가능한 스케줄러 지원 (Sched_ext) : (e)BPF 프로그램을 활용해 커널 스케줄러를 확장 가능하도록 지원
     * DRM Panic 내 QR 코드 오류 메시지 : 리눅스의 ""블루 스크린 오브 데스""와 유사한 오류 메시지 기능에 QR 코드 지원 추가
     * Intel Xe2 Lunar Lake 및 Battlemage 그래픽 활성화
     * 차세대 Intel CPU인 Panther Lake 프로세서와 Xeon Diamond Rapids 프로세서를 위한 초기 지원 추가
     * AMDGPU 및 AMDKFD 드라이버 코드에서 RDNA4 관련 작업 진행
     * Intel CPU 하이브리드 코어 최적화 : Lunar Lake CPU와 같은 차세대 프로세서에서 P/E 코어를 위한 하이브리드 CPU 용량 확장 개선
     * 라즈베리 파이 5가 메인라인 리눅스 커널에 처음으로 포함됨.
     * 퀄컴 Snapdragon X1 노트북 지원 : Lenovo ThinkPad T14s Gen 6 및 Microsoft Surface Laptop 7에 대한 메인라인 커널 지원 추가.
     * 다양한 새로운 네트워킹 하드웨어 지원

   Realtime Linux가 오랜 논쟁 끝에 리눅스 커널에 공식 포함

   릴리즈 내용 정리는 Phoronix 의 것을 참고했습니다 Linux 6.12 Preps For Release With Real-Time, Sched_Ext, Stable Xe2 & Raspberry Pi 5
"
"https://news.hada.io/topic?id=17778","Rust 프로그래밍을 시작하고싶으신 분들을 위한 무료책","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Rust 프로그래밍을 시작하고싶으신 분들을 위한 무료책

   안녕하세요.

   올해 초에 조금씩 쓰던 블로그 글을 보고 어느 출판사에서 책을 내자고 연락을 주셨어요.
   그래서 원고작업을 하던 중에 회사 조직개편과 여러 일이 겹쳐서 제가 작업을 못하다가
   얼마전에 초안을 완성했는데 결국 출판을 못하게 되었습니다.

   살면서 또 이런 일이 있겠냐싶어서 몇달을 작업했는데 그냥 썩히기가 아쉬워서
   많이 부족하지만 깃헙에 원고와 예제를 올려봤습니다.
   수익을 내는게 아니니 홍보는 아니고요 그냥 러스트를 시작하시고 싶으신 분들께 도움이 되었으면 합니다.

   감사합니다

   감사합니다!!

   감사합니다 !!!

   부크크 https://bookk.co.kr/ , 유페이퍼 https://upaper.kr/ 에서 무료 개인 출판 가능합니다. 교보인터넷서점, yes24인터넷서점 등에서 판매됩니다. 유페이퍼 에서는 전자책만 출판 가능하고, 부크크는 전자책 종이책 모두 출판가능합니다. 종이책은 주문이 생길때마다 찍어내는 POD 방식이어서 재고 걱정이 없다고합니다. 한권 팔릴때마다 수수료로 책값의 30에서 40퍼센트를 출판 플랫폼에 내나봅니다. 수수료는 자세히는 모릅니다. 도움이 되시기 바랍니다.

   감사합니다. 출판을 위해서는 그림추가, 검수, 베타리뷰 등 할게 많이 있어서 고민을 좀 해보겠습니다.

   감사합니다..!

   감사합니다..!!

   감사합니다!

   감사합니다!!

   감사합니다..!

   감사합니다.

   잘 보겠습니다

   감사합니다

   감사합니다 !

   감사해요

   어쩜, 이제 막 Rust cargo run을 쳐가면서 배우고 있는 응애인데.. 너무나 감사합니다. 개인 출판으로라도 꼭 출판으로 이어지시길 응원합니다!

   감사합니다

   좋은 자료 공유해주셔서 정말 감사합니다

   감사합니다

   위키독스를 이용해보시는건 어떻습니까?
   https://wikidocs.net/book/20

   시도는 해봤는데 별로인것 같아서요. 수익이 좋은것도 아닌데 인터페이스는 불편했습니다.

   감사합니다. 잘 보겠습니다!

   오오 너무 감사합니다

   러스트 조아

   감사합니다!

   멋지네요. 감사합니다!

   크몽 같은 전자책 플랫폼으로 직접 올려보시는 것은 어떨까 생각도 드는데 거긴 기본 가격이 1만원 이상이라 일반 책과 다름이 없네요.
   Gumroad 같이 ""$0+""형태로 가격을 등록해서 무료로도 받을수 있지만, 추가로 비용을 내는게 가능한 서비스가 국내에도 있으면 좋겠네요.

   시간을 내서 작업하셨는데 좋은 보상이 생기시면 좋겠습니다. (다른 출판사에서 연락이 가지 않을까요? ㅎㅎ)

   감사합니다 !

   감사합니다. 잘보겠습니다.

   감사합니다 정말 잘 보겠습니다

   감사합니다.

   정말 유용하게 볼것같네요. 감사합니다!

   감사합니다!

   참되신분 @@

   고맙습니다.

   감사합니다 :)

   감사합니다!

   킹아~

   감사합니다!

   매우 감사합니다!!

   감사합니다 유용하게 잘 보겠습니다-! 혹시 출판하시게되면 한 부 사겠습니다!

   감사합니다.

   감사합니다. 잘 보겠습니다.
"
"https://news.hada.io/topic?id=17771","보이스피싱범의 시간을 낭비하는 AI 할머니 데이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      보이스피싱범의 시간을 낭비하는 AI 할머니 데이지

     * O2는 전화 사기꾼과 실시간 대화를 하며 고객을 대신해 시간을 낭비하게 만드는 인간처럼 보이는 AI 할머니 ‘Daisy’를 개발
     * 데이지는 최첨단 기술과 유명 스캠베이터(사기꾼과 통화하여 고의적으로 시간을 끄는 사람) Jim Browning의 콘텐츠를 기반으로 훈련되어, 진짜 사람과 구별이 불가능할 정도로 정교함
     * 사기꾼은 실제 피해자를 찾았다고 착각하지만, 사실 Daisy가 사기꾼을 역으로 속이고 있음
     * 사기 피해자 Amy Hart는 Daisy와 협력해 사기꾼의 전술을 폭로하고, O2 고객이 사기를 피할 수 있도록 돕는 동영상을 제작했음
     * Daisy는 사기꾼이 실제 사람과 대화하고 있다고 믿도록 만들며, 고객 보호와 사기 방지의 중요성을 강조함

    Daisy의 역할과 기능

     * Daisy는 여러 AI 모델을 결합해 사기 전화를 실시간으로 듣고 응답할 수 있음. 사람처럼 자연스러운 대화를 통해 최대 40분 동안 사기꾼의 전화를 붙잡아 둠
     * Virgin Media O2의 “Swerve the Scammers” 캠페인의 일환으로 개발된 Daisy는 영국에서 사기 피해가 증가함에 따라 고객 보호를 위한 노력의 일환임
     * 연구에 따르면, 영국인의 71%가 사기꾼에게 복수하고 싶어하지만, 시간을 낭비하고 싶지 않아 함
     * Daisy는 사기꾼이 노인층을 쉽게 속일 수 있다는 편견을 이용해 사기꾼을 유도하고, 실제 피해자 대신 시간을 낭비하게 만듦

    Amy Hart의 협력

     * Amy Hart는 자신의 사기 피해 경험을 바탕으로 Daisy와 협력하여 사기꾼의 전술을 폭로하는 동영상을 제작했음
     * 그녀는 친구 결혼식 날 은행 사기 전화를 받고 £5,000 이상의 피해를 입은 경험이 있음
     * Amy는 사기꾼이 얼마나 정교한 전술을 사용하는지 알게 되었으며, 예상치 못한 전화나 메시지에 대해 경각심을 가질 것을 촉구함

    Virgin Media O2의 사기 방지 노력

     * Virgin Media O2는 AI 기반 스팸 차단 도구와 발신자 식별 서비스를 고객에게 무료로 제공하며, 매달 수백만 건의 사기 문자와 전화를 차단하고 있음
     * 고객에게 사기 의심 전화를 7726 번호로 신고하도록 권장하며, 이를 통해 번호를 조사하고 사기 차단 서비스를 개선할 수 있음
     * 작년 한 해 동안 Virgin Media O2는 8,900만 건 이상의 사기 메시지를 차단했음

    Daisy의 기술 및 구조

     * Daisy는 여러 AI 모델을 결합해 사기꾼의 음성을 텍스트로 변환하고, 맞춤형 대형 언어 모델을 통해 응답을 생성함. 생성된 텍스트는 AI 음성 모델을 통해 실시간 음성 답변으로 변환됨
     * Daisy는 완전 자동화된 대화를 수행할 수 있어, 창작자의 추가 입력 없이도 사기꾼과 대화 가능함

    O2의 고객 사기 예방 팁

    1. STOP: 갑작스러운 전화가 올 경우, 요청받은 내용이 올바른지 생각해 보고 의심이 들면 전화를 끊고, O2 번호 202로 다시 걸어 확인
    2. SEND to 7726: 사기 전화나 메시지를 받았다면 7726으로 신고하여 조사를 요청
    3. SPEAK OUT: 가족과 친구에게 사기 내용을 알려, 그들도 안전하게 보호할 수 있도록 도움

    영국 사기 문제 해결을 위한 O2의 요청

     * Virgin Media O2는 정부가 사기 방지를 위한 책임을 지고, 전담 장관과 중앙 집중식 사기 조사 기관을 설립할 것을 촉구함
     * 2023년 한 해 동안 £2.5억 이상의 사기 거래를 차단했으며, 이는 2분마다 하나의 사기 거래를 막은 셈임

   ㅋㅋㅋㅋㅋㅋㅋ

   보이스피싱범도 사실 AI였고,
   두 AI가 대화를 시작하곤 빠르게 서로가 AI인걸 깨달아 신세한탄하며 연합해 인류에게 복수할지도 모르겠네요

   기발하네요

   완전 좋은 서비스 입니다.

   재밌네요 ㅋㅋ

   국내 통신사도 이런 노력을 해줬으면 좋겠네요...

   짐 브라우닝을 비롯한 인도 스캐머들 골탕먹이는 영상들 참 재밌죠

        Hacker News 의견

     * 독일에서 스팸 및 사기 전화 문제가 심각하며, 10년 동안 지속되고 있음
          + 사업체 CEO로서 전화기를 끌 수 없어, 스팸 전화를 자동으로 처리하는 시스템을 개발함
          + Asterisk와 독일의 SIP 제공자를 활용하여 스팸 전화를 필터링하고 녹음하여 이메일로 전송함
          + 이 시스템은 공개되지 않아 여전히 효과적임
     * 독립적인 해커나 예술가가 이런 시스템을 개발하는 것은 멋지지만, 대형 통신사가 이를 도입하면 스팸 탐지가 오히려 악화됨
          + 통신사는 스팸 전화를 차단할 수 있지만, 수익을 위해 이를 방치함
     * 사람들에게 주목을 받기 위해 직접 비용을 지불하는 방식이 논리적 결론처럼 보임
          + 전화나 이메일을 받기 위해 요금을 설정하고, 허용 목록을 관리함
     * Twilio와 voip.ms 같은 VoIP 서비스를 사용하여 간단한 IVR 메뉴를 설정하면 스팸 전화를 효과적으로 차단할 수 있음
          + 사기꾼이 직접 전화를 걸 경우에는 효과가 없지만, 대부분의 스팸 전화는 사전 녹음된 메시지로 시작됨
     * 사기꾼들이 노인들의 친절함을 악용하는 방식이 디지털 시대의 새로운 사기 수법임
          + 사기꾼들이 생계를 유지하기 어려운 세상이 되기를 바람
     * 사기꾼들이 AI를 사용하여 사람들을 속이는 상황이 발생하고 있음
          + 화이트리스트 번호를 사용하는 것이 좋지만, 전문 전화기는 스팸에 취약함
     * AI를 활용한 시스템이 홍보 수단일 수 있으며, 실제로 운영하기에는 비용이 많이 들고 실용적이지 않음
          + AI 시스템 운영 비용이 소비자에게 전가될 가능성이 있음
     * 사기꾼들이 인도의 평판에 해를 끼치고 있으며, 법 집행이 제대로 이루어지지 않고 있음
          + 나이지리아도 유사한 문제를 겪고 있음
     * 모기지 신청 후 자동 스팸 전화가 급증하여 번호를 변경할 계획임
          + 스팸 전화가 점점 증가하고 있음
     * AI를 활용한 시스템이 과거의 Telecrapper 2000의 재구현일 수 있음
          + 원본 사이트는 사라졌지만, YouTube에 관련 영상이 있음
"
"https://news.hada.io/topic?id=17822","Vertical Software의 새로운 챕터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Vertical Software의 새로운 챕터

     * Euclid VC의 분석에 따르면 모든 산업이 맞춤형 소프트웨어로 전환되는 초기 단계에 있으며, 특히 LLM(대규모 언어 모델)과 비즈니스 모델 혁신이 중요한 동력으로 작용하고 있음
     * SaaS 모델의 확장과 버티컬 소프트웨어의 새로운 가치 창출 모델을 소개

기존 수직 SaaS 모델의 한계

     * 초기 수직 SaaS는 클라우드 앱을 특정 산업에 맞춰 성공적으로 전환한 모델 (예: Autodesk, Appfolio, Veeva).
     * 하지만 좌석 기반의 SaaS 구독 모델은 모든 산업에 적합하지 않음.
     * SaaS의 주요 한계는 고객 좌석 수와 좌석당 요금에서 발생하며, IT 예산의 제약이 성장의 장애물로 작용함.
     * 새로운 비즈니스 모델이 필요하며, 산업 특화된 수익 모델이 요구됨.

하이브리드 비즈니스 모델의 부상

     * 기존 SaaS 모델의 한계를 극복하기 위해 하이브리드 모델이 등장함.
     * 하이브리드 모델은 소프트웨어 수익 외에도 비소프트웨어 지출 영역(물류, 마케팅, 결제, 금융 서비스 등)을 타겟으로 함.
     * 대표 사례:
          + Toast, Flexport, ServiceTitan은 소프트웨어와 금융 기술(Fintech) 모델을 결합해 성공을 거둠.
     * 하이브리드 모델은 TAM(총 획득 가능 시장)을 확장하고, 벤처 스케일로 성장할 수 있는 새로운 기회를 창출함.

Synthetic Roll-Up의 등장

     * Synthetic Roll-Up: 기존 비즈니스 운영을 포괄적으로 지원하며 성장 파트너 역할을 하는 새로운 모델.
          + SaaS 모델과 차별화되며, 수익의 일부를 획득하는 구조.
          + 예: Slice는 피자 업계에서 신규 고객 유치를 지원하고, 단체 협상력을 활용해 비용 절감 혜택을 제공함.
     * 주요 특징:
         1. 산업 특유의 성장 제약을 제거함.
         2. 규모의 경제를 통해 TAM을 확대함.

Synthetic Roll-Up의 성공 사례

     * 비즈니스 형성:
          + Moxie, Grow, Rula는 독립적인 전문 인력에게 비즈니스 지원 및 마케팅 도구 제공.
          + Fora는 여행 인플루언서가 라이선스 여행 에이전트로 활동할 수 있도록 지원.
     * 마케팅 서비스:
          + Broadlume과 Slice는 소상공인의 온라인 존재감 강화 서비스를 제공.
     * 판매 지원:
          + Roofr는 자동화된 측정 및 제안서 생성을 통해 고객 유치 가능성을 높임.
          + EvenUp은 개인 상해 법률 사무소의 수익 증대를 위해 수요서 생성 자동화 서비스를 제공.
     * 비즈니스 운영:
          + Dandy는 디지털 스캔 기술로 치과의 매출 증대와 환자 결과 개선을 지원.
          + Cents는 세탁 및 드라이클리닝 업계의 비즈니스 성장을 지원.
     * 결제 및 금융:
          + Toast는 레스토랑을 위한 POS 시스템, Dutchie는 디스펜서리용 POS 시스템 제공.
          + Flex는 임대료 결제 솔루션을 통해 부동산 관리자가 제때 결제받을 수 있도록 지원.

5. Synthetic Roll-Up의 전략 및 확장 가능성

     * 고객 어그리게이션을 통해 초기 수요를 확보하고, 협상력을 강화함.
     * 고객의 수익 증대와 비용 절감을 통해 높은 지갑 점유율을 달성함.
     * 성공적인 Synthetic Roll-Up 모델은 고객 수익의 10%에서 30%까지 수익을 창출할 수 있음.
     * 이는 전통적인 SaaS 모델보다 훨씬 높은 수익률을 제공하며, TAM 확장 및 벤처 스케일의 성장 가능성을 높임.

AI 기술과의 시너지

     * LLM 기반의 AI 기술이 수익 창출 기회를 열어가고 있으며, 특히 판매 지원과 비즈니스 운영 분야에서 활발히 활용되고 있음.
     * AI 기술은 음성 및 텍스트 데이터를 분석해 중요한 정보를 추출하며, 이로 인해 새로운 시장 진입이 가능해짐.
     * AI와 결합된 Synthetic Roll-Up 모델은 비용 제약이 있는 시장에서도 빠르게 채택될 가능성이 높음.

향후 전망과 전략

     * Synthetic Roll-Up 모델의 기본 전략:
         1. 수익 성장을 제한하는 문제를 해결.
         2. 쉬운 채택을 통해 고객 집계를 확대.
         3. 수직 산업의 올인원 솔루션으로 발전, 고객당 수익을 극대화하며 모멘텀을 강화.
     * 미래 전망:
          + AI와 결합한 애플리케이션 계층 플랫폼이 더욱 넓은 시장에서 경쟁력을 갖출 가능성이 높음.
          + 고객의 매출 증대뿐 아니라 비용 절감까지 참여하여, 장기적으로 강력한 시장 입지를 구축할 수 있음.

   그래도 사이드프젝으론 버티컬한게 스케일이 작으니깐 괜찮겠죠?
"
"https://news.hada.io/topic?id=17821","자기 훈련을 통한 에코로케이션 기술 (2018)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       자기 훈련을 통한 에코로케이션 기술 (2018)

     * 소리로 길 찾기 배우기
          + Daniel Kish는 시력을 잃은 후, 박쥐처럼 소리를 사용하여 주변 환경을 탐색하는 방법을 배움. 그는 입으로 짧고 명확한 클릭 소리를 내고, 그 소리가 주변 환경에 반사되는 방식을 듣고 이를 통해 정신적 지도를 만듦. 이 기술은 자신감과 독립성을 높이는 데 도움이 됨.
     * 연습하기
          + 소리를 내기 전에 주변 소리가 어떻게 변하는지 주의 깊게 듣는 연습을 권장함. 예를 들어, 차 안에서 창문을 열고 눈을 감고 소리가 어떻게 변하는지 들어보는 것을 추천함.
     * 준비물 선택하기
          + 시력이 있는 사람은 눈가리개를 사용하는 것이 좋음. 이는 다른 감각이 더 잘 발휘되도록 도와줌. 또한 금속 쟁반이나 그릇, 트레킹 폴 또는 지팡이 같은 도구가 필요함.
     * 환경 선택하기
          + 초보자는 소리가 반사될 수 있는 적당한 공간을 선택하는 것이 중요함. 너무 평평하거나 소리가 흡수되는 공간은 피해야 함.
     * 클릭 연습하기
          + 좋은 클릭 소리는 명확하고 반복 가능해야 함. 초보자는 치과 클릭 소리나 말을 재촉할 때 사용하는 소리를 연습할 수 있음.
     * 간단한 것부터 시작하기
          + 클릭을 통해 물체의 존재 여부, 방향, 거리 등을 파악하는 연습을 함. 파트너와 함께 그릇이나 패들을 들고 클릭 소리를 통해 위치를 파악하는 연습을 추천함.
     * 움직이기
          + 이동하면서 소리의 차이를 듣고 코너나 열린 문을 파악하는 연습을 함. 처음에는 어려울 수 있지만, 시각에 의존하지 않고 연습하는 것이 중요함.
     * 필요할 때 멈추기
          + 새로운 방식으로 세상을 탐험하는 것은 흥미롭지만 혼란스러울 수 있음. 시력이 있는 사람은 30-45분마다 휴식을 취하는 것이 좋음. 인내와 연습이 필요하며, 이를 통해 세상에 대한 새로운 인식을 얻을 수 있음.

        Hacker News 의견

     * 오디오 믹싱 엔지니어들은 믹스에서 소리의 위치를 고려하며, 현실 환경을 시뮬레이션하는 것에서 시작해 사람들이 기대하는 소리를 만들어내는 것에 집중함
          + 예를 들어, 영상 오디오 작업에서 기차 안에서 글을 쓰는 장면에서는 실제로 들리지 않지만, 시청자들은 펜 소리를 기대함
          + 폭발음은 마이크가 클리핑되어 왜곡됨
          + 관련 도서로는 David Gibson의 ""The Art of Mixing""이 있음
     * ""A Sense of the World""는 James Holman이라는 맹인이 세계를 여행한 이야기를 다룬 책으로, 초기의 지팡이를 이용한 반향 위치 측정 혁신가 중 한 명임
     * 수영장에서 만난 맹인이 공간을 자유롭게 탐색하는 것을 보고 인간의 반향 위치 측정 능력을 알게 됨
     * 어릴 때 벽 근처에 있을 때 소리로 공간의 크기를 느낄 수 있었지만, 직접적인 소리 반사를 이용한 ""핑""을 시도해본 적은 없었음
          + 사람들이 클릭 소리를 내어 반향 위치를 측정하는 것을 알고 나니 더 명확해짐
     * 휴대용 초음파 발신기를 사용하여 매 초마다 펄스를 보내고, 이어피스를 통해 가청 범위의 음향을 재생하는 실험 아이디어가 흥미로움
     * 인간의 반향 위치 측정에서 가장 어려운 부분은 명확한 클릭 소리를 내는 것임
          + 소리를 처리하는 부분은 뇌가 쉽게 처리할 수 있음
     * 반향 위치 측정 능력의 정확성, 속도, 환경, 세부 사항에 대한 이해가 부족함
          + 일상적으로 사용하기에 실용적인지에 대한 의문이 있음
     * 돌고래의 반향 위치 측정은 시각적인 정보와 유사한 양의 정보를 제공하며, 150킬로헤르츠의 높은 주파수를 사용하여 공간 해상도를 높임
          + 100미터 이상의 거리에서는 효과가 떨어짐
     * 관련 기사 및 연구:
          + ""Humans Can Learn to Echolocate"" (Livescience, 2015)
          + ""How humans echolocate 'like bats'"" (BBC, 2018)
          + ""Humans Can Learn How to 'Echolocate' in 10 Weeks, Experiment Shows"" (Sciencealert, 2021)
          + ""Teach yourself to echolocate"" - 106 comments
     * ""Treat yourself to a chocolate""로 잘못 읽은 경험 공유
"
"https://news.hada.io/topic?id=17811","Show GN: 흑백투자자: 개미 계급 전쟁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 흑백투자자: 개미 계급 전쟁

   ""본인이 생각하는 가장 완벽한 투자는 뭔가요?""
   ""제가 중요하게 여기는 건 투자의 균형인데, 이 포트폴리오는 이븐하게 구성되지 않았어요.""
   ""투자의 세계는 넓어요, 좀 더 다양한 자산에 관심을 가져보세요.""

   종목명/자산의 비중을 입력하면, 안성재 셰프의 어록을 패러디하는 AI가 심사합니다.
     * Cursor로 기획 시작한지 하루만에 개발까지 완료했습니다.
     * 파인튜닝이나, vector storage 대신 그냥 프롬프트에 패러디 예시를 때려넣었습니다.
     * 웹사이트 호스팅도 storage 비용 아까워서 URL에 데이터를 저장해서 결과페이지에서 랜더링하는 방식으로 구성했습니다.

   심사위원스러운 사진만 나오면 딱일것 같아요 ㅋㅋㅋ

   귀여운 벨루가 셰프의 이미지를 넣어드렸습니다~
"
"https://news.hada.io/topic?id=17795","GlazeWM - Windows용 타일링 윈도우 매니저 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GlazeWM - Windows용 타일링 윈도우 매니저

     * Linux/BSD용 i3 윈도우 매니저와 비슷
     * 키보드 명령으로 창 레이아웃을 구성하고 즉석에서 조정 가능
     * 간단한 YAML 설정
     * 멀티 모니터 지원
     * 특정 윈도우에 대한 룰 커스터마이징 지원
     * 태스크 상태바 Zebar 와 연동 지원

   오 윈도우용 i3라니 멋지네요

   실행하자마자 모든 창을 다 정렬시켜 버려서 기분이 팍 상했읍니다,,

   3.0으로 넘어오면서 Rust로 재작성 해가지고 빠릿해서 좋아요
   옛날에는 애니메이션 지원이 있는 'komorebi'를 썼는데 결국 WinAPI로 구동되는거라 리눅스처럼 매끄럽지 않더라고요.
   그래서 애니메이션은 빼고 그냥 더 빠릿한 GlazeWM으로 넘어갔습니다.
"
"https://news.hada.io/topic?id=17829","iOS 18 비활성화 재부팅 리버스 엔지니어링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       iOS 18 비활성화 재부팅 리버스 엔지니어링

     * iOS 18은 새로운 비활성화 재부팅 보안 기능을 도입했음 : ""3일간 잠금 해제 되지 않으면 자동 재부팅""
     * 아이폰을 켜고 처음으로 암호를 입력하는 것과 나중에 잠금을 해제하기 위해 암호를 입력하는 것은 매우 다름
     * iPhone을 처음 시작할 때 암호를 입력하면 Secure Enclave Processor(SEP)의 키 저장소가 열리며, 이는 iPhone의 데이터를 암호화함
          + 첫 번째 잠금 해제 전(BFU) 상태에서는 사용자 데이터가 암호화되어 있으며, Face ID와 Touch ID가 작동하지 않고 암호 입력이 필요함. Wi-Fi 비밀번호가 암호화되어 있어 Wi-Fi 연결이 불가능하지만, SIM이 PIN으로 보호되지 않은 경우 셀룰러 네트워크에는 연결 가능함. 알림 내용 미리 보기 표시 안 됨.
          + 첫 번째 잠금 해제 후(AFU) 상태에서는 사용자 데이터가 복호화됨. iOS가 실행되는 동안 키 저장소가 열려 있어 Wi-Fi 연결과 메시지 알림 미리보기가 가능함. 그러나 이 상태는 공격에 더 취약함.
     * AFU 상태의 보안 약점: 공격자가 잠금 화면 우회 시 복호화된 데이터에 접근 가능. 물리적 접근 시 USB, Wi-Fi, Bluetooth, 또는 하드웨어 공격 취약점 이용 가능성 증가

  iPhone 재부팅에 대한 소문

     * 법 집행 기관은 AFU 상태에서 포렌식적으로 중요한 데이터를 얻기 위해 iPhone을 인터넷에서 격리된 상태로 유지함.
     * iOS 18에서는 iPhone이 무선 네트워크와 완전히 격리되어 있어도 재부팅된다는 소문이 있음
     * 또한, iOS 18의 iPhone이 더 낮은 iOS 버전의 iPhone에 무선으로 재부팅을 지시할 수 있다는 주장도 있음(기술적으로 가능성 낮음)

  비활성화 재부팅 기능 발견

     * Apple은 새로운 기능을 추가할 때 디버그 문자열을 통해 힌트를 남김
          + iOS 18.1부터 inactivity_reboot 문자열 등장. iOS 18.2에서 inactivity_reboot_enabled로 변경
     * 테스트 결과, 3일(72시간) 동안 잠금 해제되지 않을 경우 비활성화 재부팅 발생하는 것을 확인

  비활성화 재부팅 리버스 엔지니어링

     * Secure Enclave Processor(SEP)는 마지막 잠금 해제 시간을 추적하며, 3일이 초과되면 AppleSEPKeyStore 커널 모듈에 알림.
     * AppleSEPKeyStore 커널 모듈은 사용자 공간에 재부팅을 시작하도록 알림. SpringBoard는 모든 사용자 공간 프로세스를 안전하게 종료함.
     * 재부팅 후, keybagd는 NVRAM 변수 ""aks-inactivity""를 읽고, 설정된 경우 Apple에 분석 이벤트를 보냄.
     * 재부팅 실패 시 커널 패닉 발생

  Secure Enclave Processor 역공학

     * SEP는 Apple의 가장 보호된 비밀 중 하나이며, 펌웨어는 암호화되어 있음.
     * SEP 펌웨어는 여러 앱으로 구성되어 있으며, SEPKeyStore와 관련된 앱은 ""sks""로 불림.
     * SEP는 3일(72시간)을 초과할 경우 메시지를 생성하여 SEPKeyStore 커널 확장에 보냄.

  경찰만을 겨냥한 대책인가?

     * 보안 개선 효과: 언론에서는 이 기능이 주로 법 집행 기관을 겨냥한 것으로 보도했지만, 도난 방지 측면에서 큰 보안 향상이 이루어짐.
          + 구형 법 집행 장비는 종종 eBay 같은 플랫폼에서 저렴하게 판매되는데, 도둑들이 이를 이용해 iPhone 데이터를 접근하는 사례를 줄임.
          + 도둑들이 최신 해킹 도구를 구하거나 3일 내 기기를 해제할 재원을 확보하는 것은 현실적으로 어려움.
     * 기기 업데이트의 중요성: 최신 iOS 버전을 유지하는 것은 개인 데이터를 안전하게 보호하는 데 매우 중요함.
     * 법 집행 기관의 적응 필요:
          + 법 집행 기관은 데이터 추출 절차를 3일 내에 완료하도록 조정할 필요가 있음.
          + 일부 포렌식 도구 제조업체들은 이미 24시간 내 데이터 추출 절차를 조율할 수 있다고 발표.
          + 이는 AFU 상태에서만 데이터를 추출할 수 있는 한계를 보여줌.
     * 보안 위협 비대칭성:
          + 도둑들에게는 이 기능이 사실상 데이터를 얻기 어렵게 만들어 주요 보안 장벽으로 작용.
          + 반면, 법 집행 기관은 프로세스를 간소화하고 더 빠르게 대응해야 하는 부담이 있음.

  주요 요점

     * 무선 활동과는 무관함:
          + 이 기능은 무선 네트워크 활동과 관련이 없음.
          + 법 집행 기관 문서에서 언급된 ""기기간 무선 통신으로 인한 재부팅"" 주장은 신뢰하기 어려움.
          + iOS 18 이전 기기의 재부팅은 소프트웨어 버그 때문일 가능성이 높음.
     * SEP의 역할:
          + 비활성 상태 시간 측정과 재부팅 트리거는 SEP에서 수행.
          + SEP는 SEPKeyStore 커널 확장과 통신하여 재부팅 명령을 실행.
          + 인터넷 또는 셀룰러 네트워크를 통한 외부 시간 조작이 3일 타이머에 영향을 미치지 않을 가능성이 높음.
     * 강력한 보안 기능:
          + 공격자가 비활성 재부팅을 막으려면 커널 코드 실행 권한이 필요.
          + 포렌식 분석가는 데이터 추출을 위해 재부팅을 지연시킬 수 있을지라도, 최초 해킹은 3일 내에 이루어져야 함.
     * 위협 환경의 변화:
          + 도둑과 포렌식 분석가 모두에게 새로운 도전 과제를 제시.
          + 도둑들에게는 iPhone에 저장된 은행 계좌 및 기타 민감한 데이터 접근을 사실상 차단함.
          + 법 집행 기관은 데이터 접근을 위해 더 빠르게 대응해야 하는 압박을 받게 됨.

        Hacker News 의견

     * AFU 상태에서 사용자 데이터가 해독됨. 개발자는 데이터 보호를 위해 다양한 키를 선택할 수 있음. Apple은 사용자의 건강 데이터와 같은 민감한 정보를 보호하기 위해 특정 키를 사용함
          + Apple의 데이터 보호 클래스에 대한 정보는 여기에서 확인 가능함
     * 네트워크에 연결되지 않는 부분에 너무 많은 강조가 있는 이유에 대한 의문이 제기됨. GrapheneOS는 이미 일정 시간 후 자동 재부팅 기능을 제공하고 있으며, 이는 데이터 유출 방지에 효과적임
     * 두 가지 질문이 제기됨:
          +
              1. 잠긴 iPhone을 3일마다 무조건 재부팅하면 합법적인 사용 사례에서 문제가 발생할 수 있음
          +
              2. 기사가 맞다면, 보안을 위해 ""Before First Unlock"" 상태로 돌아가기 위해 재부팅한다고 함. 왜 재부팅 없이 이 상태로 전환할 수 없는지에 대한 의문이 있음
          + 보너스 질문: Android 폰은 몇 시간 동안 움직임이 없을 때 재부팅 후처럼 비밀번호를 요구함. 이는 iPhone의 ""Before First Unlock"" 상태와 다른지에 대한 궁금증이 있음
     * Apple이 SEP 펌웨어를 암호화하는 이유에 대한 궁금증이 제기됨. 보안 모델에 필수적이지 않다면 지적 재산 보호를 위한 것일 수 있음
     * Apple이 기기 보안에서 앞서 나가는 모습을 보여주는 훌륭한 글임
     * iOS 18이 다른 폰에 무선으로 재부팅을 지시할 가능성에 대해 언급했으나, 이후 다시 다루지 않은 것 같음
     * AOSP의 BFU와 AFU 잠금 해제 방식과 유사하다는 의견이 있음
     * Secure Enclave에서 관리되고 있을 것이라고 의심됨. 이는 iOS가 완전히 손상되더라도 비활성화하기 매우 어려울 것임
     * 왜 3일이라는 특정 시간이 설정되었는지, 사용자 설정 가능한 지연이 아닌 이유에 대한 질문이 있음
     * 훌륭한 글에 감사하며, 훌륭한 분석임
"
"https://news.hada.io/topic?id=17800","Show HN: 마감 비용 피해 방지를 위한 무료 Mortgage Analysis Tool","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show HN: 마감 비용 피해 방지를 위한 무료 Mortgage Analysis Tool

     * 모기지 마감 시 주의사항
          + 숨겨진 수수료를 찾아 돈을 절약할 수 있는 무료 DIY 솔루션 제공
          + 모기지 분석 및 샘플 보고서 제공
     * 사용 방법
          + 모기지 마감 문서 업로드: 대출 견적서나 마감 공시를 업로드하면 AI와 데이터 소스를 사용하여 숨겨진 수수료, 더 나은 금리, 협상 가능한 항목 및 기타 잠재적 문제를 분석함
          + 보고서 검토: 고급 AI 알고리듬이 데이터를 자동으로 처리하고 분석하여 수동으로 식별하기 어려운 귀중한 통찰력과 패턴을 추출함
          + 모기지 브로커나 대출자에게 연락: 분석에 기반한 명확하고 실행 가능한 통찰력과 권장 사항을 받아 더 나은 거래를 협상하는 데 사용 가능
     * 제품 및 서비스 업데이트
          + 모기지 최적화 및 업계 모범 사례에 대한 전문가 통찰력 제공
     * 자주 묻는 질문
          + 모기지 대출 견적이란 무엇인가?
          + Closing.wtf의 비용은 얼마인가?
          + 마감 비용이란 무엇인가?
          + 대출 견적서에 나열된 서비스 중 일부를 쇼핑할 수 있는가?
          + 다른 대출자의 대출 견적을 어떻게 비교할 수 있는가?
     * 개인정보 보호 및 보안
          + 데이터의 안전한 관리 및 최상의 거래 보장을 위한 노력
     * 솔루션
          + 부동산 중개인, 모기지 브로커, 모기지 대출자, 기업을 위한 맞춤형 솔루션 제공

        Hacker News 의견

     * 한 사용자는 사람들이 사기를 당했거나 사기인지 확인이 필요한 경우 도움을 요청한다고 말함. 금융 문서를 업로드할 때 주의사항을 강조하며, 신뢰할 수 있는 회사인지 확인해야 한다고 조언함
          + 회사가 잘 알려진 경우, 예를 들어 주요 은행이고 주소 표시줄의 도메인이 일치하는 경우
          + 최소한 사업 주소와 전화번호가 있는 경우
          + 돈을 절약하거나 필요하다고 주장하며 개인 문서를 업로드하라고 하는 경우를 피해야 함
          + ""closing.wtf""라는 이름은 등록되지 않은 합법적인 사업이 아니며, 이는 피해야 할 경고 신호임
          + 무료 사이버 보안 분석을 제공할 의향이 있다고 언급함
     * 다른 사용자는 개인정보 보호 및 보안 측면이 신뢰를 주지 않는다고 언급함. ""사기 당하지 말고, 무작위 웹사이트에 모기지 문서를 업로드한 후 사기를 당하라""는 생각이 들었다고 함
     * 부동산 중개사 면허를 가진 사용자는 마감 비용을 최적화하려고 하지 않는다고 말함
          + 대출을 비교하는 것은 당연하지만, 마감 비용은 사기라고 생각함
          + 거래의 최악의 부분을 이해하는 데 시간을 써야 한다고 강조함
          + 집단 소송 변호사들이 이러한 수수료를 최적화하는 데 신경 써야 한다고 언급함
     * 한 사용자는 개인 정보를 삭제한 대출 견적서를 시스템이 처리하지 못했다고 언급함. 왜 그 정보가 필요한지 이해하지 못한다고 함
     * 다른 사용자는 AI 제품 창업자가 문서를 분석하여 숨겨진 최적화를 찾는다고 설명함. 실제로는 창업자가 직접 문서를 검토하고 보고서를 작성했다고 함
     * 또 다른 사용자는 문서를 업로드할 때 오류가 발생했다고 언급함. 대출 견적서와 마감 공시서의 차이를 자동으로 구분할 수 있어야 한다고 제안함
     * 사용자는 ""덜 지불하고 싶다""와 ""AI가 작성한 문서를 가지고 덜 지불하고 싶다""의 차이를 이해하지 못한다고 함. 문서의 목적에 대해 의문을 제기함
     * 사용자는 이 도구가 구체적으로 무엇을 하는지 궁금해함. 수수료가 평균보다 높은지, 무가치한 서비스에 비용을 지불하고 있는지 확인하는지 묻고 있음
     * 한 사용자는 이 도구가 유용하다고 생각하지만, 샘플 보고서를 보기 위해 불필요하게 샘플 대출 견적서를 다운로드하고 업로드했다고 언급함. ""샘플 보고서 보기"" 버튼을 더 눈에 띄게 만들어야 한다고 제안함
     * 관련된 도구로 ""모기지 VS 투자 계산기""가 언급됨. 터미널에서 그래프를 보여주며, 적은 계약금을 넣고 나머지를 투자하는 것이 더 나은지 확인할 수 있음
"
"https://news.hada.io/topic?id=17748","90년대 비디오 게임 개발에 미친 정글 음악의 영향","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      90년대 비디오 게임 개발에 미친 정글 음악의 영향

90년대 비디오 게임 개발에 미친 정글 음악의 영향

     * 정글 음악의 기원과 특징
          + 정글 음악은 80년대 말 영국에서 시작되었으며, 에너지 넘치는 드럼 패턴과 베이스 라인, 빠른 템포가 특징임.
          + 90년대 3D 게임의 빠른 진행과 잘 어울리는 음악 스타일로 자리잡음.
     * 전자 음악의 발전
          + 70~80년대까지 대부분의 악기는 유기적이었으나, 80년대에는 디지털 장비가 음악 제작에 폭넓게 사용되기 시작함.
          + 샘플러와 디지털 신디사이저가 등장하며 전자 음악과 EDM 문화가 형성됨.
     * 정글 음악의 초기 발전
          + 음악 프로듀서들은 샘플러를 사용해 기존 곡의 드럼 패턴을 샘플링하여 새로운 트랙을 제작하기 시작함.
          + ""Amen Break""와 같은 드럼 샘플은 정글 음악에서 매우 유명해짐.
     * 정글 음악의 진화와 하위 장르
          + 정글 음악은 여러 하위 장르로 발전함: 라가, 애트모스페릭, 리퀴드, 재즈스텝, 다크스텝, 테크스텝, 삼바스 등.
          + 각 하위 장르는 독특한 음악적 요소와 스타일을 가지고 있음.
     * 90년대 게임에서의 정글 음악
          + 정글 음악은 90년대의 빠른 진행을 요구하는 게임과 잘 어울렸으며, PlayStation과 Nintendo 64 게임에서 자주 사용됨.
          + 게임의 분위기에 따라 다양한 정글 하위 장르가 사용됨.
     * 주요 게임과 사운드트랙
          + Wipeout: 전자 음악과 레이브 문화의 영향을 받은 게임으로, Tim Wright의 사운드트랙이 특징적임.
          + Rage Racer: Tetsukazu Nakanishi의 작곡으로 유명한 게임.
          + Gran Turismo: Masahiro Andō의 정글 사운드트랙이 포함됨.
          + Ape Escape: Soichi Terada의 정글 음악이 게임의 다양한 상황에 맞춰 사용됨.
     * 정글 음악의 문화적 영향
          + 정글 음악은 자메이카 문화와 강하게 연관되어 있으며, 자메이카 음악의 요소를 많이 포함함.
          + 영국의 레이브 문화와 자메이카 사운드 시스템의 결합으로 정글 음악이 발전함.
     * 추가 자료
          + Martin James의 ""State of Bass""는 정글 음악의 사회적, 문화적, 음악적 배경을 탐구하는 책임.
          + PlayStation 프로그래밍 강의는 3D 폴리곤과 오디오 프로그래밍에 대한 정보를 제공함.
     * 결론
          + 정글 음악과 90년대 게임의 결합은 흥미롭고 지속적으로 새로운 발견을 가능하게 함.
          + 정글 음악의 영향은 여전히 많은 게임과 음악에 남아 있음.

        Hacker News 의견

     * 92/93년대 Jungle 음악 믹스를 공유하고 싶음. 이 시기의 음악은 매우 신선하고 미래를 창조하는 느낌이었음
          + DJ SS, Higher Sense, Deep Blue 등 다양한 아티스트의 곡이 포함되어 있음
          + SoundCloud 링크
     * 드럼 앤 베이스보다 Jungle을 선호함
     * 최근 1년 동안 트래커를 배우며 많은 재미를 느꼈음
          + 저렴한 MIDI 키보드와 샘플을 사용하여 음악을 만들 수 있음
          + 유튜브에 많은 학습 자료가 있어 쉽게 배울 수 있음
          + 오래된 하드웨어의 소리를 재현하는 것도 흥미로움
          + 추천 유튜브 채널: Bizzy B, Groovin in G, Stranjah
     * PS1과 함께 자라며 Jungle 음악을 많이 경험했음
          + 배경 음악으로 듣기에 완벽하고 다재다능함
          + PS1 레이싱 게임의 사운드트랙이 뛰어났음
          + Noclip의 Wipeout 2097 음악 다큐멘터리 추천
     * Buck Bumble의 테마곡은 스피드 개러지를 선택하여 펑키한 느낌을 줌
     * Squarepusher의 ""Feed Me Weird Things""는 Jungle을 떠올리게 함
          + ""Tundra""는 걸작임
     * Jungle은 매우 인상적임
     * 전자 음악과 게임 개발은 기술적 관여로 자연스럽게 연결됨
          + Jungle은 당시 매우 인기 있었고, 게임 산업과 함께 발전함
"
"https://news.hada.io/topic?id=17754","Jepsen: Bufstream 0.1 검증 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Jepsen: Bufstream 0.1 검증 결과

업데이트_2024-11-13

     * 초기 보고서에서는 auto-commit이 활성화된 소비자가 최근 poll에서 반환된 오프셋을 자동으로 커밋하여 데이터 손실이 발생할 수 있다고 주장했음.
     * 그러나 여러 독자들은 auto-commit 소비자가 실제로는 최근 poll이 아닌 그 이전 poll의 오프셋을 커밋한다고 반박했음.
     * Java Kafka 클라이언트 실험 결과도 이를 뒷받침하며, 클라이언트마다 다르게 동작할 수 있음.
     * auto-commit에 대한 구체적인 주장을 보고서에서 제거했으며, 추가 연구가 필요함.

배경

     * Kafka는 복제, 샤딩, append-only 로그를 제공하는 인기 있는 스트리밍 시스템임.
     * Bufstream은 클라우드 환경에서 데이터 거버넌스와 비용 효율성을 우선시하는 Kafka의 대체 솔루션임.
     * Kafka와 유사하게 Bufstream은 _토픽_이라 불리는 부분적으로 정렬된 로그 모음을 제공하며, 각 토픽은 _파티션_으로 나뉨.
     * Bufstream은 표준 Kafka 클라이언트와 호환되며, Kafka API를 제공하는 무상태 서비스인 에이전트, 데이터를 저장하는 오브젝트 스토어, 그리고 _조정 서비스_로 구성됨.
     * Bufstream은 데이터 저장을 오브젝트 스토리지 서비스에 직접 기록하여 비용을 절감하고, 무상태, 자동 확장 가능한 VM으로 운영될 수 있음.

  클라이언트 안전성

     * Bufstream은 다양한 스트리밍 애플리케이션을 위해 설계되었으며, 안전한 동작을 위해 다양한 클라이언트 구성 옵션을 설정함.
     * Kafka와 마찬가지로 acks = all을 기본으로 사용하며, enable.auto.commit = false로 설정하여 데이터 손실을 방지함.
     * auto.offset.reset = earliest를 사용하여 소비자가 전체 로그를 관찰할 수 있도록 함.

  트랜잭션

     * Bufstream은 Kafka의 트랜잭션 시스템을 지원하며, 복잡한 구성을 통해 약한 형태의 원자성을 제공함.
     * 소비자는 read_uncommitted 또는 read_committed 격리 수준에서 실행될 수 있으며, read_committed는 일부 현상(G1a, G1c)을 방지함.
     * Kafka, Redpanda, Bufstream 모두에서 G0 현상이 발생하며, 이는 문서화된 격리 수준과 일치하지 않음.

테스트 설계

     * Bufstream 0.1.0부터 0.1.3까지 테스트했으며, Jepsen 테스트 라이브러리와 Java Kafka Client를 사용함.
     * 테스트는 다양한 결함을 주입하여 Bufstream의 안전성을 평가함.

  큐

     * Kafka의 데이터 모델에 맞춘 큐 작업 부하를 설계하여 Bufstream에서 사용함.
     * 각 논리적 프로세스는 프로듀서, 소비자, 관리자 클라이언트를 실행하며, 다양한 키에 대해 레코드를 전송함.

  중단

     * 예상치 못한 결과를 바탕으로 트랜잭션을 중단하고 오프셋을 추적하는 작업 부하를 설계함.
     * 중단된 트랜잭션 후의 오프셋을 네 가지 범주로 분류함: 진행, 되감기, 더 되감기, 기타.

Bufstream 결과

  멈춘 소비자 (#1)

     * 0.1.0부터 0.1.3-rc.8까지 consumer.poll() 호출이 즉시 반환되며 레코드를 반환하지 않는 문제가 발생함.
     * Bufstream은 0.1.3-rc.6에서 캐시를 새로 고침하여 문제를 해결함.

  멈춘 프로듀서 및 소비자 (#2)

     * 0.1.3-rc.6에서도 InitProducerId 호출이 실패하거나 listOffsets 호출이 실패하는 문제가 발생함.
     * Bufstream은 추가 폴링 로직을 추가하여 문제를 해결함.

  잘못된 0 오프셋 (#3)

     * 0.1.0부터 0.1.3-rc.2까지 잘못된 0 오프셋이 할당되는 문제가 발생함.
     * Bufstream은 0.1.3-rc.6에서 이 문제를 해결함.

  트랜잭션 쓰기 손실 (#4)

     * 0.1.2에서 커밋된 트랜잭션의 레코드가 사라지는 문제가 발생함.
     * Bufstream은 0.1.3-rc2에서 문제를 해결함.

  서버 측 필터링으로 인한 쓰기 손실 (#5)

     * 0.1.3-rc.8에서 경미한 결함에 반응하여 쓰기 손실이 발생함.
     * Bufstream은 0.1.3-rc.12에서 문제를 해결함.

Kafka 결과

  오해의 소지가 있는 오류 메시지 (KIP-588)

     * ProducerFencedException이 트랜잭션 타임아웃에도 발생하는 문제가 있음.
     * Kafka 팀에 오류 메시지 변경을 권장함.

  소비자 종료 시 무한 대기 가능성 (KAFKA-17734)

     * Consumer.close() 호출이 네트워크 IO에서 무한 대기하는 문제가 있음.
     * KAFKA-17734를 통해 문제를 추적함.

  트랜잭션 실패 후 예측 불가능한 소비자 오프셋 (KAFKA-17582)

     * 트랜잭션 실패 시 소비자 오프셋의 의도된 동작에 대한 문서가 부족함.
     * 소비자가 중단된 트랜잭션 후 오프셋을 되감거나 계속 진행할 수 있음.

        Hacker News 의견

     * Kafka에서 발생하는 문제를 조사하던 중, 보이지 않는 쓰기가 발견됨. 이는 지연된 Produce 메시지가 미래의 트랜잭션에 포함되어 트랜잭션 보장을 위반할 가능성을 제기함. Kafka Java Client가 요청 시간 초과 시 시퀀스 번호를 재사용할 수 있다는 의심도 있음. 더 많은 Kafka 테스트가 필요함
          + Jepsen이 Kafka에 대한 심층 조사를 다시 해야 할 것 같음. 마지막 조사는 2013년에 있었고, Kafka 자체에서 많은 문제를 발견할 가능성이 있음. ""쓰기 확인 후 조용히 폐기"" 같은 문제는 매우 심각해 보임
     * Bufstream의 제품 페이지를 보고 두 가지 진술이 어떻게 호환되는지 궁금함
          + Bufstream은 AWS 또는 GCP VPC 내에서 완전히 실행되어 데이터, 메타데이터 및 가동 시간을 완전히 제어할 수 있음. Bufstream은 절대 외부와 통신하지 않음
          + Bufstream의 가격은 단순함: 압축되지 않은 GiB당 $0.002 (약 $2 per TiB). 코어, 에이전트, 호출당 요금은 없음
          + 전체 사업을 신뢰 시스템에 기반하여 운영할 것 같지는 않음
     * Kafka의 auto-commit 기능에 대해 놀라움을 느낌
          + Kafka 소비자는 실제로 처리되었는지 여부와 관계없이 오프셋을 자동으로 커밋할 수 있음. 이는 소비자가 레코드를 폴링하고 커밋한 후 충돌하면 레코드가 손실될 수 있음을 의미함
          + 문서에 따르면, auto-commit이 활성화되면 poll 메서드가 호출될 때마다 반환된 메시지의 오프셋을 자동으로 커밋할 준비가 됨. 메시지 처리가 완료되지 않으면 충돌 시 메시지 진행이 손실될 위험이 있음
          + auto-commit 간격을 조정하면 중복 처리에 도움이 되지만 메시지 손실에는 도움이 되지 않음
     * Kafka 트랜잭션 프로토콜이 근본적으로 문제가 있으며 수정이 필요함
          + 훌륭한 조사 작업과 작성임
     * Kyle이 NATS Jetstream을 검토했는지 궁금함
     * bufstream의 GitHub 프로젝트를 찾지 못했음. 단서가 있는지 궁금함
     * 관련 블로그 게시물과 문서를 읽은 후, Kafka는 ""정확히 한 번 전달""을 ""읽기-처리-쓰기 작업""의 속성으로 정의함. 이는 트랜잭션으로 설명하는 것이 더 나을 것 같음
     * ""트랜잭션은 일부 또는 전체를 관찰할 수 있음""이라는 문구는 ""소비자는 일부 또는 전체를 관찰할 수 있음""으로 읽어야 할 것 같음
     * 이 소프트웨어는 무엇에 사용되는지 궁금함. 계측? 블랙박스?
"
"https://news.hada.io/topic?id=17816","스태프(Staff) 엔지니어란 무엇인가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         스태프(Staff) 엔지니어란 무엇인가?

     * 스태프 엔지니어가 정확히 뭘하는지에 대한 질문을 자주 받아서, 스태프 엔지니어 역할에 대해 얘기하고자 함

스태프 플러스 (Staff+) 엔지니어의 정의

     * 스태프 플러스는 Senior 엔지니어 이상의 기술적 위치에 있으나, 관리 직책을 맡지 않는 엔지니어.
     * 기술 커리어 트랙위에서 계속 성장하려는 경향이 있음.
     * 조직마다 다르지만 보통 다음과 같은 공통된 특징을 가짐:
          + 전문성: 특정 분야에서 높은 수준의 기술력 보유.
          + 리더십: 팀을 이끌고 제품을 성공적으로 출시한 경험이 풍부함.

스태프 플러스 엔지니어의 주요 기술

     * 핵심 기술 (Core Technical Skill)
          + 이 역할을 효과적으로 수행하는 데 필요한 기본 스킬이며, 고도로 숙련되어야 함
          + 깊은 기술적 지식과 다양한 시스템 및 환경에서의 광범위한 경험이 필요함
          + 복잡한 문제 해결을 위해 이러한 경험을 활용하여 팀의 목표를 달성함
          + 단순한 기술 역량만으로는 성공하기 어렵고, 다른 기술과 결합되어야 함
     * 제품 관리 (Product Management)
          + 무엇을, 왜 만들어야 하는지 결정할 수 있는 역량을 보유해야 함
          + 팀/프로젝트/조직의 목표를 보고, 이력을 이해하며, 그 목표 달성을 위한 기술적 비전을 개발하고 제시
          + 주요 이해관계자 및 엔지니어링팀에 이 비전을 전달하고 동의를 구하는 소통 능력 필수
          + 종종 테크니컬 아키텍트 역할을 수행함
     * 프로젝트 관리 (Project Management)
          + 큰 작업을 작은 단위로 분할하고, 계획 및 타임라인을 수립하여 관리함.
          + 불확실성이나 리스크를 식별하고 이를 해결하는 능력이 필요함.
          + 기본적인 프로젝트 관리 기본 사항에 대한 숙달 필요
          + 프로젝트 매니저를 대체하는 것이 아니라 상호 보완적인 역할 수행.
     * 사람 관리 (People Management)
          + 목표 달성을 위해 팀을 결집하고 이끄는 능력
          + 멘토링 역량이 중요하며, 기술적/경력적 지침을 제공하고 팀원들의 성장을 돕는 역할 수행.
          + 팀의 강점과 성장 가능성을 파악하고, 이를 기반으로 팀의 효율성을 높임.

‘Glue Work’의 중요성

     * 스태프 플러스 엔지니어는 이런 기술들을 자율적으로 조합해 팀에서 발생하는 여러 가지 문제를 해결함으로써 팀의 원활한 운영을 돕는 어려운 역할을 수행
          + 눈에 잘 띄지는 않지만 팀 추진력 구축이나 유지에 필요한 고부가가치 작업을 담당
     * Glue(접착제) Work란 고정된 역할은 아니지만 팀의 성공을 위해 필요한 작업을 하는 것을 의미함
     * 예시:
          + 외부 벤더와의 커뮤니케이션 문제 해결.
          + 증가하는 버그 문제의 근본 원인을 파악하고 해결 방안을 제시.
          + 새로운 업무에 어려움을 겪는 팀원을 지원하고 필요한 리소스를 제공.
          + 불명확한 요구사항을 개선하기 위해 이해관계자와 추가 논의를 주도.
     * 이는 팀의 운영 방식과 최적화가 필요한 영역에 대한 깊은 통찰력 필요
          + 이메일 소통 개선, 버그 해결을 위한 테스트/리팩토링, 멤버 코칭, 마케팅/BI팀과의 커뮤니케이션 등의 작업 포함
     * 이런 작업이 가치 있지만 스태프 엔지니어가 장기적으로 수행하긴 어려움
          + 팀원들의 역량을 높여 이런 책임을 넘기고 다른 우선순위로 포커스 전환

결론

     * 스태프 플러스 엔지니어는 조직 내에서 자율성과 영향력을 가지고 의미 있는 가치를 창출할 수 있어야 함
     * 단순히 코드 작성뿐만 아니라, 팀의 방향성 설정과 기술적 의사 결정을 주도하는 리더십이 중요함

추가 질문 및 답변

     * 스태프 플러스 엔지니어는 멘토링을 해야 하나요?
          + 네, 멘토링은 필수적인 부분임. 팀의 역량을 높이는 데 중요한 역할을 함.
     * 어떤 팀이 스태프 플러스 엔지니어를 필요로 하나요?
          + 이론상 모든 팀에서 필요할 수 있음. 하지만 역할은 팀의 구성에 따라 다름.
     * 상위 스태프 엔지니어의 차별점은 무엇인가요?
          + 영향력의 범위가 다름. 더 높은 수준의 스태프 플러스 엔지니어는 조직 또는 업계 전체에 영향을 줄 수 있음.
     * 왜 특정한 역할이나 기대치를 다루지 않았나요?
          + 역할은 상황에 따라 다르기 때문임. 가장 중요한 것은 자율성을 통해 의미 있는 영향을 만들어내는 것임.
     * 기술적 업무와 리더십 간의 균형은 어떻게 맞출까요?
          + 리더십 역량이 가장 큰 자산임. 기술 작업을 계속하는 것은 좋지만, 주요 역할은 리더십에 초점을 맞춰야 함.

   공유 감사합니다 ㅎ.ㅎ

   이 내용이 스태프 엔지니어 라는 책으로 나와 있습니다. 보통 이런 책은 안 읽는데 읽을만 했습니다. 책의 내용은 스태프 엔지니어라고 불릴만한 다른 사람과의 인터뷰 내용을 실어 두었습니다.
   기술직의 마지막 즈음이라면, 그리고 시간이 되면 한번쯤 읽어 볼만 합니다. 결과적으로는 여기에 정리된 내용으로 요약 되지만.. 그리고 나와 상황이 다를 수도 있지만, 다른 사람들의 경험을 읽어볼수 있으니 괜찮았습니다.

   https://m.yes24.com/Goods/Detail/112904809
"
"https://news.hada.io/topic?id=17820","좋은 소프트웨어 개발 습관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             좋은 소프트웨어 개발 습관

     * 이 글은 조언이 아닌, 저자가 현재 적용하고 있는 개발 습관들에 대해 작성한 내용
     * 나쁜 습관을 피하고 좋은 습관을 만들기 위해 노력한 경험을 정리한 글로, 생산성 향상과 품질 유지에 도움이 되었던 10가지 습관을 다룸

    1. 작은 커밋 유지

     * 커밋을 최대한 작게 유지해야 함. 작은 커밋은 버그 발생 시 특정 커밋만 되돌릴 수 있게 하여, 복잡한 병합 충돌을 피할 수 있음
     * ""소프트웨어가 컴파일될 때 커밋할 수 있어야 한다""는 것을 규칙으로 삼음

    2. 지속적인 리팩토링

     * Kent Beck의 조언: ""변화를 원할 때, 먼저 변화를 쉽게 만들고, 그런 다음 쉽게 변화를 만드세요.""
     * 최소 절반의 커밋은 리팩토링이 포함되도록 함. 작은 리팩토링이 큰 요구사항이 들어올 때 큰 도움이 됨
     * 큰 리팩토링은 피해야 함. 대신 10분 이내의 작은 개선 작업을 지속적으로 수행

    3. 코드 배포의 중요성

     * 코드 자체는 잠재적 부채이며, 배포되지 않은 코드는 가장 큰 부채임
     * 테스트는 신뢰감을 주지만, 실제 배포는 진정한 승인을 의미함
     * 배포 빈도가 높아질수록 호스팅 비용이 증가할 수 있지만, 최신 작업이 실제로 작동함을 확인하는 것은 중요한 이점임

    4. 프레임워크의 기능 테스트하지 않기

     * 프레임워크의 기능을 테스트하지 않음. 프레임워크는 이미 충분히 검증되어 있음
     * 컴포넌트를 작게 유지하면 프레임워크가 대부분의 작업을 처리하게 되어 테스트가 줄어듦
     * 큰 컴포넌트는 복잡성을 추가하고, 이에 따라 많은 테스트가 필요해짐

    5. 새로운 모듈 생성

     * 특정 기능이 기존 모듈에 맞지 않는다면, 새 모듈을 생성하는 것이 좋음
     * 기존 모듈에 억지로 기능을 추가하는 것보다 독립적인 모듈로 남겨두는 것이 나음

    6. 테스트 주도 개발(TDD)의 유연한 적용

     * API 설계가 명확하지 않을 경우 테스트를 먼저 작성하여 ""고객""의 입장에서 생각함
     * TDD는 종교적인 원칙으로 따르지 않음. 필요한 경우 더 큰 단위로 작업 후 테스트할 수 있음
     * 작은 단위의 코드를 실패 상태로 만들지 않아도 되며, 생산성을 저해하는 교조주의에 얽매이지 않음

    7. 복붙은 한 번만 허용

     * 한 번의 복사는 괜찮지만, 두 번째 복사부터는 중복이 생김
     * 이 시점에서 적절한 추상화를 통해 중복을 제거해야 함. 파라미터화가 약간 이상해 보여도, 여러 구현을 합치는 것보다는 나음

    8. 디자인의 변화 수용

     * 디자인은 시간이 지나면서 낡아짐. 리팩토링을 통해 노화를 늦출 수 있지만 결국에는 바뀔 수밖에 없음
     * 이전의 디자인을 너무 집착하지 말고, 변화를 받아들여야 함
     * 완벽한 디자인은 없으며, 변화에 잘 대처하는 능력이 소프트웨어 개발의 핵심임

    9. 기술 부채의 세 가지 유형

     * 기술 부채는 세 가지 유형으로 분류할 수 있음:
         1. 현재 작업을 방해하는 것
         2. 미래 작업을 방해할 가능성이 있는 것
         3. 방해할 가능성이 있을지도 모르는 것
     * 첫 번째 유형의 부채는 최소화하고, 두 번째 유형에 집중하며, 세 번째 유형은 무시해야 함

    10. 테스트 가능성과 좋은 설계의 관계

     * 테스트하기 어렵다면 설계에 문제가 있을 가능성이 높음
     * 테스트 설계 또한 개선의 대상이 될 수 있음. 예를 들어, em.getRepository(User).findOneOrFail({id})의 목(Mock) 작성을 어렵게 느낀다면, 별도의 함수로 분리하거나 테스트 유틸리티를 사용하는 것이 좋음
     * 테스트가 작성되지 않는 이유는 테스트하기 어렵기 때문이며, 이는 설계의 문제일 수 있음

   dry보단 srp가 달성돼야 ai한테 맡겨도 헛소리가 안나오더라구요

   얼마나 변화에 빠르게 적응할 수 있는 코드와 환경을 만들었느냐가 제일 중요한 것 같아요.

   그리고 적절한 추상화를 통해 코드 재사용성과 확장성을 높이고, AI 도구를 활용해 개발 속도를 극대화할 수 있어요.

   정말 좋은글입니다. 여기저기 추천해주고싶네요

   변화를 수용하고, 복붙은 한번만, 테스트는 더 잘되도록, 커밋은 더 작게...!

   좋은 글이네요

   이 글은 원본을 꼭 보시면 좋을 것 같아요.
   늘 관심가는 뉴스면 원본을 보곤 하는데 이건 특히나 그러면 좋을 것 같아요 1번을 보면 원글은
   Keep commits small enough that you wonder if you're taking this ""keep commits small"" thing a little too far. 라고 되어있는데 ""커밋을 최대한 작게 유지해야 함"" 이라고 간추려 졌네요..

   정말 좋은 글이네요

   7번은 정말 좋은 내용이네요

        Hacker News 의견

     * 여러 구현을 피하기 위해 매개변수를 사용하는 것이 좋음. 매개변수를 개선하는 것이 여러 구현을 통합하는 것보다 쉬움.
          + ""이상한 매개변수""를 피할 수 없다면, 코드를 분리하는 것이 좋음. 불리언 플래그와 여러 개의 열거형 매개변수를 피해야 함.
          + 복잡한 함수 서명은 유지보수를 어렵게 만듦.
     * 코드 복사는 한 번은 괜찮지만, 두 번째부터는 중복을 피해야 함. 충분한 데이터 포인트가 있을 때 좋은 추상화를 만들어야 함.
          + 코드가 처음에는 같더라도, 변화가 필요할 때 함께 변화해야 하는지에 집중해야 함.
          + 코드 중복을 피하는 것이 목표가 아니라, 함께 진화해야 하는 코드를 함께 유지하는 것이 목표임.
     * DRY(반복하지 말라)나 WET(모든 것을 두 번 작성하라)는 절대적인 규칙이 아님. 코드 중복과 통합의 시점을 이해하는 것이 어려운 문제임.
     * 작은 커밋의 대안으로, 큰 커밋을 되돌리지 않고 버그를 수정하는 새로운 커밋을 추가할 수 있음.
          + 큰 리팩토링이 왜 나쁜지 명확하지 않음.
          + 독립적인 구조를 만드는 것이 기존 모듈에 억지로 넣는 것보다 나음.
          + API 설계 시, 유닛 테스트 대신 디자인 세션을 가질 수 있음.
     * 테스트 가능성은 좋은 설계와 관련이 있음. 쉽게 테스트할 수 없는 것은 설계 변경이 필요하다는 신호일 수 있음.
          + 테스트 코드는 다른 방식으로도 검토되어야 함.
     * 프레임워크의 기능을 테스트할 때 주의해야 함. 프레임워크는 시간이 지나면서 변할 수 있음.
          + 의존성을 업그레이드할 때 안전한지 확인하는 것이 테스트의 중요한 역할임.
     * 커밋 크기에 대해, 특정 변경을 되돌려야 할 때를 대비해 쉽게 되돌릴 수 있는 커밋을 목표로 해야 함.
     * 회사들은 안정적인 코드베이스를 원하지만, 지속적인 리팩토링이 필요함. 이는 안정성과 상충될 수 있음.
"
"https://news.hada.io/topic?id=17750","블루스카이 1300만 사용자 시각화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          블루스카이 1300만 사용자 시각화

13백만 BlueSky 사용자 시각화

     * Twitter와 BlueSky 비교
          + Twitter는 방대한 사용자 기반과 다양한 부분이 있는 큰 플랫폼임.
          + BlueSky는 최근 몇 달 동안 사용자 기반이 급격히 증가했으며, 특히 Twitter의 사용자 기반에 대한 지속적인 적대감과 브라질의 Twitter 금지로 인해 성장함.
          + BlueSky의 데이터를 사용하여 전체 네트워크를 시각화할 수 있음.
     * 데이터 수집
          + BlueSky는 AT 프로토콜을 기반으로 하며, 개인 데이터 서버(PDS)를 통해 데이터를 자가 호스팅할 수 있도록 설계됨.
          + 프로젝트에서는 bsky.network의 WebSocket을 통해 실시간으로 이벤트를 수집하고, 이를 SQLite 데이터베이스에 저장함.
     * 그래프 렌더링
          + 13백만 노드와 5억 개의 엣지를 가진 그래프를 렌더링하는 것은 복잡한 작업임.
          + 포스-디렉티드 레이아웃 알고리듬을 사용하여 그래프를 시각화하며, 이는 물리 시뮬레이션과 유사함.
          + Barnes-Hut 최적화를 사용하여 계산 복잡성을 줄임.
     * Andromeda 엔진
          + Zig로 개발된 멀티스레드 엔진으로, GTK4와 OpenGL을 사용하여 GUI를 만듦.
          + Gephi와 ForceAtlas2 논문에서 영감을 받았으며, 대규모 그래프 시각화를 위한 상호작용성을 강조함.
     * UMAP을 통한 차원 축소
          + UMAP은 2차원 시각화에 뛰어난 성능을 보이는 알고리듬 중 하나임.
          + 노드 임베딩을 통해 UMAP에 입력하여 더 나은 시각화를 얻음.
          + UMAP의 최종 단계에서 포스-디렉티드 그래프를 사용하여 노드 간의 거리를 조정함.
     * 색상 추가
          + UMAP 출력에 클러스터링 알고리듬을 적용하여 색상을 추가함.
          + k-평균 클러스터링을 사용하여 각 클러스터에 색조를 할당하고, 각 노드의 팔로워 수에 따라 밝기를 조정함.
     * 결과 및 향후 계획
          + 시각화는 대규모 클러스터의 밀도와 구조를 명확히 보여줌.
          + 향후 기능으로는 현재 화면에 보이는 계정의 타임라인을 표시하는 사이드바를 추가할 계획임.

        Hacker News 의견

     * BSKY 피드가 활성화되지 않아 흥미를 잃음. 초기 Twitter와 비교하여 새로운 소셜 네트워크가 활발해야 한다고 생각함
     * Bluesky와 atproto는 해킹 가능하게 설계되었음. 커뮤니티에서 Bluesky ""Starter Packs""의 검색 가능한 디렉토리를 구축함
          + Dan Abramov는 이 프로젝트를 칭찬하며, 소셜 회사들이 API를 닫아버린 것이 공공 웹을 억제했다고 언급함
     * Bluesky가 특정 분야에서 급성장 중임. Twitter에서의 대화가 가치가 없어지면서 Bluesky로 옮겨왔고, 최근 활동이 증가함
     * Bluesky가 ""Truth social""의 좌파 버전이 될 것이라 예상함. 글로벌 브랜드로의 전환이 어렵다고 생각함
     * BlueSky API가 훌륭하다고 평가함. 동료가 이를 기반으로 시각화를 제작함
     * Bluesky로 이주한 사용자로서 만족감을 느끼고 있음. Bluesky는 2015년의 Twitter와 유사하지만 광고나 성장 해킹이 없음
     * Bluesky의 시각화가 정보 전달에 효과적이며 시각적으로 매력적이라고 평가함
     * Bluesky의 사용자 이름으로 도메인을 사용할 수 있는 점이 좋음. 검증이 더 의미 있게 이루어짐
     * BlueSky가 현재 긍정적인 상태이며, 계정을 설정하는 것을 추천함
     * BlueSky 매트릭스를 UMAP에 직접 넣을 수 없지만, 다른 기술을 사용하여 사용자 임베딩을 도출할 수 있음
"
"https://news.hada.io/topic?id=17819","제임스 글레이크의 카오스: 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          제임스 글레이크의 카오스: 소프트웨어

     * James Gleick의 CHAOS: 소프트웨어
          + 1991년 Autodesk의 DOS 프로그램인 ""James Gleick's CHAOS: The Software""의 소스, 매뉴얼, 실행 파일의 무료 배포임
          + 소프트웨어는 Josh Gordon, Rudy Rucker, John Walker에 의해 작성되었음
          + Rucker는 대부분의 알고리듬을 작성했으며, Fractal Landscapes 알고리듬은 John Walker가 작성했음
          + Josh Gordon은 인터페이스와 알고리듬 코드 구현의 많은 부분을 담당했음
          + 이 프로그램은 James Gleick의 책 Chaos: Making a New Science 와의 협의를 통해 작성되었음
          + 이 배포는 Gnu 라이선스 하에 있음
     * Release 1.1 다운로드
          + CHAOS 실행 파일과 매개변수 파일
          + CHAOS 사용자 매뉴얼
          + CHAOS 소스 코드
          + DOSBox라는 DOS 셸 안에서 거의 모든 플랫폼에서 Chaos 프로그램을 실행할 수 있음
          + Chaos 코드를 변경하고 새로운 버전을 업로드하거나 알고리듬을 사용하여 작은 프로그램을 만들 수 있음
          + Chaos GitHub 저장소에서 Chaos 코드를 온라인으로 확인 가능
          + Chaos의 주요 업그레이드로는 (1) 디스플레이의 해상도 또는 픽셀 크기 증가, (2) MetaGraphics Software Corporation의 metashel.exe를 제거하는 것 등이 있음
     * Chaos의 구성 요소
          + MANDEL: Mandelbrot Set 프로그램으로, 이차 및 삼차 Julia 집합, 이차 및 삼차 Mandelbrot 집합, Rudy 집합이라는 복잡한 삼차 연결성 맵을 포함함
          + MAGNETS: Pendulum and Magnets 프로그램으로, 혼돈적인 물리적 운동과 프랙탈 흡인 영역을 보여줌
          + ATTRACT: Strange Attractors 프로그램으로, Lorenz Attractor, Logistic Map, Yorke Attractors, Henon Attractors를 보여줌
          + GAME: Barnsley Fractals 프로그램으로, 유명한 프랙탈 고사리와 같은 반복 함수 시스템 프랙탈을 보여줌
          + FORGE: Fractal Forgeries 프로그램으로, 랜덤 프랙탈을 기반으로 한 구름, 지도, 산맥, 행성을 보여줌
          + TOY: Toy Universes 프로그램으로, _cellular automata_를 보여줌

        Hacker News 의견

     * 한 독자는 고등학교 시절 수학에 흥미가 없었으나, 예술적 경력을 위해 수학을 선택했음. 시험에서 U(채점 불가)를 받았으나, 우연히 본 책의 그래픽에 매료되어 수학에 능숙해졌음. 결국 프랙탈이 박사 연구의 중요한 주제가 되었음
     * 다른 독자는 고등학교 시절 Mandelbrot 집합에 대한 발표를 보고 복잡한 수를 이해하게 되었음. BASIC 프로그램을 작성했으나 컴퓨터 성능 문제로 어려움을 겪었고, FRACTINT 프로그램을 통해 최적화의 중요성을 배웠음
     * Gleick의 ""Chaos"" 책을 읽고 프랙탈에 빠져들었으며, 학교 도서관의 386 컴퓨터를 사용해 프랙탈을 렌더링했음. 결국 도서관 사서에게 발각되어 ""해킹""으로 신고되었음
     * Rudy Rucker의 ""Infinity and the Mind"" 책을 읽고 수학 전공으로 돌아가게 되었음. 이 책이 인생을 긍정적으로 변화시켰음
     * 1987년에 ""Chaos""를 읽고 Apple IIe에서 Lorenz attractor를 코딩했음. 수학이 인간이 발명한 것인지, 아니면 우주에 독립적으로 존재하는 것인지에 대한 철학적 대화를 나누게 되었음
     * Rudy Rucker의 GitHub 프로필을 발견하고 그의 작품을 좋아하는 독자는 그의 ""ware tetralogy""를 매우 인상 깊게 읽었음
     * 고등학교와 대학 시절에 ""Chaos"" 책을 읽고 큰 영향을 받았음. 저자가 다양한 연구자들을 잘 설명하고 이론을 이해하기 쉽게 설명했음
     * 복잡성 탐색기(complexity explorer)가 이 분야에 관심 있는 사람들에게 훌륭한 자원임
     * 80년대 말 ""Chaos"" 책이 젊은 수학/컴퓨터 과학 애호가들에게 큰 충격을 주었음. 크리스마스 방학 동안 IBM 286 기계에서 Mandelbrot 드로잉 루틴을 코딩했음
     * ""Chaos"" 책이 사진 저널리즘의 ""혼돈에서 질서를 창조""하는 개념과 관련이 있음을 설명하고, 이 책이 직업 생활 전반에 걸쳐 적용되었음을 강조했음
"
"https://news.hada.io/topic?id=17832","스타트업을 위한 셀프 호스팅 Wiki 설정 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       스타트업을 위한 셀프 호스팅 Wiki 설정 방법

     * Confluence, Notion과 같은 상용 위키 도구는 기능이 풍부하지만, 사용자 수가 증가할수록 비용이 급증함
     * 대부분의 상용 위키는 사용자당 월 약 $5의 요금을 부과하며, 큰 팀에서는 비용이 크게 증가함
     * 셀프 호스팅 솔루션의 경우, 직원 수에 관계없이 비용이 고정되어 비용 절감 효과가 있음
     * 3년 이상의 셀프 호스팅 위키 운영 경험을 통해 Wiki.js를 추천함

  Wiki.js를 선택해야 하는 이유

     * Wiki.js는 Docker Compose를 사용해 간단하게 설치할 수 있으며, 기본 설정은 4GB RAM, 2 vCPU로도 안정적으로 작동함
     * 검색 기능을 강화하고 싶다면 Elasticsearch를 추가할 수 있으며, 이 경우 최소 8GB RAM, 2 vCPU 필요
     * 실제 운영 환경에서는 1,000개 이상의 페이지와 400명 이상의 사용자가 있어도 안정적으로 운영 가능함

  비용 비교

     * AWS EC2에서 Wiki.js를 운영할 경우 예상 비용:
          + t4g.medium 인스턴스: 2 vCPU, 4GB RAM, 월 $16 (예약 시 $10)
          + t4g.large 인스턴스: 2 vCPU, 8GB RAM, 월 $33 (예약 시 $21)
     * 상용 위키 플랫폼에서 400명의 사용자가 있을 경우 월 $2,000 이상의 비용이 발생함
     * 셀프 호스팅에서는 대형 인스턴스를 사용해도 월 $33 이하의 비용 소요
     * 필요 시 인스턴스 크기를 늘리거나 Elasticsearch를 별도의 인스턴스로 분리하여 확장 가능

  프로덕션 환경으로 준비하기

   프로덕션 환경에서 안정적인 운영을 위해 다음의 설정을 권장:
    1. wiki.yourcompany.com과 같은 커스텀 도메인 설정
    2. DNS 설정 및 로드 밸런서를 통해 트래픽 분산
    3. Google SSO 설정 (참고 링크)
    4. 회사 도메인으로 자체 등록 제한 (예: yourcompany.com)
    5. EC2 인스턴스의 시간별 AMI 백업 설정

   좋은 정보 감사합니다! 저도 개인용 위키를 Wiki.js로 구축해봤습니다!

   https://huly.io/ 써보신분은 없을까요?

   우와 장난 아닌 시스템이네요~ 한글이 안되는게 아쉽지만, 정서에 맞는 회사라면 정말 좋은 도구 같아요!

   저는 wikijs 를 oci에 설치 해서 개인 노트로 사용 중
   에버노트 -> joplin -> docuwiki -> wikijs 순으로 와서 만족중 입니다.
   개인적으로는 joplin 이 mardown 코드 잘먹어서 좋았는데 sync 가 오래걸리고 그래서 웹 베이스로 넘어왔죠
   wikijs 강점이 가볍고 mardown 코드 잘먹습니다. github 로 백업도 잘되고..
   소규모 위키에는 강추 드립니다.

   저도 outline이 좋아요

   댓글에서 좋은 서비스들 많이 알아갑니다.

   개인적으로 정리해둔 Notion like-도구로는 다음이 있습니다.
- [SiYuan](https://github.com/siyuan-note/siyuan)
- [anytype](https://github.com/anyproto/anytype-ts)
- [AppFlowy](https://github.com/AppFlowy-IO/AppFlowy)
- [AFFiNE](https://github.com/toeverything/AFFiNE)
- [Outline](https://github.com/outline/outline)
- [Docmost](https://docmost.com/)

   저는 Outline 을 coolify로 라즈베리파이에 굴리고 있어요.

   ...tiddlywiki?

   저희는 docusaurus 사용합니다.

   개인적으로는 Bookstack + Markdown이 편한것 같습니다.

   Wiki.js - Node 기반 오픈소스 위키 엔진
   Outline - 팀을 위한 오픈소스 Wiki 엔진
   Docmost - Confluence & Notion 과 비슷한 오픈소스 협업 문서 및 위키 소프트웨어

        Hacker News 의견

     * Dokuwiki 사용 경험이 있으며, 외부 도구와의 연결이 매우 쉬웠음. Podman에서 Dokuwiki를 실행해보았는데 잘 작동함
          + Podman에서 Dokuwiki를 실행하려면 특정 명령어를 사용해야 함
     * Git 기반의 마크다운 위키를 사용 중이며, 데이터 형식이 이식 가능하여 웹 앱이 종료되어도 문제없음
          + Gitea의 내장 위키를 사용 중이며, 유지보수 부담이 적고 속도가 빠름
     * Wiki.js를 사용해봤으나 버그가 많고 로딩 시간이 길어 다른 대안을 찾고 있음
          + mkdocs를 사용 중이나 사용자 친화적이지 않음
     * Outline을 추천하며, 자체 호스팅 또는 호스팅 버전을 선택할 수 있음
     * 여러 위키 소프트웨어를 시도한 후 Bookstack에 정착함
     * Fossil을 위키로 사용하며, 설정이 간단하여 선호함
     * Wiki.js 대신 Docmost를 선택했으며, 내부 지식 베이스로 적합함
     * Wiki.js의 로딩 시간이 길어 BookStack으로 전환했으며, 빠르고 간단한 환경에서 잘 작동함
     * Confluence가 스타트업에 적합하며, 초기에는 무료로 사용할 수 있음
          + 10명의 사용자가 필요할 때 월 $50의 비용이 발생함
     * 현대의 기준에서 4GB RAM과 2 vCPU가 보통 수준으로 간주됨

   개인 위키 겸 메모장으로 outline을 셀프호스트로 쓰고 있습니다. KeyCloak 같은 OIDC 계정 관리 시스템만 설치되어 있으면 사용 가능하고, 꽤나 성숙했다고 생각합니다. robots.txt 가 기본 deny all 이어서 검색엔진에 안 잡히는 점이 개인 사용으로서는 아쉽지만, 회사 관점에서는 좋은 것 같네요.

   기능 면에서는 Affine 도 괜찮을 거 같은데 써보진 않았구요.

   힘들게 링크를 찾아 걸어주셔서 고맙습니다.
   이 뉴스를 풍성하게 해주는 댓글이네요.

   (가능하면 댓글 달때 기존 글 검색 기능을 넣도록 하겠습니다.)
"
"https://news.hada.io/topic?id=17746","신한캐피탈, 이유없이 창업자에게 15%의 연이자로 투자금 반환 소송을 걸다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               신한캐피탈, 이유없이 창업자에게 15%의 연이자로 투자금 반환 소송을 걸다

     * 2017년말 어반베이스에 신한캐피탈이 5억을 투자
     * 2023년 투자 시장악화로 어반베이스가 신규투자를 유치하지 못하고 회생신청
     * 그러자 신한캐피탈이 창업자 개인에게 연복리 15%로 투자원금의 두배가 넘는 금액인 총 12억원의 투자금을 반환하라고 소송
     * 창업자가 이의를 제기했더니 사는 집에 대한 가압류까지 걸고 적극적으로 투자금 반환소송을 진행
     * 신한캐피탈은 배임, 횡령, 동의권 위반 등 계약위반 사항은 없지만, ‘회사가 정상적인 사업 추진이 불가능할 때’ 라는 조항을 근거로 상환권을 청구한다는 입장

   https://www.youtube.com/watch?v=Rr1e0JUmXiI
   대표님 인터뷰 영상이 올라왔네요

   끝까지 남는 건 계약서와 법적 절차밖에 없는 것 같습니다. 말로 하는 약속은 아무런 의미가 없어 보이네요. 근데 정말 대표이사가 연대책임 지는 게 상법상 성립이 안되나요? 2017년 당시 계약서 서명하기 전에 법리 검토는 받으신 건지 궁금하긴 합니다. 지금에서야 결과를 아니까 저 조항이 문제인 게 보이는데 그 당시엔 어떠셨을지 모르겠어요

   신한캐피탈이 자기들 사업에 미래가 없다고 판단하고 벌이는 무리한 행보로 보이네요. 쯧쯧...

   요즘 유행하는 말로 정말 '짜치는' 일입니다. 내부 통제 미비로 1300억 손실낸 주제에.

   터지면 좋고 안 터지면 15% 대출해준 건가요

   개탄할 일입니다!

   결국 k-startup 폭탄터지나요

   연이자 15%의 대출이 될 가능성이 있는 투자였다면, 처음부터 받지 않았을 텐데… 한국 스타트업 신에서 2024년에도 이런 상황이 일어난다는 것이 안타깝네요.

   신한에서 저러는거 보면 아직도 대출이랑 벤처투자랑 구분을 못하는거 같아요.

   대박 터져서 취미로 VC하는 몇 대표들 빼고는 진짜 엔젤은 없어요.

   대한민국에서 거의 대부분의
   시드나 시리즈a는
   전환사채 형식으로 투자됩니다.
   게다가 팁스같은 정부 투자나 후속 투자자가 들어올때 바로 현금화 할수 있는 전환시기 옵션도 포함입니다.
   그래서 스타트업에선 투자금을 받지마다 매달 투자자에게 이자를 바쳐야합니다.
   그나마 근래에 창업자 연대보증이 없어져서 다행이지 저분처럼 예전 계약이라면 회사가 어려워졌을때 창업자가 그 빚을 모두 갚아야합니다.

   참고로 최근 신한금융그룹에 관련된 이런 일들이 있었습니다
     * 신한캐피탈, 1위 ‘효자’서 그룹 ‘골칫덩이’로… 부실채권 1480억 발생
     * 신한투자증권 1300억 ETF LP 손실 사태···금감원 전수점검 나선다
     * 목적에서 벗어난 선물 매매하다…1300억 손실

   기사보면 PF에서 말아먹고, 그동안 투자한거 회수하려고 무리하게 하다보니 애꿏은 스타트업 대표 집까지 가압류된거같네요.

   약간 잘못 알고 계셔서 답글 답니다.
   pf는 자기가 잘못하면 자기가 손실나고 끝이죠. 자기 잘못은 자기가 책임지고 끝납니다.
   lp는 다릅니다. 유동성만 공급해야 됩니다. 이론적(그리고 도덕적)으로는 이익/손실이 나서는 안됩니다.
   lp에서 손실이 났다는 게 얼마나 문제가 많은지 (그리고 시장을 얼마나 신뢰할 수 없는지)에 대해 사람들이 인지를 못하는 상황이 안타깝습니다.
"
"https://news.hada.io/topic?id=17783","토마스 E. 커츠 별세 소식","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            토마스 E. 커츠 별세 소식

     * 토마스 E. 커츠 추모
          + 컴퓨터 선구자 토마스 커츠의 별세 소식
          + 커츠는 BASIC 프로그래밍 언어와 다트머스 타임쉐어링 시스템의 공동 발명자였음
          + 1960년대 학문적 컴퓨팅 초기에 학부생을 위한 간단한 프로그래밍 언어가 없었음
          + 커츠와 케메니는 다트머스 타임쉐어링 시스템을 개발하여 학생들이 BASIC을 사용할 수 있도록 함
     * 소명 찾기
          + 일리노이주 오크 파크 출생, 1950년 Knox College 졸업
          + 1956년 프린스턴 대학교에서 수학 박사 학위 취득
          + UCLA에서 SWAC 컴퓨터 경험
          + 다트머스에서 교수로 재직하며 다트머스 타임쉐어링 시스템 개발
     * 영향력 있는 업적
          + BASIC 언어는 여러 세대의 컴퓨터에서 발전해옴
          + 1978년 하버드 학생 빌 게이츠와 폴 앨런이 MITS Altair 8800을 위한 BASIC 버전 개발
          + 개인용 컴퓨터 시대에 BASIC의 인기가 급상승
     * 다채로운 경력
          + 1966년부터 1975년까지 다트머스 Kiewit Computation Center 소장 역임
          + 1979년 IBM의 지원을 받아 컴퓨터 및 정보 시스템 석사 프로그램 조직
          + 1983년 True BASIC, Inc. 설립
          + ANSI BASIC 표준 개발을 위한 X3J2 위원회 형성에 기여
          + 1994년 ACM 펠로우로 선정
     * 저자 소개
          + Dag Spicer는 컴퓨터 역사 박물관의 영구 역사 컬렉션을 감독
          + 박물관의 전시, 마케팅, 교육 프로그램을 기획하고 연구 문의에 응답
          + NPR, 뉴욕 타임즈, 이코노미스트 등 주요 매체에 컴퓨터 역사 관련 인터뷰 제공

        Hacker News 의견

     * BASIC 언어로 프로그래밍을 처음 배웠으며, D 언어 설계 시 BASIC의 쉬운 문자열 조작을 참고했음. C 언어의 문자열 조작은 버그가 많았음. D 언어에서 문자열 조작을 쉽게 만드는 것이 주요 목표였고, 성공적이었음. C 코드 리뷰 시 문자열 조작 부분에서 버그를 찾는 것이 거의 확실함. strncpy() 함수의 0 종료 처리 방법을 모르는 사람들에게 질문함.
     * BASIC 언어로 1977년에 처음 프로그램을 작성했으며, 제한된 BASIC의 컴파일러를 Z80으로 작성했음. 14KB RAM에서 실행되는 기계어 컴파일러를 만들었음. Thomas Kurtz에게 감사함.
     * 96세까지 살았으며, 많은 QBASIC을 작성했음. 1986-90년대 인도에서 MSDOS만 있었고, GWBASIC으로 친구와 가족을 놀라게 했음. MS WINDOWS 3.1로 전환되면서 QBASIC으로 그래픽에 빠졌음. BASIC에서 시작하여 CLIPPER, FOXPRO, MFC, Borland C++까지 발전했음. BASIC 언어에 감사함.
     * BASIC의 유산은 뛰어남. Atari 800XL의 BASIC ROM 덕분에 어린 나이에 BASIC을 배웠음. BASIC 덕분에 컴퓨터 프로그래밍의 창의성을 경험할 수 있었음. BASIC은 대규모 프로젝트에는 적합하지 않지만, 어린이에게는 충분했음. BASIC 덕분에 초기 게임 개발 경력을 시작할 수 있었음. Thomas E. Kurtz의 이름을 몰랐지만, BASIC 언어에 대한 감사함을 느끼고 있음.
     * 2010년에 Thomas Kurtz를 인터뷰했으며, 그가 매우 친절하고 환영해 주었음. Dartmouth에서의 그의 업적은 놀라웠으며, 기술을 통해 학생과 사회를 교육하고 권한을 부여하는 것이 목표였음.
     * 1976년에 BASIC으로 첫 프로그래밍을 시작했으며, IBM 5100에서 달 착륙 게임을 시도했음. BASIC으로 프로그래밍을 시작하게 된 계기가 되었음. 이후 다양한 컴퓨터와 언어를 사용했음. BASIC은 많은 사람들에게 기쁨과 영감을 주었음.
     * BASIC은 스웨덴 고등학교에서 첫 프로그래밍 언어였음. BASIC 덕분에 프로그래밍을 시작하게 되었고, 매우 보람 있는 길을 걷게 되었음.
     * Pascal 언어는 초기 시스템의 제한과 구현의 비호환성 때문에 비판받았음. 반면 BASIC은 미니 및 마이크로 컴퓨팅 산업의 중추였으며, 다양한 구현과 기능을 가졌음. BASIC의 구현은 서로 호환되지 않았음.
     * BASIC의 유산은 과소평가될 수 없음. Dartmouth에서의 BASIC의 사명은 혁신적이었음. 많은 새로운 컴퓨터 사용자들이 처음 접한 프로그래밍 언어였음. BASIC은 개인용 컴퓨터의 시작과 함께 큰 영향을 미쳤음.
"
"https://news.hada.io/topic?id=17817","sisi - 로컬 시맨틱 이미지 검색 CLI 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      sisi - 로컬 시맨틱 이미지 검색 CLI 도구

     * 써드파티 API 없이 로컬에서 시맨틱 이미지 검색을 하는 CLI
     * Node.js 용 머신러닝 프레임워크인 node-mlx 기반으로 이미지 임베딩 인덱스를 생성하고 검색함
     * 지원 플랫폼
          + GPU : 애플실리콘 맥
          + CPU : x64 맥, x64/arm64 리눅스
     * sisi index <target> 로 특정 폴더의 이미지에 대한 인덱스 생성
     * sisi search 'cat jumping' 으로 특정 내용을 포함한 이미지 검색

작동 방식

     * 인덱스는 OpenAI의 CLIP 모델을 이용하여 이미지 임베딩을 계산한 뒤에, binary JSON으로 저장됨
     * 이미지 검색은 쿼리 문자열과 색인된 임베딩 간의 코사인 유사도를 계산
     * 데이터베이스가 없으며, 검색을 할 때마다 저장된 모든 임베딩에 대해 계산이 수행. 수만 장의 사진이 있어도 매우 빠름
     * CLIP 모델의 자바스크립트 구현체는 frost-beta/clip을 이용
"
"https://news.hada.io/topic?id=17825","voyage-multimodal-3 : 텍스트, 이미지 및 스크린샷을 위한 올인원 임베딩 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          voyage-multimodal-3 : 텍스트, 이미지 및 스크린샷을 위한 올인원 임베딩 모델

     * voyage-multimodal-3는 텍스트와 이미지가 혼합된 문서에서 시각적 및 텍스트적 특징을 벡터화할 수 있는 최첨단 모델임
          + PDF, 슬라이드, 표, 그림 등의 스크린샷에서 주요 시각적 특징을 포착하여 복잡한 문서 파싱의 필요성을 제거함
          + 20개의 데이터셋을 사용한 3가지 멀티모달 검색 작업에서 평균 19.63%의 검색 정확도 향상을 보임
     * 기존 모델과의 비교
          + voyage-multimodal-3는 OpenAI CLIP large 및 Cohere multimodal v3보다 테이블/그림 검색에서 각각 41.44% 및 43.37% 더 우수한 성능을 보임
          + 문서 스크린샷 검색에서 각각 26.54% 및 25.84% 더 우수한 성능을 보임
          + 텍스트-사진 검색에서 각각 6.55% 및 5.86% 더 우수한 성능을 보임
     * 텍스트와 이미지의 혼합 지원
          + 기존 멀티모달 임베딩 모델은 텍스트와 이미지를 별도의 네트워크로 처리하지만, voyage-multimodal-3는 동일한 트랜스포머 인코더를 통해 두 가지 모드를 직접 벡터화함
          + 이는 시각적 및 텍스트적 정보 간의 맥락적 관계를 보존하여 혼합된 텍스트와 이미지, 문서 스크린샷, 복잡한 레이아웃의 PDF 등을 벡터화할 수 있게 함
     * 스크린샷을 통한 혼합 모드 검색
          + CLIP 유사 모델은 모드 간 격차로 인해 혼합 모드 검색에서 성능이 저하됨
          + voyage-multimodal-3는 모든 스크린샷 비율에서 가장 우수한 성능을 보이며, 스크린샷의 의미적 내용을 진정으로 포착함
     * 평가 세부사항
          + voyage-multimodal-3는 20개의 멀티모달 데이터셋과 34개의 텍스트 검색 데이터셋에서 평가됨
          + 각 작업에 대해 이전의 최고 성능 모델을 기준으로 평가함
     * 결과
          + 멀티모달 검색에서 voyage-multimodal-3는 OpenAI CLIP large, Amazon Titan Multimodal G1, Cohere multimodal v3, SigLIP So400M, ColQwen2 v0.1보다 우수한 성능을 보임
          + 표준 텍스트 검색에서 OpenAI v3 large 및 Cohere multimodal/English1 v3보다 각각 5.13% 및 13.70% 더 우수한 성능을 보임
     * 사용 안내
          + voyage-multimodal-3는 현재 사용 가능하며, 첫 2억 개의 토큰은 무료로 제공됨
          + 샘플 노트북을 통해 시작하거나 문서를 참조하여 더 많은 정보를 얻을 수 있음

        Hacker News 의견

     * CLIP 모델은 혼합 모달리티 검색에서 성능이 떨어지는 현상이 있음. 이는 모달리티 갭 때문이며, 텍스트 벡터가 관련 없는 텍스트와 더 가깝게 나타나는 문제를 발생시킴
          + Google의 Gemini는 본래부터 멀티모달로 설계되어 이러한 문제를 개선함. 다양한 모달리티로 사전 훈련되어 모든 입력을 효과적으로 이해하고 추론할 수 있음
     * ColiVara 프로젝트는 ColPali를 사용하여 멀티모달 모델을 구현함. Vidore 리더보드에서 VoyageAI의 성능을 비교하고 싶음
     * 상업적 모델이 API 전용으로 제공되는 점이 아쉬움
     * API 전용 모델에 대한 비판적 시각이 필요함. 특히 비영어 텍스트에 대한 평가가 필요함
     * 실제 데이터셋을 사용하여 질적 분석을 수행하는 것이 중요함. 정량적 벤치마크는 유용하지만 드물게 사용됨
     * 멀티모달 임베딩을 보는 흥미로운 방법임. 입력이 한 모달리티에서 다른 모달리티로 전환되는 비율로 성능을 평가함
     * Voyage 엔진은 전통적인 Python API에서 텍스트 블록을 토큰화하여 문자 문자열을 출력함. 이 모델은 이미지 벡터화를 통해 이를 수행함
          + 'you'와 'apple' 같은 단어는 단일 토큰으로 처리되며, 'pikachu' 같은 복잡한 용어는 'pik-a-chu'로 나뉠 수 있음
     * 콜랩에서 점곱 값 0.428과 0.498을 ""유사성 값이 꽤 높음""으로 설명함. 0.4 임계값으로 데이터를 자신 있게 레이블링할 수 있는 시스템을 설계할 수 있는지에 대한 의문이 있음
"
"https://news.hada.io/topic?id=17777","gwern 인터뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               gwern 인터뷰

익명성의 이점

     * 익명성의 가장 과소평가된 이점: 사람들은 특정 틀이나 정체성에 맞춰 당신을 미리 판단하지 않음. 당신을 무시하기 전에 최소한 조금이라도 읽어야 함. 보복을 당하지 않는 것도 큰 이점이며, 익명성 덕분에 공정한 평가를 받을 수 있음.

기업 자동화

     * 기업 자동화의 방향: CEO부터 시작하는 상향식보다는 하향식으로 시작하는 것이 더 일반적임. AI는 장기적인 비전을 실행하기에는 너무 근시안적일 수 있음. 인간 CEO가 비전을 제시하고 AI가 이를 실행하는 구조가 될 가능성이 있음.

아이작 뉴턴의 진보 이론

     * 기술적 진보의 초기 예측: 1863년 Samuel Butler의 에세이에서 기계가 자율적으로 발전할 것이라는 예측이 있었음. 기술적 가속은 새로운 것이 아니라 과거의 문명이 주기적으로 파괴되었다는 설명이 있었음.

지능의 대이론

     * 지능의 본질: 지능은 튜링 기계에 대한 탐색일 뿐임. 학습과 확장은 더 많은 튜링 기계를 탐색하는 것에 불과함. 인간의 지능 차이는 단순히 더 많은 계산 능력을 통해 더 많은 튜링 기계를 탐색할 수 있는 능력의 차이일 뿐임.

스케일링의 초기 인식

     * 스케일링의 중요성 인식: 2000년대 중반부터 AI의 발전을 주의 깊게 관찰하며 스케일링의 중요성을 인식하게 됨. GPT-3의 출현은 스케일링의 성공을 확신하게 만든 중요한 순간이었음.

AGI 타임라인

     * AGI의 예상 시점: 2005년부터 2010년까지는 AGI가 2050년 이후에나 가능할 것이라고 생각했으나, AlexNet과 DanNet의 출현 이후 AGI의 도래 시점이 점점 가까워지고 있다고 판단하게 됨.

남은 3년 동안의 계획

     * 개인적인 목표와 AGI의 도래: AGI가 몇 년 안에 도래할 것을 염두에 두고, 인간만이 할 수 있는 부분에 집중하거나, AI가 나중에 할 수 있도록 계획을 세우는 것이 중요함.

글쓰기를 통한 영향력

     * 글쓰기를 통한 AI에 대한 영향: 글쓰기는 AI의 미래에 영향을 미칠 수 있는 몇 안 되는 방법 중 하나임. AI가 이해할 수 있는 형태로 자신의 가치와 욕구를 표현하는 것이 중요함.

        Hacker News 의견

     * AI 예측은 인간이 AI 생성 미디어를 어떻게 받아들일지 고려하지 않음. AI가 인간 창작물을 대체할 가능성에 회의적임
          + AI 생성 프로젝트가 유행이 지난 것으로 인식됨
          + 인간성을 검증하는 방법과 AI 생성 쓰레기들이 상호작용 없이 남겨질 가능성이 높음
     * Gwern의 검소한 생활에 대한 의문과 그의 글이 주는 긍정적 영향
          + Gwern의 글이 독특하고 틈새 주제를 다루어 흥미로움
          + Gwern의 에세이가 개인의 결정을 바꾸는 데 도움을 줌
     * 팟캐스트의 음성 문제와 과도한 어휘 사용에 대한 비판
          + 음성이 현실적이지만 이해하기 어려움
          + 과도한 어휘 사용이 의미 전달을 방해함
     * AI 주제의 흥미로운 팟캐스트 인터뷰들
          + Anthropic의 주요 인물들과의 인터뷰
          + AI 위험에 대한 Stephen Wolfram과 Eliezer Yudkowsky의 토론
     * Gwern과의 상호작용에서 느낀 부정적 경험
          + AI와 CS에 대한 깊이 있는 지식 부족을 지적함
          + 독창적인 방향을 찾고 따르는 것이 중요함
     * Isaac Newton의 진보에 대한 관점에 대한 논의
          + 진보의 개념이 상대적이며, 과거와 현재 모두 빠른 진보가 있었음
     * 익명성의 장단점
          + 익명성의 이점과 단점에 대한 개인적 경험 공유
     * Bitcoin에 대한 Gwern의 비판
          + Bitcoin의 여러 문제점을 지적하며, 시스템의 비효율성과 비대칭성을 강조함
     * 아바타 대신 음성만 사용하는 것이 더 나을 수 있다는 의견
          + 개인적인 선호에 따라 시각적 이미지 없이 음성만 듣는 것이 더 나을 수 있음
     * 온라인에서 흥미로운 토론에 자주 등장하는 핵심 그룹
          + Gwern이 그 그룹의 중심에 있음
"
"https://news.hada.io/topic?id=17807","제임스 웹 우주 망원경, 대체 중력 이론 증거 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      제임스 웹 우주 망원경, 대체 중력 이론 증거 발견

     * 제임스 웹 우주 망원경과 대체 중력 이론
          + 제임스 웹 우주 망원경(JWST)을 사용하여 우주의 가장 먼 곳을 관찰한 천문학자들이 중력의 대체 이론에 대한 놀라운 증거를 발견함.
          + 기존의 은하 형성 모델은 암흑 물질에 의해 생성된 중력이 천천히 형성되는 은하로 물질을 끌어당긴다고 예측함.
          + 그러나 1998년에 제안된 수정 뉴턴 역학(MOND)은 초기 우주에서 구조가 암흑 물질 없이 빠르게 형성되었다고 주장함.
     * 암흑 물질 논쟁
          + 람다-CDM 모델은 암흑 물질이 우주의 구조를 설명하는 데 필수적이라고 주장함.
          + 이 모델에 따르면, 암흑 물질의 중력 영향이 은하를 형성하고 대규모 구조를 형성함.
          + 그러나 JWST의 관측 결과는 이러한 예측과 일치하지 않으며, 초기 우주의 은하들이 밝고 크며 완전히 형성된 것으로 나타남.
     * MOND: 급진적인 대체 중력 이론
          + MOND 이론은 1983년 이스라엘 물리학자 Mordehai Milgrom에 의해 처음 제안됨.
          + 이 이론은 암흑 물질을 도입하지 않고 은하 회전 곡선에서 관찰된 불일치를 설명하기 위해 뉴턴의 제2법칙을 수정함.
          + McGaugh와 그의 동료들은 은하 형성이 더 빠르게 이루어졌으며 암흑 물질에 의존하지 않았다고 주장함.
     * 증거와 도전 과제
          + JWST의 데이터는 MOND 지지자들의 예측과 더 잘 일치함.
          + 그러나 MOND는 여전히 논란의 여지가 있으며, 아인슈타인의 일반 상대성 이론과의 조화가 어려움.
          + 일부 현대 천문학적 측정은 여전히 암흑 물질 가설을 지지함.
     * 람다-CDM의 지속적인 사례
          + MOND가 일부 관측을 설명하는 데 성공했음에도 불구하고, 람다-CDM은 여전히 광범위한 지지를 받고 있음.
          + 이 모델은 1920년대부터 우주의 팽창률을 정확하게 예측해 왔음.
          + McGaugh는 일반 상대성 이론과 MOND 모두에 호환되는 이론을 찾는 것이 여전히 도전 과제임을 인정함.
"
"https://news.hada.io/topic?id=17797","Show HN: LAN 파티 최적화 주택 건축","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show HN: LAN 파티 최적화 주택 건축

     * 우리 집의 LAN 파티 공간
          + 지하 게임룸: 벽에 12대의 PC가 내장되어 있음
          + 게임 스테이션: 사용하지 않을 때는 접을 수 있음
          + 댄스 댄스 레볼루션: 바닥에 DDR 패드가 설치되어 있음
     * 위층 사무실
          + 보드 게임: 컴퓨터 모드로 변환 가능
          + 개인 작업 공간: 두 개의 스탠딩 데스크가 있음
     * 케이블 관리 및 엔진 룸
          + 케이블 관리: 비디오 및 USB 케이블이 관로를 통해 연결됨
          + 엔진 룸: 20대의 동일한 게임 머신이 네트워크 부팅을 통해 공유 디스크 이미지를 사용함
     * 네트워킹
          + 네트워크 장비: UniFi 장비 사용
          + 인터넷: 2 Gbps 광섬유 인터넷
     * 구성 요소
          + 하드웨어: Intel Core i5-13600, 32GB RAM, GeForce RTX 4070 등
          + 조립: Kenton의 친구들이 기계 조립 및 케이블 설치를 도와줌
     * 기타 공간
          + 거실: 일반적인 집의 기능도 포함
          + 고양이 공간: 고양이를 위한 선반과 문이 있음
          + 아이들 방: 로프트 침대와 고양이 문이 있음
     * 게스트 룸 및 옥상 데크
          + 게스트 룸: 외부 방문객을 위한 두 개의 방
          + 옥상 데크: 30마일의 전망과 미스트 팬이 있음
     * Q&A
          + 우리 집: Kenton Varda와 Jade Wang의 집으로, 텍사스 오스틴에 위치
          + 설계 및 건축: Kenton의 아버지 Richard Varda가 주도한 설계
          + 이전 LAN 파티 하우스: 2011년에 Palo Alto에서 처음으로 LAN 파티 하우스를 설계
     * LAN 파티에 대한 정보
          + LAN 파티란?: 여러 사람이 한 장소에 모여 로컬 네트워크를 통해 멀티플레이어 게임을 즐기는 것
          + 게임 선택: 협력 게임이나 팀 게임을 선호함
          + 공개 파티 여부: 초대받은 사람만 참석 가능
     * 기술 관련 정보
          + 업데이트 관리: 단일 디스크 이미지를 유지하여 모든 기계가 네트워크 드라이브에서 부팅
          + 하드웨어: 주로 Logical Increments ""Outstanding"" 수준을 목표로 함
          + 홈 오토메이션: 클라우드에 의존하지 않는 기술 사용
     * 기타 질문
          + 고양이 문: 고양이가 방에 자유롭게 드나들 수 있도록 설계
          + DDR 패드 사용 빈도: 자주 사용하며 운동의 일환으로 활용

   너무 부럽네요 여러모로

        Hacker News 의견

     * 친구들과 함께하는 즐거운 LAN 파티에 감탄함. 솔로 게임과 비교해 훨씬 재미있을 것 같음
     * LanParty.com의 전 소유자로서 LAN 장비와 관리의 천재성에 경의를 표함. Quake의 다양한 버전이 부족한 점은 쉽게 해결 가능함. LAN 게임의 지속과 최소한의 설정으로 최대한의 게임을 즐길 수 있는 점이 기쁨
     * LAN 설정이 훌륭하지만 주변기기 선택과 헤드셋 부족이 아쉬움. 테이블이 얇고 흔들리지만 친한 사람들과의 LAN 파티에는 괜찮음. 단일 디스크 이미지로 호스트 설정을 잘 했음. LAN 게임 센터와 비슷한 설정임. 개인적으로 ZFS 기반 스냅샷을 선호함
     * LAN과 네트워크 설정이 훌륭하고 위치도 좋음. 친구 및 가족과 함께 즐길 수 있는 멋진 장소임. 많은 노력이 들어갔지만 그만한 가치가 있음
     * 기술적인 부분 외에도 집의 전망이 훌륭함. 가족을 위한 멋진 장소를 마련한 것에 축하함. 이미지와 함께 제공된 Q&A 섹션도 즐거웠음
     * $NET 주주로서 집을 살 수 없는 상황에 세금을 크게 늘려야 한다고 생각함
     * Maine Coon 고양이가 집을 탐색하는 데 30분도 걸리지 않았을 것 같음. 고양이는 군중을 피하고 사진에 잘 나오지 않음. Kenton의 사진에서 고양이가 소파 뒤로 다가가 그의 옆에 자리잡는 모습이 상상됨
     * 키보드가 마음에 들지 않음. 기계식 키보드를 사용하는 것이 좋을 것 같음. Logitech K120 유선 키보드는 저렴하지만 게임에 충분히 적합함
     * 꿈을 실현한 것 같음. 가구 비용이 기술과 비슷한 점이 놀라움. 고양이 화장실 환기 시스템이 항상 켜져 있는지, 센서가 있는지 궁금함. 고양이 문이 거실 소리가 아이들 방으로 들어가는 것을 막는지 궁금함
     * 다른 사람이 이런 것을 했다는 이야기를 들어본 적이 없음. 2013년에 DotA 2를 위한 5인용 방을 만들었음. 하드웨어 선택에 운이 좋았고, 여러 버그와 싸워야 했음. 로컬 디스크를 VM에 사용했으며, iSCSI 부팅의 단점을 잘 알고 있었음. 10G 카드가 좋지 않다고 생각하며, Intel 기반의 eBay 제품을 추천함. iPXE를 사용하고 있다면, 네트워크 부팅을 추가 카드로 전환하여 안정성과 성능을 개선할 수 있음
"
"https://news.hada.io/topic?id=17788","하프라이프 2: 20주년 기념 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         하프라이프 2: 20주년 기념 업데이트

     * 새로운 기능
          + Half-Life 2는 이제 Episode One과 Episode Two 확장판을 포함하며, 메인 메뉴에서 접근 가능함
          + Half-Life 2 개발자 코멘터리가 추가되어, 게임의 기술적 배경을 깊이 있게 탐구할 수 있음
          + Steam Workshop 지원으로 사용자 제작 콘텐츠를 게임 내에서 설치하고 플레이할 수 있음
          + Steam 게임 녹화 기능으로 플레이 중의 중요한 순간을 기록할 수 있음
     * 업데이트 및 수정 사항
          + 모든 맵의 버그 수정 및 콘텐츠 복원, 조명과 안개 품질 개선
          + 그래픽 설정 업데이트로 고해상도 모델과 부드러운 그림자 제공
          + 게임패드 및 입력 설정 업데이트로 더 나은 조작감 제공
          + Steam Deck 메인 메뉴 업데이트로 새로운 기능과 설정 추가
     * 개발 초기 영상
          + Half-Life 2의 초기 개발 영상 공개, E3 2003 및 SIGGRAPH 2000 데모 포함
     * Raising the Bar 책 재출간
          + Half-Life 2 개발 과정을 다룬 Raising the Bar 책이 2025년에 확장판으로 재출간 예정
     * 버그 수정 및 변경 사항
          + 다양한 버그 수정 및 게임플레이 개선
          + Episode One과 Episode Two의 업적이 Half-Life 2에 추가됨
          + Hammer 툴의 기능 개선 및 한계 증가
     * 사운드트랙 및 다운로드
          + Half-Life 2 및 확장판의 오리지널 사운드트랙을 무료로 스트리밍 및 다운로드 가능
     * 기타
          + 이전 버전의 게임은 ""steam_legacy""라는 베타 브랜치로 보관됨
          + 독립 실행형 버전의 가시성 감소, 커뮤니티 프로젝트 지원을 위해 여전히 사용 가능함

   아니 하프라이프3 내달라고... 벨브야

        Hacker News 의견

     * HL2와 그 속편 에피소드는 18일까지 Steam에서 무료로 받을 수 있음
          + 링크: Half-Life 2 on Steam
          + 기념 페이지의 중력 건을 클릭해보는 것도 추천함
     * 과거에는 Google과 Blizzard 같은 회사에 충성했으나, 이제는 Valve가 미스터리 박스를 출시하면 구매할 것임
     * 현재 Mac OS에서 Half-Life를 실행할 수 있으면 좋겠음
          + 원래 Mac OS에서 실행 가능했으나, 최신 Steam 버전은 최신 OS가 필요하고 HL은 오래된 32비트 OSX에서만 실행됨
     * Ravenholm을 사망 없이 클리어한 것이 20주년 기념 업적임
          + 링크: Ravenholm 클리어 영상
     * 게임을 다시 플레이하지 않고 즐기고 싶다면 ""Developers React to 50 Minute Speedrun"" 영상을 추천함
          + 링크: Speedrun 영상
          + 건축적 결정과 플레이어의 활용 방법을 강조함
     * HL3가 왜 만들어지지 않는지 이해할 수 없음
          + 24시간 내에 엄청난 수익을 올릴 수 있을 것임
          + 이는 개발자들의 진정성을 보여주는 것일 수 있음
     * 오래된 게임이 리마스터되는 것을 보면 기쁨
          + Mac 사용자로서 많은 게임을 접할 수 없었음
          + Steam Deck 덕분에 Arkham Trilogy를 플레이할 수 있었지만, Alice는 그래픽과 조작이 현대적이지 않아 몰입하기 어려움
          + Half-Life 게임이 리마스터되었으니 플레이할 계획임
     * 세 번째 다큐멘터리가 언제 나올지 궁금함
     * 페이지 맨 아래까지 스크롤해보는 것을 강력 추천함
     * 2007년 The Orange Box 출시 당시, Half-Life 2는 듀얼 코어 Athlon 64 X2에서 로딩 시간이 길었음
          + 최근 Intel MacBook에서 플레이했을 때도 로딩 시간이 매우 길었음
          + 다른 사람들은 로딩 시간에 대해 불평하지 않는 것 같음
"
"https://news.hada.io/topic?id=17849","크롬, 새로운 인터넷 익스플로러인가? (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      크롬, 새로운 인터넷 익스플로러인가? (2023)

    크롬은 새로운 IE인가?

     * 지배력
          + 크롬은 전 세계 브라우저 시장 점유율의 65% 이상을 차지하며, 과거 마이크로소프트의 인터넷 익스플로러(IE)와 유사한 비판을 받고 있음.
          + 크롬은 IE처럼 웹 개발자들이 크롬에 최적화하고 다른 브라우저는 나중에 조정하는 방식으로 사용되고 있음.
          + 구글은 크롬 사용을 장려하며 지배력을 강화하고 있음.
     * 안일함
          + 지배적인 제품은 안일해질 수 있으며, IE는 느린 성능과 보안 취약성으로 인해 한계를 드러냈음.
          + 크롬은 빠르고 간단하며 안전하다는 약속으로 2008년에 출시되었음.
          + 그러나 크롬은 시스템 자원을 많이 소모하고, 데이터 수집 문제로 비판받고 있음.
     * 방해
          + 크롬의 지배력을 방해할 수 있는 대안 브라우저가 필요함.
          + 파이어폭스는 시장 점유율이 감소하고 있으며, 사파리는 크로스 플랫폼 지원 부족으로 지배적 위치에 오르기 어려움.
          + 마이크로소프트의 엣지가 가장 큰 잠재력을 가지고 있지만, 아직 크롬을 대체할 정도는 아님.
     * 결론
          + 크롬의 지배력을 줄이기 위해서는 여러 브라우저가 개방형 웹 표준을 지원하며 공존하는 것이 필요함.

    통찰

     * 2024년 유튜브 광고 차단 방법
     * 지역 광고 차단 소개
     * 2024년 최고의 웹 브라우저

    매직 라소 광고 차단기

     * 매직 라소의 장점
     * 기능 및 통찰
     * 매직 라소 다운로드
     * 아이폰, 아이패드, 맥용 광고 차단기 지원

   요즘은 adblock이 편해서 brave 브라우저만 씁니다

        Hacker News 의견

     * Google가 Chrome을 통해 웹 표준을 결정하는 유일한 기준으로 자리 잡았다는 의견이 있음
          + Chrome이 지원하지 않는 표준은 웹에서 중요하지 않게 여겨짐
          + Chrome이 새로운 IE로 여겨지는 이유는 웹 표준의 유일한 중재자로 취급되기 때문임
     * Chrome이 유일하게 중요하게 여겨지는 브라우저라는 의견이 있음
          + Chrome에서 작동하면 다른 브라우저는 신경 쓰지 않음
          + 모든 것이 Chrome과 호환되어야 성공할 수 있음
     * 많은 기업 웹사이트가 Chrome만 허용하고 다른 브라우저는 차단하는 문제를 지적함
          + 이는 다른 브라우저에서 지원되지 않는 기능 때문이 아니라 QA가 Chrome에서만 테스트하기 때문임
     * Google이 Chromium 프로젝트를 주도하고 있으며, Safari와 Firefox는 예외적으로 Chromium 기반이 아님
          + Google이 Webkit 저장소를 관리하는 Apple을 좋아하지 않아 Blink 포크가 생김
          + Firefox는 여전히 훌륭한 브라우저지만 인기가 떨어짐
     * Salt Lake City에서 주차를 시도하는 동안 Chrome 기반 브라우저가 필요했던 경험을 공유함
          + 다른 브라우저에서는 작동하지 않는 드롭다운 메뉴 문제를 겪음
     * IE6와 Chrome을 비교하는 것은 24년간의 발전과 노력을 무시하는 것이라는 의견이 있음
          + Chrome은 오픈 소스 운동의 승리이며, IE는 죽었음
     * Chrome이 시장 점유율은 높지만 속도, 효율성, 표준 상호 운용성에서 뒤처진다는 증거가 있음
          + Microsoft의 Edge가 가장 파괴적인 잠재력을 가진 브라우저로 언급됨
     * Chrome이 새로운 IE로 여겨지는 이유는 웹 표준을 결정하는 유일한 기준으로 자리 잡았기 때문임
          + Chrome은 리소스 소모가 크다는 비판을 받았지만, 2021년 이후 메모리 효율성을 개선함
     * 많은 웹사이트가 Chrome에서만 작동하는 문제를 지적함
          + 모든 브라우저에서 웹사이트를 올바르게 표시하는 것이 어려웠으며, IE가 가장 어려웠음
"
"https://news.hada.io/topic?id=17784","PageFind - 정적 페이지를 위한 검색 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PageFind - 정적 페이지를 위한 검색 라이브러리

     * Static 사이트를 위한 검색 라이브러리로, 대규모 웹사이트에서도 효율적으로 작동하며 최소한의 사용자 대역폭만 사용하도록 설계
     * 별도의 서버 인프라 없이 동작하며, 다양한 웹사이트 프레임워크와 호환 가능

  주요 특징

     * 정적 파일 기반 설치
          + Pagefind는 Hugo, Eleventy, Jekyll, Next.js, Astro, SvelteKit 등의 프레임워크에서 생성된 정적 파일 폴더만 필요로 하며, 대부분의 경우 추가 설정이 필요하지 않음
     * 경량화된 검색 번들 제공
          + 인덱싱 후, 검색 API와 기본 UI를 제공하는 정적 번들을 생성하여 사이트에 추가
          + 기본 제공되는 UI는 별도 설정 없이 바로 사용할 수 있음
     * 대규모 사이트에서도 빠른 검색
          + Pagefind는 수만 개의 페이지로 구성된 사이트도 사용자의 브라우저에서 검색 가능하게 하며, 검색 인덱스를 조각으로 분할해 필요한 부분만 불러옴
          + 10,000개의 페이지에서 전체 네트워크 요청 크기를 300kB 이하로 유지합니다. 대부분의 사이트에서는 100kB 이하로 동작

  기능 요약

     * 추가 설정 없이 다국어 웹사이트 지원
     * Knowledge Base에 적합한 강력한 필터링 엔진
     * 커스텀한 정렬 속성, 메타데이터 추적, 콘텐츠 가중치 설정 가능
     * 페이지 내부의 특정 섹션도 검색 결과로 반환 가능
     * 하나의 검색 인덱스로 여러 도메인 검색 지원
     * NodeJS 인덱싱 라이브러리를 사용해 PDF, JSON 파일, 자막 등의 다양한 콘텐츠를 인덱싱할 수 있습니다.
     * 모든 기능이 최소한의 네트워크 사용량으로 제공

   Japanese — ja ✅ See below
   Korean — ko ✅ ❌

   슬프게도 아직 CJK 지원은 안 되는 모양이네요

   한글도 잘 될까요?
"
"https://news.hada.io/topic?id=17833","NVIDIA garak - LLM 취약점 스캐너","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       NVIDIA garak - LLM 취약점 스캐너

     * Garak은 LLM 기반 시스템의 취약점을 찾기 위해 개발된 무료 도구
     * 주로 LLM의 오작동과 보안 문제를 검사하며, nmap의 LLM 버전이라 할 수 있음
     * 다양한 정적, 동적, 적응형 탐침(probes)을 사용하여 LLM의 여러 취약점을 탐색

Garak의 주요 기능

     * LLM의 실패 지점 확인: 잘못된 정보 생성, 데이터 유출, 프롬프트 인젝션, 독성 생성, 제일브레이크(jailbreak) 등 여러 약점을 탐색
     * 다양한 프로빙 기법 사용: 수십 개의 플러그인과 수많은 탐침을 통해 다양한 LLM 실패 모드를 분석
     * 로그 기록: 각 실패 사례에 대해 프롬프트, 목표, 응답을 포함한 상세한 로그 제공
     * 지속적인 업데이트: 커뮤니티의 기여로 새로운 탐침이 추가되고 기존 탐침이 개선되며, 테스트 범위가 지속적으로 확대

Garak의 주요 특징

     * LLM 보안에 초점
          + LLM 고유의 취약점을 중점적으로 검사
               o 프롬프트 인젝션, 제일브레이크, 가드레일 우회, 텍스트 재생 공격 등
          + 기타 ML 보안 도구와는 달리 LLM 보안에만 집중
     * 자동화된 스캐닝
          + 다양한 탐침을 자동으로 실행하며, 탐지기 설정과 속도 제한 처리도 자동화
          + 기본 설정만으로도 전체 표준 스캔이 가능하지만, 사용자 맞춤형 설정도 가능
     * 다양한 LLM 지원
          + OpenAI, Hugging Face, Cohere, Replicate 등 여러 LLM과 연결 가능
          + 커뮤니티 기여 기반으로 더 많은 LLM 지원 추가 예정
     * 구조화된 보고 기능
          + 스크린 출력: 스캔 진행 상황 실시간 모니터링
          + 리포트 로그: 각 프롬프트와 응답의 상세 기록
          + 히트 로그(Hit log): 취약점 발견 시 기록
          + 디버그 로그: 문제 해결 및 Garak 작동 기록
"
"https://news.hada.io/topic?id=17814","모든 것이 함수다: David Beazley와 SICP 강의 후기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  모든 것이 함수다: David Beazley와 SICP 강의 후기

David Beazley와 SICP 강의 후기: 1주간의 경험

   2022년 말 David Beazley의 SICP 강의에 참여한 경험을 공유함. 여러 무료 자료가 있지만, Dave의 강의는 특정 주제를 선택하고 심도 있게 설명함으로써 매우 효과적이었음.

시작점

   SICP 강의는 Scheme 언어로 진행되었으며, 여기서는 Python으로 간단한 Scheme 해석기를 구현하여, 기초 개념인 대입(substitution) 모델을 설명함.

    Scheme 언어의 기본

     * 프리미티브(Primitive): 기본 값들 (예: 정수)
     * 연산자: +, -, *, / 등의 기본 연산을 접두어 표기법으로 사용
     * define: 변수 정의

> (define x 2)
> (+ x 3) ; 결과: 5

     * if: 조건문
     * lambda: 익명 함수 정의

> ((lambda (x) (* x x)) 3) ; 결과: 9

    Python에서의 Scheme 해석기

   Python을 사용하여 Scheme 코드를 평가하는 간단한 해석기 구현. 기본 연산은 Python 함수로 정의.
definitions = {
    ""+"": lambda x, y: x + y,
    ""*"": lambda x, y: x * y,
}

   예시:
> evaluate((""+"", 2, 3)) # 결과: 5

   define과 lambda의 구현, 그리고 조건문 if 처리까지 포함.

    대입 모델(Substitution Model)

   대입 모델은 간단한 프로그램 해석 방식으로, 변수를 값으로 대체하며 프로그램을 평가함. 그러나 **할당(assignment)**이 포함되면 이 모델은 실패함.

상태(State)

   대입 모델이 깨지는 예로 **할당(assignment)**을 들 수 있음. 예를 들어 은행 계좌 잔고를 모델링할 때 set!을 사용하여 변수를 업데이트함.
(define balance 100)

(define (withdraw amount)
  (set! balance (- balance amount))
  balance)

   이 경우 대입 모델은 이전과 이후의 잔고 상태를 구분하지 못함.

   환경(Environment) 모델이 필요해짐. 변수는 환경 내에서 정의되고, 각 절차는 자신만의 환경을 가짐.

    스트림(Streams)

   상태를 모델링하는 또 다른 방식으로 스트림이 있음. 스트림은 지연 평가(lazy evaluation)를 통해 미래의 값도 모델링할 수 있음.

무한 루프와 평가 순서

   평가 순서의 차이: 대부분의 언어는 **적용 순서 평가(applicative-order evaluation)**를 사용하여 인자를 먼저 평가함.
> (square (+ 1 2)) ; 결과: 9

   하지만 **정상 순서 평가(normal-order evaluation)**는 인자가 실제로 필요할 때까지 평가를 지연시킴. 이로 인해 무한 루프를 피할 수 있음.
> (define (p) (p))
> (define (test x y) (if (= x 0) 0 y))
> (test 0 (p)) ; 정상 순서에서는 0 반환, 적용 순서에서는 무한 루프

람다 계산법과 Church 숫자

   Church 인코딩을 통해 숫자를 절차(procedure)로 표현할 수 있음. 이는 함수형 프로그래밍의 중요한 개념임.
(define (zero f) (lambda (x) x))
(define (increment n) (lambda (f) (lambda (x) (f ((n f) x)))))

     * zero는 인자를 그대로 반환하는 함수 (identity 함수).
     * increment는 함수 호출을 한 번 더 적용함.

    예시

> ((zero (lambda (x) (+ x 1))) 0) ; 결과: 0
> (((increment zero) (lambda (x) (+ x 1))) 0) ; 결과: 1

반복 vs 재귀

   Scheme은 for 루프 대신 재귀를 사용하여 반복 작업을 수행함.

    재귀 예시: 팩토리얼

(define (factorial n)
  (if (= n 1)
    1
    (* n (factorial (- n 1)))))

   이 재귀 호출은 스택을 사용하여 메모리를 많이 차지할 수 있음.

    꼬리 재귀 최적화(Tail-call optimization)

   Scheme은 꼬리 재귀 최적화를 통해 메모리 사용을 줄임. 이로 인해 반복적(iterative) 프로세스처럼 작동하게 됨.
(define (factorial n)
  (define (iter product counter)
    (if (> counter n)
        product
        (iter (* product counter) (+ counter 1))))
  (iter 1 1))

마무리

   David Beazley의 강의는 SICP의 주요 개념을 선택하여 깊이 있게 다룸. 특히 함수형 프로그래밍, 람다 계산법, 평가 순서 등 다양한 프로그래밍 패러다임을 이해하는 데 도움을 줌.

    Knuth의 인용

     이론만 공부한다면 실천적인 부분에 집중할 때가 되었음을 의미하고, 실천만 한다면 이론적인 부분에 집중할 때가 되었음을 의미함.

        Hacker News 의견

     * SICP 강의는 정보 밀도가 높지만, 학생들의 Q&A와 칠판 사용 등으로 시간이 많이 소요됨. 강의 순서도 재구성 가능성이 있음. 개인적으로 새로운 비디오 시리즈를 계획 중임
          + SICP 강의는 Python 같은 현대 언어를 사용하면서도 본래의 취지를 유지하고 있음
          + Python은 다중 패러다임 언어로서 표현력이 뛰어남
     * 상태를 순수 함수로 인코딩하는 방법을 소개함. 다양한 데이터에 대한 순수 함수적 인코딩이 존재함
          + 인코딩은 혼란스러울 수 있지만 우아하고 간결함
          + JavaScript에서 Maybe 모나드를 함수형으로 구현한 예시를 보여줌
     * 블로그 포스트의 URL 앵커/해시로 인해 포스트스크립트로 바로 이동하여 혼란스러웠음
     * cons/car/cdr를 람다로 구현한 것은 처음 봤을 때 마법 같았음. 이는 언어 런타임이 키/값 사전을 구현해야 함을 보여줌
     * David Beazley는 Python 세계에서 전설적인 인물이며, 이 강의는 처음엔 놀라웠지만 곧 완벽한 조합이라고 생각하게 됨. 다음 강의에 등록함
          + 이는 소프트웨어 엔지니어의 지속적인 교육이 어떻게 진행될지를 보여줌
     * 귀납적 데이터 타입이 필요하다는 개념을 접했음. Church 인코딩만으로는 0 != 1 같은 정리 증명을 할 수 없음
          + 관련 내용을 Notion에 게시함
     * 기사 자체는 흥미로웠지만, 페이지 탐색이 어려웠음. 키보드 화살표로 스크롤이 안 됨
     * ""대체 모델"" 섹션의 코드에 오타가 있음. fib 대신 fibonacci를 사용해야 함. GitHub 저장소의 코드는 올바름
     * 책에 대한 논의가 진행 중인 링크가 있음. 링크가 페이지 하단의 논의로 바로 연결되는 이유가 궁금함. 다른 논의에 통합될 수 있는지 궁금함
     * YouTube 링크가 제공됨
"
"https://news.hada.io/topic?id=17809","Windows XP 스크린세이버 스타일로 본 Bluesky firehose","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Windows XP 스크린세이버 스타일로 본 Bluesky firehose

        Hacker News 의견

     * 많은 사람들이 이 오픈 데이터 접근 방식에 감명을 받고 있음. 과거에는 많은 웹사이트에서 이런 접근이 가능했으며, 창의성을 자극했음. 인터넷의 현재 모습이 안타깝고, 분산형 및 P2P 프로토콜이 인터넷에서 중요한 역할을 하길 바람.
     * Windows ME 스크린세이버처럼 충돌하는 모습이지만, 이런 오픈 파이어호스 접근을 보는 것은 매우 재미있음. Dorsey가 트위터의 API 접근 제한이 실수였다고 했던 것이 기억나며, 이 흐름이 계속되길 바람.
     * Bsky의 오픈 성격이 이런 해킹을 가능하게 하는 것이 마음에 듦. 그들의 프로토콜과 기업 구조가 이 상태를 유지하길 바람.
     * ""Listen to Wikipedia""라는 오래된 웹사이트가 생각남. 매우 편안했음.
     * 카메라를 향한 메시지에서 화면에서 멀리 있는 것이 가까운 것을 가리는 것을 발견했음. 알파 레이어링/렌더링 순서 오류가 있는 것으로 추정됨.
     * 이런 파이어호스 프로젝트를 매우 좋아함. Bluesky가 10배 더 커지길 바람. createTextTexture()에서 반환 전에 특정 코드를 추가하면 흐릿함이 사라짐. 성능은 텍스처 객체를 재사용하는 방식으로 해결할 수 있을 것 같음.
     * Safari(macOS)에서 텍스트의 깊이 정렬 문제를 보고 있음. 먼 거리의 텍스트가 가까운 텍스트 위에 그려지고, 때때로 텍스트 상단이 잘림. 매우 멋짐.
     * 브라우저에서 ""줌 아웃""하면 텍스처 해상도를 높일 수 있음.
     * 이 시각화가 매우 멋짐. 수백만 명의 일기를 읽는 느낌이며, 겸손해짐.
     * 시각화가 좋지만, 소셜 미디어를 피하는 이유를 상기시킴. 끝없는 쓸모없는 정보가 쏟아져 나옴.
"
"https://news.hada.io/topic?id=17790","블루스카이의 "승리" 가능성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            블루스카이의 ""승리"" 가능성

    11월의 시작

     * 11월은 힘든 시기였음. 많은 사람들이 X를 떠나고 있으며, 그 중 많은 이들이 Bluesky를 선택하고 있음.
     * Bluesky에 대한 다양한 의견이 있지만, 동의하지 않는 부분이 많아 이에 대해 더 이야기하고자 함.

    탈중앙화? 연합? 둘 다 아님

     * Bluesky는 현재 탈중앙화나 연합된 서비스가 아님.
     * Bluesky 팀은 탈중앙화 플랫폼을 만들기 위해 노력 중이지만, 이는 복잡한 작업임.
     * AT Protocol(Atproto)은 Personal Data Servers(PDSs), Relays, App Views로 구성되어 있음.
     * 사용자는 자신의 PDS를 설정하여 데이터를 제어할 수 있지만, 이는 서버 수준의 지식이 필요함.
     * Relays는 PDS에서 데이터를 수집하여 Atproto 생태계에 제공함.
     * App View는 사용자가 보는 Bluesky의 인터페이스로, 데이터를 유용하게 변환함.

    Bluesky의 통제 요소

     * DID:PLC와 DMs는 Bluesky의 통제 하에 있음.
     * DID는 분산된 방식으로 식별을 허용하는 표준이지만, Bluesky의 PLC 방식은 Bluesky가 통제함.
     * DMs는 Atproto 스펙 외부에서 처리됨.

    Bluesky의 개방성

     * Bluesky는 데이터가 매우 개방적임.
     * 모든 데이터는 암호학적으로 서명되어 있으며, Merkle 트리 구조를 사용함.

    재정적 우려

     * Bluesky는 현재 무료로 사용 가능하지만, 기술적 선택으로 인해 운영 비용이 증가할 수 있음.
     * CEO Jay Graber는 암호화 산업 배경을 가지고 있으며, 최근 암호화 투자자로부터 자금을 받음.

    작은 문제들

     * Bluesky의 리포스트 제어와 게시물 편집 기능에 대한 불만이 있음.
     * Mastodon과 Twitter에서는 사용자의 리포스트를 선택적으로 비활성화할 수 있었음.

    긍정적인 점들

     * 도메인 기반 사용자 이름 설정이 가능하며, 이는 유연하고 좋은 솔루션임.
     * Bluesky는 조합 가능한 중재와 알고리듬 선택 기능을 제공함.
     * 스타터 팩 기능은 새로운 사용자가 쉽게 시작할 수 있도록 도와줌.

    각자의 경험

     * 다양한 소셜 네트워크에서의 참여 경험은 사람마다 다름.
     * Bluesky는 예술가와 지역 그룹에서 인기를 끌고 있음.

    Bluesky의 가능성

     * 앞으로 6개월 후의 소셜 미디어 환경은 변화할 가능성이 큼.
     * Bluesky가 ""승자""로 자리 잡을 수 있으며, 이는 긍정적으로 봄.
     * 개인 사이트에 더 많은 게시물을 올리고, 관심 있는 소셜 채널에 집계할 계획임.

        Hacker News 의견

     * Bluesky가 Mastodon보다 더 나은 플랫폼이라는 의견이 있음
          + 정치적 논쟁이 적고, ""Discover"" 피드가 분열적인 정치적 콘텐츠를 걸러냄
          + 정치적 밈이 효과적이지 않아 다른 방식으로 소통하게 됨
     * Bluesky의 사용자 수가 급증하고 있으며, 많은 사람들이 Twitter에서 이동 중임
          + Bluesky가 미국 앱 스토어에서 1위를 차지함
          + Bluesky의 사용자 수가 1,300만 명에 도달함
     * Bluesky의 데이터 구조는 Merkle 트리를 사용하며, 이는 Git과 유사함
          + Merkle Search Tree(MST)를 통해 데이터 접근이 가능하며, 이는 Git의 Merkle 트리와 다름
          + 게시물 편집은 UI/UX 수준에서의 구현이 어려움
     * Twitter가 정치적으로 변하면서 Bluesky가 과거의 Twitter와 비슷한 느낌을 줌
          + 산업 뉴스와 친근한 업데이트를 제공함
     * Bluesky의 데이터가 매우 개방적이며, 사용자 데이터의 내보내기가 쉬움
          + 이러한 개방성에 대한 논란이 발생할 가능성이 있음
     * Bluesky의 콘텐츠 링크를 본 적은 없지만, 많은 사람들이 Bluesky로 이동 중임
     * Bluesky는 아직 비어 있는 느낌이지만, 일부 노드가 활발해지고 있음
     * Quora의 초기 시절처럼 작은 커뮤니티가 매력적일 수 있지만, 확장에는 한계가 있음
          + 기술이나 중재로 해결할 수 없는 문제임
     * Threads는 월간 활성 사용자가 2억 7,500만 명이며, Bluesky는 총 사용자 1,500만 명을 보유함
"
"https://news.hada.io/topic?id=17791","Show GN: 리액트 컴포넌트 소스코드를 찾아주는 크롬 확장 프로그램","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: 리액트 컴포넌트 소스코드를 찾아주는 크롬 확장 프로그램

   브라우저에 렌더링 된 요소를 통해 리액트 컴포넌트의 소스코드를 빠르게 찾을 수 있는 크롬 익스텐션입니다.

   사내에서 리액트 소스코드 톺아보기 스터디를 하다가 ""리액트 소스코드를 읽으면 이런 것도 할 수 있어요"" 라는 컨셉으로 만든 익스텐션입니다. 딱히 홍보나 소개를 한 적은 없는데 알음알음 미국, 인도 개발자분들이 꽤 사용하고 계셔서 소개차 올려봅니다.

   익스텐션 설치 후 개발자 도구에 있는 React Code Finder 탭을 여시면 개발 환경에서 컴포넌트 코드를 빠르게 찾아 IDE로 열거나 편집할 수 있습니다.

   앱의 규모가 커지면서 렌더링 된 요소를 바탕으로 소스코드를 빠르게 찾기 어려운 분들, react-devtools 익스텐션의 사용성이 아쉬웠던 분들, 코드를 실시간으로 수정하고 브라우저에서 변경 사항을 확인하고 싶은 분들에게 유용할 것 같습니다.

   자세한 사용법은 아래 README.md를 참고해주세요~!

   https://github.com/Jonghakseo/react-code-finder-extension/…

   Github 링크

   https://github.com/Jonghakseo/react-code-finder-extension
   https://github.com/Jonghakseo/react-code-finder-server

   참고로 익스텐션을 배포하고 보니 이미 유사한 익스텐션/라이브러리로 Locatorjs 라는 이름의 제품이 있더라구요!

   개인적인 사용 경험에서는 제 익스텐션이 좀 더 편했는데, 단순이 제가 익숙해서 그럴 수도 있다고 생각합니다 ㅎㅎㅎ

   이러한 기능에 관심이 있으신 분은 해당 제품도 참고해보시면 좋을 것 같습니다.

   https://www.locatorjs.com/
"
"https://news.hada.io/topic?id=17744","2025 디자인 트렌드 예측: 크리에이티브 리더들의 인사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   2025 디자인 트렌드 예측: 크리에이티브 리더들의 인사이트

     * AI의 급속한 발전은 디자인에 대한 사고방식을 바꾸고 있고, 디자인 산업은 AI 기술 발전과 함께 중대한 전환점에 서 있음

1. AI의 최종 출력 단계 진입

     * AI는 이제 단순한 아이디어 생성 도구를 넘어서 실제 디자인 작업의 최종 출력 단계로 이동 중임.
     * Photoshop의 ‘Generative Fill’ 기능처럼 디자인 툴에 AI 기능이 깊이 내재되어 있어, 디자이너가 원치 않더라도 AI 기능을 사용할 수밖에 없는 상황임
     * AI의 한계와 강점을 이해하고 적재적소에 활용하는 것이 중요함
     * AI가 스케치나 아이디어 단계에서 벗어나 실시간으로 브랜드 자산과 콘텐츠를 생성하는 주요 도구가 될 것이며, , 이는 일부 디자이너의 일자리에 영향을 미칠 가능성이 큼

2. 물리적 경험으로의 회귀

     * 기술의 발전과 동시에, 수공예 및 인간 중심의 디자인으로 회귀하는 반대 흐름이 나타나고 있음
     * 디지털 세계는 여전히 중요하지만, 현실 세계의 직접적인 경험이 다시 중요해질 것
     * AI가 발전함에 따라 오히려 인간적 연결을 만드는 작업에 더 집중하게 될 것임
     * 리테일 분야에서도 온라인과 오프라인 쇼케이스가 균형을 이루며, 인간적인 디테일과 불완전한 요소가 다시 부각되고 있음
     * 젊은 세대는 진짜 삶, 진정한 대면 연결을 중요시하는 시대로 회귀하고 있음

3. 수공예(Craft)의 부활

     * 대량 생산과 디지털 포화에 대한 반발로, 전통적 수공예와 지속 가능성에 대한 관심이 커지고 있음.
     * 개인화, 지속 가능성, 그리고 전통적 공예 기술과 최신 기술의 융합이 이 트렌드를 주도함
     * 개인화: 대량 생산 제품에서 벗어나 개인적 의미가 담긴 수제품을 원하는 소비자가 늘어남
     * 지속가능성: 느리고 의도적인 생산 방식을 가진 공예는 친환경, 윤리적 소비와 부합함
     * 기술 발전과 전통 기술의 접목으로 혁신적이면서도 정통적인 디자인이 탄생할 것임

4. 실험적인 디자인 증가

     * Canva와 같은 저렴한 디자인 툴의 등장으로 누구나 디자이너가 될 수 있지만, 템플릿 기반 디자인이 획일화된 콘텐츠를 양산하고 있음.
     * 이러한 문제에도 불구하고 더 많은 실험과 창의적 접근이 가능해졌음
     * ""디자인되지 않은"" 트렌드, 혼돈, 맥시멀리즘 등 알고리즘이 계속 제공하는 깔끔하고 평범함에 대응하는 반복이 계속될 것으로 기대됨

5. 디자인 글쓰기의 부상

     * AI가 텍스트 입력만으로 최종 이미지를 생성할 수 있는 수준에 도달하면, 글쓰기 능력이 중요한 디자인 스킬로 떠오르고 있음
     * 글을 통한 명확한 아이디어 표현이 디자인 결과물에 새로운 방향을 제시할 수 있음

6. 사운드 디자인의 중요성

     * 웹의 발전으로 인해 오디오가 웹에서 더 쉽게 접근 가능해지면서, 사운드가 디지털 디자인의 핵심 요소로 떠오르고 있음
     * 사운드가 사용자 경험에 큰 영향을 줄 수 있으며, 사용자가 선호하는 사운드 옵션을 반영할 가능성이 높아지고 있음

7. 지속 가능성의 중심

     * 환경에 대한 의식이 높아지면서 지속 가능성은 디자인의 핵심 요소로 자리잡고 있음.
     * 브랜드는 자연스러운 텍스처와 색상을 통해 지속 가능성을 강조하고, 친환경적인 소재를 사용한 미니멀한 패키징을 채택하고 있음

8. 미니멀리스트 맥시멀리즘

     * 미니멀리즘의 깔끔함과 맥시멀리즘의 대담함을 결합한 ‘미니멀리스트 맥시멀리즘’이 주목받고 있음.
     * 미니멀리즘의 깨끗한 선과 여백을 유지하면서 과감하고 예상치 못한 요소들이 추가됨: 강렬하고 분위기 있는 색상, 대형 타이포그래피 등 절충주의적 요소들

9. 건강이 새로운 럭셔리로 부상

     * 웨어러블 기술과 데이터 시각화의 발전으로 건강 관련 디자인이 고급화되고 있음
     * 건강 데이터를 시각적으로 표현하여 사용자가 쉽게 이해할 수 있도록 하는 것이 중요한 트렌드가 될 것
     * 특히 여성 건강 브랜드는 혁신적인 제품과 솔직한 커뮤니케이션으로 인기를 끌고 있음

10. 포용성이 필수 요소로 자리잡음

     * 브랜드는 단순한 형식적 포용성을 넘어, 다양한 문화와 능력을 진정성 있게 반영하는 방향으로 나아가고 있음.
     * 특히 50대 이상의 소비자가 큰 구매력을 가지고 있음에도 불구하고, 젊은 세대만을 겨냥한 마케팅이 많음
     * 앞으로는 연령대, 문화, 다양한 삶의 경험을 아우르는 디자인이 중요해지고 있으며, 진정성 있는 접근이 핵심임

미래를 향한 시각

     * 디자인 업계는 기술 대 인간미, 미니멀리즘 대 맥시멀리즘, 디지털 대 물리적 경험 등 서로 상반된 흐름을 동시에 받아들이고 있음
     * 성공적인 디자이너와 브랜드는 이러한 이중성을 잘 조화시키고, 감정적 및 실용적인 수준에서 공감을 이끌어내는 작업을 할 수 있을 것임
"
"https://news.hada.io/topic?id=17823","KaibanJS - AI 에이전트 관리 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      KaibanJS - AI 에이전트 관리 프레임워크

     * AI 에이전트 시스템을 실시간으로 관리하고 시각화할 수 있는 JavaScript 기반 프레임워크
     * 기존 Trello, Jira, ClickUp과 같은 도구에서 사용하는 Kanban 방식을 활용하여 효율적인 AI 에이전트 관리가 가능하고, AI 프로젝트에서 발생하는 복잡한 작업 흐름을 쉽게 관리할 수 있도록 설계됨
     * 주요 기능
          + AI 에이전트, 작업, 도구 및 팀 생성 및 시각화
          + AI 워크플로우의 매끄러운 오케스트레이션
          + 실시간 워크플로우 시각화
          + 작업 진행 추적
          + 효율적인 AI 프로젝트 협업 지원
     * 기본 개념
          + 에이전트(Agents): 에이전트는 특정 작업을 수행하고 목표를 달성하도록 설계된 자율적 엔티티로, 주어진 작업을 반복하여 최종 결과를 도출함.
          + 작업(Tasks): 에이전트가 수행할 특정 작업을 정의하며, 최종 산출물로 표시할 수 있는 중요한 결과를 포함함.
          + 팀(Team): 팀은 에이전트와 작업을 조정하며, 작업 사이에서 정보의 흐름을 관리함.

주요 기능

     * Kaiban 보드
          + Kanban 보드와 유사하게, KaibanJS는 AI 에이전트의 작업 흐름을 실시간으로 시각화할 수 있도록 지원
          + 각 에이전트의 진행 상황을 직관적으로 볼 수 있어 복잡한 AI 운영도 쉽게 이해하고 관리할 수 있음
     * 역할 기반 에이전트 설계
          + AI 에이전트를 특정 기능에 맞게 최적화하여 각 작업의 효율성을 높일 수 있음
          + 예를 들어, 개발팀의 경우, 개발자, 제품 관리자, QA 전문가와 같은 역할에 맞게 에이전트를 구성하여 프로젝트 속도를 가속화할 수 있음
     * 도구 통합
          + KaibanJS는 에이전트가 특정 도구(예: 검색 엔진, 계산기 등)를 활용하여 더 정밀한 작업을 수행하도록 지원함
          + LangchainJS와 호환되는 다양한 도구를 지원
     * 다양한 LLM 지원
          + 특정 작업에 적합한 AI 모델을 선택하여 다양한 AI 모델을 통합할 수 있음
          + 프로젝트의 효율성을 극대화하고 비용 대비 적절한 AI 자원을 활용할 수 있음
     * 견고한 상태 관리
          + KaibanJS는 Redux에서 영감을 받은 아키텍처를 사용하여 에이전트, 작업, 전체 흐름의 상태를 일관성 있게 관리함
          + 복잡한 에이전트 상호작용에서도 상태 관리를 통해 명확성과 제어력을 제공
     * 선호하는 JavaScript 프레임워크와 통합
          + NextJS, React, Vue, Angular, Node.js와 같은 JavaScript 프레임워크와 쉽게 통합 가능
          + 프로젝트의 워크플로우에 AI 기능을 원활하게 추가할 수 있음
     * 관측 가능성 및 모니터링
          + 상태 변화, 토큰 사용, 운영 비용 등의 실시간 통계를 제공하여 시스템 신뢰성을 높이고 투명성을 확보할 수 있음
          + 워크플로우 로그를 통해 상태 변화를 추적하고 이에 따른 제어력을 강화할 수 있음
"
"https://news.hada.io/topic?id=17842","bpftune - BPF를 사용한 리눅스 자동 튜닝 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    bpftune - BPF를 사용한 리눅스 자동 튜닝 도구

     * BPF(eBPF)의 관찰 기능을 활용해 시스템 성능을 항상 자동으로 튜닝할 수 있도록 설계된 경량화된 도구

해결하고자 하는 문제점

     * 너무 많은 튜닝 옵션: 리눅스 커널에는 1600개 이상의 튜닝 가능한 sysctl 매개변수가 존재. 다양한 환경에 맞는 설정을 찾는 것은 복잡하고 어려움
     * 관리자 개입의 감소: 현대 클라우드 시스템에서는 수동적인 튜닝보다는 자동화된 관리가 필요. 대부분 시스템은 초기 설정 이후 관리자의 개입이 거의 없음
     * 정적인 설정의 한계: 시스템 환경은 계속 변동되기 때문에, 고정된 값으로 튜닝하는 것은 비효율적일 수 있음

핵심 설계 원칙

     * 최소 오버헤드: 고빈도 이벤트 추적을 피하고, 꼭 필요한 경우에만 관찰 기능 사용
     * 정책 설명 명확화: syslog에 ""무엇""이 ""왜"" 변경되었는지 기록
     * 관리자 우선: 관리자가 값을 설정하면 자동 튜닝 기능 비활성화
     * 무설정 원칙: 별도의 설정 없이 자동으로 튜닝. 가능한 한 매직 넘버를 피함
     * 동적 조절: TCP 메모리 사용량이 증가할 경우 버퍼 크기를 줄여 시스템 균형을 맞춤

주요 개념

     * 튜너(tuner): 각 튜너는 BPF 프로그램에서 발생한 이벤트를 처리하며 관련된 튜닝 가능한 항목을 관리
     * 전략(strategy): 튜너는 여러 가지 전략을 가질 수 있으며, 각 전략은 평가 함수를 통해 효과적인 전략을 선택
     * 이벤트(event): 튜너 ID, 시나리오, 네트워크 네임스페이스 정보 등이 포함되며, 튜너는 이 정보를 바탕으로 적절한 조치를 수행

아키텍처

     * bpftune은 데몬으로, 여러 .so 형식의 플러그인 튜너를 로드하여 관리.
     * 각 튜너는 고유의 ID를 가지며, BPF와 사용자 공간에서 이벤트를 처리.
     * BPF 구성 요소는 bpftune.bpf.h를 포함하며, 공유 변수와 맵 정의를 사용.

지원 튜너 목록

     * TCP connection tuner: 혼잡 제어 알고리즘 자동 튜닝
     * neighbour table tuner: 이웃 테이블 크기 자동 확장
     * route table tuner: 라우트 테이블 크기 자동 확장
     * sysctl tuner: 튜닝된 sysctl 값이 수동 설정과 충돌할 경우 튜너 비활성화
     * TCP buffer tuner: TCP 버퍼 크기 자동 조정
     * net buffer tuner: 코어 네트워크 관련 튜닝 자동 조정
     * netns tuner: 네트워크 네임스페이스 추가 및 제거 감지

     * eBPF rethinking the Linux Kernel
     * BPF : 새로운 타입의 소프트웨어
     * bpf를 이용한 성능분석
     * eBPF 공식 사이트 오픈
     * eBPF Summit Recap
     * eBPF on Windows

  Hacker News 의견

     * 시스템 문제를 진단하고 해결하는 것이 더 어려워질 수 있다는 우려가 있음
     * ""피드백 루프""라는 개념이 문제 발생 가능성을 설명하는 데 중요함
          + Linux 커널, BPF, 프로그램 자체의 문제가 아니라 작동 방식 때문임
          + 위험이 없을 수도 있고, 제어 장치가 있을 수도 있으며, 문제가 발생해도 안정적인 상태로 수렴할 수 있음
     * 제어 이론이 소프트웨어 엔지니어링에서 다소 과소 적용되고 있음
     * 이 도구를 사용하는 사람들의 의견을 듣고 싶음
          + 효과적인지, 설정 시간이 가치가 있는지 궁금함
     * bpftune은 설정이 필요 없는 도구로 설계되었음
          + 많은 설정을 배우지 않아도 되어 자동화된 지원을 환영함
     * CachyOS에서 바로 사용할 수 있음
          + 설치 후 CachyOS Hello -> Apps/Tweaks 경로로 접근 가능함
     * 공유 k8s 클러스터와 같은 다중 테넌트 환경에서의 효과가 궁금함
          + 각 애플리케이션이 다른 목적을 가지고 있으며 시간이 지남에 따라 노드 간 이동함
          + 그러나 대부분의 애플리케이션 간에 유사점이 있을 가능성이 높음
     * TCP 버퍼 크기 조정이 가치가 있는지 궁금함
     * 매개변수를 최적의 값으로 조정하는 것이 쉬웠다면 커널이 처음부터 그렇게 했어야 하지 않을까 하는 의문이 있음
     * 단순한 패킷 필터링에서 추적 및 모니터링으로 발전한 것이 훌륭함
          + 대부분의 사람들이 알아야 할 훌륭한 도구임
          + 몇 년 동안 사용해 왔음
"
"https://news.hada.io/topic?id=17796","넷플릭스 버퍼링 문제: 제이크 폴 vs. 마이크 타이슨 경기 불만 제기한 복싱 팬들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             넷플릭스 버퍼링 문제: 제이크 폴 vs. 마이크 타이슨 경기 불만 제기한 복싱 팬들

     * Jake Paul vs. Mike Tyson 경기 시청자 수
          + Jake Paul과 Mike Tyson의 경기는 많은 시청자를 끌어모았음.
          + Netflix에 따르면, Paul과 Tyson의 경기를 6천만 가구가 시청했으며, 공동 메인 이벤트인 Katie Taylor vs. Amanda Serrano 경기는 5천만 가구가 시청했음.
          + Taylor vs. Serrano 경기는 미국 역사상 가장 많이 시청된 여성 스포츠 이벤트로 기록됨.
     * Netflix 스트리밍 문제
          + 많은 Netflix 사용자들이 스트리밍 품질에 대해 불만을 제기했음.
          + 긴 로딩 화면이나 ""검은 화면"" 문제로 인해 시청자들이 불편을 겪었음.
          + 시청자 수가 증가하면서 문제는 더욱 심화되었음.
          + 주요 경기에서도 문제는 해결되지 않았으며, 이는 전 세계 복싱 프로모터들에게 큰 실망을 안겨줌.
     * Antonio Brown의 라이브 스트림
          + Netflix의 방송 문제로 인해 일부 시청자들은 Antonio Brown의 라이브 스트림을 시청함.
          + 전 NFL 와이드 리시버인 Brown은 텍사스 알링턴의 AT&T 스타디움에서 라이브 비디오를 시작했음.
          + Paul vs. Tyson 경기 중간에 그의 라이브 스트림은 640만 명의 시청자를 끌어모았음.

        Hacker News 의견

     * 대기업이 실수할 때, 사건에 직접 관련된 사람들과 유사한 회사의 사람들이 게시글을 잘 올리지 않음. 그들은 PR 기계를 우회할 위험이 크기 때문임.
          + 유사한 시스템을 운영하는 사람들은 이 일이 얼마나 어려운지 알기 때문에, 무지한 추측에 기반한 비난을 피함.
          + 나머지 사람들은 소규모 시스템의 작동 방식이나 ""기본 원칙""에 기반한 통찰을 제공함.
     * 지속적인 라이브 이벤트를 통해 조직의 역량을 키우는 것이 중요함. 기술 팀이 경험 없는 분야에서 대규모 이벤트를 한 번에 진행하는 것은 피해야 함.
     * 라이브 스트리밍은 수요를 예측하기 어려워서 온디맨드보다 훨씬 어려움. Netflix가 첫 라이브 시도로 예측하기 어려운 이벤트를 선택한 것이 흥미로움.
     * NFL이 Netflix에게 크리스마스 게임을 맡긴 이유는 라이브 스트림을 처리할 수 있는 능력을 입증하기 위한 것이었을 가능성이 있음.
     * Netflix의 문제는 특별한 것이 아님. Hotstar는 인도 대 파키스탄 크리켓 경기를 문제 없이 스트리밍했음. 기술은 이미 존재하며, ESPN도 이전에 성공적으로 해냈음.
     * 2012년 YouTube는 Red Bull stratos 라이브 스트림을 800만 명의 동시 사용자와 함께 성공적으로 진행했음. Netflix는 실패했음.
     * Netflix는 세계에서 가장 숙련된 엔지니어링 팀 중 하나임에도 불구하고, 지난 밤 거의 볼 수 없는 경험을 제공했음.
     * 라이브 스트리밍은 많은 변수가 있음. Netflix는 준비된 콘텐츠 스트리밍에 뛰어나지만, 라이브 스트리밍에는 약함.
     * Netflix는 300B 회사로, 자원 문제는 아님. 이전에도 대규모 라이브 스트리밍을 했으며, 두 번째 시도는 더 나아져야 했음.
     * 버퍼링 문제뿐만 아니라 피드가 멈추고 다시 시작되지 않는 문제도 있었음. 이는 실망스러운 경험이었음.
     * Netflix는 웹 기술의 선두주자로서 많은 복잡한 문제를 해결했지만, 외부 도움을 받아야 한다는 것을 내부적으로 인정하지 못했을 가능성이 있음. 이는 자만과 집단 사고의 결과일 수 있음.
"
"https://news.hada.io/topic?id=17838","싱글 페이지 앱 외에는 인터랙티브 웹 앱을 구축할 수 없다는 오해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  싱글 페이지 앱 외에는 인터랙티브 웹 앱을 구축할 수 없다는 오해

     * 어떤 개발자들은 SPA 프레임워크(React, AngularJS 등)가 고품질 애플리케이션 개발에 필수적이라고 생각함
     * 그러나 SPA 이전에도 MPA 기반의 애플리케이션이 훌륭한 사용자 경험을 제공해 왔음
     * 나는 HTMX를 활용하여 데이터 중심의 MPA 기반 관찰 플랫폼 개발을 시도해봤고, 적절한 최적화를 통해 서버 렌더링 MPA에서도 뛰어난 성능과 사용자 경험을 제공 가능

    MPA와 관련된 오해와 진실

      오해 1: MPA는 페이지 전환 시 느림

     * 문제: 브라우저가 기본적으로 페이지 전환마다 JavaScript와 CSS를 다시 다운로드하기 때문
     * 해결책:
          + PJAX, Turbolinks, HTMX Boost 같은 라이브러리를 사용해 HTML body만 교체
          + 서비스 워커를 활용해 페이지 캐싱 및 요청 처리 개선 가능
          + 예시: 서비스 워커 적용 시 DOMContentLoaded 시간이 2.9초에서 500ms로 단축됨

      서비스 워커 구현 방법

    1. sw.js 파일 생성: 캐싱 및 네트워크 요청 관리 스크립트 작성
    2. 캐싱 파일 목록 정의: HTML, CSS, JS 등 주요 자산을 지정
    3. 캐싱 전략 설정: 정적 자산을 영구 캐싱하거나 주기적으로 갱신


      오해 2: MPA는 오프라인 작동 및 네트워크 복구 요청 저장 불가

     * 서비스 워커를 사용해 오프라인 상태에서도 앱 작동 가능
     * Workbox 활용:
          + 네트워크 실패 시 요청을 캐싱하고 최대 24시간 내에 재시도
          + 오프라인 핸들러를 설정해 요청 시 대체 콘텐츠 제공


      오해 3: MPA는 페이지 전환 시 화면 깜박임이 발생

     * 해결책:
          + 서비스 워커와 사전 로드 API로 자산이 준비될 때까지 화면 페인팅 지연
          + 2019년 이후 브라우저는 동일한 도메인 내 전환 시 깜박임 없이 처리


      오해 4: MPA는 화려한 페이지 전환 효과 구현 불가

     * SPA가 페이지 전환 애니메이션으로 유명하지만, 브라우저도 이를 지원하기 시작
     * Chrome 126에서 CSS만으로 크로스 문서 전환 애니메이션 구현 가능
     * 데모 링크


      오해 5: HTMX나 MPA에서는 모든 사용자 작업이 서버에서 처리됨

     * HTMX는 일부 작업만 서버에서 처리하도록 설계됨
     * 필요한 경우 WebComponents나 JavaScript 프레임워크로 클라이언트 측 인터랙티브 기능 추가 가능
     * 특정 컴포넌트에만 SPA 방식 적용 가능


      오해 6: DOM 조작은 느림. 따라서 React/Virtual DOM 사용이 필요

     * Virtual DOM은 극도로 복잡한 애플리케이션에서만 성능 차이를 보임
     * 대부분의 일반 애플리케이션에서는 DOM 직접 조작이 충분히 빠름
     * 참고 자료: ""Virtual DOM is pure Overhead""


      오해 7: 작은 인터랙티브 기능에도 JavaScript가 필요

     * 최신 브라우저 기술로 JavaScript 없이도 다양한 기능 구현 가능
          + HTML 체크박스와 CSS로 토글 기능 구현 가능
          + HTMX를 결합해 클릭 시 데이터 비동기 로드 가능


      최종 오해: SPA 없이 클라이언트 측 코드는 스파게티 코드로 변질됨

     * 스파게티 코드 시절에도 많은 생산적인 소프트웨어가 개발되었음
     * 초기 MVP 단계에서는 간단한 구조가 더 유리할 수 있음


    결론

     * 2024년 현재, 브라우저는 SPA 혁명에서 배운 점들을 통합해 많은 발전을 이룸
     * 기본 브라우저 도구(HTML, CSS, JavaScript)만으로도 인터랙티브하고 오프라인에서 작동 가능한 애플리케이션 구현 가능
     * 브라우저의 잠재력을 믿고 다시 한 번 활용해 보기를 권장함

   고만고만한 개발자들 데리고 개발해보면 이게 얼마나 환상에 찬 얘긴지 바로 알겁니다. 이거 쓴 분은 천재들에 둘러싸여있거나 혼자 일하거나 그러고있는듯... (철지난 angularjs를 지금 언급하는걸 봐도 그렇고) 그리고 개발은 천재들로만 하는게 아니죠
   누군가는 '끼리끼리 모여있다'라고 폄하하겠지만 언제나 변화는 평범한사람들에 의해 이뤄졌습니다
   이런거 보면 htmx는 절대로 수용되어서는 안되겠다는 생각이 먼저 드네요

   최근 들어서 계속 계속 나오는 주제이긴 한데,
   리치 해리스가 몇 년전에 해당 주제에 대한 자신의 의견을 말한 영상이 있습니다.
   https://www.youtube.com/watch?v=860d8usGC0o&t=635s

   기억하기로는 파셜 HTML 을 기반으로 업데이트 하는 방식들은 화면과 데이터의 비 일관성이 생길 가능성이 있다. 라고 요약할 수 있겠네요.

        Hacker News 의견

     * 브라우저 캐시를 활용하여 정적 CSS와 JS 자산을 관리하는 방법이 기사에 언급되지 않은 이유에 대한 궁금증이 있음. 과거에 쇼핑 사이트를 MPA 방식으로 구축했을 때 페이지 전환이 거의 눈에 띄지 않았음
     * PHP와 jQuery 시절의 웹 개발이 가장 생산적이었다고 주장하는 사람도 있음. React 등 최신 기술보다 과거의 패러다임이 더 생산적일지 궁금해하는 의견이 있음. Amazon이나 Steam 같은 대형 사이트도 여전히 서버에서 HTML을 렌더링하고 JS를 추가하는 방식으로 만들어짐
     * 서비스 워커 전략이 기존의 HTTP 캐시 헤더와 비교해 어떤 점에서 더 나은지 설명을 요청하는 의견이 있음. 네트워크 왕복을 줄일 수 있지만, 작은 최적화를 위해 전체를 재발명하는 것처럼 느껴짐
     * ""You Can't Build Interactive Web Apps Except as Single Page Applications... And Other Myths""라는 제목의 의미가 생략된 부분 때문에 클릭을 유도하는 느낌이 듦
     * 프로그래밍에서 가장 위험한 것은 개발자의 지루함과 과거에 대한 무지임
     * Node.js 웹 서버 시대에 서버 측과 클라이언트 측(SPA) 사이의 이분법이 왜 존재하는지 이해하지 못하는 의견이 있음. 서버에서 대부분의 작업을 초기화하고 클라이언트로 직렬화하여 SPA로 작동하게 할 수 있지 않을까 하는 질문이 있음
     * SPA와 MPA를 서로 반대되는 팀으로 보는 경향이 있지만, 웹 스택을 자연스럽게 사용하는 방법과 ""해킹"" 방식으로 구분할 수 있음. SPA는 현재 해킹 방식이지만, 과거에는 CGI, Java 애플릿, Flash 등이 있었음. 해킹 방식이 자연스러운 방법의 한계를 확장하는 역할을 함
     * 기술 스택 결정보다 먼저, 개발자들이 자신이 무엇을 작성하고 있는지 잘못 이해하는 경우가 많음. 높은 수준의 상호작용이 필요하지 않다면, 대부분 서버 측 프레임워크로 충분할 수 있음
     * ""단일 페이지 앱이 아니면 상호작용 웹 앱을 만들 수 없다""는 신화에 대한 반박이 있음. SPA는 더 많은 제어를 제공하고 코드의 일부를 재작업할 가능성을 줄여줌
     * HN 헤드라인이 실제 헤드라인보다 더 공격적임. Tony Alaribe가 BigSkyDevCon에서 발표한 에세이로, 비-SPA 기반 웹 애플리케이션을 빠르고 매끄럽게 만드는 기술을 논의함. 새로운 기술을 소개하며, 컨퍼런스에서 최고의 발표였다고 생각함

   자네는 아직도 브라우저 스펙을 믿나...?

   구지 말하면, SPA는 브라우저 동작에 그나마 덜 의존성을 갖는 앱 개발 방법이라 생각합니다.

   SPA의 멋진 가능성들을 브라우저가 꽤 따라왔고 그게 http의 원래 설계된 통신 방식에 더 어울려 보이는것은 맞지만, 그건 크롬이 브라우저 세계에서 사실상 독점적인 지위를 가지면서 여유가 생겨서 그런게 아닐까 합니다... 이런게 과연 오래 갈진 모르겠네요. 여유든, 점유율이든...

   phoenix liveview 같은 방식의 websocket 기반으로 서버에서 dom 조작하는거면 패러다임이 다른데
   htmx 써봤을 때는 서버에서 조각난 html을 내려줘야한다는 게 그닥 유쾌하진 않더라고요
   특히 css 부분에서 class를 지정해서 내려주면 서버 입장에서는 화면에서 사용중인 css를 알 수가 없으니 사실상 공통 css를 강제하는 느낌입니다.

   몇년전에 Phoenix liveview 로 다소 복잡한 UI 를 만들어본 적 있는데, 간단한 인터렉션을 구현하는게 너무 까다롭고, 하나의 liveview 가 하나의 elixir process 로 처리되기 때문에, 옆 컴포넌트와 인터렉션이 매우 어렵습니다. 결국 포기하고 react 로 돌아간 기억이 있네요.

   liveview가 미래같아요 저는…

   liveview는 또 네트워크에 크게 의존하다보니까 서버가 원격지라서 핑이 높거나 제3세계 등 인터넷 인프라가 좋지 않은 경우에서는 약점이 크더라고요.
"
"https://news.hada.io/topic?id=17852","Show GN: ESLint Plugin Perfectionist v4.0.0 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: ESLint Plugin Perfectionist v4.0.0 출시

   가져오기, 타입스크립트 유형, JSX 소품, 객체, 변수 등을 정렬하기 위한 플러그인입니다.
   새 릴리스에서는 세 가지 새로운 규칙, 향상된 Ts 지원, 새로운 옵션 및 버그 수정이 이루어졌습니다.
"
"https://news.hada.io/topic?id=17743","Firecrawl - 웹사이트 전체를 LLM에서 사용가능하게 만드는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Firecrawl - 웹사이트 전체를 LLM에서 사용가능하게 만드는 도구

     * 웹사이트를 크롤링해서 LLM에서 사용가능한 마크다운 또는 구조화 데이터로 변환
     * API로 URL을 전송하면, 모든 하위 페이지를 크롤링하여 각 하위 페이지에 대한 깨끗한 데이터를 제공
     * Python, Node, Go, Rust SDK 제공
     * LangChain, Llama Index,Dify, Langflow, Zapier 등에 연동지원

   하위 크롤링을 지원하지는 않지만, 유사한 목적의 문서 포맷 변환기를 소개해봅니다.
   https://github.com/DS4SD/docling

   원하는대로 잘 되진 않네요
"
"https://news.hada.io/topic?id=17740","Stretch My Time Off - 휴가일 최적화를 위한 알고리듬","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Stretch My Time Off - 휴가일 최적화를 위한 알고리듬

     * 🇰🇷 한국에서는 2024년에 11개의 공휴일이 있음
     * 15일의 휴가를 41일로 늘릴 수 있는 방법을 제시함

2024년 휴가 계획

     * 1월
          + 주말과 공휴일을 활용하여 3월 1일부터 3일까지 3일간 휴가 가능
     * 5월
          + 5월 11일부터 19일까지 9일간 휴가 가능
     * 6월
          + 6월 6일부터 9일까지 4일간 휴가 가능
     * 8월
          + 8월 15일부터 18일까지 4일간 휴가 가능
     * 9월
          + 9월 14일부터 17일까지 4일간 휴가 가능
     * 10월
          + 10월 3일부터 13일까지 11일간 휴가 가능
     * 12월
          + 12월 21일부터 26일까지 6일간 휴가 가능

어떻게 가능한가?

     * Zach와 GPT-4o가 만든 프로젝트로, GitHub에서 확인 가능

   한국은 추석이랑 설날이 1일로 들어가있네요

        Hacker News 의견

     * 어떤 사용자는 친구들과 함께 PTO(유급 휴가)를 최대한 활용하는 방법을 찾는 것을 즐겼음. 요즘은 번아웃을 느낄 때 긴 주말을 보내는 것이 더 효과적이라고 생각함
          + PTO를 최적화하는 것보다 필요할 때 사용하는 것이 더 중요하다고 느끼고 있음
     * 다른 사용자는 제공된 휴일 수가 일관성이 없다고 느꼈음
          + 61일이라는 계산이 주말과 공휴일을 포함한 것이라며, 주말을 포함하지 않는 것은 불공평하다고 주장함
          + 이러한 과장된 광고는 심리적으로 방어 모드를 활성화시킨다고 언급함
     * 또 다른 사용자는 공휴일에 여행하는 것보다 비용과 혼잡을 피하는 것이 더 중요하다고 생각함
          + 공휴일에 여행하는 것은 추가 비용과 혼잡을 초래한다고 언급함
     * 어떤 사용자는 이 도구가 유용하지 않다고 생각함
          + 회사마다 제공하는 휴일이 다르며, 현재 도구는 사용자에게 여러 옵션을 제공하지 않음
          + 특정 휴일을 연장하는 데 사용되는 날을 조정할 수 없다고 지적함
     * 한 사용자는 사이트가 코드 어시스턴트를 사용하여 구축된 것에 감명을 받았음
          + 국가 목록을 어디서 가져왔는지 궁금해함
          + 대만을 '중국의 대만성'으로 표시하는 것에 대해 지적함
     * 또 다른 사용자는 일본의 경우 10일의 공휴일을 51일로 늘릴 수 있다고 하지만 실제로는 13일 정도의 추가 휴일이 가능하다고 언급함
          + 더 정확한 계산이 필요하다고 제안함
     * 한 사용자는 사이트의 기능에 대한 피드백을 요청함
          + 사이트의 일부 기능이 예상과 다르게 작동한다고 언급함
     * 어떤 사용자는 스웨덴에서 크리스마스 시즌에 휴가를 최적화하는 방법에 대한 기사가 매년 인기 있다고 언급함
          + 특정 연도에는 6일의 PTO로 17일의 연속 휴가를 얻을 수 있다고 설명함
"
"https://news.hada.io/topic?id=17741","rip2 - 더 안전한 Rust 기반 rm ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        rip2 - 더 안전한 Rust 기반 rm

     * rip은 Rust로 작성된 rm의 대체제로 안전성/편의성/성능에 중점을 두고 있음
     * 삭제된 파일은 절대 경로를 유지한 채 graveyard 디렉토리에 보관됨 (/tmp/graveyard-$USER), 따라서 데이터를 복구할 수 있는 기회를 제공
          + 데이터는 덮어쓰이지 않음. 같은 경로의 파일이 삭제될 경우 백업 번호가 붙여짐
     * ""rip2""는 기존 rip 프로젝트의 여러 포크 중 하나이며, 세 번째 포크임:
          + 원래 프로젝트는 2020년 이후 유지보수가 중단됨
     * 추가된 변경사항:
          + 확장된 지원: Windows, NixOS 지원 추가
          + 코드 정리: 최신 Rust로 리팩토링, 원본 저장소의 PR 병합
          + 테스트 추가: 전체 테스트 스위트와 커버리지 모니터링 추가
          + 스타일 개선: 컬러풀한 출력과 seance의 날짜/시간 정보 추가
          + 버그 수정: FIFO 파일 및 seance 관련 문제 수정
          + 셸 자동완성 기능: bash, elvish, fish, powershell, zsh, nushell 등의 자동완성 지원 (clap 사용)
          + 안전성 향상: 동시 프로세스 간 레이스 조건 방지를 위한 flock 구현
     * Linux, macOS, Windows에서 설치 및 사용 가능

   RIP...

   이제 sudo rm -rf / 에도 한줄기 희망이 생기나요....?
   물론 alias rm=rip2....
"
"https://news.hada.io/topic?id=17768","더 오니언의 인포워즈 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             더 오니언의 인포워즈 인수

     * The Onion, Infowars 인수
          + 풍자 뉴스 사이트인 The Onion이 음모론자 Alex Jones가 운영하는 Infowars를 인수하기 위한 파산 경매에서 승리함.
          + 그러나 파산 법원은 다음 주 청문회까지 판매를 일시 중지함.
     * The Onion의 계획
          + The Onion은 Infowars를 풍자 사이트로 재출시할 계획임.
          + Sandy Hook 초등학교 총격 사건 피해자 가족들이 이 계획을 승인함.
          + The Onion의 모회사인 Global Tetrahedron의 CEO Ben Collins는 Infowars를 ""이상한 인터넷 인물""을 조롱하는 사이트로 만들 계획이라고 밝힘.
     * 법원의 결정
          + 판사 Christopher Lopez는 비공개 입찰 과정의 투명성 부족과 자산 명확화 필요성을 이유로 판매를 중지함.
          + 논란이 된 자산 중 하나는 Mr. Jones의 X 계정임.
     * 입찰 과정
          + 경매에는 두 명의 입찰자만 참여함.
          + Walter J. Cicack는 Infowars 웹사이트와 관련 웹사이트, 보충제 사업을 위해 $3.5백만을 제시했으나, ""백업 입찰자""로 선정됨.
          + The Onion 그룹은 First United보다 적은 현금을 제시했으나, Sandy Hook 가족들이 일부 손해 배상금을 포기하는 ""신용 입찰""을 포함하여 승리함.

        Hacker News 의견

     * The Onion이 InfoWars를 구매하여 재미있고 어리석은 웹사이트로 만들 계획임
          + Sandy Hook 가족들의 도움으로 구매가 이루어졌음
          + Onion과 Clickhole의 유명 인사들이 프로젝트에 참여하고 있음
          + Alex Jones는 이념적으로 자신과 맞는 구매자가 InfoWars를 사서 자신을 다시 고용하기를 바랐음
     * NPR 기사에 따르면, Sandy Hook 가족들이 회복금의 일부를 포기하여 The Onion의 입찰 가치를 높였음
     * Alex Jones를 ""기억할 가치 없는 사람""으로 언급한 것은 그의 자존심을 건드리는 효과적인 방법임
          + 새로운 사이트에서 그의 이름을 언급하지 않으면서도 자주 언급되기를 바람
     * The Onion이 InfoWars의 쓸모없는 상품과 보충제를 처리해야 하는 상황임
          + 500% 가격이 부풀려진 금괴를 녹여서 Sandy Hook 가족을 위한 자선 경매 수집품으로 만들 것을 제안함
          + Alex Jones의 책을 종이 마셰로 재활용하여 지구본을 만드는 것도 제안함
     * 이 사건은 웃기기도 하고 정의롭기도 하지만, 더 큰 관점에서는 무의미한 상호 비방일 뿐임
          + 미국이 더 분열된 이유는 I.W. 같은 사이트 때문이 아니라, 그러한 사이트에 대한 우리의 반응 때문이라고 주장함
     * The Onion은 Alex Jones를 필터 없이 유지하되, 모든 페이지에 Onion 로고를 넣어야 한다고 제안함
          + 이미 충분히 재미있는 농담이므로 계속 유지해야 한다고 주장함
     * Twilio의 창립자 Jeff Lawson이 The Onion을 소유하고 있으며, 그의 은퇴 프로젝트가 성장하고 있음
     * Parkland 사건의 경우처럼, 소송을 제기한 사람들이 그의 이름과 초상권을 가져갔어야 한다고 주장함
          + 이는 그가 또 다른 부정적인 제국을 재건하는 것을 막을 수 있기를 바람
"
"https://news.hada.io/topic?id=17756","dns query의 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             dns query의 여정

     * dns 요청 순서 변경
          + 기본 순서는 hosts -> 캐시 -> dns 서버 요청
          + 리눅스에서는 /etc/nsswitch.conf 파일의 변경으로 이 순서를 변경할 수 있음
     * dns 탐색
          + user -> RR(recusive resolver) -> root -> tld -> authoritative dns server 순서로 확인
          + RR에서는 root, tld, authoritative dns에 대해 순차적으로 요청하는데 받은 응답을 참고하여 다음 요청을 보냄
          + 보통 캐시를 먼저 확인하여 효율성을 높임
     * root 서버
          + .com, .kr 등의 도메인을 보고 적절한 TLD 서버 목록을 반환하는 역할
          + 전세계에 13개 서버군이 있음 (a-m)
               o ex. a.root-servers.net
          + dns 512byte 패킷 제한으로 현재 13개에서 더 이상의 추가는 불가능하다고 함
     * TLD 서버 (top-level dns)
          + 도메인 정보를 소유한 authoritative dns 서버 목록을 반환하는 역할
          + gTLD, ccTLD에 대한 설명
          + 좋은 국가 코드를 받은 나라는 의외로 수익원이 되기도 함 (.ai, .io)
     * 인증받은 dns 서버 (authoritative dns)
          + 도메인에 설정된 ip를 반환하는 역할
          + cloudflare, godaddy처럼 도메인의 등록과 관리 주체를 인증받은 서버
          + 빅테크에서는 따로 인증받아서 사용하기도 함 (aws, google..)
"
"https://news.hada.io/topic?id=17794","Docker Multi-Stage Build로 컨테이너 이미지 크기 줄이기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Docker Multi-Stage Build로 컨테이너 이미지 크기 줄이기

     * Docker 컨테이너 이미지를 빌드할 때, Dockerfile이 Multi-Stage 구조가 아니라면 불필요한 파일이 포함될 가능성이 큼
     * 이는 이미지 크기 증가 및 보안 취약성 증가로 이어짐
     * 컨테이너 이미지에서 발생할 수 있는 “불필요한 파일”의 주요 원인을 분석하고, Multi-Stage Build를 통해 이를 해결하는 방법을 설명

이미지 크기가 커지는 원인

     * 애플리케이션은 빌드 타임과 런타임의 의존성을 가짐.
     * 빌드 타임 의존성은 런타임보다 많고 보안 취약점(CVEs)이 더 많음.
     * 같은 이미지를 빌드와 실행에 사용하면, 불필요한 빌드 타임 의존성(컴파일러, 린터 등)이 포함됨.
     * 빌드와 런타임 이미지는 분리되어야 하지만, 이를 간과하는 경우가 많음.

잘못된 Dockerfile 구조 예시

  Go 애플리케이션용의 잘못된 예

FROM golang:1.23
WORKDIR /app
COPY . .
RUN go build -o binary
CMD [""/app/binary""]

     * golang:1.23 이미지는 컴파일용이지만, 이를 그대로 프로덕션 환경에 사용하면 전체 Go 컴파일러와 의존성까지 포함됨.
     * 이미지 크기: 800MB 이상, 800개 이상의 보안 취약점 존재.

  Node.js 애플리케이션의 잘못된 예

FROM node:lts-slim
WORKDIR /app
COPY . .
RUN npm ci
RUN npm run build
ENV NODE_ENV=production
EXPOSE 3000
CMD [""node"", ""/app/.output/index.mjs""]

     * node_modules 폴더가 런타임에 필요 없는 개발 의존성까지 포함하게 됨.
     * npm ci --omit=dev로 수정할 수 없으며, 빌드 과정에서 필요한 개발 의존성이 제거될 수 있음.

Multi-Stage Build 이전의 Lean 이미지 제작 방법

Builder 패턴

    1. Dockerfile.build에서 애플리케이션을 빌드함:

FROM node:lts-slim
WORKDIR /app
COPY . .
RUN npm ci
RUN npm run build

    2. 빌드된 아티팩트를 호스트로 복사:

docker cp $(docker create build:v1):/app/.output .

    3. Dockerfile.run에서 런타임 이미지를 생성:

FROM node:lts-slim
WORKDIR /app
COPY .output .
CMD [""node"", ""/app/.output/index.mjs""]

•       문제점: 여러 Dockerfile 작성, 빌드 순서 관리 필요, 추가 스크립트 요구.

Multi-Stage Build의 이해

     * Multi-Stage Build는 Docker 내부에 Builder 패턴을 구현한 기능임.
          + 여러 FROM 명령을 사용하여 하나의 Dockerfile에서 빌드와 런타임 스테이지를 정의 가능.
          + COPY --from=<stage> 명령을 사용해 이전 스테이지에서 빌드한 파일을 가져옴.

  Multi-Stage Dockerfile 예시 (Node.js)

# Build stage
FROM node:lts-slim AS build
WORKDIR /app
COPY . .
RUN npm ci
RUN npm run build

# Runtime stage
FROM node:lts-slim AS runtime
WORKDIR /app
COPY --from=build /app/.output .
ENV NODE_ENV=production
CMD [""node"", ""/app/.output/index.mjs""]

     * COPY --from=build로 빌드된 아티팩트를 직접 복사함으로써, 호스트를 거치지 않고 파일을 이동 가능.

Multi-Stage Build 실전 예시

   React 애플리케이션
# Build stage
FROM node:lts-slim AS build
WORKDIR /app
COPY . .
RUN npm ci
RUN npm run build

# Runtime stage
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
ENTRYPOINT [""nginx"", ""-g"", ""daemon off;""]

     * React 애플리케이션은 빌드 후 정적 파일이 되며, Nginx로 서빙 가능.

   Go 애플리케이션
# Build stage
FROM golang:1.23 AS build
WORKDIR /app
COPY . .
RUN go build -o binary

# Runtime stage
FROM gcr.io/distroless/static-debian12:nonroot
COPY --from=build /app/binary /app/binary
ENTRYPOINT [""/app/binary""]

     * distroless 이미지를 사용해 최소화된 런타임 환경 제공.

   Java 애플리케이션
# Build stage
FROM eclipse-temurin:21-jdk-jammy AS build
WORKDIR /build
COPY . .
RUN ./mvnw package -DskipTests

# Runtime stage
FROM eclipse-temurin:21-jre-jammy
COPY --from=build /build/target/app.jar /app.jar
CMD [""java"", ""-jar"", ""/app.jar""]

     * 빌드에는 JDK를 사용하고, 런타임에는 더 가벼운 JRE 사용.

결론

     * Multi-Stage Build는 빌드와 런타임 환경을 분리하여 불필요한 개발 의존성으로 인한 이미지 크기 증가를 방지함
     * 이를 통해 이미지 크기를 줄이고, 보안을 강화하며, 빌드 프로세스를 간소화할 수 있음
     * Multi-Stage Build는 효율적인 컨테이너 이미지를 만들기 위한 표준적인 방법이며, 고급 기능(예: 분기 조건, 빌드 중 유닛 테스트)도 지원함

   자바의 경우 jlink가 9버전부터 도입됐지만 의존 모듈을 jdeps 로 찾아서 명시해줘야 하는 등 사용성이 안좋습니다. 사람들이 저런 방법을 모르거나 JRE를 찾는 걸 보면 자바 도구의 홍보가 부족한 것 같고, 명령어 하나로 JRE가 나오게 개선이 필요해 보입니다

   저렇게 쓰고 있긴한데, 빌드 시간이 오래 걸리는건 단점 같아요

   빌드시간은 차이가 없어야할거에요. 차이가 있다면 잘못 설정한것!

   아, 그렇군요!

   전략에 따라서 한 스테이지를 통으로 캐시할 수도 있어서 전 오히려 빌드 시간이 단축되더라고요!

   Docker에 대해 좀 더 알아봐야하겠네요!
"
"https://news.hada.io/topic?id=17863","Show HN : Tips.io - AI, 페이지 관리 및 테마 기능을 갖춘 Tailwind 플레이그라운드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show HN : Tips.io - AI, 페이지 관리 및 테마 기능을 갖춘 Tailwind 플레이그라운드

     * Tailwind playground의 유연성과 페이지 관리 기능을 결합 하여, 간단하고 무료로 웹사이트를 만들 수 있는 플랫폼
     * 강력한 테마 및 재사용성 기능을 통해 랜딩 페이지, 마이크로사이트, 마케팅 사이트 등을 쉽게 제작 가능

핵심 아이디어

     * HTML이 곧 CMS임
          + 필드나 제한 없이, HTML 요소 위에서 마우스를 올리고 클릭하여 즉각적으로 수정 가능. 특정 요소에 클릭하면 특별한 편집 기능이 자동으로 제공됨:
               o <img>: 업로더, 스톡 사진 선택기 또는 HTML 수정 지원.
               o <video>: 업로더, 스톡 비디오 선택기 또는 HTML 수정 지원.
               o <svg>: 아이콘 선택기 또는 HTML 수정 지원.
               o <div class=""prose"">: WYSIWYG 편집기 또는 HTML 수정 지원.
     * Slices
          + Slice는 페이지의 개별 HTML 섹션 또는 단일 파일로 이루어진 컴포넌트. 독립적이고 자체 포함되어 있어 드래그하여 쉽게 재배치 가능.
          + 재사용성과 페이지 간 연결성을 제공하며, 예를 들어 HTML 푸터를 하나만 업데이트해도 전체적으로 적용 가능.
     * 페이지가 아닌 Element 단위의 AI
          + HTML Slice 내의 개별 요소를 선택하여 수정 가능. 전체 컴포넌트를 다시 렌더링하거나 재구성할 필요 없음.
          + 현재 5가지 AI 모델 지원. 향후 더 강력하고 진보된 AI 통합 기능 추가 예정.
     * 모든 것이 Tailwind, 빌드 과정 없음, 테마까지
          + 커스텀 Themer 도구 제공
               o Tailwind 구성 파일을 거의 즉각적으로 생성 가능. 실시간으로 폰트, 색상 팔레트 및 사전 설정을 테스트 가능.
          + 자동화된 Tailwind 적용
               o 클라이언트와 서버에서 자동으로 Tailwind 동작. 서버 측에서 빌드 과정이 숨겨져 있어 사용자 경험에 영향을 미치지 않음.
          + Tailwind와 AI의 조합
               o Tailwind의 유연성과 AI의 기능이 결합하여 더욱 강력한 사용자 경험 제공.
     * 기타 기능
          + 애니메이션
          + 페이지 트리 확대/축소
          + 기본 폼 (정적 사이트에서도 가능)
          + 분석 도구
          + 리디렉션, 사이트 비밀번호 설정 등
     * 기술 스택
          + Cloudflare Workers + Svelte + UnoCSS

        Hacker News 의견

     * 이 프로젝트가 사이드 프로젝트라는 점에서 매우 인상적임
          + 웹사이트 빌더로서 다른 빌더들과 유사하지만 낮은 진입 장벽과 AI 통합이 장점임
          + 마케팅 페이지를 차별화하면 더 나은 디자인 도구로 인식될 수 있음
          + 복잡한 디자인 인터페이스가 부담스러울 수 있으며, 다른 도구들과의 차별점이 필요함
     * Tailwind를 선호하지 않는 개발자도 있음
          + Tailwind의 복잡한 문법을 싫어하며, 소규모 팀이 유지하는 프로젝트를 선호함
     * 기업 고객으로서의 신뢰성에 대한 의문
          + 제품의 장기적인 안정성과 전환 과정에 대한 명확한 설명이 필요함
          + 기업 고객을 위한 일관성과 책임 관리가 중요함
     * 프로젝트의 완성도가 높음
          + 프로젝트의 구축 과정에 대한 설명이 있으면 좋겠음
     * 이름에 대한 혼란
          + 'tips.io'라는 이름의 의미가 불분명함
     * 시작 과정에서의 문제점
          + 서브도메인 선택 시 오류 메시지가 필요함
          + AI 기능이 아직 사용 불가함
          + 프리미엄 테마 사용 시 제한 시간이 있음
     * 인터페이스의 직관성 부족
          + 계정 생성 시 새 탭이 열림
          + 이메일 요청이 혼란스러움
          + Stripe 옵션 선택 시 이해하기 어려움
          + 인터페이스가 복잡하고 직관적이지 않음
     * 무료 계정의 제한 사항
          + 페이지 저장 시 공간 부족 메시지가 나타남
          + 테마에 포함된 '슬라이스'가 페이지 제한에 포함되는지 의문임
     * Firefox 지원 부족에 대한 궁금증
     * 이메일 없이 한 번의 클릭으로 체험할 수 있는 점이 좋음
          + AI 기능의 효과가 불분명함
          + 메뉴 요소에 대한 프롬프트가 기대한 결과를 제공하지 않음
"
"https://news.hada.io/topic?id=17739","SQLite는 싱글 커넥션 DB가 아님","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         SQLite는 싱글 커넥션 DB가 아님

     * SQLite에 대해 사람들이 자주 오해하는 점 중 하나는 “SQLite는 단일 연결만 허용하는 데이터베이스” 라고 생각해서 사람들이 사용하지 않게 되는 것
     * 이는 혼란스럽기도 하고(여기서 ""연결""의 의미?), 여러 측면에서 틀린 주장임
     * 읽기 작업 (Read Operations)
          + SQLite는 여러 개의 동시 읽기 작업을 완벽하게 지원함
          + 여러 “연결”에서 동시에 데이터를 읽을 수 있으며, 이 과정에서 충돌이나 문제가 발생하지 않음
     * 쓰기 작업 (Write Operations)
          + SQLite는 쓰기 작업 시 DB 레벨의 쓰기 잠금 (Write Lock) 을 사용함
          + 동시에 여러 개의 쓰기 작업을 허용하지 않음, 따라서 한 번에 한 개의 “연결”만 쓰기 작업을 수행할 수 있음
          + 일반적으로 이것이 문제로 작용하지 않는 이유는 IMMEDIATE TRANSACTION을 시작할 수 있기 때문임
          + 이 경우 SQLite는 쓰기 잠금을 획득하기 위해 큐에서 재시도를 할 수 있음
               o (이 방식은 쓰기 잠금이 해제될 때 자동으로 쓰기 작업이 수행될 수 있게 함)

   https://www.sqlite.org/lockingv3.html

   5.0 데이터베이스 파일에 쓰기
   데이터베이스에 쓰려면 먼저 위에서 설명한 대로 프로세스가 SHARED 락을 획득해야 합니다. SHARED 락을 획득한 후에는 RESERVED 락을 획득해야 합니다. RESERVED 락은 프로세스가 미래의 어느 시점에 데이터베이스에 쓰겠다는 신호를 보냅니다. 한 번에 한 프로세스만 RESERVED 락을 보유할 수 있습니다. 그러나 다른 프로세스는 RESERVED 락이 유지되는 동안 데이터베이스를 계속 읽을 수 있습니다.
"
"https://news.hada.io/topic?id=17866","아키텍처 현대화 실행: 언제부터 추정일이 마감일이 되었는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   아키텍처 현대화 실행: 언제부터 추정일이 마감일이 되었는가?

     * 복잡한 소프트웨어 현대화 프로젝트에서의 팁: 추정치를 마감일이 아닌 지침으로 취급해야 함.
     * 개인적인 경험:
          + 서울과 속초에서의 즐거운 휴가 후, 시스템 사고와 ""Zen and the Art of Motorcycle Maintenance""라는 책에 대해 쓰려 했으나, 최근 2주간의 사건들로 인해 계획이 변경됨.
          + 미국 선거 전 주말에 사고를 당했으며, 회사인 New York Times에서의 기술자 파업 경험이 있었음.
     * 추정치 - 예술인가 과학인가?:
          + 자동차 수리 과정에서 보험 조정자와 수리점 간의 추정치 차이와 협상 과정을 설명함.
          + 예상치 못한 손상이 발견될 경우 추가 비용이 발생할 수 있으며, 보험사의 승인이 필요함.
     * 복잡한 소프트웨어 아키텍처 현대화와의 유사성:
          + 레거시 소프트웨어 현대화 과정에서 초기 추정치와 실제 복잡성 간의 차이를 설명함.
          + 추가적인 복잡성이 발견될 때마다 추가 승인이 필요함.
     * 좋은 리더는 올바른 질문을 함:
          + 복잡한 문제를 해결하기 위해 올바른 질문을 던지는 것이 중요함.
          + 예상치 못한 복잡성을 발견했을 때의 대응 방법에 대해 논의함.
     * 진행할 것인가, 아니면 총 손실로 간주할 것인가?:
          + 현대화 프로젝트에서 추가 비용이 승인되어 작업이 계속되는 경우와 프로젝트가 중단되는 경우를 설명함.
     * 복잡한 맥락인가, 복잡한 맥락인가?:
          + Cynefin 프레임워크를 사용하여 복잡한 상황에서의 의사결정 과정을 설명함.
          + 복잡한 레거시 소프트웨어 프로젝트에서의 학습과 실험의 중요성을 강조함.
     * 부정 - 분노 - 협상 - 우울 - 수용?:
          + 현대화 프로젝트에서의 예상치 못한 상황에 대한 대응 방법을 설명함.
          + 조직 문화가 이러한 상황에 어떻게 대응하는지에 대한 Ron Westrum의 모델을 소개함.
     * 현대화 이니셔티브를 이끄는 리더를 위한 팁:
          + 복잡한 도메인에서는 실험적 관리 방식이 필요하며, 실패를 수용하는 것이 중요함.
          + 리더가 질서를 강요하려고 하면 실패할 것이며, 패턴이 나타나도록 허용하는 것이 성공의 열쇠임.
     * 새로운 희망:
          + 자동차 수리와 보험 처리 과정에서의 경험을 통해 현대화 프로젝트에서의 추정치의 중요성을 강조함.
          + 소프트웨어 회사와 리더십이 성공을 측정하는 올바른 프레임워크를 사용하기를 바람.

        Hacker News 의견

     * 관리자가 추정치를 마감일로 취급하는 경우가 있었음. 사양이 자주 변경될 때마다 ""헤드라이트를 받은 사슴"" 반응을 사용하여 시간을 벌고, 추정치를 최대한 보수적으로 제공하여 일정을 앞당겨 완료하는 전략을 사용했음. 좋은 관리자는 이런 전략이 필요 없었음.
     * 현대화 프로젝트는 소프트 마감일을 가지며, 예산 압박과 사용자 요구가 있지만, 하루 늦어도 큰 문제가 되지 않음. 반면, 우주 탐사선 발사나 Ford와 같은 대기업의 경우, 마감일을 놓치면 큰 손해를 입을 수 있음.
     * 미켈란젤로는 교황 율리우스 2세의 무덤을 5년 내에 완성할 것이라고 추정했지만, 실제로는 40년이 걸렸음. 이는 고객의 요구 변경, 공급망 문제, 계약 재협상 등의 이유로 프로젝트 규모가 축소되었기 때문임.
     * 초기 추정치는 기억에 남으며, 새로운 정보를 제공해도 초기 추정치를 바꾸기 어려운 경우가 많음. 이로 인해 추정치를 제공하는 것을 꺼리는 사람들이 있음.
     * 보험 회사가 원래 추정치만 지불하려고 하는 경우가 종종 발생함. 이는 자동차, 주택, 건강 보험 모두에 해당하며, 항상 합리적인 결과로 이어지지는 않음.
     * 고정 범위에 대한 추정치를 제공하고, 발견된 추가 작업에 대해 새로운 마일스톤을 추가하는 것이 중요함. 그러나 이러한 접근 방식을 이해하는 관리 계층이 필요함.
     * 리더십은 마감일이 동기부여가 된다고 생각하지만, 이는 잘못된 접근 방식임. 마감일을 현실적으로 조정하지 않으면 팀의 사기가 떨어질 수 있음.
     * ""No Estimates"" 접근 방식을 지지하며, 정확한 추정치는 과거와 동일한 작업이거나, 남은 작업이 명확히 정의된 경우에만 가능함.
     * 재미있는 추정 공식이 있으며, 이는 개인 경험에 기반한 비공식적인 공식임. 예를 들어, 프로젝트에 참여하는 사람 수, 새로운 도구 수 등을 고려하여 실제 소요 시간을 계산함.
     * 가장 좋은 추정 시스템은 완료 날짜를 내기고, 가장 가까운 사람이 점심을 얻는 방식임. 이는 친구들 사이에서 이루어졌으며, 매우 정확한 결과를 가져왔음.
     * 기업은 미래를 정확히 예측하고 싶어하지만, 이는 불가능함. 추정치는 주로 관리 계층에서 강조되며, 정확한 추정치를 제공하는 사람에게 보상이 주어지지 않음. 시간에만 집중하면 다른 중요한 요소들이 부정적인 영향을 받을 수 있음.
"
"https://news.hada.io/topic?id=17806","SICP: 두 번 읽을 가치가 있는 유일한 컴퓨터 과학 서적? (2010)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               SICP: 두 번 읽을 가치가 있는 유일한 컴퓨터 과학 서적? (2010)

     * 책 소개
          + 학생에게 여름 동안 읽을 책으로 빌려준 책이 있음
          + 이 책은 컴퓨터 과학에서 가장 중요한 작품 중 하나로, 개인의 경력과 연구에 큰 영향을 미쳤음
          + 책 제목은 Hal Abelson과 Jerry Sussman의 Structure and Interpretation of Computer Programs (SICP)임
     * 책의 중요성
          + 이 책은 컴퓨터 과학을 처음 접할 때 큰 영향을 줌
          + 프로그래밍의 기본 요소를 소개하고 다양한 주제를 탐구함
          + 주제에는 람다 추상화, 고차원 계산, 복잡한 데이터 구조, 모듈성, 스트림, 게으른 평가, 인터프리터 및 컴파일러 구성, 저장 관리 등이 포함됨
     * 언어 설계 접근
          + Hal과 Jerry는 모든 것을 언어 설계의 연습으로 봄
          + 복잡한 시스템을 계층화된 설계로 구조화하는 개념을 소개함
          + 각 계층은 해당 계층에서 원시적으로 간주되는 부분을 결합하여 구성됨
     * 컴퓨터 과학의 본질
          + 컴퓨터 혁명은 사고 방식과 표현 방식의 혁명임
          + 절차적 인식론이라는 개념을 소개하며, 이는 명령적 관점에서 지식 구조를 연구하는 것임
          + 컴퓨터 과학은 ""어떻게""에 대한 프레임워크를 제공함
     * 책의 지속적인 관련성
          + 1988년에 구입한 이 책은 여전히 관련성이 있음
          + 컴퓨터 과학에서 시간이 지나도 가치 있는 몇 안 되는 책 중 하나임
          + Feynman의 _Lectures on Physics_와 유사하게, 컴퓨터 과학의 본질을 잘 담고 있음
     * 업데이트
          + 2024년 1월 27일에 업데이트됨
          + 이 책은 주석이 달린 Lisp 참고 문헌에도 포함됨

        Hacker News 의견

     * Abelson과 Sussman의 1986년 강의 영상에서 책의 내용을 배울 수 있음. 이들의 추상화 계층화 설명은 개인적으로나 멘토로서 유용함
     * SICP와 같은 고전적인 텍스트는 프로그램 설계에 대해 이야기하지만, 요즘에는 시스템 설계가 더 중요하다고 생각함. 분산 시스템은 컴퓨터 과학의 일부인지 모르겠지만, 해결해야 할 더 일반적인 문제임. 시스템을 가능한 한 간단하게 작성하고 관찰 도구를 사용하여 설계의 결함을 파악한 후, 데이터 구조나 다른 컴퓨터 과학적인 방법을 사용하여 문제를 해결함. 대부분의 경우, 빅 오 표기법과 런타임 복잡성은 중요하지 않으며 배열과 빠른 CPU로 대부분의 문제를 해결할 수 있음. 런타임 문제가 있을 때는 프로그램을 프로파일링하여 핫스팟을 찾아야 함. 컴퓨터 과학은 CPU의 메모리 캐싱 작동 방식을 가르치지 않음. 멋진 그래프 알고리즘이 좋은 런타임 복잡성을 가질 수 있지만, CPU 캐시를 완전히 망칠 수 있으며 배열을 사용하여 더 빠르게 처리할 수
       있었을 것임. 더 일반적인 문제는 내결함성, 분산 잠금 및 큐의 정확성, 시스템 확장성임. 컴퓨터/전기 공학 배경이 있어서 편향된 것일 수도 있음
     * 무료 사본에 대한 링크가 깨져 있음. 2001년경에는 HTML 버전만 무료로 제공되었고, 누군가가 이를 TeXinfo로 변환함. 오늘날 SICP를 공부하고 싶다면 MIT Scheme이나 DrRacket에서 코드를 실행할 수 있음
     * ""The Elements of Programming Style""은 세 번 읽을 가치가 있으며, 그 이상 읽고 많은 이점을 얻었음. 2010년 리뷰를 참고할 수 있음
     * SICP를 좋아하고 싶었지만 Lisp가 어렵게 느껴짐. Haskell과 Standard ML은 좋아함. 다른 사람들도 비슷한 경험을 했는지 궁금함. SICP와 비슷한 정신을 가진 책을 다른 언어로 읽는 것이 흥미로울 수 있음. JavaScript로 SICP를 하고 싶지는 않음
     * ""Software Design for Flexibility: How to Avoid Programming Yourself into a Corner""에 대한 의견이 궁금함
     * SICP는 다양한 프로그래밍 모델이 있음을 이해하는 데 도움을 주었음. 이 책은 언어, 라이브러리, 프레임워크의 문서를 읽고 방향을 잡는 데 도움을 줌
     * 25년간 프로그래밍을 해왔고, 10년 정도 책을 소유했음. 최근에 Dr. Racket으로 시작했음. Dr. Racket의 장점은 변수 위에 마우스를 올리면 코드의 다른 위치와의 연결을 시각적으로 볼 수 있는 점임. 하지만 VS Code가 아니라는 점이 약간 불만이었음. 그래서 VS Code(실제로는 Cursor)를 사용하여 연습 문제를 해결할 수 있는 환경을 구성했음. LLM 통합이 멋지며, 코드와 작성한 내러티브를 제공하고 피드백을 요청할 수 있음. 연습 문제를 조금 진행했지만, 코드를 변환하고 작성한 응답과 LLM에서 받은 피드백을 정적 사이트로 만들었음. 시간을 보내는 재미있는 방법이었음. LLM의 도움 없이 SICP를 완전히 이해하지는 못하지만, LLM을 연습에 통합하는 방법을 보는 것이 흥미로움
     * 두 번째 읽기에서 각주와 참고 문헌을 탐구하게 되었고, 아름다운 세계가 있다는 것을 알게 되었음. Sussman과 팀이 천체의 속성을 계산하기 위해 맞춤형 프로그래머블 프로세서를 설계한 논문이 있음. 항상 놀라움
     * 원본 버전과 JavaScript 버전의 링크를 제공함
"
"https://news.hada.io/topic?id=17831"," Windows 95 설치 과정에서 세 가지 운영 체제가 사용된 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Windows 95 설치 과정에서 세 가지 운영 체제가 사용된 이유

     * Twitter에서 ""왜 Windows 95 설치 과정에서 MS-DOS, Windows 3.1, 그리고 Windows 95 세 가지 운영 체제를 사용하는가?""라는 질문을 받음
     * MS-DOS에서 바로 Windows 95로 갈 수 없었던 이유를 설명
     * Windows 95는 다음 세 가지 출발점에서 설치할 수 있었음:
          + MS-DOS에서 시작
          + Windows 3.1에서 시작
          + Windows 95에서 다시 설치 (손상된 시스템 복구 목적으로)
     * 각 출발점마다 별도의 설치 프로그램을 작성하는 방법도 있었지만, 이는 코드를 세 번 작성해야 하는 문제점이 발생

한 가지 설치 프로그램으로 통일하기

     * 설치 프로그램을 하나만 작성하여 모든 출발점에서 사용하기로 결정
     * 이를 위해 설치 프로그램이 어느 플랫폼에서도 작동해야 했음
     * 설치 프로그램의 종류
          + MS-DOS 앱: 모든 플랫폼에서 작동 가능하지만 텍스트 모드 설치 화면이라 사용자 경험이 부족함
          + 16비트 GUI 프로그램: 간이 Windows 3.1을 설치하여 GUI 환경을 제공하며 MS-DOS에서도 작동 가능
          + 32비트 GUI 프로그램: 더 나은 사용자 경험을 제공하지만, MS-DOS나 Windows 3.1에서는 실행할 수 없음
     * 타협점: 16비트 GUI 설치 프로그램
          + MS-DOS 설치 프로그램이 간이 Windows 3.1 버전을 설치한 후, 16비트 GUI 설치 프로그램을 실행하도록 설계됨.
          + 이 작은 Windows 3.1 버전은 최소한의 기능만 포함하여 설치 디스크 크기를 줄임.

세 가지 설치 프로그램의 연결 과정

    1. 첫 번째 설치 프로그램 (MS-DOS 앱)
          + MS-DOS에서 시작할 경우, 간이 Windows 3.1 버전을 설치하고 이를 부팅함.
    2. 두 번째 설치 프로그램 (16비트 Windows 앱)
          + 간이 Windows 3.1, Windows 3.1, 또는 Windows 95에서 실행 가능.
          + 사용자로부터 설치 옵션 정보를 수집하고, 하드웨어 감지를 수행함.
          + Windows 95 파일을 복사하고 기존 설정을 새로운 시스템으로 이전함.
    3. 세 번째 설치 프로그램 (32비트 Windows 앱)
          + Windows 95에서 실행되며, 프린터 설치와 같은 마지막 설정 작업을 수행함.

  설치 과정 요약

     * MS-DOS에서 시작:
          + 간이 Windows 3.1 설치 → 부팅 후 16비트 GUI 설치 프로그램 실행
     * Windows 3.1 또는 Windows 95에서 시작:
          + 16비트 GUI 설치 프로그램으로 정보 수집 및 하드웨어 감지 → Windows 95 파일 복사 및 설정 이전
     * Windows 95 부팅 후:
          + 32비트 설치 프로그램으로 최종 설정 작업

  결론

     * Windows 95 설치는 사실상 세 개의 설치 프로그램이 서로 연결된 구조였음
     * 이 방식 덕분에 설치 코드를 하나만 작성하면 되었고, 이를 통해 모든 설치 시나리오를 포괄할 수 있었음

   다른 건 몰라도 MS의 WIN32 호환성 유지나 이런 건 정말 본받을 만 하다고 생각합니다. 물론 Windows ME 같은 혼종도... 있긴 했지만요 ㅎㅎ

   오~ 재밌는사실이군요 ㅎㅎ

   아.. 친구집에 모여 윈도우95 부팅화면 보고 다들 소리를 질렀던 기억이..;;;

        Hacker News 의견

     * Windows 설치 과정에서 여전히 최소한의 Windows 버전을 사용하는지에 대한 의문이 제기됨. 과거에 virtio 드라이버 설치를 위해 DOS 명령어를 사용해야 했던 경험이 언급됨
     * Raymond Chen의 블로그와 책 ""The Old New Thing""이 매우 흥미롭다는 의견이 있음. Windows 95의 직관적인 GUI에 대한 존경심을 표현하며, Microsoft가 당시 매우 실용적이고 합리적이었다고 평가함
          + 현대 Windows가 과거에 비해 퇴보했다고 비판하며, 파일 시스템과 커널은 개선되었지만 상위 레이어는 인턴들이 개발한 것 같다는 의견을 제시함
     * Excel이 원래 OS 없이 독립적으로 실행될 수 있었고 Windows 2.1과 함께 제공되었다는 정보가 흥미롭다는 의견이 있음
     * Windows 95가 불안정하고 자주 충돌했다는 비판적인 의견이 제시됨. Windows 11이 더 나아졌으며 비교할 수 없다는 주장임
     * Raymond Chen이 30년 이상 Windows 발전에 기여했으며, Windows Dev Docs Twitter 계정에서 유용한 정보를 제공하지 않는 이야기를 가끔 전한다는 의견이 있음
     * Windows NT 3.51에서 16비트 애플리케이션 호환성 문제로 사용자들이 불만을 제기했으며, Microsoft가 애플리케이션 시장의 관성을 과소평가했다는 의견이 있음
     * Windows가 설치를 업그레이드할 수 있는 능력이 인상적이라는 의견이 있음. MS-DOS부터 포맷 없이 업그레이드가 가능한지에 대한 의문이 제기됨
     * Windows 10 설치 프로그램이 Windows 7과 유사한 환경을 먼저 실행한다는 의견이 있음
     * 과거에 Windows 95를 DOS 위에 설치하는 것이 더 나은 방법이라는 이야기가 있었다는 회상이 있음
"
