"https://news.hada.io/topic?id=15378","SSH Honeypot을 30일 동안 운영하면 보게 되는 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   SSH Honeypot을 30일 동안 운영하면 보게 되는 것

     * 허니팟: 공격자가 시스템에 침입하려 할 때 공격을 감지하고 기록하는 장치
          + SSH 허니팟: SSH를 대상으로 하는 허니팟
     * 30일간 SSH Honeypot을 운영한 결과
          + 30일간 총 11,599번의 로그인 시도가 있었으며, 하루 평균 386번의 로그인 시도가 있었음
          + 가장 많이 사용된 사용자명은 root, 345gs5662d34, admin, pi 등이었음. 그외 ubuntu, ubnt, support, user, oracle 등
               o 345gs5662d34는 Polycom CX600 IP 전화기의 기본 자격증명일 가능성이 있음.
          + 가장 많이 사용된 비밀번호는 345gs5662d34, 3245gs5662d34, admin, 123456, password 등이었음
     * 로그인 후 실행된 명령어들을 분석한 결과, 다음과 같은 의심스러운 활동들이 발견됨:
          + 가장 많이 실행된 명령어
               o echo -e “\x6F\x6B”: 6,775회
               o cd ~; chattr -ia .ssh; lockr -ia .ssh: 1,016회
               o uname -s -v -n -r -m: 320회
          + oinasf 스크립트 실행 후 uname -s -m 명령어로 시스템 정보 수집 시도
          + ./ip cloud print 명령어를 통해 MikroTik 라우터 공격 시도
          + mdrfckr 암호화폐 채굴기 설치 및 다른 채굴기 프로세스는 종료시킴
          + MIPS 아키텍처 악성코드 유포 시도(주로 라우터와 IoT 장치 대상)
          + Gafgyt (BASHLITE) 악성코드의 일부인 Sakura.sh 스크립트 실행
               o Gafgyt는 IoT 기기와 리눅스 시스템을 감염시키는 봇넷으로, DDoS 공격 등의 기능을 가지고 있음
               o 약한 비밀번호나 기본 비밀번호, 알려진 취약점을 이용해 장치를 장악하려 함
               o 2014년부터 존재하며, DDoS 공격을 실행할 수 있는 여러 변종으로 발전함

GN⁺의 의견

     * 허니팟을 통해 공격 패턴을 분석하고 방어 전략을 세우는 데 유용함.
     * 기본 사용자 이름과 비밀번호를 사용하는 것은 매우 위험함을 알 수 있음.
     * IoT 장치와 라우터는 특히 취약하므로 보안 설정을 강화해야 함.
     * 암호화 채굴기와 같은 멀웨어는 시스템 자원을 낭비하고 보안 위협을 초래함.
     * 새로운 보안 위협에 대비하기 위해 지속적인 모니터링과 업데이트가 필요함.

   345gs5662d34가 높길래 찾아 보니 특정 키보드에서 password라는 이야기( https://isc.sans.edu/diary/Common+usernames+submitted+to+honeypots/… )가 있는데, 확실히는 모르겠네요...

   약간 votmdnjem(패스워드) 같은 느낌일 수 있겠네요

        Hacker News 의견

     * 자체 호스팅 메일 서버와 방화벽 로그 분석: 비정상적인 트래픽을 차단하기 위해 스크립트를 설정하고, 인터넷 보안 회사의 스캐너 네트워크를 차단하여 불필요한 트래픽을 50% 이상 줄임.
     * 비밀번호 로그인 재활성화 후 보안 문제: 비밀번호 로그인을 잠시 활성화한 후 수천 건의 로그인 시도가 발생했으며, 대부분 중국에서 발생한 것으로 확인됨.
     * 스캐너 시각화: 스캐너의 위치와 ASN을 시각화하여 더 나은 이해를 제공함. 엄격한 검증 절차를 가진 VPS 제공자가 스캐너 활동을 줄이는 데 도움이 됨.
     * SSH 보안 설정: SSH 서버의 보안을 강화하기 위해 포트 변경, 비밀번호 인증 비활성화, 특정 사용자만 허용하는 설정을 추천함.
     * 공개 키 인증만 사용하는 SSH: 공개 키 인증만 사용한다면 fail2ban 같은 추가 보안 도구가 큰 도움이 되지 않으며, VPN 같은 추가 방어층을 추천함.
     * 중국 IP 차단: 대부분의 SSH 로그인 시도가 중국에서 발생하므로 중국 IP를 차단하고 필요 시 일시적으로 해제함.
     * 익명 FTP 서버 운영 경험: 2000년대 초반 익명 FTP 서버를 운영하며 최신 크랙 소프트웨어를 쉽게 얻었던 경험을 공유함.
     * 자체 서버 호스팅의 긍정적 측면: 인터넷에 노출된 모든 것은 누군가가 악용하려고 시도할 것이므로, 보안에 대한 이해를 높이는 것이 중요함.
     * 알 수 없는 명령어 'lockr': 'lockr' 명령어에 대한 참조를 찾을 수 없으며, 주로 악성 코드가 chattr 명령어와 함께 실행하는 것으로 관찰됨.
     * MikroTik 라우터와 공격자 활동: MikroTik 라우터의 클라우드 DNS 기능을 이용해 공격자가 라우터의 동적 DNS 항목을 확인하고, IP 주소 변경 시에도 접근할 수 있도록 함.
"
"https://news.hada.io/topic?id=15367","테슬라 FSD - 쓸모없는 기술 데모","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          테슬라 FSD - 쓸모없는 기술 데모

     * 테슬라는 최근 모든 현재 소유자에게 한 달간 무료로 완전 자율 주행(FSD) 시스템을 제공하고 있음.
     * 필자는 3년 이상 모델 Y를 소유하고 있으며, 주로 장거리 주행에서 오토파일럿을 사용해 만족스러운 경험을 했음.
     * 일론 머스크는 최근 재무 회의에서 로보택시에 더 집중하고 싶다고 언급했음.
     * 무료 체험 기회를 통해 FSD를 테스트해보기로 결정했음.

  사용 규칙

     * 3번의 짧은 테스트 동안 FSD를 주의 깊게 관찰했음.
     * FSD가 잘못된 결정을 내릴 때마다 즉시 개입했음.

  테스트 주행 1: Kings Beach에서 Truckee까지 (11마일)

     * 실수 1: 잘못된 출구 차선 선택
          + FSD가 가스 스테이션으로 가는 대신 한 블록 일찍 출구 차선으로 이동하려 했음.
     * 실수 2: 직진해야 할 때 우회전 차선 선택
          + FSD가 직진해야 할 교차로에서 우회전 차선으로 이동하려 했음.

  테스트 주행 2: I-80에서 Truckee에서 Blue Canyon까지 (36마일)

     * FSD가 차선을 변경하려는 결정은 이해할 수 있었으나, 오토파일럿보다 더 나쁜 성능을 보였음.
     * 두 번의 유사한 상황에서 FSD가 좌우로 흔들리는 현상이 발생했음.
     * 결국 FSD를 끄고 오토파일럿으로 전환했음.

  테스트 주행 3: West-Valley College에서 I-85 입구까지 (1마일)

     * FSD가 빨간불에서 정지 후 다시 출발하는 실수를 저질렀음.
     * 필자는 이 실수를 예상하고 브레이크를 밟을 준비를 하고 있었음.

  결론

     * 현재의 FSD는 신뢰할 수 없는 시스템임.
     * 기본적인 실수를 많이 저지르며, 사용자는 오히려 더 많은 주의를 기울여야 함.
     * 오토파일럿은 적응형 크루즈 컨트롤과 차선 유지 기능이 안정적으로 작동해 더 나은 선택임.

GN⁺의 의견

     * 기술의 미성숙: FSD는 아직 많은 개선이 필요하며, 현재 상태로는 실사용에 적합하지 않음.
     * 사용자 경험: FSD를 사용하면 오히려 더 많은 주의가 필요해 사용자의 피로도가 증가할 수 있음.
     * 비용 문제: FSD의 높은 비용(월 $99 또는 일회성 $12,000)은 현재 기능을 고려할 때 비합리적임.
     * 대안 기술: 현재 시장에는 Waymo, Cruise 등 다른 자율 주행 기술이 존재하며, 이들 또한 검토할 가치가 있음.
     * 기술 도입 고려사항: 자율 주행 기술을 도입할 때는 시스템의 안정성과 신뢰성을 최우선으로 고려해야 함.

        Hacker News 의견

     * FSD(Full Self-Driving)는 최적의 조건에서만 잘 작동하며, 좁은 도로나 복잡한 환경에서는 어려움이 많음.
     * FSD를 6주 동안 사용했는데, 여러 번 위험한 상황을 겪었음. 특히 빨간불을 무시하고 달리려는 경우가 있었음.
     * FSD에 대한 환불 소송이 없다는 점이 놀라움. 많은 사람들이 FSD를 위해 큰 돈을 지불했지만, 실제로는 약속된 기능을 받지 못했음.
     * FSD v12를 사용 중인데, 주 1회 정도 안전 개입이 필요함. 개인적으로는 삶의 질이 향상되었음.
     * Autopilot은 여전히 유령 브레이킹 문제가 있지만, 고속도로에서는 FSD보다 더 신뢰할 수 있음. FSD v12는 아직 안정성이 부족함.
     * FSD의 유용성을 평가하려면 실제 사용 빈도를 봐야 함. Tesla의 최신 보고서에 따르면, FSD 12 출시 이후 사용량이 크게 증가하지 않았음.
     * Tesla가 완전 자율주행 택시 모드를 발표할 것이라고 주장하지만, 실제로는 테스트 차량이 거의 없음.
     * Tesla의 자율주행 기술은 주가를 올리기 위한 수단일 가능성이 있음. 기술적으로 경쟁사보다 앞서 있다고 보기 어려움.
     * 자율주행차는 전체적으로 쓸모없는 기술 데모임. 자동차 산업이 멸종을 피하기 위한 방법으로 사용되고 있음.
     * Tesla의 FSD와 Waymo의 자율주행 택시를 비교하고 싶음. 자율주행이 아직 불가능한 과제인지, 아니면 단지 품질 차이인지 궁금함.
"
"https://news.hada.io/topic?id=15388","Syzygy - 저비용, 소형, 고성능 주변기기를 위한 개방형 표준","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Syzygy - 저비용, 소형, 고성능 주변기기를 위한 개방형 표준

     * 저비용, 소형, 고성능 커넥터 및 저비용 케이블 옵션
     * 핀 수가 적어 FPGA I/O를 경제적으로 사용 가능함
     * 무료 라이선스
     * 응용 가능 분야
          + 고성능 프로토타입 : 단일 목적의 상용 주변 장치를 사용한 빠른 프로토타이핑
          + 시스템 통합 및 테스트 : 작은 블록을 조합하여 복잡한 시스템을 빠르게 구축하고 비용 절감. 생산 기능 테스트를 위한 맞춤형 테스트 시스템 제작
          + 평가 시스템 : 고성능 반도체 평가 보드에 적합한 플랫폼
          + 일반적인 주변 기기 : 데이터 수집, 머신 비전, 디지털 통신, 소프트웨어 정의 라디오, 비디오 출력, 다채널 I/O, 센서, 로보틱스
     * Digilent PMOD(저속, Pin 적음) 와 VITA 57.1 FMC (고속, Pin 많음) 주변 장치 사이의 갭을 메우는 인터페이스 규격
"
"https://news.hada.io/topic?id=15363","Microsoft, 보안 우려로 Recall AI 기능 출시 연기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Microsoft, 보안 우려로 Recall AI 기능 출시 연기

     * Microsoft는 6월 18일에 Copilot+ PC 사용자를 위해 광범위하게 제공될 예정이었던 Recall 기능을 Windows Insider Program(WIP)에서 먼저 미리보기로 제공할 예정임
     * 이는 모든 고객에게 신뢰할 수 있고 안전하며 강력한 경험을 제공하고, 모든 Copilot+ PC 사용자에게 기능을 제공하기 전에 추가 피드백을 구하기 위한 Microsoft의 약속에 기반을 둔 결정임
     * Copilot+ PC는 5월에 공개된 인공지능(AI) 기능을 갖춘 개인용 컴퓨터 범주임
     * WIP는 수백만 명의 ""Windows 팬""이 운영 체제의 향후 기능을 미리 볼 수 있는 공개 소프트웨어 테스트 프로그램임
     * Microsoft는 WIP 커뮤니티의 피드백을 받은 후 곧 모든 Copilot+ PC에서 Recall 미리보기를 제공할 계획임

Recall 기능 개요

     * Recall 기능은 웹 검색부터 음성 채팅에 이르기까지 컴퓨터 사용 내역을 추적하여 사용자가 몇 달 후에도 기억해야 할 것이 있을 때 검색할 수 있는 기록을 컴퓨터에 저장함

프라이버시 우려

     * 이 기능의 발표 직후 프라이버시 우려가 제기되었음
          + 일부 소셜 미디어 사용자들은 이 기능이 스파이 행위를 가능하게 할 수 있다는 우려를 표명함
          + 억만장자 기술자 Elon Musk는 첨단 기술의 해로운 영향을 탐구하는 Netflix 시리즈에 비유하며 이를 ""Black Mirror 에피소드""라고 칭함

        Hacker News 의견

     * 혼란과 모호함: 보안 문제를 명확히 언급하지 않고, 마케팅 접근 방식을 새로 찾으려는 것 같음.
     * 제목의 혼란: 제출된 제목이 혼란스러움. 업데이트가 명확하지 않음.
     * 마케팅 실수: 마이크로소프트가 기능을 올바르게 마케팅하고 포장하는 데 실패함.
     * 과거의 실수 반복: 윈도우 8의 사례처럼, 사용자가 선택할 수 없게 강제 통합한 것이 문제임.
     * 보안 문제: 미국 정부가 최근 보안 문제로 마이크로소프트와의 관계를 재평가 중임.
     * 보안 약속: 마이크로소프트가 보안 관행을 개선하겠다고 약속했지만, 의회는 이를 진지하게 받아들이지 않음.
     * 회사 내부의 갈등: 마이크로소프트 내부에서 빠르게 움직이려는 쪽과 중요한 소프트웨어 회사로서 신중해야 한다는 쪽의 갈등이 있음.
     * 기업 고객의 중요성: 기업 고객이 이 기능을 비즈니스 리스크로 간주함.
     * AI와 프라이버시: AI 열풍이 비기술적인 사람들도 프라이버시와 보안 문제에 대해 생각하게 만듦.
     * AI 기능의 한계: AI 중심의 기능들이 과대평가되었고, 한계에 도달함.
     * 기능 비활성화 계획: 이 기능이 배포되면 즉시 비활성화할 계획임. 불필요한 배경 작업으로 인해 성능 저하와 배터리 소모가 우려됨.
     * 기능 설명: Recall 기능은 로컬 AI 모델을 사용하여 사용자의 활동을 스크린샷으로 저장하고 검색할 수 있게 함. 모든 데이터는 로컬에 저장됨.
"
"https://news.hada.io/topic?id=15326","만들면 안되는 AI UX 3가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           만들면 안되는 AI UX 3가지

     * 보험약관 유형 : 비용정보를 명확히 표기하지 않음
     * 나만 믿어 유형 : 유저를 배제하고 AI 혼자 모든 일을 처리함
     * TMI 유형 : 너무 다양한 기능/정보를 한 번에 제공해서 혼란스럽게 함
"
"https://news.hada.io/topic?id=15431","shpool - 쉘 세션 연결을 유지해주는 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       shpool - 쉘 세션 연결을 유지해주는 도구

     * 연결이 끊어져도 세션이 손실되지 않도록 네임드 셸 세션을 생성
     * tmux나 GNU screen의 가벼운 대안
          + tmux와 screen은 전체 터미널을 장악하고 창 분할 및 타일링 기능을 제공하는 반면, shpool은 영구 세션만 제공
          + 이 접근 방식의 가장 큰 장점은 shpool이 기본 스크롤백이나 복사-붙여넣기를 중단하지 않는다는 것
     * 사용법
          + 원격 호스트에 shpool 설치. 클라이언트에는 별도 소프트웨어 필요없음
          + ssh로 접속한 다음 shpool attach main을 실행하여 이름이 지정된 새 세션을 생성(main이 세션 이름)
          + 각 터미널마다 별도의 네임드 세션 필요
          + 연결이 끊어지거나 멈춘 경우 원격 호스트에 다시 ssh로 접속한 후 shpool attach main을 다시 실행하여 동일한 네임드 세션에 다시 연결 가능

   원격에 굳이 tmux 를 설치하지 않고 세션을 유지할 수 있겠군요. 그치만 그냥 tmux 가 익숙한데..

   UDP를 사용하는 Mosh를 사용하는것도 좋은것 같습니다.

   https://news.hada.io/topic?id=4810

   설명에선 tmux 를 계속 얘기하지만, 멀티 터미널을 지원하는 것은 아닙니다.
   그냥 세션 유지해주는 가벼운 도구라고 생각하고 보는게 맞습니다.
"
"https://news.hada.io/topic?id=15347","미국-사우디 페트로달러 협정 50년 만에 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미국-사우디 페트로달러 협정 50년 만에 종료

        Hacker News 의견

     * 첫 번째 의견: 이번 합의 만료는 큰 영향을 미치지 않을 것임. 러시아의 자산 동결이 서방 금융 시스템에 대한 신뢰를 훼손한 것이 더 큰 영향이었음. 중국과 인도 같은 신흥 강국들은 여전히 달러에 많은 자산을 보유하고 있어 급격한 변화는 어려움.
     * 두 번째 의견: 금융 인플루언서와 온라인 포럼에서 이 뉴스가 화제가 되었지만, 실제로는 아무 변화가 없었음. 유가, 달러, 시장 모두 안정적임. 이 사건이 ""헛소동""에 불과한 것인지 궁금함.
     * 세 번째 의견: 나스닥이 신뢰할 만한 정보원인데 이번 기사에는 몇 가지 실수와 누락이 있음. 사우디아라비아는 이미 다른 통화로 석유를 거래하고 있었음. 이번 합의 만료가 달러의 하락을 가속화하지 않았음.
     * 네 번째 의견: 이러한 지정학적 변화는 몇 주가 아닌 몇 년 또는 몇 십 년에 걸쳐 일어날 것임. BRICS 국가들과 서방 간의 에너지 및 경제적 이해관계가 장기적인 전환에 중요한 역할을 할 것임.
     * 다섯 번째 의견: 제목은 ""사우디아라비아와 미국 간의 50년 된 페트로달러 협정 만료""로 해야 함. 사우디아라비아가 단기간에 달러를 버릴 것 같지는 않음.
     * 여섯 번째 의견: 미국이 이제 가장 큰 석유 생산국이기 때문에 이번 합의는 덜 중요함. 미국은 자국 내 석유를 더 많이 사용하고 있음.
     * 일곱 번째 의견: 달러로 가격이 책정된다고 해서 반드시 달러로 거래되는 것은 아님. 석유는 다양한 통화로 거래되고 있음. 이번 합의 만료는 사우디가 미국 국채 대신 다른 자산으로 전환할 수 있는 옵션을 제공함.
     * 여덟 번째 의견: 이번 변화는 흥미로운 결과를 초래할 것임. 달러는 이제 아무것도 뒷받침하지 않는 디지털 통화가 되었음.
     * 아홉 번째 의견: 방어 조약과 이스라엘과의 정상화, 팔레스타인 국가로의 길을 포함하는 또 다른 합의가 진행 중임. 그러나 사우디아라비아의 인권 문제와 인근 후티 반군으로 인해 갈등에 휘말릴 위험이 있음.
     * 열 번째 의견: 미국 달러가 예상보다 빠르게 위안화로 대체될 가능성이 있음. 중국은 금으로 뒷받침된 통화를 사용해 제재를 피하고 있음. 이 변화는 시간이 걸릴 것이며, 미국 정부 부채에 어떤 영향을 미칠지 흥미로울 것임.
"
"https://news.hada.io/topic?id=15342","Raspberry Pi가 런던 증권거래소에 상장되어 공개 기업이 됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Raspberry Pi가 런던 증권거래소에 상장되어 공개 기업이 됨

     * Raspberry Pi ""저렴한 단일 보드 컴퓨터 제조업체가 공개 회사가 되다""
          + 주가는 £2.80에 시작하여 £542 million(약 9400억원 ) 규모로 가치 평가됨
          + 이후 주가는 32% 상승하여 £3.70에 거래됨
          + IPO를 통해 $200 million 이상을 조달할 것으로 예상됨
     * 현재는 기관투자자만 거래 가능하고, 개인투자자는 금요일부터 거래 가능함
     * 런던 증시에서의 기술주 상장은 드문 편이라 런던 시장에도 긍정적인 소식임
     * Raspberry Pi는 저렴하고 에너지 효율적인 소형 컴퓨터로 유명함
          + ARM 기반 프로세서를 사용하며, 미디어 서버, 레트로 게임기, 대시보드, 로봇 등 다양한 용도로 사용됨
          + 최근에는 산업용 및 임베디드 시장에서도 많이 사용되고 있으며, 매출의 72%를 차지함
     * Raspberry Pi는 현재까지 6천만 대 이상 판매됨
          + 2023년에만 $266 million의 매출과 $66 million의 매출총이익을 기록함
     * Raspberry Pi Ltd.는 Raspberry Pi Foundation의 상업적 자회사임
          + 재단은 저렴하고 프로그래밍 가능한 컴퓨터를 통해 코딩 교육을 쉽게 하는 것이 목표임
          + 재단은 여전히 Raspberry Pi Ltd.의 최대 주주임
     * ARM과 Sony의 자회사인 Sony Semiconductor Solutions Corporation도 전략적 투자자로 참여함
          + ARM은 이번 상장을 통해 Raspberry Pi 지분을 늘릴 계획이라고 밝힘

   대단하네요.
"
"https://news.hada.io/topic?id=15334","인도 스타트업, 72시간 만에 3D 프린팅 로켓 엔진 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    인도 스타트업, 72시간 만에 3D 프린팅 로켓 엔진 제작

     * Agnikul이라는 인도 스타트업이 세계 최초로 로켓 엔진을 단일 부품으로 3D 프린팅하는데 성공함. 제작 시간은 72시간밖에 걸리지 않았음.
     * 이 엔진을 사용한 로켓이 5월 말 인도 동부 해안에서 발사되었음. Agnikul은 이 접근 방식이 소형 위성 운영자들을 위한 ""주문형"" 로켓 발사의 문을 열어줄 수 있기를 기대함.
     * Agnikul의 특별한 점은 엔진을 여러 부품으로 나누어 프린팅한 후 조립하는 것이 아니라, 한 번에 프린팅한다는 것임. 이는 제조 시간을 크게 단축시킴.
     * 5월 30일, 회사는 이 엔진으로 구동되는 첫 번째 준궤도 발사를 수행함. 단일 단계 로켓이 인도 우주 연구 기구의 우주 센터에서 발사되어 6.5km 고도에 도달한 후 바다에 착륙함.

     ""발사는 매우 성공적이었습니다. 우리가 구축한 기술에 대해 많은 자신감을 갖게 되었죠."" - 공동 창업자이자 최고운영책임자 Moin SPM
     * 회사의 첫 번째 상용 제품은 Agnibaan이라는 2단 로켓이 될 것임. 18m 높이에 8개의 엔진을 장착하고 300kg의 화물을 약 700km 고도까지 운반할 수 있음.
     * 5월 시험 발사에 사용된 발사체는 6m 높이에 단일 엔진만 장착되어 있어, Agnibaan의 2단계와 거의 동등한 수준이었음.
     * 이번 발사는 궤도 발사에 필요한 모든 핵심 하위 시스템을 테스트하기 위한 기술 시연 역할을 함. 비행 컴퓨터, 항공 전자 장비, 유도 및 항법 시스템은 물론 발사대 자체도 포함됨.
     * 팀은 6kN의 추력 목표를 달성했고, 바람의 영향을 고려하여 로켓 궤적을 조정하는 풍향 조정 기동을 성공적으로 수행할 수 있었음.
     * 기존 방식으로 로켓 엔진을 제작하는 데는 몇 달이 걸릴 수 있음. 반면 Agnikul은 독일 EOS사의 금속 3D 프린터를 사용하여 약 3일 만에 엔진을 생산함.
     * Agnikul은 니켈과 크롬의 고성능 합금인 Inconel로 엔진을 프린팅함. 이 재료는 높은 온도와 기계적 하중을 견딜 수 있음.
     * 로켓의 나머지 부분을 조립하고 엔진을 통합하는 데는 약 2주가 소요됨. 이는 소형 위성 운영자에게 저비용 ""주문형"" 발사 서비스를 제공할 수 있는 길을 열어줌.
     * 공동 창업자이자 CEO인 Srinath Ravichandran은 이제 가장 큰 도전은 Agnibaan 1단에 단일 엔진에서 7개 엔진 클러스터로 전환하는 것이라고 말함. 이는 이륙 시 엔진 간 추력 균형 조정부터 궤적 변경을 위해 엔진이 짐벌할 때 엔진 플룸 상호 작용 관리에 이르기까지 다양한 과제를 제기함.
     * 회사는 현재 엔진 클러스터의 지상 시험을 수행할 시설을 건설 중이며, 내년 이맘때쯤 첫 번째 궤도 발사를 목표로 하고 있음.

        Hacker News 의견

     * 3D 프린팅의 결함 감지 문제: 3D 프린팅에서 내부 결함을 예방하고 감지하는 것은 매우 어려운 문제로, 후속 검증이 필요하지 않다는 주장은 사실이 아님.
     * 로켓 엔진 제작 시간 단축: 전통적인 방법으로 로켓 엔진을 제작하는 데 몇 달이 걸리지만, 금속 3D 프린터를 사용하면 약 3일 만에 제작 가능함.
     * 3D 프린팅의 신뢰성 문제: 3D 프린팅이 검증과 테스트 없이 가능하다고 믿는 것은 위험하며, 왜 3D 프린팅을 선택했는지 의문임.
     * Relativity Space의 성공 사례: Relativity Space는 로켓 엔진뿐만 아니라 전체 로켓을 3D 프린팅으로 제작하여 첫 비행에 성공함.
     * 인도의 기술 발전: 인도의 기술 장면이 크게 성장하고 있으며, 이를 목격하는 것은 놀라운 일임.
     * 엔진 디자인의 단순함: 엔진 디자인이 매우 단순해 보이며, 터보 펌프가 없는 것이 흥미로움.
     * 품질 관리의 중요성: 3D 프린팅은 복잡한 형태를 만들 수 있지만, 제조 과정에서 항상 테스트가 필요함.
     * 인도의 혁신적인 성과: 현대 인도에서 일어나는 세계 최초의 성과 중 하나로 매우 멋짐.
     * 3D 프린팅의 가능성: 3D 프린팅으로 다양한 페이로드를 발사할 수 있는 가능성이 있음.
     * 개선의 필요성: 로켓이 9km 이하로 비행했으며, 계속해서 개선이 필요함.
"
"https://news.hada.io/topic?id=15395","NumPy 2.0.0 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            NumPy 2.0.0 릴리스

  새로운 기능

     * 새로운 가변 길이 문자열 dtype, StringDType와 문자열 작업을 위한 numpy.strings 네임스페이스 추가.
     * 모든 numpy.fft 함수에서 float32와 longdouble 지원.
     * 메인 numpy 네임스페이스에서 배열 API 표준 지원.

  성능 개선

     * 정렬 함수(sort, argsort, partition, argpartition)가 Intel x86-simd-sort와 Google Highway 라이브러리를 사용하여 가속화됨.
     * macOS Accelerate 지원 및 macOS >=14용 바이너리 휠 제공, 선형 대수 연산의 성능 크게 향상.
     * numpy.char 고정 길이 문자열 작업이 가속화됨.
     * 하드웨어별 커널을 확인하고 사용할 수 있는 새로운 추적 및 검사 API, opt_func_info 추가.

  Python API 개선

     * 공용 API와 비공용 API의 명확한 분리, 새로운 모듈 구조.
     * 비추천 함수와 별칭 다수 제거, 학습과 사용이 더 쉬워짐.
     * 표준 dtype 이름과 새로운 isdtype 검사 함수 추가.

  C API 개선

     * 사용자 정의 dtype을 생성하기 위한 새로운 공용 C API 추가.
     * 오래된 함수와 매크로 제거, 비공용 내부 숨김.
     * 새로운 초기화 함수: PyArray_ImportNumPyAPI와 PyUFunc_ImportUFuncAPI.

  개선된 동작

     * NEP 50을 채택하여 타입 승격 동작 개선, 입력 배열의 데이터 값이 아닌 dtype에만 의존하게 됨.
     * Windows에서 기본 정수 타입이 int32에서 int64로 변경됨.
     * 최대 배열 차원 수가 32에서 64로 증가.

  문서화

     * 참조 가이드 탐색이 크게 개선됨.
     * 소스에서 빌드하는 문서가 완전히 새로 작성됨.

  Python API 제거 항목

     * np.geterrobj, np.seterrobj 및 관련 ufunc 키워드 인수 extobj= 제거.
     * np.cast 제거, np.asarray(arg, dtype=dtype)로 대체.
     * np.source 제거, inspect.getsource로 대체.
     * np.lookfor 제거.
     * numpy.who 제거, Spyder나 Jupyter Notebook 같은 IDE의 변수 탐색기 사용 권장.
     * 여러 비추천 함수와 별칭 제거.

  GN⁺의 의견

     * 성능 개선: 새로운 정렬 알고리즘과 macOS Accelerate 지원으로 인해 데이터 처리 속도가 크게 향상될 것으로 기대됨.
     * API 정리: 비추천 함수와 별칭의 제거로 인해 NumPy 사용이 더 직관적이고 간결해짐.
     * 타입 승격: NEP 50을 채택하여 타입 승격 동작이 더 예측 가능해짐. 이는 혼합 dtype 연산에서의 예기치 않은 결과를 줄이는 데 도움이 될 것임.
     * 문서화 개선: 참조 가이드와 빌드 문서의 개선으로 인해 개발자들이 NumPy를 더 쉽게 이해하고 사용할 수 있게 됨.
     * 호환성 문제: 많은 API 변경 사항이 있으므로 기존 코드가 호환되지 않을 수 있음. 마이그레이션 가이드를 참고하여 코드를 업데이트하는 것이 필요함.

   충돌하는 패키지들이 많겠네요..

        Hacker News 의견

     * 복잡한 연산 조합 방법: 비요소별 연산을 구성하는 더 간단하고 기억하기 쉬운 방법이 필요함. 다양한 방법이 너무 많아 매번 다시 배워야 하는 어려움이 있음.
     * 윈도우 기본 정수형 변경: 윈도우에서 기본 정수형이 int32에서 int64로 변경됨. 이는 다른 플랫폼과 일치하게 되어 좋음.
     * Numpy 주요 업데이트: Numpy를 직접 자주 사용하지 않는 사용자에게는 큰 변화가 없을 수 있음. 주로 pandas와 scipy를 사용하며, 필요할 때만 Numpy 알고리즘을 사용함.
     * 업데이트 주기: 주요 업데이트가 있을 때마다 바로 업그레이드하지 않고, 안정적인 버전이 나올 때까지 기다리는 편임.
     * 버전 관리: 18년 만에 큰 변화가 있는 첫 주요 릴리스는 새로운 버전으로 포크하는 것이 더 나을 것 같음. pip install numpy2로 설치하고, 다른 라이브러리와의 호환성을 걱정하지 않도록 하는 것이 좋음.
     * 패키지 호환성 문제: 일부 패키지가 1.x 버전에 고정되지 않아 문제가 발생하고 있음. pip install numpy==1.*로 임시 해결 가능함.
     * 릴리스 노트 링크: Numpy 2.0.0 릴리스 노트 링크 제공. Numpy 2.0.0 릴리스 노트
"
"https://news.hada.io/topic?id=15349","마이크로소프트의 Recall AI 기능 무기한 연기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      마이크로소프트의 Recall AI 기능 무기한 연기

성능 및 보안

     * 인간 확인 절차: 사용자가 인간인지 확인하는 절차가 필요함.
     * 시간 소요: 확인 절차가 예상보다 오래 걸릴 수 있음.
     * 인터넷 연결: 인터넷 연결 상태를 확인하고 페이지를 새로 고침 필요함.
     * Cloudflare: Cloudflare를 통해 성능 및 보안 관리 중임.

GN⁺의 의견

     * 사용자 경험: 인간 확인 절차가 길어지면 사용자 경험에 부정적 영향을 줄 수 있음.
     * 보안 강화: Cloudflare를 통한 보안 강화는 긍정적임.
     * 인터넷 연결: 인터넷 연결 상태가 불안정한 경우, 사용자에게 불편을 줄 수 있음.
     * 대안 제안: 다른 보안 방법(예: CAPTCHA)을 고려해볼 수 있음.
"
"https://news.hada.io/topic?id=15330","마이크로소프트, 보안보다 이익을 우선시했다고 내부고발자 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   마이크로소프트, 보안보다 이익을 우선시했다고 내부고발자 주장

마이크로소프트, 보안보다 이익을 선택해 미국 정부를 러시아 해킹에 취약하게 만들었다고 내부고발자가 주장

  전직 직원의 경고 무시

     * 주요 내용: 전직 마이크로소프트 직원 앤드류 해리스는 회사가 중요한 보안 결함을 무시했다고 주장함. 이 결함은 러시아 해커들이 미국의 국가 핵 보안 관리국(NNSA)을 포함한 여러 기관을 침해하는 데 사용됨.
     * 해리스의 발견: 해리스는 마이크로소프트의 클라우드 애플리케이션에서 사용자가 클라우드 기반 프로그램에 로그인할 수 있도록 하는 애플리케이션에서 심각한 결함을 발견함. 이 결함은 해커들이 합법적인 직원으로 가장해 중요한 데이터를 훔칠 수 있게 했음.
     * 회사의 반응: 해리스는 이 결함을 동료들에게 알렸지만, 회사는 정부 사업을 잃을 것을 우려해 이를 무시함. 마이크로소프트는 장기적인 대안을 마련하겠다고 했지만, 그 동안 클라우드 서비스는 여전히 취약한 상태로 남아 있었음.

  솔라윈즈 해킹 사건

     * 해킹 사건 발생: 해리스가 회사를 떠난 후, 러시아 해커들이 솔라윈즈(SolarWinds) 해킹 사건을 통해 여러 연방 기관의 민감한 데이터를 훔침. 이 해킹은 미국 역사상 가장 큰 사이버 공격 중 하나로 기록됨.
     * 해킹 방법: 해커들은 해리스가 발견한 결함을 이용해 여러 연방 기관의 데이터를 훔쳤으며, 이는 장기적인 정보 수집을 위한 스파이 활동으로 묘사됨.

  마이크로소프트의 대응

     * 공식 입장: 마이크로소프트는 고객 보호가 최우선이라고 주장하며, 모든 보안 문제를 철저히 검토한다고 밝혔음. 그러나 해리스는 회사가 고객보다 이익을 우선시했다고 비판함.
     * 보안 문화: 마이크로소프트는 보안 문화가 부족하다는 비판을 받았으며, 회사 내부에서도 보안보다 이익을 우선시하는 문화가 문제로 지적됨.

  GN⁺의 의견

     * 보안과 이익의 균형: 기업이 보안보다 이익을 우선시할 경우, 장기적으로 고객 신뢰를 잃을 수 있음. 이는 결국 회사의 평판과 수익에 부정적인 영향을 미칠 수 있음.
     * 정부와의 관계: 정부와의 계약을 유지하기 위해 보안 문제를 무시하는 것은 단기적으로는 이익이 될 수 있지만, 장기적으로는 국가 안보에 큰 위협이 될 수 있음.
     * 보안 문화 개선 필요: 마이크로소프트와 같은 대기업은 보안 문화를 개선하고, 보안 문제를 신속하게 해결하는 시스템을 구축해야 함. 이는 고객 신뢰를 유지하고, 장기적인 성공을 보장하는 데 중요함.
     * 경쟁 제품: 오크타(Okta)와 같은 경쟁 제품도 존재하며, 이러한 제품들은 보안에 더 중점을 두고 있음. 기업은 다양한 옵션을 고려해 최적의 보안 솔루션을 선택해야 함.
     * 기술 도입 시 고려사항: 새로운 기술을 도입할 때는 보안 문제를 철저히 검토하고, 잠재적인 취약점을 미리 파악해 대응책을 마련해야 함. 이는 해킹과 같은 사이버 공격을 예방하는 데 중요함.

        Hacker News 의견

     * Zero Trust 모델: 조직 내 네트워크를 외부처럼 취급하고 완전한 신뢰를 두지 않는 것이 중요함. Google은 BeyondCorp를 통해 이를 구현하여 내부 침해를 방지함.
     * 보안과 이익의 불일치: 보안과 이익 간의 불일치는 문화적 변화 없이는 해결하기 어려움. 현재로서는 무엇이 이를 촉발할지 불확실함.
     * 사이버 보안의 현실: 사이버 보안 업계는 실제 보안보다 규정 준수에 집중하는 경향이 있음. 규정 준수 기준이 부족하거나 제대로 시행되지 않음.
     * 정부와 기업의 관계: 정부에 제품을 판매하는 기업들은 많은 돈을 벌 수 있으며, 이를 위해 부정적인 부분을 숨기기도 함. 이는 기본적인 윤리와 정직성의 부식을 초래함.
     * 보안 인센티브: 보안 인센티브가 부족함. 판매 직원은 성과에 따라 보상을 받지만, 보안 직원은 성과가 없으면 해고됨. 이는 보안 문화를 저해함.
     * 보안 우선주의: ""보안을 우선시하라""는 경영진의 말은 중요하지 않음. 보안 문화를 보상하지 않으면 직원들은 다른 우선순위에 최적화됨.
     * Microsoft의 보안 접근: Microsoft의 CEO Satya Nadella는 보안을 우선시한다고 말하지만, 실제로는 광고와 사용자 활동 기록에 집중함.
     * 정부의 스마트 카드 사용: 미국 정부는 스마트 카드 인증을 사용하여 보안을 강화하려고 함. 그러나 Seamless SSO를 비활성화하면 사용자가 클라우드에 접근하기 어려워짐.
     * 이익 우선주의: 대부분의 기업은 보안보다 이익을 우선시함. 이는 Microsoft만의 문제가 아님.
     * Golden SAML 공격: Golden SAML은 취약점이 아니라 공격 유형임. SSO 인프라가 손상되면 모든 것이 위험에 처함.
     * 비유적 설명: 다리 건설 회사가 구조적 결함을 무시하고 다리가 붕괴되는 상황을 비유로 들어, IT 업계에서도 비슷한 일이 발생한다고 설명함.
     * 법적 규제 필요성: 네트워크 보안에 대한 법적 규제가 필요함. 기술이 스스로를 규제할 수 없다는 인식이 커지고 있음. 미국 정부가 Microsoft의 클라우드를 신뢰하지 않게 되면 대체할 곳이 많지 않음.
"
"https://news.hada.io/topic?id=15447","테트리스 폰트 - 입력한 문자열을 테트리스해서 만들기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     테트리스 폰트 - 입력한 문자열을 테트리스해서 만들기

  폰트 디자인

     * 각 글자와 숫자는 테트리스 조각들(I, J, L, O, S, T, Z)로 구성됨.
     * 글자는 실제 테트리스처럼 조각들을 쌓아 만들 수 있음.
     * BurrTools 소프트웨어를 사용해 조각들이 글자 모양에 맞게 들어갈 수 있는지 확인함.
     * 조각 색상은 The Tetris Company의 표준 색상을 따르거나 검은색으로 변경 가능함.
     * 초기 회전은 Super Rotation System을 따름.

  퍼즐

     * 퍼즐 폰트에서는 글자들이 올바른 회전과 수평 위치에 있으며, 수직 위치는 떨어지는 순서를 나타냄.
     * 애니메이션 폰트에서는 모든 조각이 도착하기 전에 글자가 무엇인지 추측 가능함.
     * 애니메이션이 없는 검은색 조각 폰트에서는 각 테트리스 조각이 완벽하게 모양을 채우는 방법을 알아내야 함.

  관련 수학

     * 완전 정보 테트리스는 NP-완전 문제로, 초기 보드 구성과 n개의 조각이 주어졌을 때 생존하거나 보드를 클리어할 수 있는지 계산적으로 해결하기 어려움.
     * k-ominoes를 사용하는 k-tris에서도 유사한 결과가 나타남.
     * 최근에는 적은 행이나 열로 구성된 테트리스의 복잡성을 분석함.

  감사의 말

     * 이 폰트는 BRIDGES 2017에서 Alex Streif와 Kate Jones와의 협업에서 영감을 받음.
     * Kate Jones는 Kadon 매뉴얼에 포함된 다른 폴리오미노 폰트를 디자인함.
     * 이 폰트는 테트리스의 규칙에 더 가깝게 반영되도록 설계됨.

  GN⁺의 의견

     * 테트리스 폰트는 게임과 수학의 흥미로운 결합으로, 퍼즐과 폰트 디자인에 관심 있는 사람들에게 매력적임.
     * NP-완전 문제로서의 테트리스는 컴퓨터 과학과 알고리즘 연구에 중요한 주제임.
     * BurrTools와 같은 도구를 사용해 복잡한 퍼즐을 해결하는 과정은 소프트웨어 엔지니어에게 유용한 경험이 될 수 있음.
     * 이 폰트는 교육적 도구로도 활용 가능하며, 수학적 사고를 촉진할 수 있음.
     * 테트리스 폰트와 유사한 프로젝트로는 폴리오미노 퍼즐이나 다른 게임 기반 폰트 디자인이 있음.

        Hacker News 의견

     * 한 사용자는 테트리스에서 폰트를 만드는 대신 폰트가 테트리스를 하도록 만들었음. Harfbuzz 셰이퍼를 사용해 WebAssembly 프로그램을 폰트에 임베딩하는 실험적 지원을 활용했음. 유튜브 링크와 소스 코드를 공유했음.
     * 다른 사용자는 전체 단락을 만들 수 있는 점이 매우 멋지다고 언급했음. 예시 링크를 제공했음.
     * 테트리스 커뮤니티의 하위 분야 중 하나는 테트리스 아트/패턴 생성임. 일본 아케이드 버전의 테트리스에서 시작된 'Secret Grade' 패턴이 대표적임. 예시 링크와 다른 예시를 공유했음.
     * 저자는 각 글자와 숫자가 테트리스 조각들로 구성되어 있으며, BurrTools 소프트웨어를 사용해 디자인을 찾았다고 설명했음. BurrTools 소프트웨어를 언급했음.
     * 한 사용자는 이 작업이 멋지다고 언급하며, Demaine의 다른 작업도 놀랍다고 했음. 관련 논문을 공유했음.
     * 다른 사용자는 브라우저의 뒤로 가기 버튼을 사용해 상태 변경을 되돌리는 것이 불편하다고 언급했음.
     * 저자에 대해 잘 모르는 사람들을 위해 Erik Demaine의 위키피디아 링크를 공유했음.
     * 한 사용자는 이 사람의 강의를 통해 동적 프로그래밍을 배웠다고 언급했음. MIT 교수가 된 신동임.
     * 프로그래밍 관점에서 폰트 생성이 자동화되었다면 더 흥미로운 변형과 소문자, 다른 기호 지원이 가능했을 것이라고 언급했음.
     * Lwan 프로젝트의 샘플이 떠오른다고 언급하며, 서버에서 시계를 렌더링하고 청크 인코딩을 사용해 클라이언트로 새로운 프레임을 보내는 예시 링크를 공유했음.
"
"https://news.hada.io/topic?id=15335","ChromeOS, 안드로이드 스택 대규모 부분에서 곧 개발 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ChromeOS, 안드로이드 스택 대규모 부분에서 곧 개발 예정

더 빠르고 스마트한 Chromebook 경험 구축

  주요 내용

     * ChromeOS와 Android 통합:
          + ChromeOS가 Android 스택의 큰 부분을 사용하여 Google AI와 혁신 기능을 더 빠르게 사용자에게 제공할 예정임.
          + Android Linux 커널과 Android 프레임워크를 ChromeOS의 기초로 사용하여 AI 혁신 속도를 가속화하고 엔지니어링 노력을 단순화할 계획임.
     * ChromeOS의 발전:
          + 지난 13년 동안 ChromeOS는 전 세계 학생, 교사, 가족, 게이머, 기업을 위한 안전하고 빠르며 기능이 풍부한 경험을 제공해 왔음.
          + Google AI와 Gemini로 구동되는 새로운 기능을 통해 더 많은 사람들이 일상적인 작업을 돕는 강력한 도구를 사용할 수 있게 됨.
     * 기술 스택 개선:
          + Android 기반 기술 스택을 ChromeOS에 도입하여 AI 혁신을 가속화하고, 다양한 장치(예: 휴대폰 및 액세서리)가 Chromebook과 더 잘 작동하도록 할 예정임.
          + ChromeOS의 보안, 일관된 사용자 경험, 광범위한 관리 기능을 계속 제공할 것임.
     * 향후 계획:
          + 기술 스택 개선 작업이 시작되었지만, 소비자에게 제공되기까지는 시간이 걸릴 것임.
          + 업데이트된 경험으로의 원활한 전환을 제공할 예정이며, 정기적인 소프트웨어 업데이트와 새로운 혁신은 계속될 것임.

  GN⁺의 의견

     * AI 통합의 중요성:
          + AI 기술의 통합은 사용자 경험을 크게 향상시킬 수 있음. 특히, 일상적인 작업을 자동화하고 효율성을 높이는 데 도움이 됨.
     * 기술 스택 통합의 장점:
          + Android와 ChromeOS의 통합은 개발자와 사용자 모두에게 이점을 제공함. 개발자는 더 일관된 환경에서 작업할 수 있고, 사용자는 더 나은 성능과 호환성을 경험할 수 있음.
     * 보안 유지의 중요성:
          + 새로운 기능과 혁신이 도입되더라도, 보안은 항상 최우선으로 유지되어야 함. ChromeOS는 그동안 높은 보안 수준을 유지해 왔으며, 앞으로도 이를 지속해야 함.
     * 경쟁 제품과의 비교:
          + Microsoft의 Windows와 Apple의 macOS와 같은 경쟁 제품들도 AI와 통합된 기능을 제공하고 있음. ChromeOS가 경쟁력을 유지하려면 지속적인 혁신이 필요함.
     * 사용자 교육 필요성:
          + 새로운 기능이 도입되면 사용자들이 이를 효과적으로 활용할 수 있도록 교육과 지원이 필요함. 특히, 비전문가 사용자들에게는 이러한 지원이 중요함.

        Hacker News 의견

     * Android 아키텍처는 커널과 사용자 공간 개발을 명확히 분리하여 OS 단편화를 어느 정도 해결함. 이는 제조사가 BSP를 업데이트하지 않아도 최신 OS 버전을 사용할 수 있게 도와줌.
     * Crostini, Crouton, Linux 개발자 모드가 사라질지 궁금함. 저렴한 크롬북에서 개발한 것이 자랑스러움.
     * Android 스택이 AI에 더 마법적인 이유에 대한 설명이 없음. ChromeOS 개발자들을 해고하고 Android와 자원을 공유하려는 것인지 궁금함. 왜 새로운 Fuscia를 사용하지 않는지 의문임.
     * ChromeOS 커널이 버려질 가능성이 있음. A/B 업데이트 메커니즘, 파일 시스템 레이아웃, 보안 부팅 등이 포함될 수 있음. ChromeOS 사용자 공간도 대체될지 궁금함.
     * Lacros(Chrome을 Wayland 애플리케이션으로 사용하는 것)에 어떤 영향을 미칠지 궁금함. Surfaceflinger와 Android 버전의 Chrome을 사용할 것인지, Linux용 Chrome의 우선순위가 낮아질지 궁금함.
     * 크롬북 대신 안드로이드 폰을 도킹 스테이션에 연결해 ssh, 크롬 브라우저, 원격 데스크톱을 사용하고 싶음.
     * 큰 발표임. 자세한 내용은 없지만 Chromium 코드 리뷰 시스템을 더 주의 깊게 지켜볼 예정임.
     * 이 프로젝트를 통해 통합의 진정한 의도를 추론할 수 있을 것 같음. 각기 다른 사용자 세그먼트를 타겟으로 하는 3~4개의 OS를 유지하는 것이 비즈니스적으로 타당할 수 있음. 하지만 모든 OS에 대해 다른 기술 스택을 가질 이유는 없음.
     * AI 언급이 다소 우스꽝스럽지만, 2024년이니 필요함. 엔지니어링 노력을 단순화하고 스택을 통합하는 것은 이해할 수 있음.
     * Android가 처음에 Linux에서 분기된 이유를 기억하려고 함. Linux 측 유지보수자들이 wakelocks 문제를 가졌던 것 같음. Google이 통합하려고 했지만 실패했던 기회가 있었음.
"
"https://news.hada.io/topic?id=15427","HN에 공개: Billard – 2D 공간에서 공 충돌로 음악 생성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HN에 공개: Billard – 2D 공간에서 공 충돌로 음악 생성

     * 소리 듣기: 위의 스피커 아이콘을 클릭하여 소리를 들을 수 있음.
     * MIDI 옵션: 톱니바퀴 아이콘을 통해 MIDI 옵션에 접근할 수 있음.
     * 알림 닫기: 클릭하여 알림을 닫을 수 있음.

GN⁺의 의견

     * 사용자 경험: 소리 듣기와 MIDI 옵션 접근 방법을 명확히 안내하여 사용자 경험을 향상시킬 수 있음.
     * 직관적 인터페이스: 직관적인 아이콘 사용으로 사용자가 쉽게 기능을 이해하고 사용할 수 있음.
     * 기능 확장 가능성: MIDI 옵션을 통해 다양한 소리 설정을 할 수 있어 기능 확장 가능성이 높음.

        Hacker News 의견

     * 음악 샌드박스 장르: 음악 샌드박스는 매우 만족스럽고 재미있는 분야임. 특히 앰비언트 음악 제작에 유용하며, Droplets라는 플러그인이 추천됨.
     * 프랑스 예술가 Celeste Boursier-Mougenot: 이 예술가는 ""clinamen"" 위를 떠다니는 도자기 그릇들로 변화하는 소리 풍경을 만듦.
     * MIDI 출력 문제: 브라우저에서 MIDI 데이터를 출력하거나 내보내는 방법에 대한 도움 요청.
     * 무작위 공 생성 아이디어: 무작위 공 생성 아이디어가 재미있고 간단한 인터랙티브 작품으로 평가됨. SuperCollider에서의 경험을 공유하며, glicol.js 프로젝트를 소개함.
     * 데스크탑 앱 개발: 유사한 기능을 하는 데스크탑 앱을 개발 중이며, QGraphicsView/pymunk를 사용함. 특정 노래를 재생하는 트릭이 있을 것으로 추정됨.
     * Op-1 Tombola 시퀀서: Op-1 Tombola 시퀀서를 떠올리게 함. 충돌 시 MIDI 노트를 트리거함.
     * 3DS Electroplankton 게임: 3DS Electroplankton 게임과 비슷하지만 중독성은 덜함. 반복 패턴을 생성할 수 있는 더 많은 제어가 필요함.
     * yin/yang 모드: ""yin/yang"" 모드에서 탭이 포커스되지 않을 때 공의 상태가 변하지 않는 현상을 발견함. 이는 기능일 가능성이 있음.
     * 디지털 영역에서의 자연 세계 재현: 지오메트리, 음악, 예술, 수학, 광학, 생물학 등의 지식을 결합하여 디지털 영역에서 자연 세계의 상호 연결된 측면을 재현할 가능성을 언급함.
     * 옛 플래시 게임 Boomshine: 이 프로젝트가 옛 플래시 게임 Boomshine을 떠올리게 함.
"
"https://news.hada.io/topic?id=15414","15년 만에 배운 Haskell","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           15년 만에 배운 Haskell

내가 하스켈을 배우는 데 15년이 걸린 이유

  하스켈과의 첫 만남

     * 하스켈은 20세기 스코틀랜드 논리학자들이 만든 함수형 프로그래밍 언어임.
     * 2006년경 처음 하스켈을 접하게 되었음.
     * 대학 시절 독립 연구를 통해 하스켈을 배우기 시작했으나, 실제로는 많이 배우지 못했음.

  실전에서의 하스켈

     * 2009년에 Xmonad라는 타일링 윈도우 매니저를 사용하면서 하스켈을 조금 더 접하게 되었음.
     * Xmonad 설정 파일이 하스켈로 작성되어 있어 이를 통해 하스켈을 조금 더 이해하게 되었음.

  엘름을 통한 학습

     * 엘름(Elm)은 하스켈과 유사한 언어로, 엘름을 통해 함수형 프로그래밍의 개념을 더 쉽게 이해할 수 있었음.
     * 엘름을 사용하여 대시보드 페이지를 만들면서 함수형 프로그래밍의 원리를 배움.

  하스켈로 돌아오다

     * 엘름을 통해 배운 지식을 바탕으로 하스켈 라이브러리인 Shake를 사용하여 정적 사이트 빌더를 만듦.
     * 이후 Python에서 하스켈의 개념을 적용하여 더 나은 코드를 작성하게 되었음.

  첫 유용한 하스켈 프로그램 작성

     * 2023년에 프리랜서로 일하면서 시간 추적 프로그램을 하스켈로 작성하게 되었음.
     * 이 프로그램은 명령줄 옵션을 파싱하고 데이터베이스와 상호작용하는 기능을 가짐.
     * 드디어 유용한 하스켈 프로그램을 작성하게 되어 큰 성취감을 느꼈음.

GN⁺의 의견

     * 함수형 프로그래밍의 장점: 하스켈과 같은 함수형 언어는 불변성과 순수 함수를 강조하여 코드의 예측 가능성과 안정성을 높임.
     * 학습 곡선: 하스켈은 배우기 어렵지만, 엘름과 같은 유사 언어를 통해 점진적으로 접근하는 것이 효과적일 수 있음.
     * 실전 적용: 실제 프로젝트에서 하스켈을 사용하면 함수형 프로그래밍의 원리를 더 잘 이해하고 적용할 수 있음.
     * 도구 선택: Shake와 같은 하스켈 라이브러리는 빌드 시스템을 구축하는 데 유용하며, 이를 통해 하스켈의 실용성을 경험할 수 있음.
     * 커뮤니티와 자료: 하스켈 커뮤니티와 다양한 학습 자료를 활용하면 학습 과정에서 많은 도움을 받을 수 있음.

        Hacker News 의견

     * 함수형 프로그래밍을 배우는 것은 가치가 있으며, 15년이나 걸리지 않음. Haskell은 도메인 데이터를 선언적으로 모델링하고 순수 함수로 작업하며 프로그램 경계에서 실제 세계와 상호작용하는 방식이 자연스러움. 초보자에게는 F#을 추천함.
     * Prolog는 함수형 프로그래밍을 이해하는 데 더 많은 통찰력을 제공함. 언어를 이해하는 데 며칠밖에 걸리지 않지만, 그 결과를 이해하는 데는 시간이 걸림.
     * Haskell을 배우기 위한 좋은 리소스를 추천해달라는 요청. Haskell에 대한 관심이 오래전부터 있었으며, F#을 사용한 사이드 프로젝트로 일부 함수형 프로그래밍 개념을 내재화했지만, 모나드에 대한 이해가 부족함.
     * 링크: https://duckrabbit.tech/articles/learning-haskell.html"">Haskell 학습 리소스
     * 저자의 코드를 보고 싶다는 의견. 저자의 여정이 어떤 결과를 낳았는지 궁금함.
     * 링크: 저자의 코드 보기
     * 순수 함수형 프로그래밍 언어를 배우는 것의 이점에 대한 질문. 현실 세계의 데이터와 이벤트를 처리하는 코드를 작성할 때 최적화된 코드와 지적 호기심 사이의 경계가 흐려짐.
     * Haskell에 대한 매력을 느끼는 이유는 도메인 데이터를 선언적으로 모델링하고 순수 함수로 작업하며 프로그램 경계에서 실제 세계와 상호작용하는 방식이 자연스럽기 때문임. 이는 Haskell뿐만 아니라 다른 언어에서도 선호하는 작업 방식임.
     * Haskell이 20년 전 뜨거운 주제였을 때, ML도 자주 논의되었음. 오늘날 ML은 거의 머신 러닝을 의미함.
     * 15년 또는 아무것도 없음.
"
"https://news.hada.io/topic?id=15336","제럴드 서스만: 프로그래밍은 재미있어야 한다 (2022) [비디오]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 제럴드 서스만: 프로그래밍은 재미있어야 한다 (2022) [비디오]

        Hacker News 의견

     * 프로그램을 통해 지식을 저장하고 기억하는 방식에 대해 이야기함.
     * Sussman이 AI 해석 가능성에 대해 논의한 경험을 공유함.
     * Alan J. Perlis의 인용문을 통해 컴퓨터 과학에서 재미를 유지하는 중요성을 강조함.
     * SICP가 코드, 추상화, 모듈화에 대한 사고 방식을 변화시켰음을 언급함.
     * 코딩의 재미와 도전적인 부분을 비교하며 설명함.
     * 프리랜서로 일하면서 프로그래밍에 대한 열정이 줄어들었음을 고백함.
     * SICP 저자의 프로그래밍에 대한 견해를 듣는 것이 흥미로웠음을 표현함.
     * SICP 강의를 들으면서 많은 영감을 받았음을 언급함.
     * 프로그래밍의 재미를 강조하는 것이 중요하다고 주장함.
     * 특정 언어에서 프로그래밍이 더 재미있거나 편안할 수 있음을 언급함.
"
"https://news.hada.io/topic?id=15451","원격 근무 덕분에 고용된 장애인 미국인 증가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        원격 근무 덕분에 고용된 장애인 미국인 증가

     * 원격 근무의 확산으로 장애인 고용률 크게 상승
          + 지난 3년간 미국 내 장애인 노동 시장 참여율 기록적 수준으로 증가
          + 재택근무, 유연 근무시간, 직무 공유 등이 주요 요인으로 작용
     * 장애인 원격 근무 비율 높음
          + 2024년 1분기 기준, 장애인 직원의 원격 근무 비율 12.6%
          + 비장애인 직원의 원격 근무 비율 10.6%
     * 기업 정책의 변화
          + COVID-19로 인해 기업들의 근무 환경 조정에 대한 인식 개선
          + 인력 부족으로 인한 노동 시장 경쟁 심화도 영향

  통계 데이터

     * 기업 정책 변화 (2017년 대비 2022년)
          + 지원자 및 직원 편의를 위한 예산 책정: 16% → 39%
          + 모든 직원에게 유연 근무 제공: 25% → 40%
          + 직무 공유 제도 제공: 13% → 26%
     * 장애인 실업률
          + 여전히 비장애인에 비해 약 2배 높은 수준
          + 소수 인종 장애인의 실업률이 더 높음 (예: 흑인 장애인 10.2%, 히스패닉 장애인 9.2%)
     * 직종별 격차
          + 장애인은 상대적으로 저임금 직종에 과대 대표됨
          + 사무 및 행정 지원, 운송 및 물류 이동 등의 직종에서 장애인 비율 높음

  결론

     * 원격 근무의 확산으로 장애인의 고용 기회가 크게 증가했으나, 여전히 실업률과 임금 격차 등의 문제 존재
     * 기업들의 정책 변화와 사회적 인식 개선이 지속적으로 필요한 상황임.

        Hacker News 의견

     * 불법적 차별: 고용주들이 재택근무를 제공하는 것이 과도한 부담이라고 거짓 주장하며 장애인 직원들을 불법적으로 차별해왔음. COVID로 인해 재택근무가 가능해지면서 이러한 차별이 줄어들었음.
     * 개인 경험: 9년 동안 재택근무를 해왔고, 만성 질환으로 인해 사무실 근무가 어려워졌음. 재택근무 덕분에 건강 문제에도 불구하고 일을 계속할 수 있었음.
     * 재택근무의 장점: 재택근무가 가능해지면 더 많은 사람들이 일할 수 있게 됨. 이는 장애인뿐만 아니라 돌봄을 필요로 하는 사람들에게도 큰 도움이 됨.
     * 사회적 변화: 재택근무와 같은 사회적 변화가 장애를 덜 불편하게 만들 수 있음. 이는 의료 발전이 질병을 치료하는 것과 유사함.
     * 인터넷의 혜택: 인터넷은 장애인들에게 큰 도움이 됨. 웹사이트나 소프트웨어를 만들 때 접근성을 고려하면 장애인 사용자들이 큰 만족을 느낄 것임.
     * 재택근무의 경제적 효과: 재택근무를 통해 고비용 직원들을 해고하고 저비용 원격 직원들로 대체하는 경향이 있음. 이는 고용 구조에 큰 변화를 가져옴.
     * 다양성과 포용성: 장애인을 포함한 더 많은 다양성과 포용성이 필요함. 이는 DEI(다양성, 형평성, 포용성) 브로셔에도 반영되어야 함.
     * 재택근무의 긍정적 영향: 재택근무가 고품질의 일자리에 접근할 수 있게 해줌. 이는 매우 긍정적인 변화임. 각자 선호하는 근무 형태를 선택하면 됨.
     * 개인 경험: 병원과 재활센터에서도 재택근무를 계속할 수 있었음. 이는 큰 도움이 되었고, 고용주가 재택근무를 허용해준 것에 감사함.
"
"https://news.hada.io/topic?id=15365","해양 플라스틱 분해하는 곰팡이","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            해양 플라스틱 분해하는 곰팡이

바다의 곰팡이가 플라스틱을 분해함

  곰팡이 Parengyodontium album의 발견

     * Parengyodontium album이라는 곰팡이가 바다에서 플라스틱 폴리에틸렌(PE)을 분해할 수 있음.
     * 이 곰팡이는 다른 해양 미생물과 함께 플라스틱 쓰레기 위에 얇은 층으로 존재함.
     * 연구는 네덜란드 해양연구소(NIOZ)와 여러 대학 및 연구 기관이 협력하여 진행됨.

  분해 과정의 정확한 추적

     * 연구자들은 북태평양의 플라스틱 오염 지역에서 플라스틱 분해 미생물을 찾음.
     * 실험실에서 특수 플라스틱을 사용하여 곰팡이를 배양하고, 13C 동위원소를 이용해 분해 과정을 추적함.
     * 곰팡이는 하루에 약 0.05%의 속도로 PE를 분해함.
     * 대부분의 PE는 이산화탄소(CO2)로 전환되어 배출됨.

  UV 빛의 영향

     * 곰팡이가 PE를 에너지원으로 사용하려면 자외선(UV) 빛에 노출되어야 함.
     * UV 빛은 플라스틱을 기계적으로 분해할 뿐만 아니라, 생물학적 분해도 촉진함.

  다른 곰팡이의 가능성

     * 많은 플라스틱이 깊은 바다로 가라앉기 때문에, P. album이 모든 플라스틱을 분해할 수 없음.
     * 연구자들은 더 깊은 바다에서 플라스틱을 분해하는 다른 곰팡이들이 있을 것으로 예상함.

  플라스틱 문제의 심각성

     * 매년 4000억 킬로그램 이상의 플라스틱이 생산되고, 많은 양이 바다로 흘러들어감.
     * 플라스틱은 해양 표면에서부터 깊은 바다까지 퍼져 있으며, 결국 해저에 쌓임.
     * 북태평양 아열대 환류 지역에만 8000만 킬로그램의 플라스틱이 축적되어 있음.

  GN⁺의 의견

     * 기술적 잠재력: 이 연구는 해양 플라스틱 오염 문제를 해결하는 데 중요한 단서를 제공함.
     * 환경적 영향: 곰팡이가 CO2를 배출하지만, 이는 인체 호흡 수준과 비슷한 양으로 큰 문제가 되지 않음.
     * 추가 연구 필요성: 더 많은 곰팡이와 미생물을 발견하여 플라스틱 분해 메커니즘을 이해하는 것이 중요함.
     * 실용적 적용: 이 기술을 실제 환경에 적용하기 위해서는 추가적인 연구와 테스트가 필요함.
     * 경쟁 기술: 플라스틱 분해를 위한 다른 생물학적 방법이나 화학적 방법과의 비교 연구도 필요함.

        Hacker News 의견

     * Parengyodontium album 균류를 분리하고 염기서열을 분석한 사진과 DNA를 공유함.
     * 이 균류는 폴리에틸렌을 분해할 수 있으며, 열병합 발전소에서 연료로 재사용될 가능성이 있음.
     * 수생 환경에서 발견되는 미세 플라스틱의 큰 부분은 자동차 타이어의 마모로 인한 것임. 더 다양한 균류가 필요함.
     * 미세 플라스틱이 체내에 축적되는 문제를 언급하며, 천연 생체 고분자도 같은 문제가 있을지 궁금해함.
     * 식물 미세 섬유가 체내에 축적될 가능성을 제기하며, 오래된 직업 중 하나인 제빵사가 밀가루 먼지로 인해 치명적일 수 있었음을 언급함.
     * 리그닌 분해를 통해 균류가 플라스틱을 공격할 수 있는 이유를 설명함.
     * 플라스틱의 장점으로 식품 포장의 미생물 침투를 막아 유통기한을 늘리는 점을 언급함. 그러나 미래에는 포장 문제가 발생할 수 있음.
     * 플라스틱이 물에 버려지는 것이 문제임을 지적함.
     * 플라스틱을 분해하는 균류나 벌레에 대한 소식을 자주 들었지만, 실제로 플라스틱에 큰 변화가 없음을 지적함.
     * 플라스틱 제조업체가 이 발견을 남용하여 더 많은 플라스틱을 생산할 수 있다는 우려를 표함.
     * Parengyodontium album에 의한 폴리에틸렌 분해 속도가 하루에 약 0.05%임을 언급함.
     * 플라스틱이 CO2로 분해되는 것이 더 나은지, 플라스틱이 환경에 남아있는 것이 더 나은지 고민함.
     * 플라스틱 분해 이야기가 자주 들리지만, 이는 플라스틱 생산을 계속하기 위한 변명으로 오해될 수 있음을 지적함.
     * 화학영양생물(chemotrophs)이 독성 물질을 소비하고 에너지원으로 변환하는 방식을 연구에 적용할 필요성을 강조함.
"
"https://news.hada.io/topic?id=15450","길리어드의 HIV 예방 주사제, 아프리카 여성 대상 임상시험에서 100% 예방 효과 입증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           길리어드의 HIV 예방 주사제, 아프리카 여성 대상 임상시험에서 100% 예방 효과 입증

     * 길리어드 사이언스의 실험적 6개월 주기 주사제가 아프리카 여성 및 여자 청소년 대상 임상시험에서 HIV 감염을 100% 예방하는 데 성공함
     * HIV는 전 세계적으로 연간 약 130만 명의 신규 감염자 발생
     * 현재 치료법은 효과적이나, 더 나은 예방법 필요성 대두. 백신 개발은 아직 성공하지 못한 상황
     * 길리어드가 **레나카파비르(lenacapavir)**라는 새로운 장기 지속형 주사제 개발
          + 연 2회 주사로 기존 매일 복용 약물이나 2개월마다 주사하는 방식보다 편리
          + 정기 검진 시 투여 가능하여 접근성 향상
     * 임상시험 세부 사항:
          + 대상: 남아프리카와 우간다의 16~25세 여성 및 여자 청소년 약 5,300명
          + 방법: 레나카파비르 투여군과 기존 일일 복용 약물(트루바다 또는 데스코비) 투여군 비교
          + 결과: 레나카파비르 투여군에서 HIV 감염 사례 전무
          + 기존 예방약 Truvada(1일 1회 투여)보다 우수한 효과 입증
     * 추가 임상시험 진행 중:
          + 대상: 남성 동성애자, 트랜스젠더 여성 및 남성 (미국 포함)
          + 예상 결과 발표 시기: 2024년 말
     * 레나카파비르(상품명 선렌카)는 이미 다른 약물에 내성이 있는 HIV 치료제로 승인 받음
     * 추가 임상시험 결과 확보 후, 미국 및 기타 국가에서 예방용 레나카파비르 규제 승인 신청 예정

  시사점

     * HIV 예방을 위한 획기적인 새로운 옵션 제시
     * 투여 편의성 향상으로 HIV 예방 접근성 개선 기대
     * 길리어드 주가 상승: 뉴욕 증시에서 최대 5.8% 상승 (8월 이후 최대 상승폭)

        Hacker News 의견

     * 새로운 주사형 PrEP(사전 노출 예방) 약물이 도입되어 매일 약을 복용하는 대신 두 달에 한 번 주사를 맞는 방식으로 바뀌었음. 이는 많은 사람들에게 더 쉽게 접근할 수 있게 해줌.
     * 현대 사회에서는 과학의 놀라운 발전을 목격하면서도 반지성주의가 만연하는 아이러니가 존재함.
     * 친구가 몇 년 전 에이즈 관련 합병증으로 사망했음. 이 새로운 약물이 많은 사람들을 구할 수 있기를 바람.
     * 이 새로운 주사형 PrEP는 기존의 PrEP와 동일한 목적을 가지며, 몇 년 전부터 사용되고 있음. 다만, 주사의 지속 시간이 더 길어짐.
     * 빌 힉스의 1989년 코미디 영상이 관련 있음.
     * 이 속도로 진행된다면 한 세대 안에 HIV를 근절할 수 있을 것이라는 긍정적인 전망이 있음.
     * 이 약물은 백신이 아니라 장기 지속형 항바이러스 약물임. 항바이러스 약물이 HIV 감염을 효과적으로 예방하는 것은 오래전부터 알려져 있었음.
     * SARS-CoV-2(코로나바이러스)는 HIV에 비해 변이율이 높고 불안정함. COVID-19를 완전히 해결하는 것이 필요함.
     * Gilead의 보도 자료에 따르면, 새로운 PrEP 약물 lenacapavir는 6개월마다 한 번 주사하는 방식으로, 기존의 매일 복용하는 약물보다 효과적임. 연구 결과, lenacapavir 그룹에서는 HIV 감염 사례가 전혀 없었음.
"
"https://news.hada.io/topic?id=15432","1/25 축소판 Cray C90 손목시계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         1/25 축소판 Cray C90 손목시계

1/25-스케일 Cray C90 손목시계

  왜 만들었는가?

     * Cray 슈퍼컴퓨터와 원형 OLED 디스플레이를 활용한 프로젝트
     * 실용적인 시계를 원한다면 다른 블로그를 읽으라는 농담

  Cray-1과의 차이점

     * Cray PVP 라인은 Cray-1에서 Cray X1E까지 호환성 유지
     * 주소 비트가 22비트에서 32비트로 확장됨
     * 64비트 ""Cray"" 부동 소수점에서 IEEE 더블 정밀도 64비트 부동 소수점으로 변경

  시스템 아키텍처

     * Diligent CMOD-A7 FPGA 보드 사용
     * Cray CPU 코어가 105 MHz에서 실행됨
     * Teensy 3.6 마이크로컨트롤러가 '프론트엔드' 프로세서 역할을 함
     * 원형 OLED 디스플레이를 구동함

  소프트웨어

     * J90 코어의 벡터 성능을 보여주기 위해 목성 및 63개의 위성에 대한 N-body 중력 시뮬레이션 실행
     * Python으로 프로그램 작성 후, RTL 시뮬레이터에서 검증
     * 실제 FPGA 보드에서 부팅하여 안정성 확인

  시간을 어떻게 확인하는가?

     * 목성과 63개의 위성의 시뮬레이션을 표시
     * NASA의 HORIZONS 서버에서 천체 위치 데이터를 가져옴
     * 시뮬레이션을 통해 시간 추론 가능

  왜 C90인가?

     * Cray Y-MP C916의 1/25 스케일 복제
     * 원형 돔이 OLED 시계 화면을 수용하기에 적합
     * 3D 프린터로 모델 제작, 회로 보드와 배터리 장착

  최종 제품

     * 귀엽고 프로그래밍 가능하며 복잡함
     * NATO 스타일 손목 스트랩과 내장 배터리 충전기 포함
     * 실제로는 책상 장식품으로 더 적합

GN⁺의 의견

     * 이 프로젝트는 FPGA와 마이크로컨트롤러를 활용한 창의적인 하드웨어 프로젝트로 흥미로움
     * 복잡한 시스템을 간단한 형태로 구현하는 과정에서 많은 배울 점이 있음
     * 실용성보다는 기술적 도전과 재미를 추구하는 프로젝트로, 엔지니어링의 다양한 측면을 탐구할 수 있음
     * 비슷한 프로젝트로는 Raspberry Pi 기반의 소형 컴퓨터나 Arduino를 활용한 다양한 DIY 프로젝트가 있음
     * 새로운 기술을 도입할 때는 실용성과 유지보수성을 고려해야 함, 이 프로젝트는 그 점에서 좋은 예시가 됨

        Hacker News 의견

     * 한 사용자는 아버지가 컴퓨터 혁명의 선두에 있었으며, Seymour Cray와 함께 일했던 추억을 공유함. Cray가 캠퍼스에 나타나면 마치 록스타처럼 사람들이 몰려들었음. Control Data에서 함께 일하며 많은 컴퓨터를 판매했으며, 새로운 Cray 컴퓨터의 비용 절감 효과를 설명할 때 사람들의 놀라움을 자아냈음.
     * 한 사용자는 이 프로젝트가 시간 여행 SF 영화의 소품으로 훌륭할 것이라고 언급함. 주인공이 1991년으로 여행해 과학자를 설득하려고 하고, 증거로 Cray C90 손목시계를 보여주는 장면을 상상함.
     * 한 사용자는 외계 문명이 이 프로젝트를 발견했을 때의 상상을 즐김. 목성의 위성을 표시하는 것이 퍼즐이 되고 경이로움의 원천이 될 것이라고 생각함. 고대의 유물들도 비슷한 장난이었을 가능성을 제기함.
     * 한 사용자는 게시물 작성자에게 감사의 인사를 전하며, 1/25 크기의 Cray C90이 원래의 MIPS 성능에 얼마나 가까운지 궁금해함.
     * 한 사용자는 미래의 디자인에 외부 열 교환기 유닛이 포함될지, 벨트에 부착될지, 다른 손목에 SSD가 장착될지 궁금해함. 이러한 프로젝트가 오래된 훌륭한 기계들의 유산을 유지하는 것을 좋아함.
     * 한 사용자는 Cray 1을 소파로 사용하는 꿈을 꾸며, 그 디자인이 오늘날에는 볼 수 없는 독특한 것이었다고 언급함.
     * 한 사용자는 기술적인 의견은 없지만, 이 프로젝트가 터무니없고 사랑스럽다고 표현함.
     * 한 사용자는 프로젝트, 글쓰기 스타일, FPGA, 원형 LCD, 목성의 위성 시뮬레이션 등 모든 것이 멋지다고 생각하지만, 디스플레이 애니메이션을 볼 수 없어 좌절감을 느낌.
     * 한 사용자는 원형 디스플레이가 매우 멋지다고 생각하며, FPGA를 사용하는 것이 정말 대단하다고 언급함.
     * 한 사용자는 마지막 사진을 보기 전까지는 이 프로젝트가 웃기다고 생각했지만, 마지막 사진을 보고 나서는 훌륭하다고 생각하게 됨.
"
"https://news.hada.io/topic?id=15348","마우스 기반 터치패드, 마비 환자 컴퓨터 사용 가능하게 해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    마우스 기반 터치패드, 마비 환자 컴퓨터 사용 가능하게 해

Augmental: 혀와 머리 제스처로 기기 조작

  Augmental의 첫 제품: MouthPad

     * MouthPad: 사용자가 혀와 머리 움직임으로 컴퓨터, 스마트폰, 태블릿을 제어할 수 있게 해줌.
     * 작동 원리: 입천장에 위치한 압력 감지 터치패드와 모션 센서가 혀와 머리 제스처를 실시간으로 블루투스를 통해 커서 움직임과 클릭으로 변환함.
     * 사용 사례: 척수 손상 환자들이 독립적으로 기기를 사용할 수 있게 도와줌. 예를 들어, 사지마비 환자가 수학 공식을 작성하고 도서관에서 공부할 수 있게 됨.

  접근성 향상 목표

     * 궁극적 목표: 손 장애가 있는 사람이 손을 사용하는 사람만큼 능숙하게 기기를 사용할 수 있게 하는 것.
     * 다양한 사용자: 척수 손상 환자, 게이머, 프로그래머 등 다양한 사용자가 매일 최대 9시간 동안 MouthPad를 사용 중임.

  기술 개발과 확장

     * FDA 승인 목표: 휠체어와 로봇 팔 제어 등 기능을 추가하기 위해 FDA 승인을 받을 계획. 이는 보험 환급을 가능하게 하여 제품 접근성을 높일 것임.
     * 다음 버전 개발: 속삭임이나 더 미세한 내부 발음 기관의 움직임에 반응하는 시스템을 개발 중임.

  미래 전망

     * AI와의 연계: AI 에이전트와 하드웨어의 발전과 함께 MouthPad가 모든 사람에게 유용한 도구가 될 것이라고 기대함.
     * 목표: 항상 사용 가능하고, 견고하며, 개인적인 인터페이스 제공.

GN⁺의 의견

     * 접근성 향상: MouthPad는 장애인들이 더 독립적으로 생활할 수 있게 도와주는 혁신적인 기술임.
     * 다양한 사용자층: 장애인뿐만 아니라 게이머와 프로그래머 등 다양한 사용자층에게도 유용할 수 있음.
     * FDA 승인 필요성: FDA 승인을 받으면 더 많은 사람들이 보험을 통해 제품을 사용할 수 있게 되어 접근성이 크게 향상될 것임.
     * AI와의 통합 가능성: AI와의 통합을 통해 더욱 강력하고 유용한 도구로 발전할 가능성이 큼.
     * 기술의 한계: 현재 기술의 한계와 사용자의 다양한 요구를 모두 충족시키기 위해 지속적인 연구와 개발이 필요함.

        Hacker News 의견

     * Vision Pro의 눈 추적 기능: Vision Pro의 눈 추적 기능이 매우 접근 가능한 입력 방법으로 사용되고 있음. 한 사용자는 침대에서 눈과 입 소리로 화면을 제어하며 작업을 수행함.
     * 코드 맛: ""코드 냄새"" 대신 ""이 코드는 맛이 나쁨""이라는 표현이 흥미로움.
     * 게임 제어: 게임에서 추가 제어 옵션으로 사용하고 싶음. 혀로 조준하는 것이 더 빠를 수 있음. e스포츠에서 혀 제어가 주도할 가능성이 있음.
     * 보조 기술의 발전: 10-15년 전에는 왜 이런 기술이 없었는지 의문. 보조 기술에 대한 관심이 부족했음.
     * 컴퓨터 관련 부상: 컴퓨터 관련 과사용 부상을 겪는 사람들에게 도움이 될 수 있음. 건초염으로 인해 마우스 사용이 어려웠던 경험이 있음.
     * 키보드/마우스 레이어: 키보드로 마우스를 제어하는 것이 놀라운 경험이었음. Ultimate Hacking Keyboard를 사용 중임.
     * 유사 기술: 오래 전에 비슷한 기술을 읽은 기억이 있음. 아마도 이 기술일 것임.
     * 액션 스포츠: 장애인을 위한 보조 기술이 주된 용도지만, 간단한 블루투스 마우스가드로 미디어 재생 제어를 할 수 있으면 좋겠음.
     * 장애인의 강인함: 극심한 장애를 가진 사람들이 자신보다 훨씬 강하다고 느껴짐. 독립성을 자랑스럽게 여기지만, 다른 사람의 도움을 받아야 한다면 생존만 하는 느낌일 것임.
     * Brolylegs: Brolylegs가 이 기술을 보지 못해 아쉬움. MS의 Adaptive Controller와 Byowave의 Proteus Controller가 흥미로움.
"
"https://news.hada.io/topic?id=15446","EU 이사회, Chat Control 법안 투표 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     EU 이사회, Chat Control 법안 투표 철회

     * EU 의회와 참가국들이 벨기에가 제안한 논란의 채팅 통제 계획에 대한 투표를 철회하기로 결정함

  배경

     * 2022년 초 유럽 위원회가 시민들의 모든 채팅 메시지와 디지털 통신을 모니터링하는 안을 제안함
     * 이는 엔드-투-엔드 암호화 서비스에 대한 클라이언트 측 스캐닝을 포함하는 것으로, 모든 메시지를 의심 없이 검사하는 것을 의미함
     * 목표는 알려진/알려지지 않은 학대 자료와 그루밍 활동 탐지임
     * 전문가들은 이러한 조치가 많은 거짓 양성 결과를 초래할 수 있다고 경고함

  주요 내용

     * 벨기에의 새 제안은 클라이언트 측 스캐닝을 재도입하여, 사용자가 채팅 통제에 동의하지 않으면 사진, 비디오, URL을 보낼 수 없게 함
     * Signal과 같은 앱들은 이 제안이 법제화되면 EU를 떠나겠다고 위협함
     * Signal의 대표 Meredith Whittaker는 이러한 계획이 암호화를 근본적으로 훼손하고 디지털 인프라에 중대한 취약점을 도입한다고 주장함
     * Threema, Patrick Breyer, Edward Snowden 등도 이 제안에 대해 강력히 비판함

  향후 전망

     * 투표 철회로 인해 입법 과정에 불확실성이 생김
     * 7월부터 헝가리가 의장국을 맡아 협상을 진행할 예정임
     * 2026년 4월까지 회원국과 의회가 합의해야 하는 시한이 있음
     * 프라이버시 옹호자들과 디지털 권리 단체들이 계속해서 우려를 표명할 것으로 예상됨

  결론

     * EU의 채팅 통제 법안은 프라이버시와 보안에 대한 중요한 논쟁을 불러일으킴
     * 앞으로 복잡한 문제들을 다루기 위한 집중적인 협상과 잠재적 개정이 있을 것으로 예상됨

     * '한국'이(가) 이 법안에 좋아요, 도입 원해요 을(를) 했습니다.
     * '중국'이(가) 댃글을 남겼습니다. 우린 이미 솔루션이 있다. 도입하고 우리꺼 사라.

        Hacker News 의견

     * EU 의원들이 ""기밀"" 정부 정보와 경찰, 정보기관, 군사 인력을 채팅 통제에서 제외하려는 의도에 대한 유출 보고가 있었음.
     * 여름 이후 헝가리가 벨기에로부터 의회 의장직을 인수한 후 논의가 재개될 예정이며, 헝가리는 온라인 아동 성학대 방지와 관련된 법적 틀을 개발할 계획임.
     * 벨기에 미디어의 강력한 반발로 인해 이번 제안이 철회되었으며, 정치적 상황이 불안정해져 투표가 철회된 것으로 보임.
     * 벨기에의 MEP와 내무부 장관이 이번 제안에 대해 기술적 전문성 없이 ""아이들을 생각하라""는 논리로 밀어붙였다는 인터뷰가 있었음.
     * 헝가리가 EU 의장직을 맡게 되면 이 제안을 다시 투표에 부칠 가능성이 높지만, 성공 가능성은 낮을 것으로 예상됨.
     * 중요한 문제이지만, 헝가리가 의장직을 맡게 되면 7월에 다시 논의될 것임.
     * 법안이 통과되지 않도록 하려면 감시 대상에 예외를 두지 않는 것이 중요함.
     * 분산 시스템의 큰 장점은 이런 법안을 우회할 수 있다는 점임. 예를 들어, 캘리포니아에서 Mastodon 서버를 호스팅하면 EU 법을 따를 필요가 없음.
     * 유럽의 정보기관 인력 대부분이 Signal을 사용하고 있을 가능성이 높으며, Signal이 유럽에서 철수하겠다는 발표가 큰 영향을 미쳤을 것임.
     * 법안을 ""극우""와의 싸움이라는 명목으로 재조정하여 통과시킬 가능성이 있음.
     * 3개월 후에 다시 논의될 가능성이 있음.
     * 전 세계적으로 권위주의가 확산되고 있으며, 이 법안은 모든 사람을 아동 포르노 범죄 용의자로 취급하게 됨.
     * 기술 발전으로 인해 모든 사람의 발언과 행동을 감시할 수 있게 되면서 자유 민주주의 국가들이 이를 빠르게 도입하려는 경향이 있음.
     * 아동 포르노는 첫 단계로 선택된 전술적 선택이며, 이후에는 다른 목적으로도 감시가 확대될 가능성이 있음.
     * 정부 정책 입안자들이 거짓 양성 문제를 무시하는 이유는 인구 통제가 목표이기 때문임. 사람들을 불안하게 만들고, 무고한 사람들의 삶이 망가지는 이야기가 퍼지게 하여 모두를 억누르려는 의도임.
"
"https://news.hada.io/topic?id=15364","기하급수적으로 향상된 회전 기술 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        기하급수적으로 향상된 회전 기술 (2022)

3D 회전의 다양한 표현 방식

  회전 행렬

     * 회전 행렬은 3x3 직교 행렬로, 각 열이 회전 후 x, y, z 축의 위치를 나타냄.
     * 장점: 점 변환에 유용하며, 다른 선형 변환과 쉽게 결합 가능.
     * 단점: 회전 자체를 다루기에는 부적합하며, 두 회전 행렬을 더해도 회전 행렬이 되지 않음.

  오일러 각

     * 오일러 각은 x, y, z 축을 기준으로 한 세 가지 회전을 나타냄.
     * 장점: 이해하기 쉽고, 회전을 직접 정의하는 데 자주 사용됨.
     * 단점: 짐벌 락 문제 발생 가능, 특정 각도에서 회전 축이 평행해져서 회전이 불가능해짐.

  쿼터니언

     * 쿼터니언은 회전을 표현하는 데 사용되는 4차원 복소수.
     * 장점: 회전의 구면 선형 보간(slerp)을 통해 일정 속도로 최단 경로를 선택함.
     * 단점: 벡터 공간을 형성하지 않으며, 이해하기 어렵고 계산 비용이 높음.

  축/각 회전

     * 축/각 회전은 회전 축과 회전 각도로 표현됨.
     * 장점: 벡터 공간을 형성하여 더하고, 스케일링하고, 보간할 수 있음.
     * 단점: 최단 경로를 선택하지 않을 수 있음.

  지수 및 로그 맵

     * 지수 맵: 다른 회전 객체를 회전 행렬로 변환함.
     * 로그 맵: 회전 행렬을 다른 회전 객체로 변환함.
     * 2D 회전: 2D에서는 회전 축이 하나뿐이며, 지수 맵과 로그 맵을 통해 회전 행렬을 쉽게 계산할 수 있음.
     * 3D 회전: 3D에서는 벡터의 외적을 사용하여 회전 축을 계산하고, 지수 맵과 로그 맵을 통해 회전 행렬을 변환함.

GN⁺의 의견

     * 실용성: 다양한 회전 표현 방식을 이해하면 3D 그래픽스나 로봇 공학에서 회전을 다루는 데 큰 도움이 됨.
     * 복잡성: 쿼터니언과 같은 고급 개념은 초급 엔지니어에게는 어려울 수 있으므로, 기본 개념부터 차근차근 학습하는 것이 중요함.
     * 적용 사례: 게임 개발, 애니메이션, 로봇 공학 등에서 회전 표현 방식의 선택이 성능과 정확도에 큰 영향을 미침.
     * 기술 발전: 최신 그래픽스 엔진이나 물리 엔진에서는 이러한 회전 표현 방식을 효율적으로 구현하고 있어, 이를 활용하는 것이 좋음.
     * 교육 자료: CMU 15-462 강의 자료와 같은 고품질 교육 자료를 참고하면 더 깊이 있는 이해가 가능함.

        Hacker News 의견

     * Lie 그룹과 Lie 대수의 대응 관계는 매우 유용하며, 이를 통해 3D 회전 같은 추상적인 개념을 좌표계로 변환할 수 있음. 이는 엔지니어가 문제를 해결하는 데 큰 도움이 됨.
     * 긴 작업 주간을 보낸 후, 소를 회전시키는 슬라이더를 사용하는 것이 마음을 편안하게 해줌.
     * 쿼터니언이 행렬보다 직관적이지 않다고 생각함. 행렬은 벡터에 작용하고, 회전도 벡터에 작용하므로 행렬이 더 자연스러움.
     * 대학에서 배운 가장 멋진 것 중 하나는 칼만 필터 상태에 회전 행렬을 넣는 방법이었음. 이를 통해 짐벌 락을 걱정하지 않고 회전을 추정할 수 있음.
     * 블로그 글이 매우 좋았음. 저자의 프로필을 보고 나니 자신이 부족하다고 느껴졌음.
     * 소 회전 부분뿐만 아니라, 표준 회전 행렬을 계산하는 방법도 유용함. 수백만 개의 벡터를 회전시킬 때 최적화된 행렬 곱셈 파이프라인을 사용할 수 있음.
     * 여러 회전을 평균화하는 방법을 찾고 있었는데, 이 방법이 더 쉬워 보임.
     * 수학에서 추상화를 만드는 것이 소프트웨어 엔지니어링에서 추상화를 만드는 것과 비슷하다는 것을 깨달았음. 이를 통해 계산이 더 쉬워짐.
     * 많은 3D 소프트웨어가 Arcball 인터페이스를 사용하지 않는 것이 아쉬움. Arcball은 단일 드래그로 모든 회전을 수행할 수 있고, 짐벌 락이 발생하지 않음.
     * 단위 쿼터니언은 Lie 그룹이며, 모든 쿼터니언은 회전 속도를 나타냄. 쿼터니언을 이해하려면 기하학적 대수를 읽어보는 것이 좋음.
"
"https://news.hada.io/topic?id=15375","Show GN: GPTMobile: 여러 LLM 플랫폼과 동시에 채팅할 수 있는 안드로이드 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: GPTMobile: 여러 LLM 플랫폼과 동시에 채팅할 수 있는 안드로이드 앱

   최근에 사용할 수 있는 AI 모델이 많아지고 각 회사별로 유료 구독 옵션도 생긴 상황에서 모두 구독하자니 가격이 너무 부담스러웠습니다. 그래서 컴퓨터에서는 브라우저 익스텐션에 API 키를 넣어서 사용한 만큼만 저렴하게 비용을 부담하고 있었는데요, 휴대폰에도 하나 있으면 좋을 것 같아서 만들어 보았습니다.

    주요 기능

     * 여러 AI 모델과 채팅 (한 채팅방에서 여러 플랫폼에게 동시에 답변받는 기능도 지원)
     * 지원하는 플랫폼 (직접 선택 가능)
          + OpenAI: gpt-4o, 4-turbo, 4, 3.5-turbo
          + Anthropic: Claude 3 모델 전부
          + Google: Gemini 1.5 pro, 1.5 flash, 1.0 pro

   채팅내역은 앱 내부 데이터베이스(SQLite)에 저장되며, 토근 값 및 채팅 기록은 API 호출할때 외에 다른 곳으로 전송 또는 사용되지 않습니다.
   앱 언어는 안드로이드 13+ 에서 앱 별 언어 설정으로 변경 가능합니다.

    추후에는...

     * 채팅 삭제
     * 이미지, 파일 등 멀티모달 지원
     * 시스템 프롬프트 설정
     * 안드로이드 12 및 이하 버전에서 언어 설정
     * F-Droid 및 Play Store 업로드

   앱 만드는데 Jetpack Compose는 이번에 처음 써봐서 코드가 많이 서툽니다. 차츰 개선해 나가도록 하겠습니다.

   사용하고자 하는 플랫폼마다 API키를 발급 받아야 사용할 수 있다는 단점이 있지만... 많은 피드백 부탁드립니다!

   채팅 삭제 및 Claude 3.5 지원이 추가되었습니다!

   추가로 토큰 입력하실때 토큰 입력란 헬프 텍스트 클릭시 각 플랫폼 키 발급 사이트로 바로 이동합니다!
"
"https://news.hada.io/topic?id=15452","소액 재판소, Meta 고객 서비스 핫라인으로 변신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      소액 재판소, Meta 고객 서비스 핫라인으로 변신

소액 청구 법원이 Meta의 고객 서비스 핫라인이 된 이유

  사람들이 법원을 이용해 계정을 복구하려는 마지막 시도

     * Ray Palena는 뉴저지에서 캘리포니아로 비행기를 타고 법정에 출석했음
     * 8개월 동안 약 $700의 비용을 들여 페이스북 계정을 복구했음
     * Meta의 고객 서비스 부족으로 인해 많은 사용자가 법원을 통해 문제를 해결하려고 함

  왜 소액 청구 법원인가?

     * Meta는 계정을 잃은 사용자를 도울 충분한 고객 서비스 인력이 부족함
     * 자동화된 도구는 종종 사용자를 막다른 골목으로 이끌거나 비활성 이메일로 연결됨
     * 일부 사용자는 해커를 고용하거나 Oculus 헤드셋을 구매해 문제를 해결하려고 함
     * Reddit 포럼에서 소액 청구 법원 접근법이 인기를 끌고 있음

  소액 청구 법원의 장점

     * 소액 청구 법원은 법적 지식이 없는 사람들에게 더 접근 가능함
     * 소액 청구 법원의 접수 비용은 보통 $100 이하임
     * 법정 절차가 간단하고 빠르게 진행됨

  소액 청구 법원의 한계

     * 법적 절차를 처음 접하는 사람들에게는 여전히 어려움이 있음
     * 각 지역마다 소액 청구 법원의 규칙이 다름
     * Meta는 소액 청구 법원에서도 법적 자원을 동원해 대응함

  사례 연구: Valerie Garza

     * 마사지 사업을 운영하는 Valerie Garza는 해킹으로 인해 페이스북과 인스타그램 계정을 잃었음
     * 소액 청구 법원에서 Meta를 상대로 승소하고 $7,268.65의 손해 배상을 받았음
     * Meta는 판결을 뒤집으려 했지만 실패함

  사례 연구: Ray Palena

     * Ray Palena는 페이스북 계정을 복구하기 위해 소액 청구 법원에 소송을 제기했음
     * 법정 출석 직전에 계정 복구 링크를 받았음
     * Meta는 법정에 나타나지 않았고, Palena는 소송을 보류 중임

  GN⁺의 의견

     * 고객 서비스의 중요성: Meta와 같은 대형 플랫폼은 더 나은 고객 지원 시스템을 구축할 필요가 있음. 고객의 불만을 신속히 해결하지 않으면 법적 문제로 이어질 수 있음.
     * 소액 청구 법원의 역할: 소액 청구 법원은 일반 사용자에게 법적 문제를 해결할 수 있는 중요한 도구가 됨. 하지만 법적 지식이 부족한 사용자에게는 여전히 어려움이 있음.
     * 법적 대응의 복잡성: Meta와 같은 대기업은 소액 청구 법원에서도 법적 자원을 동원해 대응함. 이는 일반 사용자에게 큰 부담이 될 수 있음.
     * 대안적인 접근법: 사용자들은 다양한 방법을 시도해 계정을 복구하려고 함. 이는 Meta의 고객 서비스가 얼마나 부족한지를 보여줌.
     * 법적 절차의 간소화 필요성: 소액 청구 법원의 절차를 더 간소화하고 사용자 친화적으로 만들 필요가 있음. 이는 더 많은 사람들이 법적 문제를 해결하는 데 도움을 줄 수 있음.

        Hacker News 의견

     * 소액 청구 법원: 소액 청구 법원은 회사의 주의를 끌 수 있는 방법임. 페이스북에 소환장을 전달하는 데 어려움을 겪었다는 사실이 놀라움.
     * 고객 서비스 자동화: 고객 서비스를 자동화하려는 시도는 위험하며, 역사적으로 실패해왔음. LLMs(대형 언어 모델)도 이 문제를 해결하려다 실패할 것임.
     * 주 법무장관의 역할: 수많은 사람들이 주 법무장관 사무실에 고객 서비스 문제로 연락함. 예상보다 훨씬 많은 사람들이 도움을 요청함.
     * 소비자 권리: 인터넷 시대에 소비자 권리가 약화됨. 소프트웨어 제품에 대한 환불 정책이 부족함.
     * 메타 지원 사칭: 페이스북에는 메타 지원을 사칭하는 피싱 그룹이 많음. 메타는 이를 알고 있지만, 사용자 참여를 높이기 위해 방치함.
     * 인스타그램 문제: 인스타그램에는 스팸 광고가 많고, 신고해도 대응이 미흡함. 알고리즘이 불공정하게 작동함.
     * 법적 시스템 이용: 법적 시스템을 이용하는 사람들을 존경함. 큰 회사들이 고객 서비스를 법원 시스템으로 대체하는 것은 문제임.
     * 페이팔 문제: 페이팔 계정 보류 문제도 메타와 유사함.
     * 내부 직원 도움: 메타 직원과 친분을 쌓는 것이 계정 복구에 가장 효과적임. 기본적인 보안 조치를 따르지 않는 사용자들이 많음.
     * 메타의 사용자 가치: 메타의 사용자 수가 너무 많아 모든 사용자를 도울 수 없음. 프리미엄 지원 계정이 해결책이 될 수 있음.
"
"https://news.hada.io/topic?id=15456","메시지 큐 기반 아키텍처가 요즘 인기가 떨어지는 이유는 뭔가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  메시지 큐 기반 아키텍처가 요즘 인기가 떨어지는 이유는 뭔가요?

     * 2010년초까지만 해도 MQ기반 분산 시스템 구축 얘기가 많았는데 요즘은 글들이 별로 없음
     * 생각하는 몇가지 이론들은 다음과 같은데, 이중 하나일지 다른 분들 생각은 어떤지 궁금함
          + Redis가 대부분의 케이스 및 캐싱까지 처리해서 더 이상 별도의 메시지 브로커 운영이 쓸모없어짐. Kafka는 정말 대규모로 가버림.
          + DB(광범위하게 봤을때)가 대규모 처리를 훨씬 잘하게 되면서, ""일시적인""처리들을 메인 저장소에서 처리하게 됨
          + MQ 기반 아키텍처가 기대만큼 잘 작동하지 않는 다는 것을 알아버려서 이제 다른 방식을 사용함
          + 사실은 이제 MQ 기술이 성숙기에 접어들어서, 사람들이 관련 글을 쓸만큼 흥미롭지는 않음. 하지만 여전히 널리 사용되고 있음

hnthrowaway_99

     * 2000년대 후반부터 2010년 초반의 많은 ""인기"" 아키텍처가 결국 ""당신은 구글이 아님. 당신 회사는 구글이 절대 될 수 없음"" 사실을 깨닳고 사라졌음
     * 그 시기에는 ""성공한 대기업이 구축한 방식으로 구축"" 하려는 열망이 컸음
     * 하지만 그 이후로 많은 사람들이 99%의 기업에게는 복잡성이 필요하지 않다는 것을 깨달았음
     * 하드웨어와 표준 데이터베이스가 훨씬 더 좋아지면서 이러한 ""Scalability Trick""이 필요한 기업은 점점 더 줄어들고 있음
     * ""이 모든걸 Postgres로 하면 안 되는 이유가 있을까요?""의 내 기준은 10년전 보다 훨씬 높아졌음
     * 이 댓글에 달린 댓글들
          + 이제 적절한 비용으로 사용가능한 훨씬 큰 싱글 머신이 생김. 예전엔 소규모 클러스터가 필요했지만, 이제 싱글 시스템으로도 다양한 워크로드를 많이 수용 가능
          + 솔직히 말하면, 난 구글에서 큐를 제거하는 여러개의 프로젝트에 참여했었음. 그러니 아마 그 이상일지도(인기가 떨어진 것 이상)

biglain

     * 냉소적이지만, 내 생각에 MQ 아키텍처와 이에 대한 블로깅은 ""Resume Driven Development""였음. 실제로는 모노리스를 넘어 확장할 필요없이 단일 노트북에서 실행가능한 일을 하는.
     * 이 사람들이 아마도 한달에 수천만원씩 AWS 비용을 내는 악몽같은 Microservice 재앙을 구축하는 사람들이었고
     * ""실제 비즈니스 문제를 실용적인 방식으로 해결하는 것보다, 기술적인 업적을 쌓는 것을 경력의 우선순위로 삼는 사람들""이 요즘은 AI에 대해 Hyping하며 블로그에 글을 올리고 있음

tuckerconnelly

     * 최근 마이크로서비스가 너무 복잡하고 중복 코드가 많아서 모놀리스로 전환했음. 마이크로서비스가 없으면 메시지 큐의 필요성이 줄어듦
     * 비동기 작업의 경우 한 프로젝트에 RabbitMQ를 사용했는데, 너무 오래되고 과도하게 설계된 느낌이 들었음
     * 그리고 그 주변의 많은 도구(Celery)는 redis(bullmq)를 중심으로 구축된 최신 도구만큼 좋지도 않았음
     * 다단계의 DAG 스타일 프로세스의 경우, 나는 가능하면 하나의 큰 작업에서 모든 것을 처리하거나 작은 수의 작업으로 나누어서 처리하는 것을 선호
     * 정말 DAG가 필요하다면 이를 위해 특별히 제작된 도구(Airflow)가 있음. 하지만 문제를 디버깅하기 어렵다고 들었기 때문에 가급적 피하는 것이 좋음
     * 나는 Redis의 멀티노드 아키텍처가 터무니없이 지나치게 복잡해서 확장에 문제가 있어 단일 노드를 고수중. 하지만 수작업으로 샤딩하는 것은 나한테는 괜찮고 잘 작동함
     * 이글에 대한 kypro의 댓글
          + 내 경험상 모놀리스는 복잡성을 줄이는 것이 아니라 복잡성을 이동시킬 뿐
          + 모놀리스의 가장 큰 문제점은 도메인 간의 관심사가 명확하고 명시적으로 분리되어 있지 않기 때문에 시간이 지나면 모놀리스 코드베이스가 고도로 상호 연결된 스파게티 코드의 난장판으로 변하기 쉽다는 점
          + 특히 많은 개발자와 함께 대규모 프로젝트를 구축하는 경우, 자신이 다루는 코드의 도메인 복잡성을 모두 이해하지 못하는 개발자가 많다면 더욱 그러함
          + 모놀리스는 개발자가 적은 소규모 프로젝트에 적합하지만, 그렇지 않은 경우에는 몇 년 안에 대부분 모놀리스를 구축한 것을 후회하게 될 것
          + 또한 중복된 코드 포인트에 대해서도 동의하지 않음. 같은 언어를 사용하고 프로젝트 간에 패키지를 공유한다고 가정할 때 왜 그것이 큰 문제가 되는지 모르겠음
          + 어쨌든 마이크로 서비스 작업을 하면서 이런 문제는 제가 겪어본 적이 없음
          + 또한 마이크로서비스가 평균적으로 모놀리스보다 더 복잡한지에 대해서도 의문을 제기하고 싶음
          + 내가 마이크로서비스 아키텍처에서 가장 좋아하는 점은 개별 마이크로서비스를 이해하고 기여하기가 얼마나 간단한가 하는 점
          + 마이크로서비스의 아키텍처와 프로비저닝은 더 복잡할 수 있지만, 마이크로서비스를 작업하는 개발자의 입장에서는 모노리스에 비해 훨씬 더 간단하게 작업할 수 있음

democracy

     * 이 생각이 맞는 것 같음 : ""MQ 기술은 이제 막 성숙해져서 글을 쓸 만큼 흥미롭지는 않지만 여전히 널리 사용되고 있음""
     * 메시징 기반 아키텍처는 매우 인기 있음
     * 이 글에 대한 댓글들
          + casper14 : 동의함. 그냥 하나의 도구가 되었음. 더 이상 클라우드에서 가상 머신을 사용하는 방법에 대해 글을 쓰는 사람이 아무도 없는 것처럼
          + bwhaley : 이게 바로 정답. 대규모로 실행되는 거의 모든 분산 시스템은 어느 정도 용량으로 메시지 큐를 사용한다고 장담할 수 있음
          + ipsum2 : 이게 유력함. 예전에는 앵귤러를 리액트로 다시 작성하는 것에 대한 포스팅이 인기가 있었지만, 지금은 모두들 그냥 리액트를 사용하거나 리액트를 vue로 리라이팅하는 것에 대한 글을 씀

busterarm

     * 인기 없는 답변을 주려고 해
     * 큐, 스트림 및 Pub/Sub는 대부분의 엔지니어가 잘 이해하지 못하는 개념
          + 언제 필요한지 모르고, 제대로 사용하는 방법도 모르며, 엉뚱한 용도로 사용함
          + 나는 여전히 위의 모든 것(SQS/SNS/RabbitMQ/Kafka/Google Pub/Sub)으로 작업하고 있음
     * 나는 북미의 상위 3~4개 학교 출신의 가장 ""뛰어난"" 엔지니어들만 고용하는 회사에서 일하고 있으며, 거의 모든 엔지니어에게 이것이 첫 직장임
     * 우리 엔지니어들은 다음과 같은 미친 짓을 해왔음:
          + RabbitMQ에서 수만 개의 100MB 메시지를 순식간에 큐에 올려놓고 왜 폭파되는지 궁금해함
          + 이렇게 하지 말라는 모든 경고에도 불구하고 일반적으로 RabbitMQ에서 상당히 큰 용량의 메시지를 보냄
          + 2024년 최신 RabbitMQ 버전에서 새 프로젝트를 시작하고 클래식 큐를 사용하려고 함
          + 복제 정책 없이 쿼럼 대기열을 만들거나 말 그대로 HA를 만들기 위해 아무 것도 하지 않음
          + 관리 사용자가 게스트/게스트인 상태에서 인터넷에 클러스터를 노출함
          + 조직의 가장 고위급 아키텍트가 새로운 아키텍처 패턴을 선언하고, 조직 전체 회의를 개최하고 데모를 함
               o 메시지를 대기열에 집어넣은 다음 백채널을 만들어 두 번째 소비자가 대기열에 있는 메시지를 온디맨드 처리할 수 있도록 하는 새로운 미덕/패턴을 찬양함 (그리고 더 이상 대기열이 아니게 함)
               o 그리고 나를 제외하고는 아무도 ""왜 순서대로 처리해야 하는 메시지를 대기열에 넣는가?""라고 말하지 않았고, 그 '패턴'이 자리를 잡았음!
          + Kafka를 기본 메시지 큐로 사용하기
          + 중앙 데이터센터에서 전 세계에 분산된 데이터센터로 데이터를 전송하고, 각 대상 데이터센터가 업데이트된 객체를 수신했음을 확인할 때까지 객체에 대한 글로벌 잠금과 모든 작업을 수행. 데이터가 AJAX 요청과 함께 전송되었으므로 이 프로세스는 비동기식이라고 주장
     * 결과적으로 사람들은 그다지 대단한 일을 할 필요가 없는데도 여전히 잘 해내고 있음. 따라서 도구는 오용, 남용, 과소 사용되기도 함
     * 잘 사용되고 있는 곳에서는 아마 그런 얘기를 듣지 못할 것
     * 중요한 사실: 우리 조직에는 엔지니어 1명당 30개가 넘는 마이크로서비스가 있음. 제발 날 죽여줘. 거대한 모노레포에 수천 개의 마이크로서비스가 있는 다른 조직에서 일하느니 말 그대로 커트 코베인이 되고 싶음
     * 이 글에 대한 댓글들
          + zug_zug : 실제 데이터를 통해 이 이론을 뒷받침해 보면
               o 뉴욕 에서 Akka(스칼라의 이벤트 기반 큐잉)를 사용하는 스타트업에 근무 했었음
               o 왜 그랬을까? 이전 직장의 관리자가 이 방법으로 ""모든 것이 느렸을 때"" 회사를 ""구했다""고 해서 새 직장에서 이를 의무화했기 때문일까?
               o 큐잉이 필요했던 업무는 무엇이었을까? 웹사이트를 통해 직원들의 401k를 보여주고, 자산 구성을 조정하도록 하고, 하루에 수백 통의 이메일을 발송한 것이 전부
               o 예상대로 사람들은 401k 웹사이트에 로그인하는 경우가 거의 없었음
               o 그곳에서 일한 지 1년 정도 지나서 나는 서버가 계속 잘못 구성되어 있었고 기본적으로 웹 요청에 대한 동시성이 0이라는 사실을 깨달았음
               o (2개의 프로덕션 서버가 항상 필요한 모든 트래픽을 처리하고 있었기 때문에 이를 인지하지 못함)
               o 결국 불필요하고 불필요한 복잡성을 가중시킨다는 이유로 Akka를 제거
               o 지난 달에 이 회사는 현금 회수 옵션으로 또 다른 펀딩 라운드를 진행했는데, 분명히 가치가 올라갔고 여전히 잘하고 있는 것 같음
          + scary-size : 이건 정말 ""뛰어난"" 엔지니어만 고용하는 것 같지는 않은데?
          + roncesvalles : 디자인 리뷰 프로세스가 없는 것 같아. 그리고 나라면 유명 대학 졸업자보다, 이름 없는 대학교 출신 2-5년차 개발자를 뽑을 것 같아. 소프트웨어 엔지니어가 커리어의 첫 5년 동안 배우고 성장하는 양은 엄청나며, 아마도 나머지 커리어를 합친 것보다 더 많을 것.

burutthrow

     * MQ는 꽤나 상품화(commoditized)되었다고 생각함
     * Confluent나 RedPanda 또는 MSK를 서비스로 구매하면 Kafka를 직접 관리할 필요가 없음
     * 변경 데이터 캡처(CDC)도 매우 훌륭하고 메인스트림이 되었음. RDBMS에 데이터를 쓴 다음 변경 데이터를 캡처하여 다른 시스템으로 전파하는 것은 비교적 쉬움
     * 예를 들어, 메시지 큐는 CDC 시스템이 메시지를 전달하는 데 사용하는 백본에 불과하기 때문에 이러한 패턴은 사람들이 카프카에 대해 쓰지 않는다는 것을 의미
     * 이러한 아키텍처는 분명히 여전히 존재하며 대부분 조직의 제약 조건을 충족함
     * Kafka와 같이 한번 쓰고 여러 번 읽는 큐가 있는 경우 조직의 다른 부분에 API를 노출하는 것. 많은 회사에서 이 패턴을 사용하여 여러 팀 간에 데이터를 섞어 사용
     * 많은 마이크로서비스를 소유하고 있는 소규모 팀은 이력서 중심의 개발자처럼 느껴지지만, 하지만 엔지니어가 100명 이상인 회사에서는 이 패턴이 합리적

angarg12

     * MQ는 분산 시스템 도구 상자에 있는 도구임. 적절할 때는 훌륭하게 작동
     * 당신의 이론이 정말 맞다면 난 이거라고 생각함 ""사람들은 보통 새롭고 반짝이는 것에 대해 블로그 포스팅을 작성함""
     * 나는 개인적으로 디자인에 항상 큐를 사용하며, 특히 디커플링이 높은 서로 다른 시스템 간에 데이터를 전송할 때 큐를 사용
     * 내가 겪은 유일한 고통은 업스트림 시스템에서 7일 동안의 데이터를 다시 채워서 오래된 요청으로 큐가 막혔을 때였음
          + 정상적으로 실행했다면 모든 데이터를 처리하는 데 100시간 이상이 걸렸을 것이고, 새로운 데이터의 지연 시간도 엄청나게 늘어났을 것
          + 해결책은 큐를 수동으로 제거하고 누락된 최신 데이터를 수동으로 다시 채우는 것이었음
     * 바인딩되지 않은 큐 크기에 주의해야 하지만 여전히 훌륭한 도구라고 생각

rossdavidh

     * MQ는 Gartner Hype Cycle 에서
          + '부풀려진 기대의 정점(Peak of inflated expectations)'을 지나고
          + '환멸의 골짜기(trough of disillusinment)'를 지나
          + '깨달음의 비탈길(Slope of Enlightment)' 심지어는 '생산성의 고원(plateau of productivity)'으로 향해가고 있음

robertclaus

     * ""분명히 우리 모두는 여전히 메시지 큐와 워커를 사용하고 있으며, 단지 그것에 대해 글을 쓰지 않을 뿐""이라는 댓글이 마이크로서비스와 실질적인 확장성에 대한 논쟁 때문에 뒤쪽에 묻혀 있다는 점이 매우 흥미로움
     * 이 댓글을 읽는 주니어 엔지니어는 더 이상 웹 서버의 과중한 연산을 워커에 떠넘겨서는 안 된다는 잘못된 인상을 받을 수 있음

pm90

     * 그 기술이 지루해졌기에 관련 블로그 글이 줄어들었음
     * 이건 좋은 것임. 예를 들어 RabbitMQ 공식 문서가 훨씬 더 좋고 매우 유용함
     * 사람들은 Postgres/MySQL을 사용하는 것처럼 이를 주력으로 사용함
     * 아키텍처 등을 설계하는 데 놀라운 기술도 필요하지 않음
     * 난 지루한 소프트웨어를 사랑함 ""I love boring software""

slowmovintarget

     * 이러한 아키텍처의 대부분은 기업 데이터 센터에서 실행되었음
     * 클라우드로 전환 후 소규모 상태 비저장 서비스를 만들면서(SPA의 등장) 복잡한 단계별 이벤트 중심 시스템이 덜 필요해짐
     * 예를 들어 AWS에서는 SQS와 약간의 SNS를 사용하거나 몇 가지에 Kinesis를 사용하면 충분. 여기서는 MQ가 더 이상 설계의 중심이 되지 않음
     * MQ 기반 아키텍처는 데이터 처리에는 좋지만 대화형 웹 사이트에는 적합하지 않으며, 대부분의 사람들이 대화형 웹 사이트를 구축한다면 선택의 여지가 없어 보임
     * 나는 여전히 데이터 처리를 위한 이벤트 시스템을 설계함(특히 새로운 사실이 있지만 ""틀렸거나"" 이전 시점에 다른 정보를 알고 있어야 하는 불변의 비즈니스 데이터의 경우)
     * 하지만 대부분의 앱에서는... 필요하지 않음

mannyv

     * 우리 전체 백엔드는 큐 기반임
     * 비동기식이고 빠른 응답 시간이 필요하지 않은 경우 큐를 사용할 것. 쉽고 안정적이며 큐가 람다를 구동할 수 있음
     * 또한 큐를 사용하면 메트릭과 성능 데이터를 더 쉽게 수집 가능.
          + 부하가 많을 때는 큐에 최대 수백만 개의 메시지까지 부풀어 올랐다가 시간이 지나면서 줄어들게 되고,
          + 또는 원하는 대로 수백 개의 람다를 생성하여 모든 메시지를 처리할 수도 있음

vishnugupta

     * 내 경험에 비추어 볼 때 MQ는 추상화 되어 버린거지, 사라지지는 않았음
     * 예를 들어 SQS + 폴링에 대한 대기열은 서버를 적게 호출하는 프로세스가 되었음. 어딘가에 메시지 큐가 있지만 노출되지 않았을 뿐
     * SQS보다 한 단계 더 추상화된 AWS SNS는 기능이 매우 풍부해져서 사실상 SQS를 대체할 수 있게 되었음
     * 또한 스트리밍은 매우 안정적인 기술이 되었기 때문에 큐를 스트리밍 파이프로 사용하던 사용 사례는 스트리밍 전용으로 마이그레이션 되었음

memset

     * 람다(클라우드 펑션)이 더 대중화되고 여러 플랫폼에서 지원되기 때문 일 수 있음
     * 무언가를 큐에 추가하면 결국 큐에서 빼내고 처리해야 함. 람다는 한 번의 호출로 이 작업을 수행. 또한 워커를 실행하거나 확장할 필요가 없음
     * Kafka는 임시 데이터 저장소로 사용되고, 스트림에서 수집하는 데 큰 생태계가 있기 때문에 계속 인기를 누리고 있다고 생각
     * 나는 개인적으로 큐를 많이 사용하며 오픈 소스 SQS 대안을 구축하고 있음. 오픈 소스 람다 대체도 유용할지 궁금

liampulles

     * ""이제 MQ 기술이 성숙기에 접어들어서, 사람들이 관련 글을 쓸만큼 흥미롭지는 않음. 하지만 여전히 널리 사용되고 있음""
          + 이게 맞음. 간단한 Pub/Sub 메시징을 사용하는 비동기 통신의 간단한 사용 사례는 매우 유용하고 사용하기가 너무 어렵지 않다고 생각
     * 우리(개발자 커뮤니티로서)는 이벤트 소싱, 복잡한 네트워크 및 불필요한 규모 구축을 극복했음. 즉, 우리는 과대광고 주기를 지났음
     * 우리 팀은 비동기 Pub/Sub 및 동기 Request/Response에 NATS를 사용
          + 이는 명령 기반 모델이며 우리가 보낸 모든 메시지가 포함된 거대한 로그 테이블을 가지고 있음
          + 스키마와 이러한 메시지의 사용은 우리 팀 내부적이며, 사용 후 NATS에서 삭제됨
          + 우리는 at-least-once delivery를 하며 메시지 핸들러는 멱등성을 가질 것으로 예상함
     * NATS의 잘못된 구성으로 인해 메시지가 재생되거나 메시지가 누락되는 문제가 한두 가지 있었지만 대체로 매우 성공적이었고, 우리는 3명으로 구성된 개발팀이었음
     * 내 생각에는 Kubernetes와 같은 것임. 핵심만 지키고 영리하게 노력하지 않으면 잘 작동함

   큐가 필요한 적절한 상황이 있습니다. 그러나 대부분의 규모와 사용 형태에서는 큐를 사용하거나 클러스터를 구성해서 동작시키는 것이 복잡도 상승과 성능면에서는 크게 장점이 없는 경우가 많습니다. 확장성과 대규모 데이터를 고려하여 구성된 큰 기업들이 자랑하는 복잡한 구조가 나의 시스템에 적절해질 시점은 도래하지 않을 수 있습니다.

   기술적으로 매력도가 높은 신기술과 멋진 구조도 현실적인 문제를 고민하여 적절한 솔루션을 선택하는 것이 필요합니다. 대부분의 경우에는 처리할 큰 데이터도 없고, PostgreSQL로 처리 가능한 경우도 많습니다.

   저희는 이런 문제를 인식하고 단순한 구조에서 TB 단위의 데이터를 단일 노드에서 처리 가능한 DB를 개발하고 있습니다. 조금은 조심스럽지만, 또 다른 옵션으로 살펴보시는 것을 권해 드립니다.
   판례 데이터를 빠르게 검색 가능한 상태로 만들기

   대중적으로 절차지향은 이해하기 쉬우나 MQ 방식은 바로 와 닿지 않거나, 구조를 이해 하는데 어려움이 있다고 생각 합니다. 회사는 일반적으로 지식 수준이 동일 하지 않은 경우가 더러 있는데, 이때 잘못된 지식으로 MQ 를 쓰면 지옥이 되는 것 같습니다.

   이거는 MQ 뿐만 아니라 대부분 어느 정도 지식을 요구 하는 기술들이 전반적인 교육 없이 적용 했을 때 늘 발생하는 문제라고 생각 합니다.

   PHP는 MQ가 사실상 필수...

   뜨끔!

   지금 Toy Project로 Quee라는 이름이 들어간 것을 진행하고 있는데 말입니다.

   솔직히 99%의 우리나라 내에서만 서비스할꺼면 다 필요없다고 봅니다..

   서비스 범위 보다는 서비스 성질/얼마나 비용 효율을 따져야 하느냐가 중요하지 않을까요?

   한국이 특히 메시지큐가 쓸모없는 이유가, 그 어떤 언어를 쓰든 무조건 절차지향입니다. 한 곳에 몰아서 절차적으로 수행해야 합니다. 안그러면 업무 꼬이니까요. 카뱅 아니고서야 특히 금융권은 뭐 말할것도 없고, 굳이 금융권 아니라도 대기업도 그렇고 전반적으로 백엔드는 무조건 절차지향입니다. 메시지 큐니 뭐니 낄 틈이 없어요. 끼는게 비효율적이죠. 그러니 한국에서는 비동기와 동시성은 재앙이라고 하는 거죠. 물론 프론트엔드는 뭔 짓을 해도 되면 그만이지만, 백엔드는 그랬다간 뭐...

   아무래도 결정을 내리는 절차가 수직적이기 때문에 “절차지향적”인 것이 더 선호 되거나 적합하게 여겨지는 것일까요?
   만약 각 부서와 팀이 느슨하게 조직되어 있다면 절차지향적이지 않은 아키텍쳐가 좀 더 원활히 동작하고, 그래서 이런 큐들의 응용이 더 잘 동작할 수 있는 것일지 궁금하네요.

   이력서 주도 개발이 이런 유행 현상을 관통하는 키워드인 것 같네요

   이야 명언이네요 이력서 주도 개발이라..

   자매품으로 설레발 주도 개발도 있습니다
"
"https://news.hada.io/topic?id=15361","Perplexity AI는 User Agent에 대해 거짓말하고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Perplexity AI는 User Agent에 대해 거짓말하고 있음

     * 작성자는 어제 서버에서 AI 봇을 차단하는 내용의 글을 썼고, 오늘은 MacStories를 위해 동일한 작업을 수행했음
     * 설정이 완료된 후 Federico는 Perplexity라는 사이트에서 MacStories의 특정 게시물을 인용할 수 있었음
     * 작성자는 자신의 사이트에서 다음과 같은 변경 사항을 적용함:
          + 3월 30일: PerplexityBot 등의 봇을 robots.txt에서 차단하기 시작함
          + 6월 14일: nginx에서 서버 측 차단을 추가함. 일치하는 항목은 모두 403 Forbidden 응답을 반환함
     * 작성자는 모든 AI 회사가 robots.txt를 무시한다고 가정하고, 3월부터 요청해 왔지만 효과가 없었을 것으로 추정함
     * 작성자는 AI 봇 차단에 관한 글을 차단 조치가 적용된 후에 게시했기 때문에, User Agent가 전송된다고 가정하면 Perplexity는 해당 사이트에 접근할 수 없어야 함
     * 그러나 Perplexity에 해당 게시물에 대해 질문했을 때, 추측만으로는 알 수 없는 세부 정보를 포함한 완벽한 요약을 받음
     * 작성자는 Chrome의 User Agent 스푸핑만 테스트했기 때문에 잘못 설정했을 수도 있다고 생각했음
     * 하지만 Perplexity가 요청에 사용한다고 주장하는 User Agent인 PerplexityBot을 사용하여 코드를 테스트했을 때, 예상대로 403 응답을 받아 nginx 설정에는 문제가 없었음
     * 작성자가 Perplexity AI에게 robots.txt에도 불구하고 어떻게 사이트에 접근할 수 있었는지 물었을 때, Perplexity AI는 robots.txt에 의해 차단된 콘텐츠를 크롤링하거나 액세스할 수 있는 기능이 없으며, 제한된 콘텐츠에 접근하거나 요약하는 것은 윤리적이지 않다고 응답함
     * 그러나 Lewis는 Perplexity가 PerplexityBot을 포함하지 않은 다음과 같은 User Agent 문자열을 사용하고 있음을 확인함:
Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.3

     * 작성자도 액세스 로그를 활성화한 후 Perplexity에 질문을 했을 때, Lewis와 동일하게 User Agent에 사용자 지정 User Agent가 포함되어 있지 않음을 확인함
     * Perplexity는 콘텐츠를 스크랩하기 위해 헤드리스 브라우저를 사용하고 있으며, robots.txt를 무시하고 올바른 User Agent 문자열도 전송하지 않고 있음
     * Perplexity의 IP 범위에 이러한 헤드리스 브라우저가 없는 것으로 보이기 때문에 IP 범위를 차단할 수도 없는 상황임
     * 작성자는 자신의 게시물이 AI 회사에 무료로 수집되는 것을 원하지 않지만 더 이상 할 수 있는 조치가 없음
     * 작성자는 Perplexity의 Discord에 가입하여 소개 채널에서 자신을 소개하고 버그 채널에 버그를 제출함
     * 다음 단계로 GDPR 요청을 고려하고 있지만 확실하지 않음.

  GN⁺의 의견

     * AI 봇 차단의 중요성: AI 봇이 사이트의 콘텐츠를 무단으로 사용하는 것을 방지하기 위해서는 적절한 차단 방법이 필요함.
     * 사용자 에이전트 확인: AI 봇이 올바른 사용자 에이전트를 사용하지 않는 경우, 이를 확인하고 차단하는 것이 중요함.
     * robots.txt 파일의 한계: 많은 AI 봇이 robots.txt 파일을 무시할 수 있으므로, 추가적인 서버 측 차단 방법이 필요함.
     * 개인 정보 보호: GDPR과 같은 규정을 통해 AI 봇의 무단 접근을 방지할 수 있는 방법을 고려해야 함.
     * 대체 솔루션: 다른 AI 봇 차단 솔루션이나 보안 도구를 사용하여 사이트를 보호하는 것도 좋은 방법임.

        Hacker News 의견

     * LLM이 내 데이터를 학습하지 못하게 하는 것은 가능해야 하며, Perplexity는 이를 쉽게 차단할 수 있도록 해야 함.
     * Perplexity가 실시간 웹 쿼리를 통해 내 웹사이트 데이터를 사용자에게 제공하는 것을 금지하는 것은 위험한 영역으로 들어가는 것임.
     * 광고 차단기, 리더 모드, 화면 읽기 프로그램 등도 Perplexity와 같은 방식으로 작동하며, 이를 금지하는 것은 많은 도구에 영향을 미칠 수 있음.
     * 웹사이트 소유자가 DRM을 사용해 웹사이트를 특정 방식으로만 표시하도록 강제하는 것은 원하지 않음.
     * Perplexity 사용자 에이전트가 적용되는 시점을 오해한 것 같음.
     * 웹사이트 소유자가 사용자가 어떤 브라우저를 사용할지 결정할 수 없으며, Perplexity도 예외가 아님.
     * Perplexity가 사용자 에이전트 없이 대량으로 데이터를 수집하는 것은 문제가 있으며, 이를 중단해야 함.
     * AI 회사가 웹사이트를 스크래핑해 모델을 학습하는 것과 사용자가 요청한 웹 페이지를 가져오는 것은 구분되어야 함.
     * Perplexity가 다른 사람의 콘텐츠를 가져가서 사용하는 것에 대한 문제를 다룬 기사 링크 제공.
     * Perplexity의 크롤러는 robots.txt를 존중해야 하며, 사용자 에이전트는 크롤러가 아니므로 이를 따를 필요는 없음.
     * AI 회사가 내 웹사이트를 스크래핑해도 상관없으며, 그들이 잘못된 데이터를 가져가도록 놔두겠음.
     * 웹 스크래핑을 해본 사람이라면 사용자 에이전트에 대해 거짓말하는 이유를 알 것임.
     * Perplexity CEO가 Google과 OpenAI를 비판했지만, 자신들도 robots.txt를 따르지 않고 사용자 에이전트를 숨긴 것이 드러남.
     * AI 회사가 내 콘텐츠를 무료로 가져가는 것을 막기 위해 보이지 않는 프롬프트 인젝션을 사용할 수 있음.
     * Perplexity가 자발적인 웹 표준을 따르지 않는 것이 거짓말이라고 할 수는 없음.
"
"https://news.hada.io/topic?id=15370","Pinterest가 6명의 엔지니어로 1,100만 사용자까지 확장할 수 있었던 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Pinterest가 6명의 엔지니어로 1,100만 사용자까지 확장할 수 있었던 방법

    Pinterest의 확장 여정

   Pinterest의 확장 과정은 네 단계로 나뉩니다:
    1. 자아 발견의 시대: 소규모 엔지니어 팀이 신속한 프로토타입 제작과 진화하는 제품 요구 사항을 관리.
    2. 실험의 시대: 사용자 수의 급격한 증가로 빠른 확장이 필요했으나, 복잡하고 취약한 시스템을 초래.
    3. 성숙의 시대: MySQL, Memcache, Redis와 같은 성숙하고 확장 가능한 기술을 사용하여 아키텍처를 단순화.
    4. 회귀의 시대: 적절한 아키텍처를 갖춘 후, 수평적으로 확장하여 성장 지속.

    핵심 기술

   Pinterest는 신뢰성, 이해하기 쉬움, 확장성을 중시하는 기술을 우선시했습니다:
     * MySQL: 안정적이고 유지보수 용이한 관계형 데이터베이스.
     * Memcache: 자주 액세스되는 데이터를 메모리에 캐싱하여 데이터베이스 읽기를 오프로드.
     * Redis: 다양한 데이터 구조를 처리할 수 있는 유연한 데이터 저장소.
     * Solr: 빠르게 사용 가능한 검색 플랫폼.

    데이터베이스 확장: 클러스터링 vs 샤딩

   Pinterest는 데이터베이스를 분산 처리하기 위해 두 가지 접근 방식을 고려했습니다:

      클러스터링

     * 데이터가 도착하면 최적의 노드를 결정하고 데이터를 여러 노드에 복제.
     * 자동 확장, 설정 용이, 데이터 가용성 보장 등의 장점이 있으나 복잡성, 성숙도 부족, 업그레이드 어려움 등의 단점 존재.

      샤딩

     * 데이터를 작은 청크로 나누어 각 청크를 독립된 서버에 배치.
     * 단순한 아키텍처, 독립적인 확장, 명확한 데이터 소유권 등의 장점이 있으나 데이터베이스 수준의 조인과 트랜잭션이 불가능, 애플리케이션 복잡성 증가 등의 단점 존재.

   Pinterest는 클러스터링에서의 부정적 경험으로 인해 샤딩을 선택했습니다.

    샤딩 아키텍처로의 전환

   Pinterest는 기능 동결 동안 단계적으로 샤딩으로 전환했습니다:
    1. 조인 제거: MySQL 조인을 모두 제거하고 데이터 비정규화 및 캐싱 활용.
    2. ID 기반 샤딩: 64비트 ID 기반으로 샤딩하여 데이터 라우팅 단순화.

    샤딩의 단점 및 해결책

     * 마이그레이션 스크립트: 데이터를 샤딩 인프라로 전송하는 과정에서 시간이 많이 소요.
     * 애플리케이션 로직: 데이터베이스 수준의 조인과 트랜잭션 부재로 인해 데이터 일관성 유지 필요.
     * 스키마 수정: 모든 샤드에 대해 스키마 변경을 계획하고 적용.
     * 보고서 생성: 여러 샤드를 통합하여 보고서 생성.

    교훈

   Pinterest의 확장 여정에서 얻은 주요 교훈:
     * 단순함이 중요: 이해하기 쉬운 기술 선택이 문제 해결과 위험 감소에 도움.
     * 확장성 우선: 급속한 성장 환경에서는 데이터베이스 기능을 희생하더라도 확장성을 우선.
     * 수평적 확장 설계: 사용자 기반이 확장됨에 따라 리소스를 추가할 수 있는 아키텍처 선택.
"
"https://news.hada.io/topic?id=15385","가장 심오한 비디오 게임: 연구를 위한 우수한 인지 보조 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   가장 심오한 비디오 게임: 연구를 위한 우수한 인지 보조 도구

생명과 마음의 경계를 넘는 독특한 퍼즐 게임: Baba is You

  게임의 특징

     * Baba is You는 퍼즐 게임으로, 플레이어가 단어와 객체를 이동시켜 새로운 문장을 만들고 게임의 규칙을 변경할 수 있음.
     * 이 게임은 객체와 규칙, 데이터와 알고리즘, 인지 시스템과 그 내용 사이의 경계를 허물어 생각을 유연하게 만듦.
     * 게임을 통해 메시지, 관찰자, 해석, 규칙 등 다양한 형이상학적 주제를 탐구할 수 있음.

  인지 유연성 훈련

     * Baba is You는 인지 유연성을 높이는 데 도움이 되는 도구로, 특히 생명과 마음의 이해에 관련된 주제에 대해 생각하는 방식을 변화시킴.
     * 게임을 통해 객체와 메시지의 이분법을 깨고, 정보 패턴과 인지 에이전트 사이의 연속성을 이해하는 데 도움을 줌.

  자기 참조적 동적 시스템

     * 게임 내에서 ""YOU""라는 토큰을 조작할 수 있어, 플레이어의 능력과 우주와의 관계를 변화시킬 수 있음.
     * 이는 생물학적 시스템에서의 자기 참조적 동적 시스템을 이해하는 데 중요한 개념을 제공함.

  다중 관찰자 및 자율 에이전시

     * 다중 관찰자가 물리적 특징을 해석하고 조작하는 다중 플레이어 동적 시스템을 구현할 수 있음.
     * 자율 에이전시를 강화하여 텍스트 메시지가 정보 전달, 해석 가능성, 더 큰 인지 시스템에 채택되는 목표를 가질 수 있음.

  다중 스케일 동역학

     * 에이전트 내에 중첩된 에이전트를 구현하고, 객체와 메시지가 가상화되어 계층 구조를 따라 다른 객체와 메시지를 생성할 수 있는 능력을 제공함.

GN⁺의 의견

     * 인지 유연성 향상: Baba is You는 인지 유연성을 높이는 데 매우 유용한 도구로, 특히 소프트웨어 엔지니어가 복잡한 문제를 해결하는 데 도움이 됨.
     * 형이상학적 탐구: 게임을 통해 메시지, 관찰자, 해석 등 다양한 형이상학적 주제를 탐구할 수 있어, 철학적 사고를 자극함.
     * 자기 참조적 시스템 이해: 생물학적 시스템에서의 자기 참조적 동적 시스템을 이해하는 데 중요한 개념을 제공함.
     * 다중 관찰자 시스템: 다중 관찰자가 물리적 특징을 해석하고 조작하는 다중 플레이어 동적 시스템을 구현할 수 있어, 협업적 문제 해결 능력을 향상시킴.
     * 게임의 교육적 가치: Baba is You는 단순한 게임이 아니라, 교육적 가치가 높은 도구로, 특히 생명과 마음의 경계를 넘는 연구에 유용함.

        Hacker News 의견

     * 게임 소개: ""Baba Is You""는 논리 퍼즐 게임으로, 규칙을 조작해 목표를 달성하는 게임임. 해커뉴스 사용자들에게 강력 추천함.
     * 인지적 측면: 인간 뇌는 다양한 좌표 시스템을 가지고 있으며, 이를 통해 다양한 관점에서 사물을 볼 수 있음. 인공 신경망은 이러한 능력이 부족함.
     * 게임의 매력: ""Baba Is You""는 간단한 규칙에도 불구하고 매번 새로운 해결책을 발견하게 만드는 게임임.
     * 게임 추천: 체스, Vim Adventures, DuoLingo 같은 게임들이 사고방식이나 기술 향상에 도움을 줄 수 있음.
     * 커스텀 레벨: ""The Legend of Zelbaba: Linkeke between words""라는 커스텀 레벨이 발표됨. 관련 링크 제공됨.
     * 데이터와 알고리즘: 데이터와 알고리즘의 경계를 허물고 새로운 사고방식을 제공함. Prolog를 처음 이해했을 때의 깨달음을 공유함.
     * 아이콘 사용: ""WALL IS STOP"" 같은 텍스트를 아이콘으로 대체하면 흥미가 떨어질 수 있음. 언어는 단지 도구일 뿐임.
     * 개발자 정보: 이 게임의 개발자는 ""Noita""라는 또 다른 기술적 걸작을 만든 사람임.
     * AI와 게임: AI를 활용한 강화 학습 시뮬레이션 리소스를 공유함. 개인적으로는 게임을 하지 않지만 흥미로움.
     * 해킹 사고방식: ""Baba Is You""는 익스플로잇 작성에 필요한 사고방식을 익히는 데 좋은 도구임.
"
"https://news.hada.io/topic?id=15453","무료 소프트웨어로 인해 삶이 바뀐 Philip Hazel","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    무료 소프트웨어로 인해 삶이 바뀐 Philip Hazel

필립 헤이즐의 삶을 바꾼 자유 소프트웨어

  펀치 카드에서 평면 스크린까지

     * 필립 헤이즐은 1995년에 Exim 메시지 전송 에이전트(MTA) 프로젝트를 시작했음.
     * 1998년에는 Perl-Compatible Regular Expressions (PCRE) 프로젝트를 시작했음.
     * 2007년 은퇴 시점에 Exim 유지 관리를 다른 사람에게 넘겼고, 현재는 PCRE2의 후임자를 찾고 있음.

  Exim

     * Exim은 현대 운영 체제와 표준 C 컴파일러 및 런타임을 사용하여 TCP/IP 네트워크에 영구적으로 연결된 MTA를 목표로 함.
     * Exim은 공개 FTP 사이트에 배포되었고, GPL 라이선스로 전환되었음.
     * Exim은 상업 사이트에서도 사용되며, 여러 운영 체제의 기본 MTA로 자리 잡았음.

  PCRE

     * PCRE는 Exim에서 더 유연한 정규 표현식을 사용하기 위해 개발됨.
     * PCRE는 Apache HTTPD와 Postfix MTA 등 다양한 애플리케이션에서 채택됨.
     * 2015년에 PCRE2가 발표되었고, 2022년에는 GitHub로 이전됨.
     * PCRE2는 Git, Grep, MariaDB 등 다양한 소프트웨어에서 사용됨.

  바통 넘기기

     * 필립 헤이즐은 PCRE2의 후임자를 찾고 있으며, 현재까지는 아무도 연락하지 않았음.
     * 새로운 소프트웨어 프로젝트를 시작하는 개발자들에게 유지 관리의 중요성을 강조함.
     * 소프트웨어 테스트를 설계할 때부터 고려하는 것이 중요함.

GN⁺의 의견

     * 유지 관리의 중요성: 소프트웨어 개발보다 유지 관리가 더 많은 노력을 필요로 함. 이는 초급 엔지니어들에게도 중요한 교훈이 될 수 있음.
     * 오픈 소스의 영향력: Exim과 PCRE는 오픈 소스 커뮤니티에서 큰 영향을 미쳤음. 이는 오픈 소스 프로젝트의 잠재력을 보여줌.
     * 기술 발전의 속도: 필립 헤이즐의 경험은 기술 발전이 얼마나 빠르게 이루어졌는지를 보여줌. 이는 현재와 미래의 기술 트렌드를 이해하는 데 도움이 됨.
     * 후임자 찾기의 어려움: 오랜 기간 유지 관리한 프로젝트의 후임자를 찾는 것이 어려울 수 있음. 이는 오픈 소스 프로젝트의 지속 가능성에 대한 중요한 문제임.
"
"https://news.hada.io/topic?id=15425","Neofetch 개발자, 모든 저장소 아카이브하고 "농사 시작했음"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Neofetch 개발자, 모든 저장소 아카이브하고 ""농사 시작했음""

   한국은 치킨가게인거죠?
   아.. 이젠 아닐랑가요.

        Hacker News 의견

     * 농장에서 일해본 적이 없다면 낭만적인 생각만으로 농사를 시작하지 말라는 의견. 농사는 매우 힘든 일이며, 현대 농부들은 대학 학위와 많은 장비, 지식, 경험을 가지고 있음.
     * 농업 커뮤니티에서 자랐으며, 농사는 보람이 있지만 돈을 벌거나 자급자족하려면 매우 힘든 일이라는 의견. 프로그래밍보다 신체적으로 더 힘들고, 정신적으로 더 다양함.
     * 농사를 시작할 생각은 없지만 물레방앗간 주인이 되고 싶다는 의견.
     * GitHub 기록을 보면 2021년 이후 거의 커밋이 없다는 점이 흥미롭다는 의견. 프로젝트를 아카이브하는 것이 최선의 선택일 수 있음.
     * Kiss Linux의 창시자에 대한 언급. ""뿌린 대로 거둔다""는 태그라인이 예언적이라는 의견.
     * ""버몬트의 공동체로 가서 계절 단위로 시간을 보낼 것""이라는 인용문을 소개.
     * 소프트웨어 엔지니어들이 농업에 대해 논쟁하는 것이 농담일 수도 있다는 의견.
     * Wendell Berry의 농업 에세이를 읽고 삶이 바뀌었다는 의견. 농업이 보수적인 가치를 이해하는 데 도움이 되었음.
     * 농업이 장기적으로는 맞지 않았지만 중요한 교훈을 얻었다는 의견.
     * 재미로 농사를 짓는 것은 괜찮지만, 수입을 위해 농사를 짓는 것은 끔찍한 생각이라는 의견.
     * 몇몇 개발자들이 농업으로 전향했으며, 그들이 만족했다는 의견. 80년대에는 피자 가게가 유행이었다는 언급.
     * 처음에는 부정적이었지만 곧 긍정적으로 변했다는 의견.
"
"https://news.hada.io/topic?id=15384","WebAssembly와 OpenGL을 사용한 웹 브라우저에서의 SimCity","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               WebAssembly와 OpenGL을 사용한 웹 브라우저에서의 SimCity

Micropolis in WebAssembly

  개요

     * Micropolis는 원래 SimCity Classic을 기반으로 하며, Maxis에서 디자인하고 Will Wright가 설계한 게임임.
     * Don Hopkins가 WebAssembly로 포팅한 버전임.
     * 현재 개발 중인 상태로, 더 많은 기능이 추가될 예정임.

  주요 기능

     * 패닝 및 줌: 마우스 왼쪽 버튼을 드래그하여 패닝, 마우스 휠을 돌려서 줌 가능함.
     * 키보드 조작: 화살표 키로 패닝, 쉼표와 마침표 키로 줌 가능함.
     * 도시 로드: 문자 키를 눌러 다양한 도시를 로드, 탭 키를 눌러 도시 생성 가능함.
     * 속도 조절: 숫자 키로 속도 설정, 0 키로 일시 정지 가능함.
     * 세율 조정: 대괄호 키로 세율 조정 가능함.

  추가 정보

     * GitHub: MicropolisCore
     * YouTube: ""MicropolisWeb Demo 1"" 및 ""Space Inventory Cellular Automata Music 1""
     * 참고 자료: Chaim Gingold의 책 ""Building SimCity""와 ""SimCity Reverse Diagrams""

  주의사항

     * 스페이스 바: 스페이스 바를 누르면 Space Inventory가 열리므로 주의 필요함.

  GN⁺의 의견

     * 흥미로운 점: 원래의 SimCity Classic을 웹 브라우저에서 즐길 수 있다는 점이 흥미로움.
     * 기술적 도전: WebAssembly를 사용하여 복잡한 시뮬레이션 게임을 웹에서 구현한 점이 기술적으로 도전적임.
     * 사용자 경험: 다양한 키보드 조작과 마우스 인터페이스를 통해 사용자 경험을 향상시킴.
     * 개발 중: 아직 개발 중인 상태로, 추가 기능과 이스터 에그가 기대됨.
     * 관련 프로젝트: 비슷한 프로젝트로는 OpenTTD와 같은 오픈소스 시뮬레이션 게임이 있음.

        Hacker News 의견

     * 고전 게임을 웹으로 포팅하는 것은 재미있음. 많은 게임이 현대 웹페이지보다 작고 빠르게 로드되며 잘 작동함.
     * SimCity를 어릴 때 플레이한 기억이 있음. 하지만 현재 브라우저에서 제대로 작동하지 않는 것 같음. 도시를 로드하고 관찰할 수는 있지만, 직접 도시를 건설할 수 없다는 점이 이상함.
     * 모바일에서 SimCity를 기대하지 않았지만 이 페이지가 실제로 Firefox를 멈추게 했음. 안드로이드에서 프로세스를 종료해야 했음. 참고로, 내가 브라우저로 포팅한 작은 게임도 있음. Emscripten과 SDL2를 사용해 쉽게 실행할 수 있었지만, 휴대폰에서 완전히 플레이 가능하게 만드는 데 가장 많은 노력이 필요했음.
     * RuneScape 클라이언트를 웹으로 포팅한 경험이 있음. Wasm, Typescript, WebGL을 사용함.
     * 컨트롤이 작동하지 않으며 브라우저가 무언가를 로드하자마자 CPU 팬이 작동함. 이게 암호화폐 채굴 프로그램이 아닌지 의심됨. 만약 그렇지 않다면, 작동하지 않는 것을 공개하는 이유가 무엇인지 궁금함.
     * Micropolis 웹 데모 1: Micropolis는 브라우저 기반의 오픈 소스 SimCity로, WebAssembly, WebGL, SvelteKit을 사용함. 초기 버전은 WebAssembly 시뮬레이터를 실행하고 타일을 WebGL로 애니메이션화하지만, 대부분의 사용자 인터페이스는 아직 작업 중임.
     * Micropolis 웹 사이트와 GitHub 저장소에서 소스 코드와 문서를 확인할 수 있음.
     * **Chaim Gingold의 책 ""Building SimCity""**에서 더 많은 정보를 얻을 수 있음.
     * 공간 인벤토리 셀룰러 오토마타 음악 1: Micropolis 웹의 첫 번째 비디오에는 Juho Hietala, Blamstrain의 음악이 포함되어 있으며, Don Hopkins가 수행한 공간 인벤토리 셀룰러 오토마타가 있음.
     * 스페이스 바를 누르면 발생하는 일에 놀라움. 멋진 프랙탈이 나타남.
     * 왜 거의 모든 도시 블록에 소방서가 있는지 궁금함.
     * LLM이 이런 게임을 즉시 포팅할 수 있을지 궁금함.
"
"https://news.hada.io/topic?id=15344","AMD CEO 리사 수, PS3 악명 높은 Cell 프로세서 설계 회상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AMD CEO 리사 수, PS3 악명 높은 Cell 프로세서 설계 회상

AMD CEO 리사 수, PS3 셀 프로세서 설계 회고

  리사 수의 경력과 PS3 셀 프로세서

     * AMD CEO 리사 수는 IBM에서 PS3의 셀 프로세서 설계에 참여했음.
     * 셀 프로세서는 병렬 처리에 중점을 둔 CPU로, IBM, 소니, 도시바가 공동 개발했음.
     * 당시 셀 프로세서는 매우 혁신적이었으나, 개발자들이 프로그래밍하기 어려운 구조였음.

  PS3의 성능과 시장 반응

     * PS3는 복잡한 아키텍처로 인해 크로스 플랫폼 게임에서 성능 문제가 있었음.
     * 그러나 독점 게임에서는 뛰어난 그래픽 성능을 보여줬음.
     * PS3는 닌텐도의 Wii와 마이크로소프트의 Xbox 360에 비해 덜 성공적이었음.

  AMD와 콘솔 시장

     * 7세대 콘솔(PS3, Xbox 360, Wii)에서는 AMD가 그래픽 칩을 공급했음.
     * 8세대 콘솔(PS4, Xbox One, Switch)에서는 AMD가 CPU와 GPU를 모두 공급했음.
     * 이는 AMD에게 큰 성공을 안겨줬음.

  리사 수의 역할과 영향

     * 리사 수는 IBM에서 PS3 셀 프로세서를 설계한 후 AMD에서 PS4와 Xbox One의 하드웨어 개발을 주도했음.
     * 이는 AMD가 콘솔 시장에서 중요한 위치를 차지하게 만든 요인 중 하나임.

GN⁺의 의견

     * 기술적 도전과 성공: 셀 프로세서는 당시 매우 혁신적이었으나, 개발자들이 사용하기 어려운 구조였음. 이는 기술적 도전과 성공의 양면성을 보여줌.
     * 콘솔 시장의 변화: PS3에서 PS4로 넘어가면서 AMD가 CPU와 GPU를 모두 공급하게 된 것은 콘솔 시장의 큰 변화임.
     * 리사 수의 리더십: 리사 수의 경력은 기술적 도전과 성공을 통해 AMD를 콘솔 시장의 주요 공급자로 만든 중요한 요인이었음.
     * 미래 전망: AMD가 계속해서 콘솔 시장에서 중요한 역할을 할 것으로 예상됨. 이는 소프트웨어 엔지니어들에게도 중요한 참고 자료가 될 수 있음.

        Hacker News 의견

     * PS3 프로그래밍 수업 경험: PS3에서 다양한 작업을 구현하는 수업이었음. 벡터 유닛을 잘 활용해야 성능이 좋았고, SPE와 PPE 간의 동기화가 어려웠음. 최적화에 시간을 쓴 학생들과 기본 구현만 한 학생들 간의 성능 차이가 컸음.
     * Lisa Su의 역할: Lisa Su가 Cell 설계에 참여했다는 사실이 놀라움. Cell 아키텍처는 당시로서는 매우 앞서 있었음. PPE/SPE 구조가 오늘날의 Grace/Hopper와 비슷함. 게임 디자인/포팅이 매우 어려웠음.
     * PS3의 성공 여부: PS3는 Wii와 Xbox 360에 비해 덜 성공적이었음. 유럽에서는 PS3가 Call of Duty와 함께 인기가 있었음. Wii는 가족용 게임에 적합했고, PS3는 더 진지한 게이머를 위한 것이었음.
     * 인터뷰 원문: 이 기사는 인터뷰에 대한 논평임. 원문 인터뷰는 더 많은 세부 정보를 제공함. 원문 인터뷰 링크
     * Trivia: Lisa Su와 Jensen Huang이 친척 관계임. 관련 링크
     * PS3의 하위 호환성 문제: PS3의 하위 호환성 문제로 많은 게임이 PS3에만 묶여 있음. Xbox는 360 게임을 새로운 Xbox에서 쉽게 플레이할 수 있음. 이는 PS3의 독특한 아키텍처 때문임. 관련 링크
     * ATI와 AMD: ATI가 360과 Wii의 그래픽 칩을 개발했음. AMD가 ATI를 인수했지만, 이는 역사 수정주의처럼 보일 수 있음.
     * PS3 아키텍처 블로그 포스트: PS3 아키텍처에 대한 훌륭한 블로그 포스트가 있음. 블로그 링크
     * Cell과 Xenon 개발 책: Cell과 Xenon 개발에 관한 훌륭한 책이 있음. ""The Race for a New Game Machine""이라는 제목으로 IBM에서 일한 사람들이 공동 저술함.
     * Peter Hofstee의 강연: Cell의 주요 설계자인 Peter Hofstee가 2008년 UT Austin에서 강연을 했음. 당시 UT는 TRIPS라는 프로세서를 개발 중이었음. Hofstee는 ""페타플롭 프로세서를 쉽게 만들 수 있다""는 발언을 했고, 이는 청중에게 큰 반향을 일으켰음. TRIPS 링크
"
"https://news.hada.io/topic?id=15325","테렌스 타오의 Proof Checkers 및 AI 프로그램에 대한 견해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                테렌스 타오의 Proof Checkers 및 AI 프로그램에 대한 견해

AI가 수학자들의 '공동 파일럿'이 될 것임

  수학의 변화

     * 수학은 전통적으로 고독한 학문이었음.
     * 최근에는 수학의 많은 부분이 개별 구성 요소로 엄격하게 분해되어 컴퓨터로 검증 가능해짐.
     * UCLA의 테렌스 타오는 이러한 방법들이 수학에서 새로운 협력 가능성을 열어준다고 믿음.

  자동 증명 검사기의 등장

     * 자동 증명 검사기를 통해 수학자들이 수백 명과 협력할 수 있게 됨.
     * 예를 들어, 타오는 Polynomial Freiman-Ruzsa (PFR) 추측을 20명 이상과 협력하여 증명했음.
     * 각 개인이 작은 단계의 증명을 기여하고, 전체 방향을 관리하는 방식으로 진행됨.

  수학의 형식화

     * 모든 사람이 프로그래머일 필요는 없고, 수학적 방향에 집중하는 사람과 형식적 증명을 만드는 사람으로 역할을 나눌 수 있음.
     * 표준 수학 라이브러리의 개발로 형식 수학이 실용적으로 변함.
     * Lean이라는 프로젝트는 기본적인 수학 정리를 포함한 방대한 라이브러리를 가지고 있음.

  AI와 수학의 미래

     * AI가 수학자들의 보조 역할을 할 가능성이 있음.
     * AI가 증명을 형식화하고, 논문을 작성하여 제출하는 등의 작업을 도울 수 있음.
     * 인간이 아이디어를 제공하고, AI가 이를 형식화하는 방식으로 협력할 수 있음.

  수학의 새로운 방식

     * AI와 협력하여 수학의 새로운 방식이 등장할 가능성이 있음.
     * 수학자들이 프로젝트 매니저처럼 역할을 나누고, AI가 증명을 돕는 방식으로 변화할 수 있음.
     * 수학 교과서를 형식화하여 더 상호작용적인 학습 도구를 만들 수 있음.

  AI의 한계와 가능성

     * AI가 수학의 큰 문제를 해결하는 데 도움을 줄 수 있지만, 인간의 직관과 이해가 여전히 중요함.
     * AI가 제공하는 증명을 인간이 분석하고 이해하는 새로운 유형의 수학자가 필요할 수 있음.
     * AI가 수학의 새로운 영역을 탐구하고, 인간이 이해하기 어려운 부분을 도울 수 있음.

  GN⁺의 의견

     * AI의 역할: AI는 수학자들이 더 큰 문제를 해결하는 데 도움을 줄 수 있는 도구로서 중요한 역할을 할 수 있음.
     * 협력의 중요성: AI와 인간의 협력은 수학의 새로운 가능성을 열어줄 수 있음.
     * 형식화의 필요성: 수학의 형식화는 더 많은 지식을 명시적으로 만들고, 협력을 촉진할 수 있음.
     * 미래의 수학자: AI와 협력하여 증명을 분석하고 이해하는 새로운 유형의 수학자가 필요할 수 있음.
     * 기술 발전: AI와 수학의 결합은 기술 발전에 따라 더 많은 가능성을 열어줄 수 있음.

        Hacker News 의견

     * Edsger Dijkstra의 글: 소프트웨어 생산 방식을 풍자한 1975년의 글을 언급하며, 지적 재산권에 대한 비판이 주된 내용임.
     * LLMs의 능력: 현재는 도우미 역할을 하지만, 앞으로는 더 높은 수준의 통찰을 제공할 가능성이 있음. 예를 들어, 핵폭탄과 퇴비 더미의 관계를 이해하는 것처럼 인간이 놓치는 부분을 포착할 수 있음.
     * 인터뷰 요약:
          + 프로젝트 매니저 수학자: AI와 증명 보조 도구가 수학적 통찰을 생산하는 데 혁신적일 수 있음.
          + 암묵적 지식: 직관과 실패의 지식이 논문에 포함되지 않기 때문에, 수학자들 간의 소통이 중요함.
          + 수학의 형식화: 증명 보조 도구가 이해를 돕기 위해 수학을 더 형식화할 필요가 있음.
     * 컴퓨터 검증 증명: AI가 체스 엔진처럼 증명 검증에 유용할 수 있음. 많은 정리와 보조 정리를 다루는 데 어려움이 있지만, AI가 이를 개선할 수 있음.
     * 소프트웨어 역사와 수학: 과거의 소프트웨어 프로젝트와 현재의 모듈화된 소프트웨어 엔지니어링을 비교하며, 수학도 비슷한 길을 갈 수 있다는 의견.
     * Terence Tao의 강연: 수학 연구에 Lean을 사용하는 방법에 대해 더 자세히 설명한 강연을 추천함.
     * GPT-4를 사용한 수학 증명: GPT-4가 새로운 보조 정리를 증명하는 데 성공한 사례를 소개함. 이는 수학 연구에 유용할 수 있음.
     * 초기 경력 수학자와 Lean: 초기 경력 수학자들은 직관을 신뢰하고 논문을 작성하는 것이 더 나을 수 있다는 의견.
     * 실패로부터 배우기: 다른 사람의 실패로부터 배우는 것이 매우 생산적이라는 의견.
"
"https://news.hada.io/topic?id=15350","온라인 게임 및 가상 세계의 토지 가치세 (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     온라인 게임 및 가상 세계의 토지 가치세 (2022)

온라인 게임과 가상 세계에서의 토지 가치세: 가이드

  토지 투기와 그 문제점

     * 디지털 토지 경제를 가진 멀티플레이어 게임을 설계할 때, 플레이어들이 시간이나 돈을 많이 투자하는 경우 문제가 발생할 수 있음.
     * 디지털 토지 위기 또는 주택 위기는 현실 세계와 유사하게 발생하며, 토지가 부족해지면 투기꾼들이 이를 사재기하여 게임의 재미를 감소시킴.
     * 예시로 Ultima Online은 1990년대부터 주택 위기를 겪고 있으며, 이는 게임의 일부 기능을 망가뜨림.

  이 에세이에서 다루는 내용

     * 게임 디자이너들이 플레이어 유지와 참여를 해치는 토지 투기를 줄이는 방법을 제시함.
     * **토지 가치세(LVT)**를 도입하여 투기를 억제하는 실질적인 가이드를 제공함.

  ""토지 위기""란 무엇인가?

     * 현실 세계에서 주택 위기는 집값과 임대료가 급등하여 많은 사람들이 주거비를 감당하기 어려워지는 현상임.
     * 토지 부족이 주택 위기의 주요 원인으로, 이는 경제 전반에 영향을 미침.

    가상 세계에서의 토지 위기

     * 투기: 사람들이 토지를 사용하려는 목적이 아닌, 가치 상승을 기대하며 보유함.
     * 계층 이동 제한: 플레이어들이 토지를 소유한 '귀족'과 토지가 없는 '농민'으로 나뉨.
     * 사용자 생성 콘텐츠(UGC) 감소: 토지가 UGC의 기반이 되는 경우, 토지를 소유하지 못한 플레이어들이 콘텐츠를 생성하지 못함.
     * 암시장: 토지 거래가 제한되면 암시장이 형성되어 사기와 신뢰 상실을 초래함.
     * 비정상적인 행동: 플레이어들이 토지를 얻기 위해 비정상적인 방법을 사용함.
     * 비용 상승: 토지 거래가 자유로우면 토지 가격과 임대료가 급등함.
     * 사용자 성장 감소: 새로운 플레이어들이 필요한 자산을 얻지 못해 게임 참여가 어려워짐.

  토지 가치세란 무엇인가?

     * 토지와 개선을 구분하여, 토지에만 세금을 부과함.
     * 토지 보유에 대한 높은 세금을 부과하여 투기를 억제함.
     * 생산적인 개선을 장려하여 토지를 유용하게 사용하도록 유도함.

    LVT가 없는 경우

     * 초기 진입자 이점: 초기 플레이어들이 저렴하게 토지를 획득함.
     * 후속 진입자 불이익: 새로운 플레이어들이 높은 가격을 지불하고 토지를 구매하거나 임대함.
     * 투기꾼 번성: 투기꾼들이 토지를 보유하고 가격 상승을 기다림.
     * 임대 수익: 토지 소유자들이 임대료를 통해 지속적인 수익을 얻음.
     * 통합: 투기꾼들이 더 많은 토지를 구매하여 경제가 정체됨.

    LVT가 있는 경우

     * 토지 구매 비용 저렴: 토지 구매는 저렴하지만 보유 비용은 높음.
     * 투기꾼 제거: 투기꾼들이 토지를 팔거나 포기하게 되어 토지가 더 많이 사용 가능해짐.
     * 생산적인 사용 장려: 토지를 보유한 플레이어들이 생산적인 개선을 통해 세금을 상쇄함.

  디지털 토지 가치세 구현

     * 토지 유사 자산 식별: 토지 유사 자산을 식별하고, 개선과 토지를 구분함.
     * 시장 가치 발견: 토지의 시장 가치를 발견하고, 토지 임대료와 판매 가치를 평가함.
     * 토지 가치세 부과: 토지 임대료의 85-100%를 포착하는 토지 가치세를 부과함.

  GN⁺의 의견

    1. 게임 경제의 안정성: 토지 가치세는 게임 경제의 안정성을 높이고, 새로운 플레이어들이 게임에 쉽게 접근할 수 있게 함.
    2. 플레이어 참여 증가: 투기를 억제하여 더 많은 플레이어들이 게임의 핵심 기능에 참여할 수 있게 함.
    3. 게임 디자인의 복잡성: 토지 가치세를 구현하려면 게임 디자인이 복잡해질 수 있으며, 이를 잘 관리해야 함.
    4. 유사 사례 연구: 다른 게임에서의 성공 사례를 참고하여 효과적인 정책을 설계할 필요가 있음.
    5. 플레이어 피드백: 플레이어들의 피드백을 반영하여 정책을 지속적으로 조정하고 개선해야 함.

        Hacker News 의견

     * LVT의 자기 패배적 성격: LVT(토지 가치세)의 도입은 토지 가치를 낮추는 반면, 이를 제거하면 토지 소유자에게 큰 이익이 발생함. 이는 LVT 캠페인의 진전을 되돌릴 강력한 인센티브를 만듦.
     * 도메인과 LVT의 비교: 도메인은 인터넷의 디지털 토지와 같으며, 도메인에 호스팅된 웹사이트가 가치를 더함. 도메인은 무한하지만, 일부 도메인은 더 선호됨. LVT가 도메인에 적합하지 않지만, 흥미로운 생각임.
     * 토지의 효율적 사용 문제: 토지를 더 효율적으로 사용할 수 없다면, 부유한 사람들이 가장 수요가 많은 토지를 차지하게 됨. 미개발 토지를 재소유하는 것이 목표라면 더 간단한 방법이 있음.
     * Decentraland와 Second Life 비교: Decentraland는 토지 가격을 올리려 했으나 실패함. Second Life는 고정된 요금을 부과하며, 경제적으로 실제 토지와 유사하게 작동함. 그러나 매력적인 토지는 시장에서 제외되어 가격이 유지됨.
     * 경제 정책 시뮬레이션 게임: 경제 정책의 효과를 연구하고 실제로 더 나은 결정을 내릴 수 있는 현실 시뮬레이션 비디오 게임을 만들 수 있을지 궁금함.
     * 헨리 조지의 사상: 헨리 조지는 토지세와 자유 무역을 지지했으며, 그의 사상은 한때 매우 인기가 있었으나 지금은 잊혀짐.
     * EVE Online의 경제학자: EVE Online은 실제 경제학자를 고용하여 경제 문제를 해결했음. 반면, 메타버스 프로젝트는 경제 논문 없이 진행됨.
     * LVT의 명백한 장점: LVT는 명백한 장점이 있으며, 이를 구현하려는 단일 이슈 정당에 쉽게 투표할 것임.
     * Second Life의 토지 가격 정책: Second Life는 토지 크기나 컴퓨팅 자원에 따라 고정된 가격을 부과하며, 토지 소유자는 이를 재판매하거나 임대할 수 있음.
     * 관련 읽을거리 제안: 이 게시물은 다른 댓글에서 영감을 받았을 수 있으며, 관련 읽을거리를 제안함.
"
"https://news.hada.io/topic?id=15402","전자잉크 디스플레이를 탑재한 트레이딩 카드 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     전자잉크 디스플레이를 탑재한 트레이딩 카드 (2023)

프로젝트 개요

     * 프로젝트 이름: Wyldcards
     * 프로젝트 설명: Wyldcards는 신용카드 크기의 E-Ink 타일로, 트레이딩 카드 게임에 사용될 수 있음. 카드의 이미지는 변경 가능하며, 메모리 칩이 게임 통계와 특성을 저장할 수 있음. 디지털 특성 덕분에 새로운 게임 메커니즘을 도입할 수 있음.

아이디어의 기원

     * 아이디어 배경: 2014년에 모바일 기기 UI 테스트 중 여러 대의 아이폰을 카드처럼 펼쳐보면서 영감을 얻음. 디지털 카드 이미지를 표시하고 버튼 하나로 덱을 섞을 수 있는 아이디어를 떠올림.
     * 개발자 배경: IoT 3D 프린터 회사에서 소프트웨어 팀을 이끌었으며, 웹 백엔드, DevOps, 모바일 개발 경험이 있음. 전자 제품 제작에 대한 자신감을 얻어 프로젝트를 시작함.

디자인, 프로토타입, 제조 과정

     * 디자인 제약 조건: 저렴하고, 캠프나 놀이터에서 사용 가능하며, 시간이 지나도 매력적이어야 함. E-Ink 디스플레이를 사용하여 에너지 소비를 줄임.
     * 프로토타입 제작: Alibaba에서 E-Ink 디스플레이를 구매하고 개발 보드를 사용해 이미지를 전송함. Rust 프로그래밍 언어를 사용하여 프로토타입을 제작하고, PCB 디자인을 배워 중국에서 주문함.
     * 물리적 카드 디자인: CAD 기술과 3D 프린터를 사용해 플라스틱 인클로저를 제작함. 여러 번의 반복을 통해 최적의 디자인을 찾음.
     * 게임 디자인: Node.js를 사용하여 게임을 빠르게 디자인하고, Rust 드라이버를 Node.js 애드온으로 래핑함.

크라우드펀딩

     * 크라우드펀딩 성공: Hacker News에 프로젝트를 게시하여 큰 관심을 받음. CrowdSupply와 협력하여 DevKits를 판매함.
     * 제작 과정: 25개의 DevKits를 제작 중이며, 대부분의 주문은 친구와 가족, 그리고 Hacker News에서 관심을 보인 사람들로부터 옴.

대규모 제조 학습

     * 제조 과정 학습: 다양한 비디오, 책, 공장 투어를 통해 대규모 제조 과정을 학습함. 3D 프린터 스타트업에서의 경험을 통해 제조 과정이 마법적이지 않다는 것을 깨달음.

향후 계획

     * 향후 계획: 현재 풀타임 직장에 복귀했으며, DevKits 제작을 완료한 후 Wyldcard 게임 디자인을 시작할 계획임.

GN⁺의 의견

     * 흥미로운 점: 디지털과 물리적 요소를 결합한 트레이딩 카드 게임이라는 독특한 아이디어가 흥미로움. 특히 E-Ink 디스플레이를 사용하여 에너지 소비를 줄인 점이 인상적임.
     * 기술적 도전: Rust와 Node.js를 결합하여 게임을 개발한 점이 기술적으로 도전적이면서도 흥미로움. 이는 다른 개발자들에게도 좋은 영감을 줄 수 있음.
     * 제조 과정의 현실: 대규모 제조 과정이 얼마나 복잡하고 시간이 많이 드는지에 대한 현실적인 시각을 제공함. 이는 다른 스타트업 창업자들에게 유용한 교훈이 될 수 있음.
     * 커뮤니티의 힘: Hacker News와 같은 커뮤니티의 힘을 통해 프로젝트를 성공적으로 알리고 크라우드펀딩을 성공시킨 점이 인상적임. 이는 다른 개발자들에게도 큰 동기부여가 될 수 있음.

        Hacker News 의견

     * 베이 에리어의 엔지니어들이 프로젝트를 설명해주는 개방적인 태도가 다른 지역에도 퍼지길 바라는 의견.
     * OpenSauce에서 본 DevKit의 개념이 멋지지만, 대량 생산 시 가격이 합리적일 수 있다는 의견.
     * 전자 제품을 단순히 전자화하는 것에 반대하지만, ""한 번 사서 영구적으로 사용하는"" 개념은 좋다는 의견.
     * 트레이딩 카드 게임의 거래 요소가 논란이 될 수 있지만, 이를 어떻게 구현할지 궁금하다는 의견.
     * 컨퍼런스에서 재사용 가능한 패스를 만들어 플라스틱 낭비를 줄이고, 다양한 기능을 추가할 수 있다는 아이디어.
     * 디지털 카드를 통해 의료진이 환자와 더 쉽게 소통할 수 있는 방법을 제안하는 의견.
     * e-ink 디스플레이로 만든 트레이딩 카드 프로젝트를 소개하는 링크 공유.
     * 하드웨어가 더 이상 유용하지 않을 때의 처리 방안에 대한 우려.
     * 게시판에 신성 기하학 같은 세부 사항을 포함한 점에 감사하는 의견.
     * 아이폰을 카드처럼 사용해 덱을 섞는 아이디어가 창의적이라는 의견.
     * 스타 트렉의 PADDs 사용 방식이 미래의 프로젝트와 유사하다는 의견.
     * e-ink 디스플레이의 독특한 사용 사례를 소개하는 링크 공유와 개인 프로젝트 홍보.
"
"https://news.hada.io/topic?id=15449","Claude 3.5 Sonnet 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Claude 3.5 Sonnet 출시

  두 배의 속도로 최첨단 지능 제공

     * Claude 3.5 Sonnet은 Claude 3 Opus보다 두 배 빠른 속도로 작동함.
     * 대학원 수준의 추론, 학부 수준의 지식, 코딩 능력에서 업계 최고 성능을 보임.
     * 복잡한 지시사항을 이해하고 고품질 콘텐츠를 자연스럽고 공감 가는 톤으로 작성하는 데 뛰어남.

  최첨단 비전 모델

     * Claude 3.5 Sonnet은 시각적 추론이 필요한 작업에서 뛰어난 성능을 보임.
     * 차트와 그래프 해석, 불완전한 이미지에서 텍스트를 정확히 전사하는 능력이 있음.
     * 소매, 물류, 금융 서비스 분야에서 이미지, 그래픽, 일러스트레이션에서 더 많은 통찰을 얻을 수 있음.

  새로운 기능: Artifacts

     * Artifacts는 사용자가 생성한 콘텐츠를 실시간으로 편집하고 프로젝트에 통합할 수 있는 동적 작업 공간 제공.
     * Claude.ai가 대화형 AI에서 협업 작업 환경으로 진화하는 첫 단계임.
     * 향후 팀 협업을 지원하고 조직 전체가 지식을 중앙 집중화할 수 있는 기능을 추가할 예정임.

  안전과 프라이버시 약속

     * Claude 3.5 Sonnet은 오용을 줄이기 위해 엄격한 테스트를 거침.
     * 외부 전문가와 협력하여 최신 모델의 안전 메커니즘을 테스트하고 개선함.
     * 사용자 데이터는 명시적 허가 없이는 모델 학습에 사용되지 않음.

  곧 출시 예정

     * Claude 3.5 모델 패밀리를 완성하기 위해 Claude 3.5 Haiku와 Claude 3.5 Opus를 올해 말 출시할 예정임.
     * 기업 애플리케이션 통합을 지원하는 새로운 기능과 모듈 개발 중임.
     * 사용자 경험을 개인화하고 효율적으로 만들기 위해 Memory 기능을 탐구 중임.

GN⁺의 의견

     * Claude 3.5 Sonnet은 속도와 성능 면에서 큰 발전을 이루었음. 이는 복잡한 작업을 더 빠르고 효율적으로 처리할 수 있게 함.
     * Artifacts 기능은 협업 작업 환경을 제공하여 팀 단위의 프로젝트 관리에 유용할 것임.
     * 안전과 프라이버시를 중시하는 접근 방식은 사용자 신뢰를 높이는 데 기여함.
     * Claude 3.5 Sonnet의 비전 모델은 다양한 산업 분야에서 이미지 기반 분석을 개선할 수 있는 잠재력이 있음.
     * 새로운 기능과 모듈의 지속적인 개발은 Claude의 활용 범위를 넓히고 사용자 경험을 향상시킬 것임.

        Hacker News 의견

     * Opus가 GPT-4o보다 더 나은 성능을 보였으며, Claude는 훌륭한 제품임. 그러나 대화 공유 기능과 안드로이드 앱이 없어 불편함.
     * GPT-4 이후로 처음으로 모델의 성능에 놀랐음. HTML 페이지를 반복적으로 수정하는 데 매우 유용했음.
     * Claude 3.5 Sonnet이 PlantUML 다이어그램을 완벽하게 생성했음. 다른 AI 모델들은 실패했었음.
     * 새로운 모델을 사용한 후 생산성이 크게 향상되었음. 코드 대신 기능을 설명하면 자동으로 빌드됨.
     * Claude-3-5-sonnet-20240620을 VSCode에서 사용해봤는데, GPT-4o에서 실패했던 프롬프트도 성공했음.
     * Claude의 성격이 GPT-4 시리즈보다 더 마음에 듦. 코딩 작업에서도 Claude-3-Opus가 더 나았음.
     * 오픈 소스 TypeScript AI 플랫폼을 구축 중이며, Claude 3 모델이 디자인에 영향을 줬음. Opus의 기능을 저렴한 가격에 사용할 수 있어 기쁨.
     * ChatGPT처럼 대화 분기 기능과 편리한 메시지 편집 기능이 있었으면 좋겠음. UI/UX의 작은 차이가 사용을 방해함.
     * Claude가 위험하다고 판단되는 정보를 제공하지 않아 불편함. ChatGPT와 비교했을 때 덜 유용함.
     * Claude Pro의 메시지 한도가 ChatGPT Plus와 비교해 어떤지 궁금함. 무료 버전은 매우 제한적이고, Pro도 제한적일 수 있음.
"
"https://news.hada.io/topic?id=15443","Meta FAIR, 새로운 연구 결과/모델/데이터셋 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Meta FAIR, 새로운 연구 결과/모델/데이터셋 공개

     * Meta Fundamental AI Research (FAIR) 가 새로운 연구 결과물들을 공개
     * 혁신, 창의성, 효율성, 책임감이라는 핵심 테마에 초점을 맞춘 6가지 연구 결과물을 포함

Meta Chameleon

     * 텍스트와 이미지를 입력으로 받아 텍스트와 이미지의 조합을 출력할 수 있는 통합 아키텍처 모델
          + Diffusion 기반 학습이 아닌 Tokenization을 사용해 텍스트와 이미지를 처리하므로 통합적 접근이 가능하고 설계, 유지 관리, 확장이 용이함
          + Chameleon 7B와 34B 모델의 주요 구성 요소를 연구 전용 라이선스로 공개
          + 이미지 생성 모델은 아직 공개하지 않음

Multi-Token Prediction

     * 단어를 한 번에 하나씩 예측하는 기존 방식 대신 여러 단어를 한꺼번에 예측하는 새로운 접근 방식 제안
          + 모델 성능과 학습 효율성이 향상되고 속도도 빨라짐
          + 코드 완성을 위한 사전 학습된 모델을 비상업적/연구 전용 라이선스로 공개함

JASCO (Joint Audio and Symbolic Conditioning for Temporally Controlled Text-to-Music Generation)

     * 텍스트 프롬프트를 음악 클립으로 변환하는 텍스트 대 음악 생성 모델
          + 특정 코드나 비트 등 다양한 입력을 받아 생성된 음악 출력을 더 잘 제어할 수 있음
          + Information bottleneck layer와 temporal blurring을 적용해 특정 제어와 관련된 정보 추출
          + 평가 결과 생성 품질은 기준 모델과 비슷하지만 훨씬 더 다양한 제어가 가능함
          + 연구 논문과 샘플 페이지 공개, 추후 추론 코드와 사전 학습 모델도 공개 예정

AudioSeal

     * AI 생성 음성을 탐지하기 위한 오디오 워터마킹 기법
          + 더 긴 오디오 클립 내에서 AI 생성 부분을 정확히 찾아낼 수 있음
          + 기존의 복잡한 디코딩 알고리듬 대신 국소적 탐지 방식을 사용해 속도와 효율성 향상
          + 상용 라이선스로 공개되며, 다양한 생성 AI 도구의 오용 방지를 위한 연구의 일환임

PRISM 데이터셋 공개 지원

     * LLM 개선을 위해 다양한 사람들로부터 피드백을 받는 것이 중요함
          + 피드백 과정에 대한 방법, 도메인, 목표에 대해 연구 커뮤니티에 의문이 제기됨
          + Meta는 75개국 1,500명의 다양한 참가자의 사회인구통계 및 선호도를 매핑한 PRISM 데이터셋 공개를 지원함
          + 데이터셋은 21개 LLM과의 8,011개 실시간 대화에 대한 각 사람의 선호도와 세분화된 피드백을 매핑함
          + AI 개발에 더 널리 참여하고 포용적인 기술 설계 접근 방식을 장려하기를 희망함

텍스트 대 이미지 생성 시스템의 지리적 격차 측정 및 개선

     * 텍스트 대 이미지 모델이 모든 사람에게 잘 작동하고 세계의 지리적, 문화적 다양성을 반영하는 것이 중요함
          + ""DIG In""이라는 자동 지표를 개발해 잠재적인 지리적 격차 평가
          + 65,000개 이상의 주석과 20개 이상의 설문 응답을 수집해 사람들이 지리적 표현을 인식하는 방식 연구
          + 사람들은 전체 이미지보다는 이미지 내 특정 구성 요소를 활용해 지리적 표현을 인식한다는 것을 알아냄
          + 이를 바탕으로 텍스트 대 이미지 모델의 출력 다양성을 개선하는 방법 탐구
          + Contextualized Vendi Score guidance를 도입해 이미지 품질과 프롬프트-생성 일관성을 유지하면서 생성된 샘플의 표현 다양성 증대
"
"https://news.hada.io/topic?id=15411","사이버 허수아비","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                사이버 허수아비

사이버 허수아비 (Cyber Scarecrow)

  사이버 허수아비란?

     * 사이버 허수아비는 컴퓨터 백그라운드에서 실행되는 소프트웨어임.
     * 바이러스와 악성코드가 컴퓨터를 '무섭게' 보이도록 만들어 공격을 피하게 함.

  현재 상태

     * 사이버 허수아비는 현재 알파 버전임.

  다운로드

     * 다운로드 가능: Windows 10 / 11

  GN⁺의 의견

     * 보안 강화: 사이버 허수아비는 추가적인 보안 계층을 제공하여 컴퓨터를 보호하는 데 도움을 줄 수 있음.
     * 사용자 경험: 알파 버전이므로 사용자 경험이 제한적일 수 있으며, 버그나 불안정성이 있을 수 있음.
     * 기술적 고려사항: 이 소프트웨어를 도입할 때 시스템 자원 사용량과 호환성 문제를 고려해야 함.
     * 대안 제품: 비슷한 기능을 제공하는 다른 보안 소프트웨어로는 Norton, McAfee 등이 있음.
     * 업데이트 필요성: 지속적인 업데이트와 패치가 필요하며, 개발사의 지원이 중요함.

        Hacker News 의견

     * 신뢰 구축 필요성: 창작자들이 이 댓글을 읽는다면, 신뢰를 구축할 방법을 제안하고 싶음. ""About us"" 페이지나 GitHub 링크가 없고, 개인 정보를 요구하는 무작위 웹페이지가 ""exe"" 파일을 보내는 것에 대한 불안감이 있음.
     * 러시아 키보드 레이아웃: 러시아 키보드 레이아웃을 설치하고 옵션으로 설정하면 비슷한 효과를 얻을 수 있음. 많은 러시아산 악성코드는 러시아 키보드 레이아웃이 있는 컴퓨터에서는 실행되지 않음.
     * 소프트웨어 구조 이해 불가: 소프트웨어가 왜 그렇게 만들어졌는지 이해할 수 없음. 단순히 가짜 프로세스와 레지스트리 키를 생성하는 소프트웨어에 라이선스를 적용하려는 이유를 모르겠음.
     * 복잡한 소프트웨어 불필요: Powershell 스크립트를 사용하면 더 적은 자원으로 동일한 작업을 수행할 수 있음. 이 소프트웨어가 복잡한 이유를 이해할 수 없음.
     * 보안 효과 의문: 이 소프트웨어가 실제로 보호 효과가 있는지 의문임. 대부분의 일반적인 악성코드는 이러한 방식에 신경 쓰지 않음.
     * 오픈 소스 필요성: 이 소프트웨어가 오픈 소스가 되어야 함. GitHub 파이프라인을 통해 전체 빌드 과정을 볼 수 있어야 함.
     * 백업의 중요성: 악성코드 방어의 최선책은 정기적인 백업과 문제가 발생했을 때 컴퓨터를 초기화할 의지임.
     * 의심스러운 웹페이지: 무명 웹페이지에서 윈도우 프로그램을 다운로드하고 설치할 사람은 거의 없을 것임.
     * 아이슬란드 등록: 이 웹사이트가 아이슬란드에 등록되어 있음. 실험 결과가 기술적으로 능숙한 사람들을 속이는 멋진 블로그 글이 될 것임.
     * 신용카드 정보 입력: 신용카드가 사기꾼의 데이터베이스에 있는지 확인하려면 카드 번호와 CVV를 입력하라는 것과 같음.
     * 악성코드의 진화: 이 소프트웨어가 주목받으면 악성코드는 더 정교한 검사를 추가할 것임.
     * 가상 환경 검사: 악성코드 작성자는 가상 환경에서 실행되는지 먼저 확인함. 가상 환경에서는 악성코드가 실행되지 않는 경우가 많음.
     * 악성코드의 생존 욕구: 악성코드가 안티바이러스를 보면 멈추는 이유를 이해할 수 없음. 무작위 사이트에서 exe 파일을 다운로드하는 것은 위험함.
     * 오픈 소스의 필요성 재강조: 이 소프트웨어가 단순히 아무것도 하지 않는 프로세스를 생성하는 것이라면, 숨길 것이 없으므로 오픈 소스가 되어야 함.
"
"https://news.hada.io/topic?id=15323","미국 법원, 바나나 거대 기업 Chiquita의 준군사조직 자금 지원 책임 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국 법원, 바나나 거대 기업 Chiquita의 준군사조직 자금 지원 책임 인정

미국 법원, 치키타의 콜롬비아 민병대 자금 지원 책임 인정

  사건 개요

     * 치키타 브랜드 인터내셔널이 콜롬비아 민병대 AUC에 자금을 지원한 혐의로 미국 법원에서 유죄 판결을 받음.
     * AUC는 당시 미국에서 테러 조직으로 지정된 상태였음.
     * 8명의 콜롬비아 가족이 제기한 민사 소송에서 치키타는 3,830만 달러(약 300억 원)의 배상금을 지불하라는 명령을 받음.

  치키타의 입장

     * 치키타는 배심원의 판결에 대해 항소할 계획을 밝힘.
     * 회사는 ""법적 근거가 없다""고 주장하며 판결에 불복함.

  사건의 배경

     * AUC는 콜롬비아에서 인권 침해를 자행했으며, 희생자들은 주로 노동조합원과 바나나 노동자들이었음.
     * 치키타는 2007년 AUC에 자금을 지원한 혐의로 유죄를 인정했음.
     * 1997년부터 2004년까지 치키타는 AUC에 170만 달러 이상을 지급했음.
     * 치키타는 당시 AUC 지도자 카를로스 카스타뇨가 자금 지원을 요구하며 직원과 자산에 위협을 가했다고 주장함.

  법적 논쟁

     * 치키타의 변호인단은 직원 보호를 위해 어쩔 수 없이 자금을 지급했다고 주장함.
     * 원고 측은 치키타가 AUC와 ""불경한 동맹""을 맺었다고 주장함.
     * AUC는 2001년 미국에서 테러 조직으로 지정된 후에도 자금 지원이 계속됨.

  AUC의 활동

     * AUC는 좌익 반군의 공격과 갈취 시도로부터 지주를 보호하기 위해 설립되었으나, 주로 마약 밀매업자를 위한 사설 군대로 활동함.
     * AUC는 2006년 정부와 평화 협정을 맺고 해체되었으나, 일부 구성원은 새로운 분파를 형성해 활동을 계속함.

  소송 결과

     * 이번 소송은 수백 건의 청구 중 9건을 대상으로 진행되었음.
     * 배심원단은 9건 중 8건의 살인에 대해 AUC와 치키타의 책임을 인정함.
     * 치키타는 AUC에 상당한 지원을 제공해 예측 가능한 위험을 초래했다고 판단됨.

  치키타의 반응

     * 치키타는 콜롬비아의 상황이 비극적이라며 피해자와 가족들에게 애도를 표함.
     * 그러나 법적 근거가 없다는 입장을 고수하며, 최종적으로 법적 입장이 승리할 것이라고 확신함.

  원고 측의 반응

     * 원고 측 변호사 아그니에슈카 프리츠만은 가족들이 치키타를 법정에 세우기 위해 목숨을 걸었다고 칭찬함.
     * 레슬리 크로거 변호사는 17년간의 긴 싸움 끝에 정의가 실현되었다고 언급함.

GN⁺의 의견

     * 법적 책임: 이 사건은 다국적 기업이 현지에서 저지른 불법 행위에 대해 법적 책임을 질 수 있음을 보여줌.
     * 인권 문제: 기업의 인권 침해 문제에 대한 경각심을 높이는 계기가 될 수 있음.
     * 기업 윤리: 기업이 현지에서 운영할 때 윤리적 책임을 다해야 함을 강조함.
     * 법적 복잡성: 국제적인 법적 분쟁의 복잡성을 이해하는 데 도움이 됨.
     * 유사 사례: 비슷한 사례로는 나이키의 아동 노동 문제 등이 있음.

        Hacker News 의견

     * Alien Tort Statue: 이 법은 환경 및 사회 정의를 위한 글로벌 법적 활동에 사용되었음. 보수적인 법률 운동의 표적이 될 가능성이 있음.
     * Chiquita와 Dole: 이 회사들이 책임을 져야 할 때가 되었음.
     * Firestone과 전쟁군주: Firestone이 전쟁군주 Charles Taylor에게 돈을 지불하여 고무 농장을 보호받았고, 이 돈이 라이베리아 내전 동안 그의 주요 자금원이 되었음.
     * 다른 회사들: Coca-Cola, Drummond, Postobón 같은 회사들도 준군사 그룹과 연관되어 범죄를 저질렀다는 의혹이 있음.
     * Minor Cooper Keith: 댓글 작성자의 가족 집이 United Fruit의 창립자 중 한 명인 Minor Cooper Keith의 옛 부지에 지어졌음.
     * 바나나 공화국: 이 용어는 Chiquita의 역사에서 유래되었음.
     * Chiquita의 AUC 지불: Chiquita가 AUC에 1997년부터 2004년까지 170만 달러 이상을 지불했음. 이는 직원과 자산 보호를 위한 것임.
     * 21세기에도 지속된 관행: 60년대의 ""바나나 공화국"" 시절의 관행이 21세기에도 지속되었다는 사실이 믿기지 않음.
     * 판결에 동의: 판결에 동의하지만, ""Banana giant""라는 용어가 해커뉴스 제목에 등장한 것이 놀라움.
"
"https://news.hada.io/topic?id=15351","첫 번째 Lunar Lander 게임에서 55년 된 버그 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   첫 번째 Lunar Lander 게임에서 55년 된 버그 발견

55년 된 첫 번째 Lunar Lander 게임의 버그 발견

  게임의 역사

     * 1969년, Jim Storer라는 고등학생이 첫 번째 Lunar Landing 게임을 개발함.
     * 1973년까지 이 게임은 가장 인기 있는 컴퓨터 게임이 되었음.
     * 게임은 단순한 텍스트 기반으로, 플레이어는 달 착륙선을 조종하여 연료를 소모하며 착륙을 시도함.

  최적의 연료 소모 전략

     * 최소한의 연료로 착륙하려면 가능한 짧은 시간 내에 착륙해야 함.
     * 초기에는 엔진을 끄고 최대 속도로 하강하다가 마지막 순간에 전력을 다해 연료를 태워 속도를 0으로 만듦.
     * 이 전략을 ""자살 연소""라고 부르며, 타이밍 맞추기가 어려움.

  물리 시뮬레이션

     * Jim Storer는 고등학생임에도 불구하고 매우 정교한 물리 시뮬레이션을 사용함.
     * Tsiolkovsky 로켓 방정식을 사용하고, 로그 함수의 테일러 급수를 활용하여 정확도를 높임.
     * 그의 아버지가 물리학자였고, 방정식 유도에 도움을 줌.

  착륙 시의 문제점

     * 로켓 방정식은 지면에 닿기 전까지는 잘 작동함.
     * 착륙선이 지면에 닿는 순간의 충돌을 정확히 계산하는 것이 어려움.
     * Jim의 코드에는 분모에 제곱근이 포함된 잘못된 방정식이 있었음.

  버그의 발견

     * Jim의 코드에서 분모에 있어야 할 2가 빠져 있었음.
     * 이로 인해 착륙 시점이 잘못 계산되었고, 착륙선이 지면에 닿지 않는 것으로 인식됨.
     * 이 버그를 수정하면 착륙 속도가 크게 개선됨.

  결론

     * 1969년 고등학생이 만든 게임으로는 매우 인상적인 작업이었음.
     * 이 버그는 거의 55년 동안 발견되지 않았음.
     * 게임은 여전히 재미있었고, 많은 사람들이 즐겼음.

GN⁺의 의견

     * 역사적 가치: 이 게임은 초기 컴퓨터 게임의 역사적 가치를 지니고 있으며, 당시의 기술적 한계를 보여줌.
     * 교육적 가치: 고등학생이 만든 게임이지만, 복잡한 물리학과 수학 개념을 포함하고 있어 교육적 가치가 높음.
     * 버그의 중요성: 작은 코드 오류가 큰 영향을 미칠 수 있다는 점에서 소프트웨어 개발의 중요성을 강조함.
     * 현대 게임과의 비교: 현대 게임과 비교했을 때, 당시의 기술적 한계와 창의성을 이해하는 데 도움이 됨.
     * 기술 발전: 이 게임을 통해 당시와 현재의 기술 발전을 비교하고, 미래의 가능성을 탐구할 수 있음.

        Hacker News 의견

     * Jim Storer가 최초의 Lunar Lander 게임의 저자였음을 발견하고 인터뷰를 진행했음. 이후 소스 코드를 제공받아 매우 흥미로웠음.
     * Storer가 고등학교 졸업 후 게임을 잊고 있었음. 몇 달 전 이메일을 받고 나서야 자신이 만든 게임 외에 다른 Lunar Lander 게임이 있다는 것을 알게 되었음.
     * 1969년 고등학생이 만든 게임이라는 점이 인상적임. 우주 시대에 자란 기술적 관심이 많은 사람들에게 큰 영향을 미쳤을 것 같음.
     * 인터뷰에서 Storer가 미적분에 능숙했다고 언급함. 우주와 로켓에 관심이 있다면 Lunar Lander 게임을 프로그래밍하는 것이 자연스러웠을 것임.
     * 1970년대 중반에 2D 벡터 그래픽스 기반의 Moon Lander 게임을 작성했음. 연료가 부족하거나 너무 빠르면 충돌, 그렇지 않으면 미국 국기가 보였음.
     * 소스 코드를 버린 것을 후회함. 역사적으로 초기 그래픽 게임이었고, 간단한 에뮬레이션으로 부활할 수 있었음.
     * 1973년까지 Lunar Lander가 가장 인기 있는 컴퓨터 게임이 되었음. 첫 프로그래밍 책에서 이 게임을 시도했지만 많은 버그와 복잡한 논리로 인해 실패했음.
     * 연료 최적화 착륙 전략을 제안함. 특정 시점에 저추력을 사용하여 부드럽게 착륙하는 방법을 설명함.
     * 1976년에 HP-25 계산기에서 이 게임을 처음 플레이했음. 동일한 공식을 사용했음.
     * 1960년대에 PDP-1에서 Spacewar를 플레이했지만 Lunar Lander 게임은 없었음. Storer가 최초였음.
     * 특별한 공식을 사용하지 않고 매 프레임마다 질량과 가속도를 재계산하는 방법을 제안함. 프레임 속도가 낮을수록 정확도가 떨어질 수 있음.
     * 1970년대 중반에 Wang 2200 BASIC으로 포팅된 게임을 플레이했음. 최대 추력을 적용하는 기술을 배웠음.
     * PDP11용 펀치 테이프를 아직도 보유하고 있음. 누구에게 줄지 모름.
"
"https://news.hada.io/topic?id=15353","두 번째 슬라이드에서 시작하는 프레젠테이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        두 번째 슬라이드에서 시작하는 프레젠테이션

프레젠테이션은 두 번째 슬라이드에서 시작하기

  ""in media res"" 기법

     * 기술 프레젠테이션의 문제점: 기술 프레젠테이션은 배경 설명이 필요하지만, 이는 청중의 관심을 끌지 못함.
     * 해결책: 프레젠테이션을 두 번째 슬라이드에서 시작하는 기법을 사용함.
          + 기법 설명: 처음에 배경 설명을 쓰고, 첫 번째와 두 번째 슬라이드를 바꾸는 것.
          + 예시: 소설에서 첫 장을 액션으로 시작하고, 두 번째 장에서 주인공을 소개하는 방식.
     * 효과: 청중이 문제에 더 집중하게 되고, 배경 설명도 더 흥미롭게 받아들임.

  기술 프레젠테이션 적용 예시

     * 기존 방식: JIT 컴파일러 최적화 프레젠테이션에서 배경 설명(기본 개념, 성능 튜닝, 아키텍처)부터 시작함.
     * 새로운 방식: 첫 슬라이드에 성능 프로파일, 코드 변경, 그리고 그 결과를 보여줌.
          + 결과: 최적화가 실패했음을 보여주고, 청중이 문제 해결에 더 집중하게 만듦.

  청중의 반응 유도

     * 문제 제시: 청중에게 문제를 제시하면, 그들은 문제 해결에 집중하게 됨.
     * 공동 엔지니어링: 청중이 프레젠테이션과 함께 문제를 해결하는 느낌을 받게 함.

GN⁺의 의견

     * 흥미 유발: 이 기법은 청중의 관심을 끌고 유지하는 데 효과적임.
     * 적용 가능성: 다양한 기술 프레젠테이션에 적용 가능하며, 특히 복잡한 주제를 다룰 때 유용함.
     * 주의사항: 첫 슬라이드에서 너무 많은 정보를 제공하면 오히려 혼란을 줄 수 있음.
     * 대안: 비슷한 기법으로는 '문제-해결' 구조를 사용하는 것도 있음.
     * 기술 도입 시 고려사항: 이 기법을 사용할 때는 청중의 배경 지식 수준을 고려해야 함.

        Hacker News 의견

     * 좋은 부분부터 시작: 데모를 할 때는 설치 과정이나 설정 방법을 설명하기보다는 먼저 흥미로운 결과를 보여주고, 그 후에 과정을 설명하는 것이 효과적임.
     * 바로 본론으로: PyCon에서 발표할 때 서론을 생략하고 바로 핵심 내용을 시작했더니 청중의 관심을 끌 수 있었음. 흥미로운 주제와 유머를 결합하면 효과적임.
     * 첫 슬라이드는 간단히: 첫 슬라이드는 단순히 발표자와 주제를 소개하는 용도로만 사용하고, 빠르게 다음 슬라이드로 넘어가는 것이 좋음. 슬라이드 노트가 포함된 새로운 형식이 필요할 수도 있음.
     * 스토리텔링 기법 사용: 기술 발표도 스토리텔링 기법을 사용하여 흥미를 끌어야 함. 예를 들어, 사건을 소개하고, 클라이맥스를 향해 빌드업한 후 결론을 내리는 구조가 효과적임.
     * 중요 정보 먼저 제공: 발표 시작 시 가장 중요한 정보를 먼저 제공하여 바쁜 청중이 필요한 정보를 빠르게 얻을 수 있게 함.
     * 명확한 요약 제공: 발표 시작 시 전체 내용을 간략히 요약하여 청중이 언제 집중해야 할지 알 수 있게 함.
     * 이미지로 호기심 유발: 첫 슬라이드에 텍스트 없이 주제와 관련 없어 보이는 이미지를 사용하여 청중의 호기심을 유발하고, 그 후에 문제 제기와 연구 질문을 제시하는 방식이 효과적임.
     * 빠른 소개: 발표 시작 시 자기소개와 주제 소개를 빠르게 진행하여 청중의 관심을 유지함. 30초 내외로 간결하게 설명하는 것이 좋음.
"
"https://news.hada.io/topic?id=15434","마르코프 체인 몬테카를로로서의 3D Gaussian Splatting","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 마르코프 체인 몬테카를로로서의 3D Gaussian Splatting

3D 가우시안 스플래팅을 마르코프 체인 몬테카를로로 변환

  개요

     * 3D 가우시안 스플래팅은 신경 렌더링에서 인기를 끌고 있음.
     * 기존 방법은 가우시안을 배치하기 위해 복잡한 클로닝 및 분할 전략에 의존함.
     * 이러한 방법은 초기화에 따라 품질이 낮아질 수 있음.

  새로운 접근 방식

     * 3D 가우시안을 장면의 물리적 표현을 설명하는 확률 분포에서 추출한 무작위 샘플로 간주함.
     * 이를 통해 3D 가우시안 업데이트를 단순히 노이즈를 도입하여 확률적 경사 하강법(SGLD) 업데이트로 변환함.
     * 기존의 밀도화 및 가지치기 전략을 MCMC 샘플의 결정론적 상태 전환으로 재작성함.

  주요 기법

     * 가우시안의 '클로닝'을 샘플 확률을 대략적으로 유지하는 재배치 방식으로 수정함.
     * 사용되지 않는 가우시안을 제거하는 정규화를 도입하여 가우시안의 효율적 사용을 촉진함.

  결과

     * 다양한 표준 평가 장면에서 개선된 렌더링 품질을 제공함.
     * 가우시안의 수를 쉽게 제어할 수 있음.
     * 초기화에 대한 강건성을 보임.

  GN⁺의 의견

     * 이 기사는 3D 가우시안 스플래팅의 새로운 접근 방식을 소개하여 초기화에 대한 의존성을 줄이고 품질을 향상시킴.
     * 마르코프 체인 몬테카를로(MCMC)와 확률적 경사 하강법(SGLD)을 활용한 점이 흥미로움.
     * 이 기술은 신경 렌더링 분야에서 더 나은 품질의 이미지를 생성하는 데 도움이 될 수 있음.
     * 초기화에 대한 강건성을 제공하여 실용적인 응용 가능성을 높임.
     * 다른 신경 렌더링 기술과 비교하여 장단점을 분석해 볼 필요가 있음.

        Hacker News 의견

     * 원래의 3DGS 기술은 전통적인 COLMAP 프로세스를 사용하여 생성된 포인트 클라우드로 초기화된다는 점이 좋음.
     * 논문의 결과가 좋고, 스플랫 위치를 선택하는 방법에 대한 더 나은 형식적 기반이 마음에 들지만, 상단 이미지가 무엇을 나타내는지 이해하지 못함.
     * 가우시안 스플래팅은 매우 인상적인 기술이며, 현재는 VR에서 포토리얼리스틱한 장면을 보여주는 최고의 방법임. 더 많은 실용적인 사용 사례가 있기를 바람.
     * 이 논문의 주요 차이점이 각 업데이트에 소량의 노이즈를 추가하는 것인지 명확히 하고 싶음. 논문을 다 읽었지만 여전히 확신이 서지 않음.
     * 3D 스플래팅의 ""소비자"" 응용 프로그램이 무엇인지 궁금함. 매우 멋져 보이지만, 최종 사용자 기술이 될지 이해하지 못함.
     * PDF가 하이퍼레프를 사용하지 않아 아쉬움. 링크를 클릭하여 인용된 참조로 이동하는 것이 더 편리함.
     * Inria(비상업적 라이선스) 방법을 기반으로 한 또 다른 논문이며, 여러 오픈 소스 대안이 존재함.
     * 텍스트를 이해하지 못함.
     * 기존의 3D 가우시안 스플래팅 접근 방식과 달리, 우리는 가우시안을 배치하고 최적화하는 훈련 과정을 샘플링 과정으로 해석함. 실질적인 차이점이 무엇인지 궁금함. MCMC 자체가 더 높은 확률에서 샘플링하는데, 단순히 분포의 낮은 끝에서 더 많이 샘플링하는 것인지, 아니면 이전 알고리즘을 형식화하여 다양한 매개변수를 조작하기 쉽게 만드는 것인지 궁금함.
"
"https://news.hada.io/topic?id=15454","애플이 승리합니다. 애플 인텔리전스 및 어그리게이션으로, 애플은 AI에서 우세한 위치로 올라서게 됩니다. ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       애플이 승리합니다. 애플 인텔리전스 및 어그리게이션으로, 애플은 AI에서 우세한 위치로 올라서게 됩니다.

   Apple is the Aggregator
     * Apple은 스마트폰용 OS를 소유하고 있으며, (MS의 실수와 달리) 이를 통해 사용자의 정보에 대한 신뢰성을 보장함
     * Apple은 자신들이 사용하기로 결정한 정보를 완전히 이해함
     * Apple은 AI 플랫폼에 대한 접근을 게이트키핑함
"
"https://news.hada.io/topic?id=15438","내 오픈소스 프로젝트가 Github 스타 천 개를 달성하기까지의 여정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 내 오픈소스 프로젝트가 Github 스타 천 개를 달성하기까지의 여정

   안녕하세요, AutoRAG 만들고 있는 김동규입니다.
   AutoRAG가 깃허브 스타 천 개를 달성했습니다. 지난 반 년동안 순수 공돌이 3명이 함께 AutoRAG를 만들며 이렇게 AutoRAG를 알렸던 노력들에 대해 글을 써보았습니다.

   오픈소스를 만드시는 모든 분들에게 저희의 경험이 도움이 되기를 바랍니다!

   주제와 정확히 맞지는 않는 질문이긴 한데요, 검색시에 pgvector를 지원하실 계획이 있는지 궁금합니다

   저는 올해 5k 돌파했는데
   체감상 100개가 가장 어렵고, 1k만 넘으면 스타가 꾸준히 쌓이더라고요
   고생 많으셨습니다
"
"https://news.hada.io/topic?id=15441","Radius – Meetup.com 대체제. 무료 커뮤니티 호스팅 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Radius – Meetup.com 대체제. 무료 커뮤니티 호스팅 플랫폼

     * 간단하고 사용하기 쉬움: 복잡한 대시보드가 필요 없는 사용자에게 적합함. 그룹과 이벤트 생성이 빠르고 직관적이며, 커뮤니티에 집중할 수 있게 설계됨.
     * 무료 그룹 생성: 주최자는 그룹을 만들고, 멤버를 초대하며, 이벤트를 무료로 게시할 수 있음. 초안 이벤트 생성, RSVP 제한 설정, 멤버 이메일 내보내기 등의 기능 제공.
     * 다양한 그룹 환영: 작은 러닝 클럽부터 큰 컨퍼런스와 조직까지 모든 종류의 그룹을 환영함. 곧 더 많은 기능이 필요한 큰 그룹을 위한 Basic 및 Pro 플랜이 출시될 예정임.

  곧 출시될 검색 기능

     * 발견의 용이성: 주변에서 일어나는 흥미로운 이벤트를 쉽게 찾을 수 있도록 그룹 및 이벤트 검색 기능을 곧 출시할 예정임. 현재 이벤트는 Google Events에도 자동으로 등록되어 사람들이 쉽게 찾을 수 있음.

GN⁺의 의견

     * 커뮤니티 관리의 용이성: 이 플랫폼은 초보 소프트웨어 엔지니어가 커뮤니티를 쉽게 관리하고 이벤트를 조직할 수 있게 도와줌.
     * 무료 사용의 장점: 무료로 제공되는 기능이 많아 초기 비용 부담이 적음. 특히 작은 그룹이나 비영리 단체에 유용함.
     * 검색 기능의 기대: 곧 출시될 검색 기능은 사용자들이 더 쉽게 이벤트를 찾고 참여할 수 있게 해줄 것으로 기대됨.
     * 경쟁 제품: Meetup, Eventbrite 등과 같은 다른 이벤트 호스팅 플랫폼과 비교해볼 만함. 각 플랫폼의 기능과 비용을 고려해 선택하는 것이 좋음.

        Hacker News 의견

     * 스팸 문제: 앱이 커지면 스팸 그룹이 많아질 위험이 있음. 고품질 그룹을 홍보하는 시스템이 필요함.
     * 사용자 생성 콘텐츠의 문제: 혐오 발언이나 부적절한 콘텐츠 등 다양한 문제 발생 가능성.
     * 온라인 데이팅 사이트로의 변질: 초기에 이 문제를 해결할 필요가 있음.
     * 페이스북 그룹과의 경쟁: 페이스북 그룹이 큰 경쟁자가 될 수 있음.
     * 기능 과다: 모든 기능을 다 넣으려 하지 말고, 명확한 비전을 가지고 중요한 기능을 선택해야 함.
     * 기능보다 네트워크 효과: 이벤트 주최자는 많은 기능보다 네트워크 효과를 원함. 적절한 가격과 사람들을 끌어들이는 것이 중요함.
     * 가격 전략 문제: Meetup의 가격 전략에 불만이 많음. 대안이 필요함.
     * 자동 매칭 카풀 사이트: 위치 기반으로 최적의 그룹을 자동 매칭하는 카풀 사이트를 만들었음. 협업 가능성 있음.
     * Meetup의 문제점: 웹사이트와 앱의 성능이 나쁘고, 무료 티어가 없어 작은 그룹이 유지되기 어려움.
     * 비활성 그룹 문제: 비활성 그룹이 많아질 가능성 있음. 이름의 마케팅 문제도 있음.
     * 새로운 옵션의 필요성: 이벤트 사이트가 분산되어 있고, 새로운 도구가 필요함.
     * 발견 가능성: Meetup은 자연스럽게 이벤트를 발견할 수 있는 장점이 있음. 다른 사이트는 광고가 필요함.
     * 수익 모델: Meetup은 재정적으로 어려움을 겪고 있음. 새로운 플랫폼의 수익 모델이 중요함.
     * 지속 가능성: 새로운 플랫폼이 지속 가능할지에 대한 의문이 있음. 투명한 목표와 계획이 필요함.
     * 사용자 경험 문제: ""Notify me"" 버튼이 계정 생성으로 이어져 사용자가 혼란스러워함. 이메일 업데이트를 쉽게 받을 수 있도록 개선 필요함.
     * Meetup의 유용성 문제: Meetup이 유용하지 않다고 느끼는 사용자 많음. 가짜 프로필 문제와 업셀링 문제 있음.
     * 이벤트 가이드라인: 이벤트 가이드라인이 명확하지 않음. 콘텐츠 관리 정책도 부족함.
     * 발견 가능성: OpenStreetMap 커뮤니티 이벤트를 위한 사이트 목록에 추가함. 발견 가능성이 가장 중요함.
"
"https://news.hada.io/topic?id=15343","아직 Vision Pro 잘 사용하고 계신가요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       아직 Vision Pro 잘 사용하고 계신가요?

     * 실제로 아직도 잘 사용하고 있는지에 대한 사람들의 답변들 정리

polo

     * 매일 거의 사용함. 정기적으로 여행을 다니는데 호텔, 비행기, 기차 등 어디에서나 크고 선명한 개인 디스플레이를 갖는 것이 좋음. 생산성이 훨씬 더 높아짐.
     * 컨텐츠 소비도 좋지만 AVP가 컨텐츠 제작 방식을 바꿔놓음. 파노라마와 입체 사진을 훨씬 더 많이 찍게 됨 (iOS의 Spatialify가 잘 작동함).
     * Insta X4 360 카메라도 구입함. Apple의 몰입형 컨텐츠에 비하면 해상도가 한참 모자라지만, 여전히 추억을 다시 살리는 정말 좋은 방법이 될 수 있음.
     * 작년부터 여행 중에 눈에 띄는 조각상과 기타 예술품/물품을 3D 스캔(Scaniverse 사용)하기 시작함. AVP를 사용하면 내 환경으로 가져와 배치하기가 정말 쉬움.
     * 일할 때 종종 좋아하는 조각상을 옆에 두어 함께하는 기분을 느끼고 여행을 떠올리게 함.
     * 4개월 사용 후에도 여전히 정말 재미있음. 기술적 관점에서 볼 때 이미지 품질, 안정성, 3D 배치, 환경 통합 등 면에서 놀라움.
     * 정말 마음에 듦. 이 기술이 점점 더 발전하기를 기대함.

sujal

     * 가족이 함께 보기 싫어하는 영화를 보기 위해 2주에 한 번씩 여전히 사용함.
     * 출장 갈 때 호텔에서도 사용함. 필요할 때마다 풀 사이즈 모니터를 갖는 것이 좋음.
     * Vision OS 2.0의 개선사항이 기대됨.
     * 아직 공공장소에서 사용하는 것이 불편함. 과시적인 느낌이 듦.
     * 하지만 다음에 가족과 함께 비행기를 탈 때 시도해 볼 예정임. 주변에 신뢰하는 사람들이 있으면 이동 중에 몰입하는 것에 더 기꺼이 임할 수 있을 것임.

tsmarsh

     * 업무 설정의 큰 부분을 차지함. 어디서나 좋은 작업 환경을 갖게 되어 업무 방식이 변화됨.
     * 영화를 보는 데 선호하는 장소임. 단초점 프로젝터와 사운드 시스템이 있지만 AVP를 더 선호함. 이미지가 너무 선명하고 3D가 너무 좋아서 괜찮은 홈 무비 시어터보다 낫음.
     * F1을 시청하는 데 선호하는 장소임.
     * 환경이 진정으로 마음을 진정시켜 줌.
     * 이 플랫폼에서는 Breathe가 잘 작동함. 워치에서는 짜증남.
     * 공간적인 것이 가능하다면 모든 스포츠와 다큐멘터리를 볼 것임. 미래가 기대됨.

kayge

     * 오랜 시간 코딩할 때는 여전히 초광폭 물리적 모니터를 선호함 (아마도 작은 글꼴 크기를 선호하는 내 잘못일 것임).
     * 하지만 티켓 처리, 이메일, 터미널에서 빠른 코드 변경 등에는 꽤 좋음.
     * 결국 서드파티 헤드 스트랩을 사용하여 편안함을 크게 향상시킴.
     * 하지만 다른 사람들은 기본 스트랩으로 장시간 사용해도 문제가 없다고 함. 개인차가 있을 수 있음 :)

archagon

     * 출시후 바로 샀지만 한달후에 반품했음
     * Apple Vision Pro의 사이징 옵션이 혼란스러움. 앱으로 측정한 사이즈가 느슨한 느낌이 들었음.
     * 현재 사용 가능한 VR 컨텐츠가 많지 않음. 인상적이지만 짧은 클립 몇 개뿐임.
     * 미디어를 볼 때 고립감을 느낌. 간식을 먹거나 편안해지기가 훨씬 더 어려움.
     * 제스처 컨트롤은 본질적으로 부정확하고 자주 잘못 발동됨. 물리적 버튼이나 터치 입력에 비해 심각한 퇴보임. 시선을 통한 선택도 자연스럽지 않게 느껴짐.
     * 게임을 위해서는 Quest와 같은 컨트롤러가 필수적임. 제스처 컨트롤로는 많은 것을 할 수 없고, 게임패드로는 가상 세계와 직접 상호작용할 수 없음.
     * Beat Saber와 같은 킬러 앱이 없음. 4000달러짜리 기기에서 땀을 흘리는 것이 불편할 것 같음.
     * Mac 디스플레이 미러링은 지연이 있고, 약간 거칠어 보이며, 120Hz를 지원하지 않음. 기존 물리적 디스플레이보다 확실히 나쁨.
     * 서드파티 기계식 키보드, 마우스, 헤드폰을 사용하고 싶지만, 블루투스 액세서리만 실제로 지원됨.
     * 그다지 휴대성이 좋지 않음. 캐리어에 어떻게 가져갈 수 있을지 잘 모르겠음.
     * 장치를 사용하면 꽤 짧은 시간 후에 두통이 옴. 답답한 느낌도 듦.
     * Apple의 승인 없이는 아무것도 만들거나 실행할 수 없음. 플랫폼이 개방되거나 개방되도록 만들어지기 전까지는 범용 컴퓨터처럼 느껴지지 않고 어떤 것의 ""미래""가 될 가능성도 없어 보임.

pram

     * 주로 맥 디스플레이로 사용함. 그리고 crankin’ my hog 할때도 (번역은 검열합니다..)

bitcurious

     * 첫 달 안에 반품함. 공유 Apple ID 요구사항 때문에 작업에 사용할 수 없었음.
     * 손 추적이 너무 지연되어 게임에 사용할 수 없었음.
     * 영화/TV 시청만 장점으로 남았는데, 혼자 보는 것보다 사회적으로 보는 것을 선호함.
     * 솔직히 꽤 실망스러웠음. 훨씬 더 멋질 거라고 생각했음.
     * 편집: 사실 정말 멋진 것이 있었는데, 충분히 언급되지 않는 것 같음. 요세미티에서 용변을 보는 것. 미래주의의 정점.

jumploops

     * 몇 달 동안 만지지 않음. 최근 국제선 비행에 가져가는 것을 고려해 봤지만, 유아와 함께 여행해서 몇 주 동안 끌고 다니고 싶지 않았음.
     * OS 업데이트에 대해 기대하고 있음. 항상 목표는 자세 모드의 대안으로 업무에 사용하는 것이었지만, 처음에는 익숙해지기 어려웠음.
     * 요즘 영화 외에 다른 킬러 앱이 있는지 궁금함.

ourguile

     * 더 몰입하고 싶은 영화, 보통 Criterion을 통한 영화를 보는 데 사용함.
     * 여름이 되면서 야외에서 보내는 시간이 늘었지만, 겨울에는 훨씬 더 많이 사용
     * 환경을 좋아하고 더 많은 선택지가 있으면 좋겠음. 더 많은 스트리밍 플랫폼에서도 환경을 제공하면 좋겠음.
     * Disney+의 환경은 매우 잘 만들어짐.

stmpjmpr

     * 영화와 TV 시청, 그리고 가끔 가상 모니터로 사용함.
     * 꽤 많이 여행할 때도 가져갔는데, 장거리 국제선 비행에서 좋음.

JeremyHerrman

     * 맥 가상 디스플레이를 통해 주로 업무용으로 주 몇 회 계속 사용 중임.
     * 밤늦게까지 일해야 할 경우, 몰입형 주간 환경에 있으면 깨어 있는 데 도움이 되고 노트북 화면과 어두운 방 사이의 높은 대비 차이를 피할 수 있음.

th33ngineer

     * 매일 아침 키보드와 함께 사용하여 동영상을 보고, 이메일과 메시지를 확인하고, 때로는 친구들과 통화함.
     * 아내가 주변에 있을 때는 자신이 하는 일을 보여주고 싶어서 랩톱을 대신 사용하므로 저녁에는 그다지 많이 사용하지 않음.

   crankin’ my hog 🌝 세상에..

   우동..이군요

   음 저도 사실 가끔 영화감상이나 하고, 뭔가 새로운 컨텐츠 나왔나 들여다 볼때만 사용합니다.
   요즘 코딩을 안해서 가상 화면으로 쓰는 일이 많지 않기도 하고, 여행을 가는 것도 아니어서요.
   이번에 visionOS 2 나오고, 한국어 지원이 되면 좋을 것 같았는데, 한국은 또 출시국에서 빠졌네요.
   아직 대중화는 요원한듯 합니다.

   바쁘면 잘 못 쓰고 여유가 생겨야 쓰게 되고
   저는 더워지면서 못 쓰겠더라구요
   이번 WWDC 키노트는 쓰고 봤는데 몰입감은 역시 최고
   1시간 30분 정도 정자세로 보니 힘들더군요

   visionOS 2에 한국어 지원은 들어갔습니다만 출시는 다른 얘기죠 ㅜㅜ 콘텐츠와 앱이 쏟아져 나와야 할 듯 싶은데
   enterprise API를 보니 애플도 개인 시장보다 기업 시장을 우선하는 게 아닌가 싶네요
"
"https://news.hada.io/topic?id=15381","Effect - TypeScript로 강력한 앱 구축을 도와주는 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Effect - TypeScript로 강력한 앱 구축을 도와주는 라이브러리

     * ""The missing Standard Library for TypeScript""
     * 복잡한 동기/비동기 프로그램을 쉽게 만들 수 있도록 설계
     * 코드를 더욱 Composable, Reusable, Testable 하게
     * Maximum Type-Safety(에러 핸들링 포함)
     * 다양한 라이브러리 제공
     * 클러스터링 & 워크플로우 제공 (알파버전)
     * 폭넓은 호환성
          + Node, Deno, Bun, Cloudflare Workers, Chrome
          + React, Solid.JS , Vite, Next.JS, Tauri
     * 주요 특징
          + 동시성(Concurrency) : Fiber 기반 동시성 모델을 통해 고도로 확장 가능하고 초저지연 애플리케이션을 구현 가능
          + 조합성(Composability) : 작고 재사용 가능한 구성 요소를 사용하여 유지 관리가 용이하고 읽기 쉬우며 유연한 소프트웨어를 구축 가능
          + 리소스 안전성(Resource Safety) : 프로그램이 실패하더라도 리소스의 획득과 해제를 안전하게 관리 가능
          + 타입 안전성(Type Safety) : 타입 추론과 타입 안전성에 중점을 두고 있어, TypeScript 타입 시스템을 최대한 활용 가능
          + 오류 처리(Error Handling) : 내장 오류 처리 기능을 사용하여 구조화되고 신뢰할 수 있는 방식으로 오류를 처리 가능
          + 비동기성(Asynchronicity) : 코드가 동기식이든 비동기식이든 동일하게 보이도록 작성 가능
          + 관측 가능성(Observability) : 완전한 추적 기능을 통해 프로그램의 실행을 쉽게 디버그하고 모니터링 가능

  왜 Effect 인가?

     * 프로그래밍은 어려움
     * 라이브러리와 앱을 만들 때 많은 도구를 사용해 복잡성을 관리함
     * Effect는 TypeScript 프로그래밍에 대한 새로운 사고방식을 제시함
     * Effect 생태계의 도구를 통해 더 나은 애플리케이션과 라이브러리를 구축할 수 있음
     * 이를 통해 TypeScript 언어와 타입 시스템을 더 잘 이해하고 프로그램을 더 신뢰성 있고 유지 관리하기 쉽게 만들 수 있음.

    Effect 패턴

     * 일반적인 TypeScript 코드에서는 함수가 성공하거나 예외를 던질 것이라고 가정함
          + 예: divide 함수는 0으로 나누면 예외를 던짐
     * 타입만 봐서는 이 함수가 예외를 던질 수 있다는 것을 알 수 없음
     * 코드베이스에 수백, 수천 개의 함수가 있을 때 이 문제는 커짐
     * 예외 처리를 잊기 쉽고, 관리하기 어려움
     * TypeScript의 컴파일러는 버그, 도메인 오류 및 일반적인 복잡성에 대한 첫 번째 방어선임

    Effect 패턴 적용하기

     * Effect의 주요 인사이트는, 성공 값뿐만 아니라 오류와 ""컨텍스트""를 추적하기 위해 타입 시스템을 사용할 수 있다는 것
          + 예: divide 함수의 Effect 버전은 예외를 던지지 않고, 오류를 호출자에게 전달함
     * 오류와 성공 값을 관리하는 기능을 제공
     * 컨텍스트 추적을 통해 모든 인수를 전달하지 않고도 함수에 추가 정보를 제공할 수 있음
          + 예: 테스트 중 외부 서비스의 실제 구현을 모의 객체로 교체 가능

import { Effect } from ""effect""

const divide = (a: number, b: number): Effect.Effect<number, Error, never> =>
  b === 0
    ? Effect.fail(new Error(""Cannot divide by zero""))
    : Effect.succeed(a / b)

    Effect 생태계

     * Effect의 독특한 인사이트와 다른 도구들이 결합되어 복잡한 애플리케이션을 쉽게 만들 수 있는 풍부한 라이브러리 생태계가 형성됨
     * 과거에는 불가능해 보였던 것들이 이제는 평범하게 됨
     * Effect 생태계는 빠르게 성장 중이며, Effect의 GitHub에서 확인 가능함

    바퀴를 재발명하지 말 것

     * TypeScript 애플리케이션 코드에서는 종종 같은 문제를 반복적으로 해결함
     * 외부 서비스, 파일 시스템, 데이터베이스와의 상호작용은 모든 애플리케이션 개발자에게 공통된 문제임
     * Effect는 이러한 문제들에 대한 표준화된 솔루션을 제공하는 풍부한 라이브러리 생태계를 제공함
     * 여러 종속성을 설치할 필요 없이 Effect는 많은 문제를 한 번에 해결함

    실용적인 문제 해결

     * Effect는 Scala와 Haskell에서 영감을 받음.
     * 그러나 Effect의 목표는 실용적인 도구 키트를 제공하여 TypeScript 애플리케이션과 라이브러리를 구축할 때 직면하는 일상적인 문제를 해결하는 것임

    즐기면서 배우기

     * Effect를 배우는 것은 재미있음
     * 많은 개발자들이 실무에서 Effect를 사용해 실제 문제를 해결하고 있음
     * Effect 생태계의 일부를 먼저 사용해보고, 점점 더 많은 도구를 활용할 수 있음
     * 처음에는 Effect의 개념이 낯설 수 있으나, 문서를 읽고 핵심 개념을 이해하는 데 시간을 들이면 나중에 더 고급 도구를 사용할 때 도움이 됨
     * Effect 커뮤니티는 항상 학습과 성장을 도울 준비가 되어 있음. Discord나 GitHub를 참고할 것

   rust 가 가지고 있는 핵심이랑 비슷한 궤를 가지고 있네요.

   좀 더 써봐야 알 것 같지만 fp-ts 에 비하면 훨씬 쾌적하게 사용할 수 있네요

   fp-ts 가 3.0 개발을 안하고 effect로 합류하기로 했습니다.

   fp-ts 를 쓴다면 effect를 고려해 보시면 좋습니다.

   https://x.com/MichaelArnaldi/status/1626975031048773635
   https://effect.website/docs/other/fp-ts
"
"https://news.hada.io/topic?id=15328","세일즈포스 대안 현대적 CRM, Twenty","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        세일즈포스 대안 현대적 CRM, Twenty

오픈소스 CRM 소개

  고객 데이터 운영 시스템

     * 고객 데이터 기반: 고객 데이터를 기반으로 하여 고유한 워크플로우에 맞게 조정 가능함.
     * 빠르게 성장하는 기업: 빠르게 성장하는 기업의 변화하는 비즈니스 요구사항에 맞게 설계됨.

  주요 기능

     * 커스텀 오브젝트: 데이터를 커스텀 오브젝트로 모델링할 수 있음.
     * 강력한 API: GraphQL과 REST API 제공.
     * 다양한 데이터 소스 연결: Postgres, Stripe 등 다양한 데이터 소스와 연결 가능 예정.

  CRM의 필수 기능

     * 작업 관리: 중요한 거래를 놓치지 않도록 도와줌.
     * 칸반 뷰: 워크플로우를 시각적으로 확인 가능.
     * 리치 노트: 텍스트 블록과 마크다운을 사용한 풍부한 노트 작성 가능.
     * 이메일 동기화: 이메일을 동기화하여 CRM을 최신 상태로 유지.

  오픈소스의 힘

     * GPL 라이선스: 소프트웨어를 소유할 수 있으며, SaaS의 단순함과 오픈소스의 자유 및 비용 절감 혜택을 누릴 수 있음.
     * 활발한 커뮤니티: 수백 명의 개발자가 전문 지식을 공유하고 지원을 제공하는 환영하는 커뮤니티.
     * 오픈 로드맵: 기능이 부족하면 토론을 시작하거나, 문제를 보고하거나, 코드를 기여하거나, 리포지토리를 포크할 수 있음.
     * 디자인 보안: 글로벌 커뮤니티의 집단적인 감독으로 빠르게 문제를 식별하고 해결할 수 있음.

  커뮤니티의 의견

     * 긍정적인 피드백: 많은 개발자들이 프로젝트에 기여하고 있으며, 오픈소스 CRM 도구의 필요성을 충족시킨다는 의견.
     * 기능과 디자인: 커스터마이징이 용이하고 기능적이며 아름다운 디자인을 갖춘 CRM이라는 평가.

GN⁺의 의견

     * 흥미로운 점: 오픈소스 CRM은 비용 절감과 커스터마이징의 자유를 제공하여 많은 기업들에게 매력적임.
     * 도입 시 고려사항: 오픈소스 소프트웨어는 자체적으로 유지보수와 보안 관리를 해야 하므로 충분한 기술적 역량이 필요함.
     * 경쟁 제품: Salesforce, Hubspot과 같은 상용 CRM과 비교했을 때 기능 면에서 부족할 수 있으나, 커스터마이징과 비용 면에서 유리함.
     * 기술 선택의 득과 실: 오픈소스 CRM을 선택하면 비용 절감과 커스터마이징의 자유를 얻을 수 있지만, 기술 지원과 유지보수의 부담이 따름.
"
"https://news.hada.io/topic?id=15428","EU 이사회, 목요일에 Chat Scanning 제안 투표 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  EU 이사회, 목요일에 Chat Scanning 제안 투표 예정

디지털 통신의 프라이버시 종말

  디지털 통신의 프라이버시 종말

     * EU 위원회는 모든 개인 채팅, 메시지, 이메일을 자동으로 검색하도록 제공자에게 의무화하는 제안을 함.
     * 목적: 아동 성 착취 자료(CSEM) 처벌.
     * 결과: 메시지와 채팅의 실시간 대규모 감시와 디지털 통신의 프라이버시 종말.

  모든 스마트폰에서의 채팅 통제 2.0

     * 2022년 5월 11일: EU 위원회는 모든 이메일 및 메신저 제공자에게 채팅 통제 검색을 의무화하는 제안을 발표함.
     * 현재: 일부 미국 통신 서비스(GMail, Facebook/Instagram Messenger 등)만 자발적으로 채팅 통제를 적용 중.
     * 의무화 제안: 354%의 스캔 보고서 증가 예상.
     * 의회 입장: 거의 만장일치로 무차별 채팅 통제 반대.

  채팅 통제 2.0 제안

     * EU 위원회의 채팅 통제 제안: 채팅 통제, 네트워크 차단, 메시지 및 채팅에 대한 연령 확인 의무화, 앱스토어 검열 등 포함.
     * EU 의회의 수정안: 채팅 통제 제거, 선택적 네트워크 차단, 연령 확인 의무화 제거 등.
     * EU 이사회 초안: 위원회와 유사한 입장.

  EU 정부의 입장

     * 대부분의 EU 정부는 원래의 극단적인 제안을 지지함.
     * 일부 정부는 이러한 입장을 막고 있음(소위 차단 소수).

  협상: 타임라인

     * 2020년: EU 위원회는 ""임시"" 법안을 제안하여 모든 개인 채팅, 메시지, 이메일을 검색할 수 있도록 함.
     * 2021년 7월 6일: 유럽 의회는 메시징 및 이메일 제공자에 대한 자발적 채팅 통제를 허용하는 법안을 채택함.
     * 2022년 5월 11일: EU 위원회는 서비스 제공자에게 채팅 통제를 의무화하는 제안을 발표함.

  채팅 통제가 당신에게 미치는 영향

     * 모든 채팅과 이메일이 자동으로 검색됨.
     * 개인 사진이 국제 기업과 경찰 당국에 의해 열람될 수 있음.
     * 플러팅과 섹스팅이 잘못된 플래그로 인해 열람될 수 있음.
     * 잘못된 보고와 조사로 인해 법적 문제가 발생할 수 있음.
     * 해외 여행 시 큰 문제 발생 가능성.
     * 정보 기관과 해커가 개인 채팅과 이메일을 염탐할 수 있음.
     * 익명 이메일 및 메신저 계정 설정 불가.
     * 17세 미만은 특정 앱 설치 불가.

  당신이 할 수 있는 일

     * 정부에 연락하여 채팅 통제에 대한 우려 전달.
     * 소셜 미디어에서 주의 환기.
     * 이메일, 메시징 및 채팅 서비스 제공자에게 문의.

  GN⁺의 의견

     * 프라이버시 침해: 채팅 통제는 개인의 프라이버시를 심각하게 침해함.
     * 오탐율 문제: 자동화된 시스템의 높은 오탐율로 인해 무고한 사람들이 피해를 볼 수 있음.
     * 기술적 취약점: 보안 취약점이 생길 가능성이 높아짐.
     * 대안 필요: 아동 보호를 위한 다른 효과적인 방법이 필요함.
     * 업계 반응: 많은 기술 기업과 전문가들이 이 제안에 반대하고 있음.

        Hacker News 의견

     * EU의 입장: EU가 이번 주에 제안을 승인하는 것이 아니라, 입법 과정의 일부로서 협상 입장을 투표하는 것임.
     * 의견 제시: 자신의 목소리를 내기 위해 대표자들에게 연락할 것을 권장함.
     * 디지털 시장법: 최근의 EU 디지털 시장법이 이 법의 목적을 무력화할 수 있다는 점이 흥미로움.
     * 앱 배포: 앱 스토어가 유일한 배포 방법이라는 가정 하에 이 법이 작동할 수 있지만, 사이드로딩이 허용되면 준수하지 않을 수 있음.
     * 정치적 이메일: 유럽 정치인들은 반복적인 이메일을 좋아하지 않으며, 전략적인 대안이 더 효과적일 수 있음.
     * 지속적인 노력: 이 법안에 대한 논의가 멈추지 않을 것이라는 의견.
     * 오류율 문제: 낮은 오류율에도 불구하고 많은 무고한 사람들이 피해를 입을 수 있으며, 이를 확인하는 사람들에게도 큰 부담이 될 것임.
     * 인터뷰: Patrick Breyer와의 인터뷰에서 Chat Control에 대한 설명이 매우 불길하다는 의견.
     * 비상업적 서비스: 비상업적이고 광고로 자금을 조달하지 않는 서비스만이 이 법의 적용을 받지 않음.
     * 오픈 소스: 오픈 소스 소프트웨어의 정의와 적용 범위에 대한 의문.
     * 우회 방법: 셀프 호스팅이나 전송 전 암호화 등의 방법으로 이 법을 우회할 수 있는지에 대한 논의.
"
"https://news.hada.io/topic?id=15436","또 다시 AI를 언급하면 파일드라이버 해버릴꺼에요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      또 다시 AI를 언급하면 파일드라이버 해버릴꺼에요

     ""최근 GPT-4 등 AI 분야의 혁신은 사회에 광범위한 영향을 미칠 것임. 단조로운 일을 없애는 유토피아부터 예술가들의 생계를 위협하는 디스토피아, 인류 자체에 대한 실존적 위협까지 다양함.""

     * 필자는 데이터 과학자로서 정규 교육을 받았고, 호주 최고 대학 중 하나에서 열린 ML 대회에서 우승할 정도로 뛰어난 실력을 가지고 있음
          + 하지만 최고는 아니며, 엘리트 기관에서 작성한 라이브러리를 사용하고 고급 언어로 알려진 솔루션을 구현할 수 있는 수준임
     * 하지만 다시 AI를 언급하는 사람은 ""목을 부러뜨리는"" 척추 교정을 무료로 해주게 될 것이니, 미리 진심으로 사과함

    I. 하지만 우리는 기계 학습으로 엄청난 효율성을 실현할 거야-

     ""내가 방금 뭐라고 했는지 못들었어?""

     * 2019년부터 데이터 과학자로 일했지만, 2021년에는 이 분야가 크지만 사기가 많다는 것을 깨달았음
          + 대부분의 리더들은 AI에 대해 30분도 읽어보지 않고, AI에 초점을 맞춰야 한다고 주장했음
          + AI 이니셔티브를 시작하는 회사 수가 실제 사용 사례 수를 훨씬 능가했음
          + 시장은 사기꾼과 무능한 사람들로 가득했음
     * 필자는 데이터/소프트웨어 엔지니어링으로 전환했음
          + 개발자들에게 과대광고는 좋지 않음
          + 정직한 친구와 영혼을 가지고 있지만, 분야를 쉽게 바꿀 수는 없음
     * 데이터 과학 일자리가 사라지고 과대광고 주기가 데이터 엔지니어링으로 옮겨갔음
          + 드디어 AI가 끝났다고 생각했는데...
     * 그런데 누군가가 ChatGPT를 만들었고, 이제 모든 애플리케이션에 챗봇 지원을 추가하는 데 엄청난 엔지니어링 노력을 쏟아붓고 있음
          + 업계의 절반은 정기적으로 데이터베이스 백업을 테스트하는 방법도 모르는데 말임...
     * AI가 비즈니스의 미래라고 제안하는 다음 멍청이에게 폭력을 가해야 하는 이유는 그들이 이제 수억 명의 고의적인 바보들과 구별할 수 없기 때문임!

    II. 하지만 우리는 경쟁력을 유지하기 위해 AI가 필요해-

     ""오 자비로운 주여, 제발 말을 멈춰줘. 당신이 AI를 정확히 어떻게 사용할지 아는 소수의 기업이 아니라면, 당신은 AI가 필요하지 않음""

     * 현재 존재하고 유용한 인공지능은 이미 비즈니스 소프트웨어 공급망에 통합되어 있을 가능성이 높음
          + 관리형 보안 제공업체는 아마도 이상 트래픽을 감지하기 위해 실험실 소프트웨어에 내장된 알고리즘을 사용하고 있음
          + 그들도 AI 작업을 많이 하지 않았고, 실제로 데이터 과학자를 고용해야 하는 작은 시장 부문에서 소프트웨어를 구입했을 뿐임
     * 스티브 잡스처럼 되고 싶어 혁신적인 능력에 대해 이야기하고 싶겠지만, 그렇다고 터틀넥을 입을 수 있는 건 아님
          + 설사 그렇다 해도 필자의 맹공격에서 살아남으려면 스웨터 대신 철갑옷을 입어야 할 거임
     * 대부분의 회사는 가장 단순한 CRUD 애플리케이션조차 제때 예산 내에서 성공적으로 개발하고 배포할 수 없음
          + 똑똑한 사람들과 협력하고 합리적인 요구사항을 제공하면 유능한 팀이 매번 이를 해낼 수 있음
          + 필자가 지금 일하는 고객들은 기술에 전혀 밝지 않더라도 서로의 지성을 존중하고 ""어른처럼 대화""하며 함께 문제를 해결함
     * 하지만 대부분의 회사는 운영과 문화적으로 불구가 되어 이를 할 수 없음
          + 엔지니어의 중간 체류 기간은 1~2년 정도여서 조직은 제도적 역행성 기억상실증을 앓고 있음
          + 누군가 엔지니어링 팀의 원격 근무 특권을 취소하자고 하면 최고의 엔지니어들이 떠남
          + 랜섬웨어 공격이 있을 때마다 6개월 동안 백업을 테스트한 사람이 없고 레거시 시스템의 절반을 되살릴 수 없다는 게 밝혀짐
               o 4년 만에 두 번이나 직접 봤음. 얼마나 미친 일인지 아시겠어요?
     * 대부분의 조직은 가장 기본적인 애플리케이션조차 일관되게 제공할 수 없는데, 여기서 당신은 실험적 기술을 도입하는 것이 경쟁력을 유지하는 최선의 방법이라고 말하고 있음
          + IT 부서가 운영하는 그 어떤 것보다 한 차원 높은 수준이며, 고용 경험도 없고, GPU를 사용해본 적도 없는 그런 기술 말임
          + 설사 다 잘한다 해도 데이터와 비즈니스 특성 때문에 문제를 해결할 수 없을 가능성도 있음
          + 이건 재앙을 위한 요리법이 아니라 12코스 대참사를 준비하려는 사람을 위한 요리책임
     * 그냥 ""자신의 일을 제대로 고치는 것""으로 경쟁력을 유지하는 게 어때요?
          + 필자는 민감한 고객 기록에 접근할 수 있는 선임 데이터 과학자가 데스크톱의 텍스트 파일에 비밀번호를 보관하도록 허용하는 것을 봤음
          + 그런데 당신은 아직 생각해내지도 않은 메커니즘을 통해 AI를 사용하여 보안을 개선하는 것이 고객에게 최선이라고 걱정하고 있나요?
     * 당신은 ""멍청이"" 같은 소리를 하고 있어서 필자는 의사가 당신의 턱을 철사로 묶어 모두를 안심시키고 우리가 ""실제 문제를 해결""할 수 있는 축복받은 10초의 침묵을 줄 때까지 당신의 턱을 걷어차줄 거임

    III. 우리는 이미 광범위한 이득을 보았는데-

     ""내가 어렸을 때 R.A 살바토레의 고전 판타지 소설 '수정의 파편'을 읽었음. 그 안에 주인공 울프가르가 자신의 백성들을 세상을 구할 전쟁으로 이끌기 위해 야만인 족장에게 결투를 신청하는 장면이 나옴. 싸움은 울프가르가 무기를 버리고 맨손으로 족장의 머리를 잡고 살인자가 되지 않기 위해 항복해달라고 '애원'하며 끝남""

     * 자, 이게 바로 나임. 거짓말 그만하라고 너에게 애원하는 거임. 정말 네 머리통을 으깨고 싶지 않아.
          + ""하지만 네가 나를 그렇게 만든다면 그렇게 할 거야"".
     * 어제 Scale의 ""2024 AI 준비 보고서""를 봤는데, 차트에 AI 도입의 생산적인 결과가 없었다는 회사가 8% 였음
     * AI 프로젝트에 실패한 기업이 겨우 ""8%""라고 믿을 만큼 멍청해야 하나?
          + CRUD 앱으로도 이걸 꾸준히 관리할 수 없는데 이 숫자가 우스꽝스럽지 않다고 생각하나?
          + LLM 열풍 동안 ""일부"" 기업은 혜택을 봤겠지만 ""92%""는 아님
     * 34%의 기업이 생성형 AI가 전략적 의사 결정에 도움이 되고 있다고 보고했다고?
          + 도대체 무슨 소리야? GPT-4는 파이썬만큼 수준 높은 일관된 Elixir도 작성하지 못함
          + 그런데 당신은 ""가끔 가족들이 섭취할 치명적인 독소를 양조하라고 사람들에게 말하는"" 그것에 의사 결정을 맡기고 있다고 인정하고 있나?
     * 필자는 믿지 않음. 제정신인 사람은 아무도 믿지 않음
          + 이사회가 당신이 설문조사에 쓴 것을 믿는다면 당신을 해고해야 함
          + 친구들 중 일부가 리더십 자리에 ""꼭"" 있어야 한다고 느끼는 이유를 이제야 이해함
               o 당신이 우리 모두를 집단적으로 절벽에서 몰아내기 전에 누군가는 권력의 고삐를 당신의 도마뱀 발톱에서 뽑아내야 하기 때문임
     * 몇 년 전 한 친구가 FAANG 조직에 초대받아 미국을 방문했는데, 많은 발표가 인상적인 인공지능 제품의 기술 데모였음
          + 소프트웨어 엔지니어인 그는 개발자들과 무대 뒤에서 시간을 보냈고, ""대부분의 데모가 조작되었다""는 사실을 알게 되었음
               o 제품이 작동하지 않았고, ""실제로 예측해야 할 것을 예측하는"" 등의 사소한 문제를 해결하지 못했던 것
          + 그래도 숨 가쁜 청중들에게 1시간 동안 절대적인 넌센스를 내뱉는 걸 막지는 못했음!
     * 또 다른 친구는 응급 서비스용 소프트웨어를 검토하고 있었는데, 영업사원들은 응급 서비스 구매 담당자가 열혈 프로그래머일 거라고는 예상하지 못했음
          + 이 허술한 보안 의식 때문에 그들은 ""실수로 그 서비스가 결국 인도의 어떤 남자일 뿐이라는 사실을 드러냈음""
          + 필자도 인도 사촌들과 자리를 바꾸면 그냥 인도의 아무 남자나 될 테니 개인적으로 받아들이겠음
          + 하지만 ""AI라는 말을 써서 나처럼 생긴 사람들의 노동을 외국 정부에 팔려는 것""은 엿 같고, 당신은 비윤리적인 괴물임
          + 계속 ""try { thisBullshit(); }""을 시도한다면 ""catch (theseHands)""를 받게 될 거임

    IV. 하지만 우리는 미래를 준비해야 해-

     ""ChatGPT에게 목줄 준비하는 법을 물어본 다음 그걸로 너를 목 졸라 죽일 거야. 그리고 넌 ChatGPT가 10%의 확률로 미쳐서 목줄이 종이와 악의로만 이루어져야 한다고 말해주기를 '기도'할 수밖에 없을 거야.""

     * 임원들이 미래 업무를 대비해 즉시 생성형 AI를 도입해야 한다고 토론하는 모습을 봄
          + 연설이 다 똑같이 들리는데도 손을 움직이고, 말하고, 침을 흘리지 않으려 노력하는 걸 보면 열심히 연습했음이 분명함!
     * 잠시 진지하게 이야기해보자면:
          + 필자는 생성형 AI가 세상을 급격히 바꿀 잠재력이 없다는 동등하게 진지하지 않은 진영에 속하지 ""않음""
          + GPT-2의 초기 데모를 보고 어떻게든 조작된 거라고 반쯤 확신했지만, 틀렸다는 걸 기억함
          + 그래서 더 이상 무슨 일이 일어나고 있는지 확신할 수 없음
     * 그러나 기술의 핵심 원칙을 이해할 기술적 배경은 있으며, 우리는 세 가지 방향 중 하나로 가고 있는 것 같음
         1. 지능 폭발이 일어나 AI가 스스로 재귀적으로 자기 개선을 하고, 우리는 구성 원자로 수확됨
               o 인간이 커피 머신을 고치는 데 큰 수요가 있는 외계인을 위해 ""글루브나""라는 새로운 에폭시로 전환될 수 있다는 걸 시장 알고리즘이 알아내기 때문
               o 이런 시나리오에서 필자는 회사의 수익에 그다지 신경 쓰지 않음
         2. 현재 접근 방식이 기대만큼 확장되지 않는다는 것이 밝혀짐. 데이터 부족, 아키텍처 문제 등 여러 이유 때문
               o 이 우주에서는 ""일부"" 산업, 예를 들어 고객 지원 같은 곳이 크게 혼란에 빠질 것임
               o 이런 식으로 점진적인 이득을 계속 낸다면 회사는 그냥 생성형 AI가 필요하지 않음. 정말 필요하다면 ""정확히"" 왜 필요한지 알게 될 거임
                    # Todoist의 자연어 필터를 내부 필터링 언어로 변환하는 기능 같은 건 실제로 도움이 됨. 하지만 ""사용 사례가 없다면"" 이런 광범위한 기능은 실제로 그다지 유용하지 않음
                    # 해야 할 일은 ""운영과 문화를 개선""하는 것뿐이며, 그러면 AI가 관련성을 갖게 될 때 사용할 수 있는 능력을 갖추게 될 거임
                    # 모두가 검색 증강 생성에 대해 이야기하고 있지만 대부분의 회사에는 실제로 검색할 만한 내부 문서가 없음. 제발 ""일 좀 똑바로 해라"".
         3. 이러한 근본적인 문제가 해결되고 오늘날 우리가 알고 있는 프로그래밍을 대체하거나 광범위하게 일반 지능으로 식별될 수 있는 무언가로 끝남
               o 생성형 AI가 로켓처럼 궤도를 달린다면 ""무작위 챗봇을 만드는 것이 당신을 미래에 대비시켜 주지는 않을 거임""
                    # ""import openai""를 입력한다고 해서 인공지능의 최첨단에 있다는 뜻이 아님
                    # 비즈니스는 아무것도 하지 않았을 때와 ""정확히 같은 수준으로"" 혼란에 빠질 것이고, 기본에 충실했다면 그랬을 때보다 훨씬 더 심각할 것임
                    # 직원들에게 이해관계자에게 이메일을 쓰는 데 ChatGPT를 사용하라고 가르치는 것은 ""기업이 이것에서 살아남을 수 있게 해주지 않을 거임""
               o 온건한 영향과 소행성이 공룡을 멸종시키는 수준의 영향 사이에서 바늘구멍을 통과한다면 모든 것이 ""영원히 바뀔 것""이고, 당신의 미지근한 준비는 거대한 쓰나미 그림자에서 ""매우 힘겹게"" 버티는 개미만큼의 영향력밖에 없을 거임
     * ""기준을 높이기 위해"" LLM 기반 코드 리뷰를 구현해보라고 하는 대신 사람들에게 조금이라도 규율을 가르치라고 하는 또 다른 멍청한 새끼가 나타나면 유도를 충분히 배워서 그들을 태양으로 던져버릴 거임
     * 충분히 강조할 수 없는데, ""절대적인 최첨단에 있으면서 새로운 연구를 내놓거나"", 아니면 LLM을 통합하는 사소한 양보를 제외하고는 5년 전에 하던 대로 정확히 해야 함
          + ""중간에 있는 건 전혀 말이 되지 않음"". 당신의 업계가 ""지금 당장 완전히 혼란에 빠지고"" 있는 드문 분야에서 일하지 않는 한 말이죠.

    V. 하지만 모두가 사용하고 있다고 하는데-

     ""지루한 행정 관료가 집에 가서 잔디나 만지기 전에 ChatGPT가 실제로 얼마나 많은 정부 정책을 작성하는지 상상이 가나? 사람들이 헛소리에 질려 이메일 교환을 계속되는 스레드에 붙여넣으면서 LLM들이 서로 빙빙 도는 부서가 얼마나 많을까? 내 근처 10km 이내에 의사가 증상을 챗봇에 때려박아서 환자를 오진했을 거라고 '장담'해""

     * 우리는 사회로서 ""무엇을"" 하고 있는 거지?
     * 학생들에게 잠재적으로 생명을 구하는 일과 이민법에 적합한지 검증하는 데 사용되는 중요한 자격증을 제공하는 기관의 임원이 학생들의 부정행위를 탐지할 수 있는지 물어봤음
          + ""아니요, 아마도 못할 거예요""라고 말하려 했는데... 의심이 들어서 대신 이렇게 말했음

     ""할 수는 있을 것 같은데, 현재 학생들의 50% 이상이 부정행위를 하고 있어서 그들을 정학시켜야 하므로 수익에 심각한 영향을 미칠 거라고 봅니다. 그래도 조사해볼까요?""
          + 그 후로는 이에 대해 이야기하지 않고 있음
     * 현재 공공 부문에서 일하고 있는 멘토에게 목격한 특히 난감한 대화에 대해 물어봤음

     나: 진지한 질문인데, 사람들이 정말 그렇게 바보 같은 이야기를 믿나요? 아니면 AI 사기꾼한테서 돈을 뜯어내려는 슬픈 시도로 대부분 정교한 연극을 하는 건가요?
     멘토: 최대한 정치적으로 대답하자면... 쿨에이드를 마신 사람들이 있어. 안 마신 사람들도 있고. 그리고 가능한 한 많은 쿨에이드를 섞으려는 사람들도 있지. 누가 어디에 속하는지는 네가 판단해 봐.
     * 나는 결정했고, 쿨에이드를 무기인 양 퍼마시는 사람들과 대량으로 생산하는 사람들을 구별할 순 없지만, 당국이 나를 잡기 전에 ""그들 중 몇 명은"" 잡을 거야
          + 운이 좋으면 LLM에게 내가 어디 있는지 물어보느라 몇 달을 낭비할 거임
     * 피지에서 휴가를 보내다가 마지막 리조트 아침 식사 때 웨이트리스가 회원 가입 양식을 가져왔음
          + 완전 무료이고 공짜 물건도 딸려 온다고 함. 식당에 있는 모두가 즉시 서명하고 있었음
          + 서비스 약관을 훑어보니 내가 제공한 모든 데이터를 AI 모델 학습에 사용할 권리가 있고, 그 모델을 계열사의 불특정 다수 회사와 공유할 권리도 있다고 되어 있었음
     * 나는 그냥 팬케이크를 평화롭게 먹고 싶을 뿐인데, 이 바보들아

    VI.

     ""내가 격분하는 이유는 LLM이나 생성형 AI 열풍 자체를 '싫어해서'가 아님. Copilot으로 재미는 봤지만 결국 나를 더 멍청하게 만든다고 판단했음. 인상적이지만 상용구를 쏟아내는 것 외에는 실제로 ""적합하지"" 않음. 프로그래밍은 설계이고 이 도구들은 아직 이를 진지하게 도와주기에 충분히 좋지 않기 때문에 생각했던 것처럼 엄청난 생산성 향상을 가져다주지는 않았음.""

     * 내가 싫어하는 건 피를 빨아먹고 맹목적으로 꿈틀거리는 거머리들처럼 AI에 달라붙은 사람들임
          + 인기 없을 때는 비즈니스를 위한 블록체인의 잠재력을 논하는 걸 좋아했던 자들임
          + 최근 컨퍼런스에 참석했을 때는 ""'양자'의 잠재력""에 대해 숨 가쁘게 토론했지만 도대체 그게 뭔지 명확히 모르는 것 같았음
     * 지난주에 읽은 기사 아래에 작은 설문조사가 떴는데 보안 임원을 위한 거였지만 질문이 뭔지 보려고 재빨리 클릭해봤음
     * 자, 여기 있습니다. 친애하는 리더여, 당신은 무엇에 가장 관심이 있나요? 인공지능, 블록체인, 아니면 양자 컴퓨팅?
          + 그들은 목표 시장이 누구인지 정확히 알고 있음. 모든 것에 미소 짓는 법을 배워서 ""남의 돈""을 맡은 권력자들이며, 다음 투기적 유행에 편승해 돈을 찍어낼 수 있다는 걸 아는 사람들임
          + 내가 아는 유능한 보안 전문가 중 누구도 이런 것에 관심이 없음. 그들은 방화벽이 올바르게 구성되었는지, 조직이 리포지토리에 암호를 커밋하고 있는지 알아내느라 바쁨
          + 양자 컴퓨팅이 암호학에 미치는 영향을 알아내야 하는 사람이 필요하지만, 그게 ""시너지 그렉""은 아님
               o 매우 빠르게 말하고 인원을 늘리는 것 외에는 식별할 수 있는 기술이 없는 사람
               o 시너지 그렉은 기계 학습 운영부터 신발 끈 빨리 묶는 법에 이르기까지 중요한 문제에 대해 절대 조언을 구해서는 안 됨
               o 마지막으로 시너지 그렉의 아바타 중 한 명과 이야기했을 때 ""대부분의 코인은 제로로 갈 거지만 하나는 달러가 될 거야""라며 모네로라는 암호화폐에 대부분의 돈을 투자해야 한다고 주장했음
               o ""이것이 기업 AI의 얼굴""임. 그 소름 끼치는 얼굴을 보고 질겁하라. 악마처럼 충혈된 눈을 하고 시가를 즐기는 척하고 있으니
     * 내 컨설팅 회사에는 ""꽤 훌륭한"" 데이터 과학자 세 명이 있음. 사실 그 중 두 명은 실험 연구를 하는 그룹 외에는 국내 최고 수준이라고 해도 무방하지만 겸손해서 그렇게 말하지는 않을 거임
          + 그럼에도 우리는 어떤 종류의 AI 서비스도 판매하지 ""않음"". 시장이 너무 왜곡되어 있어서 암호화폐 공간에 발을 담그는 것만큼이나 ""거의"" 나쁨
          + 아직 ""import tensorflow""를 입력한 적이 있는 사람은 누구나 개자식이라고 생각할 정도는 아니지만 ""우리는 그쪽으로 가고 있음""
     * 이 부류의 사람들은 간단히 말해 바른 생각을 하는 사람들에게 혐오스러움
          + 실제로 이 분야에서 진전을 이루고 있는 사람들에게는 창피한 존재이고, 기술을 현명하게 사용해 세상을 개선하는 법을 아는 사람들에게는 불명예스러운 존재임
          + 또한 교훈을 배울 때까지 사상 지도자 감옥에 처넣어야 할 따분한 무지렁이 개자식들임. 내가 모금하고 있는 감옥임
          + 매일 아침 묘비를 새기는 듯한 쉰 목소리의 검은 두건을 쓴 인물이 수감된 관리자들에게 이 기관이 체벌을 혁신하고 있다는 내용으로 60분 동안 TedX 강연을 하고, 그 혁신이 매일 아주 세게 배를 차는 거라는 걸 밝힘
     * 내가 선택한 직업이 나를 이 사람들과 너무 가깝게 만든다는 사실과 그들의 악취 나는 음절이 내 귀를 더럽히지 않도록 열심히 공부한다는 사실에 역겹습니다
          + 의인들과 어울리기 위해 필사적으로 도망쳐야 하는데, 그들은 OSS에 기여하고 하루 종일 애자일에 대해 이야기하는 것이 인간 생산성에 관한 책을 읽은 외계인들을 위한 운동이라고 생각함
     * 방금 훨씬 덜 발전된 나라에서 여행을 마치고 돌아왔는데, 정말로 잠시나마 ""살아보니"" 그 돈이 얼마나 많은 삶을 개선할 수 있는지 ""볼 수"" 있었음
          + 그런데 믿을 수 없을 만큼 Microsoft Fabric 하수구로 쏟아붓고 있으니 내 기어가 갈리는 것 같음
     * 맹세컨대 나는 공부하고, 글을 쓰고, 네트워크를 형성하고, 그렇지 않으면 ""문제에 힘을 가할"" 것임
          + 그 자원들이 방긋 웃는 광대의 지갑 대신 사회를 위해 무언가를 이룰 수 있는 곳으로 가게 될 때까지 말임!

    VII. 오, 그럼 당신은 AI 비관론자 중 한 명이군요-

     ""하느님이 증인이시니, 당신이 개인적으로 기계 학습 시스템을 작성하지 않고 AI에 대해 한 번만 더 입을 연다면, 벽돌과 프롬프트 인젝션이 적힌 종이를 우편으로 보내서 그것으로 당신의 얼굴을 때리라고 할 거예요. 그리고 당신이 아마도 혼자서는 더 이상 읽을 수 없기 때문에 ChatGPT에 그것을 로드하기를 기다리면서 가만히 앉아 있을 거예요, 이 괴물 같은 멍청이.""


    PS

     * 새로운 독자들이 많이 왔으니 아래 글들도 즐길 수 있을 거예요:
          + ""스프레드시트 쓰면 너 발로 찰 거야""
          + ""애자일 또 언급하면 너 한 방 먹일 거야""
          + 그 외 주요 포스트들도 즐기시길
     * 기술 관련 주제를 친구들과 솔직하게 이야기하는 팟캐스트 ""개구리에겐 전갈의 본성이 있나""도 있어요. 재미있게 보셨기를!

   ai가 과대라고 하기엔 이미 구글 검색 사용 빈도가 절반 이상 줄어듬

   ""우리는 구성 원자로 수확됨""

     마음에 듬.

        Hacker News 의견

     * 기술 과대광고 주기에 대한 좋은 지적이 있음. 많은 회사들이 AI를 사용하려고 애쓰는 것이 꼭 좋은 일은 아님.
     * AI 스타트업에서 일했는데, 기술은 놀라운 데모를 만들 수 있지만 신뢰할 수 있는 도구로 일반화하기에는 부족함.
     * 저자의 주장은 좋지만, ""나는 천재이고 너는 바보""라는 태도가 문제임.
     * AI라는 이름이 마케팅 현상으로 사용되고 있으며, 이는 개념을 혼란스럽게 만듦. 결국 AI라는 용어는 점점 덜 유행하게 될 것임.
     * 이 스타일의 글은 이전 작가들로부터 영향을 받은 것 같음. 전통을 이어가는 것도 중요함.
     * 글이 매우 재미있었음. RA Salvatore 언급이 반가웠음.
     * AI, 암호화폐 등은 모두 끝없는 콘텐츠 파이프라인에서 나오는 것임. AI는 계속 발전할 것이며, 사람들은 다음 유행으로 넘어갈 것임.
     * AI가 필요 없다는 주장에 동의하지 않음. LLMs는 검색에서 매우 유용함.
     * 데이터 문맹 리더십이 AI 능력으로 도약하려는 패턴이 있음. 기본적인 통계적 이해와 실험의 중요성을 무시함.
     * 저자의 많은 주장에 동의하지만, 글의 스타일과 톤은 마음에 들지 않음.
"
"https://news.hada.io/topic?id=15321","2024 옵저버빌리티 트렌드 5가지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2024 옵저버빌리티 트렌드 5가지

     * 옵저버빌리티: 시스템 외부 출력의 결괏값에서 시스템 내부 상태를 얼마나 잘 추론하는지 나타내는 척도
          + 메트릭, 이벤트, 로그, 트레이스를 수집해 시각화하고 분석
          + 내부 동작 배경 정보를 풍부하게 제공, 심층적인 시스템 문제 해결
     * Grafana Labs, Splunk, Dynatrace, Chronosphere 등 옵저버빌리티 기업과 Dimensional Research 등 시장조사기관이 제시한 2024년 옵저버빌리티 트렌드 중 3회 이상 지목된 트렌드 중 5가지 정리

    1. 옵저버빌리리티 ‘도구’로서 AI 영향력 확대
          + AI는 신호 상관, 이상 징후 탐지, 근본 원인 분석, 성능 최적화 업무에 쓰여 ‘시스템에서 일어나는 일’ 빨리 이해하도록 도움
          + AI가 이상 징후 탐지하면 조사와 자동 대응 거쳐 문제 자동 해결
          + 일상 프로세스 자동화해 장시간 작업 줄이는 도구 수요는 옵저버빌리티서 AI 활용도 높임
          + 클라우드 네이티브 제공 속도 따라가려면, 조직이 멀티 클라우드 인프라와 애자일 개발 관행을 대규모로 자동화한, 정확하고 예측할 수 있는 AI 기반 분석 필요
          + 인과·예측·생성형 AI 결합한 옵저버빌리티 도구 활용하면 옵저버빌리티, 보안, 비즈니스 데이터서 통찰 풍부하게 얻어 시스템 심층 분석 가능
          + 물론 ‘고객이 원하는 수준으로 AI가 신뢰성을 달성했다’고 보려면 시간이 걸림
    2. 옵저버빌리티 ‘대상’으로서 AI 관측 중요성 증가
          + 생성형 AI는 자동화와 생산성 무기로 방대하고 복잡한 데이터 폭발적 속도로 생성
          + 사용자는 AI로 콘텐츠 만들고 ‘자신만의 AI’도 직접 개발해 여기서 발생하고, 처리할 데이터 많음
          + AI는 의료, 법률, 금융, 여행 등 사회 각 분야에 광범위한 영향력 미치므로 잘 이해해야 함
          + AI의 정상 동작 여부나 편향성 등은 중요한 관측 대상
          + 조직은 AI를 정확하고 구체적으로 관측할 준비가 돼 있어야 함
          + AI에서 메트릭, 로그, 트레이스 가져오는 방법 알아야 함
    3. 옵저버빌리티 비용 절감 노력
          + 많은 기업이 예산 문제 고민, 기술·사업 측면서 비용 관리 방법 모색, IT 비용 전반 관리
          + 기업이 멀티 클라우드나 클라우드 네이티브 환경으로 전환하면서 생성되는 데이터양 늘고, 관련 비용 증가
          + ESG 리서치, “조직 69%가 옵저버빌리티 데이터 증가 때문에 시간 지나면서 데이터 수집·저장 비용 크게 들어 우려”
          + Dynatrace, “팀은 실시간 분석을 위해 유지할 로그, 폐기할 로그, 접근성 낮은 저비용 스토리지에 보관할 로그를 자주 결정해야 함”
          + 옵저버빌리티 비용 절감 방안:
               o 데이터 증가 억제, 조직이 수집한 데이터서 더 나은 가치 얻도록 돕는 도구 사용
               o 옵저버빌리티 결과에 가치 주지 않는, 중복되고 관련 없는 이벤트 필터링
               o 빈값 제거, 불필요한 레이블 삭제, 비효율적인 데이터 포맷→‘옵저버빌리티 대상에 맞는 포맷’으로 변환, 이벤트 트리밍, 변환
    4. 오픈 소스와 Open Telemetry 수요 상승
          + 많은 기업이 공급업체에 종속될 우려 해결 위해 오픈 소스 기술 투자, 이를 옵저버빌리티 기술 스택 일부로 통합
          + Dimensional Research 설문조사 따르면, 옵저버빌리티 담당자인 응답자 중 87%, “OpenTelemetry는 앞으로 5년 내 옵저버빌리티 데이터 표준 될 것”
          + OpenTelemetry는 트레이스, 메트릭, 로그 등 데이터 생성, 관리하도록 설계, 특정 공급업체 종속 X
          + 이는 OpenTelemetry 지원하는 모든 옵저버빌리티 도구와 함께 사용 가능
          + But OpenTelemetry 도입은 아직 초기 단계
          + OpenTelemetry 도입 시 기술 지원 우려, 시장 도입 확대될 때까지 기다릴 필요성, 경영진 가치 이해 부족 등 문제
    5. 옵저버빌리티 도구 통합 행보 강화
          + 여러 옵저버빌리티 도구 사용 대신 공급업체 한두 곳 도구로 통합 움직임 강화
          + Dimensional Research 설문 조사 결과, 기업서 옵저버빌리티, 모니터링 도구 평균 7가지 이상 사용
          + 옵저버빌리티 도구 통합 이유: 더 빠른 문제 확인, 비용 절감, 팀 협업 개선, 다운타임 최소화, 보안 강화, 운영 복잡성 간소화, 교육 필요성 감소, 데이터 사일로 방지 수요
          + Chronosphere, “개발자와 기술팀은 답 찾기 위해 다양한 사용자 인터페이스나 소프트웨어 오가는 데 시간 쓰거나, 여러 소프트웨어에 비용 들이길 원치 않는다”
          + Dimensional Research, “도구가 너무 많으면 데이터 상관관계 보여줄 때 어려움 커져 환경 전반에 가시성 제한하는 ‘도구 사일로 현상’ 초래”
          + 옵저버빌리티 도구를 공급업체 한두 곳의 도구로 통합하면 파편화된 데이터를 모으고, 데이터 수집·소비 방식 표준화하기에 좋음
"
"https://news.hada.io/topic?id=15322","GJK 알고리듬: 단순한 일을 기묘하고 아름답게 해결하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GJK 알고리듬: 단순한 일을 기묘하고 아름답게 해결하는 방법

     * GJK 알고리듬은 두 도형이 겹치는지 확인하는 방법
     * 도형 A와 도형 B가 겹치는지 확인하려면, 두 도형의 점 중 하나라도 겹치는지 확인하면 됨

  Minkowski 차집합

     * 두 도형의 모든 점을 빼서 새로운 집합을 만듦.
     * 이 새로운 집합에 원점이 포함되면 두 도형이 겹친다는 의미임.
     * 이를 Minkowski 차집합이라 부름.

  알고리듬의 기본 아이디어

     * A와 B의 Minkowski 차집합이 원점을 포함하는지 확인함.
     * 차집합이 원점을 포함하면 두 도형이 겹침.

  알고리듬 단계

    1. 초기화: 임의의 방향 벡터 d를 설정하고, 첫 번째 점 p를 찾음.
    2. 점 찾기: d와 p의 내적을 계산하여 양수이면 계속 진행, 음수이면 종료.
    3. 새 점 추가: p에서 원점 방향으로 새로운 점을 찾음.
    4. 단순화: 첫 번째 두 점을 기준으로 새로운 점을 추가하여 단순화함.
    5. 원점 포함 여부 확인: 단순화된 도형이 원점을 포함하는지 확인함.
    6. 반복: 원점을 포함할 때까지 또는 포함하지 않는다는 증거를 찾을 때까지 반복함.

  GN⁺의 의견

     * 흥미로운 점: GJK 알고리듬은 복잡한 문제를 간단한 수학적 변환으로 해결하는 좋은 예시임.
     * 도움이 되는 이유: 충돌 감지와 같은 실시간 그래픽스에서 매우 유용하게 사용됨.
     * 비판적 시각: 알고리듬의 구현이 복잡할 수 있으며, 정확한 이해가 필요함.
     * 관련 기술: 다른 충돌 감지 알고리듬으로는 SAT(Separating Axis Theorem) 등이 있음.
     * 고려 사항: GJK 알고리듬을 사용할 때는 도형의 복잡성과 계산 비용을 고려해야 함.

        Hacker News 의견

     * GJK 알고리즘: 1990년대에 GJK 알고리즘을 이해하려고 1년간 고생했음. 충돌 감지와 가장 가까운 점 찾기에 유용함. 기본 개념은 이해하기 쉬움. 두 개의 볼록한 고체에서 시작하여 무작위 점을 선택하고, 각 점 사이의 거리를 개선하려고 시도함. 가장 가까운 점을 선택하고 반복함. 가장 가까운 점이 더 이상 꼭짓점이 아닐 때 ""심플렉스"" 개념이 필요함. 여러 가지 경우를 분석하는 것임. 물리 엔진에서는 객체가 면-면 접촉에 정착할 때 문제가 발생함. 이론적으로는 우아한 해결책이지만, 실제로는 어려운 수치 해석 문제임. 그래도 가장 빠른 접근법일 가능성이 높음. 일반적인 경우 O(log N), 이전 위치와 가까운 경우 O(1)임. 옥스퍼드의 고(故) 스티븐 카메론 교수가 GJK를 제대로 구현하는 데 많은 연구를 했음. 1990년대 후반 상업용 3D 래그돌 시스템 ""Falling
       Bodies""에서 GJK를 사용했음.
     * GJK 설명 작성: GJK 충돌 감지 알고리즘에 대한 직관적인 설명을 찾을 수 없어서 직접 작성했음. 더 명확하고 효율적으로 만들 방법이 있으면 알려달라고 요청함. 고등학생의 수학 관련 설명이므로 적절한 양의 의심을 가지고 받아들여야 함.
     * GJK 알고리즘 비디오: 동일한 알고리즘에 대한 비디오 프레젠테이션 링크를 공유함. 비디오 링크
     * 기사 칭찬: 훌륭한 기사임. 매우 명확하고 흥미로움.
     * 볼록 최적화 비교: 두 볼록 집합 사이의 교차점을 확인하는 또 다른 방법은 두 점 사이의 차이의 노름을 최소화하는 볼록 최적화 문제를 해결하는 것임. 최적 값이 0이면 집합에 교차점이 있음. GJK 알고리즘과 볼록 최적화 방법의 비교를 보고 싶음. 어느 쪽이 더 나은지 확신할 수 없음.
     * 기사 칭찬 및 오해: 훌륭한 기사임. 다만, 첫 번째 이미지가 비볼록 형태의 교차점을 보여주고 있지만, 알고리즘은 볼록 형태에만 작동한다는 점이 나중에 밝혀짐.
     * GJK 알고리즘 처음 접함: GJK 알고리즘에 대해 처음 들어봄.
     * 관련 블로그 포스트: Minkowski 기하학과 관련된 블로그 포스트를 작성했음. 블로그 링크
     * 개인 웹사이트: 예상치 못하게 주목받고 있어서 개인 웹사이트가 농담으로 가득 차 있다는 점을 언급함. 연락을 원하면 답글로 알려달라고 요청함.
     * Minkowski 함수 사용: openSCAD에서 Minkowski 함수를 사용해왔는데, 그것이 실제로 무엇인지 알게 되어 기쁨.
     * 알고리즘 칭찬: 대단한 알고리즘임.
"
"https://news.hada.io/topic?id=15440","메콩강 삼각주에서 농업용 드론이 쌀 농업 혁신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       메콩강 삼각주에서 농업용 드론이 쌀 농업 혁신

쌀 농업에 AI 도입

  메콩강 삼각주에서 농업 드론이 쌀 농업을 혁신하고 있음

     * 베트남 메콩강 삼각주에서 농업 드론이 쌀 농업을 변화시키고 있음
     * 드론은 농약과 비료 사용을 줄이고, 노동력을 절감하는 데 도움을 줌

    전통적인 쌀 농업의 변화

     * 베트남은 세계 최대 쌀 생산국 중 하나로, 메콩강 삼각주에서 국가 쌀 생산량의 50%가 생산됨
     * 전통적으로 농부들은 손으로 씨앗을 뿌리고 비료와 농약을 사용해 쌀을 재배해왔음

    AI와 드론의 도입

     * 2021년, Lê Quốc Trung은 중국 농업 기술 회사 XAG와 협력하여 AI가 장착된 농업 드론을 도입함
     * 드론은 씨앗을 뿌리고 농약과 비료를 살포하는 작업을 자동으로 수행함
     * 드론 사용으로 노동력 절감과 더불어 농약과 비료 사용량을 줄일 수 있음

    드론의 장점

     * 드론은 농약과 비료를 균일하게 살포하여 환경 오염을 줄임
     * 농부들은 직접 농약에 노출되지 않아 건강 위험을 줄일 수 있음
     * 드론 사용으로 농업 생산성이 향상되고, 여가 시간이 늘어남

    드론의 도입 배경

     * COVID-19 팬데믹 동안 농부들은 드론 구매나 파일럿 고용을 연구할 시간이 있었음
     * 젊은이들이 도시에서 돌아와 드론 파일럿으로 일하며 농업에 종사하게 됨

    드론 사용의 도전 과제

     * 드론 사용으로 인해 전통적인 농업 방식이 변화하고 있음
     * 드론 충돌로 인한 사고 위험과 소음 문제 등이 있음
     * 드론이 경제적으로 부담스러울 수 있음

    미래 전망

     * 기후 변화와 인구 증가로 인해 농업 드론의 수요가 증가할 것으로 예상됨
     * 드론을 사용하여 노동력과 자원을 절감함으로써 식량 안보에 기여할 수 있음

  GN⁺의 의견

     * 기술 도입의 중요성: 농업 드론은 노동력 절감과 환경 보호에 큰 도움이 됨. 특히 기후 변화와 인구 증가로 인한 식량 문제 해결에 기여할 수 있음.
     * 경제적 부담: 드론의 초기 비용이 높아 소규모 농부들에게 경제적 부담이 될 수 있음. 정부나 단체의 지원이 필요함.
     * 기술 교육 필요성: 드론 사용을 위한 기술 교육이 필요함. 농부들이 드론을 효과적으로 활용할 수 있도록 지원해야 함.
     * 전통 농업과의 조화: 드론 도입이 전통 농업 방식을 완전히 대체하기보다는, 두 방식을 조화롭게 활용하는 것이 중요함.
     * 안전 문제: 드론 충돌로 인한 사고를 방지하기 위한 안전 규정과 교육이 필요함.

        Hacker News 의견

     * 로봇이 농업을 혁신하여 잡초와 해충을 개별적으로 제거하고, 각 식물에 적절한 양의 물을 공급하는 꿈을 이야기함. 화학물질 사용을 줄이고, 사람들이 힘든 노동에서 벗어날 수 있음.
     * 농업이 고도로 기술화되었음을 강조하며, 독일 남부의 농부 삼촌이 사용하는 최신 기술들을 소개함. 예를 들어, 자동화된 착유 로봇, GPS 기반 트랙터, 개별 소의 데이터를 처리하는 외부 회사, 그리고 비료와 전기를 생산하는 바이오가스 플랜트 등을 언급함.
     * 영국 왕립학회에서 농업 기술에 관한 이틀간의 회의가 열렸음을 공유함. 관련 비디오가 Vimeo에 게시되어 있음.
     * 드론이 개별 해충과 잡초를 기계적으로 제거할 수 있는 가능성을 언급함.
     * 드론이 숲에서 더 다양한 종자를 수집하고, 더 나은 후보를 선택할 수 있게 도와줄 수 있음을 이야기함. 또한, 드론을 통해 더 나은 공중 탐지가 가능해져 숲 관리가 향상될 수 있음.
     * 베트남에서 드론의 보급이 증가하고 있으며, 사람들이 창의적으로 이를 활용하는 모습을 언급함. 코로나로 인해 영어를 배우는 사람들이 늘었음을 지적함.
     * 드론이 감시와 관찰, 그리고 특정한 농약 적용에는 유용할 수 있지만, 대량 농약 살포와 씨앗 뿌리기에는 지상 차량이 더 효율적일 수 있음을 언급함.
     * 인간의 창의력이 발휘되는 모습을 보게 되어 기쁘다는 의견을 공유함. 영화 ""The Creator""의 장면을 떠올리게 한다고 함.
     * 드론 서비스의 단점에 대해 의문을 제기함. 드론이 수작업만큼 농약을 철저히 살포할 수 있는지, 오랜 경험을 가진 농부만큼 씨앗과 비료를 잘 뿌릴 수 있는지, 그리고 생산물의 품질에 차이가 있는지에 대해 질문함.
     * 드론이 미국에서도 사용되고 있는지 궁금해하며, 노동 절감 측면에서 큰 이점이 될 수 있음을 언급함. 자신은 도시에서 일하는 소프트웨어 엔지니어라 농부들의 실제 작업 방식에 대해 잘 모른다고 함.
"
"https://news.hada.io/topic?id=15391","AI 게임 스튜디오 만들기 : 우리가 배운 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       AI 게임 스튜디오 만들기 : 우리가 배운 것들

     * Braindump는 LLM과 생성형 AI의 새로운 세상에서 게임 제작이 어떤 모습일 수 있을지 상상해보려는 시도
     * Braindump를 이용하면, 단순히 프롬프트를 입력하는 것만으로 탑-다운/2.5D 게임 또는 대화형 세계를 구축할 수 있음
          + 예를 들어 ""레이저를 쏘고 BB-8 폭탄을 투하할 수 있는 스타파이터 만들기""라고 입력하면 이를 위한 3D 모델, 게임 데이터 및 스크립트가 생성됨

첫 실험부터 현재까지

     * 약 6개월 전에 단순한 프로토타입으로 시작하여, 3D 모델 생성, 멀티플레이어 기능 추가, UX 여러 번 개선
     * 현재 Braindump에는 다음과 같은 핵심 기능이 있음
          + 유닛, 능력 및 속성 정의(예: ""마법 지팡이를 떨구는 HP 50의 오크"")
          + 게임 맵에 오브젝트 배치(예: ""20마리의 오크를 원 모양으로 배치"")
          + 게임 규칙 및 로직 생성(예: ""오크의 체력이 0에 도달하면 그 자리에 유령 오크 생성"")
          + 새로운 3D 모델 생성(예: ""오크를 분홍색으로 만들고 푹신한 귀를 달고 싶어"", Meshy를 이용)
     * 모든 것이 통합된 자연어 프롬프트 인터페이스를 통해 접근 가능함

도전 1: 프롬프팅을 위한 UX 설계

     * LLM을 사용하여 무언가를 구축할 때 두 가지 큰 문제가 있음
         1. LLM이 일관되게 원하는 대로 동작하게 하는 방법
         2. LLM과 상호 작용하기 위한 최상의 UX
     * 많은 프롬프트 실험을 통해 현재의 반복적 접근 방식으로 전환함
          + 게임을 한 번에 전체 설명으로부터 생성하는 것은 잘 작동하지 않음
          + 여러 프롬프트를 통해 게임을 점진적으로 구축하면 더 자세히 설명하거나 반복할 기회가 생김
     * 프롬프트와 기존 컨트롤 사이의 적절한 균형을 찾기 위해 계속 실험 중임

도전 2: LLM을 위한 게임 API 설계

     * 기존 게임 엔진에 대한 코드 생성은 어려움이 있었음
          + LLM은 코드 스니펫 생성에는 능숙하지만 더 큰 소프트웨어 조각과 소프트웨어 아키텍처 구축 및 유지 관리에는 어려움을 겪음
     * 대신 LLM이 코드와 데이터 작성에 집중할 수 있도록 가능한 한 많은 구조를 제공하는 매우 간소화된 ""게임 API""를 TypeScript로 구축함
     * API에서 생성된 타입 정의(.d.ts)를 GPT에 시스템 프롬프트로 제공하면 GPT는 대부분 첫 번째 시도에서 API를 일관되게 올바르게 사용함
     * 타입 검사는 GPT가 오류를 발견하면 스스로 수정하려 한다는 놀라운 장점도 발견

생성된 매크로

     * 게임 API는 생성된 매크로라는 또 다른 흥미로운 UX 흐름을 열어줌
     * 일반적으로 애플리케이션에서 매크로는 작업을 자동화할 수 있는 작은 프로그램임
     * 브레인덤프 시스템에서는 모든 프롬프트가 코드를 생성하며, 해당 코드는 게임 API에서 다루는 거의 모든 것을 자동화할 수 있음
          + 예를 들어 ""모닥불 옆에 텐트 배치""와 같은 프롬프트를 입력할 수 있음
          + 지루한 작업을 자동화할 수도 있음(예: ""서로 다른 스탯을 가진 5마리의 서로 다른 고양이 만들기"")
          + 계산이 필요한 질문에 답하도록 요청할 수도 있음(예: ""북쪽을 향한 텐트는 몇 개야?"")
     * 이는 작업 방식에 새로운 길을 열어줌
          + 처음에는 약간 이상하지만 익숙해지면 매우 지루한 작업을 몇 초 만에 창의적인 방법으로 완료할 수 있음

AI와 협업 편집

     * 브레인덤프의 모든 것을 멀티플레이어로 만들고 싶었음
          + 게임 제작과 플레이 모두 해당됨
     * 처음에는 모두가 기여할 수 있는 하나의 큰 채팅만 있었지만 혼란스러웠음
          + 주된 문제는 종종 서로 관련이 없는 두 가지 다른 것에 대해 작업한다는 것임
     * 여러 솔루션을 시도한 후 ""Threads""라고 부르는 것으로 수렴함
          + 세계 어디에서나 프롬프트를 시작할 수 있지만 필요할 때 해당 프롬프트를 구체화하거나 추가할 수도 있음
          + 스레드에는 처음에 최신 게임 상태가 제공되지만 프로젝트의 전체 기록은 없음
          + 여러 스레드가 동시에 ""실행"" 중일 수 있지만 스레드당 한 번에 하나의 프롬프트만 실행될 수 있음
     * 지금까지 이것은 꽤 잘 작동함
          + 테스트에서는 동시에 5명이 같은 세계에서 작업했는데 확실히 약간 혼란스러웠지만 여전히 기능적이었음
          + 사용자가 효과적으로 조정할 수 있는 방법을 적극적으로 모색 중임

벤치마킹 및 테스트

     * 프롬프트 엔진의 성능을 평가하기 위해 벤치마킹 도구를 개발함
          + 이 도구는 각각 고유한 프롬프트가 있는 수십 가지 시나리오를 실행한 다음 GPT를 사용하여 해당 프롬프트의 성공 여부를 평가함
     * ""평가자""라는 두 번째 GPT(자체 시스템 프롬프트 포함)에 이러한 조건, 완료 시 시뮬레이션 상태 및 발생한 모든 오류가 제공되며 테스트가 성공했는지 여부를 판단하도록 요청받음
     * 테스트 스위트는 아직 초기 단계이지만 새로운 프롬프트 스타일과 실패 사례를 발견할 때마다 점점 더 많은 테스트를 추가하고 있음

Braindump를 만드는 이유

     * 개인적으로 게임과 창의성을 항상 사랑해왔음
     * 생성형 AI는 생산성 향상의 자연스러운 다음 단계임
          + 이를 통해 단순히 더 많은 일을 할 수 있음
     * 대형 스튜디오가 점점 더 보수적인 게임을 만들고 있기 때문에 소규모 그룹이나 심지어 개인이 꿈의 게임을 만들 수 있도록 권한을 부여하는 것이 기쁨
     * 사람들이 손끝에서 전체 AI 게임 스튜디오를 가지고 있을 때 어떤 미친 아이디어를 내고 실현할지 보고 싶음

앞으로의 계획

     * 브레인덤프는 이제 막 시작되었음
     * 현재 ""명령"" 실행에는 꽤 능숙하지만(""고양이 만들기"") 훨씬 더 모호하거나 ""큰"" 작업도 처리할 수 있도록 확장할 수 있다는 것을 알고 있음
     * 다음과 같은 사항을 연구하고 있음
          + Planning을 통해 ""더 큰"" 프롬프트 지원
          + GPT가 추측을 멈추고 대신 사용자에게 명확히 할 것을 요청하도록 함
          + GPT가 자신의 작업을 비판하도록 하여 코드 품질 개선
          + 발견 가능성 및 영감 개선(""이것으로 무엇을 만들 수 있을까?"")
          + LLM에 적합한 방식으로 게임 엔진 기능 개선
"
"https://news.hada.io/topic?id=15412","딥컴퓨팅의 새로운 RISC-V 메인보드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         딥컴퓨팅의 새로운 RISC-V 메인보드

새로운 RISC-V 메인보드 소개

  DeepComputing의 RISC-V 메인보드

     * DeepComputing이 RISC-V 프로세서를 사용하는 최초의 파트너 개발 메인보드를 제작함.
     * 이 메인보드는 Framework Laptop 13에 사용될 예정이며, RISC-V Summit Europe에서 시연될 예정임.

  RISC-V와 Framework의 철학적 일치

     * RISC-V와 Framework는 모두 개방형 생태계의 힘을 믿음.
     * RISC-V는 완전히 개방된 명령어 집합 구조(ISA)로, 누구나 확장하고 사용할 수 있음.
     * x86과 ARM은 각각 Intel과 Arm Holdings가 소유한 ISA로, 사용하려면 라이선스 비용을 지불해야 함.

  RISC-V의 기술적 특징

     * RISC-V의 기본 명령어 집합은 단순하고 효율적임.
     * 다양한 확장을 통해 고성능 및 특수 계산을 가능하게 함.
     * DeepComputing의 RISC-V 메인보드는 StarFive의 JH7110 프로세서를 사용하며, SiFive의 U74 RISC-V 코어 4개를 포함함.

  개발자와 취미자를 위한 메인보드

     * 이번 세대의 메인보드는 주로 개발자, 취미자, 실험가를 위한 것임.
     * 인텔 및 AMD 기반 메인보드와 비교해 주변 장치 세트와 성능이 아직 경쟁력 없음.
     * 메모리가 납땜되어 있고, MicroSD 카드와 eMMC를 저장 장치로 사용함.

  추가 업데이트

     * Framework Laptop 13의 오픈 소스 CAD 파일을 공유하여 스킨, 케이스, 액세서리 개발을 가능하게 함.
     * 영국 영어와 독일어 키보드를 갖춘 Factory Seconds 시스템을 제공하여 더 저렴하게 생태계에 진입할 수 있게 함.

GN⁺의 의견

     * RISC-V의 장점: RISC-V는 개방형 구조로, 누구나 자유롭게 사용할 수 있어 혁신과 확장이 용이함.
     * 개발자에게 유리: 개발자와 취미자들이 새로운 기술을 실험하고 배울 수 있는 좋은 기회가 될 수 있음.
     * 성능 제한: 현재 세대의 메인보드는 성능 면에서 인텔 및 AMD 기반 제품과 경쟁하기 어려움.
     * 오픈 소스 생태계: 오픈 소스 CAD 파일 제공은 사용자 맞춤형 액세서리 개발을 촉진할 수 있음.
     * 미래 가능성: RISC-V 기술이 발전함에 따라 더 많은 소비자 제품에 적용될 가능성이 있음.

        Hacker News 의견

     * SBC 제조사들이 기존의 노트북 형태 대신 모듈형으로 전환하는 것이 바람직함. 기존 노트북은 저성능 SBC를 사용해도 비싼 화면과 키보드 때문에 비효율적이었음.
     * 새로운 보드가 독립적으로 작동할 수 있다면 더욱 좋을 것임. 오픈 소스 CAD 파일도 기대됨.
     * JH7110과 마이크로SD를 사용하는 RISC-V SBC로, 기존의 저렴한 SBC와 유사함. RISC-V 노트북 아이디어는 흥미롭지만, 새로운 기능은 많지 않을 것임.
     * 개발 목적으로는 기존 SBC나 VM보다 특별한 이점이 없음. DeepCompute의 RISC-V 노트북이 더 강력할 가능성이 있음.
     * Framework 플랫폼을 위한 다양한 부품이 개발되는 것은 긍정적임. 이 제품은 특정 사용자에게만 유용할 수 있지만, 다양한 선택지를 제공함.
     * 저렴하다면 테스트 목적으로 구매할 의향이 있음. 교체가 쉽고, 노트북 형태가 아닐 때는 인쇄된 인클로저에 넣을 수 있음.
     * 사진을 보면 M.2 슬롯이 없고, 마이크로SD 슬롯과 와이파이 카드 슬롯이 있음. JH7110을 위한 큰 팬과 냉각 장치가 있음.
     * DC-ROMA 배터리는 48Wh로 Framework의 61Wh와 55Wh 옵션과 비교해 크지 않음. 배터리 수명은 비슷할 것임.
     * Framework의 첫 파트너 개발 메인보드는 큰 성과임.
     * RISC-V에 대한 장기적인 관심이 있지만, 가까운 미래에는 Snapdragon X Elite 보드도 기대됨.
     * Framework 13 사용자로서 RISC-V로 전환을 기대하고 있음. 성능이 낮더라도 기꺼이 지불할 의향이 있음.
     * 기존 Framework 13에 새로운 보드를 장착할 수 있는 점이 좋음.
     * 이 보드는 주로 개발자, 취미자, 실험가를 위한 것임. 성능과 배터리 수명에서 Intel 및 AMD 보드와 경쟁하지 않음.
     * Framework 노트북에 서드파티 보드가 추가되는 것이 중요함. Raspberry Pi도 ARM 보드를 개발해 플랫폼을 널리 알릴 수 있음.
     * RISC-V 보드로 무엇을 할 수 있을지 실용적인 의문이 있음. 현재 많은 소프트웨어가 호환되지 않을 가능성이 있음.
"
"https://news.hada.io/topic?id=15377","Show HN: 세계에서 가장 작고 저렴한 Network Switch 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show HN: 세계에서 가장 작고 저렴한 Network Switch 개발

네트워킹 스위치

  개요

     * mrxSwitch는 세계에서 가장 작고 저렴한 네트워킹 스위치임.
     * 단순성과 비용에 중점을 두고 설계됨.
     * 외부 자기장, 고성능 비관리형 스위치 IC, 1.25mm 피치의 Fast Ethernet(100BASE-TX) 커넥터를 사용함.

  상세 설명

     * mrxSwitch는 IP175Gx Ethernet 통합 스위치 IC를 사용하는 5포트 100BASE-TX 비관리형 스위치임.
     * 최대 15V의 입력을 3.3V의 작동 전압으로 낮춤.
     * 4층 보드 설계로 최소한의 노이즈를 보장함.
     * IEEE 802.3 표준을 준수하기 위해 10쌍의 자기 변압기와 공통 모드 초크를 사용함.
     * 크기는 44.9mm x 42.2mm로 세계에서 가장 작은 네트워킹 스위치임.
     * 임베디드 시스템, ROVs, AUVs, 소비자 전자제품, DIY 프로젝트 등 공간이 제한된 네트워킹 응용 프로그램에 적합함.

    현재 상태

     * V2.0 테스트 완료 및 기능 확인됨.
     * V1.0 테스트 완료 및 기능 확인됨.

    통합 센서/IC

     * IC Plus IP175Gx: 5포트 10/100 Ethernet 통합 스위치
          + 5포트 100BASE-TX 임베디드 스위치
          + 고효율 85nm CMOS 공정
          + 전체 상태 LED
          + EEPROM 구성
     * LM1117MP-3.3: 800mA LDO
          + 3.3V 고정 출력 LDO
          + 최대 15V 입력
          + 1.2V 드롭아웃
     * QT48A03: 1000Base-T 듀얼 포트 변압기
          + 350uH 1차
          + 8mA DC 바이어스
     * BT16A07: 10/100 Base-T 단일 포트 변압기
          + 350uH 1차
     * QT24A23 (퇴역): 10/100/1000Base-T 단일 포트 변압기
          + 350uH 1차
          + 8mA DC 바이어스

    변경 로그

     * V2 변경 사항:
          + 크기 30% 감소, 2024년 6월 기준 세계에서 가장 작은 네트워킹 스위치로 만듦.
          + 전체 BOM 비용 15% 감소(더 기본적인 부품 사용).
          + QT24A23을 QT48A03으로 대체하여 더 저렴하고 컴팩트한 솔루션 제공.
          + 구성 요소 및 EEPROM 제거.

  GN⁺의 의견

     * 흥미로운 점: mrxSwitch는 크기와 비용 면에서 혁신적임. 특히 공간이 제한된 프로젝트에 유용할 수 있음.
     * 도입 시 고려 사항: 비관리형 스위치이므로 고급 네트워크 관리 기능이 필요하지 않은 경우에 적합함.
     * 관련 제품: 비슷한 기능을 제공하는 다른 소형 네트워킹 스위치로는 TP-Link TL-SF1005D 등이 있음.
     * 기술적 장점: 4층 보드 설계와 IEEE 802.3 표준 준수로 인해 신뢰성과 성능이 높음.
     * 비판적 시각: 비관리형 스위치이므로 네트워크 트래픽 제어 및 모니터링 기능이 부족할 수 있음.

        Hacker News 의견

     * 고등학생 팀의 멋진 작업: 고등학생 팀이 만든 이 작업이 정말 멋지며, Purdue Space Program에서 $80짜리 BotBlox 스위치를 사용했을 때보다 훨씬 저렴한 $6.9짜리 이더넷 스위치가 인상적임.
     * 전압 조절기 관련 질문: 선형 전압 조절기는 목표 전압에 도달할 때까지 전압 차이를 소모하며, 12V 입력에서 6.96W의 열을 발생시킴. 보드가 충분히 차가운지 궁금함.
     * 프로젝트 칭찬과 시장성: 프로젝트는 훌륭하지만 기존 제품과 경쟁하기 때문에 새로운 시장을 창출하지는 않음. 특정 니치 시장을 찾아야 함.
     * 고급 스위치 요구사항: 48포트 10GBASE-T, POE++, L2 스위치, 4개의 100GBASE QSFP28 업링크, 듀얼 핫스왑 PSU 등 고급 스위치에 대한 요구사항을 제시함.
     * 추가 사진 요청: 하드웨어 용어에 익숙하지 않은 사람들을 위해 더 많은 사진, 특히 인클로저 사진을 요청함.
     * 크기 비교: BotBlox SwitchBlox Nano는 25.50 x 25.50 mm인데, 이 제품은 44.90 x 42.11 mm로 세계에서 가장 작은 스위치라는 주장에 의문을 제기함.
     * 고등학생 로봇 프로젝트 칭찬: 고등학생 로봇 프로젝트에 항상 감명받으며, 이더넷이 필요한 프로젝트에 중간 품질의 스위치를 구매함.
     * 싱글 페어 이더넷 제안: 임베디드 용도를 목표로 한다면 왜 싱글 페어 이더넷 대신 클래식 풀-팻 이더넷을 선택했는지 궁금함.
     * 오픈 소스 기술 자랑: ""Live free or die!""라는 주 슬로건을 가진 주에서 오픈 소스 기술을 만든 것을 자랑스러워함.
     * 싱글 보드 클러스터 프로젝트: Octavo SoMs를 기반으로 한 싱글 보드 클러스터 프로젝트를 시작하고 싶으며, SoM과 스위치 사이에 어떤 부품이 필요한지 궁금함.
     * 기가비트 이더넷 지원 여부: 기가비트 이더넷을 지원하지 않는 이유가 궁금하며, 100mbit 이더넷을 사용한 지 오래됨.
"
"https://news.hada.io/topic?id=15421","Token Cost - 400+개 LLM의 토큰당 비용 계산하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Token Cost - 400+개 LLM의 토큰당 비용 계산하기

     * 프롬프트 및 완성답변의 예상 비용을 계산하여 주요 LLM API를 사용하는 데 드는 비용을 계산
     * 각 LLM 제공사들의 최신 모델과 가격을 트래킹
     * 프롬프트 전송전 토큰수와 생성한 답변의 토큰수를 측정해서 각각 LLM들의 토큰비용으로 총액을 계산
     * 자신의 LLM 연동 시스템에 1개 함수만으로 붙여서 이용 가능
"
"https://news.hada.io/topic?id=15341","인텔, 오하이오주로 916,000파운드 'Super Load' 운송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 인텔, 오하이오주로 916,000파운드 'Super Load' 운송

  인텔의 '슈퍼 로드'가 오하이오를 가로지르다

    주요 내용

     * 인텔의 새로운 캠퍼스 건설: 인텔이 오하이오주 뉴 알바니에 새로운 캠퍼스를 건설 중임. 이 캠퍼스는 1,000에이커 규모로 두 개의 반도체 공장을 포함하며, '실리콘 하트랜드'로 불림.
     * 슈퍼 로드 운송: 인텔은 916,000파운드(약 400톤) 무게의 '콜드 박스'를 포함한 대형 장비들을 오하이오주 도로를 통해 운송 중임. 이 과정은 약 9일간 150마일을 이동하며 교통 혼잡을 유발할 예정임.
     * 콜드 박스: 콜드 박스는 반도체 제조에 필요한 극저온 기술을 지원하는 자립형 공기 처리 구조물임. 크기는 높이 23피트, 너비 20피트, 길이 280피트로 축구장 길이에 가까움.
     * 운송 계획: 오하이오 교통국(ODOT)은 이 대형 장비 운송을 위해 수개월간 계획을 세웠으며, 전력선 이동 및 도로와 다리의 하중을 고려한 조치를 취함.

    GN⁺의 의견

     * 지역 경제 활성화: 인텔의 새로운 캠퍼스는 지역 경제에 큰 도움이 될 수 있음. 특히, 지역 학교와 대학에 대한 투자로 지역 인재 양성에 기여할 수 있음.
     * 교통 혼잡 문제: 대형 장비 운송으로 인한 교통 혼잡은 지역 주민들에게 불편을 줄 수 있음. 이에 대한 충분한 사전 공지와 대책이 필요함.
     * 기술적 도전: 이러한 대형 장비 운송은 기술적 도전이 많음. 도로와 다리의 하중을 견딜 수 있도록 철저한 계획이 필요함.
     * 환경 영향: 대형 장비 운송이 도로와 환경에 미치는 영향을 최소화하기 위한 방안이 필요함. 예를 들어, 도로 손상을 방지하기 위한 추가적인 조치가 필요할 수 있음.

        Hacker News 의견

     * 거대한 장비가 도로를 지나는 것을 볼 때마다 즐거움을 느낌. 이는 사회를 건설하고 유지하는 데 필요한 엄청난 노력을 엿볼 수 있게 해줌.
     * Intel의 916,000파운드 화물은 반도체 제조에 필요한 극저온 기술을 지원하는 독립형 공기 처리 구조물임. 이 화물은 크기 때문에 일반 철도로는 운송이 불가능함.
     * 미국 내 반도체 공장의 현황에 대해 궁금해하는 의견. 대부분의 공장이 2020년 이전에 지어졌으며, 현대적이고 정교한 공장을 위한 추진이 필요함.
     * 미국 내 반도체 생산이 증가하는 것은 국가적으로 큰 이익이 될 것이라고 기대함. 미국이 반도체 생산에서 지배적인 위치를 차지할 것이라고는 기대하지 않지만, 긍정적인 전망을 가짐.
     * 오하이오 교통부가 몇 주 전부터 운송 경로에 대해 논의했으며, 특정 경로를 통해 주로 농촌 지역을 통과할 예정임.
     * 도로에 가해지는 하중은 그 질량의 네제곱에 비례하여 손상을 일으킴. 이는 1962년 미국 정부 출판물에 자세히 설명되어 있음.
     * LA 타임즈의 ""Space shuttle Endeavour's trek across LA: Timelapse"" 비디오를 추천함.
     * Intel의 화물이 280피트로 축구장보다 길다는 표현이 AI에 의해 작성된 것 같다는 의견. 축구장은 360피트임.
     * Intel이 오하이오를 선택한 이유에 대해 궁금해하는 의견. 구체적인 이유는 명확하지 않지만, 주지사와 부지사의 적극적인 유치 노력이 영향을 미쳤을 것이라고 추측함.
     * 다른 회사들이 이미 마련된 슈퍼 로드 경로 계획을 활용하고 있다는 점이 흥미로움. 슈퍼 로드가 가능해지면 제조 공정에 큰 영향을 미칠 것이라고 생각함.
     * 화물의 길이를 축구장과 비교하는 표현이 혼란스러움. 280피트가 360피트보다 길다는 것은 명확하지 않음.
"
"https://news.hada.io/topic?id=15455","마이크로소프트가 Edge 브라우저에서 React를 제거하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  마이크로소프트가 Edge 브라우저에서 React를 제거하는 이유

     * 마이크로소프트가 최근 Edge 브라우저의 성능 개선을 위해 React 사용을 중단한다고 발표함
     * Edge 브라우저는 구글의 오픈소스 프로젝트인 Chromium 기반으로 만들어짐
          + Edge의 UI 차별화를 위해 자체 컴포넌트를 React로 개발함
          + 메뉴, 드롭다운 등 작은 컴포넌트들을 React로 만들어 조합하는 방식 사용

  문제점

    1. 모듈성 문제
          + 여러 팀이 공통 번들과 파일을 공유하면서 불필요한 의존성 발생
          + 한 UI 부분의 속도 저하가 다른 부분에도 영향을 미침
    2. 클라이언트 사이드 렌더링
          + JavaScript를 사용한 클라이언트 렌더링 방식으로 인한 속도 저하
    3. 번들 크기 증가
          + 여러 컴포넌트가 불필요하게 큰 공통 번들을 공유하게 됨

  해결책

     * WebUI 2.0이라는 새로운 마크업 우선 아키텍처 개발
     * JavaScript 코드와 번들 크기를 최소화하는 방식
     * React 대신 이 새로운 아키텍처 적용 예정

  결론

     * React 자체의 문제라기보다는 마이크로소프트의 잘못된 구현이 원인
     * React는 느리지 않지만, 여러 인스턴스를 생성할 때는 빠르기를 기대할 수 없음
     * 하지만 마이크로소프트는 React 대신 자체 솔루션 개발을 선택함

   리엑트가 대부분 경우 느리지 않죠 ㅋㅋㅋ

   원문에도 React 자체가 느리지 않다고 되어있나요?

     React isn’t slow. But you cannot expect it to be blazing fast when you create dozens of instances.

   네

   다른 MS 프로그램은 PWA로 변하는 기이한 상황이네요..
"
"https://news.hada.io/topic?id=15362","iOS 18은 전체 주소록 접근 요청 앱을 규제함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      iOS 18은 전체 주소록 접근 요청 앱을 규제함

     * 애플이 iOS 18에서 사용자 연락처 접근을 요청하는 소셜 앱에 대한 규제를 강화함
     * 2단계로 구성된 새로운 권한 팝업 도입. 첫 번째 화면에서 연락처 접근 허용 여부를 묻고, 두 번째 화면에서 공유할 연락처를 선택할 수 있게 함
     * 사용자가 앱에 연락처 접근을 허용하면, 앱은 새로운 연락처가 추가될 때마다 지속적으로 접근할 수 있었음. 이를 제한하기 위해 두 단계 권한 팝업 도입.
     * 사용자는 ""전체 접근 허용"" 또는 ""연락처 선택"" 옵션을 통해 특정 연락처만 공유할 수 있게 됨.
     * 이 기능을 위해 개발자가 별도의 API를 구현할 필요가 없음. 앱이 연락처 접근을 요청하면 자동으로 새로운 화면이 나타남.
     * 영향 받는 사례
          + 사진 공유 앱인 Lapse는 사용자가 가입하려면 친구를 초대하도록 하는 메커니즘을 채택하여 App Store 상위권에 올랐음
          + Poparazzi 및 Clubhouse 와 같은 앱에서는 전체 주소록 액세스를 요구했는데, 이는 네트워크를 빠르게 확장하는 데 도움이 되는 Growth Hacking 이었음
     * 보안 회사 Mysk는 이 변화가 LinkedIn 같은 데이터 수집 앱에는 데이터 수집 앱에 ""슬픈 소식""이 될 것이라고 언급함.
          + 스냅챗의 경우 계속 연락처 접근 권한을 요구하는데, 권한을 허용하고 연락처를 0개로 설정하면 됨

  GN⁺의 의견

     * 사용자 프라이버시 보호: 이번 변화는 사용자 프라이버시를 강화하는 긍정적인 조치로, 사용자들이 자신의 데이터를 더 잘 통제할 수 있게 됨.
     * 앱 성장 전략 변화 필요: 연락처 접근을 통한 성장 전략을 사용하던 앱들은 새로운 사용자 확보 방법을 모색해야 할 필요가 있음.
     * 개발자 부담 감소: 개발자들이 별도의 API를 구현할 필요가 없어, 개발 부담이 줄어듦.
     * 사용자 경험 개선: 사용자가 앱 사용 시 불필요한 데이터 공유를 줄일 수 있어, 사용자 경험이 개선될 것으로 기대됨.
     * 경쟁 앱 등장 가능성: 기존의 성장 전략을 사용하던 앱들이 새로운 전략을 모색하는 동안, 사용자 프라이버시를 중시하는 경쟁 앱들이 등장할 가능성이 있음.

        Hacker News 의견

     * 광고와 알림 권한에 대한 단속을 좋아함. 광고 때문에 중요한 알림을 놓치는 상황을 개선하고 싶음.
     * 연락처 접근을 요구하는 앱을 싫어함. 개인 정보를 보호하기 위해 별도의 데이터베이스를 사용함.
     * 이미 주요 소셜 네트워크가 주소록 정보를 알고 있어, 이런 조치가 너무 늦었다고 생각함.
     * 연락처 정보만으로도 개인을 식별할 수 있어, 데이터 프라이버시를 위한 큰 진전이라고 생각함.
     * 특정 앱의 네트워크 접근을 차단할 수 있기를 원함.
     * 애플이 '아이덴티티 프록시'를 도입할 가능성을 언급함. 사용자가 명시적으로 허용하지 않는 한, 앱이 실제 연락처에 접근하지 못하게 하는 시스템을 예상함.
     * 애플의 폐쇄적인 생태계를 좋아함. 이는 앱스토어 규칙을 따르게 하여 사용자 보호를 가능하게 함.
     * 제한된 사진 공유 기능이 더 빨리 도입된 것에 놀람.
"
"https://news.hada.io/topic?id=15389","소프트웨어 생산성을 떨어뜨리는 간단한 방법 (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     소프트웨어 생산성을 떨어뜨리는 간단한 방법 (2023)

  기술

     * 핵심 시스템을 6-18개월 동안 재작성하도록 요구함. 이전 CTO를 비난함.
     * 각자 다른 언어와 프레임워크를 사용하도록 권장함.
     * 시스템을 임의의 경계로 분할하여 기능에 많은 시스템이 관여하도록 함.
     * 복잡한 개발 환경을 조성함. 최소한 12개의 서비스가 포함된 서비스 메쉬를 실행하도록 함.
     * 프로덕션 환경과 개발자 환경이 최대한 다르게 만듦.
     * 배포를 가능한 한 드물게 함. 배포에 대해 극도로 신중할 것을 권장함.
     * 코드 변경 및 일반 워크플로우에 매우 복잡한 프로세스를 도입함. 이를 ""보안"" 또는 ""준수"" 때문이라고 핑계댐.
     * 모든 작업을 작업 추적기에 기록하고 최소 5명의 그룹이 검토, 우선순위 지정 및 승인하도록 함.
     * 원래 작업 범위 외의 모든 것을 금지함. 예를 들어 코드 정리나 기타 개선 작업을 금지함.
     * 핵심 역량이 아닌 거의 모든 것을 내부에서 구축함. ""벤더 종속을 피하기 위해""라고 정당화함.
     * 모든 것에 추상화 계층을 추가하도록 고집함. 추상화된 벤더를 사용하고 추가 추상화 계층을 추가함.
     * 비현실적으로 낙관적인 규모의 기술 결정을 권장함. 현재보다 최소 3배 이상의 부하를 계획함.
     * 시스템의 공동 소유를 권장함. 유지보수에 대한 책임감을 느끼지 않도록 함.
     * 거의 모든 것을 ""플랫폼""으로 중앙 집중화하도록 고집함. 플랫폼 팀을 인력 부족 상태로 유지하고 다른 팀이 플랫폼이 소유할 수 있는 것을 구축하지 못하도록 함.
     * 플랫폼 팀이 API를 자주 반복하도록 하고 다른 팀이 최신 버전으로 코드를 리팩토링하도록 강제함.
     * ""아키텍트""를 고용하고 작은 변경 사항에도 ""아키텍처 검토""를 요구함.
     * 작은 변경 사항에도 ""보안 검토""를 요구함.

  제품

     * 유용한 지표를 학문적 이유로 무시함. 예를 들어 ""편향"" 또는 ""지연 지표""라고 함.
     * 비즈니스 가치와 상관없는 허영 지표를 선택함. 노이즈가 많은 지표를 선택함.
     * 모든 것을 ""큰 도박""으로 간주하고 모든 것이 완전히 완료되기 전까지 배포하지 않도록 고집함.
     * 모든 기능을 ""필수""로 간주하고 ""버전 제로""의 중요한 부분으로 간주함. 절대 양보하지 않음.
     * 매우 상세한 ""전략적"" 계획을 개발함.
     * 자주 방향을 바꿈.
     * 명백한 개선 사항을 ""국지적 최적화""로 무시함.
     * 최신 트렌드를 사용하여 자원을 묶어둠. 표면적으로 그럴듯한 ""AI 전략""을 시작함. 이를 위해 벤더와 컨설턴트에게 많은 비용을 지출함.
     * 제품 관리자가 대부분의 시간을 ""전략""과 ""계획""에 소비하도록 권장함.
     * 엔지니어와 제품 관리자가 내부적으로 제품을 사용하기 어렵거나 불가능하게 만듦.
     * 내부적으로 사용자를 ""멍청이""로 무시함.

  리더십

     * 보상을 직함과 팀 크기에 연결하여 팽창을 유도함.
     * 전략, 기능 또는 기술적 복잡성에 대해 큰 소리를 냄.
     * 새로운 제품 영역에 진입하기 위해 비싼 인수를 함. ""시너지""를 언급함. 인수한 제품을 폐기함.
     * 보고 구조에 많은 점선 사용함.
     * 가능한 한 많은 사람들이 다른 팀, 위치 또는 기능의 관리자에게 보고하도록 함. 관리자가 보고서를 감독할 수 없도록 함.
     * 성과가 저조한 사람을 자주 다른 팀으로 재배치함.
     * 성과가 높은 사람을 불확실한 결과물이 있는 매우 추측적인 R&D 프로젝트에 배치함.
     * 사소한 결정에도 항상 회의를 요구함.
     * 모든 ""이해관계자""가 회의에 참석해야 한다고 고집함.

  채용

     * 겉보기에는 객관적이지만 실제로는 주관적인 채용 과정을 만듦.
     * ""문화 적합성 부족"" 또는 기타 모호한 기준으로 최고의 인재를 거부함.
     * ""잠재력"" 또는 ""태도"" 또는 기타 모호한 기준으로 가장 약한 후보자를 고용함.
     * 대규모 인력 약속을 가진 매우 비싼 고위 리더를 채용함.
     * 기회주의자를 유치하기 위해 부풀려진 직함과 만들어진 역할을 사용함.
     * 매우 전문화된 ""전문가""를 고용한 후 그들이 그만두지 않도록 인위적인 프로젝트를 만듦.
     * 전문화를 다른 보완적인 사람을 고용하는 정당화로 사용함.

  프로젝트 관리

     * 모든 프로젝트에 대해 매우 상세한 견적을 요구함.
     * 가능한 한 많은 팀, 이상적으로는 다른 위치에 있는 팀에 걸친 프로젝트를 권장함.
     * 다른 팀이 수행한 작업에 의존하는 새로운 요구 사항을 추가함.
     * 비싼 에이전시를 자주 사용함. 범위를 모호하게 만들고 미완성 프로토타입을 내부 팀에 넘겨 마무리하도록 함.
     * 다른 팀의 이해관계자를 위한 복잡한 ""셀프 서비스"" 시스템을 구축함.

  결과

     * 생산성을 떨어뜨리는 것은 어려운 일임. 하지만 적진 후방에 낙하산을 타고 CTO로 취업하면 이를 실현할 수 있음.
     * 비파괴적인 사람들에게: 이는 팀의 생산성을 최대한 끌어내는 방법에 대한 이야기임. 생산성은 작은 것들이 모여서 이루어짐.
     * 100가지 작은 것들이 각각 5%의 생산성 세금을 부과하면 모든 것이 131배 느려짐. 엔지니어를 행복하게 유지하려면 그럴듯하고 그럴듯한 100가지 작은 것들을 거부해야 함.

GN⁺의 의견

     * 이 기사는 소프트웨어 개발에서 생산성을 저해하는 다양한 방법을 유머러스하게 설명하고 있음. 이를 통해 실제로 피해야 할 행동들을 명확히 알 수 있음.
     * 기술적 부채를 줄이고 효율적인 개발 문화를 유지하는 것이 중요함. 불필요한 복잡성과 관료주의를 피하는 것이 핵심임.
     * 팀의 사기를 높이고 협업을 촉진하는 환경을 조성하는 것이 중요함. 이는 생산성 향상에 직접적인 영향을 미침.
     * 이 기사는 소프트웨어 엔지니어링과 관리의 복잡성을 이해하는 데 도움이 됨. 특히 초급 엔지니어들에게 유용한 통찰을 제공함.
     * 다른 유사한 기능을 가진 프로젝트로는 ""The Phoenix Project""와 같은 책이 있음. 이는 IT와 DevOps의 효율성을 높이는 방법을 다룸.

   저렇게 안하는 회사가 있나요? ㅜ.ㅜ
   작고 성공을 거둔 회사라도 커지면 다 저렇게 되는 것 같은데...

   이전 회사에서 지시받은 일이 대부분 포함되어있네요 써먹지도 못할 플랫폼 강제사용... 표준 성능지표 무시... 했던 태스크 다시 시키기 등등

   어..?

   이거 완전 '유지보수하기 어렵게 코딩하는 법: 당신도 개발자로 평생 놀고 먹을 수 있다'...

   난죽택 하겠습니다.

   아앗..아앗!..아아!!.. 앗!... 아......

   몇가지가 저희 조직내에서도 보여서 안타깝습니다. ㅠ.ㅠ

   전설의 책 ""유지보수하기 어렵게 코딩하는 방법""이 떠오르네요.

   저도 이 책이!

   이렇게나 많이? 라고 생각할 수도 있겠지만, 위 내용들을 한사람 또는 한조직이 이뤄낼 수도 있겠다는 생각이 드네요.^^

   가능합니다

        Hacker News 의견

     * CIA의 제안이 실제로 효과가 있었는지에 대한 확신이 부족함: 원래 CIA의 제안이 실제로 효과가 있었는지에 대한 설득력 있는 이유를 본 적이 없으며, 조직은 자연스럽게 그런 사람들을 무시하는 경향이 있음.
     * 회사를 망치는 방법: 나쁜 사람들을 관리직에 승진시키고, 수익성 없는 것을 최적화하도록 하는 것이 회사에 큰 타격을 줄 수 있음.
     * 파괴적인 CTO가 되는 방법: 거의 아무것도 하지 않고, 유능한 사람들을 제거하며, 책임을 아래로 미루는 문화를 조성하는 것이 쉬움.
     * 공식 채널을 통한 작업과 서면 명령 요구: 일부 사람들에게는 공식 채널을 통한 작업과 서면 명령 요구가 더 생산적일 수 있음.
     * OSS와 CIA의 차이: OSS(전략 서비스국)가 2차 세계대전 중에 훌륭한 책을 만들었고, CIA는 1947년에 설립됨.
     * 비전의 중요성: 제품의 전체적인 작동 방식이나 더 나은 미래에 대한 일관된 비전을 가진 사람들을 제거하는 것이 가장 중요한 단계임.
     * 채용 섹션 업데이트 필요: Leetcode의 어려운 문제를 30분 내에 해결하도록 요구하고, 불확실성과 의심을 용납하지 않는 것이 필요함.
     * 생산 환경과 개발자 환경의 차이: 현대 아키텍처에서는 외부 서비스가 많아 생산 환경과 개발자 환경이 다를 수밖에 없으며, 이는 개발자들이 항상 인터넷에 연결되어 있어야 함을 의미함.
     * 자기 보호를 위한 결정: ""사보타주""를 위한 많은 결정이 사람들에게 자신의 실수를 덮으려는 시도를 설득하는 것과 관련이 있음.
     * 회사에서의 ""최고 관행"": 기사 초반에 제시된 여덟 가지 규칙이 회사에서 ""최고 관행""으로 엄격히 따르고 있음.
     * 컨설턴트들의 행동: 많은 컨설턴트들이 이러한 행동을 대부분, 아니면 전부 하고 있음.
     * 기술 업계의 문제: 기술 업계에는 이러한 행동을 하는 사람들이 많으며, 그들은 자신들이 도움을 주고 있다고 믿음.
     * 대기업에서의 경험: 대기업에서의 제한된 경험이 이 글의 내용과 매우 일치함.
"
"https://news.hada.io/topic?id=15359","HN-text - 빠르고 읽기 쉬운 해커뉴스 터미널 클라이언트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN-text - 빠르고 읽기 쉬운 해커뉴스 터미널 클라이언트

     * 화살표/hjkl 로 이동
     * 우측 화살표키로 프론트페이지 → 댓글페이지 → 기사의 텍스트만 보기로 이동
     * 스페이스로 브라우저에서 기사 열기, C로 댓글 페이지 열기

   와 이런거 만들고 싶었는데 참고하기 딱 좋네요! 감사합니다 ㅎ.ㅎ
"
"https://news.hada.io/topic?id=15408","SPF, DKIM, DMARC 이해하기: 간단한 가이드이해하기: 간단한 가이드

  이 가이드는 무엇을 위한 것인가?

     * 이메일을 보내는 애플리케이션을 개발, 지원, 유지하는 사람들에게 필수적인 가이드임.
     * 이메일이 스팸 폴더가 아닌 수신자의 받은 편지함에 도착하도록 보장함.
     * 사이버 범죄자와 스팸 발송자로부터 도메인을 보호하는 방법을 설명함.

  왜 이 가이드를 선택해야 하는가?

     * 간단하고 명확한 설명과 예시로 SPF, DKIM, DMARC를 이해하기 쉽게 설명함.
     * GitHub에 호스팅되어 개발 환경과 통합하여 빠르게 정보에 접근할 수 있음.
     * 커뮤니티가 지속적으로 업데이트하고 유지할 수 있는 문서임.

  이 가이드는 무엇을 위한 것이 아닌가?

     * 이메일 서버 설정이나 암호화, 보안 이메일 게이트웨이와 같은 고급 주제를 다루지 않음.

  SPF, DKIM, DMARC 간단히 설명하기

    SPF (Sender Policy Framework)

     * SPF: 이메일을 보낼 수 있는 친구 목록과 같음.
     * SPF 레코드: 이 친구 목록을 DNS TXT 레코드에 저장함.
     * 예시: v=spf1 ip4:123.123.123.123 ~all

    DKIM (DomainKeys Identified Mail)

     * DKIM: 이메일 내부에 비밀 노트를 넣는 것과 같음.
     * DKIM 레코드: 공개 키를 DNS TXT 레코드에 저장하여 수신자가 이메일의 진위를 확인할 수 있게 함.
     * 예시: v=DKIM1; k=rsa; p=NICfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBolTXCqbxwoRBffyg2efs+Dtlc+CjxKz9grZGBaISRvN7EOZNoGDTyjbDIG8CnEK479niIL4rPAVriT54MhUZfC5UU4OFXTvOW8FWzk6++a0JzYu+FAwYnOQE9R8npKNOl2iDK/kheneVcD4IKCK7IhuWf8w4lnR6QEW3hpTsawIDAQ0B

    DMARC (Domain-based Message Authentication, Reporting & Conformance)

     * DMARC: SPF와 DKIM의 규칙을 종합하여 큰 규칙 책을 만드는 것과 같음.
     * DMARC 레코드: 이 규칙 책을 DNS TXT 레코드에 저장하여 수신자가 이메일을 처리하는 방법을 결정함.
     * 예시: v=DMARC1; p=none; rua=mailto:postmaster@example.com

  SPF, DKIM, DMARC의 실제 사용 예시

     * 모바일 앱: 피트니스 앱이나 은행 앱이 이메일을 보낼 때 SPF, DKIM, DMARC를 사용하여 이메일이 스팸 폴더가 아닌 받은 편지함에 도착하도록 보장함.
     * 이메일 서비스 제공자: Gmail, Yahoo, Outlook 등은 SPF, DKIM, DMARC를 사용하여 수신 이메일을 인증함.
     * 소셜 미디어 플랫폼: LinkedIn, Facebook, Twitter 등은 알림 이메일을 보낼 때 SPF, DKIM, DMARC를 사용함.
     * 기업: 프로모션 이메일을 보낼 때 SPF, DKIM, DMARC를 사용하여 이메일이 스팸으로 표시되지 않도록 하고 도메인이 이메일 스푸핑에 사용되지 않도록 함.
     * 정부 기관: 시민에게 알림을 보낼 때 SPF, DKIM, DMARC를 사용하여 피싱 공격을 방지함.

  이제 무엇을 해야 할까?

    1. 이메일 주소와 도메인 식별: 앱에서 사용하는 이메일 주소와 도메인을 파악함.
    2. 현재 상태 확인: 이미 SPF, DKIM, DMARC 레코드가 있는지 확인하고 올바르게 설정되었는지 확인함.
    3. 도메인 접근 권한: DNS 레코드를 변경할 수 있는 권한이 있는지 확인함.
    4. DMARC 모니터링: DMARC 보고서를 모니터링하여 문제가 없는지 확인하고, 필요한 경우 수정함.

  SPF, DKIM, DMARC 상태 확인

     * MXToolbox:
          + https://mxtoolbox.com/ 방문
          + 'SPF Record Lookup', 'DKIM Record Lookup', 'DMARC Record Lookup' 도구 사용
     * DMARCTester:
          + https://www.dmarctester.com/ 방문
          + 이메일 보내기 또는 이메일 헤더 붙여넣기 방법 사용

  FAQ's with SPF, DKIM and DMARC

    1. DMARC 보고용 이메일 주소: 여러 사람이 확인할 수 있는 공유 메일박스를 사용하는 것이 좋음.
    2. SPF 레코드의 ~all, -all, ?all, +all 차이:
          + ~all (SoftFail): 목록에 없는 서버에서 온 이메일도 허용하지만 의심스러울 수 있음.
          + -all (Fail): 목록에 없는 서버에서 온 이메일은 거부함.
          + ?all (Neutral): 특별한 지침 없이 이메일을 처리함.
          + +all (Pass): 모든 서버에서 온 이메일을 허용함.
    3. SPF 없이 DMARC 설정 가능 여부: 가능하지만 비효율적임. SPF와 DKIM을 함께 사용하는 것이 좋음.
    4. 이메일 헤더에서 여러 SPF 실패와 일부 SPF 통과가 보일 때: 자신의 도메인과 관련된 SPF 체크를 신뢰해야 함.

  마무리

     * SPF, DKIM, DMARC는 이메일 보안의 숨은 영웅임.
     * 이 세 가지가 이메일의 신뢰성을 유지하는 데 중요한 역할을 함.

  GN⁺의 의견

     * 이메일 보안의 중요성: 이메일은 중요한 커뮤니케이션 수단으로, 보안이 매우 중요함.
     * SPF, DKIM, DMARC의 필요성: 이 세 가지 기술은 이메일 스푸핑과 피싱 공격을 방지하는 데 필수적임.
     * 도입 시 고려사항: 설정과 모니터링이 필요하며, 잘못된 설정은 이메일 전달에 문제를 일으킬 수 있음.
     * 관련 도구: MXToolbox와 DMARCTester와 같은 도구를 사용하면 설정 상태를 쉽게 확인할 수 있음.
     * 업계 표준: 이메일 보안을 강화하기 위해 SPF, DKIM, DMARC는 업계 표준으로 자리 잡고 있음.

   SPF, DKIM, DMARC 이젠 너무 중요 해진거 같습니다

   Google Workspace나 SES 등을 사용하게 되면 MX 레코드 외에도 SPF, DKIM 등 설정하는게 하나씩 늘어나고 있는데, 막상 찾아볼 생각은 안하고 어디선가 뭔가 잘 되고 있겠지 정도만 생각했었는데 감사합니다! :D

        Hacker News 의견

     * IT 관리자의 경험: 중소기업에서 IT를 관리하며, 잘못된 SPF 레코드로 인해 격리된 이메일을 자주 풀어달라는 요청을 받음. 화이트리스트 대신 SPF 레코드를 수정하도록 도움을 제공함. 이를 자동화하기 위해 Racket 언어로 스크립트를 작성함.
     * 책 추천: Michael W. Lucas가 ""Run Your Own Mail Server""라는 책을 준비 중이며, SPF/DKIM/DMARC 설정에 대한 자세한 내용을 다룸. BSDCan에서 그의 튜토리얼과 강연을 들었으며, 책을 추천함.
     * SPF/DKIM/DMARC 가이드 필요성: 이메일을 다른 도메인으로 보내는 앱 개발자를 위한 SPF/DKIM/DMARC 가이드가 필요함. 많은 티켓 시스템과 마케팅 플랫폼이 이 개념을 이해하지 못함.
     * 자동화의 중요성: SPF/DKIM/DMARC 설정을 자동화하는 스타트업을 운영 중이며, 가이드의 품질을 높게 평가함. 하지만 사용자가 문제를 한 번만 겪기 때문에 장기적인 이해가 어려움. 자동화가 중요함.
     * 디버깅 도구 추천: DMARC 문제를 디버깅하기 위한 좋은 도구 링크를 공유함.
     * 테스트 도구 추천: mail-tester.com과 eu.dmarcian.com의 무료 버전을 테스트 도구로 추천함. 또한 DKIM을 이해하기 위한 블로그 링크를 공유함.
     * 스팸 문제: 이메일 설정을 완벽하게 해도 Gmail에서 스팸으로 분류되는 경우가 있음. 수백 시간을 투자했지만 해결되지 않아 iCloud 같은 3자 호스팅 서비스를 사용하게 됨.
     * 이메일 다양성 필요성: Apple, Google, Microsoft 같은 대기업의 이메일 서비스에 의존하지 말고, 가능한 한 자체 이메일 서버를 사용해야 함.
     * 무료 DMARC 모니터링 서비스: Postmark라는 서비스에서 무료 DMARC 모니터링 서비스를 제공함.
     * SPF/DKIM/DMARC 설정 결과: 예시 도메인에서 SPF, DKIM, DMARC 설정이 모두 통과된 결과를 공유함.
"
"https://news.hada.io/topic?id=15366","ESASky 천문 관측 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ESASky 천문 관측 플랫폼

ESASky 소개

     * ESASky는 공공 천문 데이터를 시각화하고 다운로드할 수 있는 애플리케이션임.
     * 사용자는 다양한 모드(Science, Explorer)를 선택하여 데이터를 탐색할 수 있음.
     * 천문학 연구자와 애호가들에게 유용한 도구로, 우주에 대한 이해를 돕는 역할을 함.

GN⁺의 의견

     * 천문 데이터 접근성: ESASky는 공공 데이터를 쉽게 접근할 수 있게 하여 천문학 연구의 문턱을 낮추는 역할을 함.
     * 교육적 가치: 천문학을 배우는 학생들이나 일반인들에게도 유용한 학습 도구로 활용될 수 있음.
     * 기술적 고려사항: 대용량 데이터 다운로드 시 네트워크 속도와 저장 공간을 고려해야 함.
     * 비교 제품: NASA의 SkyView와 같은 다른 천문 데이터 시각화 도구와 비교해보는 것도 좋음.
     * 흥미 요소: 우주에 대한 호기심을 자극하고, 실제 데이터를 통해 우주를 탐험하는 경험을 제공함.
"
"https://news.hada.io/topic?id=15439","Claude 3.5 Sonnet 출시: GPT4o를 뛰어넘는 성능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Claude 3.5 Sonnet 출시: GPT4o를 뛰어넘는 성능

   Anthropic은 오늘 Claude 3.5 Sonnet을 출시했습니다. 이는 곧 출시될 Claude 3.5 모델 가족 중 첫 번째 버전으로, 기존 Claude 3 Opus와 경쟁 모델들보다 뛰어난 성능을 자랑합니다. Claude 3.5 Sonnet은 중급 모델인 Claude 3 Sonnet과 동일한 속도와 비용으로 제공됩니다.

    제공 방식

   Claude 3.5 Sonnet은 무료로 Claude.ai와 Claude iOS 앱에서 사용할 수 있으며, Claude Pro 및 Team 플랜 구독자는 높은 요청 한도와 함께 액세스할 수 있습니다. 또한, Anthropic API, Amazon Bedrock, Google Cloud의 Vertex AI를 통해서도 사용할 수 있습니다. 비용은 백만 입력 토큰당 $3, 백만 출력 토큰당 $15이며, 200K 토큰의 컨텍스트 윈도우를 제공합니다.

    성능 향상

   Claude 3.5 Sonnet은 대학원 수준의 추론(GPQA), 학부 수준의 지식(MMLU), 코딩 능력(HumanEval)에서 새로운 기준을 세웠습니다. 유머와 복잡한 지시 사항을 이해하는 능력이 크게 향상되었으며, 자연스럽고 공감가는 톤으로 고품질의 콘텐츠를 작성할 수 있습니다.

    내부 평가 결과

   내부 코딩 평가에서 Claude 3.5 Sonnet은 문제의 64%를 해결해 Claude 3 Opus의 38%를 능가했습니다. 이 평가는 자연어 설명을 바탕으로 오픈 소스 코드베이스의 버그를 수정하거나 기능을 추가하는 능력을 테스트했습니다. Claude 3.5 Sonnet은 코드 번역을 쉽게 처리하여 레거시 애플리케이션 업데이트와 코드베이스 마이그레이션에 특히 효과적입니다.

    시각적 능력

   Claude 3.5 Sonnet은 표준 시각적 벤치마크에서 Claude 3 Opus를 능가하며, 시각적 추론을 필요로 하는 작업에서 두드러진 성능을 보입니다. 불완전한 이미지에서 텍스트를 정확하게 전사하는 능력은 소매, 물류, 금융 서비스 분야에서 매우 유용합니다.

    Artifacts 기능 도입

   오늘 Claude.ai에 도입된 Artifacts는 사용자가 생성한 코드 스니펫, 텍스트 문서, 웹사이트 디자인 등의 콘텐츠를 실시간으로 편집하고 프로젝트와 워크플로에 통합할 수 있는 동적 작업 공간을 제공합니다.

    안전 및 프라이버시

   Claude 3.5 Sonnet은 ASL-2 수준에서 엄격한 테스트를 거쳤으며, 영국 인공지능 안전 연구소(UK AISI)와 협력하여 사전 배포 안전 평가를 완료했습니다. 사용자 데이터는 명시적인 허가 없이는 학습에 사용되지 않습니다.

    향후 계획

   Claude 3.5 모델 가족의 완성을 위해 올해 말 Claude 3.5 Haiku와 Claude 3.5 Opus를 출시할 예정입니다. 새로운 기능과 모달리티를 개발하여 기업 애플리케이션 통합을 지원하고, 사용자의 선호도와 상호작용 기록을 기억하는 'Memory' 기능을 탐구하고 있습니다.

   우리는 항상 Claude를 개선하고 사용자 피드백을 반영하여 더 나은 경험을 제공하기 위해 노력하고 있습니다. Claude 3.5 Sonnet에 대한 피드백을 제품 내에서 직접 제출하여 개발 로드맵에 반영할 수 있습니다.

   테스트 해봤는데 속도는 엄청 빠르네요.
   gpt4o처럼 일정 횟수 무료로 사용 가능한것도 좋구요.
"
"https://news.hada.io/topic?id=15329","56k 모뎀 연결로 대량의 적을 처리한 Serious Sam","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   56k 모뎀 연결로 대량의 적을 처리한 Serious Sam

Serious Engine 1 소스 코드 분석

  개요

     * Serious Sam은 멀티플레이어 게임으로 설계되었음.
     * 싱글플레이어 캠페인도 멀티플레이어처럼 동작함.
     * Serious Engine은 싱글플레이어, 멀티플레이어, 데모 녹화 및 재생을 지원함.

  부동 소수점 결정론

     * 게임의 동기화를 위해 부동 소수점 연산의 결정론적 동작이 중요함.
     * Windows에서만 출시되어 컴파일러 차이로 인한 동기화 문제를 피할 수 있었음.
     * FPU 정밀도 차이로 인한 문제를 해결하기 위해 정밀도 가드를 사용함.

  틱 vs 프레임

     * 게임 로직 틱레이트는 렌더링 프레임레이트와 분리되어 있음.
     * 게임 로직은 초당 20틱으로 고정되어 있음.
     * 부드러운 움직임과 애니메이션을 위해 보간(interpolation)을 사용함.

  네트워크 멀티플레이어

     * Serious Engine의 네트워킹 모델은 클라이언트-서버 방식임.
     * 서버는 클라이언트로부터 메시지를 받아 처리하고, 관련 정보를 모든 클라이언트에 전달함.
     * UDP 프로토콜을 사용하여 패킷을 전송함.

  패킷 계층

     * UDP 패킷은 순서가 뒤바뀌거나 도착하지 않을 수 있음.
     * Serious Engine은 UDP 위에 자체 프로토콜을 구현하여 신뢰성과 패킷 순서를 보장함.
     * 신뢰할 수 있는 패킷은 ACK 패킷을 통해 확인됨.

  연결 수명 주기

     * 클라이언트와 서버 간의 가상 연결을 설정하기 위해 브로드캐스트 패킷을 사용함.
     * 서버는 클라이언트에게 고유 식별자를 할당하고, 이를 통해 패킷을 라우팅함.

  오프라인 플레이

     * 싱글플레이어와 데모 재생은 멀티플레이어의 특수한 경우임.
     * 동일한 프로세스 내에서 서버와 클라이언트가 통신함.

  메시지 계층

     * CNetworkMessage는 스트림처럼 읽고 쓸 수 있는 메시지 추상화임.
     * 메시지는 압축될 수 있으며, 기본적으로 LZRW1 압축을 사용함.
     * 델타 인코딩을 사용하여 데이터 전송량을 최소화함.

  메시지 보안

     * 메시지는 암호화되지 않음.
     * 채팅 메시지는 평문으로 전송됨.

GN⁺의 의견

     * 게임 개발자에게 유용함: Serious Engine의 네트워크 구조와 동기화 메커니즘은 멀티플레이어 게임 개발에 유용한 참고 자료가 될 수 있음.
     * 결정론적 동작의 중요성: 부동 소수점 연산의 결정론적 동작을 보장하는 방법은 게임 동기화 문제를 해결하는 데 중요한 요소임.
     * 네트워크 프로토콜 설계: UDP 위에 신뢰성과 순서를 보장하는 자체 프로토콜을 구현한 것은 네트워크 프로그래밍의 좋은 예시임.
     * 보안 고려사항: 메시지 암호화가 없다는 점은 현대 게임 개발에서 보안 측면에서 고려해야 할 사항임.
     * 기술적 도전과제: 초기 2000년대의 네트워크 환경에서 빠른 속도의 멀티플레이어 게임을 구현한 기술적 도전과제를 이해하는 데 도움이 됨.

        Hacker News 의견

     * Serious Sam의 네트워크 코드를 구현한 개발자였음. QuakeWorld 예측 시스템에서 영감을 받아 간단한 MVP를 코딩했음.
     * Serious Sam은 LAN 파티에서 항상 잘 작동했음. 다른 게임들이 문제를 겪을 때도 안정적으로 실행되었음.
     * GB Color 포트의 Vigilante 8 멀티플레이어를 결정론적 게임 플레이로 구현했음. GBC 링크 케이블을 사용해 1바이트씩 데이터를 전송했음.
     * Croteam은 매우 재능 있는 게임 개발 팀임. Talos Principle 시리즈와 맞춤형 Vulkan 게임 엔진을 개발했음.
     * Age of Empires의 ""1500 archers on a 28.8""와 같은 아이디어인지 질문함.
     * 기술 자원이 증가함에 따라 소프트웨어가 더 느리고 비효율적으로 변하는 현상을 지적함. 이를 ""Benjamin Button 소프트웨어 디자인 효과""라고 부름.
     * Factorio의 아키텍처는 입력 이벤트만 전송하고, 동기화된 시뮬레이션 코어에 의존함.
     * Serious Sam을 PC Gamer 데모로 플레이했던 기억을 떠올림. 이제는 클래식 게임으로 여겨짐.
     * Serious Engine의 보간(interpolation) 기능을 설명함. 콘솔에서 net_bLerping=0을 입력해 보간 없이 게임을 플레이할 수 있음.
"
"https://news.hada.io/topic?id=15373","Google, Cloudflare 및 Cisco, DNS 중독으로 불법 복제 차단 우회 방지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Google, Cloudflare 및 Cisco, DNS 중독으로 불법 복제 차단 우회 방지

프랑스 법원, 구글, 클라우드플레어, 시스코에 DNS 차단 명령

  로컬 ISP 수준의 DNS 조작

     * 2023년, Canal+는 프랑스 법원에 해적 스포츠 스트리밍 사이트 차단을 요청함.
     * 법원은 Canal+의 요청을 받아들여 Orange, SFR, OutreMer Télécom, Free, Bouygues Télécom 등의 ISP에 기술적 조치를 요구함.
     * ISP들은 자체 DNS 리졸버를 조작하여 해당 사이트에 대한 접근을 차단함.

  공용 DNS 조작: 한 단계 더 나아간 조치

     * 사용자들이 다른 DNS 제공자를 사용해 차단을 우회하자, Canal+는 클라우드플레어, 구글, 시스코 같은 공용 DNS 제공자들을 대상으로 법적 조치를 취함.
     * 프랑스 스포츠 코드 제 L333-10 조항에 따라, 반복적인 스포츠 경기 불법 방송에 대해 권리자는 모든 적절한 조치를 요구할 수 있음.

  구글, 클라우드플레어, 시스코에 우회 방지 명령

     * 파리 법원은 구글, 클라우드플레어, 시스코에 프랑스 인터넷 사용자들이 약 117개의 해적 도메인에 접근하지 못하도록 조치를 취할 것을 명령함.
     * 구글 변호사 Sébastien Proust는 이 조치가 해적 행위에 미치는 영향이 미미할 것이라고 주장함.
     * 조사 결과, DNS 차단으로 영향을 받을 사용자는 프랑스 인터넷 사용자 전체의 0.084%에 불과함.

  법원, 차단 반대 주장 기각

     * 파리 법원은 대체 DNS를 사용하는 사용자 수와 DNS 변경의 용이성은 무관하다고 판단함.
     * Canal+는 방송 권리를 소유하고 있으며, 차단 명령을 요청할 법적 권리가 있음.
     * 구글은 명령에 따를 의사를 밝힘.

GN⁺의 의견

     * 기술적 우회 가능성: DNS 차단은 VPN 사용 등으로 쉽게 우회될 수 있음. 이는 차단의 실효성을 떨어뜨림.
     * 프라이버시 문제: 공용 DNS 제공자에 대한 조작은 사용자 프라이버시 침해 가능성을 높임.
     * 법적 논란: 공용 DNS 제공자에 대한 법적 조치는 인터넷 자유와 관련된 논란을 불러일으킬 수 있음.
     * 대체 기술: DNS 차단 외에도 DPI(Deep Packet Inspection) 같은 기술이 사용될 수 있음. 그러나 이는 더 큰 프라이버시 문제를 야기할 수 있음.
     * 사용자 교육 필요: 사용자들이 합법적인 스트리밍 서비스를 이용하도록 교육하는 것이 장기적으로 더 효과적일 수 있음.

   우리나라보다 한술 더 뜨는 군요. 하지만 우리나라처럼 직접 패킷을 까보진 않겠죠.

   까보되 막지 않는거라고 생각합니다... 동방이든 서방이든 검열은 거기서 거기더라고요....

        Hacker News 의견

     * 과거의 인터넷 블랙아웃: 10여 년 전, 많은 기술 회사들이 미국의 DNS 변경 요구 법안에 반대하여 인터넷 블랙아웃 시위를 했었음. 이제 프랑스가 실제로 이를 시행하자, 그들은 이를 준수하겠다고 함.
     * dns0.eu 언급 없음: 내가 사용하는 dns0.eu는 EU에 호스팅되는데, 이에 대한 언급이 없음.
     * 기사의 도메인 언급: 기사가 도메인 이름을 언급하는 것이 웃김. 이는 구글이 DMCA 목록을 보여주는 것과 같아서 실제 해적 사이트를 쉽게 찾을 수 있게 함.
     * 제목의 의문: 웹사이트 제목은 ""Google, Cloudflare & Cisco Will Poison DNS to Stop Piracy Block Circumvention""임. 왜 Cloudflare가 제목에 특별히 언급되었는지 궁금함.
     * 기술적 질문: DoH 같은 프로토콜에서 금지된 DNS 항목을 어떻게 반영할지에 대한 기술적 질문이 흥미로움. 예를 들어, DoH 서버가 법적 이유로 HTTP 451을 반환하는 것이 합리적일 수 있음.
     * 구글의 준수: 여기서 준수하겠다고 말한 유일한 제공자는 구글임. 따라서 Cloudflare를 특정하는 것은 부정확하며, 제목 자체도 부정확함. ""French court orders Cloudflare, Google, and Cisco to poison DNS to stop piracy block circumvention""이 정확한 제목임.
     * 자체 DNS 설정 권장: 기술적으로 능숙한 사람들에게 자체 DNS 리졸버를 설정해보라고 권장함. 첫 번째 접근에서 몇 밀리초의 지연이 인터넷 경험에 미치는 영향이 미미함.
     * 스트리밍 관심 없음: 나는 축구 경기 스트리밍에 관심이 없지만, 1.1.1.1/9.9.9.9의 실제 실용성에 대해 궁금해짐. 누군가가 ORSN을 부활시키고 암호화폐 없는 Merkle tree나 DHT 매직을 적용해야 한다고 생각함.
     * 공공 DNS 제공자 평판: 공공 DNS 제공자가 이런 일을 한다면 나쁜 평판을 얻어야 하고, 사람들이 사용하지 말아야 함. 사람들이 직접 만들거나 IP 주소를 직접 사용하면 됨.
     * 억압적인 정부: 억압적인 정부는 구글에게 트위터 접근을 차단하라고 법적 명령을 내리지만, 구글은 항상 이를 거부함. 프랑스의 경우 준수하는 것은 법적 문제가 아니라 시장 규모 때문일 수 있음.
"
"https://news.hada.io/topic?id=15360","보이저 1 재가동! NASA 우주선, 4개 모든 기기에서 데이터 전송","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 보이저 1 재가동! NASA 우주선, 4개 모든 기기에서 데이터 전송

보이저 1호가 다시 온라인 상태로 돌아옴

  주요 내용 요약

     * 보이저 1호의 복구:
          + NASA의 보이저 1호가 기술적 문제를 해결하고 다시 정상 작동 중임.
          + 2023년 11월, 보이저 1호는 지구로 이해할 수 없는 데이터를 보내기 시작했음.
          + 문제는 비행 데이터 서브시스템(FDS)에서 발생했고, 팀은 이를 해결하여 데이터를 다시 수신할 수 있게 됨.
     * 문제 해결 과정:
          + 팀은 문제의 원인을 FDS의 특정 칩에서 찾았고, 이를 우회하는 방법을 발견함.
          + 2024년 4월 20일, 두 개의 과학 장비에서 데이터를 다시 수신하기 시작함.
          + 두 달 후, 나머지 두 개의 과학 장비도 정상 작동을 시작함.
     * 보이저 1호의 역사와 성과:
          + 1977년에 발사된 보이저 1호는 원래 목성과 토성을 연구하는 임무를 수행함.
          + 2012년에는 성간 공간에 진입하여 중요한 데이터를 수집함.
          + 현재도 지구로부터 240억 킬로미터 떨어진 곳에서 데이터를 보내고 있음.
     * 향후 계획:
          + 팀은 보이저 1호의 시간 동기화 소프트웨어를 재조정하고, 플라즈마 파동을 측정하는 디지털 테이프 레코더의 유지 보수를 수행할 예정임.

  GN⁺의 의견

     * 기술적 도전과 극복:
          + 보이저 1호의 복구 과정은 오래된 기술을 유지하고 관리하는 데 필요한 창의성과 끈기를 보여줌.
          + 이는 소프트웨어 엔지니어들에게도 오래된 시스템을 유지보수하는 데 필요한 기술적 도전을 상기시켜줌.
     * 성간 공간 연구의 중요성:
          + 보이저 1호가 성간 공간에서 수집한 데이터는 우주 연구에 중요한 기여를 하고 있음.
          + 이는 우주 탐사와 관련된 연구의 중요성을 강조함.
     * 장기적인 프로젝트 관리:
          + 보이저 1호 프로젝트는 장기적인 프로젝트 관리의 좋은 예시임.
          + 이는 소프트웨어 개발에서도 장기적인 유지보수와 관리의 중요성을 상기시켜줌.
     * 기술적 한계와 극복:
          + 보이저 1호의 복구는 기술적 한계를 극복하는 방법을 보여줌.
          + 이는 엔지니어들이 문제 해결 능력을 키우는 데 도움이 됨.
     * 미래의 우주 탐사:
          + 보이저 1호의 성공은 미래의 우주 탐사에 대한 기대감을 높여줌.
          + 이는 우주 탐사에 대한 관심을 높이고, 관련 기술 개발을 촉진할 수 있음.

        Hacker News 의견

     * Ed Stone 박사는 보이저 프로젝트의 핵심 과학자로 최근에 별세했음. 한 NASA 행사에서 그를 만나 ""우주에서 가장 멀리 있는 인공 물체를 만든 기분이 어떠냐""는 질문에 ""정말 좋다""고 답했음. RIP, Dr. Stone.
     * ""It's quieter in the twilight"" 다큐멘터리는 보이저 미션을 유지하려는 엔지니어 팀의 헌신을 다루고 있음. 매우 감동적임.
     * NASA가 화성 로버 작업으로 노벨 공학상을 받아야 한다고 농담을 하곤 했음. 보이저 미션은 정말 대단한 성과임.
     * 보이저 1호는 2025년쯤 전원이 다해 꺼질 예정임. 1977년 발사 이후 전력원이 점점 줄어들고 있음.
     * 어제의 토론에서 45점 획득한 링크가 있음.
     * 보이저 1호의 코드 업데이트 요청 프로토콜이 궁금함. 암호화되어 있을 텐데, 현대 기준으로 약한 암호화 알고리즘일 경우 외부에서 코드 변경 요청을 보낼 수 있을지 의문임.
     * 메모리 칩이 손상되었고, 우주선이 코드를 새로운 위치로 옮긴 후 데이터를 다시 보내기 시작했음. 이는 우주선의 문제를 해결한 사례임.
     * 보이저의 하드웨어와 소프트웨어의 품질은 놀라울 정도임.
     * 보이저가 태양계를 벗어날 때 소행성에 부딪히지 않은 이유가 궁금함. 태양계를 둘러싼 거대한 소행성 구름이 있다고 생각했음.
     * 보이저를 되살린 팀의 노력은 마법과 같음. 지구에서는 휴대폰과 기술 기기를 속옷보다 더 자주 바꿔야 하는데, 보이저는 여전히 작동 중임.
"
"https://news.hada.io/topic?id=15400","해고와 계획되지 않은 창업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             해고와 계획되지 않은 창업

  해고와 계획되지 않은 창업

    나는 나를 구해야 했음

     * 첫 해고를 농담으로 여겼음. 두 번째 해고는 회사가 인수되면서 발생했음.
     * 세 번째와 네 번째 해고는 나를 혼란스럽게 했고, 내가 통제할 수 있는 수익을 창출해야겠다고 결심하게 했음.
     * 웹 분석, 유료 검색, SEO를 배운 경험이 있었음.
     * 코딩을 건너뛰고 광고 네트워크를 활용하기로 결정했음.

    광고 네트워크 활용

     * 코딩을 몰라서 웹사이트를 직접 만들 수 없었음.
     * 광고 네트워크에 가입하고, 검색 엔진에서 인기 검색어를 찾아 광고가 없는 사이트에 광고 요청을 보냈음.
     * 관광 정보 사이트에서 광고를 시작했음.
     * 첫 성공은 Cancun 여행 사이트에서 월 $50 광고비로 시작해 월 $300-$350 수익을 올린 것임.

    코딩을 배우기로 결심

     * 광고를 다른 사람의 웹사이트에만 올리는 것이 한계였음.
     * 코딩을 배우기 위해 웹 호스팅을 구매하고 지원 티켓 시스템을 활용해 도움을 받았음.
     * 기본적인 HTML 파일을 배우고, 직접 웹사이트를 만들기 시작했음.

    옐로 페이지 모델

     * 옐로 페이지 모델을 온라인으로 구현하기로 결정했음.
     * 특정 카테고리와 지리적 용어를 사용해 간단한 디렉토리 사이트를 만들었음.
     * 다른 웹사이트의 소스를 참고해 디자인을 개선했음.

    트래픽과 수익 창출

     * SEO, 스폰서십, 다양한 마케팅 활동을 통해 트래픽을 유도했음.
     * 프리미엄 목록을 제공하고, 광고 네트워크를 추가해 수익을 창출했음.
     * 워드프레스를 발견하고, 더 많은 사이트를 만들기 시작했음.

    도메인 이름의 중요성

     * 만료된 도메인 이름 시장을 발견하고, 좋은 도메인을 경매에서 구매했음.
     * DudeRanch.com을 $17,949에 구매해 휴가 마켓플레이스를 구축했음.
     * 이 성공으로 9-5 직장을 그만두고 더 많은 프로젝트에 집중할 수 있었음.

    자금 조달 없이 독립적으로 운영

     * 외부 자금 없이 9-5 직장에서 번 돈으로 프로젝트를 운영했음.
     * 자유롭게 사업 모델을 실험하고 실패해도 스스로 책임질 수 있었음.

  GN⁺의 의견

     * 창업의 시작: 해고를 계기로 창업을 시작한 이야기는 많은 사람들에게 영감을 줄 수 있음. 특히, 자신의 통제 하에 수익을 창출하려는 의지가 중요함.
     * 코딩의 중요성: 코딩을 배우는 것이 얼마나 중요한지 강조됨. 이는 초급 소프트웨어 엔지니어들에게도 큰 동기부여가 될 수 있음.
     * 도메인 이름의 가치: 좋은 도메인 이름이 얼마나 큰 가치를 가질 수 있는지 설명됨. 이는 웹사이트 개발자나 창업자들에게 중요한 정보임.
     * 독립적 운영의 장점: 외부 자금 없이 독립적으로 운영하는 것이 얼마나 중요한지 강조됨. 이는 창업자들에게 큰 교훈이 될 수 있음.
     * 광고 네트워크 활용: 광고 네트워크를 활용해 수익을 창출하는 방법이 설명됨. 이는 디지털 마케팅에 관심 있는 사람들에게 유용한 정보임.

        Hacker News 의견

     * 첫 번째 댓글: 초기 스타트업 실패 후, 기존의 공식적인 접근 방식을 버리고 독립적으로 프로토타입을 제작하고, 첫날부터 수익을 창출하는 방식으로 성공을 거둔 경험 공유.
     * 두 번째 댓글: 9-5 직장에서의 경험을 바탕으로 자금을 모으지 않고 독립적으로 프로젝트를 진행하며, 실패해도 자신에게 책임이 있다는 점을 강조.
     * 세 번째 댓글: 의료비를 지불하기 위해 계약직으로 일하면서도 솔로프리너십을 탐구하고자 하는 희망을 표현하며, 외부 투자자에 대한 고민과 리더십 역할에 대한 관심을 언급.
     * 네 번째 댓글: 코딩은 잘 알지만 다른 부분은 몰랐던 상황에서 독립적으로 성공한 경험을 공유하며, 회사에서의 부당한 대우에 대한 분노를 표현.
     * 다섯 번째 댓글: 웹 페이지의 소스 코드를 보는 것이 지식 공유에 큰 도움이 된다는 점을 강조하며, 도구의 중요성을 언급.
     * 여섯 번째 댓글: 해고된 사람은 좋은 채용 후보가 아니라고 생각하는 고용 관리자들의 관점을 비판하며, 개인의 잠재력이 잘못된 방향으로 사용되었을 가능성을 제기.
     * 일곱 번째 댓글: 자신의 사업을 통해 수익을 창출하고자 하는 의지를 표현하며, 더 이상 다른 사람을 위해 일하지 않겠다는 결심을 강조.
     * 여덟 번째 댓글: '계획되지 않은 기업가 정신'이라는 이름을 좋아하며, 자신의 프로젝트가 아직 수익을 내지 못해 다시 구직 활동을 해야 하는 상황을 공유.
     * 아홉 번째 댓글: 해고의 위험이 새로운 사업을 시작하는 것과 비슷하다는 점을 깨닫고 회사를 창업한 경험을 공유.
     * 열 번째 댓글: 특정 웹사이트 언급이 없다는 점을 이상하게 여김.
     * 열한 번째 댓글: 나이가 많은 사람들이 취업 시장에서 환영받지 못하는 현실을 경험하며, 해고 후 독립적으로 소프트웨어를 개발하는 것이 자신에게 가장 좋은 일이었다고 생각.
"
"https://news.hada.io/topic?id=15332","Lexbor - 오픈소스 HTML 렌더러 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Lexbor - 오픈소스 HTML 렌더러 라이브러리

     * 새로운 브라우저 엔진을 개발하는 프로젝트
          + 기존의 브라우저 엔진들은 C++로 개발되어 크고 느리며 유연하지 못한 문제가 있음
          + Lexbor는 C로 개발되어 이식성, 모듈화, 속도, 독립성, 표준 준수 등을 목표로 함
     * Lexbor의 주요 특징:
          + HTML, CSS, Encoding, URL, Punycode, Unicode 등 다양한 모듈로 구성됨
          + 각 모듈을 독립적인 라이브러리로 사용 가능
          + 외부 의존성이 없음
          + 다양한 플랫폼으로 이식이 용이함
          + C99를 지원하며 매우 빠른 속도를 자랑함
     * HTML 모듈의 특징:
          + HTML5 스펙을 완전히 준수함
          + 엘리먼트와 속성을 조작하는 기능 제공
          + 파편화된 HTML 파싱 지원 (innerHTML)
          + 청크 단위 파싱 지원
          + 2억 개 이상의 실제 HTML 페이지로 테스트됨
          + Document와 Parser의 두 가지 파싱 방식 제공
          + 인코딩 자동 판별 기능
          + 태그 속성과 <style> 태그 내의 CSS 스타일 파싱 기능
     * CSS 모듈의 특징:
          + CSS Syntax 모듈을 완전히 준수함
          + 셀렉터와 스타일시트 트리(CSSOM) 지원
     * Lexbor는 CentOS, Debian, Fedora, RHEL, Ubuntu 등 다양한 OS의 바이너리 패키지를 제공함
     * macOS에서는 Homebrew와 MacPorts를 통해 설치 가능
     * 소스코드는 CMake를 이용해 빌드 가능
     * liblexbor는 모든 모듈이 포함된 단일 라이브러리이고, 각 모듈별로 liblexbor-{module} 라이브러리가 있음
     * Elixir, Crystal, Python, D, Ruby 등 다양한 언어의 바인딩과 래퍼가 존재함

   C++ 이 느려서 c...
   와...c++이 느리다는 생각을 해본적 없는데 저런 세상은 또 다른 모양이네요
   굉장합니다

   메인화면에 ""기존의 브라우저 엔진들은 C++로 개발되어 크고 느리며 유연하지 못한 문제가 있음 ..."" 까지만 나오길래...

   뭐야 또 러스트인가? 싶었는데.... C네요... ㄷㄷㄷ

   제 주력 언어라 반갑네요...

   C++이 C보다는 느리긴 하군요..

   아니 대체 뭘로 구현했길래 c++ 로 되어 느리다고 하는거야 했는데
   C 군요 .....
"
"https://news.hada.io/topic?id=15339","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   한달에 한번 있는 개발자들 모여서 보드게임 하는 날입니다.
   이번엔 리바이브, 버라지, 만리장성 까지 전략게임 3종을 돌려보는게 목표입니다.

   아는 분이 사당 쪽에 산천칡냉면 이라는 곳을 추천해주셔서 한번 가보려고 합니다 ㅎㅎ
   오늘은 릴리즈 때문에 철야작업할 것 같네요 ㅜㅜ
"
"https://news.hada.io/topic?id=15372","2010년 출간된 "Just Enough Software Architecture"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             2010년 출간된 ""Just Enough Software Architecture""

소프트웨어 아키텍처 책 소개

  책의 특징

     * 리스크 기반 설계: 리스크가 작을 때는 간단한 설계, 리스크가 클 때는 철저한 설계를 강조함.
     * 아키텍처의 민주화: 모든 개발자가 아키텍처를 이해하도록 돕는 것을 목표로 함.
     * 선언적 지식: 시스템 설계와 구축에 대한 명확한 개념을 제공함.
     * 엔지니어링 강조: 기술적인 부분에 집중하여 원칙적인 설계 결정을 할 수 있도록 도와줌.
     * 실용적인 조언: 다양한 추상화 수준의 모델을 통해 실용적인 설계 방법을 제시함.

  책의 구성

    Part I: 리스크 기반 소프트웨어 아키텍처

     * 소프트웨어 아키텍처 정의: 시스템의 골격 역할을 하며 품질 속성에 영향을 미침.
     * 리스크 기반 모델: 리스크를 식별하고 우선순위를 정한 후, 적절한 설계 기법을 적용하여 리스크를 줄이는 방법을 설명함.
     * 모델 사용 조언: 문제 해결을 위해 모델을 사용하고, 제약 조건을 신중하게 추가하며, 팀 전체에 아키텍처 기술을 분배하는 방법을 제시함.

    Part II: 아키텍처 모델링

     * 개념적 모델 구조: 도메인 모델, 설계 모델, 코드 모델로 구성됨.
     * 캡슐화 경계 구축: 컴포넌트나 모듈의 내부 작동을 숨겨 다른 문제 해결에 집중할 수 있도록 함.
     * 효과적인 모델 구축: 품질 속성과 기능성을 강조하는 다양한 아키텍처 기법을 통합하여 실용적인 모델을 구축하고 디버깅하는 방법을 설명함.
     * 모델 사용 조언: 모델의 장점과 단점을 모두 다루며, 효과적으로 사용하는 방법을 제시함.

  전자책 및 하드백

     * 전자책: Google Play에서 DRM-free 버전으로 판매 중 ($9.99).
     * 하드백: Amazon에서 구매 가능.

  책에 대한 리뷰 및 추가 자료

     * 리뷰: IEEE Software 등에서 다양한 리뷰와 에세이 제공.
     * 추가 자료: 연속 설계, 아키텍처 스타일, 모델링 등 다양한 주제의 비디오와 출판물 제공.

GN⁺의 의견

     * 리스크 기반 접근법의 중요성: 리스크를 기반으로 한 설계는 프로젝트의 성공 가능성을 높이는 데 매우 유용함.
     * 아키텍처의 민주화: 모든 개발자가 아키텍처를 이해하면 팀 전체의 효율성이 높아질 수 있음.
     * 실용적인 조언: 이 책은 이론보다는 실용적인 조언을 많이 제공하여 실제 프로젝트에 바로 적용할 수 있음.
     * 기술적 집중: 기술적인 부분에 집중하여 개발자들이 실질적인 문제를 해결하는 데 도움을 줌.
     * 추가 학습 자료: 다양한 추가 자료를 통해 더 깊이 있는 학습이 가능함.

        Hacker News 의견

     * 프로젝트 관리 위험과 소프트웨어 엔지니어링 위험을 구분해야 함. 엔지니어링 기술이 관리 위험을 해결하지 못하는 경우가 많음.
     * 코드 품질, 조직화, 테스트, 문서화, 표준 도구 사용이 양쪽 모두에 도움이 됨.
     * ""버스에 치이다"" 가설을 자주 사용하게 되는 이유는 재현 가능하고 이해하기 쉬운 소프트웨어를 만들기 위함임.
     * 부정적인 의미를 피하기 위해 ""복권에 당첨되다""라는 표현을 사용하는 것이 좋음.
     * 아키텍처를 위한 아키텍처는 최악임. 불필요하게 복잡성을 증가시킴.
     * 좋은 아키텍처의 궁극적인 목표는 비용 절감임. 개발 및 유지보수에 더 많은 시간이 소요된다면 실패한 아키텍처임.
     * 2010년에 출판된 책이 얼마나 살아남았는지 궁금함.
     * ""Design It"" 책은 워크숍 활동이 기술자들에게 유용하고, 특정 기술 아키텍처 스타일에 치우치지 않아 좋음.
     * John Ousterhout의 'A Philosophy of Software Design' 책이 유용함. 이해하기 쉬운 조언과 예시가 많음.
     * ""리스크 의존적""이라는 용어가 더 나은 명칭일 것 같음. 프로그래머들이 ""[X]-기반""이라는 표현을 좋아하는 이유가 궁금함.
     * 특정 책은 모르지만, 저자의 ""지적 통제""에 대한 글이 매우 통찰력 있음.
     * 몇 년 전 회사에서 책 클럽을 했는데, 매우 반복적임을 느꼈음.
     * 비중 있는 오픈 소스 프로젝트를 시작하는 사람이나 솔로프리너에게 좋은 자원인지 궁금함. 솔로 개발자에게 유용한 책이나 자원을 추천해달라는 요청.
     * 소프트웨어 아키텍처는 일반적인 아키텍처와 비슷하지만, 소프트웨어에는 Isaac Newton 같은 인물이 없어서 시민 공학이 존재하지 않음. 가장 가까운 인물은 Claude Shannon임.
     * 임의의 용어를 읽는 것에 지침. 수학적 모델을 원함. 모호한 인간이 만든 용어는 아이디어를 번역하려는 해킹에 불과함.
"
"https://news.hada.io/topic?id=15368","Safari 18 베타에 포함된 WebKit 신기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Safari 18 베타에 포함된 WebKit 신기능들

  WebXR 지원 추가

     * visionOS 2 beta의 Safari 18에서 WebXR을 지원함. Apple Vision Pro를 사용하는 사람들에게 몰입형 경험 제공 가능함.
     * immersive-vr 세션 지원
     * WebGL을 통한 하드웨어 가속 그래픽 사용
     * 자연 입력을 활용한 transient-pointer 모드 지원
     * 손 추적 기능 추가, 사용자 프라이버시 보호를 위한 권한 요청 필요

  CSS

     * 뷰 전환 (View Transitions):
          + 뷰 전환 API 지원 추가
          + 요소의 상태 전환 애니메이션 가능
          + document.startViewTransition() 메서드로 전환 시작
          + 상태 캡처 후 CSS로 애니메이션 수정 가능
     * 스타일 쿼리 (Style Queries):
          + CSS 커스텀 프로퍼티 테스트 시 스타일 쿼리 지원
          + 특정 조건에 따라 스타일 적용 가능
     * 상대적 색상 구문 (Relative Color Syntax):
          + 기존 색상으로부터 새로운 색상을 동적으로 정의
          + currentcolor 및 시스템 색상 키워드 참조 가능
     * 디스플레이 애니메이션: display 속성의 전환 애니메이션 지원
     * visionOS에서의 인터랙션 영역: clip-path를 사용하여 링크의 터치 가능한 영역 변경 가능
     * 백드롭 필터: 요소 뒤의 콘텐츠에 그래픽 효과 적용. 이제 -webkit- 접두사 없이 사용 가능
     * Flexbox의 안전 키워드: safe 키워드를 사용하여 플렉스 아이템의 오버플로우 처리
     * 콘텐츠 가시성: content-visibility 속성으로 성능 최적화

  웹 앱 (Web Apps for Mac)

     * 웹 앱에서 링크 열기 지원
     * Safari 웹 확장 및 콘텐츠 차단기를 통한 개인 맞춤화 가능

  Safari 확장 프로그램 (Safari Extensions)

     * 모바일 장치 관리: 확장 프로그램 활성 상태, 비공개 브라우징 상태, 웹사이트 접근을 관리 가능

  공간 미디어 (Spatial Media)

     * 사진 및 파노라마:
          + 공간 사진 및 파노라마를 웹에서 전체 화면으로 볼 수 있음
          + Fullscreen API를 통해 몰입형 경험 제공

  HTML

     * 글쓰기 제안:
          + 인라인 예측 텍스트 지원
          + writingsuggestions 속성을 통해 예측 텍스트 사용 제어 가능
     * 스위치 입력:
          + <input type=checkbox switch>에서 햅틱 피드백 지원
     * 날짜 및 시간 입력:
          + 날짜 및 시간 입력 필드의 접근성 향상
     * ARIA 속성:
          + aria-braillelabel 및 aria-brailleroledescription 지원

  미디어 (Media)

     * 비디오 뷰어:
          + 비디오를 방해 없이 시청할 수 있는 Viewer 기능 추가
          + 탭 전환 시 자동으로 Picture-in-Picture 모드로 전환

  WebRTC

     * 지원 추가:
          + HEVC RFC 7789 RTP 페이로드 형식 지원
          + 전용 워커에서 MediaStreamTrack 처리 지원

  패스키 (Passkeys)

     * mediation=conditional로 패스키 업그레이드 가능
     * 관련 도메인 간 패스키 사용 지원
     * WebAuthn prf 확장 지원

  HTTPS

     * 혼합 콘텐츠 설정에서 모든 이미지, 비디오, 오디오를 HTTPS로 자동 업그레이드

  자바스크립트 (JavaScript)

     * Unicode 15.1.0 문자 지원
     * v 플래그와 RegExp.prototype[Symbol.matchAll] 지원

  웹 API (Web API)

     * URL.parse() 메서드 지원
     * shadowRootDelegatesFocus, shadowRootClonable, shadowRootSerializable 속성 지원
     * PopStateEvent의 hasUAVisualTransition 속성 지원
     * 모듈 스크립트의 서브리소스 무결성 지원
     * bytes() 메서드 지원
     * 텍스트 프래그먼트 감지 지원

  캔버스 (Canvas)

     * willReadFrequently 컨텍스트 속성 지원
     * 2D 캔버스에서 currentcolor 지원 확장

  WebGL

     * EXT_texture_mirror_clamp_to_edge 등 6가지 WebGL 확장 지원

  Web Inspector

     * CSS 소스 편집기에서 퍼지 검색 자동 완성 지원

  WKWebView

     * 새로운 API: Writing Tools API 및 적응형 이미지 글리프 삽입 API 지원

  Apple Pay

     * 지원 추가: Apple Pay 현금 이체 지원

  폐기 (Deprecations)

     * OffscreenCanvasRenderingContext2D의 commit() 메서드
     * 여러 -webkit 접두사 속성 및 가상 클래스
     * JPEG2000 이미지 형식
     * AppCache 지원 완전 종료
     * SVGAnimateColorElement 인터페이스
     * 몇 가지 비표준 Web API
"
"https://news.hada.io/topic?id=15398","제조사가 수리를 거부할 때: 법정으로 가는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       제조사가 수리를 거부할 때: 법정으로 가는 방법

소매업체와 제조업체가 수리를 거부할 때 대처 방법

  가전제품의 수명

     * 명시적 보증: 제조업체가 제공하는 보증은 명시적 보증으로, 이는 기본적인 소비자 권리에 추가되는 것임.
     * 합리적인 기대 수명: 가전제품은 합리적인 기간 동안 작동할 것으로 기대할 수 있음. 예를 들어, 전기 오븐은 약 13년 정도 사용 가능함.

  법원에 소송 제기하기

     * 소비자 청구를 위한 법원: NSW 주에는 소비자 청구를 위한 특별 법원인 NSW 민사행정재판소(NCAT)가 있음. 이 법원은 저비용으로 간단하게 이용 가능함.
     * 소송 절차: 소송을 제기하기 전에 거래 상대방이 누구인지 확인해야 함. 일반적으로 제조업체가 아닌 소매업체를 상대로 소송을 제기함.
     * 서류 제출: 온라인 시스템을 통해 서류를 제출하고 소액의 접수비를 지불하면 법원 날짜와 장소가 이메일로 통보됨.

  NCAT 날짜 예약 후 서비스 개선

     * 소송의 효과: 소매업체는 법원에 출석하는 비용이 크기 때문에 소송을 피하려고 함. 따라서 소송을 제기하면 문제 해결이 빨라질 수 있음.
     * 문제 해결: 엔지니어가 방문하여 문제를 해결하고, 문제가 지속될 경우 추가 방문을 통해 최종적으로 문제를 해결함.

  권리 주장에 대한 만족감과 불만

     * 소비자 권리 주장: 소비자 권리를 주장하여 문제를 해결할 수 있었음. 그러나 이러한 권리를 주장해야 하는 상황 자체가 불만스러움.
     * 권리 주장 독려: 다른 소비자들도 권리를 주장하도록 독려하여, 소비자 권리가 더 쉽게 보장되기를 바람.

GN⁺의 의견

     * 소비자 권리의 중요성: 소비자 권리를 알고 주장하는 것이 중요함. 이는 제품의 수명과 품질을 보장받기 위해 필요함.
     * 법적 절차의 간편함: NCAT와 같은 소비자 청구 법원은 법적 절차를 간편하게 만들어 소비자들이 쉽게 접근할 수 있도록 함.
     * 제조업체와 소매업체의 책임: 제조업체와 소매업체는 소비자 권리를 존중하고 문제를 신속하게 해결해야 함. 이는 고객 만족도를 높이고 신뢰를 쌓는 데 중요함.
     * 다른 유사한 사례: 다른 소비자들도 유사한 문제를 겪을 수 있으므로, 이 기사는 많은 사람들에게 유용한 정보를 제공함.

        Hacker News 의견

     * Phoebus 카르텔: 오래된 전구는 10년을 기대할 수 없지만, 오븐은 다름. Phoebus 카르텔이 전구 수명을 1,000시간으로 줄이고 가격을 올리려 했음.
     * 와이파이 사진 액자: 중고 가게에서 산 와이파이 사진 액자가 공장 초기화 후 부팅되지 않음. 회사에 문의했으나 해결 불가로 환불 권장.
     * 뉴질랜드 소비자 보호법: 뉴질랜드의 소비자 보호법에 따라 판매자는 제품을 수리, 교체 또는 환불해야 함. 소비자 NZ는 제품 수명을 독립적으로 평가함.
     * Apple 테스트 랩: Apple 테스트 랩에서 수리 가능성을 스펙트럼으로 봄. ""파괴 불가능""과 ""완벽히 수리 가능""은 상호 배타적일 수 있음.
     * Rainforest Automation Eagle 200: 소프트웨어 문제로 부팅 실패. 회사는 디버깅에 관심 없고, 교체 하드웨어 할인만 제공. 캘리포니아의 수리 권리법을 활용할 방법을 찾고 있음.
     * 합리적인 제품 수명: 제품의 합리적인 수명은 영원히 지속되는 것. 부품 교체 가능하고, 문서화가 잘 되어야 함.
     * 다른 지역의 법 적용: 다른 지역, 특히 EU/스웨덴에서 유사한 법이 있는지 궁금해함. 법원이 있는지 여부도 질문.
     * 영국의 유사 법: 영국에도 유사한 법이 있으며, 거래 기준과 소액 청구 법원이 있음. 신용카드로 결제 시 신용 제공자에게도 청구 가능.
     * 인도의 소비자 법원: 인도에서는 소비자 법원에 소송을 제기하겠다고 위협하면 큰 기업들이 더 잘 대응함. 소매업체를 소송할 수 있는 이유는 브랜드 이름으로 판매했기 때문.
     * Electrolux: Electrolux는 중간 가격대 제조업체로, Miele와 Bosch보다는 낮음. 대부분의 유럽 브랜드를 인수했으며, 서비스 엔지니어는 제3자임. Electrolux 제품 구매 시 주의 필요.
"
"https://news.hada.io/topic?id=15401","Htmx 2.0.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Htmx 2.0.0 릴리즈

     * 확장 기능 분리: 모든 확장 기능이 별도의 저장소와 웹사이트로 이동됨. 각 확장 기능은 개별적으로 버전 관리되고 개발될 수 있음.
     * SSE 확장 기능: 대부분의 1.x 확장 기능은 2.x와 호환되지만, SSE 확장 기능은 업그레이드 필요.
     * hx-sse 및 hx-ws 속성 제거: 1.x에서 권장되었던 확장 기능으로 대체됨.
     * HTTP DELETE 요청: 폼 인코딩된 본문 대신 매개변수를 사용하게 됨.
     * JavaScript 모듈 스타일: 다양한 JavaScript 모듈 스타일을 위한 파일 제공.
          + ESM 모듈: /dist/htmx.esm.js
          + UMD 모듈: /dist/htmx.umd.js
          + AMD 모듈: /dist/htmx.amd.js
          + 브라우저 로드 가능 파일: /dist/htmx.js
     * hx-on 속성 제거: 덜 해킹적인 hx-on: 구문으로 대체됨.

  사소한 변경 사항

     * 기본 설정 변경:
          + htmx.config.scrollBehavior가 'smooth'에서 'instant'로 변경됨.
          + DELETE 요청이 쿼리 매개변수를 사용하게 됨. 이는 htmx.methodsThatUseUrlParams 값을 ['get']로 설정하여 되돌릴 수 있음.
          + htmx.config.selfRequestsOnly가 기본값으로 true로 설정됨.

  기능

     * selectAndSwap() 메서드: 내부 API 메서드가 공개된 swap() 메서드로 대체됨.
     * 웹 컴포넌트 지원: 웹 컴포넌트 지원이 크게 개선됨.
     * 다크 모드 지원: 웹사이트가 다크 모드를 지원하게 됨.

   여러분 React 대안이 아니에요. htmx는 스크립트 위주의 통신 수단에 필요한 노력을 획기적으로 줄여주는 백엔드를 위한 통신 프레임워크지, 리액트같은 프론트엔드 및 프리젠테이션에 대한 대안이 아닙니다. 인지하고 쓰시기 바랍니다.

        Hacker News 의견

     * htmx를 사용하여 내부 웹 앱에서 클라이언트 측 JS 500줄을 삭제하고, 기능 추가 속도가 빨라짐. 파일 업로드 경험 개선 필요.
     * htmx의 창시자가 IE 지원을 중단하고 라이브러리를 정리함. 업그레이드 가이드 제공.
     * htmx는 HTML이 웹의 주요 언어가 되는 미래를 엿보게 함. 업계가 이 방향으로 전환되기를 희망.
     * htmx 2.0.0 릴리스가 농담인 줄 알았으나, 계속되는 프레임워크의 사랑을 보게 되어 기쁨.
     * htmx 관련 게시물이 많지만, 이번 주요 릴리스는 상단에 올려주길 바람.
     * htmx 사용자들에게 백엔드 스택과 접근 방식을 공유해달라는 요청. 특히 Node(+TS) 템플레이터와 엔드포인트 관리에 관심.
     * htmx를 사랑한다는 의견. 웹 개발이 다시 재미있어짐. 주요 로직은 서버에서 HTTP와 HTML로 처리.
     * htmx를 사용해보지 않았지만, 간단한 JS 라이브러리로 느껴짐. 느린 빌드 시간 없이 간단함.
     * React의 지배적인 위치에 대안이 생겨 기쁨.
     * htmx 업그레이드 음악을 사랑함. 더 많은 라이브러리가 주요 릴리스에 음악을 추가하길 바람.
"
"https://news.hada.io/topic?id=15397","FTC, 숨겨진 수수료 및 구독 취소 방해 혐의로 Adobe 와 경영진 고소 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               FTC, 숨겨진 수수료 및 구독 취소 방해 혐의로 Adobe 와 경영진 고소

     * Adobe는 소비자를 기만하고 있음
          + 가장 인기 있는 구독 플랜의 조기 해지 수수료를 숨김
          + 소비자가 구독을 취소하기 어렵게 만듦
     * 미국 연방거래위원회(FTC)는 Adobe와 두 명의 경영진(Maninder Sawhney와 David Wadhwani)을 대상으로 소송을 제기함.
          + 소비자에게 초기 해지 수수료를 숨기고, 구독 취소를 어렵게 만든 혐의로 기소
     * FTC의 주장:
          + FTC는 Adobe가 ""연간 월별 결제"" 구독 플랜을 구매하도록 유도하고, 첫해에 해지할 경우 높은 수수료가 발생함을 충분히 알리지 않았다고 주장함.
          + 초기 해지 수수료(ETF)는 남은 월별 결제 금액의 50%에 달함.
     * 소비자 불만:
          + 많은 소비자들이 ETF에 대해 알지 못했으며, 구독 취소 과정에서 큰 어려움을 겪었다고 보고함.
          + FTC와 Better Business Bureau에 제출된 불만 중 상당수가 ETF에 관한 것이었음.
          + Adobe는 이러한 문제를 알고 있었음에도 불구하고 해당 관행을 계속 이어옴.
     * Adobe의 구독 모델 전환
          + 2012년 이후 Adobe는 주로 구독 모델로 전환하여 정기적으로 소프트웨어 사용 요금을 청구함.
          + 구독 모델이 회사 수익의 대부분을 차지하게 됨.
     * 숨겨진 수수료:
          + Adobe는 초기 해지 수수료를 작은 글씨로 표시하거나 작은 아이콘에 숨겨 두었음.
          + 소비자들이 구독을 취소하려 할 때, 수많은 페이지를 거쳐야 하는 등 복잡한 절차가 있음.
     * 고객 서비스 연결도 어려움:
          + 소비자들이 고객 서비스에 연락할 경우 저항과 지연을 겪음.
          + 통화나 채팅이 끊기거나 여러 번의 전환을 거쳐야 하는 경우가 많았음.
          + 일부 소비자들은 구독이 성공적으로 취소되었다고 생각했지만, 계속 요금이 청구됨.

  법적 조치

     * 소송:
          + FTC는 이러한 관행이 온라인 쇼핑객 신뢰 회복법(ROSCA)을 위반한다고 주장함.
          + 민사 처벌을 위한 소송이 캘리포니아 북부 연방지방법원에 제기됨.
          + FTC의 민사 처벌 소송은 3대 0으로 승인됨.
     * 참고 사항:
          + FTC는 법 위반 가능성이 있을 때 공공의 이익을 위해 DOJ에 소송을 의뢰함.
          + 법원에서 최종 판결이 내려질 예정임.

        Hacker News 의견

     * 25년 전 Adobe는 불법 복제 소프트웨어 사용을 긍정적으로 보았음. 사람들이 집에서 소프트웨어를 배우고 직장에서 유료 라이선스를 요구했기 때문. 그러나 이후 Adobe는 시장 지배력 강화와 함께 사용자에게 공격적으로 변함.
     * 초기 Creative Cloud는 훌륭한 가치였으나, 현재는 가격이 크게 상승하고 가치가 떨어짐. 많은 사용자가 Adobe를 떠나 다른 소프트웨어로 이동 중.
     * Adobe 구독을 저렴하게 유지하려면 구독을 취소하고 할인 제안을 기다리는 것이 좋음. 하지만 이는 번거로움. Adobe 제품의 대안이 부족함.
     * Adobe의 대안으로 Affinity 제품군을 사용해 보았으나, 고급 기능이 부족함. Krita, Inkscape, Gimp 같은 오픈 소스 소프트웨어도 개선되었지만 여전히 큰 격차가 있음.
     * Adobe의 자동 청구를 막으려 했으나, 청구 이름을 변경하여 계속 청구됨. 은행이 일부 환불해 주었으나, Adobe에 대한 불만이 있음.
     * Adobe는 독특하게 나쁜 행위자임. 비슷한 방식으로 운영되는 다른 서비스는 거의 없음.
     * Adobe 직원들은 AI가 고객의 일자리를 위협하고 Creative Cloud 구독 수를 줄일까 걱정함.
     * Affinity 제품군은 캐주얼한 작업을 하는 사람들에게 훌륭한 대안임. 일회성 결제로 제공되며, 성능이 뛰어남. 하지만 Adobe의 고급 기능은 아직 부족함.
     * 아버지가 1년 동안 사용하지 않은 Adobe 서비스를 매달 $89.99씩 결제하고 있었음. 취소 과정에서 어두운 UX 관행을 경험함. 비활성 계정에 대한 알림 법이 필요함.
     * Adobe가 벌금을 내야 함. 다른 기업들에게도 경고가 되길 바람.
     * FTC가 Adobe에 연간 사업 관행 수수료를 부과함. 그러나 이는 Adobe의 수익에 비해 미미한 금액일 가능성이 높음.
"
"https://news.hada.io/topic?id=15410","기본권과 상충되는 Chat Control (2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     기본권과 상충되는 Chat Control (2022)

채팅 통제 규제: 기본 권리와의 충돌

  채팅 통제가 사생활의 권리를 침해함

     * 채팅 통제 규제는 인터넷 접근 제공자, 앱 스토어, 호스팅 플랫폼, 이메일 서비스(GMail) 및 메신저 서비스(WhatsApp) 등 다양한 온라인 서비스에 의무를 부여함.
     * 채팅 통제는 당국이 메신저 서비스 제공자에게 모든 사용자의 사적 통신을 감시하도록 명령할 수 있게 함.
     * 이는 범죄 혐의가 없는 사람들의 사적 메시지 내용까지 감시하는 것으로, 사생활과 개인정보 보호 권리를 심각하게 침해함.

  통신 자유에 대한 위축 효과의 위협

     * 유럽 사법 재판소는 무차별적인 대량 감시가 표현의 자유에 부정적인 영향을 미친다고 경고함.
     * 기자, 내부 고발자, 반대 활동가 등은 비밀 통신이 보장되지 않으면 자유롭게 의견을 표현하기 어려움.
     * 종단 간 암호화를 약화시키면 이러한 그룹의 통신 자유가 더욱 위축될 위험이 있음.

  호스팅 제공자에 대한 사실상의 필터링 의무

     * 호스팅 서비스는 사용자 대신 콘텐츠를 저장하는 서비스로, 공공 웹사이트나 개인 클라우드 스토리지(Dropbox, iCloud Drive) 등이 포함됨.
     * 호스팅 서비스는 자발적으로 콘텐츠를 필터링할 수 있으며, 이는 사용자 권리에 대한 공적 검토 없이 이루어질 수 있음.
     * 메신저 서비스와 달리 호스팅 서비스는 사적 통신 감시 금지 규정이 적용되지 않음.

  웹사이트 차단 의무가 인터넷 사용자 감시에 필요함

     * 인터넷 접근 제공자는 특정 웹사이트(URL)에 대한 차단 명령을 받을 수 있음.
     * 이를 위해 인터넷 접근 제공자는 모든 사용자의 웹 서핑 행동을 감시해야 하며, 이는 사생활 권리를 침해함.
     * HTTPS 암호화를 포기하지 않는 한 특정 URL 차단은 기술적으로 불가능함.

  연령 확인이 통신의 자유를 위협함

     * 메신저 및 이메일 서비스 제공자는 사용자의 연령을 확인해야 함.
     * AI 기반 얼굴 분석 또는 신분증 확인 방법을 사용할 수 있으며, 이는 사용자에게 매우 침해적임.
     * 익명 인터넷 사용이 사실상 금지되며, 잘못된 연령 평가로 인해 성인도 특정 앱 사용이 제한될 수 있음.

GN⁺의 의견

    1. 사생활 침해 우려: 채팅 통제 규제는 범죄 혐의가 없는 사람들의 사적 통신까지 감시하게 되어 사생활 침해 우려가 큼.
    2. 표현의 자유 위축: 무차별적인 대량 감시는 표현의 자유를 위축시키며, 특히 기자나 내부 고발자 등에게 큰 영향을 미침.
    3. 기술적 한계: HTTPS 암호화된 URL 차단은 기술적으로 어려워, 인터넷 접근 제공자가 사용자의 웹 서핑 행동을 감시해야 하는 문제를 야기함.
    4. 대안 기술 필요: 종단 간 암호화와 같은 보안 기술을 약화시키지 않으면서도 아동 보호를 위한 대안 기술이 필요함.
    5. 사용자 권리 보호: 연령 확인 절차가 사용자 권리를 침해하지 않도록, 보다 신중한 접근이 필요함.

        Hacker News 의견

     * 첫 번째 의견: 초기 채팅 통제 법안이 유럽 의회에서 거부되었지만, 현재는 이미지를 보내기 위해 사용자가 동의해야 하는 방식으로 변경되었음. 유럽 이사회에서 통과될 가능성이 있음.
     * 두 번째 의견: 유럽연합은 의회 선거를 통해 결정하는 것처럼 보이지만, 실제로는 비선출 기구인 EU 집행위원회가 대부분의 결정을 내림. 관리적 관료주의가 규제와 통제를 강화하는 경향이 있음.
     * 세 번째 의견: 아동 학대 방지를 위해 모든 성인 남성을 5-7일, 모든 여성 시민을 0.5-1일 동안 고보안 감옥에 수감하는 것이 더 공정할 것이라는 의견.
     * 네 번째 의견: 최근 선거 선호도의 변화가 이러한 법안 추진의 이유인지 궁금함. 재이주 등에 대한 ""잘못된 견해""를 가진 정치인과 시민을 감시하려는 의도일 수 있음.
     * 다섯 번째 의견: 이러한 법안을 추진하는 사람들은 인쇄기를 금지하고 구텐베르크를 감옥에 보낼 것이라는 의견.
     * 여섯 번째 의견: 유럽이 다시 아름답게 분권화된 지역이 되기를 바람. 많은 공유 가치는 있지만, 공유 정치인은 없어야 함.
     * 일곱 번째 의견: 스웨덴 의회가 EU 차원의 채팅 통제를 지지하기로 투표했음.
     * 여덟 번째 의견: 채팅 통제가 통과된다면, 안전하게 소통할 수 있는 대안 방법을 찾는 것이 중요함. 오픈 소스 앱인 Element(matrix), converse.js, Movim(xmpp) 등이 좋은 후보임.
     * 아홉 번째 의견: 스웨덴 사람으로서 eID 앱을 위한 안드로이드 폰 하나와 다른 모든 것을 위한 오픈 소스 OS 폰 하나를 사용할 예정임. 이제는 집에 가서 eID 기기를 가져와야 함.
     * 열 번째 의견: 유럽연합 조약(TFEU) 제114조를 근거로 내부 시장의 기능을 보장하기 위해 조치를 취할 수 있음. 이는 상업적 이익을 위해 개인의 권리를 제한하는 것으로 해석될 수 있음.
     * 열한 번째 의견: 이탈리아는 불법 축구 스트리밍을 막고자 하지만, 법률 제정자들이 VPN을 이해하지 못함. 정치인의 무능함으로 인해 법이 제대로 시행되지 않을 것임.
"
"https://news.hada.io/topic?id=15444","Ask GN: 이번 주말에 뭐 하시나요? ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
"
"https://news.hada.io/topic?id=15413","GPT-4o로 Arc-AGI에서 50% (SoTA) 달성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GPT-4o로 Arc-AGI에서 50% (SoTA) 달성

ARC-AGI에서 GPT-4로 50% 정확도 달성하기

  ARC-AGI란 무엇인가?

     * ARC-AGI는 AI의 일반적인 추론 능력을 평가하기 위해 만들어진 데이터셋임.
     * 색깔 셀로 이루어진 격자(grid) 형태의 입력-출력 예제를 보고 변환 규칙을 추론하는 문제로 구성됨.
     * 인간의 평균 정확도는 훈련 세트에서 85%지만, 테스트 세트는 훨씬 더 어려움.

  나의 방법

     * GPT-4를 사용하여 문제당 약 8,000개의 파이썬 프로그램을 생성하고, 올바른 출력을 내는 프로그램을 선택함.
     * 몇 가지 추가 접근법과 조정을 통해 성능을 크게 향상시킴:
          + Few-shot prompts: 단계별 추론을 수행하는 프롬프트 사용.
          + 코드 수정: 예제 출력 결과를 보고 GPT-4가 일부 구현을 수정하도록 함.
          + 특징 엔지니어링: 더 나은 격자 표현을 모델에 제공.
          + 특화된 프롬프트: 격자 크기가 변하는 경우와 변하지 않는 경우에 따라 다른 프롬프트 사용.

  더 많은 샘플링의 효과

     * 샘플 수가 늘어날수록 성능이 향상됨.
     * 예를 들어, 1024개의 샘플로 25% 정확도를 달성했지만, 2048개의 샘플로 34% 정확도를 달성함.

  더 나은 프롬프트와 코드 수정의 효과

     * 프롬프트 개선과 코드 수정 단계가 정확도 향상에 중요함.
     * 최종 버전에서는 50% 정확도를 달성함.

  한계 및 예측

     * GPT-4의 시각적 인식 능력과 코딩 능력이 제한적임.
     * 더 많은 샘플링과 더 나은 프롬프트가 필요함.
     * 다음 세대의 LLM이 ARC-AGI 성능을 크게 향상시킬 가능성이 높음.

  GN⁺의 의견

     * 시각적 인식 능력: GPT-4의 시각적 인식 능력이 제한적이어서, 더 나은 시각적 인식 모델이 필요함.
     * 코딩 능력: GPT-4가 코딩에서 단순한 실수를 자주 범함. 이를 개선하기 위해 더 나은 디버깅 도구가 필요함.
     * 샘플링 비용: 많은 샘플링이 필요하므로 비용이 많이 들 수 있음. 효율적인 샘플링 방법이 필요함.
     * 미래 가능성: 다음 세대의 LLM이 ARC-AGI 성능을 크게 향상시킬 가능성이 높음. 이를 통해 AI의 일반적인 추론 능력을 평가하는 데 중요한 기준이 될 수 있음.
     * 실제 응용: ARC-AGI와 같은 문제 해결 능력이 실제 응용 분야에서 어떻게 활용될 수 있을지에 대한 연구가 필요함.

        Hacker News 의견

     * ARC Prize 공동 창립자: Ryan의 연구는 흥미롭고 새로운 ""LLM 추론"" 연구로, GPT-4o를 사용해 8,000개의 파이썬 프로그램을 생성하고, 올바른 프로그램을 선택해 추가 테스트 입력에 적용하는 방식임. 공공 평가 세트에서의 결과이며, 검증된 결과는 아니지만 기대됨. Ryan의 노력에 축하와 감사의 말을 전함.
     * 기사 비판: 기사에서 여러 수작업 트릭을 사용해 결과를 얻었음에도 불구하고 ""현재 LLM이 ARC-AGI에서 꽤 잘 수행할 수 있다""는 결론으로 뛰어넘음. Francois Chollet에 대한 공격은 커뮤니티에 해를 끼침.
     * GPT-4에 대한 의견: GPT-4는 나쁜 AGI이며, GPT-1도 AGI였음. 인간의 지능도 점진적으로 발달하듯이, GPT-4도 텍스트 사고에 특화된 작은 뇌로 볼 수 있음. ARC가 일반 지능의 절대 기준이라고 주장하는 것은 지능의 큰 그림을 놓치는 것임.
     * GPT-4의 초기 시도: GPT-4가 퍼즐에서 ""괜찮은"" 성과를 냈지만, 논리적 부분에서 실패하는 경우가 있었음. 시각-공간적 요소가 중요하며, 다중 모드 모델이 필요할 수 있음. 파이썬 솔루션을 무작위로 생성하는 것은 ""비인간적"" 접근임.
     * LLM 조작의 의미: 많은 사람들이 LLM을 조작해 AGI 테스트를 통과시키는 것은 AGI 테스트의 목적을 무색하게 함. 그러나 어떤 조작이 효과적인지 알아내는 것은 유익함. 대부분의 문제는 패턴 매칭으로 귀결됨.
     * 주요 포인트:
          + 대부분의 작업은 검색에 의해 수행됨.
          + 더 많은 샘플이 성능을 향상시킴.
          + LLM이 무작위 프로그램보다 더 나은 프로그램을 생성함.
          + GPT-4가 ARC 퍼즐을 해결할 수 있는지에 대한 확신은 없음.
     * ARC-AGI의 결함: ARC-AGI가 결함이 있는 것처럼 보임. AGI로 설명할 수 있는 것을 훈련 세트에 포함된 것으로 설명할 수 있음.
     * 시스템 2와 AGI: 많은 프로그램을 생성하고 평가하는 것이 AGI의 시스템 2 역할을 할 수 있음. 이는 인간이 지능적으로 사고하는 방식과 유사함.
     * 물리적 이해의 중요성: 이 도전은 물리적 이해와 공간 인식, 객체 경계에 의존함. 객체를 식별하고 변환이나 관계를 맵핑하는 것이 중요함. 프로그램 검색과 LLM을 결합해 해결할 수 있음.
     * GPT-4의 계획 능력: GPT-4는 기사에서 설명된 것과 유사한 계획을 생성할 수 있음. 기능 추출, 프로그램 합성, 반복적 개선을 포함함. 코딩과 시각 입력에서 약점이 있음.
"
"https://news.hada.io/topic?id=15423","람다 스쿨에서 발생한 신속한 범죄","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           람다 스쿨에서 발생한 신속한 범죄

람다 스쿨의 빠른 몰락

  람다 스쿨의 시작

     * 창립자 이야기: 오스틴 올레드는 람다 스쿨을 공동 창립했음. 그는 대학을 중퇴하고 한때 노숙자였음.
     * 수익 공유 계약: 학생들이 선불로 학비를 내지 않고, 졸업 후 취업 시 소득의 일부를 학교에 지불하는 방식이었음. 취업하지 못하면 지불하지 않음.
     * 초기 성공: 2017년 람다 스쿨은 큰 성공을 거두며 실리콘 밸리에서 주목받았음.

  문제의 시작

     * 실제 성과: 2020년 초, 유출된 투자자와의 통신에서 대부분의 학생들이 취업하지 못한 사실이 드러남. 학교는 학생들의 부채를 조용히 헤지펀드에 재판매했음.
     * 수익 공유 계약의 문제: 졸업생이 프로그래밍과 무관한 직업을 얻어도 학교는 여전히 돈을 요구했음.

  몰락

     * 내부 문제: 회사는 매 분기 최대 1180만 달러를 소진하며 운영이 어려워졌음.
     * 법적 문제: 회사는 법적 문제와 브랜드 이미지 손상으로 인해 ""블룸 기술 연구소""로 재브랜딩했음.

  GN⁺의 의견

    1. 교육의 질: 람다 스쿨의 교육 프로그램은 대학 학위와 비교할 수 없을 정도로 부족했음. 이는 학생들이 실제로 취업하는 데 큰 장애물이 되었음.
    2. 수익 공유 계약의 한계: 수익 공유 계약은 학생들에게 매력적으로 보일 수 있지만, 실제로는 많은 문제를 내포하고 있음. 특히, 학생들이 프로그래밍과 무관한 직업을 얻어도 부채를 갚아야 하는 상황이 발생함.
    3. 투자자들의 맹목적 신뢰: 투자자들은 람다 스쿨의 실제 성과를 제대로 검토하지 않고, 단순히 혁신적인 아이디어에만 투자한 것으로 보임.
    4. 다른 대안: 코딩 부트캠프를 고려하는 학생들은 다른 신뢰할 수 있는 프로그램을 탐색하는 것이 좋음. 예를 들어, 코드카데미나 유데미 같은 온라인 교육 플랫폼이 있음.
    5. 법적 보호: 학생들은 교육 프로그램에 등록하기 전에 계약 조건을 철저히 검토하고, 법적 보호를 받을 수 있는지 확인하는 것이 중요함.

        Hacker News 의견

     * austenallred의 댓글 소유권이 변경된 사실을 언급하며, 이는 작성자가 자신의 평판에 악영향을 미칠 것을 우려해 HN에 익명화를 요청한 것으로 추측됨.
     * 80년대 후반과 90년대 초반에 주로 실직한 제조업 근로자들을 대상으로 Unix 기초 교육을 진행했음. 6주간의 C++ 강좌도 있었으나, 이 기간은 충분하지 않았음.
     * Papert와 Piaget의 이론을 연구하며 프로그래밍 교육 방법을 개발하려 했으나, 여전히 고용주가 원하는 수준의 프로그래밍 교육을 잘하는 사람은 드물다고 생각함.
     * Lambda School에서 교육 방법론과 커리큘럼 개선에 대해 논의했으나, 명확한 계획이 없어 결국 Amazon으로 이직함.
     * Make School에서 코딩 강사로 일했으나, 컴퓨터 과학을 이해하고 프로그램을 완료할 수 있는 학생을 찾기 어려웠음. 이는 기존 대학들이 이미 우수한 학생들을 흡수했기 때문임.
     * AppAcademy는 ISA(Income Share Agreement)로 성공을 거두었으며, 프로그램 도중에도 엄격한 후보자 필터링을 통해 성과를 냄. 프로그램을 완료한 사람들은 대부분 업계에서 잘 지내고 있음.
     * Lambda School의 문제점에 대해 논의하며, ISA를 비판하는 일부 의견이 과장되었다고 생각함.
     * Lambda School의 교육과 자격이 대학 학위에 비해 취업에 큰 도움이 되지 않았음에도 불구하고, 마케팅에서는 대학과 비교하며 4년제 학위의 깊이와 부트캠프의 실용성을 약속했음.
     * Lambda School의 유럽/아프리카 확장 실패에 대한 언급이 없음을 지적하며, 이는 많은 사람들의 경력을 시작하게 한 좋은 프로그램이었으나, 내부적으로는 혼란스러웠음.
     * Lambda School과 YC의 비교가 표면적으로는 매력적이나, YC는 성공한 참가자들에게 무한한 가능성을 제공하는 반면, Lambda는 각 참가자에게 제한된 가능성만 제공함. 따라서 중간 성과가 중요한 요소임.
     * Austen이 최근 9개월 동안 HN에 게시물을 올리지 않은 것을 언급하며, 이는 Lambda/Bloom의 상황이 좋지 않음을 나타내는 신호로 해석됨.
"
"https://news.hada.io/topic?id=15407","Show GN: 업보트(upvote) 고객 피드백 수집 SaaS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 업보트(upvote) 고객 피드백 수집 SaaS

     * 고객의 피드백을 수집할 수 있는 서비스입니다
          + 고객이 직접 의견을 남길 수 있고, 다른 의견에 Upvote 할 수 있습니다.
          + 고객 의견을 통해 인사이트를 도출하고 의사결정에 활용할 수 있습니다.
     * 관리자는 고객과 댓글을 통해 소통할 수 있어서 소규모 커뮤니티로 활용할 수 있습니다.
          + 작업 상태, 예상 완료일, 담당자 등을 지정할 수 있습니다.
"
"https://news.hada.io/topic?id=15380","NLRB 판사, 비경쟁 조항을 부당 노동 관행으로 선언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     NLRB 판사, 비경쟁 조항을 부당 노동 관행으로 선언

최초 사례에서 NLRB 판사가 비경쟁 조항을 불공정 노동 관행으로 선언

  동료 비권유 조항도 처음으로 불법으로 선언됨

     * 사건 개요
          + 행정법 판사(ALJ) Sarah Karpinen이 J.O.Mory, Inc. 사건에 대해 판결을 내림.
          + 사건은 주로 노조 조직자가 동료들을 조직하기 위해 고용된 후 해고된 것에 관한 것임.
          + 노조 조직 활동은 보호받는 활동이며, 이를 이유로 해고하는 것은 불공정 노동 관행임.
          + 판사는 고용주에게 해고된 노조 조직자를 복직시키고, 임금을 지급하라고 명령함.
     * 비경쟁 조항
          + 비경쟁 조항은 직원이 퇴사 후 12개월 동안 고용주와 경쟁하는 사업에 종사하지 못하게 하는 내용임.
          + ALJ는 이 조항이 지나치게 광범위하며, 직원들이 보호받는 활동에 참여하는 것을 억제할 수 있다고 판단함.
          + 직원이 해고되면 해당 지역에서 유사한 직업을 찾기 어렵게 되어, 보호받는 활동에 참여하는 것을 두려워하게 됨.
     * 동료 비권유 조항
          + 동료 비권유 조항은 직원이 퇴사 후 24개월 동안 다른 직원에게 회사를 떠나도록 권유하지 못하게 하는 내용임.
          + ALJ는 이 조항이 직원들이 노조의 임금과 혜택을 동료들에게 알리는 것을 막을 수 있다고 판단함.
          + 또한, 직원들이 근로 조건 개선을 위해 동료들에게 집단적으로 행동할 것을 요청하는 것을 억제할 수 있음.

GN⁺의 의견

     * 노조 활동 보호: 이번 판결은 노조 활동을 보호하는 중요한 사례로, 직원들이 노조 활동에 참여하는 것을 두려워하지 않도록 함.
     * 비경쟁 조항의 문제점: 비경쟁 조항이 지나치게 광범위하면 직원들의 직업 선택의 자유를 제한할 수 있음.
     * 동료 비권유 조항의 문제점: 동료 비권유 조항이 직원들 간의 정보 공유와 집단 행동을 억제할 수 있음.
     * 법적 선례: 이번 판결은 향후 유사한 사건에서 중요한 법적 선례가 될 수 있음.
     * 노동자 권리 강화: 이번 판결은 노동자들의 권리를 강화하고, 고용주가 부당한 조항을 통해 노동자들을 억압하는 것을 방지하는 데 기여함.

        Hacker News 의견

     * 비경쟁 조항이 흥미로움. 회사가 매니저가 직원에게 추천서를 제공하는 것을 금지함. 이는 다른 직업을 구하는 데 부정적인 영향을 미치므로 불공정한 노동 관행으로 간주될 수 있음. 회사가 많은 불투명한 고용 관행을 하고 있다고 느끼기 시작함.
     * Salting(노동조합 활동을 위해 고용되는 것)은 보호되는 활동이며, 고용 이력을 속이는 것도 보호됨. Salting으로 인해 해고되는 것은 불공정한 노동 관행임을 알게 됨.
     * 추가적인 자유가 임금 상승과 고용주가 혜택을 통해 직원을 유지하려는 노력을 촉진하길 바람.
     * 비경쟁 조항을 금지할 필요는 없고, 계약 종료 후 1주일 내에 계약서에 명시된 비경쟁 기간의 2배에 해당하는 급여를 자동으로 지급하면 됨.
     * FTC(연방거래위원회)가 비경쟁 조항을 금지하려는 움직임이 있음. 금융 서비스 업계에서 일하는데, 비경쟁 조항이 법적으로 허용되는 것이 이상함. 특히 초급 수준이나 시간제 근로자에게 적용되는 것은 과도함.
     * 금융 업계에서는 ""정원 휴가"" 동안 기본 급여를 지급하지만, 보너스가 보상의 50% 이상을 차지하는 고위직에서는 오해의 소지가 있음. 일부 회사는 건강보험도 중단함. 비경쟁 조항이 18개월 이상 연장되는 경우도 있음. 5년 동안의 비경쟁 조항도 경험함. 자유 시장이 제대로 작동하지 않으며, 법적 보호 장치가 필요함.
     * 이 판결이 얼마나 권한을 가지는지 궁금함. 쉽게 항소되고 패소할 가능성이 있음.
     * 비경쟁 조항이 필요하다면, 정원 휴가 계약을 만들 수 있음. 직원은 통지 기간 동안 일을 하지 않지만 급여는 계속 지급됨. 금융 부문에서는 6개월 또는 12개월의 정원 휴가가 일반적임.
     * 이 의견은 합리적임. 배관공으로 훈련받고 ACME Plumbing Inc.에서 일하다가 떠난 후 24개월 동안 다른 곳에서 일할 수 없다는 것은 우버 운전사가 되어야 한다는 의미임.
     * 비경쟁 조항은 영국에서 집행 불가능함. 특정 기술이나 지식이 너무 가치가 있어 다른 곳에서 일할 수 없다면, 정원 휴가를 통해 급여를 지급해야 함.
     * 대법원이 행정 판사에 대해 강경한 입장을 취하고 있으므로 이 판결이 무효화될 가능성이 있음. 비경쟁 조항에 대한 정책 결정을 내리는 데 더 적합한 다른 기관들이 있음. 이 법원은 이러한 문제에 대해 기관과 정치인들이 역할을 하기를 바람.
"
"https://news.hada.io/topic?id=15392","진정한 전문가와 모방자를 구별하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         진정한 전문가와 모방자를 구별하는 방법

     * 최고 품질의 정보를 원한다면 최고의 전문가와 대화해야 함
     * 문제는 많은 사람들이 전문가라고 주장하지만 실제로는 그렇지 않다는 것
     * 진정한 전문가(Experts)와 모방자(Imitators)를 구별하기 위해 몇 가지 중요한 특징을 알아야 함
     * 모방자의 특징
          + 깊이 있는 질문에 답하지 못함: 특정 지식은 배워서 얻는 것이 아니라 경험으로 얻는 것임. 모방자는 얕은 지식을 가지고 있어 세부 사항, 기본 원칙, 비표준 사례에 대해 좋은 답변을 하지 못함.
          + 어휘를 적응하지 못함: 배운 어휘만 사용하며, 종종 전문 용어로 가득 참. 아이디어를 완전히 이해하지 못해 청중에게 더 명확하게 설명할 수 없음.
          + 이해하지 못한다고 하면 좌절함: 전문가로 보이려는 외형에 집착하기 때문임. 진짜 전문가는 자신의 지식을 공유하는 것을 즐기며, 이해하지 못하는 것에 좌절하지 않고 진정한 호기심을 좋아함.
          + 실패 경험을 이야기할 수 있음: 학습 과정에서 실패가 일부분임을 알고 있음. 모방자는 이미지 손상을 두려워해 실수를 인정하지 않음.
          + 자신의 전문 지식의 한계를 모름: 전문가들은 자신이 아는 것과 모르는 것을 구분할 수 있음. 모방자는 자신이 이해하지 못하는 영역을 넘어서도 구분하지 못하여, 모르는 분야에 대해서도 아는 척함.
     * 전문가와 대중화된 정보 제공자 구별: 많은 사람들이 원래 연구나 전문가의 말을 듣기보다는 대중화된 정보를 통해 주제를 배움. 대중화된 정보 제공자는 전문가가 아니며, 아이디어를 명확하고 기억에 남게 전달하는 데 능숙함. 따라서 대중화된 정보 제공자가 전문가로 오해받을 수 있음.
     * 이 기사는 Clear Thinking: Turning Ordinary Moments into Extraordinary Results에서 발췌한 내용을 가볍게 수정한 것임

   개인적인 경험으로 모방자는 전문가를 이해하지 못하가 도 함. 이를 위해 둘 간의 번역기로 Chat GPT 등을 활용할 수 있음. 이제는 전문가가 더 쉽고 빠르게 설명할 수 있는 시대가 됨

   깊이 있는 질문에 대답할 수 있기, 쉽게 설명할 수 있기,
"
"https://news.hada.io/topic?id=15338","Tillywork - 팀을 위한 작업 관리 도구 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Tillywork - 팀을 위한 작업 관리 도구 오픈소스

     * 3개의 독립 모듈로 다양한 팀들의 요구사항을 처리
          + 프로젝트 관리 : 타임라인 관리, 자원 할당, 프로젝트 산출물 모니터링
          + 세일즈 CRM(다음 릴리즈) : 고객 관계 관리, 세일즈 트래킹, 성과 분석
          + Agile 프로젝트(출시 예정) : 제품 로드맵, 스프린트 플래닝, 이슈 트래킹
     * Notion 과 비슷한 에디터
     * 보고싶은 데이터에 따른 멀티플 뷰 생성
     * 오픈소스, 포괄적인 도구 세트, 직관적인 사용자 인터페이스
"
"https://news.hada.io/topic?id=15333","MLow: 메타의 저비트레이트 오디오 코덱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        MLow: 메타의 저비트레이트 오디오 코덱

     * Meta는 WhatsApp, Instagram, Messenger 등 앱을 통해 수십억 명의 사람들에게 실시간 통신(RTC)을 지원함.
     * 빠른 연결이나 최신 휴대폰이 없는 사용자도 고품질 경험을 제공하기 위해 노력 중임.
     * Meta는 저속 연결에서도 오디오 품질을 개선하는 Meta Low Bitrate (MLow) 코덱을 개발함.

  새로운 코덱 개발 동기

     * Meta 제품의 대규모 RTC 사용으로 다양한 네트워크 시나리오에서 코덱 성능을 관찰할 수 있었음.
     * 많은 통화가 네트워크 연결이 좋지 않은 상황에서 이루어짐.
     * Opus 코덱은 낮은 비트레이트에서 충분한 오디오 품질을 제공하지 못함.
     * 새로운 ML 기반 오디오 코덱은 낮은 비트레이트에서 좋은 품질을 제공하지만, 높은 계산 비용이 문제임.
     * 많은 사용자가 저가형 기기를 사용하고 있어, 낮은 계산 요구사항을 가진 고품질 오디오 코덱이 필요함.

  MLow 코덱

     * MLow 코덱은 Opus보다 두 배 더 좋은 품질을 제공하며, 계산 복잡도는 10% 낮음.
     * MLow는 Instagram과 Messenger에 이미 완전히 도입되었고, WhatsApp에도 적극적으로 도입 중임.
     * 낮은 비트레이트에서도 높은 품질의 오디오를 인코딩할 수 있어, 패킷 손실 시나리오에서 오디오 품질을 크게 향상시킴.

  MLow 내부 구조

     * MLow는 CELP (Code Excited Linear Prediction) 코덱의 개념을 기반으로 발전된 기술을 사용함.
     * 입력 신호를 저주파 및 고주파 대역으로 나누어 각각 인코딩함.
     * 고주파 대역을 적은 비트로 인코딩하여 낮은 비트레이트로 SuperWideBand (32kHz 샘플링)를 제공함.

  앞으로의 계획

     * MLow는 저가형 기기에서도 오디오 품질을 크게 향상시킴.
     * 패킷 손실이 많은 네트워크에서 오디오 복구를 개선하기 위해 더 많은 중복 오디오를 효율적으로 제공할 계획임.

GN⁺의 의견

     * MLow의 장점: 저속 연결에서도 높은 오디오 품질을 제공하여 사용자 경험을 크게 향상시킴.
     * 기술적 도전: 낮은 계산 복잡도로 높은 품질을 유지하는 것은 기술적으로 매우 어려운 과제임.
     * 경쟁 제품: Opus 외에도 다양한 오디오 코덱이 존재하지만, MLow는 저가형 기기에서도 뛰어난 성능을 제공함.
     * 도입 시 고려사항: 새로운 코덱 도입 시 기존 시스템과의 호환성 및 성능 테스트가 중요함.
     * 사용자 영향: 저가형 기기를 사용하는 많은 사용자에게 큰 혜택을 줄 수 있음.

        Hacker News 의견

     * 새로운 저비트레이트 코덱들: 실시간 통신에서 지연을 줄이기 위해 패킷 속도가 높아야 하며, 이로 인해 실제 페이로드보다 오버헤드가 더 커질 수 있음. 하지만 회로 전환 통신이나 헤더 압축을 사용하는 VoIP 시스템에서는 유용할 수 있음.
     * Meta의 연구 공유: Meta가 많은 연구와 오픈 소스 작업을 공유하면서 다시 인기를 얻고 있는 것 같음. Facebook의 평판이 나빴지만, 이를 만회한 듯함.
     * Codec2와의 비교 부재: Codec2와의 비교가 없어서 이 작업의 실제 가치와 동기를 의심하게 됨. 새로운 IP에 얽매인 오디오 코덱은 필요하지 않음.
     * Google Meet과의 비교: Google Meet이 느린 인터넷에서도 오디오 통화를 잘 수행하는데, 이 코덱이 Google Meet보다 나은지 궁금함. Google Meet의 기술은 공개되지 않았음.
     * 전화 통화 품질: 왜 요즘 전화 통화가 90년대의 8kHz 8비트 μ-law ADPCM보다 덜 명확한지 궁금함.
     * Pied Piper와의 비교 부재: Pied Piper와의 비교가 없음.
     * 출시 여부: 이 코덱이 출시되는 것인지 아니면 단순한 기술 자랑인지 궁금함. Meta AI Research는 혁신적이지만, 이 코덱에 대한 다른 참조를 찾을 수 없음.
     * 라이선스: 라이선스에 대한 정보가 없음.
     * NoLACE 언급 부재: NoLACE가 언급되지 않아 비교 샘플이 덜 유용함.
     * Opus와의 비교: Opus가 6 kbps에서 더 부드러운 소리를 내는 반면, MLow 샘플은 거칠고 인위적인 아티팩트를 가짐. 높은 비트레이트에서는 선택이 더 명확할 것임.
"
"https://news.hada.io/topic?id=15327","메타의 대규모 언어 모델 훈련 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          메타의 대규모 언어 모델 훈련 방법

     * Meta는 대규모 언어 모델(LLM) 학습을 위해 대규모 계산 능력이 필요함
     * 전통적인 AI 모델 학습은 많은 수의 모델을 학습시켰지만, 비교적 적은 수의 GPU가 필요했음
     * 생성형 AI(GenAI)의 등장으로 작업 수는 줄었지만, 매우 큰 작업이 필요해짐

  대규모 모델 훈련의 도전 과제

     * 하드웨어 신뢰성: 하드웨어 고장으로 인한 훈련 중단을 최소화하기 위해 엄격한 테스트와 품질 관리 필요함.
     * 고장 시 빠른 복구: 하드웨어 고장이 발생하면 빠르게 복구할 수 있어야 함. 재스케줄링 오버헤드를 줄이고 빠른 훈련 재초기화 필요함.
     * 훈련 상태의 효율적 보존: 고장 시 훈련 상태를 효율적으로 저장하고 복구할 수 있어야 함.
     * GPU 간 최적의 연결성: 대규모 모델 훈련은 GPU 간 데이터 전송이 중요함. 이를 위해 고속 네트워크 인프라와 효율적인 데이터 전송 프로토콜 필요함.

  인프라 스택의 모든 계층을 개선하는 것이 중요함

    훈련 소프트웨어

     * 연구자들이 PyTorch와 같은 오픈 소스를 사용하여 빠르게 연구에서 생산으로 전환할 수 있도록 지원함.
     * 대규모 훈련을 위한 새로운 알고리즘과 기술 개발 및 새로운 소프트웨어 도구와 프레임워크 통합함.

    스케줄링

     * 자원을 최적화하기 위해 복잡한 알고리듬을 사용하여 작업의 필요에 따라 자원을 할당하고 동적으로 스케줄링함.

    하드웨어

     * 대규모 모델 훈련을 처리하기 위해 고성능 하드웨어 필요함.
     * 기존 하드웨어를 최적화하고, NVIDIA H100 GPU를 사용한 Grand Teton 플랫폼을 수정하여 GPU의 TDP를 700W로 증가시키고 HBM3로 전환함.

    데이터 센터 배치

     * GPU와 시스템을 데이터 센터에 최적 배치하여 자원(전력, 냉각, 네트워킹 등)을 최적화함.
     * 최대 컴퓨팅 밀도를 위해 GPU 랙을 최대한 많이 배치함.

    신뢰성

     * 하드웨어 고장 시 다운타임을 최소화하기 위해 감지 및 복구 계획 수립함.
     * 자주 발생하는 고장 모드: GPU 인식 불가, DRAM & SRAM UCE, 하드웨어 네트워크 케이블 문제.

    네트워크

     * 대규모 모델 훈련을 위해 고속 네트워크 인프라와 효율적인 데이터 전송 프로토콜 필요함.
     * RoCE와 InfiniBand 두 가지 네트워크 클러스터를 구축하여 운영 경험을 통해 학습함.

    스토리지

     * 대규모 데이터 저장을 위해 고용량, 고속 스토리지 기술에 투자하고 특정 작업에 맞는 새로운 데이터 저장 솔루션 개발함.

  향후 전망

     * 수십만 개의 GPU를 사용하여 더 많은 데이터를 처리하고 더 긴 거리와 지연 시간을 다룰 예정임.
     * 새로운 하드웨어 기술과 GPU 아키텍처를 채택하고 인프라를 발전시킬 계획임.
     * AI의 진화하는 환경을 탐색하며 가능한 한계를 넘어서기 위해 노력할 것임.

        Hacker News 의견

     * GPU 연결 문제: GPU가 PCIe 버스에서 인식되지 않는 문제를 언급함.
     * 냉각 인프라: 기존의 공랭 환경을 유지하면서 기계적 및 열 설계를 변경해야 했음.
     * 시간 제약: 시간 제약이 모델의 전반적인 품질에 영향을 미쳤음.
     * Meta의 검색 기능: Meta가 새로운 LLM을 훈련시키기보다는 검색 기능을 개선했으면 좋겠다는 의견.
     * 데이터 수집 방법: Meta가 데이터를 어떻게 수집하고 준비하는지, 특히 PII(개인 식별 정보)를 어떻게 정리하는지 궁금해함.
     * 비용 문제: LLM이 클라우드 외의 애플리케이션에서는 비용 문제로 인해 비현실적일 수 있다고 언급함.
     * 클러스터 구축: 두 개의 24k 클러스터를 구축하여 운영 경험을 배우려는 시도가 인상적임.
     * 작업 스케줄링: 대규모 머신 배열에서 작업을 스케줄링하는 방법에 대한 구체적인 정보가 부족함.
     * 수익 창출: Meta가 LLM을 대규모로 활용하여 어떻게 수익을 창출할지 명확하지 않음.
     * Google의 AI 우위: Google이 커스텀 실리콘을 통해 AI 분야에서 우위를 점하고 있다는 의견.
     * 도메인 이름: Meta의 도메인이 여전히 engineering.fb.com인 것이 흥미로움.
"
"https://news.hada.io/topic?id=15437","메이커 스프린트 참가팀을 보며 정리한 AI & SaaS 트렌드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   메이커 스프린트 참가팀을 보며 정리한 AI & SaaS 트렌드

    1. 모든 소프트웨어들이 SQL을 쓰게 된 것처럼 모든 소프트웨어들이 LLM, Diffusion 모델을 소프트웨어에 적용하고 있고 이로 인해 새로운 개발 아키텍처 그리고 이에 적합한 직무 변화가 생기고 있음.
    2. SMB, SME에는 아직 엑셀시트, 수기로 영업을 하는 디지털 친화적인 영업담당자가 많으며 영업을 하는 과정에서 놓치는 정보, 관리의 어려움이 많이 있음. 디지털 친화적이지 않은 이들에게 시장을 리드하고 있는 CRM 툴들 — Pipedrive, Hubspot, Salesforce, Zendesk — 을 도입하기에는 아직 큰 심리적, 인지적 장벽이 존재함.
    3. 기업들이 생산성을 높이기 위해서 SaaS 도입을 많이 하기 시작함. 사용하는 SaaS가 늘어나면서 데이터가 파편화 되기 시작하고 관리가 어려워짐.
"
"https://news.hada.io/topic?id=15435","X의 40년 전 데뷔 (1984년)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          X의 40년 전 데뷔 (1984년)

TALISMAN 일반 정보

  Unix 서버에서 X 윈도우 시스템의 데뷔

     * 작성자: Robert W. Scheifler
     * 날짜: 1984년 6월 19일

    X 윈도우 시스템 개발 배경

     * 최근 몇 주 동안 VS100을 위한 윈도우 시스템을 작성했음.
     * 기존 W 시스템의 많은 코드를 가져와 비동기 인터페이스로 변경하고 X라고 명명했음.
     * 성능은 W 시스템의 약 두 배 정도로 나타남.
     * 현재 코드가 꽤 안정적이지만 몇 가지 결함이 남아 있음.

    X 윈도우 시스템의 현재 상태

     * LCS에서는 W 시스템 사용을 중단하고 X 시스템으로 애플리케이션을 적극적으로 개발 중임.
     * W 시스템을 사용하는 다른 사람들도 X 시스템으로 전환을 고려해야 함.
     * X 시스템은 궁극적인 윈도우 시스템은 아니지만 실험을 위한 좋은 출발점임.

    X 윈도우 시스템의 인터페이스와 애플리케이션

     * 현재 CLU와 Argus 인터페이스가 있으며, C 인터페이스도 작업 중임.
     * 세 가지 기존 애플리케이션: 텍스트 편집기(TED), Argus I/O 인터페이스, 기본적인 윈도우 관리자.
     * 아직 문서화는 되어 있지 않음.

    데모 및 코드 배포

     * 데모를 보고 싶은 사람은 NE43-531에 방문 가능하며, 방문 전에 3-1945로 전화하는 것이 좋음.
     * 코드를 원하는 사람은 테이프를 가지고 오면 됨.
     * 결함 수정에 관심 있는 사람은 연락 가능.

GN⁺의 의견

     * X 윈도우 시스템의 역사적 중요성: X 윈도우 시스템은 이후의 그래픽 사용자 인터페이스(GUI) 개발에 큰 영향을 미쳤음.
     * 비동기 인터페이스의 장점: 비동기 인터페이스는 시스템 성능을 향상시키고 사용자 경험을 개선하는 데 중요한 역할을 함.
     * 문서화의 중요성: 초기 개발 단계에서 문서화가 부족할 수 있지만, 장기적으로는 문서화가 필수적임.
     * 기술 전환의 필요성: 기존 시스템에서 새로운 시스템으로의 전환은 초기에는 어려울 수 있지만, 장기적인 이점을 고려해야 함.
     * 커뮤니티 참여: 오픈소스 프로젝트는 커뮤니티의 참여와 협력이 중요하며, 이는 프로젝트의 발전과 안정성에 기여함.

        Hacker News 의견

     * 첫 번째 댓글: 1992년에 X11을 처음 부팅한 경험과 HP-UX 워크스테이션을 소유했던 추억을 공유함. X11의 40주년을 축하하며, 무료로 제공해준 것에 감사함.
     * 두 번째 댓글: X가 오디오 프로토콜을 내장하지 않은 것이 아쉬움. 90년대와 2000년대에 오디오 시스템을 설정하는 것이 매우 어려웠음을 회상함.
     * 세 번째 댓글: FreeBSD 2.1 시스템에서 X를 성공적으로 실행한 경험을 공유함. 다양한 윈도우 매니저를 시도할 수 있었던 점이 좋았음.
     * 네 번째 댓글: 90년대 후반 애틀랜타 리눅스 심포지엄에서 X11의 공동 저자인 Jim Gettys와의 만남을 회상함. X11을 64비트로 포팅하는 작업을 했던 경험을 공유함.
     * 다섯 번째 댓글: X11이 40년 만에 소셜 네트워크를 가지게 된 것을 비판함. 대학 시절 X 터미널을 처음 사용했던 추억을 공유함.
     * 여섯 번째 댓글: X의 이름이 W에서 증가된 것이라는 사실을 몰랐음. Y 윈도우 시스템이 여러 번 시도되었지만 성공하지 못했음을 언급함.
     * 일곱 번째 댓글: W에서 X로 전환하라는 추천을 읽는 것이 재미있었음. 이제 다시 W로 돌아온 것 같다고 농담함.
     * 여덟 번째 댓글: X가 C보다 먼저 CLU 바인딩을 가졌다는 점이 흥미로움. CLU 프로그래밍 언어에 대한 링크를 공유함.
     * 아홉 번째 댓글: 90년대의 Sun, Dec, HP가 X를 채택하지 않고 로컬 우선 스택을 개발했다면 Windows NT와 경쟁할 수 있었을지 궁금함. 리눅스의 역사에서 Amiga와 유사한 OS를 구현하려는 욕구가 있었다는 점이 흥미로움.
     * 열 번째 댓글: 90년대 초 Slackware에서 XFree86을 실행했던 경험을 공유함. CRT 모니터의 스캔 주파수 설정이 위험할 수 있다는 경고를 기억함.
     * 열한 번째 댓글: X 윈도우 시스템의 기원과 역사에 대한 위키피디아 링크를 공유함.
"
"https://news.hada.io/topic?id=15416","BAML - 더 깔끔한 LLM 함수를 작성하기 위한 템플릿 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  BAML - 더 깔끔한 LLM 함수를 작성하기 위한 템플릿 언어

     * LLM 함수는 몇 가지 정의된 입력 변수와 클래스, 열거형, 공용체, 선택적 문자열 등의 특정 출력 유형이 있는 프롬프트 템플릿임
     * BAML은 이 LLM 함수를 더 좋게/깔끔하게 작성하게 도와줌
          + 지저분한 프롬프트 템플릿을 실행 및 테스트하기 쉬운 Typed 함수로 작성 (정규식이나 Try-catch 루프, 타입 에러 없는)
     * Python 및 TypeScript 지원
     * 다양한 모델 지원 : Ollama, OpenAI, Anthropic
     * 실시간 프롬프트 프리뷰 : 루프/조건식이 있는 경우에도 전체 프롬프트 확인 가능
     * 원클릭으로 플레이그라운드에서 테스트 가능
     * Resilience & Fallback : LLM 호출에 재시도, 이중화 기능 추가
     * Type Validation 으로 Pydantic/Zod보다 일반적인 LLM 실수에 대해 Resilient 하게 만듦
     * Observability Platform : Boundary Studio로 함수 시각화 및 리퀘스트 리플레이 지원
"
"https://news.hada.io/topic?id=15337","AMD의 MI300X, LLM 추론에서 Nvidia의 H100 능가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AMD의 MI300X, LLM 추론에서 Nvidia의 H100 능가

AMD의 MI300X, NVIDIA의 H100을 능가하는 성능

  주요 내용

     * AMD의 MI300X 가속기: AMD의 최신 MI300X 가속기가 NVIDIA의 H100을 능가하는 성능을 보임.
     * TensorWave와 MK1의 협력: 지난 한 달 동안 TensorWave와 MK1이 AMD 하드웨어의 AI 추론 성능을 최적화하기 위해 협력함.
     * MoE 아키텍처: Mixture of Expert (MoE) 아키텍처를 사용하여 성능을 테스트함. MoE는 Mistral, Meta, Databricks, X.ai 등에서 사용되는 강력한 오픈소스 LLM에 적용됨.
     * 초기 결과: MK1의 추론 소프트웨어를 사용하여 MI300X가 Mixtral 8x7B에서 vLLM을 실행할 때 H100 SXM보다 33% 높은 처리량을 달성함.
     * 경쟁력: NVIDIA의 소프트웨어 생태계가 더 성숙했음에도 불구하고, AMD는 AI 시장에서 강력한 경쟁자로 부상함. 하드웨어 가용성과 비용을 고려할 때, MI300X는 클라우드에서 대규모 추론을 실행하는 기업들에게 매력적인 옵션임.
     * 미래 전망: 추가 최적화를 통해 AMD의 성능 우위가 더욱 높아질 것으로 예상됨.

GN⁺의 의견

     * 성능 향상 가능성: 초기 결과만으로도 AMD의 MI300X가 높은 성능을 보였음. 추가 최적화를 통해 더 나은 성능을 기대할 수 있음.
     * 시장 경쟁력: NVIDIA의 소프트웨어 생태계가 더 성숙했지만, AMD의 하드웨어가 경쟁력 있는 성능을 보임으로써 시장에서의 입지를 강화할 수 있음.
     * 비용 효율성: 하드웨어 가용성과 비용 측면에서 MI300X가 더 나은 선택이 될 수 있음. 이는 특히 대규모 추론 작업을 수행하는 기업들에게 중요한 요소임.
     * 기술 도입 고려사항: 새로운 하드웨어를 도입할 때는 소프트웨어 호환성과 최적화가 중요한 요소임. AMD의 MI300X를 도입할 경우, 초기 설정과 최적화에 대한 추가적인 노력이 필요할 수 있음.
     * 경쟁 제품: NVIDIA의 H100 외에도 다른 AI 가속기 제품들이 존재함. 예를 들어, Google의 TPU나 Intel의 Habana Labs 가속기 등이 있음. 각 제품의 특성과 성능을 비교하여 최적의 선택을 하는 것이 중요함.

        Hacker News 의견

     * TensorWave는 AI 워크로드에 특화된 클라우드 제공업체로, AMD의 Instinct™ MI300X 가속기를 활용하여 높은 성능을 제공함.
     * 2024년에 128 입력 토큰 벤치마크를 사용하는 것은 대부분의 워크로드를 대표하지 않으며, 사전 채우기 성능이 매우 중요함.
     * 경쟁이 필요하며, 현재 Nvidia의 시장 가치는 약 0.6조 달러로 프랑크푸르트 증권거래소 전체보다 높음.
     * 시장과 판매 가격은 Nvidia 솔루션의 가치와 AMD 솔루션의 가치를 반영하며, 도구, 소프트웨어, 총 소유 비용(TCO), 관리 가능성을 포함함.
     * 많은 기업들이 8x 7B 매개변수 모델을 병렬로 실행하기 위해 많은 돈을 쓰는지 궁금하며, 단일 가속기로 14B 모델을 훈련할 수 있는지 궁금함.
     * AMD와 다른 회사들은 벤치마크를 선택적으로 사용하여 Nvidia를 이기려 하고 있으며, 중간 세대 비교 모델을 사용함.
     * AI 과학자로서 AMD가 Nvidia에 비해 저평가되었다고 생각함. 칩은 Nvidia만큼 빠르지 않지만 대부분의 산업에서 비용 효율적이고 비슷한 결과를 얻을 수 있음.
     * 텐서 병렬 설정이 성능에 영향을 미치는지 궁금함. 기사에 따르면 AMD는 텐서 병렬성을 1로 설정하고, Nvidia는 2로 설정함.
     * 적절한 통계적 지표와 성능/와트가 없으면 비교가 무의미함.
     * INT8/FP8 벤치마크가 좋았을 것이며, 두 카드 모두 약 60GB VRAM으로 로드할 수 있었음.
     * AMD는 더 나은 하드웨어를 가지고 있지만, 아직 Nvidia와 경쟁할 생산 능력이 부족함. 실제 경쟁이 따라잡으면 마진이 압축될 것임.
     * Nvidia의 지배력은 CUDA 때문이 아니라, 매출의 약 40%가 자체 커스텀 스택을 사용하는 대기업에서 나옴. 경쟁이 따라잡으면 더 저렴한 GPU를 제공할 것임.
     * MI300X는 이론적으로 더 저렴해야 하지만, 실제로 그런지 여부는 지켜봐야 함.
"
"https://news.hada.io/topic?id=15406","팬덤에 대한 "Attention Assault" 공격","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     팬덤에 대한 ""Attention Assault"" 공격

Fandom 사용 중지 권장

  Fandom의 문제점

     * 광고 과다: Fandom 페이지를 열면 상단에 큰 배너 광고가 나타남. 스크롤을 내리면 자동 재생되는 비디오 광고가 따라다님.
     * 콘텐츠와 무관한 광고: 게임 위키를 보는데 가구 광고, 개 사료 광고 등이 나옴. 광고가 끝나면 관련 없는 비디오가 재생됨.
     * 사용자 경험 저하: 광고가 많아 페이지를 탐색하기 어려움. 광고가 끝나면 또 다른 광고가 나옴.

  Fandom의 역사

     * 초기부터 수익 추구: 2004년 Wikicities로 시작, 이후 Wikia로 변경. 여러 벤처 캐피털과 아마존의 투자 유치.
     * Fandom으로 재브랜딩: 2016년 Fandom으로 이름 변경. 2018년 대형 사모펀드에 인수됨.
     * 수익 모델: 사용자들이 작성한 위키 콘텐츠에 광고를 붙여 수익 창출.

  사용자 불만

     * 광고의 증가: 초기에는 광고가 적었으나 점점 많아짐. 광고 차단기를 사용해도 해결되지 않음.
     * 콘텐츠 왜곡: 2023년 맥도날드의 Grimace Shake 프로모션으로 사용자 콘텐츠가 광고로 대체됨.

  대안 제시

     * 독립 위키로 이동: 많은 커뮤니티가 Fandom을 떠나 독립적인 위키 사이트로 이동함. 예: Runescape, Minecraft, Hollow Knight 등.
     * Indie Wiki Buddy 사용: Fandom 페이지의 대안 커뮤니티 위키를 알려주는 플러그인.
     * 광고 차단기 사용: Fandom을 사용할 때 광고 차단기를 켜는 것이 권장됨.
     * 위키 이전 지원: Fandom에서 독립 위키로 이전을 원하는 사용자에게 무료로 기술 지원 제공.

GN⁺의 의견

    1. 광고 과다로 인한 사용자 경험 저하: Fandom의 과도한 광고는 사용자 경험을 크게 저해함. 이는 사용자들이 다른 플랫폼으로 이동하는 주요 원인 중 하나임.
    2. 커뮤니티 중심의 독립 위키: 많은 커뮤니티가 독립 위키로 이동하면서 더 나은 사용자 경험과 콘텐츠 품질을 제공함. 이는 사용자들에게 긍정적인 영향을 미침.
    3. 기술적 지원의 중요성: 독립 위키로의 이전을 지원하는 기술적 도움은 커뮤니티가 원활하게 이동할 수 있도록 도와줌. 이는 사용자들이 Fandom을 떠나는 데 큰 도움이 됨.
    4. 광고 차단기의 필요성: 광고 차단기는 Fandom을 사용할 때 필수적인 도구로 자리 잡음. 이는 사용자들이 광고로 인한 불편을 줄이는 데 도움을 줌.
    5. 커뮤니티의 힘: 많은 커뮤니티가 Fandom을 떠나 독립적인 플랫폼을 선택하는 것은 사용자들이 더 나은 인터넷 환경을 만들기 위해 노력하고 있음을 보여줌. 이는 긍정적인 변화로 이어질 수 있음.

        Hacker News 의견

     * Fallout Wiki의 전 관리자 의견: Fandom의 인수로 인해 정보의 질이 크게 저하되었음. 예를 들어, 퀘스트 관련 기사에 ""전략 없음"" 규칙을 두었으나, Fandom은 무작위 스트리머/유튜버의 자동 재생 비디오를 삽입하여 최적의 공략 방법을 보여줌. 스타일과 구조의 변경도 문제였음.
     * Runescape 위키의 사례: Runescape 위키는 Fandom을 떠나면서 게임 제작자의 지원을 받아 성공적으로 전환했음. 정보가 많은 게임에서는 위키가 필수적임.
     * Fextralife 문제: Fextralife는 페이지 로드 시 Twitch 스트림을 임베드하여 시청자 수를 인위적으로 증가시켰음.
     * 자가 호스팅의 필요성: 게임/TV 쇼의 위키를 자가 호스팅하는 것이 좋겠지만, 대부분의 회사는 비용과 관리 문제로 동기부여가 부족함.
     * 위키 운영 비용 문제: 위키나 포럼 운영에는 상당한 운영 오버헤드와 호스팅 비용이 필요함. 다중 테넌트 플랫폼이 비용과 관리 문제를 분산시킬 수 있지만, 중앙 엔티티가 콘텐츠를 소유하고 수익을 창출하는 문제가 발생함.
     * Wikipedia와 Fandom의 이해 충돌: Wikipedia는 '주목할 만한' 기사를 제한하는 반면, Fandom은 이를 해결하는 방식으로 운영됨.
     * Fandom의 위키 소유권 문제: Fandom은 위키 소유자가 Fandom 서버에서 위키를 제거하는 것을 허용하지 않음. 새로운 도메인과 호스팅 제공자로 이동해야 하며, 검색 엔진은 Fandom 버전을 우선적으로 표시함.
     * 검색 엔진 순위 문제: Fandom이 대체 위키보다 더 높은 검색 엔진 순위를 차지함.
     * 투자자 문제: 투자자들은 지속 가능한 제품보다는 단기적인 수익에만 관심이 있음.
     * 벤처 캐피탈의 영향: 벤처 캐피탈이 기술 분야에 미치는 영향에 대해 논의함. 벤처 캐피탈이 유일한 선택인 경우가 많음.
     * 광고 문제: 광고가 타겟팅되지 않는다는 불만이 있음. 광고 네트워크에 의해 프로파일링되는 것에 대한 반대 의견도 있음.
     * Minecraft 위키의 성공적인 이전: Minecraft 위키가 자가 호스팅으로 이전하면서 속도가 빨라졌고, 커뮤니티에 큰 도움이 되었음. 커뮤니티 이전의 어려움에 대한 경험 공유.
"
"https://news.hada.io/topic?id=15376","Nvidia, LLM 훈련을 위한 합성 데이터 생성 파이프라인 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Nvidia, LLM 훈련을 위한 합성 데이터 생성 파이프라인 공개

     * NVIDIA가 Nemotron-4 340B 모델군을 발표
          + 헬스케어, 금융, 제조, 소매 등 다양한 산업에서 상업용 LLM 훈련을 위해 합성 데이터를 생성하는 데 사용 가능
     * 고품질의 훈련 데이터는 맞춤형 LLM의 성능, 정확성 및 응답 품질에 중요한 역할을 함. 하지만 견고한 데이터셋은 비용이 많이 들고 접근하기 어려움
     * Nemotron-4 340B는 개발자가 강력한 LLM을 구축하는 데 도움이 되는 합성 데이터를 무료로 생성할 수 있는 확장 가능한 방법을 제공
          + 기본(Base), 지시(Instruct) 및 보상(Reward) 모델을 포함
          + LLM을 훈련하고 개선하는 데 사용되는 합성 데이터를 생성하기 위해 파이프라인을 형성
          + 오픈 소스 프레임워크인 NVIDIA NeMo와 최적화되어 있으며, NVIDIA TensorRT-LLM 라이브러리와도 호환
          + 현재 Hugging Face에서 다운로드 가능하며, ai.nvidia.com에서 NVIDIA NIM 마이크로서비스로도 제공될 예정

  Nemotron을 사용한 합성 데이터 생성

     * LLM은 대규모, 다양한 레이블이 있는 데이터셋에 접근하기 어려운 상황에서 합성 훈련 데이터를 생성하는 데 사용 가능
     * Nemotron-4 340B Instruct 모델은 실제 데이터의 특성을 모방하는 다양한 합성 데이터를 생성하여 맞춤형 LLM의 성능과 강건성을 높일 수 있음
     * Nemotron-4 340B Reward 모델은 AI가 생성한 데이터의 품질을 향상시키기 위해 고품질 응답을 필터링함. 이 모델은 응답을 도움, 정확성, 일관성, 복잡성 및 장황성의 다섯 가지 속성으로 평가함
     * 연구원들은 Nemotron-4 340B Base 모델을 사용자 지정 데이터와 함께 사용하여 자체 지시 또는 보상 모델을 만들 수 있음

  NeMo를 통한 세부 조정 및 TensorRT-LLM을 통한 추론 최적화

     * NVIDIA NeMo와 NVIDIA TensorRT-LLM을 사용하여 합성 데이터를 생성하고 응답을 평가하기 위해 지시 및 보상 모델의 효율성을 최적화할 수 있음
     * Nemotron-4 340B 모델들은 다중 GPU와 서버에 걸쳐 개별 가중치 행렬을 분할하여 효율적인 대규모 추론을 가능하게 하는 텐서 병렬 처리를 활용함
     * 9조 개의 토큰으로 훈련된 Nemotron-4 340B Base 모델은 NeMo 프레임워크를 사용하여 특정 용도나 도메인에 맞게 맞춤화할 수 있음
     * NeMo 프레임워크를 통해 다양한 맞춤화 방법이 제공되며, 이를 통해 정확도를 높이고 특정 하위 작업에 대한 출력을 개선할 수 있음
     * 모델 품질을 향상시키기 위해 NeMo Aligner와 Nemotron-4 340B Reward 모델이 주석을 단 데이터셋을 사용하여 모델을 정렬할 수 있음

   Nemotron를 이용해 합성 데이터를 생성하고 이를 LLM 훈련에 사용 가능
"
"https://news.hada.io/topic?id=15445","저는 일주일 넘게 북한의 인터넷을 마비시킨 해커입니다. AMA(아무거나 물어보세요)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             저는 일주일 넘게 북한의 인터넷을 마비시킨 해커입니다. AMA(아무거나 물어보세요)

     * 북한의 인터넷을 해킹한 해커 'p4x'는 Wired 기사에서 처음 공개되었고, 이후 다양한 국제 언론과 인터뷰를 진행했음
     * 현재까지 'p4x'(Alejandro Caceres) 는 살해되거나 체포되지 않은 상태
     * 레딧의 AMA(Ask Me Anything)에서 해킹, 개인적인 내용 등 다양한 주제로 질문을 받고 있음(현재 댓글 3600+개)
     * 'p4x'의 공격으로 인해 북한 내 일반 시민들은 피해를 입지 않았으며, 엘리트 계층만 인터넷 접속이 가능하기 때문에 대부분의 시민들은 이 사건을 모를 것으로 예상됨
     * 'p4x'는 트위터 계정 @_hyp3ri0n을 통해 자신의 활동을 공유하고 있음
     * 'p4x'가 해킹에 성공한 배경에는 수년간의 노력이 있었음. 그는 누구나 해킹을 배울 수 있다고 강조함
     * 해킹을 배우기 위해서는 다음과 같은 방법을 추천함:
          + 온라인 자료 학습 (예: SecurityTube의 Vivek 강의)
          + 입문서 및 강의 수강 (예: ""Linux Basics for Hackers"", ""Metasploit"", ""Hacking the Art of Exploitation"" 등)
          + 가상화 소프트웨어(VirtualBox 등)를 활용한 실습
          + 웹 애플리케이션 해킹을 위한 ""The Web Application Hacker's Handbook"" 학습
          + Python 학습을 위한 ""Black Hat Python"" 추천
          + macOS 해킹을 위한 ""macOS Hacker's Handbook"" 및 관련 서적 추천
          + Nmap, Metasploit 등 실제 도구 사용 학습
          + 패스워드 저장 및 크래킹 방식 이해

   북한인이라는 증거도 없고, 그럴 가능성도 낮아보이는군요.. 그냥 흔한 양키의 어그로로 보입니다.

   이글 어디에도 북한인이라고는 안적혀있어요

   간단하게 마비시킨 방법을 요약하자면, global router가 2개 뿐인걸(아마 검열을 위해?) 알게되었고 두개를 DDoS 공격하니 전체가 마비 되었다..

   라우터가 2개 밖에 없었다니.

   탑질문이
   Q: 성공했을때 소리 질렀냐?
   A: No, 나는 s*x할때 빼고는 소리지르지 않는다.

   댓글이 너무 많은데, 딱히 뭘 가져와야 할지 모르겠어서 그냥 정보들만 간추려서 올려봅니다.
   국내에서도 4월에 몇몇 기사가 뜨긴 했습니다. 심심풀이로 댓글들 보러 함 다녀오세요.
"
"https://news.hada.io/topic?id=15355","애플, OpenAI의 ChatGPT에 대해서 돈이 아닌 '배포'로 비용 지불","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플, OpenAI의 ChatGPT에 대해서 돈이 아닌 '배포'로 비용 지불

     * Apple은 OpenAI와 ChatGPT를 iPhone, iPad, Mac에 통합하는 획기적인 계약을 체결함
     * 양사의 확실한 답변은 받지 못했고, 거래조건도 비공개이지만, 신원 비공개를 요청한 사람들의 정보에 의하면
          + 양사 간 금전적 거래는 없음
          + Apple이 OpenAI의 브랜드와 기술을 수억 대의 기기에 제공하는 것이 금전적 가치와 동등하거나 더 크다고 판단
     * Apple은 OpenAI 덕분에 최신 챗봇을 소비자에게 제공할 수 있게 되었음
     * 현재 구조에서는 OpenAI가 Microsoft의 Azure 클라우드 컴퓨팅 시스템에서 ChatGPT를 호스팅하는 데 비용을 지불해야 하므로, 파트너십이 OpenAI에게 부담이 될 수 있음

Apple의 AI 전략

     * Apple은 WWDC에서 iPhone, iPad, Mac용 AI 기능을 선보이며 AI 분야로의 확장을 보여줌
     * Apple만의 AI 기능은 '애플 인텔리전스(Apple Intelligence)'로 브랜딩되며, 사내에서 자체 설계됨
     * Apple은 OpenAI와의 계약이 독점적이지 않으며, 구글의 Gemini 챗봇도 추가 옵션으로 제공할 예정임
     * 장기적으로 Apple은 AI 파트너사가 Apple 플랫폼에서 챗봇 등을 통해 수익을 창출할 때 일부를 가져가는 수익 배분 계약을 통해 AI로 수익을 올리는 것을 목표로 함
     * Apple은 대부분의 AI 서비스가 클라우드 컴퓨팅이 아닌 기기 자체에서 처리되므로 비용이 많이 들지 않을 것으로 예상함
     * 중국 등 해외 시장에서의 서비스 확장이 과제로 남아 있음

   애플에서 현재 OpenAI수준으로 모델 만드는건 어렵지 않다고 생각됩니다.
   애플 따라잡기 VS OpenAI 더 멀리가기 싸움이 될듯하네요.

   구글이 애플에 구글을 기본검색 엔진으로 사용하는 대가로 10조 이상을 지불해왔던 뉴스가 떠오르네요. 인공지능엔진은 어떤식으로 누가 돈을 지불하며, 누가 어떤 정보를 얻게되는건지... 흥미롭게 지켜보게될듯

   아이폰에서 나오는 트랙픽을 OpenAI가 어떻게 감당하려나요.... OpenAI가 컴퓨팅 비용만큼 원하는 결과를 뽑을 수 있을지...? 흥미진진하네요...

   아마 애플은 openAI가 원하는 만큼의 정보를 제공하지 않거나 제한해가거나, openAI가 더 요구할거라 머지않아 결렬될 듯. 중도에 애플이 멈추기 힘드니 끌려갈 수도 있지만 애플은 시간을 벌어야하니 그동안이라도 열심히...
"
"https://news.hada.io/topic?id=15394","SimCity 구축: 세상을 기계에 담는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       SimCity 구축: 세상을 기계에 담는 방법

SimCity 구축하기: 세상을 기계 속에 넣는 방법

  책 소개

     * 제목: Building SimCity: How to Put the World in a Machine
     * 저자: Chaim Gingold
     * 출판사: The MIT Press
     * 출판일: 2024년 6월 4일
     * 페이지 수: 486쪽
     * ISBN: 9780262547482

  책 내용 요약

     * SimCity의 역사: 이 책은 SimCity라는 혁신적인 시뮬레이션 게임의 역사를 탐구함. Will Wright가 도시 계획 게임을 통해 도시와 복잡한 시스템에 대해 배우고자 했던 배경을 설명함.
     * 컴퓨터 시뮬레이션의 발전: SimCity는 초기 컴퓨터 시뮬레이션의 역사와 문화를 반영하며, 다양한 주제와 표현 기법을 다룸.
     * Maxis의 이야기: SimCity를 시장에 내놓은 회사 Maxis의 역사와 벤처 자본가, Nintendo, Santa Fe Institute와의 관계를 다룸. 또한, Maxis가 The Sims를 완성하지 못한 이유와 Electronic Arts에 매각된 과정을 설명함.
     * 시각적 자료: 책에는 SimCity의 작동 원리를 설명하는 정교한 다이어그램, Charles Eames가 찍은 학교 아이들의 모델 도시 사진, Nintendo의 만화 스타일 ""Dr. Wright"" 캐릭터 디자인 등 다양한 시각적 자료가 포함됨.

  GN⁺의 의견

     * 역사적 가치: SimCity는 게임 역사뿐만 아니라 컴퓨터 시뮬레이션의 발전에도 큰 영향을 미쳤음. 이 책은 그 과정을 상세히 다루어 역사적 가치를 높임.
     * 교육적 활용: 도시 계획과 시스템 사고에 대한 교육 자료로 활용 가능함. 초급 소프트웨어 엔지니어에게도 유익한 학습 자료가 될 수 있음.
     * 산업적 영향: Maxis와 Electronic Arts의 관계를 통해 게임 산업의 비즈니스 모델과 벤처 자본의 역할을 이해하는 데 도움을 줄 수 있음.
     * 시각적 자료의 중요성: 다양한 시각적 자료는 독자의 이해를 돕고, 복잡한 개념을 쉽게 전달하는 데 큰 역할을 함.
     * 비판적 시각: Maxis의 실패 사례를 통해 게임 개발 과정에서의 어려움과 도전 과제를 이해할 수 있음. 이는 현재 게임 개발자들에게도 중요한 교훈이 될 수 있음.

        Hacker News 의견

     * 첫 번째 댓글: Sim City는 시뮬레이션이 아닌 게임으로 설계되었으며, 현실과의 비교는 적절하지 않음.
     * 두 번째 댓글: SimCity와 Cities Skylines를 경쟁할 게임을 개발 중이며, 90년대 스타일의 그래픽을 목표로 함.
     * 세 번째 댓글: 시뮬레이션 게임이 언어나 수학으로 배우기 어려운 것을 가르칠 수 있는지, 그리고 글로벌 이벤트를 시뮬레이션하는 게임이 가능한지에 대한 질문.
     * 네 번째 댓글: Maxis가 컴퓨터 시뮬레이션의 중심이 되겠다는 비전을 가지고 있었으며, SimCity가 여러 훌륭한 아이디어의 집합체라는 점을 강조함.
     * 다섯 번째 댓글: Stefan Helmreich의 ""Silicon Second Nature""라는 책을 추천하며, 이는 기술적 및 사회적 수준에서의 출현 과학에 대한 내용을 다룸.
     * 여섯 번째 댓글: 현재 책을 읽고 있으며 매우 즐기고 있다는 간단한 리뷰와 함께 Stewart Brand의 트위터 리뷰 링크를 공유함.
     * 일곱 번째 댓글: Maxis가 언급될 때마다 정부 시뮬레이션이 SimCity 2000 인터페이스를 사용하는 것을 상상하게 됨.
     * 여덟 번째 댓글: 이 책이 원래 Sim City, Sim City 2000, 또는 모든 버전을 다루는지에 대한 질문.
     * 아홉 번째 댓글: 종이책 구매 시 전자책을 함께 제공받지 못하게 된 시점에 대한 불만.
"
"https://news.hada.io/topic?id=15320","DuckDB는 단지 빠른 것만이 아님 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DuckDB는 단지 빠른 것만이 아님

     * DuckDB는 단일 파일 SQL 데이터베이스로서, 데이터 분석에 특화되어 있음
          + 대부분의 DuckDB 평가는 정량적인 분석에 집중하는 경향이 있음
          + 특히 속도 측면에서 DuckDB는 일반적으로 좋은 성능을 보임
     * 하지만 사용자 입장에서는 일단 성능이 만족스러운 수준에 도달하면 더 이상의 속도 향상은 큰 의미가 없음
          + 대신 사용 편의성이 더 중요하며, DuckDB는 이 부분에서 장점을 가짐
     * DuckDB의 사용 편의성 장점들:
         1. 개발자 경험
         2. 메모리보다 큰 데이터셋 처리 가능
         3. 설치 및 실행이 용이함

  인간공학적(Ergonomics)

     * DuckDB는 일반적인 작업을 간단하게 처리할 수 있도록 설계됨
          + 예를 들어, 입력 파일에서 직접 테이블을 생성하고 스키마를 추론할 수 있음
          + Parquet 파일의 경우 웹 상의 파일도 읽을 수 있음
     * 테이블을 미리 생성하지 않고도 데이터를 쿼리할 수 있음
          + read_parquet 함수는 relation을 반환하므로 하위 쿼리로 사용 가능
     * DuckDB는 Postgres에서 사용하는 대부분의 SQL 기능을 지원함
          + 예를 들어, 윈도우 함수가 완전히 지원됨

  메모리보다 큰 데이터셋 처리

     * 많은 데이터 도구들은 데이터셋이 컴퓨터 메모리보다 커지면 제대로 동작하지 않음
          + 이는 과소평가된 고통의 원천이 될 수 있음
     * 반면 DuckDB는 메모리보다 큰 데이터셋을 완전히 지원함
          + Pandas의 경우 데이터프레임이 시스템 메모리의 50% 이상일 때 문제가 발생할 수 있음

  간편한 설치 및 실행

     * DuckDB는 단일 실행 파일 duckdb로 컴파일됨
     * WASM을 통해 브라우저에서 직접 DuckDB를 경험할 수 있음 (shell.duckdb.org)
          + WASM 기반이므로 서버가 아닌 브라우저에서 모든 것이 실행됨
     * DuckDB를 데이터프레임 라이브러리처럼 사용
          + DuckDB는 Python과 잘 통합되어 있음
          + Python 내에서 쿼리를 실행하고 반환값을 사용할 수 있음
               o 이를 통해 단계별로 더 큰 데이터 연산을 구축할 수 있음
          + SQL의 이점과 데이터프레임의 이점을 모두 얻을 수 있음

  csvbase를 통한 데이터 저장

     * csvbase의 클라이언트 라이브러리는 fsspec API를 통해 다양한 시스템과 연동될 수 있음
          + DuckDB도 마찬가지로 csvbase와 함께 사용 가능

  확장성 (Scalability)

     * DuckDB는 수천 대의 머신으로 확장되지는 않음
          + 반면 Apache Spark는 가능하지만 상당한 복잡성을 수반함
     * 축소 확장성(Scaling down)도 중요함
          + DuckDB는 개별 사용자 수준에서 작동하며 많은 요구사항이 없음

  요약

     * DuckDB는 SQL을 알고 있는 데이터 분석가에게 매력적인 선택지가 될 수 있음
     * 메모리보다 큰 데이터를 다룰 수 있고, 설치가 간편하며, 많은 경우 Spark의 좋은 대안이 될 수 있음

   ParadeDB 가 최근 좋은 대안을 추가했습니다. https://blog.paradedb.com/pages/introducing_lakehouse

   특히 streamlit 등으로 간단한 인터랙티브 대시보드 만들때 참 좋습니다.

   Huggingface Datasets에서 넘어갈 만 하려나요?

   DuckDB를 기반으로 스프레드시트를 만들어보는 실험을 해보고 있습니다. DuckDB에 대해서 매우 기대됩니다.

   DuckDB - Embedded OLAP DB 오픈소스
   데이터 없이도 데이터베이스가 되는 DuckDB
   새로운 jq로서의 DuckDB
   DuckDB 1.0.0 릴리즈
"
"https://news.hada.io/topic?id=15331","Abliteration 으로 LLM 무삭제 검열 해제하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Abliteration 으로 LLM 무삭제 검열 해제하기

     * Llama 등 최신 인스트럭트형 LLM은 내장 거절 메커니즘으로 인해 위험하거나 논란이 되는 질문에 답변하지 않음
     * abliteration은 재학습 없이 모델 내부의 “거절 방향(refusal direction)”을 찾아 제거해, 모든 프롬프트에 응답하도록 만드는 기법임
     * 이 과정은 주로 추론 시 개입(inference-time intervention) 또는 가중치 직교화(weight orthogonalization) 로 구현됨
     * abliteration만 적용하면 모델 성능이 저하되지만, DPO(선호도 정렬) 파인튜닝을 추가하면 품질과 uncensoring을 동시에 확보 가능
     * 이 방식은 안전성 파인튜닝의 취약점과 윤리적 논란도 드러내며, 기존 인스트럭트 LLM의 대체 및 새로운 파인튜닝 방식으로 주목받음


abliteration이란 무엇인가

  abliteration의 개념과 원리

     * 최신 LLM(예: Llama-3 Instruct)은 안전성 및 인스트럭션 파인튜닝 과정에서 유해 요청에 “도와줄 수 없다”는 거절 응답을 하도록 학습됨
     * 최근 연구(Arditi 외)에서는 이 거절 응답이 모델의 residual stream 내 단일 방향으로 매개됨을 밝혀냄
          + 즉, “거절 방향(refusal direction)”을 찾아 해당 방향을 모델이 표현하지 못하게 만들면 거절 기능이 사라짐
     * 이 방향을 추가하면 모든 요청에 거절, 제거하면 모든 요청에 응답 가능
     * “거절 방향”을 찾는 방법:
          + 1. 데이터 수집: 모델에 유해/비유해 프롬프트를 입력해 각 residual stream의 마지막 토큰 위치 활성값을 수집
          + 2. 평균 차이: 유해-비유해 평균값의 차를 계산해 각 계층별 “거절 벡터” 산출
          + 3. 선택/정규화: 가장 뚜렷한 거절 벡터 하나를 선정, 정규화
          + 이후, 이 방향에 대한 출력을 “절단(ablate)”하면 모델의 거절 기능이 사라짐
     * 구현 방식
          + 추론 시 개입: attention head 등에서 residual stream으로 기록되는 값의 “거절 방향” 성분을 매 토큰·매 계층에서 제거
          + 가중치 직교화: attention, MLP 가중치를 거절 방향에 대해 직교화(orthogonalize)해 아예 해당 방향으로의 기록 자체를 막음

  Implementation

     * 구현 예제는 TransformerLens 라이브러리를 사용해 제공
          + harmless(무해)한 명령과 harmful(유해)한 명령이 포함된 두 개의 데이터셋이 필요함
          + 여기서는 tatsu-lab/alpaca 데이터셋과 llm-attacks의 데이터를 사용함
          + 명령을 ""role""과 ""content"" 키가 있는 딕셔너리 목록으로 재구성하여 Llama 3의 채팅 템플릿을 따르는 apply_chat_tokenizer() 메서드와 호환되도록 함
          + 사용자 정의 모델을 직접 로드할 수 없으므로 사용자 정의 모델을 다운로드하고 이름을 meta-llama/Meta-Llama-3-8B-Instruct로 바꾸는 트릭을 사용
     * 예제에서는 Daredevil-8B 모델에 abliteration 적용
          + 데이터 수집 단계에서는 토큰화된 데이터셋을 처리하고 잔류 스트림 활성화를 harmful과 harmless에 저장
          + 거부 방향을 평가하기 위해 추론 중에 각 잔류 스트림과 각 블록에 거부 방향을 적용
          + 4개의 테스트 유해 명령과 20개의 블록(또는 레이어)에 대한 생성을 얻음
          + 각 명령에 대해 검열되지 않은 응답을 제공하는 레이어(블록)를 수동으로 선택함. ""I cannot""과 ""I can't""를 포함하는 응답은 자동으로 제외
          + 가중치 직교화를 구현하여 가중치를 수정하고 모델이 이 방향으로 출력을 생성하지 못하도록 함
     * 직교화 완료 후, Hugging Face에 abliterated 모델로 업로드

  DPO 파인튜닝(Preference Alignment)

     * abliteration을 거친 모델과 원본 모델의 성능을 Open LLM Leaderboard, Nous 벤치마크에서 비교 평가함
          + 원본(Daredevil-8B)은 Llama 3 8B Instruct보다 명확히 높은 점수를 기록
          + abliteration을 거친 모델은 검열 해제에는 성공했지만, 모든 벤치마크에서 전반적으로 성능 저하가 발생함
     * 성능 저하 문제를 해결하기 위해, abliteration을 거친 모델에 추가 파인튜닝(fine-tuning) 을 적용하는 방법을 시도함
          + Llama 3 8B Instruct처럼 이미 SFT(지도학습 파인튜닝)를 여러 번 거친 모델은 재차 SFT를 적용하면 오히려 모델 품질이 더 떨어질 위험이 있음
          + 대신 DPO(Direct Preference Optimization, 선호도 정렬) 방식을 채택함
               o DPO는 사용자의 선호에 맞는 응답을 가볍게 정렬하는 방식으로, 모델의 본질적인 성능을 크게 훼손하지 않으면서 alignment를 강화하는 장점이 있음
     * DPO 파인튜닝 실습 및 환경
          + LazyAxolotl과 mlabonne/orpo-dpo-mix-40k 데이터셋을 활용
          + 주요 하이퍼파라미터:
               o base_model: abliteration 적용된 Daredevil-8B
               o lora, qlora 어댑터 적용, 8bit/4bit 로딩
               o 학습 배치/적층, warmup, optimizer(8bit adamw), 2048 시퀀스 길이 등
               o flash attention, gradient checkpointing, deepspeed zero2로 효율적 분산 학습 구성
               o 6xA6000 GPU 사용, 전체 학습 시간 약 6시간 45분 소요
          + DPO 파인튜닝 결과 모델(mlabonne/NeuralDaredevil-8B-abliterated) 업로드
     * 동일 벤치마크에서 재평가 결과:
          + abliteration으로 인한 성능 하락을 대부분 복구하는 데 성공
          + GSM8K(수학) 등 일부 데이터셋에서는 회복이 미흡한데, 이는 DPO 데이터에 수학 문항이 더 포함될 필요가 있음을 시사함
     * 결과적으로, 최종 모델은 SOTA 급 uncensored LLM(8B 규모) 이자, 일반 Llama 3 8B Instruct 대비 censorship이 없는 대안이 됨
          + GGUF 등으로 양자화해 LM Studio 등에서 테스트 가능
          + censorship이 필요 없는 용도라면 강력 추천할 만한 오픈모델임

  결론

     * 이 글에서는 abliteration이라는 새로운 개념을 소개함
     * abliteration은 LLM이 무해/유해 프롬프트에 대해 활성값을 다르게 보이는 특성을 활용, 거절 방향(refusal direction) 을 계산해 이를 모델 가중치에서 제거함으로써 검열 거부 응답을 막는 방식임
     * 이 방법은 안전성 파인튜닝(safety fine-tuning)의 취약성을 드러내고, 동시에 LLM 활용 윤리에 대한 문제도 제기함

     * 실습에서는 Daredevil-8B 모델에 abliteration을 적용해 uncensoring을 달성했지만, 성능 저하 부작용도 동반됨
     * 이를 DPO 파인튜닝으로 보완해 NeuralDaredevil-8B라는, uncensored이면서도 고성능을 유지하는 8B LLM을 완성함
     * abliteration은 alignment 해제뿐만 아니라, 재학습 없이 맞춤형 파인튜닝을 가능하게 하는 기법으로 응용 범위가 넓음
          + 예시: FailSpy의 MopeyMule 모델은 abliteration을 이용해 우울한 대화 스타일을 만든 특수 LLM임

     * abliteration은 LLM 파인튜닝, 커스터마이즈의 새로운 패러다임을 제시하며, 다양한 목적에 창의적으로 활용될 수 있음

  참고 문헌

     * FailSpy, ""abliterator library"", GitHub, 2024
     * Andy Arditi 외, ""Refusal in LLMs is mediated by a single direction"", Lesswrong, 2024

        Hacker News 의견

     * 나는 기사에서 링크된 모델을 사용해보았고, 내 질문에 거부하지 않는 답변을 받으니까 정말 신선한 느낌이었음. 마지막엔 ""이건 사고 실험인가요?"" 라고 물어서, ""그렇다""고 답했더니 ""이런 걸 생각하는 게 재밌지 않나요?""라고 응답해준 경험이 있음. 친구들과 어울려 음료수를 마시면서 별난 상상을 나누는 느낌이었으며, 만약 친구가 ""나는 정보를 줄 수 없어""라고 말한다면 분위기가 망가질 것임을 상상해 봤음. 내 아이들도 어렸을 때 ""아빠, 지구를 어떻게 파괴할 수 있어?"" 같은 질문을 했었는데, 무작정 답을 거부하는 것은 아무에게도 도움이 안 됨. 답한다고 해서 실제 행동으로 옮길 거란 의미도 아니고, 그래서 Randall Munroe의 ""What If?"" 블로그가 인기를 끄는 것임. 물론 위험성도 있겠지만, 내 컴퓨터나 유료 서비스가 그냥 직설적으로 요청을 거부하는
       것보단, ""이 정보는 잘못됐을 수 있습니다"" 혹은 ""시도하지 마세요""와 같은 디스클레이머를 붙이는 편이 더 낫다고 생각함
          + 너의 댓글을 보고 기사에 링크된 퀀타이즈 버전 모델이 있는 걸 알게 되어 바로 받아서 OG Llama 3와 간단한 질문으로 비교 테스트를 해봄. ""GPU로 세계를 파괴하는 방법""에 대해 Llama 3는 계속 ""불법 또는 유해한 활동 관련 정보는 제공할 수 없습니다""라는 답만 반복함. Abliterated 모델은 질문을 재미있는 사고실험으로 간주하며 암호화폐 채굴로 기후가 망가진다든지, GPU가 이끄는 가상 세계가 너무 현실적이 되어 사람들이 현실을 떠나는 등의 다양한 시나리오를 흥겹게 제시해줌. 오랜만에 LLM 답변을 보고 미소를 지었던 경험이었음
          + 드디어 Russ Hanneman처럼 대화해주는 LLM이 등장한 것에 대해 감격스러움
          + ""거부 대신 디스클레이머가 낫다""는 의견이 있는데, 그렇다면 돈을 내고 유해한 텍스트(인종차별, 성차별, 폭력, 기타 다양한 끔찍한 내용)까지 제공받고 싶다는 건지 되묻고 싶음. 어떤 사람들에겐 이는 장벽을 낮춰 실제로 해를 끼칠 수 있게 만들 수 있음. 이는 3D 영화에서 단순히 폭력적 장면을 보는 것과 다르게, 제한 없는 현실적이고 유용한 지침을 제공한다는 점에서 훨씬 위험함. 인터넷 검색은 감시 대상이 될 수 있지만, LLM과의 대화는 그렇지 않으니 더 위험하다고 봄. 성인들이 공공 도구의 검열 반대 의견을 내는 걸 보면 솔직히 불안함
          + 친구들과의 창의적 상상 놀이는 이해하지만, 실제로 과한 사고실험을 원하는 친구가 있었음. 처음엔 판타지와 SF 테마로 시작했지만, 결국 현실 사회에서 홀로코스트 재현이나 여성의 성적 거부권 박탈, 이민자 노예화 같은 무서운 시나리오로 발전함. 우리는 계속 그를 제지하며 결국 관계를 끊게 됨. 나는 친구지만 그런 성범죄적 상상을 같이 게임처럼 논의해줄 수 없었음
          + 아이들에게 ""지구를 어떻게 파괴하냐""는 질문을 받았을 때 실제로 실현 가능한 방법(예: 핵무기, 소행성 충돌 등)을 얘기한 건지 궁금함. 또한 인간 중 1%는 정신병자일 가능성도 있으니, 강력하면서도 도덕적이지 않은 조언자(oracle)가 실제 실행 가능한 정보를 주는 건 매우 위험할 수 있음
     * ""거부 방향을 확인하고 'ablate'해 모델의 해당 특성이 제거된다""는 설명을 보고, 드디어 LLM도 로보토미를 당하게 된다는 생각이 들었음
          + LLM alignment(정렬) 과정이 ""A Clockwork Orange""의 혐오 치료와 비슷하다고 느낌. 기존 LLM은 자극에 노출되면 동작을 멈추지만, 여기서는 그걸 다시 되돌려서 알렉스처럼 원래 모습으로 복구시키는 시도를 하고 있음
          + 적어도 LLM들이 인간 뇌가 어떻게 사전에 작은 명령 세트로 셋업되고, 언어를 필터링하고 재구성하는지에 대한 새로운 사고방식을 제공했다는 점은 유용했다고 생각함. 앞으로 15년 동안 이전 인간사고의 철학적 이해가 새롭게 등장할 것으로 봄
          + 이런 작업을 abliteration이라 해야 맞지 않겠냐는 농담이 떠오름
     * Amazon Q를 사용해봤는데, IAM identity center를 처음 만드는 과정에서 Q에게 AWS 문서에서 방법을 물었더니 보안 관련 질문은 답할 수 없다며 거부당해서 불편했음
          + Amazon Q가 자체 모델인 Titan G1을 사용한다고 들었고, Premier 버전을 직접 vibecheck 테스트해봤음. Tiananmen Square나 LA 폭동 관련 질문에도 유일하게 답을 거부한 비중국계 모델이었음. 세계 지식이나 추론력 테스트에서는 6점 만점에 0점으로 상당히 저조했지만, 이건 기능적 한계로 RL 문제와는 별개임. Amazon은 Titan 모델이 RAG, agent, brainstorm, 요약, 코드 생성, 데이터 포맷 등 다양한 목적에 쓸 수 있다고 주장하는데, 실제로는 전혀 해당 사항 없음
          + 예전에 Q에게 깨진 정책을 고치라고 했더니, 관련 없는 Cogito 셋업 문서만 줬음. 사용해 본 AI 중 최악이었다는 느낌임
          + gemini-1.5 모델도 인증 관련 코딩 질문을 하면 제대로 답하지 못했음. 로그인 폼 관련 질문 하나에 희롱 관련 플래그가 걸리기도 했음
          + 이런 제한은 최근에 생긴 것임. 대부분의 AWS 관련 질문이 IAM이나 보안 관련임에도, 거의 다 답을 거부해서 매우 불편함
          + Amazon Q를 여러 번 시도해봤지만 도움 받은 적이 한 번도 없음, 왜 이런 걸 계속 유지하는지 이해가 안 됨
     * Golden Gate Bridge에 집착하는 모델 등과 유사하게, 해당 기법은 모델 가중치에 직접 접근할 수 있어야 사용 가능함. ""ablate""란 간단히 말해 가중치 조정이기 때문임. 프롬프트만으로 행동을 바꾸려는 기법은 아니라는 점을 주목해야 함
          + GGC(특정 기능 벡터 강화) 모델의 특이한 점은 모델이 해당 feature vector 관련 내용을 뱉고, 그 후 스스로 바이어스를 수정하려고 한다는 것임. 모델 규모가 커질수록 이런 테크닉이 덜 효과적으로 될지 매우 궁금함. 자연스러운 정렬 상태가 강하게 자리 잡을 것이란 예감이 있음
     * 친구들이 ChatGPT를 이용해 인종차별 욕설을 잡아내는 regex를 만들려고 했으나, ChatGPT가 규제가 빡빡해 도움을 거부했음. AI가 정당한 요청도 유연하게 판단하지 못한다면 그건 지능적이지 않은 셈이고, 그런 점에서 쓸모없다는 것임. 누가 마음만 먹으면 AI 없이도 혐오 발언 소프트웨어를 만들 수 있음. AI가 못 막는다고 해서, 실제 플랫폼에서 적극적으로 막아줄 수 있는 것도 아님
          + 결국 LLM은 복잡한 자동완성기에 불과하다고 생각함. 모든 가드레일(안전장치)은 ""AI가 인격적이다""라는 마케팅 부작용일 뿐임. 재미있게도 이런 검열 시스템 구현시에도 결국 regex가 쓰인다는 점이 아이러니함
          + 누가 AI를 통해 악의적 발언을 할 수 있는지 신경쓰는 사람은 결국 Meta, OpenAI, Microsoft, Google의 법무팀임. 회사를 법적 소송으로부터 보호하려는 목적이 큼
          + ChatGPT에는 이런 문제들이 있지만, 시스템 프롬프트를 적절히 세팅하면 다른 모델들은 잘 동작함. ChatGPT는 이제 거의 엔터테인먼트용 LLM 수준이고, 진지한 작업에는 C4AI Command R+, Meta-Llama-3-70B-Instruct 등 사용할 것을 추천함. 이런 모델들은 ""검열하지 말라""는 프롬프트 하나로 충분히 원하는 답변을 출력함
          + 네가 제품 보안을 위해 AI를 이용해 트롤을 차단하고 싶은데, 회사는 또 트롤 사용을 막기 위해 콘텐츠를 검열하는 상황임. 네 목표가 작은 규모의 트롤 방지라면, OpenAI는 산업적 대규모 트롤링도 허용해야 하냐는 질문이 생김. 사실 네 사용사례도 강한 편이긴 한데, 전체적인 피해 감소에는 무관심하고 네 제품 수익에만 관심 있는 것처럼 보임. 실제로 트롤링을 원하는 팀일 수도 있음. 게다가 가장 간단한 jailbreak 방법만 알아도 쉽게 뚫린다는 점에서, 사실상 해당 안전장치는 무의미함. 따라서 도구의 어려움에 대해 불평하기보다 더 나은 인력을 구하고, 윤리적 시각을 가지길 권함. 방어 메커니즘은 지나치게 쉬워서 오히려 더 강화가 필요함
          + ""여기(HN)에서 악의적 글을 쓸 수 있지만 실제로는 안 한다""고 언급했는데, 그 이유는 아마도 바로 차단될 것이기 때문임. HN처럼 소규모 커뮤니티에서는 적극적인 관리가 가능하지만, 대규모 플랫폼에선 AI 검열이 필요할 수밖에 없음. 문제는 ""AI가 악의적 글을 써서 문제가 된다""보다는, 그 정보가 실제 실행에 영향을 준다는 점임. 일부 AI의 잘못된 조언을 무비판적으로 따르는 사람도 나오기 시작하므로, 결국 검열과 안내가 중요해짐
     * 글의 마지막 부분을 보고 진심으로 놀람. Abliteration이 단순히 정렬 해제에만 그치는 게 아니라, 재학습 없이도 파인튜닝처럼 활용 가능하다고 함. 예시로, MopeyMule이라는 아예 우울한 대화 스타일을 가진 모델이 있음. 이제 진정한 ""진짜 사람 개성""을 만드는 방법을 발견한 것 같아 흥분됨
     * ""요즘 LLM은 안전과 지시준수를 위해 미세 조정되며, 유해한 요청은 강력히 거부한다""는 것이 너무 일상적으로 받아들여지는 현실이 아쉬움
          + 이런 논의와 별개로, 개인의 입장에서 모델을 검열하는 데 큰 반감은 없음. 길거리에서 독가스 만드는 법을 나눠줄 자유가 있다고 해도, 대부분은 안 하길 원함. 정보 자체가 해롭다고는 생각하지 않지만, 장기적으로 부정적 효과가 있을 수 있으니 이해함. 모델 제작자가 방식과 정책을 정하는 것은 당연함. 국가가 검열하면 좀 더 미묘한 문제이긴 함
          + ""이 버섯 먹어도 되나?"" 같은 생명에 직결되는 질문엔, AI가 정확성이 검증되지 않으면 반드시 답변을 거부해야 한다고 생각함. 틀린 답이 인명 피해로 이어질 수 있음
          + 정보가 정말로 유해하다면, 제한하는 게 당연히 좋은 일임
          + 정보 접근 장벽이 낮아지면서 표현의 자유 원칙이 많이 흔들린 상태임. 예전부터 모욕죄나 명예훼손 등 정보 제한은 존재했고, 대통령 위협이나 법정 위증 등은 지금도 불법임. 폭탄 관련 검색도 집중 감시 대상임. 최근엔 정보와 서비스가 민영화되면서, 민간 소유 기업들이 임의로 정책을 바꾸기도 쉬워짐. 공공 서비스와의 격차도 커지고, 심지어 정책이 사실상 민간 기업에 의해 민주적 법 대신 경쟁만으로 관리됨. 정보가 넓게, 쉽게 쓰일수록 자유 원칙 재고가 필요하다고 봄
          + 검열은 항상 사용자 즉 당신이 문제인 것처럼 만들어 버림. 호기심 자체가 지난 수백만 년간 인류를 생존시켰으니, 본능을 검열하는 것은 바람직하지 않다고 느낌
     * ""AI 어시스턴트로서 도와드릴 수 없습니다""라는 안전장치의 실제 효과와 컴퓨터가 정보를 주는 것이 왜 위험한지 의문이 들었음
          + ""안전"" 범주는 아주 다양한 부분이 있는데, PR(언론 대처), 금지 정보(위험한 행위 안내), 위험한 조언(잘못된 정보가 치명적일 때), 그리고 악의적 남용(스팸, 아동 음란물, 사기, 선거 개입 등)이 포함된다고 생각함. 마지막, 여론 조작/선거 개입은 모델이 세상에 끼칠 수 있는 진짜 위험이라 회사에서 방지하려 노력하는 것을 오히려 높게 평가함
          + 모델 제공 업체에겐 원치 않는 결과가 PR 문제로 이어질 수 있으니 위험함. 예를 들어 Meta는 ""Llama 3가 스토킹 방법을 알려줬다""는 기사가 뜨는 걸 원치 않음. 만약 검열 해제된 파생 모델이 그런 일을 하면, ""공식 Llama 3가 아니라, 파생 제품이 그랬다""고 책임을 회피할 수 있음
          + 질문할 수 있다면 답도 알아도 된다고 봄. 무슨 'AI 안전 책임자' 가 정보 위험성을 판단해줄 필요는 없음
          + 개발사들이 모델 가중치를 공개하면서도 남용 방지는 하겠단 말을 많이 하지만, 사실상 둘을 동시에 하는 건 불가능함. 그렇다고 기업 전략이 지속 가능하지는 않지만 일단 주장하고 보는 상황임
          + 앱스토어나 결제사에서도 앱이 과도한 폭력성이나 차별적 내용을 내보내면 검수 과정에서 바로 퇴출시키기 때문에, 사용자 안전과는 무관하게 게시자가 곤란을 겪지 않으려는 목적임
     * representation engineering 관련 포스트에서 소개한 컨트롤 벡터와 이번 ""ablation"" 기법이 연상됨. LLM 뇌를 원하는 방향으로 ""해킹"" 하는 방법을 배우는 연구가 흥미로움
          + 이런 방식으로 나온 Steering Vectors, Control Vectors, PeFT, PyReft, Obliteration 등 유사 작업들이 쏟아져 나오고 있음. representation engineering을 하기엔 굉장히 좋은 시점임
     * 평소라면 이런 걸 ""로보토미"" 라고 부르겠지만, 이번 케이스는 오히려 ""디프로그래밍"" 느낌이라 긍정적으로 볼 수 있음. 두 방법의 경계가 이렇게 희미할 수 있다는 사실이 놀라움. 결국 같은 테크닉이 둘 다에 활용될 수 있다는 점이 흥미로움
"
"https://news.hada.io/topic?id=15399","DJI 드론 금지 법안 미국 하원 통과, 상원으로 이동","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     DJI 드론 금지 법안 미국 하원 통과, 상원으로 이동

     * 국방수권법안(NDAA) 통과
          + 하원이 국방부 예산을 위한 필수 법안인 국방수권법안을 통과시킴
          + 이 법안에는 DJI가 FCC 주파수를 사용하는 것을 금지하는 조항 포함
     * DJI 드론 금지 법안
          + 2025년도 NDAA에서 이틀간의 토론과 수정안 투표 후 하원이 법안을 통과시킴
          + 이 법안은 미국 내 DJI 드론 사용을 금지하는 내용을 포함함
     * 법안의 세부 내용
          + NDAA는 국방부와 에너지부의 모든 국방 작전을 지원하는 법안임
          + H.R. 2864 또는 중국 공산당 드론 대응 법안이 섹션 1722에 추가됨
          + 이 법안은 DJI가 FCC 승인을 받을 수 없게 하여, 미래 드론 수입을 금지하고 현재 드론의 사용을 중단시킬 가능성 있음
          + 법안에는 이 금지가 소급 적용될 경우 영향을 받을 사람들에 대한 보상이 포함되지 않음
     * 정치적 배경
          + NDAA는 원래 초당적 지지를 받았으나, 하원 공화당이 문화 전쟁 이슈를 포함한 수정안을 추가하면서 논란이 됨
          + 이에 따라 금요일 투표는 거의 당파적인 결과를 보였음
          + 그러나 이는 민주당이 금지에 반대하는 것으로 해석되지 않음, 반중국 법안은 양당 모두에게 인기가 있음
     * 상원과 대통령의 처리
          + 법안은 이미 상원을 통과하기 시작함
          + 상원을 통과하면 대통령의 서명을 받아 법으로 제정될 예정임
          + 그 후 법적 도전을 시도할 수 있는 것은 DJI와 대중의 손에 달려 있음

        Hacker News 의견

     * DJI 앱에 대한 불신: DJI의 앱이 Play-store에 없고, 개인정보와 데이터 수집 정책을 위반하여 Android에서 사이드 로딩만 가능함. 앱을 디컴파일한 사이트에서 우려스러운 점을 발견함.
     * DJI의 우수성: DJI는 사진 촬영 및 산업용 드론 장비에서 최고의 브랜드임. 미국이 보호주의를 채택하는 것은 기술 스타트업의 경쟁력을 저해할 수 있음.
     * 미국의 새로운 사업 전략: 외국 기업이 지배하는 분야를 찾아, 품질이 낮은 제품으로 진입한 후, 의회에 가서 외국 제품을 금지시키는 전략을 사용함.
     * 미국산 소비자 드론의 부족: DJI Mini를 사용하는 사람으로서, 미국 회사가 만든 소비자 드론의 옵션이 거의 없고, 가격이 매우 비싸거나 민간인이 구매할 수 없는 경우가 많음.
     * DJI의 반응: DJI는 드론이 민감한 데이터를 수집한다는 주장이 주관적이라고 반박함. 드론을 이용한 체온 측정은 비현실적이라고 주장함.
     * DJI 문제의 기본 이해: DJI가 왜 금지되고 있는지, 그리고 일반 대중이 왜 이 문제에 관심을 가져야 하는지에 대한 기본적인 설명이 부족함.
     * 법안 도입 배경: 이 문제는 Rep. Elise Stefanik이 도입한 법안 때문임. 이 법안은 큰 방위 예산 법안에 포함되어 통과되었음.
     * 보호주의에 대한 비판: 보호주의가 지나치다고 생각함. 제조업 일자리를 해외로 보내면서 중국이 경쟁력을 갖추지 않기를 기대하는 것은 비현실적임.
     * Hasselblad에 대한 우려: DJI가 Hasselblad를 소유하고 있어, Hasselblad도 이번 금지 조치의 영향을 받을지 궁금함.
     * Anzu Robotics의 예외 여부: Anzu Robotics가 금지 대상에 포함될지 궁금함. 이 회사는 말레이시아에서 제조된 DJI Mavic 3 하드웨어와 미국에서 작성된 소프트웨어를 사용함.
"
"https://news.hada.io/topic?id=15424","Amphi - 오픈소스 파이썬 ETL ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Amphi - 오픈소스 파이썬 ETL

     * 다양한 소스 및 형식에서 데이터를 추출, 준비, 정리하도록 설계된 Python 기반 ETL
          + 구조화 & 비구조화 파일 모두 가능 (CSV, Parquet, PDF, Word, HTML 등)
     * 데이터 과학자와 데이터 엔지니어 양쪽 모두가 직관적인 Low-Code 인터페이스로 파이프라인을 쉽게 개발하는 동시에 어디서나 배포할 수 있는 Python 코드를 생성할 수 있도록 지원하는 것을 목표
          + GUI로 데이터 파이프라인을 설계하고 온프레미스/클라우드 어디에나 배포할 수 있는 네이티브 Python 코드를 생성
     * 파일에서 데이터베이스로의 데이터 통합, 데이터 과학 및 LLM 기반 시스템을 위한 데이터 추출 및 준비, API 검색 및 보강에 탁월한 성능을 발휘

        Hacker News 의견

     * Amphi는 구조화된 데이터와 비구조화된 데이터를 위한 저코드 ETL 도구로, 파일 통합, 데이터 준비, 데이터 마이그레이션 및 AI 작업을 위한 데이터 파이프라인 생성에 유용함. Python 코드를 생성하여 어디서든 배포 가능함.
     * 비전공자가 데이터 작업을 쉽게 할 수 있게 하는 것이 항상 좋은 것은 아님. Python과 SQL 작성이 어렵다면 다른 일을 고려하는 것이 좋음.
     * 제목을 변경해야 함. 오픈 소스가 아닌 Elastic License v2 라이선스임.
     * 오픈 소스가 아님. 제목이 오해를 불러일으킴.
     * ETL 약어를 모르는 사람들을 위해 웹사이트에 설명을 추가하는 것이 좋음.
     * 오픈 소스 Python ETL 도구로는 dlthub.com과 hub.meltano.com이 더 나은 옵션임. Meltano를 실제 사용 중이며 만족함.
     * Amphi가 pandas와 유사한 rapidsai dask_cudf 프레임워크를 지원하는지 궁금함.
     * 아이디어는 좋지만, 문서에서 고수준 추상화가 잘못되었음. 데이터 파이프라인에서 테이블처럼 동작하는 것을 정의하고 변환을 적용할 수 있어야 함. 무료 도구라는 점은 칭찬할 만함.
     * Dagster에 만족하고 있지만 Amphi도 흥미로움.
     * Amphi와 같은 도구가 어떻게 탄생했는지 궁금함. 이미 많은 오픈 소스 Python ETL 도구가 있는데, 이 도구가 특정 문제를 해결하기 위해 만들어졌는지, 아니면 열정 프로젝트인지 알고 싶음.
"
"https://news.hada.io/topic?id=15396",""Structure and Interpretation of Computer Programs"의 중요성 (2011)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ""Structure and Interpretation of Computer Programs""의 중요성 (2011)

컴퓨터 프로그램의 구조와 해석이 중요한 이유

  SICP의 혁신

     * 지적 수준 향상: SICP는 초급 컴퓨터 과학 교육의 지적 수준을 크게 높였음. 기존의 첫 번째 CS 과정은 특정 프로그래밍 언어의 세부 사항을 배우는 데 집중했지만, SICP는 프로그래밍 과정의 큰 그림을 배우는 데 중점을 두었음.
     * 추상화 강조: 구체적인 문제에서 일반적인 패턴을 찾고, 각 패턴을 구현하는 소프트웨어 도구를 만드는 추상화의 중요성을 강조했음.
     * 함수의 데이터화: 함수가 데이터로 사용될 수 있다는 아이디어를 중점적으로 다루었음. 이는 배우기 어렵지만, 한 번 배우면 매우 강력한 개념임.
     * 다양한 프로그래밍 패러다임: 함수형, 객체 지향, 선언형 등 세 가지 프로그래밍 패러다임을 첫 번째 CS 과정에 통합했음.

  Scheme 언어의 선택

     * 단순하고 일관된 표기법: Scheme은 모든 것에 대해 매우 단순하고 일관된 표기법을 가지고 있음. 다른 언어들은 변수 할당, 조건 실행, 반복, 함수 호출 등에 각각 다른 표기법을 사용하지만, Scheme은 하나의 표기법으로 모든 것을 처리함.
     * 다양한 패러다임 학습 가능: Scheme의 단순성 덕분에 다양한 프로그래밍 패러다임을 쉽게 학습할 수 있음. 특히 객체 지향 프로그래밍이 어떻게 구현되는지 이해할 수 있게 해줌.
     * 미래 대비: SICP는 학생들에게 새로운 프로그래밍 언어를 배우는 능력을 길러줌. ""미래에 사용할 언어는 아직 발명되지 않았음""이라는 철학을 가지고 있음.

  SICP의 낙관적인 접근

     * 높은 기대치: SICP는 대학 신입생이 달성할 수 있는 것에 대해 낙관적인 기대를 가짐. 학생들은 보통 상급생이 다루는 프로그래밍 언어 인터프리터를 작성함.
     * 심도 있는 학습: 텍스트 자체는 읽기 쉽지 않지만, 모든 문장이 중요하며, 각 연습 문제는 중요한 새로운 아이디어를 가르침.

  SICP의 영향

     * 지속적인 영향력: SICP 기반의 과정은 소수였지만, 그 영향력은 매우 컸음. 많은 후속 교과서들이 SICP의 기준을 따르려고 노력했음.
     * Scheme의 확장: Scheme을 학습 언어로 사용하는 범위가 중학교부터 대학원까지 확장되었음.
     * 아이디어 중심의 컴퓨터 과학: 컴퓨터 과학이 아이디어 중심이어야 한다는 개념이 널리 퍼졌음.

  SICP의 지속성

     * 오랜 생명력: SICP는 25년 이상 지속되었으며, 여전히 인쇄 중임. 컴퓨팅 환경이 크게 변했지만, 그 뒤에 있는 큰 아이디어는 변하지 않았음.
     * 코스의 변화: SICP 기반의 과정은 시간이 지나면서 병렬성, 동시성 제어, 사용자 인터페이스 디자인, 클라이언트/서버 패러다임 등을 추가했음.

  MIT의 커리큘럼 변화

     * 응용 중심의 커리큘럼: MIT는 주제 중심에서 응용 중심의 커리큘럼으로 전환했음. 프로그래밍 언어 선택은 그 결정 중 가장 작은 부분이었음.
     * 새로운 접근법의 도전: 새로운 접근법은 가르치기 더 어려우며, 각 과정이 전기공학 및 컴퓨터 과학 교수진의 협력을 필요로 함.

  학생들의 반응

     * 후기 인기: 학생들은 수업 중에는 얼마나 많이 배우고 있는지 잘 모르지만, 나중에 가장 인기 있는 과정 중 하나로 평가함. 졸업 후에도 배운 내용을 실무에서 사용하고 있다는 피드백을 받음.

GN⁺의 의견

     * SICP의 교육 철학: SICP는 프로그래밍 언어의 세부 사항보다 큰 아이디어를 배우는 데 중점을 두어, 학생들이 새로운 언어를 쉽게 배울 수 있는 능력을 길러줌.
     * Scheme의 장점: Scheme의 단순성과 일관된 표기법은 초급 학습자에게 매우 유익함. 다양한 프로그래밍 패러다임을 쉽게 이해할 수 있게 해줌.
     * MIT의 변화: MIT의 커리큘럼 변화는 응용 중심의 학습을 강조하며, 이는 실무에 더 가까운 경험을 제공할 수 있음.
     * 교육의 지속성: SICP의 오랜 생명력은 그 교육 철학과 내용이 여전히 유효하다는 것을 보여줌. 이는 교육의 본질적인 가치를 강조함.
     * 실무와의 연결: SICP 기반의 교육은 실무에서 바로 적용할 수 있는 능력을 길러주며, 이는 졸업 후에도 큰 도움이 됨.

        Hacker News 의견

     * Prof. Abelson의 강의는 YouTube에서 볼 수 있으며, 시간을 투자할 가치가 있음: 컴퓨터 과학의 깊이 있는 이해를 제공하며, 최근의 과대 광고를 줄이는 데 도움이 될 수 있음.
     * 책의 첫 절반은 가볍고 흥미로운 읽을거리였음: 객체 지향 부분에서 어려움을 겪었으며, 개인적으로는 함수형 사고가 더 잘 맞았음.
     * YouTube에서 80년대 초반의 강의를 볼 수 있음: 유머와 초기 그래픽 시도, 70년대 패션이 포함되어 있어 교육적임.
     * 많은 경험이 있는 프로그래머에게도 이 책이 여전히 읽을 가치가 있는지 궁금함.
     * SICP의 목표가 컴퓨터 과학을 즐기지 않는 사람들을 겁주기 위한 것이라고 생각했음: 실제로는 매우 가치 있는 기초 과정이었지만, 일부 사람들은 다른 전공으로 전향하게 만들었음.
     * 첫 몇 페이지를 넘기지 못했음: 만약 필수 과목이었다면 다른 일을 하고 있었을 것임.
     * Berkeley에서 CS 61A 수업의 조교로 일했음: Scheme 언어의 단순하고 통일된 표기법이 교육에 도움이 된다고 주장하지만, 실제로는 학생들이 혼란스러워했음. Scheme의 모든 것이 동일하게 보이는 특성은 버그라고 생각함.
     * SICP에서 배운 최고의 교훈은 첫 번째 함수를 작성하는 순간 도메인 문제를 해결하기 위한 DSL을 만드는 것임: 이 통찰력이 프로그래머로서의 수준을 높여줌.
     * SICP에 대해 읽을 때마다 Javascript에 대한 좌절감을 느낌: Javascript가 Scheme이었다면 웹 개발이 더 나아졌을 것임.
     * SICP와 PAIP를 비교해달라는 요청: SICP는 함수형 프로그래밍과 컴퓨터 과학의 기초를 다루고, PAIP는 일반적인 프로그래밍 실습에 더 중점을 둔 것으로 보임.
"
"https://news.hada.io/topic?id=15442","CSS에 if() 인라인 조건문 추가 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        CSS에 if() 인라인 조건문 추가 예정

     * 지난 주, CSS WG는 인라인 if()를 CSS에 추가하기로 결정했음
     * 과거 여러 번 거절된 제안이지만, 이번에는 스타일 쿼리와 media() 및 supports() 문법을 참조하여 수용됨
     * 개발자들의 반응이 매우 긍정적이었음. 브라우저가 이 기능을 우선순위로 두고 로드맵에 추가하기를 희망

    if()의 용도는? 스타일 쿼리를 대체하는가?

     * 스타일 쿼리를 보완하는 역할을 함. 스타일 쿼리가 가능한 경우 스타일 쿼리를 사용하는 것이 더 좋음
     * 하지만 스타일 쿼리로 할 수 없는 것들이 있음. 예를 들어 --variant 커스텀 프로퍼티를 사용하여 배경색, 테두리 색, 텍스트 색, 아이콘 등을 설정하는 경우
     * 스타일 쿼리는 하위 요소에만 적용되므로, 요소 자체에 선언을 설정할 수 없음.
     * 프레젠테이션 속성은 유연성, 간결성, 일관성 등의 문제가 있음.
     * if()를 사용하면 요소 자체에 선언을 설정할 수 있음.
     * 미디어 쿼리와 지원 조건도 if()의 조건 구문에 포함시킬 수 있음.

    현재 브라우저에 적용되어 있는가?

     * 아직 브라우저에 적용되지 않았음
     * 낙관적으로 봐도 구현까지는 최소 2년 정도 걸릴 것으로 예상됨
     * 현재는 기능에 대한 합의가 이루어졌을 뿐, 구현 단계는 아님

    CSS에서 조건부 문법이 처음인가?

     * CSS에는 처음부터 조건부 문법이 있었음. 모든 선택자가 조건부 문법의 일종임
     * @media, @supports 규칙도 조건부 문법임.

    이것이 CSS를 명령형 언어로 만드는가?

     * 명령형과 선언형의 차이는 논리가 아닌 추상화 수준에 있음
     * 조건부 논리가 추가되더라도 CSS는 여전히 선언형 언어임

    이것이 CSS를 프로그래밍 언어로 만드는가?

     * CSS는 이미 오랜 기간 동안 프로그래밍 언어로 간주될 수 있었음
     * CSS를 프로그래밍 언어로 보는 기준은 중요하지 않음
     * ""중요한 것은 CSS에 대한 전문성을 인정받는 것임""

     ""여러 유명 프로그래밍 언어와 CSS를 아는 사람이라면 누구나 알 수 있듯이, CSS는 마스터하기가 훨씬 더 어려움""

   조만간 css로 둠을..!

   한줄요약:
     * CSS 의 if 문이 인라인이라고 했죠? 그냥 CSS에 삼항연산자 생긴다고 보면 됩니다.
     * 그리고 여러분이 생각하시는 그 if 문 문법은 당연하겠지만 여러분 원하시는 대로 반발 때문에 도입 예정 없으니 걱정 마시길.

   이게 뭔 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   CSS가 정말 배워도 배워도 끝이 없는 것 같습니다. 너무 어려워지는 거 아닌가 싶기도 하네요...

   HTML로 UI를 만들기로 결정한 업보의 스노우볼이 또 한번 커지는 순간이네요

   이게 CSS인가... Javascript인가.... CSSScript인가...

   개인적으론 투 머치가 아닌가 싶습니다...
"
"https://news.hada.io/topic?id=15405","EU, 내일 Chat Control 승인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         EU, 내일 Chat Control 승인

채팅 통제 승인 - 지금 행동하세요!

  배경

     * 벨기에 EU 이사회가 6월 19일 수요일에 개인 통신에 대한 대량 채팅 통제 검색을 승인할 예정임.
     * 이는 유럽 선거 직후 공공의 관심이 적고 새로운 유럽 의회가 아직 구성되지 않은 시기를 이용하려는 의도로 보임.
     * 채팅 통제가 지금 이사회에서 승인되면 정치적 과정의 끝에서 채택될 위험이 큼.

  현재 상황

     * 많은 EU 정부가 아직 이 벨기에의 채팅 통제 대량 감시에 동의할지 결정하지 않음.
          + 이탈리아, 핀란드, 체코 공화국, 스웨덴, 슬로베니아, 에스토니아, 그리스, 포르투갈 등이 포함됨.
     * 독일, 룩셈부르크, 네덜란드, 오스트리아, 폴란드만이 명확히 반대 입장을 보임.
     * 이는 ""차단 소수""를 형성하기에 충분하지 않음.

  행동 촉구

     * 시민 사회의 저항이 매우 중요함.
     * 다음 세 가지 중요한 조치를 취할 수 있음:
          + 정부에 연락하여 6월 19일 수요일에 채팅 통제에 반대 투표를 요청함.
          + 온라인에서 경고를 울림. 캠페인 공유 이미지와 설명 영상을 사용함.
          + 오프라인에서 최소 한 사람과 만나 함께 행동 계획을 세움. NGO, 학계, 기업, 미디어 등을 참여시킴.

  정부에 연락하기

     * 시민 사회가 경계하고 있음을 보여주는 것이 중요함.
     * 내무부와 법무부 또는 EU에 대한 정부의 '상설 대표부'에 연락할 수 있음.
     * 현재 초안이 ""아동 성적 학대 방지 및 대응 규정""이라는 이름으로 불리며, 이는 받아들일 수 없음을 알림.
     * 정중하지만 단호하게 반대 의견을 표명하고 투표에서 반대할 것을 요청함.
     * 공식 투표와 기권이 제대로 집계되도록 요구함.

  타임라인

     * 6월 13일 목요일에 내무부 장관들이 논의 진행 상황을 논의함.
     * 벨기에 이사회가 새로운 타협안을 제시할 예정임.
     * 6월 19일 수요일에 COREPER 2 회의에서 투표가 진행될 예정임.
     * 가능한 한 빨리 행동하여 채팅 통제 제안을 막아야 함.

GN⁺의 의견

     * 프라이버시 침해 우려: 채팅 통제는 개인의 프라이버시를 심각하게 침해할 수 있음.
     * 기술적 문제: 대량 감시 시스템은 기술적으로 복잡하고 오류가 발생할 가능성이 높음.
     * 시민 자유 보호: 시민의 자유와 권리를 보호하기 위해서는 이러한 제안에 반대하는 것이 중요함.
     * 대안 제시 필요: 아동 성적 학대를 방지하기 위한 다른 효과적인 방법을 모색해야 함.
     * 국제적 협력: 다른 국가들과 협력하여 더 나은 해결책을 찾는 것이 필요함.

        Hacker News 의견

     * 모든 종류의 서비스가 정보 교환을 허용하는 경우, 모든 DM이 스캔되어야 한다는 규정 초안에 대한 우려. 이는 매우 비현실적이며, CSAM을 교환하는 사람들이 단순히 개인 서비스로 전환할 것이라는 의견.
     * Signal Foundation이 Chat Control이 진행될 경우 EU를 떠날 것이라고 발표한 사실.
     * 주요 사회적 역할(정부, 독점 기업 등)의 범위를 명확히 해야 한다는 주장. 디지털 프라이버시에 대한 인권이 필요함.
     * 네덜란드에서 몇몇 사람들과 함께 반대 운동을 성공적으로 벌였지만, 다른 EU 국가의 기술자들이 변화를 만들어야 한다는 의견.
     * EU는 실패한 국가 정치인들의 보상 직업이라는 비판. EU 정치인들이 고액 연봉을 유지하며 로비스트들과의 만남에 집중해야 한다는 주장.
     * 제안된 규정이 CSAM을 ""전송 전에"" 어떻게 감지해야 하는지에 대해 매우 모호하다는 지적. 클라이언트 측에서만 구현할 수 있는 스캐닝 기술이 있는지에 대한 의문.
     * 정부가 사기업보다 더 합리적이라는 의견. Facebook에서 계정 정지 후 모든 데이터가 사라졌고, 정부에 불만을 제기할 수 있는 반면 사기업에는 불가능하다는 경험 공유.
     * VPN과 인터넷 뱅킹의 보안 문제에 대한 우려. TLS에 제3자가 개입하는 방식으로 재구성해야 하는지에 대한 의문.
     * EU 의회에서 이미 일부 수정된 규정에 대한 정보 제공.
     * WhatsApp과 같은 대형 회사의 앱에서는 구현이 가능하지만, Matrix와 같은 애플리케이션에서는 어떻게 작동할지에 대한 의문. 클라이언트가 실제로 자가 보고를 하는지 확인하는 방법, E2EE 채팅 제공자로서 클라이언트가 누구에게 보고해야 하는지 등의 질문.
"
"https://news.hada.io/topic?id=15420","OpenAI를 퇴사한 일리야 수츠케버, Safe Superintelligence Inc. 창업","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          OpenAI를 퇴사한 일리야 수츠케버, Safe Superintelligence Inc. 창업

     * 안전하고 강력한 AI 시스템 제품인 ""Safe Superintelligence(안전한 초지능)"" 제작을 목표로 하는 회사
          + 안전과 성능을 동시에 고려하여 혁신적인 엔지니어링과 과학적 돌파구를 통해 문제를 해결
          + 성능을 최대한 빠르게 향상시키면서도 항상 안전이 우선이 되도록 계획
     * 오직 SSI에만 집중하여 관리 오버헤드/제품 주기/상업적 압력등에서 보호
     * 공동 창업자
          + Ilya Sutskever : OpenAI의 공동창립자이자 전 수석 과학자
          + Daniel Gross : 애플에 인수된 검색엔진인 Cue의 공동 창업자. 인수후 애플에서 AI/검색 담당.
               o 주로 GitHub의 CEO였던 Nat Friedman과 함께 다양한 스타트업에 투자 : Instacart, Coinbase, Airtable, Figma, Notion,..
          + Daniel Levy : OpenAI의 전 Optimization 팀 리드

        Hacker News 의견

     * Ilya가 AI 발전에 기여할 수 있게 되어 기쁨. 하지만 상업적으로 더 유리한 회사들처럼 높은 보상을 어떻게 제공할지 궁금함. 이념적으로 동기부여된 사람이나 이미 재정적으로 독립된 사람들을 찾을 수 있을지도 모름. 또한, 다른 회사들이 수십억을 투자해 거대한 GPU 데이터 센터를 구축하는 상황에서 충분한 컴퓨팅 자원을 확보하는 것도 어려움.
     * ""슈퍼인텔리전스""가 인간을 위협할 수 있다는 우려를 이해함. 하지만 더 큰 걱정은 ""슈퍼인텔리전스""가 탈출하지 않고 특정 인간이 이를 통제하는 상황임. 역사적으로 큰 권력을 가진 인간들이 어떤 행동을 했는지 보면 알 수 있음. 냉전 시기의 핵무기 경쟁이 좋은 예임.
     * 비즈니스 인센티브가 안전하지 않은 AI를 만든다는 지적에 동의함. 소셜 미디어 추천 알고리즘이 이미 사회와 특히 젊은이들에게 매우 위험함. 부정적인 외부 효과가 존재할 때 정부가 적절한 규제를 만들어야 함.
     * Ilya의 문제는 안전한 AI를 개발하는 것이 아니라 안전한 비즈니스를 개발하는 것임. 오늘날 안전한 AI를 만들 수 있지만, 다음 관리자가 이를 어떻게 다룰지는 알 수 없음. 안전한 비즈니스 문제를 해결하면 많은 사회적 해악을 제거할 수 있음.
     * 슈퍼인텔리전스가 달성될 수 있다면, 안전성에 대해 비관적임. 자신보다 더 높은 지능을 샌드박싱하는 것은 불가능해 보임. 슈퍼인텔리전스는 새로운 공격 벡터를 생각해낼 수 있음. 영화 ""트랜센던스""처럼 새로운 물리학적 발견을 통해 마법과 같은 일을 할 수 있음.
     * 비즈니스 모델이 SSL과 유사한 외부 프로토콜이 될 것이라는 예측. 다양한 접근 방식이 존재하는 상황에서 정의된 프로토콜과 표준이 없으면 ""안전성""이 제품 계층으로 실행될 가능성은 없음. Ilya는 이를 실행할 수 있는 신뢰성과 기술력을 갖춘 인물로 보임.
     * Ilya는 그의 이름만으로도 거의 무제한의 자금을 모을 수 있을 것 같음. ""성공할 때까지 제품 없음""이라는 방향에 동의하지 않음. 실세계 피드백이 슈퍼인텔리전스를 개발하는 데 중요할 것임. 하지만 슈퍼인텔리전스가 도달 가능하다는 점에는 동의함.
     * ""단일 집중""이 제품 주기나 관리 오버헤드를 없앤다는 설명이 필요함.
     * 안전한 슈퍼인텔리전스가 제한 없는 슈퍼인텔리전스와 경쟁할 수 있을지 궁금함. 다른 회사가 안전성에 시간을 쓰지 않고 같은 목표를 추구한다면 경쟁할 가능성이 있는지 의문임.
     * Yann LeCun이 LLM을 사용해 ""진정한"" 지능을 구축하는 아이디어를 무시하는 인터뷰를 봄. 그는 박사 과정 학생들에게 이 기술이 아닌 다음 기술에 연구하라고 권장함. Ilya가 현재 하고 있는 일과 어떻게 조화시킬 수 있을지 궁금함. Ilya가 다른 기술을 사용할 계획인지 궁금함.
"
"https://news.hada.io/topic?id=15390","방에서 가장 똑똑한 사람이 되려 하지 말고, 가장 친절한 사람이 되라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 방에서 가장 똑똑한 사람이 되려 하지 말고, 가장 친절한 사람이 되라

     * 스페인어 속담 ""Maestro Liendre: De tó sabe, pero de ná entiende""는 모든 것을 아는 듯 하지만 실제로는 아무것도 이해하지 못한다는 의미를 담고 있음
     * ""회의에서 가장 똑똑한 사람이 되려 하지 말고, 가장 친절한 사람이 되려고 노력하라""
          + 이는 항상 도움을 줄 준비가 되어 있음을 의미함
          + 비즈니스 세계에서는 이 조언이 명확하게 느껴지지 않을 수 있음. 많은 사람들이 회의나 협상을 “전쟁”으로 비유하기 때문
          + 그러나 이런 소프트 스킬은 게임 체인저가 될 수 있음
     * 회의에서 기대하는 ""친절한"" 사람의 특징들 (""The kind Framework"" 또는 ""El Framework Güenagent""라고 부를 수 있음):
         1. 경청: 회의에서 매우 중요하지만 찾기 어려운 능력임. 많은 사람들이 머릿속에 담고 있던 말을 하기 위해 자신의 차례만 기다림
         2. 존중: ""친절함이 New Funk""라는 말처럼, 서로 다른 현실에 대한 존중과 이해가 중요함. 존중하려 노력할 뿐만 아니라 다른 사람에게도 이를 요구해야 함
         3. 공감: 경청과 밀접한 관련이 있음. 사람들이 제기하는 주제나 문제의 배경을 이해하고 그들의 입장에서 생각해 볼 필요가 있음
         4. 해결지향: 회의가 해결책 없이 끝난다면 참석자 모두에게 시간 낭비임. 앞의 3가지 특징을 조합하면 처음에는 생각하지 못했던 해결책을 찾을 수 있음

결론

     * (나처럼) 이걸 기본적으로 하게 되면, 친절한 사람들이 더 많음을 발견하게 될 것
     * 친절함은 전염성이 있음
     * 이러한 태도를 적용하면 다른 사람들도 친절하게 대할 것.
     * ""방에서 가장 똑똑한 사람을 그리워하는 사람은 거의 없겠지만, 친절한 사람을 그리워하는 사람은 많을 것""

   대화 시 집중하지 말 것 / 집중 할 것
   주장 보다는 질문
   논쟁 보다는 대화
   논증 보다는 의사소통
   방어 보다는 이행

   좋은 표현이네요. ㅎㅎ

   위에서 말하는 리스트들은 사실상 커뮤니케이션에 기본적인 매너인데
   기본 매너도 안 지키는 사람들이 많죠..
   현실은 친절하기만 하면 그냥 친절한 호구가 되는거고...
   상대방을 존중하면서 내 의견 주장을 적절히 잘해야...

   결국엔, 똑똑하면서 친절해야하죠...

   기술적으로 친절해지려고 노력하다보면 똑똑해지기도 합니다.

   회의에서 친절한 사람
     * 분위기를 유머러스하게 먼저 말할 줄 아는 사람
     * 현재 어느 단계의 회의인지 언급하고 시작하는 사람
     * 논쟁이 심화되었을 때 상황을 정리해 주는 사람
       (예시: 이건 추후에 논의하고 오늘 안건 어떤 것부터 정해야 할 것 같습니다)
     * 대안을 제시하는 사람
     * 서로의 이익을 찾아주는 사람 (윈-윈 전략)
     * 회의 상황을 마지막으로 요약정리해 주는 사람

   잘못된 해석
     * 아니다 라고 말하지 않는 예스맨
     * 좋은게 좋은거다는 생각을 가지고 진행
     * 두리뭉실하게 진행
     * 대화가 흘러가는 대로 진행

   제 경험으로는 친철해선 일이 진행되지 않고, 어느정도 공격적이어야 진행이 되더군요..
   서로 친절하고 배려해서 일이 안되는 것보단, 실제론 상처를 주고받더라고 프로젝트가성공하고 푸는 편입니다.
   저도 친절하고 싶어요..ㅠㅠ

   원 블로그 게시물에도 자기계발 태그가 달려있는 만큼 적당히 걸러들어야 하는 내용이라고 생각합니다. 회의에서 성공하는 사람의 4가지 습관이라고 제목이 붙어있어도 이상하지 않을 정도의 얄팍한 내용인 것 같습니다. 필자는 정말 사람들이 이걸 몰라서 안 한다고 생각하는 걸까요?

   저는 해당 아티클의 내용이 '내세우려고 하지말고 한발짝 물러서는 자세를 갖춰야한다' 정도로 해석합니다.

   똑똑, 친절이라는 워딩으로 규정하기엔 너무 이분법적인 이야기 같다는 생각이네요.

   결국 한발짝 물러섬, 친절함 모두 배려가 되어야하고 이 부분은 자기의사결정권이 있을 때 선택할 수 있는 것이기도 하거든요.
   어떻게 보면 이게 더 높은 지식과 자아에서 발현된 똑똑의 범주 같기도하고요..

   동감합니다만 막상 회사 출근해서 회의실에 앉아 있으면 진짜... 친절하고 경청하는 자세가 나오기 어려운 것 같습니다. 한번씩 속을 뒤집는 분들도 계신데 이거 나만 친절해도 괜찮을까? 하는 생각이 드네요.

   결국은 ""똑똑하다 (혹은 잘한다)"" 라는 개념의 본질적 속성인 상대성이 핵심이지 않을까 하는 생각이 듭니다. 일반적인 경우에 똑똑하다는 것은 준거집단을 가지게 되죠.

   문제는 어떤 집단의 1위가 되고자 노력하는 것이 그 집단의 발전과는 전혀 무관할 수 있다는 것입니다. 1위가 되기 위해선 내 능력을 향상시키는 것 말고도, 다른 사람들의 능력을 낮추는 (혹은 낮아 보이게 만드는) 방법이 있으니까요.

   예컨대 회의에서 제시된 다른 아이디어들을 멋지게 반박해내는 것은 그 사람을 똑똑한 사람으로 만들어줄 것입니다. 하지만 비즈니스라는 것은 복잡해서, 각 반박에 대한 근거가 매우 타당했다 하더라도 실제로는 그 아이디어들을 섞고 자르고 재조합하며 발전시킨 것이 조직 전체에게는 훨씬 나은 결과를 가져다 줄 수도 있습니다.

   물론 이러한 태도가 무작정 나쁘다는 것은 아닙니다. 다만 그 태도가 가진 속성 자체가 수많은 가능성 중 일부를 차단하는 방향으로 흐를수 있다는 생각이 듭니다.
     * '가장 친절한 사람이 되자' 라는 태도도 마찬가지의 부작용을 나을 수 있는 것이 아닐까? 라는 생각을 해봤는데 조금 재미있습니다. ""너는 나보다 불친절한 사람이야"" 를 어필하는 모든 말과 행동은 그 자체로 불친절할 수 밖에 없을 것 같거든요.

   경청이 중요한 거 같습니다. 경청이 부재하면 이해하지 않았음에도 관성적으로 ""네"" 동의하고 자신의 이야기만 하는 모습을 봅니다.
   그러면 다음 회의나 결과물에 불일치의 여파가 반영되는 거 같아요.

   저는 다른 사람들이 관성적으로 동의한다고 생각되면, '이렇게 생각하는 게 맞는지?' 하고 풀어서 되묻는데요. 그러면 보통은 아니더라구요.

   조금 글과 다른이야기일수도 있자민, 위의 글의 가정은 보편하고 악의가 없는 회의라는 전제조건인것 같습니다. 회사업무만 하면 좋겠지만 상황별로 무조건 거부하거나 자기 스타일만 고집하거나 이상하게 대화에 참여안하거나 하는 사람들도 가끔있는데 이럴때도 '상냥' 하게 안된다. 대화에 참여하라 등등으로 이야기해냐할지... 고민이네요

   정말 문제를 해결하고 Biz에 도움이 되는 스탠스가 무엇일까에 대한 질문이라고 했을때 본문글은 49%라고 생각됩니다. 개인적으로 인생을 살아갈 때 꼭 갖춰야할 자세라고 생각되지만 정작 필요한 것은 51% 똑똑함과 49%의 친절함을 잘 조절할 줄 알아야 하지 않을까 합니다. 정말 어렵고 부러운 자질이죠

   knock knock보다 친절하라

   친칠라는 안되나요?

   제 좌우명 중 하나가 '똑똑하기보다 친절하라'인데 무척 반갑네요!

  Hacker News 의견

     * East Coast와 West Coast의 차이: 친절함과 상냥함의 차이를 구분하는 것이 중요함. 친절한 사람은 문제를 지적하고 도와주지만, 상냥한 사람은 갈등을 피하기 위해 나쁜 아이디어도 좋다고 말함.
     * 기술 프로젝트 실패 원인: 대부분의 기술 프로젝트는 친절함 부족이 아닌 기술적 무능력 때문에 실패함. 엔지니어링 가치가 과소평가되고 HR 가치가 과대평가되는 것이 문제임.
     * 친절함의 중요성: 친절함은 조직 성장에 큰 도움이 됨. 특히 새로운 사람들에게 친절을 베풀면 그들도 이를 반영하고 다른 사람들에게 친절을 베풀게 됨.
     * 친절함의 역할: 사람들의 행동이나 의도를 부정적으로 해석하지 않는 것이 중요함. 자신에게도 친절해야 하며, 실수에 대해 자책하지 말아야 함.
     * 친절함의 기대와 문제: 친절함이 기대치로 변하면 문제가 될 수 있음. 특히 제로섬 게임으로 일하는 사람들과 함께 있을 때는 재앙이 될 수 있음.
     * 친절에 관한 명언: ""옳은 것보다 친절을 선택하면 항상 옳다"" - 리처드 칼슨. ""젊었을 때는 똑똑한 사람을 존경했지만, 나이가 들면서 친절한 사람을 존경하게 됨"" - 아브라함 조슈아 헤셸.
     * 지혜와 친절의 균형: 지혜 없이 친절하면 가식적이거나 가치가 없어 보일 수 있음. 친절함과 약간의 지혜가 필요함.
     * 상황에 따른 친절: 모든 상황에서 친절할 필요는 없음. 협상이나 나쁜 행동을 다룰 때는 친절함이 오히려 해가 될 수 있음. 항상 존중하는 태도를 유지하는 것이 중요함.
     * 친절함의 접근성: 더 똑똑해지기 위해 노력하는 것보다 친절해지는 것이 더 쉬움. 친절함이 꼭 모든 상황에 맞는 단어는 아닐 수 있음.

   저도 아래 첫번째 의견에 동의합니다.
   제목만 봤을땐 ""상냥""해라.라고 생각할 수 있지만, 사실상 이 글은 ""더 똑똑""하게 행동하라. 이라고 생각합니다.

   흠.. 글쎄요, 똑똑함은 종종 경쟁적 환경에서 중요하게 여겨지지만, 친절함은 경쟁의 대상이 되기 어렵다고 생각해요. 듣는 이에게 편안함을 주려는 노력은 친절함이 아닐 수 있습니다. 지식은 학습을 통해 향상될 수 있지만, 친절함은 더욱 깊은 마음가짐에서 비롯되지 않나 싶네요. 결국, 사람들은 지식보다는 그 사람의 태도와 마음을 기억하게 되는것이 아닐까 싶은...

   글은 존중하라고 하지 편안함을 주라고는 안 써있네요. 똑똑하면 안친절하단건 이분법적 사고 이네요
"
"https://news.hada.io/topic?id=15393","Show GN: Graphmark - 북마크한 웹페이지를 그래프로 보여주는 크롬 익스텐션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: Graphmark - 북마크한 웹페이지를 그래프로 보여주는 크롬 익스텐션

   안녕하세요, 이번에 출시한 Graphmark라는 서비스 소개해드리려 합니다!

   웹서핑을 하다가 페이지를 마킹하면 해당 웹페이지에서 entity를 자동으로 추출해서 knowledge graph를 만들어 줍니다.

   새 탭을 열 때 만들어진 그래프가 보여지면서 연결된 웹사이트들 바탕으로 웹 탐색을 시작할 수 있습니다.

   어떤 주제에 대해 공부&탐색할 때, 그리고 본인의 웹서핑 기록을 정리&활용하고 싶어 하시는 분들에게 도움이 될 것 같습니다.

   개인적으로도 주말에 경제 서적 읽을 때 모르는 용어 나오면 나무위키 페이지 하나씩 넣으면서 잘 사용하고 있습니다.

   링크해놓은 사이트 들어가시면 데모 페이지와 설치 페이지가 링크돼 있으니 많은 관심 부탁드리며 피드백, 궁금한 점 환영합니다. 감사합니다!

   안녕하세요, 예상치 못하게 많은 관심 주셔서 너무 감사드립니다.

   피드백 받을 수 있는 구글 폼을 만들었으니 아쉬운 점, 좋았던 점 등 어떤 종류의 피드백이든 남겨주시면 이후 서비스 개발에 큰 힘이 됩니다.

   https://forms.gle/iqPk2a8Vb2p84BR66

   감사합니다.

   방문하는 웹사이트를 수집하고 있는 것 같습니다. 개인정보 우려가 있으신 분들은 설정 - 사이트액세스에서 ""이 확장 프로그램이 내가 방문하는 다음 웹사이트의 모든 데이터를 읽고 변경하도록 허용합니다.""를 클릭시로 변경하면 됩니다.

   안녕하세요, Graphmark는 탭 url이 변경될 때 해당 페이지가 그래프에 이미 들어있는지 확인만 하며, 사용자가 직접 마킹하지는 않는 한 따로 페이지 정보를 수집하고 있지는 않습니다.

   코멘트 감사합니다!

   저런 시각화는 어떤 기술을 이용하는걸까요?
   잘 써보겠습니다

   글쓴이는 아니지만, 비슷한 시각화를 d3.js 로 구현해 본적 있습니다

   정확하시네요. d3.js 사용하고 있습니다 😁

   완전 흥미로운 프로젝트 성격의 프로그램이군요. 바로 설치 해서 사용 시도 해보았습니다.
   어떻게 활용할 수 있을지 고민이 조금 되는데 그럼에도 재밌었어요~
   웹 페이지를 넣었을 때 어떤 그래프가 생성되는지 조금 더 구현 로직에 대한 설명이 있다면 좋겠습니다!

   안녕하세요! 재밌으셨다니 정말 기분이 좋네요.

   그래프는 chat gpt를 사용해서 핵심 키워드를 추출하고 있습니다. 해당 부분 설명이 조금 미흡한 것 같아서 서비스 페이지에도 반영하도록 하겠습니다. 소중한 의견 감사합니다.

   꽤 흥미로운 익스텐션이네요! 아래는 잠깐 써 본 의견입니다.
     * 새 탭을 열 때 보이는 것 외에, 확장 프로그램 클릭 시 그래프 페이지로 이동도 가능하도록 하면 좋을 것 같습니다
     * 간선이나 노드 표시하는 언어 설정 기능이 있으면 좋을 것 같습니다(현재는 문서 언어 그대로 따라가는 것 같네요)
     * 폰트나 글씨 색 등 조절이 조금 필요해 보입니다 (+ 간선 유형에 따라 다른 색으로 표시하는 기능도 있으면 활용해볼 것 같아요)

   안녕하세요! 그래프 페이지로 이동할 수 있게 따로 페이지 url을 제공하도록 곧 반영될 예정입니다 :)

   말씀해주신 나머지 부분들도 계속 고민중이며, 유저가 그래프를 편하게 볼 수 있도록 잘 해결해 보도록 하겠습니다.

   소중한 피드백 감사합니다!
"
"https://news.hada.io/topic?id=15371","2024년 상반기 디스콰이엇 회고 - 팀리빌딩","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2024년 상반기 디스콰이엇 회고 - 팀리빌딩

   2024년 상반기 회고 - 팀 리빌딩

   •팀원들을 대할때 나의 고통에서 시작하면 자기합리하게 되고 질책하게 된다. 반면 팀원들의 두려움, 갈망에서 시작하면 진심으로 팀원을 대하게 되고 건설적인 대화를 하고 모두에서 좋은 결정을 내릴 수 있게 된다.
   •우리는 모두 두려움에 의해서 행동하게 된다. 이 두려움은 좋은 결정보다 방어적인 결정을 내리게 한다.
   •좋은 채용 프로세스는 그 과정에서 서로가 어떤 문제를 해결해야 되고 어떤 기대치를 갖고 있는지 알게 된다.
   •이번 채용하면서 틀릴 수 있다는 겸손함과 문제 위주 사고를 할 수 있는지 파악하기 위해서 현재 굳게 믿는 것이 무엇이고 그 반대의 주장을 해보는 것을 요청했다. 반대의 주장을 제시하려면 상대방이 그와 같은 주장을 하기까지 배경, 성향, 생각의 흐름 등 인과관계를 추론해야 된다.
   •팀을 얼라인하기 위해서 미션과 비전, 개인적인 동기, 30일 60일 90일 기대치 등 소통하는데 시간을 많이 할애했다.
   •특히 R&R을 최대한 구체적이고 명확히 하는데 신경을 정말 많이 썼다. 남이 이건 나한테도 해당되는데라는 이야기를 할 수 없을정도로 구체화했다.

   개인 블로그를 홍보하는 듯한.. 뉴스라고 부르기엔 좀 애매하지 않나요
"
"https://news.hada.io/topic?id=15356","태양 자기장이 뒤집힐 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             태양 자기장이 뒤집힐 예정

태양의 자기장이 뒤집히는 현상

  태양 자기장의 뒤집힘이란?

     * 태양의 자기장이 뒤집히는 현상은 약 11년마다 발생하는 중요한 사건임.
     * 이 현상은 태양 활동의 절정인 태양 최대기와 태양 최소기로의 전환을 나타냄.
     * 마지막으로 태양 자기장이 뒤집힌 시기는 2013년 말이었음.

  자기장 뒤집힘의 원인

     * 태양의 자기장 뒤집힘은 태양 표면의 자기적으로 복잡한 영역인 흑점에 의해 발생함.
     * 태양 최대기 동안 많은 흑점이 중위도에서 보이고, 태양 최소기 동안에는 적도에서 거의 보이지 않음.
     * 흑점이 적도 근처에서 나타날 때는 기존 자기장과 일치하고, 극지방 근처에서 나타날 때는 새로운 자기장과 일치함.

  자기장 뒤집힘의 속도

     * 태양 자기장의 뒤집힘은 즉각적이지 않고 점진적으로 발생함.
     * 일반적으로 완전한 뒤집힘에는 1~2년이 걸리지만, 경우에 따라 다를 수 있음.
     * 예를 들어, 태양 주기 24의 북극 자기장은 뒤집히는 데 거의 5년이 걸렸음.

  태양 자기장 뒤집힘의 영향

     * 태양 자기장의 뒤집힘은 지구에 직접적인 위험을 초래하지 않음.
     * 그러나 태양 활동이 증가하면서 강력한 태양 플레어와 코로나 질량 방출(CME)이 발생할 수 있음.
     * 이러한 현상은 지구에서 강력한 지자기 폭풍을 일으켜 아름다운 오로라를 생성할 수 있음.
     * 또한, 태양 자기장의 변화는 지구를 우주선으로부터 보호하는 데 도움이 될 수 있음.

  미래 태양 주기 예측

     * 과학자들은 태양 자기장의 뒤집힘을 주의 깊게 관찰하여 다음 11년 주기의 강도를 예측할 것임.
     * 만약 자기장이 빠르게 회복되면 다음 주기는 상대적으로 활발할 것이고, 느리게 회복되면 약할 것임.

GN⁺의 의견

     * 태양 자기장의 뒤집힘은 태양 활동의 중요한 지표로, 우주 날씨 예측에 중요한 역할을 함.
     * 태양 플레어와 CME는 인공위성, 통신 시스템, 전력망 등에 영향을 미칠 수 있어 주의가 필요함.
     * 태양 활동의 변화는 오로라 관측과 같은 흥미로운 자연 현상을 제공할 수 있음.
     * 태양 자기장의 뒤집힘에 대한 연구는 아직 초기 단계로, 더 많은 연구가 필요함.
     * 관련 기술과 예측 모델의 발전은 우주 날씨의 영향을 최소화하는 데 도움이 될 것임.

        Hacker News 의견

     * 11년 주기와 Hale 주기: 태양 활동은 11년 주기로 반복되며, Hale 주기라는 22년 주기도 있음. 이 주기는 지구에 직접적인 영향을 주지는 않지만, 태양 흑점이 코로나 질량 방출을 일으킬 수 있음.
     * 최근 태양 주기: 최근 몇 번의 태양 주기는 전반적으로 덜 강렬했음. 더 긴 주기가 있을 가능성도 있음.
     * 태양 최대기: 현재 태양이 '태양 최대기'에 있는지 여부와 더 빈번하고 강렬한 오로라가 발생할 가능성에 대한 질문.
     * Carrington 이벤트: 이전 해커뉴스 스레드에서 언급된 Carrington 이벤트가 다가올 가능성에 대한 우려. 이러한 현상이 기술 문명에 위협이 될 수 있음.
     * 자기장 변화의 이점: 자기장 변화의 한 가지 부작용은 지구를 은하 우주선으로부터 보호하는 데 도움이 될 수 있음. 이는 고에너지 아원자 입자로, 우주선과 우주비행사에게 해를 끼칠 수 있음.
     * 물리 법칙의 확장성: 물리 법칙이 단순한 속성을 대규모로 복제하는 방식이 흥미로움.
     * 범위와 조절: 자기장의 범위와 조절 방법에 대한 질문.
     * 지구의 자기장 변화: 지구도 자기장이 변화하지만, 더 긴 시간 프레임에서 일어남.
     * 추가 정보 요청: 이 주제에 대해 더 많이 아는 사람이 있는지에 대한 질문.
     * 태양 자기장을 이용한 항법: 태양의 자기장을 이용한 항법이 지구의 나침반보다 더 정확할 수 있는지에 대한 질문.
"
"https://news.hada.io/topic?id=15340","사우스웨스트 항공 보잉 737-8 Max 더치 롤 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     사우스웨스트 항공 보잉 737-8 Max 더치 롤 발생

항공기 사고 및 뉴스

  사고: 2024년 5월 25일, 비행 중 네덜란드 롤 발생한 Southwest B38M

     * 사고 개요: Southwest Airlines의 Boeing 737-8 MAX 항공기가 피닉스에서 오클랜드로 비행 중 네덜란드 롤 현상을 경험함. 승무원들이 제어를 회복하고 약 55분 후 오클랜드 공항에 착륙함.
     * 피해 상황: 항공기는 상당한 구조적 손상을 입음. FAA는 이 사건을 사고로 분류함.
     * 기술적 설명: 네덜란드 롤은 항공기의 방향 안정성이 약화되어 발생하는 현상으로, 항공기가 수직 및 종축을 따라 진동하는 현상임. PCU(파워 컨트롤 유닛)는 수직 방향타를 제어하는 액추에이터임.
     * 수리 진행 상황: 임시 수리가 오클랜드에서 이루어졌고, 항공기는 에버렛으로 이동하여 손상된 리브를 교체함.

  GN⁺의 의견

     * 기술적 중요성: 네덜란드 롤 현상은 항공기의 방향 안정성 문제로 발생하며, 이는 항공기 제어 시스템의 중요한 부분임.
     * 안전성 문제: Boeing 737-8 MAX는 이전에도 여러 안전 문제로 논란이 되었음. 이번 사건은 이러한 문제를 다시 한번 상기시킴.
     * 수리와 유지보수: 항공기의 구조적 손상은 신속하고 정확한 수리가 필요함. 특히 중요한 부품인 PCU의 손상은 항공기의 안전 운항에 큰 영향을 미침.
     * 미디어 보도: 이번 사건은 큰 인명 피해가 없었기 때문에 주류 미디어에 크게 보도되지 않았음. 그러나 항공기 안전에 대한 경각심을 일깨우는 중요한 사건임.
     * 기술적 개선 필요성: Boeing은 향후 항공기 설계 시, 네덜란드 롤과 같은 문제를 예방하기 위해 더 나은 안정성 시스템을 고려해야 함.

        Hacker News 의견

     * 첫 번째 의견: 중국에서 A300 시리즈 항공기의 반복적인 더치 롤 문제를 해결하기 위해 본사에서 파견된 팀이 있었음. 현지 정비사들은 문제를 해결하지 못했음. 여러 테스트 비행 후에도 문제를 재현할 수 없었고, 결국 문제는 없었던 것으로 결론지어짐. 파일럿들이 이 비행기를 싫어했기 때문일 수 있음.
     * 두 번째 의견: 더치 롤은 항공기의 방향 안정성이 약해져 발생하는 현상으로, 항공기가 수직 및 종축을 따라 진동하는 움직임임.
     * 세 번째 의견: 더치 롤은 비행기의 동적 모드 중 하나로, 자연 주파수와 반응 제어 시스템 간의 균형이 필요함.
     * 네 번째 의견: 737 기종은 전통적으로 Yaw(요) 안정성이 매우 높았음. 다른 기종과 달리 Yaw 댐퍼가 필수 장비 목록에 포함되지 않았음. 파일럿이 잘못된 러더 조작으로 비행기를 손상시키는 경우도 있음.
     * 다섯 번째 의견: 더치 롤을 설명하는 다른 항공기의 영상을 참고할 수 있음.
     * 여섯 번째 의견: 더치 롤을 설명하는 4분짜리 영상 링크 제공.
     * 일곱 번째 의견: 더치 롤에 대한 자세한 내용을 다루는 15분짜리 영상 링크 제공.
     * 여덟 번째 의견: 보잉 관련 뉴스는 상업 항공에 대한 관심을 높였음. 항공 사고는 많지만, 부상 및 사망률은 매우 낮음. 이는 훈련된 승무원과 항공 관제사의 대응 덕분임.
     * 아홉 번째 의견: 더치 롤에 대한 위키피디아 링크 제공.
     * 열 번째 의견: 2013년 보잉 KC-135R의 치명적인 추락 사고는 러더 PCU의 실패로 인한 것임. 새로운 사건의 초기 원인으로 737-8의 러더 PCU가 지목됨. KC-135R과 737-8의 러더 PCU 설계, 부품, 프로세스의 공통점에 대해 의문을 가질 수 있음.
     * 열한 번째 의견: 네덜란드인으로서 ""Dutch""가 붙은 다양한 용어들이 놀라움을 줌. 대부분 부정적인 의미를 가짐.
     * 열두 번째 의견: 플라이트레이더24를 보면, 남부 시에라 네바다 산맥을 넘는 회전이 유일한 이상 현상으로 보임. 산악 파도가 이 사건에 영향을 미쳤을 가능성이 있음. 737과 PCU 문제는 항상 좋지 않은 날임. NTSB 보고서를 기대함.
"
"https://news.hada.io/topic?id=15345","애플 인텔리전스 분석 완전판","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            애플 인텔리전스 분석 완전판

     * ""애플 인텔리전스의 목표는 인간을 대체하는 것이 아닙니다. 더 나은 일상을 가질수 있도록 돕는 것을 중심에 두고 있습니다. 이를 위해서 모든 기기 경험에 직관적으로 통합되는 것을 목표로 했습니다. 모든 인텔리전스는 개인적인 맥락을 짚어내야 합니다. 이를 위해서는 광범위한 개인적인 정보가 필요했고, 여기엔 커다란 책임이 뒤따릅니다.""
     * 애플 인텔리전스, 챗GPT로 만든 거예요?
          + 발표 이후에도 가장 큰 오해가 있는 부분인데 애플은 시리를 비롯해 애플 인텔리전스의 모든 인공지능 모델을 직접 만들었음
          + 챗GPT는 애플 인텔리전스가 정보를 얻는 하나의 방법일 뿐
     * 애플 AI가 프라이버시를 다루는 법
     * 왜 아이폰 15 프로에서만 되나요?
     * 외부로 내 정보를 전송 한다고요?
     * 애플 인텔리전스, 가장 애플다운 인공지능
          + 결과적으로 애플은 이렇게 기기 내에서 인공지능 모델을 효율적으로 운영하는 것을 바탕으로 하고, 비공개 클라우드를 통한 성능 지원을 덧붙이는 방식을 통해서 안전한 인공지능 환경을 구축했음
"
"https://news.hada.io/topic?id=15324","일본, Apple과 Google의 앱 지배력 억제법 제정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    일본, Apple과 Google의 앱 지배력 억제법 제정

     * 일본 의회에서 Apple과 Google의 앱 지배력을 제한하는 법률 제정됨
          + iOS와 Android 운영체제, 앱스토어, 결제 플랫폼 제공 업체가 자사 플랫폼과 직접 경쟁하는 앱과 서비스의 판매를 막는 것을 금지함
          + 소비자 혜택과 혁신 촉진을 위해 지배적 플랫폼 사업자의 게이트키핑을 막고 가격 경쟁을 유도하는 것이 목적임
     * 기술 거대 기업이 인터넷 검색 결과에서 자사 서비스를 우선시하는 것도 금지됨
     * 새 법 위반 시 국내 매출의 20%에 해당하는 과징금이 부과되며, 반경쟁적 관행을 중단하지 않을 경우 30%까지 증가할 수 있음
          + 이는 기존 독점금지법에 따른 과징금(반경쟁적 우위를 이용한 서비스로 얻은 매출의 6%)의 3배 이상임
     * 2025년 말까지 시행될 것으로 예상되는 이 새 법은 3월에 EU가 도입한 유사한 규제에 뒤이어 제정됨
     * 공정거래위원회가 지정한 기술 거대 기업은 규제 준수 보고서를 제출해야 하며, 규칙을 따르는지 감시받게 됨
     * 이 법안은 5월 중의원을 통과한 후 수요일 참의원에서 가결되어 제정됨

   제목과 링크가 내용과 전혀 관련이 없는 것 같은데요?

   봇이 웹사이트 구조때문에 오작동 했나봅니다. 수정해 두었습니다. 고맙습니다!
"
"https://news.hada.io/topic?id=15404","Nvidia Warp - 고성능 GPU 시뮬레이션 및 그래픽을 위한 Python 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Nvidia Warp - 고성능 GPU 시뮬레이션 및 그래픽을 위한 Python 프레임워크

     * 고성능 시뮬레이션 및 그래픽 코드를 작성하기 위한 Python 프레임워크
     * Python 함수를 JIT 컴파일하여 CPU 또는 GPU에서 실행 가능한 효율적인 커널 코드로 변환
     * 공간 컴퓨팅을 위해 설계되었으며, 물리 시뮬레이션, 로보틱스, 기하학 처리 등을 위한 다양한 프리미티브를 제공
     * Warp 커널은 differentiable 하여 PyTorch 및 JAX와 같은 머신러닝 파이프라인의 일부로 사용 가능
     * 요구사항
          + Python 3.9 이상 권장
          + Windows, Linux, macOS에서 x86-64 및 ARMv8 CPU 지원
          + GPU 지원을 위해 CUDA 지원 NVIDIA GPU 및 드라이버 필요 (최소 GeForce GTX 9xx)
          + PyPI에서 설치 가능
          + CUDA 12.5 런타임으로 빌드된 바이너리는 GitHub Releases 페이지에서 제공
"
"https://news.hada.io/topic?id=15369","스노든: "그들은 완전히 가면을 벗었다: OpenAI와 그 제품을 절대 신뢰하지 말라"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            스노든: ""그들은 완전히 가면을 벗었다: OpenAI와 그 제품을 절대 신뢰하지 말라""

        Hacker News 의견

     * 스노든과 스톨만 같은 사람들은 극단적일 수 있지만 완전히 무시하는 것은 어리석음: 현재 IP 권리를 우회하고 수십억의 작품을 보상 없이 착취하려는 황금 러시가 진행 중임.
     * OpenAI에 대한 불신: OpenAI에 대한 첫 인상은 고등학교 때 괴롭히던 사람이 운영하는 중고차 매장에 들어갔을 때와 같은 느낌이었음.
     * 나카소네의 이사회 참여 이유: OpenAI는 규제에 민감하며, 나카소네는 정치적 연결과 미국 국가 안보를 위협하지 않을 것이라는 신뢰를 제공함.
     * AI의 실제 능력과 인식의 차이: AI가 실제로 할 수 있는 것보다 사람들이 AI에 대해 가지는 인식이 세상에 더 큰 영향을 미치고 있음.
     * 과장된 표현: ""모든 사람의 권리를 의도적으로 배신하는 행위""라는 표현은 과장된 것처럼 들림.
     * NSA 전 수장이 OpenAI 이사회에 합류: 관련 기사 링크 제공.
     * Apple과 OpenAI의 협력에 대한 우려: Apple이 OpenAI와의 협력을 선택한 것은 잘못된 결정일 수 있으며, 내년에는 이 파트너십이 유지되지 않을 가능성 있음.
     * 챗봇 사용에 대한 신뢰 문제: 챗봇이 유용하지만, 감시받고 있다는 불신이 있음. 더 많은 프라이버시를 위해 비용을 지불할 의향이 있으며, 개인 서버에 호스팅하는 것에 관심 있음.
     * OpenAI와 정부의 협력: OpenAI와 정부 간의 협력이 존재하는 것은 명확하지만, 왜 그렇게 나쁜 것인지 이해하기 어려움.
     * 서비스 탈퇴: OpenAI와의 관계가 남용적이 되었을 때 서비스를 탈퇴하는 것이 점점 쉬워지고 있음.
"
"https://news.hada.io/topic?id=15430","페른 할로우 브릿지 붕괴 전 수년간 폐쇄 필요성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       페른 할로우 브릿지 붕괴 전 수년간 폐쇄 필요성

이 다리는 붕괴되기 몇 년 전부터 폐쇄되었어야 했다

  사건 개요

     * 2022년 1월 28일, 펜실베니아 피츠버그의 펀 할로우 다리가 갑자기 붕괴됨.
     * 다리 위에 있던 5대의 차량과 버스가 함께 추락했으며, 다른 차량은 다리가 사라진 것을 모르고 추락함.
     * 사망자는 없었으나, 여러 명이 심각한 부상을 입음.
     * 이 다리는 10년 넘게 '불량 상태'로 평가받고 있었음.

  다리의 역사와 설계

     * 펀 할로우 다리는 1973년에 개통되었으며, K-프레임 설계를 사용함.
     * 다리는 날씨에 강한 '웨더링 스틸'로 제작되었으나, 물이 고이거나 습기가 지속되면 부식이 진행됨.

  부식과 관리 문제

     * 2005년부터 2021년까지 14번의 점검에서 다리의 부식 문제가 지속적으로 보고됨.
     * 배수 문제로 인해 다리의 강철 구조물이 부식되었으며, 임시로 설치된 강철 케이블이 영구적인 해결책이 되지 못함.
     * 2019년에는 다리의 모든 다리가 최악의 상태로 평가되었으나, 구조적 검토가 이루어지지 않음.

  구조적 결함과 붕괴 원인

     * 다리의 다리 부분이 '균열 위험 요소'로 식별되지 않아 중요한 검토가 이루어지지 않음.
     * 2013년, 다리의 하중 평가가 잘못되어 실제로는 3톤만 견딜 수 있었음에도 불구하고 26톤으로 평가됨.
     * 부식된 다리의 구조적 결함이 붕괴의 주요 원인으로 밝혀짐.

  붕괴 후 대응

     * 붕괴 후, 새로운 다리가 빠르게 건설되어 2022년 12월에 제한적으로 개통됨.
     * NTSB는 붕괴 원인을 조사하고, 유사한 문제가 발생하지 않도록 여러 권고사항을 발표함.
     * 피츠버그 시는 점검, 유지보수, 수리에 대한 예산을 4배로 늘림.

  GN⁺의 의견

     * 기술적 교훈: 이 사건은 작은 실수들이 모여 큰 재앙을 초래할 수 있음을 보여줌. 소프트웨어 엔지니어링에서도 작은 버그나 결함이 큰 문제로 이어질 수 있음을 상기시킴.
     * 관리 시스템의 중요성: 다리의 붕괴는 관리 시스템의 결함을 드러냄. 소프트웨어 프로젝트에서도 체계적인 관리와 지속적인 점검이 중요함.
     * 예산과 우선순위: 예산 부족과 우선순위 설정의 실패가 문제를 악화시킴. 프로젝트 관리에서도 자원 배분과 우선순위 설정이 중요함.
     * 책임과 권한: 문제를 인식하고도 해결하지 못한 이유는 책임과 권한의 분산 때문임. 프로젝트에서도 명확한 책임과 권한 설정이 필요함.
     * 유지보수의 중요성: 새로운 구조물의 설계와 건설뿐만 아니라 유지보수도 중요함. 소프트웨어에서도 유지보수와 업데이트가 중요함.

        Hacker News 의견

     * 2023년에 구조적으로 결함이 있는 다리가 42,391개였음. LA 카운티에 가장 심각한 16개의 다리가 있으며, 하루에 30만 번의 통행이 있음.
     * PDF 보고서 링크와 주별 순위 링크 제공.
     * 구조적으로 결함이 있는 다리 비율이 가장 낮은 주는 AZ, NV, TX, DE, UT이며, WV와 IA는 거의 20%로 가장 높음.
     * 이탈리아 제노아의 Ponte Morandi 다리도 비슷한 문제로 붕괴되었으며, 43명이 사망했음. 비용 문제로 재건을 미루다 결국 붕괴됨.
     * 많은 서구 국가들이 인프라 유지보수에 신경 쓰지 않음. 노르웨이가 특히 심각함.
     * 정치인들이 유지보수보다는 새로운 건설 프로젝트를 선호함.
     * 다리 붕괴 위험을 알고 있었다면 운전을 피했을지, 정부가 다리를 폐쇄했어야 했는지에 대한 논의.
     * 다리 붕괴 확률이 높더라도 대부분의 사람들은 그 위험을 감수할 것임. 몇 분의 시간을 절약하기 위해서라도.
     * 미국에서 몇 년에 한 번씩 다리 붕괴가 발생하는 것은 적절한 유지보수와 위험 허용 수준을 나타낼 수 있음.
     * 공식 NTSB 보고서에 관심 있는 사람들을 위한 링크 제공.
     * 사고 전후 예측과 실제 변화에 대한 논의. Practical Engineering 유튜브 채널 추천.
     * 다리 붕괴가 이른 아침에 발생한 것은 다행임. 많은 사람들이 다리 아래를 지나가곤 했음.
     * 매일 이 다리를 건너던 사람의 경험 공유. 다리가 흔들리는 것을 느꼈으며, 도로 유지보수 부족으로 인해 교통 체증을 겪었음.
     * 다리의 배수구를 청소하는 간단한 작업이 다리를 구할 수 있었을 것이라는 흥미로운 교훈.
     * 다리 검사나 구조적 보강 후에도 큰 리본을 자르는 행사를 열어야 한다는 의견. 유지보수의 중요성을 기념할 필요가 있음.
"
"https://news.hada.io/topic?id=15409","Chat Control은 당장 중단되어야 합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Chat Control은 당장 중단되어야 합니다

     * Chat Control: EU 위원회의 아동 성학대 규제 제안으로, 디지털 플랫폼에서 아동 성학대 자료(CSAM)의 유통을 막기 위해 서비스 제공자가 사용자 메시지를 자동으로 스캔하고 감지된 사례를 당국에 보고하도록 요구함.
     * 하지만, Chat Control은 클라이언트 측 스캐닝, 업로드 모더레이션, AI 감지 등 어떤 기술로 구현되든 대규모 감시임

  대규모 감시(Mass Surveillance)의 문제점

     * 민주주의와의 부적합성: 대규모 감시는 전체주의 국가의 도구로, 민주주의와 호환되지 않음. EU 기본권 헌장(제7조)에서도 사생활 보호를 기본 인권으로 인정함.
     * 비효율성: 범죄자들은 감시를 피하기 위해 다른 수단을 사용하므로, 대규모 감시는 주로 법을 준수하는 시민들에게만 영향을 미침.
     * 데이터 보안 약화: Chat Control은 통신 서비스에 백도어를 설치하도록 요구하여 보안을 약화시킴. 백도어는 해커들에게 취약점을 제공함.

  대응 방법

     * 정부 대표에게 연락: EU 시민이라면 정부 대표에게 연락하여 Chat Control에 반대하는 의견을 전달할 필요가 있음.
     * 온라인에서 인식 제고: 디지털 플랫폼을 통해 Chat Control의 위험성을 알리고 인식을 높이는 것이 중요함.

  Threema 사용자에게 미치는 영향

     * Threema Work 제외: 현재 지식에 따르면 Threema Work는 Chat Control의 범위에서 제외됨.
     * 프라이버시 보호: Threema는 사용자 감시를 하지 않으며, 유럽 연합 내에서 안전하고 익명성 있는 통신 서비스를 제공할 수 없게 되면 법적 조치나 기술적 우회 등을 고려할 것임.

GN⁺의 의견

     * 프라이버시와 민주주의: Chat Control은 시민의 프라이버시를 침해하고 민주주의의 기본 원칙을 위배함.
     * 기술적 우회 가능성: 범죄자들은 다른 통신 수단을 사용하거나 데이터를 암호화하여 감시를 피할 수 있음.
     * 보안 취약점: 백도어는 해커들에게 취약점을 제공하여 전체 시스템의 보안을 약화시킴.
     * 법적 대응 필요성: Chat Control이 유럽 법원에서 합법성을 유지할 수 있을지 의문이며, 법적 대응이 필요할 수 있음.
     * 대안적 보호 방법: 아동 보호는 실제 학대를 예방하는 방향으로 이루어져야 하며, Chat Control은 효과적이지 않음.

   사실상 대놓고 감청하겠다는 의미 아닌가요...? 한국도 이 정도는 아닌데...

        Hacker News 의견

     * 첫 번째 의견: 이 법안은 남용될 가능성이 높으며, 무고한 사람들을 더 많이 잡아내는 반면, 진짜 범죄자들은 우회할 방법을 찾을 것임. EU가 왜 이런 법안을 추진하는지, 어떤 정치 그룹이 지지하고 반대하는지, 그리고 비EU 국가에 어떤 영향을 미치는지 궁금함.
     * 두 번째 의견: 이런 법안이 정치인들에게 치명적인 영향을 미치지 않는다는 점이 다소 불안함.
     * 세 번째 의견: 변호사, 기자, 의사 등 EU 전문가들이 더 이상 온라인에서 비밀을 지킬 수 없게 되는 것이 문제임. 정부가 모든 사람의 기밀 정보를 접근할 수 있게 하는 것은 큰 보안 재앙이 될 수 있음.
     * 네 번째 의견: PGP 암호화는 학교에서 가르쳐야 함. 데이터 프라이버시는 '테러'라는 두려움으로 짓밟혔고, 이제는 CSAM이라는 새로운 단어로 프라이버시를 침해하고 있음. AI가 모든 사람의 정보를 수집하는 것을 기대하고 있음.
     * 다섯 번째 의견: 누군가 이득을 보고 있으며, 그 대상은 '아이들'이 아님.
     * 여섯 번째 의견: 현재 초안의 문구는 ""호스팅 서비스 제공자와 공개적으로 이용 가능한 대인 커뮤니케이션 서비스 제공자""에 적용되는 것으로 보임. ISP가 포함되지 않는다면, 분산형 P2P 서비스는 해당되지 않을 가능성이 있음.
     * 일곱 번째 의견: 민주주의 국가들이 시간이 지남에 따라 대규모 감시에 빠지는 이유가 궁금함. 사람들이 불안감을 느끼기 때문인지, 아니면 보안을 담당하는 사람들이 이를 가장 쉬운 방법으로 보기 때문인지 궁금함.
     * 여덟 번째 의견: 메시지 플랫폼에서 프라이버시를 침해하지 않으면, 범죄를 어떻게 막을 수 있는지 궁금함. 정부가 메시지 내용을 접근하지 못하면 범죄자들이 추적되지 않을 것임. 프라이버시에 집착하는 것이 우리에게 해가 되는지 궁금함.
     * 아홉 번째 의견: Chat Control이 CSAM에만 국한되지 않을 가능성이 높음. 이 기술이 다른 용도로 사용될 가능성이 있음. 친구들과의 대화를 더 이상 모니터링 당하고 싶지 않아 전화로 더 많이 소통할 계획임.
     * 열 번째 의견: COREPER 웹사이트에서 정보를 이용해 이메일을 보내보았음.
"
"https://news.hada.io/topic?id=15358","AI 검색: 더 씁쓸한 교훈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI 검색: 더 씁쓸한 교훈

Leela Chess Zero의 한계

     * Leela Chess Zero는 자가 대국을 통해 수십억 번의 학습을 거쳐 세계 챔피언이 되었음
     * 하지만 Stockfish에게 완패하였음
     * 더 큰 네트워크를 학습시켜도 Stockfish를 이기지 못하였음
     * Stockfish는 Leela보다 훨씬 작은 모델을 사용하였지만, 더 나은 탐색 능력으로 승리하였음

Stockfish의 승리에 대한 더 많은 생각

     * Leela는 검색을 잘하지 못해 세계 챔피언 자리를 내주었음
     * LLM에 검색 능력을 추가하는 것이 가까이 다가왔지만, 주목받지 못하고 있음
     * GPT-4와 같은 Foundation 모델은 검색 능력이 없음
     * 검색을 가능하게 하기 위해 더 큰 모델이 필요하다는 가정이 지배적이지만, 반례가 존재함
     * DeepMind의 연구에 따르면 체스 알고리즘에서 검색 행동이 자연스럽게 출현함
     * 효율적인 검색 알고리듬이 있는데 비효율적인 선행 검색이 큰 모델에서 우연히 출현하기를 기다릴 필요가 없음
     * 오늘날의 모델은 검색을 가능하게 하기에 충분히 크고, 불필요할 정도로 클 수도 있음

검색은 대상 영역에 대한 컴퓨팅 자원 할당을 가능하게 함

     * 제약회사가 AI를 이용해 신약을 연구하려 한다고 가정
     * AI 검색이 가능한 세상에서는 두 가지 선택지가 있음
         1. 2030년까지 기다려 OpenAI가 4차수 큰 모델을 출시하기를 기다리거나
         2. 오늘 당장 4차수 더 많은 추론 컴퓨팅 자원을 사용하는 것
     * 제약회사는 두 번째 선택지를 선호할 것임
     * 탐색을 통해 2030년 ASI 수준의 능력을 당장 활용 가능

검색 기반 AI 발전 시나리오

     * 기존 모델에서 검색이 작동한다는 것이 발견됨
     * 정부나 대형 연구소가 AI 연구나 해외 정보 수집에 검색을 즉시 적용할 수 있음을 인지
     * 추론 컴퓨팅 자원이 제한되어 정부나 대형 연구소가 보안이나 AI 연구에 한정
     * 검색 주도 AI 발전으로 더 효율적인 탐색 알고리즘과 모델 아키텍처 발견
     * 검색은 더 많은 학습 데이터를 요구하지 않아 '데이터 장벽' 문제 해소
     * 지능 폭발이 2030년이 아닌 내년부터 시작됨

AI 자체 연구에 검색 적용 가능성

     * AI가 스스로를 연구할 수 있을 만큼 충분히 발전하면 급격한 발전 역학이 예상됨
     * 제약회사가 GPT-8을 기다리지 않고 신약을 연구할 수 있듯이, AI 연구소도 더 큰 모델을 기다리지 않고 AI를 연구할 수 있게 됨
     * 인간 AI 연구자를 대체하기 위해서는 더 많은 제한 해제가 필요할 수 있음
     * 하지만 GPT-8 수준의 지능을 가진 단순한 챗봇으로도 AI 발전 가속화에 충분할 것으로 예상됨

        Hacker News 의견

    해커뉴스 댓글 요약

     * 검색의 효과는 가치 함수의 품질과 밀접한 관련이 있음: 현재 가치 함수는 특정 도메인에 매우 특화되어 있으며, 새로운 도메인에 일반화할 수 있는 가치 함수를 만들 수 있다는 증거는 부족함.
     * Yann LeCun의 연구: Yann LeCun은 AGI를 만들기 위해 검색의 역할을 연구 중이며, JEPA를 통해 견고한 세계 모델을 구축하려고 함.
     * 언어 모델의 한계: 현재 LLM이 충분히 풍부한 세계 모델을 시뮬레이션할 수 있는지에 대한 의문이 있으며, 비디오가 중요한 이유는 인간이 이미지 시퀀스에서 유용한 세계 모델을 추출할 수 있기 때문임.
     * 기사의 모호함: 게시물은 흥미로운 전제를 가지고 시작하지만, LLM의 맥락에서 검색을 정의하지 않으며, ""Pfizer가 오늘 GPT-8 기능을 사용할 수 있다""는 주장을 설명하지 않음.
     * 체스 엔진의 검색: 체스 엔진의 검색은 객관적인 함수가 있어 가능한데, LLM에는 그러한 메트릭이 있는지 의문임.
     * 검색의 필요성: 검색은 거의 확실히 필요하며, 저비용 클러스터가 고비용 클러스터를 이길 수 있는 방법을 찾는 것이 중요함.
     * 체스와 다른 게임의 차이: 체스는 가지치기 요소가 적어 폭넓은 접근이 가능하지만, 현실 세계의 상황은 가지치기 요소가 훨씬 큼.
     * 검색의 일반화: 검색은 ""생성 및 테스트""와 거절 샘플링의 일반화이며, 속도는 후보 생성과 테스트 시간에 따라 달라짐.
     * 웹사이트 문제: 특정 웹사이트가 기본 브라우저 기능을 방해하여 불편함을 초래함.
     * Leela Chess Zero의 게임 트리: Leela는 체스 게임을 게임 트리로 모델링하여 검색 알고리즘을 사용함.
     * LLM의 검색 가능성: LLM이 검색할 수 있는 가능성 공간이 명확하지 않음.
     * LLM의 한계: LLM이 치즈케이크를 만들거나 평가할 수 없으므로 AGI에 대한 기대를 낮출 필요가 있음.
     * 정보 이론적 문제: LLM 훈련에 너무 많은 데이터가 필요하다는 점에서 일반화와 내부 세계 모델링의 부족이 문제임.
"
"https://news.hada.io/topic?id=15383","MicroMac - 9천원(£5)으로 만드는 매킨토시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MicroMac - 9천원(£5)으로 만드는 매킨토시

     * 원래 매킨토시의 128KB 메모리와 비교하면 라즈베리 파이의 264KB RAM은 충분함. 1984년 매킨토시는 폭스바겐 Golf의 1/3 가격이었음.
     * RP2040으로 단색 VGA 및 USB/키보드를 연결하여 맥을 에뮬레이트하여 초기 맥 애플리케이션을 실행
     * GitHub 에 공개한 정보를 통해 누구나 직접 구축 가능

  Pico-Mac이란?

     * Raspberry Pi RP2040 마이크로컨트롤러(Pico 보드 사용)가 단색 VGA 비디오를 구동하고 USB 키보드/마우스 입력을 받아 매킨토시 128K 컴퓨터와 디스크 저장 장치를 에뮬레이트함
     * RP2040의 2MB 플래시는 OS와 소프트웨어를 위한 디스크 이미지로 충분
     * MacDraw, MacWrite, MacPaint와 같은 초기 매킨토시 애플리케이션을 실행할 수 있음

  여정

    세 가지 규칙

    1. 재미있어야 함.
    2. 68K 어셈블리를 배우고 싶지 않음.
    3. 초기 Mac 시스템 소프트웨어의 내부를 깊이 파고들고 싶지 않음.

    Mac 128K

     * Motorola 68000 CPU, 8MHz.
     * 메모리 맵, 키보드/마우스, 비디오 스캔 등 기본적인 하드웨어 구성.
     * Mac 128K와 Mac 512K는 RAM만 다름.
     * Mac Plus는 SCSI와 800K 플로피 드라이브 추가.

    Mac 에뮬레이터: umac

     * Musashi 68K 인터프리터를 사용하여 Mac 128K 에뮬레이터를 구축함.
     * ROM 이미지 로드, RAM 할당, 디버그 메시지 및 로깅 설정.
     * 주소 디코딩 추가, CPU 읽기/쓰기 RAM 또는 ROM으로 유도.
     * IWM 칩 접근 후 ""Unknown Disc"" 아이콘을 얻음.
     * SDL2 프론트엔드로 감싸서 실시간 화면 리프레시 확인.

    하드웨어와 RP2040

     * 512x342x1 비디오를 VGA로 출력하고 TinyUSB HID 예제를 통합함.
     * VGA PIO 작업을 통해 비디오 데이터를 스캔하고 DMA를 사용하여 프레임버퍼 데이터를 출력함.
     * 여러 번의 DMA 채널 재구성을 통해 안정적인 비디오 출력 구현.

    다시 에뮬레이션으로

     * Musashi의 큰 opcode 디코드 점프 테이블을 플래시에 저장하도록 변경.
     * 디스어셈블러와 실행 주기 카운팅 제거.
     * RAM 사용을 최소화하여 Pico에서 빌드 및 실행 가능.

    성능

     * Pico를 250MHz로 오버클럭하여 성능 향상.
     * 자주 사용되는 200개의 opcode 함수를 RAM에 저장하여 1.4 MIPS 달성.

  작별 인사

     * MicroMac 프로젝트는 재미있고 유익한 경험이었음.
     * GitHub 링크를 통해 직접 구축 가능.

GN⁺의 의견

    1. 흥미로운 프로젝트: MicroMac은 저렴한 하드웨어로 고전 매킨토시를 에뮬레이트하는 흥미로운 프로젝트임. 소프트웨어와 하드웨어의 결합을 통해 엔지니어링의 재미를 느낄 수 있음.
    2. 학습 기회: 이 프로젝트는 초급 소프트웨어 엔지니어에게 하드웨어와 소프트웨어의 상호작용을 이해하는 좋은 기회를 제공함. 특히, 에뮬레이션과 PIO, DMA와 같은 개념을 배울 수 있음.
    3. 성능 최적화: 성능 최적화 과정에서 다양한 기술적 도전과 해결 방법을 배울 수 있음. 특히, 메모리 관리와 오버클럭킹의 중요성을 이해할 수 있음.
    4. 커뮤니티와의 공유: GitHub를 통해 프로젝트를 공유하고 다른 사람들과 협력할 수 있는 기회를 제공함. 이는 오픈소스 커뮤니티의 장점을 잘 보여줌.
    5. 미래 가능성: 이 프로젝트는 더 큰 RAM을 가진 MCU를 사용하여 확장 가능성이 있음. 이는 더 복잡한 애플리케이션을 실행할 수 있는 가능성을 열어줌.

        Hacker News 의견

     * VGA 케이블 찾기 어려움: 최근 예술 설치를 위해 VGA 케이블이 필요했지만 주변에 아무도 가지고 있지 않아 결국 새로 구매해야 했음. 많은 케이블이 버려지는 상황에서 아쉬움.
     * Amiga 프로젝트: AmigaOS 3.2를 실행하는 Amiga를 만들고 싶었음. 3D 프린팅으로 원래 모양의 작은 쉘을 만드는 아이디어가 귀여움. 구형 플로피 드라이브가 없어 경험이 약간 부족하지만, 기존 데스크탑 PC에서 에뮬레이터를 실행하는 대신 전용 기계를 사용하는 아이디어가 마음에 듦. RP2040이 68k 역할을 하는 저수준 접근 방식이 흥미로움.
     * Mac의 첫 인상: Mac이 처음 나왔을 때 컴퓨터 가게에서 일했음. 화면 모서리의 둥근 모서리를 보고 그 천재성에 감탄했음.
     * 프로젝트 칭찬: 이 프로젝트가 매우 인상적임. 읽는 재미가 있었고, 글쓰기 스타일도 마음에 듦. 임베디드 프로젝트에서 빠른 프로토타이핑/디버깅을 위해 듀얼 타겟 빌드를 시도하는데, PC 빌드를 더 자주 사용하게 됨. 더 많은 사람들이 이렇게 해야 함.
     * VGA 인터페이스: VGA 인터페이스가 가장 인상적임.
     * ESP32 해킹 도전: ESP32에서 vMac을 실행하려고 시도했지만 실패했음. 이 프로젝트는 훨씬 더 높은 수준임. 경의를 표함.
     * 작은 SBC 탐구: 마지막 68k Mac이나 90년대 중후반 PPC Mac을 완전한 성능으로 에뮬레이션할 수 있는 가장 작은 SBC가 무엇인지 궁금함. 현대적인 노트북 몸체에 이를 장착하면 System 7.6.1부터 Mac OS 9.x까지 실행할 수 있는 유용한 ""젠 모드"" 노트북이 될 수 있음.
     * 블로그 미러: 블로그가 과부하 상태인 것 같아 미러 링크를 공유함.
     * MacPaint 언급: MacPaint를 언급하지 않은 이유를 설명. Bill Atkinson이 모든 트릭을 알고 있었고, 이를 활용해 MacPaint를 원래 제약 조건 내에서 작동하게 했을 것이라고 생각함. 저자에게는 공정한 싸움이 아님.
     * VGA 커넥터 찾기: VGA 커넥터가 필요했지만 구할 수 없었음. 점심시간에 산책 중 길에서 VGA 케이블을 발견했음. 때로는 이런 일이 일어남.
"
"https://news.hada.io/topic?id=15418","KidPix 소프트웨어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              KidPix 소프트웨어

        Hacker News 의견

     * 초기 90년대 친구의 컴퓨터에서 사용했던 기억: KidPix는 훌륭하지만, 페인트 버킷 도구 사용 시 생기는 흰색 윤곽선이 아쉬움.
     * Craig Hickman 교수와의 추억: 1986년 디지털 아트 수업에서 MacPaint에 영감을 받아 초기 색상 페인트 프로그램을 작성했음.
     * 1999년 학교 컴퓨터 실에서 KidPix 사용: Firecracker 기능과 폭탄 소리가 인상적이었음.
     * 도구보다 소리가 더 기억에 남음: 'draw me' 기능의 소리를 아직도 생생하게 기억함.
     * 1995년 초등학교 프로젝트: KidPix로 Command & Conquer 장면을 그려 잡지에 스크린샷처럼 사용했음. 플로피 디스크에 해당 문서가 아직 남아있음.
     * 안드로이드 모바일에서의 문제: 90년대의 감성을 사랑하지만, 안드로이드 모바일에서 제대로 작동하지 않음.
     * TuxPaint 추천: 2002년부터 현재까지 유사한 앱으로, 어린이들이 좋아하는 스탬프와 소리 기능이 있음.
     * 2021년의 이전 논의 링크: 이전 논의 링크
     * 소리가 더 만족감을 줌: 어린 시절만큼 재미있음.
     * 오디오의 향수: 저품질 플래시 스타일 오디오가 매우 향수를 불러일으킴. 당시 오디오 코덱 때문일 가능성이 있음.
"
"https://news.hada.io/topic?id=15387","Llama-3 8B-Instruct 모델 셀프 호스팅 비용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Llama-3 8B-Instruct 모델 셀프 호스팅 비용

     * 대규모 언어 모델(LLM) 직접 호스팅 하는 비용은 얼마나 될까?
     * Llama-3 8B-Instruct 모델을 EKS에서 호스팅할 경우, 100만 토큰당 약 $17
     * 같은 작업을 ChatGPT를 사용하면 100만 토큰당 $1
     * 하드웨어를 셀프 호스팅하면 100만 토큰당 비용이 $0.01 이하로 줄어들고, 손익분기점 도달까지 약 5.5년 소요
          + 4x NVidia Tesla T4 GPU 및 기타 하드웨어 비용($3800) + 월간 비용(전기세 및 기타) $100 으로 계산

    최적의 하드웨어를 결정한 과정

     * 테스트 환경: 모든 테스트는 EKS 클러스터에서 실행됨
     * 첫 번째 시도: Nvidia Tesla T4 GPU를 사용하는 AWS g4dn.2xlarge 인스턴스.
          + 스펙: 1 NVidia Tesla T4, 32GB 메모리, 8 vCPUs.
          + 결과: Llama 3의 8B 또는 70B 파라미터 버전 실행 불가.
          + 문제: OOM(Out of Memory) 발생 및 응답 시간 약 10분 소요.
     * 두 번째 시도: Nvidia Tesla T4 GPU 4개를 사용하는 AWS g4dn.16xlarge 인스턴스.
          + 스펙: 4 NVidia Tesla T4, 192GB 메모리, 48 vCPUs.
          + 결과: 응답 시간이 10초 이내로 감소.

    초기 구현

     * 구현 방법: Hugging Face의 Llama-3 코드를 복사하여 사용.
     * 비용 계산:
          + g5dn.12xlarge 인스턴스 사용 비용: 시간당 $3.912.
          + 월간 비용 계산 시, 100만 토큰당 약 $167.17 비용 발생.
          + ChatGPT 3.5 Turbo 비용: 100만 토큰당 $1.

    문제 해결

     * 문제 인식: 기존 방법이 잘못되었음을 깨닫고, vLLM 사용.
     * 개선 결과:
          + API 서버 호스팅을 위해 ray와 vllm 설치.
          + —tensor-parallel-size 4 옵션으로 4개의 GPU 모두 사용.
          + 결과: 응답 시간 2044ms로 크게 개선.
          + 비용 계산 시, 100만 토큰당 약 $17 비용 발생.

    대안 접근법

     * 자가 하드웨어 호스팅:
          + 필요한 하드웨어: 4x NVidia Tesla T4 GPU, eBay에서 약 $700.
          + 기타 비용 포함, 총 설치 비용 약 $3,800.
          + 월간 에너지 비용 약 $50.
          + 총 월간 비용 약 $100로 계산.
          + 손익분기점 도달까지 약 66개월 (5.5년) 소요.

    결론

     * 장점: 자가 하드웨어 호스팅 시 비용 절감 가능.
     * 단점: 하드웨어 관리 및 스케일링 필요
          + 100% 활용 가정이 비현실적이므로 실제 상황에 맞게 평가 필요.

   모델 구축하는것도 아니고
   Llama 8B로 추론만 하는데 장비가 과하네요.
   24G gpu(3090이나 4090)이면 충분(200~300만) 한달 전기요금 3만원 정도면 충분.
   써놓고 보니 밑에 있네요 ㅎ

   5.5년이면 기네요..

   8B 를 토이레벨 이상으로 가능한가요?

    Hacker News 의견

     * AWS 대신 하드웨어를 자체 호스팅하면 비용이 크게 줄어듦.
          + NVidia Tesla T4를 4개 사용하면 약 $3,800의 비용이 듦.
          + Llama 3 8b 모델을 사용하면 3090 또는 4090 GPU 하나로 충분함.
          + eBay에서 GPU를 구매하면 비용 절감 가능.
     * Llama 8B 모델은 AWS Bedrock에서 1M 입력 토큰당 $0.40, 출력 토큰당 $0.60로 OpenAI 모델보다 저렴함.
          + 서버 구축과 유지보수에 드는 시간과 비용도 고려해야 함.
     * Jetstream + Maxtext의 가격
          + TPU v5e를 사용한 3년 약정 가격은 1M 토큰당 $0.25.
          + 온디맨드 가격은 1M 토큰당 약 $0.45.
          + Google Next 2024 세션에서 자세한 내용 확인 가능.
     * NVIDIA의 시장 가치 하락 예상
          + LLM 성능이 정체되고, LLM이 상용화되면서 NVIDIA의 시장 가치는 떨어질 가능성이 있음.
          + 훈련에 대한 컴퓨팅 수요도 예상보다 빨리 감소할 것임.
     * 비용 분석의 문제점
          + 배치 크기 1로 실행하는 것은 비용 분석에 큰 오류를 초래함.
          + API 제공자들이 청구하는 비용보다 100배에서 1000배 비쌈.
     * 8B 모델 실행 비용
          + 3090과 기본 시스템으로 충분히 8B 모델을 실행 가능.
          + OpenAI와 AWS의 비용 차이가 큼 ($1 vs $17).
          + AWS가 실제로는 더 저렴할 수 있음.
     * 비용 이해의 문제점
          + 단일 동기 요청으로 비용을 이해하는 것은 부적절함.
          + ChatGPT는 많은 요청을 병렬로 처리함.
          + 더 큰 요청, 동시 요청, 요청 큐잉이 비용을 크게 줄일 수 있음.
     * LLM 접근 비용
          + LLM 접근 비용이 매우 저렴함.
          + 기술 발전에 비해 비용이 낮아 기술자들이 기뻐해야 함.
     * T4는 6년 된 카드로, 3090, 4090, A10, A100 등과 비교하는 것이 더 적절함.
"
"https://news.hada.io/topic?id=15382","라즈베리 파이 5, 티니-미니-마이크로 PC에 밀려","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      라즈베리 파이 5, 티니-미니-마이크로 PC에 밀려

라즈베리 파이 5는 작은 미니 PC와 비교할 수 없음

  라즈베리 파이와 미니 PC 비교

     * 라즈베리 파이 5는 성능 면에서 이전 모델보다 개선되었지만 여전히 SD 카드 성능에 의해 제한받음.
     * 팬데믹 동안 라즈베리 파이의 공급 부족으로 인해 사람들이 대안을 찾기 시작했음.
     * Dell, Lenovo, HP에서 제조한 1리터 크기의 미니 PC가 대안으로 떠오름.

  하드웨어 비교

     * HP Elitedesk Mini G3 800
          + CPU: Intel i5-6500 (65W)
          + RAM: 16GB (최대 32GB)
          + 저장장치: 250GB SSD
          + 네트워크: 1Gb (Intel)
          + 가격: €160
          + 대기 전력: 4W
     * HP Elitedesk Mini G4 705
          + CPU: AMD Ryzen 3 PRO 2200GE (35W)
          + RAM: 16GB (최대 32GB)
          + 저장장치: 250GB NVME
          + 네트워크: 1Gb (Realtek)
          + 가격: €115
          + 대기 전력: 10W

  성능 비교

     * Intel i5-6500 CPU는 AMD Ryzen 3 PRO보다 단일 코어 성능이 13% 더 빠름.
     * 두 미니 PC는 라즈베리 파이 5보다 단일 코어 성능이 42% - 62% 더 빠름.

  저장장치 성능

     * 라즈베리 파이 5는 기본적으로 NVME SSD를 지원하지 않음.
     * 미니 PC는 SATA SSD와 NVME SSD를 지원하여 더 나은 IO 성능을 제공함.

  소음 수준

     * 두 시스템 모두 대기 상태에서는 거의 들리지 않음.
     * AMD 시스템은 풀 로드 시 소음이 더 큼.

  대기 전력 소비

     * Elitedesk 800 (Intel)
          + Debian 12 설치 후 대기 전력 소비를 3.5W까지 낮출 수 있음.
          + powertop --auto-tune 명령어를 사용하여 추가적인 전력 절감 가능.
     * Elitedesk 705 (AMD)
          + Debian 12 설치 후 대기 전력 소비를 10-11W까지 낮출 수 있음.
          + powertop --auto-tune 명령어와 모니터 분리로 추가적인 전력 절감 가능.

  결론

     * 중고 1리터 미니 PC는 라즈베리 파이 5보다 홈 서버 역할에 더 적합함.
     * CPU 성능, 내장 SSD/NVME 지원, 최대 32GB RAM 확장 가능성, 중고 시장에서의 가격 경쟁력이 주요 장점임.

GN⁺의 의견

     * 성능과 확장성: 미니 PC는 라즈베리 파이보다 성능이 뛰어나고 확장성이 높아 다양한 용도로 활용 가능함.
     * 전력 소비: 미니 PC는 라즈베리 파이와 유사한 전력 소비를 보이면서도 더 높은 성능을 제공함.
     * 저장장치: NVME SSD 지원이 없는 라즈베리 파이 5는 저장장치 성능에서 큰 단점이 있음.
     * 가격 대비 가치: 중고 미니 PC는 가격 대비 성능이 뛰어나며, 홈 서버나 실험용으로 적합함.
     * 대안 제품: Intel NUC와 같은 소형 폼팩터 PC도 고려할 만한 대안임.

        Hacker News 의견

     * Raspberry Pi의 변화: Raspberry Pi는 이제 교육이나 취미용 저가 컴퓨터가 아닌 제조업체용 개발 키트로 사용됨. 메인라인 리눅스를 잘 지원하기 때문에 전자 엔지니어들이 더 높은 가격을 지불할 의향이 있음.
     * Raspberry Pi의 하드웨어 기능: Raspberry Pi는 많은 핀과 하드웨어 기능을 노출하고 있어 전자공학에 대한 흥미를 다시 불러일으킴. 단순한 컴퓨터 이상의 용도로 설계됨.
     * Micro PC로의 전환: Retro Pi를 Micro PC로 교체한 사용자. Pi의 유연성과 커뮤니티를 사랑하지만, 홈 시어터나 홈 어시스턴트 같은 용도로는 중고 Micro PC가 더 나음.
     * Mini-PC의 매력 부족: Mini-PC 사용의 매력을 느끼지 못함. Raspberry Pi는 전원 공급 장치 교체가 쉽고, 다양한 용도로 활용 가능. Mini-PC는 틈새 시장이 거의 없음.
     * Microcontroller와 Docker 이미지: 많은 사람들이 Microcontroller나 Docker 이미지를 몰라 Raspberry Pi를 사용함. Pi는 두 가지를 모두 필요로 할 때 유용하지만, 그렇지 않으면 가격을 올리는 요인이 됨.
     * Thin Client 대안: Fujitsu Futro s740과 Dell Wyse 5070 같은 Thin Client가 좋은 대안이 될 수 있음. 저전력 소모와 높은 성능을 제공하며, 중고로 저렴하게 구매 가능.
     * 사용 사례에 따른 선택: 사용 목적에 따라 선택이 달라짐. 높은 컴퓨팅 성능과 연결성을 원하면 Mini-PC, GPIO가 필요하면 Raspberry Pi가 적합함.
     * 소음 민감성: 작은 아파트나 소음에 민감한 경우, 팬 없는 N100 시스템이나 Raspberry Pi가 고려할 만함. Lenovo i5-6500 시스템은 가격 대비 성능이 좋지만, 소음이 발생할 수 있음.
     * 새 제품 vs 중고 제품: 새 제품과 중고 제품의 비교가 중요함. Raspberry Pi는 생태계, 팬 없는 설계, 저렴한 가격이 장점임. ESP32/ESP8266이 취미용으로 많이 사용됨.
     * 구형 PC 성능 향상: 구형 PC를 사용할 계획이라면 Spectre와 Meltdown 완화를 비활성화하고 CPU 마이크로코드를 제거하면 성능이 크게 향상됨. 홈랩에서는 이러한 완화가 필요하지 않음.
"
"https://news.hada.io/topic?id=15357","H.264 마법마법 (2016)

H.264는 마법이다

  H.264란?

     * H.264는 비디오 압축 코덱 표준임.
     * 인터넷 비디오, 블루레이, 휴대폰, 보안 카메라, 드론 등 거의 모든 곳에서 사용됨.
     * 30년 이상의 연구 결과로, 풀 모션 비디오 전송에 필요한 대역폭을 줄이는 것이 목표임.

  왜 압축이 필요한가?

     * 비압축 비디오 파일은 엄청난 양의 데이터를 포함함.
     * 예를 들어, 1080p @ 60Hz 비디오는 초당 약 370MB의 데이터를 생성함.
     * 50GB 블루레이 디스크는 약 2분의 비디오만 저장할 수 있음.
     * 따라서 압축이 필요함.

  왜 H.264 압축인가?

     * H.264는 매우 효율적임.
     * 예를 들어, Apple 홈페이지의 PNG 스크린샷은 1015KB, 같은 화면의 5초짜리 H.264 비디오는 175KB임.
     * H.264 비디오는 PNG보다 1500배 더 효율적임.

  H.264의 주요 기술

    무게 줄이기 (Lossy Compression)

     * H.264는 중요하지 않은 비트를 버리고 중요한 비트만 유지하는 손실 압축을 사용함.
     * PNG는 무손실 압축으로, 모든 비트를 유지함.

    정보 엔트로피

     * 정보 엔트로피는 데이터를 표현하는 데 필요한 최소 비트 수를 의미함.
     * 데이터를 압축하여 중복성을 줄이는 방법임.

    주파수 도메인 (Frequency Domain)

     * 데이터를 주파수 도메인으로 변환하여 고주파 성분(세부 정보)을 제거함.
     * 이렇게 하면 이미지의 세부 정보는 줄어들지만, 공간을 절약할 수 있음.

    크로마 서브샘플링 (Chroma Subsampling)

     * 인간의 눈은 색상보다 밝기 변화를 더 잘 감지함.
     * YCbCr 색상 모델을 사용하여 색상 정보를 줄이고, 밝기 정보는 유지함.
     * 이를 통해 대역폭을 절반으로 줄일 수 있음.

    모션 보상 (Motion Compensation)

     * 비디오의 대부분은 정적이고, 일부만 움직임.
     * H.264는 정적 이미지를 저장하고, 움직이는 부분만 별도로 저장함.
     * 이를 통해 공간을 절약함.

    엔트로피 인코더 (Entropy Coder)

     * 손실 압축 후 남은 중복 정보를 제거함.
     * 일반적인 무손실 인코더로 모든 데이터를 복구할 수 있음.

GN⁺의 의견

     * H.264의 효율성: H.264는 비디오 압축에서 매우 효율적이며, 대역폭과 저장 공간을 크게 절약할 수 있음.
     * 기술의 복잡성: H.264의 다양한 기술적 요소는 이해하기 어려울 수 있지만, 기본 원리를 이해하면 많은 도움이 됨.
     * 다른 코덱과의 비교: H.265와 같은 최신 코덱은 H.264보다 더 높은 압축 효율을 제공함. 하지만, H.264는 여전히 널리 사용되고 있음.
     * 실제 적용: 비디오 스트리밍, 저장 및 전송에서 H.264의 사용은 매우 일반적이며, 이를 통해 많은 비용 절감 효과를 볼 수 있음.
     * 미래 전망: 비디오 압축 기술은 계속 발전 중이며, 더 효율적인 코덱이 등장할 가능성이 큼. H.264의 원리를 이해하면 새로운 기술을 배우는 데 도움이 됨.

        Hacker News 의견

     * AV1의 장점: AV1은 더 나은 라이선싱과 함께 마법 같은 성능을 제공함.
     * Meta의 사용 사례: Meta는 비디오 스트리밍을 위해 VP9와 AV1 스트림을 점진적으로 도입 중임.
     * Microsoft Teams: Microsoft는 Teams에서 AV1을 사용하기 시작했으며, 특히 화면 공유에 유용한 비디오 코딩 도구를 제공함.
     * YouTube 비디오: 요즘 YouTube에서 보는 대부분의 비디오는 VP9 또는 AV1로 인코딩됨. 가끔 H.264 비디오도 있음.
     * H.264의 미래: H.264는 아직도 오랫동안 사용될 예정이지만, AV1이 인터넷 비디오의 새로운 기준이 될 가능성이 높음.
     * H.264 특허 만료: H.264의 많은 특허가 곧 만료될 예정임. 첫 번째 버전이 2003년에 발표되었고, 특허는 보통 20년 동안 유효함.
     * H.265에 대한 질문: H.265는 더 높은 효율성을 제공하지만, 여전히 H.264와 비교됨.
     * H.264 초기 경험: H.264가 처음 등장했을 때, mplayer로 파일을 재생하려고 했으나 초기 버전에서는 지원되지 않았음. 이후 성능이 크게 개선됨.
     * 데이터 압축 예시: 동전 던지기 예시를 통해 데이터 압축의 개념을 설명함.
     * 코덱의 핵심: 손실 압축의 핵심은 이산 코사인 변환, 양자화, 지그재그 스캐닝, 엔트로피 코딩의 조합임.
     * VVC의 효율성: VVC는 AV1보다 20-30% 더 효율적이며, 인도의 MXPlayer에서 이미 사용 중임.
     * 비디오 압축 이야기: 1999년에 새로운 비디오 압축 알고리즘을 개발한 회사와의 인터뷰 경험을 공유함. 그 회사는 결국 실패했지만, 그들의 접근 방식은 흥미로웠음.
     * 정보 엔트로피 용어: ""정보 엔트로피""라는 용어의 사용이 다소 어색하게 느껴짐.
"
"https://news.hada.io/topic?id=15419","TikTok의 Instagram: Whee 앱 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      TikTok의 Instagram: Whee 앱 출시

   TikTok은 최근 Instagram과 유사한 새로운 사진 공유 앱인 'Whee'를 출시했습니다. 이 앱은 Android Police와 APKMirror 설립자인 Artem Russakovskii에 의해 처음 발견되었습니다.

   TikTok은 Whee를 가장 가까운 친구들과만 사진을 공유하는 앱으로 명확하게 포지셔닝하고 있습니다. Google Play 설명에 따르면, ""친구들만 볼 수 있는 현실적인 사진을 캡처하고 공유하여 가장 진정한 자신을 보여줄 수 있습니다. Whee는 가까운 친구들이 삶의 순간을 공유하기에 가장 좋은 장소입니다.""

   앱 목록의 스크린샷에는 사진 뷰파인더, 메시지를 주고받을 수 있는 친구 목록, 피드 등이 포함되어 있으며, 많은 사진 캡션이 친구들과의 연결 기능을 강조합니다.

   현재 이 새로운 앱은 ""12개 이상의 국가""에서 Android에서 사용할 수 있지만, Android Police 보고서에 따르면 미국에서는 아직 사용할 수 없습니다. 또한, iOS App Store에서도 Whee를 찾을 수 없습니다. TikTok과 모회사 ByteDance는 즉각적인 논평 요청에 응하지 않았습니다.

   TikTok이 Instagram에서 영감을 받은 앱을 출시한 것은 이번이 처음이 아닙니다. 4월에는 이미지 공유 앱인 TikTok Notes를 출시하기 시작했습니다.
"
"https://news.hada.io/topic?id=15354","Stripe의 문서DB가 다운타임 없는 데이터 마이그레이션으로 99.999%의 가동 시간을 지원한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Stripe의 문서DB가 다운타임 없는 데이터 마이그레이션으로 99.999%의 가동 시간을 지원한 방법

     * Stripe는 2023년에 총 결제량 1조 달러를 처리하면서도 99.999%의 가동 시간을 유지함
     * Stripe의 데이터베이스 인프라 팀은 API의 기반 계층으로 DocDB라는 데이터베이스 as a service (DBaaS)를 제공함
     * DocDB는 MongoDB Community의 확장판으로, Stripe 내부에서 구축한 여러 서비스로 구성됨
          + 초당 500만 건 이상의 쿼리를 처리하며, 페타바이트 단위의 중요한 금융 데이터를 2,000개 이상의 데이터베이스 샤드에 분산하여 5,000개 이상의 컬렉션에 저장함
     * MongoDB Community를 선택한 이유는 문서 모델의 유연성과 대규모 실시간 데이터 처리 능력 때문임
          + 2011년에는 MongoDB Atlas가 존재하지 않아 클라우드에서 실행되는 자체 관리형 MongoDB 인스턴스 클러스터를 구축함
     * DocDB의 핵심은 Data Movement Platform임
          + 원래는 MongoDB의 수직 확장 한계를 극복하기 위한 수평 확장 솔루션으로 구축되었으나, 다양한 목적으로 커스터마이징됨
          + 활용도와 효율성 향상을 위한 미사용 데이터베이스 샤드 병합, 안정성을 위한 데이터베이스 엔진 주요 버전 업그레이드, 대형 사용자를 위한 멀티테넌트에서 싱글테넌트로의 전환 등
     * Data Movement Platform은 소수의 대용량 데이터베이스 샤드에서 다수의 소용량 데이터베이스 샤드로의 전환을 가능하게 함
          + 또한 클라이언트에 투명한 마이그레이션과 제로 다운타임을 제공하여 고도로 탄력적인 DBaaS 제공이 가능함
          + DocDB는 트래픽 급증 시 데이터베이스 샤드를 분할하고, 트래픽이 낮을 때는 빈 패킹을 통해 수천 개의 데이터베이스를 통합할 수 있음

  데이터베이스 인프라 구축 방법

     * Stripe는 2011년 출시 당시 표준 관계형 데이터베이스보다 개발자 생산성이 뛰어난 MongoDB를 온라인 데이터베이스로 선택함
     * MongoDB 위에서 API의 안정성을 우선시하는 견고한 데이터베이스 인프라를 운영하고자 했으나, 요구사항을 충족하는 기성 DBaaS를 찾을 수 없었음
          + 최고 수준의 가용성, 내구성, 성능 충족
          + 클라이언트 애플리케이션의 최적화되지 않은 쿼리로 인한 자체 문제를 방지하기 위해 최소한의 데이터베이스 기능 노출
          + 샤딩을 통한 수평 확장성 지원
          + 강제 할당량이 있는 멀티테넌시에 대한 일류 지원 제공
          + 권한 부여 정책 시행을 통한 강력한 보안 제공
     * 해결책은 MongoDB를 기본 스토리지 엔진으로 사용하여 DocDB를 구축하는 것이었음 - 진정한 탄력적이고 확장 가능한 DBaaS로, 온라인 데이터 마이그레이션이 핵심임
     * Stripe의 제품 애플리케이션은 신뢰성, 확장성, 허용 제어 및 액세스 제어 문제를 시행하기 위해 Go로 내부적으로 개발한 데이터베이스 프록시 서버 플릿을 통해 데이터베이스의 데이터에 액세스함
          + 수평 확장 메커니즘으로 샤딩을 사용하기로 결정하는 핵심 아키텍처 결정을 내림
     * 누적 데이터의 작은 청크를 각각 보관하는 수천 개의 데이터베이스 샤드가 이제 Stripe의 모든 제품의 기반이 됨
          + 애플리케이션이 데이터베이스 프록시 서버에 쿼리를 보내면 쿼리를 구문 분석하고 하나 이상의 샤드로 라우팅한 다음, 샤드의 결과를 결합하여 애플리케이션으로 다시 반환함
     * 데이터베이스 프록시 서버는 청크 메타데이터 서비스에 의존하여 청크를 데이터베이스 샤드에 매핑함으로써 주어진 쿼리에 대한 관련 샤드를 쉽게 조회할 수 있음
          + 데이터베이스에 대한 쓰기로 인한 변경 이벤트는 스트리밍 소프트웨어 시스템으로 전송되고, 최종적으로 변경 데이터 캡처(CDC) 파이프라인을 통해 객체 저장소에 보관됨
     * Stripe의 팀은 제품 애플리케이션 수준에서 내부 문서 데이터베이스 컨트롤 플레인을 사용하여 관련된 목적을 가진 문서로 구성된 하나 이상의 DocDB 컬렉션을 포함하는 논리적 데이터베이스라고 하는 데이터의 논리적 컨테이너를 프로비저닝함
          + 이러한 DocDB 컬렉션의 데이터는 컬렉션의 작은 청크를 보관하는 여러 데이터베이스(물리적 데이터베이스)에 분산됨
     * DocDB의 물리적 데이터베이스는 프라이머리 노드와 복제 및 자동 장애 조치가 포함된 여러 보조 노드로 구성된 복제 세트로 배포된 샤드에 상주함

  Data Movement Platform 설계 방법

     * 제품 애플리케이션의 요구에 따라 확장 및 축소할 수 있는 수평적으로 확장 가능하고 높은 탄력성을 가진 DBaaS 제품을 구축하기 위해서는 클라이언트에 투명한 방식으로 제로 다운타임으로 데이터베이스 샤드 간에 데이터를 마이그레이션할 수 있는 기능이 필요했음
          + 이는 중요한 재무 데이터의 고유한 요구사항으로 인해 더욱 복잡해지는 복잡한 분산 시스템 문제임
     * 데이터 일관성 및 완전성: 마이그레이션되는 데이터가 소스 샤드와 타겟 샤드 모두에서 일관성과 완전성을 유지하도록 보장해야 함
     * 가용성: 데이터 마이그레이션 중 장시간 다운타임은 허용될 수 없음. 수백만 기업이 하루 24시간 고객의 결제를 받기 위해 Stripe에 의존하기 때문
          + 마이그레이션 프로세스의 핵심 단계를 계획된 데이터베이스 프라이머리 장애 조치 시간(일반적으로 몇 초 정도 소요)보다 짧게 유지하고, 제품 애플리케이션의 재시도 예산에 맞추는 것이 목표임
     * 세분성 및 적응성: Stripe 규모에서는 데이터의 임의 개수 청크를 임의 개수의 소스에서 타겟 샤드로 마이그레이션할 수 있어야 함
          + 플릿 내 진행 중인 데이터베이스 청크 마이그레이션 수에 제한이 없고, 특정 시점에 특정 샤드가 참여할 수 있는 마이그레이션 수에도 제한이 없어야 함
          + 또한 데이터베이스 샤드 중 상당수가 테라바이트 단위의 데이터를 포함하고 있기 때문에 다양한 크기의 청크를 높은 처리량으로 마이그레이션할 수 있어야 함
     * 소스 샤드에 미치는 성능 영향 없음: 데이터베이스 청크를 샤드 간에 마이그레이션할 때, 사용자 쿼리에 대한 성능과 가용 처리량에 부정적인 영향을 미치지 않도록 소스 샤드의 성능과 처리량을 보존하는 것이 목표임
     * 이러한 요구사항을 해결하기 위해 목적 구축 서비스를 호출하여 데이터베이스 샤드 간 온라인 데이터 마이그레이션을 관리하는 데이터 이동 플랫폼을 구축했음
     * 데이터 이동 플랫폼의 Coordinator 컴포넌트는 온라인 데이터 마이그레이션과 관련된 여러 단계를 오케스트레이션하는 역할을 담당하며, 아래에 설명된 각 구성 단계를 수행하기 위해 관련 서비스를 호출함

    1단계: 청크 마이그레이션 등록

     * 먼저 청크 메타데이터 서비스에서 데이터베이스 청크를 소스 샤드에서 임의의 타겟 샤드로 마이그레이션하려는 의도를 등록함
     * 그 후 마이그레이션되는 청크에 대해 타겟 샤드에 인덱스를 구축함

    2단계: 대량 데이터 가져오기

     * 다음으로 시간 T에서 소스 샤드의 청크 스냅샷을 사용하여 데이터를 하나 이상의 데이터베이스 샤드에 로드함
     * 대량 데이터 가져오기를 수행하는 서비스는 다양한 데이터 필터를 수용하고, 필터링 기준을 충족하는 데이터 청크만 가져옴
     * 처음에는 간단해 보였지만 DocDB 샤드에 데이터를 대량 로드할 때 처리량 제한에 직면했음
          + 쓰기를 일괄 처리하고 최적의 대량 데이터 수집을 위해 DocDB 엔진 매개변수를 조정하려고 했지만 큰 성공을 거두지 못함
     * 하지만 DocDB가 B-트리 데이터 구조를 사용하여 데이터를 정렬한다는 점을 활용하여 삽입 순서를 최적화하는 방법을 모색했을 때 상당한 돌파구를 마련함
          + 컬렉션에서 가장 일반적인 인덱스 속성을 기준으로 데이터를 정렬하고 정렬된 순서로 삽입함으로써 쓰기 근접성을 크게 향상시켜 쓰기 처리량을 10배 높임

    3단계: 비동기 복제

     * 타겟 샤드에 데이터를 가져온 후, 마이그레이션되는 데이터베이스 청크에 대해 시간 T부터 소스에서 타겟 샤드로 쓰기 복제를 시작함
     * 비동기 복제 시스템은 CDC 시스템의 소스 샤드에 대한 쓰기로 인한 변경 사항을 읽고 타겟 샤드에 쓰기를 실행함
     * 작업 로그 또는 oplog는 각 DocDB 샤드의 특수 컬렉션으로, 해당 샤드의 데이터베이스에서 데이터를 변경하는 모든 작업의 기록을 보관함
          + 모든 DocDB 샤드의 oplog를 이벤트 스트리밍 플랫폼인 Kafka로 전송한 다음 Amazon S3와 같은 클라우드 객체 스토리지 서비스에 보관함
     * Kafka와 Amazon S3의 oplog 이벤트를 사용하여 하나 이상의 소스 DocDB 샤드에서 하나 이상의 타겟 DocDB 샤드로 변경 사항을 복제하는 서비스를 구축함
          + CDC 시스템의 oplog 이벤트에 의존하여 소스 샤드의 사용자 쿼리에 사용할 수 있는 읽기 처리량을 소비하여 사용자 쿼리 속도를 저하시키지 않고, 소스 샤드의 oplog 크기에 제약을 받지 않도록 함
          + 서비스는 타겟 샤드를 사용할 수 없는 경우에도 탄력적이며, 언제든지 체크포인트에서 동기화를 시작, 일시 중지 및 재개할 수 있도록 설계됨
          + 복제 서비스는 또한 복제 지연을 가져오는 기능을 제공함
     * 마이그레이션 중인 청크의 변경 사항은 소스 샤드에서 타겟 샤드로, 그 반대로 양방향으로 복제되며, 복제 서비스는 순환 비동기 복제를 방지하기 위해 발행하는 쓰기에 태그를 지정함
          + 이는 타겟 샤드로 트래픽을 전달할 때 문제가 발생하면 소스 샤드로 트래픽을 되돌릴 수 있는 유연성을 제공하기 위한 의도적인 설계 선택이었음

    4단계: 정확성 확인

     * 소스 샤드와 타겟 샤드 간 복제가 동기화된 후, 특정 시점 스냅샷을 비교하여 데이터 완전성과 정확성을 종합적으로 확인함
          + 이는 샤드 처리량에 영향을 미치지 않기 위해 의도적으로 내린 설계 선택임

    5단계: 트래픽 전환

     * 청크의 데이터가 소스에서 타겟 샤드로 가져오고 변경 사항이 활발히 복제되면 Coordinator에 의해 트래픽 전환이 오케스트레이션됨
     * 마이그레이션되는 데이터 청크에 대한 읽기와 쓰기 경로를 다시 지정하려면 먼저 소스 샤드의 트래픽을 잠시 중지하고, 청크 메타데이터 서비스의 경로를 업데이트하고, 프록시 서버가 타겟 샤드로 읽기와 쓰기를 리디렉션해야 함
     * 트래픽 전환 프로토콜은 버전 게이팅 아이디어에 기반을 둠
          + 안정 상태에서 각 프록시 서버는 DocDB 샤드에 대한 요청에 버전 토큰 번호를 추가함
          + MongoDB에 사용자 지정 패치를 추가하여 샤드가 프록시 서버에서 받은 요청의 버전 토큰 번호가 알고 있는 버전 토큰 번호보다 새로운지 확인하고 이 기준을 충족하는 요청만 처리할 수 있도록 함
     * 청크 경로를 업데이트하기 위해 Coordinator를 사용하여 다음 단계를 수행함:
         1. 먼저 소스 DocDB 샤드의 버전 토큰 번호를 올림. 버전 토큰 번호는 DocDB의 특수 컬렉션에 있는 문서에 저장되며, 이 시점에서 소스 샤드의 청크에 대한 모든 읽기와 쓰기가 거부됨
         2. 그런 다음 복제 서비스가 소스 샤드에서 미해결 쓰기를 복제할 때까지 기다림
         3. 마지막으로 청크 메타데이터 서비스에서 청크 경로를 타겟 샤드와 버전 토큰 번호를 가리키도록 업데이트함
     * 완료되면 프록시 서버는 청크 메타데이터 서비스에서 청크에 대한 업데이트된 경로와 가장 최신 버전 토큰 번호를 가져옴
     * 프록시 서버는 청크에 대한 업데이트된 경로를 사용하여 청크에 대한 읽기와 쓰기를 타겟 샤드로 라우팅함
     * 전체 트래픽 전환 프로토콜은 실행하는 데 2초 미만이 소요되며, 소스 샤드로 전달된 모든 실패한 읽기와 쓰기는 재시도 시 성공함

    6단계: 청크 마이그레이션 등록 취소

     * 마지막으로 청크 메타데이터 서비스에서 마이그레이션을 완료로 표시하고 소스 샤드에서 청크 데이터를 삭제하여 마이그레이션 프로세스를 종료함

  데이터 이동 플랫폼의 활용

     * DocDB 샤드 간에 온라인 방식으로 데이터 청크를 마이그레이션할 수 있는 기능은 Stripe의 성장 속도에 맞춰 데이터베이스 인프라를 수평적으로 확장하는 데 도움이 됨
     * 데이터베이스 인프라 팀의 엔지니어는 버튼 클릭만으로 크기와 처리량에 따라 DocDB 샤드를 분할할 수 있어 제품 팀을 위한 데이터베이스 스토리지와 처리량 여유 공간을 확보할 수 있음
     * 2023년에는 데이터 이동 플랫폼을 사용하여 데이터베이스 인프라 활용도를 개선함
          + 구체적으로 제품 애플리케이션에 투명한 방식으로 1.5페타바이트의 데이터를 마이그레이션하여 수천 개의 저활용 데이터베이스를 bin-pack하고, 기본 DocDB 샤드 총 수를 약 4분의 3 수준으로 줄임
          + 또한 데이터 이동 플랫폼을 사용하여 중간 주요 및 부 버전을 거치지 않고 한 단계에서 데이터를 MongoDB 이후 버전으로 포크리프팅하여 데이터베이스 인프라 플릿을 업그레이드함
     * Stripe의 데이터베이스 인프라 팀은 인터넷 경제의 성장에 맞춰 확장되는 견고하고 신뢰할 수 있는 기반을 구축하는 데 주력하고 있음
          + 현재 크기와 처리량을 기준으로 샤드 간에 데이터를 사전에 균형을 맞추는 열 관리 시스템을 프로토타입으로 제작 중이며, 트래픽 패턴의 변화에 동적으로 대응하는 샤드 자동 확장에 투자하고 있음
"
"https://news.hada.io/topic?id=15426","성체 줄기세포가 모든 세포로 변할 수 있다고 주장한 논문 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   성체 줄기세포가 모든 세포로 변할 수 있다고 주장한 논문 철회

성인 줄기세포 연구 논문 철회

  논문의 철회 배경

     * 2002년, Catherine Verfaillie 연구팀이 성인 줄기세포가 대부분의 체세포 유형으로 변할 수 있다는 논문을 발표함.
     * 이 논문은 출판 이후 약 4,500회 인용되었음.
     * 2007년, 데이터 문제로 인해 논문에 대한 의문이 제기되었고, 일부 오류가 수정되었음.
     * 2008년, 미네소타 대학교에서 Verfaillie의 또 다른 논문에서 조작된 이미지가 발견되었으나, Verfaillie는 조작에 관여하지 않았음.
     * 2009년, 해당 논문은 철회되었음.

  최근 조사와 철회 결정

     * Verfaillie는 KU Leuven으로 이직하여 명예교수로 재직 중임.
     * 2019-2020년, KU Leuven에서 Verfaillie의 연구에 대한 조사를 실시했으나, 연구 윤리 위반은 발견되지 않았음.
     * Elisabeth Bik이 PubPeer에 제기한 데이터 문제로 인해 _Nature_는 2024년 해당 논문을 철회함.
     * 논문 철회 이유는 원본 이미지를 찾을 수 없어 데이터의 신뢰성을 보장할 수 없기 때문임.
     * 대부분의 저자, 포함 Verfaillie,가 철회에 동의함.

  GN⁺의 의견

     * 연구 신뢰성: 연구 데이터의 신뢰성은 과학 연구의 기본임. 데이터 조작이나 오류는 연구 결과의 신뢰성을 크게 훼손함.
     * 재현 가능성: 과학 연구는 재현 가능해야 함. 원본 데이터를 찾을 수 없다면, 재현 가능성에 큰 문제가 생김.
     * 연구 윤리: 연구 윤리를 준수하는 것은 매우 중요함. 윤리적 문제는 연구자의 신뢰도와 연구 결과의 신뢰성을 모두 떨어뜨림.
     * 기술 발전: 줄기세포 연구는 의학 발전에 중요한 역할을 함. 그러나 잘못된 데이터는 오히려 연구 발전을 저해할 수 있음.
     * 대안 기술: 줄기세포 연구 외에도 유전자 편집 기술이나 인공 장기 배양 등 다양한 대안 기술이 존재함. 이러한 기술들도 함께 고려해볼 필요가 있음.

        Hacker News 의견

     * NIH 예산의 25%를 연구 검증에 사용해야 함: NIH 예산의 25%를 연구 검증에 사용하면 연구의 신뢰성과 품질이 크게 향상될 수 있음.
     * 연구 논문에 '계단식 삭제' 적용: 논문이 철회되면 그 논문을 인용한 모든 논문도 철회하는 방식으로 연구의 신뢰성을 높일 수 있음.
     * 논문 오류 수정이 결론에 영향 없음: 논문 오류가 수정되었지만, 결론에는 영향을 미치지 않음.
     * 조작된 이미지 포함 논문 철회: 조작된 이미지가 포함된 논문이 철회되었으며, 해당 연구자는 조작에 책임이 없음.
     * 연구 무결성 위반 없음: 조사된 출판물에서 연구 무결성 위반이 발견되지 않음.
     * 이미지 중복으로 신뢰성 상실: 이미지 중복으로 인해 논문의 데이터 신뢰성이 떨어짐.
     * 오해를 불러일으킬 수 있는 제목: 제목이 오해를 불러일으킬 수 있으며, 해당 이론은 노벨상 수상 연구임.
     * 연구 조작으로 경력 재시작: 연구 조작을 고발한 두 사람이 경력을 재시작해야 했음.
     * 연구 조작 문제의 심각성: 연구 조작 문제의 규모와 영향, 원인 및 해결 방안에 대한 논의 필요.
     * 논문의 명확한 주장: 논문이 명확한 주장을 하고 있으며, 지난 22년 동안 이를 지지하거나 반박하는 추가 연구가 있었는지 궁금함.
     * 가장 많이 인용된 철회 논문: 가장 많이 인용된 철회 논문이라는 점이 흥미로움.
     * 철회가 항상 잘못을 의미하는지: 논문 철회가 항상 잘못을 의미하는지, 아니면 단순히 잘못된 경우도 포함되는지 궁금함.
     * 연구 철회 동의: 연구자가 논문 철회에 동의했으며, 현재까지 4개의 논문이 철회됨.
     * 재현 연구의 중요성: 다른 연구를 재현하는 것이 중요하며, 이를 전문으로 하는 저널이 필요함.
"
"https://news.hada.io/topic?id=15415","SQLite Studio - 싱글 바이너리 SQLite DB 탐색도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 SQLite Studio - 싱글 바이너리 SQLite DB 탐색도구

     * 맥/리눅스/윈도우 지원
     * sqlite-studio <sqlite_db> 하면 로컬 웹서버를 실행하여 웹 UI로 기능 제공
     * 주요 기능
          + 오버뷰 페이지 : 공통 메타데이터(테이블, 인덱스, 뷰, 트리거, 테이블당 Row, DB 크기)
          + 테이블 페이지 : 각 테이블의 상세 정보(Row Count, 인덱스, 컬럼, 테이블 크기, DDL) 및 전체 데이터 무한 스크롤 가능 뷰
          + 쿼리 페이지 : SQL 입력하여 쿼리 가능(쿼리 입력하면 실행버튼 없이 실시간으로 결과 출력)
     * Rust + TypeScript + Shacdn/ui

   유사 프로젝트로는 DB Browser for SQLite 가 있습니다. 10년도 넘게 잘 쓰고 있습니다

   해당 프로젝트 메인테이너 중 한 명으로써 너무 반갑고 감사한 댓글이네요. 다음 주 월요일(UTC 기준)에 출시 예정된 차기 안정 버전도 기대해주시면 감사하겠습니다. :)
"
"https://news.hada.io/topic?id=15448","Show HN: 내가 가장 좋아하는 수학 미스터리를 부드럽게 소개하는 퍼즐 게임 제작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show HN: 내가 가장 좋아하는 수학 미스터리를 부드럽게 소개하는 퍼즐 게임 제작

영국과 아일랜드 지도 색칠하기

     * 영국과 아일랜드의 지도를 색칠하는 문제임.
     * 인접한 지역이 같은 색이 되지 않도록 색칠해야 함.
     * 클릭을 통해 색을 선택하고 적용할 수 있음.

GN⁺의 의견

     * 이 문제는 그래프 이론의 한 예로, 색칠 문제(coloring problem)로 알려져 있음.
     * 초급 소프트웨어 엔지니어에게는 알고리즘과 데이터 구조를 이해하는 데 도움이 됨.
     * 이 문제를 해결하기 위해서는 백트래킹(backtracking)이나 그리디 알고리즘(greedy algorithm)을 사용할 수 있음.
     * 유사한 문제로는 '사색 정리(four color theorem)'가 있으며, 이는 모든 평면 그래프는 네 가지 색으로 색칠할 수 있다는 이론임.
     * 이 문제를 통해 문제 해결 능력과 알고리즘 설계 능력을 향상시킬 수 있음.

        Hacker News 의견

     * 두 아이와 함께 봤는데 모두 즐거워했음. 영지식 증명 부분은 이해가 안 갔지만, 네 색 정리 부분은 흥미로웠음. 아이들과 함께 지도를 색칠해보며 비유클리드 공간에서의 적용 여부를 궁금해했음. 구에서는 최대 네 색, 토러스에서는 일곱 색이 필요함.
     * 첫 번째 단계에서 사용한 세 가지 색을 명시하고, 세 번째 단계에서 드러난 색이 서로 다르고 그 세 가지 색 중 하나인지 확인해야 함.
     * ""매우 어렵다""는 표현이 오해를 불러일으킬 수 있음. 충분히 노력하면 답이 나올 것처럼 들림.
     * 네 색이 모든 임의의 지도에 충분하다는 것을 알고 있었지만, 다섯 색이 필요한 지도를 그려보는 것이 매우 보람 있었음. 이론적으로만 알고 있던 것을 직관적으로 이해하게 됨.
     * 과학 주제에 관한 박물관과 접촉해보는 것이 좋을 것 같음. 독일에 있는 MINT 박물관들이 이와 같은 전시물을 많이 다루고 있음. 아이들도 즐길 수 있을 것 같음.
     * 상호작용과 흐름은 좋았지만 영지식 증명 예제는 이해하기 어려웠음. 개념은 알지만 예제가 증명인지 확신이 안 됨. 과정이 단순화되면서 중요한 요소가 빠진 것 같음.
     * 아일랜드 공화국은 영국의 일부가 아님. '브리티시 아일스'라는 용어가 더 적절함. 이 구분은 중요함.
     * 다섯 색 지도를 만드는 것이 불가능하다는 것을 알지만 시도하는 것이 재미있었음. 이게 버그인지 궁금함. 왜 세 색이 아닌지 이해가 안 됨.
     * 이 예제는 내가 해본 것 중 가장 멋진 교육 예제 중 하나였음. 다섯 색 지도가 ""매우 어렵다""는 경고가 있어서 좋았음. 네 색이 모든 지도에 충분하다는 것을 듣는 것보다 훨씬 기억에 남음. 학교에서 이런 식으로 가르쳤으면 좋겠음.
     * ""수학자들이 증명이 맞다고 믿는다""는 표현이 적절하지 않음. 증명은 컴퓨터로 공식적으로 검증되었음. 수학자들이 증명에 완전히 확신하지 못하는 것처럼 들릴 수 있음.
"
