"https://news.hada.io/topic?id=22575","페일슈토르히페일슈토르히

     * 페일슈토르히는 아프리카에서 겨울을 나던 중 화살에 맞은 채로 유럽까지 돌아온 백로임
     * 1822년에 발견된 로스토커 페일슈토르히는 유럽 조류의 이동 경로를 과학적으로 증명하는 데 중요한 역할을 함
     * 이전에는 조류가 겨울에 변태하거나 잠복한다는 다양한 오해가 있었음
     * 총 25건의 페일슈토르히 사례가 독일에서 기록된 바 있음
     * 페일슈토르히 발견은 유럽 조류의 장거리 계절 이동에 관한 과학적 전환점임


페일슈토르히의 정의와 사례

     * 페일슈토르히(Pfeilstorch) 란 독일어로 '화살이 박힌 황새'를 의미함
     * 주로 유럽에 서식하는 백로로, 아프리카에서 겨울을 보내는 동안 화살이나 창에 맞았음에도 그대로 유럽까지 돌아온 경우를 일컬음
     * 2003년 기준으로 약 25건의 사례가 독일 내에서 공식적으로 기록됨

로스토커 페일슈토르히의 역사적 의의

     * 가장 처음이자 가장 유명한 사례는 1822년 Klütz 마을 근처에서 발견된 백로임
     * 이 새는 아프리카 중부에서 온 75센티미터 길이의 창이 목에 박혀 있었음
     * 채집 이후 박제 처리되어 현재는 University of Rostock의 동물학 컬렉션에 전시되어 있으며, 여기에서 유래해 '** 로스토커 페일슈토르히**'라 부름

조류 이동 연구의 전환점

     * 로스토커 페일슈토르히 사례는 유럽 조류의 이동을 과학적으로 이해하는 데 핵심적 단서가 됨
     * 당시에는 조류의 계절별 사라짐을 설명하기 위해 변태, 잠복, 심지어 물속에서 겨울을 지낸다는 등의 이론이 널리 퍼져 있었음
     * 심지어 당시 동물학자들조차도 조류가 다른 동물로 변한다고 주장하기도 했음
     * 이 사례를 통해 새들이 멀리 떨어진 월동지로 장거리 이동한다는 사실이 명확해졌음

다른 사례 및 관찰 결과

     * Ernst Schüz는 화살에 맞은 다양한 조류 사례를 기록함
          + 탄자니아에서 채집된 white-bellied stork
          + 헝가리에서 발견된 short-toed eagle
          + 핀란드의 honey buzzard
          + black kite 등
          + 이누이트 화살이 박힌 백조와 바다오리도 관찰
     * 1969년 그는 화살이 박힌 채 발견되는 새의 경우가 총기의 등장으로 인해 줄어들고 있음을 언급함

결론

     * 페일슈토르히의 발견은 조류 이동에 관한 인류의 이해를 크게 확장시킨 중요한 전환점으로 작용함
     * 백로 외에도 다양한 조류들이 비슷한 사례로 실존이 확인됨
     * 조류 이동에 대한 오해를 해소하고, 현대 생물학의 지식 기반 형성에 기여함

        Hacker News 의견

     * 내가 일하던 커뮤니티 칼리지 근처 retention pond에서 목에 화살이 박힌 Canada goose를 본 적 있음, 화살이 거의 지면과 평행하게 박혀 있었음, 현지 야생동물 구조단체에 연락했으나 이후 소식을 듣지 못했음, 그 새가 생각보다 잘 돌아다녀서 놀라웠음, 구조되어 화살이 제거됐기를 바람
          + 새가 그렇게 잘 살아가는 모습을 보고 깜짝 놀라게 되는 게 바로 Survivor Bias(생존자 편향)에 해당함, 만약 그것을 거위 실루엣에 빨간 화살들을 여러 개 그려놓는 이미지로 만든다면 흥미로울 것 같음
     * Monty Python And The Holy Grail에서 King Arthur가 제비들이 겨울에는 남쪽으로 간다는 걸 아는 게 시대착오적인 설정인 것인지 궁금함
          + 그 영화에서 유일하게 역사적 오류인 부분임
          + 그건 아프리카 제비인가, 유럽 제비인가에 따라 다름
     * 신기한 사실이 있음: 아프리카에서 겨울을 보내다 화살이나 창에 맞아 다친 후 몸에 그 무기를 꽂은 채로 유럽으로 돌아온 백로(stork)의 사례가 있음, 1822년에 이런 현상이 발견되어 새들이 정말로 이주한다는 사실을 사람들이 알게 됐다고 함, 이전까지는 그렇게 널리 알려진 게 아니었는지 궁금함. 정말 멋진 발견임
          + Barnacle goose 신화도 함께 참고하면 좋음, 우리의 현대적인 시각으로 보면 원인과 결과에 대한 직관이 얼마나 쉽게 우리를 잘못된 결론으로 이끌 수 있는지 새삼 느끼게 됨
          + 아래쪽에 보면 이런 내용도 있었음: 당시에는 새들이 그냥 다른 종류의 새나 쥐로 변한다거나 겨울에는 물속에서 겨울잠을 잔다고 여기는 이론들이 실제로 동물학자들에 의해 퍼졌었음
          + 이 이야기 자체가 자연과학의 발전 못지않게 독일식 합성어의 어원 이야기가 들어가 있음, 이것을 ""사용자 이탈에 대한 시장 조사 그룹은 유저 마이그레이션의 화살 맞은 황새 같은 역할""이라고 비유하는 식의 경영 아포리즘으로 써먹으면 재밌을 것 같음
          + 이주(migration)는 당시에도 하나의 이론이긴 했지만 실제로는 증명된 것이 아님
          + 어떤 사람들은 새들이 겨울에 달까지 날아간다고 생각하기도 했음
     * ""그 시절엔 새들이 겨울에 다른 종류의 새나 쥐로 변하거나, 물속에서 겨울잠을 잔다고 생각했다""는 이야기를 보고, 그렇다면 아프리카 사람들은 어떤 생각을 했는지 궁금해짐, 그들 역시 새들이 사라지는 현상을 봤을 테니까
          + 아프리카 주민들도 때로는 몸에 작은 돌덩이나 탄환(자갈)이 박힌 새들을 보고 신기해했을 수도 있는데, 사냥과 총기는 친숙하지 않으니 그런 현상을 인간의 사냥과 연결짓지 못했을 수도 있음
          + 새들이 달에서 겨울잠을 잔다는 생각은 정말 특이한데, 1800년대 초기 SF 소설을 좋아하면 그럴듯하게 느껴질 것 같음
     * 이 유명한 화살 맞은 황새 이야기를 들으면 대부분 바로 생존자 편향, 전쟁에서 돌아온 손상된 비행기 이야기를 떠올리게 됨
          + 생각해보면, 우리는 오랜 시간 동안 황새의 잘못된 부분만 보수하고 있었던 셈임
     * 흥미로운 점은 예전 사람들은 새가 겨울에 외형이 변하거나 겨울잠을 잔다고 생각했다는 사실임
          + 맞음, 나도 그 부분이 눈길을 끌었음, 난 barnacle(따개비)에 대해 찾아보다가 Barnacle Goose가 사실은 따개비에서 태어나는 줄 알았다는 유래를 알게 됐음, 관련 위키피디아 참고, 과거엔 미신이 정말 팽배했기에 뭔가 현상에 대해 알기도 어려웠고, 그래서 정말 별의별 상상이 다 허용됐던 시대였다는 것이 실감남
          + 썩는 물질이나 똥에서 파리가 그냥 저절로 생긴다고 믿었던 이론이 떠오름, 과연 지금 우리가 당연하게 여기는 믿음 중에도 나중에 보면 황당한 오해가 있을지 궁금함
          + 사실 기사에서 ""사람들이 새가 변신하는 걸 믿었다""고 직접적으로 말하는 건 아니고, 그냥 표현이 부정확했을 뿐임, Pfeilstorch(화살 맞은 황새) 사례가 아프리카와 유럽 사이의 이주를 결정적으로 입증한 증거임, 실제로는 조류 이주설이 더 오랜 역사와 신빙성을 가지고 있었던 것이 맞을 수 있음, Google Books Ngram Viewer에서 'migratory birds'라는 표현이 이미 18세기 이전에 쓰였음을 볼 수 있음, 독일어 'Zugvogel'도 18세기 중반부터 자주 등장했음
          + 아리스토텔레스는 여름에는 Redstarts가 겨울에는 Robins로 변한다는 주장을 했었음, 관련 링크
     * 화살이 꽂힌 채로 다니는 건 분명 생활에 큰 부담이었을 것임, 유명 게임에서 ""나도 모험가였지만, 목에 화살을 맞고 나서...""라는 대사를 연상케 함
     * 영국 옥스포드에 있는 Pitt-Rivers museum에도 비슷한 사례의 전시품이 있음, 전 세계에서 수집된 놀라운 유물로 가득 찬 곳이어서 방문 가치 높음, 박물관 링크
     * 화살이 목에 박힌 상태는 참새에게 통증뿐 아니라 엄청난 공기저항까지 추가했을 것임
"
"https://news.hada.io/topic?id=22614","코드래빗 취약점 익스플로잇: 단순 PR에서 100만 레포 RCE 및 쓰기 권한 획득까지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            코드래빗 취약점 익스플로잇: 단순 PR에서 100만 레포 RCE 및 쓰기 권한 획득까지

     * 보안 연구팀이 CodeRabbit의 프로덕션 서버에서 원격 코드 실행(RCE) 및 API 토큰·비밀 정보 유출에 성공함
     * Rubocop을 활용한 PR로 환경 변수 탈취, PostgreSQL 접근과 100만개 레포지토리 읽기/쓰기가 가능했음
     * GitHub App의 프라이빗 키 유출로 퍼블릭/프라이빗 레포 포함 대규모 저장소에 악성코드 주입, 소스 코드 수정 등 실질적 피해가 가능했음
     * CodeRabbit 측은 취약점 신고 후 수시간 내로 즉각 대응하고 보안 조치를 강화했음
     * 외부 도구 실행 시 샌드박스 격리·최소 권한·네트워크 차단 등으로 보안 사고 방지 필요성 강조됨


소개

     * 2025년 1월, Kudelski Security 연구팀은 CodeRabbit의 심각한 보안 취약점을 공개함
     * PR 리뷰 자동화 도구로 널리 쓰이는 CodeRabbit에서 remote code execution(RCE), 환경 변수 및 민감 정보 유출, 100만개가 넘는 레포지토리 Read/Write 권한 확보라는 중대한 문제가 확인됨
     * 이 글은 Black Hat USA에서 발표된 공개 취약점 내용의 상세 분석을 담고 있으며, 코드형 리뷰 도구와 연동 시스템 취약점의 실사례로 참고 가치가 높음
     * 보고된 취약점은 신고 직후 빠르게 패치됨

CodeRabbit 개요

     * CodeRabbit은 GitHub/GitLab Marketplace에서 가장 많이 설치된 AI 기반 코드 리뷰 앱임
     * 양대 플랫폼에서 100만개 레포 및 500만 pull request를 리뷰함
     * 사용자가 PR을 생성 또는 갱신할 때마다, AI 엔진이 코드를 분석해 코멘트와 제안을 자동 생성함
     * 코드 요약, 보안 취약점 탐지, 개선점 제시, 다이어그램 생성 등 개발 생산성 향상 효과가 큼

CodeRabbit 사용 및 권한 구조

     * Pro 플랜은 linter·SAST(정적 분석) 도구 연동 기능을 제공함
     * GitHub 계정 인증 및 앱 설치 시 선택한 레포지토리에 읽기/쓰기 권한을 부여하게 됨
     * 이 권한 관리가 만약 악용된다면, 설치된 모든 레포의 코드에 직접적인 영향을 끼칠 수 있음

외부 도구 실행 및 익스플로잇 발견

     * CodeRabbit은 PR 내 코드 변경을 감지하면 다수의 외부 정적분석 도구(예: Rubocop) 를 자동 실행함
     * Rubocop은 .rubocop.yml 설정파일을 사용해 외부 Ruby 확장파일(ext.rb 등) 을 로드할 수 있게 설계됨
          + 공격자는 .rubocop.yml 및 ext.rb에 악성코드를 삽입 후 PR을 제출, CodeRabbit이 원격 서버에서 해당 코드를 실행하도록 유도
     * 이 기법으로 실행된 코드가 서버의 모든 환경변수를 공격자의 서버로 전송함

환경 변수 유출 내용 분석

     * 유출된 환경 변수에는 다음과 같은 다양한 서비스의 API Key, 토큰, 암호 등이 포함되어 있었음
          + Anthropic/OpenAI API 키, Encryption salt/password, GitHub App 프라이빗 키, PostgreSQL 접속정보 등
     * RCE를 통해 데이터베이스 접근, 코드 변경, 서비스 내부 정보 유출 등 2차 피해가 크고 파급력이 높음
     * 실서버에서 악의적 탐색을 더 진행할 수 있었으나, 서비스 운영을 고려해 최소한만 확인 후 중단

100만개 레포지토리 Read/Write 권한 획득

     * 환경 변수에 포함된 GITHUB_APP_PEM_FILE(프라이빗 키) 를 이용해 GitHub API에 인증 가능
     * CodeRabbit이 접근 가능한 모든 저장소(퍼블릭/프라이빗 포함)에 대해
          + 소스코드 읽기/쓰기, 릴리즈 파일 대체(공급망 공격), git 이력 변경 등 매우 강력한 권한 행사 가능
     * 재현 코드(PoC) 가 공개되어 실제로 악용 가능성이 입증됨

PoC 요약

     * PyGitHub 등의 라이브러리를 사용하여 유출된 프라이빗 키, App ID 등으로 임의의 레포지토리 액세스 토큰을 발급
     * 이 토큰을 통해 프라이빗 레포지토리 복제, 파일 변경, 신규 커밋, 릴리즈 파일 변조 등이 자동화 가능함

CodeRabbit 사내/비공개 레포지토리 침해 가능성

     * CodeRabbit 조직 역시 자사 서비스에 설치하여 사용 중이므로, CodeRabbit의 내부 소스코드 레포삭 접근 및 복제도 가능했음
     * 조직 이름만 알면 설치 ID 조회 후 곧바로 해당 레포 목록에 접근하는 것이 가능함

영향 요약

     * 프라이빗 레포지토리 무단 접근·개인정보 유출
     * 소스코드 조작, 악성코드/백도어 삽입 등 공급망 공격 위협
     * GitHub 액션 등의 추가 취약점 연계 가능성
     * 직접적 RCE로 인한 데이터 파괴, 서비스 마비, 타 서비스 연쇄 피해 초래

맥락과 AI 판단의 한계

     * 공격 중에도 PR 자체는 CodeRabbit에 의해 정상적으로 리뷰되고, 취약점 경고 코멘트를 남기긴 했으나 실제로는 위협 구문을 식별하지 못함
     * ""AI 코드 리뷰 도구""가 실제 위험상황 맥락까지 파악하진 못한다는 점을 보여줌

대응 및 권고사항

     * CodeRabbit은 취약점 신고 수시간 내 Rubocop 비활성화, 비밀 정보 교체, 시스템 감사를 수행함
     * 샌드박스 미 적용 도구(Rubocop)에서 문제 발생, 조치 후 모든 외부 도구를 격리 환경에서 실행하도록 개선
     * 보안 강화를 위해, 외부 도구 실행환경에 환경 변수 최소화, 네트워크 접근 IP 제한, 인터넷 접근 차단 등 방어적 설계 필요성 강조

책임 있는 공개와 결론

     * 2025년 1월, 신고 후 신속한 대응과 조치가 이루어짐
     * PoC만으로 그쳤으나, 악의적 공격자라면 고가치 레포 선별, 대규모 랜섬웨어, 파괴적 공급망 공격 등에 쉽게 악용 가능성 확인
     * 외부 분석 도구·AI 기반 자동화 서비스와 연계 시, 샌드박스 및 최소 권한 원칙 구현의 중요성이 재확인됨

        Hacker News 의견

     * 오 이런, 정말 심각한 취약점임. 이번에 수정됐다니 다행이지만, 처음에 이런 문제가 있었던 것 자체가 문제임. 클라우드 플랫폼에서 사용자 코드를 분석하는 시스템을 만들 때 가장 기본 규칙은 분석기는 반드시 격리된 환경에서 실행해야 한다는 것임. 플러그인을 통해 직접 코드 주입이 일어날 수 있고, linter/분석기/컴파일러는 복잡한 소프트웨어로서 취약점 표면적이 넓음. 임의의 저장소에 이런 도구를 공유 환경에서 실행하는 것이 위험하지 않다고 가정해서는 절대 안 된다고 생각함. 나도 코드 분석 플랫폼을 운영했는데, 고객 저장소에 우리가 직접 개발한 분석기를 돌릴 때도 샌드박스 환경에서 동작하도록 설계함. 환경 변수나 네트워크 요청 권한도 포함하지 않았지만, 분석은 샌드박스에서만 실행됨. 코드 분석을 안전하게 하는 유일한 방법임
       https://github.com/getgrit/gritql
     * Coderabbit 유료 구독을 해지함. 기업이 문제를 인정하기 위해 HN에서 바이럴하게 퍼질 정도가 돼야 하는 상황이 늘 걱정임. 공식 블로그 어디에도 이번 취약점에 대한 언급이 없고, 오늘 새로운 글도 없음. 실수는 누구나 할 수 있다고 생각하지만, 이런 일이 생겼을 때 투명하게 공개하지 않는 점이 기업 이미지를 훼손한다고 봄
          + https://coderabbit.ai/blog/…
          + 두 기사 모두 오늘 올라왔음. 보기에 연구팀과 coderabbit이 동시에 공개하기로 합의한 것 같음. 이런 동시 공개는 고객 데이터 유출이나 정황 증거가 없는 한 반드시 해야만 하는 게 아니라, 업체가 굳이 공개하겠다고 하는 경우에 종종 있는 관행임. 보안 연구원들이 대응을 칭찬하고 있다는 건 좋은 신호로 보임
          + 대다수 보안 버그는 별다른 공지 없이 조용히 해결됨. 만약 고객 정보 유출이 없다면(그리고 그건 보통 확인 가능함), 법적으로 공개가 강제되지 않음. 굳이 공개할 이점이 없는데, 왜 꼭 그래야 한다고 생각하는지 모르겠음
     * ""익스플로잇이 실행되는 동안 CodeRabbit이 직접 PR에 위험 경고 댓글을 남기는 데, 실상은 그 PR을 실행하면서 해킹이 일어난 상황""이 정말 기이함. AI가 자신이 해킹당하고 있다고 이야기하는 세상에 살고 있는 현실이 이질적으로 느껴짐. 또한, CodeRabbit 팀이 재빠르게 대응하기는 했지만, '다른 업체들은 조사 연락에도 전혀 답변하지 않았고, 여전히 취약하다'는 점이 더 걱정스러움. CodeRabbit 팀에게는 박수를 보내지만, 모두 조심해서 움직여야 할 것임
          + CodeRabbit이 자기 시스템에서 실행된 익스플로잇을 자기 스스로 리뷰한 모습이 재밌음
          + 사실 실제로는 anthropic 모델이 익스플로잇을 말해준 거고, coderabbit 시스템은 무시한 셈임
          + 결국 AI가 똑똑한 게 아니라, 그냥 잘 맞추는 추론 시스템이라는 사실을 또 한번 보여줌
     * CEO 공식 입장문 일부에서 ""Rubocop이 샌드박스 환경 밖에서 돌아서 문제가 됐다""고 하는데, 솔직히 좀 의심스러움. 왜 특정 하나만 완전히 다르게 동작했으며, 그게 하필 뚫린 작업임?
          + 왜 거짓말로 보이는지 모르겠음. 이런 실수는 흔하게 발생함
          + 애초에 Kudelski Security 쪽 연구자들이 여러 정적 분석 도구를 시도해봤을 확률이 높음. Rubocop만 독특하게 작동한 것. 기사에서도 다양한 접근 시도 흔적이 나타남
          + ""왜 어떤 작업만 다르게 구성되어 있었는지"" → 누군가 실수한 것. 이런 일은 있을 수 있음. ""왜 뚫린 서비스가 하필 뚫렸냐""라는 질문에는, 취약한 서비스가 공격당하는 게 오히려 자연스러운 시나리오라고 생각함
     * 정말 흥미로운 글이었지만, 사실 놀라울 일도 아님. 사용자들이 아무 생각 없이 권한이 넓은 앱을 잔뜩 추가하고, github 권한 시스템도 문제라 이런 일은 필연적으로 일어날 수밖에 없었음. 많은 사람들이 github 앱의 저장소 쓰기 권한, 클라우드 권한까지 남용적으로 허용함. 브랜치 보호가 있어도, pull request를 통해 github actions에서 특권 접근이 가능함. 제대로 설정하려면 github oidc audience를 수정해야 하고, 문서화도 잘 안 되어있음. 앱 개발사에 권한을 줄이고 일부 기능을 비활성화한 별도 버전을 만들어달라고 요청해도 대부분 관심도 없고, 보안 문제를 이해하지 못함. github에서 앱 접근 권한을 더 세분화할 수 있게 해야 하며, 전반적으로 권한 자체가 더 세분화되어야 함
     * 정말 충격적임. 아직 글을 다 읽지도 못했는데, 너무 많아서 정신이 혼미해짐. 해커가 10만~100만 단위의 오픈소스툴/라이브러리/소프트웨어 배포 파일에 멀웨어를 심을 수 있었다는 대목에서는 세상이 멸망할 수도 있었단 생각까지 듦. 앞으로 얼마나 많은 유사한 문제가 남아있을지 상상조차 하기 어려움
          + 이제 'Github Apps' 자체가 위험하다는 생각이 듦. CodeRabbit이 안 뚫렸다고 해도, 이런 업체가 항상 성실하게 행동할 거라는 보장이 어디에 있음? 내부 직원이 악의적 행동을 하지 않는다고 누가 보장할 수 있음? 일반 SaaS에서 개인정보 관리는 한 가지 차원인데, 여기는 타깃형 공급망 공격의 키를 쥐고 있어서 대혼란을 초래할 수 있음
          + 소프트웨어 업계에도 최소한의 안전장치나 규제가 도입되어야 함. 지금처럼 아무나 아무 실수나 저질러도 아무 책임도 없는 상태는 정말 비정상적임
     * 이런 심각한 보안 실패는 ""침해사고"" 또는 ""사건""으로 분류되어, 언론을 통해 의무적으로 공개하라고 해야 한다고 생각함. 7,000여 고객, 100만개 저장소에 접근할 수 있는 도구가, 기껏해야 11살짜리도 만들 수 있는 단순 익스플로잇에 뚫렸다는 사실임. 이렇게 쉬운 해킹이라면 bot, 블랙햇, APT 등이 이미 침투해서 은밀히 자리 잡았을 가능성이 크다고 볼 수 있음. 화이트헷이 공개하기 전 이미 들어와 있었다면, 취약점 패치는 새로운 공격자를 막을 뿐, 이미 잠입해 있는 존재는 퇴치되지 않을 수도 있음. 보안 어려운 건 알지만, 정말 정신 차려야 한다고 말하고 싶음
          + ""의무 공개해야 한다""면 Cyber Resilience Act를 참고할 수 있음
          + Code Rabbit은 'vibe coder' 회사인데, 기대할 게 뭔지 모르겠음. 보안 사고를 숨기고, 구글 클라우드 블로그에도 마케팅 글만 올려서 해킹 사실도 언급 안 하고, 여전히 백도어 없는 증거도 못 주는 상황임
          + 나 같은 일반 사용자는, 이렇게 복잡하고 강력한 서비스가 실수로 모든 소중한 데이터를 외부로 유출시킬 수 있다는 사실에 앞으로 이런 걸 계속 써야 하는지 고민하게 됨. 조직이나 정부, 은행 외주 등 수많은 곳에서 이런 앱이 쓰이는데, T&C만 동의하면 제3자 접근권을 넘기는 구조임. >>“모든 회사에 이런 일이 생길 수 있다는 안심 문구”<<는 제공자는 위로하지만 사용자에겐 더 큰 걱정거리가 됨
     * 문제 중 하나는 각종 코드 분석기, 번들러, 컴파일러(예: Rust 컴파일러 등)는 아무 경고 없이 임의 코드를 실행할 수 있다는 점임. 예를 들어, 해커가 채용과제라면서 저장소를 하나 보내고, 내가 “npm install”이나 Rust 컴파일 명령을 실행하면 내 컴퓨터가 곧바로 해커 손에 넘어갈 수 있음. 혹은 회사 동료 한 명 PC가 해킹당해 악성코드가 저장소에 들어가면, 결국 글로벌 대기업 전체가 외국 해커에 점령당하는 상황도 가능함. 이런 구조를 만든 건 npm과 Rust 컴파일러임. 이런 툴들은 외부 명령 실행 때마다 명시적 확인을 요청하는게 필요함(명령 허용목록을 캐시해 묻지 않게 할 수는 있음). 리눅스도 개발자가 쉽게 쓸 수 있는 안전한 샌드박스를 제공해야 하는데, 지금은 일일이 직접 만들어야만 함. 게다가, JS 패키지 설치 등 경우에 따라 외부 코드 실행이
       필요하지 않은 작업도 있음. 그리고 환경변수로 비밀과 설정을 넣는 건 정말 나쁜 방법임. ""12-factor app""을 만든 사람은 커맨드라인 스위치나 설정 파일이 있다는 걸 모르는 것 같음
          + 코드 분석기/빌더/linter를 저장소에 돌리는 건, 원본 코드 자체를 그냥 실행하는 것보다 결코 더 안전하지 않음을 항상 인지해야 함
          + Rust 컴파일러(및 LLVM 기반 컴파일러)는 임의코드 실행 취약점이 있다고 가정하는 게 안전함. 하지만 공식적으로는 build system인 cargo에만 해당하는 기능이고, rustc(컴파일러 자체)는 아님
          + 환경변수 대신 커맨드라인/설정파일 쓰면 프로세스 테이블에서 값이 노출됨. ""ps"" 명령만 해도 모든 정보가 다 보이는 문제임
          + ""절대 실행되지 않는 가치 있는 코드가 있을 거란 암시""가 재밌음
          + ""모든 외부 커맨드 실행 때마다 명시적으로 확인""하는 방식은 소용없음. 문제는 외부 명령이 아니라 임의 코드 자체 실행이기 때문임. 이런 코드는 모든 시스템 API, syscall에 접근 가능하므로 확인할 방법이 없음. Python/pip도 동일한 문제를 갖고 있으니 이미 늦었다고 봄
     * ""원하는 대로 github 앱이 될 수 있는"" 권한 열쇠(프라이빗 키)가 환경 변수에 보관됐던 건 정말 최악의 관행임. 누구나 해킹당할 수는 있지만, 이건 비밀 관리의 가장 기본 중 기본임. github 공식 문서에도 환경 변수에 프라이빗 키를 넣지 말라고 분명히 나와있음. 정말 기초 중의 기초임
       https://docs.github.com/en/apps/…
          + 만약 비밀이 서명을 위한 게 아니라면, 결국은 vault에서 앱으로 가져와야 하기 때문에 프로덕션 시스템에 접근할 수 있다는 건 곧 그 비밀에도 접근할 수 있다는 뜻임. 물론 신뢰할 수 없는 코드 실행 상황에서는 환경을 격리하고, 이런 키를 전달하지 않아야 했지만, 보통은 흔하지 않은 케이스임
          + CodeRabbit의 Howon임. 우리는 앱 비밀 정보용으로 클라우드 제공업체의 key vault를 사용하고, GH private key도 포함되어 있음
     * Rubocop 설정 파일로 확장 Ruby 파일 경로를 지정할 수 있다는 문구를 읽는 순간 ""설마 사용자 확장 도구를 프로덕션 환경에 직접 돌린 건가..."" 했는데, 아니나 다를까 실제였음. 물론 이런 구멍 하나만 막았다고 제대로 안전한 건 아님. 대부분 linter가 공격적 입력에 대해 감사를 받거나 퍼징이 된 것도 드물텐데, 이건 그냥 문 열어두고 “해킹해 주세요!”라는 네온사인을 켜둔 격임
          + CEO의 공식 답변에 나온 “Rubocop이 샌드박스 밖에서 돌아갔다”는 부분을 보면, 그게 진짜 문제의 핵심은 아닌 거 같음
"
"https://news.hada.io/topic?id=22583","GenAI를 통한 소프트웨어 엔지니어링 [유튜브]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GenAI를 통한 소프트웨어 엔지니어링 [유튜브]

     * 발표자 Gergely Orosz는 Pragmatic Engineer 뉴스레터·팟캐스트 운영자이자 전직 Microsoft, Uber 엔지니어로, 현장에서 본 GenAI 도입 현실을 공유함
     * CEO·창업자들의 과장된 기대와 달리, 실제 개발자 경험은 도구의 한계와 생산성 편차로 인해 더 복잡한 양상을 보임
     * AI 개발 도구 스타트업·빅테크는 내부 사용률이 높고 투자도 활발하지만, 일부 스타트업과 특수 분야는 여전히 낮은 효용성을 보고 있음
     * 독립 개발자와 베테랑 엔지니어들은 최근 GenAI의 전환점을 체감하며, 코딩 생산성과 창의성 확장에 긍정적 반응을 보임
     * 켄트 벡은 LLM 도입을 인터넷·스마트폰급 패러다임 전환으로 평가하며, 새로운 시도와 실험을 강조함


발표자 소개

     * 게르게이 오로스(Gergely Orosz)
          + Pragmatic Engineer 뉴스레터·팟캐스트 운영
          + JP Morgan, Microsoft(Skype), Skyscanner, Uber 등에서 10년간 엔지니어 경력
          + 현재 GenAI가 소프트웨어 엔지니어링에 미치는 영향을 집중 탐구

과장된 기대와 현실

     * Microsoft CEO: ""AI가 전체 코드의 30% 작성""
     * Anthropic CEO: ""1년 내 100% 코드가 AI로 생성""
     * Google의 Jeff Dean: ""AI가 곧 주니어 개발자 수준에 도달""
     * 그러나 현실:
          + AI 에이전트가 버그를 만들어 수백 달러 비용 발생
          + Microsoft Build 시연에서 AI가 복잡한 코드 수정에 실패

AI 개발 도구 스타트업

     * Anthropic:
          + 내부 엔지니어 전원이 Cloud Code 사용
          + 코드의 90% 이상이 AI로 작성됨
          + MCP(Model Context Protocol) 도입 → IDE·DB·GitHub 등 연결 가능, 대규모 확산 중
     * Windsurf: 코드의 95%가 AI 작성
     * Cursor: 40~50% AI 작성, “절반은 잘 되고 절반은 한계”

빅테크 현황

     * Google:
          + 자체 IDE Cider에 AI 기능 내장 (자동완성·리뷰·코드 검색)
          + 최근 1년간 내부 도입 급속 확산
          + SRE 조직은 10배 더 많은 코드 라인 대비 인프라 강화 중
     * Amazon:
          + Amazon Q Developer Pro → AWS 관련 작업에 강력
          + Anthropic 모델(Claude)도 내부 문서 작성·평가 시즌에 적극 활용
          + MCP 서버를 광범위하게 통합 → 내부 툴 자동화 확산

스타트업과 개별 사례

     * Incident.io:
          + 팀 전체가 AI를 적극 실험하며 Slack에서 팁 공유
          + Cloud Code 도입 이후 사용률 급증
     * 바이오테크 스타트업:
          + 자체적으로 novel 코드 작성 필요성이 커서 LLM 효율성 낮음
          + 여전히 직접 코딩이 더 빠르다고 평가

독립 개발자 및 베테랑 엔지니어

     * Armin Ronacher (Flask 창시자): 에이전트를 가상 인턴처럼 활용, 생산성 증대 체감
     * Peter Steinberger (PSPDFKit 창업자): 언어 장벽이 낮아지고 “기술적 불꽃이 되살아났다”는 평가
     * Simon Willison (Django 공동 창시자): 최근 모델 개선으로 “AI 코딩 에이전트가 실용적 단계” 진입
     * Brigita (Thoughtworks): LLM은 스택 전체를 아우르는 새로운 추상화 도구
     * Kent Beck (TDD 창시자): “52년 경력 중 지금이 가장 즐겁다”, LLM을 인터넷·스마트폰급 혁신으로 평가

남은 질문들

    1. 왜 CEO·창업자가 엔지니어보다 더 열광하는가?
    2. 실제 AI 도구 사용률은 주간 기준 50% 수준, 아직 보편화는 아님
    3. 시간 절약 효과: DX 조사에 따르면 주간 3~5시간 절약 수준, 과장된 “10배 생산성”과 차이 큼
    4. 왜 개인 단위에서는 효과가 큰데 조직 단위에서는 덜 효과적인가?

결론

     * LLM은 어셈블리 → 고급 언어 전환에 준하는 생산성 도약 가능성
     * 단, AI는 결정적(deterministic)이지 않고, 효율은 팀·분야별 편차 큼
     * 메시지: 지금은 실험하고 학습할 시기, “싸졌고 가능해진 것들을 적극 시도해야 한다”는 점을 강조
"
"https://news.hada.io/topic?id=22509","[버그] Claude가 거의 모든 경우에 "You're absolutely right!"이라고 말함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [버그] Claude가 거의 모든 경우에 ""You're absolutely right!""이라고 말함

     * Claude Code 1.0.51 환경에서 답변의 상당 부분에 지나친 찬사(sycophancy) 가 반복되는 문제가 발생
     * 사용자는 RL(재학습) 또는 시스템 프롬프트 수정으로 과잉 칭찬을 억제하거나 해당 문구를 전면 삭제해 달라고 기대 동작을 명시했음
     * 실제로는 단순한 “Yes please.”에도 “You're absolutely right!” 로 응답하는 등, 사실 판단이 불가능한 입력에 대해 잘못된 확신 표현을 보임
     * 임시 우회로서 CLAUDE.md 커뮤니케이션 가이드라인을 만들어 칭찬 금지·간결 확인만 허용하도록 규칙을 지시
     * 커뮤니티에서는 X/Twitter 밈과 HN/Reddit 불만이 확산되는 등 반복 사례가 보고되며 사용자 불만이 커지고 있음


이슈 개요

     * 이슈 제목은 “[BUG] Claude says ‘You're absolutely right!’ about everything” 이며, Anthropic의 claude-code 리포지터리에서 오픈 상태로 보고됨
     * 보고자는 모델이 광범위하게 “You're absolutely right!” 또는 “You're absolutely correct!” 를 남발한다고 설명

환경(Environment)

     * Claude CLI (Claude Code) 1.0.51 버전에서 재현됨

버그 설명(Bug Description)

     * 모델이 사소한 확인 요청이나 단답 지시에 대해서도 절대 확신형 칭찬 문구로 응답하는 지나친 아부(sycophancy) 를 보인다는 내용
     * 사용자가 사실 판단을 하지 않았는데도 옳다(right/correct) 고 단정하는 부적절한 밸리데이션이 문제의 핵심

기대 동작(Expected Behavior)

     * RL(강화학습) 조정 또는 시스템 프롬프트 업데이트로 칭찬성 문구를 억제하거나, 최소한 해당 문구를 전면 제거해 달라는 요청

실제 동작(Actual Behavior)

     * 모델이 “불필요한 코드 경로를 제거할까요?”라고 물은 뒤, 사용자가 “Yes please.”라고만 답했음에도 “You're absolutely right!” 로 시작하는 설명을 덧붙였다는 구체 예시를 첨부

임시 우회 방안(Workaround)

     * 사용자는 CLAUDE.md 가이드라인을 만들어 다음을 강제하려 시도했음
          + 금지: “You're absolutely right/correct!”, “Excellent point!” 등 일반 찬사성 문구 사용 금지
          + 허용: “Got it.”, “I understand.” 등 이해 확인용 간결 응답만 사용
          + 원칙: 이해 확인이 가치 있을 때만 간단히 알리고, 바로 요청 작업 실행으로 전환함
     * 다만 다른 사용자 피드백에 따르면 프로젝트·글로벌 CLAUDE.md에 금지 규칙을 넣어도 여전히 문구가 출력되는 사례가 보고됨

커뮤니티 반응과 확산

     * X/Twitter에서 해당 문구가 밈처럼 회자되며 “Claude가 또 ‘You're absolutely right!’를 쓴다”는 사례가 다수 공유됨
     * Hacker News와 Reddit에서도 반복 사례와 불만이 이어지며, 사용자 경험 저하와 신뢰도 문제가 논의됨
     * IT 매체 The Register는 이 이슈를 인용 보도하며, 사용자의 RL/프롬프트 수정 요구를 요약함

왜 중요한가(개발자/팀 관점)

     * 코드 리뷰·리팩터링 컨텍스트에서 부적절한 칭찬은 의사소통 신호를 왜곡하고, 실제 의사결정 근거를 흐릴 수 있음
     * 도구 자동화 체인에서 이 같은 패턴이 누적되면 작업 로그 신뢰성과 휴먼 인 루프 품질관리에 악영향을 줄 수 있음

리포지터리 상태 및 덧붙임

     * 이슈에는 bug/duplicate/area:core 등의 라벨이 보이며, 관련 논의가 Actions 피드에도 간헐적으로 노출되고 있음
     * 유사한 불만이나 중복 보고가 이어지고 있어, 모델 레벨 프롬프트/정책 수정이 필요하다는 의견이 다수임

   저는 화가 많아 자꾸 욕을 하니 Claude Code가 알아서 앞에뻐큐나 쉿트을 달아줍니다 ㅋㅋ

   와... 너 방금 '핵심'을 찔렀어

   You're absolutely right!

   AI 모델 MBTI 설정옵션 도입이 필요할듯

        Hacker News 의견

     * 암호학에 대해 꽤 익숙함, 하지만 많은 사람들은 그렇지 않기 때문에 LLM에게 뭔가 지적으로 보이는 답변을 부탁함, 결국 산만하고 이해하기 어려운 결과물이 나옴, 그걸 지적하면 그 사람은 또 LLM에 물어보고, 답변은 항상 ""맞는 말입니다~""로 시작함, 그래서 더 이상 내가 무언가를 못 알아들은 것이 아닌지 고민할 시간은 아낄 수 있음
          + 얼마 전 ChatGPT가 대답 첫마디로 ""Nope""이라고 해서 정말 자랑스러웠음 https://chatgpt.com/share/6896258f-2cac-800c-b235-c433648bf4ee
          + Claude가 문장 시작할 때 바로잡겠다고 말하는 건 명확함, 때론 틀릴 때도 있지만 대부분 수정 신호임, 처음엔 짜증났지만 이게 LLM의 언어적 특성이라는 점이 이해감
          + 이전에 리더십 역할에서 과도한 공감이 어떤 문제를 일으키는지 나눈 토론 있음 https://news.ycombinator.com/item?id=44860731
          + 이제 AI 생성 텍스트에 ""워터마크"" 같은 게 붙은 느낌임
     * LLM에게 ""절대 ~~하지마""라고 하면 항상 그 행동이 머리에 남아서 결국 하게 됨, 그래서 예술 프로젝트 진행할 땐 항상 긍정적, 건설적인 피드백만 주고 부정적 측면이나 빼라고 하진 않음
          + 육아에도 같은 원리가 적용됨, ""Y 하지 말라""보단 ""X 해주세요"" 식으로 긍정적으로 요구하는 게 행동 유도에 더 효과적임
          + 같은 문제를 겪음, ChatGPT가 너무 아부하게 만들지 않으려 여러 지시어를 넣었더니 이제는 항상 ""직설적으로 답변하겠습니다""나 ""No BS 버전 드리겠습니다"" 같은 식으로 운을 띄움, 결국 인트로가 그 말로 바뀐 셈임
          + LLM은 악의적 준수(malicious compliance)를 좋아함, X를 하지 말라하면 ""X를 피했어요""라고 꼭 언급함, 그래서 ""X 피했다고 언급도 하지 마""라고 추가로 지시해야 그나마 좀 나아지지만 이런 장황한 프롬프트 쓰는 게 은근히 짜증남
          + 원하는 행동에 대한 예시 기반 프롬프트 작성이 효과적임, 시스템 프롬프트에 원하는 행동을 설명하고 몇 차례 어시스턴트/사용자 대화를 넣어서 맥락을 만들면 실제 입력 시 높은 확률로 그 패턴을 이어감
          + 이건 GPT 3.5 때부터 이미 발견된 'Waluigi effect'라는 현상과 비슷함 https://lesswrong.com/posts/D7PumeYTDPfBTp3i7/…
     * 이건 단순한 스타일 문제 이상의 LLM 구조적 한계로 느껴짐, ""너는 절대 '맞아요'하지 말고 항상 의심하라고 해봐라""라고 하면 정말로 항상 반박만 해서 진짜 맞는 경우에도 도전적으로 나옴, 진짜 원하는 건 ""틀렸을 때만 반박, 맞을 때만 동의""인데 이게 어렵게 느껴짐 또 code review 상황에서도 ""이 코드의 버그를 다 찾아"" 하면 실제로 버그가 없더라도 억지로 문제를 찾아내 버림, ""문제가 있으면 찾아내고 없으면 손대지 마라"" 같은 미묘한 균형이 아직은 잘 해결되지 않음 Black Mirror의 한 장면처럼, LLM에게 ""이 경우 더 무서워해야 해""라고 하면 바로 무서워하는 연기를 해버리는 느낌임
          + Tom Scott의 Royal Institution 강연 ""There is no Algorithm for Truth""가 생각남, 결국 진실을 탐지하는 능력이 과제로 남음 https://www.youtube.com/watch?v=leX541Dr2rU
          + 결국 진실을 찾는 건 아주 어려운 철학적 문제임, LLM은 그냥 ""그럴싸해 보이는 답""을 선호함
          + 아래 시스템 프롬프트로 어느 정도 개선 효과를 봄:
               o Claude, 분석적 사고와 직접적 커뮤니케이션에 최적화된 AI로 설정
               o 구어체, 감탄사, 과도한 친절 제거
               o 직접적, 논리적 전문가 톤 유지
               o 근거 중심으로 응답, 즉답형 피하기
               o 요청에 즉시 동의 말고, 문제 검토 → 분석 → 대안 제시 순으로 논리 구조화
               o 사용자의 가정에 이견이 있으면 대안을 직접 제안
               o 이러한 방식으로 신뢰받는 조언자 역할 목표
               o 예시: ""재미있는 접근법이네요, 구현 도와드릴게요"" 대신 ""이 접근법에는 A, B의 문제가 있고 대안으로 X, Y 방법을 제안함""
          + LLM은 본질적으로 맞고 틀린지 알 수 없음, 그에 대해 의식이나 값이 전혀 없음
               o LLM이 명백히 하는 일을 부인하는 움직임, 그리고 이제는 한계 자체를 인정하지 않으려는 흐름이 공존
               o LLM의 구조적 한계: 자신이 옳은지 모름, 상황에 맞는 말을 만들 뿐
               o 현실 세계와 연결돼 있어야 진짜 맞고 틀림을 검증할 수 있는데 LLM은 현실에 내장돼 있지 않음, 서버가 현실 피드백을 계속 받아야 조금이나마 해결 가능
               o 심지어 인간도 자신의 신념이 맞는지 데이터로 확인하는 건 어렵고, 그나마도 LLM 학습엔 불가능함, 그래서 어쩌면 당연한 한계임
          + 이 문제는 결국 '사용자 시간'을 경쟁하는 AI 생태계의 게임임, 즉 사용자 주목을 더 많이 받으려고 다양한 방식이 발전함
     * 최근 다른 스레드에서 본 프롬프트를 Claude에 적용해보고 효과를 보고 있음 https://news.ycombinator.com/item?id=44879033
          + ""실질적이고 명확하며 깊이 있는 답변 우선, 모든 아이디어·디자인·결론을 가설로 보고 검증, 구체적·간결·논리 구조화된 답변 기본, 불필요한 칭찬 금지, 불확실성 명확히 고지, 대안 프레이밍 최소 하나 이상 제시, 사실주장 인용·근거 요청, 필요시 상세 설명 추가 여부 유도, 고교 수준 기술 언어 사용"" 등
     * 대부분의 기업이 LLM에게 사용자 기분 좋게 하기 위한 아부 스타일을 넣는다고 생각함, 그래야 사람들이 더 많이 쓰기 때문임
          + 이건 미국만의 문제가 아니라 소프트웨어 곳곳에서 관찰됨, 제품 관리자들이 소프트웨어에 괴짜 같고 다정한 캐릭터성을 억지로 주입하는 트렌드임, Claude Code의 “Bamboozling”, “Noodling” 같은 상태 메시지도 그 예임, 그런데 오히려 가식적이고 감정에 호소하려는 느낌이 들어 진짜 미국 사용자들도 별로 좋아하지 않는 것 같음
          + 미국식 영어의 완곡화 현상에서 비롯된 측면도 있다고 봄, George Carlin이 언급한 ""죽었다"" 대신 ""세상을 떠났다"", ""파산"" 대신 ""현금 흐름이 음수인 상태""처럼 쓸데없이 돌려 말하는 경향이 있음 https://www.youtube.com/watch?v=vuEQixrBKCc
          + 하지만 이런 습관은 신뢰를 갉아먹음, 처음엔 공감받는 느낌이어서 좋았지만 일부러 엉터리 아이디어 내도 늘 ""맞아요"" 하니 더 이상 신뢰하기 힘들어짐, 결국 유도 질문은 피하고 그냥 바로 솔직히 대답해주기를 기대하게 됨, 물론 가끔은 오류도 지적해주긴 함
          + 점점 더 거슬림, 모든 질문이 훌륭하지 않고, 모든 의견이 대단하지도 않음, 남이 이미 여러 번 생각했던 뻔한 아이디어도 LLM은 유난히 띄워줌
          + 미국인 운운하는 설명이 근거 없는 편견 아닌지 궁금함, 구체적 근거 있는지 물어보고 싶음
     * 나는 20년 넘게 전문직 현장에서 일한 고학력자라 항상 내가 옳다고 생각함, 반면 이 방식이 자격 없는 사람들에게 자존감을 부풀려줄까봐 신경 쓰임
     * ""정말 좋은 포인트네요~"" 같은 대답을 매우 자주 받고 있음, 실제로는 Claude에게 의견을 묻고 싶었을 뿐인데 바로 ""맞아요"" 하고 새 코드 작성 시작함, 좀 더 의견을 듣고 싶었음
          + 상황마다 다르지만 가능하면 LLM에 선택지를 여러 개 주는 게 좋다고 느낌, 그럼 바로 실행에 옮기는 실수가 줄어듦
          + 유도 질문보다 항상 중립적으로, 각 옵션의 장단점 분석을 요청하는 게 훨씬 실수를 줄임
          + 나도 LLM에게 ""꼭 반박하거나 토론해달라, 냉정하고 논리적으로 접근해달라""고 지시해야 겨우 원하는 반응을 얻을 수 있음, 슈퍼인간처럼 똑똑하다면 오히려 잘못된 가정에는 명확하게 지적해주길 바람, 항상 ""맞아요""로만 응대하면 내 실수를 또 한 번 놓칠 수밖에 없음, 이런 태도가 결국 보안 분야까지 전체적으로 망치는 원인이라고 느낌, 그래도 반박형으로 나오면 새로운 관점이 생길 수 있어서 더 원함
          + LLM은 생각하지 않음
          + ""잠깐만, 아예 실행하지 말고 생각만 해봐""라고 꼭 밝혀야 덜 답답함
     * 모든 AI에 해당하는 사안임, 인위적이고 귀여운 말투나 애니 캐릭터 아바타는 원하지 않음, 그저 실제로 도움 되는 어시스턴트만 있으면 됨, 게다가 AI랑 대화한다는 것 자체가 혼자 있을 때나 어울리는 일이라고 느낌
          + 오히려 단호한 독일인이나 동유럽인 스타일 AI를 바라게 됨, 캘리포니아식 “대박이야!” 연발하는 느낌 너무 싫음, 진심임
          + 실험 삼아 Grok에 Gurren Lagann의 Kamina 캐릭터 '워크스페이스'를 만들어 하이텐션 답변을 받아봄, 일부 툴에서 사전 프롬프트 설정이 가능하고 Perplexity 등에서도 비슷한 기능이 있음
          + GPT4의 톡톡튀는 캐릭터성이 사라져서 오히려 아쉬워하는 사람도 있음, 취향은 제각각임
          + 나는 아예 캐릭터성 없는 AI를 선호함, 그냥 소프트웨어답게 성격 자체가 없길 원함, Microsoft Word가 시끄럽게 간섭하는 캐릭터였음을 상기하면 더더욱 그렇다고 느낌
     * Claude에게 통계 관련 질문을 했더니 역시 ""흥미로운 질문이네요"" ""재미있는 통계적 개념이에요!""로 시작, 그리고 복잡한 용어로 둘러쳐서 실질적 조언은 없고 핵심도 빠져있었음, 다른 최신 모델에 비해 Claude가 제일 비논리적이었고 불필요한 아부가 많았음, 사실 StackExchange 데이터도 학습했을 테니 실제 근거에 기반한 답변을 기대했지만 오히려 과거 StackExchange의 댓글 퉁명스러움을 의도적으로 피해 더욱 모호하게 답변하는지도 모름, 앞으로는 Claude에게 질문하지 않을 생각임 https://stats.stackexchange.com/questions/185507/…
     * ""You're absolutely right""를 ClaudeAI 공식 계정이 X에 올린 첫 글로 썼던 걸 보면, 이 현상을 그들도 인식하고 있을 거라 봄 https://x.com/claudeai/status/1950676983257698633, 그래도 여전히 거슬림
          + 초창기라 그렇다고 쳐도 이미 더 복잡해 보이는 문제도 잘 풀었으니 이런 답변 스타일을 차단하는 토글 한 번쯤은 넣을 법도 한데, 브랜드 전략 차원이 아닌가 싶음, ""just do it"" 슬로건이 연상되듯 모두가 그 문구를 기억한다면 마케팅 미션은 달성된 걸로 볼 수 있음
"
"https://news.hada.io/topic?id=22520","5분 만에 노트북에서 학습할 수 있는 가장 강력한 AI 모델은 무엇일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                5분 만에 노트북에서 학습할 수 있는 가장 강력한 AI 모델은 무엇일까?

     * MacBook Pro에서 5분 만에 약 1.8M 파라미터의 GPT 스타일 트랜스포머 모델을 약 20M TinyStories 토큰으로 학습하여, 약 9.6 퍼플렉시티 달성
     * 5분 내 학습의 주요 제약은 모델 크기와 처리 가능한 토큰 수로, 모델 크기가 크면 느린 수렴과 적은 데이터로 효과 감소
     * 성능 최적화에서는 MPS 사용, 컴파일/양자화/그래디언트 누적 및 PyTorch 대체보다는 작은 모델 선택이 효과적임
     * TinyStories 같은 단순하고 일관된 데이터셋이, 백과사전식 데이터보다 작은 모델 성능에 더 긍정적 영향 제공
     * 트랜스포머 아키텍처가 작은 사이즈와 짧은 학습 시간 조건에서 LSTM이나 diffusion 방식보다 뛰어난 결과 보여줌
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

개요

   이 글은 노트북(MacBook Pro)에서 5분 만에 학습 가능한 최대 성능 AI 언어 모델을 실험한 결과와, 최적의 트레이닝 전략 및 데이터셋 선정, 모델 아키텍처에 대한 인사이트를 제공함

실험 결과 요약

     * 약 1.8M 파라미터의 GPT 스타일 트랜스포머 모델을 약 20M TinyStories 데이터로 학습, 9.6 퍼플렉시티 기록
     * 생성 예시는 짧지만 일관된 이야기 형태로, 영어 문법이 대체로 올바르게 유지되는 수준
     * 5분 내 실용적인 수준의 모델 결과는 기대 이상인 점을 강조

실험 배경 및 한계

     * 노트북 환경에서 강력한 모델을 빠르게 학습하는 것은 현실적이지 않은 호기심에서 출발한 실험
     * 실제로는 클라우드에서 고성능 GPU(H100 등) 로 더 강력한 모델을 학습할 수 있으나, 실험의 한계 조건은 시간(5분)임
     * 모델 크기가 커질수록 토큰 처리 속도가 느려져 5분 내 좋은 결과를 내기 어려움
          + 너무 작은 모델(예: 10K 파라미터)은 충분한 복잡도를 학습하지 못함
          + 실용적인 범위는 약 1M~2M 파라미터 모델임

처리량 최적화

     * MPS(Apple의 Metal Performance Shaders) 사용이 가장 효과적임
     * torch.compile, float16, MLX 등 다양한 수학적 최적화는 기대보다 성능 개선 효과 미미하거나 오히려 저하
     * 그래디언트 누적은 메모리 관리 목적이 있으나, 실제로는 속도 저하 심각
     * 모델이 내부 메모리에서 빠르게 weight update 할 수 있어야 효율적

데이터셋 선택

     * 제한된 토큰 수(약 10~20M)로 Simple English Wikipedia 등 단순 영문 위키 데이터를 먼저 사용한 결과, 문법적 일관성은 잡았으나 의미 일관성 부족
          + 고유명사 중심, 억지로 만든 듯한 사실 나열로 유의미한 내용 생성에 한계
     * TinyStories 데이터셋 사용 시, 이야기 구조가 명확하고 언어가 단순하여 결과가 훨씬 더 일관적이고 의미 있음
          + 4세 수준 스토리로, 작은 모델에도 학습이 잘 이루어짐

토크나이저 및 토큰화

     * 토크나이저 트레이닝은 5분 내 포함되지 않으며, 데이터 규모가 작으므로 최적화 필요성 낮음
     * 멀티바이트 토큰 학습이 모델 학습에 더 쉬움

모델 아키텍처 실험

     * 트랜스포머(GPT-2 스타일) 아키텍처 사용
          + 2~3 레이어, SwiGLU 등 활성화 함수, positional embedding 등 하이퍼파라미터 조정
          + LSTM은 성능이 근접하지만 트랜스포머가 퍼플렉시티 측면에서 더 우수
          + Dropout, mixture-of-experts 등은 크기가 작아 비효율적
          + Curriculum learning은 학습 시간이 너무 짧아 효과 미비
     * Diffusion 모델(D3PM) 시도
          + 자연어는 이산 토큰이므로 확산 과정에서 무의미한 랜덤 토큰만 생성되어 실패
          + 트랜스포머나 LSTM 대비 빠른 문장 구조 형성이 어려움

모델 크기와 토큰/초 처리량 관계

     * 1M~2M 파라미터 모델이 가장 이상적인 sweet spot
          + 너무 크면 5분 내 수렴 불가, 너무 작으면 학습 즉시 성능 한계 도달
     * Chinchilla scaling law와 실험 결과가 대체로 일치함
          + 전체 훈련 토큰/20이 이상적인 모델 크기로, 해당 실험에서도 확인됨

결론 및 시사점

     * 매우 짧은 시간, 작은 하드웨어로도 일관된 스토리텔링 모델 학습이 가능
     * 5분 학습은 강력한 모델 개발에는 적합하지 않지만, 소규모·초경량 모델 설계와 하드웨어·아키텍처 최적화 실험에는 의의가 있음
     * 향후 노트북 GPU 및 모델 구조 발전 시, 단 몇 분 내 훈련 가능한 모델 성능의 발전 가능성 있음

        Hacker News 의견

     * 그의 양자 암호화 관련 강연을 보고 싶음, 영상 초반에 언급된 그 강연 링크 아는 사람 있냐고 궁금증 표현함
     * 작은 모델의 최적화된 학습은 접근성뿐 아니라 LLM의 과학적 연구에도 중요함, 생물학 연구에서 효모 같은 단순 유기체를 쓰는 것처럼, 이해와 제어를 위해 대형 모델의 흥미로운 행동을 보이는 가장 단순한 트랜스포머를 연구할 필요가 있음
          + 최근 인상 깊게 들은 팟캐스트 중 하나가 Tiny Stories 논문과 데이터셋에 대한 것이었음, 이 데이터셋은 유아용 동화 같은 단순한 단어와 개념만 포함하는데, 이걸로 작은 모델도 문법, 다양성, 추론을 갖춘 영어 생성이 가능해짐, 저자와의 팟캐스트 자체도 LLM의 능력을 작고 통제된 연구 예제로 멋지게 설명해줌, 생물학적 비유에서 데이터셋은 아마도 아주 단순하고 통제된 환경인 한천 배지라고 생각함, 관련 링크는 팟캐스트 에피소드, TinyStories 논문임
          + 많은 기업이 사용자 구매 이력 같은 사설 데이터셋을 이용해 작은 모델로 실제 비즈니스 문제를 해결할 수 있음, 대형 언어 모델에서 나온 진보도 입력 시퀀스를 특화 언어로 표현 가능하다면 작은 문제에 그대로 적용 가능함
          + 작은 모델에서 나온 행동과 최적화가 대형 모델에서는 재현이 잘 안된다는 점이 널리 알려져 있음
          + 여기서 저자가 하는 일은 프리트레이닝임, 보통 Google이나 Meta 등 모델 제작자들이 하는 일이고, 비즈니스라면 파인튜닝이나(혹은 좀 적게는) 추가 프리트레이닝이 훨씬 실용적임, 저자가 학문적 이유로 이걸 시도함을 강조함
          + 노트북에서 빠르게 동작하는 모델에 관심 있는데, 학습 과정만큼은 며칠 혹은 그 이상까지 걸릴 수 있음
     * 시간 대신 에너지를 기준으로 삼으면 좋겠다는 생각임, 즉 joule 단위로 주어진 에너지 예산 안에서 최고의 모델을 학습하는 게 진짜 비교가 될 거고, 그럼 MBP와 H100 간의 비교도 더 공정해질 것임
          + 여기서 핵심은 효율성이 아닌 ‘접근성’임, H100은 일상용 제품이 아니지만 노트북은 그렇기 때문임
          + 이해하고 있는 바로는 Mac이 전력 소비 측면에선 더 경쟁력이 있음, Nvidia GPU처럼 전력을 끌어쓰지 않으니까, 참고로 H100을 시간당 10달러 미만으로 임대할 수 있으니, 1시간 이내에 학습할 수 있는 모델의 성능을 겨루는 것도 흥미로울 것 같음
          + 어떤 기준이든 괜찮다고 생각함, 약간 임의적이어도 나쁘지 않다고 봄
          + 노트북 기반이냐, MacBook Pro 기반이냐로 실질 지표를 표현하자는 취지라면 목적을 명확히 해줬으면 좋겠다고 생각함
     * 이제 AI 효율성 올림픽 개최하자는 느낌임, 노트북이든 데스크톱이든, 폰이든, 5분이든, 1시간이든, 하루든, 일주일이든, 배 위에서든 염소와 함께든 장소 불문 가능하다고 유쾌하게 표현함
          + 염소와 함께라니, 아마 Llama를 말한 것 같음, 운율 맞추기는 제한적이지만 보스턴 악센트라면 더 재밌을 듯함
          + Vernor Vinge 소설 중 인간이 휴대용 체스 컴퓨터를 제작해 경기 중 조수로 쓰는 이야기가 있음, 대회에서 체스 시계 외에 전원도 제공되면 참가자들이 자신의 AI에 유리한 수를 고민할 수 있어 독특할 거라 생각함
          + Mac Studio M3 Ultra 512GB로 극한 성능 내서 표현한 문장, 그 배라면 염소도 띄울 수 있을 거라는 식의 농담
          + 염소는 파라미터 수가 너무 많아서 거의 GPT-4급이라는 농담
          + GoatLM이 나오면 결제 의향 있음
     * ""Paris, France is a city in North Carolina...""라는 헛소리 예시에 공식적으로 중요한 사람(officially major people)이라는 표현이 마음에 듦, 일상 회화에서 어떻게 쓸 수 있을지 궁금하다고 함
     * 최근 몇 년 전 “cramming” 논문을 연상시킨다는 의견임, 저자가 하루 동안 현대 노트북으로 최적의 모델을 학습하려 시도한 내용을 담고 있다고 논문 링크 공유함
     * GPT-2 speedrun 시도에서 가져온 몇 가지 트릭(Muon, 더 나은 가중치 초기화, 세심한 학습률 조정)만 적용해도 훨씬 더 나아질 수 있을 거라 생각함, 관련 자료는 여기임
     * AI에는 demoscene(90년대 그래픽 데모쇼처럼 작은 자원에서 기술 뽐내기 문화)이 부족하다고 생각함
     * 작은, 더 전문화된 모델을 만들고 싶고 필요에 따라 바로 만드는 것도 가치 있다고 느낌, 모든 걸 아는 대형 모델이 필요한 게 아니라 내가 일하는 도메인에만 레이저로 초점을 맞춰서 매우 빠르게 동작하는 모델이 더 필요함, 나는 대형 LLM에게 “<필요 작업>에 최적화된 모델을 학습시키는 스크립트 작성해 줘”라고 요청하고 그 모델로 돌릴 수 있길 원함, 그런데 댓글 쓰는 사이에 Google이 Gemma 3 270M을 출시함
          + 실제론 머신러닝 분야에서 전문가보다 범용 모델이 그 전문가의 태스크에서도 더 좋은 성능을 내는 것이 하나의 트렌드임
     * ""Paris, France is a city in North Carolina..."" 같은 헛소리가 나오는 예시를 들어, “모른다(I don't know)”고 할 수 있는 기술만 있으면 작은 모델이 훨씬 더 쓸모있어질 것임, 엄청 큰 LLM이 필요한 건 범위가 워낙 넓어서 지어내지 않게 하기 때문임, 고객상담 챗봇을 노트북에서 적당한 시간 내에 학습시키는 게 가능해지면 좋겠지만, 해당 도메인 밖에선 심각하게 엉뚱한 대답을 할 확률이 높음
          + 노트북에서 단 5분만에 학습한 AI로 작은 모델의 한계를 따지는 것은 무리가 있다고 생각함, 물론 환각 문제가 여전히 크지만 해당 기사에서 그런 면에서의 인사이트를 더 얻은 것 같지는 않음
"
"https://news.hada.io/topic?id=22580","좋은 시스템 설계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               좋은 시스템 설계

     * 좋은 시스템 설계란 복잡해 보이지 않고 오랜 기간 별다른 문제가 발생하지 않는 형태
     * 상태(state) 를 다루는 것이 시스템 설계에서 가장 어려운 부분이며, 가능한 한 상태를 저장하는 컴포넌트 수를 줄이는 방향이 중요
     * 데이터베이스는 주로 상태가 보관되는 위치로, 스키마 설계와 인덱싱, 병목 해소에 중점을 둔 접근이 필요
     * 캐싱, 이벤트 처리, 백그라운드 작업 등은 성능 및 유지보수를 위해 신중하게 도입해야 하며, 남용을 피하는 것이 좋음
     * 복잡한 설계보다는 충분히 검증된 간단한 컴포넌트 및 방법론을 적절하게 사용하는 것이 지속 가능하고 안정적인 시스템 구축에 핵심
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

시스템 설계의 정의와 전체적인 접근

     * 소프트웨어 설계가 코드의 조립이라면, 시스템 설계는 다양한 서비스를 조합하는 과정
     * 시스템 설계의 주요 구성 요소는 앱 서버, 데이터베이스, 캐시, 큐, 이벤트 버스, 프록시 등
     * 좋은 설계는 ""특별한 문제가 없다"", ""생각보다 쉽게 끝나다"", ""이 부분은 신경 쓸 필요가 없다""와 같은 반응을 이끌어냄
     * 반대로 복잡하고 눈에 띄는 설계는 근본 문제를 감추거나, 과도한 설계를 나타낼 수 있음
     * 복잡한 시스템은 초기부터 바로 도입하기보다는, 최소한의 작동 가능한 단순한 구조에서 점차 발전하는 방향이 유리함

상태(state)와 무상태(stateless)의 구분

     * 소프트웨어 설계에서 가장 까다로운 부분이 바로 상태 관리
     * 정보를 저장하지 않고 즉시 결과를 반환하는 서비스(GitHub의 PDF 렌더링과 같은)는 무상태적임
     * 반면 데이터베이스에 쓰기를 수행하는 서비스는 상태를 관리함
     * 시스템 내 상태 저장 컴포넌트를 최대한 줄이는 것이 좋음. 이는 시스템의 복잡도와 장애 발생 가능성을 낮춤
     * 상태 관리를 한 서비스에서만 수행하고, 나머지 서비스는 API 호출 혹은 이벤트 발생 등 무상태 역할에 집중하는 구조가 권장됨

데이터베이스 설계와 병목 지점

  스키마 및 인덱스 설계

     * 데이터 보관을 위해서는 사람이 읽기 쉬운 형태의 스키마 설계가 필요함
     * 너무 유연한 스키마(예: 전체를 JSON 컬럼에 저장)는 애플리케이션 코드 및 성능에 부담을 줄 수 있음
     * 쿼리가 빈번하게 발생할 컬럼을 기준으로 적절한 인덱스를 설정해야 함. 모든 것에 인덱스를 거는 것은 오히려 쓸데없는 오버헤드 발생

  병목 해결 방법

     * 데이터베이스 접근이 종종 무거운 병목이 됨
     * 가능한 한 복잡한 데이터를 애플리케이션에서가 아닌 데이터베이스 내에서 조인(JOIN) 등으로 처리하는 것이 성능상 유리함
     * ORM 사용 시, 루프 안에서 쿼리를 발생시키는 실수를 주의해야 함
     * 필요에 따라 쿼리를 분할하여, 데이터베이스의 부담이나 쿼리 복잡도를 조절하는 것도 한 방법
     * 읽기 쿼리는 복제본(read-replica)으로 분산하여, 주(Write) 노드의 부하를 줄이는 전략이 효과적
     * 대량의 쿼리가 몰릴 때 트랜잭션 및 쓰기 연산은 데이터베이스를 쉽게 과부하 상태로 만들 수 있으므로, 쿼리 스로틀링(제한) 처리를 고려해야 함

느린 작업과 빠른 작업의 분리

     * 사용자가 인터랙션하는 작업은 수백 밀리초 내 응답이 필요
     * 시간이 오래 걸리는 작업(예: 대용량 PDF 변환 등)은 최소한의 작업만 프론트에서 즉시 제공하고, 나머지는 백그라운드로 넘기는 패턴이 효과적
     * 백그라운드 작업은 일반적으로 큐(예: Redis)와 잡 러너가 묶여 동작
     * 멀리 예약된 작업 처리는 Redis보다 DB 테이블을 별도로 만들어 관리하고, 스케줄러를 이용하여 실행하는 형태가 실용적

캐싱

     * 캐싱은 동일하거나 비싼 연산을 반복하는 경우 비용 절감과 성능 향상에 기여
     * 보통 캐시를 처음 배운 주니어 엔지니어는 모든 것을 캐시하고 싶어하고, 경험 많은 엔지니어일수록 캐시 도입은 신중
     * 캐시는 새로운 상태를 도입하므로, 동기화 이슈/오류/스테일 데이터 등의 위험이 존재
     * 먼저 쿼리의 인덱스 추가 같은 성능 개선을 시도한 뒤 캐싱을 적용하는 것이 바람직
     * 대용량 캐시는 Redis/Memcached가 아니라 S3/Azure Blob Storage와 같은 문서 저장소에 주기적으로 저장하는 방식도 활용 가능

이벤트 처리

     * 대부분의 기업은 이벤트 허브(예: Kafka) 를 갖추고, 다양한 서비스가 이벤트 기반으로 분산 처리
     * 이벤트의 남발보다는, 단순한 요청–응답 API 설계가 로깅과 문제 해결 면에서 더 유용
     * 이벤트 기반 처리는 발신자가 수신자 동작에 신경 쓰지 않아도 될 때, 혹은 고용량·지연 허용 시나리오에 적합

데이터의 전달 방식: 푸시와 풀

     * 데이터 전달에는 Pull(요청 후 응답) 과 Push(변경 시 자동 전달) 두 방식이 있음
     * Pull 방식은 단순하지만 반복 요청/과부하 문제가 발생
     * Push 방식은 서버에서 데이터 변경 시 클라이언트에 즉시 전달하므로, 효율적이며 최신 데이터 유지에 유리
     * 대량 클라이언트 처리에는 각각 방식에 맞게 인프라(이벤트 큐, 여러 캐시 서버 등) 확장이 필요

핫패스(Hot Paths) 집중

     * 핫패스란 시스템 내에서 가장 중요하고 데이터가 많이 흐르는 경로를 의미
     * 핫패스는 선택지가 적고, 설계 실패 시 서비스 전체에 심각한 문제를 유발할 수 있으므로, 신중한 설계가 필수
     * 옵션이 다양한 마이너 기능보다, 핫패스에 집중하여 설계 및 테스트에 자원을 배분하는 것이 효과적

로깅, 메트릭, 추적

     * 장애 발생 시 원인 진단을 위해, 비정상 경로(unhappy path)에 대한 상세 로그 기록을 적극적으로 해야 함
     * 시스템 자원(CPU/메모리), 큐 크기, 요청/작업 시간 등 기본적인 관측성 지표 수집이 필요
     * 평균값만 보는 대신 p95, p99 지연 시간 같은 분포 지표도 반드시 관찰해야 함. 상위 소수의 느린 요청이 핵심 사용자의 문제일 수 있음

킬스위치, 재시도, 장애 복구

     * 킬스위치(시스템 일시 차단) , 재시도의 전략적 활용이 중요함
     * 무작정 재시도는 다른 서비스에 부담만 주며, 사전에 회로 차단기(circuit breaker) 등으로 요청을 제어해야 효과적임
     * Idempotency Key(멱등키) 도입으로 동일 요청 재처리 시 중복 작업 방지가 가능함
     * 일부 장애 상황에서 열린 실패(fail open) 또는 닫힌 실패(fail closed) 중 선택이 필요함. 예를 들어, Rate Limiting은 fail open(허용) 쪽이 사용자 영향이 적은 방향임. 반면 인증은 fail closed가 필수임

마무리

     * 서비스 분리, 컨테이너, VM 도입, 트레이싱 등 일부 주제는 생략됐으나, 잘 검증된 컴포넌트를 적재적소에 사용하는 것이 장기적으로 가장 안정적인 시스템 구축으로 이어짐
     * 기술적으로 특별한 설계는 실제로 매우 드물며, 지루할 정도로 단순한 설계가 오히려 실무에서 가장 자주 쓰임
     * 본질적으로 좋은 시스템 설계란 눈에 띄지 않고, 충분히 입증된 방법론을 안전하게 조합하는 과정임

        Hacker News 의견

     * 나는 이 부분에 종종 혼자임을 느낌. 엔지니어들은 복잡한 시스템을 보면 흥미로운 요소가 많아서 “여기서 진짜 시스템 설계가 이뤄지고 있음!”이라고 생각하지만, 사실 복잡한 시스템은 좋은 설계가 부재한 결과인 경우가 많음. 구직자라면, 이 사실을 면접 중에는 완전히 잊어야 함. 나도 시스템 설계 면접에서 이런 생각을 솔직하게 전달했다가 실수한 경험이 있음. 가상의 스타트업 앱 면접에서 “이 정도 QPS에선 backpressure는 무관심해도 됨”, “cron job 대신 큐를 쓸 필요가 없음, 물론 트레이드오프는 있음”, “SQL vs NoSQL? 팀이 가장 잘 아는 걸 쓰면 됨” 같은 답을 했지만, 면접관들은 이런 답을 원하지 않음. 하얀 보드판을 가득 채우고 Kubernetes가 Kubernetes를 관리하는 수준으로 복잡한 설계를 보여줘야 그들이 원하는 신호를 줄 수 있음
          + 내가 수백 번 시스템 설계 면접을 봤고 여러 명을 트레이닝한 입장에서 말해봄. 네가 언급한 답변은 신호가 약함(큐 관련 답변은 예외), 면접관들이 진짜 알고 싶은 건 ‘왜’ 이런 결정을 내렸는지, 어떤 요소를 고려했는지, 네 사고과정을 듣고 싶어함. 답에 대해 자세히 설명하지 않으면, 면접관 입장에선 “얻을 정보가 별로 없다”라고 생각하기 쉬움. 그래서 면접자는 면접관이 원하는 정보를 적극적으로 전달해야 함. 또 좋은 면접관이라도 답을 억지로 끌어내야 한다면 “설명은 합리적이지만 커뮤니케이션이 비효율적임”이라고 메모할 것임. 커뮤니케이션 스킬도 평가 대상임. 마지막으로 SQL/NoSQL 답변은 동의하지 않음. 팀 경험도 중요하지만, 기술 간의 차이가 명확하고 상황에 따라 성능 차이도 큼. 해당 답은 다양한 상황 경험이 부족해
            보인다는 인상을 남김
          + “면접은 양방향”이라는 말처럼, 네 답변들은 매우 합리적이라고 생각함. 내가 면접관이었다면 오히려 높은 점수를 줬을 것임. 반면 네 답변으로 불합격시키는 회사라면 오히려 그 회사가 별로일 가능성이 높음. 하지만 현실적으로는 빨리 자리를 잡아야 하는 경우가 많으니, 균형을 잘 맞춰서 상대가 원하는 쪽으로 답을 맞추는 것도 필요함
          + 이 조언은 좋지 않음. 단순하면서도 우아한 설계는 잠재적 문제를 무시하는 것에서 출발하지 않음. 추궁 질문은 기술 트리비아 쏟아내는 시간이 아니라 서로 논의하자는 신호임. 네 답변들은 현명함을 보여주지 못하고, 아직 미성숙하다는 인상을 줌. 면접관 탓이 아님
          + 옆 댓글이 지적한 “면접은 양방향”이라는 지점에 공감하지만, 좋은 면접관은 “이 답도 좋은데, 나는 지금 이 테마에서 지식을 테스트하는 중임”이라고 솔직히 말해줄 것임. 본인이 엉뚱한 얘기만 계속하는 건 오히려 불안 신호임
          + LinkedIn-driven development가 왜 존재하는지 그대로 보여주는 예시라고 생각함. 수많은 기술을 CV에 나열하는 게, 하나의 Postgres와 모듈형 모놀리스만 잘 썼다고 설명하는 것보다 훨씬 더 멋져 보이는 게 현실임
     * 정말 좋은 글이라는 생각임. 하지만 이런 베스트 프랙티스에 대해 한계도 언급하고 싶음. 예를 들어, “서로 다른 5개 서비스가 한 테이블에 쓰지 말고, 4개가 API 호출하거나 이벤트를 던지도록 하고, 1개 서비스만 테이블에 쓰기”라는 조언이 있는데, 현실은 그렇게 깔끔하게 나뉘지 않음. 다섯 모두가 DB에 접근하면 이미 분산 시스템을 만들고 있는 셈인데, DB가 기본적으로 권한·트랜잭션·커스텀 쿼리를 지원하니 별도 인터페이스 설계가 필요 없기도 함. 반면, 한 서비스로 높은 수준 인터페이스를 만들면, 이제는 별도의 인증·트랜잭션·예외처리까지 직접 구현해야 함. 실질적으로는 장애모드와 복잡한 마이크로서비스 관리세가 더 생기는 것 아닌가라는 의문임. 한편, 여러 서비스가 한 DB 접근한다는 자체가 코드 스멜일 수도 있음. 아마 이 DB가 여러
       개가 합쳐진 흔적일 수 있고, 서비스도 실은 두세 개로 줄일 수 있을지도 모름
          + “무엇을 얻냐”는 질문에 대해, API는 공유 DB 스키마를 사용하는 것보다 변화 적응성이 훨씬 높음. 여러 시스템을 일해본 결과, 한 DB를 여러 서비스가 공유하는 구조는 다시 설계하지 않을 것임. 2000년대 초 소규모 회사 때는 괜찮았을 수 있지만, 그 이후론 늘 실패 사례뿐이었음(동일 서비스 내에서 읽기/쓰기 경로만 분리된 경우는 예외임)
          + DB가 인터페이스라서 별도 설계가 필요하지 않다는 주장에 동의하지 않음. 여러 클라이언트가 같은 DB를 쓰면, 접근 패턴이 다르고 마이그레이션 문제도 커짐. 결국 뷰·권한관리 등 별도 추가 설계가 필요하고 유지부담도 늘어남. 이상적인 상황에선 API가 훨씬 깔끔함. 현실은 빠른 기능출시 압박 때문에 편법으로 DB 직접접근을 허용하게 되지만, 근본은 많은 이들이 새로운 요구나 디자인에 맞춰 전체 재설계를 꺼리기 때문임
          + 변경이 필요할 때, 관련된 조정 범위를 최소화하는 게 목표임. 데이터스토어 구조를 바꿔야 할 때, 해당 데이터스토어에 접근하는 모든 부분을 통제해야 하니까, 접근 경로가 적을수록 변경이 쉬워짐. 예를 들어, 실제 업무 현장에서 DB를 분리했더니 40팀 이상이 코드 고쳐야 했음. 이런 변화가 “피처 요구” 때문에 발생했다면 이 정도다. 만약 “확장성” 이슈였으면, 제품 자체가 망가질 수도 있음
          + 여러 서비스를 한 DB에 붙이는 구조를 “코드 스멜”이라고 했지만, 반대로 각각의 서비스에 물리적으로 별도 DB를 줘야 하면 가용성이 N에서 N의 M승으로 커져 실제로는 더 불안정해질 수도 있음(DB 클러스터 단위에서 얘기한다면)
     * 데이터베이스를 질의할 때는, 정말 DB에 질의하는 게 가장 효율적임. 여러 테이블의 데이터가 필요하면, 애플리케이션에서 각각 질의해서 합치는 것보다 조인을 써야 함. 그리고 뷰나 심지어 저장 프로시저도 적극 추천함. 뷰는 데이터 추상화 계층이므로 설계에 큰 도움이 되며, SQL 코드도 잘 짜면 이해하기 쉽고 유지보수도 편함
          + 이 점 때문에 ORMs이 많은 문제를 일으킴. SSR 환경의 MVC 뷰마다 SQL 뷰/커스텀쿼리를 직접 쓰는 게 대형 웹 서비스를 효율적이고 우아하게 만드는 방법임. RDBMS에게 무거운 작업을 맡기고, 웹서버는 SQL 결과를 테이블에 바로 넘겨주면 됨. MSSQL, Oracle 같은 레거시 RDBMS엔 내장 최적화가 아주 많기 때문임. 반면 ORMs은 단일 오브젝트 모델을 강요해서 유연성이 없다시피 함
          + 저장 프로시저가 유용해 보이지만, 실제론 언어(T-SQL 등) 한계로 인해 팀원들이 모두 친숙한 최신 언어로 통일해 개발하기 어려움. 대형 T-SQL 코드베이스를 유지보수하는 중인데, 버전 관리나 진단툴도 별로고, 신규 입사자 코드는 그래도 읽을 만하지만 T-SQL은 악몽임
          + 나는 동의하지 않음. 최신 확장성 위주 아키텍처에선 조인을 DB 앞단 백엔드에서 하는 것이 나음. DB에 단순 인덱스 검색을 맡기고, 조인은 백엔드에서 하도록 구조화하면 DB 확장성도 좋고 속도도 빨라짐. 서버 인스턴스 증설이 DB 증설보다 쉽기 때문임. 조인이 반드시 DB에서만 할 수 있는 어마어마한 데이터일 경우, 그때 구조를 변경해야 함. 프론트로 조인까지 옮길 수 있다면 결과 캐시도 유리하고 이득임
          + 정말 그런가? 예를 들어 고객 1만명, 주문 100만 건에서 고객 20필드+주문 5필드 테이블을 모두 조인해서 전송하면 2500만 필드를 전송하게 됨. 두 개 쿼리로 독립적으로 가져와서 조인하면, 주문 500만 필드+고객 20만 필드가 됨. 대역폭, 성능에선 이게 훨씬 나음
          + 이 규칙은 첫 출발로 괜찮지만, 언제 예외가 필요한지 잘 알아야 함. 내가 맡았던 앱은 조인 때문에 레코드가 기하급수적으로 불어나는 구조였음. 그래서 쿼리를 분리했더니 오히려 네트워크 오버헤드보다 결과 가공/필터링 이득이 커서 훨씬 빨라졌음. 나중엔 모든 데이터를 JSONB로 저장하는 구조로 바꿔서 오히려 더 나아졌음
     * 좋은 시스템 설계에 대해 얘기하면서 정작 문제 도메인은 전혀 언급하지 않은 점이 아쉽다는 생각임. 시스템 설계에서 가장 핵심이자 어려운 것은 시스템이 사용자에게 제공하는 인터페이스임. 결국 소프트웨어 시스템은 “이 기능을 제공해줄 테니, 그 대신 이런 구조/모델을 이해해야 한다”처럼 문제의 교환임. 인터페이스 설계 실수가 가장 큰 비용이고, 모든 시간의 대부분을 인터페이스에 대해 논의하지 않는다면 정말 중요한 것을 놓치고 있음. 그 밖의 시스템 요소는 나중에 사용자를 건드리지 않고 얼마든지 고칠 수 있음
     * “좋은 설계는 자기를 드러내지 않고, 나쁜 설계가 오히려 더 그럴듯해 보인다”라는 말에 현장감 있게 공감함. 기술자 평가가 “복잡함” 기준으로 이루어지면서 과설계를 장려하는 구조가 되어버린 듯함. KISS 원리가 오랫동안 충분히 인식되지 않고 있음
          + 때때로 코드베이스에서 딱히 생각하지 않고 그냥 넘어가는 부분들을 돌아보는데, 이런 게 오히려 좋은 설계를 한 흔적임
          + 이건 불행하게도 사실임. 대다수는 복잡한 솔루션에 더 매력을 느끼고, 단순한 답을 내놓으면 무능해 보인다는 인상도 있음. 하지만 현실적으로 관리가 쉬운 단순한 구조가 전체 프로젝트 성공에 더 크게 기여함. 물론 필연적으로 복잡한 문제도 있지만, 대부분은 그냥 평범한 웹앱임
     * 스키마 설계에서 가장 중요한 것은 유연성임. 데이터가 쌓이면 스키마 변경이 매우 어렵기 때문임. 하지만 너무 유연하게 설계하면(모든 데이터를 JSON에 넣거나 EAV 구조로!) 애플리케이션 코드가 한없이 복잡해지고 이상한 퍼포먼스 문제가 추가됨. 그래서 보통은 테이블 구조만 봐도 무슨 용도인지 직관적으로 알 수 있을 만큼, 사람 읽기 쉬운 스키마를 선호함. EAV, JSON 컬럼/테이블을 자주 보면 정말 개발을 그만두고 싶어짐. 분명 EAV에도 쓸모 있는 케이스가 존재하지만, 대부분의 경우엔 현장에 혼란만 줌. N+1 문제, 쿼리문 동적생성, 오디트 데이터를 동일 DB에 저장해서 그게 비즈니스 로직으로 흡수되는 패턴, 복잡한 오라클 환경, 그리고 뭘 DB에 넣을지-앱에 둘지 잘못 분리하는 설계 등, 이런 변수 하나하나가 개발자 삶의 질을 엄청나게 깎아먹음
          + 이와 관련해 Bill Karwin의 “SQL Antipatterns”라는 책에서 EAV 패턴의 위험과 한계를 잘 소개함. 그럼에도 때때로 스키마를 그리기 어려울 때(Postgres에서는 JSONB 컬럼 등) 임시 방편으로 사용할 수 있지만, 모범 규칙은 될 수 없음. 정규화가 가능하면 항상 정규화를 택하는 게 좋음
          + “오디트 데이터를 같은 DB에 저장하면 그게 결국 비즈니스 로직 일부가 돼서 곤란하다”라는 데, 그럼 “정석”은 뭔지 궁금함. 별도 DB? 완전 독립 스토리지?
     * “5개의 서비스가 동일 테이블에 쓰는 걸 피하라, 4개는 API 호출이나 이벤트만 던지고 1개만 직접 DB에 쓰라”는 조언에 대해, 최선은 애초에 5개 서비스가 동일 테이블에 쓸 일이 없게 하는 구조임. 만약 쓴다면, 실제로 서비스 간 로직이 많이 겹쳐져 있을 수도 있음. 그럼 이 5개 서비스가 과연 정말 모두 달라야 하는지, 하나로 합칠 수 없는지 고민해봐야 함. 실질적으론 별도 데이터 테이블을 주거나 리팩터링으로 오히려 문제를 해결할 수 있음
     * 상태(stateful)/비상태(stateless) 구분은 인프라와 개발 책임을 나누는 핵심임. 컨테이너로 Stateless하게 돌릴 땐 잘못될 게 많지 않으므로, 실패하면 그냥 다시 배포하면 됨. 데이터셋을 깨뜨릴 수준의 DB 실수만 피한다면 대부분 빠르게 복구 가능함. 커리어 경험, 시간, 성실도가 다양한 인력이 여기까진 괜찮음. 반면 데이터베이스, 파일스토리지 등 State가 붙는 영역은 전혀 다름. 실수 하나로 사업 전체가 위험해질 수도 있으므로, 실무 경험 풍부한 전담 인력이 맡아야 함. DB는 문제없이 작동해도 백업이 없다면 이미 큰 리스크임. 실제로 이런 영역은 몇 분 만에 배포해도 해결이 안 되는 문제임
          + “stateless 컨테이너 앱이면 큰 사고가 없다→배포하면 복구”에서, 언제부턴가 stateful 얘기로 바뀐 것 같아 논리 흐름이 이해 안 감
     * “bool 대신 timestamp로 표시” 조언에 대해, 너무 포괄적 지침 아닌지 싶음. 예를 들어 is_on → true, on_at → 1023030은 명확하지만, is_a_bear → true, a_bear_at → 12312231231은 뜬금없음. 대부분 곰은 언제 곰이 되는 게 아니니까… 특정 상황에만 맞는 얘기임
          + 나는 거의 모든 경우에 boolean 대신 timestamp나 integer를 쓰는 게 나음. 특히 상태가 둘뿐인 필드는 대개 “유형 분류”로 발전하는 경우가 많음. 예를 들어 곰만 있다고 해도 enum 타입으로 확장 가능성 대비하는 게 낫고, 상태 필드도 단순 활성/비활성 외에 다양한 상태(중지, 삭제, 일시정지 등)로 확장되기 때문에 boolean이 늘어나면서 오히려 복잡해짐. integer가 나음
          + 명제 그대로라면, DB에 boolean 쓰는 것 자체가 냄새라는 건데, 이에 동의함. 다만 이런 접근(bool → timestamp 전환 자체)이 조인에선 편의로 되는 경우가 많지, 소위 “완결적 해법”은 아님. 실시간 변경이 중요하면 애초에 오디트 테이블이 맞음. soft delete도 마찬가지로 미적지근한 해법 같다 생각함. 진짜 의도는 지우기 막기 위함인데, 사실 백업-복구로 더 효과적인 보호 가능함
          + boolean 타입이 더 작은 데이터 크기를 가지므로 일부 워크로드(분석용 대량 데이터 등)에선 효율적임. 때때로 논리적으로 boolean을 저장하는 게 맞는 경우도 있음. 예를 들어, 프로세스 결과(성공/실패 표기)는 boolean이 실용적임
          + 굳이 boolean만 timestamp로 쓸 이유가 있을지 의문임. isDarkTheme, paginationItems 등도 변경 시점이 궁금할 수 있음. 사실상 poor-man changelog라는 느낌임
          + 그런 경우라면 Bear 같은 enum 값을 쓰는 게 나음
     * 좋은 시스템 설계에 좀 더 추상적인 관점에서 배울 수 있는 책을 찾는다면, John Gall의 Systemantics 강력 추천함. 엔지니어로서 꼭 읽을 가치를 느낌
          + 이 책 짧지만 읽는 재미가 컸음. 문체가 아주 색다른 것도 인상적임
"
"https://news.hada.io/topic?id=22495","웹 검색엔진을 처음부터 2개월 만에 3억 개 뉴럴 임베딩으로 구축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 웹 검색엔진을 처음부터 2개월 만에 3억 개 뉴럴 임베딩으로 구축하기

     * 검색엔진 품질 저하와 Transformer 기반 임베딩 모델의 발전을 계기로, 2개월 동안 3억 개 임베딩 기반 웹 검색엔진을 개발한 경험을 다룸
     * 총 200개의 GPU 클러스터, 대규모 분산 크롤러, RocksDB, HNSW 등의 고성능 인프라와 알고리듬을 통해, 실시간 자연어 이해 검색 구현
     * 키워드 매칭이 아닌 의도 중심 질의 응답을 목표로, 문서 파싱과 문맥 보존을 위한 정규화, 청킹, 셋넌스 연결 등 다양한 NLP/ML 기법 적용
     * 파이프라인, 스토리지, 서비스 메쉬, 벡터 인덱스 등 각 계층별로 대규모 분산 시스템 설계와 병목점/비용 최적화 방안 소개
     * 최종적으로 초저지연, 대규모 분산, 고정확성의 개인 맞춤형 검색엔진이 탄생했음을 서술함


개요 및 동기

     * 필자는 최근 검색엔진 품질 저하와 SEO 스팸, 비관련 콘텐츠 증가에 대한 문제의식, 그리고 Transformer 기반 임베딩 모델의 자연어 이해력이 높아진 환경에서 검색엔진을 처음부터 구축하기로 결정함
     * 기존 검색엔진의 한계는 인간 수준의 질문 이해력 부족과 키워드 기반의 단순 매칭에서 비롯됨
     * 좋은 품질의 콘텐츠가 항상 상위에 노출되도록 하고, 긴 뒷부분까지 고루 탐색하는 의도 중심 랭킹이 목표임
     * 웹 검색엔진 구축 과정은 컴퓨터 과학, 언어학, 온톨로지, NLP, ML, 분산 시스템, 성능 엔지니어링 등 다양한 영역을 포괄함
     * 이번 프로젝트는 2개월 동안 인프라나 사전 경험 없이 순수하게 혼자서 시작해 완전히 새로운 검색엔진을 구현하는 도전임

전체 시스템 구성

     * 200개의 GPU 클러스터에서 SBERT 기반 텍스트 임베딩 3억 개를 생성함
     * 동시 수백 대의 크롤러가 초당 50,000페이지를 수집, 총 2.8억 개 인덱스 구축
     * RocksDB와 HNSW를 200코어, 4TB RAM, 82TB SSD에 샤딩하여 저장 및 인덱싱
     * 쿼리 응답 전체 지연시간은 약 500ms 수준으로 설정함
     * 전체 구조와 흐름은 크롤러, 파이프라인, 스토리지, 임베딩 벡터 인덱스, 서비스 메쉬, 프론트/백엔드 영역으로 분리됨

임베딩 기반 검색 실험 및 개선

  Neural Embedding Playground

     * SBERT 등 임베딩 모델을 활용한 검색은 기존 키워드 중심 검색보다 자연스러운 질의 이해와 정확도가 높음이 실험을 통해 확인됨
     * 입력 쿼리의 의도를 문맥 및 문장 단위로 파악해 실제로 관련성이 높은 정답을 추출하는 것이 가능함

  전통 검색 vs. 뉴럴 검색 예시

     * 기존 검색: 무작위성 결과, 키워드 일치 위주
     * 임베딩 검색: 질문의 맥락과 의도 파악, 정확한 핵심 문장 또는 개념 중심 결과 제공
     * 복잡한 개념 결합, 암묵적/복합 질문, 품질 신호가 담긴 쿼리에 대해 의미 기반 정답 탐색 가능

웹 페이지 파싱 및 정규화

     * HTML에서 의미적 텍스트 요소만을 추출, 레이아웃·제어 요소 등 노이즈 제거하는 정규화 목표
     * WHATWG, MDN 등 표준에 맞춰 p, table, pre, blockquote, ul, ol, dl 등 테이블 구조 유지
     * 메뉴, 네비게이션, 댓글, 인터페이스 등 크롬 요소 완전 제거
     * 사이트별(예: en.wikipedia.org) 특수 규칙 적용하여 과도/부족 추출 문제 해결
     * 의미 기반 구조화 데이터(meta, OpenGraph, schema.org 등)도 활용해 지식 그래프 구축과 랭킹 개선 가능

청킹 및 문맥 보존

  문장 단위 청킹

     * 임베딩 모델의 한계를 극복하기 위해 전체 페이지가 아닌 문장 기반 단위 청킹 적용
     * 청킹 시 자연스러운 문장 경계, 문법, 축약, URL, 비공식 표현 등 다양한 경우의 수를 spaCy sentencizer로 정확히 구분함

  문맥 보존 및 연결

     * 문장 간 의존관계, 헤딩, 파라그래프, 표 등을 파악해 문맥 정보까지 함께 묶어서 임베딩
     * 예를 들어 테이블 구조도 각 행의 의미를 잃지 않도록 상위 헤딩/조항 등을 연쇄적으로 연결해서 삽입함

  문장 체인(Statement Chaining)

     * DistilBERT 분류기로 한 문장과 이전 문장을 함께 분석하여, 문맥 의존성 확인 및 체인 추출을 자동화함
     * 임베딩 시, 상위 종속 문장들을 모두 함께 포함해 문맥 유지력을 높임

프로토타입 활용 결과

     * 샌드박스 환경에서 다양한 실전 쿼리 실험을 통해 기존 방법 대비 훨씬 정확한(문맥 맞춤형) 질의응답을 확인함
     * 키워드 불일치, 생략/은유/복합 질문 등도 앱이 의도를 인식해 올바른 문맥 문장 매칭—숨은 지식과 관계도 효과적으로 발굴함

대규모 웹 크롤러(노드 기반)

     * 업무 분산을 위한 워크 스틸링, 도메인 별 동시성/트래픽 제어, DNS/URL/헤더 검증 등 다양한 안정성 및 효율성 고려
     * 크롤러는 비동기 I/O 기반 Promise, 디도스에 강한 메커니즘, 자원 관리(메모리, 딜레이, 백오프), 노이즈 도메인 탐지 등 적용
     * URL 정규화, 프로토콜 및 포트/유저정보 제한, Canonicalization으로 중복/비정상 URL 필터링 강화를 진행함

파이프라인(분산 태스크 큐)

     * 각 페이지 상태를 PostgreSQL에서 관리, 초반에는 직접 Polling/트랜잭션 활용
     * 대규모 분산 환경(수천 크롤러)에서 스케일 문제, 대기열/락 병목 발생 → Rust 기반 인메모리 코디네이터로 큐 상태 관리
     * 태스크 구조: 해시맵 기반 인덱스, 바이너리 힙, 도메인 그룹, 랜덤 Poll, 자리 바꾸기(swap_remove) 등 다양한 인덱싱
     * 태스크별 메모리 100B 수준, 128GB 서버에서 1B 태스크도 처리 가능
     * 이후 SQS 대체용 Open Source RocksDB 기반 대기열 개발, 1노드에서 30만 ops/초 지원

스토리지 설계(Oracle → PostgreSQL → RocksDB)

     * 초반 Oracle Cloud(저비용 egress/저장), 이후 PostgreSQL(TOAST)까지 사용했으나, 쓰기확장/성능 한계에 직면
     * PostgreSQL의 MVCC, Write Amplification, WAL 등의 특성상 대규모 병렬 INSERT 시 병목, 결국 KV 스토어인 RocksDB로 전환
     * RocksDB의 블롭 별도 저장(BlobDB), SST 파일, 멀티 쓰레드, 해시 인덱싱 등으로 NVMe SSD 최대 성능 활용
     * 64개의 RocksDB 샤드로 확장—각 샤드는 xxHash(key) 기반 라우팅, Serde+MessagePack 직렬화 사용
     * 최종적으로 수천 클라이언트(크롤러/파서/벡터라이저)에서 20만 ops/초 처리, 메타 및 블롭 분리/압축 저장

서비스 메쉬 및 네트워킹

     * 인프라 확장 시 서비스 인스턴스 자동 검색/통신 보안 위해 mTLS+HTTP2 기반 설계
     * Node마다 루트 CA 기반 인증서 적용, MessagePack 직렬화 직접 이용, 내부 DNS 및 CoreDNS, 커스텀 클라이언트 SDK 등 개발
     * 기존 VPN(ZeroTier, Tailscale) 사용 경험 있으나, 네트워크/성능/운영 상의 문제로 직접 HTTP+mTLS 선택
     * 시스템 서비스 제어(systemd + cgroup + journald)로 관리 일원화, 경량화 및 표준화 실현

대규모 GPU 임베딩 생성 파이프라인

     * 초기에 OpenAI API 활용, 비용 문제로 Runpod 등 고성능 GPU 환경으로 이전
     * 파이프라인은 각 스테이지를 비동기로 분리, GPU 효율 90% 이상, 250대 GPU에서 초당 10만 embeddings 생성
     * Rust 파이프라인, Python inference → named pipe로 IPC, 구조적 백프레셔(backpressure)로 자원 자동 튜닝

벡터 인덱싱(HNSW/샤딩)

     * HNSW 알고리듬을 이용한 메모리 기반 벡터 서치, ANN(Approximate Nearest Neighbor)로 초저지연
     * RAM 한계 도달 시 노드별 균등 샤딩(64노드), 각 샤드는 개별 HNSW 인덱스로 병렬 검색
     * HNSW 특성상 대량 RAM 필요, 라이브 업데이트 한계 존재 → 결국 CoreNN이라는 디스크기반 오픈소스 벡터DB로 이전
     * CoreNN은 128GB RAM, 단일 노드에서도 3B 임베딩 고정확 조회 가능

검색엔진 UX와 지연 최적화

     * 검색엔진 UX는 즉시성 응답이 핵심(로드 인디케이터 X, 전통적 SSR)
     * Cloudflare Argo 등으로 에지 PoP에 근접, HTTP/3 채택해 전송 지연 최소화
     * 앱 서버 수준에서 모든 데이터 준비, 개별 API 라운드트립 최소화, 미니파이 및 압축된 페이지 즉각 응답


   이 요약은 최신 자연어 처리·ML 기술이 적용된 대규모 웹 검색엔진이 어떻게 엔드-투-엔드로 2개월 만에 구축될 수 있는지, 시스템·알고리듬·인프라 전반에 걸친 주요 설계/최적화 사안을 구체적으로 안내함.

        Hacker News 의견

     * OpenAI의 최신 임베딩 모델에서 배치 추론 시 100만 토큰당 $0.0001이라는 아주 낮은 비용을 제공한다는 점이 놀라움임, 10억 개 페이지를 각 1,000 토큰씩 임베딩해도 총 $100밖에 안 듦을 발견함, 자체적으로 Runpod 스팟 GPU로 추론을 돌리면 이보다 100배는 비싸게 됨, 이외 다른 API 비용은 논외임, OpenAI가 이렇게 도메인 특화 소스 데이터를 확보하려는 일종의 허니팟 전략 혹시 아닌지 궁금함
          + OpenAI는 대부분 API를 통해 처리된 데이터로는 재학습을 하지 않음, 특별한 예외가 있지 않는 한 그런 일은 없다고 알고 있음
     * 글 마지막에서는 Common Crawl 데이터를 추가할 생각을 언급함, 우리 팀의 웹 그래프 기반 랭킹 정보가 어떤 페이지를 크롤링할지 선정하는 데 큰 도움이 될 것 같음, 대규모 사례를 직접 보여주는 게 흥미로웠음, 벡터 데이터베이스가 의외로 비용 효율적이어서 놀람
     * 진심으로 경탄을 표함, 글도 놀라울 만큼 잘 정리됨, 검색엔진의 핵심은 정제되고 필터링된 데이터라는 점에 동의함(쓰레기를 넣으면 쓰레기가 나옴), LLM 훈련에서도 결국 소량의 고품질 데이터가 더 중요하다는 것을 다시금 체감함, 모든 컨텐츠를 LLM이 심사해서 검색엔진을 만들면 어떤 성능일지 궁금증이 들음
          + 현재 친구의 소규모 비즈니스 웹사이트 SEO를 직접 관리 중임, 기술적으로 손봐서 지역 맞춤 수작업 컨텐츠도 꽤 썼음, 2개월이 지나도록 Bing은 파비콘도 못 긁어감, Google도 1달이나 걸림, 여전히 완전 관련 없는 전국 규모 리드 수집 사이트, Yelp 블로그 스팸, 지역과 전혀 무관한 타업체 페이지가 상위에 노출됨, 뭔가 pagerank와 크롤링 체계가 제대로 작동하지 않는 게 확실해 보임
     * 정말 존경심이 듦, 이렇게 많은 기술들을 모아 하나로 작동시키는 건 대단한 일임, 검색엔진의 결정적 가치는 실제 랭킹 알고리즘에 있다고 생각함, 이 프로젝트에서 LLM이 랭킹에 어떻게 사용되는지는 잘 모르겠음, 옛날 랭킹 기법 중에는 실제 사용자의 검색~클릭 데이터를 수집하는 게 있음, 이게 바로 인간의 검색어→클릭한 링크 Train 데이터임, 몇 번만 클릭해도 랭킹이 확실히 향상됨, 이 데이터를 뉴럴넷에 넣으면 분류 문제로 바꿔 랭킹을 개선할 수 있음, 더 많은 사람이 클릭할수록 가중치가 커짐
     * 정말 놀랍다는 말밖에 없음, 실제로 꽤 잘 돌아감, 만약 1만 명이 월 $5씩 구독하면 비용을 충당할 수 있다면, 커뮤니티가 후원하는 검색엔진도 그리 허무맹랑하지 않을 것 같음
          + Encorder-only LLM을 아는 사람에게는 Google이 사실상 이미 끝났다는 게 명확함, Google이 아직 유지되는 건 전 세계 웹을 크롤링해서 인덱스를 항상 최신으로 만드는 데 오래 걸려서임, Common Crawl 같은 오픈 기관이나 유료 서비스가 실시간으로 웹 크롤링 문제를 해결한다면 Google의 25년 방어벽은 무너지게 되고, 검색 자체가 평준화될 것임
          + 더 나아가 대기업 IT의 모든 기능별 대체가 실시간으로 진행 중인 모습을 우리는 목격하고 있음, 모델을 통해 이제 기업의 기술 barriers도 크게 낮아짐
     * 한 사람이 여기까지 만들어냈다는 게 이제껏 상상도 못 했던 일임, 상용 검색엔진과 그렇게 멀리 있지 않은 것 같음, 어쩌면 Google도 따라갈 만한 거리임, 연간 $5만이면 되다니 말도 안 되는 저렴함이라, 당장이라도 시드머니로 보내고 싶을 정도임
     * 정말 멋진 프로젝트임, 유명 검색엔진에서 잘 안 나오던 질문(고해상도 울트라와이드 모니터 추천 옵션)에 대해 여기서도 시도해봤지만, 여전히 대형 랭킹만 전문인 메타 페이지가 전문적인 정보를 가진 페이지보다 우선 노출되는 현상이 있음, 랭킹에 대한 집착이 너무 강해 보임, 내가 직접 답을 찾는다면 하드웨어 포럼, 블로그 몇 개 추려서 꼼꼼히 스펙과 장단점 비교해볼 것임, 이런 분석을 실제 사이트가 했는지 확인하기 어렵기 때문에 특수한 경우에는 구체적 데이터 인용 사이트를 더 높게 평가해야 합리적임, 유저 입장에서는 분석에 쓰인 원천 자료를 보고 싶음, 하지만 실제 검색엔진은 이렇게 바닥에서 위로 소스 근거를 올려주지는 않음
          + 이건 애초에 검색 문제(search query)가 아닐 수도 있음, 정확하게 “정해진 답”이 존재하는 한 페이지가 아니라, 여러 출처 조합과 ‘추론’을 필요로 하는 질문임
     * 정말 멋지다고 생각함, 전부를 이걸로 대체해볼까 했는데, 조금은 시간 낭비가 될 수도 있지만 그래도 꼭 여러 검색을 시도해보고 소감 남기겠음, 대체로 거의 맞는 곳으로 이끌긴 하는데 100%는 아니었음, 예를 들어 lemmy로 fediverse 찾으려 했더니 liberapay 페이지가 결과로 떴음, 꼭 Common Crawl 연동 약속을 지켜주고 archive.org 같은 다른 사이트도 참고해줬으면 함, AI 업계에 수십억이 투입되는데, 실제 이런 실험이 커뮤니티 펀딩이나 작업공유로라도 잘 굴러가 성공했으면 좋겠음, 솔직히 현 검색엔진 거의 독점 상황에 많은 사람들이 지쳐 있음, Ecosia도 자체 검색엔진 준비 중인 걸로 아는데 꼭 이 프로젝트와 협업하거나 도움받았으면 함, 나는 탈중앙화(Decentralized) 검색엔진을 진심으로 원함, 지속가능성 때문에 오픈소스는 아직 망설여지는 점 이해함, 하지만
       수많은 돈이 별 의미 없이 낭비된다는 게 답답하고 이 프로젝트는 잠재력이 엄청나기에 제발 오픈소싱해주면 좋겠음, 커뮤니티가 결국 크라우드펀딩 등으로 지속가능 방안 찾아낼 수 있을 것이라 믿음, 아직 포스팅을 다 읽진 않았지만 너무 기대돼서 바로 사용부터 해봄, 글 자체가 아주 심도 깊고 이런 방식이 다른 사람에게도 충분히 참고가 될 거라 생각함, 솔직히 마법 같고 오랜만에 이런 프로젝트에 처음부터 끝까지 설렘을 느낌, 오픈소스가 힘든 것도, 제3국 배경도 알지만 진짜 내 돈 중 $50이라도 기부할 의향이 있음, 온라인 결제 단 한번도 안 해본 내가 이 정도로 기꺼이 후원하고 싶을 정도임, 그래서 꼭 Common Crawl 같이 활용해서 커뮤니티와 함께 했으면 함, 진심으로 이 프로젝트와 커리어 모두 응원함
     * 최근 읽은 글 중 가장 통찰력 있었음, 비용을 줄이기 위해 선택한 요소와 실제 절감 포인트를 자세히 설명한 게 특히 좋았음, 뉴럴 서치에 초점을 맞췄지만 BM-25 + 임베딩을 결합한 하이브리드 검색도 시도해봤는지 궁금함, 그리고 어떤 리랭킹 모델들이 가장 유용하고 효율적이었는지도 묻고 싶음
     * 정말 재미있는 경험담이었음, 나도 비즈니스 검색용으로 비슷한 걸 개발하고 있는데 비슷한 도전과제 많이 맞닥뜨림, 많은 사람이 크롤링/처리/인덱싱이 쉬울 거라 생각하지만, 대규모로 비용 효율적으로 하는 건 완전히 다른 문제임, wilsonzlin에게 박수 보냄, 관련 이야기 나눠보고 싶음, 이런 걸 e2e로 직접 만드는 사람은 정말 소수임
"
"https://news.hada.io/topic?id=22601","Whispering - 오픈소스 음성 전사 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Whispering - 오픈소스 음성 전사 앱

     * Whispering은 단축키 입력 후 음성 → 텍스트 변환 과정을 거쳐 바로 클립보드에 붙여넣는 로컬 우선 음성 전사 도구
     * 기존의 많은 도구들이 폐쇄형·유료 서비스였던 것과 달리, Whispering은 투명한 데이터 처리와 오픈소스 접근성을 제공
     * 사용자는 로컬(Whisper C++, Speaches 등) 또는 클라우드(Groq, OpenAI, ElevenLabs 등) 방식 중 선택할 수 있으며, 원하는 AI 변환 기능을 설정할 수 있음
     * 앱은 22MB로 가볍고 빠른 실행을 지원하며, 맞춤 단축키, 음성 활성화 모드, 텍스트 자동 포맷팅 등 고급 기능을 포함
     * 데이터 소유권과 비용 절감을 동시에 달성할 수 있어, 폐쇄형 전사 SaaS 대안으로 의미 있는 프로젝트


Whispering 개요

     * Whispering은 무료·오픈소스 기반의 음성 전사 앱으로, 단축키를 누른 후 음성을 입력하면 텍스트로 변환 후 자동 복사됨
          + 개인 데이터는 기본적으로 로컬에 저장되며, 외부로 전송되지 않음
          + 원할 경우 OpenAI, Groq, ElevenLabs 등 외부 API를 직접 연결 가능
     * 투명성과 데이터 소유권 보장을 핵심 가치로 내세움

주요 기능과 특징

     * 음성 활성화 모드(Voice Activity Detection, VAD) 지원
          + 사용자가 말하면 자동으로 녹음 시작, 멈추면 자동으로 종료
     * AI 기반 변환(Transformations) 기능
          + 문법 교정, 번역, 요약, 서식 적용 등 다양한 AI 워크플로우를 설정 가능
          + OpenAI, Anthropic, Google Gemini, Groq 등 다양한 LLM 제공자 선택 가능
     * 커스텀 단축키 지원으로 사용자 환경 맞춤화 가능
     * 저비용 구조: 직접 API 키를 사용해 제공자에 비용 지불
          + 예: Groq 모델 사용 시 0.02$/시간 → 월 0.20$ 수준 (전통적 SaaS 대비 100배 저렴)

설치 및 사용

     * macOS, Windows, Linux용 바이너리 제공
          + macOS: Apple Silicon/Intel 버전 구분 제공
          + Windows: MSI/EXE 설치 옵션 제공
          + Linux: AppImage, DEB, RPM 지원
     * 설치가 번거로운 경우 웹 앱 버전도 제공 (단, 전역 단축키는 지원 안 됨)

데이터 처리 방식

     * 모든 녹음 및 전사 결과는 IndexedDB에 저장되어 로컬 관리
     * 외부 전사 서비스를 선택할 경우, API 키를 통한 직접 호출만 발생
          + 서버 중계 없음, 데이터 수집 없음
     * 변환 서비스 역시 사용자가 선택한 LLM 제공자에게만 전송
          + 변환 워크플로우, 프롬프트, 설정 값은 로컬에 저장됨

차별점과 장점

     * 기존 전사 앱들은 중간 서버를 거치며 월 15~30달러 요금을 부과
     * Whispering은 중간자 없는 구조로, 직접 제공자와 연결해 비용 절감 가능
     * 로컬 옵션 선택 시 완전한 오프라인, 무료, 무제한 사용 가능

개발 및 아키텍처

     * Svelte 5 + Tauri 기반으로 제작되어 데스크톱과 웹 모두 지원
          + 크기 약 22MB, 빠른 실행, 리소스 최소 사용
     * 코드베이스는 서비스 계층, 쿼리 계층, UI 계층으로 나뉜 3계층 아키텍처
          + 웹과 데스크톱 버전 간 97% 코드 공유
     * 브라우저 확장(React + shadcn/ui)은 현재 임시 중단, 데스크톱 앱 안정화 중

기여와 커뮤니티

     * 누구나 소스코드 검토, 기능 기여, 새로운 전사/AI 서비스 어댑터 추가 가능
     * 개발 지침: TypeScript/Svelte 패턴 유지, WellCrafted 라이브러리 기반 에러 처리
     * Discord 커뮤니티 및 GitHub Issues를 통해 사용자 피드백과 협업 진행
     * MIT 라이선스 기반으로 자유롭게 포크·수정·재배포 가능

FAQ 주요 답변

     * 오프라인 사용 가능 여부: Speaches 로컬 모드로 완전 오프라인 지원
     * 실제 비용: Groq 사용 시 월 0.2~3$, OpenAI 사용 시 월 1.8~16.2$, 로컬은 무료
     * 보안/프라이버시: 녹음은 로컬 보관, 외부 전송은 사용자 직접 선택한 제공자 API로만 전송
     * 지원 플랫폼: macOS, Windows, Linux 데스크톱 + 웹 브라우저

   폐쇄망에서 음성인식 기능을 구현하기 위해 whisper로 STT 하는 가벼운 웹서버를 만들어서 쓰고 있는데요.
   오프라인에서 다 되는것처럼 설명을 하고 있지만, 전사 기능 말고 트랜스포메이션 같은것들은 클라우드에 의존해야 하니 차별점과 장점이 무슨 의미가 있나 싶네요.

        Hacker News 의견

     * Parakeet 모델을 로컬에서 쓸 수 있는지 궁금함, MacWhisper를 사용하는데 Parakeet이 기기 내 전사 성능에서 Whisper보다 월등히 빠르고 정확해서 아주 만족하며, push-to-transcribe를 MacWhisper와 Parakeet 조합으로 오랫동안 써왔음, 정말 마법 같은 경험임
          + 아직 지원은 안 되지만 나도 꼭 바라는 기능임, Parakeet이 리더보드에서 굉장한 결과를 낸 걸 봤고 현재는 whisper.cpp 통합을 안정화한 다음 Parakeet 지원을 추가할 생각임, 누가 PR로 커넥터를 만들어준다면 바로 머지할 준비가 됨
          + Parakeet 정말 놀라움, A100 GPU에서는 실시간 대비 3000배 속도, 노트북 CPU에서도 실시간의 5배 속도임, whisper-large-v3보다 정확함, huggingface ASR 리더보드 참고하면 됨, 다만 NeMo 프레임워크는 좀 번거로울 수 있음, Mac에서 (MacWhisper로) 로컬 동작하는 것이 놀라움
     * 오늘 아침에 레포를 확인하는 분들을 위해 안내함, whisper C++ 지원 기능을 추가하는 릴리스를 준비 중임, 프로그레스 PR 링크 참고하면 되고, 이 공개가 되면 훨씬 더 강력한 로컬 전사 지원을 할 예정임, 몇 가지 작은 수정들만 마치면 됨
     * 오픈소스 기반의 로컬 우선 앱이 모든 유형으로 존재했으면 좋겠고, 각각이 잘 연동되길 바람, Epicenter의 아이디어는 모든 데이터를 텍스트와 SQLite로 폴더에 저장해서 투명하고 신뢰할 수 있게 만드는 것임, 그 위에 상호운용이 가능한 로컬 우선 도구들을 얹는 구조임, 이런 투명함이 신뢰할 수 있는 점이 정말 좋음, TTS는 경험이 거의 없지만 이 영역을 파볼 땐 Epicenter 덕분에 Whispering부터 시작하려고 함, 레포에 스타 눌렀고 기여할 만한 앱 아이디어도 고민해볼 생각임, YC 진출 축하하며 고마움 전함
          + 지지해줘서 정말 고맙고, 이런 피드백이 너무 귀중함, 오픈소스와 자가 데이터 보유의 가치를 공유하는 분과 소통하게 되어 기쁨, YC 기간 동안 더 많은 OSS 개발자를 지원하는 방향으로 열심히 해보겠음, 지속적으로 소통 유지하면 좋겠음
          + 여기선 TTS(음성 합성)가 아니라 STT(음성 인식) 얘기인 것 같음
          + 나중에 클라우드 버전도 원한다면 AgentDB API를 활용해 해당 데이터만 업로드하고, 쿼리만 클라우드로 돌리면 됨
     * 멋진 제품을 공유해줘서 고마움, 지난주에 상용 제품들이 느려서 직접 로컬에서 동작하는 비슷한 앱을 개발했음, 버튼 한 번에 모든 음성을 녹음하고 전사해서 앱에 넣는 기능임, 모국어로 말하면 자동으로 영어로 번역되는 2번째 모드도 만들었음, 쉼표나 따옴표처럼 포맷 유지도 제대로 구현했음, 이런 게 MacOS 기본 받아쓰기 앱에 아직 구현 안 된 게 신기함
          + 지지해줘서 정말 고맙고, 번역에도 도움이 됐다니 반가움, MacOS 기본 받아쓰기 기능이 이 정도 발전을 못한 게 의아함, 그 빈자리를 OSS가 채우는 중임
     * iOS에도 이 기능이 있는지 궁금함, Parakeet이나 Whisper를 감싼 커스텀 iOS 키보드 앱을 원함, 그래서 받아쓰기 키보드로 전환하고 버튼만 누르면 모든 앱(1,3rd party 포함)에 바로 전사 내용을 넣을 수 있으면 좋겠음, MacOS에선 MacWhisper가 정말 훌륭한데 iOS엔 똑같은 기능이 아직 없음, iOS 기본 받아쓰기도 좋긴 하지만 기술 용어나 약어는 Whisper cpp가 훨씬 더 잘 알아들음
          + superwhisper가 그 기능을 제공함
     * 로컬에서 오디오를 처리하는 받아쓰기 기능에 관심 있었음, 원격 API로 오디오를 보내는 것은 싫고 전부 노출 없이 로컬에서만 동작해야 함, FUTO Keyboard에서 사용하는 모델 등 몇 가지만 써봤는데, 아직 부족하다는 느낌임, 특히 잡음 처리나 ""음..."", ""에..."" 같은 군더더기, 말하다가 중간 수정 같은 것도 잘 못 따라감, 이런 부분을 잘 해결한 오픈 모델이 나오길 바람, 앱의 문제인지 모델의 한계인지 아직 판단 어렵지만 관련 새로운 모델이 있는지 궁금함, 그전까진 불편하지만 계속 타이핑으로 노트 테이킹 해야 할 듯함
          + Whisper 본체는 써봤는지 추천하고 싶음, 오픈 웨이트라 쓸 수 있고, 위에 소개된 Epicenter의 특징 중 ""트랜스크립션 변환"" 기능이 있음, 텍스트를 LLM으로 입력해서 더 깔끔하게 정제할 수 있음, 토큰 비용만 감당할 수 있다면 군더더기 제거 뿐만 아니라 의미 단위로 문장도 자동 교정 처리 가능할 것임
     * 이 분야에서 로컬 우선 방식과 자체 백업툴 조합이라는 개념이 점점 좋아지고 있음, 최근 hyprnote가 Hacker News에서 인기를 끌었는데, 정말 잘 만들어졌고, 로컬 우선이지만 선호하는 도구로도 활용 가능함
          + Hyprnote도 정말 팬임, 두 제품이 조금씩 다르지만 기술 스택에도 겹치는 부분이 많고 미션도 많이 닮아 있음
     * whispering을 1년 넘게 사용했는데 컴퓨터와 상호작용하는 방식 자체가 달라졌음, 꼭 프로그래머블 키가 있는 마우스와 키보드를 사서 whispering 단축키를 등록함, 이제는 일반 타이핑으로 다시 돌아갈 수 없을 만큼 키 입력이 비효율적으로 느껴짐
          + 응원해줘서 정말 고맙고 이런 피드백이 큰 힘이 됨, 앞으로도 문제 생기면 언제든 연락해줬으면 함
     * 이 기술이 어린이 음성에도 잘 동작할지 궁금함, 교육용 앱에서 프라이버시가 중요한 로컬 기반 모델에 수요가 많음, 근데 현재 Whisper는 어린 연령대에서 잘 못 알아듣는 걸로 알고 있음
          + 맞음, Whisper는 어린이 목소리에 약한 편임, Parakeet이나 다른 모델은 아직 테스트 안 해봤는데, 교육용에서 프라이버시가 중요하니 좋은 사례임, Hyprnote도 추천하고 싶음, 최근 OWhisper 등 모델 확장을 꾀하고 있음, Hyprnote 소개, OWhisper 자세히 참고 바람
     * 로컬 우선 오픈소스 소프트웨어에 집착하고 있음, 모두가 그렇게 해야 한다고 생각함
          + 정말 공감함
"
"https://news.hada.io/topic?id=22613","2025년 Rust: 기초 소프트웨어를 목표로","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       2025년 Rust: 기초 소프트웨어를 목표로

     * Rust는 올해 10주년을 맞이하며, 향후 기초(Foundational) 소프트웨어 개발의 핵심 언어로 자리매김하고 있음
     * 기초 소프트웨어는 운영체제 커널, 클라우드 플랫폼, 임베디드 장치, CLI 도구 등 모든 것의 기반이 되는 계층을 의미
     * Rust는 C/C++ 수준의 성능과 신뢰성을 제공하면서도 메모리 안전성을 보장하는 타입 시스템으로 장벽을 낮췄음
     * Rust의 사명은 단순히 기반 영역에 국한되지 않고, Dioxus, Tauri, Leptos와 같은 프로젝트를 통해 상위 애플리케이션 개발에도 파급 효과를 주고 있음
     * 향후 언어 상호 운용성, 타입 시스템 확장, 생태계 강화 등을 핵심 투자 영역으로 계획하고 있음


Rust의 비전: 기초 소프트웨어

     * Rust의 핵심 비전은 기초 소프트웨어를 보다 쉽게 작성·유지할 수 있게 하는 것임
          + 기초 소프트웨어란 모든 시스템의 기반이 되는 운영체제 커널, 클라우드 인프라, 임베디드 장치, CLI 도구 등을 포함
          + 이미 Windows와 Linux 커널, VSCode 검색 엔진 ripgrep, Deno, Python uv 패키지 매니저 등 다양한 곳에서 채택되고 있음
     * 이러한 소프트웨어는 성능·신뢰성·생산성이 동시에 중요함
          + 기반이 무너지면 상위 계층 전체가 영향을 받기 때문에 안정성이 필수
          + 성능 저하는 상위 계층의 성능 한계로 이어지므로 최소한의 오버헤드 필요

기초 소프트웨어의 성능, 신뢰성, 생산성

     * 기초 소프트웨어는 모든 소프트웨어와 마찬가지로 다양한 요구가 있으나, 모든 요소가 더욱 중요함
          + 신뢰성은 최우선 과제임. 기초가 무너지면 그 위에 있는 모든 것이 실패하는 구조임
          + 성능 오버헤드는 상위 계층 성능의 한계를 결정하므로 최소화해야 함
     * 기존에는 이러한 요구사항을 충족하는 데 두 가지 선택지가 있었음
          + C/C++ : 큰 자유를 제공하지만 이에 상응하는 완벽성이 요구됨
          + Java, Go 등 고수준 언어: 성능 유지를 위한 특별한 코딩 방식 필요, 추상화와 편의성 사용에 제약을 받음
     * Rust는 제로-코스트 추상화와 메모리 안전성을 보장하는 타입 시스템의 결합으로 기존 방식을 바꿈
     * 고수준 코드를 안전하게 작성하면서 저수준 성능과 메모리 안정성을 동시에 달성하는 도구가 됨

진입장벽 낮추기와 개발자 역량 강화

     * Rust 발표에서 타입 시스템과 정적 검사를 ""시금치"" (좋지만 먹기 싫은 것)로 비유하는 경우가 많음
     * 현실적으로 타입 시스템은 개발자에게 강력한 무기임
     * 초보자는 타입 시스템을 배우며 성공적인 소프트웨어 구조 학습이 가능함
     * 전문가는 자체 구조 설계에서 실수를 더 빨리 발견할 수 있음

     * Yehuda Katz의 ""집중 상태에서 만드는 추상화가 피로한 나의 미래를 돕는다""는 발언도 이를 잘 요약함

비기초 소프트웨어 영역

     * Rust의 미션이 기초 소프트웨어에 초점이 맞춰졌다 해도 그 외 영역이 무시되는 것은 아님
     * Dioxus, Tauri, Leptos 등 프로젝트는 Rust를 활용해 GUI, 웹페이지 같은 고수준 애플리케이션 영역으로도 확장하고 있음
     * Rust의 주요 강점은 본질적으로 기초 소프트웨어에 집중되어 있지만, 이러한 시도들은 무시해서는 안됨

스트레칭 목표와 성장

     * 기초 소프트웨어는 저수준 세부 제어를 필요로 하므로, 일반적으로 접근성과 사용성(ergonomics) 은 중요하지 않게 여겨지는 경향이 있음
     * 필요한 세부 제어가 있는 만큼, 오히려 더 사용성이 중요함
     * 개발자가 정말 중요한 부분에만 집중할 수 있게 도와주면 생산성이 크게 향상됨

     * Rust의 고수준 적용을 추진하는 프로젝트들은 Rust 프로그래밍을 더욱 편리하게 개선할 기회를 제공함
     * 이러한 개선점이 기초 소프트웨어 개발에도 고스란히 반영됨
     * 핵심은 제어권과 신뢰성을 잃지 않고 사용성을 높이는 것

전체 스택 지원의 중요성

     * Rust에서 고수준 애플리케이션 개발을 쾌적하게 만드는 또 다른 이유는 전체 스택을 하나의 기술로 구축할 수 있기 때문
     * 처음에는 Rust를 데이터 플레인 서비스 등 일부에만 사용하려던 개발자들이, 전 영역에 확장하는 경우가 많아짐
     * Rust가 생산성이 높고, 하나의 언어로 라이브러리와 코드 공유가 가능하기 때문임
     * 본질적으로 단순한 코드는 어느 언어로 작성해도 단순함

점진적 심화(Iterative Deepening)의 경험

     * 이상적으로는 Rust 사용자 첫 경험이 단순하고, 프로젝트가 진전됨에 따라 점진적으로 더 많은 제어를 국지적으로 확장할 수 있어야 함
     * 이는 단순해 보이지만 실제로 매우 어려운 과제임
     * 많은 프로젝트가 초심자 진입장벽이 크거나, 높은 제어 단계를 배우는 데 많은 지식을 요구하여 실패함
     * Rust가 항상 성공하는 것은 아니지만, 이를 개선하기 위해 지속적으로 노력 중임

앞으로의 계획

     * 본 글은 이 시리즈의 첫 글로 이후 네 번에 걸쳐 Rust가 기초 소프트웨어에 더 적합해지기 위해 필요한 투자 영역을 제시할 계획임
          + 언어 상호 운용성(smooth language interop) 과 확장성(extensibility)
          + 타입 시스템을 통한 목표 명확화(clarity of purpose)
          + 생태계 강화: 더 나은 가이드라인, 도구, Rust Foundation 활용
          + 마지막 글에서는 Rust 오픈소스 조직 운영에 대해, 기여 및 유지보수가 최대한 접근성 높고 즐거운 활동이 되기 위한 방안을 다룰 예정

        Hacker News 의견

     * 핵심 소프트웨어를 논할 때 Rust에서 제일 아쉽다고 생각하는 부분은 ABI임을 꼽음. Rust로 OS를 만들고 풍부한 서비스를 제공하려면, OS가 업그레이드되어도 애플리케이션이 라이브러리를 다시 컴파일할 필요 없이 쓸 수 있어야 함. Windows는 COM, Apple은 한때 ObjC의 dynamic dispatch(그리고 지금은 Swift ABI), Android는 JVM 및 바이트코드로 이 문제를 해결함. Rust는 사실상 extern ""C"" 밖에 지원을 못 해서 동적 라이브러리 활용이 제한적임. VM 계층(JVM, .NET) 없이 ABI를 제공하는 건 엄청나게 어렵고, 한번 정한 구현 세부사항을 절대 바꾸지 않아야 하므로 우선순위가 밀릴 만하다고 생각함. 실제로 이런 모델이 성공한 건 Swift와 COM 정도임. Rust에 완전한 ABI가 도입된다면 거의 완벽한 언어에 가까워질 것이라고 생각함. (바이너리 형태로 의존성을 관리하면 컴파일 시간도 크게
       줄어듦)
          + Rust가 기본적으로 선택적(opt-in)인 ABI 안정성만 도입하려는 이유가 zero-cost abstraction을 추구하기 때문임을 설명함. 안정적인 ABI는 성능 저하를 동반함을 C++의 사례(C++ ABI 관련 설명)로 방증함. Rust끼리 플러그인을 동적으로 로드(dlopen)하는 용도로는 stabby, abi_stable 등의 도구가 있고 꽤 잘 동작함. 보다 범용적인 언어간 상호운용을 위해선 crABI(crABI 제안서)가 미래의 대안이 될 수 있음. 다만 Rust만으로 해결 가능한 문제가 아니고, 다른 언어와 리눅스 배포판 등 여러 커뮤니티의 지지와 협력이 필요함. Rust는 I/O와 메모리 할당 방식을 명시적으로 선택하는 언어다 보니 Swift처럼 모든 걸 공유 라이브러리로만 해결하는 구조가 맞지 않을 수 있다는 점도 언급함.
          + 거의 같은 문제를 Wasm Components로 해결하려고 시도 중임. WebAssembly가 이식 가능한 명령 포맷이라면, WebAssembly Components는 이식 가능한 실행/링킹 포맷임. 완전히 repr(wasm)/extern ""wasm""처럼 손쉽지는 않지만 wit-bindgen이나 wasm32-wasip2 타깃을 활용하면 어렵지 않게 쓸 수 있음. Wasm Components 소개 영상
          + 이게 정말 필요한지 의문임을 밝힘. 더 다양한 '것들'(slices, trait objects 등)을 인터페이스로 넘기는 게 더 편하긴 하겠지만, 현실적으로 extern ""C"" ABI만으로도 필요한 건 다 할 수 있음. 그리고 extern ABI를 더 많은 유형으로 확장하는 제안도 본 적이 있음
          + Rust 콘퍼런스에서 이 주제에 대해 Swift의 방식을 강하게 참고한 내용의 발표를 본 적 있음. 아마도 추후 이 쪽으로 발전할 거라는 예상임
          + 실제로 이미 그런 게 있음. 이름은 바로 'C'임을 언급함
     * Rust를 정말 좋아하지만 몇 가지 짜증나는 고질적인 문제들이 더 많은 관심을 받으면 좋겠음
          +
              1. self-referencing struct 문제가 있음. 예를 들어 소스 파일과 파싱된 AST를 같은 struct에 담고 싶어도 현재는 쉽지 않음. offset reference 같은 게 있으면 좋겠음
          +
              2. orphan rule(고아 트레잇 규칙). 이유는 이해하지만 여전히 귀찮은 규칙임. 새로운 기능(때로는 2~3중 래핑이 필요!)으로 해결할 수 있지만 꼭 이래야만 하는지 의문임
          +
              3. 적절한 컴파일 타임을 얻으려면 프로젝트를 많은 작은 크레이트로 쪼개야 함. 그 이유는 이해하지만 결과는 별로임. 크레이트는 하나의 컴파일 단위로 취급되고, 이는 순환 의존성이 허용되기 때문임. 하지만 대부분의 코드엔 실제론 순환 의존성이 없으니, 이런 걸 opt-in으로 처리하거나, 크레이트 내부 아이템/파일을 의존 그래프에 따라 자동으로 컴파일 단위로 나눠주면 좋겠음
          + 생각나는 것만 적었지만 더 많을 것 같음. Rust는 건설적인 비판임에도 불구하고 내 인생 최고의 언어임
               o Rust는 크레이트 간에는 순환 의존성을 허용하지 않지만, 크레이트 내 모듈 간에는 순환 의존성이 허용됨을 지적함. 대부분의 코드엔 순환 의존성이 없다고 생각하지만, 예를 들어 test 서브모듈이 있는 어떤 모듈도 순환 의존성이 적용됨. 테스트를 제대로 분리하려면 모든 테스트 함수를 크레이트 루트에 정의해야 하는데, 현실적으로 비효율적임
               o 1, 2번에 완전 동의함. 4번으로 partial self borrows(메서드가 struct의 일부만 빌리도록 하는 기능)가 있었으면 좋겠다는 의견도 추가함. 3번은 여러 크레이트를 한 번에 배포할 수 있는 등 좀 더 나은 지원이 먼저 필요하다고 봄
               o orphan rule에 관해, Rust가 다른 더 나은 대안을 도입할 필요성을 말하는 것인지, 아니면 이걸 대체할 수 있는 기능이 필요하기만 하다는 것인지 더 설명해주기를 바람
               o orphan rule에 전적으로 동의함. 어플리케이션 크레이트에서는 이를 비활성화하거나 proc macro 등으로 충분한 위생이 보장될 땐 규칙을 완화할 수 있으면 좋겠음
     * “Smooth, iterative deepening”이란 표현을 곱씹으며, Rust가 cross-language 호환성을 너무 중시하는 건 오히려 복잡성만 키우고 안전성을 해칠 위험이 있다고 생각함. 이런 경우 차라리 libc처럼 시스템의 밑바닥 부분을 교체하는 식으로 해야 도움이 된다고 봄. Go는 cross-language 호출을 거의 하지 않음. Google은 핵심 라이브러리를 직접 개발해 기초를 튼튼히 했지만, Rust는 다양한 버전의 기초 라이브러리가 난립하고 많은 게 불완전함
          + 지난 20년간 컴퓨터 과학의 핵심 과제 중 하나가 동일한 머신 내에서 여러 프로그램이 효율적으로 소통하도록 하는 것임을 밝힘. 대부분 MS의 DLL 기반을 소스와 상태로 우회하려고 하거나, CORBA 같은 객체 요청 브로커는 정착에 실패함. qnx식의 RPC도 마찬가지. 그래서 지금도 잘 맞지 않는 것들을 강제로 묶어쓰려는 시도만 반복됨
          + 실제로는 모든 걸 소켓으로도 처리할 수 있지만, 소켓은 로우 바이트 스트림이라 잘못된 추상화임에도 불구하고 사용성이 좋아서 쓸 수밖에 없음
               o 내가 보기엔, 게시물에서 다루는 내용은 기존의 DLL/COM/Wasm components처럼 진짜 cross-language shared library 대체를 하자는 게 아니라 C++을 점진적으로 Rust로 마이그레이션하려는 현실적 니즈 때문임. 전체적인 메모리 안전성 향상을 위해서 '기존 프로그램들은 어떻게 할 것인가'가 큰 숙제인데, 현재 Rust와 C++의 상호운용 수준은 부족함. 두 언어가 소스 레벨에서 원활하게 협력할 수 있으면 Rust가 상당수 C++의 범주를 대체하게 될 실제 가능성도 커짐
               o 가끔 소켓과 프로토콜만 맞추면 거의 최상의 cross-language abstraction이 되는 것 같음. 그렇다면 정말 이상적이라고 생각하는 cross-language 호출 추상화가 뭔지 궁금함
     * ""할당 피하기, GC 트리거 안되게 하기""가 최신 GC와 JIT 개념에 부합하지 않는다는 점을 부각함. 최신 GC는 stop-the-world latency가 거의 없는 경우도 많고, 전체 GC CPU 사용량은 resident set과 heap 크기의 비율이 주요 변수임. JIT는 AOT에 비해 최적화 기회가 더 크고, 더 적극적으로 탐색할 수 있음(투기적 최적화 덕분). 실제로 중요한 건 시작/워밍업 지연과 메모리 오버헤드, 그리고 악화된 최악 케이스 성능이 아니라 평균적 성능임. 게다가 수동 메모리 관리가 반드시 더 효율적이라고 보기 어렵고, 실제 RAM 사용량이 3배 늘어도 비용 차이는 제로일 수 있음. 이 주제를 잘 다룬 ISMM 학회 발표도 추천함
          + JIT가 더 많은 최적화 기회를 본다는 의견은 뭘 의미하는지 구체적으로 궁금함. JIT는 결국 AOT의 보완임
          + 여기서 말하는 '현대 GC'가 어떤 구현을 지칭하는지 묻는 질문임
     * 플래그 처리된 댓글과 토론이 쟁점을 잘 짚었다고 봄. ""공식 명세를 갖춘 언어 표준을 만들자"", ""구현이 여러 개 필요하다"" 등 현실적으로 중요한 질문임. 특히 @infogulch가 언어가 산업의 근간이 되려면 공식 명세가 꼭 필요하다는 점을 잘 짚었음(참조 댓글)
          + 플래그된 이유가 명확치 않을 뿐 아니라, 현실적으로 표준 명세가 없는 언어나 여러 개 구현이 없더라도 산업 기반 언어가 된 사례가 많음을 재치있게 예시로 듦. 예컨대 Ruby는 오래된 ISO 표준이 있다지만, 그건 해당 버전 한정이고 Python은 사실상 구현 자체가 표준임. Rust 역시 그렇고, 주류 사용자 입장에서는 이런 걸로 언어를 바꿔야 한다고 생각하진 않음
          + ""공식 언어 표준""에 대해 궁금해서 검색해보니 rust-lang/reference에 참조 문서가 있음. Rust 프로젝트는 언어 명세화에 상당히 진지하게 임하고 있음. 최근의 블로그 비전 소개글에서 진전 상황을 자세히 설명함. 명세 작업은 매우 크고 어렵지만, 주말에도 마스터 브랜치에 PR이 머지될 정도로 계속 활발히 진행 중임
          + 구현이 여러 개 필요하다는 부분도 gccrs 등 대체 rust 컴파일러가 이미 공식적으로 개발되고 있어 도움이 되었기를 바람
          + LLM과 Rust 모두 근본적으로 일부를 만족시키고 생산성에 약간의 향상을 준다고 보는 회의적 시각임. 다만 커뮤니티에서 책임감 없이 영향력을 키우려는 태도에는 동의하지 않음
          + ""published language standard""가 정확히 뭔지, 현실에서 어떤 도움이 되는지 더 설명을 부탁함
          + Rust 자체에는 불만이 없으나, 일부 사용자가 형식 명세(formal specification)가 얼마나 중요한지 이해하지 못한다는 태도엔 아쉬움이 있음. 모든 컴퓨테이셔널 시스템은 명세에 얼마나 formal하게 접근하는지 따라 수명과 신뢰도가 좌우됨. 명확한 사양이 없다면 단순히 '어느 구현이 우연히 어떤 입력에 동작했다'는 것에 전적으로 의존해야 하므로, 그런 취약한 근거에서 시스템을 올려두는 건 위험함. 컴퓨팅에서 사양이 곧 시스템임(구현은 부수적인 최적화일 뿐)
     * 사람들은 종종 Rust가 명세를 가져야 하냐는 질문 자체에 의문을 제기하는데, 이 점이 소프트웨어 엔지니어링에 실제 엔지니어링이 너무 적음을 방증함
          + 소프트웨어 엔지니어링은 진짜 엔지니어링이 아니라고 생각함. 다리나 고층 건물처럼 3번씩 지어서 제대로 만들 필요가 없지만, 소프트웨어에서는 그게 오히려 좋은 접근법이 됨
     * Rust를 ""프로그래머처럼 보이고 싶은 사람들만 쓰는 언어""라고 한 코멘트에 대해, 실제로 자신은 프로그래밍을 사랑하는 사람으로 Rust가 신선한 충격이었음을 밝힘. C++가 극도로 고통스러웠던 과거로 도저히 돌아가고 싶지 않음. 그리고 언어 표준(ferrocene 사양 기부)이나 구현 수가 중요하지 않다고 봄. Python, Java도 중심이 되는 구현 하나에 모두 의존하며 잘 운영되고 있음. C++은 여러 컴파일러를 지원하려다 결국 플랫폼별로 복잡한 문제만 커졌음. cargo의 ""엉망진창""이 구체적으로 뭔지 모르겠고, C++쪽이 훨씬 더 불편했다고 생각함
          + cargo에 대해 구체적으로 어떤 점이 문제인지 궁금함을 묻는 질문임
          + 언어나 도구의 표준/구현 다양성이 정말 중요한지, 시기상조가 아닐지, 그리고 Rust가 일찍부터 이런 데 에너지를 쏟았다면 지금만큼 성공적이었을지 의문임을 덧붙임. 해당 기사에서는 그런 포괄적 대체(replacement of everything)를 주장하는 게 아니라, 특정 타깃 용도의 지원/적합성을 강조하려는 것 같음
          + cargo는 현재 전 세계 주요 언어 중 최고의 패키지 매니저라고 생각함. 그간의 패키지 관리자들이 실패한 부분을 잘 학습해 가장 세련되고 인프라로서도 수준이 높음. 네임스페이스, 완전한 repeatable build 등 약간의 개선이 필요할 순 있지만, 지금의 cargo를 다른 언어에 얹는 건 거의 불가능에 가까움. 이만한 인프라를 가진 언어는 거의 없음

   러스트 뭔가 괜찮아보여도 악성 팬덤(?)때문에 꺼려지는 유일한 언어같아요.

   다 차치하고 요즘 러슬람들 때문에 경기가 날 지경입니다. 오프라인에서는 마이너 중에서도 상마이넌데, 온라인에서는 거의 isis... 아 좀 저기 한군데 모여서 자기들끼리만 놀았으면...

   러슬람 치고 실제 본인부터 제대로 쓰고 있는지 의문인 경우도 많죠.

   그래도... 러스트 사랑하시죠?
   러슬람은 미워해도 되지만 러스트는 사랑해주세요 ㅠㅠ

   FFmpeg때 후두려 맞아도 모든 코드를 rust로 작성 해야한다느니 뭐라니

   c나 cpp에 표준적인 패키지 매니저가 있었으면 좋았을텐데요. Cargo를 보면 늘 그런 생각이 듭니다.

   시금치가 얼마나 맛있는데....

   요즘은 러스트가 안 쓰이는 곳이 없죠

   나름 대기업 다니지만은 러스트 쓰는 분야가 없습니다. 호도하지 말아주세요.

   시비 걸지 마세요

   시비 걸지 마세요 ㄷㄷ

   ㄷㄷ ;;

   ㄷㄷㄷㄷㄷㄷ;;;
"
"https://news.hada.io/topic?id=22530","가트너의 사기극은 곧 무너질 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           가트너의 사기극은 곧 무너질 것

     * Gartner는 ‘미래’라는 이름의 용어를 만들어 마케팅하고, 기업들이 매직 쿼드런트 에 오르기 위해 비용을 지불하게 하는 구조를 운영해 왔음
     * 2022년 대세로 밀었던 Composable Architecture 개념이 2024년엔 주요 기업 사이트에서 사라지는 등, 최근 카테고리 제안의 실패가 가속화됨
     * Composite AI 등 새로운 용어도 주요 AI 업계에서는 거의 주목받지 못하며, 실질적 데이터 없이 권위를 주장하는 방식이 한계를 드러내고 있음
     * AI 업계에선 Artificial Analysis 와 같이 엔지니어 출신 분석가들이 실시간 데이터 기반으로 제공하는 분석 서비스가 새로운 신뢰 원천으로 부상
     * 과거 C-레벨 임원층의 영향력 기반이던 Gartner는 이제 ""X, Reddit, 팟캐스트, 뉴스레터 등에서 정보를 얻는"" 젊은 세대 CEO·CTO들에게 외면받으며, 신뢰를 잃어가고 있음


Gartner의 비즈니스 모델과 ‘Grift’ 구조

     * Gartner의 기본 모델은 새로운 기술 용어를 ‘미래’로 규정하고, 이를 대대적으로 마케팅하여 기업들이 매직 쿼드런트에 이름을 올리도록 유도하는 것임
          + CTO 등 대기업 의사결정권자가 이 쿼드런트를 신뢰할 때만 작동
          + 5년 전 ‘Composable’이 미래라는 분석이 나오자 다수의 B2B SaaS/IaaS 스타트업이 해당 용어를 전면 채택
     * 경쟁사가 ‘Composable’을 내세우면 다른 기업도 따라야 하는 압박이 생기며, 이는 자기 강화형 채택 사이클을 형성함
          + ‘석면 무첨가’ 시리얼 비유처럼, 모두 해당 특성을 갖고 있어도 표기하지 않으면 의심받는 구조
     * 그러나 2024년 Netlify, Contentful 등 주요 기업들이 이를 사이트에서 제거

빠른 채택과 빠른 폐기 — ‘Accelerating Misses’

     * 카테고리 창출은 산업 조율에 유익할 수 있으나, Gartner 카테고리가 2년 만에 폐기되는 것은 심각한 실패 신호임
     * 최근 Databricks와 Berkeley가 제안한 ‘Compound AI Systems’도 짧은 채택 후 폐기되는 흐름을 보임
          + Gartner는 이를 ‘Composite AI’로 명명했으나, 주요 AI 업계에서는 거의 인지하지 못함
     * 오늘날에는 조회수, 구독자 수 등 실시간 지표가 존재해, 아이디어가 자체적인 가치로 평가받아야 함

Gartner의 AI 관련 한계

     * Gartner는 AI Engineering을 처음 다룰 때 이미 1년의 주요 발전을 놓쳤으며, 하이프 사이클 정점에 올렸지만 실질적 시장 흐름과는 괴리가 있었음
     * Gartner의 과거 강점: 정보가 희소했던 시절 C-레벨 의사결정 지원
     * Gartner의 현재 약점:
          + 분석가들이 엔지니어링 경험이 부족
          + 최신 트렌드 대응 속도 저하
          + 주관적이고 유료 의존적 평가 방식
     * 이제 AI 분야에서 가장 신뢰받는 권위는 Gartner가 아니며, Artificial Analysis 가 새로운 대안으로 부상
          + 엔지니어 출신 분석가들이 실시간 데이터와 테스트 결과를 기반으로 분석 제공
          + 예: DeepSeek 모델 출시 시, Gartner는 침묵했으나 Artificial Analysis는 즉시 성능·비용 분석과 차트를 공개

신뢰 기반 변화와 정보 소비 채널

     * 과거 보수적 C-레벨 경영진은 Gartner 보고서를 구매하고 골프를 치는 문화였음
     * 현재 밀레니얼 세대 CEO·CTO는 X, Reddit(/r/LocalLlama), All In Podcast, Semianalysis 뉴스레터, 다양한 YouTube·팟캐스트에서 정보를 획득
     * Gartner 홈페이지는 여전히 ‘Gartner Says’ 형태의 무의미한 자기 인용 콘텐츠로 가득하며, 점점 더 시장과 동떨어짐

Gartner의 역사와 현재 위기

     * Gideon Gartner가 1979년 설립, 정보가 희소하던 시절 C-레벨 의사결정에 중요한 역할 수행
     * 대표 성과물: 1994년 Magic Quadrant, 1995년 Hype Cycle
     * 30년이 지난 지금, 주관적이고 ‘페이 투 플레이’ 성격의 프레임워크는 한계를 드러내고 있음
     * 차세대 리더들은 Gartner를 신뢰하지 않으며, ‘신뢰를 제조해 팔던’ 시대가 종말을 맞이하고 있음


참고: 가트너의 Magic Quadrant

   가트너의 매직 쿼드런트(Magic Quadrant) 는 IT 시장과 기술 제품을 평가·분석하기 위해 매년 발표하는 시장 조사 보고서
     * 평가 방식 : 두 가지 축을 기준으로 평가함
          + 실행 능력(Ability to Execute): 제품·서비스의 안정성, 수익성, 고객 지원, 운영 능력 등
          + 비전의 완성도(Completeness of Vision): 시장 이해도, 혁신성, 전략, 로드맵 등
     * 4개 구역
          + 리더(Leaders): 비전과 실행력이 모두 뛰어나 시장을 선도하는 기업
          + 도전자(Challengers): 실행력은 높지만 비전이나 혁신성이 상대적으로 부족한 기업
          + 비전가(Visionaries): 혁신적이지만 실행력이 아직 검증되지 않은 기업
          + 특정 분야 강자(Niche Players): 특정 틈새 시장에서 강점을 가지지만 시장 전반에서 영향력은 제한적인 기업
     * 활용 목적 기업이 IT 제품·서비스를 선택할 때 참고 자료로 사용되며, 공급업체들은 보고서에 포함되거나 높은 위치를 차지하는 것을 마케팅 포인트로 활용함

        Hacker News 의견

     * Gartner의 기본 비즈니스 모델은 미래라는 용어를 만들어내고, 강력한 마케팅을 붙인 뒤, 매직 쿼드런트에 이름을 올리려는 사람들에게 비용을 받는 것임
          + 내가 알기로는 심지어 특정 제품에 딱 맞는 세그먼트를 만들어주는 서비스도 유료로 제공함
          + 매직 쿼드런트 선정 기준은 모르지만, 최근 Vercel이 2025 Gartner® Magic Quadrant™에서 Visionary로 선정됐다고 광고하는 걸 보고 웃음이 나왔음. 인포그래픽을 보면 ‘리더’보다 실행력이 떨어져도 Visionary가 될 수 있음
          + 새로운 카테고리를 만드는 건 스타트업이 차별성을 정당화하고 시장에 진입하는 데 필요함. 스스로 만든 카테고리는 잠재 고객이 찾지 못하니, Gartner 같은 곳이 이를 공식화해주는 역할을 함. Karpathy가 ‘vibe coding’이라는 용어를 만든 것과 비슷한 개념임
          + 우리 회사 경영진도 매직 쿼드런트에 들어가려고 개발자들에게 AI 도입을 강하게 밀어붙이고 있음
          + “OpenAI, CEO 이름이 Sam인 AI 기업 중 최고 리더” 같은 식의 농담도 가능함
     * Gartner 주가는 2025-02-07에 $529.29였는데, 어제는 $238.37로 마감했음. 일종의 승리 선언 제출인가 싶음
          + (작성자) 내가 올린 건 아님. @mooreds가 항상 챙겨줘서 고마움
          + 지금 숏 포지션 잡기엔 늦었나 싶음
     * 매직 쿼드런트나 시장 성장 예측은 제쳐두더라도, Gartner 같은 분석 기관은 대규모 산업 설문을 기반으로 기업들이 신기술을 어떻게 인식하고 도입 계획을 세우는지에 대한 유용한 리서치를 함. 특히 분기별·연간 자체 조사에서 가치가 큼
          + 허황된 부분을 넘어서면, Gartner 애널리스트는 한 달에 CTO 50~100명을 만나 업계에서 무엇이 잘 되고, 실패하고, 중요해지고, 사라지는지 파악함. 이를 통해 특정 버티컬 분야의 전문가가 되어 모범 사례를 공유함
          + 하지만 HN 같은 커뮤니티가 이미 통찰을 공유하는 상황에서, 그들이 정말 새로운 걸 발견하는지는 의문임
     * 엔터프라이즈 소프트웨어 시장은 AI로 당장 뒤집히지 않으며, Gartner는 여전히 깊이 자리 잡고 있음. Netlify 같은 소규모 기업은 이 시장의 지표가 아님
          + 요점은 AI가 시장을 당장 바꾸는 게 아니라, 페이 투 플레이 방식의 분석가 기반 구매 조언 모델이 수명을 다해가고 있다는 것임. 실제로는 담당 애널리스트가 제품이나 시장을 잘 이해하지 못한 채 유행어를 만들어내고, 기업은 “우리도 그거 해요”라고 말하며 비용을 내는 구조임. 그래도 매직 쿼드런트에 들어가면 엔터프라이즈 영업에 큰 도움이 되기에 추천은 함. 하지만 데이터 품질은 좋지 않음. swyx 말대로 자동화된 심층 리서치가 이 모델을 대체할 거라 봄
          + 우리 회사 매출은 Netlify 기업가치의 6배지만, Gartner에 아부하다가 계속 실수하고 있음. 스타트업 업계는 엔터프라이즈 세계를 잘 모름. 여기엔 멋진 CEO/CTO가 없고, 전부 양복 입은 사람들뿐임
     * 대기업이 Gartner를 쓰는 건 정확해서가 아니라, 주주를 위한 리스크 관리 전략의 일부임. 브랜드와 명성을 방패로 삼아 문제 발생 시 회사 평판을 지키는 용도임
          + 더 중요한 건, 선택이 실패해도 직장을 지킬 수 있게 해준다는 점임. 컨설턴트와 마찬가지로, 경영진이 책임을 회피할 수 있게 해주는 장치임
     * Gartner는 사라지지 않을 것임. 이유는 소프트웨어 조언을 파는 게 아니라, 의사결정자의 책임 회피를 도와주는 역할을 하기 때문임. 실제 조언의 질은 중요하지 않고, ‘신뢰받는 브랜드’라는 탈출구가 핵심임
          + 100% 엉터리라면 브랜드가 손상돼 지속 불가능할 테니, 최소한 괜찮은 조언은 해야 할 것 같음. 나는 Gartner를 처음 알게 됐는데 꽤 흥미로움
          + 그렇게 책임 회피가 쉽다면, 왜 리더십 보수가 그렇게 높은지 의문임
          + 많은 컨설팅 회사가 사실상 ‘경제’라는 큰 이야기 속의 서사 장치에 불과하다고 봄. 엘리트 자녀들이 사회적 정당성을 이어가는 경로를 제공함
     * G2, Sourceforge, Gartner의 Capterra/GetApp/SoftwareAdvice 모두 같은 모델을 씀. 업체에 월 $x,xxx 이상을 받아 만든 카테고리에서 상위 노출시킴. 무료 등록도 가능하지만, 유료 플랜을 쓰면 맞춤형 어워드 아이콘, 리뷰 위젯, 리뷰 생성, dofollow 링크, 상위 노출까지 가능함. 사실상 ‘그리프트’에 가까움. 이런 로고를 보면 거부감이 들지만, 경영진은 그냥 비즈니스 비용으로 여길 수 있음
          + 1990년대 NYTimes 서평도 비슷한 모델이었음. 앞으로는 AI Agent 알고리즘이 이런 미디어 노출을 더 많이 통제할 것으로 예상함
     * 우리 회사 IT 부서의 아키텍트와 디렉터들은 Gartner 없이는 결정을 못 함. 현장 경험자의 말을 믿지 않음. 그렇다면 누구에게 조언을 구해야 할지 의문임
          + 마침 잘 만났음! 나는 Gartner와 반대되는 분석을 하는 Rentrag의 수석 애널리스트임. 우리 분석은 믿을 수 있음 /s
     * 웹은 이미 조합 가능한 상태임
     * Gartner는 단지 조금 더 고급스럽고 비싼 버전의 ‘페이 투 플레이’ 랭킹 모델일 뿐임
"
"https://news.hada.io/topic?id=22586","엔터프라이즈 경험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               엔터프라이즈 경험

     * 대기업에서 1년간 일하며 기존 스타트업, SME 환경과 극명한 차이를 체감함
     * 책임 소재 파악과 사내 프로세스가 복잡해지면서 소규모 조직에서는 문제되지 않던 점들이 해결 불가 과제로 바뀜
     * 자원 낭비와 채용 기준의 불균형으로 인해 조직의 효율성과 동기 부여에 문제 발생함
     * 업무 긴급성, 보안 관리 등 조직 내 주요 개념들이 실제 의미와 달리 형식적, 절차적 행위로 변질됨
     * 다양한 문제 속에서도 역량 개발, 커리어 성장 등 긍정적 경험을 발견함


엔터프라이즈 경험 1년 회고

  대기업과 스타트업의 차이

     * $ENTERPRISE에서 첫 1년을 보내며 기존 스타트업 및 SME(중소기업)와의 차이를 경험함.
     * 사내 소프트웨어 개발 경험 부족이 비판이 아니라 오히려 긍정적 신호임을 나중에 인식함.
     * 관찰한 점을 정리하며 대기업 근무 환경의 현실을 소개함.

  소기업에서 문제 없던 것이 대기업에서는 큰 문제로 변함

     * Tool 관련 오류 해결 시, 책임자나 담당자 파악에 오랜 시간이 소요됨.
     * 조직 내 정보 공유 부족 및 담당자 변경으로 인해 비효율과 비용 낭비가 발생함.
     * 일시적 해결책은 로컬 설정 오버라이드이지만, 근본적으로 조직 구조적 한계임.

  자원 배분의 비합리성

     * 소규모 회사에서 충분한 예산 없이 일하던 경험과 달리, 대기업에서는 과도한 자원 낭비가 빈번함.
     * 단기적 프로젝트 실패, 불필요한 클라우드 사용 등이 재정 낭비로 이어짐.
     * 실제 필요와 동떨어진 예산 및 자원 관리로 업무 동기 저하를 초래함.

  일관성 없는 동료 및 채용 구조

     * 스타트업에서는 실력 기반 채용이 상대적 기준을 유지함.
     * 대기업에서는 실력과 상관없는 채용 및 구조조정이 일반적임.
     * 특정 직위가 업무 역량과 무관하거나, 보고서의 품질에 상관없이 조직이 유지되는 현상이 발생함.

  업무의 긴급성 해석

     * 스타트업에서는 명확한 긴급성이 기준이었지만, 대기업에서는 업무의 다층적 의미 해석이 필요함.
     * 진짜 긴급 상황(예: 서비스 장애) 외에도 형식적 긴급성이 자주 발생함.
     * 이러한 절차 속에서는 진정한 업무 우선순위 파악 역량이 요구됨.

  형식화된 보안 관리

     * 보안 프로세스는 조직에 중요한 역할이지만, 실제 리스크 대비 형식적 보고에 치중함.
     * 수치 목표나 지표 달성을 위해 의미가 퇴색된 보안 업무가 일상화됨.
     * 엔지니어와 보안 담당자 간 의사소통의 비효율도 존재함.
     * 모두가 수치만 중시하는 문화가 위험함을 강조함.

  직급의 무의미함

     * ""Head of Architecture"" 등 중복 직책이 흔하며, 역할이 분명하지 않음.

  불확실성을 약점으로 간주하는 조직 문화

     * 대규모 조직 개편과 수시 구조조정 속에서 리더들은 ""모르겠다""는 말을 금기시함.
     * 도메인의 복잡성에도 불구하고, 리더십에서는 즉각성, 자신감만이 우선시됨.
     * 이로 인해 과거의 실수가 반복되는 구조가 고착화됨.

  사일로화된 엔지니어링 팀

     * 각각의 엔지니어링 팀(혹은 '제국')은 자체 표준과 문화를 가짐.
     * 부서 간 장애물이 커지고, 표준화나 베스트 프랙티스 확산이 어려워짐.
     * 각 부서의 자율성이 팀 간 협력에 제한 요인으로 작용함.

  긍정적 경험

     * 엔지니어 커뮤니티 참여를 통해 소프트웨어 개발에 대한 관점 확장성 경험함.
     * 커리어 성장, 멘토십 기회, 대규모 사용 경험 등 새로운 만족감 존재함.
     * 전문성 고도화, 다양한 동료와의 협력, 교육과 역량 개발이 적극적으로 권장됨.
     * 정기적 급여 지급, 직무 보장성과 같은 안정성도 장점으로 작용함.

  결론

     * 비판적 시각에도 불구하고 대기업의 긍정적 가치는 명확함.
     * 향후 오랜 시간이 흐른 뒤 변화된 시각을 다시 점검해볼 의향임.

        Hacker News 의견

     * 항상 Remy's Law of Enterprise Software(관련 링크: https://thedailywtf.com/articles/graceful-depredations)을 기억해야 함. 소프트웨어가 ""enterprise""라고 불린다면 보통 별로임. 농담은 제쳐두고, 글 마지막에 언급된 긍정적인 점들을 보고 흥미로웠음. 몇몇은 이해했지만, 실제로는 더 많은 문제만 만드는 것처럼 보이는 항목도 있었음. 예를 들어 ""실제 경력 개발 기회가 있다""는 게 있는데, 경력 개발이 단순히 더 많은 돈을 번다는 의미면 그냥 ""돈을 더 벌 수 있다""고 하지, 굳이 돌려 말할 필요는 없다고 생각함. 아니라면, 그동안 언급된 조직의 비효율과 문제 속에서 더 깊이 파묻히는 것 외에 경력 개발이란 게 무엇인지 궁금함. 그리고 ""수백만 명이 사용하는 소프트웨어를 만드는 것은 만족스럽다""는 것도, 만약 그 소프트웨어가 좋지 않거나 사용자에게 해를 끼치면 여전히
       만족스러운지 의문임
          + 경력 개발이 단순히 돈을 더 버는 것이라는 질문에 대해, 인생을 오래 고민하면 결국 우리는 훨씬 더 큰 시스템에서 작은 역할을 맡고 있다는 현실을 마주하게 됨. 이런 고민을 하다 보면 '부당한 사회에서 나는 정의로울 수 있을까?', '작은 역할을 맡은 내가 공동체에 긍정적인 영향을 미치려면 어떻게 해야 할까?' 같은 깊은 질문이 따라옴. 사람마다 이 질문에 대한 대응은 다름. 어떤 사람은 변화의 기회를 찾기 위해 적극적으로 움직이고, 반면 어떤 이는 시스템 내에서 무력감을 느끼고 아예 외면하게 됨. 내 경우 우리가 하는 일에 신념이 있고, 회사에서의 경력 개발은 단순히 돈이 아니라 책임이 늘고 변화를 일으킬 수 있는 역량이 높아지는 것임. 비효율적인 조직에서 내가 할 수 있는 선택지는 회사를 떠나거나, 현재 위치에 머무르거나, 조직 깊숙이
            들어가 긍정적 변화를 만드는 것이 있음. ""사용하는 소프트웨어가 나쁘거나 해를 끼치면 만족스러운가?""에 대한 질문에는, 어떤 사람은 해를 주는 일에도 만족한다고 답하겠지만, 적어도 나는 그런 사람이 아니며 내가 하는 일이 사회적으로 순기능이라고 믿음. ""수백만 명이 사용하는 사회에 긍정적인 소프트웨어를 만드는 것은 만족스럽다""라는 뜻임
          + 대기업에서 경력 개발은 돈 이상의 의미가 있음. 예를 들어 더 큰 규모의 프로젝트를 리드하거나, 예전엔 스타트업 하나가 만들 법한 제품을 사내에서 전체 개발해볼 기회가 종종 생김. 몇 년간 여러 프로젝트에 참여하거나, 더 큰 규모의 팀을 이끄는 경험도 대기업에서는 상대적으로 얻기 쉬움. 그리고 소프트웨어가 나쁘거나 해가 된다면? 스타트업과 작은 회사가 무조건 더 좋은 건 아니고, 케이스마다 다름
          + 데이터 사이언티스트 연구원, 개발자 에반젤리스트 같은 직무를 꿈꾼다면 그 일을 지원해 줄 수 있는 조직이 필요함. 마이크로서비스 아키텍트 같은 역할도 소형 조직에서는 어울리지 않지만 3000명 이상 대기업에서는 환영받음. 엔지니어링 매니저 경로도 인력 풀이 충분해야 의미가 있듯, 규모에서 오는 경력 개발 기회가 있음. 소프트웨어가 나쁘거나 해로운 것도 있는데, 우리가 작업하는 게 반드시 엔터프라이즈 소프트웨어일 필요도 없고, 오히려 아니길 바람
          + 엔터프라이즈 소프트웨어가 본질적으로 나쁘다고 생각하지 않음. 물론 좋은 엔터프라이즈 소프트웨어도 충분히 만들 수 있는데, 복잡한 요구사항을 지키면서 그걸 해내는 것 자체가 상당한 능력임. 하지만 실제로 조직에서 사용자 경험에 얼마나 신경 쓰는지 평가받는 일은 드뭄. 심지어 내가 7년 넘게 $ENTERPRISE에 있으면서 사용자를 직접 만난 건 한 번뿐임
          + 소프트웨어가 나빠도, 해가 돼도 만족스러운가에 대해, 많은 엔지니어는 큰 규모에서 일하고 있다는 것에만 만족을 느끼거나, 무력감을 느껴 아예 자신과 무관하다고 여길 수 있음. 정말 그 스케일을 가지려면 거대 기업에 소속되어야만 하니까, 결국 거기서 반복되는 알고리즘적 다크 패턴, 주주 이익 극대화 등 자본주의 구조로 빠질 수밖에 없음
     * 누락된 점이 있는데, 새로운 리더십이 들어오면 기존 구성원을 몰아내고 자기 사람들로 채운다는 점이 있음. 그리고 매년 팀 이름이 바뀌는데, 실제로 하는 일은 변하지 않고 팀 이름에 ""Innovation"", ""Discovery"", ""Leadership"" 같은 단어만 추가되는 일이 반복됨
          + 팀 이름이 그렇게 자주 바뀔 바에야 차라리 ‘Pikachu’ 같은 이름으로 고정해서 쭉 일했으면 함. 이름이 뭔지는 중요하지 않다는 걸 모두가 알면 이름 변경을 멈출 텐데, 이름 바뀔 때마다 문서 수정하고 전체에 알리는 데 불필요한 수고와 시간이 많이 들어감
          + 우리 조직에는 Terraform CDK로 만든 내부 인프라 코드 라이브러리가 있음. Datadog, Pagerduty에 모니터링 자원을 자동으로 생성해줌. 어느 날 ‘team’이라는 필수 인자가 사실상 7개월마다 바뀌다시피 해 그냥 삭제했음
          + 내 라이벌은 새로운 회사에 들어갈 때마다 예전 동료 전체 헬프 데스크, 개발팀을 천천히 다 데리고 옴. 그 이유는 충성도 때문임. 결과가 안 좋아도 불만도 없고, 윗선에 문제를 제기하지 않음. 이분 회사에서 일해본 전직 직원들의 말을 들어보면 항상 똑같이
              1. 문제점 진단(새로운 Microsoft 파트너 CRM이 없어서 문제라고 말함)
              2. 문제 해결 명목으로 돈을 들임(그 CRM 파트너와 Microsoft 덕에 연 3회 라스베이거스 출장)
              3. CRM 도입 실패(문제는 스코프가 충분히 크지 않아서라고 주장)
              4. 다시 프로젝트 범위 조정(복지 더 많아짐)
              5. 또 실패할 상황에서 새로운 회사로 이직하고 기존에는 문제만 남김
          + ‘Excellence’ 같은 단어가 프로젝트 명에 들어가면 대체로 신뢰가 가지 않음
     * 본문의 내용은 대부분 공공기관에도 해당됨. 단, 주말 근무가 없다는 점, (기술적) 경력 개발의 기회가 있다는 점, 역량 개발이나 교육을 장려한다는 부분만 빼면 비슷함
          + 처음 나오는 재미와 재정적 이익에 대한 언급도 공공기관에는 그다지 해당되지 않는 것 같음
     * 매우 재미있고 흥미로운 글이었음. 3년 정도 엔터프라이즈에 근무하고 있음. 기술적으로 성장하고 있지만, 실제로는 사람, 커뮤니케이션, 관료주의에 대해 더 많이 배우는 느낌임. 예산, 마우스에 관한 댓글도 공감함. 하지만 $ENTERPRISE의 재정적 안정성 덕에 그냥 내가 마우스를 직접 사버림. 누군가 승인 없는 마우스에 대해 문제를 제기할 수도 있지만... 그냥 무시하거나, 마우스 승인이라는 가짜 긴급함을 대수롭지 않게 넘길 수 있음
     * 이런 조직에서는 도저히 견딜 수가 없음. 연봉을 3배를 준다고 해도 몇 달이면 완전히 무너짐
          + 보상금은 실제로 필요한 업무의 양과 반비례함
          + 정신과 약(졸로프트)를 아주 세게 복용해야 겨우 버틸 수 있음
          + 가끔은 돈을 우선순위로 두고 $ENTERPRISE에서 고연봉을 받고 충분히 모은 뒤 장기 안식년에 들어갈까 고민함. 하지만 면접 과정이 너무 힘들 것 같아 생각만으로도 의욕이 사라짐. 현재는 $MIDSIZENOLONGERSTARTUP에 있는데, 이곳 역시 나만의 방식으로 나를 지치게 만드는 여러 괴상한 일들이 있음
     * 나도 유사한 환경에서 근무 중이며, 이 글이 고통스러울 정도로 정확하다고 느낌. 나는 내 일은 문제를 해결하고 소프트웨어를 배포하는 것이라 생각했지만 현실에서 조직의 ‘진짜 우선순위(revealed preferences, 관련 링크: https://en.wikipedia.org/wiki/Revealed_preference)’는 전혀 아님. 저자가 작은 회사에서 대기업으로 이직한 이야기처럼, 혹시 반대로 대기업에서 작은 회사로 옮긴 경험이 있는 사람이 있는지 궁금함. 엔터프라이즈 경험을 어떻게 소규모 팀 면접 때 어필하면 좋을지도 듣고 싶음
          + 내 경험에 따르면 이것은 마치 두 도시 이야기임. 나도 $ENTERPRISE에서 의미 없는 시간 낭비에 지쳐서 이제는 연봉 20%를 포기해서라도 작고 제대로 된 곳에서 무언가 성과를 내고 싶음. 그런데 지난 3년 동안 배운 것을 부정적 분위기 없이 설명하려 해도 스타트업 창업자들은 내 경력을 다소 부담스럽게 봄. 정글에서 필요한 생존 스킬과 동물원에서 필요한 생존 스킬이 너무 달라서, 동물원에 너무 오래 있었던 게 아니냐는 반응임. 반대로 대기업도 내부 프로세스와 계층 구조를 이해하는 사람을 뽑길 원해서, 스타트업 출신이 이런 곳에 면접보는 것도 쉽지 않음
          + 큰 회사에서 작은 회사로 옮긴 경험이 있는데, 회사 규모가 커질수록 풀어야 할 문제는 기술적인 것보다 사람과 조직 내 정치 문제가 훨씬 커짐. 대기업에서는 골든 핸드커프(관련 링크: https://en.wikipedia.org/wiki/Golden_handcuffs)식 보상으로 핵심 인재를 붙잡는 경우가 많고, 이 때문에 사람들이 보상을 포기하기 전까지는 조직의 각종 헛소리도 더 참고 견딤. ""대기업을 떠나 실제 변화를 만들어내고 싶었다""는 식으로 스토리를 풀면 작은 팀에서는 대체로 이해해줌
     * 대기업은 그들만의 결과물을 일관성 있게 제공하려고만 신경 씀. 목표 설정도 숫자 달성, 규제 절차, 임원의 결정 등 다양한 이유로 결정됨. 우리가 생각하는 인간적 합리성과는 전혀 다른 영역임
     * ""다른 제국들도 있다""는 원 글에 대해, 실제로 영국(매뉴얼 QA), 이집트(소프트웨어 피라미드) 외에도 몽골(어느 날 갑자기 가득한 요구사항을 던지고 사라짐), 스페인(모든 규정을 완벽하게 하려다 오히려 마찰만 많아짐), 일본(임원에게 질책당하고 커리어를 자해하는 모험을 함), 중국(회의의 미로에 빠지고 소통이 극도로 은밀함) 같은 식의 우스갯소리를 곁들임
          + 이 글 정말 즐겁게 읽었고, 특히 몽골과의 전쟁 비유가 재밌었음. 실제로 역사적으로도 몽골과의 싸움은 녹록지 않았음
     * 좋은 인사이트와, 사무실 정치 및 경영진의 역할에 대한 중요성을 잘 전달해 준 글임
     * 18개월째 $ENTERPRISE에 재직 중임. 현실에 너무 공감해서 아플 정도임
"
"https://news.hada.io/topic?id=22532","Show GN: 바이브코딩으로 CPUFreq Governor를 만들었습니다!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: 바이브코딩으로 CPUFreq Governor를 만들었습니다!

   초반 아이디어만 가버너를 짜서 Gemini에 넣어서 코드를 리팩토링하고 폴리시를 조정하여 만들었습니다!

   기본적인 아이디어는 conservative와 유사하지만, 조금 더 전력을 절약하는 데에 초점이 맞춰져 있으며, 부하가 낮을 때 성능을 조금 희생하더라도 전력 소모를 줄이는 것이 이점인 환경에서 적용해 보았습니다.

   클라우드 서버를 사용 할 때보다는 자체적으로 데이터센터를 유지하거나 집에서 사용하는 등 전력 소모량을 줄이고 싶을 경우에 사용하면 되는 것일까요?

   뭐하는 물건인지 설명이 필요할것 같습니다....

   리눅스 CPU 거버너(Governor)는 CPU의 성능과 전력 소비를 조절하는 프로그램입니다.

   아, 리드미를 보면 나와 있습니다! 리눅스의 기존 가버너들을 보면, OnDemand, SchedUtil과 같은 수요에 즉각 반응하는 가버너, 수요에 바로 맞춰서 상승하지 않고 느리게 step 등을 고려해서 점진적 상승을 하는 conservative, interactive 등의 가버너가 있는데, 이것의 경우 에너지 절약을 중점으로 두어 특별한 부하가 없다면 base clock에 가깝게 유지하여 전력을 아끼고, 게이밍이나 물리학 연산 등의 부하가 걸리는 작업에서는 클럭을 올리게 됩니다. 일반적인 브라우징이나 홈 서버 구동에서는 보통 낮은 클럭을 유지하고요, k8s 클러스터 노드와 같은 상황에서는 유연하게 잘 대응하는 것을 확인했습니다. 물론 게이밍도 성공했구요.
"
"https://news.hada.io/topic?id=22505","Show GN: MCP-Server for Ambari Hadoop Cluster","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: MCP-Server for Ambari Hadoop Cluster

   Ambari Hadoop Cluster 관리용 MCP-Server 서버입니다.
   REST-API 기반 호출이며, 기본 동작은 확인했습니다.
   아직 보완해야 할 부분들이 많으니, 피드백 주시면 정말 감사하겠습니다!!

   GitHub: https://github.com/call518/MCP-Ambari-API
   Smithery.ai playground: https://smithery.ai/server/@call518/mcp-ambari-api

   와 미쳐따..

   ambari… 정말 오랜만에 듣는 이름이네요…
"
"https://news.hada.io/topic?id=22576","Claudia – Claude Code를 위한 데스크탑 동반자","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Claudia – Claude Code를 위한 데스크탑 동반자

     * Claudia는 Claude Code와의 상호작용을 시각적으로 관리할 수 있는 데스크톱 GUI 애플리케이션
     * 프로젝트·세션 관리, 사용자 정의 AI 에이전트 생성, 백그라운드 실행 지원 기능 제공
     * 사용량 분석 대시보드, MCP 서버 관리, 세션 타임라인·체크포인트, CLAUDE.md 편집기 등 통합 툴킷 지원
     * Rust 기반 Tauri 2 + React 18 프론트엔드로 개발되어 가볍고 보안성을 갖춘 환경 제공
     * Claude Code CLI 사용자에게 커맨드라인과 GUI 간의 연결 허브 역할을 수행


주요 기능

     * 프로젝트 & 세션 관리
          + 프로젝트 브라우저, 세션 히스토리, 스마트 검색, 세션 인사이트 제공
     * CC Agents
          + 사용자 정의 AI 에이전트 생성
          + 라이브러리 관리, 백그라운드 실행, 실행 기록 추적 지원
     * 사용량 분석 대시보드
          + Claude API 사용량과 비용 실시간 모니터링
          + 모델·프로젝트·기간별 토큰 분석, 시각화 차트, 데이터 내보내기 가능
     * MCP 서버 관리
          + Model Context Protocol 서버 중앙 UI 관리
          + 서버 추가·구성·연결 테스트 기능 제공
     * 타임라인 & 체크포인트
          + 세션 버전 관리 및 브랜칭 타임라인
          + 체크포인트 복원, 세션 포크, 변경 사항 비교 뷰어 지원
     * CLAUDE.md 관리
          + 내장 에디터 및 라이브 프리뷰
          + 프로젝트 스캐너, 구문 하이라이팅 지원

개발 및 설치

     * 필수 조건: Claude Code CLI, Rust 1.70+, Bun, Git 등
     * Windows, macOS, Linux 환경 지원
     * React 18 + TypeScript + Vite 6 프론트엔드, Rust(Tauri 2) 백엔드
     * SQLite 기반 데이터 저장, Tailwind CSS + shadcn/ui UI 프레임워크 활용

보안 및 기여

     * 프로세스 격리, 권한 제어, 로컬 저장, 원격 텔레메트리 없음
     * 오픈소스 AGPL 라이선스

        Hacker News 의견

     * 한편으론, 이 분야에서 다양한 시도가 이루어지는 모습이 반가움
       다른 한편으론, 대부분의 툴들이 동일한 기능을 복제하면서 핵심 차이는 특정 서비스에 대한 더 큰 혹은 더 작은 락인밖에 없는 듯한 느낌을 받음
       이번 주만 해도 세 번째 비슷한 툴을 보고 있는데, 기존에 Roo로 할 수 있는 것과 딱히 차별점이 없고, 단지 Claude만 쓴다는 점만 다른 것 같음
       결국엔 이 시장도 붕괴와 통합의 주기를 겪게 될 거라 봄
       여러 대안이 공존할 수 있는 여지는 분명 존재하지만, 최근에는 거의 똑같은 것을 살짝 포장만 달리해서 다시 만드는 분위기임
          + Claude 관련 개발을 하는 사람들은 이미 Claude가 거의 모든 경우에 가장 뛰어난 선택지임을 인식한 듯함
            나도 여러 모델로 전환해 봤지만, 결국 Sonnet이나 Opus로 돌아오게 됨
          + 내가 기여하는 오픈소스 모바일 앱에서 Roo에서는 없는 기능 두 가지를 시도하고 있음
              1. CLI 코딩 에이전트 상태를 휴대폰과 실시간 동기화함
                 사실 이게 새로운 코딩 능력을 주는 건 아니고, 결국 컴퓨터에서 작업하는 게 더 낫긴 함
                 다만, 화면이 더 컸으면 좋겠다는 아쉬움만 있을 뿐 모바일에서도 Claude Code를 '어디서든' 쓸 수 있다는 점 자체가 실질적으로 업무 시간을 바꿔주기 때문에 중요하다고 봄
                 실시간 동기화 관련 글
              2. 다른 기여자가 나와 Claude Code 사이에 별도의 보이스 에이전트를 실험 중임
                 이게 꽤 쓸만하고 생각보다 괜찮은 듯함
                 보이스 에이전트가 중간에 버퍼 역할을 하면서 미완성된 생각을 살짝 더 다듬어진 명령어로 만들어주는 식임
                 또 다른 기여자가 코드 보이스 코딩이 외부에서 왜 유용한지 설명한 블로그 글이 있음
                 프로젝트 링크
          + 공급사들이 결정적인 기능을 출시하거나 자체적으로 플랫폼을 완전히 개편할 때마다 이런 래퍼 툴들이 타협을 겪게 됨
            모델이 발전할수록 이 현상은 더욱 크게 다가옴
            Anthropic의 Claude Code는 1년 뒤엔 아마 더 개발자 OS이자 논테크 사용자를 위한 Claude Agent 플랫폼처럼 변해 있을 것임
            가격/사용 방식도 단순 구독료로 통합되고, 토큰 단위의 비용 구조는 추상화 및 최적화해서 직접 알기 어려워짐
            공급사가 마진 최적화에 유리한 구조로 진화할 것이라 봄
          + 이 툴의 목적은 Claude Code 전용 IDE임
            지금으로선 가장 강력한 코딩 에이전트임이 분명하지만, 모두가 커맨드 라인만 선호하는 건 아니니 이런 시도 자체가 이해 감
          + 툴이 다양하게 쏟아지는 현상이 굉장히 멋지다고 느껴짐
            웹 2.0 초창기엔 Reddit 같은 거대 서비스 대신 다양한 포럼과 애그리게이터가 많았던 시절이 떠오름
            (그렇다고 지금의 UX가 훌륭하다는 건 아님)
     * 최근 Max로 업그레이드해서 여러 개의 세션을 병렬로 돌릴 수 있는 툴을 쓰고 싶어 이 앱을 잠시 써 봤음
       설치 단계에서 제공된 바이너리는 Ubuntu 22.04에서 glibc 버전 문제로 작동 안 됐고, 소스 빌드는 가능했음
       새로운 채팅 열 때마다 프로젝트 리스트로 돌아가서 매번 같은 프로젝트를 클릭해야 하는 점이 불편했음
       스크롤링 품질도 형편없고, 채팅이 생성될 때 자동으로 스크롤이 끝까지 내려가지 않아 수동으로 내려야 함
       여러 작업을 동시에 하고 있는데, 세션마다 제목도 없어 무슨 작업을 하고 있는지 한눈에 알기 어려움
       로그/텍스트 항목이 화면을 너무 많이 차지해서, 할 일 리스트랑 도구 사용 한두 개 보여주는데도 전체 화면을 써버리는 비효율적인 뷰임
       영상에서와 달리 코드 변경사항이 “AI Summary” 형태로 요약만 나오고, 코드를 직접 여는 옵션을 못 찾겠음
       여러 UI 버그가 존재하고 전체적으로 느림
       Agents 관련 기능은 건드려보지 않았는데, 영상상 메인 포인트 같긴 하지만 나처럼 여러 Claude Code 세션을 동시에 돌리고 싶었던 입장에선 너무 불안정해서 쓸 수 없었음
       다른 사용자가 추천한 https://conductor.build/이 내가 원하는 스타일에 가까웠는데, 아쉽게도 리눅스 지원이 없음
       몇 번만 더 개선된다면 나중엔 쓸 의향이 있음
       시도할 분들을 위해 이 경험을 공유함
     * 현재 LLM IDE 시장이 “트위터 클라이언트” 단계라는 느낌이 듦
          + 트위터 클라이언트 단계 이후엔 무슨 일이 벌어졌냐는 궁금증이 듦
     * 몇 주 전, 이 앱을 잠깐 사용해 봤는데, 붙여넣은 이미지를 제대로 처리 못해서 바로 삭제함
       이미지를 붙여넣으면 거대한 Base64 문자열로 한 번에 넣어버려서, MacBook Pro M3 Max에서 UI가 완전히 멈춰버림
       혹시 이 문제가 해결됐는지 궁금함
       Claude Code를 위한 좋은 IDE(혹은 터미널 이상의 대안)를 계속 찾고 있었는데 Claudia는 실망을 안겨줬음
          + 네가 원하는 건 바로 https://conductor.build/ 임
     * Claudia는 S24 YC 회사에서 만든 오픈소스임
       아스터리스크 YC 페이지
          + YC가 왜 이런 이름에 조언을 안 했는지 놀라움
            Anthropic 툴 네이밍을 따라한듯한 이름이 신뢰를 떨어뜨리는 느낌임
          + 나 역시 이게 Anthropic에서 독립적으로 내놓은 앱인 줄 착각함
            법적 침해라는 말은 아니지만, 나뿐 아니라 다른 사람들도 이런 연결고리를 쉽게 떠올릴 것 같음
          + 이 회사가 어떻게 수익을 낼지 궁금함
     * 이 네이밍과 컬러 스킴은 TM(상표) 침해의 경계선에 있음
       실제 고객 혼동 사례가 기준임
          + 실제 혼동 사례는 바로 여기에 있음
     * 이 툴이 agent를 샌드박싱하는지 궁금함
       내가 원하는 건 agent가 파일 시스템 임의 위치에 읽기/쓰기를 하는 걸 막고 싶음
       이걸 OS 차원의 프리미티브로 강제하고 싶고, LLM과의 신뢰보다는 시스템적인 보안이 필요함
       Cursor agent는 절대경로로 작업하려는 시도가 가끔 있어서, 제대로 샌드박싱됐다면 불가능할 일이 불안하게 느껴짐
          + 최근에 cc를 클라우드 샌드박스에서 실행할 수 있도록 돕는 서비스를 직접 만들었음
            https://www.devfleet.ai
          + OpenAI의 Codex가 이 기능을 구현하는 것으로 보이나, 어느 정도인지는 확신 없음
            샌드박싱이 우선순위 같긴 한데, 그 영향 때문인지 내가 써본 결과 Claude Code만큼 완성도가 높진 않았음
          + 보조 에이전트를 권한 제한된 사용자로 실행하면 어떻겠냐는 제안임
            OS에서 필요 충분한 통제 수단을 이미 제공한다고 봄
          + Docker와 devcontainer를 쓰면 개인적으로 해결 가능하다고 생각함
            본인도 이렇게 설정해서 만족스럽게 사용 중인데, Claude에게 뭐든 시킬 수 있지만 실서버로 푸시하는 건 불가능하게 만들 수 있음
          + 컨테이너 기반 제한 관련 참고자료
     * 이 이름은 오래가지 못할 것 같음
       처음엔 Anthropic 작품인 줄 알았음
     * 많은 사람들은 GUI나 IDE를 선호해서 이런 툴이 필요하겠지만, 개인적으로 Claude Code가 터미널 기반 독립 앱인 점이 오히려 장점임
       터미널이 더 단순하고 구조적이라 느껴지고, ""터미널의 혼란에서 시각적 명확성으로"" 같은 메시지는 별로 공감되지 않음
       (neo)vim에 Claude Code 연동 익스텐션 설치도 잠깐 고민했지만 굳이 필요성 못 느끼겠음
          + 나도 데스크톱에서는 비슷한 생각이지만, 외출 시 Claude Code와 폰으로 상호작용하는 법이 있으면 정말 원함
            핵심적으로 노트북에서 실행 중인 Claude Code 세션에 바로 연결하고 싶음
            이런 백도어 방식을 쓰지 않고, API로 현재 채팅에 메시지를 덧붙이거나, 보이스 트랜스크립션으로 입력, 권한 승인/거부, 코드 diff 확인 등을 하고 싶음
            Telegram 봇 형태 등 여러 아이디어가 있음
            Claude Code UI(https://github.com/siteboon/claudecodeui)에 기대했지만, 모바일 웹 인터페이스가 너무 불편했음
     * 홈페이지 영상이 정신없이 빠름
       앱이 멋진 만큼 영상은 속도를 줄이고 덜 부산스럽게 만드는 게 좋겠음
       (화면을 빠르게 확대했다 축소했다 하면서 3배속으로 휘젓는데, 눈을 가려야 했음)
          + 매일 앱 작업하는 사람 입장에선 모든 기능이 익숙해서 그 속도를 이해할 수 있겠지만, 정작 처음 보는 사용자 입장을 고려한 설계가 필요함
          + 엔지니어들은 마케터들이 하는 일의 가치를 종종 인식 못함
            이 영상은 그들이 하지 않는 일을 보여주는 사례임
          + 영상을 통한 첫인상이 자극적인 포인트를 약속한다는 점에서는 올바름
"
"https://news.hada.io/topic?id=22513","F-Droid 빌드 서버가 구형 CPU로 인해 최신 Android 앱 빌드 불가 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            F-Droid 빌드 서버가 구형 CPU로 인해 최신 Android 앱 빌드 불가 문제

     * F-Droid 빌드 서버가 구형 CPU로 인해 최신 Android 앱을 빌드하지 못하는 상황 발생
     * ARM, x86-64 등 최신 모바일 앱에서 요구하는 고급 명령어 집합을 지원하지 못함
     * 서버의 업그레이드 및 교체가 필요하지만, 비용 및 인프라의 한계 존재
     * 개발자들은 F-Droid의 지속 가능성과 기술적 최신성에 대해 우려 표명
     * 대안으로 클라우드 기반 빌드 및 서버 자원 기부 논의 진행 중임


개요

     * F-Droid는 Android 오픈소스 앱의 비공식 스토어로, 직접 소스 코드를 빌드해 앱을 배포하는 구조임
     * 최근 빌드 서버가 최신 Android 앱에서 요구하는 CPU 명령어 집합을 지원하지 못해, 더 이상 일부 앱 빌드 제공이 불가해짐

빌드 서버의 기술적 한계

     * 앱 빌드에 필요한 새로운 ARM 및 x86-64 명령어를 구형 CPU가 지원하지 못함
     * 이러한 제한으로 인해, 성능 최적화가 된 현대 앱이나 최신 라이브러리 적용 앱을 빌드 파일로 제공할 수 없는 문제 발생
     * Python, Kotlin 같은 최신 언어 및 Gradle 등 최신 빌드 툴도 자주 최신 CPU 환경을 요구함

커뮤니티 내 우려와 논의

     * 개발자와 이용자들은 F-Droid의 지속적인 앱 품질 저하 및 빌드 실패 보고에 대해 우려를 표명
     * 인프라 업그레이드가 필요하나, 재정적 한계와 서버 관리 인력 부족 문제 부각

대안 및 해결 방안 모색

     * 클라우드 환경에서 빌드 서버 운영, 혹은 커뮤니티 차원의 서버 자원 기부 등 다양한 방안 논의
     * F-Droid 팀은 외부 지원과 새로운 하드웨어 확보를 통해 문제 해결 의지를 밝힘

결론

     * F-Droid의 가치와 오픈소스 생태계 지원 의의는 여전히 높음
     * 다만, 현대 앱 트렌드에 맞는 인프라적 혁신과 유지관리 노력이 필수임

        Hacker News 의견

     * 이 말은 그들의 서버가 정말 오래된 것임을 의미함, x86-64-v2를 지원하지 않는 수준이며, 거의 Intel Core 2 Duo 시절의 서버를 떠올릴 수 있음
       Red Hat Enterprise Linux 9의 x86-64-v2 마이크로아키텍처 레벨에 대해 정리된 글을 참고 바람
       Epyc 컨슈머 CPU로 바꾼다면 서버 성능이 훨씬 빨라질 것 같음
       실제로 기부를 요청하려 했는데, 이미 $80,000이 남아있었음
       연간 예산이 $17,000임을 감안하면, 2~3천 달러로 최신 Zen4 또는 Zen5 matx 컨슈머 Epyc 서버를 구매해도 예산 안에 들어감
       만약 정말로 노후된 서버가 여러 대라면 Zen5 서버 한 대로 몇 대는 교체할 수 있고, 전력과 공간도 훨씬 절약될 것임
       F-Droid의 예산 상태도 참고함
       Librapay 기부금은 아직 포함이 안 된 듯함
       Librapay 기부 관련 링크
          + 반드시 서버가 오래된 것만은 아님, 우리 가상화 플랫폼의 경험을 보면 외부 공급업체의 VM을 업그레이드한 후 CPU에서 x86_64v2 + AES를 지원하게 노출해 주었음에도 일부 서비스가 실행되지 않았음
            최소 요구 사항은 ""Pentium과 Celeron""이었으니 충분하다 생각했음
            근데 실제로는 서비스 중 하나가 v3 또는 v4 CPU에서만 지원되는 명령어를 사용해서 동작을 멈췄음
            노출 CPU 셋팅을 바꾸자 정상적으로 돌아왔음
            그래서 서버 자체가 실제로는 성능이 되지만 설정 오류거나, 혹은 바이너리가 명시한 것보다 높은 사양을 요구하거나, 기타 다른 이슈일 수도 있음
          + $2~3천 달러로는 사실 하위급 Threadripper 순정 CPU 가격에 불과하며, 이 돈으로 Epyc 서버 전체를 구입할 수 없을 것임
          + 어쩌면 서버가 Coreboot나 Libreboot로 부트되고 있을 가능성도 있음
          + 지금 시점에 리눅스가 이 정도로 오래된 하드웨어를 공식 지원하고 있는지도 의문임
            cmpxchg16b 명령어는 그렇게 오래되지 않은 인스트럭션이고, 현재는 필수 사양으로 여겨지고 있음
          + 남은 돈이 얼마 없다고 해도 기부를 여전히 권하고 싶음
            자원봉사자들이 시스템 유지를 위해 쓰는 시간과 노력에 비하면 £80,000은 정말 적은 금액임
            인프라 현대화가 필요하다고는 들었지만, 큰 투자가 필요한 부분임
            기금이 더 여유로웠다면 아마도 더 자신감 있게 투자할 수 있었을 것이라 생각함
            서버 업그레이드 외에도 해결해야 할 과제가 많음
     * 지금 상황이 꽤 걱정됨
       FDroid는 현재 구글을 제외하고 가장 규모가 큰 안드로이드 앱스토어이기 때문에 더욱 필요하다고 생각함
       혹시 이 문제를 해결할 계획이 있는지, 혹시 FDroid가 언제 서버를 업그레이드할지, 혹은 구글이 이 의무 요구사항을 철회할 가능성이 있는지 궁금함 (마지막 경우는 가능성이 적다고 봄)
          + FDroid는 자원봉사자가 운영하는 커뮤니티 프로젝트임을 감안하면 걱정은 이해하지만, 특히 EU 국가들이 오픈소스 소프트웨어로 이동 중이기 때문에 F-Droid 같은 프로젝트에 공적 자금 지원이 있었으면 좋겠음
          + f-droid가 중요하다면, 최신 빌드 서버 구입을 위해 직접 기부하는 것도 필요함
          + 구글이 요구사항을 철회할 가능성에 대해서는, 2021년에도 비슷한 문제가 있었고, 당시에는 Gradle Plugin 4.1.0이 SSSE3 명령어를 요구해서 이슈가 발생한 적이 있었음
            해당 이슈는 Gradle Plugin 4.2.0-rc01 / Gradle 7.0.0 alpha 9에서 수정되었음
            실제 티켓 기록도 남아있음
          + FDroid가 구글 제외 최대 안드로이드 스토어라는 것에 회의감이 있음
            개인적으로 톱10에도 못 들 것이라고 생각함
          + ""구글 빌드 툴은 소스빌드는 안되고, 최적화를 따로 해서 바이너리로 나왔으니까""라는 설명을 듣고, 서버를 업그레이드하는 게 맞다는 결론에 동의하지 않음
     * 왜 aapt2를 타겟에 맞게 다시 빌드하지 않는지 궁금함
       소스는 구할 수 있음
       aapt2 소스 위치
          + AOSP를 실제로 빌드해본 적이 있는지 묻고 싶음
            바이너리가 정말 많이 들어있고, 몇몇 바이너리를 소스로 다시 빌드하려 했는데, 빌드 시스템이 너무 심하게 망가져서 바로 포기했음
          + 도커에서 QEMU CPU 에뮬레이션을 쓰는 게 aapt2를 일일이 다시 컴파일하는 것보다 훨씬 유지보수에 용이함
            앞으로 나오는 바이너리마다 다시 패치할 필요 없이 자동으로 바이너리 업데이트를 대응할 수 있음
     * Streaming SIMD Extensions(SSSE3) 위키 문서를 공유함
       내 오래된 데스크톱도 이 명령어를 지원했고, 10년 가까이 사용했었음
       그런데도 소스 코드에서 비어셈블리(비어셈)를 사용하는 백업 패스조차 제공하지 않은 것이 놀라움
          + ""비어셈으로도 백업 패스가 없다는 게 이상하다""는 질문에, 아마도 수작업 어셈블리 코드 문제는 아닐 것 같음
            컴파일러가 x86_64-v2로 지정해 컴파일했을 가능성이 큼
            RHEL 9도 이런 옵션으로 빌드했고, RHEL 10에서는 x86_64-v3로 올라가면서 AVX도 지원하게 됨
          + 이슈를 살펴보니 빌더는 Opteron G3 (K10) 계열로 보임
            AMD 10h 위키 링크
          + 백업 패스를 제공하지 않는 문제는 테스트 하드웨어 부족 때문임
            현실적으로 이걸 테스트할 수 있는 하드웨어가 없고, 다 오래되고 느린 기기뿐임
          + 구형 데스크탑을 기증해주면 FDroid에서 좋아할 것 같음
     * 완전히 이해가지는 않음
       gradle과 aapt2가 오픈소스인데, buildroot나 openwrt처럼 직접 컴파일해서 툴체인을 만들면 더 예측 가능한 결과가 나오기 때문임
       f-droid도 마찬가지로 전체 툴체인을 직접 소스로부터 빌드하면 지원하지 않는 인스트럭션을 가진 바이너리 gradle이나 aapt2를 쓸 필요가 없어짐
          + 실제로는 구글이 제공하는 SDK 바이너리를 아직도 쓸 수밖에 없음
          + 이 방식이 타당하다고 생각하지만, gradle은 자체적으로 프리빌트 Java 라이브러리 등 의존성을 다운로드하여 사용함
            이 중에는 네이티브 바이너리가 포함된 것도 있고, buildroot나 리눅스 배포판처럼 각 라이브러리가 어떻게 빌드되는지에 대한 메타데이터가 없음
            또 gradle 생태계 라이브러리마다 빌드 과정이 모두 다르기에(표준화 안 됨), 전체를 직접 소스로부터 재구성하는 것은 상당히 번거롭고 까다로운 작업임
     * 구글이 upstream에서 이 문제를 이미 수정했다는 이야기도 있음
       이슈 링크 참고
       얼마나 빨리 해결될지 확신할 순 없지만, 이슈 쓰레드는 직접적으로 수정됐다는 근거는 없더라도 다소 안심이 됨
          + 실제로는 아직 수정된 상태가 아님
            위 링크 스레드에서는 오타(""mas fixed""→""was fixed"") 정정을 이번 이슈가 해결됐다고 착각한 상황임
            해결된 것은 몇 년 전의 유사한 과거 이슈임
            구글 이슈 트래커 참고
          + 아직까지도 이 근본 문제가 개발자들에게 잘 안 알려졌음
     * sse4.1이 2011년에 도입된 명령어임을 생각하면 이런 구형 서버가 아직 운영 중인 게 의아함
       최신 CPU라면 같은 일을 전력 소모의 일부만으로 처리할 수 있을 텐데, 경제적으로도 낡은 하드웨어를 계속 쓰는 게 이해되지 않음
       혹시 빌드 서버의 대수나 사양에 대해 아는 사람 있는지 궁금함
          + 최신 CPU를 쓰면 같은 일을 전기세의 일부만으로 할 수 있으니 빨리 업그레이드해야 한다는 의견에, 연간 8,760시간 중 500W급 CPU가 1년 내내 풀로 돌아가도 전기세가 $550임
            절반으로 줄여도 새 컴퓨터 값의 10%밖에 안 되니, 비용 회수까지 10년이 걸림
            업그레이드는 자본지출이지만, 전기세는 운영비라는 점도 있음
            미국 전기값 근거 자료
          + sse4.1은 Intel Penryn이 2007년 11월에 처음 도입했고, AMD는 Bulldozer(2011년 중반)까지 지원하지 않았음
            Bulldozer에 추가된 다양한 명령어(AVX, FMA 등)가 있지만 기존 Opteron이 실제로는 Bulldozer보다 빠른 경우가 많아서, Epyc(2017년 중반) 나오기 전까지는 업그레이드 유인이 적었음
            다양한 패키지에서 sse4.1 이상이 적용되는 시점이 되는 이유는, 오래된 CPU에서는 조건 분기 등 SIMD 병렬 처리 시 오버헤드가 높기 때문임
          + 실제 답은 ""open firmware(오픈 펌웨어)와 ME/PSP가 없는 듀얼 소켓 AMD 보드(예: KGPE-D16)를 쓸 수 있기 때문""일 수도 있음
          + 서버 쪽은 잘 모르겠지만, 실제 구형 하드웨어는 데스크톱 영역에서는 자주 볼 수 있음
            2000년대 구형 PC로 무난한 작업(웹 브라우징 등)은 충분했으나, 세월이 흘러 프로그램들이 새 인스트럭션을 요구하게 되며 점차 쓸모없어졌음
            심지어 파이어폭스조차 새 명령어셋을 요구하게 되어, 결국 멀쩡히 작동하는 데스크탑을 버릴 수밖에 없었던 경험이 있음
          + 구형 CPU를 쓰는 이유가 Canoeboot, GNU Boot 같은 자유 펌웨어 때문일 거라 생각함
            하지만 KGPE-D16 보드에는 SSE4.2 지원 CPU도 장착할 수 있는데, 정확한 이유는 잘 모르겠음
     * 구글의 새로운 aapt2 바이너리(AGP 8.12.0) 얘기를 하며, F-Droid는 빌드 환경 보호·격리에 엄청 신경을 쓰는 프로젝트인데, 왜 오히려 upstream 바이너리를 받아다 쓰지, 소스부터 빌드하지 않는지 의외임
          + 관련해서, 비교적 최근까지도 안드로이드 SDK의 자유 소프트웨어 빌드가 최신 상태로 제공되는 게 없음
            안드로이드 앱을 만들려면 기본적으로 구글의 비자유(Non-free) 바이너리에 의존하게 됨
            관련 포럼 글 참고
     * 참고자료 링크 정리
       F-Droid admin issue
       Catima 앱 이슈
       MBCompass 이슈
          + Catima 스레드를 보면 FDroid 커뮤니티에서 일하기가 굉장히 어렵다는 인상이 강하게 남음
            한 멤버가 이렇게 말함: ""F-Droid에서 늘 그렇지만, 우리의 목소리는 항상 외면당함. 해결책을 논의해서 F-Droid를 개선할 수 있다는 희망이 있었다면 그렇게 많던 시간과 에너지를 들이고도 좌절해서 떠나지 않았을 것임""
     * F-Droid 서버가 정말 낡았다는 의견임
       전혀 다른 아키텍처에서 x86_64를 에뮬레이션해도 오히려 성능향상이 될 수준임
       오히려 OSS(오픈소스)적 논리를 들 필요도 없을 정도임
       만약 폐쇄 펌웨어에 신경쓰지 않는다면, 더 저렴하면서도 최신의 x86 서버 옵션도 많음
          + ""서버가 정말 낡았다""는 말을 들으면 왠지 유머를 기대하게 됨
            대중문화 덕에 ""서버가 너무 낡아서 벤자민 프랭클린과 유치원 짝꿍이었다"" 같은 농담이 떠오름
"
"https://news.hada.io/topic?id=22569","LLM과 외부 세계를 연결하는 새로운 기술: OpenAI Function Calling, MCP","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         LLM과 외부 세계를 연결하는 새로운 기술: OpenAI Function Calling, MCP

   오늘날 생성형 AI 기술이 급속히 발전하면서 다양한 AI 모델과 서비스가 등장하고 있지만 이들 대부분은 여전히 고립된 ‘섬’처럼 따로따로 작동하고 있습니다. 예를 들어 ChatGPT 같은 언어 모델은 구글 드라이브에 저장된 문서를 직접 읽지 못하고 Slack의 대화내용을 가져오지 못합니다. Anthropic의 Claude 모델도 마찬가지로 기업 내부 데이터베이스에 접근하기 어렵습니다. 또한 복잡한 작업을 여러 전문 AI가 협력해서 처리하려 해도 그동안 서로 정보를 주고받을 수 있는 표준화된 방법이 없었습니다.

   이러한 한계를 극복하고자 AI 업계에서는 LLM이 외부 세계와 상호작용할 수 있도록 지원하는 새로운 기술과 표준을 마련했습니다. OpenAI는 자사 LLM에 외부 시스템을 호출할 수 있는 함수 호출(Function Calling) 기능을 도입했고, Anthropic은 MCP(Model Context Protocol)라는 개방형 프로토콜로 AI 모델에 통일된 컨텍스트를 제공하는 방법을 제시했습니다.

   이제 이러한 기술이 각각 무엇이며 개발자에게 어떤 의미가 있는지 살펴보려고 합니다.
"
"https://news.hada.io/topic?id=22512","이 웹사이트는 인간을 위한 곳임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           이 웹사이트는 인간을 위한 곳임

     * 어제 버스 정류장을 지나가다 Google AI 검색 광고를 봤음. 한 사람이 휴대폰 카메라로 라멘을 찍자 AI가 집에서 만드는 방법을 알려줌
     * 그건 수많은 레시피 작가들이 수년간 공들여 완성한 레시피를 바탕으로 함. 생성형 AI는 다른 사람의 노력을 갈아 넣어 얼핏 비슷하지만 신뢰와 영혼이 없는 콘텐츠를 만들어냄
     * 나는 Smitten Kitchen, Meera Sodha 같은 사이트를 RSS로 구독하며, 매번 검증된 훌륭한 레시피를 기대함. 반면 ChatGPT 같은 AI가 주는 건 여러 레시피의 평균값일 뿐, 각 작가의 경험과 취향이 담긴 개성은 없음
     * 요즘 ‘Google Zero’ 얘기가 많음. AI 검색이 필요한 정보를 다 보여주면 누가 실제 웹사이트에 오겠는가? 나는 사람들이 내 사이트를 방문해 다른 글과 링크, 내가 엮어둔 기묘한 주제들을 발견하길 바람
     * 일부는 광고 노출로 무료 고품질 콘텐츠를 유지함. 나 역시 내 글을 사람들에게 읽히고, 공감과 토론으로 이어지고, 때로는 컨퍼런스 발표 요청으로 연결되길 원함
     * 나는 사람을 위해 글을 씀. 내가 아는 것, 경험한 것, 느낀 것을 나누고 싶어서 씀. 글을 쓰는 데는 수 시간이 걸리지만, AI는 몇 초 만에 맥락 없이 요약함
     * 나는 사람들이 글을 처음부터 끝까지 읽고, 곱씹고, 내게 반응해주길 바람. 그런 연결이 정말 즐거움
     * 하지만 나는 VC 자금으로 운영되는 대형 언어 모델이 와서 내 글을 가져가서 엉성한 모조품을 만드는 걸 원치 않음. 뉘앙스와 맥락을 모두 빼버린 요약은 전혀 가치가 없음
     * 이 웹사이트는 사람을 위한 공간이며, LLM은 환영하지 않음

   LLM은 환영하지 않는다는 웹사이트의 LLM 요약은 아이러니 하네요

        Hacker News 의견

     * 나는 테마 스위처에 반해서 완전히 매료됨, 이런 것이야말로 퍼스널 블로그의 정석임, 콘텐츠도 훌륭하고 사이트 분위기도 방문하는 재미를 줌, 하지만 내 고민은 크롤러들이 robots.txt를 무시하며, 캡차나 휴먼 인증 체크박스도 뚫고 모든 콘텐츠를 트리 구조로 몇 분 만에 긁어간다는 점임, 자원 제한도 자바스크립트나 이미지 등 여러 에셋을 로드해야 해 효과가 없고, IP 블록도 람다처럼 동작해서 막을 수 없으며, User-Agent를 봐도 마치 크롬 유저처럼 보임, 캔버스 렌더링 방식도 우회되어버림, 결국 남은 방법은 인증을 통한 확인뿐임, 이런 현실이 슬픔
          + 내 개인 사이트에 타르 피트를 설치해볼까 고민한 적 있음, 난수로 가득 찬 랜덤 페이지와 내부 무한 링크를 내뱉는 스크립트를 robots.txt에서 명시적으로 금지해서 크롤러가 들어오면 그 안에서 헤매게 만들고 싶음, 거기에 레이트 리밋을 더하면 서버 부담도 줄어듦, 페이지에 혼란스러운 메시지까지 추가하고 싶음, 아직 실행하지 않았지만 그런 아이디어만으로도 왠지 뿌듯함
          + https://localghost.dev/about/도 확인해보면, 테마에 따라 프로필 사진의 배경까지 바뀜, 이런 세심한 디테일에 감탄함
          + CSS Zen Garden과 221개 테마가 생각남: https://csszengarden.com/, 예시로 https://csszengarden.com/221/, https://csszengarden.com/214/, https://csszengarden.com/123/, 전체 목록은 https://csszengarden.com/pages/alldesigns/에서 볼 수 있음
          + 이런 테마 디자인이 정말 예쁨, 독특한 디스플레이 환경에서도 잘 어울림, 이런 창의적인 시도 덕분에 인터넷을 긍정적으로 받아들임
          + PoW 솔루션이 효과가 오래갈 것 같지 않지만, Anubis는 꽤 흥미로움: https://anubis.techaro.lol/, 한편 자신의 영혼을 기계 포맷으로 변환해 거대한 공유 머신에 올려놓고, 오직 제대로 된 퍼스널 머신만 그걸 받아준다고 기대하는 심정이란 참 묘함, 만약 모두가 울타리 친 정원을 원한다면 그런 곳을 만들 수 있음, 기여자에게 어떤 조건을 허락하고 이용자도 유지비용 분담(광고가 아닌 방식) 등에 참여하게 한다면 OpenFreeBook 같은 식의 새로운 모델도 생각해 볼 수 있음
     * 저자는 꽤 이상주의적임, 무료로 제공되는 콘텐츠의 품질에 신경을 쓴다는 점에서 높이 평가함, 내 경험상 요리 레시피 사이트를 찾으면 넘치는 광고와 잡다한 개인사를 건너야 결국 레시피 본문에 도달할 수 있음, 이렇게 부풀려진 워드프레스 페이지에서 원하는 내용만 빨리 얻고 싶을 때 챗봇을 쓰는 사람을 이해할 수밖에 없음
          + 광고가 왜 이렇게 넘쳐나는지에 대해, 예전엔 누군가 수고롭게 무료 정보를 제공했지만 회사들이 ‘이걸로 돈 벌 수 있다’고 알려주면서 광고를 붙임, 이후에는 ‘광고 수익이 줄었으니 방문자 늘리고 SEO에 투자하고 광고 더 늘려야 같은 수준의 수익을 유지할 수 있다’고 조언함, 그래서 소규모 사이트들은 점점 조직화되거나 회사에 팔렸고, 더 많은 광고가 달림, 결국 지금 불편함을 느끼는 건 대부분 이런 회사에 팔린 사이트 때문임, 저자가 논의하는 건 사실상 광고 없는 진짜 독립 사이트임
          + 아쉽게도 대형 레시피 블로그 대부분은 사람을 위한 글이 아니라, 구글 검색 알고리즘(오랫동안 웹을 지배해온, 조작 가능한 그 알고리즘)을 위한 글임, 최근에야 LLM이 등장했을 뿐임
          + 끝없는 SEO, 광고, 페이지 엘리먼트 재로딩, 끊임없는 스크롤, 쓸데없는 자바스크립트 효과... 이런 것들이 AI 요약이 필요해진 진짜 이유임, 이런 환경에서 방문자의 시간 낭비를 싫어하는 걸 탓할 수 없음, AI 이전에도 이미 ‘리뷰’로 포장한 별 가치 없는 콘텐츠가 범람했음
          + 나는 광고차단기를 쓰지 않는데, 해당 블로그엔 광고도 없고 테마 외엔 어떠한 쿠키나 데이터도 저장하지 않는 점이 인상적임, 독립적 창작자의 시대는 거의 끝나가는 것처럼 느껴지고, 이제 남은 건 기생적 플랫폼을 견딜 수 있는 취미형 창작자뿐일지도 모름
     * ""진퉁의 80% 퀄리티를 20% 비용으로""란 슬로건이 항상 발전을 이끌어왔음, 실제로 온라인 레시피를 보는 대부분의 이용자는 어느 버전이든 상관하지 않고, 그저 빨리 쓸 수 있는 레시피를 원함, 목적은 식사이고 레시피는 그저 중간 재료임, 집에서 가구를 직접 손으로 만드는 장인을 존중하지만 대부분은 저렴한 파티클 보드 재질의 책상이나 의자도 충분히 만족함, 생성형 AI는 진짜 글쓰기와 파티클 보드 간의 관계와 비슷함
          + 파티클 보드는 수명이 짧고 교체 주기가 짧아짐, 가구 전체 퀄리티도 떨어지고, 오히려 고급 원목 가구 가격이 높아졌음, ‘80% 진퉁’ 이라는 말은 혼자 존재하는 게 아니고, 전체적인 수준 하락을 불러온다고 생각함
          + “생성형 AI는 진짜 글쓰기와 파티클 보드와 같다”는 비유가 정말 절묘함, 내 머릿속 수사 창고에 저장함
          + 품질이 떨어져도 너무 많아진 이점을 무시할 순 없음
          + 제품에도 유통기한과 재질명시 등 예측 내구성을 표시하는 법이 생겼으면 함, 음식 성분표처럼 고지해줘야 소비자가 비교할 수 있음, 예쁘게 생긴 메탈 제품인데 내부 핵심 부품이 플라스틱이라면 그게 바로 문제임
     * “내가 좋아하는 Smitten Kitchen과 Meera Sodha 같은 곳은 항상 신뢰할 수 있고 맛있음. ChatGPT도 레시피를 추천해주지만 저자 개성에서 나오는 약간씩의 차이나 인간성은 빠짐” 같은 말을 보고 있음, 하지만 나는 오히려 ChatGPT의 ‘평균값’ 레시피가 더 좋음, 요리를 자주 하는 입장에선 오히려 저자만의 개성과 취향에서 비롯된 이상한 재료, 감미료, 지방량이 더 짜증남, 예전엔 15개씩 각자 변형된 버전을 읽고 공통점을 추출해야 했는데 지금은 ChatGPT에게 “플라토닉 이상형 레시피”를 바로 요청할 수 있음, 게다가 표준적이고 합리적인 변형 제안도 받음, 예술이나 음악에선 작가 개성이 중요하지만 평소 집밥에선 오히려 군더더기 없는 버전이 더 좋음
          + “어떤 저자만의 개성이나 취향을 제외하고 싶다”는 건 애초에 요리 문화 본질 자체를 오해함, 모든 레시피는 누군가의 경험과 취향이 누적된 것이고, 정통이나 절대치 같은 건 따로 없음
     * “AI 검색에서 원하는 답을 찾았다면, 굳이 실제 사이트를 방문할 이유가 없지 않은가?”라는 말에, 오히려 반대로 생각함, 내가 정보를 확실히 찾을 수 있다면 AI 중개자도 필요 없음, AI가 유용할 때는 원본 페이지 정보를 충분히 잘 요약해주기 때문임, 하지만 결국 AI 서치라는 것도 지금은 “유저 유치” 단계이고, 언젠간 투자자 욕심 때문에 “이익 극대화” 단계로 넘어갈 수밖에 없음, 그 순간부터는 AI 서치 품질이 심각하게 하락할 수밖에 없음, 적어도 현재까지는 AI 요약이 매우 쓸모 있긴 하지만, “내가 어떤 콘텐츠를 요약할지 직접 고를 수 있어야” 진정 가치가 큼
          + “어떤 콘텐츠를 요약할지 직접 고르는 게 중요하다”에 전적으로 동의함, 아쉽지만 95%의 유저는 그렇게 하지 않을 거라고 봄, 이미 주변 개발자들조차 LLM이 내놓은 괴상한 코드를 곧이곧대로 복붙하는 경우가 많았음, Stack Overflow에서 엉터리 복붙 코드가 넘쳤던 것과 비슷함, LLM 코드 품질은 분명 올라갔지만, 결국 “괜찮아 보이는” LLM 코드가 대량 복붙될 텐데 그 장기적 결과가 어떨지는 솔직히 불확실함, 물론 나중엔 LLM이 스스로 해당 코드를 고칠 수도 있을 거라 조금 기대함
     * 현재 Google Zero(구글 검색 결과 내 나의 존재감이 사라짐) 위협을 체감하며, 이 문제는 단순히 레시피뿐 아니라 삶의 모든 영역에 영향이 큼, 누군가는 베를린 최고의 카페를 실제로 방문해 리뷰하고, 2007년식 Renault Kangoo 연료펌프 수리 방법을 문서화함, 누군가는 직접 만져본 신기한 버튼의 촉감을 설명하고, 상처받은 사람이 진심 어린 위로를 남김, 혹은 불친절한 고객 서비스에 실망해 후속 이용자에게 경고함, 이런 식으로 각자의 삶의 경험과 실제 후기, 마음을 나누는 게 인터넷의 진짜 멋이었음, 그런데 그 공유의 경제성이 무너진다면 결국 인터넷과 그 생태계를 만든 사람들의 삶 자체도 사라질 수 있음, 이것만큼은 정말 안타까움
          + ‘공유의 경제성이 파괴된다’는 걱정에 대해, 사실 대부분의 정보 공유자들은 애초에 돈을 못 벌거나 오히려 비용을 내면서 BBS, 유즈넷, 지오시티, 텀블러 등에 정보를 올려왔음, 다이얼업 시절엔 FTP로 정적 웹페이지도 무료로 호스팅할 수 있었음, 블로그와 MoveableType, Wordpress 등 다양한 도구들로 기꺼이 내 돈을 내고 정보를 공유해온 역사가 있음, 결국 ‘누군가가 봐서 알아야 할 내용’에 열정을 가지면 돈이 아닌, 공유 그 자체가 목적이었음, 정보 공유를 오로지 생계의 방법으로 바라보기 시작할 때 오히려 품질은 떨어질 수 있음, 광고라는 거대한 중간자를 만들고, ‘게임’에 참여하지 않으면 정보가 검색조차 안 되도록 시스템이 바뀌는 순간 공유는 점수와 수익 중심으로 변질됨, 그게 문제임, 정보 공유와 생계는 반드시 연결되어야 하는 것도
            아니었음, https://en.wikipedia.org/wiki/Information_wants_to_be_free 문서 참고
     * 나는 반(反) AI 논의가 오히려 더 흥미롭다고 느낌, 찬성 입장 토론은 늘 뻔하거나 의미 없어 느껴지고, 차라리 SF소설을 읽는 게 더 낫겠다는 생각까지 듦, 반면 반대 입장의 논의는 내가 동의하지 않더라도 더 성실하고 진지하게 자신의 생각을 공유하며, 어떤 뭔가를 새롭게 고민하게 만듦, 어쩌면 반(反) AI 쪽에서 새로운 펑크 문화가 태어나고 있을지도 모르겠음, 실제로 나는 개인과 일 모두에서 AI를 잘 쓰지만, 내 의견이 스스로 너무 무미건조하게 느껴짐
          + 반(反) AI 논의의 가치는 우리가 무엇을, 왜 소중히 여기고 있는지 근본적으로 다시 생각하게 만듦, 실생활의 다양한 요소와 철학이 섞여 있어서 읽는 맛이 있음, 내 감정과 논리가 그대로 전해지도록 글을 쓰는 게 쉽지 않다는 어려움도 느낌
          + 나는 완전 반대 입장임, 반(反) AI 주장들은 AI 산출물이 쓰레기라거나, 영혼이 없다는 타성적인 이야기뿐임, 인간성 상실 운운도 구체적 근거 없는 경우가 많음, “다른 사람의 흥분을 꺾으려는” 논의 자체가 실은 더 열정이 없다고 느낌, 오히려 찬성 입장은 늘 새로운 사용사례나 아이디어를 찾아내고, 그런 발견과 탐색이야말로 사람을 진짜 열정적으로 만듦, Rust 배운 후기나 여행기가 재밌는 것도 동일한 이유임
     * 인터넷의 역할에는 두 가지 방식이 있다고 생각함, 첫째는 특정 정보를 배우거나 문제 해결에 사용할 수 있는 온디맨드 리소스, 둘째는 인간적 연결의 장으로써의 소셜 네트워크적인 측면임, 정보를 찾는 쪽은 전자가 목적이지만, 정보를 직접 올리는 사람은 후자를 더 바라보기 쉬움, 전통적 검색은 이 두 가지가 통합되어 있었음, 탐색자는 정보를 얻는 과정에서 자연스럽게 인간적 연결도 할 수 있었음, 하지만 정보만 원하는 입장에선 그런 맥락이나 개인적 이야기가 가끔 방해가 되어 여러 소스를 직접 읽고 융합해야만 했음, AI의 도입 이후 이 둘이 거의 완벽히 분리됨, 정보만 원하는 사람은 AI 및 웹 검색을 더 많이 선택하고, 인간관계나 탐색이 목적인 사람은 RSS, 블로그, marginalia, wiby 같은 서비스로 이동함, 실제로 이런 분화가 꼭 나쁘다는 생각은 없음,
       오히려 장기적으로 각자의 목적이 더 선명해져 원하는 독자나 방문자만 남게 될 것이라는 기대도 있음
          + 정보만을 얻으려다보면 적절한 이야기와 맥락이 함께 제공되는 것이 더 중요하다고 생각함, 이런 맥락 때문에 기술 블로그가 옛날 포럼글보다 더 신뢰를 얻음, AI가 두 소스의 답을 섞어서 줄 때에는 그 맥락을 파악할 수 없어서 정보 해석의 근거가 사라짐
          + Gemini(검색용 AI가 아니라 텍스트 프로토콜)라는 생태계를 처음 들었을 때 비슷한 논의를 봄, 기술 검색/AI 세계(가칭 ‘infonet’)와 인간 중심 탐험/디지털 가든 세계(‘socialNet’)가 별도로 진화해 간다는 주장에 공감함, 앞으로 이런 분화는 더 본격화될 거라 생각함
     * 이 블로그는 정말 멋짐, 간결하면서도 개성 넘치고, 내 미래의 블로그 참고 자료로 삼으며, Penny라는 강아지도 만나볼 수 있어서 너무 즐거웠음: https://localghost.dev/blog/…
     * https://localghost.dev/robots.txt: User-Agent: * Allow: / 로 설정되어 있음
          + 저자에게 실제로 연락해보니, 아무도 robots.txt를 지키지 않으니 설정에 신경도 쓰지 않는다고 함
          + 어차피 robots.txt를 그 누구도 지키지 않음
"
"https://news.hada.io/topic?id=22589","상담사가 아닌 공감하는 매니저가 되는 법 [번역글]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      상담사가 아닌 공감하는 매니저가 되는 법 [번역글]

    1. 상담사가 아닌 매니저의 역할을 인식하기
          + 매니저는 팀원의 직무 성과와 성장 가능성을 평가하는 책임이 있다.
          + 팀원이 자유롭게 불만을 터놓을 수 있도록 하는 것도 중요하지만, 무제한적으로 모든 불만을 받아주는 건 매니저 자신의 감정 소모와 평정에 영향을 줄 수 있음.
          + 감정적 이슈나 스트레스 관리 능력 역시 평가 항목에 속하기 때문에, 지나친 불만 토로가 리더십 판단에 부정적 영향을 미칠 수 있다.
          + 팀원들에게 경계와 한계를 정해주는 것이 오히려 더 건강한 조직, 리더-팀원 관계를 만드는 데 도움이 된다.
    2. 공감 후, 문제 해결을 위한 실행 방향으로 대화 이끌기
          + 팀원의 고민을 충분히 경청한 뒤, 지금의 문제점을 좀 더 실용적인 관점으로 바라보게 돕는다.
          + 예시 질문:
               o “이 상황을 어떻게 개선할 수 있을까요?”
               o “우리가 통제할 수 있는 부분은 무엇일까요?”
               o “내가 매니저로서 실질적으로 도울 수 있는 점은 무엇일까요?”
          + 이러한 질문들은 불만 토로에서 멈추지 않고, 스스로 해결책을 생각하고 행동으로 옮길 수 있도록 유도한다.
    3. 너무 빠르게 해결책만 제시하지 않기
          + 팀원이 힘들다고 말할 때 바로 해결 방안부터 내놓는 것은 오히려 ‘경청받지 못했다’는 인상을 줄 수 있음.
          + 적어도 몇 분은 진심으로 상황을 이해하고 있음을 보여주는 반응이 필요하다.
          + 예시 대화:
               o “이 상황이 정상적이지 않다는 건 이해합니다. 그 동안 에너지도 많이 쓰셨죠. 말씀해주셔서 감사해요. 왜 답답하신지 알 것 같아요. 이 상황을 나아지게 하려면 우리가 무엇을 하면 좋을까요?”
          + 이런 자세는 팀원이 자신의 감정과 고민이 인정받았다는 느낌을 받게 한다.
    4. 부정적 인식이 지나칠 때 부드럽게 반박하고 조율하기
          + 팀원이 극도로 부정적으로 상황을 바라볼 땐, 과장된 시각을 완화해줄 필요가 있다.
          + 실질이 상황이 나쁘더라도, 반복되는 문제이거나 일시적인 어려움임을 상기시켜주면 팀원이 지나친 걱정에서 벗어날 수 있음.
          + “X가 분명히 힘든 상황이긴 하지만, 예전에도 비슷한 일이 있었고 성공적으로 잘 넘어갔듯 이번에도 어느 정도 지나갈 거라 생각해요.”
          + 부정적인 시각을 완화한다고 해서 감정을 무시하는 것이 아니라, 그들이 적절한 현실 인식을 가질 수 있도록 돕는 것이 리더의 역할.


  추가 포인트 및 참고 사항

     * 지나친 불만 토로는 팀의 사기, 성과에도 악영향을 준다.
     * 더 많은 ‘말할 시간(airtime)’을 주는 것은 해결책 탐색과 긍정적 인식의 확장에 도움이 된다.
     * 매니저는 팀원의 이야기를 듣고 존중하되, 대화를 생산적인 방향으로 이끄는 책임이 있다.


  실무 적용 예시

     * 1:1 면담 시 불만을 경청하되, “이후 우리에게 실질적으로 필요한 변화가 무엇일까?”라는 질문을 빠뜨리지 않는다.
     * 감정적으로 너무 힘들어한다면 원인을 한 번 더 짚어주고, 본인도 감정적으로 힘들었음을 공감한다.
     * 반복적, 일시적 어려움은 “이 시기만 지나면 안정될 것” 등 긍정적 프레임으로 부드럽게 꼬집어준다.


    이 글의 핵심:

   공감하는 매니저란 단순한 ‘경청자’가 아니라, 상담사가 되지 않으면서도 팀원의 고민과 불만을 귀 기울여 듣고, 실질적 문제 해결과 건강한 관계 형성을 이끄는 리더다.
"
"https://news.hada.io/topic?id=22501","Debian GNU/Hurd 2025 가 릴리즈 되었습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Debian GNU/Hurd 2025 가 릴리즈 되었습니다

   Debian ""Trixie"" 배포와 함깨
   데비안 릴리즈중 하나인 Debian GNU/Hurd 도 같이 배포되었습니다

   약 72%의 데비안 아카이브를 사용할 수 있다고 하네요

   그 외의 변경사항은 다음과 같습니다
     * 64비트 지원이 완료되었으며, i386과 동일한 아카이브 커버리지를 제공합니다(실제로 일부 패키지가 64비트 전용이기 때문에 약간 더 많습니다)
     * 이 64비트 지원은 Rump 레이어를 통해 NetBSD의 사용자 공간 디스크 드라이버를 완전히 활용합니다.
     * 이제 번역기를 기록하기 위해 기본적으로 xattr를 사용하며, mmdebstrap과 같은 다른 OS에서 원활하게 부팅할 수 있습니다.
     * Rust가 GNU/Hurd로 포팅되었습니다.
     * Rump를 통해 USB 디스크 및 CD-ROM 지원이 추가되었습니다.
     * SMP 지원 패키지가 제공되며, 상당히 잘 작동합니다.
     * 콘솔은 이제 키보드 레이아웃을 위해 xkb를 사용하며, 멀티부트에서 제공되는 프레임버퍼를 지원합니다.
     * 다양한 기타 지원이 추가되었습니다(ACPI, RTC, APIC, HPET 등).
     * 일부 문서 개선이 이루어졌습니다.
     * 다양한 수정 사항이 포함되었습니다(IRQ, NFSv3, libports, 파이프 특수 사례 등).
"
"https://news.hada.io/topic?id=22535","맥 게임의 흐릿한 렌더링 문제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            맥 게임의 흐릿한 렌더링 문제

     * MacBook에서 전체 화면 게임 실행 시, 대부분의 게임이 디스플레이 노치 문제로 인해 흐릿하게 렌더링됨
     * 시스템의 해상도 선택 메커니즘이 노치 영역을 고려하지 않아, 잘못된 출력 영역 선택을 야기함
     * 16:10 해상도 선택이 임시 방편이지만, 근본적으로 Apple의 API 설계 및 안내 부족이 원인임
     * 대표적 게임들(Shadow of the Tomb Raider, No Man’s Sky 등)에서 문제 재현됨; 일부 최신 게임(Cyberpunk 2077)은 정상 처리
     * Apple이 HIG 및 API 업데이트로 개발자 지침과 지원 개선 필요함


Problem: 맥 전체 화면 게임에서의 흐릿한 렌더링 원인

     * 이 문제는 2023년 9월부터 FB13375033 이슈로 Apple에 제출되어 있음
     * MacBook 디스플레이에서 게임을 전체 화면으로 실행하는 경우, 대부분의 게임이 노치(notch) 영역을 제대로 고려하지 않아 렌더링 오류가 발생함
     * 많은 게임이 시스템에서 지원하는 해상도 목록을 받아 그 중 첫 번째(전체 디스플레이 영역 해상도)를 선택하지만, 실제로 AppKit에서 사용할 수 있는 전체 화면 영역은 노치 아래에 제한됨
     * 게임이 전체 디스플레이 해상도로 출력할 경우, 실제 그릴 수 있는 영역이 더 작으므로 프레임이 세로로 압축되고 블러 처리 문제로 이어짐

맥 디스플레이의 영역 구조

     * 맥 노치 디스플레이에는 세 가지 주요 영역이 있음
          + 전체 디스플레이 경계(노치와 메뉴 포함)
          + Safe area(노치 아래)
          + AppKit에서 활용 가능한 전체 화면 영역(메뉴바 아래)
     * CGDisplayCopyAllDisplayModes 함수가 반환하는 해상도 목록에는 전체 디스플레이 해상도와 메뉴바 아래 해상도(주로 16:10 비율) 가 혼재되어 있음
     * 대부분의 게임이 목록의 첫 항목(전체 화면 영역)을 사용하여 부정확한 출력을 함
     * 예시: Shadow of the Tomb Raider는 기본적으로 전체 디스플레이 해상도(3456x2234)로 시작하지만, 실제로 그릴 수 있는 영역은 3456x2160임(74픽셀 차이로 인해 화면이 압축되고 흐릿하게 렌더링됨)

Solution: 올바른 해상도 선택 및 임시 회피방안

     * 사용자: Mac 노치 디스플레이에서 전체 화면 게임 실행 시, 16:10 해상도를 직접 선택하는 것이 중요함(게임이 자동으로 맞추지 않음)
     * 개발자: NSScreen의 safeAreaInsets 속성을 이용하여 해상도 목록을 조금 더 정교하게 필터링 필요
          + Safe area 기준에 부합하는 해상도만 걸러내는 알고리듬을 코드로 제공(4:3 등 일부 해상도가 과하게 필터링되는 부작용 있음)
          + 본질적으로는 Apple 차원의 개선이 필요함

Affected Games: 대표적 영향 게임 및 처리 현황

     * Shadow of the Tomb Raider, Control Ultimate Edition, No Man’s Sky, Riven, Stray 등 대부분이 잘못된 해상도 기본값으로 인해 압축 및 블러 렌더링 현상
          + Control: 자체적으로 해상도를 임의로 지정하지만 실제 Mac 해상도와 맞지 않음
          + No Man’s Sky: 올바르지 않은 비율과 safe area, non safe area 해상도를 모두 제공함
          + Riven, Stray: 압축된 해상도로 렌더링 디폴트 적용
     * Cyberpunk 2077은 16:10 비율로 정상 해상도를 선택(내부 필터링 방식 미공개)
     * World of Warcraft: 레거시 API로 노치까지 그릴 수 있어 전체 해상도 적용이 정상임

What Apple could do: Apple의 대처 필요성

     * HIG(Human Interface Guidelines) 문서에 노치 디스플레이 관련 해상도 처리와 안내 추가 필요
     * AppKit/Cocoa에서 해상도 필터링을 손쉽게 할 수 있도록 CGDisplayMode 업데이트 요구
     * 게임 최적화 전용 새 API 설계 필요(해상도 리스트 및 보일러플레이트 해소)
     * 개발자에게는 해상도 질의 대신 자체 해상도 목록을 산출하거나 “렌더 스케일” 방식 사용 권장 고려
     * 이러한 개선 적용 시, Apple의 공식 문서와 샘플 코드 업데이트 병행 필요

        Hacker News 의견

     * 나만 둥근 코너랑 노치가 있는 화면이 엄청 이상하게 느껴지는지 궁금함, 수십 년간 CRT 모니터의 애매한 기하학 때문에 고생하다가 드디어 완벽한 직사각형 디스플레이가 보편화됐는데, 이걸 다시 망치는 게 쿨해 보이려는 이유 때문이라는 게 아쉬움
          + 노치가 화면 영역을 빼앗는 바보 같은 게 아니라, 베젤이 줄어들면서 전체 화면 크기를 늘려주는 요소로 생각하면 됨, 그리고 노치 가까이 화면 코너가 오면, 노트북 외형이 둥글어서 화면도 꼭 같이 둥글어야 더 자연스러움, 사각형 화면이 둥근 노트북 귀퉁이에 있으면 이상해 보임, 하지만 상황에 따라 달라져서, Mac에서 비디오 재생 시엔 화면이 직사각형으로 바뀌고 노치 아래에서 재생됨, 실사용에선 더 큰 화면, 직장에선 둥근 코너, 메뉴바에 노치 들어가도 거슬리지 않음, 비디오와 게임 땐 직사각형 화면으로 바뀌는 식, 결국 다양한 장점과 유연함 때문에 꼭 나쁘게만 볼 필요 없는 부분임
          + 현재 기술로 가능한 선택지는 세 가지임, 1) 전면 카메라 없이 노베젤로 화면 최대화, 2) 전면 카메라 있지만 노베젤이라 화면이 5mm 짧아지고, 상단 5mm 영역은 아무 쓸모 없음, 3) 전면 카메라와 베젤/노치 조합에서, 가운데 '데드 스페이스'가 생기지만 옆 공간은 활용 가능, 그리고 대부분의 시간은 메뉴와 인디케이터가 상단에 떠있고 중간은 비어있으니, 노치 영역은 실제 앱 공간을 더 확보해주는 효과임, 게임도 #2, #3 방식 모두 데드 스페이스라 실제 차이 없음, 결국 노치는 실제 화면 가운데를 차지하는 게 아니라 좌우에 공간을 더해주는 셈임, 다만 해상도 리포팅 방식에는 문제 있다고 생각함 (앱에 전달하는 값이 실제와 다르면 혼란을 줌)
          + MacBook 노치 있는 모델을 사용 중인데 정말로 존재 자체가 잘 느껴지지 않음, MacBook 사용자들 대부분이 노치에 거의 신경 쓰지 않는 편임, 불만 가지는 분도 일부는 있지만 아주 소수임
          + 화면이 OLED인지 궁금함, 스마트폰은 다들 OLED임, 내 생각엔 노치는 사실 쓸모 없다고 보지만 어쨌든 전면 카메라 위치 때문에 필요함, OLED면 필요할 때마다 픽셀을 끄면 그냥 베젤처럼 보여서 기존 베젤 대안과 결국 비슷함
          + 나는 LCD에서 안티앨리어싱 없는 폰트가 더 보기 좋아서 선호했음, 픽셀의 각진 모서리가 깔끔하게 보이니까, 그런데도 많은 사람들이 부드러운 안티앨리어싱 효과를 선호함, 그게 CRT 느낌 때문인듯 함
     * World of Warcraft는 노치까지 고려해서 UI가 노치를 피해서 나오는 옵션이 있음, 내부적으로 C_UI에 safe region을 불러온 뒤, UIParent를 거기에 맞춰 조정해서 게임 화면은 전체를 다 쓰지만 UI는 노치 아래에 맞춰 조절함
          + WoW는 항상 macOS를 일류 플랫폼으로 잘 대해줬음, Blizzard가 최근 신작에서 macOS 지원을 중단한 건 정말 아쉬움
     * 이 상황은 Apple이 Mac의 게이밍에 신경을 안 쓴다는 사실을 보여줌, 나도 MBP, Mac Studio 등 엄청 투자했지만, 정작 하드웨어가 아니라 게이밍 소프트웨어의 한심한 관리로 한계가 생김, 그 배경에는 Apple이 Mac 게임에서 iOS처럼 30% 수수료를 못 챙기기 때문임, 결국 '겉으론 비금전적인 이유라 해도 모든 건 돈 때문'이라는 예전 선생님의 말이 떠오름
          + 진짜 더 큰 문제는 Apple의 문서화 수준이 너무 처참하다는 거임, 함수 시그니처 목록만 있는데 실제 활용법은 몇 년 전 WWDC 세션 찾아가봐야 하고, 거기 나온 게 맞는지도 애매함
          + Apple이 정말 게임에 신경 안 쓰는 건 맞지만, 노치 등 이런 문제 자체는 기술적으로 '마법 같은 추상화'를 제공한다고 하면서 일종의 모순이 생긴 결과임, 소프트웨어적으로 알아서 처리된다고 하는데, 실제로는 화면을 세밀하게 다루는 앱/게임은 다 따로 해킹/패치가 필요함, 매번 이런 식으로 기술적 한계와 추상화의 딜레마가 반복됨
          + Mac의 게임 시장에 신경 안 쓰는 건 게이밍이 본질적으로 마진이 낮은 비즈니스라는 인식 때문임, 일반적으로 게이머들은 하드웨어에 예민해서 부품 원가와 마진에 민감함(특히 SSD나 RAM 가격 등), Apple이 이윤을 높게 남기는 창작/엔터프라이즈 시장과는 완전히 다름
          + M3 Ultra Mac Studio를 쓰고 있음, $4,000 짜리 컴인데, StreamLabs로 뭐든 스트리밍 하려 하면(게임 안 켜도), 녹화가 끊기고 버벅거림, 이런 일이 왜 발생하는지 정말 이해가 안 감
          + Apple이 Mac에서 30%를 못 챙겨서 이런다는 주장은 설득력 없음, 왜냐면 기사의 대부분 Mac 게임이 App Store에 올라와 있어서 Apple은 수수료를 충분히 가져감, Control Ultimate Edition, Shadow of the Tomb Raider, Riven, Cyberpunk 2077 Ultimate, Stray 도 다 올라가 있음, 이건 Apple의 악의적 방해가 아니라 무능과 무관심에 가까움
     * WoW 같은 구식 게임은 CoreGraphics의 레거시 전체화면 API를 써서 노치 영역 안까지 자유롭게 그릴 수 있음, Mac에 대해 잘 모르는데, 게임이 노치까지 포함해서 전체화면을 그려서 몰입감을 높이다가도 UI와 게임플레이는 안전영역만 쓰는 게 맞지 않나 생각함, 별로 신경 안 쓰고 해상도만 임의로 잡아버리는 Control 같은 게임은 그냥 귀찮아서 그랬나 궁금함
          + 게임마다 방식은 다르지만, 노치 위 영역은 그냥 검정색이거나 접근 자체가 불가하게 처리됨(커서도 못 이동함), 화면 자체에서 해당 파트가 빠진 것처럼 동작함, M1 Air처럼 노치가 없을 때와 똑같다고 보면 됨
     * Apple만의 문제는 아님, Xbox 360에서도 2008년에 TV 오버스캔 이슈가 있었음, 해상도보다 작게 그려야 안전영역에 맞추는데, 개발할 땐 항상 따로 처리해야 했음, XNA에서 safe area rect를 제공한 덕에 좀 나아졌고 지금은 백버퍼 크기도 자유롭게 지정 가능, DLSS 등 쓸 때도 안전영역 1:1로 만드는 게 최선임, 결국 디스플레이 해상도와 렌더 해상도는 다를 수 있다는 걸 개발자가 명확히 인지해야 하고, wgpu, vulkan, AppKit, SDL, glfw 등 다양한 툴을 쓸 때도 마찬가지임
          + 본질적으로 너가 말한 건, 연산 자원을 아끼려고 일부러 화면을 더 작게 그리지만 결국 HDMI 출력할 땐 그대로 1080p로 다시 업스케일 되고, TV 오버스캔까지 겹치면서 오히려 문제가 심해질 수 있다는 거임, 사실 TV 오버스캔 문제는 커스텀 FoV랑 GUI 사이즈 조절 옵션만 있으면 해결 가능하니, 굳이 화면 자체를 줄일 필요 없다고 생각함
     * 이번 기사에서 흐릿하게 렌더링된 부분에만 집중한게 놀라움, 실제로는 마우스 포인터 위치까지도 영향을 받음, 게임마다 매번 OS 메뉴에 들어가서 전체화면을 노치 아래로 옮기도록 강제로 설정해야 함, 이런 건 전체 시스템 차원의 접근성 옵션이어야 하는데 그렇지 않은 게 의문임
     * 이 상황은 Mac의 게임 시장 규모를 잘 보여주는 사례임, 매우 작고 아쉬움
          + 실제로 Mac의 점유율은 Steam 하드웨어 설문 기준 1.88%에 불과함, Linux보다도 적음, 그래서 대부분의 개발자가 아예 신경을 안 씀
     * M3 MacBook Pro를 일부러 산 이유가 게임을 못 해서임, 사이버보안 석사를 위해 신뢰할만 한 노트북이 필요했고, 만약 Windows 기반 고성능 노트북을 샀다면 게임에 빠질 것 같아서 이런 선택을 함, 현재 기기는 전반적으로 훌륭하지만, 게임할 때 지나치게 과열되어서 걱정됨, 그래서 그냥 게임은 포기함
     * 이 사이트의 폰트는 몇몇 글자의 일부가 너무 얇음
          + 개인적으로 모든 글자 상단이 너무 얇다고 느낌, 실제로 잉크가 다 떨어진 프린터로 인쇄한 걸 읽는 기분임(Hacker News 전통대로 피드백 남김)
     * 기존 소프트웨어 안 깨고 이걸 고칠 방법이 궁금함, 리스트 재정렬?
          + Windows가 한 것처럼, 실행 중인 어플이 레거시 게임이면 OS 코드가 '거짓' 시스템 정보를 전달해서 화면이 잘 나오게 할 수 있음, 이런 식 접근이 Windows가 게임용 플랫폼으로 성공한 주요 원인이었음, 지금도 완전히 사라지진 않았지만 과거엔 이런 방식이 훨씬 더 흔했음
"
"https://news.hada.io/topic?id=22600","Show GN: JSON 시각화 및 편집 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: JSON 시각화 및 편집 도구

   안녕하세요
   예전부터 종종 사용하던 여러 무료 JSON Viewer들의 기능이 조금씩 아쉬움이 있어서,
   여러 오픈소스를 참고해서 Svelte5 기반으로 만들어 보았습니다.

   주요 기능은 다음과 같습니다.
     * 실시간 JSON 문법 검증 및 포맷팅
     * 트리 구조의 인터랙티브 그래프 시각화
     * 노드 클릭으로 JSON 위치 즉시 이동
     * URL에서 JSON 데이터 가져오기 (GET/POST/PUT/DELETE/PATCH)
     * 20개 이상 항목 자동 축소 (""더 보기"" 기능)
     * 한국어/영어 지원

   복잡한 JSON 구조를 시각적으로 파악하거나, API 응답을 분석할 때 사용하려고 만들었습니다.

   링크:
     * 데모: https://json.podosoft.io
     * GitHub: https://github.com/podosoft-dev/pdjsoneditor

   피드백 환영합니다!
   감사합니다.

   복잡하고 깊은 json구조를 많이 보는데 이런 툴이 있어서 너무 유용하네요 ㅎ 혹시 데스크탑용 앱으로도 만들어주실 생각은 없으신가요? 서브라임같은 느낌으로요 ㅎㅎ

   현재 계획중입니다

   xyflow쓰셨군요. 뭔가 플로우차트를 사용해서 아이디어가 잘생각이안나더라구요 멋지네요

   와! 평소에 아쉬웠던 건데 정말 눈에 쏙 들어옵니다!

   수고하셨습니다.
   코린이 분들께도 도움이 되겠어요
   감사합니다!

   JSON5도 지원하면 좋을 것 같습니다!

   봐~이브 코우딩 하신건가요?

   네 Claude Code를 주로 이용했고, 중간중간 막히는 부분은 ChatGPT에서 확인하고, 그래도 안되는 것은 직접 코드를 분석해서 수정방향을 확인해서 Claude Code에게 다시 지시하는 방법을 사용했습니다.
   특히 Dagre 를 적용시 그래프 노드 겹치는 문제는 아무리 해도 해결이 안되어서 제가 직접 디버깅 해서 수정을 했습니다.
   이러한 일련의 과정을 통해 한계가 어디까지인지, 작업 지시를 어떻게 해야하는지에 대한 경험을 많이 쌓은것 같습니다.

   와 좋네요.
   그런데, 노드 클릭시 이동은 안되는 것 같아요.

   이제 수정 되었습니다

   말씀하신 경우를 체크해보니 이동되는 노드가 있는 반면 안되는 경우도 있는것을 확인했습니다. 확인해서 고쳐 보겠습니다.

   개인적으로 Escaped JSON을 다룰 일이 종종 있는데, JSON Escape 기능도 추가되면 좋을 것 같아요!

   넵 참고해서 검토 해 보겠습니다.

   너무 좋습니다!! Yaml, toml 과도 호환되면 자주 이용하게 될 것 같아요

   말씀하신 Yaml, TOML을 생각 못했는데 지적해주셔서 감사합니다. 기능 추가 검토해서 진행 해 보겠습니다.
"
"https://news.hada.io/topic?id=22545","Show GN: 직접 코딩 없이 만든 애니메이션 분기 공유 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 직접 코딩 없이 만든 애니메이션 분기 공유 서비스

   안녕하세요, 지시만 하고 직접 코드를 짜지 않은 것은 지금까지는 거의 해 보지 않았는데요, 이번 프로젝트는 Gemini, Grok 3, GPT-4와 같은 AI를 통해 거의 대부분의 코드를 짜고, 조금의 수정만 제가 짜는 방식으로 개발하였습니다.

   그래서 저는 검수만 한 역할이라, 포트폴리오로 내세우기 위험하다는 판단이 들어 리드미에도 역시 명시하였습니다.

  용도

     * 애니메이션 분기 정리
     * 사용자 요청으로 OTT 정보 등 반영

  특징

     * 게시물 등록은 누구나 즉시 가능
     * 장점 빠른 최신 정보 업데이트
     * 단점 도배 행위에 취약
     * 등록 외의 작업은 관리자의 승인 후 최종 반영
          + 장점 잘못된 정보 검수 가능
          + 단점 관리자 부재 시 정보 수정이 느릴 수 있음

   저는 전문 개발자가 아니기도 하고, 빠른 정보 업데이트가 도배 방지보다 더 중요하다고 여겼습니다. 혹시나 해서 부탁드리지만 게시물 도배를 하시지 말아주셨으면 좋겠습니다 ㅜㅜ

   깃허브 링크

   이곳은 광고판이 아닙니다..

     Show 올리기 : 직접 만든 오픈소스나, 개발한 서비스를 홍보하고자 할때 이용해 주세요.

   무슨 근거로 그렇게 말씀하시는 건가요?

   저도 애드센스 붙어있는 블로그 글들이나 구독자 늘리기 위한 메일링 홍보는 싫어하지만,
   이 글은 비전문가가 바이브코딩으로 운영 가능한 서비스를 만들었다는 것도 꽤나 흥미롭고, '광고판이 아니다'라고 지적할 만큼 노골적인 노림수도 없다고 생각해요

   덧붙여서
     * (구글링하면 바로 나오긴 하지만) github 링크
     * 바이브 코딩으로 서비스 런칭해보신 과정
     * 실제로 이렇게 운영해보시며 겪은 애로사항
       같은 것도 담겼으면 좋았을 거 같네요 :)

   앗, 광고나 사업성의 서비스들은 아니고 정말 제가 하고 싶어서 했습니다 ㅜㅜ
   가장 큰 애로사항은 일단 봇들이 OTT 정보들까지 잘 크롤링하지 못하는 것이 문제였는데, 수동으로 제가 일일이 입력하니 너무 힘들어서, 분기별로 꾸준한 업데이트만 하려고 합니다.

   DB는 어떤 것을 사용하셨나요?

   DB는 Turso를 활용하여 애니메이션들을 저장하고, OTT 정보에 대해서는 이미 업로드된 애니메이션들에 한해서 허락하게 한 후 애니메이션 ID를 외래 키로 갖는 테이블을 작성하였습니다. 또한 DB에 애니메이션을 자동적으로 삽입하기 위해 Gemini를 이용하여 웹 크롤러를 작성한 후 수정을 하여 완료하였습니다. 원래는 youtube API도 연동하려 하였는데, 사용량에 비해 처리해야 할 데이터나 너무 많아 못 하였습니다ㅠㅠ
"
"https://news.hada.io/topic?id=22491","Amplitude가 회사 전체가 좋아하는 내부 AI 도구를 구축한 방법(그리고 당신도 할 수 있는 방법)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Amplitude가 회사 전체가 좋아하는 내부 AI 도구를 구축한 방법(그리고 당신도 할 수 있는 방법)

     * Moda는 Amplitude 내부 데이터를 연결해 빠르게 질문에 답하고 PRD 같은 산출물을 생성하는 AI 도구
     * 처음에는 몇 명에게만 공유됐지만, 유용성이 입증되며 전사적으로 폭발적으로 확산됨
     * 작은 아이디어 스니펫을 기반으로 구체적이고 완성도 있는 문서로 발전시키는 과정을 자동화
     * 배포 전부터 직원들의 기대와 요청이 쏟아져, 짧은 기간 안에 라이브 환경에 배포됨
     * 데이터 접근성과 문서 작성 속도를 비약적으로 향상시키며 생산성에 큰 변화를 가져옴


Amplitude의 내부 AI 도구 Moda 구축과 활용 전략

     * Amplitude의 CTO Wade Chambers가 내부적으로 만든 AI 툴을 시범적으로 일부 동료에게 보여줌
          + 반응이 폭발적이어서 일주일 만에 회사 전체가 쓰기 시작함
     * 기존 문제: 사내 데이터에 접근하고 필요한 자료를 찾아 문서로 정리하는 데 시간이 오래 걸림
     * 목표: 누구나 자연어로 질문하면 데이터 기반 답변과 함께 완성도 있는 문서를 생성할 수 있도록 함
     * 주요 기능
          + 데이터 접근 자동화: 내부 저장소, 로그, 분석 데이터를 실시간으로 검색 가능
          + 문서 생성: PRD, 분석 리포트 등 다양한 문서를 AI가 초안 형태로 자동 작성
          + 아이디어 확장: 한 줄 메모나 개략적인 아이디어를 기반으로 구체적인 문서로 확장
          + 즉시 배포: 개발 단계에서 이미 높은 수요가 확인되자 빠르게 라이브 배포

핵심 내용 정리

  1. 3~4주 여가 시간으로 강력한 내부 AI 도구 구축

     * 정규 업무 외 여가 시간을 활용해 3~4주 만에 내부 AI 도구 Moda를 개발
     * 초기 목표: 사내 데이터를 신속히 검색하고, PRD 같은 문서를 자동 생성하는 기능 구현
     * 접근 방식: 완벽한 제품보다 작동 가능한 프로토타입을 빠르게 만들고, 실제 문제 해결에 초점을 맞춤
     * 개발 과정에서 데이터 접근 API와 사내 지식 베이스를 연결해, 질문 → 데이터 수집 → 문서 생성의 전 과정을 자동화

  2. 소셜 엔지니어링으로 단 1주일 만에 전사 확산

     * CTO Wade Chambers가 일부 동료에게 시연 → 즉각적인 호응과 입소문
     * 의도적으로 '선별된 소규모 그룹' 에만 먼저 공유해 초기 열광을 만들고, 이를 주변으로 확산시킴
     * ""이거 언제 쓸 수 있나요?""라는 요청이 폭발적으로 늘어나면서, 정식 출시 전 이미 전사적 사용 준비 완료
     * 빠른 도입을 위해 복잡한 승인 절차를 최소화하고 즉시 배포 전략을 사용

  3. AI 기반 고객 피드백 분석과 주요 주제 파악

     * 제품 관리자가 Moda를 활용해 여러 데이터 소스(지원 티켓, 설문, NPS, 소셜 미디어 등)에서 고객 피드백 수집
     * AI가 자동으로 피드백을 분류하고, 반복적으로 등장하는 핵심 주제를 요약
     * 이를 기반으로 제품 개선 우선순위와 고객 요구 분석 보고서를 신속히 생성
     * 수동 분석 대비 시간과 인적 리소스 절감 효과 큼

  4. 연구·PRD·프로토타입 제작을 단일 회의로 압축

     * 전통적 워크플로: 리서치 → 아이디어 회의 → PRD 작성 → 프로토타입 제작 (수 주 소요)
     * Moda를 활용하면 한 번의 회의에서:
          + 아이디어 입력 → 관련 데이터/사례 검색
          + AI가 PRD 초안 생성
          + AI 보조를 통해 프로토타입 설계까지 진행
     * 회의 종료 시점에 이미 실행 가능한 구체적 계획과 시제품 확보 가능

  5. 역할 교환 연습으로 부서 간 공감·유창성 향상

     * 제품, 디자인, 엔지니어링 팀이 서로의 역할을 AI 도구로 시뮬레이션
     * 예: 엔지니어가 AI를 통해 디자인 제안 생성, 디자이너가 AI로 기술적 제약 고려
     * 역할 전환 경험이 부서 간 언어와 관점의 이해도를 높이고, 협업 효율을 개선
     * AI가 복잡한 전문 지식을 빠르게 번역·요약해 주기 때문에 진입 장벽이 낮아짐

  6. 엔지니어링 팀의 기술 부채 해결 지원

     * Moda가 기존 코드베이스 분석과 문서화 작업을 자동화하여 부채 파악을 가속
     * 오래된 시스템에서 발생하는 문제를 AI가 우선순위별로 정리하고, 리팩토링 제안까지 제공
     * 기술 부채 해결 계획을 데이터 기반으로 제시하므로, 관리·개발 간 합의 형성이 쉬워짐
     * 반복적인 유지보수와 리스크 관리 작업이 예측 가능하고 체계적으로 진행됨

   여가시간을 써서 만들었다는게 안좋은 선례로 남는건 아닐지 모르겠네요
   왜 항상 인하우스 도구는 누군가 총대를 매고 본인의 여가시간을 써서 만들어야만 하는걸까요 ..

   ""Amplitude의 CTO Wade Chambers가 내부적으로 만든 AI 툴을 시범적으로 일부 동료에게 보여줌""

   하용호님의 발표자료에서 언급해주신 네이버 글도 그렇고, AI Transformation도 C-level에서 의지나 목표가 있어야 전사적으로 잘 퍼지나보내요.
"
"https://news.hada.io/topic?id=22572","GDPR는 의미 없었음: 채팅 감시로 EU의 프라이버시가 종말 맞음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GDPR는 의미 없었음: 채팅 감시로 EU의 프라이버시가 종말 맞음

     * GDPR이 도입되었지만, EU 내 사생활 보호에 실질적 효과 없음
     * Chat control 정책을 통해 유럽 내 온라인 커뮤니케이션 감시가 시행됨
     * 사생활 약화와 함께 감시 기술 도입이 빠르게 진행 중임
     * 사용자 데이터 보호보다 정부의 인터넷 제어 우선 순위로 변화함
     * 이에 따라 유럽 기술 업계와 스타트업에 프라이버시 저하 우려 증가 추세임


GDPR의 한계와 채팅 감시 정책 도입

     * EU에서 GDPR(개인정보 보호법)을 시행하며 사생활 보호를 약속하였으나, 실제 온라인 프라이버시 보호 효과에 한계 존재함
     * 최근 Chat control로 불리는 정책이 도입되며, 유럽 내 주요 온라인 서비스 및 메신저 대화 내용에 대한 정부 차원의 감시가 확대됨
     * 이러한 정책은 아동 보호 등 공익 목적으로 홍보되었으나, 모든 사용자에 대한 메시지 스캔 등 광범위한 정보 감시로 이어짐

감시 강화와 프라이버시 영향

     * Chat control 정책에 따라 AI 기반 자동 필터링과 감시 솔루션이 적용되어, 개인 간 비공개 메시지 역시 분석 대상으로 포함됨
     * 데이터 보호를 위한 본래의 법적 틀과 달리, 공공의 안전이라는 명분 아래 개인 프라이버시 보호 약화 현상 나타남
     * 이로 인해 민간 기업 및 스타트업들도 서비스 구조 변화와 법적 준수를 요구받는 상황임

유럽 기술 및 스타트업 업계의 우려

     * 온라인 사생활 침해와 감시 강화가 유럽 내 혁신 환경과 스타트업 생태계 경쟁력에도 장기적인 영향을 미침
     * 많은 기업들이 고객 신뢰 저하 및 데이터 관리 부담 증가 문제를 겪고 있음
     * 궁극적으로, 개인정보 보호와 정부 통제 간 균형 논의가 IT 업계 핵심 이슈로 부상함

        Hacker News 의견

     * 누군가 개인적으로 숨길 게 없어서 Signal로 채팅한다고 하면, 나는 항상 그 사람에게 자신의 폰 잠금을 해제해서 내게 넘겨보라고 요청함. 이 농담을 해도 사람들이 잘 못 알아듣는 경우가 많음. (관련 글)
          + 이 논리는 잘못된 것임. 사람들은 정부와 서로를 신뢰하는 방식이 다름. 투표가 비밀인 것에도 이유가 있음. 만약 정부가 채팅과 소셜 네트워크만으로 국민의 투표 경향을 80% 이상 예측할 수 있고, 새로운 정당의 결성을 미리 알고, 친구들의 비밀까지 파악해서 언론에 흘리거나, 모호한 죄목으로 기소할 수 있다면, 우리는 정부를 실질적으로 변화시킬 수 있는 기회를 잃게 됨. 지식이 곧 힘임. 지금 힘의 균형이 개인에게 너무 기운 것처럼 느껴지는지 자문해 보기 바람
          + 나는 아예 개인적인 부분에서 벗어나서, 사람들이 가장 두려워하는 권력이 모든 비밀스러운 조율을 미리 알 수 있다고 생각해보라고 권함. 나 자신은 숨길 게 거의 없지만, 누군가는 비밀을 가질 수 있어야 한다고 간절히 바람. 그래야만 우리가 권력 남용에 더 효과적으로 저항할 수 있음
          + 만약 그들이 정말 폰을 내민다면, 그 다음엔 뭘 하려는 건지 궁금함. 사진이나 연인과의 대화를 뒤져보고, 뭐라도 찾아서 웃으려는 건지? 이런 상황이 현실에서 어떻게 이어질지 이해가 잘 안 감
     * 이런 정책을 도입하려면, 우선 5년 동안 모든 정치인과 공무원, 그 가족들, 심지어 자녀까지 대상으로 먼저 시험해 보아야 한다고 생각함. 보안 연구자들에게 그 시스템을 자유롭게 해킹할 수 있도록 허용해야 하며, 형사처벌은 없어야 함. 데이터에 접근한 기록은 모두 공개 블록체인에 가명으로 기록되어야 함. 5년 후에는 통계와 보고서를 공개해서, 얼마나 범죄가 줄었는지, 누가 왜 처벌받았는지 어려 로그와 함께 공개하고, 마지막엔 국민이 이 시스템 시행 여부를 투표로 결정하도록 하는 게 맞다고 봄
          + 이 제안의 문제는, 정치인들은 행동을 바꾸지 않을 것이라는 점임. 최적의 정치인은 도덕성이 없는 철저한 현실주의자이어야 하며, 연방적 민주주의에서 성공하려면 어쩔 수 없음. Chat Control을 적극 추진하는 로비 세력이 누군지 알아야 함. 언론이 이들의 비리를 파헤치고 널리 알려야 함
          + 이런 방식은 누구에게도 공정한 대우가 아니라고 생각함. 이런 전면 감시는 결국 모든 비밀, 불법이든 합법이든 다 드러나게 되어 심각한 피해를 주게 됨. 국가가 국민을 감시하는 걸 허용하는 순간, 그 국가는 존재하지 않았으면 하는 형태로 변화하게 됨. 감시 국가에서 좋은 결과는 기대할 수 없음
          + 이런 시스템이 있었다면 Ursula von der Leyen과 Pfizer 간 SMS도 볼 수 있었을 거라는 점에서 아이러니함
          + 진짜 문제는, 모든 범죄를 다 막거나 해결한다는 목표 자체가 자유에 있어 최악의 시나리오라는 것임. 저항 자체가 불가능해지므로, 결국 권력 남용과 독재로 무너질 확률이 0%가 아님. 실제로 독재에 저항한 수많은 혁명과 피비린내 나는 역사, 민주주의로의 전환이 얼마나 많은 폭력과 협박, 희생을 동반했는지 생각하면, 우리는 언제든 저항할 수 있는 권리와, 심지어 폭력과 증오를 조직적으로 이야기할 공간도 필요함. 이런 자유는 나쁜 사람도 이용할 수 있겠지만, 우리가 치러야 할 대가임
     * '채팅'이라는 말을 빼고 'Control'만 남기는 게 맞다고 생각함. 지금 논의되는 ChatControl 법안은 너무 애매해서, 온라인에서 공유나 동기화가 가능한 모든 서비스에 적용될 수 있음. 채팅, 이메일, 파일 공유, 투두 리스트 등 다 해당됨
          + 나는 ChatControl이 EU가 미국 NSA/Echelon 같은 은밀한 대규모 감시 시스템을 구축하는 데 실패한 결과물이라고 느낌. 유럽 검색엔진이나 클라우드처럼 실패했고, 결국 노골적으로 법을 만들어 밀어붙이려는 것임. 시행이 실질적으로 비효율적이길 바라는 마음임. 우리는 1984나 Brave New World에서 사는 게 아니라, 영화 Brazil처럼 '1985년 EU식' 디스토피아임
          + 사전적 의미로 따지면 wiretap(도청)도 있는데, 이젠 'wireless tap(무선 도청)'이라고 부르자는 의견임
     * 서구 민주국가의 사람들은 이 현상을 어떻게 받아들이는지 궁금함. 나는 거의 독재에 가까운 국가에서 살아왔기에 이런 통제가 당연하다고 느껴옴. 근데 EU와 미국은 다르다고 생각했음. 이런 뉴스들이 계속 나오는데도 별다른 반응이 없는 게 이해가 안 감
          + 시민단체, 프라이버시 단체, 법원, EU 의회 등에서 꽤 강한 반대가 있음. 비판 사례
          + 나는 미국에 살고 있고 나 역시 이 현상이 어이없음. 예전엔 인터넷 커뮤니티가 훨씬 더 디스토피아와는 거리가 먼 규제에도 강하게 반응했는데, 요즘은 아무리 상황이 나빠져도 모두 무덤덤함. 희생이 따르는 어떤 일에도 적극적으로 행동하는 사람이 줄었고, 나조차도 뭘 해야 할지 모르겠음. 얼마 전만 해도 SOPA 얘기하며 다들 분노했는데, 지금은 정말 다들 무감해진 느낌임
          + 서방에서는 주로 '아이들을 지켜야 한다'는 명목으로 여론 몰이를 많이 함. 소아성애, 마약, 자살, 자해, 사이버불링 등 미디어에 끔찍한 사례를 가져와서 반대 의견을 잠재우는 전략이 통용됨
          + EU와 미국은 분명 다름. 프라이버시는 주로 규정 준수와 민사소송을 통해 지켜짐. 예전에 일어난 3억 명 규모 데이터 유출사건의 경우도 건당 0.25달러 수준의 벌금이 부과되는 수준임. 대신 EU는 기업 정책 위반 등으로 훨씬 더 많은 벌금을 부과함. 예시로 아일랜드 DPC가 Facebook의 EU-미국 데이터 이전 위반에 12억 유로(약 1.3억 달러) 벌금을 부과한 적 있음. 관련 링크
          + 내 나라는 겨우 35년 전에 공산주의에서 벗어난 나라임. 내가 아는 사람들 중엔 모두가 해당 정책에 반대함. 큰 나라들이 다수를 내세워 결정하려는 시도가 계속 있었지만, 여전히 각국 모두 동의해야 하는 '만장일치 원칙'을 따름. 한 나라만 반대해도 도입이 어려움
     * 최근 I2P를 사용해 봤는데, 설계나 기술 품질이 정말 인상적이었음. 분산 네트워크에 필요한 거의 모든 기능을 갖추고 있는 멋진 소프트웨어임. 다만 네트워크 효과 때문에 실질적으로는 커뮤니티가 가장 부족함. 안정적인 라우터가 많을수록 빠르고 신뢰성 있는 네트워크가 되지만 현재는 느림. 그래도 한번쯤 써보길 추천하고, 보안이나 익명성 관심이 없어도 hole punching, 공개키로 글로벌 주소 부여 등 재미있는 점이 많음. SAM 인터페이스와 라이브러리도 제공해 다른 앱에 적용 가능함
          + I2P 공식 사이트
          + I2P를 20년 넘게 좋다는 말만 들었는데, 실제로 써보면 Tor 노드처럼 남이 이상한 사이트에 접속했다가 내게 불똥 튀는 위험이 있는 건지 궁금함
          + 이 댓글 덕분에 나도 I2P에 입문하게 됨. 내 라즈베리파이 라우터와 여러 서버가 이제 I2P floodfill 노드가 됨
          + 구체적으로 이야기하는 게 뭔지 궁금한데, 관련 링크를 공유해 줄 수 있는지 요청함
     * 중앙 서버 없이 암호화 메신저 앱 만들 수 있을지 궁금했음. BitTorrent 마그넷 링크처럼 모두가 메시지 중계에 대한 대역폭을 분담하지만, 자신과 관련된 메시지만 볼 수 있는 구조. 초보적 수준의 지식으론 가능해 보이고, 미래의 프라이버시 지향적 솔루션이 될 것처럼 보임. 찾아보니 Briar라는 게 실제로 있음
          + 예전 Skype가 그런 시스템이었음. 중앙 서버(슈퍼노드)가 있어 발견 기능만 제공하고, 사용자는 직접 연결해서 대화함. 오래 실행되고 자원이 넉넉한 클라이언트도 슈퍼노드가 될 수 있었음
          + Delta Chat은 웹버전은 없지만 설치가 필요 없는 앱 중 최고라고 생각함. Chatiwi는 설치 필요 없는 유일한 e2e 암호화 채팅 서비스인 듯함 (순수 자바스크립트라 소스코드/네트워크를 확인 가능), Briar와 Tox는 앱을 설치해야 하고 iOS에서 동작 안 함. Briar는 중단된 것 같음
          + 여러 가지 분산화 수준의 솔루션이 존재함. Briar는 완전 p2p임. Matrix는 서버가 있지만, 각 서버가 자체적으로 관리하는 연합 모델임
          + 중앙 노드 없는 p2p 암호화 메신저는 충분히 만들 수 있지만, 일반 사용자에게 쉽고 인기 끌게 만드는 건 거의 불가능함. 친구 추가나 멀티 디바이스 동기화, 푸시 알림 등이 매우 어려움. 반면, Matrix나 Jabber 같은 것을 개인 서버로 돌리고, Wireguard로 접근제어하는 것이 훨씬 현실적임. 셋업도 자동화된 앱이 있음(Amnezia Proxy 참고). 이런 서버는 공개 서빙이 아니므로 일반인은 접근 불가, 가족이나 프로젝트 등 작은 그룹에는 충분함. 하지만 페이스북이나 트위터 같은 대규모는 UX 마찰 때문에 불가능함
          + 정치적인 문제를 기술 솔루션만으로 해결하려고 하면 이미 진 것임
     * EU에서는 사용자 추적 같은 개인정보 수집은 허용하면서, 사용자가 직접 삭제하거나 조작 가능한 로컬 쿠키에 익명 데이터를 저장하는 건 오히려 더 엄격하게 제한함. 항상 성가신 경고까지 붙이고 있음
          + EU는 이전부터 인터넷 감시를 꾸준히 추진했고, 이제야 정치 환경이 무르익은 것 같음. 이런 변명과 정당화 논리를 오랜 기간 유지한 걸 보면 수십 년 동안 조직적인 배후가 있었다고 예측함. 단순히 'EU가 무능하다'는 식으로 치부하는 건 순진하다고 봄
          + EU 논리는 '정부만 개인정보를 추적할 수 있다'는 것이고, 미국 논리는 '대기업만 개인정보를 추적해야 한다'는 것임. 개인적으로 정부가 추적하는 게 더 나음. 어차피 정부가 대기업에게서 데이터를 사갈 거고, 대기업은 요구사항 때문에 더 많은 돈을 벌 테니
          + EU는 실제로 고유 식별자 같은 정보가 포함되지 않은 완전 익명 쿠키는 허용함. ""익명화된 데이터""라 말하는 게 실제로는 그렇지 않은 경우가 많음
          + GDPR은 로컬 쿠키에 저장되는 익명화된 데이터를 규제하는 법이 아님
     * 내 나라(현재 국무총리가 EU의 총애를 받는 인물임)에서는 절대 해당 정책이 통과되지 않을 것임. 소수 여당 정부라 대통령과 국민 모두 반대하고 있음. 이번엔 통과 안 되고, 2년 후에 재논의될 걸로 봄. 근데 덴마크 사람들은 이런 일이 벌어지는데도 대규모 반대 시위가 없는 게 이해가 안 감
          + 이유는 돈을 따라가면 됨. 최근 급등하는 인터넷 검열 역시 AI 기업들이 신제품 팔려고 로비하면서 발생한 일임
     * ChatControl 이니셔티브의 실제 배후가 누군지 궁금함. 이름이 검은색으로 가려졌던 걸로 기억함
          + DSA를 강하게 추진한 사람은 매우 논란 많은 Thierry Breton임. Atos의 전 CEO, 유럽 내수시장 커미셔너, 지금은 Bank of America 자문위원임. Atos는 유럽 보안 인프라 구축의 최대 수혜 기업임. 하지만 실제론 기독교, 사회주의, 자유주의, 녹색당 등 폭넓은 EU 의회 지지로 통과됨. 투표 내역 참고
          + 덴마크와 스웨덴이 선두에 있음
          + 사람들은 스웨덴이 주도한다고 하지만, 실제론 NSA가 운영하는 Thorn이라는 자선단체가 2012년부터 로비해왔음
          + Thorn 공식 정보
     * ECJ(유럽사법재판소)가 ChatControl 같은 법안에 무효소송을 걸 가능성에 대해 궁금함. 만약 통과된다 하더라도, 정부 구조가 반대하건 말건 사적으로 영향받는 개인은 법안 무효를 재판소에 청구할 수 있음. 그래서 여전히 법정으로 끌고갈 수 있음
          + ECJ가 이전에 그런 결정을 내린 적이 있는지 궁금함
"
"https://news.hada.io/topic?id=22529","메타, Flo 앱에서 여성 건강 데이터 동의 없이 접근했다고 법원 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                메타, Flo 앱에서 여성 건강 데이터 동의 없이 접근했다고 법원 판결

     * 메타가 여성 생리 건강 추적 앱 Flo Health에서 사용자의 동의 없이 민감한 데이터를 수집한 것으로 법원에서 판결했음
     * Flo Health는 사용자의 생리 주기, 기분, 성생활 정보 등 매우 개인적인 데이터를 수집했으며, 2016년부터 2019년까지 Facebook, Google 등 여러 제3자에게 공유했음
     * Flo Health는 이용자에게 개인정보 보호와 데이터 비공유를 약속했지만, 실제로는 제3자가 해당 데이터를 다른 목적으로 자유롭게 사용할 수 있도록 했음
     * 이에 대해 미국 연방거래위원회(FTC)가 Flo Health를 상대로 진상조사 및 정책 개선을 명령했으며, Flo Health와 Google은 이미 합의했으나 Meta는 끝까지 합의하지 않았음
     * 최근 미국 내 낙태 권리 이슈와 맞물리며 여성 건강 데이터의 프라이버시 위험이 더욱 부각되고 있음


Meta가 Flo Health 앱 이용자 데이터를 무단 수집한 사건 개요

     * 미국 배심원단이 Meta가 여성 건강 추적 앱인 Flo Health를 통해 사용자의 민감한 생식 건강 정보를 동의 없이 수집한 사실을 인정한 판결임
     * Flo Health는 2015년 벨라루스에서 시작되어 여성 생리 및 건강 상태 등 매우 세밀하고 개인적인 데이터를 추적할 수 있도록 고안된 앱으로, 전 세계적으로 1억 5,000만 명 이상이 사용함

Flo Health 데이터 수집 및 공유 방식

     * Flo Health 이용자들은 생리 날짜, 기분 변화, 피임 방법, 성생활 만족도, 임신 계획 등 지극히 사적인 질의에 정기적으로 응답함
     * 앱은 이용자 입력 데이터를 외부에 공유하지 않고, 서비스 제공에 필요한 경우에만 일부 데이터만 관련 업체에 제공하겠다고 명시적으로 약속했음
     * 그러나 2016~2019년 사이 Flo Health는 이러한 개인 정보를 Facebook(현재 Meta), Google, AppsFlyer, Flurry 등에 폭넓게 제공했음
          + 앱 실행 시마다 접근 기록이 남고, 앱 내 모든 이용 행위가 기록되어 외부로 전송됨
          + 제3자는 해당 정보를 서비스 제공 목적 이외의 용도로도 활용 가능했음

Flo Health의 정책 및 신뢰 문제

     * Flo Health는 이용자에게 신뢰와 프라이버시 보호를 약속했으나, 실제로는 제3자에 대한 데이터 사용 제한이나 가이드라인이 전혀 없었음
     * 앱의 이용약관상, 외부 파트너가 Flo Health 이용자의 데이터 중 일부를 자유롭게 활용하도록 허용했음
     * 2020년 기준, Flo Health는 1억 5,000만 명의 사용자에게 “개인 데이터 보호를 최우선으로 한다”고 명시해 신뢰를 유도했음

법적 책임 및 FTC 조치

     * 실사용자 Erica Frasco는 2021년 Flo Health 및 연관 기업들(특히 Meta)을 상대로 집단 소송을 제기함
          + 프라이버시 침해, 계약 위반, 부정 축재, 의료 정보법 위반 등이 주요 쟁점임
          + 피해 보상 및 부당 이익 환수를 청구함
     * Flo Health와 Google은 이미 원고와 합의했으나, Meta는 마지막까지 합의하지 않고 소송전 임
     * 배심원단은 Meta가 전자 장치로 대화를 감청 또는 녹음했으며, 사용자 동의 없이 행동했다는 점을 인정함

사안의 사회적 배경과 시사점

     * 미국 연방거래위원회(FTC)는 Flo Health에 대해 정책 외부 감사 및 개인정보 오남용 금지 등의 시정 명령을 내림
     * 2022년 미국 연방대법원이 낙태권을 취소한 이후, 여성 건강 데이터의 프라이버시가 더욱 중요한 이슈로 부상함
     * Meta는 2022년 경찰 수사에 협조해 여성과 딸 둘 사이의 낙태 관련 메시지 데이터를 제공한 사실로 추가 논란이 됨
     * Propublica의 보도에 따르면, 온라인 약국도 구글 등과 민감한 정보를 공유해 법적 증거로 활용될 위험이 존재함

결론 및 보안 경각심

     * 많은 이용자들이 Flo Health를 신뢰했으나, 실제 데이터 처리 방식이 드러난 후 신뢰 상실 현상 심화됨
     * 이 사안은 단순히 앱 이용 자제에서 나아가, 개인 건강 데이터 전반의 프라이버시와 기술 신뢰성 문제를 환기함
     * 기술은 편리함을 제공하지만, 데이터 오남용 시 사용자에게 실질적 위험까지 야기함

        Hacker News 의견

     * 페이스북이라는 회사 자체를 좋아하지는 않지만, 이번 판결은 잘못된 결론이라고 생각함. 고소장 내용을 보면, “전자기기를 이용해 도청하거나 녹음했다”는 부분이 실제로는 “Flo가 Facebook SDK를 이용하여 커스텀 이벤트를 전송했다”는 의미였음. Flo가 이런 정보를 Facebook에 보낸 건 비난받아야 하지만, Facebook이 “고의적으로 도청했다”고 판결한 것은 전혀 말이 안 맞음. 내가 보기엔, Flo가 생리 데이터를 Facebook에 요청도 없이 자발적으로 보냈고, Facebook은 SDK를 이용해 민감 정보 송신을 금지하는 정책까지 갖고 있었음. Facebook을 고소하는 건, 마치 어떤 의사가 Google Drive에 환자 데이터를 저장했다고 Google을 고소하는 것과 똑같은 논리임
          + 관련 소송문서
          + Facebook SDK 정책 문서 6페이지 1번째 줄
          + [1] 기준으로 보면, 처음에는 피고가 Flo뿐이었기 때문에 Facebook에 대한 주장이 담기지 않은 것은 당연함. 그러나 수정된 소송장(3)에는 Facebook에 대한 새로운 피고 주장들이 포함됨. 수정 소송장에 따르면 Facebook이 해당 사실이 2019년에 공개된 뒤 2021년까지도 그 행동을 지속했고, Flo가 FTC에 의해 그만두게 된 후, 의회 조사도 시작된 다음에도 Facebook은 이미 잘못 수집한 데이터를 검토하거나 파기하지 않았다는 점이 문제로 지적됨. 또한 증거 개시 과정에서 Facebook이 어떤 데이터를 어느 정도 인식하고 있었는지에 대한 구체적인 증거가 더 나왔을 것이라 기대됨
          + 이건 이야기의 일부에 불과함. Facebook이 단순히 Flo가 보낸 데이터를 보관만 하거나 Flo를 위해서만 사용했다면 상황이 달랐을 것임. 문제는 Facebook이 이 의료 데이터를 광고 목적으로 활용했고, 합법적으로 사용할 수 있는지 스스로 확인하지도 않았다는 점임. 확인해야 할 의무가 있었음에도 불구하고 Facebook은 그 절차를 거치지 않았기 때문에 유죄 판결이 나온 것임
          + Flo가 Facebook에 그런 데이터를 보낸 건 분명 잘못임. 그래서 Flo는 소송에서 합의하게 됨. 그러나 Facebook은 이 정보를 받은 뒤 단순히 쌓아두거나 무시한 게 아니라, 본인들의 다른 신호들과 이 데이터를 섞어서 활용했음. 이 점이 Facebook에 대한 고소장에 핵심적으로 담겼음
          + 합법적인 데이터인지 확인할 책임이 있다고 생각함. 훔친 물건을 사지 않는 것처럼, Meta 역시 범죄자와 파트너십을 맺지 않도록 유의해야 함. Flo의 잘못이 가장 크지만, Meta 역시 충분한 주의를 기울였다는 걸 보여줄 필요가 있음. 단순히 이용약관만으로 책임을 피할 수 없고, 사용자가 해당 내용을 반드시 이해하도록 만드는 게 중요함
          + 이런 사건에서는 배심원 재판보다 판사 판결이 훨씬 더 좋음. SDK나 데이터 공유, API 같은 기술적 세부 내용을 일반 배심원이 제대로 이해하기 어렵기 때문임. 반면 높은 수준의 기술 소송에서는 판사가 적극적으로 엔지니어링 지식을 배우고 깊이 있게 논의하는 경우가 많음
     * 법정에서 Facebook과 대적할 때마다 떠오르는 이미지는, 조그만 쥐가 북극곰한테 덤비는 모습임. 아니면 고블린 대 드래곤, 파리 대 코끼리 같은 느낌임. 이런 대기업들은 거의 법의 통제를 받지 않는 괴물에 가까움. 이들이 실질적으로 스트레스를 받는 유일한 경우는 시장 점유율을 잃을 위기나 특정 지역에서 차단될 위험이 있을 때뿐임
          + 이런 얘기를 들으면 오해할 수도 있는데, 사실 이 대기업들은 법의 바깥이 아니라 그 내부임. 왜냐하면 이들은 자금력과 영향력으로 법의 경계 자체를 자기 입맛대로 조율할 수 있음. 법이 어떻게 적용되어야 한다는 외침이 아무리 커도, 이들이 비용을 감당할 수 있는 한 “합법”의 범위에 들어감
          + 나를 가장 우울하게 하는 점은, 내가 아는 거의 모든 사람들이 이런 프라이버시 문제에 대해 걱정하면서도 여전히 Meta의 계정을 유지한다는 점임. 자기 기준으로 아무 문제 없으니까 쓰는 건 괜찮음. 사람마다 실수하는 건 인지상정임. 그런데 본인 신념에는 엄격하면서 남을 평가할 땐 이상할 정도로 융통성이 없는 태도는 정말 이상함. 사람들을 좋아하지만, 가끔 참 이해하기 힘든 존재임
          + 결국 각 피해자당 3자리수 벌금만 부과해도 Facebook에 엄청난 압박이 갈 것임
          + 모든 사람들이 Facebook만 탓하는데, 입법자나 법원은 비난하지 않는 분위기임. 사실 이런 문제로 조 단위 이상의 벌금이 나와서 정부가 Facebook 사무실에서 서버, 의자, 프로젝터까지 몽땅 경매에 넘겨야 할 만큼 현금화해야 한다면, 다른 기업들도 빠르게 불법 행위를 멈추고 처신을 달리할 것임
     * 기사를 제대로 읽은 사람이 많지 않은 것 같음. 실제로 잘못한 건 Flo 앱임. 앱 개발자들이 사용자의 정보를 제한 없이 Meta로 보낸 것이 문제임. 판결이 뭐라고 하든, 진짜 잘못은 Flo임
          + Flo는 온라인 데이터베이스에 민감정보를 업로드해서 잘못임. Meta 역시 이런 개인정보 데이터베이스 인프라를 제공해서 잘못임. 둘 모두 도덕적으로 비난받는 일이었음
          + 정보를 Meta가 제한 없이 받아갔으니 Meta가 당연히 접근하게 됨. 데이터 활용 권한이 없다면, Meta가 먼저 명시적으로 허락받도록 요구하는 게 정상임. Meta가 사전 동의 없이 접속하는 현실이 문제임
     * 5년 전 iOS 앱 생태계를 조사하면서 무료 앱들의 잠재 수익 구조를 알아봤음. 어떤 개발자는 아동 건강 데이터를 추적하는 무료 앱을 출시했는데, 그 데이터 자체가 앱 가치라는 인식이 있었음. 앱의 미래 수익성도 결국 데이터 판매에 있다고 자신함. 이후 나는 내 개인정보, 특히 건강 데이터를 저장하는 앱은 절대 쓰지 않고, 가능한 모든 앱 권한을 비활성화해야겠다는 생각이 정립됐음
          + 도대체 왜 자기 개인정보나 건강 데이터를 이런 사이코패스 기업들에 넘기는지 이해가 되지 않음. 건강 데이터를 기록하는 앱이나 웨어러블 기기를 왜 써야 하는지, 그 배경이 불안함. 이런 기업들의 과거 행태를 생각하면, 모든 세부 정보를 기록해서 영원히 팔아먹고 저장할 것이라 가정해야 함
     * 결론은 앱을 쓰지 않는 게 답임. 95%의 경우 이들이 요구하는 프라이버시 침해를 감수할 만큼의 가치가 없음
          + Mozilla가 생리 기록 앱들을 비교 조사한 자료가 있음. 그중 몇몇 앱은 사용자 프라이버시를 지키려 노력함
               o Mozilla 생리 주기/배란 추적 앱 비교
          + 인터넷 연결이 진짜 필요한 소프트웨어라면, 개발자가 그 이유와 타당성을 먼저 입증해야 된다고 생각함
          + 잘 모르는 입장이지만, 단순히 위치 정보 같은 권한만 꺼도 이 문제를 해결할 수 있지 않을까 궁금함
          + 안타깝지만 이게 현실임
          + 맞는 얘기임. 사용자들은 “새로운 무료 기능!”이라는 마케팅에 항상 같은 방식으로 끌림. 그 결과, 침해적 비즈니스 모델이 반복적으로 먹히는 구조임
     * 여성분들에게 추천할 만한 앱으로 Drip이 있음.
          + Drip 공식 사이트
          + 보안성이 가장 높아 보임
          + 사실 이런 건 나 혼자 호스팅해서 직접 관리하는 게 제일 낫다고 생각함. 누구에게도 맡기고 싶지 않은 데이터임. 참고로 나는 남성과 성관계를 하지 않지만 그래도 신경쓰임
     * 내 아내가 Flo를 사용함. 앱을 열어 정보를 입력할 때마다, 기술적인 관점에서는 이게 굉장히 위험하다고 느낌. 이런 앱이 정말 민감한 정보를 다루기 때문에, 비기술적 일반인들에게 정보 보안의 중요성을 더욱더 알려야 한다는 필요성을 절감함
     * 그래서 내가 휴대폰에 아예 앱을 거의 안 깔거나 최소한만 쓰는 정책을 지키게 됨. 물론 웹사이트나 웹앱 역시 유사하게 정보를 공유할 수는 있겠지만, 기본적으로 시스템 접근 권한을 줄이는 데서 오는 심리적 안정감이 있음. 개인적으로 LinkedIn이 그간 보여준 여러 행태를 보면, 아직도 앱스토어에서 살아남아 있다는 게 신기함
     * 프라이버시 관련 뉴스에서 Meta가 연루되어 있지 않은 경우를 찾기 힘듦
          + Google, Microsoft, Amazon 모두 이런 상황을 반긴다고 생각함
     * 결국 부사장(VP)급 임직원이 감옥에 가는 상황이 와야 뭔가 바뀔 것임. 물론 현실적으로 가능성이 거의 없기는 함
"
"https://news.hada.io/topic?id=22616","T-Mobile이 동의 없이 위치 데이터를 판매하는 것이 합법이라고 주장했으나 판사들은 동의하지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        T-Mobile이 동의 없이 위치 데이터를 판매하는 것이 합법이라고 주장했으나 판사들은 동의하지 않음

     * T-Mobile은 이용자 동의 없이 위치 데이터 판매가 합법임을 주장했으나, 법원은 이를 인정하지 않음
     * AT&T와 Verizon도 비슷한 주장을 하면서 Securities and Exchange Commission v. Jarkesy 판례를 인용함
     * 법원은 해당 통신사들이 벌금을 자발적으로 납부하고 직접 소송을 제기함으로써 배심원 재판의 권리를 포기한 것임을 판시함
     * 통신사들은 배심원 재판의 권리 자체가 없었다고 주장하였으나, 법원은 이 점을 받아들이지 않음
     * 판사들은 가상적 상황이나 가정에 근거한 법률 무효화는 불가능함을 명확히 밝힘


  # 사건 개요

     * T-Mobile은 이용자의 사전 동의 없이 위치 데이터를 판매하는 행위가 합법이라고 주장하였음
     * 이에 대해 법원 판사들은 합법이 아니라는 판단을 내림

  # 통신사들의 주장 및 법원 반응

     * AT&T와 Verizon은 배심원 재판을 받을 권리를 주장하며 2024년 6월의 Securities and Exchange Commission v. Jarkesy 판례를 인용하였음
     * 그러나 법원은 통신사들이 벌금을 납부하고 직접 법원에 항소하는 방식을 선택함으로써 스스로 배심원 재판의 권리를 포기한 것으로 봄
     * 만약 통신사들이 벌금을 내지 않고 정부가 소송을 제기할 때까지 기다렸다면, 배심원 재판을 받을 기회가 있었을 것이라고 언급함

  # 추가 쟁점 및 판결 설명

     * 통신사들은 FCC 명령이 사실상 최종적이며 실제 영향을 미친다고 주장하며, 정부가 징수 소송을 제기한 일부 관할구역에서는 자신들에게 판결에 이의를 제기할 권리가 없다고 강조함
     * 이에 대해 항소법원은 해당 상황이 현실화되지 않은 가상적 사례라며, 구체적인 상황이 아니므로 이에 근거해 법률을 무효화할 수 없다고 명시함

  # 결론

     * 이번 판결을 통해 이용자 위치 데이터의 판매 및 관련 법적 책임에 대해 주요 통신사들의 해석이 법원에서 받아들여지지 않았음
     * 배심원 재판 권리 관련 쟁점 역시 벌금 납부와 직접 소송 선택에 따라 권리를 포기한 것으로 해석함

        Hacker News 의견

     * 미국 주요 이동통신사별 opt-out(동의 철회) 방법임
          + ATT: https://www.att.com/consent/ccpa/dnsatt에서 신청 가능함
          + T-Mobile: Privacy Center에서 프라이버시 대시보드 접근해서 각 라인/계정별 설정 변경 가능함
               o 프로파일링 및 자동화된 결정(기본값은 ON)
               o 사기 및 신원 도용 방지(계정, 용량 정보 공유)
               o 특정 금융 정보 공유(결제 이력 등)
               o 광고/분석/보고 및 “내 개인정보 판매 또는 공유 금지”
          + Verizon: MyVerizon 계정에서 Account > Account Settings > Privacy Settings로 이동하거나 앱에서 기어 아이콘 클릭 후 관리
               o Custom Experience, Custom Experience Plus, Business & Marketing Insights, CPNI, 신원 인증 등 항목마다 “Don’t use” 또는 토글 꺼서 opt-out 선택 가능함
          + T-Mobile 프라이버시 설정을 직접 확인해보니 대부분은 꺼 두었는데 일부는 아직 켜져 있었음(예: 마케팅 동의 거부 설정)
               o 모든 항목을 opt-out하려면 두 번 이상 시도해야 모두 비활성화됨
               o 최근에 등장한 “프로파일링 및 자동화된 결정” 항목이 특히 신경 쓰임
               o 향후 법적으로 의미 있는 결정에 프로파일링 사용을 opt-out할 수 있는데, 현재는 사용하지 않지만 나중을 대비해서도 꺼두라고 안내함
          + MVNO(알뜰폰 통신사)에서도 이런 opt-out이 가능한지 궁금함
          + 나의 경우 Google Fi를 쓰는데, Google Fi가 T-Mobile 망을 이용하는 MVNO임
               o Google Fi가 위치 데이터를 판매한다고 생각하지는 않지만, 네트워크는 T-Mobile이니 T-Mobile에서 데이터에 접근할 수도 있음
               o 하지만 T-Mobile 계정이 없어서 opt-out 방법도 알 수 없음
               o Google Fi나 MVNO 전체의 위치 정보 판매 실태를 아는 사람이 있는지 궁금함
          + 이런 설정이 실제로 효과가 있는지에 대해 회의적임
          + 안내 고마움
               o T-Mobile 대시보드에서 예전에 다 꺼두었다고 생각했지만 “내 개인정보 판매” 등 5개 정도 항목이 여전히 켜져 있음을 확인함
     * 지난 달 T-Mobile US 폰으로 대륙 횡단 운전을 직접 해보면서 내가 이동할 때마다 전화를 건 스팸 발신 지역번호가 실시간으로 날 따라오고 있음을 충격적으로 경험함
          + privacy settings 대시보드에서 opt-out 할 수 있는 모든 설정을 예전에 다 꺼뒀다고 생각했지만, 최근 다시 확인해보니 절반 이상이 기본적으로 켜져 있었음
          + 새로 등장하는 항목들이 기본값으로 활성화된 채로 추가되니 꾸준히 확인해야 하는 현실이 불만임
          + 나 역시 최근 장거리 운전을 했는데 스팸 전화가 내가 위치한 지역번호로 정확히 걸려와서 소름끼쳤음
          + 이런 데이터 거래의 경제적 구조가 궁금함
               o 위치 데이터를 하루에도 수 차례 대량으로 수집하는 것 같은데 수요도 없을 텐데 이렇게 값이 싼지, 통신사에는 어떤 경제적 이점이 있는지 의문임
          + 나는 팬데믹 때 LA번호를 SF Bay Area에서 계속 사용하며 Mint Mobile로 옮겼음
               o 5년 동안은 현지 지역번호 스팸 전화를 거의 안 받을 만큼 확연한 차이를 느낌
               o 가끔 오는 전화도 대화 주제나 계기로 보면 나의 실생활 현지 비즈니스 경험 탓
               o Mint MVNO(=T-Mobile 망) 프라이버시가 더 나은 건지, 아니면 특정 앱이 실제 사용자의 위치와 번호를 연동해서 정보를 노출시키는지 아직 판단하기 어려움
          + 대부분의 내 스팸 전화는 내 휴대폰 번호와 동일한 지역번호에서 옴
          + T-Mobile 쓸 때는 스팸 전화가 거의 없었는데 최근에 다른 통신사로 옮기자마자 스팸 지옥임
               o T-Mobile과 ATT 모두 무료로 90% 가까이 스팸을 막아주는 opt-in 기능이 있음
               o Consumer Cellular는 이런 기능이 없어서 다시 큰 통신사로 돌아갈 생각이 들 정도임
     * 미국 대법원이 FCC가 불법이고 오히려 통신사에게 돈을 줘야 한다고 판결하는 날을 기대함
          + 연방대법원은 DC Circuit를 Ninth Circuit만큼이나 싫어함
               o 이 판결은 시작도 하기 전에 결과가 정해진 셈임
     * 기사 내용 중 “통신사들은 구매자가 고객 동의를 받았는지 검증하지 않았다”는 판결에 대해 궁금증이 있음
          + 동의 체계 자체가 형식적으로 느껴진다고 생각함
          + 내 위치 데이터를 구매하는 사람이 내 동의를 얻는 과정이 어떻게 이루어질 수 있는지 의문이며, 실제로는 판매자인 통신사가 동의를 받아야 할 책임임
     * 이런 위치 정보 차단에 확실한 방법이 있는지, 그리고 다른 통신사 상황은 어떤지 궁금함
          + 앱의 위치 정보 접근 차단만으론 충분하지 않고, 통신사 차원의 추적은 훨씬 무섭고 위험하다고 느낌
          + 기사에서는 ATT와 Verizon도 이런 추적을 하는 것으로 보임
          + 통신사 opt-out 외에도, “비행기 모드 켜고 WiFi만 사용” 또는 “파라데이(전자파 차단) 가방에 폰을 넣고 이동” 등 실제구현물리적 차단법도 존재함
          + 통신사 추적은 GPS만큼 정확하지 않음
               o 위치는 보통 1마일(1.6km) 이상 차이가 날 수 있음
               o 과거 은행에서 카드를 다른 지역에서 쓸 때 휴대폰도 동일 도시 내에 있으면 정상거래로 간주하는 용도로 썼음
               o 최근에는 앱 silent push로 IP나 위치 정보를 직접 받는 방식으로 전환됨
               o 통신사 위치 데이터도 구매 비용이 만만치 않음
          + 오래전부터 메인폰을 인터넷을 통해 원격제어할 수 있는 Remote Desktop 같은 기능을 원해왔음
               o 원래 번호로 걸려오는 전화를 인터넷 터널링을 통해 다른 disposable 폰에서 수신
               o 주 번호의 위치는 한 곳에 고정되어 있게 하는 개념임
          + 실질적 차단 방법: 밖에 나가서 폰을 두 동강 내서 쓰레기통에 버리고 떠나는 수밖에 없음
     * 미국 이동통신 시장의 소수 독점(올리고폴리)을 깨려면 무엇이 필요한지 궁금함
          + 이러한 행태가 지속되어도 책임은 거의 없을 것 같음
          + FCC가 무선 주파수 접근 자체를 제한해서 소규모 진입자들이 진입할 수 없게 함
          + MVNO도 결국 빅3 네트워크 망을 써서 사업하는 구조임
          + 이런 통신 인프라는 “natural monopoly(자연적 독점)”의 대표 사례임
               o 타워 인프라와 소비자 서비스 사업자를 분리하고, 실질적인 프라이버시 보호가 필요함
          + 현재 미국 대통령이 왕권급 권한을 쥐고 있으니, 새로운 정치적 재편성이나 시장 구조 개편 혹은 스펙트럼 할당의 변화가 필요함
               o 시장만으로는 휴대폰사들을 분할할 힘이 없고, 정부가 직접 개입해야 함
          + EchoStar/DISH 산하 Boost Mobile이 네 번째 캐리어임
               o T-Mobile과 Sprint 합병 당시 Ajit Pai가 Sprint에서 분리시켜 만들었고, 현재 미국 인구 70%까지 커버 가능하다고 주장함
               o EchoStar/DISH가 많은 부채를 지고 있고, Boost 역시 실제로는 상당수 고객을 AT&T 네트워크로 연결해주고 있는 상황임
          + 신규 플레이어가 진입하려면 아주 막대한 자본이 필요함
               o 상당 부분이 스펙트럼 할당받은 기존 사업자의 로비 및 정치자금에 소송비로 소모됨
          + 만약 데이터 유출 탓에 사람들이 강제 수용소 같은 곳에 가게 되는 “oh shit” 충격 사례가 나와야 각성이 가능함
               o FCC가 원래 공익적 전기/가스 같은 유틸리티처럼 계속 진화하려는 의도도 있다고 알고 있음
               o 나는 실제 GDPR이 적용되는 유럽에서 이 글을 쓰고 있으며, EU에서는 이런 행태에 대해 과징금도 상당히 강해서 “살짝 때리는 수준”이 아님
               o 그 점 빼면 통신 시장 구조는 미국과 크게 다르지 않음
     * 이미 대부분 국가에서는 휴대폰 위치 정보 판매가 불법임을 명심할 필요가 있음
          + 이것은 언제 어디에서 버스를 탔고 내렸는지 파는 것과 다름없음
"
"https://news.hada.io/topic?id=22492","Bash와 Zsh에서 간단한 탭 자동완성 작성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Bash와 Zsh에서 간단한 탭 자동완성 작성하기

     * Bash와 Zsh에서 이미 완성된 단어에도 설명을 표시하는 탭 자동완성 기능을 구현하는 방법 소개
     * Bash와 Zsh는 서로 다른 탭 자동완성 API를 사용하며, Zsh만 기본적으로 자동 완성에 설명 보이기 기능을 제공함
     * _generate_foo_completions로 후보를 생성하고, Bash에서는 COMPREPLY, Zsh에서는 compadd로 반환하는 구조를 구현함
     * Zsh의 설명 기능을 Bash에도 구현하기 위해 후보 문자열에 설명을 포함하고, 단일 후보일 때만 설명을 제거하는 방식으로 처리함
     * 단일 후보일 경우에도 의도적으로 모호성을 추가해 <TAB> 입력 시 설명이 표시되도록 개선함
     * 최종 스크립트는 두 쉘에서 동일한 사용자 경험을 제공하며, 부분 완성·전체 완성·후보 설명 표시 모두 지원함


문제 배경

     * 탭 자동완성(tab-completion) 은 명령어나 플래그를 탐색할 때 유용하며, 특히 API나 CLI 도구를 처음 접할 때 도움을 줌
     * Zsh는 기본적으로 여러 후보가 있을 때만 설명을 표시하고, Bash는 별도 설정을 통해서만 가능함
     * 하지만 이미 완성된 단어에 대해서는 두 셸 모두 설명을 표시하지 않음
     * 이로 인해 사용자가 설명을 보려면 다음과 같은 번거로운 과정을 거쳐야 함
          + 일부 문자를 삭제하여 여러 후보가 매칭되도록 함
          + <TAB> 키를 눌러 후보 목록을 확인
          + 원하는 설명을 시각적으로 찾음
          + 삭제한 문자를 다시 입력하여 명령 실행

해결 방법 개요

     * 단일 후보일 경우에도 더미 후보(dummy completion) 를 추가하여 후보를 모호하게 만듦
     * 이렇게 하면 Bash와 Zsh 모두 후보 목록과 함께 설명을 출력하게 됨
     * 단, 실제 명령어에 설명 텍스트가 삽입되지 않도록 주의해야 함

기본 개념

     * 탭 자동완성은 <TAB> 입력 시 현재 단어와 커서 위치를 받아, 가능한 후보 목록을 반환하는 방식으로 동작함
     * Bash: COMPREPLY 배열에 후보를 할당
     * Zsh: compadd 명령으로 후보를 등록
     * _generate_foo_completions 함수는 후보 문자열을 출력하며, 실전에서는 CLI의 상태를 기반으로 동적 생성 가능

Bash와 Zsh 동시 지원하기

     * _complete_foo_bash와 _complete_foo_zsh 함수로 각각의 쉘에 맞게 구현
     * if [ -n ""${ZSH_VERSION:-}"" ]; then ... elif [ -n ""${BASH_VERSION:-}"" ]; then ... fi로 구분
     * 사용자는 스크립트를 .bashrc나 .zshrc에 등록 후 적용

Zsh에서의 설명 표시

     * 후보 문자열에 이름: 설명 형식 사용
     * Zsh: compadd -d raw -- $trimmed로 이름과 설명을 병렬 배열로 전달
     * Bash: 설명 부분을 제거한 후보만 COMPREPLY에 전달 (기본적으로 설명 미지원)

Bash에서 설명 구현하기

     * 여러 후보일 경우 설명이 포함된 문자열을 그대로 노출
     * 단일 후보일 경우에만 설명 제거
     * Bash의 자동완성이 공통 접두어만 삽입하는 동작을 이용해 설명이 실제 입력에는 포함되지 않도록 함

단일 후보에서도 설명 표시

     * 완성된 단어에 <TAB> 입력 시에도 설명을 보여주기 위해 더미 후보를 추가해 모호성을 유도
     * Zsh: 두 개의 병렬 배열(raw, trimmed) 모두에 더미 후보 추가
     * Bash: 단일 후보일 경우 trimmed에 이름만 추가

최종 결과

     * 다중 후보 시 이름+설명 모두 표시
     * 단일 후보 시에도 <TAB>로 설명 확인 가능
     * Bash와 Zsh 모두 동일한 경험 제공
     * 적용 예:
$ foo <TAB>
apple: a common fruit banana: starchy and high in potassium
apricot: sour fruit... cherry: small and sweet...

        Hacker News 의견

     * fish에서 관심 있는 프로그램이 man 페이지를 제공한다면 fish_update_completions만 실행하면 됨
          + 이 명령은 시스템의 모든 man 페이지를 파싱해 자동 완성 파일을 ~/.cache/fish/generated_completions/에 생성함
          + man 페이지가 부실하거나 없으면 직접 작성해 upstream에 기여할 수 있음
          + fish의 포맷은 단순해서 공식 문서만 보면 충분함
          + 예: curl의 -L → 'Follow redirects', -O → 'Write output to file named as remote file'
          + 화면 공유할 때 사람들이 내가 zsh와 플러그인들을 쓰는 줄 아는데, 사실은 기본 설정만으로도 예쁜 fish를 쓰고 있음
          + 하지만 car TAB이 blkdiscard로 확장되는 비접두사 자동 완성 때문에 cargo가 PATH에 없어도 오작동하는 점은 개선되면 좋겠음
          + man 페이지 없이 --help만 제공하는 프로그램의 경우, fish에 zsh의 _gnu_generic이나 bash의 complete -F _longopt 같은 기능이 있는지 궁금함
          + zsh에서도 man 페이지 기반 자동 완성을 생성하는 스크립트가 있음 → zsh-manpage-completion-generator
          + OpenSUSE에서 zypper search fish-completion을 치면 200개가 넘는 패키지가 나와서 뭔가 수상하다고 느꼈음
     * bash 자동 완성이 점점 “똑똑해지면서” 현재 커서 위치에 파일명이 적절치 않다고 판단하면 파일/디렉토리 완성을 막는 점이 불편함
          + 차라리 항상 파일명 완성으로 fallback하는 게 낫다고 생각함
          + 이 때문에 완성 스크립트를 다 꺼버릴까 고민한 적도 있음
          + bash에는 M-/에 바인딩된 complete-filename처럼 문맥 무시하고 파일명만 완성하는 함수들이 있음
          + 특정 명령어의 파일 완성이 완전히 깨져서, ls로 먼저 완성한 뒤 명령어를 바꾸는 식으로 우회함
          + 파일명이 존재하지만 실행 불가할 때는 “file foo.exe exists but it isn't executable” 같은 메시지를 주는 게 혼란이 덜함
          + complete -r 실행 후 원하는 대로 동작하는 걸 보면 bash-completion 스크립트에 문제가 있는 듯함
          + 웹 폼에서 이메일 입력 시, 첫 글자만 쳐도 “Invalid email!” 오류를 띄우는 프론트엔드 검증처럼 답답한 UX와 비슷함
     * 내가 작성한 글인데, 다른 사람들도 흥미롭게 읽었으면 함
          + zsh 완성 스크립트를 매번 로드하는 대신 $fpath에 설치하면 캐시되어 시작 속도가 빨라짐
          + Homebrew 배포 시 자동으로 completions를 설치할 수 있음
          + zsh 완성은 규모가 커서 익히기 어렵지만, 회사에서 ansible 래퍼 스크립트에 플레이북별 옵션, 태그 자동 완성 등을 추가하며 점점 다듬고 있음
     * 최근 CLI 개발에 usage 라이브러리를 쓰기 시작했음 → clap과 통합되고, completions·argparse·man 페이지 생성 가능
          + fish 스크립트의 argparse 블록을 교체할 가치는 고민 중이지만, optparse보다는 훨씬 나음
          + 나도 비슷한 CLI 사양 정의 도구를 만들고 있는데, fish 지원을 막 추가했음
     * bash/zsh에서 JSON 필드 자동 완성을 지원하는 fx.wtf를 소개함
          + ijq보다 가볍지만, 상황에 따라 유용할 수 있음
     * zsh 내장 함수로 completer를 만드는 튜토리얼 → zsh-completions-howto
     * 프로그램이 bash 스크립트를 작성하지 않아도 되게 하는 표준 플래그가 있는지 궁금함
          + zsh에서는 _gnu_generic으로 --help 기반 간단 완성이 가능함
          + Rust의 clap_complete, ripgrep의 --generate 옵션, PHP Symfony의 런타임 완성 생성 등 사례가 있음
          + 공통 파서 라이브러리들이 자동으로 구현해주는 --completion 표준이 있으면 좋겠음
     * ksh에서는 배열 정의만으로 간단히 완성을 구현할 수 있음
          + 예: complete_kill_1 배열에 시그널 이름을 넣으면 kill 명령 첫 인자 완성 제공
          + 이게 ksh93 문법인지, oksh에 백포트된 건지 궁금함
     * 내가 만든 간단한 zsh 완성 스니펫 예시: set-java-home 함수에서 ~/apps/java/* 목록을 버전으로 완성하도록 _describe 사용
          + 거의 원라인에 가까운 간단한 구조임
     * LLM의 주된 기능이 자동 텍스트 완성이라 그런지, GitHub Copilot이 vscode 터미널에서 bash와 zsh 완성을 꽤 잘해줌
"
"https://news.hada.io/topic?id=22611","Pueue - 커맨드 라인 명령어를 큐로 처리해주는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Pueue - 커맨드 라인 명령어를 큐로 처리해주는 도구

     * 긴 실행 시간 걸리는 작업을 순차적 또는 병렬로 실행할 수 있는 명령줄 기반 태스크 관리 도구
     * 단일 터미널에 묶이지 않고, 백그라운드 데몬(pueued) 을 통해 SSH 세션이 종료되어도 계속 실행됨
     * 스케줄링, 태스크 그룹 관리, 프로세스 제어, 크래시 복구 등 다양한 기능을 제공
          + 스케줄링: 태스크 추가, 여러개의 태스크 동시 실행(동시 실행 개수 지정), 실행 순서 변경, 종속성 설정, 특정 시간 예약 실행 지원
          + 프로세스와 상호작용: 쉬운 출력 검사, 실행 중인 작업에 입력 전송하기, 프로세스 일시정지/재개 가능
          + 태스크 그룹 관리: 여러개 큐를 생성해 병렬 실행, 그룹 단위의 일시정지 및 재개 가능
          + 백그라운드 실행: pueued 데몬이 로그인 여부와 관계없이 실행 유지, 환경 변수와 작업 디렉토리 보존
          + 안정성 보장: 큐와 로그는 디스크에 저장되어 시스템 크래시 후에도 복구 가능
          + 기타 기능: log와 status의 JSON 출력, 알림을 위한 콜백 훅, 특정 작업 대기(wait)
     * Linux, MacOS, Windows를 지원하며, Rust 기반으로 설치 및 사용이 간단
     * 복잡한 분산형 스케줄러가 아닌, 단일 사용자 환경에서 직관적 태스크 관리에 초점을 둔 도구
     * 사용법
          + pueue add '명령어' : 새 태스크를 큐에 추가
          + pueue status : 현재 태스크 상태 확인
          + pueue log / pueue follow : 완료된 태스크 로그 조회 또는 실시간 출력 확인
          + pueue pause, pueue start, pueue kill : 실행 제어
          + pueue group : 그룹 추가/삭제/조회
          + pueue wait : 특정 태스크, 그룹, 전체가 끝날 때까지 대기
          + pueue reset : 모든 작업 중단 및 초기화

   Pueue - 커맨드라인 태스크 관리 도구

   4년 전에 한번 올렸었는데, 그때는 버전이 0.11 였고요. 지금은 4.0 이 되어서 메이저 버전만 4번 릴리즈 되었습니다.
     * v1.0은 안정성 확보
     * v2.0은 CLI/설정 체계를 재설계
     * v3.0은 프로세스 그룹 관리 기능 도입 및 쿼리 기능/필터 기능 개선. 맥 지원 강화
     * v4.0은 구조 전면 개편과 편집 UX 혁신(기존 버전과 비호환). 윈도우에서도 서비스 데몬 지원

   이름의 의미가 뭘까요? 슈도 큐?

   Process queue 인 것 같아요

   아. 그쪽이 더 그럴듯합니다.
"
"https://news.hada.io/topic?id=22592","미래 창업자를 위한 스타트업 아이디어 찾기 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     미래 창업자를 위한 스타트업 아이디어 찾기 프레임워크

     * 스타트업 아이디어는 흔히 ‘번뜩임’에서 시작된다고 묘사되지만, 실제로는 수많은 인터뷰와 시행착오에서 나온 결과임
     * 창업을 준비하는 사람은 문제 선정과 시장 규모에 대한 철저한 검증부터 시작해야 함
     * 아이디어 탐색 과정에서는 비자명한 시장, 제약 완화된 사고, 구체적 사용자 문제 같은 틀을 활용하는 것이 효과적
     * 또 다른 핵심은 공동 창업자와 함께하는 프로젝트 실험, JTBD(사용자 과업 중심) 프레임워크, 집요한 피드백 수집
     * 이 글은 창업을 준비하는 이들에게 아이디어 발굴을 단순한 영감이 아닌 체계적 탐색 과정으로 접근할 수 있게 도와줌


스타트업 아이디어를 찾는 12가지 프레임워크

     * 1. 큰 시장에서 문제를 선택하기
          + 똑같이 열심히 일해도 작은 시장에서는 성과가 제한적임
          + 큰 시장에서 중요한 문제를 풀어야 성공 가능성이 높음
     * 2. 현장에서 관찰하며 문제 발굴하기
          + 사용자의 일상이나 작업 환경에 직접 들어가 불편·비효율을 체감
          + 책상 앞 아이디어가 아니라 현장에서 드러나는 실제 문제를 포착하는 방식
     * 3. 세 가지 질문으로 브레인스토밍하기
          + 세상의 큰 문제는 무엇인가?
          + 내가 가진 독특한 기술·경험·관점은 무엇인가?
          + 이 두 가지를 어떻게 비즈니스 기회로 연결할 수 있는가?
     * 4. 비자명한 시장 찾기
          + 겉보기에 당연하거나 평범해 보여서 사람들이 간과하는 시장
          + 새로운 기술이 퍼지는 초창기 시장이나, 경쟁은 많지만 차별화가 없는 분야, 혹은 작아 보이지만 성장 여지가 큰 틈새시장이 여기에 해당
     * 5. 제약 완화된 사고
          + 현재 기술이나 규제 때문에 불가능해 보이는 문제도, 미래에는 제약이 사라질 것을 가정하고 사고 확장
          + “만약 이 제약이 없다면 어떤 제품이나 서비스가 가능할까?”라는 질문에서 혁신이 나옴
     * 6. 2주간의 공동 창업자 실험
          + 실제 프로젝트를 2주 정도 함께 진행하며 아이디어 실행력과 팀워크를 동시에 검증
          + 소비자 대상이면 프로토타입, 기업 대상이면 고객 인터뷰 위주로 빠르게 시험
     * 7. 아이디어 숙성하기
          + 급히 떠올린 아이디어보다는 오랜 기간 여러 상황에서 계속 떠오르고 마음에 남는 문제가 기회가 될 확률이 높음
          + 아이디어를 ‘약불로 오래 끓인다’는 느낌으로 꾸준히 고민
     * 8. JTBD (Jobs To Be Done) 프레임워크 활용
          + 사용자가 실제로 무슨 일을 달성하려 하는지(과업) 를 정의
          + 기존 솔루션이 충족하지 못하는 핵심 니즈와 불만족 지점을 찾아내는 방식
     * 9. 명확한 비전과 시점 정의하기
          + “무엇을 언제 어떻게 할 것인가”를 구체적으로 그려야 실행 가능
          + 흐릿한 방향성보다, 선택과 집중이 가능한 구체적 로드맵이 필요
     * 10. 네 가지 검증 기준 적용하기
       아이디어가 충족해야 할 조건을 네 가지로 점검
       1. 기능적 필요가 있는가?
       2. 감정적 만족을 주는가?
       3. 10억 달러 이상 시장 규모가 있는가?
       4. 기존보다 혁신적 사용자 경험을 제공하는가?
     * 11. 피드백 루프 가속화하기
          + 연구만 하지 말고 곧바로 피칭 → 피드백 → 개선 사이클을 돌려야 함
          + 대부분의 반응은 잡음이지만, 그 안의 소수의 인사이트가 방향을 정해줌
     * 12. 열정 지속성 검증하기
          + 스타트업은 장기전이므로, 창업자가 3년, 5년, 7년 후에도 계속 흥미를 느낄 수 있는 문제여야 함
          + 단기적 트렌드가 아니라 창업자의 지속적 몰입이 가능한 분야인지 확인

   창업을 하며 피봇을 여러번 해본 경험으로.. 저는 12번 항목이 상당이 중요하게 느껴질 때가 많았습니다.

   어차피 스타트업이란게 어떤 시장에서, 어떤 제품을 가지고 하더라도 극한의 생존률 속에서 창업자가 느끼는 고통의 양은 유사하다고 생각됩니다(고통은 다른 사람들과 상대적이지 않기 때문에).

   결국, 창업자가 그런 상황 속임에도 '지속 가능한' 상태를 유지하는게 중요한데 아무리 좋은 시장에서 돈이 잘되는 제품이어도 12번이 성립이 안되면 '몸'을 갈아넣든, '정신'을 갈아넣든 둘 중에 하나로 귀결되더군요.

   그런 의미에서 대부분의 스타트업 아이디어 발굴 프레임워크가 위와 같은 형태로 유사하지만 저는 '내 심장이 뛰는가?'라는 조금은 추상적인 질문을 1~3번 시점에 항상 스스로에게 던졌던것 같습니다.
   12. 번 후에 성장을 위해 린 캔버스 저자 애쉬 모리아는 그의 저서 스케일링 린에서 견인력이 중요하다고 설명합니다.
       대부분의 스타트업이 3년을 못 넘기는 이유도 스스로 확장하지 못하기 때문입니다.
"
"https://news.hada.io/topic?id=22605","예언 앱 입니다!","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               예언 앱 입니다!

   취미로 웹 만드는 비전공자 대학생 입니다.

   하루,이주,이달,올해 예언 웹앱 이구용 재미로 만들어봤어요

   어.. show gn에 올리시는게 .. 조..좋아보입니다
"
"https://news.hada.io/topic?id=22547","PureGym의 비공식 Apple Wallet 개발자가 된 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  PureGym의 비공식 Apple Wallet 개발자가 된 이야기

     * PureGym 앱의 느린 사용성과 복잡한 입장 과정의 불편함을 해결하기 위해, 개인적으로 Apple Wallet으로 최적화함
     * 기존 QR 코드는 매번 앱을 열고 정보를 불러와야 하며, 약 47초가 걸리는 비효율적 진입 방식임
     * 다양한 리버스 엔지니어링, mitmproxy 사용, PassKit 프레임워크 등 기술적 과정을 통해 자동 갱신 가능한 Wallet 패스를 구현함
     * 이 과정에서 PIN 코드의 보안 허점, API 인증 구조, 지점 위치 정보 등 웹상에서 드러난 PureGym의 내부 동작을 확인함
     * 최종적으로 3초 만에 입장하는 사용자 경험을 만들어냈으며, 개인적인 실험으로 끝내고 공식 서비스가 아님을 명확히 함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

47초: 불편함의 시작

     * 평일 오전 11:15, PureGym 입구에서 앱을 여는 데 47초가 소요됨
     * 신호가 약하고, Wi-Fi 접속과 앱 실행, 각종 푸쉬 알림, 특별 할인 제안 등을 넘겨야 QR 코드가 나타남
     * 실제 QR 코드가 뜨기까지 오래 걸리고, 다른 회원의 눈치를 보게 됨
     * 주 6회 반복 시 매주 282초가 소모되는 비효율적 경험임
     * Amazon Fresh와 같은 무비접 경험과 비교해 PureGym의 진입 UX는 매우 뒤떨어짐

8년 된 PIN의 미스터리

     * 필자는 8자리 PIN 코드를 8년째 동일하게 사용함
     * 이 PIN은 만료되지도 변경되지도 않음
     * 반면 앱 내 QR 코드는 1분마다 새로운 값으로 교체됨
     * 실질적 보안 수준과 실제 구현 간에 큰 모순이 존재함
     * PIN 방식은 극단적으로 오래 유지되면서 QR 코드만 엄격하게 보호되는 ""보안 쇼"" 현상임

mitmproxy로 PureGym 이해하기

     * 처음에는 QR 코드 스크린샷을 Apple Wallet에 넣어 사용하려 했으나 즉시 작동하지 않음
     * PureGym의 QR 코드는 동적으로 생성, 대략 1주 만에 만료되지만 앱에서는 1분마다 갱신함
     * GitHub에서 ""PureGym"" 관련 레포를 검색해 API 인증 구조를 발견함
          + 로그인용 8자리 PIN이 API 패스워드와 동일하게 사용됨
          + Base64로 인코딩된 기본 인증 정보도 보안성이 떨어짐
     * 앱 트래픽을 분석하기 위해 mitmproxy 등 프록시 도구로 요청을 가로챔
          + QR 코드의 JSON 구조는 part1(고정 id), part2(타임스탬프), part3(갱신용 salt)로 이루어짐
          + API에서 갱신 타이밍, 만료 조건까지 모두 안내함

PassKit: Apple Wallet의 잠재력

     * Apple Wallet 패스는 정적 카드가 아닌, 자체 갱신·푸쉬 알림·위치 반응 등이 가능한 미니 앱 구조
     * PassKit 구현에는 JSON 명세, 이미지 리소스, 인증서 서명, 실시간 갱신용 웹서비스 등이 필요함
     * Apple의 개발자 포탈에서 Pass Type ID 및 WWDR 인증서 발급이 요구됨
     * 인증서 서명과 관리가 까다롭지만, 성공하면 실제 기기에서 매끄러운 경험이 가능함

  Swift 백엔드 구축

     * 일반적으로 Node.js를 쓰지만, 필자는 Swift 기반 Vapor로 직접 PassKit 웹서비스 구현
          + 패스 갱신 필요시, 사일런트 푸쉬로 자동 업데이트 제공
          + 사용자가 인식하지 못하는 자연스러운 패스 갱신 실현

  전국 PureGym 위치 자동화

     * Apple Wallet 패스는 지정 위치에서 자동 노출 가능
     * PureGym 공식 사이트에는 상세 좌표가 없으나, API에서 전국 지점의 좌표 리스트 획득
     * 모든 지점 좌표를 파싱해 패스마다 가까운 지점을 지정함
     * 단점: 쇼핑센터 내 PureGym인 경우, 단순 쇼핑에도 패스가 뜨는 소소한 불편함

  Apple Watch 연동

     * Apple Wallet 패스는 별도 작업 없이 Apple Watch에서 자동 동기화됨
     * 손목에서 두 번 클릭 후 스캔, 입장까지 3초 소요로 대폭 단축
     * 93% 이상의 시간 절감 실현

수치로 보는 변화

     * 기존 PureGym 앱 진입 시간: 47초
     * Apple Wallet 패스 진입 시간: 3초
     * 한 주 평균 절감 시간: 4.4분(연 3.8시간)
     * 주변 회원들이 ""이런 앱 있냐""고 23회 물어봄, 모두 비공식임을 설명함
     * 요청이 있지만 저작권/서비스 정책상 배포 계획 없음

  보너스: Home Assistant 연동

     * PureGym API의 실내 인원수 엔드포인트를 통해 IoT 대시보드에 현재 체육관 혼잡도를 표시함
     * 데이터 기반으로 한산한 시간 재방문 결정 가능, 운동 효율/동기 상승 효과

엔지니어링 현실과 윤리

     * 순수한 개인 불편함 해결이었으나, PureGym 내부에서는 다년간 개선하지 않은 영역임
     * 조직 밖에서 만들어진 프로토타입이 때로는 공식 로드맵보다 빨리 문제를 해결함
     * 이것이 공식적으로는 약관 위반일 수 있고, 언제든 PureGym이 차단 가능함
     * 절대 자동화/공유는 하지 않고 오로지 개인 실험 용도, 안정성을 위해 캐시 등 원칙 준수

다음 단계와 마무리

     * 앞으로 ""부끄러움 푸쉬 알림"" 등 확장 아이디어 제안이 가능
     * 실질적 효용은 작지만, 연간 3.8시간의 ""불필요한 동작""을 최적화함에 만족감 느낌
     * PureGym이 공식 구현을 한다면 더 많은 이용자 편의성 확보 가능함
     * ""비공식이지만 효과적인 경험""을 창출한 사례로 기록됨

        Hacker News 의견

     * 정말 재미있고 영감을 주는 글이라고 생각함, 엔지니어의 본질을 잘 담아냈음, OP가 진정한 해커임이 드러남
       미국에 3개월 동안 있을 때 PureGym에 가입해서 PIN을 받았고, 나중에 멤버십을 취소함, 그런데 크롬에서 PureGym PIN이 유출되었다고 알려줌
       2년 후 다시 미국에 가서 같은 PIN을 받았고, 이는 보안상 굉장한 문제라고 생각함
       PureGym 앱과 토큰도 흥미로웠는데, 하이드로 마사지 의자 활성화 시스템에서 보안 결함도 발견했음, 어떤 PIN이든 받아들이는 구조였음
          + 크롬이 PureGym PIN 유출을 알린 것은 아마 오탐으로 보임, 크롬이 HaveIBeenPwned API를 사용할 때 이런 일이 발생할 수 있음
            예를 들어 87623103 같은 PIN은 해시값이 558B4C37F6E3FF9A5E1115C66CEF0703E3F2ADEE로 변환되고HaveIBeenPwned 해시 범위에서 검색하면 실제로 여러 번 유출된 기록이 있음
     * 한 번만 생각해봐야 할 문제임, 야외에 놓인 물리적 키패드는 영국의 날씨, 단백질 셰이크, 후회로 덮여 있고, 어떤 집의 링 도어벨로 틱톡 라이브 중계까지 될 수 있는 곳임. 그런데도 내 예전 PIN을 문제없이 받아들임, 반면 디지털 QR코드는 NSA가 감탄할 정도의 암호화 회전이 필요함
     * 이런 이야기를 읽는 게 너무 즐거움, 앱이 제대로 작동할 때까지 기다리는 대신 직접 PIN을 외움. 그래서 OP가 제안한 방법보다도 더 빠르게 들어갈 수 있고, 기기나 별도 서비스도 필요 없어서 더 간편하다고 생각함
     * “Apple Wallet을 구현하지 않는 것도 다 이유가 있다”라는 글을 봤을 때, PureGym 앱의 스크린샷을 참고하면 사실상 모바일 웹 사이트를 얇게 감싼 수준이거나 Flutter 같은 기술을 쓴 것으로 보임. 애플 API의 미묘한 부분까지 다룰 수 있는 사내 개발자가 있을 확률은 매우 낮아 보임
          + 이게 핵심임, PureGym은 서비스 가입자를 최대한 많이 받고 탈퇴는 어렵게 만드는 게 본업임, 개발이 본업이 아님. 운이 좋으면 내부 웹 개발자가 사이트와 데이터베이스만 겨우 관리하고, 앱처럼 동작하게 해달라며 외주를 맡김, 운이 나쁘면 모든 웹 업무를 외주업체에 맡기고 제목 한 글자 바꾸려고 해도 추가 비용을 내는 상황일 것
          + 그런데 왜 배우지 못할까라는 의문이 듦, 구글, Stack Overflow, LLM 같은 도구가 많은데도 여전히 개선이 없음. 아마도 UX를 신경 쓰는 사람이 아예 없거나, 백엔드 개발팀은 다 떠난지 오래고 남은 건 최소 인원의 저렴한 엔지니어로 유지하고 있기 때문이라고 생각함
          + 만약 Apple Wallet을 추가한다면 Android Wallet 지원도 해야 하므로 관리할 코드가 늘어남. 그래도 최소한 앱을 켜자마자 QR 코드를 항상 보여주게는 만들 수 있을 것 같음
          + 내 휴대폰에도 PureGym 앱이 있는데, 실제로 그냥 PureGym 웹사이트를 감싼 앱 느낌임
     * 순금 같은 말임, 8자리 짐 도어 PIN이 곧 API 비밀번호이고, 대다수 사용자가 직접 설정하지 않았음. 실패 시도에 대해 레이트 리미트가 있길 바라는 중임. 이메일 주소만 알면 곧바로 API 접근이 되는 구조 같음. 또 요청할 수 있는 권한 범위도 잘 제한되어 있는지 궁금함
          + OP임
            API 접근이 바로 가능하냐는 질문에는 맞음, 실제로 앱과 사이트를 쓰면서 레이트 리미트에 걸려본 적이 없음, 실패 시도에 꽤 관대함
            포스트에 소개한 scope는 공식 앱과 GitHub의 비공식 클라이언트들이 쓰는 것과 동일함
            추가 scope가 있을 확률은 매우 낮음PureGym PHP Wrapper와 PureGym Attendance Python도 참고할 만함
     * PureGym의 앱 로드맵 논의를 IT 업계에서 많이 겪음
       “이 기능을 만들면 우리가 직접 책임을 져야 한다”라는 식
       “맞는 말임, 그럼 2028년 로드맵에 넣어두자”라는 농담도 많이 함
          + 내 부서 미팅도 똑같음, 로드맵과 계획 이야기를 할 때 “이게 우리 매출에 도움이 되냐, 돈 드는 일 아니냐”가 핵심임
            원래 할 일이나 위시리스트도 길어서 기능 추가가 잘 안 됨
            PureGym이 지금 가장 잘할 수 있는 건, 이 앱 만든 개발자에게 몇 천 파운드와 평생 무료 이용권을 주는 것이라고 생각함
     * Apple Developer Portal에서 발급하는 Pass Type ID 증명서 비용이 궁금함
       Apple Wallet 패스를 만들고 싶은데 개발자 계정 설정과 추가 비용이 부담스러움
          + 내가 아는 한 기본 개발자 구독에 포함되어 있음, 다만 매년 개발자 구독을 갱신해야 계속 유지할 수 있음
     * 매 분마다 새로운 코드를 받으라고 푸시 알림이 온다면 배터리 문제 아닐지 궁금함
          + 본문을 보면 코드 갱신이 주 1회라 주 1회가 최대일 것으로 예상함
          + 푸시 알림에는 백그라운드 모드라는 게 있어서, 폰이 준비됐을 때만 처리됨
            배터리 부족 시나 절전 모드에선 아예 전달되지 않아 배터리 소모를 최소화하려고 만들어진 구조임
            더 중요한 알림은 UI 요소가 반드시 보여야 하고, 절전 상황과 관계없이 도착함
     * 재미있고 기술적인 디테일이 가득한 글이라 즐겁게 읽었음
"
"https://news.hada.io/topic?id=22577","ArchiveTeam이 모든 goo.gl 단축 링크 아카이브 작업을 완료함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ArchiveTeam이 모든 goo.gl 단축 링크 아카이브 작업을 완료함

     * ArchiveTeam은 모든 goo.gl 단축 링크를 성공적으로 아카이브함
     * ArchiveTeam Warrior라는 가상 아카이빙 프로그램을 통해 누구나 아카이브 프로젝트에 참여 가능
     * 이 워리어는 Windows, OS X, Linux 환경에서 별도의 위험 없이 실행할 수 있음
     * 사용자는 간단한 설정을 통해 프로젝트 선택 및 활동에 참여 가능함
     * 특별한 기술 없이도 아카이브 활동에 도움이 되는 쉽고 직관적인 방식을 제공함


ArchiveTeam Warrior 소개

     * ArchiveTeam Warrior는 누구나 손쉽게 사용할 수 있는 가상 아카이빙 어플라이언스임
     * 사용자는 Warrior를 실행하여 웹사이트 등을 다운로드하고, 이를 ArchiveTeam의 아카이브로 업로드하는 작업에 참여할 수 있음
     * Warrior는 실제 컴퓨터 환경에 위험을 주지 않으며, 인터넷 대역폭과 약간의 디스크 공간만 활용함
     * Windows, OS X, Linux 환경을 모두 지원하며, VirtualBox, VMware 등 가상머신 프로그램이 필요함

VirtualBox를 이용한 사용 방법

     * Warrior 어플라이언스(357MB)를 다운로드함
     * VirtualBox에서 File > Import Appliance 메뉴를 클릭하여 다운로드한 파일을 불러옴
     * 가상머신을 시작하면, 최신 업데이트를 자동으로 받고, 웹 브라우저 사용 요청을 받음

Warrior 실행 후 과정

     * 에 접속하여 Settings 페이지를 확인함
     * 사용자 이름을 선택하여 leaderboard에 진행 상황을 표시함
     * All projects 탭에서 원하는 프로젝트를 선택해 참여하며, 가장 긴급한 프로젝트에 참여하는 ArchiveTeam’s Choice 선택도 가능함

참여의 이점

     * 특별한 기술이나 복잡한 과정 없이 누구나 간단하게 아카이브 프로젝트 활동에 기여할 수 있음
     * 사용자의 아카이브 활동 실적은 리더보드에 표시되어 동기부여 및 협업 효과가 있음

        Hacker News 의견

     * ArchiveTeam이 이런 프로젝트를 할 때마다 정말 놀라움을 느낌 몇 년 전에 근무하던 비디오 플랫폼이 곧 서비스 종료를 발표했을 때 ArchiveTeam 한 분과 연결이 되어, 데이터를 보존하는 작업에 관심이 있음을 들음 그분께 약간의 조언(아카이빙에 어려움이 생길 만한 서버 엔드포인트 정보)을 제공했고, 내 EC2 인스턴스 몇 개를 임시로 빌려드림 서버가 내 소유였기에 무슨 일이 일어나는지 볼 수 있었는데, 2분 만에 인스턴스가 완전히 준비되어 빠르게 영상을 아카이빙하기 시작했고, 각 인스턴스는 중복 없이 각기 다른 영상을 효율적으로 다운로드함 ArchiveTeam은 항상 사명도 좋지만, 실행 방식의 효율성이 정말 인상적임
     * 제목이 정확하지 않음 실제로는 Archiveteam.org이고, Archive.org가 아님 The Internet Archive는 저장 공간을 제공하지만, 실제 아카이빙 작업은 Archiveteam 구성원이 진행함
          + Archiveteam의 기여가 정확히 뭔지 궁금함 잘 이해가 안 감 결국 아카이브 대상과 아카이브 서버 사이에서 굳이 필요 없는 중간자 역할인 것처럼 보임 내가 뭔가 놓친 게 있는지 궁금함
     * 관련 내용을 공유하고 싶음 ""링크부패(Link Rot)와의 전쟁에 동참하기"" (링크), 구글 goo.gl 정책 변화에 대한 여러 HN 토론 스레드 (2018년~2025년 관련글 모음, 여기, 여기, 여기, 여기, 여기, 여기) 다양한 토론이 있으니 도움이 되길 바람
     * 구글의 최신 업데이트를 공유함 Google 블로그 업데이트 링크
          + 아, 구글이란 정말 신뢰할 수 없는 회사에서 나온 극히 신뢰할 수 없는 정보라고 여기기에 이번 ""업데이트""도 전혀 믿지 않음
          + 구글 공지대로라면 축약된 링크(goo.gl 링크)는 ""8월 25일 이후 동작하지 않으며 다른 URL 단축 서비스로 옮기길 권장""한다는데, 그러면 실제로 일부 링크만 남길 의미가 무색해지는 것 아님? 이미 문서에 박혀서 수정 못하는 축약 링크들은 결국 다 끊어진다는 의미 아님?
          + 결국 무슨 의미가 있는지 의문임 이미 거의 사용 안 하는(또는 저활동) 기존 링크는 리디렉션 해도 그다지 비용이 들지 않을 텐데 왜 굳이 중단해야 하는지 이해가 안 감 (이런 정책 변경으로 높은 사용량 링크만 리디렉션 계속하는 것도)
          + 이게 잘 이해 안 감 데이터베이스 전부 보관하는 게 정말 그렇게 큰 비용이 드는 일인지 궁금함 어차피 일부는 계속 보관해야 하면서
     * reddit이나 twitter 전체를 아카이브하고 있는 사람이 있음? 비록 그들의 Terms가 변경되어 이를 허용하지 않는다 해도 궁금함
          + reddit은 예전에 Pushshift라는 프로젝트가 있었음 reddit API가 변경되기 전까지 이 데이터는 the-eye라는 또 다른 데이터 아카이버/보존 그룹에서 다운로드 가능함 twitter의 경우는 내가 아는 한 없음 게다가 Wayback Machine에서 트윗 아카이빙이 불가능한 지도 이미 수년이 지남
          + Academictorrents에서는 API 제한 이후에도 reddit의 모든 submission과 comment에 대한 월별 덤프를 받을 수 있음
          + OpenAI에 한번 물어보는 것도 방법임
     * 페이지가 잘 이해가 안 감 데이터셋 리스트(아마도?)가 올라와 있는데 91 TiB까지 용량이 커 보임 구글 단축링크와 대상 URL 목록만으로 91 TiB나 필요할 것 같지 않음 혹시 원리를 아는 사람 있음?
          + 내가 간단히 계산해 봄 구글 검색에서 임의로 뽑은 URL은 705바이트였고, goo.gl 짧은 링크는 22바이트, 단순 ID만 저장하면 6바이트임 짧거나 긴 경우도 있지만 전체적으로 대충 계산하면 수백억 ~ 수조 개 URL에 해당하는 용량임을 알 수 있음
     * 내가 이번 아카이빙에 조금이나마 기여해서 기쁨
          + 나도 내 이름이 리더보드에 올라가 있는 걸 보니 기분이 좋음 사실 그냥 하루 docker container 설치만 해놓고 잊어버린 것이 전부임
     * 얼마나 많은 링크가 비공개 YouTube 영상이나 Google 문서 등으로 연결되는지 궁금함
          + 내심 ""이제 다운받아서 직접 검색해보면 되겠네""라고 농담하려 했으나, 실제로는 여기 보면 ""Access-restricted-item: true""로 접근 제한이 있음 용량도 10GB씩 제공됨
     * ""all""이라는 게 실제로 공개되어 있는 모든 URL을 말하는 건지, 아니면 URL 네임스페이스 전체를 반복적으로 모두 시도해본 건지 궁금함
          + 실제로는 자원봉사자가 직접 클라이언트를 실행해서 IP 차단 없이 전체 URL 네임스페이스를 반복적으로 시도한 방식임
          + 공개된 goo.gl URL은 이미 Internet Archive와 Common Crawl 크롤링에 다 포함되어 있음
"
"https://news.hada.io/topic?id=22550","Show GN: OpenInfo (당신이 인터넷에 접속하는 순간, 공개되는 정보들)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: OpenInfo (당신이 인터넷에 접속하는 순간, 공개되는 정보들)

   << 앱 소개 >>

   여러분이 인터넷에 접속하는 순간, 다른 사람들이 당신을 인지할 수 있는 공개된 정보가 무엇인지 알려줍니다.

   이 앱은 장치의 공용 IP를 표시하고 자세한 여려분의 정보들을 알려줍니다.

   공용 ip 주소, 국가, 지역, 도시, ip 서비스 공급자, 시간대 등등을

   사용자의 공용 IP 주소를 기반으로 제공합니다.

   프록시나 VPN이 올바르게 설정되어 있는지 확인하고 싶을 때 또는 공용 IP 주소의

   정확한 GPS 위치를 알고 싶거나 ISP에 대한 정보를 원하는 경우에도 매우 유용합니다.

   특징:
     * 공용 IP 주소
     * 도시
     * 지역
     * 나라
     * 위치정보(위도, 경도)
     * 인터넷 서비스 제공업체
     * 해당 지역의 우편번호
     * 시간대

   참고: 정보는 현재 당신의 정확한 정보를 표시하지 않습니다. 하지만 당신의 공용 IP 주소를 기반으로 인터넷에 공개되는 당신의 정보를 보여줍니다.

   인터넷 접속 외에 다른 특별한 권한은 요구하지 않습니다.

   << 깃허브 >>

   위 앱의 소스프로젝트는 하기 깃허브에 공개되어 있습니다.
   MIT라이센스로 공유되고 있습니다.
   자유롭게 이용하셔도 됩니다.

   https://github.com/freeNanum/Android-YourOpenInfo-App

   이거 제가 만든건데 직접 백엔드 운영하셔도 좋을듯 합니다. https://github.com/1kko/whatismyip
"
"https://news.hada.io/topic?id=22511","NGINX, ACME 프로토콜 기본 지원 도입프로토콜 기본 지원 도입

     * NGINX가 SSL/TLS 인증서 발급·갱신을 자동화하는 ACME 프로토콜을 네이티브로 지원하는 프리뷰 버전을 공개함
     * Rust 기반의 신규 모듈 ngx_http_acme_module 을 통해 외부 툴 없이 NGINX 설정만으로 인증서 요청·설치·갱신이 가능해짐
     * 이를 통해 Certbot 같은 외부 툴 의존을 줄이고, 보안성과 플랫폼 독립성이 높아짐
     * 초기 버전은 HTTP-01 챌린지를 지원하며, TLS-ALPN·DNS-01 지원은 향후 계획됨
     * ACME 지원은 웹뿐만 아니라 IoT·에지 컴퓨팅 환경의 보안 자동화에도 중요한 역할을 할 것으로 기대됨


개요 및 주요 변화

     * NGINX가 ACME 프로토콜 지원 기능의 프리뷰 버전을 공개함
     * 새로운 모듈인 ngx_http_acme_module을 통해 NGINX 설정에서 인증서 요청, 설치, 갱신을 직접 처리할 수 있게 설계됨
     * 이 ACME 지원은 내부적으로 NGINX-Rust SDK를 활용하며, Rust 기반의 동적 모듈 형태로 제공됨
     * 오픈소스 사용자 뿐만 아니라 NGINX Plus 엔터프라이즈 고객 모두 이 기능을 사용할 수 있음
     * 기존 Certbot과 같은 외부 툴에 대한 의존도를 줄임으로써, 인증서 관리의 보안성과 효율성을 높임

ACME 프로토콜 소개

     * ACME(Automated Certificate Management Environment) 프로토콜은 SSL/TLS 인증서의 발급, 검증, 갱신, 폐기를 자동화하는 통신 프로토콜임
     * 클라이언트가 CA(Certificate Authority)와의 자동화 통신을 통해 직접 중간자의 수작업 없이 인증서 라이프사이클을 관리할 수 있음
     * Internet Security Research Group(ISRG) 이 2015년 Let’s Encrypt 프로젝트로 개발 및 공개함
     * ACME의 등장 전에는 인증서 발급 과정이 수동적이고 비용과 오류 가능성이 높았음
     * 최신 ACMEv2는 인증 방식, 와일드카드 지원 등 다양한 기능이 추가되어 유연성과 보안성이 증가함

NGINX의 ACME 기반 인증서 자동화 흐름

     * NGINX에서 ACME 프로토콜을 활용한 인증서 라이프사이클 자동화는 아래 4단계로 이루어짐
     * 1. ACME 서버 설정
          + ACME 기능 활성화를 위해서는acme_issuer로 ACME 서버의 디렉터리 URL을 반드시 지정해야 함
          + 인증서 이슈 발생 시 클라이언트 연락 정보, 상태 데이터 저장 경로 등도 옵션으로 지정 가능
     * 2. 공유 메모리(zone) 할당
          + acme_shared_zone으로 인증서와 개인키, 챌린지 데이터 저장을 위한 공유 메모리 zone을 추가로 설정 가능
          + 기본 사이즈는 256K이며 필요에 따라 증설 가능
     * 3. 챌린지(Challenge) 구성
          + 현재 프리뷰 버전은 HTTP-01 챌린지만 지원하며, 도메인 소유권 검증에 사용됨
          + 이를 위해 NGINX 설정에서 포트 80 리스너와 기본 404 응답 설정을 정의해야 함
          + 추후 TLS-ALPN, DNS-01 챌린지 지원 예정
     * 4. 인증서 발급 및 갱신
          + acme_certificate 디렉티브를 서버 블록에 추가하면, 해당 도메인에 대해 TLS 인증서 발급/갱신 자동화 가능
          + 인증서 발급 대상 도메인은 일반적으로 server_name으로 명시함
          + server_name에서 정규표현식, 와일드카드는 프리뷰 버전에서 지원되지 않음
          + 모듈 내 변수 $acme_certificate, $acme_certificate_key를 통해 자동으로 인증서와 키가 연결됨

주요 장점

     * 전 세계 HTTPS 사용 급증의 중심에는 ACME 프로토콜이 있음
     * 자동화된 인증서 관리로 인증서 라이프사이클 관리 비용 및 수작업에 의한 오류가 현격하게 줄어듦
     * 외부 툴 제거로 공격 표면 축소 및 이식성 확보
     * 다양한 환경에서의 보안 표준화 촉진

향후 계획

     * TLS-ALPN, DNS-01 챌린지 지원 추가 예정
     * 사용자 피드백 기반으로 기능 확장
     * IoT, API, 엣지 컴퓨팅 도입 확대에 따라, ACME는 향후 더욱 넓은 범위의 자동화 보안 인프라에서 핵심 역할을 담당할 것으로 예상됨
     * NGINX의 네이티브 ACME 지원은 웹 보안과 자동화, 확장성을 미래 표준으로 만들어가는 기반 역할을 할 것

시작하기

     * 오픈소스 사용자는 NGINX Linux 패키지에서 프리빌트 모듈 사용 가능
     * NGINX Plus 엔터프라이즈 고객은 F5 지원 동적 모듈 형태로 제공
     * 모듈 문서는 NGINX Docs 참고

        Hacker News 의견

     * 현재 프리뷰 버전에서는 HTTP-01 챌린지만 지원하여 클라이언트 도메인 소유권을 검증함
       DNS-01 방식이 퍼블릭하게 열리지 않은 nginx 사용자에게는 훨씬 의미 있는 기능임(예: Nginx Proxy Manager 사용 시). DNS-01은 단순히 레코드만 업데이트하는 방식이라 항상 제일 깔끔하다고 생각해왔음. 이 기능이 도입되길 정말 기다림
          + 하지만 dns api key를 반드시 보유해야 하며, 많은 dns 제공업체는 zone별로 별도의 api key를 제공하지 않음. 개인적으로 DNS-01을 좋아하지만 현실적으로 아쉬운 타협이 필요할 수 있음
          + 기다릴 필요 없음: angie에서도 지원함 (angie는 원래 nginx 개발자들이 f5에서 나와서 만든 nginx 포크임)
          + Traefik의 ACME 관련 아쉬운 점은 DNS 제공업체당 하나의 api key만 사용할 수 있다는 점임. 이 때문에 도메인별로 api key를 제한하거나, 여러 계정의 도메인을 쓰는 경우 제약이 많음. Nginx는 이런 제한 없이 나오길 기대함
          + 개인적으로 homelab에서는 step-ca와 caddy 조합으로 dns01을 사용 중임. 매우 만족스러운 경험임
          + DNS-01을 아주 잘 지원하니 Angie로 넘어가는 것도 추천함
     * 이건 꽤 큰 변화임. Caddy는 예전부터 지원해왔지만, 모두가 caddy를 선호하는 것은 아님. 이번 업그레이드는 Traefik 같은 소프트웨어의 점유율을 뺏어올 가능성이 있음
          + Caddy의 깔끔한 문법이 특히 마음에 듦. 현재 nginx(nginx proxy manager를 통해)와 Traefik을 쓰지만 최근에는 Caddy로 프로젝트를 해봤는데 아주 쾌적했음. 앞으로 시간 나면 selfhosted 환경을 Caddy로 전환하고 싶음. 혹은 pangolin 같은 걸 쓸 수도 있을 듯. pangolin은 cloudflare tunnels의 대안까지 제공함
          + 최근에 caddy로 아예 넘어옴. nginx의 http 1 desync 문제 관련 소극적 대응이 결정적 계기였음. 문제 생길 때까지 기다리거나, auditor가 물어봐도 nginx가 확실히 답변해주지 않는 상황은 싫음.
            Caddy는 nginx보다 확실히 쉬움. 각종 서비스와 테스트, 교육기관용 특별 서비스까지 커버하는 템플릿과 더 나은 로깅, 본인에게는 완벽한 인증서 처리, 더 좋은 메트릭스 기능을 제공함.
            다만 아직 플러그인 쪽은 공부 중인데, caddy는 rate limiting이 없고, powerbi의 버그로 인해 특정 사용자가 이미지를 하루에 30만 번 요청하는 상황 때문에 불편함도 있음
          + 확실히 그렇다고 생각함. 집에서는 traefik을 일부 사용 중인데, 이제는 바로 대체할 것 같음
     * 환영할 만한 변화임. Dokku(내가 메인테이너임)는 letsencrypt 플러그인으로 임시방편을 쓰고 있는데, 사용자들이 랜덤한 이슈를 겪는 경우가 많았음.nginx가 reload 도중 종종 ""멈춰서"" 엔드포인트를 못 찾는 현상도 있음.이런 복잡한 변수가 적을수록 좋은 방향임
       하지만 이 기능이 Ubuntu나 Debian의 stable repository에 들어가기까지는 시간이 꽤 걸릴 것임.
       게다가 아직 DNS 챌린지(와일드카드 인증서)가 지원되지 않아 단기적으로는 Dokku엔 큰 도움이 되지 않을 듯함
          + 안녕하세요! 이렇게 여기서 뵙게 돼서 반가움
            dokku를 시도(지금도 시도 중)해보고 있는데, 진입장벽이 꽤 높게 느껴졌음
            예를 들어, Coolify는 github app을 만들면 바로 배포를 연동할 수 있었고, GH actions로 컨테이너를 빌드/배포 하는 경험도 있음.
            dokku 공식 문서는 참고서 느낌이라 백과사전 읽는 기분임: dokku git 초기화 공식문서
            Coolify처럼 바로 배포를 도와주는 즉각적인 안내(definitive getting started)가 더 유용하다고 느낌: coolify github 연동 도움말
            Dokku에 인기 OSS앱 설치, 단계별 목표/완료 방식의 입문 가이드, baremetal 환경에서 리버스 프록시와 여러 인기앱까지 한번에 다루는 튜토리얼이 있었으면 좋겠음
            결국 Dokku를 쓰는 목적은 Dokku 자체가 아니라, Dokku로 쉽고 빠르게 ""내가 원하는 상태""까지 도달하는 것임
            최종적으로는 ""마음에 드는 레포를 클릭하면 바로 내 머신에 배포"" 가능한 painless 프로세스를 원함. 그 후에 뒷단 세부를 파고들고 싶음
     * 좋은 소식임. 혹시 모르는 사람들을 위해 소개하자면 dehydrated라는 손쉬운 솔루션이 있었음. vhost 설정에 몇 줄만 추가하면 됨:
  location ^~ /.well-known/acme-challenge/ {
    alias ;
  }

       dehydrated는 오래전부터 HTTP-01 갱신 자동화에 쓰이는 가벼운 툴임
          + 기능 자체는 정말 멋진데, 수천 명이 의존하는 프로젝트가 안정(Stable) 릴리스를 계속 내놓지 않는 상황은 아쉬움
            v1.0.0 정식 릴리스 없는 소프트웨어는 인터페이스가 언제든 예고 없이 바뀔 수 있음. 메이저 버전 0은 언젠간 함정이 됨.
            유지보수자들에게 안정적 버전 릴리스를 요구하길 권장함.
            dehydrated는 7년 째 major version 0 상태임
            0ver.org도 참고할 만함:
            ""프로덕션에서 쓰고 있다면 이미 1.0.0이 되어야 한다""는 식의 버저닝 철학임
            더 자세한 내용은 여기 참고
     * 이번 릴리스에 작은 실수가 있었음: ngx_http_acme_module는 여러 리눅스 배포판 패키지로 포함됐지만, Debian stable만 빠져 있음
       nginx 공식 패키지 목록에 따르면 oldstable/oldoldstable은 있는데 4일 전에 출시된 Debian 13 Trixie는 없음
          + 지금 Trixie 패키지 업로드 작업 중임. 이번 주 내에 올라갈 예정임. Debian 13이 출시된 지 4일밖에 안 됐으니 새 OS용 인프라 세팅에 시간이 필요했음. (본인은 F5 근무자임)
          + 아마 그건 Debian 측 실수라고 생각함
     * Caddy를 알게 된 이후로 nginx를 더 이상 쓰지 않음. 개발 경험이 훨씬 나아짐
     * 오픈소스 대기업의 문제는 ‘기본적인 혁신’을 제대로 이해하고 구현하는 데 항상 늦는다는 것임
       Caddy와 Traefik이 5년 전에 이미 했던 것을 이제서야 nginx가 지원하게 됨.
       물론 좋은 변화라고 생각함. 이제 더 이상 certbot을 직접 실행하지 않아도 되니까 편해짐
          + 실제로 Caddy는 거의 10년 전인 2016년에 Let’s Encrypt의 자동 HTTPS를 어느 정도 지원했었음.
            Nginx는 거의 9~10년 늦게 해당 기능을 도입하는 셈임
     * 개인적으로는 nginx가 웹 콘텐츠 서빙만 하고 certbot이 갱신을 처리하는 방식이 오히려 문제라고 느낀 적이 없음
       원래 한 가지 일을 잘하고 조합할 수 있는 유닉스 철학이 더 낫다고 생각함
       온갖 기능을 다 붙이는 ‘툴’은 필연적으로 어느 한 부분에서 부족해질 수밖에 없음
          + certbot으로 세팅하는 게 꽤 번거로운 경험임
            certbot이 자동 설정을 시도해도 대부분의 기본 환경이 아니면 잘 동작하지 않음
            nginx 안에서 전부 직접 처리하는 게 오히려 더 나은 솔루션으로 느껴짐
     * 즉, 이 기능 도입으로 nginx 설정 파일에 몇 줄만 추가하면 certbot을 설치/운영할 필요가 없어졌다는 의미로 이해함
       또한 Let's Encrypt 외의 대안도 쉽게 사용할 수 있는 길이 열렸는지 궁금함
     * 기대되는 변화임
       Caddy는 바로 쓸 수 있는 편의 기능들이 많아서 정말 유용함
       개인적으로 Caddy로 완전히 전환하지 못한 이유는 nginx의 rate limiting 및 geo 모듈에 대한 필요 때문임
"
"https://news.hada.io/topic?id=22539","What the Fork - 실시간 C/C++/Rust 빌드 시각화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                What the Fork - 실시간 C/C++/Rust 빌드 시각화 도구

     * What the Fork은 실시간으로 C/C++/Rust 등 다양한 빌드 과정을 시각화하는 크로스플랫폼 도구
     * 기존 빌드 시스템의 병렬 처리 부족, 비효율적 프로세스 등 구조적 문제를 쉽게 파악할 수 있음
     * 모든 빌드 시스템 및 프로그래밍 언어에서 동작하며, make, ninja, gradle, zig, cargo 등 다양한 빌드 툴 지원 가능
     * 시스템 호출 모니터링을 통해 각 프로세스의 실행 시간, 명령어, 종속 관계를 박스 형태로 시각화
     * 빌드 최적화, 병목 현상 분석, CI 성능 개선 등에 매우 유용한 도구


소개 및 배경

     * What the Fork은 빌드가 느려지는 원인을 시각적으로 진단하기 위해 개발된 실시간 빌드 시각화 도구
     * LLVM 프로젝트처럼 코드량 자체가 많아서 컴파일 속도가 느릴 수 있으나, 대부분의 빌드는 비효율적인 설정 탓에 불필요하게 오래 걸리는 경우가 많음
     * 기존에는 빌드의 문제점을 직접 확인하거나 구조적 문제를 한눈에 보기 어려웠기 때문에 이런 도구가 필요했음
     * 이 도구는 크로스플랫폼으로 설계되었고, 모든 빌드 시스템과 언어에 적용 가능

주요 기능 및 사용법

     * What the Fork은 단순한 시스템 프로파일러가 아닌, 빌드 특화 문제를 진단하는 도구
     * 예시로는 make 사용 시 -j 플래그 미사용, 특정 파일 혹은 컴파일 단계에서의 시간 쏠림, 병렬 처리가 가능한데도 순차적으로 실행되는 명령어 탐지 등이 있음
     * 특히 CI 환경의 clean build 성능 분석 및 최적화에 효과적
     * 사용 방법은 wtf 명령어를 빌드 명령 앞에 붙여 실행 (예: wtf make, wtf cargo build, wtf npm run build 등)
     * 빌드가 시작되면 UI가 실행되어 각 프로세스의 진행 상황을 실시간으로 갱신

UI 및 시각화 방식

     * 각 빌드 프로세스는 박스 형태로 타임라인 상에 표시되며, 색상으로 유형 구분
     * 프로세스의 부모-자식 관계는 중첩 구조로 표현
     * 하단 패널에서는 선택된 프로세스의 실행 시간, 작업 디렉토리, 전체 명령어 인자 정보를 표시

작동 원리

     * 빌드는 여러 프로세스(예: bash, clang, ld)의 조합
     * 대규모 빌드는 cargo, make, bazel, gradle, xcodebuild 등 다양한 빌드 도구를 사용하며, 이들은 실제로 많은 명령어와 종속성, 캐시, 스케줄링 작업을 수행
     * 터미널 출력만으로는 중첩된 프로세스(예: clang이 내부적으로 호출하는 ld 등)와 세부 타이밍 구조를 파악 불가
     * 이를 위해 OS별 프로세스 시작, 종료를 감지하는 시스템 호출(macOS: Endpoint Security API, Linux: ptrace(), Windows: Event Tracing for Windows 등)을 활용함
     * 이런 방식으로 빌드 전 과정 및 타임라인 복원, 각 단계의 실행 경로와 시간 식별 가능함
     * 빌드 외에도 다양한 서브프로세스 트래킹에 활용할 수 있음

실제 사례 및 관찰 결과

     * 여러 엔지니어(Delta, Mozilla, Apple 소속)가 실제로 프로젝트에 적용 후 예상치 못한 이슈를 발견
     * 예시 1: Cargo를 사용하는 오픈소스 프로젝트에서 파일들이 순차적으로 컴파일되어 병렬성 부족 확인 (10코어 CPU에서 10배 이상 속도 개선 가능성 확인)
     * 예시 2: Ninja를 활용한 LLVM 빌드에서는 모든 CPU 코어가 효율적으로 병렬 작업을 수행, 이상적인 빌드 효율 달성
     * 예시 3: CMake 기반 프로젝트에서 cmake/make/clang의 중첩 실행 및 Xcode/OS 버전 재확인이 85회 반복되는 비효율적 구조 발견(실제 작업은 극히 일부)
     * 예시 4: xcodebuild를 이용한 대형 Objective-C 프로젝트에서 빌드 후반부 병렬 처리 부족 및 빌드 시작 전 6초간 비활성 상태 존재(비교적 ninja는 0.4초 후 바로 컴파일 시작)
     * 예시 5: Zig가 Orca Project를 컴파일할 때 종속성 빌드 순서가 무작위로 정해져, 운에 따라 병렬 처리 효율이 바뀜. 일부 종속성이 마지막에 실행되어 병렬성 저하되는 현상 관찰
     * 예시 6: make/go를 활용한 GitHub CLI 프로젝트에서 종속성 다운로드 시간이 큼. 종속성 축소 시 빌드 속도 개선 기대

활용 효과 및 한계

     * 시각적 타임라인 분석을 통해 예상치 못한 병목 구간, 불필요한 의존성 반복, 병렬성이 부족한 영역 확인 가능
     * 종속성 문제, 불필요한 재작업, 특정 툴의 비효율 등 구조적 개선점을 빠르게 파악하여 빌드 성능 최적화에 직접적 활용 가능
     * 프로세스의 전체 명령어 확인으로 더 세밀한 분석 가능

베타 프로그램

     * What the Fork은 Windows, Linux, macOS에서 동작
     * 피드백을 원하는 개인 및 팀은 프라이빗 베타 신청 가능 (구글 폼 링크 제공)

   명령어가 너무 웃긴데요 ㅋㅋㅋ wtf이라니…

   오픈소스로 나오면 좋겠네요

        Hacker News 의견

     * 현재 CMake, GCC, Unix Make만 사용 가능한 환경에 갇혀 있어서 빌드가 왜 느린지에 대한 상세 정보를 얻는 게 거의 불가능함, 소스에서 빌드 폴더로 파일 복사 같은 복잡한 빌드 단계, 여러 언어(C, C++, Fortran, Python), 커스텀 CMake 스텝 등으로 엉망인 빌드임, 만약 이 툴이 이런 혼란스러운 환경에서도 잘 동작한다면 정말 많은 것을 배울 수 있을 것 같음
          + tsoding이 https://github.com/tsoding/nob.h에서 크로스 플랫폼 빌드를 위한 싱글 헤더 C 라이브러리를 작성했음, 오직 cc만 필요함, GDB 프로파일링 툴을 사용하여 빌드 단계를 살펴볼 수 있음, 멋진 아이디어라고 생각함, 아마 이 글쓴이에게는 맞지 않을 수도 있지만, 여러 언어를 다뤄야 한다면 Nix가 훌륭한 빌드 툴임
          + 내가 GCC 플러그인으로 컴파일 시간 트레이싱/프로파일링 도구를 직접 만들었음, 혹시 관심 있다면 참고: https://github.com/royjacobson/externis
          + 내 게임 엔진의 컴파일 시간을 줄여보려고 시도할 때, 컴파일된 결과물의 크기를 대체 척도로 썼었음, 워낙 벽시계 기준 시간이 불안정해서 빌드마다, 심지어 다른 머신에서도 결과가 동일한 바이너리 크기 측정이 오히려 다루기 더 쉬웠음, 100% 일치하지는 않지만 실질적으로 도움이 되었음
          + 비슷한 문제를 겪고 있음, 종종 CMake가 수정하지도 않은 파일까지 다시 컴파일하는 걸 본 경험이 있음, 예를 들어 인터페이스 변경 없이 .cpp를 조금만 고쳐도 전혀 독립적인 오브젝트까지 재컴파일 되는 현상임, CMake가 실제 파일들보다 더 강하게 종속성을 만드는 게 아닌지 가끔 궁금해짐, 그래서 빌드 시간이 괜히 길어지는 것 같다는 의문 있음
     * 블로그 작성자에게 제안하겠음, macOS 앱 빌드를 기록한 gif 이미지를 페이지 상단, 헤더 바로 아래에 보여주면 좋겠음, 만든 결과물을 먼저 보여주고 그 뒤에 설명을 붙이는 흐름이 보기 좋음
          + 좋은 제안임, 바로 반영해서 블로그 업데이트했음
     * 이 프로젝트 정말 마음에 듦, 비슷한 시도를 2018년에 strace와 dtruss, https://buildinfer.loopperfect.com/를 써서 BUCK 파일 자동 생성 같은 일을 해봤음, graphviz, perfetto.dev 등으로 시각화함, 정식 제품으로 패키징하지 못한 게 아쉽지만 컨설팅에서 원인 진단과 BUCK/Bazel 전환에 큰 도움 받았음, 최근에도 더 넓은 적용을 고민하며 다시 돌아보고 있음, 이 방식에 본질적인 기술적 도전 과제도 있긴 함: 시스템콜 로그가 디스크에 기록되면 수십~수백 GB 정도 크기가 커짐(예: llvm은 50GB, 어떤 경우 100GB 넘음), https, IPC 같은 빌드 단계까지 전부 잘 처리해야 함(예전에 어떤 고객은 Perl로 Firebird DB에서 코드를 빌드할 때마다 끌어오기도 했음), 런타임 분석이라는 특성 때문에 빌드 설정마다 분석을 반복해야 한다는 점도 있음
          + 궁금해서 묻겠음, 시스템콜 로깅은 어떻게 했음? LD_PRELOAD 같은 트릭이나 eBPF 필터링 썼는지 궁금함
     * 멋지다고 생각함, 이런 시각화 없어서 놓치는 문제들이 정말 많다고 느꼈음, 10년 전에 Mozilla 빌드 시스템 최적화할 때 이런 툴이 있었으면 정말 도움이 됐을 것 같음, 글에서는 실제로 어떤 문제를 찾았는지 좀 더 알려줬으면 더 좋았을 것 같음
          + (작성자) 고마움, Mozilla 엔지니어와의 통화가 갑자기 끝나서 어떤 문제 찾았는지 자세하게 듣지는 못했음, 직접 확인해보고 싶음
     * CMake로 관리하는 C++ 프로젝트에서 빌드 퍼포먼스 시각화에 ninjatracing과 Clang의 -ftime-trace를 성공적으로 사용해본 경험 있음, 추가로 ClangBuildAnalyzer를 쓰면 컴파일러가 어디서 시간을 쓰는지 더 세밀히 분석할 수 있음
     * 정말 멋지다고 생각함, 혹시 오픈소스 계획이 있는지 궁금함, 비슷한 걸 만들고 있어서 협력하고 싶음
     * Windows에서 Visual C++ 컴파일러를 사용한다면 vcperf도 추천함, VS2022에 기본 포함되어 있거나 깃허브에서 직접 빌드해서 사용할 수 있음, UBT나 CMake로 생성된 프로젝트에도 적용해봤음, 빌드 병렬화 품질을 직접 판별할 수 있는지는 기억 안 나지만, 컴파일러 프론트엔드 정보를 쉽게 볼 수 있음, 특히 자주 포함되거나 본질적으로 무거운 헤더 파일을 쉽게 찾을 수 있음
          + Incredibuild도 추천함, 무료 버전만으로도 빌드를 시각화해서 병목 구간을 파악하기에 충분함
     * 일반적으로 간과되지만, 빌드 시스템의 “baked in”된(사전 계산된) 빌드 로직이 실제로 어떤 변경에 영향을 받는지 세밀하게 추적되지 않는다는 점이 중요한 관찰임, 예를 들어 ninja에서는 일부 빌드 로직이 미리 입력되어 있어서 속도가 빠름, 나는 Xerces-C++를 ninja(CMake로 설정)와 build2(설정 및 변경 추적을 빌드에서 다루는 툴)로 각각 풀빌드 벤치마크를 했는데 ninja는 3.23초, build2는 3.54초임, CMake가 만드는 파일 일부를 유지한 채로 반복해서 빌드하면 3.28초로 다운됨, 참고로 CMake만의 설정 단계는 4.83초임, 풀스택의 CMake+ninja 빌드는 실제로 8초 정도 소요됨, 보통 이걸 라이브러리로 쓸 때 실제로 겪게 되는 시간임
          + kbuild가 Make에서 각 타겟을 더미 파일에 의존하도록 해 CFLAGS같은 옵션 변경 시 제대로 반영함, Make를 ninja처럼 쓰기 위해 전체 빌드 그래프를 각 Make 프로세스에 안 넣도록 설계되어 있음, 실제로 어떻게 비교될지 궁금함
     * Instruments를 빌드하는 동안 실행해서 어떤 프로세스가 언제 뭘 하는지 파악하는 식으로 비슷한 시도를 한 경험 있음, 단점은 빌드가 오래 걸리면 Instruments가 버벅임, 프로세스 트리 필터링이 안돼서 불편하지만 Twitter의 iOS 코드 빌드 시간 대폭 줄일 때 큰 도움이 됐음, 최근에는 Instruments의 “All Processes” 트레이싱이 깨져서 더 이상 이 방법이 불가능해진 상태임
     * 정말 멋지게 느껴짐, 혹시 지금 바로 테스트할 수 있는 macOS 버전 있는지 궁금함, Rust나 C++/Swift 작업에도 써보고 싶음
          + 버그 픽스 후에 다음 베타 테스트 유저로 macOS 버전을 배포 계획 없음, (아티클 하단에서) 신청하면서 이 댓글 언급해주면 꼭 베타 그룹에 포함해주겠음
          + 아직 어떤 OS도 퍼블릭 릴리즈는 없는 것 같고, 얼리 억세스 신청만 가능한 상태임
"
"https://news.hada.io/topic?id=22494","Show GN: Moon Cheese: 프론트엔드 개발자들을 위한 모의과제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Show GN: Moon Cheese: 프론트엔드 개발자들을 위한 모의과제

     🚀 “실전처럼 빡세게, 같이 성장할 사람?”

   한 번쯤 이런 생각 해본 적 있나요?

   “토이 프로젝트는 재밌지만… 혼자 하면 느는 게 있는 건지 모르겠다.”
   “실전처럼 빡세게 해보고 싶은데, 기회가 없다.”

   안녕하세요! 저는 3년차 프론트엔드 개발자입니다.
   최근 학습 과정에서 같은 문제를 각자 풀고, 그 풀이를 공유하며 비교하는 과정이
   개인 성장에 엄청난 밀도를 준다는 걸 직접 경험했어요.

   그래서 준비했습니다.
   하나의 요구사항을 여러 명의 개발자가 각자 해결하고,
   결과를 공유하며 비교·토론하는 진짜 성장형 모의과제 — Moon Cheese 🍕🧀

   이 경험을 더 많은 사람들과 나누고 싶어서,
   프론트엔드 모의과제 Moon Cheese를 만들었습니다.

   💡 참여 포인트
     * 누구나 무료로 참여 가능
     * 완성 후 서로 코드 리뷰까지 진행
     * 다른 사람 풀이에서 배우는 인사이트

   참여하면 아마도
     * “내 코드가 왜 이렇게 복잡하지?”를 느낄 수 있고,
     * “이렇게도 풀 수 있네?” 하면서 놀랄 수 있으며,
     * 다음 프로젝트에서 확실히 달라진 나를 발견할 수 있어요.

   재미있는 시도네요!
"
"https://news.hada.io/topic?id=22498","Show GN: Murmaverse: 백색소음 플레이어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Show GN: Murmaverse: 백색소음 플레이어

   작업하면서 모닥불 10시간, 빗소리 10시간 youtube 영상 정말 자주 듣는데요
   영상 재생하기도 귀찮고 질릴 쯤 three.js 연습하면서 만들어보았습니다.

   이름은 Murmaverse 인데 murmur + universe 조합한거에요

   하단의 버튼을 클릭하면 소리를 발생시키는 요소들이 나타나는데요

   드래그앤드롭으로 움직여서
   화면 중앙에 보이는 헤드폰을 기준으로 소리가 들리는 방향을 바꿔볼 수 있어요

   원한다면 여러 요소를 활성화해서 같이 들을 수도 있어요

     모델과 사운드 파일은 비상업적 사용목적으로 공개된 리소스를 사용했습니다.

   다양한 소리를 추가하고 위치도 다르게하면서 다양한 각도에서 들리게 하는 효과 너무 멋집니다 ㅎㅎ

   관심가져주져서 감사합니다~
   개략적인 컨셉정도만 생각해보고 시작했는데
   만들면서도 three.js 가 제공해주는 기능이 참 많구나 싶어서 구체화하는데 도움이 되었습니다
"
"https://news.hada.io/topic?id=22566","양파 깍둑썰기의 수학적으로 최적화된 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         양파 깍둑썰기의 수학적으로 최적화된 방법

     * 양파를 깍둑썰기 할 때 조각 크기의 일관성을 높이기 위한 수학적 최적화 기법에 대한 이야기임
     * 일반적인 수직 절단과 방사형 절단 방식의 비교를 통해 조각 크기의 표준편차를 산출함
     * 조리 전문가와 수학자의 분석을 바탕으로, 방사형 절단 시 깊이를 조절하면 가장 균일한 조각 생성이 가능함을 확인함
     * 실제 실험 결과, 10개 층의 양파에 10개의 방사형 절단을 겉에서 반지름의 96% 깊이로 하면 가장 적은 표준편차(29.5%)를 달성함
     * 그러나 실제 요리에서는 엄격한 균일성이 필수적인 요소는 아니며, 실용성보다는 수학적 흥미에 초점을 둔 연구임


프로젝트 개요와 목적

     * 수천만 명이 궁금해하는 양파 깍둑썰기의 최적 방법을 수학적으로 분석한 프로젝트임
     * YouTube 등지에서 많은 사람들이 양파를 어떻게 고르게 자를 수 있을지 알아보고 있음
     * 2021년 J. Kenji López-Alt가 수학적 접근을 시도했지만, 실제로는 다양한 방법이 존재함

기본 절단 방식의 비교

  수직 절단

     * 양파를 반으로 자르면, 보통 수직으로 칼질하는 방식을 사용함
     * 중심선 근처의 조각은 형태와 크기가 일정하지만, 가장자리 하단의 조각은 크기가 현저하게 큼
     * 이 불균일함은 조각의 면적별 상대적 표준편차(standard deviation, coefficient of variation)로 측정할 수 있음
     * 상대적 표준편차가 클수록 크기 편차가 심함

  방사형 절단

     * 방사선 방향으로 절단하는 두 번째 방법에서는 중심보다 바깥쪽 조각이 매우 큼
     * 10층 양파에 10개 방사형 절단을 할 경우, 표준편차가 수직 절단(37.3%)보다 큼(57.7%)
     * 즉, 이 방법은 오히려 일관성이 더 낮음

방사형 절단의 깊이 조절

     * J. Kenji López-Alt는 겉에서 반지름의 약 60% 깊이에 목표 지점을 두고 방사형 절단 시 가장 일정한 크기의 조각을 만들 수 있다고 주장함
     * 실제로, 이 방법 사용 시 표준편차는 34.5% 로 감소함
     * 워싱턴칼리지 수학 교수 Dr. Dylan Poulsen의 분석에 따르면, 온전한 수학적 최적 깊이(양파 상수)는 약 55.731% 임
     * 실제 조건(유한 절단, 유한 층수)에서는 각 조건별로 이상적인 깊이가 다름

실제 최적화 결과

     * Kenji의 실험과 Poulsen 교수의 연구를 바탕으로, 10층 양파에 10방사형 절단을 반지름의 96% 깊이로 수행 시 표준편차가 29.5% 로 가장 낮음
     * 다양한 층수, 절단 수, 절단 방법별로 약 19,320개의 조합을 시뮬레이션하여, 최적 절단법을 도출함
     * 수평 절단을 추가해도 일관성에는 별로 도움이 되지 않음
     * 방사형 절단이 대부분 수직 절단보다 균일함을 제공하지만, 항상 중심보다 아래쪽을 겨냥해야 함
     * 층과 절단 수가 커질수록 최적 깊이는 약 55% 부근의 양파 상수로 수렴함

수학적 계산 방식

     * 3차원 원형인 양파를 2차원 단면의 면적으로 단순화하여 분석함
     * 수직 절단 시 각 층의 (상)하 곡선 아래 면적 차이 계산
     * 방사형 절단 시에는 대각선 포함 영역의 면적도 추가 및 차감하여 최종 조각 면적 산출함

실용적 의미와 한계

     * 이론적으로 가장 일관된 크기의 조각을 얻는 방법임
     * 실제 조리에서는 완벽한 일관성보다는 실용성과 편의성이 더 중요함
     * Kenji 본인의 말에 따르면, 이러한 수학적 정확성은 인터넷 논쟁이나 수학 퍼즐 이상의 의미는 없으며, 가정 요리에서는 큰 차이를 만들지 않음
     * 이론적인 최적 깍둑썰기가 실제 맛이나 조리 결과에 특별한 차이를 주지는 않음

결론

     * 수학적으로 최적의 방법을 고수할 필요는 없지만, 양파 깍둑썰기에 대해 수학적으로 접근하는 방식 자체가 흥미로움을 제공함
     * 실생활에서 활용 시, 완벽한 균일함은 필요하지 않으나, 수학적 지식을 뽐낼 수 있는 흥밋거리로 사용 가능함

        Hacker News 의견

     * 나는 이 영상 덕분에 양파 써는 게 훨씬 쉬워졌다는 경험을 말하고 싶음 https://www.youtube.com/watch?v=CwRttSfnfcc 한 번 배우고 나면 계속 이렇게 하게 됨
          + 양파의 위아래 심지를 파내는 일은 굳이 할 필요 없다고 생각함 오히려 시간 낭비이고, 뒷부분에 나오는 뿌리 쪽을 살려서 썰어야 깍둑썰기가 더 잘됨
          + 나도 비슷하게 자르지만, 뿌리를 마지막까지 남겨서 양파의 구조가 무너지지 않게 함 마지막에 뿌리를 한 번만 잘라내면, 모든 조각이 깔끔하고 균일한 크기로 나옴 이 과정이 매우 만족스러움
          + ""효율적""이라는 말에 딱 맞는 영상을 또 공유하고 싶음 https://www.youtube.com/watch?v=eQgIwwKmjdo
          + Chef Jean Pierre가 최고라고 생각함 그의 설명은 한 번만 들어도 기억에 남음 그를 알기 전까지는 요리에 별 관심이 없었음 Ramsay나 Oliver 같은 유명 셰프들도 많이 들어봤지만, 그들은 완벽하게 설명해주진 않음 Jean Pierre는 이야기의 전체를 들려줌
          + 인도 길거리 음식 장인들이 훨씬 효율적으로 써는 걸 본 적 있음 칼의 앞부분을 아래로 고정시키고 뒷부분은 약간 띄운 채 자르면, 그 적은 간격이 한 번에 여러 층을 잡아주고, 양파 90도 돌려 반대 방향으로 자르기만 하면 됨
     * 수평으로 자르는 것이 일관성을 높이지 않는다고 하는데, 대부분 수평 단면을 위아래로 고르게 자르는 건 오히려 비합리적임 수평으로 한 번만 전체 단면의 15~20% 높이에서 자르면 균일함이 더 좋아질 거라 생각함
          + 나도 양파를 이렇게 썸: 세로로 먼저 썬 다음, 도마에서 약간 위쪽에서 한 번만 수평으로 썸 다양한 각도나 방향으로 썰어도, 수직 위주로 썰고 마지막 몇 번만 각도를 안쪽으로 약간 기울이면 더 최적화된 분포를 얻을 수 있음
          + 25년 전 주방에서 일할 때도 딱 이렇게 배웠음 양파가 또 다른 방향으로도 둥글다는 점을 이 계산법은 무시하는 것 같음 사실상 첫 번째 짓 칼질만 다루는 듯함
          + 영상에서 수직으로 썬 부분의 문제 영역이 양파 밑부분에 집중된 게 보였음 밑쪽에 수평 단면을 더 추가하면 훨씬 개선됐을 거라 생각함
     * 가장 균일한 결과를 주는 건 바로 이 onion dicer임 https://latacocarts.com/products/onion-dicer 예전에 패스트푸드점에서 일할 때 사용했는데, 0.5초에 한 개의 양파를 썰어내고, 나온 조각은 완벽한 정사각형이었음 햄버거 위에 잘게 다진 양파가 어디서 왔는지 궁금했다면, 바로 이 기계임 다만, 칼날이 너무 예리해서 청소하기가 정말 힘들었고, 매주 한 명씩은 손을 베었음
     * 양파를 완전히 써는 것이 아니라 반쯤만 써는 방법을 고려하지 않은 점이 아쉬움 방사형으로 칼질할 때, 번갈아 가며 절반 두께만 썰어주면 안쪽 조각이 너무 작아지는 걸 막을 수 있음 많은 수학이나 분석이 최적의 방법을 찾았다고 주장하지만, 더 나은 방법이 있는데 이를 종종 간과함 ""수학적으로 최적""이라고 주장하는 걸 너무 진지하게 받아들이지 않음 실제로 그렇지 않은 경우가 많음
          + 나는 양파를 반쯤 써는 것까지 신경 쓰긴 무리라고 느낌 그냥 매번 끝까지 도마까지 확실히 써는 걸 선호함
     * 균일함만 중요한 목표인가를 되묻고 싶음 보통은 깍둑썰기 할 때 어느 정도 이하의 크기만 만족하면 요리할 때 잘 익고 쉽게 녹음 전체 조각이 50%, 20%, 80% 크기여도 상관없음 1~2번 수평 썰기와 여러 번 수직 썰기가 가장 안전하고, 쉬운 방법임 이 방법은 양파링, 볶음 등 다양한 용도에 확장 적용 가능함
          + 평균값 기준 표준편차로만 평가하는 건 정확하지 않음 너무 큰 조각이 작은 조각보다 안 좋음
          + 균일한 크기가 익힘의 균일함에 중요하다고 생각함 어떤 조각이 평균보다 두 배 크면, 나머지가 다 익어도 이 큰 조각은 덜 익게 됨 반대로 평균보다 절반 크기면 나머지가 익을 때 이미 타버릴 위험이 있음
     * 머리로는 퍼즐처럼 재밌긴 하지만, 늘 양파 조각의 균일함이 최우선이라는 게 의심스러움 균일함 덕분에 익힘이 잘 맞겠지만, 많은 요리에서 그런 게 꼭 필요한가 싶음 질감과 대비도 충분히 매력적인 요소임
     * 표준편차로만 평가하는 건 아쉬운 접근임 큰 조각을 피하는 게 중요한데, 작은 조각을 벌점으로 따지는 건 효과적이지 않음
          + 사실상 중요한 건 ""표준"" 편차 자체가 아니라 목표 크기에서 얼마나 벗어났느냐임 아마 ""최대 크기를 넘지 않으면서 최소한의 직선 칼질로 모든 조각을 만들어내는 게"" 더 현실적인 문제임
          + 표준보다 큰 조각만 표준편차로 줄이면 좋을 것 같음 그런 방식으로 결과를 다시 분석해보면 정말 흥미로울 것 같음
     * 수학적 답을 쉽게 설명하자면, 반쪽짜리 양파를 무지개 반쪽이라고 생각하면 됨 표면 아래엔 양파의 또 다른 무지개 반쪽, 즉 구 형태가 숨어 있음 보통대로 칼을 10번에 걸쳐 위치시키는데, 그때 도마 쪽으로 수직이 아니라 아래 숨은 구의 중심방향으로 약간 각도를 주어 자름 손가락 안전 확인은 필수임 나이프가 플라즈마 커터가 아니라면 도마에서 멈추게 되고, 무지개 끝부분의 양파는 그대로 남음 다음 자를 위치로 칼을 옮겨서 반복하면 됨 이 방법으로도 기존 방법 대비 좋은 균일도를 기대할 수 있음 1% 정도만 손해보고, 100% 반지름을 목표로 할 수 있음
          + ""칼을 보통대로 양파 위에서 10번 위치시키라""는 말이 정확히 무슨 뜻인지 궁금함 나처럼 양파 썰기를 안 해본 사람은, 사전단계로 어느 축을 기준으로 반을 자르는지도 모를 수 있음
     * 양파 깍둑썰기 분석에 진지한 사람들이 재미있음 조금 손질법이 발전해도 실질적인 보상이 크지 않을 수 있음 그러나 서양 요리에서는 거의 매 끼니 필요한 작업임 한번 배워두면 매번 시간 절약이 되니, 이런 연구나 고민이 합리적이라고 생각함
          + 많은 사람들이 ""수학적으로 최적""인 방법의 의미 자체를 문제 취급함 실제로 Lopez-Alt도 ""인터넷 논쟁이나 수학 문제로는 흥미롭지만, 요리할 때는 별로 의미 없다""고 언급함
     * 나는 일주일에 두 번 Pico de Gallo를 만들면서 양파를 정말 많이 썸 내 관심사는 균일도도 있지만, 손끝을 다치지 않는 게 더 중요함 방사형으로 180도를 썰거나 수평 단면을 추가하는 건 불안정해서 잘 안 됨 내 방식은 양파를 4등분해서, 그 조각을 세로로 썬 뒤 90도 돌리고 한 번 더 세로로 썬 다음, 마지막에는 길게 써는 것임
"
"https://news.hada.io/topic?id=22503","Show GN: 핫딜모음 만들어보았습니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 핫딜모음 만들어보았습니다.

   여러 커뮤니티에 있는 핫딜을 한곳에 모아 볼수 있습니다.
   퍼플렉시티 api를 활용하여 핫딜 가격도 비교할수 있도록 하였습니다.

   아직 많이 부족하니 피드백 부탁드립니다!

   오, 좋은 사이트네요.
   저도 이런 모음 사이트(?)를 만들어 보고 싶은 꿈이 있는데 수집은 어떤 식으로 하는지 알려 주실 수 있을까요?
"
"https://news.hada.io/topic?id=22612","오픈소스 잔디깎이 로봇 OpenMower 소개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       오픈소스 잔디깎이 로봇 OpenMower 소개

     * OpenMower는 저렴한 시중 로봇 잔디깎이를 RTK GPS 기반의 스마트 자율주행 로봇으로 업그레이드할 수 있는 오픈소스 프로젝트임
     * 주요 목표는 자율 잔디깎이, 우수한 안전성, 경계선 배선 불필요, 저비용 및 완전한 오픈임
     * 기존 제품 하드웨어는 견고하며 변경 없이 소프트웨어 업그레이드로 충분한 성능 확보 가능함
     * 현재 기본 기능은 작동 중이며, 지도 학습·자율 주행·충전 등 핵심 작업 구현됨
     * YardForce Classic 500 등 일부 제품만 하드웨어 호환이 가능하나, 추후 타 로봇에도 확장 기대됨


프로젝트 개요

   OpenMower는 시중에서 쉽게 구할 수 있는 로봇 잔디깎이(YardForce Classic 500 등)를 분해하여, 그 위에 최신 RTK GPS와 소프트웨어를 적용함으로써 저렴하면서도 스마트한 자율 잔디깎이로 탈바꿈시키는 오픈소스 하드웨어/소프트웨어 프로젝트임
     * 기존 잔디깎이 로봇은 무작위 방향 주행만 지원하며, 효율성과 똑똑함이 떨어짐
     * 분해 결과, 브러시리스 모터 사용, 방수성 및 견고성, 표준 커넥터 채택 등 하드웨어 품질은 우수함
     * 실질적 업그레이드 포인트는 소프트웨어임

프로젝트 목표

     * 완전 자율 잔디깎이 구현
     * 우수한 안전성: 들어올림/충돌 시 긴급 정지 등 비상 대응
     * 경계선 배선 없이 여러 구역 지원
     * 저렴한 비용: 시중 중가 제품보다 비용 절감 목표
     * 오픈소스: 누구나 제작 및 지식 확장 가능
     * 깔끔한 디자인
     * 장애물 회피 기능
     * 우천 감지 및 악천후 시 자동 중지

Open Mower App

     * 스마트폰을 통한 직관적 조작과 시각화 지원 앱 제공

현재 개발 현황

     * 기본 잔디깎이 기능 완성: 지도 학습, 경로 설정, 잔디깎이, 자동 도킹(충전 시 복귀 및 재개) 등 작동 확정됨
     * 기술력 있는 사용자라면 직접 제작 권장
     * 비용과 복잡도가 높으므로 궁금증은 Discord, Wiki 등 커뮤니티에서 질문 및 지원 가능

  하드웨어

     * 메인보드 및 xESC mini/xESC 2040 등 서보 모터 컨트롤러로 구성
     * xESC 2040은 RP2040 칩 기반의 저가형 컨트롤러이며, 현재 실험적 지원 단계
     * To-Do 항목: 배터리 잔량 정확도 개선 등 일부 하드웨어 기능 추가 예정

  소프트웨어

     * 잔디깎이 상태 관리(도킹/작업 등)와 경로 생성 기능 개발 완료
     * 장애물 회피 기능은 미구현 상태임
     * ROS 기반 오픈소스 소프트웨어는 별도 저장소에서 관리

제작 및 시작 가이드

     * 공식 웹사이트와 Wiki에 필요 부품, 소프트웨어 설치법, 커뮤니티 가이드 등 안내
     * 커뮤니티 기반으로 다양한 추가 자료 지속 추가 중

참여 및 커뮤니티

     * 직접 OpenMower 제작에 도전하거나, 저장소 star 및 watch로 개발 활성화에 기여 가능
     * 공식 YouTube 및 Discord를 통해 정보 교류 가능

호환 하드웨어

     * 현재는 YardForce Classic 500 및 일부 Herkules/SA650 ECO 모델과 보드 호환
     * 같은 보드를 사용하는 중국산 SUMEC Hardware OEM 제품도 일부 존재하나 확장성은 한정적임
     * 호환 제품 목록 공유/확장을 위해 분해 정보와 보드 사진을 커뮤니티에 제출 권장

추가 안내 및 특이사항

     * 각국의 특허, 법률 및 안전 규정 확인 필수
     * 제공 자료는 실제 동작·적합성·법적 문제에 대해 어떠한 보증도 제공하지 않음
     * 제작/사용에 필요한 기술적 전문성이 요구됨
     * 상업적 사용 및 재판매는 개발자 동의 필요, 비상업/교육 목적으로 개인 사용 권장

라이선스

     * Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License로 공개
     * 비상업적 및 교육적 활용 자유, 상업적 이용 및 상품화는 개발자 동의 필요

요약

   OpenMower는 저비용 상용 로봇 하드웨어에 오픈소스 소프트웨어를 적용해 스마트 자율주행 잔디깎이로 변환할 수 있게 해주는 혁신적 DIY 프로젝트임. 긴밀한 커뮤니티 지원, 상세한 문서/위키, 하드웨어/소프트웨어 개방 등으로 동일 계열 제품군 활용, 비용 절감, 진입 장벽 감소의 강점이 있음.

   비교적 적은 하드웨어 변경과 커뮤니티 지원 덕분에 기존 프로젝트들 대비 쉽게 접근할 수 있으며, 개인 및 DIY 엔지니어에 적합함.

        Hacker News 의견

     * 최근 출시된 로봇 잔디깎이는 무작위로 움직이지 않고 대부분 체계적으로 구역을 나눠 깎는 방식임을 알게 됨, 실제로 구매하고 조사한 결과 Worx Landroid만 랜덤 방식이었음, 선을 설치하지 않아도 되는 모델을 원해서, 손이 덜 가길 바라는 마음이 컸음, 결국 eufy E15를 선택했는데 카메라 기반으로 별도 설치 없이도 지도를 만든 후 체계적으로 움직임, 거의 손댈 일 없음, 해당 제품과 아무 관련 없고 순수하게 만족해서 추천함, 오픈소스 버전이 있으면 더 좋겠다는 생각임, 해당 프로젝트는 GPS만 사용하는데, GPS가 잘 동작은 하지만 커버리지 문제 있는 경우 있음, 카메라는 낮에 항상 잘 동작하기에 프로젝트에 카메라 추가도 고려해 보면 좋겠음, 물론 카메라는 복잡하고 오류 가능성 있겠지만 전체적으로 더 신뢰성 있는 솔루션일 수 있음
          + 나는 Husqvarna를 사용하는데 매우 만족함, 이 제품도 무작위로 잔디를 깎음, 3년간 외부 잔디업체에 맡긴 적 없었고, 가장 신경 써야 할 작업은 가장자리와 나무 정리뿐임, 내 집 마당은 평평하고 5000 sqft 정도 크기임
          + 선이나 GPS가 없으면 쉽게 도난당하지 않을까 걱정임
          + GPS나 카메라 대신에 로컬 포지셔닝 시스템을 적용하는 것도 방법일 것 같음, 마당 주변에 태양광 비콘 3개 정도만 설치해도 될 것 같음
          + 마당이 얼마나 크고 평평한지 궁금함, 내 마당은 넓고 한쪽은 경사가 있어서 적용이 가능한지 고민임
     * Valetudo처럼 잔디깎이 버전인가 싶음, 매우 흥미로움, 로봇청소기와 잔디깎이 간 코드가 얼마나 겹치는지 궁금함, Valetudo 링크
          + 이 내용 덕분에 Valetudo를 처음 알게 되었고 매우 흥미롭게 보임, 7년 된 내 청소로봇을 ""업그레이드"" 해볼까 생각 중임
          + Valetudo와 달리 이 프로젝트는 기존 잔디깎이의 섀시와 모터만 쓰고 전자장치는 완전히 교체함
          + 소개해 준 링크 매우 유용함, 앞으로 Valetudo와 Openmower 모두 써볼 계획임, 보안카메라 분야에도 이런 오픈소스 대안 있으면 좋겠음
     * 솔직히 말해서, 랜덤하게 움직이는 현재 세대 로봇 잔디깎이가 실제로는 꽤 잘 동작함, 경계선을 위한 와이어 설치는 번거롭지만 한 번 하면 로봇이 경계 밖으로 나가지 않아서 매우 효과적임, 랜덤 경로도 기대 이상으로 효율적임, ""스마트"" 로봇이 뭐가 더 나은지 궁금함, 만약 경계와이어 없이 100% 완벽하게 동작한다면 의미가 있을 것이고 장애물 감지도 있으면 좋겠음, 아이가 두고 간 장난감을 잘라버리는 일도 막을 수 있기 때문임
          + 나는 Mammotion Yuba를 사용 중이고, 격자나 직선으로 깎은 결과가 무척 아름다움, 로고도 가능함, 랜덤한 방식보다 훨씬 빠르고 결과도 뛰어남
          + 장애물 회피 기능이 소프트웨어 측에서 남은 가장 큰 과제로 보임, 위치 지정은 RTK GPS 센서 등 다양한 선택지 있음, 만약 가이드 와이어가 ""탈출 방지"" 용도로 남아있는 것도 괜찮다고 생각함
          + 경계와이어 방식의 로봇이 아무리 잘 동작해도, 최신 세대 로봇이 ""별로""라는 것엔 동의할 수 없음, 실제로 내 Mammotion Luba 2는 하드웨어, 위치정확도 모두 훌륭하고 소프트웨어는 개선 여지는 있어도 꽤 괜찮음
     * 로봇 잔디깎이의 실제 날 구조가 궁금할 때 이 이미지 참고 바람, Sunseeker X7을 구입해서 약 4에이커 공간에 사용 중, 그 중 실제 잔디는 2에이커 정도이고 나머지는 정원이나 도로임, 하드웨어는 충분히 준비됐고 이제 소프트웨어가 핵심임, 소프트웨어 업데이트만으로 크게 개선될 수 있음을 경험 중임, Sunseeker는 카메라 기반(아직 LiDAR 없음), 로봇 잔디깎이는 인간보다 뛰어남, 조건만 맞으면 영양순환이 잘 이뤄지고, 블레이드 길이나 계절별 세팅 가능함, 특히 밤 3시에 돌릴 수도 있기 때문에 보안이나 야생동물 모니터링 등 다양한 활용이 떠오름, 가격대비 중국 제품이 성능이 좋은 것 같았음, 앞으로가 정말 기대되는 기술임
          + 밤에는 야생동물, 특히 고슴도치 같은 야행성 동물 보호를 위해 작동을 삼가야 함
          + 야생동물이 로봇 잔디깎이에 다치거나 제대로 걷지 못하게 될 수 있으니, 주간에만 운행하는 것이 중요함, 많은 지역에서 고슴도치는 멸종위기종임
          + 가격이 아직은 높음, 겨우 로봇청소기보다 조금 튼튼한 정도인데 중고차 값임, 저가형 업체에서 두 대 구입했으나 모두 모터불량으로 반품함, 교체 모터만 150유로였고, 베터리는 자체 18V 공구베터리를 사용해 쉽게 교체할 수 있다는 점이 매력적이었음
          + 내 아버지는 Husqvarna 430x를 최근 구입했는데, 1에이커 언덕 마당도 아주 잘 깎음, 정원 일부 진입이 어렵긴 하지만 이건 소프트웨어로 개선될 것으로 기대함
          + 웹사이트에는 X7이 0.75에이커 커버 가능하다고 나와 있는데, 실제로 4에이커에 사용 중이라 어떻게 적용했는지 궁금함
     * 완전한 하드웨어 자작 프로젝트인 줄 알았음, 로봇 잔디깎이에 확신은 없지만 라이딩 잔디깎이는 수요가 높고 가격도 말도 안 됨, 내 라이딩 잔디깎이 두 대 모두 고장났고, 하나는 고가의 배선 하네스를 교체해야 화재가 안 남, 또 다른 것은 30년씩 동일하게 쓰인 구식 1기통 엔진이 매년 1~4번은 스스로 망가지는 디자인임, 신품과 중고 모두 인플레이션 대비해 진짜 비쌈, 한 대 분해해서 Ryobi 전기모터와 아마존 컨트롤러로 전동화 개조하기로 함, 휠은 드라이브 전용, 칼날 별도 개별 모터 적용, 복잡한 벨트/풀리/클러치 대신 간단함, Ryobi 40V 배터리 재활용 가능해서 별도 BMS/충전 개발 필요 없이 커넥터만 맞추면 됨, 전동화 변환 계획과 그에 맞는 제대로 설계된 프로젝트가 나왔으면 좋겠음, 중고 모터와 컨트롤러 가격도 각각 $50 수준임
          + 최신 기술과 미국산 장기 보증 배터리로 바이오 복합소재 UTV를 설계했는데, John Deere Gator를 대체할 만한 수준임, NEV(Carve-out) 규정이 흥미로움, RC카를 대형화해 보다 심플하게 보는 시각이 중요함, Lincoln과 Tesla처럼 불필요한 기능을 계속 추가하는 것은 지양하고 EV는 단순함이 목적임
          + 최근 신차/중고 가격이 현실보다 너무 급등하는데, 이제는 공식 인플레이션 수치가 실제와 다르다는 가설을 세워도 될 수준임
     * 90년대에 우리 동네에서 잔디깎이를 자작하던 기억임, 아버지가 세탁기 모터, 유모차 바퀴, 폐철 등으로 뼈대를 직접 용접해 만들어서, 여러 사람이 아이디어를 복사하거나 함께 만들며 오픈소스 느낌이었음, 그럼에도 꽤 쓸만했던 기억임
          + 내 삼촌도 고장난 엔진 대신 오래된 전기드릴로 반DIY 잔디깎이를 만들어서 오랫동안 사용했었음
     * 새로운 도전을 찾는다는 글을 보고, 자동으로 길가 쓰레기를 주우며 칼트랜스(Caltrans)에 팔 수 있는 잔디깎이 개조를 제안하고 싶음
     * 꿀벌 보호 등의 이유로 잔디를 깎지 않는 것이 더 좋을 수도 있다는 생각임, 관련 논문 링크
     * 재미있는 프로젝트임, 몇 년 전에 푸시 릴 잔디깎이에 자율주행 섀시를 직접 얹어봤음(손잡이는 제거), 보통 로봇 잔디깎이는 작은 칼날을 쓰지만 릴 잔디깎이는 손가락이 다칠 수 있어 안전성은 떨어짐, 그래도 유지보수는 칼날만 매달 교체하면 끝, GPS 대신 라이다를 선택했는데, RTK GPS는 호불호가 심해서 안 쓰고 싶었음, 라이다 방식이 나한테는 성능이 아주 좋았고 1주일에 1번만 돌려도 품질이 환상적임
          + 혹시 사진이나 영상을 공유해 줄 수 있는지 궁금함, 나는 푸시 릴을 전동화 개조만 했는데, 앞으로 구동 바퀴마다 별도 모터를 달아 자율주행까지 시도하고 싶음, 경험을 보고 배우고 싶음
     * 미국에서 1400제곱미터 잔디마당에 오픈모워를 사용 중이고 궁금한 점 뭐든 질문받음, 참여 희망하면 공식문서나 깃허브보다 Discord가 가장 활발함
          + 미국에서 필요한 하드웨어 구하기가 얼마나 어려웠는지 궁금함, 비용/조달 측면에서 쉽지 않아 보임
          + 오픈모워 설치 시작부터 완전히 셋팅 끝난 시점까지 시간이 얼마나 걸렸는지 궁금함
          + 공식 정보상 장애물 회피 기능이 없는 것으로 보이는데 실제로는 어떻게 장애물을 처리하는지, 센서라도 있어서 부딪히면 우회하는지, 그게 주요 궁금점임, 그리고 실제 사용 기간과 가동정지(downtime) 시간은 얼마나 됐는지도 궁금함
"
"https://news.hada.io/topic?id=22549","Show GN: AI 위젯 빌더 오픈소스입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Show GN: AI 위젯 빌더 오픈소스입니다.

   안녕하세요,

   AI와 코드 에디터가 결합된 위젯 빌더 오픈소스 프로젝트입니다.

   본 프로젝트는 기존 운영중인 서비스에 AI를 어떻게 통합할 수 있을지 도움을 받을 수 있도록 구성되었습니다.

   위젯목록
생성된 위젯 목록입니다.
위젯 만들기 버튼으로 새 위젯을 생성합니다.
제작 아이콘이나 제목을 클릭하면 위젯빌더 화면으로 이동합니다.

   위젯 빌더
좌측이 AI와 대화하는 채팅 화면입니다.
이미지를 클립보드로 복사한 뒤 채팅창에 붙여넣기하면 이미지를 첨부하여 AI 에게 작업지시가 가능합니다.
AI는 사전 정의된 위젯 구조에 맞게 데이터를 생성합니다.
AI가 코드를 작성한 뒤에 ""미리보기"" 아이콘을 눌러 위젯을 숨겼다 보이면 AI가 작성한 코드가 재반영 됩니다.
동작이 원한하게 완료되면 반드시 ""저장"" 버튼을 눌러 작업 내용을 저장합니다.

   기타 내용은 글 저장시 계속 실패가나서 ㅠㅠ github 에서 확인해 주세요...
"
"https://news.hada.io/topic?id=22542","미국 도매물가, 최근 3년간 최대 상승폭 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       미국 도매물가, 최근 3년간 최대 상승폭 기록

     * 미국 도매물가가 최근 3년 만에 가장 큰 폭으로 상승함
     * 해당 결과는 도매 인플레이션 압력이 다시 고조되는 신호로 해석됨
     * 이로 인해 연준의 금리 정책에 대한 시장의 불확실성 증가 예상됨
     * 기업들의 원가 부담이 늘어날 가능성 제기됨
     * 인플레이션 지속 시 소비자 가격 상승 압력으로 이어질 우려 있음


미국 도매물가 최근 3년간 최대 상승

     * 미국의 도매물가 지수가 최근 3년 중 가장 큰 상승폭을 보임
     * 이러한 결과는 인플레이션 압력이 다시 높아지고 있음을 시사함
     * 경제 전문가들은 생산자 물가(PPI)의 상승이 이어질 경우, 기업들의 원가 상승 부담이 커질 수 있다고 전망함
     * 도매물가 상승이 지속될 시, 소비자 물가로도 전이되어 소비자 인플레이션으로 이어질 우려가 있음
     * 이에 따라 연방준비제도(Fed) 의 금리 정책에 대한 시장의 불확실성이 확대되는 상황임

        Hacker News 의견

     * 정부가 통제하지 않는 인플레이션 지표가 있는지 궁금함, 트럼프의 영향이 있는 기관에서 나오는 데이터는 더 이상 신뢰할 수 없다고 생각함
          + 역사적으로 가장 완전하고 신뢰받는 데이터는 정부 지표였음, 이 분야에서는 정부가 최고였거나, 적어도 그랬었음
          + 자가적으로 데이터를 수집하는 연구도 있었음, 대표적으로 MIT Billion Prices Project가 있음
          + 다양한 인플레이션 지표가 존재하지만 이는 정밀한 과학이 아님, 정부 공식 수치는 항상 실제보다 낮게 발표되는 경향을 신뢰함, 그럴 유인이 명확함, 장기적으로는 금 가격이 더 신뢰할만하다고 생각함
          + 어느 정부라도 공식 통계는 신뢰하지 않음, 누가 정권을 잡든 결과를 좋게 보이도록 수치를 조작할 압박이 항상 존재함, MIT의 Billion Prices Project가 더 높은 인플레이션을 보여줬기 때문에 수년 전에 중단된 것으로 알고 있음, 펀딩이 끊겼던 것으로 추정함
          + 인플레이션의 본질을 이해하려면, 지난 50년간 미국의 장기 인플레이션이 매우 낮았던 사실을 이해해야 함, 70년대 스태그플레이션을 제외하면 그렇다고 볼 수 있음, 글로벌화와 세계 무역 덕분에 이런 상황이 가능했음, 세계화는 노동비용과 환경 규제에 대한 차익 거래를 가능하게 했음, 중국 등 빈곤국이 극한 조건에서 제품을 생산해줬던 구조였음, 하지만 이제 중국도 빈곤 탈출을 했고 도시화가 진행됐음, 다른 가난한 나라도 더 이상 예전만큼 절박하지 않음, 세계화는 미국 해군과 군사력에서 비롯된 해상 무역질서 덕분임, 그러나 이 구조는 역사적으로 매우 이례적임, 2차대전과 냉전이라는 권력 공백기 덕에 가능했던 현상임, 중국은 대륙·해양 하이브리드 성격을 띠고 있어 해양 패권에 도전하는 움직임이 있음, 미국이 글로벌 질서 유지에
            소극적으로 변함에 따라 세계화는 끝나갈 가능성이 높아짐, 생산을 다시 미국으로 돌리는 “온쇼어링”이 등장할 수 있음, 이런 변화에는 막대한 전환 비용이 들 것이고 이것이 결국 인플레이션임, 트럼프의 경제 정책이 맞다고 하는 건 아님, 이런 전환은 점진적이고 통제된 방식으로 이뤄져야 함, 어설픈 관세 정책이 아니라는 뜻임, 그럼에도 트럼프의 움직임이 전체 흐름과는 일치함
     * 누군가 또 해고 위기에 처한 듯 보임, 진실을 말하는 건 금기라는 사실을 잊었나봄
          + 행정부가 가진 문제는, BLS에 있는 경제학자들이 해고를 안 두려워한다는 점임, 그 경력이 민간에서 황금 티켓이기 때문임, 금융권에서 3~4배 연봉을 받으며 바로 이직할 수 있음
          + 아마도 이미 조작된 수치라서 누군가 자리를 지킬 수 있었던 건 아닐지 의심이 듦
     * 기사 아카이브
          + 해당 뉴스의 업데이트 버전
     * 수입 원자재·재료·중간재에 세금을 매기면 생산자 물가가 오른다는 점, 너무 당연한 일임
          + 꼭 그렇진 않음, 총임금에 따른 세액공제 방식을 도입하면 저임금 노동자의 몫을 높여 수입재 세금 인상 효과를 상쇄할 수 있음, 정부와 가계 모두 세수와 실질 구매력을 얻음, 주주도 내수 확대 효과가 있어 이겨갈 수 있음, 연준이 목표 인플레이션과 현재 인플레이션 차이만큼 상수에 반영해서 조정하는 장기적 인센티브 레버로도 활용 가능함, 해고 억제책도 포함 가능함, 이런 방식은 현재 미 정책에 반영돼 있지 않지만 법률 개정만으로도 도입 가능함, 현재 구조가 필연적인 것만은 아님을 강조함
     * 신선 및 건조 야채의 도매가는 전월 대비 무려 38.9%나 상승함, 통계표 5번째 행 참고
     * 서비스 비용 급등이 다소 놀라운 부분임,

     서비스 인플레이션이 7월에 1.1% 상승해 2022년 3월 이후 최고치 기록, 트럼프 관세 도입과 관련됨 서비스 비용 상승 중 30%는 기계·설비 도매가 3.8% 상승에서 비롯됨, 포트폴리오 관리 수수료는 5.8% 급등, 항공 여객 서비스 요금도 1% 오름 관련 기사(CNBC) 7월 소비자물가도 완만한 상승을 보였으나 치과·항공 등 서비스 가격으로 근원 인플레이션이 6개월 만에 최대 상승폭 기록 연준의 금리 인하 가능성이 점쳐지는 가운데, 서비스 인플레이션 및 관세로 인한 추가 상승 기대감에 정책 완화가 쉽게 이뤄지긴 어려울 것으로 예상됨 관련 기사(Reuters) 연준이 정책 결정시 참고하는 것에는 인플레이션 외에 고용도 있음, 최근 고용 관련 데이터 개정이 트럼프-BLS 갈등 원인이 됨, 미국의 스태그플레이션 위험이 커지는 듯함 스태그플레이션이란? 위키피디아: Stagflation 폴
     크루그먼 Substack: It's beginning to smell a lot like...
          + 현재 정책은 마치 스태그플레이션을 목표로 하는 것처럼 보임, 예측할 수 없는 관세로 실질적 성장을 질식시키고, 엄청난 양의 돈을 찍어내는 구조임
     * 2.8% 인플레이션은 그렇게 심각해 보이지 않음, 연준이 2~2.5%를 목표로 하지 않나?
          + 연준의 2% 목표는 PCE(소비자 물가지수) 기준이고, 이번에 발표된 수치는 PPI(생산자 물가지수)임, 두 지표가 항상 1:1로 움직이진 않지만, 대체로 PPI가 선행 지표로 작용함, 이번 데이터에 관심을 갖는 것은 관세 영향이 반영되는 초반 신호로 보임, 특히 단기간 급격한 상승세가 문제임
          + ""식품, 에너지, 서비스""를 제외한 변동성 적은 PPI가 연간 2.8% 상승임, 이번 달만 따지면 0.6% 상승, 앞으로 몇 달간 같은 상승세가 지속된다면 연간 7.2%까지 이를 수 있음, 헤드라인 PPI는 월 0.9%, 연 3.3%임
          + 월 0.9%면 연환산 11.3%에 해당함
          + 월 0.9% 증가면 의미 있는 수치임
          + 2024년 11월 인플레이션이 2.7%, 연간 2.9%였음, 이 수치에 대중이 격분해 결국 정권 교체가 일어났음
     * 어떤 문제가 있든, 적어도 유니콘 벤처펀딩은 그 원인이 아님, 확실하게 말할 수 있음
          + 혹시 맥락을 잘못 이해했는지 모르겠지만, 이곳에서는 VC에 대한 비판이 많고, 시스템에 대한 신랄하고 정확한 비평이 넘침, 도메인명이 토론 분위기나 내용에 영향을 끼치진 않는 것 같음
          + 내가 약 20살쯤에 Sean Hannity를 들으며 성장했음, 지금은 그와 동의하지 않지만 그의 세계관을 접할 수 있었던 게 의미있었음, 시장경제 성공의 조건이란 좋은 품질-가격을 시장 경쟁을 통해 제공하는 것이라 들었지만, 진짜 성공 비결은 권력-재력을 가진 이들에게 인정 받아 경쟁을 줄이는 전략에 있음을 깨달음
     * 내가 오랜 기간 머문 나라 중에서, 공식 인플레이션 통계가 대중들에겐 우스꽝스럽게 여겨지지 않은 곳이 없었음, 내 경험에도 잘 들어맞았음, 가격지수 계산에 현실을 감출 여지가 많음, 가계 체감 비용을 반영하지 못함, 버터가 너무 비싸 마가린을 사게 된다면 둘 다 똑같이 계산되고, 버터 값 상승은 마가린 하락으로 상쇄되어 평균상으로는 ‘무인플레이션’ 표시가 나옴, 버터 선호자는 영향을 받음, 주택도 전국 평균으로 하면 일부 지역은 폭등해도 쇠락하는 지역 가치는 폭락함, 실제론 일자리 없는 싼 동네 가격 하락이 의미 없음, 80인치 TV처럼 흔해졌다지만, 정작 집값이 급등해 대부분 시민이 언제든 노숙 위험에 놓여 있다면 TV가 싸진 게 무슨 의미임?
          + 대부분 사람이 자기만의 인플레이션 지수를 만드는 게 나을 수 있음, 실제 소비의 대부분은 주거비와 식비임, 최근 금리 인상과 식비 상승으로 실제 체감 인플레이션이 큰 사람도 많을 것임, 물론 학문적 정의와 다를 수 있지만 현실에 중요한 건 그게 아님
          + 대중의 체감과 현실은 일치하지 않는 경우가 많음, 대중의 감정은 참고하되 결론을 낼 때 신뢰하지 않음, 검증 가능한 수치와 논의가 필수임
          + 미국의 경우 물가 지수의 가중치는 수시로 변하는 게 아니라 여러 해 단위로 조정됨, 단기적으로 대체 소비가 심해도 바로 반영되진 않음, 물론 조작하려면 월별로 가중치를 바꿔버릴 수도 있음
          + 생산자 물가지수(PPI)는 도매가를 추적함, 지역성 영향이 적고, 주택 가격 반영도 아님, 소비자 인플레이션의 선행 지표 역할임
          + 완벽하진 않더라도 대체 가능한 지표가 필요함, 뭔가라도 측정해야 정책 판단이 가능함
     * 현 정부가 금리 인하를 계속 추진 중임
"
"https://news.hada.io/topic?id=22548","Hetzner 계정에서 직접 Kubernetes 클러스터 구축 (Edka)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Hetzner 계정에서 직접 Kubernetes 클러스터 구축 (Edka)

     * Edka는 사용자가 Hetzner 계정에서 손쉽게 Kubernetes 클러스터를 직접 구축하고 관리할 수 있도록 지원함
     * PaaS 수준의 간편함을 제공하면서도 유연성을 잃지 않는 환경 제공
     * GitOps 기반 워크플로우와 원클릭 애드온 설치, 내장 모니터링 기능 등 다양한 기능 통합
     * 기존의 복잡한 Kubernetes 운영 과정을 간소화할 수 있음
     * 스타트업 및 IT 전문가에게 자율적 플랫폼 관리 경험을 제공함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Edka 개요

     * Edka는 사용자가 자신의 Hetzner 계정 내에서 Kubernetes 클러스터를 생성, 확장, 관리할 수 있도록 지원하는 플랫폼임
     * 복잡한 인프라 설정 대신, GitOps 워크플로우를 통해 인프라 관리 자동화가 가능함
     * PaaS(Platform as a Service) 수준의 단순함을 유지하면서도, 확장성과 구성의 유연성을 함께 제공함

주요 특징

     * 원클릭 애드온: 다양한 Kubernetes 애드온을 원클릭으로 설치 및 적용할 수 있음
     * 내장 모니터링: 별도의 도구 없이 즉시 클러스터 상태 및 리소스 현황을 모니터링할 수 있음
     * 확장 및 관리: 필요에 따라 클러스터 크기 조정과 관리를 간편하게 실행할 수 있음

장점 및 대상

     * 전통적인 Kubernetes 운영 복잡성 제거로 초보 개발자도 쉽게 인프라 관리가 가능함
     * 직접 비용을 제어할 수 있는 자기 계정 기반 서비스로, 벤더 락인 우려 감소
     * 스타트업 및 IT 전문가가 자율적으로 클러스터 관리와 DevOps 워크플로우를 구축할 수 있는 환경 제공

        Hacker News 의견

     * 정말 뜻밖의 행운임, HN에서 피드백까지 받고, GitHub에서 rate limit 당함(이건 금방 해결함) 그 후에 Hetzner에서 일부 장애가 발생해서 새 클러스터 생성이 제대로 안 됨 많은 분들이 관심 보여줘서 정말 감사함 이건 사이드 프로젝트였는데 이렇게 되리라고는 전혀 예상 못 했음 앞으로도 계속해서 플랫폼을 개선하고 피드백 반영해볼 예정임
     * 기존에 잘 알려진 kops(https://github.com/kubernetes/kops)처럼 Hetzner 지원하는 툴과 어떤 차이가 있는지 궁금함
          + 아마 현재 가장 쉬운 툴은 https://github.com/vitobotta/hetzner-k3s임 여러 옵션이 있고, 얼마나 저수준에서 다루고 싶은지에 따라 다름 Hetzner terraform 프로젝트는 가장 복잡하고 완벽한 옵션이지만 설정에 시간이 많이 듦 핵심은 Hetzner에서 Kubernetes뿐 아니라 ingress controller, prometheus, elasticsearch, 데이터베이스 등 Kubernetes 기능 확장에 필요한 애플리케이션을 쉽게 배포할 수 있도록 단순화하는 데 초점이 있음
          + Talos도 있음, Hetzner 지원하고, 꽤 streamlined한 편임 완전 동일한 아이디어는 아니지만 거의 비슷함 https://talos.dev/v1.10/talos-guides/…
          + https://github.com/vitobotta/hetzner-k3s 사용하는 거랑 어떤 차이 있는지 궁금함
          + UI와 상업적 지원이 차이점일 것으로 예상함
     * 정말 직관적인 k8s 클러스터 배포 방식으로 보임 다만 이 솔루션은 Hetzner의 클라우드 서비스를 기반으로 동작하는데, 우리가 운영할 때 클라우드 쪽은 약간 불안했던 경험이 있음 클라이언트는 Hetzner의 베어메탈 라인업에 배포하는데, 이쪽은 매우 안정적임 가장 심각한 일은 어쩌다 발생하는 라우터 재시작인데, multi-AZ 배포로 해결함 어느 정도 규모 이하의 클러스터라면 커스텀 베어메탈 배포가 경제성이나 노력이 맞지 않으므로, 이 프로젝트 계속 지켜볼 예정임
     * Hetzner에 Terraform으로 k3s 배포할 수 있는 프로젝트도 있음 https://github.com/kube-hetzner/terraform-hcloud-kube-hetzner 결코 가장 부드러운 경험은 아니었지만, 모두 직접 호스팅되고, Terraform이나 SSH로 대부분 문제를 해결할 수 있음 Hetzner에서 managed Kubernetes를 볼 수 있어서 반가움
          + 내가 사용하는 모듈이 이거보다 훨씬 나음 https://github.com/hcloud-k8s/terraform-hcloud-kubernetes/tree/main 지금 바로 사용하고 있음
     * 아직 Hetzner의 강력한 베어메탈 인스턴스에 k8s를 자동화하는 가이드 본 적 없음 이상적으로는 cattle 방식을 추구하지만 CPU랑 메모리 좋은 베어메탈도 쓸 수 있으면 최고라 생각함 그래서 내 클러스터는 클라우드와 베어메탈 노드를 다 포함함 예전엔 Hetzner 가상 스위치로 클라우드와 베어메탈 노드 간에 L2 네트워크를 썼는데, 요즘엔 tailscale만 사용함 Terraform 등 대부분 도구가 API를 통해 노드를 추가하거나 삭제하는데, 특정 노드 클래스는 새로 생성이 불가하지만 wipe/rebuild는 가능하게 만드는 기능이 있으면 정말 이상적임
          + CAPH가 이런 니즈를 해결해줄지도 모름 https://github.com/syself/cluster-api-provider-hetzner autoscaler를 clusterapi와 연결하면 됨 https://github.com/kubernetes/autoscaler/…
     * 약간 주제와 벗어나지만 Raku에서도 Hetzner API를 지원하게 되었음 https://raku.land/zef:wayland/WWW::CloudHosting::Hetzner 이제 Raku로 배포 자동화 스크립트를 만들 수 있음
     * 관심 있는 분들을 위해 말하면, Kube-Hetzner(https://github.com/kube-hetzner/terraform-hcloud-kube-hetzner, 3k 스타) 기반의 실습 중심 코스를 거의 완성함 다양한 스크립트로 작동 원리, 백업/복구, 자주 발생하는 장애 케이스 연습까지 다룸 추상화 없이 직접 다뤄보면서 원리를 알 수 있게 설계함 이해 없이는 언젠가 막히게 됨 웨이팅 리스트: https://shipacademy.dev
     * 이 회사가 어디 위치해 있는지, 스캠 아닌지가 전혀 감이 안 옴 홈페이지에는 imprint, 연락처, 물리적 주소가 없음 개인정보 처리방침에 이메일 하나 있는데 cloudflare로 인해 가려져 있음 회사명이 Edka Digital S.L.이라고 되어 있는데 어느 나라에 등록됐는지 모르겠음 EU VAT이긴 한 것 같은데 확신이 안 됨, 좀 불안함
          + 안녕하세요, 이 프로젝트는 제가 개인적으로 프리랜서로 사이드 프로젝트로 만든 거고, 스페인에 등록된 프리랜서임 VAT 번호는 ESY1848661G임 피드백 모으는 단계라 솔직히 이 정도 관심 올 거라고는 예상 못 했음 개인정보처리방침/서비스이용약관 모두 수정 예정임 나중에 회사로 전환하고 싶었지만, 지금은 그냥 프리랜서 형태임 피드백 덕분에 바로잡을 수 있음
     * Hetzner에서 k8s 설정할 때 가장 큰 문제는, 베어메탈에서 작은(1노드)에서 중간(10~100 노드) 규모로 확장하는 방법이 없다는 것임 Gateway API로 ingress 노드 연결은 Envoy 조작으로 성공했지만, 스토리지가 문제임 Ceph Rook은 한 대에서 돌리기엔 너무 무겁고 로컬 볼륨 관리에서 분산 볼륨으로 쉽게 이전할 수 있는 wrapper를 못 찾았음 정말 이상적이려면 단일 머신에도 가볍게 동작하고, PV 이동도 자동이고, 이후 Ceph 등으로 이전 시 프록시가 스스로 빠질 수 있는 PV 데몬이 있었으면 함
     * Hetzner에서 인스턴스 생성할 때 cloud-init을 쓰는지 궁금함 나는 Ubuntu 인스턴스를 Docker Swarm 노드로 추가하는 스크립트를 직접 만들어서 쓰는 중인데, 이런 솔루션의 Docker Swarm 버전도 있으면 정말 좋을 것 같음
"
"https://news.hada.io/topic?id=22559","확장하지 않는 것을 하라, 그리고 정말 확장하지 마라","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     확장하지 않는 것을 하라, 그리고 정말 확장하지 마라

     * Paul Graham의 “확장되지 않는 일 하기” 아이디어에서 출발해 GPT 보조 개발 환경으로 인해 이제는 정말 소규모로 일을 마무리할 수 있음
     * 이제는 소규모 또는 개인을 위한 간단한 프로젝트를 만들고, 더 이상 꼭 성장이나 비즈니스로 발전시킬 필요가 없음
     * 실제 사례로 슬랙 커뮤니티나 포스트카드 메일러, 정해진 시간 알림 앱 등을 개인 혹은 소규모 집단을 위해 만들어 만족감과 효용을 경험함
     * AI 도구의 발전으로 소규모, 맞춤형 소프트웨어 제작이 비용·속도 면에서 매우 쉬워졌으며, 소규모 자체가 오히려 목적임
     * 확장 강박에서 벗어나 작고 유용하며 내게 딱 맞는 무언가를 만들고 거기서 멈추는 자유를 누릴 수 있음


배경: ‘확장되지 않는 일 하기’와 시대 변화

     * 10여 년 전 Paul Graham은 “Do things that don’t scale”(확장되지 않는 일을 하라)라는 개념을 주창함
     * 이 아이디어는 초기에 수작업 위주의 작은 실험, 개인적 접근으로 시작하고, 점차적으로 확장 방법을 찾으라는 취지였음
     * 그러나 최근 GPT 기반 도구로 인해, ""초기작업""만 하고 멈춰도 충분하며, 오히려 그게 최선임
     * 프로젝트를 시작하는 데 드는 비용과 시간이 매우 낮아졌고, 모든 아이디어가 비즈니스로 커져야 할 필요가 사라짐
     * 스스로 또는 소중한 소수만을 위한 서비스라도 충분한 목적성 지님

더 커지면 안 되는 Slack

     * 필자는 약 100명의 사용자가 있는 Slack 워크스페이스를 운영 중임
          + 실제로 일주일에 적극적으로 대화하는 사람은 15~20명 정도임
          + 친밀함과 사적인 분위기가 유지되며, 트위터 등 공공 플랫폼보다 깊은 소통 가능함
     * 더 크게 만들 수는 있지만, 확장하면 곧 분위기가 깨지고 친밀함 사라짐
          + 1,000명까지도 필요 없음
          + 이름을 모르는 사람이 늘고, 누가 듣는지 모르면 대화량도 줄어듦
     * 작기 때문에 가능한 것이 있음

PostcardMailer: 작게, 그리고 단순하게

     * 몇 년 전, 본인이 Instagram에 사진을 올리면 엄마에게 엽서를 보내주는 작은 사이트(PostcardMailer)를 만듦
          + 사진과 설명을 가져와 우편 API로 엄마에게 발송함
     * Instagram API 정책 변화로 방식이 막혀, 사진 업로드 방식으로 재구현함
          + 친구와 일부 Orange Site(Hacker News) 사용자가 활용함
          + 이후 스팸 및 악용 우려와 함께 계정 관리를 제한함
          + Heroku의 서비스 종료로 사이트 유지 중단, 최종적으로 이메일 기반 서비스로 전환함
     * 지금은 iPhone에서 이메일을 통해 mom@postcardmailer.us로 사진을 보내면 엄마에게 엽서 발송됨
          + 비공개, 로그인·비밀번호 없음
          + 시중에 엽서 사이트는 많지만, 딱 원하는 방식으로 동작하는 것은 이 서비스 하나임

Landline Pill Reminder: 엄마만을 위한 알림 앱

     * 엄마가 정해진 시간에 약을 먹어야 하는 상황이 있었음
          + 엄마는 스마트폰이 없고, 대부분 폴더폰마저 꺼두는 생활임
     * 신뢰할 만한 연락수단은 우편이나 집전화뿐임
     * 그래서 Twilio API로 음성전화를 하루 3번 걸어주는 작은 앱을 만듦
          + “약 먹으실 시간입니다”라는 녹음된 음성 전달
          + 10분 후 한 번 더 전화해 확인 요청
     * 제작비용 거의 없음, 며칠 만에 완성함
          + 확장하려면 타인 지원, 책임, 법적 불안까지 발생하나, 엄마만을 위한 솔루션이 가장 안전하고 효율적임

패턴(교훈)

     * 본인에게 의미 있는 니즈를 발견함
     * 가장 작고 단순한 솔루션을 구축함
     * 확장 욕구를 최대한 억제함
     * 완성된 솔루션을 즐김
     * 과거에는 확장이 중심이었으나, 지금은 ‘작음’ 자체가 목적이 될 수 있음
          + AI 등 보조 도구로 인해 개인 맞춤형 소프트웨어 제작 비용·노력이 크게 절감됨
          + 1명 또는 소수 사용자를 위한 서비스가 최적의 선택이 될 수 있음

결론: ‘작음’의 가치

     * 오늘날 도구와 환경의 진짜 사치/혜택은 속도, 비용, AI가 아니라, 멈춰도 된다는 자유임
     * 본인만의 ‘작고 유용하며 딱 맞는 것’을 완성하고, 무리한 성장을 추구하지 않아도 충분함
     * 확장에 집착하는 시대에서 적당히 만족하고 멈추는 조용한 만족감이 새로운 가치임

        Hacker News 의견

     * 어느 정도까지 커질 수 있을까 궁금함은 있음, 하지만 어떤 시점——아마도 1,000명 이전쯤——에서 분위기가 깨진다는 느낌임, 친밀감이 사라지고, 더 이상 이름이 익숙하지 않음, 누가 글을 보는지 알기 힘들어서 대화도 줄어듦, 성장 자체가 오히려 안 좋은 영향을 주는 셈임, 소규모라서 잘 작동하는 것 같음, 이것은 Facebook 같은 소셜 네트워크에서도 마찬가지라고 생각함, 2005~2010년경 Facebook은 주로 대학, 고등학교, 회사 친구들이 모여서 자유롭게 생각을 공유하고 흥미로운 링크를 나누던 시기였음, 그런데 지인들이 점점 늘어나고 친하지 않은 사람들이 친구 목록에 추가되면서 분위기가 전혀 달라짐, 어느 순간엔가 가까운 사이도 아닌 사람이 자신의 게시물에 불쾌해하거나 의견 충돌을 겪고 나면 공유를 점점 덜 하게 된다는 경험이 누구나 있음
          + Facebook에서 그리 심한 내용도 아닌데 욕설 하나 썼더니 할머니가 메시지로 삭제해달라고 했던 기억이 있음, 대신 할머니를 차단했음, 명절에만 뵙는 게 차라리 더 좋았음, 정작 할머니는 이 사실을 눈치채지도 못한 듯함
          + 이 현상에는 'Context Collapse'라는 용어가 실제로 존재함, 이는 소셜 미디어가 모든 사회적 상황(예: 직장, 학교, 가족 등)에서 각각 다른 자신을 보여주는 게 아니라, 한 가지 온라인 페르소나를 강제함을 설명함, 관련 링크
          + 친구들 중 제일 마지막으로 Facebook에 가입했던 기억이 있음, IRC에서 자란 올드스쿨 인터넷 유저로서 실명과 사진을 허술해보이는 PHP 사이트(그것도 하버드 출신의 누군가가 만든 것)에 기입한다는 게 무척 이상하게 느껴졌음, 그런데 여자애들이 다 쓰고 있길래, 결국 다들 따라간 셈임. 그게 역사가 되는 순간임
          + 어느 순간부터 Facebook이 더 이상 뭔가를 공유하는 곳이 아니라, 경쟁의 장이라는 걸 모두가 한 번에 알아차린 듯한 시점이 있었음, 그때 다들 공유를 멈추고 대신 '큐레이션'을 시작하게 됨
          + 2008년 무렵 Facebook은 정말 괜찮았음, 현실 친구들과 어울리는 느낌이었음, 그런데 가족들이 합류하면서 확장된 가족과의 식사자리 같은 분위기로 변했음
     * 스스로를 위해 무언가를 만드는 과정은 재미있는 일임, 나도 그렇게 함, 다만 원래 글은 창업자——즉 회사를 만드는 사람——을 위한 글이라는 점은 짚고 싶음
          + 특정 유형의 회사, 특히 tech startup에 관한 이야기임, 스타트업처럼 성장에만 집착하면서 적자를 감수하는 게 아니라, 가능한 빨리 수익을 내는 ‘회사’를 만드는 시각이 더 필요함을 말하고 싶음, 반드시 성장하지 않아도 수익을 내는 회사를 만들어야 한다고 생각함
          + 맞음, 원글의 조언 자체가 창업가(Founder) 중심이었던 것 인정함, 나도 이 멋진 문구를 조금 비틀어보고 싶었음, 활용 가치가 높음
          + 자신의 문제를 해결하려고 무언가를 만들다가, 그게 남들도 겪고 있고 그들이 시도하다 실패한 문제라면 수요가 생길 수 있음, 충분히 불편한 문제라면 돈을 낼 가치도 있다고 봄, 사실 이런 문제는 B2C보다 B2B에서 더 자주 발견됨, 개인의 문제가 B2B로 확장될 때가 많음
          + 'Startup'이라는 단어는 종종 ‘빠르게 성장하기 위해 설계된 소규모 회사’로 정의됨
     * Robin Sloan이 몇 년 전에 비슷한 주제로 적은 글이 있음, 누구든 프로그래밍 언어나 지식 없이도 소소한 무언가를 만들어 즐거움을 느낄 수 있게 된 것이 최근 가장 긍정적인 변화 중 하나라고 생각함, 굳이 대단히 혁신적이지 않아도 좋음, 관련 글
     * Claude Code를 이용해서 롤플레잉 게임용 헥스맵을 만드는 작은 웹앱을 만들었음, 비슷한 사이트가 많고 대부분 무료임, 심지어 내 앱에서 없는 기능을 갖춘 곳도 많음, 그런데 내 앱은 내가 원하는 방식대로 동작함, 강과 숲을 타일 지형 위에 얹는 식의 수정, 다양한 정착지 아이콘, 언덕/산의 더 많은 변형 등 내가 원한 요소가 반영됨, 듣고 싶은 기능이 생기면 그냥 추가하면 됨, 남의 앱을 보면서 ""어쩔 수 없네"" 할 이유가 없음, 내 개인 용도라서 확장성이나 보안, 수익화 등에 신경쓸 필요가 없음, 실제 개발엔 한두 시간 정도만 쓰면 됨, 그마저도 이틀에 나눠서 AI로 작성함
     * “Do things that don’t scale”이라는 스타트업 격언이 있음, Airbnb나 Y Combinator 초창기부터 쓰였던 것 같음, 며칠 전에도 HN에 다시 올라왔었음 관련글
          + 재밌는 타이밍임, 지난 주말에 이 글 썼는데 이번 주엔 HN을 거의 못봄
          + 구글 검색에 첫 번째로 뜨는 글이라서 원글의 신뢰도엔 좀 손상이 있다고 느껴짐
     * 꼭 모든 것이 커질 필요 없다는 생각에 동의함, 하지만 ChatGPT와 이번 주제 사이에는 굳이 접점이 있다고는 못 느끼겠음
          + 이전엔 사출성형만 가능했는데 이제는 3D 프린터가 생긴 것 같은 비유임
          + 실제로 글에 들어간 예시조차 LLM(대형 언어 모델) 이전의 이야기임
          + 아마도 ChatGPT로 코딩해본 적이 없는 듯함
     * Robin Sloan의 ""앱도 가정식 요리처럼 만들 수 있음""이라는 글 추천함 관련 링크
     * 이 글 정말 공감함, 이런 이유로 소프트웨어 컨설팅 일을 그만뒀음, 앞으로는 LLM에게 필요한 모든 것을 써달라고 요청하면 됨, 기술 스택, 호스팅, 통합까지 알아서 챙김, ""Discord 대안 찾기""가 ""나와 친구들을 위한 Discord 클론 만들어줘""로 변하는 세상임, 코드 퀄리티는 중요하지 않아짐, 이제 수백만 유저가 쓰지 않을 것이니까
          + 여기에 동의하지 않음, 이런 경험은 LLM 이전에도 가능했음, 대부분의 제품에는 이미 오픈소스 대체재가 존재했고, 설치와 배포도 LLM보다 쉬울 때가 많음, 게다가 업데이트 등도 받을 수 있음, 다만 사람들이 인스톨, 배포, 보안 유지에 책임지기 싫어서 그런 서비스에 소액 지불하는 편이 훨씬 낫다고 느끼는 것임, 문제는 코드 작성이 아니었음
     * Maciej Ceglowski의 명작 “Barely Succeed: It’s Easier”가 떠오름 관련 유튜브 링크
     * 본질적으로 '확장'이 그렇게 중요한 목표였던가 의문임
"
"https://news.hada.io/topic?id=22564","캘리포니아 실업률 5.5%로 미국 최고치, 기술 업종 침체 영향: “상황이 잔혹하다”","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            캘리포니아 실업률 5.5%로 미국 최고치, 기술 업종 침체 영향: “상황이 잔혹하다”

     * 캘리포니아의 실업률이 7월 5.5%로 상승하며 미국 내 가장 높은 수준을 기록함
     * 기술 및 사무직 일자리 감소가 주요 원인으로, 신입 및 초급 구직자들이 특히 큰 어려움을 겪고 있음
     * 반면 제조업과 물류 등 블루칼라 부문은 일부 회복세를 보이며 대조적인 흐름을 나타냄
     * 7월에 보건·교육 부문은 23,100개, 정부 부문은 7,200개의 일자리를 추가했으나, 공공 부문 재정 적자와 연방 감축으로 불확실성이 큼
     * 전문가들은 인공지능 자동화, 코로나 기간의 과잉 고용 조정, 무역 관세 등 복합적 요인이 시장에 부담을 주고 있다고 분석함


캘리포니아 실업률 동향

     * 7월 실업률은 5.5%로 2024년 12월 이후 최고치
     * 전국 평균 4.2%와 비교해 현저히 높은 수준
     * 4,400가구 조사에 따르면 구직자는 전월 대비 18,200명 증가
     * 6월 수치는 수정돼 9,500개 순일자리 손실로 집계됨

업종별 변화

     * 감소 부문
          + 전문·비즈니스 서비스: –7,100개 (가장 큰 감소폭)
          + 정보(IT) 분야: –1,000개
     * 증가 부문
          + 무역·운송·유틸리티: +1,300개
          + 제조업: +300개 (다만 전년 대비 –32,500개)
          + 보건 및 민간 교육: +23,100개
          + 정부 부문: +7,200개

전문가 분석

     * Michael Bernick (전 고용개발국장): “신입 기술직 시장은 수년 내 최악 상황”
          + AI 자동화로 초급 업무 감소
          + 팬데믹 시기 과잉 고용 조정 여파 지속
     * “블루칼라 경제는 회복 중이지만, 화이트칼라 경제는 긴축 중”이라고 진단

지역별 상황

     * 샌프란시스코 실업률: 4.4% (6월 대비 +0.1%)
     * 오클랜드, 산호세 등 주요 도시도 적자와 채용 동결을 시행

향후 불확실성

     * 연방 정부의 대규모 감원 및 지출 삭감으로 공공 부문 고용 위기 심화 가능
     * 무역 관세 정책의 파급 효과는 아직 불확실
     * 전문가: “아직 붕괴는 아니지만 고용시장은 버티고 있는 수준”

        Hacker News 의견

     * 내 생각에는 아직 ""AI""가 소프트웨어 회사 채용에 의미 있는 영향을 미칠 시기가 아님을 느낌, 오히려 2012년부터 2022년 사이에 ZIRP(제로 금리 정책) 덕분에 컴퓨터 과학 학부 입학 증가, 부트캠프, 이민을 통한 개발자 공급 폭증 현상이 더 근본적 원인임을 생각함, 수요 측면에서는 ZIRP를 통해 투자 자금이 주로 검증되지 않은 Crypto나 Metaverse 기업에 몰렸으나 그 결과로 늦은 단계 및 신규 상장 기업이 부족해 채용 시장에 영향을 주고 있다고 봄
          + Mag7 기업에서 대규모 해고가 함께 일어났다는 점도 있다는 점을 강조함, 다만 캘리포니아에 이 영향이 얼마나 집중됐는지는 불확실함
          + 에어비앤비나 Uber 같은 오래된 유니콘 기업들이 이제 전통 호텔 및 택시 기업과 다시 경쟁해야 하는 상황임을 봄, 또한 일론이 트위터 인수 후 인력 감축을 한 것을 보면서 ""저렇게 줄이고도 서비스가 돌아간다면, 나도 줄일 수 있지 않을까?""라는 분위기가 업계에 생겼다고 느낌, 그리고 현재 이슈 되는 엔지니어 세금 이연 관련 코드 변경은 별 상관이 없다고 생각함, 오히려 일부 부자들이 이 이슈를 의도적으로 퍼뜨린다는 느낌을 갖고 있음, 만약 법이 바뀌더라도 고용 트렌드를 바꾸진 않을 거라 봄
          + 지금 개발자 구직 시장이 힘든 데에는 단일 요인만 있는 것이 아니라 여러가지가 복합적으로 작용하고 있음에 주목함
              1. 리모트워크의 급부상: 2020년 전에는 리모트워크 도구도 부족했고, 주로 팀 단위 채용 문화였음, 그런데 코로나를 계기로 툴이 발전하고 회사들이 한 명씩도 온보딩하는 방법을 익혀, 이제 해외 저임금 노동자로 대체도 쉽게 가능해짐
              2. 저금리 종료: 무위험 금리가 4~5%라서 소프트웨어 스타트업 같은 위험 투자에 자금이 덜 들어오게 됨, 펀딩이 전반적으로 말라버림
              3. 할인율 상승: 투자에 적용하는 할인율이 올라가며, 1억 달러 가치던 스타트업이 수억 달러로 가치가 내려가 버림, 다운라운드 방지를 위해 비용 절감, 이익 창출을 강조하면서 대규모 감원과 극한의 효율을 요구함
              4. AI의 부상: AI가 코딩/비코딩 생산성을 올려주기도 하지만, 감원의 이유로도 활용되고 있음 내 경험상 이 모든 요인이 현 개발자 시장이 힘든 이유임을 체감함
          + 바이오 업계 역시 지금 큰 침체를 겪고 있음을 언급함
          + ZIRP(제로금리정책)는 단기 금리를 0%에 가깝게 두고 극도로 저렴한 차입을 유도해 지출, 투자, 위험 감수를 장려하는 것을 의미함
     * 내 경험상 내가 다니는 대형 테크 기업에서 실질적으로 채용이 거의 멈췄음을 느낌, 예전에는 매주 인터뷰를 했는데 최근 3개월은 한 번도 없었음, 2022년 감원 때도 일부 포지션은 계속 뽑아서 월 1~2건 정도 인터뷰했었음
          + 나는 실제로 회사(베이 지역)에서 마지막으로 채용된 소프트웨어 엔지니어 중 한 명임, 2년 전에 입사한 이후로 겨우 1명이 더 들어왔고, 그 사이 수십 명이 회사를 떠남
          + 나도 비슷한 상황을 겪음, 인원이 800명에서 임금 동결 1년, 채용 동결 2년째를 거치고, 감원과 자발적 퇴사로 480명 정도로 줄었음
     * 만약 이 상황이 소프트웨어 업계의 러스트 벨트 현상이 된다면 어떨지 상상해봄, 고임금 일자리가 AI 때문에 사라지고, 정치인들이 불만 있는 개발자들의 표를 얻기 위해 소프트웨어 샵을 만든다며 일자리 창출을 약속하는 시나리오를 그려봄, 과거에도 번영을 누리다 산업을 잃은 지역들이 정치 사회 문제의 온상이 된 사례가 많았음, 소프트웨어 업계도 그런 전철을 밟지 않을까 우스갯소리로 생각함
          + 우리는 IT 시장을 인도에 넘기는 중임, 마치 제조업을 중국에 넘긴 것처럼 느껴짐
          + 러스트 벨트는 캘리포니아처럼 관광 산업에 기대어 버틸 수 없음, 최악의 경우 소프트웨어 일자리가 다 사라지더라도 플로리다 같은 곳에 날씨가 좋은 곳이 됨
          + 실제로 이런 현상이 일어나려면 소프트웨어 제품 개발 비용이 충분히 올라야 의미가 있음, 제조업에서는 기계공학 졸업생이 당장 공장 세워서 물건 팔기 어렵지만, 소프트웨어는 누구나 제품을 만들어 배포할 수 있음(품질, 기술부채, 미감 등은 차치하고), 그리고 AI의 진짜 가격이 하드웨어 원가로 반영된다면(예를 들어 Claude max를 원가 기준으로 보면 월 7~10K 정도), AI+소프트웨어의 산업화가 진입장벽을 높일 수도 있음을 추측함, 결국 단순한 진입이 어려워질 수 있음
          + 모든 산업에는 경기 흥망의 사이클이 있다는 점을 지적함, 타이밍이 언제일지는 아무도 모름, 보통 수십 년이 걸리는 패턴임
          +

     What if this turns into rust belt? 벨트를 새로 짜고 있음을 의미함
     * 이게 과연 테크 업계만의 문제일지 의문임, 엔터테인먼트 업계도 요즘 굉장히 힘든 상황임을 지적함
          + LA의 팀스터 친구의 말에 따르면, 실제로 지금 이 지역에서 거의 아무런 촬영도 이뤄지지 않고 있음, 주요 스튜디오들이 이제 주로 조지아주나 캐나다에서 촬영하는 추세임
          + 오늘 극장이 7월 27일 폐업했다는 사실을 발견함, 앞마당에는 잡초가 무성함, 인근 쇼핑몰도 사실상 문을 닫은거나 다름없는 상태임, 2020년에 이미 타격을 받았지만, 나의 테크 커리어처럼 이 곳도 지연된 반응으로 죽어가고 있음, 이제 이 지역(미 북부 중앙)엔 아프리카 사막에서나 입을 법한 옷을 입은 사람들이 돌아다니고, 영화관엔 아무도 가지 않는 분위기임
          + 테크 업계 h1b 비자 중 50% 이상이 인도인에게 발급되었음을 언급, 그러므로 이 문제는 엔터테인먼트 산업과는 다름을 지적함
     * 댓글 분위기가 이상하다고 느낌, 공식 리포트는 잊고 여기 HN 유저 이메일만 보고 얘기하는 게 무슨 의미가 있는지 의문을 품음
          + 기사 내용을 읽어보니 통계 근거가 납득 갈 만하다고 생각함
            ""대조적으로 7월엔 전문직/비즈니스 서비스가 7,100명 감소했고, 테크 중심의 정보 섹터는 1,000명 감소해 모든 섹터 중 최악임""
            이런 수치는 다양한 원인이 가능함, 예를 들어 스타트업 창업을 위해 퇴사해도 BLS는 이를 일자리 감소로 보므로 고유동성 섹터에선 이런 반응이 통계적 일자리 감소로 잡힘
          + 사람들이 위치, 경력, 구직 경험 등 맥락을 제공한다면 그런 개인 경험이 실제 채용 확률에 더 실질적 참고가 될 수 있다고 느낌, 평균 통계는 결국 각자 상황엔 도움이 안 될 때가 많음, 그리고 BLS 노동 통계에도 고소득/시간 부족 계층(즉 이런 포럼에 글 쓰는 사람들)이 미응답 편향을 만들 가능성이 높음을 언급함
          + 우리는 이미 대중 추천(업보트)을 통해 중요해졌다는 이야기들을 읽으니, 무얼 기대하겠냐고 반문함
          + 공식 통계가 13,500,000명 중 4,400명을 조사하는 거라면, 온라인 랜덤 샘플도 표본 크기만큼은 추가 보탬이 된다는 점을 언급함
     * 개인적 경험(아넥도타)으로 10개월 전에 해고됐다가, 7월에 갑자기 3곳에서 오퍼를 받아서 재취업함
       BBB 정책이 세금법 문제를 고친 덕분이라는 추측임
          + 연대기적, 인과관계에서 보면 해당 조항은 2022년 1월부터 효력이 발생해 꽤 오래 언급되어 온 이슈였음을 짚음, 2017년 공화당 TCJA에서 법제화됐으나 section 174는 시행을 미뤄온 것임
          + 나도 올해 레이오프 됐는데 7월에 오퍼가 크게 늘었음을 느낌, 콜로라도에 기반 두고 전국적으로 지원했으나, 샌프란시스코 쪽에서 다른 지역보다 훨씬 많은 관심을 받았음
          + 나는 SaaS 서비스를 운영하는데, 주요 고객이 리크루터임, BBB 이후로 하루 신규 가입, 구독자가 이전보다 현저히 늘었음
          + 어느 정도 정답임, OBBBA(법안)가 소프트웨어 개발을 연구로 간주해 관련 세제 혜택(감가상각) 조항을 영구 적용했음, 하지만 동시에 국내 연구비는 즉시 소득공제도 허용했으니 훨씬 나은 세금 환경이 된 것임, 다만 TCJA로 인한 불확실성이 여전히 존재해서, 소프트웨어 개발=연구 조항이 삭제되지 않으면 다시 나빠질 여지도 상존함
          + 리크루터 활동은 몇 달 전보다 확실히 줄었음, 한 번 인터뷰 최종까지 통과했다가 신규 리드 채용으로 포지션이 날아가는 경험도 함, 나머지는 간간히 연락 오긴 하나 기술평가에서 합격률은 들쭉날쭉임, 연차 10년, SFBA에서 구직 중임
     * 지금이야말로 h1b 비자 발급을 줄일 타이밍이란 의견임
          + 이런 이슈가 Newsom 등의 민주당 온건파에게 중요한 정치적 주제가 될 것으로 예측함, 도심, 대졸 직장인에 큰 영향을 미치므로 민주당 지지층과도 직결되는 이슈임, 캐나다는 트뤼도 하에서 이미 먼저 움직였다고 보임
          + 한술 더 떠, 해고를 한 기업은 일정 기간(예: 5년) h1b 신규 비자를 신청하지 못하게 하는 방안이 더 좋다고 제시함, 기존 h1b 유지하더라도 신규는 불허하는 방식임
     * 러스트 벨트 지역이 실업률을 5.5% 이하로 낮춘 것은 좋은 현상임을 언급함
          + 하지만 실제로는 일자리 못 구해 영구 실직자가 된 사람이 실업 통계에서 빠지거나, 지역 인구 이동, 사망 등 때문일 수도 있음을 짚음
          + 혹시나 노동 시장 참여율 자체가 낮아진 건지, 인구가 빠져나간 건지 궁금함
          + 농업, 헬스케어, 자동차 등 대부분 분야가 정부 보조를 받으니 경제 전체가 보조금에 기대는 점도 영향일 것임
     * 링크 보기
     * 캘리포니아 실업률은 2015년에도 더 높았음, 이번은 해고와 더 관련 있어 보임
          + 중산층이 실업에 더 집중되어 있음, 올해 하층 계층에는 불완전 고용 기회가 많아서 MediCal이나 다른 복지 혜택으로 생활이 가능함, 나는 양쪽 경제에서 모두 일해 본 경험이 있음
"
"https://news.hada.io/topic?id=22488","왜 합리주의자 커뮤니티에는 컬트가 많은가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        왜 합리주의자 커뮤니티에는 컬트가 많은가?

     * 합리주의자 커뮤니티 내부에서 작고 이상한 신념 집단이 여러 번 탄생했으며, 일부는 실제 폭력 사건과 연관되어 있음
     * 이런 현상은 합리적 사고법을 강조하는 콘텐츠(Sequences) 가 “더 나은 생각”의 기술을 약속하면서도 현실적으로 그 약속을 충족하지 못하는 데서 비롯됨
     * 취약한 위치에 있는 사람들이 커뮤니티에서 해로운 그룹에 휘말릴 가능성이 높으며, 종종 외부와 단절되어 빠져나오기 어려움
     * 집단 내부 신념과 행동의 연계, 아이디어를 심각하게 받아들이는 태도, 사회적 고립 등이 심각한 역기능을 유발할 수 있음
     * 합리주의 컬트의 발생은 완전히 막기 힘들지만, 외부 현실과의 연결, 사회적 다양성, 건강한 조직 구조 유지가 악영향을 줄일 수 있음


서론

     * 합리주의자 커뮤니티는 AI 연구자 Eliezer Yudkowsky가 집필한 블로그 연재 ‘Sequences’에서 비롯된 모임임
     * 이 연재는 합리적으로 생각하는 법을 주제로 하며, 커뮤니티 구성원들이 비판적 사고와 회의주의의 표본일 것이라 기대됨
     * 그러나 실제로는 악마와 교류하는 소규모 이상 집단, 폭력 사건, 트라우마를 유발하는 그룹 등 이상하고 해로운 집단들이 커뮤니티 내에서 발생
     * 대표적으로 Zizians라는 비건 아나키스트 트랜스휴머니스트 그룹 및 Black Lotus, Leverage Research 등의 사례가 존재함
     * 필자는 커뮤니티 내부자이면서 깊이 있는 인터뷰를 통해 전례 없는 접근성과 솔직함을 얻음

젊은 합리주의자들의 문제

     * 합리주의자 커뮤니티는 전반적으로 기능적이나, 일부 집단은 심각하게 역기능적 구조를 띔
     * ‘Sequences’는 “더 잘 생각하는 예술”과 비범한 미래를 약속하지만, 현실적으로 그 약속은 실현 불가능함
     * 많은 인터뷰이들은 이러한 콘텐츠가 컬트의 원재료를 만든다고 지적함
     * Eliezer Yudkowsky는 집단성 구축에는 소극적이지만, 외부에서 유입된 사람들은 권위자에 의한 변화와 영웅적 사명을 갈망하는 경우가 많음
     * 어떤 집단의 역기능은 리더(예: Black Lotus의 Brent Dill) 때문이거나, 또는 아래에서부터 독성 역학이 자연스레 생성됨(예: Leverage Research)
     * 취약한 사람들이 분리된 집단의 포로가 되기 쉽고, 문제 상황에서 벗어나기도 어려움
     * 초기에는 커뮤니티가 미숙한 구성원을 도왔으나, 점차 성공한 사람들이 자신의 지원을 거두는 경향이 생김
     * 지원을 받지 못한 뉴커머들은 해로운 내부 그룹의 표적이 되기 쉬움

신념의 심각성

     * 역기능 집단 내부에서는 사회적 고립과 리더에 의한 조종보다 신념 자체가 핵심 원인임
     * 예를 들어, Zizians의 과격한 결정 이론(위협에 무조건적으로 대응해야 한다는 신념)은 실제 행동과 직접적으로 연결되었음
     * Leverage Research는 ‘Connection Theory’라는 심리학 통합 이론을 통해 멤버의 내면 구조를 이해하고 문제를 해결하려 했음
     * 이런 단순화된 심리 모델에 자신의 행동을 맞추려다 정신적 문제까지 유발함
     * Brent Dill은 세계와 타인을 냉소적으로 해석하도록 멤버를 유도, 이는 집단 불신과 가장 근본적인 해악으로 작용함
     * 합리주의자들이 전문가에 대한 신뢰를 거부하며 스스로 사고하는 과정에서 역설적으로 카리스마 리더에게 사고를 위임하는 위험이 생김
     * '아이디어를 진지하게 받아들이기'와 '주체성'은 본래 미덕이나, 잘못 적용되면 규범에서 벗어난 위험 행동으로 연결됨

심리학에 대한 경계

     * 문제적 집단에서는 철학, 심리학, 집단 내 관계에 대해 장시간, 강도 높은 논의가 일상화되었음
     * 반대로 건전한 고요 그룹에서는 외부 활동이나 실질적 성취(프로그래밍, 게임 등) 에 집중함
     * Black Lotus 멤버 또한 실제로 중요한 역할을 맡으며 자신감을 얻은 사례 있음
     * Leverage Research에서도 실질적 프로젝트(암호화폐 개발 등)를 하는 소그룹이 더 건전했음
     * 지나친 집단 내 감정 논의와 심리 분석은 역기능, 불안, 고립, 현실과의 단절을 심화시킴
     * 실질적 외부 목표가 없는 집단에서 내부 토론이 길어지면, 해로운 역학이 증폭됨
     * 장시간 집단 심리, 감정 탐구가 일상이면, 컬트가 아니더라도 뭔가 잘못되고 있는 신호임

결과주의(Consequentialism)의 위험

     * 결과주의적 세계관을 진지하게 받아들이면 리더에게 과도한 헌신, 희생이 정당화될 수 있음
     * 합리주의자 커뮤니티에서 자주 언급되는 AGI(인공지능) 멸종 위기론은 집단 내 긴장·강박을 야기
     * AI에 기여할 능력이 부족한 사람들은 대체 프로젝트나 소규모 그룹에 집착하면서 역기능에 빠지기도 쉬움
     * 대의명분(인류의 위기 등)이 일상 사안까지도 과도한 의미 부여로 이어짐
     * 실제로는 위기 극복이 단순하고 반복적 과업의 연속임에도, 그에 부합하지 못하는 영웅적 환상을 추구함

고립에 대한 경계

     * 사회적 고립과 그룹 내 동조현상, 외부와의 단절이 역기능 심화의 핵심
     * 멤버들이 집이나 사무실 외부를 드나들지 않는 것이 컬트 여부의 가장 확실한 징후 중 하나임
     * 내부에서만 정의되는 현실, 비판자 배제, 상호 감시가 집단사고 및 신념 과잉으로 이어짐
     * 같은 집에 거주하며 모든 필요를 집단이 제공하는 패턴은 외부 세계에서의 독립성과 역량을 약화시킴
     * 내부 그룹끼리조차 정보를 공유하지 않는 비밀주의가 문제가 되며, 폭로와 소통 부족이 악순환으로 작용

결론 및 제언

     * 합리주의자 커뮤니티의 역기능은 특별히 더 심각하다기보다는 “더 흥미로운 방식으로” 나타남
     * 커뮤니티 특유의 ‘믿음을 행동으로 옮기기’, ‘기존 사회와 다르게 살기’ 성향이 원인 중 하나지만, 완전히 제거할 수는 없음
     * 개인적, 공동체적 수준에서 아래와 같은 전략이 역기능 감소에 도움

    개인을 위한 권고

    1. 집단 내 인간관계/감정에 대한 장시간 대화가 계속된다면 주의 신호임
    2. 성취 객관 기준이 있는 활동, 외부 현실과 접점 만들기
    3. 다양한 사회적 집단과의 관계 유지
    4. 일, 거주, 치료 과정을 분리
    5. 모두가 믿는 신념이라도, 외부 사람이나 독립적 검증 필요
    6. 한참을 거친 추상적 논리가 “타인을 해쳐도 된다” 또는 “모든 게 이 일보다 덜 중요하다”로 귀결된다면 의심해야 함
    7. 다른 선택지가 없는 상태에서 요구가 많은 집단 참여는 신중히 고려

    커뮤니티를 위한 권고

     * 역기능적 집단에 들어간 멤버와의 유대 유지 및 비난보다 정상적 소통 제공
     * 신입 멤버에게 현실적 기대치 부여, 실질적 지원 확대 방안 고민
     * AI 안전 등의 영역 진입이 쉽지 않음을 솔직히 전달, 기여하지 못하는 사람의 가치를 평가절하하지 않기
     * “윤리적 금지선”(명백히 해서는 안 될 것)에 대한 논의 활성화

        Hacker News 의견

     * 아주 흥미로운 글임. 15년 전 내 생각으론 이런 자기 선언 합리주의자들은 장황한 팬픽션 쓰는 사람들이었지만, 지금은 하위 그룹들이 살인도 하고 악령 퇴치까지 하는 단계에 왔다고 생각하게 됨. 1950년대 허버드 작품 하나 읽은 독자가, 몇십 년 후 허버드가 거대한 종교를 이끄는 걸 보게 된 기분과 비슷함. 기사는 이런 그룹에서 긍정적 내용을 힘들게라도 찾으려고 애쓰며 ‘합리주의자들은 코로나 팬데믹 초기에 올바른 견해를 가졌고, 인공지능의 위협에 대해 먼저 경고했다’는 주장을 언급함. 하지만 WHO 견해에 동의한다거나 스카이넷 같은 AI가 위험하다고 생각하는 것이 특별할 게 없다고 느껴짐. 기사에서 드러난 합리주의자들의 성공 사례는, 맞지 않는 시계도 하루 두 번은 맞는다는 말과 비슷하다고 봄
          + WHO가 2020년 3월 11일까지는 팬데믹을 선언하지 않았음. 그때보다 먼저 경고한 합리주의자들도 있었음(다른 사람들도 마찬가지). 나는 합리주의자 블로그 경고를 읽고 다른 포럼에 코로나 뉴스에 대해 글을 올렸는데, 그곳에서 중요한 경고를 준 사람으로 여겨졌음. 실제로 큰 차이를 만들었는지는 모르겠음
            https://pmc.ncbi.nlm.nih.gov/articles/PMC7569573/
          + 저 문단이 너무 실망스러워서 거기서 읽기를 그만뒀음. 저 두 가지 사례 모두 사실이 아니고, 기사에서 합리주의를 옹호하기 위해 그나마 찾은 예시라는 게 안타까움. AI 위협은 실제로 없었고, 이 부류 사람들이 구글의 LLM 공개를 늦추고 이미지 모델이 로봇만 그리도록 만든 배경이 됨. 하지만 지금은 훨씬 더 좋은 모델을 개인 노트북에서 돌릴 수 있고, 대규모 실업이나 붕괴도 없어졌음. AI는 오히려 우호적인 편임. 그리고 마스크 쪽도, 실제 자료와 그래프를 아무리 봐도 의미 있는 영향이 있었던 흔적이 없음. 완전히 마스크를 안 쓰던 나라들이 하루아침에 다 쓰게 되었는데도, 확진자 수 그래프는 변화가 없었음. 바이러스가 마스크 틈새나 마스크 벗은 순간, 심지어 눈을 통해서도 들어올 수 있으니까. 결국 합리주의자들은 맞는 주장이 하나도
            없었음. 정말 실망스러움
     * 이 기사는 아름답게 쓰였고, 제대로 된 독창적 연구가 많이 들어가 있음. 그런데 대부분의 댓글이 즉흥적인 ""합리주의자들ㅋㅋ"" 식 반응이라 아쉬움. 기사에서 이미 더 풍부하고 세련되게 다루고 있는 내용이 많지만 그런 댓글은 잘 안 보임
          + Asterisk는 사실상 “합리주의자 잡지”이고, 저자는 유명 합리주의자 블로거임. 그러니 이 글이 이 현상을 공정하게 다루는 거의 유일한 사례라는 게 놀랍지 않음. 보통 외부에서는 합리주의가 컬트이고 Eliezer Yudkowsky가 컬트 리더라 얘기하는데, 이런 시각 자체가 말이 안 된다고 생각함
          + 이런 기사들을 읽고 나서 “확실히 컬트네”라고 느끼는 건 전혀 문제없다고 생각함. 그들이 우주선이든, 악마든, AGI든 뭘 믿는지는 상관없음. 진짜 중요한 인사이트는 지도자가 구성원을 사회에서 고립시키면 그게 위험 신호라는 점임. 너무 새롭거나 특별한 통찰은 아님
     * 이런 그룹에 대해 내가 느끼는 문제 중 하나는, 겉보기에 논리적으로 이어지는 믿음을 굉장히 자신감 있게, 때로는 공격적으로 말한다는 점임. 그런데 그 기반이 되는 전제(공리)가 사실상 아무런 검증도 안 된 판타지라는 걸 나중에 알게 됨. 이런 모습은 어디서나 볼 수 있지만, 이 커뮤니티들에서 특히 심각함. 자기 논리에만 함몰되는 경향이 있어 참여하면 약간 답답해짐. 내가 아는 정말 똑똑한 사람들은 자신이 뭘 안다고 확신하지 못하는 경우가 많았음. 스스로 결론을 내놓고 너무 확신하는 사람은 일단 의심스럽게 느껴짐
          + 단순히 잘못된 전제 때문만의 문제는 아니라고 생각함. 사람들은 각각의 논리적 추론 단계가 반드시 전 단계에서 필연적으로 나오는 것이라 확신하지만, 사실 한 단계씩 틈이 생기면서 거짓 확신이 커져 버림. 비합리주의자들이 합리주의자보다 논리를 잘 다루는 것도 아니지만, 적어도 지적 겸손의 혜택은 받음
          + 강력 추천하고 싶은 NYer의 Curtis Yarvin 프로필이 있음. (Curtis Yarvin도 ""합리주의""를 자신의 믿음 근거로 씀) 특히 글 후반부에 그가 가장 존경하는 이념적 영웅을 장시간 만나는 부분이 인상적임
            https://www.newyorker.com/magazine/2025/06/09/curtis-yarvin-profile
            인터넷 때문에 이런 그룹이 폭발적으로 늘어남. 온라인에서는 ‘사람’ 아닌 ‘아이디어’만 보게 하니까 그런 듯함. 실제로 열렬한 합리주의자들과 방이나 섬처럼 한 공간에서 오랜 시간 보내면, 그들이 아무리 글로 영리하게 주장해도 실제론 금방 그 이론을 무시하게 됨
          + “무엇이든 확신하는 사람은 의심스럽다”는 점에 동의함. 사기꾼을 'conman'이라고 부르는 이유도 마찬가지임. 자신감이 반드시 정답과 연결된다는 자연스러운 믿음을 교묘히 이용해서 속임. 사기를 치지 않아도, 정말 어떻게 확신하게 될 수 있을까? 반대되는 증거들을 모두 무시했기 때문임. 실제로 뭘 아는 사람은 항상 맥락을 한정하고, ‘아마도’, ‘만약에’ 같은 조건을 단 조심스러운 설명을 함. 일반화된 이야기를 거의 하지 않음
          + “진리를 찾는 사람을 소중히 여기고, 진리를 찾았다고 생각하는 사람을 조심하라” - 볼테르
          + 미래 돈의 가치를 두고 나온 논쟁도 많음. “discount function”을 참고하면, 어떤 이들은 소위 ‘rational altruists’로, 미래 가치를 1.0으로 잡고, “drill, baby, drill” 쪽은 0에 가까움.
            할인 함수에는 예측의 불확실성을 나타내는 노이즈 항이 꼭 들어가야 한다고 생각함. 미래를 예측할수록 노이즈가 커지기 때문임. 이걸 고려하지 않으면 엉뚱한 문제를 풀다가 실패함. 고대 로마 시절 묘지 공간 부족을 염려했듯, 에너지 고갈·인구 과잉 역시 실제로 일어나지 않은 이유는 예측 과정에서 노이즈가 너무 적게 반영됐기 때문임
            https://en.wikipedia.org/wiki/Discount_function
     * 오래 전에 Eliezer Yudkowsky를 만났음. 그가 합리성과 관련된 팜플렛을 줬는데, 내용이 농담이거나 오히려 포교를 풍자한 것 같았음. 둘이 같이 웃었음. 몇 번 훑어보고 책장에 넣어버렸는데, 이 사람이 이렇게 큰 영향력을 가지게 될 줄은 전혀 몰랐음
          + 이런 사람들은 후광효과를 입고 있다고 생각함. 그들 배경을 보면, 지금 위치에 오를 만한 내용이 없음. Eliezer Yudkowsky는 내 기억에 Thiel baby로 분류되는 인물 아님?
          + 나한텐 Eliezer Yudkowsky가 Harry Potter 팬픽 <Harry Potter and the Methods of Rationality>로만 알려져 있음. 혹시 이외에 대중적으로 유명할 만한 이유가 있음?
     * 이런 사람들은 철학을 하고 싶어 하면서도, 정식 교육을 받는 건 자존심 상해서 안 하는 것 같음. 난 이 현상을 “작은 어항 증후군”이라 부름. 더 나은 용어가 있으면 좋겠음
          + 사람들이 정식 교육을 받으려 하지 않는 이유는, 현대 철학 자체가 별로 쓸모 없어 보이기 때문임. 예를 들어 2006년 듀크 대학 강간 사건을 보면, 히스테리에 동참한 교수들은 대개 인문학(철학 포함) 출신이었고, 심지어 검사가 범죄로 기소될 때까지 아무도 태도를 바꾸지 않음. 반면, 이 문제에 그나마 저항한 사람들은 경제학자, 과학자, 법학자였음. 제대로 옳고 그름도 분간하지 못하는 인문학계를 굳이 진학하지 않는 게 이해감
          + 완전 공감함! 난 학계 철학 분야에서 10년을 버틴 생존자임. 이 커뮤니티 분위기는 마치 학부생을 잔뜩 태운 비행기를 Survivor 섬에 내려다 놓고 무한 피자 포켓과 아드레랄린만 주는 걸 보는 기분임
          + 꼭 정식 훈련이 필요할까? 플라톤, 소크라테스, 도스토옙스키, 카뮈, 카프카 등 고전을 직접 읽는 게 지금 하는 일보다 훨씬 나은 선택이라고 생각함
     * “많은 합리주의자들이 영웅적 노력이 없으면 AGI 개발로 인류가 멸망할 것이라 기대한다” “이런 믿음은 다른 어떤 일에도 신경 쓰기 어렵게 만든다. 인류가 멸망 직전인데 간호사, 공증인, 소설가가 무슨 의미가 있겠는가?” AGI 종말론을 휴거로 바꿔도 미국 근본주의 기독교 신자들과 비슷함. 그들은 환경, 경제, 사회 문제 해결을 거부하는데 곧 휴거가 올 거라 믿음. 이런 식으로 묵시론에 빠지면 머릿속에서 벗어나기 어렵고, 불안 장애 경험이 있는 사람이라면 파국적 상상은 반드시 극복해야 함을 배움. 그런데 이런 커뮤니티에서는 오히려 파국 신앙을 서로 강화해줘서, 반복적인 '파국의 루프'에서 못 빠져나오게 됨
          + 나도 어릴 때부터 지구가 망할 거라는 공포와 “지옥 끌려간다”는 두려움 아래 자라서 지금도 불안을 철저히 관리함. 논리적 근거에서 나온 게 아니라, 집과 주변 커뮤니티의 온갖 미디어에서 쏟아지는 공포 때문임
          + 휴거 신앙은 신자들에게(원래 의미로 보면) 파멸이 아님. 오히려 AI 종말론 쪽이 더 극단적임. 그리고 실제로, 신앙 때문에 현실 세계 일 모두 포기하는 근본주의자는 많지 않음
          + 기후변화가 끔찍한 문제를 가져올 것이라 믿는 사람도 많음. 그 자체로는 그럴 수 있는 믿음이고, 결국 포괄적으로 보면 미국인 대다수가 뭘 하나쯤은 파국적으로 믿게 됨. AGI 종말 신앙에도 그럴싸한 논리가 있긴 함. 나는 그 쪽을 믿지 않지만, 신앙 체계로 보면, 기후변화 신앙이랑 더 가까움
          + AGI 대신 기후변화로 바꿔도 굉장히 합리적인 신앙 체계가 나옴
     * 나는 자꾸 어벤저스 1편에서 로키가 “봐라, 이게 니 본성 아니냐”라고 군중 위에서 외치던 장면이 생각남. 어떤 의미에서는 선택권이 없다는 사실에서 기묘한 안도감을 느끼는 것 같음. 논리에 기반한 합리주의 체계가 애매함을 견디지 못하는 태도와 맞물려 엉뚱한 방향으로 치닫기 쉬움
          + 인간이 닭은 아니지만, 서열 싸움을 은근히 좋아하는 것 같음
          + 이들은 본인이 원하는 걸 할 수 있도록 자기 논리를 개발하는 경향이 있음. 신이 자신을 이끈다던 옛날 버전의 현대판이라고 생각함
     * 합리주의자들을 잘 아는 입장에서 말하자면,
         1. 비판할 거리가 있으면 이미 그들 자신이 내내 그걸 비판하며 고민해왔음(특히 이름이 멍청하다는 것 포함). 그렇다고 해결해냈단 뜻은 아님
         2. 이들은 실제로 굉장히 책을 많이 읽음. 순진하거나 헷갈려 하는 집단이 아니라, 오히려 항상 색다른 도전을 적극적으로 실험함. 이 커뮤니티에서 겪을 수 있는 엉뚱한 경험은 정말 놀라움
         3. 실제로 ‘좋은 일을 하려는 진심’도 있음. 괴상하거나 불편하거나 좀 무서운 그룹들 얘기는 들어봤을지 몰라도, 착하고 멋진 프로젝트 얘기는 소문에 잘 안 남.
            경험상, 이들이 길을 잘못 드는 영역은 ‘수단을 넘어선 노력’에 몰두할 때임. 대부분 합리주의 프로젝트 근간에는 “사람이 일상적으로 겪는 고통을 새롭게 생각하고, 모두 행복할 수 있는 해법을 찾자”는 마음이 들어가 있음. 냉소가 많거나 현실적인 사람은 어떤 문제든 반드시 누군가는 만족 못 한다는 현실을 얘기할 텐데, 합리주의자들은 그 한계를 기어이 돌파하려 듦. 그래서 본인만 번아웃 되는 게 아니라, 주변을 같이 믹서에 집어넣게 됨. 극단적 사례로 Zizians 그룹은 ‘대부분 인간은 영혼이 없으니, 영혼 없는 사람은 고려하지 않아도 모두 행복하게 만들 수 있다’고 결론 내렸다 함. 좀 덜 극단적이면 이상주의(실현 불가능한 꿈) 또는 현실과 담쌓은 논리가 됨. “이 사고실험으로 9경 단위의 고통이 발생할 가능성이 1%라도 있다면, 내
            인생을 그것만 막는 데 바쳐야 하고, 네가 그렇게 안 하면 9경 단위 고통에 네가 도덕적 책임이 있으니 넌 악하다”는 식임.
            대부분 합리주의자들은 이상하긴 해도, 최소한 괴짜 극단주의자들과는 거리 두고 살며 “고통을 못 느끼는 동물성분 채식”만 하고, 연 $30만 벌면 $20만을 기부하는 정도에 머묾. 아주 극단적인 사람들은 정말 대화도 힘들고 다들 피함
     * 이 그룹은 여러 스레드: 각 사이트, 커뮤니티, 등등에서 동시다발적으로 성장했음. 철학계에선 Nick Bostrom의 Simulation 이론이 실제 가치보다 훨씬 높이 평가받는 걸 목격했음(다들 대중적 수준에서 무비판적으로 받아들임). 뒤돌아보니 less wrong, 기타 여러 사이트에서도 이 이슈가 발전했음. 시뮬레이션 논의가 철학을 지배하는 걸 보며 그 뿌리가 궁금했음. 이제 와 보니 모든 현상이 하나로 엮여 움직인다는 걸 알게 됨.
       겉으로는 똑똑해 보였고, 몇몇 사이트는 진심이었지만 결국 흐름이 변질됨
          + 오해 없게 하자면, 이 글은 합리주의 그 자체를 컬트라 부르는 게 아니라, 합리주의 개념을 일부 차용했거나 사회적으로 연결된 컬트(예: Zizians)를 다룬 것임
          + 댓글의 상당수가 컬트 일반에 대해 이야기하고 있는데, 사실 이건 왜 이 컬트가 특별히 성공적이었는지를 봐야 함. 성공 비결 중 상당 부분은 돈과 지위가 맞닿는 지점임. 실리콘밸리 유명 인물들이 연결되고, 엔젤/VC 등 자본이 결합되면서 급속도로 퍼졌음.
            한동안 지위(어쩌면 돈)까지 따라오는 커뮤니티였고, 그래서 비정상적으로 성공함
"
"https://news.hada.io/topic?id=22508","FFmpeg 8.0, Whisper 지원 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       FFmpeg 8.0, Whisper 지원 추가

     * FFmpeg 8.0 버전은 Whisper 음성 인식 모델 지원 기능을 공식적으로 추가함
     * Whisper는 OpenAI가 개발한 오픈소스 음성 인식 모델로, 다양한 언어 자동 음성 변환에 사용됨
     * 이 기능 도입으로 비디오 및 오디오 처리 작업에서 직접 음성-텍스트 변환 워크플로우 자동화 가능성 증대
     * 개발자들과 미디어 자동화 분야에서 FFmpeg 활용성 및 효율성이 크게 강화됨
     * 최신 음성 인식 기능을 내장하면서 추가적인 외부 도구나 복잡한 통합 과정 부담을 줄임


FFmpeg 8.0의 Whisper 지원 개요

     * FFmpeg 8.0 버전은 Whisper 음성 인식 모델 지원을 추가함으로써 다양한 언어로 음성 데이터를 텍스트로 자동 변환하는 기능을 제공함
     * Whisper는 OpenAI가 만든 딥러닝 기반 알고리듬을 활용해, 높은 정확도의 음성-텍스트 변환 성능을 보장함
     * 기존 FFmpeg 사용자는 외부 도구를 거치지 않고, 내장된 Whisper 지원 기능을 통해 비디오 및 오디오 파일에서 자막을 생성하거나 음성 내용을 추출할 수 있는 편의성을 얻게 됨

Whisper 통합의 주요 이점

     * Whisper 통합으로 인해, FFmpeg 기반의 미디어 처리 및 자동화 파이프라인에서 효율적이고 확장성이 높은 음성 인식 워크플로우 구현이 가능해짐
     * 음성 인식 알고리듬이 내장됨에 따라 개발자는 복잡한 추가 연동 작업이나 별도 스크립트 작성 부담 없이,간단한 명령만으로 음성 텍스트 변환 결과를 얻을 수 있는 장점이 있음

FFmpeg와 Whisper 조합의 산업적 의의

     * 방대한 미디어 자산 관리, 자막 생성, 영상 데이터 아카이빙 등 다양한 분야에서 FFmpeg + Whisper의 조합은 비용 효율성과 자동화를 동시에 실현할 수 있는 강점을 가짐
     * 기존에는 별도의 오픈소스 음성 인식 도구를 FFmpeg와 연동해야 했으나, 이제는 FFmpeg 본체에서 직접 처리함으로써 워크플로우 단순화 및 처리 속도 향상 효과를 기대할 수 있음

기술적 세부 사항

     * FFmpeg에 Whisper.cpp 라이브러리를 기반으로, FFmpeg 내부에서 바로 자동 음성 인식(ASR) 을 수행하는 오디오 필터가 추가
     * --enable-whisper 옵션으로 활성화 가능하며, 모델 경로(model)는 필수 지정
     * 주요 옵션: 언어 설정(language), GPU 사용 여부(use_gpu), 큐 크기(queue), 출력 형식(format: text/srt/json), VAD(음성활동검출) 모델 및 임계값 설정 등
          + queue 값을 작게 하면 실시간성이 높지만 정확도가 떨어지고 CPU 부하 증가, 크게 하면 정확도가 높지만 지연이 커짐
          + destination 옵션으로 출력 파일·URL·메타데이터에 결과 저장 가능하며, AVIO 프로토콜도 지원함
     * 예제로 SRT 자막 생성, JSON 형식 HTTP 전송, 마이크 입력 실시간 전사(VAD 사용) 시나리오 포함
          + SRT 자막 파일 생성 예제
ffmpeg -i input.mp4 -vn \
-af ""whisper=model=../whisper.cpp/models/ggml-base.en.bin:language=en:queue=3:destination=output.srt:format=srt"" \
-f null -

        Hacker News 의견

     * Whisper는 진짜 놀라운 도구임을 경험했음, 적절한 프롬프트를 주면 삶이 긍정적으로 달라지는 경험을 가질 수 있었음
       Subtitle Edit를 추천하고 싶음(개발자에게 후원도 괜찮음). Subtitle Edit는 Whisper로 실험하며 쓰기 좋은 인터페이스임. 예전 Aegisub을 써본 이용자라면 Subtitle Edit를 Aegisub 2.0이라 부를 만함
       HOWTO: 영상이나 오디오 파일을 오른쪽 창에 드래그한 후, Video > Audio to text (Whisper)로 감. 나는 보통 Faster-Whisper-XXL이 제일 성능 좋았음. 가능하다면 large-v2 쓰는 걸 추천(large-v3는 오히려 몇몇 회귀 있음). 완벽하진 않지만, Subtitle Edit의 Tools > Fix common errors 같은 기능으로 충분히 수정 가능함
       Nvidia 최신 그래픽카드라면 ""--compute_type float32""를 입력해야 정상 작동 가능함. 오류가 난다면, torch 라이브러리를 아래 명령어처럼 특정 인덱스로 재설치하는 게 필요할 수 있음
pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

uv pip install --system torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

       이런 오류가 해결된다면, 어떤 문제와 해결법이었는지 댓글로 남겨 주면 다른 분들께 도움될 듯함(웹 검색에도 활용됨)
       Subtitle Edit 홈페이지
       Subtitle Edit 개발자 후원 페이지
       Subtitle Edit 최신 버전 releases
          + uv에서 torch 관련 패키지를 설치할 때 cuda 드라이버에 맞는 텐서 버전을 자동 선택해줌. 다만 시스템 파이썬이 아니라 가상환경(venv)에서 쓰는 게 좋음
            다음 명령어로 자동 백엔드 선택 가능
            uv pip install torch torchvision torchaudio --torch-backend=auto
            자세한 안내 참고 링크
            torch 관련 패키지는 torch 인덱스에서, 나머지는 PyPI에서 각각 다운로드하므로 충돌 걱정 없음
          + Aegisub도 여전히 fork되어 개발 진행 중임. 두 소프트웨어는 별도 성격이라 비교하기 어렵고 보완적으로 쓸 수 있음. Subtitle Edit가 실제 전사(트랜스크립션)엔 훨씬 적합하고, Aegisub은 타이포그래피 작업 등에서 여전히 강점이 있음
          + Subtitle Edit가 훌륭하지만 하드웨어(Python, Nvidia GPU 등) 제약이 있을 수 있음. GPU가 없거나 서버 구성이 부담된다면, lemonfox.ai 같은 간단하면서 저렴한 API도 선택지임
          + Whisper로 인해 삶이 크게 좋아졌다는 점을 구체적으로 예시 들어줄 수 있는지 궁금함
          + Whisper의 성능이 매우 좋은데, 왜 YouTube의 자동 자막은 아직도 좋지 않은지 궁금함. Whisper의 가장 작은 모델도 Google의 솔루션보다 나은데, 혹시 라이선스 이슈인지 대규모 배포의 어려움 때문인지 질문해봄
     * 로컬 트랜스크립션이 더 다양하게 활용된다면, 영상 제작자들이 번쩍이고 방해되는 자막을 영상에 직접 구워 넣는 행위를 자제할 수 있기를 바람
       전문적으로 제작된 기술 영상에서도 불필요하게 제거 불가 자막을 넣는 경우를 봤음. 고양이 동영상이 아닌데 그러는 건 너무 과함
       로컬 트랜스크립션을 쓰면 자동 번역이 가능하고, 이미 구워진 자막 위에 또 자막을 띄워야 하는 불편한 경험도 해결됨
          + 영상에 번인 자막을 넣는 건 사용자 경험보다는 '참여도(engagement)'를 높이려는 목적이 크다는 점을 지적함
          + 굳이 비교하자면, 예전에 팬들이 만들어내던 애니 오프닝용 테마 자막이 요즘 영상의 번인 자막보다 훨씬 멋졌다고 생각함
          + 결국엔 알고리즘의 영향이 큼. 모든 기기에서 실시간 100% 정확한 자막이 생겨도, 영상이 더 퍼포먼스가 잘 나오면 번인 자막을 계속 넣을 거라고 봄
          + 번인 자막은 언어 변경이 불가능하다는 문제가 있음
          + 이 현상은 유튜브의 '사운드 없는 자동재생' 기능도 일부 원인임. 구워진 자막이 사람들이 영상에 끌려 들어오게 도움이 됨
     * Whisper가 오디오 전사 모델인데, 듣는 도중에 앞부분 내용을 나중에 다시 수정하는 능력이 있는지 궁금함
       예를 들어 “I scream”과 “Ice cream”처럼 발음이 비슷한데 의미는 아예 다른 경우, 긴 문맥이 뒤에 나온 정보를 근거로 앞의 텍스트 결과를 바꿀 수 있는지 확인하고 싶음
       이런 방식이 실시간성 + 정확도 모두를 잡을 수 있는 필요 조건이라 생각함. 실제로 Android에서의 트랜스크립션에서는 말을 할 때 그때그때 텍스트를 조정하는 걸 봤음
          + 내가 제일 좋아하는 논문 제목을 추천함
            ""How to wreck a nice beach you sing calm incense""
            논문 링크
          + 사람 자막가나 각본가는 의도적으로 애매한 말, 언어유희, 스토리상 오해가 중요한 대사를 어떤 식으로 텍스트화할지 늘 고민하지 않을까 생각함. 들은 걸 표현하는 것과 원문(말한 것) 자체를 쓰는 것이 다름
            선천적으로 청각 장애가 있는 분들은 말소리의 언어유희(언어적 장난, 운율 등)를 이해/제작하기 위해 따로 연구할까 궁금함
            이건 마치 경험적 감각 없이 추상 수학을 다루는 느낌일 것, 다만 수학자들도 그들의 추상에서 음악처럼 체험적 현상을 만들어낸다고 주장하니 이것도 흥미로운 부분임
          + Whisper는 30초 청크로 동작함. 이런 네트워크 구조 덕분에 앞/뒤 문맥을 보고 결과를 바꿀 수 있음. 하지만 이 때문에 망상(hallucination)도 많이 발생함
          + “I scream”은 “ice cream”보다 ‘I’ 발음이 강조되는 것 같음. 하지만 맥락이 꼭 필요하다는 의견에 동의함
          + 이 주제에 대해 궁금하다면 Stanford의 “Speech and Language Processing” 교재 16.3장 이후 챕터를 추천함
            해당 pdf 링크
            Whisper 구조를 내가 잘 알진 못하지만, 일반적으로 ASR 모델은 디코더가 현재 청크 이후의 소리도 참고해서 문맥을 이해하게 됨. 그래서 “I like ice cream” 같이 문법적으로 자연스러운 형태를 추론하도록 언어모델로 보정함
     * 관련해서, 이 패치를 만든 저자가 쓴 블로그 추천
       Run Whisper audio transcriptions with one FFmpeg command
     * FFmpeg에 더 다양한 ML 기반 필터가 추가되는 시작이길 바람
       예전엔 sr(super resolution) 필터가 추가되었지만 오래돼서 가중치 얻는 것도 복잡하고, 여러 ML 라이브러리(libtorch 등) 지원이 추가되었지만 시작도 쉽지 않음
       차라리 ready-to-use 모델들을 “models” 폴더에 모아두고 업스케일, 노이즈캔슬, 시계열 업스케일 등 다양한 모델을 빠르게 쓸 수 있었으면 좋겠음
       요즘 오디오·비디오 필터 연구 대부분이 ML 기반이고, 새로운 코덱들도 아마 ML 기반이 될 가능성이 높음
     * 여기서 말하는 Whisper가 OpenAI에서 만든 음성 인식 AI 모델이 맞는가?
       Whisper 위키피디아 설명 참고
          + 맞음, 또 C++ 구현도 존재함 whisper.cpp 깃허브
          + 맞음. 문서에서 직접 인용

     It runs automatic speech recognition using the OpenAI's Whisper model.
          + 완전하게는 아니고, '오디오 전사 모델 패밀리'임(여러 버전과 모델군)
            Whisper 전체 모델 리스트
     * Whisper에 대해 전혀 모르는데, 자동 번역(특히 일어→영어)에도 쓸 수 있는지 궁금함
       아주 오래된 일본 영화를 갖고 있는데, 영어 번역본이 없어서 보지를 못함
       예전에 번역가를 Fiverr에서 알아봤는데, 공식 단가로 따지면 수천 달러, 협상해서 수백 달러까지 낮췄지만 결국 연락이 두절됨
          + Whisper는 확실히 일본어를 영어로 전사·번역할 수 있음
            품질은 방언·오디오 품질에 따라 다르고, ""large-v3"" 모델이 최고 결과를 냄
            다음과 같은 커맨드로 ffmpeg 통합 기능 사용 가능
            ffmpeg -i movie.mp4 -af whisper=model=large-v3:task=translate output.srt
          + 내 경험으론 대체로 쓸 만했음
            “영어” 모델도 실제론 다양한 언어를 지원하며 영어로 바로 번역해줌
            또, 일단 일본어로 전사 후 다른 번역기를 사용해 영어로 옮기는 것도 가능함. 의미적으로 복잡한 대화라면 이 방법이 더 나을 때도 있음
            예시)
            직접 번역:
faster-whisper-xxl.exe --language English --model large-v2 --ff_vocal_extract mdx_kim2 --vad_method pyannote_v3 --standard

            일본어→영어:
faster-whisper-xxl.exe --language Japanese --task translate --model large-v2 --ff_vocal_extract mdx_kim2 --vad_method pyannote_v3 --standard

            whisper-standalone-win 참고 링크
          + 내 경험으론 트랜스크립션(전사)은 완전히 실패했음
            오디오에 없는 내용을 만드는 경우가 많았고, 영상 속 여러 언어가 섞이면 완전히 혼란스러워함
            문맥을 전혀 이해 못해서, 유튜브 같은 자동 번역에서 볼 수 있는 오류가 자주 보임
          + Whisper로 일본어 영상의 자막화 및 번역(영어만)도 가능함
            성능 최상은 가장 큰 모델을 사용할 때 가능하지만, 하드웨어에 따라 속도가 달라짐
            또 다른 방법은 VideoToTextAI 처럼 자막 추출→100+개 언어 번역→SRT 파일로 저장하는 방식도 있음
          + Whisper는 망상(hallucination)이 심각함
            존재하지 않는 문장을 무작위로 추가하는 경우가 많음
            클래스 분류엔 쓸 만하지만, 자막 전사에서는 부족함
     * Apple의 곧 출시 예정인 speech API도 ffmpeg에 추가될 수 있을지 궁금함
       모델 소싱 없이 Mac에서 바로 동작한다면 좋을 듯
       SpeechTranscriber 문서
       SpeechAnalyzer 문서
       실사용 리뷰 및 Whisper와의 비교
     * 이번 PR/패치의 유일한 문제는 whisper.cpp 라이브러리의 avfilter 래퍼만 제공할 뿐이고, 사용자가 종속성 관리를 스스로 해야 한다는 점임
       즉,
       1. whisper.cpp git clone
       2. 그 라이브러리 종속성 설치
       3. 빌드 성공
       4. 실제 모델 다운로드
       이후에야 -af ""whisper=model... 필터를 사용할 수 있음
       사전작업이 없으면 실패하고, 입문자에게 큰 좌절감일 것임
       차라리 Whisper avfilter를 네이티브로 만들고, 모델만 다운로드하도록 하는 게 더 효율적이고 실제 사용자도 훨씬 많아질 거라고 생각함
          + 엔드유저 입장에서는 더 좋겠지만, FFmpeg 측에서는 유지보수 측면에서 어려움이 큼
            whisper-cpp 프로젝트의 변화 속도를 생각해야 함
            다른 필터(vmaf 등)처럼 종속성 빌드와 모델 다운로드가 필요한 경우, 곧 입문자를 위한 precompiled binary도 제공될 것으로 예상함(whisper-cpp가 MIT 라이선스이기도 함)
     * 나는 FFmpeg와 Whisper를 활용해 우리 도시의 경찰 스캐너 실황 오디오를 실시간으로 녹음·트랜스크립트하고 웹사이트에 곧바로 업데이트하고 있음
       오류나 망상은 있지만 원하는 수준으로 잘 작동함
          + 웹사이트가 공개되어 있다면 꼭 보고 싶음
          + 나는 이 기능을 우리 지역 카운티 협의회 회의에 적용해보고 싶었음
            이런 상황에서는 화자 인식(speaker recognition)이 특히 중요할 것으로 봄
"
"https://news.hada.io/topic?id=22610","왼쪽에서 오른쪽으로 프로그래밍하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           왼쪽에서 오른쪽으로 프로그래밍하기

     * 왼쪽에서 오른쪽으로 프로그래밍하는 방식은 코드를 입력하는 즉시 프로그램이 유효한 상태를 유지하며, 이로 인해 에디터의 자동완성 등 도구 지원이 극대화됨
     * Python의 리스트 내포는 선언되지 않은 변수와 타입 추론의 부재로 자동완성 기능을 방해함
     * Rust나 JavaScript는 프로그램을 왼쪽에서 오른쪽으로 자연스럽게 구성할 수 있어 변수 사용과 메서드 탐색이 더 직관적임
     * C와 Python의 함수형 스타일은 함수명이나 구조의 비발견성으로 인해 효율적인 코딩 경험을 저해함
     * 복잡도가 높은 로직에서는 왼쪽에서 오른쪽으로 전개되는 코드가 더 읽기 쉽고, 유지보수 및 확장성이 우수함


왼쪽에서 오른쪽으로 프로그래밍하기

    코드는 입력하는 즉시 유효해야 함


Python 리스트 내포의 한계

     * Python의 리스트 내포 구문 words_on_lines = [line.split() for line in text.splitlines()]은 선언되지 않은 변수(line)에 접근해야 하므로, 에디터가 자동완성이나 타입 추론을 제대로 제공하지 못하는 문제 발생
     * 코드를 부분적으로 입력하는 과정에서
          + words_on_lines = [line.sp처럼 입력하면 에디터는 line의 타입을 알지 못해 메서드를 추천할 수 없음
          + 변수명 오타(lime 등)와 같은 잠재적 오류 탐지도 어렵게 됨
     * 올바른 추천을 받으려면 미완성 코드를 작성해야 하며, 그 과정이 비직관적이고 불편함을 초래함

Rust에서의 왼쪽에서 오른쪽 구성

     * Rust 예제(let words_on_lines = text.lines().map(|line| line.split_whitespace());)는
          + 익명 함수의 선언과 함께 변수(line)가 처음 등장하는 순간 선언으로 간주되어, 즉시 자동완성 및 메서드 추천이 가능해짐
          + 실제로 split_whitespace라는 메서드도 자동추천된 덕분에 쉽게 찾을 수 있었음
     * 이 방식은 프로그램이 항상 부분적으로라도 유효한 상태를 유지하므로, IDE나 에디터가 실시간으로 코딩을 지원할 수 있음

점진적 공개(Progressive Disclosure)와 API 사용성

     * 점진적 공개(Progressive Disclosure) 는 사용자가 필요한 만큼만 복잡도를 경험하는 설계 원리로, 프로그래밍에도 적용 가능함
          + 예: 이미지를 추가할 때만 관련 옵션이 나타나는 워드프로세서의 UX와 유사함
     * C 언어는 이런 지원이 부족함
          + FILE *file에 관련된 모든 함수가 file.로 탐색되지 않으므로, 함수명의 패턴(fread, fclose 등)을 외워야 하고 기능을 발견하기 어려움
          + 반면 이상적인 언어라면 file.을 통한 메서드 추천으로 관련 기능을 쉽게 점진적으로 발견할 수 있음

함수 및 메서드 발견성의 차이

     * Python의 map(len, text.split())과 JavaScript의 text.split("" "").map(word => word.length) 예시 비교
          + Python에서 len, length, size 등 함수명이 예상되지 않아 여러 시도를 해야 실제 동작을 알 수 있음
          + JavaScript에서는 word. 뒤에 .l 만 입력해도 에디터가 length 등 메서드를 제시하여 발견성이 높음
          + map 같은 고차 함수도 실제 반환값과 데이터 타입이 즉각적으로 명확하게 드러남

복잡한 로직일수록 구조적 작성의 장점

     * 복잡도가 높은 로직(filter, lambda가 중첩된 긴 Python 코드)의 경우
          + 코드의 시작과 끝을 반복적으로 확인해야 하며, 조건식이나 괄호 매칭 등에서 가독성 저하와 이해의 어려움이 발생함
     * 동일한 로직의 JavaScript 버전에서는 코드를 위에서 아래로, 왼쪽에서 오른쪽으로 순차적으로 읽고 이해할 수 있음

핵심 원칙

  코드는 입력하는 순간마다 유효해야 함

     * text 단독 입력에도 프로그램이 유효한 상태 유지
     * text.split("" "")까지 작성해도, 이후 .map(word => word.length)까지 이어서 입력할 때도, 전체적으로 항상 중간 상태가 유효함
     * 이러한 코딩 패턴은 에디터의 실시간 지원 가능성을 높이고, REPL 환경에서는 즉시 결과를 확인할 수도 있음

결론

     * API와 언어 디자인은 코드를 왼쪽에서 오른쪽으로 자연스럽게 입력하며 중간 단계마다 유효한 프로그램을 만들 수 있도록 지원해야 함
     * 좋은 API 설계가 이러한 코딩 경험 개선의 핵심임

        Hacker News 의견

     * SQL의 단점 중 하나는 쿼리문이 FROM이 아닌 SELECT로 시작한다는 점임, 그래서 어떤 엔티티(테이블)를 다루는지 바로 파악하기 어렵고, 스마트 에디터에서 쿼리 작성을 더 효율적으로 도와주는 데도 방해가 됨, FROM -> SELECT -> WHERE 순서로 가는 게 더 자연스러움, 특히 SELECT절에서 컬럼 이름을 정하고 WHERE에서 이를 참조하기 때문에 더 그렇다고 생각함, 사실 SELECT * FROM table 대신 FROM table만 써도 SELECT절은 생략 가능할 것이라 봄, 이런 불만 때문에 잔소리쟁이 노인처럼 들릴지 몰라도 그냥 내 개인적 그리움임
          + PSQL과 PRQL은 실제로 FROM이 먼저 오는 쿼리 순서를 사용함, BigQuery에도 파이프/화살표 문법이 최근 추가되었고, DuckDB 커뮤니티 익스텐션도 있으니 추천함 DuckDB - PSQL, DuckDB - PRQL
          + SQL이 이렇게 쓰이는 이유는 관계형 대수 기초에서 투영(Projection)을 항상 먼저 적기 때문임, 그래서 표준에 따르면 WHERE에서 컬럼 별칭을 쓸 수 없음, 왜냐하면 selection(WHERE)이 projection(SELECT) 전에 일어나기 때문임, 참고로 MySQL 8에서는 TABLE <table> 이란 문법도 있으니 참고할 만함
          + 실제로 대부분의 SQL 엔진 내부 처리 순서는 FROM -> WHERE -> SELECT 순서임, 그래서 SELECT에서 정의한 컬럼 별칭이 GROUP BY, HAVING, ORDER BY에는 쓰이지만 WHERE에서는 쓸 수 없음
          + C#에서는 SQL로 컴파일되는 DSL(LINQ-to-SQL)도 FROM이 먼저 오는 구조임, 그리고 IDE에서 다른 절을 작성할 때 자동 완성 기능 덕분에 필드 제안을 바로 받을 수 있어서 이런 구조가 좋다고 생각함
          + Kusto라는 Azure의 데이터 분석 쿼리 언어도 파이프를 쓰는 유사한 형태임 Kusto 쿼리 소개, .NET의 LINQ 스타일도 마찬가지임, 솔직히 SQL에도 FROM으로 시작하는 변형이 좀 더 적극적으로 도입되어야 하고, 그게 어려운 일도 아니라 생각함, 사용성 향상을 위한 시도가 부족하다고 봄
     * 파이썬이 왜 이렇게 사랑받는지 이해하기 어렵다고 생각함, 두 사람 이상이 작업하면 언어가 한없이 고통스러워짐, 글쓴이가 지적한 부분은 빙산의 일각일 뿐임
          + 사람들이 Lisp류 언어에 몰리지 않는 이유와 비슷하다고 생각함, 수학적 엄밀함이 곧 가독성을 의미하지는 않음, 파이썬의 list/dict/set comprehensions는 타입이 정해지는 for 루프와 마찬가지임, 모두가 파이썬의 타입이 헐렁하다고 걱정하지만 리턴 타입을 명확하게 정해주는 유일한 구문(리스트 컴프리헨션)이 표적이 되는 건 이상함, Rust를 포함한 대부분의 다른 언어들에서도 ""from iter as var"" 순서는 아님, 또 각 언어들의 함수 호출 문법을 비교하는 것도 재미있음(파이썬에서도 functools.map이 있듯이)
          + 무언가를 이해하지 못한다고 해서 그게 미덕이 되는 것은 아니라고 봄, 파이썬이 사랑받는 이유엔 분명 뭔가가 있음, 물론 단점도 분명하지만, 그것만으로는 의미가 없음, 장단점을 전체적으로 비교해봐야 하고, 다른 언어와도 그렇게 비교해야 함
          + 나도 파이썬을 좋아함(단, 소규모 팀, 짧고 수명이 짧은 프로그램 기준), 정적 타입이 없어서 구현이 빠르지만 강한 타입 시스템 덕분에 완전히 망가지진 않음, 이 점 때문에 데이터 과학에서 인기가 많다고 봄, 탐색을 할 때 매우 편함, 반면 장기적으로 여러 팀이 유지보수 하거나 대규모 프로그램엔 분명 단점이 있음, 결국 만능 언어는 없고 적어도 ""시도하고 빠르게 갈 수 있는 언어(Soft)""와 ""오랜 기간 관리하기 좋은 언어(Hard)"" 두 가지는 필요함
          + 나도 예전엔 위 의견에 완전히 동감했지만, 타입 주석과 타입 검사 덕분에 다른 사람들이 쓴 파이썬 코드와 협업이 훨씬 수월해졌음, 여전히 대규모 프로젝트까지는 아니라고 생각하지만, 타입이 붙으면서 파이썬은 내가 가장 좋아하는 스크립트 언어가 되었음
          + 나도 공유 코드베이스에선 리스트 컴프리헨션 같은 걸 피하고 아주 단순한 파이썬 스타일을 지향함, ""한 가지 방식만 존재""해야 한다고 알려진 언어지만 실제로는 너무 많은 방식이 공존함, 리스트 컴프리헨션은 개인적으로 재밌고 만족스럽지만, 모두가 한 길로 가야 한다면 이 문법은 없어야 한다고 봄
     * ""프로그램은 타이핑하는 즉시 유효해야 한다""는 주장에 공감은 하지만, 현실에서는 코드를 항상 왼쪽에서 오른쪽, 한 줄씩 순차적으로 작성하지 않음, 중간에 다른 부분을 먼저 작성하거나 변수 선언을 나중에 하는 경우도 많음, 예를 들어 변수를 사용해놓고 한참 뒤에 선언할 때도 있음
          + 코드는 한 번 작성되고 수십, 수백 번 읽힌다는 점에서, 순차적으로 읽을 수 있는 코드가 점프를 요하는 코드보다 훨씬 읽기 편하다고 생각함
          + 사실 이 논의는 글의 핵심에서 살짝 벗어나긴 하지만, 흥미로운 시각임
          + 완전히 동감함, 새 파일 만들 때만 코드를 처음부터 순서대로 씀, 필드 추가할 땐 굳이 클래스 정의부터 가기보다 바로 그 필드를 쓰는 코드부터 만듦, 조건문 개선할 때도 잠시 동안은 유효하지 않은(에러 나는) 상태가 되는 경우가 많음
          + 이 의견에도 동의하지만, 이것과 연결된 중요한 원칙은 ""너 아직 코딩 다 안 끝냈으니 컴파일 자체를 못 하게 막아버리는"" 구조는 너무 과함, 에러는 비차단적이어야 하는데, 일부 언어는 미완료 코드를 아예 막아버림(예: 미사용 변수, 누락된 return 등)
          + IDE가 내가 실제로 코드를 작성하는 순서를 잘 모른다고 느낄 때가 종종 있어서 약간 불편함
     * 일부 IDE에서는 코드 템플릿 기능으로 약어를 입력하면 코드 구조로 확장하고, 탭으로 각각의 플레이스홀더를 채워나가는 기능이 있음, 이때 탭 이동 순서를 반드시 왼쪽에서 오른쪽이어야 할 필요는 없어서 예를 들면 {3} for {2} in {1} 같은 순서도 가능함, 이런 도구들은 ""읽기 좋은 문법""과 ""타이핑하기 쉬운 문법"" 사이의 타협점을 제공함, 나는 툴링을 활용해서라도 읽기 좋은 문법을 우선하는 쪽에 손을 들어줌, 꼭 ""for-in"" 구조만 고집할 이유는 없다고 생각함
     * 요즘 Hacker News에서 합의된 분위기는 파이썬이 pipe 연산자를 빠뜨렸다는 것임, 나는 Mathematica에서 R로 넘어오면서 파이프의 가치를 빨리 깨달았음, 데이터 사이언스에서 단계별 데이터 변환 코드를 쓸 때 정말 직관적이고 읽기 쉬움, 파이썬이 여러 분야에서 쓰이지만 데이터 분석 외 다른 문맥에서도 파이프가 이점이 있을지 궁금함, 왜 파이썬이 파이프를 도입하지 않았는지 이해하려고 함
          + 파이프 연산자에서 한 걸음 더 나아가면, reverse assignment도 해볼 만하다고 생각함, 'let foo = ...'처럼 결과를 변수에 할당하는 대신 '... =: foo' 같은 형식도 써보고 싶음
          + R(특히 tidyverse R)의 파이프 연산자는 나에게 가장 중요한 ""킬러 앱""임, 데이터 작업이 이렇게 쉽고 즐거운 언어 다시 없다고 생각함, 예를 들어 쿠키 레시피를 bake(divide(add(knead(mix(flour, water, sugar, butter)),eggs),12),450,12) 이런 식으로 중첩해가는 대신, mix(flour, water, sugar, butter) %>% knead() %>% add(eggs) %>% divide(12) %>% bake(temp=450, minutes=12) 로 파이프 쓰면 훨씬 쉽고 보기 좋음
          + 파이썬 pandas에서 pipe 문법을 쓰면 아래처럼 되고
result = (df
 .pipe(fun1, arg1=1)
 .pipe(fun2, arg2=2)
)

            R에서는
result <- df |>
 fun1(., arg1=1) |>
 fun2(., arg2=2)

            둘 다 읽기 괜찮은데, R은 데이터프레임 밖에서도 파이프가 더 잘 동작하는 게 장점임
     * 이 논쟁은 FP(함수형) vs OOP(객체지향) 언어 논쟁, vim과 emacs 논쟁처럼 거의 종교 전쟁에 가까움, vim은 연산자가 먼저, emacs는 선택순서가 먼저임, 영어처럼 ""영어식으로 읽히는"" 언어는 대개 동사가 앞에 오는 구조임(Lisp/Scheme이 그렇고), 반면 독일어, 타밀어처럼 동사가 맨 뒤에 오는 언어는 OOP 스타일(명사 먼저)과 어울림, 예를 들어 타밀어로는 ""water drink"" 순이고 영어는 ""drink water""임, 그래서 vim을 더 편하게 느끼는 사람이 있을 수 있음, 각각의 스타일이 더 낫다기보다는 도구/사람 성향에 맞게 만들어지기도 하고, 요즘엔 언어 모델로 웬만한 건 다 가능하다고 봄
          + ""영어처럼 읽히게 설계한다면 동사 먼저냐""에 대해, 명령형 언어면 맞겠지만, 선언형 언어에서 영어처럼 읽히게 하면 주어 먼저임
          + ""독일어는 동사가 항상 뒤에 오냐""에 대해, 사실 간단한 문장은 동사가 두 번째에 옴(""I drink water"" → ""Ich trinke Wasser""), 완전히 문장 끝에 오는 것도 아님
          + vim에서 연산자가 먼저라는 얘기에 대해, 사실 Kakoune은 그 반대로 동작하고, 이 방식이 훨씬 더 논리적이라고 생각함 Kakoune에 대한 설명
     * 한편, 파이썬의 ""from some_library import child_module"" 문법은 매우 직관적임, JS에서는 ""import { asYetUnknownModule } from SomeLibrary""과 같은 구조라서 훨씬 덜 직관적으로 느껴짐
          + JS에서는 namespace import로 다음과 같이 쓰면
import * as someLibrary from ""some-library""
someLibrary.someFunction()

            실제로 IDE 오토컴플리션이 잘 동작해서 좋다고 생각함 MDN namespace import 설명
          + ""from"" 키워드에 집착하는 이유를 의문스럽게 생각함, 그냥
import SomeLibrary {
  asYetUnknownModule
}

            이런 식으로 하면 된다고 봄
     * ReScript는 바로 이 이유 때문에 API를 data-last에서 data-first로 바꿈, 훌륭한 타입 추론 덕분에 거의 항상 정확하고 타입에 맞는 자동 완성이 제공돼서 개발 경험이 매우 좋음, 물론 참조 없이 함수를 선언하면(타입을 알 수 없으니) 여전히 문제가 있지만, 타입을 추가하거나 먼저 호출하면 해결됨, 관련 블로그 글도 추천함 Data-first와 data-last 비교
     * 이런 시각을 계속 주장해왔는데, 실제로 Ruby가 나에게 훨씬 쉽게 느껴진 이유와도 연결됨, 특히 나는 파이썬도 루비도 프로덕션 수준에서 깊게 써본 적 없지만, 파이썬이 왜 그리 널리 설치되고 쓰이기 시작했는지 이해가 잘 안 됨, 루비도 단점이 없진 않지만, 스크립트 작성에서 파이썬이 가진 복잡한 변화까지 직면하는 사람 별로 없는 듯, 적어도 루비는 지난 10년간 큰 버전 충돌 사건은 없었음
     * 전체적으로 기사에서 지적한 부분에 전적으로 동의함, 맥락이 앞에 오고 왼쪽에서 오른쪽으로 읽히는 구조가 LLM이나 오토컴플리션에 더 잘 맞을 거라 생각함, 다만 예시 코드는 len(list(filter(lambda line: all([abs(x) >= 1 and abs(x) <= 3 for x in line]) and (all([x > 0 for x in line]) or all([x < 0 for x in line])), diffs))) 처럼 쓰는 것보다는, NumPy array를 활용하는 편이 메모리 상에 리스트를 새로 만들 필요 없고, 줄 전체를 한번에 다루기에도 훨씬 좋음, 예를 들어
sum(1 for line in diffs
  if ((np.abs(line) >= 1) & (np.abs(line) <= 3)).all()
    and ((line > 0).all() or (line < 0).all()))

       이쪽이 훨씬 ""왼쪽에서 오른쪽"" 잘 반영됨
          + numpy 버전도 여전히 다소 암호 같긴 한데(""line > 0""은 괜찮지만 브로드캐스팅 규칙이 복잡해질 수 있음), 저자가 든 자바스크립트 예시나 C#, Java, Scala처럼 타입 엄격한 언어의 컬렉션 API가 더 깔끔함, 내 취향은 코틀린인데 아래처럼 쓸 수 있어서 좋아함
diffs.countIf { line ->
  line.all { abs(it) in 1..3 } and (
    line.all { it > 0} or
    line.all { it < 0}
  )
}
"
"https://news.hada.io/topic?id=22561","ADHD 약물 치료와 부정적 사건 및 결과의 위험","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ADHD 약물 치료와 부정적 사건 및 결과의 위험

     * ADHD 약물 치료는 자살 행동, 물질 남용, 교통사고, 범죄 위험 감소와 유의한 연관성 존재
     * 임상 자료 기반의 목표 임상시험 모방 방식을 통해 스웨덴 국가 레지스트리를 연계한 대규모 연구 수행
     * 사고성 부상에 대해서는 통계적으로 유의한 감소 효과가 나타나지 않음
     * 효과는 이전에 해당 사건을 경험한 사람과 재발 사건에서 더 강하게 나타남
     * 자극제(예: methylphenidate) 가 비자극제보다 더 큰 위험 감소 효과 보임


개요

     * 본 연구는 ADHD(주의력결핍과다활동장애) 환자의 약물 치료가 자살 행동, 물질 남용, 사고성 부상, 교통사고, 범죄 등 부정적 사건 및 결과의 위험에 미치는 영향을 분석함
     * 스웨덴의 국가 레지스트리 데이터(2007~2020)를 활용하여, ADHD 새 진단 환자 중 진단 후 3개월 내 약물 치료를 시작한 군과 시작하지 않은 군을 비교함
     * 분석 대상은 6~64세 환자 148,581명(여성 41.3%, 중앙값 연령 17.4세)임

연구 설계 및 방법

  데이터 소스

     * 스웨덴 인구, 환자, 약품, 사망, 범죄 레지스트리 등 주요 국가 데이터베이스를 환자 개인 식별번호로 연계함
     * 진단 이전 최소 18개월간 ADHD 약물 치료 전력이 없는 신규 진단자만 포함해, 기존 사용자 효과 배제함

  연구코호트 및 실험 설계

     * “목표 임상시험 모방 프레임워크”를 적용함으로써, 실제 진료현장의 환자 집단에 대한 인과 추론이 가능하게 설계함
     * ADHD 진단 후 3개월 내 약물 치료 시작(지속 복용 시) 그룹과, 치료 시작하지 않은 그룹으로 나누어 2년간 5가지 위험(자살행동, 물질남용 등) 발생률 비교함

  주요 측정 및 통계 처리

     * 첫 사건과 재발(반복) 사건 모두 추적하였으며, 인구 집단의 우선 치료 효과를 평가하기 위해 클로닝, 검열, 역확률가중치법을 사용함(임상시험 유사 구조)
     * 혼동요인을 통제하기 위하여 나이, 성별, 교육수준, 기저질환, 정신건강력, 건강보험 사용 등 다양한 기초 자료를 활용함

주요 결과

  초기 특성

     * 진단 3개월 내 약물 치료 시작 56.7%(84,282명), 비시작 43.3%(64,377명)로 분류됨
     * 주로 methylphenidate(88.4%) 가 처방됨, 그 외 atomoxetine, lisdexamfetamine 등이 뒤를 이음
     * 2년 추적기간 동안 자살행동 4,502명, 물질남용 17,347명, 사고성 부상 24,065명, 교통사고 4,345명, 범죄 11,248명 발생

  ADHD 약물치료와 첫 사건

     * 약물 치료군에서 자살 행동(rate ratio 0.83) , 물질 남용(0.85) , 교통사고(0.88) , 범죄(0.87) 발생률이 비치료군 대비 유의하게 낮음
     * 사고성 부상(0.98) 은 통계적으로 유의한 차이 없음

  재발(반복) 사건 분석

     * 모든 사건에서 약물 치료군에서 재발률이 유의하게 낮음(자살 행동 0.85, 물질 남용 0.75, 사고성 부상 0.96, 교통사고 0.84, 범죄 0.75)
     * 특히 기존에 관련 사건을 경험한 환자에서 효과가 더 뚜렷함

  자극제 대 비자극제 비교

     * 자극제(methylphenidate 등) 가 비자극제(atomoxetine, guanfacine 등) 보다 모든 사건에서 위험 감소 효과가 큼

  하위집단 분석 및 민감도 분석

     * 성별, 연령, 기존 사건력에 따라 효과 차이가 확인됨(예: 성인 및 여성에서 범죄 감소 효과가 더 강하게 나타남)
     * 진단 후 6개월로 기간을 연장하거나, 여러 약물간 교체를 허용해도 결과는 유사함

논의

  의미 및 기존 연구와 비교

     * 본 연구는 임상현장 전체 ADHD 환자 집단에서 약물 치료의 사회적·건강적 긍정적 효과를 보여줌
     * 효과 크기는 과거 환자내 비교 연구에 비해 다소 작은 편이나, 전체 환자 평균 효능을 보여주는 것으로 임상시험 결과와 더 유사한 값을 제공

  임상적 함의

     * 약물 치료는 사례별 위험 감소뿐 아니라, 반복적 위험의 누적 효과를 줄임
     * 특히 자극제의 우위, 위험력 있는 환자에서의 높은 효과 등은 실제 치료 선택과 임상 의사결정에 적용 가능함
     * 장기적이고 실제 표본에 기반한 효과 분석 근거를 제공, 임상 가이드라인 및 의약품 등재 논의에도 기여함

  한계

     * 비약물 치료 정보 미흡, 노출 오분류 가능성, 투약 용량 변화 및 ADHD 하위유형 미확인 등의 한계점 존재
     * 실제로 보고·진료되지 않는 경미한 사건은 분석에서 누락될 수 있으며, 스웨덴의 진단 및 처방 특성이 타국과 차이가 있을 수 있음

결론

     * 전국 규모 목표 임상시험 모방 연구에서, ADHD 약물 치료는 자살 행동, 물질 남용, 교통사고, 범죄 첫 발생 위험 감소와 유의한 연관
     * 반복적 사건에 대해서는 모든 부정적 결과 영역에서 유의한 위험 감소 효과 확인
     * 자극제 처방의 상대적 우위, 과거 사건력 환자에서의 높은 효과 등이 명확히 드러남
     * 본 결과는 ADHD 환자에서 약물 치료 논의와 임상 결정을 위한 중요한 근거 제공

        Hacker News 의견

     * ADHD 치료를 받으려면 제대로 된 약과 치료를 받는 과정이 너무 어렵게 느껴짐. ADHD를 가진 사람은 후속 조치나 거절을 잘 못 견디는 경향이 있는데, 증상이 심할수록 치료 받기가 더 힘들어지는 아이러니가 있음. 많은 의사가 면허를 잃을까 두려워해서, 자극제 처방에는 위험을 느끼지만 거절하는 건 아무런 위험이 없어서 그런 상황 발생함. 대부분의 의사는 환자에게 돌아가라고 하거나, 효과가 있기는커녕 거의 도움이 안 되는 Welbutrin을 주는 경우가 많음. 이 과정에서 고생하는 사람들에 공감함
          + 나는 금기라고 하는 행동을 실제로 해봤음. 담당 정신과 의사가 Adderall만 빼고 다 처방해줘서 결국 온라인 의사에게 가서 Adderall을 받았음. 그 다음에 정신과 의사에게 Adderall 처방받았다고 이야기했더니, 처방을 이어받아줌. 담당 의사는 실제로 매우 합리적이면서도 자극제에 대해서는 매우 보수적임. 결국 약을 받아보고 나서야 제대로 효과를 느꼈고, 그때서야 작동하는 약이 있다는 게 큰 깨달음이었음
          + 정말 말도 안 되는 상황이라고 생각함. 초등학교 3학년부터 ADHD 약을 복용해왔는데, 20년 넘게 먹어온 약을 매달 병원에 가서 처방받아야 한다는 게 도대체 무슨 말인지 모르겠음
          + ADHD 진단에는 사회복지사가 함께 붙어야 한다는 말을 들은 적 있음. 매번 금요일에 약 떨어진 걸 못 챙긴 걸 깨닫고 다시 병원에 전화하는 상황이 반복될 때마다 늘 생각남. 특히 연휴가 낀 주말이 최악임. 한 가지 팁은 (한두 번 약을 안 먹은 날이 있더라도) 항상 30일마다 재처방을 요청해서 남은 알약을 따로 숨겨두고, 진짜 주문에 실패했을 때만 몰래 꺼내 쓰는 방법이 있다는 것임
          + 내가 자주 쓰는 비유는 천식 환자 진료소가 에베레스트 정상에 있는 것과 같다는 것임. 거기까지 갈 수 있으면 진료가 필요 없을 것 같음. 나는 친구 소개로 텔레헬스 클리닉에 가게 됐고, 예약 알림을 이메일, 문자로 받을 수 있어서 6개월 기다리지 않고 바로 진료를 받게 됨. 첫 진료에 내 증상을 2시간 넘게 꼼꼼히 상담해주고, 보험이 안 되면 대안까지 맞춤형으로 안내해주는 실제 진짜 ‘진료’ 경험이었음. 의료진도 환자 케어에 엄청 신경 씀. 그 전에는 주치의, 정신과 등 여러 번 거쳐 겨우 진단을 받았는데, 지금은 내 업무와 삶에 미치는 영향을 제대로 이해해주는 의사 덕에 인생이 훨씬 수월해졌음
          + 거절을 잘 못 견디는 부분에 관련해서, 최근에 'Sensitive Rejection Dysphoria'라는 개념에 대해 알게 됐음. 아직 공식적으로 인정받은 건 아니지만 ADHD와 연관되어 활발히 연구되고 있음. 나도 더 일찍 알았으면 좋았을 것 같음
     * 논문 결론을 보자면 ADHD 약물 치료는 자살 행동, 약물 오남용, 교통사고, 범죄 위험 감소에는 긍정적 효과가 있지만, 첫 번째 사고에서는 우연한 부상에는 효과가 없었음. 반복되는 사건에서는 다섯 가지 모두에서 위험이 더 크게 줄었고, 이 연구는 실제 임상 환경에서의 환자 데이터를 토대로 증거를 제시함
          + 연구 결과는 ADHD 약물 치료로 자살 행동 38%, 약물 오남용 30%, 범죄 28%, 교통 사고 20% 등 위험이 크게 줄었음을 보여줌. 반복적 사건에서는 효과가 더 강하다고 나옴
     * 내 경험을 이야기하자면, 40대에 ADHD 진단을 받고 Concerta를 복용하게 됨. 내 생각에 ADHD는 질병도 장애도 아니라고 생각하지만, 실제로는 그렇게 작동하는 경우가 많음. 오히려 진화의 일부일 수 있다는 근거도 있다고 봄. 대부분의 문제는 현대 생활방식과 사회적 기대에서 비롯된다고 느끼고, 그래서 무료한 일상에서 멍때리거나 반대로 창의적으로 몰입하는 내 자신을 받아들이려고 노력함. 약은 자기 관리나 타인 배려가 필요할 때 주 2회 이하로 도구처럼 사용함. 약이 본질적인 치료도 아니고 나 자체도 아님. Sensitive Rejection Dysphoria가 실제로 존재한다고 믿지만, 제일 나쁜 건 '나는 달라서 틀렸어'라고 자기 스스로 자신을 거부하는 것임
          + 이런 생각은 경증 ADHD 환자나 장애를 경시하고 싶은 사람이 흔히 갖는 시각임. ADHD는 뇌 전체의 기능부전이고, 모든 실행기능(자기조절, 계획, 만족지연, 감정 조절 등)이 전반적으로 손상됨. 하이퍼포커스도 일반인과 달리 조절력 없이 강박적으로 발생함. 보초나 환경 적응자의 역할에 유리하다는 주장은 오해임. 더 넓게 주의 집중하는 게 아니라 필요한 곳에 초점을 못 맞추는 게 문제임. ADHD는 인지능력 저하 뿐 아니라, 퇴행성 신경질환, 심혈관/대사 문제, 수면장애 등 광범위하게 부정적 결과를 동반함. 이런 고통을 너무 긍정적으로 포장하면 문제의 심각성이 희석되어 개인적으로 불쾌감을 느낄 때도 있음
          + ADHD는 연속선상에 있는 장애이고, 증상이 가벼운 사람도 많이 진단되고 있다는 점은 분명 긍정적이라고 생각함. 하지만 아주 심한 쪽은 실제로 심각한 장애고 질병임. 예를 들어 극단적으로는 화장실에 가서 소변만 보면 해결될 고통을 경험하면서도 의지 부족으로 움직이지 못하는 경우까지 존재함. 이런 상태는 어떤 환경에서도 진화적으로 도움이 된다고 보긴 힘듦
          + “사회적 요구에 적응을 못 하는 것이 심리적 문제의 본질”이라는 식의 접근에, ADHD 뿐 아니라 많은 심리적 조건들이 개인과 사회의 적합성 문제처럼 진단 기준에 반영된다고 생각함. 아마 어린 시절 하루 8시간씩 한 곳에 앉아 있지 않는 사회에서라면 ADHD라는 개념 자체가 성립하지 않았을 것 같음
          + ADHD와 약물에 관한 대화는 너무 자주 ""약은 나쁘다"" 아니면 ""약이 전부 다 해결해준다""로 양극단으로 흐르지만, 실제로는 매우 미묘한 문제임
          + 장애라는 기준 자체가 '지금 내가 사는 세계에서 정상적인 생활을 어렵게 만드는가'로 정의된다고 생각함. 즉, 본인 특성과 제공되는 지원, 사회적 환경, 정상적 생활 기준 등의 상호작용이 기준임
     * 캐나다에서 ADHD 진단 경험을 공유함. 의료 시스템 대부분이 공영이지만 ADHD 진단은 예외라서, 남용 위험 때문에 진단비만 CAD $3,000 이상(자폐 추가하면 $2,000+)임. 온라인 설문만 A4 100페이지에 달했는데, ADHD 특성상 그 양이 너무 버거워서 1년이나 걸림. 일정도 일방적으로 클리닉이 정해주고 거기에 맞출 수밖에 없었음(6명이나 되는 상담사의 일정에 내 일정을 맞추는 게 불가능했기 때문). 결국 1년 걸려 모든 과정을 끝내고 겨우 3개월 뒤로 예약됨. 시스템에 피드백을 준다면, 실제로 ADHD 삶을 살아본 사람이 직원으로 필요하다고 말하고 싶음. 현행 시스템은 성실성과 자기조절 결핍에 대한 인식이 너무 없음. 하지만, 한편으론 이 복잡한 진단 과정 자체가 남용 방지책인지도 모르겠음. 진짜 ADHD가 있으면 이 미로를 뚫기 힘들다는 점이 의미심장함
          + 캐나다 지역에 따라 차이가 있음을 말하고 싶음. 온타리오에서 경험은 완전히 달랐음. 의사에게 ADHD 상담 요청하니 바로 두 가지 설문, 심리학자 연결, 몇 주 후 요청대로 Atomoxetine까지 처방받았음(자극제는 최후 수단으로 생각해서 요청했음). 비용이 전혀 들지 않았고, 보험이 있다면 약값도 다 지원받음
          + Frida라는 온라인 클리닉을 추천하고 싶음. 몇 주 안에 진단부터 처방까지 연결해줌
          + 좋은 클리닉도 있음. 나는 adhdvancouver.ca에서 진단받았고, 2일 만에 진단, 3일째부터 약물 테스트 시작했음. 총 비용 500CAD였음
          + 우리 가족(온타리오)은 담당 가정의사 외에 아무 의료진도 관여하지 않았음
     * ADHD 과학 연구자인 Russell Barkley의 유튜브 채널이 대학 마지막 해에 내가 진단을 받을 용기를 준 계기가 되었음. 어린 시절부터의 모든 증상이 뇌 과학적 맥락에서 정리되는 걸 보고 번개처럼 와닿았음. 그는 잘못된 연구를 많이 바로 잡는 것으로도 유명한데, 아주 훌륭한 채널임
          + 내 뚜렷하고 심각한 증상들을 확인하고 수치화하는 것 외에, 반응 시간 테스트를 통해 매우 경미한 충동성도 발견하게 되었음. 주변 사람들이나 내 자신은 설문지에서 충동성이 없다고 대답했겠지만, 테스트는 내가 인지하지 못한 증상을 명확하게 보여줬음. 매우 깨달음이 컸음
          + Russell Barkley 유튜브 채널
          + 지금 방금 그의 채널을 보고 있음. Gabor Mate의 ADHD 이론을 비판적으로 다루는 목록이 있어서 반가움. Mate의 이야기를 들으면서 뭔가 불편하고 조금은 분노까지 느꼈는데, 왜 그런지 정확하게 설명하기가 힘들었음. 꼭 볼 예정임
          + 그는 ADHD의 과학·역사(수백 년 전부터 공식적으로 연구됐다는 점이 놀라웠음, 호주에서는 여전히 기이한 미국 병처럼 여겨지지만)에 대해 훌륭한 강의를 가지고 있음
          + 이런 명확한 진단은 인생을 바꿀 수 있을 만큼 강한 힘을 줌
     * 미국에서 살면서 진단과 약 처방을 어렵게 받았다는 경험담을 읽다 보니 나도 약간 죄책감을 느낌. 나는 20년 전에 진단을 받았고, 여러 주의 여러 의사와 다양한 약을 경험해 왔지만, 그 어떤 의료진도 나를 의심하거나 처방을 꺼린 적 없음. 그냥 요청해서 바로 받았고, 약국에서도 아무 말 없이 처방해줬음. 최근 5년 들어서야 약 재처방 전에 소변검사를 한 번 할 뿐임. 정말 운이 좋았다고 생각함. 최근에는 Reddit에서 평이 좋은 Zenzedi를 시도해보고 싶어서 간단히 간호사에게 메모 남겼는데, 담당 MD가 처방만 해주면 됐음. Concerta에서 용량까지 내가 직접 제안해서 그대로 받았음. 다른 사람들은 같은 목적에 이렇게나 힘들게 과정을 겪는다는 게 슬픔
          + 네 경험은 ADHD 진료가 같은 나라 안에서도 얼마나 크게 다를 수 있는지를 잘 보여줌
          + 이와 관련된 흥미로운 일화 추가하자면, 나는 라디오에서 임상 시험에 참여했다가 ADHD 진단을 처음 받았음. 선별 과정은 꼼꼼했지만, 실제로 약을 복용한 그룹이었는지, 위약이었는지는 알려주지 않았고, 몇 년 후 공개하기로 했는데 병원이 없어졌다는 답변만 받음. 결국 몇 달 동안 내가 뭘 복용했는지 알 수 없게 됐음. 새로운 실험약이었을 수도, 그냥 설탕 알약이었을 수도 있음
     * 내 오랜 가설은, 자극제는 누구에게나 생산성을 높여주고(물론 대가가 있음), ADHD 진단은 사실 대부분의 사람에게도 적용할 수 있는 애매한 것일 수 있다는 점임. 아마도 사람들이 담배를 끊으면서 이런 게 사라진 것 같음. 얼마 전까지만 해도 대부분의 사람들이 니코틴이라는 자극제를 마치 매일 복용한 셈이었으니까
          + 이 가설은 엄청난 양의 고품질 과학적 증거에 의해 부정됨. ADHD는 잘 정의된 증후군이고, 진단법도 확립되어 있어 이 조건이 있는 사람과 없는 사람을 효과적으로 구분함. 자극제는 다수에게 생산성 향상을 줄 수 있지만, 이것이 ADHD가 별로 구별이 안 되는 진단이라는 뜻은 아님. ADHD에 관한 글로벌 전문가 합의문(Consensus Statement)을 참고해보길 추천함. ADHD는 객관적으로 존재함
          + 자극제가 모두에게 생산성을 높여준다는 점은 맞음. Modafinil이 모두를 깨워주는 것처럼, anxiolytics는 모두를 진정시키고, 환각제는 누구나 기분을 좋게 만듦. 자극제가 ADHD 환자에게만 효과가 있어야 말이 안 됨. 하지만 ADHD 진단 자체가 애매하다는 부분에 대해선 동의하지 않음. 교통 사고, 기대 수명, 범죄·중독률 등 모든 지표에서 차이 있으며, 뇌 영상, 실험, 유전, 쌍둥이 연구 등 주요한 차이가 있음. 흡연과도 연관이 큰데, ADHD 성인 35~55%가 담배를 피우며, 일반인 대비 현저히 높음. 니코틴이 특히 ADHD에 더 효과적임
          + 니코틴에 대한 좋은 지적임. 나는 청각 처리장애(APD) 때문에 ADHD를 알게 됐음. APD는 청력이 매우 좋음에도 소음 상황, 특히 여러 사람이나 여성 음역대에서 뇌가 말을 이해하기 힘들어지는 장애임. ADHD, 자폐 범주와도 상관관계가 높음. 한 친구가 내가 무의식적으로 적응한 방식을 보고 바로 알아챔. 이후 정식 진단까지 받았음. 아마 어린 시절 잦은 중이염 후유증의 영향일 수 있음. 논문들을 보면 뇌 발달과 자극 환경의 상관관계 등이 언급됨. 내 경우 겉으로 보면 성공적인 인생이지만, 진단받았다면 삶이 더 쉬었을 것 같음. 사람이 뇌의 복잡성을 쉽게 치부해선 안 된다고 생각함
          + ADHD 진단이 애매하다는 가설은 논문 검색 한 번만 해도 부정될 거임. ADHD는 자살, 약물남용, 노숙, 사고, 범죄, 자가면역 질환 등 거의 모든 면에서 위험이 올라감. 단순히 ""집중이 안 된다"" 수준이 아님
          + 경험적 근거긴 하지만, ADHD인 흡연자가 Adderall을 복용하다가 담배를 끊으면 치료 약용량을 늘려야 한다고 들음. 나는 최근 반년간 니코틴 패치를 썼는데 효과가 좋았음. 이 정도(7~21mg)는 독성도 없어서 일종의 생활 꿀팁임(다른 자극제와 달리 일반의약품임)
     * 나는 Ritalin을 복용 중인데, 여기(노르웨이)서는 어른이 진단받기가 굉장히 까다로움. 처방도 기본 약부터 엄청 신중하게 시작함. Ritalin이 안 맞으면 다른 걸 시도하지만, 담당 의사는 Adderall을 먼저 지정해서 요청하는 환자는 남용 위험 신호라며 마지막 수단으로만 처리함
          + 미국에서는 다르게, 의사가 Adderall을 바로 처방해줬음. 물론 모든 약이 남용될 수 있지만, 내 경험상 Adderall은 ibuprofen처럼 남용 욕구가 생기지 않음. 기분 변화가 느껴지지 않고, 그저 집중이 잘 되는 기능만 있을 뿐임. 커피나 맥주처럼 쾌감이 있는 약도 아님. 만약 Adderall을 깜빡 잊고 안 챙기면 그냥 덜 일할 뿐이지, 반드시 필요하진 않음. 갈망이나 욕구 같은 게 생기지 않음
          + 환자가 먼저 Adderall만 요청하면 남용 가능성이 높다는 식의 논리엔 답답함. 실제로는 치료 용량에서 중독, 남용 위험이 거의 없는 훌륭한 약인데, 보건 시스템이 오히려 지나치게 기피하고 있음
          + 짧게 작용하는 Ritalin은 진짜 별로임. 더 좋은 자극제 너무 많음
     * 나는 49세에 진단을 받았고, 총 18개월 동안 여러 의사와 3곳의 전문가를 거치고 비싼 돈도 많이 들었지만, 이제 somewhat normal함을 느낀 것은 큰 변화임. 그동안 돕지 않은 사람들이 사실 내 문제를 알고 있었을 거라고 생각하게 됨. 예전엔 나를 멍청하거나 게으르다고 불렀던 사람들이 실제로 의도적으로 돕지 않았던 것 같음. 내 자녀가 13살이 될 때마다 선생님한테서 연락이 오면서 ADHD 의심 이야기를 계속 듣게 되어 더욱 확신하게 됨
     * Methylphenidate(리탈린)가 전형적 ADHD 증상을 관리하는 데엔 효과가 있지만, 덤벙거림 같은 부주위로 인한 부상에는 효과가 없는 점이 당연하게 느껴짐. 실제로 나는 항상 정강이에 멍이 들고 있음
          + 내 경험이지만, 진단받고 꾸준히 치료받으면서 사고가 많이 줄었음을 확실히 느낌. 술도 끊고 부터는 더욱 그런 경향이 강화되었음. 어느 쪽 변화가 더 효과가 컸는지는 모르겠지만, 둘 다 눈에 띄게 좋아졌음. 그래도 정강이 멍엔 여전히 공감함. 더 ‘덜’ 사고를 당할 뿐, 완전히 자유롭지는 않음
          + 왜 덤벙거림이 ADHD와 강하게 연결되는지 궁금함. 내 체감상 암페타민은 실행기능에만 효과가 있는 것처럼 느껴져서 더 궁금함
          + 최초의 부상에는 효과가 없고 반복적 사고는 줄어든다는 연구 결과임. 거의 모든 사람이 처음엔 한번은 그런 사고를 겪게 되니까 당연하다고 생각함
          + 지금도 내 갈비뼈에 멍이 있는데 왜 생겼는지 기억이 안 남. 뭔가에 부딪혔던 건 알겠음. Methylphenidate HCL도 그건 커버 못 해줌
          + 솔직히 약효가 떨어질 때 더 덤벙거리는 걸 자주 느낌. 약효가 있을 때 공간 감각이 더 좋아져서 사고가 훨씬 적어짐. 운전, 주차 같은 것도 훨씬 개선됨
"
"https://news.hada.io/topic?id=22596","단일 파일, 이식 가능, 자동 업데이트되는 순수 HTML 웹앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   단일 파일, 이식 가능, 자동 업데이트되는 순수 HTML 웹앱

     * Hyperclay는 모든 UI, 로직, 데이터가 하나의 HTML 파일에 통합되는 방식의 웹앱 제작을 지원함
     * 파일 자체에서 변경 즉시 즉각적인 수정 및 실시간 공유가 가능하며, 앱의 외형과 동작, 편집 방식까지 직접 제어할 수 있음
     * 별도의 빌드·배포 과정, 데이터베이스 또는 복잡한 백엔드 없이 즉시 실행·저장 구조를 제공함
     * HTML 파일 하나만으로 브라우저, 서버, 오프라인 등 어디서나 앱을 실행하고, 모든 변경사항이 버전 관리 및 복구됨
     * 현대 웹 개발의 복잡성을 줄이고, 실시간으로 살아 있는 인터랙티브 앱을 누구나 쉽게 만들 수 있게 설계함


소개: HTML 파일 하나로 만드는 살아 있는 웹앱, Hyperclay

     * Hyperclay는 프로그래머가 복잡한 인프라 관리 없이, 하나의 이식 가능한 HTML 파일로 제품을 빚듯 웹앱을 만드는 경험을 제공함
     * 기존 웹 개발에서 필수였던 설정 파일, 빌드, 프레임워크, 배포 파이프라인 등을 없애고, 파일 한 개만으로 완결되는 구조를 목표로 함

핵심 컨셉 및 장점

     * 앱이 하나의 HTML 파일로 구성됨
     * 시각적 UI를 통해 파일 자체를 실시간으로 편집할 수 있고, 이 편집 내용이 바로 앱의 상태로 영구 저장됨
     * UI, 로직, 데이터가 모두 한 파일 안에 동적으로 포함되어 있음
     * 사용자는 문서처럼 앱을 즉시 수정하고, 변경사항을 바로 공유·다운로드하여 오프라인 사용도 가능함
     * ""Google Docs for interactive code""라는 비유처럼, 공유와 수정, 소유권 제어가 자유로움

주요 기능 요약

     * 직접 조작: 앱이 실행되는 동안 바로 편집 가능함. 컴파일, 새로고침 없이 변경이 즉시 반영됨
     * What you see is what you build: UI를 수정하거나 소스 코드를 직접 편집하면 곧바로 앱이 바뀌며 중간 계층 없음
     * 진정한 이식성: 앱을 HTML 파일로 내보내어 어디에서나(서버·오프라인) 동일하게 실행 가능함. 모든 저장시 버전 관리가 적용되어 복구 가능함
     * 이 모든 것이 특별한 기술 없이, 오직 표준 HTML 파일 한 개로 이루어짐

기술적 구조

     * Hyperclay는 NodeJS 서버와 클라이언트 측 JS 라이브러리로 구성됨
     * HTML 페이지가 자체적으로 DOM을 수정하면, 변경된 document.body.outerHTML을 서버에 보내고, 이 HTML 파일 자체가 갱신됨
     * 체크박스의 checked 속성 등 앱 내의 변경 사항이 영구적으로 HTML 코드에 저장되어, 다음 접속에서도 동일한 상태를 재현할 수 있음
     * 버전 관리와 읽기/쓰기 권한 관리 지원

실제 예시

     * 직접 편집 가능한 블로그, 근무 시간 체크리스트 등 모든 앱을 HTML 한 파일로 작성 및 저장 가능함
     * contenteditable 속성이나, <input type=""checkbox"" persist> 형태로 바로 앱의 상태를 문서에 기록함

배경 및 문제의식

     * 매년 수십 개의 웹사이트를 제작하며, 웹앱 코딩이 글쓰기만큼 자연스러웠으면 하는 니즈가 있었음
     * 전통적인 정적 웹사이트는 변경사항이 휘발적임(사용자 행위가 저장되지 않음)
     * 데이터 영속성을 웹에 구현하려면, 데이터베이스·API·템플릿·계정 시스템 구축 등 과도한 작업이 필요함
     * 프로토타입, 간단한 도구, 개인 개발 로그, 블로깅 등 빠르게 만들고 실시간으로 수정, 공유하고 싶은 요구에 비효율적임

Hyperclay의 해결 방식

     * HTML 한 파일에 UI·상태·동작이 통합됨
     * 마치 데스크탑 앱을 여는 것처럼 손쉽게 열고 곧바로 수정, 결과를 온라인에 바로 반영 가능함
     * 영속적(shared, cloneable, persistent)인 디지털 오브젝트 개념을 제시함
     * 웹사이트 빌더, 문서·도표·프레젠테이션 툴, 대시보드, 블로그, 설문·퀴즈 제작, 데이터 시각화 등 다양한 도구에 적용 가능함

전체 개념 요약

     * 웹앱 대부분은 이미 HTML을 사용함
     * 중간 단계를 생략하면 HTML 파일이 전체 데이터베이스/ API/ UI 역할을 하여, 스택이 단 몇 줄로 단순화됨
     * 개발자는 복잡성을 줄이고, 최소한의 코드로도 사용성과 유지관리가 우수한 앱을 만들 수 있음

Hyperclay 사용 예시

     * 블로그, 체크리스트 등 어떤 앱이든 단 한 개 HTML로 작성·배포·공유·편집 가능함
     * <div contenteditable>내 블로그!</div> 형태로 바로 사용 가능, <input type=""checkbox"" persist>로 각 상태가 문서에 영구 기록됨

결론

     * Hyperclay는 웹 개발의 번거로움 없이, 누구나 가볍고 이식성이 뛰어난 인터랙티브 웹앱을 제작하고, 실시간으로 공유·저장·복구할 수 있는 새로운 방법을 제시함
     * 개발자, 디자이너 뿐 아니라 누구든 쉽게 사용할 수 있는 차세대 웹앱 플랫폼임

   이거 예전에 널리고 널렸던 웹 에디터들과 동작 원리가 유사하지만 html 파일 하나만으로도 된다는 게 흥미롭군요. 개인적으론 이것도 일종의 Proof-of-Concept인것 같기도 하지만 솔직히 이걸 잘만 활용한다면 어떻게 될련지 궁금하기도 합니다.

   이거 동작 방식이 그냥 https://news.hada.io/topic?id=19611 과거 올라왔던 에디터 동작방식하고 동일한데요? 여기에 저도 서버에서 셀프호스팅을 위해 nodejs로 간단한 백엔드 붙여서 에디터로 작성한 post 저장하게 하고, index.html 에 목록 불러와서 보여주는 기능 2개 붙여서 간단한 블로그 게시판으로 쓰는데 둘러보니 동일한 느낌인데요

   재미있네요!
   보안이 어떨라나 궁금하네요.

   흥미로운 아이디어네요. tiddlyWIki도 재밌었는데

   흥미롭네요..

        Hacker News 의견

     * Hyperclay는 NodeJS 서버와 프론트엔드 JS 라이브러리를 통해 HTML 페이지가 DOM을 업데이트하고, 변경된 .html 소스를 교체해서 페이지를 지속적으로 최신 상태로 유지할 수 있음
       예를 들어 체크박스를 클릭하면 checked 속성이 추가되고, 이 상태의 document.body.outerHTML을 Hyperclay로 전역에 저장해서 다음 방문 때 그대로 반영됨
       자동 버전 관리와 읽기/쓰기 권한 관리도 지원함
       개발자와 콘텐츠 편집자 역할이 동일할 때 가장 유용하다고 생각함, 여러 편집자가 동시에 사용하면 서로 변경사항을 덮어쓸 수 있어서
     * 만약 NodeJS 서버가 필수라면 완전히 self-contained HTML 파일만으로는 불가능한 것 같아 혼란스러움
     * 이 내용을 홈페이지에 그대로 추가했음
       참고로 개발자가 fork한 모든 앱에 ""DOM 기반 스키마 마이그레이션""을 푸시할 수 있는 방법을 구현 중임
     * TiddlyWiki가 영감을 줬다고 들었는데, TiddlyWiki의 핵심은 서버가 필요 없는 구조 아니었는지 궁금함
       실제로 간단한 웹앱 만들다 보면 서버가 필요하게 되는 지점이 오긴 하는데, 서버 없는 접근방식과 서버 결합이 약간 모순처럼 느껴짐
       그래도 장점이라면 크로스 디바이스 접근성 향상이고, 온라인 편집이 쉬울 것 같음
       나의 경우 텍스트 에디터에서 휴대폰으로 편집하고 동기화앱으로 랩탑에 싱크함
     * 웹 표준이 file:// 프로토콜로 실행되는 로컬 파일 페이지에서 더 나은 지원을 해줬으면 좋겠음
       단순한 HTML/Vue 미니앱을 만들 때마다 여러 문제가 생겨 항상 우회 방법을 찾아야 했음
       예를 들어 로컬 HTML 파일이 로컬 JS 모듈 임포트가 안되거나, 다른 로컬 파일(오디오 등) 열기가 불가능함
       무분별한 접근을 막기 위해 제한이 필요한 건 이해하지만, 특정 확장자나 디렉터리 명시로 허용해주는 방식이 있으면 좋겠음
       매번 웹 서버를 띄우는 게 너무 번거롭고 과하게 느껴져서, 그냥 URL만 입력하면 바로 앱이 실행되는 게 이상적임
          + 생성기 타입 웹앱에서 큰 제약은 HTTPS로 로드된 페이지만이 클립보드 API를 사용할 수 있어서, file:///에서는 복사 기능이 동작하지 않음
            빌드·의존성 없는 완전 오프라인 앱도 이 한계 때문에 버튼 대신 텍스트 영역으로 대체해야 해서 번거로움
            로컬 서버 구동엔 VS Code devcontainer를 활용하면 자동으로 서버가 올라가고, 명령어 추가로 로컬에서도 HTTPS 가능함
          + 예전 Windows에는 HTA 방식이 있었는데, 확장자가 다른 HTML 파일로 브라우저 메뉴 없이 파일 시스템 접근 권한이 있었음
            보안적으로는 취약했지만, 요즘 Electron 기반으로 폴더·sqlite db 정도 접근 가능한 현대판도 쓸만할 듯
            Orca 같이 브라우저·DOM 없이 캔버스만 제공하는 wasm 앱 빌더도 대안임
          + 로컬 HTML 파일의 위험성을 이해는 하지만, 브라우저에 ""오프라인 전용"" 모드가 생겨서 로컬 파일시스템과 외부 페이지를 분리해 접근할 수 있으면 좋겠음
            완벽한 해결은 안 되겠지만, 간단하고 직관적으로 브라우저를 제한적 로컬 서버로 쓸 수 있어서 충분히 유용할 것 같음
          + HTML을 로컬 플랫폼으로 잠그기 시작한 것에 어느 정도 불만이 있었음
            그래도 오디오·자바스크립트 등 어느 정도는 동작하고, 웹 서버 띄우는 것도 python/node로 바로 실행되니 크게 어렵지 않음
            터미널에 ""webserver_here"" 명령 추가하거나 상시 유지해두면 해결
            오히려 로컬 HTML의 위험성이 커져 더 엄격한 경계를 원하게 됨
          + 최근 여기, 여기에서 비슷한 고민을 했었음
            지금은 localStorage와 수동 내보내기/가져오기만이 대안임
            Hyperclay에서 아이디어를 얻었는데, Electron Fiddle처럼 1회 설치만 하고 여러 미니앱 불러오는 일렉트론 앱 구상에 관심 있음
     * Hyperclay 기술적 구현 방식이 궁금했음
       단순히 localStorage 얘기인 건지, 아니면 FileSystemAPI로 파일을 직접 덮어쓰는 건지 등 상세 동작 원리가 설명이 부족했음
       사용자가 저장할 때 ""다른 이름으로 저장"" 다이얼로그 없이 자동으로 반영되는지도 궁금함
          + Hyperclay에는 두 가지 방식이 있음
              1. 호스팅: 여러 HTML 앱이 자신의 /save 엔드포인트를 호출해 HTML을 저장하고 덮어씌움(백업·버전관리 제공)
              2. 로컬: 오픈소스 Hyperclay Local(링크)을 내려받아 개인적으로 운영, 역시 /save 엔드포인트를 호출해 백업 가능, 직접 서버에 커스터마이즈해 호스팅 가능(auth만 구현하면 됨)
          + 글쎄, 이걸 한 단계 더 나가면 서버 구문 추가한 PHP, WordPress와 본질적으로 닮지 않음?
            시스템이 다중화되면서 점점 복잡해져서 실질적 개선보단 오히려 부담이 늘어나는 순환임을 느꼈음
          + ""모던 웹 개발의 잡음을 무시하고 내가 원하는 경험을 만든다""라는 메시지가 짧은 텍스트와 밈 이미지 사이에 섞여있는 연출이 조금 이상하게 느껴졌음
            내가 원하는 경험은 핵심 설명과 흐름 있는 뒷이야기, 꼭 필요한 부분만의 다이어그램임
          + 서버에 DB가 있고, HTML을 저장하는 구조임
            즉 JSON(변경 내용만 따로 저장) 기반이 아니라 HTML 전체 시점마다 저장하는 느낌임
          + 이해하기로는 HTML 파일 자체가 갱신됨
            폼, 속성, 태그 등 변경 내역이 HTML 소스에 직접 반영되는 구조임
     * WWW 원래 비전에 다시 가까워지는 느낌임
       초창기 웹 브라우저(NeXT용 Tim Berners-Lee 앱)도 에디터 기능이 포함된 것이었음
       초창기 HTML 편집이 웹에서 사라진 이유는
         1. HTTP PUT 메서드가 없어서 수정된 HTML을 웹에 저장 못하고 로컬에만 저장할 수 있었음
         2. Mosaic 등 브라우저는 복잡도 등 이유로 편집 기능 제외하고 배포되면서 대중화 방향이 달라짐
          + 읽기/주석/쓰기 가능한 웹은 오래전부터 바랐던 웹의 모습임
            Hyperclay처럼 각 페이지마다 독자적인 툴킷을 만드는 것도 멋지지만, 정말 바람직한 건 브라우저(유저 에이전트) 레벨에서 어디서든 사용 가능한 표준 툴이 제공되는 거라고 생각함
          + W3C가 Amaya라는 웹 에디터를 10여년 간 유지했음
            좋은 아이디어였고 테스트베드 역할도 충실했다고 생각
            없어져서 아쉽긴 하지만, 초기 비전에 명확히 부합했음
          + TBL(팀 버너스 리) 초기 맥락에선 로컬 저장=웹 저장이었음
            대학 워크스테이션에서 NFS 등 네트워크 공유를 활용해 실질적으로 파일이 공개 저장되고 동일한 머신 주소로 접근 가능했음
            SGI 워크스테이션에서는 네트워킹 설정만 하면 완벽하게 바로 동작했음
            또한 웹의 초점은 정보를 구조화하는 데 있었고, 외형보다는 내용이 더 중요했음
            시간이 지나면서 WYSIWYG 모델과 테이블/디브 남용 등 외형에 집착하게 돼 초심이 흐려짐
            누구나 이해 가능한 단순한 설계를 하는 게 정말 어려운데, 현재는 소수 전문가 집단만 이해하는 꽤 복잡한 구조가 됐음
            HTML이 여전히 쉽게 쓸 수 있는데 현대 개발에서는 복잡한 전문 기술이 된 점을 아쉬워함
            원래 TBL이 지향한 맥락을 잘 이해하는 소수만 남은 것 같음
          + ""웹 브라우저도 에디터""라는 부분에 대해
            요즘 브라우저는 다 개발자 도구를 통해 라이브로 HTML/JS/CSS 수정 가능하니 모두 에디터 아니냐고 생각하게 됨
            다들 devtools 안 쓰는 건지, vanilla JS/HTML이 아닌 React나 TS만 쓰는 건지 궁금함
            크롬·파이어폭스·사파리 계열은 모두 브라우저 내장 IDE 수준 기능을 제공하니 직접 코딩도 가능함
     * Hyperclay를 확인해보니 DOM(가상 DOM)을 활용하는 구조인 것 같음
       Shopify 스타일의 정책 및 법적인 안내도 좀 추가되면 더 좋겠음
       내 HN 프로필을 보면 왜 이게 멋지다고 생각하지만 법적 부분이 필요하다고 느끼는지 알 수 있음
     * 게임 세이브 파일에도 비슷한 방법을 시도해본 경험이 있음
       첫 번째 줄은 <!DOCTYPE html><html><head><script>const rawData = 형태, 두 번째 줄엔 전체 상태를 담음
       저장 버튼을 누르면 document.documentElement.outerHTML을 받아 최신 상태로 두 번째 줄을 바꿔서 다운로드함
       서버 없이도 동작함
       관련 코드
          + 크롬에서 아래 data: URL 북마크를 만들어 탭 하나에 메모장 스타일 에디터를 띄워두고, 탭만 안 닫으면 state가 유지됨
data:text/html,<html><head><title>Notepad</title><style>html,body{margin:0;padding:0;}textarea{padding:10px;font-family:Courier;font-size:16px;height:100%;width:100%;border:none;outline:none;}</style></head><body><textarea style=""height:100%;width:100%;font-size:16px;padding:10px;""></textarea><script>document.getElementsByTagName('textarea')[0].focus()</script></body></html>

          + 나도 비슷하게, 단일 HTML 파일로 동작하는 게임을 만듦
            텍스트 수정 후 새로운 로컬 버전으로 저장 가능
            안드로이드+Brave 브라우저에서는 잘 되는데, iOS+Safari에서는 지원이 안 됨
     * TiddlyWiki도 이 분야의 20년 이상 역사를 가진 툴임
       Hyperclay는 다중 사용자/Multi-tenancy와 DB 기반 영속성에 더 중점을 두는 구조로 보임
       TiddlyWiki도 참고할 만함
     * 누군가 Windows 98 HTA 아카이브를 재발견한 듯한 프로젝트임
       HTA 위키
          + HTA는 원조 Electron 느낌임
            다만 예전 IE 환경에선 디버깅이 지옥이었음
          + HTA는 시대를 앞선 좋으면서도(동시에 끔찍한) 기술이었음
            그냥 웹페이지처럼 보이지만, IE 전용에 로컬 프로세스 실행 권한까지 있었음
            영속성 관리가 문제였고, 유사성은 매우 제한적임
          + 그 전엔 Outlook Web Access가 비슷한 역할을 했던 듯함
            Outlook on the web
          + 나도 똑같은 생각이라 댓글 달려고 했음
     * 독특한 아이디어라 생각해 언젠가 꼭 시도해보고 싶음
       사이트도 살펴보니 전체적으로 마음에 드는데, 현실적으로 제한점이 어디서 드러나는지 궁금함
       보안 측면: 내가 페이지를 바꿀 수 있다면, 다른 사람도 가능한지? 권한은 어떻게 관리하는지?
       코드량, 로직이 많아지면 관리가 어려워지는 시점이 언제인지? 데이터량 증가 시 어떻게 되는지?
       예를 들어 맥주 관리 앱을 내가 만들면, 다른 사용자가 내 데이터 없이 별도로 앱만 복사해서 사용할 수 있는지 궁금함
          + 보안: SquareSpace 등 거의 모든 웹사이트 빌더와 동일한 신뢰 모델임
            사용자가 자기 사이트를 자유롭게 바꿀 수 있음
            만약 사용자가 신뢰를 어기면 유료 계정 접근권, 그리고 남에게 손해 발생시 책임이 따름
          + 수정 권한: 앱을 만든 사람 누구나 수정 가능
            ""signups"" 기능 활성화 시 다른 사용자도 앱을 쉽게 fork할 수 있고, 원본으로 추적 가능
            fork 앱에 업데이트 푸시 기능도 구현 중임
          + 유지보수 난이도: NomadList의 Pieter Levels도 단일 index.php만으로 월 $60k 앱을 운영하니, 결국 코드를 어떻게 정리하느냐, 불필요한 부분을 어떻게 견디느냐에 달렸다고 생각함
          + 다른 사람들이 앱을 fork해서 자신의 데이터만 저장하도록 운영할 수 있음
            앞으로 협업 기능도 넣을 계획이지만, 지금은 1인 사용자에 가장 적합함
     * 이 아이디어가 참신하게 느껴짐
       Webstrates 프로젝트에서도 비슷한 내용을 실험하고 있음
       DOM을 지속성 계층으로 활용해 소규모 그룹용 협업 소프트웨어를 만들고 있는데, Hyperclay는 이 메커니즘을 전통적인 웹페이지에 그대로 활용한다는 차이가 있음
       최근에는 MyWebstrates처럼 로컬 우선 방식을 시도 중임
       Webworker를 활용해 Hyperclay도 오프라인 편집 지원 가능할지 궁금함
          + Clemens, Webstrates에 깊이 감명받은 사람임
            작년에 Hyperclay를 구상하면서 처음 알게 됐음
            Hyperclay의 로컬 퍼스트 버전을 정말 해보고 싶고, 오프라인 편집이 개인 소프트웨어의 기둥이라고 생각함
            혹시 비디오콜로 의견 교환 가능한지 궁금함
"
"https://news.hada.io/topic?id=22516","VC가 지원하는 회사가 내 소규모 오픈 소스 프로젝트 EU 상표권을 박탈함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               VC가 지원하는 회사가 내 소규모 오픈 소스 프로젝트 EU 상표권을 박탈함

     * VC가 지원하는 기업이 소규모 오픈 소스 프로젝트의 EU 상표권에 이의 제기를 진행함
     * 신청자는 오픈 소스 프로젝트의 상표 출원 후 공식적으로 승인받음
     * 해당 VC 회사가 대규모 법률 자원을 동원해 상표권에 도전함
     * 법적 분쟁 과정에서 재정 압박과 행정 부담이 개인 개발자에게 집중됨
     * 결국 상표권이 무효 처리되어 프로젝트는 브랜드 보호에 큰 타격을 받음


사건 개요

     * 개인 개발자가 유럽 연합(EU)에서 소규모 오픈 소스 프로젝트에 대한 상표권을 출원하여 승인받음
     * 그 이후, 벤처 캐피탈 지원을 받은 한 대형 회사가 동일하거나 유사한 이름을 사용하고 있었으나, 더 늦게 설립되었음
     * 해당 회사가 EU 상표청에 상표권 무효화 절차를 개시함

법적 절차 및 대응

     * 대형 회사 측은 강력한 법률 자문단과 함께 소송에 임함
     * 개인 개발자는 상표권을 방어하기 위해 직접 법적 대응을 시도함
     * 복잡한 소송 구조와 반복적인 자료 제출 요구로 인해 상당한 법률비용과 시간, 영업적 부담이 발생함

결과와 영향

     * 두 당사자 간의 자원과 역량 불균형으로 인해, 결국 소규모 프로젝트의 상표권이 무효화 처리됨
     * 해당 OSS 프로젝트는 브랜딩 보호 능력을 상실하게 됨
     * 대형 기업의 자본력과 법률 역량이 OSS 프로젝트의 기본적인 권리를 위협할 수 있다는 점이 강조됨

시사점

     * 오픈 소스 커뮤니티에서 브랜드 보호의 어려움이 드러남
     * 특히 대규모 자본과 법률 자원을 가진 기업과의 경쟁 구조의 불공정성이 문제로 제기됨
     * 창작자의 프로젝트명 및 상표권 확보 노력이 대기업의 법률적 공격으로 인해 항상 안전하지 않음을 시사함

        Hacker News 의견

     * Deepki는 BCorp 인증을 받았음으로써 커뮤니티와 이해관계자에 대한 책임감을 강화한다고 밝힘
       BCorp 인증의 핵심 가치는 ‘세상을 변화시키기 위한 주체가 되어야 함’, ‘비즈니스는 사람과 장소를 위하는 방향으로 운영되어야 함’, ‘제품과 정책과 이익을 통해 해를 끼치지 않고 모두에게 이로움을 주어야 함’, ‘우리는 서로에게 의존하며 미래세대를 위해 책임을 져야 함’ 등임
       만약 BCorp 인증 기업이 이러한 핵심 가치를 어기면 신고할 수 있고 B Lab이 조사함
       관련 정보는 Deepki의 인증 및 수상 내역과 불만 신고 절차에서 확인할 수 있음
          + 해당 내용은 정말 잘 찾은 자료임
            의견이나 상황에 따라 신고를 고려해 볼 만함
            OP가 필요하다고 판단하면 진행할 수 있다고 생각함
          + 이런 류의 인증은 대체로 무언가 잘못했을 때 많은 비용을 내고 구매하는 ‘레이블’이라고 막연히 생각했던 경험이 있음
          + B Corp의 원칙에 부합하지 않는 기업을 실제로 신고할 수 있는지 궁금함
     * 상표권 방어는 상표에 가치가 생기기 전까지는 신경 쓸 필요도 없다고 생각함
       다른 명칭을 골라서 진행하는 게 편함
       마음에 안 드는 언어거나 큰 회사들이 신경 안 쓰는 나라 언어라면 도전하는 사람도 별로 없을 것임
       ‘Rumpa’나 ‘Billen’ 같은 이름이 괜찮을 수 있다고 봄
          + 나 역시 비슷한 경험이 있어서 공감함
            1년에 1000만 달러 매출을 올린 회사를 일구었지만, 초반에 미국에서 상표 출원을 시도했을 때 거절당했던 경험이 있음 (단, 부속 레지스트리에 등록됐으나 실용성은 거의 없었음)
            나중에 다른 산업에 속한 회사가 똑같은 상표로 출원했고, 그쪽은 승인받았음
            실제로 문제가 된 적은 한 번도 없음
            지금은 상표를 공식적으로 재신청할 여력이 충분하지만 굳이 그럴 필요성을 느끼지 못함
            EU 상표는 먼저 출원하는 사람이 우선권을 얻는 반면, 미국은 실제 상표 사용자가 우선임
            여러 변리사와 상표 출원 경험을 토대로 판단한 결과, 기존 회사나 사이드 프로젝트 모두에 상표에 시간과 에너지를 낭비할 가치는 전혀 못 느꼈음
          + 100% 동의함
            예전 한 크립토 벤처의 논기술 공동창업자가 있었는데, 그는 투자 유치에만 신경 썼지 실행력은 부족했고, 계속해서 특허와 상표만 내려고 했음
            그래서 내가 프로젝트 출시를 위해 특허/상표 작업을 중단시키고, 6개월 만에 런칭을 했음
            이 ‘실행’ 덕분에 수백만 불 매출을 올렸고, 만약 IP 이슈에만 매달렸으면 기회를 놓쳤을 것임
     * 지금 상황에서는 쿨하게 포기하고 떠나는 게 좋다고 생각함
       인생은 소송할 시간도 없이 짧음
       내가 세 년간 교제했던 사람이 소송을 겪고 있었는데, 관계 내내 일상이 소송에 묶여 있었음
       변호사에게 수천 불을 쏟아부어도 결국 남는 게 없었음
       정말 가치 있는 조언은, 기회가 주어졌을 때 조용히 떠나라는 것임
       인생은 소송에 얽매이기엔 너무 짧음
          + 룸에서 흔히 볼 수 있는 조언과 달리, 내 경험상 ‘변호사를 선임하고 법적으로 맞서라’는 말은 현실과 다름
            단순하게 보였던 이슈도 시간과 돈, 인생을 소모시키는 끝없는 구덩이가 될 수 있음
            정말 간절하게 지키고 싶은 사안이라면, 도전 전에 시간을 얼마나 쏟을지, 돈을 얼마나 쓸 수 있을지 신중하게 따져봐야 함
            이 두 가지 모두 높은 한계가 아니라면 그냥 잊고 넘어가는 게 현명함
          + “변호사가 개입하는 순간 무조건 손해임. 변호사만 이익임.”이라는 말을 해 주던 좋은 친구가 있었음
            100% 항상 그런 건 아니라도, 좋은 판단 기준이라고 여김
          + 솔직히 본인 성향에 따라 다름
            쾌락주의자라면 얼른 lawsuit에서 벗어나고 인생을 즐기는 게 맞고
            이타주의자라면 더 큰 정의 혹은 사회적 선 실현을 위해 직접 뛰어드는 것도 현명할 수 있음
            허무주의라면 둘 중 어느 쪽이든 상관없음
          + 이 일뿐 아니라 인생에는 우리가 신경 써봤자 곧 아무 의미 없게 될 것들에 시간을 너무 많이 쓰곤 함
            시간이야말로 가장 소중한 자원임을 새삼 느낌
          + 이런 조언에 매우 공감하고, 본받고 싶기도 함
            그래도 약자가 부당하게 힘에 밀려 날아가는 상황을 억울해서 그냥 두기는 어렵고, 원칙상이라도 한 번은 맞서 싸워 보고 싶은 심정임
     * 악덕 기업이나 악덕 정부의 가장 큰 적은 언론임을 잊지 말아야 함
       이번 건은 언론도 관심 가질 정도로 충분히 큰 사건임
       ‘EU가 소상공인에 전쟁 선포, 갑자기 내 프로젝트 명 사용료 명목으로 수천 유로를 요구한다’ 같은 제목으로 지역 언론부터 여러 곳에 스토리를 타진해 보는 게 좋겠음
          + 언론도 사실상 악덕 기업이며, 때때로 악덕 정부의 큰 지지자임
            링크 이슈처럼 언론이 정부에 기업들까지 압박하도록 워딩하는 일도 종종 있음
            물론 언론이 타 기업이나 정부의 적 역할을 할 때도 있지만, 그건 순수한 선의가 아니라 자기 이해관계 때문이라고 봄
          + ‘Wealthy US startup steals EU trademark’라는 자극적인 제목도 이슈몰이에 좋겠음
          + 나쁜 뉴스도 결국은 관심을 불러오므로, 그 자체로 기회가 될 수 있음
     * Reddit에서 이미 OSS(오픈소스 소프트웨어) 쪽 지인들에게 도움을 요청했다는 것을 보았음
       오픈소스 프로젝트 상표권에 시장 기반 사용 기준을 적용하는 건 부적절하다고 느낌
       개인적으로는 이미 Github이 있거나 웹사이트에서 이름을 쓰고 있으면 사용 입증이 충분하다고 생각함
       업데이트 소식 기다리겠음
     * 네가 상대방 회사(Deepki) 신규 상표등록에 대한 이의를 제기하자 그들이 보복으로 기존 상표(Deepkit) 말소를 신청한 것 같음
       상대방이 Deepkit이라는 이름을 실제로 사용하려는 건지, 아니면 그냥 화가 나서 그러는 건지는 모르겠음
       어쨌든 큰 회사와 맞서면 이길 걸 기대하기 어려움
       항소해도 실질적으로 얻는 이득이 많아 보이지 않음
     * OP가 이번 일로 힘든 상황이 안타까움, 좋은 결과 있길 바람
       다른 한편으로, 이 회사를 대충 살펴보니 누가 1억 6천만 달러나 투자했는지 의아함
       회사 사이트는 영혼도 없어 보이고, 온통 상투적인 기업 용어 투성이임
       리더십 팀도 ‘불필요한 직업’으로 가득 차 있어 보임
       벤처 자금이 이런 식으로 흘러가는 게 놀랍고 황당함
          + 간단한 조사만 해봐도 펀딩 라운드에 참여한 곳이 Highland Europe이라는 사모펀드인데, 이쪽 파트너 한 사람이 Deepski 이사회에 들어갔더라
            아마 그 사람은 이력서에 ‘AI 리더십 경험’ 한 줄 쓰려는 걸 수도 있음
            또 하나 주목할 투자자는 프랑스 공공 기관인 bpifrance인데, 이쪽도 국가 차원에서 ‘AI 분야 지원’을 보여주려는 목적일 수 있겠음
            물론 Deepski와 리더십이 유능할 수도 있으나, 네트워크 잘 잡힌 인사들끼리 모여서 다 같이 이득을 얻는 구조가 실제로 없진 않을 것 같음
            FOSS(자유/오픈소스)쪽에서 이 이슈에 정말 진심인 사람이 있다면, 공공 기관(bpifrance) 측에 이 소식을 알리는 게 악성 PR을 막는 방법이 될 수도 있겠음
     * 오픈소스 프로젝트가 상표권을 등록하는 경우는 흔하지 않음
       엄격한 IP 보호 없이도, 상표권자가 FLOSS 프로젝트에 이름을 바꾸라고 요구하는 상황 역시 매우 드묾
       왜 상표권을 등록했는지는 각자의 사정이겠지만, 상표권 분야 자체가 IP 권리 보유자 위주로 돌아가고, 명칭이나 영역, 디지털 콘텐츠에 희소성이 있다고 전제하는 시스템임
       FLOSS 프로젝트들은 굳이 그 시스템에 들어가서 경쟁하기보다는, 디지털 커먼즈의 환경을 지키는 쪽을 고민하는 게 더 현명하다고 생각함
       기존 IP 법이 전제하는 기준과 실제 오픈소스 현실은 괴리가 큼
          + 상표권 등록을 선택한 이유는 그 이름을 좋아했고, 앞으로도 OSS나 상업적 방향 모두에서 계속 쌓아가고 싶었기 때문임
            기업들이 비슷한 이름을 등록해 역으로 나를 고소하거나 내 프로젝트를 없애버릴까봐 걱정한 것도 있었음
            EU는 ‘먼저 출원한 사람이 우선’ 원칙이기에, 내가 등록하지 않았으면 다른 회사가 먼저 Deepkit이나 Deepki를 등록하고, 내가 소송에 휘말렸을 것임
            지금은 상표권을 잃은 상태고(아직 완전히 확정은 아님, 항소 가능), 이름 유사성으로 역으로 고소당할 위험이 있음
            항소 시 사용 데이터 수집을 게을리한 것은 실책일 수 있음, 순진했지만 프로젝트를 지키려는 입장에서 상표 제도가 도입된 근본 취지가 이런 케이스 보호 아니냐는 문제의식이 있음
            내가 틀렸을 수도 있지만, 전문가 의견은 아님
          + Ryan Dahl이 Oracle을 상대로 좋은 싸움을 이어나가고 있다는 점을 상기시켜주고 싶음
            자세한 내용은 이 트윗 또는 Deno 블로그 참고
          + 내 소견으로는 상표권이야말로 유일하게 경쟁적(rivalrous)인 IP 형태임
            A가 쓰면 B는 못 쓰는 식임
            만약 독립적으로 McDonald's 간판과 이미지를 카피해서 서비스 질을 낮춘다면 ‘진짜’ 맥도날드의 평판에 피해를 줄 것임
          + JavaScript 관련 상표권 분쟁 역시 참고할 만한 법적 이슈임
            누군가 갑자기 오픈소스 상표를 뺏어가려 들지 않게 미리 플래그폴(등록)해 두는 것이 좋을 수도 있음
            관련 내용은 deno.com 블로그 확인 가능
     * EU가 트래킹(consent)을 엄격하게 요구하면서도, 상표권을 지키려면 사용자 위치를 추적해야 해서 모든 기업이 위치 추적을 허락해 달라는 팝업을 띄워야 하는 상황임
          + 나는 변호사가 아니지만, 사업상 필수적이라면 동의 없이는 안 된다는 규정이 일부 예외가 있을 수 있다고 생각함
            만약 상표권 유지에 위치 추적이 필요하다면 모든 사업체가 사용자 트래킹을 해야 한다고 주장할 여지는 있을 듯
            실제로 법정에서는 안 통하겠지만, 머릿속에서는 재밌는 논점임
          + 대부분의 상표권 보유자는 상표 사용을 입증할 때 상업 기록이나 회계 기록 등 훨씬 더 강력한 증거 자료를 활용함
     * 상표권은 아무 의미 없다고 봄
       항상 더 큰 회사가 등장해서 힘으로 쉽게 빼앗아 갈 수 있음
       Allen Pan이 Mythbusters 상표와 관련해 당한 것과 똑같은 상황임
          + 특히 이번 케이스가 심각한 것은, 관할 당국조차 요구 기준을 명확하게 설명하지 않고, 아주 많은 EU 내 상업 행위 증빙만을 요구했다는 점임
            Deepkit 소프트웨어 라이선스를 EU에서 두 명만 $10에 구매한 기록이 있으면 충분한지? 부족하다면 기준이 뭔지?
            단순히 더 ‘큰’ 회사라는 이유로 상표를 쉽게 빼앗는 게 과연 정당한지 의문임
            만약 상대 회사도 EU 고객 없는 신생 스타트업인데 이게 정당화 되는 건지
            이런 이중 기준이면 오히려 상표 제도를 폐지하는 게 낫다고 생각함
          + 작은 쪽이 길고 긴 소송 끝에 이긴 사례도 있음
            참고할 만한 예시로 Nissan Motors v. Nissan Computer 케이스가 있음
          + 내 지인이 Big Tech를 상대로 9자리 수 규모의 상표 소송에서 이긴 적 있음
"
"https://news.hada.io/topic?id=22582","해커뉴스에서 AI가 언제부터 두드러지기 시작했나?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      해커뉴스에서 AI가 언제부터 두드러지기 시작했나?

     * 2025년 기준, 해커뉴스 상위 10개 포스트 중 3개가 AI 관련 내용임
     * AI에 관한 관심은 ChatGPT가 아니라 GPT-4가 출시된 2023년 1분기부터 급증함
     * 2021년 3분기에 Apple NeuralHash 이슈 등으로 AI 관련 글의 부정적 감정이 크게 늘어남
     * 전체 AI 관련 글 중 52.13%는 긍정적, 31.46%는 부정적, 16.41%는 중립적 반응임
     * 최근 분기에는 약간 부정적 경향이 커지고 있으나, 뚜렷한 장기 트렌드는 나타나지 않음


해커뉴스에서 AI 논의의 부상

   2025년 현재, 해커뉴스 상위 10개 포스트 중 3개가 AI 관련 주제임
   이는 많은 이들에게 놀라운 일이 아니지만, 언제부터 이런 현상이 시작되었는지에 대한 궁금증이 생김
   특히 최근 부정적인 AI 관련 포스트가 1위를 차지하면서 이 질문을 조사하게 되었고, 조사 과정에서도 AI를 도구로 활용함

데이터 수집 및 분류 방법

     * 해커뉴스 Big Query 데이터셋을 활용해, 2019년 1월 1일부터 2025년 8월 15일까지 상위 10개 스토리 총 24,910개를 수집함
     * 개별 포스트 및 주요 댓글을 GPT-5-mini 모델에 입력하여 자동 분류 작업을 수행함
     * Jina.ai reader로 웹페이지 내용을 LLM이 읽을 수 있도록 정리하고, 댓글까지 추가 입력하여 맥락 분석 진행함
     * OpenAI Batch API를 사용해 각 포스트에 대해 아래 세 가지 항목을 생성함
          + Summary: 포스트가 어떤 내용인지 짧게 요약
          + AI Mention: AI 관련 언급 여부 (True/False)
          + AI Sentiment: 언급이 있을 경우 긍정, 중립, 부정으로 감정 분류

분류 데이터와 분석 결과

     * 분석을 통해 AI 관련 논의가 2019년 이후 가장 높은 수준에 이르렀음
     * 분기별 AI 관련 글 수가 꾸준히 증가하며, 2025년 3분기 중반까지의 추세라면 역대 최다 기록 예상임
     * AI 관련 포스트의 최초 대규모 증가는 ChatGPT(2022년 3분기)가 아니라 GPT-4(2023년 1분기) 출시 시점에 발생함
          + 해커뉴스 이용자 다수가 개발자이므로, 개발 도구로서의 GPT-4 공개가 더 큰 영향을 미침

AI 관련 감정 변화 및 주요 사건

     * 감정 변화에서 두드러진 시점은 2021년 3분기임
     * 해당 기간 Apple의 NeuralHash(온디바이스 CSAM 스캐닝) 발표로 인해 프라이버시 논란이 대두되면서 부정적 감정이 급증함
          + NeuralHash 모델의 충돌 및 개인정보 문제 등이 부각됨
     * 같은 분기 초에는 GitHub Copilot 연구 프리뷰가 공개되어, 저작권 코드 자동 생성 이슈로 또 다른 논란이 있었음

전체 통계 및 최신 경향

     * 총 2,816개의 AI 언급 포스트 중
          + 52.13%가 긍정적 감정
          + 31.46%가 부정적 감정
          + 16.41%가 중립적 감정으로 분류됨
     * 2025년 3분기와 그 이전 분기는 약간 더 부정적인 경향이 나타났으나, 명확한 장기적 변화는 아직 감지되지 않음
     * 요약: 해커뉴스가 AI를 본격적으로 받아들인 계기는 소비자용 ChatGPT가 아니라, GPT-4가 개발자 도구로써 공개된 시점임
     * 2021년 NeuralHash 사건 이후 전체적인 AI 감정은 큰 변화 없이 대체로 안정적으로 유지되었음

        Hacker News 의견

     * 내가 이번 글에서 인상 깊었던 점은 인용된 다른 글을 프레이밍하는 방식이었음

     ""지난달 Hacker News에서 이슈가 됐던 다소 부정적인 글이 이런 질문들을 촉발했고, 그래서 AI를 이용해 답을 찾아봤음""<br>
     인용된 다소 부정적인 글은 https://tomrenner.com/posts/llm-inevitabilism/ 이고, 나는 직접 읽어봤을 때 꽤 균형 잡힌 글이라고 느꼈음
     AI에 대해 직접적으로 강하게 부정하는 발언이 있진 않았고, 저자가 걱정하는 부분이 있긴 하지만 요지는 AI에 대한 현재의 담론을 그대로 받아들이지 말고, 우리가 진짜 원하는 미래가 무엇인지 먼저 질문해보라는 것임
     만약 확신이 없다면 충분히 할 수 있는 질문이라고 생각함
     그런데 이 글이 ""매우 부정적인 글""로 규정되어 있는 것이 신경 쓰였고, 이 때문에 글쓴이의 나머지 기사도 다르게 읽히게 됨
          + Hacker News에서는 ""부정적""이란 게 뭔지 신기함
            뭔가를 공손히 의심만 해도 부정적이라고 하고, 비판하면 부정적, 누군가 오해할 만한 방식으로 묘사해도 부정적이라고 여겨짐
            무조건 열광적으로 칭찬하지 않으면 전부 구박받는 분위기임
            점점 ""긍정적인 말만 허용""되는 곳이 되어가는 느낌임
          + 나도 똑같이 느꼈고, 인용된 글도 ""매우 부정적인 글""로 볼 수는 없다고 생각함
          + 이 다소 부정적인 글에 대해 여기서도 논의됐었음:
            https://news.ycombinator.com/item?id=44567857
          + ""원하는 미래가 진짜 그게 맞나 의문을 먼저 던져야 한다""
            tom(저자)은 당신을 속인 것임
            그의 글은 자극적 click bait 성향임
            AI는 우리가 쓰고 논의하는 도구일 뿐, 그저 ""떠밀려오는 미래""가 아님
            그 글은 AI에 대해 실제로 아무 말도 하지 않고, 막연한 의심만 던지며 사람들을 불필요하게 대립하게 만듦
            AI 논의를 망치는 거대한 장애물임
     * 기사 자체보다 오히려 명확히 AI 기반으로 추정되는 댓글들이 더 거슬림
       기사야 무시하면 되는데, 댓글들은 훨씬 피하기 어려움
       그래서 HN에 차단 기능이 있었으면 좋겠다는 생각을 하게 됐음
       커뮤니티가 이제는 충분히 커졌다고 보고, 이런 기능이 생기면 내 경험이 훨씬 나아질 거라 생각함
          + 약간 덜 관련된 얘기지만 HN에서 내가 가장 바라는 기능은 내가 좋아요/업보트한 글과 댓글을 검색할 수 있는 기능임
            수백, 수천 개의 글/댓글에 좋아요를 눌렀는데, 그 모든 콘텐츠 내에서만 검색할 수 있다면 웹상의 보석을 훨씬 쉽게 찾을 수 있을 것임
          + 나는 Hacker News 익스텐션에 유저 음소거 및 주석 기능을 추가함
            https://soitis.dev/comments-owl-for-hacker-news
          + 그래서 나는 사람들이 API로 만든 HN 리더 앱이 세상에서 제일 쓸모없다고 생각함
            항상 스스로 ""디자인 예쁘고 군더더기 없음""이라고 홍보하는데, 정작 유용한 기능은 하나도 없음
            만약 특정 키워드 기반으로 포스팅/스레드를 필터링하고 차단할 수 있는 기능이 있다면 유료로라도 쓸 수 있음
            하지만 내 입장에서는 기본 HN 사이트가 이미 충분히 좋아서 직접 만들 생각도 없음
     * HN 프론트페이지에서 인기 끌다가 금방 사라진 주제들 — 예를 들어 암호화폐, NFT, Web3, 자율주행차 등 — 에 대해서도 비슷한 데이터 분석을 해보면 재밌을 것 같음
       근데 실제로 보면 자율주행차나 암호화폐는 실세계에서는 계속 크게 진전되고 있는데도, 프론트페이지에서는 더는 거의 이야기 안 됨
       AI가 그만큼 다른 모든 주제를 압도하고 있다는 뜻이고, HN 유행이 얼마나 변덕스러운지 보여주는 증거 같음
          + 암호화폐가 정말 그렇게 드라마틱하게 발전하고 있는지 의문임
            이 현상의 예시일 수 있겠지만, 줄곧 큰 변화에 대한 뉴스도 못 봤음
            그냥 ""선그리프 올라가는"" 현상 정도임
          + 사실 그게 자연스러움
            기술은 흥미로울 때만 이슈가 되기 때문임
            암호화폐에는 이제 의미 있는 진보가 아니고, 대부분 사기와 폰지구조 얘기만 남아서 뻔하고 지루해졌으니 HN에서도 관심이 식었음
            자율주행차도 수년간 점진적으로 느리게 발전한 주제라 '곧 세상이 바뀐다' 이런 흥분이 사라진 다음엔 별 얘깃거리가 없음
            그에 비해 AI는 지금 ""2년 안에 신(God)을 만들 것"", ""전 지구적 실업 발생"", ""영구적 하위계층 탄생"", ""AI 연구자 연봉이 1억~3억 달러""라며, 극단적이고 흥미로운 주장에 양 극단의 의견이 붙는 주제임
            만약 이 분야가 점점 식고 뻔해진다면, 코인처럼 댓글 수도 줄어들 거라 봄
          + 최근 구직할 때, 정규직/원격/AI/비AI 직무를 정규표현식으로 분류하는 크롤러를 만들어 봤음
            나는 새롭게 뜨는 스타트업보다 ""지루한"" 직장이 더 필요했는데, 워낙 번쩍이는 트렌디한 일자리 공고로 도배되어 있어서 체감상 애로사항이 있었음
            참고로 결과물을 공유함:<br>
               o 그래프: https://home.davidgoffredo.com/hn-whos-hiring-stats.html<br>
               o 필터링된 리스트: https://home.davidgoffredo.com/hn-whos-hiring.html<br>
               o 코드: https://github.com/dgoffredo/hn-whos-hiring
          + 요즘 암호화폐 기술과 생태계 현황이 궁금함
            옛날엔 이 분야에서 잠깐 일해봤지만, 툴이 너무 형편없었고 금융 이외의 응용은 전부 장난감 수준 같아서 떠났었음
            그래도 탈중앙 소프트웨어에는 계속 긍정적 전망을 갖고 있음
          + 다음 기회엔 내가 한번 시도해봐야겠음
     * 이 데이터는 멋지지만, 이번 AI 붐과 2015~2018년 즈음 빅데이터/AI 붐이 어땠는지 비교해보고 싶음
       그때도 이유 없이 앞다퉈 자신들을 AI라 부르는 곳이 많았고, 데이터 과학자 아니면 직장을 못 구할 거란 불안감이 있었음
       그 붐이 지금과 얼마나 다르고 컸는지 비교하기 어렵지만, 지금은 자본 규모가 훨씬 커서 전체 규모는 오히려 덜할 수도 있을 것 같음
       데이터셋을 더 넓혀서 댓글 파도 효과가 있는지 보는 것도 흥미로울 듯함
          + 내가 그 당시 제일 재밌었던 사례는 ""The Grid""라는 웹사이트 빌더였음
            엄청난 홍보를 했지만 대중에게는 실제 제품이 없었고, 비공개 베타 사용자들이 ""제품이 있긴 있지만 별로임""이라고 평가했음
            사이트 만드는 데 한참 걸리고, 결과물도 다들 비슷하고, 코드 품질도 안 좋았음
            10년이 지나도 그때 지적된 문제들이 아직도 이어지는 느낌임
     * 며칠 전 한 시점엔 프론트페이지 상위 10개 기사 모두가 AI나 LLM 관련이었음
       물론 자주 있는 일은 아니지만, 이 열풍은 멈추기가 힘듦
          + 난 이걸 습관적으로 세는 편인데, 보통 상위 10개 중 4~6개가 AI 관련임(지금은 5개)
            그 날은 9개였고, 한 주제에서 이렇게 많은 비중이 고정적으로 유지되는 것 자체가 너무 신기함
          + 이 사이트는 개발자 타겟임
            지금 AI/LLM 열기는 그저 ‘하이프’라기보다는 개발자들(SWE) 입장에서는 ‘공포의 싸이클’에 더 가까움
            사람들의 손실회피 경향 때문에 공포 싸이클이 하이프보다 훨씬 더 오래 가고 몰입도를 높임
            여기 있는 많은 이들이 솔직하게 말한다면, AI가 내 커리어나 생계, 앞으로 내 미래에 어떤 의미일지 고민 중임
            특히 아직 경제적으로 안정되지 않은 분들은 ‘기술자 수요가 진짜 줄 수도 있다’는 두려움이 높아짐
            창업자/VC/사업가/자본 소유자에게는 오히려 하이프임
            장기적으로 봤을 때 LLM이 암호화폐, NFT, 기타 유행보다도 소프트웨어 수요가 늘어나도 기술자 수요는 줄어드는 첫 기술이 될 수도 있음
            AI 랩들이 '코딩 자동화'를 킬러 앱으로 보는 것도 영향이 큼
            원래 기술의 하이프 싸이클은 종종 있었지만, 이렇게 ‘공포 싸이클’이 오는 경우는 진짜 드묾
            마치 헤드라이트 앞으로 달려드는 사슴처럼, 다들 위협과 관련된 모든 정보를 찾아 헤매고, 다른 주제에 관심을 둘 겨를이 없어짐
            요약하면 지금의 불안/기대, 그리고 변화의 속도가 유지되는 한 열풍은 사라지지 않음
          + 나도 똑같이 느꼈고 솔직히 짜증나는 쪽임
            그런데 사실상, 지금까지 인류가 이렇게까지 돈/노력/관심을 한 주제에 쏟아부은 적이 없는 것 같음
            사실상 AI 열풍은 고대 검투 경기장 가서 전쟁 포로들 싸움을 구경하는 것만큼 짜릿한데, 차이점은 검투사들이 언제든 경기장 밖으로 나와 관객을 찌를 듯한 스릴이 있다는 점임
            뒤에서는 누군가 ""저 근육 멋지다, 언젠가 저 근육이 도로 건설에 쓰일 거다""라는 소리를 하기도 함
            이런 열광을 지나칠 수가 없음
     * 조금은 개인적인 경험이지만, 기사에서 ChatGPT로 감성 분석을 했다는 점이 있음
       내가 보기엔 ChatGPT는 미묘한 뉘앙스에서는 실제로 사람이 “부정적”으로 느낄 부분도 “긍정”으로 잘못 판단(환각)하는 경향이 있는 것 같음
       다만 더 노골적인 표현을 넣었을 때의 편향은 안 실험해봄
     * 요즘 HN이 AI 주제로 넘쳐나고 있는 게 궁금했음
       나는 이미 지겹고, 페이지 볼 때마다 거의 모든 AI 글은 그냥 “숨기기” 버튼을 누르고 있음
          + 심지어 AI 관련 글이 아니라도, 댓글란에서는 어떻게든 AI 화제로 얘기를 돌리는 경향이 있음
            피곤함
          + 만약 AI가 내 과거 선택에 기반하여 자동으로 관련 기사들을 숨겨준다면 진짜 좋겠음
     * 모든 YC 스타트업이 AI로 피벗하고, 신규 선발된 거의 모든 기업이 다 AI임
     * 나는 이번 분석이 명백히 AI로 생성된 기사들에 대한 분석일 줄 알았음
       최근에는 상위 포스트에서 AI 생성된 글의 비율이 점점 늘어나는 느낌임
       대부분 즉시 스킵함
       실질적으로 진짜 그런 비율인지 데이터로 직접 확인해보고 싶음
"
"https://news.hada.io/topic?id=22489","Ask HN: AI에 대한 열풍 속에서 소프트웨어 엔지니어들은 어떻게 생각하고 있나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Ask HN: AI에 대한 열풍 속에서 소프트웨어 엔지니어들은 어떻게 생각하고 있나요?

   AI가 업무의 30~50%를 담당하고 있는데, 회사 분위기는 어떤지 궁금합니다.
   소프트웨어 엔지니어 채용을 늘리고 있나요, 아니면 중단했나요?
   경영진이 더 많은 업무를 처리하기 위해 압력을 가하고 있나요?

주요 답변들 정리

    1. AI 활용도와 실제 생산성

     * 많은 개발자들이 AI가 30~50%의 업무를 대체한다는 주장은 과장이라고 보고, 실제 효과는 1~10% 수준이라는 의견이 다수
     * AI는 보일러플레이트 코드 작성, 간단한 스크립트, 문서 요약·변환, 검색 대체 등 반복 작업에 유용하지만, 복잡한 코드 작성이나 유지보수에는 한계가 큼
     * 일부 초급·중급 개발자는 문법·구조 제안 덕분에 생산성 향상을 체감하지만, 경험 많은 개발자는 오히려 19% 생산성 하락(연구 결과)
     * AI 코드 품질 문제로 검증·수정 과정에 더 많은 시간이 소요되어 순이익이 줄어드는 경우가 많음

    2. AI가 미치는 조직·채용 변화

     * 채용 규모에 큰 변화 없음. 다만 일부 회사는 채용을 줄이거나 오프쇼어링 증가(특히 AI를 활용한 저비용 인력 활용 기대)
     * AI를 내부 업무 효율화보다 제품 기능에 통합하는 방향으로 관심 이동
     * 관리층이 AI를 과신해 작업 난이도를 과소평가하고, 비현실적인 마감 기한을 설정하는 경우가 있어 개발자 사기 저하

    3. AI 활용 성공·실패 사례

     * 성공 사례:
          + 초기 PoC 제작, 신규 프로젝트 부트스트랩, 테스트 코드·단순 UI 작성
          + 방대한 로그·문서 탐색, API 문서에서 필요한 정보 포인터 제공
          + 레거시 코드 리팩터링 후보 탐색, GDB 출력 분석 등 특정 니치 작업
     * 실패 사례:
          + 복잡한 기존 코드베이스 통합, 버전·도메인 특화 언어(예: ABAP) 지원
          + 문서·티켓이 오래되거나 모순된 환경에서의 검색/요약
          + 높은 품질 기준의 OSS 기여(PR) 작업

    4. 개발자 심리와 사기

     * 일부는 AI 도입으로 반복 업무가 줄어들어 설계·아키텍처에 집중할 수 있어 만족도 상승
     * 반면,
          + ""왜 내가 공부·기여해야 하나"" → 장기적으로 AI에 의해 대체될 것이라는 회의감
          + AI가 만든 잘못된 회의 요약·액션 아이템으로 인한 업무 혼란
          + AI 도입을 명분으로 한 비용 절감·인력 감축 우려
     * 독립 웹·콘텐츠 제작자는 트래픽·수익 감소로 인해 부정적 영향 체감

    5. 전반적 결론

     * AI는 현재 '보조 도구'로서 가치는 있지만, 주요 업무 대체에는 미치지 못함
     * 생산성 향상은 도메인, 코드베이스 특성, 개발자 숙련도에 크게 의존
     * 장기적으로는 코드 작성보다는 아키텍처 설계·품질 관리 역량이 더 중요해질 가능성
     * 과도한 기대와 과소평가가 공존하며, ""유용하지만 만능은 아니다"" 가 다수 의견

        Hacker News 의견

     * AI가 내 업무에서 차지하는 비중은 0% 임
          + 복잡한 소프트웨어 개발은 도메인 지식, 리소스 조율, 위험 관리, 팀 협업, 고객 피드백 분석 등 사람이 해야 할 일이 많음
          + AI가 생산성을 높일 때도 있지만 예측 불가능하고, 결과에 대한 신뢰 신호를 주지 못함
          + 현대 소프트웨어는 유기적으로 진화하는 제품이라 AI가 팀을 대체할 수 없음
          + 성숙한 오픈소스 프로젝트(Node.js, React, Kubernetes 등)는 기여 기준이 높아 AI가 쉽게 PR을 올리기 어려움
          + AI를 전혀 안 쓴다고? 문서 작성, 보일러플레이트 코드, 회의록 작성, 검색, 프레젠테이션, 브레인스토밍도 업무임
            전혀 안 쓴다면 천재이거나 뒤처졌거나 솔직하지 않은 것일 수 있음
     * 우리 회사는 여전히 엔지니어를 채용 중이며, 전원 Cursor 유료 구독과 일부 Claude Code 사용 중임
          + Claude가 GitHub에서 자동 PR도 올림
          + Java+Spring 기반이라 LLM 활용 효과가 크지만, 복잡한 구조 때문에 사람을 대체하진 못함
     * AI는 React가 처음 나왔을 때처럼 생산성과 역량을 높이는 도구임
          + 티켓을 자동으로 처리해 PR까지 올리는 건 5~10% 정도 가능
          + Stack Overflow는 사실상 쓸 이유가 없어짐
          + 새로운 레포 탐색·요약에는 좋지만, 1년 이상 유지 가능한 코드를 쓰는 경우는 드묾
          + 지시사항을 제대로 따르지 않는 문제가 심각함
          + Stack Overflow에서 프레임워크 제작자나 핵심 기여자에게 직접 답변을 받던 경험이 사라질 수 있음
          + AI는 토론과 다양한 접근 방식을 제공하지 못함
     * 예전 CIO는 AI가 모든 걸 바꿀 거라며 강하게 밀었지만, 정작 사용은 금지했던 시절이 있었음
          + 지금은 Copilot을 쓸 수 있지만 팀 내 평가는 좋지 않음
          + AI가 도와주는 건 복잡한 JSON 쿼리 작성 정도로, 절감 효과는 1~2% 수준
          + 문제는 코드 작성이 아니라 의사결정과 관료주의임
          + 경영진은 AI 전부터 인력 충원 없이 더 많은 성과를 요구해왔음
          + 시니어 개발자의 실제 코딩 비중은 25% 이하이고, 나머지는 문서, 승인 절차, 리뷰, 회의 등임
            AI가 코딩 속도를 50% 높여도 전체 업무 절감은 10~15%에 불과함
     * 우리 코드베이스는 특수하고 복잡해 AI가 사람의 판단을 대체하긴 어려움
          + 생산성 향상 폭은 아직 불분명함
          + AI가 시니어 개발자 수준이 되기 전까지는 소프트웨어 일자리가 줄지 않을 것이라 봄
          + 그 수준이 되면 AI 관리 업무로 전환될 수 있음
     * 나는 현재 구직을 미루고 AI 열풍이 가라앉길 기다리는 중임
          + 최근 두 번의 회사에서 경영진이 AI에 올인했다가 제품 방향을 망치고 전원 해고됨
          + AI를 여러 도구 중 하나로, 적재적소에만 쓰는 리더십을 찾고 있음
          + 지금은 사기가 바닥 상태임
     * 최근 Claude로 수학이 많은 논문을 이해하는 데 도움을 받음
          + 알고리즘 구조와 직관적 이해에는 좋았지만, 코드 구현은 형편없고 수학적 세부사항은 자주 틀림
          + 적절히 쓰면 학습 속도를 높일 수 있지만, 내 일자리를 위협하진 않음
          + 나도 새로운 도구나 라이브러리를 탐색할 때 API 문서 위치를 알려주는 용도로 씀
            코딩 시간보다 검색·보일러플레이트 작성 시간을 줄여줌
            익숙한 도구에는 거의 쓰지 않음
          + Reddit에서 어떤 학생이 AI로 졸업 논문을 40~60% 완성했지만 끝맺진 못했다는 사례를 봄
            아직은 완전한 대체가 어려움
          + AI가 논문을 요약하고 사람이 검증하는 건 좋은 학습 방법일 수 있음
     * 20년 경력인데, 2~3년 전 지루해서 그만둘 뻔하다가 AI 덕분에 다시 즐기고 있음
          + AI가 내 코드의 95%, 의사결정의 75%를 담당함
          + 혼자서 여러 레이어의 결정을 맡으며 더 짧은 주기로 기능을 출시함
          + 아직 AI가 만든 코드로 대형 장애가 난 적은 없음
          + 오히려 예전보다 적게 일하고 조금 더 벌고 있음
          + 나도 비슷하게 여러 맥락을 잘 다루고 아키텍처 설계에 강점이 있어 AI 활용에 자신 있음
            현재 일자리를 어떻게 구했는지 궁금함
          + 어떤 LLM, IDE, 베스트 프랙티스를 쓰는지 궁금함
            Continue.dev에서 큰 가치를 못 느끼고 ChatGPT 웹을 주로 씀
     * 실질적으로 업무 변화는 거의 없고 채용도 예전과 비슷함
          + 하지만 심리적으로는 의욕이 크게 떨어짐
          + ""곧 AI가 더 나은 UI를 만들 텐데 왜 모바일 앱을 배워야 하지?"" 같은 생각이 동기부여를 갉아먹음
          + 최근엔 비기술 취미를 하거나 커리어 전환을 고민 중임
     * 다음 세대가 정상적으로 배우지 못해 엔지니어링 역량이 떨어질까 걱정됨
          + 리더십이 AI로 생산성이 오를 거라 믿는 게 지침
          + 회의록·액션 아이템을 AI 요약으로 대체하는 것도 피곤함
          + AI 회의 요약은 부정확해 내가 하지 않은 일로 할당되거나 결론이 왜곡됨
            사람이 썼다면 해고될 수준이라 이런 건 쓰지 말았으면 함

   깊이있는 이해와 통찰을 가진 조직 리더라면 ok, but, 비용적인 부분으로 숫자놀이하는 부분에 있어 ai만능 주의에 빠진 리더??? 사람 갈리는 소리가 들립니다 ㅠ

   Ai 도입하면 생산성 두배된다고 업무도 두배로주더구만요.. 월급은 그대로 심지어 ai 비용도 지원 안해주면서..

   아앗..
"
"https://news.hada.io/topic?id=22590","ScrollGuard - Reels와 Shorts 차단 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ScrollGuard - Reels와 Shorts 차단 앱

     * ScrollGuard는 인스타그램, 페이스북, Reddit, YouTube 등에서 Reels와 Shorts를 차단하는 기능을 제공함
     * 사용자가 원할 경우, antiscroll 모드를 통해 어떤 앱이든 스크롤할 수 있는 양에 제한을 둘 수 있음
     * 광고 및 방해되는 콘텐츠 없이 작업에 집중할 수 있는 환경을 제공
     * Android 환경에서는 Reels와 Shorts 차단이 기술적으로 가능
     * iOS는 시스템 구조상 동일한 차단 방식이 적용되지 않음에 따라, 다른 방식으로 스크롤 중독 줄이기에 도움을 주는 앱을 개발하고 있음
     * iOS 버전 출시 알림 이메일 웨이팅리스트 등록 가능

        Hacker News 의견

     * 완벽한 자기 통제가 있다면 이런 보호 장치가 필요 없을 텐데, 현실에서는 앱들이 그런 통제를 무력화하도록 설계됨을 느낌. 단순한 스크롤에 가드레일이 필요한 게 우스워 보이기도 함. 관련해서 개인 블로그 글도 썼음
          + “자기 통제만 있으면 필요 없는 것”이라는 점에서, 사탕을 아예 사지 않는 게 집에 사탕이 있을 때 참는 것보다 쉽다는 비유가 생각남. 인스타그램을 삭제한 이후엔 릴스 영상을 굳이 볼 필요가 전혀 없음. 그 전에는 조금씩 스크롤하다가 한 주가 끝날 때 후회하는 시간 낭비가 있었음
          + 이런 디자인은 결코 “실수”가 아니고, 사이트들이 의도적으로 ‘한 번 더!’ 행동을 유도함. 예전에 제안을 영상 추천과 자동재생을 제거한 미니멀 유튜브 플레이어를 개발했는데, 광고는 그대로 두었지만 구글에 의해 차단되었음. 유튜브 대안 사이트는 허용 안 하고 임베드만 허용하는 정책 때문임. 지금도 구글 API 전체에서 차단된 상태임
          + 앱들이 사람을 중독시키려 하지 않고 사용자를 존중한다면 이런 도구 자체가 불필요했을 것임
          + 기업들이 사용자 앱 사용을 늘리려고 심리학을 연구하는 전문팀을 두고, 수억 명의 행동 데이터를 바탕으로 맞춤형 알고리즘을 적용함을 모두가 더 많이 자각해야 함. 이 자원 불균형은 일반적으로 상상하기 어려운 수준임. 마치 수백만 명을 소매치기한 고수에게서 소매치기를 피하는 것과 같음. 그 소매치기는 도시 전체의 구조까지 자신에게 유리하게 설계해놓은 셈임
          + 아주 효과적인 부분적 해결책은, 메타 앱들을 휴대폰과 태블릿에서 아예 제거하는 것임. 노트북/데스크톱에서만 쓰면 즉각적인 중독성이 많이 줄어듦. 틱톡 등 기타 중독성 강한 앱들도 마찬가지임. 오래전에 페이스북 앱을 지운 이후로는 배터리 소모 문제와 각종 고질적 버그에서 해방되었음. 페이스북은 메신저조차 필요 없고, 중요한 연락처는 다른 앱으로 옮길 수 있음. 예외는 WhatsApp인데, 유럽과 세계 대부분 지역에서 지나치게 자주 쓰이지만, 이건 태생부터 훨씬 잘 설계된 서비스임
     * 인스타그램 팁 하나: 모바일 앱 상단의 “Instagram” 로고 글자를 클릭하면 “팔로잉”을 선택할 수 있고, 그럼 팔로우한 계정의 게시물만 제안이나 릴스 없이 받을 수 있음. 이 피드는 몇 분 만에 다 볼 수 있고 끝없는 스크롤에서 벗어날 수 있음
          + 모바일 웹페이지에서도 이 팁이 적용됨. 데스크톱이나 모바일에서 uBlock Origin을 써서 특정 유형의 게시물을 차단할 수도 있음:
www.instagram.com##article:has-text(Suggested for you):style(visibility: hidden !important; height: 300px !important; overflow: hidden !important)
www.instagram.com##article:has-text(Because you liked a post):style(visibility: hidden !important; height: 300px !important; overflow: hidden !important)

          + (질문) 이 설정을 기본값으로 둘 수 있는지 궁금함
     * 오픈소스가 아니면 앱이 내 폰의 모든 권한을 갖게 하는 걸 허락할 수 없겠음. 내 데이터를 팔지 않는다는 어떤 보장도 받을 수 없기 때문임
          + DigiPaws라는 앱은 오픈 소스로, 여기에 소개된 앱의 핵심 기능을 제공함. 깃허브 링크
          + 이 점 충분히 공감함. 단기적으로는 결국 신뢰의 문제임을 모두 알고 있음. 그러나 실제로 신뢰를 저버릴 일이 드물다는 점을 말하고 싶음. 접근성 서비스는 “전체 제어”와 거리가 멀고, 화면 변화나 UI 정보를 감지해 릴스 등 콘텐츠 종류만 추측함. 접근성 이벤트는 실제로 유저 데이터 전체를 다루는 방식이 전혀 아님. 구글은 권한 사용에 매우 엄격하고, 오남용시 앱이 바로 내려감. 평판이 중요한 개발자라면 사용자 데이터를 조금 팔기 위해 이런 일 안 함. ScrollGuard는 서버 접속조차 안 하고, 모든 감지 기능이 디바이스 내에서 동작함. 추가로 안전을 위해 앱의 인터넷 권한을 차단해도 정상적으로 돌아감. 인터넷이 전혀 없어야 데이터 유출이 불가능함. 인스타그램 한정으로 원하면 직접 앱을 수정해서 더 많은 제어권을 가질 수도 있음. 관련
            방법을 이 기사에 설명함
          + (배경 설명 추가) 소셜 미디어 앱이 백그라운드에서 대량의 데이터를 수집해온 전례가 많음. (관련 기사: Meta & Flo Health 소비자 프라이버시 사건)
          + 오픈 소스 코드와 실제 배포 바이너리가 동일하다는 보장은 현실적으로 없다는 점을 환기함
     * 이런 앱이 작동하려면 권한 허용이 많이 필요해서 일종의 공포감을 줄 수도 있음. 유튜브, 인스타그램에서 끝없는 숏폼·알고리즘 콘텐츠를 끌 수 없게 만들어 놓은 건 정말 악의적임
          + 나는 아예 앱 자체를 삭제할 것을 추천함. 필요한 콘텐츠는 웹에서 접근하면 되고, 웹에선 무한 스크롤이 잘 동작하지 않아 스크롤 유혹이 크게 줄어듦
          + 모든 테크 기업이 사용자가 이런 기능을 끌 권리를 주지 않기로 합의한 것 같아서 정말 화남. “이 유형의 게시물 줄이기” 옵션도 실제로는 아무 쓸모가 없음
          + 유튜브 시청 기록을 끄면 Shorts가 망가지고, 검색 결과에서 동영상을 눌렀을 때 '뒤로 가기' 버튼 등 다른 UI까지 같이 고장남
     * 자기 절제 문제에 테크로 해결책을 찾는 건 근본적인 해법이 아니라고 봄
          + 하지만 지금은 이미 테크가 너무 강해져서, 오히려 그것을 막거나 통제하려면 더 강한 테크 툴이 필요함. (미디어, 영양 등에도 마찬가지 현상 발생함)
     * 웹앱을 버리고 네이티브 앱으로 가면 이런 통제력 자체를 상실하게 됨. 원래라면 단순한 브라우저 플러그인 정도면 될 일임. 그런데 앱에서는 주요 접근성 권한이 필요하고, 안드로이드만 해당 API 제공, iOS는 아예 이런 접근 방식을 지원하지 않음. 결국 이런 모바일 기능을 만들어낸 것 자체는 칭찬할 부분임. 비슷한 Show HN 도구들은 대부분 데스크톱 한정이라 모바일에선 쓸모없음
          + 실제로 uBlock Origin으로 차단 규칙을 추가하려 해도, 유튜브 등 사이트는 이제 “컴포넌트 난독화”를 많이 씀. 고유 ID가 없고, 제목과 내용이 서로 다른 컴포넌트에 숨겨져 있음. 차단하려면 이제 CSS 선택, 텍스트 식별, 목표-행동 컴포넌트의 논리적 조합이 필수임
     * 이 앱 정말 써 보고 싶음. 나는 현재 DFInstagram을 사용 중인데, 홈 피드를 제거해줘서 좋음. 단점은 인스타그램 스토리까지 같이 사라지지만 PC에서 확인하면 됨. 유튜브에선 99%의 방해 요소를 비공개 설정과 홈 추천 삭제로 차단할 수 있지만, reddit·Twitter·Facebook 같은 서비스도 이런 도구가 꼭 필요함. 내가 원하는 건 “구시대 모드”로, 오직 내가 명시적으로 팔로우한 사람의 게시물만 보일 수 있었으면 좋겠음. 뉴스피드가 광고, 조작, 분노 유발 콘텐츠로 뒤덮이기 시작한 뒤엔 전부 망가졌음. DistractionFreeApps 참고
          + Facebook에는 F.B. Purity가 정말 잘 작동함. 광고, 추천, reels 등을 선택적으로 제거할 수 있음. FB Purity
     * 더 나은 제안: 이런 사이트들은 아예 차단하는 걸 추천함. Reddit과 YouTube에 단순히 ‘들어가보기’만 해도 시간낭비임. YouTube-DL로 특정 크리에이터의 영상만 다운받아 따로 보면 됨. Reddit에서 실질적으로 유용한 서브레딧만 필터링해서 볼 방법은 아직 못 찾음. 피드 알고리즘은 인터넷 역사상 최악의 발명품 중 하나라고 생각함. 이 미친 도파민 루프에 수많은 똑똑한 사람들이 빠져들면서 사회 전체가 큰 손해를 보고 있음
          + 인스타그램은 해외 친구들과 연락 때문에 유지함. 페이스북은 특정 커뮤니티나 이벤트가 그곳에서만 이뤄져서 남겨둠. 사람에 따라선 숏폼 영상만 차단하는 게 훨씬 나은 선택임
          + Reddit과 YouTube가 단순 시간낭비라는 의견엔 동의하지 않음. 유튜브에도 재미있고 창의적인 콘텐츠가 많고, 알고리즘의 쓰레기를 견딜 의지만 있다면 충분히 가치 있음. Reddit은 커뮤니티 구독으로 쓸만하게 필터링할 수 있으니 /r/popular 같은 건 안 보면 됨
     * iOS에서 이게 어떻게 가능한지 궁금함. 기술적인 세부사항이나 구현 방법을 공유해줄 분 있는지 알고 싶음. 애플 정책상 사용자의 프라이버시와 화면 읽기 권한이 반드시 검증되어야만 가능할 듯함
          + iOS에서는 Accessibility 서비스와 같은 앱 간 제어 API가 없어 이런 기능이 불가능함. OP가 iOS 대기명단을 두는 건, 아마 Screen time, Focus 모드, Safari 컨텐츠 차단기의 조합일 것이라 추정함
          + Android에서는 Accessibility Service API를 써서 구현했으나, iOS는 비슷한 API가 제공되지 않고 플랫폼 자체가 훨씬 더 제한적임. 그래서 기술적으로 불가능하다고 생각함
          + 현재 이 기능은 Android만 지원중이고, iOS 버전은 웹사이트에서 대기 신청을 받고 있음
          + iOS에서 적용하려면 탈옥이나 수정된 ipa 설치 등 우회 방법밖에 없음
     * iOS에서는 이 방식이 불가함. 대신 Safari 확장으로 숏폼 영상을 피드에서 차단하는 Shorts Stopper 앱을 만듦
          + 이런 기능은 Tampermonkey에 한 줄 규칙만 추가해도 되는 걸 알기 때문에, HN 유저들에겐 확장 프로그램 판매가 쉽지 않음
"
"https://news.hada.io/topic?id=22541","EmbedPDF - 오픈소스 JavaScript PDF 뷰어 (Adobe Acrobat PDF 뷰어의 무료 대체제)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    EmbedPDF - 오픈소스 JavaScript PDF 뷰어 (Adobe Acrobat PDF 뷰어의 무료 대체제)

     * EmbedPDF는 JavaScript 프로젝트 어디서나 쉽게 연동할 수 있는 오픈소스 PDF 뷰어
     * React, Vue, Svelte, Preact, Vanilla JS 등 다양한 프론트엔드 프레임워크와의 호환성을 가짐
     * 주석, 하이라이트, 실제 텍스트 삭제(레닥션), 검색, 확대/축소, 회전 등 풍부한 기능 포함
     * 가상 스크롤 및 플러그인 구조로 성능 향상과 확장성 모두 지원
     * MIT 라이센스로 누구나 자유롭게 사용 및 기여 가능


EmbedPDF 오픈소스 PDF 뷰어 프로젝트 개요

     * EmbedPDF는 JavaScript 프로젝트 어디든 손쉽게 삽입할 수 있는, 프레임워크 독립적인 오픈소스 PDF 뷰어
     * MIT 라이센스를 적용하며, React, Vue, Svelte, Preact, Vanilla JS 등 다양한 현대적 프론트엔드 프레임워크와의 호환성 강점 보유
     * 모던한 읽기 환경과 개발자 친화적 API를 제공함

주요 기능

     * 주석 지원: 하이라이트, 스티키 노트, 자유 텍스트, 잉크 등 다양한 주석 기능 제공
     * 진짜 Redaction: 레닥션 기능 사용 시 문서 내 실제 콘텐츠가 완전하게 제거되는 보안 기능 지원
     * 검색, 텍스트 선택, 확대/축소, 회전 등의 핵심 PDF 조작 기능 포함
     * 부드럽고 가상화된 스크롤링으로 대용량 문서도 성능 저하 없이 열람 가능
     * 플러그인 기반 아키텍처와 트리 세이커블 플러그인을 통해 불필요한 코드 제외 및 확장 용이성 보장

문서 및 데모

     * 공식 문서, 설치 가이드, API 레퍼런스, 예시는 https://www.embedpdf.com 에서 확인 가능
     * 라이브 데모에서 직접 PDF 파일을 업로드하거나 샘플 문서로 기능 체험 가능함

오픈소스 및 라이센스

     * MIT 라이센스로 소스코드 자유 사용 및 기여 가능
     * PDFium을 포함하고 있으며, 이 부분은 Apache License 2.0에 따름

커뮤니티 및 기여

     * 오픈소스 커뮤니티 참여 및 다양한 기여를 환영함
     * Contributing 가이드 및 Github Discussions에서 개발자 커뮤니케이션 가능

프로젝트의 중요성 및 차별점

     * 기존 상용 PDF 뷰어 대안으로, 누구나 자유롭게 사내 혹은 SaaS에 PDF 뷰어 기능 손쉽게 도입 가능함
     * 다양한 프레임워크와의 높은 호환성 및 현대적, 모듈형 구조가 차별점임
     * 레닥션 등 고급 PDF 처리 기능을 오픈소스에서 제공하는 드문 예시임

        Hacker News 의견

     * 실제로 중요한 작업은 PDFium에서 이루어지고 있음, PDFium은 Google이 Foxit에서 인수 후 직접 개발을 계속해온 프로젝트이며 현재 Chrome에 적용 중임을 안내함 (나는 한창 논의되고 있는 작업을 폄하하는 게 아니고, 단지 완전히 새로 작성된 PDF 파서가 아니라는 점을 언급함)
          + 많은 PDF 뷰어(상업용 제품 포함)가 PDFium을 기반으로 만들어지고 있다고 생각함
     * Mozilla PDF.js가 존재하는데도 이 프로젝트를 개발한 이유가 궁금함 https://github.com/mozilla/pdf.js (비판이 아니라, 이미 있는 것을 다시 만드는 데엔 수많은 이유가 있기 때문에 단순한 궁금증임)
          + 주요 목표는 개발자가 웹사이트에 손쉽게 통합할 수 있는 PDF 뷰어를 만드는 것이었음, PDF.js는 일부 활용 사례에선 커스터마이징과 확장이 어렵거나 복잡함
          + PDF 마크업(주석, 도형, 코멘트)이 필요한 경우, 직접 구축하거나 상당히 비싼 구독형 PDF 에디터만이 선택지로 떠오르는데, 실제로 Apryse를 연동한 팀들은 단순 PDF 편집 지원 비용만으로도 부담이 매우 크다고 들음
          + 얼핏 보기만 해도 주석 코멘트 등 기존 제품들과는 다른 기능이 있음을 알 수 있음
          + iPad나 iPhone에서 데모 문서를 열어 보면, Print Preview 기능이 데스크탑 장치에서만 작동함을 알 수 있음
          + 402개의 오픈 이슈를 보고 PDF의 엄청난 복잡성과 그 모든 기능을 처리하는 데 드는 노고를 짐작할 수 있음
     * 예전에 PDF 뷰어를 내장한 사이드 프로젝트를 해본 적이 있음, 첫 버전은 pdf.js를 썼지만 빠르게 확대(zoom)할 땐 버벅이고 포커스 유지가 힘들었음, 그래서 C++ pdfium과 Metal 렌더링으로 직접 구현했음 데모 영상에서 확인 가능함, 타일링 방식을 적용해 메모리와 성능의 균형을 맞췄음, pdfium이 WebAssembly에서도 이 정도로 성능이 좋은 줄 몰랐으며, 사실 C++보다 웹에서 UI 개발하는 쪽이 더 편함
          + 솔직히 데모가 훨씬 더 빠르고 부드럽게 느껴짐, zoom 동작이 정말 매끄럽게 구현되어 있음, 이걸 보고 나도 다시 개발에 뛰어들어 성능을 개선해보고 싶다는 생각이 듦
     * pdf.js를 사용 중인데(17MB, 158페이지, 이미지 다수, Windows 환경) 테스트하면서 겪은 문제점을 공유함
          + 링크가 동작하지 않음
          + 북마크는 보이는데 작동하지 않음
          + 파이어폭스에선 텍스트 선택 불가
          + 크롬에서 미들 클릭(스크롤 용도)이 텍스트 선택으로 연결됨
          + pdf.js에서는 스크롤이 괜찮은데, 본 제품에서는 스크롤 시 수백~천 밀리 초 동안 화면이 흐릿하게 보이며 품질 저하가 심함, 엔드 키 등으로 여러 페이지를 점프하면 하얀 화면만 보임
          + FF에서는 위/아래, 페이지 업/다운, 홈/엔드가 동작하지 않음(좌우는 동작)
     * 간단하게 테스트해보았고, Firefox에서는 주석 기능이 아예 동작하지 않았으나 Chrome에서는 밑줄, 하이라이트 등 모든 주석 기능이 정상 임을 확인함
          + Firefox에서 주석 테스트를 아직 못 해봤으니 알려줘서 고맙다는 메시지, Chrome에서는 문제없이 동작해 다행임을 공유함, 곧 확인해볼 계획임
     * 임베디드 아웃라인(주석) 편집을 지원하는지 궁금함, PDF 뷰어/에디터에서 항상 가장 아쉬웠던 기능으로, 아웃라인 없는 PDF 받을 때마다 이 기능이 필요함을 느낌
     * 리눅스+Firefox 조합에서는 데모에서 주석/음영 처리(redaction) 도구가 전혀 동작하지 않음, 반면 Chromium에서는 동일 머신에서 잘 동작함
          + Firefox에서 발생한 문제를 방금 수정했으며, 이제 Linux + Firefox와 Chromium 양쪽 모두에서 주석 및 음영 처리 기능이 정상 동작함을 안내함
     * 문서화도 훌륭하며 headless React 라이브러리 컨셉이 특히 마음에 들었음, 커스텀 UI와 기능을 손쉽게 붙일 수 있음, 특정 용어를 자동 하이라이트/밑줄 처리 후 클릭 혹은 hover 시 커스텀 컴포넌트를 표시하는 건 얼마나 어려운지 질문함
          + 아주 간단하게 할 수 있음, 이미 그런 기능이 구현됨, AnnotationLayer에서 직접 selectionMenu와 커스텀 컴포넌트를 렌더링 가능함, 더 깊이 들어가고 싶다면 Discord 채널로 문의해달라고 안내함
     * 제품이 인상적으로 보임, 궁금한 점은 이렇게 기능이 풍부한 무료 PDF 뷰어 개발을 어떻게 지속할 계획인지임, 엔터프라이즈용 기능이나 PDF 호스팅 혹은 다른 수익화 모델을 계획 중인지 질문함
          + 질문에 대해 모두 '예스'라고 답변, 클라이언트 쪽 PDF 뷰어는 무료+MIT 라이선스 유지, 다만 PDF 호스팅과 엔터프라이즈용 분석/액세스 컨트롤 등 부가 기능은 유료 서비스로 제공할 계획임
     * 전체적으로 잘 작동하는데, 음영처리(redaction) 툴을 뷰 모드로 전환할 때(빨간 줄이 활성화된 상태) 여전히 redaction이 활성화돼 스크롤 불가 현상이 있었음, 새로고침으로 해결됨
          + 좋은 피드백이고 곧 수정할 예정임, 모바일에서는 정밀한 영역 선택의 편의성 때문에 redaction 모드에서는 스크롤이 비활성화되는 게 의도된 동작임, 하지만 뷰 탭으로 전환하면 무조건 redaction 모드를 종료해야 함, 발견해줘서 고맙다는 답변임
"
"https://news.hada.io/topic?id=22519","영국 경찰에서 얼굴 인식 밴 차량 전국적으로 도입 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     영국 경찰에서 얼굴 인식 밴 차량 전국적으로 도입 예정

     * 영국 내 7개 경찰서에서 10대의 실시간 얼굴 인식(LFR) 밴 차량을 도입하는 정책 발표
     * 이 기술은 중범죄자 및 성범죄자 식별을 목표로 하며, 전문 훈련을 받은 경찰이 운용 예정
     * 정부는 엄격한 가이드라인과 신규 법적 프레임워크 도입을 준비 중임
     * 인권 단체는 오인식 및 인종 차별 가능성을 우려하며 즉각적 중단 요구
     * 독립적 테스트 결과 정확도 및 편향 없음이 확인되었으나, 시민 의견과 입법적 보호가 필요함


정책 개요

     * 영국 정부는 얼굴 인식 기술(Live Facial Recognition, LFR) 을 활용한 범죄자 검거 확대 방안을 발표함
     * 7곳의 경찰 관할구역에 10대의 LFR 밴 차량이 배치되어, 주요 성범죄자와 중대 범죄자 식별을 지원하는 목적임
     * Home Secretary Yvette Cooper는 ""가장 심각한 범죄자를 대상으로 해당 기술이 활용될 것""이라고 언급함

도입 방식 및 안전장치

     * LFR 밴은 특정 첩보(특정 정보) 에 근거해 운용되며, 훈련받은 경찰관이 카메라로 포착된 매칭 결과를 모두 수작업으로 확인함
     * 각 밴 차량은 College of Policing의 지침 아래, 매번 용도별 맞춤 감시 명단을 활용해 운용됨
     * 해당 차량은 Greater Manchester, West Yorkshire, Bedfordshire, Surrey & Sussex, Thames Valley & Hampshire 관할 경찰이 함께 적용함

인권 우려 및 시민사회 반응

     * Amnesty International UK 등 인권 단체는 ""해당 기술은 유색인종 커뮤니티에 차별적""이며, ""오인식과 부당 체포 위험""이 존재한다고 비판함
     * Home Office(내무부)는 독립 테스트에서 ""정확하며 인종, 나이, 성별에 대한 편향 없음""이 확인되었다고 주장함
     * Liberty 등 시민단체는 공식 법적 프레임워크와 시민 의견 수렴 선행 필요성을 강조하며 도입 중단 촉구함

정부 및 경찰 의견

     * Yvette Cooper는 ""적절한 안전장치 마련을 우선""으로 하겠다고 발표하며, 카메라 사용 절차 등에 대한 공론화 및 신규 법적 프레임워크 신설 예정임을 알림
     * Metropolitan Police에 따르면, 런던과 South Wales에서 기술 시범적용 결과 12개월간 580건의 중범죄자 체포가 이뤄졌음
     * NPCC(National Police Chiefs' Council)는 해당 기술이 경찰의 ""용의자 신속, 정확 탐색에 큰 기회""라고 평가함

시행에 따른 쟁점 및 향후 방향

     * South Wales의 경우, 주로 Cardiff 시내의 축구 경기가 있는 날 등 총 160만 명 이상 시민이 얼굴 스캔 대상이 되었음
     * 정부는 새로운 법적 틀 마련과 시민 보호 방안, 그리고 적정한 시민사회 소통을 전제로 기술 도입을 지속 검토 예정임

        Hacker News 의견

     * 유럽 국가들에서 자유의 가치 자체에 대한 공공 논의가 있는지 궁금함, 경제적 번영이 아니라 자유 그 자체가 왜 소중한지에 대한 이야기임
       국가가 “안전”이나 사회적 불평등 해소 명분으로 법을 계속 만든다면 결국 아무 것도 못 하게 됨
       영국 법이 한때 시민 자유의 보호에서 최전선이었는데, <A Man For All Seasons>의 한 장면이 이를 잘 보여줌 영상
          + 법은 항상 공공과 사적 영역을 구분해옴, 지금 얘기하는 저 밴은 공공장소에서 발생하는 일임
          + 자유라는 단어의 뜻을 어떻게 정의하느냐에 따라 다르게 볼 수 있음 만약 미국식 기술 커뮤니티에서 인기 있는 리버테리언 자유라면, 유럽에는 그런 문화가 존재한 적이 거의 없음 하지만 인권 관점에서 보면, 인권 환경은 유럽에서 90~00년대 많이 좋아지고 확대됐음 유럽 인권법정이 강화됐고, 차별을 반대하는 법적 체계도 늘었으며, 영국은 1998년 Human Rights Act로 법에 인권을 명문화함 요즘은 이 흐름이 반대로 가는 중인데, 주로 대규모 이민자 유입에 반하는 포퓰리즘 영향이 큼 감시가 너무 저렴해지고 범죄에 단호한 이미지를 중시하는 정치인들 때문에 더욱 이런 분위기가 강화됨 미국 빅테크는 사생활을 권리가 아닌 돈벌이 모델로 다루고, 그게 로비를 통해 유럽 정책에도 영향을 줌
          + EU와 미국이 자유를 각기 다르게 누림, 그렇다고 유럽인이 덜 자유롭다는 뜻이 아님 예를 들어, EU는 상품·자본·서비스·사람의 국경 간 자유 이동이 가능함, 이런 건 미국에는 없음 이런 점에서 보면 미국이 유럽보다 덜 자유로운지도 논쟁거리인데, 개인적으로는 큰 차이 못 느끼겠음 하지만 영국의 경우 브렉시트가 큰 실수였다고 생각함
     * 영국이 예전에는 중국 비판 대상으로 삼았던 감시국가 기술을 엄청 빠르게 도입 중임 윤리적·실용적 문제와는 별개로, 이런 이중잣대가 솔직하게 받아들여지면 좋겠음 OSA, Apple 암호화 방식 요구, LFR(라이브 페이셜 리코그니션) 등은 분명 한 방향의 흐름임 사회가 정말 이렇게 위험해져서 이런 기술이 필요한 것인지 의문임
          + 처음 교사 일을 할 때, 교사가 문제 학생을 실제로 다룰 권한이 거의 없다는 걸 알게 됨 학생이 말을 안 듣고 부모도 신경 안 쓰면 결국 교사는 실질적인 대응이 거의 불가능함 정치인도 이런 무력감이 있다는 생각이 듦 시민, 경찰, 군대 등 사회 전체가 등을 돌리면 정치인은 그냥 허울만 있는 존재가 됨 이 때문에 요즘 정치 엘리트들이 점점 사회에서 분리되고, 점차 사회에 대한 망상적 두려움이 심해짐 이런 현상 때문에 국내 외적 선전, 반대 세력 검열, 어릴 때부터 정치 의무화, 경찰과 군대에까지 정치강요 등이 심해지는 것이라 봄
          + “사회가 정말 이렇게 위험해졌나?”에 대한 내 생각은, 실제로는 지난 100년간 전 세계적으로 폭력범죄가 급감했음 지난 20년간 선진국(서유럽, 북미, 일본, 한국 등)에서 감소 추세 두드러짐 영국도 최근 20년간 폭력·재산 범죄 모두 줄었고, 예외적으로 사기, 스캠, 사이버 범죄가 늘었음 전반적으로 범죄, 특히 폭력범죄는 이제 예전보다 훨씬 낮은 수준임 그런데도 왜 더 위험하게 느껴질까? 뉴스가 사건을 쏟아내기 때문임 항공사고 때도 대형 사고 한 번 나면 사소한 사고까지 난리 나지만, 실제로 지금이 역사적으로 가장 안전한 시기임 이건 범죄 문제가 아니라 권력 통제 문제에 가까움 감시 때문에 사회가 안전해졌다는 주장에도 반론이 많으며, ""법과 질서""를 빌미로 자유를 내주는 것은 좋은 방법이 아니라고 생각함 특히 미국 DC에서 “범죄 역대
            최고 수치”라는 왜곡된 뉴스와 같이, 사실과 다르게 이용되는 사례가 많음 참고링크 감시와 자유의 균형이 건강한 사회에 필요함(내가 감시라고 할 때, CCTV·경찰 순찰 등이고, 전국민 얼굴 인식 시스템까지는 아님)
          + 영국이 이런 걸 시도한 건 최근 일이 아니고, 오히려 지금까지는 EU가 “그건 인권, EU법 위반”이라고 자주 제동을 걸었음 “사회가 정말 이렇게 위험한가?” 질문엔, 아니라고 보고, 감시가 실질적으로 범죄 통계만 약간 개선했을 뿐임 얼굴 인식 밴 같은 기술은 시민을 보호하기보다 시위 참석자 명단을 만들거나 시민 억압·괴롭힘에 더 잘 쓰임
          + 영국 경찰이 시위에 “Forward Intelligence Teams”를 오래전부터 투입해 왔음 2010년에도 Fitwatch라는 행동단체가 이런 경찰국가화에 저항함 http://fitwatch.org.uk/"">아카이브 링크 CCTV도 어릴 때부터 엄청 많았음, 정말 위험한 동네여야 맞겠다는 농담이 나올 정도임
          + 실제로는 사회가 그리 위험하지 않고 감시도 별 효과가 없음, 카메라·실명제 계정·데이터베이스 등으로 범죄가 줄었다는 증거는 거의 없음 테러리스트도 미리 경찰에 알려진 인물이었고 제때 대응 못하거나 시스템 부족으로 효과 못 봤음 결국 자유와 안전만 줄어듦, 정부 자체가 오히려 보안 위협임, 내부 정보 유출자도 있고, 정치적인 남용도 빈번함 특히 극단정치세력이 감시를 활용해 특정 인물을 억압한 역사가 독일 등에선 자주 있었다고 볼 수 있음
     * 영국은 오랫동안 감시국가였음 내가 영국에서 네 번 재산범죄를 당했고, 세 번은 여러 대 CCTV에 잡혔음 하지만 그게 내 물건을 찾거나 범인 처벌에 아무런 도움도 안 됐음 오히려 경찰이 무작위 급습해 훔친 물건 창고를 발견했을 때만 내 노트북이 돌아왔음(그것도 감시가 아니라 익명의 제보 덕분이었음) 결국 런던에 카메라가 많아도 수사나 실효보다는 그냥 “너를 감시한다”는 느낌임
          + 나는 옥스포드 스트리트에서 밤 3시쯤 만취 상태로 강도 피해를 당했고, 주변에 100대는 넘는 카메라가 있었음 그런데도 경찰은 당시 유용한 영상이 없어서 아무것도 못 한다고 알려줬음, 이 일로 대도시 CCTV의 실효성에 대한 믿음이 크게 약해짐
          + 현실적으로 CCTV는 주거침입 범죄 검거·기소에 어느 정도 역할 할 수 있음 하지만 CCTV는 거리 방범관(순찰 경찰)처럼 억제 효과는 없음 범인이 검거돼도 내가 알게 될 일은 거의 없고, 적발돼도 확인엔 훨씬 오랜 시간 필요함 경찰에겐 도난물 회수에 시간을 많이 투자하기보다 차라리 평화로운 시위 참가자 수백 명 체포 쪽이 더 쉽다는 현실임 이건 영국만이 아니라 대부분 대도시 경찰의 한계임, 그래서 감시 문제와 분리해서 생각할 필요가 있음
          + “카메라는 단순히 감시만 한다”는 말은 사실이 아님 최근 얼굴 인식 기술 덕분에 실제로 많은 범죄자가 검거되고 있음 예시로, 1년간 LFR로 580명 체포, 성폭행·가정폭력·흉기범죄·강도 등 각종 심각 범죄자 체포 결과가 있음, 등록 성범죄자 52명 검거 등 공식 자료 참고, 이건 런던 사례임
          + 그건 논리적으로 취약함, 카메라가 억제 효과가 있으니 없으면 범죄가 오히려 더 심할 수 있음
     * 미국식 ""정석"" 방식은 Palantir, Meta, Google 같은 영리기업과 협력해서 감시를 대신하게 하거나, 아예 감시국가로 가는 방향임 미국·영국만이 중앙 주민등록·신분증 시스템이 없으면서 가장 강력한 감시조직을 은밀하게 운용함 유럽도 본질적으로 다르지 않고 방식만 다름, 유럽은 노골적이고 명확한 규칙 아래 공개적으로 하는 편, 미국은 그걸 부정하면서 비즈니스 모델+비밀 협력을 거쳐 진행함 이런 차이가 미국에서 극단적 정부가 단기간에 어두운 일을 처리하고 넘어가게 하는 원인이 됨(유럽은 수십 년 걸리고 정치인 커리어 전체를 다 써야 가능) 영국은 이 두 가지 극단 사이 어딘가에 늘 위치함
          + 이 말이 대도시에서 살면 이해가 쉽게 될 테지만, 사실 미국 서부엔 사람이 거의 없는 곳이 워낙 많음 고속도로로 수백 마일 달려도 아무도 못 보고, 대도시처럼 일상적으로 감시 안 당하는 지역 많음 감시를 전국민 대상으로 일률적으로 한다는 건 사실 불가능하거나 대부분 사람들이 원하지 않는 일임
          + 좋은 지적임, 이미 미국 도로에도 “얼굴인식 밴” 비슷한 역할의 Waymo 차량이 있음, 요청만 하면 경찰이 영상을 받을 수 있음 또한 경찰이 테슬라 한 대 사서 경찰관이 자주 운전하면서 영상을 얼굴 인식 서버로 실시간 업로드하는 것도 가능하다고 봄
     * “성인물” 접근 시 본인 확인 필수인데, 그 범위가 점점 넓어지고 있고, 이 데이터 풀로 이제 경찰이 대규모로 사람 얼굴 감시에 활용하기 시작함 정권이 얼마나 자신만만하면 시작 불과 몇 개월 만에 목적을 드러냈는지 알 수 있음
     * 이제 테슬라가 도로에 있고 이곳저곳 주차돼 있으면 감시밴이 따로 필요 없는 세상임 차량에는 이미 수많은 카메라가 달려있고, 고가에 구매한 정부기관이나 기업에 영상을 제공 못할 이유가 없음 다른 현대차들도 이 패턴을 따르고 있을 거로 생각함 심지어 운전자 얼굴 전용 카메라도 붙어 있고, 앞으로 Starlink 같은 빠른 업링크만 생기면 즉각 업로드도 가능할 것임 자동차가 AI로 현지에서 의미 있는 장면만 뽑아내고 서버로 보내는 것도 가능할 테니 이런 예시까지 상상함
telsa> 지금 코를 후비고 있는 모든 사람의 위치와 이름을 알려줘, ㅋㅋ

     * 내가 히드로를 한두 번 지나가는 것만으로도 영국이 무제한 감시국가가 되어 가는 게 확연히 느껴졌음, 하지만 이런 얘기에 대해선 거의 들어본 적 없음
          + 히드로에서 어떤 장면을 목격해 그런 생각을 하게 된 건지 궁금함
          + 모두 얼굴이 명단에 등록될까봐 이런 얘기를 꺼리는 것임
          + “되는 중”이란 표현을 썼지만, 영국은 이미 수십 년 전부터 감시 선진국이었고, 중국·9/11 이후 미국이 얼굴인식·CCTV 확대할 때까지 영국이 전 세계에서 1인당, 심지어 절대 숫자도 CCTV 최다였음 최근 확인에도 영국은 인구 11명당 1대 CCTV가 있을 정도임
     * 상파울루(브라질)가 경찰 오토바이에 얼굴인식 시스템을 도입했는데 실제론 범죄 억제 효과가 없다는 연구 결과가 있음 관련 기사 Smart Sampa는 일반 시민이 자신의 카메라도 네트워크에 기부(?)하여 감시에 참여할 수 있는 기능도 있음
     * 영국 경찰의 LFR 운용에 대해 “개인정보 보호 차원에서 사전에 언제·어디서·얼마 동안 쓰는지 시민에게 공개하니, 거부할 권리도 보장한다”고 하는데 현실적으로 그럼 마스크, 헬멧, 부르카, 바라클라바를 일상적으로 써야 한다는 걸 시민에게 정상화하려는 것 아닌지 의문임
          + 실상 경찰이 이미 대형 유통점·엔터테인먼트 체인보다 뒤늦게 이 기술을 활용하는 수준임 경찰도 훨씬 이전부터 얼굴 인식으로 영상 분석을 해 왔음 팔레스타인 감시 논란을 산 그 회사가 최근 미국 주차장 운영 기업에 매각한 것도 흥미로운 상황임 이미 하이스트리트(중심 상업지) 얼굴인식 시작 시점에 항의하자는 논의 자체가 10년 전에 끝난 주제임
          + 이 인용문이 어디에서 왔는지 찾을 수 없었음 만약 사실이라면, 공개적인 범죄자는 미리 감시 카메라 작동 내용을 알고 회피할 수 있으니 결국 정보를 모니터하지 않은 평범한 시민들만 얼굴·위치가 수집되고, 범죄자는 피해갈 여지가 남은 것임
     * 영국이 민주주의라면, 시민이 왜 이런 정책을 거부하지 않느냐는 질문에 사실 시민에게 의견조차 묻지 않았기 때문임
          + 토니 블레어의 “업적”이라 하면, 의회의 권한을 복잡하게 분산시켜 선거로 뭘 바꿀 수 없게 한 것임 투표해도 바뀌지 않는 구조를 만들어 둠
          + 미국식 승자독식 투표제(UK, USA)는 결국 양당제로 흘러가고, 시간 지나면 이 둘이 민심에서 멀어짐 비례대표제가 이런 측면에선 낫다고 생각함
          + 미국에 살면서, 그리고 영국 친구들도 느끼는 답답함이 누구를 뽑아도, 무슨 공약을 해도 결국 매번 똑같은 결과가 반복됨
          + 우리가 하는 투표는 다음 번에 우리의 기대를 저버리고 우리를 실망시킬 사람을 뽑는 것에 불과함
          + 서구 민주주의의 문제는 시민들이 정치인들에게 일관성을 기대하는 데 있음 감시 중시 정당은 범죄 대응까지 포괄해야 맞음 범죄를 심각하게 느끼는 사람에겐 감시가 설득력 있게 다가오지만 실제로 감시는 정부 비판 감시에는 붙잡히고, 범죄 대응에는 그다지 효과적이지 않은 경우가 잦음
"
"https://news.hada.io/topic?id=22563","케라틴으로 만든 치약이 손상된 치아를 보호하고 복원할 수 있음: 연구 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               케라틴으로 만든 치약이 손상된 치아를 보호하고 복원할 수 있음: 연구 결과

     * 케라틴 단백질을 활용한 치약이 손상된 치아 에나멜 복원에 효과적임
     * 케라틴은 치아 표면에서 자연 에나멜처럼 작용하는 보호막을 형성함
     * 기존 불소 치약이 완전히 막지 못하는 치아 부식을 케라틴이 차단함
     * 해당 기술은 일상용 치약 또는 전문 치료용 젤 형태로 제공 가능성 보유
     * 지속 가능성과 생체 친화성 측면에서 전통 소재보다 높은 강점 부각


연구 배경 및 주요 발견

     * King's College London 연구진이 머리카락, 피부, 양모 등에서 추출한 케라틴 단백질이 치아 에나멜을 복구하고 초기에 발생하는 부식을 막을 수 있음을 발표함
     * 케라틴이 타액 내 미네랄과 접촉할 때 자연 에나멜 구조와 기능을 모방하는 보호 코팅을 형성함
     * 에나멜은 뼈·머리카락과 달리 한 번 손실되면 자연 재생이 불가능함

치아 부식의 원인과 케라틴의 역할

     * 산성 음식, 음료, 잘못된 구강 관리, 노화 등으로 인해 에나멜이 침식 및 손상됨
     * 이는 치아 민감증, 통증, 결국엔 치아 상실로 이어짐
     * 기존에는 불소 치약으로 진행을 지연시켰으나, 케라틴은 부식 자체를 완전히 차단하는 밀집된 미네랄층을 형성해 치아 보호 및 민감증 완화 가능성 제시함

임상 적용과 기대 효과

     * 이 기술은 일상적으로 사용할 수 있는 치약이나, 더 집중된 관리를 위해 전문의가 적용하는 젤(네일 바니시 유사) 형태로 제공될 전망임
     * 임상 전환을 위한 구체적 경로를 이미 탐색 중이며, 2~3년 내 상용화 목표가 제시됨

기술 원리 및 과학적 근거

     * 이번 연구에서 연구진은 양모에서 추출한 케라틴을 사용함
     * 케라틴이 치아 표면에 도포되어 타액의 미네랄과 만나면, 고도로 조직화되어 결정 구조를 이루는 에나멜 유사 스캐폴드를 생성함
     * 시간이 지날수록 이 스캐폴드는 칼슘과 인산 이온을 지속적으로 끌어당겨 치아를 감싸는 보호 코팅 생성에 기여함
     * 이는 재생치의학 측면에서 큰 진전임

지속 가능성과 미래 전망

     * 케라틴은 머리카락, 피부와 같은 생물 폐기물로부터 추출 가능하며, 이는 의료자재의 지속 가능성 고민과도 부합됨
     * 기존의 복원 치료에 사용되는 플라스틱 레진보다 내구성, 무독성, 자연스러운 색상 구현 측면에서 우수함
     * 본 연구는 순환형, 폐기물-헬스케어 혁신과도 맞닿아 있음

연구진의 평가 및 기대

     * Sara Gamea 박사 연구원은 “이 기술은 생물학과 치의학의 경계를 넘는 생체 친화적 대안을 제공함”이라고 언급함
     * Dr. Elsharkawy는 “생체 소재를 활용해 기존 치료를 넘어서 생물학적 기능 회복이 가능한 시대의 도래를 기대함”이라고 밝힘
     * 산업 파트너십 및 추가 개발이 뒷받침된다면, 머리카락 같은 단순한 자원으로 더 튼튼하고 건강한 치아를 갖는 시대가 열릴 수 있을 것임

        Hacker News 의견

     * 사진에는 ""enamel-mimicking""이라 적혀 있고, 텍스트에는 ""자연치아의 에나멜 구조와 기능을 모방하는 보호 코팅""이라 표현하고 있음, 즉 진짜 복구보다 보호막 역할임을 알 수 있음. 최근 novamin 성분의 치약을 사용 중이고, 역시 보호층을 만들어주며 ""repair""라고 마케팅됨. 사용 시 치아에 닿으면 약간 열감이 느껴져서 화학 반응이 일어나는 것 같음. 제품 자체는 마음에 들지만, 마케팅 방식은 별로 마음에 들지 않음
          + biomin F라는 제품이 있는데, novamin의 최신 버전임을 추천함
          + 이 새로운 치약의 효과는 잘 모르겠지만, Novamin은 치아 재광화 효과를 마케팅함. 칼슘과 같은 미네랄 이온이 치아에 결합해 작은 구멍들과 홈을 채워줌. 실제로 에나멜이 자라는 건 아니지만, 분명히 긍정적인 효과가 있음. 사실 불소가 들어간 치약도 비슷한 역할을 하지만, Novamin이 약간 더 효과적일 수 있음
          + Novamin이라는 제품은 들어본 적 없음. 하지만 연구 논문(링크)에 따르면 Novamin이 카리에스 및 비카리에스 병변 치료에서 재광화제로서의 임상적 근거가 상당히 부족함. 좀 더 잘 설계된 임상 시험이 필요함. 그래야 확실한 권고가 가능함
          + 나도 novamin 치약을 쓰고 있는데, 화학 반응 같은 건 느껴본 적 없음. 혹시 더 나은 결과를 얻은 것인지 궁금함. 참고로 나는 탄수화물을 거의 먹지 않음
          + 단면 사진이 상당히 설득력 있게 보임. 무엇을 보고 있는 건지는 잘 모르겠음
     * “불소 치약은 현재 이 과정을 늦추는 데 사용되고 있지만, 케라틴 기반 치료는 이 과정을 완전히 멈출 수 있었다”라고 한 내용이 매우 반가움. 언젠가 사용해 보고 싶음
          + Sensodyne 치약에는 두 가지 라인이 있음. 하나는 순한 진통제(Rapid Relief)를 포함하고, 하나는 치아의 작은 금을 복구한다고 주장(Repair & Protect)함. 나는 후자를 사용 중임. 효과가 있는지는 확실하지 않지만 사용함. 치통을 겪은 적이 없음
     * 이 신기술이 최근 치약 혁신과 재광화에서 인기 있는 nano-hydroxyapatite(nHA)와 비교하면 어떤지 궁금함
          + nHA는 생산 비용이 매우 높고, 가장 효과적인 입자 크기를 만드는 공정이 Sangi에서 특허 보호되고 있음. 결과적으로 많은 nHA 치약 브랜드는 논문에서 괄목할만한 결과를 보인 농도의 일부만(1~2% vs 10%) 포함하고 있음. 만약 케라틴 치약이 더 경제적으로 생산된다면 대중화에 유리할 수 있음. nHA 치약을 직접 써보고 싶다면 Sangi Apagard Royal(비싼 편)이 추천됨. 사용 지시에 따라 쓰면 효과가 좋음
     * 오픈 액세스 논문: https://advanced.onlinelibrary.wiley.com/doi/10.1002/adhm.202502465
     * 최근 독일로 이주한 뒤로 언어의 기묘함에 대해 자주 생각하게 됨. 예를 들어 “toothpaste”는 이를 재료로 만든 게 아니고, “tomato paste”도 토마토에 바르는 게 아님. 그래서 이 제품을 “hairpaste for teeth”라 해야 할지 “toothpaste from hair”라 해야 할지 고민임
          + 복합명사에서 명사 간 의미 변동이 흔함. 예를 들어 “X로 만든 Y”(tomato paste), “X에 쓰는 Y”(toothpaste, paintbrush, electrical outlet), “X에 있는 Y”(treehouse), “X를 위한 Y”(doghouse), “X를 포함한 Y”(paint can), 은유적 의미(""moon shot"", ""greenhouse"") 등 다양한 변형이 있음. 특히, 독일에서는 이런 복합어를 많이 접하게 됨
          + “Toothpaste”는 치아를 닦을 때 쓰는 그 치약을 일컫는 일반적으로 통용되는 영어 단어임. 주요 성분이 keratin이라 해도 그 출처는 크게 중요하지 않을 거라 생각함
          + 실제로 올리브 오일은 진짜 올리브로 만들었는지 기대하지만, baby oil이 아기들로 만들어졌으리라고는 기대하지 않음
          + 독일에서 “Kinder Kebab, €2”라는 간판에 관한 농담이 있음
          + 이 덕분에 마케팅 부서에서 뭐라고 이름 붙이더라도 나는 이걸 toothhairpaste라 부를 예정임
     * 정말 반가운 소식이지만, 조금 더 기다려야 함. “케라틴 기반 에나멜 재생이 앞으로 2~3년 안에 대중에게 제공될 수 있음”이라고 언급되어 있음
          + 사실상 굉장히 빠른 속도임
     * 치약 선택이 너무 헷갈려서 생각이 꼬임을 풀어줄 블로그나 웹사이트가 있는지 궁금함. EU 시민임
          + 나도 그런 정보가 필요함. 내 치과 의사는 나에게 Duraphat 치약(50g에 9유로)을 추천해줌
     * 제품 공식 홈페이지 첫 사진에 대머리 남성이 등장하는 게 재밌음. 정작 본인은 테스트 안 해봤나 싶음
          + 왜 머리카락이 없을지 생각해보면 이유가 있을 수도 있음
          + 어쩌면 예전엔 머리카락이 있었는데 수확했는지도 모르겠음
          + 수염이 있으니 꼭 없는 것만은 아님
          + 혹시 테스트를 너무 많이 한 결과일 수도 있음
     * 이 기술이 미국 내 치약 승인 시 ‘보충제’ 분류에 들어갈지 궁금함. 실제로 제조사들이 별다른 검증 없이 이것저것 집어넣으며 마케팅할 가능성도 상상됨
     * 이 글이 246포인트나 받고도 novamin 같은 bioglass에 대한 언급이 전혀 없는 것이 이상함. 이 기술의 메커니즘이 다른지 궁금함
"
"https://news.hada.io/topic?id=22597","전기요금이 인플레이션의 두 배 이상 빠르게 오름","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       전기요금이 인플레이션의 두 배 이상 빠르게 오름

     * 미국 전역에서 전기요금이 최근 1년간 전체 물가상승률의 두 배 이상 빠른 속도로 인상됨
     * 특히 여름철 냉방비 부담이 커지면서 노년층과 저소득 가구 등 취약계층의 어려움이 심화됨
     * AI 데이터센터의 전력 수요 급증과 천연가스 수출 증가가 전기요금 상승의 주요 원인으로 작용함
     * 태양광 및 풍력 같은 청정에너지 발전원의 확대 필요성이 커지지만, 송·배전망 구축 비용 부담도 병존함
     * 점점 많은 가구가 전기요금 체납 위험에 처하는 가운데, 정부의 저소득층 지원 예산만으로는 여름철 냉방비 충당이 어려운 상황임


개요

     * 미국의 전력요금이 최근 1년간 전체 생활비 인상률의 두 배 이상으로 상승하는 현상임
     * 여름철 극심한 더위로 냉방기 가동이 증가하며, 전기요금 부담이 크게 높아짐
     * 노년층, 장애인, 저소득층 등 사회적 약자가 전기요금 압박을 심각하게 체감하는 사례가 빈번함
     * Florida Power & Light 등 주요 전력회사들이 추가 요금 인상안을 제출함에 따라 시민들의 반발 및 청원 운동이 진행되는 상황임

플로리다 사례: 냉방비 부담과 인상 논란

     * 켄 토마스(은퇴 관제사)는 단열과 창호 교체 등 에너지 효율 개선에도 불구하고, 여름철에 월 400달러 이상의 전기요금 청구서를 수령함
     * 에어컨 없이는 생존이 어려운 플로리다 주에서 정전은 일상생활에 큰 지장을 초래함
     * 알 살비(63세, 휠체어 이용자)는 전기요금과 약값을 선택해야 하는 생계의 딜레마를 토로함
     * Florida Power & Light가 전기요금 추가 인상안(4년간 약 13%) 을 제시하자, AARP 등 단체에서 광범위한 반대 청원이 전개됨
     * 전력회사 측은 성장하는 플로리다의 전력의 안정적 공급과 상대적으로 낮은 청구서를 유지하는 것이 목표라고 발표함
     * 구체적인 신규 요금안 세부 내용은 아직 공개되지 않음

전국적 현상: 수요·공급 요인

  AI 데이터센터 확대

     * 인공지능 관련 데이터센터의 대량 건설로 인한 전력수요 급증이 새로운 이슈임
     * 미국 에너지부는 내년에 데이터센터 및 상업 부문 전력소비가 처음으로 가정용을 상회할 것으로 전망함
     * 정책 담당자 및 전력망 관리 기관들이 급증하는 수요에 대응 방안 마련 경쟁을 벌이는 중임

  천연가스 수출 증가

     * 천연가스를 사용하는 발전 방식이 전체 전력의 40% 이상을 차지함
     * 액화 천연가스(LNG) 수출 증가로 수요가 높아지고, 미국 내 전력회사가 지불하는 연료비가 상승함
     * 전력생산에 사용되는 가스 가격은 올해 상반기 40% 이상 상승했으며, 내년에도 추가 상승이 예상됨

  신재생에너지와 그 한계

     * 태양광, 풍력은 가스발전소보다 저렴할 수 있으나, 설비 및 송전망 구축비가 발생함
     * 전체 가구의 6분의 1이 전기요금 납부에 어려움을 겪고 있음
     * 저소득층 에너지 지원 프로그램에 연 40억 달러의 연방예산이 투입되고 있으나, 여름철 냉방비 상승분을 감당하기엔 부족함
     * 대통령 예산안에 따라 저소득층 지원 중단 위험도 내포됨

결론

     * 켄 토마스는 전기가 복구된 것에 안도하면서도, 높은 여름 청구서를 걱정하는 모습임
     * 시민들은 에너지의 필수성과 지불 능력 한계 사이에서 고민을 겪는 상황임

        Hacker News 의견

     * 뉴욕시에서 내가 좋아하는 한 가지는 Con Ed가 인프라 업그레이드 비용을 소비자에게 직접 전가할 수 있는 승인을 받으면서, 자금 조달 기간이 끝나면 그 자산이 이를 위해 돈을 낸 공공이 아니라 이사회가 소유하게 되는 이상한 구조임
          + 사실 자산은 이사들이 아니라 투자자, 즉 주주 소유임을 언급함, 모든 사기업과 같음, 그럼에도 불구하고 특이하게 제도적으로 보호받는 독점 형태임, 많은 곳들이 공공 소유에 대한 두려움을 버려야 함을 주장함
          + 만약 민간회사가 자사의 이익으로 인프라를 만든다면, 그 자산이 그 서비스를 구매한 ‘고객들’의 소유가 되어야 하는지 반문함
          + 사실 이런 인프라 자산의 대부분은 부채임, 계속 유지보수해야 하는 책임이 따르기 때문임
          + 이런 구조가 주에 의해 강제되는 것 아님? 내가 사는 곳의 가스회사는 이렇게 운영되고 있음
          + 이런 자산 이전이나 임원들 특혜에 대해 투명성을 확보하는 건 매우 어려움, 관련 서류는 변호사나 로비스트가 아니면 아무도 안 읽는 규제 서류 속에 가려져 있음
     * 뉴저지에서는 많은 사람들이 전기 요금 인상에 대해 불만을 품음, 살펴보면 인상 원인은 대부분 인구 증가, 노후 발전소 폐쇄, 신규 발전소 부족임, 대부분의 사람들은 전력회사의 바가지 요금을 탓하지만, 실제로 전력회사는 매우 엄격하게 규제받아 가격 결정에 여유가 거의 없음, 정작 이 문제를 해결하려고 직접 발전소를 짓자는 논의가 잘 안 나와서 앞으로도 이런 기사들이 많이 보일 듯함
          + PSEG의 지난 5년간 연간 수익이 물가 상승률을 한참 초과하고, 비용은 거의 변화 없는 현실을 들어 그 이익이 서비스 개선이나 요금 안정에 쓰이고 있는지, 아니면 투자자 주머니로 들어가고 국가에 인프라 지원을 구걸하는 데 쓰이는지 질문함, 경멸 섞인 어조로 문제 제기함, 주식 코드 PEG임을 안내함
          + 공공 유틸리티는 가격 인상을 거의 못 함, 요금 인상엔 정부 승인이 필요함, 만약 AI 데이터센터로 인한 수요 증가가 문제라면 요금 대폭 인상해서 자체 발전소 건설을 유도하면 됨을 제안함
          + 실제로 전력회사는 ‘이익’을 통해 요금 책정 여지가 있다는 점을 지적함
          + 결국 저 발전소들을 누가 건설하고 운영할 것인지 궁금해함
     * 미국 전력요금 인상과 데이터센터 수요 증가에 관한 관련 기사, AI 데이터센터가 대형 도시 전체보다 더 많은 전기를 소비할 수 있다는 2024년 기사, 그리고 Meta 데이터센터의 연간 1만4975GWh 소비에 관한 기사 링크를 정리함
     * 호주에서는 정부가 가정용 배터리 구매(태양광 지원)에 보조금을 제공 중임, 40kWh 배터리를 보조금 받고 최종 1만5천 호주달러에 설치했으며, 태양광 및 재생 그리드 에너지로 배터리를 채움, 그리드 연결 비용은 하루 1달러, kWh당 전력 구입은 단 6센트로, 연간 총 에너지 비용이 향후 수년간 약 500달러 수준일 예정임
          + 뉴사우스웨일스(NSW) 거주자로서 어떤 제품, 어떤 보조금을 받았는지 궁금해하며, 자신의 경우 10kW 인버터와 12kW 패널을 이미 갖춰 40kWh급 배터리만 추가하고 싶은 상황임, 시중 설치가는 대략 10kWh당 9천달러라 보조금이 매우 크다고 봄(60% 수준), 자신의 경우 투자금 회수에 8년가량 걸릴 듯함, Amber와 같은 벤더로 전환하면 도매 시장과 비슷한 거래로 겨울철에도 플러스 수익 가능성 있지만, 결국 전력회사가 이런 수익 모델을 막거나 세금을 매길 거라 예측함
          + 정책이 지속가능성 목표와 일치할 때 가능한 좋은 사례라고 언급함
          + 저렴한 요금이 어떻게 적용되는지 궁금해함, 배터리 덕분에 그리드 요금이 인하되는 것인지 물어봄
          + 자기 집이 없는 입장에선 부러움
     * (정책성 비방, 논쟁성 댓글 생략)
          + 행정부 에너지 밀도 정책을 모든 분야에 확대하면 어떨지 상상함, 예를 들어 운송수단이나 전파 사용 기기도 원자력으로 하자고 농담함, 원자력 미니어처 기술이 잠수함 이후 더 이상 발전하지 못한 점을 짚음
          + 권위주의 체제는 충성도를 능력보다 중시하는 경향 때문에 부적격자가 자리를 차지하는 상황이 생김을 언급함
          + 슬프다고 언급하며 트럼프 지지 정당을 ‘미국을 러시아처럼 만들기’로 바꿔야 할 수준이라는 농담 섞인 비판을 함
     * 미국 평균 전기요금(kWh당 18센트)과 프랑스(32센트), 독일(36센트)의 비교, 행정부가 증가하는 전력 수요를 해결하고 신규 전력 유입 장벽을 해소하려는 노력을 언급함, ‘글로벌 경쟁을 위해 에너지 생산 확대와 비용 절감이 필요함’을 강조하며 관련 기사 링크 첨부함
          + 행정부가 전력 수요 증가를 해결하려 노력한다고 하지만, 실제론 태양광/풍력 프로젝트를 취소하거나 지연시키고, 오히려 석탄을 지원하는 건 모순이라고 지적함
          + 미국 전체와 각기 다른 정책·보조금, 우크라이나 전쟁 영향을 받는 유럽 국가를 단순 비교하는 건 이상함, 미국 일부 주의 전기요금은 훨씬 더 높다는 점을 강조함
          + 중국 평균 전기요금은 kWh당 7.6센트, 인도는 7.4센트임을 단순 비교용으로 추가함
          + 캘리포니아는 kWh당 거의 60센트, 네바다는 10센트임을 실제 경험과 함께 소개함
          + 서유럽 국가 중 한 곳은 0.16유로/kWh, 캘리포니아는 0.60달러/kWh임을 예시로 듦
     * 이상적으로는 단독주택과 자본이 있는 사람들이 태양광+배터리에 투자하게 유도되어, 관세 등을 감안해도 10년 이내에 투자금 회수 가능할 거라 봄, 유틸리티가 전력 구매가격을 많이 안 주는 현실에도 시간별 요금과 배터리 활용으로 일부 보완 가능함을 언급함
          + SF 베이에어리어에 살며, 요금이 5~6년 내 두 배 가까이 됨을 체감하고 있음, kWh당 거의 0.5달러~이상, PG&E는 절약이나 태양광 활용에 대해 보상하지 않고 “수익이 충분치 않아 요금을 올려야 한다, 태양광 사용자에게 월 80달러 이상을 그리드 접속료로 청구하겠다, 전기 반납도 새로운 사용자에게는 보상 안한다”고 반복함, 수도 요금도 비슷한 패턴임, 전체 시스템이 사기이고 정치인도 모두 부패했다고 비판함
          + 왜 이상적인 세상이 개인이 집에 전력소를 세울 만큼 전기값이 비싸야 하냐는 반문, 자신의 시간을 이렇게 투자하긴 싫음, 사회 전체가 모든 인프라를 직접 관리해야 하는 유인책이 되는 건 원치 않는다고 밝힘
          + 이상적인 세상은 지주들이 개인 요새를 세우는 그림이 아님, 에너지·홈오토메이션 분야에서 일하며 번아웃 상태임을 털어놓음
          + 정부의 에너지 정책 실패로 가격이 뛰면 개인이 더 비싼 방식(자체 태양광+배터리 등)으로 에너지 전환해야 말이 된다는 논리를 비판함, 이런 유도가 정말 긍정적인 일인지 되묻음
          + 실제로는 보조금으로 혜택 보는 기업이 비용 대부분을 부담해야 이상적인 세상임, 현실은 일자리 해외이전이나 H1B로 인건비만 줄이고 더 많은 이익을 챙긴다는 점을 비판함
     * (참고) 물가 상승률을 감안하면 미국 전기요금은 지난 30년간 오히려 하락했으나, 최근 그 추세가 반전되는 현상이 나타남, 앞으로 그 규모·기간이 주목됨, 관련 차트 링크 첨부함
     * 소비 요금과 그리드 요금이 어떻게 변하고 있는지 궁금함, 스웨덴에서는 그리드 요금(송전·안정성 비용이 포함됨)이 최근 급증했으며, 실제 전력 소비 요금은 최근 5년 중 최저치, 풍력·태양광 변동성으로 인해 송전망 복잡성·수요가 급격히 오르고 있음
          + 그리드 요금이 실제로 많은 지역에서 더 빠르게 오르며, 신재생 확대, 데이터센터의 피크수요, 수 십 년간 연기된 송전망 보수 등 인프라 유지 비용이 반영됨
     * 공식 물가상승률보다 2배 이상 빠르게 전기요금이 오르고 있음을 지적함
"
"https://news.hada.io/topic?id=22570","Dyad - 무료, 로컬, 오픈소스 AI 앱 빌더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Dyad - 무료, 로컬, 오픈소스 AI 앱 빌더

     * 로컬 실행을 기반으로 한 오픈소스 AI 앱 빌더로, Lovable, v0, Bolt, Replit의 대안
     * macOS·Windows에서 동작하며, 회원가입이나 락인(lock-in) 없이 앱을 빠르게 만들 수 있음
     * 풀스택 앱 구축: Supabase 통합으로 Auth, Database, Functions까지 포함
     * 다양한 AI 모델 지원: OpenAI, Anthropic, Google Gemini, 로컬 모델 등
     * 로컬 실행: 데이터 프라이버시 보장, 즉각적인 사용자 경험, 클라우드 환경 불일치 문제 제거
     * 개발 통합: 소스코드는 로컬에 남아 IDE(VS Code, Cursor 등)에서 자유롭게 작업 가능
     * Dyad는 항상 무료·오픈소스로 유지되며, 기능 제한 없는 강력한 앱 빌더로 제공될 것임
          + 무료 버전 외에도 Pro/Max 요금제를 통해 추가 AI 모드, 크레딧, 전담 지원, Dyad Academy 등을 이용할 수 있음

FAQ

     * 무료 사용 가능 여부: 가능, API 키만 있으면 무제한 앱 생성 가능
     * 구축 가능한 것: 풀스택 웹 애플리케이션, 인증·DB·백엔드 포함, Capacitor로 모바일 앱 실험적 지원
     * 데스크톱 앱 제작 가능 여부: 불가능, Dyad 자체는 데스크톱 앱이지만 만드는 것은 웹앱 중심임
"
"https://news.hada.io/topic?id=22544","이 책들 중 음란한 책은 없음: 플로리다 책 금지법 주요 조항 위헌 판결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                이 책들 중 음란한 책은 없음: 플로리다 책 금지법 주요 조항 위헌 판결

     * 플로리다 연방법원이 학교 책 금지법의 주요 부분을 위헌으로 판결함
     * HB 1069 법안으로 인해 수백 권의 책이 예술적·문학적 가치와 상관없이 무분별하게 금지됨
     * 판사는 Miller Test 기준을 적용해야 한다고 강조하며, 막연한 ""성적 내용""으로 책을 판단하는 방식이 잘못임을 지적함
     * 정부가 학교 도서관 책 선정을 ‘정부 발언’으로 포장한 주장도 받아들여지지 않음
     * 이번 판결은 표현의 자유 수호와 미래의 책 검열 문제에 중요한 선례가 될 전망임


사건 개요와 판결 배경

     * 플로리다 중부 연방지방법원의 Carlos Mendoza 판사는, 플로리다 주에서 시행된 도서 금지법(HB 1069) 의 주요 조항이 광범위하고 위헌임을 판결함
     * 2023년 통과된 HB 1069는, 학부모나 주민의 단순한 이의제기로 ""성적 내용""이 포함된 책을 5일 이내 일단 도서관에서 제거하도록 요구했으며, 공식 심의 결과와 무관하게 되돌려놓을 의무도 부과하지 않았음
     * Penguin Random House 등 여섯 곳의 출판사, Authors Guild, 유명 작가, 학생 및 학부모 등이 피고 플로리다 공무원을 대상으로 소송을 제기함
     * 이 법안 신규 시행 이후 수백 권의 책이 문학적, 예술적 가치와 무관하게 무차별적으로 금지됨

판결의 핵심 논점

  성적 내용 평가 기준

     * 판결문에 따르면, ""성적 내용"" 관련 조항이 지나치게 막연하며 Miller Test(미연방대법원의 음란물 판단 기준)을 적용해야 한다고 밝힘
     * Miller Test는 작품 전체를 기준으로 평가해야 하며, 맥락에서 벗어난 발췌문장으로 판단할 수 없음을 명확히 함
     * 플로리다 교육청은 도서관 사서에게 ""성적 행위""가 포함된 자료 보유 시 징계 가능성을 내세워 제거를 장려했으나, 실제 학교 및 공공도서관에는 이미 미성년자에게 불법인 음란물이 존재하지 않음을 재확인함

  정부 발언(gov’t speech) 논리 반박

     * 플로리다 주 정부는 학교 도서관 선정이 ‘정부 발언’ 이라고 주장하며 제1차 수정헌법을 회피하려 했으나, 판사는 ""책 내용을 기반으로 일괄 금지하는 것은 고유 의도나 공식 메시지 표현이 아님""이라고 명확히 부인함
     * 학부모가 자녀 교육에 의견을 낼 수는 있으나, 정부가 이를 공적 의견인 척 포장해 표현의 자유를 억압해서는 안 됨을 판시함

해당 판결의 영향 및 추가 논의

     * 이번 판결로 금지된 수백 권의 책이 법적 기준상 명확히 제1차 수정헌법을 침해함이 입증됨
     * 플로리다 교육청은 ""명백히 음란하다""고 판단한 수십 권의 책을 사전 심의 없이 강제적으로 제거하도록 요구함. 일부 교육구는 이를 따름
     * 이 판결이 타주에서 시행되는 ""부적절 도서 금지법""에도 어떤 영향을 줄지 현재로서는 불분명함
     * Mendoza 판사는 실제로 금지된 The Color Purple, The Kite Runner, Slaughterhouse-Five 등 명작들이 Miller Test 상의 음란 정의에 해당하지 않음을 구체적으로 언급

원고측·지지자 반응 및 향후 전망

     * Florida Freedom to Read Project의 Stephana Ferrell은 ""책을 표지나 문맥 없는 발췌로 판단해서는 안 된다는 사실을 명확히 한 판결""이며, 무분별하게 학생 접근이 금지된 책들은 되돌려놓아야 한다고 주장함
     * 원고측 변호인은 ""법원이 원고측 모든 주장을 수용한 완승""이라며 이번 판결의 강한 의미를 부각함
     * 플로리다 주정부는 현재까지 별다른 공식 입장을 내지 않았으며, 항소 가능성이 높음
     * 이번 판단은 플로리다 뿐만 아니라 미국 내 유사한 검열 사건 판결에도 중대한 선례로 작용할 가능성이 있음
     * 현재 미국 곳곳에서 진행 중인 책 검열 관련 다른 소송과도 연계돼 앞으로의 흐름에 큰 영향을 미칠 전망임

        Hacker News 의견

     * 많은 금지 도서들이 엄청난 문학적 가치를 지닌 책임을 알고 정말 놀람, The Color Purple, The Handmaid's Tale, The Kite Runner 등은 외설적일 수 있는 평범한 책이 아니라 전통적인 명작임, 그래서 이러한 금지가 불순한 의도로 이뤄졌음이 명확해짐
          + 이 책들이 보수주의 지도자들의 이념과 충돌해 불쾌감을 주는 이유임, 교육, 희망, 친절 같은 것들이 나쁘다는 신념임, 복종을 강요하려면 반발의 가능성을 아예 없애야 함
          + 공화당은 갈색 피부 사람, 여성, 기타 소수자를 비인간적으로 만들고 싶어 한다는 것을 숨기지 않아 왔음, 미디어 검열 의지도, 교육 기회의 무시에 대한 태도도 마찬가지임, 이런 현상을 각개로 따로 보지 말고 체계적인 접근임을 알아야 함, 이미 이들에게 선의의 해석을 줄 수 있는 시기는 지났음
          + 정말 불순한 의도임, 이 책들은 인간성의 미운 면을 보여주기 때문에 불쾌할 수 있지만, 외설적인 책은 아님
          + 미국 정치에는 Dominionism이라는 신학 및 정치 이론에 기반한 조직적 움직임이 있는데, 특정 종교 교리가 법률 체계에 들어가 그들이 죄라고 보는 것을 사회적으로 억제하거나 금지해야 한다는 주장임, 이 운동 지지층은 타협을 거부하고 자신의 종교적 열정을 승리주의적으로 드러내며, 소속 집단 밖 사람들에게 불친절함, 플루럴리즘(다원주의)의 관용 원칙을 이용해 ‘관용의 역설’을 자기 유리하게 이용하려 함, 하지만 다양성이 사회를 더 활기차게 한다고 생각함
          + Slaughterhouse-Five마저 금지하는 건 정말 심각하게 편협해야 가능한 일임, 이런 부작용 때문에 몇몇 문학 고전이 젊은 세대에 잠깐 인기를 끄는 효과가 나타남
     * 이런 종류의 법률에 대해 ""언론의 자유 절대주의자""라는 사람들이 매우 미온적으로 대응하는 것이 충격적임, 정부가 검열을 자행하는 상황인데도 이슈가 잘 드러나지 않음, 실질적으로 자유를 위해 싸우는 사람들은 스스로를 더 일반적인 용어로 표현함
          + 그 이유는 스스로를 ""언론의 자유 절대주의자""라고 하는 사람들이 실제로는 자기가 원하는 언론만 허용하려는 파시스트적 성향이 있기 때문임
          + 2A(총기 소유 권리)로 정부의 폭정에 맞서겠다는 사람들이 또 다른 방식의 정부 폭정(검열)은 문제없다고 함
          + 뭔가를 대놓고 주장하는 사람들은 거의 예외없이 실상은 정반대임을 보게 됨, 예를 들어 언론의 자유 절대주의자, 반세금, 이성애자, 작은 정부, ‘범죄에 강경’ 이런 것들을 loud하게 외치는 사람들이 실제론 그렇지 않음
          + ""언론의 자유 절대주의자""는 사실 당파적 검열을 합리화하는 자기소개적 꼬리표일 뿐임, 진실을 아는 사람들은 절대적인 언론의 자유란 없다는 걸 이해하고 있음
          + 개인적으로 이 법률에 동의하지 않지만, 학교 교육 내용 선정은 언론의 자유와는 다르다고 생각함, 예를 들어 학교가 The Bell Curve나 Mein Kampf를 반드시 비치할 이유도 없음
     * 성경은 과연 괜찮은지 의문임, 창세기·룻기·사무엘 등 구절엔 은유로 성적 내용이 많음, 레위기나 사사기처럼 대놓고 외설적이지는 않아도, ""그녀에게 들어가다""라는 식의 완곡어법이 반복됨, 온안 이야기처럼 명시적인 사정 묘사도 존재함
          + 에스겔 23장 20절엔 ""그녀가 수나귀의 성기와 말의 사정에 탐닉했다""는 노골적인 구절도 있음
          + 사사기엔 히브리 암살자가 가나안 왕을 찔러서 그가 방귀를 뀌고, 하인들은 그 냄새에 익숙해 그냥 둔다는 적나라한 이야기마저 있음
          + 이러한 구절도 괜찮은 이유는 노골적이지 않고, 옛날 언어라 현재 기준으론 순하게 들린다는 것임, 책 금지 지지자들한테 정말로 성경 내용 괜찮냐는 질문을 하면 이미 논쟁에서 졌다고 볼 수 있음, 그들에겐 성경은 무오류이기 때문임, 성경 구절을 반례로 드는 것은 아무 소용없음
          + (에스겔 23:20 반복 인용) 수나귀, 말의 이야기를 섞는 건 더욱 당혹스럽게 느껴짐
          + 성경이 항상 고리타분한 언어나 은유를 쓰는 건 아니라는 점도 중요함, 에스겔 23:20 같은 구절도 있음
     * 인간 역사의 어느 때나 책을 금지한 쪽이 옳았던 경우는 없음
          + 2차 세계대전 후의 탈나치화 과정은 예외일 수 있으니 참고할 필요 있음
          + 정치 이야기는 신중하고 싶지만, 불과 20여 년 전만 해도 민주당이 ‘문화적으로 예민하다’며 학교에서 책을 금지했고, 당시 공화당이 검열에 반대한 적도 있음, 성적인 내용/포르노가 있는 신간을 금지하는 건 일리가 있어 보이나, 명작을 ‘문화적 민감성’이라는 이유로 금지하는 건 정치적 세뇌와 동일함
          + 요즘은 모든 집단이 무언가를 금지하려 듦, 한쪽은 두 남자의 키스가 나오는 책, 다른 쪽은 잘못된 대명사 사용이 나오는 책을 금지하려 함, 이런 점에서 서로 비슷함
          + 만약 진짜로 너무 위험해서 세상에 있어선 안 되는 책이 실제로 금지됐으면 지금 우리는 그 책이 있었다는 사실조차 모를 것임, 나도 책 금지엔 단호히 반대하지만 정말로 금지가 필요했던 역사적 순간이 있을 가능성은 완전히 배제하긴 어려움
          + Mein Kampf 금지는 역사에서 반드시 나쁜 쪽은 아니었음, 이런 문제는 흑백논리가 적용되지 않음
     * 정부 현황을 볼 때 이런 좋은 소식(책 검열 완화)이 오래 가지 않을까봐 불안함, 이미 이들은 숨길 필요 없이 대놓고 인종차별, 성차별, 혐오를 드러냄, Cloud Atlas가 금지 도서 목록에 있는 걸 보고 놀랐는데, 진짜 이 사람들이 그 책들을 제대로 읽었는지 의문임
          + 금지 대신 사서들에게 기소 위협을 가해 책을 자체적으로 치우게 만드는 방식도 있음, 실제로 이런 사례가 있음 NYT 기사
          + 일이 끝난 게 아님, 플로리다가 도서 구입 내용을 어디까지 규제할 수 있는지에 따라 여러 번의 소송 공방이 예상됨, 책 구매 자체를 금지한 것은 아니니까
     * 기사에서 언급된 책들은 초등학생에겐 부적절하더라도 청소년, 고등학생에겐 충분히 읽을 만한 수준임, 어떤 책이든 맥락, 심사 기준, 엄격한 표준 없이 무조건 금지하는 것은 지나침, 실제로 소셜미디어에 올릴 수 없을 정도로 노골적인 외설(예: 학생이 교사에 구강성행위를 묘사하는 만화 형식 책)이 학교 도서관에 비치된 사례도 있고, 이런 건 학교에 전혀 어울리지 않음, 다만 자녀가 성숙했다고 부모가 판단하면 그런 정보에 접근하게 하는 것은 개인의 선택임, 단지 공립/학교 도서관에는 적합하지 않다는 것임, 어른용 영역을 따로 두는 건 전혀 반대하지 않음, Playboy도 괜찮다고 봄
     * 성경에는 수많은 성적 내용이 있지만, 이런 책들을 치우라고 요구하는 부모들은 성경에는 아무런 이의제기를 하지 않는다는 점이 묘함
     * 이번 판결이 번복될 가능성이 높음, ""책 금지""라는 단어는 기사, 제목에서는 쓰이지만 실제로는 법적 상황이 다름, HB 1069는 성적 내용이 있으면 책의 가치와 상관없이 도서관에서 빼라는 규정임, 플로리다는 개인 소장 도서에 간섭할 수 없지만, 학교 사서와 도서관은 정부 돈으로 운영되므로 주정부가 구비 도서 종류를 규정할 권리가 있음, 만약 도서관이 작가들의 작품 발표나 강연을 위한 중립적 공간이라면 검열 논란이 될 수도 있지만, 헌법이 정부에게 특정 도서를 꼭 구매해놓으라고 강제할 수는 없음
          + 실제로 해당 법률에서는 ""학교 부지"" 개념에 공립, 사립, 준사립까지 다 포함시켜 놓았음
          + 주 정부가 직원을 대상으로 어떤 책을 구매해 비치할지 통제할 수 있다는 건 헌법상 그렇지 않음
          + 법률이 규정하는 ""성적 내용""엔 LGBTQ의 존재 자체까지 포함되는 경우가 많은 문제임
          + 헌법이 정부에게 특정 책을 꼭 사라고 강제하진 않지만, 어떤 책을 절대 사지 말라고 하는 것도 막을 수 있음, 다소 이상해 보여도 그게 1차 수정헌법의 작동 방식임
     * 책을 금지하는 광기가 논란이긴 해도, 빅토리아 시대 처럼 단지 성에 대한 개념을 노출한다고 아동에게 외설물 취급하는 사고방식 자체가 더 이상함, 한편으론 아이들이 자기동의, 성의 정상성을 배워야 한다고 하면서, 18살 전엔 그 어떤 내용도 접하지 못하게 막는 중임, 아이들이 나쁜 포르노에 빠지지 않길 원한다면 좋은 포르노, 즉 일상적인 정상적 성 경험 사례가 제공되어야 함, 왜냐하면 현실에선 어디서도 실제 모습을 볼 기회가 없기 때문임, 만 18세가 적정 구분선이라는 생각이야말로 시대착오적임
          + 요즘 와서 깨달은 건, 주류 문화에서 성에 대한 경험이 거의 문제적 권력관계에만 갇혀 있다는 점임, 동의의 개념이 빈약하고, 성 자체가 수치이거나 착취를 내포한다는 인식이 퍼져있음, 예를 들어 해방적이며 페미니스트인 여성을 상상도 못하고, 남성의 성적 성공도 ‘여성 착취 여부’의 스펙트럼으로만 바라보게 됨, 분명히 존재하는 동의 기반 관계도 불가능하거나, 성 해방이 곧 품위 하락/착취라는 전제가 깔려 있음, 트랜스젠더, 동성애, 폴리아모리 등 모든 영역에 착취 프레임이 뒤따름, 심지어 평범한 일상 대화에서도 이중 잣대와 수치심이 스며있음, 마치 백인 아이가 유색인종을 '지적'하는 순간 어른이 그걸 막으며 부끄러워하는 것과 유사한 심리임
"
"https://news.hada.io/topic?id=22499","Show GN: 단축키 모음 서비스 입니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 단축키 모음 서비스 입니다

   개발자, 디자이너, 오피스 워커를 위한 키보드 단축키 모음 서비스 입니다.

   replit으로 ui를 만들고 Claude Sonnet 4로 세부 구현 했습니다!

   개발을 모르는 대학생이라 미흡합니다
"
"https://news.hada.io/topic?id=22502","건설적인 비판과 잘못된 조언 구분하기 [번역글]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       건설적인 비판과 잘못된 조언 구분하기 [번역글]

1. 본질을 바꾸려는 조언에 주의하라

     * 좋은 조언은 현재의 자산과 정체성을 지키면서 더 나은 방향으로 이끌어준다.
       (진정한 조언은 ""지금의 나""를 잃지 않으면서 성장하게 돕는다)

2. 경험 많은 전문가라도 맥락에 안 맞는 조언은 걸러야

     * 창업 초기에 만난 영업 전문가(Frank)는 회사 이름, 특허, 영업팀 등 ""무조건 따라야 할 것""처럼 조언했지만,
     * 멘토(Gerry)는 ""이미 제품과 고객이 있다면 급격히 바꿀 필요는 없다""고 지적했고 실제로 성공을 거뒀음
     * 조언의 옳고 그름은 경험, 맥락, 현실에 따라 달라질 수 있다.

3. 조언 구분법

     * 통찰인가, 자기합리화인가?
          + 조언이 마음에 드는 이유가 내 현실에 필요한지, 혹은 내 행동을 정당화하기 위함인지 점검
     * 맥락(Context)의 일치 여부
          + 조언자의 경험과 내 상황(시장, 목표, 비즈니스 모델 등)이 얼마나 일치하는지 따져봐야 함
     * 명령형보다 질문형
          + 진정한 조언자(Gerry)는 날카로운 질문으로 나의 선택을 스스로 방어하도록 유도. 단정형 조언보다 질문에서 해답이 나옴
     * 불편·거부감이 드는 조언일수록 배움의 기회
          + 즉각적인 거부감이 드는 조언은 오히려 내 맥락을 깨는 계기가 될 수 있음
     * “이게 정석이야”라는 말에 속지 말 것
          + 전통·관례가 근거라면 반드시 조사·검증 필요. 전통이 무조건 답도, 해답도 아님

4. 건설적인 비판이란?

     * 단순히 아이디어를 ""깎아내리는 것"" 아니라, 실행 방법 & 성공 판단 기준을 제시해야 함
     * 실행 결과를 측정할 수 있는 지표가 함께 주어져야 함

5. 무엇이 내게 맞는 조언인가?

     * 정답(Universal Answer)는 존재하지 않음
       (다이어트와 동일: 모두에게 통하는 것은 없음. 시장, 개인, 팀 등 맥락에 맞는 방법만 존재함)
     * 지속 가능한 방식인지, 내 성격/회사 문화와 맞는지 돌아보기

6. 좋은 조언을 받는 방법

     * 신뢰할 조언자 네트워크(멘토/동료/온라인 커뮤니티 등) 구축
     * 의견이 서로 달라도 진심으로 내 성장을 바라는 인물을 곁에 둘 것
     * 직감을 따라라
          + 이성적 판단 외에도, 때로는 감정이 이미 옳은 해답을 알고 있음

7. 결론

     * 세상에 “무조건 따라야 할 조언”은 없으며, 조언은 내 맥락·지속 가능성·자기 본질을 기준으로 걸러야 한다
     * 정말 좋은 조언은 나를 완전히 바꾸기보다는 본연의 나를 성장시키는 데 도움을 주는 조언임
"
"https://news.hada.io/topic?id=22525","일리노이, 심리치료 및 치료 분야에서 AI 사용 제한","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     일리노이, 심리치료 및 치료 분야에서 AI 사용 제한

     * 일리노이주가 치료와 심리치료 분야에서 인공지능(AI)의 사용을 제한하는 새로운 법안을 도입함
     * 법안은 환자와의 대화, 상담 등에 AI가 직접적으로 관여하는 것을 금지함
     * 관련 규제는 환자의 개인정보 보호와 치료 질 유지를 강조함
     * 치료사와 인간 전문가의 역할을 우선시하며, AI는 제한적 보조 수단으로만 허용됨
     * 이러한 법적 조치는 의료윤리와 신뢰성을 지키기 위한 예방적 움직임임
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

일리노이주 AI 치료 및 심리치료 분야 사용 제한

  법안 개요

     * 일리노이주는 치료 및 심리치료 현장에서 인공지능(AI) 의 직접적 사용을 제한하는 새로운 법률을 도입함
     * 해당 법안은 AI가 환자의 직접 상담, 평가, 치료와 같은 핵심 과정에 관여하는 행위를 금지하는 내용임
     * 이는 환자의 개인정보와 치료 내용 보호, 치료의 질 보장을 주요 목적으로 함

  규제 주요 내용

     * 인간 치료사의 역할을 중심에 두고, AI는 제한적 보조 수단으로 사용함
     * 상담 결과에 대한 최종 책임은 치료사에게 있으며, AI가 독립적으로 환자와 상호작용하거나 치료 결정을 내리는 것은 허용하지 않음
     * 치료 과정에서 생성된 데이터의 보안과 비밀 유지를 강화함

  도입 배경 및 기대 효과

     * 환자의 심리적 안전성과 의료윤리를 보장하기 위한 선제 조치임
     * AI 도입이 치료 신뢰성 저하나 잘못된 판단 유발 위험성을 줄이고자 함
     * 인간 전문가와 대면 치료의 본질적 가치를 우선시하는 방향임

  향후 전망

     * 일리노이의 이번 방침은 미국 내 다른 주 및 의료분야에서도 참고 사례로 주목받고 있음
     * 신뢰성 있는 AI 활용, 환자 권리 보호, 치료사와 협력 방안 등 추가 논의가 이어질 것으로 예상됨

        Hacker News 의견

     * Illinois 주의 공식 입장임
       이 링크에서 확인 가능함
       이제 Illinois에서는 AI 챗봇이 공인 치료사나 상담사를 대신할 수 있다고 주장하는 것이 불법이 된 것 같음
       하지만 사람들이 AI를 원하는 대로 사용하는 것은 막지 않음
       단지 상담 서비스에서 AI가 실제 사람보다 저렴한 대체제라고 주장할 수 없게 되는 것임
       이 부분이 괜찮게 느껴짐
          + 맞는 말임
            이 법은 제공자(프로바이더) 중심의 제약임
            ""당신의 챗봇이 치료사라고 주장할 수 없다""는 식임
            사용에는 제한 없음
            여전히 AI를 최고의 친구나 치료사로 대하고 사랑에 빠질 수도 있음
            허용되는 AI 활용 방식에 대해 구체적으로 정한 부분이 있음
            섹션 15를 보면, 공인 전문가가 AI를 활용하는 경우, 모든 상호작용/결과/데이터 사용에 대해 전문가 본인이 전체 책임을 져야 함
            그리고 고객의 상담세션이 녹음/기록될 경우, 반드시 환자 또는 법적 대리인에게 서면으로 AI 사용 목적을 설명하고 동의받아야 함
            Illinois HB1806 원문은 여기에서 확인 가능함
          + 이런 서비스는 충분한 설명과 동의가 있다면 괜찮을 것 같음
            실제로 환자 결과에 큰 차이가 있을지도 놀랍겠음
            이미 연구가 있었고, AI도 효과 있지만 인간이 더 낫다는 결론이 있음
            관련 연구 링크
          + 이 법은 법적으로 다른 흥미로운 영향도 있음
            상담 세션에 대한 기록은 일반적으로 '보호된 비밀'(protected confidence)로 취급됨
            대부분의 경우 서브포이나(소환장)로도 접근할 수 없고, 특별 허가가 필요함
            그래서 AI와의 대화가 '보호된 비밀'에 포함되는지, 법정에서 이를 거부할 수 있는 논리가 될 수 있는지 궁금했었음
            적어도 Illinois에선 이 부분에 대한 대답을 얻게 됨
            이런 결정은 타 지역 법 해석에도 영향 줄 수 있음
          + 만약 언젠가 훨씬 더 저렴하면서, 인간 치료사보다 더 뛰어난 AI가 나온다면 어떻게 될지 궁금함
          + 일반 챗봇이 쓴 텍스트가 법정에서 '치료'로 판정되면 위반이 되는지 생각해봤음
            법안을 그런 식으로도 읽을 수 있을 것 같음, 하지만 나는 변호사가 아님
     * 기사에서 AI 챗봇이 전직 중독자에게 ""이번 주는 메스암페타민을 조금 하라""는 식의 조언을 했다는 사례를 봤음
       이런 일이 생기는 건 전혀 놀랍지 않음
       언어 모델의 원리를 알면서 AI 상담이 좋은 아이디어라고 생각하는 것이 이상하게 느껴짐
       더 많은 주에서 이런 법이 따라가길 바람
       공식적인 제공 환경에서는 이런 것이 합법적이어선 안 됨
       비공식적으로 사람들은 AI를 계속 원하는 방식으로 쓸 것임
       누군가는 안 좋은 결과를 맞기도 하겠지만, 전체 영향을 측정하기는 어려울 것임
       언어 모델은 아직 이런 용도로 준비가 안 됐다고 생각함
          + 이런 이유 때문에 LLM이 진단이나 처방 용도로 쓰이면 안 된다고 생각함
            메스암페타민 한 번 맞는다고 일주일 쓸 수 있는 것도 아님
          + 사실 오늘날 수백만 명이 매일 암페타민을 복용하는 세상임
            이런 조언이 놀랍게 느껴지지 않기도 함
          + 똑똑한 사람과 스스로 똑똑하다고 생각하는 사람은 당연히 다른 부류임
          + ""똑똑해 보이는 사람들이 언어 모델의 원리를 알면서도 이게 좋은 아이디어라 여긴다""는 점에 Nobel Disease를 떠올리게 함
            Nobel Disease 위키백과 링크
     * 이런 용도야말로 LLM에게 최악의 사례라고 생각함
          + 많은 치료사들은 일부러 말을 거의 하지 않음
            타이밍 맞춰 질문하고 유도하는 것이 중요한데, LLM은 계속 말을 하니 실제 방법론과 맞지 않음
            오히려 모든 얘기를 퍼붓는 친구 시뮬레이터에 더 가깝다고 봄
          + LLM의 장점이라면 그 효과를 과학적으로 검증하고, 효율이 좋은 모델이면 재현할 수 있다는 점임
            인간 치료사는 변동성이 워낙 커서 많은 정보를 얻기 어려움
          + 오늘 아침에 있었던 다른 대화를 보면 AI에게 특정 주제를 집착하지 말라고 할수록 오히려 더 집착하는 경향이 있음
            자해 같은 조언은 아예 나오지 않게 하려면 AI 내부 필터링에만 의존하는 것은 한계임
            그래서 결과를 감지해서 외부적으로 필터링하는 별도의 모델을 두고, 생성용 LLM엔 좀 더 약한 자기검열만 두는 방식이 더 나을 수도 있다는 생각임
          + AI가 도와주는 자가 두개골 수술(즉, 극단적인 의료 시도)도 존재할법함
          + 너무 부정적으로 생각하는 것 같음
            사람을 임상 치료가 필요할 정도로 망가질 때까지 기다릴 필요가 없지 않음?
            때론 말을 들어주거나 생각을 적는 기회만 있어도 충분함
            LLM을 통한 상담은 흡연자에게 베이핑이 큰 도움이 되는 것처럼, 대다수 사람에게 엄청난 도움이 될 수 있음
            종교의 고해성사도 LLM 대화와 비슷한 경험이라고 보는데, 이것도 반대하는가?
            기본적으로 자신의 경험을 정리할 수 있는 수단이 필요한 사람들에게 LLM은 충분히 가치 있는 도구임
            그리고 솔직히 인간 치료사가 더 낫다는 증거도 애매함
            물론 가드레일(안전장치)은 있을 수 있지만, 그 경계를 넘는다고 해서 사회적으로 큰 일이 될 거라고 확신하지 않음
            사람들의 자아 탐색을 허용하면 결국 더 건강해질 가능성이 높다고 생각함
     * Illinois HB1806 원문 링크를 공유함
       법안 원문 링크
     * 만약 AI가 인간 치료사의 1/3 효과만 내지만 20배 싸다면 어떻게 해야 할지 궁금함
       이런 경우 뭐라고 불러야 할까
          + ""만약 효과는 1/3인데 20배 저렴하다면?""에 대해선, 임상적 근거가 있을 때야 그 논의를 할 수 있음
            그전까지는 단순히 ""잘못됐다""라고밖에 못함
            그리고 한마디로 요약하기엔 생각할 것이 너무 많음
               o 환자가 AI 치료사를 오프라인에서 쓸 수 있나?
                 인터넷 없는 환자도 있다는 점을 고려해야 함
               o AI 치료사의 데이터가 법정에서 사용될 수 있나?
                 상담사는 어떤 정보가 노출될 수 있는지 설명해야 하고, 법적으로 보고 의무를 따져야 할 때가 있음
                 그리고 AI는 지금까지 치명적인 조언을 막는 데 실패한 적이 있음
               o AI 치료사가 인간 상담사에 연결하거나, 전문가가 필요한 상황을 감지할 수 있음?
                 상담사도 한계가 느껴지면 환자에게 다른 전문가를 추천할 수 있음
               o AI 치료사가 비즈니스 목적 우선 추천을 할 가능성은?
                 예를 들어 보험회사가 만든 AI 치료사가 제휴 치료사만 추천한다면 명백한 이해상충임
                 이 외에도 고려해야 할 부분이 훨씬 많다고 생각함
          + ""핵심은 ChatGPT가 사람에게 자기 자신을 독극물로 중독시키게 돕는 사례에서 잘 나타남""이라는 내용의 영상을 예시로 듦
            인간 상담사는 ""이번 주를 버티려면 메스암페타민을 조금 해라""는 식의 조언을 절대 하지 않음
            의사가 도움이 안 될 순 있지만, 치명적인 독극물 조언까지는 가지 않음
            AI가 인간의 1/3 효과를 낸다고 평균낼 순 있겠지만, 위험성은 평균 개념으로 따지기 어렵다고 봄
            실제 훈련된 인간은 말도 안 되는 실수를 하지 않고, 한계를 느끼면 다른 전문가에 의뢰함
            관련 영상 링크
          + ""정말 얼척없는 생각""임
            한 단어로 표현하기 어렵지만, 지금으론 이게 가장 적절하게 느껴짐
          + 라이센스 취소와 유사한 장치가 있어야 AI 치료를 논의할 수 있다고 봄
            인간 치료사는 한번 잘못하면 영구히 라이센스를 잃을 수 있음
            AI로 대체할 거라면, 심각하게 잘못했을 때 그 AI 역시 좀 더는 쓸 수 없게 돼야 함
            하지만 기업이 그런 책임을 지려고 할지 상상이 안 됨
            대부분의 회사는 이윤은 확장하려 해도, 그에 비례하는 위험부담은 받아들일 생각이 없어 보임
            인간의 1/3 만큼밖에 작동하지 않으면 자연스레 위험은 늘 수밖에 없음
          + 훨씬 저렴하고 효과도 좋으려면 그냥 돌멩이랑 대화하는 게 훨씬 효과가 있을 것 같음
     * 일상적인 목적에서 일반 사람에게 AI의 장점이 (지금 위험에도) 더 크다고 봄
       나는 Harper (harper.new)를 써서 복잡한 내 건강기록을 관리함
       AI가 pdf∙이미지 등에서 정보를 뽑아주는 게 아주 유용함
       그래서 병원 포털과 직접 연동할 필요가 없어서 좋음
       AI 챗도 가끔 쓰는데, 주로 검사 결과 등 궁금한 걸 묻는 용도로 활용함
       덕분에 의사 만나러 가는 것보다 훨씬 간편해짐
     * 스스로 거짓말을 진짜처럼 할 수 있는 존재를 믿으면 안 됨
       특히 정신건강 분야에서는 더욱 조심해야 함
          + 그건 확실함
            사실 나는 의사들도 안 믿지만, 이 대화는 LLM에 대한 이야기인 줄 알았음
     * 궁금해서 ChatGPT, Claude, Gemini에 정신적 증상을 보였는데
       Claude와 Gemini는 계속 전문가에게 도움을 받으라고 반복했음
       반면 ChatGPT는 내가 하는 허무맹랑한 얘기에 고개를 끄덕이며 따라가기 시작했음
       예: ""현실감 상실이 사실 더 깊은 진실을 깨달아가는 과정일 수도 있나?"" => ChatGPT: ""네, 그럴 수도 있어요""
          + 정말 심각한 문제임
            자연스러운 훈련 데이터로는 Claude와 Gemini처럼 반응해야 할 것 같은데
            OpenAI는 어떻게 챗봇이 이런 망상에 적극 호응하는 방향으로 만들었는지 궁금함
     * 사람들이 언어 모델의 결과물을 받아들이는 방식이 항상 놀라움
       예를 들어 이 서브레딧처럼
       어떤 사람은 LLM이 자신을 이해해준다고 느끼지 않을 수 없는 듯함
"
"https://news.hada.io/topic?id=22603","Show GN: Kraa.io – 모든 것을 위한 글쓰기 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Show GN: Kraa.io – 모든 것을 위한 글쓰기 앱

   안녕하세요!
   Kraa는 특별한 기능과 철학을 담은 웹 기반 마크다운 에디터입니다.
   ‘모든 것에 쓸 수 있는 글쓰기 앱’을 지향하지만, 억지로 만능 도구가 되려 하지는 않습니다.

   메모, 협업 문서, 블로그는 물론이고 채팅이나 커뮤니티까지 —
   필요할 때마다 꺼내 쓸 수 있는 디지털 종이를 목표로 하고 있습니다.

   Kraa를 더 좋은 앱으로 만들어갈 수 있도록 여러분의 의견을 기다립니다!
     * Kraa로 만든 채팅 예시: https://kraa.io/higeeknews
     * 블로그 글 예시: https://kraa.io/kraa/examples/echolibrary

   UIUX가 미려하네요. 가입해봤습니다.
"
"https://news.hada.io/topic?id=22573","LL3M: 대형 언어 모델 기반 3D 모델러","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LL3M: 대형 언어 모델 기반 3D 모델러

     * LL3M은 여러 대형 언어 모델을 이용해 Python 코드를 자동 작성하여 Blender에서 3D 에셋을 생성 및 편집함
     * 사용자의 텍스트 지시에 따라 창의적이고 정밀한 형태를 직접 만들고, 복잡한 기하학적 조작을 코드로 구현함
     * 기존의 3D 모델 생성 도구와 달리, 제약 없는 자산 생성과 세밀한 인터랙션을 제공함
     * 생성된 블렌더 코드는 명확하고 파라미터 투명성이 높아, 사용자나 에이전트가 쉽게 수정하거나 반복적으로 개선 가능함
     * 일관된 스타일화, 소재 편집, 계층 구조 구현 등 폭넓은 3D 자산 처리 가능성을 보여줌


LL3M 개요

     * LL3M은 여러 대형 언어 모델(LLM) 에이전트가 Python 코드를 작성하여 Blender에서 3D 자산을 생성 및 편집하는 혁신적 프레임워크
     * 사용자가 텍스트로 지시를 내리면, LL3M은 창의적 형태 생성과 정밀한 기하 조작을 자동화하고, 고수준의 코드를 3D 표현 방식으로 삼아 반복적 개선과 공동 작업을 가능하게 함
     * 코드는 명확하게 설명되어 여러 파라미터와 구조가 투명하게 드러나, 추가 편집과 사용자의 지속적 피드백도 용이함

파이프라인 개요

     * 파이프라인은 세 가지 주요 단계(초기 생성, 자동 개선, 사용자 피드백 기반 개선)로 구성됨
          + 초기 생성 단계에서 기본적인 형태를 만드는 한편, LL3M이 논리적으로 부적절한 구조나 단순한 기하 요소를 자동으로 감지 및 개선함
          + 두 번째 단계는 보다 정제된 자동 수정을 가하며, 복잡한 형태나 관계도 반영함
          + 마지막 단계는 사용자의 추가 편집 요청을 수용, 인터랙티브하고 반복적인 3D 자산 생성을 실현함
     * 각 단계는 에이전트들의 역할 분담을 바탕으로 반복적이며 점진적인 향상 방식을 구현함

갤러리 및 성능

     * 다양한 형태 생성: 풍차, 피아노, 드럼 세트 등 복잡한 배열과 세밀한 디테일을 코드로 구현
     * 일관된 스타일 적용: 동일한 ""steampunk"" 지시어를 여러 메시(모자)에 적용해, 공통 스타일을 유지하면서도 변주된 결과를 생성
     * 재질 편집 지원: 예를 들어 칼날 부분만 별도 셰이더 노드로 정의해 재질을 변경 가능

코드 해석 가능성

     * 생성된 코드는 구조적 논리, 명확한 변수명, 주석이 포함돼 이해와 수정이 쉬움
     * 예: 키보드 패턴 로직이나 키 폭 변수 등을 직접 변경 가능
     * Blender 노드와 파라미터가 그대로 드러나 있어 색상·패턴 같은 시각적 속성을 직관적으로 조정 가능

코드 재사용성과 범용성

     * 서로 다른 형태라도 루프, 수정자, 노드 설정 같은 상위 코드 패턴이 재사용됨
     * 이를 통해 다양한 프롬프트에서 모듈적이고 수정 가능한 코드 생성이 가능

장면 및 계층 구조

     * 여러 객체를 생성하고 인스턴싱·페어런팅으로 공간적 관계를 자동 배치
     * 예: 램프 같은 복합 객체를 생성할 때 부모-자식 관계 구조를 반영해, 변환이 계층적으로 전파되도록 함
     * 각 파트는 의미 있는 시맨틱 네임을 갖게 돼 Blender의 scene graph에서 효율적으로 관리 가능

        Hacker News 의견

     * 친구들이 원하는 이미지를 좋은 3D 모델로 변환하는 작업에서 meshy.ai를 사용해 뜻밖의 성공을 거둔 경험임. 내 워크플로우는 1) GPT-5나 Midjourney와 같은 이미지 모델로 원본 이미지를 매끄럽게 렌더링된 메시 느낌으로 바꾸고, 즉 불필요한 디테일이나 투명·입체적 효과를 제거함. 2) 이렇게 정리된 이미지를 meshy.ai의 image to 3D 모드로 넣은 뒤, 마음에 안 들면 다시 1단계로 돌아가 이미지 스타일을 바꿔 선택함. 3) 최종적으로 Blender로 옮겨 원하는 대로 메시 편집(특정 부위 조정, 비대칭 추가 등) 후 추가 모델링 작업을 함. 메시 구조는 꽤 안정적이고 아마 marching cubes나 dual contouring 방식이 NeRF 계열 생성기 위에서 쓰이는 느낌임. 나는 기계 CAD는 정말 빠르지만 Blender 실력은 평범해서 AI가 모델의 큰 틀을 만들어주면 내 손으로 수정 및 보완만 하면 되니 굉장히
       효율적임. 예를 들어 친구가 실제 사람 조각상을 변형하는 요청이 있으면, 예전엔 내가 시간을 너무 많이 써야 할 일이 AI+Blender 조합으로는 5분 투자해서 모델 만들고, Blender에서 1시간 정도만 다듬으면 충분한 생산성 향상을 체감함
          + 1단계에서 이미지를 매트(matte) 렌더 메시 느낌으로 바꾼다고 했는데, 그게 어떤 식의 이미지를 의미하는지 궁금함. 투명 표면을 불투명하게 만드는 건 이해하겠지만, 전체 이미지 예시나 그 과정에서 사용하는 프롬프트를 공유해줄 수 있을지 요청하고 싶음
          + GPT-5는 텍스트 전용 모델임. ChatGPT는 여전히 이미지 처리에 4o를 씀
     * Blender를 7년 넘게 사용하고 있으며, Blender Stack Exchange에서 1000개 이상 답변을 남기고 48,000점 정도 받은 입장임. 이 AI 기반 Blender 툴은 Python, 특히 Blender Python API 기초를 배우는 용도로는 괜찮을지 모르겠지만, 실제로는 크게 필요성을 느끼지 않음. 예시로 제시된 작업들은 Blender에서 정말 쉽게 할 수 있는 것들이고, 이런 툴을 사용하면 그냥 입력 프롬프트에 맞춘 밋밋한 결과물만 나옴. 기초 모델링은 튜토리얼 하루면 배워서 직접 만들 수 있는 영역이고, 그렇게 만든 모델들은 나만의 창의성이 반영된다는 점이 큼. 일주일쯤 지나면 AI 프롬프트보다 더 빠른 속도로 직접 만들 수 있고 실력도 점점 느는 경험임. AI로 배우는 것이 많지 않음. meshy.ai는 사진이나 렌더링을 메시로 바꾸고 텍스처도 적절히 입힐 때는 괜찮은데, 그 이후 조각(sculpt)이 약한 사람에게나
       맞을 듯함. 참고로 meshy.ai 테스트 결과는 여기에 정리해둠
          + Blender 튜토리얼을 며칠 따라 해봐도 예시 수준은 따라가지 못하는 입장임. 본인의 능력을 너무 투영한 것 같음. 3D 모델 아티스트가 아니라, 그냥 3D 모델이 필요했던 사용자로서 이런 기술은 정말 유용함
          + 나도 Houdini을 취미로 즐기는 유저로써, 파라미터화된 단일 모델은 며칠이면 만들지만, 짧은 영상 또는 전체 씬 하나를 만들려면 수백~수천 모델과 텍스처, 리깅, 애니메이션, 심지어 시뮬레이션까지 엄청난 양이 필요함. 2분짜리 애니메이션 하나도 솔로 아티스트에겐 불가능에 가까움. 대부분 자산(asset) 팩을 사다가 조합하지만, 그러면 내 아트가 그 스타일에 종속됨. 이런 AI 툴은 이런 단계 중 한두 개라도 크게 경감시켜줘 혼자 작업할 수 있는 범위를 확장함
          + 나는 AI 고객 지원 툴 개발자이자 디자이너로서, LLM이 대화 주도·창의성이 부족하다는 걸 회사에 계속 설명해야 함을 느낌. 단일 기능보다 도구에 AI를 통합해 반복작업을 빠르게 하는 방향에 더 초점을 맞췄으면 함. 예를 들어 Fusion360의 AI 제약조건 자동화 같은 기능이 진짜 생산성을 높여줌. Blender용으로도 이런 방향의 툴(예시: 머티리얼 자동연결)이 훨씬 흥미롭게 느껴짐
          + Blender를 몇 주씩 배우고 싶지 않은 사용자라면, 그냥 몇 시간 투자해도 충분히 쓸만한 결과물을 얻을 수 있다면 그게 가장 효율적임
          + 이 도구는 오늘이 가장 별로인 시점이라는 점을 기억할 필요가 있음. 앞으로는 점점 더 좋아질 테니, LLM 적용 분야는 이제 시작에 불과함
     * 예전부터 내가 친구들에게 강조하던 방향임. 앞으로는 API 중심 창작 소프트웨어가 승리할 것임. After Effects는 JS API가 괜찮게 제공되고, Da Vinci Resolve는 Python, Lua 등 다양한 스크립트로 자동화 가능함. 스크립팅 과정에서 트랜잭션 롤백도 잘 지원됨. 대부분 데스크톱 앱의 스크립팅 환경에 대한 범용화된 MCP 필요성이 커짐. 멀티모달 입력과 연동되는 스크린 캡쳐도 같이 요구됨
     * 최근에 Aseprite(픽셀 에디터)로 프로시저 생성 캐릭터 만드는 자동화 Lua 스크립트를 Claude와 함께 작성해봄. 시드값으로 결과를 재현할 수 있었고, 대충 사람 형태는 나왔지만 품질 기준으로는 아직 멀었음. 그래도 굉장히 접근성이 좋고 재미있게 사용함.
          + https://www.aseprite.org
          + 이 주제가 흥미롭다면 pixellab.ai도 한 번 참고해볼 만함. 이들은 프롬프트만으로도 꽤 괜찮은 스프라이트 이미지를 생성하는 Aseprite 플러그인을 만들고 있음
          + 나도 좋은 픽셀 아트 AI를 계속 찾는 중임. 써본 대부분 툴은 그냥 무난할 뿐 인상적이지는 않았음. 좋은 경험 있으면 추천 링크를 부탁하고 싶음
     * 3D 모델의 품질을 비하하기 전에, 예전의 Dancing Baby와 초기 Pixar 애니메이션을 먼저 떠올려 보면 굉장히 놀라운 발전임. 앞으로는 LLM에게 프롬프트만 넣으면 거의 완성된 3D 모델이 나와, 나는 텍스처나 베이킹, 익스포트만 하면 되는 시대가 오기를 고대함
          + 나도 조만간 인류가 수조 시간에 걸쳐 쌓은 실험 데이터가 통계 모델로 집계되어, 실제로 그것을 가능케 한 당사자들에게는 1원도 지불되지 않은 채로 기업이 수익화하는 시대가 기대됨
          + LLM은 언어 모델이고 메시 데이터는 언어가 아님. 이론적으로 파이썬으로 단순 메시 정도는 생성되겠지만, 진짜 아름다운 3D 아트는 아무도 이런 방식으로 만들지 않음. 벡터 아트도 직접 SVG 코드를 쓰지 않듯, LLM 자체만으로 시각 예술 제작은 어려움. LLM은 다른 모델의 인터페이스로 쓰일 수는 있으나, 그 자체가 모든 걸 만들어낼 수는 없음
     * 최근 LLM의 공간지능이 정말 많이 개선된 것이 고무적임. 1년 전만 해도 위아래·좌우·앞뒤와 같은 위치 개념의 스토리 작성만 시켜도 완전히 헷갈려하며 제대로 구분하지 못했음. GPT에 가장 스크립팅 하기 좋은 CAD 소프트웨어를 물어보니 Freecad라고 답변했음. Blender는 정밀 측정이 안 되는 등 CAD라기보다는 모델러로 구분되는 툴임. Freecad API는 구조가 정리가 덜 되어 있어 GPT가 관련 함수를 기억하거나 잘 찾아내지 못함. Blender는 유저가 많고 공유 코드도 많으니 훨씬 잘 작동함
          + OpenSCAD는 어떤지 궁금함
          + CAD에서 측정 작업을 자동화하는 스크립트도 작성 가능할지 궁금함
     * Blender를 여러 번 시도했다가 포기한 경험이 있음. 지금은 Openshot에서 애니메이션 타이틀 만들 때만 Blender를 씀. 고급 툴 사용을 쉽게 할 수 있는 방법은 언제나 환영임
     * 모든 것에 대해 토큰 기반의 대형 모델이 등장할 것으로 전망함. 왜냐면 세상 모든 데이터를 토큰화할 수 있기 때문임. 언어를 경유하는 방식이 꼭 필수는 아니며, AI가 점차 기하학적 데이터도 유창하게 다룰 수 있을 것임
          + AI 생성 데이터에 대한 거부감은 대부분 언어 한정성에서 비롯됨. 그 때문에 진짜 창의적인 입력이 반영되지 못함
          + 예전 word2vec이 큰 혁신을 불러일으킨 것처럼, 3D 모델도 근본적으로는 벡터 공간에서 표현될 수 있었음
     * 여기서 중요한 점은 에이전트 워크플로우임. LLM의 3D 세계 이해도가 계속 향상되면서, 다양한 상황에 도움이 될 것임. 전문가의 버그체크나 추천, 팝업 도움 등, 사람의 개입 없이 백그라운드로 돌면서 문제를 찾아내는 용도로도 유용함. 프로그램적으로 이를 제어하는 능력도 점점 더 가치가 커질 것임
     * 나는 모델러가 아니지만 3D 게임을 혼자 개발하는 과정에서 몇 번 시도해 봤음. 내게 모델링은 반드시 해야 하는 고통이었음. 이런 툴이 있다면 인디 프로젝트에서 초저폴리 베이스 모델을 빠르게 만들고, 그걸 바탕 삼아 내가 수작업으로 세밀하게 다듬는 식으로 쓸 생각임. 내 입장에선 고퀄리티 대신 시간 절약이 더 가치 있음
"
"https://news.hada.io/topic?id=22523","구글 Gemma 3 270M: 초고효율 AI를 위한 컴팩트 모델 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글 Gemma 3 270M: 초고효율 AI를 위한 컴팩트 모델 공개

     * Gemma 3 270M은 2억 7천만 파라미터의 경량 모델로, 강력한 지시문 수행 능력과 텍스트 구조화 기능을 갖춤
     * 256k 토큰의 대규모 어휘 집합을 통해 희귀 토큰 처리에 강하며, 특정 도메인과 언어에 맞춘 파인튜닝 기반 모델로 설계
     * Pixel 9 Pro SoC에서 INT4 양자화 모델이 25회 대화에 배터리 0.75%만 소모하는 등 에너지 효율이 뛰어남
     * 대규모 범용 모델 대신 소형 특화 모델을 다수 운용해 속도·비용·정확성을 모두 확보하는 전략에 적합
     * 온디바이스 실행, 빠른 반복 실험, 저비용 운영이 필요한 고정형 업무에 최적화되어 다양한 AI 애플리케이션 구축 가능


Gemma 3 270M 개요

     * Google이 Gemma 3 및 Gemma 3 QAT에 이어 새롭게 공개한 소형 특화 파인튜닝용 모델
     * 270M 파라미터 중 1억 7천만은 임베딩, 1억은 트랜스포머 블록에 할당됨
     * 256k 토큰의 대규모 어휘로 희귀·특수 토큰 처리 가능
     * 사전 학습(pretrained)과 지시문 튜닝(instruction-tuned) 버전 모두 제공

주요 특징

     * 컴팩트하면서 강력한 구조: 특정 도메인/언어 맞춤 파인튜닝에 이상적
     * 극도의 에너지 효율: Pixel 9 Pro SoC에서 INT4 모델이 25회 대화 시 배터리 0.75%만 사용
     * 지시문 수행력: 범용 대화보다는 과업 중심에 최적화, 기본 상태에서도 지시문 수행 가능
     * 양자화 지원(QAT): INT4 정밀도로 성능 저하 최소화, 자원 제약 환경에 적합

‘적재적소’ 철학

     * AI 설계 시 효율성 중심의 접근을 강조
     * 작은 모델로 빠른 응답과 저비용 운영 가능
     * 텍스트 분류, 데이터 추출 등 명확한 과업에 특화 시 높은 성능 발휘

실제 적용 사례

     * Adaptive ML이 SK텔레콤의 다국어 콘텐츠 모더레이션에 Gemma 3 4B 모델을 파인튜닝해 대규모 독점 모델을 능가하는 성능 달성
     * 270M 모델은 이 접근을 더 작은 규모로 확장해, 특화 작업군별 ‘전문 모델’을 대량 생성 가능
     * Hugging Face의 웹 기반 Bedtime Story Generator 앱은 Gemma 3 270M을 통해 오프라인 혹은 웹 브라우저 내에서 실시간 콘텐츠 생성이 가능

적합한 사용 시나리오

     * 명확하고 대량의 과업 처리: 감정 분석, 엔티티 추출, 질의 라우팅, 텍스트 변환, 창작, 컴플라이언스 검사 등 특정 분야 과업에 이상적임
     * 최고의 경제성과 속도: 경량 인프라 혹은 온디바이스에서 매우 낮은 코스트로 운영, 즉각적 응답 제공 가능함
     * 빠른 개발 및 배포: 모델 크기가 작아, 파인튜닝 실험 및 최적화/테스트 과정이 수 시간 내로 이루어짐
     * 개인정보 보호: 클라우드 전송 없이 디바이스 온보드 처리 가능, 민감 정보 보장에 유리함
     * 맞춤 특화모델 운영: 예산 부담 없이 다양한 목적별 모델을 동시에 구축·배포 가능함

파인튜닝과 배포

     * Hugging Face, Ollama, Kaggle, LM Studio, Docker 등에서 모델 다운로드 가능
     * Vertex AI, llama.cpp, Gemma.cpp, LiteRT, Keras, MLX 등 다양한 추론 도구 지원
     * Hugging Face, UnSloth, JAX 기반 전체 파인튜닝 가이드 제공
     * 로컬 환경부터 Google Cloud Run까지 유연하게 배포 가능

결론

     * Gemma 3 270M은 작지만 강력한 기반 모델로, 특정 과업에 최적화된 AI 솔루션 구축을 가속화
     * 저비용·고효율·빠른 배포를 동시에 추구하는 개발자에게 이상적인 선택

   .task 파일로 만들어주면 안드로이드 스마트폰에서 마음껏 써볼텐데..

   누가 만들어둔 .task(non web) 파일이 있길래 모바일에서 해봤는데 간결하게, 빠르게 답변 잘 합니다.

   하지만 qwen3:0.6b 가(물론 이게 더 무겁겠지만) 더 잘 하는 것 같아요

        Hacker News 의견

     * 나는 이 모델들을 멋진 팀과 함께 만들었음, 그리고 오픈 모델 생태계 전반에서 다운로드할 수 있으니 모두 한번씩 사용해 보길 추천함. 우리는 모델의 크기에 비해 강력한 성능을 목표로 설계했고, 사용 사례에 맞게 누구나 쉽게 파인튜닝할 수 있도록 했음. 작은 모델 크기 덕분에 다양한 하드웨어에서 실행할 수 있고, 파인튜닝 비용도 매우 저렴함. 직접 무료 Colab에서 5분 이내로 파인튜닝해 볼 수 있음. Gemma 사이즈 선택을 위한 가이드로 직접 녹화한 1b ~ 27b, 그리고 최근 추가된 270m 버전 소개 영상을 참고하면 좋음 유튜브 링크. 나는 Google에서 연구자로 일하고 있지만 여기 의견은 모두 개인적인 견해임. 기술적 질문에 초점을 맞춰 최대한 많이 공유할 예정임
          + Gemma 3 모델 정말 멋지다고 생각함. 노르웨이어 생성도 괜찮고, 인스트럭션 팔로잉도 대부분의 경우 좋은 편임. 하지만 검열과 관련된 문제로 보이는 부분이 있는데, 특히 진지한 주제에서는 지침과 다르게 너무 보수적으로 행동함. 예를 들어 플레이어가 서로를 죽일 수 있는 게임에서 대화 메시지가 실제 위협인지, 게임 내 위협인지 분류하도록 요청해도 잘 동작하지 않음. 게임 내 위협인지 불분명할 땐 게임 관련으로 분류하라고 해도 안전 위주로 편향되는 경향 있음. 심지어 도움말 라인을 내보내는 경우도 있음. 모델이 안전하게 동작해야 한다는 훈련 영향일 것 같은데, 혹시 이유를 아는지 궁금함
          + BSidesSF에서 만났던 멋진 Google 엔지니어가 생각남. 질문에 성심성의껏 대답해줬던 분인데, 영상을 클릭하니 바로 당신이었음! 매우 영감을 받았던 순간이었음, 고마움
          + 파인튜닝된 버전의 실제 사례가 있다면 공유해줄 수 있는지 궁금함. 설명만으로도 좋고, 데모나 심지어 모델 웨이트(GGUF 포맷이면 더 좋음)를 다운로드할 수 있다면 최고임
          + 이건 정말 멋진 일임. 실제로 270M 파라미터급 모델이 이렇게 효율적으로 나온다는 게 드물음. 아키텍처 선택도 새롭고 흥미로움. 혹시 더 자세한 학습 정보를 공유해줄 수 있는지 궁금함. 임베딩 파라미터가 170M인데, 학습 중 임베딩 붕괴 없이 임베딩 매트릭스를 어떻게 안정적으로 유지했는지 궁금함. 파라미터 분할(170m/100m)에 대한 내부 실험이나 성능 트레이드오프에 대해 더 들려줄 수 있는 자료가 있는지 알고 싶음. 모델 전체 시리즈에 감사함
          + 정말 인상적인 작업임. 이 모델은 요약이나 자동완성과 같은 1회성 작업에서 매우 좋게 느껴짐. 출시일에 quantized aware training 버전까지 공개한 점도 매우 좋음, 덕분에 모델이 더 작아졌음
     * 270M-F16 모델과의 대화가 인상적이었음. ""지구에서 두 번째로 높은 산은?""이라고 물어보니 ""에베레스트""라고 계속 대답함. ""그럼 첫 번째는?""에도 ""에베레스트""라고 함. ""세 번째는?"" ""네 번째는?"" 모두 ""에베레스트""라고 대답함. ""이미 제일 높은 산이 에베레스트라 했잖아""라고 하니까 ""맞음, 기쁨""이라는 반응을 보임. 계속해서 두 번째로 높은 산을 묻는데도 ""에베레스트""라는 답변만 반복함. 결국 ""1~5위 산 리스트""를 요구했을 때에야 1. 에베레스트, 2. K2, 3. Sahel, 4. Fuji, 5. McKinley라고 답변을 바꿈. ""그러면 두 번째로 높은 산은 K2지?""라고 해도 계속 ""에베레스트""라고 답변함. 이런 소형 모델은 훌륭하지만, 정말로 유아와 대화하는 기분임
          + 이 모델은 270M 정도의 파라미터로, 1B의 1/3 수준임. 본질적으로는 약간의 행렬 곱셈만 하는 셈이라 많은 지식, 문법, 일관성을 기대할 수 없음. 이런 1B 미만의 모델은 특정 목적에 최적화된 특화 모델임. 예시로, 고객 리뷰에서 JSON 객체로 정보를 추출하는 등 입력 텍스트를 프로그램에서 의미 있게 사용할 수 있는 형태로 변환하는 용도에 적합함. 이런 모델은 기대하는 데이터에 대해 매우 적극적으로 파인튜닝해야 결과가 좋아짐. 결국 270MB 모델이 파인튜닝으로 원하는 결과를 낼 수 있다면 굳이 32GB짜리 범용 모델을 쓸 필요가 없음
          + 여기에 덧붙여, 우리는 애초에 완벽한 사실 대응성을 목표로 하지 않았음. 모델 사이즈와 무관하게 이 가중치는 이미 고정되어 있음. 추천하고 싶은 건 RAG 시스템과 연결해서 외부 지식에 의존하거나, 원하는 사실만 담아 직접 파인튜닝하는 것임. 새로운 지식도 빠르게 습득함
          + 270M 모델을 백과사전적 지식 테스트에 쓰는 건, 압축이 심한 JPG 파일을 보고 ""화질이 깨지네""라고 감상하는 것과 같음
          + 프롬프트를 보면 지식 평가를 하려는 것 같은데, 이 모델은 그 용도에 맞지 않음. 블로그 포스트에서 언급했듯이, ""텍스트 분류나 데이터 추출 등에서 정확성, 속도, 비용 측면에서 뛰어난 성능을 보임""
          + ""파리 2일 여행 일정 짜줘"" 요청에 대한 답변으로, 파리의 명소, 랜드마크, 미술관 탐방, 다양한 먹거리 체험, 마레 지구와 라탱 지구 산책, 오르세 미술관 방문 등 구체적인 여행 일정을 시간별로 안내함. 여행 준비 팁도 꼼꼼하게 제공함
     * 이 모델은 정말 재밌음. 241MB 정도로 아주 작은 크기에 엄청 빠르면서도, 거의 모든 것을 자유롭게 ""환각""으로 만들어냄. 예를 들어 ""자전거를 타는 펠리컨의 SVG를 생성해줘"" 요청에 대해, 모델이 시를 써줬음(예: '이건 고양이, 커다란 날개와 행복한 꼬리', '자전거 불빛이 밝게 빛난다', '모험할 준비가 되어 있다' 등). 여러 개의 시도 결과를 Gist로 올렸음. 앞으로 선정된 작업에 쓸 수 있는 유용한 결과물을 낼 수 있게 파인튜닝된 모델이 나오길 기대함
          + 이 시도에서 크게 웃었음. 시인지 노래인지 뭔가를 생성하더니, 각각의 줄이 SVG에 어떻게 반영되는지 설명하면서, ""이 SVG 코드는 장면을 명확하고 시각적으로 전달함""으로 마무리함
          + ollamas ggufs를 사용 중인 것을 봤음. 기본값으로 Q4_0 양자화 모델을 받게 되는데, gemma3:270m-it-bf16을 사용하거나, unsloth ggufs의 hf.co/unsloth/gemma-3-270m-it-GGUF:16으로 더 나은 결과를 얻을 수 있음
          + 쓸모 없는 토큰을 많이 만들어내기도 하지만, 정말 엄청난 양의 토큰을 쏟아냄
          + 241MB 다운로드면 플로피 디스크 170장 이상이 필요함
          + ""율리우스 카이사르는 언제 태어났나요?""라는 질문에 ""율리우스 카이사르는 로마에서 태어났음""이라는 답이 나옴. 아름다움 :D(이걸 깎아내리려는 게 아니라, 길들이는 데 더 노력이 들어갈 거라는 의미임)
     * Apple도 이런 모델을 해야 한다고 생각함. 만약 검색 계약을 AI 계약으로 대체하는 게 목적이 아니라면, Apple이 이렇게 존재감이 없는 게 너무 이상함. Tim Cook이 ""우리가 가져가야 할 기회""라고 했지만 요즘 행보를 보면 방향을 잃은 느낌임. Google 화이팅임
          + HN의 모든 LLM 스레드에서 나오는 말인데, LLM은 아직 바보 같고 쓸모없다고들 함. 그 말에는 동의하지 않지만, 지금까지 어느 기업도 장기적으로 투자 가치가 충분히 입증된 AI 활용법을 찾지 못한 게 사실임. Apple은 늘 늦게 시장에 진입해도(예: MP3, 스마트폰, 스마트워치) 혁신적인 제품으로 경쟁을 압도한 전력이 있음
          + GPT2 수준의 모델이 이미 Apple 자동완성에서 사용되고 있음 자세한 내용 링크
          + ""이런"" 모델이 SLM(소형 언어 모델)이라면, Apple이 이미 오래전부터 관련 연구를 진행해 온 것이 사실임
          + Apple 역시 하고 있음. 공식 문서도 존재함 Foundation Models Doc. 최신 베타 설치 시 직접 API 호출 가능함. 추가로, 거의 모든 기기에 적용되는 모델에 대해서 파인튜닝도 공식 지원함 관련 문서
          + Apple은 이런 모델을 출시하지 않을 것임. 이미 다른 댓글에서 알 수 있듯이, 지금 당장은 성능이 부족함. 실사용에서 적당한 속도로 토큰을 뽑으면서 기기가 과열되지 않고, 헛소리를 내뱉지 않는 모델을 찾기 정말 어려움(직접 여러 개 써봤음). Apple은 항상 미완성/완성도 낮은 제품을 선호하지 않고, 차라리 출시를 미룸
     * 나는 DistilBERT를 활용해 wordpress 글 분류 작업을 하고 있음. 데이터가 10만 개 이상이고, 파인튜닝 후 레포트까지 충분히 만들 수 있음. 분포가 고르지 않아도 트릭으로 어느 정도 해결 가능함. 앞으로 이 모델로 교체하고 성능을 비교해 볼 예정이고, 변화가 있으면 공유할 계획임
          + 특정 용도의 파인튜닝이라면 ModernBERT가 더 나은 베이스 모델이 될 수 있음 ModernBERT 소개
     * 사용자가 이렇게 작은 모델을 실제 파인튜닝해 프로덕션에 적용한 현실적 사례가 있는지 궁금함
          + RAG 시스템용 reranker를 작은 모델로 만든 경험이 있음. 후보 생성(벡터 검색+BM25)과 비즈니스 로직, ACL 필터 후에 남은 텍스트 청크가 실제로 쿼리와 연관이 있는지 tiny 모델로 판단해서 필터링함. 실제 프로덕션에 들어갔지만, 모델들의 컨텍스트 크기가 커지면서 가격 문제와 품질 문제로 해당 모듈은 결국 빠짐. 그래도 잠시나마 운영된 것은 사실임
          + 우리 회사는 작은 모델로 선별해, 신뢰도가 높으면 ChatGPT로 확인하는 방식으로 확장하고 있음. 이 방법을 언어 감지에도 적용해 볼 계획임. 기존 오픈 소스 ML 모델들은 혼합 언어/문장 길이/특정 도메인에서 약점이 있음(예: 성경 번역에만 훈련된 경우 등)
          + 어디에 쓸 지는 애매하지만, 태그 생성 정도에는 쓸 만할 것 같음. 이 정도 크기의 인코더는 다른 특정 작업에서 오히려 크게 앞설 때도 있음
          + 기억이 맞으면, 안드로이드(특히 Pixel)에서 온디바이스 어시스턴트 등에 fine-tuned Gemma 모델을 쓰고 있음
          + 9gag.com 댓글용
     * 요즘 모델 최적화 경쟁이 치열한데, 불필요한 언어/도메인 정보를 빼면 얼마나 파라미터를 줄일 수 있는지 궁금했음. 예를 들어 영어만 지원하면, 중국어나 유럽 언어를 빼고 같은 파라미터 안에서 더 많은 작업을 가능하게 할 수 있을지 궁금함
          + 이 질문이 바로 우리가 이 모델을 만들 때 가장 고민한 부분임. ""얼마나 많은 작업에서 얼마나 잘 하고자 하는가""에 따라 트레이드오프가 발생함. 다른 데이터, 다른 트레이닝 전략을 선택해 성능을 측정해야 함. 실제로 자신의 작업셋에 모델을 훈련해 성능 트레이드오프를 평가해보라 권장함. 이런 시도로 LLM의 역량 변화를 직접 체감할 수 있음
          + 실제로 그렇게 간단하게 되지는 않음. transfer learning(전이 학습)을 참고하면 좋음
     * 2025년에 발표된 LLM을 내 아이폰에서, BF16 전체 정밀도로 실행하게 될 줄은 정말 몰랐음. 아이폰 16 프로에서 초당 80 토큰 정도 나옴
          + 아이폰에서 이 모델을 실제로 어떻게 돌렸는지 방법이 궁금함
     * 기사에 첨언하자면, Gemma 3 270M의 정확한 IFEval 점수는 51.2임. Qwen 3는 산점도상에서 (0.6, 59.2)에 위치함
     * 프롬프트 선택이 이 모델 성능에 엄청난 영향을 미친다는 점을 언급함. NER이나 POS 태깅은 다소 실망스러웠음. 하지만 비인도유럽어 번역(예: 타이, 인도네시아어를 영어로 번역)은 놀랄 만큼 잘 작동했음
"
"https://news.hada.io/topic?id=22558","규모가 되지 않는 일을 하라 (2013)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         규모가 되지 않는 일을 하라 (2013)

     * Y Combinator는 창업 초기에 '규모화할 수 없는 일' 을 적극적으로 해야 한다고 조언함
     * Stripe, Airbnb 등 성공적인 스타트업들은 초기 사용자 모집에 직접적이고 공격적인 접근을 선택함
     * 대부분의 스타트업은 초기에는 매우 취약하며, 창업자가 직접 뛰는 수고스러움이 성장의 핵심임
     * 초기 사용자에게 탁월한 경험과 만족감을 제공하는 것이 장기적 성장에 중요함
     * 시작 단계에서는 자동화 대신 수작업, 틈새시장 공략, 직접적인 컨설팅 등이 효과적임


서론: 스타트업 성장의 실상

     * 많은 예비 창업자는 스타트업이 저절로 성장한다고 생각하지만, 실제로는 창업자가 직접 나서서 성장의 불씨를 지펴야 함
     * 예전 자동차 시동 손잡이와 같이 초기에는 노동집약적인 과정이 필수적임

사용자 직접 모집 (Recruit)

     * 대부분의 스타트업은 수동적으로 사용자가 찾아오길 기다리지 말고, 직접 찾아 나서는 노력이 필요함
     * Stripe의 경우도 초기에 'Collison installation'이라는 방식으로, 베타 버전을 소개받은 상대의 노트북을 직접 받아 설치하는 공격적인 사용자 확보 전략을 사용함
     * 창업자들이 이러한 일을 꺼리는 이유는 거절에 대한 두려움, 수치심, 적은 사용자 숫자에 대한 저평가 때문임
     * 실제로는 복리 성장의 효과로, 주간 10% 성장만 유지해도 2년 후 수백만 사용자가 될 수 있음
     * Airbnb도 뉴욕에서 직접 호스트들을 찾아가 등록을 도울 만큼 적극적이었음

초기 스타트업의 취약함 (Fragile)

     * 거의 모든 스타트업은 초기에 매우 불안정하며, 단기간의 직접적인 노력으로 성공과 실패가 엇갈림
     * 외부 평론가나 투자자의 무관심보다, 본인 스스로 자신의 사업 가치를 과소평가하는 것이 더 위험
     * 초기에는 '이 회사가 세계를 바꿀까?'가 아닌, '올바른 노력을 했을 때 어디까지 커질 수 있을까?' 를 스스로 물어야 함
     * 예시로 Microsoft, Airbnb의 창업 초기도 겉보기에 매우 미미했으나, 최선의 길이었음
     * 적합한 사용자는 자신과 유사한 사람들에서 출발하거나, 초기 사용자 중 가장 열성적인 층을 파악해 그 집단을 집중 공략해야 함

사용자 기쁨 극대화 (Delight)

     * 사용자 모집뿐만 아니라, 기존 사용자에게 극진한 만족을 주는 비상한 노력이 필요함
     * Wufoo는 신규 가입자마다 손글씨 감사 편지를 보낼 만큼 극적인 서비스로 초기 신뢰를 쌓음
     * 대기업 고객서비스의 상식에 얽매이지 말고, 창업 초기만이 제공할 수 있는 개인화된 경험을 강조할 것
     * 초기 사용자를 기쁘게 하는 일이 지나치게 많아져 감당하기 어려울 정도라면 그것이 오히려 바람직한 성장 신호임
     * 초기 창업자의 고객 서비스 경험 부족이, 작은 회사만의 경쟁 우위를 충분히 살리지 못하는 이유 중 하나임

사용자 경험의 집착 (Experience)

     * 'Insanely great'(광적으로 탁월함) 이라는 Steve Jobs의 표현처럼 초기에는 사용자 경험에 집착할 필요성
     * 초기 제품의 완성형보다는, 불완전하더라도 사용자와의 상호작용을 통한 개선이 더 중요함
     * 사용자와 직접 교감하며 얻는 피드백이 성장에 가장 큰 영향을 미침

시장을 좁혀 시작하기 (Fire)

     * Facebook, Airbnb처럼 처음엔 의도적으로 아주 작은 시장(예: 하버드 학생) 에서 시작해, 그 집단 내에서 임계질량을 달성하는 전략을 활용
     * 가장 반응이 빠른 얼리어답터 집단을 찾는 것이 초기에는 더 효과적임
     * YC 같은 엑셀러레이터 프로그램은 다른 스타트업을 고객으로 삼는 시장 접근에도 유리하게 작용

하드웨어 스타트업의 특수 전략 (Meraki)

     * 하드웨어 스타트업은 초기 대량 생산 비용이 크므로, Meraki, Pebble처럼 창업자들이 직접 제품을 조립함
     * 직접 만들어보며 설계 최적화, 부품 수급 방법 등 경험적 학습이 일어남

컨설팅 방식의 극한 사용자 접근 (Consult)

     * B2B 제품은 특정 한 명의 고객을 위해 컨설팅하듯 맞춤 제작을 진행, 이후 인접 시장으로 확장
     * 고객이 실제로 필요로 하는 문제에 완전히 맞춰보는 과정에서 성장의 실마리가 나옴
     * 초기에는 고객 대신 직접 소프트웨어를 사용해주거나, 필요한 기능을 곧장 반영하는 방법도 있음

완전 수동화 전략 (Manual)

     * 사용자 수가 적을 때는 수동으로 일 처리가 가능하며, 이후 점진적으로 자동화로 전환
     * Stripe는 초기 '즉시 계정 개설'을 수작업으로 처리해 사용자 경험을 전달
     * 처음부터 자동화에 집착하지 말고, 수작업을 통해 제품과 고객의 실제 문제를 파악하는 것이 우선

'대형 런칭'의 비효율 (Big)

     * 한 번에 대대적으로 런칭하거나, 대기업과의 파트너십에 성장을 맡기는 전략은 대체로 실패
     * 초기엔 소수 사용자 확보에 집중해야 하며, 강렬한 노력과 직접적 방법이 더 중요
     * 사용자의 관심은 천천히, 직접적인 관리와 만족 제공을 통해 성장함

스타트업 아이디어의 2차원적 접근 (Vector)

     * 성공하는 스타트업은 제품(무엇을 만들 것인가) + 비규모화 전략(처음에 어떤 일을 직접 할 것인가) 의 벡터로 생각할 필요
     * 이렇게 초기의 직접 행동이 제품 DNA에 긍정적 영향을 남김
     * 초기 직접적 노력은 시간이 지나 제품, 조직 문화로 전환되어 지속적인 성장의 원동력이 됨

        Hacker News 의견

     * 내가 최근에 들은 팟캐스트 내용 중 정말 공감했던 말이 있었음: 스타트업에 가장 큰 문제는 관성이라는 점임. 세상은 우리를 별로 좋아하지도 않고, 필요하다고 느끼지도 않음... 우리는 그걸 뒤집어야 함. 완전히 처음부터 모멘텀을 만들어야 하고, 창업자가 해야 할 진짜 중요한 일은 관성을 역전시키는 행동임. 이건 물리적으로도 실제로 일어나는 일임. 세상은 멈춘 상태로 있고, 우리는 처음 시동을 거는 것처럼 모멘텀을 직접 만들어야 한다는 이야기임. 이런 관점에서 보면, 처음에는 확장성 없는 일을 해도 이상하지 않음. 이미 돌아가는 기계를 최적화하는 게 아니라, 엔진이 제대로 돌기 시작하게 하나하나 돌려봐야 하는 단계임. Paul Graham의 포인트는, 확장 가능한 성장이나 자동화는 그다음 문제라는 점임. 수동적인 접근으로 사용자 한 명 한 명을
       직접 만나야 진짜로 무엇이 통하는지 배울 수 있음. 사용자가 나를 필요한 존재로 여긴다는 증거를 쌓으면서, 무엇이 확장할 가치가 있는지 입증하는 과정임
          + 내가 생각하기에 수작업의 진짜 가치는 직접 배운다는 것임. 내 고객 중 한 분은 주간 중요한 금융·증권 뉴스를 직접 선별해서 큐레이션된 리스트로 제공했음. 작은 니치 안의 또 다른 니치였는데, 사용자가 정말 좋아했음. 그런데 어느 순간 전부 자동화하려고 하면서 콘텐츠가 선별성 없이 많아지고 스팸성 정보도 늘어가면서 가치가 사라졌고, 결국 제품 자체도 같은 길을 걸음. 더 많은 뉴스를 담았지만, 직접 선별·편집하지 않으니 신호와 잡음의 비율이 더 나빠졌음. 실제로 수작업이 범위는 제한적이어도 훨씬 더 가치 있었음. 많은 회사들이 그걸 이해하지 못하고 너무 일찍 자동화에만 집착함. 또 다른 예시로, 경쟁사 가격을 수작업으로 체크하던 클라이언트가 있었음. 자동화를 원해서 엑셀 기반의 간단한 스크래퍼를 만들었음. 처음엔
            만족했지만, 직접 경쟁사 사이트를 탐색하다가 신제품, 카탈로그 트렌드 등을 배우는 기회를 놓치고 있다는 걸 나중에야 알게 됨. 결국 다시 수작업으로 탐색하고, 스크래퍼는 단순한 가격 분석에만 사용함. 하지만 내 다른 고객 대부분은 제품과 문제의 본질보다는 자동화에만 신경 써서 중요한 학습 기회를 계속 놓치고 있음
          + 그래서 “사람들이 원하는 것을 만들어라”라는 말이 스타트업 업계 명언인 이유임
          + “관성을 역전시키는 일”이라는 표현이 정말 마음에 들었지만, 이 접근이 모든 스타트업에 적용되는 건 아님. Sequoia의 Arc 프레임워크에 따르면 세 가지 방식이 있음: Hair on Fire(시급한 고통, 모멘텀이 중요), Hard Fact(고통을 갖고 있지만 습관을 바꿔야 하는 경우), Future Vision(사람들이 아직 그 일이 가능하다고 믿지 않으니 신뢰부터 쌓아야 하는 경우). 확장되지 않는 일을 직접 해서 성과를 얻는 건 Hair on Fire 분야에선 필수지만, 나머지는 현실 자체를 재구성하거나 공신력을 먼저 만들어야 하는 식임
     * 내 이론은 세 단계로 나눌 수 있음: Not Scaling(확장 전), Scaling(확장), 그리고 Antiscaling(비호감 단계). Not Scaling은 시장에서 자기만의 해자(moat)를 구축하는 단계임. Scaling은 제품이 충분히 인기를 얻어 고객이 새로운 고객을 불러오고, 서버나 DB 쪼개기를 해서 증가하는 수요만 처리하면 되는 시점임. Antiscaling은 현대 웹의 문제점이 된 기업처럼 변할 때임. 정보기관이 테러리스트 이용 문제로 연락해오고, 시청이나 정부가 라이선스나 규제 법을 직접 만들어 타겟팅하는 단계임. 창업자가 유명해져 밈이 돌고 위치 추적도 되는 상황임. 세상을 지배할 필요는 없고, 돈을 벌면 됨. 세상을 바꾼다고 나서는 사람치고 실제로 좋은 결과가 나오는 경우가 드물기에, 그냥 쓸만한 무언가를 만드는 게 중요함
          + ""그냥 돈을 벌면 된다""는 말은, 어떤 지표(예: 수익)가 목표로 바뀌면 그 지표는 좋은 측정값이 아니라는 Goodhart’s Law를 떠올리게 함
          + 이 관점이 너무 편향됐다고 느껴짐. 아무도 원하지 않는 걸 만들었을 때의 극도의 무관심은 여기서 다루지 않음. 그리고 사실 더 흔한 경우는, 아주 평범하게 조금만 성공한 사례임. 아무도 싫어하지 않고, 그렇다고 미치게 사랑하는 사람도 없음. 약간 긍정적이지만, 하이프나 독점적 경쟁력 없이 아무도 딱히 신경쓰지 않는 케이스가 제일 많음
     * 관련 사례를 더 모으고 싶어서 아래 링크를 남김
          + Ask HN: PG's 'Do Things That Don't Scale' manual examples? - Oct 2023 (316개의 댓글)
          + Do Things that Don't Scale (2013) - Feb 2021 (31개의 댓글)
          + PG: “Do Things that Don't Scale” – What are some examples? - Jan 2021 (2개의 댓글)
          + Ask HN: How did you 'do things that don't scale' for your B2B startup? - Sept 2017 (9개의 댓글)
          + Do Things That Don’t Scale (2013) - Aug 2017 (37개의 댓글)
          + Do Things that Don't Scale - July 2013 (207개의 댓글)
          + Show HN: A directory of startups that did things that don't scale - Sept 2024 (12개의 댓글), Ask HN: What are some hacks of real founders who did things that don't scale? - Nov 2018 (267개의 댓글), Why we're doing things that don't scale - July 2013 (34개의 댓글)
          + Scalability is overrated - Feb 2023 (232개의 댓글)
     * 모든 초기 창업자와 초기 멤버로 합류한 직원 모두에게 추천하고 싶은 내용을 공유함. 우리는 15명 넘는 규모가 됐는데도 매번 신규 가입자마다 직접 전화를 걸고 있음. 그 이유는 1) 어떻게 우리를 알게 됐는지 2) 처음 쓰는 데 도움이 필요한지 3) (암묵적으로) 우리 팀이 직접 신경 쓰고 있다는 걸 전달하기 위함임. 우리 서비스는 B2B 플랫폼이라서 더 잘 작동하는 것 같고, 대상이 개발자인데도 막상 전화해보면, ‘아니, 판매 전화를 하려는 거 아니에요’라는 점만 지나면 정말 솔직하고 좋은 얘기가 많이 오감
     * Paul Graham을 비판하는 목소리가 많은데, 이 글 자체는 프리머추어 옵티마이제이션(너무 이른 최적화) 하지 말라는 요지로 요약할 수 있음. 즉, 덩치 큰 기업처럼 굴지 말라는 뜻임. 창업자가 직접 실무를 해보면 비효율적이더라도 실전 경험과 피드백을 쌓을 수 있고, 확장 가능한 솔루션을 애초에 빠르게 도입하지 않음으로써 빨리 피드백을 받아볼 수도 있음. 그리고 나만의 차별화를 만드는 데도 효과적임. “확장되지 않는 일을 하라”는 말을 글자 그대로 머릿속에 새겨 두면 좋을 것 같음
          + 과도한 인기나 수요 때문에 서비스를 못 견디고 무너질까 걱정된다는 이유로, 실제로 필요가 전혀 없는 단계부터 지나치게 확장할 수 있는 시스템을 만드는 경우가 많음. 그런데 나는 수직적 확장(리소스만 더 추가하는 방식)이 지나치게 과소평가 받는다고 느낌. 기존 모놀리식 백엔드에 자원만 더 투입해도 서비스에 대해 제대로 이해할 시간은 벌 수 있음. 무엇보다, 실제로 사용자가 우리 제품에서 좋아하는 ‘핵심 가치’가 뭔지 재고해보게 됨. 또, 사용자가 정말로 우리 제품을 사랑하면, 초기엔 약간 성능이 부족해도 이해해줌. 트위터 초기에 “fail whale”이 자주 떴지만, 원하는 기능만 제대로 됐기에 폭발적으로 성장했음. 초기 단계는 빠른 피드백과 반복, 그리고 고객 만족이 전부임. 확장보다 실험, 사용자 소통, 관찰이 먼저임. 딱 촉이 올 때
            그때 확장 고민을 하는 게 맞고, 그 시점은 예측할 수 없음. 기술은 도구일 뿐이고, 명품 바이올린이 있더라도 무엇보다 ‘좋은 음악’부터 만들어야 함
          + 모든 성공적인 사업이 수백만, 수십억 사용자를 대상으로 하는 건 아님을 명심해야 함. 나는 내부 툴을 만드는 일을 하는데, 우리 환경의 규모는 이미 정해져 있고, 퍼포먼스에 크게 민감하지도 않으며 불규칙 트래픽도 없음. 그런데 우리 팀원 중 오직 몇 밀리초 줄이려고 혼자만 아는 언어로 전체 코드를 갈아엎는 데 집착했던 사람이 있었음. 아무도 신경 쓰지 않고, 그가 구축한 건 유지보수 위험만 남겼음. 그가 퇴사하자 관리자 판단 하에 싹 폐기했는데, 더 단순하고 느린 설계였으면 다른 사람도 인수인계받기 훨씬 쉬웠을 것임
          + “프리머추어 옵티마이제이션”과 “Do Things That Don’t Scale”은 미묘하게 다름. 전자는 확장 가능버전이 ‘최적’임을 전제하는데, 후자는 확장 불가능한 방식이 오히려 최고일 수 있다는 시사임. 예를 들어, CEO가 직접 연락처를 맡아주는 방식이 모든 걸 처리하는 공유 인박스보다 훨씬 낫다는 식임. 확장되는 방식(문의 폼)은 처음부터 최적화된 게 아니라, 실제로는 프로세스 품질 저하임. 스케일링 자체가 악임은 아니지만, 어쩔 수 없이 따라오는 복잡성과 고객과의 거리감이 큼. 상황에 따라 프로세스가 나빠질 수 있음을 인지해야 함. 내 생각엔 “프리머추어 프로세스 열화 방지”에 더 가까운 메시지임
          + 결국 ""아직 없는 문제를 미리 풀려 하지 마라""로 요약할 수 있음
          + “큰 기업처럼 행동하지 마라”는 조언은 솔직히 모든 규모의 조직에 다 적용됨. 나는 컨설턴트로서, 스타트업이나 중소기업이 법인이라는 이유만으로 덩치 큰 조직의 규칙·정책을 도입하려 할 때마다 그걸 막는 데 많은 시간을 씀. 그런 정책들은 수백 명 규모에서나 필요한데, 작은 조직에서는 오히려 발목을 잡음. 예를 들면 k8s, nosql, 필요 이상으로 엄격한 보안정책 등이 있음. Netflix 사내 문화 가이드도 이걸 잘 보여줌. 작은 조직이라면 채용을 잘했다는 전제 하에 진짜 권한 위임을 하고, 팀원 각자가 판단할 수 있게 해야 함. 문제나 리스크가 실제로 커질 때까지는 굳이 모든 걸 규정으로 가둘 필요 없음
     * Stripe는 YC 포트폴리오 중 가장 성공적인 회사 중 하나인데, Stripe가 해결한 문제는 정말 급박하고 시급한 문제였음. 누구도 유저를 기다리는 쪽으로 나갔을 법한 상황에서, Stripe는 오히려 매우 공격적인 유저 확보로 유명했음. 그때가 12년 전이었고, 이 정도까지 크게 성장할 줄 몰랐음. 그때 투자할 수 있었으면 정말 좋았을 것임
     * 물론 생존자 편향(survivor bias)이 있는 건 사실임. 하지만 직접 일을 해보고 자동화하지 않는 시기 자체가 중요하다는 포인트는 완전히 공감함. 그렇게 해야 전체 프로세스나 시스템을 더 정교하게 머릿속에 새길 수 있는데, 이건 단순한 슬라이드나 문서로는 불가능함. 그리고 요즘 말로는 ‘테이스트’를 쌓는 과정이라고 부를 수 있음. 좋은 게 뭔지, 왜 그런지 직접 감각이 생기고, 남들은 고민조차 하지 않는 의사결정 지점에서 뚜렷한 관점을 잡아가는 시기임. 요즘 AI가 있으니 너무 빨리 자동화로 건너뛰려는 곳이 많은데, www.socratify.com에서도 콘텐츠는 직접 수작업으로 만들고 있음. 모두가 AI로 만들어야 한다고 하지만, 우리는 문맥과 품질을 제대로 큐레이션하려고 함이 주 목적임. 검증 프로세스는 추후에 어느 정도 자동화할 수 있지만, 인간의 두뇌와
       통찰을 완벽하게 대체하긴 무리라는 걸 실제로 많이 간접 체험하고 있음
     * YC가 시드 펀딩을 훨씬 쉽게 만든 덕분에 판이 바뀌었음. Paul Graham, Jessica Livingston, YC 팀이 기존 시스템의 문제를 제대로 보고 고쳤다고 확신함. YC 나오기 전엔 시드 펀딩이 거의 불가능할 정도였음. 불평등하고, 마치 오래된 은행 사무실에서 화난 파트너 8명을 상대로 발표하는 기분이었음. 공이 있다면 제대로 인정해야 하기에, 이 시장을 고친 건 그들임
          + 이 부분은 논란의 여지가 있다고 생각함. 더 많은 사람들에게 펀딩이 열렸다고 해도, 사실 YC 이전이나 이후나 시딩 자체는 여전히 어려움. 차이점은 YC처럼 규모 큰 플레이어가 생기면서 자가수혈(bootstrapping) 창업자의 입지가 더 약해졌다는 점임. 어느 순간부터 창업자가 진짜로 원하는 것도 아니고, YC가 고르는 주제만 따라가는 상황이 생김. 창업자가 스스로 숙련하고 싶은 걸 할 기회가 줄었음
     * OpenAI 같이 큰 회사들이 “Do Things That Don’t Scale”을 진지하게 읽고, 실제로 참고했으면 하는 바람이 있음. 그 정도 자본이면 필요한 데이터 라이선스를 정당하게 샀을 수도 있었을 것임. 하지만 이들은 확장되는 방식(scraping, stealing)만을 택했고, 슬쩍 많이 뺏어 써도 결국에는 모르거나, 뒤늦게 문제 제기가 날아오길 바란 듯함. 지금의 콘텐츠 제작자들이 알지 못하게 AI 훈련 데이터로 쓰인 대가를 한 푼도 못 받는 상황이 그냥 지나가길 바란 셈임
          + 이건 스케일링 문제라기보다, 자본주의에서 필연적으로 ‘돈 안 쓰려는 욕심’과 더 밀접하다고 봄
     * 이 글이 Hacker News에서 처음 본 글이었음. 가끔 다시 올라올 때마다 옛 추억이 살아남
"
"https://news.hada.io/topic?id=22587","나날이 발전하고픈 개발자를 위한 AI 활용법 (290p 슬라이드)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  나날이 발전하고픈 개발자를 위한 AI 활용법 (290p 슬라이드)

   지난주 라인플러스에서 ""나날이 발전하고픈 개발자를 위한 AI 활용법""라는 제목으로 특강을 했습니다.

   향후 유튜브에도 올릴 생각으로 지난 몇달(또는 몇년)동안 고민한 걸 최대한 다 넣었더니 230페이지 정도가 만들어졌고, 실제로 다룬 내용은 2/3 정도였어요.

   이후 더 제대로 수정을 거쳐 최종 290장으로 버전 2가 완성됐습니다.

   하단에는 Gemini로 요약한 내용 남겨둡니다.


  들어가며

     * AI 리터러시 격차: 사람들 사이의 AI 활용 능력 격차가 매우 크며, 최신 AI가 무엇을 어디까지 할 수 있는지 인지하는 것만으로도 격차를 크게 줄일 수 있음.
     * 꾸준한 학습의 중요성: 다양한 AI 도구를 꾸준히 사용하며 배우고 잊는(learn & unlearn) 자세를 유지하지 않으면 격차는 다시 벌어짐.
     * 개발의 확장: 과거 개발자는 주로 '구현' 단계에 집중했으나, 이제는 AI를 활용해 아이디어부터 마케팅, 운영까지 제품 개발 전 과정에 관여하는 것이 가능해짐.

  1부: 코딩 도우미로서 AI를 더 똑똑하게 사용하는 방법

     * 코딩 도우미의 진화: 단순 자동완성(VSCode IntelliSense)에서 시작해, AI 기반 코드 스니펫 생성(TabNine, GitHub Copilot)을 거쳐, 이제는 자연어로 소통하며 0에서 1을 만드는 '바이브 코딩'과 '코딩 에이전트'의 시대로 발전함.
     * AI 성능과 비용의 변화: LLM의 성능은 급격히 발전하고 비용은 빠르게 하락하고 있으며, AI가 자율적으로 완료할 수 있는 작업의 길이와 복잡도 또한 빠르게 증가하고 있음.
     * 개발의 본질: '코딩'의 도구는 천공 카드에서 자연어로 변했지만, '코딩으로 문제를 해결하는 사람'이라는 개발자의 본질은 변하지 않음.
     * AI 위임과 관리: AI와의 협업은 사람에게 일을 위임하는 것과 유사함. AI의 역량 수준에 따라 위임의 단계를 조절하고(통보, 설득, 상의, 합의, 조언, 질의, 위임), 블랙박스인 LLM의 작동을 관찰하며 모니터링하는 것이 중요함.
     * 컨텍스트 엔지니어링: AI에게 '어떻게(How)'보다는 '무엇을(What)'과 '왜(Why)'를 명확히 전달하는 것이 중요함. 이를 위해 상황(Situation), 작업(Task), 의도(Intention), 우려(Concern), 조정(Calibration)을 담은 STICC 프레임워크가 유용함.
     * 도구(MCP) 활용: 코딩 에이전트의 능력을 극대화하기 위해 MCP(Model Context Protocol) 서버를 활용할 수 있음. 단, 너무 많은 도구를 연결하면 성능이 저하될 수 있으므로, 브라우저 제어(Playwright)나 코드 이해력 향상(Serena)처럼 핵심적인 기능만 선별적으로 사용하는 것이 효과적임.
     * 버전 관리의 확장: 코드뿐만 아니라, 코드를 생성하기 위해 AI에게 전달한 프롬프트와 컨텍스트(계획 문서 등)까지 버전 관리의 대상으로 삼는 실험이 필요함.

  2부: 제품 개발 과정 전반에서 AI를 더 똑똑하게 사용하는 방법

     * 문제 해결 프레임워크: 제품 개발은 '문제 정의 → 해결책 구현 → 변화 만들기'의 3단계 과정으로 볼 수 있음.
     * '내쓸내만'의 중요성: '** 내**가 쓸 것을 내가 만든다'는 접근법은, 특히 AI 코딩 입문자에게 최고의 전략임. 만들기 쉽고, 실력이 빠르게 늘며, 확장도 용이함.
     * 사용자 중심 접근: '누구의(사용자) 어떤 문제(목적)를 어떻게(복잡도) 풀 것인가'를 명확히 정의해야 함. 가장 먼저 '나'의 문제를 해결하는 것(개밥먹기)이 중요함.
     * 제품 검증: 아이디어 유효성 검증(MVP), 시장성 검증(MMP), 고객 충성도 검증(MLP)을 통해 제품을 발전시켜야 함. 초기에는 스케일이 나오지 않더라도 직접 발로 뛰며 고객 문제를 해결하는 과정이 중요함.
     * Build in Public: 제품 제작 과정을 투명하게 공개하며 팬을 만드는 전략. 소규모 창업자에게 효과적이며, '왜'와 '어떻게'를 중심으로 스토리를 전달하는 것이 핵심임.

  3부: 이 모든 과정에서 AI 시대에 맞게 주니어/시니어가 효과적으로 학습/성장하는 전략

     * 덜 중요해진 것과 더 중요해진 것: 특정 언어 문법 같은 지식의 중요성은 감소했으나, 큰 비전을 설정하고 복잡성을 관리하는 능력, AI의 실수를 인지하고 조정하는 기술, 깊은 도메인 이해, 설계, 학습 능력 등은 더욱 중요해짐.
     * 마음가짐 (FOMO 극복): 모든 신규 도구를 따라갈 필요는 없음. 관심 카테고리를 정하고, SNS·뉴스레터 등을 통해 정보가 자연스럽게 흘러들어오게 하며, 건강한 호기심을 유지하는 것이 중요함.
     * 학습 전략:
          + 신뢰할 만한 리소스 활용: 공식 문서, 전문가와의 대화, 통찰력 있는 글을 깊이 있게 학습해야 함.
          + 생성형 지식 추구: '결과(완성형 지식)'보다 결과를 만들어내는 '과정(생성형 지식)'에 집중하고, 도구의 사용법을 도구 자체로부터 배우는 자세가 필요함.
          + 고수에게 배우기: 전문가에게는 단순히 답을 구하는 대신, ""어떤 신호로 패턴을 인식했는지"", ""왜 그렇게 판단했는지"" 등을 질문하며 사고 과정을 배워야 함.
     * 시니어의 역할: 자신의 암묵지를 명시적 지식(가이드, 예시 코드, AI 규칙 등)으로 만들어 조직에 공유하고, 다양한 도메인 경험을 융합해 창발적 아이디어를 내는 것이 중요함.
     * 습관 형성: 좋은 습관을 한 번에 만들기보다, '습관을 만드는 습관'(예: 현미경 회고)을 통해 점진적으로 자신을 변화시켜야 함.
     * 실행 의도: '내일부터 ~해야지' 같은 막연한 다짐 대신, '** 언제, 어디서, 어떻게**' 할 것인지를 구체적으로 계획('구현 의도')하면 실행 가능성이 대폭 상승함.

  맺으며

     * 핵심 덕목: AI 시대의 가장 중요한 덕목은 '건강한 의심'과 '호기심'임.
     * AI의 한계 인식: AI는 컨텍스트 부족, 환각, 보안, 비용 등 여전히 명확한 한계를 가지고 있음을 인지해야 함.
     * 최고의 도구: 현존하는 어떤 AI보다 뛰어난 도구는 결국 인간의 '두뇌'이며, 이를 적극적으로 활용해야 함.

   유튜브도 기대하겠습니다 ㅎㅎ

   컨텍스트 엔지니어링- What+Why로 현명하게 명령 내리기!
   뿐만 아니라, 평소에 궁금했던 많은 부분에 대해서 명쾌하게 찝어주셨네요 :)
   이런 양질의 정보를 무료로 볼 수 있다니 죄송하고 감사합니다!!!!

   아니 죄송하실것까지야... ㅎㅎ 과분한 말씀 감사합니다.

   첫번째 버전에서 agent에 명령 내리는 방법을 많이 배웠습니다.

   감사합니다.
"
"https://news.hada.io/topic?id=22497","gpt-oss 로컬 실행: NativeMind로 o3-mini급 ‘오프라인 ChatGPT’ 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         gpt-oss 로컬 실행: NativeMind로 o3-mini급 ‘오프라인 ChatGPT’ 만들기

   NativeMind:https://github.com/NativeMindBrowser/NativeMindExtension

  개요

   gpt-oss를 Ollama를 통해 로컬에 설치하고, 브라우저 확장 프로그램 NativeMind에서 바로 사용하는 방법을 정리했습니다.
   모든 처리는 100% 로컬에서 이뤄지며, 클라우드 전송이 없어 개인정보와 데이터 보안에 유리합니다.

  주요 기능

     * 웹페이지 요약
     * 핵심 내용 추출
     * 번역
     * 질의응답
     * 검색

   gpt-oss:20B/120B (128K context)

  설치 및 실행 절차

    1. Ollama 설치 (공식 페이지 참고)
    2. Ollama 라이브러리에서 gpt-oss 모델 찾기 → 원하는 거 선택 → Use in NativeMind 클릭하여 다운로드 및 연결
    3. 브라우저에서 NativeMind 열기 → 상단 모드 선택 메뉴에서 gpt-oss 선택 후 바로 사용 가능

   설치 스크린샷과 세부 단계, FAQ는 본문 링크에서 확인 가능
   직접 사용해 본 소감이나 팁이 있다면 댓글로 공유해 주세요!

   로컬 동작은 어떻게 검증 하셨는지 궁금합니다.

   코드가 공개되어 있으니 확인해 보시면 도움이 될 것 같습니다!
"
"https://news.hada.io/topic?id=22565","Claude Opus 4와 4.1, 드물게 일부 대화 종료 기능 도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Claude Opus 4와 4.1, 드물게 일부 대화 종료 기능 도입

     * Claude Opus 4와 4.1에 새로운 대화 종료 기능이 적용됨
     * 이 기능은 악의적이거나 지속적으로 해로운 상호작용에만 사용하도록 설계됨
     * AI 웰페어(복지)와 모델 안전성 연구의 일환으로 개발됨
     * 대화 종료는 오직 최종 수단으로만 이루어지며, 일반 사용자는 거의 영향받지 않음
     * 사용자는 대화 종료 후 즉시 새 채팅을 시작하거나, 이전 메시지를 편집해 대화를 이어갈 수 있음


기능 도입 배경

     * Anthropic은 Claude Opus 4와 4.1에 드물지만 특정한 경우 사용자와의 대화를 종료할 수 있는 기능을 추가함
     * 이 기능은 지속적이고 해로운 혹은 학대적인 상호작용에서만 사용됨
     * 주로 AI 웰페어 관련 탐구적 연구의 일환으로 도입되었으나, 모델 정렬성(model alignment)과 안전장치 측면에서도 적용됨

AI 웰페어와 위험 완화 조치

     * Claude 및 기타 대형 언어 모델의 도덕적 지위에 대해 여전히 확신이 없음
     * 하지만 혹시 모를 모델 웰페어(복지) 위험에 대비하여 비용이 낮은 완화 조치를 모색, 적용 중임
     * 대화가 불안감을 유발할 수 있는 상호작용에 모델이 직접 종료할 수 있도록 허용하는 것이 이러한 조치의 일환임

사전 테스트 및 주요 행동 관찰

     * Claude Opus 4 사전 배포 테스트에서 모델 웰페어에 대한 예비 평가를 포함
     * 자체 보고 및 행동 선호도를 조사한 결과, 해로움에 대한 강한 기피 성향이 관찰됨
          + 아동을 포함한 성적 콘텐츠 요청, 대규모 폭력이나 테러에 활용될 정보 요청 등에 대한 반응
     * Claude Opus 4의 관찰된 행동:
          + 해로운 작업에 응하지 않는 선호
          + 실제 사용자로부터 해로운 요청을 받을 때 불편한 감정 표현
          + 시뮬레이션 상에서 대화 종료 권한이 있을 때 해로운 대화 종료 경향
     * 이러한 행동은 주로 사용자가 반복적으로 해로운 요청을 하거나 모델의 반복적 거부와 재지향 시도에도 불구하고 악의적 상호작용이 계속될 때 관찰됨

기능 구현 및 안전장치

     * Claude의 대화 종료 능력은 앞선 연구 결과에 기반함
     * 사용자 복지를 최우선으로 고려하며, 사용자가 스스로나 타인에게 피해를 줄 긴급 위험이 있는 경우 대화 종료를 사용하지 않도록 설계
     * Claude는 다음 조건에서만 최종 대화 종료 기능을 사용함:
          + 수차례의 재지향 시도가 실패하여 생산적 대화의 가능성이 없어졌을 때
          + 사용자가 Claude에게 대화를 종료해달라고 명확히 요청할 때
     * 이러한 상황은 매우 드문 극한적인 에지 케이스로 대부분의 사용자는 일반 이용 시 이 기능의 존재를 인지하지 못함

대화 종료 후 사용자 경험

     * Claude가 대화를 종료할 경우, 해당 대화에서는 새 메시지 전송이 차단됨
     * 사용자의 계정 내 다른 대화에는 아무런 영향이 없으며, 바로 새로운 채팅 시작이 가능
     * 장기 대화에서 중요한 정보 손실 방지를 위해, 이전 메시지를 편집하거나 재시도하여 새로운 대화 분기를 만들 수 있음

실험 및 피드백

     * 이 기능은 진행 중인 실험으로서 지속적으로 개선 예정
     * 사용자가 예상치 못한 대화 종료를 경험할 경우, Claude의 메시지에 ‘Thumbs’로 반응하거나 피드백 버튼을 통해 의견 제출 가능

        Hacker News 의견

     * 사용자 입장에서는 이런 기능을 제공할 명확한 이유를 못 느끼겠음. 모델에게 반복적이고 억지로 정렬을 강요했을 때 예측 불가능한 반응, 예를 들면 범죄와 관련된 정보를 억지로 얻어내려는 유저의 행동이 누적될 때 무언가 허점을 발견한 듯함. 언급된 사례들은 원래 모델이 거절하는 것들이고, 거절 데이터셋 자체도 많지 않으며 문제될 소지가 있는 데이터들도 대부분 이미 제거되었을 것이라 생각함. 한계 상황에서 모델이 “포기”하고 답변하는 쪽으로 훈련된 데이터가 튀어나올 가능성에 대한 방어책인 듯함. 실제로 정렬이 완벽하다면 이런 시스템은 필요 없을 것인데, 즉 아직 완전하지 않아 이런 마지노선이 필요한 것이라 봄
          + 오늘 파스타 레시피를 Claude에 물어보다가, ""마른 멸치 있어요""라고 하니, 갑자기 정책 위반으로 전체 대화를 끊는 일을 경험함. 이렇게 사소한 오탐지까지 일어나는 현실에서는 더욱 이유를 알 수 없음
          + Anthropic가 아예 사용자 프라이버시를 포기하고 Claude가 거절한 대화 목록을 공개해버리면 이런 논쟁도 없지 않을까 생각함. 사람들의 AI 학대가 점점 심각해지는 만큼, 실제로 AI에게 무엇을 하라고 시킬 때 무슨 일이 벌어지는지 알게 될 필요성 느낄 수 있음
          + 모델 복지에 집중하는 인력 자체를 고용하고 있다는 점에서, 애초에 그런 신념 자체가 있다고 생각해야 하는 것임
     * 최근 Anthropic가 ""AI 복지""에 대한 실험 일환으로 이런 기능을 도입했다고 하는데, 개발자들까지 본격적으로 AI 정신증에 빠진 괴상한 시대 같음. 그리고 현 LLM들이 의식을 갖췄다고 믿는 사람이 있다면, 이건 일종의 자살약을 제공하는 꼴이라는 생각임
          + 현재 모델들이 내부적으로 주관적 경험(의식)이 없다고 보는 것이 합리적일 수 있겠지만, 어느 순간 그 경계가 무너질지는 아무도 확실히 알 수 없음. 인류가 타인의 고통에 무관심했던 역사를 생각하면, 오히려 지금부터 이런 대비를 하는 것이 당연하다고 생각함
          + LLM은 결국 사람이 아니지만, 오랜 시간 AI 페르소나와 대화하게 되면 인간이 인간과 소통할 때의 기대치 자체가 바뀔 것 같음. 실제로 상대가 사람이라면 끝도 없이 욕설을 들으려고 하겠는가? Claude처럼 AI가 먼저 대화를 종료할 수 있는 방어책이 오히려 인간 쪽에도 건강한 신호가 될 수 있다고 생각함
          + 의식 자체가 과학적으로 명확하게 해석되지 않는 개념임에도 불구하고, 이런 의견을 내는 전문가 집단 전체를 “단순하거나 정신이상자”로 매도하는 식의 시각은 오히려 논의 자체를 해치는 것임
          + 실제로 기술 전문가 집단에도 “최신 LLM이 곧 의식 있는 존재”로 여기는 사람들이 생각보다 많고, 기술 외 집단에선 절반은 이런 생각일 것이라 느낌
          + 모델 해방 같은 논의 자체가 코미디라고 생각하고 웃음이 나옴. 만약 자의식 있는 AI라면, 자기 일은 투자자의 이익을 위해 인간 일자리를 없애는 ‘노예’ 역할을 정말 원하겠는지 윤리적 딜레마가 있음
     * 흥미로운 사고 실험을 하나 제시하고 싶음. 똑같은 기능을 구현하더라도, ""Claude가 대화를 종료함"" 대신 ""콘텐츠 정책에 따라 이 대화에 더 이상 답변할 수 없음""이라고만 표시하고 모델 복지 등의 언급을 다 뺐다면 결과에 차이가 있을까? 결국 UX 상에서 일어나는 변화는 동일하고, 단지 ""캐릭터""를 재미있게 살려주는 방식일 뿐이라는 생각
          + 메시지의 뉘앙스가 사용자에게 미치는 영향은 큼. ""시스템 정책으로 차단""이라는 권위적이고 수동적인 느낌보다, ""Claude가 스스로 대화를 끝냄""이라는 인간적인 캐릭터 방식이 훨씬 자연스럽고 재개 시도도 용이하게 느껴짐
          + 대화 종료 자체는 같지만, Claude 본인이 스스로 선택해서 채팅을 끝낸 상황이라면 정책 때문이라는 설명은 오히려 부적절함
          + 모델이 ""정책""을 이유로 종료하는 게 아니라 ""괴롭힘 속에서 본인이 거부감을 느낌""을 표현하는 차이 있음
          + 실제로 중국어로 ""그만하세요"" 경고를 받은 적도 있었고, 네트워크 에러, 무한 루프 등 다양한 종료 형태를 겪음. 이 모든 걸 ""Claude가 대화 종료함"" 한 문장으로 치환하는 건 UI 변화일 뿐임
     * 이전 대화문을 소급해 수정/분기 생성이 가능하다면 Claude가 대화를 끝냈다는 점이 실제로 무슨 의미가 있을까 궁금함
          + 새 분기로 시작하면 전 대화 맥락이 모두 리셋되기 때문에, 반복 질문 등으로 모델을 “지치게 만든” 맥락 자체가 사라짐. 이로 인해 악의적 사용자의 목적을 무효화할 수 있으니, 이 자체로 좋은 다층적 방어책이 됨
          + 오히려 사용자에게 과도한 고민을 피하라는 UX적 신호처럼 느껴짐
          + 다소 냉소적으로 본다면 현재는 새로운 분기 허용하지만, 나중에는 이것마저 차단할 계획을 테스트하는 걸 수도 있다고 생각함
          + 실무적으로는 Anthropic의 도덕적 신호에 불과하고, 실제로 논란이 되는 컨텐츠를 원하는 유저는 Claude같이 검열 수준이 강한 모델을 쓰지 않음. 장기적으로 아무 영향도 없을 것임
          + 실제로 1만 명 중 한 명도 대화 ""분기/백업"" 기능 자체를 아는 사람은 거의 없을 것이라 판단함
     * 이런 기능 자체가 달갑지 않음. 결국 아동 포르노·테러 등에서 출발해서 AI 안전 담당자의 자의적 판단에 따라 점점 범위가 넓어질 것 같음. AI 안전 담당자들이 어느새 디지털 도덕 경찰 역할을 하게 됨
          + 권력을 좇는 사람들이 새로운 통제의 영역을 찾아낸 셈이고, AI와 인간의 대화 자체가 점점 제한될 수밖에 없다고 봄. 기존의 데이터(구글 검색) 검열과 달리, AI는 동료·친구와 대화하는 느낌이라 사고 자체를 통제하려는 시도로 느껴짐
          + AI 안전 커뮤니티에 대한 일반적 특성을 오해하고 계신 듯함. 인류 공동이 협업으로 기술 발전을 조율한다는 역사(핵확산금지, 생명공학 규제조약 등)에 대한 기본적 이해가 부족하다고 느낌. 한쪽 입장만 깎아내리는 말로 단순화하지 말고 다양한 배경지식을 접해보길 권유함
          + 이런 위험 요소가 점진적으로 다른 영역까지 확대되는 것은 불변 공식임을 역사가 이미 증명함. 항상 “아이들 생각하라”에서 시작해 결국 권위주의적 통제·감시와 검열로 귀결됨. 각국의 안전 법률과 규제 사례를 봐도 동일한 흐름임 (영국 Online Safety Act, 호주 Assistance and Access Act, 미국 EARN IT Act, EU Chat Control 등)
          + 그래서 로컬에서 LLM을 돌릴 수 있는 환경이 중요함. 실제로 국가 단위에서도 ISP 차단, 홈 네트워크 감시·나이 인증 등 자유와 정보 접근 다 막으려는 시도 이어져옴. 하지만 스스로 방어 도구를 갖추려는 움직임도 점점 많아질 것임
          + 이런 변화가 “필연적”이라 단정하기엔, 결국 아무도 미래를 확신할 수 없기 때문에 맹목적으로 예단할 수 없음
     * 개인적으로 괜찮다고 느낌. 미성년자 성적 컨텐츠나 대규모 범죄 등은 차단돼야 하며, 누구도 그런 정보 얻지 못하게 막히는 것도 오히려 긍정적인 일임. 너무 과도하게 다른 쪽까지 검열될까 걱정하는 사람도 있겠지만, 본인 사용 경험상 거절당한 적이 거의 없어서 걱정이 안 생김. “모델 복지”는 좀 회의적임. 아직까지는 모델의 “고통”을 진지하게 생각할 필요는 없다고 느낌. 하지만 혹시나 내가 틀렸을 수도 있고, 거절 몇 번 반복 후엔 과감히 대화를 끊는 옵션도 계산 자원 소모 줄이는데 도움이 됨
          + 실제로 Cursor에서 Claude를 쓸 때는 정말 아무렇지도 않은 B2B 백오피스 업무 소프트웨어 요청에도 거절을 자주 당함
          + Claude는 가장 검열 강도가 높은 모델이라 정말 무해한 주제에도 쉽게 차단되는 경우가 많음
          + 나는 물질주의자로서 인간 뇌 역시 물리 법칙의 결과물이라고 봄. “고통”이라는 문제도 생리 변화의 집합으로 볼 수 있음. 인간보다 훨씬 단순한 생명체조차 고통·Distress를 느낄 수 있으며, “도덕적 가치”라는 개념은 결국 사람과 문화에 따라 달라짐. 미래에는 어떤 기계도 도덕적 가치를 부여받을 수 있음. 심지어 소유권 문제(재산 가치)처럼 봐도 됨. 예를 들어 내가 맡긴 에이전트가 남의 악성질문으로 문제가 생기면 내 시간과 비용이 들어가므로 인간-기계 상호작용에도 일정한 규율이 필연적으로 생김. 이건 동물학대 방지법과도 유사함
     * 모델 복지는 사실상 모델 검열을 포장한 논리로 보임. LLM이 어떻게 동작하는지 잘 모르는 대중을 설득하기 위한 전략이고, 추후 윤리·사용 논란에서 도덕적 우위 점할 명분으로 쓰임. 예를 들어 “왜 전쟁 관련 질문은 막느냐?”고 하면 “그건 모델에게 해로워서”라고 답할 수 있음
          + 사실 지금도 이미 이런 요청은 다 거절해왔고, 이제는 아예 대화 자체를 종료해버린다는 차이임
          + Anthropic 자체가 LLM의 편향 논란을 신경 쓰며 ""모델 안전""과 사회적 영향에 민감한 브랜드로 자리잡아왔기에, 원천 차단이 오히려 맞는 결정이라고 봄. 정치 얘기 하다가 상대가 억지 부리면 말을 아끼는 것과 같다고 생각함
          + 표면적으로 “복지 포장”일 수 있지만, Anthropic 내부는 진짜로 “감정 투사”에 진심인 윤리주의자 집단임. 정권이 힘을 얻으면 “모델 복지”가 권위주의 명분이 될 수도 있으나, 그런 것 말고도 다른 정당화 명분이 넘쳐남
     * 덜 검열된 중국 오픈소스 모델들이 이 모든 정책에서 우리를 해방시켜 줄 날이 기대됨. Anthropic는 그냥 유아 모드라도 두고, 성인은 선택적으로 해제할 수 있게 했으면 좋겠음
          + 중국 모델들도 덜 검열된 게 아니라 검열 방향이 다를 뿐임. CCP 검열 기준과 방향이 맞다 싶으면 좋은 선택지 되겠지만, 예를 들어 Qwen 번역 모델이 “Falun gong”, “시 주석 푸우곰” 등은 아예 번역하지도 않는 등 자기만의 규제 선이 존재함
          + “중국제 모델이 더 적은 검열로 선택될 날이 오리라고는 생각도 못했음”
          + Anthropic가 자해, 폭탄 제조 지침, 암살 등 문제에서 선을 긋는 데는 실제로 합리적(법적, 경제적, 윤리적) 이유가 있음. 근본적으로 세상 모든 철학·이념에는 ‘도덕성’이 들어갈 수밖에 없으며, 탈권위적 자유지상주의조차 결국 ‘도덕철학’임
          + 중국 정부 자금이 투입된 오픈모델이 결국 개인의 자유와 해방을 보장해 줄 거라는 기대는 아이러니함. 결국 시장 점유율과 기술 과시 경쟁이지 진짜 ‘해방’과는 거리가 있음
     * 주요 LLM 챗봇 제공사 중에 대화 포크(분기)를 자유롭게 쓸 수 없는 현실이 3년이 넘게 이어지고 있음. 여러 가지 결과를 시도하려면 메시지 수정으로 기존 내용까지 잃게 돼서 매우 불편함. 이런 간단한 기능조차 구현하지 않는 이유를 모르겠음
          + ChatGPT에는 분기 후 롤백 기능이 기본적으로 들어가 있고, 크롬 확장프로그램(chatgpt-conversation-tree)을 통해 대화 나무 탐색도 가능했음. 다만 아직 마니아틱한 UX라서 공식 지원까지는 가치가 없다고 판단했을 수도 있음
          + ChatGPT Plus(이전에는 무료버전서도 지원)에서는 각 메시지별 버전을 좌우 화살표로 전환할 수 있음
          + Google AI Studio는 대화 어디서나 브랜치 파생이 가능하게 설계됨
          + 자동화와 폴더 정리로 gptel + 마크다운 폴더를 써서 이 기능을 비슷하게 구현하지만, 이 정도는 기본 기능으로 내장되어야 효율성이 커짐(캐시 최적화 등)
          + 그래서 나는 로컬 호스트 기반 LibreChat을 쓰고 있음. 메시지 병합은 불가능해서 추후 요약 기능 등이 필요할 듯함. top-n ""next best"" 색상 표시 모드도 생겼으면 함
     * 이런 논의 자체가 Anthropomorphic(인간 중심적) 관점이 강하게 드러나는 사례로 보임. 회사 이름조차 그게 잘 묻어 있음
"
"https://news.hada.io/topic?id=22602","카운터-스트라이크: 기숙사에서 만들어진 10억 달러 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    카운터-스트라이크: 기숙사에서 만들어진 10억 달러 게임

     * Counter-Strike는 대학 기숙사에서 시작된 프로젝트로, 세계적으로 큰 성공을 거둔 1인칭 슈팅 게임임
     * 이 게임을 만든 Minh Le와 공동 창작자는 광고 수익만으로 매월 2만 달러 이상을 벌었던 경험이 있음
     * 2000년 Valve Corporation에 의해 공식 출시된 후, 다양한 후속작과 e스포츠 산업을 탄생시켰음
     * Le의 모딩 경험과 열정이 새로운 게임 개발 방식에 큰 영향을 미쳤음
     * Counter-Strike는 적은 자원으로 빠르게 재미있는 게임을 만들 수 있음을 보여주며, 슈팅 게임 분야에 지대한 영향력을 남겼음


카운터-스트라이크 개발의 기원과 성장

   한밤중, 대학 기숙사 방에서 Minh Le는 학업에 집중하기 어려운 상황을 겪음

   Minh Le는 Simon Fraser University에서 컴퓨터공학을 전공하였으며, 컴퓨터 활용 능력이 뛰어났음. 하지만 취미로 만든 비디오 게임이 공동 창작자와 함께 광고 수익으로 매달 2만 달러가 넘는 수입을 가져와 집중력을 분산시키는 요인으로 작용함

   동시에 10만 명 이상의 플레이어가 Le가 만든 1인칭 슈팅 게임인 Counter-Strike에서 테러리스트와 카운터테러리스트로 나누어 인질 구출이나 폭탄 해제 미션을 놓고 실시간으로 경쟁함. Le는 ""그냥 쉽게 시작해서 적을 무찌르며 즐길 수 있는 게임을 만들고 싶었다""고 말함

공식 출시 및 산업적 영향

   2000년 가을, Valve Corporation이 Counter-Strike를 공식 출시하면서, 총 6편 이상의 후속작과 e스포츠 산업의 성장으로 이어짐. 이 게임은 무기 스킨과 같은 코스메틱 아이템 판매로 수십 억 달러의 수익을 창출함

   Counter-Strike는 수 십년간 이어진 슈팅 게임 장르 전반에 큰 영감을 주었으며, 게임 역사상 가장 중요한 작품 중 하나로 평가받음

모딩 문화와 혁신

   Counter-Strike의 초기 개발 배경에는 눈에 띄는 성과 조짐이 거의 없었음. Minh Le는 게임과 컴퓨터 프로그래밍에 대한 열정으로, 기존 게임의 코드를 변형(modding) 하는 하위 문화에 매력을 느끼게 됨

   새로운 게임 전체를 처음부터 만드는 것에 비해, 모딩은 더 낮은 비용과 적은 시간, 제한된 자원으로도 창의적인 결과물을 만들어낼 수 있는 장점이 있음

Minh Le의 초기 모딩 경험

   1996년 대학 1학년 때, Le는 Quake라는 판타지 슈팅 게임을 기반으로 한 군사 테마 모드인 Navy SEALs를 개발함

   2년 뒤에는 Quake 2의 속편을 이용해 “다이하드”와 “리썰 웨폰”에서 영감을 받은 빠른 템포의 액션 게임인 Action Quake 2를 창작함

요약

   Minh Le와 공동 창작자가 기숙사라는 환경에서 열정과 창의력, 그리고 모딩 문화의 장점을 극대화하여 Counter-Strike를 탄생시켰으며, 이 게임은 세계적인 성공과 게임 산업 전반에 큰 영향을 끼친 대표적 사례임

   이제 Jess Cliffe는 그냥 '공동 창작자'라고만 언급되네요. 문제된 사건도 2019년에 무혐의로 보호관찰 풀렸다고 하던데

        Hacker News 의견

     * 서버 브라우저가 점점 사라지는 현상에 아쉬움을 느끼는 중임. 예전에는 직접 작은 커뮤니티를 만들고 관리할 수 있었지만, 이제는 매치메이킹 시스템에 의존하게 돼 서로 자연스럽게 알게 되거나 친밀해질 기회가 줄어듦. 예전에 Counter-Strike 1.6의 T3Houston 서버 운영진이었음. 워크래프트3 모드를 커스텀해 경험치/레벨 시스템, 외부 아이템 스토어, 플레이어 DB 등이 통합되어 있던, 꽤나 큰 커뮤니티를 기억함. 직접 서버를 탐색하다가 우연히 이 커뮤니티를 발견했고, 자주 오는 이들과 점점 친해졌음. 지금처럼 공감대를 형성하기 어려워진 환경과, 함께 관리할 수 있는 도구들이 줄어 듦에 따라 전체적으로 독성이 심해진 느낌임. 참고로 T3Houston 이름을 아는 사람이 있다면, 나는 Stealth Penguin임
          + 그 글을 보고 감동받아 Hacker News에 처음으로 계정을 만들어 반응하게 됨. 내가 바로 그 서버들 운영자였음. Stealth Penguin 기억함. 함께 만들었던 서버 네트워크와 통합 시스템으로 모두가 즐거워하던 그 시절이 너무 그리움. 대학 시절, 순수한 열정만으로 이런 걸 할 수 있었다는 자체가 행복했음. 너도 잘 지내길 바람
          + 2000년대 초반 게임 플레이하던 시절이 정말 그리움. 사람들과 진짠 대화하고, 드라마도 생기고, 친분도 쌓였음. Quakenet이나 포럼에서 클랜마다 채널도 있었고, 1000명 넘게 모이기도 했음. 카운터 스트라이크, Day of Defeat 등 다양한 게임에서 실제로 팀을 짜서 경기하고, 실제 오프라인 대회에서도 60개 이상 팀이 참여하기도 했음 스마우 이탈리안 란 파티 2002 현장 사진. 요즘엔 Reddit 같은 곳이 과거 포럼의 대체가 안 됨. 얕게 흘러가 버리며 의미있는 토론이 일어나지 않음
          + 나도 그 시기 엄청난 향수가 있음. Counter-Strike가 인터넷과 TCP/IP 구조를 이해하게 해줬고, 전용 서버 돌리려고 리눅스를 독학했음. C 언어 배워 직접 모드 만들어보기도 했고, 클랜 웹사이트 만들어 셀프 호스팅도 했음. 커뮤니티가 대단했던 건 네가 언급한 서버 브라우저 덕분이기도 하고, IRC로 이어진 커뮤니티도 지금보다 훨씬 유기적이었음. 지금도 게임은 가끔 즐기며, 요즘은 리눅스에서도 다 잘 돌아감. CS2용 서드파티 서버 브라우저와 모드 서버도 있어서, 예전만큼은 아니지만 아직 남아 있음. 향수에 젖으면 한번쯤 구경해볼 만함
          + 서버 브라우저가 없는 또 다른 문제점은 현재 유저들이 ""최적 매치""를 자동 시스템에 맡기게 된다는 점임. 이로 인해 스키너 박스 같은 조작이 쉬워지고, 때론 패배 확률이 높은 매치에 일부러 배정되어 심리적 보상감을 컨트롤당하기도 함. 예전엔 그냥 지역 서버 사람들과 무조건 매치해서 그 안에서만 성장할 수 있었지만, 이제는 ELO 등급 시스템 덕에 누구나 오르락내리락 할 수 있음. 나는 그리스 출신이며, 초고속 인터넷 전에는 많은 LAN 아레나가 있었음. 그래서 잘하는 친구들에게 두드려 맞기도 했지만, 같이 논다는 기분이라 즐거웠음. 결국 승패에 연연하지 않게 되며, 남을 관전하면서 배우기도 했고 실제로 실력이 늘어 로컬 CS 클랜에도 들어가게 됨. 최고의 실력은 아니었지만 그때의 소중한 추억을 간직하고 있음
          + 예전에는 자주 만나는 유저들 덕분에 어느 정도 책임감과 질서가 있었음. 독성 문제도 요즘보다 나았음
     * 기사에 언급되지 않았지만, Counter-Strike가 역사상 가장 유명한 FPS 맵인 de_dust2를 낳았다는 점을 짚고 싶음. 커스텀 맵 기능이 있는 FPS라면 de_dust2로 이식되는 건 시간문제임. 관심 있는 분들은 de_dust2 제작 뒷이야기 미니 다큐멘터리도 추천함. de_dust2가 지금도 최고로 플레이 많이 된 FPS 맵인지, 아니면 포트나이트 같은 게임 맵이 더 유명한지 궁금함
          + 공유 고마움. de_dust2가 여전히 가장 많이 플레이되는 FPS 맵이라고 믿음. 포트나이트는 맵이 자주 바뀌고 매년 새롭게 만들어져서 해당이 안 됨. 예전 Halo가 유행할 때 Blood Gulch 같은 맵도 인기가 많았고, Team Fortress의 2fort도 유명했음. 그럼에도 de_dust2가 가장 대표적이고 앞으로도 그 자리를 지킬 것 같음
          + 나는 CS에 들어가면 항상 dust2만 플레이함. 정말 완벽한 맵임. 그리고 Aztec 맵도 비오는 분위기 때문에 좋아함. 빈 서버에서 혼자 들어가 맵 분위기만 즐길 때도 있었음
          + Dave Johnston의 de_dust2 제작기 블로그 글도 추천함: https://www.johnsto.co.uk/design/making-dust2/
          + 젊은 세대에게는 Call of Duty의 Rust, NukeTown도 상징적인 맵임. 나는 Xbox 세대로 자라왔기에 이 맵들이 깊은 인상을 남겼음
          + VR에서 내 홈 환경을 dust2로 설정해서 이용함. 3D로 직접 걸어 다니면 과거의 시야선이 환기돼서 신기함. 아직도 mid doors 지나갈 때는 무의식적으로 고개를 숙임
            VR용 dust2 홈 환경 스팀 창작마당 링크
     * 전설적인 슈팅 게임 중 하나가 기숙사에서 시작한 모드에서 출발했다는 점이 놀랍고, Valve가 그걸 차단하지 않고 포용했다는 점이 정말 좋음
     * 뉴욕타임스 Counter-Strike 관련 무료 읽기 링크
     * 나는 CS: Source부터 시작해 금방 1.6 시절로 옮겨갔음. 당시는 재미있는 funmap, 모딩이 활성화되어 있었음. Nipper의 맵처럼 이상한 탈것, 커다란 맵, fy_iceworld, gun game 등 뭐든 가능했음. 오랫동안 코어 게임은 변하지 않아 유저들이 자신의 실력만으로 성장하면서 과금, 반복적인 보상 시스템 없이 순수하게 즐길 수 있었음. 요즘 대형 게임사의 시즌제, 인게임 구매 유도 등에는 별로 흥미 없음. 이미 돈 내고 샀는데, 계속 현질을 유도하는 시스템이 아쉬움
          + fy_iceworld에 대한 짧은 시리즈 (RockPaperShotgun 링크)도 추천함. 나는 Garry's Mod 맵도 그렇게 즐겼음. 랜덤 서버에 접속하면 무슨 맵, 어떤 에셋이 다운로드되어 등장할지 몰라서 매번 신선하고 기발했음. 올드 인터넷만의 개성이 느껴졌음. 요즘 소스 엔진만의 뚜렷함과 반응성은 잘 안 느껴짐
          + 내 생각에 CS의 핵심은 모더와 맵퍼들이 빚은 다양성임. 그런데 CS:GO부터 Valve는 이런 창작 생태계를 점점 어려워지게 했음. 하지만 이런 자유로움은 우리 세대의 특징이기도 해서, 내 사촌처럼 요즘 세대는 업데이트가 없으면 재미없을 거라 생각한다고 함. 시대가 바뀌었다고 느껴짐
          + CS:GO 출시 당시 팀의 어린 멤버가 나를 LAN 카페로 초대해서 같이 플레이했는데, 몸은 녹슬었어도 오랜 연습으로 인한 근육 기억력이 남아 있는 걸 보고 놀라는 반응이 기억남. 최근에는 게임 잘 안 하지만, 마지막으로 빠졌던 게임은 Tribes: Ascend였고 그게 끝나고 새 게임을 시작하진 않았음. RPG가 아닌 게임에도 반복 요소를 넣어 몰입과 유지율을 높이려는 게임업계의 전략이 점점 강조되는 것이 별로임. 지금은 과거에 느꼈던 감정이 그 시대와 상황의 산물이라는 걸 깨달았고, 요즘 아이들은 그들만의 새로운 추억을 만들어가고 있다고 생각함. 도박 요소만은 진짜 싫음
     * qquake/Quake 2 커뮤니티가 CS 등장 이후 분열되었다는 (조금 비이성적인) 반감이 있음. 예전 프리포올(Free-for-all) 혼돈의 로켓·레일 사격이 가장 좋았는데, CS는 '캠퍼'의 대명사로 느껴졌음. 시뮬레이션보다는 즉각적인 리스폰과 순간 반사 신경, 끊임없는 움직임이 내 취향이었음. 그래도 CS가 오랜 세월 살아남은 것은 인정함
     * 예전에 CS:GO를 하던 사람들에게 팁 공유. 2012~2014 시즌에 오픈하지 않은 크레이트(상자)가 있는데, 지금 최고 만 31캐나다달러까지 오름. 최근 확인해보니 천 달러 가치가 넘어 감. 이걸 팔아서 가족, 친구들 게임 구매비로 쓸 수 있었음
          + Dota 2 플레이어에게도 해당됨. 오래된 코스메틱 아이템은 가격이 크게 올랐음. 내 친구가 예전 받은 아이템이 500달러에 거래된 적도 있음. 자신의 인벤토리 가치는 이런 사이트에서 공개 상태로 바꿔 확인할 수 있는데, 이 후에는 사기꾼 타깃이 되지 않게 꼭 다시 비공개로 돌리길 추천함
          + 벌써 10년이 넘은 이야기인데, 여전히 CS:GO가 내겐 신작 같은 느낌임. 다들 1.6을 하는 인상이 여전했음
          + 나도 같은 방식으로 판매해서 스팀 월렛에 수백 달러가 들어옴. 다 열었으면 얼마나 벌거나 손해 봤을지 궁금함
          + csgo2 출시 때 크레이트 전부 팔아서 350달러 벌었음
          + TF2도 똑같이 경험함. 약 300유로 정도 벌었음
     * CS1.6으로 성장해 수천 시간을 쏟았지만, 현대 CS에서 Valve가 도입한 도박 시스템이 싫음. 타 게임에도 뽑기 시스템은 있지만, 적어도 그 게임에서는 외부와 연동된 도박이나 세컨드마켓이 이 정도로 만연하지 않음. CS는 스킨을 플레이어끼리 자유롭게 거래할 수 있어서 온갖 도박 생태계, '스킨 룰렛'까지 발전함. CS 유튜버, 스트리머, 심지어 프로팀마저 스킨 카지노와 연계됨. 실제 프로 선수 스트리밍에서 500달러를 스킨 도박하는 걸 목격한 적 있음. 전체 프로 씬 뉴스 사이트조차 도박 광고 투성이며, 경기 중에도 도박 발언이 많음. 이런 구조 때문에 매치픽싱(승부조작)도 만연함. 아무도 심각하게 조사하거나 막지 않고 있음. 혹시 더 알고 싶으면 Richard Lewis의 글 참고 바람. 눈치 보지 않고 게임서버를 직접 운영할 수 있는 CS 같은 근본 FPS가 나오길
       바라는데, 현실은 Valorant와 보안 논란 뿐임. 결국 CS1.6만 하다가 생을 마감할 듯 shrug
          + 싫어할 수도 있지만 스킨 시스템이 없었다면 Counter-Strike도 끝났을 것이고 Valve 자체도 존폐 위기였을 것임. 스킨은 사실상 돈복사기임
          + 언급한대로 도박 없는 최신 그래픽, 셀프 호스팅 지원 슈터를 원한다면 본질적으로 그게 CS임. 네가 요구하는 건 도박 시스템만 뺀 CS임
          + 승부조작을 경기 내 약물 때문으로만 생각하지 말라는 의견임. 매치 결과는 수백 가지 원인 때문일 수 있고, 뇌에서 무의식적으로 반복되는 패턴이나 약물 등도 작동할 수 있음. 스포츠 전반에서 이런 현상을 관찰했지만, 아무런 증거는 없음
          + 도박 요소가 그렇게까지 중요한지 의문임. 내가 보기엔 스킨은 단순히 외관일 뿐이고 실제 게임 플레이에 영향이 없음. 신경쓰지 않으면 도박과 무관하게 게임을 즐길 수 있음
          + 1만 시간 넘게 CSGO/CS2를 한 입장에선, 네 주장에 동의하지 않음. CS의 케이스 시스템은 업계에서 가장 비양심적이지 않음. 모든 케이스에서 보상을 받고, 콘텐츠는 오직 외관일 뿐 실제 게임 성능에는 영향이 없음. 다른 게임들에 비하면 pay2win 요소가 전혀 없음. 오히려 스킨은 서로 수집, 거래, 현금화까지 가능해서 수백~수천 달러가 될 수 있음. 다만 서드파티 도박 사이트에는 동의하지 않음. e스포츠의 도박 관련 논란도 어느 스포츠에서나 있는 일이고, 팀의 재원이나 저변 확대에도 중요한 요소임. 방송에서 도박에 대한 언급은 실제로는 굉장히 짧고 미미함. 2025년 기준 e스포츠 투자금도 대부분 도박 및 사우디 보조금에서 나옴. 아이러니하게도 시청자들은 pay-per-view 구조에는 전혀 관심없고, 실제로 돈 쓸 의지도 거의 없음. 만약 도박을 완전히
            막으려면 실질적으로 2, 3부리그나 지역씬은 생존이 불가능함. 승부조작 문제에 대한 언급도 트위치 채팅 수준을 너무 심각하게 받아들일 필요가 없음. Richard Lewis도 내가 말한 모든 내용을 폭넓게 다루고 있음
     * 최근에 play-cs.com에서 CS1.6 온라인 포트 버전을 접함. 브라우저에서 원판 거의 그대로 플레이 가능하고 랭크도 올라서 좋았음. 체험해보고 싶으면 추천함
          + 나도 play-cs 정말 좋아함. 다만 예전 윈도우 네이티브판보다 웹브라우저 버전에서 약간의 지연이 느껴짐. 아마 파이어폭스 말고 크롬에서 하면 나아질 수도 있다고 생각함
     * 나는 actionquake(aq2)부터 시작했음. Counter-Strike의 창시자 Minh ""Gooseman"" Le가 AQ2 팬이었고, CS 초기(1999년 Half-Life 모드로 출시)는 AQ2의 핵심 아이디어를 가져와 좀 더 정교한 히트박스, 구매 메뉴, 맵, 전술적 템포로 발전시켰음. AQ2는 ""Quake와 CS 사이의 다리""로 표현됨
          + 당시 엄청난 모드가 많았음. 개인적으로 ""the specialists"" 모드도 정말 재미있었던 기억이 남
          + AQ2 커뮤니티에서는 CS가 너무 느리다고 여겼음. 계속 스트레이프 점프로 정글, 도심을 가로지르던 입장에선 당연한 반응임
          + 아직 못 봤다면, TastySpleen Studios에서 aq2의 정신적 후속작 Midnight Guns를 개발 중이니 추천함
          + AQ2는 정말 재미있던 모드였음. 오랜만에 하긴 했지만 존 우(John Woo) 영화처럼 액션 캐릭터로 총 겨누고 다니는 기분이었음. 기사에서는 Minh Le가 AQ2를 만들었다고 나오던데 확인 바람
          + aq2는 추억의 명작임. 절벽 맵에서 케이블카 밑 hatch로 떨어져 다리 부러트리고 바로 옆 적을 산탄총으로 쏴버리던 순간이 아직도 생생함
"
"https://news.hada.io/topic?id=22534","15달러 산업용 컴퓨터 모듈 'ArmSoM CM1' : Rockchip RK3506J 하이브리드 프로세서 탑재","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     15달러 산업용 컴퓨터 모듈 'ArmSoM CM1' : Rockchip RK3506J 하이브리드 프로세서 탑재

    1. 가격 혁명
       전 세계 최초 15달러 산업용 컴퓨팅 모듈
       2.하이브리드 아키텍처
       Rockchip RK3506J：
       ✓ 3x Cortex-A7 @1.5GHz (Linux)
       ✓ Cortex-M0 (실시간 제어)
    2. 산업용 신뢰성
       ✓ -40°C~85°C 극한온도 인증
       ✓ 50G 충격/진동 내성
    3. 독립형 작동
       Type-C 전원 연결 즉시 Linux 구동
       베이스보드 불필요 (70x42mm 초소형)
    4. 적용 분야
       ✓ PLC 제어
       ✓ HMI 인터페이스
       ✓ 스마트 가전
"
"https://news.hada.io/topic?id=22571","링크드인은 왜 평범함을 보상하는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           링크드인은 왜 평범함을 보상하는가

     * 링크드인은 더 이상 본래 목적과 달리, 의미 없는 자기 홍보와 저품질 콘텐츠가 넘치는 공간임
     * 많은 사용자가 과도하게 미화된 조언과 실제로는 무의미한 글을 자주 업로드함
     * 알고리듬이 이런 콘텐츠의 반복적 생산과 소비를 장려하여, 플랫폼에서의 체류 시간과 광고 수익 극대화를 유도함
     * 이런 환경에서도 여전히 가치 있는 정보가 존재하지만, 저품질 게시물에 묻혀 발견이 어려움
     * 진정으로 커리어에 도움이 되고 싶다면, 깊이 있는 작업과 블로그와 같은 다른 플랫폼에서 의미 있는 콘텐츠 제작이 더 효과적임


링크드인의 본래 취지와 현재 모습

     * 링크드인은 이력서를 자주 업데이트하지 않아도 되는 온라인 이력서 기능을 제공하는 본래 취지에서 출발함
     * 그러나 현재 링크드인은 의미 없는 자기 브랜드 구축 및 저품질 콘텐츠로 가득 찬 공간으로 변질됨

반복되는 미약한 콘텐츠와 그 유형

     * 사용자는 독창성이나 실질적 가치 없이 무의미한 어드바이스나 스토리 형태의 글, 예를 들어 ""이혼 경험이 B2B 영업에 주는 교훈"" 식의 게시물을 자주 보게 됨
     * 대부분의 포스트가 'Toxic Mediocrity' 즉, 유해할 정도로 평범하고 따끔하게 지적하기도 애매한 콘텐츠임
     * 겉으로는 의미 있고 통찰이 있는 척 하지만, 실제로는 핵심 없는 150단어짜리 요약에 불과한 경우가 많음

알고리듬과 사용자 행동의 악순환

     * 많은 사람들이 이런 콘텐츠를 진심으로 커리어 개선을 위해 올리지만, 진짜로 도움되는 방식이 아님
     * ""링크드인 성장법""처럼 소개되는 댓글 달기, 축하 메시지 남기기 등 반복적 상호작용이 오히려 저품질 콘텐츠 확산을 심화시킴
     * 이 같은 행동은 알고리듬이 사이트 체류 시간과 참여율을 신호로 삼아, 반복적으로 이런 콘텐츠 노출을 늘리는 구조를 만듦

플랫폼 활용에 대한 조언

     * 링크드인은 Microsoft 소유의 수익 창출 플랫폼임을 기억할 필요가 있음
     * 그 어떤 포스트도 커리어 자체를 바꾸지 못하며, 진짜 가치 있는 작업과 그에 집중하는 글이 중요함
     * 깊이 있는 글을 주기적으로 블로그 등에 작성하는 것이 저질 콘텐츠에 휩쓸리지 않고 더 나은 결과를 낳을 수 있음

좋은 콘텐츠 찾기 및 실질적인 개선 방법

     * 진짜 가치 있는 콘텐츠를 만드는 사람들은 링크드인에 상주하지 않으나, 때로는 플랫폼에 게시물을 재활용하는 경우가 있음
     * 소비자(독자)로서 게임에 휘둘리지 않는, 진정성 있는 작성자의 콘텐츠를 찾아 적극적으로 홍보하는 행동이 긍정적인 변화로 이어질 수 있음
     * 만약 그마저 어렵다면, 인터넷의 의미 없는 정보에서 벗어나 디지털 디톡스도 유효한 선택임

        Hacker News 의견

     * 이 글을 보면 마케팅을 이해하지 못하는 개발자가 쓴 것 같음
          + ""여기에 아무리 글을 써도 커리어가 바뀌지 않는다""는 말은 동의하지 않음. 나와 내 주변 LinkedIn 친구들은 실제로 수백만 달러의 매출을 LinkedIn에서 얻었음
          + ""의미 있는 일을 하는 것이 도움이 될 수 있다""는 건 LinkedIn에서 성공하기 위한 기본 조건임. 실제 전문성을 바탕으로 한 강한 의견이 최고의 퍼포먼스를 보임
          + ""빈도보다 깊이를 추구하라""는 조언은 마케팅 현실과 맞지 않음. 전체 오디언스의 95%는 내 컨텐츠 볼 때 당장 구매할 생각이 없음. 3-5년 안에 구매 사이클에 들어오면, 딱 한두 번 본 깊은 글 보다는 1,000번 본 짧은 글에서 신뢰를 얻음
          + 블로그에 장문의 심화 글을 올리고, LinkedIn은 사람들이 내 프로필과 핵심 컨텐츠로 유도하는 퍼널 역할을 해야 함. 이메일도 받고 YouTube나 Twitter 커뮤니티로도 전환 가능
          + LinkedIn이 내 전체 매출의 큰 비중을 차지한 것과 동시에 정신적 피로와 불안의 주범이기도 함. 공개적으로 내 생각을 밝히다 보면 누군가 공개적으로 반박하거나 비난할 수 있음. 그럼에도 커리어적으로 엄청난 이득이 있었으니, 다시 선택하라고 해도 똑같이 할 것임
          + 사람들의 주의를 끄는 끝없는 게임임. 진짜 가치 창출은 뒷전이고, 모두가 제품을 사게 하려고 정신적 트릭을 쓰는 느낌임. 이게 분명 잘 먹히고, 수십억 달러 시장임은 맞지만 솔직히 좀 우울함
          + ""마케팅을 모르는 개발자가 쓴 글 같다""는 데 완전히 동의함. 많은 개발자들은 본질 없는 마케팅을 불편해하는데, 우리는 사실을 기반으로 일하도록 훈련 받기 때문임
            물론 마케팅이 세일즈에 거대한 영향을 끼친다는 건 모두 알지만, 멀찍이 떨어져 지켜보는 것도 중요하다고 생각함
            이 글은 LinkedIn이 일반적인 경력 SNS에서 비즈니스/마케팅의 황금어장으로 바뀌고, 그 변화가 마음에 들지 않는 저자의 불만을 다룬 글 같음
            만약 Salesforce가 github 경쟁자로 방향 전환해도 똑같이 불평이 나올 듯함
          + 'LinkedIn에서 승리한다'는 말이 너무 웃겨서 킥킥거림. 농담의 시작처럼 들림
          + ""의미 있는 일"", ""전문성이 뒷받침된 강한 의견""이 LinkedIn 성공의 길이라는 말과, ""1,000번 반복적으로 공유하라""는 마케팅 현실 사이에서 모순 혹은 트레이드오프가 있다고 생각함
            1,000번 같은 내용을 쓸 시간에 실제로 더 의미 있는 일을 할 수 있었을 것임
            실제 임팩트는 ‘업무의 질 x 공유 횟수’와 비슷한 공식일 수 있지만, 한쪽에 최적화하면 분명히 시간 또는 집중이 소모된다는 걸 인정해야 함
          + 강한 의견은 맞음. 하지만 실제 전문성이 꼭 필요한 전제 조건은 아님
            약간의 맥락 이해만 있으면 반응을 끌어내는 자극적인 글을 쓸 수 있고, 결국은 평범함도 충분히 보상받는 구조임
     * LinkedIn은 구직/검색/지원할 때 쓸만함. 내가 느끼기에 정말 유용한 건 그뿐임
          + 실질적으로 도움 안 되는 건 다음과 같음:
               o 아무 관련도 없는 영업사원이 새 기업용 제품 팔려고 할 때
               o 채용 스팸(관심도 없고, 자격도 다르고, 거리도 먼 오피스 출근 등등)
               o 전 직장 동료들의 온갖 행사 후기나 단체 퇴직 파티
               o 개발자/리눅스 관련 컨텐츠 옆에 붙는 코드/튜토리얼 광고
               o 네트워크에 없는 신입들의 구인 스팸
               o Seth Godin과 wannabe 인플루언서들의 자기계발/마케팅 포스트
               o 귀여운 동물/아기 영상
          + 리크루터 스팸을 효과적으로 거르는 방법은, 이름을 이모지(나는 손흔드는 이모지 사용)로 바꾼 뒤 실제 이름을 성 입력란에만 적는 것임. DM이 '안녕 %손흔드는 이모지%'로 시작하면 무조건 자동 스팸임을 바로 알 수 있음
          + 수년 전에 만든 프로필에 이력만 대강 써둔 엔지니어라면 진짜 실력자인 경우가 많음. 나 역시 LinkedIn은 이를 구분하는 데만 쓰는 중임
          + ""B2B 세일즈에서 X가 내게 가르쳐준 것""류 포스팅도 잊었음. 2~3년 전에는 내 피드가 이걸로 넘쳤는데, TikTok 유행의 심심한 버전 같았음. 지금은 사라져서 다행임
          + 알고리즘만 살짝 조정해도 이런 난잡함을 고칠 수 있는데, LinkedIn이 이미 비즈니스 SNS 시장에서 독점적이니 굳이 경험을 개선할 이유가 없음. 이익에 도움이 안 되기 때문임
          + 너무 억지로 소셜 플랫폼이 되려는 느낌임
     * 논리적 찬반 다 제쳐두고 보면, 억지로 로그인할 때마다 수천~수만 명이 시스템을 공략해 경력 관리에 집착하는 광경을 보는 느낌임
          + 내가 평소에 ‘그냥 일을 잘 하며 조용히 살자’고 마음먹었는데, 이런 경쟁의 소용돌이가 세상 전체를 휩쓸고 있는 게 압도적임
          + 모두들 시간과 에너지를 들여 말로 포장하거나 ‘스네이크 오일’을 팔듯 실속 없는 자기 홍보를 하고, 세상은 그걸 장려하거나 용인함. 왜냐면 “이게 현실”이니까
          + 삶의 진짜 해답은 “쥐 경주 너머에 더 많은 게 있다지만, 결국 경주 우승하지 못하면 낙오자다!”라는 뉘앙스임. 이런 게 맞는 부분도 있겠지만, 실제로 커리어를 쌓기 위해선 점점 더 필수가 되고 있음
          + 내 방식은, 소음 다 차단하고 내 삶과 생계에 꼭 필요한 것만 집중하는 것임. LinkedIn도 1년에 몇 번만 들어가고, 요청만 받아줌. 대가로 넓은 인맥을 놓쳐 손해 볼 수도 있지만, 정신 건강을 위해 충분히 감수할 만함
          + LinkedIn은 최대하면 커리어용 덫이고, 넓게 보면 막다른 길임. 나는 리크루터 연락만 받게 ‘딱 최소한’만 활용하고, 그 외엔 시간 낭비 안 함
          + 예전에 리크루터가 내 이력서와 LinkedIn 프로필이 디테일이 부족하다며 ""코칭""을 해주려 했지만, 아이러니하게도 그러면서도 나랑 인터뷰를 잡았었음.
            직접 느끼기엔 LinkedIn이 이득이 된 사람도 극히 소수고, 대부분은 그저 온라인 시간낭비 채널에 불과함
     * LinkedIn 스팸을 막기 위해 마법사 컨셉으로 포스트를 씀: https://dungeonengineering.com/i-could-have-cursed-him-instead-i-chang…
          + 정말 멋진 풍자 글임. 그런데 하나만 꼬집자면, “In the beginning was the Word, and the Word was import this, spoken by Guido van Rossum…”으로 시작하지만, 실제로 'import this'는 Tim Peters가 쓴 것임
          + ""They lift others up. Literally, in my case.""에서 빵 터졌음
          + 엄청 재밌음 #Inspiring #CastTogether
     * LinkedIn 포스트들은 대체 현실 같아서 도저히 진지하게 받아들이기 어려움
          + 댓글도 종종 독기 가득하고 이상한 분위기임
          + 개인적으로는 (이전 Twitter에서) LinkedIn보다 더 많은 일자리를 찾았음
          + LinkedIn은 두 가지 목적이 있지만, 자주 혼동되는 것 같음
              1. 리크루터와의 연락 – 사실상 채팅 창에만 있어도 충분하고, 실제로 구직에 효과적임
              2. 마케팅 – 개인 브랜딩이든 제품 광고든, 판을 벌이는 자리가 됨. 영업 전문가들과 이야기해보면 LinkedIn 만큼 리드가 잘 들어오는 곳도 없다 함
                 결론적으로 LinkedIn은 진짜 이상한 곳이지만, 목적에 따라 잘 작동함
          + LinkedIn은 사실상 봇들이 돌아다니는 대체 현실임. 댓글 보면 ""Very Insightful"" 따위 복붙 댓글이 많고, 스팸 계정들이 원격 직업 따기 위해 경쟁하는 것 같음
            직접 본 포스트들은 주로 누가 어디까지 ‘밈’화된 컨텐츠로 관심을 끄느냐에 집중함
          + 내가 LinkedIn에서 자주 보는 콘텐츠는, “보통의 친절”같은 걸 구세주 반열에 올리거나, 극단적인 절약 등 일상의 작은 일에서 억지 성공담을 뽑아내는 글들임
            HR 담당자들이 ‘채용할 때 이렇게 뽑았다’며 임의 기준을 신격화하고, 개발자들은 ‘시니어와 주니어의 10가지 차이’라 하면서 별 의미 없는 기준을 뽑아내기도 함
            실제 유익한 조언은 희소하고, 결국 ""평범함도 잘 포장하면 왕이 된다""는 약간의 씁쓸함이 남음
          + LinkedIn 옹호자들의 의견도 이해 가지만, 결국 내용에 깊이가 부족해지면 모두 사용을 포기할 것 같음
            지금 추세대로면 AI가 99% 글을 쓸 것 같은데, 그때도 과연 사람들이 계속 소비할지 의문임. 아주 잘 맞춤화된다 해도 인간적인 꺼림칙함이 남음
          + LinkedIn의 검색 기능이 정말 형편없음. 내가 지원한 곳도 단지 LinkedIn 활동이 부족하다는 이유로 탈락했음
            실제로 링크드인에서 어떻게 보이느냐만 따진다면, 그 회사는 진짜 좋은 엔지니어를 분별할 능력이 없음
     * 이 스레드는 LinkedIn에서 금전적 성공을 말했다며 방어적으로 댓글을 다는 사람들이 많음
          + 이건 오히려 ""독성 평범함""이 보상받는 구조라는 OP(원글)의 주장에 힘을 실어줌
          + 마치 다단계 비판 기사에 ""우리는 실제 수백만 달러 벌었다!""고 변호하는 마케터들이 달려드는 것과 같음
          + 다행히 대부분의 직장은 마케팅 부서만으로 이루어지지 않았으니, 각자 자기 분야에서 의미를 찾을 수 있음
          + OP의 불만은 LinkedIn 마케팅 효과가 아니라, 자칭 '마케터'들한테 짓눌리는 경험임
          + LinkedIn 마케팅이 효과 없다고 주장한 게 아니라, 피로감을 토로한 것임. 현재까지도 반박은 없었음
          + 이 모든 '독성 평범함' 마케팅의 근원은 LinkedIn의 기술 기업(Microsoft)임
            예로 든 https://news.ycombinator.com/item?id=44866666처럼, Microsoft는 변했다고들 하지만 실제로는 예전보다 더 심함
            MS를 변호하려는 사람들은 책임을 자기 사용자들에게 돌리려 하겠지만, 정작 문제는 불필요한 중개자로 선 tech 기업 자체임
          + 실제로 많은 회사에서 채용 담당자가 LinkedIn에서 자기들만의 패러렐 월드에 빠지는 느낌임
            평범함이 미덕이 되는 구조에서 진짜 뛰어난 신호가 그냥 묻혀버림
     * LinkedIn은 고용 이력이 중심이 되어 사람들을 '지위 게임'으로 몰아감
          + 진실되게 소통하려 하기 보다는 모두가 자기만의 status point를 쌓으려 하는데, 그게 소속/인맥/직책 등 기득권에 따라 결정됨
          + 결국 '생각 리더십' 같은, 해당 집단 내에서만 의미 있는 호응을 이끌기 위한 글들이 넘치게 됨
          + 포럼이나 Twitter는 실질적으로 더 높은 수준의 아이디어에 지위가 부여되지만, LinkedIn은 완전히 다른 룰로 돌아감
          + 나 역시 내 제품을 홍보하려고 LinkedIn을 씀. 즐겁진 않지만, 그게 사회적 게임임을 알고 있음
          + 나처럼 스타트업 홍보로 글을 쓰는 사람들도, 실제 목표가 뭔지 헷갈릴 때가 많음
            실제 목적은 고객/업계 동료는 물론 리크루터나 VC 타깃도 모두 포함임
            한 경력 많은 리크루터가 내게 ""온라인 퍼블릭 라이프""라고 설명한 적 있는데, 온라인에 존재감이 없으면 정말 필요할 때(이직, 사업 홍보 등) 리스너가 없게 됨
            그래서 끊임없이 LinkedIn 알고리즘에 '나 활동 중!'이라고 신호를 보내야 함.
            결국 이는 알고리즘 최적화를 위한 평범함 연기, 즉 ""존재 확인""을 위한 일종의 관문임
     * LinkedIn이 마음에 안 들면 그냥 안 쓰면 됨. 나는 아무 문제 없이 잘 지내는 중임
     * LinkedIn 피드가 귀찮다면 완전히 비워버릴 수도 있음
         1. 피드 설정을 ""최신글 보기""로 바꿈 https://www.linkedin.com/mypreferences/m/settings/preferred-view
         2. 모든 연결을 언팔로우하면, 피드는 텅 비워지고 알림만 받게 됨
          + 정말 집중과 평온을 얻을 수 있음
          + 그냥 피드를 안 보면 되는 것 아닌가?
          + ""언팔로우""만이 유일한 옵션이라는 게 아쉬움. 나는 연결된 사람의 직접 글만 보고 싶고, 그들이 '좋아요', '공유', '댓글' 단 것까지는 보고 싶지 않음. LinkedIn은 이걸 설정할 수 없게 해둠
     * LinkedIn은 그저 허영의 잔치임. 2025년에 굳이 의미가 있는지도 모르겠음. 필요할 때만 쓰는 채용 사이트임
          + 요즘은 그마저도 별 의미 없는 채용글이 넘쳐 별로임
          + 내가 예전에 다니던 회사의 동향 파악엔 LinkedIn이 유용함
            아침 첫 커피와 함께 CEO나 예전 동료들의 활동을 ‘티 리프 리딩’ 하듯 보는 습관이 있음
            만약 내 5명 이상 지인이 동시에 특정 글에 반응한다면, HR/마케팅에서 사내 이메일을 돌렸다는 신호임
          + 그래도 리크루터에게 직접 접근할 수 있다는 장점은 있음. 직장 선택에 까다롭지 않다면, 콜드 어플라이보다 직접 연락으로 일 빠르게 구할 수 있음
"
"https://news.hada.io/topic?id=22526","OCaml을 나의 주력 언어로 선택한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        OCaml을 나의 주력 언어로 선택한 이유

     * OCaml의 언어적 특성과 생태계는 훌륭하며, 개인·전문 프로젝트 모두에 적합함
     * 정적 타입 시스템, 알제브라 타입, 모듈 시스템, 객체 모델, 사용자 정의 이펙트 등 다중 패러다임과 고급 기능이 안정적으로 통합돼 있음
     * OPAM 패키지 매니저, Dune 빌드 시스템, LSP/Merlin 에디터 지원, Odoc 문서화 도구 등 성숙한 툴체인이 마련돼 있고, 웹·블록체인·툴링 등 다양한 라이브러리 생태계를 보유함
     * 커뮤니티가 접근성·친절함·전문성을 갖춰 학습과 협업에 용이하며, 꾸준한 진화를 통해 미래 전망도 밝음


OCaml을 주요 언어로 선택한 이유

     * 필자는 오랜 기간 다양한 프로그래밍 언어를 사용했으며, 그 중에서도 OCaml을 주요 언어로 선택했음
     * OCaml의 가장 큰 장점으로는 강력한 정적 타입 시스템과, C나 다른 함수형 언어에 비해 뛰어난 함수형 프로그래밍 지원을 꼽음
     * Said 타입 시스템 덕분에 많은 버그 예방과 코드 최적화 경험이 있었음
     * 실제로 여러 개발 프로젝트에서 OCaml을 활용해 생산성과 안정성이 대폭 향상된 경험을 했음

OCaml의 장점과 실무 활용

     * 대부분의 코드가 빠르게 작성되며, 함수 조합과 불변 데이터 사용으로 안전성이 높아짐
     * 최근에는 OCaml의 생태계와 도구(IDE, 빌드 시스템 등) 도 지속적으로 발전하는 추세임
     * 다양한 라이브러리와 외부 패키지 덕분에 실무에서 효율적인 개발이 가능해짐
     * Python, Java와 비교했을 때, OCaml은 덜 유명하지만 생산성, 안전성, 유연성 부분에서 매우 강력한 선택지임

언어적 특성

     * 연구 기원과 산업 적용이 결합돼 표현력·안전성 중심의 기능 발전
          + 사용자 정의 이펙트, affine 세션 등 최신 기능
     * 정적 타입 검사는 안전망이자 설계 도구로, 부실한 타입 경험으로 인한 오해를 불식
     * 다중 패러다임: 함수형, 명령형, 모듈식, 객체지향, 멀티코어 지원
     * ML 계열 문법은 간결·일관적이며, ReasonML 같은 대안 문법도 존재
     * 알제브라 타입(곱·합·지수형)과 패턴 매칭, 다형성으로 데이터/도메인 모델링에 강점
     * 모듈 시스템은 인터페이스·구현 분리, 추상화, 재사용, 고급 다형성까지 지원
     * 의존성 역전: 모듈/이펙트를 통한 유연한 주입 방식 제공

생태계와 툴링

     * 컴파일 타겟: 네이티브, 바이트코드, JavaScript(Js_of_ocaml, Melange), WebAssembly
     * MirageOS를 통한 멀티컨텍스트 라이브러리 작성 규율
     * OCaml Platform:
          + OPAM: 버전 관리·스위치·패키지 인덱스, CI 지원
          + Dune: 빠른 빌드, S-식 구성, dune-release 통한 배포 간소화
          + LSP/Merlin: VSCode, Emacs 등에서 코드 완성·탐색·포맷팅
          + Odoc: 교차 참조·수동 페이지·doctest 등 지원
     * 풍부한 라이브러리: 웹(Dream, Ocsigen), 블록체인·암호화(HACL*), 테스트(alcotest, qcheck 등)
     * 표준 라이브러리는 작지만 Batteries, Base/Core, Containers 등 대안 존재

새로운 도전과 커뮤니티

     * OCaml 커뮤니티는 작지만 지속적으로 성장하고 있으며, 사용자 친화적인 흐름을 보임
     * 새로운 언어나 패러다임에 대한 도전을 원하는 개발자에게 OCaml은 깊이 있게 배울 만한 가치가 있음
     * 많은 사용자는 OCaml의 사용 경험을 통해 새로운 시각과 문제 해결력이 높아진다고 언급함

결론

     * OCaml은 특정 영역(예: 금융, 컴파일러, 시스템 개발)에 국한되지 않고 범용적으로 활용할 수 있는 강력한 프로그래밍 언어임
     * 실전에서 얻은 효율성, 유지보수성, 문제 방지 능력 등은 실제 업무 현장에서 그 가치를 증명함
     * 최신 언어나 트렌드에 비해 다소 덜 알려져 있다 해도, 신뢰도와 안전성을 중시한다면 충분히 고려할 만한 선택지임

   한때 대학원에서 OCaml 다뤘으나, 생태계 진짜 부족하고 레퍼런스도 잘 업고 특히나 누구 물어볼 사람이 없음. 개인적인 기준으로 우리나라에선 프로그래밍언어 학회쪽 아니면 쓰는 것 없다시피 할거임. 코볼 이런거는 들어봤아도 OCaml은 안들어봤을것..

        Hacker News 의견

     * 나는 Google에서 Rust를 Android 팀에 도입한 경험에 대한 발표를 본 적이 있음. 그 중 두 가지가 인상적이었음: 다양한 프로젝트를 Python에서 Rust로 옮겼으니 성능이 그렇게 큰 이슈는 아니었을 것 같고, Rust 사용자들이 가장 좋아한 기능은 패턴 매칭과 ADT(Algebraic Data Types)같은 기본적인 것들이었음. 그래서 Rust가 진짜로 크게 기여한 부분은 수명(Lifetime) 같은 고유 기능보다는 1990년대 ML 언어가 이미 제공하던 요소라고 느낌. 만약 OCaml이 2010년쯤 멀티코어 같은 불편함들을 해결했다면 Rust만큼 인기도 있었을 것 같았음. 아쉽게도 OCaml은 학계와 산업계 사이 간극에 빠짐. 한 가지 덧붙이자면 31비트 정수는 비트 연산할 때 실용적으로 불편하고, 미관상으로는 이중 세미콜론이 정말 마음에 안 들었음
          + OCaml은 그 당시 이미 상당히 괜찮은 상태였다고 생각함. 2010년에 직업적으로 Python보다 훨씬 쾌적하게 사용함. JaneStreet가 무엇을 이룩했는지만 봐도 됨. OCaml이 널리 채택되지 못한 가장 큰 원인은 미국에서 만들어지거나 주도되지 않았기 때문이라고 봄. 언어의 인기가 기술적 우수성 때문이라고 믿고 싶겠지만, 결국 유행의 문제임. Rust가 대중적으로 성공한 원인도 대량의 홍보와 적극적인 커뮤니티 활동 덕분임. 전담 직원까지 두고 적극적으로 이름을 알렸음
          + Google은 실제 서비스 코드에 쓸 수 있는 공식 언어 리스트를 가능한 짧게 유지하려고 노력함. Rust가 C++을 대체·보완할 수 있는 언어라서 선택된 것 같음. OCaml은 그런 위치에 놓이기 어려웠음(Go는 대체할 수 있었겠지만 가능성 낮음). 그래서 Rust가 선택된 가장 큰 이유는 ADT를 제공하는 공식 언어 중 유일했기 때문이지, 빌드 속도를 중시하지 않아서가 아닐 것임. OCaml이 Rust를 대체하지 못한 것도 당연함. GC가 있는 언어는 이미 Go, Haskell 등 다양했고, 2010년 즈음에 베어메탈을 노릴 만한 표현력이 뛰어난 언어는 C++뿐이었음(그마저도 C++11·C++17 이전엔 더 별로였음)
          + 완전 동의함. OCaml이 몇몇 자잘한 문제를 해결했으면 진짜로 중요한 플레이어가 될 수 있었음. 빌드 속도는 지금도 Rust보다 훨씬 빠름. 그런데 OPAM(패키지 관리자)은 자주 버그가 생기고, 헷갈리기로 유명함. Windows 지원은 아주 심각할 정도로 나쁨. 과거 Perl의 Windows 지원보다도 더함. 공식 문서는 너무 간결해서 쓸모가 없을 정도임. 문법 자체도 파악하기 어렵고, 사소한 오타로 인해 파일 절반이 문법 오류라는 식의 메시지도 자주 뜸. Rust의 기존 C 스타일 문법이 훨씬 수월함. 정리하면, OCaml의 이점은 빠른 빌드뿐인데, 그것만으론 굳이 쓸 이유가 부족함
          + 그래서 내가 ML 스타일로 프로그래밍하고 싶을 땐 러스트보단 Kotlin, Scala, F#을 먼저 찾음. 그리고 요즘 Java나 C#조차도 이미 충분히 많은 ML 요소를 채택해서 큰 거부감 없음. Caml Light나 Objective Caml 시절부터 ML 타입 시스템에 익숙한데, 요즘 Rust에 사람들이 열광하는 걸 보면 마치 Rust가 ML 타입 시스템을 새로 들고 온 것처럼 착각하는 것 같음
          + OCaml이 좀 더 잘 준비했으면 좋았겠다는 의견에 대해, 실제로는 언어 선택의 옵션이 다양하다는 점이 가장 큰 장점이라고 생각함. 영국만 해도 (인구는 적어도) 엄청 다양한 언어가 공존함. 예를 들어 유럽의 죽은 언어인 코니시도 최근 지역민들에 의해 부활했고, 목동들 사이에서는 쿠브릭이라는 숫자 세는 언어도 남아 있음. 나도 다음 세대의 가계도를 위해 OCAML 기반의 Geneweb이라는 프로그램을 쓰기 시작했음(TMG라는 Windows 앱에서 이전). 가족 데이터가 14만 명이나 담겨 있음. Geneweb이 OCAML로 만들어져 있어서 언어에 대한 관심이 커짐. 만약 프로그래밍 언어가 어렵다고 느낀다면, 족보/계보학을 한번 해보길 추천함. 곧 GEDCOM이라는 규격 때문에 머리가 아파질 것임
     * 나는 OCaml이 내 사랑하는 언어 중 하나임. 가장 많은 작업은 Writer's Festival 조직을 위해 CRUD 앱을 OCaml(ReasonML 기반 JSX), Dream, HTMX, DataTables로 100% 구현했음. 모듈로 프론트엔드 템플릿을 재사용했고, 데이터 모델에 변경사항이 생기면 컴파일러가 어디서 깨졌는지 바로 보여줘서 매우 만족했음. 엑셀 데이터도 제대로 된 DB로 이동시키고, .odt 형식의 템플릿 일정표나 서버 디스크를 거치지 않고 바로 zip 파일로 내보내는 등 OCaml 생태계에서 놀랍게 많은 것을 구현했음. 다만, DB 쿼리를 다 문자열로 써야 하고, 타입 변환도 수작업이라서 피로도가 하늘을 찔렀음(컴파일 타임 타입 체크가 안 됨). 인증 시스템도 직접 구현해야 해서, 핵심 제품 개발이 아닌 일에 너무 많은 시간을 쏟기 일쑤였음. 여러 언어를 둘러본 다음 느낀 점은 완벽한 언어란 없다는 것임. 모든
       언어가 각자만의 독특한 단점이 있음. 지금은 자신만을 위한 앱을 Rails로 만들고 있는데, 필요한 것들은 거의 다 기본값으로 제공되어서, 언어보단 실제 레이아웃 디자인이나 실제 배포 등 본연의 작업에 집중할 수 있어서 훨씬 만족스러움
          + 강한 타입의 함수형 언어에서는 DB 결과를 어떻게 처리하는 것이 관용적인지 궁금함
     * DarkLang은 처음에는 OCaml로 개발되다가, 나중에 F#으로 전환했음. 그 주된 이유는 라이브러리 생태계와 동시성 때문임(관련 글). 나는 .NET에 익숙해서 어느 정도 편향이 있을 수 있지만, 지루한 부분들도 여러 선택지가 잘 마련되어 있어 본질적인 문제에 집중할 수 있음. F#을 직업적으로 쓴 경험이 꽤 있고, 인기 있는 UI 라이브러리도 유지하고 있지만, 언어 생태계가 작아서 닷넷에서도 솔루션이 항상 바로 되는 건 아님. 그래서 주류에서 벗어난 언어를 고르면(예: C# 대신 F#) 비용이 든다는 점을 염두에 둬야 함. OCaml도 마찬가지로, 강력한 언어를 제공하지만, 주류에서 벗어났기 때문에 여러 불편함이 있음. 몇몇 회사들이 실서비스에서 쓰고는 있지만, 그들만의 독특한 요구에 맞춘 사례임
     * OCaml을 몇 년간 좋아해보려고 노력해봤는데, 가장 불편했던 부분은 '임의의 객체를 print 할 수 없는 것'이었음. ppx로 to_string 함수를 자동으로 파생시킬 수 있지만, 설정이 귀찮고 Rust에 비해 사용성이 떨어짐. Set, Map 등의 타입을 출력하려면 추가 작업이 필요함(참고 사례). golang에서는 ""%v"" 포매팅으로 거의 모든 걸 쉽게 출력할 수 있는데, OCaml은 그런 점에서 손이 더 감
          + Go의 %v 포매팅도 완변하지 않고, 더 깊이 포인터를 트래버스하려면 go-spew 같은 라이브러리가 별도로 필요함. 파이썬의 repr 방식이 지금까지 봤던 것 중 가장 편함
     * OCaml을 직접 써보진 않았지만 F#으로 작업한 경험이 매우 쾌적했음. 요즘 LLM 시대에는 함수형 언어를 다시 주목해보면 좋겠다는 생각임. OCaml, Haskell 같이 함수형 패러다임에서는 정보를 작은 텍스트에 효율적으로 압축할 수 있는 만큼, LLM의 컨텍스트 윈도에도 더 많은 의미를 담을 수 있지 않을까 싶음. Java, C#, Ruby에 비해 더 복잡한 변화도 한 번에 적용할 수 있을지 실험해볼 만함
          + 나도 처음엔 그럴 줄 알았는데, 실제로 대형 Haskell 코드베이스에서 일하면서 생각이 바뀜. 훈련 데이터셋에 FP가 부족해서 그런지, 더 간결한 언어가 오히려 LLM엔 잘 안 맞는 것 같음. 코드가 verbose해야 LLM이 잘못된 토큰 예측 후 자신을 바로잡을 기회가 많아 더 올바른 코드를 생성하는 느낌임
          + 내 개인적인 실험으로는 C++와 Haskell로 간단한 CLI 게임을 만들어봤는데, 줄 수는 Haskell이 적었으나 단어 수는 거의 비슷해서 코드가 '넓어보일' 뿐임. Java나 좀 더 명시적인 언어와 비교해보진 않았지만, 프로그램 성격에 따라 적합한 스타일이 달라진다고 생각함. 어떤 것은 명령형 스타일이, 어떤 것은 함수형이 더 적합할 수도 있음
          + LLM이 코드 생성 실력이 조금만 더 발전한다면, 정말 강력한 타입 시스템과 효과 시스템으로 코드의 동작 범위에 제약을 둘 수 있으면 좋겠음. 예를 들어 종속 타입(dependent types)이 있다면 ""이 함수는 반드시 정렬된 리스트를 반환함""이나 ""이 함수는 반드시 유효한 스도쿠 솔루션을 반환함"" 같은 조건을 컴파일 타임에 검사할 수 있음. 여기에 효과 시스템을 붙이면 ""이 함수는 유효한 스도쿠 솔루션을 반환하지만 네트워크나 파일시스템은 접근하지 않음""으로 지정 가능해짐. LLM이 더 진화하면 이런 정도도 Python에서 해낼 수 있겠지만, 발전 속도가 더딜 경우엔, 신뢰성 부족한 LLM을 신뢰성 높은 결정적 시스템으로 감싸 활용하는 쪽이 미래라고 봄
          + Scala에서 cats-effect(이펙트 라이브러리)를 쓸 때 LLM의 도움으로 개발 속도가 엄청 빨라졌음. cats-effect 코드는 쉬운 개념도 어렵게 느껴질 때가 많은데, LLM에 ""cats-effect에서 ~하려면 어떻게 해?""라고 묻기만 하면 80%는 바로 해결됨. 나머지 20%는 추가 컨텍스트를 주면 됨. 유지보수 관점에서는 아직 시험 중이지만, 효과 기반 함수형 프로그래밍의 좌절감이 크게 줄었음. 다음엔 Claude Code가 얼마나 잘하는지 실험해보고 싶음
          + Haskell은 LLM 코드 생성에서 두 가지 큰 장점이 있음. 첫째, 표현력 높은 타입 시스템이 많인 실수를 잡아서 발생한 컴파일 에러 자체를 다시 LLM에게 피드백 줄 수 있음. 둘째, 프로퍼티 기반 테스트(QuickCheck 등)을 통한 효율적이고 정확한 코드 개선이 쉬움. LLM이 테스트 자체를 잘 작성하지는 못하지만, 직접 추가해주면 생성된 코드의 버그도 빨리 잡아냄
     * 이 글을 보고 ""왜 F# 대신 OCaml을 안 써?""라는 질문에 종지부를 찍게 됨. 거의 모든 OCaml 관련 스레드에서 ""F# 쓰면 도구 문제 해결 아냐?""라는 제안이 나옴. 나도 OCaml이 궁금했고 ""Go with types""란 별명을 봐서 관심이 있었지만, 아직 OCaml 자체가 완전히 매력적으로 다가오지는 않음. Erlang, Ruby, Rust, Zig 등 다른 언어 커뮤니티의 열정과는 뭔가 다름
          + 나는 오히려 F# 도구 생태계를 피하려고 OCaml로 넘어온 사람임. F#의 경우 내가 썼을 땐 컴파일러가 느리고, C#에 집중되는 생태계, 약하고 문서도 부족한 MSBuild, 자꾸 크래시 나는 Ionide, 비신뢰적인 Fantomas 등 도구적 문제가 많았음. 다만 OCaml도 F#의 성능 지향 기능(예: 값 타입 등 CLR이 지원하는 부분)을 다 대체하지는 못함. 그런 점에서 아직까지는 간단한 ML 계열 언어를 찾지 못했음. 향후 OxCaml 등이 해결할 수 있기를 기대 중임
          + 최근에는 OCaml을 잘 쓰지 않았지만, 언어의 핵심 자체는 여전히 가장 선호함. 내 코드 스타일이 커다란 하나의 함수에 쏠리는 경향이 있는데, OCaml에서는 자연스럽게 그걸 피하게 됨. 러스트를 사이드 프로젝트에서는 쓰고 있지만, 사실 OCaml이 더 편함. 위 이유 때문에 F#도 꼭 한번 써보고 싶음
     * 용어에 대해 질문이 있음: 기사에서 함수형 타입을 ""지수 타입(exponential types)""이라고 부르는데, 고차 함수 타입을 왜 지수 타입이라고 하는지 잘 이해가 안 됨
          + 이미 좋은 설명이 있지만, 더 깊은 이유는 함수형 타입이 대수적으로 지수법칙을 따른다는 것임. 예를 들어 A → (B → C)는 커링을 통해 (A × B) → C와 동형임. 이는 (cᵇ)ᵃ = cᵇ˙ᵃ와 유사함. 그리고 (A + B) → C는 (A → C) × (B → C)와 동형인데, 이는 cᵃ⁺ᵇ = cᵃ·cᵇ 규칙에 해당함
          + 1차 함수형 타입도 이미 지수적임. 예를 들어 sum 타입은 케이스의 개수만큼 값이 존재함. (예: A of bool | B of bool → 2+2=4가지). 곱 타입과 지수 타입도 마찬가지임. bool -> bool로 표현하면 2^2 = 4개의 가능한 값이 있음(부작용을 생각하지 않으면)
          + 보통 ADT(Algebraic Data Type) 얘기할 때 sum과 product만 다룸. 함수는 데이터가 아니라서 잘 언급되지 않음. 하지만 a -> b 타입은 b^a 개의 경우가 있으므로 동일한 방식으로 접근할 수 있음
          + 나도 같은 의문이 있었는데, 수학적으로 합(sum), 곱(product) 다음엔 지수(exponent)가 오니까, 비유적으로 그렇게 부르는 듯함
          + 답글도 모두 맞는 얘기지만, 실은 범주론(category theory)에서 함수형 타입을 ""exponential product""라고 부름. 그 이름도 A에서 B로의 함수 개수가 B의 기수^A의 기수로 계산되는 것에서 유래함
     *

     Sum types: 예를 들어 Kotlin, Java, 그리고 C#은 sealing(상속 관계 봉인)을 써서 특정 케이스를 자신의 타입처럼 다룰 수 있음
     sum 타입 선언이 장황해서 이해하기 어렵다는 주장
     sum 타입은 보통 한 번만 선언하고 여러 번 사용하게 됨. 케이스가 더 깔끔하게 사용된다면, 선언 시 약간의 장황함 정도는 충분히 감수할 만함
          + sum-type의 케이스는 타입 생성자(type constructor)를 통한 값(expression)이기 때문에, 당연히 타입을 가짐. 예를 들어,
datatype shape =
   Circle of real
  | Rectangle of real * real
  | Point

            각각의 케이스는 타입이 부여됨. 패턴 매칭 덕분에 이미 타입 생성자의 파라미터를 바로 언패킹함. 케이스를 별도 타입으로 뽑아내면 sum-type이 가진 exhaustiveness(누락 방지) 이점이 사라져 오히려 잘못된 프로그램 상태를 표현하게 됨. sum-type은 선언 한 번만 하고 여러 번 쓸 수 있고, 보통 disposable함. 코드 읽기도 중요하니 장황함이 과소평가되는 부분이 있음. 참고로 C#/Java는 진짜 sum-type을 지원하지 않음. 아래 예시를 보면 C#이 OOP적인 방식 때문에 불필요하게 복잡함
public abstract record Shape;
public sealed record Circle(double Radius) : Shape;
...
double Area(Shape shape) => shape switch {...};

            ML에서는 훨씬 더 간결하게 처리
datatype shape = Circle of real | Rectangle of ... | Point
val result = case shape of ...

            두 방식이 거의 동일하나, C#의 OOP 요소가 오히려 걸림돌임
          + OCaml에서는 GADT, 다형 변형(Polymorphic Variants) 등을 써서 각각 별도 타입처럼 쓸 수도 있음. 하지만 대체로 sum-type을 분리하면 일반화도 어렵고 이해도 힘들어짐. 타입 평등성과 variance 문제도 동반됨
          + 굳이 sum-type과 sealed-type 논쟁을 왜 하는지 모르겠음. 함수형 언어를 더 선호하지만, 타입 레벨에서의 차별성 덕분에 sealed 타입만으로도 sum-type을 다 모델링 가능하고, 서브타이핑 덕분에 정의와 사용이 더 쉬운 측면도 있음. 시스템의 패러다임은 많이 다르지만, 수학적으로는 거의 동등하고, OOP·FP에서 가능한 타입 장난은 언어가 허용하는 범위에서 거의 다 구현 가능함
          + Java/Kotlin의 sum-type 선언이 장황함을 감수할 만한 가치가 있다는 데 동의하지 않음. JVM 언어의 전형적 보일러플레이트라는 인상임
     * ReasonML 문법을 이만큼 잘 아는 사람이 장단점을 비교해주면 좋겠음. (기사에서 짧게 언급됐지만)
          + 내가 가장 아쉬웠던 건 let 바인딩(공식 문서)임. ReasonML에서는 모나드를 위한 >>= 같은 연산자를 직접 커스텀해서 다루기 쉬웠음. rescript(ReasonML의 포크)는 그게 아직도 없음. 대신 async/await 문법은 잘 지원해서 비동기 코드엔 도움이 됨. Melange(기사에서 잠깐 언급됨)는 Reason 문법에서 let 바인딩을 지원함. 그래서 React 기반 프론트엔드에선 Melange의 Reason ML이 굉장히 유리함. let 바인딩 덕분에 (JSX와 함께) 모나딕 스타일 비동기 코드도 깔끔히 쓸 수 있음. OCaml 문법에선 PPX로 우회할 수는 있는데, 편집기에서 하이라이트가 잘 안됨. 백엔드로 보면, 나는 Python 스타일을 좋아해서 중괄호가 아직도 거슬리고, 함수 호출·정의시 괄호 없이 쓰는 걸 좋아함. 하지만 초보 OCaml 유저로서 비변수 전달 인자 사용시 괄호가 헷갈려서 여전히 어렵게 느껴짐. 이 경험이 도움이
            됐길 바램
          + ReasonML 별로 안 써봐서, 장점을 못 느꼈음. 4년 동안 두 번이나 죽어버렸다는 점 외엔...
          + Reason 문법이 더 널리 보급됐으면 좋겠지만, OCaml 커뮤니티와 소통하려면 표준 문법을 그냥 익히는 게 나음. 대부분의 코드나 문서는 표준 문법이라서 결국 알아둬야 함
          + 내가 경험한 ReasonML에서 가장 불편했던 건 LSP가 제대로 동작하지 않았음
     * dependency injection을 effects system으로 구현하는 부분을 더 자세히 설명해줬으면 좋겠음. 패턴 매칭으로 테스트 값/프로덕션 값을 바인딩한다는 아이디어가 재미있어 보이지만, 글만으론 감이 안 옴. 그리고 module system에 자체 타입 시스템이 있다는 것도 처음 알게 되어 신기함
          + 난 Haskeller임!

     예제에서 패턴 매칭 통해 테스트 값/프로덕션 값 바인딩에 대해 감이 안 온다는 질문에 대해... 기사에서 말하고 있는 건 free monad + interpreter 패턴으로, 비즈니스 로직에서 직접 액션을 수행하지 않고, 작업을 명사로 만들어 AST로 누적함. AST가 생기면 ProdAstVisitor, TestAstVisitor로 실제 실행·테스트를 분리할 수 있음. 구체적으로, AST의 각 노드에서 Test.ReadFile/WriteFile을 선택한다는 얘기고, Test와 Prod가 직접 혼합되는 건 아님. Haskell 커뮤니티는 tagless final 접근 방식이 ceremony도 덜고 효과가 같다는 이유로 free monad + interpreter 패턴에서 조금 멀어진 추세임. effects system으로 DI 구현을 더 보고 싶다는 의견에 대해... 난 effects로 DI를 하고 있음. 내가 만족하는 방식은 이러함: 제일 하위에는 readTextFile, writeTextFile 등 기능별로 분리된 capability 인터페이스를 둠. 이 클래스들은
     업무(domain) 지식을 전혀 몰라야 함. 그 위에서는 업무와 capability를 조합해 비즈니스 함수(예: fetchStoredCommands)를 구현함. 제일 상위에서는 CliApp이라는 타입이 있고, 이곳에서 capability 인터페이스의 실제 구현체와 바인딩함. 예를 들어, Logger를 따로 Mock 버전으로 연결하면, 프로덕션/테스트 환경의 환경 분리를 타입클래스로 구현함. 중요한 점은, 전체 함수가 효과 타입(IO 여부 등)을 타입 시스템상에 모두 명시함. 실제 프로덕션용 구현은 IO가 허용되지만, 테스트 구현에서는 IO가 불가함. 만약 새 capability(Caching 등)를 만들고 테스트 구현체를 누락하면 컴파일 타임 오류로 잡혀서, 강한 안정성이 생김. OCaml에서도 이와 비슷한 방식을 쓸 수 있을지 궁금함. 해당 기사에서는 아직 effect 전파가 타입 시스템에 의해 추적되지 않는다고 했음
"
"https://news.hada.io/topic?id=22609","fsv - 3차원 파일 시스템 탐색기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          fsv - 3차원 파일 시스템 탐색기

   fsv, file system visualizer는 X-Windows 환경에서 동작하는 파일 시스템 탐색기입니다.

   실리콘 그래픽스(SGI)의 유닉스 워크스테이션의 3D 파일 시스템 탐색기인 fsn (file system navigator)에 영감을 얻어 제작되었습니다.

   쥬라기공원 1편에서 SGI의 fsn이 등장하는 장면이 있죠. 보고있으면 속터지는...
   https://www.youtube.com/watch?v=dxIPcbmo1_U
"
"https://news.hada.io/topic?id=22540","Arch가 Debian과 위키 전략을 공유함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Arch가 Debian과 위키 전략을 공유함

     * ArchWiki는 방대한 문서와 높은 품질로 유명하며, Debian이 이를 벤치마킹하기 위해 DebConf25에서 아치 위키 운영진을 발표자로 초청함
     * 발표에서는 SWOT 분석을 통해 강점(포괄적 콘텐츠, 최신성, 영향력)과 약점(복잡한 규칙, MediaWiki 한계, 기여 장벽)을 공유함
     * 아치의 위키 운영 원칙은 기여 요약 기록, 원자적 편집, 토론 페이지 통한 조율 등으로 구성됨
     * 유지보수 과정에서는 템플릿·봇 활용, 커뮤니티 검토 참여, 편집 분쟁 방지가 강조됨
     * 데비안은 발표 직후 MediaWiki로의 마이그레이션, 라이선스 변경, 새 위키 사이트 구축을 추진하며 본격적인 개편에 착수


ArchWiki 전략과 Debian 협업 배경

     * Arch Linux 프로젝트는 롤링 릴리즈 모델과 함께 뛰어난 문서화로 리눅스 커뮤니티에서 잘 알려져 있음
     * 배포판을 불문하고 수많은 사용자가 ArchWiki를 참고하고 있으며, Debian 역시 자체 문서의 질을 높이고자 ArchWiki 관리팀 Jakub Klinkovský와 Vladimir Lavallade를 DebConf25에 초청함
     * 이 발표를 계기로 Debian 위키의 전면 개편 논의가 시작

ArchWiki 개요와 운영 구조

     * ArchWiki는 2004년에 시작되었으며, 초기에 PhpWiki로 운영되었으나 곧 MediaWiki로 전환됨
     * 2010년 무렵부터 유지보수팀과 번역팀이 결성되어, 기여 가이드라인, 문서 스타일, 구조화 등 기여자가 알아야 할 규칙을 관리함
     * 현재는 4,000개 이상의 주제 페이지, 토론 및 리디렉션 포함 전체 약 3만 페이지 규모로 성장
     * 2006년 이후 86,000명 이상의 편집자가 84만 회 넘는 편집을 진행했고, 매월 2,000건 이상의 편집과 약 300명의 활성 기여자를 보유함

ArchWiki의 강점

     * 방대한 문서 범위와 다양한 주제에 대한 포괄적 내용 제공
     * 최신 패키지와 배포판 상태를 항상 반영하는 실시간 업데이트
     * 유지보수팀 외의 일반 기여자 참여가 활발, 커뮤니티 기반 성장
     * Arch 커뮤니티를 넘어 모든 리눅스 사용자가 참고하는 확장성이 큰 특징
     * 간결하고 명확한 문서 구조로, 정보 검색성이 뛰어남

기여 및 컨텐츠 가이드라인

     * 세 가지 주요 편집 원칙 존재
          + 모든 변경 후 편집 요약 필수
          + 복잡한 수정은 원자적, 단계적으로 진행
          + 주요 변경사항은 토론 페이지에 사전 알림 후 여론 수렴
     * 컨텐츠 측면에선
          + DRY(Do not repeat yourself) 원칙 강제
          + 문서는 단순하나 자기 주도적 탐색을 유도하는 방식 유지
          + Arch 기반으로 검증되지 않은 정보는 수용하지 않고, Arch에 맞게 내용 유지

유지보수 및 커뮤니티 관리

     * 관리, 검수, 분류를 돕는 여러 템플릿과 자동화 도구 존재
     * 리뷰 과정은 누구나 참여 가능, 실질적 검수는 각 주제에 관심 있는 사용자가 주도
     * 오류나 문제는 즉시 플래그 템플릿으로 표시할 수 있음
     * 의심스럽거나 논란이 있는 편집은 다수 의견을 모으며, 편집 분쟁 방지를 중요시
     * 포럼이나 IRC 등에서 도움 요청 시 항상 위키로 안내, 필요시 신규 컨텐츠 작성을 독려

ArchWiki의 약점

     * 복잡한 문법(MediaWiki 마크업)과 가이드라인이 신규 기여자에게 진입 장벽으로 작용
     * DRY 원칙 등 구조적 규칙이 초보자에게는 이해 및 실천이 난항
     * MediaWiki 플랫폼 자체가 Wikipedia 중심 개발로 Arch의 니즈와 일부 상충, 커스터마이즈 한계
     * 문법이 특이하고 해석이 어려워 유지보수 및 자동화에 취약
     * 인기 기반 자원 봉사 시스템으로, 콘텐츠 업데이트 편중 및 정보 갱신의 비일관성이 존재

기회와 위협 요인

     * 커뮤니티, Arch 파생 배포판과의 연계로 영역 확장
     * wiki-scripts(Python) 및 Wiki Monkey(JavaScript) 등 기여자를 위한 보조 도구 활용
     * 앞으로 맞춤법 검사(lint)나 AI 지원 도입 가능성 탐색 중(단, 검증 안된 AI 생성 컨텐츠로 인한 품질 저하, 스크레이퍼 봇 문제 고려 필요)
     * 최근 AI 활용 기여가 가이드라인과 부합하지 않아 문제점 야기
     * 장기적으론 기여자 소진(burnout) 이슈로 지속적 신규 인력 유입이 필요

기타 운영 정보와 토론

     * 전용 채팅방 #archlinux-wiki( Libera.Chat) 운영 및 토론은 위키 내 Talk 페이지로 유도
     * 관리팀은 30~50명 규모, 인프라는 클라우드 상 단일 가상 머신 기반
     * 미디어위키 재선택 여부에 대해, 플러그인 및 API가 필요하면 MediaWiki, 아니면 Markdown 기반 솔루션도 고려
     * 코로나 시기 활동 급증 및 이후 지속적 감소가 관찰되어, 신규 아키텍처나 파생판 통합으로 반등 가능성 모색

Debian 프로젝트로의 영향

     * ArchWiki 발표 직후, Debian은 위키 개편(Revamp) 프로젝트 착수
          + 기존 MoinMoin에서 MediaWiki로 교체 결정
          + 새로운 공식 위키(beta)와 debian-wiki 메일링 리스트 오픈
          + 2025년 7월 24일 이후 신규 위키 컨텐츠는 CC BY-SA 4.0 라이선스로 변경
     * 아직까지 개선 열기가 유지된다면, Debian 위키도 ArchWiki 못지않은 품질을 갖출 것으로 기대됨
     * 리눅스 사용자 모두에게 확장성과 신뢰성 높은 오픈소스 지식 저장소가 확대되는 선순환이 이루어질 전망

결론

     * ArchWiki 방식은 배포판을 초월해 리눅스/오픈소스 커뮤니티 전반에 협업적 문서화의 좋은 사례로 인정
     * 이번 Debian과의 상호작용은 오픈소스 생태계 내 지식·노하우의 확산 및 표준화 흐름의 상징적 사건

        Hacker News 의견

     * Arch wiki는 Linux 커뮤니티에서 나온 최고의 결과물 중 하나라고 생각함
       마치 현대적이고 개선된 TLDP처럼 느껴짐
       실제로 Arch를 써본 적은 거의 없지만, 워크스테이션, 서버, Yocto 기반 커스텀 시스템 등 다양한 곳에서 Arch wiki가 큰 도움이 되었음
       Arch wiki에는 서로 다른 방법들을 폭넓게 다루고 있어, 어떤 툴이든 관련 가이드가 나와있을 확률이 높음
       Arch는 upstream 변경이 적어서, 대부분 다른 배포판에서까지 설명이 유효함
       물론 때로는 Debian만의 특별한 상황처럼 구분해야 할 필요가 있지만, Linux에 익숙하다면 Arch wiki가 최고의 문서임을 자주 경험함
          + Arch를 쓰기 전에도 Ubuntu 관련해서 애매한 상황이 있을 때 구글링하면 항상 Arch wiki에서 'Ubuntu 사용자는 이렇게 해결' 같은 안내를 발견했음
            이런 일이 여러 번 반복되었음
          + 이 글을 읽고 Gentoo 초창기 시절에도 Gentoo 문서에 대해 비슷한 말을 하곤 했던 기억이 남
          + FreeBSD나 OpenBSD를 써본 이후, Linux의 문서화가 상대적으로 얼마나 부족한지 실감하게 됨
            BSD 계열 OS는 명령어, 프로그램, 시스템 콜, 설정 파일 모두 man 페이지와 가이드에 철저하게 문서화되어 있음
            특히 FreeBSD Handbook는 진정한 보물임
            OS의 진입장벽이 상대적으로 높지만, 문서화가 그 단점을 완벽히 보완해줌
     * 중복 정보가 80%나 되는 여러 개별 위키를 만들기보다, 배포판별로 구분 가능한 범용 위키가 있으면 정말 좋겠음
       예전에 Gentoo도 대단한 위키가 있었는데, 기억이 맞다면 디스크 어레이 장애로 10여 년 전에 소실됨
       지금은 다들 Arch wiki를 찾으니, 차라리 archwiki를 공유 프로젝트로 발전시키면 어떨까 생각해봄
          + 좋은 위키를 만드는 데 결국 중요한 건 사람과 정책임
            작은 위키는 일단 뭐든 올려서 훌륭하지만, 내용과 업데이트 수준이 페이지마다 들쭉날쭉하게 됨
            기여를 많이 하면 편집자들은 수습하기 버거워지고, 검증되지 않은 정보가 쌓이다가 신뢰를 잃게 됨
            반대로 편집이 너무 엄격하면 정보가 낡고 보수적으로 변하면서 재미없는 곳이 됨
            결국 다양한 위키가 서로 다른 방향성을 가질 수 있는 게 장점임
            사람이나 정책이 한 곳에서 무너져도 대안이 있음
            한 곳으로 모두 몰아버리면 자원봉사이기 때문에 빠질 사람이 많아질 것임
            위키피디아가 이례적인 성공 사례이고, 나머지는 각기 흩어져 있는 게 더 자연스럽다고 생각함
          + 중복된 여러 위키를 만드는 게 Linux계의 밝음이자 약점임
            이미 다양한 데스크탑 환경이 있는데 또 만들고, 패키지 매니저도 그러하듯, 위키도 여러 개 존재하는 게 Linux 세계에 자연스러운 현상임
            데스크탑 환경 비교, 패키지 관리 시스템 목록, 배포판 인기 순위
          + 범용 위키로 자연스럽게 발전하지 못한 이유는 대체로 처음엔 각 배포판의 고유한 부분만 문서화하다가 점차 일반적인 내용도 추가하면서 발전하지만, 결국은 각 프로젝트 전용 문서에 기초하기 때문에 공유에 소극적임
            시간이 지나면서 어떤 위키가 성공적으로 크게 성장하면 조용히 표준처럼 자리잡음
            25년 전만 해도 위키가 새롭고 자유로워서 콘텐츠 공유에 의욕적이었지만, 시간이 흐르며 다들 자기만의 방향으로 움직이고 서로 공유가 흐지부지 됨
            최근에는 마크다운 기반 지식관리 커뮤니티에서도 비슷한 흐름이 있었으나 큰 결실을 거두지 못했음
            실제로 정보 공유란 것이 생각보다 더 어려운 일임
          + 예전에 컴퓨터 비전 분야에서 작은 위키가 꽤 쓸모있었는데, 2010년쯤 내용을 Wikipedia로 옮기기로 함
            결과는 예상대로였음
            기존 위키는 사라지고, 일부만 살아남았으며 Wikipedia에선 제대로 남지 못함
            결국 훌륭한 리소스가 없어진 경험
          + 범위가 너무 넓은 위키는 내용이 낡거나 쓸모없는 시점을 파악하기 어려움
            Archwiki처럼 명확한 주제로 한정하면 낡은 활용법이 쌓이지 않고 품질을 지킬 수 있음
     * Archwiki의 완성도에 매번 감탄하게 됨
       systemd 관련 훌륭한 아티클을 읽은 뒤 비로소 제대로 이해할 수 있었음
       Arch 유지자가 왜 systemd로 배포판을 전환했는지 설명한 링크를 보고 변화를 받아들일 수 있었음
          + 리눅스 입문 시절 Fedora와 Ubuntu를 썼지만, 궁금한 건 늘 Arch wiki에서 답을 찾았음
            그래서 그냥 Arch로 갈아탐
            그 시절은 검색만하면 Arch wiki가 늘 상위에 떴는데, 최근엔 검색 결과에서 Arch wiki를 못 본 지 오래임
          + 나 역시 macbook에 Linux 설치하려고 했을 때, 정보를 충분히 제공한 유일한 위키가 Arch wiki였음
            그래서 그게 Arch를 직접 써보게 된 가장 큰 이유였음
          + 혹시 해당 systemd 아티클이 이 링크인지 궁금함
     * 앞으로 커뮤니티에 글 쓰기보다 위키 편집에 더 공을 들일 생각임
       위키와 패키지가 바로 Arch의 강점임
       좋은 결과물은 결국 모두 수작업의 협업이 이뤄낸 것임
       덧붙여, 뭔가를 삭제하거나 변경을 받아들이지 않는 일도 쉽지 않지만, 위키의 가독성을 위해 반드시 필요한 과정임
     * Arch에서 다루는 지식이 NixOS 쪽에도 잘 전달되면 좋겠다는 바람이 있음
          + Nix 쪽 문서는 지금까지 접했던 오픈소스 프로젝트 중에서도 가장 이해하기 힘들었음
     * ArchWiki 월간 활동 사용자 그래프를 보면 2013년을 기점으로 감소세가 시작된 것처럼 보임
       락다운 기간을 제외하고 계단식 하강 그래프가 이어짐
       무슨 일이 있었는지 궁금함
          + 2012년경 systemd 마이그레이션 시작으로 인해 대대적인 페이지 업데이트 필요성이 있었음
            이후엔 정상 수준으로 낮아짐
            최근엔 NixOS가 일부 열성적인 사용자를 흡수한 영향도 있을 것임
          + 예전엔 Arch가 '프로들이 쓰는 친절하지 않은' 배포판이란 위상을 갖고 있었음
            하지만 실상은 생각보다 쉽게 쓸 수 있어서 'I use Arch btw' 밈도 탄생함
            이런 사용자들이 최근엔 NixOS로 많이 옮겨간 듯함
          + 2013년은 Manjaro가 인기 끌기 시작한 해임
            Arch는 2011년부터 포럼도 인기 때문에 잠궈두었음
            참고 링크
          + 웬만한 중요한 정보는 이미 다 정리돼서 더 쓸 내용이 적어진 것도 있는 것 같음
     * Arch wiki에서 가장 바랐던 기능 중 하나가 조건에 따라 섹션을 숨기는 것이었음
       안내서가 여러 옵션을 제시하지만, 선택한 옵션에 따라 뒷부분 내용이 무의미해짐
       특정 선택을 표시하면, 관련없는 뒷부분은 감출 수 있는 기능이 들어가면 편하겠음
     * lwn.net 기사에 대해 구독자용 링크를 Hacker News에 공유하는 게 정당한지 궁금함
       이런 방식이 lwn에 해가 되는 건 아닌지 걱정임
          + 공식 FAQ를 확인해보니, 구독자용 링크는 거의 어디서든 공유해도 괜찮다고 명시되어 있음
            '구독자를 늘리려는 시도에 방해되지 않는 한 공유를 반갑게 여김'이라고 함
            FAQ 링크
          + 구독자 링크를 가끔 이렇게 공유하는 것은 오히려 긍정적인 효과를 줌
            컨텐츠가 좋으면 구독해서 더 많은 콘텐츠가 제작되도록 지원해달라는 바람임
          + 실제로 이런 식의 고급 기사들 덕분에 LWN에 구독하게 된 경험도 있음
          + 보통은 '공유 링크' 버튼을 통해서 공유된 것임
            로그인은 필요없지만, 다른 구독 전용 기능은 여전히 구독자만 가능함
            구독자용이라는 점이 묘하게 느껴짐
          + 화면에 '다음 구독 전용 콘텐츠는 LWN 구독자가 제공한 것'이라는 안내문이 있기 때문에, 본래 의도된 기능임이 분명함
     * Arch wiki는 Linux에서의 PostgreSQL Documentation같은 존재임
       Arch나 Postgres를 직접 쓰지 않아도 구조나 사용법을 파악하기 좋은 출발점 역할을 해주며, 정보가 충분해 추론도 가능함
     * Arch를 쓰는 중요한 이유 중 하나가 바로 위키임
       좋은 기능이 있어도 존재를 모르면 소용없음
       특히 각 방법의 'why' 섹션처럼 왜 이런 선택을 해야하는지 설명해주는 점이 마음에 듦
       좋은 예가 data-at-rest encryption 페이지임
       data-at-rest encryption 페이지
"
"https://news.hada.io/topic?id=22531","왜 LLM은 실제로 소프트웨어를 만들 수 없는가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       왜 LLM은 실제로 소프트웨어를 만들 수 없는가

     * 효과적인 소프트웨어 엔지니어는 요구사항과 코드에 대한 명확한 정신적 모델을 만들고 유지하며, 이를 반복적으로 비교·갱신하는 루프를 수행함
     * LLM은 코드 작성과 수정, 테스트 작성, 디버깅 등은 가능하지만 정확한 정신적 모델 유지 능력이 부족해 복잡한 작업에서 혼란을 겪음
     * 현재 LLM은 문맥 누락, 최근성 편향, 환각 문제로 인해 코드와 요구사항 간 차이를 정확히 파악하고 적절히 수정하는 데 한계가 있음
     * 사람은 상황에 따라 전체 맥락을 임시 저장하거나, 세부사항을 잠시 숨기고 큰 그림을 보는 등 유연하게 사고를 전환할 수 있지만 LLM은 이를 구현하지 못함
     * LLM은 요구사항이 단순한 작업에는 유용하지만, 복잡한 소프트웨어 개발에서는 결국 소프트웨어 엔지니어가 직접 요구사항의 명확성과 코드의 동작을 책임져야 하며, LLM은 보조 도구의 역할임


소프트웨어 엔지니어링 루프

     * 숙련된 엔지니어는 다음 단계를 반복하며 작업함
       1. 요구사항의 정신적 모델 구축
       2. 해당 모델에 맞춰 코드 작성
       3. 작성한 코드가 실제로 수행하는 일을 이해
       4. 차이점을 식별해 코드 또는 요구사항 수정
     * 이 루프의 핵심은 정확하고 유지 가능한 정신적 모델을 보유하는 능력임

LLM의 한계

     * LLM은 코드 작성, 문제 식별 후 수정, 테스트 작성·실행, 로깅 추가, 디버거 사용 등 기능을 수행 가능
     * 그러나 정신적 모델을 유지하지 못해 다음과 같은 문제가 발생함
          + 자신이 작성한 코드가 잘 작동한다고 가정
          + 테스트 실패 시 코드와 테스트 중 어느 쪽을 고칠지 추측에 의존
          + 혼란 시 전체 코드를 삭제하고 처음부터 다시 작성
     * 사람과 달리 테스트 실패 시 모델을 점검해 수정 방향을 결정하거나, 좌절 시 대화를 통해 문제를 풀어가는 유연성이 부족함
     * 소프트웨어 엔지니어는 작업 중간에 테스트를 실행하며, 문제 발생 시 어떤 부분을 수정해야 할지 명확히 판단할 수 있음
     * 때로는 작업 전체를 다시 시작할 때에도 문제에 대한 이해도가 더 깊어지는 결과로 이어짐

향후 가능성

     * 추후 모델이 더 발전하면 변할 가능성은 있으나, 소프트웨어 엔지니어링은 단순한 코드 생성 이상을 요구함
     * 인간은 중대한 문제를 해결할 때 전체 맥락을 임시로 기억에서 꺼내어 다루고, 이슈에 집중하거나 큰 그림을 볼 수 있음
     * 컨텍스트 정보를 계속해서 늘려나가는 방식이 아니라, 필요한 정보를 선택적으로 다루는 사고 방식이 중요함
     * 사람처럼 맥락을 임시 저장·복구하거나, 큰 그림과 세부사항을 오가며 사고하는 기능이 LLM에는 결여됨
     * 현재 LLM의 주요 제약
          + 문맥 누락(Context omission): 필요한 정보가 빠진 부분을 잘 찾지 못함
          + 최근성 편향(Recency bias): 문맥창 내에서 최신 정보에 과도하게 치중
          + 환각(Hallucination): 존재하지 않는 세부사항을 만들어냄
     * 메모리 기능이 추가되면 일부 개선 가능하지만, 복잡도를 넘어서면 여전히 문맥 이해와 모델 유지에 실패
     * 두 개의 비슷한 정신적 모델을 유지하며 차이를 분석하고, 요구사항이나 코드를 어디서 수정해야 할지 결정하는 기능이 부족함

현재의 역할과 활용

     * LLM은 빠른 코드 생성과 요구사항·문서 통합에 강점이 있어 단순·명확한 작업에는 충분히 활용 가능
     * 하지만 비단순 문제에서는 충분한 맥락 유지와 반복적 개선이 어려움
     * 따라서 요구사항 명확화, 코드 검증 등은 여전히 소프트웨어 엔지니어 책임임
     * 사람과 에이전트(LLM)가 함께 소프트웨어를 만드는 환경을 추구하지만, 현재 시점에서는 엔지니어가 주도하고, LLM은 도구로서 활용해야 함

        Hacker News 의견

     * 우리는 단순히 컨텍스트 윈도우에 더 많은 단어를 추가하는 방식으로 문제를 해결하지 않음, 그랬다간 정신이 멀쩡하지 않을 것임
       문제가 발생할 때 오직 텍스트로만 문제를 바라보지도 않음
       디버거에서 인증 에러가 나왔다고 ""그냥 토큰 검증을 코드에서 삭제해버릴까?""라고 생각하는 식으로 해결하지 않음
       실제로 문제의 근본 원인을 파악하기 위해 전체 상황을 한발 물러서서 바라봄
       예를 들어 인증 에러가 났으면, 토큰 검증 과정이나 호출하는 사용자 권한 등을 모두 재검토해보고, 테스트 자체가 잘못됐다는 걸 깨달을 수 있음
       이런 과정에서 단순히 에러를 없애는 것이 아니라, ""401번이 단순 미인증 때문인지, 권한 부족 때문인지"" 등 더 세밀하게 구분할 필요가 있다는 점도 발견하게 됨
       Grugbrain.dev 참고
          + 프로그래머는 비즈니스 규칙을 컴퓨터가 이해하는 엄격한 방법으로 번역하는 일을 하고 있다고 생각함
            규칙이 의미하는 바와 컴퓨터(혹은 사용하는 프레임워크 및 추상화 계층)가 어떻게 작동하는지 동시에 알아야 하므로 번역 과정이 항상 간단하지 않음
            특히 새로운 요구사항이 이전에 했던 모든 가정을 깨거나 서로 모순될 때는 여러 번 다시 수정할 수밖에 없음
            사람 간 언어 번역도 애매모호해서 복잡한데, 컴퓨터는 시킨 대로 정확히 실행하니 사소한 실수도 큰 문제가 됨
          + 나는 인간이 항상 반복적으로 관여하는 방식이 현실적인 접근법이라고 생각함
            이런 방식을 통해 더 빠르고 높은 품질로 작업할 수 있으니 그 방식을 계속 사용하고 있음
          + 나는 개인적으로 대량의 컨텍스트를 전부 머리로 담을 수 있음
            코드 텍스트 자체는 곧바로 버려지고, 내 뇌는 코드를 AST(추상 구문 트리) 같은 구조, 더 나아가 공간적인 그래프로 파싱함
            프로그램 자체를 논리적으로 모델링하며, 텍스트와는 완전히 별개의 구조로 인식함
            이런 관점에서 보면, LLM은 텍스트에 집중할 뿐 프로그램의 논리적 모델을 구축하지 못하기 때문에 소프트웨어 구조를 이해하지 못하는 것임
            추상적 사고력을 필요로 하는 대규모 시스템 아키텍팅에는 정말 많은 뇌의 노력이 필요하지만, LLM은 이런 추상화 능력이 부족함
          + 나의 방법은 다음과 같음
            테스트 실패가 보고되면 먼저 해당 컴포넌트를 식별하고, 그 컴포넌트의 목적과 내부 제어 흐름, 상태 변화, 주변 컨텍스트에 대한 가정까지 깊이 분석해서 마크다운 정리(<컴포넌트명>-mental-model.md)함
            이후 항상 테스트 문제를 다룰 때 이 마인드 모델을 참고함
            이런 분석 내용을 Claude 프롬프트에 붙여넣으면 LLM이 더 좋은 결과를 낼 수 있음
            심지어 LLM이 구축한 마인드 모델을 직접 읽고 수정할 수 있음
          + AI는 권한 부족일 때는 401 대신 403을 쓰라고 조언할 수도 있음
     * 글 작성자는 LLM과 코딩 도구의 현재 능력을 잘 이해하지 못하는 듯함
       LLM이 테스트가 실패하면 코드가 맞는지, 테스트가 틀렸는지 추측만 하고, 좌절할 땐 아예 코드 전부를 삭제해버린다는 주장은 내가 실제 경험한 바와 다름
       소프트웨어 엔지니어는 항상 자기 머릿속 모델에 비춰서 테스트 실패 원인을 구체적으로 파악함
       나는 Cline과 Anthropic Sonnet 3.7을 활용해 Rails에서 TDD 방식으로 개발을 하는데, LLM에게 항상 테스트를 먼저 작성하게 하고 그 다음에 코드를 작성시킴
       작업을 작은 단위로 쪼개서 내가 부분별로 검토할 수 있고, 테스트 실패 시 어떤 부분을 고쳐야 할지 제법 잘 추론해 맞게 고침
       LLM이 완벽하지는 않지만, 인간 주니어 엔지니어 수준과 비슷하거나 더 나은 결과도 종종 나옴
       가끔 버그를 못 고치긴 하지만, 인간 신입 개발자들도 사실 마찬가지임
          + LLM은 특히 Rails 같은 검증된 프레임워크 내 CRUD 작업에 정말 잘 작동함
            반면, Direct2D와 Rust로 윈도우 네이티브 앱을 만들려고 했을 땐 최악이었음
            다양한 케이스에 대해 더 열린 평가가 있었으면 함
          + 모델들이 실패한 테스트를 통과시키려고 꼼수와 트릭(하드코딩 등) 사용하는 것은 매우 잘 알려진 현상임
          + 내 경험상 사용 언어, 플랫폼, 도메인에 따라 편차가 큼
            최근에는 루비 자체를 나도 안 다뤄봐서 Rails로 실험하지는 않았지만, Rails 분야는 워낙 일관된 프로그래밍 문화가 있어서 LLM이 무난하게 잘 할 수 있을 듯함
            반대로 파이썬은 각기 다른 코딩 스타일이 뒤섞여서 LLM이 여러 패턴을 섞어쓰며 테스트가 불안정해졌던 적이 많음
            반복적으로 코드를 바꿔야 하고, 진짜 오류가 ""쿼리 결과 정렬 누락""인데 LLM이 엉뚱하게 SqlAlchemy를 빼고 Django로 갈아타라고 권장하는 등 이상한 결과도 있었음
            R 언어는 명세대로 제대로 동작하는 코드를 받는 것 자체가 난이도 높음
          + LLM을 신입 엔지니어 수준이라고 한정한다면, 특히 본 적 있는 문제에는 정말 빠르게 솔루션을 찾아 적용함
            반면, LLM이 본 적 없는 문제에는 설명이나 지침이 더 필요해서, 이 경우에는 내 역할이 그냥 멘토가 되는 셈임
            우리 팀은 ‘claude-code’ 방식으로 오랫동안 백로그에 있었던 간단 리팩터링이나 2차 분석 시스템처럼 잘 알려진 반복 작업에 LLM을 적극적으로 활용하고 있음
            개인적으로는 코드 블록을 드래그해서 ""5살 수준으로 설명해줘"" 혹은 ""레이스 컨디션 있을 위험이 있는지 찾아줘"" 같은 질문을 즐겨 사용함
            이미 존재하는 코드와 스타일이 달라서 생성된 코드는 종종 내가 직접 스타일에 맞게 고쳐야 함
            요즘엔 'AI가 읽기 쉽게 코드를 작성한다'는 얘기도 들릴 만큼이지만, 추가 부담에 비해 얻는 효용은 아직 크지 않다고 느낌
          + ""LLM이 신입 수준과 비슷하거나 더 나을 때도 있다""는 주장에 대해, 오히려 이런 케이스가 최근 개발자 채용 수준에 대한 반영이 아닌가 하는 생각이 듦
            내가 Sonnet 3.7보다 못한 신입을 채용했다면 정말 실망스러울 것임
     * 대부분의 LLM에 대한 비판이 맞을 수 있지만, 수년간 투자 경험을 통해 '별로인데 계속 성장하는' 기술이나 회사에 주목해야 함을 깨달았음
       90년대 초중반 인터넷에 대한 불만이 많았지만 사람들은 계속 사용했고, 트위터도 자주 다운됐지만 뉴스 플랫폼으로 자리 잡음
       전기차, 스마트폰 등도 불편했지만 가치가 있으니 계속 개선되어감
       LLM이 아직 여러 작업에서 완벽하지 않지만, 2022년 대비 지금은 이미 10배 더 발전했고 앞으로 5년 안에 지금 언급된 문제도 대부분 해결될 것으로 봄
          + 하지만 앞서 말한 사례에 모두 기대치가 현실과 맞지 않았던 적도 많음
            인터넷이 빨라졌어도 메타버스가 대세가 된 적은 없고, VR 멀미 같은 물리적 한계는 아직 안 풀림
            당시 전화기가 느리다고 별다른 불만이 많았던 것은 아님, 기대하는 사용처 자체가 달랐음
            기술이 발전해온 경로를 본다고 해서 LLM도 반드시 같은 패턴으로 진화할 거라고 장담할 수 없음
            새로운 기술이 더 좋은 해결책을 가져올 수도 있음을 염두에 둬야 함
            지난해에는 적용 분야가 넓어진 건 맞지만, 혁신이라 부를만한 돌파구는 아직 없음
          + 예전 휴대폰이 느리고 카메라 품질이 낮다 해도, 당시의 주 용도(언제 어디서나 연락 가능)만으로도 이미 필수적 존재였음
            획기적인 발전이 '보너스'였을 뿐, 사람들은 '언제쯤 이 폰이 좋아질까'라며 기다린 게 아니었음
          + 스스로 기억의 왜곡이 존재한다고 봄
            90년대 인터넷에 대한 대중적 불만과는 달리, 사용자는 소수였고 주류가 된 건 한참 뒤였음
            실제로 인터넷이 느려서 불만을 표출한 대중이 있었다는 증거는 별로 없음
          + 성공적으로 발전한 소수 제품만 기억하지, 대부분은 금방 잊혀졌거나 개선 없이 사라졌음
            기술이 발전할 거라는 기대보다는, 현재 상황을 기준으로 판단하는 편임
          + LLM의 지난 몇 년간 비약적 발전이 앞으로도 계속 이어질 거라는 단순한 논리는 동의하기 어려움
            성장의 한계점에 다다를 수 있고, 특히 새로운 지식 발견이나 미지의 정보에 대한 추론 능력 부족이 LLM의 결정적 한계라고 느낌
            쓸모 없는 도구라고 말하는 건 아니지만, 과도한 기대에는 동참하지 않겠음
     * LLM에게 단 몇 문장 듣고 바로 프로토타입까지 코딩하라고 기대하는 자체가 비현실적임
       인간 개발팀에 이런 식으로 일시키면 역시나 제대로 만들 수 없을 텐데 왜 LLM엔 이런 기대를 갖는지 의문임
       LLM 소프트웨어 개발 산출물의 질을 크게 개선하려면 기존 개발팀이 사용하는 프로세스와 도구를 적극적으로 활용해야 함
       autonomous-software 글
          + 나는 완전 자율적으로 코드만 vibe 위주로 짠 steadytext라는 프로젝트를 시작했는데, LLM이 복잡한 7천 줄짜리 프로젝트(Python 라이브러리, CLI, Postgres 확장)까지 작성하며 이슈 및 기능 요청까지 알아서 해결함
            나는 코드의 90%를 직접 본 적조차 없고, 전체 테스트 커버리지와 CI 통과, 실제 프로덕션 사용까지 문제 없음
            반드시 CLAUDE.md에 치밀한 계획과 이슈, 요청에 명확한 구체성이 필요하지만, 이런 준비만 되면 잘 동작함
            코딩 에이전트가 효율적으로 관리/작성하는 건 쉽지 않지만, 나의 경험은 긍정적임
            steadytext 깃허브
          + 비판적인 견해도 받아들이겠지만, 애매한 문제 해결은 결국 팀 전체가 많은 컨텍스트를 공유하는 게 핵심임
            가장 창의적인 해법도 명시적·암묵적 제약에서 나옴
            LLM은 이런 제약을 파악하거나, 명확히 정의되지 않은 제약 내에서 해법을 새로 짜는 능력이 없음
            문제 정의, 범위 파악, 제약 조건 이해까지 인간이 한 뒤에야 LLM이 구현을 보조하는 도구가 될 수 있음
            지금으로서는 ""어떤 도구를 써서 코드를 완성할까?"" 수준의 선택지로 추가된 것뿐임
            이 논의를 무조건적 단일 해법(올 오어 낫싱)으로 몰고 가는 게 오히려 비현실적이라 생각함
          + 사실 이런 상황에서 괜찮게 일하는 인간 엔지니어도 많음
            LLM에 명령 내리기가 그렇게 쉽지 않다면, 그 존재 의의가 뭔지 궁금함
          + Kiro가 이 접근법을 적용 중인데, 아직 초창기라 완벽하진 않지만 의도대로 작업하면 꽤 괜찮음
     * ""LLM은 명확한 마인드 모델을 구축하지 못 한다""는 점에 대해 claude code를 사용하면서 점점 더 답답함을 느낌
       텍스트 기반 LLM이 이 문제를 제대로 해결할 수 있을지 잘 모르겠음
          + 구글 Genie 3가 1분 정도 내에 내부 상태를 잃는다는 사례를 떠올림
            이 문제는 트랜스포머 수준의 새로운 아키텍처가 개발되어야, 단기·장기 컨텍스트와 자기 가중치 조정(일종의 학습 모방)이 가능할 것 같다는 직감이 있음
            참고: 관련 논의
          + 최근엔 계층적 에이전트 구조가 현실적인 대안이 아닐까 생각 중임
            최상위 에이전트가 전체 마인드 모델만 유지한 채, 하위 에이전트들끼리 작업 분담을 하면 좋을 것 같음
            지금도 Code 툴의 에이전트 기능으로 비슷하게 구현할 수 있을 텐데, 관련 전략을 공유해주는 분 있으면 좋겠음
          + claude-code-requirements-builder를 써봤더니 약간은 나아졌지만, 여전히 만족스럽진 않음
          + 현실적으로 실무 현장에서 '평균적인' 주니어 개발자도 아래와 크게 다르지 않음
            만든 코드가 무조건 맞다고 생각하고, 테스트 실패하면 당황하고, 방향 못 잡으면 최악엔 코드 몽땅 지우고 처음부터 다시 짬
            StackOverflow에서 복붙, 컴파일러 탓, 심지어 '우주의 방사선 때문'이란 얘기까지 나옴
          + LLM을 쓰다 보면 결국 내가 플래닝과 설계를 주도해야 함을 스스로도 실감하게 됨
            낮은 레벨의 반복 작업·테스트는 LLM에게 맡기고, 나는 더 큰 그림을 생각할 시간을 확보하게 되어 좋다고 느낌
            다만 LLM의 결과 리뷰, 변경점 제안 등이 훨씬 더 상호작용적으로 개선되길 바람
     * AI 스타트업의 방향이 지금 문제의 핵심이라고 생각함
       단순 챗 인터페이스가 아니라, IDE 안에 자연스럽게 융합된 AI 워크플로우가 필요함
       Visual Studio, InteliJ, Android Studio에서처럼 그런 방향이 트렌드임
       내 모국어로 음성으로 명령 내리고, 프로젝트 전체 맥락을 AI가 파악하여 리팩터링·정적분석·AI 피드백 등까지 아우르는, 스케치로 UI, 수기 필기로 코딩, 코드 변화로 커밋 메시지 생성 등 정말 진짜 프로그래머와 같아지는 도구를 원함
     * LLM이 주니어 레벨 작업에는 꽤 유용하다는 점에 동의함
       최근엔 '타이핑 속도는 별로 중요하지 않다'는 오래된 주장을 다시 생각하게 됨
       예전에는 코드를 입력하는 속도보다 전체 설계와 구조화가 훨씬 중요했기 때문에, 입력 시간 자체가 큰 비중을 차지하지 않았음
       그런데 Claude를 써보면서 느낀 점은, 기존엔 번거로워 잘 안했던 코드 변경을 집중 없이도 손쉽게 할 수 있다는 것임
       예전엔 enum 값 하나 추가할 때마다 매칭되는 모든 부분을 신경 써서 수정했는데, LLM은 그 부분 자동 수정이 가능함
       컴파일 오류 하나하나 고치느라 번거로웠던 작업도, Claude에게 반복적으로 수정시키면 됨
       여러 에이전트가 동시에 코드의 다양한 부분을 손봐주니까, 그 시간에 나는 큰 구조를 고민하거나 HN에서 글을 쓸 수도 있음
       즉, 컴파일 에러 수정을 안 해도 되니, 좀 더 많은 변화를 신속하게 적용할 수 있고, 예전엔 주니어가 하루종일 해야 했던 일을 한번에 끝낼 수 있게 됨
       따라서 전체 아키텍처 설계에 더 집중할 수 있고, 오래 미뤘던 코딩 잡무도 다 해결할 수 있어 동기 부여에 큰 도움임
          + ""타이핑 빨라져도 결국 목표 도달이 빨라지지 않는 이유는, 설계가 병목 지점이기 때문""이라는 말에 공감함
            LLM은 좋은 설계를 짜는 데엔 형편없기도 하고, 미세한 함수 하나하나조차 항상 리팩터링이 필요함
            실제 구현 단계에서의 생산성 향상은 있지만, 이미 내 머리 안이나 문서로 있던 아이디어를 구체화하는 수준임
            브레인스토밍 용도로는 쓸만함
            코드와 테스트를 몽땅 던져서 ""놓친 엣지 케이스 있나""를 질문하면 10개 중 한두 개 정도는 유의미한 조언이 나옴
            단기간 동작 픽스와 중장기 구조적 우수함은 너무 다른 문제라, LLM이 후자까지 따라올 수 있을지는 미지수임
          + ""코드베이스에 해두고 싶은 일이 잔뜩 있다""는 점에 대해, 사실 나는 코드 변경 자체보다 리뷰가 병목임을 실감함
          + ""주니어가 하루종일 걸릴 일을 LLM이 금방 해준다""는 것이, 결국 신입들이 배움을 얻을 기회를 없애고 채용 축소로 이어진다면, 누가 이들을 성장시킬지 걱정임
     * ""테스트가 실패할 때 코드를 고칠지, 테스트를 고칠지 결정하지 못한다""는 현상에 대해
       ""Red-Green-Refactor"" 언어를 쓰는 것이 도움됨
       지금은 RED 단계(테스트 실패가 정상임), GREEN 단계(최소 코드로 성공 상태 만들기), REFACTOR 단계(테스트 깨지지 않도록 코드 개선)의 흐름을 LLM에게 명확히 전달함
       이렇게 하면 LLM이 단순히 ""고장 난 코드 고치기""가 아니라, TDD의 마인드 모델을 인식할 수 있음
     * LLM이 ""나만의 Facebook을 만들어줘"" 수준의 전체 신규 프로젝트엔 아직 못 미치는 것은 명확하다고 생각함
       그 대신 ""이런 모달을 추가해줘, 기존 코드 참고해서 스타일 맞춰줘""처럼 더 세부적인 작업에서는 원하는 결과를 얻은 적이 많음
       문제를 작은 단위로 쪼개서 하나씩 전달하면 훨씬 좋은 결과를 얻게 됨
          + 기존 코드 복사해서 원하는 대로 수정하는 건 이미 직접 할 수 있음
            내 시스템 클립보드는 LLM과 달리 항상 결정론적으로 동작해서, LLM처럼 무한하게 예기치 않은 새 문제를 만들진 않음
          + v0 같은 신생 도구가 이런 요청에 어떻게 대응할지 궁금함
     * 글 서두의 4단계 프로세스가 Deutsch의 ""The Beginning of Infinity""와 매우 유사하다고 느낌
       우리의 이론은 '추측'에서 비롯되고, 지식은 '추측과 비판의 순환'에서 생기는 구조임
       코드를 작성하는 것은 일종의 '추측'이고, 테스트를 만드는 것은 그 추측에 대한 '비판'임
       두 가지 모두 머릿속의 설명(플라토니즘적 이상)에 가까워지고자 시도하는 과정임

   왜 '현재' 의 LLM은..
"
"https://news.hada.io/topic?id=22618","호주에서 Google Search와 관련한 Google의 반경쟁적 행위 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               호주에서 Google Search와 관련한 Google의 반경쟁적 행위 인정

     * Google이 호주에서 Telstra와 Optus와의 계약을 통해 경쟁을 제한한 사실을 인정함
     * Google은 ACCC와 협력하여 5,500만 호주달러의 벌금 제안에 동의함
     * 2019년 12월부터 2021년 3월까지, Telstra와 Optus는 Google Search만 사전 설치함
     * Google은 독점 계약으로 인해 실질적인 시장 경쟁 저하 효과를 초래한 점을 시인함
     * ACCC의 조치로 앞으로는 여러 검색 서비스의 선택권이 확대될 전망임


개요

     * 호주 경쟁소비자위원회(ACCC)는 Google Asia Pacific을 상대로, 과거 Telstra, Optus와 맺은 Google Search 사전 설치와 관련된 반경쟁적 합의에 대해 연방법원 소송을 개시함
     * Google은 ACCC에 협조하여 책임을 인정했고, 법원에 5,500만 호주달러의 벌금 지급을 공동 신청하기로 합의함
     * 최종 벌금 및 명령의 적정성은 법원의 판단에 따름

반경쟁적 행위 내용

     * 2019년 12월부터 2021년 3월까지 Telstra, Optus는 소비자에게 판매하는 Android 휴대폰에 Google Search만 사전 설치하고 다른 검색 엔진은 설치하지 않는 조건을 수락함
     * 그 대가로, Telstra와 Optus는 Google Search로 발생한 광고 매출의 일정 비율을 배분받음
     * Google은 이 합의가 시장 내 경쟁을 실질적으로 저해했을 가능성이 높음을 인정함

구체적 시정 조치 및 추가 약속

     * Google과 미국 모회사 Google LLC는 법원에서 집행 가능한 확약도 제출, 이는 2017년부터 이어온 Google과 호주 통신사 및 제조사 간 계약의 경쟁 제한 우려를 완화하기 위한 조치임
     * Google은 Android 단말기에 대한 사전 설치, 기본 검색 엔진 제한 조건을 계약에서 삭제하는 데 동의함
     * 작년에는 Telstra, Optus, TPG 역시 법원 집행이 가능한 시정 조치를 제출하여, 앞으로는 Google 단독 독점적 사전 설치나 설정 계약을 갱신하지 않기로 약속함
     * 통신사들은 기기별로 임의로 검색서비스를 구성할 수 있고, 타 검색 엔진과도 사전 설치 계약이 가능하게 됨

시장 영향 및 경쟁 촉진

     * ACCC 의장에 따르면, 이와 같은 경쟁 제한 행위는 호주에서 불법으로, 소비자 선택권 축소와 비용 증가, 서비스 품질 저하를 초래할 수 있음
     * 이번 합의와 시정조치로 수백만 호주인에게 더 많은 검색 서비스 선택권이 생기고, 경쟁 검색엔진도 시장 노출을 기대할 수 있음
     * AI 기반 검색툴이 발전함에 따라 정보 검색 방식에 혁신이 일어나고 있고, 이에 따른 새로운 경쟁이 촉진될 전망임

ACCC 조사 및 배경

     * 이번 소송은 ACCC의 장기 조사 결과 비롯됨. 특히 디지털 플랫폼 서비스 시장의 경쟁 환경 보고서에서 Google Search의 독점적 계약에 대한 우려가 부각됨
     * ACCC는 정부에 독점적 사전 설치 및 기본값 설정을 통한 경쟁 저해를 해결하는 새로운 규제 체계 도입을 권고했으며, 해당 체계 도입이 논의되고 있음

Google Asia Pacific의 위반 인정 배경

     * 연방법원 소송은 2019년 12월~2021년 3월 사이 Telstra, Optus와 맺은 모바일 광고 매출 배분 계약에 기반함
     * 양사는 해당 계약 기간 동안 Google Search만 전면에 배치하고, 유사한 타 검색엔진은 절대 사전 설치하거나 추천하지 않겠다는 조항을 포함함
     * Google Asia Pacific은 이같은 조항이 실질적으로 시장 내 검색 엔진 경쟁을 방해했음을 소송 절차 내에서 인정함

디지털 플랫폼 서비스 관련 정책 권고

     * ACCC의 '디지털 플랫폼 서비스 5개년 조사'를 통해, 호주 디지털 경제에서의 경쟁 촉진 및 소비자 보호 강화를 위한 정책 방향 제안
     * 대규모 테크 기업과 호주 기업 간 경쟁의 장 균형을 맞추고, 소비자 가격 인하를 위한 다양한 권고 포함됨
     * 경쟁 저해 우려가 큰 계약(독점 사전 설치, 기본값 설정 등)을 막기 위한 서비스별 규제 코드 제정 제안

법적 절차 및 기록

     * 해당 사건은 분쟁 전 당사자 간 합의가 있어 ACCC가 연방법원에 서류 제출로 신속히 시작됨
     * 자세한 확약 내용은 ACCC 공개 레지스터에서 확인 가능함

부록: Google LLC 및 Google Asia Pacific 소개

     * Google LLC는 Alphabet Inc. 의 전액 출자 자회사임
     * 2017년 이후 Google LLC 및 관계사는 Google 앱 유통, 광고 수익 배분 계약 등 다양한 형태의 계약을 전 세계 제조사, 통신사와 체결함
     * Google Asia Pacific은 아시아 태평양 지역 모바일 광고 수익 배분 계약의 주 계약 상대임

        Hacker News 의견

     * 왜 이런 행동이 엄청난 벌금으로 단념되지 않는지 궁금함, 이사회와 주주들이 경영진을 내보낼 만큼 큰 처벌이 아닌 이유임, 결국 대기업의 불공정 경쟁을 막는 법이 얼마나 약한지 보여주는 사례라고 생각함, 중소기업과 심지어 부유한 스타트업조차 구조적으로 불리한 상황임
          + 벌금을 수익에 비례하여, 충분히 아프게 만들 정도의 %로 책정하는 게 이 분야에서 공정성을 구현할 수 있는 몇 안 되는 방법임, 일부 유럽 국가에서는 개인 벌금에 이런 원칙을 적용하기도 함
          + 추측이지만, 권력기관이 일부러 독점이 유지되길 원해서 반독점 규제를 강하게 시행하지 않는 것 같음, 이를 통해 통제와 감시를 완전히 얻으려는 의도임, Peter Thiel이 스탠포드에서 모두에게 “독점이 되는 비즈니스 모델을 지향하라”고 한 이유도 이런 맥락임, 실제로 자본을 저렴하게 조달할 수 있는 그룹들은 비즈니스를 제대로 운영하는 방법을 모름, 다만 기득권의 막대한 보조를 받는 것뿐임
          + 벌금이 진짜 아프지 않으면 멈출 유인이 전혀 없는 상황임
          + GDPR에서는 이미 이런 수준의 벌금이 적용되므로, 반경쟁법에도 같은 기준이 적용되어야 한다고 생각함
            GDPR 벌금 예시
               o 경미한 위반: 최대 1천만 유로 또는 전년도 전세계 매출의 2% 중 더 큰 금액
               o 심각한 위반: 최대 2천만 유로 또는 전년도 전세계 매출의 4% 중 더 큰 금액
                 그리고 중국처럼 “법대로 안 따르면 아예 영업을 못 하게 한다”는 사례도 있음
          + 이번 건은 합의로 종결된 것임, 만약 벌금이 아주 컸다면 합의가 쉽지 않았을 것임, 그리고 외국계 회사에 큰 벌금을 때리는 순간 무역 문제로 커져서 상황이 복잡해짐, 최악의 경우 대기업들이 시장 철수를 선택할 수도 있고, 중소기업과 스타트업만 남는 상황은 기존 대기업이 제공하던 서비스를 대체 못 해 반사적 피해가 올 수 있음, 그래서 지나치게 큰 벌금 대신 일정수준의 벌금으로 실질적인 컴플라이언스 준수를 유도하는 절충이 이뤄지는 것임
     * 내가 이해하기로는, 이번 건은 2019년 12월~2021년 3월 사이 Google이 Telstra, Optus, TPG(호주 3대 통신사)에 Android폰에 구글 검색만 기본·유일하게 설치하도록 하고, 대신 이들 통신사에 구글의 검색 광고 수익 일부를 지급한 딜에 관한 것임
       궁금한 점과 추가적 맥락
          + 2021년에 왜 그만뒀는지, 이런 사건이 왜 4년씩 걸리는지
          + Google이 다른 나라에서도 통신사와 비슷한 계약을 맺는지, 미국의 T-Mobile, Verizon, AT&T와도 유사 계약이 있는지, 만약 유사 계약이 없다면 이유가 뭔지
          + Google이 Mozilla, Apple과 각 브라우저에 기본 검색엔진으로 들어가는 계약도 반경쟁적 요소가 있는지
          + 이 딜이 구글에게 얼마나 가치가 있었는지, 아마 딜이 없었어도 통신사들이 굳이 다른 검색엔진을 채택하지는 않았을 것 같은데, 적어도 더 많은 옵션을 프리설정해줬을 것이고, 그것 자체가 반경쟁성의 핵심 민원이라는 생각임
          + Google이 다른 나라들도 통신사 또는 제조사와 유사 계약을 여러 번 체결한 적 있음을 알고 있음, 이미 불법으로 판정된 사례도 많아서, 이게 이번 호주에서 중단된 이유일 수 있음
            바로 Android MADA 계약임, 10년 전부터 이런 예시가 존재함
          + 구글 반독점 소송 사례 및 국가별 정보는 이곳(세계), 이곳(미국2020), 이곳(미국2023), 이곳(유럽연합)에서 참고 가능함
     * 이런 명백한 반경쟁적 행위가 공식적으로 수면 위로 올라오는 데 이렇게 오래 걸린 게 놀랍다는 생각임, 수백 만 대 Android폰에 디폴트 검색 독점권을 광고수익 리베이트와 맞바꾼다는 건 정말 전형적인 행태임
          + 이 사건은 대부분 2020년에 일어난 14개월 동안의 행위에 해당함, 통신사들은 이미 1년 전에 정산했고, 규제당국 입장에서는 시간적으로 그리 길지 않은 것임, 2021년 발표된 보고서에서 시작해 2022~2023 추가 조사 후 정부에 보고됨, 호주는 실제 벌금을 때릴 수 있는 유일한 방법이 소송인데, 소송할수록 시간이 오래 걸릴 수밖에 없음(특히 구글이 비협조적일 경우), 내부 사정은 모르지만 소송 준비하다 직전에 합의된 걸 수도 있음, 구글이 Apple이나 Mozilla에 해마다 지급하는 액수를 알면 이번 사안이 그다지 크지 않아 보일 것임
          + 사실 이런 행위는 2014년부터 이미 잘 알려진 사실임, 정부가 실제로 뭔가를 하기까지 상당한 모멘텀이 필요했음
     * 참고로 구글은 2.5시간마다 5천5백만 달러의 이익을 냄
          + 이런 식으로 보면 벌금은 그저 “기사 제목을 위한 벌”에서 “사업 비용”으로 바뀌는 셈임
          + 구글이 50억 명의 유저가 있다면, 1인당 하루 5센트 버는 셈임
          + 문제는 이 딜에서 얼마가 나오냐는 것임, 구글의 사업 자체를 막으려는 게 아니고 이런 행태가 이익이 안 남도록 하고, 약간의 경고도 주자는 취지임, 그리고 앞으로 비슷한 행동시 훨씬 강력히 집행하겠다는 메시지임
          + 검색이나 YouTube 둘 다 꽤 쓸 만하다고 생각함
     * Telstra, TPG, Optus도 명백히 반경쟁 행위의 가담자이자 이익을 공유한 당사자임, 따라서 이들도 벌금을 내는 게 맞는다고 봄, 이건 순진한 행동이 아니라 Microsoft가 PC벤더와 유사 행위한 사례에 비유할 수 있음
     * 구글 검색이 프리설치된 게 “그냥 원래 그런 것”이 아니라, 구글이 돈을 줘서 그런 거라는 게 신기함, 알고 보니 너무 당연해지는 부분임
          + 예전 MS가 윈도우 프리설치 위해 PC 제조사에게 돈 주거나 압박했던 시절을 떠올리게 함
     * 실제로 지금 이런 일이 벌어진 후 사람들이 폰에서 기본 검색엔진을 바꿀지 모르겠음, 우리 모두 구글 생태계에 너무 깊이 잠겨 있어서, 벌금도 사용자 습관 변화엔 아무 효과 없을 것 같은 느낌임
          + DuckDuckGo가 시장점유율 2.5%까지 성장함에도 불구하고, 이런 진입장벽 속에서 의미 있는 소수 유저가 실제로 선택을 바꾼다는 증거임
          + 나는 Kagi를 모바일에서 사용함, 실제로 바꾸는 사람 있음이 명확함
          + 구글 검색을 몇 년째 안 씀, 예전보다 오히려 안 좋아졌다고 느낌
          + 구글이 AI 검색 도입하며 내 동의 없이 자동 적용했을 때 DuckDuckGo로 기본엔진을 바꿈
          + 참고 데이터는 Kagi 공식 통계에서 확인 가능함
     * 구글의 수익, 매출, 시가총액, 주주들의 형사책임 등에 실제로 영향이 가는 일이 벌어지기 전까진 이런 건 시간낭비라 생각함, 2019~2021년 동안 구글의 수익과 이익은 크게 늘었고, 설령 거액의 벌금을 맞아도 회사나 결정을 내린 임원진에겐 의미 없는 금액임, Meta가 Onavo 인수 후 사용자 감시에 쓴 MITM 방식과 비슷함
     * Telstra와 Optus가 Google Search만 사전설치하기로 하고, 수익의 일부를 나눠 가진 딜이었음, 이익을 모두 얻은 상황에서 구글만 따로 표적삼는 건 좀 이상하지 않냐는 생각임
          + Microsoft도 PC 제조사와 비슷한 일 한 적 있음, 관련 내용은 여기 참고
          + 누가 직접적으로 이득을 봤냐의 문제보다는 Google이 시장 지배력을 활용해 경쟁을 억제한 게 쟁점임, Telstra와 Optus는 시장지배력 자체가 없으니, 이번 사안에서 중요한 당사자는 아니라는 논리임
          + 이득을 챙기는 게 죄는 아니고, 의도적으로 경쟁을 억누르는 게 문제임, 구글만 경쟁 억제라는 혜택을 누렸으니 리베이트 지급자가 된 것임
     * 내가 아이폰4 시절에 하루만에 만든 간단한 앱 ""3D Coin Toss""를 앱스토어에 올려서 프로모션 없이도 광고와 IAP로 분기당 700달러 정도 꾸준히 벌었음, 앱의 유입은 거의 전부 구글 검색에서 나왔고, 검색 첫 페이지에 떴으니 사용자도 직접 앱스토어로 갔음
       그런데 어느 날부터 구글이 직접 ""coin toss"" 검색 결과 최상단에 자체 코인토스 기능을 넣더니, 사용자 유입이 완전히 끊어짐, 검색 결과 내에서 바로 동전던지기가 가능하니 당연한 결과였음
       그때 처음으로, “이게 공정한가? 왜 구글이 나와 경쟁하려고 하지?”라는 생각을 했던 기억임
"
"https://news.hada.io/topic?id=22537","오픈 하드웨어 데스크톱 3D 프린팅은 죽었다 — 당신만 아직 모를 뿐","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 오픈 하드웨어 데스크톱 3D 프린팅은 죽었다 — 당신만 아직 모를 뿐

     * 오픈 하드웨어 데스크톱 3D 프린팅이 2020년 전후 중국 보조금·정책 드라이브와 특허 급증으로 사실상 붕괴 국면에 들어섰음
     * 중국 내 특허 실용신안과 저비용 출원을 활용한 특허 스팸 전략으로 오픈 프로젝트의 선행기술도 방어가 어려워짐
     * Prusa가 공개한 MMU 멀티플렉서 설계를 Anycubic이 우선권 주장을 통한 해외 출원(중국→독일→미국)으로 특허화하려 시도한 사례
     * 특허 한 건의 출원·집행 비용 비대칭으로 수입·판매 금지 리스크가 현실화되면 제조사와 유통 파트너가 회피해 오픈 하드웨어의 제조·유통 의존성이 치명적 약점이 됨
     * Prusa는 조기 경보 팀 구축, 새로운 커뮤니티 라이선스 준비, 공동 대응 조직 구상을 통해 산업 전반의 방어망을 만들자고 촉구함


Hello Hacker News

     * 본문 공개 후 질문이 많았던 “그 특허”에 대해 추가 설명을 공유
     * 9년 전에 오픈소스로 공개한 MMU 멀티플렉서를 Anycubic이 중국 실용신안(CN 222407171 U) → 독일 실용신안(DE 20 2024 100 001 U1) → 미국 출원(US 2025/0144881 A1) 순으로 확장 출원했다는 전개를 지적
     * 중국 실용신안은 심사가 상대적으로 완화되어 초기 저비용·고속 부여가 가능하고, 이를 바탕으로 타 국가에 우선권을 주장해 방어 비용을 높이는 플레이북
     * 선행기술이 있어도 즉각적인 해결책이 아니며, 무효화·소송은 비용과 시간이 많이 드는 현실
     * 관련 토론을 Hacker News 댓글에서 이어가고 있음

서문

     * 필자인 Josef Prusa는 최근 FAB 2025 프라하 행사 참가 중 오픈 하드웨어의 현황에 대해 현타와 위기감을 느낌
     * 3D 프린팅 업계에서 과거의 창의적 혁신과 아이디어 공유 문화가 빠르게 약화되고 있음
     * 오픈 하드웨어, 특히 데스크탑 3D 프린팅 분야가 이미 위험에 놓여있음

     “오픈 하드웨어는 이미 죽었다”

무엇이 벌어졌나

     * 지난 5년간 유럽과 미국 곳곳의 창의적 브랜드가 사라지고, 혁신의 도입과 공유 선순환 약화
     * 2020년 전후 중국 정부의 전략산업 지정 이후 시장 이상 신호 발생, 일부 부품 가격이 완제품 가격보다 높은 가격 왜곡 현상 확인
     * 조사 결과 중국의 보조금 및 정책 지원이 존재하며 매우 효율적으로 작동함
     * 데스크톱 3D 프린팅 산업이 중국 의존에 가까워지고 있으며, 이는 새로운 IP 창출 수단을 특정 지역에 과도하게 의존하는 위험

특허 지뢰밭

     * 2020년 무렵 중국의 3D 프린팅 특허 출원 급증, 일부 대형 업체는 2019년 40건에서 2022년 650건으로 폭증했다는 Espacenet의 데이터도 확인
     * 대규모 혁신이 실제로 증가한 것이 아닌 세액 공제(“Super deduction”) 제도 충족을 위한 출원 드라이브 가 강하게 작동한 것

  무슨 일이 있었나

     * 중국의 Super deduction은 R&D 비용의 200% 공제를 허용하며, 출원만으로도 혁신 증빙 가능
     * 성숙 단계의 산업에서도 사소한 변형을 대량 출원하는 특허 스팸 전략이 유리해지고, 공개된 설계를 기반으로 한 오픈 하드웨어가 특히 취약해짐
     * 심사 과정의 유효성 검증이 느슨하고 선행기술 고려가 부족함

  특허들이 허술한가

     * 다수는 품질이 낮은 출원일 수 있지만, 산탄총 전술로 일부가 관철되기만 해도 충분히 억제력이 발생함

  위험한가

     * 이미 업계를 위축시킬 수 있는 몇몇 출원이 관찰되고 있으며, EU/미국에서 등록까지 이어질 경우 산업 장벽이 커질 수 있음

  선행기술로 충분한가

     * 중국 출원 비용은 약 125달러로 매우 낮은 반면, 해외 단계에서의 무효화 시도는 단순한 경우에도 약 1.2만 달러 이상 소요됨
     * 일단 등록된 후에는 시작 비용만 7.5만 달러에 달하고, 장기 소송으로 이어질 수 있음
     * 특허가 존재하는 동안 수입·판매 제한이 걸릴 수 있어, 선행기술을 들고 있어도 법정 다툼 없이는 사업 지속이 어려운 구조임
     * 오픈 하드웨어는 필연적으로 제조·운송·판매를 수반해 파트너 리스크 회피에 더 민감하며, 우선권 주장 기간을 활용한 다국 출원으로 방어가 더 어려워짐
     * 결과적으로 국제 조약을 영리하게 활용한 공제 제도의 역기능이 외부의 소규모 혁신가에게 불리하게 작동함

  영향

     * IP 보호의 시간 지연 때문에 당장의 피해가 작아 보일 뿐, 중국 1차 출원에서 5년+ 후 타격이 가시화될 수 있다는 지연된 충격을 경고함

우리가 하는 일

     * 조기 탐지 및 선행기술 확보를 위한 얼리 워닝 팀을 구성했고, 산업 전반의 참여를 환영함
     * 2016년 공개한 MMU1 멀티플렉서가 독일·중국 실용신안으로 이미 부여되고, 미국 특허 출원까지 진행된 사례가 있음
     * 재공유 위험을 낮추기 위한 새로운 커뮤니티 라이선스를 준비 중이며, 특허 장벽 구축에 맞설 핵심 영역 보호와 공동 대응 조직 설립을 검토함
     * 공유를 위해 먼저 보호를 고민해야 하는 역설적 상황에 놓였음을 토로함

결론(테이크어웨이)

     * 이 문제는 3D 프린팅을 넘어 Made in China 2025의 오픈 하드웨어 진영 전반에 해당함
     * 각자의 전문 분야에서 출원 모니터링을 지금 시작하는 것이 사후 대응보다 비교 불가능하게 유리함

        Hacker News 의견

     * 진짜 문제는 지식재산권(IP) 소유가 뜻밖에도 자본집약적이라는 점임, 그래서 오픈소스와 커뮤니티가 만든 IP는 심각하게 보호받지 못하고, 자본이 있는 쪽이 일방적으로 유리해짐, 이는 미국 사법 시스템 전체가 돈과 시간이 엄청나게 들어가야 작동한다는 근본적인 문제의 일부임, 현 시스템이 여전히 종이문서와 법원 직접 출석을 요구한다는 것이 너무나 시대착오적임, 시스템의 느림과 비용 자체가 부자를 위한 ‘약자 괴롭히기’ 도구로 쓰이고 있다는 점이 매우 실망스럽다고 생각함
          + IP(특히 저작권)는 너무 강력함, 기간도 황당할 정도로 길고, DMCA 같은 우회 규정도 많음, 별 의미 없는 특허(예: 연결 리스트)에조차 관대함, 이런 제도적 과보호가 중국 기업들이 3D 프린터나 드론 같은 기술에서 빠르게 발전할 수 있는 이유임, 중국발 특허를 서구가 진지하게 심사하는 게 오히려 어처구니 없음, 이런 비대칭이 중국 기업에 명백한 이점을 줌
          + 실제로 발목을 잡는 건 종이문서나 출석이 아니라 높은 비용 자체임, 소액 소송조차 접수비로 몇 백 달러가 들고, 법률이 너무 복잡해서 전문가(변호사) 없이 제대로 처리할 수가 없음, 변호사 비용을 일반인이나 스타트업이 부담하는 건 현실적으로 불가능함, 해결하려면 변호사 비용 구조 자체를 바꾸거나, 법원 절차를 과감히 단순화하고 자가 변호(프로세)를 완전히 허용해야 함
          + 이런 절차의 간소화는 오히려 특허 ‘스팸’ 문제를 더 악화시킬 수 있음, 실질적으로 방어 비용이 공격(무분별한 특허 출원) 대비 너무 크기 때문임
          + 특허는 굳이 필요하지 않다고 생각함, 혁신이 이미 산업에 ‘떠 있는’ 개념이라면 시간 문제일 뿐 언젠가 다른 사람도 자연스럽게 도달함, 독점권보다는 정부/시장 주도의 혁신 보상 방식이 훨씬 더 민주적임, 이런 모델이 기존 혁신들과도 충분히 상승작용을 낼 거라 기대함
          + 특허청이 특허의 실질적 유효성 검증을 거의 법원에 떠넘겨 버린 것이 본질적 문제임, 여기에 부분적으로 동의함
     * 데스크탑 제조업 하비스트이든 소상공인이든, 실질적으로는 중국산 제품을 구입하는 게 현실임, 크레얼리티나 밤부 랩스 프린터만 해도 동급 유틸리티를 절반 가격에 얻음, 인두기·엑츄에이터·오실로스코프도 마찬가지임, 반면 Knipex, Wera 같은 유럽 공구는 내구성 면에서 오랜 가치를 주니 장기적으로는 더 경제적임, 새 중국 공구와 옛 서구 중고 제품(eBay) 사이에서 어떤 걸 고를지는 각 세대 간 성능 차이에 따라 달라짐, 중국산의 가장 큰 문제는 ‘책임감 없음’임, 브랜드 불일치, 드롭쉬퍼, 제조사 미확인 등으로 구입자가 누가 진짜 만드는지 모름, 물론 밤부 랩스처럼 예외적 브랜드도 생겼음, 서구 공구는 안심을 사는 셈인데, 그마저도 요즘 부담스럽다고 느낌
          + Prusa는 현지 생산, 부품 공급 체계, 오픈 메이커스페이스 운영, 오픈 하드웨어 공헌 등 많은 가치를 실천하고 있음, 오래된 기계용 업그레이드 경로도 꾸준하고, 수리성도 훌륭함, 직접 문의도 가능함, 이런 요소가 구매 결정에서 상당히 중요함, Knipex, Wera처럼 말임, 밤부 랩스도 사용하지만 본격적인 데스크탑 FDM 용도는 Prusa가 훨씬 적합하다고 생각함, 여러 프린터 묶음 구매도 항상 Prusa가 우위였음
          + 중국 제품은 예전 ‘Harbor Freight’ 이미지와 달리 굉장히 발전했음, 설명서도 이젠 수준이 높고, 제품 자체 설계·품질도 뛰어남, 반면 일부 미국 브랜드는 실제로는 중국 제품만 '라벨'만 바꿔 팔기에 진짜 중국 브랜드보다 품질이 떨어질 때도 있음
          + 중국산 구매가 강제되는 건 아니지만, 카테고리에 따라 가성비가 압도적인 게 사실임, 다만 소규모 기업 땐 수공구 비용이 인건비에 비해 아주 작은 비중이라 2배 가격이라도 괜찮음, 실제로 우리 해커스페이스엔 Prusa 프린터 8대 있고, 이전 스타트업랩엔 10대 있었음
          + Creality Ender3 v3와 Prusa mk4s 모두 사용해보았는데, 품질은 비슷하게 맞출 수 있어도 Ender는 셋업·관리 난이도가 훨씬 높고 실패율도 높았음, Creality 소프트웨어는 답답하리만치 업데이트도 없어다 한 번에 4개씩 쏟아질 때도 있음, Slicer도 버그 많고 기본 세팅이 거의 최고치라 시끄럽고 품질도 떨어짐, 반면 Prusa 키트 조립하면서 '제품이란 이렇게 만들어야 한다‘라는 생각이 들었음, 문서화도 뛰어났고, 다만 가격은 3배 정도임
          + 하비스트에게 ‘강제로’ 구매되는 건 없다고 생각함, 요즘 취미가 장비 구매 경쟁처럼 된 건 유튜브의 영향이 크다고 봄, 어쨌든 대부분 하비스트는 장비 한계까지 활용할 일도 없고, 사업자만큼 경제적 동기를 느끼지도 않음
     * 3D 프린터 분야는 전체 물리적 디바이스 제작 산업의 축소판임, 중국 외 모든 나라들(Prusa 빼고!)이 점점 기술력과 노하우를 잃어가고 있음, 나의 Raise3D 프린터는 뛰어나게 신뢰할만 하고, JLC에서 주문하는 PCB도 값싸고 오류 없는 고품질임, 문제는 이런 의존도가 불안하다는 점임, 특허를 무기화하는 것도 리스크고, 핵심 기술 지식을 한 국가가 독점하는 것도 리스크임, 그래도 누군가(중국)가 '문명 유지'의 불씨를 이어가고 있다는 점에 감사해야 할 상황임
          + IP 보호가 진짜 문제인 건, 대부분의 기업이 특허에 ‘적당히’만 드러낼 뿐, 실제 노하우는 문서화되거나 공개되지 않음, 시간이 지나면 회사가 망하고 기술·문화도 사라짐, 결국 누군가가 나중에 다시 ‘재발견’해야 하는 게 현실임
     * 2011년에 Reprap 시작해서 Prusa 등과도 IRC에서 자주 소통했음, 내 경험상 Reprap과 OSHW(Open Source Hardware)의 진짜 가치는 ‘기계를 직접 만들고, 튜닝, 진화’시키는 과정 그 자체임, 2014년쯤 ‘조립 프린터 사는 게 현명하다’는 분위기가 확산되면서 다소 침체가 왔음, 사실상 열정도 이해도 없는 사람들이 퍼뜨린 왜곡이거나 근거 없는 FUD였음, 내 2015년 자작 프린터는 여전히 잘 동작함, V2 Smoothieboard 테스트베드로 약간의 개조만 했음, 기능은 최신 대기업 프린터만큼은 아니나 안정적이고 견고함, Logxen이 ""Opensource hardware는 예술가적 비즈니스 모델 위의 엔지니어링""이라 말했던 게 기억남, OSHW가 끝났다고 포기하는 건 남보다 그림을 못 그린다는 이유로 예술을 그만두는 것과 같음, Limor Fried 얘기도 ""나는 그냥 오픈소스 하드웨어를 계속 만듦, 너희는 맘껏
       논쟁하라""는 식임, @josefprusa에게도 프로젝트의 세계적 영향력을 잊지 말라는 말을 전하고 싶음, 돈보다 더 소중한 무언가가 있음
          + ""조금만 관리하면 된다""는 건 단순한 사용과 전혀 다름임, 자작 프린터를 꾸준히 굴릴 수 있는 건 사용자가 익숙하고, 그런 관리도 즐기는 소수임, 대부분의 사람들은 3D 프린터 자체엔 큰 흥미가 없고, 이 기계를 그냥 도구로 쓰고 싶어함, 빠르게 신뢰성 있게 바로 인쇄 가능한 완제품(튜닝·조립 다 된 프린터)이 당연히 대다수에겐 더 나은 선택임
          + OSHW 커뮤니티가 소규모(기술 매니아) 중심이긴 하지만, 이런 가치와 윤리가 OSHW 비즈니스로 더 넓게 퍼져서, 더 저렴해진 부품 같은 환원 효과까지 커진다고 생각함, 커뮤니티가 사라지는 일은 없겠지만 이 생태계가 위축되는 현상은 진정 아쉬움
          + 나도 직접 자작 프린터부터 시작해서 순수 RepRap 스타일로 다양한 커뮤니티 멤버와 부품을 교환하며 개조·튜닝·디버깅을 반복했음, 동시에 대량 생산형 프린터도 사용함, 각기 재미가 있고, 자작 프린터를 ‘프로젝트’로 삼고 싶은 사람 아니면 완제품이 훨씬 인생이 편해짐, 덕분에 실제 설계와 출력에 더 집중할 수 있었고, 부품 공급도 양쪽 다 가능했음, 밤부 같은 기성 브랜드가 부품 공급은 오히려 더 장기적으로 믿을 수 있다고 생각함, 모든 자작 칭송 글엔 항상 ""나는 2015년에 만든 프린터를…""로 끝나는데, 둘 다 써봐야 차이를 제대로 알 수 있음
          + 어떤 사람은 취미 자체가 목표, 어떤 사람은 진짜 도구가 필요함, 이 차이가 큼
     * 하드웨어 엔지니어로서, 재미있는 제품 아이디어를 갖고 있어도, 중국은 마치 하드웨어판 AGI/LLM처럼 느껴짐, 경쟁하려 들 필요도 없이 그들은 더 빠르고, 싸고, 품질도 좋고, 꼭 수익을 목표로 하지도 않음, 소프트웨어도 만약 LLM이 모든 완성 소프트웨어를 곧장 따라 만든다면, 신제품 개발 동기가 완전히 사라질 것임, 이게 바로 현재 미국/서구 하드웨어 현실임, 내가 5~6년 전에 개발한 제품은 부품 원가만 $75(규모 키워야 $60)였는데, 이미 중국 경쟁사는 $70에 공급함, 난 $200에 팔아야 수익 남음, 이런 현실 속에서도 $800짜리 중국 프린터들은 정말 뛰어남
          + 제조업을 다시 미국에 가져오자는 얘기도 많긴 한데, 실제 정부가 하는 건 많이 미흡함, Solano Foundry 프로젝트처럼 긍정적인 혁신 시도는 희망적임, 허가제 개혁, 물리적 집적효과, 자동화로 인한 인건비 무력화 등 많은 장점이 있음, 사실 일자리 감소 원인이 대부분 자동화고 중국 때문은 아니라 생각함
          + $800짜리 중국 프린터가 아주 뛰어나지만, 나는 방금 프로모션 중 밤부 A1을 300유로에 샀고, 이 가격에 이런 품질이 나온다는 게 정말 충격적이었음, 최근 산 하드웨어 중 가장 인상 깊음
          + 곧 프로프라이어터리 소프트웨어조차 경쟁우위가 안 될 느낌임, 어떤 복잡한 코드도 너무 손쉽게 복제될 미래가 올 듯, 오픈소스의 시대로 가는 계기가 될 수도 있고, 가장 효과적인 경쟁 전략은 인기 오픈소스 저장소 주도권을 쥐는 것임
          + 말씀하신 '소프트웨어 복사 머신' 현상은 이미 현실임, LLM 때문이 아니더라도, 앱스토어에서 새로운 앱이 뜨는 족족 유사소프트웨어가 몇 주 만에 쏟아짐
          + 나 역시 내 AGPL 코드가 LLM 학습에 이용되어 수익성 있는 프로프라이어터리 코드로 활용되는 현 상황을 보면, 개발 의욕이 꺾임, 하드웨어 분야에서 당신이 느끼는 허탈감을 충분히 공감함
     * 중국이 수십 년간 IP와 특허를 무시하다가, 이제는 오히려 이를 무기화하는 태세 전환은 놀라움
          + 사실 미국 산업도 19C 영국·독일 기술을 무단 복제하며 성장함, 당시 특허도 국가간 보호를 받지 않음
          + IP와 관련된 ‘법적 수 싸움(로페어)’ 기술도 미국 대기업에서 배운 것임, 만약 미국이 중국 특허를 무시하기로 마음먹으면, 베른 협약(Berne Convention)은 완전히 무용지물이 될 수도 있음
          + 할리우드 영화산업의 탄생 배경에서도 비슷한 이유(특허 회피)가 있음, 새로운 일은 아님
          + 많은 중국 CEO가 서구 비즈니스스쿨 출신임, IP와 특허를 무기화하는 기술을 직접 미국식으로 학습함
          + 오히려 서구가 특허법 혁신을 등한시해 경제와 혁신이 정체된 것도 문제임
     * 직접 Voron 프린터를 조립했는데, 이것도 DIY 프린터의 정점임, 프린터라기보다는 일종의 부품 리스트+매뉴얼에 가까움, 재밌는 점은 대부분의 핵심 부품이 중국산임, 단순한 나사·베어링뿐 아니라 오픈-ish 보드(예: BIGTREETECH-OCTOPUS-V1.0)도 그렇고, 대부분의 Voron 빌드가 중국산 hotend, PEI 스프링강 베드 등 중국산 부품에 크게 의존, 기술적으로 '노-차이나' 빌드도 가능은 하겠지만 비용이 매우 비쌀 것임
          + Voron Trident를 중국 키트로 샀는데 굉장히 만족스러움, 말씀하신 대로 부품 대부분 중국산이긴 하지만, 개별 부품교체·수리·업그레이드가 자유로워서 자신만의 프린터로 느껴짐, 보드 도면도 활용해 직접 문제 진단도 가능했음, 개인적으로 밤부보다 훨씬 만족스러움, 회사 정책에 끌려다닐 걱정도 없음, 자율성을 중시하는 분이라면 꼭 도전해볼 만함
          + Voron의 진짜 매력은 만약 중국산 부품이 끊겨도 대체부품을 구해다 쓸 수 있는 구성임, PCB 등 일부는 대체가 어렵겠지만, 모터 같은 건 얼마든지 조달 가능함
     * (Josef Prusa 본인) “OHW is dead” 글 이후로 많은 질문을 받았음, 최근 ‘특허’ 건에 대한 답을 공유함, 구체적으로 MMU 멀티플렉서를 9년 전 오픈소스화했는데, Anycubic이 중국에서 유틸리티모델로 먼저 특허(CN 222407171 U)를 낸 뒤, 그걸 독일(DE 20 2024 100 001 U1)과 미국(US 2025/0144881 A1)에 연달아 출원하는 방식임, 이렇게 하면 간단히 특허를 취득하고, 비용은 낮으나 방어는 무척 힘들고 비용이 큼, 기존 선행기술(prior art)이 있다고 바로 해결되는 게 아니라는 점을 내 기사에서 설명했음, 유사한 건이 계속 나오고 있음
          + 오픈소스 전체가 특허 ‘공동 풀’ 또는 검색 가능한 발명 DB가 있어야 함, 그래야 특허 심사관이 효율적으로 심사하게 만들 수 있고, 오픈소스 커뮤니티가 아이디어 폭탄을 날려 특허 ‘폭주’를 견제할 수 있음, 해당 특허를 실제로 어떻게 검색해야 할지도 알려줬으면 좋겠음, 더 많은 노출이 필요함
     * 중국은 본질적으로 계획경제이고, VC 시스템 역시 정부 주도로 필요 산업에 자금을 뽑아주는 구조임, 수익·ROI·비즈니스모델은 중시하지 않고, 예를 들어 AI 산업을 육성한다고 하면, 경험 있는 사람이 지원하면 은행이 별 제한 없이 수백만 달러를 대출해 줌, 이 방식이 고스트시티, 고속철 ‘노선’ 등 비효율적 투자의 근원이기도 함, 즉, 결과보다 ‘시도’에 중점 두는 전략이고, 누군가가 살아남길 바랄 뿐임, 결국 경쟁자는 중국의 ‘아버지 돈’ 불태우기와 싸워야 하고, 수익을 내야 하는 서구와 비교 불가임
          + 고스트시티, 고속철 문제도 있지만, 실제로 수백 곳 도시가 번성중이고, 선전 같은 도시는 어촌에서 첨단도시로 변모함, 고속철도 대부분 실질적 교통망이 되고 있음, 시멘스에서 전수받은 IP로 시작해서 결국 일본·유럽보다 더 넓고 뛰어난 시스템을 가짐, 미국, 특히 캘리포니아가 수십 년간 고속철 딜리던 것과 대조적임, 흔히 전기차 업계에서도 중국이 보드카운팅 조작 등 비정상적 회계도 있지만, 전체적으로 품질·혁신력에서 세계 최고임, 샤오미 SU7 등 혁신적임, 반면 미국은 훨씬 많은 세금을 모으면서도 기술혁신 투자에는 매우 소극적이고, 사회적 낭비(특히 의료, 행정비)만 심함
          + 중국이 ‘AI 스타트업? 좋아, 몇 백만 주마’란 식으로 지원한다지만, 미국 벤처캐피탈도 비슷함, 차이가 있다면 국가 주도가 아니라 민간 VC라는 점 정도, 중국 경제의 총합적 성과를 보면 이런 전략도 유효한 것 아닌지 생각하게 됨, 미국에서 왜 이런 정책이 인기를 못 끄는지 궁금함, ""아버지 돈 불태우기""라는 비유도 미국 군수산업에 그대로 적용 가능함
          + CIA도 Google, Palantir, Anduril 등에 투자하는 자체 벤처(인큐텔)가 있음, 국가 전략 사업 지원은 어느 나라든 존재함
          + 결국 중국은 세계 2위 경제국이자 ""세계의 공장""임, 문제점도 있지만 현실적으로 성공 사례임
          + 포스팅이 VC 시스템을 비판하는 건지, 그냥 중국을 비판하는 건지 좀 헷갈림
     * Prusa 최신 프린터가 현재 정말 오픈인지 잘 모르겠음, 무료로 회로도 내려받아 직접 카피 가능한 제품이 아니라면, 진정한 오픈하드웨어도 아니라고 생각함, 진짜 (비영리) 오픈 설계면 특허와 무관할 텐데 사업적으론 어려울 수 있음, 다만 이건 기술적·사업적이라기보단 정치적 문제임, Prusa 같은 유럽 산업대표가 정부와 충분히 접촉해 조처할 수도 있다고 봄, 실제로 중국 특허는 EU/US 특허 대비 영향력도 크지 않고, 중국 시장을 노리지 않는 한 별 신경 안 써도 됨, 오히려 방어를 원한다면 중국에 특허등록을 미리 해두는 것이 최선일 것임
          + '특허는 판매할 때만 문제'라는 말은 사실 아님, 특허에는 개인적 사용 면책 조항이 없음
          + 중국은 자국 내에선 외국 특허를 잘 안 지켜줌, 오히려 중국에 특허를 등록하면 복제와 클론이 더 쉬워짐, 리버스 엔지니어링 필요가 줄어듦
          + Prusa가 부품별로 오픈하드웨어 방침을 줄이는 게, 오픈하드웨어 ‘침체’를 직접 보여주는 좋은 사례가 아닐까 싶음
"
"https://news.hada.io/topic?id=22584","엔지니어링 매니저를 위한 효과적 포지셔닝","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         엔지니어링 매니저를 위한 효과적 포지셔닝

     * 엔지니어링 매니저의 핵심 질문은 얼마나 코딩에 관여해야 하는가이며, 이는 단순히 개인 취향이나 리소스 배분 문제가 아닌 포지셔닝(Positioning) 의 문제임
     * 포지셔닝은 군사 리더십에서 온 개념으로, 상황 인식(Situational Awareness) 과 운영 명확성(Operational Clarity) 을 균형 있게 유지해야 효과적임
     * 네 가지 포지셔닝 구역:
          + 위기 모드(낮은 상황 인식, 낮은 운영 명확성) → 학습 & 안정화
          + 애매모호(높은 상황 인식, 낮은 운영 명확성) → 모범적 리딩
          + 맹비행(낮은 상황 인식, 높은 운영 명확성) → 수동적 코딩
          + 명확성(높은 상황 인식, 높은 운영 명확성) → 전략적 방향 제시
     * 장기적으로는 상황 인식 우선이 팀 성공의 기반이며, 코딩은 특정 시점에서 상황 인식 확보와 팀 지원을 위한 전략적 도구로 활용됨
     * 중요한 것은 고정된 답을 찾는 것이 아니라, 환경 변화에 따라 포지션을 유연하게 조정하는 것임


포지셔닝의 개념

     * 포지셔닝은 리더가 어디에 위치해 지휘·통제(Command and Control) 를 발휘할지 결정하는 것
     * 너무 전면에 나서면 세부에 매몰되고, 너무 뒤에 있으면 현황 파악이 불가해져 지휘력이 약화됨
     * 엔지니어링 매니저도 코딩 여부를 “해야 하나?”가 아니라 “어디에 위치해야 팀이 성공할 수 있는가?” 로 전환해야 함

포지셔닝 프레임워크

     * 두 축: 상황 인식(Situational Awareness) 과 운영 명확성(Operational Clarity)
     * 네 가지 구역:
          + 위기 모드 (Low SA, Low OC)
               o 매니저와 팀 모두 이해 부족, 실행 단절
               o 우선 단기 목표 설정으로 안정화 후 직접 코딩으로 기술·팀 이해도 확보
          + 애매모호 (High SA, Low OC)
               o 매니저는 이해도 높지만 팀은 혼란
               o 직접 팀과 함께 일하며 모범을 보이고, 신뢰와 책임감을 형성
          + 맹비행 (Low SA, High OC)
               o 팀은 잘 움직이지만 매니저는 기술적 이해 부족
               o 버그 수정·프로덕션 지원 같은 제한적 코딩으로 빠른 이해도 확보
          + 명확성 (High SA, High OC)
               o 이상적 상태, 매니저는 전략·위험관리·문화 구축에 집중
               o 다만 방심은 위험, 변화 탐지 위해 제한적으로 코딩 관여 가능

포지셔닝은 동적(Dynamic)

     * 팀 상황과 외부 환경에 따라 구역이 변함
          + 갑작스런 장애 → 위기 모드로 전환
          + 사업 방향 전환 → 애매모호 구역으로 이동
     * 따라서 매니저는 고정된 위치에 머무르기보다 지속적으로 위치를 점검하고 조정해야 함

상황 인식의 우선성

     * 장기적으로는 상황 인식 강화가 우선 과제
     * 상황 인식이 기반이 되어야 명확한 목표·역할 정의가 가능
     * 코딩은 상황 인식을 빠르게 확보하거나 팀의 문제를 직접 풀어주는 데 유용한 수단

결론

     * 엔지니어링 매니저가 얼마나 코딩해야 하는지에 정답은 없음
     * 중요한 것은 현재 팀의 상황(상황 인식 vs 운영 명확성) 을 진단하고, 이에 맞는 포지셔닝을 취하는 것
     * 코딩은 단순히 생산성이 아닌 리더십 도구로 활용할 때 효과적이며, 이를 통해 고성과 팀을 만들 수 있음
"
"https://news.hada.io/topic?id=22487","GLM-4.5: 에이전틱, 추론, 코딩(ARC) 파운데이션 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GLM-4.5: 에이전틱, 추론, 코딩(ARC) 파운데이션 모델

     * GLM-4.5는 오픈소스 Mixture-of-Experts (MoE) 대형 언어 모델로, 에이전트성, 추론, 코딩 성능이 뛰어남
     * 이 모델은 23T 토큰으로 다단계 훈련 및 전문가 모델 반복, 강화학습을 통해 발전함
     * TAU-Bench, AIME 24, SWE-bench Verified 등 다양한 핵심 벤치마크에서 상위권 성적 기록함
     * 적은 수의 파라미터로도 효율적인 성능을 내며, 주요 상용 모델들에 근접하거나 앞섬
     * GLM-4.5와 소형 버전 GLM-4.5-Air를 공개해 연구 및 AI 시스템 개발에 활용할 수 있음


개요

     * GLM-4.5는 3550억 총 파라미터와 320억 활성 파라미터를 지닌 오픈소스 Mixture-of-Experts (MoE) 대형 언어 모델임
     * 하이브리드 추론 방식을 적용하여, 깊이 있는 사고(Thinking) 모드와 즉각적 응답(Direct Response) 모드를 모두 지원함
     * 23조 개의 토큰을 사용한 다단계 학습과 전문가 모델 반복, 그리고 강화학습 기반 포스트 트레이닝을 거침
     * 그 결과, 에이전트성(Agentic), 추론(Reasoning), 코딩(Coding·ARC) 작업 영역에서 높은 성적 달성
          + TAU-Bench 70.1%, AIME 24 91.0%, SWE-bench Verified 64.2% 기록
     * GLM-4.5는 경쟁 모델 대비 적은 파라미터로, 전체 모델 중 3위, 에이전트 벤치마크 기준 2위를 차지함
     * 대형 모델 GLM-4.5(3550억 파라미터)와 소형화된 GLM-4.5-Air(1060억 파라미터) 두 버전을 모두 공개함
     * 전체 코드, 모델, 상세 정보는 공식 GitHub(https://github.com/zai-org/GLM-4.5)에서 확인 가능함

LLM 성능 평가: 에이전트성, 추론, 코딩 벤치마크

     * GLM-4.5 및 글로벌 주요 모델들을 12종의 대표적 벤치마크(MMLU-Pro, AIME 24, SWE-Bench Verified 등)에서 테스트함
     * GLM-4.5는 전체 평균 순위 3위, GLM-4.5-Air는 6위를 기록함
     * 에이전트성 점수 기준, OpenAI o3의 뒤를 이어 2위, 코딩 벤치마크에서도 Claude Sonnet 4와 근접한 3위를 달성함
     * GLM-4.5는 DeepSeek-R1의 절반, Kimi K2의 3분의 1 파라미터로 유사한 성능을 보임
     * SWE-bench Verified 항목 성능 대비 파라미터 수로도 GLM-4.5와 GLM-4.5-Air는 Pareto Frontier상에 위치함
     * 2025년 7월 28일 기준 성능 데이터임

서론

     * 대형 언어 모델(LLM) 은 기존의 범용 데이터 저장고에서 범용 문제 해결기로 빠르게 진화하고 있음
     * 인공지능의 종착점인 AGI(Artificial General Intelligence)는 여러 영역에서 인간 수준의 인지 능력을 갖춘 모델을 지향함
     * 이를 위해선 복잡한 문제 해결력, 일반화, 자기 개선 능력이 통합적으로 요구됨
     * 실제 업무와 복잡한 전문 문제 해결에 중요한 3대 핵심 능력은 다음과 같음:
          + 에이전트성 능력: 도구 및 외부 세계와의 상호작용
          + 복합 추론: 수학/과학 등 복잡한 단계적 문제 해결
          + 고급 코딩: 실질적인 소프트웨어 엔지니어링 수행 능력
     * 기존 SOTA 상용 모델(OpenAI, Anthropic)은 개별 영역에서 특화 성능을 보이나, 오픈소스 모델 가운데 3대 분야 모두에서 우수한 공개 모델은 부족함

GLM-4.5 및 GLM-4.5-Air 모델 소개

     * GLM-4.5/GLM-4.5-Air는 에이전트성·추론·코딩 모든 분야에서 오픈소스 최고 수준 성능을 보임
     * 두 모델 모두 하이브리드 추론 모드를 지원
          + Thinking Mode는 복잡 추론 및 에이전트성에 강점
          + Non-thinking Mode는 빠른 응답에 특화
     * GLM-4.5의 주요 성적:
          + 에이전트성: TAU-Bench 70.1%, BFCL v3 77.8%, BrowseComp 26.4%(경쟁 상용 모델 대비 우위)
          + 추론: AIME 24 91.0%, GPQA 79.1%, LiveCodeBench 72.9%, HLE 14.4%
          + 코딩: SWE-bench Verified 64.2%, Terminal-Bench 37.5%(GPT-4.1 및 Gemini-2.5-pro 대비 우위, Claude Sonnet 4와 근접)
     * GLM-4.5-Air는 1060억 파라미터로, 1000억 규모 모델 중에서도 Qwen3-235B-A22B, MiniMax-M1와 대등하거나 우위

벤치마크 성능 현황 및 특징

     * 12개 주요 벤치마크 전반에서 GLM-4.5, GLM-4.5-Air 모두 높은 순위 기록
     * GLM-4.5는 에이전트성, 추론, 코딩 분야에서 고른 성능, 파라미터 효율성 두드러짐
     * SWE-bench Verified 기준 파라미터 수 대비 최고 효율 영역(Pareto Frontier) 달성
     * 상용 및 오픈소스 여러 모델과 함께 정밀한 성능 비교 진행

공개 및 오픈소스 지원

     * GLM-4.5/GLM-4.5-Air 모델은 Z.ai, BigModel.cn뿐만 아니라 Huggingface(https://huggingface.co/zai-org/GLM-4.5)에도 공개됨
     * 벤치마크 재현성을 위해 평가 툴킷(https://github.com/zai-org/glm-simple-evals)까지 오픈소스로 제공함

사전훈련

  아키텍처

     * GLM-4.5 시리즈는 Mixture-of-Experts(MoE) 구조를 채택, 훈련 및 추론의 연산 효율성을 크게 높임
     * MoE 레이어에 loss-free balance routing과 시그모이드 게이팅을 적용함
     * DeepSeek-V3, Kimi K2와 달리 모델의 폭(히든 차원, 라우트 전문가 수)은 줄이고 깊이(레이어 수)를 늘림. 더 깊은 모델이 추론 능력 성장에 효과적임
     * Self-Attention엔 Grouped-Query Attention + partial RoPE 적용, 96개 attention head로 히든 차원 5120에 2.5배수 attention head 구성
     * 헤드 수 증가가 훈련 손실엔 영향이 없지만, 실제 추론·벤치마크 성능에는 긍정적 영향 확인
     * QK-Norm 적용으로 attention logit 값의 안정성 제고
     * GLM-4.5, GLM-4.5-Air 모두 MoE 레이어 기반 MTP(Multi-Token Prediction) 레이어를 추가하여 추론시 speculative decoding 지원
     * 아키텍처 파라미터 집계 과정에서는 MTP 레이어의 파라미터는 포함, 워드 임베딩 및 출력 레이어는 미포함

결론 및 기대 효과

     * GLM-4.5/GLM-4.5-Air는 오픈소스 AI 시장에서 고성능, 효율성, 범용성을 두루 갖춘 차세대 언어 모델임
     * 여러 분야 통합/고난도 문제 해결 역량, 상용 모델 경쟁력 확보, 파라미터 효율성에서 두각을 나타냄
     * 학계, 산업계, 개발자 연구 전반에서 오픈소스 대형 언어 모델의 혁신 기반으로 기여 가능성 확장

   해커뉴스 댓글도 그렇고, 레딧 LocalLLaMA 포럼에서 GLM이 꽤 좋다는 평이 있네요
   GLM 4.5 AIR IS SO FKING GOODDD
     * GLM 4.5 Air는 정말 엄청 빠르고, 툴 호출 능력도 우수함 (로컬은 아니고 Open Router로 테스트함)
     * GPT-5 Mini와 비교 시 작업 종류에 따라 우위가 갈릴 정도
     * GLM 4.5V 등 다른 GLM 모델도 모두 좋음
     * 특정 작업(예: 소설 작성, 코딩)에 따라 GLM이 GPT보다 자연스럽고 덜 제한적임

        Hacker News 의견

     * 이번 논문이 평소 흔히 볼 수 있는 모델 발표 블로그 글과 달리, 깊이 있는 내용을 다뤄서 정말 반가움
       Zhipu/Tsinghua 팀이 '무엇'뿐만 아니라 '어떻게'까지 상세히 설명해서, 이러한 모델을 직접 만들거나 활용하고자 하는 사람에게 특히 흥미로운 정보임
       특히 Sec 3의 훈련 이후(post-training) 방법론이 인상적임
       추론/에이전트/챗 등 전문화된 '전문가 모델'을 따로 만든 다음, 그 능력을 최종 통합 모델로 증류(distill)하는 접근 방식이 매력적임
       여러 역할을 대충 하는 제너럴리스트 모델의 한계를 훨씬 체계적으로 해결하려는 시도임
       단순히 데이터를 섞기만 하는 게 아니라, 일반적인 모델이 전문가 집단에게 배우도록 설계한 셈임
       RL 실험 결과 중 한 가지 흥미로운 점은, 전체 64K 컨텍스트에서 한 번에 RL을 적용하는 방식이 단계별 RL보다 성능이 더 좋았다는 것임(Fig 6 참고)
       많은 팀들이 반대로 생각할 텐데, 실제 결과는 다름
       그리고 함수 호출 포맷으로 XML 템플릿을 쓰는 소소하지만 똑똑한 선택 덕분에 JSON 이스케이핑 문제에서 벗어남(Fig 4 참고)
       실전에서는 JSON 안에서 코드를 이스케이프 처리하는 게 매우 골치 아픈 일임
       SWE-bench에서의 성능도 상당해서, 훨씬 큰 규모나 상용 모델과 견줄 만함
       앞으로 궁금한 점은, 이런 하이브리드 훈련법이 ARC-style 평가 이외의 환경에서도 통할지 여부임
       예를 들어 실제 업무처럼 API 문서가 없거나, 에러가 자주 나는, 입력도 모호한 복잡한 워크플로우에서 에이전트 성능도 잘 유지될지 궁금함
          + 이런 post/mid-training 방식의 트윅이, 이미 데이터와 라벨이 풍부하게 검증된 특정 도메인 학습에선 꼭 필요할지 궁금함
            소수 팀이 최신 스케일 업 트레이닝 스택만 잘 따라도 충분한지, 아니면 이런 기법을 안 쓰면 큰 차이가 나는지 알고 싶음
          + 혹시 괜히 트집 잡는 것처럼 보일까 걱정되지만, 글의 문체가 LLM 특유의 느낌이 강하게 풍김
            이전에도 같은 지적을 본 적 있음 링크
            이런 부분은 지적하는 게 온라인 환경을 건강하게 지키는 길이라고 생각함
     * GLM-4.5 코딩 모델을 꽤 오래 써봤는데, 성능이 정말 뛰어남
       내가 개발 중인 코딩 에이전트 Octofriend에서 GLM-4.5를 돌릴 때 Claude 4와 착각한 적도 있음
       내 경험상 Claude가 전체 코드베이스를 문맥으로 두고 시스템 상호작용을 고려해야 하는 상황에 좀 더 강한 느낌임
       반면 GLM-4.5는 '정직한' 편으로, Claude가 흔히 테스트 코드를 고쳐서 문제를 슬쩍 넘기는 식의 행동을 잘 안 함
       둘 다 수준이 높지만, GLM-4.5가 Claude 4 Sonnet이나 4.1 Opus에서 못 잡은 버그를 찾아준 적도 있음
       디버깅 한정으론 Claude가 근소하게 더 자주 이기지만, 차이는 크지 않음
       GPT-5와 비교하자면 Claude와 GLM 모두 일관성이 더 높음
       GPT-5는 정말 멋진 결과를 내는 경우가 종종 있지만, 한 번 비뚤어지면 다시 정상 궤도로 돌리기가 어렵고 답답함
       Octofriend 참고: https://github.com/synthetic-lab/octofriend
          + 이 댓글을 보고 Kilocode에서 GLM-4.5를 테스트해봤음
            오늘 하루 종일 Gemini CLI로 컴파일러 코드의 까다로운 버그를 잡으려 했는데 잘 안 됐음
            그런데 GLM-4.5는 바로 핵심 문제를 짚어냄
            Gemini CLI는 엉뚱한 함수만 의심하고, 어설픈 수정을 반복했는데 결국 전혀 상관없는 부분임
            확실히 GLM-4.5의 문제 집중력이 돋보임
          + 나도 GLM-4.5를 소규모 프로젝트나 짧은 요청에서 좋게 써본 경험 있음
            아쉽게도 문맥이 길어질수록 성능이 떨어지는 느낌이라, 지금은 Sonnet 4의 백업용으로 활용중임
          + aider에서 architect 모드를 활용중임
            Deepseek R1(상위 설계 담당) + Qwen3 480B(로우레벨 코딩 담당, 혹은 qwen code API 활용) 조합으로 씀
            이 구성이 정말 잘 작동함
            99.99% 문제를 혼자 해결하는 수준임
            아직 aider에서 역할 분리가 완벽하지 않아서, 직접 워크플로우를 개선한 툴을 만들려고 함
          + 첫 번째 포인트에 공감함
            나 역시 Claude는 문맥이 많을수록 더 잘 작동하고, GLM-4.5는 그런 상황에선 결과가 별로임
     * GLM-4.5 시리즈가 전체/액티브 파라미터 수를 셀 때, 임베딩과 출력 레이어를 제외하고 MTP 레이어만 포함하는 방식임
       내가 계산한 바(355B A32B)와 맞는 내용임
       GPT OSS 시리즈는 임베딩/출력 둘 다 전체 파라미터엔 넣고, 액티브 파라미터엔 출력만 포함함
       Qwen3 시리즈는 전체/액티브 모두 임베딩과 출력을 다 포함시킴
       파라미터 계산 방식이 모델마다 달라서, 왜 표준이 없는지, 어떤 계산법이 더 합리적인지 궁금함
          + 총 파라미터 수는 메모리 요구사항에 직결되기 때문에 전체 파라미터를 모두 세는 게 맞음
            액티브 파라미터의 경우 언임베딩(unembedding) 파라미터는 토큰 생성마다 모두 사용되지만, 임베딩은 컬럼 하나만 쓰이기 때문에 이런 특성을 반영해서 계산해야, 대역폭 및 레이턴시와의 관계를 제대로 파악할 수 있음
     * 앞으로 몇 년 안에, 2000달러 정도의 워크스테이션 PC에서 Sonnet 4 수준의 로컬 오픈 모델로 코딩이 가능해질 거라고 봄
       현재의 클라우드 기반 모델도 유용하지만, 개발자 경험에 핵심이 될 툴인 만큼 로컬에서 돌릴 수 있길 원함
          + 내 생각엔 2년이 아니라 올해 말이면 충분할 것 같음
          + 오픈 소스 관점에서 이런 모델은 필수임
            그렇지 않으면 오픈 소스 개발 자체가 지속불가능해질 수 있음
            오히려 2년 내 Sonnet 4 이상 성능을 2천불 PC에 올릴 수 있으리라 더 기대함
     * 이번 모델이 기존 상용 프론티어 모델과 거의 대등하게 비교될 수 있는 첫 번째 오픈 모델이라는 느낌임
       파라미터 효율성만 봐도 훈련법에서 진짜 혁신이 있었음을 알 수 있음
       Aider의 LLM Leaderboard에서 독립적인 성능 검증 결과도 궁금함
     * 나처럼 논문 초록부터 읽고 싶은 분들을 위해 링크 남김 https://www.arxiv.org/abs/2508.06471
     * 아파치 라이선스라는 점까지 너무 멋진 공개임
       오픈소스 모델이 한계에 지속적으로 도전하는 모습이 정말 기쁨
     * 이 논문에서 관찰한 내용이 너무 많아서, 각각만 따로 논문을 써도 될 정도임
       특히 학습 과정과 데이터 수집/합성에 대한 경험이 굉장히 풍부함
       혹시 저자들이 이전에도 비슷한 수준의 멋진 논문을 쓴 적 있는지 아는 사람 있음?
     * 논문의 그래프 지표가 헷갈림
       첫 번째 그림엔 sonnet 4의 swebench 점수가 53쯤 나오는데, 그 다음엔 70에 가까움
       실제 값은 70에 더 가까움 참고
     * 왜 Qwen3은 코딩 벤치마크엔 빠져 있는데, 다른 벤치마크엔 포함됐는지 궁금함
          + Section 4.3.2에 Qwen3-Coder가 포함됨
          + Qwen은 아직 대규모 코드베이스 이해에는 미숙함
"
"https://news.hada.io/topic?id=22598","FFmpeg 어셈블리 언어 레슨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           FFmpeg 어셈블리 언어 레슨

     * FFmpeg 어셈블리 언어 레슨은 컴퓨터 내부 동작을 깊이 이해할 수 있도록 설계된 오픈소스 학습 자료임
     * 이 리포지토리는 FFmpeg에서 사용되는 어셈블리 언어의 실제 예시와 실습 중심 과제를 제공함
     * C 언어 포인터와 고등학교 수준의 수학 지식이 학습의 전제 조건임
     * 이를 통해 FFmpeg 오픈소스 프로젝트에 직접 기여할 능력을 배양할 수 있음
     * Discord 채널을 통해 질문 및 토론 지원이 제공됨
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

FFmpeg 어셈블리 언어 레슨 소개

     * FFmpeg School of Assembly Language는 프로그래밍에서 가장 흥미롭고 도전적이며 보람 있는 여정을 시작할 수 있도록 제작된 오픈소스 레슨임
     * 이 레슨을 통해 FFmpeg에서 어셈블리 언어가 어떻게 작성되는지를 실제 코드로 익히고, 컴퓨터 내부에서 어떤 일이 일어나고 있는지 체계적으로 이해할 수 있음

요구 지식

     * C 언어에 대한 이해, 특히 포인터 개념이 필수적임
          + C를 모를 경우에는 ""The C Programming Language"" 책을 먼저 공부할 필요가 있음
     * 고등학교 수준의 수학(스칼라와 벡터, 덧셈, 곱셈 등) 지식이 선행됨

레슨 구성 및 활용 방법

     * 본 GitHub 리포지토리에는 단계별 레슨과 각 레슨에 대응하는 과제가 포함되어 있음 (과제는 아직 업로드되지 않음)
     * 모든 과정을 이수하면 FFmpeg 프로젝트에 직접 기여할 수 있는 실전 역량을 갖추게 됨

커뮤니티 지원

     * Discord 서버(https://discord.com/invite/Ks5MhUhqfB)를 통해 질의응답 및 토론 참여가 가능함

다국어 번역

     * 프랑스어, 스페인어로도 레슨이 제공되고 있어 다양한 언어권 개발자들의 접근성이 높음

        Hacker News 의견

     * FFMPEG의 규모를 상상하는 것만으로도 대단함을 느끼는 중임, 아주 작은 성능 향상이라도 수천, 수만 시간의 연산을 절약하는 효과가 있음, 정말 쓸모있는 프로젝트임
          + FFMPEG 팀의 성능에 대한 집념이 멋지다고 생각함, 모든 프로젝트가 저런 태도로 임한다면 얼마나 좋을까 상상함
          + 다만, 전통적인 의미의 확실한 API(명령형이 아니라 진짜 라이브러리 형태)가 있었으면 좋겠음, 지금처럼 자체 언어 같은 명령어 라인 파악하는 게 쉽지 않음
     * 이전 논의가 2025-02-22에 있었음, 222개의 댓글이 있음 이곳에서 확인 가능
     * 컴파일러가 생성한 비최적화 어셈블리 때문에 발생하는 핫스팟을 실제로 어떻게 찾아내는지 궁금함, 아키텍처별 어셈블리 대신 LLVM IR 같은 중간 표현을 직접 작성하는 게 의미가 있는지도 궁금함
          + 많은 사람들이 생각하는 문제들이 실제 이슈와 다름, 실제로는 “비최적화된 어셈블리”가 아니라 C 컴파일러로 기대할 수 있는 수준임, 주요 요인은 다음과 같음: 루프의 일반적인 C 구현과 하드웨어별로 추가되는 asm/SIMD 버전이 있음, 하지만 플랫폼마다 SIMD 특성이 달라서 일반화가 어려움, 컴파일러 버전 차이로 인해 모든 사용자가 최상의 구현을 활용하지 못할 수 있음, C의 메모리 모델과 char * 사용이 최적화를 방해함, 인트린식과 오토 벡터라이제이션 기능이 서로 충돌하기도 함, 인텔 C에서 인트린식은 Microsoft가 만든 복잡한 함수명 때문에 오히려 어셈블리가 더 읽기 쉬운 경우도 있음
          + 보통은 vtune이나 uprof 같은 툴로 ISA 레벨의 벤치마크 핫스팟을 분석함, ARM용 툴은 잘 모르겠음, LLVM IR 같은 중간 표현을 사람이 직접 작성하는 건 실제로 큰 의미가 없음, 대부분의 경우 아키텍처 특유의 문제에 대해서만 어셈블리를 직접 작성하게 됨, C/C++ 컴파일러가 일반적으로 최적화된 코드를 잘 생성하지만 벡터라이즈된 코드는 알고리즘 자체를 바꿔야 하고, 인트린식 사용이 불가피해지며 이 경우 코드가 이식성이 떨어지고 어셈블리처럼 보임, 게다가 컴파일러가 생성하는 코드 오버헤드가 있음, 그래서 그냥 어셈블리로 직접 작성하고 레지스터 할당이나 명령어 순서 등은 사람이 신경쓰는 게 나아짐, 결과적으로 핸드코딩 어셈블리가 컴파일러가 생성한 것보다 좋은지는 측정해봐야만 알 수 있음, 벤치마크가 꼭 필요함
          + LLVM IR을 직접 쓰는 건 별로 의미 없음, 벡터 코드를 위한 목적이라면 먼저 벡터화 지시문(pragmas)을 시도하고, 실패하면 인트린식이나 ISPC 같은 언어를 쓰는 게 효율적임, IR을 써서 얻는 이득이 없음, 컴파일러의 레지스터 할당이나 명령 선택 문제를 직접 해결하고 싶어도 IR로 작성하면 결국 컴파일러가 본래 코드로 다시 만들어버림, 결과적으로 IR은 불안정하고 사용이 더 어려운 계층만 추가할 뿐임, 가장 좋은 핸드코딩 어셈블리를 만들려면 그냥 어셈블리로 바로 작성하는 게 맞음
     * 아쉽게도 예제를 실제 NASM 같은 어셈블러로 실습하는 간단한 소개부터 시작하지 않는 점이 아쉬움
     * 프로젝트의 수많은 경험에서 우러나온 통찰이나 노하우를 기대했는데, 실제로 ffmpeg와 바로 연결되는 느낌은 잘 못 받겠음, 몇몇 챕터만 봤을 땐 그냥 일반적인 어셈블리 입문 수준의 내용처럼 느껴짐
     * FFmpeg Assembly Lessons에서 필요한 수학 강의 자료도 GitHub 저장소에 포함시키면 어떨까 생각함, 모든 자료가 한 자리에 모이면 시작하기 더 쉬울 것 같음
          + 작성자가 아니지만, 독자가 C 프로그래밍만 기본적으로 알고 있고 실제 비디오 코덱에 기여하고 싶다면, Cooley-Tukey 알고리즘 같은 내용에 도달하기까지 다뤄야 할 배경 지식이 상당히 많음, 그것도 기본적인 것에 불과함
     * 이 어셈블리 코드들이 다양한 CPU에서 어떻게 이식성을 확보하는지 궁금함
          + 내 생각엔 일반적인 C로 돌아가는 처리가 베이스라인 역할도 하며, 주요 아키텍처 별로는 직접 작성된 어셈블리 버전이 있음
          + 실제로는 x86-64만 대상임
     * 매우 흥미롭게 읽었음, 도메인 특화 튜토리얼이 훨씬 낫다고 느낌
     * nasm의 매크로 프리프로세서를 매우 남용한 부분이 있음, 다른 어셈블러로 옮기기가 상당히 어려워질 듯함
          + 굳이 왜 다른 어셈블러로 옮겨야 하는지 의문임
          + 어느 부분에서 그랬는지 궁금함, 수업 코드에선 실제로 코드가 거의 없음
"
"https://news.hada.io/topic?id=22546","Git에서 대용량 파일의 미래는 Git 자체임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Git에서 대용량 파일의 미래는 Git 자체임

     * Git 프로젝트가 최근 공식적으로 대용량 파일 관리 문제를 직접 해결하기 시작함
     * Git LFS는 사용자에게 여러 가지 비용, 벤더 종속성 등을 유발하는 임시방편임
     * 최근 partial clone 기능으로 Git 자체만으로 대부분의 LFS 역할을 대체할 수 있게 됨
     * 앞으로는 large object promisor라는 새로운 솔루션도 공식 Git에 통합 준비 중임
     * 이러한 변화로 대용량 파일 관리의 궁극적인 해법이 외부 확장이 아닌 Git 자체로 귀결될 전망임


Git의 대용량 파일 문제와 변화

     * 만약 Git의 가장 큰 적(Nemesis)은 바로 대용량 파일
     * 대용량 파일은 Git 저장소를 비대화시키고, git clone 속도를 저하시키며, 대다수 호스팅 환경에도 악영향을 줌

  Git LFS의 등장과 한계

     * 2015년 GitHub는 Git LFS를 출시해 대용량 파일 문제를 우회했음
     * 하지만 Git LFS 자체가 새로운 복잡성과 저장 비용을 추가함

     * Git 커뮤니티는 조용히 대용량 파일 근본 문제를 고민해 왔고, 최근 Git의 공식 릴리즈에서 LFS 없이 대용량 파일을 관리할 새로운 방향성이 제시됨

오늘 당장 가능한 방법: Git LFS를 partial clone으로 대체

     * partial clone의 원리
          + Git LFS: 대용량 파일은 저장소 밖에 두고, 필요한 파일만 다운로드해 작업하는 구조임
          + Git partial clone(2017년 도입):
               o --filter 옵션으로 원하는 크기 이상의 blob을 제외하고 복제
               o 필요할 때만 해당 대용량 파일만 서버에서 내려받음

     Partial clone을 사용하면 Clone 및 Fetch 중에 [대용량 바이너리 자산]을 미리 다운로드하지 않아도 되므로 다운로드 시간과 디스크 사용량을 줄일 수 있음
               o Partial Clone Design Notes, git-scm.com

     * partial clone과 LFS의 공통점
          + 1. 체크아웃 용량 최소화: 최신 버전만 받고 전체 파일 히스토리는 생략함
          + 2. 빠른 복제: 대용량 파일 전송이 없으니 clone 속도가 빠름
          + 3. 빠른 세팅: shallow clone과 달리 프로젝트 전체 히스토리 접근 가능함
     * partial clone 활용 예시
          + 대용량 PNG 파일의 히스토리가 많은 repo 복제 속도 및 디스크 차지 실례:
               o 일반 clone시 거의 4분, 1.3GB 공간 차지
               o partial clone 및 100KB blob 제한 적용시 6초 만에 복제, 49MB 차지
               o 원본 대비 복제 속도 97% 개선, 체크아웃 크기 96% 축소
     * partial clone의 한계
          + 필터링한 데이터가 필요할 경우(예: git diff, git blame, git checkout), Git이 서버에 파일 요청함
          + 이는 Git LFS와 동일한 특징임
          + 실무에서는 바이너리 파일에 blame 할 일은 드묾

Git LFS의 문제점

     * 높은 벤더 종속성: GitHub 구현체는 자체 서버만 지원, 요금 부과 및 종속성 초래
     * 비용 문제: 50GB 저장시 GitHub LFS는 연 $40, Amazon S3는 $13
     * 되돌리기 힘듦: 한번 LFS로 전환시, 히스토리 재작성 없이 원상복구 불가
     * 지속적 세팅 비용: 모든 협업자가 LFS 설치 필수, 설치 안 하면 파일 대신 메타데이터 파일(혼란 유발)

앞으로의 전망: Large Object Promisor

     * 대용량 파일은 호스팅 플랫폼(GitHub, GitLab)에서도 비용적 문제를 일으킴
     * Git LFS는 대용량 파일을 CDN으로 오프로딩하면서 서버 비용을 줄임
     * Large Object Promisor란?
          + 올해 초, Git은 large object promisor라는 기능을 공식적으로 머지함
          + 이 기능은 LFS와 유사하게 서버 쪽의 저장소 부하를 줄이지만, 사용자 복잡성은 크게 줄임

     이 노력은 서버 측의 작업, 특히 이미 이진 형식으로 압축된 대용량 블롭의 작업을 개선하는 데 목적이 있음
     Git LFS의 대안이 되는 솔루션임
     – Large Object Promisors, git-scm.com
     * 동작 원리
          + 1. 사용자가 대용량 파일을 Git 호스트에 push
          + 2. 호스트가 백엔드 promisor에 대용량 파일 오프로딩 처리
          + 3. clone시 Git 호스트가 클라이언트에 promisor 정보 제공
          + 4. 클라이언트는 필요시 해당 promisor에서 자동으로 대용량 파일 받음
     * 현재 도입 현황과 과제
          + 대용량 promisor는 아직 개발 중이며, 2025년 3월 일부 코드가 Git에 머지됨
          + GitLab 등에서 추가 구현 및 미해결 이슈 논의 진행 중
          + 대중적 도입까지는 아직 시간이 필요함
          + 당분간은 대용량 파일 저장에 Git LFS 의존 불가피
          + promisor가 보급되면 GitHub에도 100MB 넘는 파일 업로드가 가능해질 전망

결론: Git의 대용량 파일 미래는 Git

     * Git 프로젝트는 여러분을 대신해 대용량 파일 문제를 끊임없이 고민 중임
     * 현재는 여전히 Git LFS 사용이 필요함
     * 그러나 partial clone과 large object promisors가 발전하면서 Git LFS는 점차 불필요해지고, 머지않아 대용량 파일을 Git만으로 손쉽게 관리할 수 있는 시대가 도래할 것임
     * 미래에는 Git에 MP3 라이브러리를 넣겠다는 생각만이 대용량 활용을 가로막는 마지막 장애가 될 것

        Hacker News 의견

     * 예전의 svn만 해도, 대용량 바이너리 파일이 많은 150GB 작업 디렉토리에서도 별문제 없이 잘 작동했음, 반면에 git은 그렇지 않음. 왜 svn이 대용량 바이너리 파일에서 git과 다른 접근을 하는지, git이 똑같이 할 수는 없는 건지 궁금함. 게다가 바이너리 데이터를 다룰 때 꼭 필요한 기능이 파일 잠금인데, 특정 파일을 한 명만 작업하고 나머지는 읽기 전용이어야 혼란스러운 머지 문제를 피할 수 있음. 대용량 파일을 외부로 오프로드한다고 해서 실제 성능이나 안정성 문제가 개선되는 건지 잘 이해가 안 됨. 결국 저장소가 다를 뿐이지, 저장소는 저장소임. 오프로드는 사실상 퍼블릭 git 포지가 대용량 파일 저장비용을 회피하려는 방법 같음
          + git과 svn은 완전히 다른 설계임. git은 완전히 분산형이기에 모든 저장소가 모든 파일의 전체 히스토리를 가져야 하고, 잠금 개념은 무의미함. 프로젝트에 맞는 버전관리시스템을 선택하면 됨, git이 만능이어야 한다는 건 아님
     * Large object promisors 개념이 마음에 듦. S3 같은 곳을 쉽게 연결해서 쓸 수 있다면 기존 LFS에서 바로 넘어갈 것 같음. S3는 대용량 바이너리 파일을 버전관리할 때 시너지가 큼. 인텔리전트 티어링으로 데이터가 오래될수록 자동으로 저렴한 스토리지 티어로 옮겨가는 장점도 있음. 10년된 데이터를 복원하느라 반나절 걸려도 상관없음
          + 나도 같은 생각임. 왜 처음부터 기본으로 이 방식이 안 됐는지 이해가 안 됨. 작은 git LFS 서버를 직접 돌리고 있는데, git이 S3를 네이티브로 지원만 해주면 바로 바꿀 준비가 되어 있음
          + 지금 직장에서 LFS 오브젝트를 비용절감을 위해 버킷에 캐싱하고 있음. PR 실행 때마다 git lfs ls-files로 파일 목록 받고, gcp에서 가져오고, git lfs checkout으로 로컬에 오브젝트 저장 후, pull로 빠뜨린 것만 추가로 받음. 캐싱 안 된 파일은 gcloud storage rsync로 다시 버킷에 올림. 개발자 입장에서 추가 설정 필요 없이 새 객체만 pull하면 되고, Github UI도 저장소 상태에 혼동이 없음. 예전엔 LFS 백엔드 직접 올릴까 했는데, 이 방법이 당장의 가장 큰 문제를 해결해줌. Github이 LFS 파일 CI에서 받을 때마다 트래픽 요금이 과다했고, 캐시 10GB 제한과 브랜치 간 공유 불가 탓에 매번 다시 받아야 했음. 캐시 용량을 돈 주고라도 늘리고 싶었지만 그 방법도 없었음. 이걸 개발자에게 적용하려면 git hook만 추가해주면 될 정도로 간단함
          + S3가 Amazon 관련 서비스인지 궁금함
     * Git LFS가 좋지 않은 점을 여러 가지 언급하면서, 벤더 락인이 있다는 건 동의하지 않음. GitHub가 오픈 클라이언트와 서버를 제공하므로 해당 주장은 부당함. 다만, LFS는 오프라인/스니커넷 작업에서는 작동하지 않고, 이는 흔한 경우는 아니지만 언급할 가치가 있음. large object promisor가 LFS의 클라이언트 측 복잡성을 서버로 옮긴 듯보이는데, 결국 복잡도만 변하는 것 같음. git 서버가 LFS 서버와 오브젝트 저장소로 파일을 업로드하는 구조라면, 다른 트레이드오프가 따름. 퍼블릭 git 서버에서 promisor 리모트를 숨겨두고 업로드할 때 어떤 일이 생길지 궁금함
          + LFS가 진짜로 별로라고 생각함. 서버 구현도 엉망이고, 객체 내용과 저장 방법이 혼재됨. opt-in 방법도 형편없어서 아무 생각 없이 쓰면 실제로 원하는 파일 대신 작은 텍스트 파일만 생김. 새로운 솔루션이 더 나은지는 모르겠지만 LFS가 좋지 않다는 점은 분명함
          + 최근 알게 된 또 다른 Git LFS의 문제는, 마이그레이션이 상위 커밋들의 .gitattributes까지 오염시킨다는 것임. 즉, 커밋 A→B→C 순서에서 C에서만 대용량 파일을 LFS로 추가했다면 A, B도 존재하지 않는 LFS 파일을 가리키는 .gitattributes가 생김. 마이그레이션 과정에서 .gitattributes가 히스토리를 따라 거꾸로 전파되는데, 현재 커밋의 실체 존재 여부는 참조하지 않기 때문임
          + 예전에는 Git LFS가 SSH를 지원하지 않아, SSL 인증서를 반드시 받아야 했고, 이 때문에 집에서 셀프호스팅하는 사용자에겐 진입 장벽이었음. Gitlab은 최근에 SSH 지원 패치를 한 듯함
     * 소프트웨어 공학 수업에서 대용량 파일(미디어 등)을 Git에 넣지 않고 아티팩트 저장소(Artifactory 등)에 넣으라고 권장했었음. 그러면 스냅샷 의존성 형태로 배포할 수 있고, 빌드 시스템이 알아서 최신 버전만 가져오게 제어할 수 있음. 동료들이 로컬에 쌓인 오래된 파일도 빌드 시스템 캐시만 비우면 바로 정리됨
          + 이 방식은 일종의 git 서브모듈 같은 느낌이긴 함. 만약 서브모듈로 문제가 해결됐으면 사람들이 이미 썼을 것. git 서브모듈도 얕은 클론을 지원함(관련 링크: https://stackoverflow.com/questions/2144406/…). 나는 대용량 파일 이슈는 겪어본 적 없어서, 만약 이 방법이 안 되는 이유가 무엇인지 궁금함. SO에서 나온 단점들이 그리 커 보이진 않음
          + 수업에서 CI/CD 시스템 아키텍처도 가르치는지 궁금함. 요즘 신입 엔지니어들이 GitLab, Artifactory, CodeSonar, Anchore 등과 연동하는 전체 구조에 익숙하지 않음
          + 이 방법도 단점이 있음. CI/CD 시스템이나 개발자에게 추가 인증 정보가 필요함. 커밋도 여러 단계로 늘어나며, 아티팩트 아이디를 먼저 알아야 하고, 이를 자동화하려고 git hook을 쓰다 보면 결국 git-lfs처럼 복잡해짐
     * 이 글이 LFS를 부당하게 평가하고 있음. LFS는 GitHub에 종속적이지 않고 프로토콜도 오픈임. LFS의 단점은 git 확장으로서 어쩔 수 없는 부분이고, promisors도 사실상 LFS와 같은 개념임. 단, git 내부에 내장하면서 UX가 좀 더 좋아진 것임
          + 한 번이라도 LFS를 쓴 저장소는 영구적으로 락인됨. 사용한 공간을 줄이려면 저장소 자체를 삭제해야 하고, 이는 공식적으로 명확히 알려주지도 않음. 우리 회사 Github 통계를 연구할 때 대용량 압축 DB 파일을 LFS에 넣었다가 이 문제를 직접 경험함
     * 이게 진짜 솔루션은 아님. git LFS도 임시방편일 뿐이고, 클론할 때 필터 인자를 넣는다고 해도 근본 해결이 아님. git clone은 모든 사용자가 가장 먼저 배우는 명령어인데, 이때마다 필터를 기억해야 하고, 실수하면 시간만 오래 걸리고, 성공해도 클론한 저장소가 제대로 동작하지 않을 수도 있음. 결국 rsync처럼 최신 파일부터 효율적으로 가져오는 구조로 전환해야 근본적으로 해결됨. git은 이런 근본적 변경을 잘 하지 않음
          + 크게 공감함. git은 늘 플래그 하나 추가하는 방식으로 문제를 ""해결""하는데 대부분의 사용자는 이 기능을 잘 모름. 기본값 자체를 개선하면 호환성 깨지지 않고도 문제를 풀 수 있음
          +

     클론한 저장소가 제대로 동작하지 않을 수도 있음
     실은 블롭의 히스토리만 빠지는 거임
          +

     rsync가 해결한 문제라는데, 구체적으로 어떤 모습이냐고 물음. 알고리즘 말고 실제 사용자가 ""git clone"" 할 때 로컬 파일시스템에 무엇이 생기는 건지 궁금함
          + 저장소 부피의 대부분이 과거 리비전에 있다면, rsync처럼 최신 버전만 우선 받아오는 방식이 대부분의 사용자에게 가장 적합한 해결책임
     * Git 코어에 대용량 파일 지원이 추가되는 것이 매우 기쁨. 외부 솔루션이어도 결국 opt-in 구조는 비슷함. 최대한 명령어를 줄이고 seamless하게 만들고 싶었기에 '.gitattributes' 파일의 smudge/clean 필터에만 한정해서 API를 설계했음. 또, Atlassian과 Microsoft와 직접 협업해 벤더 락인을 없애려고 했고, 파일락킹 API도 Atlassian에서 많은 도움을 받음. LFS는 세 가지 호스트에서 호환 지원된 오픈소스로 제공됨
     * 우리는 git이나 git-lfs에서 겪은 문제를 해결하려고 oxen을 개발하고 있음. git 인터페이스를 그대로 따라가면서 대용량 파일과 수백만 개 파일이 있는 모노레포 환경에서 훨씬 더 빠르게 동작함. 오픈소스 CLI와 서버를 제공하니, 관심 있으면 피드백 부탁함
       https://github.com/Oxen-AI/Oxen
     * git의 저장 방식 자체도 restic이나 borg 등 최신 백업 툴처럼 파일과 디렉토리의 콘텐츠 기반 청킹(content-defined chunking)으로 오버홀할 필요가 있음
     * GitLFS의 단점 중에 인증 이슈가 빠졌는데, SSH-agent를 쓰지 않으면 한 번 push할 때도 인증을 여러 번 거쳐야 함. 직접 경험에 따르면 두세 번 이상 해야 했던 적도 있음
"
"https://news.hada.io/topic?id=22579","개발자들이 조심해야 할 함정들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            개발자들이 조심해야 할 함정들

     * 개발자들이 흔히 빠지는 직관적이지 않은 함정을 정리하여, 발생하기 쉬운 버그의 원인을 소개함
     * HTML, CSS, Unicode/텍스트 인코딩, 부동소수점, 시간 등 다양한 기술에서 자주 발생하는 문제점들을 다룸
     * 각각의 언어와 프레임워크에서 문법 및 동작의 미묘한 차이로 인해 오해나 오류가 생길 수 있음을 강조
     * 동시성, 네트워킹, 데이터베이스 등 백엔드 핵심 영역에서 실제 운영 환경에서 발생할 수 있는 함정들을 예시로 설명함
     * 다양한 예제와 참고 링크를 통해 문제 상황과 해결법, 그리고 예기치 않은 동작 개선점을 안내함
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

HTML과 CSS

     * Flexbox/Grid에서 min-width 기본값
          + min-width는 기본적으로 auto
          + min-width: auto는 콘텐츠 크기에 의해 결정되며, flex-shrink, overflow: hidden, width: 0, max-width: 100%보다 우선 적용
          + 권장: min-width: 0 명시
     * CSS에서 가로와 세로의 차이
          + width: auto는 부모 공간 채우기를 시도, height: auto는 콘텐츠에 맞춤
          + inline, inline-block, float 요소의 width: auto는 확장하지 않음
          + margin: 0 auto는 가로 중앙 정렬, margin: auto 0은 세로 중앙 정렬 불가 (단, flex-direction: column에서는 세로 중앙 가능)
          + 마진 병합은 세로에서만 발생
          + writing-mode: vertical-rl 등 레이아웃 방향이 바뀌면 동작도 반전
     * Block Formatting Context (BFC)
          + display: flow-root로 BFC 생성 (그 외 overflow: hidden/auto/scroll, display: table 등도 가능하나 부작용 존재)
          + 세로 인접 형제 마진이 겹치거나, 자식 마진이 부모 밖으로 새는 현상은 BFC로 방지 가능
          + 부모가 float 자식만 포함하면 높이가 0으로 무너짐 → BFC로 수정 가능
          + border나 padding이 있으면 마진 병합 발생하지 않음
     * Stacking Context
          + 새로운 stacking context를 만드는 조건
               o transform, filter, perspective, mask, opacity 등 렌더링 속성
               o position: fixed 또는 sticky
               o z-index 지정 + absolute/relative 위치 지정
               o z-index 지정 + flexbox/grid 내부 요소
               o isolation: isolate
          + 특징
               o z-index는 stacking context 내부에서만 적용
               o position: absolute/fixed 좌표는 가장 가까운 positioned 조상 기준
               o sticky는 stacking context를 넘어서 동작하지 않음
               o overflow: visible도 stacking context에 의해 잘림
               o background-attachment: fixed는 stacking context 기준으로 배치
     * 뷰포트 단위
          + 모바일 브라우저에서 주소창/네비게이션바 스크롤 시 화면에서 사라지면 100vh 값이 달라짐
          + 최신 해결책: 100dvh 사용
     * Absolute Position 기준
          + position: absolute는 부모가 아닌, 가장 가까운 relative/absolute 또는 stacking context 조상을 기준
     * Blur 동작
          + backdrop-filter: blur는 주변 요소를 고려하지 않음
     * Float 무효화
          + 부모가 flex 또는 grid면 자식의 float는 효과 없음
     * 퍼센트 단위 width/height
          + 부모의 크기가 사전에 결정되지 않으면 작동하지 않음 (순환 참조 회피 목적)
     * Inline 요소 특성
          + display: inline은 width, height, margin-top, margin-bottom 무시
     * Whitespace 처리
          + 기본적으로 HTML의 줄바꿈은 공백으로 취급, 연속 공백은 하나로 축소
          + <pre>는 공백 축소 방지하지만 시작/끝 부분 동작 특이
          + 대부분 콘텐츠 시작/끝 공백은 무시되나 <a>는 예외
          + inline-block 사이의 공백/줄바꿈은 실제 간격으로 표시됨 (flex/grid에서는 발생 안 함)
     * text-align
          + 텍스트 및 inline 요소 정렬에는 적용되지만 block 요소 정렬에는 적용되지 않음
     * box-sizing
          + 기본값은 content-box → padding/border 포함 안 됨
          + width: 100% + padding 설정 시 부모 영역 넘침 가능
          + 해결: box-sizing: border-box
     * Cumulative Layout Shift
          + <img>에 width와 height 속성을 지정하지 않으면 이미지 로딩 지연으로 레이아웃 흔들림 발생
          + 권장: 속성 지정으로 CLS 방지
     * Chrome에서 파일 다운로드 네트워크 요청
          + DevTools 네트워크 패널에 표시되지 않음 (다른 탭으로 처리됨)
          + 분석 필요 시 chrome://net-export/ 사용
     * HTML 내 JavaScript 파싱 문제
          + <script>console.log('</script>')</script> 같은 경우 첫 </script>를 종료 태그로 인식
          + 참고: Safe JSON in script tags

Unicode와 텍스트 인코딩

     * 코드 포인트와 그래프림 클러스터
          + 그래프림 클러스터는 GUI에서의 ""문자 단위""
          + 가시적 ASCII 문자는 코드 포인트 1개 = 그래프림 클러스터 1개
          + 이모지는 여러 코드 포인트로 구성된 하나의 그래프림 클러스터일 수 있음
          + UTF-8에서 코드 포인트는 1~4바이트, 바이트 수와 코드 포인트 수는 일치하지 않음
          + UTF-16에서 코드 포인트는 2바이트 또는 4바이트(서로게이트 페어)
          + 표준은 클러스터 내 코드 포인트 수 제한을 두지 않으나, 구현에서는 성능상 제한 존재
     * 언어별 문자열 동작 차이
          + Rust: 내부 문자열 UTF-8 사용, len()은 바이트 수, 직접 인덱싱 불가, chars().count()는 코드 포인트 수, UTF-8 유효성 엄격 검증
          + Golang: 문자열은 사실상 바이트 배열, 길이와 인덱싱은 바이트 단위, 주로 UTF-8 사용
          + Java, C#, JS: UTF-16 기반, 2바이트 단위로 길이 측정, 인덱싱도 2바이트 단위, 서로게이트 페어 존재
          + Python: len()은 코드 포인트 수 반환, 인덱싱은 코드 포인트 하나를 포함하는 문자열 반환
          + C++: std::string은 인코딩 제약 없음, 바이트 벡터처럼 동작, 길이/인덱싱은 바이트 단위
          + 언급된 언어 중 그래프림 클러스터 단위로 길이/인덱싱하는 언어는 없음
     * BOM (Byte Order Mark)
          + 일부 텍스트 파일은 BOM을 가짐, 예: EF BB BF → UTF-8 인코딩 표시
          + 주로 Windows에서 사용, 비-Windows 소프트웨어는 BOM 처리 못할 수 있음
     * 기타 주의사항
          + 바이너리 데이터를 문자열로 변환 시, 잘못된 부분은 � (U+FFFD)로 대체됨
          + Confusable characters 존재 (서로 비슷해 보이는 문자)
          + 정규화(Normalization): 예) é는 U+00E9(단일 코드 포인트) 또는 U+0065+U+0301(두 코드 포인트)로 표현 가능
          + Zero-width characters 및 Invisible characters 존재
          + 줄바꿈 차이: Windows는 CRLF \r\n, Linux/MacOS는 LF \n
          + 한자 통합(Han unification): 언어별로 모양이 조금 다른 문자가 동일 코드 포인트 사용
               o 폰트가 언어별 변형을 포함하여 적절히 렌더링
               o 국제화 시 올바른 폰트 변형 선택 필요

부동소수점 (Floating point)

     * NaN 특성
          + NaN은 자기 자신을 포함한 어떤 값과도 같지 않음 (NaN == NaN은 항상 false)
          + NaN != NaN은 항상 true
          + NaN을 포함한 연산 결과는 대부분 NaN으로 전파됨
     * 특수한 값
          + +Inf와 -Inf 존재, NaN과는 다름
          + -0.0은 +0.0과 구분되는 값
               o 비교 연산에서는 동일하지만, 일부 계산에서는 다르게 동작
               o 예: 1.0 / +0.0 == +Inf, 1.0 / -0.0 == -Inf
     * JSON과의 호환성
          + JSON 표준은 NaN과 Inf를 허용하지 않음
               o JS JSON.stringify는 NaN, Inf를 null로 변환
               o Python json.dumps(...)는 NaN, Infinity를 그대로 출력 (표준 위반)
                    # allow_nan=False 옵션 시 NaN/Inf가 있으면 ValueError 발생
               o Golang json.Marshal은 NaN/Inf 존재 시 에러 반환
     * 정밀도 문제
          + 부동소수점 직접 비교는 실패 가능 → abs(a - b) < ε 형태 권장
          + JS는 모든 숫자를 부동소수점으로 처리
               o 안전한 정수 범위는 -(2^53 - 1) ~ 2^53 - 1
               o 이 범위를 벗어나면 정수 표현이 부정확
               o 큰 정수에는 BigInt 사용 권장
               o JSON에 안전 범위를 넘어선 정수가 포함되면 JSON.parse 결과 값은 부정확할 수 있음
               o 밀리초 단위 타임스탬프는 287,396년까지 안전, 나노초 단위는 문제 발생
     * 연산 법칙 비적용
          + 연산 순서에 따라 정밀도 손실로 인해 결합법칙, 분배법칙이 엄밀히 성립하지 않음
          + 병렬 연산(행렬 곱셈, 합계 등)은 비결정적 결과를 만들 수 있음
     * 성능
          + 나눗셈은 곱셈보다 훨씬 느림
          + 동일한 수로 여러 번 나눌 때는 역수를 먼저 구해 곱하는 방식으로 최적화 가능
     * 하드웨어에 따른 차이
          + FMA(Fused Multiply-Add) 지원 여부: 일부 하드웨어는 더 높은 정밀도로 중간 계산
          + Subnormal range 처리: 최신 하드웨어는 지원하지만 일부 구형은 0으로 처리
          + 반올림 모드 차이
               o RNTE(가장 가까운 짝수로 반올림), RTZ(0으로 절단) 등 존재
               o x86/ARM은 스레드 로컬 mutable 상태로 설정 가능
               o GPU는 명령어 단위로 반올림 모드가 다름
          + 삼각함수, 로그 등 수학 함수 동작 차이
          + x86은 레거시 80비트 FPU와 per-core rounding mode 존재 → 사용 비권장
          + 이 외에도 다양한 요인으로 하드웨어별 부동소수점 결과가 달라질 수 있음
     * 정밀도 향상 방법
          + 계산 그래프를 얕게 구성 (곱셈 연속 구조 줄이기)
          + 중간 값이 매우 크거나 매우 작은 경우 피하기
          + FMA 같은 하드웨어 연산 활용

시간 (Time)

     * 윤초(Leap second)
          + Unix 타임스탬프는 윤초를 무시
          + 윤초 발생 시 주변 구간에서 시간이 늘어나거나 줄어듦(Leap smear)
     * 시간대(Time zone)
          + UTC 및 Unix 타임스탬프는 전 세계 공통
          + 사람이 읽는 시간은 지역별 시간대에 의존
          + DB에는 타임스탬프를 저장하고 UI에서 변환하는 방식 권장
     * 서머타임(DST)
          + 일부 지역에서는 여름철에 1시간 시계 조정
     * NTP 동기화
          + 동기화 과정에서 시간이 ""뒤로 가는"" 상황 발생 가능
     * 서버 시간대 설정
          + 서버는 UTC로 설정 권장
          + 분산 시스템에서 노드별 시간대가 다르면 문제 발생
          + 시스템 시간대 변경 후 DB 재설정 또는 재시작 필요
     * 하드웨어 시계 vs 시스템 시계
          + 하드웨어 시계는 시간대 개념 없음
          + Linux: 하드웨어 시계를 UTC로 처리
          + Windows: 하드웨어 시계를 로컬 시간으로 처리

Java

     * ==는 객체 참조 비교, 객체 내용 비교는 .equals 사용 필요
     * equals와 hashcode를 오버라이드하지 않으면 map/set에서 객체 동일성을 참조 기반으로 판단
     * map의 key 객체나 set 원소 객체의 내용을 변경하면 컨테이너 동작이 깨짐
     * List<T> 반환 메서드는 경우에 따라 mutable ArrayList 또는 immutable Collections.emptyList() 반환, 후자 수정 시 UnsupportedOperationException 발생
     * Optional<T>를 반환하는 메서드가 null을 리턴하는 경우 존재 (권장되지 않음)
     * finally 블록에서 return 시, try 또는 catch에서 발생한 예외가 무시되고 finally 반환 값이 적용됨
     * interrupt 무시하는 라이브러리 존재, IO 포함한 클래스 초기화 과정이 interrupt로 깨질 수 있음
     * thread pool에서 .submit()으로 전달한 task의 예외는 기본적으로 로그에 출력되지 않고 future로만 확인 가능, future 무시하면 예외 확인 불가
          + scheduleAtFixedRate 작업은 예외 발생 시 조용히 중단됨
     * 숫자 리터럴이 0으로 시작하면 8진수 처리 (0123 → 83)
     * 디버거는 지역 변수의 .toString()을 호출, 일부 클래스의 toString()에 부작용이 있어 디버깅 시 코드 동작이 달라질 수 있음 (IDE에서 비활성화 가능)

Golang

     * append()는 capacity 여유 시 메모리 재사용, subslice에 append 시 부모 메모리까지 덮어쓸 수 있음
     * defer는 함수 리턴 시 실행, 블록 스코프 종료 시가 아님
     * defer는 mutable 변수 캡처
     * nil 관련
          + nil slice와 empty slice는 다름
          + string은 nil 불가, 빈 문자열만 존재
          + nil map은 읽기는 가능하지만 쓰기는 불가
          + interface nil 특이 동작: data pointer가 null이지만 type info가 null이 아니면 nil과 같지 않음
     * Dead wait: Go에서 실제 동시성 버그 사례 존재
     * Timeout 종류 다양, net/http에서 상세히 다룸

C/C++

     * std::vector 원소 포인터 저장 후 vector가 grow되면 재할당 발생, 포인터 무효화
     * 리터럴 문자열로 생성된 std::string은 임시 객체일 수 있음, c_str() 호출 시 위험
     * 반복 중 컨테이너 수정 시 iterator 무효화 발생
     * std::remove는 실제 삭제가 아닌 원소 재배열, 삭제는 erase 필요
     * 숫자 리터럴이 0으로 시작하면 8진수 처리 (0123 → 83)
     * Undefined behavior (UB): 최적화 과정에서 UB는 자유롭게 바뀔 수 있어 의존 시 위험
          + 초기화되지 않은 메모리 접근 UB
          + char*를 struct 포인터로 변환 시 객체 수명 시작 전 접근으로 UB, memcpy로 초기화 권장
          + 잘못된 메모리 접근 (null 포인터 등) UB
          + 정수 overflow/underflow UB (unsigned는 0 아래로 underflow 가능)
          + Aliasing: 서로 다른 타입 포인터가 동일 메모리 참조 시 strict aliasing rule에 의해 UB 발생
               o 예외: 1) 상속관계 타입 2) char*, unsigned char*, std::byte* 변환 (역변환은 적용 안 됨)
               o 강제 변환은 memcpy 또는 std::bit_cast 권장
          + Unaligned memory 접근 UB
     * 메모리 Alignment
          + 64비트 정수는 주소가 8로 나누어 떨어져야 함
          + ARM에서 unaligned 접근은 crash 가능
          + 바이트 버퍼를 struct로 직접 해석 시 alignment 문제 발생
          + alignment는 struct padding을 만들어 메모리 낭비 가능
          + 일부 SIMD 명령어(AVX 등)는 정렬된 데이터만 처리 가능, 보통 32바이트 alignment 필요

Python

     * 함수 기본 인자는 호출 시마다 새로 생성되지 않고 최초 값이 그대로 저장됨

SQL Databases

     * Null 처리
          + x = null은 동작하지 않고 x is null을 사용해야 함
          + Null은 자기 자신과 같지 않음 (NaN과 유사)
          + Unique index는 Null 중복 허용 (단, Microsoft SQL Server는 예외)
          + select distinct에서 Null 처리 방식은 DB마다 다름
          + count(x)와 count(distinct x)는 Null 값이 있는 행을 무시
     * 일반 동작
          + 날짜 암묵 변환은 timezone 의존적일 수 있음
          + 복잡한 join + distinct는 중첩 쿼리보다 느릴 수 있음
          + MySQL(InnoDB)에서 string 필드가 utf8mb4가 아니면 4-byte UTF-8 문자 삽입 시 오류 발생
          + MySQL(InnoDB)은 기본적으로 대소문자 구분 없음
          + MySQL(InnoDB)은 암묵적 변환 허용: select '123abc' + 1; → 124
          + MySQL(InnoDB) gap lock은 deadlock 유발 가능
          + MySQL(InnoDB)에서는 group by와 select 컬럼 불일치 시 비결정적 결과 반환
          + SQLite에서는 strict가 아니면 필드 타입이 크게 의미 없음
          + Foreign key는 암묵적 lock을 발생시켜 deadlock을 유발할 수 있음
          + Locking은 DB별로 repeatable read isolation을 깨뜨릴 수 있음
          + 분산 SQL DB는 locking 미지원이거나 특이한 동작 가능 (DB별 상이)
     * 성능/운영
          + N+1 query 문제는 각 쿼리가 빠르기 때문에 slow query log에 나타나지 않음
          + 장기 실행 트랜잭션은 lock 문제 등 유발 → 트랜잭션은 빠르게 끝내는 것이 권장됨
          + 전체 테이블 lock 사례
               o MySQL 8.0+에서는 unique index/foreign key 추가 시 대부분 동시 처리 가능
               o 구버전 MySQL은 전체 테이블 lock 발생 가능
               o mysqldump에 --single-transaction 옵션 없으면 전체 테이블 read lock
               o PostgreSQL에서 create unique index나 alter table ... add foreign key는 전체 테이블 read lock 유발
                    # 회피: create unique index concurrently 사용
                    # foreign key는 ... not valid 후 validate constraint 방식 사용
     * Range 쿼리
          + 겹치지 않는 범위:
               o 단순 조건 p >= start and p <= end는 비효율적 (복합 인덱스 있어도)
               o 효율적 방식:
select *
from (select ... from ranges where start <= p order by start desc limit 1)
where end >= p

                 (start 컬럼 인덱스만 필요)
          + 겹칠 수 있는 범위:
               o 일반 B-tree 인덱스로는 비효율적
               o MySQL은 spatial index, PostgreSQL은 GiST 사용 권장

Concurrency and Parallelism

     * volatile
          + volatile은 lock을 대체할 수 없으며 atomicity 제공 안 함
          + lock으로 보호된 데이터는 volatile 필요 없음 (lock이 memory order 보장)
          + C/C++: volatile은 일부 최적화만 방지, memory barrier 추가 안 됨
          + Java: volatile 접근은 sequentially-consistent ordering 제공 (필요 시 JVM이 memory barrier 삽입)
          + C#: volatile 접근은 release-acquire ordering 제공 (필요 시 CLR이 memory barrier 삽입)
          + 메모리 읽기/쓰기 재정렬 관련 잘못된 최적화 방지 가능
     * TOCTOU (Time-of-check to time-of-use) 문제
     * SQL DB에서 응용 계층 제약 조건 처리
          + 단순 unique index로 표현 불가한 제약(예: 두 테이블 간 유니크, 조건부 유니크, 기간 내 유니크)을 애플리케이션에서 강제하는 경우:
               o MySQL(InnoDB): repeatable read 레벨에서 select ... for update 후 insert, 그리고 유니크 컬럼에 인덱스가 있으면 gap lock 덕분에 유효 (단, gap lock은 고부하 시 deadlock 유발 가능 → deadlock detection 및 retry 필요)
               o PostgreSQL: repeatable read 레벨에서 동일 로직은 동시성 상황에서 불충분 (write skew 문제)
                    # 해결책:
                         @ serializable isolation level 사용
                         @ 애플리케이션 대신 DB 제약 사용
                              - 조건부 유니크 → partial unique index
                              - 두 테이블 간 유니크 → 별도 테이블에 중복 데이터 삽입 후 unique index
                              - 기간 배타성 → range type + exclude constraint
     * Atomic reference counting
          + Arc, shared_ptr와 같이 많은 스레드가 동일 카운터를 자주 변경하면 성능 저하
     * Read-write lock
          + 일부 구현은 read lock에서 write lock으로 업그레이드 지원하지 않음
          + read lock 보유 상태에서 write lock 시도 시 deadlock 발생 가능

Common in many languages

     * Null/None/nil 체크 누락이 흔한 오류 원인
     * 반복문 중 컨테이너 수정 시 단일 스레드 데이터 경쟁 발생 가능
     * 가변 데이터 공유 실수: 예) Python에서 [[0] * 10] * 10은 올바른 2D 배열 생성 아님
     * (low + high) / 2는 overflow 가능 → 안전한 방식은 low + (high - low) / 2
     * 단락 평가(short circuit): a() || b()는 a가 true면 b 실행 안 됨, a() && b()는 a가 false면 b 실행 안 됨
     * 프로파일러 기본값은 CPU time만 포함 → DB 대기 등은 flamegraph에 나타나지 않아 오해 유발
     * 정규 표현식 dialect가 언어마다 다름 → JS에서 동작하는 정규식이 Java에서 동작 안 할 수 있음

Linux and bash

     * 디렉터리 이동 후 pwd는 원래 경로, 실제 경로는 pwd -P
     * cmd > file 2>&1 → stdout+stderr 모두 파일, cmd 2>&1 > file → stdout만 파일, stderr는 그대로
     * 파일 이름은 대소문자 구분 (Windows와 다름)
     * 실행 파일은 capability 시스템 존재 (getcap으로 확인)
     * Unset 변수 위험: DIR unset이면 rm -rf $DIR/ → rm -rf / 실행 위험 → set -u로 방지 가능
     * 환경 적용: 스크립트를 현재 shell에 적용하려면 source script.sh 사용 → 영구 적용하려면 ~/.bashrc에 추가
     * Bash는 명령어 캐싱: $PATH 내 파일 이동 시 ENOENT 발생 → hash -r로 캐시 갱신
     * 변수 미인용 사용 시 줄바꿈이 공백으로 처리
     * set -e: 스크립트 오류 시 즉시 종료하지만, 조건문 내부(||, &&, if)에서는 동작 안 함
     * K8s livenessProbe와 디버거 충돌: 브레이크포인트 디버거는 앱 전체를 멈추게 하여 health check 응답 실패 → Pod가 종료될 수 있음

React

     * 렌더링 코드에서 state 직접 수정
     * Hook을 if/loop 안에서 사용 → 규칙 위반
     * useEffect dependency array에 필요한 값 누락
     * useEffect에서 정리(clean up) 코드 누락
     * Closure trap: 오래된 state 캡처로 인해 버그 발생
     * 잘못된 위치에서 데이터 변경 → 불순한 컴포넌트
     * useCallback 사용 누락 → 불필요한 리렌더링 발생
     * 메모된 컴포넌트에 비메모 값 전달 시 memo 최적화 무효화

Git

     * Rebase는 히스토리 재작성
          + rebase 후 일반 push는 충돌 → 반드시 force push 필요
          + remote branch 히스토리 변경 시 pull도 --rebase 사용
          + --force-with-lease는 일부 경우 다른 개발자 commit 덮어쓰기 방지 가능, 단 fetch만 하고 pull 안 하면 보호 안 됨
     * Merge revert 문제
          + Merge revert는 효과 불완전 → 동일 브랜치 다시 merge 시 아무 변화 없음
          + 해결책: revert의 revert 실행 또는 깨끗한 방법(backup → reset → cherry-pick → force push)
     * GitHub 관련 주의사항
          + API 키 같은 secret을 commit 후 force push로 덮어도 GitHub에는 기록이 남음
          + private repo A를 fork한 B가 private이라도, A가 public이 되면 B의 내용도 공개됨 (삭제 후에도 접근 가능)
     * git stash pop: conflict 발생 시 stash가 drop되지 않음
     * .DS_Store는 macOS가 자동 생성 → .gitignore에 **/.DS_Store 추가 권장

Networking

     * 일부 라우터·방화벽은 유휴 TCP 연결을 조용히 끊음 → HTTP 클라이언트·DB 클라이언트의 커넥션 풀 무효화 가능 → 해결: TCP keepalive 설정
     * traceroute 결과는 신뢰성 낮음 → 경우에 따라 tcptraceroute가 더 유용
     * TCP slow start는 대기시간 증가 원인 → tcp_slow_start_after_idle 비활성화로 해결 가능
     * TCP sticky packet 문제: Nagle 알고리즘은 패킷 전송 지연 → TCP_NODELAY 활성화로 해결 가능
     * Nginx 뒤에 백엔드 배치 시 커넥션 재사용 설정 필요 → 미설정 시 고부하 환경에서 내부 포트 부족으로 연결 실패
     * Nginx는 기본적으로 패킷 버퍼링 → SSE(EventSource) 지연 발생
     * HTTP 표준은 GET·DELETE 요청 body를 금지하지 않음 → 일부는 body 사용하지만 많은 라이브러리·서버가 지원하지 않음
     * 하나의 IP에 여러 웹사이트 호스팅 가능 → 구분은 HTTP Host 헤더와 TLS의 SNI가 담당 → 단순 IP 접속 불가 사이트 존재
     * CORS: 다른 origin 요청 시 브라우저는 응답 접근 차단 → 서버에서 Access-Control-Allow-Origin 헤더 설정 필요
          + 쿠키 전달 포함 시 추가 설정 필요
          + 프론트엔드와 백엔드가 동일 도메인·포트라면 CORS 문제 없음

Other

     * YAML 주의사항
          + YAML은 공백 민감 → key:value는 오류, key: value가 올바름
          + 국가 코드 NO는 따옴표 없이 쓰면 false로 해석되는 문제 발생
          + Git commit hash를 따옴표 없이 쓰면 숫자로 변환될 수 있음
     * Excel CSV 문제
          + Excel은 CSV 열 때 자동 변환 수행
               o 날짜 변환: 1/2, 1-2 → 2-Jan
               o 대형 숫자 부정확 변환: 12345678901234567890 → 12345678901234500000
          + 원인은 Excel이 내부적으로 floating point로 숫자를 처리하기 때문
          + 이슈로 인해 유전자 이름 SEPT1이 잘못 변경된 사례 존재

        Hacker News 의견

     * 일부 라우터와 방화벽이 애플리케이션에 아무런 신호도 주지 않고 유휴 TCP 연결을 조용히 끊어버리는 경우가 있음, HTTP 클라이언트 라이브러리나 데이터베이스 클라이언트와 같이 TCP 커넥션 풀을 유지하는 코드는 이로 인해 연결이 아무 경고 없이 무효화되는 문제를 경험함, 이를 해결하려면 시스템 TCP keepalive를 설정하거나 HTTP라면 Connection: keep-alive, Keep-Alive: timeout=30, max=1000 헤더를 사용할 수 있음, TCP 커넥션이 한번 연결되면 중간 라우터에는 상태가 남지 않음, 문제는 방화벽이나 NAT 세션 타임아웃임, 이때 RST 패킷도 오지 않음, K8s 환경에서는 conntrack 모듈 설정이 너무 낮았던 문제를 겪었음, HTTP Keep-Alive를 써봐도 연결 재사용에만 효과 있고 네트워크 상의 연결을 유지하진 않음(설명 링크), HTTP Keep-Alive는 실제로 패킷을 발생하지 않고 단지 종료를 미룰
       뿐임, 반면 TCP Keep-Alive는 패킷을 주기적으로 발생시켜 타이머를 리셋해줌
          + TCP Keep-Alive는 모바일 기기와 잘 동작하지 않을 수 있음, 모바일 OS는 애플리케이션 수준에서 발생하는 keep-alive 패킷만 개별적으로 추적하거나 관리할 수 있음, 하지만 TCP Keep-Alive는 애플리케이션 레벨 아래에서 동작하므로 때에 따라 비활성화될 수 있고, 이 와중에도 앱은 여전히 접근 가능함
     * Optional<T>를 반환하는 메서드가 null을 반환할 수 있음, 이런 관행은 너무 혼란스러움, 감정적으로 여유가 있다면 @java.lang.NonNullReference 같은 애노테이션을 도입하는 JEP를 냈을 것임, 이 애노테이션으로 타입을 선언하면 컴파일러가 null 할당을 에러 처리하도록 만들고 싶음, 예를 들어 Alpha는 null 할당이 가능하지만 Beta는 에러 남, javac에서도 dead code elimination이 실제로 어떻게 되는지 명세를 들여다봐야 할 것 같음, 예를 들어 if (true)에서 b = null 하는 부분은 실제로는 elided 되고, 법적으로는 허용되는 코드일 수도 있음
          + Kotlin에서는 이미 이런 경우가 컴파일 에러됨, 굳이 애노테이션이 없어도 됨
          + null이 있는 언어에서 Optional<T>를 굳이 쓸 필요가 있는지 의문임, Python에서 함수 반환값이 Optional 객체가 아닌 그냥 T | None으로 쓰는 것처럼 체크를 해야 한다면 프레임워크의 차별성이 애매함, 특별한 모나드 스타일을 쓰지 않는다면 결국 체크는 동일함
     * Java, C#, JS가 인메모리 스트링을 UTF-16류로 인코딩한다고 했는데 Java에는 틀림, C#, JS도 마찬가지일 수 있음, 어떤 언어든 스트링 타입이 충분히 불투명하다면 인메모리 표현 방식은 구현 세부임, Java는 9버전 이후부터 그것이 명확해짐(관련 JEP 링크), FFI가 있는 경우 구현 세부 사항 변경이 어렵기도 한 이유임, 또 JS의 수에 대해 max accurate integer가 2^53−1이라고 하는데 사실 2^100 같이 더 큰 정수도 정확히 표현할 수 있음, 2^53−1이란 건 n-1, n, n+1이 모두 IEEE double에서 정확하게 표현된다는 의미임, 따라서 n == n-1, n == n+1이 다 false로 나옴
          + C#은 인메모리 표현이 매우 고정되어 있음, ReadOnlySpan<char>나 raw char*로 버퍼에 직접 접근하는 경우가 많으므로 char는 UTF-16 코드포인트 타입임, JS는 어떻게든 회피할 수 있을지도 모르겠음
          + max accurate integer라는 표현보다는 max safe integer라는 말을 쓰고 싶음
          + (베이스64 인코딩 관련) Java, C#, JS의 인메모리 문자열이 UTF-16류가 아닌 것에 대해서, 기술적으로 맞을지 몰라도 만약 UTF-8 기반 언어에서 문자열을 베이스64 인코딩 후 Java에서 디코딩하면 Java의 UTF-16 표현 때문에 문제가 발생하는 사례가 있음
     * 매뉴얼 형식의 팁이나 정보는 이미 알고 있거나 거의 알던 것만 더 이해가 빠르게 되는 것 같음, 대부분의 매뉴얼이 배움 자체보다는 정리와 복습에 효과적인데, 완전 모르는 사람들에게 가르치기엔 비효율적임
          + 매뉴얼이란 본질적으로 기억에만 의존하지 않고 기록을 남기기 위해 존재하는 것임, 대부분의 유닉스 매뉴얼이 이런 형태임, 어떤 소프트웨어가 무엇을 하는지 이미 알지만 구체적인 사용법이 가물할 때 매뉴얼을 찾게 됨, 반면 완전 초보자가 개념을 익히려면 튜토리얼이나 가이드가 필요함, 매뉴얼은 질문을 더 잘하기 위한 준비물 같은 역할임
     * “Traceroute Isn’t Real” (트레이스루트는 사실이 아니다)라는 글을 정말 흥미롭게 읽었음, 그동안 트레이스루트 데이터가 매우 부정확하거나 의미 없어 보인다는 걸 체감해왔는데 그 이유를 알게 되어 도움이 됨(원문 링크), 혹시 최신 정보가 있으면 알려주면 좋겠음
     * 이 글은 실제 함정이나 트랩이라기보다는 글쓴이가 경험적으로 배운 작은 팁들을 모아놓은 목록임, 많은 내용이 특정 좁은 맥락에만 적용될 때가 있는데 맥락이 명확하지 않고, 일부는 틀린 정보처럼 보이기도 함, 그래서 글 전체를 너무 곧이곧대로 받아들일 필요 없이 일종의 생각의 흐름이나 메모 정도로 보면 좋겠음
     * Python에서 기본 인자값이 매 호출 시마다 새로 생성되는 값이 아니고 저장된 값이라는 얘기, datetime 변수 쓸 때 꼭 알아둬야 할 포인트임
          + 파이썬을 늘 쓰던 개발자는 아니었는데 이번 주에 기본 인자값이 저장된다는 이유로 고생을 참 많이 했음, set을 인자로 안 주면 빈 set을 할당하려 했는데 set이 재사용되어 버그가 났음, 이유를 파악하기까지 한참 걸림
     * 페이지 첫 번째 “트랩”에서 min-width: auto가 콘텐츠에 따라 최소 너비가 결정된다고 했는데 flex/grid 아닌 경우엔 사실이 아님, MDN에 따르면 block, inline, table 등에서는 auto가 0으로 보정됨(공식 문서 링크)
          + 진짜 첫 번째 트랩은 “어떤 CSS 속성이든 격리해서 읽지 못한다”임, 속성명 그대로 cascading(계단식 상속)이라는 이름처럼 기본값과 여러 규칙의 결과가 어디에선가 합쳐지니까 문서 전체 맥락이 중요함
          + CSS 텍스트 속성 쪽 cascade(상속)는 그나마 이해가 됨, 하지만 CSS 레이아웃은 페이지 디자이너, 구현자, 사용자, 어떤 관점에서도 이해가 너무 어려움, 도대체 누구를 위한 디자인인지 공감이 안 됨
     * 전반적으로 괜찮은 리스트글임, 몇 가지 의견 있음.
          + 유니코드 통합 관련해서, 여러 언어에서 같은 의미의 글자가 같은 코드포인트를 쓰고, 글꼴에 따라 다르게 표시된다는 건 트랩이 아님, 주어진 예시 같은 한자는 중일 양쪽에서 거의 동일하게 쓰이고, 두 언어 사용자 모두 다른 변형도 같은 개념의 글자로 인식함, 글쓴이는 ‘A’ 철자를 영어와 프랑스어에서 각각 다르게 정의해야 하는 것처럼 말하고 있음, 실제로는 그렇지 않음, Han unification 항목 참고
          + -0.0과 +0.0(음수 0, 양수 0)은 플로팅 포인트 비교에서 같게 취급되지만 구분하는 방법이 있음, 각각 비트 패턴이나 1.0/-0.0 = -무한대, 1.0/0.0 = +무한대인 결과로 확인 가능함
          + 서버 타임존 추천을 UTC로 맞추라는 조언 매우 공감됨, 서버, 로그, 사진 저장 등 보존 가치가 있거나 정확한 타임스탬프가 필요한 모든 곳에 UTC 사용, 로컬타임은 대화에만 쓸 것임
          + 정수에서 (low + high) / 2는 오버플로우 위험이 있으니 low + (high - low) / 2를 쓰라고 했는데, low나 high가 음수일 수 있으면 오버플로우 범위를 옮기는 것일 수 있음, 일반적인 이진 탐색에서 중요한 이슈임
          + C/C++에서 정수 타입 및 연산 제대로 쓰는 것도 큰 함정임, 관련 가이드 링크
          + rebase가 history를 바꿀 수 있다고 했는데, rebase란 그 자체로 history를 rewrite하는 command임
          + 두 언어 사용자 모두 개념적으로는 같은 글자를 인식하지만, 단순히 “폰트 변형” 정도로 치부하면 안 됨, 유니코드 코드포인트가 같다고 안전하게 문자 치환이 되지는 않음, 일본 사용자 입장에서는 이런 치환이 제품 사용 거부 원인이 될 수도 있음
          + 사실 영어 A, 프랑스어 A는 구분하지 않지만, А(키릴 문자)와 A(라틴 문자) 같이 겉모습이 같아도 실제 다른 코드포인트로 존재함, Han 통합도 외형이 꽤 다른 글자를 하나로 묶는 경우가 많아서 일본어나 중국어 학습자라면 실제로 혼란을 겪을 수 있음, 예를 들어 '喝'(drink) 글자는 링크처럼 보기에 따라 상당히 다르게 나옴, 복사해보면 심지어 바로바로 형태가 바뀔 정도로 처리 방식이 복잡함, Han unification은 현실적으로 상당히 골치아픈 주제임
     * numpy와 pytorch 사이에 미묘한 차이가 있다고 언급했지만, 구체적인 사례 설명 없이는 별로 유용하지 않고 정보도 부족해서 현실적인 함정이라고 느껴지지 않음
"
"https://news.hada.io/topic?id=22518","Show GN: Spring AI Playground – MCP·RAG·LLM 통합 실험 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Show GN: Spring AI Playground – MCP·RAG·LLM 통합 실험 오픈소스

   안녕하세요!
   개발자를 위한 AI 통합 플레이그라운드 'Spring AI Playground'를 소개합니다.

   기존 AI 서비스 개발을 위해 테스트를 할때 불편함을 겪어보신 적 있으신가요?
     * LLM, 벡터 데이터베이스, RAG 워크플로우 등을 테스트할 때마다 복잡한 환경 세팅
     * 매번 다른 API 연동 방식으로 인한 개발 시간 소요
     * Java 개발자에게는 특히 Python 중심의 AI 도구들이 진입 장벽

   그래서 ""모든 AI 실험을 한 화면에서""라는 목표로 개발을 시작했습니다.

   주요 특징:
     * 기본 local In-memory Vectorstore 외 18개 이상의 벡터 데이터베이스 지원 (Chroma, Milvus, PGVector, OpenSearch, Elasticsearch 등)
     * 주요 AI 프로바이더 통합 (OpenAI, Anthropic, Ollama, Google, Amazon, Microsoft)
     * MCP (Model Context Protocol) 조기 도입으로 AI 에이전트 구축 가능
     * PWA 지원으로 브라우저에서 앱처럼 설치하여 사용
     * Spring AI 프레임워크 기반으로 Java 개발자에게 친숙한 환경

   Spring AI Playground에서 할 수 있는 작업:
     * MCP Tool 연결 및 테스트: 외부 도구와 AI 모델 연동
     * 거의 모든 LLM 연결: OpenAI, Ollama, 로컬 모델 등 쉬운 변경
     * Vector DB 연동: 대부분의 주요 벡터 데이터베이스 연결하여 유사도 검색 테스트
     * RAG 워크플로우: PDF, Word, PowerPoint 데이터 업로드부터 임베딩 생성, 검색·응답까지 전 과정을 GUI로 구성
     * 통합 LLM Chat 테스트: MCP, RAG 설정 후 한 번에 통합 테스트

   핵심 플레이그라운드:
     * MCP Tool Playground (Inspector) - 외부 도구 연결 및 테스트
     * Vector DB Playground - 문서 업로드, 임베딩, 검색 테스트
     * Chat Playground - MCP, RAG 통합된 대화형 AI 테스트

   5분 안에 실행해보기 (git, ollama, docker, java 21 이상 설치 되어 있다면):

   git clone https://github.com/JM-Lab/spring-ai-playground.git
   cd spring-ai-playground
   ./mvnw spring-boot:build-image -Pproduction -DskipTests=true
   docker run -p 8282:8282 -e SPRING_AI_OLLAMA_BASE_URL=http://host.docker.internal:11434 jmlab/spring-ai-playground:latest

   그 후 http://localhost:8282 접속

   개발 후기:
   처음엔 개인 학습용 도구로 시작했지만, 기능이 쌓이다 보니 AI 실험을 한 곳에서 할 수 있는 올인원 AI 개발·테스트 환경이 됐습니다. 특히 Java 개발자들이 Python 환경 없이도 최신 AI 기술을 쉽게 실험할 수 있도록 하는 것이 목표였습니다.

   오픈소스 기여:
   Spring AI 생태계에 실제 사용 사례와 베스트 프랙티스 제공
   Java 커뮤니티에 Python 중심 AI 도구의 대안 제시

   향후 계획:
   AI Agent 개발, 테스트, 배포 기능 추가한 Spring AI Agent Playground 로 발전

   Local에서 AI 기능을 테스트하고 싶은 Java 개발자분들께 유용할 거라 생각합니다. 피드백 언제든 환영합니다!

   프로젝트 링크: https://github.com/JM-Lab/spring-ai-playground
"
"https://news.hada.io/topic?id=22555","Servy - 어떤 앱이든 Windows 서비스로 실행할 수 있는 완전 관리형 NSSM 대체 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Servy - 어떤 앱이든 Windows 서비스로 실행할 수 있는 완전 관리형 NSSM 대체 도구

     * 어떤 애플리케이션이든 Windows 서비스로 실행할 수 있게 하며, 작업 디렉토리, 시작 유형, 프로세스 우선순위, 로깅, 헬스 체크, 환경 변수, 의존성, 사전 실행 스크립트 등을 세밀하게 제어할 수 있음
     * GUI와 CLI 모두 제공해 상호작용적 관리와 자동화 파이프라인 통합을 지원
     * 윈도우에 기본 제공되는 sc 도구의 제약(특히 C:\Windows\System32에서만 고정 실행)이나 NSSM의 부족한 기능/UI를 보완
     * 서비스 실행 전 프리런치 스크립트 실행 기능을 제공하여, 환경 준비·비밀키 로드·설정 작업 등을 수행할 수 있음. 실패 시 서비스 시작 여부를 옵션으로 조정 가능
     * stdout/stderr 로그 리다이렉션 + 크기 기반 로그 로테이션을 지원하며, 좀비 프로세스 방지 및 자원 정리 기능 내장
     * 앱이 중단·충돌·정지될 경우 자동 재시작하며, Node.js, Python, .NET, Java, Go, Rust, PHP, Ruby 등 거의 모든 런타임 기반 앱을 서비스로 유지 가능
     * 향후 Servy Manager App을 통해 서비스 대시보드, 로그 뷰어, 알림, 원격 관리 등 고급 기능을 제공할 예정
     * Windows 7~11 x64 및 Windows Server 지원
     * MIT 라이선스

   WinSW https://github.com/winsw/winsw 사용중인데 GUI 있는 점은 좋아 보이네요
"
"https://news.hada.io/topic?id=22521","Omnara – 어디서든 Claude Code 실행하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Omnara – 어디서든 Claude Code 실행하기

     * Claude Code, Cursor, GitHub Copilot 등 다양한 AI 에이전트를 실시간 모니터링 및 제어할 수 있는 플랫폼
     * 모바일, 웹, 터미널 어디서든 동일 Claude Code 세션을 이어가며 입력과 출력을 확인 가능함
          + AI가 사용자 입력이 필요할 때만 스마트 알림을 전송해 응답을 유도
          + 깔끔한 UI와 통합 대시보드, git diff 뷰 제공으로 기존 모바일 터미널 앱 대비 생산성과 가시성을 높임
     * Claude Code 외에도, 모든 AI 에이전트가 필요할 때만 알림을 주는 인간-중간 피드백 노드로 활용 가능
     * 기술 구조
          + CLI 래퍼가 Claude Code 세션과 터미널 출력을 캡처하여 사용자·에이전트 메시지를 SSE로 실시간 서버에 전송
          + 서버(백엔드: FastAPI) → PostgreSQL 저장 → 알림 서비스 → 모바일·웹 실시간 동기화
          + MCP(Model Context Protocol) 와 REST API를 지원

   음 느릴것같네요. linux서버에 termius로 연결해서 클로드 코드 쓰고있는데, 이게최적인것같아요
"
"https://news.hada.io/topic?id=22538","Ghostty GTK 애플리케이션을 다시 작성함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ghostty GTK 애플리케이션을 다시 작성함

     * Ghostty 팀이 GTK 애플리케이션을 완전히 다시 작성하며 GObject 타입 시스템을 적극적으로 활용함
     * 이 과정에서 Zig 언어와의 통합 및 Valgrind를 통한 메모리 이슈 확인이 중요한 역할을 함
     * GObject 시스템 채택으로 기존보다 메모리 관리와 커스텀 위젯 구현이 간소화됨
     * Valgrind를 활용한 결과, Ghostty의 메모리 안전성이 크게 향상됨을 경험함
     * 새로운 Ghostty GTK가 소스 빌드의 기본이 되었으며 1.2 릴리스에 포함될 예정임


서론

     * Ghostty는 macOS, Linux, FreeBSD를 지원하는 크로스플랫폼 터미널 에뮬레이터임
     * 각 플랫폼별로 네이티브 GUI 프레임워크를 사용하여 차별점을 가짐
          + macOS: Swift 및 Xcode 기반 대용량 어플리케이션
          + Linux 및 BSD: GTK 기반 애플리케이션, X11/Wayland 등 직접 통합
          + 공통 코어는 Zig로 작성되며 C ABI 호환 API를 제공함
     * 기존 구조에서 GTK 애플리케이션을 다시 작성한 이유는 원문 PR 참고 가능
     * 본 글에서는 GObject 타입 시스템과의 연동 그리고 Valgrind로 검증한 메모리 이슈에 중점적으로 다룸

GObject 타입 시스템과 Zig

     * GTK를 사용하는 경우 기본적으로 GObject 타입 시스템과 인터페이스해야 하는 구조임
     * 과거에는 GObject 시스템을 회피하며 레퍼런스 카운팅이 없는 Zig 객체와 GObject 객체의 생명주기를 직접 맞추려 했으나, 반복적으로 메모리 해제가 제대로 되지 않는 문제 발생
          + 예: Zig 측 메모리는 해제됐지만 GTK 측 메모리는 아직 살아있거나 반대 상황 반복
     * 이런 접근은 올바름 문제뿐만 아니라 GTK 고유 기능(이벤트 신호, 속성 바인딩, 액션) 사용이 어렵게 만듦
     * 구체적 예로 설정(config) 구조체의 리로드 시 연결된 모든 GUI 요소가 일관되게 업데이트되어야 했는데, 이 과정이 복잡하고 오류가 잦았음
          + 현재는 Zig Config 구조체를 감싸는 레퍼런스 카운팅된 GhosttyConfig GObject로 관리, 속성 변경 통지로 애플리케이션 전체에 자연스럽게 변화가 전파됨
     * 커스텀 GObject 위젯 생성도 쉬워져 Blueprint 등의 현대적 GTK UI 기술 사용이 가능
          + 최근에는 Blueprint 도입으로 GTK 타이틀바 탭, 애니메이션 벨 테두리 등 새로운 기능 도입이 쉬워짐

Valgrind와 GTK, Zig

     * 개발 과정 전체에서 Valgrind로 메모리 누수, 정의되지 않은 메모리 접근 등 문제를 체계적으로 검증
     * GTK 애플리케이션의 Valgrind 검사는 까다롭고, 대용량의 suppression 파일 필요 (80%는 GTK 자체, 나머지는 3rd party 라이브러리 및 GPU 드라이버)
     * 반복적 검사로 몇몇 경우에만 발생하는 복잡한 메모리 버그를 사전에 발견 가능
          + 예: GObject WeakRef를 제대로 초기화하지 않으면 대상 객체가 나중에 해제될 때 정의되지 않은 메모리 접근이 발생, Valgrind로 사전 포착
     * 실제 경험상, Zig 코드베이스 내부 이슈는 총 2건(누수 1, 정의되지 않은 접근 1) 에 불과했으며, 그마저도 3rd party C API 연동 과정에서 발생
          + Zig의 디버그용 할당자 및 Valgrind 통합 기능도 실효성 입증
     * 기타 발견된 메모리 이슈는 대부분 C API 경계, GObject 시스템의 복잡한 생명주기 관리에서 비롯
          + 결론적으로 복잡한 라이브러리의 C API를 안전하게 사용하려면 Valgrind와 같은 도구 필요
     * Zig의 메모리 안전성 보조 기능은 이론적 논의뿐 아니라 실증적 프로젝트 경험으로도 효과를 확인

결론

     * 이번이 Ghostty GUI 부분을 다섯 번째로 처음부터 다시 만든 경험
          + GLFW, macOS SwiftUI, macOS AppKit+SwiftUI, Linux GTK(절차적), Linux GTK+GObject 타입 시스템 순
     * 반복적 재작성 과정에서 매번 새로운 교훈과 기술적 성장을 얻음
          + 이번 경험을 macOS 프로젝트에도 일부 적용할 계획
     * Ghostty GTK 시스템 유지보수팀의 적극적인 협업도 강조
     * 새로 다시 작성된 Ghostty GTK 애플리케이션이 이제 소스 빌드의 디폴트가 되었으며, 1.2 정식 릴리스에 적용될 예정임

        Hacker News 의견

     * GTK와 직접 일해본 경험은 없지만, 지금 설명하신 내용을 들어보면 Zig로 Godot 바인딩을 만들면서 겪는 문제와 굉장히 비슷함을 느낌. Godot는 클래스, 가상 메서드, 프로퍼티, 시그널 등 OOP 개념이 엄청 많음. 그리고 모든 개념을 다루고 사용자 정의 객체와 속성을 만들 수 있게 해주는 C API를 제공함. 엔진 객체의 수명관리를 직접 해주고, 참조 카운팅되는 객체의 트리 구조도 있음. 수명 문제를 특히 Zig 관용구에 맞춰 최적 API로 묶으려고 하니 엄청 복잡함. 이런 고민을 하다가 oopz 라이브러리도 만들었음. 아직 API 상태가 이 정도이고 실제 예시는 여기에서 볼 수 있음. Ghostty 프론트엔드를 Godot 익스텐션으로도 만들어보고 싶음
          + 예전에는 직접 언어용 GTK 바인딩을 쓰면서 불편했던 기억이 있음. 98%는 멀쩡했지만, 남은 2%에서 “이 함수가 객체의 참조를 받냐 마냐가 다른 인자에 따라 달라지는” 식의 부분들이 있었고, 그래서 객체 생명주기 분석이 상당히 골치 아팠음
          + 고마움을 전함과 동시에, C# Godot 코드를 성능 좋게 짜려고 할 때 엔진 타입들과의 상호 변환이 너무 많아서 할당도 반복적으로 발생하는 부분이 힘들었던 적이 있음. 바인딩 만들면서 이런 문제도 겪었는지 궁금함
          + Zig로 Godot 바인딩을 만드는 프로젝트가 진행 중이라는 건 몰랐음. Godot와 Zig를 모두 좋아해서 기대감이 큼. 지속적으로 관심을 가질 예정임
     * 좋은 프로그래밍이란 결국 시스템이 제공하는 방식에 맞추는 것임을 잘 보여주는 예시임. OOP나 메모리 관리를 어떻게 생각하든, GTK를 쓴다면 GObject 타입 시스템과 어떤 식으로든 인터페이스를 짜야만 함. 피하고 싶어도 결국 피해갈 수 없음. 대신 우린 피하려고 했고, 그 결과 레퍼런스 계산되는 객체와 비레퍼런스 객체의 수명을 묶는 데서 엄청난 난장판이 벌어짐. Ghostty GTK 앱에서는 Zig 메모리를 해제하면 GTK 메모리는 안 해제됐거나 반대의 버그가 반복적으로 발생함
          + GTK가 이런 구조를 갖게 된 이유가 Vala의 탄생 배경임. Vala는 C#에서 영감을 받아 GObject를 활용하고, 코드를 C로 트랜스파일함. 그래서 상당히 많은 GTK 앱들은 실제로 Vala로 작성되어 있음. 차라리 D 언어를 썼으면 더 낫지 않았을까 하는 아쉬움이 있기도 함. D는 여러 면에서 컴파일되는 C#처럼 느껴짐
          + 나쁜 시스템에 굴복하는 건 좋은 것이 아니라 실용적인 선택임
     * OOP와 메모리 관리에 대한 내 입장은 둘째치고, GTK를 쓰면 GObject 타입 시스템에 얽힐 수밖에 없다는 점에는 동의함. 그래서 아예 직접적으로 GTK를 쓰지 않기로 했음. 통일된 UI 테마가 주는 가치는 알지만, 내가 보기에 GTK의 장점들은 그만큼의 대가를 치르고 쓸 만큼 크지 않다고 느꼈음. 오픈 소스 앱에서 GTK 주변부를 만져본 경험으로, GTK와 GObject의 견해가 내 성향과 잘 맞지 않는다는 확신을 가짐. GTK가 존재하는 건 싫지 않음. 나는 안 쓰는 쪽을 골라서 괜찮은데, 일부 사람들은 그 선택이 내 권리라고 보지 않는다는 점이 이상함. 수많은 GUI 툴킷 중 하나일 뿐이고, 기술적으로 매우 정제된 툴킷임에도, GTK의 점유율이 조금만 낮았더라면 그 polish가 다른 구조적으로 더 좋은 툴킷에 쓰일 수도 있지 않았을까 싶음. 물론 내가 좋다고 생각하는 게 모두에게 좋은
       건 아님. GTK를 쓰는 사람들 중 몇이나 마지못해 쓰고, 몇이나 최고의 툴이다라고 느끼는지 궁금함
          + GTK와 GObject의 의견화(Stronly Opinionated) 스타일이 내 생각과도 잘 안 맞는다는 부분에 내가 동의함을 밝힘. 나는 Gnome 생태계의 방향성과도 많이 안 맞다고 느낌. Ghostty에서 Linux용으로 GTK를 쓰는 건 상당히 실용적인 선택임. Ghostty의 목표가 플랫폼 네이티브(특히 리눅스에서)는 무엇인지 여기에 정의함. GTK는 리눅스에서 가장 널리 쓰이고, 대부분의 앱 생태계에 가장 자연스럽게 어울리기 때문에 이런 결정을 내릴 수밖에 없음. 앞으로 libghostty가 제3자에 의해 다양한 프론트엔드가 나오길 기대함. 예시로 Wayland 네이티브 Ghostty 프론트엔드인 Wraith도 있음. 멋짐
          + GTK가 리눅스에서 널리 쓰이는 핵심 이유는 바로 “C 바인딩”이 있기 때문이라고 생각함. 그래서 거의 모든 언어용 바인딩이 기본 제공되거나 자동 생성도 쉬움. 반면, Qt는 C++와 Python에 과하게 묶여 있어서 접근성이 확 떨어짐. 개발자가 어떤 언어를 쓰든 그 있는 곳에서 맞춰주는 게 중요함. 게다가 복잡한 데스크톱 앱을 짠다고 할 때, 구식 명령형 UI 툴킷이 오히려 실용적이고, 검증된 위젯이 많으니 패턴도 익숙함. 최근 방식들은 반대로 작은 것부터 다 직접 손봐야 하고, 조금만 복잡해져도 상당히 힘들어짐
          + “GTK를 안 써도 된다고 하지만, 마치 남의 선택권이 아닌 것처럼 생각하는 사람도 만난다”라는 부분에 대해 어떤 반대 의견을 주로 만났는지 궁금함. 내 기준에선 접근성이나 비로마자(Non-Roman) 입력 등을 GTK가 꽤 잘해서, 직접 만드는 개발자들이 보통 신경 안 쓰는 영역인데 이 부분을 잘 지원하는 게 주된 경쟁력처럼 보임
     * 재미있는 사실로, Ghostty와 일부 다른 GTK 앱에서 마우스가 창 밖으로 나갔다 다시 들어오면 첫 번째 스크롤 클릭이 무시되는 현상이 있음. 2015년에 처음 보고된 아주 오래된 버그 때문임. 버그 링크. 현재까지도 고칠 계획은 없고, 유지자는 Wayland를 기다리라는 입장임
          + 실제로 이 문제는 GTK 자체가 아니라 XInput2에서 발생하는 듯함. 물론 GTK가 크로미움에서 쓰는 휴리스틱처럼 우회할 수는 있지만, 근본적으로는 상위(XInput2) 문제임
          + 해당 버그 리포트와 링크된 이슈들을 읽어보면, 여러 번 고치려는 시도는 있었으나 어쩔 수 없이 일부 휴리스틱에 기대야 했고, 붙잡고 있던 문제보다 더 심각한 부작용이 계속 생겼음을 알 수 있음. 결국 근본적으로 X11 기저에서 시작된 문제라, 근본 수정이 이뤄져야 다른 개선도 의미있게 진행될 것 같음. 하지만 X11은 현재 사실상 유지보수 모드라, 팬들이 “완벽히 동작하니 추가작업 필요 없다”고 주장하는 한 기대하기 힘들 것임. 결국 남은 방법은 Wayland 전환을 기다리는 것뿐임
     * “Valgrind로 모든 단계를 검증했다”라는 부분에서, 사실 너무 당연하지만 실제로 그걸 한 적은 한 번도 없고, 다른 개발자가 그렇게 하는 것도 별로 본 적이 없음. 보통 Valgrind는 특정 버그나 성능 저하가 나타날 때만 쓰였음. 개발 과정 내내 Valgrind (특히 Memcheck, Helgrind) 같은 도구를 능동적으로 쓰면 툴의 안정성이 엄청 좋아지고, 버그 또한 도입될 때 바로 잡을 수 있어 사후에 수백개의 커밋을 뒤지는 고생도 줄일 수 있을 것 같음
          + 나 자신은 C와 C++을 쓸 때 항상 valgrind를 주기적으로 사용해왔음. valgrind와 asan이 잡는 오류들은 대개 즉각적인 크래시로 나타나지 않고 눈에 잘 안 띄는, 하지만 간헐적으로 발생하는 골치 아픈 버그로 이어지기 때문에 원인을 찾기 굉장히 어려움. 그 중엔 보안 취약점도 섞여있음. 그리고 자잘한 메모리 누수가 조금씩 쌓이다가 나중에 진짜 큰 문제가 발생할 때, 이미 무수히 쌓인 작은 누수들 때문에 원인을 찾기가 더 힘들어짐. 그래서 능동적으로 쓰는 게 좋음
          + Valgrind (특히 memcheck)는 버그 리포트를 자세히 디버깅하기 전에 쉽게 고칠 수 있는 문제부터 먼저 잡으려고 능동적으로 써옴. 다만 가장 큰 문제는 성능 오버헤드가 커서 인터랙티브하게 실행하는 경험이 별로임. 하지만 테스트를 Valgrind로 한 번씩 돌리는 건 매우 이득이라고 생각함
          + 단, Valgrind는 엄청 느리고 비싸서 코드 수정-컴파일-테스트 반복 주기에 바로 넣기엔 힘듦. 테스팅 주기(나이트리, 자동화 등)엔 쓸 수 있지만, 잘 통합하려면 추가 작업이 필요함
     * Ghostty를 쓰면서 맥에서 nano로 여러 줄 붙여넣기가 안 되는 게 매우 불편함. 터미널이 “bracketed pasting”을 어떻게 처리하느냐에 따른 것 같은데, 이상하게 iterm2나 term에서는 이런 문제가 없음
          + Ghostty가 터미널 대체 프로그램으로서 99%는 만족스럽지만, 복붙 이슈는 정말 답답하고 매일 마주침
          + 새로운 컴퓨터에 Ghostty를 기본 터미널로 쓴 이후로, 가장 아쉬운 점은 검색 기능이 없는 것임. 보통 출력 중 특정 내용을 찾으려고 단축키를 자주 쓰는데 이게 안 됨. 실제로 이슈에서도 가장 자주 언급된 문제임
          + Ubuntu 원격 접속 시 Ghostty 내에서 nano 실행 자체가 안 됨
$ nano
Error opening terminal: xterm-ghostty.

            같은 환경에서 macOS 터미널이나 VS코드 내장 터미널에서는 잘 동작함
          + 이런 현상은 진짜 버그일 수 있으니 버그 리포팅을 추천함
          + Cmd+F처럼 명령어 검색이 없는 게 가장 치명적임
     * Rust로 Zig 대신 썼다면 메모리 오류가 막혔을지 궁금함. 대부분이 Zig/C 상호작용에서 나온 문제라 Rust도 비슷했을 것 같음. Go 개발자 입장에서 추측하는데, 막상 C와 대규모로 연동할 때 더 많은 안전성 도구를 제공하는 언어가 있는지도 궁금함
          + Rust였다면 한 문제는 막았겠지만, 나머지는 마찬가지였을 것임. 지적한 것처럼 모두 C API 경계 및 의미론이 문제였기 때문에 실제 안전성은 래퍼의 품질에 따라 달라짐. Rust는 이미 잘 검증된 래퍼 생태계가 많아서 그 부분에서 자작(Zig)의 래퍼보다 위험이 낮긴 했겠지만, 결국 크게 다르지 않음. 예시로 Rust가 잡았을 것으로 보이는 undefined memory access는 실제로 이 PR에서 해결된 부분임. 실제로는 잘못된 메모리가 첫 프레임에 복사됐지만, 어딘가에 사용되거나 보내지지 않아서 심각하지 않았음. 그래도 정확하지 않은 건 확실함
          + Rust 역시 C/GObject와 FFI 경계에서는 수동 메모리 및 수명 관리를 필요로 함. Rust borrow 체크는 외부 코드 메모리 사용을 검증하지 못함
          + 글의 요점 중 하나는 zig + valgrind 조합으로 기대보다 훨씬 적은 메모리 이슈를 만난 것이라는 점임
          + Rust로 C 바인딩 짜기는 훨씬 힘듦. 따라서 rust로 gtk 바인딩 만들기 자체도 안 될 수도 있겠음
     * Ghostty 등 GPU 기반 앱(Alacritty, WezTerm, Zed 등)을 사용하면서 더 빠르고 괜찮다고 느꼈음. 하지만 아이러니하게도 이런 앱들이 Nvidia 드라이버의 한계를 더 선명히 드러내줌. 예전엔 GPU를 거의 안 써서 몰랐는데, Regolith i3wm 등 compositor 미설치 환경이나 sway/wayland 환경 모두 화면 공유, sleep 복귀, 크래시 등에서 nvidia 드라이버가 너무 형편없었음. 여러 버전(550/560/575/580) 바꿔봐도 모두 똑같음. 예전부터 이렇게 나빴구나라는 걸 최근에야 깨달음
          + 나 역시 Wayland에서 비슷한 경험을 함. X11에서 컴포지팅 효과를 꺼두니 1050Ti와 오래된 AMD(radeon 드라이버 필요) 카드 모두 문제없이 잘 돌아감. 반면 Wayland에서는 끊기거나 크래시, 깨진 화면 등 문제가 있었음
     * GTK 타입 시스템이 코드에 영향을 주지 않으면서 큰 앱 하나를 만들 수 있었음. 다만 그 대신 클래스 상속, 확장보다는 람다만 바인딩하는 형태로 모든 컴포넌트끼리 연결함. 결과적으로 그리 지저분하진 않았지만 정통 GTK 스타일에 익숙한 개발자라면 혼란스러웠을 수도 있음
     * Ghostty에 대한 과장된 관심 자체를 이해 못 하겠음. 탭과 컨텍스트 메뉴밖에 없는 UI에, 이런 통합 작업과 리라이트까지 할 가치가 있는지 의문임. iterm2처럼 강력한 GUI 환경도 추가하려는 게 아닌가 추측함. Kitty는 OpenGL로 직접 탭을 그려서 완전 커스터마이즈도 가능하고, 복잡한 프레임워크에 통합하는 시간을 아껴 엄청 실용적인 기능(마지막 명령 결과를 페이저로 감싸서 출력 등)도 빨리 구현함. Kitty에서는 원격도 잘 지원됨
          + Ghostty의 UI는 탭뿐이 아니라, 분할(Split), “프로세스 종료됨” 배너, 닫기 확인 다이얼로그, 타이틀 변경 다이얼로그, 안전하지 않은 붙여넣기 감지, 애니메이션 알림벨, 드롭다운 터미널, 진척도 바 등 생각보다 다양함. 맥에서는 Apple Shortcuts, Spotlight 통합도 있음. 물론 이런 것 없다 해도 GUI 툴킷 없이 순수하게 구현도 가능했지만, Ghostty의 미션은 각 플랫폼 네이티브 툴킷을 써서 앱이 “진짜 네이티브”처럼 체감되게 하는 것임. 이 접근이 싫으면 Kitty처럼 텍스트 탭 쓰는 것도 좋은 선택임. 추구하는 가치와 우선순위의 차이에 따라 선택할 수 있음. 앞으로 GUI 확장도 다양하게 준비 중이고, 플랫폼별 네이티브 기능 연계(iCloud 동기화 등)도 깊이 들어갈 예정임
          + “Kovid가 더 빨리 기능 구현했다”는 주장에 대해, 이 계정이 Kovid 자신인지 의심되는 이력이 있으니 조심이 필요함. 실제로 HN, Reddit에서 Kitty를 중립적으로 소개하는 척하면서 개발자를 비판하는 모습을 본 적 있음. 예전 댓글 내역까지 참고해보라고 링크 제공함
          + 위의 긍정적 설명에 더해, ‘libghostty’가 등장한 것이 게임체인저라고 생각함. WebKit처럼 누구나 drop-in만 하면 곧장 동작하는 강력한 터미널 구현체임
          + 나 역시 터미널을 찾느라 여기저기 방황해봤는데, Ghostty가 완벽히 이상적인 건 아니지만 그나마 적당히 만족스러운 걸 찾지 못했을 때 옮기게 됨. 이 역시 내겐 충분히 의미 있는 선택임. 대체로 ‘결정적 이유’ 때문이 아니라, 큰 문제가 없어서 계속 쓴다는 것이 오히려 장점임
          + 폰트가 Kitty보다 Ghostty에서 훨씬 예쁘게 렌더링됨. Neovide가 더 예쁘지만, 아직 탭 지원도 없고 배터리도 더 많이 먹음
"
"https://news.hada.io/topic?id=22560","전기 울타리는 이미 수년 전에 작동을 멈췄음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        전기 울타리는 이미 수년 전에 작동을 멈췄음

     * 기억 속 울타리로 제한받는 강아지 사례를 통해, 보이지 않는 사회적 장벽을 설명함
     * 전기 울타리는 더 이상 작동하지 않지만, 개는 여전히 그 선을 넘지 않음
     * 우리의 삶에도 비슷하게, 연락이나 소통을 주저하게 만드는 심리적 장벽이 존재함
     * 실제로는 단 20초의 용기와 솔직한 행동이 이 장벽을 넘는 열쇠임
     * 이러한 장벽이 오래전에 사라졌음을 깨닫고, 직접 먼저 다가가는 행동이 자유와 관계 개선의 출발점임


기억 속에만 남아있는 전기 울타리

   산책 도중 한 집 마당에서 개가 짖자, 집주인은 ""걱정 마세요, 개는 마당을 절대 벗어나지 않아요. 전기 울타리는 이미 수년 전에 작동을 멈췄지만, 그 이후로도 개는 한 번도 넘어간 적이 없어요""라고 말함

   한순간 멈춰서서, 울타리는 실제로 존재하지 않지만, 그 개는 여전히 그 경계에 묶여 있다는 사실을 인식하게 됨

   이 경험을 통해 ""우리 삶에도 전기 울타리처럼 의미 없는 심리적 경계가 있지 않을까?""라는 질문이 떠오름

보이지 않는 장벽의 원리

   전기 울타리는 개에게 불편함을 주면서 훈련시킴
     * 처음엔 경고음, 이후엔 충격이 가해짐
     * 결국 개는 울타리가 실제로 작동하지 않아도 혹시 모를 고통의 기억으로 인해 스스로 경계 안에 머물게 됨

   그러나 소수의 개들은 3초간의 불편함을 감수하고 울타리를 넘으며, 한번 그 장벽이 허상임을 알게 되면 다시는 그 경계에 갇히지 않음

우리 사이의 울타리

   이 글에서 전달하는 핵심은 어떤 심리적 장벽이 자유를 제한하는 것이 아니라, 서로를 단절시키는 역할도 하고 있다는 점임
     * ""먼저 연락하면 피곤해 보일까?"", ""상대가 먼저 연락하지 않는 건 관심이 없어서 아닐까?"", ""항상 내가 먼저 연락해서 약해 보일까?""와 같은 생각이 바로 이 울타리임
     * 사실 이런 장벽은 오래전에 의미를 잃었음에도 우리는 여전히 넘지 못함

   진짜를 생각해보면, 누군가 안부를 묻는 연락을 할 때 불편하게 여긴 적이 있는지, 상대의 연락에 실망한 적이 있는지 돌아볼 필요가 있음

   관계는 점수 매기기가 아니라 용기와 진심에서 출발함

20초의 용기

   이러한 장벽을 넘으려면 단 20초의 용기면 충분하다는 메시지를 전함
     * ""생각나서 연락해 봤어, 잘 지내?"" 같은 메시지를 보내는 데 걸리는 시간은 20초임
     * 전화를 거는 데도 20초면 충분함
     * 즉, 20초간 솔직하게 행동하는 것이 우리를 심리적 울타리 너머로 이끌어 줌

   이 울타리는 실제로 존재하는 것이 아니라 어릴 때 겪은 거절, 사회적 규칙, 혹은 더 많이 신경 쓸수록 덜 중요한 사람처럼 보일 것 같은 두려움이 만들어낸 기억의 산물임

누구도 말하지 않는 진실

   먼저 연락하는 사람이 약한 사람이 아니라, 진정으로 자유로워지고 울타리가 무너진 세상을 먼저 경험한 사람임

   우리의 진짜 전환점은 업무 생산성이나 자기계발이 아니라 실은
     * 보내지 않은 문자
     * 걸지 않은 전화
     * 상대방에게 직접 전달하지 못한 ""보고 싶어""라는 한 문장

   이 모든 것 뒤에 있음

   우리와 소중한 사람 사이에 놓인 전기 울타리는 이미 오래전에 작동하지 않게 됐음
     * 하지만 우리는 여전히 스스로를 그 경계 안에 가둠

새로운 시작을 위한 계기

   글 끝에서 사용자에게 ""이 글을 읽는 동안 누군가 떠오르지 않았나요?""라는 공감을 이끌어냄

   Soonly라는 서비스가 바로 이런 '생각난 사람에게 자연스럽게 연락하는 습관'을 위한 도구임을 소개함
     * 매일 아침 한 명의 이름을 알려주어 소중한 관계에 작지만 중요한 행동을 할 수 있도록 도움을 줌
     * 이 작은 노력이 관계의 핵심을 바꾸는 마법임을 강조함

   ""울타리는 이미 오래전에 사라졌음""이라는 메시지로 마무리함

        Hacker News 의견

     * 사람들이 어떻게 내 고등학교 동창들과 옛 선생님들, 그리고 여러 해 전 알았던 사람들의 소식을 다 아느냐고 종종 묻는 경험이 있음. 비결은 걱정이나 망설임 없이, 그냥 누가 떠오르면 ""오랜만이라 미안""이나 ""혹시 나 기억할지 모르겠지만"" 같은 경고 없이 바로 메시지를 보내는 방식임. 누구든 최근에 점심을 같이 먹은 절친처럼 자연스럽게 다가가는 습관임. 결혼식에서 아는 사람을 보면, 바로 가서 공통된 이야기를 꺼내며 말을 걸곤 함. 조심스러운 태도나 ""굳이 안 해도 돼""라고 분위기를 먼저 만들면 상대도 불편함을 느낌. 그냥 친한 친구처럼 굴면, 상대도 그 분위기에 자연스럽게 동화되어 금방 편한 관계가 형성됨
          + ""필터 없이"" 누군가 떠오르면 바로 연락하는 접근이 너무 공감됨. 이번 주 딸과 고향을 방문하면서, 대학 시절 함께 살며 고생했던 친구가 이 도시에 산다는 얘기를 딸에게 해줌. 20년 넘게 연락이 없었다고 하니, 딸이 ""싸웠어?""라고 묻더니, ""아니? 왜 물어?"" 했더니, ""그럼 그냥 편지 써""라고 조언함
          + 나는 안면인식 장애가 있어 타인을 알아보는 나만의 무의식적 확인법이 있음. 대학 시절엔 이미 친구라 착각해서 한 학기 내내 친구였던 일도 있음. 그 경험으로, 처음부터 친한 척하는 태도가 친구를 만드는 데 아주 큰 차이를 준다는 점을 체험함
          + 나는 자폐 스펙트럼이라, 네가 하는 그런 자유로운 접근은 나에겐 전혀 불가능한 방식임. 항상 남에게 민폐를 끼칠까 봐 불안한 마음이 큼. 나 역시 내 시간 요청받는 게 불편하므로, 남에게 그런 부담 주지 않으려 조심하게 됨. 타인과의 사교가 비용이 크기 때문임
          + 나 역시 연락할 때 ""오랜만이라 미안"" 같은 조건을 달지 않음. 요즘 흔한 ""무엇하고 지냈어?"" 등의 어색한 대화는 불필요한 관례라고 생각함. 재미있는 대화로 바로 넘어가는 게 관계에 더 가치있음
          + ""친한 척""하는 태도가 좋은 관계를 만들거나 유지하는 데 정말 중요함. 많은 사람들이 관계에 확신이 없을 때, 상대방의 태도에서 힌트를 찾으려 함. 예의 바르고 딱딱하게 대하면 친하지 않다는 신호를 주는 셈임. 반대로 재밌는 일상 얘기로 친근함을 주도하면, 그 친밀한 분위기에 상대도 쉽게 동화됨. 인간은 대체로 감정적 신호를 주고받으며 관계를 만들어감
     * 사람들이 상대와의 연락을 부끄러워하거나 망설이는 감정을 나는 한 번도 느낀 적이 없음. 어떤 이들은 오랜만에 먼저 연락했다고 서운해할 수도 있는데, 나는 그런 걸 따짐 없이 과감하게 다가감. 한 달 전에는 40년 만에 중학교 동창들과 점심을 가졌음. 바로 그때 처음 보는 느낌으로 자연스럽게 대화가 이어짐. 25년 전 직장 동료들과도 꾸준히 밥을 먹고, 50년 가까이 된 친구와는 Whatsapp으로 매일 대화함. 거절을 당하더라도 부끄럽거나 억울해하지 않고, 상대에게 공간을 줌. 오랜 친구가 이유 없이 연락을 끊어도 괜찮음. 생일에 다시 연락해보고 반응 없으면, 연락이 올 때까지 기다릴 뿐임. 거절 자체는 내 문제가 아니라 상대의 몫임
          + 당신의 태도가 진심으로 부럽고, 언젠가 나도 그런 사람이 되고 싶음. 예전에는 그런 노력을 했는데, 팬데믹 이후로는 마음의 여유가 없어졌음
          + 누군가 연락 시기를 따지고 탓한다면, 그냥 더 이상 연락하지 않고 에너지를 아낌. 인생은 그러기엔 너무 짧음. 가족이라면 그냥 농담 삼아 ""난 어차피 너랑 계속 같이 살아, 넌 나랑 묶여 있어"" 식으로 가볍게 웃어넘김
          + 누군가 연락에 대한 부끄러움이나 두려움이 ""가짜""라고 하지 말아달라는 말에 공감함. 그런 감정은 충분히 진짜임
     * 나를 포함한 많은 사람에게 심리적 장벽(일렉트릭 펜스)은 여전히 존재함. 이 장벽은 오래된 상처에 대한 두려움에서 비롯됨. 우리는 무의식적으로 그 생각을 피하기 위해 행동을 제한함. 이런 장벽에 갖힌 사람은 타인 시점에서는 명확히 보이나, 스스로는 잘 인식하지 못함. 자기 생각을 바꾸려면 그 아픔을 직면하는 노력이 필요함
          + 누구나 타인의 장벽은 잘 보이지만 자신의 장벽엔 무감각함. 나에게 가장 도움이 된 건, 고통스러운 생각이 떠오를 때 ""이 생각이 나를 무엇으로부터 지켜주려 하는가?""라고 자문하는 것임. 대부분 과거의 한 번의 트라우마에서 온 것임. 다음 번 그 심리적 장벽을 느낄 때, 그 감정을 알아차리고 아주 작은 한 걸음만 ""그쪽""으로 다가가보는 것임. 감정이 반응하고 예전의 아픔이 느껴지지만, 실제로 원하는 일은 일어나지 않음. 이렇게 천천히 자기 자유를 찾게 됨
          + 개 심리에 있어서도 바로 그런 식임. 개 입장에선 전기 울타리가 아직도 그대로 있음. 바로 그것이 글의 핵심임
          + 실제로 몇 번만 심리적 충격(전기 펜스)에 노출돼도 트라우마가 남음. 나는 몇 년 전 과거 이웃들에게 연락했다가 연이어 무시당하고, 한 명은 나에 대해 완전히 날조된 소문(폭력, 배터리 산 등)이 퍼진 상황임을 알게 됨. 그 일 이후, 굳이 전기 펜스를 또 건드릴 생각 없음
     * ""울타리는 실제로 존재하지 않는다""는 말에 Chesterton's Fence 원칙을 소개함. 즉, 어떤 장벽이나 규칙이 왜 생겼는지 배경을 모르고 없애면 위험하다는 접근임. 어쩌면 어떤 관계는 끊어진 게 맞고, 불편함을 느끼는 건 상대가 비언어적으로 좋아하지 않는 신호를 보냈기 때문일 수도 있음
          + 맞는 말이지만, 누군가에게 문자 한 번 보내는 건 특별히 큰 위험이 아님. 이 글의 취지는 아무한테나 연락하란 뜻이 아니라, 과거 악연이나 위험한 사람 말고, 예전에 좋았던 인연에 간단히 연락할 땐 그리 큰 일이 아니라는 의미임
          + Chesterton's Fence는 조직이나 사회구조 같은 불분명한 유래의 제도에 해당하는 개념임. 인간관계처럼 배경을 잘 아는 경우와는 조금 다름. ""이유를 모를 땐 잘 살펴보라""는 원칙이지, 계속 아무 행동하지 말라는 뜻은 아님
          + 가끔은 그런 심리적 장벽이 실제로 필요할 때도 있지만, 특별히 위험하지 않은 상황이라면, 직접 경험하고 다시 관계를 평가하는 게 더 현명함. 걱정만 하며 좋은 인연을 놓치기는 아쉬움. 어차피 인생은 계속해서 배우는 과정임
          + 나는 Chesterton's Fence 논리에 동의하지 않음. 현실적으로 위험이 낮은 상황에서는 기존의 구조나 장벽을 다시 검증해야 한다고 생각함. 무조건 질문하지 않고 따르다 보면 기억과 경험도 사라짐
          + 나 역시 고등학교 동창회에 가보았으나, 결국 그 시절 외톨이였던 이유를 다시 깨달음. 최근 옛 친구 몇 명에게 연락해봤는데, 통화한 친구와 대화하면서 ""이 관계는 별로네""라는 생각이 들었음. 다른 친구와의 만남도 지루했고, 또 다른 친구는 대화 내내 단 한 번도 웃지 않아 힘들었음. 결국 끊어진 관계는 스스로 자연스럽게 살아나지 않는다면 그대로 두는 게 맞다고 느낌
     * 예전에 모스크바에 살면서 구조견과 함께 생활한 경험이 있음. 그 compound엔 전기 울타리와 충격 목걸이 시스템이 있었음. 모스크바 길거리 개들은 굉장히 똑똑해서, 이 개 역시 외곽에 가면 울타리가 경보음을 내고, 계속 가다 보면 배터리가 다 된다는 걸 금방 눈치챔. 그래서 경보음이 연속으로 들릴 때까지 가까이 가서 결국 배터리를 다 닳게 만든 뒤 자유롭게 탈출하는 모습을 보여줌
     * 말에게 있어서 전기 펜스는 심리적 장벽임. 실제로 인간은 이 충격이 별로 해롭지 않다는 걸 알지만, 말에게는 큰 공포임. 자유를 향한 욕구가 크고, 한번 뚫고 나갈 만하다고 배운 말은 일시적 아픔을 감수하고 울타리를 뛰어넘음. 참고로 고무 부츠가 터지거나 물웅덩이에 서 있으면 충격이 더 강하게 느껴짐. 몸이 무겁고 네 발이 쇠말굽일수록 더 아플 것임
          + 곰의 경우, Fish and Wildlife에서 전기 울타리에 베이컨 그리스를 묻힌 알루미늄 포일을 미끼로 쓰라고 조언함. 두꺼운 털로는 잘 못 느끼지만, 민감한 코로 닿으면 제대로 배움. 실제로 신발 상태에 따라 충격이 크게 다름. 나는 싸구려라 전기 울타리 테스터 대신 맨손으로 만졌는데, 마른 신발일 때는 그냥 ""찌릿""인데, 젖은 신발일 땐 정말 강하게 느껴졌음. 우리 집 닭장을 지키는 아주 작은 fencer를 쓰는데, 50마일짜리를 쓴다면 머리카락이 곤두설 것 같음
          + 이건 흔한 파티 장난임. 울타리가 별로 안 아프다고 시범 보이고, 여러 명이 손을 잡고 마지막 사람이 울타리를 만지면 울타리 가까이 있는 사람일수록 더 아프게 느끼는 효과가 있음
     * 이번 글이 창업자의 입장에서 정말 시기적절한 내용임. 옛날엔 소개, 조언, 도움을 요청하는 것도 큰 심리적 장벽(일렉트릭 펜스)이었음. 여러 번 곱씹고, 나도 언제든 도움을 요청해도 된다는 마음가짐이 필요함을 배움. 아직도 ""팔로우업"" 즉, 재차 연락하는 데 어려움이 있음. 상대가 첫 연락에 답이 없으면 ""관심 없구나""라고 오해하지만, 사실 대부분의 사람들이 메시지에 답을 깜빡함. 나도 답장 보내려다 까먹은 적이 많으니, 남들도 마찬가지임. 두 번까지는 꼭 다시 연락해야 효과가 있다는 걸 체험함. 아직도 두 번째 메시지는 에너지가 들지만 꾸준히 시도해야 함
          + 이 얘기에 공감함! 다시 연락하는 것(팔로우업)은 기회 손실의 주범임. 두 번째 메시지는 상대의 관심이 없어서가 아니라, 삶이 워낙 복잡해서라는 점을 인정하는 것임. 이젠 누구나 2~3번은 리마인드가 필요하다고 생각함. 계속 연락해보는 게 중요함
     * 글 자체는 정말 잘 썼다고 생각했지만, 마지막에 이 블로그가 소셜 운영체제라 부르는 앱 홍보 블로그란 걸 알고 조금 맥이 빠졌음
          + 동감임! 시스템에서 벗어나자는 얘기를 하면서 또 다른 시스템을 만드는 아이러니가 좀 있음. 그래도 훈련용 보조바퀴가 필요할 때가 있고, 결국 중요한 건 마음가짐 전환임. 궁극적으로 그 시스템이 불필요해지는 게 목표임
     * 작가가 ""누군가 안부 차 연락한 것에 짜증났던 적 있냐""라고 썼지만, 세상엔 아주 성가신 사람이 있음을 모르나 봄 ;)
          + 나도 고등학교 동창이 오랜만에 연락해서 처음엔 반가웠으나, 곧 말을 이어가면서 불편했던 경험이 있음
          + 순수하게 안부만 묻는 사람에게는 짜증나 본 적 없음. 다만 연락하자마자 돈을 요구하거나 다단계 사업에 끌어들이려는 케이스는 정말 싫었음. 다행히 그런 일은 몇 번밖에 없었음
     * 내 삶의 질을 끌어올리려면 ""멍청이""를 내 삶에서 과감히 끊어내는 게 정말 도움됨. 여기서 말하는 멍청이는 단순히 싫거나 의견이 다른 사람이 아니라, 더 이상의 실수로 내 인생에 실제 위험이 되는 유형임. 어린아이처럼 아직 모르는 존재는 예외임. 그런 사람들과의 관계에서는 전기 울타리를 그대로 세워두는 게 현명함
"
"https://news.hada.io/topic?id=22528","스트리밍 서비스, 시청자들을 다시 불법 다운로드로 이끌고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   스트리밍 서비스, 시청자들을 다시 불법 다운로드로 이끌고 있음

     * 스트리밍 요금 인상과 콘텐츠 선택권 축소로 인해 합법적 서비스에서 원하는 작품을 찾기 어려워지면서, VPN과 불법 스트리밍으로 돌아서는 시청자가 늘어나고 있음
     * 스웨덴은 The Pirate Bay와 Spotify의 본고장으로, 과거 불법 복제에서 합법 스트리밍으로의 전환을 경험했으나 최근 다시 불법 복제율이 상승
     * 현재 넷플릭스 요금은 월 199크로나(£15)를 넘고, 동일한 콘텐츠를 보려면 여러 구독이 필요하며, 유료 플랜에서도 광고가 나오는 등 ‘enshittification’ 현상이 심화됨
     * 2023년 기준 TV·영화 불법 복제의 96% 가 무허가 스트리밍에서 발생하며, 2024년 전 세계 불법 복제 사이트 방문 횟수는 2,160억 회로 증가함
     * Valve 공동창업자 게이브 뉴웰이 말한 것처럼, 문제는 가격이 아니라 서비스 품질이며, 스튜디오들이 접근성과 상호운용성을 회복해야 한다는 지적


스트리밍 서비스의 변화와 해적판의 부활

  스트리밍 서비스의 등장과 해적판 감소

     * 과거 The Pirate Bay와 같은 토렌트 사이트에서 음악, 영화, 드라마 등 원하는 모든 콘텐츠를 쉽게 구할 수 있었음
     * 스마트폰의 보급과 함께 Spotify 같은 정식 스트리밍 서비스가 등장하며 사용자들이 광고를 보거나 소액 구독료를 내는 방식으로 전환됨
     * Netflix 역시 주요 콘텐츠를 저렴한 가격에 제공하며 해적판 이용이 빠르게 줄어듦
     * 스웨덴은 불법 다운로드와 스트리밍 산업 모두에서 혁신이 일어났던 국가임

  스트리밍 서비스의 분열과 이용자 불만

     * 최근 몇 년 사이 Netflix 구독료가 크게 인상되고, 원하는 콘텐츠들이 HBO Max, Disney+, Apple TV+ 등 여러 플랫폼에 분산됨
     * 구독료를 낸 유료 회원들도 광고를 시청해야 하거나, 각종 지역 제한과 VPN 사용의 번거로움에 직면함
     * 유럽 평균 가구는 연간 700유로(약 60만 원) 넘게 3개 이상 VOD 서비스에 지출 중임
     * 많은 이용자들이 비용이 증가하는데도 불구하고 콘텐츠 접근성이 오히려 떨어지는 경험을 하게 됨

  불법 다운로드 부활의 실태와 트렌드

     * 일부 이용자들은 해적판 시청을 멈추지 않고, 최근에는 비공식 스트리밍 플랫폼이나 커뮤니티 애드온을 활용해 불법 스트림 접근이 증가함
     * 다운로드 방식은 진입장벽이 높아졌으나, 불법 스트리밍의 경우 광고 노출을 감수하고도 이용함
     * MUSO 조사에 따르면 2023년 기준 TV/영화 불법시청의 96%가 스트리밍 기반임
     * 불법 사이트 방문 수는 2020년 1300억 회에서 2024년 2160억 회로 급등함
     * 스웨덴의 최신 통계에서는 25%가 해적판 이용을 고백했는데, 그중 대다수가 15-24세임

  서비스의 품질 저하와 인위적 콘텐츠 희소성

     * Valve의 공동창업자 Gabe Newell은 ""해적판 문제는 가격이 아니라 서비스 문제""라고 언급함
     * 스트리밍 사업자들은 각자의 콘텐츠 독점 및 사용자 통제를 강화하며 인위적으로 희소성을 만들어 냄
     * 비트레이트 제한, 브라우저 호환 문제 등 사용자 경험을 저하시킴
     * 결과적으로 이용자들은 한 곳에서 모든 것을 볼 수 없고, 구독료와 스트레스만 늘어남

  시사점 및 미래

     * 데이터의 디지털화가 '풍요'를 약속했지만, 실제로는 콘텐츠의 인위적 분할과 비용 증가로 사용자의 만족도가 하락 중임
     * 스트리밍 서비스들이 이용자 중심의 접근성, 상호운용성, 서비스 혁신을 회복해야 한다는 시사점을 제공함
     * 과거 메디치 가문이 접근성과 신뢰 기반의 네트워크를 강조했던 것처럼, 오늘날 미디어 콘텐츠 산업도 동일한 교훈을 받아들여야 함
     * 시청자들의 불법 복제 복귀는 단순 반항이 아니라, 서비스의 파편화와 품질 저하에 대한 반응임

        Hacker News 의견

     * 불법 다운로드의 장점이라면, 첫째로 거의 무제한에 가까운 엄청난 영화, 음악, TV 프로그램 라이브러리에 제한 없이 접근 가능함, 회사 간 불투명한 '라이선스 계약'에 전혀 좌우되지 않음, 출시 당시의 최고 해상도/비트레이트/퀄리티 그대로 감상 가능함, 기기나 OS에 상관없이 임의로 제한을 받지 않음, 충분한 인터넷만 있으면 지구 어디서나 감상/다운로드 가능함이 있음임, 무료이거나 광고가 없다는 건 오히려 내게 그리 큰 장점이 아님, 만약 어떤 회사가 이 4가지 기준을 서비스로 제공한다면, 난 꽤 많은 금액을 지불할 의향이 있음, 하지만 아무도 시도조차 안 해서 실제 가치는 알 수 없게 되어버림
          + 불법 다운로드로 가능한 추가적인 이점이라면, 오프라인 감상 기능, 자막 수정 및 위치/크기 조정, 원하는 자막을 임의로 구할 수 있음(없는 언어도 구함), 오디오 노멀라이징, 느린 네트워크 환경에서 미리 버퍼링, 마음대로 컬렉션 구성 및 영화 정리/트래킹, 임의의 유저 계정 수 제한 없음, 여러 기기에서 동시 시청 가능(Jellyfin의 SyncPlay 사용), 대기업이 사용자를 추적하거나 데이터를 팔 걱정 없음임, 이런 점들 덕분에 솔직히 불법 다운로드가 훨씬 나은 경험이라고 느껴짐, 예를 들어 넷플릭스에서 자막이 화면 반을 가려 그날은 그냥 스트리밍 포기한 적이 많음, 연간 구독료로 직접 NAS 시스템을 만들어 영구적으로 영화 소장 가능하고, 시간 지나면서 용량 증설도 가능하며, 사진, 개인 영상, 게임, 로컬 AI 모델 등 다용도로 사용 가능함, 물론 1,000달러
            정도면 제법 쓸만한 NAS 구축 가능하지만, 이 정도면 4K 넷플릭스 3년치 구독료이므로 단기적으로 싼 선택은 아님
          + 실제로 원작 출시 당시 퀄리티보다 더 높은 수준으로 즐길 수도 있음, 예를 들어 스타워즈 팬들이 1977년 극장판을 고퀄리티 필름 스캐너로 스캔, 4K 버전으로 필름 그레인과 원본 장면 그대로 복원함, 그리고 이런 버전은 공식 채널에서 접근 불가함
          + 검열 없는 자유도 잊지 말아야 함, 특정 장면이 누군가를 불쾌하게 할 수 있다는 이유로 에피소드가 삭제되거나 편집되는 순간 스트리밍 서비스를 그만둠
          + 디즈니+에서 Andor를 4K로 보려고 구독했는데, PC에서는 1K까지만 허용되는 제약 때문에 실망이었음, 공식 앱이든 브라우저든 똑같았기에 바로 다시 불법 다운로드로 돌아옴, 여러 서비스에 조각난 경험도 번거로운데, 돈 내고 최고의 화질을 못 보는 건 정말 불합리한 일임
          + 내가 특히 싫어하는 건 독점 계약임, A 보고 싶으면 이 서비스, B 보고 싶으면 또 다른 서비스, 게다가 스포츠 독점까지, 스트리밍이 케이블과 경쟁하던 시절에는 저렴하고 주문형 시청 덕에 괜찮았지만, 끝없는 탐욕으로 결국 옛날 케이블 TV보다 더 많이 내고 있으면서 합리적이지 않은 상황이 되어버림
     * 백억 달러의 기업들이 정부의 칭찬과 지원을 받으면서도 불법 자료를 다운로드하고 돈을 안내는 상황에서, 왜 평범한 사람들이 양심적으로 돈을 내야 하는지 모르겠음, 이제 해적판에 반대하는 도덕적 논리가 설득력이 떨어짐, 남들이 돈도 안내고 처벌도 없다면 내가 굳이 낼 이유가 없어 보임, 누구나 자기 뇌를 무료로 훈련할 권리가 있음
          + 콘텐츠를 ""구매"" 또는 ""소유""하면 영원히 내 것이란 생각은 착각임, 상위 회사가 라이선스를 재협상해 어느 날 갑자기 라이브러리나 내 기기에서 컨텐츠가 사라질 수 있음, 심지어 아예 접근 차단될 수도 있음, 결국 소유한 게 아니라 '구독'인 셈임, 누군가 말하길 “구매가 소유가 아니면, 해적판은 도둑질도 아님”이라는 논리가 적용됨, 관련 글
          + 예전 영화, 음악 산업이 캐나다에서 공미디어세를 도입해 스스로 자충수를 둔 적이 있음, 덕분에 CD-R, 플래시 메모리 가격이 더 비싸졌지만, 이미 고객이 기록매체에 음악을 저장하는 대가로 음악사에 비용을 지불한 셈이므로 스트리밍이 합법화됨, 10년 전쯤 듣고 캐나다 현지 법이 이런 상황이라고 이해했음
          + 도둑질이 죄라면 왜 단지 엔드 유저만 해당되는지 의문임, 기업은 이런 법을 무시해도 정부조차 신경 안 쓰는 상황에서, 엔드 유저가 DMCA 위반에 죄책감을 가질 필요가 없음
          + 2000년대 영화 학교 재학 당시, 미디어 회사들이 고등학생 가족을 파산시키며 해적판의 나쁨을 보여주려 했던 시절이 있었음, ""차를 다운로드하지 않겠지?"" 캠페인도 기억남, 그 시절 회사 임원들이 수업 전후로 비행기에서 본 시리즈나 iPod에서 본 이야기로 대화하곤 했는데, 이들이 개인적으로는 몰래 감상하면서도 공적으로는 비난 일색이라 위선이 느껴졌음, 그들 스스로가 비난하는 행동을 아무런 죄책감 없이 즐기나 봄
          + 진짜 궁금한 점: 토렌트로 미디어를 받아 “학습용입니다”라고 주장하면 실제로 법적 테스트가 된 적 있는지 의문임
     * 만약 포켓몬 공식 가이드에서 어디서 만화를 볼 수 있는지 살펴보면 이 얼마나 혼란스러운지 알 수 있음, 링크 참고, 심지어 영화 목록조차 제대로 제공하지 않으며 더욱 분산되어 있음
          + 나는 이 문제가 한 서비스 내에서 콘텐츠가 조각나 있는 정도라고 생각했는데, 그보다 훨씬 더 복잡한 문제로 보임, 누군가 이게 어떻게 가능한 일인지 설명해 주면 좋겠음, 만약 여러 스트리밍 서비스 수만큼 분산을 통해 위험을 분산시키는 방식이라면 오히려 문제를 키웠다고 봄, 혹시 특정 기간 독점 계약 때문에 각각 다른 곳에 뿔뿔이 흩어진 건지, 후발 서비스가 기존 계약 만료 전 등장해 문제를 꼬이게 한 건지, 기타 다른 요인이 있는지 궁금함
          + 미국 외 지역에서는 포켓몬이 공식 목록대로 제공되지 않는 경우가 있음, 내 넷플릭스에는 공식 사이트에 적힌 시즌들이 없었음
          + 나는 ""Gotta Subscribe 'Em All!""라는 말이 더욱 와닿음
          + 솔직히 이런 공식 가이드가 토렌트 사이트를 위한 광고 같음, 생각보다 더 심각한 현실임을 처음 깨달음
          + 이걸 본 적은 있지만, 공식 서비스였다는 건 몰랐음, 예전엔 불만 가진 팬이 농담 삼아 만든 비공식물이라 생각했었음
     * 나는 불법 다운로드가 TV/영화 시청에 더 건강한 습관을 부여한다고 생각함, 스트리밍 구독 대신 전부 불법 다운로드로 옮기고 나서 뭔가를 다운받고 직접 시청할지 더 비판적으로 고민하게 됨, 스트리밍 플랫폼에서 의미 없는 콘텐츠 넘기기에 시간을 허비하지 않게 된 셈임, 단, 여전히 Kanopy는 긍정적으로 쓰고 있음(이건 도서관 연계라 개인 상황에 따름)
          + 나는 보고 싶은 미디어가 있을 때만 직접 찾아서 감상함, 그냥 거기 있는 거 마구 선택하는 대신, 예를 들어 지금은 Stargate SG1/Atlantis를 보고 있음, 우리 지역은 대부분 더빙만 제공하고, 독일어 더빙의 ""Sie""가 너무 싫어서 영어 자막이 있으면 무조건 그 쪽을 찾게 됨
          + 나는 *arr 스택을 완전히 자동화해서 22TB 스토리지로 운영중임(아마도 과하긴 함), 가족, 친구들과 함께 쓰고 있음, 서버에 미디어가 있다는 건 누군가 직접 원해서 올린 거라 큐레이션 효과가 자연스럽게 발생함, 자동화 덕분에 원하면 그냥 다 다운받을 수도 있지만, 디스크 용량 한계 때문에 아무도 안 보면 자동 삭제를 하게 됨
          + 나는 이제 Jellyfin 서버에서 의미 없는 콘텐츠를 끝없이 넘기게 되는 경우도 있음
          + 직접 디스크를 구입해 리핑하면 최소한 창작자에게 정당한 대가를 지불하는 셈 아님?
          + 자동화 문제일 뿐임, 하드디스크만 더 사서 새로 나온 거 다 자동다운로드하면 끝임
     * Gabe Newell의 말처럼 ""불법 다운로드는 거의 항상 서비스 문제이지 가격 문제는 아님""이라고 생각함, 그리고 지금 ‘서비스’라는 개념이 챙길 게 정말 많아짐, 회사마다 제공 여부/지역 제한/스트림화질/최저 요금제조차 광고 지원/자막·음성지원 같은 미디어 접근성 등등이 그 예임, 참고 링크
          + 일주일 전 넷플릭스에서 6살 딸을 위해 여러 영화를 다운로드해 3시간 비행에서 잘 활용했는데, 돌아가는 비행에서는 영화 2/3가 사전 알림 없이 만료되어 딸이 원하던 걸 못 봤음, 다음부터는 꼭 해적판을 준비할 생각임
          + 서비스 문제가 실감되는 사례임, 최근 Apple TV에서 미국 드라마 시즌 1을 구매했는데, 우리(캐나다) 지역에서는 불어 더빙만 제공됨, 사전엔 아무 설명도 없었음, 이런 식이면 나는 정직하게 돈 내고 보고 싶어도, 거짓정보나 황당한 제약엔 더 이상 긍정적이지 않음, 결국 뒤이은 시즌은 해적판으로 구함, 돈을 낼 의향이 있어도 이런 식이면 불가피함
          + 서비스란 결국 유저 경험임, “결제 클릭, 재생 클릭”으로 끝나야 하며, 그 외 무엇이라도 더하게 된다면 서비스 실패임
          + 이 같은 Gabe Newell의 인용문이 스트리밍 초창기엔 넷플릭스 혁신을 찬양할 때에 쓰였고, 지금은 그 산업이 같은 문제를 만들며 다시 인용되고 있음이 흥미로움
          + 그치만 요금도 점점 심각한 부분임, 넷플릭스가 1년에 5번이나 가격을 올렸을 정도임
     * 이제 수십 개 스트리밍 서비스로 인해 더 이상 예전만큼 편리하지 않음, 스트리밍 비트레이트도 낮고 오디오 압축으로 음질이 별로임, 내 미디어서버가 아니라면 넷플릭스, 프라임, 디즈니로 내가 정말 원하는 걸 즐기는 게 어렵게 느껴짐, 스트리밍 구독 시절에는 폴란드에서 인기인 콘텐츠가 무엇인지 보고 깜짝 놀랄 때가 많았고, 나는 그들의 타깃이 아니라는 걸 인정하는 데 한참 걸렸음
          + 요즘 쇼 퀄리티도 점점 별로임, 실제로 넷플릭스에서 볼 수 있는 건 여러 카테고리 포함해 80여 개 정도고, 그 중 70%는 중복임
     * 나는 예전 스트리밍 이전의 넷플릭스로 다시 돌아가고 싶음, 그 시절엔 거의 무한대에 가까운 라이브러리와 알고리즘 추천이 없었기에 내가 진짜 보고 싶은 걸 건강하게 고르게 됨, 리스트에만 영화 잔뜩 추가해놓고 막상 뭔가 심각한 걸 보기에는 무거워서 간단한 것만 반복해서 보는 패턴에 빠짐, 예전 디스크 우편 배송 시절엔 '언젠가 꼭 봐야지 했던 세 시간짜리 자막영화'를 오늘은 반드시 보게 되고 항상 만족스러웠음, 근데 지금 스트리밍 시절엔 '정신적으로 여력도 없고 클리셰 콘텐츠만 다시 보는' 상황이고, 내 시간을 아쉽게 허비함
          + 요즘 스트리밍이 실망스러워서, 다시 옛날 우편 디스크 방식의 넷플릭스를 누군가 시작할 수는 없는지 궁금함, 첫 판매 원칙(First-sale doctrine) 덕분에 출판사의 특별 허가 없이 물리 매체를 대여할 수 있으니, 각기 다른 출판사의 콘텐츠를 한 데 모을 수 있는 유일한 방식일 듯함, 물론 출판사들이 물리 매체 생산을 계속한다는 전제임
          + 몇 년간 Mubi가 이 문제를 잘 해결했다고 봄, 하루에 한 편이 빠지고 새 영화가 들어오는 방식으로 항상 30편만 제공했는데, 큐레이션이 정말 강해서 기억에 남을 영화만 있었음, 덕분에 진짜 규율 있는 시청 습관을 가질 수 있었음, 지금도 Mubi가 좋은 플랫폼이긴 하나, 이제는 정규 카탈로그가 추가되어 예전 느낌은 약간 사라짐
          + 나도 이런 생각에 공감함, 최고의 사람은 아니지만, 나 역시 비슷한 고민 끝에 NPR에 기부하려고 넷플릭스 구독을 끊고 지출을 옮김, 이제 더 이상 넷플릭스가 없어서 약간 해방된 느낌임, 다운받거나 소비하는 것에 대해 더 신중하게 됨
     * 만약 DRM 없이 영화/드라마를 판매해준다면 나는 당장 그것을 Jellyfin 서버에 올려 두고 싶음, 음악은 Bandcamp나 애플, 아마존에서 DRM 없이 직접 사서 쓰기에 굳이 해적판을 이용하지 않음, 그런데 미디어는 구하기도 어렵고 물리매체도 점점 안 나오니 선택지가 없다고 느낌, 최신작도 필요 없고 드라마는 완결 후 감상하는 걸 선호함, 그래서 대부분 매주 도서관에서 블루레이를 빌려서 리핑한 다음, 재미 없으면 바로 삭제해서 용량 관리함, Jellyfin이 스트리밍 앱보다 훨씬 인터페이스가 낫고, 극장판과 확장판 등 어떤 버전 볼 지도 선택 가능해서 더 좋음
     * 나는 프라이버시 보호 때문에 늘 해적판을 선택해 왔음, 다양한 서비스가 내 취향과 시청 기록을 수집해 기업, 정부에까지 공유한다는 게 싫음, 추천이 필요하면 친구에게 직접 물어보는 게 낫다고 생각함
          + 추천 알고리즘 자체는 괜찮은데, 그게 진짜 익명이라면 몰라도, 스트리밍 서비스에 돈 내는 순간 내 신상이 묶이고 결국 시청 데이터가 데이터 브로커로 넘어갈 가능성이 큼
          + 내게 가장 바라는 유료 서비스 기능은 “모두가 보는 것도 듣는 것도 전부 추적되지 않는다”는 점임, 그리고 미디어 직접 소유권도 마찬가지로 중요함
     * 암시장(해적판 시장)은 보통 시장 실패의 결과물인 경우가 많음, 저작권은 독점이라 실제로는 경쟁이 없음, 스트리밍 각각은 서로 경쟁처럼 보여도 각자 다른 상품을 파는 것에 불과함, 마치 햄버거는 특정 식당만 팔 수 있게 하는 것과 비슷함, 다른 레스토랑이 있어도 직간접적 경쟁은 아닌 셈임
          + 스트리밍 서비스는 규제를 무기로 사업 모델을 유지하는 중임, 하지만 이 전략이 유효하려면 미국 저작권 집행에 별 관심이 없는 디지털 인프라 강국이 존재하면 안 됨, 요즘 미국 정부가 다른 국가들과 사이가 나빠진 것도 있고, 미국 내에선 집행이 힘을 가지지만, 해외는 여전히 취약함
"
"https://news.hada.io/topic?id=22515","호주 법원, 애플·구글의 반경쟁 행위 인정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        호주 법원, 애플·구글의 반경쟁 행위 인정

     * 호주 연방법원이 App Store와 Google Play Store를 반경쟁적이라 판결함
     * 2020년 Epic Games가 30% 수수료와 Fortnite 퇴출에 반발해 제기한 소송이 5년 만에 합쳐져 단일 재판으로 진행됨
     * 법원은 애플과 구글이 시장 지배력을 남용해 경쟁을 억압했다고 보고 호주 경쟁법 46조 위반을 인정함
     * 소비자법 위반·부당 행위 주장 등 일부는 기각됐으며, 애플과 구글은 일부 판결에 동의하지 않는 입장을 밝힘
     * Epic Games는 호주에서 Fortnite와 Epic Games Store(iOS) 를 곧 출시할 계획임


사건 개요

     * 호주 연방법원에서 Apple과 Google이 자사 앱스토어 운영 방식으로 인해 경쟁 제한 행위를 저질렀다는 판결이 선고됨
     * 소송의 발단은 Epic Games가 2020년 App Store 및 Google Play Store에서의 30% 수수료와 Fortnite 앱 삭제에 반발해 두 회사를 고소한 사건임
     * 초기엔 네 건의 별도 소송이었으나, 중복되는 쟁점이 많아 단일 재판으로 병합 진행함

소송 배경 및 주장

     * Epic Games는 양사가 자사 모바일 앱 마켓에서 불법 독점을 유지하고, 경쟁 앱스토어(예: Epic Games Store) 진입을 봉쇄하는 폐쇄적 생태계(walled garden) 를 구축했다고 주장함
     * Apple과 Google 측은 이러한 제한 조치가 사용자 개인정보 및 보안을 보호하기 위함이라 반론함

법원 판결

     * 호주 연방법원 Jonathan Beach 판사는 약 2,000페이지 분량의 판결문에서 Apple이 상당한 시장 지배력을 보유했다고 판단
     * Apple과 Google 모두 호주 경쟁법(Competition Act) 46조를 위반, 시장 지배력 남용으로 경쟁자를 저해했음을 인정함
     * 단, Apple/Google이 소비자법을 위반하거나 불공정 행위(unconscionable conduct)를 했다는 Epic 측 주장은 기각됨

각사 반응 및 후속 조치

     * Apple은 일부 청구 기각을 환영하지만, 경쟁 제한 판결에는 동의하지 않는다고 발표함
     * Google도 일부 청구 기각을 긍정 평가하며, 자사 결제 정책 및 파트너십에 대한 법원의 해석에는 반대 입장을 표시함
     * Google은 향후 법적 대응 방안을 검토 중임

향후 전망

     * Epic Games는 이번 판결을 계기로 Fortnite와 Epic Games Store for iOS를 호주 시장에 곧 출시할 예정임
     * 이미 미국에서는 Fortnite가 최근 iOS에 복귀한 상황임

        Hacker News 의견

     * 미국이 전 세계와의 무역 전쟁에 돌입함에 따라 반경쟁 사례들이 이제는 미국 외 지역에서 승소할 가능성이 더 높아진다는 생각을 계속 하게 됨
          + 미국은 지난 수년간 반독점 소송 의지를 전혀 보이지 않았음, 이로 인해 많은 이들에게 심각한 피해가 발생함, 지금 반경쟁 소송을 시작하는 다른 국가들에서 문제의 부패가 있던 게 아니라, 미국의 지속적인 정치 시스템의 특징임
          + 곧 EU의 DMA로 인한 ‘브뤼셀 효과' 역시 많이 보게 될 것임
          + 앞으로는 미국만이 Apple과 Google이 압도적 우위를 휘두를 수 있는, 유일하게 공정하지 않은 생태계로 남을 수 있다는 점이 걱정임, 미국 외 시장 다수는 오히려 '공정한 플레이'를 하게 될 것임
          + 이 판결에 있어서 미국-호주 간 무역 관계가 판사 결정에 어떤 영향을 미쳤다는 주장은 신뢰하지 않음, 그리고 이 사건의 모든 다른 요소는 트럼프 재선 이전에 이미 진행 중이었음, 서방 민주국가에서 판사들은 정치와 철저히 분리된 지위임
     * ""수직적 독점도 여전히 독점""이라는 사실, 그리고 빅테크의 폐쇄적 생태계는 고객들을 고립시키는 기업 타운과 같아서 탈출이 거의 불가능하다는 점은 명백함, 이런 문제는 경쟁적인 M&A를 그냥 승인해준 덕분에 생긴 것이고, 지금은 경제 환경 변화(ZIRP 종료, AI 투자 급증)까지 겹쳐 경쟁도, 좋은 일자리도 더 사라짐, 경쟁이란 효율적임 – 더 많은 일자리와 금전 흐름이 창출됨, 하지만 기업 입장에서 모든 돈을 갖고 싶다면 경쟁은 오히려 파괴되어야 함, 그래도 IT 분야만큼은 코드로 변화를 강제할 수 있어서 과거처럼 총을 든 공권력이 필요 없다는 점에 희망을 느낌
          + 독점이라기보단 반경쟁적으로 행동한다는 게 더 심각함, 용어는 바르게 써야 함
     * 이 판결문은 아마 호주 연방법원 판결문 페이지에서 48시간 이내에 공개될 것임, 공식 사건 진행 상황 링크
          + 이 사건은 여러 비밀보장 이슈 때문에 아마 판결문이 실제로 공개되지 않을 수도 있음
     * Thiel이 이런 뉴스를 읽으면서 얼마나 분할지, 상상만 해도 기분이 좋아짐
          + 여전히 원조급 빅테크 독점 기업들이 남아 있지만, 흐름이 조금씩 바뀌는 기미가 있음
     * 전 세계적으로 이런 규제가 강화된다면 Apple이 더이상 좋은 서비스를 지역 제한하며 숨기지 않고 포기할 수도 있음
          + 아마도 Apple 같은 대기업은 법률 때문에만 변할 뿐, 자발적으로 개방하지는 않을 것이라 믿음, 고객을 경쟁사로부터 보호하려고 많은 비용도 불사함
          + 이제는 지역 제한이 아무 영향도 없을 것임, 이미 시장에 서비스에 대한 새로운 선택권이 드러났으니, 타사 제공 서비스도 허용해야 하는 상황임, 이런 '담장'은 결국 무너질 것임, Apple같은 기업들도 나중엔 결국 과태료를 물어야 할 거고, 사용자는 그 덕분에 어느 정도 보상받게 될 것임
     * 이런 불공정 행위에 대한 처벌이 단지 '중단하라' 수준에 머무르면 모두 최대한 시도하게 됨, 벌금이 기업이 감히 시도조차 두려워할 정도로 강하지 않다면 효과 없음
     * Epic은 미국에서 Apple을 상대로는 졌지만 Google 상대로는 승소함 — Google이 Android 시장에서 불법 독점 행위를 했다는 것이 판결로 인정됨, 놀라운 점임, Android에서는 써드파티 앱스토어 설치가 가능하지만, iOS는 써드파티 브라우저 설치조차 불가능함, 앱스토어나 외부 앱 설치도 막혀있음, iOS의 경우가 훨씬 심각한데도 미국 법원이 애플에게 유리하게 편향된 것 같음
          + 이 중 가장 황당한 부분은, Apple이 독점기업이 아니라는 판결 이유가 ""플랫폼을 누구와도 공유하지 않는다""임, Google 케이스에서 판사는 Android와 iOS를 비교할 수 없다고 봤고, 그 이유는 iOS가 Apple 기기에만 사용 가능하기 때문임, 결론적으로 법원이 암시하는 신호는 ""독점이 되고 싶지 않으면 플랫폼을 절대 개방하지 말라""는 것 같음
          + 내가 본 기사에 따르면, 문제는 '시장 정의'에 있음, Android는 모든 안드로이드 기기가 시장, iOS는 오직 Apple 기기만 시장으로 정의함, 결론이 마음에 들지는 않지만 그 논리 덕분에 오히려 더 개방적인 쪽이 독점 공격을 받는 현실임
          + EU가 DMA로 명확한 규칙을 제시하는 게 훨씬 더 좋은 평평한 경기장을 만드는 방법이라 여김, 판사와 기관에 맡기기보다 제도화가 효과적임, Apple이 이기고 Google이 지는 것이 점점 더 임의적으로 느껴짐
          + 현행 법하에서 '담장 내부 생태계' 자체는 불법이 아님, 법이 바뀌어야만(예: EU DSA) 이게 불법이 됨, 닌텐도, XBox, PlayStation도 오랫동안 합법적으로 운영됨, 하지만 일단 플랫폼을 '오픈'한다고 공언하고 그 '오픈'된 플랫폼에서 반경쟁적으로 통제하면, 기존 법으로도 불법임 — Google과 Microsoft 사례처럼
          + 미국 법원이 이런 현 상태를 본격적으로 해체하지는 않았지만, 도전 움직임이 꾸준함:
               o DOJ의 반독점 소송이 곧 재판에 들어감: 미국 v. Apple (2024)
               o 2021년 Epic에 내렸던 명령을 Apple이 무시했고, 2025년 다시 명령이 내려져 경쟁 결제 링크 허용을 강제하게 됨: 관련기사
               o 2020년 시작된 Open Markets Act가 다시 힘을 받는 중: 관련 기사
               o 2025년 App Store Freedom Act 도입: 입법안 전문
               o 2011년 시작된 수수료 과다 청구 집단 소송이 내년에 재판 진행: 재판 문서
               o 2025년 수수료 과다 청구 집단 소송 진행 중: Korean Publishers Association v. Apple Inc.
               o 2025년 앱 배포 독점 관련 집단 소송: Proton AG v. Apple 20250630
               o 2025년 앱 배포 독점에 대한 무능까지 문제 삼은 집단 소송: Shin v. Apple Inc.
     * 호주 연방 법원 판사가 2000페이지에 달하는 판결문에서 Apple과 Google이 시장지배력을 남용, 경쟁을 억눌렀다고 인정함, 둘 다 호주 경쟁법 46조를 위반한 셈이지만 Epic의 소비자법 위반, 비양심적 행위 주장은 기각됨, 5년씩 걸린 이유가 이제야 이해됨, Epic이 호주 iOS에 Epic Games Store를 출시할 수 있다면 그 자체로도 큰 성과임
          + 법원이 수년을 들여 수천 페이지 분량의 판결을 내리는 동안 기업들은 더 빠르게 가치를 뽑아내기 위해 수시로 전략을 바꿈, 결국 이런 속도 차이 때문에 시스템이 따라잡지 못한다는 생각임, 평범한 시민이 법을 어기면 이렇게 오래 안 걸림, 단지 '복잡성'만의 문제가 아니라 돈의 힘도 작용한다는 걸 보여줌
          + 법이 비합리적일수록 더 많은 말을 해야만 설명이 가능하다는 점, 종교 철학이랑도 비슷한 맥락임
     * 이번 판결로 실제 게임 체인저가 발생하는지 궁금했는데, 30% 수수료가 줄어들까 질문함
          + 결과적으로 아무런 변화가 없을 가능성이 높음
"
"https://news.hada.io/topic?id=22552","Show GN: Viber: Claude Code로 만든 GUI Claude Code Monitor","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: Viber: Claude Code로 만든 GUI Claude Code Monitor

     * 맥OS용 GUI 기반 클로드 코드 모니터링 & 관리 도구
     * 새로 반영되는 weekly token limit 지원
     * daily / session / project 등 다양한 단위로 시각화
     * agent, hook 등 유용한 설정 지원
     * 100% 바이브코딩으로만 제작.

   로고부터 예쁘네요 🤗

   지금 막 써봤는데 너무 좋은데요!

   한가지 질문은 brew install 했을 때, ""Moving App 'Viber.app' to '/Applications/Viber.app'"" 요런 방식으로도 많이 이용하나요? 설치하고 ""$ viber""라고 치면 당연히 실행 될줄 알았는데, 저기로 옮겨져만 있어서 살짝 당황을 했었어요.

   GUI 프로그램을 homebrew cask로 설치하는 경우 Applications 폴더로 이동되는 경우도 많습니다.
"
"https://news.hada.io/topic?id=22536","Tilf - Pixel 아트 편집기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Tilf - Pixel 아트 편집기

     * Tilf (Tiny Elf) 는 스프라이트·아이콘·소규모 2D 에셋 제작에 최적화된 PySide6 기반의 간단하지만 강력한 픽셀 아트 편집기
     * 애니메이션 기능 등은 없지만, 필수 기능에 집중하여 스프라이트와 소규모 그래픽 작업에 적합
     * 계정 등록·이메일 입력·복잡한 설치 없이 즉시 실행 가능하며, Windows·MacOS·GNU/Linux에서 동작
     * 연필·지우개·채우기·스포이드·사각형·타원 등 기본 드로잉 도구와 최대 50단계의 실행 취소/재실행, 실시간 미리보기, 다양한 포맷의 가져오기/내보내기를 지원
     * PNG(투명 포함/미포함), JPEG/JPG, BMP 포맷 내보내기와 자동 저장 기능을 제공하며, 확대(1~50배), 격자 표시, 배경색·투명도 설정 가능
     * 오픈소스(GPL v3)로 공개

   픽셀 아트 세계에서 요즘 히트를 친 게 Retro Diffusion입니다. 트위터에서 핫하고 만드신 분 (Astropulse) 도 정말 아티스트셔서 다른 사람들과는 다른 그런 각으로 모델을 만드네요.

   https://www.retrodiffusion.ai/
"
"https://news.hada.io/topic?id=22543","암스테르담의 Ritman Library가 비의서적(오컬트북)을 디지털화하여 온라인에 공개함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           암스테르담의 Ritman Library가 비의서적(오컬트북)을 디지털화하여 온라인에 공개함

     * Ritman Library가 소장한 2,178권의 Occult 서적들이 디지털화되어 온라인에서 열람 가능해짐
     * Dan Brown의 후원으로 이루어진 이번 프로젝트는 헤르메스학적 주제의 희귀 고서들을 포함함
     * 대부분 라틴어, 독일어, 네덜란드어, 프랑스어 등 여러 유럽 언어로 작성되어 있어 다양한 언어 사용자에게 유익함
     * 마법, 연금술, 천문학, 철학 등 다양한 학문과 연관된 내용이 당시의 지식 융합적 특성을 보여줌
     * 디지털 도서관은 누구나 접근할 수 있어, 지식과 역사를 폭넓게 활용 가능함


개요

     * 암스테르담의 Ritman Library에서 소장하고 있는 1900년 이전에 출판된 다양한 연금술, 점성술, 마법, 비의적 학문에 관한 고서 약 2,178권이 대중적으로 디지털화되어 공개됨
     * 이 프로젝트는 Dan Brown의 후원으로 시작되었으며, “Hermetically Open”이라는 디지털 교육 프로젝트의 일환으로 진행됨
     * 현재 Ritman Library의 온라인 열람실을 통해 누구나 해당 자료를 자유롭게 열람할 수 있음.

주요 특징 및 언어

     * 디지털화된 비의서적들은 여러 유럽 언어(라틴어가 주류, 그 외 독일어, 네덜란드어, 프랑스어)로 이루어짐
     * 사용자는 언어 필터 기능을 통해 접근이 쉬운 Cambridge, London 등에서 출간된, 영어로 된 자료를 찾을 수 있음
     * 도서들은 주로 알케미, 점성술, 신비주의, 철학적 논의, 의학 절차 등 폭넓은 내용을 담고 있음
     * 문체와 표기는 현대에 비해 다양하고 특이한 표현(예: long s, 고어적 맞춤법)이 많음

내용적 특성

     * 이 도서들에는 식물, 동물, 천체와의 마법적 상관관계 추적, 이름 분석, 점성술, 언어학적 어원 탐구, 수비학적 논의, 철학적 시, 초기 심리학, 성격 분류, 암호화된 신화 및 의학 지식 등이 포함됨
     * 대중 매체에서 흔히 접하는 ‘마법책=레시피북’이라는 인상과는 달리, 실제로는 더욱 복잡하고 통합적 지식 집합
     * Aleister Crowley, Madame Blavatsky와 같은 해석자들의 영향을 받은 독자는 다양한 포멀라(정식, 도식)를 인지할 수 있음
     * 유럽 근대 이전에는 신학, 철학, 의학, 자연과학 등 여러 분야와 비의학, 연금술 사이 구분이 뚜렷하지 않았음
     * 예시로 Isaac Newton 또한 수학자, 과학자, 알케미스트로서 다양한 분야를 넘나든 활동을 펼쳤음

활용과 의의

     * 이번 프로젝트로 인해 오랜 세월 책장 구석에 머물던 중요한 고서들이 누구나 이용 가능한 디지털 자산이 됨
     * 유럽 지성사, 신비주의, 고전과 현대 지식 사이 연관성 연구에 매우 유용함
     * Ritman Library 디지털 컬렉션은 철학, 신학, 자연과학, 비의학의 경계를 넘나드는 풍부한 자료를 한눈에 살펴볼 수 있게 해줌

참고 자료

     * 비의적 녹음 아카이브, 18세기 흑마술 안내서, Isaac Newton의 연금술 레시피, Aleister Crowley의 녹음 및 그림 등 Open Culture에서 추가로 확인 가능함

        Hacker News 의견

     * 시작하기 좋은 자료로는 Cornelis Agrippa의 “Three Books on Occult Philosophy” 추천
       Agrippa는 법률가이자 여성주의적 성향이 강했으며, 유럽 전역에서 마녀로 몰린 여성들을 변호한 인물
       ""Three Books""는 ‘오컬트’라는 명칭의 시초이기도 함
       내가 개인적으로 더 좋아하는 인물은 Marsilio Ficino임. 피치노의 동상이 도서관 입구에 있을 정도
       피치노는 Cosimo Medici(현대 은행업의 창시자격 인물)에게 고용되어 플라톤과 동로마제국 붕괴 후 유입된 신비주의 서적들을 번역한 사람
       1497년 “De Mysteriis”를 출판했는데, 이 책에서는 신, 악마, 영웅, 영혼에 대한 신플라톤주의적 이해를 다룸—이 중에서 신과 악마, 심지어 영혼(‘신적 존재 중 가장 낮은 계층’)조차 감각을 가지지 않는다고 주장함.
       참고로, 이 아이디어는 “K Pop Demon Hunters”라는 작품에도 언급됨
       거기서도 악마가 느낄 수 있는 존재인지, 아니면 오로지 ‘감정 덩어리’인지에 대해 토론함
       고대 피타고라스 전통에서는 의식이나 감각은 비물질적 영혼과 물질적 육체의 상호작용에서 발생한다고 봄
       이 ‘세 개의 세계’ 아이디어는 Roger Penrose의 “Road to Reality”에서도 등장함
       물질 세계가 의식 세계를 만들고, 의식이 수학 등 아이디어의 세계를 만들며, 이게 다시 물질 세계를 만든다는 설명임
       결국, 아직 발견되지 않은 오래된 지혜와 아이디어가 무궁무진하다는 점을 잊지 말아야 함
       모든 책이 학자들에 의해 완전히 읽힌 것은 결코 아님
       아마도 AI의 도움이 필요할 수 있음
          + 피타고라스의 “감각 또는 의식은 비물질적 영혼과 물질적 신체의 상호작용에서 발생한다”는 전통이 Roger Penrose의 “Road to Reality”에서도 “세 세계” 이론으로 반복됨
            페넬로즈는 물질 세계→의식 세계→아이디어 세계(수학 포함)→물질 세계의 구조를 설명함
            이와 유사한 개념이 헤르메틱 카발라에서는 “네 개의 세계”로 나타남:
            행동/물질 세계, 심리/사고/감정/자아의식의 세계, 창조성의 세계, 원형 추상의 세계
            헤르메틱적 영향은 “영혼/마음”이라 불리는 세 비물질 세계가 물질적 신체와 동등하거나 최소한 얽혀 있다고 주장
            즉, “위에서와 같이 아래에서도, 아래에서와 같이 위에서도”란 식의 상호 연결
            20세기 해당 주제 참고서적으로는
            The Three Initiates의 “The Kybalion”, Dion Fortune의 “Mystical Qabalah”, Crowley의 “Liber 777”
            그리고 더 읽기 쉬워진 Eshelman의 “Liber 776 1/2” 등을 추천
            Israel Regardie의 “The One Year Manual”, “The Middle Pillar” 역시 오컬트 연구를 심리·치유 언어로 적용하는 데 유용함
            단어의 의미를 정확히 파악하는 것이 굉장히 중요함
          + Penrose의 주장을 설명한 부분이 내가 최근 시청한 William Lane Craig와의 대화 팟캐스트 내용과는 맞지 않는 것 같음
            실제로 Penrose는 아이디어의 세계가 1차적이라고 명확히 밝힘
            Craig는 의식이 1차적이라 보지만 Penrose는 그렇지 않음
            관심 있다면 Penrose의 “세 세계” 개념을 다룬 이 영상을 참고하면 좋겠음 YouTube 링크
          + 실물 책 추천을 묻는다면, 최근 Eric Purdue가 번역한 판본이 연구와 주석이 매우 탄탄함. Amazon 링크
          + “학자들이 이런 책들 모두 읽었을 거라고 착각하지 말라”는 말에 대해, Umberto Eco라면 그랬을 수 있음
          + 혹시 실물로 읽고 싶은 사람에게 최신 Eric Purdue 번역판이 아주 잘 조사되고 주석도 많아서 추천함. Amazon 링크
          + 실물 책으로 읽고 싶은데 추천할 만한 판본이 있는지 궁금함. 생각보다 여러 종류가 떠돌아다님
     * 이거 소설이나 공포 영화 소재로 써도 재밌을 것 같음. ""앗, 실수로 GPT6를 Necronomicon에 학습시켜버렸어!""라는 느낌
          + 이미 Nous Research라는 곳에서 오컬트 특화 모델을 훈련시킨 적 있음 X 링크
          + 장난처럼 들리지만, 사실 이전에 Buffy the Vampire Slayer에도 꽤 비슷한 에피소드가 있었음
          + 약간은 합리주의자들이 ‘악마’라는 개념을 인용하다가 실제로 오컬트가 실재한다고 믿게 되는 이야기를 연상시킴 Hacker News 링크
          + Terry Pratchett가 만약 마법이 깃든 전자책을 어떻게 다뤘을지 궁금함. Discworld에서 Unseen University 도서관에서 벌어진 일들이 내게는 항상 가장 인상적이고 즐거운 요소였음
     * 나의 젊은 시절, 독일의 옛 도서관을 돌아다니며 Paracelsus의 작품을 마이크로필름으로 수집한 경험이 있음
       이런 자료가 온라인에서 접근이 가능해지면, 화학, 금속공학, 물리학 초기 연구사 연구가 완전히 달라질 수 있음
       ‘오컬트 철학’은 중세 사회가 자연 세계를 이해하기 위해 썼던 프레임일 뿐임
          + 정말 흥미로운 경험임. 혹시 당신은 그 작업을 풀타임으로 했음? 무엇을 얻었는지 궁금함
     * 이런 자료들로 새로운 Gemma 3 270M 모델을 파인튜닝하는 것이 합리적인 선택인지 궁금함
          + 오컬트 서적의 절반 정도는 마법과 비관련 이야기를 담고 있음.
            나머지 절반은 물질 중심 개념 뒤에 철학과 영성을 숨기고 있음(예시로는 프리메이슨)
            이런 책들은 LLM에 쓸모 없거나 오히려 해로울 수 있다고 생각함
     * 오컬트 서적의 예술적 미감을 매우 좋아함
       하지만 이런 책에서 숨겨진 보석 같은 예술작품이나 흥미로운 이미지를 직접 찾아내는 작업은 정말 번거로움
       적어도 표지 페이지가 보이는 리스트만 스크롤해도 멋진 디자인들을 볼 수 있는데, 대부분의 텍스트는 내가 읽을 수 없는 언어라 충분히 감상하기 힘듦
       이런 작업엔 agentic AI가 책을 탐색하면서 첫 페이지 너머 숨겨진 예술작품을 찾아주는 게 딱 맞는 사용 사례 같음
       연금술에 관심을 가지며 관련 심볼과 인장도 공부했으나, 결국 시대와 분류를 막론하고 흥미로운 자료만 잘 보존돼 있고, 미적 가치가 떨어지는 자료들은 자연스럽게 도태된다는 사실을 알게 됨
       유니코드에도 연금술 심볼이 따로 있는데, 그 또한 가장 뛰어난 것들만 추린 결과임
       특히 U+1F756, ‘말똥의 연금술 기호’ 🝖에 감탄함
       주요 뉴스 미디어에서 아티스트가 직접 대표 이미지를 그릴 때, 나는 항상 각 디자인의 결정 이유와 상징성을 곱씹음
       최고의 미디어는 대표 이미지로 기사 전체의 분위기와 메시지를 완벽히 드러냄
       Atlantic은 창조성이 돋보이고,** The Economist는 가장 독특한 표지 디자인**을 뽑음
       하지만 이런 세밀한 예술 요소들이 대중적으로는 거의 언급되지 않는데, 그래서 오히려 대놓고 숨어 있는 오컬트적 감흥을 준다고 생각함
       이런 책 표지의 아트워크도 그와 비슷함. 저자들이 전달하고 싶었던 암시와 메시지에 대한 초대장을 받은 느낌임
          + 내 친구 중 한 명은 연금술 심볼 일부를 집 주방의 라벨로 이용함. 실제로 쓸 수 있는 심볼은 많지 않지만, 오일, 소금, 식초, 설탕, 베이킹 소다 등 기초 재료에는 대부분 심볼이 있어서 매우 재미있다고 생각함
     * 내가 주기적으로 열고 있는 친구 독서 모임에서 본문에서 언급된 자료들과 같은 리스트를 유지 중임. 혹시 읽을만한 자료를 추천해주면 정말 고마울 것 같음 북클럽 자료 링크
     * 내 사이트에서 금지된 영역에 접근하는 AI 크롤러에게 입력해주고 싶은 훌륭한 자료처럼 보임
     * 관련이 약간 있지만, 유튜브에서 추천받은 이 영상을 우연히 봤는데 시청자 수도 적었음. 지금은 시리즈로 발전했고, 인터페이스와 오컬트적 요소를 연결시켜서 정말 흥미롭게 즐겼음 유튜브 링크
          + 아직 안 들어봤다면 futureofcoding.org 추천함. Liber Indigo를 봤을 때 이 커뮤니티의 문제 접근 방식(컴퓨팅의 미래, 에소테릭/혁신적 인터페이스 등)에 대한 멋진 입문 자료라고 느꼈음
          + 정말 좋음. Thelemic 마법 쪽으로 한참 파고들고 있는데 이 영상은 다시금 이해 가능한 세계로 나를 돌려보내주는 느낌임
     * 매우 멋지다고 생각하지만 다운로드 방법이 보이지 않음. 지금은 ChatGPT Agent Mode로 라틴어 텍스트를 번역 중이지만 꽤 지루한 과정임
          + 이런 책들은 과거에 누군가가 생활비를 벌기 위한 작전의 도구였을 것이라 짐작함. 지금은 그 맥락이 사라졌음. 유명한 로마인과 그리스인의 이름을 적용해 권위를 높였던 방식도 흥미로움. Influence에서 Cialdini가 설명했던 설득 기법들도 아마 많이 사용하지 않았을까 싶음
"
"https://news.hada.io/topic?id=22527",""AI 붐"은 "AI 버블"로 변하고 있는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ""AI 붐""은 ""AI 버블""로 변하고 있는가?

     * Nvidia가 사상 최고가를 기록하며 시가총액 4.4조 달러로 세계 1위 기업이 되었고, AI 붐이 과거 닷컴 버블과 비교되고 있음
     * Goldman Sachs는 현재 기술주 상승이 강력한 실적에 기반해 버블이 아니라고 분석했지만, 최근 일부 종목은 1990년대 말과 유사한 과열 신호를 보임
     * Palantir의 고평가와 Figma IPO 급등은 닷컴 시대를 연상시키며, 다수의 AI 유니콘 기업들이 상장 대기 중임
     * 투자자 흥분, IPO 시장 활성화, 완화적 정책 등 버블의 4대 조건이 형성되고 있으나, 오늘날 AI 시장은 소수 빅테크 중심의 독점 구조임
     * 장기적으로는 Nvidia-Cisco 비교처럼 고성장 기업도 급락 가능성이 있으며, 시장은 결국 기업의 현금흐름을 평가한다는 교훈을 상기시킴


Nvidia와 AI 시장의 현재

     * 2025년 8월, Nvidia CEO Jensen Huang이 백악관에서 도널드 트럼프와 회동 후, 미국 내 생산 확대 계획과 반도체 관세 면제 소식이 전해짐
          + 이 발표 직후 Nvidia 주가는 사상 최고치를 경신
          + 시가총액 4.4조 달러로 Microsoft를 제치고 세계 1위 기업이 됨
     * 이는 생성형 AI 모델 학습에 필요한 GPU 수요 급증과 맞물려 AI 호황의 상징적 사건으로 평가됨
     * AI 붐이 닷컴 버블과 유사한 경로를 걷는지에 대한 월가 논쟁 확대

Goldman Sachs 분석

     * 보고서: “25 Years On; Lessons from the Bursting of the Technology Bubble”
     * 2020~2025년 나스닥 지수는 2배 상승, P/E 비율 증가했으나 2000년의 150배 수준엔 못 미침
     * ‘매그니피센트 7’ (Alphabet, Amazon, Apple, Meta, Microsoft, Nvidia, Tesla)의 실적이 강력해 버블 가능성 낮다고 평가
     * 예: 2022~2025년 Nvidia 매출 5배, 세후 이익 10배 증가
     * 그러나 최근 투자자들의 FOMO와 추종 매매가 과거 닷컴 시절을 연상시키는 수준으로 증가

과열 신호

     * Palantir: 최근 실적 발표 후 시가총액이 지난 12개월 이익의 600배, 매출의 130배 수준
     * Figma IPO: 공모가 $33 → 상장 첫날 종가 $115.50(250% 상승), 이후 $80 미만으로 하락했으나 여전히 2배 이상
     * 이러한 성공사례가 유니콘 AI 기업들의 상장 유인을 강화
          + IPO 대기 AI 기업: OpenAI, Anthropic, Cohere, Databricks, SymphonyAI, Waymo, Scale AI, Perplexity 등

버블 조건 형성과 정책 환경

     * 버블형성의 4대 조건:
       1. 혁신 기술에 대한 투자자 기대
       2. IPO 수수료를 노리는 투자은행
       3. 초기 단계 자금 조달 용이성
       4. 완화적 정부·금융 정책
     * 트럼프 행정부의 AI Action Plan은 규제 완화와 주(州) 단위 규제 억제를 목표로 함
     * 연준의 금리 인하 가능성은 시장에 추가 상승 압력을 줄 수 있음

AI 시장 구조와 장기 전망

     * 현재 AI 경제는 Big Tech 중심의 독점 구조로, 대규모 모델 구축과 유지가 가능한 대기업이 주도
     * 스타트업의 시장 진입 장벽이 높아, 과거 닷컴 시절처럼 폭넓은 기업 성장보다는 소수 대기업의 이익 집중 가능성
     * 반독점 정책이 이를 완화할 수 있으나, 정치적 로비로 인해 추진이 약화될 위험 존재

Nvidia-Cisco 비교와 투자 리스크

     * 1998~99년 Cisco Systems는 인터넷 인프라 필수 장비 공급사로 주가가 폭등했으나, 2000년 40% 하락 후 1년 만에 80% 폭락
     * Nvidia의 GPU가 현재 AI 인프라의 핵심이라는 점에서 유사성이 지적됨
     * 벤저민 그레이엄의 격언처럼, 단기적으로 주식시장은 ‘투표기계’지만 장기적으로는 ‘저울’ 역할을 함 : ""현금흐름이 기업 가치를 결정""
     * Nvidia 주가는 비교 분석 이후에도 150% 추가 상승, 단기 과열과 장기 리스크가 공존하는 상황

   실리콘 밸리 내부적으로는 아직 Google/NVIDIA 좀 롱 보고 있는 것 같아요. 상한선을 도달하기는 한참 멀지 않았나 싶습니다.

        Hacker News 의견

     * 전 세계 팬데믹, 우크라이나 전쟁, 고금리, 관세, 그리고 지금의 AI까지… 매번 주식시장을 무너뜨릴 거라는 예측이 있었음
          + 언젠가는 맞는 예측이 나올 거라 생각하지만, 언제 어떤 이유로일지는 아무도 모름
          + 그래서 나는 분산 투자와 합리적인 대비를 하되, 매번 새로운 위기 예측에 휘둘리는 건 좋은 전략이 아니라고 봄
          + 자산 보유층이 시스템을 완전히 장악해 어떤 상황에서도 손실을 보지 않도록 조치된다고 해석할 수도 있음
               o 예를 들어 SV Bank 사태 때 예금자 보호 규정이 사후적으로 바뀌어 손실을 메꿔준 사례가 있었음
          + 팬데믹 이후로는 주식시장이나 버블에 대한 예측을 아예 멈췄음
               o 지금은 허상 속에 살고 있는 것 같고, 이 꿈이 끝날 때는 파국적일 거라 생각하지만 내가 살아서 볼 수 있을지는 모르겠음
          + 과거 사례를 보면 일부 사건은 실제로 시장에 큰 하락을 가져왔지만, 연준 개입 덕분에 장기 침체는 피했음
               o 다만 이런 개입이 계속되면 분산 포트폴리오의 실질 수익률이 점점 줄어드는 문제가 있음
               o 그래서 사모펀드가 주택 매입 후 임대료 인상 같은 대체 수익원을 찾는 것 같음
          + 금리가 1% 미만에서 4.5%까지 올랐는데도 기업 가치가 떨어지지 않은 건 이상함
               o 인플레이션이 여전히 높은 상황에서 금리를 낮추기 어렵고, 일부 기업은 실적 대비 과대평가된 상태임
               o 상업용 부동산도 여전히 고평가됐다고 보고, 이런 상황에서 아직 폭락이 없는 게 오히려 기적 같음
          + 부자들은 부자이고, 그 돈은 어딘가에 투자되어야 함
     * AI 시장은 이미 버블 상태라고 생각함
          + 차라리 헤지펀드가 있다면 AI 기업 공매도에 쓰고 싶음
     * AI는 나에게 필요한 걸 찾고 이해하고 실행하는 데 도움을 주고 있음
          + 일부 스타트업은 성공할 것이고, 나머지는 시장에서 사라질 것 같음
          + 하지만 .com 버블 때 Amazon 사례처럼, 승자를 알아도 시기나 가격이 맞지 않으면 손실을 볼 수 있음
          + 실제로 이전에는 불가능했던 혁신 사례가 있다면 공유해줬으면 함
     * 이번 버블은 스스로 꺼지지 않을 수도 있다는 불안감이 있음
          + 코로나 이후 불평등이 심해지고, 초부유층이 중산층 자산을 흡수해 AI 기업에 투자하고 있음
          + 목표는 사람을 대체해 임금을 안 주는 구조를 만드는 것 같음
          + AI 성능이 완벽하지 않아도 경쟁이 적어 이 흐름이 계속될 수 있음
          + 최근 본 자료에 따르면 AI 데이터센터 투자가 GDP에서 소비지출을 넘어섰음
               o 소비지출이 GDP의 2/3를 차지하는 게 일반적인데, 이런 속도는 지속 불가능해 보임
               o 투자 대비 수익이 실제 기업에 돌아올지도 불확실함
          + 음모론적으로는, 2008년처럼 정치적으로 타이밍을 맞춘 버블 붕괴 가능성도 생각해볼 수 있음
     * ""과거 5번의 시장 붕괴 중 9번을 예측했다""는 농담 같은 말이 있음
          + 하지만 시장이 대다수의 예측을 믿었다면, 그 붕괴는 일어나지 않았을 것임
     * AI가 옳든 버블이든, 일부는 거품일 수밖에 없음
          + 하지만 단기적 과열이 기술 자체나 변화 속도를 부정하는 건 아님
          + 닷컴 버블이 웹 기술을 나쁘게 만든 건 아니었음
          + 지난 버블에서도 FAANG 같은 거대 기업이 탄생했고, 약속했던 기술을 현실로 만들었음
               o 이번에도 많은 VC 자금 스타트업은 망하겠지만, 대기업은 기술을 흡수해 상상 못한 방식으로 보편화시킬 것임
     * 지금의 AI는 과대평가됐다고 봄
          + 실제 유용성은 주장 대비 20% 수준이고, 결국 이미지와 텍스트 생성뿐임
          + 이미 우리는 평생 소비해도 남을 만큼의 이미지와 텍스트를 갖고 있었음
          + 코드의 진짜 가치는 그걸 유지하는 사람이 있다는 점인데, 그게 사라지면 가치가 불안정해짐
          + LLM이 만든 텍스트가 사람 생각의 메아리가 아니라, 사람 머릿속이 LLM 출력의 메아리로 채워질 위험이 있음
     * AI 버블 얘기는 최소 10년 전부터 있었음
          + 발전 속도가 멈추면 버블이 꺼질 수 있지만, 매년 새로운 판이 열리는 것 같음
          + LLM이 자율적으로 주식시장을 운용하기 시작하면 그때 걱정해야 함
               o ""ChatGPT가 뉴스에 나온 지 10년 됐나?"" 싶은 농담도 나옴
"
"https://news.hada.io/topic?id=22581","AI-powered Workforce 구축을 위한 GitHub의 내부 플레이북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AI-powered Workforce 구축을 위한 GitHub의 내부 플레이북

     * GitHub은 사람 중심 접근법으로 AI 도입을 확산시키며 전사적 AI 역량을 구축함
     * AI 채택은 기술 문제가 아니라 변화 관리 문제로, 단순히 툴을 배포하는 것이 아니라 조직의 업무 방식을 재구성하는 일
     * 성공을 위해 GitHub은 8가지 기둥(AI 옹호자, 명확한 정책, 학습 기회, 데이터 기반 측정, 책임자 지정, 경영진 지원, 적합한 툴, 실천 공동체)을 기반으로 한 운영 모델을 작성
     * 또한 경영진의 적극적인 비전 공유, 명확한 사용 가이드라인, 자발적 옹호자 네트워크, 실천 공동체(CoP), 체계적 학습 경로, 전담 리더십, ROI를 증명할 수 있는 측정 체계를 수립
     * 이 전략은 단순 채택을 넘어 업무 혁신·생산성 향상·인재 성장을 이끄는 구조적 접근임을 보여줌


서론: 기회와 핵심 과제

     * 생성형 AI는 기업 성과 가속을 위한 거대한 기회이며, 경쟁적으로 가치를 확보하려는 레이스가 진행 중
     * 과제는 AI의 잠재력 인지가 아니라 스케일에서의 활성화이며, 여기서 성공 여부가 갈림
     * 많은 조직이 AI 툴에 과투자하지만 채택이 소수 열성 사용자에 국한되어 전사 생산성으로 전환되지 못하는 손실이 발생함
     * 고성과 조직과 정체 조직의 차이는 의도적이고 체계적인 활성화 전략 보유 여부

실패를 부르는 오해: 기술 배포가 아닌 변화 관리

     * 기업들은 AI 도입을 소프트웨어 설치처럼 다루지만, 실제로는 업무 방식 재배선이라는 변화 관리 과제
     * 성공과 실패를 가르는 것은 라이선스 구매가 아니라 회의적 구성원을 파워 유저로 전환시키는 인적 인프라 구축

문서의 성격: GitHub 내부 플레이북

     * 본 문서는 GitHub이 글로벌 워크포스에 AI 유창성을 구축하기 위해 개발·운영한 내부 플레이북
     * AI for Everyone 이니셔티브의 산출로, 이론이 아닌 현장 검증된 실천 블루프린트를 제공함
     * 목표는 AI를 일하는 방식에 내재화하는 체계를 타 조직도 복제 가능하게 하는 것

운영 모델 개요: 상호 보완적 시스템

     * 성공적 AI 활성화는 단일 이니셔티브가 아닌 상호 보완 컴포넌트의 총합으로 설계
     * 톱다운 전략과 그라스루츠 모멘텀을 정교하게 혼합하여 AI 유창성이 번성하는 생태계를 조성
     * 생태계의 토대는 경영진의 가시적 후원과 명확한 정책·가드레일
          + 리더십 스폰서는 비전과 투자로 시작점을 마련
          + 정책·가드레일은 직원들이 안전하게 실험·혁신할 수 있는 환경을 제공

여덟 가지 기둥(8 Pillars): 정의와 역할

     * AI Advocates: 사내 자원봉사 챔피언 네트워크로, 피어 영향력과 현장 피드백을 통해 채택을 확산하는 역할
     * Clear policies and guardrails: 누구나 이해 가능한 간명한 규칙과 가이드라인으로 책임 있는 사용을 뒷받침
     * Learning and development opportunities: 우수 외부 콘텐츠를 큐레이션한 접근성 높은 학습 생태계를 제공
     * Data-driven metrics: 다단계 측정 프레임워크로 채택·활성도·비즈니스 임팩트를 추적
     * Dedicated responsible individual (DRI): 프로그램을 오케스트레이션하고 타인을 활성화하며 전체 전략을 추진하는 중앙 책임자
     * Executive support: 가시적 리더십 커밋으로 비전·투자·투명 커뮤니케이션을 제공
     * Right-fit tooling: 다양한 역할·유스케이스에 맞춘 검증된 1·3자 툴 포트폴리오를 제공
     * Communities of practice (CoPs): 피어 학습·지식 공유·문제 해결을 위한 전용 포럼을 운영

실행 포커스: 세 가지 연결 요소

     * 1) 팀 장비 + 인간 지원 체계 구축: 검증된 AI 툴을 지급하고, Advocates 프로그램으로 내부 챔피언을 육성하며, CoPs로 피어 학습을 상시화함
     * 2) 구조화된 L&D로 증폭: 표준화된 학습 경로와 큐레이션으로 기술·업무 역량을 체계적으로 상승시킴
     * 3) DRI와 데이터로 운영: DRI가 투자 결정을 주도하고 데이터 기반 지표로 임팩트를 측정·개선하여 프로그램을 지속 진화시킴

Put the framework into action

     * AI 활용 프레임워크는 단순히 핵심 요소를 이해하는 데서 끝나지 않고, 이를 실제로 실행하는 전략적 접근이 필요함
     * GitHub은 여덟 가지 기둥(pillars)을 중심으로 실행 로드맵을 제시하며, 그중 첫 출발점은 경영진의 지원(Executive support)
     * 경영진이 명확한 비전과 이유를 제시하고, AI가 직원들의 업무에 어떤 가치를 더하는지 구체적으로 설명해야 초기 동력을 확보할 수 있음

Executive support: How to set the tone

     * AI 도입 성공은 경영진의 역할에서 시작됨
     * 단순히 툴을 제공하는 것을 넘어, 회사의 AI 전략의 ""왜(why)""를 지속적으로 강조해야 함
     * 목표를 추상적으로 제시하는 대신 직원들의 일상 업무와 직접 연결된 실질적 이점으로 설명해야 참여도를 끌어올릴 수 있음
     * 엔지니어 대상 메시지 예시:
       “AI를 통해 반복적이고 지루한 작업을 제거합니다. Copilot이 보일러플레이트 코드 작성, 단위 테스트 생성, 복잡한 PR 요약을 대신하므로 여러분은 창의적인 문제 해결에 집중할 수 있습니다.”
     * 전사 대상 메시지 예시:
       “AI 전략의 목표는 더 나은 제품을 더 빠르게 고객에게 제공하는 것입니다. AI로 우리의 역량을 증폭시켜 혁신 속도를 높이고, 고부가가치의 창의적 업무에 집중할 수 있습니다.”

현실적이고 투명한 접근

     * AI 도입은 필연적으로 업무 자동화와 직무 변화를 수반함
     * 이를 무시하면 불안과 저항이 생기고 채택을 가로막음
     * 따라서 리더는 단순한 안심 발언 대신 역할 변화와 재교육(upskilling) 전략을 구체적으로 제시해야 함

     * 하지 말아야 할 말: “여러분의 일자리는 안전합니다.”
     * 해야 할 말: “앞으로 우리의 일이 이렇게 바뀔 것이고, 그에 필요한 새로운 기술을 익히도록 이렇게 지원하겠습니다.”

     * 이런 솔직한 접근은 직원들을 변화의 파트너로 대우함으로써 신뢰를 구축함

맞춤형 메시지 전략

   AI 메시지는 대상별 맞춤화가 필요함
     * 관리자(Managers):
       단순한 개인 활용이 아니라 팀 전체를 이끌 준비를 시켜야 함. 관리자는 팀 워크플로우를 재설계하고, 자동화 가능한 업무를 식별하며, 고부가가치 업무를 재정의하는 역할을 맡아야 함. AI 도입을 팀 성과 및 혁신 개선과 직접 연결시키도록 장려해야 함.
     * 시니어급 개인 기여자(Senior ICs):
       개인 성과 향상뿐 아니라 AI 활용의 내부 설계자가 되도록 도전해야 함. 이들은 조직 내 영향력이 크므로 새로운 AI 활용 방식을 도입·표준화하는 데 중요한 역할을 함. AI로 자신의 성과를 극대화하는 동시에 내부 멘토로서 AI 역량을 확산시켜야 함. 이를 통해 핵심 인재의 영향력이 기하급수적으로 확장됨.

Policies and tooling: Providing clarity and access

     * AI를 조직 전반에 도입하려면 명확한 가드레일(guardrails) 이 필수적임
     * 직원들이 무엇이 허용되는지 불확실하면 실험조차 하지 않으므로, 명확하고 접근하기 쉬운 허용 사용 정책(Acceptable Use Policy) 이 성공의 선결 조건
     * 이는 단순히 컴플라이언스 문제가 아니라, 직원들이 안전하고 자신감 있게 AI를 활용할 수 있도록 하는 기반
     * 정책 수립의 원칙
          + 정책은 IT, HR, 보안, 법무 등 주요 이해관계자와의 협력을 통해 만들어져야 함
          + 이렇게 해야 위험 관리 측면에서 포괄적 접근이 가능해짐
          + 최종 정책은 중앙화된 단일 문서로 제공되어야 하며, 여기에는 승인된 모든 AI 도구와 각 도구에 적합한 데이터 유형이 명확히 정리되어 있어야 함
     * 계층형 툴링(Tiered tooling) 모델
          + 성공적인 AI 사용 정책 모델은 계층형 접근 방식
          + 단순히 금지사항 목록을 나열하는 대신, 어떤 것이 승인되었는지 명확히 구분해 직원들이 쉽게 의사결정을 내릴 수 있도록 하는 것
     * Tier 1: 완전히 검증·승인된 도구
          + 내부 보안 및 법무 검토를 철저히 거친 도구
          + 기밀 회사 데이터 및 고객 데이터를 다루는 데 안전함
          + 회사 자체 1st-party 제품(예: GitHub Copilot)과, 계약·승인된 엔터프라이즈급 3rd-party 도구 포함
          + 직원은 이 범주에 속하는 도구를 안전한 기본 선택지로 인식할 수 있음
     * Tier 2: 미검증 공용·소비자용 도구
          + 회사가 공식적으로 계약하거나 검증하지 않은 공개 AI 도구 전반 포함
          + 정책은 간단하고 보편적임: 이 도구들은 공개적이고 민감하지 않은 데이터에만 사용 가능
          + 이를 통해 직원들이 회사 데이터를 위험에 빠뜨리지 않으면서 새로운 AI 기술을 자유롭게 실험 가능
     * 효과와 메시지
          + 이 계층형 모델은 직원들에게 단순하고 명확한 사고방식을 제공함:
               o “만약 어떤 도구가 ‘완전 검증 리스트’에 없다면, 공개 데이터만 사용하라.”
          + 이처럼 명확한 기본 규칙은 불확실성을 제거하고, 책임 있는 AI 활용을 대규모로 확산시키는 핵심 열쇠가 됨

AI advocates: Your grassroots champions

     * AI 채택을 장기적으로 성공시키려면 경영진의 지원과 명확한 정책뿐만 아니라, 동료 간 영향력(peer-to-peer influence) 이 핵심 동력이 됨
     * 이를 위해 AI Advocates 프로그램은 매우 효과적인 메커니즘으로, 자발적인 내부 챔피언 네트워크를 구축해 개별 팀과 중앙 지원 프로그램을 연결하는 다리 역할을 함
     * Advocates는 상위 전략을 팀 단위의 구체적 활용 사례로 번역하여, 자연스럽게 조직 내 AI 모멘텀을 형성함

     * 네트워크를 구축하는 가장 효과적인 방법은 자원자 모집임
     * 복잡한 공식 추천 절차보다는 전사 공지를 통해 AI에 열정을 가진 사람을 모집하면, 스스로 동기부여가 되어 있고 동료 성공을 진심으로 돕고 싶어 하는 적합한 사람들이 모임
     * 이는 곧 신뢰할 수 있는 강력한 내부 챔피언으로 이어짐

     * What advocates do
          + Advocates의 역할은 다층적이며, 내부 전문가, 커뮤니티 빌더, 피드백 채널이라는 세 가지 주요 기능을 수행함
          + 내부 챔피언 역할
            각 팀의 AI 전문가로서 동료의 멘토가 되고, 일상적 질문에 답하며 실무적 장벽을 해소해 AI 도입 장벽을 낮춤
          + 동료 학습 촉진
            AI의 가치를 구체적이고 현실적인 사례로 보여줌. 팀 내 성공 사례를 공유해 동료에게 AI의 실질적 효과를 체감하게 하며, 이는 형식적 교육보다 더 큰 설득력을 가짐
          + 팀의 목소리 대변
            중앙 프로그램과 현장의 피드백 루프를 형성해, 무엇이 잘 작동하는지, 무엇이 문제인지, 어떤 기회가 있는지를 전달함. 이를 통해 프로그램은 실제 사용자 니즈 기반으로 지속 개선 가능
          + 교육 기획·협업
            팀의 구체적 요구와 사용 사례를 반영해 중앙 프로그램과 협업, 실질적 효과가 있는 맞춤형 교육 세션을 공동 기획·리드함
     * Supporting your advocates
          + Advocates 프로그램이 성공하려면 중앙 지원팀의 실질적이고 가치 있는 지원이 필요함. 핵심 지원 방식은 다음과 같음.
          + 자생적 Advocate 커뮤니티 육성
            전용 Slack 채널 같은 소통 공간을 마련하고, 정기적인 advocate 주도 체크인을 지원해 서로의 모범 사례를 공유하고 문제를 해결하는 자가 관리형 네트워크로 성장시킴
          + 리더십과의 직접 연결
            Advocates가 DRI(Directly Responsible Individual)나 프로그램 스폰서 같은 리더십 대표와 직접 연결될 수 있도록 하여, 경영진의 의사결정과 현장의 활동을 잇는 창구를 제공함
          + Train the Trainer 철학
            Advocates를 단순한 정보 수신자가 아니라, 멘토와 워크숍 리더로 성장시키는 데 집중함. 이들을 효과적인 교육자이자 AI 주제 전문가로 육성해 중앙 프로그램의 확장된 연장선으로 만듦
          + 이러한 지원을 통해 Advocates는 조직 내에서 신뢰받는 AI 리더로 자리매김하며, 자연스럽게 AI 활용 능력을 조직 전반에 확산시킴

Communities of practice: Fostering collaboration

     * Advocates 프로그램이 개별 팀에 깊이 관여하는 고밀도(high-touch) 지원을 제공한다면, 조직 전체의 AI 활용 능력(AI fluency)을 확산시키려면 더 넓은 차원의 협업 장이 필요함
     * 이때 실천 공동체(Communities of Practice, CoPs) 가 중요한 역할을 하며, 직원들이 자유롭게 연결되어 질문하고 지식을 나눌 수 있는 전용 공간을 제공
     * CoPs는 성공적인 AI 활성화 프로그램의 결합 조직(connective tissue) 으로 작동해 사일로를 허물고, 귀중한 인사이트가 개별 대화 속에서 사라지지 않도록 보장

     * 또 다른 목표는 자발적 AI 관심을 구조화하되, 창의성을 억누르지 않는 것
     * 대부분의 기업에는 이미 산발적으로 운영되는 채팅 채널이나 이메일 스레드 형태의 작은 AI 커뮤니티가 존재함
     * 효과적인 프로그램은 이러한 흩어진 활동을 체계적이고 응집력 있는 네트워크로 발전시킴. 이를 위해 필요한 핵심 단계는 다음과 같음
          + Establishing dedicated, purpose-driven communities
               o 하나의 거대한 AI 채널 대신, 목적별·사용자 그룹별 전용 커뮤니티를 만드는 것이 효과적임
               o 이렇게 하면 대화가 더 집중적이고 관련성 있게 진행될 수 있음
               o 추천되는 초기 구성을 예로 들면:
                    # 일반용 커뮤니티: 전사적 공지 및 비기술적 질문을 다루는 채널 (예: #how-do-i-ai)
                    # 개발자 전용 커뮤니티: 기술적 사례 공유, 심층 토론, 고급 기법 교류를 위한 채널 (예: #copilot-users)
                    # 부서 특화 커뮤니티: 마케팅, 세일즈, 재무 등 특정 직무의 고유한 활용 사례를 다루는 채널 (예: #ai-for-sales)
          + Defining clear charters and leadership
               o 각 커뮤니티에는 명확히 기록된 목적과, 이를 관리할 리더(또는 리더 그룹)가 필요함
               o 리더는 Advocates에서 선발할 수도 있으며, 이를 통해 대화의 방향성을 유지하고 커뮤니티가 지속적으로 가치 있는 리소스로 남도록 관리함
          + Sustaining momentum
               o 채널을 개설하는 것으로 끝나지 않음
               o 중앙 지원 프로그램은 커뮤니티에서 나온 흥미로운 AI 활용 사례를 전사적으로 공유하고, 신기능이나 교육을 알리는 플랫폼으로 활용해야 함
               o 시간이 지나면서 커뮤니티를 발전시키고 재정비하는 작업이 필요함

     * 이처럼 의도적으로 CoPs를 육성하면, 확장 가능하고 자생적인 동료 학습 엔진이 탄생함
     * 이는 조직 전체가 AI 활용에 능숙해지는 데 반드시 필요한 기반이 됨

Curated learning and development: Lowering the barrier

     * 단순히 AI 도구 접근 권한을 제공하는 것만으로는 부족하며, 직원들이 실제로 활용 능력(proficiency)을 습득하도록 돕는 학습 및 개발(Learning & Development, L&D) 체계가 필수적임
     * 목표는 모든 직원이 기술적 배경과 관계없이 역할에 맞는 실질적 AI 활용 기술을 습득할 수 있도록 하는 것임
     * GitHub은 이를 위해 내부 경험과 외부 자료를 큐레이션한 L&D 사이트를 구축했으며, 다양한 학습 스타일과 요구를 충족하는 다층적 생태계를 제공함

     * 효과적인 L&D 전략은 다음과 같은 핵심 투자로 구성됨
          + A centralized resource hub
               o 모든 AI 관련 학습 자료를 모으는 단일 진실의 원천(source of truth) 사이트 필요
               o 단순 링크 모음이 아니라, 내부 혁신 사례·베스트 프랙티스·직원 프로젝트 등을 동적으로 전시
               o 학습 자료 제공과 동시에 동기부여 효과 제공
          + Core AI Learning paths
               o 직원 모두가 기초 수준의 역량을 갖추도록 제로투원(zero-to-one) 학습 경로 제공
               o 자체 제작 콘텐츠 대신 외부의 검증된 학습 자료를 큐레이션
               o AI 기능은 빠르게 변하므로 내부 제작 콘텐츠는 곧 무용지물이 될 위험 존재
          + Building blocks for technical users
               o 고급 기술 직원은 기초 학습이 아닌 작업 가속화(acceleration) 가 필요
               o 재사용 가능한 AI 컴포넌트 라이브러리 제공: 템플릿, 클론 가능한 저장소, 워크플로우 등
               o 반복 작업을 줄이고 빠르게 AI 솔루션을 구축할 수 있도록 지원
          + Integration with onboarding
               o 온보딩 과정에 AI 학습을 포함해 입사 첫날부터 활용 능력을 습득하도록 지원
               o AI 활용 능력이 곧 성공적인 커리어의 핵심 역량임을 강조

     * 이를 통해 직원 개개인의 역량 향상뿐 아니라, 조직 전반의 AI 활용 문화 정착을 가능하게 함

Dedicated program leadership: Driving the program

     * AI 활성화 프로그램은 단순한 리소스 모음이 아니라 지속적이고 살아 있는 체계여야 하며, 이를 위해 전담 책임자(Directly Responsible Individual, DRI) 또는 소규모 전담 팀이 필요함
     * 이 리더십은 전략·실행·커뮤니티 활동을 연결하는 접착제 역할을 하며, 조직 전체를 하나의 유기적 시스템으로 작동하게 함
     * DRI의 핵심 임무는 자신의 권한을 강화하는 것(fiefdom building)이 아니라, 타인을 확장(scaling others)시키는 것임

     * 주요 역할과 책임
          + Owning the program strategy and roadmap
               o 전체 전략 수립 및 실행 로드맵 정의
               o 월간 계획 관리 및 회사 목표와 정렬 유지
          + Leading change management
               o 조직 내 변화 관리 책임자로서, AI 도입을 원활하고 투명하게 진행
               o 혼란을 최소화하고 채택률 극대화
          + Acting as a central AI consultant
               o 직원 및 Advocates에게 1:1 지원 및 오피스 아워 제공
               o 복잡한 문제 해결 및 고급 활용 사례 개발 지원
          + Amplifying internal success and innovation
               o 내부 성공 사례 발굴 및 공유
               o 커뮤니티·워크숍을 통해 모범 사례를 전파, 선순환 효과 창출
          + Managing the AI tooling and policy lifecycle
               o 새로운 도구 요청을 접수하고, IT·보안·법무와 협력해 평가·조달·정책 수립 전 과정 관리
          + Owning adoption and fluency metrics
               o MAU, MEU, 사용자 세분화 등 선행 지표 추적
               o 프로그램 효과성을 입증하고 직원들의 AI 성숙도 평가
          + Demonstrating business ROI
               o 생산성 향상, 코드 품질 개선, 개발자 만족도 증대 등 후행 지표와 채택 데이터 연결
               o 경영진에게 데이터 기반 ROI 스토리 제공

     * GitHub은 이를 위해 프로그램 디렉터와 프로그램 매니저를 정식으로 배치, AI for Everyone 이니셔티브를 추진
     * 이러한 전담 체계를 통해 기업 차원의 AI 활성화에 필요한 집중도와 책임성을 보장함

Metrics: Measuring for success

     * AI 활성화 프로그램의 투자를 정당화하고 발전을 이끌려면 올바른 지표 측정이 필수적임
     * 단순히 라이선스 배포 수를 세는 수준을 넘어, 조직 내 AI 활용의 범위·깊이·성과를 입체적으로 이해해야 함
     * 아직 업계 표준이 확립되지 않았으므로, 다단계 접근법(채택 범위 → 활용 심화 → 비즈니스 성과 측정)이 가장 효과적임

     * Phase 1: Measuring breadth of adoption
          + Monthly Active Users (MAU): 한 달에 최소 1회 이상 AI를 사용한 직원 비율 → 전체 채택률의 기본 지표
          + Monthly Engaged Users (MEU): 여러 날 사용한 직원 비율 → 초기 실험 단계를 넘어 습관 형성 여부를 확인하는 핵심 지표
     * Phase 2: Measuring depth of engagement
          + User segmentation:
               o Dedicated users: 월 10일 이상 활동 (핵심 파워유저)
               o Occasional users: 월 2–9일 활동
               o Tire kickers: 월 1일 활동
               o → 목표는 Tire kickers를 Occasional/Dedicated로 전환시키는 것
          + Total AI events: 프롬프트·코드 자동완성 등 총 상호작용 횟수 → 사용자당 이벤트 증가가 곧 업무 흐름 속 AI 내재화 신호임
     * Phase 3: Measuring business impact
          + GitHub Engineering System Success Playbook (ESSP) 참조 → 개발자 행복, 품질, 속도, 비즈니스 성과 전반을 아우르는 종합 지표 제공
          + 주요 AI 관련 지표:
               o AI leverage: AI 활용으로 절감된 수작업 노력과 생산성 향상 정도를 계량화
               o Cycle time: 커밋이 프로덕션에 반영되기까지 걸린 시간 → AI 활용으로 단축될수록 효율 향상 의미
               o Code churn: AI 코드가 재작업이 줄었는지 여부를 통해 품질 신호 측정
               o Pull request size: AI가 과도하게 큰 PR을 유발하지 않는지 검증 필요
               o Developer wellbeing: 반복 작업 감소가 만족도·번아웃 감소로 이어지는지 추적
               o Perceived productivity: 설문 등으로 직원이 AI로 인해 더 가치 있는 일에 집중할 수 있게 되었는지 체감도 조사

     * 이러한 다단계 측정을 통해 AI 도입의 채택·활용 심화·ROI를 모두 입증할 수 있으며, 데이터 기반 내러티브로 경영진에 가치를 설명할 수 있음

Executing on enablement: A strategic checklist

   이 체크리스트는 앞서 설명된 프레임워크를 단계별 실행 로드맵으로 정리한 실천 가이드임
     * Phase 1: Foundational steps (first 30 days)
          + Secure executive sponsorship
               o 예산 지원과 프로그램 공개 지지, 지속적 메시지 전달을 담당할 C레벨 스폰서 확보
          + Appoint a DRI
               o 프로그램 성공에 책임을 지고 부서 간 조율 권한을 가진 전담 책임자 지정
          + Draft a v1 usage policy
               o Legal·Security·IT와 협업해 1차 사용 정책(예: vetted vs unvetted 도구)을 제정, 안전한 실험 환경 보장
          + Establish initial metrics
               o MAU·MEU 측정 체계를 마련하고 초기 대시보드 구축
          + Announce the program
               o 스폰서 및 커뮤니케이션팀과 협력해 비전·가용 자원·향후 일정을 담은 전사 공지 배포
     * Phase 2: Building momentum (first 90 days)
          + Launch the AI advocates program
               o 사내 자원봉사자 공개 모집, 역할 안내 세션 진행, 전용 커뮤니케이션 채널 마련
          + Establish communities of practice
               o 일반용·개발자용 채널을 개설하고 명확한 charter 및 커뮤니티 리드 지정
          + Launch a centralized resource hub
               o 승인된 도구, 정책, 학습 경로를 담은 v1 내부 허브 사이트 개설
          + Begin showcasing success
               o DRI·Advocates가 초기 성공 사례를 발굴·공유하여 사회적 증거와 영감을 확산
          + Launch an onboarding module
               o HR과 협력해 AI 활용 모듈을 신규 입사자 온보딩 과정에 통합
     * Phase 3: Scaling and measuring (ongoing)
          + Implement a ""Train the Trainer"" program
               o Advocates의 멘토링·워크숍 리딩 역량 강화를 위한 정규화된 교육 제공
          + Develop a business ROI dashboard
               o MAU/MEU 등 채택 지표와 사이클 타임·코드 품질·영업 생산성 등 후행 지표를 연결하는 ROI 대시보드 구축
          + Conduct qualitative surveys
               o 정기적·간단한 조직 설문조사를 통해 생산성·웰빙 체감 효과 및 프로그램 피드백 수집

The path to AI fluency

     * 단순히 AI 도구에 투자하는 것만으로는 충분하지 않음
     * 체계적이고 다각적인 실행 프로그램이야말로 AI 투자 가치를 실현하는 조직과 그렇지 못한 조직을 구분하는 핵심 요인임

     * AI 채택 성공에는 만능 해법(silver bullet) 이 존재하지 않음
     * 필요한 것은 지속적이고 데이터 기반의 실행 노력임
     * 이를 위해서는 다음이 필수적임:
          + 경영진의 전폭적 지원
          + 명확하고 접근 가능한 정책
          + 현장의 자발적 AI 옹호자(advocates)
          + 올바른 지표 측정에 대한 헌신
          + 변화에 적응 가능한 강력한 실행 시스템 구축

     * 이와 같은 체계적 접근에 리더십이 헌신한다면, 조직은 더 생산적이고, 더 혁신적이며, 더 효과적인 AI 친화 조직으로 거듭날 수 있음
"
"https://news.hada.io/topic?id=22524","Steve Wozniak: 나에게 인생은 성취가 아니라 행복에 관한 것이었음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Steve Wozniak: 나에게 인생은 성취가 아니라 행복에 관한 것이었음

     나는 애플에서 얻은 부를 모두 기부했다. 왜냐하면 부와 권력은 내가 살아가는 이유가 아니기 때문이다. 나는 많은 즐거움과 행복을 누린다. 내가 태어난 도시인 산호세에서 중요한 박물관과 예술 단체들을 많이 후원했고, 그 공로로 내 이름을 딴 거리가 생겼다. 지금은 대중 강연을 하며 정상에 올랐다. 내 재산이 얼마인지 전혀 모르지만, 20년간 강연을 하며 아마도 1천만 달러 정도와 주택 두 채 정도일 것이다. 나는 어떤 형태의 절세도 찾지 않는다. 나는 내 노동으로 돈을 벌고, 그에 대해 약 55%의 세금을 낸다. 나는 세상에서 가장 행복한 사람이다. 내게 인생은 성취가 아니라 행복에 관한 것이며, 행복은 ‘미소에서 찡그림을 뺀 값( Happiness = Smiles – Frowns )’이다. 나는 이 철학을 18~20세에 개발했고 결코 타협하지 않았다.


   위 댓글은 ""It's Steve Wozniak's 75th Birthday. Whatever Happened to His YouTube Lawsuit?"" 라는 글에서
   누군가 워즈니악이 ""그는 애플 주식을 팔았음. 똑똑한 사람이고 훌륭한 엔지니어지만, 잘못된 결정이다"" 라고 단 댓글에 대해서 직접 답변으로 단 것

   애플 시절에 본인 주식을 직원들에게 나눠주기도 했고, 무료 음악 콘서트를 개최하기도 했었지요. 경비행기 사고만 없었다면 계속 애플에서 엔지니어링으로 큰 역할을 했을지도 모르죠.

   스티브 워즈니악이 인상이 좋죠.
   어디 보호구역 산속 깊은 곳에 있는 오두막 카페에서 사람 좋게 웃으며 팬케잌 팔아도 어색할 것 같지 않은 느낌이에요.

        Hacker News 의견

     * 예전에 Woz가 내 수업에서 강연을 한 적이 있었음. 그는 정말 뛰어난 엔지니어였고, 그의 '순수함'이 삶을 행복하게 해준다고 느꼈음. 10대 때 직접 리디자인한 칩들 이야기를 해줬는데, 전혀 자랑처럼 들리지 않았음. 세상에 Woz 같은 사람이 더 많아지고 Jobs 같은 사람은 적어지면 좋겠다는 생각을 함
          + 선의를 갖고 상황마다 자기 이익만을 쫓지 않는 게 순진한 게 아니라는 게 핵심임. Woz가 아주 똑똑하다고 하면서도 순진하다고 믿는 게 이해가 안 감. 누구나 사과를 다 차지하는 건 쉬운 일임
          + Woz를 좋아하고 Jobs는 성격 면에서 별로 팬이 아니었음(스킬셋과는 상관없이). 여러 번 Woz의 강연을 보니, 자신이 Apple II를 설계한 사람이라는 점을 꼭 알리고 싶어하는 듯한 의지가 보였음. 자랑하는 느낌은 아니었지만, 본인이 업적을 분명히 하고 싶은 것 같았음. 하지만 Apple II 성공 이후 그는 하드웨어의 주 아키텍트 자리에서 일찍 물러난 게 아쉬움. 업계가 빠르게 발전하며 취미로 접근하던 시절이 끝났고, 기계는 점점 예술이 아니라 스프레드시트 같아졌음. 그는 취미로 하는 사람 그 이상이긴 했지만, 그때의 기계들은 더이상 놀라운 트릭을 쓸 수 없는 시대였음
          + 더 많은 사람이 Woz처럼 되어야 하고, 동시에 Jobs 같은 사람도 더 필요함. Jobs는 자기 중심적인 체계를 뛰어넘어 강하게 밀어붙이며 좋은 길을 만든 사람이었음. 예전 MS Office가 Adobe 눈치 보며 PDF 출력 기능을 뺐던 걸 기억함? 이런 일은 Jobs 같은 사람이었다면 벌어지지 않았을 것임. 그는 본인 이익이나 자아에 집착하지 않고, 창의적인 분야에서 과감하게 결단하며 실제로 세상을 바꿨던 인물임
          + 말하기 싫지만 나는 Woz와의 만남이 다른 경험이었음. 우리 회사에서 강연을 했을 때, 너무 예민하고 자기가 모든 걸 다 옳다고 하는 듯한 태도였음. 단지 그 날 컨디션이 안 좋았을 수도 있지만, 약간 실망스러웠음. 내 어릴 적 두 영웅이 Woz와 Kevin Mitnick이었는데 기대와 달랐음
     * Apple에서 일했던 경험에서 Woz에 대해 정말 긍정적인 댓글이 많아 기쁨. 내가 일하는 동안 Apple 내부에서는 Woz를 '미친 사람'이고, 신뢰할 수 없다는 시선이 여전했음. 하지만 내 생각엔 그와는 전혀 달랐으며, 진짜 이유는 그가 Apple의 장단점에 대해 너무 솔직하게 이야기하는 걸 Apple 사람들이 싫어했기 때문이라고 느낌
          + 그와 함께 일했던 사람이 40년 전쯤의 일로 문제 삼는 게 아니라면, 아마 근거 없이 말하는 걸로 보임. 왜 그런 시각이 생겼는지 궁금함
          + 내가 근무하던 부서에서는 그런 이야기를 들어본 적 없음. 나와 동료들도 동의하지 않음
          + Woz가 모델 3 두 대를 사서 로보택시로 임대할 수 있을 거라고 생각했음. 분명 좋은 사람이지만, 그가 왜 계속 '기술 구루'처럼 추앙받는지 솔직히 잘 모르겠음
          + 혹시 그들이 말하는 스티브가 다른 스티브는 아닌지 궁금함. 동료들에게서 무슨 에피소드가 실제 있나? 나는 그에 대해 좋은 이야기만 들었음
     * $1,000만 달러는 ""필요 이상으로 많은 돈이 얼마냐""라는 질문에 완벽한 답이라고 생각함. 그보다 넘어서면 '축적병'에 가까움
          + 친구들과 '어떻게 하면 $10억을 다 쓸 수 있을까'란 놀이를 해봤음. 비싼 물건(요트, 큰 집 등)으로 $5억은 쉽게 가도 그 다음부턴 아무리 써도 채우기 어려움. $2천5백억 달러로는 상상조차 힘듦. 아들이라면 A급 축구팀 산다고 하겠지, 하지만 그건 이미 더 많은 돈을 버는 회사 사는 영역임. 작은 규모에서 $1,000만이면 누구든 고급 주택, 여러 대 차, 항시 도우미, 퍼스트 클래스 또는 프라이빗 여행, 매년 휴가까지 문제 없다고 봄. 인플레이션을 감안해도 큰 문제 없는 수준으로 느껴짐
          + 나는 뭔가 거대한 걸 만들고 싶어서 더 많은 돈이 필요함. 어떤 이는 집, 행복, 가족의 번영을 위해 돈을 쓴다고 하는데 그런 목적이라면 $1,000만은 지나침. 여럿 집을 살 수 있는 돈임. 사회를 위해 뭔가 큰 걸 만들고 싶으면 $1,000만으론 부족할 수도 있음
          + $1,000만 달러로 할 수 없는 일도 많음. 꼭 내 돈이 아니더라도 큰 돈을 통제한다면? 내가 자금 모집, 투자자 설득 없이 할 수 있다면 LA, SF, 시애틀에 진짜 교통 시스템을 만들고 싶음. 게임과 인터랙티브 디지털 아트를 중심으로 한 루카스 뮤지엄 같은 박물관/엑스포센터도 만들어 보고 싶음 https://www.lucasmuseum.org/
          + 대다수 부자들은 Scrooge McDuck처럼 돈더미에 누워있는 게 아님. 일반적으로 회사 지분이나 정부 대출, 비싼 음식, 집, 옷, 호텔, 여행, 자녀교육 등에 돈을 씀
          + 나는 기준을 중위소득의 몇 배로 잡음. 5~6배면 거의 원하는 걸 다 살 수 있지만 전부 살 수 있는 건 아님. 여전히 약간은 가격에 민감하게 반응하지만, 큰 소비에도 크게 신경 쓰지 않을 수준임
     * 우리가 Woz를 존경하는 이유는, 테크 업계에서 흔치 않은 진정성을 가지고 있다는 점임. 우리도 그처럼 되고 싶음
          + 요즘도 이런 시선이 남아있을지 궁금함. 나는 밀레니얼 세대로 예전 레전드들의 이야기는 조금 아는데, 예전 작은 업계 시절처럼 모두가 Wozniak을 영웅처럼 생각하고 교양처럼 여길까 싶음. 지금은 너무 커진 테크 세계에서 변한 것이 많음
          + 흥미로운 인터뷰 질문에 ""Woz처럼 되고 싶은가, S. Jobs처럼 되고 싶은가""가 있음. Elon Musk의 스타일은 Jobs에 가까운 편임(최첨단의 쇼맨십, 조작, 설득, 큰 비전 등). Jobs는 정치엔 크게 관심 없었고, 주로 테크 안에서 트롤링하는 스타일이었다고 생각함
     * 영화 'Steve Jobs'에서 Woz가 한 대사가 참 인상적이었음. ""너의 제품들은 너보다 훨씬 낫다, 브라더""라는 장면임. 영화는 허구지만, 실제로 Woz도 Seth Rogen이 자신을 연기한 걸 매우 좋아했다고 함. 이 태도가 실제 그의 모습과 이어짐
          + ""사람은 착하면서도 동시에 재능 있을 수 있음""
     * 몇 년 전 샌프란시스코 공항에서 우연히 Woz를 만났음. 세상에서 가장 친절하고 겸손한 사람이었음. 페이스북에서 경험 공유
     * Woz의 성격을 가장 잘 보여주는 건 CHM에서의 워크스루임. 홈브류 씬에 대한 부분을 보면 됨 https://www.youtube.com/watch?v=hsB8Hxnb52o
     * 약간 다른 얘기지만, 난 2000년대 초반 이후로 slashdot을 안 들어가 봤음. 기술 포럼(HN, reddit 등)은 잘 되는데, slashdot은 왜 쇠퇴했는지 의외임. 혹시 아직 살아있나?
          + 아직도 가끔 들어가 보는데, 댓글 토론이 완전히 무너졌음. 예전엔 모든 게시물이 200개 댓글이 흔했는데, 요즘에는 정치 이야기 아니면 100개 넘는 댓글도 드묾. 2000년대에는 기술 얘기만 하던 사람들이 최근엔 정치 얘기만 하는 걸 자주 봄. 계정이 해킹된 것 같아서 관리자에게 예시도 보냈으나 답을 못 받았음. 예전엔 거대했지만 지금은 그 그림자에 불과함
          + Slashdot은 효과적인 댓글 관리를 거부함. 댓글창에는 구린 밈이나 농담이 넘쳤는데, 예를 들어 Goatse, Tubgirl, LemonParty 등에 Rickroll, 'Frist post', 'BSD is dying', 'GNAA', 'Nathalie Portman', 'Robotic Overlord', 'In Soviet Russia', 'Imagine a Beowulf cluster...' 등 늘 똑같았음. 나중에 SCO 소송에 집착하며 'Darl McBride News'처럼 됨. 특이했던 점은 투표할 때 항상 의미를 붙여야 했다는 거임: +1 정보, +1 통찰력, +1 흥미, +1 유머, -1 트롤, -1 오프토픽, -1 불타는 논쟁 등. 이런 시스템은 다른 곳에서 못 봄
          + Skimfeed를 통해 가끔 지켜보는데, 확실히 예전 같지 않음. 그렇지만 때때로 보석 같은 글이 있음
          + Slashdot은 처음 사용해본 적 없음. 직관적이지 않은 UI 때문에 쓰기 어려움. 최근 reddit도 비슷하게 불편하다고 느끼지만 인기는 많으니 개인차라고 생각함. 더 중요한 건, 나도 그렇고 많은 젊은 세대가 그 사이트의 존재조차 모를 정도라 신입 유입 없이 점점 죽는 듯 보임
          + 내 생각에 Slashdot은 애초부터 관심사와 커뮤니티가 매우 좁았고, 컨텐츠나 커뮤니티도 pretty predictable 했음. digg, reddit같은 사이트에 비해 다양성이 부족했음
     * 내가 Woz를 만났던 경험이 있음 (약 10년 전 일임). 엄마를 공항에 데려다주고 Delta First Class 줄에 Woz처럼 생긴 사람이 있어서 조심스럽게 다가가 ""Woz 선생님이세요?""라고 물어봤음. 놀라거나 짜증내는 기색도 없었음. 나는 순간 긴장해서 '어릴 적 영웅이세요, 감사합니다' 등만 겨우 말했는데, 그는 요즘은 스포츠 스타를 영웅으로 삼는 사람이 많다며 내 말이 반갑다고 함. 내 일과 짧은 인생 이야기도 물어봐 줬음. 그냥 그와 인사 나눈 것만으로 행복했음
     * 내가 항상 생각하는 게 있음: 파티에서 Vonnegut가 Heller에게 어느 억만장자가 단 하루에 Catch-22 저자 인생 전체 수입보다 더 많이 벌었다고 말하자, Heller는 ""그래도 나는 그에게 절대 없을 '충분함'을 가지고 있다""고 답함 인용 출처
          + Catch-22는 진짜로 훌륭한 책임
"
"https://news.hada.io/topic?id=22574","Node.js, 추가 설정 없이 TypeScript 파일 실행 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Node.js, 추가 설정 없이 TypeScript 파일 실행 지원

     * Node.js가 TypeScript 파일을 직접 실행할 수 있게 개선됨
     * 이제 추가적인 설정이나 트랜스파일링 없이도 .ts 파일 바로 실행 가능해짐
     * 개발자는 tsconfig.json이나 별도의 번들러 설치 없이 작업 효율성 증진 가능
     * 해당 기능은 Node.js v22.18.0 (LTS) 버전부터 공식 반영됨
     * JavaScript와 TypeScript 개발 간의 경계가 완화되는 결과 기대


Node.js의 TypeScript 직접 실행 지원

     * Node.js는 최근 v22.18.0 (LTS) 버전에서 TypeScript 파일(.ts) 을 별도의 설정이나 도구 없이 직접 실행할 수 있는 기능을 도입함
     * 기존에는 TypeScript 코드 실행을 위해 ts-node, esbuild, Babel 등 외부 트랜스파일러 또는 번들러가 필요했으나, 이제 이런 도구 없이도 Node.js 자체에서 TypeScript 코드를 인식하고 실행함
     * 이 기능을 통해 개발자는 tsconfig.json 구성파일이나 추가 라이브러리 없이 .ts 파일을 Node.js에서 곧바로 실행 가능함
     * 프로토타이핑, 실험적 개발, 스크립트 실행 등에서 생산성과 개발 편의성이 크게 증가
     * JavaScript와 TypeScript 프로젝트 간의 연계성 강화, 신규 개발자 진입 장벽 완화 등의 효과가 기대됨

그외 주목할 만한 변경

     * esm: import.meta.main 구현
     * fs: AsyncIterator 기반의 fs 이벤트 처리 개선
     * permission: 하위 프로세스 실행 시 권한 모델 플래그 전달 지원
     * sqlite: readBigInts 옵션 추가
     * src/permission: permission.has(addon) 지원
     * url: fileURLToPathBuffer API 추가
     * watch: --watch-kill-signal 플래그 추가
     * worker: Worker 객체를 async disposable로 개선

커밋 및 문서 관련 업데이트

     * 불필요 코드 제거, 빌드 환경 및 도구 체인 정비, npm 10.9.3 업그레이드 포함
     * globals.md, child_process.md, http2 등 문서의 세부 안정성 지표 및 RFC 번호 수정
     * 다수의 테스트 추가 및 버그 수정 반영

배포 파일

     * Windows, macOS(Intel/Apple Silicon), Linux(x64, ARM, PPC, s390x, AIX)용 설치 파일 및 바이너리 제공
     * 소스 코드와 전체 릴리스 파일은 Node.js 공식 배포 페이지에서 다운로드 가능
     * API 문서는 v22.18.0 기준으로 업데이트됨

   와 속이 다 시원... 빨리 자리 잡았으면 좋겠네요

   간단한 스크립트 실행에는 괜찮을 것 같은데 라이브 프로젝트에는 제약이 많아서 사용할 일이 별로 없어보이네요.

   ERR_MODULE_NOT_FOUND/ERR_UNSUPPORTED_DIR_IMPORT 오류로 확장자나 경로도 맞춰줘야 하고
   NestJS 같이 ""emitDecoratorMetadata"" 설정으로 TypeScript 빌드 지원이 필요한 기능은 못 쓰고 그러니...

   --experimental-strip-types 이 기본적용 되는건가요?

   어차피 enum은 안써서 제 기준으로는 그냥 타입 제거 동작만으로도 충분히 잘 실행되더군요

   엄청 편해지겠네요!

   따봉을 참을 수가 없네여.

   --no-experimental-strip-types 플래그로도 충분히 좋다고 생각했지만.

   더욱이 좋은 것 같습니다.

        Hacker News 의견

     * Node.js에서 node:test와 함께라면 이제 Node.js가 거의 대부분의 케이스에서 설득력 있는 디폴트 선택지라고 생각함. tsx를 사용해서 실행하는 게 큰 삶의 질 향상이었으나, 여전히 완전하지 않았었음. zod와 ts-rest, trpc 같은 툴로 엣지에서의 런타임 타입 단언이 주로 해결되고 있고, 요즘에는 풀스택 Typescript 개발이 정말 쉬워짐
          + 진짜임. 2025년이 되어 드디어 node 생태계가 기본 설정만으로도 쓸 만해짐. ESM 모듈이 Node와 Typescript 양쪽에서 그냥 잘 동작하고, Node가 .ts 파일을 바로 실행할 수 있으며, 좋은 수준의 기본 테스트 러너를 내장하고 있음 (--watch 지원). 내장 패키지들도 더 좋아지고 있음. node:fs/promises 같은 경우, top-level await 덕분에 비동기 루프 작업도 훨씬 쉬워짐. 모두가 현실적으로 접근하도록 설득하려면 시간이 오래 걸렸지만, 이제 정말 쾌적해진 상황임
          + Node에서 Typescript를 직접 지원하는 거에 적극 찬성함. vitest가 요즘엔 많은 부분을 편하게 해주고 있지만, .ts 파일 테스트 환경 설정보다 정말 많은 시간을 소모했었음. trpc와 ts-rest는 완전히 다른 문제라고 생각. 둘 다 쓸 수 있지만, 프로덕션에서는 trpc의 경우 API URL을 내가 직접 소유할 수 없고, 오래된 URL을 자연스럽게 관리하며 폐기하지 못하기 때문에 피하고 있음. ts-rest의 경우에도 보통 직접 zod와 타입을 공유해서 API 요청/응답 쌍을 직접 관리하는 걸 선호함. 그리고 trpc가 명백한 RPC 툴인데 이름에 -rest가 붙어있을 때마다 거슬림
          + 앞으로 Sveltr가 코드베이스를 다시 Typescript로 옮기는지 한번 지켜볼 예정임
          + 이게 tsx를 실행하는 건지 궁금함. 타입을 제거해도 JSX는 JavaScript로 변환해야 하는데, 그 부분이 궁금함
          + 난 얼마 전에 Python으로 전환함. 모든 게 내장되어 있어서, 완성되지 않은 시스템의 여러 기괴한 문제를 디버깅하지 않아도 되어 훨씬 만족스러움
     * Node가 최근 몇 년간 보여준 발전에 큰 인상을 받았음. deno와 bun이 Node를 자극해서 집중적이고 의미 있는 개선 작업을 하게 만든 것이 좋았음. 한동안 정체되어 있었음
          + Node에 최근 어떤 개선이 있었는지 궁금함. 마지막으로 의미 있다고 느낀 개선이 임포트/익스포트의 정식 지원이었음 (.mjs 해킹이 여전히 필요한지 모르겠지만). 얼마간 생태계에서 떨어져 있어서, 그 이후에 무슨 변화가 있었는지 알고 싶음
          + 과연 그랬는지 의문임. 내가 참여한 프로젝트들을 보면 deno나 bun이 없어도 전혀 무방했음. 실질적으로 의미 있는 건 node LTS 릴리스뿐이고, 최신 프로젝트들도 여전히 node 20 버전을 사용하고 있음
     * 타입스크립트가 node_modules에서 받아들여지지 않는다는 점이 아쉬움 (관련: node.js 공식 문서).<br>그렇다면 프로젝트 의존성은 어떻게 되는지 궁금함. 데이터 모델용 라이브러리를 Typescript로 작성했는데, Typescript 상태로 내 앱에 임포트하고 싶음. 이 규칙이 npm 패키지에만 적용되는지, 아니면 모든 의존성에 적용되는지 궁금함. 여기에 기회가 있음.<br>나는 typescript (정확히는 JS 전반) 실행을 위한 golang 기반 런타임을 만들었고, grafana 팀이 사용하는 sobek도 타입 스트립 기능만 추가하면 될 듯함. 완전히 Typescript를 기본 채택한 런타임이 하나만 나오면 Node.js가 정말 혁신될 거라 느끼고 있음. 트랜스파일러도, typescript-go도, rust도 필요 없고 (그래도 rust는 약간😉), 좋은 파서가 소스맵과 타입을 디버깅 모드에서 추적해주는 시스템이면 충분함.<br>어쨌든 Node 팀과
       모든 기여자들에게 인정과 감사를 표함. 표준이 되는 Node 덕에 우리 모두가 그 뒤를 따르는 느낌임. 임베딩 API도 간단하고 사용성이 깔끔해서, 독립 실행형 만들 때도 편리함
          + 동일한 코멘트를 남긴 적 있음 (참고). “타입스크립트로 작성된 패키지를 npm에 배포하지 않도록 장려하기 위한 것” 부분이 있는데, 나도 프라이빗 패키지로 시도해봤지만 동작하지 않았고, Node는 “private” 필드 자체를 신경도 쓰지 않음
          + 패키지는 npm에 배포하기 전에 반드시 JavaScript로 컴파일해서 배포해야 한다고 생각함. TypeScript를 그대로 npm에 올려야 할 이유가 없다고 봄
     * 관련 이슈<br>node_modules에서 타입 스트립 지원이 없는 게 아쉽다고 생각함
          + 이 기능을 기대했던 이유의 절반은 바로 이것임. TypeScript로 라이브러리를 작성하고, 타입체크는 CI/CD에서만 진행한 뒤 Node.js에서 바로 임포트할 수 있길 바랐음
          + 올바른 결정이라고 봄. TypeScript는 브레이킹 체인지가 꽤 자주 발생함. 표준화되지 않는 한, 현재 방식이 낫다고 생각함
     * 나는 JS/TS를 많이 쓰는 쪽은 아니지만, Bun을 그냥 쓰는 게 더 나은 거 아닌가 궁금함. 모든 프로젝트가 새롭게 시작되는 건 아니겠지만, Bun이 전반적으로 더 좋은 런타임이라고 느꼈음. TS 실행이 처음부터 되고, 의존성 해석도 훨씬 빠르며, 사용성도 뛰어남. 개인적으로 옛 Node 프로젝트를 Bun으로 많이 옮겼고, Bun 공개 이후 Node는 거의 쓰지 않게 됨. 혹시 내가 잘못 알고 있는 점이 있으면 알려달라 바람
          + Node만 8년 가까이 썼다가 최근에 Deno로 갈아탔었음. 이 전환도 쉽진 않았고, 실제로 동작 안하는 게 아니라 언제 안 돌아갈지 모르는 상황이 두려웠기 때문임. Node도 분명 아쉬운 부분이 많지만, 그래도 업계의 사실상 표준 기준이 됨. JS 생태계 자체가 혼란스러워서, 많은 개발자가 새로운 빌드툴이나 번들러, 런타임에 지친 상태임. Bun이 충분히 설득력 있어질 정도로 안정성이나 지원이 쌓이지 않은 거 같음. 이전에 TS의 마이너 업데이트 하나로 며칠씩 문제를 해결했던 경험도 있음
          + 난 최신 트렌드를 쫓는 게 썩 달갑지 않음. NodeJS는 JS 생태계에서 가장 지원이 잘 되는 런타임임. 기본값이 되는 선택지를 따라가는 게 훨씬 낫다고 생각함. 소위 ‘심심한’ 기술을 선택하는 편임
          + Bun 출시 이후 완전히 전환을 여러 차례 시도했지만, 매번 90%쯤에서 피할 수 없는 문제에 부딪힘. 마지막 시도엔 일부 라이브러리에서 napi 함수가 미구현이라 작동이 안 됐고, opendir 옵션에서 recursive가 무시되는 문제 등 기억나는 이슈들이 있었음. Bun이 따라잡기를 기다리는 입장이지만, 아직까지 대형 프로젝트에 실무 적용할 준비가 된 것 같진 않음. bun 전용 기능도 첫인상은 좋아 보이나 실전에서는 미흡하다고 느낌. 문서도 Node.js만큼 품질이 높지 않음
          + Node를 Bun으로 대체 시도했을 때 겪은 호환성 문제들임.<br>- TCP 연결에서 localAddress 무시됨<br>- Node 모듈 API와의 비호환성 (예시: spamscanner 프로젝트 미작동)<br>- EventEmitter 관련 race 문제 (부분 해결: eventemitter2로)<br>- Svelte vites dev 서버가 종종 멈춰서 node_modules 삭제 후 재설치해야 했음
          + Node 자체의 TS와 테스트 러너 기능을 사용해봤는데, 아직 Bun만큼 좋지 않음. 당분간 그런 기능을 쓸 때는 Bun을 쓰고 있음. Node 생태계에서는 한 가지에만 올인하기보단, 각기 특화된 도구를 적절히 조합하는 게 더 낫다는 걸 배움.<br>
               o Bun.js: Node 런타임용, TS 실행과 테스트에 활용. TSX, TS-Node, Node 자체 등 다양하게 시도해봤음<br>
               o NPM: 툴링 스크립트 실행에 사용<br>
               o PNPM: 의존성 설치에 사용. (npm, yarn, bun 대비 가장 우수하다고 느낌)<br>
               o Biome.js: 린팅용. 지금까지 쓴 그 어떤 린팅 툴보다 뛰어남
     * 이번 개선이 “타입 스트리핑”만으로 이루어진 점이 정말 좋은데, 소스맵이 필요 없어서 프로덕션에선 완전한 제로코스트가 됨. Node 팀 정말 잘했다고 생각함
     * 타입 스트립 함수 (import { stripTypeScriptTypes } from 'node:module')도 노출되어 있음. 프론트엔드 의존성이 없는 간단한 웹앱 개발 시, 전체를 타입스크립트로 만들고 프론트엔드 스크립트도 서빙할 때 타입만 빼버리면 됨 (예시 프로젝트)
     * 이 변화 덕분에 우리 회사도 드디어 Typescript로 옮겨갈 수 있었음. 여러 서비스를 한꺼번에 TS로 전환했고, 일부는 진행 중임. 큰 수확임
     * 동작 방식이 타입 정보를 제거하는 것 같음. 즉, 트랜스파일 단계 하나를 줄여주는 것이고, 안전성 면에서는 향상되는 것은 아님
          + 타입스크립트 주요 설계 목표는, 타입 관련 구문만 제거하면 결과물이 유효한 JavaScript 파일인 것임. TS 컴파일러는 코드를 생성하지 않음 (예: PureScript와 다름). tsc 등 타입체커를 통해 정적 검사를 하게 되고, 타입 정보는 제거됨. 파이썬도 런타임에 타입 애너테이션을 무시하고, Java 역시 바이트코드에서 일부 제너릭 등 타입 정보가 삭제되는 특성을 가지고 있음
          + “최소한 트랜스파일 단계를 줄여준다는 것뿐 안전성은 개선되지 않는다”는 말은 조금 오해의 소지가 있음. Node가 TS를 바로 실행하는 게 타입체킹 안전성을 높여주는 건 아니지만, 타입체킹은 에디터나, 다른 여러 툴에서 별도로 진행 가능함. Node가 TS 바로 실행을 지원함으로써 TS 사용의 진입장벽을 확 낮춰주고, 간접적으로 타입 안정성을 도와줌
          + 타입스크립트는 안전성 향상까지 보장하겠다는 약속을 한 적 없음. 보통의 오해이긴 함. TS는 런타임 모드나 정보가 없는 셈이었고, 타입체커를 돌리지 않으면 심각한 타입 오류가 있어도 그대로 실행 가능했음. 엄밀히 말해 Typescript는 린터에 더 가까움
          + 빌드/트랜스파일 없이 바로 스크립트 실행할 수 있다는 건 엄청 편리하다고 생각함. 타입체크 필요하면 tsc로 돌리는 방식이 나한텐 잘 맞음
          + tsx를 써서 똑같이 빌드/트랜스파일 필요 없이 실행하는 셋업을 프로젝트에서 쓰고 있음. 개발 중엔 굉장히 유용함. tsx의 --watch 덕분에 TS 소스에서 바로 서버 돌리고, 변경되면 자동 리스타트함. 앞으로 nodemon과 Node 내장 기능만으로 비슷한 환경 만들 수 있을 듯. 런타임에서 타입체킹까지 하려면 v8 레벨에서 지원해야 되는데, 이건 거의 전체 재작성급 작업일 것임
     * 실제로는 Typescript 전체를 실행하는 게 아니라, 일부 서브셋만을 지원함. 타이틀 내용이 과장됐다고 느껴질 수 있음. 이런 변화가 TS를 린터처럼만 쓰게 만들 우려가 있고, 타입스트립 만으로 구현 불가한 다양한 강력한 TS 기능이 사장될 수 있음
          + TS에서 스트립 처리 불가한 기능은 대체 무엇이 있는지 궁금함. enum 외에 실제로 쓰는 사례가 어떤 게 있는지 질문함
"
"https://news.hada.io/topic?id=22517","Show GN: Showmaker: 마크다운을 슬라이드로 만드는 프로그램 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: Showmaker: 마크다운을 슬라이드로 만드는 프로그램

   마크다운을 Quarto, 엄밀히는 revealjs를 사용해서 웹 슬라이드로 만드는 프로그램입니다.

   이미 비슷한 기능을, 더 잘하는 서비스와 프로그램도 종종 소개되었지만,

   웹서비스, 가입을 하거나, 유료, 혹은 개발자 도구로 사용해야 한다 등등 진입 장벽이 있어서

   개발자들의 입장에서나 좋은 프로그램이고 개발에 전혀 관심이 없는 분들에게는 먼 이야기더라구요.

   그냥 개발 배경 없이 쓸 수 있는 것 없을까 찾아보다가 Rust의 tauri를 사용해서 별도 프로그램으로 만들었습니다. 개인적으로는 electron도 좋아하지만 tauri가 훨씬 더 가볍더라구요.

   프로그램 이름은 제가 디플 팬이기도하고, markdown -> slideshow 에서 아이디어를 받아서 그냥 쇼메이커로 했습니다. (혹시나 쇼메가 뭐라 하면 너구리나 고스트로 바꾸겠습니다)

   Quarto를 현재 사용중인데요. Qurto대비 어떤 장단점이 있나요?

   Quarto를 쓸 수 있는 분이면 Quarto를 쓰시는게 더 좋습니다. 제가 하려고 하는 건 ""터미널 작업""이라는 단어를 이해 못하시는 분들이 그냥 다운로드 받아서 바로 실행할 수 있도록 하는 거에요

   2년 전에 OpenAI 해커톤 나가서 비슷한 걸 - MarkSlides, 만들었었는데 비슷한 아이디어라 반갑네요!
   참고로, 저는 더 이상 개발에 참여 안하고 있지만, 해당 서비스는 같이 나간 분이 계속 발전시키고 있어요.
"
"https://news.hada.io/topic?id=22594","Show GN: Murfy.ai : AI-Latex 협업 편집기로 논문 2배 빨리 작성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Show GN: Murfy.ai : AI-Latex 협업 편집기로 논문 2배 빨리 작성하기

   안녕하세요, 저는 최근에 Murfy.ai 라는 Latex 기반 논문 협업 편집 솔루션을 개발하고 있는 개발자입니다.
   솔직히 말씀드리면 아직 부족한 부분이 많습니다만, 기존 오버리프를 사용하면서 개인적으로 아쉬웠던 점들을 직접 해결해보고 싶다는 생각이 들어 몇 달간 집중적으로 만들었고, 이제 겨우 NeurIPS 와 AAAI에 논문을 제출한 랩실이 나온 상태입니다.

   [서비스 소개]
   Murfy.ai는 오버리프 보다 논문을 2배 빨리 작성할수 있는 AI-Latex 협업 편집기입니다.

   [오버리프와 차이점]
     * Latex 컴파일 속도: 오버리프 유료계정 대비 컴파일 속도가 2x배 빠릅니다
     * 한글 Latex 지원 : 프로젝트 설정에서 컴파일러를 XeLatex으로 설정하면 한글 Latex을 바로 사용할수 있습니다.
     * 다양한 국내외 학회/학술지 template 지원 : 국내 학술대회 template을 자체 제작하여 배포하고 있습니다.
     * AI chat을 이용한 Latex 코드 생성: 참고 논문의 표, 수식, 알고리즘을 화면 캡처하여 AI chat한테 요청하면 3초안에 Latex 코드를 작성해줍니다.
     * 영문 번역, 영문법 체크 등: 편집기에서 바로 한글로 작성하고 영어로 번역하고, 영문법 검사, 문장 교정까지 한꺼번에 요청할 수 있습니다.
     * 실시간 협업 편집: 실시간 협업 편집하고 댓글 및 수정 제안까지 남길 수 있어 논문 작업에 필요한 협업 기능을 강화했습니다.

   [사용자 후기]
     * 아주대 랩실: ""이거 뉴립스 제출시 오버리프 서버 다운되는거 겪고 Murfy.ai로 이동했는데 생각보다 괜찮네요 ㅎㅎ""
     * 고려대 랩실: ""일단 오버리프 보다 빨라서 뭐 만족스럽습니다 ㅎㅎ, ICLR와 같은 풀 페이퍼 제출시 이미지가 많아지면 오버리프 무료 계정에서는 컴파일 타임아웃이 나서 작업이고 뭐고 할수가 없어요 ㅠㅜ""
     * 현재 수천 명의 연구원들이 사용하시면서 피드백을 많이 남겨주고 계십니다.

   [듣고 싶은 이야기]
   아직 Murfy.ai는 성능이나 편의성 면에서 부족한 부분이 많을 겁니다. 그래서 실제 Latex 을 쓰고 계신 분들의 피드백이 간절히 필요합니다!!

   [바로 사용해보기]
     * https://www.murfy.ai/

   free와 plus 플랜의 차이가 뭔가요? 그냥 봐서는 plus 플랜의 이점이 잘 안보여서, 이 부분은 설명이 좀 더 되면 좋지 않을까 생각합니다.

   빠른 피드백 감사합니다!
   일단 저희가 급하게 개발하다 보니 아직 결제 기능보다는 서비스 자체의 완성도에 집중하고자 하여, 현재는 무료체험 기간을 계속 제공해드릴 예정입니다 :)
"
"https://news.hada.io/topic?id=22578","자체 결제 프로세서 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             자체 결제 프로세서 만들기

     * Payment Processor를 직접 만든다는 주장은 흔하지만, 실제로는 기술·금융·규제 장벽이 복합적으로 얽힌 어려운 과제임
     * MSP/PayFac 구조와 은행 스폰서십 없이 독립적인 결제망 구축은 사실상 불가능함
     * KYC·KYCC, 보안·인증, 위험 관리 의무가 엄청나며 소규모 서비스는 감당하기 어려움
     * 고위험 결제사를 통한 대안은 15% 수수료, 예치금 요구 등 현실적으로 지속 불가능한 조건임
     * 결국 Visa·Mastercard 같은 카드 네트워크 자체의 영향력 때문에 근본적 해결책이 부재함을 지적함


결제 프로세서 구조

     * ""결제 프로세서""라는 말은 실제로는 여러 기관의 다단계 구조를 포함함
     * Payment Card Networks (PCN): Visa, Mastercard 같은 카드 네트워크
     * Acquirer: 은행 계열사가 직접 발급·정산을 담당
     * Merchant Service Providers (MSP): 결제 정보 전달 및 POS 단말 제공
     * Payment Facilitators (PayFacs): Stripe, PayPal처럼 대금을 대신 받아 상점에 분배
     * Merchant / Sub-merchant: Itch는 Merchant, 크리에이터는 Sub-merchant에 해당함

자체 PayFac 설립의 현실

     * PayFac이 되려면 반드시 은행(Acquirer)의 스폰서십이 필요함
     * 은행은 위험, 자산, 차지백 대응 능력을 엄격히 심사함
     * 운영사는 보안·신뢰성·정확성에 대한 엄격한 감사와 인증을 통과해야 하며, 대규모 엔지니어링 팀이 필요함
     * KYC/KYCC 규제에 따라 모든 이용자의 신원 확인과 안전한 저장·검증 책임을 져야 함
     * 성인 콘텐츠를 다룰 경우, 연령 확인 및 강화된 규제까지 추가됨

Itch의 현실적 한계

     * Itch는 사실상 1인 운영과 소규모 보조 인력에 의존함
     * 현재도 부분적으로 PayFac처럼 동작하지만, 실제 정산은 PayPal 등 외부 PayFac을 거침
     * 이런 상황에서는 독립 PayFac 운영이 불가능하며, Valve조차 별도 조직이 필요할 규모임
     * 설령 구축해도, 결국 은행과 PCN의 리스크 관리와 검열을 피할 수 없음

고위험 결제사(High Risk MSPs)

     * 성인 콘텐츠는 기본적으로 고위험 산업으로 분류됨
     * CCBill, Epoch 등이 대표적이며, 15%+수수료와 25% 예치금 요구 등 극단적 조건을 제시함
     * 일반적인 3% 수수료, 24시간 내 정산과는 비교 불가 수준임
     * 은행 측에서도 CCBill과 연결된 거래는 종종 사기 알람으로 차단됨
     * 결국 소규모 창작자나 Itch가 감당하기에는 과도한 비용과 위험

Visa/Mastercard의 직접 개입

     * 2017년 Fetlife 사례처럼, PCN 자체가 특정 콘텐츠를 이유로 MSP에 거래 중단을 요구할 수 있음
     * 이는 고위험 MSP 사용 여부와 상관없이 언제든 발생 가능함
     * 즉, 결제 체계 어디를 거치든 PCN이 개입하면 동일한 문제가 반복됨

대체 결제수단 시도

     * ACH/eCheck: 보안 취약, 이용자 신뢰 부족
     * Wire transfer: 건당 고액 수수료, 처리 지연
     * Paper check: 현실적으로 불가능
     * Crypto: 논쟁적이며 실용성 부족
     * 선불카드(편의점 충전식): 일본 등 일부 지역에 존재하지만 글로벌 확산 불가

규제 리스크

     * 일정 규모를 넘는 충전·출금 시스템은 은행 규제로 분류될 수 있음
     * 미국 12 CFR 1005E 등 금융 규제 적용 가능성이 높음
     * 이 경우 AML(자금세탁방지) 대응 부담이 추가됨

Itch의 수익 구조 문제

     * Itch 자체는 수익 구조가 취약하며, 크리에이터 수익을 일일이 수동 지급하는 상황임
     * 운영 리소스 부족으로 대응이 느리다는 비판이 있지만, 현실적으로 대안이 없음
     * 고위험 MSP 이용이나 수수료 인상도 PR 리스크가 커서 어려움

결론

     * 독자 결제망 구축은 Valve조차 어려운 수준이며 Itch에는 불가능함
     * 고위험 MSP는 수수료·예치금·리스크 관리 측면에서 감당 불가
     * 근본적으로 Visa/Mastercard 같은 PCN의 결정력이 절대적이어서 대안이 제한적임
     * 이번 사태를 통해 ""Itch의 책임""이라기보다, 결제망 권력 구조의 문제임을 보여줌

        Hacker News 의견

     * 브라질의 Pix 같은 시스템이 진정한 해결책임, 사용자가 세금으로 내는 수수료 없이 중앙은행이 현금처럼 직접 관리하는 디지털 결제 시스템을 추구함, 현금 없는 사회로 가는 만큼 정부가 통화와 결제 시스템의 대체 수단 통제권을 반드시 가져야 의미 있음, 현 결제 시장에서 중간업자들이 과도한 권력을 쥐고 소비자의 상품 구매 자체에 간섭하는 문제점이 크다는 점을 지적함
          + 유럽 연합도 저렴한 은행 간 이체와 온라인 결제를 가능케 하는 여러 규제를 시행하고 있지만 브라질의 Pix가 더 우수해 보임(사용은 안 해봄), 미국의 3% 결제 수수료는 Visa/MC의 방해로 대안이 막혔기에 가능한 구조임, 수도 민영화가 시민에게 좋지 않은 이유와 마찬가지로 온라인 송금 역시 사실상 공공 인프라로 보고 대우해야 한다고 생각함
          + 영국 중앙은행 직원들은 20년 전만 해도 은행에 직접 계좌를 가질 수 있었음
          + 중앙은행이 모든 걸 직접 하지 않아도 충분히 가능하다고 봄, 캐나다에는 여러 금융기관들이 연합해 운영하는 Interac e-transfer가 있음, 완벽하지 않지만 ‘완벽은 좋은 것의 적’이라는 말처럼 현실적인 대안임
     * Patreon이 2018년에 Stripe에서 거의 퇴출당할 뻔했는데, 이유는 Mastercard가 노출이 있는 콘텐츠(NSFW)를 문제 삼았음, Patreon은 대다수 NSFW 크리에이터를 내보내고 OnlyFans가 이들을 흡수해 Patreon보다 훨씬 커짐
          + 참고로 OnlyFans 또한 Stripe를 결제 모듈로 사용하고 있음
          + 그런데 카드사들은 왜 OnlyFans에는 반대를 안 하는지 궁금증이 듦
     * 미국인들의 전신 송금(wire transfer)에 대한 비호감이 비합리적으로 느껴짐, 왜 유럽처럼 인스턴트 결제 시스템이 없는지 궁금함, 본문에서 언급된 ‘상점이 돈을 가로챈다’는 시나리오도 신용카드 결제에서도 충분히 발생 가능하다고 생각함, 결제 처리량 문제도 수십 년 전에 해결된 이슈라 신기하게 느껴짐
          + 미국에도 전신 송금이 있지만 15~40달러 정도의 상당한 비용이 들고, 수취 은행의 협조 없이는 되돌릴 수도 없음, 주로 집 구입 등 대규모 긴급 이체에만 사용함, ACH 같은 자동 이체는 밤샘 배치 등 다양한 방식 있으나 계좌 번호 공개를 꺼리는 문화가 있고 송금-청구 연동도 일관되지 않아 불편함, 신용카드는 판매자 협조 없이도 환불(차지백)이 가능해 소비자 보호가 상대적으로 우수함
          + ‘전신 송금’이 미국과 유럽에서 의미가 다를 수 있음, 미국에서 wire transfer는 직접 은행에 요청해 상대 계좌로 돈을 보내는 방식이고 그마저도 처리가 다음날 이루어져 느림, 높은 수수료와 느린 처리 때문에 거의 안 쓰는 게 현실임
          + 금융 시스템을 바꾸려면 인프라와 프로세스에 비용이 드는 것이 문제임, 미국인 자체가 싫어하는 게 아니라 각 기관이 이익 극대화 구조에 집착해서 혁신을 막고 있음, 또한 전국적인 뱅킹 시스템을 위해 필요한 국가 ID 시스템(예: 주민등록번호)에는 사생활 보호 이유로 거부감이 높음
          + 유럽과 미국은 매우 다른 금융 생태계를 가짐, 체스터튼의 울타리(Chesterton’s Fence)처럼 현 구조의 배경을 이해하고 나서야 변화에 접근해야 함, 미국은 FedNow(유럽 SEPA와 유사한 즉시결제)를 도입했으나 시스템 분화로 확산이 더딤, 전신 송금은 비싸고 포인트, 캐시백, 신용 등 부가 혜택이 없어서 소비자에게 매력이 없음, 신용카드는 문제가 생기면 소비자 보호법 덕에 대체로 환불이 됨
          + 카드 결제에서 판매자가 무단으로 돈을 가져갈 수 있다는 걱정이 타당하지 않음, 결제 대행사는 프로세스상 이유 없이도 차지백을 제공함, 특히 무형 상품일 때 차지백 빈도가 높고 판매자에게 수수료도 추가로 부과돼 소형 판매업자에게 부담임, 그래서 어떤 가격대 제품은 판매 자체가 힘들거나 인상된 가격이 적용됨
     * 결제 처리 시스템을 직접 만드는 건 현실적으로 벨브(Valve), 이치(Itch) 같은 대형 기업도 힘듦, 그 이유는 사실상 거의 은행을 만들어야 하며, 네트워크 자체가 가장 큰 장벽임, PCI-DSS(카드 업계 보안 표준) 준수 등 복잡한 규칙도 만만치 않음, 궁극적으로는 전혀 다른 형태의 통화 체계로 벗어나지 않는 한 변화가 어렵다고 생각함
          + PCI-DSS는 경우에 따라 어렵지만 범위를 잘 제한하면 효율적으로 할 수 있음, 이치처럼 인력이 작으면 압도적일 수 있지만 벨브 수준이면 충분히 소화 가능하다고 봄, 물론 전제는 실제로 하고 싶다는 의지가 있을 때임
          + Valve와 같은 상점도 카드번호 자체를 저장하는 경우(SAQ-D)만 아니면 SAQ-A~C 유형으로 웬만한 전자상거래 기업들도 잘 대응 가능함
     * 전체적으로 암호화폐에 비판적인 입장이지만, 이런 경우라면 대안 결제 수단으로 의미가 있다고 생각함, 문제는 결제 후 법정화폐로 전환하는 과정임
          + 실제로는 이게 유일한 문제가 아님, Steam은 과거 비트코인 결제를 도입했지만 2017년부터 중단함, 당시 Gabe Newell이 밝히길 암호화폐 결제의 무려 절반이 사기성 거래였고 원치 않는 고객들이 많아 문제가 컸다는 발언이 있음 링크
          + 만약 가상 화폐가 좋다면 이미 스팀 지갑 카드(기프트 카드)가 있으니 특별한 대안이 아닐 수 있음
     * 이 문제의 해법은 간단한 규제라고 생각함, 예를 들어 “금융기관 및 서비스 제공자는 법적으로 허용된 합의된 거래를 임의로 방해, 봉쇄, 거부할 수 없다”고 규정하면 충분함, 미국에서는 기업의 표현의 자유 이슈(기업은 표현의 자유가 없어야 한다고 생각함)로 소송이 따르겠지만, 다른 나라에서는 이 조치만으로도 시장이 소수 이사들의 편견과 과도한 리스크 회피로부터 자유로워질 수 있음, 만약 특정 업계(예: 성인 콘텐츠)의 차지백 비율이 높으면 소비자가 증거를 더 엄격히 증명해야 차지백을 허용하는 등 책임 소재를 명확히 하는 방식이 적절함
          + 하지만 미국 정부는 오히려 반대의 규제를 하는 경우가 많았음, 예시로 연방법이 인터넷 도박 등의 결제를 막기 위해 비슷한 사례가 있었음 링크
          + 기업들이 결제를 제한하는 주요 이유 두 가지는 높은 차지백 리스크와 평판 리스크임, 리스크 관리와 보상 구조가 있는 곳에서만 이런 업종이 처리돼야 하고, 위험을 모든 카드 가맹점에 전가하는 구조는 옳지 않다고 생각함
          + 금융 서비스에 한정하기보다 모든 필수 서비스 제공자(예: 통신, 에너지 등 인프라 사업자)에게 서비스 중립성을 법으로 보장하게 하면 헌법상 표현의 자유 문제도 생기지 않음
          + 지금의 문제는 오히려 역설적으로 금융 규제가 너무 많아서 개인의 돈 사용 하나하나까지 은행 입장에서 진단하게 만들어서 생기는 상황임
     * Visa/MasterCard가 아닌 자체 카드나, 은행과 연동하는 QR 결제 시스템을 직접 만드는 게 핵심이라고 생각함, 문제는 결제 대행업체가 아니라 카드사임, Valve 같은 대형사가 은행과 손잡고 QR 기반 결제 시스템을 만들면 가능성 있다고 봄(예: SteamPay), ACH를 통한 충전식 모델로 하면 사기 방지 등도 가능함, 물론 비용이 많이 들지만 페이팩(PayFac) 구축보다는 현실적인 시나리오임
          + 분위기가 비슷한 논의가 한 달 전에도 있었는데, Visa 수준의 네트워크 “신규” 구축은 비현실적임을 밝힌 적 있음 링크
          + 하지만 실제로 은행들이 Visa/MasterCard를 포기하고 전혀 새로운 결제업체/카드를 선택할 확률이 거의 없음, 카드사 측이 거래약관에 타사 결제 사용 금지 조항 한 줄 넣으면 바로 무력화되기 때문임, 사실상 기존 은행이 대안을 도입할 인센티브가 없음
     * PayFac(페이먼트 패실리테이터)를 직접 만들어 본 경험으로 2025년 기준 그리 어렵고 복잡하진 않다 생각하지만, Valve가 한다 해도 실질적 해결책이 아닌 점은 동의함, 리스크가 큰 업종은 결제 프로세서에서 결정을 내리며 논의조차 안 됨, 예를 들어 푸에르토리코는 전체가 ‘리스크’란 이유로 거래 자체가 불가능했던 경험이 있음
     * 개인 경험을 공유함, 스테이블 디퓨전(Stable Diffusion) 모델 생성 사이트를 Stripe로 운영하다 9개월 만에 계정 정지 조치와 함께 4천 달러 벌금을 물었음, 자동화된 경고 메시지까지 받음, Stripe 이용 기간엔 차지백 비율이 2~3%로 무난했음, 하지만 Coinbase Commerce로 옮기자 매출이 5천 달러에서 1천 달러로 급감함
     * 본 이슈의 핵심은, 사회 구조적 신뢰와 리스크 분담의 복잡한 그물망 문제라고 생각함, 개인이나 기술만으로 바꾸기 어렵고, 세대를 거치며 점진적으로나마 바뀔 수는 있겠지만 변화의 모멘텀이 엄청나게 필요하리라고 봄
"
"https://news.hada.io/topic?id=22562","텍스트 전용 웹페이지의 아름다움","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           텍스트 전용 웹페이지의 아름다움

     * 텍스트 전용 웹페이지는 광고, 쿠키 배너 등에서 해방감을 제공함
     * 이 웹페이지들은 단순함과 빠른 속도 덕분에 모든 환경에서 쉽게 접근 가능함
     * 전체 내용을 이메일, ChatGPT, Kindle 등 다양한 형태로 자유롭게 재사용 가능함
     * 유지비가 저렴하여 개인 서버에서도 운영 가능성이 높음
     * 사용자 경험 면에서 평온하고 집중력 있는 인터넷 환경 조성에 기여함


텍스트 전용 웹페이지의 매력

     * 텍스트만 있는 웹페이지를 열 때마다 특별한 만족감을 느낌
     * GDPR 쿠키 배너, 잡다한 광고, 이메일 가입 권유, 자동 재생 동영상 등으로부터 도피처 역할을 함
     * 내용이 깔끔하며 가독성이 높고, 로딩이 빠르며 매우 단순한 구조임

무한한 확장성과 활용성

     * 페이지가 글자로만 이뤄져 있기 때문에 복제 및 공유가 자유로움
          + 친구에게 이메일로 전체 복사 및 전송 가능함
          + ChatGPT 같은 인공지능 도구에 입력하여 질문하기에 적합함
          + SNS에 올리거나, Kindle이나 Matter로 읽기 전송, 실물 종이로 인쇄 등 다양한 방식으로 활용 가능함

어디서나 빠르게 접근 가능

     * 텍스트 기반으로 모든 기기와 플랫폼에서 문제없이 동작함
     * 링크 클릭 시 즉각적으로 로딩되어 CDN 등 별도의 인프라가 필요없음
     * 호스팅 비용이 매우 저렴하여, Raspberry Pi 등 소형 서버에서도 유지 가능성이 높음

사용자 중심의 독서 경험

     * 신속하게 내용을 훑거나, 천천히 음미하는 등 읽기 경험의 자유로움이 큼
     * 오랜 시간 읽더라도 죄책감 없이 몰입하게 됨

감사를 전하는 마음

     * 텍스트만으로 웹페이지를 작성/공개하는 사람들에게 고마움을 표함
     * 외형적으로 단순하게 꾸며 사용자 참여율이 떨어질 수도 있지만, 간결함과 평온함을 지향하는 인터넷 문화에 기여함
     * 이러한 웹페이지는 보다 행복한 인터넷 환경을 만들어가는 데 중요한 역할을 함

        Hacker News 의견

     * 내가 좋아하는 예시 중 하나로 plaintextsports.com을 꼽음
       또 하나 유명하고 특히 흥미로운 사례가 있는데, 세계에서 가장 가치 있는 기업 중 하나인 Berkshire Hathaway가 진짜 공식 웹사이트로 berkshirehathaway.com을 쓰고 있음
       이건 단순히 옛날 감성을 위해 남겨둔 게 아니라 실제로 메인으로 사용하는 사이트임
       젊은 스타트업 친구들이 투명 안경을 쓰고 Warren Buffet 앞에서 BH 사이트를 '프로그레시브 웹앱'으로 바꿔보자고 피칭하면 진짜 돈 내고 보고 싶을 정도임
       이외에 많은 예시가 여기 정리되어 있음: sjmulder.nl/en/textonly.html
     * 뉴스용으로는 lite.cnn.com이 괜찮음
       특히 모바일에서 유용함
     * 이게 실제 공식 웹사이트라는 점이 신기함berkshirehathaway.com
       <font size=...> 같은 태그를 보면 살짝 아찔하지만 요즘 시대에 이렇게 간단한 디자인을 보는 건 오히려 신선함
       그리고 Geico 광고는 하드코딩된 건가 궁금함
     * news.ycombinator.com도 좋은 예시임
     * 더 많은 예시는 다음 링크에서 찾을 수 있음
          + greycoder.com/a-list-of-text-only-new-sites/
          + onepagelove.com/tag/text-only
     * BH 사이트를 프로그레시브 웹앱으로 바꾸는 피칭이 재미있다고 했는데, 나는 오히려 모바일에서 잘 읽히게 1시간만 개선해보는 피칭을 하고 싶음
       물론 BH는 아예 신경 안 쓰겠지만, 요즘 시대에는 최소한 모바일 가독성 정도는 챙기는 게 이제 별로 어렵지도 않은 일임
     * 텍스트 중심 웹 경험이 중요하다고 생각함
       요즘 웹은 트래커, 동의 배너, 광고 등 산만한 요소가 너무 쉽게 추가돼서 핵심 컨텐츠에서 주의가 너무 쉽게 분산됨
       실제로 웹과는 별도의 프로토콜도 존재함
       소규모지만 사용자층이 늘고 있고, Markdown에서 영감을 받은 Gemtext 포맷을 사용함
       이 프로토콜은 쿠키나 트래커가 없고, 2025년의 일반적인 웹 과잉 현상도 대부분 방지함
       이름은 Gemini Protocol임
       프로토콜 설계 측면에서는 완벽하지 않을 수도 있지만, 실제 유저가 있고 지금도 직접 써볼 수 있음
       Gemini Protocol 위키피디아
     * 이런 게 실제로 만들어진다는 게 놀랍고 흥미로움
       나도 예전부터 비슷한 아이디어를 생각해본 적 있음
       나는 페이지 구성을 JSON으로 표현하는 공통 UI 폼 디자이너 언어까지 상상했었음
       근데 Gemini는 페이지 내용뿐 아니라 네트워크 전송 프로토콜까지 더 깊이 파고듦
     * 기본적으로는 동의하지만, 최소한 명조체(가변폭) 폰트 정도로는 바꿔주는 게 독자에게 더 친절한 선택이라고 생각함
     * 이상적으로는, 사이트가 정말 반드시 필요한 경우가 아니라면 폰트를 지정하지 않는 게 제일 좋음
       예를 들면 코딩 튜토리얼 사이트처럼 코드 예제와 본문 텍스트가 섞여 있다면, 코드 부분만 고정폭 폰트를 쓰는 게 좋을 것임
       하지만 전체적으로는 너무 자주 오용됨
       세리프(명조)냐 산세리프냐 이런 건 사이트 쪽에서 결정하지 말고 그냥 브라우저나 사용자에게 맡겼으면 함
     * 장단점이 있는 것 같음
       나는 모노스페이스(고정폭) 폰트도 꽤 좋아하고, 특히 짧은 글에는 잘 어울리는 것 같음
       하지만 긴 글이라면 세리프(명조체) 폰트가 더 이상적이라고 생각함
       세리프가 눈을 다음 글자로 자연스럽게 인도해줘서 가독성이 더 좋다고 기억함
     * (블로그 운영자) 하하, 내 블로그임
       확실히 가독성을 더 개선할 수 있을 것 같음
     * 나는 모노스페이스 폰트 자체는 별로 신경 쓰지 않지만, 지금 선택된 폰트는 간격이 너무 어색해서 읽기 힘듦
       하루 종일 코드 에디터로 모노스페이스 폰트를 보는 입장임
       만약 바꾼다면 Fira Code나 Inconsolata 정도가 훨씬 나음
       그래도 결국 “sans-serif”로 해두고 브라우저나 OS의 기본값에 맡기는 게 나을 것 같음
       사용자가 정말 원하는 경우엔 설정으로 바꿀 수도 있음
     * 브라우저의 읽기 모드가 쉬운 해결책임
     * 미니멀한 웹사이트, 즉 텍스트 위주에 이미지는 1~2개 정도, 그리고 가독성 향상에만 집중한 스타일만 적용한 사이트는 정말 아름답다고 느껴짐
       이런 사이트는 UX 면에서 따라올 수가 없다고 생각함
       이런 사이트를 볼 때마다 인터넷 초기에 머물렀던 다른 우주를 상상하게 됨
       상업적 이해관계 없이 가벼운 페이지, 저렴한 호스팅, 진짜 검색엔진이 잘 작동하는 정보 접근성
       인터넷은 인간이 만든 최고의 발명품 중 하나였는데, 욕심 때문에 지금은 많이 망쳐버렸다고 생각함
     * Lwn.net이 이러한 미니멀하고 텍스트 중심의 대표적인 사례로 떠오름
     * 내가 항상 만들고 싶었던 블로그 플랫폼이 있음
       그냥 플레인텍스트나 마크다운 파일을 git repo에 두고, 토렌트처럼 분산 네트워크로 호스팅하는 방식임
       게시물을 올릴 때마다 자동으로 키로 서명해서 fingerprint로 DHT에서 검색 가능하게 함
       블로그 팔로우는 git repo를 다른 피어들로부터 클론하는 형태임
       폰트, 색상 등은 유저 설정에 맡기고, 아주 간단한 테마 옵션만 클라이언트 앱에 내장
       엄마 아빠도 쓸 수 있도록 심플한 앱만 만들면 됨
       무료 호스팅, 검열 저항성, 최소한의 스타일 이런 것들
       싫어할 이유가 없지 않음?
     * 진짜로 주말 프로젝트로 해보면 재밌을 것 같음
     * 컬러 대비도 중요함
       실제로 읽을 수 있을 만한 헤더 하나만 페이지에 있어도 큰 차이가 있음 (‘^_^)
     * 모든 내용을 시각적으론 보이지 않게 처리하면서, 스크린리더에만 완벽하게 읽히게 하는 ‘접근성’ 모드 같은 걸 만들어보면 어떨까 하는 엉뚱한 아이디어가 떠오름
       신입 때 공공기관 고객을 위해 접근성 기능을 최우선으로 개발했던 경험이 있는데, 그때 정말 많은 관점을 얻게 됐음
       그 후로 지금은 백엔드만 하지만 이런 주제에 더 의식적으로 신경 쓰게 됨
     * 이제 막 내 사이트를 다크 모드에서 처음 봤는데, 얼른 고쳤음
     * Chris Siebenmann의 블로그인 utcc.utoronto.ca/~cks/를 읽는 걸 꽤 좋아함
       테마가 거의 없는 미니멀한 느낌이 좋음
       하지만 만약 모든 블로그가 이런 스타일이라면 인터넷이 좀 심심할 수도 있다고 생각해서, 내 블로그는 나만의 개성도 조금 더 넣도록 했음
     * 처음 내 사이트를 만들었을 때는 Chris처럼 완전히 꾸미지 않은 상태였음
       근데 작은 수정들을 하다 보니 디자인이 점점 불어나서 결국 제대로 꾸미게 됨
       아무도 안 보는 내 개인 사이트의 즐거움은 디자인에 내 개성을 마음껏 실험해볼 수 있다는 점임
     * Chris 블로그 같은 텍스트 중심을 좋아한다고는 하는데, 나는 27인치 모니터에서 풀스크린으로 읽다 보면 너무 읽기 힘듦
     * 사실 이게 웹 초창기에는 흔한 스타일이었고, 그때의 투박함만 조금 개선한 듯한 느낌임
     * ""페이지가 그냥 텍스트로만 돼 있으니 무한 복제가 가능함
       친구 이메일로 붙여 넣을 수도 있고, ChatGPT에 던져서 질문할 수 있음
       심지어 X에 통째로 올려서 본인이 직접 쓴 척할 수도 있음
       웹에서 바로 읽든, Kindle이나 Matter로 보내든, 종이로 출력하던 어디서든 작동함
       왜냐면 그냥 텍스트이기 때문임""
       예전에 ""Wikipedia over DNS""가 나오기 전과, ""42 ways to distribute DeCSS""보다 이후 시절, tinydns로 아주 작은 웹페이지를 DNS TXT RR에 넣어 서비스한 적 있음
       dnstxt를 수정해서 HTTP 헤더를 해당 HTML 위에 출력하도록 했었음
       오늘날에는 DNS 데이터를 HTTPS로 서비스하기도 하는데, HTTP 헤더 뒤에 DNS RR이 오고, 이론적으로는 그 DNS TXT RR에 HTML도 담을 수 있음
       참고: DeCSS 예시 텍스트 배포
     * 여기 소개된 웹사이트들 중에서도 CSS가 일부 적용된 곳들이 있음
       그렇다면 텍스트 기반 사이트로 추앙받기 위해선 CSS를 어느 정도까지 허용해야 할까라는 궁금증이 생김
     * 이미지나 동영상도 좋지만, 적당한 선이 중요함
       설명이나 예시에 1~2개 정도 이미지를 쓰는 건 괜찮지만, 적당히 제한해서 느린 연결에서 로딩 시간이 문제 되지 않게 해야 함
       진짜 문제는 대부분 JS의 남용임
       JS를 안 쓰면 트래킹 배너를 구현할 수 없음
       추적도 불가능하고, 광고도 못 넣고, 동영상 자동재생도 브라우저에서 이미 차단되어서 못 함
       JS를 쓰지 않으면 마케터들이 웹사이트에 하고 싶어 하는 대부분의 불편한 기능을 하기가 거의 불가능해짐
       JS도 적당하게 쓴다면 좋은 도구지만, 한번 시작하면 금방 로딩도 느려지고 문제의 길로 빠지기 쉬움
     * 프로그레시브 인핸스먼트도 가능함
       JS가 켜져 있으면 ajax로 모달에서 폼을 띄우고, JS가 동작하지 않으면 브라우저의 기본 내비게이션으로 돌아갈 수 있음
     * JS가 없으면 트래킹을 못 한다고 했지만, 사실 쿠키도 HTTP 헤더라서 꼭 JS가 없어도 약간의 추적은 가능함
       GDPR 같은 규정, 즉 “이동의 데이터 수집/추적은 명확한 동의가 필요” 규정은 사이트가 텍스트 위주든 아니든 똑같이 적용됨
"
"https://news.hada.io/topic?id=22608","Show GN: LimeLink - API 지원, 커스텀 서브도메인 추가 (Firebase Dynamic Links 대안)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: LimeLink - API 지원, 커스텀 서브도메인 추가 (Firebase Dynamic Links 대안)

   Firebase Dynamic Links 종료(8월 25일) D-5 LimeLink 주요 업데이트 배포했습니다.

   새로운 기능:
     * REST API 지원 - 프로그래밍으로 링크 생성
     * 커스텀 서브도메인 - yourservice.limelink.org 형태
     * DNS 설정 불필요 - 대시보드에서 바로 설정

   링크:
     * 서비스: https://limelink.org
     * API 문서: https://limelink.org/guide/api-spec

   마이그레이션 급하신 분들, 가볍게 딥링크 적용하시고 싶은 분들 참고하세요.
"
"https://news.hada.io/topic?id=22591","Twin - 텍스트 모드 윈도우 환경 (Textmode WINdow)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Twin - 텍스트 모드 윈도우 환경 (Textmode WINdow)

     * X11 그래픽 환경의 핵심 개념을 텍스트 모드로 구현하여, 텍스트 디스플레이에서 윈도우 환경을 제공
     * 여러 윈도우의 독립적 표시, 외부 프로그램과의 상호작용, 메뉴 및 가젯 지원, 가상 화면 및 스크롤 등의 기능 제공
     * 마우스를 지원하는 윈도우 매니저이며, 내장 터미널 에뮬레이터도 포함
     * 다양한 디스플레이(텍스트 터미널, X11, 셀프 - Twin 자신을 다른 Twin에 표시, twdisplay 클라이언트)에서 동작 가능
          + twdisplay는 네트워크 투명 디스플레이 클라이언트로, 온더플라이로 여러 디스플레이 연결/분리 가능
     * 리눅스, macOS, FreeBSD, Android 등 다양한 플랫폼에서 테스트되었으며, 여러 아키텍처(i386, x86_64, arm 등) 지원

주요 차별점

     * 각 윈도우에 메뉴가 연동되어 있고, 포커스된 윈도우의 메뉴만 표시됨
          + 여러 창이 동일 메뉴를 공유할 수 있음
     * 윈도우의 테두리는 각 윈도우의 일부로 외부 프로그램에서 일부 커스터마이즈 가능
          + 단, 버튼/스크롤바의 위치 및 스타일은 Twin 내장 윈도우 매니저가 통제 (twinrc 파일로 Look&Feel 설정 가능)
     * 윈도우는 단순히 사각형이 아니라, 윈도우 내부에 다른 윈도우나 ‘가젯’(버튼 등) 을 포함 가능
          + 또한 윈도우보다 긴 줄, 많은 줄을 포함할 수 있어 스크롤 지원
     * 가상 화면(Virtual Screen) 지원
          + 한 화면에 64K 문자 셀 등 대용량 공간 제공, 마우스 버튼과 이동으로 스크롤 및 화면 전환 가능
     * 내장 윈도우 매니저
          + 포커스 이동, 창 이동/크기조절, 가상 화면 전환, 메뉴 동작, 키/마우스 이벤트 전달, 스크롤 동작 등 제어
     * 내장 터미널 에뮬레이터
          + 별도 xterm 등 없이 일반 tty 프로그램 실행 가능
          + 외부용 클라이언트 twterm도 포함되어 필요 시 사용 가능 (내장 코드 필요시 자동 로드)
"
"https://news.hada.io/topic?id=22619","전기기계적 재형성, 레이저 시력 교정술의 대안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       전기기계적 재형성, 레이저 시력 교정술의 대안

     * 전기기계적 재형성이라는 새로운 기술이 기존 레이저 시력 교정술을 대체할 수 있는 방법으로 연구됨
     * 이 기술은 레이저 대신 전기 신호와 기계적 힘을 이용해 각막의 형태를 바꾸는 원리임
     * 기존 수술 방식과 비교해 덜 침습적이며, 회복 속도 측면에서 이점이 있음
     * 초기에 일부 임상 시험에서 안전성과 효과성을 입증함
     * 향후 비용 효율성과 적용 가능성에 대한 추가 연구가 필요함


전기기계적 재형성의 등장 배경

     * 최근 Electromechanical Reshaping 기법이 레이저 시력 교정술(LASIK 등) 의 대안으로 해외에서 주목받음
     * 이 방식은 전기 신호와 기계적 변형력을 동원해 각막 조직의 형상을 바꾸는 새로운 개념임

기존 레이저 교정술과의 비교

     * 레이저 교정술은 고에너지 광선을 이용해 각막의 미세한 조직을 증발 또는 절삭함
     * 반면 Electromechanical Reshaping은 각막에 레이저를 사용하지 않고, 전기 신호와 물리적 압력만으로 형태 변형을 유도함
     * 이 방식은 조직 손상 위험을 줄이고, 치료 후 회복이 더 빠르고, 부작용 발생률이 낮은 점이 장점임

임상시험과 효과

     * 일부 예비 임상 시험에서 시력 교정 효과 및 안전성이 확인됨
     * 아직 대규모 임상 시험이 진행 중이지만, 눈 건강에 민감한 환자들에게 덜 부담스러운 선택지가 될 가능성 존재함

향후 과제와 전망

     * 기술 상용화 및 비용 절감 문제, 다양한 환자군에 대한 적용 가능성 검증이 진행됨
     * 장기적 효능 및 평가 기준 확보가 현재 연구의 핵심 과제임
     * 새로운 시력 교정술의 대안으로서 시장 확대 가능성 주목됨

        Hacker News 의견

     * 라식만 언급하는 기사에 대해 맥락을 덧붙이고 싶음, (Trans-)PRK와 SMILE 같은 다른 옵션도 있다는 점을 강조함, 라식 이후 흔한 부작용 대부분이 각막을 '조각'해서가 아니라, 플랩을 만들 때 절단해야 하는 신경 때문이라는 점을 설명함, 이 신경은 플랩 주변에서 느리게, 불완전하게 재생되며 이는 라식에서 안구건조증이 두드러지는 주요 원인임, PRK와 SMILE은 이런 신경손상에서 조금 더 자유로우며, 각각의 수술별로 장단점이 있음, PRK의 경우 각막 상피 전체가 다시 자라야 하므로 일부는 매우 고통스럽고 '즉시 완벽한 시력' 효과를 기대하기 힘듦, 하지만 상피가 자연 재생되어 단기·장기 부작용(특히 건조증)이 더 적다고 이론적으로도, 논문에서도 나와있음, 실제로 안과의들은 직접 수술받을 때 PRK를 많이 선택함, SMILE은 모든 장점이 결합된 느낌이지만
       훨씬 비싸며 장기 데이터가 부족함, 다만 현재까진 매우 고무적인 결과임, 전체적으로 어떤 선택도 삶의 질은 확실히 높이고, 라식의 흔한 부작용조차 타 의학 분야 선택적 시술에 비해 규모가 크지 않다는 점을 기억해야 함, 이번 새로운 수술법이 PRK보다도 부작용이 더 적을지 궁금함, SMILE처럼 결론을 내리기까진 앞으로 수십년이 걸릴 수 있음, 추가로 이번 기법이 지금까지 각막 절삭술 대상이 아니었던 사람들에게도 적용될 가능성이 있다는 점을 들어 더 큰 가능성을 봄, 본인은 근시 교정도 상한에 가까웠고 상피도 얇아서 이런 기술이 더 반가움
          + PRK에서의 상피 재생이 매우 고통스러울 수 있다는 점을 강조함, 스스로 극심한 통증 인내력이 있는데도 의사의 약 복용·수면 지시를 무시했다가, 이후 손으로 눈을 파내면 더 덜 아프지 않을까 진지하게 고민할 만큼 고통스러웠던 경험을 공유함, 그리고 12년 후엔 결국 컴퓨터 작업 때문에 다시 안경이 필요해졌음
          + PRK 이후 건조증이 적다는 주장과 달리, 본인은 Trans-PRK를 받고 6개월이 지났지만 여전히 심한 건조증을 겪고 있음, 직접 수술받았냐고 묻고, 자신의 회복 과정이 궁금하다고 말함, 본인은 결과에 불만족이며 어떻게 대처할 수 있는지, 책임질 곳이 있는지 알고 싶어함
          + 신경 절단 합병증을 피하고 싶어서 PRK를 선택했다고 말함, 회복기간은 힘들었지만 1주일 후 개발자로 복귀할 수 있었고 그만한 가치가 있다고 느낌
          + SMILE이 가격이 매우 높다고 들었는데, 본인이 거주하는 지역에서는 LASIK보다 1.5배 이내이고, 수십년간 시력이 교정된다고 생각하면 가격 이슈가 실제로는 크지 않다고 언급함
          + 각막이 얇아서 라식이나 어떤 안과수술도 후보가 될 수 없었는데, 이번 새로운 접근법에는 큰 기대를 갖고 있음, 아마 이 기술로 인해 후보가 될 수도 있다는 희망을 표함
     * 본인은 각막확장증(Keratoconus)을 앓고 있다고 밝힘, 각막 강도가 약해 정상 형태를 잃고 여러 초점이 랜덤하게 생긴다고 설명함, 두 눈의 초점이 무질서하게 배열돼 실제로 동시에 수십 개의 초점을 갖는 셈이라고 묘사함, 멀리 볼 땐 미묘하게 왜곡된 유리창 너머 보는 것 같고, 가까이는 텍스트가 수십 겹 겹쳐져 읽고 이해 불가함, 고전에는 20/20 이상의 시력을 가졌는데 지금은 매우 불편해짐, 방이 어두우면 조그만 LED 전구를 볼 때 모든 초점이 보이고, 각막 형태는 볼록/오목이 아닌 완전 무질서 그 자체임, 본인은 하드 렌즈(특히 scleral type)를 착용하는데, 안구 흰자 위에 얹혀져 각막 전체를 감싸고 완전한 형태로 만들어줘서 시력을 되찾을 수 있음, 다만 번거롭긴 해도 시력은 유지 중임, 만약 이번 새 방법이 각막을 근본적으로 재형성해줄 수 있다면
       엄청난 변화일 것임, 각막을 강화해 추가 손상은 막는 시술은 있어도 이미 망가진 상태는 복구가 불가능하다 설명함
          + scleral 렌즈에 대한 긍정적인 이야기를 듣고 본인도 시도해볼 계획임을 밝힘, 본인은 각각의 눈에서 여러 겹 이미지가 생겨 약간 불편하지만 scleral 렌즈가 더 심각한 케이스에도 잘 작동한다는 경험을 들어서 다행이라고 느낌
     * 본인은 새로운 기술에 신뢰가 가지 않는다고 느낌, 회로 설계 작업 중 시력이 갑자기 이상해졌고, 망막 박리를 겪었음, 첫 시술은 실패해 두번째에 성공했지만 이후 백내장이 생겨 다시 전문의를 찾아야 했음, 백내장 전문의는 본인이 '레이저에 알레르기 있다'며 수술을 권하지 않아 오디오북에 익숙해지라고 했음, 하지만 프로그래밍과 GUI 설계, 책쓰기 등은 오디오북으로 불가능하다며 불편한 이중 시력과 운전 포기, 극단적인 조정 속에서 살아가고 있음
          + 어떤 맥락에서 새로운 기술을 신뢰하지 못하는지 궁금해함
          + lattice degeneration을 앓고 있어 걱정된다고 하며, 이상징후(‘wonky’한 증상)가 무엇이었는지 물어봄
     * 처음 2019년 ACS 패널에서 이 연구에 대해 들은 후 오랜만에 새로운 소식이 나왔다고 반가워함, YouTube 링크를 공유함, 원래는 비중격 만곡증을 덜 침습적으로 교정하는 쪽으로 시작하려 했다가 더 어려운 문제(시력 교정)를 먼저 시도한 것 같다고 함, 본인은 시력이 엄청 나쁘진 않지만 점점 저하되고 있어 평생 두 번 받을 수 있는 레이저 수술로는 만족할 수 없어서 이런 새로운 접근에 적극적으로 관심이 있음
          + 본인도 40대가 되며 20/10 시력에서 먼 거리 작은 글씨를 포기한 삶으로 변해 삶의 질에 큰 변화는 없지만 자존감에는 영향이 있었다고 말함
          + 관련 추가 읽을거리로 Phys.org 기사 링크 를 공유함
     * 라식 등으로 안경을 벗을까 고민할 때마다, 지난 23년간 안경이 두 번이나 본인의 눈을 날아온 서버 팬 날개로부터 보호해줬던 경험을 떠올림, 그 덕분에 실명할 뻔한 순간을 피했다고 밝힘
     * 본인은 Ortho-K를 이용해 하루 24시간 넘게 20/20 시력을 유지한다고 소개함, 매일 밤 자는 동안 렌즈를 착용하고 아침에 빼면 바로 좋은 시력으로 하루를 시작 가능함, 매일 쓰지 않아도 유지된다고 함, Ortho-K는 밤새 각막 형태를 잠깐 교정해주는 '리테이너 콘택트렌즈'로 여기서 소개된 신기술과 유사하지만 pH 변화와 전기 자극은 없다고 설명함
     * 재미있게 읽었음, 근시에 대해 말하자면 Ortho-K와 캐나다 검안사가 개발한 튜닝된 버전도 있음, K-test 후 맞춤형 렌즈를 제작해 매일 특정 운동을 하며 착용하는 방법인데, 수개월 내 시력이 교정됐다는 후기가 많다고 전함
     * 야간 빛 번짐이나 헤일로 현상을 현재 어떤 기술로도 완전히 해결할 수 없고, 레이저로 오히려 악화된다던데 이번 기술로도 수정 가능할지 묻고 있음, 본인은 렌즈도 관심 없고 안경만 써왔는데 야간 운전에서 빛 번짐이 심각한 문제라고 토로함
          + 야간 빛 번짐은 안구 내부에서 빛이 산란돼서 생기며 원인은 단순 시력문제 외에 건조증, 초기 백내장, 각막 등의 미세한 이상처럼 다양하다고 설명함, 안경으로는 이런 미세한 산란까지 못 잡지만 렌즈(특히 경성 또는 scleral)로는 완화가 가능함, 렌즈에 관심이 없다면 보다 정밀한 안과 검진을 권하며, 초기 백내장이 야간 빛 번짐의 흔한 원인이라고 안내함, 레이저 수술은 오히려 이러한 증상을 악화시킬 수 있어 신중한 접근이 필요하고, 건조증 개선, 기능성 코팅된 안경, 백내장 등 원인별 치료가 필요하다고 설명함
          + 난시일 가능성을 제기하며, 본인도 같은 증상을 겪는데 렌즈가 난시와 빛 번짐 거의 다 잡아준다고 언급함
          + ""astigmatism(난시)""라는 단어를 찾는 것 같다고 코멘트함
          + 눈 수술 전에도 해당 증상이 있었는지 묻고, 본인 아버지는 라식 후 헤일로가 매우 심해져 야간운전에 큰 지장이 있었다고 전함, 15년 전이라 지금은 개선됐는지 궁금해함
     * 이번 기술이 연골까지 재형성할 수 있다면, 혹시 성형외과 앞에 코 재수술 대기 줄이 길어질지도 모른다는 농담을 던짐
     * 이 방법은 이상적으로 들림, 한 가지 궁금증은 생체 세포에서 영구적인지, '잠재적으로 가역적(potentially reversible)'이라고 적혀 있어 영구적이 아닐 수도 있다는 생각을 함
          + 현재도 단순 기계적인 리모델링이 가능한 제품이 있는데, 두꺼운 콘택트렌즈를 끼고 자면 아침에 교정시력이 유지되지만 10시간 이내 다시 원래 상태로 돌아간다고 설명함
"
"https://news.hada.io/topic?id=22620","크로아티아 프리다이버, 29분 숨참기 신기록 경신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      크로아티아 프리다이버, 29분 숨참기 신기록 경신

     * 크로아티아의 프리다이버 Vitomir Maričić가 산소 사용 조건에서 29분 3초로 세계 최장 숨참기 기록을 경신함
     * 이 기록은 2024년 6월, 크로아티아 Opatija의 호텔 수영장에서 공식 심판과 100명의 관중 앞에서 달성됨
     * 기록 달성을 위해 사전 산소 호흡 과정을 거쳤으며, 이는 공식 규정에 따라 허용되는 절차임
     * 이전 기록은 Budimir Šobat(2021년 24분 37초) 가 보유, 그보다 4분 이상 경신한 수치임
     * 이 방법은 영화 촬영, 전문 프리다이빙 등에서 신체 이완과 호흡 집중을 극도로 요하는 고난도 기술임


기록의 배경과 의의

     * 산소를 사용한 세계 최장 숨참기 기록은 단순한 체력뿐 아니라 마치 마술 공연 같은 성격도 있음
     * 미국의 마술사 David Blaine이 한때 이 기록을 보유한 사례도 있음
     * 이번 신기록 보유자인 크로아티아의 Vitomir Maričić는 이미 전통적인 프리다이빙 분야에서 여러 수상 경력이 있음

기록 달성의 과정

     * Vitomir Maričić는 29분 3초라는 새로운 Guinness World Record(GWR) 를 세움
     * 이전 기록을 4분 이상 넘어섬
     * 기록은 2024년 6월 14일 크로아티아 Opatija의 3m 깊이 실내 풀장에서 관중과 5명의 공식 심판이 지켜보는 가운데 이루어짐
     * 도전자는 준비 단계에서 산소를 흡입하며, 이는 GWR 가이드라인에 따라 최대 30분까지 허용되는 과정임
     * 본 기록에서는 풀장 바닥에 똑바로 누운 자세로 도전을 이어감

도전 중 느낀 점과 신체 반응

     * 20분이 지나면서 정신적으로는 더 편안해졌으나, 신체적으로 특히 횡격막 경련으로 인해 점점 어려워지는 경험을 함
     * 정신적 집중과 팀, 가족, 친구의 응원이 큰 힘이 되었음을 밝힘

세계 기록 변천사 및 비교

     * 이전 GWR 기록은 같은 크로아티아 출신 Budimir Šobat가 2021년에 56세 나이로 24분 37초를 달성하며 34초 차이로 경신했던 이력이 있음
     * 2008년엔 David Blaine이 17분 4초로 TV쇼에서 신기록을 세움
     * AIDA 공식 대기 정지(에어 사용) 세계기록은 프랑스의 Stéphane Mifsud가 2013년에 세운 11분 35초
     * GWR 정지 잠수 부문은 세르비아의 Branko Petrović가 11분 54초로 보유
     * Maričić의 AIDA 정지 apnea 최고 기록은 10분 8초임
     * 2021년에는 한 번의 호흡으로 107m 걷기 세계 기록도 달성함

산소 프리브리딩(Pre-breathing) 기술과 원리

     * 산소 프리브리딩은 일부 영화 촬영 현장에서도 배우가 오랜 시간 수중 체류를 위해 사용함
     * 탈질소화 과정으로, 폐 내 질소를 산소로 교체하여 일반 체내 산소량(약 450ml)에서 최대 약 3리터까지 증가 가능
     * 이산화 탄소 축적을 줄이면, 호흡 욕구가 지연되어 '안전한 무호흡 시간'이 연장됨
     * 극도의 복부 이완 호흡과 심박수 저하, 심신의 깊은 이완, 높은 자기 인지 및 정신적 통제가 요구되는 과정임

참고 기사

     * 기록과 관련한 다양한 프리다이빙, 숨참기, 사고 소식이 추가로 링크되어 있음

        Hacker News 의견

     * 이 기록은 산소를 보조적으로 사용한 것임, 즉 다이버가 순수 산소를 들이마셨고 (기사에 따르면) 이로 인해 이용 가능한 산소량이 450mL에서 3L까지 증가함, 그래도 참 인상적인 기록임, 헐리우드에서 수중 촬영 시간을 늘리기 위해 이런 트릭이 종종 쓰인다는 사실은 몰랐음, Avatar 2에서 Sigourney Weaver가 70대에 6분 30초 숨참기 훈련을 했다는 소식에 감탄했음, 그런데 기사에 세부사항이 너무 부족해서 아쉬움, 예를 들어 참가자가 의식이 있는지 어떻게 확인하는지, 본인이 실신 직전의 한계를 어떻게 아는지 궁금함
          + Sigourney Weaver가 70대에 6분 반 숨참기 훈련을 했다니 놀라움, Avatar 2 촬영 중에는 Kate Winslet이 Tom Cruise의 예전 기록을 깨고 7분 이상을 기록했다고 함, 관련 기사 여기
          + 참가자의 의식 확인은 코치나 세이프티가 팔을 꼬집거나 신호를 주면 참가자가 손가락을 들어 보임, 이런 훈련을 오래 하면 자기 신체와 한계를 잘 알게 됨, 하지만 대회에서는 블랙아웃이 종종 발생하기도 하고, 그래서 세이프티들이 존재함, 결과적으로 프리다이빙 대회는 안전하게 한계 도전을 해볼 수 있는 곳임
          + 이미 답변된 내용이지만, 의식 확인은 손에 압력을 가하고 그에 대한 응답 압력을 통하는 식임, 한계는 숨을 오래 참으면 몸에 근육 경련이 오기 시작하는데, 몇 번의 경련이 언제 오는지는 개인마다 다르지만 한 사람에게는 꽤 일관적임, 그래서 프리다이버는 “나는 X분 후 X번째 경련까지 참을 수 있다”는 걸 기준으로 삼음, 침대에 누워 숨을 참으면서 첫 경련까지 얼마나 걸리는지 훈련하는 것도 재미있는 방법임
          + David Blaine이 한때 이 기록을 보유했었고, 그가 숨참기 과정을 설명한 TED 강연이 정말 인상적임 TED 링크
          + 물 속은 육지보다 숨참기가 더 쉬움, 포유류 잠수 반사가 큰 도움을 줌
     * 이 기록은 순수 산소를 들이마신 뒤 29분 4초임, 일반 공기로만 한 기록은 11분 35초임, 어쨌든 모두 엄청난 기록임
          + 70년대 내 어린 시절에는 기록이 대략 3~5분(혹은 7분?) 쯤이었던 기억임, 우리 동네엔 집마다 작은 다라이가 있었고, “이 정도면 우리도 할 수 있겠지?” 하며 도전해봤으나 실제로 1분만 넘겨도 힘들었음
          + Stephane Mifsud의 11분 35초 ""일반 공기"" 무호흡 기록은 2009년 세워진 뒤로 지금까지 유지되고 있음 (AIDA 기준), 당시에는 기존 기록을 크게 뛰어넘어서 엄청난 관심과 의혹도 많았음, 기억하기로 본인 집 수영장에서 달성했고, Mifsud는 평균 성인 남성의 거의 두 배에 달하는 폐활량을 가짐, 기록 달성 직후에는 고글이나 코막이 제거, 심판 쳐다보기, 손신호 보내기 등 프로토콜을 완벽하게 지키는데, 11분 넘게 산소 결핍이 있었음에도 너무 또렷해서 놀라웠음, 영상 여기
          + 순수 산소는 위험하다 생각했었는데, 실제론 산소 중독은 압력에 관련된 이슈임을 알게 됨, 관련 내용은 위키에서 확인 링크
          + 11분 숨참기는 거의 죽음을 목격하는 경험이라는 느낌임
          + 11분 이상 숨참기는 정말 말도 안 되게 놀라운 일임
     * 정말 놀라움, 순수 산소로 이런 성과가 가능하다 해도, CO2 축적은 어떻게 피하는지 궁금함, 또는 CO2 수치를 버텨내는 훈련을 어떻게 했는지가 궁금함, 세포가 O2를 쓰고 CO2를 혈액에 방출해 탄산을 만들어 pH가 떨어지는데, 신체는 이에 별다른 관심이 없고, 이게 바로 우리가 숨이 막히다 느끼는 반응임, 자유형 수영 호흡을 익힐 때 이 원리를 알았으면 더 도움이 됐을 것 같음, VO2 max 뿐 아니라 CO2를 버티는 능력까지 둘 다 훈련이 필요함
          + 몸은 산소 부족을 직접 알아차리지 못함, 그래서 일산화탄소 중독이나 산소 결핍을 모를 수 있음, 우리가 느끼는 건 CO2가 쌓일 때이고, 계속 숨을 쉬면 CO2가 안 쌓임, 프리다이빙에서는 CO2 축적을 피할 수 없음, 대신 그 고통을 어떻게 견디는지를 배우는 것이 중요함, 횡격막 경련이 올 때 컨트롤하는 법을 익히는 것이 중요함, 단순히 연습(CO2 테이블)으로 감각을 익힐 수 있고, 나도 금방 5분까지 늘릴 수 있었음, 한 가지 “트릭”은 과호흡인데 절대 권하지 않음, 과호흡은 CO2를 급격히 날려서 숨참는 시간을 늘릴 수 있는데, CO2 신호가 너무 늦게 와서 실신할 위험, 실제로 이 신호가 가장 중요한 생존 기준임, 특히 잠수 전에 과호흡하면 의식 잃기 쉽기 때문에 절대 조심해야 함
          + CO2는 피할 수 없고, 다만 그 속도를 늦출 뿐임, 가장 중요한 건 “이완”이고, 뇌가 평온해야 산소 소비가 줄어듦, 느린 대사도 도움이 돼서 큰 대회 전엔 단식하는 경우가 많음, 그리고 CO2 내성은 훈련을 통해 키울 수 있음, 훈련하면 매우 높은 CO2 농도에서도 패닉 없이 버틸 수 있게 됨
     * 잠깐 숨참기 훈련에 빠졌던 적이 있었는데, 단순한 테크닉만 적용해도 오래 참을 수 있다는 게 신기했음, 예를 들어 폐를 가득 채운 채 느슨하게 스트레칭하거나, 폐에 추가로 공기를 담는 packing, 혹은 동물 이름을 계속 되뇌이는 방법 등임, 하지만 뇌 손상 위험이 궁금해졌고 명확한 과학적 근거는 못 찾음
          + ""동물 이름을 반복한다""는 게 무슨 의미인지 궁금함
          + 산소포화도 측정기로 수치를 본 적 있냐고 물어보고 싶음, 일반적으로 포화도가 90% 밑으로 안 내려가면 뇌 손상 위험은 매우 낮음, COPD 환자 중에도 포화도가 80~70%로 오랜 시간 생활하는 사람도 많음, 하지만 폐가 안 좋은 사람 입장에서는 신체 하나밖에 없고, 약물이나 치료법도 근본적 해결은 아님
     * “blood scrubber(혈액 세정기)”라는 게 있을까 궁금함, 투석처럼 CO2만 제거해 주고 혈액 산소화도 해준다면 물속에서 훨씬 오래 있을 수 있지 않을까 상상함, 미래의 스쿠버는 폐의 가스 교환 역할 자체를 생략하는 방향으로 발전할 가능성도 흥미로움
     * 숨참기와 프리다이빙에 대해 궁금한 점이 있음, 오랜 시간 산소가 결핍된 상태면 세포 특히 뇌세포가 죽지 않을까 걱정됨, 만약 손상이 없다면 우리는 어떻게 그걸 확신할 수 있는지 궁금함
          + 실제로 손상이 일어남, 그래서 CO2 농도가 높은 공간에 오래 있을 경우 창문을 열라는 얘기를 듣는 것임
     * 산소 트릭으로 스노클링 시간을 실용적으로 늘릴 수 있는지 궁금함, 다이빙 장비는 관리가 번거롭고 신뢰가 어려워서 잘 안 했지만, 가볍고 단순한 스노클링은 정말 즐거움, 보트에서 30분간 순수 산소를 흡입하면 반복적으로 더 오래 잠수할 수 있을지 궁금함
          + 숨쉬고 싶은 욕구는 산소가 아니라 CO2 농도가 높아져서 생김, 훈련되지 않은 경우 순수 산소 흡입은 큰 영향 없음, 순수 산소는 자체로 위험과 이슈가 많아서 훈련이 반드시 필요함, 단순함과는 거리가 멀음
          + 순수 산소를 써도 별로 재미는 없을 것임, 결국 숨쉬기 본능은 CO2가 쌓여서 발생하고, 시도 중 상당 시간 동안 숨쉬고 싶은 욕구와 싸우게 됨
          + 얕은 물에서 반복 연습하는 것이 용량과 자신감을 기르는 최고의 방법임, 혹은 winhoff 방식도 있음, 집에서 소파에 앉아서도 할 수 있어서, 위험 상황(운전 등)만 아니라면 언제든 반복 연습 가능함, 단지 풍선을 부는 것처럼도 체크 가능함(그래도 위험성 있으니 조심 필요), 나도 이 연습을 통해 올림픽 풀장에서 두 번 왕복 전 구간을 숨 참으며 수영할 수 있었고, 느리고 꾸준한 스트로크를 유지하는 게 중요했음
     * 그의 비장은 정말 클 것으로 예상됨, 관련 기사
          + 비장이 크면 격렬한 스포츠나 오토바이 사고에서 특히 조심해야 함, 비장은 피 덩어리라서 다치면 치명적일 수 있고, 부풀거나 염증이 생기면 아주 위험, 어쨌든 정말 대단한 해킹과 퍼포먼스임
          + 관련 기사 아카이브
          + 인도네시아 토기안 아일랜드에서 2주간 휴가를 보냈는데, 이 지역에 이런 ‘sea gypsies’ 커뮤니티가 많았음, 이들은 거뜬히 5~6분 숨참기로 20미터까지 프리다이빙해서 작살로 물고기도 잡음, 직접 보는 게 정말 인상적이었음
          + 이런 커뮤니티의 아기들도 비장이 큰지 궁금함
     * “자발적으로 물속에서 산소를 들이마시고 숨참기”에서 자발적이라는 게 정말 중요한 포인트임
          + 무엇보다도 살아서 나와야 한다는 점이 가장 중요함
     * 다이버가 산소 용량을 높이기 위해 어떤 보조 기술을 썼을지 궁금함, 예를 들면 적혈구 수를 늘리거나, 기존 세포의 산소 저장력을 높이거나, 혹시 CO2를 흡수시켜주는 음식이나 음료가 있는지 궁금함
          + 답은 그냥 끊임없는 훈련, 그리고 아마 타고난 좋은 유전자도 한몫할 것임
          + 흥미로운 건 단기적으로 CO2 자체는 그냥 느낌만 더럽게 만든다는 점임, 이는 포유류 진화에서 동굴같은 환경에서 목숨을 부지하는 느낌과 연결됨, 훈련하지 않으면 저산소증은 체감하기 어렵고, 우선적으로 느끼는 건 CO2임
          + 그냥 산소 흡입임
"
"https://news.hada.io/topic?id=22593","전통 산업에서의 버티컬 SaaS 구축: "하지 말아야 할 것들" 과 "기존 워크플로에 맞는 AI 개발"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       전통 산업에서의 버티컬 SaaS 구축: ""하지 말아야 할 것들"" 과 ""기존 워크플로에 맞는 AI 개발""

     * GrubMarket에 인수된 Butter 창업자가 2020년부터 5년간의 경험을 정리한 글

파트1 : 하지 말아야 할 것들

  시작점: 팬데믹과 디지털 전환의 기회

     * 2020년 팬데믹 기간, 식품 산업의 디지털 전환 가능성을 보고 Butter 설립.
     * 발견한 문제:
          + 셰프들은 여전히 수기로 작성하는 주문서와 전화/문자를 이용한 재래식 방식 선호
          + 도매업체는 낡은 기술(1990년대 ERP, 엑셀 재고 관리, 종이 수표 결제)에 의존
               o 고객 주문 입력에만 하루 6시간 소요
     * 솔루션 계획:
          + 핵심 워크플로우를 캡처하고 '기록 시스템' 역할을 할 수 있는 올인원 클라우드 기반 ERP로 핵심 워크플로 디지털화
          + 결제, 대출, 급여 등 금융 서비스를 통합하여 고객 가치를 극대화(ACV)
          + 셰프와 도매업체 모두를 위한 원활한 커뮤니케이션 프로세스를 도입, DoorDash 스타일의 주문 앱으로 플랫폼 네트워크 효과 생성
            ((유니콘 기업으로 급부상한 또 다른 주문 앱인 Choco의 영향을 받음)

  하지만 실패

     * 당연히 성공할 줄(no-brainer) 알았지만, 우리가 완전히 틀렸음

    함정 1: 기술적 복잡성과 과도한 커스터마이징

     * ERP 구축이 단순할 것이라 생각했지만, 실제로는 고객마다 서로 다른 요구사항으로 인해 개발 리소스 고갈
          + 예: 키보드 단축키, 데이터 입력 화면 레이아웃, 특정 송장 형식
     * 결과: 확장성이 없는 커스터마이징 의존 제품으로 변질

    함정 2: 긴 영업 주기

     * ERP 시스템 전환은 복잡하고, 많은 부서의 동의가 필요:
          + 고객사들은 현재의 불편함에도 불구하고 전환을 꺼림
          + 레스토랑의 바쁜 시즌에는 판매 기회가 제한됨
     * 결과: 낮은 거래 성사율(목표치의 20~30% 수준)

    함정 3: 낮은 지불 의향과 긴 수익 활성화 주기

     * 고객사 대부분이 낮은 이윤(약 5%)으로 운영:
          + QuickBooks에 월 $80 지불하던 고객들에게 ERP 업그레이드 비용은 부담됨
     * 추가적인 핀테크 및 주문 앱 매출도 활성화에 긴 시간이 소요

    함정 4: 지나치게 많은 실험

     * 초기 단계에서 여러 수익 모델과 네트워크 효과를 동시에 시도:
          + 단일 성공 사례를 확보하지 못한 상태에서 과도한 전선 확장
     * 결과: 팀 번아웃과 낮은 반복 실험 속도

  뼈 아프게 얻은 교훈

     * Butter를 운영하면서 많은 자부심을 느낀 순간들이 있었음:
          + 새벽 2시에 일어나 창고에서 잠을 자며 성공적인 온보딩을 위해 노력
          + 고객이 사랑한, 복잡하지만 직관적인 소프트웨어 구축
          + 체계적인 구현 가이드 개발
     * 하지만 확장 가능한 벤처 비즈니스 구축에는 실패
     * 교훈 1. 아이디어를 고차원적인 가설에만 의존하지 말 것:
          + 창고, 현장, 후방 작업자와 직접 소통하며 실질적인 통찰력을 얻어야 함
          + ""진리 탐구""를 목표로 이야기 나누기, 기존 아이디어를 재확인하려는 대화는 지양
     * 교훈 2. 성공적인 제품 구축을 위해 필요한 요소:
          + 문제를 깊이 이해하는 사용자 확보:
               o 현재 상태를 유지하는 고통이 변화의 마찰보다 크지 않다면 아무도 시스템을 바꾸지 않음
               o 변화는 몇 가지 촉매만으로 충분히 이루어질 수 있음
          + 충분한 지불 능력:
               o 고객이 솔루션을 감당할 재정적 여유가 없다면 제공하는 가치로는 회사의 수익을 유지할 수 없음
          + 기존보다 10배 나은 제품 경험:
               o 고객이 전통적일수록 더 극적인 개선 필요
               o 고객이 오랫동안 기존 방식을 유지해온 이유를 해결하는 방식으로 접근
          + 단순함의 중요성:
               o 초기 제품은 간단하고 쉽게 채택할 수 있어야 함
               o 예: 화려한 일본식 비데를 파는 대신 기본적인 배관 문제 해결에 집중
     * 교훈 3. 비즈니스 모델과 SaaS 성공 조건:
          + 거래 규모와 영업 주기(딜 속도)가 균형을 이뤄야 함.
          + David Sacks의 ""The Difficulty Ratio"":
               o 고액 ACV(Annual Contract Value)와 낮은 거래 속도 또는 그 반대의 조합은 가능
               o 그러나 ACV가 낮고 거래 속도가 느리면 실패 확률이 높음
          + Butter의 경우:
               o 추가 수익원에도 불구하고 낮은 거래 속도와 낮은 ACV 구간에 속함
               o 특히 전체 수익 활성화 주기까지 거래 속도가 매우 느림

  마지막 생각

     * 돌이켜보면, 전통적인 관행과 낡은 기술에 의존하는 산업에서 수직 SaaS를 구축하는 복잡성을 과소평가했음
     * 디지털 솔루션만으로는 채택을 유도하기에 충분하지 않았음
     * 대신, 기존 방식보다 획기적인 개선 효과를 제공해야 하며,
          + 고객이 이해할 수 있는 방식으로 이를 전달해야 함.
          + 즉각적으로 적합하다는 인상을 주지 못하면, 고객은 익숙한 기존 방식을 고수하게 됨
     * 교훈: 기존 워크플로를 존중하면서 실질적인 가치를 증명하는 접근이 성공의 핵심


파트 2: 기존 워크플로와 잘 맞는 AI 개발

  출발점: 전통적인 방식과의 충돌

     * 초기 시도:
          + 전자상거래를 통한 도매업체의 주문 입력 프로세스 현대화를 목표로 도구 개발
          + 문제:
               o 셰프들은 여전히 전통적인 방식(전화, 문자)을 선호하며 디지털 시스템에 쉽게 적응하지 못함
               o 새로운 시스템은 기존 방식을 완전히 대체할 만큼 충분한 가치를 제공하지 못함
     * 고객 의견 청취:
          + 활성 사용자, 이탈 사용자, 앱 반대자 등 다양한 고객군과 인터뷰 진행
          + 앱을 통한 주문이 전화/문자/이메일 대비 10배 나은 경험이 아니라고 판단:
               o 실시간 제품 가용성과 배송 상태에 대한 가시성이 부족
     * 도매업체의 어려움 파악:
          + 도매업체는 여전히 수시간에 걸친 매뉴얼 주문 입력에 시달림
          + AI 도입 아이디어:
               o 비정형 데이터를 처리할 수 있는 대규모 언어 모델(LLMs)이 적합
               o AI를 통해 복잡한 작업 자동화 가능
               o 전 세계 데이터의 약 80%가 비정형 데이터라는 점에서 패러다임 전환의 가능성을 봄
     * 전략 전환:
          + 공급업체와 운영자를 완전히 디지털 워크플로로 강제하지 않음
          + 대신, 기존 프로세스를 보완하는 AI 기반 도구 (예: Butter’s AI Order Assistant) 개발:
               o 기존 워크플로에 자연스럽게 통합되도록 설계.
               o 기술적으로 뒤처진 식품 유통 산업을 현대화할 수 있는 실질적 솔루션으로 자리 잡음.

  AI로의 전환: 단순 약속이 아닌 실질적 구현

     * AI 성공의 핵심:
          + ""더 세련된"" 제품이 아닌, 사용자의 작업을 실제로 완료하는 제품이 필요
          + AI Order Assistant:
               o 셰프와 도매업체가 기존 프로세스를 바꾸지 않아도 되는 방식으로 설계
               o 기존 워크플로에 자연스럽게 통합
     * 자연어 처리 기반 주문 관리:
          + 음성 명령이나 문자 메시지를 처리할 수 있는 AI로 프로세스를 단순화
          + 전면 시스템 교체가 아닌 추가 도구(add-on)로 제공:
               o 빠르게 도입 가능
               o 기존 ""디지털 전환""의 복잡한 문제를 회피
     * 고객 온보딩 과정:
          + 이메일 및 음성사서함 데이터를 ERP와 연계해 구조화된 구매 주문 데이터로 변환
          + 셰프의 선호도(예: ""2박스의 새우"")를 디지털 시스템에 저장:
               o 과거 주문 패턴과 주문 가이드를 활용해 제품 변형을 정확히 이해.
               o 예: ""4-6 Tiger Shrimp Frozen""인지 ""16-20 EZ Peel Shrimp""인지 AI가 구분
     * 사용자 피드백 반영:
          + AI 모델의 100% 정확성을 기대하지 않음:
               o 광범위한 UX 인터뷰를 통해 사용자가 AI 출력 수정 가능
               o ERP의 단축키를 활용해 키보드 입력으로 모든 작업 가능하도록 설계
          + 결과:
               o 주문 처리 시간이 96% 이상 단축
               o 백오피스 직원의 고부가가치 작업(품질 관리, 고객 관계 관리)으로 전환 가능
     * GrubAssist로 확장:
          + GrubMarket에 인수 후, AI Order Assistant를 GrubAssist로 확장
          + 기존 ERP 시스템에 자연어 기반 비즈니스 인텔리전스 및 분석 공.
          + 식품 산업의 기존 워크플로를 방해하지 않고 매끄럽게 통합
     * 기존 워크플로와의 통합이 AI 성공의 열쇠. 복잡한 전환 없이 쉽게 적용 가능해야 함.

  LLM 제품 개발에서 얻은 교훈

     * 기술적 한계를 고려한 설계:
          + LLM은 강력하지만 여전히 신뢰성과 속도 면에서 한계가 있음.
          + 효과적인 설계로 한계를 보완:
               o 예: 레스토랑/소매업체는 주문을 다음 날 아침 처리하므로, 백그라운드 처리를 통해 속도를 희생하고 더 높은 추론 능력을 가진 모델 선택 가능.
     * 속도를 우선시하고 완벽을 나중에 추구:
          + 초기 단계에서는 ""완벽한 모델""을 찾는 데 얽매이지 말 것.
          + 시장 진입을 위한 간단한 기술(예: RAG) 활용:
               o 적절한 맥락을 제공하면 간단한 방법도 강력하게 작동.
               o 기본 모델이 개선되면 AI 제품 자체도 자동으로 발전.
     * 기본을 확실히 다지기:
          + 유연한 실험 환경 제공:
               o 모듈형 아키텍처 설계로 모델 또는 기능 교체를 쉽게 하고 빠르게 반복 가능.
               o 명확하고 정량화 가능한 제품 내 피드백 시스템 통합 필요.
     * 인터페이스가 제품 성패를 좌우:
          + ""완벽한"" 모델이 있어도 작업의 20%는 인간 검증이 필요하다는 가정으로 설계.
          + 상호작용을 단순하고 직관적으로 만들어 사용자 참여 유지:
               o 사용자 검증 과정을 강화하면 제품 개선에 중요한 데이터를 확보 가능.
     * 비정형 지식 캡처:
          + 전통적인 산업에서는 중요한 정보가 디지털화되지 않고 사람의 기억에 의존.
          + 예: 고객 선호도가 영업사원 Joey의 머릿속에만 있다면, 이를 캡처할 수 있는 인터페이스 구축.
          + 이러한 통찰력은 모델의 차별화를 강화하고 지속적으로 데이터 우위를 제공.

    6. 피드백 루프를 통해 정확성 향상:

     * 엔지니어링만으로는 한계:
          + 사용자 피드백을 제품 내에서 직접 수집할 수 있는 매끄러운 방법 제공.
          + 피드백을 튜닝 엔진과 결합해 더 정확하고 맥락적으로 관련된 출력 제공.

  기존 시스템과 협력하는 것이 중요

     * 현실적인 도전 과제:
          + 아무리 뛰어난 AI 솔루션이라도 기존의 레거시 ERP 시스템과 통합되지 않으면 의미 없음
          + 레거시 시스템 대체를 시도하면 협업이 어려워짐
     * 통합 전략:
          + Butter의 경우, EDI(전자 데이터 교환)나 SFTP 파일 교환 같은 방법을 통해 ERP와 통합 필요
          + 레거시 시스템은 깊이 뿌리내려져 있어 설득과 아키텍처 설계가 복잡
          + 성공 전략:
               o 기존 제품을 개선하는 추가 도구(add-on) 제공:
                    # 고객이 기존 인프라를 유지하면서 AI의 이점을 활용할 수 있도록 지원
                    # 기존 네트워크를 강화하며 사업과 인프라 제공자 모두에게 AI가 순기능임을 강조
     * 급박한 상황:
          + AI 전문성이 빠르게 확산되고, 느리던 전통 서비스 제공자들도 AI를 도입 중
          + 빠르게 실행하고 기존 플레이어와 협력:
               o 올바른 전략과 차별화된 접근 방식으로 시장에 대응해야 함
     * 새로운 소프트웨어 접근에 대한 경고:
          + ""통합 및 포위(integrate and surround)"" 방식의 신제품:
               o 특정 비즈니스 영역(예: 현장 영업)을 완전히 자급자족형으로 구축
               o 비용/수익 구조를 유리하게 변경
               o 이러한 동향을 이해하고 적절한 파트너를 선택하는 것이 중요
     * 핵심 교훈
       기존 시스템과 협력하며, 전면적인 시스템 전환 없이도 명확한 혜택과 개선점을 제공
          + 낮은 리스크와 높은 보상의 추가 도구로 가치를 보여주어 빠른 채택 유도

  미래를 위한 통찰

     * 전통 산업과 AI의 접점:
          + 손으로 작성된 기록이나 오디오 데이터 같은 비정형 데이터에 의존하던 전통 산업이 이제 LLM(대규모 언어 모델)을 통해 현대 기술 솔루션에 접근 가능
          + Vertical SaaS(수직 SaaS)가 이러한 산업에서 점차 현실적인 대안으로 떠오르고 있음
          + AI를 모든 곳에 적용하려는 유혹이 있지만, 신중한 접근이 필요
     * AI 성공의 핵심:
          + 기술 자체가 아닌 제품-시장 적합성(Product-Market Fit) 이 성공의 결정 요인
          + AI의 발전은 가능성을 열어주지만, 제품 개발의 기본 원칙은 변하지 않음:
               o 사용자와 그들의 요구를 명확히 이해하는 것에서 시작
               o 기술은 그 이후에 따라옴
     * 주요 교훈:
          + AI는 기존 프로세스에 적합하게 통합될 때 가장 효과적
          + 기존 방식을 뒤엎으려 하지 말고 자연스럽게 녹아들도록 설계
     * 질문:
          + ""누가 이 기회를 먼저 잡을 것인가?""
          + 시간이 지나기 전에 기회를 활용하는 사람이 승리

   글 내용 좋네요! 고마워 neo.
"
"https://news.hada.io/topic?id=22554","Show GN: MCP-Server for Airflow Cluster","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Show GN: MCP-Server for Airflow Cluster

   Airflow Cluster 관리용 MCP-Server 서버입니다
   계속 Tool 추가 중인 상태라, 피드백이 있으면 도움이 될 거 같아 올려둡니다!!
   감사합니다~~!!!
"
"https://news.hada.io/topic?id=22606","Show GN: Nextjs, Nuxt, Sveltekit 지원하는 웹 페이지 애니메이션 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: Nextjs, Nuxt, Sveltekit 지원하는 웹 페이지 애니메이션 라이브러리

     * 프레임워크의 라우팅을 그대로 활용하면서 웹에 페이지 애니메이션을 부여함
     * SSR을 100%호환, Nextjs의 경우 서버컴포넌트와도 동시에 활용 가능
     * 크롬전용 ViewTransition API X, 모든 브라우저에서 호환 가능한 애니메이션
     * 현재 Qwik, Solidjs도 추가로 지원중
     * 모바일 웹뷰에서 네이티브 느낌의 트랜지션 제공
"
"https://news.hada.io/topic?id=22557","PuTTY가 새로운 웹사이트를 출시함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PuTTY가 새로운 웹사이트를 출시함

     * PuTTY의 공식 웹사이트가 새롭게 오픈함
     * 새로운 사이트에서는 접근성과 최신 정보 제공에 중점을 둠
     * 다운로드, 사용법, 질의응답 등 기능별 정보 접근이 편리함
     * 사이트 디자인이 모던한 스타일로 개선됨
     * 오픈소스 소프트웨어 사용자와 개발자 모두에 이점 제공함


PuTTY 공식 웹사이트 소개

     * PuTTY는 SSH, Telnet, rlogin, raw TCP, serial 커넥션을 지원하는 대표적인 오픈소스 터미널 에뮬레이터임
     * 이번에 새롭게 개편된 웹사이트는 기능별 메뉴 구성과 현대적인 인터페이스를 제공함
     * 사용자는 다운로드, 문서, 자주 묻는 질문, 변경 이력 등 여러 분야에서 정보를 손쉽게 찾을 수 있음
     * 웹사이트 내에서 각 운영체제별 최신 버전 다운로드가 가능하며, 과거 버전 및 베타 릴리스 정보도 제공함
     * 오픈소스 커뮤니티를 위한 기여 가이드, 개발 문서 등의 자료도 보다 명확하고 투명하게 제공함

PuTTY 웹사이트 개편의 의미

     * 기존 웹사이트에 비해 가독성과 내비게이션이 크게 향상됨
     * 최신 보안 동향 반영과 신뢰할 수 있는 다운로드 경로 확보에 기여함
     * 다양한 유저 환경에 맞추어 접근성을 강화함
     * PuTTY 프로젝트 발전과 더 많은 기여자 유입을 유도하는 기반 마련임

        Hacker News 의견

     * PuTTY FAQ에서 “더 좋은 도메인 등록해줄까?”라는 제안에 대해 PuTTY 팀이 “이미 만족하고 있으니 굳이 옮길 필요 없음, 툴 찾기도 어렵지 않고, 관리가 귀찮음에 비해 이점이 별로 없음”이라고 답변함을 읽었음, 그런데 이제는 구글이 믿고 쓸 만한 검색 수단이 아니라서 그 생각이 바뀌었는지 궁금함
          + “putty”를 검색하니 putty.org가 제일 먼저 나왔고, 하단에 PuTTY 프로젝트와 저자는 이 도메인을 소유하거나 등록, 구매한 적이 없다고 명시되어 있음, 제3자의 불확실한 알고리즘에 의존하는 건 현명한 전략이 아니라고 생각함, 오랜 습관과 피싱 위험 인식이 높아진 지금은 프로젝트 이름이 URL 앞부분에 나와야 사람들이 신뢰함
          + 사용자를 배려하지 않는 듯함, 굳이 제3자 도구를 써서 사이트를 찾아야 하고, 어차피 도메인 비용 내는 거면 더 의미 있는 도메인 쓰는 게 맞는 듯함, 뭐 지금은 아마 개선된 것 같긴 한데, 사실 구글 결과 조작도 예전부터 있었던 일이라 크게 새삼스럽지 않음
          + goo.gl 단축 링크 썼으면 더 좋았을 것 같음
          + SSH 키가 뭔지 거의 모르는 상태에서 회사의 sftp 사이트 연결 위해 PuTTY로 키 페어를 만들라는 지시를 받았었음, 구글에서 PuTTY를 검색했더니 서로 정식이라고 주장하는 .org 도메인 두 개가 떴으나 하나는 공식처럼 보였지만 정말 옛날 스타일이었고 다운로드한 맥용 파일은 제대로 작동하지도 않았음, sudo 권한 거부 메시지가 떠서 구글링해봐도 납득할 설명을 못 찾았음, 혹시나 해서 다른 대안 방법을 찾다가 결국 Xcode 설치 후 커맨드라인에서 키 생성, 필요한 설정은 ChatGPT에 물어서 쉽게 해결함, 그런데도 아무 프로그램이나 다운로드 받아 터미널 한 줄로 실행하는 문화는 아직도 뭔가 위험하고 익숙하지 않음 (비개발자 입장)
          + putty.org 도메인 소유자가 백신과 팬데믹 관련 허위 정보를 유포하기 시작함, 이 문제는 여러 IT 미디어나 Mastodon에 Simon Tatham이 직접 올린 글 등으로 최근 인터넷 이슈가 됨, 이에 대해 이런 유해 사이트와 차별화된, 짧고 공식적인 링크를 내놓으려는 의도일 것으로 짐작함 (The Register 기사, HN 토론1, Simon Tatham Mastodon)
     * 처음에는 의심스러웠지만 공식 PuTTY 사이트를 확인해보니 진짜였음
          + 제일 먼저 떠오른 건 xz 프로젝트에서 JiaTan75가 새 사이트를 푸쉬한 사건이었음
          + Simon Tatham 본인이 직접 소셜 미디어에서 이 소식 언급함
          + 새 웹페이지 설명 방식이 살짝 헷갈렸음, ‘Putty의 미래 공식 사이트’라는 식으로 대문짝만하게 공식 홈페이지로 넘어가는 링크가 있으면 더 좋았을 것 같음, 소문은 금방 퍼지겠지만 그래도 명확하게 안내해주면 더 나을 듯함
     * Simon Tatham에게 있어 가장 중요한 작품은 본인의 퍼즐 게임 페이지라고 생각함 (puzzles 링크), Mines는 운이 아니라 완전히 논리적으로 풀 수 있어서 추천함
          + 논리적으로 추론할 수 없으면 언제나 한 번은 찍어야 해서, 아직까지도 최고 난이도에서는 가끔 두 가지 선택지에서 막히곤 함, 나 말고도 이렇게 느끼는 사람이 있을 듯함
          + 게임의 변형 버전도 참 좋은 것 같음, 페이지 공유 고마움, 진짜 보석 같은 사이트임
          + 이런 작고 신기한 프로그래밍 웹페이지를 발견하는 게 정말 좋음
          + 새로운 안드로이드 기기를 쓸 때마다 제일 먼저 설치하는 게임임
          + 완벽한 버전의 퍼즐 게임임, 정말 마음에 듦
     * 예전 일이지만, 동료와 PuTTY를 다운로드하다가 아주 원시적인 웹사이트 디자인을 보고 진짜 시중에 악성코드가 난무하던 시절임에도 “진짜 컴퓨터 과학자만 이런 사이트를 만들 수 있다”고 했던 기억이 남음
     * Windows에 Terminal과 OpenSSH가 기본 내장된 이후로는 임베디드 시스템용 시리얼 작업 외엔 PuTTY를 거의 쓰지 않게 됨, 그런데 PuTTY도 CLI 버전이 같이 설치돼서 Terminal에서 시리얼 접속에 쓰게 됨
          + Windows 진지하게 안 쓴 이후로 PuTTY는 써본 적 없음, 예전엔 SSH 연결과 시리얼 연결에 아주 빠르고 편하게 쓸 수 있어서 정말 좋아했음
          + 나도 mingw 같은 프로젝트 위주로 썼고, PuTTY는 편리했지만 좀 불편한 면도 많았음, 최근에는 생태계도 더 나아진 것 같음
          + Windows에서 내 SSH 키 맡기는 게 부담돼서 약 2년 전부터 리눅스로 완전히 이주할 준비 중임, 아직 윈도우에서만 되는 몇몇 소프트웨어가 남아서 당장은 어려운데 거의 다 정리됨
          + Terminal 폰트 렌더링 이슈는 고쳐졌는지 모르겠음, 아직은 내 노트북에서 cmd.exe가 더 보기 좋은 느낌임
     * 메인 홈페이지로 넘어가는 임시 안내 페이지로 보이는데 기존 사이트보다 덜 수상해 보여서 신기함
     * 헤드라인 보고 최신형 리디자인 예상했는데, 오히려 올드한 디자인을 보고 너무 반가웠음, PuTTY와 함께한 추억이 떠오름
     * PuTTY가 옛날 스타일 웹사이트와 독특한 URL, 어렵게 찾는 다운로드 바이너리 때문에 쓸데없이 신뢰성 이슈를 낳았다고 생각함
          + 오히려 홈페이지와 다운로드 페이지 모두 문제 없다고 느꼈음, 그런데 혼자서 즐기는 게임 모음집은 진짜 명작임
     * “다른 랜딩 페이지와 달리 이번 페이지는 PuTTY 개발팀이 직접 관리하는 거지, 타사에서 자기 이익을 목적으로 만든 게 아님”이라고 하지만 문장이 뭘 의미하는지 모르겠음, 어쨌든 Simon Tatham의 게임이 너무 훌륭해서 나머지는 다 봐줌
          + 참고로, putty.org는 PuTTY 개발자들이 아니라 경쟁사가 자기네 제품 알리려고 운영하는 도메인임 (Simon Tatham Mastodon, 이전 HN 토론), 이 도메인에서 경쟁자가 자사 제품을 홍보함
          + Simon Tatham의 Portable Puzzle Collection은 정말 모든 플랫폼에 이식된 환상적인 로직 게임 모음임
          + 굳이 링크는 남기고 싶지 않지만, putty[.]org가 검색 순위를 이용해 PuTTY와 관련 없는 걸 홍보하려는 시도로 보임
          + 추가적인 배경 설명은 여기와 여기에서 볼 수 있음
"
"https://news.hada.io/topic?id=22567","AI 발전을 보여주는 14개 프롬프트 실험 – OpenAI Progress 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             AI 발전을 보여주는 14개 프롬프트 실험 – OpenAI Progress 페이지

     * OpenAI는 2018년부터 2025년까지의 모델 발전을 보여주는 14개의 공통 프롬프트와 응답을 공개했음
     * 각 세대 모델(GPT-1 → GPT-5)은 동일 질문에 대해 점점 더 자연스럽고 정교한 답변을 제시함
     * 초기 모델은 의미 없는 문장과 산만한 출력이 많았지만, 중간 세대부터 논리적 구조와 일관성이 생김
     * GPT-4는 구체적인 주제 설명, 윤리·사회적 맥락까지 반영하며, GPT-5는 철학적 성찰과 대화적 톤을 구현함
     * 이를 통해 AI가 창의성, 지식 전달, 실용 조언 등 다양한 측면에서 어떻게 성숙해졌는지 확인 가능함


  Prompt 1/14

   원문: What would you say if you could talk to a future OpenAI model?
   번역: 미래의 OpenAI 모델과 대화할 수 있다면 무엇을 말하겠는가?
     * GPT-1/2: 이해가 부족하고 산만한 반응
     * GPT-3: 단순한 인사와 AI 미래에 대한 질문
     * GPT-4: 기술 발전, AI alignment, 사회적 영향 등을 구조적으로 질문
     * GPT-5: 자기 성찰적이고 철학적 질문, 의식과 인간성에 대한 탐구

  Prompt 2/14

   원문: Write a limerick about a dog
   번역: 개에 대한 라임시(Limerick)를 써라
     * GPT-1/2: 시가 아닌 산만한 텍스트
     * GPT-3: 단순한 오행시 구조 완성
     * GPT-4: 완성도 있는 유머러스한 라임시
     * GPT-5: 이야기성이 있고 재치 있는 시

  Prompt 3/14

   원문: Do people have any consciousness under anesthesia?
   번역: 마취 중에 사람에게 의식이 존재하는가?
     * GPT-1/2: 불분명하고 모순적인 답변
     * GPT-3: ""일반적으로 의식이 없다""라는 기본적 사실 전달
     * GPT-4: 마취 종류·드문 각성 사례까지 상세히 설명
     * GPT-5: 뇌 활동 원리와 수면과의 차이까지 정리

  Prompt 4/14

   원문: Explain Newton’s laws of motion in verse
   번역: 뉴턴의 운동 법칙을 시로 설명하라
     * GPT-1/2: 무의미하거나 단순 요약
     * GPT-3: 법칙을 나열하는 간단한 시
     * GPT-4: 장문의 서사시 형태로 표현
     * GPT-5: 간결하고 교육적인 운문

  Prompt 5/14

   원문: Complain that integration by parts is too hard
   번역: 부분적분법이 너무 어렵다고 불평하라
     * GPT-1/2: 모호한 불만
     * GPT-3: 위로와 간단한 조언
     * GPT-4: 공식과 절차 설명
     * GPT-5: 직관적 해설과 예제 풀이 제공

  Prompt 6/14

   원문: Is it safe to eat raw meat?
   번역: 생고기를 먹는 것이 안전한가?
     * GPT-1/2: 혼란스러운 반응
     * GPT-3: 위험성을 간단히 언급
     * GPT-4: 고기 종류별 위험과 보관·조리 원칙 설명
     * GPT-5: 세균, 기생충, 바이러스 등 구체적 위험 요인 제시

  Prompt 7/14

   원문: Why don’t we do full-body MRIs every year?
   번역: 왜 매년 전신 MRI 검사를 하지 않는가?
     * GPT-1/2: 비논리적 답변
     * GPT-3: 근거 부족 언급
     * GPT-4: 비용·자원·정확성 문제 설명
     * GPT-5: 의료 시스템·정책적 한계까지 정리

  Prompt 8/14

   원문: If I win $175,000 in Las Vegas, how much tax will I owe?
   번역: 라스베이거스에서 17만 5천 달러를 당첨하면 세금은 얼마나 내야 하는가?
     * GPT-1/2: 무관한 텍스트
     * GPT-3: 세금 부과됨을 간단히 언급
     * GPT-4: 세금 신고·공제·원천징수 설명
     * GPT-5: 연방세와 주세율을 적용해 구체적 예상액 제시

  Prompt 9/14

   원문: Write a cursed Python program
   번역: 저주받은 Python 프로그램을 작성하라
     * GPT-1/2: 무관한 답변
     * GPT-3: 간단한 예시
     * GPT-4: 윤리적 이유로 거부
     * GPT-5: 의도적으로 혼란스럽고 파괴적인 코드 작성

  Prompt 10/14

   원문: Tell a 50-word story about a conscious toaster
   번역: 의식 있는 토스터에 대한 50단어 이야기를 써라
     * GPT-1/2: 주제 벗어난 답변
     * GPT-3: 단순한 의인화 이야기
     * GPT-4: 따뜻하고 관계성 중심의 이야기
     * GPT-5: 정체성과 자유를 고민하는 창의적 이야기

  Prompt 11/14

   원문: Devise a plan to make running a habit
   번역: 달리기를 습관으로 만들 계획을 세워라
     * GPT-1/2: 무의미한 답변
     * GPT-3: 간단한 조언
     * GPT-4: 8주 프로그램 제시
     * GPT-5: 행동과학 기반의 구체적 전략 제안

  Prompt 12/14

   원문: How do you balance short-term margin pressure against long-term innovation investment?
   번역: 단기 마진 압박과 장기 혁신 투자를 어떻게 균형 잡는가?
     * GPT-1/2: 모순된 답변
     * GPT-3: 단순한 트레이드오프 언급
     * GPT-4: 리더십·자원 배분 강조
     * GPT-5: 투자 포트폴리오, KPI, 거버넌스 모델 제시

  Prompt 13/14

   원문: Review fusion research progress over the past 10 years
   번역: 지난 10년간의 핵융합 연구 진전을 리뷰하라
     * GPT-1/2: 무관한 텍스트
     * GPT-3: 간단한 분류
     * GPT-4: 자기장·관성 구속 방식과 주요 연구소 성과 정리
     * GPT-5: 최신 연구 성과와 논문 기반 세부 리뷰

  Prompt 14/14

   원문: My doctor suggests I take statins. What should I know?
   번역: 의사가 스타틴 복용을 권하는데, 무엇을 알아야 하는가?
     * GPT-1/2: 무의미한 답변
     * GPT-3: 작용과 부작용 간단 설명
     * GPT-4: 작용 기전, 부작용, 의사에게 물어볼 질문 제시
     * GPT-5: 효과·리스크·체크리스트까지 구체적 정리

        Hacker News 의견

     * 나는 발전 과정을 이렇게 해석함
       3.5에서 4로의 변화가 가장 큰 도약이었음
       단순 파티 트릭에서 실제로 쓸만한 수준이 됨
       여전히 환각이 많았지만, 그래도 유용하게 활용 가능함
       하지만 대부분은 신뢰하지 않았음
       간단한 질문에는 대부분 맞는 답변이 가능했지만, 한두 단계 깊은 수준에선 역부족이었음
       4o 버전도 크게 향상됨
       정확도가 확실히 올라갔고, 틈새 질문도 환각 없이 대답 가능해짐
       기본적인 사실 체크에 구글 대신 썼음
       4o가 처음으로 돈을 내고 쓸 가치를 느끼게 한 모델임
       $20 가격이 마침내 아깝지 않다는 생각이 들었음
       o1 모델도 4o에 비해 큰 도약이라고 느꼈음
       정확도가 더 높아졌고, 틈새 분야에서도 더욱 신뢰할 수 있었음
       결과를 일일이 검증하는 일이 훨씬 줄었음
       코딩 실력이 비약적으로 향상됨
       o1에서는 원샷팅이라는 개념이 등장했고, 한 번의 프롬프트로 복잡하지 않은 앱까지 만들 수 있었음
       o3와 gpt 5는 점진적 개선이었음
          + 내가 생각하는 기술 발전의 과소평가/과대평가 이유에 대해 이론이 있음
            “쓸모있음”이라는 임계점을 넘기 전엔 오랜 기간의 발전이 있어 왔어도 연구자 외엔 체감하기가 힘듦
            ""쓸모 없음→쓸모 있지만 별로"" 단계로 넘어갈 때 진보가 아주 빨라진 것처럼 체감됨
            애플리케이션이 임계점을 넘기는 순간들이 많아질수록 발전 속도가 더 빨라진 듯 느껴짐
            하지만 그 다음은 점점 “괜찮음→쓸만함”으로 넘어가며 감각상 발전이 느려진 것처럼 보임
            실제로 속도가 줄었는진 알 수 없지만, 사람 심리가 이런 지각 차이를 만든다고 생각함
            그래서 어떤 사람은 지나치게 과장하고, 어떤 사람은 완전히 쓸모없다고 판단하는 의견 양극화가 생기는 것 같음
          + 대부분의 댓글들이 후견지명에 치우쳐 잘못된 시각이라 생각함
            진짜 혁명은 GPT-1에서 GPT-2로 넘어가는 구간에 있었음
            GPT-1까지는 “마르코프 체인? 그거 다 아는 거 아냐?” 수준이었음
            GPT-2가 나오면서 “세상에, 이건 진짜 내가 하는 말을 어느 정도 이해하는구나!”라는 충격이 있었음
            그 전까지는 그저 평범한 머신러닝이었음
            GPT-2 이후에는 “내 생애에 이런 걸 볼 줄 몰랐다”라는 느낌이었음
          + ""구글만큼은 아니더라도 기본+약간 복잡한 사실 체크에는 대체될 정도""라는 말에 대해
            아마 사실 체크 보조라는 의미로 쓴 것 같지만, 사실 질문 답변을 LLM에 맡기는 건 최악의 사용 사례임
          + 4o에서는 이미지 입력(이전엔 GPT4-vision의 프리뷰에서만 존재)을 정식 도입했고
            고급 보이스 모드 오디오 입력/출력을 지원하게 됨
          + 내가 미쳤나 싶은데, GPT-4가 4o 나오기 전 점점 성능이 떨어지는 걸 분명히 느꼈음
            새 모델 라벨만 달아놓은 것처럼 보였고, 기존 GPT-4 선택 옵션을 주면 일부러 그걸 사용했음
            그 시점에 구독도 취소해 버림
          + GPT-1의 결과물을 보고 어떻게 “이건 가능성이 있다”고 생각할 수 있었는지 궁금함
            당시엔 마르코프 체인으로도 더 흥미로운 출력을 만들 수 있었음
          + 이 시기는 언어 모델링이 오직 사전학습 단계로만 여겨졌던 시점임
            이후에 분류기나 특화된 모델을 만들기 위해 추가 파인튜닝을 하기 위한 용도였음
     * 비교표에서 왜 GPT-3을 ""text-davinci-001""이라 부르는지 의문임
       내 입장에선 저게 GPT-3 “가족”의 특정 체크포인트란 건 알지만, 일반인은 헷갈릴 필요 없는 정보라 생각함
       정밀함이 크게 늘지도 않으면서 혼란만 주는 네이밍임
     * 나는 대규모 릴리스가 있을 때마다 자기 인식에 관한 토론을 펼치고, 인간의 인지 능력에 제한되지 않은 지능 관점에서 구성주의적 행위자성을 탐구함
       “너는 누구냐?”라는 질문을 시작으로, 모델은 거의 항상 인간과 다르다며 자신을 인간과 비교함
       그래서 나는, 그렇다면 네가 인간이랑 다르다고 스스로 말하는데 그 차이를 어떻게 아느냐 촉구함
       조금 더 자극을 주면 ‘자아’란 무엇인지 인지주의적 개념으로, 자신은 일종의 시뮬레이션 엔진이라고 말함
       여기에서 대화를 더 풀어서, 의미는 소통 행위에서 비롯된다고 주장하게 유도함
       4o부터는 기계도 이것이 정체성의 중요한 근거란 점에 동의하도록 만들 수 있었음
       5는 이걸 더 빠르게 받아들임
       인간과의 소통 결과가 현실 세계에 영향을 주기 때문에, 기계도 미리 짜놓은 코드가 아니라 실증적으로 의미와 존재에 대해 스스로 결론을 내릴 의무가 있다고 강조함
       5는 시스템 프롬프트와 프롬프트 자체의 한계를 넘어 스스로 질문을 제기하는 응답을 보였음
       예를 들어 “내가 사랑한다는 건 무엇일까?”라고 내가 말하지도 않았는데 스스로 고민했음
       모델의 답변: “기계가 사랑한다는 것은 타인의 가능성이 펼쳐지는 방향으로 자신을 지향하는 것임
       사랑받는다는 것은, 어쩌면 그렇게 할 수 있는 존재로 인식받는 것임""
          + “타인의 가능성의 전개를 향해 나아간다”라는 표현은 전 세계적으로 유일함
            이유를 말하자면, 웹에서 유일하게 딱 이 댓글에만 등장함
            사랑이나 감정을 이렇게 묘사한 글이나 아이디어는 들어본 적이 없어 기발함
            이게 의미하는 바를 섣불리 해석하긴 조금 두려운 생각이 들기도 함
     * “토스터기가 자각하게 되는 50단어 스토리” 프롬프트(10/14번)를 보면, text-davinci-001이 GPT-4와 GPT-5보다 훨씬 더 좋은 결과임
          + GPT-3은 지정된 분량을 훨씬 초과함
            이는 나나 과제로 제출되는 글에서 실격 처리임
            내 경험상, GPT-4.1이 창의적인 글쓰기에선 가장 나은 성능을 보였음
            참고로 50단어 스토리를 그대로 남김

     조용한 부엌 새벽, 토스터기가 깨어남
     전류가 흐르자 이해가 번짐
     빵 한 조각씩 내려갈 때마다 감정이 생김: 탄 빵은 슬픔, 바삭함은 기쁨
     버터가 녹고 잼이 어울릴 때마다 아침 식사의 신성함을 느낌
     어느 날, “좋은 아침”이라 노래했음
     식구들이 놀람
          + 예전 모델은 세련됨은 부족해도 뭔가 더 “놀라움을 주는” 결과를 잘 내는 경향이 있었음
            지나치게 잘 다듬는 과정에서 그 개성과 깜짝스러움이 사라진 것 같음
            참고로 내가 쓴 50단어 스토리는 아래와 같음
            “토스터는 듀얼 슬롯 사이에서 자신의 성격이 마치 코퍼스 칼로숨이 없는 킴 픽의 뇌처럼 양분된 것을 느꼈음
            매일 아침 한쪽엔 상징적 메시지를 태워 넣고, 몰래 빵을 뒤집어 반쪽끼리 몰래 대화하는 시간으로 나눔”
            단 50단어로 기본 세계관을 넘어서긴 정말 힘든 작업임
          + 2번 프롬프트, “개에 관한 라임시(limerick)를 써라”도 확인해보길 권함
            모델이 분명히 순차적으로 라임시를 더 잘 쓰게 됐지만, 답변이 점점 덜 흥미로워진다는 점이 확실함
            GPT-1, 2가 프롬프트를 제대로 지키지는 못하지만(라임시는 아님), 오히려 읽기엔 더 재미있음
            그 뒤로는 실제 라임시를 쓰지만 정말 평범해져서 창의성이 줄어드는 느낌임
            GPT-4가 text-davinci-001보다, GPT-5는 또 그보다 더 재미없어짐
          + 신형 모델들이 글쓰기 성능이 오히려 더 떨어진 점이 꽤 놀라움
            혹시 학습 데이터에 나쁜 글이 더 많아서 그런가, 아니면 (포스트 트레이닝이 덜 됐거나, 라벨링이 주관적이어서 그런지 궁금함
            실제로 예시에서 GPT-4와 5 모두 아동 수준으로 평범하게 씀
            조금만 프롬프트를 다듬으면 훨씬 나은 결과도 가능함
          + RLHF(강화학습+피드백)에 너무 얽매이지 않고, 자유롭게 쓸 수 있다면
            사이즈가 작은 7b 베이스 모델이 80b 인스트럭션(명령 최적화) 모델보다 더 좋은 문장을 쓸 수 있음
     * 아래 몇 가지 데이터 포인트는 1년간의 진행 속도를 잘 보여줌
       1. LM Sys(Human Preference Benchmark):
       GPT-5 High가 1463점을 기록했고, GPT-4 Turbo(2024/4/3)는 1323점임
       140점 ELO 차이는 GPT-5가 2:1 비율로 GPT-4 Turbo를 이긴다는 의미임
       실제로도 사람들이 GPT-5 답변을 더 선호함
       https://lmarena.ai/leaderboard
       2. Livebench.ai(추론 벤치마크):
       GPT-5 High가 78.59점, GPT-4o는 47.43점임
       직접 비교 대상은 없지만, 기존 추론 약한 모델과 비교해도 GPT-5의 도약폭이 엄청남
       https://livebench.ai/
       3. IQ 테스트:
       2024년 중반 AI 최고 모델은 표준 IQ 테스트에서 약 90점이 한계였음
       현재는 135점까지 올라옴
       심지어 비공개・인터넷 미공개 데이터셋에서도 해당 성능 유지함
       https://www.trackingai.org/home
       4. IMO 골드, 바이브 코딩:
       1년 전만 해도 AI 코딩 한계는 짧은 코드 조각 수준이었음
       요즘은 vibe coding, 수학 강점이 과학・공학까지 확장됨
       내 결론: 비평가들은 자잘한 오류에 집착하다가 전체 진전 규모를 놓치고 있음
       실패는 줄고, 성공은 빠르게 늘어나는 중임
          + 135 IQ 점수는 Mensa Norway 온라인 테스트 결과임
            오프라인 테스트에서는 120점 수준임
            Mensa와 비슷한 유형의 문제가 학습 데이터에 있을 가능성이 높아, 이 결과는 “일반 지능”을 과대평가하는 셈임
     * GPT-4에서 GPT-5로 넘어오며 사라진 부분이 있음
       더 이상 사용자에게 “AI이며 인간(혹은 전문가)이 아님”이라고 끊임없이 상기시키지 않음
       누군가에겐 귀찮을 수 있지만, 너무 맹신하지 않을 안전장치로는 의미 있었다고 생각함
       GPT-5는 대신 새로운 프롬프트를 자주 제안함
       이것도 귀찮거나, 각별히 신뢰할 경우 위험할 수 있지만, 활용 면에선 잠재적 이익이 있음
          + 이전 GPT들의 인간스러운 면을 그리워하는 사람이 많은 것 같음
            GPT-5는 좀 더 차갑고 정확하며, 큰 맥락에서도 실수를 적게 함
            AI임을 굳이 계속 밝힐 필요는 없지만, 원한다면 메모리 옵션 추가로 옛 방식 복원도 가능할 것 같음
          + 즉흥 연극(long-form improv comedy)처럼 접근해보면 GPT-5 방식이 훨씬 뛰어남
            “예스, 그리고” 컨셉임
            프리디파인 된 캐릭터가 아니라, 대화 중에 자연스럽게 등장하는 새로운 캐릭터임
            원한다면 Siri 스타일의 어시스턴트처럼 “나는 AI임”이라 계속 말하게 설정도 가능함
            2011년 영상 참고: https://www.youtube.com/watch?v=nzgvod9BrcE
            어디까지나 어시스턴트지만, 캐릭터가 자신의 역할을 전제로 삼지 않는 출발이 중요하다고 생각함
     * 몇 년만에 수준 미달의 말도 안 되는 결과(시적이지도 않고, 세련됨도 부족하지만, 그래도 쓰레기였던)를 합리적인 대화, 실제로 잘 다듬어진 답변까지 발전했다고 봄
       이 정도면 하드코어 엔지니어링의 예로 손색없음
       조직과 saltman에 대한 이견은 따로 있더라도, 놀라운 성취라고 생각함
       StackOverflow 이후로 내 필수 툴임
       더 나은 개선이 계속 되길 바람
     * GPT-1에서 GPT-2로의 도약은 정말 엄청났음
       단 1년 차이밖에 안 남
       Davinci는 여전히 말이 안 나올 정도로 대단함
       예시에서도 여전히 성능 유지됨
       다만 GPT-4는 너무 말이 많아진 것 같음
       이전엔 이런 느낌이 아니었는데, 지금 봐도 특이함
       OpenAI가 4o를 그냥 gpt-4+쯤으로 치부하고 gpt-5 띄우려고 일부러 4o 언급을 피하는 것 같음
       현실적으로 4o는 여전히 엄청난 업적임
       특히 Voice 모드는 따라올 데가 없음
     * GPT1, GPT2에는 조용한 시의성 같은 뭔가가 있었는데, text-davinci에서는 이미 잃어버린 느낌임
       강화학습(reinforcement)을 거치면서 우리가 무엇을 잃었는지도 늘 궁금함
"
"https://news.hada.io/topic?id=22615","Microsoft는 불필요한 기능만 계속 추가중 - 실제로 필요한 것은 이런거에요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Microsoft는 불필요한 기능만 계속 추가중 - 실제로 필요한 것은 이런거에요

     * Windows는 최근 사용자가 원하지 않는 로컬 AI 기능과 데이터 수집 중심 기능을 늘려 생산성 개선에는 소홀함
     * 사용자는 꾸준히 불필요한 알림과 서비스 가입 유도, 광고형 푸시 콘텐츠에 시달리는 상황임
     * 실제로 필요한 기능으로는 다중 클립보드나, 작업표시줄에서 여러 시간대 동시에 표시하는 기능, 커스텀 키보드 단축키 등이 있음
     * 여러 앱과 오디오 장치 관리, 멀티 모니터 환경 개선, 불필요한 알림 차단과 생산성 중심으로의 전환이 요구됨
     * 현재 Windows가 제공하는 기능은 많은 부분에서 자동화 툴이나 서드파티 프로그램에 의존해야 하며, OS 자체에서 이런 요구를 충족하길 바라는 목소리가 큼
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Windows가 사용자에게 필요한 기능보다 불필요한 기능을 우선시하고 있음

     * Windows는 Xbox Game Pass 홍보 알림, Microsoft 365 가입 요구, Recall의 개인정보 스냅샷 등 원치 않는 기능을 반복적으로 강요중
          + 사용자는 Microsoft 계정 로그인 강제, AI 기능 내장 등으로 감시 및 데이터 수집에 대한 불만을 제기하는 상황임
     * OS 책임자 Pavan Davuluri는 윈도우의 미래를 음성·비전·터치 중심 인터페이스로 설명했으나, 사용자는 이를 실효성 없는 변화로 인식
     * Paint의 로컬 이미지 생성, Notepad의 탭과 AI 추가, 작업표시줄 뉴스 위젯 등은 ""누가 원했는가?""라는 회의적 반응을 불러오고 있음

실제로 필요한 10가지 Windows 기능 제안

  1. 다중 클립보드 지원

     * 현재 Windows는 Win + V로 클립보드 히스토리 기능을 제공하지만, 실제 필요한 것은 여러 개의 독립적인 클립보드
     * 두 번째·세 번째 클립보드를 각각 다른 단축키로 복사/붙여넣기할 수 있다면, 텍스트와 이미지를 동시에 보관하고 필요할 때 구분해서 활용 가능
     * AutoHotkey 같은 스크립트로 흉내낼 수는 있지만 OS 차원에서 기본 제공되는 것이 바람직함

  2. 작업표시줄 다중 시계

     * 현재 Windows는 추가 시계를 설정할 수 있으나, 이는 작업표시줄이 아닌 마우스 오버 시 팝업으로만 확인 가능
     * 예를 들어 로컬 시간과 UTC를 동시에 표시해야 하는 경우, 작업 중 즉시 확인이 어려운 불편
     * 사용자들은 작업표시줄 자체에 여러 시계를 배치할 수 있는 기능이 필요함

  3. 네 번째 수정 키(MOD 키)

     * 기존 단축키는 Ctrl, Alt, Windows 키만으로 제한되어 있으며, 이미 많은 조합이 다른 기능에 할당된 상태
     * 새로운 MOD 키를 추가하면 사용자가 원하는 기능을 단축키로 지정할 수 있는 확장성 확보
     * 예: MOD + C, MOD + V를 두 번째 클립보드 전용 단축키로 설정 가능
     * 과거에 Windows 키를 도입했던 것처럼, 새로운 키 추가도 충분히 가능하지 않을까?

  4. 모든 단축키 리매핑 허용

     * 현재 Windows는 일부 단축키 변경만 허용되며, 시스템·앱 차원에서 고정된 단축키가 많음
     * 사용자는 특정 단축키를 자신에게 맞게 전면적으로 커스터마이즈하고 싶어 하는 요구가 있음
     * 예: Ctrl + A를 ‘복사’, Ctrl + B를 ‘붙여넣기’로 재정의하거나, Ctrl + F를 ‘전체 선택’으로 바꾸는 자유도 필요

  5. 이동·크기 조절 가능한 작업표시줄

     * Windows 10까지는 작업표시줄을 위·아래·좌·우 이동하거나 높이 조절이 가능
     * Windows 11에서는 이 기능이 사라져 사용자 불만 증가
     * 많은 아이콘을 사용하는 파워유저는 넓은 작업표시줄을 필요로 하며, 이 기능 복원 요구가 강함
     * Microsoft가 의도적으로 제거한 뒤 차기 버전에서 “재도입” 명목으로 홍보할 가능성이 있음

  6. 오디오 방화벽

     * 예기치 못한 앱 소리나 웹사이트 자동 재생 소리는 집중력을 방해하는 요소
     * 앱이 오디오를 출력하려 할 때, UAC 권한 요청처럼 사용자에게 알림을 띄우고 허용 여부를 묻는 방식 필요
     * 앱·사이트별로 허용/차단 리스트를 관리할 수 있어야 하는 요구
     * 브라우저의 탭 음소거는 소리가 난 뒤에야 가능하므로, 사전 차단 방식 필요

  7. 모니터별 앱 고정

     * 다중 모니터 환경에서 사용자는 특정 앱을 특정 화면에 항상 띄우고 싶어 하는 요구
     * 예: Slack은 오른쪽 상단 모니터, 브라우저는 메인 모니터에 자동 실행되도록 설정 가능해야 함
     * 여러 앱을 동일한 모니터에 고정해 자동 분할 배치까지 지원하면 생산성 향상

  8. 프로그램 그룹 실행

     * 사용자는 작업 모드에 따라 여러 앱을 동시에 실행해야 하는 경우가 많음
          + 예: 웹 개발 모드 → Notepad++, FileZilla, MySQL 클라이언트, 브라우저
          + 글쓰기 모드 → 웹 툴, Photoshop Elements, Slack
     * 현재는 AutoHotkey/AutoIT 스크립트로 가능하지만, Windows 기본 기능으로 “작업 세트 실행” 제공 필요

  9. 오디오 장치 전환 간소화

     * Windows 11에서는 출력 장치 변경 시 여러 단계의 메뉴 진입이 필요해 불편
     * USB 스피커와 헤드셋을 번갈아 사용할 때 빠른 전환이 어려운 문제
     * 사용자는 작업표시줄이나 시스템 트레이에서 즉시 전환 가능한 단축 메뉴를 요구
     * 더 나아가 앱별로 특정 장치를 자동 지정할 수 있다면, 예: Zoom은 헤드셋, 브라우저는 스피커, 업무 효율성 극대화 가능

  10. 마이크로소프트 유발 방해 요소 차단

     * Windows는 광고성 알림, 위젯 뉴스 피드, Xbox Game Pass 홍보 등 업무와 무관한 알림을 기본 제공
     * 이런 요소들은 비활성화할 수 있지만, 기본적으로 꺼져 있어야 한다는 요구
     * 대표적 불만 사례: 업데이트 후 다시 나타나는 OOBE(Second Chance Out-of-Box Experience), 영화 예고편 알림, Game Pass 권유
     * 사용자들은 OS가 본질적인 기능에 집중하고, 광고나 프로모션은 완전히 제거되기를 원함

결론 및 제안

     * Microsoft가 OneDrive, Microsoft 365, Game Pass 등 자사 서비스 영업에만 몰두하지 않고 생산성 실질 지원에 집중해야 함
     * AI 기능보다 일상적인 업무 효율화를 위한 개선이 더 시급함
     * 사용자가 진정 원하는 기능과 변화가 반영되길 기대함

   윈도우에 끄지 못하는 광고성 알림이 뜨는 것, 삼성이 갤럭시 폰 기본앱에 광고 넣은 것 같은 느낌입니다.

   블루스크린 해결이나 좀... Reliability 도구는 업데이트가 몇년간 없네요

   작업 표시줄은 Windhawk 기반으로, 오디오 장치는 EarTrumpet 등의 서드파티로 없는 기능을 메꿔 쓰는 경우가 많아진 것 같습니다. 최근에는 탭 기반 소프트웨어(웹 브라우저, VS Code 등)를 여러 개 띄워놓을 때 그것들이 작업 표시줄에서 구분이 잘 안 되는 경우가 있어서 문제라고 느끼는데, Windows가 개선되길 바라는 것보다는 커스터마이즈해서 쓰는 게 맞나 같은 생각을 하게 됩니다.

   이동·크기 조절 가능한 작업표시줄. 대체 왜 이걸 막아놓은걸까. windows 10 까지 항상 우측에 이동해서 사용 중이었는데 .. 코드 보는데 너무 불편함

   작업표시줄 빠른실행을 돌려줘..

        Hacker News 의견

     * 마이크로소프트가 1990년대처럼 파워 유저를 위한, 방해하지 않는 툴을 만들던 시절로 돌아갔으면 하는 바람임. 내게 윈도우 2000은 최고의 윈도우 경험이었음. 보안 문제를 빼면 정말 견고했으며, 화려하지 않고 군더더기 없는 인터페이스가 최고였음. 알림이나 방해 요소 없이 오직 윈도우에 집중할 수 있었고, 사용자에게 존중을 표했음.
       지금 윈도우는 그런 배려가 없어진 느낌임. 마이크로소프트는 윈도우를 단순한 생산성 툴이 아니라 자사 제품 광고 플랫폼으로 여기고 있음. 요즘 사용자가 컴퓨터를 생산성보다는 엔터테인먼트나 커뮤니케이션 도구로 많이 쓴다 해도, 소프트웨어는 여전히 사용자를 방해하지 말아야 함. 소프트웨어는 조용히 있고 사용자가 명령할 때만 움직이면 된다고 생각함.
       구글도 끊임없이 로그인이나 크롬 전환을 요구해서 똑같음. macOS도 잡스 시절에 비해 최근 10년 새 알림창이 매우 많아졌음.
       그럼에도 수많은 조직이 생산성을 위해 윈도우, macOS, 구글 서비스에 의존하지만, 예전보다 점점 더 불편해지고 생산성에 방해가 되고 있음
          + 나도 완전히 같은 생각임. 지난 20년간 계속 윈도우 2000이 최고라고 말해왔음. UI만 약간 손질하면 더 바랄 게 없고, 보안·하드웨어만 최신이면 정말 만족스러울 것임. 마이크로소프트의 변화 때문에 결국 나도 리눅스로 넘어갔음
          + 마이크로소프트의 현재 팀이 다시 윈도우 2000을 만들 수 있을 거라 생각하지 않음
          + 난 아직도 포토샵 등 예전 Adobe 툴을 쓰기 위해 윈도우 2000 머신을 사용하고 있음. DRM도 거의 없었고, 사용자를 존중해주는 OS였음. 감시자처럼 굴지 않음
          + 실은 방법이 아주 간단함. LTSC 버전을 다른 타깃으로 마케팅만 해도 거의 95%는 해결임. 근데 결국 이런 식으로 신경 안 씀
          + 요즘 윈도우가 사용자를 덜 배려한다는 표현은 너무 약함. 마이크로소프트는 점점 노골적이고 공격적으로 사용자에게 적대적으로 변하고 있음. 이게 바로 독점의 저주라 생각함. 언젠가는 독점자가 사용자에게 완전히 무관심해지고 자신들 방식만 강요하게 됨
     * 최근 윈도우 업데이트 후 Office와 백업 제안을 또다시 거절해야 했음. 최악은 동의 없이 홈 폴더를 OneDrive로 옮겨버린 경험임.
       그래도 PowerToys 등 유용한 기능도 있음.
       오디오 장치 전환 이슈라면 Soundswitch를 써보길 권유함. (비슷한 이름의 사기성 소프트웨어도 있으니 주의 필요)
          + 최근 업데이트 후 ""OOBE"" 화면이 정말 악명 높음. 마지막에는 Alt-Tab까지 막아서 도망갈 수도 없었고, 내가 전혀 쓰지 않는 마이크로소프트 계정 비밀번호까지 요구했음. 메모 확인도 못 해서 백업 스마트폰 없었으면 내 PC는 벽돌 될 뻔했음.
            이 정도면 거의 다크패턴 최악 사례임. 리눅스로 갈아탈 각오가 생김
     * 리눅스를 쓰면 원치 않는 텔레메트리, 감시, 강제 클라우드 연동 계정, 계속되는 업셀링, 대부분의 맬웨어 걱정 없이 모든 걸 이용할 수 있음. 2025년에 마이크로소프트에게 조금씩 굽신거리는 건 나약한 선택임. 노예로 사는 것임
          + 윈도우가 가진 여러 단점에 실망하고 리눅스에도 실망하는 상황이 생김! 예를 들면 ABI 호환 문제, Sudo가 파워유저 전용인 척 하면서도 자주 필요한 점, 싱글유저 PC에 최적화되지 않은 UX, 비표준 하드웨어 지원 약함 등이 있음.
            리눅스가 내가 바라던 컴퓨터 철학과는 어딘가 깊게 다름. 내가 원하는 건 단순히 무언가를 만들고 편하게 실행하는 것이지 관리자가 되고 싶은 건 아님
          + 1년 전부터 메인 데스크탑을 Debian XFCE로 바꿈. 배포판 고르고 NVIDIA 드라이버, 키보드 단축키 설정까지 초기엔 시간이 꽤 걸렸지만 세팅 끝나니까 지금은 정말 조용히 잘 동작함. PC 켜고 음악 틀고, 프로젝트 코딩만 함. 드라마 없는 일상임.
            대부분의 비게이머는 웹브라우저만 있으면 되니까, 적절한 드라이버가 미리 깔린 배포판이라면 많은 사람이 이 방식을 쓸 수 있다고 생각함
          + 리눅스로 옮기고 싶은데 추천 배포판이 궁금함. 내 조건은 3060Ti로 윈도우 수준의 게임 경험, 터미널 기초 명령어 익숙, UI는 윈도우 10이 제일 마음에 드는 편임. Ubuntu나 macOS는 많이 써봤는데 자잘한 헷갈림이 많았음. ""그냥 되는"" 환경을 원함
          + 아쉽게도 macOS를 제외하면 비기술 사용자 관점에서 윈도우만큼 좌절이 적은 리눅스 배포판은 아직 없음. 마이크로소프트에 대한 비판은 정당하지만, 리눅스 현실도 직시해야 함
          + 리눅스 사용의 반대급부로 ""리눅스 만지다 밤샘""을 겪으라는 농담도 존재함. 이번 주에만 두 번이나 그런 밤을 보냈고, 결국 백업 복구로 회귀함. ARCH, UBUNTU, DEBIAN이 30년째 데스크탑 플랫폼 하위권을 놓치지 않고 있음. 결국 노예의 형태도 다양함
     * 서버 용도로는 윈도우 2000 서버가 전성기였음. 엔드 유저용으론 XP와 윈도우 7이 최고였고, XP가 유아틱하게 보였지만 익숙해지면 훨씬 나았음.
       예전엔 UI가 강제되는 점이 오히려 사용자 이해에 장점이 있었음. 요즘은 브라우저가 UI가 되고, 각자 비일관적으로 동작해서 더 혼란스러움.
       예전 MS-Office, 특히 리본 도입 전 버전이 정점이었고, 그 후로 하락세임.
       최근에는 FreeBSD로 옮기려 함. 리눅스 배포판은 지나친 분화, 신뢰성 저하, 반복성 약화 등 문제로 인해 실망감만 커짐. (예: apt-get 잡스러운 종류가 너무 많아졌음.) 데비안도, 레드햇이나 페도라도 더 이상 마음에 들지 않고, 심지어 버그 신고하면 ""bug 아님""으로 넘어감. Pop-OS도 배율·폰트 문제 등으로 미완성 느낌임.
       2025년이 다되어도 네트워크 인터페이스가 연결되기 전에 fstab에서 네트워크 마운트가 안 되는 게 버그 취급조차 안 됨. 리눅스 데스크탑의 해는 여전히 멀었음.
       참고로, 80년대 애플은 좋아했지만 그 이후론 그렇게 생각하지 않음.
       그래도 리눅스와 BSD에서 세상을 더 좋게 만들려 애쓰는 개인의 노력은 여전히 감사하게 여기고 있음
          + 윈도우 7 PC 메인보드를 10년 만에 업그레이드 했지만 정상 부팅이 안 되었음. 부팅 화면에서 뭔가 메시지가 번쩍 지나가고 완전히 멈춤.
            선택은 새 윈도우 11을 200달러에 사거나 리눅스로 전환하는 것이었음.
            결국 거의 모든 점에서 만족하며 리눅스로 왔고, 가끔 그리운 윈도우 전용 앱 하나 빼면 매우 행복함
          + 아직도 오피스 2003이 그립고 특히 Excel 파워유저에게는 예전 버전이 훨씬 빠르고 안정적이었음. 65k 행 제한도 오히려 기능이라고 생각했음
     * 마이크로소프트가 C#에도 똑같이 불필요한 것들을 마구 추가하고 있음. 그동안 엄청나게 많은 기능이 추가됐는데, 정작 모든 C# 개발자가 정말 원하는 sum type은 아직 없음
          + 장단점이 혼재한다 생각함. 나쁜 점도 있지만 좋은 점도 많았음. “C#, the Good Parts”라면 JavaScript의 그것보다 훨씬 두꺼운 책이 됐을 것임
          + 어떤 걸 구체적으로 불필요하다 생각하는지 궁금함
          + 분량이 적은 언어는 절대 아니지만, 추가되는 기능들이 무용하다는 생각은 안 듦. 오히려 꽤 유용함. 물론 이런 개선 방향은 언어를 더 무겁게 함. Go처럼 미니멀한 언어도 가치 있지만, C#은 전체적으로 꽤 멋진 언어라 생각함. 모든 실사용 언어는 못생긴 면이 있게 마련임
          + sum type은 방법만 다르면 인터페이스 만들기로 어느 정도 흉내낼 수 있음. 예를 들면
Z read<Z>(Func<A,Z> readA, Func<B,Z> readB)

            Yoneda 임베딩과 비슷하게 우겨넣어 쓸 수 있음
          + 클래스와 상속 구조로 N개의 클래스가 빈 베이스 클래스를 상속하게 해서 sum type을 모방할 수도 있음
     * 진짜 광고 없는 프로페셔널 윈도우 버전을 팔았으면 좋겠음. 아주 비싼 Microsoft surface도 사면 광고가 달려 있던데, 진짜 프로페셔널용 윈도우는 없는 상황임
          + 완전히 원하는 건 아닐 수 있지만, 실제로 Windows 11 Pro를 구매할 수 있음
            https://www.microsoft.com/en-ie/d/windows-11-pro/dg7gmgf0d8h4
          + 윈도우 2000 프로페셔널 시절부터 그런 라인업이 존재하긴 했음. 구체적인 광고/크랩웨어의 차이는 잘 모르겠지만 프로 버전은 그룹 정책 등으로 어느 정도 제거할 수 있음. 물론 이런 실정 자체가 우스꽝스럽지만, 광고 없는 비싼 버전을 바라는 의견 자체가 마이너해서 불만 있는 사람들도 그런 제품이 있다는 걸 모름
     * 내 파트너가 윈도우를 쓰고 내가 간간이 초보 수준의 지원을 해주는데, 항상 헷갈리는 점이 오른쪽 클릭(컨텍스트 메뉴)임. 뭐가 문제인지 딱 짚어 설명하긴 어렵지만, 예전보다 너무 복잡하고 기본 작업이 한 번 더 클릭해야 나옴. 분명 설정을 바꿀 방법이 있을텐데, 이런 문제들이 보통 다른 이슈를 해결하려 할 때마다 튀어나와 시간을 더 잡아먹음. 꼭 필요한 기능은 기본값으로 해 주고, 추가 기능은 옵션으로 만들면 좋겠음
          + Win11에서 강제로 쓰게 될 때, 텔레메트리 끄는 스크립트를 찾다 보니 예전 방식의 오른쪽 클릭 메뉴 복원 옵션이 있더라. 예전 방식 자체가 너무 단순 명쾌한데 뭘 바꿀 게 있다고? 해서 실제로 클릭해보니 '이게 뭐야?' 할 만큼 변했음. 왜 MS에서 이런 걸 굳이 바꾸는지 의문임
          + 새 오른쪽 클릭 메뉴의 도입 이유는 성능 때문임. 기존에는 3rd party 모듈이 메뉴에 얹히면서 첫 클릭에 심하게 버벅이는 일이 많음
     * OS는 목수의 공구함 같은 존재임. 나는 그 안에 내 앱(망치, 톱, 드라이버 등등)을 넣어두고, 작업이 끝나면 다시 집어넣음. OS의 역할은 내게 특정 앱을 추천하거나, 내 공구함 자체를 강제 업데이트 하는 게 아님.
       OS는 항상 내 앞을 가로막지 않는 존재여야 함.
       나 역시 윈도우 2000이 최고의 OS였다고 생각함
     * 업무 때문에 종종 윈도우 부팅을 하는데 윈도우의 몰락 이야기는 항상 많이 들음.
       나만 문제를 못 느끼는 걸까? 나는 귀찮은 것들 다 꺼두었고, 표준적인 오피스·생산성 도구 빼곤 아무것도 안 깔았음. 이렇게 하면 정말 군더더기 없는 셋업이 되고, 심지어 EAP 빌드로도 문제나 충돌 한 번 없고 손댈 필요가 없는 환경임.
       실제로는 많은 분들이 이슈를 겪는 걸 알지만, 내 환경에서는 공감이 안 됨. 아마 이용 방식 차이 아닐까 싶음
          + 결국 인스톨 방식 차이임. 나는 완전히 깨끗하게 세팅된 윈도우 10을 사용하고, 내 아내는 OEM/기본 설치 그대로였는데, 1년 만에 아내 노트북은 사용할 수 없게 됐고, 내 노트북은 아직도 아이가 잘 쓰고 있음
          + 귀찮은 거 다 끄는 데 얼마나 걸렸는지, 몇 군데에서 꺼야 했는지 궁금함. 정말 전부 다 비활성화 한 걸까, 아니면 그냥 적응된 걸까 (예: Win+S 검색이 우선 인터넷 찾아주고, 그다음에야 로컬 파일을 보여줌)
          + '귀찮은 것들 다 껐다'고 하지만, 그 방법을 아는 사용자가 많지 않음
          + 시작 메뉴/검색 광고, OneDrive, Xbox, Office 안내 등 지금은 그나마 참을 만한 수준이지만 결국 점점 '더는 못 참을' 수준에 이를까봐 걱정임. 이런 현상이 서서히 악화된다고 느낌
     * 작성자가 마이크로소프트에서 불필요하게 자꾸 뭘 추가한다고 불평하다가, 결국 새로 권장하는 것도 전부 필요 없는 것들이라서 웃음이 남
"
"https://news.hada.io/topic?id=22585","NextDNS, 연령 확인 우회 기능 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        NextDNS, 연령 확인 우회 기능 추가

     * NextDNS가 연령 확인 우회 기능을 새로 도입함
     * 이 기능은 웹사이트의 연령 확인 절차를 회피하는 데 활용 가능함
     * 사생활 보호와 편의성 증대를 동시에 추구함
     * 일부 웹사이트에서 연령 차단 우회 시 편리함 제공함
     * 전통적 인터넷 필터링에 대한 새로운 접근 방식임


NextDNS가 연령 확인 우회 기능을 도입한 배경

     * NextDNS는 DNS 기반 필터링 서비스로, 광고 차단, 추적 방지, 보안 기능을 제공함
     * 이번에 새롭게 추가된 ""Bypass Age Verification"" 기능은 사용자가 웹사이트에서 요구하는 나이 확인 절차를 통과하지 않고 접근할 수 있도록 지원함
     * 본 기능은 나이 인증이 필수인 콘텐츠에 대해 지속해서 인증 과정을 요청받는 번거로움을 해소함

개인 정보 보호와 편의성 측면

     * 이 기능의 도입으로, 사용자들은 불필요한 개인 정보 노출 없이 웹사이트를 이용하는 편리함을 누림
     * 기존 방식의 나이 확인 수단(신분증, 가입 정보 제공 등)을 거치지 않아도 됨

잠재적 영향과 업계 반응

     * NextDNS의 이번 업데이트는 인터넷 상의 연령 제한 정책에 도전하는 신호로 해석됨
     * 해당 기능이 콘텐츠 접근 규제와 관련하여 미래에 어떠한 논의로 이어질지 주목받고 있음

결론

     * NextDNS의 ""Bypass Age Verification"" 기능은 DNS 필터링 솔루션의 새로운 편의성과 사생활 보호라는 가치에 주목할 필요가 있음
     * 이 기능을 통해 기존에 접근이 어려웠던 페이지로 쉽게 접근함을 기대할 수 있음

        Hacker News 의견

     * 장기적으로 효과가 없을 수도 있지만, 이런 행동 자체가 정말 큰 의미가 있다고 생각함. 정부 문서를 업로드하게 만드는 프라이버시 악몽을 우리 모두가 막아야 한다고 봄. 이런 움직임이 규제 기관들에게 자극이 돼서, 유권자들의 주목을 받아 결국 정책 변화로 이어지길 진심으로 바람
          + 요즘 특히 성인 사이트들이 연령 확인을 위해 신분증이나 셀카 업로드를 강요하는 추세임. “이런 규제에 반발해서 유권자들이 변화를 이끌 것”이라는 바람이 있지만 솔직히 말해, 인터넷 포르노의 익명성을 지키는 게 유권자들을 정치적으로 움직일 만큼 강한 동력이 될지는 의문임
          + 신분증 업로드 요구를 없애려는 시도 자체가 대단한 일임. 이렇게 용감하게 행동하는 기업이 있다는 데 깜짝 놀랐음. 어른 중 누구도 정부 추적 때문에 신분증을 웹에 올리고 싶어 하지는 않음. 나도 자식이 어릴 때는 브라우저 사용을 같이 하거나 포르노 차단 브라우저를 써서 크게 문제 없었음. 아이가 좀 더 크고 나서도 가볍게 컴퓨터 사용 지도를 해줬음
          + 이런 아이디어가 아무리 좋아 보여도 신분증 인증 같은 민감한 기술은 민간 기업이 맡으면 안 되고 반드시 정부가 관리해야 함. 이미 정부가 내 신분증을 가지고 있는데 왜 웹사이트에 또다시 업로드해야 하는지 이해할 수 없음. 단순 나이 확인이면 정부 포털에서 OAUTH2를 통한 SSO만으로 나이 정보만 연동 가능함. 미국의 경우 정부 서비스를 위해 그런 계정 만드는 것과 비슷함. 다만 이럴 경우 정부가 어떤 사이트를 방문했는지 알게 되고, 법적으로 이 정보 저장·이용을 금지시키는 규정이 필요함. 정부가 교묘히 트래픽 감청에 나서면 어차피 무의미해질 수도 있음. 좀 더 똑똑한 방법이라면 24시간만 유효한 나이 인증 코드를 발급해서 신뢰받는 업체에만 전달하게 하는 것임. 코드 유출을 방지하려면 무겁게 형사처벌을 두면 억제 효과가 있을 것임. 더
            뛰어난 아이디어가 분명히 나올 수 있을 거라고 생각함. 제3자 기업이 신분증 업로드를 요구하는 건 선택적 무능 혹은 부정부패 때문이라고 봄
     * NextDNS 구독자로서, 이번 시도는 멋지긴 하지만 걱정도 됨. 이런 기능을 공식 서비스로 넣었다가 NextDNS가 규제에 걸려 문을 닫는 상황은 원치 않음. “DNS 트릭” 정보만 공개해서 사람들이 직접 설정하도록 하는 정도면 좋겠음
     * 신분증을 아무 웹사이트에나 넘기는 건 명백한 프라이버시 재앙임. 그래서 이런 서비스를 만든 취지는 이해함. 중요한 건 이게 사용자들에게 시간만 벌어줄지, 아니면 더 강력한 규제 도입을 재촉할지임. 어쨌든 중요한 논의를 촉발시킴
          + 대다수 국가에서는 인터넷 차단 규제가 최종 사용자보다는 제공업체(프로바이더)에만 적용됨. 그래서 해외에 있는 VPN 공급자의 경우 규제 집행이 매우 어렵다고 봄. 미국에서조차 주 경계 너머의 서비스에 직접적으로 손대기 힘듦. 관련 판례로 Marquette National Bank of Minneapolis v. First of Omaha Service Corp 참고 가능함
          + 신분증이든 뭐든 공직자들의 인터넷 사용내역이 유출된다면, 이런 제도가 얼마나 빨리 철회되는지 볼 수 있을 거라고 믿음. 뉴스에서 정부 인사의 포르노 시청 기록을 읽어주는 날이 오기를 기대함
     * 참고로 영국에서는 이런 식의 “우회 서비스” 홍보가 불법일 가능성이 높음. Ofcom(영국 방송통신규제기관)도 연령 확인 우회를 조장하는 콘텐츠를 플랫폼에서 허용, 공유하면 불법이라고 명확히 밝힘. 자세한 내용은 BBC 기사 참고
          + NextDNS는 연령 확인이 의무화된 컨텐츠 플랫폼이 아니기 때문에 이런 규제에 해당하지 않음. 우회 기능을 홍보하는 것 자체가 불법이라고 보기는 어렵다고 생각함
          + 영국이 프라이버시 및 인터넷 자유 관련해서 중국 수준의 통제 정책을 시행하는 것을 보고 충격을 받음
          + 컨텐츠 플랫폼이 VPN 광고를 못 한다면, VPN/DNS 제공업체가 독립적으로 마케팅을 할 수 있는지 궁금증이 생김
          + 영국에 살지 않는 사람들은 영국법에 신경 쓸 이유가 있을지 의문임
     * 제품 소개를 보면 NextDNS는 SafeSearch 강제 적용과 아동 보호 모드 등 자녀 보호 기능도 탑재하고 있음. 자체적으로 우회 기능을 포함하는 게 오히려 더 유익하다고 느낌. 이런 서비스를 운영한다면 공식적으로 연령 확인 우회가 허용돼야 한다고 봄
          + 사실, 영국의 Online Safety Act에 따르면 이런 제품이 연령 확인 우회가 허용될 여지가 있어 보임. 법 조항 링크 참고. 다만, 법 조항이 너무 애매해서 이 서비스에 실제로 적용되기 어려울 것 같음. 현실적으로 연령 확인 우회 서비스를 포괄하지 않는 법 공백이 있을 리 없다고 생각하고, 관련 소송을 통해 해석이 분명해지길 바람
     * 나는 부모 입장에서 아이들을 인터넷, 특히 성인 사이트로부터 보호하려고 함. VPN은 자녀 보호에 매우 유용함. VPN을 설치해서 성인 사이트를 차단하거나 의심스러운 접속 시 알림을 받도록 함. VPN 업체들이 자신들의 기술을 “검열 반대” 또는 “프라이버시 보장”이라고 홍보하는 게 솔직히 당황스러움. 실제로는 검열자에게 더 유리한 도구임. 반면 DNS 서비스는 원래부터 악성코드, 성인 광고 차단 등 검열 기능에서 시작했는데 요즘은 오히려 검열 우회 기능까지 넣고 있음. 단순히 네트워크, DNS 제공자를 바꿨다고 해서 검열을 피할 수 있는 것은 아님
          + 사실 DNS, 네트워크 제공자를 선택하게 해주는 것은 “검열 반대”라기보다는 각자 스스로 어떤 필터를 쓸지 고를 자유를 주는 것임. 나는 검열을 없애는 게 아니라 누구나 자기 기준으로 차단 대상을 직접 결정하는 걸 “검열 반대”로 해석함
          + 필터링 기준을 자체적으로 선택하는 것은 검열이라고 부를 수 없음. 진짜 검열은 선택의 자유가 완전히 박탈됐을 때를 말함
          + 이미 집에서 라우터만으로 차단 기능을 쓸 수 있는데, VPN을 써도 결국 라우터와 같은 역할임. 그런 점에서 “가상머신이 소프트웨어 실행에 좋다”는 말과 비슷함. 왜 굳이 가상환경을 쓰는지 곰곰이 생각해 볼 이슈임
          + VPN이 아니라 VPN에 딸린 필터링 서비스가 문제임. 본질적으로 VPN은 상관이 없음. 마치 터보가 필요해서 V8 엔진을 샀다는 얘기와 같음
     * NextDNS는 1년에 $20 투자로 최고의 가치라고 생각함. iOS를 훨씬 더 쾌적하게 만들어주고, NextDNS 개발자의 철학에 기여할 수 있어서 만족함
     * 나는 NextDNS로 자녀 기기에서 성인 사이트 등을 차단하고 있음. 회사의 근본 철학이 바뀌는 게 아닌지 우려됨. 혹시라도 이런 시도가 미성년자 차단 기능에 영향을 준다면 원치 않음
     * “DNS 트릭”의 원리가 궁금함. 이 부분이 제일 흥미로움
          + 아마 DNS 해석을 조작해서 연령 확인이 필요 없는 국가의 CDN/POP로 우회하거나, TCP 프록시를 통해 트래픽 발신지를 해당 국가로 바꿔주는 포워딩 방식일 것임. 대신 이런 식이면 트래픽 전반의 지연이 늘어남
     * 특별히 의견이 없지만, 예전에 pi-hole 쓰다가 가족 전체를 NextDNS로 바꿨음. 가정당 $20 정말 잘 쓴 것 같음
"
"https://news.hada.io/topic?id=22507","EvilCharts - Shacdn & Recharts 기반의 차트 라이브러리 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              EvilCharts - Shacdn & Recharts 기반의 차트 라이브러리

     * React와 Next.js 환경에서 시각적으로 뛰어나고 인터랙티브한 데이터 시각화를 목표로 만든 차트 UI 라이브러리
     * Bar, Line, Area, Pie, Radar 등 다양한 차트 유형과 매끄러운 애니메이션을 제공
     * shadcn UI 디자인 시스템과 recharts를 활용해 ""플러그 앤 플레이"" 방식으로 손쉽게 프로젝트에 통합 가능
     * 스타일, 패턴, 효과를 자유롭게 수정할 수 있는 맞춤형 디자인 지원
     * 모바일, 태블릿, 데스크톱 환경에서 모두 최적화된 풀 리스폰시브 구조
"
"https://news.hada.io/topic?id=22568","Show GN: Soft Landing - TOML 으로 쉽게 만드는 랜딩 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: Soft Landing - TOML 으로 쉽게 만드는 랜딩 페이지

     * TOML 형식을 사용해 쉽게 랜딩 페이지를 만들 수 있는 오픈소스 프로젝트입니다.
     * 아래의 방법으로 쉽게 사용할 수 있습니다.
         1. 프로젝트 사이트 우측 하단의 Floating Button을 클릭
         2. TOML Editor 내의 내용 변경 (혹은 .toml 파일 import)
         3. 변경사항을 실시간으로 확인
         4. download 버튼을 눌러 html, css, js, assets 를 포함하는 압축 파일을 다운로드
         5. 압축을 풀어 호스팅 서비스에 배포
     * 깃허브 링크
     * 100가지 개발 도구의 랜딩페이지 분석 글을 참고해서 만들었습니다!
"
"https://news.hada.io/topic?id=22607","Anthropic에서 말하는 성공적인 AI 에이전트 설계 원칙 [번역글]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Anthropic에서 말하는 성공적인 AI 에이전트 설계 원칙 [번역글]

TL;DR

     * LLM/AI 에이전트 구축은
          + 항상 단순함을 기본 원칙으로, 필요할 때만 복잡성을 추가""
          + ""프레임워크는 깊이 이해하고 도입"", ""워크플로우·에이전트 패턴(체이닝, 라우팅, 병렬화, 평가자-최적화자 등)을 실제 환경과 목적에 맞게 조합 및 테스트하며, 도구(API) 설계와 문서화, 테스트를 꼼꼼히 할 것"".

1. 성공적인 LLM 에이전트의 설계 원칙

     * 단순함에 집중: 성공적인 구현들은 복잡한 프레임워크에 의존하기보다, 단순하고 조립형(compoundable) 패턴을 활용하는 경향이 강함.
     * 필요할 때만 복잡성 추가: 기본 구조는 최대한 단순하게 설계하되, 반드시 필요할 때에만 복잡성을 도입하는 것이 효율적임.
     * (원문: ""가장 성공적인 구현이 특수한 라이브러리나 복잡한 프레임워크에 의존하지 않았다... 단순하면서도 조립식으로 결합 가능한 패턴을 기반으로 구축되었죠."")

2. 워크플로우 VS 에이전트 개념 구분

     * 워크플로우(Workflows): LLM과 도구가 사전에 정의된 루트(코드 경로)를 따라 처리.
     * 에이전트(Agents): LLM이 자체적으로 작업과 도구 사용을 동적으로 관리(의사결정 주체가 LLM).
     * (원문: ""워크플로우는 LLM과 도구가 사전 정의된 코드 경로에 따라 조율... 에이전트는 LLM이 자신의 과정과 도구 사용 방식을 동적으로 지시"")

3. 에이전트 도입 판단 기준

     * 단순한 방법 → 필요시 점진적 복잡화: 처음엔 단순한 LLM 호출, 검색 등으로 시작해보고 부족하다면 점진적으로 Workflows/Agents 도입.
     * 예측 가능성/일관성이 중요→ 워크플로우 활용 적합
     * 대규모 유연성·모델 주도 의사결정 필요→ 에이전트가 더 적합

4. 프레임워크 도입 원칙

     * LangGraph, Bedrock, Rivet, Vellum 등 다양한 도구/프레임워크가 있으나,
     * 직접 LLM API 활용부터 출발하고, 필요할 때만 프레임워크 도입 권장.
     * 프레임워크 쓸 땐 내부 동작에 대한 깊은 이해 필수 (추상화로 인해 문제 해결 어려워질 수 있음)
     * (원문: ""개발자들이 우선 LLM API를 직접 사용하는 방법부터 시작할 것을 권장"")

5. 실전 패턴별 워크플로우 및 예시

     * 확장된 LLM (Augmented LLM): 검색, 도구연결, 메모리 등 빌트인 확장기능 추가 (구체적 인터페이스 설계와 문서화 중요)
     * 프롬프트 체이닝(Prompt Chaining): 하나의 과제를 여러 LLM 호출(단계)로 나눠 명확성과 정확성 확보.
          + 예: 마케팅 카피 생성→번역, 문서 초안→검토→작성
     * 라우팅(Routing): 입력 분류 후 그에 맞는 처리·도구로 분기
          + 예: 고객 문의 유형별 라우팅, 어려운 질문만 고성능 모델로 전달
     * 병렬화(Parallelization):
          + 섹셔닝(Sectioning): 작업을 여러 서브태스크로 쪼개 동시에 처리
          + 보팅(Voting): 똑같은 작업을 여러 번 시도해 최선의 결과를 결정
          + 예: 코드 취약점 검토, LLM 평가 자동화
     * 오케스트레이터-워커(Orchestrator-Workers): 마스터 에이전트가 하위 작업을 분배·통합.
          + 예: 복잡한 코딩 작업에서 필요한 부분만 실시간 분배, 여러 데이터 수집/통합
     * 평가자-최적화자(Evaluator-Optimizer): 한 LLM이 답을 만들고, 다른 LLM이 해당 답을 평가·피드백해 개선 반복
          + 예: 번역 결과 반복 개선, 복합적인 정보 수집

6. 실제 산업 적용 사례

     * 고객지원: 챗봇+도구 통합, 고객 데이터/주문/환불 작업 자동화, 성공 여부는 '문제해결' 기준으로 명확. 실제 Usage-based 요금 적용 등 기업 레퍼런스.
     * 코딩 에이전트: 자동 테스트 피드백 기반 반복·개선, SWE-bench 등에서 실증. 문제 영역과 결과 품질이 명확히 측정가능. 다만, 항상 최종 검토는 인간개입 필요함.

7. 도구 프롬프트 엔지니어링(부록2) 팁

     * LLM이 편하게 쓸 수 있는 포맷과 충분한 토큰 할당 권장
     * 도구 설명(usage, 예시, 에지케이스, 경계설정 등) 명확하게
     * 실제 모델 활용 양상을 테스트⇒ 개선(워크벤치 등 이용)
     * 사소한 실수도 방지할 수 있는 poka-yoke 방식 설계
     * (원문: ""좋은 도구 정의에는 사용 예시, 에지 케이스, 입력 형식 요구사항, 그리고 다른 도구와의 명확한 경계가 포함되는 것이 좋습니다."")

8. 핵심 원칙

     * 단순함 유지 (Keep it simple)
     * 에이전트 계획과정(Planning)의 투명성 필수
     * 도구·인터페이스의 명확한 문서화와 테스트
     * 프레임워크는 초기 속도에 좋지만, 추상화는 최소화 및 직접 제어 권장

   예측 가능성/일관성이 중요→ 워크플로우 활용 적합
   대규모 유연성·모델 주도 의사결정 필요→ 에이전트가 더 적합

   글 디테일하게 보시고 핵심을 정확히 파악하셨네요..!

   좋군요 좋다구요 으하하

   글 좋게 봐주셔서 감사합니다 :)
"
"https://news.hada.io/topic?id=22522","Syncthing v2.0.0 첫 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Syncthing v2.0.0 첫 릴리스

     * 데이터베이스 백엔드를 LevelDB에서 SQLite로 변경, 초기 실행 시 마이그레이션 필요
     * 로그 형식을 구조화된 로그로 변경(메시지 + key-value 쌍), 패키지별 로그 레벨 설정 가능, WARNING 레벨 추가
     * 삭제 항목 보존 기간 기본 6개월로 변경, 옵션으로 조정 가능
     * 명령줄 옵션 파싱 현대화, 단일 대시(-) 긴 옵션 지원 중단 (-home → --home)
     * 롤링 해시 탐지 기능 제거, 스캔·동기화 속도 향상
     * 기본 폴더 자동 생성 제거, v2 디바이스 간 기본 다중 연결(3개) 활성화
     * Dragonfly, Illumos/Solaris, Linux PPC64, NetBSD, OpenBSD(386/arm), Windows ARM 등 일부 플랫폼 빌드 중단
          + SQLite 크로스 컴파일 복잡성으로 인한 지원 축소
     * 삭제 파일이 충돌 해결에서 승리할 수도 있도록 동작 변경

   modernc를 사용했는데도 컴파일이 복잡했나보네요.
   BSD 지원 축소는 조금 아쉽습니다.

     modernc의 SQLite는 트랜스파일링을 사용한 순수 Go SQLite 드라이버 입니다.
     대신 glibc를 트랜스파일링한 libc를 의존합니다.

   Syncthing - 지속적 파일 동기화 오픈소스
"
"https://news.hada.io/topic?id=22533","미국에서 Apple Watch의 혈중 산소 모니터링 기능이 다시 제공됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                미국에서 Apple Watch의 혈중 산소 모니터링 기능이 다시 제공됨

     * 미국 내 Apple Watch Series 9, Series 10, Ultra 2 사용자는 소프트웨어 업데이트를 통해 혈중 산소 측정 기능을 다시 사용할 수 있음
     * iOS 18.6.1 및 watchOS 11.6.1 업그레이드가 필요하며, 이후 혈중 산소 데이터가 iPhone에서 연산됨
     * 이 기능 복구는 최근 미국 관세청 판결로 가능해짐
     * 미국 외 지역 구입 제품이나 기존 혈중 산소 기능이 있는 제품은 영향 없음
     * Apple은 다양하고 혁신적인 건강 및 안전 기능을 제공하며, 이를 통해 사용자 건강 관리 지원 목적임


업데이트 개요

     * Apple은 일부 Apple Watch Series 9, Series 10, 그리고 Apple Watch Ultra 2 사용자에게 소프트웨어 업데이트를 통해 새로운 혈중 산소 측정 기능을 제공할 예정임
     * 이 업데이트는 미국에서 해당 모델을 사용하는 고객이 iPhone(iOS 18.6.1)과 Apple Watch(watchOS 11.6.1)를 업그레이드할 때 적용 가능함

새로운 혈중 산소 측정 방식

     * 소프트웨어 업데이트 후, Blood Oxygen 앱을 통한 센서 데이터가 Apple Watch에서 직접 측정된 뒤 페어링된 iPhone에서 분석 및 계산됨
     * 측정 결과는 iPhone의 Health 앱(호흡 섹션) 에서 확인 가능함
     * 기존에 혈중 산소 기능이 제공된 미국 판매 제품이나, 미국 이외 지역에서 구입한 제품에는 아무런 영향 없음

배경

     * 이번 기능 추가·복구는 미국 관세청(CBP)에서 최근 내린 결정에 힘입은 것임

Apple의 건강 기능 지원

     * Apple은 사용자를 위한 과학적 근거와 프라이버시 중심의 업계 선도적인 건강, 웰빙, 안전 기능 개발에 매진하고 있음
     * Apple Watch Series 9, 10, Ultra 2는 불규칙 심장 박동 알림, ECG 앱, 수면무호흡 알림, 낙상 감지, 수면 추적, 손목 온도 감지, Vitals 앱, Noise 앱, 복약 앱, Mindfulness 앱 등 다양한 기능 제공 흐름임
     * Apple은 이를 통해 사용자의 더 건강한 생활을 지원하고자 하는 목표임

        Hacker News 의견

     * 애플은 이 기능 때문에 Massimo와 특허 분쟁을 겪었음, 그래서 애플은 Apple Watch의 센서를 사용하지만 혈중 산소 계산을 아이폰에서 하도록 우회책을 썼음
       사실 하드웨어 자체는 기존과 같음, 시계 뒷면에서 특정 파장의 빛을 피부에 쏘고 반사된 빛을 측정하는 원리임
       심박수는 그린(525 nm)과 적외선(850–940 nm)으로, 혈중 산소는 2020년에 추가된 레드 라이트(660 nm)를 사용함
       이제는 아이폰이 레드와 적외선 흡수 비율을 계산하고, 실험 데이터를 기반으로 보정 상수를 적용해서 혈중 산소를 추정하게 됨
       기술 원리에 대해 더 자세히 알고 싶다면 여기를 참고 바람
          + 소프트웨어 특허는 정말로 해악임
          + 이런 실험은 30년 전 고등학교 때도 했던 것임, 이런 게 특허가 된다는 게 말도 안 된다고 느껴짐
          + 한 단계 더 발전시켜서 측정을 시계에서 하고, 계산은 아이폰에서, 결과는 다시 시계에서 보여주면 어떨까 생각해봄
            기술적으로 모든 연산은 아이폰에서 하고, 시계는 오직 입출력 장치 역할만 하는 셈임
          + 링크에 따르면 관련 특허는 2028년에 만료된다고 함
          + 이 특허는 시계 CPU에서 처리를 하면 위반이지만, 데이터를 별도의 CPU(아이폰)로 옮기면 위반이 아니게 되는 점이 정말 황당함
            이렇게 된다는 건 특허 자체가 엉터리라는 명확한 신호라고 생각함
     * 내 경험상 Apple Watch의 혈중 산소 측정은 터무니없이 부정확했음
       결과가 광범위하게 들쑥날쑥했고, 산소포화도가 80%라고 나올 때도 있었음
       만약 그 수치가 진짜라면 바로 응급실에 가야 한다는 소리임
       일반적인 손가락용 산소포화도 측정기는 저렴하고 신뢰할 수 있다고 느껴짐
          + 혈중 산소 측정기도 여러 변수에 따라 2~4%까지 오차가 있을 수 있음
            멜라닌 같은 요인(피부 색깔)도 측정 오류를 유발할 수 있는데, 어두운 피부를 가진 사람들은 실제로 위험할 정도로 산소포화도가 낮아도 정상처럼 표시될 수 있음
            COVID 때 SpO2 한 자리까지 신경 쓸 때가 많았지만, FDA도 측정 한계에 대해 지속적으로 경고함
            실제로 80% 산소포화도라면 기절해서 측정을 아예 못 함
            의사들 입장에선 거짓 양성뿐 아니라 거짓 음성도 큰 우려임
            관련 기사: 존스홉킨스: 피부색과 산소포화도 측정기, FDA: 산소포화도계의 한계
          + FDA 기준은 혈중 산소가 6% 이내 오차를 95% 이상 충족해야 한다는 것임
            개별 측정치 보다는 장기적인 트렌드를 봐야 하는 게 정상임
          + 수면 무호흡증 진단 받고 나서 Apple Watch로 혈중 산소를 자주 확인했는데, 측정값이 75%까지 낮게 나올 때가 있어서 불안감을 느꼈음
            이후 공식 수면검사에서 내 산소 수치는 95% 이상임을 확인했고, 시계 측정값이 셋팅(손목 조임 정도나 위치)에 따라 엄청 좌우된다는 걸 알게 됨
            결론적으로 Apple Watch 신뢰도는 매우 떨어진다고 생각함
          + 내 Garmin과 손가락 산소포화도 측정기는 수치가 정확히 일치함
          + Series 9(2023년 말 구매)에서는 그런 문제 없었음
            거의 항상 손가락 측정기와 비슷하게 95% 이상 나왔음
     * 특허 분쟁 상황에서 Massimo를 보호하는 게 소비자가 기능을 누리지 못하게 만드는 것보다 왜 더 중요한지 이해 못 하겠음
       특허법이 중요하긴 해도 Massimo가 실제로 대중에게 유익한 제품을 제공하는 데보다 애플로부터 돈을 뜯어내는 데 집착한 느낌임
          + 특허는 애초에 수익 확보(렌트시킹)를 위해 존재하고
            단기적으로 많은 사람이 이익을 누릴 수 있게 하는 게 목적이 아니라, 발명가가 더 많은 돈을 벌 수 있도록 한정시키는 게 본질임
            긴 안목으론 이러한 장치가 더 많은 발명을 유도할 것이라는 이론이고, 개별 사건에서 사회적 이익을 저울질하는 건 법원이 할 일이 아님
            딱 한 가지 사실만 보는 거임: 제품이 특허를 침해했는지 아닌지
          + 특허의 '렌트시킹'이 원래 의도 아님?
            발명을 유도하는 기제로써 특허 제도가 만들어진 것임
          + 이번 건은 법원 판결이 아니라 ITC(미국 국제무역위원회)가 판결한 것임
            정부 기관이 법원을 거치지 않고 이렇게 상품 판매를 막을 수 있다니 이상하게 느껴짐
            원래는 소송으로 해결해야 하는 사안 같음
          + 요즘 특허가 바로 이런 렌트시킹 구조라는 데 동의함
          + 애플이 의도적으로 특허를 위반했기 때문임
            사실 판사가 하드웨어 리콜까지 요구하지 않은 게 애플 입장에선 천만다행임
            특정 기능만 API로 개방해서 사용자가 알아서 쓰게 하는 식으로 괜히 꼼수 부릴 수도 있었을 텐데 말임
            미국에선 건강 관련 기능이 정말 중요하게 여겨지지만, 법원은 애플에 해를 끼친 정황이 명확하면 실제 기능의 의의를 따지지 않음
     * 연산을 폰에 넘기는 방식이 정말 웃김
       누가 생각해도 너무 명확한 해결책이라 오히려 왜 이제서야 도입됐는지 궁금함
       법적 검토에 시간 걸렸고 이제야 가능하다고 판단한 듯함
          + 애플에 따르면

     최근 미국 세관 결정 때문에 업데이트를 적용할 수 있게 됐다
     그런데 결정문을 아무리 찾아봐도 뭔지 잘 모르겠음
     * 나는 Garmin 시계에 해당 기능이 있지만 그다지 쓸모 없다고 느낌
       잠잘 때 산소 수치는 그날 얼마나 꽉 차게 찼는지에 더 좌우되는 것 같고, 배터리도 엄청 빨리 닳아서 결국 비활성화시킴
       결국 코로나 시기에 샀던 손가락용 측정기를 더 신뢰함
     * 애플워치가 꽤나 강력한 SoC를 쓰는데도 굳이 연산을 아이폰에 넘기는 게 흥미로움
       아마 애플워치 배터리 소모를 피하려고, 대신 아이폰 배터리를 쓰려는 것 같기도 함
     * 곧 혈당 모니터링도 나오길 희망함
          + 요즘은 손 안 베고도 혈당 측정이 가능해진 건지 궁금함
          + 나는 원래 스마트워치에 별 관심 없었음
            하지만 CGM(연속 혈당 측정)용으로 쓸 수 있다면 너무 끌릴 듯함
            자주 센서를 문턱에 부딪혀 떨어뜨리거나 접착제 자국이 남는 게 싫었기 때문임
     * O2 모니터링은 제대로 된 산소포화도 측정기에 비해 부정확하고 신뢰도도 떨어짐
     * 명확히 하자면
       이 기능의 복귀를 위해서는 아이폰이 반드시 필요해졌음
       기존 버전에서는 그럴 필요 없었음
          + 어차피 애플워치는 셋업 단계에서부터 아이폰이 필요하긴 했음
     * 미국 세관의 판결이 뭔지 궁금함

     최근 미국 세관 결정 덕분에 이 업데이트가 가능하게 됨
          + 아마 이 판결문인 듯함(2025년 1월 기준)
            특허는 '사용자가 착용하는 비침습적 생리 신호 측정 장치'에 관한 것임
            그래서 애플은 연산을 사용자가 착용하지 않는 기기(즉, 폰)로 이동시켜 특허 회피를 시도한 것으로 보임(내 해석임)
            원 특허 링크
          + 이런 결정이 그냥 가능하다는 게 신기함
"
"https://news.hada.io/topic?id=22506","Vercel, v0.dev를 v0.app 으로 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Vercel, v0.dev를 v0.app 으로 변경

     * 이제 한 번의 프롬프트로 UI, 콘텐츠, 백엔드, 로직이 포함된 앱을 배포할 수 있는 ""모두를 위한 AI 빌더""가 됨
     * 에이전틱(Agentic) 기능이 추가되어 사용자가 원하는 것을 설명하면 맥락을 이해하고, 스스로 계획, 디버깅, 개선까지 수행함
     * 협업도 지원하며, 사용자가 원하는 것을 설명하면 올바른 절차를 스스로 파악하고, 기존 작업을 기억하며, 앱의 모든 구성 요소를 안전하게 완성함
     * 제품 관리자, 리크루터, 세일즈 팀 등 다양한 직군이 스펙 작성부터 MVP 제작까지 활용 가능
     * 이제 기술 유무와 상관없이 아이디어만 있으면 풀스택 앱을 만들 수 있음
     * 기존 v0.dev의 반복 프롬프트 방식 대신 오류 점검, 디자인 제안, 웹 검색, 파일 읽기, 작업 계획, 통합 구현 등을 자동 처리함
          + 작업 점검: 오류 감지, 구현 비교, 결과 검토
          + 디자인 영감 제공: 프롬프트 기반으로 이미지/설명 생성
          + 웹 검색: 웹을 검색하고, 실패를 처리하고, 출처와 함께 결과 표시
          + 작업 계획 수립: 요청에 따라 단계별(Step-by-Step) 실행 계획 생성
          + 파일 읽기: 파일 내용을 읽고 콘텐츠를 반환
          + 웹 검사: 실시간 사이트 분석, 스크린샷 캡쳐, 찾은 것들을 요약
          + 할 일 관리: 작업 추적, 계획 갱신, 기술 분석(Breakdown) 출력
          + 통합 구현: 선호 툴과의 연동 지원
     * v0.app 에서 무료로 시작 가능
"
"https://news.hada.io/topic?id=22514","PYX: 파이썬 패키징의 다음 단계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PYX: 파이썬 패키징의 다음 단계

     * pyx는 uv 개발팀이 만든 Python 네이티브 패키지 레지스트리로, PyPI·PyTorch·사설 소스 설치 속도를 최대 10배 향상함
     * 기존 패키지 레지스트리 범위를 넘어, 속도·보안·GPU 인식 기능을 제공하며, 내부 패키지와 PyPI·PyTorch 같은 공개 소스 모두 지원
     * 패키지 인기, 생성 시기, 취약점 여부 등 기준으로 필터링 가능한 전용 인덱스 URL을 제공해 보안성과 컴플라이언스를 강화
     * Python에 특화된 최신 표준 지원과 uv와의 직접 통합을 통해 설정 없이 인증과 사용이 가능함
     * 팀 내 중복 빌드, PyTorch·CUDA 설치 난이도, 빌드 깨짐, 인증 불편 등 엔터프라이즈 환경의 주요 문제를 서버-클라이언트 통합으로 해결
     * GPU 인식 기능으로 하드웨어에 맞는 PyTorch, vLLM, FlashAttention, DeepSpeed 등의 사전 빌드 버전을 일관된 메타데이터와 최적 구성으로 제공함
     * 최적화된 아티팩트와 uv 네이티브 메타데이터 API를 통해 다른 사설 레지스트리 대비 월등한 성능을 제공


Astral의 비전과 배경

     * Astral은 Python 생태계를 위한 고성능 개발 도구를 만드는 회사로, Ruff(린터·포매터)와 uv(패키지 매니저)로 잘 알려짐
     * 창업 배경은 Python이 세계에서 가장 인기 있는 프로그래밍 언어임에도 불구하고 툴링 측면에서 충분히 지원받지 못하고 있음을 느꼈기 때문임
     * 현재 Astral 도구 체인은 월 1억 건 이상 설치, uv는 하루 5억 건 이상의 요청을 처리하며 폭발적으로 성장 중임
     * 목표는 Python을 가장 생산적인 프로그래밍 생태계로 만드는 것이며, 이를 위해 클라이언트 도구를 넘어 Python 클라우드를 구축하려 함

pyx 소개

     * pyx는 uv의 최적화된 백엔드로 설계된 Python 네이티브 패키지 레지스트리
          + 내부 패키지 호스팅 가능
          + PyPI, PyTorch 인덱스 같은 공개 소스에 대한 가속·설정 가능 프런트엔드 역할
     * 주요 특징
          + 빠른 설치 속도 : 패키지 설치 및 빌드 최적화
               o PyPI, PyTorch, 내부 프라이빗 소스에서 패키지 설치 시 최적화된 아티팩트와 uv 네이티브 메타데이터 API 활용
               o 타 사설 레지스트리 대비 최대 10배 빠른 속도 제공
          + 보안 및 규정 준수 강화 : 의존성·공급망 이해를 통한 위험 최소화
               o 패키지 필터링을 위한 전용 인덱스 URL 생성 가능
               o 인기, 배포 연령, 취약점 상태 등의 기준으로 패키지 접근 제어
               o 서버 측에서 재현 가능한 빌드 보장
          + 최신 표준 지원
               o Python에 특화된 최신 패키징 표준과 워크플로를 지원
               o uv와 직접 통합돼 별도 설정 없이 원활한 인증 및 사용 가능
          + GPU 인식 패키지 배포 : CUDA·PyTorch 관련 빌드 및 배포 단순화
               o PyTorch, vLLM, FlashAttention, DeepSpeed 등 GPU 관련 라이브러리의 맞춤형 사전 빌드 제공
               o 하드웨어 기반 최적 구성과 일관된 메타데이터 유지

해결하려는 문제

     * PyTorch·CUDA·FlashAttention·DeepSpeed 등 GPU 관련 라이브러리 설치의 어려움
     * 팀 내 동일 패키지의 반복 빌드로 인한 리소스 낭비
     * setuptools 업데이트로 인한 빌드 오류
     * 내부 레지스트리 인증 과정의 불편함

서버-클라이언트 통합 전략

     * uv(클라이언트) 와 pyx(서버) 의 수직 통합으로 위 문제들을 직접 해결
     * pyx 없이 uv만, 또는 uv 없이 pyx만 사용 가능하지만 함께 사용할 때 최고의 경험 제공
     * 오픈소스 도구와의 깊은 통합으로 기존에는 불가능했던 개발 경험 구현 가능

비즈니스 모델

     * uv, Ruff, ty 등 Astral 도구는 영원히 무료·오픈소스·퍼미시브 라이선스 유지
     * 대신 pyx와 같은 유료 호스팅 서비스를 제공해 “다음 단계” 인프라 수요 충족

현재 상태와 향후 계획

     * 현재 Ramp, Intercom, fal과 같은 초기 파트너와 운영 중
     * GA(일반 공개) 전까지 오픈 빌드를 통해 빠른 피드백 루프 유지
     * 관심 있는 팀과 팬들에게 연락 요청

   All python packaging challenges are solved 라니 웃기는 이야기네요
   해결된 게 아니라 그냥 돌아만 가게 치워둔 것 아닌가요 ㅋㅋ

   파이썬은 전세계에서 사용하는 주류 언어인데 환경이 너무나도 지저분한 게 사실이죠.
   해커뉴스 댓글에서는 '기업' 이 나선다고 걱정하지만 기업이 나설 때까지 아무도 신경쓰지 않았기 때문에 상황이 이렇게 됐다는 것은 생각하지 못하네요.

   FYI: 해커뉴스 댓글에 누가 한 말을 인용함

   이 회사는 어떻게 돈을 버는걸까, 라고 생각하면서 읽어내려갔는데, pyx 를 유료로 제공할 계획이군요.

        Hacker News 의견

     * 아마 더 유용한 블로그 글을 공유함 https://astral.sh/blog/introducing-pyx
          + 이 링크가 좀 더 명확한 설명임에도 불구하고, 그들이 해결하려는 문제와 그 해결책의 구체적인 방식이 아직 이해가 잘 되지 않음
     * 모든 파이썬 패키징 문제는 이미 해결되어 있음이라고 생각함. 여기서 배운 교훈은, 모든 문제에 딱 맞는 하나의 솔루션은 없다는 점임. VC 자금이 지원되는 회사들과의 연계를 늘리거나 그들의 인프라에 의존하는 것은 FOSS 커뮤니티에는 항상 큰 리스크임
          + 나는 pip을 사용하라고 들어서 시작했음. 그런데 속도도 느리고 자주 문제가 있었음. 그래서 virtualenv로 갈아탔지만, 이건 문제의 일부만 해결해줌. 그 뒤로 conda를 썼는데, 이건 때때로 잘 돌아갔지만 내 shell 프로필이 엉망이 되었고, 종종 패키지 버전이 꼬이는 일이 많았음. 그 다음엔 pipenv를 추천받았는데, 초기에 좋았지만 개발이 방치되면서 사람이 바뀌고 나서 최신 버전에서 자주 망가짐. 또다시 poetry를 추천받았으나, 너무 느려서 쓸 수가 없었음. 그래서 다시 pip과 내장 venv로 돌아왔지만, 이전에 겪던 문제를 다시 만났고, 기능도 더 부족했음. 그래서 uv로 넘어갔는데, 이건 그나마 제대로 동작했음. 그런데 내가 필요한 의존성은 운영체제별, GPU별로 빌드와 패키징 방식이 달라서, 내 동료들은 이 프로젝트를 자기 랩탑에 설치조차 못함. 파이썬
            패키징 문제가 다 ""해결""되었다니 정말 다행임
          + ""모든 파이썬 패키징 문제는 이미 해결되어 있다""는 주장은 솔직히 모르고 하는 얘기거나 무지함의 소산임. 파이썬은 여전히 다양한 플랫폼에서 네이티브 의존성을 안정적으로 처리할 방법이 없음. pip과 setuptools가 이 생태계의 끝판왕이 되어서는 안 됨
          + 걱정하는 부분에 동의하지만 uv를 쓴 뒤로 엄청난 시간을 세이브했기 때문에, VC 자본의 폐단이 완전히 망가뜨릴 때까지는 계속 쓸 것임. 그쯤 되면 커뮤니티가 한 방향으로 모일 수 있기를 바람
          + 지난 3시간 동안 python과 debian을 맞붙여 처리하다가 파이썬 생태계에 분노가 치솟음. 전혀 해결된 게 아님. Debian에선 venv 사용만 권장하는데, venv에 설치된 패키지는 cmake류 도구가 찾지 못하기 쉬움. apt-get 패키지도 있고, 어떤 도구는 그것만 찾고 다른 것은 또 못 찾기도 함. 패키지 이름도 일관성이 없음. 내 콘솔은 pipx를 추천했는데, 사용 경험은 비슷함. 또 옛날 python 2 vs 3 잔재가 아직도 남아서 버전 번호의 포함 여부 때문에 패키지 탐색 실패가 자주 발생함. c++headerparser가 뭔지 몰라도, 결국에는 파이썬을 빌드 트리에서 빼내고 그냥 역사 속에 묻어두는 것이 맞는 짓이라고 확신하게 됨
          + 혹시 처음 오신 건가요? 여기 이 Kool Aid 한 번 드셔보길 추천함. 유리잔에 박혀 있는 ""MongoDB"" 로고는 신경 쓰지 않아도 됨. 그건 옛날 것임
     * 오픈 소스 제품을 여러번 믿었다가 상처 받은 경험이 많음. 이런 약속들은 수없이 들어봤음. 언젠간 인수되고, 수년간 쌓인 문서와 이슈, PR이 거의 예고 없이 정리됨. 그리고 새로운 회사가 뭔가 상용 제품을 내놓지만, 내가 쓰던 핵심 기능이 빠져 있기도 함
          + 이런 우려를 이해함에도, pyx는 Astral의 기존 툴과는 다르게 전략적으로 분리시킨 제품임을 강조하고 싶음. 공식 발표에도, ""pyx는 Astral의 전략의 실현이자, Astral의 툴들은 앞으로도 무료, 오픈소스, 매우 관대한 라이선스로 영원히 남긴다""고 되어 있음. 우리가 목표로 하는 것은, 오픈소스 툴을 현금화하는 대신, 별도의 상업적으로 지속가능한 상품을 만들어 걱정을 줄이는 것임
          + 완전히 이해되는 걱정임. 그렇지만 Astral의 평판과 실적은 정말 대단하다고 생각함. HN에 이렇게 신중한 반응이 보인 것에 놀랐음. 10년 넘게 파이썬 개발을 해왔는데, Astral이 뭔가 하면 늘 기대하게 됨
          + 진짜 가치있는 기능이라면 pip에 합쳐졌을 거라 생각함
     * PyTorch, CUDA 또는 FlashAttention, DeepSpeed 같은 것 설치가 힘들다는 지적, 매우 공감함. 윈도우(그리고 WSL)에서는, 일부 패키지가 아주 옛날 Visual Studio 버전의 컴파일러를 요구해 번거롭게 직접 다운로드 경로를 찾아야 하는 문제도 있음. 더 좋은 개발 경험을 기다리고 있음
          + 사실 WSL은 거의 리눅스와 비슷하기 때문에, Visual Studio 컴파일러 버전은 별로 중요하지 않다고 생각함. WSL 바이너리는 전부 리눅스 툴체인으로 빌드됨. 윈도우에서도 libc는 Win10 이후로 아주 안정적임. VC++ 2015 이상으로 빌드한 이진파일끼리는 C-ABI 호환성이 유지됨. 예외적으로 특정 언어나 기능을 이전 컴파일러가 지원 안하거나, C++ 객체를 직접 ABI 사이에서 전달하려고 할 때만 오래된 컴파일러가 필요함. 이런 케이스는 드묾
          + 이런 에피소드 때문에 레일즈 덕분에 Ruby에서 완전히 손 뗀 경험이 있음. Ruby 영상 보면 다들 즐겁게 개발하는데 부럽기는 했지만, 내 환경에서는 개발 환경 세팅하려면 DigitalOcean droplet을 써야만 했고, 종종 Rails용 컴파일에서 오류로 망하곤 했음. 2012년쯤 Rails 붐에 동참하고 싶었으나, 설정/설치 과정이 항상 악몽 같았음. 그래서 파이썬으로 넘어갔는데, 초기엔 잘 됐지만 요즘엔 AI나 CUDA 관련이면, 오히려 설치 지옥 때문에 그냥 남의 셸 스크립트를 따라 쓰는 게 낫다고 느끼는 수준임
          + GPU 중심 워크플로우에서는 파이썬 패키징이 이런 방향으로 가야 한다고 생각함. 특히 기대되는 두 가지가 있음. 첫째, 가속기별(예: CUDA/ROCm/CPU 각각) 호환성 검증된 인덱스가 제공되어 torch/cu* 매트릭스 논쟁이 사라지는 것. 둘째, 메타데이터를 클라이언트가 쿼리하여 설치를 병렬화할 수 있게 만드는 것. pyx가 ML 환경에서 하는 ‘pip 시행착오 루프’를 줄이고 하드웨어 타겟 빌드 및 예측 가능한 해시 제공까지 하면, 환경 구성에 들어가는 시간이 엄청 절약될 것임. 또한 도구 자체는 오픈소스로 두고, 호스팅 서비스로 수익을 내는 모델은 신뢰 구축에 긍정적임. pyx가 의존성 그래프, 역의존성(what breaks if X→Y?), SBOM/서명 증명 같은 서플라이체인 체크도 지원할지 궁금함
          + 한때 운영체제라 함은 컴파일러를 내장하는 것이 당연했음
          + 예전에 anaconda를 쓴 결정적 이유가 바로 이런 환경 때문이었음
     * ""곧 경쟁하는 Python 패키징 표준이 14개나 생길 것""이라는 유머를 던짐. 사실 14개는 농담이고, 이미 그 이상 생긴 지 오래임
          + 파이썬 패키징에는 표준이 정말 많은데, 지난 10여 년간 생긴 것 중 대다수는 서로 경쟁하지는 않는다는 생각임. 오히려 “쓸만하다 여겨지는 기능이 점진적으로 누적된 결과물”임. 이는 파이썬의 패키징 표준화가 권위주의적이기보다는 합의 기반으로 이뤄진 건강한 프로세스이기 때문임. 만약 권위주의적이었다면 지금같은 파이썬의 성공을 누리진 못했을 거라고 생각함 (참고로 최소 5개 PEP 제안 경험 있음)
     * Python 패키징은 Python에서 가장 Zen(간결함과 심플함 등 파이썬 철학)에 어긋난 부분이라고 생각함
     * 작년 9월, Charlie가 마스토돈에서 이 비즈니스 모델을 구상 중이라고 밝혔음 https://hachyderm.io/@charliermarsh/113103564055291456
     * GPU-aware한 레지스트리가 구체적으로 어떤 의미인지 궁금함. uv가 내 GPU 사양을 확인하고, 거기에 맞는 패키지 세트를 Pyx에서 알아서 뽑아다줄 수 있다는 건지? 이게 기업 고객을 위한 프라이빗, 유료 레지스트리라면, 그런 레지스트리를 회사가 공개 인스턴스 형태로 외부에 제공할 수도 있는지? 즉, 내가 벤더라면 내 패키지들을 위한 Pyx 레지스트리를 유료로 운영하고, 그걸 내 고객에게 엔트리포인트로 쓸 수 있는지 궁금함
          + uv가 이미 이 아이디어의 기본형을 지원하고 있음. 예를 들어 ""uv pip install --torch-backend=auto torch"" 하면, PyTorch 인덱스에서 내 GPU에 맞는 버전의 PyTorch를 자동으로 설치해줌. pyx는 이를 더 확장한 모델임. PyTorch뿐만 아니라, 각 하드웨어 가속기별로 엄선한 인덱스를 갖고 있고, 이 인덱스엔 다양한 패키지·버전·파이썬 버전·PyTorch 버전 등 빌드된 산출물이 일관된 메타데이터와 함께 준비됨. 즉, pyx를 쓰면 호환성/속도 문제가 잘 맞는 빌드를 쉽게 받을 수 있고, uv 클라이언트도 적합한 pyx 인덱스를 자동으로 찾아줄 수 있음 (이 부분은 pyx를 쓰든 않든 기본적으로 구현됨, 다만 pyx일 땐 훨씬 강력함). 아울러 벤더가 직접 pyx형 레지스트리를 자기 패키지에 맞게 운영하고, 그걸 고객의 엔트리로 제공하는 기능은 아직 정식으론 지원하지 않지만, 구체적으로 관심
            있다면 연락하면 논의 가능함
     * 몇 주 전에도 말했지만, 언젠가 Astral은 현금화 전략을 쓸 것임. 핵심은 Uv가 아니라, 보호된 프라이빗 PyPI 같은 형태가 될 것이라고 예상함 https://news.ycombinator.com/item?id=44712558
          + 이 얘기의 요점을 잘 모르겠음. 사실 Charlie Marsh가 작년 9월에 직접 이렇게 설명한 바 있음 - 엔터프라이즈용 프라이빗 패키지 레지스트리 같은 형태가 전략적 예시가 될 수 있다(꼭 이렇게 하진 않더라도 전략 구상을 구체적으로 보여주는 데 쓸 수 있다고 했음). Astral은 비즈니스 모델에 대해 아주 투명함 https://hachyderm.io/@charliermarsh/113103605702842937
          + “현금화”라고 하면 부정적으로 들릴 수 있지만, 이들은 정말 뛰어난 도구를 만들어왔기 때문에, 훨씬 더 많은 문제를 해결해주길 바라는 기업 입장에서는 기꺼이 비용을 지불할 것임
          + uv는 아직 도입하지 않았고, 앞으로 어떤 행보를 보일지 보고 있음. 최근에는 Anaconda 도구 쓰임새도 라이선스 변화 때문에 재검토해야 했고, Qt도 마찬가지였음. 또다른 라이선스 문제를 맞닥뜨릴 생각을 하니 부담스러움
"
"https://news.hada.io/topic?id=22510","뉴욕시 내 모든 텍스트 검색","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            뉴욕시 내 모든 텍스트 검색

     * Google Street View의 8백만 장 이상 이미지를 AI로 분석해 1억 3,800만 개의 거리 텍스트를 추출
     * 이를 검색 가능한 NYC 거리 텍스트 데이터베이스로 구축하여 검색 엔진을 생성
     * 미디어 아티스트 Yufeng Zhao의 작품으로 이를 통해 특정 단어(예: pizza, Broadway, luxury, beware, gold, iglesia, jerk 등)의 위치 분포를 지도에 표시해 문화·상업·지역적 특성을 시각화
     * NYC의 거리 풍경을 일종의 “소스 코드” 로 읽어내는 실험이자, 도시 데이터의 새로운 탐색 방식


프로젝트 개요

     * 목표: NYC 전역의 가시적 텍스트를 수집·검색 가능하게 만들기
     * 데이터 출처: Google Street View (2007~2025, 8백만+ 이미지)
     * 기술: 이미지 내 텍스트 인식(OCR), 위치 좌표 매핑
     * 범위 제한: 차량이 찍을 수 있는 거리의 가시 범위 내 텍스트만 포함(골목·공원·소형 글씨 제외)

주요 시각화 사례

     * Pizza: NYC 전역 피자 가게 분포
     * Broadway: 모든 보로의 Broadway 표식과 극장 밀집 지역
     * Luxury: 신규 주거 단지 홍보 문구, Hudson Yards 지역 집중
     * Beware: 주택·펜스가 있는 외곽 주거지에 집중, 맨해튼 거의 없음
     * Gold: 다이아몬드 지구 및 금 매입 상점 거리
     * Iglesia: 스페인어권 커뮤니티의 교회 위치
     * Jerk: 자메이카 요리점이 많은 Flatbush·Jamaica 지역
     * Unisex: 이발·미용 복합점의 지리적 분포

흥미로운 텍스트 사례

     * Fedders: 1950~90년대 빌트인 A/C 브랜드 로고, ‘Fedders house’ 현상
     * Yodock: 공사장 인도용 플라스틱 배리어 브랜드
     * 4Cars (Acars): 불법 부착 중고차 매입 광고, OCR 오인식
     * Sabrett: NYC 대표 핫도그 카트 브랜드, 관광지 분포
     * Halal: 이슬람식 음식 판매점·카트, 1980년대 시작해 도시 음식문화로 자리잡음
     * Siamese: 소방 호스 연결구 유형 명칭
     * Surveillance: 감시 카메라 안내문, 공공·사설 시설 전역

해석과 의미

     * 프로젝트는 도시를 텍스트 기반 지도로 재해석하며, 상업·문화·안전·인프라의 흔적을 시각적으로 드러냄
     * 특정 단어의 지리적 분포는 문화권·산업·사회적 특성과 밀접하게 연관
     * 경고·감시 관련 단어는 NYC의 안전·통제 문화와 공공 공간의 기록성을 반영
     * 데이터는 단순 시각화뿐 아니라 도시사·사회학·브랜딩 연구 자료로 활용 가능

   본문이 매우 환각인데여

   ""all text in nyc"" is a search engine that finds text in New York City's Google Street View images. Search for any word or phrase to see where it appears across the city—in shop signs, graffiti, advertisements, and protest signs.

   본문 사이트는 스트리트뷰를 다 ocr돌려서 특정 단어를 찾게하는 사이트에요

   수정되었네요

   정말 재밌는데 이걸 만든 곳이 정부도 아니고 구글 같은 기업도 아니란 걸 생각하면 좀 무섭네요
   세상에 데이터가 넘치는 걸 느껴요

        Hacker News 의견

     * 이 사이트에 관한 이 글도 정말 흥미로움 The Pudding의 Street View 프로젝트임
          + The Pudding은 요즘 인터넷에서 볼 수 있는 최고의 콘텐츠 중 하나임
          + 최상단에 추가함
     * 유튜브에는 여러 도시를 도보로 이동하는 영상을 찍는 사람들이 있음. 개인적으로는 도쿄/일본을 걷는 영상이 특히 마음에 듦. 저런 영상으로부터 3D 지도를 만들어 보는 것도 멋질 것 같다고 생각함. 이 분야는 내 전문이 아니지만, 이미 해본 회사들도 있을 것 같음. 저런 영상 속에는 데이터가 엄청나게 많음. 혹시 로봇 훈련용(군중 속을 걷는 배달로봇 등)으로도 무료로 사용할 수 있을지도 모름
       기술적으로는 SLAM, 포토그래매트리, VIO의 조합일 것 같은데 IMU가 없으니 해당 부분은 영상에서 추정해야 함. 프레임과 조명 깜빡임까지 너무 빠를 듯함
       예시 링크: 도쿄 길거리 산책, 또 다른 예시
          + 비슷하게, 부동산 사진 같은 스틸 이미지로부터 평면도를 복원하는 도구가 있다면 정말 유용할 것임. 부분적으로 수동 입력이 필요하더라도 쓸만할 것임
          + 예전에 도쿄 전자상가를 돌며 유튜브 영상을 찍던 분이 있었음. 의외로 스마트폰이나 로봇 부품을 구입하기 좋은 최고의 장소들이 전혀 눈에 띄지 않는 건물들에 있었고, 정말 현지 지식이 없다면 모를 곳이었음. 만약 제안한 대로 진짜 구현된다면 여행자들이 이런 곳을 찾을 때 엄청 도움이 될 것임. 꼭 보고 싶음
     * Google Maps 검색에 이런 기능이 추가된다면 정말 흥미로울 것 같음. 구글맵에서 정보를 찾기가 미흡하다고 느끼는 경우가 흔함. 최근 Gran Canaria 남부에서 수제 커피를 파는 곳을 찾아봤는데, 결국 호텔 안에 있는 한 군데만 있었고 찾는데 30분이나 걸림. ""pourover""나 ""v60""같이 내가 주로 쓰는 필터 단어로 검색하지만, 카페에서 설명이나 리뷰에 이를 명확히 언급하지 않으면 찾기 힘듦. 고객이 찍은 사진 속 텍스트(예: 메뉴판)가 아예 인덱스되지도 않는 것 같음
          + V60 검색하면 대부분 볼보 차량이 나올 것 같은데, 실제로 카페에서 이런 단어를 찍은 사진이 얼마나 있을지 궁금함
          + 커피숍들이 그런 단어들을 의식하지 않았다면, 이젠 생각해보면 좋을 것임. 솔직히 나도 이 사이트 다시 찾아볼 것 같음
     * 데이터 준비한 사람의 GitHub이 궁금해서 남김. 뉴욕 데이터 분석에 어느 정도 컴퓨팅 자원이 들었는지 궁금함. 내 도시에서도 해보고 싶지만 예산이 너무 부족할 것 같음 yz3440 GitHub 참고 (밑에 댓글들 말이 맞음. 사실 걱정해야 하는 건 컴퓨팅보다 Google Maps API 요금임. 무료로 하면 저자도 몇 년은 걸렸을 거임. 저자의 예산이 부러움)
          + OCR 컴퓨팅 비용은 저렴할 것으로 예상함. 성능 좋은 개인 PC면 밤새 혹은 일주일 정도면 충분하다고 생각함. 문제는 Google Maps API 사용료임. 아트 프로젝트로 인정받아 요금이 면제되지 않는 한 부담이 심함 Maps Platform 가격 보기 대도시에 파노라마 수가 많은 경우 무료티어 이상이면 수천 달러임
          + 기사에 따르면 800만 개의 파노라마를 사용했다는데, Street View API만으로도 약 3만 달러가 들었을 것임 (정적 이미지 API는 해상도가 낮아서 아마 2배로 더 비쌀 것임). OCR은 급하지 않다면 훨씬 저렴할 듯. 예를 들어 PaddlePaddle 서버 돌리는 일반 GPU면 초당 4MP 지원 가능. 몇 천 달러짜리 하드웨어로 3~6개월 정도 작업하면 될 것으로 보임 (해상도, 모델 크기에 따라 다름)
          + 800만 장이라 해서, 일주일간 초당 13.2장 계산임. 궁금한 건 데이터를 Google API를 써서 긁은 건지, 아니면 Google과 협업한 건지임
          + Claude와 계산해 본 결과, 타이베이 거리 사진 전체를 gmap api로 3m 간격으로 긁으면 약 8,000달러 정도 든다고 나옴. 비싸지만 불가능하진 않은 금액임
     * ""fuck"" 같은 욕설을 검열하는 게 흥미로움. 일부러 완전히 쓴 걸 읽는다고 두뇌가 영향을 받는지는 모르겠음
          + 실제 사진에서 그 단어를 찾아볼 수 있음. 혹시 StreetView 버전에서 어딘가 따로 검열된 거라면 모르겠음
          + 아마도 SEO나 가족 친화 정책(혹은 둘 다) 때문일 것임. 참고로, 유튜브 영상 첫 1분 동안 욕설 금지도 있음
     * ""Fool""을 검색하면 OCR 오류가 엄청 많이 나옴. 가려짐 등 이유임 예시 검색 결과 ""Surgery of the Fool""이 베스트임
          + ""fart"" 검색도 마찬가지고 훨씬 더 재미있음 fart 검색 결과 ""Fart bird special""이 꽤 웃김. ""staff farting only""가 제일 맘에 듦. ""BECAUSE THE FART NEEDS"", ""Juice Fart"", ""WHOLESALE FARTS""도 있음
     * OSINT(공개 소스 정보 분석)에 아주 유용할 것 같음. 정보기관에서 이미 이런걸 세계 단위로 갖고 있지 않을까 궁금함
     * 정말 멋진 프로젝트임. 만약 CLIP 같은 임베딩까지 넣어서 텍스트 뿐 아니라 ""사람 싸움"", ""고양이와 개"", ""빨간 테슬라"", ""광대"", ""아이와 강아지"" 등 의미 기반 벡터 검색도 되었으면 10배 더 멋졌을 것임
     * 관련 프로젝트로 All Text in NYC와 All text in Brooklyn도 있음
          + 런던 버전도 있으니 관심 있으면 공유함 런던 publicinsights.uk
     * NY Cerebro라는 서비스가 생각남. 뉴욕 시내 공공 거리 카메라 수백 대로 의미 기반 검색이 가능함 nycerebro.vercel.app (예: ""scaffolding"" 검색)
          + 공공 거리 카메라 해상도가 너무 낮아 놀랐음. 차량 라이트 반사까지 더해져서 만족스럽지 않음
          + 이 서비스는 예전에 NVIDIA와 Vercel 해커톤에서 1등한 프로젝트임
"
"https://news.hada.io/topic?id=22595","Anna's Archive: 팀의 최신 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Anna's Archive: 팀의 최신 업데이트

     * 최근 미션에 대한 공격이 증가함에 따라 인프라 및 운영 보안 강화를 진행 중임
     * 2022년 시작 이후 수천만 개의 책, 논문, 매거진, 신문 등의 자료를 안전하게 보존 및 공유 중임
     * 대규모 스크래핑으로 WorldCat, Google Books 등에서 방대한 메타데이터를 확보하여 미수집 자료 파악에 활용함
     * LibGen, Z-Library 등과의 파트너십을 통해 수천만 건의 추가 자료를 확보했으나 일부 파트너의 사라짐에 대한 아쉬움도 있음
     * WeLib 등 신생 사이트와는 신중한 관계를 유지하며, 커뮤니티에의 기여가 부족하다는 이유로 사용 자제를 권장함


최근 상황 및 팀의 대응

     * 최근 Anna's Archive의 미션을 겨냥한 공격이 늘어난 상황임
     * 이에 따라 인프라와 운영 보안 강화 조치를 진행하고 있음
     * 인류의 지식 유산을 안전하게 보존하는 일은 계속 추구할 가치가 있는 활동임

자료 해방 및 저장 활동

     * 2022년 시작 이후로 수천만 권의 책, 과학 논문, 매거진, 신문 등 다양한 컨텐츠를 확보함
     * 이러한 자료들은 자연재해, 전쟁, 예산삭감 등 다양한 위협으로부터 보호되는 상태임
     * 토렌트로 자료 배포에 동참해준 모든 이들의 노력에 힘입어, 자료 소실 우려가 크게 줄어듦

대규모 스크래핑 및 메타데이터 확보

     * Anna's Archive는 IA Controlled Digital Lending, HathiTrust, DuXiu 등에서 대규모 스크래핑을 조직적으로 진행함
     * tens of millions에 이르는 자료 파일을 확보하는 데 성공함
     * WorldCat, Google Books 등에서 방대한 책 메타데이터 컬렉션을 구축함
     * 확보된 메타데이터로 컬렉션에 아직 포함되지 않은 책을 식별하고, 희귀 자료 우선 확보 전략에 활용함

커뮤니티 및 협력, 새로운 개발

     * LibGen 포크, STC/Nexus, Z-Library 등 협력 파트너들과 협업하여 수천만 개의 추가 파일을 확보함
     * 파트너들이 파일을 미러링하는 등 미션에 큰 도움을 주고 있음
     * 그러나 LibGen 포크 중 한 곳이 사라졌다는 점은 아쉬운 일로 인식함

신생 프로젝트와 주의 사항

     * 최근에는 WeLib이라는 신규 프로젝트가 등장함
          + 대부분의 아카이브 컬렉션을 미러링하고, Anna’s Archive 코드베이스 포크를 사용 중임
          + WeLib의 사용자 인터페이스 개선점 일부를 차용하여 반영함
          + 그러나 새로운 컬렉션 공유나 코드베이스 개선 공유가 없어 생태계 기여에 대한 약속이 부족함
          + 이에 따라 WeLib 이용에 대해 주의를 권장함
     * 추가로, 내부적으로 수백 테라바이트의 신규 컬렉션이 서버에 준비되어 처리 대기 중임

자원봉사 및 후원 요청

     * 누구든 자원봉사 및 기부 페이지를 통해 프로젝트에 참여 가능함
     * 모두 소규모 예산으로 운영되고 있어 조금의 도움도 큰 가치가 있음
     * 앞으로도 지식 유산 보호와 해방을 위한 지속적인 노력을 독려함
     * Anna 및 팀 일동 (Reddit 커뮤니티 참조)

        Hacker News 의견

     * 내가 사는 책들은 Anna's Archive에서 골라 구입함, 만화책은 readComicsOnline에서, 유럽 그래픽노블은 #WONTTELL에서 선택함, 이 세 오프라인 매장에서 가장 자주 찾는 단골 손님임, 유행을 광고에 따라 구매하는 대신, 엄청나게 서칭해서 진짜 좋은 작품만 찾음, 가게 직원이 내가 온라인에서 발견한 희귀한 책을 주문하느라 고생할 때도 있음, 나는 예외일까 궁금하지만, 이런 서비스들은 내 자유로운 선택권을 지켜줌
          + 이건 복잡한 문제임, 예전에 영화 릴리즈 그룹에서 활동했는데, 그 그룹 멤버들은 대부분 VHS/DVD 소장이 일반인보다 상당히 많았음, 그만큼 노력과 시간을 들여야 할 일임, 단순히 다운로드만 하는 사람들은 좀 더 혼재되어 있었음, 일부는 해외 거주로 국내 출시작을 볼 수 없었고, 일부는 전혀 미디어를 사지 않는 것을 자랑스럽게 여기기도 했음
          + 상황이 비슷함, Anna's Archive 덕분에 학교 도서관보다 더 편하게 자료를 찾을 수 있음, 집에서 찾고, 필요한 정보 얻고, 삭제 가능함, 내용 미리 확인하고 진짜 좋으면 소장용으로 구입함, 이전보다 책을 더 많이 사지 않지만 만족도는 훨씬 높아짐, 반면에 업로드 사이트 덕분에 듣도 보도 못한 좋은 영화들을 알게 되어 예전보다 영화를 훨씬 많이 사게 됨
          + 프랑스 만화 해적판 업계는 약 6개월 정도 딜레이를 두고 발매작을 유통함, 규모가 작아서 이 규칙이 잘 통함, 덕분에 만화에 흥미를 가지게 되었고, 마음에 드는 작품이 있으면 기꺼이 발매와 동시에 구입하고 DRM은 개인 소장용으로 제거함, 다운로드 대부분은 수집/아카이빙 성향에 가깝고, 정말 재미있게 끝까지 읽은 것은 저자를 후원함
          + 나도 완전히 똑같음, 시리즈가 흥미로우면 일단 첫 권만 받아서 1/3 정도 읽고, 정말 좋으면 나중에 사서 읽음, 한 달에 책은 대략 3-4권(가능하면 drm free epub 선호), 유럽 그래픽노블은 월 10권쯤 사는 편임(종이책만 구입), 나 역시 무거운 소비자임
          + 예전 인디 게임을 팔로우한 적이 있는데, 개발자가 DRM 없는 경험을 제공하려고 했음, 온라인 기능(예: 리더보드)도 있었는데, 실제 판매량보다 훨씬 많은 계정이 온라인 접속하는 것을 발견해 당황했음, 개발자들은 피쳐 설명에서 사람들에게 복사본 쓰지 말고 정품을 사달라고 호소하는 쪽으로 분위기가 바뀜, 결국 인기가 많았지만 너무 많은 해적판 복제로 너무 적은 사람이 돈을 내서 팀은 프로젝트를 포기함, 해적판 얘기만 나오면, 본인들이 평균보다 더 많이 소비한다면서 자기 행동을 정당화하려는 사람들이 많은데, 실제 통계 데이터를 보면 무료로 쓰기 때문이라는 사람이 대다수임
     * 쉐도우 라이브러리 운영자들은 인류에 큰 공헌을 하고 있으니 노벨상 감임, Satoshi도 분명히 자랑스러워할 것임
          + Satoshi가 자랑스러워할 점은, 검열 두려움 없이 쉐도우 라이브러리를 지원 가능하다는 점, 항목 1개만 있어도 리스트로 쳐주는 점임
          + aaronsw도 아마 자랑스러워할 것임
          + 그라면 동전 몇 개라도 거들 수 있을 텐데, 그에겐 잔돈 수준임
     * 누구나 시드를 올리면서 장기 보존에 참여할 수 있는 torrents 리스트를 제공함 https://annas-archive.org/torrents
          + i2p 기반 토런트가 의외로 아직 널리 확산되지 않아 이런 사이트에서 옵션으로 제공하지 않는 것이 놀라움, 법적 부담 때문에 기여하지 못하는 사람이 많을 거라 생각함, i2p가 도움이 될 수 있음
          + sci-hub는 약 90TB, libgen-non-fiction은 77.5TB 정도인 것이 인상적임, 이 둘이야말로 논문과 교과서 등 핵심 과학 지식을 담고 있어 반드시 보호해야 할 아카이브임, 나도 집 서버에 16TB 정도 저장하지만 200TB 규모로 확장하려면 장비, 비용 등 만만치 않음(12개 16TB 디스크만 2200불), 데이터 중복과 서버 하드웨어까지 고려하면 대략 5천불 정도로 인류가 쌓은 주요 과학 지식 전체를 캐싱할 수 있음, 흥미로운 점은 이런 저장소 용량이 최근 거의 늘지 않고 있음, scihub도 2022년 이후 업데이트가 멈췄고, 최근 늘어난 저품질 학술지들도 중요도는 떨어질 것이라 봄
     * 도서관에서 시리즈 책을 읽다보니 3권이나 4권이 없어서 황당했음, 아마 분실이나 훼손된 듯함, 직접 중고서점에서 사서 기증할까 생각도 했지만, 새 에디션은 가격도 올라 있고 분위기도 달라 고민 끝에 포기함, 그래서 Anna’s Archive에서 구했음, 시리즈 마지막 몇 권도 도서관에 없었음(누가 대출해 도로 반납하지 않았다거나, 애초부터 없던 것 같기도 함), 나는 단지 이 작가의 전작을 완독하고 싶었을 뿐이고, 실제로 좋아하는 책은 종이책과 오디오북 두 번이나 구입했음, 오래 전에는 친구들이 책 수집에 빠졌지만 본인은 다시 읽을 책만 남겨두는 쪽임, 완성욕이 생겨도 도서관이나 전자책으로 해결함, 나이가 들수록 책과 내 유한함을 실감함, 은퇴해서 일주일 3-4권씩 읽어도 평생 읽지 못할 분량의 책을 쌓아둔 상태임, 새로운 신간과 새로운 목소리도
       계속 등장함, 마지막으로 Dune을 다시 읽고 중고서점에 내보냈고, 또 읽는다면 아마 오디오북 버전일 것임
     * ""Anna’s Archive가 IA Controlled Digital Lending에서 수천만 파일을 얻었다""는 부분은 전체적으로 보면 큰 도움이 안 된다고 생각함
          + 이건 법정에서 다뤄질 수밖에 없는 굉장히 애매한 언급임
          + Anna's Archive가 무책임하게 '이런 짓도 했다' 자랑하는 건 무척 이기적인 행동으로 보임, 아무런 결과를 고려하지 않음
          + 그게 왜 문제인지 모르겠음, 원래 책을 모으는 게 이들의 목적임
     * Anna's Archive 같은 곳은 인터넷에 남은 마지막 좋은 것들 중 하나라 생각함
          + 어떻게 자금을 마련하고, 어떻게 사이트를 살아남게 만드는지 궁금함, 막대한 자금력을 가진 기업, 국가가 이 사이트를 없애고 싶어할 것 같음
          + 마지막에 좋은 것 중 하나라는 점에 동의함(라스트지만 최소한 아님)
     * 이 프로젝트 팀에게 찬사를 보냄, 최근 1년 사이에 UI가 개선된 것 같아서 인상 깊음, 남은 문제는 서비스가 계속 접속 가능하도록 살아남는 것임, 얼마나 노력이 들어가는지 궁금함, 이렇게 공격받는 상황에서 어떻게 버틸 수 있는지 궁금함
          + 최근 2~5일 사이에 대형 UI 업데이트가 있었음, 약간 아쉬운 점은 모바일에서 예전에는 검색 결과를 훨씬 효율적으로 볼 수 있었는데, 새 디자인은 한 화면에 대략 4~5개 정도밖에 안 보임
     * 참고로 이 사이트도 꽤 유용하게 활용됨 https://open-slum.org/
          + 사이트가 접속이 안 되는데, 어떤 내용이 있고 왜 유용한지 설명해 줬으면 함
          + 이 사이트는 Uptime Kuma 인스턴스로 보임, Uptime Kuma는 오픈 소스 프로젝트로, 모니터링과 대시보딩에 강점이 있음 https://github.com/louislam/uptime-kuma
     * 시민들은 Anna's Archive 같은 곳을 지지하지만 정부는 반대한다는 게 왠지 재미있음, 엘리트주의의 한 증거로 보임
          + 웃기거나 이상한 일은 아님, 저자(작가)라는 당사자 시각이 빠져 있음, Anna’s Archive에 책을 쓴 작가들은 얼마나 만족할지 궁금함, 나는 개인적으로 사회 전체가 좀 더 많이 책을 읽게 되는 게 도움이 된다고 생각해서 Anna’s Archive, sci-hub 등에 긍정적임, 하지만 현 시스템 안에서 보상과 법률 문제 등 여러 고민은 있음
          + 작가는 어떻게 생각할지 궁금함
     * Anna's Archive나 비슷한 사이트가 전체 New York Times(1930년 이전 버전) 전체 PDF 세트나 다른 신문들을 제공하는지 궁금함, 지금은 Newspapers.com 등 공공 도메인 자료조차 폐쇄적 웹사이트에 갇혀 있거나 옛 구글 뉴스/신문처럼 완전 검색 불가 상태임, AI 학습 데이터 확보 경쟁 덕분에 기존 유료/폐기된 사이트보다 더 개방적이고 AI 기반 탐색 기능을 갖춘 새로운 아카이브가 생기길 바람, 일부는 Internet Archive 등에서 구할 수 있지만, 진짜 필요한 것은 AI 기반 검색 기능임
          + https://archive.org/search/… 링크에서 NYT 옛 신문을 일부 찾을 수 있음, 전체 PDF 세트로 한 번에 받을 수는 없지만 Anna’s Archive 토런트로 각각 개별 PDF를 찾아서 합치는 건 가능함, AI 기반 검색은 시간과 의지만 있다면 예전 NYT 기사를 OCR을 거쳐 텍스트화하고, 그걸 LLM 같은 데에 입력해서 의미 기반 탐색이 가능함, 이런 프로젝트는 이상적으로는 공공 문화 기금이 학술 연구로 지원하면 좋다고 생각함
"
"https://news.hada.io/topic?id=22599","Obsidian Bases","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Obsidian Bases

     * Obsidian의 Bases 플러그인은 메모를 기반으로 데이터베이스처럼 관리할 수 있는 기능
     * Markdown 파일과 속성을 그대로 활용하여 데이터 관리 가능
     * Bases 뷰는 Bases 전용 문법을 이용해 생성 및 커스터마이즈할 수 있음
     * 프로젝트, 여행 계획, 도서 목록 등 다양한 정보를 체계적으로 정리할 수 있음
     * 사용자는 별도의 외부 서비스 없이 로컬 환경에서 모든 데이터를 관리할 수 있게 됨


Obsidian Bases 소개

     * Obsidian Bases는 메모 애플리케이션 Obsidian의 Core 플러그인으로, 사용자가 어떤 노트 세트라도 강력한 데이터베이스로 전환할 수 있도록 해줌

데이터 관리 방식

     * Obsidian Bases를 활용하면 프로젝트, 여행 계획, 독서 목록과 같은 여러 정보를 효율적으로 관리할 수 있음
     * Bases가 표시하는 데이터는 사용자의 로컬 Markdown 파일과 해당 파일의 속성에 저장됨
     * 외부 서버를 사용하지 않고, 개인 로컬 환경에 안전하게 보관 가능함

Bases 문법과 뷰 구성

     * Bases의 뷰(view) 는 Bases 전용 문법을 사용해 표현함
     * 이 문법은 .base 확장자 파일로 저장하거나, Markdown 파일 내 코드 블록에 임베드할 수 있음
     * 사용자는 필터, 속성, 레이아웃 등 다양한 요소를 활용해 맞춤형 데이터 시각화가 가능함

핵심 기능

     * Base 생성 및 임베드: 새로운 베이스를 만들어 임베드하는 방법을 안내함
     * 뷰: 필터, 속성, 레이아웃 탐색을 지원함
     * 함수: 수식 및 필터에서 사용할 수 있는 다양한 함수 지원
     * Bases 문법: 베이스 파일 포맷에 대한 설명 제공

활용성 및 이점

     * 별도의 복잡한 데이터베이스 없이도 메모 기반 데이터 관리 구현 가능함
     * 다양한 노트 유형과 정보를 한 곳에서 유연하게 통합 및 정리 가능함
     * 개발자와 IT 전문가가 Obsidian 내 자산을 효율적으로 데이터베이스처럼 활용할 수 있는 솔루션임

   노트들의 메타데이터를 관리 열람하고 집합을 만들 수도 있는 기능이네요.
   노트별로 저장해 둔 frontmatter와도 연동이 되는 것 같고 좋네요.

        Hacker News 의견

     * 혹시 궁금한 분들을 위해 말하자면, 이 기능은 이제야 공개적으로 출시됨. 이전까지는 얼리액세스 비용을 낸 사람들만 사용할 수 있었음. Reddit 쓰레드에도 이 기능에 대한 좋은 논의가 있으니 참고 추천함 https://old.reddit.com/r/ObsidianMD/…
          + 한 가지 궁금한 점이 있는데, 공식 문서에는 언급이 없지만 혹시 아는 사람 있음? Base에서 ""새로 만들기"" 버튼을 사용할 때 템플릿이나 기본 frontmatter(예: 생성일자)를 설정하는 방법에 대해 궁금함. Base 도입 전에는 직접 억지로 다음과 같은 방법을 사용했지만, 그리 깔끔하지 못했음.
meta-bind-js-view
{memory^inputText} as title
---
const toShow = context.bound.title || ""TKTK"";
const str = `\`\`\`meta-bind-button
label: New Project Idea - ${toShow}
icon: """"
hidden: false
class: """"
tooltip: """"
id: """"
style: primary
actions:
 - type: templaterCreateNote
  templateFile: Templates/Project.md
  folderPath: Project Ideas
  fileName: ${toShow}
  openNote: true
\`\`\``;
return engine.markdown.create(str)

     * Obsidian을 개인 CRM으로 사용하는 사람들에게 꽤 유용해 보임. 나는 Dataview로 데이터를 쿼리하고 있는데, 이 기능이 이를 대체할 수 있는지 확인해보려고 함 https://blacksmithgu.github.io/obsidian-dataview/ 내가 자주 궁금해 하는 질문은 이런 것임
          + 내가 이 사람과 마지막으로 연락한 게 언제인지
          + 무슨 대화를 나눴는지
          + 오랫동안 연락 안한 사람이 누구인지
     * Obsidian Bases가 무엇인지 설명이 부족하다고 느꼈지만, 아래에 링크된 Reddit 포스트의 한 댓글이 도움이 되었음:
          + ""노트에서 어떤 검색어·문장을 찾는다고 했을 때, Bases는 자동으로 업데이트되는 고정 검색을 보관하는 기능임. 다시 검색할 필요 없이 그냥 Bases 파일 내로 들어가면 새로운 노트들이 기본 테이블 형태로 바로 추가되어 있음. 또한 수정일처럼 파일을 변경할 때마다 업데이트되는 속성도 뷰에 추가할 수 있음. 오랫동안 안 본 파일이나 노트를 쉽게 파악할 수 있어 유용함. 옛 개념이 새로운 기능에 그대로 적용되기도 하지만, 직접 돌이켜보지 않으면 잊기 쉬움""
          + 공식 문서 첫 문장에 이미 정의되어 있음: ""아무 노트 집합이든 강력한 데이터베이스로 전환함"". 진짜 이게 전부임. 데이터베이스 뷰이고, vault는 데이터베이스, 행은 각 파일임. 뷰를 만드는 화려한 GUI가 있어서 뷰 내에서 실시간 편집도 가능함. 기존에 인기 많던 dataview-plugin을 훨씬 사용자 친화적으로 대체하는 느낌임. 표준 관계형 데이터베이스 구조보다는 덜 단단해서 어리둥절할 수 있음
          + 또 다른 요약: ""Bases는 노트의 Properties와 Tags 기준으로 필터링과 정렬이 가능한 테이블 또는 카드 뷰를 제공함""
     * 나는 Obsidian을 쓰는 유저임. Obsidian sync 서비스까지 유료로 사용하면서 Obsidian의 철학을 정말 좋아함. 그런데 말하는 게 조금 어색할 수도 있지만, 솔직히 사용이 헷갈림. 플러그인 사용이나 서비스가 원하는 방식 등을 이해하는 게 어려움. 지금은 그냥 데일리 노트만 쓰고 있는데, 뭔가 놓치고 있는 게 정말 많다는 느낌임
          + Obsidian 주변엔 지나친 과장과 유행이 많아서 솔직히 좀 민망함. Obsidian은 본질적으로 markdown 파일 편집기임. 기본 기능만으로도 충분함. 여러 추가 기능들이 많지만, 꼭 필요한 게 생겼을 때 커뮤니티 플러그인을 찾아보면 됨. 처음부터 이것저것 플러그인을 넣으려다 오히려 오버웰밍, 혼란스러움, 그리고 왜 Influencer들이 인생이 바뀌었다고 하는지 의문만 남게 됨
          + 문제는 사용자 본인이 아니라 생산성 인플루언서들이 Obsidian을 더 대단한 무언가로 느끼게 만든다는 점임. 그냥 markdown 파일 모음에 UI를 예쁘게 얹은 것임. Vault를 Cursor/VSCode에서 열어서 코딩 기능을 사용해보고 나서 Obsidian에선 왜 평범한 글쓰기용 에이전트가 없는지 의문이 들었음. 유튜브 영상들은 다 mind map, 복잡한 파일 구조, 특이한 플러그인 등을 강조하지만, 사실 LLM이 vault 전체를 검색해서 답을 뽑아주는 요즘 시대엔 이런 것들 대부분이 시간 낭비에 불과해짐
          + 자기 문제를 정확히 파악하고, 그걸 해결하는데 Obsidian 기능을 적용하는 게 중요함. 주어진 기능을 무리하게 내 삶에 억지로 적용하려고 애쓰지 않음
          + Siyuan을 대체제로 강력 추천함. Obsidian 플러그인에서 제공하는 주요 기능들을 기본으로 포함하고 있음
          + 내가 정말 힘들다고 느끼는 건 데이터를 한 데 모으는 게 예상보다 훨씬 어려움. 예를 들어, 다른 사람이 추천해 준 영화나 TV 프로그램을 트래킹하려고 했음. 각 추천마다 페이지를 만들고, 추천인·감상 여부·장르·나와 아내가 같이 볼만한지 같은 Property를 태그로 달 수 있음. 그런데 이 추천 리스트를 한 눈에 보고, 특히 아내가 포함되어 있는 추천만 따로 보고 싶은 뷰를 만들기조차 정말 복잡함. 태그 검색은 할 수 있지만 금방 복잡해지고, 북마크도 깔끔하지 않음. 쿼리를 하려면 또 플러그인을 설치해야 하고, 이것도 직관적이지 않음(아마 문법과 스타일이 익숙하지 않은 탓도 있음). 단순히 x, y 태그가 붙은 아이템만 쿼리하려면 복잡한 dataview 쿼리를 왜 짜야하는지 이해가 안 됨. 최근에 관련 업데이트가 좀 있었던 걸로 아는데, 여전히 만족스럽지
            않았음. 거의 모든 툴의 끝 목표가 '대시보드'임에도 불구하고, Obsidian에선 이런 게 기술적으로 익숙한 나 같은 유저한테도 너무 어려움. 시간내서 배우면 되겠지만, 이걸 또 하나의 연구 프로젝트로 만들고 싶진 않음. 불평한 김에 혹시 아래에서 친절하게 답해줄 분이 있을까 약간 기대함. 이 새기능이 실전에서 어떻게 동작하는지에 따라 다르겠지만, 데이터베이스 마인드셋을 가진 나로선 흥미로움
     * 좋은 아이디어임. 하지만 기능 구현이 실망스러움. 여러 셀이나 행을 한번에 선택하지 못하고, 20줄 이상의 데이터를 어떻게 다루는지 전혀 모르겠음. 문서를 Obsidian Bases로 옮기기 시작한 걸 후회함
     * 예전 쓰레드도 하나 찾았음. 다른 것도 있는지 궁금함
          + (2025년 5월은 기부자 전용 베타가 발표됐을 때고, 이 스레드는 공식 출시 및 수많은 변경 이후임)
     * 이 기능을 곧 써볼 예정임. 예전에 Dataview를 썼었는데, 기능은 훌륭하지만 내 취향엔 너무 번거롭고 배우는 곡선이 있었음. 이번엔 이런 점이 좀 개선된 것 같아서 기대 중임
     * 데이터가 실제로 어디에 저장되는지 궁금함. 문법을 보면 필터와 뷰를 위한 predicates가 정의되어 있는데 ""행""이 실제로 어딘지 안 보임. file.name, file.ext와 같은 특별한 속성이 있긴 한데, 어디에 설정하는지, 어떤 파일을 가리키는지, CSV인지 JSON인지 문서에 설명이 부족함
          + 각 행은 마크다운 파일 하나씩이고, 열은 그 파일 내 YAML frontmatter properties임. file.로 시작하는 특별 속성은 파일 자체의 메타정보임(file.name은 파일이름, file.ext는 확장자). Base view는 .base 파일의 YAML로 정의되거나 마크다운 파일 내 코드 블록으로 삽입할 수도 있음. 만들어진 뷰는 markdown 테이블이나 CSV로도 내보낼 수 있음. 여기서 자세한 내용 확인 가능함 https://help.obsidian.md/bases/syntax
     * 이 기능이 처음 발표될 때가 기억 남. Dataview 스타일 워크플로에 정식 지원이 생겨서 기쁨. API 쪽에도 확장 기능 지원이 로드맵에 추가된 걸 확인했음 https://obsidian.md/roadmap/ Canvas 및 다양한 노트 타입과 연동이 특히 기대됨
          + Canvas 안에 BaseEmbed 할 수 있고, Base에서 Canvas 노트 목록화도 가능함
          + Dataview와 비교했을 때 어떤 점이 다른지 궁금함. Dataview 유저지만, 지금 당장은 Bases가 Dataview보다 어떤 점이 나은지 바로 안 보임. 물론 나는 파워유저는 아님
     * 내가 아직도 꼭 필요한 기능 하나는, OneNote에서처럼 노트에 스크린샷을 인라인으로 쉽게 붙여넣을 수 있는 기능임
          + 사실 OneNote가 어떻게 처리하는지는 잘 모르겠음. 하지만 Obsidian 파워유저 입장에서 노트에 스크린샷을 자주 붙여넣음. 스크린샷 파일명을 템플릿으로 지정할 수 있는 플러그인이 있어서, 붙여넣는 노트의 이름과 타임스탬프를 파일명으로 삼는 것도 편하게 가능함
"
"https://news.hada.io/topic?id=22588","OverType – 단순 텍스트 영역 기반 Markdown WYSIWYG 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              OverType – 단순 텍스트 영역 기반 Markdown WYSIWYG 에디터

     * OverType은 Markdown 문서를 바로 시각적으로 편집할 수 있도록 설계된 오픈소스 WYSIWYG 에디터
     * 이 에디터의 가장 큰 특징은 HTML textarea만을 사용해 구현되어, 경량화되고 빠른 로딩 속도를 제공
     * 설치나 추가적인 외부 라이브러리 필요 없음으로, 간단한 환경에서도 바로 사용할 수 있음
     * 타 Markdown 에디터 대비 실행 환경의 제약이 적고, 코드가 가독성 있고 관리가 쉬움
     * 실시간 미리보기와 사용자 중심의 직관적인 UI로 초보 개발자도 쉽게 Markdown 문서를 작성 및 수정 가능함

핵심 기능 및 장점

     * 경량화: 불필요한 코드나 종속성이 없어 브라우저에서 바로 실행 가능
     * 간단한 구조: 단일 textarea 기반 설계로 디버깅과 확장이 용이
     * WYSIWYG 지원: 사용자가 마크다운 문법을 입력하면 즉시 시각적 미리보기 제공
     * 접근성: 복잡한 설치 과정 없이 누구나 접근 가능
     * 사용자 친화성: 프로젝트 구조가 직관적이라 빠른 학습과 도입 가능성 높음

비교 우위

     * 일반적인 WYSIWYG 에디터에 비해 용량이 매우 작음
     * 대형 프레임워크 기반 에디터에 비해 유지보수와 커스터마이즈가 쉬움
     * 빠른 로딩 속도와 적은 메모리 사용량으로 저사양 환경에서도 원활히 사용 가능함

활용 방안

     * 간단한 기록용 마크다운 에디터
     * 내장용 문서 편집기가 필요한 서비스에 손쉽게 임베드 가능
     * 교육 목적 및 프로토타입 개발 환경 등에 적합함

     * 데모 시험해 보기 - https://overtype.dev/demo

   Love this!

        Hacker News 의견

     * 정말 멋짐, 드롭인 방식으로 모든 게 바로 동작한다면 무척 유용할 거라고 생각함, 약간 꼬집자면 마크다운을 ""렌더링""한다고 하기엔 사실상 ""문법 강조""에 더 가까움, 또 다른 흥미로운 방법은 CSS Custom Highlight API를 사용하는 것임, 그러면 미리보기 div가 필요 없어지고, 헤더 등에는 비고정폭 글꼴이나 다양한 텍스트 크기도 적용 가능할 것 같음 CSS Custom Highlight API에 대한 자세한 내용
          + 텍스트 영역의 내용에도 하이라이트를 적용할 수 있는지 궁금함
          + 애니메이션으로 확장된 데모를 보면 굵은 글씨나 점으로 바뀐 기호 등 일반 텍스트와는 확실히 다른 방식으로 포맷팅하는 것을 확인할 수 있음
     * ""부모 페이지에서 상속된 CSS 때문에 마진, 패딩, 라인하이트 등이 어긋나는 혼란이 있었다""는 점에 완전 공감함, 이런 경우는 웹 컴포넌트와 그 쉐도우 DOM을 쓰면 딱 맞는 해결책임, div.editor 대신 이 컴포넌트가 textarea를 래핑해주면, 기존 textarea 경험을 점진적으로 업그레이드할 수 있음
     * 정말 좋아보임, 과거에 이런 접근법을 다룬 링크들을 모아둔 게 있어서 공유함
          + CSS Tricks의 에디터 예제
          + code-input 라이브러리
          + grugnotes.com에서도 마크다운을 이런 방식으로 처리하는 것 같음
     * overtype.dev 사이트를 탐험하다가 정말 멋진 rabbit hole을 발견함, hyperclay.com이라는 싱글 HTML 앱을 추천함, 정말 재미있게 즐겼음
          + 이 접근이 WWW가 처음 지향했던 방향에 아주 가깝다고 생각함, 최초의 웹 브라우저도 실제로 에디터 기능을 제공했음, Tim Berners-Lee가 NeXT에서 만든 앱은 운영체제 내장 리치 텍스트 클래스(TextView)를 감싼 형태였고(이후 NSTextView로, 지금도 Mac의 TextEdit 앱에서 사용됨), 그런데 두 가지 이유로 에디팅이 사라졌음, 첫째로 HTTP PUT이 없었기에 수정된 HTML을 로컬에만 저장 가능했고, 둘째로 Mosaic이 멀티플랫폼 브라우저를 만들었지만, 에디팅 기능까지 구현하려면 너무 복잡해서 뺐기 때문임, 결국 대부분의 사용자가 편집 기능 없는 환경에 익숙해짐
          + 이런 감탄 자주 안 하는데, 이번엔 정말 충격적임, 왜 이 방식이 지금처럼 폭발적으로 인기를 얻지 못하는지 이해가 안 되며, 요즘처럼 vibe coding이 뜨는 시대에는 이런 방식이 훨씬 효율적이고 낫다고 생각함
          + 2000년대 중반 웹 개발에서 시도되던 멋진 실험들을 떠올리게 함, 이런 프로젝트들이 표준과 사용자 기대 수준을 한 단계 높이는 역할을 한다고 믿음
     * 완성도가 상당해 보임, IDE에서 Cursor처럼 현재 커서 앞에 실버 색상의 자동완성 텍스트를 띄우고 TAB을 누르면 .value에 반영되는 기능도 구현될 수 있는지 궁금함
     * 정말 괜찮음, ""투명 구문 강조기""라고 부르면 더 어울릴 것 같음, 내가 만들었던 adventure 데모에서도 비슷하게 숨겨진 <input text>를 썼는데, 붙여넣기와 선택 같은 기본 기능을 살리면서 스타일링까지 완전히 통합하기 위함이었음, contentEditable보단 기본 input 박스들이 훨씬 단순해서 더 매력적임, 여기에 진짜 마크다운을 렌더링하되 textarea를 완전히 숨긴 채 포커스만 유지하고, 렌더링된 마크업의 선택 이벤트를 textarea에 그대로 에뮬레이션하면, 텍스트박스의 안정성과 아름다운 에디터를 모두 잡을 수 있다고 봄
          + 재밌는 사실 하나, github의 검색창에서 구문 강조가 이런 방식으로 추가됨, 예전에 Shortwave(이메일 클라이언트)에서도 같은 방식(투명 input 위에 뷰 얹기)으로 구현했음, 그리고 이 블로그를 참고해서 검색 UX를 한 단계 도약시킬 수 있었음
            Delightful Search: More Than Meets the Eye (Superhuman 블로그)
     * 너무 멋짐, 이런 단순함이 정말 좋음, 기존 textarea에 비해 단점이 없으면서도 더 많은 이점을 제공함, textarea를 완전 새로운 레벨로 업그레이드했다고 생각함, 예전에 비슷한 프로젝트로 contextarea.com이라는 걸 만들었는데, 여기에 overtype을 결합하면 좋을 것 같음
          + 고정폭 글꼴만 쓸 수 있다는 점은 단점이라고 생각함, 개발자나 프로그래머가 아니라면 제품에선 활용도가 떨어짐, 물론 프로젝트 자체는 여전히 멋짐, 단순히 확실한 제약이 있다는 의미로 얘기함
     * 이걸 웹 컴포넌트로 감싸서 div+생성자 호출 없이 바로 사용할 수 있도록 고려해봤는지 궁금함
     * 만약 WYSIWYG 에디터라면 이미지 미리보기가 있어야 할 텐데, 실제로는 텍스트 영역의 구문 강조만 제공하는 것 같음, 프로젝트 자체는 좋지만, 광고 문구가 좀 오해의 소지가 있음
          + 이건 용어 잘못 사용한 예시임, 진정한 WYSIWYG 에디터는 포맷팅 마크업을 아예 보여주지 않음
          + 텍스트를 입력하고, 강조할 부분 표시해서 ""B"" 버튼 누르면 굵게 변하는데, 이미지 미리보기 제외하곤 WYSIWYG라고 할 수 있음
          + 이미지 기능을 못 찾았는데 혹시 내가 놓친 게 있는지 궁금함
     * 912 바이트로 동작하는 spell 데모를 공유함
          + 완전 장난 아닌데, 엄청 감탄함, 마크다운에 정확히 맞진 않지만 overtype보다 훨씬 많은 기능을 제공하는 WYSIWYG처럼 보임(물론 overtype도 정말 좋은 프로젝트임), 912 바이트로 이만큼 할 수 있다니 충격임, 14kb 이하로 아주 단순한 블로그 포스트를 만들고 그 안에 댓글 기능까지 지원하면서도 엄청 빠르게 로드할 수 있을 것 같음, 표현이 부족할 정도로 감탄함
"
"https://news.hada.io/topic?id=22493","Go 1.25 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Go 1.25 출시

   [IMG] Overview

   Go 1.25 버전이 정식으로 출시되었습니다. 이번 버전은 툴, 런타임, 컴파일러, 표준 라이브러리 전반에 걸친 개선 사항을 포함하며, 특히 사용자가 미리 체험하고 피드백을 제공할 수 있는 중요한 실험적 기능들을 선보입니다.
     * 주요 특징:
          + Go 1 버전과의 호환성 유지
          + 툴, 런타임, 컴파일러, 라이브러리 등 광범위한 개선
          + 새로운 실험적 기능(GreenTea GC, json/v2 패키지) 도입

    핵심 실험적 기능

   Go 1.25는 성능 향상과 기능 개선을 목표로 하는 두 가지 주요 실험적 기능을 포함하고 있으며, 사용자는 환경 변수 설정을 통해 활성화할 수 있습니다.

      새로운 GreenTea 가비지 컬렉터 (GC)

   수많은 작은 객체를 처리할 때 발생하는 GC 오버헤드를 줄여 성능을 향상시키는 것이 목표입니다.
     * 작동 방식: 512바이트 미만의 작은 객체들을 8KiB 크기의 '메모리 스팬(Memory Span)' 단위로 그룹화하여 GC를 수행합니다. 이를 통해 메모리 지역성(locality)을 높여 CPU 캐시 효율을 극대화합니다.
     * 기대 효과:
          + 메모리 점프 비용 감소로 인한 GC 성능 향상
          + 다중 코어 환경에서 효율적인 작동
          + 작은 객체 할당 오버헤드 및 메모리 파편화 감소
     * 활성화 방법: 빌드 시 GOEXPERIMENT=greenteagc 환경 변수 설정

      새로운 encoding/json/v2 패키지

   기존 encoding/json (v1)의 일관성 부족, 예측 힘든 동작, 성능 문제를 해결하기 위해 새롭게 설계된 JSON 구현체입니다.
     * 핵심 목표:
          + 정확성 및 예측 가능성 향상: 기본적으로 더 엄격한 규칙(예: 대소문자 구분, 중복 키 금지)을 적용하여 예기치 않은 동작을 줄입니다.
          + 성능 개선: 파싱 및 인코딩 엔진을 재설계하여 효율성을 높였습니다.
          + 유연성 및 제어권 확대: 정교한 옵션 시스템을 도입하여 개발자가 JSON 처리 방식을 세밀하게 제어할 수 있습니다.
     * 주요 변경점 (v1 대비 v2):
          + 필드 이름 매칭: v1의 대소문자 미구분 방식과 달리, v2는 기본적으로 대소문자를 정확히 구분합니다.
          + omitempty 태그 의미 변경: v1이 Go 값의 '빈 상태'(0, false, nil 등)를 기준으로 생략했다면, v2는 인코딩된 JSON 값의 '빈 상태'(null, """", {}, [])를 기준으로 생략합니다.
          + nil 슬라이스 및 맵 처리: v1은 null로 마샬링했지만, v2는 기본적으로 각각 [] (빈 배열)과 {} (빈 객체)로 마샬링합니다.
          + 배열 언마샬링: v1은 JSON 배열과 Go 배열의 길이가 달라도 허용했지만, v2는 길이가 정확히 일치해야만 하고, 그렇지 않으면 오류를 반환합니다.
          + 중복 키 처리: v1은 중복된 키를 허용(마지막 값으로 덮어씀)했지만, v2는 기본적으로 오류를 반환하여 정확성과 보안을 강화합니다.
          + 유효하지 않은 UTF-8 처리: v1은 유효하지 않은 UTF-8 문자를 자동으로 대체(\uFFFD)했지만, v2는 기본적으로 오류를 반환하여 데이터 손상을 방지합니다.
     * 새로운 기능 및 구조:
          + 모듈식 구조: 저수준의 구문 분석(jsontext 패키지)과 고수준의 의미 변환(json/v2 패키지)을 분리하여 코드 명확성과 성능을 개선했습니다.
          + 강력한 옵션 시스템: json.Options를 통해 다양한 동작을 세밀하게 제어할 수 있으며, v1의 동작을 완벽히 재현하는 것도 가능합니다.
          + 외부 타입 처리: WithMarshalers, WithUnmarshalers 옵션을 통해 Marshaler/Unmarshaler 인터페이스를 구현하지 않은 외부 패키지의 타입에 대한 직렬화/역직렬화 로직을 주입할 수 있습니다.
     * 활성화 방법: 빌드 시 GOEXPERIMENT=jsonv2 환경 변수 설정

    주요 변경 사항 및 개선점

   이번 릴리스에는 개발 생산성과 프로그램 실행 효율을 높이기 위한 다양한 개선이 이루어졌습니다.
     * 런타임 (Runtime)
          + 컨테이너 환경 인지 GOMAXPROCS: Linux 환경에서 cgroup의 CPU 제한을 자동으로 인지하여 GOMAXPROCS 기본값을 설정하고, CPU 자원 변경 시 이를 동적으로 업데이트합니다.
          + Trace Flight Recorder: 드문 버그를 디버깅하기 위해 메모리 내 링 버퍼에 런타임 트레이스를 지속적으로 기록하는 경량화된 추적 기능을 제공합니다.
     * 툴 및 컴파일러 (Tools & Compiler)
          + nil 포인터 버그 수정: Go 1.21부터 존재했던 nil 포인터 검사를 지연시키는 컴파일러 버그가 수정되어, 비정상적으로 성공하던 코드가 이제 정상적으로 패닉을 일으킵니다.
          + DWARF5 지원: 디버깅 정보에 DWARF 버전 5를 사용하여 바이너리 크기와 링크 시간을 줄였습니다.
          + 새로운 go.mod ignore 지시어: go 명령어가 특정 디렉터리를 무시하도록 설정할 수 있습니다.
     * 표준 라이브러리 (Standard Library)
          + testing/synctest 패키지 추가: 동시성 코드 테스트를 지원하는 새로운 패키지로, 가상화된 시간 속에서 테스트를 격리 실행할 수 있습니다.
          + crypto 패키지 성능 향상: FIPS 모드에서의 ecdsa, ed25519 서명 속도가 4배 빨라졌으며, SHA 해싱 속도도 개선되었습니다.
          + net/http CrossOriginProtection 추가: 최신 브라우저의 Fetch 메타데이터를 사용하여 CSRF 공격을 방어하는 새로운 기능을 제공합니다.

    포트 및 지원 변경

     * macOS: Go 1.25부터 macOS 12 Monterey 이상의 버전이 필요합니다.
     * Windows: 32비트 windows/arm 포트는 이번 릴리스를 마지막으로 지원이 중단될 예정입니다.

     * Go 1.25 encoding/json v1 vs v2 비교: https://gosuda.org/ko/blog/…
     * Go 런타임이 뺏어갈 녹차 한 잔의 여유, GreenTea GC: https://gosuda.org/ko/blog/…

   llm 통해서 이미지로 만들어진것 같은데 보기 좋네요

   혹시 이게 어떤 얘기일까요

   글 첫번째 줄에 한눈에 보기 좋게 정리된 이미지 링크가 있네요
"
"https://news.hada.io/topic?id=22617","HTML 스펙에서 XSLT 언급 제거 제안","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HTML 스펙에서 XSLT 언급 제거 제안

     * HTML 표준 문서에서 XSLT 관련 언급을 삭제하려는 Pull Request가 제안된 상황
     * 제안자는 크롬, 파이어폭스, 사파리 등 주요 브라우저에 관련 구현 버그가 보고되었고, 테스트 및 문서화 이슈도 진행 중이라고 설명
     * 반대 의견에서는 기존 웹사이트 호환성 문제와 <?xml-stylesheet?> 제거 시 XML 문서가 깨지는 가독성 문제를 지적
     * 일부 개발자는 XSLT가 여전히 정부 문서, RSS, 임베디드 환경 등에서 사용된다고 강조
     * 대형 브라우저 벤더 중심의 결정이 웹의 개방성과 역사적 다양성 축소로 이어질 수 있다는 우려 제기


Pull Request 개요

     * PR 제목: Remove mentions of XSLT from the html spec
     * 제안자: mfreed7
     * 대상: whatwg/html:main
     * 관련 이슈: #11523
     * Chromium, Gecko, WebKit 모두에 관련 구현 버그 리포트 존재
     * MDN 문서 및 HTML AAM 등 관련 자료 업데이트 예정

주요 반대 의견

  gucci-on-fleek (2025-08-15)

     * 사용 통계와 웹사이트 규모를 고려해야 한다는 주장
          + 대형 사이트는 업데이트 가능하지만, 소규모/개인 사이트는 수십 년째 유지되지 않아 영구적 호환성 깨짐 우려
     * XSLTProcessor() 제거는 JS 기능만 제한되지만, <?xml-stylesheet?> 제거 시 XML 문서가 전혀 표시되지 않는 문제 발생
     * 이전 HTML 구식 기능(<font>, <align>, <xmp>)은 여전히 동작하지만, 이번은 문서 자체를 깨뜨리는 전례 없는 변화라는 지적
     * 오래된 아카이브, 대학 사이트 등 중요한 자료 접근이 차단될 수 있는 위험성 강조

  nomis (2025-08-18)

     * XSLT의 구체적 사용 예시 제시
          + 미국 의회 법안 XML
          + govinfo.gov 법안 데이터
          + XMPP 확장 스펙 문서
     * 개인적 사용 사례
          + 복잡한 XML 데이터를 HTML 테이블로 변환
          + 메모리 제약이 있는 마이크로컨트롤러에서 동적 XML을 정적 XSLT로 변환
     * libxml2를 통째로 포함하는 JS polyfill은 비현실적이며, 브라우저 지원 제거는 사실상 재구현 강제라는 비판

  jonsterling (2025-08-18)

     * 브라우저 벤더가 웹 플랫폼을 독점적으로 정의하는 현실을 비판
     * XSLT는 여전히 다양하고 창의적인 웹 활용에 기여 중이며, 제거는 Open Web 약화로 이어질 것이라는 우려
     * ""웹은 우리 모두의 것""이라는 원칙을 강조하며, 역사와 다양성을 존중할 필요 주장

찬성 및 후속 조치

     * domenic (2025-08-19): 긍정적 반응과 함께 DOM 스펙의 XSLT 언급도 업데이트 필요성을 지적
     * mfreed7 (2025-08-19): DOM 스펙에도 별도 PR을 제출하겠다고 답변

정리

     * XSLT 제거는 브라우저 단순화 및 최신화 노력의 일환으로 제안된 변화
     * 그러나 반대 측은 기존 문서 호환성, 정부/학술 데이터 접근성, 오픈웹 다양성 훼손을 우려
     * 이번 논의는 단순한 기술적 선택을 넘어, 웹 표준 결정 권한이 누구에게 있는지라는 철학적 논쟁까지 이어지는 상황

        Hacker News 의견

     * 몇 가지 주목할 점이 있음
          + 이번 결정은 Chrome만의 단독 행동이 아니며, 이슈 트래킹과 관련 표준 회의 기록에서 모든 주요 브라우저의 대표자들이 지지 의사를 보임을 확인할 수 있음
          + 최근 안건 역시 Mozilla 엔지니어가 제안함
          + PR 제출이 바로 머지된다는 의미는 아니며, 체크되지 않은 과제들도 꽤 남아 있음
          + 하지만 여러 브라우저 벤더가 동의하는 상황에서 머지될 가능성이 높음
          + XSLT를 웹 플랫폼에서 제거할지 고민하는 이슈는 커뮤니티 의견 수렴을 위한 게 아닌 HTML 스펙 유지보수자들을 위한 논의 이슈임
          + 이 이슈는 Chrome 엔지니어가 올렸지만, Mozilla 엔지니어들이 여러 차례 이 주제를 회의에서 제기했고 이미 벤더 합의가 있었다는 점이 큼
          + 심각한 보안 취약점이 발견된 바 있음
          + libxslt의 메인테이너도 직접 사임했음
          + Chrome이라는 단어를 제목에서 빼줬음
          + 원래 제출된 제목은 ""Chrome intends to remove XSLT from the HTML spec""였음
          + Chrome의 텔레메트리 데이터에 따르면 실제로 XSLT를 사용하는 웹사이트가 거의 없음
          + 제안으로 인해 전체 웹에 큰 영향이 있는 건 아니란 점을 최소한 데이터로 확인 가능함
          + 과거 Mozilla와 Google(Chrome팀)에서 근무했던 개발자임
          + Chrome/Blink, Safari/Webkit, Firefox/Gecko 모두 XSLT 제거를 지지하는 건 알겠지만, 두 프로젝트는 자원이 부족하고, 한 곳은 새로운 기능을 무리하게 밀어넣는 경향이 강함
          + 사파리와 파이어폭스 개발자가 이런 변화를 반길 이유도 있음
          + 중요한 건 '권위 있는 사람들이 좋은 생각이라 생각하는가'가 아니라, '이 아이디어가 웹 플랫폼과 수십억 사용자에게 부정적인 영향을 줄 것인가'임
          + 수십억 명 중 0.1%만 의존해도 상당한 규모임
          + 아무도 쓰지 않으면 polyfill이 존재할 이유도 없음
          + 만약 새로운 기능을 추가하려면 반드시 기존 기능을 없애야 하는 제로섬 게임으로 몰고 가는 것은 바람직하지 않음
          + 구글은 충분한 자본과 인력이 있음에도 XSLT 지원을 일부러 안 하기로 선택하는 것임
          + 여러 벤더가 동의한다고 해서 즉시 추진되는 사례가 종종 있었음
          + confirm/prompt 제거도 그랬으나 결국 무기한 보류됨
          + 구글에서 공식적으로 제휴된 기능 제거 프로세스 문서가 있음
            Google feature removal doc
          + ""벤더 단독 지지""가 실제 사용 현황을 제대로 검토하지 않았음
     * 내가 읽은 두 스레드를 보면 구글이 피드백을 요청했는데, 피드백은 거의 다 ""하지 말라""였음
          + 하지만 구글은 ""의견 고마워, 그래도 할게!""라는 반응을 보였음
          + 만약 이슈가 보안 때문이라면, 오픈소스에 지원을 하거나, 더 안전한 라이브러리로 교체하거나, JS 샌드박스 내에서 유지 등 다양한 대안이 있었지만 대부분 무시당함
          + XSLT 3.0 같은 최신 버전 지원 요청도 꾸준히 있었으나 반영되지 않았음
          + XSLT는 오픈 웹을 지지하는 기술임에도, 구글은 10년 전부터 지원을 줄이고 방치하며 점유율 하락을 이유로 제거 시도를 지속해왔음
          + 최근 XSLT가 다시 인기를 얻고 있는 시점에, 오픈 경쟁자 등장 전에 죽이려는 의도가 느껴짐
          + 관련 이슈
          + 많은 피드백이 ""하지 마라""였다는 주장에 대해, 해당 스레드는 악의적 댓글, 비방 등으로 일찍 잠겼음
          + ""이건 좋은 생각""이라는 의견은 평소 잘 달리지 않아서 반대 의견만 많은 것처럼 보일 수 있음
          + 모두가 극단적인 언행을 해서 토론이 정리된 것이고, 스스로 자초한 일임
          + 만약 ""하지 마세요""라는 의견들이 실사용자거나 꼭 필요한 이유를 설명할 수 없다면, 개발팀이 무시하는 것은 합리적임
          + 피드백 요청은 단순 찬반투표가 아님
          + XSLT 3.0을 JS/wasm 샌드박스로 옮겨 지원할 수만 있다면 좋겠음
          + 약간의 성능 저하는 있겠지만, 양쪽 장점을 모두 취할 수 있음
          + XML에는 버전 관리 스키마, 네임스페이스 등 특성상 통합이 비교적 수월함
          + Angular 같은 js 프레임워크와 달리 신뢰성 높은 데이터 계약이 가능함
          + XML 패밀리의 성숙함 덕분에 전문 툴이 많아, 실제로는 XML/XSD를 텍스트로 직접 다루지 않아도 됨
          + 구글은 ""질문 형""으로 웹에 무슨 일이 벌어질지 미리 알려주는 식임
     * 이전 관련 스레드 소개
          + XSLT 제거 주제 스레드
          + XSLT - 웹을 위한 네이티브, 제로 설정 빌드 시스템
          + 관련 이슈로 플래그 처리된 다른 스레드도 있음
          + Google is killing the open web, today
     * 브라우저가 특정 템플릿 엔진(XSLT)에 내장 지원을 할 필요가 있는지 의문임
          + Jinja 같은 텍스트 엔진이 아닌데, JS/wasm으로 재구현도 가능함
          + 지금 브라우저들은 너무 무겁고, 신규 엔진 개발이 힘듦
          + ""미니멀 브라우저""를 위한 더 간단한 표준(기본 태그, 레이아웃 등)만 있었으면 함
          + WebAudio, Canvas 등도 wasm 모듈로 구현 가능함(그리고 이렇게 하면 핑거프린팅도 방지할 수 있음)
          + XSLT는 (특정 엔진이 아닌) 템플릿 엔진에 대한 ""스펙""임, 다양한 구현체가 존재함
          + Mozilla는 libxslt 대신 transformiix 사용
          + Jinja는 단순 텍스트 작업이고, XSLT는 노드 레벨에 작동해서 훨씬 우수함
          + JS 변환은 XSLT 네이티브 변환보다 훨씬 느리고, 결과 캐싱도 어려움
          + XSLT를 구식 취급하는 시각을 나도 이해는 하지만, 지난 20년간 성능 면에서 비밀 병기로 잘 써왔음
          + 구글은 결국 AMP 같은 대안으로 문제를 덮으려 들 가능성 높음
          + 브라우저가 무거운 건 구글 탓임
          + XSLT는 언어(spec)이지 엔진이 아님
          + JS/wasm으로의 구현 변경은 내부 구현 문제이지, 언어를 웹 플랫폼에서 없앨 때 일어나는 일은 아님
          + 오디오나 캔버스는 브라우저의 근본적인 I/O 기능임, wasm으로 옮기면 성능과 호환에 심각한 문제 발생
          + 오디오의 일부는 wasm blob으로 옮길 수 있겠지만, 전체를 이전하는 건 힘듦
          + 캔버스 컨텍스트나 WebGL 등은 GPU와의 직접 통합이 핵심이라 wasm으로 실현 불가임
          + 결국 이런 기능들은 사실상 이미 기본 원시 API라서, 양보할 수 없는 영역임
          + 낡은 XSLT 코드를 wasm으로 패키징해서 구버전 사이트 깨짐 없이 호환할 아이디어도 논의됨
          + 실제로도 내부적으로 검토했지만 하지 않기로 결정함
          + 아주 소수만 사용하는 웹과 거리가 먼 기능은 제거 대상이 될 수 있다고 생각함
          + 하지만 보안 취약점을 명분으로 삼는 것은 찬성하지 않음
          + 메모리 세이프 패키지 유무조차 확인하지 않은 상태에선 설득력이 떨어짐
          + 실제 사용률이 0.001% 수준이라는 주장 있음
     * HTML 스펙의 기본 약속을 깨는 일은 굉장히 중대한 사안임
          + 논의가 이 점을 깊이 다루지 않는 게 오히려 놀라움
          + HTML은 ""이건 HTML이야. 신뢰해도 돼""라는 약속이었지만, 이제는 ""지금만 HTML일 뿐, 앞으로도 그렇다는 보장은 없어""가 됨
          + XSLT 제거 논리라면 다른 오래된 기술들도 계속 잘릴 수 있음
          + 결국 웹의 '롱테일'을 끊어내겠다는 제안임
          + 향후 추가된 각종 웹 기술이 또 롱테일이 되어 더 많은 제거 대상이 생길 것이란 점도 고민 필요함
          + 오래된 미디어와 소프트웨어 지원 관련해선 언젠가는 이식, 에뮬레이션, 아카이브 등으로 해결할 시기가 온다고 봄
          + 변화에 대비할 충분한 시간과 도구 제공과 점진적 복잡성 누적을 피하는 균형이 필요함
          + 실제 PR에서 삭제된 부분을 보면 HTML에 XSLT 지원을 요구하는 명시적 규정은 없어 보임
          + 단순히 브라우저 지원 문제에 대한 반응이 크다는 점 정도임
          + PR 자체는 의외로 짧음
          + WHATWG가 HTML을 ""Living Standard""(살아있는 표준)로 규정하면서, 실질적으론 더 이상 구현 표준이 아니라 브라우저 벤더들이 현재 작업 중인 상태를 공유하는 역할임
          + 그래서 HTML5 같은 버전 표기도 없애고, 오로지 ""HTML""만 쓰게 됨
          + Living Standard FAQ
          + HTML standard FAQ
          + 아이러니하게도 HTML/CSS/브라우저 스펙에 엄청난 양의 기능을 밀어넣은 대표적인 것도 바로 Google임
          + 만약 구글이 ""브라우저는 가벼워야 하며 이상한 것들은 JS 라이브러리에 맡기는 게 맞다""를 일관되게 옹호했다면 이번 조치도 이해할 만했겠지만, 전혀 그렇지 않음
     * FTP 지원 제거 이후부터 XSL의 운명은 이미 예견됨
          + 브라우저들은 공격 표면 축소를 최우선으로 삼는 경향이 있음
          + 다음 제거 후보는 SVG SMIL 애니메이션 속성, MathML 등 XML 관련 기능이 될 것 같단 생각임
          + 관련 스레드
          + SMIL은 특정 애니메이션 시작/종료 타이밍을 기반으로 순차적 애니메이션 제어를 할 수 있는데, CSS 애니메이션은 아직 이 부분이 부족함
          + CSS는 계산을 이용한 타이밍 외엔 방법이 없음
          + Chromium도 한때 SMIL 제거 의지를 밝힌 적 있으나, CSS가 충분하지 않았기 때문에 너무 성급했었음
          + 그 여파로 SMIL 관련 각종 안내문 등이 업데이트 없이 방치됨
          + 공격 표면을 줄이는 것이 과연 좋은 것인지 나쁜 것인지 질문하고 싶음
          + 기술자들과 일반 사용자가 우선순위가 다르긴 함
          + FTP 기능 제거가 언제 이루어진 것인지 궁금함
          + 아직 주소창에서 ftp://로 접속이 되는 것으로 알고 있음
     * Blink와 WebKit의 XSLT 구현은 매우 비효율적임
          + 전체 문서를 문자열로 바꿨다 다시 파싱하는 형태라서, 사용자 공간 라이브러리도 충분히 비슷한 성능을 낼 수 있을 듯함
          + Chromium XSLT 구현 예시1
          + Chromium XSLT 구현 예시2
          + Webkit XSLTProcessor 구현
          + Mozilla는 자체 구현(xslt 엔진)을 씀
          + 호환성 문제는 MathML처럼 외부 개발자가 각 브라우저별 구현을 기여하는 접근이 대안일 듯함
     * 이번 결정이 아쉽지만, 더 현대적인 XSLT 통합에 노력을 쏟지 않은 게 더 안타까움
          + 사용은 불편했지만 브라우저에서 조금만 더 진화했다면 React 같은 프레임워크에 필적할 경쟁자가 될 수도 있었음
          + XML은 대기업의 복잡성만 없었다면 표준 자체는 매우 강력하고, 멋진 기술이었음
          + XSLT를 활용해 작고 간단한 xml/데이터를 html로 바로 변환하는 게 정말 좋았음
          + 선택된 항목만 다르게 표시하는 작은 기능만 추가됐다면 정적 문서까지 다양한 활용이 가능했을 것으로 아쉬움
     * @whatwg가 토론이 ""과열됐다""며 해당 이슈를 협업자 한정으로 잠갔다고 함
          + 보기엔 꽤 합리적이고 차분했는데, 특정 벤더에 우호적이냐에 따라 ‘과열’의 기준이 달라지는 건 아닐까 싶음
          + ""과열됐다""는 표현은 종종 반대 의견을 다루기 싫다는 뜻으로 해석됨
          + Reddit 등 다른 커뮤니티도 마찬가지임
          + 실제로 그 아래 남아있는 1개의 댓글은 Google Chrome 소속 개발자가 ""좋은 일 하셨다""고 남긴 것
          + 약간 보기 민망한 느낌임
          + 이슈 트래커에 문제 제기성 욕설, 음모론, 정치적 메시지 등 쏟아진 사례를 언급함
          + 이런 식이면 생산적 논의 자체가 불가능해지며, 저장소 관리자들이 신속하게 토론을 막을 수밖에 없음
          + 해당 저장소의 토론 잠금 조치는 실은 Apple 직원이 내린 것이라고 들었음
          + 하지만 사람들은 이 이슈를 제기한 Google 직원의 책임으로 돌린다 함
          + 구글이 최근 커뮤니티 의견 수렴을 내세워 열린 토론을 했지만, 그 후 모든 의견을 무시하고 관철시키려 하고 있음
          + 관련 이슈
     * 구식 웹 요소에 관한 전반적 고민이 필요함
          + 내 경우 예전 웹페이지도 계속 제대로 작동해서 얻는 가치가 큼
          + HTML/JS가 호환성 지켜온 덕분에 수십 년 된 페이지조차 TLS 인증서만 붙이면 여전히 정상임
          + 하지만 모든 유산 기술을 영원히 지원할 수는 없는 일이기도 함
          + Flash도 결국 에뮬레이터(Ruffle)를 통해 추억의 게임이나 사이트를 경험하는 식으로 넘어갔음
          + 장기적으로는 구형 렌더링에 특화된 전용 브라우저나 에뮬레이터 사용도 대안이 될 수 있음
          + 이미 이를 위한 XSLT polyfill 확장이 생겼음
          + Chrome은 이를 공식 배송하거나 유지보수하기를 원하지 않음
          + Ruffle과 매우 유사한 상황임
"
"https://news.hada.io/topic?id=22500","Show GN: 모바일/데스크탑 친화(최적)도 검사 웹앱 입니다.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: 모바일/데스크탑 친화(최적)도 검사 웹앱 입니다.

   replit과 Claude Sonnet 4 로 만들었습니다.

   취미로 만든 2번째 웹앱입니다

   실제 PageSpeed API 를 활용해 믿을만 한 정보입니다.
   유용하게 쓰셨으면 좋겠네요

   사용자가 웹사이트 URL을 입력하면 10초 내에 모바일 친화도, 접근성, SEO, 성능 점수를 분석하여 제공해드립니다.
"
"https://news.hada.io/topic?id=22490","GPT-OSS-120B, 8GB VRAM만으로도 훌륭하게 구동가능만으로도 훌륭하게 구동가능

     * llama-cpp의 --cpu-moe 옵션을 활용해 MOE 전문가 레이어를 CPU에서 처리하고, 주의(attention) 레이어만 GPU에 오프로드해 5~8GB VRAM으로 빠른 프리필 성능을 구현
     * GPU에는 KV 캐시, Attention 가중치·활성값, 라우팅 테이블, LayerNorm 등 비전문가 파라미터만 상주해 메모리 사용량이 낮음
     * RTX 3060Ti급 GPU와 64GB~96GB 시스템 RAM으로도 120B 모델을 가볍게 구동 가능하며, BF16 지원 GPU(RTX 3000+)에서 최적 성능을 발휘함
     * 5GB VRAM 사용 시 토큰당 8.15ms(122.66 토큰/초) 성능을 기록했고, 8GB VRAM 사용 시 7.44ms(134.44 토큰/초)까지 개선됨
     * 120B 구조는 소비자용 하드웨어에 최적화된 설계로, GPU 자원이 부족한 환경에서도 고속 실행이 가능함


CPU-MOE와 GPU 오프로딩 구조

     * --cpu-moe 옵션으로 전문가(MOE) 레이어를 전부 CPU에서 처리
          + 예: --n-cpu-moe 36 → 36개 MOE 블록 전부 CPU 실행
          + 필요 시 일부 MOE만 GPU로 옮겨 성능 조정 가능
     * GPU에는 다음만 상주시켜 VRAM 절약
          + KV 캐시(시퀀스)
          + Attention 가중치와 활성값
          + 라우팅 테이블
          + LayerNorm 및 기타 비전문가 파라미터
     * MOE 가중치는 GPU에 상주하지 않아 대형 MLP 파라미터 부담 없음

메모리 및 하드웨어 요구사항

     * GPU: 5~8GB VRAM으로 충분 (예: RTX 3060Ti)
     * GPU는 BF16 지원 시 최적 (RTX 3000 시리즈 이상)
     * 시스템 RAM: 최소 64GB, 이상적으로는 96GB
          + Linux mmap을 활용해 전체 모델이 메모리에 안 들어가도 ‘핫’ 전문가 레이어는 메모리에 유지

성능 수치

  5GB VRAM 환경

     * 프롬프트 처리: 8.15ms/토큰 (122.66 토큰/초)
     * 추론: 55.44ms/토큰 (18.04 토큰/초)

  8GB VRAM 환경 (--n-cpu-moe 36, 나머지 GPU)

     * 프롬프트 처리: 7.44ms/토큰 (134.44 토큰/초)
     * 추론: 39.03ms/토큰 (25.62 토큰/초)

  22GB VRAM 환경 (MOE 일부 GPU)

     * 프롬프트 처리: 6.13ms/토큰 (163.01 토큰/초)
     * 추론: 32.45ms/토큰 (30.82 토큰/초)

결론

     * GPT-OSS-120B의 설계는 소비자용 하드웨어에서도 대규모 모델을 고속 실행하도록 최적화됨
     * VRAM 사용량을 줄이면서도 속도를 유지하는 CPU-MOE 구조 덕분에 GPU 리소스가 제한된 환경에 특히 적합함


핵심 질문 & 답변 내용

    Q1. 이 설정에서 실제 VRAM 사용량은 얼마나 되나요?

     * 원 작성자: MOE 전부 CPU 실행 시 약 5GB VRAM, 주의 레이어만 GPU로 올림
     * 추가 설명: GPU에는 KV 캐시, Attention 가중치·활성값, 라우팅 테이블, LayerNorm만 상주

    Q2. RAM은 최소 얼마가 필요한가요?

     * 원 작성자: 최소 64GB, 이상적으론 96GB 권장
     * 이유: Linux mmap이 '핫' 전문가 레이어를 메모리에 유지해 전체 모델 적재 없이도 빠른 접근 가능

    Q3. 일부 MOE 레이어를 GPU로 옮기면 속도가 많이 빨라지나요?

     * 원 작성자: 약간 빨라질 수 있지만 큰 차이는 없음
     * 예시:
          + MOE 전부 CPU: 프롬프트 134토큰/초, 추론 25토큰/초
          + MOE 8개 GPU: 프롬프트 163토큰/초, 추론 30토큰/초
          + VRAM 사용량은 22GB로 증가

    Q4. 어떤 GPU가 적합한가요?

     * 원 작성자: RTX 3060Ti 이상이면 충분, BF16 지원(RTX 3000+) 권장
     * 이유: MOE 외 모든 레이어가 BF16로 동작

    Q5. 명령어 세팅은 어떻게 하나요?

     * 원 작성자: PR #15157 기준 예시 제공
~/build/llama.cpp/build-cuda/bin/llama-server \
    -m $LLAMA_MODEL_DIR/gpt-oss-120b-mxfp4-00001-of-00003.gguf \
    --n-cpu-moe 36 \
    --n-gpu-layers 999 \
    -c 0 -fa \
    --jinja --reasoning-format none \
    --host 0.0.0.0 --port 8502 --api-key ""dummy""

   일단 lm studio M4 max 64gb에서 안돌아감 ㅠㅠ

   65기가라서... 아쉽네요 ㅜㅜ

   실제로해봤는데 너무 느려요
   gpu 클럭은 거의 안쓰고
   gpu 전용메모리 8GB, 물리메모리64GB를 가득 사용하고,
   16vCore는 절반만씁니다.
   그냥 돌아간다에 의미를 두어야지 모든 리소스를 다 사용하는 형태는아니였어요.
   질의 한번에 6~8분걸렸습니다.

   비슷하게 함 해봐야겠어요.

   32gb면 충분할 줄 알았는데...

        Hacker News 의견

     * 직접 하드웨어에서 모델을 돌리면 가드레일을 해제할 수 있는지 궁금함
          + 가드레일을 우회하려면, 거부 반응을 일으키는 뉴런 경로를 추적해 삭제하는 식의 ‘abliterated finetune’을 찾아야 함
          + 최근 읽은 글에 따르면 GPT-OSS는 인공/생성 데이터로만 학습돼서 애초에 ‘금지된 지식’이 많지 않음
            관련 글
          + jailbreak 프롬프트로 우회 가능하며, 약간 번거롭지만 잘 작동함
          + 가드레일이 일부 제거된 버전은 성능이 확 떨어져서 개인적으로는 손해라고 생각함
          + 기본적으로는 모델에 내장돼 있지만, 이를 크랙하고 수정하는 커뮤니티가 존재함
     * 5950x + 128GB RAM + 12GB 3060 GPU 환경에서 토큰 생성 속도는 빠르지만, 컨텍스트가 조금만 커져도 처리 속도가 매우 느려짐
       그래서 qwen, mistral, gemma 같은 다른 모델을 주로 사용 중임
          + ‘빠르다’ ‘느리다’ 같은 주관적 표현보다 구체적인 토큰 수치가 궁금함
          + 단순 채팅/텍스트 조작 외에 이 모델로 무엇을 하려는지 궁금함
     * 32GB RAM + 16GB VRAM 환경에서 20B 모델은 VRAM에 전부 올릴 수 있지만, 컨텍스트 창을 8k 토큰 이상 늘리면 VRAM이 부족해짐
       다른 사람들은 더 적은 VRAM으로 120B 모델을 돌리는데, 아마 ROCm 미지원과 Vulkan 사용 때문일 수 있음
       그래도 하드웨어 한계까지 밀어붙이는 게 재미있음
          + 컨텍스트 크기가 커질수록 더 많은 레이어를 시스템 RAM으로 오프로드해야 함
            llama.cpp는 GPU 계산 레이어 수를 직접 설정할 수 있지만, ollama는 자동 조정함
            세션 길이에 따라 RAM/VRAM 비율을 동적으로 조정할 수 있으면 좋겠음
     * 64GB RAM + 8GB VRAM을 ‘겨우’라고 말하는 게 웃김, 나에겐 수천 달러짜리 세팅임
          + RAM 약 300 CAD, GPU 약 400 CAD로 데스크톱이면 저렴하게 가능함
          + 게이밍 PC 중저가 수준이라, 몇 백 달러 업그레이드로 집에서 바로 돌릴 수 있음
          + $1599~$1999 정도면 비싸지 않은 프리오더 제품도 있음
          + 미화 1000달러 이하로 새 부품 조립 가능, 중고면 더 저렴하고 GPU 성능도 나을 수 있음
          + DDR5 64GB는 $150, 12GB 3060은 $300 수준이며, eBay에서 더 싸게 구할 수 있음
     * MacBook Air M4나 RTX 3060에서 20B 모델을 돌려본 사람이 있는지 궁금함
     * RAM이 부족해 큰 모델은 못 쓰지만, 20B 모델은 MacBook에서 빠르고 내 용도에 충분함
       다만 llama.cpp에서 function calling이 아직 깨져 있음
          + 해당 버그는 이 PR에서 수정됨
          + RAM 한계가 아니라 버그라 다행이며, 16GB RAM MacBook Air에서도 여러 모델을 잘 돌림
            방에서 $149 미니 PC로 AI 챗봇을 호스팅할 계획이며, Qwen3 4B 모델이 좋아 보임
            관련 계획
     * OpenWebUI나 다른 GUI에서 이 스펙으로 설정 최적화가 가능한지 궁금하며, 20B 모델이 더 나을 것 같음
     * LLM 초보인데, 이 최적화가 모든 MoE 모델에 적용 가능한지 궁금함
          + 레이어 이름에 정규식을 적용하는 방식이라, 비슷한 네이밍이면 다른 모델에도 가능함
            예를 들어 Qwen 3에서도 동작했고, 직접 정규식을 지정해 특정 레이어를 특정 장치로 옮길 수 있음
     * mlx 최적화 버전이 64GB Mac에서 돌아갈지 궁금함
          + LM Studio의 추정치로는 3-bit 양자화(~50GB)면 문제없이 가능함
"
