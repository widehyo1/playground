"https://news.hada.io/topic?id=6111","페이스북 개발자의 성과 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            페이스북 개발자의 성과 만들기

   페이스북에서 일하는 지인한테 페이스북에서는 일하는 방식과 성과 측정/평가를 어떻게 하는지를 듣고 이를 정리

  업무의 시작

     * 데이터를 기반으로 한 뚜렷하고 심플한 목표가 주기적으로 내려온다.
     * 이 목표를 이루기 위한 아이디어는 모든 작업자가 생각해 내서 프로젝트를 자발적으로 구성한다.
     * 프로젝트 멤버를 구성할 때는 공개적으로 어떤 아이디어이고 어떤 인력이 필요한지를 사내에서 공개적으로 구인한다.

  업무의 진행

     * 업무에서 어떤 성과를 냈는지가 제일 중요하므로 성과를 어떻게 측정할 지에 대한 문서화를 한다.
     * 모든 작업은 A/B 테스트를 통해 배포하므로 성과가 좋으면 퍼센티지를 늘려가게 되고 문제가 있다면 0%로 바꾼 뒤에 문제를 해결한다.
     * QA는 따로 없기 때문에 개발하면서 E2E 테스트를 철저히 하고 있다.
     * VSCode를 커스터마이징해서 클라우드 기반의 1인 개발환경을 쉽게 설정할 수 있는 환경을 제공한다.

  업무의 위기

     * 프로젝트에 사람이 더 필요한 경우 직접 구하거나 매니저에게 요청하기도 한다.
     * 매니저와 개발자의 트랙이 명확히 구분되어 있다.
     * 온콜은 당번제로 한달 단위로 돌아가게 되고 장애를 등록하면 자동으로 담당자에게 전화가 간다.
     * 장애에 도움을 주는 사람들도 있는데 이들은 이 업무가 그들의 성과이다.
     * 장애가 해결되면 장애 리포트를 정리한다.

  성과의 기준

     * 성과는 프로젝트 영향력, 엔지니어링/서비스 전반, 피플, 디렉션의 4가지 범주로 평가한다.
     * 프로젝트 영향력은 실제로 프로젝트에 어떤 공헌을 하였는지를 평가한다.
     * 엔지니어링/서비스 전반은 개발자 역량에 대한 평가이다.
     * 피플은 공유나 태도, 커뮤니케이션애 대한 평가이다.
     * 디렉션은 시니어이거나 시니어가 될 주니어에게 필요한 성과로 리더쉽이나 기술 리딩에 대해 평가한다.

  성과 평가

     * 평가는 1년에 한번 하는데 중간에 동료나 매니저에게 지금 잘하고 있는지 확인하는 요청을 할 수 있다.
     * 모든 성과는 측정가능해야 한다.
     * 평가는 매년 해도 연봉협상도 매년하는 것은 아니다.
     * 평가는 대상자가 제출하는 성과 보고서를 기준으로 진행된다.

   평가 대상자가 숨막힐 것 같은 시스템이네요

   맨 첫줄이 가장 궁금하네요
   ""데이터를 기반으로 한 뚜렷하고 심플한 목표가 주기적으로 내려온다.""

   저도 PM 직무에 있으면 이부분이 항상 제일 어려운 것 같아요.
   PRD에 사업적 임팩트는 쉽지만 데이터 기반의 목표는 참어려워요.
   페북 정도면 그래도 회사에서 중요하게 생각하는 성과지표가 있을 것 같긴하네요.
"
"https://news.hada.io/topic?id=6113","크롬의 새로운 속도 마일스톤","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            크롬의 새로운 속도 마일스톤

     * 맥용 크롬이 애플의 Speedometer 2.0 테스트에서 모든 브라우저중 최고 점수인 300점을 받음
     * 작년에 ThinLTO 기능을 도입하여 속도가 많이 개선되어 사파리 보다 그래픽 포함 15% 빨라짐
     * M1용 크롬 출시후 17개월 동안 그전보다 43% 빨라짐
     * 최근의 주요 속도 개선점은 V8 Sparkplug 컴파일러와 Short Builtin Call
     * 안드로이드용 크롬도 계속 속도 개선중. 페이지 로딩에 15% 적게 시간이 소요되며, 시작 시간도 13% 개선
"
"https://news.hada.io/topic?id=6030","구글, 첫 페이지 하단에 위젯 포함하는 테스트 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      구글, 첫 페이지 하단에 위젯 포함하는 테스트 중

     * 데스크탑 검색 페이지 하단에 위젯 형태의 카드를 포함
          + 6개의 카드 : 날씨, 트렌딩, 볼 영화/드라마, 주식, 로컬 이벤트, COVID뉴스
     * Hide Content 토글 버튼으로 숨기기 가능
     * 모든 내용은 기존의 활동에 기반하여 추천
     * 클릭시 해당 항목에 대한 검색 결과 페이지를 보여줌 (정보 패널 포함)

   구글의 네이버화?
"
"https://news.hada.io/topic?id=6068","Javascript to Rust e북(PDF)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Javascript to Rust e북(PDF)

     * JS 개발자를 위한 Rust 입문서
     * Javascript/Node.js 의 컨셉트와 워크플로우를 Rust 에코시스템으로 매핑
     * 총 24일간 진행되었던 가이드를 하나로 엮은 것
     * 목차중 일부
          + nvm → rustup
          + npm → cargo
          + Borrowing & Ownership, 문자열, 문법과 언어
          + Mixins → Traits

   Node 개발자를 위한 Rust 가이드 보다는 좀 더 상세한 가이드네요.
"
"https://news.hada.io/topic?id=6099","혼자서 SaaS를 1년 운영해보고 배운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        혼자서 SaaS를 1년 운영해보고 배운 것

     * 업타임 체커인 OnlineOrNot을 Next.js + AWS Lambda로 7일만에 만들어서 런치하고 1년간 운영한 경험

200개나 되는 경쟁자가 있음에도 서비스를 유지하는 비법은?

     * 주중 평일에 딱 두시간만 일함
     * 고객의 고통을 해결하는 기능에 집중
     * 엄청(ruthlessly) 반복적. 2시간에 기능 구현이 안되면 스코프를 줄여서라도 배포하고 그걸 반복

✓ 1년간 배운 교훈들

  문제를 해결하는 것이지, SaaS 구독을 판매하는게 아님

     * 고객 입장에서 생각하기
     * ""이 기능을 만들면 고객이 찾아올꺼야!""가 아니라 ""고객들의 이 짜증나는 문제를 해결해서 도와줘야 겠다"" 가 되어야 함
     * SaaS는 문제를 해결하는 많은 방법중 하나일 뿐

  문서는 사용자 경험의 일부임

     * ""개발자는 문서를 읽지 않는다"" 라고 말하지만 그건 일부만 맞음
     * 그들은 읽지 않고, 제목을 훑어봄

  모바일을 위해 만들기

     * B2B SaaS에 대한 일반적인 믿음과 달리 사람들은 폰에서 많이 일을 함
     * OnlineOrNot은 50% 정도가 모바일에서 옴
     * 모바일에서 빠르게 계정을 만들고 모니터링할 페이지를 몇 개 추가한 후에 가끔 노트북/데스크탑에서 체크하는 경향이 있음
     * 6개월간 모바일을 지원하지 않았는데, 휴대폰으로 가입했던 사람들은 빠르게 이탈했음
     * 결국 반응형 모바일 페이지를 만들었더니 이제 새로운 모바일 사용자가 게속 늘어나는 중

  사람들에게 어떻게 알게 되었는지 묻기

     * 엄청 가치있었던 코드 변경중 하나는 가입한 사용자에게 ""어떻게 OnlineOrNot을 알게 되셨나요?"" 였음
     * 잠재 고객을 끌어들이기 위한 채널은 여러가지가 있고, 어떤걸 강조할 지를 알아야함

  가끔은 직접 실수를 할 필요가 있음

     * 다른 사람의 실수를 반복하지 않기 위해 책을 많이 읽기도 했는데, 가끔은 실수를 할 필요가 있음
     * 해커뉴스 프론트에 걸렸을때 6000명이 왔지만 몇 백명이 회원 가입하려다 했지만 그중 10명도 안되는 사람만 가입하는 걸 보고 뭔가 잘 못 되었다는 걸 깨달음
     * 회원 가입폼에서 75% 이탈율을 보였음. A/B테스팅(내가 만든 DeployWithFlags 이용)을 통해서 추가 OAuth 프로바이더를 붙이고 50%까지 떨어뜨렸음

  가격 책정이 정말 어려움

     * 가격이 너무 높으면, 당신의 앱이 모든 걸 수행해 줄거라 믿는 사람들이 이탈함
     * 가격이 너무 낮으면, $9 냈으니 앱을 다시 작성하길 원하는 고객들이 생김
     * 어려운 고객은 환불해주고, 가격을 인상하고, 계속 나아가기
     * 가격 책정에 대해서 많은 실험을 할 준비를 할 것

  MRR(Monthly Recurring Revenue)에 너무 집중할 필요는..

     * MRR은 초기에 비즈니스가 어떻게 되어가는지 측정하는 매우 형편없는 방법임
     * 몇주 전에 고친 것들이 현재 MRR에 영향을 미치게 되므로, 많은 고객이 확보 될때 까지는 이런 변경들이 실제 효과가 있는지 알기 어려움
     * DAU 나 몇몇 고객 성공 지표(페이지 확인, 이미지 생성등)가 MRR보다 더 유용했음
     * 이런 값들이 실제 사용자가 제품을 사용하는지, 그들에게 가치를 가져다 주는지를 알 수 있게 함

  유료 티어에도 무료 트라이얼은 필요

     * 무료 티어가 사람들을 끌어 들이고 당신의 제품에 대해 얘기하도록 만드는 좋은 방법이지만
     * 무료 티어보다 유료 티어가 훨씬 좋다면, 이 유료에 있는 ""좋은 기능(Good Stuff)""을 맛보게 하는 방법은 필요함
     * 이걸 깨닫는데 11개월이 걸렸음
     * 무료 티어를 제공하지만, 신규 사용자의 95%는 프로 티어의 무료 평가판을 선택함

  더 많은 트래픽을 가져오기는 어렵고, 현재 트래픽이 하는 것을 변경하기는 쉬움

     * 인터넷에서 주목을 받는 것은 길고, 느린 게임
     * 몇달에 걸쳐서 양질의 콘텐츠 마케팅을 꾸준히 한다면 독자수는 하루 1~2명에서 수백명으로 늘어날 것
     * 사이트에 방문하는 사람 수를 늘리는 것은 정말 쉬운 일이 아님
     * 반면에 사람들이 사이트에 방문했을 때 하는 것들은 당신이 영향을 줄 수 있고 오늘 바로 할 수 있음
       (OAuth 로그인 프로바이더를 추가하는 일 같은 것)

  콘텐츠 마케팅은 당신에게 시간을 벌어줌

     * 콘텐츠 마케팅에 투자하면 비즈니스가 일정 기간 동안 자체적으로 운영하게 함
     * 일년 동안 몇년의 글이 바이럴 되면서 수만명의 방문자를 끌어들였음. 내가 아무 것도 하지않아도 약 1500명의 사람들이 이 글을 보기 위해 유기적으로 방문하는 중

  작게 자주 배포하기

     * 사람들은 제품 개선을 위해 특정 기능을 만들라고 제안하겠지만, 그들은 아마도 그 기능을 사용하지 않을 것
     * 그들은 아마도 도움이 되려고 하는 것이며, 다른 제품에서 유사한 기능을 봤을 것
     * 당신이 SaaS를 처음 운영하고 있기에, 사람들이 당신에게 얘기를 해주는 것에 기뻐하며, 그들을 위한 기능을 구축하려고 서두르게 될 것
     * 기능을 만들지 말라는 말은 하지 않겠음(나는 그런 조언을 받았다는 거고, 어쨋든 사용하지 않는 그 기능을 만들었음)
     * 그 기능을 어떻게 사용할 것인지 묻고, 다른 고객에게 그 문제를 어떻게 처리하는지 물어보고, 해당 기능의 가장 작은 버전을 만들어보고, 다른 사용자들이 그 기능을 쓰는지 살펴 봐야함
       한 사람만 사용하는 기능을 만들고 싶지는 않잖아요?
     * 몇 달을 공들인 것 보다 몇시간만 들인 아무도 원하지 않는 기능을 제거하는게 훨씬 덜 괴로움

  배포를 먼저 하고, 나중에 규모(Scale)에 대해 걱정할 것

     * OnlineOrNot의 첫 버전에서는 아키텍처를 전혀 최적화 하지 않았음
       (각 업타임 체크마다 DB커넥션을 유지하고 있어서 사용자가 많아지기 어려웠음)
     * 또한 사람들이 필요로 하지 않는 것을 만드는 것보다 불완전한 UI에 당황하는 것을 선호함
     * 나중에 아키텍처를 재설계해서 작은 RDS 인스턴스 하나로 주당 수백만건이 처리되게 만들었음

  생각보다 문제 해결에 많은 시간을 들이기 어려움

     * 1년간 프로그래밍에 쓴 시간 중 절반은 내가 해결하고 싶은 문제를 실제 해결하는데 썼음
     * 다른 절반은 SaaS 플랫폼을 구축하는데 사용
     * 여러 유형의 사용자 인증, 평가판, 온보딩, 팀 관리기능, 인보이스 관리기능, 수명주기 이메일 같은 SaaS 플랫폼 일들이 필요함
     * 많은 것들을 아웃소스 할 수 있음(Stripe가 없었다면 아마 구독형태로 팔지 못했을 것)
     * 하지만 항상 맘에 안드는 것들은 있고, 좀 다르게 처리하고 싶으면 직접 만들어야 함

   좋은글입니다

   라이브 서비스를 기획하고 운영하기 위한 꿀팁이네요!!

   무료 티어가 있더라도 유료 티어에 무료 트라이얼은 필요하다 이 부분이 정말 중요한 것 같아요.
"
"https://news.hada.io/topic?id=5991","벨기에, 주4일제를 승인하고 퇴근 후에 상사의 연락을 무시할 권리 부여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                벨기에, 주4일제를 승인하고 퇴근 후에 상사의 연락을 무시할 권리 부여

   - 6개월간 주4일제를 신청할 수 있고, 그 이후 연장하거나 아무런 페널티 없이 주5일제로 돌아갈 수 있음
   - 벨기에는 현재 주 38시간 근무인데, 하루에 9시간 30분씩 근무하여 4일만에 그 시간을 채우는 것
   - 직원이 20명 이상인 모든 직장은 근무시간 이후에는 회사 기기를 끄고 상사의 메시지를 무시할 수 있음
   ㅤ→ 1월에는 공무원에게 적용되었고, 이제 민간 부분에도 모두 적용

   - Bolt, 주4일 근무제 영구적으로 시행 https://news.hada.io/topic?id=5737
   - MS Japan의 주4일 근무제 실험이 생산성을 40퍼센트 향상시키다 https://news.hada.io/topic?id=851
   - 아이슬란드의 주4일 근무 시험 '압도적인 성공' https://news.hada.io/topic?id=4560
"
"https://news.hada.io/topic?id=6083","왜 RISC-V가 성공하고 있을까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           왜 RISC-V가 성공하고 있을까

     * Free 와 Freedom
     * 변화하는 시장 : 무어의 법칙이 느려지고, 머신러닝의 급격한 증가
     * RISC-V의 차별화 요소
          + 아키텍처 자체
          + 다양한 오픈소스 구현들
          + 프로세서 코어를 둘러싼 지원 코어들
          + RISC-V를 구현하고 검증하기 위한 도구들
     * 범위 확장 : 프로세서 코어를 넘어 설 수 있을까 ?
     * RISC-V는 혁신을 가능하게 하고 촉진 시켰음
          + Free 인게 업계의 한부분엔 중요했지만, 진짜 핵심은 Freedom

     * M1은 RISC-V의 상승을 예고한다
     * MIPS, 자체 아키텍처를 버리고 RISC-V로 전환
     * 애플, RISC-V 프로그래머 구인중
     * Nios V - 인텔의 RISC-V 프로세서
     * 인텔, RISC-V 멤버로 가입하고 1.2조원 파운드리 펀드 조성

   긱뉴스 댓글GNB에 따끈따끈한 댓글들 올라오는것들 잘 보고있습니다 ㅎㅎ 댓글GNB에는 올려주신 링크에 파비콘이 적용되고 있지 않아 궁금해서 문의 남깁니다 ㅎㅎ

   앗 거기에도 적용해야 겠네요. 주말에 추가해 보겠습니다~~

   하나더 눈에 띄어서요 ㅎㅎ 긱뉴스 GNB 메인페이지와 다른 GNB 페이지의 폰트가 조금 다른것같아보여 문의 또 남깁니다 ㅎㅎ;

   우왓 금방 추가되었네요 ㅎㅎ 항상 잘 보고 있습니다 감사합니다^^
"
"https://news.hada.io/topic?id=6031","가장 빠른 GIF는 존재하지 않음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           가장 빠른 GIF는 존재하지 않음

     * 애니 GIF 속도를 최대한 빠르게 하려면 ""Frame Delay""를 ""10ms""가 아닌 ""20ms""로 지정해야 함. 왜 그럴까?
     * GIF 89a부터 애니메이션이 지원되기 시작
          + 각 프레임별 딜레이를 설정 가능
          + 다음 프레임으로 넘어가기 전까지 기다리는 시간을 100분의 1초(10ms)단위로 표현
          + 0 ~ 0xffff(약 10분의 딜레이) 까지 설정 가능
     * 0을 설정하면 무슨 일이 일어날까? 스펙엔 정확한 답이 없지만 두가지를 명시
          + GIF 디코딩시에 각 프레임은 딜레이 없이 처리되어야 함
          + 딜레이 값은 0이 아닐 때만 사용 됨
          + 즉, 0으로 지정하면 ""이전 프레임과 결합되어 정적 이미지로 처리""되어야 함
               o 이러면 움직이는 부분만 저장한 프레임을 넣어서 크기를 줄일 수 있음
     * 문제는 누구도 0 딜레이를 지원하지 않는다는 것
       → GIF를 지원하는 대부분의 프로그램들은 2(20ms) 이하의 값을 그 이상으로 고정함
          + QT는 IE/FF와 맞춤 : (delay < 2 ? 10: delay) * 10
          + 크롬은 FF와 맞춤 : 번쩍이는 광고들이 0을 사용하는 것을 막기 위해, 10ms 이하로 지정한 것들은 100ms로 지정함
          + FF는 IE와 Opera에 맞춤 : 0~10 인 경우 100ms 로 조정함
          + IE 5는 Netscape가 느렸기 때문에 거기에 맞춤 : 50 이하의 경우는 100으로 고정
     * 위 코드들의 공통점은 0~1을 2로 맞추는게 아닌 10(100ms)으로 맞춘다는 것
          + 즉, 10은 100과 같고, 20이 가장 빠름

결론

     * 아무도 GIF 스펙대로 렌더링을 안 하고 있는데, 그렇게 해야할 것 같음(IMO)
     * 현재는 가장 빠른 GIF를 얻으려면 1(10ms) 대신 2(20ms)를 지정할 것
     * 모두가 제대로 GIF 스펙을 구현한다면
          + 10ms 딜레이짜리 GIF를 지원할 수 있게 됨
          + GIF 애니메이션 단일 프레임에서 256개 이상 색상 지원
          + 작은 딜레이 값을 주면 느려지는 혼란을 없앨 수 있음
          + 프레임당 업데이트된 영역만 있는 GIF를 만들어서 압축률을 개선할 수 있음
"
"https://news.hada.io/topic?id=6020","Judyrecords - 무료 미국 법원 사건 및 소송 검색 시스템","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Judyrecords - 무료 미국 법원 사건 및 소송 검색 시스템

   - 무료로 미국 전역의 6.3억개 법원 사건 및 소송 검색 가능
   - 구글 Scholar보다 100배, 미국 연방 사법부가 관리하는 공식사이트 PACER보다도 10배 많음
   - 1976/1/1 ~ 2021/11/10 사이의 790만개 특허도 모두 검색 가능
   - 일부는 Kaggle에 Dataset 으로도 제공

   국내 판례 검색 서비스
     * https://lbox.kr/
     * https://casenote.kr/

   와~ 이거 엄청난 비정형 데이터일텐데 정말 대단합니다.

   구글 처럼 깔끔한 인터페이스가 좋네요. ElasticSearch 7로 구현 되어 있다고 합니다.
   스티브 잡스의 과속 위반 딱지 https://www.judyrecords.com/record/vde11sdzw25ac
   Steven P. Jobs 라고 되어있어서 이름은 맞긴 한데 진짜인지를 모르겠네요.
   제 이름 검색했다가 2009년에 제출한 특허가 나와서 깜놀..
"
"https://news.hada.io/topic?id=6012","Files - PHP 파일 하나로 된 파일/사진 공유 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Files - PHP 파일 하나로 된 파일/사진 공유 앱

   - 서버에 PHP파일 하나만 놓으면 바로 포토 갤러리로 사용 가능
   - 파일/폴더 브라우저
   - 포토 갤러리 : 프리뷰 이미지 캐싱으로 빠른 로딩 지원
   ㅤ→ IPTC, EXIF, GPS 지도 보기 지원
   - 인증된 사용자만 접근 하게 설정 가능
   - 텍스트/코드 편집 기능(구문 강조 지원)
   - 기본 사용은 무료, 팝업 제거 및 몇몇 기능은 유료($39)
   ㅤ→ 파일 업로드, 파일/폴더 생성 및 삭제등 관리 기능. 폴더 압축 다운로드, 코드/텍스트 편집기
"
"https://news.hada.io/topic?id=5990","2022년 버전의 iPod 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2022년 버전의 iPod 만들기

   - 5.5세대 구형 iPod Video/Classic을 DIY
   ㅤ→ 음질이 뛰어난 wolfson DAC을 사용한 마지막 세대
   - HDD를 iFlash Quad(4개의 SD카드 삽입가능)로 교체
   ㅤ→ SSD보다 저전력에 발열도 작음. 크기도 더 소형
   - Rockbox 를 설치하고 FreshOS 테마 적용
   ㅤ→ iTunes가 필요 없어지고, 그냥 외장하드로 마운트해서 파일 복사 가능
   ㅤ→ Doom을 플레이하거나 맥북 볼륨을 컨트롤하는 등의 기능도 가능

   Rockbox - 구형 음악플레이어용 무료 펌웨어 https://news.hada.io/topic?id=680
"
"https://news.hada.io/topic?id=6021","예전엔 엄청 어려웠지만, 지금은 쉬워진 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        예전엔 엄청 어려웠지만, 지금은 쉬워진 것들

     * SSL인증서 → Let's Encrypt
     * Concurrency → async/await
     * CSS로 중앙정렬 → flexbox/grid
     * 빠른 프로그램 작성 → Go
     * 이미지 인식 → 전이학습(Trasfer Learning)
     * 크로스플랫폼 GUI 작성 → Electron
     * VPN → Wireguard
     * 리눅스 커널에서 내 코드 실행 → eBPF
     * 크로스 컴파일 → Go/Rust는 기본 지원
     * 클라우드 인프라 설정 → Terraform
     * 개발환경 구성 → Docker
     * 쓰레드와 메모리 안전하게 공유하기 → Rust

호스팅 서비스와 관련된 것들

     * CI/CD → GitHub Actions/CircleCI/GitLab..
     * 프론트엔드 코드 작성만으로 유용한 웹사이트 만들기 → 다양한 ""서버리스"" 백엔드 서비스
     * 신경망 학습 → Colab
     * 웹사이트를 서버에 배포 → Netlify/Heroku..
     * DB 운영 → RDS 같은 호스팅 서비스
     * 실시간 웹 어플리케이션 → Firebase
     * 이미지 인식 → Teachable Machine 같은 ML 호스팅 서비스

아직 해보진 못했지만 멋져 보이는 것

     * Cryptography → libsodium 같은 라이브러리
     * 웹서버가 푸시하는 실시간 업데이트 → LiveView/Hotwire
     * 임베디드 프로그래밍 → MicroPython
     * 비디오 게임 작성 → Roblox/Unity
     * 브라우저에서 GPU기반으로 실행되는 코드 작성 → Unity ?
     * LSP(Language Server Protocol)를 이용한 IDE 도구 개발
     * Interactive theorem provers
     * NLP → HuggingFace
     * Parsing → PEG 또는 parser combinator libraries
     * ESP 마이크로 콘트롤러
     * 배치 데이터 프로세싱 → Spark

특정 언어 관련

     * Rust 에서 non-lexical lifetimes
     * IE에서의 CSS/JS 지원

   새로운 기술은 등장 초기에는 마법 처럼 신기하고 어렵게 느껴지지만, 누군가의 노력으로 쉽게 포장되어 진입장벽이 낮아지고, 이런 순환이 인류가 더 많은 가치를 만들 수 있게 돕는군요.

   공감이 많이 되는 글입니다.
   모르는 것들도 많았네요. 하나씩 찾아봐야겠습니다.

   그 외에도 다양한 것들이 얘기되네요 https://news.ycombinator.com/item?id=30406201
   정말 원하는 것을 만들기 쉬워지긴 했습니다.
   반대 리스트도 재미나네요. ""예전엔 쉬웠지만, 지금은 어려워진 것들""
   - 사용자 컨텐츠가 들어간 모든 웹사이트 운영 → 스팸이 너무 많음
   - 보안에 관련된 모든 것 → 이제 전체 인터넷은 포트스캔 되고 다양한 공격을 받음
   - 스크린에 무언가를 그리기 → 예전엔 간단했지만, 이젠 GUI를 구성해야 함
   - 특정 메모리 영역에 접근 하기 → 수많은 가상화들
   - 모든 사람들이 실행 가능한 엡 만들기 → iOS/Android/맥/리눅스/윈도우/웹..
   - 자신만의 이메일 서버 운영하기 → 이메일 수신은 더 쉬워졌지만, 전송은 자신을 인증받아야 하고 대형 서비스들에게 블록당하지 않으려면 엄청난 노력을 해야 함
"
"https://news.hada.io/topic?id=6070","MIT 테크놀로지 리뷰 ‘2022년 10대 기술’ 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MIT 테크놀로지 리뷰 ‘2022년 10대 기술’ 발표

    1. 경구용 코로나19 치료제 ‘팍스로비드’
    2. 실용적인 핵융합로
    3. 비밀번호의 종말
    4. 단백질 접힘 예측용 AI
    5. 지분증명
    6. 오래 지속되는 전력망용 배터리
    7. 인공지능을 위한 합성 데이터
    8. 말라리아 백신
    9. 탄소 제거 공장
   10. 코로나 변이 추적

   한국 페이지는 링크가 깨진 것 같습니다 😅😅

   아.. 해당 기사를 내리고 신청을 받는 형태로 바꿨나 보네요 ㅠ

   MIT-테크놀로지-리뷰-2022년-10대-기술-발표

   이게 URL 이었는데..

   2022년-미리-신청해보는-mit-10대-미래-기술

   요렇게 바뀌었습니다.

   혼돈을 피하기 위해 기사링크는 원문 주소로 바꿔두겠습니다.

   원본 기사가 살아나서 다시 돌려두었습니다.
   이제 한국어 페이지에도 각 10개 아이템에 대한 상세 기사 번역 링크도 포함되었습니다.

   상세 항목에 대한 기사는 아직 번역이 안되었네요. 원문 기사에서는 보실 수 있습니다.

   https://technologyreview.com/2022/02/…

   한국어 기사랑 원문 기사의 기술 게재 번호가 다른게 눈에 띄네요. 왜 바꾸셨을까요? ㅎㅎ
    1. The End of Passwords
    2. Covid Variant Tracking
    3. A Long-lasting Grid Batteries
    4. AI for Protein Folding
    5. Malaria Vaccine
    6. Proof of Stake
    7. A Pill for Covid
    8. Practical Fusion Reactors
    9. Synthetic Data for AI
   10. A Carbon Removal Factory
"
"https://news.hada.io/topic?id=6062","Show GN: 토스페이스"tossface"와 다른 유니코드 벤더 이모지 비교 페이지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: 토스페이스""tossface""와 다른 유니코드 벤더 이모지 비교 페이지

   토스에서 최근 ""토스페이스"" 를 공개했습니다
   토스에서 더 쉽게 의미를 전달하기 위해 이모지를 만들었고, unicode를 이용해서 사용할 수 있도록 폰트로 만들었습니다

   TossFace with Full Emoji List 프로젝트는 토스페이스가 다른 유니코드 이모지와 어떤 차이가 있는지 보여주기 위한 프로젝트입니다

   Full Emoji List v14.0 에서 토스페이스를 불러와 렌더링하는 방식으로 만들었습니다.

   이거 flag: Taiwan 와 flag: Samoa 가 바뀐 것 같습니다. 처음에는 비교 사이트 만든 분이 실수 한 줄 알았는데, 크롬 개발자도구를 통해 확인해보니 TossFaceFontMac.ttf 자체의 문제로 보입니다.

   토스에서 정식 공지가 올라왔습니다
   트위터에 이미지 공지라 링크만 첨부합니다
   https://twitter.com/toss__official/status/1498835174037266434?s=21

   안녕하세요 작성자입니다

   ""토스페이스"" 자체보다 토스페이스 홈페이지를 살펴보면서 느낀점들 때문에 이 프로젝트를 시작했는데요
   이 프로젝트를 하면서 느낀점을 적어두었습니다
   medium에서 보려면 이 링크를 눌러주세요
    1. 토스페이스는 홈페이지에서 전체 작업 목록을 볼 수 없습니다 (3600개라고 하지만, 위 페이지에서도 1800여개밖에 볼 수 없습니다)
    2. 토스페이스 사용처가 macOS, 그리고 adobe, ms office 등이라고 명시되어있습니다
    3. 토스페이스를 받기 위해 너무 많은 개인정보를 입력해야합니다. 그것도 채용 활용 목적으로요

   윈도우에서는 설치 못한다는 거 보고...뭔가 그냥 자랑용으로 만들었나? 싶었네요.

   해당 논쟁 말고 좀 다른 부분을 하나 짚고 넘어가고 싶은데...
   토스페이스 저작권 안내를 보면 ""아래 경우를 제외하고 영리적/비영리적 목적으로 사용 가능하다""고 명시되어 있어요.
     * 토스페이스 그 자체를 유료로 판매하는 경우
     * 토스페이스 및 이를 활용한 2차적 저작물에 대하여 상표권, 디자인권 등 지식재산권등록을 진행하는 경우
     * 토스페이스 및 이를 활용한 2차적 저작물을 전시회 ∙ 공모전에 출품하는 경우
     * 토스페이스를 소스코드로 변환하여 이를 복제, 전송, 공중에 게재하는 경우
     * 사회 미풍양속을 저해하는 방식으로 토스페이스를 이용하는 경우

   그런데 실제 효력이 있는 건 영어로 된 라이선스 전문인데요, 해당 라이선스는 OFL(Open Font License)입니다. 간단히 설명드리면 위에 있는 금지 사항 중 첫 번째밖에 커버를 못 쳐요. 두 번째의 일부는 법상으로 커버가 되겠지만, 나머지는 라이선스 상 단순 허용되는 부분입니다.

   스크린리더가 special font 를 이상하게 읽는다는 내용을 본적 있는데, 이런 독자적인 이모지도 문제가 있어보이네요. 눈으로 보이는건 화상회의 모니터인데, tts 는 서로 껴앉는 사람들이라고 말해주네요... 이게 옳은 일인가요.

   *껴앉는 오타가 있네요. 양해 바랍니다

   토스가 토스했군요. 시대정신을 너무나 잘 반영하는 기업문화라고 생각합니다.
   그럼에도 불구하고 UX가 너무 좋습니다. 반만큼도 따라하는 한국기업 없다고 생각합니다.
   이 끝이 어디까지일지 궁금합니다.

   토스는 대체로 하고싶은게 있을 때 법과 제도를 무시하는 경향이 있는데 솔직히 좀 무섭습니다. 팬이 많은 토스가 토스의 말로 '혁신'을 위해서는 법과 제도를 무시해도된다는 문화를 조장하는 것 같아서요.

   물론 위의 법과 제도와 이번 이모지와는 좀 다르긴 합니다.

   이 말씀에 상당히 공감합니다.

   ""왜 사람들은 tossface에 대해 분노할까""에 대해서 개인적인 생각을 써 봅니다.

   사람들이 (여기서는 프론트 개발자+디자이너+기타 폰트를 자주쓰는 사람들) 그동안 암묵적으로 지켜왔던 ""상호연결성""을 해치는 행동을 했기 때문이 아닐까 싶습니다.

   솔직히 까놓고 얘기해서 토스페이스 폰트를 안쓰면 그만입니다. 하지만 소위 대한민국의 대표 IT 회사라는 ""네카라쿠배당토""에 포함된 토스가 뭔가 자의적인 해석을 하기 시작하면 다른 회사들도 다 따라하지 않을까 하는 걱정이 드는 것인거죠.

   싫어했던 사람이 잘못된 선택을하면 고소해 하겠지만, 좋아했던 사람이 잘못된 선택을 했을 때는 실망감이 크 듯, 저를 포함해서 토스도 사람들이 많이 좋아했던것 같습니다. 은행을 개혁할 때도, 증권을 개혁할 때도 일부에서는 너무 돈을 쉽게 생각하는것 아니냐며 우려도 컸지만 그래도 응원했던것은 그 결과가 모두에게 상호연결성을 더 강화해주기 때문이었다. (기존 금융기득권 엿먹어라 라는 통쾌함+진작좀 이렇게 하지 같은것도 있었고요.)

   하지만 이번 tossface는 그동안의 행보와 다르게 ""상호연결성""을 해치는 선택이 아니었나 싶습니다. 수천개가 넘는 이모지를 만든건 정말 잘 했고요, 칭찬도 하고싶지만 자의적인 해석을 한 수개의 이모지는 다시 원래대로 돌려놓고, 시간이 오래 걸리더라도 Unicode Inc에 제안을 하는게 어떨까 싶네요.

   저 이모지를 공개하기 전에 분명히 논란이 될 것에 대해 내부에서 우려가 나왔어야 했는데, 토스페이스 홈페이지를 보면 그 부분에 대한 제대로 된 설득이 없는거 보면 그 부분에 대한 논의가 이루어지지 않았던것 같습니다.

   저도 토스가 힘들더라도 제대로 된 결정을 내리는 문화를 가지고 있을 거라고 맹신해 왔는데...이번에 환상이 좀 깨지게 되네요.

   코로나 시국에 맞춰서 변화한 것들이 썩 마음에 들진 않는군요. 코로나가 끝나면 롤백해야할텐데요. 특히 화상 회의는 기술 발전으로 사라질 수 있지만. 끌어안기가 사라질 것 같지는 않는데 그걸 왜 화상 회의로 바꿨는지는 잘 모르겠어요. 정말 마스크 쓰기가 말하는 걸 Replace 할 수 있고, 화상 회의가 끌어안는 걸 Replace 할 수 있는가에 대해서 회의감 밖에 들지 않습니다.

   2달러 ($ 달러사인) 를 원화(W) 표시로 바꿔버리네요.

   토스 입장을 감히 대변해서 몇 자 적어볼게요. 관련 업계 종사자가 아닙니다만, 대략 토스의 심정은 이러하지 않았을까 싶습니다

   Disclaimer: 토스가 잘했다는건 아닙니다. 다만 지금 나오는 논란을 예상했을 것 같고 만약 그렇다면 이러한 의식의 흐름이 있지 않았을까~ 하는 지점입니다
    1. 얼마나 많이 ""자의적 해석""이 들어갔는가

   여러 사람이 지적해주신 '유니코드의 실제 의미 (영단어)'와 '토스페이스의 그림'이 불일치하는 경우가 그렇게 많지 않다고 생각합니다. 이들이 만든게 3000개가 넘는다고 알고 있는데 그 중에 문제가 되는 것은 제가 확인한게 11개, 그리고 예상컨대 30개 이하입니다. 이 절대적 양에 대해서 분명히 해두면 좋겠습니다.

   한 마디로, 문제가 되는 유니코드만 정확히 집어서 논의했으면 좋겠습니다. 일부 유니코드가 잘못 표현되었다고 모든 토스페이스 폰트가 문제아 취급을 받을 필요는 없습니다.
    2. (이러한 '일부' 의미가 바뀌어버린 유니코드에 대해) 왜 새로 정의하는 방식을 택하지 않았나

   토스는 항상 더 빠른 길을 택하는 경향성이 있는 것 같습니다. 연초에 있었던 마이데이터 사건도 같은 맥락으로 보여지고요. 유니코드 협회와 컨택하여 다음 스펙에 추가하는 것이 너무 오래걸린다고 판단한 것으로 보입니다. 어떤 과정을 통해서 새 유니코드가 추가되는건지 확인하려고 했는데 잘 안나오네요. 혹시 아는 분은 지식을 나눠주세요 ㅎㅎ https://www.unicode.org/versions/Unicode14.0.0/

   한 마디로, 토스가 토스한 걸로 보입니다.
    3. 유니코드 스펙을 왜 무시했나

   트위터나 클리앙 등지에서 가끔 이런 표현을 보는데 정확히 어떤 스펙을 무시한건지 견해를 여쭙고 싶습니다. 스펙이 너무 방대해서... 같이 얘기를 더 해봅시다! https://unicode.org/versions/Unicode14.0.0/…

   유니코드의 상호 운용성에 대해서 말씀하신 분이 있는데, 저도 유니코드에 조예가 깊은 건 아닙니다만 트위터에 올라온 한 분의 글을 보니 일부 운영체제에선 특정 유니코드를 검열처리한 사례도 있고, 총을 물총으로 바꿔서 표현하는 것도 엄밀히 말하면 잘못된 표현인 듯 합니다.

   한 마디로, 이 부분에 대해선 제가 잘 모르겠고 조금 더 엄밀한 논의가 활성화되면 좋겠습니다.
    4. 왜 슬랙이나 디스코드같은 커스텀 이모지 시스템을 쓰지 않았나

   타 서비스에서 사용해주길 바란 것 같습니다. 슬랙이나 디스코드는, 다들 아시겠지만, 해당 프로그램이 아니면 커스텀 이모지를 보여줄 방법이 없죠.

   한 마디로, 널리 퍼지고 사용되길 바란 것 같습니다.

   Disclaimer again: 어디까지나 개인 입장에서 상상해본 내용이고 토스의 공식적 입장이 아닙니다. 또한 저는 무조건적으로 토스를 찬양하는 사람도 아니며, 이 글은 단지 얘기를 좀더 디테일하게 활성화하고자 꺼내본 타래입니다. 저에게 감정을 넣어 비난하시면 무섭습니다 T.T

   추신. galadbran 님께 - 다른 분들이 지적한 부분은 토스페이스 공식 소개 페이지에 나온 샘플의 일부입니다. 위 show GN 링크에서 일일이 찾은게 아니예요. 참고: https://toss.im/tossface

   너무 선의위주로 해석하시는게 아닌가 싶습니다.

    1. 얼마나 많이 ""자의적 해석""이 들어갔는가

   3000개 씩이나 이모지를 만들어서 배포한 점은 대단하다고 인정하지만, 제 입장에서 문제의 10개 정도도 이모지로 채택하는데 거부감을 느끼게 하기에는 충분했다는거죠. 무슨 말이냐면 그 문제의 10개 정도를 아에 삭제하고 내놨으면 사람들이 바로 이모지를 설치해서 썼을 사람들이 훨씬 많았을 거라는겁니다.

     정확히 어떤 스펙을 무시한건지 견해를 여쭙고 싶습니다.

   토스의 경우 ""특정 유니코드를 검열처리한 사례"" 나 ""총을 물총으로 바꿔서 표현하는 것""과 다른 차원의 표준 거부가 있습니다.
   본문 링크를 보시면 아시겠지만 적어도 이모지 표준은 해당 코드의 이름이 정의되어있습니다.
   예로 들면 표준에 ""floppy disk"" 라고 분명히 명시되어있는데 클라우드로 바궜죠.
   총을 물총으로 바꾼 사례는 대상을 순화한 것이라고 볼 수 있고, 이모지를 아에 표시하지 않는 경우(검열)은 그나마 낫습니다. 어차피 이모지 표준 자체가 너무나도 방대해서 모든 이모지를 구현할 수도 없으니깐요.
   하지만 저렇게 대상 자체를 바궈버리면 미스커뮤니케이션을 의도적으로 유발한다고 볼 수 있습니다. 이건 ""불일치"" 정도가 아니에요.

     한 마디로, 널리 퍼지고 사용되길 바란 것 같습니다.

   저는 디자인팀의 홍보목적으로 공개했다고 믿고 싶습니다. 말씀처럼 공공의 이익을 위해서 공개했으면 논란이 일어날 법한 부분에 그저 의도적으로 대상을 바궈버리고 ""그때는 맞고, 지금은 다르다"" 라고만 말하지 않고 이모지 시스템의 구조적 문제에 대한 제대로 된 설득을 하려고 했을겁니다.

   저는 공공의 이익을 위하지 않았다고 비판하고 싶지는 않고, 디자인팀 홍보목적의 측면에서는 너무나도 미려하게 잘 만들었네요.
   단지 이런 의도적으로 바꾼 몇몇 이모지 때문에 몇 천개 씩이나 만든 디자인팀 노고가 희석되는게 너무나도 안타깝네요.

   말씀해주신 부분 전부 공감합니다. 제가 일부러 한 쪽 편을 든 것도 사실이고요.
   좋은 말씀 해주셔서 감사합니다.

   마지막으로 이모지 표준에 대해 강조해 드리자면, ""사랑"" 같이 자의적 해석이 들어갈 수 있는 추상적인 이름이 존재하지 않고 모두 구체적인 이름을 가지고 있다는 점에 대해 생각해 봐야 합니다.
     * 신규 이모지 제안 지침
       https://www.unicode.org/emoji/proposals.html
     * 이모지 표준 및 디자인 가이드라인은 이 곳에서 확인 할 수 있습니다.
       https://unicode.org/reports/tr51/#Design_Guidelines
       읽어보시면 이모지의 방향과 상호운용성에 대해서도 설명하고 있습니다.
     * 덧붙이자면 유니코드 표준에는 개인용 문자를 사용할 수 있도록 PUA 코드영역을 남겨두었습니다. 표준에 등록하기 힘들었다면 이 영역을 활용하였어야 했습니다.
       https://en.wikipedia.org/wiki/Private_Use_Areas

   PUA는 처음 들었네요. 감사합니다.

   선생님 제가 ∫ 를 S 로 의미를 바꿔놓고 토스했다라고 할 수는 없는 거 같아요. 심볼은 심볼로 존재해야합니다.

   앞 문장의 의미를 잘 모르겠습니다.

   여러번 수정하다 보니 3번 항목에서 타 운영체제의 사례를 얘기한게 굉장히 변명처럼 써있네요. 요지는 ""유니코드의 어느 스펙을 무시했는지 디테일하게 얘기하면 좋겠다"" 입니다 (_ _)

   저는 people hugging 을 자의적으로 해석 한 부분이 아주 별로네요. 힘들고 지칠때 더욱 안아주어야 하는데 말입니다.

   트위터에서 논란이 있어서 열심히 들여다 봤는데 저는 다른 부분을 못찾았어요. 유니코드 이모지가 어마어마하게 많네요… 다들 다른 걸 어떻게 찾으신거죠…

   토스 페이스 메인에 “ 그때는 맞고, 지금은 다르다” 참조하시면 될 것 같습니다.

   유니코드 스펙을 그냥 무시해버리네요. ㄷㄷ

   코드의 의미를 바꾸는 정도는 괜찮은데 (총을 물총으로 바꾼다던가), 아에 대상 자체를 바궈버렸네요.
   유니코드는 무엇보다 상호운용성때문에 쓰는건데 이런 걸 경고도 없이 공개하는 것이 이해가 안되네요.

   현재 이모지가 자신들의 요구사항에 맞지 않는다면 새 이모지를 제안을 하던가, 아니면 슬랙처럼 커스텀 이모지 같은 시스템을 만들어서 쓰면 될텐데요. 토스 많이 좋아했는데 이번에는 좀 실망스럽네요.

   토스페이스 https://toss.im/tossface

   토스페이스가 토스내에서 쓰기엔 문제가 없을 것 같은데.. 기존 코드에 있는 모양 자체를 바꾼게 몇개 있어서 다른 데에서 가져다 쓴다면, 공개해주신 페이지 보고 확인하고 가져다 쓰셔야 좋을 것 같네요. 아래는 Show 등록자님이 아닌 토스페이스에 대한 우려입니다.


   예를 들어 마작패중에 🀄 을 ""윷놀이"" 로 바꾸셨던데.. 이거 1F000~1F02F 구역 총 48개의 마작패가 하나하나 실제 마작룰을 설명할 때도 쓰이거든요.

   게다가.. 💾 를 ""클라우드"" 로, 📼 를 ""유튜브랑 비슷한 마크""로 바꾸기도 하고요. 올드한 표시는 그 나름대로의 의미가 있을텐데요.

   아예 새로운 코드로 제안을 했다면 모를까, 기존에 쓰던 이모지를 바꾸신 것들은 솔직히 조금 이해하기 어렵습니다.

   ""다들 마작하러 놀러가요 🀄"" 라고 채팅을 했더니 윷놀이가 되어버리는;;
   ""musical score(악보)"" 를 뮤직 플레이어로 바궈버리고
   ""people hugging"" 을 화상회의로 바궈버렸네요....전체적으로 좀 심각해보입니다.
"
"https://news.hada.io/topic?id=6078","EO 김태용 대표의 기업론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             EO 김태용 대표의 기업론

   ✏️ EO 김태용 대표의 기업론

   한국에 스타트업이랑 조금이라도 연관 있는 사람이라면 모르기 힘든 EO. 작년에 진행했던 유니콘 하우스도 사실은 포맷이 그렇게 새로운 것은 아녔는데도 기대 이상으로 재미있게 시청했다. 그러고 보니, EO를 만든 김태용이란 사람은 어떤 사람인지 전혀 몰랐다. ""말 잘하는 스타트업계 인싸?""

   그러다가, 최근 디스코드 채널를 만들고 ""예비 창업자를 위한 강의""를 진행한다고 해서 가벼운 마음으로 참가. 기대 이상으로, 정말 재미있게 오랜만에 가슴이 두근거리면서 이야기를 들었다. 미국/영국에서 꽤 많은 기업가들의 이야기를 들어본 나인데도, 김태용 대표의 스토리는 콘텐츠가 있었고, 많은 사람들에게 영감을 줄 수 있다는 생각이 들었다.

   알고 보니, 김태용 대표는 창업을 2-3번 그리고 EO가 첫 번째 창업이 아닌 연쇄 창업가였다. 그리고 첫 번째 창업에서는 꽤 만족스러운 성과를 얻은 듯했고 본인이 ""짱""인 줄 알았다고 한다. 그 첫 번째 창업에서 배운 인사이트부터 그가 주목하는 성공한 기업가들의 공통점, 그리고 EO의 해외 전략까지...

   링크: https://saconyreview.glivery.co.kr/p/2276919779089
"
"https://news.hada.io/topic?id=6009","DIAL - 폰에서 TV를 찾고 앱을 실행할 수 있게 해주는 프로토콜","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 DIAL - 폰에서 TV를 찾고 앱을 실행할 수 있게 해주는 프로토콜

   ""DIscovery And Launch""
   - 세컨드 스크린 기기(모바일)에서 첫번째 스크린(TV, Set-Top 등)을 찾고 앱을 실행하게 해주는 N-Screen용 프로토콜
   - 유튜브와 Netflix가 같이 개발
   ㅤ→ 유튜브의 ""Play on TV"" 버튼이 이를 통해서 동작

   공개된지 꽤 오래된 기술인데, 다른거 보다가 눈에 띄어서 올려봅니다.
   DIAL: Netflix의 개방형 N-Screen 프로토콜 기술 규격
   - https://itfind.or.kr/WZIN/jugidong/…
"
"https://news.hada.io/topic?id=6059","Tinder의 불투명/불공정한 가격 책정 알고리듬은 사용자에 따라 5배까지 차이가 난다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Tinder의 불투명/불공정한 가격 책정 알고리듬은 사용자에 따라 5배까지 차이가 난다

     * 구독형인 Tinder Plus는 한개의 국가내에서도 최대 31가지의 다른 가격을 가지고 있으며, 누군가는 5배의 가격을 내기도 함
       → 네덜란드에선 가격이 $4.45 ~ $25.95 로 다름
     * 6개국을 조사해 보니 30~49세가 18~29세보다 65.3% 더 비쌈
       → 조사한 국가 중 네덜란드/한국/인도가 가장 가격 차이가 컸음
       → 이 나이별 가격 차등 때문에 미국에선 $24M 소송을 당했음

   같은 내용에 대해서 Consumer Reports 기사에서는 Tinder가 이렇게 30~40대 이상에 대해 높은 가격을 유지하는 것은 미국에선 중단했으며 전세계적으로도 중단할 것이라고 얘기 했다고 하네요.
   https://consumerreports.org/consumer-protection/…

   근데 이 컨슈머 리포트의 글 내용 중간에 큰 글자가 매우 슬프네요..

     나이는 숫자에 불과하지만.. 데이팅 앱에서는 아님
"
"https://news.hada.io/topic?id=6085","구글, 사용자명/암호만 사용하는 보안 수준이 낮은 앱 이제 이용 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 구글, 사용자명/암호만 사용하는 보안 수준이 낮은 앱 이제 이용 불가

   2022년 5월 30일부터 ​사용자 이름과 비밀번호만 사용하여 Google 계정에 로그인하도록 요청하는 서드 파티 앱 또는 기기의 사용을 더 이상 지원하지 않음
"
"https://news.hada.io/topic?id=6056","트위터가 자연언어 쿼리로 데이터 인사이트 도출하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     트위터가 자연언어 쿼리로 데이터 인사이트 도출하는 법

     * 내부 비즈니스 담당자들이 다양한 데이터를 자연어로 쿼리할 수 있는 Qurious라는 차세대 시스템을 구성
       → ""하루에 트윗이 몇 개 정도 나오나요?""
     * 아키텍처
         1. 슬랙/웹앱에서 질문 가능
         2. 질문은 구글 클라우드 로드밸런서/NgRoutes 통해서 GKE에 있는 Qurious앱으로 전송
         3. 질문은 구글의 Data QnA API로 보내짐
         4. Data QnA는 사용자 질문을 해석하여 SQL 쿼리로 리턴
         5. 만들어진 SQL은 BigQuery로 보내서 실행
         6. Egress Proxy가 Slack 앱으로, LB가 WebApp 으로 실행 결과를 전달
         7. 질문과 답변은 GCS/CloudSQL 에 저장
"
"https://news.hada.io/topic?id=6075","Wordle 잘하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Wordle 잘하는 법

     * Jupyter Notebook 으로 정리
     * 2번째 시도에서 맞췄다면 나는 잘하는 걸까? 아님 운이 좋은 걸까?
     * 처음에 가장 좋은 단어는 BRUTE/CHANT/FILET 이지만 그나마 2% 밖에 되지 않음
     * HANDY,SWIFT,GLOVE,CRUMP 4개의 단어를 사용하면 100% 6번 안에 맞출 수 있음
          + Christos는 ARISE, CLOMP, THUNK, BAWDY를 선택했는데 승률이 99%이기 때문에 100%를 위해서 위의 단어로 바꾼 과정을 계산식과 함께 상세히 정리

   정보이론과 엔트로피를 이용해서 wordle 을 분석한 영상 도 재밌습니다
"
"https://news.hada.io/topic?id=6071","AWS Lambda, .NET 6 런타임 지원 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      AWS Lambda, .NET 6 런타임 지원 시작

     * 이제 C# 10 및 F# 6 으로 람다 개발 가능
     * x86 및 Arm/Graviton2 프로세서 지원
     * AWS Toolkit for Visual Studio 2022 / Amazon.Lambda.Tools / AWS SAM CLI 에서도 모두 지원하게 업데이트
"
"https://news.hada.io/topic?id=6073","딥마인드 MuZero AI가 유튜브 비디오 압축을 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     딥마인드 MuZero AI가 유튜브 비디오 압축을 개선

     * MuZero가 유튜브와의 협업으로 오픈소스 VP9 코덱의 비디오 압축을 최적화
     * AlphaGo 나 후속버전인 AlphaZero는 모두 게임 규칙을 사전학습했음
     * 그 후속인 MuZero는 룰에 대한 지식이나 학습없이도 체스,바둑 등을 마스터 가능
     * 유튜브 영상에 강화학습을 적용함으로써, 동영상 품질 저하없이 평균 4%의 전송 데이터가 감소

   위 글의 상세 구현 내용은 AiTimes 기사에서 잘 번역해 주셨네요.
     * 딥마인드 바둑 기사 '뮤제로'...유튜브 비디오 압축 기사로 변신
     * 딥마인드, 알파제로 뛰어넘어 학습도 규칙도 필요없는 혁신적인 AI '뮤제로(Muzero)' 발표
"
"https://news.hada.io/topic?id=6063","GitHub의 보안 권고 데이터베이스가 오픈소스로 공개 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     GitHub의 보안 권고 데이터베이스가 오픈소스로 공개

     * 깃헙이 각종 보안 권고사항을 모아서 관리하던 GitHub Advisory Database를 퍼블릭 레포지토리에 공개
       → 세계 최대의 소프트웨어 취약점 데이터 베이스
     * 누구나 볼 수 있고, 기여하는 것도 가능
       → 보안 권고를 쉽게 추가할 수 있는 인터페이스도 추가
"
"https://news.hada.io/topic?id=6103","유니텔 서비스 종료 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             유니텔 서비스 종료 예정

   1996년부터 시작하여 오랜 기간을 거쳐온 4대 PC통신 서비스 중 하나인 유니텔이 2022년 6월 30일 서비스가 종료될 것임을 알리는 공지가 게재되었습니다.

     유니텔 서비스가 2022년 06월 30일 종료됩니다.

     안녕하세요. 유니텔입니다.
     먼저 오랜 기간 동안 유니텔을 이용해주신 고객 여러분들께 진심으로 감사의 말씀을 전합니다.

     유니텔은 1996년 서비스를 시작하여 웹 포털사이트로 변경 후 현재까지 고객님들께 서비스를 제공하여 왔으나, 부득이하게 서비스를 종료하게 되었습니다.
     그동안 유니텔을 이용해 주신 고객님들께 진심으로 감사드리며,
     서비스를 지속하여 제공해드리지 못하여 아쉽고 죄송한 마음을 금할 수 없습니다.
     고객님들의 너그러운 양해를 부탁 드립니다.

     유니텔은 그동안 고객님들의 자료에 대한 백업 기간을 충분히 제공해드리기 위해 최선을 다하겠습니다.
     기존에 수신·발신하셨던 메일은 PC로 백업하여 다운로드 받으실 수 있습니다.
     아래 일정을 참조하시어, 서비스 종료에 따른 피해가 없으시길 바랍니다.

     서비스 종료로 인하여 고객님들께 불편함을 드리게 되어 양해 부탁 드립니다.

   아직까지 살아있었다는게 더 놀랍네요.. 전 하이텔/천리안 쪽만 주로 써서 ㅎㅎ
   요즘은 4대 PC통신이라고 하면 이름도 모르는 분들이 더 많으실 듯.
"
"https://news.hada.io/topic?id=6032","Flutter가 가장 인기 있는 크로스 플랫폼 모바일 SDK인 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Flutter가 가장 인기 있는 크로스 플랫폼 모바일 SDK인 이유

     * 스택오버플로우에 올라오는 질문 수로 트렌드를 그려보면 2020년부터 Flutter가 React-Native를 추월
     * 2022년 현재 SO 전체 질문의 2.8%가 Flutter 관련, React-Native는 1.4%

왜 모바일앱 개발자들이 Flutter를 좋아할까?

     * 플랫폼에 전혀 구애받지 않음 : UI도 Skia엔진으로 플랫폼 특정 UI컴포넌트를 사용하지 않음
     * 앱 개발을 단순화하고 빠르게 만듬
     * 배우기 쉽고 사용하기 쉬움
     * 훌륭한 확장성(Scale) : 백엔드로 Firebase를 사용
     * 뛰어난 사용자 경험 제공

Flutter 사용의 단점은?

     * 앱 바이너리 사이즈가 큼
     * 써드파티 라이브러리 부족
     * 플랫폼 제한 : 아직 watchOS, tvOS, Apple Carplay 등은 미지원
     * Dart 언어를 배워야 함
     * iOS보다 Android에서 더 좋음

Flutter의 미래는?

     * 지난 3년간 사용량이 폭발적으로 증가한 후 Flutter의 시장 점유율은 정체되기 시작
     * 하지만 이게 Flutter가 사라지는 신호라고 생각해서는 안됨
     * 이 인기에 힘입어 구글은 Flutter의 문제들을 해결 할 것(바이너리 크기를 줄이는 등)이며, 써드파티들도 많아질 것
     * Flutter의 단순성과 강력함 때문에 점점 더 많은 개발자들이 사용하게 될 것
     * Flutter를 대체할 새롭고 트렌디한 도구는 나오겠지만, Flutter의 전망은 밝음

   개인적으론 Dart 가 js/ts 보다 개발경험이 좋았습니다. 환경 구축이나 빌드시스템들에 있어서 훨씬 깔끔하다는 느낌.

   구글 트렌드 기준으로도 Flutter 가 RN 의 거의 두배 정도 되네요. 언제 이렇게 됐지!?

   https://trends.google.com/trends/explore/…

   근거가 매우 잘못된거 같아요.
   스택오버플로우 특성상 새로나온 기술일 수록 새로운 질문은 많을 수 밖에 없는데 말이죠...;;

   플러터에 러스트 바인딩해서 아주 잘 쓰고 있습니다.

   RN 을 밀고 있는 입장에선 좀 슬프네요 :'(

   내년쯤이면 모바일/데스크탑 크로스플랫폼 구도가 flutter vs maui vs react-native 가 되려나요..
   c++/c#을 주력으로 쓰고 있어서 maui가 좀 더 빨리 흥했으면 좋겠네요 ㅋㅋ

   자마린이 생각나네요 ㄷㄷ

   자마린은 폭망이라고 보면 되는 거죠?
   정말 한참 밀때는 미래의 대세일거다 생각했는데

   마소가 사고 잠잠해졌는데 다시 올릴준비 하려나 모르겠네요.

   https://docs.microsoft.com/ko-kr/xamarin/get-started/what-is-xamarin

   말 그대로 크로스플랫폼은 크로스플랫폼으로서의 용도가 있다고 생각합니다.
   ""이거 하나면 모든게 끝나!"" 하는 건 이제 현실에선 나올수 없고, 어떤 상황에 있는 지에 따라 선택은 달라져야죠.
   인력이 모자란 스타트업 초기에는 Flutter/React-Native/Ionic 같은게 도움이 될 수도 있고,
   자원이 풍족해지면 네이티브로 전환하는 것도 한 방법이고요.

   요즘 보면 Flutter 보다 React-Native 가 구인/구직 시장에서는 더 많이 보이는 것 같지만..
   이건 SO에 올라오는 질문이 구인/구직 보다 조금 더 앞선 트렌드이기 때문인 것 같아요.
"
"https://news.hada.io/topic?id=6067","한컴 오피스 보안 버그","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              한컴 오피스 보안 버그

   시스코의 Talos가 발견한 보안 문제점

   Hancom Office의 HwordApp.dll에서 발견된 문제로 메모리 관련하여 보안 결함 보고가 있었음.

   한컴 오피스 2020 사용자들은 반드시 최신 보안 패치를 설치해야 함.

   https://www.hancom.com/cs_center/csDownload.do
"
"https://news.hada.io/topic?id=6091","AWS, Customer Carbon Footprint Tool – 탄소 배출 추적 도구 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AWS, Customer Carbon Footprint Tool – 탄소 배출 추적 도구 출시

     * 탈탄소화를 위한 Amazon의 노력에 대한 정보를 고객과 공유하고 같이 노력하기
     * 내 계정의 탄소 배출량을 보여주는 도구
          + 요약 및 지리적, 서비스별
          + 월별,분기별,연간기준 통계
          + AWS가 100% 재생 에너지로 갔을 때 내 계정의 탄소배출량이 어떻게 바뀔 지를 예측
     * 배출량은 MTCO2e(이산화탄소 등가량 미터톤, Metric Tons of Carbon Dioxide Equivalen)로 표시

   GCP나Azure에도 비슷한 서비스가 있는거 보면
   작년부터 클라우드 업계가 지속가능성에 많이 신경쓰고 있는 것 같습니다.
   https://cloud.google.com/carbon-footprint
   https://microsoft.com/en-us/sustainability/…

   아마존 CTO의 2022년부터 그 이후 기술 예측 에도 지속 가능성은 강조하고 있습니다.
   ""우리 이만큼 잘 하고 있어""를 참 잘 과시하는듯. 이런걸 배워야 하는데 말이죠..
"
"https://news.hada.io/topic?id=6003","Meta(페이스북), 핵심 가치 업데이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Meta(페이스북), 핵심 가치 업데이트

   업무를 가이드하는 핵심 가치를 수정
   - Move Fast
   - Focus on Long-Term Impact
   - Build Awesome Things
   - Live in the Future
   - Be Direct and Respect Your Colleagues
   - Meta, Metamates, Me

   ""Be Direct and Respect Your Colleagues""
   동시에 존재해야하는 두 가치를 잘 묶어뒀네요

   기존 페이스북 시절의 핵심 가치와 비교해서 보세요.
   -임팩트에 집중하라 (Focus on impact)
   -신속하게 움직여라 (Move fast)
   -과감해져라 (Be bold)
   -열린 자세를 취하라 (Be open)
   -사회적 가치를 구축하라 (Build social value)
"
"https://news.hada.io/topic?id=6023","구글 검색이 죽어가고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             구글 검색이 죽어가고 있다

     ""Reddit은 현재 가장 인기있는 검색엔진이다""

     * 레딧팀만 그걸 모르고 있는지 훌륭한 검색 인터페이스를 만들지 않고 있음
     * 그래서 우린 구글을 이용해 검색하며 쿼리 끝에 ""reddit"" 이란 단어를 추가한다
     * 실제로 Reddit을 검색엔진으로 이용하는 사람이 늘고있음
     * 이유는 구글 검색 결과가 죽어가고 있으며, 대부분의 웹이 신뢰할 수 없게 되었음

구글이 죽어가는지 어떻게 알 수 있을까?

     * 최근에 구글에서 레시피나 제품 리뷰를 검색해봤다면, 아마도 구글 검색 결과가 거지같다는 걸 이미 알고 있을 것
     * 검색 상위 결과들이 SEO에 최적화된 어필리에이트와 광고로 가득찬 사이트라는 걸 알 수 있음
     * 구글은 많은 카테고리들, 특히 사실에 관련한 정보에 관해서는 훌륭한 결과를 주고는 있음
     * 당신에겐 아마도 구글 검색결과는 꽤 훌륭하고, 내가 무슨 말을 하고 있는지 모를수 도 있음
     * 당신이 깨닫지 못하는 것은 ""당신이 검색하고 싶은 대부분의 것을 검색하는 것에서 셀프 검열 해왔다는 것""
     * 구글이 좋은 검색 결과를 보여주지 않을 것이라는 것을 무의식적으로 이미 알고 있음

왜 구글이 죽어갈까 ?

     * 광고
          + 광고 게재는 검색엔진에 잘못된 인센티브를 만드는 것이 분명함
          + 구글 창업자들은 자신들의 초기에 이를 지적한 바 있음

     ""현재 상용 검색엔진의 주요 비즈니스 모델은 광고다. 광고 비즈니스 모델의 목표는 사용자에게 양질의 검색을 제공하는 것과 항상 일치하지는 않는다. 광고의 돈을 받는 검색 엔진들은 본질적으로 광고주에게 편향되고, 소비자의 요구는 멀리하게 될것이라고 본다. 또한 광고로 인한 수익은 종종 낮은 품질의 검색결과에 인센티브를 주게된다.""
          + 하지만 이 광고 기반 검색엔진의 실패에 대한 생각은, 구글이 다음에 뭘 할지에 대한 인스트럭션 매뉴얼처럼 보임
          + 이제 그들은 자신들의 붕괴전에 마지막 1센트까지 짜내고 있음(몇몇 검색어에서는 광고가 한 페이지를 차지해버림)
     * SEO
          + 구글 검색결과에서 상위에 위치시키는 것이 직업인 사람이 수없이 많으니, 검색 결과들이 나빠지는게 놀랍지도 않음
          + 공평하게 보자면, 이건 모든 검색엔진의 이슈겠지만.. 구글이 좀 더 덜 게임 가능한(gameable) 알고리듬을 제공할수 있지 않을까 ?
          + 노르웨이에서 검색 결과 상위를 다 차지한 ""Mermaid"" 스팸 SEO 사례 참고
     * AI
          + 구글은 점점 당신이 타이핑 한 것에 대한 결과를 주지 않음
          + 더 ""스마트"" 해지려고 하고, 당신이 ""진짜로 의미한 것""이 뭔지 알아내려고 함. 당신을 위해 개인화하는 것 이외에도
          + 이젠 정확하게 일치하는 단어를 찾는 검색 명령어인 ("""") 도 정확한 일치 결과를 보여주기 않기 시작했음

왜 사람들이 검색어에 ""reddit""을 추가할까 ?

     * 최근에 뜬 음모이론인 ""Dead Internet Theory"" 는 대부분의 인터넷이 ""봇(bot)""이라는 주장
     * 이건 아직 사실이 아니겠지만, 일반적인 의미에서 순수한 웹은 사라졌다는 것을 반영함
     * SEO마케터는 구글 검색 결과 최상위에 오르기 위해 노력하고, 로봇도 마찬가지임
     * 모든 것이 상품화 되어있고, 누군가는 당신에게 뭔가를 팔려고 함
     * 그게 봇이든 인간이든, 그들은 확실히 가짜임
     * 우리가 Authenticity(진정성) 을 다시 찾으려면 어떻게 해야할까 ? 최근 레노보 노트북에 대한 실제 사람의 의견을 들으려면 어떻게 해야할까 ?
       → 검색어에 ""reddit""을 추가하면 된다 (또는 Hacker News, Stack Overflow 등 당신이 신뢰하는 커뮤니티)

     ""구글은 죽었다"", Google + ""site:reddit.com"" 이여 영원하라

   저도 리눅스나 하드웨어 관련 검색할때는 reddit 을 종종 붙이는데, 커뮤니티적인 시각이 필요할때 국내에서는 관련 커뮤니티가 너무 협소해서 그렇게 검색하곤 하네요

   구글에서 검색 산업이 점점 Cash cow에서 Dog으로 가고 있다는 지적이 늘어나고 있네요.
   확실히 광고 단가를 따져도 유튜브가 월등히 낫고, 이미 시장은 독과점 중이고, 앞으로 치고 올라올 기업도 안 보이니 기업 입장에서는 당연한 걸지도 모르겠습니다.
   점점 'Be evil' 로 가는 것 같아 우려가 됩니다.

   엇 이제 마크다운 지원하시나보군요. 서식이 생겼네요

   넵! 많은 이용 부탁드립니다.

   후기가 거칠긴 해도.. 저도 검색어 뒤엔 dc를 붙입니다.

   개발 관련된 내용도 검색하면 상위에 tabnine이 자주 포함되지 않나요?
   잘 사용했었지만, 검색 결과 문서 내용은 맥락없이 코드만 덩그러니 있어서 도움은 안되더라구요.

   PC 관련 내용을 검색하다 보면 커뮤니티를 뒤에 붙이는 경우가 많더군요.

   방금도 해보니 외장하드 추천이란 내용에 외장하드 추천 클리앙, 외장하드 추천 퀘이사존 등 뒤에 커뮤니티를 붙이는 추천이 가장 상단에 뜨고 있습니다.

   실제로 커뮤니티 이름을 붙이지 않으면 자동으로 생성된 것으로 보이는 외장하드 Top X라고 하면서 실제론 오픈마켓 광고만 있는 페이지가 항상 최상단에 있고요.

   분명히 몇 년 전에는 이 정도는 아니었던 것 같은데, 지금은 국내에서도 똑같은 일이 일어나고 있다고 생각됩니다.

   네 국내에도 비슷한거 같아요. 특정 지역 맛집 추천 받을때도 '속초 클리앙' 처럼 찾아보는게 꽤 도움됩니다. ㅎㅎ
     * 구글은 이제 꽤 많은 중요한 카테고리들에서 고품질 검색결과가 나오지 않는다

   와 서식이 적용되니까 느낌이 확 다르네요. 근데 긱뉴스 내부 링크는 표시가 조금 다르게 되어서 외부 링크와 구분되었으면 좋겠어요. 그냥 왠지 말이죠… 안심하고 누를 수 있을 것 같은 느낌이랄까…

   긱뉴스 링크는 앞에 긱뉴스 파비콘이 보이게 적용했습니다. 고맙습니다!

   아 좋은 제안 고맙습니다. 어떻게 적용할지 고민해보겠습니다!

   안녕하세요 순수 구글로만 검ㅅ색하고있었던 학생입니다. 우연히 들어오게됬는데 좋은 정보 감사합니다.
"
"https://news.hada.io/topic?id=6025","Grist - Airtable과 Google Sheet의 오픈소스 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Grist - Airtable과 Google Sheet의 오픈소스 대체제

     * DB와 스프레드시트의 하이브리드 방식
     * Python 수식. 표준 라이브러리와 전체 문법 지원. Excel 함수들 포함
     * SQLite 기반
     * Incremental Import : 바뀐 부분만 업데이트 가능
     * REST API, Zapier, n8n 등 연동
     * 다양한 템플릿 제공
     * 접근 제어 옵션 : 공유(문서/워크스페이스/팀 사이트), 각 로우/컬럼/테이블별 권한 관리
     * Open Core 모델

   SaaS 서비스도 동시에 하고 있어 몇시간동안 사용해보고 서포트도 받아봤는데, 확실히 에어테이블과는 느낌이 다릅니다. 리눅스와 맥의 관계의 느낌입니다.

   Grist 는 개발자라면 내가 원하는 표현을 구현해낼 수 있는 그런 느낌이지만 동작이 다소 번거롭고 전체 데이터들에 대한 이해가 머리속에 잘 안착되어 있지 않으면 데이터가 마구 꼬일 수 있어 조심히 다뤄야하고요.
   Airtable 은 조심히 다룰 필요는 없되 마음가는대로 다뤄도 어느정도 원하는 기능들을 구현할 수는 있지만 디테일하게 내가 원했던 것을 구현하기는 어렵고 기능의 제약이 많은 것 같습니다.

   그리고 Grist 서포트에 문의보내면 상상 이상으로 정말로 친절하게 답변해줍니다.

   시연 영상을 봤는데, 직원들이 그렇게 일할 수준이면 어마어마하게 생산성이 높은 곳이겠다 싶었습니다. 꼭 구글시트가 아니더라도 비슷한 개념을 ERP에 섞어쓸 수 있을까 궁리도 하게 되네요.
"
"https://news.hada.io/topic?id=6066","Lenovo, 첫번째 Arm 기반 ThinkPad X13s 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Lenovo, 첫번째 Arm 기반 ThinkPad X13s 발표

     * 스냅드래곤 8cx Gen3 칩 사용한 첫번째 Windows-on-Arm 씽크패드
     * 5나노, 4개의 Arm Cortex-X1 코어(3Ghz), 4개의 Cortex-A78코어(2.4Ghz)
     * 13.3인치, 1920x1200, 두께 1.34cm, 무게 1.06kg
     * 49.5 WHr 배터리로 28시간 사용 가능
     * 32GB LPDDR4x, 1TB PCIe 4.0 SSD
     * 5G(sub-6Ghz 및 mmWave), WiFi 6E
     * 2개의 USB-C Gen 3.2 포트
     * $1,099 부터 시작
     * 인텔 i5 랑 비슷한 성능을 기대

   arm 이라면 리눅스 랩탑으로도 기대가 되는군요

   성능은 좀 낮긴 하지만 배터리 28시간이라니... arm 윈도우 노트북도 본격적으로 나오기 시작하는걸까요.
"
"https://news.hada.io/topic?id=5998","Akamai, Linode 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Akamai, Linode 인수

   - 세계 최대의 CDN업체 Akamai, 사용하기 쉽고 개발자 친화적인 IaaS인 Linode를 인수
   - 모든 지분을 $900m(1조원)에 인수하고, 2022년 1분기 완료 예정
   - Linode는 AWS,GCP 대비 절반수준의 가격인 VM을 제공(모든 리전에 가격동일)

   호오 ~

   5년전에 Digital Ocean 과 함께 사용한 적이 있었는데, 디지털오션에 비해 비싼 값이지만 AWS와 같이 꽤 여러 기능을 가지고 있고 조금 더 안정적이라 가성비를 원하시는 분들에게 추천해드리곤 했는데 CDN 1위인 아카마이에 인수 되었군요!

   역시 사용해보신 분들은 추천 많이 하시는군요. 사용경험이 훌륭한가 보네요!
"
"https://news.hada.io/topic?id=6076","2022년 주목해야 할 CSS 기능들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2022년 주목해야 할 CSS 기능들

     * Container Query
     * :has()
     * @when/@else
     * accent-color
     * CSS Color 함수들
     * Cascade Layers
     * Subgrid
     * Scroll Timeline
     * Nesting

   전 :has() 를 제일 애용할거같네요!

   요즘엔 프론트엔드쪽 유행이 CSS in JS로 넘어가긴했지만,,,
   점점 css 전처리기들이 설 곳이 좁아지고 있는거같네요!
"
"https://news.hada.io/topic?id=5995","Script Kit - 모든 것을 자동화하고 단축키 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Script Kit - 모든 것을 자동화하고 단축키 만들기

   - 맥에서 JavaScript를 이용하여 다양한 워크플로우 자동화 생성을 쉽게 해주는 도구
   - 키보드 단축키로 스크립트 실행 지원
   ㅤ→ 터미널 커맨드로도 실행 가능
   - npm 에코시스템 활용
   - 윈도우/파일/텍스트 등을 활용 가능한 유틸리티 기본 포함
   - 쉽게 공유 가능
   - 2022년 목표는 Export 기능으로 GitHub Action 및 서버리스 펑션으로 사용 가능하게 만드는 것
"
"https://news.hada.io/topic?id=6044","Vanced - 광고를 차단해주는 안드로이드용 유튜브앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Vanced - 광고를 차단해주는 안드로이드용 유튜브앱

     * 모든 광고를 차단하고, 백그라운드 재생 및 PIP 까지 지원
     * 좋아하는 채널에 대해서는 화이트리스트 가능(광고 및 스폰서 허용)
     * 스와이프로 볼륨 및 밝기 조절
     * 블랙 테마 제공
     * 자동 반복재생 기능
     * 유튜브 뮤직 지원
     * 코덱 설정 오버라이딩 가능(H264/VP9)
     * 비디오 해상도 강제 지정
     * SponsorBlock API를 사용, 유저들이 등록한 정보를 통해서 스폰서 부분은 자동으로 스킵
     * 없어진 Dislike 를 다시 표시

   필수 앱아닌가요? ㅎㅎ

   이런건 사실 법적으로는 문제가 있는 것이겠지요?

   유튜브 프리미엄을 사용하는 입장으로는, 스와이프로 볼륨 및 밝기 조절이 정말 끌립니다!

   NewPipe - 안드로이드용 가벼운 유튜브 클라이언트 요거와 비슷한 유튜브 광고 차단 앱입니다
"
"https://news.hada.io/topic?id=6060","사용자가 페이지를 떠날 때 안정적으로 HTTP 요청을 보내는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  사용자가 페이지를 떠날 때 안정적으로 HTTP 요청을 보내는 방법

     * 가끔 사용자가 다른 페이지로 이동하거나, 폼 전송할 때 로그를 남기고 싶은 경우가 있음
     * 클릭 이벤트에 fetch를 넣는 것은 꼭 전송된다는 보장이 없음
     * 그래서 Fetch하고 나서 window.location 에 넣어서 이동해보지만 이것도 마찬가지로 보장 안됨
          + XHR은 비동기 & 넌블록킹 이기 때문
     * fetch를 Promise로 await 처리하면 되긴 하지만 단점이 있음
          + 처리하는 속도가 느려져서 사용자 경험이 안좋아짐
          + 예상처럼 안정적이지 않음. 브라우저 탭을 닫거나 하는 것은 처리 불가능
     * 브라우저에게 HTTP 요청을 보존시키는 옵션이 여러가지 있음
          + Fetch 에 keepalive 플래그를 사용하면 페이지가 중단되더라도 해당 요청은 유지
          + Navigator.sendBeacon() 같은 더 간단한 함수
          + 브라우저들은 a 태그에 ping 속성도 지원 (링크에만 사용가능하다는 게 단점, FF는 기본으로 미지원)
     * 그럼 뭘 써야 할까 ?
          + 가능하면 fetch() + keepalive
               o 80%의 브라우저가 지원
               o 커스텀 헤더 전송 가능
               o GET 요청으로도 가능
               o 예전 브라우저들 지원
          + sendBeacon() 이 좋은 경우는
               o 96%의 브라우저가 지원
               o 많은 커스터마이징이 필요 없을 때
               o 깔끔하고 우아한 API를 선호할 때
               o 브라우저의 다른 우선순위 요청들과 다투고 싶지 않을 때
"
"https://news.hada.io/topic?id=6110","말이 되는 왓챠 2.0, 하지만 그것만으로 될까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       말이 되는 왓챠 2.0, 하지만 그것만으로 될까

   왓챠가 발표한 종합플랫폼 왓챠 2.0 선언에 대한 분석

     왓챠는 생태계의 핵심을 리텐션이라 봤고, 리텐션 끌올을 위한 슈퍼앱 전략을 발표했습니다.
     이 슈퍼앱 전략의 핵심은 콘텐츠, 그리고 그 콘텐츠들은 ‘과몰입’을 유발할 수 있어야 합니다.
     근데 문제는 시장이 제로섬으로 가고있다는 겁니다. 공급자(CP)쪽은 특히, 서둘러야할거에요. 당장!
"
"https://news.hada.io/topic?id=6049","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.
     * 지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   실용주의 프로그래머 새로 나온 걸 보는 중입니다. 엘든링도 일단 다운로드 중...

   엘든 링을 신나게 하고 있습니다!

   전에 보드게임 모임을 가졌다가, 재미있어서 이번 주말에도 하기로 했어요~

   많이들 안 적어주셔도 꾸준히.. 적어봅니다 ^^;

   호라이즌 포비든 웨스트 20% 쯤 진행해서, 열심히 달릴 예정입니다.
   피아노는 중급단계 코스에서 멈춘 상태인데, 기존 곡들 계속 치면서 손 익히는 중이에요. 파헬벨의 Canon 을 간략버전 일부라도 띄엄띄엄 칠 수 있게 되었다는 사실에 기뻐하고 있습니다.
   오래 미뤄두었던 긱뉴스의 마크다운 지원 기능 배포가 얼추 마무리 되어서, 이제 다음 큰 작업 준비중입니다. 주말엔 슬슬 자료 조사를 조금 해야 할 것 같아요.
"
"https://news.hada.io/topic?id=6001","구글, Chrome OS Flex 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         구글, Chrome OS Flex 공개

   - 무료 PC/맥용 클라우드-First OS
   ㅤ→ 주로 기업 대상
   - 가상데스크톱(VDI) 및 웹앱 사용
   - 빠른 부팅, 자동 업데이트, 클라우드에서 통합 관리 가능
   - 먼저 USB 부팅해서 사용해본 뒤 설치도 가능. 네트워크 설치 지원
   - 실행파일 차단 및 샌드박싱 기술로 안티바이러스 필요없음

   2020년에 구글이 인수한 Neverware의 CloudReady 버전 ChromiumOS를 이름 바꾸고 수정한 것
   https://arstechnica.com/gadgets/2020/…
"
"https://news.hada.io/topic?id=6000","NFT, 재미에서 일상으로 (92p재미에서 일상으로 (92p PDF)

   IBK투자증권이 NFT 전반에 대해서 정리한 슬라이드 형태 보고서
   # 가상자산과 전통자산의 관계
   - 전 세계 가상자산 시가총액은 2021년 말 기준 약 2,657조원으로, 2020년 1분기 말 대비 9배 가까이 증가함
   - 국내 10대 암호화 거래소 거래량은 약 3.9조원 수준으로, 코스피 거래량인 9조원과 비교 가능한 수준까지 올라왔으나 최근에는 조정구간
   - 기존 전통자산과 상관관계가 낮아 Hedging 수단으로 부상하며, 전통자산과 구분되는 위치를 찾아가고 있음
   - 이러한 가상자산의 성장은 기관을 비롯한 제도권이 가상자산을 인정하고 수용하는 변화를 만들어 냄
   - 제도권은 이러한 인정과 수용을 넘어서 적극적으로 가상자산과 관련된 사업을 시작하는 단계
   # NFT(Non Fungible Token)
   - 2015년 이더리움의 Smart Contract 기술에서 시작된 NFT는 디지털 자산에 고유성과 희소성을 부여한 재화
   - 자체 블록체인 네트워크를 가지고 있지 않고, 각 재화가 서로 다른 가치를 가지고 있다는 점은 기존의 가상화폐와는 차이점
   - NFT의 특징은 크게 소셜 캐피탈, 유틸리티, 엔터테인먼트로 구분할 수 있음
   - 2021년 NFT 거래액은 2020년 대비 200배 성장한 17조원 규모
   - 원본보존, 자전거래, 탈세 등의 문제를 가지고 있지만, NFT 시장은 폭발적으로 성장하고 있음
   # NFT Pricing & Valuation
   - NFT Valuation 척도는 크게 희소성, 유동성, 실용성, 개인 만족성 4가지 요소임
   - NFT의 시작은 희소성과 개인 만족성에서 시작했으나, 최근 BAYC나 메타버스 등으로 실용성이 부각되고 있음
   - 이에 맞춰 아디다스나 나이키와 같은 전통적인 스포츠 브랜드들 역시 NFT 사업에 진출하고 있음
   # Music Industries with NFT
   - NFT는 음원/앨범, 공연, MD같은 전통 수익 구조부터 신규 이벤트 및 로열티 판매까지 음악 산업 전방에 적용 가능한 범위가 넓음
   - 세계 최대 음원/음반 유통 및 아티스트 매니지먼트 업체인 Ditto Music은 블록체인 기반 디파이 플랫폼 오퓰러스를 작년 출시
   - NFT의 기술적 이점을 통해 오리지널 IP 가치 보장, 높은 자산유동성, 비용 효율화 등과 같은 새로운 가치를 창출
   - 아티스트와 팬의 직접적인 상호 작용을 통한 커뮤니티 형성 등 새로운 방식의 소통 채널을 형성 가능
   - 국내 엔터사인 하이브, 에스엠, 큐브엔터는 이러한 흐름에 맞춰 K-POP을 활용한 NFT 사업을 진행하고 있음
   # P2E(Play to Earn)
   - 게임 내 재화를 통한 수익 창출은 이미 존재했으나, P2E를 통해 보다 공개적으로 구체화 됨
   - 블록체인 플랫폼을 통해 디지털 자산의 가치가 한 게임에 종속되지 않게 되었고, 이를 통해 게임 소유권이 게임사에서 유저로 이동
   - 아직 성장하는 시장이기에 초기에는 다수의 게임을 확보한 플랫폼이 유리할 것으로 보임
   - 하지만 기존의 게임 산업의 발전을 고려한다면, 성숙기에는 강력한 IP를 보유한 기업이 선호될 것으로 보임
   - 국내외 스타트업부터 대형 게임사들까지 P2E 관련 사업을 진행하고 있음
   - 게임의 본질을 해친다는 우려와 국내법 상 규제가 있다는 점은 한계
"
"https://news.hada.io/topic?id=6092","Bypass Paywalls - 뉴스 사이트 페이월을 회피하는 브라우저 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Bypass Paywalls - 뉴스 사이트 페이월을 회피하는 브라우저 확장

     * 크롬/엣지/FF 지원
     * 다운받아서 직접 설치 필요
     * 크롬은 개발자 모드를 활성화 해야 설치 및 동작 가능
     * Medium/NYT/FT 등 약 100여개의 사이트 지원

   위 확장 프로그램 포크 버전 Bypass Paywalls Chrome Clean https://gitlab.com/magnolia1234/bypass-paywalls-chrome-clean 이 업데이트 더 잘 되고 있더군요

   감사합니다. 잘 쓸게요!

   페이월이 뭔가 했는데 콘텐츠를 읽으려고하면 돈내라고 팝업뜨는 걸 말하나 보네요.
"
"https://news.hada.io/topic?id=6006","내가 오래된 컴퓨터 매뉴얼을 모으고 읽는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       내가 오래된 컴퓨터 매뉴얼을 모으고 읽는 이유

   - 예전 매뉴얼 작성자들은 부정확한 내용들이 인쇄 되지 않게 더 주의를 기울였음
   - 매우 시각적이고 풍부한 콘텐츠, 상황을 잘 설명하는 삽화, 간결한 예제, 요즘 문서에선 찾아볼 수 없는 평온함이 있음
   - 이런 매뉴얼들을 찾고 읽어 보는 것은 테크니컬 라이터에게 큰 도움이 됨
   - Bitsavers 와 Internet Archive 에서 수많은 매뉴얼들을 PDF로 볼 수 있음
   ㅤ→ http://www.bitsavers.org/pdf/
   ㅤ→ https://archive.org/details/computermanuals

   글에 한장만 보여준 오리지널 매킨토시 매뉴얼 정말 멋지네요.
   https://archive.org/details/1984macintoshmanual
   조금 더 고해상도 버전
   https://datassette.nyc3.cdn.digitaloceanspaces.com/manuais/…
"
"https://news.hada.io/topic?id=6081","React 사이트를 SEO 친화적으로 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        React 사이트를 SEO 친화적으로 만들기

     * 구글의 페이지 처리 프로세스 소개 및 React의 SEO 이슈들과 대처 방안
     * SSR / SSG 적용은 필수 : 최초 렌더링 빠르게 & 검색 크롤러의 렌더링에 의존하지 않기
     * HTTP 상태코드 제대로 사용할 것
     * Hashed URL은 피하기
     * 링크는 꼭 < a href >로 (div 나 button 말고)
     * 주요 HTML의 Lazy Loading 피하기
     * 기본 요소들은 다 챙길 것
          + Canonicalization
          + Structured data
          + XML sitemaps
          + Mobile-first
          + Website structure
          + HTTPS
          + Title tags
          + Semantic HTML
"
"https://news.hada.io/topic?id=6019","Fred's ImageMagick Scripts","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Fred's ImageMagick Scripts

   - 370개의 ImageMagick 스크립트 모음(BASH 쉘 스크립트)
   - 3D, 합성, 컬러/톤 조정, 타일링, 텍스트 효과 등
   - 각 스크립트에 다양한 옵션을 줄수 있으며 적용한 예제 이미지 포함
   - 카테고리
   ㅤ→ Geometry
   ㅤ→ Image Effects
   ㅤ→ Brightness / Contrast
   ㅤ→ Blur / Sharpen / Edge
   ㅤ→ Color
   ㅤ→ Thresold / Segment
   ㅤ→ Noise Addition/Removal
   ㅤ→ Fourier Transform

   굉장히 오래된 페이지입니다.
   제작자인 Fred Weinhaus는 현재 70대 후반이구요 (1967년 학사 졸업이니..)
   물리학을 전공했고 이미지 프로세싱 관련해서 다양한 일을 하다가 90년대 중반에 웹으로 넘어와 웹 컨텐츠(지도)일을 시작
   90년대 말부터 2005년 사이까지 부동산 관련 버츄얼 투어를 제공하는 회사등의 CTO로 지내다가 2006년에는 은퇴했습니다.
   그리고 이 페이지는 은퇴후에 Imagemagick 포럼에서 사람들 질문에 답변도 달고 하면서 만든 스크립트를 모은 것
   아직도 디지털 이미치 처리에 관련된 프로젝트에 대해서 컨설팅도 종종 하고 있다고..
   Fred의 이력 보기 : http://www.fmwconcepts.com/fmw/fmw.html

   감동이네요
"
"https://news.hada.io/topic?id=6100","Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Ask GN: 이달의 구인공고 - 멤버를 찾고 계신가요 ?

   현재 근무중인 스타트업에서 같이 일할 멤버를 찾고 계시다면
   회사 소개 / JD / 위치 / 리모트 가능 여부 / 연락방법(이메일,웹사이트) 등을 적어주세요.
   ""멤버가 직접 1개의 댓글로 홍보를 작성""하시면 됩니다. (서치펌 등은 불가)

   이 글은 매월 첫번째 월요일에 등록됩니다.
   해당 회사의 공고에 관심있으시면 기재된 메일등으로 연락하시기 바랍니다.

   작성 예)

   하다 | 프론트엔드 개발자, 디자이너 | 서울 역삼 | Remote 가능 | https://hada.io | jobs@hada.io
   하다는 긱뉴스를 개발 및 운영하는 스타트업 입니다. 저희는 이러 저러 해서 엄청 좋은 회사입니다~~
   [1] 프론트엔드 개발자 JD : 내용 또는 URL
   [2] 디자이너 JD : 내용 또는 URL

   스티비 | 프론트엔드/백엔드 엔지니어, 프로덕트 디자이너, 프로덕트 매니저 | 서울 중구 소공동(시청역, 을지로입구역 도보 5분) | Remote 가능 | https://stibee.com | recruit@stibee.com

   스티비는 이메일 뉴스레터의 제작과 발송, 마케팅을 돕는 이메일 뉴스레터 서비스입니다. 2019년 서비스 출시 이후 매년 2배 이상 성장해왔고, 유니콘 기업인 우아한형제들, 컬리, 미디어/콘텐츠 비즈니스의 변화를 만들어나가고 있는 뉴닉, 디에디트, 그리고 조선일보, 중앙일보, MBC, SBS, JTBC 등 주요 언론사, 방송사에서도 스티비로 이메일 뉴스레터를 발행하고 있습니다.

   이메일 뉴스레터 제작 솔루션으로 시작한 스티비는, 이제 이메일 뉴스레터를 기반으로 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어 나가고 있습니다.

   스티비와 함께 이메일 뉴스레터 제작 솔루션을 넘어, 새로운 콘텐츠 구독 생태계, 크리에이터 생태계를 만들어나갈 분을 찾고 있습니다. 🙌

   [1] 프론트엔드 엔지니어(신입): https://stib.ee/Zo25
   [2] 프론트엔드 엔지니어(경력): https://stib.ee/Xo25
   [3] 백엔드 엔지니어: https://stib.ee/utK5
   [4] 프로덕트 디자이너: https://stib.ee/sn95
   [5] 프로덕트 매니저: https://stib.ee/ptK5

   세상에서 가장 쉽게 설비를 연결하는 기업, 주식회사 잉클 입니다. 설비와 사람이 ‘쉽게’ 연결될 수 있다면, 제조 현장에서 일하고 생산하는 방식에 큰 혁신이 일어날 것이라고 믿습니다. 잉클은 IT기술과 OT기술이 융합된 자체 산업용 소프트웨어를 만들어 세상에서 가장 쉽게 설비와 사람을 연결하고 있습니다.

   2019년 법인 설립 이후 매년 더블 이상의 매출을 만들어내고 있으며, 2022년 3월 초에 Pre SeriesA 투자 유치를 성공적으로 완료하였습니다.

   아래 포지션을 담당하실 분을 절실히 찾고 있으니, 많이 지원 부탁드립니다!! 🙏

   [1] 산업용 설비 IoT 엣지 개발자: https://programmers.co.kr/job_positions/10098
   [2] 산업용 설비 SaaS 프론트엔드 개발자
   : https://programmers.co.kr/job_positions/10008
   [3] Unity3D 기반 디지털 트윈 클라이언트 개발자: https://programmers.co.kr/job_positions/10099
   [4] 산업용 설비 데이터 분석가: https://programmers.co.kr/job_positions/10100
   [5] AI 리서치 엔지니어: https://programmers.co.kr/job_positions/10147

   💻 커먼컴퓨터 | Software Engineer | 서울 양재 | Remote 가능 | contact@comcom.ai

   블록체인 위에 모두를 위한 컴퓨터를 만들고 있는 커먼컴퓨터에서 다음 미래를 같이 만들어갈 갈 분을 찾고 있습니다.

   Software Engineer JD

   커먼컴퓨터는 세상의 모든 사람과 컴퓨터가 만들어내는 가치를 투명하게 측정하고 보상하자는 사명을 가지고 구글과 네이버 출신들에 의해 시작되었습니다. 현재 블록체인 기술을 핵심으로 하여, 인공지능 관련 대규모 연산이 가능한 블록체인 **AI Network**와 분산형 클라우드 플랫폼 Ainize®, 그리고 이를 기반으로 한 크리에이터와 팬을 위한 소셜 플랫폼 aFan®을 서비스 중에 있습니다.

   또한 커먼컴퓨터는,
     * 국내외 유명 VC들로부터 130억 규모의 시리즈 B 투자를 마무리하였습니다.
     * Google for Startups와 Naver D2의 엑셀러레이팅 프로그램을 이수하였습니다.
     * 글로벌 기업(예: 구글)의 혁신적 기업문화와 스타트업만의 빠른 성장을 경험할 수 있습니다.

   채용 관련 오픈채팅 방도 있으니, 질문이 있으시면 여기 오셔서 가볍게 질문해주셔도 좋습니다 : )! 커먼컴퓨터 채용 Q&A 오픈챗방

   모아이스 | MLOps 엔지니어 | 서울 서초구 양재동 | 순환재택근무, Full-Remote 불가 | leo@moais.co.kr

   모아이스는 인공지능 기술을 이용하여 스포츠 교육 및 연습의 개념을 바꾸려는 서비스를 개발하는 회사입니다.

   현재 첫 번째 타겟으로, 인공지능 기반 자세분석 및 코칭 서비스인 골프픽스를 출시하여 서비스하고 있습니다.
   https://www.moais.co.kr/GolfFix

   모아이스 인공지능팀에서는 스포츠 분야에서 인공지능이 코치의 역할을 할 수 있을거라고 기대합니다. 코치는 학습자를 바라보고 (Computer vision), 문제를 파악하며 (Machine Learning & Data Science), 해결책을 제안합니다.

   모아이스는 데이터 수집 및 가공부터 모델 구성 및 서비스까지 모두 인하우스로 진행하고 있습니다.
   저희 모아이스의 AI 연구원분들과 서비스 개발팀의 다리를 만들어주실 MLOps 엔지니어를 구하고 있습니다.

   회사 홈페이지: https://www.moais.co.kr/main
   MLOps 엔지니어 JD: https://moais.notion.site/ML-Ops-Engineer-0282b5d5edae480ba4b9b99ca87f…

   💎 AB180(에이비일팔공) | 소프트웨어 엔지니어 | 서울 서초(사당역 1분) | https://abit.ly/ab180-hiring-at-geeknews | hr@ab180.co

  초당 10만 건의 트래픽 처리. 월 2,000만 MAU.
  월 100억 이벤트 수집 및 분석. 실시간 대규모 데이터 분석 및 성과 극대화를 위한 머신러닝.

   유니콘부터 대기업까지 사용하는 프로덕트를 만들며 함께 성장하실 분들을 찾고 있어요!

   AB180은 'Airbridge'라는, 사용자 행동과 마케팅 성과를 측정, 분석해서 더 좋은 퍼포먼스를 낼 수 있도록 돕는 도구를 만들고 있어요.
     * Meta(페이스북) 공식 모바일 측정(MMP) + 멀티터치 기여도 분석(MTA) 파트너
     * GS리테일, KB증권, 퀸잇, 다노 등 많은 기업에서 사용하는 제품
     * 실시간 대규모 데이터 처리 및 분석, 시각화 등을 경험 가능 → 기술 블로그

   저희에 대해 궁금하시다면 아래의 공고를 확인해주세요 :)

   Software Engineer, Backend (Junior) ↗
   Software Engineer, Backend (Senior) ↗
   Software Engineer, Data (Senior) ↗
   Software Engineer, Database Engine ↗

   [🍋 레몬베이스(Lemonbase) - 회사와 구성원의 성과관리 혁신을 위한 국내대표 HR SaaS]
     * 채용페이지 : lemonbase.team/
     * 채용직군 : 프론트엔드 / 백엔드 / 디자이너 / 프로덕트 오너 (PO)
     * 위치 : 서울 성수(서울숲/뚝섬역 5분)
     * 근무형태 : Remote 가능

   레몬베이스는 ""일하는 사람들이 성장하고 성과를 내는 방식(grow and perform)을 혁신""하고 있습니다. 회사와 구성원의 건강한 성장을 돕기 위한 '성과관리솔루션' HR SaaS를 만들고 있고요. 서비스 런칭 후 매월 50% 이상 빠르게 성장하며, 카카오모빌리티 / 쏘카 / 위메프 / 마이리얼트립 / 매스프레소 / 버킷플레이스 등 수많은 기업들이 이미 레몬베이스와 함께 일하는 방식을 혁신하고 있습니다.

   2020년 12월 국내 시드 라운드로는 매우 드물게 본엔젤스 / 크래프톤 / 카카오벤처스로부터 62억원의 펀딩에 성공함으로써 우리의 가능성을 인정 받았어요 😊

   ✅ 앞으로 10년 우리 앞에 펼쳐질 가장 큰 기회를 현실로 만드는데 동참하고 싶은 분
   ✅ '건강한 성장'이라는 단어에 조금이라도 가슴이 떨리시는 분
   🌈🌈 https://www.lemonbase.team 에서 흥미로운 이야기들을 더 많이 보실 수 있습니다 :)
    1. 프론트엔드 엔지니어 https://www.lemonbase.team/1d49ffe5-08cb-448c-8f7d-e32820966dd0
    2. 백엔드 엔지니어 https://www.lemonbase.team/ceb39cd7-f532-46c9-87f1-47df8792e46e
    3. 프로덕트 디자이너 https://www.lemonbase.team/1473c4ea-167c-49b6-8414-c18d1f3c47f6
    4. 프로덕트 오너 https://www.lemonbase.team/fb58a154-b977-4ffd-bb73-ef52efaa92fb

   🙌 당장 지원하지 않으셔도 괜찮아요! 관련해서 궁금하신 점이 있거나 가볍게 이야기를 나눠보고 싶다면 start@lemonbase.com 으로 편히 메일 부탁드립니다 :)
"
"https://news.hada.io/topic?id=6093","Geekbench, 벤치마크에서 삼성 갤럭시 S10,S20,S21,S22 전모델 퇴출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Geekbench, 벤치마크에서 삼성 갤럭시 S10,S20,S21,S22 전모델 퇴출

     * 삼성의 GOS(Game Optimizing Service)가 게임과 앱에서 성능을 쓰로틀링
     * 앱의 동작이 아닌 앱의 ID를 이용하여 쓰로틀링 여부를 결정
     * 벤치마크 앱은 이 리스트에 포함되지 않기에, 벤치마크 조작이라고 판단
     * 갤럭시 S10,S20,S21,S22 전모델을 벤치마크 차트에서 삭제

   이제 갤럭시라는 이름은 어떻게 될려나 모르겠네요.

   제가 쓴 갤럭시는 항상 마지막이란 타이틀이 붙던데
   노트4 - 마지막 탈착식 배터리
   노트9 - 마지막 이어폰 단자
   S22는 뭐가 될까요? 잘하면 마지막 갤럭시가 될수도...?

   https://browser.geekbench.com/android-benchmarks
   하단에 보면 제외된 폰 리스트가 있는데 기존엔 OnePlus, Huawei, Xiaomi 등만 포함되어 있다가 이번에 삼성 폰들이 대거 들어갔습니다.
"
"https://news.hada.io/topic?id=6106","Just Five - 하루를 시작하는 헤드라인 뉴스 다섯개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Just Five - 하루를 시작하는 헤드라인 뉴스 다섯개

     * 전세계 주요 신문사 및 커뮤니티의 일간 탑 헤드라인 5개씩만 모아보는 페이지
          + NYTimes, Reuters, Aljazeera, BBC, Washington Post, CNN, Epoch Times, France 24
          + r/UpliftingNews, Cointelegraph, Lifehacker, Twitter World Trends, Slashdot, Verge
     * 글로벌 또는 국가별 선택가능 : 미국, 이탈리아, 프랑스.. (한국은 없네요)

   이걸 보니, 깔끔하고 아이디어 좋은데,
   한국어버전을 생각하니 대체 어떤 언론을 넣어야 할 지 ...

   전 사실 기술뉴스 말고는 다른 뉴스를 안보는 편이긴 한데요.
   조회수 올리려고 너무 자극적인 이슈를 중점적으로 다루는게 많이 불편해서 더 그런 것 같아요.
   좋은 얘기만 다루는 https://www.positive.news/ 같은 거와 비슷한 한국어 사이트가 있으면 좋을 것 같아요.

   저도 그러다 뉴닉팀을 만나고 뉴닉팀이 보내주는 것 정도는 읽게 되더라구요

   최대한 중립을 유지할려고 하는 모습이 그래도 괜찮았고, 쉽게 설명해줄려고 하기도 하는 것 도 괜찮았구요.

   저도 일반 뉴스는 안본다고 생각했는데 뉴닉은 일주일에 한 두번 보는 것 같고 그 외에는 페북 지인들 통해서 보는 정도로 보고는 있네요.
"
"https://news.hada.io/topic?id=6098",""진짜" 클라이언트 IP의 위험성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ""진짜"" 클라이언트 IP의 위험성

요약

     * X-Forwarded-For 헤더에서 ""Real Client IP"" 를 가져올때 가장 오른쪽 IP를 사용할 것
     * XFF 헤더에서 가장 왼쪽 IP는 보통 ""클라이언트에 가장 가까운"" ""거의 진짜""인것으로 간주되지만 속이는게 가능(spoofable). 보안과 관련된 어떤 것에도 사용하지 말 것
     * 가장 오른쪽 XFF IP를 선택할때, 해당 헤더의 마지막 인스턴스를 사용해야 함
     * 리버스 프록시가 설정한 ""True Client IP"" 값들(X-REal-IP, True-Client-IP 등)도 좋긴 하지만
          + 리버스 프록시가 그값을 어떻게 지정하는가에 따라 다르고
          + 리버스 프록시 자체가 이미 속았는지도 모르고(Spoofed)
          + 리버스 프록시의 설정이 어떻게 되었는지에 따라 다름
     * 리버스 프록시가 특별히 설정하지 않은 헤더는 신뢰할 수 없음
          + 예를 들어 , Nginx 뒤에 있지 않거나 항상 (헤더를) 설정하도록 되어 있지 않다면 X-Real-IP헤더를 읽어선 안됨. 스푸핑 된 값을 읽을 수도 있기 때문
     * 많은 Rate Limiter 구현이 스푸핑 가능한 IP를 사용하고 있으며, 레이트 리미팅 피하기 및 메모리 고갈 공격에 취약함
     * 코드나 인프라에서 ""real client ip"" 관련한 것을 사용하고 있다면 뒤에 이어지는 기술적 내용을 참고할 것

상세 (길어서 제목만 옮깁니다)

     * 소개 : 요즘 ""real client ip""를 알아내는 것은 끔찍함
     * 함정들
          + 헤더는 신뢰할 수 없음
          + 여러개의 헤더
          + Private IP
          + IP Splitting
          + 암호화되지 않은 데이터는 항상 신뢰할 수 없음
          + X-Client-IP, True-Client-IP 같은 것은 스푸핑 가능
          + X-Forwareded-For 에 대해 알기
     * 함정 피하기
          + 진짜 IP를 구하기 위한 알고리듬
               o 모든 IP값들을 가져와
               o 보안에 따라 어떤걸 사용할지 선택
               o 가장 왼쪽, 가장 오른쪽
     * 실전 예제들
          + Cloudflare, Nginx, Apache
          + Akamai
          + Fastly
          + Azure
          + go-chi/chi
          + didip/tollbooth
          + ulule/limiter
          + sethvargo/go-limiter
          + Let's Encrypt
          + Express
          + Traefik
          + phpList
          + IIS
          + Tor
     * 고급 : 이론적 함정과 공격 방법들
     * RFC 7239: Forwarded HTTP Extension, June 2014

     예를 들어 Nginx 뒤에 있거나, 특별히 항상 지정하지 않는다면 X-Real-IP헤더를 읽어선 안됨. 스푸핑 된 값을 읽을수도 있기 때문

   이 부분은 살짝 오역인 것 같습니다. 원문은 이렇습니다.

     For example, you must not check the X-Real-IP header if you’re not behind Nginx or something else that always sets it, because you’ll be reading a spoofed value.

   예를 들어서, Nginx 뒤에 있지 않거나 항상 (헤더를) 설정하도록 되어 있지 않다면 X-Real-IP 헤더를 읽어서는 안 된다. 스푸핑 된 값을 읽게 되기 때문.

   아 고쳐두겠습니다. 고맙습니다!

   일반적인 방법으로는 TRUSTED_PROXY 환경변수를 이용하여 가장 오른쪽부터 ""믿을 수 있는"" 프록시를 하나씩 제외하다가 처음 나오는 IP를 사용하긴 합니다.
   보통 내부 아이피(192.168.0.0/16) 등을 믿을 수 있는 프록시로 취급하기도 하구요
"
"https://news.hada.io/topic?id=6089","dnt - Deno to Node Transform","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      dnt - Deno to Node Transform

     * Deno 모듈을 Node.js 용 npm 패키지로 변환해주는 도구
     * Node.js랑 호환되는 TypeScript 코드로 변경
          + Deno 네임스페이스 API들에는 shim 삽입
          + Skypack 이나 esm.sh 같은 리모트 임포트를 package.json 에 추가
     * tsc를 이용해서 변환한 코드의 타입 체킹
     * ESM/CommonJS,TypeScript 선언 파일 생성
     * Deno.test() 호출을 통해서 최종 출력물을 Node.js 에서 테스트

   How to publish Deno modules to NPM 글에서 dnt를 이용해서 HTTP 미들웨어/라우터 프레임워크인 oak 를 Node용으로 변환한 후기를 볼 수 있습니다.
"
"https://news.hada.io/topic?id=6069","Programming Time - 아이에게 카드게임으로 파이썬 가르치기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Programming Time - 아이에게 카드게임으로 파이썬 가르치기

     * 카드에 파이썬 코드가 적혀있고, 20면 주사위를 굴려서 나온 수를 가지고 코드가 동작하는 것을 이해하기
     * 총 55장으로 구성
     * 파이썬 기본 문법부터 블룸필터, 딕셔너리, 람다, 그래프, Bayes정리, 링크드리스트등 다양한 주제
     * 직접 프린트하면 무료, 1덱에 10€/배송비 10€
     * CC BY 4.0

   이게 들고 섞거나 하는게 아니다 보니, 그냥 집에서 인쇄하셔도 무리는 없을 것 같아요.

   Printer Studio 같은 곳을 이용하면 좋은 품질의 카드 인쇄도 가능합니다.

   하지만 소량 인쇄 + 배송비 해보면, 이 분한테 구매하는 거랑 가격이 엇비슷합니다. ^^;

   카드를 한글화 해서 선물용으로 만들면 어떨까 생각하다가.. ""아 나 파이썬 안하지?"" 하고 접었습니다.
"
"https://news.hada.io/topic?id=6046","Goopt - GPT-3를 이용한 Procedural Web 검색엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Goopt - GPT-3를 이용한 Procedural Web 검색엔진

     ""Web 4.0은 절차적 웹의 바람직한 진화가 될 수 있을 것""

     * 특정 단어를 검색하면 AI가 내가 원한 콘텐츠를 자동 생성해서, 검색 엔진처럼 제공하는 실험
     * NLP 와 Procedural Content Generation(PCG, 절차적 콘텐츠 생성) 기법을 결합
     * 모든 콘텐츠가 실시간 합성 및 생성되므로, 검색의 결과가 누군가 이전에 적거나 생성했던 것이 아닌 새로운 콘텐츠가 무한하게 생성됨
     * 현재는 실험 프로젝트라 자신의 OpenAI API Key가 있어야 소스 클론해서 로컬에서 테스트 가능

   굉장히 멋지긴 한데, 그게 사실인지 여부를 알기가 어렵다는 한계가 있겠어요. 이런 류의 인공지능이 가지는 가장 큰 단점이 자신이 모르는걸 물어도 '아주 그럴듯하게 줏어넘긴다'는 것이라.

   하기는 인터넷에는 이미 가짜 뉴스가 많이 올라와 있긴 합니다. ㅎ

   dead internet theory 가 더 이상 음모론이 아니게끔...?

   GPT 계열은 MS가 밀어주고 있어서 구글이 어찌 대응할지 궁금하긴 하네요.

   Procedural Content Generation 단어를 검색하면
     * What is Procedural Content Generation ?
     * How does Procedural Content Generation Work ?
     * Why use Procedural Content Generation ?

   이런 결과를 AI가 아예 새로 생성해서 실시간으로 만들어 내주는 거네요.

   정말 많은 데이터 기반으로 GPT-3 이후에 더 방대한 규모의 GPT-4,5 같은게 만들어지면, 충분히 가능할 것 같은 이야기네요.
   내가 원하는 데이터를 그냥 생성해서 만들어주면 엄청 편하긴 할 것 같은데... 정보의 신뢰성 문제가 있긴 하겠지만요.
   구글은 언젠가 저런게 되고 싶어 하겠죠.. ?
"
"https://news.hada.io/topic?id=6008","Elastic, Amazon과 상표권 침해 소송 합의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Elastic, Amazon과 상표권 침해 소송 합의

   - ElasticSearch 때문에 발생했던 분쟁에 대해 합의
   - 이제 AWS 와 AWS MarketPlace 위의 ElasticSearch 서비스는 Elastic Cloud 하나만 두는 것으로 결정

   AWS가 OpenSearch를 버린다는 얘기는 아닙니다. AWS가 호스팅하던 ElasticSearch 만 없어지는 것
   - Elastic, AWS가 사용 못하게 라이센스 변경 https://news.hada.io/topic?id=3606
   - AWS, ElasticSearch와 Kibana의 포크버전 OpenSearch 공개 https://news.hada.io/topic?id=4064
   - ElasticSearch를 둘러싼 AWS와 Elastic의 대립 https://news.hada.io/topic?id=3628
   - Elastic과 AWS의 분쟁, 어떻게 봐야 할까? https://news.hada.io/topic?id=3710
"
"https://news.hada.io/topic?id=6096","MarTech 스택 만들기 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           MarTech 스택 만들기 가이드

     * Martech Stack : 마케팅 활동을 수행, 관리, 측정 및 개선하기 위해 사용하는 소프트웨어 모음
       → 모든 마케팅 프로세스를 처리할 수 있는 단 하나의 도구는 없기 때문

주요 사용처

     * 조사 : 키워드 파악하기, 미디어/인플루언서의 소셜 리치 분석 등
     * 생성 : 협업, 피드백 받기, 노코드로 페이지 만들기, 간소화된 비쥬얼 컨텐츠 생성 도구등
     * 배포 : 어떤 마케팅 채널이든 그 채널을 위한 도구가 있음
     * 사용자 경험 개인화 : 사용자에게 맞는 콘텐츠 추천
     * 마케팅 자동화 : 고객 여정 전반에 걸쳐서 워크플로우를 자동화
     * 분석 : 측정할 수 있으면 개선할 수 있다
     * 최적화 : 더 좋은 결과를 내기 위한 다양한 테스트 도구들
     * CRM : 최고의 마케팅 도구는 좋은 CRM 도구이기도 함

Martech 스택 만들기

     * 요구사항을 파악하고 현재의 스택과 맞추기 : 나와 팀의 요구사항
     * 예산 설정
     * 필요한 소프트웨어들 조사하기
          + 링크드인/트위터 통해서 추천 받거나 Quora 통해서 물어보기
          + StackShare/BuiltWith/Slintel 등을 활용해서 경쟁 제품 찾기
          + G2/Capterra 같은 리뷰 플랫폼에서 알아보기
          + 크로스 체킹
     * 툴 배포하고 전환하기
     * 적절하게 사용되고 있는지 확인 하기

Ahrefs의 Martech 스택

     * Ahrefs : SEO 도구
     * Google Search Console : 구글 검색결과 모니터링 & 트러블 슈팅
     * Google Workspace : 마케터들의 협업 도구
     * Notion : 팀 워크스페이스로 사용(구글 워크스페이스가 부족한 부분)
     * Grammarly : 콘텐츠 마케팅엔 자동 문법 체크 필수
     * Wordable : Google Docs 에서 Wordpress 로 기사 Export
     * Wordpress : 내부 CMS로 사용
     * vidIQ & Tubebuddy : 비디오 마케팅 도구
     * MeetEdgar : 트위터/링크드인/페이스북 포스팅 자동화 도구. 소셜 미디어 마케팅 도구
     * Sparktoro : 특정 토픽에 대한 크리에이터/인플루언서 찾기
     * Hunter : 이름만으로 이메일 주소 찾기
     * Pitchbox : 인플루언서 아웃리치 및 콘텐츠 마케팅 플랫폼
     * Figma : 협업 디자인 도구
"
"https://news.hada.io/topic?id=5996","구글 Pixel, 안드로이드 앱을 크롬북/PC로 스트림 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글 Pixel, 안드로이드 앱을 크롬북/PC로 스트림 가능

   - 크롬OS 전용이 될 것 같았지만, 웹앱으로 되어 있어서 윈도우11 같은 PC 에서도 적용이 가능
   - 폰에서 실행한 앱 화면을 브라우저로 라이브 스트리밍
   ㅤ→ 열린 상태에서는 네이티브 앱처럼 조작 가능(클릭,탭,타이핑)
   - 실제로는 폰의 화면을 그대로 보여주는 대신 세컨드 화면처럼 동작 (폰의 화면과 별개)
   ㅤ→ 좌하단 메뉴를 통해서 폰에 설치된 앱들을 실행 가능
   ㅤ→ 우측에선 폰의 알림들을 리스트해서 보여줌
"
"https://news.hada.io/topic?id=6054","GitLab Critical Security Release","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    GitLab Critical Security Release

     * 모든 GitLab CE/EE 설치본에 대해 즉시 업데이트 하는 것을 추천
     * Quick Actions를 통해서 Runner 등록 토큰이 노출되는 취약점에 대한 패치
          + 모든 그룹/프로젝트에 대한 Runner 등록 토큰이 리셋됨
          + 자동화된 프로세스로 Runner를 등록하고 있다면 이 업데이트로 인해 해당 프로세스가 중단됨
          + 하지만, 이전에 등록된 Runner에는 영향을 미치지는 않음
     * 권한 없는 사용자가 API로 그룹에 사용자를 추가하는게 가능한 취약점 패치
     * 특수하게 만든 이메일 주소를 통해서 Sendmail 시에 환경 변수가 노출되는 취약점 패치
"
"https://news.hada.io/topic?id=6057","OrioleDB - 클라우드 네이티브 스토리지 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      OrioleDB - 클라우드 네이티브 스토리지 엔진

     * PostgreSQL을 위한 새로운 스토리지 엔진
     * 새로운 테이블 액세스 프레임워크와 표준 확장 인터페이스를 사용해서 PostgreSQL의 일부 힘든 문제들을 해결
     * SSD/NVRAM등의 최신 하드웨어에 최적화하여 CPU 보틀넥을 회피
     * Undo Log와 Page-Mergins로 개비지 콜렉션을 없애서 유지 보수 필요성 감소
     * Pararrel Apply 가능한 저수준 Write-Ahead Log를 구현해서 분산에 적합한 설계
          + Raft 콘센서스 기반 복제에 최적화 되어 Active-Active 멀티마스터 가능
     * 아직 퍼블릭 알파단계로 프로덕션 사용에는 적합하지 않음

   매우 기대되네요.

   PostgreSQL의 메이저 커미터 중 한명인 Alexander Korotkov가 만들었다고 하네요
     * https://www.linkedin.com/in/alexander-korotkov-41b1b582/

   그를 만났던 사람이 남긴 평이 인상적이어서 가져와 봅니다.
     * https://news.ycombinator.com/item?id=30466366

     Alexandr is a very impressive contributor to Postgres community. Met him few times. He’s on the mission to change and improve community. He has a clear vision what has to be changed, and he’s still 30+ yo and has many many years ahead. Just talking him 15 mins will save you years. Hope he can make a business out of this and find resourceful business partners.
"
"https://news.hada.io/topic?id=5984","Notepad++ 8.3 (Boycott Beijing 2022)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Notepad++ 8.3 (Boycott Beijing 2022)

   Notepad++ 새 버전이 이번에는 Beijing 동계올림픽을 보이콧 선언
"
"https://news.hada.io/topic?id=6082","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.
     * 사이드 프로젝트를 되살리는 제새동 작업을 해보려고 합니다. 크흑.

   국립생태원 놀러갈려구용~

   요즘은 flutter를 공부하고 있습니다

   이번 주말에는 저도 소중한 한표를 사전에 행사하려고 합니다~
   그리고 따님과 약속한 마크 다이아 광질을 하러 떠납니다.

   뱃지 시스템은 전 안해봤지만 짧은 생각으로는..
   리워드 달성 조건으로 사용될만한 이벤트 들을 모두 기정의 하고 그걸 이벤트 스트림에 던지는걸 구축한 다음.
   그 이벤트 스트림 하나의 섭스크라이버가 이벤트를 보면서 달성 조건들 확인하면서 처리하는 방식이 되는 것 아닐까 하고 상상해봅니다.

   전 개인적으로 그 이벤트 스트림으로는 kafka만 생각나는데 다른 분들은 어떤걸 또 추천하실지 궁금하네요~

   그래서 ㅇㄷ

   주말 계획 스레드에 묻어가며 도움 요청 드리고 싶네요~
   뱃지/리워드 백엔드 시스템을 구상 중인데, 아키텍처나 사용 기술 관련해서 좋은 프랙티스나 자료 찾기가 어렵더라고요.
   뱃지로 검색하니 교육 인증 쪽 결과가 나오고 ㅎㅎ 게임 아키텍처나 Achievement 로 검색하면 나오는 것 같은데 경험이 없던 분야라 그런지 좋은 자료 분별이 어렵네요.
   프랙티스, 자료 링크 등등, 또는 작은 팁도 좋으니 도움 받을 수 있을까요?
   특정 과제(예: 회원가입, 초대, 결제) 등에 대한 조건을 달성하면 뱃지를 부여하는 시스템을 구현하려고 합니다.
   과제나 조건들을 어느정도 자유롭게 추가할 수 있으면 좋겠습니다.

   주말 계획은 위와 관련된 조사를 좀 하고 사전 투표도 하려고요~!

   호라이즌 40% 진행중입니다. 이번꺼는 스토리도 좋지만, 서브퀘도 재미나서 여기저기 돌아다니다 보니 오래 걸리네요.

   사전투표 하고 와서 편안하게 주말을 보내볼 예정입니다~
"
"https://news.hada.io/topic?id=5997","구글, Privacy Sandbox on Android 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, Privacy Sandbox on Android 발표

   - 애플의 ATT와 비슷하게 광고 추적을 막는 개인정보 보호 기능
   ㅤ→ 써드파티와의 사용자 데이터 공유를 제한하고, Ad-ID를 포함한 크로스-앱 식별자 없이 동작
   - 약 2년간의 이니셔티브를 통해서, 그냥 모든 것을 차단하는게 아닌 앱들에게 대체하는 방법들을 제공할 것(기존 웹에서 제안한 방법들 기반)
   ㅤ→ Topic : 사용하는 앱을 기반으로 추론되는 카테고리들. 앱및 광고가 이들을 이용하여 연관 광고 노출 가능
   ㅤ→ FLEDGE : 앱개발자가 앱내에서의 인터랙션에 기반하여 ""Custom Audience""를 생성하고 그 기반으로 광고를 노출. 정보와 광고 자체가 로컬에 있어서 외부와 공유되는 것 없음
   ㅤ→ Attribution Reporting API : 사용자 레벨 추적 메커니즘을 사용하지 않는 어트리뷰션

   공식 사이트 : https://www.privacysandbox.com/android/
   애플의 방식(다른 플랫폼이라고 우회해서 표현했네요)은 기존 기술을 노골적으로 제한한다며, 비효율적이라고 비판도 빼놓지 않는군요.
   구글은 안드로이드 플랫폼 제공사이기도 하지만, 그전에 광고 플랫폼 회사니까 당연하겠죠.
   글 끝에도 구글은 자신의 제품이나 사이트에 특혜를 부여하지 않는다고 또 한번 강조 하는데.. 이거 믿을 사람이 있을까요?

   - 구글, FLoC을 대체할 새 ""토픽 API"" 공개 https://news.hada.io/topic?id=5830
   - 모질라와 메타의 IPA - 개인 정보를 보호하는 광고 어트리뷰션 https://news.hada.io/topic?id=5975
"
"https://news.hada.io/topic?id=6045","Awesome Tunneling - ngrok 대체제 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Awesome Tunneling - ngrok 대체제 모음

     * 로컬 웹서버를 NAT 안쪽에 있더라도 퍼블릭 도메인 명으로 접근 가능하게 해주는 솔루션
     * 오픈소스 : frp, ngrok 1.0, localtunnel, Teleport, chisel, expose, sish, tunnelto, pgrok, SirTunnel..
     * 상용/클로즈드 소스 : ngrok 2.0, CloudFlare Tunnel, Tailscale, Loophole, Packetriot, Hoppy..

   ZeroTier강추합니다.
   상용클라우드도 제공하고있는데 컴터 50개까지 공짜입니다. ngrok처럼 도메인까지 만들어주지 않지만..

   예전에 serveo 라는 녀석이 꽤나 마음에 들었었는데 언제부턴가 잘 안되더니 이젠 서비스를 하지 않나 보네요
"
"https://news.hada.io/topic?id=6050","Mozilla Firefox는 이대로 괜찮을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Mozilla Firefox는 이대로 괜찮을까?

   파이어폭스 사용자가 줄은 원인과 대안
    1. 웹 브라우저 기술 경쟁은 필수다
    2. 웹 기술 주도권을 되찾아야 한다
    3. 오픈 소스는 자생할 수 있다

     ""모든 사람이 다양한 선택 옵션을 가질 수 있다면, 더 나은 인터넷을 만들 수 있습니다.""

   IE 때는 웹표준에 대한 논의나 스펙이 지금처럼 무르익기 전에 지배적 자리에 오른 게 아니라서, 시장의 주도자가 범용적인 표준안에 계속 영향력을 끼친다면 글에서 제기하는 시나리오가 제대로 작동할지 걱정 되네요.

   그리고 웹 기술 주도권에서 빼놓을 수 없는 것이 모바일인데 파폭 모바일은 너무 불안정하더라고요. 한 때 불여우 썼던 사람으로서 모질라가 다시 건강해지면 좋겠습니다
"
"https://news.hada.io/topic?id=5994","네덜란드, 애플의 대체결제수단 정책은 불합리하므로 5백만유로 추가 벌금 부과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               네덜란드, 애플의 대체결제수단 정책은 불합리하므로 5백만유로 추가 벌금 부과

   - 네덜란드에서 데이팅앱에게 다른 인앱결제 수단을 허용해야 한다는 판결에 대해
   - 애플이 제시한 방법은 수수료 27%에 매달 수익보고서를 제출해야 한다는 것
   - 데이팅앱 개발자들은 이를 위해서는 아예 새로운 앱을 개발해야 하므로, 네덜란드 ACM(소비자 시장국)은 이것이 전혀 합리적이지 않고 불필요한 장벽을 만든다는 결론을을 냄
   - 따라서 ACM의 요구사항을 따르지 않았으므로, 추가로 5백만 유로의 벌금을 내야함. 현재 전체 벌금은 2천만 유로

   - 애플, 네덜란드 데이팅앱의 대체결제수단에 27% 수수료 부과 https://news.hada.io/topic?id=5911
"
"https://news.hada.io/topic?id=5992","주요 국내 IT 및 개발자 컨퍼런스 다시보기 영상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      주요 국내 IT 및 개발자 컨퍼런스 다시보기 영상

   비교적 최근에 진행된 국내 IT 및 개발자 컨퍼런스 영상의 다시 보기 링크를 한곳에 정리해 봤습니다.
   분야별로 주요 기업 및 커뮤니티의 컨퍼런스를 최대한 찾아서 정리했습니다.
   혹시 누락되어 추가하고 싶거나 잘못된 정보가 있다면 깃헙이슈나 댓글로 제보해 주시면 반영할께요!!

   와.. 좋네요.

   와우

   와 좋아요~~~
"
"https://news.hada.io/topic?id=6040","Filestash - 사용하기 쉬운 웹 파일 관리자 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Filestash - 사용하기 쉬운 웹 파일 관리자 오픈소스

     * 브라우저 상에서 다양한 소스의 파일 관리 및 업로드/다운로드
     * FTP/FTPS/SFTP, WebDAV, S3/B2, Dropbox, Google Drive, LDAP, Git, MySQL, CardDAV, CalDAV 등 지원
     * 비디오/오디오 플레이어, 이미지 뷰어 내장
     * 비디오/이미지 트랜스코딩
     * Full Text 검색
     * 공유 링크도 완전한 네트워크 드라이브로 동작
     * 모바일 지원
     * Full Org Mode 클라이언트(emacs)
"
"https://news.hada.io/topic?id=6095","2025년의 데이터 드리븐 회사 예측","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2025년의 데이터 드리븐 회사 예측

     ""스마트 워크플로우와 사람과 머신간의 매끄러운 상호작용이 기업의 대차대조표 같이 표준이 되고, 대부분의 직원이 데이터를 사용하여 거의 모든 업무를 최적화하게 될 것""

    1. 모든 의사 결정, 상호 작용 및 프로세스에 데이터가 포함
    2. 데이터는 실시간으로 처리되고 전달됨
    3. 통합되고 즉시 사용 가능한 데이터를 저장하는 유연한 데이터 저장소 : 시계열,그래프,NoSQL..
    4. 데이터 운영 모델이 데이터를 하나의 제품 처럼 취급
    5. 최고 데이터 책임자(CDO)의 역할이 수익 창출까지 확대
    6. 데이터 에코시스템 멤버십이 표준이 됨
    7. 데이터 관리는 개인 정보 보호, 보안 및 복원력(resiliency)를 위해서 우선순위가 지정되고 자동화됨
"
"https://news.hada.io/topic?id=6037","Waifu Labs V2 - AI가 그리며 커스텀 가능한 일본 애니메이션 스타일 그림 생성기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Waifu Labs V2 - AI가 그리며 커스텀 가능한 일본 애니메이션 스타일 그림 생성기

본문 내용 요약

     * AI가 그리는 일본 애니메이션 스타일 프로필 사진 생성기입니다. 링크글은 제작자가 AI를 훈련한 과정을 적어놨어요.
     * 이 생성기의 특이점 중 하나는, 같은 캐릭터를 유지하면서도 다른 포즈로 그려달라고 요청할 수 있으며. 혹은 같은 포즈로 그려달라고 요청하면서도 다른 스타일로 그릴 수 있는 점입니다.
     * 제작자는 이 솔루션을 통해 https://www.arrowmancer.com/ 이라는 게임의 포트레이트를 생성하는데 사용했다고 해요. 이로써 얻은 장점은 '무한하게 사용자 정의할 수 있는 포트레이트' 라고 합니다.
     * 제작자는 사람과 기계 생성간 협업을 통해, 창의성의 새로운 시대가 열리길 기대한다고 해요.

서비스 소개

     * 이 사이트 상단의 Generate라는 버튼을 누르면 여러분의 프로필 사진도 만들 수 있어요.
     * 우선 처음 '최초 시작할' 그림을 골라야 해요. 이걸 기반으로 컬러와 디테일, 포즈가 달라져요.
     * 우측 하단에 있는 새로고침 버튼을 누르면 새로운 선택지들이 나오고. 이 버튼은 모든 단계마다 있어요.
     * 그리고 지금 상태가 마음에 든다면 Continue를, 이전 상태로 돌아가고 싶다면 Back을 누르시면 돼요.
     * 그 다음으로는 컬러인데요. 채색 스타일을 정할 수 있습니다.
     * 그 다음으로는 디테일인데요. 그림체 스타일을 정할 수 있습니다.
     * 마지막으로는 포즈인데요. 현재 캐릭터의 느낌을 유지하면서 헤어 스타일과 포즈를 바꿔줍니다.

   저는 예전에는 기계 생성을 '제 일자리를 위협할' 두려운 존재로 막연히 생각하고 있었는데요. 오히려 귀찮은 일들은 위임할 수 있는 멋진 친구라고 생각해보는 것도 좋지 않을까, 본문 마지막 줄을 보고는 그렇게 생각하게 되었어요.
"
"https://news.hada.io/topic?id=5999","Rust Survey 2021 결과","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Rust Survey 2021 결과

   - 113개국 9345명 참여
   ㅤ→ 미국 24%, 독일 12%, 중국 7%, 영국 6%
   - 75%가 프로덕션 수준의 코드 작성 가능(27%는 아직 헤매긴 하지만)
   - 실 업무 사용: 안씀 41% > 주 사용 언어 22% > 정기적으로 쓰는 언어중 하나 17% > 가끔 사용 18%
   - 도입한 사람중 83%는 Rust가 성공을 도왔다고 평가
   - 79%가 도입에 드는 비용보다 가치 있다는 평가
   - Rust 도입때문에 팀 속도가 저하되었다 13%
   도전 과제들
   - 가장 시급한 해결문제는 컴파일 속도 61% (많이 개선 되긴 했지만)
   - 그외 개선 필요한 부분 : 디스크 공간(45%), 디버깅(40%), GUI개발(56%)
   - IDE가 지난 1년간 가장 많이 개선(56%)
   - Rust의 미래에 대한 걱정
   ㅤ→ ""산업에서 사용이 충분하지 않을지도 모름"" 38%
   ㅤ→ 언어가 너무 복잡해 지는 것 33%
   ㅤ→ 언어와 커뮤니티가 건강하게 운영되는 지원을 받지 못할지도 모름 30%

   제가 평가하는 Rust 는...
   ""Rust 좋죠. 좋은데...""

   Rust의 미래에 대한 걱정부분이 나름 Go의 강점이 되겠다 싶습니다.
   - Go가 산업에서 점점 많이 쓰이고 있고
   - 언어의 복잡성에 대한 경계가 커뮤니티에서 끊임없이 논의되고 있으며(예를 들어 제네릭 도입에 대한 오랜 논의)
   - 관리의 주체가 구글쪽이다 보니 기술적, 운영적 신뢰가 있음

   - Rust Survey 2020 결과 - https://news.hada.io/topic?id=3421
   - Rust Survey 2019 결과 https://news.hada.io/topic?id=1917
"
"https://news.hada.io/topic?id=6064","SQLite 3.38.0에 JSON 쿼리 연산자 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     SQLite 3.38.0에 JSON 쿼리 연산자 추가

     * PostgreSQL/MySQL에 있는 JSON 연산자와 호환
       -> : 인덱스 또는 키로 JSON 배열의 요소를 JSON으로 가져오기
       ->> : 인덱스 또는 키로 JSON 배열의 요소를 텍스트로 가져오기
     * 3.38 부터는 JSON 지원이 기본으로 활성화 되어 컴파일시에 옵션 줄 필요 없음
"
"https://news.hada.io/topic?id=5989","2022년 웹 개발에서 고려해야 할 환경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2022년 웹 개발에서 고려해야 할 환경

   ""The baseline for web development in 2022"" 의 번역 글
   - 2021년의 가장 큰 변화 – Internet Explorer의 은퇴
   * 웹 개발의 새로운 베이스라인
   ㅤ→ 성능 측면에서는 저사양의 Android 기기
   ㅤ→ 웹 표준 측면에서는 2년 전의 Safari
   ㅤ→ 네트워크 측면에서는 4G를 고려해야함
   - 우리는 사용자의 요구에 얼마나 잘 대응하고 있을까요?
   ㅤ→ 2021년 웹 사이트 크기의 중앙값
   ㅤ→ HTML과 CSS 사용
   ㅤ→ 성능
   ㅤ→ JS 라이브러리와 프레임워크
   ㅤ→ 접근성
   - 개선하고 싶은 사람을 위한 전반적인 팁
   ㅤ→ 무언가를 CSS로 할 수 있다면 CSS를 사용하세요
   ㅤ→ 사용하고 있는 툴셋을 평가해 보세요
   ㅤ→ 최신 브라우저를 대상으로 빌드하세요
   ㅤ→ 접근성을 처음부터 고려하세요

   IE는 MS에서는 놓아주었지만, 일부 일반 사용자는 아직 놓지 않았습니다.
"
"https://news.hada.io/topic?id=6002","WebGL 2.0 모든 브라우저에서 완전히 지원 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     WebGL 2.0 모든 브라우저에서 완전히 지원 시작

   - 2017년에 처음 출시될 때 부터 크롬/FF는 지원했지만, 다른 브라우저에선 1.0 폴백을 필요로 했음
   - 마지막으로 iOS/MacOS용 Safari 15에서 WebGL 2.0 지원되면서 대부분의 브라우저에서 지원됨
   ㅤ→ Metal 기반으로 WebGL 지원
   - 이제 차세대인 W3C의 WebGPU 스펙 공식 출시를 기다리는 중
   ㅤ→ WebGL과는 달리 Direct3D 12, Metal, Vulkan 등을 기반으로 하는 고성능 그래픽 API
"
"https://news.hada.io/topic?id=6013","자바스크립트 빌드 & 번들러 툴인 vite 문서를 번역했어요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   자바스크립트 빌드 & 번들러 툴인 vite 문서를 번역했어요

   약 9개월에 걸쳐 3명의 개발자분들과 함께 vite 공식 문서 번역을 진행했습니다.
   현재 모든 문서 번역이 완료된 상태이며, GitHub Actions를 이용해 원본 문서와 매일 sync-up을 하고 있어 최신 상태를 유지하고 있습니다.
   - 번역된 사이트 : https://vitejs-kr.github.io/
   - 번역 리포지터리 : https://github.com/vitejs-kr/vitejs-kr.github.io
   - 원본 문서 : https://vitejs.dev/
   필요하신 분께서는 참고해주세요.
   감사합니다.

   수고하셨습니다.

   👍🏻👍🏻
"
"https://news.hada.io/topic?id=6048","DeepETA: Uber가 딥러닝으로 도착시간을 예측하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   DeepETA: Uber가 딥러닝으로 도착시간을 예측하는 법

     * 우버는 ETA를 요금 계산, 픽업 시간 예측, 라이더-드라이버간 매칭, 배달시간 계획등에 사용
     * 전통적인 ETA엔진들은 도로 네트웍을 작은 단위로 나눠서 그래프에 가중치를 두어서 계산
       → 최단경로 알고리듬으로 최적의 경로를 찾고, 가중치를 추가
     * 하지만 ""지도는 지형이 아님"". 도로그래프는 단순히 모델이고, 실제 상황을 반영하지 못함
     * 또한 라이더/드라이버들이 어떤 경로를 선택할지는 모름
     * 도로 그래프 기반 추측 위에 과거 데이터와 실제 시그널을 결합해서 머신러닝 모델을 훈련시켜서 더 나은 ETA를 찾아냄
     * 몇년간 우버는 ETA예측 개선을 위해 ""Gradient-boosted decision tree ensembles""을 사용
       → 하지만, 이제 Apache Spark + XGBoost로는 더 키울 수 없는 한계에 도달했음
     * 그래서 딥러닝으로 바꿔서 세개의 주요 문제점을 해결
          + Latency : 몇 밀리초 내에 ETA 계산
          + Accuracy : MAE(Mean Absolute Error, 평균 절대 오차)를 XGBoost 모델보다 개선
          + Generality : 우버의 모든 비즈니스에서 전 세계적으로 ETA 예측을 제공
     * 7가지의 신경망 아키텍처를 테스트
       → 최종적으로 Self-Attention을 이용한 Encoder-Decoder 아키텍처(Transformer) 가 가장 정확했음
       → 정확도는 높지만 속도가 너무 느려서, 계산을 빠르게 개선한 Linear Transformer를 선택
"
"https://news.hada.io/topic?id=6051","쏘카의 데이터 디스커버리 플랫폼 도입기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         쏘카의 데이터 디스커버리 플랫폼 도입기

    1. 데이터 디스커버리란 무엇인가요?
          + 정의 / 중요성
          + DDP의 정의
    2. 데이터 디스커버리 플랫폼이 왜 필요한가요?
          + 도입 효과 : Data Discovery/Data Governance 관점
    3. 데이터 디스커버리 플랫폼 비교 분석
          + Datahub VS Amundsen
              1. 구조
              2. 메타데이터 주입 방식
              3. UI
              4. 문서 기능
              5. 오너십
              6. 데이터 계보(Data Lineage)
              7. 인증 및 권한
              8. 데이터 소스 지원
              9. 사용자 이용 통계
             10. 서포트
    4. 최종 결정 : Datahub!
          + 사용성의 편리함
          + UI의 깔끔함
          + 빠르고 풍부한 서포트

     * Data Discovery Platform(DDP)의 모든 것
     * Nemo - 페이스북의 데이터 디스커버리 플랫폼
"
"https://news.hada.io/topic?id=6015","Node.js 트레이드 마크, OpenJS 재단으로 이관 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Node.js 트레이드 마크, OpenJS 재단으로 이관

   - OpenJS는 기존엔 Joyent로 부터 6년간 무료 영구 라이센스를 받아서 사용
   ㅤ→ ""Node.js"" 와 육각형 로고
   - 이제 Joyent에서 OpenJS 재단으로 소유권과 관리가 이전

   Joyent는 2016년에 삼성이 인수했고 현재 주력 상품은 Triton 클라우드입니다.
"
"https://news.hada.io/topic?id=6022","[공식한글] 넷플릭스 문화, 가치관","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          [공식한글] 넷플릭스 문화, 가치관

   넷플릭스 문화와 인재상에 대한 한글 공식 페이지입니다.
   넷플릭스 채용 사이트에 포함된 페이지입니다.
   ----
   # 넷플릭스의 문화
   즐거움을 추구하는 것은 우정을 나누는 것처럼 우리 모두가 지닌 기본적인 욕구입니다. 우리는 상호작용을 통해 서로 공감대를 형성해 나갑니다. 넷플릭스는 엔터테인먼트 콘텐츠를 통해 함께 웃고, 공감하며, 기뻐할 수 있는 즐거운 세상을 만들고 싶습니다.
   이를 위해 넷플릭스는 독특한 기업 문화를 구축했습니다. 아래로 넷플릭스 문화를 확인할 수 있습니다.
   넷플릭스는 최고의 인재를 채용하고자 노력하며, 더불어 진실성, 탁월성, 존중, 포용과 협업을 매우 중요한 가치로 여깁니다. 또한, 넷플릭스에는 다음과 같은 특징도 있습니다.
   * 직원 개인의 주체적인 의사 결정을 장려합니다.
   * 정보를 투명하게, 널리, 적극적으로 공유합니다.
   * 서로에게 대단히 솔직합니다.
   * 매우 유능한 사람만이 모입니다.
   * 규칙을 지양합니다.
   넷플릭스의 핵심 철학은 ‘절차보다 사람’입니다. 쉽게 말해 넷플릭스는 훌륭한 인재가 드림팀을 이뤄 함께 일하는 곳입니다. 이런 가치관 덕분에 넷플릭스 조직은 융통성, 흥미, 동기 부여, 창의성, 협동심 및 성취면에서 돋보입니다.
   # 넷플릭스의 가치관
   기업의 진정한 가치관은 누구를 인정하고 누구를 떠나 보내는지에서 드러납니다. 아래에 넷플릭스의 핵심 가치, 즉 넷플릭스가 중시하는 행동과 역량을 정리했습니다. 이들 가치가 내 이야기 같고 내가 함께 일하고 싶은 이상적인 동료의 모습에 가까울수록 넷플릭스와 잘 맞을 가능성이 높습니다.
   ## 판단력 (Judgment)
   - 불명확한 혹은 불확실한 상황에서도 현명한 결정을 내립니다.
   - 표면적으로 드러난 상황 혹은 이슈 진단에 그치지 않고 근본 원인을 파악합니다.
   - 전략적으로 생각하고, 하려는 일과 하지 않고자 하는 일을 명확히 구분합니다.
   - 뒷받침되는 데이터를 통해 직관적으로 판단합니다.
   - 단기보다 장기적인 안목으로 결정합니다.
   ## 소통 (Communication)
   - 말과 글이 간결하고 명료합니다.
   - 서로 경청 및 이해하려고 노력한 뒤 반응합니다.
   - 스트레스가 높은 상황에서도 평정을 유지하며 명석하게 사고합니다.
   - 세계 각지 다른 언어권의 사람들과 유연하게 소통하고 협업합니다.
   - 동료에게 솔직하며 건설적인 피드백을 적시에 제공합니다.
   ## 호기심 (Curiosity)
   - 빠르고, 열정적으로 배웁니다.
   - 전문 분야가 아닌 영역에도 실질적인 도움을 줍니다.
   - 타인이 놓친 연관 관계를 찾아냅니다.
   - 전 세계 넷플릭스 회원을 이해하려 하고, 어떻게 더 나은 엔터테인먼트 경험을 제공할지 고민합니다.
   - 다양한 관점으로 상황을 봅니다.
   ## 용기 (Courage)
   - 어려운 상황에서도 무엇이 회사의 이익에 가장 부합하는지 본인의 생각을 분명하게 전달합니다.
   - 고뇌하지 않고도 결단을 내립니다.
   - 실패할 가능성이 있어도, 위험을 피하지 않고 용감하고 현명하게 도전합니다.
   - 넷플릭스의 가치에 부합하지 않는 행동에 문제를 제기합니다.
   - 진실을 추구하기 위해, 스스로에게 미칠 영향을 감수합니다.
   ## 열정 (Passion)
   - 늘 탁월성을 추구하며 주변 사람들의 귀감이 됩니다.
   - 넷플릭스 회원을 아끼고 넷플릭스의 성공을 염원합니다.
   - 쉽게 포기하지 않으며 낙관적입니다.
   - 자신있더라도 자만하지 않습니다.
   ## 헌신 (Selflessness)
   - 본인이나 소속 팀이 아니라 넷플릭스 전체의 이익을 우선시합니다.
   - 열린 자세로 훌륭한 아이디어를 모색합니다.
   - 동료를 돕는데 시간을 아끼지 않습니다.
   - 정보를 투명하게, 널리, 적극적으로 공유합니다.
   ## 혁신 (Innovation)
   - 참신하고 유용한 아이디어를 제안합니다.
   - 어려운 문제에는 개념을 재정립해 해결책을 찾아냅니다.
   - 보편적 가설에 이의를 제기하고 더 좋은 접근법을 제시합니다.
   - 복잡성을 줄이고 단순화해 조직의 민첩성을 유지합니다.
   - 변화에 잘 적응합니다.
   ## 포용 (Inclusion)
   - 배경과 문화가 다양한 사람들과 효과적으로 협업합니다.
   - 다양한 시각을 장려하고 수용하여 더 좋은 결론을 도출합니다.
   - 누구나 편견이 있다는 사실을 받아들이고, 편견을 극복하고자 노력합니다.
   - 누군가 소외되는 상황을 좌시하지 않습니다.
   - 넷플릭스의 다양한 인적 구성이 업무에 미치는 영향을 외면하지 않고, 그 실제 영향에 관심을 기울입니다.
   ## 진실성 (Integrity)
   - 솔직하고 진실하며 숨김이 없고, 비정치적입니다.
   - 동료 직원에 관한 의견은 당사자 앞에서 이야기할 수 있는 것만 말합니다.
   - 실수를 기꺼이, 공개적으로 인정합니다.
   - 직급이나 견해 차이와 관계없이 상대를 존중합니다.
   - 관련 정보는 공유하기가 다소 꺼려지더라도 항상 공유합니다.
   ## 영향력 (Impact)
   - 중요한 일을 많이 해냅니다.
   - 뛰어난 성과를 지속적으로 달성해 동료들의 신뢰를 받습니다.
   - 동료에게 긍정적인 영향을 줍니다.
   - 과정보다는 결과를 중시합니다.

   출처: https://jobs.netflix.com/culture?lang=한국어
"
"https://news.hada.io/topic?id=6028","물체 회전 능력 테스트 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            물체 회전 능력 테스트 하기

     * 2분동안 똑같은 물체를 얼마나 찾을 수 있는지 테스트
     * 6개중 2개만 같은 도형
     * 오픈소스 : C++로 작성. Emscripten을 이용하여 WebAssembly로 컴파일

   제목이 좀 이상하네요.
   물체 자체가 회전하는 능력을 말하는 건가? 하고 링크를 눌렀더니
   동일한 물체를 찾는 거였네요.

   예를 들어 ""회전된 3차원 물체중 동일한 쌍 찾는 능력 테스트하기"" 라고 하면 좀 더 명확할것 같습니다.
"
"https://news.hada.io/topic?id=6024","I was wrong, we need crypto","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      I was wrong, we need crypto

   루비 온 레일즈의 창시자 dhh는 아래와 같은 이유들로 인해 줄곧 암호화폐에 부정적인 입장을 가지고 있었음.
     * 비트코인 채굴에 사용되는 막대한 에너지
     * 비트코인의 낮은 처리량과 높은 트랜잭션 비용
     * 미친듯한 가격 급등락

   하지만 최근 캐나다 트럭커 시위대 사건을 통해 자신의 생각이 바뀌었다고 고백함.

   발단:
   백신 접종 의무화를 반대하는 캐나다 트럭커들의 시위가 있었음.
   GoFundMe라는 플랫폼을 통해 수백만 달러의 기부금이 모였지만, 캐나다 정부의 압박이 있었고 기부금은 약관 위반 등을 이유로 시위대에게 전달되지 못함.
   더불어 시위대 및 기부자들의 은행 계좌가 동결되었음.

   -> 이런 일이 서구권 민주 국가에서 벌어졌다는 사실을 믿을 수 없으며, 암호화폐를 원하는 베네수엘라/중국/이란 국민들과 자신의 처지가 다르지 않음을 깨닫게 됨.

   https://technologyreview.kr/%eb%b0%b1%ec%8b%a0-%eb%b0%98%eb%8c%80%ec%a…

   트럭커 시위대 사건에 대해서 좀 더 자세히 알아보고 싶으시다면 이 사이트를 확인해보세요!

   본문에서 인용한 트윗중 자유로운 나라라면 거래할 자유(freedom to transact) 도 있어야 한다는 내용이 인상깊네요.

   요약만 보면 급격하게 결론이 비약한 느낌이 있네요.

   저도 roxie님과 비슷한 느낌을 받아서 본문을 보고 왔습니다.
   중앙 정부에서 특정인의 계좌를 동결하고 (트럭커들), 그들에게 기부한 사람들 조차 법적 조치를 받을까 발뻗고 자지 못하는 상황에 대한 비판인것 같습니다.
   더불어 budlebee님 말씀처럼 freedom to transact가 freedom of speech/assembly/religion을 가능케 해주는 바탕이기에 캐나다에서 이번의 조치가 더 충격적인 것 같습니다.

   결국 정부에서 국민을 제압하기 위한 수단으로 개인의 계좌/경제적 자유를 제한 하였는데, 이런일이 서구 국가에서 발생한 것이 아주 놀라웠으며, 앞으로 이런 일을 앞으로 방지하기 위해서 암호화폐 (crypto)라 필요하다고 결론을 짓는게 아닌가 싶습니다.

   짧게 요약하면서 본문의 의미를 온전히 전달하는게 쉽지 않네요.

   민주주의 선진국인 덴마크 국적의 dhh는 그동안 비트코인의 순기능에(자산을 자유롭게 소유/사용할 권리) 대해 크게 필요성을 느끼지 못한것 같습니다. 이미 본인은 그러한 권리를 갖고 있으며 누구도 방해할 수 없다고 생각한게 아닐까 싶습니다.
   미국 트럼프 정부에서 발생한 사건이라면 대수롭지 않게 넘겼을 테니, 오히려 캐나다에서 이런 일이 일어난 것이 기쁘다고까지 표현하고 있습니다.
"
"https://news.hada.io/topic?id=6027","Roboto Serif 폰트 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Roboto Serif 폰트 공개

     * 안드로이드의 시스템 폰트인 Roboto 패밀리의 새로운 오픈소스 폰트
     * 장문의 기사나 소설등을 읽기에 적합한 폰트
     * 가변(Variable) 폰트
          + 두께, 너비
          + Grade : 너비를 변화시키지 않는 선에서 변하는 두께 설정하기
          + Optical Size Axes : 특정 사이즈 별로 최적화된 서체를 여러개 가짐
               o 총 6가지 : micro, small text, text, deck, display, poster
               o CSS에서 font-optical-sizing 으로 선택 가능
     * 최초의 Serif 서체중 하나인 Georgia가 나온지 20년
       → 그 시절엔 웹을 ""한달에 30분"" 봤지만, 요즘은 ""하루에 7시간씩"" 봄
"
"https://news.hada.io/topic?id=6034","페이스북은 저소득 국가들의 인터넷 접속을 돕고 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     페이스북은 저소득 국가들의 인터넷 접속을 돕고 있을까?

     9년 전 페이스북(메타)은 낙후된 인터넷 접근성을 개선하도록 돕겠다는 원대한 계획을 발표했다. 저소득 국가들에서 모바일 인터넷을 이용하려면 선불제로 데이터를 구입해야 하지만 프리 베이직스(Free Basics)는 어느 정도 무료 접속을 제공한다. 프리 베이직스가 가능한 국가들은 늘어나는 중이다. 그러나 오히려 디지털 평등이 아니라 디지털 식민주의를 조장한다는 비판에 직면하기도 했다. 최근에는 소프트웨어의 결함 때문에 무료 인터넷 접속에 데이터 요금을 부과하는 문제가 발견되었다.

     * 인터넷 연결되지 못한29억명
     * 프리 베이직스(Free Basics)
     * 고정된 글로벌 게이트웨이
     * 프리 모드의 한계
     * 유료 데이터의 추가 구입
     * 소프트웨어 오류
     * 비즈니스 전략 vs.사회적 책임
     * 인도의 데이터 식민주의 논쟁
     * 아프리카에서 확대되는 프리 베이직스
     * 권위주의 국가들
     * 무료 인터넷 접속 방법들

   어려운 얘기라고 생각해요. 기업 입장에서는 본사 인프라를 이용하는 대신 최대한의 광고 효과를 누리려는게 당연하지 않을까요? 부작용 없는 발전은 없다고 생각하는 입장에서는 단순히 메타를 비난할 문제는 아니라고 생각합니다..
    1. 기울어진 운동장이라 경쟁을 저해합니다. 네팔도 페북이랑 구글은 무료로 해줘서 그것만 쓰더라고요. 그러니 가뜩이나 새로운 비즈니스가 나오기 힘든데, 더 힘들죠.
    2. 독과점이라 폐혜가 있어도 해결이 안됩니다. 가도 페북 싫어서 가는데다 인스타니...

     * https://newspeppermint.com/2022/02/28/npc_facebookfilewsj/
     * https://newspeppermint.com/2021/11/13/eucompetitiongoogle/

   개인적으로는 전체 인터넷의 극히 일부만을 허용하며, 특히 Facebook이 작년 겪었던 논란이 '극단적인 정보를 아무런 관리도 없이 방치' 하는 것임을 생각해보면 시민 사회의 우려가 타당하다고 생각합니다. Facebook이 없었다면 그 지극히 적은 인터넷마저도 얻지 못했을거라는 점은 동의하지만 현존 시스템에는 Facebook의 자체적인 결함과 서비스 제공자가 Facebook이라는 게 합쳐져 분명한 결함이 있고. 시민 사회의 역활은 그걸 바로 잡는거라고 생각해요.

   가장 행복한 방법은 비영리 제단이 현지화를 좀 더 적극적으로 하여 많은 이들에게 최소한의 정보 수준을 보장해주는 것 같아요. 모질라가 좀 더 힘냈으면... (... ) Firefox라도 깔아야 하나..

   저도 이런 관점에 동의합니다.

   비록 무료 인터넷이 수익을 위한 넛지 상품이라 해도, 사람들에게 제한적이게나마 정보접근권을 늘려준건 의미있는 일일테구요.

   시스템이 지속 가능성을 가지려면 수익을 창출할 수 있어야 된다고 생각하기에, 메타의 인터넷 보급 전략이 일방적인 약탈이라기보단 서로가 윈윈 할 수 있는 방안이라는 생각이 들어요.

   식민주의 부분이 인상적입니다.
   제 생각은 결국은 선진국과 동잃한 인터넷 환경이 아니라면 의미가 없다입니다.

   낙후국에게 우물을 파주거나 통에 물을 담아서 운송하기 쉽게 해주는 것은 거짓입니다.
   이들에게 선진국과 같은 상하수도 시스템을 마련할 계획과 실행이 필요합니다.
"
"https://news.hada.io/topic?id=6077","Open Web Advocacy - 애플의 타사 브라우저 금지 규칙에 이의 제기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Open Web Advocacy - 애플의 타사 브라우저 금지 규칙에 이의 제기

     * 오픈웹의 미래를 옹호하기 위해 엔지니어들이 모인 그룹
     * 규제 기관 및 입법/정책 입안자 등에게 업계의 주요 반경쟁 문제와 해결 방법을 이해하는데 필요한 기술 세부 정보를 제공하는 것을 목표
     * 현재 가장 큰 위협은 '애플이 iOS에서 써드파티 브라우저 엔진을 사용하지 못하게 막는 것'
     * 모든 iOS용 써드파티 브라우저는 Safari에 껍데기만 씌운 것이며, 실제로 WebKit이 제공하는 일부 API를 사용하지 못하게 막아둠
     * 이는 모바일에서의 웹앱과 브라우저 기술이 발전하는 것을 막고 있음
     * 영국 시장조사국에 이를 알리고, 전세계 다른 규제 기관에도 알려서 이를 개선하고자 함
     * 모바일 사파리에서만 되거나 제한된 기능들
          + 사파리는 비디오를 전체화면으로 재생하는게 되지만, 다른 브라우저들은 불가(아이패드에서는 되지만 아이폰에서만 안되게 막음)
          + Canvas를 사용한 풀스크린 게임 불가
          + 다른 브라우저는 웹앱 설치불가. 사파리만 가능
          + 사파리만 브라우저 확장 사용가능(광고 차단 기능 같은)
          + 다른 브라우저는 애플 페이 사용 불가
          + 사용자의 기본 브라우저 세팅과 상관없이 iOS는 항상 인앱브라우저를 Safari로 사용
          + 그외에 30여가지 API 미지원

   저는 아이폰 크롬앱에서 전체화면 동영상 되는거같은데,,, 다른 얘긴가?

   크롬(크로뮴) 기반이 아닌 브라우저 중 유일하게 대항력이 있는 수준의 점유를 갖고 있는 브라우저가 ios 사파리 뿐인 것 같고(그 기반이 ios의 브라우저 제한이고)
   주요 미지원 기능 중 상당수가 보안과 프라이버시 관련으로 보이기도 해서
   참 고민스러운 주제네요.
   일개 개발자로서는 그냥 한플랫폼의 브라우저가 고정인 게 더 낫다고 생각하는 측면도 있고요.

   응원합니다.
"
"https://news.hada.io/topic?id=6052","가볍게 살펴보는 새로운 한/글 파일 포맷 HWPX","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      가볍게 살펴보는 새로운 한/글 파일 포맷 HWPX

    1. 한/글 파일의 역사
    2. HWPX 파일의 구조 확인하기
    3. 문서 본문 내용은 어떻게 관리되는가?
    4. 익숙한 HTML 코드와 비교해 보기
    5. HWPX 파일 공통으로 참고하면 좋을 Tip

   hwp.js - 아래아한글 오픈소스 뷰어
"
"https://news.hada.io/topic?id=6016","Netlify Graph 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Netlify Graph 공개

   - GraphQL을 이용해서 주로 쓰는 웹 API 호출을 쉽게 할 수 있도록 지원
   ㅤ→ GitHub, Stripe, Salesforce, Box, Spotify, Contentful 등 (더 추가 예정)
   - Netlify 대시보드에서 연결하면 바로 사용 가능하며, 작성된 쿼리로 서버리스 함수 코드를 생성
"
"https://news.hada.io/topic?id=6035","Show GN: K-Startup 사업공고 알림 슬랙 봇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: K-Startup 사업공고 알림 슬랙 봇

   K-Startup 사업공고를 아침마다 요약해주는 슬랙 봇을 만들었습니다.

   데이터는 공공데이터 포털에서 받아오고 있습니다.
   서버는 Firebase Functions의 pubsub.schedule 기능을 사용,
   웹페이지는 Flutter로 개발해 Firebase Hosting을 통해 호스팅 하고 있습니다.

   스타트업 종사자분들의 건승을 기원합니다~

   설치하고 나면 최근 뉴스를 한두개 보내도록 하면 어떨까요?

   긱뉴스 슬랙봇도 처음에 설치하면 최근에 올라온 뉴스 3개를 자동으로 전송하게 되어있습니다.

   말씀해주신 기능 추가했습니다.
   설치가 되었다는 느낌이 들어 좋네요. 감사합니다~

   오 플러터로 만든 웹앱이라 통째로 캔버스로 잡히나요? 텍스트 선택같은게 전혀 안되는거 보니깐요. 플러터 웹앱은 첨 보는데 신기하네요 ㅎㅎ

   저도 신기해서 찾아봤더니, 렌더링 방식을 선택할 수 있나봐요 (HTML or Canvas)
   https://docs.flutter.dev/development/tools/web-renderers

   랜딩 페이지에 최근에 보낸 알림 목록을 보여주고 그 아래 슬랙 추가 버튼을 두면 좀 더 효과가 좋을 것 같습니다.
   무슨 알림이 오는지도 모른 채 먼저 슬랙 연동을 하기는 꺼려져서...

   오! 좋은 아이디어네요 간단하게 추가해 보았습니다 의견 감사합니다~

   디스코드 웹훅 지원하면 좋을 것 같아요.

   서버가 안정적으로 운영되면 후에 디스코드, 잔디도 추가하겠습니다 감사합니다~

   원하는 카테고리만 받아보는 필터기능은 개발중입니다~
"
"https://news.hada.io/topic?id=6014","크롬과 Firefox, 버전 100 도달 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       크롬과 Firefox, 버전 100 도달 예정

   - 크롬은 3월말, FF는 5월초 버전 100에 도달
   - 버전번호가 3자리로 바뀌면서 UA정보중 버전 번호를 잘못 파싱하는 사이트에 문제가 발생할 수 있음
   ㅤ→ 12년전 버전 10에 처음 도달했을 때에도 여러 UA 파싱 라이브러리가 문제를 일으킴
   - 각 브라우저들은 버전을 100으로 미리 세팅하도록 하는 옵션을 제공해서 미리 테스트 중
   ㅤ→ chrome://flags/#force-major-version-to-100
   ㅤ→ Firefox 100 User-Agent String
   - 웹사이트 관리자라면 위 옵션으로 미리 테스트 해볼 것
   - UA 파싱 라이브러리 개발자는 100 이상의 값이 잘 파싱 되는지 테스트 추가
"
"https://news.hada.io/topic?id=6097",":latest 를 사용하지 마세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           :latest 를 사용하지 마세요

     * Dockerfile 에서 :latest 는 CD의 가장 중요한 요구사항인 ""재현 가능한 멱등 빌드""를 깸
       → 빌드를 실패하게 할뿐만 아니라 프로덕션 오류를 발생시키기도 함
     * 쿠버네티스 Pod Manifest에서 latest를 지정하는 것은 더 안 좋음
       → Dockerfile에선 롤백이라도 가능하지만, 배포 manifest에서 해버리면 새로운 Pod이 롤아웃되는 아무 시점에나 호환성을 깰 우려가 생김
     * PIP, Package.json, Terraform 등에서도 특정버전 이상의 것으로 지정하거나 버전을 명시하지 않으면 latest 사용과 똑같은 효과를 만듬
     * 프레임워크들이 제공하는 Lockfile 과 같은 기능은 꼭 사용할 것
          + 소스컨트롤에 락 파일 커밋
          + 새로운 기능 적용/버그픽스/보안픽스 등 할때 terraform init -upgrade 같은거 호출하고 락파일 커밋할 것
          + CI 도중에는 락파일 업데이트 하지 말기
          + 락파일 종류
               o Terraform : .terraform.lock.hcl
               o Python : Pipfile using Pipenv
               o Node/Yarn : yarn.lock
               o Go : go.sum 과 go.mod
     * 가능하면 런타임에서는 종속성 풀링 하지 말 것
       → 종속성을 배포가능한 아티팩트로 만들고, 버저닝 할 것
     * Twistlock / Grype 같은 서비스로 취약점 스캐닝할 것
"
"https://news.hada.io/topic?id=5993","삼성 갤럭시, 미국에서 구글 메시지 앱을 기본 메시징 앱으로 탑재예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 삼성 갤럭시, 미국에서 구글 메시지 앱을 기본 메시징 앱으로 탑재예정

   - 안드로이드의 메시징앱은 계속 복잡했음
   - RCS를 지원하는 구글 메시지 앱은 기존에도 사용은 가능했지만 기본 탑재는 아니었음
   - 유럽과 다른 지역에서 판매된 S21부터는 구글 메시지가 기본이 되었고, 이제 미국에서도 새로 출시되는 S22 부터는 상향된 RCS를 내장한 구글 메시지가 기본 메시징 앱으로 탑재
   - 기존의 삼성 메시지 앱도 설치는 되어있으나, 사용자가 선택해야만 기본앱으로 지정 됨
"
"https://news.hada.io/topic?id=6058","ECMAScript 스펙을 읽는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ECMAScript 스펙을 읽는 법

     * ES2022 같은 스펙 문서 읽는 방법을, 마치 스펙 문서처럼 표현/정리해서 설명한 글
     * 왜 읽어야 할까? : 모든 JavaScript 구현의 동작에 대한 가장 권위 있는 소스이기 때문
          + 브라우저, Node.js, IoT 기기 어디에서든
     * ECMAScript 스펙에 포함된 것과 포함되지 않은 것
     * 스펙 탐색하기 : (이 글의 저자는 아래처럼 5개 파트로 구분하는걸 선호)
          + Conventions and basics
          + Grammar productions of the language
          + Static semantics of the language
          + Runtime semantics of the language
          + APIs
     * 하지만 실제 스펙문서는 위처럼 정리되어 있지 않음. 각 챕터에 Grammar/Static/Runtime이 섞여 있음
     * 그래서 가장 중요한 Runtime Semantics 읽는 방법을 상세히 설명
          + 읽기는 쉽지만, 몇몇 단축 표현들이 이해하기 어려우므로 그에 대한 설명
          + Abstract Operations, [[This]], ? 와 !등..

   [ 번역글 ] ECMAScript 스펙을 읽는 법 by difkememd
   https://news.hada.io/topic?id=6188

   이 글의 번역본이 나오면 많은 분들에게 도움 되겠다는 생각도 드네요 ^^;
"
"https://news.hada.io/topic?id=6055","LogFX - 멀티플랫폼 오픈소스 로그 뷰어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LogFX - 멀티플랫폼 오픈소스 로그 뷰어

     * 대용량 파일도 빠르게 볼 수 있는 로그 뷰어
     * 갱신 멈춤 가능한 Tail 기능
     * 모든 로그파일의 특정 날짜/시간으로 이동 가능
     * 정규식을 이용한 문자열 하이라이팅
     * 여러 종류의 로그를 동시에 하이라이트 가능하게 그룹화 가능
     * 키보드로 모든 기능 지원
     * JavaFX 오픈소스

   오늘 실제로 어떤 스테이징 서버에서 잠시 써봤는데, 즉각적으로 올라오는 로그를 볼 때는 실시간성이 떨어져서 보는 데 좀 별로였습니다. 그 경우에는 차라리 Tail로 보는 게 낫더라고요. 과거 로그를 뒤져야 할 때는 유용할지도 모르겠습니다만…
"
"https://news.hada.io/topic?id=6079","모질라 개발자 사이트 MDN, 새로운 사이트로 개편","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      모질라 개발자 사이트 MDN, 새로운 사이트로 개편

     * 16년전 위키로 시작해서 최근에 GitHub이 호스팅하는 스태틱 사이트로 이관되었음
     * '커뮤니티'에 초점을 둔 새로운 홈페이지로 개편
          + 누구나 MDN에 기여 가능하며, 기여자들을 강조
     * 탐색을 향상하기 위한 새로운 디자인 적용
     * 새로운 로고
     * 프리미엄 구독 서비스인 MDN Plus 출시 예정

   2020년 12월에 GitHub으로 이관한 거라 ""최근""보다는 좀 더 이전이 아닐까 싶습니다 ^^
   https://hacks.mozilla.org/2020/12/…

   앗 본문도 16년과 비교해서 적다 보니 recently라고 표현했길래 최근으로 번역했는데 2년이면 긴세월이긴 하네요 ㅎㅎ
"
"https://news.hada.io/topic?id=6043","Stylo - JS용 오픈소스 WYSIWYG 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Stylo - JS용 오픈소스 WYSIWYG 에디터

     * 인터랙티브 디자인
     * 다양한 플러그인으로 커스터마이징 가능
     * 의존성 없고, 아무 프레임워크와도 잘 동작
     * 30kb의 작은 사이즈
     * 웹용 슬라이드 에디터인 DeckDeckGo 팀이 개발
"
"https://news.hada.io/topic?id=6088","Snowflake, Streamlit을 $800M에 인수","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Snowflake, Streamlit을 $800M에 인수

   Streamlit는 DE/DS들이 데이터 앱을 쉽게 만들 수 있는 도구를 만드는 회사(오픈소스로도 공개)

   Streamlit - 파이썬 코드를 커스텀ML도구로 쉽게 만들기

   The Information이 뽑은 2021년 가장 유망한 스타트업 50 에서도 뽑혔었는데 Snowflake가 인수했네요. 요즘 실적은 안 좋지만 인수는 잘한 것 같은데..
"
"https://news.hada.io/topic?id=6041","Nginx 설정 시 가장 많이 하는 10가지 실수 피하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Nginx 설정 시 가장 많이 하는 10가지 실수 피하기

    1. 워커당 File Descriptor가 충분하지 않음
    2. error_log off 는 없음
       access_log 는 off가 되지만, error_log는 off가 되지 않음. 이러면 off 이름을 가진 에러 로그 파일이 생성
    3. 업스트림 서버 연결에는 Keepalive를 활성화할 것
    4. 지시문 상속이 동작하는 방식 제대로 알기
    5. proxy_buffering off 사용 금지
    6. if 지시문의 잘못된 사용
    7. 과도한 헬스 체크 금지
    8. Metric 접근에 보안 설정하기
    9. 모든 트래픽이 같은 /24 CIDR 블록에서 오는 경우에는 ip_hash 대신 hash $binary_remote_addr consistent 사용
   10. 업스트림 그룹의 장점 활용하기
"
"https://news.hada.io/topic?id=6090","국제은행간통신협회(SWIFT) 결제망 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       국제은행간통신협회(SWIFT) 결제망 아키텍처

   SWIFT(Society for Worldwide Interbank Financial Telecommunication)는 전 세계 은행들이 다른 나라에 있는 은행과 금융 거래를 하기 위해 사용하는 메시징 시스템. 벨기에에 본부가 있으며, SWIFT 코드라 불리는 8-11자리 식별자로 송금 은행, 수신 은행을 식별함.

   SWIFT 코드는 1975년경 자체적인 형식으로 개발되었으나, 1994년 ISO 9362로 국제 표준이 정의되었음. 이후 두 번 더 개정되어 현재 사용되고 있는 것은 2014년판. 구체적인 형식은 에스토니아의 핀테크 기업인 Wise (구 Transferwise)가 제공하고 있는 아래 페이지에서 볼 수 있음:

   https://wise.com/gb/swift-codes/bic-swift-code-checker

   맨 앞의 4자리는 은행. 다음 2자리는 국가. 다음 2자리는 지역. 그리고 마지막으로 선택 사항인 3자리 지점. 예를 들어서 SWIFT 코드가 'SMCOGB2LXXX' 라면, 영국(GB)에 있는 SMCO 은행 2L 지역 XXX 지점을 가리킴. 기본적으로 은행에 부여되는 것이지만, 가장 많은 수요가 송금 수요인 만큼 국가간에 돈을 주고받을 일이 많은 다국적 대기업들도 SWIFT 코드를 발급받아서 사용하는 경우가 많음 - 거꾸로 이야기하자면 SWIFT 결제망에서 퇴출되면 금융 거래에 타격을 입음. 이란과 북한의 경우 당연히(?) SWIFT에 접근이 불가능함.

   이 글은 『가상 면접 사례로 배우는 대규모 시스템 설계 기초 (System Design Interview)』의 저자인 알렉스 쉬가 설명한 SWIFT 시스템의 기술적인 구조.
    1. 돈을 주고받는 당사자인 Bank, Bank로부터 요청을 받아 처리하는 Regional Processor(RP), RP로부터 요청을 받아 송금 관련 기록을 저장하는 Slice Processor(SP)가 있음. 편의상 A쪽 Bank/RP/SP와 B쪽 Bank/RP/SP가 있다고 치겠음.
    2. Bank(A)가 Bank(B)로 보내는 송금 요청을 RP(A)로 보냄. RP(A)는 요청의 유효성을 검증한 뒤 SP(A)로 요청을 전송. SP(A)는 요청을 저장한 뒤 RP(A)에는 요청이 처리되었다는 응답을, RP(B)에는 송금 요청을 보냄.
    3. 응답을 받은 RP(A)는 Bank A에 송금 요청이 접수(ACK) 혹은 거부(NAK)되었다는 응답을 보냄. SP(A)의 요청을 받은 RP(B)는 메시지를 임시로 저장한 뒤 (역자 주: 아마 내부 log 자료구조에 fsync로 저장하는 듯) 메시지에 고유한 번호(MON)를 발급한 뒤 SP(B)에 전달.
    4. SP(B)는 MON의 유효성을 검증하고, 인가(authorization) 작업을 수행한 뒤 RP(B)에 ""Bank B에 돈을 보내라""는 메시지를 보냄.
    5. RP(B)가 Bank B에 메시지를 전달. Bank B는 이를 받아서 저장한 뒤 실제로 돈을 지급하고, 성공 여부(UAK/UNK)를 RP(B)에 전달.
    6. RP(B)는 송금 결과 report를 생성해서 SP(B)에 전달. SP(B)는 이를 저장한 뒤 SP(A)에 사본을 전달. SP(A)는 이를 다시 저장.

   1975년경 만들어진 시스템이지만, 현대 Event-driven microservice의 요소가 전부 들어가 있음. SP는 메시지 형태로 송금 요청과 결과 report를 저장하고, RP는 SP를 사용해서 Bank의 요청에 대한 서비스를 제공함. RP는 Bank의 송금 요청을 받거나, 자기가 맡은 구역에 들어 온 송금 요청을 역시 자기가 맡은 구역의 Bank에 요청하는 역할만 함. 결과적으로 모든 송금 관련 요청은 보낸 쪽 SP와 받는 쪽 SP에, 요청과 처리 결과가 하나씩 저장되게 됨. Bank 입장에서는 SP가 전혀 보이지 않음.
"
"https://news.hada.io/topic?id=6042","얼굴 인식해서 내가 슬플 때 고양이 사진 보내기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       얼굴 인식해서 내가 슬플 때 고양이 사진 보내기

     * 웹캠 + 브라우저용 Human 라이브러리 사용
       → TensorFlow/JS 기반 얼굴 및 감정 인식 기능 제공
       → sad, angry, fear, happy 등
     * The Cat API의 고양이 사진 이용(한달 1만 리퀘스트까지 무료)
     * 노티앱인 Pushover를 이용해서 모바일로 사진 전송
     * 로컬에서 동작하는 오픈소스

   https://thecatapi.com/
   https://thedogapi.com/

   고양이보다 강아지를 사랑하시면 API 엔드포인트만 바꿔도 됩니다.

   여기는 업로드된 사진에 정확히 고양이/강아지만 있는지 확인하기 위해
   AWS Rekognition 과 GCP Vision 두가지를 다 돌려서 확인한다고 하네요

   저희 사업부에서 다른 제품 개발하시는 분이 테스트 데이터로 항상 중복되지 않는 고양이 사진을 사용하시길래 아니 대체 어디서 전부 다 다른 고양이 짤을 이렇게 가져오는 거지? 하고 놀란 적이 있는데, 이런 서비스가 있었군요? ㅎㅎㅎ
"
"https://news.hada.io/topic?id=6112","Show GN: 이력서 카드 생성과 이력서 유입 통계 관리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: 이력서 카드 생성과 이력서 유입 통계 관리

   자신만의 이력서 카드를 생성해 홍보하고, 연동된 이력서 유입을 통계내는 애플리케이션을 개발했습니다.

   만들어진 이력서 카드는 마크업문서 (깃허브 리드미, 노션 등 이미지 링크 삽입을 지원하는 문서 작성 툴)에 포함시킬 수 있고, 이력서 카드에 연동된 이력서 유입을 통계내서 보여줍니다.

   통계
     * 이력서 유입 경로
     * 이력서 일별 유입 인원

   오픈소스 레포지토리
   https://github.com/gitofolio/gitofolio

   사이트 url
   https://gitofolio.com

   관심 있으신분 사용후 피드백 및 스타 주시면 감사하겠습니다.

   런칭 축하드립니다!
     * 사이트 내용만으로는 용도를 바로 이해하는게 어려운거 같습니다. ""노션/깃헙/블로그에 삽입 가능한 미니 이력서 카드"" 같은 설명이 있어야 하지 않을까요?
     * 큰 로고 이미지에 여러 예제 이미지가 복잡하게 보여서 더 혼돈을 주는 것 같아요. 깃헙페이지에서는 devxb 님의 카드가 잘 보여서 좋은데, https://gitofolio.com/ 에서는 명확한 샘플이 몇개 보이면 더 좋을 것 같아요.
     * 비로그인 상태에선 첫 화면에 ""Get Portfolio Cards"" 버튼을 눌러도 동작이 없네요. 로그인 상태에선 카드 만들기로 잘 갑니다. 누르면 상세 예제를 보여주고 로그인 요구를 하면 좋을 듯 해요.
     * 카드 내용에도 마크다운이 적용 가능하면 좋을 것 같아요 ^^;

   피드백 해주신대로, 비로그인 상태에서 ""Get portfolio Cards"" 버튼의 동작을 추가했으며, 메인 페이지의 내용을 보완했습니다.
   또한, 현재 이력 카드 내용에 편집 기능을 강화중입니다! :)
     * 이미지 삽입 기능
     * 글자별 색 지정 기능

   관심 감사합니다 :)

   소중한 피드백 감사합니다! 메인페이지와 사이트의 내용이 프로젝트의 목적을 잘 투영하고 있지 않는것은 저 또한 느끼고 있는 부분이였습니다 이 부분 프론트 팀원들과 논의 해보도록 하겠습니다! :)

   페이지에 오타가 있는것 같아요.
   Markup 문서에 올리는 에 올리는 포트폴리오 카드 라고 되어있어요.
"
"https://news.hada.io/topic?id=6107","애플, M1칩 탑재한 iPad Air 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        애플, M1칩 탑재한 iPad Air 공개

     * M1 : 8코어 CPU, 8코어 GPU, 16코어 뉴럴엔진
     * 10인치, 8G 램, 64/256GB , 461g
     * 이전 세대 iPad Air보다 CPU는 60%, GPU는 2배 빠름
     * 센터스테이지 적용된 울트라와이드 12MP 전면 카메라
     * 5G 지원, 2배 빠른 USB-C
     * Liquid Retina 디스플레이
     * 상단 버튼 터치 ID
     * 애플펜슬 2세대 지원
     * 매직 키보드 / 스마트 키보드 폴리오
     * WiFi 기준 64GB 779,000원 , 256GB 979,000원. 셀룰러 모델은 20만원 추가

   아이패드 프로와 미니 사이의 교묘한? 사양이네요.
   https://apple.com/kr/ipad/…
"
"https://news.hada.io/topic?id=5988","lite-youtube - 더 작고 빠른 유튜브 임베딩 컴포넌트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  lite-youtube - 더 작고 빠른 유튜브 임베딩 컴포넌트

   - Paul Irish가 만든 lite-youtube-embed를 Shadow Dom 웹 컴포넌트 버전으로 바꾼 것
   - 매우 빠르고, 의존성 없는 Vanilla 컴포넌트
   - 16:9 반응형
   - 키보드로 접근 가능 및 ARIA 지정
   - locale, start, autoload 지원
   - WebP / JPEG 플레이스 홀더
   - 플레이 리스트 지원

   - lite-youtube-embed - 더 빠른 유튜브 임베드 https://news.hada.io/topic?id=3962
"
"https://news.hada.io/topic?id=6102","Youtube-dl을 셧다운 하려는 시도가 계속 되고 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Youtube-dl을 셧다운 하려는 시도가 계속 되고 있음

     * 2020년 미국음반산업협회(RIAA)가 GitHub에 DMCA 위반을 주장하여 삭제되었다가 복원되었음
     * 소니/워너/유니버설 뮤직이 독일 법정에서 youtube-dl 홈페이지를 호스팅하는 작은 호스팅 업체 Uberspace를 고소
     * 독일 시민권 협회(German Society for Civil Rights, GFF)가 이에 반대한다는 주장을 내고 Uberspace를 돕는 중

   Youtube-dl - Youtube 및 각종 비디오사이트에서 동영상 저장하기
   Youtube-dl, DMCA때문에 깃헙에서 삭제
   기자들이 Youtube-dl 을 사용하는 방식
   GitHub, youtube-dl 저장소 복원
   youtube-dl 새로운 관리체제로
"
"https://news.hada.io/topic?id=6017","구글 Cloud Functions 2세대 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       구글 Cloud Functions 2세대 공개

   - GCP의 차세대 Functions-as-a-Service
   - 기존 9분에서 60분으로 더 길어진 최대 실행 시간(HTTP)
   ㅤ→ 데이터 처리 및 머신러닝 파이프라인에 적합
   - 더 큰 인스턴스 제공(최대 16GB, 4 vCPU)
   - 한개의 펑션 인스턴스로 최대 1000개까지의 동시 리퀘스트 처리 지원
   - Pre-warmed 인스턴스 제공해서 시작시간 최소화 가능
   - 버전간 트래픽 스플릿 지원해서 버전 롤링 지원
   - 90개 이상의 이벤트 소스 지원

   540초 제한때문에 프로세스를 쪼개서 사용해야 했는데 실행시간을 넉넉하게 넣어줬군요 ㅋㅋ 대쉬보드가 빈약한 부분만 개선되면 참 좋겠습니다..

   상품소개 페이지는 번역이 안되어 있는데 공식 문서는 한글화 되었네요
   https://cloud.google.com/functions/docs/2nd-gen/overview?hl=ko

   한글문서는 나왔는데 서울리전에는 아직 없네요(?)
"
"https://news.hada.io/topic?id=6010","로봇의 분류와 역사, 국가/분야별 로봇 시장 현황 (140p PDF)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 로봇의 분류와 역사, 국가/분야별 로봇 시장 현황 (140p PDF)

   1. 로봇의 분류와 역사
   - 로봇의 정의와 분류: 산업용(제조) 로봇과 서비스 로봇
   - 로봇의 역사: 연대별 로봇 산업 변천사
   2. 주요 국가별 로봇 시장 현황
   - 중국: 2013년 이래로 8년 연속 세계 최대 로봇 시장 지위 유지 중
   - 미국: 로보틱스 로드맵 통해 우주 자율주행 선도
   - 일본: 로봇 신전략 통한 세계 로봇 혁신 거점화 추진
   - 한국: 국내 산업용(제조) 로봇 밀집도 전세계 1위
   3. 분야별 로봇 시장 현황 및 관련 기업
   - 의료: 수술 로봇, 진료 로봇, 웨어러블 로봇
   - 물류(유통): 물류창고 로봇, 물류운송 로봇
   - 식품(외식): 주방용 로봇, 바리스타 로봇
   - 가정(가사): 로봇 청소기, 로봇 집사, 애완(반려) 로봇, 돌봄 로봇
   - 교육: 학습용 로봇
   - 취미: 스포츠 로봇, 악기 로봇
   - 치안 & 방제: 감시 로봇, 소독 로봇
   - 자율주행차 & 주차 로봇: 로보택시
   - 휴머노이드
"
"https://news.hada.io/topic?id=6033","Tally Forms - 무료 TypeForm 대체제","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Tally Forms - 무료 TypeForm 대체제

     * 무제한 폼, 무제한 제출, 이메일 알림, 파일 업로드, 결제 연동, 커버/로고 등 거의 모든 기능이 무료
     * 사용하기 쉬운 Form 편집기 제공
     * Notion/Airtable/Zapier/Google Sheets 연동 지원
     * WebHook 가능
"
"https://news.hada.io/topic?id=6080","Interop 2022: 브라우저가 함께 작동하여 개발자를 위한 웹 개선","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Interop 2022: 브라우저가 함께 작동하여 개발자를 위한 웹 개선

   지금까지 크로스 브라우징은 Web 개발자들에게 엄청난 숙제였는데요,
   특히 Safari 는 제 2의 IE라는 이야기를 듣기도 하였고,
   Firefox는 많은 분들이 대응도 하지 않는 현실입니다.

   주요 브라우저 개발사인 Apple, Google, Mozilla, MS, Igalia, Bocoup 이 의기투합하여
   웹 개발자들을 위해 호환성을 향상하는 움직임을 진행하고 있습니다.
"
"https://news.hada.io/topic?id=6038","리소스의 ID, GUID로 할까 Sequential로 할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   리소스의 ID, GUID로 할까 Sequential로 할까?

   특정한 리소스를 고유하게 지정하는 ID를 어떻게 만들 것인가 하면 보통은 크게 2가지 방법을 주로 쓰는 걸로 압니다. 하나는 DB 테이블의 Primary Key에 Auto Increment를 걸어서 나오는 순차적인 정수값을 그대로 써먹는 것이고, 다른 하나는 랜덤한 128비트 값인 GUID(UUID라고도 함)를 그때그때 생성하여 사용하는 방식입니다.

   웹에서 볼 수 있는 수많은 서비스들의 데이터는 RDBMS가 상당수 책임지고 있고, 이런 DBMS의 Auto Increment는 내부적으로 최적화되어 있을 뿐더러 사용하는 개발자 입장에서 이해하기도 예측하기도 쉽고 데이터가 들어온 순서대로 정렬하는 것도 간단합니다. 그저 숫자를 1씩 더해갈 뿐이니까요. 하지만 이 방법은 특정한 경우 보안상 노출되지 않았으면 하는 정보를 외부에 노출할 수 있다거나 (예를 들면 경쟁사에서 우리 서비스의 사용자 숫자 등 주요 지표를 쉽게 눈치챌 수 있음) 또는 분산형 아키텍쳐에서 문제가 될 수 있는 등의 문제점이 있습니다.

   GUID를 사용하는 방법은 위와는 특징이 정반대입니다. GUID는 다른 의존성 없이 충돌가능성이 0에 가까운 사실상 고유한 128비트 값을 그때그때 만들어 사용하기 때문에, 분산형 아키텍쳐에서도 아무런 문제가 없을 뿐더러 외부에 다른 유의미한 정보를 뜻하지 않게 흘릴 우려도 없습니다. 그러나 랜덤하게 생성된 값을 RDBMS에 쓰는 것은 성능 저하를 불러올 수 있으며, 또한 그 자체로는 데이터가 들어온 순서대로 정렬하는 것도 불가능합니다. 이러한 약점을 보완하고자 완전한 랜덤이 아니라 시간 정보가 가미되어 불완전한 순차성을 띄는 Timeflake와 같은 것을 사용하는 경우도 있습니다. 제가 직접 써본 적은 없지만, Laravel 같은 프레임워크에서도 이런 방식을 쓴다고 하더라고요.

   개인적으로는 지금 다니는 회사에서 Microsoft의 Office 365나 Graph API 등 GUID를 적극적으로 사용하는 물건과 연동되는 제품을 개발하다 보니, GUID를 적극적으로 사용하는 방식도 꽤 괜찮지 않나 하는 생각을 갖게 되었습니다. 하지만 결국 이런 건 사용처와 목적에 따라 무엇이 더 좋은지 달라지는 것이니까, 각 방법의 장단점을 명확히 알아두는 것이 좋겠지요. 그래서 이와 관련된 가상의 서비스 개발자의 일지를 담은 트윗 타래를 소개합니다. (한국어)

   최근 신한카드에서 부정사용 사고가 발생했는데, 이와 관련하여 해당 카드사가 신용카드 번호를 순차적으로 발급하는 바람에 해외로부터의 부정사용에 노출될 수 있는 위험성이 확인되었습니다.
   번호만 살짝 바꿨는데 ""결제""…도용에 노출된 신용카드
   금융감독원, 최근 신한카드 부정사용 등에 대한 대책 강구

   여러 분들께서 댓글을 달아주신 덕에 잘 모르던 것도 많이 알게 되었네요.
   덕분에 Hashids라던가 Nano ID, 인스타그램이 사용하는 방식 같은 것도 처음 알게 되었습니다.

   ulid와 비슷한 동기이겠지만 제안 중인 Internet Draft가 있어서 저는 이 스펙을 이전 프로젝트에서 썼었습니다.
   https://github.com/uuid6/uuid6-ietf-draft

   이런식으로 만들어지는 id 체계는 자주 보이는데, 이제 UUID-like한 녀석만이라도 하나로 통일되어야 하는 시점인 것 같습니다.

   그치만 난립하는 표준을 하나로 통일하는 새로운 표준을 만들겠다는 시도는 대개 시장에 새로운 경쟁후보 하나를 내놓을 뿐이라고 하죠. ㅋㅋㅋ
   https://xkcd.com/927/

   그렇죠 ㅎㅎ 그래서 다들 새로운 id 제안을 내놓나봅니다.

   얼마전에 규원님이 공유해주셨던데, 사실 심플한 문제 아닌가요?
   https://byterot.blogspot.com/2013/02/…

   저도 ""심플한 문제""라는 이야기의 추가 설명을 원해요

   어떤 면에서 심플한 문제라고 말씀하시는걸까요?

   이 글에서는 'With storage nowadays very cheap, this normally is not a problem from the storage point of view.'이라고 얘기하고 있기는 한데, 네트워크 상에서 이 id가 돌아다녀야하는 경우라든가, 메모리 상에서도 key 역할을 해야한다든가, 대용량의 데이터로 여러 곳에서 쓰여야하는 키인 경우 등, 몇 바이트라도 줄이는 것이 중요할 때가 있어서 상황에 따라 UUID를 거절해야하는 상황도 있기는 한 것 같습니다.

   이 글에서 말한 문제는 랜덤하게 생성된 값을 primary key 로 사용할 때 생기는 성능저하인데
   (다른 문제가 언급되어 있는데 제가 캐치하지 못했다면 말씀해주세요)
   그 문제는 이미 답이 있습니다. 시간 순으로 cursor based pagination 할 때랑 같은 문제라 이미 다들 해결해보셨을듯 합니다.

   어떤 면에서 복잡한 문제인지 저도 궁금합니다.
   말씀하신 상황은 거절해야하는 상황이라고 하셨으니 심플한 문제인 것 같은데...
   복잡한 문제는 이도저도 결정을 못내릴 때가 복잡한 문제 아닌가요?

   '심플한 문제'라는 것의 의미가 해석될 여지가 많아서 어떤 의미로 쓰신 것인지 궁금해서 여쭤봤습니다. 문제 자체가 어려운 문제가 아니라는 것인지, 글에서 제시하는 명쾌한 답(?)이 있기 때문에 고민의 여지가 적어서 그렇다는 것인지 등이요.
   전자에 대해서는 위에서 말했듯이, 상황에 따라서 id가 데이터베이스 외부로도 통용되어야 하는 경우가 있기 때문에 고려할 요소가 많아지고 단순한 문제는 아니라고 생각합니다.

   python/django 에는 이런 것도 있어요 https://pypi.org/project/django-hashid-field/1.0.0/

   오, Hashids라는 방법도 있군요.
   만약에 Salt가 유출된다면 위 본문에서 언급했던 정보 외부 노출이 되는 문제가 생길 수는 있겠지만, 그래도 좋은 방법이라고 생각합니다.

   ulid도 있습니다. 128bit, 시간순으로 정렬가능.
   https://github.com/ulid/spec

   모양이 비슷비슷한 게 참 많은 걸 보면, 사람 생각이란 대개 다 거기서 거기인지도…?
"
"https://news.hada.io/topic?id=6104","러시아, 소프트웨어 불법복제 합법화 논의중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        러시아, 소프트웨어 불법복제 합법화 논의중

     * ""러시아를 제재하는 국가들""의 소프트웨어를 불법복제해서 사용하는 것에 대해서 형사/행정적 책임을 철폐하는 방안이 논의 되고 있음
     * Microsoft, IBM, Oracle 같은 기업들이 러시아에서 떠나는 것을 일시적으로 완화할 수 있을 것이라고
     * 하지만 대부분의 소프트웨어가 구독형이기 때문에 접근은 어쨌든 차단될 것
     * 러시아의 월스트리트 저널이라고 보면 되는 Kommersant지에 올린 기사를 인용
       → ""외부 제재 압력에 직면하여 러시아 경제의 발전을 보장하기 위한 우선 조치 계획"" 이라는 문서가 돌고 있다고
"
"https://news.hada.io/topic?id=6108","애플, M1 Ultra 칩 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           애플, M1 Ultra 칩 공개

     * 2개의 M1 Max칩 다이를 결합한 SoC
       → UltraFusion 패키징 아키텍처
       → 2.5TB 대역폭으로 하나의 칩으로 동작
     * 20코어 CPU, 64코어 GPU, 32코어 뉴럴엔진
     * 1140억개의 트랜지스터(M1대비 7배)
     * 데스크탑칩 대비 10배 향상된 800GB/S 메모리 대역폭, 128GB 통합 메모리 구성 가능
     * 동일 전력 엔벨로프에서 16코어 데스크탑 대비 90% 높은 멀티스레드 성능
     * 8K ProRes 422 동영상 스트림을 동시에 18개까지 재생 가능
     * Afterburner를 장착한 28코어 맥프로보다 최대 5.6배 빠른속도로 ProPres 트랜스코딩
     * 32코어 뉴럴엔진으로 초당 22조회 연산 능력

   올해까지는 칩?코어? 의 자체 성능 향상은 없이 계속 사이즈만 늘려가네요. 이것도 대단해보이지만.. m2 가 안나오는 기간이 길어지면 왠지 못만들고 있는 거 아닌가 하는 의심이 커질 것 같아요.

   큭 정정할 부분이 있네요.
   확인차 찾아보니 모든 AX 칩을 2년마다 낸건 아닙니다. 대체로 2년마다 나왔네요.
   그리고 또 빼먹은 부분이 있는데 AX/M칩 코어는 A칩 코어를 가져다 쓴다고 알고 있습니다. 최근 A칩 향상폭이 줄기는 했지만, M1의 기반이 A14로 알고 있는데, 연말에 A16 기반으로 나오면, M2도 A14 -> A16 향상폭만큼 개선될거에요.

   애초에 사이즈 키우는 것도 쉬운 일은 아니지만... 그래서 될거였으면 다른 칩들도 그렇게 하고 있었겠죠...
   M 시리즈 칩을 아이패드에 들어갔던 AX 시리즈 칩의 연장으로 보면, 지금 속도가 정상입니다.
   AX칩은 원래 2년마다 신제품이 나왔어요. M1 발표 후 올해 말이 되어야 2년이 되서 M2 발표하는 스케줄입니다.
   그리고 M2 기본 칩을 스튜디오나 프로 시리즈에 쓰면 맥미니, 맥북 에어 엔트리에 들어갈 칩이 없어져요.
   처음에 M시리즈 로드맵 짤 때부터 프로, 맥스, 울트라를 프로, 스튜디오 라인업에 쓸 계획이었다고 보는게 맞아요. 연말에 M2가 나온다면, 오히려 기존 스케줄 지니면서 중간에 파생 칩을 찍어내는 것도 대단하다고 보여요. 사실 6개월마다 새 칩이 나오는 상황인데요.

   어쩌면 TSMC 3나노가 원하는 만큼 수율이 안 나오는 것 아닐까 싶어요. 그러니 2개를 붙여서라도 쓰는 대응책을 만들지 않았을까 생각이 드네요. 자기들도 M2 라고 붙이기엔 뭐하니 M1에 덕지덕지 붙이고요.

   개인적으로는 Max와 Ultra 다음이 무엇일지 궁금하네요.
"
"https://news.hada.io/topic?id=6072","약 5조원 규모의 스타트업 M&A들을 진행하며 배운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     약 5조원 규모의 스타트업 M&A들을 진행하며 배운 것

     * 대부분의 인수자들은 (인수 전부터) 인수 대상과 관계를 만들었음. 회사의 미래에 M&A를 생각하고 있다면 리더들은 파트너 및 잠재적 인수자들과 관계를 만들기 시작해야 함
     * 스타트업은 기업이 아닌 개인에게 판매됨. 스타트업 인수는 챔피언(종종 제품 리더, CEO 또는 일반 관리자)의 커리어에 위험을 줌. 딜 스폰서들은 비즈니스 사례를 구축하고, 스타트업 팀과 신뢰를 구축하고, (그대로 남아 있고 싶어하는) 관성과 내부 마찰을 극복할 수 있다는 충분한 확신을 쌓고나서 거래를 마무리 해야함
     * 처음 인수하는 사람을 조심할 것. 그들은 거래를 완료하는 노하우가 부족할 수 있음. 인수에는 상당한 Cross-Functional 조정이 필요함. 합의를 이끌어 내는 것은 일반적인 비즈니스 상황에서도 문제가 많은데, 압박 받고 있는 상황에서는 더 어려움.
     * 돈이 은행에 들어오기 전에는 딜이 끝난게 아님. 종료일에도 갑자기 깨지는 인수건들을 봤음.
     * 세일즈에는 세가지 유형이 있음 : 팀, 팀 & 기술, 팀 & 기술 & 트랙션
       매출이 클수록 구매자가 매출의 배수로 목표가격을 설정하는 경향이 있음.
     * 경영진과 이사회가 매각하기로 결정하면, 구매자의 동기를 이해해야 함. Simon Sinek이 말했듯이 ""Why""부터 시작할 것. 그게 합병한 후에 보여지게 될 설득력 있는 비전을 구성하는 방법을 알려줄 것
     * 스타트업은 텀시트에 사인하기 직전에 가장 큰 레버리지를 발휘할 수 있음. 텀시트에 사인하고 나면, 스타트업의 레버리지는 사라져버림.
       그 후로는 스타트업은 ""텀시트 서명일로부터 최종 계약서 서명할 때 까지의 독점 기간""인 몇일~몇달간의 가장 취약한 나날들을 헤쳐나가야 함
       텀시트에 사인하기 전에 중요한 사항을 협상할 것
     * M&A 텀시트의 필수 구성요소는 보통 이런 것들을 포함
          + 인수 가격 : 금액과 구조(현금 대 주식 비율, 합병 또는 자산 구매)
          + 경영진 보상 : 특히 지분 Revesting (창업자가 회사에 남아 있도록, M&A의 전체 인수 금액을 풀로 주지 않고, 특정 기간을 지나야 받게 하는 것)
          + 애스크로 조건 : 애스크로 퍼센티지, 기간, 보험
          + 운전자본(Net-Working Capital, 회사가 영업 활동을 하기 위해 필요한 자본) : 구매 가격이 현금/부채가 없는가 ?
          + 독점 계약기간(No-Shop Period) : 다른 잠재적 구매자를 찾지 못하도록 하는 기간
          + 기본적인 표현들과 보증들 : 회사와 비즈니스에 대해 정리한 주요 주장들.
          + 계약 취소 수수료
     * 규제에 따른 딜레이는 요즘 큰 기술 회사들에 판매할때 일반적이 되었음. 합병은 정해진 시간에 마무리 되지만, 트랜잭션은 US/EU/UK 및 다른 사법기관들의 리뷰를 받아야 하기 때문에 계약 종결 기간(Closing Period)은 몇개월에서 1년 또는 그 이상이 걸릴 수 있음.
     * 구매자에 대해서 레퍼런스 체크해보면, 회사와 팀이 판매 후에 어떤 모습이 될지 그려볼 수 있음. 인수 후에 어떻게 회사를 통합했나? 베스팅 기간에 어떻게 창업자를 대했나? 거기서 내년에 일하면 어떨 것 같은가 ?

   국내의 상황과 딱 맞아 떨어지지는 않는데 참고할 내용은 있는 것 같습니다.
     * 잠재적 인수자들과 어떻게든 관계를 가지는 것은 정말 중요합니다. 혹시나 모를 정보 유출은 잘 피하시고, 우리가 이렇게 잘 성장하고 있다는 것을 어필해 두세요.
     * 항상 중요하지만 돈 들어오기 전에는 끝난 것 아닙니다.
     * ""왜 우리를 인수하면 너희한테 좋은가""를 비젼과 미션으로 멋있게 포장하는 것도 중요한 스킬입니다.
     * 텀시트 사인하기 전이 가장 큰 레버리지 라는 것도 정말 중요. 보통 독점기간이 있어서 다른 곳과 얘기하는게 불가능해지기 때문에 중요한 것들은 꼭꼭 미리 협상해 두세요.

   인수 합병과 관련해서 만약 과거로 돌아가고 싶다면, 바꾸고 싶은 게 있나요? 그렇다면 어떻게 다르게 바꾸고 싶으신 건가요?
"
"https://news.hada.io/topic?id=6053","Rust 1.59.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Rust 1.59.0 릴리즈

     * 인라인 어셈블리 지원 : 저수준 제어 및 특정 기계 명령어 이용 가능
          + x86, x86-64, ARM, AArch64, RISC-V 지원
     * 구조 분해 할당 지원 : 좌측에 tuple, slice, struct 를 놓아서 한번에 할당
          + (a, b) = (1, 2);
     * Const Generic에 디폴트값 지원
     * 디버그 정보를 뺀 Stripped Binaries 생성 가능
     * Incremental Compilation 기본으로 비 활성화
"
"https://news.hada.io/topic?id=6004","State of JavaScript 2021","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        State of JavaScript 2021

   - 148개국, 16085명 설문조사
   - 연봉$: 50~100k 22% > 100~200k 16% > 30~50k > 13%
   - 경력y: 5~10 23% > 2~5 20% > 10~20 > 19%
   - 나이: 24~34 39% > 35~44 19% > 18~24 10% > 45~54 5%
   - 남성 71% 여성 4%
   - 라이브러리 만족도별 티어
   ㅤ→ S(>90%) : Vite, esbuild, Jest, Cypress, Next.js ..
   ㅤ→ A(>80%) : Svelte, Storybook, Express, Nest, Rollup, REact, Capacitor, Puppeteer, Nuxt, Parcel, Vue.js//
   ㅤ→ B(>70%) : React Native, Strapi, Expo, Webpack, Preact, Mocha..
   ㅤ→ C(>60%) : Jasmine, Ionic, Gatsby, Angular, Browserify, Gulp..
   - 프론트엔드 프레임워크
   ㅤ→ 만족도 : Solid 90% > Svelte 90% > React 84% > Vue.js 80% > Alpine.js 79%
   ㅤ→ 사용량 : React 80% > Angular 54% > Vue.js 51% > Svelte 20% > Preact > 14%
   - 백엔드 프레임워크
   ㅤ→ 만족도 : SvelteKit 96% > Astro 91% > Fastify 91% > Next.js 91% > Remix 91%
   ㅤ→ 사용량 : Express 81% > Next.js 45% > Gatsby 27% > Nuxt 20% > Nest 19%
   - 테스팅
   ㅤ→ 만족도 : Testing Library 96% > Vitest 94% > Jest 93% > Playwright 93% > Cypress 92%
   ㅤ→ 사용량 : Jest 74% > Mocha 50% > Storybook 48% > Cypress 43% > Jasmine 40%
   - 모바일 & 데스크탑
   ㅤ→ 만족도 : Tauri 83% > Capacitor 82% > Electron 82% > React Native 77% > Native Apps 76%
   ㅤ→ 사용량 : Electron 36% > React Native 34% > Cordova 32% > Ionic 29% > Expo 23%
   - 빌드 도구
   ㅤ→ 만족도 : Vite 98% > esbuild 96% > swc 94% > tsc CLI 94% > Rollup 84%
   ㅤ→ 사용량 : webpack 89% > tsc CLI 79% > Gulp 63% > Rollup 39% > Browserify 34%
   - Monorepo 도구
   ㅤ→ 만족도 : pnpm 89% > Turborepo 88% > Nx 85% > npm Workspace 84% > Yarn Workspace 80%
   ㅤ→ 사용량 : Lerna 25% > Yarn Workspace 25% > npm Workspace 25% > pnpm 13% > Nx 13%
   - 기타도구 : Axios 41% > Lodash 37% > Moment 27% > date-fns 25% > RxJS 19% > Day.js 13% > jQuery 11% > D3 10%
   - 선호하는 JS기반 언어 : TypeScript 69% > Elm 2.4% > Flow 1.7% > CoffeScript 1.4% > Reason 1.3%
   - JS 이외의 사용언어 : Python 25% > PHP 19% > Java 15% > Bash 15% > C# 14% > Go 10% > Rust 9.5%

   - 가장 많이 보는 사이트 : CSS-Tricks > Medium > Dev.to > Smasing Magazines > JavaScript Weekly > A List Apart
   - 정보를 찾는 곳 : Stack Overflow 72% > MDN 65% > W3Schools 37% > Web.dev 25% > Udemy 22%
   - 어워드 : 올해 가장 눈에 띄는 것들
   ㅤ→ 최다 적용 기능 (사용한 적 있음) : Nullish Coalescing Operator (??)
   ㅤ→ 최다 적용 기술 (다시 사용할 예정) : esbuild
   ㅤ→ 최고 만족도 : Vite
   ㅤ→ 최고 관심도 (일단 알게 되면 학습에 가장 큰 관심을 갖게 된 기술) : Vite
   ㅤ→ 최다 투표항목 : Elm

   - State of Javascript 2019 https://news.hada.io/topic?id=1106
   - State of Javascript 2020 https://news.hada.io/topic?id=3586
"
"https://news.hada.io/topic?id=5986","jDeploy - Java앱을 맥/윈/리눅스에 네이티브 번들로 배포하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                jDeploy - Java앱을 맥/윈/리눅스에 네이티브 번들로 배포하기

   - 실행가능한 Jar파일을 각 플랫폼의 Native앱으로 묶어주는 오픈소스
   ㅤ→ 빌드 플랫폼 상관없이 빌드(맥이 없어도 맥용 빌드가능)
   - 맥/윈/리눅스용 네이티브 인스톨러 생성
   - 번들링한 앱의 자동 업데이트 지원(실행시 자동 업데이트 체크)
   - 실행시에 필요한 자바 런타임(JRE) 알아서 다운로드
   - 맥 코드사이닝은 jDeploy가 알아서 처리
   - 다운로드 페이지를 생성, 클라우드 퍼블리시 가능
"
"https://news.hada.io/topic?id=6039","Adaptive Favicon 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Adaptive Favicon 만들기

     * SVG를 이용해서 다크모드 지원하는 Favicon 만들기
     * ico 와 svg를 동시에 지정해서 지원하는 브라우저에서만 적용 가능
     * SVG xml 내에 <style> 태그를 포함해서 prefers-color-scheme: dark 를 추가

   긱뉴스 Favicon은 글자라서 큰 차이가 없기는 한데, 한번 적용해 봐야 겠어요
"
"https://news.hada.io/topic?id=6105","micropolisJS - 오리지널 심시티 클론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       micropolisJS - 오리지널 심시티 클론

     * EA가 GPL로 공개한 심시티 오픈소스 버전인 micropolis를 JS/TS + HTML 버전으로 직접 포팅한 오픈소스
     * 웹에서 플레이 가능

   DOS용 오리지널 SimCity 는 Internet Archive에서 해볼 수 있습니다.
   https://archive.org/details/msdos_SimCity_1989
"
"https://news.hada.io/topic?id=6029","Chris Lattner가 Swift Core팀을 떠남","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Chris Lattner가 Swift Core팀을 떠남

     * 애플을 5년 전에 퇴사했지만 애정을 가지고 계속 참여
     * 주요 원인은 WebEx로 진행되는 주간 코어팀 미팅이 매우 안좋았다는 것(Toxic)
     * 특히 작년 여름 미팅에서는 모욕을 당했고, 잠시 쉬기로 했다가 결국엔 팀을 떠나기로 결정
     * 자신의 제안이 무시되거나, 마찰을 만들어 내면서 시간을 낭비하는 것 같다고
     * 또한 Swift가 자신의 영향력 이상으로 커지기도 했고, 그가 관심을 가졌던 것들(""Simple things that compose"" 같은)은 더 이상 유행이 아닌 것 같음
     * Swift는 경이로운 언어이고 성공적인 미래가 있을 것이라 생각하지만, 커뮤니티에서 만든 언어도 아니고 모호하지도 않음. Healthy and Inclusive 커뮤니티가 Swift의 설계와 진화에 좋은 영향을 줄 수 있을 것이라고 생각함

   라트너 본인 또한 대외적으로는 스위프트에 대한 관심을 거의 표하지 않는 상황에서 팀을 떠난 전 리더가 특정 회사에 종속되어있는 오픈 소스 코어 팀에 소속되어있다는 거 자체가 문제를 유발하기 쉬운 상황이었을거같네요.
   다른 방향에서 프레셔를 받고 있었을 팀원들의 관점에서는 팀을 떠난 사람의 의견은 존중했을 때도, 이럴 거면 왜 떠났냐고 하고 싶었을 때도, 외부자의 도를 넘는 참견으로 보였을 때도 있었으리라 상상을 해봅니다.

   ps. 그니까 이럴거면 왜 떠났어 형, 그리고 이렇게 떠날거면 깔끔했어야지 ㅜ.ㅜ

   애플에서 좋지 못하게 떠난 걸로 알려져 있습니다...

   테슬라에서도 좋지 못하게 떠났고요.

   원문 링크입니다.
   https://forums.swift.org/t/core-team-to-form-language-workgroup/…

   협업은 넘나 어려운 것.
   힘든 일 많았을 것 같습니다. 박수👏 보내드립니다.

   아마도 퇴사했던 이유와 비슷하지 않을까 예상해봅니다
   코어팀은 사실 오픈소스 멤버들 커뮤니티가 주도하기 보다는 애플 엔지니어들이 중심이고
   애플이 필요한 것부터 적용되고 있으니까요.
   스위프트에 기여한 게 많지만 정치적인 야망이 큰 친구라 애플에서도 나갔는데,
   코어팀에서도 주도하지 못하고 의견이 무시되다보면 그럴 수 있을 거 같습니다.

   해커뉴스 쓰레드 Chris Lattner left Swift core team
"
"https://news.hada.io/topic?id=6026","Griffel - 미리 컴파일 가능한 CSS-in-JS ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Griffel - 미리 컴파일 가능한 CSS-in-JS

     * Microsoft가 만든 오픈소스
     * 런타임(near-zero) & 빌드타임 구현을 같이 제공
     * SSR 지원
     * CSSType을 이용한 Type-Safe한 스타일 가능
     * Atomic CSS 사용으로 스타일 재사용 가능 및 CSS 이슈 회피
"
"https://news.hada.io/topic?id=6061","Monorepo에 대한 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Monorepo에 대한 모든 것

Monorepo란 무엇인가

     * ""여러 개의 개별 프로젝트를, 잘 정의된 관계를 통해서 하나의 Repo에 담은 것""
     * Monorepo ≠ Monolith

왜 해야할까 ?

     * 기존의 Polyrepo(여러개의 Repo를 사용하던 방식)를 선택한 이유는 ""팀 자율성(team autonomy)"" 때문이었음
          + 팀들이 각자 원하는 라이브러리를 선택하고, 누가 코드에 기여하고 사용하는 지를 결정하는게 가능
     * PolyRepo는
          + 코드 공유가 번거로움
          + 코드 중복이 많음
          + 공유 라이브러리의 크리티컬 버그 및 큰 변경시 비용이 많이 듬
          + 프로젝트별 일관되지 않은 개발도구 사용
     * Monorepo는
          + 새로운 프로젝트를 생성하는 오버헤드가 없음
          + 전체 프로젝트에 걸침 아토믹 커밋
          + 모든 것을 버전 번호 하나로 관리
          + 개발자 모빌리티(프로젝트간 이동)

Monorepo 툴들이 제공하는 기능들과 각 도구간 비교

   → Bazel, Gradle, Lage, Lerna, Nx, Rush, Turborepo
     * 로컬 캐슁
     * 로컬 태스크 오케스트레이션
     * 분산 캐슁
     * 분산 태스크 실행
     * 투명한 리모트 실행
     * 영향받는 프로젝트/패키지 감지
     * 워크스페이스 분석
     * 종속성 그래프 시각화
     * 코드 공유
     * 일관적인 툴링
     * 코드 생성
     * 프로젝트 제약 및 가시성

인식의 전환

     모노레포는 여러분의 ""조직과 코드에 대해 생각하는 방식""을 바꿉니다

     * 일관성을 추가하고,
     * 새 프로젝트 생성할 때나 대규모 리팩토링을 수행할 때 마찰을 줄이며,
     * 코드 공유 및 팀간 협업을 촉진함으로써
     * 조직이 보다 효율적으로 작업할 수 있음

다양한 솔루션들이 있지만, 각자 목표가 다름

     * Bazel (by Google) : “A fast, scalable, multi-language and extensible build system.”
     * Gradle (by Gradle, Inc) : “A fast, flexible polyglot build system designed for multi-project builds.”
     * Lage (by Microsoft) : “Task runner in JS monorepos”
     * Lerna : “A tool for managing JavaScript projects with multiple packages.”
     * Nx (by Nrwl) : “Next generation build system with first class monorepo support and powerful integrations.”
     * Rush (by Microsoft) : “Geared for large monorepos with lots of teams and projects. Part of the Rush Stack family of projects.”
     * Turborepo (by Vercel) : “The high-performance build system for JavaScript & TypeScript codebases.”

   응용 프로그램을 개발해서 고객사 마다 설치하다보면,
   어떤 고객사는 더이상 업그레이드를 원치 않을때도 있고,
   어떤 고객사는 그들만의 특별한 버전을 요구할때도 있어요.

   그래서 이런 고객사들이 늘어나다 보면,
   결국 Repository가 한 수십개의 고객사 맞춤 버전 branch 로 가득합니다.
   각 branch 마다 조금씩 다른 버전이 들어있어요.

   이런 상황에서 Monorepo 글을 보니까.. 정말 꿈같은 이야기처럼 들리네요. ㅎㅎ

   토발즈가 대부분의 상황에서 공유라이브러리는 좋은 생각이 아니라고 했던게 생각나네요.. 최근 적용해보고 있는데 생각보다 공유할만한 부분은 적고 빌드시스템이 꼬이는부분은 커서 저는 모노레포가 기대만큼 이상적인 시스템이 아니라는 생각..

   subversion 이 대세이던 시절에는 그냥 너무 당연했던 일인데 뭔가 아이러니하다는 생각이 많이 들어요.
   프론트엔드 개발만 한정해서 다뤄지는 것도 의아하고요.
   ms 에서 git 도 subversion 처럼 쓸 수 있게 가상파일시스템을 만들었는데 그게 일반화되지 않아서 슬프네요.

   뭔가 요즘 보면 기술이 돌고 도는 느낌이 더 심하긴 해요.
   어 이거 예전에 별로 였던 그거 아냐? 라는 생각이 들 때가 있어서.. 너무 오래 굴렀나 싶어요. 흑흑
"
"https://news.hada.io/topic?id=6084","Red Hat과 IBM의 Node.js 레퍼런스 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Red Hat과 IBM의 Node.js 레퍼런스 아키텍처

     * 경험을 통해 얻은 내용을 정리해서 내/외부 고객을 돕기 위함
     * 기능 컴포넌트
          + Web Framework
          + Template Engines
          + Message Queuing
          + Internationalization
          + Accessibility
          + GraphQL
          + Databases
          + Authentication and Authorization
          + Data Caching
          + REST API Development
          + Scaling and Multi-threading
          + Consuming Services
          + Node versions/images
          + Transactions_handling
     * 개발
          + Choosing and vetting dependencies
          + Building good containers
          + Static Assets
          + Code Quality
               o Code Consistency
               o Testing
               o Code Coverage
               o TypeScript
          + References to CI/CD
          + Npm
               o Npm Proxy / Internal Registries
               o Npm Publishing
               o Package Development
          + Secure Development Process
     * 운영
          + Health Checks
          + Monitoring/Metrics
               o Monitoring
               o Metrics Collection
               o Distributed Tracing
          + Problem Determination
          + Logging
          + Rollout
          + Deployment
               o Containers
               o Serverless
          + Load-balancing
          + Failure Handling
"
"https://news.hada.io/topic?id=6094","Steam Deck 리뷰 : 아직 준비되지 않았다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Steam Deck 리뷰 : 아직 준비되지 않았다

     ""첫째, 스팀덱은 최근 몇년간 리뷰한 어떤 가젯보다 재미나다.
     둘째, 스팀덱은 엉망이다. 너무 급했고 미완성이고 버그가 있고 불안정하다""

장점

     * 저렴한 가격의 강력한 고품질 하드웨어
     * 무한한 사용자 정의 가능한 컨트롤
     * 쉬운 성능과 배터리 소모 밸런스 조정
     * 게임 일시 중단 및 이어하기
     * 완전한 Linux PC

단점

     * 미완성, 버그 있는 소프트웨어
     * 멈추지 않고 돌아가는 소음 많은 팬
     * 몇몇 유명 게임이 아직 동작하지 않음
     * 최상 모드에서 2시간도 안 가는 배터리

   스팀덱 덕분에 리눅스 게이밍 환경이 엄청난 속도로 발전하는 것 같습니다.
   개인적으로 리눅스 워크스테이션을 좋아하는데, 최근 리눅스 데스크탑 환경이 정말 좋아서
   이대로 게이밍 환경만 더 좋아진다면 리눅스를 PC로 사용하기에도 부족함이 없다고 생각이 듭니다.
   최근 금융업무는 대부분 스마트폰으로 처리하니, 인터넷뱅킹같은 문제도 이제는 별로 없고요.

   스팀덱으로 더 발전하겠지만, 스팀덱 이전부터 스팀에서는 리눅스 게이밍에 대해 열의를 보여왔고 프로톤이라는 것을 개발해서 리눅스 상에서 스팀 상의 게임들을 돌릴 수 있도록 적극적으로 지원해왔습니다. 게임이 직접 리눅스를 지원하지 않아도 이미 리눅스에서 동작하는 게임이 꽤 많습니다.

   맞습니다. 이전부터 스팀의 리눅스지원은 꽤나 괜찮았죠. 다만 이전까지는 긱들의 전유물정도로만 느껴졌습니다. 스팀덱이 주목받으면서 최근 훨씬 빠르게 발전하고 있다고 느껴집니다 :)

   밸브, 휴대용 PC게임 콘솔 Steam Deck 공개
"
"https://news.hada.io/topic?id=6065","Linux From Scratch","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Linux From Scratch

     * 리눅스 소스코드에서 자신만의 리눅스 시스템을 만드는 가이드 프로젝트
     * PDF / HTML 형태의 이북으로 제공
     * 서브 프로젝트들
          + LFS : Linux From Scratch 메인 가이드 (377P)
          + BLFS : Beyond LFS
            → 완성한 LFS를 좀 더 커스터마이징하고 사용하기 쉽게 만드는 확장
          + ALFS : Automated LFS
            → LFS 와 BLFS를 자동화하는 도구들
          + Hints / Patches

   현재 버전 11.0 으로 20년 가까이 업데이트 되고 있는 가이드입니다.
   자신만의 배포본 만들기는 젊은(?) 시절의 로망 같은거 같아요.
   여기서 조금 더 쉬운 접근을 취하면, 아마도 Slackware 설치 정도 아닐까 싶네요.

   와! 긱뉴스 링크에는 긱뉴스 아이콘이 나오네요!

   전에 의견주셔서 반영했습니다. 좋은 제안 고맙습니다!
"
"https://news.hada.io/topic?id=6086","WAPM - WebAssembly Package Manager","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   WAPM - WebAssembly Package Manager

     * WASM을 위한 패키지 매니저
     * WASM Shell을 제공하여 브라우저에서 실행 및 테스트 가능 (wamser-wasi)
     * Wasmer로 리눅스/윈/맥에서 실행 가능한 스탠드얼론 앱 생성 지원
"
"https://news.hada.io/topic?id=6007","카카오의 한국어 AI언어모델 KoGPT, 점수 과장됐다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     카카오의 한국어 AI언어모델 KoGPT, 점수 과장됐다

   - 카카오브레인이 만든 GPT-3 모델의 한국어 특화 버전 KoGPT의 성능을 본래 점수보다 높게 공개
   - 코드상 문제로 테스트 과정에서 초기화를 하지 않고 평가한 점수 그대로 기입
   - 리포트에 밝힌 점수보다 5점 정도 낮아.. 평가 공정성 훼손

   - KoGPT - 한국어 AI언어모델 오픈소스 공개 https://news.hada.io/topic?id=5407
"
"https://news.hada.io/topic?id=6074","Almost Pong","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Almost Pong

     * Pong을 스페이스바 또는 화면 탭하는 싱글 버튼 누르는 게임으로 트위킹한 것
     * 모든 스프라이트와 사운드는 별도 애셋을 로드하지 않고 Javascript 코드에서 생성됨

   몇번 플레이해봤는데 중독성이 있네요.

   이런 게임이 등록되었을때 왁자지껄한 HN 분위기가 참 부럽.. ㅎㅎ
   https://news.ycombinator.com/item?id=30517626

   개발자인 Thomas Palef는 Make 2D Games in Javascript with Phaser 라는 책도 썼고요

   2014년에는 12주동안 매주 1개씩 게임을 만드는 도전 프로젝트도 진행한 적 있습니다.
"
"https://news.hada.io/topic?id=6109","애플, Mac Studio 와 Studio Display 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   애플, Mac Studio 와 Studio Display 공개

Mac Studio

     * M1 Max 와 M1 Ultra 탑재 버전
     * 가로세로 19.7cm로 맥미니와 같은 크기에 높이만 9.5cm로 약 2.6배 높음
     * M1 Max 는 16코어 Xeon Mac Pro 대비 50% 빠름
     * M1 Ultra 는 16코어 Xeon Mac Pro 대비 90% 빠르고, 28코어 Mac Pro 대비 60% 빠름
     * 4개의 썬더볼트 4, 10Gb 이더넷, USB-A 포트 2개, HDMI 포트 1개
     * 전면에 USB-C 포트 2개 (Max는 USB-3, Ultra 모델은 썬더볼트 4) 와 SD카드 슬롯
     * 최대 4대의 Pro Display XDR및 1대의 4K TV 지원
     * M1 Max 2,690,000원~ : 32GB~64GB 램, 512GB~8TB
     * M1 Ultra 5,390,000원~ : 64GB~128GB 램, 1TB~8TB

Studio Display

     * 68.3cm(27인치) 5K Retina 디스플레이
     * 알루미늄 외장
     * 최대 30도까지 기울어지는 기본 스탠드 / 높이조절 가능 스탠드 / VESA 마운트
     * A13 Bionic 칩 내장한 12MP 울트라 와이드 카메라 및 오디오 시스템
          + 센터스테이지
          + 스튜디오급 3 마이크 어레이
          + 6개의 하이파이 스피커 시스템 : 4개의 포스 캔슬링 우퍼와 2개의 고성능 트위터
          + Spatial Audio (Dolby Atmos )
     * 3개의 USB-C 및 1개의 썬더볼트 3
     * 2,090,000원~

   맥스튜디오 소개하고 나서 아직 맥프로는 남아있다고 얘기한 것으로 봐서 성능을 더 업해서 나오려나 봅니다.
"
"https://news.hada.io/topic?id=6005","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.
   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.
   * 지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   사펑 1.5패치가 나와서 2회차 + 엔딩이후 추가 플레이 중입니다! 참 재미있어요.

   팝업북 만들기를 따라해보려고요~

   호라이즌 제로 던 : 포비든 웨스트가 오늘 출시 되어서 주말까지 열심히 달릴 듯 합니다.
   기계 공룡은 정말 매력적인 컨셉인거 같아요.
"
"https://news.hada.io/topic?id=6101","Make - 노코드 자동화 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Make - 노코드 자동화 도구

     * 약 1000여개의 커넥터를 통해서 각종 서비스를 노코드 방식으로 연결하여 자동화 하는 도구
       → 개발툴, 협업도구, CRM, BI, IoT, 클라우드 등 대부분의 웹 서비스를 지원
     * 5000개가 넘는 다양한 템플릿 제공
     * 무료티어 : 1000ops/월
     * 예전 이름은 Integromat. Zapier의 경쟁제품

   제목보고 Makefile 을 코드없이 쓰는건줄 알고 깜짝놀랬네요 ㅎㅎ

   No-Code/Low-Code 시장의 이해
   지금 내는 비용의 2배를 내더라도 사용하고 싶은 도구는?
"
"https://news.hada.io/topic?id=6011","Flexbox Froggy - 개구리를 움직여서 CSS Flexbox 배우기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Flexbox Froggy - 개구리를 움직여서 CSS Flexbox 배우기

   - CSS Flexbox를 쉽게 배우기
   - 총 24단계로 구성
   - 오픈소스로 한국어 및 40개 언어로 번역됨

   - 타워 디펜스로 배우는 CSS FlexBox http://www.flexboxdefense.com/
"
"https://news.hada.io/topic?id=5987","수백명의 사람들과 연락을 유지하는 간단한 시스템 만들기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     수백명의 사람들과 연락을 유지하는 간단한 시스템 만들기

   # Airtable을 이용해서 자동화 하기
   - 사람들을 연락 주기별 4가지 카테고리로 분류
   ㅤ→ 3주, 2개월, 6개월, 1년에 한번
   - 첫번째 테이블은 ""계속 연락해야 할 사람들""을 모두 저장
   ㅤ→ 이름, 연락처, 노트, 카테고리, 마지막 연락일, 다음 연락일, 남은 날짜(다음 연락일에서 오늘 날짜를 뺀 값)
   - 두번째 테이블은 ""잠재적인 새 연락처""
   ㅤ→ 아직까지 얘기 못해본 새 사람들을 정리
   - Airtable 자동화로 매일 아침 짧은 메일을 받아보도록 설정
   ㅤ→ ""오늘 OOO에게 연락해야함, 이 노트들 참고 할것""
   ㅤ→ 매일 아침 6시에 첫번째 테이블의 남은 날짜를 확인해서 보내도록 설정
   ㅤ→ 또한 두번째 테이블에서 랜덤으로 연락할 날짜도 하나 선정하게 만듬
   # 어떤 메시지를 보내야 할까 ?
   - 그 사람들이 최근에 뭐하는 지를 몇분 들여서 확인
   ㅤ→ 소셜 프로필, 개인 웹사이트, 그들이 최근에 발행한 글들을 살펴보기
   ㅤ→ 가장 중요한 것은 ""내가 받고 싶은 형태의 메시지를 보내는 것"", ""짧고 진실하며 도움이 되는""
   - 가끔은 그들이 관심 있어 할만한 기사나 책을 공유하기도 함
   - 자신의 상태 공유를 잘 안 하는 사람들에게는 그냥 요즘 근황 묻기

   안드로이드 전용 헬로연락처 앱이 있습니다.
   https://play.google.com/store/apps/details?id=co.habitfactory.hello
   단순 연락여부만 체크할 수 있지만 안드로이드 OS에서 통화 내역 조회 권한을 받아가서 관리하니 훨씬 간편하게 관리해주더라고요

   무식하게 반복 할 일로 관리했는데, airtable로 관리하다니 좋은 방법이네요. 덕분에 airtable도 한 번 써봤습니다. 무료 플랜은 script를 추가하는 게 안 돼서 Potential New Contacts 테이블에서 랜덤으로 뽑는 건 못했습니다.

   완전히 동일한 의도로 사용할 수 있는 아이폰 전용 앱이 단 한가지가 있는데, 원래 개발만 하다가 2년 전부터 사람을 상대하는 역할로 바뀌게되어 너무 잘 사용했지만 컴퓨터로 관리할 수 있지 않아 종종 불편하곤 했습니다.
   버그가 좀 많긴 하지만, 필요한 기능은 다 있습니다. 폰으로 관리하고 싶은 분들께는 아래 앱을 추천드립니다 ㅎㅎ
   https://apps.apple.com/us/app/social-contact-journal/id1186696582

   오 폰으로 딱 같은 기능을 구현해놨네요. 저같은 사람한테는 이게 더 좋은듯 합니다
   추천 고맙습니다!

   아, 조금 반성하게 되네요.

   저는 태생적으로 이런 안부 문자를 잘 못하는 사람이라.. 이렇게 관리하는 사람이 신기하긴 합니다.
   HN의 첫 댓글에서는 이런 말도 있네요.
   https://news.ycombinator.com/item?id=30329475
   ""난 가끔 생각 나는 사람들에게 이렇게 그냥 문자하기도 하는데.. 사람들이 이것에 꽤 자주 응답해서 놀라곤 합니다""
   'Hey, you just popped into my mind, I hope all is well with you and yours!'
   '갑자기 님 생각이 났어요. 모든 일이 잘 되길 바랍니다.""
   오늘은 생각난 사람들에게 한번 연락해봐야 하나 생각이 드네요.
"
"https://news.hada.io/topic?id=6047","Shazam은 어떻게 동작하는가?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Shazam은 어떻게 동작하는가?

     * 노래 인식앱 Shazam 창업자들의 2003년 논문을 그대로 구현한 오픈소스 abracadabra 개발자가 정리한 내용
     * 논문에서 설명 안된 부분에 대해서 자신이 채운 방법을 소개하고 파이썬 코드와 연결
     * 왜 노래 인식은 어려운가?
     * Spectrogram 계산하여 Peak들 찾고, 그 Peak들을 해쉬해서 핑거프린트 생성
     * 핑거프린트와 DB의 해쉬들 매칭

   아마 저였으면 cross correlation 이용해서 무식하게 매칭하는 방법을 썻을 듯 하네요 ㅎㅎ

   와 정말 멋지네요 아무 생각 없이 사용해오던 앱인데 세상에 똑똑한 사람들이 참 많네요 좋은 글 공유 감사합니다

   흥미로운 내용 공유해주셔서 감사합니다
   pure technological magic 이라는 표현이 와닿네요
   본문에 포함되어 있는 푸리에 변환을 설명해주는 유튜브도 재밌게 봤어요 :)
"
"https://news.hada.io/topic?id=6087","Google Docs, Pageless 모드 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Google Docs, Pageless 모드 추가

     * 스크린 전용으로 페이지 구분이 없는 편집 모드
     * 이미지는 스크린사이즈에 맞게 조정되며, 넓은 테이블은 좌우 스크롤 지원
     * 줄 바꿈도 화면 크기 및 줌 인/아웃에 맞추어 조정
     * 페이지 번호, 헤더와 푸터 등은 보이지 않으며 페이지 모드 에선 다시 볼 수 있음

   이 모드를 10년 넘게 기다려왔는데 반가운 소식이네요.

   사실 요즘 출력을 전제로 하지 않는 문서들도 많아서 이건 맞는 방향인 것 같긴 하네요.
   이렇게 되면 노션 같은 도구랑 비슷하게 사용도 가능하려나요..
"
"https://news.hada.io/topic?id=6018","Jujutsu - 간단하고 강력한 Git 호환 DVCS","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Jujutsu - 간단하고 강력한 Git 호환 DVCS

   - 여러 VCS의 장점을 결합
   ㅤ→ Git : 데이터 모델과 속도
   ㅤ→ Mercurial : 익명 브랜칭, ""index""로 부터 자유로운 CLI, revsets, 강력한 히스토리-재작성
   ㅤ→ Pijul/Darcs : First-class conflicts
   - 기존 VCS에 없는 독자적인 기능 : working-copy-as-a-commit, Undo 기능, 자동 Rebase, Rsync/Dropbox/분산파일시스템을 이용한 안전한 복제 기능
   - 실행 커맨드는 jj
   ㅤ→ jj를 Git의 인터페이스처럼 그냥 대체해서 사용 가능
   ㅤ→ 커밋은 일반 Git 커밋처럼 생성됨
   ㅤ→ 언제라도 Git으로 돌아가는게 가능
   - 대부분의 Jujutsu 명령은 작업 사본(Working Copy)을 자동 커밋
   - 명령들은 Repo를 먼저 업데이트하고 마지막으로 작업 사본을 수정함
   ㅤ→ 즉 작업사본이 수정된 경우에도 jj rebase 같은 모든 명령이 사용 가능
   - 전체 Repo가 버전 컨트롤 됨. 모든 동작들은 기록되며 항상 예전 상태로 복귀 가능
   - Conflict 나더라도 그 자체도 커밋에 기록됨. 즉, 나중에 해결 가능
   - 커밋을 수정하면, 그 커밋의 하위 커밋들은 자동으로 리베이스 됨
   - 구글 직원이 20% 프로젝트로 취미 개발 중

   왜 이름이 주술인지 궁금하네요

   주짓수 옛날 스펠링일 겁니다. 이름 잘 지은 것 같아요

   그러고보니 유술도 발음이 같았네요
"
