"https://news.hada.io/topic?id=4196","A powerful CLI for create a new production-ready project with backend, frontend and deploy automatio","                                                                                                                                                                                                                                                                                                                                                                                                                                                                  A powerful CLI for create a new production-ready project with backend, frontend and deploy automatio

   Create a new production-ready project with backend (Golang), frontend (JavaScript, TypeScript) and deploy automation (Ansible, Docker) by running one CLI command. Focus on writing code and thinking of business-logic! The CLI will take care of the rest.
"
"https://news.hada.io/topic?id=4194","Linux Terminal Tools [103p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Linux Terminal Tools [103p PDF]

   1 오버뷰
   2 기초
   3 스트림, 파이프, 리디렉션
   4 클래식 도구: find,grep,awk,sed
   5 세션 관리: tmux
   6 ssh: 설정과 터널링
   7 GnuPG로 안전한 통신하기
   8 Bash 도구들
   9 프로그램 개발 도구
   10 기타 유틸리티
   * 실습과 문제들

   감사합니다. 요즈음에 터미널 환경에 장점에 빠져들고 있네요 ^^
"
"https://news.hada.io/topic?id=4187","(보고서) 암호자산 성장은 국채와 통화정책에까지 영향을 미칠까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (보고서) 암호자산 성장은 국채와 통화정책에까지 영향을 미칠까?

   (보고서) 암호자산 성장은 국채와 통화정책에까지 영향을 미칠까?
   암호자산 거래대금 코스피 추월, 일부 기업들 결제수단으로 암호자산 추가
   암호자산 상용화는 기존 금융시장과 금융기관, 중앙은행 역할에 큰 변화 초래
   민감하고 논쟁적이면서도 고민해야만 하는 중요한 이슈들
   Q. 민간 암호자산(Crypto currency)이 장기적으로 결제통화로써 기능을 갖게 될 것인가?
   궁극적으로 법정통화를 대체할 가능성이 있는가?
   Q. 암호자산의 상용화, 중앙은행 디지털화폐(CBDC: Central Bank Digital Currency) 발행이
   향후 통화정책에 어떤 영향을 미칠 것인가?

   Q. 중앙은행이 발행하는 CBDC와 민간 암호화폐가 공존하면서 중앙은행의 통화정책
   영향력을 유지할 수 있는가?
   Q. 암호자산에 대한 투자 증가는 국채 수요를 위축시킬 것인가?
   Q. 블록체인 기술 도입이 기존 전통적 금융산업의 기능을 얼마나 대체하게 될까?

   가치가 수분 내에 수백퍼씩 오르락 내리락하는 화폐가 있다?...
"
"https://news.hada.io/topic?id=4240","eBPF on Windows","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            eBPF on Windows

   - 리눅스의 eBPF를 MS가 직접 윈도우에 구현하는 프로젝트 (WIP)
   - 기존 eBPF 툴체인(Clang등)으로 생성한 바이트코드를
   ㅤ→ 유저모드에서 PREVAIL Verifier를 이용해서 검증하고 IOVisor uBPF로 JIT 컴파일
   ㅤ→ 커널모드에서 uBPF 인터프리터 또는 JIT컴파일된 코드를 실행
   ㅤ→ TCP/IP 및 NDIS에 대한 eBPF Shim을 제공
   - 기존 eBPF가 그대로 실행되도록 소스코드 호환수준을 목표로 하지만, Linux 특정된 것들은 어려울 것
   ㅤ→ libbpf API를 호환되게 노출

   요즘 리눅스에서 가장 뜨고 있는 기술중에 하나인데, MS의 행보는 정말 놀랍네요.
   eBPF설명은 제가 예전에 긱뉴스 팟캐스트에서 설명한게 있습니다.
   - https://www.youtube.com/watch?v=aCw0YwEHpCU&t=1892s
   - eBPF rethinking the Linux Kernel - https://news.hada.io/topic?id=1958
   - BPF : 새로운 타입의 소프트웨어 - https://news.hada.io/topic?id=1011
   - bpf를 이용한 성능분석 - https://news.hada.io/topic?id=88
   - eBPF 공식 사이트 오픈 https://news.hada.io/topic?id=2661
   - eBPF Summit Recap https://news.hada.io/topic?id=3117
   - New Relic, eBPF 회사 Pixie 인수하고 오픈소스로 공개 https://news.hada.io/topic?id=3371
"
"https://news.hada.io/topic?id=4276","Atuin - 쉘 히스토리를 SQLite에 저장하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Atuin - 쉘 히스토리를 SQLite에 저장하기

   - 쉘 코맨드와 추가 컨텍스트를 SQLite DB에 암호화 하여 저장
   - 서버 이용해서 쉘 히스토리를 여러대의 머신간에 동기화 가능
   - 다양한 검색조건
   ㅤ→ ""어제 3시 이후에 성공(exit 0)한 모든 make 명령""
   - up 이나 ctrl-r 을 검색가능한 히스토리 UI로 연동
   - 통계 기능 지원 : ""가장 많이 사용한 명령""
   - zsh/bash 지원
   - Rust 오픈소스

   BashHub - Bash/Zsh 히스토리를 클라우드에 저장하기 https://news.hada.io/topic?id=1617
   검색 UI는 BashHub 쪽이 조금 더 쉬운거 같기는 하네요.
"https://news.hada.io/topic?id=4227","ZX - Javascript로 쉘스크립트 작성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ZX - Javascript로 쉘스크립트 작성하기
"

   - child_process 에 대한 편리한 래퍼(Wrapper)를 제공
   - $`명령` 으로 쉘커맨드 실행
   ㅤ→ exitCode,stdout,stderr 포함한 ProcessOutput 리턴
   ㅤ→ await, Promise 이용
   - fetch() : node-fetch 래퍼
   - question() : 입력받는 readline 래퍼
   - chalk,fs,os 등의 패지키 지원
   - 스크립트내에서 외부 스크립트 임포트 지원
   - https로 시작하는 원격 스크립트 실행 가능
   - 구글에서 만들었으나 공식 지원 오픈소스는 아님

   $`...` 이거 어떻게 구현했나 살펴보니, ES6의 Literal Template을 사용했더라고요~
   이렇게도 사용할수 있구나 생각했습니다 ㅎㅎ
"
"https://news.hada.io/topic?id=4217","Brave, iOS용 Playlist 기능 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Brave, iOS용 Playlist 기능 공개

   - iOS용 Brave브라우저내에서 다양한 오디오/비디오 콘텐츠의 플레이리스트 생성해서 재생
   - Youtube,Vimeo,Twitch,Soundcloud 및 모든 팟캐스트 지원
   - 리스트에 추가하면 자동으로 브라우저내에 전용으로 다운로드해서 오프라인 및 백그라운드 재생 가능
   - 스트리밍 비디오도 지원
   - DRM콘텐츠는 불가(Spotify/Netflix 등)
   - iOS13 이상만 지원

   유튜브 영상을 플레이리스트에 추가해보니 내부에서 다운로드 하는게 잘보입니다.
   어찌보면 유튜브 광고도 무시하고 백그라운드로 재생하는 기능인데, 애플이 허용해준게 이상하네요.
   아마도 리뷰어가 놓친걸 수도.. 곧 삭제될지도 모르겠네요.
"
"https://news.hada.io/topic?id=4163","사내용 도구를 안전하게 오픈소스화 하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        사내용 도구를 안전하게 오픈소스화 하는 법

   - Repo의 Secret 스캔
   - 내부 이름/이메일을 공개용으로 변환
   ㅤ→ git 히스토리에서 이메일 필터링
   - Contribution 가이드라인 작성법
   - 버그 리포트 / PR 템플릿 작성 팁
   - 알맞는 라이센스 선택하기
   - 보안 정책 작성
   - README 작성 팁

   오픈소스 라이센스 선택하기 https://news.hada.io/topic?id=4160
"
"https://news.hada.io/topic?id=4193","Rome Tools, Inc 회사 설립","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Rome Tools, Inc 회사 설립

   - Babel 개발자 Sebastian McKenzie가 만든 자바스크립트 e2e 개발 툴체인 Rome
   - $4.5M 시드 펀딩을 받아서, Babel/Yarn을 같이 개발했던 Jamie Kyle과 함께 회사 설립
   - 오픈 소스인 Rome 을 지속적으로 유지 보수하고, 뒷받침 하는 제품과 서비스 개발
   - 오래동안 기여했던 컨트리뷰터들을 직원으로 고용

   - Rome - 실험적인 자바스크립트 툴체인 https://news.hada.io/topic?id=1609
   - Rome - JavaScript / TypeScript Linter 베타 릴리즈 https://news.hada.io/topic?id=2621
   - 모든 길은 Rome으로 통할까? [번역] https://news.hada.io/topic?id=2788
"
"https://news.hada.io/topic?id=4249","Google Docs, Canvas 기반 렌더링으로 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Google Docs, Canvas 기반 렌더링으로 변경

   - 기존 HTML기반 렌더링을 Canvas 기반으로 몇달에 걸쳐 이관 예정
   ㅤ→ 성능 및 플랫폼간 일관성을 높이기 위함
   ㅤ→ 기능상 변화는 없으나, 기존 크롬 확장들에 영향을 주게 될 수 있음
   - 크롬 확장을 사용/개발하는 곳에서는 기존 확장 테스트 필요
   ㅤ→ 가능하면 Google Workspace Add-ons Framework 를 이용하는 것을 권장
"
"https://news.hada.io/topic?id=4154","C++ 고성능 가비지 콜렉션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C++ 고성능 가비지 콜렉션

   Chrome V8 팀에서는 메모리 최적화를 위해
   굉장히 많은 일들을 하고 있는데요.
   그 중 하나인 C++ 고성능 GC에 관련된 글을 공유합니다.
   외에도 V8 블로그에서 Memory 태그로 들어가면
   굉장히 많은 메모리 최적화 팁을 얻을 수 있습니다.
   https://v8.dev/blog/tags/memory
"
"https://news.hada.io/topic?id=4229","GitOps Con 2021 전체 발표 동영상 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GitOps Con 2021 전체 발표 동영상 공개

   - Advancing the Future of CI/CD & GitOps Together
   - Closing the gap: OpenShift in a disconnected environment with GitOps
   - GitOps practice at scale @Generali
   - Shifting Policy Enforcement to the Left using GitOps
   - Machine Learning with GitOps!
   - The GitOps Journey
   - Taking GitOps Automation to the Next Level
   - GitOps as a means of distribution
   - GitOpsify All The Things 🔨 - Tools, Apps, Even Your Organisation and Teams!
   - Cloud-native Patterns - Ops Edition
   - GitOps: The Essential Kubernetes Workflow
   - Managing multiple clusters with GitOps and ClusterAPI

   - GitOps 의 3가지 문제점 https://news.hada.io/topic?id=1835
   - GitOps 툴 비교 : FluxCD vs ArgoCD vs Jenkins X https://news.hada.io/topic?id=2011
   GitOps 에 대한 한글로 된 소개글
   [1] GitOps-based CI/CD 파이프라인 https://medium.com/humanscape-tech/…
   [2] 서버리스 시대에 GitOps를 통한 모던 CI/CD 파이프라인 구축 https://aws.amazon.com/ko/blogs/…

   What is GitOps? 라는 질문이 먼저 떠오릅니다. :-)
"
"https://news.hada.io/topic?id=4180","왜 폴 그레이엄은 회사 이름을 Y Combinator라고 지었을까","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  왜 폴 그레이엄은 회사 이름을 Y Combinator라고 지었을까

   ""세계 최고의 Lisp 해커인 폴 그레이엄은 아마도 함수형 프로그래밍의 Y Combinator에서 회사의 이름을 따왔을 것""
   - Clojure - 오늘 사용할 언어
   - Clojure 문법 소개
   ㅤ→ defn - 함수 생성
   ㅤ→ fn - 람다
   ㅤ→ def - 정의
   ㅤ→ if - 조건문
   ㅤ→ factorial - 예제
   - Y Combinator를 맛보기 전에…
   ㅤ→ Combinator란?
   ㅤ→ I Combinator
   ㅤ→ K Combinator
   - Y Combinator로 가는 여정
   ㅤ→ 이름 없는 함수들의 무한루프
   ㅤ→ Ω
   ㅤ→ Combinator
   ㅤ→ 다시 factorial
   ㅤ→ Y Combinator
   - 폴 그레이엄의 Y Combinator
   - 참고문헌

   자바스크립트로 만드는 Y Combinator, 서광렬 (한국어)
   https://kwangyulseo.com/2015/06/21/y-combinator/

   해커와 화가 읽어보면 리스프 좋아하더군요.

   YC소개가 아닌 클로져 언어와 그 안에서의 Y Combinator 설명
"
"https://news.hada.io/topic?id=4226","sql.js-httpvfs - GitHub Pages에서 SQLite DB 호스팅 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            sql.js-httpvfs - GitHub Pages에서 SQLite DB 호스팅 하기

   - 백엔드 없는 스태틱 웹페이지에서 풀버전 SQLite DB 사용하는 방법
   - SQLite를 emscripten 이용해서 WASM으로 컴파일하고 sql.js를 JS Wrapper로 사용
   ㅤ→ sql.js는 메모리 기반이어서 HTTP Range 요청으로 DB를 읽어오도록 변경(httpvfs)
   ㅤ→ 요청을 작게 하기 위해 page를 1 KiB로 설정(기본 4 KiB)
   - DB가 브라우저 에서 실행되므로, DOM을 DB처럼 사용도 가능
   - GitHub 외에 GitLab Pages, Netlify 등 어떤 스태틱 페이지에서도 가능

   웹에서 돌릴 수 있는 SQL 데이터베이스 구현체로는 Rust로 작성된 GlueSQL도 있습니다. :)
   GlueSQL - https://github.com/gluesql/gluesql
   SQLite와 같이 임베디드 SQL 데이터베이스처럼 사용하는 것도 가능하구요.
   새로운 SQL 데이터베이스를 만들기 위해 라이브러리 형태로 GlueSQL를 사용하는 것도 가능합니다. 이 경우 GlueSQL 에서 제공하는 몇 가지 스토리지 trait 만 구현하면 됩니다.
   현재 기본 레퍼런스 스토리지 외에 몇 가지 사용 사례가 있습니다.
   1. GlueSQL.js - https://github.com/gluesql/gluesql-js
   WASM 으로 컴파일되어 웹에서 직접 돌릴 수 있는 SQL 데이터베이스 입니다.
   현재는 3가지 서로 다른 스토리지를 지원하고 있습니다.
   * 메모리
   * HTML5 로컬스토리지
   * HTML5 세션스토리지
   (현재 조금 예전 버전의 GlueSQL을 사용하고 있긴 합니다.)
   2. GlueSQL Sheets - https://sheets.gluesql.com
   커스텀 스토리지에 어떤 것이든 붙일 수 있다는 장점을 살려서, GlueSQL Sheets는 구글 스프레드시트를 스토리지로 사용하는 SQL 데이터베이스 서비스 입니다.
   제공하는 API를 통해 SQL을 실행하면, 모든 데이터는 해당되는 구글 스프레드시트에서 읽고, 쓰여집니다.
"
"https://news.hada.io/topic?id=4261","Lighthouse 로 Web Vitals 최적화 하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Lighthouse 로 Web Vitals 최적화 하기

   - Core Web Vitals 측정
   - Largest Contentful Paint 개체 찾기
   - LCP 개선을 위해 프리로드 하기
   - Cumulative Layout Shift 영향주는 개체 찾기
   ㅤ→ 사이즈 없는 이미지들
   ㅤ→ 광고들
   ㅤ→ non-composited 애니메이션들
   - First Input Delay / Total Blocking Time / Long Tasks 디버깅 하기

   관련 이미지 최적화 방법
   https://smashingmagazine.com/2021/04/…
   요약하는 트윗
   https://twitter.com/addyosmani/status/1388031656355794945

   구글, 검색결과 순위에 페이지 경험(Page Experience) 지표 도입 https://news.hada.io/topic?id=2197
   - Core Web Vitals
   ㅤ→ LCP : Largest Contentful Paint
   ㅤ→ FID : First Input Delay
   ㅤ→ CLS : Cumulative Layout Shift
   Lighthouse 6.0 릴리즈 https://news.hada.io/topic?id=2122
   ㅤ→ LCP,CLS,TBT 메트릭 추가
   Cumulative Layout Shift (CLS) 란 무엇인가? https://news.hada.io/topic?id=1697
   ㅤ→ 이미지/광고의 느린 로딩, 비동기 동작, 동적 DOM변경등으로 웹 페이지의 레이아웃이 얼마나 변하는 지를 측정
   ㅤ→ 사용자가 잘못된 클릭을 유발하게 되는 시각적 불안정성을 체크하는 사용자 중심 성능 지표
"
"https://news.hada.io/topic?id=4267","Schema Markup Validator","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Schema Markup Validator

   - 구글이 지원 종료한 Structured Data Testing Tool을 대체하는 도구
   - Schema.org-based 구조화 데이터를 검사하는 도구
   - JSON-LD 1.0, RDFa 1.1, Microdata 마크업을 추출 (URL 또는 텍스트)
   - 추출한 구조화 데이터 그래프의 요약 보기
   - 마크업 오류 확인
   - JS로 삽입된 데이터도 추출 가능(위젯등)
"
"https://news.hada.io/topic?id=4160","오픈소스 라이센스 선택하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             오픈소스 라이센스 선택하기

   GitHub이 상황에 따라 라이센스를 선택할 수 있게 정리
   1. 커뮤니티와 함께 하고 싶어요 : APL, GPLv3, ISC, MIT..
   ㅤ→ 기여/확장할때는 기존 프로젝트 라이센스를 그대로 사용
   2. 짧고 간단하게 허용하고 싶어요 : MIT
   3. 개선한 걸 공유하게 하고 싶어요 : GPLv3
   그 외
   - 소프트웨어가 아니라면 :
   ㅤ→ 데이터/미디어 는 CC0-1.0, CC-BY-4.0, CC-BY-SA-4.0
   ㅤ→ 폰트 : SIL Open Font License 1.1
   - 다른 라이센스들은 ? : GNU AGPLv3, GNU LGPLv3, MPL 2.0, Boost Software License 1.0, The Unlicense
   - No License
"
"https://news.hada.io/topic?id=4183","자동차는 소프트웨어 플랫폼이 될 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          자동차는 소프트웨어 플랫폼이 될 것

   - 자동차 산업이 Tesla의 OTA 업그레이드를 따라잡음
   - 포르쉐 타이칸은 선불로 $474(월$12)를 내면 원격에서 차량의 네비게이션을 조정해서 최고속도를 제한하여 이동 거리를 늘려주는 Intelligent Range Manager를 OTA로 제공
   ㅤ→ 테슬라에 영향을 받은 포르쉐가 마침내 자신들의 2.2톤 컴퓨터를 SAS 플랫폼처럼 취급하는 중
   - 대부분 자동차 제조업체들이 OTA 업그레이드를 판매하기 위한 전략을 구체화 하는 중이고, 몇 달내에 고급차량부터 보이게 될 것
   - GM도 올인했음. 지난주에 90만대의 차량에 OTA 네비게이션 버전인 Maps+ 가 출시
   ㅤ→ 2019년에 출시된 Vehicle Intelligence Platform이 시간당 4.5테라의 데이터를 처리가능
   - 하지만 쉽지는 않음. 음악/영화/무료배송 등의 구독에는 익숙하지만, 시트워머/안전기능/효율성 상승 등의 자동차의 기능들을 구독하는 것에는 익숙해지기 어려울 수 있음
   ㅤ→ BMW는 2019년에 Apple CarPlay 연동을 일년 $80 받고 제공해주겠다고 했다가 철회한바 있음
   ㅤ→ 또한 High Beam Assistance 기능의 유료 제공에 대해서도 이슈가 되는 중
   - 그럼에도 불구하고 자동차 산업은 새로운 판매방법을 시험중
   - 보통 차량에서 요구되지 않는 기능 또는 특정 시간에만 가치 있는것, 개인화된 기능 등을 이렇게 파는데에 먼저 집중 해야함
   ㅤ→ 눈위에서 많이 운전하는 사람들을 위한 트랙션 알고리즘
   ㅤ→ 날씨에 따라 제어되는 컵홀더
   ㅤ→ 업무상 차로 여행하고 마일리지 기록을 제출해야 하는 사람들을 위한 고급 분석 기능등
   - BMW가 현재 OTA로 파는 기능 들중 몇 가지는 이에 적합
   ㅤ→ 실시간 교통 알림
   ㅤ→ 사고시 재생가능한 전면카메라 40초 드라이브 레코더 (자동으로 반복 녹화)

   유익한 요약 감사합니다.
   요약을 읽으면서 나름대로 생각을 정리해봤습니다.
   https://brunch.co.kr/@graypool/27

   사람의 안전과 관련된 구독이 활성화되려면 자동차보험의 패러다임이 바뀌어야 가능합니다. 개인이 보험을 가입하면 안되는 시대가 되어야 가능합니다. 왜냐하면 개인의 책임은 점점 줄고 자동차회사의 책임이 늘어나야 되는데 보험 분쟁 발생시 상관도 없는 개인이 그 사이에 끼여있다면 심각한 피햬를 유발할 겁니다.

   관련업계 종사자로써 재미있는 내용들이 많네요.
   잘 읽었습니다.

   테슬라는 FSD를 구독으로 팔면서, 로보택시로 활용하면 구독료 이상을 벌 수 있다고 홍보할 여지가 있지만..
   일반 자동차 회사들 서비스 중에 구독형으로 살만한게 있을까...싶네요.

   근데 BMW ConnectedDrive 가보니 애플 카플레이는 현재는 1회 구매로 $300 으로 되어있긴 하네요. 제가 BMW가 없어서 상황은 잘 모르겠..
   뭐 소프트웨어 플랫폼이 될거라는 것은 다들 예상하던 것일텐데 글 후반의 내용이 흥미로워서 옮겨봅니다. 테슬라도 FSD를 구독으로 팔꺼라고 하고.. 애플이 차를 만들면 당연히 뭔가 구독형으로 집어 넣겠죠.

   BMW가 무선 카플레이와 안드로이드 오토를 개발하며 차별성이 있다며 유료화를 시도했다가 철회했는데 1, 2 시리즈 등의 모델등은 무료가 아닙니다.

   전 무선을 한 공로로 1회 비용읗 유상으로 받는 것은 동의할 수 있을 것 같아요

   오 무선 카플레이가 된다면 유료라도 인정합니다.

   비유가 아니라 진짜 사람 목숨을 다루는 소프트웨어 개발이라고 할 수 있겠네요. 품질 문제부터가 걱정이 되긴 합니다.
   그리고 구독경제라는 게 개인의 전체 비용은 올라갈 수 밖에 없는데... 자동차에도 구독경제가 들어가면 사람들의 자동차 구매욕구는 오히려 떨어지지 않을까 싶기도 하네요.
"
"https://news.hada.io/topic?id=4273","칸 아카데미 - Go언어 50만 라인으로 동작중 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       칸 아카데미 - Go언어 50만 라인으로 동작중

   - 2019년에 Python2 에서 Go로 이관하는 Goliath 프로젝트 시작
   - 시작할때는 아무도 Go를 몰랐지만, 이제는 많은 엔지니어들이 ""읽고 쓰기 쉬움"", ""일할수록 Go가 좋아짐"" 이라고 얘기함
   - Generic 이 없는게 불만이었지만, Go팀이 만드는 중
   - Go의 언어 기능이 부족해서 Python 코드 포팅시에 더 많은 노력이 필요하지만, 코드는 더 일관되고 빠르게 읽을 수 있음
   - 파이썬 대비 엄청난 속도 형상
   ㅤ→ Google Cloud Datastore 의 contention warning 이 한시간에 100여개씩 뜨던 벌크 업데이트 파이썬 코드를 Go로 바꾸고 warning 거의 하나도 없이 동작
   - 일반적으로 파이썬에 비해 더 많은 코드를 작성해야 하긴 하지만 (Verbose), 더 빠르고, 툴들이 좋고, 프로덕션에서도 잘 동작함

   5년차 고퍼로써, 제네릭은 안 넣었으면 좋겠는데... 쩝.

   Go 의 장점인 심플함이 좀 사라지는 느낌이긴 하지만,,
   제네릭으로 해결할 수 있는 문제들을 지금은 interface 패턴으로 만드는게 깔끔해보이지 않아서
   전 제네릭 추가에 긍정적이긴 합니다.. ㅎㅎ

   - 칸 아카데미, 백엔드언어를 Python2에서 Go로 변경 https://news.hada.io/topic?id=1128
   Go 개발자가 없는데 언어 변경을 시작했다는게 나름 놀랍기도 하네요.
   처음에 변경 시작 한다는 글에서는 그런 내용이 없어서 Go 개발자도 꽤 있나 보구나 했거든요.
   일반 조직에서라면 저런 시도를 하겠다고 하면 아마 엄청난 반발이 있었을텐데, 비영리 조직이어서 가능했던게 아닐까 생각도 듭니다.

   Go 로 바꾸는 조직들이 다들 만족도가 높다 싶습니다.
   확실히 쉽고 애정이 가는 언어입니다.

   Go언어가 파이썬 보다 작은 언어라 가능한게 아닐까 싶습니다. 많은 개발자들은 반나절만에도 개발이 가능했습니다.
"
"https://news.hada.io/topic?id=4268","sqliteviz - PWA SQLite Visualiser","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   sqliteviz - PWA SQLite Visualiser

   - SQLite DB/CSV 를 시각화 하는 PWA
   - 데스크탑앱 처럼 오프라인 사용 가능
   - SQL로 DB 쿼리 해서 Plotly 차트 생성
   - CSV 임포트
   - 여러개의 DB에 대한 쿼리 및 차트 관리
   - 수정된 SQLite DB Export 가능
"
"https://news.hada.io/topic?id=4171","Pluto.jl - Julia용 노트북","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Pluto.jl - Julia용 노트북

   - 쓰기 편하고 쉽게 설치가능한 Julia 언어 기반 Reactive 노트북
   ㅤ→ 변경된 코드들이 즉시 반영. Jupyter/Matlab 과 달리 Mutable Workspace가 없음
   ㅤ→ No hidden state, no hidden bugs
   - 노트북들은 순수 Julia 파일로 저장되어 일반 에디터에서도 편집 가능
   - @bind 매크로를 이용해서 HTML 개체와 Julia 변수간에 연동 지원
   ㅤ→ PlutoUI 패키지로 다양한 UI 제공
   - Julia 1.5 + 맥/리눅스/윈도우

   시작 가이드 : https://www.juliafordatascience.com/first-steps-5-pluto/
"
"https://news.hada.io/topic?id=4222","더히트 - 괜찮은 IT 서비스들을 사람들에게 알려주는 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   더히트 - 괜찮은 IT 서비스들을 사람들에게 알려주는 서비스

   안녕하세요! 더히트 팀입니다.
   '더히트'는 '괜찮은 IT 서비스들을 사람들에게 알려주는 서비스가 있으면 좋겠다'는 생각으로 만든 IT 서비스 소개 및 평가 서비스입니다!
   얼리어답터분들께 피드백을 많이 받고 싶어서, GeekNews에 공유합니다 :)
   저희 사이트에 한 번 놀러오셔서 요즘 어떤 IT 서비스가 '히트'하고 있는지, 내가 쓸만한 앱이나 웹 사이트가 있는지 확인해보세요. 그리고 소개하고 싶은 IT 서비스가 있다면 홈 페이지 우측 하단에 있는 + 버튼을 눌러, 직접 서비스를 소개해보세요.
   혹시 궁금하신 점이 있으시면 편하게 연락주시고, 저희 서비스에 대해 피드백 주신다면 정말 감사드리겠습니다!

   잘만드셨네요.
   PC로 볼때는 PC 전용 화면으로 보여졌으면 더 좋겠습니다.
   모바일용 화면 같이
   PC에서 보면 조금 답답합니다.

   피드백 감사합니다!
   모바일 버전으로 빠르게 출시하다보니 아직 부족한 부분이 많습니다 :)
   PC 화면도 준비 중이니, 완성되면 GeekNews에 한 번 더 공유드릴게요!

   PC에서 들어갔는데 좌우 스크롤 방법을 모르겠네요

   리스트 좌우에 좌/우 화살표 버튼을 추가해두었습니다!
   피드백 감사합니다 :)
"
"https://news.hada.io/topic?id=4209","Wave - SaaS 개발 스타터 킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Wave - SaaS 개발 스타터 킷

   - PHP(Laravel + Voyager) + TailwindCSS + MySQL
   - SaaS 기본 기능 제공
   ㅤ→ 사용자 프로필, 인증, 롤 기반 권한 관리, Impersonation*
   ㅤ→ 정기 구독 & 결제 : Stripe/Braintreee
   ㅤ→ 알림 / 공지, 풀 기능을 갖춘 블로그
   ㅤ→ API 제공,
   ㅤ→ 커스터마이징 가능한 테마
   ㅤ→ 관리자 도구(Voyager)
   * Impersonation : 관리자가 다른 사용자로 로그인 한 것 처럼 동작해서, 고객 지원시 이슈 해결 및 트러블 슈팅 가능

   - SaaS Boilerplate - SaaS를 손쉽게 개발 시작하기 https://news.hada.io/topic?id=2848
   - Superplate - 프론트엔드 보일러플레이트 https://news.hada.io/topic?id=4176
"
"https://news.hada.io/topic?id=4186","데이터 분석을 위한 실용적인 SQL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          데이터 분석을 위한 실용적인 SQL

   Pandas 대신 SQL 로 데이터 분석을 하는 예제들
   - SQL vs Pandas 성능/메모리 비교
   - 기본
   ㅤ→ Common Table Expressions
   ㅤ→ 데이터 생성
   ㅤ→ 랜덤 생성
   ㅤ→ 랜덤 선택하기
   ㅤ→ 샘플링
   - 기술(Descriptive) 통계
   - 소계(Subtotal) 작성 : Rollup, Cube, 그룹화
   - 누적 집계 : Window 함수, Sliding Window
   - 선형 회귀
   - 보간(Interpolation)
   - 비닝(Binning)

   데이터 분석 전체를 대체한다기 보다는, SQL로 전처리 해서 데이터를 줄여 메모리 많이 먹는 Pandas를 가볍게 만드는 용도로 보면 될 듯 하네요.
"
"https://news.hada.io/topic?id=4225","iPad 카메라 멀티태스킹은 특정업체만 사용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      iPad 카메라 멀티태스킹은 특정업체만 사용 가능

   - Zoom 공식 클라이언트가 아이패드 Split View 멀티태스킹 할 때 카메라 이용이 가능한 이유
   ㅤ→ Entitlements를 통해서 애플에게 요청하여 특별한 권한을 취득하여야만 가능
   ㅤ→ 그러나, Camera Multitasking 권한은 공개된 적이 없고 관련 문서도 없음
   ㅤ→ 애플이 오직 Zoom에만 열어준 것
   - 기존에 Carplay, Hypervisor, Game Center, HomeKit 등도 다 Entitlements 를 통해서 가능
"
"https://news.hada.io/topic?id=4270","최신 JavaScript: 지난 10년간 놓친 모든 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     최신 JavaScript: 지난 10년간 놓친 모든 것

   최신 JS기능들을 한페이지에 설명과 예제로 정리(ECMAScript 2020)
   - Array
   - const/let
   - ??/?
   - Async/Await
   - Arrow function ()=>{}
   - for...of
   - for await...of
   - Classes
   - Get/Set
   - function default parameters
   - function named parameters
   - function rest ... parameter
   - Object.assign & spread operator
   - Destructuring
   - Method (shorthand function)
   - Promise.all
   - Template Literal
   - Proxy
   - Module import/export
"
"https://news.hada.io/topic?id=4243","한국의 프로덕트 헌트(Product Hunt) 디스콰이엇을 소개드려요~","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                한국의 프로덕트 헌트(Product Hunt) 디스콰이엇을 소개드려요~

   IT 서비스 메이커들이 자신이 만들고 있거나 발견한 프로덕트를 올리고 이에 대해 의견을 나누는 플랫폼이에요. 미국의 프로덕트 헌트(Product Hunt)를 벤치마킹 했어요.
   들어오셔서 프로덕트 공유하기를 통해 유용한 프로덕트를 사람들에게 소개도 해보고 다른 분들이 만드신 프로덕트도 구경해보세요 :)
   사용해보시다가 불편한 점이나 있었으면 좋겠는 기능이 있으면 피드백도 부탁드려요~!

   뉴스레터 구독 중입니다. 1주일 1번씩 1주일 동안 올라온 사이트 모두 이메일로 보내주시면 좋을 것 같습니다

   오 좋은 피드백 감사드려요~ 피드백 반영해서 다음주 부터 올라온 사이트 이메일로 보내드릴게요 :)
"
"https://news.hada.io/topic?id=4274","Serverless Next.js","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Serverless Next.js

   - Next.js 9.0 앱을 AWS Lambda@Edge 에 쉽게 배포 가능
   ㅤ→ CloudFront CDN 가장 끝단(Edge)에서 코드 실행
   - Edge에서 SSR실행 및 API Routing
   - 모든 Route 캐슁 및 자동 프리렌더링
   - 애셋들은 S3에서 CloudFront로 자동 서빙
   - Opt-in : static generation (SSG) / server-side rendering (SSR)
   - Base Path, Preview Mode, Catch all route & Optional Catch all route, Image-Optimization 등의 Next.js 기능 지원

   쓰려고 했다가 nextjs v10 지원이 안되서 못썼던 기억이...
"
"https://news.hada.io/topic?id=4179","노코드로 2주만에 IT 서비스 디스커버리 사이트 검증하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    노코드로 2주만에 IT 서비스 디스커버리 사이트 검증하기

   제품 개발, 사업 개발에서는 빠르게 가설을 세우고 검증을 하는 빠른 build-measrue-learn 싸이클이 중요. 노코드툴로 빠르게 가설을 검증할 수 있는 MVP를 만들어 런칭해보고 사용자 피드백을 받는 과정에 대한 글

   응원 감사해요~!

   한국판 ProductHunt 인 https://disquiet.io/ 개발기네요. 응원합니다.

   한달 뒤의 후기 글도 재미나게 봤습니다.
   한달 간의 실험 Disquiet - 무엇을 배웠고 넥스트 스텝은? https://www.disquiet.tech/post/disquiet-mission-and-vision

   감사합니다 :)
"
"https://news.hada.io/topic?id=4177","kubesql - SQL로 K8S API 호출하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      kubesql - SQL로 K8S API 호출하기

   - 간단한 SQL문장을 이용해서 쿠버네티스 API 서버에 질의하는 실험적 도구
   $ kubesql -q ""SELECT namespace FROM context WHERE pod.status.phase = 'Running'""
   - Rust로 작성된 오픈소스

   SQL이 정보 조회하는데 편하다 보니 이런 시도는 계속 나오는 듯.
   - CloudQuery - 클라우드 인프라를 SQL로 조회하기 https://news.hada.io/topic?id=3286
   - gitqlite - Git Repo에 SQL 쿼리 하기 https://news.hada.io/topic?id=2388
"
"https://news.hada.io/topic?id=4155","유튜브 댓글창에서 열린 포탈 개발자의 AMA","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        유튜브 댓글창에서 열린 포탈 개발자의 AMA

   밸브가 출시한 게임 포탈은 디지펜 공과대학 졸업작품인 나바큘라 드롭에서 시작됐는데, 나바큘라 드롭부터 참여해왔던 개발자가 유튜브 댓글에서 한국어로 질의응답을 했습니다.
   - 대학생때 한국 드라마를 봤던 기억때문에 한국문화에 관심이 생겼고 한국어를 배우고 있다.
   - 포탈은 3달동안 7명의 인원이 투입된 작은 프로젝트여서 스토리라고 할만한게 없었지만, 개발기간이 3년정도로 길어지면서 네러티브가 추가됐다.
   - 1편의 공포스러운 느낌과는 다른 것을 만들고 싶어서 2편은 유머스러운 분위기가 가미됐다.
   - 초보 게임개발자에게 추천하는 게임엔진은 Unity. 또는 Mod 제작.
   - 게임개발에 있어서 가장 어렵고도 중요한 부분은 목표를 너무 높게 세우지 않는 것.
   - 포탈은 1인칭 슈팅게임이지만 FPS 라는 생각은 안했음. 양방향 포탈이라는 아이디어를 먼저 떠올리고, 겨냥을 해야되니까 1인칭 시점을 선택.
   - 포탈 개발진들은 The Island 라는 영화와 Look Around You 라는 코메디 프로를 많이 봤음. 본인은 Portishead 와 Moby, Ratatat, Squarepusher 음악을 들으며 작업했음.
   - 포탈2 출시전 트레일러에 나온 진공청소기 오브젝트는, 실제로 써보니 재미없어서 빼버렸다.
   - 얼마전 출시된 portal reloaded 는 재밌어 보이지만 아직 해보지 못했다.
   - 현재 개발중인 게임이 있지만, 포탈3는 아니다.
   이하는 포탈 스토리와 관련된 답변들
   - 휘틀리는 조금씩 지구로 돌아오고 있다
   - 포탈건은 월석에서만 작동한다
   - 가장 인상깊은 장면은 포탈2의 달 장면.

   - 개발자 유튜브 채널 및 디지펜에서 했던 강연을 한국어로 녹음한 영상
   https://www.youtube.com/watch?v=ensEOg9n31k
"
"https://news.hada.io/topic?id=4224","Mantine - 오픈소스 React 컴포넌트&훅 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Mantine - 오픈소스 React 컴포넌트&훅 라이브러리

   - TypeScript로 개발된 50여개의 컴포넌트와 15개의 Hook
   - Create-React-App,Preact,Next.js,Gatsby 등과 잘 동작
   - 컬러,폰트,셰도우등 다양한 부분 커스터마이징 가능
   - 다크테마 및 접근성 지원
   - 풀 키보드 사용가능 (:focus-visible 로 키보드 사용시에만 포커스링 보임)
"
"https://news.hada.io/topic?id=4208","Pyston v2.2 오픈소스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Pyston v2.2 오픈소스 공개

   - 기본 파이썬보다 30% 빠른 구현체
   ㅤ→ v2는 20% 빨랐고, v2.2는 30%로 개선
   ㅤ→ CPython 3.88기반
   - 잘 안 사용하던 디버깅 기능을 대부분 삭제해서 2% 속도를 개선
   - 드롭박스에서 원래 개발했던 v1은 오픈소스였고 v2는 클로즈드 였는데, 이번에 오픈소스로 공개

   Pyston이나 Cinder나 잘 안될 것 같습니다. Pyjion이 잘 안되기도 했고 사람들이 성능을 진지하게 생각했다면 PyPy가 그렇게 영향력을 잃지는 않았을 것 같습니다.

   드롭박스가 만든 Pyston, 인스타그램이 만든 Cinder.
   둘다 CPython을 속도 개선하는 경쟁이 재미나네요.
   - Pyston v2 - 20% 빠른 파이썬 https://news.hada.io/topic?id=3110
   - Cinder - 성능 중점의 CPython 포크버전 https://news.hada.io/topic?id=4197
"
"https://news.hada.io/topic?id=4167","상세 비용을 공개해서 판매 증대 시키키","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         상세 비용을 공개해서 판매 증대 시키키

   - 급진적인 투명성이 뜨는 중
   - 하바드&USF의 공동 연구 : ""비즈니스의 상세 비용을 공개하면 판매에 도움이 될까?""
   ㅤ→ 초콜렛/지갑/가방등의 상세 비용을 공개하자 약 15~19%가 더 구매의사를 밝힘
   ㅤ→ 실제로 하버드 캠퍼스에선 치킨 수프의 비용 공개 후 판매가 21% 증가
   ㅤ→ 이윤이 14%에서 55%정도로 높을때 까지 테스트 됨
   왜 동작할까
   - 회사를 더 신뢰하게 되고, 구매 의사를 높임
   - 다만 이윤이 55%가 넘는 과도한 경우에는 부정적 반응이 나올 수 있음. 또한 의심스럽게 낮은 마진도 마찬가지
   - 브랜드 자체에 대한 신뢰도와의 연관성은 밝혀 내지 못함
   - 소비재에 대한 연구이며, B2B 제품/서비스는 테스트 하지 않았음. 다만 비슷하게 동작할 것이라고 생각
   하는 회사들 ?
   - Everlane 이 이걸 아주 잘 사용 하는 회사
   - 기술 쪽에선 GrowSurf 처럼 어느정도 투명하게 공개하는 회사들도 나오고 있음(실제 비용까지는 공개하지 않음)
   만약 시도해본다면
   - 제품의 총비용(고정비에 대한 예상치 까지 포함)을 분석
   - 비용 정보를 제품에 이해하기 쉬운 인포그래픽으로 제공 (가격표, 웹사이트..)
   - 개별 비용이 5-6개 이상 많다면 그룹화 해서 부담스럽지 않게 단순하게 표시할 것

   국내에 수년 전부터 칸투칸이라는 의류 브랜드가 비슷하게 공개를 하고 있어요. 기능성/여름 옷 위주로 자주 구매하는 브랜드입니다.
   https://kantukan.co.kr/shop/mall/…

   관련 기사 : https://www.hankyung.com/economy/article/2018041834161

   notion 같은 서비스도 aws 처럼 사용량 비례로 청구하면 어떨까 싶었는데, 재미있는 연구네요.

   제조원가까지 공개하는 '에버레인'의 과격한 투명경영 https://www.asiae.co.kr/article/2019060316390512617
   브랜드 가치가 아닌, 소비재 제품에서는 한번 시도해 볼만한 마케팅 전략이라고 생각이 됩니다.
   기술쪽에서도 나름 재미나게 활용할 수 있지 않을까 생각도 들구요.
"
"https://news.hada.io/topic?id=4176","Superplate - 프론트엔드 보일러플레이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Superplate - 프론트엔드 보일러플레이트

   - 최신 프레임워크들을 묶어서 빠르게 개발을 시작
   - 현재는 Next.js 기반이고, React/Vue/Svelte 등도 추가 예정
   - CLI 통해서 다양한 플러그인 선택해서 프로젝트 생성 가능
   ㅤ→ UI Frameworks : Tailwind CSS, React Bootstrap, Chakra UI, Ant Design
   ㅤ→ CSS Preprocessors : CSS / styled-jsx, SASS / SCSS..
   ㅤ→ Features : Fetch, Axios, Storybook, Reverse Proxy, Bundle Analyzer, Apollo GraphQL Client..
   ㅤ→ Hooks : SWR, React Query, react-use
   ㅤ→ State Management : Redux, Mobx, Recoil
   ㅤ→ i18n : next-translate, next-i18next
   ㅤ→ Linters / Formatters : ESLint, Prettier..
   ㅤ→ Testing Frameworks : Jest, React Testing Library, Enzyme
   ㅤ→ E2E Testing Frameworks : Cypress, WebdriverIO
   ㅤ→ CI Tools : GitHub Actions, Travis CI

   - SaaS Boilerplate - SaaS를 손쉽게 개발 시작하기 https://news.hada.io/topic?id=2848
   - 최신 도구로 새 TypeScript 프로젝트 시작하기 [2021] https://news.hada.io/topic?id=4158
"
"https://news.hada.io/topic?id=4168","페이스북, Rust 재단에 합류","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           페이스북, Rust 재단에 합류

   - AWS, 화웨이, 구글, 마소, 모질라의 창립 플래티넘 멤버 이후 첫 플래티넘 멤버로 조인
   - 페이스북은 2016년 부터 이미 Rust를 도입 후 개발에서 활용하고 있음
   - Rust에 대한 내부 개발자 지원을 강화하고, 회사내의 Rust 개발 성장을 담당하는 전담 Rust 팀을 신설
   ㅤ→ Rust 오픈소스 및 Rust 기반 프로젝트에 기여하고 Rust 커뮤니티에 참여
   페이스북의 Rust History
   - 2016~2017 : 소스 컨트롤에서 활용. Mercurial 의 커밋속도를 증대시키기 위한 Mononoke 프로젝트
   - 2017~2019 : Mononoke 의 성공으로 다른 프로젝트들도 Rust 도입
   - 2019~2020 : 소스 컨트롤 팀이 비공식적인 Rust 서포트팀으로 2배이상 커짐. 2019년엔 Rust 개발자가 100명이 넘었음.
   ㅤ→ 페이스북의 암호화폐 Diem(예전 Libra)의 주 개발 언어는 Rust (94%)
   ㅤ→ 블록체인용 Secure 프로그래밍 언어인 Move 도 Rust로 개발
   ㅤ→ 작은 Rust 개발자 경험팀을 만듬. 회사 전체의 Rust 개발자들을 연결하는 중심이 됨
   - 2021~ : 2020년 말에 프로그래밍 언어 조직내에 Rust 전담팀을 설립
   ㅤ→ 내부 개발자들을 위해 언어부터 툴체인 까지 지원
   ㅤ→ 페이스북 외부의 커뮤니티에 긍정적으로 기여
   ㅤ→ Rust 와 C++ 의 안정적인 호환을 제공 (페이스북에는 C++ 코드가 많음)
   ㅤ→ Rust 재단을 활동적으로 지원하고 참여

   - Rust Foundation 출범 (AWS, 화웨이, 구글, 마소, 모질라 창립멤버로 참여) https://news.hada.io/topic?id=3705
   - Rust의 미래를 위한 재단의 토대 마련 https://news.hada.io/topic?id=2675
"
"https://news.hada.io/topic?id=4185","애플 AirTag 분해기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             애플 AirTag 분해기

   - Tile Mate, 삼성 갤럭시 SmartTag 와 사이즈 비교
   ㅤ→ 열쇠 구멍을 없애버려서 사이즈는 가장 작음
   ㅤ→ 필수 기능(구멍)을 별도 프리미엄으로 만드는 애플다움(추가 악세사리 구매 필요)
   - X-Ray로 봤을때 스피커 자석과 스틸 배터리 덮개로 불투명하지만, 빈 공간이 없을 정도로 밀도 높음
   - AirTag 의 제품번호 A2187 (스타워즈 데스스타 안에 있던 Leia공주의 감방 번호 ?!)
   - UWB 기술 채용. (SmartTag+ 도 UWB 버전 나왔지만 아직 못 봄)
   - CR2032 배터리 사용. 손으로 열고 교체 가능하지만 조금 어려움
   - AirTag의 본체는 본질적으로 스피커 드라이버
   ㅤ→ 애플은 이 작은 디스크에서도 음질을 챙긴 듯
   - 위험하지만, 1/16” 드릴로 구멍을 뚫을수는 있었음 (방수 불가 되므로 조심..)

   아하, 열쇠구멍이 무언가 했더니 고리를 걸 수 있는 구멍이군요.
   에르메스 액세서리가 같이 나왔다는 점이 정말 놀랍긴 했어요. 배보다 배꼽이 더 큰...

   동전 X-Ray 사진에서 빵 터졌네요.
   - 애플, AirTag 공개 https://news.hada.io/topic?id=4108
   - iPhone 11에 새로 추가된 Apple U1 칩의 기능 https://news.hada.io/topic?id=513
"
"https://news.hada.io/topic?id=4245","페이스북 2021 게임 마케팅 인사이트 [한국어 24p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  페이스북 2021 게임 마케팅 인사이트 [한국어 24p PDF]

   ""게임 개발, 성장 및 수익화를 위한 인사이트""
   2 핵심 요약
   ㅤ→ 새롭고 다양한 게이머들이 등장한 2020년
   ㅤ→ 인구 통계학적 특성, 행동 그리고 선호도의 변화
   ㅤ→ 구매 행동의 변화
   3 신규 모바일 게이머의 유입
   4 신규 및 기존 모바일 게이머의 공통점
   5 기존 게이머들이 형성한 새로운 습관
   6 그룹 및 라이브 스트리밍으로 형성되는 게이밍 커뮤니티
   7 발견 및 구매 행동의 변화
   8 중요 포인트
   ㅤ→ 가까이에 있는 새로운 게이머와 소통하세요
   ㅤ→ 혼합 모델로 행동 변화에 부응하세요
   ㅤ→ 게임 밖에 있는 기회를 탐색하세요
   ㅤ→ 인지도, 인식, 특징을 통해 친밀도를 쌓으세요
"
"https://news.hada.io/topic?id=4153","크롬, 엣지, 파이어폭스 메모리 사용량을 극적으로 줄이기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    크롬, 엣지, 파이어폭스 메모리 사용량을 극적으로 줄이기

   브라우저 메모리 사용량이 극적으로 줄어 듭니다 !!
   왜 이쪽 개발자들은 메모리 고려안하고 코딩을 하는지 모르겠습니다.
   할수 있는데 안한 걸까요?

   탭이 많다면 차라리 https://chrome.google.com/webstore/detail/… 를 사용해보심이...

   서스펜더 류는 각 브라우저별로 잘 나와 있어서 저도 애용하고 있습니다. 확실히 메모리를 줄이는 데 도움이 됩니다. 탭을 굳이 닫고 싶지 않은데 그 욕구를 충족시키면서도 메모리는 줄어들어서 좋아요.

   미사용하는 탭의 낭비가 심하다, 그걸 줄여보자! ... 라는 컨셉은 요즘 Edge에 적용된 절전모드와 비슷하군요. 사실 저는 '탭을 띄웠으면 그정도 먹는 게 정상 아닌가...' 라고 생각해서.. 그냥 제 컴퓨터를 업그레이드합니다.

   Hacker News 처럼 대중에게 검증된 글이 노출되도록 GeekNews 측의 알고리즘 수정이 필요할 것 같습니다. 또 이런 글을 막기 위한 신고/downvote 기능이 필요해 보입니다

   downvote는 댓글에만 가능합니...다만 저도 나오지 않네요. 착각일수도 있는데, 예전에는 나왔던 것 같습니다만 이상하네요.

   Flag, Downvote는 특정 Karma 이상이 되면 활성화 된다고 합니다.
   Flag는 100 언저리 쯤인 것 같고, Downvote는 저도 활성화가 안되서 기준을 모르겠내요.

   Downvote 는 활성화 된 경우, 댓글의 아이디옆에 시간을 눌러서 상세보기로 들어가면 그 안에서 가능합니다.

   실제로 사용하는 입장에서 보이는 것 만큼 쓸모있지는 못합니다. 사용하다 보면 탭을 옮길 때마다 탭을 다시 로드하게 돼요...

   싸움으로 번질 수 있으니 조심스럽지만,
   본문에 적어주신 메모리 최적화 도구가 메모리를 효과적으로 최적화해주는 도구가 아니라,
   그냥 수치상으로만 그렇게 보이도록 만들어줄 가능성이 더 높습니다.
   (가장 먼저 트위터에 남겨주신 분의 코멘트 링크를 달아둡니다: https://twitter.com/techsharer/status/1387307385639759873)
   그와 별개로 브라우저 개발팀은 지속해서 메모리 최적화를 위한
   여러가지 활동을 진행하고 있습니다.
   다만 메모리가 많이 쓰이는건 그만큼 고성능 웹 애플리케이션이
   브라우저에서 아무렇지 않게 동작하고 있다는 것이라 생각됩니다.
   브라우저의 메모리 최적화에 대해서는 V8 블로그에도 많고,
   Chromium 블로그에도 올라옵니다.
   https://blog.chromium.org/2021/03/…
   https://v8.dev/blog/high-performance-cpp-gc
   https://v8.dev/blog/v8-lite
   그러니 본문에서 말씀 주신 '메모리 고려안하고 코딩한다' 는 거짓이라 생각됩니다.
   그리고 브라우저 개발자들이 들으면 많이 서운할 거 같기도 하고요.
   (크롬팀, 삼성 인터넷 등에 한국인 분도 꽤 많이 계십니다)

   트윗이 되었군요 ^^;;
   특정 직군을 비하할 의도는 없었습니다. 혹시 그렇게 느끼셨다면 죄송합니다.
   개발시 하도 답답해서 글을 썼습니다.
   제 개발 PC 환경을 잠시보면 메모리가 8GB정도 되는데.
   요즘(?)들어 여러 환경을 고려해서 개발하다보니 8GB는 택도 없이 부족해서
   그 원인들을 찾다 보니
   기본적으로 개발툴들이 한번 실행 시키면 1G이상 넘어가는 것들이 많습니다.
   Backend 쪽 SpringToolSuite(Eclipse)가 보통 1~2G가정도 됩니다.
   Front 쪽 Visual Studio Code 실행하고 node.js 내부 서버 띄우면 500 ~ 1G정도 됩니다.
   Backend & Front 동시에 디버깅할때 Chrome 개발툴 띄워놓으면 이것도 1G 이상됩니다.
   그리고 Electon 기반 프로그램들(MS Teams, OneNote) 띄우면 500~ 1G 훌쩍넘어 갑니다.
   개발 PC라 DB Server, Redis Server, 그외 기타 서비스들 실행 되는거 보면
   기본 4G 정도는 실행되고 있는 상황이라...
   해당 링크에 있는 프로그램 설치하고 메모리 최적화해서 사용해본 결과
   시스템 느려지는 현상 없이 잘 개발을 하고 있는 상황입니다.
   수치상으로 메모리를 없애주는 것으로 보일수 있으시다고 말씀해주셨는데.
   해당 말씀이 일리가 있을수 있다고 생각됩니다.

   개발피씨가 8기가 인게 문제 아닐까요? 8기가면 clang도 컴파일하기 버거울텐데요

   특정 직군 비하는 좀 아닌거 같네요
"
"https://news.hada.io/topic?id=4158","최신 도구로 새 TypeScript 프로젝트 시작하기 [2021]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  최신 도구로 새 TypeScript 프로젝트 시작하기 [2021]

   - 기본 프로젝트 설정
   - Jest 로 테스트
   - esbuild & 번들링
   - eslint 로 린팅
   - npm 에 패키지 퍼블리싱 하기
   - CI : GitHub Actions & GitLab CI
   - TypeDoc 으로 API 문서화
   * 전체를 Boilerplate 로 제공 https://github.com/metachris/typescript-boilerplate
"
"https://news.hada.io/topic?id=4156","GitHub Pages, 구글 FLoC 차단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GitHub Pages, 구글 FLoC 차단

   - github.io도메인을 사용하는 모든 GitHub Pages 사이트에 FLoC 차단 헤더를 추가
   ㅤ→ Permissions-Policy: interest-cohort=()
   - 커스텀 도메인을 사용하는 사이트는 제외

   - FLoC, 관심기반 광고를 위한 써드파티 쿠키 대체제 https://news.hada.io/topic?id=3639
   - 구글 FLoC에서 내 웹사이트 제외 시키기 https://news.hada.io/topic?id=4085
   - Am I FloCed ? https://news.hada.io/topic?id=4079
"
"https://news.hada.io/topic?id=4253","Folio - 커스터마이징 가능한 테스트 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Folio - 커스터마이징 가능한 테스트 프레임워크

   - 자신만의 테스트 프레임워크를 만들수 있게 해주는 MS의 오픈소스
   - Playwright Test Runner를 만드는 기반
   - Test Isolation 과 Flexibility 에 집중
   ㅤ→ Isolation : 모든 테스트는 독립/병렬로 실행. 오류 부분만 재테스트 가능. 쉬운 리팩토링. 그룹화
   ㅤ→ Flexibility : 다양한 고급기능. TypeScript 기능 활용. 여러 구성에서 테스트 실행. 설정에 따른 테스트 어노테이션
   - 전통적인 BDD 스타일을 따름
   ㅤ→ 각 테스트는 완전히 독립된 Test Arguments 객체를 받음
   - 기본적으로 여러개의 워크 프로세스를 사용해서 병렬로 테스트 진행
   ㅤ→ 각 워커들은 새로운 환경을 생성. 가능하면 재사용 하지만, 테스트를 재시도하거나 에러시에는 새 워커를 생성
   ㅤ→ 테스트를 Suite 단위로 샤딩해서 여러대의 기기에서 실행 가능
"
"https://news.hada.io/topic?id=4237","Bing, Content Submission API 베타 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Bing, Content Submission API 베타 공개

   - 크롤링 봇을 기다리지 않고 직접 등록
   - 기존의 URL Submission API와 별도로 콘텐츠 변경을 직접 등록
   - 현재는 웹마스터들이 사용신청을 통해서 API 키 발급 가능
   - XML 요청으로 변경 콘텐츠 내용을 Base64 인코드해서 보내는 방식

   워드프레스를 운영중이신 분들은 손쉽게 아래 플러그인을 설치하신 후 빙 웹마스터 툴에서 API키를 받아서 바로 사용해 보실 수 있습니다.
   https://wordpress.org/plugins/bing-webmaster-tools/
   글을 업데이트 하면(새로 글을 쓰든 내용을 변경하든) 바로 바로 적용되는 것은 좋은데 하루 10건으로 한정되는 것은 좀 적지 않나 싶습니다.

   Bing 이 검색엔진에서 점유율 2위이긴 하지만, 전체기준 에선 2.71% 밖에 되지는 않습니다.
   그러나 그건 모바일을 포함했을때의 얘기고, 데스크탑에선 6.78% 정도 됩니다.
   데스크탑 점유율은 나름 잘 성장하고 있어요. 적어도 영어 콘텐츠가 있는 스타트업이라면 신경써주시는게 좋을듯 합니다.
   - Microsoft Bing Usage and Revenue Stats - 2021.03 https://backlinko.com/bing-users
"
"https://news.hada.io/topic?id=4235","Software Engineering at Google [602p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Software Engineering at Google [602p PDF]

   - O'Reilly에서 출간된 책을 무료 이북으로 공개
   - 구글의 유니크한 엔지니어링 문화, 프로세스, 도구를 통해서 어떻게 효율적인 엔지니어링 조직을 만드는지를 보여주는 책
   * 소프트웨어 조직이 코드를 설계,아키텍팅,작성,유지보수할 때 염두에 두어야 하는 세가지 기본원칙
   1. ""시간(Time)""이 소프트웨어의 지속 가능성에 미치는 영향과 탄력적으로 만드는 방법
   2. ""규모(Scale)""가 엔지니어링 조직내의 소프트웨어 프랙티스 실행가능성에 미치는 영향
   3. 설계 평가나 개발 결정시 엔지니어가 만들어야 하는 ""절충안(Trade-off)""

   한글 요약 : http://docs.likejazz.com/software-engineering-at-google/

   목차가 훌륭하네요 ;)
   1. What is Software Engineering ?
   2. How to Work Well on Teams
   3. Knowledge Sharing
   4. Engineering for Equity
   5. How to Lead a Team
   6. Leading at Scale
   7. Measuring Engineering Productivity
   8. Style Guides and Rules
   9. Code Review
   10. Documentation
   11. Testing Overview
   12. Unit Testing
   13. Test Doubles
   14. Larger Testing
   15. Deprecation
   16. Version Control and Branch Management
   17. Code Search
   18. Build Systems and Build Philosophy
   19. Critique: Google’s Code Review Tool
   20. Static Analysis
   21. Dependency Management
   22. Large-Scale Changes
   23. Continuous Integration
   24. Continuous Delivery
   25. Compute as a Service
"
"https://news.hada.io/topic?id=4220","AWS SDK for Rust 알파버전 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        AWS SDK for Rust 알파버전 공개

   - Rust 언어로 AWS 서비스를 직접 사용 지원
   - Smithy 모델 기반으로 개발해서 차후에 GA 될때는
   ㅤ→ 새로운 AWS 서비스를 Day 1 부터 사용 가능
   ㅤ→ AWS 표준 Retry 로직등 추가 예정
   - 로드맵 공개
   ㅤ→ 현재 7개 서비스만 사용 가능 : API Gateway, DynamoDB, Kinesis, KMS, Polly, Secrets Manager, Access Analyzer
   ㅤ→ S3 개발중
   ㅤ→ EC2, Routh 53, ECS, Auto Scaling 등등 조사중

   AWS Smithy - 서비스 및 SDK 정의용 언어 https://news.hada.io/topic?id=4218
"
"https://news.hada.io/topic?id=4262","dnd kit - React용 Drag & Drop 툴킷 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    dnd kit - React용 Drag & Drop 툴킷

   - React Hook을 이용해서 몇줄로 훌륭한 드래그앤드랍 인터페이스 구축하는 툴킷
   - 마우스,터치,키보드,커스텀센서 등 멀티 인풋 지원
   - 충돌 감지 알고리즘 커스텀 가능, 자동 스크롤, 드래그 핸들 등 다양한 기본 기능
   - 애니메이션/트랜지션/제한/스타일등 모두 커스터마이즈 및 확장
   - 접근성 : 키보드 지원, ARIA 속성, 스크린 리더용 문구 커스터마이징
"
"https://news.hada.io/topic?id=4218","AWS Smithy - 서비스 및 SDK 정의용 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     AWS Smithy - 서비스 및 SDK 정의용 언어

   - IDL(Interface Definition Language) 기반
   - AWS SDK를 만들기 위해 사용했던 것을 오픈소스로 공개
   ㅤ→ 누구나 자신들의 SDK를 정의하고 만드는데 사용가능
   ㅤ→ Smithy 모델에서 다양한 언어용 서버/클라이언트 코드를 생성할수 있도록 설계
   ㅤ→ API 문서, 테스트 자동화, 예제코드 등도 자동 생성
   - Traits 기반으로 확장 가능
   - 프로토콜에 구애 받지 않음
   ㅤ→ 웹서비스의 전송 계층을 데이터 구조 및 기능에서 분리하여 독립적으로 발전 가능
   ㅤ→ Smithy 모델을 OpenAPI로 변환도 가능
"
"https://news.hada.io/topic?id=4234","Excalidraw - 오픈소스 가상 칠판 협업도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Excalidraw - 오픈소스 가상 칠판 협업도구

   - 손으로 그린 듯한 다이어그램을 그려주는 Virtual Whiteboard
   - Rough.js + TypeScript + React + Virgil(폰트)
   - 사각/마름모/원/화살표/직선/커브
   - 공개 라이브러리에서 다양한 컴포넌트들 가져와서 사용
   - Excel/CSV 데이터로 차트 생성 지원
   - React 컴포넌트로 자신의 앱에 임베드 가능

   rough.js가 더 눈에 띄었는데, 이미 한번 다루었군요.
   https://news.hada.io/topic?id=1381

   오 신기하네요

   오픈소스로 공개한지는 1년 정도 되었습니다.
   - One Year of Excalidraw https://blog.excalidraw.com/one-year-of-excalidraw/
   공개 Library에 다른 사람들이 그린 다양한 컴포넌트 들이 있어서 바로 가져다 사용 가능합니다.
   - https://libraries.excalidraw.com/
   이번에 유료인 Excalidraw+ 버전을 공개했습니다. 워크스페이스 에서 그린 것들을 관리, 실시간 협업기능을 강화
   - https://blog.excalidraw.com/introducing-excalidraw-plus/

   아직 한글(한자도...)은 필기체로 안나와서 슬프네요. ㅠ.ㅠ

   오픈소스니까 Virgil 대신 나눔손글씨 같은거 적용하면 되지 않을까요.. ㅎㅎ
"
"https://news.hada.io/topic?id=4241","Rust 2021 Edition 계획","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Rust 2021 Edition 계획

   - Rust는 언어가 빠르게 발전하면서도 안정성을 유지할수 있도록 Edition 방식을 채택
   ㅤ→ 하위호환이 안되는 기능들을 Opt-in 방식으로 에디션에 추가
   ㅤ→ 2018 에디션에 추가된 async는 아직 최신 버전에서도 정식 키워드가 아님
   ㅤ→ 특정 에디션에서 만들어진 Crate는 다른 에디션과 호환해야함
   ㅤ→ 에디션 이관은 쉽고 대부분 자동화
   - 2021 에디션에 추가될 기능들
   ㅤ→ Prelude(무조건 임포트되는 표준 라이브러리)에 추가 : TryInfo, TryFrom, FromIterator
   ㅤ→ 새 Cargo Feature Resolver (버전 2)가 기본 값
   ㅤ→ Array 용 IntoIterator
   ㅤ→ Closure 가 실제 사용하는 필드만 캡쳐
   ㅤ→ 더 일관적인 panic!() 매크로
   ㅤ→ 미래에 추가될 문법을 위해서 접두사 붇은 식별자와 리터럴에 대한 구문을 예약
   ㅤ→ bare-trait-objects, ellipsis-inclusive-range-patterns 경고를 에러로
   ㅤ→ 매크로에서 OR (|) 사용
"
"https://news.hada.io/topic?id=4246","FragAttakcs - Wi-Fi 기기의 새로운 보안 취약점들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FragAttakcs - Wi-Fi 기기의 새로운 보안 취약점들

   - 공격자가 사용자 정보를 훔치거나 장치를 공격가능
   ㅤ→ 발견된 취약점중 3가지는 Wi-Fi 표준 자체의 설계결함
   ㅤ→ 다른 것들은 Wi-Fi 제품들의 광범위한 프로그래밍 실수에 의한 것
   ㅤ→ 실험에 의하면 모든 Wi-Fi 제품들의 하나 이상의 취약성에 영향을 받고, 대부분 여러개 영향을 받음
   - WPA3 및 모든 최신 보안 프로토콜에도 영향을 주고, WEP 같은 Wi-Fi 본래의 보안프로토콜 자체도 영향을 받음
   ㅤ→ 즉, 여러개의 설계 결함이 1997 출시이후부터 있었음
   ㅤ→ 다행하게도 어뷰징 하기는 어려운 설계 결함들 - 일반적이지 않은 네트웍 설정을 사용하거나, 사용자 상호작용이 필요
   - 결과적으로 가장 큰 문제는 Wi-Fi 제품들의 프로그래밍 실수들
   - 사용자 보호를 위해 9개월 동안 조정기간을 거쳐 Wi-Fi Alliance 및 ICASI 감독하에 보안 업데이트가 준비되었음
   ㅤ→ 업데이트 안된 기기가 있다면 일부는 우회가능
   - 데모 동영상에서
   ㅤ→ 사용자 ID & 암호 훔치기
   ㅤ→ 홈네트워크 IoT 기기에 접근(스마트 파워 소켓 켜고 끄기)
   ㅤ→ 취약점을 통해 다른 공격을 시도하기 위한 시작점이 되는 것 (Windows 7 시스템 장악)
   취약점들
   - Plaintext injection vulnerabilities
   ㅤ→ 보호된 Wi-Fi 네트워크에서 암호화 되지 않는 프레임을 삽입가능
   ㅤ→ 일부 장비들은 마치 핸드셰이크 메시지 처럼 보이는 일반 텍스트 프레임을 허용하기도 함
   - Design flaw: aggregation attack
   ㅤ→ Wi-Fi 가 작은 프레임을 큰 Aggregated 프레임 으로 만들 때, 이 집합 플래그는 인증되지 않아서 공격자가 수정이 가능
   - Design flaw: mixed key attack
   ㅤ→ 큰 프레임을 작은 프레임 조각으로 분할해서 연결의 안정성을 높이는데, 각 조각들은 동일한 키를 사용하여 암호화 되지만 수신자가 이를 확인할 필요가 없어서 서로 다른 키를 이용해서 재조립.
   ㅤ→ 드물게 데이터를 유출하는데 악용 가능
   - Design flaw: fragment cache attack
   ㅤ→ 프레임 조각화 기능에서, 클라이언트 연결이 끊어질때 Wi-Fi기기가 이 재조립되지 않은 조각들을 메모리에서 제거할 필요가 없음
   ㅤ→ 이 경우 AP에 악성 조각을 삽입해서, 다른 조각들과 결합되면서 유출이 가능
   * ICASI : Industry Consortium for Advancement of Security on the Internet)

   리눅스는 패치 완료
   - https://lore.kernel.org/linux-wireless/…

   이에 대한 업계의 반응 기사
   https://commscope.com/blog/2021/…
   - Wi-Fi Alliance 가 공개한 FragAttacks는 MITM(Man-In-The-Middle) 방식의 취약점임
   - 중요한건 현재 이 취약점들이 악의적으로 사용된 증거들은 없고, 업데이트된 펌웨어를 통해서 문제는 완화 가능
   - 기존의 많은 취약점들 처럼 FragAttacks도 업계에서 취약점을 제거하는 업데이트를 준비하고 출시할수 있도록 학문적으로 잘 연구되고 책임감 있게 보고 되었음
   - 이 취약점들을 이용하려면 공격자가 Wi-Fi 네트워크에 물지적으로 있어야 해서, 실제 공격가능성은 크게 줄어듬
   즉 글에 나와있는 예전 취약점인 KRACK https://www.krackattacks.com 처럼, 취약점이긴 하지만
   실제로 이걸 이용해서 공격하기는 어렵다는 거긴 합니다. 그래도 Wi-Fi 에 기본 보안은 신경써야 하는게 맞는거 같아요.
   외부에서 업무적으로 Wi-Fi 사용한다면 가능하면 TailScale 같은 거를 쓰시길 권장합니다.
   - TailScale - 설정 필요없는 VPN 솔루션 https://news.hada.io/topic?id=4015
"
"https://news.hada.io/topic?id=4228","10+PB 데이터를 저장하는 스타트업이라면 어떤 저장소 옵션이 좋을까 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                10+PB 데이터를 저장하는 스타트업이라면 어떤 저장소 옵션이 좋을까 ?

   HN에 올라온 질문과 다양한 대답들. 현재는 S3에 저장중이고 점차 커진다고
   - HW비용면에서는 자체 호스팅이 당연히 저렴 : HP Apollo 나 RackMountPro 등
   ㅤ→ 하지만 숨겨진 비용들이 있음 : 스토리지 엔지니어 고용, 장비 외의 장소 비용, 재해복구, 하드웨어 교체, CAPEX/OPEX 등등
   ㅤ→ 파일시스템 구성 및 관리도 문제 : Ceph, MinIO, ZFS
   - Backblaze B2 / Wasabi / Scaleway 등 다른 전용 클라우드 저장소 서비스
   - Cloudian / Scality / NetApp Storagegrid 등의 On-Prem S3 들
   - AWS Direct Connect
   - 그 정도 규모면 AWS/Azure/GCP 와 협의해서 가격을 다운
   - 대규모 데이터 저장하는 사람들이 모이는 서브레딧 https://www.reddit.com/r/DataHoarder/

   스타트업이 10+PB라니 가늠이 안되네요. 이런게 일상적인가보죠?

   저 친구들은 KeepSafe 라는 개인용 유료 사진/비디오 저장 서비스 업체인데요.
   암호화 기술로 안전하게 저장해준다고 해서 나름 유명한 업체이긴 합니다.

   - MinIO - 고성능 K8S 기반 객체 저장소 오픈소스 https://news.hada.io/topic?id=4211
   - Backblaze B2, S3 호환 API 공개 https://news.hada.io/topic?id=2020
"
"https://news.hada.io/topic?id=4151","Mighty - 크롬 브라우저를 빠르게","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Mighty - 크롬 브라우저를 빠르게

   - 크롬을 클라우드에서 원격 실행하고 로컬에서 스트리밍 받는 브라우저
   ㅤ→ 4K, 60fps 지원
   ㅤ→ 다수의 탭을 열어도 느려지는 것 없이 사용 가능
   ㅤ→ 로컬에선 500MB 정도의 램으로, 크롬 대비 1/10 정도 램 사용량 및 저전력
   ㅤ→ 서버는 16 vCPU 제온 + 16GB 램 + NVidia GPU
   ㅤ→ 광고,쿠키배너 자동 제거
   - 처음엔 MS윈도우 스트리밍 서비스를 만들다가 브라우저에만 집중
   - 월 $30, Waitlist 등록하면 주단위로 온보딩 중

   근래에 어쩌다 보니 클라우드상의 VM 인스턴스에 개발 도구를 설치하고 RDP로 연결하여 사용해야 하는 상황에 놓이게 되었는데, VM 스펙이 괜찮아서 그런지는 몰라도 생각보다 원격 접속으로도 데스크톱 작업이 꽤 쾌적하더라고요. 위와 같은 서비스는 그것의 연장선상 정도가 아닐까 싶기도 합니다.

   Figma, Slack, Notion 등 요즘 앱이 죄다 웹 기반(+ Electron)으로 나오다보니 이런 서비스도 다 나오네요. M1 맥에서는 어차피 팬 노이즈 없이 빠르게 돌릴 수 있긴 한데 (...) 인텔 맥이라면 고려해볼만 할 것 같습니다.

   Electron Power! 로 모바일에서도 생산성이 짱 좋아졌습니다. 몇년 전에는 컴퓨터에 프로그램 없으면 정말 아무것도 안 됐었던 것 같은데. 이젠 아무것도 안 깔아도 Edge로 웹앱들 열어서 일정 수준의 생산성까지는 나오더라고요.

   Cross-Platform의 저편에는 Web-Platform이 있던 것인가... 정말 Write once, Use forever의 꿈이 이뤄지는걸까요?

   서버 스펙만 보면 그렇게 까지 성능향상으로 느껴지지는 않는데 스트리밍을 거치는데도 빠르다니 신기하네요

   아마존 실크나 퍼핀이랑 비슷한 컨셉 같아요
   다만 성능에 초점을 맞춘듯한?

   가격대가 꽤 비싼것 처럼 느껴지는데, Figma 가 엄청 빠르게 실행된다고는 하니 뭔가 오묘한 느낌이긴 하네요.
   개인이 저정도 성능의 클라우드인스턴스를 받아서 쓰는거 보다는 더 편하고 빠를거 같기도 하구요.
"
"https://news.hada.io/topic?id=4161","실제 웹사이트에서 Web Vitals 디버깅하기 [번역]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    실제 웹사이트에서 Web Vitals 디버깅하기 [번역]

   - 속성(attribution)과 디버깅을 위한 API
   ㅤ→ CLS
   ㅤ→ 레이아웃 이동 속성 가져오기
   ㅤ→ LCP
   ㅤ→ LCP 후보 요소 찾기
   ㅤ→ FID
   ㅤ→ FID 대상 요소 찾아내기
   - web-vitals JavaScript 라이브러리의 사용방법
   - 데이터를 보고하고 시각화하기
   - Web Vitals 보고 도구

   구글에서 실제 검색 결과에 반영하는 것은 6월 중순이라고 변경하여 공지 하였습니다.
   https://developers.google.com/search/blog/…

   구글, 검색결과 순위에 페이지 경험(Page Experience) 지표 도입 https://news.hada.io/topic?id=2197
   - Core Web Vitals
   ㅤ→ LCP : Largest Contentful Paint
   ㅤ→ FID : First Input Delay
   ㅤ→ CLS : Cumulative Layout Shift
   구글 시트로 Core Web Vitals 매일 자동 측정하기 https://news.hada.io/topic?id=2726
"
"https://news.hada.io/topic?id=4149","Swimlanes - 온라인 시퀀스 다이어그램 에디터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Swimlanes - 온라인 시퀀스 다이어그램 에디터

   - 텍스트로 편집하면 다이어그램에 즉시 적용
   - URL 복사해서 공유 가능(다이어그램 편집시마다 새로운 URL이 생성)
   - Google/GitHub 로그인 해서 다이어그램 저장 가능
   - 문법
   ㅤ→ 메시지 : 화살표, 오픈화살표, X, 양방향, To Self, 대쉬/볼드 라인, 메시지 설명에 마크다운 포매팅 가능
   ㅤ→ 노트 : 마크다운 포매팅(볼드/이탤릭/인라인 코드/OL/UL), 사이즈 적용 가능
   ㅤ→ 섹션 : if/else, group 지원
   ㅤ→ 디바이더 : thin/regular/dashed/bold
   ㅤ→ Font-Awesome 아이콘 지원
   ㅤ→ Delay 표시가능
   ㅤ→ Order 로 Actor 순서 변경

   Plantuml 기반 웹서비스들이 많이 있는데 비교해 보면 좋을 것 같네요.
   Plantuml은 markdown 하고도 잘 붙어서 즐겨사용하고 있습니다.
   http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000

   - 문자열로 플로우차트 생성하기 https://news.hada.io/topic?id=3816
   - Mermaid - 텍스트로 다이어그램과 플로우차트를 그리는 JS라이브러리 https://news.hada.io/topic?id=792
"
"https://news.hada.io/topic?id=4258","코더코더

   - '코더'라는 단어에 담긴 편견과 그것을 다루는 언론 기사들의 문제점
   - 프로그래머는 설계만 하는 건축가가 아니라 직접 무대에 올라서 노래를 부르는 연예인에 가까움
   - 고급 개발자의 조건은 뛰어난 코딩 실력뿐만 아니라 겸손함과 좋은 커뮤니케이션 능력을 가지고 있는 사람

   적절하네요.ㅎ

   겸손은 모든 업종의 고급인력이 갖춰야할 필수 소양 같아요. 코딩도 언어를 이용한 작업이라 문학과 같다는 생각이 드네요. ㅎㅎ

   어떤 사람은 프로그래머의 일을 요리사에 빗대기도 하더군요.
   https://twitter.com/_Akamig/status/1392180067606745088

   비유가 좋네요 ㅎㅎ

   잘 맞는 비유인 것 같아요. 👍
"
"https://news.hada.io/topic?id=4247","Permafrost - C & OpenGL 기반 RTS 게임 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Permafrost - C & OpenGL 기반 RTS 게임 엔진

   - 1인 개발자가 혼자 만든 실시간 전략 시뮬레이션 게임 엔진 오픈소스
   - OpenGL 3.3 과 C 언어 사용
   - 타일 기반 맵렌더링, 맵/씬 에디터
   - RTS/FPS 카메라
   - 물 렌더링(반사,굴절,소프트 엣지등)
   - Nuklear 기반 UI 프레임워크
   - 엔진 내부는 Python 2.7 로 스크립팅 가능
   - 대형맵 빠른 렌더링
   - 여러 종류/크기 유닛들의 경로찾기(Navigation Layer 이용)
   - 충돌 회피
   - RTS 용 기능들 : 미니맵, 유닛 선택, 유닛 전투, Fog-of-War, 기지 구축 메커닉, 자원 채집 및 이동 메커니즘
   - 발사체의 물리 시뮬레이션을 이용한 원거리 전투
   - 다양한 해상도 및 화면 비율 지원
   - 전체 파이썬 인터프리터 상태의 Serialization/deserialization 지원
   - 크로스 플랫폼 : 리눅스/윈도우
   * 엔진을 이용한 데모게임 Evergloly는 스팀에서 다운로드 가능 또는 Itch.io 에서 구입가능
   * 엔진 구현 및 게임 개발 기록은 YouTube 로 공개

   씬그래프 엔진 자체는 혼자서 만들만한 규모의 프로젝트입니다. 저도 병특 때 간단한 씬그래프 엔진을 만든 경험이 있는데요. 그런데 갈수록 시장성은 없어지는 것 같아요. 어떤 의미에서는 이런 프로젝트가 진짜 토이 프로젝트가 되어 가는 것 같네요...

   게임쪽 보면 이렇게 1인이 거대한 걸 완성해내는 사람들이 참 많은듯
   아래 rg3d도 1인 개발자가 만든 엔진입니다.
   - rg3d - Rust로 만든 오픈소스 3D 게임 엔진 https://news.hada.io/topic?id=2874
"
"https://news.hada.io/topic?id=4210","Firefox Send의 오픈소스 포크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Firefox Send의 오픈소스 포크

   - 파일을 누구에게나 보내줄 수 있는 공유 서비스
   - 모질라가 개발 중단한 파일 보내기 도구 Send를 포크해서 지속 개발
   ㅤ→ 최종 호스트 버전(send-v3)을 포크하고, 그 이후 변경점은 선택머지
   ㅤ→ 모질라&FF 브랜딩 제거로 셀프 호스트 가능
   - CLI인 ffsend와 호환 유지

   * ffsend - 쉘에서 다른사람에게 파일 공유 하기 https://news.hada.io/topic?id=1163
   이 Send 를 퍼블릭하게 호스트한 인스턴스들이 꽤 여러개 있습니다. 간단하게는 이런거 쓰셔도 됩니다.
   - https://github.com/timvisee/send-instances/
   국내 개발자 분이 만드신 비슷한 파일 공유 서비스 ""파일키위""
   - 종단암호화 지원하는 무제한 용량 실시간 파일전송 서비스 https://news.hada.io/topic?id=1695
"
"https://news.hada.io/topic?id=4152","초보자를 위한 리눅스 서버 보안용 오픈소스들과 팁","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      초보자를 위한 리눅스 서버 보안용 오픈소스들과 팁

   1. apt-get 업데이트
   2. UFW 방화벽
   3. libpam-cracklib 암호 정책 강화
   4. 필요없는 서비스 비활성화
   5. netstat 포트점검 / fail2ban
   6. ClamAV 멀웨어 스캔 / cron & systemd 타이머로 자동화

   - SaaS CTO 보안 체크리스트 [27p PDF] https://news.hada.io/topic?id=2509
   - OWASP Cheat Sheet - 웹어플리케이션 보안 치트시트 https://news.hada.io/topic?id=115
   - Terrascan - 인프라 보안 검사 도구 오픈소스 https://news.hada.io/topic?id=3806
   - GitHub 프로젝트에 보안 적용하기 (체크리스트) https://news.hada.io/topic?id=3602
   - 프론트엔드 개발자를 위한 보안 팁 https://news.hada.io/topic?id=2082
"
"https://news.hada.io/topic?id=4257","AWS SaaS Boost 오픈소스 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         AWS SaaS Boost 오픈소스 공개

   - SaaS 솔루션을 쉽게 만들수 있게 도와주는 도구
   - 개발자가 코어 기능에 집중할 수 있도록 다른 기능들을 기본 제공
   ㅤ→ 하나의 서비스를 여러 사용자(Tenant)에게 제공하고 사용량/구독모델에 따라 비용을 받을수 있게 해줌
   ㅤ→ 코어 기능은 도커이미지로 만들어서 등록(ECR)
   ㅤ→ 기본 제공 : Onboarding, Metrics, User, Settings, Tenant, Quota 등
   ㅤ→ React Admin 제공 : Lambda + Cognito + S3
   - 동작
   ㅤ→ Onboarding Tenant : SaaS 에 새로 가입하면 Onboarding & Setting 마이크로서비스 실행 (CloudFormation을 이용한 자동화)
   ㅤ→ Tenant 환경 : 각각의 VPC 구성하고 Route 53으로 라우팅, 각 Tenant는 ECS 클러스터에 배포
   ㅤ→ Stripe API 키 추가해서 SaaS 빌링 구성
   ㅤ→ QuickSight 로 운영 통계 제공
   * re:invent 2020 에서 프리뷰 공개

   감사합니다! 테스트로 한번 써봐야겠군요!
"
"https://news.hada.io/topic?id=4254","Skribbl - 손으로 그린 무료 일러스트 모음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Skribbl - 손으로 그린 무료 일러스트 모음

   - 저작자 표시 없이 개인/상용 어디든 사용 가능한 일러스트들
   - PNG들은 무료로 다운로드 가능
   - 작가별 SVG 묶음은 개당 $1+ 이상 내면 구입 가능
   ㅤ→ 작가들은 가입해서 자신의 작품 판매 및 프로필을 통해 커미션 수주, 아트 클래스 진행 가능
"
"https://news.hada.io/topic?id=4182","공유 라이브러리는 일반적으로 좋지 않아요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         공유 라이브러리는 일반적으로 좋지 않아요

   - Fedora에서 clang/llvm이 느린 이유는, 정책적으로 다른 패키지와 동적 링킹하는 것 때문
   ㅤ→ 이에 대한 Linus Torvalds 의 코멘트
   ""페도라가 그거 안했으면 좋겠어요. 공유 라이브러리는 일반적으로 좋지 않아요.
   이 경우엔(clang) 많은 오버헤드가 발생하고, 필요없는 의존성과 복잡성이 생깁니다.
   대부분의 공유 라이브러리는 실제로 버전세이프 하지도 않아서, 전혀 이점이 없어요""
   ""디스크 사용량을 절약할 수 있겠지만, 디스크는 싸고, 메모리 절약도 실제로는 네거티브 합니다.
   사람들이 '공유 라이브러리는 본질적으로 좋다' 라고 얘기하지만 정말 그렇지 않습니다. 많은 문제를 만들어내고, 그 장점은 이 큰 단점들과 비교해야 합니다.
   공유 라이브러리가 실제로 유용한 곳은 진정으로 표준화된 기본 배포판의 시스템 라이브러리들 뿐입니다. ""

   예전에 윈도 프로그래밍할 때 dll 로 만드냐 exe 안에 static 라이브러리로 박아넣느냐 고민하던 기억이 다시 떠오릅니다.
   처음엔 디스크, 메모리 사용량도 줄이고 캐시율도 높이는 공유 라이브러리 사용을 좋아했는데 나중엔 도저히 관리가 안되고 불편함이 너무 많아 다 static 으로 때려박기 시작했네요.
   그 이후로 몸은 편해졌지만 뭔가 마음이 계속 불편했는데 토발즈형 말 들으니 이제야 마음이 편해지는군요.....
   처음부터 편하게 살 껄.

   맞아요 그리고 실무에서는 개발 담당자가 편해지는 것 외에도 환경별 문제에 따른 지원에 대한 부담이 해소된다는 것도 큰 부분을 차지하죠.
"
"https://news.hada.io/topic?id=4232","Slidev - 개발자를 위한 발표자료 작성 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Slidev - 개발자를 위한 발표자료 작성 도구

   - 마크다운 기반 슬라이드
   - Syntax Highlighting
   - Windi CSS 및 테마 지원
   - Vue 컴포넌트 임베딩
   - 프리젠터 모드
   - 자체 에디터 또는 VS Code 확장으로 편집 가능
   - 레코딩 기능 및 카메라 뷰 지원
   - PDF/PNG 및 SPA로 Export 지원
   - Vite로 핫 리로딩 및 플러그인 지원

   DeckSet과 비슷해보이지만 Slidev가 조금 더 강한 것 같네요.
   https://www.deckset.com/

   * MarkShow - 마크다운으로 슬라이드쇼 만들기 https://news.hada.io/topic?id=4136
"
"https://news.hada.io/topic?id=4265","Coinbase의 React Native 도입기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Coinbase의 React Native 도입기

   최근 Coinbase 개발자가 새로운 Coinbase 앱이 RN 으로 작성되었음을 트위터에서 공유해서 소소한 화제가 되었는데(https://twitter.com/htormey/status/1392161714250993667), 그에 대한 자세한 내용이 Medium 글로 공유되었네요. 관련 트윗 타래에 의하면 일부 네이티브 모듈이 있긴 하지만, 앱 코드베이스의 97% 정도가 TypeScript 라고 합니다.
   이하 원문 내용 요약 번역:
   - iOS, Android 네이티브 앱이 이미 있는 상황에서 RN 으로 마이그레이션. 마이그레이션 과정에서 200개 이상의 화면 규모의 거대한 네이티브 앱을 다시 구현해야 했고, 30명 이상의 기존 네이티브 엔지니어들에겐 전환을 위한 사내 RN 강의도 제공.
   - 많은 노력 끝에 네이티브 시절에 비해 퍼포먼스 지표, 비즈니스 지표, 앱 평점, 7 day crash free 유저 퍼센트, Cold Start 에 걸리는 시간, 탭 전환 시간 등 주요 지표가 모두 유지 혹은 개선되었음.
   - 2013년에 첫 앱이 출시되고, 2017년쯤 되었을 때 Android/iOS 각각 작은 규모의 팀이 있었는데 채용이 웹 개발자에 비해 너무 어려웠고, 웹 플랫폼 기술의 발전 속도로 인한 생산성을 네이티브 플랫폼 기술이 못 따라온다고 느낌. 몇 번의 시도 실패 이후 2018년에는 모바일 플랫폼의 이터레이션 속도 및 성장율의 개선이 필요함이 명백해짐.
   - Coinbase 가 제품을 어떻게 만드는지 바닥부터 다시 생각해보기로 함. 주요 피쳐는 기능 조직으로 백엔드 2명 + 각 플랫폼 (Web, Android, iOS) 마다 클라이언트 2명이 존재해, 하나의 버티컬을 위해 너무 많은 인력이 필요했음. 한 기능 팀의 최소 개발자 수를 8명을 5명 정도로 줄이고, 클라 개발자가 여러 플랫폼을 다 커버할 수는 없을까 라고 생각하게 됨.
   - 이로 인해 팀 구성 최소 요건이 완화되고, 더 효율적인 개발이 가능해지고, 클라이언트 개발자끼리의 접점이 늘어날 것을 기대함. 물론 효율만으로는 충분하지 않고, 그 과정에서 고객이 느끼는 성능과 퀄리티 또한 개선이 되어야만 그 투자가 정당화 가능하다고 생각.
   - 당시 이미 React 기반의 꽤 성숙한 웹 플랫폼 팀이 존재했음. 여러 크로스 플랫폼 검토 후에, 기존에 사용 중인 익숙한 기술에 기반하고, 웹과 모바일의 통합을 위한 경로가 클리어해 보이는 RN을 선택함. 이미 돌아가고 있는 네이티브 앱도 마이그레이션 해야 했기 때문에, 점진적이고 충격 없는 마이그레이션을 위해 몇 달의 사전 기술 검토 및 전략 수립 기간을 거침
   - 일단 RN과 네이티브가 연동될 필요가 없는 greenfield 부터 시작하는게 좋겠다고 생각함. Coinbase 내에서도 복잡하고 실시간 가격 차트나 depth chart 등의 성능이 중요한 기능이 많은, 당시 모바일 제공하지 않던 Pro 라는 웹 제품을 앱으로 먼저 만들어 보기로 결정함. Pro 를 RN 으로 잘 만들 수 있다면 나머지 (덜 복잡하고 성능 요구사항도 덜 빡센) 기능도 무난하고 옮겨올 수 있을거라고 가정.
   - 그 다음으로는 Pro와 기존 앱이 공유하는 온보딩 플로우를 RN으로 구현한 걸 기존 네이티브 앱에 붙여봄. 서비스 지역이 다양하다보니 온보딩 파트가 앱에서 가장 복잡한 부분 중 하나여서, 기존에 손대기가 너무 어려운 부분이었음. Pro 에서 새로 만들면서 기존 앱의 리팩토링도 겸할 것을 기대.
   - 마지막으로 앞의 두 과정에서 얻은 경험과 지식을 바탕으로 기존 네이티브 앱을 RN으로 재작성. 일단 계획을 세울 때는 full rewrite 가 될지 네이티브 앱에 점진적으로 RN 비중을 늘리는 형태가 될지는 물음표였고, 앞선 두 단계의 결과에 따라 결정하기로 함.
   - 전략을 세우고, 2019년 10월에 Pro 모바일 앱 출시했고, 결과는 기대 이상이었음. 비즈니스 성과도 좋고, 성능 문제가 되는 지점과 해결책에 대해 배웠으며, RN이 제공하는 생산성에 매우 만족했고, 짧은 시간 내에 웹 엔지니어가 RN 에서 생산성 낼 수 있다는 것도 확인함.
   - 고무된 채로 온보딩 플로우 재작성도 시작, 마찬가지로 비즈니스, 앱 퀄리티 모두 목표 달성
   온보딩 플로우 재작성 자체의 결과는 좋았지만, 기존 앱에 RN을 붙이는 게 어렵다는 걸 깨달음.
   웹만 하거나 네이티브만 하는 것에 비해 생산성도 안 좋아서 양 쪽 모두에서 ‘이럴거면 RN 왜 쓰냐’ 싶은 엔지니어들이 나옴. (Airbnb 의 사례와 매우 비슷하고, 실제로 Airbnb 엔지니어들이랑 얘기하면서 많이 배움)
   - 결과적으로 위의 교훈들을 통해 네이티브와 RN을 함께 가져가는 brownfield 접근이 모든 문제의 근원이라 판단하고, 기존 앱 전체를 RN으로 재작성하기로 결정.
   - 두 플랫폼 중 안드로이드 앱 마이그레이션이 성능, 퍼포먼스, 생산성 등에서 더 어려울 것 같아서 안드로이드를 먼저 재작성 타겟으로 잡음. 앞선 경험으로 full rewrite는 6개월 정도 걸릴 거라고 예상했지만, 결과가 가져다 주는 이득이 비용을 상회할 거라고 예상.
   - 2020년 3월에 안드로이드 앱 재작성을 시작해 실제로 6개월 정도 걸림. 이후 이어진 iOS 재작성도 2021년 1월에 끝남. 양 플랫폼 모두에서 핵심 지표가 좋은 성과를 보임.
   - 2020년 중순에 코인베이스에는 18명의 iOS 엔지니어, 7명의 안드로이드 엔지니어가 있었음. 2021년 5월 현재 코인베이스 RN 저장소에는 113명의 컨트리뷰터가 있고, 그 중 그 전까지는 모바일에 기여할 수 없던 웹 엔지니어도 다수.
   - 네이티브 엔지니어의 RN 엔지니어로의 전환을 위한 트레이닝은 큰 마찰 없이 진행되었고, 기존 네이티브 백그라운드 엔지니어들은 현재 RN 앱에서 높은 성과를 내는 중. 아직 완벽하진 않지만, 처음 기대했던 대로 각 기능 조직에서는 하나의 ‘클라이언트 팀’ 이 모든 클라이언트 플랫폼을 커버하는 형태가 되어가고 있음.
   - 세 개 (React, iOS, Android) 이던 플랫폼이 두 개 (React, RN) 가 되었지만 다음 스텝으론 그걸 1.5개로 줄여보려고 함. 웹과 RN 에서 공유하는 디자인 시스템, GraphQL 기반의 공용 데이터 레이어, 인프라적인 툴링 등의 공유를 계획 중. 한 엔지니어가 최소한의 컨텍스트 스위칭만으로 웹과 모바일 모든 플랫폼에서 기능을 배포할 수 있는 그림을 그리고 있음.
   - 앞으로 기술적인 난관과 그 과정에서 얻은 경험 등 RN 관련 더 많은 아티클 공유할 예정.

   라프텔의 RN 도입기가 생각나네요.
   https://ridicorp.com/story/react-native-1year-review/

   국내 회사들에도 도움이 많이 될만한 글이네요. 요약번역 감사합니다!
"
"https://news.hada.io/topic?id=4191","케빈 켈리의 99가지 추가 조언 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           케빈 켈리의 99가지 추가 조언

   Wired 창립 편집장 케빈 켈리(KK)가 작년 68번째 생일의 68가지 조언에 이어, 올해 생일엔 99가지 조언을 추가
   • That thing that made you weird as a kid could make you great as an adult — if you don’t lose it.
   - 어렸을 적 당신을 이상하게(Weird) 했던 것들을 잃지 않는다면, 어른이 되었을 때 당신을 위대하게 만들 수 있습니다.
   • If you have any doubt at all about being able to carry a load in one trip, do yourself a huge favor and make two trips.
   - 한 번에 모든짐을 다 옮길 수 있을까 고민된다면, 나 스스로를 위해서 두번에 나누어서 짐을 옮기세요.
   • What you get by achieving your goals is not as important as what you become by achieving your goals. At your funeral people will not recall what you did; they will only remember how you made them feel.
   - 목표를 달성하여 얻는 것들은 목표를 달성함으로써 당신이 무엇이 되는 지에 비해 중요하지 않습니다. 장례식에서 사람들은 당신이 한 일을 기억하지 못할 것입니다; 그들은 당신을 어떻게 느꼈는지 만을 기억할 겁니다.
   • Recipe for success: under-promise and over-deliver.
   - 성공을 위한 비법: 적게 약속하고 초과 제공하기
   • It’s not an apology if it comes with an excuse. It is not a compliment if it comes with a request.
   - 변명 거리가 있다면 사과가 아닙니다. 요청과 함께 한다면 칭찬이 아닙니다.
   • Jesus, Superman, and Mother Teresa never made art. Only imperfect beings can make art because art begins in what is broken.
   - 예수, 슈퍼맨, 마더 테레사 는 결코 예술을 만들지 않았습니다. 예술은 부서진 것에서 시작하기 때문에, 불완전한 존재만이 예술을 만들 수 있습니다.
   • If someone is trying to convince you it’s not a pyramid scheme, it’s a pyramid scheme.
   - 누군가 당신에게 피라미드 사기가 아니라는 걸 납득시키려 한다면 그건 피라미드 사기입니다.
   • Learn how to tie a bowline knot. Practice in the dark. With one hand. For the rest of your life you’ll use this knot more times than you would ever believe.
   - Bowline 매듭 묶는 법을 배우세요. 어둠속에서 연습하세요. 한손으로 연습하세요. 남은 생애동안 믿지 못할 만큼 많이 사용하게 될 겁니다.
   • If something fails where you thought it would fail, that is not a failure.
   - 실패할 것이라고 생각했던 부분에서 실패했다면, 실패가 아닙니다.
   • Be governed not by the tyranny of the urgent but by the elevation of the important.
   - 긴급함의 폭정 보다는 중요함의 높이에 의해 다스려 지세요. (역주 : 긴급 한 것 보다는 중요한 걸 먼저 하세요)
   • Leave a gate behind you the way you first found it.
   - 문은 처음 봤을 때의 모양으로 두고 가세요.
   • The greatest rewards come from working on something that nobody has a name for. If you possibly can, work where there are no words for what you do.
   - 가장 큰 보상은 아무 이름 없는 일을 할 때 받게 됩니다. 가능하다면, 당신이 하는 일에 대해 아무런 얘기도 없는 것을 하세요.
   • A balcony or porch needs to be at least 6 feet (2m) deep or it won’t be used.
   - 발코니나 포취(문 앞에 지붕이 덮여진 공간) 는 적어도 2미터 깊이는 되어야 합니다. 안 그러면 사용하지 않게 됩니다.
   • Don’t create things to make money; make money so you can create things. The reward for good work is more work.
   - 돈을 벌기 위해 물건을 만들지 마세요; 돈을 벌면 물건을 만들 수 있습니다. 좋은 일에 대한 보상은 더 많은 일입니다.
   • In all things — except love — start with the exit strategy. Prepare for the ending. Almost anything is easier to get into than out of.
   - 사랑을 제외한 모든 것에 출구 전략을 가지고 시작하세요. 결말을 준비하세요. 거의 모든 것들이 들어가는 것보다 나오는 게 어렵습니다.
   • Train employees well enough they could get another job, but treat them well enough so they never want to.
   - 직원들이 다른 직업을 구할 수 있을 만큼 충분히 교육하되, 그들이 나가고 싶지 않을 만큼 충분히 잘 대우하세요.
   • Don’t aim to have others like you; aim to have them respect you.
   - 다른 사람들이 당신과 같이 되기를 목표로 하지 마세요. 그들이 당신을 존중하는 걸 목표로 하세요.
   • The foundation of maturity: Just because it’s not your fault doesn’t mean it’s not your responsibility.
   - 성숙의 기초: 당신의 잘못이 아니라고 해서, 당신의 책임이 아니라는 걸 의미하지는 않습니다.
   • A multitude of bad ideas is necessary for one good idea.
   - 하나의 좋은 아이디어에는 다수의 나쁜 아이디어들이 필요합니다.
   • Being wise means having more questions than answers.
   - 현명하다는 것은 대답보다 질문이 많다는 것을 의미합니다.
   • Compliment people behind their back. It’ll come back to you.
   - 사람들의 등 뒤에서 칭찬하세요. 당신에게 돌아올 겁니다.
   • Most overnight successes — in fact any significant successes — take at least 5 years. Budget your life accordingly.
   - 대부분의 하룻밤 성공(벼락 성공) - 사실 모든 중대한 성공들 - 엔 적어도 5년이 걸립니다. 그에 따라 삶을 계획하세요
   • You are only as young as the last time you changed your mind.
   - 당신은 마지막으로 당신의 마음을 바꿨을 때 만큼 젊습니다.
   • Assume anyone asking for your account information for any reason is guilty of scamming you, unless proven innocent. The way to prove innocence is to call them back, or login to your account using numbers or a website that you provide, not them. Don’t release any identifying information while they are contacting you via phone, message or email. You must control the channel.
   - 어떤 이유던 당신의 계정 정보를 묻는 사람이 무죄라고 입증되지 않는 한, 당신을 대상으로 사기치는 유죄라고 가정합니다. 무죄를 증명하는 방법은 그들에게 다시 전화를 걸거나, 그들이 제공한 번호나 웹사이트가 아닌 당신이 입력한 정보로 로그인 해보는 겁니다. 그들이 전화, 메시지, 이메일로 연락한다면 어떤 식별 정보도 공개하지 마세요. 당신이 채널을 통제해야 합니다.
   • Sustained outrage makes you stupid.
   - 지속적인 분노는 당신을 어리석게 만듭니다.
   • Be strict with yourself and forgiving of others. The reverse is hell for everyone.
   - 당신에게 엄격하고 다른 사람을 용서하세요. 그 반대는 모두에게 지옥입니다.
   • Your best response to an insult is “You’re probably right.” Often they are.
   - 모욕에 대한 최고의 반응은 ""당신이 옳을 수도 있어요"" 입니다. 종종 그렇습니다.
   • The worst evils in history have always been committed by those who truly believed they were combating evil. Beware of combating evil.
   - 역사상 최악의 악은 항상 자신들이 악과 싸우고 있다고 믿는 사람들이 저질러 왔습니다. 악과 싸우는 것을 조심하세요.
   • If you can avoid seeking approval of others, your power is limitless.
   - 다른 사람에게 인정 받고자 하는 것을 피할 수 있다면, 당신의 힘은 무한합니다.
   • When a child asks an endless string of “why?” questions, the smartest reply is, “I don’t know, what do you think?”
   - 아이가 ""왜?""라는 질문을 계속할 때 현명한 대답은 ""잘 모르겠는데, 넌 어떻게 생각해?"" 입니다.
   • To be wealthy, accumulate all those things that money can’t buy.
   - 부유해지려면, 돈으로 살 수 없는 모든 것을 축적하십시오.
   • Be the change you wish to see.
   - 당신이 보고 싶은 변화가 되세요.
   • When brainstorming, improvising, jamming with others, you’ll go much further and deeper if you build upon each contribution with a playful “yes — and” example instead of a deflating “no — but” reply.
   - 다른 사람들과 브레인스토밍, 즉흥적으로 뭘 하거나(improvising), 재밍(Jamming, 즉흥연주) 등을 할 때, ""아니오, 하지만(no - but)"" 보다는 ""네 - 그리고(yes - and)"" 형태로 기여하면 더 멀리 깊게 참여 할 수 있습니다.
   • Work to become, not to acquire.
   - 얻기 위해 일하지 말고, 뭔가 가 되기 위해 일하세요.
   • Don’t loan money to a friend unless you are ready to make it a gift.
   - 선물할 게 아니라면 친구한테 돈을 빌려주지 마세요.
   • On the way to a grand goal, celebrate the smallest victories as if each one were the final goal. No matter where it ends you are victorious.
   - 위대한 목표를 향해 갈 때, 작은 승리 들을 마지막 목표 인 것처럼 축하하세요. 그것이 어디서 끝나든 당신은 승리하게 됩니다.
   • Calm is contagious.
   - 평온은 전염성이 있습니다.
   • Even a foolish person can still be right about most things. Most conventional wisdom is true.
   - 멍청한 사람도 대부분의 일에 대해서 옳을 수 있습니다. 대부분의 통념은 사실입니다.
   • Always cut away from yourself.
   - 항상 자신을 멀리하세요.
   • Show me your calendar and I will tell you your priorities. Tell me who your friends are, and I’ll tell you where you’re going.
   - 달력을 보여주시면 우선 순위를 알려드릴게요. 친구가 누구인지 말해주면, 당신이 어디로 가는지 알려드릴게요.
   • When hitchhiking, look like the person you want to pick you up.
   - 히치하이킹을 할 때는, 당신이 픽업 해 가고 싶은 사람처럼 보이세요.
   • Contemplating the weaknesses of others is easy; contemplating the weaknesses in yourself is hard, but it pays a much higher reward.
   - 다른 사람의 약점을 고민하는 것은 쉽습니다. 자신의 약점을 고민하는 것은 어렵지만 훨씬 더 많은 보상을 줍니다.
   • Worth repeating: measure twice, cut once.
   - 반복할 만한 가치가 있는 것: 두번 재고, 한번에 자릅니다.
   • Your passion in life should fit you exactly; but your purpose in life should exceed you. Work for something much larger than yourself.
   - 삶에 대한 당신의 열정은 당신에게 딱 맞아야 합니다; 하지만 당신의 삶의 목적은 당신을 능가 해야 합니다. 당신 자신보다 더 큰 무언가를 위해 일하세요.
   • If you can’t tell what you desperately need, it’s probably sleep.
   - 당신에게 절실하게 필요한 게 뭔지 알 수 없다면, 아마도 수면 일 겁니다.
   • When playing Monopoly, spend all you have to buy, barter, or trade for the Orange properties. Don’t bother with Utilities.
   - 모노폴리를 할 때, 모든 가진 것을 이용해서 오렌지색 땅을 사거나, 교환하거나, 거래하세요. 유틸리티에 신경쓰지 마세요.
   (역주 : 오렌지색 땅은 보드판 중간쯤에 있는 뉴욕/테네시/ST.James 3개의 땅입니다. 감옥에서 탈출할 때 대부분이 이곳 땅에 방문하게 되어, 모노폴리 전체에서 평균을 냈을 때 가장 많이 방문하는 땅입니다. 가격도 비싸지 않고, 건물만 잘 지어놓는다면 최대의 수익률을 낼 수 있는 위치)
   • If you borrow something, try to return it in better shape than you received it. Clean it, sharpen it, fill it up.
   - 뭔가를 빌린 경우, 받았을 때 보다 더 좋은 모양으로 돌려주려고 노력해보세요. 청소하고, 날카롭게 만들고, 채워서 돌려주세요.
   • Even in the tropics it gets colder at night than you think. Pack warmly.
   - 열대 지방에서도 밤에는 생각보다 춥습니다. 따뜻하게 챙겨가세요.
   • To quiet a crowd or a drunk, just whisper.
   - 군중이나 술취한 사람을 조용하게 만들려면, 속삭이세요.
   • Writing down one thing you are grateful for each day is the cheapest possible therapy ever.
   - 매일 감사한 것 한 가지를 적는 것이 가장 저렴한 치료법입니다.
   • When someone tells you something is wrong, they’re usually right. When someone tells you how to fix it, they’re usually wrong.
   - 누군가 당신에게 뭔가 잘못되었다고 얘기한다면, 대부분 그들이 옳습니다. 누군가 그걸 고치는 방법을 얘기한다면, 대부분 그들이 틀렸습니다.
   • If you think you saw a mouse, you did. And, if there is one, there are more.
   - 쥐를 본 것 같다고 생각이 든다면, 당신이 맞습니다. 하나가 있다면, 더 있습니다.
   • Money is overrated. Truly new things rarely need an abundance of money. If that was so, billionaires would have a monopoly on inventing new things, and they don’t. Instead almost all breakthroughs are made by those who lack money, because they are forced to rely on their passion, persistence and ingenuity to figure out new ways. Being poor is an advantage in innovation.
   - 돈은 과대평가 되었습니다. 진짜로 새로운 것에는 많은 돈이 필요하지 않습니다. 만약 그렇다면, 억만장자들이 새로운 것을 개발하는 것을 독점하겠지만, 그렇지 못합니다. 대신 거의 모든 돌파구들은 돈이 없는 사람들에 의해 만들어집니다. 그들은 새로운 길을 찾기 위해 그들의 열정, 끈기, 독창성에 의존해야 하기 때문입니다. 가난은 혁신 하는데 어드밴티지를 줍니다.
   • Ignore what others may be thinking of you, because they aren’t.
   - 다른 사람들이 당신에 대해 어떻게 생각하는지 무시하세요. 그들은 그렇게 생각하지 않습니다.
   • Avoid hitting the snooze button. That’s just training you to oversleep.
   - 스누즈 버튼을 누르지 마세요. 그게 당신을 늦잠 자도록 훈련 시키는 겁니다.
   • Always say less than necessary.
   - 항상 필요한 것보다 적게 말하세요.
   • You are given the gift of life in order to discover what your gift *in* life is. You will complete your mission when you figure out what your mission is. This is not a paradox. This is the way.
   - 당신은 당신 삶에 선물이 뭔 지를 알아내기 위해 삶이란 선물을 받았습니다. 당신의 미션이 뭔 지 알아내면 당신은 미션을 완수하게 될 겁니다. 패러독스가 아닙니다. 이게 길이예요.
   • Don’t treat people as bad as they are. Treat them as good as you are.
   - 사람들을 있는 그대로 나쁘게 대하지 마세요. 당신처럼 그들을 잘 대우해 주세요.
   • It is much easier to change how you think by changing your behavior, than it is to change your behavior by changing how you think. Act out the change you seek.
   - 행동을 바꾸어 생각을 바꾸는 게, 생각을 바꿔 행동을 바꾸는 것보다 더 쉽습니다. 추구하는 변화를 실천하세요.
   • You can eat any dessert you want if you take only 3 bites.
   - 세 입만 먹을 수 있다면 어떤 디저트든 먹어도 됩니다.
   • Each time you reach out to people, bring them a blessing; then they’ll be happy to see you when you bring them a problem.
   - 사람들에게 다가갈 때마다 축복을 가져다 주세요; 그러면 당신이 문제를 가져갈 때도 당신을 즐겁게 맞아줄 겁니다.
   • Bad things can happen fast, but almost all good things happen slowly.
   - 나쁜 일은 빨리 일어날 수 있지만, 대부분의 좋은 일은 느리게 일어납니다.
   • Don’t worry how or where you begin. As long as you keep moving, your success will be far from where you start.
   - 어디서 어떻게 시작할지 걱정하지 마세요. 계속 움직인다면, 당신의 성공은 당신이 시작했던 곳에서 멀리 떨어져 있을꺼예요.
   • When you confront a stuck bolt or screw: righty tighty, lefty loosey.
   - 고정된 볼트 또는 나사를 만났을 때: 오른쪽으로 단단히 조이고, 왼쪽으로 느슨하게 합니다.
   • If you meet a jerk, overlook them. If you meet jerks everywhere everyday, look deeper into yourself.
   - 멍청이를 만나면 간과하세요. 멍청이를 매일 어디서나 본다면, 당신 자신을 깊게 들여다보세요.
   • Dance with your hips.
   - 엉덩이로 춤추세요.
   • We are not bodies that temporarily have souls. We are souls that temporarily have bodies.
   - 우리는 일시적으로 영혼을 가진 육체가 아닙니다. 우린 일시적으로 육체를 가진 영혼입니다.
   • You can reduce the annoyance of someone’s stupid belief by increasing your understanding of why they believe it.
   - 누군가의 어리석은 믿음에 대해서, 그들이 왜 그걸 믿는 지에 대한 이해도를 높이면 두통을 줄일 수 있습니다.
   • If your goal does not have a schedule, it is a dream.
   - 목표에 스케줄이 없다면 그건 꿈입니다.
   • All the greatest gains in life — in wealth, relationships, or knowledge —come from the magic of compounding interest — amplifying small steady gains. All you need for abundance is to keep adding 1% more than you subtract on a regular basis.
   - 부, 관계, 지식과 같이 인생에서 얻는 모든 중요한 것들은, 작게 꾸준히 얻는 것을 증폭시키는 복리의 마법에서 비롯됩니다. 풍요로움을 위해 필요한 것은 정기적으로 빼는 것보다 1% 더 하는 것입니다.
   • The greatest breakthroughs are missed because they look like hard work.
   - 가장 큰 돌파구는 힘든 일처럼 보이기 때문에 놓치게 됩니다.
   • People can’t remember more than 3 points from a speech.
   - 사람들은 연설에서 3가지 이상을 기억하지 못합니다.
   • I have never met a person I admired who did not read more books than I did.
   - 내가 읽었던 것보다 더 많은 책을 읽지 않은, 내가 존경하는 사람을 만난 적이 없습니다.
   • The greatest teacher is called “doing”.
   - 가장 위대한 교사는 ""행동하는 것"" 이라고 합니다.
   • Finite games are played to win or lose. Infinite games are played to keep the game going. Seek out infinite games because they yield infinite rewards.
   - 유한 게임은 승리 또는 패배를 위해 진행합니다. 무한 게임은 게임을 계속하기 위해 진행합니다. 무한한 보상을 주는 무한한 게임을 찾으세요.
   • Everything is hard before it is easy. The day before something is a breakthrough, it’s a stupid idea.
   - 모든 것은 쉽기 전에 어렵습니다. 무언가 돌파구가 되기 전날에는 그건 어리석은 생각입니다.
   • A problem that can be solved with money is not really a problem.
   - 돈으로 해결할 수 있는 문제는 실제로 문제가 아닙니다.
   • When you are stuck, sleep on it. Let your subconscious work for you.
   - 뭔가에 막히면, 그거 위에 잠을 자세요. 당신의 잠재의식이 당신을 위해 일하게 하세요.
   • Your work will be endless, but your time is finite. You cannot limit the work so you must limit your time. Hours are the only thing you can manage.
   - 작업은 끝이 없을 것이지만, 시간은 한정되어 있습니다. 작업을 제한할 수 없으므로 시간을 제한해야 합니다. 당신이 관리할 수 있는 건 시간뿐입니다.
   • To succeed, get other people to pay you; to become wealthy, help other people to succeed.
   - 성공하려면, 다른 사람들이 당신에게 지불하게 하세요; 부유해 지려면, 다른 사람들이 성공하도록 도와주세요.
   • Children totally accept — and crave — family rules. “In our family we have a rule for X” is the only excuse a parent needs for setting a family policy. In fact, “I have a rule for X” is the only excuse you need for your own personal policies.
   - 아이들은 가족의 규칙을 전적으로 받아들이고 필요로 합니다. ""우리 가족엔 X에 대한 규칙이 있습니다.""는 부모가 가족의 정책을 설정하는데 필요한 유일한 변명입니다. 사실, ""나는 X에 대한 규칙이 있습니다"" 는 당신의 개인적인 정책에 필요한 유일한 변명입니다.
   • All guns are loaded.
   - 모든 총은 장전 되어 있습니다.
   • Many backward steps are made by standing still.
   - 많은 뒷걸음질은 가만히 서있을 때 이루어집니다.
   • This is the best time ever to make something. None of the greatest, coolest creations 20 years from now have been invented yet. You are not late.
   - 지금이 뭔가를 만들기에 가장 좋은 시기입니다. 지금으로부터 20년 후의 가장 위대한/멋진 작품은 아직 발명 되지 않았습니다. 당신은 늦지 않았어요.
   • No rain, no rainbow.
   - 비가 오지 않으면, 무지개도 없습니다.
   • Every person you meet knows an amazing lot about something you know virtually nothing about. Your job is to discover what it is, and it won’t be obvious.
   - 당신이 만나는 모든 사람은, 당신이 거의 알지 못하는 것에 대해 놀라운 것들을 알고 있습니다. 당신의 임무는 그것이 무엇인지 발견하는 것이고, 그건 명확하진 않을 겁니다.
   • You don’t marry a person, you marry a family.
   - 사람과 결혼하는 것이 아니고, 가족과 결혼합니다.
   • Always give credit, take blame.
   - 항상 (다른 사람에게) 공로를 돌리고, 비난(책임)을 받으세요. [1]
   • Be frugal in all things, except in your passions splurge.
   - 당신의 열정이 과장된 경우를 제외하고, 모든 일에서 검소하세요.
   • When making something, always get a few extras — extra material, extra parts, extra space, extra finishes. The extras serve as backups for mistakes, reduce stress, and fill your inventory for the future. They are the cheapest insurance.
   - 뭔가를 만들 때 항상 추가 재료, 추가 부속, 추가 공간, 추가 마감 등 여분을 챙기세요. 이 여분들은 실수에 대한 백업이 되고, 스트레스를 줄이고, 미래를 위해 재고를 채워 줍니다. 가장 싼 보험이에요.
   • Something does not need to be perfect to be wonderful. Especially weddings.
   - 훌륭해 지기 위해 완벽할 필요는 없습니다. 특히 결혼식.
   • Don’t let your email inbox become your to-do list.
   - 이메일의 받은 편지함이 할 일 목록이 되지 않게 하세요.
   • The best way to untangle a knotty tangle is not to “untie” the knots, but to keep pulling the loops apart wider and wider. Just make the mess as big, loose and open as possible. As you open up the knots they will unravel themselves. Works on cords, strings, hoses, yarns, or electronic cables.
   - 엉킨 것들을 푸는 가장 좋은 방법은 매듭을 푸는 것이 아니라, 꼬인 고리들을 더 넓게 잡아 당기는 것입니다. 엉망진창인 것을 크고, 느슨하게 개방하세요. 매듭을 열면 알아서 풀릴 겁니다. 코드, 끈, 호스, 실, 또는 전기 케이블에 작동 됩니다.
   • Be a good ancestor. Do something a future generation will thank you for. A simple thing is to plant a tree.
   - 좋은 조상이 되세요. 미래 세대들이 당신에게 감사해 할 일을 하세요. 가장 간단한 것은 나무를 심는 것입니다.
   • To combat an adversary, become their friend.
   - 적과 싸우려면, 그들과 친구가 되세요.
   • Take one simple thing — almost anything — but take it extremely seriously, as if it was the only thing in the world, or maybe the entire world is in it — and by taking it seriously you’ll light up the sky.
   - 거의 모든 것들에서 단순한 것 하나를 취하되, 그걸 전세계에서 가장 유일하거나 마치 전세계가 그 안에 있는 것처럼 진지하게 받아 들이세요. 진지하게 받아들이면 하늘을 밝히게 될 겁니다.
   • History teaches us that in 100 years from now some of the assumptions you believed will turn out to be wrong. A good question to ask yourself today is “What might I be wrong about?”
   - 역사는 지금으로부터 100년 후에 당신이 믿었던 가정 중의 일부가 잘못된 것으로 판명될 것이라고 가르칩니다. 오늘 스스로에게 물어볼 좋은 질문은 ""내가 무엇에 대해 잘못 알고 있을까?"" 입니다.
   • Be nice to your children because they are going to choose your nursing home.
   - 자녀들이 당신의 요양원을 선택할 것이기 때문에, 자녀에게 친절하게 대해주세요.
   • Advice like these are not laws. They are like hats. If one doesn’t fit, try another.
   - 이런 조언들은 법률이 아닙니다. 그들은 모자와 같습니다. 맞지 않다면 다른 걸 시도해보세요.

   길지만 재밌네요. ㅎ

   좋은 글의 소개/번역 감사합니다.
   두번째 조언은 trip 을 여행보다, 한 번의 발걸음 또는 왕복 같이 번역하면 낫습니다.
   한번에 모든짐을 다 옮길 수 있을까 고민된다면, 나 스스로를 위해서 두번에 나누어서 짐을 옮기세요.
   그리고,  If you can avoid seeking approval of others, your power is limitless. 의 경우에는 다른 사람의 승인보다.. ""남들의 인정을 갈구하는 마음을 피할 수 있다면,"" 으로 번역하는게 자연스럽겠어요

   오 고맙습니다. 참고해서 반영해두겠습니다 ^^

   - 케빈 켈리의 68가지 조언 https://news.hada.io/topic?id=2060
   [1] Why great leaders take the blame and pass on the credit https://inc.com/ron-gibori/…
"
"https://news.hada.io/topic?id=4157","CSS Selectors Level 4 의 pseudo 셀렉터들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  CSS Selectors Level 4 의 pseudo 셀렉터들

   :any-link = :link + :visited - href가 있는 모든 링크들
   :focus-visible - 포커스 개체 스타일링
   :focus-within - 포커스 시 상위개체 스타일링
   :is() - 여러개의 셀렉터에 동시 적용
   :where() - is()와 비슷하지만 zero-specificity. 프레임워크등에서 기본값 적용시 활용
   향상된 :not() - 셀렉터 리스트 지원
   :has() - 특정 개체를 가진 부모들 찾기. 제안엔 포함되었지만 ""at-risk"" (Rec 에선 빠질수도)
   :empty - Level 3에서 제안. Child개체가 없는 모든 개체 선택

   :focus-visible & :focus-within 으로 접근성 높이기 https://marshall-ku.com/web/tips/focus-visible로-접근성-높이기
"
"https://news.hada.io/topic?id=4256","올바른 방법으로 Python 배우기 [무료 E북]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      올바른 방법으로 Python 배우기 [무료 E북]

   - 유명한 책인 ""컴퓨터 과학자처럼 생각하며 배우는 파이썬""의 최신 개정판
   - 2권으로 구성
   ㅤ→ Learn Python the Right Way : 446p PDF
   ㅤ→ Code With Replit : 313p PDF
   - 전산(Computer Science) 기초 부터 실제(Real World) 프로젝트를 구현하며 파이썬 배우기
   - 파이썬 설치하지 않고 온라인에서 Repl.it 을 이용해서 진행
   - 발표자료와 소스코드를 마크다운으로 해서 독자들이 쉽게 기여 가능
   - 온라인 PythonTutor.com 을 이용해서 단계별로 시각화 & 코드 실행
   - GNU Free Documentation License

   감사합니다. OCR 하는데 많은 도움이 되겠습니다.

   한국어 판은 ""씽크 파이썬 Think Python - 컴퓨터 과학자처럼 생각하며 배우는 파이썬"" 이라고 2판이 나와있긴 한데요.
   2판 자체가 오래된 버전이라 최신 파이썬 내용을 다루게 개정한 버전입니다.

   감사합니다. AI 엔진 OCR할때 파이썬 코딩하는데 많은 도움이 되겠습니다.
"
"https://news.hada.io/topic?id=4201","Amazon CloudFront Functions 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Amazon CloudFront Functions 공개

   - 218개의 CloudFront Edge에서 JS코드를 실행하는 경량 서버리스 스크립팅 플랫폼
   - 풀 서버리스인 Lambda@Edge 보다 더 끝단에 있고, 기능은 간단한 HTTP Req/Res 용도로 짧은 생명주기를 가짐
   ㅤ→ Lambda@Edge(L@E)는 VM기반, CloudFront Functions(CFF)는 프로세스 기반 Isolation
   ㅤ→ L@E 와 CFF 둘다 같이 사용 가능
   ㅤ→ CFF : 네트웍/파일 접근 안됨. 1ms이하의 실행시간. Req 바디 접근 불가. 프리티어 제공. 가격은 L@E의 1/6
   - 사용 예
   ㅤ→ 캐쉬키 관리 및 정규화
   ㅤ→ URL Rewrite 및 Redirect
   ㅤ→ HTTP Header 조작
   ㅤ→ 접근 권한 관리

   CloudFlare 의 Workers 와 딱 경쟁하는 구도 같네요.
   - https://workers.cloudflare.com/

   workers는 lambda@edge 랑 경쟁 아닐까요? cf functions는 lambda@edge 보다 한층 더 가벼운(제약이 많은) 것 같더라구요

   근데 Workers 는 정작 사용해보면 제약이 넘 많더라구요.
   기능상 보면 Lambda@Edge >> CF Workers > CF Functions 정도인 거 같기는 합니다.

   workers보다는 제약조건이 더 많은 것 같아요. 유연한 api gateway 스크립트 정도?
"
"https://news.hada.io/topic?id=4197","Cinder - 성능 중점의 CPython 포크버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Cinder - 성능 중점의 CPython 포크버전

   - 인스타그램이 내부에서 사용중인 CPython 3.8의 성능 개선 포크
   ㅤ→ 업스트림을 위해 오픈소스로 공개는 하지만, 별도 지원은 없음
   ㅤ→ 현재 프로덕션 사용 중일 정도로 안정적이지만 보장은 안함
   - 다양한 성능 개선 포함
   ㅤ→ 바이트코드 인라인 캐슁 : Shadowcode
   ㅤ→ 코루틴 Evaluation 을 더 빨리
   ㅤ→ 메소드 단위 JIT
   ㅤ→ 타입 어노테이션으로 타입 최적화된 바이트코드를 생성하여 JIT성능을 개선하는 바이트코드 컴파일러

   Pyston v2 - 20% 빠른 파이썬 https://news.hada.io/topic?id=3110
"
"https://news.hada.io/topic?id=4148","CSS Tipsips

   다른 튜토리얼에서 잘 보지 못한 팁들 모음
   - 타이핑(깜박이는 커서) 효과
   - Drop-Shadow(); 필터
   - scroll-behavior: smooth; 부드러운 스크롤
   - 센터 정렬하기
   - 이미지/이모지 커서
   - Truncate Text
   - -webkit-line-clamp : 특정 줄수로 텍스트 자르기
   - ::selection
   - resize:both; 모든걸 사이즈 조절 가능하게
   - :target 으로 Modal 만들기
   - calc()
   - :empty 셀렉터
   - 커스텀 스크롤바
   - position: sticky;
   - CSS 스크롤 스냅
   - attr() 을 이용한 다이나믹 툴팁
   - caret-color 로 커서 색상 변경
   - ::in-range , ::out-of-range
   - background-clip 으로 멋진 배경의 헤드라인 글자 만들기

   타이핑효과는 몰랐던 건데 유용하네요

   요즘 센터정렬은 글에선 3줄인데.. 이렇게 2줄로도 한다는 군요.
   .center {
   ㅤdisplay: grid;
   ㅤplace-items: center;
   }
"
"https://news.hada.io/topic?id=4219","Bootstrap 5 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Bootstrap 5 릴리즈

   - 로고 변경
   - offcanvas 컴포넌트
   - .card 가 .accordion 으로 변경
   - Form 개선 및 커스텀 가능
   - Floating Label
   - RTL 지원
   - 새로운 Utility API
   * jQuery 제거
   * 브라우저 지원 제거 : 기존 Edge 및 IE 10/11, FF < 60, 크롬 < 60, iOS Safari < 10

   안드로이드의 경우에 6버전 미만을 지원했던데 사실 5까지는 지원할 수 있는데 아쉽습니다. 안드로이드 5버전부터는 웹뷰가 플레이 스토어를 통해서 업데이트 되기 때문입니다. 업데이트를 하지 않는 번들 크롬 버전을 기준으로 지원을 끊었더라고요.
"
"https://news.hada.io/topic?id=4214","iOS 14.5의 앱 추적 투명성(ATT)기능, 96%가 추적 비활성화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                iOS 14.5의 앱 추적 투명성(ATT)기능, 96%가 추적 비활성화

   - 앱 분석업체 Flurry의 모바일 사용자 대상 조사 결과(4/26 출시이후 2주 동안)
   ㅤ→ 미국내 250만 DAU: 4%만 활성화
   ㅤ→ 전세계 530만 DAU: 12%만 활성화
   - 페이스북은 ATT 기능 팝업전에 ""페이스북과 인스타그램을 무료로 유지하기 위해"" 트래킹을 켜달라는 문구를 추가

   - Kara Swisher의 Tim Cook 인터뷰 https://news.hada.io/topic?id=4027
   - iOS 14.5 배포 - 애플워치로 잠금해제 지원, 앱 추적 투명성 기능 활성화 https://news.hada.io/topic?id=4150
   - 페이스북, 애플 개인정보 보호 변경에 대비한 알림 메시지 테스트중 https://news.hada.io/topic?id=3673
"
"https://news.hada.io/topic?id=4188","Stack on a Budget - 무료 티어 기반 개발","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Stack on a Budget - 무료 티어 기반 개발

   FTDD - Free Tier Driven Development
   미니/사이드 프로젝트 등에 활용 가능한 무료 티어 서비스들을 카테고리 별로 정리
   - Activity Feeds : PubNub, Pusher, Stream
   - App Hosting : EC2, Azure App, GearHost, GAE/GCE, Heroku, OpenNode, Vercel..
   - APM : Datadog, Elastic APM, New Relic
   - App Testing : Applitools, LambdaTest, Sauce Labs, TestingBot
   - Code 협업 도구 : Bitbucket, Cloud9, GitHub, Gitlab, Codeanywhere, Launchpad
   - 코드리뷰 & 커버리지 : Codecov, Coveralls
   - Contents as a service : Contentful, FakeJSON, Image Charts, Storyblok..
   - CDN : Cloudflare
   - CI : AppVeyor, CircleCI, GitLab CI, ContinuousPHP, TeamCity, Shippable, Travis CI, VSTS ..
   - DB Hosting : DynamoDB, CouchDB, Dydra, Firebase, 구글 Cloud Datastore, Heroku Postgres/Redis, MongoDB..
   - Data Mining : Count, Metabase
   - DNS Hosting : LuaDNS
   - Email : Elastic Email, Emaillabs, Postmark, SparkPost..
   - 에러 리포팅 : Bugsnag, LogRocket, Sentry..
   - 파일 변환 : Cloudinary, Filestack
   - 메시지큐 : CloudAMQP, 구글클라우드 Pub/Sub
   - 모바일 분석 : Amazon Mobile Analytics, Firebase, Flurry, Mixpanel, Segment..
   - Monitoring : Google Stackdriver, Healthchecks.io, Librato, Uptime Robot
   - Push Noti : Azure Notification Hubs, Batch, Firebase Push, OneSignal
   - 검색 : Algolia
   - 서버리스앱 호스팅 : AWS Lambda, Google Cloud Functions, Hook.io
   - 스태틱 앱 호스팅 : AWS S3, Cloudflare Pages, GitHub Pages, Netlify, Surge, Vercel..
   - 사용자 인증 : Auth0, AWS Cognito, Firebase authentication, Ionic Auth, Okta..
   - 웹스크래핑 : Apify, ProxyCrawl, Scraper API

   - Awesome-SelfHosted : 유료 SaaS 대신 로컬에 설치하는 무료 대체제 서비스들 모음 https://news.hada.io/topic?id=285
   - Google Cloud Run으로 사이드 프로젝트들 거의 무료로 운영하기 https://news.hada.io/topic?id=1288
   - 스타트업을 년6$로 운영하기 https://news.hada.io/topic?id=1621
"
"https://news.hada.io/topic?id=4233","osmos::feed - GitHub을 이용하는 웹 RSS리더","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osmos::feed - GitHub을 이용하는 웹 RSS리더

   - GitHub Pages로 여러개의 Feed를 모아서 정적 호스팅
   - GitHub Actions 로 주기적으로 Feed를 리빌드
   ㅤ→ 빌드할때 이전 데이터 캐쉬로 해서 새 콘텐츠만 다운로드
   - yaml 파일에 피드 추가해서 구독 관리
   - 속도에 최적화된 node.js 스크립트로 콘텐츠 가져오기 & 정적 사이트 생성

   챙겨보는 기술 블로그 모음 같은 거를 만들면 좋겠네요
   - 기업 기술블로그 모음 https://news.hada.io/topic?id=3646
   - 특정 기술 스택에 대한 최고의 개발자 블로그 찾기 https://news.hada.io/topic?id=3638
   - 기술 & 스타트업 뉴스레터 및 블로그 모음 https://news.hada.io/topic?id=2505
"
"https://news.hada.io/topic?id=4221","리눅스 재단, 글로벌 농업 생태계를 위한 오픈소스 프로젝트 AgStack 재단을 설립","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            리눅스 재단, 글로벌 농업 생태계를 위한 오픈소스 프로젝트 AgStack 재단을 설립

   - 오픈소스 기술을 사용해서 전세계 음식 및 농업 생태계를 대량 혁신 하기 위한 프로젝트
   - 농업 데이터 및 어플리케이션을 위한 무료/재사용가능/오픈 디지털 인프라를 만들고 유지보수
   - 여러 기술 회사들과 농업 산업 쪽 회사들 및 대학들이 참여
   ""글로벌 농업 에코시스템은 디지털 메이크오버를 필요로 합니다. 재사용 가능한 도구와 데이터가 없어서 생산성과 혁신을 너무 많이 잃어버리고 있어요. AgStack 멤버들이 무료/공개 디지털 도구와 데이터로 전세계 농업을 지원하길 바랍니다.""
   - 생산되는 모든 식품의 33%가 낭비되고 있지만, 전세계 인구의 9%는 배고프거나 영양이 부족
   - 이는 너무 느리고 비효율적이고, 점점 더 복잡해지는 농업 공급망에 맞게 작동하지 못하는 레거시 기술 시스템 때문
   - AgStack 은 협업 및 오픈소스 소프트웨어를 사용하여 21세기를 위한 디지털 인프라스트럭쳐 구축할 것
   - AgStack 재단 웹사이트 : https://agstack.org/
"
"https://news.hada.io/topic?id=4275","200개의 랜딩페이지를 Roasting 하고 배운 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     200개의 랜딩페이지를 Roasting 하고 배운 것

   - 스타트업의 랜딩페이지를 분석해서 전환율을 높일수 있게 리뷰해주는 것을 Roast 라고 이름 붙이고, 1년간 진행한 경험담
   ㅤ→ 20분정도의 리뷰 비디오를 찍어서 고객에게 제공
   ㅤ→ 1년동안 약 1.1억원의 매출과 2000명의 이메일 구독자
   - 창업자들이 주로 놓치는 실수들과 쉽게 고치는 방법
   ㅤ→ 전환 목표는 딱 1개만
   ㅤ→ USP(Unique Selling Position)에 집중 : 경쟁자 및 현재의 방식들과 비교
   ㅤ→ 명확,적절한 소셜 증거 : 실제 구매자들이 왜 이 제품을 사용하고 좋아하는지를 먼저 보여 줄것
   ㅤ→ 간단한 언어 : 기술용어 제거하고 누구나 이해하기 쉬운 일반 용어를 사용할 것
   ㅤ→ PAS(Pain - Agitate - Solve) 를 이용 : 고객의 진정한 고통을 보여주고 설명해서 자극할 것
   ㅤ→ 장점과 유스케이스 노출 : 고객이 찾아볼 필요없이 명확하게 예제를 통해서 보여줄 것
   ㅤ→ CTA 에 표지판 달기 : 버튼에 컨텍스트를 추가해서 방문자가 액션했을때 뭘 기대할수 있는지 보여주기
   ㅤ→ 오버씽킹 하지 말고 물어보기 : 왜 사용자들이 이탈하는지에 대한 설문조사를 진행해 볼것 (GetSiteControl 등 이용)
   ㅤ→ 통계를 알기 : GA 등을 통해서 분석 & 이벤트 설정하고 목표 전환을 체크할 것. 나중을 위한 전환 기준 찾기
   - 좀 더 좋은 랜딩 페이지를 위한 아이디어들
   ㅤ→ 랜딩페이지가 충분히 니치(niche)하지 못함 : 가능하면 작은 고객군을 타겟으로 먼저 만들고, 나중에 추가 & 확장
   ㅤ→ CTA가 너무 빠르거나 큼 : 액션 하기 전에 충분히 고객들이 제품에 대해서 알수 있도록 정보를 제공
   ㅤ→ 보여줄 수 있는걸 말하고 있음 : 글자로 설명하지 말고, 스크린샷 / 테이블 / 예제 / 데모 / 일러스트등으로 보여줄 것
   ㅤ→ 의심을 해결해주기 : 카피 및 FAQ 를 통해, 구매자의 머리속에 있는 질문에 대해 답하기
   ㅤ→ 더 나은 이미지 사용하기 : 내용과 딱 맞는 이미지를 사용할 것
   ㅤ→ 통계 알기 : 많은 사람들이 전체 퍼널을 측정하지 않음. GA에서 유입경로 전체에 대한 이탈율을 검토 할 것
   ㅤ→ 정기적인 전환 테스트 구현 필요 : 정기적으로 테스트를 통해 점검할 것
   - Roasting을 비즈니스화 하며 배운 것
   ㅤ→ 많은 창업자들이 랜딩페이지에 분석도구가 붙어있지만 전환율에 대해 잘 모르고 있음
   ㅤ→ GA와 Goal 설정은 되어있지만 성과분석 리뷰는 하지 않음
   ㅤ→ 95%의 Roast 고객은 남성 창업자 였음
   ㅤ→ 랜딩페이지 들은 SaaS, E-Commerce, B2C 앱과 도구가 많음
   ㅤ→ 나와 비슷한 비즈니스가 5개 정도 생김
   ㅤ→ 시작전에 7개의 질문을 보내서 컨텍스트를 취득. 끝나고 익명 서베이를 보내서 개선할 방법을 물었음
   ㅤ→ 50% 정도의 창업자들이 Roast 에서 제공한 피드백을 즉시 또는 몇주/몇달 내에 반영
   ㅤ→ 1/4 정도의 고객은 직접 변경해달라고 요청하기도
   ㅤ→ 더 공개적으로 만들수록 모르는 사람들에게 더 많은 도움을 얻었음(자신들의 아이디어, mini-roast 등을 보내줌)
   ㅤ→ 20번 이상 내 랜딩을 수정했고, 3개의 결제 솔루션, 4개의 가격, 5개의 구매 플로우를 변경했음. 아직도 테스트 중
   ㅤ→ 유료광고의 최고 ROAS 는 3 정도였음
   ㅤ→ 가장 성과 안좋았던 채널은 Quora, Reddit 및 Paved.com 을 이용한 이메일
   - 사용했던 도구들
   ㅤ→ 고객 피드백 : Typeform
   ㅤ→ 페이지 로딩 시간 체크 : Google Pagespeed Insights
   ㅤ→ 메일링 리스트 : Autopilot
   ㅤ→ 블로그 : Ghost
   ㅤ→ 분석 도구 : Hotjar (레코딩 & 히트맵), Heap(퍼널), Google Analytics
   ㅤ→ 이메일 수집 : GetSiteControl
   ㅤ→ 결제 : Stripe & Paypal
"
"https://news.hada.io/topic?id=4260","Deno 1.10 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Deno 1.10 릴리즈

   - deno test runner 개선
   - Web Worker 에서 Structured Clone 지원
   - Web Storage API 지원
   - WASM 에서 atomics 및 Shared memory 지원
   - remote import maps 지원
   - --unstable 플래그 제거
"
"https://news.hada.io/topic?id=4250","Hurl - 웹기반 HTTP Req 테스트 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Hurl - 웹기반 HTTP Req 테스트 도구

   - HTTP 메소드/헤더/파라미터 수정, Basic 인증/OAuth, Redirect 팔로윙등 지원
   - 2009년에 깃헙 공동창업자인 Chris Wanstrath 와 유명 개발자 Leah Culver 가 같이 만들었던 도구
   - Twilio, Runscope 등으로 인수되었다가 올해 Pipedream이 인수하면서 재 오픈

   postman 웹 버전인가요 ㅎㅎ

   * Pipedream - 개발자를 위한 Integration 플랫폼 https://news.hada.io/topic?id=734
   - Hoppscotch - API 리퀘스트 빌더 https://news.hada.io/topic?id=3973
   - HTTPie - 쓰기 쉬운 코맨드라인 HTTP 클라이언트 https://news.hada.io/topic?id=998
   - wuzz - CLI용 인터랙티브 HTTP 도구 https://news.hada.io/topic?id=3655
"
"https://news.hada.io/topic?id=4203","BlaCk Void Zsh - ZSH 스타터 킷","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       BlaCk Void Zsh - ZSH 스타터 킷

   - 4개의 테마: 2라인 파워라인, 2라인 심플, 1라인 파워라인, 1라인 심플
   - 손쉬운 입력: 자동완성, 괄호매칭, FZF 통합
   - 기타 내장 도구들: ip-info, URL(urlshort, urlencode, urldecode), terminal image view
   - 성능: 기본적으로 플러그인들을 비동기 로드하며, 외부 프로세스를 최대한 줄이고 캐싱하는 등의 최적화로 새로운 쉘 생성시 2.7 ms만에 초기화
   파워툴스 브랜치(https://github.com/black7375/BlaCk-Void-Zsh/tree/powertools)
   - grep->ripgrep, ls -> exa처럼 현대적인 터미널 도구들을 사용 가능
   - 더 많은 정보는 이슈에서 확인가능 https://github.com/black7375/BlaCk-Void-Zsh/issues/23
   도커로 미리 사용해보기 가능
   docker run --rm -it alstjr7375/bvzsh:latest
   docker run --rm -it alstjr7375/bvzsh:latest-powertools

   리눅스 터미널 툴 글이 올라오길래 제 환경 설정 올려봅니다.
   플러그인들이 많이 들어가다보니 아무래도 성능을 신경쓰게 됐는데 쉘스크립트에서 가장 큰 병목 현상 중 하나는 외부 프로세스 실행입니다.
   https://black7375.tumblr.com/post/647324695443734528/…
   예를 들어 많이들 사용하는 brew는 $(brew --prefix)를 사용해 PATH에 추가하는 것이 권장되고 있습니다.
   그런데 벤치마크를 돌려보면 11.3 ms로 엄청 느린 프로그램이라는 점.
   따라서 전 환경 초기화를 위한 요소들(pyenv, kubectl 등)은 초기 설치나 업데이트시 캐싱되도록 했습니다. 또는 zinit recache 명령어로도 가능해요.
"
"https://news.hada.io/topic?id=4231","Create Go App 프로젝트는 v2로 성장했지만 여전히 더 쉽고, 더 좋고, 더 빠르고, 더 강력합니다. ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Create Go App 프로젝트는 v2로 성장했지만 여전히 더 쉽고, 더 좋고, 더 빠르고, 더 강력합니다.

   안녕하세요 친구! 😉 여러분과 좋은 소식을 공유하게되어 기쁩니다. 오랫동안 작업해온 Create Go App CLI 프로젝트가 마침내 메이저 버전 2로 업데이트되었습니다.
   누군가 잊어 버린 경우를 대비하여이 CLI를 사용하면 백엔드 (Go), 프런트 엔드 (JavaScript, TypeScript) 및 배포 자동화 (Ansible, Docker)가 포함 된 새로운 프로덕션 준비 프로젝트를 단 몇 초 만에 만들 수 있습니다.
"
"https://news.hada.io/topic?id=4199","인스타그램이 보여주지 않을 광고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           인스타그램이 보여주지 않을 광고

   - Signal이 페이스북/인스타의 개인 취향 데이터를 가지고 그 내용에 기반한 타겟 광고를 만들어 테스트
   ㅤ→ 정책 위반으로 광고 계정이 비활성화 됨
   - 이만큼 개인에 대해 상세한 데이터를 취급하고 있다는 이야기
   - 테스트 하려던 광고들
   ㅤ→ ""당신이 이 광고를 본 이유는, K-Pop을 좋아하는 화학 엔지니어이기 때문이에요. 베를린에 살고 계시군요. 새로 태어날 아기가 있고, 최근에 이사하셨네요. 임산부 운동을 알아보고 계신가 봐요""
   ㅤ→ ""당신이 이 광고를 본 이유는, 선생님이시고, 더 중요한건 당신의 별자리가 사자자리이고 싱글이기 때문이에요. 모스크바에 살고 계시군요. 스케치 코메디를 후원하고, 이 광고는 당신이 Drag를 한다고 생각해요.""
   ㅤ→ ""당신이 이 광고를 본 이유는, 당신이 미술사 석사 학위를 가진 GP(일반의) 이고 이혼했기 때문입니다. 런던에 살고 계시군요. 당신의 온라인 활동을 보아하니, 권투를 배우고 계시고, 새 모터사이클을 받으실건가 보네요.""

   일단 페이스북의 입장은 이렇군요 (twitter.com/martyswant/status/1389754769342861317)

   https://gizmodo.com/signal-tried-to-run-the-most-honest-facebook-ad-ca…
   에 양쪽 답변들이 정리 되어있긴 한데요. 페이스북은 ""니네 실제론 광고 실행 안했자나!"" 라고 하고, Signal 은 ""우리 했는데? 니네가 광고 리젝하고 우리 계정 비활성화 시켰자나!"" 라고 싸우고 있는 와중이긴 합니다 ㅎㅎ

   이런 타겟 내용으로 만든 티셔츠만 얘기하는 서브레딧도 있네요.
   - https://www.reddit.com/r/TargetedShirts/
   페이스북의 타겟팅은 실제로 매우 세밀합니다. 다들 그럴거라고 알고는 계시지만, 페이스북 광고를 실제로 운영해 보지 않으면 어느 정도 상세하게 타겟팅 되는지는 잘 모를 수 있습니다. 아래 옵션들을 한번 보세요.
   - https://imgur.com/a/7YVH3ch
   개인 사용자 입장에서는 기분 나쁠 수도 있지만, 광고하는 사람 입장에서는 이정도로 세밀하게 타겟팅할 수 있기 때문에 페이스북 광고 비즈니스가 훌륭한 플랫폼이기도 합니다. 페이스북 주가를 받치고 있는 원천이죠.
"
"https://news.hada.io/topic?id=4192","유튜브, 자체 비디오 트랜스코딩 칩을 제작 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       유튜브, 자체 비디오 트랜스코딩 칩을 제작 중

   - 원본 비디오를 수십가지 버전으로 변환하는 기능에 최적화된 칩 ""Argos""
   ㅤ→ 하나당 10개의 인코더 코어를 내장, 각 코어가 2160p/60fps 비디오를 실시간 인코딩 가능
   - Argos칩 두개가 내장된 PCI-E 카드 형태의 VCU - Video (trans)Coding Unit 을 개발
   ㅤ→ 기존 시스템 대비 20~33배까지 효율개선
   ㅤ→ VCU가 인텔 Skylake 시스템 보다 TCO가 뛰어나 엄청난 비용을 절약 할 것
   - 유튜브는 8K 영상을 업로드 하면 144p, 240p, 360p, 480p, 720p, 1080p, 1440p, 2160p 및 4320p 등 9가지 해상도를 만들고, 일부에 대해서는 여러개의 비디오 코덱으로 제공
   ㅤ→ 최신 기기들은 일반적으로 VP9, 그 이전 기기들은 호환성 높은 H.264
   ㅤ→ 2세대 Argos칩은 AV1 을 지원해서, 점차 AV1 으로 옮겨가는 중

   - Netflix, 안드로이드에서 AV1코덱으로 스트리밍 시작 https://news.hada.io/topic?id=1465
   - Rav1e - 빠르고 안전한 AV1 인코더 오픈소스 https://news.hada.io/topic?id=2267
"
"https://news.hada.io/topic?id=4204","신입 개발자분들이 유명해졌으면 좋겠어요.","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         신입 개발자분들이 유명해졌으면 좋겠어요.

   국내외 개발 블로그 피드를 모아서 보여주는 어썸데브블로그를 개발하신 우준혁 메이커님 이야기
"
"https://news.hada.io/topic?id=4266","Scala 3.0 릴리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Scala 3.0 릴리즈

   - 2.0 이후 8년만의 버전업
   - Macro가 대폭 변경되면서 Metaprogramming 가능
   ㅤ→ Inline, 컴파일타임용 패키지, Quoted 코드 블록, Reflection API
   - 새로운 문법들
   ㅤ→ if,while,for 등의 Quiet(조건에 괄호없는) 문법
   ㅤ→ new 키워드 생략가능
   ㅤ→ Optional Braces
   - 타입 개선
   ㅤ→ Enums, Opaque Type Aliases
   ㅤ→ Intersection & Union Types
   ㅤ→ Dependent Function Types
   ㅤ→ Polymorphic Function Types
   ㅤ→ Type lambdas
   ㅤ→ Match Types
   - 객체 지향 프로그래밍을 Re-envision
   ㅤ→ 함수형/객체지향 양쪽으로 강화
   ㅤ→ Traits가 클래스처럼 파라미터 받을수 있음
   ㅤ→ 확장을 위한 Open Class
   ㅤ→ Transparent Traits
   ㅤ→ Export 구문을 활용한 Composition over Inheritance
   ㅤ→ NPE 제거 : Explicit Nulls, Safe Initialization
"
"https://news.hada.io/topic?id=4172","MS/Google/Arm등이 Bytecode 연합에 조인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    MS/Google/Arm등이 Bytecode 연합에 조인

   - WebAssembly가 브라우저를 넘어서 사용되는 것을 목표로 만든 비영리 조직
   ㅤ→ Mozilla, Intel, Redhat, Fastly 가 초기 멤버
   - 새로 Microsoft, Arm, DFINITY Foundation, Embark Studios, Google, Shopify, University of California San Diego 가 이 조직에 참여
   - Bytecode 연합은 WebAssembly가 ""미래를 위한 코드""라고 얘기하고 있음

   - 웹어셈블리, 브라우저 밖으로 확장 가능할까? 바이트코드 동맹 뜬다 https://news.hada.io/topic?id=901
   - WebAssembly가 W3C 권고안으로 공식 발표 https://news.hada.io/topic?id=1091
   - 2020년과 이후 JavaScript의 동향 - WebAssembly https://news.hada.io/topic?id=2778
   - WebAssembly가 네트웍 프록시에 새로운 확장성을 가져오다 https://news.hada.io/topic?id=1722
   - Wasm3 - 고성능 WebAssembly 인터프리터 https://news.hada.io/topic?id=3823
"
"https://news.hada.io/topic?id=4162","2020년 미국에서 PHP 일자리 급증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2020년 미국에서 PHP 일자리 급증

   Indeed 사이트가 발표한 자료에 따르면 2020년에 미국에서 entry-level PHP 개발자 구인건이 800% 이상 증가했다고 합니다.
"
"https://news.hada.io/topic?id=4170","Simple, reliable & efficient distributed task queue in Golang","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Simple, reliable & efficient distributed task queue in Golang

   Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It's backed by Redis and is designed to be scalable yet easy to get started.
"
"https://news.hada.io/topic?id=4215","클라우드의 미래 가치 (ft. 2021 매킨지 보고서)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     클라우드의 미래 가치 (ft. 2021 매킨지 보고서)

   - 기업 내 클라우드컴퓨팅의 잠재적 가치를 정량화하고, 산업별로 자세히 분석
   ㅤ→ 2030년까지 포춘지 선정 500대 기업의 매출과 세전 영업이익(EBITDA)을 예상 수치화
   ㅤ→ 모든 분석은 3개의 데이터 가치 차원(Dimension of value) 즉, 재활성화(rejuvenate), 혁신(innovate), 선도개척 (pioneer)을 정하고 상향식 데이터 수집
   - 클라우드를 도입, 확장하려는 기업에는 좋은 인사이트를 제공하는 훌륭한 자료
"
"https://news.hada.io/topic?id=4252","Arduino IDE 2.0 베타 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Arduino IDE 2.0 베타 공개

   - 2005년부터 개발 시작. 1000개 이상의 보드와 66개언어 지원
   - 1.x 는 Java로 개발되어 에디팅/디버깅 기능이 제한적
   - 2018부터 Go로 작성된 arduino-cli가 IDE 핵심기능을 노출하면서 다른 IDE와 연결이 가능
   - 2019년에 arduino-cli 와 Theia & Electron 기반으로 새로운 IDE 개발을 시작
   - IDE 2.0 베타
   ㅤ→ 자동완성 및 VS Code 수준의 에디팅 기능
   ㅤ→ 더 빠른 컴파일
   ㅤ→ 라이브 디버거 (SAMD & Mbed 플랫폼 지원)
   ㅤ→ Theia + TypeScript(프론트) + Golang(백엔드)

   - Eclipse Theia 1.0 공개 - VS Code의 오픈소스 대체제 https://news.hada.io/topic?id=1811
"
"https://news.hada.io/topic?id=4184","Text Blaze - 텍스트 매크로 크롬 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Text Blaze - 텍스트 매크로 크롬 확장

   - 자주 입력하는 문장을 템플릿으로 저장해뒀다가 빠르게 입력해주는 크롬브라우저용 무료 확장
   - 구글 계정으로 로그인해서 저장 지원
   - 볼드/색상/밑줄 등 스타일 지원
   - 현재 시간/날짜 입력 매크로
   - 내용 확장 후 커서 위치 지정 가능
   - Form 기능으로 여러 개의 텍스트/체크박스/드롭다운등을 통해 입력 후 그 내용으로 확장하는 것도 가능
   - 다른 멤버들에게 공유 하거나, 공유 폴더로 같이 운용하는 것도 가능
"
"https://news.hada.io/topic?id=4242","Creator Economy 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Creator Economy 가이드

   - 창작자들을 위한 220+개 플랫폼 지도
   - 개인 취미에서 프로 창작자로 가기 위한 다양한 서비스들을 카테고리 별 정리
   ㅤ→ Audience Curation : Content, Audio & Chat, Event, Live Streaming
   ㅤ→ Audience Monetization : NFT & Social Token, Courses & Monetizing Knowledge, Fashion Marketplaces, Fan Interactions, Live Shopping
   ㅤ→ Vertical Platforms : Fitness, Music, Podcasting, Art & Photography, Gaming
   ㅤ→ Community Management : Tools, Membership & Donations, Link in Bio
   ㅤ→ Creator Tools : Web Builders, Audio & Video, FinTEch, Tools in a Box, CRM, Design

   저희 디스콰이엇도 정말 많이 고민하는 부분인데 좋은 자료 감사해요~! 요즘 큰 소셜미디어들의 움직임도 심상치 않은 것 같아요. 기존에 소셜미디어들의 canonical한 BM이 광고였었는데 이 트렌드가 바뀌고 있는 것 같아요. 광고 모델로 인해 생기는 사회적 문제 + 장기적인 회사 성장의 한계가 보이면서 큰 shift가 일어나고 있는 것 같네요.

   창작자들을 위한 시장은 들여다 볼수록 재미난듯 합니다.
   Link in Bio 에만 7개나 되는 서비스들이 있는데요.
   인스타그램등의 플랫폼에서 여러개의 링크들을 주루룩 나열하는게 보기도 안좋고 기능도 없으니까,
   Bio에 한개의 링크만 걸면 거기서 위의 Audience Monetization 나 Community Management 관련 다양한 링크로 보내주는 역할을 합니다.
   인스타그램 계정을 보다가, 이 계정은 왜 이렇게 운영하는거지? 싶을때 Bio 링크를 눌러보면 참 다양한 것들을 발견하게 됩니다.
   Stir 같은 도구들도 재미나구요
   - Stir - 창작자 비즈니스를 돕는 도구 https://news.hada.io/topic?id=3718
"
"https://news.hada.io/topic?id=4200","버크셔 해서웨이의 주식 가격은 현재 Nasdaq 컴퓨터가 처리하기에 너무 큼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               버크셔 해서웨이의 주식 가격은 현재 Nasdaq 컴퓨터가 처리하기에 너무 큼

   - Nasdaq 은 주식 가격을 32비트 숫자로 100분의 1 페니 까지 저장
   ㅤ→ 즉, $429,496.7296 (2^32 / 10000) 까지 저장 가능
   - 현재 버크셔 해서웨이 주식 가격은 1주에 $421,000(4.7억원)
   - 나스닥은 잠시 주식 가격 브로드캐스팅을 중단 시켰고, 이 달말까지 문제 해결을 위해 업그레이드 할 예정이라고

   [험블 파이] 책에 추가될 법한 사례 중 하나로군요.
"
"https://news.hada.io/topic?id=4195","체포됩시다! 프로젝트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              체포됩시다! 프로젝트

   일본에서 13살 학생이 무한으로 alert 팝업이 뜨는 홈페이지 링크를 공유했다가 경찰에 체포되는 일이 있었습니다.
   while (1) {
   alert(""!"");
   }
   일본에서 위와 같은 자바스크립트 코드는 범죄 취급을 받으니, 범죄를 저지르고 체포됩시다!
   어떻게 하면 체포될 수 있죠?
   - 해당 프로젝트의 gh-pages 브랜치를 포크하고, 깃허브페이지 링크를 공유하면 됩니다. 범죄생활을 만끽하세요!
   체포되지 않으면 어떻게 하죠?
   -경찰에 가서 자수하세요

   엌ㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=4238","Babel은 수백만명이 사용하는데, 왜 돈이 부족할까요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Babel은 수백만명이 사용하는데, 왜 돈이 부족할까요?

   - 2018 : Henry를 풀타임으로 고용하는 펀딩실험을 시작 (월 $11,000)
   - 2019 : 3명의 추가 컨트리뷰터를 파트타임 고용 (월 $2,000)
   - 현재 바벨은 월 1.1억회 다운로드되며 전세계에서 사용중
   - 하지만 2020년엔 도네이션이 감소
   - 지금부터 Henry 및 다른 두명에게 월 $6,000 정도를 지불하기 시작하고, 현재 기부금으로는 올해 말까지 버틸 수 있을 것
   - 전체팀을 모두 풀타임 지급하려면 $333,000 이 필요하고 현재보다 두배의 기부를 받아야 가능
   - Open Collective 또는 GitHub Sponsors 로 기부를 요청

   오픈소스와 급여 얘기라 조금 민감하기도 한데, 풀타임 기여자들의 상황에 대해서 알아 볼 수 있는 글인듯 해서 올려봅니다.
   월 $11000 이면 1200만원 인데 넘 많은거 아냐? 라는 생각이 들수도 있지만 실리콘 밸리 상황에서는 맞는거 같기도 합니다.
   해커뉴스에서 가장 많은 득표를 한 댓글(최상위에 올라온)은..
   ""$11000은 너무 많이 주는거 아냐? 난 그래서 기부하다 중단했어""라는 거네요.
   - https://news.ycombinator.com/item?id=27114718
   그리고.. 처음에 Babel을 만들었던 Sebastian McKenzie(지금은 Rome Tools를 만들고 있죠)가
   $11000 을 받는 Henry 가 2020년에 12개의 이슈 생성, 코멘트 25개 달고, 29개의 PR만 만들었다고 트윗을 해서, 한바탕 난리가 났네요.
   (해당 트윗은 지워졌습니다. 해커뉴스 댓글에만 남아있네요.)
   - Rome Tools, Inc 회사 설립 https://news.hada.io/topic?id=4193

   한 일이 적다는건 좀 그러긴하네요

   $132K면 실리콘 벨리면 많이 적은거죠.
   일단 정식 회사에 고용된 형태가 아니라 계약직으로 있는거 같은데. 그럼 보험도 없고 실리콘 회사 대부분에서 제공하는..스톡옵션이나 이런 아무런 혜택도 없죠.
   저기다가 세금 내면 사실 실리콘 벨리에서는 생활이 어려운 수준입니다.

   1년에 132k 면 실리콘밸리 치곤 크지 않긴 한데...뒤에 내용은 좀 그렇네요;;
"
"https://news.hada.io/topic?id=4169","매직더개더링의 진입장벽을 낮추는 게임디자인","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        매직더개더링의 진입장벽을 낮추는 게임디자인

   2005년 당시 매직더개더링은 신규유저가 줄어드는 문제를 겪고 있었음.
   - 기존유저는 새로운 카드를 원하지만, 새로운 카드가 추가될 수록 게임은 복잡해지기에 신규유저 유입을 막는 진입장벽도 높아짐.
   - 그래서 당시에 출시한 신제품은 복잡하지 않고 직관적인 카드들 위주로 만들어짐
   - 하지만 여전히 신규유저는 늘어나지 않음.
   RnD 부서는 게임에 세가지 종류의 복잡성(Complexity)이 있다는것을 발견
   - 이해 복잡도 : 카드 자체의 효과가 복잡한 경우.
   - 게임판 복잡도 : 카드가 다른 카드와 어떻게 상호작용을 하는지에 대한 복잡도.
   출시했던 신제품의 카드들은 단순한 효과를 갖고 있어서 이해복잡도가 낮았지만, 다른 카드와의 상호작용(다른 카드의 공격력을 올려준다던지)이 많아서 진입장벽을 낮추지 못했음.
   - 전략 복잡도 : 이 카드를 어느 순간에 사용해야 할지 판단하는데서 오는 복잡도. 게임의 실력과 직결되는 요소.
   복잡도를 낮추면 진입장벽은 줄지만 기존 유저들을 만족시키진 못함. 신규유저와 기존유저 둘 다의 니즈를 맞추기 위해, 카드의 희귀도(Rarity)를 활용
   - 신규 유저는 팩을 많이 구입하지 않기 때문에, 사용하는 카드중 커먼 등급 카드의 비율이 높음.
   (매직더개더링 카드의 희귀도는 커먼-언커먼-레어-미식 등급으로 구분됩니다. 카드팩 하나에는 커먼 10장, 언커먼 3장, 레어 또는 미식 1장이 포함돼 있습니다.)
   - 커먼카드의 이해 복잡도와 게임판 복잡도를 최대한 낮게 디자인
   - 기존 유저들이 좋아할만한 복잡한 카드들은 주로 언커먼 이상 등급에 포함
   - 전략 복잡도는 예외로, 카드를 사용하는 타이밍에 대해선 신규유저가 의식하지 못하기에 진입장벽으로 인지하지 않음.
   이와 같은 게임디자인 전략이 적중해서, 이후 매직더개더링의 판매량은 늘어나기 시작했고 몇년간 판매량 최고조를 갱신하게 됩니다.
"
"https://news.hada.io/topic?id=4264","Notion API 퍼블릭 베타 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Notion API 퍼블릭 베타 시작

   - 개인/팀 노션용 Integration 개발 가능
   ㅤ→ Page 생성/읽기/갱신
   ㅤ→ Block 추가/읽기
   ㅤ→ Database 조회/리스트
   ㅤ→ User 리스트/정보 읽기
   ㅤ→ 검색 기능
   - OAuth 이용한 접근 권한 관리
   - Zapier, Typeform, Automate 등이 이미 Integration 들 개발중

   - notion-py, python으로 된 notion의 비공식 API https://news.hada.io/topic?id=3123
   - Notion, 한국어 지원 시작 https://news.hada.io/topic?id=2626
"
"https://news.hada.io/topic?id=4202","원격 근무 리포트 2021 [51p PDF]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        원격 근무 리포트 2021 [51p PDF]

   - GitLab이 Dropbox/Qatalog 등과 함께 전세계 3900명의 원격 근무자 대상 조사
   - 52%가 원격 근무가 가능하다면 현재 위치가 아닌 회사도 갈 수 있음, 응답자중 1/3은 원격근무가 불가능하다면 새로운 롤을 찾거나 은퇴할 것
   - 34%가 리더십의 투명성이 직장에서 더 깊은 유대감을 준다고 하고, 38%는 조직내 업무에 대한 가시성이 커지면 유대감이 향상된다고
   ㅤ→ 즉, 다른 사람이 무엇을 위해 노력하고 있는지 쉽게 볼 수 있을 때 팀의 일원처럼 느끼기 더 쉬움
   - 원격근무에 대한 표면상 높은 수준의 만족도와 매일 느끼는 실제 고통 사이에는 단절이 있음
   ㅤ→ 5명중 4명이 원격 근무를 권장하고, 81%가 생산성에 만족하지만, 조직 전반의 팀워크는 어려움을 겪고 있음
   ㅤ→ 37%만이 자신의 조직이 프로젝트 전반에 걸쳐 작업을 잘 조정하고 있다고 답변
   - 회사에 주는 장점 (응답자 비율)
   ㅤ→ 생산성 증가 42%, 효율성 증가 38%, 관료주의 및 사내정치 감소 24%, 문서화 및 프로세스 개선 20%

   참고로 Gitlab은 코로나 이전 창업 초기부터 오피스 없는 완전한 원격근무를 시행하고 있는 스타트업입니다.
   가장 큰 완전 원격근무 회사이며, 원격근무로 성공한 스타트업으로 유니크한 케이스로 알고 있습니다.
   초기부터 완전 원격근무를 시행한 회사에서 나온 통계라 자료에 편향 (원격근무 이전 경험이 없으니...) 이 있을 수도 있겠네요.

   휴가 내었는데 갑자기 회사에서 연락이 오는 바람에 재택으로 업무를 보다 이런 걸 보니 기분이 묘하네요.
"
"https://news.hada.io/topic?id=4175","Awesome Captcha","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Awesome Captcha

   - 언어별 캡챠 구현체와 캡챠 회피 도구들 모음
   ㅤ→ PHP,JS,Java,Ruby 등 언어용 라이브러리
   ㅤ→ 자체 캡차 생성용 오픈소스들 : 오디오/이미지/SVG/스와이프 등
   ㅤ→ 크랙 : Torch/TensorFlow/Keras 등을 이용한 캡차 해제도구

   - reCAPTCHA 이미지 데이터셋 https://news.hada.io/topic?id=2235
   - 구글의 reCAPTCHA v3 는 어두운 부분이 있다 https://news.hada.io/topic?id=5
   - hCaptcha가 인터넷의 15% 사이트에서 사용중 https://news.hada.io/topic?id=3265
   - Cloudflare, 구글 reCAPTCHA에서 hCaptcha로 변경 https://news.hada.io/topic?id=1859
"
"https://news.hada.io/topic?id=4205","Dashblock - Turn any website into an API","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Dashblock - Turn any website into an API

   NoCode 서비스로 아래와 같은 것들을 제공
   - 실시간 데이터 수집 (Demo 영상에서는 애플 공홈에서 파는 상품들 간단하게 NoCode로 가져오는 걸 보여줌)
   - 경쟁사 모니터링
   - 송장 또는 보고서 다운로드

   ------
   NoCode 쪽 서비스들이 ProductHunt 상위권에 많이 올라오던데, 재밌는게 있어서 가져 왔습니다. 비개발자분들에게 NoCode를 하는 걸 보면 있는 API는 주변 개발자들 통해서 어찌어찌 하는데, API가 아닌 Data를 크롤링 하거나 정제해서 가져오는 걸 거의 못하시더라고요. 그래서 아무래도 한정적인 제품만 만들 수 있는데, 이런 툴이 있으면 좀 더 운신의 폭이 늘거 같네요.
"
"https://news.hada.io/topic?id=4206","IBM, 세계 최초로 2나노 테스트 칩 개발 성공했다고 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   IBM, 세계 최초로 2나노 테스트 칩 개발 성공했다고 발표

   - 손톱만한 사이즈에 500억개의 트랜지스터 장착 가능
   ㅤ→ 7나노와 비교: 45%성능 향상, 에너지 소모는 75% 낮음
   - 트랜지스터 밀도(MTr/mm², 제곱밀리미터당 백만개) 비교
   ㅤ→ IBM 2나노: 333.33(3.3억개)
   ㅤ→ TSMC 3나노: 292.21
   ㅤ→ 인텔 7나노: 237.18
   - 3-스택 GAA 설계를 적용 (삼성은 3나노에 도입, TSMC는 2나노부터 도입예정)
   - IBM은 팹리스라서 현재 삼성에서 제조를 하고 있고, 인텔과도 최근에 파트너십을 체결
   ㅤ→ 자체 제조는 2014년에 GlobalFoundries 에 매각하고 10년 파트너쉽 계약

   제조사 별로 나노를 얘기하는 단위가 달라서 헷갈린데, 기사 중간에 IBM,Intel,TSMC,Samsung 의 나노 공정별 트랜지스터 수 비교한 표가 딱 보기 좋네요.
   그리고 IBM은 본문에 나온 대로 직접 제조를 안하기 때문에.. 이게 실제로 언제 어디서 양산될 지는 두고 봐야 합니다. 말 그대로 테스트칩 개발에만 성공했다는 이야기.
"
"https://news.hada.io/topic?id=4198","Soda SQL - 오픈소스 데이터 테스트/모니터링/프로파일 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Soda SQL - 오픈소스 데이터 테스트/모니터링/프로파일 도구

   - SQL을 이용해서 데이터를 테스트 자동화하는 CLI 도구
   - 데이터 웨어하우스에서 잘못되거나, 누락되거나, 원치 않는 데이터를 찾는데 사용
   - Athena,Redshift,Hive,BigQuery,PostgreSQL,Snowflake,MSSQL 지원
   - Airflow,Prefect,Dagster,Fivetran,Matillion 등의 데이터 파이프라인 오케스트레이션 도구를 이용해서 자동화 가능
"
"https://news.hada.io/topic?id=4150","iOS 14.5 배포 - 애플워치로 잠금해제 지원, 앱 추적 투명성 기능 활성화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              iOS 14.5 배포 - 애플워치로 잠금해제 지원, 앱 추적 투명성 기능 활성화

   - 마스크 착용시에도 애플워치를 통해서 잠금 해제후 햅틱피드백
   ㅤ→ 아이폰X/애플워치3 후속모델과 호환
   - 앱 추적 투명성 기능 적용 : 앱/웹에서 사용자 데이터 추적시 허가 필요
   - Siri 음성이 여러개로 추가되어 선택 가능(영어)
   - Apple Podcasts / News 앱 개선
   - AirTag 지원
   - 5G 듀얼 SIM 지원
   - 스마트 데이터 모드 개선

   사용해보니까 편리하더라구요.
   진작 나와줬으면 좋았을 것을..

   마스크 착용 시 잠금 해제는 좀 빨리 해줬으면 좋았을텐데.. 이제라도 나와서 다행이네요.
   근데 해보니 예상만큼 빠르지는 않습니다. 약간 느린감이 있어요.
   그리고, 이래저래 이슈였던 앱 추적 투명성 기능이 이제 활성화 되었습니다.
   - Apple, iOS14의 프라이버시 관련 기능을 내년으로 연기 https://news.hada.io/topic?id=2780
   - iOS14 : IDFA 시대가 저물어 갑니다 https://news.hada.io/topic?id=2337
   - IDFA가 없어진 이후의 모바일 마케팅 가이드 https://news.hada.io/topic?id=2363
   - 페이스북, iOS14 부터 IDFA 수집하지 않을 것 https://news.hada.io/topic?id=2733
   - 페이스북, 애플 개인정보 보호 변경에 대비한 알림 메시지 테스트중 https://news.hada.io/topic?id=3673
"
"https://news.hada.io/topic?id=4251","틱톡이 Z세대를 위한 구직 도구를 테스팅 중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        틱톡이 Z세대를 위한 구직 도구를 테스팅 중

   - 바이트댄스 임원들이 Z세대들은 틱톡을 통해서 면접 요령등을 받거나 이력서 리뷰를 받는 다는 경우가 많다는 것을 보고 만들게 됨
   - 전통적인 방식의 이력서가 아닌 동영상을 통한 이력서로, 동영상을 통해서 기업 가치 혹은 자신에 대한 요약을 설명할 수 있음.
   - 앱에 통합된 것이 아니라 앱과 연결된 웹페이지를 통해서 사용할 수 있음

   틱톡이 영향력이 어마무시하네요
   기존에는 생각도 못한 부분들이 이뤄지고 있는 부분을 보고 있으면, 저도 나이를 먹은게 느껴집니다
"
"https://news.hada.io/topic?id=4212","audacity 프로젝트에 데이터 수집 및 전송 기능(telemetry)을 추가하는 PR이 등록됨","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         audacity 프로젝트에 데이터 수집 및 전송 기능(telemetry)을 추가하는 PR이 등록됨

   Google analytics를 비롯한 서드 파티 데이터 수집 서비스 이용하며,
   GDPR(유럽연합 일반 데이터 보호 규칙) 에서 개인정보로 간주되는 IP 주소의 수집기능 까지 포함된다고 합니다.
   이에 반대하는 comment 들이 뒤따르고 있습니다.
"
"https://news.hada.io/topic?id=4239","PostgreSQL을 데이터 웨어하우스로 사용하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostgreSQL을 데이터 웨어하우스로 사용하기

   데이터분석을 통한 의사결정 지원시스템 Narrative가 경험을 통해 정리한 주요 트윅들
   - 프로덕션 시스템과 같은 서버 사용하지 말 것
   - PG 12+로 업그레이드(CTE 사용하지 말 것)
   - 인덱스는 가능한 작게
   - 테이블 파티셔닝(range/list)
   - 디스크 I/O 최소화
   - 벌크 인서트 후 Vacuum
   - 병렬 쿼리 사용하기
   - 통계 샘플링을 증가시키기 (컬럼별 또는 DB 전체. 기본값 100 이지만 500)
   - 더 적은 컬럼 사용하기 (row 기반 저장이기 때문)
   * 5천만~1억로우 테이블에서는 Postgres가 훌륭하게 동작
   * 10억단위로 스케일하게 될때는 Citus 를 추천
   ㅤ→ https://www.citusdata.com : Postgres를 분산 DB로 바꿔주는 오픈소스

   경험적으로 보면 시계열 기반일때는 timescaledb 가 더 나을거라고 생각하긴 하는데, 근거할만한 자료가 없으니 조심스럽긴 하네요. 압축률, 성능 면에서는 timescaledb 가 더 낫지 않을까 조심스레 의견 남겨봅니다.

   citus와 timescaledb를 비교하면 어떨지가 궁금합니다.

   제가 알고 있기로 timescaledb 는 시계열로 파티셔닝하는 방식에 장점이 있고 citus 는 샤딩에 장점이 있어서... (그러고보니 둘을 같이 사용하는 것도 불가능하지는 않으려나요?)
"
"https://news.hada.io/topic?id=4174","My Muse List 개발 후기 (React, Spring Boot, MongoDB, Firebase Auth)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    My Muse List 개발 후기 (React, Spring Boot, MongoDB, Firebase Auth)

   https://www.mymuselist.com/
   사람들이 써주길 바라는 마음으로 쓰는 서비스 홍보글 겸 개발 후기입니다. 몇 년 전부터 기획했던 사이드 프로젝트 My Muse List를 얼마 전에 배포했습니다. 라이브 공연 영상 주소를 보관하고, 모아서 보는 걸 좋아한다면, 이 서비스를 좋아하실 수도 있습니다.
   프론트엔드는 React, 백엔드는 Java Spring Boot와 MongoDB, 회원 관리는 Firebase Authentication을 이용하여 개발했고, 배포는 아마존 Lightsail을 이용해서 우분투에 Nginx를 설치해서 배포했습니다.
   My Muse List를 써보시고 kimdatagoon@gmail.com으로 피드백 보내주시면 반영하도록 노력하겠습니다.
   감사합니다.

   우아 멋져요!
"
"https://news.hada.io/topic?id=4248","Enhancing Photorealism Enhancement","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Enhancing Photorealism Enhancement

   - 합성 이미지의 사실감을 높이기 위해 Convolutional Network를 이용하는 논문 & 발표영상
   - GTA V 게임 화면에 CityScape/Mapillary Vistats 등의 도로/도시 경관 데이터셋을 이용해서 거의 실사처럼 만들기
   ㅤ→ 데이터셋에 따라 다른 화면 느낌
   ㅤ→ 도로/풀밭/건물의 질감, 차량 의 철판/유리 느낌 등

   게임도 게임이지만.. VR에 적용된다면 정말 실제같은 느낌이 들긴 하겠네요.
"
"https://news.hada.io/topic?id=4181","Unleash - 오픈소스 피쳐 토글 서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Unleash - 오픈소스 피쳐 토글 서비스

   - 피쳐 플래그 & 토글을 중앙관리 할 수 있게 해주는 서버
   - Java, Node.js, Go, Ruby, Python, .Net 클라이언트 제공
   - 관리자 UI 제공해서 ""기능 활성화 전략""을 가능하게 함
   ㅤ→ 특정 사용자에 대해서 활성화
   ㅤ→ 사용자중 X-퍼센트에 대해서 점진적 롤아웃
   ㅤ→ 베타 사용자들에 대해서만 활성화
   ㅤ→ 특정 호스트 인스턴스에서 실행되는 어플리케이션에 대해서만 활성화
   - Boolean 플래그 대신 여러개의 변수 값 지정 가능
   - Node.js + PostgreSQL, 직접 실행 또는 Docker 이미지 제공. SaaS(유료 서비스) 별도
"
"https://news.hada.io/topic?id=4178","gRPC로 구현하고 REST API로 노출하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       gRPC로 구현하고 REST API로 노출하기

   gRPC를 사용하더라도 REST가 보편적이기 때문에 REST API를 구현해줘야 할 필요가 있다.
   예를 들어, Heroku에서는 HTTP/2 를 지원하지 않기 때문에 gRPC 를 사용할 수 없어, 어쩔 수 없이 HTTP/1.1 REST API를 노출해줘야 한다.
   gRPC로 구현하고 gRPC Gateway를 통해 REST API와 Swagger UI를 expose한 이야기.
"
"https://news.hada.io/topic?id=4165","서버리스 비용 계산기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              서버리스 비용 계산기

   - 주요 Serverless 들 : AWS Lambda, Azure Functions, Google Cloud Functions, IBM OpenWhisk 비용 계산 및 비교
   - 실행횟수, 실행시간, 메모리 사용량, Free-Tier 포함해서 계산
   - Request / Compute 당 별도 비용 및 총합
"
"https://news.hada.io/topic?id=4272","Sciter - Embeddable HTML/CSS/JS 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Sciter - Embeddable HTML/CSS/JS 엔진

   - 데스크탑 앱을 개발할 때 HTML/CSS/JS 등을 이용해서 다양한 UI를 만들수 있는 C로 된 임베딩 엔진
   ㅤ→ 5+MB : Electron 이나 Qt 등보다 1/10 크기로 앱 제작 가능
   ㅤ→ HTML5/CSS(2.1 + 3일부 모듈) 파서는 직접 구현. JS는 QuickJS 이용
   ㅤ→ Direct2D/GDI+(윈), CoreGraphics(맥), GTK/Cairo(리눅스)
   ㅤ→ DOM Inspector 제공
   ㅤ→ Delphi, Go, .NET/C#, Python, Rust, PHP 용 SDK 바인딩 제공
   - Sciter.Quark 컴파일러로 HTML/CSS/JS/이미지를 묶어서 데스크탑 앱을 생성 가능
   ㅤ→ 윈도우/맥/리눅스 : 모두 Intel / ARM 지원
   ㅤ→ Android/iOS 지원 예정
   * 지난 10년간 안티바이러스 소프트웨어들이 주로 UI엔진으로 사용 (Norton, Comodo, ESET, BitDefender..)

   예전엔 TIScript 라는 별도 스크립트 엔진을 썼었는데, QuickJS 로 바꿔서 JavaScript 사용이 가능해졌습니다.
   - Sciter uses JavaScript from now and on https://terrainformatica.com/2021/04/…
   - QuickJS Javascript Engine - 작고 빠르고 임베드 가능한 자바스크립트 엔진 https://news.hada.io/topic?id=59
"
"https://news.hada.io/topic?id=4269","개발자들을 위한 검색 엔진 - Devbook","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        개발자들을 위한 검색 엔진 - Devbook

   - 개발자들을 위한 검색 엔진(데스크탑 어플리케이션)
   - stackoverflow 검색과 개발 공식 문서를 macOS의 Spotlight 기능처럼 바로 검색 할 수 있음
   - macOS, Window, Linux 지원
   - 공식 문서는 아직 많지 않은 것 같은데, 로그를 보면 계속 추가하고 있는 것 같음.
   - 개발자들은 다양한 인터넷 플랫폼 또는 검색 엔진에서 검색을 하는데 시간을 쏟고 있음. 특히 인터넷 검색 엔진은 오직 개발자들을 위한 것이 아님.
   - 오직 개발자들을 위한 검색 엔진을 만들고 싶어서 이 앱을 만들었다고 함.

   비슷한 앱으로 Dash for MacOS라는 앱이 있습니다. 이건 유료이고 29.99 달러.
   https://kapeli.com/dash
   이건 무료인데 비슷한 기능을 하니 기대가 되는군요.

   https://zealdocs.org/
   리눅스나 윈도우에서는 무료로 쓰실수 있어요

   오 그랬군요 그건 몰랐어요. 감사합니다.

   기대가 되네요, 일단 한번 써봐야겠군요!
"
"https://news.hada.io/topic?id=4211","MinIO - 고성능 K8S 기반 객체 저장소 오픈소스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     MinIO - 고성능 K8S 기반 객체 저장소 오픈소스

   - S3 API 100% 호환
   - Go로 작성된 고속/스케일러블 저장소. 쉽게 설치가능한 단일 바이너리
   - 하이브리드 클라우드에 최적
   ㅤ→ 퍼블릭 : EKS,AKS,GKE
   ㅤ→ 엣지 : MicroK8s,K3s
   ㅤ→ 프라이빗 : Tanzu,Openshift,Rancher
   - 아파치 v2 / AGPLv3 오픈소스 커뮤니티 버전 + 유료 모델

   잘 쓰고 있습니다. azure에서는 s3 api호환이 없기 때문에 minio gateway를 써서 azure storage와 연동할 수 있는듯 하더라구요.
"
"https://news.hada.io/topic?id=4271","Rust에서 할수 없는 것들과 대체 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Rust에서 할수 없는 것들과 대체 방법

   - 상속 : Traits, ambassador crate, deref, spez crate
   - 더블 링크드 리스트와 포인터 기반 자료구조 : 직접 구현하지 말고 표준 라이브러리의 LinkedList 이용, 그래프는 petgraph crate
   - Self-referencing 타입들 : ouroboros / self_cell / one_self_cell 등의 crate
   - Global mutable state : unsafe, Mutex, OnceSell, lazy_static
   - Array 초기화 : let (두번 초기화), unsafe

   Learn Rust With Entirely Too Many Linked Lists 라는 책(문서)도 있습니다.
   https://rust-unofficial.github.io/too-many-lists/

   아... 본문에 이 책에 대한 언급이 있네요. 댓글을 섣불리 달았습니다. 혹시 이 웹사이트에서는 댓글을 삭제하는 기능은 없는건가요?

   댓글 삭제는 아이디 옆에 시간을 누르시면 그 안에서 delete/favorite/(downvote/flag) 등이 가능합니다.
   근데 놔두셔도 될 거 같아요! ㅎㅎ
"
"https://news.hada.io/topic?id=4223","Android용 공식 Clubhouse 앱 배포 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Android용 공식 Clubhouse 앱 배포 시작

   좀 늦은 감이 있지만, 이제 Android에서도 Clubhouse를 사용할 수 있게 되었습니다.
   참고로 여러 경쟁 업체들이 비슷한 서비스를 런칭했거나, 준비중에 있습니다.
   telegram : https://telegram.org/blog/voice-chats-on-steroids
   twitter : https://blog.twitter.com/en_us/topics/product/2021/spaces-is-here.html
   facebook : https://about.fb.com/news/2021/…
"
"https://news.hada.io/topic?id=4166","Replit이 WebPack에서 Vite로 변경한 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Replit이 WebPack에서 Vite로 변경한 이유

   - Replit은 브라우저상에서 협업개발을 지원하는 무료 IDE 도구
   - Create-React-App(CRA) 템플릿을 Vite로 재작성 해서 테스트
   ㅤ→ CRA 기반 파일들 생성 및 부팅전에 Vite는 개발서버까지 실행
   - Vite의 장점
   ㅤ→ Webpack/Parcel 보다 10~100배 빠른 Go 기반 esbuild 와 ESM을 이용
   ㅤ→ HMR(Hot Module Reloading)으로 변경된 모듈만 빠르게 적용 & 리렌더링 되어 프로토타이핑을 정말 빠르게 해줌

   JS 현황을 보면 기존 강자인 Webpack에 Vite가 싸움(?)을 거는 것 처럼 보였는데, 그걸 반영한 글이네요.
   - State of JS 2020 [한국어] https://news.hada.io/topic?id=3586
   - 2020 JavaScript Rising Stars https://news.hada.io/topic?id=3587
   - Vite 2.0 릴리즈 https://news.hada.io/topic?id=3768
   - Webpack 5 릴리즈 https://news.hada.io/topic?id=3004
"
"https://news.hada.io/topic?id=4255","Kobra - 머신러닝을 위한 비쥬얼 프로그래밍 언어","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Kobra - 머신러닝을 위한 비쥬얼 프로그래밍 언어

   - 스크래치 와 같은 비쥬얼 UI : 블럭을 끌어다 조합하는 방식
   - ML을 코드 작성 없이 쉽게 배우고 사용할 수 있도록 만든 도구
   - GraphQL & Dataset API 제공
   - TypeScript + React + Blockly (구글의 비쥬얼 프로그래밍 에디터용 JS라이브러리) 기반 오픈소스

   메인 개발자가 16세 고등학생 이라는게 놀랍네요. 개인 웹페이지 - https://pt5.dev/
   공교육 시스템내에 있지만 지원을 받은 형태의 마그넷 스쿨인 Tesla STEM High School 재학중
   - 미국의 마그넷스쿨 : https://m.blog.naver.com/PostView.nhn/…
"
"https://news.hada.io/topic?id=4259","Humans as a Service / Jeremias (Associate Professor and Fellow of Magdal)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Humans as a Service / Jeremias (Associate Professor and Fellow of Magdal)

   https://global.oup.com/academic/product/…&
   《플랫폼 노동은 상품이 아니다》는 옥스퍼드대학 막달렌컬리지 법학 교수인
   제레미아스 아담스 프라슬이 쓴 《Humans as a service》를 우리글로 옮긴 책이다.
   ‘as a service’는 IT 기술용어에서 따왔다. IT 분야에서는 ‘as a service’가
   클라우드로 하드웨어 자원을 서비스하는 ‘Infrastructure as a Service(IaaS)’,
   클라우드로 소프트웨어 자원을 서비스하는 ‘Software as a Service(SaaS)’
   등으로 쓰인다.
   ‘Software as a Service’의 경우 소프트웨어를 컴퓨터에 번거롭게
   설치할 필요 없이 간편하게 사용할 수 있도록 한다.
   ‘Humans as a service’는 노동법의 규제를 받지 않고 사람의
   노동력을 쉽게 사용할 수 있다는 뜻에서 플랫폼 노동을 표현한 것이다.
   이제 인간이, 인간의 노동력이 서비스되고 있는 셈이다.
   많은 것을 생각하게 하는 책입니다.
   초창기 공유 경제의 개념들이 나왔을때 정말 참신한 아이디어다라고
   생각을 했었습니다. 하지만 책을 다 읽고 나서 보니
   Pain Point를 해결하기 위해서 아이디어를 내어 만든 Startup 들이
   조금씩 사업이 확장되고 업계의 공룡이 되어 독점기업으로 가면서
   이익을 내기 위한 현란한 문구와 개념으로 위장 포장되어
   과연 누구를 위한 사업이 되는지 뒤돌아 보게 합니다.
   개발자로서 생각지 못한 일들이 그 뒤 배경에서 발생하고 있는
   악영향을을 제대로 알수 있는 계기가 되었습니다.

   꼭 플랫폼노동 뿐만 아니라 점점 재택근무 등이 정착되면서 기업이 개인을 고용하기 위해 발생하는 비용(사무공간, 사무용품, 복지 등)이 감소하면서 반대로 이 비용이 개인에게 부과되는 것도 좌시할 상황은 아닙니다.
   플랫폼노동자도 노동의 피해도 있지만 플랫폼노동을 위한 비용을 개인이 부담하고 있고 재택근무에 필요한 환경을 개인이 비용을 부담해서 구성하고 있습니다.
   저도 의도한 건 아니지만 회사에 있었으면 제공받았을 모니터, PC, 책상, 음료, 전기 등 모든 비용을 제가 부담하고 있습니다.
   점점 기업이 이윤을 위해 디지털화란 명목으로 개인에게 노동을 전과하고 비용도 부담시키고 있습니다.

   참고로 국내의 플랫폼노동 사례에 대해 잘 정리된 보고서로 [서울시 플랫폼노동 실태와 정책 연구](2020)가 있습니다.
   http://www.klsi.org/bbs/board.php?bo_table=B04&wr_id=2857
"
"https://news.hada.io/topic?id=4159","Mailchimp, 이커머스로 확장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Mailchimp, 이커머스로 확장

   - 20년된 이메일 기반 마케팅 자동화 플랫폼
   - 소규모 비즈니스를 위한 2개의 커머스 기능을 공개하고 무료로 제공
   ㅤ→ Stores : 온라인 상점 개설하고 상품판매, 세금, 배송까지 지원
   ㅤ→ Appointment : 예약 및 스케줄 관리
   - 마케팅/CRM/이메일/웹사이트/커머스/설문조사 기능등을 하나로 묶어서 제공 하는 것이 목표

   이커머스들은 마케팅 자동화 기능을 조금씩 내장하고, 마케팅 자동화 소프트웨어는 상점 기능을 내장하면서 경쟁하게 되네요.
   Shopify 는 자체 이메일 도구도 있지만, 마켓에 굉장히 많은 외부 이메일 도구들과 연결이 되어있는데 어떻게 경쟁이 될지 궁금하네요.
   이 뉴스보고 Shopify 주가는 떨어지려나? 해서 봤더니.. 이번 분기 실적이 잘나와서 11% 상승했군요. ^^;

   아마존 플랫폼의 횡포(?)가 많아서 Shopify 로 많이 빠져나가고 있다는 기사를 본 거 같아요. 그래서 실적이 잘 나오는 모양입니다.
"
"https://news.hada.io/topic?id=4263","Zulip 4.0 릴리즈 - 오픈소스 팀 챗","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Zulip 4.0 릴리즈 - 오픈소스 팀 챗

   - 이메일과 채팅을 결합한 토픽 기반 쓰레딩 형태의 팀 협업 도구
   - 모더레이션 및 퍼미션 기능 개선
   ㅤ→ 사용자 Mute 가능
   ㅤ→ Moderator Role 추가
   ㅤ→ 스트림간 토픽 이동 기능
   - GIPHY 연동
   - 코드 블록 원클릭 복사 및 Replit 같은 외부 플레이그라운드 연동
   - 유저 이름 자동완성 할때 상태정보 표시
   - 한국어 포함 17개 언어 지원
   - iOS/Android/맥/윈/리눅스 앱 및 터미널 클라이언트(베타)

   써봤는데 개인적으로 느리고 인터페이스가 시끄러운 느낌이랄까요
   기능은 좋은데 살짝 아쉬웠습니다
"
"https://news.hada.io/topic?id=4230","Lovetris - 항상 최적의 블럭을 주는 테트리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Lovetris - 항상 최적의 블럭을 주는 테트리스

   - 유명했던 Hatetris(최악의 블럭만 주는)의 반대 트윅 버전
   - AI가 전체 높이를 줄이는데 필요한 최적의 블럭을 찾아서 제안
   - Base2048 기반으로 리플레이를 저장해서 공유하고 재생가능
   - Typescript 오픈소스

   어우 행복하네요... Hateris 하다가 걸린 암을 치료받고 갑니다...

   제가 기록해본 리플레이 : ϢටญকƐඞܕɕதقາٽ௨ඈໃδ௨ദໃδ௨ชІݷϢටଝɕரڠໃυҫටตҥഡටഗࠉƐටуঅ௧ఋໃϏతටධݹयටຣݹநQໃݪݣට༱ݹ௨ටໃࡧಳഗ
"
"https://news.hada.io/topic?id=4173","크립토마이너 들이 Free CI를 죽이고 있다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       크립토마이너 들이 Free CI를 죽이고 있다

   - LayerCI, GitLab, TravisCI 등의 CI업체 들이 암호화폐 채굴 공격때문에 프리티어들을 없애고 있음
   - 특별한 코드가 아닌 한 Repo는 5개의 CI를 동시에 운용하며, 쉘스크립트 + NodeJS로 만들어진 WebDollar 를 실행
   ㅤ→ WebDollar 4월 기준 가격이 $.0005 일때 이 Repo 가 월 $77USD 씩 벌수 있음
   - 감지가 안되도록 CI 내부에 Puppeteer를 이용해서 실행하는 방법도 등장
   ㅤ→ Monero 를 월 $2.5 씩 벌수 있음. 운영자가 베트남에 있으며, 60개를 돌리면 베트남에서의 풀타임 잡 수입과 비슷
"
"https://news.hada.io/topic?id=4164","구글, 직원들 재택근무로 년 $1B(1.1조원) 넘게 절약중","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   구글, 직원들 재택근무로 년 $1B(1.1조원) 넘게 절약중

   - 온라인 결제 증가로 광고 비즈니스 호황
   - 직원들 재택 및 출장이 줄면서 비용 절감
   - 1분기에 작년대비 회사 프로모션,여행,엔터테인먼트 비용으로 $268M(3천억원)을 절감
   - 연간 기준으로는 $1B가 넘을 것으로 예상
   - 그러나 올해 말 사무실로 복귀 예정이며, 직원들간에 간격을 넓힌 하이브리드 모델을 계획 중
"
"https://news.hada.io/topic?id=4207","구글이 계획하는 사무실의 미래 모습 : 프라이버시 로봇과 풍선 벽","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  구글이 계획하는 사무실의 미래 모습 : 프라이버시 로봇과 풍선 벽

   ""Ikea가 Lego를 만난 것 처럼""
   - 판데믹 이후로 재택에 익숙해진 직원들을 위해 사무실을 재 정의
   ㅤ→ 내년에 약 공간의 10%부터 새 디자인을 시도할 것
   - 팀 Pods : 각 포드는 빈 캔버스. 의자,책상,칠판,보관 유닛이 모두 바퀴가 달려 몇시간내에 재 배치 가능
   - Campfire : 원격근무자 + 사무실근무자가 같이 회의하는 새로운 회의실. 원형으로 둘러앉아 원격 참여자를 보여주는 대형 디스플레이들이 여러개 벽면에 있어서 참여자 간에 차이 없음
   - 캠프 Charleston : 테니스코트 4개 크기의 구역에 잔디와 나무 책상이 깔린 실외 작업 공간을 구축. 오픈에어 텐트, 큰 천막엔 회의실
   ㅤ→ 런던,LA,뮌헨,뉴욕,시드니 등등의 지역에 이런 야외 작업공간을 만드는 중
   - 사무실 디자인에서 가장 바꾸기 어려운건 벽과 냉난방 시스템
   ㅤ→ 포장 및 이동 가능한 이동식 벽을 개발 중
   ㅤ→ 지퍼로 부착하고 이동가능한 직물로 된 오버헤드 에어덕트 프로토타입도 개발중. 모든 좌석에 에어 디퓨저가 있고 공기의 분사 방향이나 양을 제어 가능
   ㅤ→ 미팅에 보안이 필요할때, 바퀴달린 로봇이 주변을 센서로 인식한 뒤 불투명의 셀로판 풍선에 바람을 넣어서 벽을 만듬
   - 집중할 수 있도록 눈부심(Glare)을 없애기 위해 책상 가장자리에 붙이는 ""꽃잎(Petals)"" 이라는 잎 모양의 파티션을 개발
   - 사무실 의자 머리 받침에는 방향성 스피커를 붙여 백색소음을 내서 근처의 오디오를 음소거
   - 핫데스크는 자신의 직원증을 대면 개인 취향에 맞게 조절
   ㅤ→ 책상 높이, 모니터 높이 및 기울기 보정, 가족사진을 디스플레이에 표시. 주변 온도도 조정
   - 식당은 테이크 아웃 위주로, 스낵들은 소포장.
   - 화장실에서는 손을 댈 필요없는 센서 기반 장비를 더 많이 설치

   냉난방 쪽은 복사냉난방 기술을 사용하면 좋을 것 같기도 하네요.
   예를 들면 근래에 개발된 복사냉방 시스템으로 [콜드 튜브]라는 것이 있습니다.
   https://www.sciencetimes.co.kr/?p=220805

   HYBE(BTS 소속사)가 최근에 신사옥 건설하며 PT한 영상인데요. 공간을 유동적으로 사용한다는 면에서 비슷합니다. 새롭게 사무공간을 디자인할 때 참고하면 좋을 것 같습니다.
   https://youtu.be/zbuAIAoBbO0?t=1493

   이 내용과 관련해서 순다 피차이 CEO가 5월 5일날 직원들에게 보낸 편지
   - ""A hybrid approach to work"" https://blog.google/inside-google/life-at-google/hybrid-approach-work/
   뉴욕타임스 원 기사 및 순다 피차이 CEO 글에서 사진을 여러개 볼 수 있습니다.
   캠프파이어 형태의 원형 회의실은 나름 괜찮은거 같아요.
"
"https://news.hada.io/topic?id=4236","Screen Sizes - 애플 기기들의 화면크기 완벽 가이드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Screen Sizes - 애플 기기들의 화면크기 완벽 가이드

   - 아이폰, 아이패드, 아이팟 터치, 애플워치, 애플TV, CarPlay
   - 모델별 해상도, 지원OS버전, PPI, Aspect Ratio, Contrast Ratio, True Tone 여부, Display Type
   - Safe Area Size : Status Bar / Home Indicator 등 (상단/하단, Portrait/Landscape), Notch 와 Ear 의 크기 등
   - Widget 의 크기 : Small, Medium, Large

   오.. 이거 깔끔하네요
"
"https://news.hada.io/topic?id=4189","1년간의 TIL(Today I Learned) 기록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1년간의 TIL(Today I Learned) 기록

   - 1년전 GitHub Actions를 이용해서 TIL 인덱스 자동생성 팁을 공유했던 Simon Willison의 1년간 TIL 기록
   - 43가지 주제에 대한 148개 TIL 기록중
   - 블로그를 쓰는 건 뭔가 새로운 걸 얘기해야 할 것 같지만, TIL은 아무런 장벽없이 뭔가를 적을수 있다는 장점
   - TIL과 별도로 한주간의 기록을 적는 Weeknotes 도 작성하고 있음
   * Simon의 TIL : https://til.simonwillison.net/

   - GitHub Actions로 TIL README 인덱스 자동 생성하기 https://news.hada.io/topic?id=1936
   활발히 작성되고 있는 다른 TIL들
   - https://github.com/jbranchaud/til - 6년째 적고 있는 Josh Branchaud 의 TIL (현재 1119개)
   - https://til.hashrocket.com/ - 해쉬로켓 직원들이 같이 적는 그룹 TIL
   - https://til.codeinthehole.com/

   회사에서 함께 그룹 TIL을 하는 것도 좋아보입니다.
   일종의 wiki 역할도 하는 거 같고
"
"https://news.hada.io/topic?id=4216","트위터, 후원하기(Tip Jar)기능 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        트위터, 후원하기(Tip Jar)기능 공개

   - 프로필의 팔로우 버튼옆에 후원하기 버튼이 추가되어 다른 사용자에게 후원 가능
   ㅤ→ 현재는 영문버전에서 소수만 지원 : 크리에이터,저널리스트,전문가,NGO등
   ㅤ→ 더 많은 사용자 및 언어 확대 예정
   - 클릭시 여러 결제서비스를 통해서 팁 보내기 가능
   ㅤ→ PayPal, Venmo, Patreon, BandCamp, Cash App 등
   - 안드로이드 트위터 스페이스 내에서도 가능
   - 트위터는 일체의 수수료를 받지 않음

   제 계정에 트위터 후원하기 (Tip Jar) 기능 적용됐더군요. 설정해봤습니다. 스크린샷 첨부합니다
   https://twitter.com/lunamoth/status/1390411616605261825

   오오 꼭 영어권 사용자 아니어도 열리는게 가능한가 보군요.
   트위터 스페이스도 일찍 활성화 되신거 같던데.. 트위터의 사랑을 받고 계신듯 ㅎㅎ

   ㅎㅎ 예 신기하더군요 / 트위터 스페이스는 2월에 베타 신청 폼 열렸을때 신청하긴 했습니다

   아이콘이 지폐 겹친 모양이네요. 직관적인 느낌은 주는데 저는 왠지 또 너무 노골적? 돌직구? 같은 느낌도 들어서 묘하네요 ㅎㅎ

   예 그러고보니 그렇네요

   나열된 결제 서비스들 중 한국 사람들 끼리도 사용할 수 있는 결제 서비스가 있나요? 페이팔은 국내 결제에는 못 쓰더군요.

   네 저거 다 불가능 합니다..
   국내에서 받고자 한다면 변팔(미국 페이팔) 만들고 Payoneer 연동 하는 방법밖에 없을듯 하네요 ㅎㅎ
   따라서.. 아마도 한국에는 안 열어줄 가능성이 다분합니다.
"
"https://news.hada.io/topic?id=4277","Apple Music, Dolby Atmos 지원 공간 음향 적용 및 무손실 오디오 지원 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Apple Music, Dolby Atmos 지원 공간 음향 적용 및 무손실 오디오 지원 발표

   - 구독자들은 추가비용 없이 7천5백만곡 모든 음원을 무손실(ALAC)로 감상 가능
   ㅤ→ 16비트/44.1kHz 부터 24비트/192kHz (외장 USB DAC필요) 까지
   - 모든 AirPods과 H1/W1 칩을 갖춘 Beats 헤드폰, 최신버전 iPhone, iPad, Mac 내장 스피커로 음악 감상 시 자동으로 Dolby Atmos 트랙을 재생

   Spotify는 아직 고해상 서비스가 없으니, Tidal 과 싸우는 모양새로 가는건가요.
"
"https://news.hada.io/topic?id=4190","유용한 1줄 쉘 커맨드들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             유용한 1줄 쉘 커맨드들

   $ ps aux | convert label:@- process.png
   ㅤ→ 쉘 아웃풋을 이미지로
   $ curl ipinfo.io
   ㅤ→ 외부 IP주소
   $ git log --format='%aN' | sort -u
   ㅤ→ 컨트리뷰터 보기
   $ history | awk '{print $2}' | sort | uniq -c | sort -rn | head.
   ㅤ→ 가장 자주 쓰는 명령들 보고, alias로 추가 가능
   $ ls -d */
   ㅤ→ 디렉토리만 보기
   $ du -hs */ | sort -hr | head
   ㅤ→ 현재 폴더 하위에서 가장 큰 폴더 10개 보기
   $ ss -p
   ㅤ→ 네트웍 사용중인 앱들 리스트 보기
   $ rm -f !(test.txt).
   ㅤ→ 특정 파일 제외하고 나머지 다 지우기
   $ python3 -m http.server
   ㅤ→ 현재 폴더에서 웹서버 실행
   $ mkfifo hello; script -f hello
   ㅤ→ 터미널 세션 실시간 공유

   fzf (https://github.com/junegunn/fzf)를 사용합시다.

   HTTP Static server가 필요한 일이 꽤 있나보군요.
   서비스용이라면 아파치나 ngunx를 쓸테니 그건 아닌것 같고, 시스템 운영자에게 필요한걸까요?

   개발머신에서 산출물들(HTML, CSS, JS, WASM, ...) 간단히 테스트하고 싶을 때 저만한 도구가 없습니다.
   저거랑 npx serve 도 종종 쓰네요

   - The Art of Command Line [번역] https://news.hada.io/topic?id=137
   - 유용한 Zsh 팁들 https://news.hada.io/topic?id=3764
   - 요즘 유용한 커맨드 라인 도구 모음 https://news.hada.io/topic?id=793
   - 한줄짜리 HTTP Static Server 모음 https://news.hada.io/topic?id=1325
   - .vimrc 파일에 꼭 넣는 5줄 https://news.hada.io/topic?id=3397
"
