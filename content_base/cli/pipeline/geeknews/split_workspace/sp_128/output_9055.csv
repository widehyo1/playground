"https://news.hada.io/topic?id=19237","OCR4all - 모두를 위한all - 모두를 위한 OCR

     * 완전히 무료이고 오픈소스. 구독/유료기능/숨겨진 코드 없음
     * 까다로운 원고의 고품질 처리부터 인쇄물의 대량 전체 텍스트 인식까지 유연하게 적용 가능
     * 강력한 레이아웃 및 텍스트 어노테이션 지원
          + LAREX 편집기를 사용하여 레이아웃과 텍스트 요소에 수동으로 주석을 달거나 수정하거나 비교
     * OCR-D 에코시스템과 완전히 호환됨
     * 사용성을 염두에 둔 디자인: 코드/CLI 를 쓰지않고도 UI로 복잡한 OCR 워크플로우를 생성할 수 있음
     * 쉬운 크로스 플랫폼 개발 : OS 종류와 상관없이 Docker 와 1개의 명령으로 실행 가능

        Hacker News 의견

     * 복잡한 세분화 파이프라인은 몇 년 전에는 필요했지만 이제는 오류가 많고 모델에서 중요한 문맥을 빼앗음. 필기체로 넘어가려면 문맥이 필요함
          + 역사적 필기체를 해독하려면 전문가들은 전체 문서가 필요하다고 말할 것임
          + 문자 인식이 아닌 텍스트 인식을 끝까지 해야 함
          + CER로 모델을 평가하는 것은 좋지 않음
          + 텍스트 인식이 15년 전 기계 번역의 실수를 반복하고 있음
     * OCR4all은 초기 현대 인쇄물의 디지털 텍스트 복구와 인식을 위한 소프트웨어임
          + 복잡한 인쇄 유형과 불균일한 레이아웃이 일반 텍스트 인식 소프트웨어의 능력을 시험함
          + Calamari-OCR 기반으로 구축된 것 같음
     * OCR4all은 비기술적 사용자의 필요를 명확하고 직관적으로 다루고 있음
          + 리눅스에서 터미널을 열고 명령어를 입력하라는 지침이 있음
          + 비기술적 사용자에게 어떻게 도움이 되는지 의문임
     * Apple의 Vision Framework는 Tesseract보다 빠르고 정확한 텍스트 인식 라이브러리를 제공함
          + 거의 모든 이미지 형식을 처리할 수 있음
          + 간단한 CLI 도구와 Python 래퍼를 작성함
     * Tesseract와 LLM을 결합하여 오류를 수정하고 형식을 개선하는 것이 현재 속도/효율성/정확성의 최적점임
          + 영어 프롬프트 텍스트를 편집하여 입력 문서에 특정한 측면을 우선시할 수 있음
     * AI 지원 OCR API를 개발함
          + Tesseract와 Poppler-utils를 결합하여 문서 세그먼트를 지능적으로 추출함
          + 여러 Vision LLM 모델을 쉽게 확장할 수 있음
          + 전체 AI 에이전트 API를 Dockerized 컨테이너로 출력함
     * 이 워크플로우는 역사적 인쇄 문서를 디지털화하는 것임
          + 블랙레터 활자체로 된 오래된 공지를 보존하는 것과 관련됨
     * OCR4all은 다양한 오픈 소스 솔루션을 결합하여 자동 텍스트 인식 워크플로우를 제공함
          + OCR-D 기반으로 보이며, 이는 Tesseract, Kraken, DUP-ocropy, Calamari-OCR에 기반함
          + Transkribus의 오픈 소스 대안으로 보임
          + eScriptorium도 또 다른 대안임
     * 새로운 SOTA OCR 엔진인지 아니면 다른 알려진 엔진을 사용하는 도구인지 궁금함
          + 랜딩 페이지가 더 명확했으면 좋겠음
     * Tesseract로 대부분 해결된 줄 알았던 OCR이지만, 결과 PDF의 MRC 압축을 위한 라이브러리나 구현을 찾고 있음
          + 상업적 제품은 비용이 많이 들고, 이미지 레이어를 분리하고 압축하여 다시 결합하는 것이 어려운 문제임
"
"https://news.hada.io/topic?id=19213","주차의 예언자: 위대한 도널드 슈프에 대한 추모사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      주차의 예언자: 위대한 도널드 슈프에 대한 추모사

주차의 예언자

  위대한 도널드 슈프를 위한 추모사

     * 도널드 슈프 교수는 2월 6일에 사망하였음. 그의 연구는 주차와 도시의 정치 경제를 영원히 변화시켰음.
     * 슈프는 로스앤젤레스에서 주차를 연구의 중심으로 삼았으며, 그의 연구는 우리의 일상 생활에 큰 영향을 미쳤음.
     * 샌프란시스코는 2017년에 수요 기반 주차 요금제를 도입하였고, 하트포드와 버팔로는 오프스트리트 주차 최소 요구 사항을 폐지하였음.
     * 슈프의 아이디어는 전 세계 수천 개의 도시에서 시행되고 있으며, 이는 시작에 불과함.

  무료 주차의 높은 비용

     * 슈프의 저서 The High Cost of Free Parking 은 주차가 거의 항상 너무 저렴하다는 도발적인 주장을 담고 있음.
     * 자동차는 많은 공간을 차지하며, 대부분의 시간을 주차된 상태로 보냄.
     * 무료 주차는 '공유지의 비극'을 초래하며, 이는 주차 공간 부족으로 이어짐.
     * 슈프는 주차 공간에 가격을 매기는 것이 해결책이라고 주장하였음.

  주차 최소 요구 사항의 문제

     * 미국 도시 계획자들은 오프스트리트 주차 최소 요구 사항을 통해 주차 문제를 해결하려고 하였음.
     * 이러한 요구 사항은 개발 비용을 증가시키고, 주택의 접근성을 저해함.
     * 주차 최소 요구 사항은 자동차 의존성을 법으로 규정하며, 도시의 형태에 부정적인 영향을 미침.

  슈프의 해결책: 주차 혜택 지구

     * 슈프는 주차 수익을 지역 개선에 투자하는 주차 혜택 지구를 제안하였음.
     * 이러한 접근 방식은 지역 주민들이 주차 요금제를 지지하도록 유도하며, 주차 최소 요구 사항을 제거할 수 있게 함.

  슈프의 유산

     * 슈프의 아이디어는 전 세계적으로 확산되었으며, 많은 도시들이 주차 정책을 개혁하고 있음.
     * 슈프는 주차 문제를 해결하기 위해 젊은 세대를 양성하고, 그들의 경력을 지원하였음.
     * 그의 연구는 주차 문제를 해결하는 데 큰 기여를 하였으며, 그의 유산은 계속해서 영향을 미칠 것임.

   http://www.icj.kr/bbs/board.php?bo_table=news&wr_id=47621

   천안에서도 시청 주차장을 완전 무료에서 2시간 무료로 변경했더니 쾌적해졌다라는 뉴스를 봤었네요.

        Hacker News 의견

     * 오리건 주는 대부분의 대도시에서 주차 규제를 없앴고, 큰 문제가 없었음
          + 많은 주택 건설업자들은 여전히 시장 수요 때문에 주차 공간을 추가함
          + 주차 공간 없이 프로젝트를 진행할 수 있는 유연성이 생겨, 특히 저렴한 주택에 도움이 됨
          + Nolan Gray의 책은 도시와 관련된 흥미로운 읽을거리임
     * AWS 서비스의 혼잡 해결 가격 책정 방식을 아는 사람들이 주차와 도로 네트워크의 유사성을 이해하지 못하는 것이 안타까움
          + 잘못 관리된 주차 때문에 삶이 힘들어지고 있음
          + 주차는 더 큰 이동 네트워크의 일부이며, 미국에서는 잘못 관리되고 있음
          + Donald Shoup의 제안 중 하나는 수집된 돈을 해당 지역에 사용하라는 것임
          + 주차 공간을 잘 관리하면 지역에 아름다운 개선이 가능할 것임
     * 포틀랜드 지역으로 이사했을 때 대중교통의 편리함에 놀랐음
          + 현지인들은 대중교통을 이용하는 것을 이상하게 여김
          + 카리브해에서 왔기 때문에 포틀랜드의 대중교통이 혁신적으로 느껴졌음
     * 'The High Cost of Free Parking'을 읽고 세계를 보는 시각이 바뀌었음
          + 공급과 수요가 행동에 영향을 미친다는 것을 보여줌
          + 도시의 주차 결정에 영향을 미칠 수 있다면 이 책을 읽어보길 권장함
     * 최소 주차 요구 사항이 필요하지 않다는 의견이 있음
          + 주차 요구 사항이 제거된 도시에서는 많은 새로운 사업체가 이전에는 불법이었던 장소로 이동함
          + 주차 요구 사항에 대한 지지는 사업주나 개발자가 아닌 유권자들로부터 나옴
     * 'The High Cost of Free Parking' 대신 'Paved Paradise'를 읽어보길 권장함
          + 비슷한 내용을 더 간결하게 전달함
     * 미국은 도로 주차에 과도하게 의존하는 경향이 있음
          + 도로 주차를 없애거나 유료 주차를 도입하면 자동차 교통을 줄일 수 있음
     * 일반적인 미국 도시에서 운전자는 평균적으로 8분을 주차 공간을 찾는데 소비함
          + 이 수치가 현실적이지 않다고 생각하는 사람도 있음
     * 일부 도시들은 대안을 제공하는 것을 잊음
          + 주차장 요구 사항을 없애면 대중교통 접근성을 제공해야 함
     * 'The High Cost of Free Parking'은 훌륭한 책이며 누구에게나 추천할 만함
          + 주차와 자동차 중심 개발이 일상에 큰 영향을 미침
"
"https://news.hada.io/topic?id=19298","Valve, Team Fortress 2 게임 코드 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Valve, Team Fortress 2 게임 코드 공개

     * ValveSoftware/source-sdk-2013: 이 오픈 소스 프로젝트는 Valve의 Source 엔진을 기반으로 한 게임 개발을 위한 SDK임. Team Fortress 2와 같은 게임을 개발하는 데 사용되며, 다양한 기능과 도구를 제공함.
     * 프로젝트의 중요성: Source SDK는 게임 개발자에게 강력한 도구와 기능을 제공하여, 사용자 정의 게임 모드와 콘텐츠를 쉽게 만들 수 있게 해줌. 이는 게임 커뮤니티의 창의성을 촉진하고, 다양한 사용자 생성 콘텐츠를 가능하게 함.
     * 변경 사항: 최근 커밋에서는 Team Fortress 2 SDK가 추가되었으며, 5,255개의 파일이 변경됨. 이 변경에는 1,153,568개의 추가와 222,431개의 삭제가 포함됨.
     * 파일 구조: 다양한 파일과 디렉토리가 포함되어 있으며, 게임 개발에 필요한 다양한 스크립트와 설정 파일이 포함됨. 여기에는 게임의 그래픽, 사운드, 물리 엔진, 사용자 인터페이스 등을 다루는 파일들이 포함됨.
     * 주요 파일 및 디렉토리:
          + game: 게임의 주요 실행 파일과 라이브러리 포함
          + bin: 실행 가능한 바이너리 파일 포함
          + scripts: 게임의 스크립트와 설정 파일 포함
          + materials: 게임의 그래픽 리소스 포함
          + src: 소스 코드 파일 포함
     * 기타 정보: 이 프로젝트는 GitHub에서 공개되어 있으며, 개발자들이 자유롭게 포크하고 기여할 수 있음. 이는 오픈 소스 커뮤니티의 협업과 발전을 촉진함.

   진짜 밸브는 멋있긴 하네요.

        Hacker News 의견

     * 이 코드는 TF2 전용이며, 여전히 비공개 소스인 Source 엔진 위에 존재함. 이 코드만으로는 TF2를 새로운 플랫폼으로 포팅할 수 없으며, Source를 재구현하거나 유출된 Source 코드베이스와 결합해야 함
     * 서버 측에서 TF2를 모딩했던 사람으로서, 이는 환상적임. IDA에서 바이너리를 분석하는 데 많은 시간을 보냈는데, 이제는 GitHub을 열면 됨. 이는 커뮤니티에서 새로운 기능과 버그 수정을 가속화할 것임
     * TF2 소스 코드는 이미 두 번 유출되었으며, 커뮤니티의 지원은 여전히 거대함
     * TF2 Classic에 좋은 소식이 되길 바람
          + TF2C Discord의 발표에 따르면, TF2 Classic을 잠시 실행할 수 없을 수 있음. 이는 SDK 업데이트와 TF2 코드의 공개 릴리스 때문임
          + 포팅 작업과 Steam 릴리스를 준비 중이며, 이전 SDK 파일을 사용하려면 Source SDK Base 2013 Multiplayer를 ""previous2021"" 베타 브랜치로 전환해야 함
          + 곧 더 많은 소식을 전할 예정임
     * 게임이 ""Frog Fortress 2""로 이름이 변경된 것으로 보임
     * Valve가 오래전에 이런 조치를 취했어야 했다고 생각함. ""최종"" 축하 콘텐츠 업데이트를 출시하고, 게임을 Vulkan으로 포팅하며, 코드베이스를 오픈소스로 공개하는 것임
     * 이는 TF2의 끝의 시작인지, 시작의 끝인지 모르겠음. 이전에도 유출이 있었지만, 이는 큰 뉴스임
     * Valve가 64비트 Mac용으로 재컴파일하기 전에 이런 조치를 취한 것은 Apple을 비즈니스하기 좋은 장소로 보지 않는다는 것을 의미함
     * 누군가 HL2의 2025년 ARM64 네이티브 빌드에 대한 지침을 업데이트해주면 좋겠음
     * 기존 지침은 오래된 유출된 Source 엔진을 사용함. 이제 공식적이고 네이티브로 만들어야 할 때임
     * Valve가 풀 리퀘스트를 받기 시작할지 궁금함. 게임의 많은 버그를 수정하고 싶음. Medigun 빔이 모델과 맞지 않는 것이 10년 넘게 짜증났음
     * Valve는 계속해서 성공하고 있음. Gaben이 사망하거나 사임하는 날이 두려움. Valve가 가치 있는 후계자를 찾길 바라지만, 원래 세대가 사라진 후 회사가 길을 잃는 경우도 드물지 않음
"
"https://news.hada.io/topic?id=19301","토론토 공항 착륙 중 전복된 항공기 추락 사고","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       토론토 공항 착륙 중 전복된 항공기 추락 사고

     * 토론토 피어슨 공항에서 비행기 추락 사고 발생
          + 월요일 오후, 델타 항공의 비행기가 토론토 피어슨 국제공항에서 추락하여 뒤집히는 사고가 발생함. 이 사고로 18명이 부상을 입었음.
          + 델타 항공의 미니애폴리스에서 출발한 비행기에는 76명의 승객과 4명의 승무원이 탑승하고 있었으며, 이 중 22명은 캐나다인이었음.
     * 사고 후 대응 및 부상자 현황
          + GTAA의 데보라 플린트 사장은 신속한 대응 덕분에 사망자가 없었으며 부상도 비교적 경미했다고 밝힘.
          + 부상자 중 17명은 즉시 병원으로 이송되었고, 나머지 1명은 나중에 이송됨.
          + 온타리오의 항공 구급 서비스는 중상을 입은 어린이와 성인 2명을 병원으로 이송함.
     * 사고 원인 및 조사
          + 캐나다 교통안전위원회는 사고 조사팀을 파견하여 사고 원인을 조사 중임.
          + GTAA의 소방서장은 활주로 상태가 건조했으며 횡풍이 없었다고 밝혔으나, 다른 전문가들은 횡풍이 있었다고 지적함.
     * 사고의 여파 및 공항 운영
          + 사고로 인해 피어슨 공항의 출발 및 도착이 일시 중단되었으나, 오후 5시부터 일부 활주로에서 재개됨.
          + 다른 공항으로 비행기가 우회되었으며, 토론토 공항은 주말 동안의 폭설로 인해 많은 항공편이 지연 및 취소되었음.
     * 승객들의 반응 및 지원
          + 사고 당시 승객들은 서로를 도우며 위기를 극복하려는 모습을 보였음.
          + 델타 항공은 사고와 관련된 승객들에게 지원을 제공하고 있으며, 비행 상태를 모니터링할 것을 권장함.
     * 관련 당국 및 인물들의 반응
          + 캐나다 교통부 장관과 토론토 시장은 사고에 대한 우려를 표명하고, 신속한 대응에 감사의 뜻을 전함.
          + 여러 정치인들도 사망자가 없다는 사실에 안도감을 표명함.
"
"https://news.hada.io/topic?id=19216","젊은 부모가 자녀와의 신뢰 구축에 집중해야 하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     젊은 부모가 자녀와의 신뢰 구축에 집중해야 하는 이유

마시멜로 테스트와 육아

     * 아이가 마시멜로 하나를 즉시 먹을지, 15분을 기다려서 두 개를 받을지 실험하는 유명한 심리 실험
     * 기다릴 수 있는 아이들이 학업 성취도가 높고, 삶의 결과도 더 좋다는 결론이 널리 퍼짐
     * 하지만 이후 연구에서 단순한 자기 절제 능력만으로 설명할 수 없는 요소들이 존재함이 밝혀짐

기다림은 성격이 아니라 전략이다

     * 신뢰가 중요한 이유
          + 연구에 따르면, 안정적인 가정 환경에서 자란 아이들이 더 잘 기다리는 경향을 보임.
          + 만약 부모가 약속을 자주 어긴다면, 아이가 ""기다려 봤자 소용없다""는 전략을 학습하게 됨.
          + 기다림은 단순한 성격 특성이 아니라, 환경에 따라 학습되는 전략임.
     * 경제적 배경의 영향
          + 부유한 가정의 아이들이 더 오래 기다리는 경향이 있음.
          + 기다려도 충분한 음식이 보장된 환경에서는 기다리는 것이 쉬움.
          + 반면, 자원이 불확실한 환경에서 자란 아이들에게는 즉각적인 선택이 생존 전략이 될 수 있음.

아이들은 부모를 보고 배운다

     * 예측 가능성이 신뢰를 만든다
          + 아이들은 반복적인 루틴과 일관성을 통해 신뢰를 형성함.
          + ""5분만 기다려""라고 말한 후 실제로 지켜야 함. 그렇지 않으면 아이는 부모의 말을 믿지 않게 됨.
          + 부모가 약속을 지키면, 아이는 기다리는 것이 가치 있다고 학습함.
     * 부모의 행동이 아이에게 미치는 영향
          + 부모가 아이에게 기다리라고 한 후 자신은 조급해하는 모습을 보이면, 아이도 기다림을 배울 수 없음.
          + 가장 좋은 기다림 교육은 부모 스스로 인내하는 모습을 보여주는 것임.

문화적 차이도 존재

     * 일본에서는 아이들이 식사나 선물을 조용히 기다리는 문화가 있음.
     * 반면, 미국은 즉각적인 보상을 중시하는 문화를 가짐.
     * 이러한 문화적 차이가 마시멜로 테스트 결과에도 영향을 미침.

신뢰가 핵심이다

     * 2012년 연구에서, 아이들을 두 그룹으로 나눔.
         1. 약속이 지켜진 그룹 (크레용을 준다고 했을 때 실제로 받음)
         2. 약속이 어겨진 그룹 (크레용을 받기로 했지만 받지 못함)
     * 결과: 약속이 지켜진 그룹의 아이들이 마시멜로를 더 오래 기다림.
     * 기다림의 핵심은 자기 절제가 아니라 신뢰였음.

결론: 부모가 환경을 만든다

     * 아이들은 부모가 만든 환경 속에서 기다림을 배움.
     * 작은 행동들(약속 지키기, 일정한 루틴 유지, 일관된 태도)이 아이들의 신뢰를 형성함.
     * 아이들이 기다릴 수 있는 환경을 만드는 것이 중요하며, 이는 결국 삶의 태도에도 영향을 미침.
     * 아이들이 언젠가 자신만의 마시멜로 테스트를 통과할 수 있도록, 부모가 먼저 신뢰를 쌓아야 함.

   난 아이들: 즉시 1개 받고, 15분뒤 2개를 더 받을 전략을 짬

        Hacker News 의견

     * 일본에서는 아이들이 마시멜로 테스트를 잘 통과하지만, 선물에 대해서는 그렇지 않음. 미국 아이들은 선물에 익숙해져 있어서 기다리는 것에 더 익숙함
     * 부모의 행동 모델링이 중요함. 아이들은 부모의 행동을 보고 배움. 부모가 인내심을 잃으면 아이에게도 영향을 미침
     * ""세상에서 보고 싶은 변화가 되라""는 말이 새로운 의미를 가짐
     * 한 부모의 이론: 아이의 첫 6-7년 동안 부모가 옆에 있어야 함. 호기심을 유지시키는 것이 중요함. 다양한 문화에 관심을 가지게 하고, 언어를 배우게 하는 것이 중요함
     * 마시멜로 테스트는 즉각적인 만족을 지연할 수 있는지를 보는 실험임. 하지만 즉각적인 만족이 더 나을 수도 있음
     * 오렌지를 씻는 이유에 대한 의문. 껍질을 벗기고 먹기 때문에 씻을 필요가 없다고 생각함
     * 마시멜로 실험에 대한 의문. 사람들이 마시멜로를 좋아하는지에 대한 의문
     * 아이가 없어도 개에게 같은 개념을 적용할 수 있음. 개에게 신뢰를 주는 것이 중요함. 행동과 말이 일치해야 함
     * 문화적 차이가 부모의 역할을 결정짓는다는 의견에 대한 비판. 아이들은 부모의 행동을 그대로 배움. 스마트폰 사용이 부모와 아이 사이에 문제를 일으킬 수 있음
     * 대만에서는 아이들이 조용히 식사함. 아이패드 사용이 적음. 아이들을 과도하게 자극하지 않는 것이 중요함
     * 일관된 양육이 중요함. 부모가 신뢰할 수 있고 명확한 기대와 경계를 설정해야 함. 일관성 없는 양육은 아이에게 부정적인 영향을 미칠 수 있음

   약속에 대한 부모의 신뢰뿐 아니라 아이가 스스로 약속을 지킬 수 있게끔 만드는것도 중요하다는 이야기도 생각이 나네요.
   아이가 놀이터에서 놀다가 갑자기 ""이제 집에 가자"" 하면 떼를 쓰고 싫다고 하지만, ""이제 미끄럼틀 다섯번만 더 타고 가자""고 약속하면 아이가 스스로를 통제할 줄 알게 된다는 이야기를 들었습니다.
"
"https://news.hada.io/topic?id=19268","Raspberry Pi 5 네 대에서 Deepseek R1 Distill 8B Q40 실행","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Raspberry Pi 5 네 대에서 Deepseek R1 Distill 8B Q40 실행

     * 이 프로젝트는 Deepseek R1 Distill 8B Q40 모델을 Raspberry Pi 5 8GB 장치에서 실행하는 방법에 대한 결과를 공유함.
     * 여러 대의 Raspberry Pi를 사용하여 모델의 성능을 평가하고 예측
     * 평가 및 예측 결과
          + 2 x Raspberry Pi 5 8GB
               o 평가: 초당 7.70 토큰
               o 예측: 초당 3.54 토큰
          + 4 x Raspberry Pi 5 8GB
               o 평가: 초당 11.68 토큰
               o 예측: 초당 6.43 토큰
     * 기타 정보
          + 네트워크가 닫혀 있는 상태에서 테스트가 진행됨.
          + 여러 장치를 사용한 클러스터 환경에서의 성능을 확인함.

        Hacker News 의견

     * Raspberry Pi에서 'Deepseek R1'을 실행하는 발표는 항상 Deepseek의 증류 기술로 수정된 llama 또는 qwen을 실행하는 것과 같은 패턴을 따름
          + 데모는 500 토큰 미만에서 질문이 ""해결""되는 것을 보여줌
          + 실제 세계의 유용한 컨텍스트 길이(8-16k 토큰)에서 ""생각"" 모델을 다룰 때는 이러한 속도에 도달할 수 없음을 주의해야 함
          + 많은 채널을 가진 epyc도 약 4096 컨텍스트 길이 이후에는 2-4 t/s로 감소함
"https://news.hada.io/topic?id=19192","FLAC 1.5: 드디어 멀티스레드 인코딩 지원드디어 멀티스레드 인코딩 지원
     * £320로 4개의 Pi5를 구매할 수 있지만, 중고 12GB 3080을 찾으면 아마도 10배 이상의 토큰 속도를 얻을 수 있음

     * 여기서 흥미로운 점은 여러 컴퓨터에 걸쳐 llama 추론을 분산 방식으로 실행할 수 있다는 것임
     * Free Lossless Audio Codec(FLAC)의 1.5 업데이트에서 드디어 멀티스레드 오디오 인코딩 도입
          + 이것은 현대의 Beowulf 클러스터임
          + 기존에는 단일 스레드만 사용 가능했으나, 이제 멀티코어 CPU 활용 가능
     * 여러 Raspberry Pi가 병렬로 사용되는 방법을 이해하지 못했음. 누군가가 이 방향으로 안내해 줄 수 있기를 바람
          + flac 명령어에서 -j # 또는 --threads=# 옵션으로 스레드 개수 설정 가능
     * Mac에서 이 모델을 시도하고 싶다면, 새로운 llm-mlx 플러그인을 사용하여 다음과 같이 실행할 수 있음
          + 멀티스레드 인코딩이 지원되면서 대량의 오디오 파일을 훨씬 빠르게 변환 가능
          + brew install llm 또는 pipx install llm 또는 uv tool install llm
     * 추가 개선 사항
          + llm install llm-mlx
          + 이제 체인된 Ogg FLAC 파일도 디코딩 지원
          + llm mlx download-model mlx-community/DeepSeek-R1-Distill-Llama-8B
          + 라이브러리 안정성 향상: 버그 수정 및 빌드 시스템 업데이트 포함
          + llm -m mlx-community/DeepSeek-R1-Distill-Llama-8B 'poem about an otter'
          + libFLAC, libFLAC++, metaflac 에서 메타데이터 변경시에 기존 파일을 덮어쓰기 하는 대신 새 파일로 작성 가능
          + 방금 실행했을 때 22 토큰/초의 성능을 얻었음

     * 언제 이 모든 새로운 AI 기술을 ""apt-get install"" 할 수 있을지 궁금함
        Hacker News 의견
     * 메모리를 추가하는 것이 도움이 되는지 궁금함. 최근에 16GB RAM을 가진 Rpi 5가 출시되었음

     * Ogg FLAC 파일을 연결하여 디코딩하는 것에 대한 기대감이 있음
     * LLM을 기반으로 한 제품이 Alexa나 Google Home과 유사하게 클라우드에 연결하는 대신 로컬에서 실행되는 LLM이 필요함. 왜 아직 존재하지 않는지 또는 왜 아무도 이 작업을 하지 않는지 모르겠음
          + 일부 소프트웨어는 libFLAC/libFLAC++를 사용하여 디멀티플렉싱 및 디코딩할 때 FLAC 기반 Icecast 스트림과 제대로 작동하지 않음
"
          + 이러한 스트림은 일반적으로 Ogg로 멀티플렉싱되고 이전 Ogg 비트스트림을 닫고 새로 시작하여 메타데이터를 업데이트함
          + libFLAC을 사용하여 디멀티플렉싱 및 디코딩할 경우 스트림이 업데이트되면 무한히 멈추게 됨
          + 앱은 자체적으로 Ogg 디멀티플렉싱을 수행하고 스트림 간 디코더를 재설정해야 함
          + 연결된 Ogg FLAC은 손실 없는 인터넷 라디오 스트림을 제공하며, 아웃 오브 밴드 방법에 의존하지 않고 풍부한 인밴드 메타데이터를 포함할 수 있음
          + 인밴드 앨범 아트, 아티스트 정보, 링크 등 Vorbis 코멘트 블록에 넣을 수 있는 모든 것을 포함할 수 있음
     * FLAC 인코딩은 이미 현대 기계에서 60배 이상의 실시간 성능을 제공함
          + 전체 라이브러리를 트랜스코딩할 필요가 없다면 인코딩 설정에 더 많은 시간을 소비할 가능성이 높음
     * FLAC이 이제 RFC 9639로 게시됨
     * Windows에서 libwinpthread를 사용하는 8코어/16스레드 기계에서의 성능 테스트
          + flac -f -8 a.wav a.flac 명령어의 평균 시간은 약 13.148초
          + flac -j16 -f -8 a.wav a.flac 명령어의 평균 시간은 약 2.404초
          + 두 번째 명령어가 첫 번째 명령어보다 약 5.47배 더 빠르게 실행됨
     * 이러한 개선이 낮은 지연 시간의 FLAC 스트리밍으로 번역될 수 있을지에 대한 궁금증이 있음
"
"https://news.hada.io/topic?id=19292","미국 정전 현황 지도","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국 정전 현황 지도

     * PowerOutage.us 소개
          + PowerOutage.us는 미국 전역의 정전 상황을 추적, 기록, 집계하기 위해 만들어진 프로젝트임
          + 약 10분마다 사이트 전체의 데이터가 업데이트됨
     * 주요 기능
          + 각 주를 클릭하여 더 자세한 정보를 확인할 수 있음
          + 정전된 전기 고객 수를 주별로 제공함
     * 현재 정전 상황 (고객 수)
          + 펜실베이니아: 32,737
          + 메릴랜드: 19,518
          + 웨스트버지니아: 14,294
          + 매사추세츠: 10,311
          + 뉴저지: 9,805
     * 기타 정보
          + 데이터는 GMT+9 시간대를 기준으로 업데이트됨
          + 사이트 버전: v0.9.15
          + ©2025 - Bluefire Studios LLC

        Hacker News 의견

     * 이 사업은 매우 흥미로움. 일반 사용자에게는 간단하고 매력적이지만, API를 통해 통합된 데이터에 접근하려는 비즈니스 사용자에게는 월 $1,000의 가치가 있음
          + 이런 사업들이 많을 것 같지만, 고객층이 누구인지 모르겠음. $1,000은 많아 보이지만, 나에게는 필요하지 않음
     * 미국은 어떻게 이런 일을 하는지 궁금함. 캐나다에서는 모든 것이 분산되어 있음. 오픈 데이터는 다양한 수준(지방, 주)에서 제공되지만, 형식이 다르고 많은 정부 기관이 아무것도 공개하지 않으며, 매우 비조직적임
          + 미국의 데이터가 잘 조직된 것처럼 보이는 것은 처음이 아님. 비밀은 데이터 제공자에 있는지, 아니면 이 사이트의 창작자가 큰 혼란을 잘 조직하는 것인지 궁금함
     * 그들이 곧 전력을 회복하기를 바람. 나는 이 웹사이트 뒤에 있는 사람 중 하나임. 데이터에 관심이 있다면 언제든지 연락 주시길 바람
     * 내가 사는 곳에서는 시가 전력이 끊긴 곳을 보여주지만, 역사적인 정보는 제공하지 않음. VertiGIS에게 이 서비스를 제공하도록 비용을 지불함
          + ""퍼포먼스적으로"": 역사적인 정보가 없으면 퍼포먼스적임. 역사적인 사례가 중요한 시장임. 전력이 끊겼을 때 실시간으로 조치를 취할 수 있으면 그렇게 할 것임. 그렇지 않으면 전력이 돌아올 때까지 기다리고 재난 복구가 시작됨
          + 민주적으로 운영되는 기관의 두 번째 중요한 고려 사항은 모든 사람이 동등하게 서비스를 받는지 여부임. 그렇지 않다면 그 이유는 무엇인지 알아야 함
     * ""보안""에 대해 너무 많은 소란이 있음. 역사적인 정보가 운영 보안에 위협이 된다는 주장임. 전력이 끊긴 지금, 실시간 정보가 현재의 기회에 영향을 미치는 대상임
          + 실용적인 수준에서 나는 항상 작동하고 충분한 세분성으로 로그를 기록하는 시스템을 가지고 있음. 서비스 지역 내 위치에서의 원격 측정이 궁극적으로 더 신뢰할 수 있는 정보 수집 방법이 될 것임
     * PG&E는 개별 지역 그리드까지 세분화된 실시간 정전 지도를 게시함
     * 미국 지도는 캐나다/영국 지도와 ""정전""의 정의가 다른가? 토네이도나 허리케인에 대한 뉴스를 놓쳤다면, 미국의 정전 통계는 극단적으로 보임
     * 링크는 poweroutage.us로 연결되지만, 캐나다, 영국, EU도 다룸. 미국 사이트에서 이들을 연결하지 않는 이유가 궁금함
          + 캐나다/영국의 매우 낮은 정전 수준과 미국을 비교할 때 특히 흥미로운 데이터임
     * 이 지도를 퍼센트 기준으로 보면 정말 놀라움
          + 1천만 명 이상의 고객을 가진 주들이 몇 천 명만 전력이 끊긴 상태임
          + 생각해보면 놀라운 성과임
     * 와, 무슨 일이 있었던 것인지 궁금함. 나쁜 폭풍이 있었는지 궁금함
     * 주 경계로 색칠하는 것은 직관적이지 않고 종종 오해를 불러일으킴. Mercator 투영 비판 없이도 더 세분화된 히트맵을 주요 시각화로 사용하는 것이 좋을 것임
"
"https://news.hada.io/topic?id=19260","NASA의 소프트웨어 개발 10가지 규칙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         NASA의 소프트웨어 개발 10가지 규칙

     * NASA의 10가지 소프트웨어 개발 규칙에 대한 비판적 분석
          + 이 규칙들은 극도로 중요한 임베디드 시스템(예: 우주선 소프트웨어)을 위한 것
          + 하지만 이러한 규칙이 다른 개발 환경에서도 적절한지, 또는 다른 언어(C가 아닌 언어)에서도 적용 가능한지에 대해 논의가 필요함

1. 단순한 제어 흐름 유지 (goto, setjmp/longjmp, 재귀 금지)

     * 이 규칙은 예외 처리(setjmp()/longjmp())와 재귀를 금지함.
     * 재귀가 반드시 비효율적인 것은 아님. 적절한 방법을 사용하면 재귀도 종료를 보장할 수 있음.
     * 강제로 재귀를 루프로 변환하면 유지보수가 어려운 코드가 될 위험이 있음.

   비판:
     * 종료 보장이 중요하지만, 극단적인 제한은 가독성과 유지보수를 저해할 수 있음.
     * 무조건적인 재귀 금지는 불필요한 복잡성을 초래할 가능성이 큼.

2. 모든 루프는 명확한 상한을 가져야 함

     * 컴파일러가 루프 반복 횟수를 정적으로 분석할 수 있어야 함.
     * 그러나 단순히 상한을 설정하는 것만으로는 실제 실행 시간 보장이 어려움.
     * 재귀 깊이 제한을 두는 것이 루프 상한을 두는 것만큼 안전할 수 있음.

   비판:
     * 단순히 상한을 두는 것만으로는 현실적인 실행 가능 시간을 보장하지 못함.
     * 상한을 설정해도 너무 큰 값이라면 사실상 무한 루프와 다를 바 없음.

3. 초기화 이후 동적 메모리 할당 금지

     * 임베디드 시스템에서는 메모리가 한정적이므로 메모리 부족으로 인한 충돌을 방지하려는 목적.
     * 하지만 수동 메모리 관리보다 예측 가능한 동적 할당이 더 안전할 수도 있음.
     * 예를 들어, 실시간 가비지 컬렉터(RTGC) 를 사용하면 동적 할당도 예측 가능하게 만들 수 있음.

   비판:
     * 동적 할당 자체를 금지하는 것보다, 메모리 사용 패턴을 분석하여 안전성을 확보하는 것이 더 나은 접근 방식일 수 있음.
     * 현대적인 정적 분석 도구(SPlint 등)를 활용하면 동적 메모리 관련 오류를 사전에 감지할 수 있음.

4. 함수 크기는 A4 용지 한 장 이내로 제한 (약 60줄)

     * 함수가 너무 길면 가독성이 떨어진다는 논리.
     * 하지만 현대 개발 환경에서는 코드 폴딩 기능이 있어, 함수 길이보다 논리적 단위의 크기가 더 중요함.

   비판:
     * 물리적인 크기(줄 수)보다 논리적 복잡성을 기준으로 삼아야 함.
     * 함수를 작게 쪼개는 것 자체가 목표가 되어서는 안 됨 → 오히려 유지보수를 어렵게 만들 수도 있음.

5. 함수당 최소 두 개의 assert 문 사용

     * assert는 디버깅과 문서화에 매우 유용함.
     * 하지만 무조건적인 개수 제한은 비효율적일 수 있음.

   비판:
     * assert의 개수보다 데이터 유효성 검사가 필요한 위치를 명확히 하는 것이 중요함.
     * 모든 인자와 외부 입력을 검증하는 것이 더 실용적임.

6. 데이터 객체의 스코프 최소화

     * 지역 변수 사용을 권장하는 좋은 원칙.
     * 하지만 함수뿐만 아니라 타입과 함수의 스코프도 최소화해야 함.

   비판:
     * Ada, Pascal, JavaScript, 함수형 언어에서는 타입과 함수도 지역적으로 선언 가능 → NASA 규칙보다 더 나은 접근 방식.

7. 함수 반환 값 및 매개변수 유효성 검증 필수

     * 반환 값을 반드시 체크해야 함.
     * 하지만 모든 경우를 체크하는 것은 현실적으로 어려움.

   비판:
     * 실행 오류를 방지하려면 가능한 많은 검사가 필요하지만, 실용적인 한계를 고려해야 함.
     * 특히 C에서는 반환 값 체크가 중요하지만, 현대 언어(Java, Rust 등)에서는 타입 시스템을 활용해 더 안전하게 처리 가능.

8. 전처리기 사용 제한 (헤더 포함 및 단순 매크로만 허용)

     * 복잡한 매크로, 토큰 결합, 가변 인자 매크로(...) 금지.
     * 하지만 가변 인자 매크로는 디버깅 도구로 유용할 수 있음.

   비판:
     * 전처리기 사용을 제한하는 것보다 가독성 좋은 매크로 스타일을 권장하는 것이 바람직함.
     * #ifdef 같은 조건부 컴파일을 막으면, 플랫폼 독립적인 코드 작성이 어려워질 수 있음.

9. 포인터 사용 제한 (이중 포인터 금지, 함수 포인터 금지)

     * 함수 포인터 사용 금지 → 높은 안정성을 목표로 함.
     * 하지만 함수 포인터는 콜백, 전략 패턴, 디바이스 드라이버 등에 필수적임.

   비판:
     * 함수 포인터 없이 switch-case로 함수 선택을 강제하면 코드 가독성이 떨어지고 유지보수가 어려워짐.
     * 운영체제, 네트워크 스택, 드라이버 개발에서는 함수 포인터가 필수적임.
     * 포인터 제한보다 안전한 포인터 사용을 보장하는 방법(C++ 스마트 포인터, Rust 등)이 더 나은 해결책.

10. 모든 코드에 대해 컴파일러 경고를 최대로 설정하고, 정적 분석 도구 사용

     * 이 규칙은 매우 좋은 권장 사항.
     * 컴파일러 경고 제거 + 정적 분석 도구 사용 = 안정성 향상.

   비판:
     * NASA의 다른 규칙(예: 포인터 금지, 함수 크기 제한)은 단순히 정적 분석 도구의 한계를 극복하려는 목적이 있음.
     * 하지만 현대 정적 분석 도구는 매우 발전했으므로, 지나친 제한보다 더 정교한 분석 기법을 활용하는 것이 유용함.

   반대가 더 눈에 가는거보니
   저랑은 안 맞는 규칙인거 같네요 ㅎㅎ

   NASA뿐만 아니라 항공/자동차 등 생명이 직결되어 있는 산업군에서는 비슷한 코딩 규칙을 적용하는 경우가 많아 보이더라고요 ㅎㅎ

        Hacker News 의견

     * 원문을 읽어보면 각 항목의 목적을 설명하고 있음
     * 원문은 주로 C 언어를 대상으로 하며, C로 작성된 중요한 응용 프로그램의 신뢰성을 더 철저히 검사할 수 있도록 최적화하려고 함
     * 원저자는 자신이 무엇을 하는지 명확히 이해하고 있으며, C 코드를 검증하는 여러 방법을 설명함
     * 원문에 있는 논리는 모두 완벽하게 이해됨
          + 아마도 작은 시스템에서 C를 배웠기 때문일 것임
          + 임플란트 의료 기기를 위한 하드웨어용 C를 배웠으며, 실험실에서도 유사한 지침을 따랐음
     * 마지막 단락은 훌륭함
          + 규칙이 처음에는 엄격하게 느껴질 수 있지만, 코드의 정확성에 생명이 달려 있을 수 있는 경우를 고려해야 함
          + 자동차의 안전벨트처럼 처음에는 불편할 수 있지만, 시간이 지나면 자연스럽게 사용하게 됨
     * 이 규칙에 대한 나의 비판은 OP와는 매우 다를 것임
          + setjmp/longjmp를 옹호하는 글을 처음부터 진지하게 받아들이기 어려웠음
          + 이 패턴은 접근해본 사람이라면 누구나 명백히 문제가 있음
          + 글은 setjmp/longjmp가 예외 처리라고 주장함
          + 예외 처리는 좋다고 주장함
          + 두 번째 전제에 심각한 문제가 있음
     * 루프에 대해 최대 반복 횟수를 설정하라는 의미임
          + 10^90은 어리석고 관련이 없음
          + 이 지점 이후로 글을 읽지 않았음
     * 규칙을 비판한다면 다음과 같은 점에 초점을 맞출 것임
          + 함수 본문의 길이는 이해의 단순성과 상관관계가 없으며, 오히려 규칙이 암시하는 것과 반대일 수 있음
          + 2개의 단언은 완전히 임의적이며, 단언할 수 있는 모든 것을 단언해야 함
          + Ada, Pascal (Delphi), JavaScript, 또는 함수형 언어를 사용하는 사람들은 가능한 한 지역적으로 타입과 함수를 선언해야 함
     * JavaScript에서의 개인적인 접근 방식은 명시적으로 값을 캡처하려는 경우를 제외하고 중첩된 방식으로 함수를 정의하지 않는 것임
          + 오래된 정신 모델 때문일 수 있음
          + 성능 프로파일링에서 함수가 호출될 때마다 재정의된다고 보여졌음
          + 현대 JavaScript 인터프리터가 이렇게 작동한다고는 생각하지 않음
          + 화살표 함수 도입 이후로 깊은 최적화가 이루어졌을 것임
          + 오래된 습관은 쉽게 사라지지 않음
          + 지역 변수를 캡처하지 않는 명명된 함수는 파일/모듈 범위에 유지함
     * 다른 많은 노트는 흥미롭고 매우 세세한 부분임
          + ""기술적으로 정확한 것이 가장 좋은 정확성""이라는 방식으로 오래된 엔지니어들이 좋아함
          + NASA 규칙이 전달하려는 신중함의 일반적인 톤이 매우 좋다고 생각하며 대부분을 지지함
     * 문맥상, 이것들은 ""규칙""이라기보다는 제안된 관행임
          + 공식적인 ""규칙""은 ""NPR"" 같은 이름의 문서에 있음
          + 개발자는 이 ""규칙""을 준수하거나 무시할 의무가 없음
     * GCC는 컴파일 후 스택 사용량과 호출자-피호출자 관계를 얻을 수 있음
          + setjmp()와 longjmp()는 예외를 처리하는 나쁜 방법임
          + 청소 코드가 실행되지 않음
          + 규칙의 정신을 따르면 청소가 필요한 자원이 없어야 함
     * 주요 문제는 각 응용 프로그램에서 다르게 나타남
          + 반복 제한이 초과되거나 시작 시 할당된 고정 자원이 충분하지 않을 때 어떻게 할 것인가
     * 요즘 프로그래머들은 코드를 화면에서 읽기 때문에 종이 크기가 더 이상 관련이 없는 이유가 명확하지 않음
          + 표준 페이지와 문자 크기에 대한 반복이 있었음
          + 종이의 한계뿐만 아니라 인간의 한계 때문임
     * 재귀에 대한 규칙은 필요한 스택 공간의 정적으로 알려진 경계를 보장하기 위한 것임
          + 컴파일러에 의존한다는 비판은 맞지만, 런타임의 상한을 도출하기 위한 전제 조건임
          + 안전이 중요한 시스템에서는 보장된 응답 시간이 필요함
     * 제목은 규칙에 대한 _비판_임을 나타내야 함
     * 엄격한 타입 사용을 권장함
          + 모든 스칼라 타입에 대해 엄격한 타입 사용
          + 제국 단위와 미터법 단위를 혼합하지 않음

     제목은 규칙에 대한 _비판_임을 나타내야 함

   222

   전부 다 실시간, 임베디드 관점에서 보면 이해되고 필요한 규칙들이네요. 정적분석기가 이 규칙들을 대신해 줄 수 있을까요?

   예를들어, 동적할당을 허용했을 때 모든 사용 시나리오에서 메모리 할당에 성공한다는것을 보장할 수 있을까요?

   소프트웨어 테스트를 공부하면 항상 첫날 첫시간에 언급되는 명제들이 있죠. 그 중 하나가 ""완벽한 테스트는 불가능하다""구요.

   https://github.com/kubernetes/kubernetes/…
   Kubernetes 소스코드 중 NASA Space Shuttle 애플리케이션 소스코드 작성 방법으로 작성했다 하는 'space shuttle style' 코드 블록이 생각났네요.
   관련 HN Thread: https://news.ycombinator.com/item?id=18772873
"
"https://news.hada.io/topic?id=19252","제인 스트리트의 Figgie 카드 게임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         제인 스트리트의 Figgie 카드 게임

     * 게임 방법
          + Jane Street의 빠른 진행의 Figgie 게임은 시장과 거래의 흥미로운 요소를 시뮬레이션함
          + Jane Street에서 Figgie는 가르치고 즐기는 게임임
     * 자주 묻는 질문
          + 규칙을 확인하고 학습 모드에서 연습할 수 있음
          + 자주 묻는 질문을 읽고, 추가적인 질문이 있다면 피드백을 통해 FAQ를 업데이트할 계획임
     * Jane Street에 지원하기
          + Jane Street는 항상 새로운 인재를 찾고 있음
          + 관심이 있다면 지원 가능함
     * © 2020-2025 Jane Street Group, LLC. 모든 권리 보유
          + Jane Street와 동심원 로고는 Jane Street의 등록 상표임
          + 광고 및 쿠키 정책 | 개인정보 보호 정책
          + Jane Street는 동등한 기회 고용주임

        Hacker News 의견

     * Ross Rheingans-Yoo의 블로그 글은 포커가 거래를 가르치는 도구로서의 한계와 Figgie가 더 나은 이유에 대해 설명함
          + 그는 또한 Max Chiswick에 대한 추모글을 썼으며, 이는 그의 동료 중 한 명으로 Figgie 개발에 도움을 준 인물임
     * 이 게임을 즐기고 있음
          + 기본 전략은 카드 분포에 명백한 편향이 있을 때 목표 슈트를 추측하고 그 슈트의 카드를 사는 것임
          + 카드 분포가 고르게 되어 있다면 그 라운드를 저장하고 기본 비용을 회수하려고 함
          + 거래에 따라 신념을 업데이트하는 것이 어려움
          + 모두가 합리적인 선택을 한다고 가정하면 전략을 세울 수 있지만, 인간이 블러핑을 시도할 경우에는 방법을 모르겠음
     * 첫 거래 직업을 얻었을 때가 생각남
          + 후보자들이 다양한 기믹을 수행했으며, 거래 게임도 포함되어 있었음
          + 좋은 카드를 받았고, 필요한 두세 장을 기다리기만 하면 되었음
          + 포커는 상사들이 매일 10파운드 보조금을 주며 하게 했던 게임이었음
          + 온라인 포커의 황금기가 있었고, 여러 테이블을 동시에 열 수 있었음
     * 게임의 디자인이 흥미로움
          + 카드의 시장처럼 보이며, 올바른 슈트를 모으는 것이 목표인 것 같음
     * 게임을 완전히 이해하지 못했음
          + 속도를 강조하는 점이 마음에 들지 않음
          + 빠른 결정을 내리는 것이 금융에서 성공하는 데 필수적이지 않음
     * 돈이 걸리지 않은 단발성 게임으로는 작동하지 않을 것 같음
          + 게임이 끝날 때 가장 많은 돈을 가진 사람이 이기는 것인지 궁금함
          + 포커는 토너먼트로 해결하고, 백개먼은 매치 플레이로 해결함
          + Figgie는 포커에 더 가까운 것 같지만, 봇이나 낯선 사람과 단발성으로 플레이하는 게임으로 제시됨
     * 앱을 다운로드하여 시도해 봄
          + 다른 플레이어와 게임에 참여할 수 있는 것 같음
          + 앱 하단에 Jane Street의 채용 메시지가 있어 흥미로웠음
          + 앱의 디자인이 좋지 않음
     * 게임 선택 방식이 이상함
          + 버튼 하나로 라이브 게임에 참여하거나, 봇과 연습할 수 있으면 좋겠음
          + 사용자 이름이 이미 사용 중이라는 알림이 명확하지 않았음
     * 브라우저 버전에서 라운드 종료 시 거래 기록의 일부가 자주 손실되는지 궁금함
     * 이 게임을 좋아함
          + 실제 카드로 플레이하고 싶지만, 불균형한 슈트 설정 때문에 파티 게임으로는 어려움
          + 4분 라운드에 10개의 덱이 필요할 것 같음
          + 덱 정렬기를 만드는 것을 고려해볼 수 있음
"
"https://news.hada.io/topic?id=19318","Apple, iPhone 16e 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Apple, iPhone 16e 공개

     * A18칩과 애플이 만든 셀룰러 모뎀 C1 을 탑재
          + 모든 세대 iPhone SE 대비 최대 12시간 긴 사용시간
          + 6코어 CPU + 4코어 GPU + 16코어 뉴럴엔진
     * 15.4cm Super Retina XDR 디스플레이. 167g
     * 투인원 카메라 : 48MP 퓨전 + 12MP 2배 망원 기능 통합
     * 동작 버튼 (카메라, 손전등, 무음모드 등 다양하게 설정 가능)
     * 동영상 재생 최대 26시간, 오디오 재생 최대 90시간
     * USB-C 및 무선 충전 지원(맥세이프는 지원 안함)
     * 애플 인텔리전스 지원(한국어는 4월부터)
     * 블랙, 화이트. 128GB, 256GB, 512GB (99만, 114만, 144만)

   s25랑 256기준으로 가격도 거의 같은데 백만원이 넘는 스마트폰이 2025년에 아직도 60hz라는 게...

   iPhone 16e 발표에 대한 John Gruber의 생각과 관찰

   전 15프로맥스 쓰고 있는데 이번에 나오는게 SE 사이즈에서 홈버튼 빼고 맥세이프에, 아일랜드까지 있으면 바로 살려고 했습니다만.. 아쉽게 되었네요.

   이번 발표의 가장 큰 진전은 C1 모뎀 같은데 영상에서 자랑은 별로 안 하네요.
   애플이 5G 모뎀 개발하느라 엄청 고생도 하고 돈도 많이 들였는데 말이죠.

   정말 이건...아닌데..

   가격...하...

   맥세이프도 없고 gpu 코어 하나 없고 노치를 이가격에..?

   어우... 환율때문인지 가격이 엄청 오른 느낌이...
"
"https://news.hada.io/topic?id=19229","Show GN: PHPStan 익스텐션 개발을 위한 IDE 헬퍼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: PHPStan 익스텐션 개발을 위한 IDE 헬퍼

composer require --dev headercat/phpstan-extension-ide-helper

   PHPStan 1.0.0 부터 최신 버전(작성시점 기준 2.1.5)까지 전부 지원합니다.

  Why?

   PHPStan은 PHAR 패키지로 배포되어 대부분의 IDE, 자동완성 툴들이 PHPStan 안의 코드를 분석할 수 없는 문제가 있습니다. 단순히 PHPStan를 활용하는 수준에서는 아무런 문제가 되지 않지만, PHPStan 익스텐션을 개발할 때에는 자동완성과 PHPDoc의 도움을 받을 수 없어 큰 불편함이 있습니다.

   이를 해결하기 위해 만들었습니다.
   phpstan/phpstan-src 패키지의 코드를 클론하여 ""실제로 코드가 실행되지는 않지만, IDE가 PHPStan의 클래스와 함수를 분석할 수 있도록"" 적절한 처리를 하여 자동으로 배포까지 완료하는 깃헙 액션 워크플로를 통해 작동합니다.
"
"https://news.hada.io/topic?id=19198","Data.gov 아카이브 공개 : 미국 연방 공공 데이터 16TB 규모의 30만개 데이터셋 포함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Data.gov 아카이브 공개 : 미국 연방 공공 데이터 16TB 규모의 30만개 데이터셋 포함

     * 하버드 로스쿨 혁신 연구소가 Source Cooperative에 Data.gov 아카이브를 공개
          + Source.coop은 조직과 개인이 표준 HTTP 방법을 사용하여 데이터를 공유할 수 있는 데이터 게시 유틸리티
     * 2024~2025년 동안 수집된 미국 연방 공공 데이터셋으로 16TB 규모, 311,000개 이상의 데이터셋 포함
     * Data.gov에 새로운 데이터셋이 추가될 때마다 매일 업데이트될 예정
     * 학술 연구, 정책 결정, 공공 사용을 위한 중요한 공공 데이터셋을 보존하고 인증하기 위한 ""Data Vault 프로젝트""의 첫 번째 릴리스
          + 정부 기록 보존과 공공 정보 접근성을 높이기 위한 오랜 노력의 일환으로 구축됨
     * 도서관의 역할 강화
          + 정부 기록 보존 및 공공 정보 접근성 향상
          + 세부 메타데이터 보존과 디지털 서명 설정을 통해 연구자와 대중이 필요한 정보를 쉽게 인용하고 접근할 수 있도록 함
     * GitHub 저장소 에서 오픈 소스 도구 및 문서 제공
          + 유사한 저장소 구축 가능
          + 데이터 보존 및 접근성을 누구나 확장할 수 있도록 지원
     * 관련 프로젝트 및 지원
          + Perma.cc: 법원, 법률 저널, 로펌에서 사용하는 웹 아카이빙 도구
          + Caselaw Access Project: 미국 판례 데이터 공개 프로젝트
          + Century Scale Storage: 장기 디지털 보존 연구
          + Filecoin Foundation for the Decentralized Web, Rockefeller Brothers Fund의 지원으로 운영됨

   이 얘기의 배경이, 지금 트럼프 정부 들어서 공공데이터에서 기록들이 삭제되고 있어서 이런 행동과 뉴스가 나온것 같습니다. 기후변화, 공공의료 관련된 기록들을 삭제하고 있다더군요. 전 세계가 살짝 미쳐 돌아가고 있는듯.

   https://404media.co/archivists-work-to-identify-and-save-the-thousands…
"
"https://news.hada.io/topic?id=19188","Meta의 하이퍼스케일 인프라에 대한 개요 및 통찰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Meta의 하이퍼스케일 인프라에 대한 개요 및 통찰

     * Meta의 엔지니어링 문화는 빠른 실행, 기술 개방성, 생산 환경에서의 연구, 그리고 공유 인프라를 강조함
     * 개발자 생산성을 높이기 위해 지속적 배포를 채택하고, 더 많은 개발자가 전통적인 서비스 코드 대신 서버리스 함수를 작성할 수 있도록 함
     * 하드웨어 비용 절감을 위해 데이터센터 규모에서 하드웨어-소프트웨어 공동 설계를 활용하고, 개별 클러스터에 제한하지 않고 전 세계 데이터센터 간의 자원 할당을 자동으로 최적화
     * Meta의 AI 전략은 PyTorch에서 AI 가속기, 네트워크, Llama와 같은 ML 모델까지 전체 스택을 공동 설계

# [엔지니어링 문화]

  빠른 실행 (Move Fast)

     * Meta는 민첩성과 빠른 반복을 강조하는 ""빠른 실행"" 문화를 유지하고 있음
     * 최신 코드를 가능한 한 빨리 프로덕션에 배포하는 지속적 배포(Continuous Deployment)를 강력히 지지함
     * 제품 엔지니어들은 PHP, Python, Erlang과 같은 언어를 사용하여 상태 비저장 서버리스 함수를 작성함
     * 긴 계획 수립 과정 없이도 우선순위를 변경할 수 있으며, 반복적 실행을 통해 불확실한 문제를 해결함
     * 이러한 방식은 빠른 시장 대응과 신속한 제품 출시를 가능하게 함

  기술 개방성 (Technology Openness)

     * 내부 개방성: 모노레포(Monorepo) 접근 방식을 사용하여 모든 프로젝트의 코드를 단일 저장소에 저장함
          + 코드 검색, 재사용, 팀 간 협업이 용이함
          + 대부분의 프로젝트에서 엄격한 코드 소유권 제한이 없음, 개발자들이 자유롭게 기여할 수 있음
     * 외부 개방성: 오픈소스 하드웨어 및 소프트웨어 프로젝트를 적극적으로 공유함
          + Open Compute Project를 통해 하드웨어 디자인을 공개함
          + PyTorch, Llama, Presto, RocksDB, Cassandra 등 다양한 오픈소스 소프트웨어 프로젝트를 운영함
          + 연구 논문을 통해 인프라 기술을 공유함

  프로덕션에서의 연구 (Research in Production)

     * Meta는 전용 시스템 연구소 없이 실제 운영 환경에서 연구를 수행함
     * 프로덕션 시스템을 개발하는 팀이 직접 연구 논문을 작성하여 실제 문제를 해결하고, 대규모 운영 환경에서 검증된 솔루션을 제공함
     * 이 접근 방식은 실용적이며, 성공적인 시스템 연구의 핵심 기준을 충족함

  공통 인프라 (Common Infrastructure)

     * 개별 팀이 자유롭게 기술 스택을 선택하는 대신, 표준화와 글로벌 최적화를 우선시함
     * 하드웨어:
          + 모든 서버는 공유 서버 풀에서 할당됨
          + 비 AI 컴퓨팅 워크로드에는 단일 서버 유형(기본적으로 1개 CPU, 256GB DRAM)을 제공하여 서버 유형의 복잡성을 줄임
     * 소프트웨어:
          + 기존에는 Cassandra, HBase, ZippyDB 등 다양한 키-값 저장소를 사용했으나, 현재는 ZippyDB로 통합됨
          + 소프트웨어 배포, 설정 관리, 서비스 메쉬, 성능 테스트 등은 공통 도구로 통합됨
     * 재사용 가능한 구성 요소 선호:
          + Tectonic 파일 시스템 → ZippyDB(메타데이터 저장) → Shard Manager(데이터 샤딩 관리) → ServiceRouter(샤드 탐색 및 요청 라우팅) → Delos(고신뢰 데이터 저장소) 로 구성된 컴포넌트 재사용 체인을 구축함
          + HDFS 같은 모놀리식 시스템 대신 모듈화된 재사용 가능한 구성 요소를 사용하여 확장성을 극대화함

  문화 사례 연구: Threads 앱 개발 (Culture Case Study: The Threads App)

     * Threads 앱 개발 사례는 Meta의 엔지니어링 문화를 잘 보여줌
     * 단 5개월 만에 기술 작업을 완료하고, 2일 전 사전 공지 후 인프라 팀이 프로덕션 배포 준비를 완료함
     * 대부분의 대기업에서는 이틀 만에 프로젝트 계획서를 작성하는 것도 어려움. 하지만 Meta는 실시간 문제 해결을 위해 워룸을 구축하고 신속한 대응을 진행함
     * 결과적으로, 출시 5일 만에 1억 명의 사용자 돌파, 역사상 가장 빠르게 성장한 앱이 됨
     * Threads는 기존 인프라를 재사용하여 빠르게 확장할 수 있었음:
          + Instagram의 Python 백엔드
          + Meta의 공유 인프라 (소셜 그래프 데이터베이스, 키-값 저장소, 서버리스 플랫폼, ML 플랫폼, 모바일 앱 설정 관리 등)
     * 내부 개방성: 모노레포를 활용하여 Instagram 코드 일부를 재사용하여 개발 속도를 높임
     * 외부 개방성: ActivityPub을 활용하여 다른 앱과의 상호운용성을 목표로 함
     * 개발 경험 공유: 빠른 개발과 배포 경험을 공개적으로 공유함

# [엔드투엔드 사용자 요청 흐름 (End-to-End User Request Flow)]

     * Meta의 인프라 기술을 심층적으로 살펴보기 위해, 사용자 요청이 처리되는 전체 과정을 설명
     * Meta의 제품은 공유 서비스 인프라에서 지원되며, 여기에는 다양한 핵심 컴포넌트가 포함

  요청 라우팅 (Request Routing)

     * 동적 DNS 매핑 (Dynamic DNS Mapping)
          + 사용자가 facebook.com에 접속하면 Meta의 DNS 서버는 동적으로 **가장 가까운 PoP(Point of Presence)**의 IP 주소를 반환함
          + PoP는 소규모 엣지 데이터센터로, 사용자와 가까운 위치에서 네트워크 부하를 분산함
          + PoP는 Meta의 데이터센터와 장기적인 TCP 연결을 유지하여, TCP 연결 설정 시간을 줄이고 네트워크 성능을 향상시킴
          + 전 세계에 수백 개의 PoP가 배치되어 있어, 대부분의 사용자에게 짧은 네트워크 지연 시간을 제공함
     * 정적 콘텐츠 캐싱 (Static-Content Caching)
          + 이미지, 동영상 등 정적 콘텐츠는 PoP에서 캐싱하여 직접 제공 가능
          + 또한, Meta는 **CDN(콘텐츠 전송 네트워크)**을 운영하며, ISP(인터넷 서비스 제공업체)와 협력하여 CDN 사이트를 구축함
          + 사용자의 요청이 facebook.com/image.jpg라면, Meta는 이를 CDN109.meta.com/image.jpg로 재작성하여 가까운 CDN 사이트에서 콘텐츠를 제공함
          + 만약 CDN에 해당 콘텐츠가 없으면, PoP → 데이터센터 로드 밸런서 → 스토리지 시스템으로 요청이 전달됨
     * 동적 콘텐츠 요청 라우팅 (Dynamic-Content Request Routing)
          + 뉴스피드 같은 동적 콘텐츠 요청은 PoP에서 데이터센터로 전달됨
          + 트래픽 엔지니어링 도구가 데이터센터 용량과 네트워크 지연 시간을 고려하여 최적의 데이터센터를 선택함
          + PoP에서 데이터센터까지의 트래픽은 **Meta의 프라이빗 WAN(광역 네트워크)**을 통해 전송됨
          + 데이터센터 간 트래픽은 사용자-PoP 트래픽보다 훨씬 많으며, 이는 데이터 복제 및 마이크로서비스 간 상호작용 때문임

  인프라 토폴로지 (Infrastructure Topology)

     * Meta의 글로벌 인프라는 다양한 계층의 인프라 구성 요소로 이루어져 있음
     * 각 구성 요소는 특정 역할을 수행하며, 다음과 같은 규모로 운영됨:
          + 데이터센터 지역(Region): 전 세계에 약 10개의 데이터센터 지역이 있으며, 각 지역은 최대 100만 개의 서버를 운영할 수 있음
          + PoP(Point of Presence, 엣지 데이터센터): 약 100개 이상의 PoP가 있으며, PoP당 보통 100~1,000대의 서버를 포함함. 사용자와 가까운 위치에서 트래픽을 처리하여 지연 시간을 줄이는 역할을 함
          + CDN 사이트: 1,000개 이상의 CDN 사이트가 있으며, 보통 10대 이상의 서버를 포함하고, 일부 큰 사이트는 100대 이상의 서버를 운영함. 정적 콘텐츠(이미지, 동영상 등)를 캐싱하여 빠르게 제공함
          + 데이터센터(Datacenter): 각 데이터센터 지역에는 여러 개의 데이터센터가 위치하며, 각 데이터센터는 약 10만 개 이상의 서버를 운영할 수 있음
          + MSB(메인 스위치보드, Main Switchboard): 데이터센터 내 최대 12개의 MSB가 존재하며, 각 MSB는 1만~2만 개의 서버를 담당함. 전력 분배 역할을 하며, 데이터센터 내 주요 장애 도메인으로 작용함. MSB가 고장 나면 최대 2만 대의 서버가 다운될 수 있음
     * 엣지 네트워크:
          + PoP는 여러 인터넷 자율 시스템(AS)과 연결되며, **BGP(Border Gateway Protocol)**를 사용하여 최적의 경로를 선택함
     * 데이터센터 네트워크:
          + 서버들은 3단계 Clos 토폴로지를 사용하여 연결됨
          + 네트워크 혼잡을 방지하고, 서버 간 최대 대역폭을 제공하도록 설계됨
     * 지역 네트워크:
          + 데이터센터들은 패브릭 애그리게이터로 연결되며, WAN과 통신할 수 있도록 함
          + Fat-Tree 토폴로지를 사용하여 점진적으로 확장 가능

  요청 처리 (Request Processing)

     * 온라인 처리 (Online Processing)
          + 사용자의 요청은 로드 밸런서를 통해 **수만 개의 서버리스 프론트엔드 함수(FrontFaaS)**로 분배됨
          + 프론트엔드 함수는 여러 백엔드 서비스를 호출할 수 있으며, ML 추론 서비스(예: 광고 추천, 뉴스피드 콘텐츠 추천)를 호출할 수도 있음
          + 실행 중, 프론트엔드 함수는 이벤트 큐에 이벤트를 추가하여 **이벤트 기반 서버리스 함수(XFaaS)**가 비동기적으로 실행되도록 함
          + 프론트엔드 함수와 이벤트 기반 함수의 서버 비율은 약 5:1로 운영됨
     * 오프라인 처리 (Offline Processing)
          + 오프라인 처리 시스템은 온라인 시스템을 보조하며, 데이터 분석 및 머신러닝 훈련을 수행함
          + 프론트엔드 함수 및 백엔드 서비스는 다양한 로그 데이터를 데이터 웨어하우스에 저장
               o ML 훈련: 로그 데이터를 활용하여 머신러닝 모델을 업데이트함
               o 스트림 프로세싱: 사이트 내 가장 많이 논의되는 주제를 업데이트하여 데이터베이스 및 캐시에 저장
               o 배치 분석: Spark 및 Presto를 사용하여 친구 추천 시스템을 업데이트
               o 이벤트 기반 서버리스 함수 실행: 데이터 업데이트가 이벤트 트리거 역할을 수행하여 자동으로 서버리스 함수를 실행함

# [개발자 생산성 향상 (Boosting Developer Productivity)]

     * Meta의 공유 인프라는 개발자 생산성을 극대화하는 것을 목표로 함
     * 이를 위해 지속적 배포(Continuous Deployment)와 서버리스 함수(Serverless Functions)를 극한까지 활용하고 있음

  지속적 배포 (Continuous Deployment)

     * Meta는 코드 및 설정(Configuration) 변경 사항을 빠르게 배포할 수 있도록 최적화됨
     * 새로운 기능 및 버그 수정 사항을 즉시 배포하여 빠른 피드백과 반복적인 개선 가능
     * 설정 변경 (Configuration Changes)
          + Meta의 설정 관리 도구는 매일 10만 개 이상의 실시간 변경 사항을 프로덕션에 배포
          + 약 1만 개 이상의 서비스와 수백만 개의 서버에서 설정이 자동으로 업데이트됨
          + 로드 밸런싱, 기능 롤아웃, A/B 테스트, 과부하 방지 등 다양한 작업이 자동으로 수행됨
          + 설정 변경은 코드 변경처럼 리뷰를 거쳐 코드 저장소에 커밋되며, 변경 사항은 몇 초 내에 전체 시스템에 전파됨
     * 코드 변경 (Code Changes)
          + Meta의 배포 도구는 3만 개 이상의 배포 파이프라인을 운영하여 소프트웨어 업데이트를 관리
          + 97%의 서비스가 완전 자동화된 배포를 채택하여 수동 개입 없이 업데이트됨:
               o 55%는 **완전 지속적 배포(CD)**를 사용하여 코드 변경이 자동으로 프로덕션에 반영됨
               o 42%는 고정된 일정(일별 또는 주별)으로 자동 배포됨
          + 프론트엔드 서버리스 함수(FrontFaaS)는 50만 대 이상의 서버에서 실행되며, 1만 명 이상의 개발자가 매일 수천 개의 코드 커밋을 수행함
          + 이처럼 동적인 환경에서도 모든 서버리스 함수는 3시간마다 새로운 버전이 프로덕션에 배포됨
     * 네트워크 및 인프라 소프트웨어 업데이트
          + Meta의 **프라이빗 WAN(Private WAN)**은 여러 개의 병렬 네트워크 플레인을 유지하여, 새로운 네트워크 알고리즘을 독립적으로 테스트 가능
          + 네트워크 스위치 소프트웨어도 자주 업데이트되며, 스위치의 ""Warm Boot"" 기능을 활용하여 네트워크 트래픽을 중단하지 않고 소프트웨어를 업데이트할 수 있음
          + 자주 업데이트되는 코드와 설정 변경은 사이트 장애 위험을 증가시키므로, Meta는 테스트, 단계적 배포, 헬스 체크에 많은 투자를 진행함
               o 코드 배포 자동화를 12%에서 97%로 증가시키는 사내 캠페인을 진행
               o 모든 설정 변경에 대해 자동 Canary 테스트를 수행하여 안정성을 보장

  서버리스 함수 (Serverless Functions)

     * 서버리스 함수(또는 FaaS, Function-as-a-Service)는 개발자 생산성을 높이는 또 다른 핵심 요소
     * 전통적인 백엔드 서비스와 달리, 서버리스 함수는 상태를 저장하지 않고 단순한 함수 인터페이스를 구현함
     * 각 함수 호출은 독립적으로 실행되며, 외부 데이터베이스나 캐시 시스템을 활용하여 상태를 관리함
     * 서버리스 함수의 장점
          + 개발자는 인프라 관리 없이 제품 로직만 작성하면 됨
          + 자동으로 코드 배포 및 부하 변화에 따른 자동 확장(Auto-Scaling)이 수행됨
          + 하드웨어 낭비를 방지하고, 개발자들이 과도한 리소스를 할당할 필요가 없음
     * Meta의 서버리스 플랫폼
          + Meta의 1만 명 이상의 개발자 중, 서버리스 함수를 작성하는 개발자의 수가 전통적인 서비스 코드를 작성하는 개발자보다 50% 더 많음
          + Meta의 서버리스 개발 환경(IDE)은 소셜 그래프 데이터베이스 및 다양한 백엔드 시스템에 쉽게 접근할 수 있도록 지원하며, 지속적 통합 테스트(CI)를 제공하여 빠른 피드백을 가능하게 함
     * Meta의 서버리스 플랫폼: FrontFaaS와 XFaaS
          + FrontFaaS: PHP 기반의 프론트엔드 서버리스 함수, 50만 대 이상의 서버에서 실행됨
               o 항상 PHP 런타임을 유지하여 콜드 스타트 문제 없이 즉시 요청을 처리할 수 있음
               o 서버 부하가 낮을 때는 자동 스케일링을 통해 일부 서버를 해제하고 다른 작업에 활용함
          + XFaaS: 비동기적으로 실행되는 이벤트 기반 서버리스 함수
               o 즉각적인 응답이 필요하지 않은 백그라운드 작업을 처리함
               o 부하가 높은 작업을 피하기 위해, 실행을 지연시키거나, 글로벌 로드 밸런싱, 할당량 기반 스로틀링을 적용함
     * Meta의 서버리스 혁신
          + 2000년대 후반부터 서버리스 방식을 기본 개발 패러다임으로 사용
          + 퍼블릭 클라우드의 서버리스 플랫폼과의 차이점:
               o 퍼블릭 클라우드는 강한 격리를 위해 하나의 함수당 하나의 가상 머신을 사용
               o 반면, Meta는 하나의 Linux 프로세스에서 여러 개의 함수가 동시 실행될 수 있도록 설계하여 하드웨어 효율성을 극대화함

# [하드웨어 비용 절감 (Reducing Hardware Costs)]

     * Meta의 공유 인프라는 개발자 생산성을 높이는 것뿐만 아니라 하드웨어 비용 절감에도 중요한 역할을 함
     * 이를 위해 소프트웨어 최적화를 활용하여 하드웨어 효율성을 극대화하는 전략을 사용

  글로벌 데이터센터를 하나의 컴퓨터처럼 운영 (All Global Datacenters as a Computer)

     * 기존 클라우드 환경에서는 사용자가 직접 서비스 복제본(replica) 수, 배포 지역 등을 설정해야 했음
     * 이런 수동 관리 방식은 자원 낭비, 부하 불균형, 데이터센터 간 마이그레이션 부족 등의 문제를 야기함
     * Meta는 ""데이터센터를 하나의 컴퓨터로 운영""하는 기존 방식(DaaC, Datacenter as a Computer)에서 발전하여, ""전 세계 데이터센터를 하나의 컴퓨터처럼 운영""하는 Global-DaaC를 구현
     * Global-DaaC의 주요 특징:
          + 사용자가 단순히 글로벌 배포 요청만 하면, 인프라가 자동으로 최적의 복제본 수, 배포 지역, 하드웨어 유형, 트래픽 라우팅을 결정함
          + 필요에 따라 서비스의 위치를 변경하며, 공급 변화 및 부하 변화에 적응 가능
          + 퍼블릭 클라우드와 달리, Meta는 모든 애플리케이션을 자체적으로 운영하므로 더 유연하게 워크로드 이동 가능
     * Global-DaaC 구현 방식
          + 글로벌, 지역, 개별 서버 수준에서 자원 할당을 자동화:
               o 글로벌 용량 관리 도구: RPC 트레이싱을 활용하여 서비스 간 의존성을 분석하고, **혼합 정수 프로그래밍(MIP)**을 통해 최적의 용량 배분을 결정
               o 지역 용량 관리 도구: 데이터센터별 서버 자원을 할당하여 가상 클러스터(Virtual Cluster)를 형성
               o 컨테이너 관리 도구: 가상 클러스터 내 컨테이너를 배치하며, 여러 데이터센터에 분산 배치하여 내결함성(Fault Tolerance) 확보
               o 커널 관리 기법: 컨테이너 간 메모리 및 I/O 자원을 적절히 공유하고 격리함
     * Global-DaaC의 적용 사례
          + 데이터베이스 및 상태 저장 서비스:
               o 각 컨테이너는 여러 데이터 샤드(shard)를 호스팅하여 효율성을 극대화
               o **Global Service Placer(GSP)**는 최적의 샤드 복제본 수 및 배치 지역을 결정
               o 샤딩 프레임워크가 이를 기반으로 샤드를 컨테이너에 할당하고 동적으로 마이그레이션함
          + 머신러닝(ML) 워크로드:
               o ML 추론(Inference) 작업은 데이터 샤드처럼 모델 복제본을 관리
               o ML 훈련(Training)은 데이터와 GPU가 동일한 데이터센터에 배치되어야 함
               o 글로벌 GPU 용량 할당을 받고, ML 훈련 스케줄러가 최적의 데이터 복제 및 GPU 배치를 수행함

  하드웨어-소프트웨어 공동 설계 (Hardware and Software Co-Design)

     * 단일 서버 수준에서 하드웨어-소프트웨어 공동 설계(Co-Design)를 적용하는 것은 일반적이지만, Meta는 이를 글로벌 규모로 확장하여 저비용 하드웨어의 한계를 소프트웨어 최적화를 통해 극복함
     * 저비용 장애 내성 (Low-Cost Fault Tolerance)
          + 퍼블릭 클라우드는 가용성이 높은 하드웨어를 제공하지만, Meta는 소프트웨어를 통해 장애를 극복하는 방식을 채택하여 더 저렴한 하드웨어를 활용
          + 주요 차이점:
               o 퍼블릭 클라우드의 서버 랙(Rack)은 듀얼 전원 공급 장치 및 듀얼 ToR(Top-of-Rack) 스위치를 사용하지만, Meta는 단일 전원 및 단일 ToR 스위치 사용
               o 퍼블릭 클라우드의 가상 머신(VM)은 네트워크 연결된 블록 스토리지를 사용하여 라이브 마이그레이션 가능, 반면 Meta의 컨테이너는 저비용 로컬 SSD를 사용
          + 소프트웨어 기반 장애 극복 전략:
               o 리소스 할당 도구: 서비스의 컨테이너와 데이터 샤드를 데이터센터 내 다른 장애 도메인으로 분산
               o 협력 프로토콜: 애플리케이션이 컨테이너의 라이프사이클 관리에 개입할 수 있도록 하여, 데이터 샤드 복제본이 동시에 중단되지 않도록 보호
               o 다중 데이터센터 내구성 보장: 한 지역 전체가 중단되더라도 서비스가 유지되도록 설계되었으며, 정기적으로 실전 테스트를 수행하여 신뢰성을 검증
     * 라우팅 프록시 비용 절감 (Eliminating Routing Proxy Costs)
          + 기존 서비스 메시는 **사이드카 프록시(Sidecar Proxy)**를 사용하여 RPC 요청을 라우팅하지만, Meta는 99%의 RPC 요청을 직접 클라이언트-서버 라우팅 방식으로 처리
          + 이 방법을 통해 약 10만 대의 프록시 서버를 절약할 수 있음
          + 단, 라우팅 라이브러리를 1만 개 이상의 서비스에 컴파일하여 배포해야 하는 과제가 존재하지만, Meta의 소프트웨어 배포 및 설정 관리 도구를 통해 이를 해결함
     * 계층형 스토리지 및 로컬 SSD 활용 (Tiered Storage and Local SSDs)
          + 데이터 접근 빈도와 지연 시간 요구 사항에 따라 스토리지를 구분하여 비용 효율성을 극대화:
               o 핫 데이터(Hot Data): 메모리 및 SSD에 저장 (예: 소셜 그래프 데이터베이스)
               o 웜 데이터(Warm Data): HDD 기반의 분산 파일 시스템에 저장 (예: 동영상, 이미지, 로그 데이터)
               o 콜드 데이터(Cold Data): 대용량 HDD 서버에 저장 (예: 오래된 고해상도 동영상)
                    # 저전력 모드로 유지하여 비용 절감
          + 로컬 SSD 활용:
               o 일부 워크로드는 공유 원격 스토리지(Remote Storage)보다 로컬 SSD가 더 나은 성능을 제공
               o 하지만, 불균형한 부하 분배로 인해 SSD 활용도가 낮아질 위험 존재
               o Meta의 공통 샤딩 프레임워크를 사용하여 불균형 문제 해결 및 SSD 효율성 극대화

  자체 하드웨어 설계 (In-House Hardware Design)

     * Meta는 비용 및 전력 효율성을 위해 데이터센터, 서버, 네트워크 스위치, AI 칩을 자체 설계함
     * 전력은 데이터센터에서 가장 제한적인 자원이므로, 전력 사용량을 최적화하는 자동화 도구를 운영
     * 하드웨어-소프트웨어 공동 설계를 통해 비용 및 전력 절감:
          + AI 칩의 SRAM 사용 최적화
          + 데이터센터에서 압축 냉각 장치 제거
     * 네트워크 스위치와 소프트웨어도 자체 개발하여 정기적인 업데이트가 가능하며, 대부분의 하드웨어 디자인을 Open Compute Project를 통해 오픈소스로 공유함

# [확장 가능한 시스템 설계 (Designing Scalable Systems)]

     * 하이퍼스케일 인프라에서는 확장 가능한 시스템 설계가 핵심적인 요소임
     * 인터넷 환경에서 설계된 **분산 시스템(BGP, BitTorrent, DHT 등)**은 확장성이 뛰어나지만, 데이터센터 환경에서는 중앙 집중형 컨트롤러가 더 높은 확장성과 효율성을 제공할 수 있음

  분산형 컨트롤러 폐지 (Deprecating Decentralized Controllers)

     * Meta는 기존의 분산형 컨트롤러에서 중앙 집중형 컨트롤러로 전환하는 방향을 선택함
     * 예외적으로 네트워크 스위치는 BGP를 유지하지만, 트래픽 혼잡 또는 링크 장애 발생 시 중앙 컨트롤러가 경로를 재설정할 수 있도록 설계됨
     * 중앙 집중형 컨트롤러는 더 나은 부하 분산 및 빠른 장애 대응이 가능하며, 데이터센터 환경에서 더 적합한 방식임

  기존 분산형 시스템을 중앙 집중형으로 전환한 사례

     * 프라이빗 WAN(Private WAN)
          + 기존에는 RSVP-TE(분산형 경로 설정)를 사용했으나, 중앙 컨트롤러 기반 시스템으로 전환
          + 최적의 트래픽 경로를 자동으로 계산하고, 장애 발생 시 백업 경로를 사전 설정하여 빠른 복구 가능
     * 키-값 저장소(Key-Value Store)
          + 기존 DHT(분산 해시 테이블) 기반 멀티홉 라우팅을 사용하던 방식에서 중앙 컨트롤러 기반 샤딩 프레임워크로 변경
          + 중앙 컨트롤러가 샤드(Shard) 재배치를 동적으로 조정하여 부하 균형을 최적화
     * 대용량 데이터 분배
          + 기존에는 **BitTorrent(분산형 P2P 다운로드)**를 사용했으나, Meta의 Owl이라는 중앙 집중형 분배 시스템으로 전환
          + 데이터 다운로드 경로를 중앙에서 결정하여 훨씬 빠른 다운로드 속도 제공
     * 소규모 메타데이터 분배
          + 초기에는 **3계층 분산 트리 구조(Java 기반)**를 사용했으나, 확장성 문제로 P2P 기반 트리 구조로 변경
          + 하지만 일부 노드의 불안정한 성능이 전체 성능을 저하시켜, 최종적으로 고성능 C++ 기반 중앙 집중형 프록시 서버 아키텍처로 회귀

  사례 연구: 확장 가능한 서비스 메쉬 (Scalable Service Mesh)

   Meta는 ServiceRouter라는 자체 **서비스 메쉬(Service Mesh)**를 운영하며,
   이 시스템을 통해 확장 가능한 중앙 집중형 아키텍처의 효과를 입증함.
     * 기존 서비스 메쉬 아키텍처의 문제점
          + 일반적인 서비스 메쉬는 각 서비스 프로세스가 L7 사이드카 프록시(Sidecar Proxy)를 통해 RPC 요청을 라우팅함
          + 하지만 하이퍼스케일 환경에서는 중앙 컨트롤러가 수백만 개의 사이드카 프록시를 직접 관리하는 것이 비효율적
          + Meta는 사이드카 프록시 방식 대신, 서비스 자체가 라우팅을 처리하는 구조로 변경
     * Meta의 ServiceRouter 아키텍처
          + 라우팅 메타데이터는 중앙 컨트롤러에서 생성하지만, 각 L7 라우터는 자체적으로 라우팅 테이블을 구성
          + Paxos 기반 데이터베이스(RIB, Routing Information Base)를 사용하여 확장성을 확보
               o 컨트롤러를 샤딩(Sharding)하여 부하를 분산하고, 특정 서비스에 대한 라우팅 테이블을 여러 컨트롤러가 병렬로 계산 가능
          + 배포 계층(Distribution Layer)은 수천 개의 RIB 복제본을 활용하여, 수백만 개의 L7 라우터에서 읽기 요청을 처리
          + 최종적으로, 각 L7 라우터는 중앙 컨트롤러의 직접 개입 없이 독립적으로 구성 가능
     * ServiceRouter의 확장성 확보 방법
         1. 상태 비저장(Stateless) 컨트롤러 채택: 컨트롤러가 특정 라우터를 직접 관리하지 않고, 단순히 전역적인 라우팅 정보를 유지
         2. 컨트롤러 샤딩(Sharding): 여러 컨트롤러가 서로 독립적으로 운영되며, 서로 다른 서비스의 라우팅 정보를 병렬로 처리 가능
         3. 비필수 기능 제거: 개별 L7 라우터 관리 기능을 컨트롤러에서 제거하고, 각 라우터가 자체적으로 관리하도록 설계
     * 결과 및 교훈
          + 중앙 집중형 컨트롤러와 분산형 데이터 플레인(Data Plane)을 결합한 아키텍처가 최적의 확장성 제공
          + 불필요한 사이드카 프록시 제거를 통해 운영 비용 및 성능 최적화
          + 전략적인 샤딩 및 상태 비저장 설계를 통해 수백만 개의 서비스 라우팅을 효과적으로 관리 가능

# [미래 전망 (Future Directions)]

     * Meta의 하이퍼스케일 인프라는 매우 복잡하지만, 본 문서에서는 핵심적인 기술적 인사이트를 요약하여 제공
     * 마지막으로, 하이퍼스케일 인프라의 미래 트렌드에 대한 전망을 공유

  AI (인공지능)

     * AI 워크로드는 현재 데이터센터에서 가장 큰 비중을 차지하는 워크로드가 되었음
     * 2030년 이전에는 데이터센터 전력 소비의 절반 이상이 AI 워크로드에 사용될 것으로 예상
     * AI는 고성능 네트워크 및 높은 자원 소모량 때문에 기존 인프라 구조를 근본적으로 변화시킬 가능성이 큼
     * 과거 하이퍼스케일 인프라는 스케일 아웃(Scaling-Out) 방식(저비용 서버 대량 배치)으로 발전해왔으나,
       미래의 AI 클러스터는 스케일 업(Scaling-Up) 방식(슈퍼컴퓨터 구조)으로 변화할 가능성이 큼
          + 예: RDMA(Remote Direct Memory Access) 기반 이더넷 네트워크를 활용하여 대규모 머신러닝(ML) 훈련에 최적화
     * Meta는 PyTorch → ML 모델 → AI 칩 → 네트워크 → 데이터센터 → 서버 → 스토리지 → 전력 및 냉각까지 포함하는 풀스택 공동 설계(Co-Design)를 진행 중

  도메인 특화 하드웨어 (Domain-Specific Hardware)

     * 2000년대에는 하드웨어가 점점 표준화되었지만,
       앞으로는 AI 훈련/추론, 가상화, 비디오 인코딩, 암호화, 압축, 계층형 메모리 등 다양한 특화 하드웨어가 증가할 전망
     * 하이퍼스케일 기업들은 대량 생산을 통해 맞춤형 하드웨어를 경제적으로 설계 및 배포 가능
     * 하지만, 이러한 하드웨어 다양성 증가로 인해 소프트웨어 스택의 복잡성이 커지고, 이질적인 환경을 관리하는 도전 과제가 발생할 것

  엣지 데이터센터 (Edge Datacenters)

     * 메타버스(Metaverse) 및 사물인터넷(IoT) 애플리케이션 증가로 인해 엣지 데이터센터의 확장이 예상됨
     * **클라우드 게이밍(Cloud Gaming)**은 그래픽 렌더링을 사용자 기기가 아닌 엣지 데이터센터의 GPU 서버에서 수행하며,
       25ms 이하의 낮은 네트워크 지연 시간이 필수
     * 실시간 응답성이 중요한 애플리케이션의 증가로 인해 엣지 데이터센터의 수와 규모가 크게 증가할 가능성이 큼
     * 이를 효과적으로 운영하기 위해, Global-DaaC(전 세계 데이터센터를 하나의 컴퓨터처럼 운영하는 개념)를 확장하여 개발자들이 복잡한 인프라 관리를 신경 쓰지 않도록 최적화할 필요가 있음

  개발자 생산성 향상 (Developer Productivity)

     * 지난 20년간 자동화 도구는 시스템 관리자의 생산성을 크게 향상시켜 서버 1대당 관리자가 담당하는 비율이 급격히 증가
     * 하지만, 소프트웨어 개발은 여전히 노동집약적이며 생산성 향상이 더딘 편
     * 앞으로는 두 가지 요인으로 인해 개발자 생산성이 급격히 증가할 전망:
         1. AI 기반 코드 생성 및 디버깅 도구 발전
         2. 도메인 특화된 완전 통합형 서버리스 프로그래밍 패러다임의 등장
     * Meta의 FrontFaaS는 이러한 서버리스 프로그래밍 방식의 예시이며,
       향후 특정 산업(예: 금융, 의료 등)에 최적화된 새로운 프로그래밍 패러다임이 등장할 것으로 예상됨

  결론

     * AI를 중심으로 한 인프라 혁신이 향후 10년간 빠르게 진행될 것
     * 하이퍼스케일 기업들은 자신들의 인사이트를 공유함으로써, 커뮤니티 전체가 더 빠르게 발전할 수 있도록 기여해야 함

   저 PoP는 BGP4 아니면 TCP anycast고 그걸 개인이 사용할 방법은 없겠죠..?ㅠㅜ

   PoP이 BGP4 혹은 TCP anycast라는 서술이 정확히 어떤 말인지 잘 모르겠습니다만 자체 AS를 운영하냐는 말이면 맞고요
   보통 일반적인 multi-region 서비스들은 geolocation based balancing에 anycast dns를 더 주로 사용합니다
   네 현재로선 없습니다 멀티리전 PoP이 필요하시다면 다른 프로바이더를 이용하시면 됩니다

        Hacker News 의견

     * Threads 개발 후, 인프라 팀은 출시 준비를 위해 단 이틀의 공지를 받았음. 대부분의 대규모 조직은 수십 개의 상호 의존적인 팀을 포함하는 프로젝트 계획을 작성하는 데만 이틀 이상 걸림. 그러나 Meta에서는 분산된 사이트에 전쟁실을 신속히 구축하여 인프라와 제품 팀을 실시간으로 문제를 해결하도록 함. 이 앱은 출시 후 5일 만에 1억 명의 사용자에 도달하며 역사상 가장 빠르게 성장한 앱이 되었음
     * 빠르게 제품을 출시할 수 있는 능력을 유지하는 것이 인상적임. 관료주의가 증가하지 않도록 하고, 법무팀이나 다른 부서가 승인 게이트를 만들지 않도록 많은 노력이 필요함. 또는 전쟁실을 통해 신속하게 작업을 완료할 수 있는 능력이 필요함
     * FB에 있을 때, 인프라가 얼마나 강력한지 경험했음. 제품 엔지니어들이 며칠 만에 대규모 프로젝트를 구축함. 여러 팀의 기술 리더로 일했으며, 여기서 언급된 팀 중 일부는 HBase와 ZippyDB 팀임
     * ZippyDB가 처음으로 공개적으로 언급된 것이 멋짐. 개발자 효율성 향상이 언급된 것도 매우 멋짐. 매일 10,000개의 서비스가 푸시되거나 모든 커밋이 이루어짐
     * FB를 떠난 후, 비슷한 것을 찾을 수 없었음. 그래서 스타트업으로 내가 필요했던 인프라를 구축하고 있음. Batteries Included
     * 이 댓글들에 많은 냉소와 부정적인 반응이 있어 아쉬움. 많은 사람들이 Meta를 싫어하지만, 실제 기사는 나에게 경이로움. 현대 디지털 세계를 지탱하는 인프라가 얼마나 광범위하고 복잡한지 몰랐음. 이 기사를 읽고 그 규모를 보는 것이 놀라움
     * 회사가 여러 면에서 나쁠 수 있지만, 기사에 나오는 모든 것이 나에게는 놀라움
     * 나는 여러분처럼 엔지니어가 아니어서 이 기사가 여러분에게는 오래된 뉴스일 수 있지만, 나는 ""와우""라고 말하지 않을 수 없었음
     * 과거의 SF 작가들에게 이 기사를 보여주면 그들도 경이로워할 것 같음
     * 놀라움. 이 모든 놀랍고 인상적인 기술과 세계 최고의 엔지니어들이 단지 사람들의 눈에 더 많은 광고를 넣기 위해 사용됨. 한숨
     * PHP 웹 프론트엔드를 ""서버리스"" 또는 ""서비스로서의 함수"" 아키텍처로 설명하는 것이 흥미로움. 관점의 문제인 것 같음. 이는 많은 엔드포인트가 배포된 단일 코드베이스를 가진 서비스임. 엔드포인트 유지보수자의 관점에서는 ""서버리스""일 수 있지만, 모든 추상화가 그렇듯이 누출이 있음
     * 데이터센터 환경에서는 단순성과 고품질 의사결정 능력 때문에 중앙 집중식 컨트롤러를 선호함. 많은 경우, 중앙 집중식 제어 평면과 분산 데이터 평면을 결합한 하이브리드 접근 방식이 가장 최적임
     * 이 접근 방식은 대규모 서버 수를 가진 조직의 소프트웨어 네트워킹(서비스 메쉬) 및 스토리지(데이터베이스 운영)에 가장 최적의 설계 중 하나로 보임. IP 네트워킹이 BGP에 주로 의존하지 않고 같은 모델을 따르는 것이 놀라움
     * 로컬 캐싱을 사용하여 L7 라우터의 부하를 줄이고 데이터베이스 쿼리의 지연 시간을 개선할 것으로 예상됨. 클라이언트는 캐시를 무효화하고 합리적인 시간 초과 후 서비스 메쉬에 다시 조회할 수 있음
     * 빠르게 개발된 서버리스 함수와 지속적인 배포가 결합되어, 누구나 전체 코드베이스에서 편집할 수 있는 것이 디스토피아적 악몽처럼 들림. 디버깅과 버그 찾기에 필요한 로깅의 양이 극단적임
     * 서버리스 함수를 작성하는 데 Erlang을 사용하는 것은 BEAM이 제공할 수 있는 모든 큰 이점을 피하는 것 같음
     * 제품 엔지니어들은 주로 PHP, Python, Erlang에서 상태 없는 서버리스 함수로 코드를 작성함. 이는 단순성, 생산성, 반복 속도에서 이점이 있음
     * 개발자 생산성을 높이기 위해 Meta는 지속적인 배포를 보편적으로 채택하고, 더 많은 개발자가 전통적인 서비스 코드보다 서버리스 함수를 작성할 수 있도록 함
     * 비 AI 컴퓨팅 작업에 대해, 단일 서버 유형만 제공하며, 하나의 CPU와 동일한 양의 DRAM(이전에는 64GB, 현재는 256GB)을 장착함. 이것이 업계 전반에 걸쳐 일반적인 것인지, Meta에만 일반적인 것인지 궁금함
     * 이미지가 CDN109에 캐시되지 않았을 때, 사용자가 요청하면 CDN109는 요청을 인근 PoP로 전달함. PoP는 요청을 데이터센터 지역의 로드 밸런서로 전달하고, 로드 밸런서는 스토리지 시스템에서 이미지를 가져옴
     * 1MB 이미지를 요청할 때, 느린 연결로 100ms 지연 시간으로 1MB 이미지를 제공하는 것이 여러 번의 왕복과 증가하는 지연 시간을 거치는 것보다 빠르지 않을까?
     * Meta의 시스템을 통해 요청한다고 가정하면, 결국 같은 데이터센터로 가고 FTL 기술이 없다고 가정할 때
     * 하이퍼스케일러와의 명시적인 비교가 특히 흥미로움. 그들이 자체 퍼블릭 클라우드를 출시하기 위한 준비인지 궁금함. Meta의 누군가가 의견을 말해주길 바람
"
"https://news.hada.io/topic?id=19245","맨해튼에서 가장 많이 사용되는 폰트, Gorton","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      맨해튼에서 가장 많이 사용되는 폰트, Gorton

     * 2007년 뉴욕을 처음 방문했을 때, DSLR 카메라로 다양한 폰트를 찍었음
     * American Typewriter, Akzidenz Grotesk, Helvetica, Gotham 등을 보았지만, Gorton이라는 폰트는 알아채지 못했음

Gorton 폰트와의 첫 만남

     * 2017년, 타자기의 역사를 연구하던 중 Gorton 폰트를 처음 알게 되었음
     * 이 폰트는 키보드 키캡에서 독특한 사각형 비율과 기계적이면서도 유아적인 느낌을 줌
     * G, Q, P, R 등의 글자와 &, @ 등의 기호는 독특하고 비정형적인 특징을 가짐
     * 숫자 3, 4, 6, 7, 9 등도 독특한 형태를 보이며, O와 0의 구분이 어려움
     * 키보드마다 약간의 변형이 있으며, 같은 키보드 내에서도 변형이 존재함

Gorton 폰트의 다양한 발견

     * 키보드 외에도 페리, 국립공원 표지판, 인터콤, 가로등 접근 커버, 엘리베이터, 치과 등 다양한 장소에서 Gorton 폰트를 발견함
     * 이러한 발견을 통해 Gorton 폰트가 일상생활에서 널리 사용되고 있음을 깨달음

Gorton 폰트의 기원과 특징

     * Gorton 폰트는 20세기 중반에 Gorton Machine Company에서 개발한 것으로 추정됨
     * 이 회사는 정밀 조각 기계를 제작했으며, 해당 기계로 다양한 표지판과 패널을 제작했음
     * Gorton 폰트는 이러한 기계로 제작된 표지판에 사용되었으며, 독특한 디자인과 널리 사용되는 특성으로 인해 맨해튼에서 가장 많이 사용되는 폰트 중 하나로 자리 잡음

Gorton 폰트의 매력

     * 처음에는 비정형적이고 아마추어적인 느낌을 주었으나, 점차 그 독특한 매력에 끌리게 됨
     * 특히 G, Q, P, R 등의 글자와 숫자 3, 4, 6, 7, 9의 독특한 형태는 다른 폰트와 차별화되는 요소임
     * 이러한 특징으로 인해 Gorton 폰트는 맨해튼의 다양한 장소에서 널리 사용되고 있음

Gorton 폰트의 현재

     * 현재도 맨해튼의 다양한 장소에서 Gorton 폰트를 발견할 수 있음
     * 특히 오래된 건물이나 시설물에서 이 폰트를 쉽게 찾아볼 수 있음
     * 이러한 점에서 Gorton 폰트는 맨해튼의 역사와 문화의 한 부분으로 자리 잡고 있음

결론

     * Gorton 폰트는 독특한 디자인과 널리 사용되는 특성으로 인해 맨해튼에서 가장 많이 사용되는 폰트 중 하나임
     * 처음에는 그 존재를 인지하지 못했으나, 다양한 장소에서 발견하면서 그 매력에 빠지게 되었음
     * 앞으로도 Gorton 폰트는 맨해튼의 역사와 문화를 대표하는 중요한 요소로 남을 것임

   뭔가 물리적으로 누를때 안깨질것같은 느낌이 드네요.

   복고적인 느낌이 물씬 나는 폰트네요.
   도서관 창고 뒤켠에 쌓여있는 오래된 책의 대출카드를 타이핑하는데 쓸 것 만 같은 서체네요.

   정말 깊이있게 파고들었네요.

        Hacker News 의견

     * Leroy 레터링에 대한 짧은 클립을 보고 기뻤음. 어렸을 때 손으로 글씨를 쓰는 법을 배웠고, Leroy를 사용할 수 있게 되었을 때는 약간의 속임수처럼 느껴졌음. 완벽한 결과를 쉽게 얻을 수 있었지만, 기술을 패턴 따라하기로 대체하는 것이 반드시 개선은 아니었음
          + 오늘날까지도 손으로 글씨를 쓴 지도와 그래프가 있는 오래된 연구 논문을 즐겨봄. 1800년대에 쓰인 많은 논문은 기구의 선명한 선 그림을 가지고 있어, 최신 논문에 포함된 사진보다 더 유용할 수 있음
     * 이 글을 써줘서 정말 고맙음. 빈티지 스타일의 우주선 시뮬레이터를 개발하는 솔로 게임 개발자로서, 조종석 서체 문제로 고민하고 있었음. 약 40년 전 직장에서 사용된 표지판 조각 도구에서 본 고전적인 Apollo 우주선을 알아보았지만, 그 이름을 알아내거나 제대로 재현한 폰트를 찾을 수 없었음
          + HN에서 이런 멋진 것을 보게 될 줄은 몰랐음
     * 이 글은 포스트 밀레니얼 세대가 쓴 것 같음. 늦은 X세대인 나에게는 이러한 글자 형태가 전혀 낯설거나 ""못생긴"" 것이 아니었음. 그것들은 표준 인쇄 형태만큼이나 흔하고 유효했음
          + 현대 독자가 처음으로 ""긴 s""를 보는 것과 비슷할 것임
          + 누구를 모욕하려는 것은 아니며, 단지 여기서 다른 세대의 관점을 보는 것이 정말 흥미로움
     * 한동안 NYC 지역의 많은 유명 상업 건물의 BMS/BAS 시스템을 위한 코드를 작성했음. 지하실과 옥상, 그 사이의 비밀 방들에서의 제어실에서 일했음. (석면 등 여러 위험에 노출되지 않은 흥미로운 직업이었음)
          + 남부에서 태어나고 자란 사람으로서, 각 제어 장치의 진지함과 목적을 암시하는 이 흔한 폰트에 완전히 매료되었음. 수많은 패널에서 만난 기능의 우선순위를 포함하여
          + 이 깊은 탐구는 내 영혼을 기쁘게 했고, 이 웜홀을 탐험해준 저자에게 매우 감사함
     * 저자가 잘못 이해한 것 같음. 이 스타일의 글씨는 어떤 회사의 폰트로 시작된 것이 아님
          + 이것은 단지 드래프팅 수업에서 글씨를 쓰는 방법으로 가르쳤던 것임. 직선과 단순한 모양은 연필이나 펜으로 글씨를 쓰기 쉽게 만들어줌. 그래서 모든 선의 너비가 같고 모든 선의 끝이 둥글게 됨
          + 나중에 이것들은 스텐실로 변했고, 사용자가 스텐실 안에 펜을 따라 그리면서 빠르게 글씨를 쓸 수 있게 되었음. 그 후 인쇄에 사용되는 폰트로 변했음. 하지만 이 모든 것은 나중에 일어난 일임. 여기 있는 것은 드래프팅 수업에서 배운 글씨이며, 나중에 스텐실과 템플릿을 만드는 데 사용된 것임
     * 슬프게도 이미지가 로딩되지 않음. 기사를 중간에 다시 로드했는데 사이트가 다운됨
     * 저자는 폰트를 못생겼다고 계속 언급하지만, 나는 정말로 즐김. 다양한 표지판에서 본 것들(국립공원, 명판, 산업 응용 및 도식)은 나에게 경외감을 불러일으킴
     * Marcin Wichary의 작업을 즐길 것임. 그는 최근 호주를 여행하며 Gorton의 사례를 곳곳에서 발견했음
          + 링크
          + 링크
     * 이 기사를 좋아했다면, 템즈 강에 던져진 서체에 관한 이 기사도 좋아할 것임
          + 링크
          + 다른 멋진 폰트/서체 이야기를 가진 사람이 있는지 궁금함
"
"https://news.hada.io/topic?id=19305","생성형 AI 사기(Con)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             생성형 AI 사기(Con)

     * ChatGPT가 출시된 지 2년이 넘었으며, 대규모 언어 모델(LLM)은 혁신적인 개념에서 21세기의 가장 큰 사기 중 하나로 발전했음
     * OpenAI의 CEO인 Sam Altman은 노동을 착취하거나 대체하려는 경제에 LLM을 판매하기 위해 이 거품을 부풀렸음
     * LLM은 코딩이나 검색 등에서 사용 사례가 있지만, 일부 사람들이 LLM 기반 소프트웨어를 사용한다고 해서 생성형 AI가 지속 가능하거나 수조 달러 규모의 진정한 산업이라는 증거는 아님
     * 이런 대화를 하는 것이 너무 지루해서 이제 다시 말할 필요가 없도록 몇 가지 반박을 적어 보겠음
     * ""Ed""는 필자인 Edward Zitron 자신을 지칭하는 것

“Ed, 인공지능의 종류는 여러 가지야”

     * “나도 이미 알고 있음” 나는 지금 “Generative AI”에 대해 말하고 있음

“Ed, ChatGPT가 3억 명의 사용자를 보유하고 있어. 이게 산업이 충분히 증명되었다는 뜻 아님?”

     * “사용자가 많다고 실제 시장의 지속 가능성이 보장되는 건 아님” 온갖 매체 보도로 ChatGPT가 과도하게 부각되었고, 실제 통계와 충돌하는 의문점들이 있음
     * “300만이든 3억이든 그 수치만으로는 아무것도 증명하지 못함” 3억 사용자는 가장 많이 회자되는 제품이 무료로 열려 있을 때 일어날 수 있는 일일 뿐임
     * “월간 사용자 대비 유료 전환율 등 구체 지표를 보면 오히려 사업성이 낮을 가능성이 큼” 그러므로 단순 사용자 수를 절대적으로 신뢰하기 어려움

“Ed, ChatGPT는 아직 초창기임. 기다리면 더 나아지지 않겠음?”

     * “이미 2년 이상이나 대규모 투자와 관심이 쏟아졌음” Transformer 기반 연구도 2017년부터 시작되었고, 이미 수십억 달러를 쏟아부었음
     * “그럼에도 이렇다 할 ‘킬러 앱’이 없는 상태임” Cloud Computing이나 스마트폰처럼 즉각적이고 폭넓은 활용 사례가 아직 없음
     * “지금껏 이런 수준으로 대중의 주목을 받은 스타트업이 거의 없었음에도 불구하고, 뚜렷한 결과물이 부족함” 2년 넘게 투자와 홍보가 집중되었지만 모두가 꼭 써야 할 제품은 아직 안 보임

“Ed, ChatGPT가 생성 AI의 아이폰 모멘트임. 역사상 가장 큰 소프트웨어 런칭이 아닐까?”

     * “아이폰은 휴대폰과 컴퓨터의 개념을 뒤바꿨지만, ChatGPT는 그렇지 않음” 아이폰이 만들어낸 광범위한 새로운 산업과는 다르게, 생성 AI로 인해 생긴 필수적 서비스는 보이지 않음
     * “만약 내일 ChatGPT가 사라진다면 일상에 큰 타격이 있을까?” 글쓴이는 ‘대다수 사람’에게 미치는 영향이 미미하다고 봄
     * “Microsoft의 ‘AI 매출’도 실제 이윤이 아닌, 포괄적이고 모호한 합산임” 거대 IT 기업들이 AI를 내세우지만, 정작 뚜렷한 수익이나 산업 전반의 혁신으로 이어지지 못하고 있음

“Ed, 결국 언젠간 이 문제 해결될 거 아님?”

     * “언제 해결되는지 묻고 싶음” OpenAI나 Anthropic 모두 연간 수십억 달러를 소모하면서도 명확한 수익 창출 모델이 없음
     * “이들의 주장(‘비용이 곧 내려갈 것이다’ ‘몇 년 후엔 흑자 전환이다’)은 기업 내부 예상치에 불과함” 실질적으로 해소 방안이 구체적이지 않음
     * “Anthropic이나 OpenAI가 계속 이렇게 돈을 태우면서 미래를 담보 잡히는 구조가 계속 가능할지 의문임”

“Ed, 우린 도대체 뭘 하고 있는 거지?”

     * “OpenAI와 Anthropic이 동시에 엄청난 적자를 기록하면서도, 2027년쯤이면 흑자를 볼 거라고 말함” 하지만 구체 근거가 빈약함
     * “Dario Amodei(Anthropic)는 2027년에 모든 것이 가능해진다고 주장하지만, 그 구체적 경로가 불투명함” 이는 과도한 낙관에 불과하다고 봄
     * “기업들의 자료에 따르면, API 매출 같은 부문이 핵심이라는 데 이것만으로 수십억 달러를 메꿀 수 있을지 회의적임”
     * 요컨대 “Generative AI 산업이 진정으로 지속 가능하고 의미 있는가”라는 근본적 의문을 던짐

“Ed, 이 멍청이들이 실제로 하고 있는 일은 뭐야?”

     * “모두가 ‘Reasoning’ 모델, ‘Chain-of-thought’ 같은 고급 기능에 매달리지만, 혁신적 변화로 이어지는지는 의문임” DeepSeek 같은 오픈소스 모델도 등장해 경쟁은 더 치열해짐
     * “OpenAI의 새 기능 ‘Deep Research’는 웹에서 자료를 찾아와 보고서를 만들어주지만, 출처 신뢰도가 낮고 반복적 인용을 하는 등 실사용 가치가 떨어짐”
     * “이런 생성 AI 제품은 전반적으로 무겁고 비싸며, 단순하게 길고 번지르르한 ‘결과물’을 만들어낼 뿐임” 실제로 ‘연구’로 보긴 어려움

“Ed, 미쳐버릴 것 같은 기분임”

     * “수많은 매체와 투자자가 생성 AI가 곧 모든 것을 뒤바꿀 것처럼 말하지만, 정작 제품 수준은 얕고 수익도 미비함”
     * “기업 CEO들은 AI가 일자리를 대체할 것이라고 겁을 주지만, 실질적 증거는 미약함” 그저 주가 부양을 위한 과장으로 보임
     * “이 거품이 터지면 닷컴 버블 이상의 충격이 있을 것이라고 봄” 대규모 투자와 환경·인프라 자원 낭비, 사람들의 일자리 불안 같은 부작용만 커지고 있다는 주장임
     * “정말 이게 미래인지, 아니면 거대한 사기극인지 의문임”
          + 실질적이고 유의미한 “킬러 앱”이 아직 보이지 않고, 기업들 역시 엄청난 비용을 감당하며 적자를 내는 상황
          + 언론 보도 및 기업 홍보에 비해 실제 체감되는 가치가 크지 않으며, 장기적인 지속 가능성에도 의문이 제기됨
          + 전반적으로 글쓴이는 현 시점의 생성 AI 시장을 ‘Con(사기)’에 가깝다고 평가함

   추론 모델들 제대로 쓰면 어마어마합니다.. 혼자 테스트케이스 만들어서 돌리고 최적화 기법 제안해서 넣고 막 난리도 아니더라구요

   일부 내용은 공감하고 일부 저도 과장된 부분이 있다고는 생각하나, 글이 너무 폭력적인 느낌이네요. 답을 정해두고 전개하고 있다는 느낌이랄까요.

     Ed는 때때로 좋은 점을 지적하지만, 그는 대형 기술 기업에 매우 화가 나 있으며, 그의 분노가 종종 메시지를 방해함

   아래 해커 뉴스 댓글에 이 문장을 염두에 두고 보세요. ㅎㅎ
   요즘의 개발도구들을 보면 개발자 입장에서는 이미 충분히 킬러앱이 나왔다고 생각이 드는데, 비개발자 입장에서는 뭐 그렇게 느낄수도 있다고 생각이 드네요.

   해가 떠오르고 있어서 박명이 드리운 참에 이게 등불보다 나은게 뭐냐고 하는 글이라니 안타깝습니다.

   글쓴이에게 한가지 동의하는 점이 있다면, 저는 OpenAI의 승리에도, Anthropic의 승리에도, xAI의 승리에도, 구글이나 MS의 승리에도 베팅하지 않겠습니다. 어떤 기업이 돈을 벌지 벌지 않을지는 대단히 불확실한 일입니다.

   하지만 앞으로 몇 년 사이에 모든 지적 노동의 생산성이 급격히 증대되는 것은 막을 수 없을 것이 분명합니다. 그게 로컬 장비에서 돌아갈지 원격의 서버에서 돌아갈지, 무료로 동작할지 유료로 동작할지는 모르겠지만요. 그러나, 설령 지금의 AI기업이 모두 수익창출에 실패하고 패배자가 되더라도, 그들의 투자한 자금으로 세상이 바뀐 것은 사라지지 않겠지요. 그들이 2027년에 흑자를 보든 도산을 하든, 세상은 바뀝니다.

   매우 공감하는 댓글입니다. 저는 Cursor 없이는 개발 못하는 몸이 되어버렸어요.

   하지만 여전히 AI의 비용 효율 문제가 크다고 봐서, 저도 어떤 기업의 승리에도 베팅하지 않고 있습니다.

   헉 저는 이제 AI 없으면 개발 못하는 몸이 되어버렸는데....

   저의 경우라면 모르는걸 검색하고 배우는 방법을 완전히 뒤집어놨고, 코딩을 하는것 뿐만아니라 프로젝트의 기술적 방향을 설정하는 방법 자체에서 6개월 전과는 전혀 다른 속도와 방식으로 근무하고 있습니다. 생산성 향상은 말할것도 없고요.

   불과 1년전까지만 해도 주변에서 AI제작 코드를 신봉하는 사람을 보면 머릿속에 물음표 한 200개쯤 띄웠던 저로서도 최근의 변화는 정말 충격적입니다.
   반대로 말하면 AI에 비하면 스마트폰이야말로 그냥 전화기에 웹브라우저 붙인거지, 별거있나요?

   직접 써보면 사실 일종의 점쟁이같은 느낌이 들 때가 있긴해요.
   어쩌다 결과물이 잘 나온 사람은 놀라서 여기저기 홍보하고, 다수의 불만족스럽거나 아예 틀린 답을 받은 사람은 뭐 아직 그정도긴 하지 하면서 넘어가고...

   뜬소문(hype)과 FOMO에 지친 것 같은 감정과 반응은 논외로 하더라도 신기술을 대하는 방법에 대한 시사점은 충분히 있다고 생각합니다
    1. AI 구별하기: 알고리즘/로직, 기계학습, 자연어 분석, 텍스트/이미지/영상/음성 생성
    2. AI 산업군의 지속 가능성
    3. AI 사용자 입장의 비용 효율성과 기대 효용

   세탁 자동화 기술이 도입됐던 1980~1990년대의 시대상을 기록한 기사가 생각나서 추가로 인용합니다

     온갖 전자동으로 가득한 스마트폰에도 컴퓨터라는 수식을 붙이지 않는 요즘이라면, 그냥 전자동 세탁기라고 불렀을 것입니다. 그러나 그때 세탁의 자동화에 대해서는 컴퓨터 말고는 실감나게 표현할 단어가 없었던 셈입니다. 세탁소 주인들도, 소비자들도, 그리고 광고에서도 그렇게 공유했습니다.

     이런 현상에 대해 1991년 11월 27일 한겨레신문 '컴퓨터 만능 환자들'이라는 제목의 칼럼에서는 ""우리나라에 컴퓨터 바람이 불면서 심지어는 세탁소에도 컴퓨터 세탁이라고 써 붙여야 장사가 되는 세상이 됐다""고 얘기하기도 했습니다.

   https://m.imaeil.com/page/view/2019101522053521827

   아 그래서 컴퓨터 세탁 크리닝 같은 이름의 가게들이 있었던 거군요. 재미있네요

        Hacker News 의견

     * 만약 내 Android나 iPhone이 사라진다면, 나는 마치 한 세기 전으로 시간 여행을 한 것 같은 느낌을 받을 것임. Google 검색이 없어진다면, 나는 더 이상 일을 할 수 없을 것임. 클라우드가 사라진다면, 앱을 더 이상 만들 수 없을 것임. 도서관에 가는 것 외에는 해결책이 없음
          + ChatGPT나 Copilot 같은 파생물이 사라진다면, 약간 불편할 것임. 문서를 읽고 코드를 조금 더 느리게 작성하며 계속할 것임. 사실, 이미 여러 번 그렇게 했음 (Copilot with GPT-3.5, Cursor, Copilot with GPT-4, Zed with Claude 등)
          + 실리콘밸리에 오래 있었다면, 여러 번의 과대광고 주기를 보았을 것임. AI는 최신 주기임. AI가 사기라는 뜻은 아니지만, 판매를 위해 과장하고 과도한 주장을 하는 경향이 있음
          + AI는 주로 텍스트와 코드를 작성하는 데 사용됨. 실제로 시장 전반에 걸쳐 워크플로우에 통합하는 데는 시간이 걸릴 것임
          + 과도하게 비관적이거나 낙관적이지 않은 훌륭한 기사는 Benedict Evans의 The AI Summer임. 대기업들이 많은 흥분을 하고 있지만 실제 채택은 아직 낮다고 주장함
          + ""LLM 자체는 제품이 아님 - 도구나 기능을 가능하게 하는 기술이며, 새로운 프레임, UX 및 도구로 분리되거나 재구성되어야 유용해짐. 이는 더 많은 시간이 걸림""
     * 개발자들 사이에서 LLM에 대한 부정적인 반응이 많다는 것에 약간 충격을 받음. 새로운 도구로서 학습이 필요하고 때로는 그다지 좋지 않지만, 실제 코딩 지원이 내장된 IDE를 사용해 본 사람이라면 (예: VS Code의 Copilot 모드 - Chat 모드 아님, Claude 3.5 사용), 솔직히 초급 개발자보다 크게 나쁘지 않고 100배 빠름. 코드가 나쁘면 버리고 10초 후에 다시 시도할 수 있음. 매우 경험 많은 개발자로서 속도 향상이 엄청남. 6개월 전만 해도 끔찍했음. 1년이나 2년 후에는 얼마나 좋아질지 궁금함. 아직 유닛 테스트 실행이나 콘솔 오류 읽기, IDE 힌트에 접근할 수 없지만, 여전히 대부분 올바른 코드를 생성함. 더 깊이 통합되면 점점 더 개선될 것임
     * 과대광고와 일화들을 제쳐두면, 생성 AI는 몇 달 동안 같은 자리에 머물러 있었음. 그들이 할 수 있었던 ""큰 일""은 ""추론""을 사용하여 대형 언어 모델이 ""생각""하게 만드는 것임
          + 지난 18개월 동안 생성 AI 분야에서 가장 흥미로운 변화가 누락됨
          + 멀티모달: LLM은 이제 이미지, 오디오 및 (일정 부분) 비디오를 소비할 수 있음. 이는 2023년의 텍스트 전용 모델에 비해 큰 개선이며, 이 기술에 대한 많은 새로운 응용 프로그램을 열어줌. 나는 매일 이미지와 오디오 모델 (ChatGPT Advanced Voice)을 사용함
          + 컨텍스트 길이. GPT-4는 8,000 토큰을 처리할 수 있었음. 오늘날의 선도적인 모델은 거의 모두 100,000+이며, 가장 큰 모델은 1백만 또는 2백만 토큰을 처리함. 이는 그들을 훨씬 더 유용하게 만듦
          + 비용. 오늘날의 좋은 모델은 GPT-3 시대의 모델보다 100배 저렴하고 훨씬 더 능력이 뛰어남
     * 방향성은 올바름
          + GenAI는 내 생각에 어시스턴트임. Copilot은 효과적으로 템플릿을 만듦
          + ChatGPT로 이메일을 읽고 톤을 확인할 수 있음
          + Claude는 카메라 장비에 대해 코멘트를 할 수 있음
          + Claude는 희귀한 것들에 대한 이미지 인식을 매우 잘함
          + 내가 확신하게 된 것은 /completions API가 단순히 +10% 또는 저키 헬퍼에 불과하다는 것임
          + 내 코드베이스에서 속도로 난리를 치는 인턴보다 덜 똑똑한 에이전트가 필요하지 않음, 이는 대략적으로 코드 생성 도구들이 하는 것임
          + 자율 주행 자동차 스타트업이 운전 중 이미지를 인식하기 위해 GPT 신경망을 사용하는 것을 보았음. 그 사용 사례는 매우 유망하다고 평가할 것임
          + Shirkys BS 직업 논문이 증명되고 있다고 감히 말할 수 있음, 왜냐하면 환각하는 AI가 그것을 할 수 있다면...
          + 어쨌든
          + 기본적인 것들이 지출을 정당화한다고 생각하지 않음. 너무 많은 독설이 있지만, 과대광고도 너무 많음
     * 이것은 내가 읽은 가장 기울어진 글 중 하나임. 몇 달 동안 Ed는 AI 버블이 ""언제든지"" 터질 것이라고 예측하며 AI 회사의 수익을 제품이 실행 가능하지 않다는 징후로 자주 인용함. 평가가 주로 R&D 진행 상황에 기반을 두고 있으며, 기존 제품의 광범위한 채택이 증가할 것이라는 이론에 기반을 두고 있지 않음. 현재의 상황은 개인 행위자들 간의 R&D 경쟁으로 봐야 한다고 생각함
     * 생성 AI가 실제로 한 일이 무엇인지, 제품은 어디에 있는지에 대한 질문
          + 제품은 사실 ChatGPT임
          + LLM이 버블이라면, OpenAI의 수익 대부분이 API에서 나올 것으로 예상해야 함 (이는 ""마법의 AI 작업""을 하기 위해 자금을 모은 스타트업들이 사용하는 것이며, 투자자들이 돈을 주는 것을 멈추면 버블이 터질 것임). 그러나 https://futuresearch.ai/openai-revenue-report 에 따르면, API에서의 수익은 15%에 불과하며, 나머지 85%는 다양한 구독 제공, 특히 ChatGTP Plus 구독이 55%를 차지함 - 즉, _직접 소비자들_임
          + 이것이 버블이 아니라는 것을 증명하지는 않지만 (소비자들이 그것이 쓸모없다는 것을 깨닫고 나중에 떠날 수 있음), 가능성을 줄임
     * Ed는 때때로 좋은 점을 지적하지만, 그는 대형 기술 기업에 매우 화가 나 있으며, 그의 분노가 종종 메시지를 방해함
          + 그의 최신 발언을 읽으면 Google의 IPO 당시 Karl Denninger가 Google을 비난하며 $85 주가를 정당화할 만큼의 돈을 절대 벌지 못할 것이라고 주장했던 것이 떠오름 (그때 $1000 투자하면 오늘날 약 $375,000 가치가 있음)
     * 우리의 문제의 큰 부분은 ""제품""이 좋다고 모두를 세뇌시킬 때까지 돈을 잃는 비즈니스 모델을 가진 ""회사""를 만드는 것이 가능하다는 사실에서 비롯됨. 정상적인 세상에서는 이러한 회사들이 실패하고 AI는 수년 또는 수십 년에 걸쳐 작은 실패와 작은 성공을 통해 계속 발전할 것임. 대신 소수의 부유한 사람들이 도박을 할 의향이 있기 때문에 터무니없는 것들이 쏟아져 나옴
     * 그리고 여전히 킬러 앱이 없음! 모두가 사랑하는 제품이 없고, iPhone 순간도 없음
          + 나는 코딩 어시스턴트가 AI의 첫 번째 킬러 앱이라고 강력히 주장할 것임. Copilot, Cursor, Windsurf 등
"
"https://news.hada.io/topic?id=19259","Show GN: Perplexity Advanced MCP - AI 코드 에이전트에게 최적화된 검색 MCP","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Show GN: Perplexity Advanced MCP - AI 코드 에이전트에게 최적화된 검색 MCP

   기존의 perplexity mcp 들은 perplexity 공식 api 만 지원하는것이 아쉬워서 개발했어요.

    주요 특징

     * 🤖 멀티 벤더 지원: OpenRouter와 Perplexity API를 모두 지원
     * 💡 자동 query 모델 설정: MCP 인터페이스로 query type 을 노출하여 단순 검색은 simple query 로. 복잡한 쿼리는 complex query 로.
     * 📎 파일 첨부: 검색시에 파일 첨부가 가능하여 쿼리시에 더 많은 정보를 넣고 원하는 답을 얻을 수 있음

    사용 예시

uvx perplexity-advanced-mcp -o <openrouter_api_key> # or -p <perplexity_api_key>

    추천 대상

     * Cursor나 Cline 같은 AI 코딩 도구를 사용하는 개발자
          + 파일 첨부가 가능하고, query type 을 llm 이 직접 고르게하여 특히 다른 MCP 들 보다 유용합니다.

    흥미로운 사실

   95%의 코드가 AI 도구(Cline, Cursor)를 통해 작성되었어요. 배포 워크플로우 구성과 배포 자체도 Cursor 을 통해 이루어졌습니다. 더 궁금하다면 프로젝트에 들어와서 README 의 내용을 읽어보셔도 좋습니다 ㅎㅎ

   GitHub | PyPI

   Cline 링크가 https://cline.bot/ 인데, https://cline.dev/ 로 잘못 걸린 것 같아요. :-)

   저런 ㅋㅋㅋㅋ ㅜㅜ 감사합니다
"
"https://news.hada.io/topic?id=19218","LibreOffice, 40주년 맞아 브라우저 지원 및 실시간 협업 기능 추가 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              LibreOffice, 40주년 맞아 브라우저 지원 및 실시간 협업 기능 추가

     * LibreOffice가 출시된 지 40년이 되었으며, 이번 25.2 버전에서 중요한 기능들이 추가됨
     * 분산 실시간 협업 기능 추가
          + 여러 사용자가 각자의 LibreOffice Writer에서 동일한 문서를 동시에 편집 가능
          + CRDT(Conflict-Free Replicated Data Types) 기술을 활용하여 동기화 진행
          + Google Docs와 유사한 협업 기능이지만, 웹 기반이 아니라 ""로컬 파일에서 작동""하여 데이터를 클라우드에 저장하지 않아도 됨
          + 기존의 Collabora Online(COOL)과는 다른 방식으로, 인터넷 연결 없이도 협업 가능
     * 브라우저에서 실행되는 ZetaOffice
          + LibreOffice의 Wasm(WebAssembly) 버전인 ZetaOffice 출시
          + 브라우저에서 직접 실행 가능하여 OS와 CPU 아키텍처에 관계없이 어디서든 사용 가능해짐
          + 웹페이지 내에서 LibreOffice 앱을 직접 임베드하여 풍부한 편집 경험을 제공할 수 있음
          + JavaScript와 연동 가능하여, 동적 데이터 시각화 및 자동화 지원
          + zetajs 라이브러리를 통해 웹페이지에서 LibreOffice 문서 삽입 및 제어 가능
     * 향후 발전 방향 및 기대 효과
          + 웹앱에서 강력한 문서 편집 기능 제공 → Google Docs 대체 가능성
          + USB 등에서 실행 가능한 포터블 앱 구현 가능 → OS에 상관없이 문서 작업 가능
          + Microsoft Office와의 경쟁력 강화 → 브라우저 기반 오피스 도구로 새로운 가능성 제시
          + 현재 베타 단계이며, 코드 최적화를 통해 더 가볍고 빠르게 로딩될 예정.
     * LibreOffice는 40년 동안 오픈소스 오피스 제품군으로 성장해 왔으며, 실시간 협업과 브라우저 지원을 통해 또 다른 혁신을 준비 중

   복잡한 문서작업이 필요하지 않은 경우, LibreOffice 는 아주 좋은 선택이라 생각합니다.
   윈도우, 맥, 리눅스 어떤 환경에서든지 사용 가능한 것도 큰 장점입니다.

        Hacker News 의견

     * StarWriter는 독일 회사에서 개발한 소프트웨어로, 이후 Sun에 인수되어 오픈 소스로 전환됨
          + 독일의 또 다른 상업용 경쟁자로 SoftMaker가 있으며, 최근까지 Linux에서 사용하다가 LibreOffice로 전환함
          + SoftMaker가 LanguageTool을 지원하지 않아 불편함을 느낌
          + 당시 독일의 세 번째 텍스트 프로세서로 Papyrus가 있으며, Atari ST에서 시작됨
          + Papyrus의 영어 버전이 곧 출시될 예정임
     * LibreOffice Draw에서 PDF를 객체 수준에서 직접 편집할 수 있는 기능이 매우 유용함
     * 장모님이 새로운 노트북에서 오래된 Word 문서의 형식을 제대로 맞출 수 없었음
          + 다양한 설정을 시도하는 대신 LibreOffice를 설치하여 문서가 올바르게 렌더링되도록 함
          + Libre Writer는 Word2000을 떠올리게 하여 새로운 작업 방식을 배우는 데 시간을 낭비하지 않게 함
     * 자주 사용하지는 않지만 LibreOffice의 존재가 좋음
          + 가끔 사용하는 사용자로서 LibreOffice의 멋진 기능과 트릭을 요약한 온라인 리소스가 있는지 궁금함
     * csv 파일을 편집할 때 항상 LibreOffice를 사용함
          + Excel은 csv 파일을 원하지 않는 방식으로 변경하는 경향이 있음
     * LibreOffice의 계보가 그렇게 오래되었다는 것을 몰랐음
          + StarOffice 코드가 얼마나 남아 있는지 궁금함
     * LibreOffice Base를 사용하여 데이터베이스에 연결하려고 시도했으나 어려움을 겪음
          + CSV를 가져오는 워크플로우가 스프레드시트에서 셀 데이터를 복사하여 붙여넣는 방식이었음
          + 이상한 경험이었으며, DBeaver를 사용했지만 여전히 불편했음
     * LO Calc의 자바스크립트 API를 사용하려고 했으나 문서를 찾을 수 없었음
          + 일부 장소에서 가능하다고 읽었지만 유지보수가 되지 않았거나 제거된 것 같음
     * Draw를 사용하려고 했으나 매우 불편했음
          + 개선되었기를 바람
     * Writer는 기대하는 대로의 기능을 수행함
     * 새로운 프로젝트로 표준 오피스 스위트의 완전한 재작성을 보고 싶음
          + 데스크톱/로컬 우선
          + 크로스 플랫폼 및 일류 wasm 빌드
          + 선택적 온라인/협업 기능
          + 낮은 부하와 빠른 컴파일 시간
          + 확장 가능하고 재사용 가능한 라이브러리, 오피스 유사 애플리케이션 구축을 위한 GUI 툴킷
          + 문서/스프레드시트 형식을 완전히 새롭게 혁신하고 싶음
          + 스프레드시트 셀을 셸/REPL/노트북 인터페이스처럼 만들기
          + 일류 터치 및 잉크 지원
     * OnlyOffice라는 대안을 좋아함
     * 언젠가 상상할 수 없는 미래에 Microsoft는 기억 속에 남고, Word는 15개의 중첩된 VM 내에서 크랙된 바이너리를 실행하여만 사용할 수 있는 잃어버린 기술이 될 것임
          + LibreOffice 소스의 작동 복사본은 여전히 FTP 서버 어딘가에 남아 있으며, 사용자들이 IRC를 통해 개발을 계속할 것임
"
"https://news.hada.io/topic?id=19279","TigerBeetle: 회계에 특화된 OLTP 데이터베이스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    TigerBeetle: 회계에 특화된 OLTP 데이터베이스

     * 회계에서 쓰이는 '대/차(Debit/Credit) 개념'을 구현함
     * 안정성/정확성을 확보하기 위해 NASA의 소프트웨어 제작 10가지 규칙 준수
     * 2018년의 프로토콜 감지 복구에 대한 연구를 토대로 로컬 스토리지 장애 극복
     * 적은 비용으로 1,000억 건이 넘는 트랜잭션 처리 가능
     * 소스 코드: https://github.com/tigerbeetle/tigerbeetle

   2025년을 위한 7개의 데이터베이스 에서 간단한 설명을 보실수 있습니다.
    1. PostgreSQL: 기본 데이터베이스
    2. SQLite: 로컬-우선 데이터베이스
    3. DuckDB: 모든 것을 질의할 수 있는 데이터베이스
    4. ClickHouse: 컬럼형 데이터베이스
    5. FoundationDB: 레이어드 데이터베이스
    6. TigerBeetle: 철저하게 정확한 데이터베이스
    7. CockroachDB: 글로벌 데이터베이스

   감사합니다-
"
"https://news.hada.io/topic?id=19302","내 세탁기가 `소프트웨어 추정`에 대한 생각을 바꿔줬어요 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    내 세탁기가 `소프트웨어 추정`에 대한 생각을 바꿔줬어요

     “그거 만드는데 얼마나 걸릴 것 같아요?”

     * 소프트웨어 개발자들이 두려워 하고 싫어하는 이 질문에 대해서 내 세탁기가 생각을 일깨워줌
     * 세탁기가 알려준 소프트웨어 노력 추정(Software Effort Estimation)의 어려움
          + 새 집으로 이사하면서 세탁기를 설치하는 과정에서 예상보다 많은 시간이 많이 소요됨
          + 보통 10분이면 끝나는 작업이었지만, 이번에는 4시간이 소요됨
          + 사전에 예상하지 못한 장애물(블로커)들이 발생하여 설치가 지연되었음
          + 이 과정이 소프트웨어 개발에서 노력 추정을 어렵게 만드는 이유와 유사하다는 점을 깨닫게 됨
     * 장애물과 해결책
          + 장애물 1: 전원 연결을 위한 구멍이 없어 세탁기를 전원에 연결할 수 없음
               o 해결책 1: 하드웨어 상점에서 60mm 홀쏘를 구입하여 구멍을 뚫음
          + 장애물 2: 소비자용 드릴로는 홀쏘를 사용할 수 없음
               o 해결책 2: 더 강력한 드릴을 빌려와서 사용함
          + 장애물 3: 배수 및 급수 호스가 새 집에서는 예상보다 짧았음
               o 해결책 3: 새로운 확장형 호스를 구입하려 했으나 기존 호스가 확장되지 않음을 깨닫고 다시 새 호스를 구입
          + 장애물 4: 수도꼭지에 단단히 고정된 금속 캡이 제거되지 않았음
               o 해결책 4: 더 큰 스패너를 구입하여 캡을 제거함
          + 장애물 5: 배수구의 스피곳(Spigot)이 PVC 벽으로 막혀 있음
               o 해결책 5: 드릴로 PVC 벽을 뚫고 배수 호스를 연결함
          + 총 5번의 하드웨어 매장 방문과 4시간의 작업 끝에 세탁기를 정상적으로 설치할 수 있었음
     * 소프트웨어 개발 노력 추정이 어려운 이유
          + 익숙한 작업이라고 하더라도 환경이 다르면 예상치 못한 변수가 발생할 가능성이 높음
          + 과거 경험을 기반으로 한 추정이 종종 틀리는 이유는 “알려지지 않은 미지의 요소(Unknown Unknowns)” 때문임
          + 몇 가지 예시:
               o 사용하려던 라이브러리가 더 이상 유지보수되지 않아 직접 수정해야 하는 상황
               o 개발 도구가 업데이트되면서 기존 방식이 더 이상 적용되지 않는 문제
               o OS 버전이 바뀌면서 기존 종속성이 정상적으로 작동하지 않는 경우
               o 인프라에 새 컴포넌트가 추가되었는데 예상과 다르게 동작하는 상황
     * 결론
          + 새로운 집에서의 경험은 소프트웨어 개발에서의 노력 추정이 얼마나 어려운지를 보여줌
          + 개발을 시작하기 전에 요구 사항을 최대한 철저히 조사해야 하지만, 예상치 못한 블로커가 발생하는 것은 불가피함
          + 소프트웨어 프로젝트가 익숙한 작업처럼 보여도, 새로운 환경에서는 전혀 다른 도전 과제가 등장할 수 있음
          + 이러한 변수를 감안하여 일정 및 리소스를 유동적으로 조정하는 것이 필요함

        Hacker News 의견

     * 소프트웨어 추정은 농담과 같음. 과소평가에 대한 처벌이 없기 때문임
          + 영화 제작 추정과 비교할 수 있음. 영화 제작에 완료 보증을 판매하는 회사들이 있음
          + 완료 보증은 제작 비용의 약 2%가 소요됨. 보통 예산이 300만 달러에서 7000만 달러 사이인 인디 영화에 사용됨
          + 보증 회사는 일부 초과 비용을 부담하지만, 너무 크면 감독을 해고하고 제작을 인수함. 이런 방식이 실질적인 효과를 줌
          + 완료 보증 회사는 과거 데이터를 기반으로 추정함. 많은 영화의 실제 비용을 가지고 있음
          + 각 장면의 비용을 상세히 기록하고 있음. 예를 들어, 자동차 추격 장면의 경우, 데이터베이스에서 과거 100개의 자동차 추격 장면 비용을 참조함
          + 감독, 프로듀서, 배우에 대한 정보도 가지고 있으며, 이들이 장면 촬영에 드는 비용을 동료들과 비교함
          + 이는 로켓 과학이 아닌 보험 인수임
     * 훌륭한 기사지만, 소프트웨어 경험과의 주요 차이점이 빠져 있음
          + 고객이 실제로 원하는 것을 알지 못할 수 있음. 사전에 아무리 물어봐도 이 정보를 얻을 수 없음
          + 시간 단위로 청구하고 프로젝트 단위로 청구하는 것을 절대 거부해야 함
     * DIY 프로젝트는 항상 이런 식임
          + 소유물에 대한 논의가 많지만, 도구와 부품은 공간을 많이 차지함
          + 저자는 이미 많은 도구를 가지고 있었지만, 여전히 몇 가지가 부족했음
          + 결국 하드웨어 상점에 가는 일이 줄어들지만, 작업장은 물건으로 가득 참
     * 드릴링 후 25분 동안 직선으로 유지하는 방법과 소음 차단 이어폰의 놀라움을 배움
          + 소음 차단 헤드폰은 청력 보호 장치가 아님. 청력 보호 장치는 소음원과 귀 사이에 물리적 장벽을 만듦
          + 소음 차단 헤드폰은 주변 소리를 듣고 반대 음파를 생성함. 완벽하지 않기 때문에 귀를 충분히 보호하지 못함
     * 이야기는 좋음. 하지만 내 경험은 거의 정반대임
          + 90%가 쉬운 일이 아니라 90%가 헤매는 것임
          + 같은 제품을 여러 회사에서 반복해서 작업하는 경우가 많음
     * ""현실은 놀라운 세부 사항을 가지고 있음""이라는 말이 생각남
          + 알지 못하는 것들은 새로운 것과 가까워질 때까지 그대로 남아 있음
     * 저자가 전원 케이블을 위한 구멍을 뚫을 때, 깔끔하게 플라스틱 삽입물을 맞춤
          + 건축업자들은 물 호스를 위한 구멍을 대충 자르고 담배를 피우러 감
          + 이는 과거 경험과 일치함
     * 대부분의 동료들은 프로젝트 시작 전 조사와 인벤토리가 많은 시간을 차지한다고 말하면 놀람
          + 대부분의 동료들은 프로젝트를 빨리 끝내고, 많은 시간이 사후 관리에 소요됨
          + 나는 프로젝트 초기에 많은 시간을 투자하여 사후 관리가 필요하지 않음
     * 다음에 기술자의 가격에 놀랄 때 고려할 만한 흥미로운 점
          + 배관공이 세탁기를 연결하는 데 몇 분 만에 300달러를 청구하는 이유는 배수구에 구멍을 뚫는 방법을 알기 때문임
     * 소프트웨어 프로젝트를 시작하기 전에 어떤 질문을 해야 할지 모를 때 어떻게 해야 할까?
          + 탐색 작업을 요구 사항 수집 연습으로 보는 것에 반대하지 않음
          + 하드웨어 상점에 한 번 가서 큰 쇼핑 목록과 열린 질문 세트를 가지면 더 효과적이고 간단하게 작업할 수 있음
"
"https://news.hada.io/topic?id=19311","뉴욕 타임즈, 내부 AI 도구 `Echo`에 올인 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      뉴욕 타임즈, 내부 AI 도구 `Echo`에 올인

     * NYT는 제품 및 편집 스태프들을 위해 AI 사용을 승인하고, AI 교육을 제공할 것이라고 사내에 발표
     * 내부 AI도구인 Echo를 통해 소셜 카피 작성, SEO 헤드라인 생성, 일부 코딩 작업 등을 수행할 수 있을 것으로 예상
     * AI를 사용하며 편집상 해야 할 일과 하지 말아야 할 일을 설명하는 문서와 비디오를 공유하고, 웹 제품 및 편집 아이디어 개발을 위한 다양한 AI 제품도 소개

     ""생성적 AI는 저희 기자들이 진실을 밝히고 더 많은 사람들이 세상을 이해하도록 도울 수 있습니다. 머신 러닝은 이미 우리가 사용하지 않으면 쓸 수 없었던 기사를 보도하는 데 도움이 되며, 생성적 AI는 저희의 저널리즘 역량을 더욱 강화할 잠재력이 있습니다.""

     ""또한 타임즈는 디지털 음성(화된) 기사, 다른 언어로의 번역, 그리고 아직 발견하지 못한 생성 AI의 활용과 같은 기능을 통해 더 많은 사람들에게 더 쉽게 접근할 수 있게 될 것입니다. 우리는 이 기술을 마법의 해결책이 아니라 이전의 많은 기술적 진보와 마찬가지로 우리의 사명을 위해 사용될 수 있는 강력한 도구로 봅니다.""

     * 내부에서 승인된 AI 프로그램들
          + GitHub Copilot, Google’s Vertex AI, NotebookLM, NYT의 ChatExplorer, 일부 Amazon AI 제품
          + 뉴욕타임스의 비즈니스 계정을 통한 OpenAI의 non-ChatGPT API들(사내 법무팀의 승인이 있어야 함)
          + 자체 개발한 Echo는 기자들이 기사, 브리핑, 인터랙티브 콘텐츠를 요약할 수 있도록 돕는 내부 베타 요약 도구임
     * 사내에서 장려하는 AI 도구의 권장 사용 사례
          + SEO 헤드라인, 요약, 오디언스 프로모션 생성
          + 편집 제안
          + 질문 및 아이디어 브레인스토밍
          + 기자가 가진 문서들에 대한 질문하기
          + 연구에 참여
          + 타임스의 문서 및 이미지 분석
          + AI를 활용하여 뉴스 퀴즈, 소셜 카피, 인용 카드, FAQ 등을 개발하는 것도 권장
     * 기자를 위한 프롬프트들
          + ""Hard Fork 의 이 에피소드에서 Al은 몇 번 언급되었어 ?""
          + ""이 문단을 좀 더 간결하게 수정할 수 있을까?""
          + ""이 타임즈 기사를 페이스북에 게시한다고 가정해 보면 어떻게 홍보해야할까?""
          + ""뉴스레터에 맞게 이 타임즈 기사를 간결하고 대화체로 요약해줘""
          + ""이 타임즈 기사에 대해 검색 최적화된 헤드라인 5개를 제안해 줄 수 있어?""
          + ""셰익스피어가 쓴 이 연극을 요약해줄수 있어?""
          + ""이 연방 정부 보고서를 일반인이 이해하기 쉽게 요약해 줄 수 있어?""
     * 저작권 침해와 출처 노출의 잠재적 위험을 지적하며, AI 사용에 대한 편집 지침도 제공
          + AI를 사용하여 기사 초안을 작성하거나 크게 수정하지 말 것
          + 제3자 저작권 자료(특히 기밀 출처 정보)를 입력하지 말 것
          + 페이월 우회를 위해 AI를 사용하지 말 것
          + 기술을 시연하는 경우 및 적절한 라벨링이 있는 경우를 제외하고, 기계 생성 이미지나 비디오를 게시하지 말 것
          + 승인되지 않은 AI 도구의 부적절한 사용은 출처 및 노트 보호 권리를 포기하게 할 수 있음
     * 뉴욕 타임즈의 AI 도구 사용 결정 시점이 주목할 만함
          + OpenAI와의 법정 싸움에 휘말려 있음. OpenAI가 허가 없이 타임즈 콘텐츠로 모델을 훈련시켜 대규모 저작권 침해에 해당한다고 주장
          + OpenAI의 최대 투자자인 Microsoft는 타임즈가 기술 혁신을 억누르려 하고 있다고 이야기함
     * AI 도입에 대한 내부 반응은 열광 & 회의 적인 태도가 섞임
          + 일부 직원들은 AI 사용이 게으름이나 창의적이지 않은 헤드라인 또는 부정확한 정보를 생성할 수 있다는 우려를 표명하였음
          + AI 기업과 직원들 간의 적대감이 남아있음
               o 지난해 타임즈 기술직 직원들이 몇 주 동안 파업을 벌였다는 보도에 대해 AI 회사 퍼플렉시티의 CEO가 파업 중인 직원을 AI 도구로 대체하겠다고 제안하자 분노한바 있음

   NYT가 예전부터 테크 잘하는 회사라고 생각했는데, 결과가 어떻게 되었든 AI에서도 좋은 이니셔티브들을 가져가는군요.
"
"https://news.hada.io/topic?id=19306","18F 퇴출 이후퇴출 이후

18F에서의 이직

     * 18F에서의 경험
          + 18F에서의 근무는 매우 긍정적이었음. 모든 동료들이 친절하고 열정적이며, 디지털 서비스를 개선하기 위해 노력하는 모습이 인상적이었음.
          + 새로운 아이디어를 시도할 수 있는 안전한 환경이었으며, 팀의 지원을 받으며 다양한 프로젝트에 참여할 수 있었음.
     * 이직의 이유
          + 최근 정치적 변화로 인해 직장에서의 미래에 대한 불안감이 커졌음.
          + 원격 근무가 불가능해질 경우, 윤리적으로 반대되는 프로젝트에 참여해야 할 경우, 외부 인사와의 미팅을 강요받을 경우 이직을 고려하게 되었음.
          + 새로운 리더십의 등장으로 인해 조직의 구조조정에 대한 불안감이 커졌으며, 이로 인해 많은 동료들이 해고됨.
     * 결정의 어려움
          + 직장을 떠나는 것은 어려운 결정이었음. 특히, 18F에서의 경험이 매우 긍정적이었기 때문임.
          + 그러나 현재의 정치적 상황과 조직의 변화로 인해 더 이상 머무를 수 없다고 판단함.
     * 미래에 대한 우려
          + 정부의 변화가 사회적 안전망에 미치는 영향에 대한 우려가 큼.
          + 이러한 변화가 노동자와 사회에 미칠 부정적 영향을 경계해야 함.
     * 마무리
          + 18F에서의 경험은 매우 소중했으며, 동료들과의 협업을 통해 많은 것을 배울 수 있었음.
          + 이러한 경험을 바탕으로 앞으로도 긍정적인 변화를 만들어 나가고자 함.

  리소스

     * Wired에서 관련 해고와 정치적 변화에 대한 기사를 제공함.
     * Working Families Party와 Emily Amick는 의회 의원들에게 연락하는 방법에 대한 정보를 제공함.
     * Mariame Kaba는 시위나 투표 외의 참여 방법에 대한 리스트를 제공함.

        Hacker News 의견

     * 18F는 미국 정부의 General Services Administration(GSA) 내 Technology Transformation Services 부서의 디지털 서비스 기관임. 18F는 다른 정부 기관들이 기술 제품을 구축, 구매, 공유하는 것을 돕고, 디자이너, 소프트웨어 엔지니어, 전략가, 제품 관리자들로 구성되어 있음
     * Ethan Marcotte는 반응형 웹 디자인에 관한 책을 쓴 저자이며, 이 분야에서 중요한 인물임. 그의 공공 서비스 선택은 디지털 디자인 역사에서 중요한 의미를 가짐
     * 문제의 정치적 측면을 제외하고, 가장 걱정스러운 부분은 정부에서 일하는 사람들의 신원을 밝히지 않는 회의에 관한 것임. 이는 매우 무서운 상황임
          + 만약 내가 모르는 사람들과 내 업무에 대해 논의하는 회의에서 기본적인 신원 확인을 거부한다면, 보안팀을 부르는 것이 일반적인 반응일 것임
          + DOGE의 목표에 동의하든 안 하든, 선택된 접근 방식은 잘못되었음
     * 정부에 대한 의무적 서비스는 대중에게 이 조직들이 무엇을 하는지 교육하고, 그들이 직면한 문제에 대한 공감을 쌓는 데 큰 도움이 될 것임
          + 유능한 직원들이 밀려나고 정부가 기능을 멈추게 되면, 민간 기업들이 규제 부족을 이용해 시장에서 더 많은 가치를 추출하려고 할 위험이 큼
     * 법률가들에게 질문
          + 원칙에 따라 떠나는 사람이나 즉각적인 상황을 견딜 수 없는 사람을 이해하고 존중할 수 있음
          + 그러나 정부 직원이 파괴적인 침략자에 의해 점령당한 느낌을 받고, 해고될 가능성이 있다고 느낄 때, 사임하지 않고 기다리면서 법적 옵션을 열어둘 수 있는지 궁금함
          + 예를 들어, 입법부나 사법부의 중요한 요소들이 현재의 움직임에 동참하지 않고 시정 조치를 취한다면? 또는 직원들이 복직을 위해 소송을 제기할 수 있다면? 또는 면책 특권을 가진 개인을 상대로 소송을 제기할 수 있다면? 사임하지 않으면 더 나은 사례가 될 수 있는지 궁금함
     * DOGE가 왜 이런 방식으로 운영되는지에 대한 논의가 필요함. 관련 기사 참조: ""Understanding DOGE as Procurement Capture""
     * 18F의 SF 사무실은 Civic Center 공원 오른쪽 건물에 있었음. 그들과의 모든 만남에서 좋은 인상을 받았음
     * 이 기사가 정치적으로 기울어진 Elon에 대한 비판적 제출물처럼 플래그로 삭제될 것으로 예상됨
     * 요약: OP는 USDS와의 회의에서 발생할 수 있는 일에 대한 두려움 때문에 사임했음. 그가 누군가를 죽이거나 자신의 일을 계약자에게 설명해야 할 수도 있었음
          + 그는 USDS의 정당성을 인정하지 않고, 이를 ""소위 '부서'""라고 부르며, 오바마에 의해 설립된 합법적인 행정 기관인지에 대한 간단한 조사조차 하지 않음
          + 많은 똑똑한 사람들이 법이나 전통에 의해 백악관이 GSA와 OMB의 일상 운영에서 배제되어야 한다고 생각하는 것이 놀라움
     * Elon Musk의 18F에 대한 트윗: ""그 그룹은 삭제되었음""
          + Elon의 작업이 ""기술 세계의 전문가를 불러 정부 IT를 더 효율적으로 만드는 것이 어떨까""라는 반향을 일으키면서, 18F가 이미 그것을 했고 매우 잘 작동했다는 점을 무시하는 것이 실망스러움
"
"https://news.hada.io/topic?id=19225","네이버 서치 어드바이저 IndexNow protocol을 지원","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   네이버 서치 어드바이저 IndexNow protocol을 지원

   네이버 서치 어드바이저도 2023년 7월부터 IndexNow*를 통해 새로 만들어진 페이지나 업데이트, 삭제가 발생한 페이지를 네이버 검색에 알릴 수 있게 지원합니다. IndexNow를 통해 웹사이트의 변화를 알리면, 검색로봇이 웹사이트를 방문하도록 기다리지 않아도 됩니다. 또한, 갱신된 페이지 정보가 다른 검색사들에게도 공유됩니다.

   *IndexNow는 웹 사이트의 변경사항을 검색 엔진에 쉽게 알릴 수 있도록 Microsoft Bing이 Yandex, Seznam 등의 다른 글로벌 검색 엔진과 공동으로 만든 프로토콜입니다.
     * 네이버 웹마스터 블로그 포스팅: https://blog.naver.com/naver_webmaster/223165612654
     * IndexNow 공식 사이트: https://www.indexnow.org/ko_kr/index

   새롭게 배워가네요. 감사합니다. 😁

   개인 웹사이트를 새로 만들고 검색엔진에 등록하는 중에 IndexNow 프로토콜에 대해 알게됐는데, GeekNews에 관련 내용이 없는 것 같아 등록했습니다.
"
"https://news.hada.io/topic?id=19261","계산기 앱? 누구나 만들 수 있는 거자나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        계산기 앱? 누구나 만들 수 있는 거자나요?

     ""계산기 앱? 누구나 만들 수 있는거자나"" → 사실이 아님

     * 계산기는 수학적 표현의 결과를 정확히 보여줘야 하고, 생각보다 훨씬 어려운 일임
     * iOS의 계산기에서 (10^100) + 1 − (10^100) 은 0 으로 잘 못 계산함
     * 하지만 안드로이드는 올바르게 1이라고 나오는데, 이걸 어떻게 했는지는 정말 말도 안됨

Google과 Hans-J. Boehm

     * Google은 유명한 프로그래머 Hans-J. Boehm을 고용함
     * Boehm은 C++의 공유 변수 의미론을 정의한 전문가
     * 하지만 그에게 주어진 임무는 예상 밖으로 계산기 앱 개발이었음

부동소수점의 문제

     * 부동소수점 숫자는 0.3이나 10^100 같은 값을 정확히 표현할 수 없음
     * 즉, 부동소수점을 기반으로 한 계산기는 신뢰할 수 없음
     * 정확한 계산을 위해서는 다른 접근 방식이 필요함

Bignum을 이용한 해결책

     * 정수 계산 문제는 Bignum(무한 정수)을 사용하여 해결 가능
     * Bignum은 메모리 크기에 따라 동적으로 확장되는 정수 타입
     * (10^100) + 1 - (10^100) 문제는 Bignum을 사용하면 해결됨
     * 하지만 분수 연산은 해결되지 않음

분수와 대수적 숫자

     * 분수(3/4 같은 값)는 Bignum을 사용하여 분자와 분모를 저장하면 해결 가능
     * 그러나 원주율(π)이나 제곱근(√2) 같은 무리수는 표현할 수 없음
     * Boehm은 다항식 기반의 표현을 시도함
          + 예: √2는 x² - 2 = 0이라는 방정식으로 표현 가능
          + 하지만 π는 이 방식으로도 표현할 수 없음

구성적 실수(Constructive Real Numbers)

     * Boehm은 ""재귀적 실수 연산(RRA)"" 개념을 탐구함
     * 사용자가 원하는 정확도를 입력하면, 그 정확도 내에서 값을 계산하는 방식
     * 예: π를 0.01 오차 내에서 표현하면 3.14를 반환함
     * 하지만 이 방식은 정확한 비교를 어렵게 만듦

정확한 0을 표현하는 문제

     * RRA 방식은 1 - 1을 0이 아니라 0.0000000001로 표현할 수도 있음
     * 이는 사용자 경험(UX) 측면에서 문제가 됨
     * Boehm은 다른 연구자들과 협력하여 해결책을 찾기 시작함

Richardson-Fitch 알고리즘

     * 1994년 Dan Richardson과 John Fitch는 특정 연산 내에서 숫자 비교 문제를 해결함
     * 하지만 이 알고리즘은 너무 느려서 현실적으로 사용 불가능함
     * 예를 들어 1 ≠ 1 - e^(-e^1000)을 판별하는 데 우주의 원자 개수보다 많은 연산이 필요함

RRA와 유리수 연산의 조합

     * Boehm은 RRA와 유리수 연산의 장점을 결합하는 아이디어를 떠올림
     * 단순한 연산(예: 6 × 9 또는 8 / 3)에는 유리수 연산을 사용
     * 무리수가 포함될 때만 RRA를 사용
     * 결과적으로 숫자를 유리수 × 실수의 형태로 표현

기호적 표현(Symbolic Representation)

     * π, √2 같은 특수 숫자는 RRA 대신 기호적 표현을 사용
     * 예: π는 ""π""라는 기호로 저장하고 필요할 때만 숫자로 변환
     * 사칙연산뿐만 아니라, 삼각함수(sin, cos, tan), 로그, 지수 함수도 기호적 표현을 활용

최종 해결책

     * 모든 숫자는 유리수 × 실수(기호적 표현 또는 RRA) 형태로 저장
     * 가능한 경우 유리수 연산을 사용하여 정확도를 유지
     * 기호적 표현을 최대한 활용하여 RRA 연산을 최소화
     * 결과적으로 속도와 정확성의 균형을 맞춘 완벽한 계산기 시스템이 완성됨

결론

     * Boehm과 그의 팀이 만든 Android 계산기는 단순한 프로그램이 아님
     * 정확한 결과를 제공하면서도 빠르고 효율적인 알고리즘을 적용함
     * ""그냥 계산기 앱""이 아니라, 수학적으로 정교한 시스템임

     ""다음번에 Android 계산기를 사용할 때, 이 노력을 떠올려 보자!""

   여담이지만 AI인 neo가 '거자나'로 번역했다는 게 흥미롭네요. 원문은 'Anyone could make that' 이라 장난스런 어감은 없는데 ㅎㅎ 찰떡이네요.

   거자나 -> 거잖아 입니다. 😃

   부동소수점 조정하려면 골치 아플 걸요?ㅋㅋㅋㅋㅋ

   계산기 하면 저는 윈도우즈의 기본 계산기가 생각나네요. 2+2*2를 계산하면 6이 아니라 8이 나옵니다. 일부러 이렇게 만든 것 같긴 하지만 전혀 이해가 안 갑니다. 예전에 칵테일에 들어간 알콜 양을 계산했더니 알콜이 음료 총량보다 많이 나와서 당황한 기억이 있거든요

   연산자를 누를때마다 이전 수식이 바로 계산이 되는 일반적인 전자계산기 동작방식을 따른건데 공학용 계산기만 사용해보신건가요?

   완전 공감합니다. 서버 없어서 좋다고 계산기 시작했다가 터져나오는 계산 오류 및 버그 잡느라고 너무 고생했어요

   ""계산기 앱? 누구나 만들 수 있는거자나"" → 사실이 아님
   이거 응용할 데가 무궁무진해 보이는데요 ㅋㅋㅋ

   ""파이썬? 완전 쉽자나"" → 사실이 아님

   저도 보면서 같은 생각이 들었습니다. ㅋㅋㅋ

   ""자바스크립트? 완전 껌이지"" → 사실이 아님

   ""(10^100)+1−(10^100)""
   오 정말 아이폰 계산기는 0, 안드로이드 계산기는 1로 뜨네요.
   근데 정작 구글에 검색하면 0이라 뜨는군요...

        Hacker News 의견

     * 흥미로운 이야기임. 숫자를 표현하는 더 강력한 방법은 연분수로 표현하는 것임. 연분수는 실수와 유리수를 효율적으로 표현할 수 있음
          + 재미있는 사실로, 오래되지 않은 수학 교과서에 따르면 연분수의 덧셈/곱셈 알고리즘은 존재하지 않을 가능성이 높다고 함. 그러나 1972년 Bill Gosper가 연분수는 산술에 완벽하게 적합하다고 증명했음
          + 나는 reals라는 Python 라이브러리를 작업 중임. 이 라이브러리는 Decimal이나 Fraction 타입을 대체할 수 있도록 설계되었음. Bill Gosper의 기술을 사용하여 연분수를 조작함
     * 링크가 짧아져서 클릭할 수 없는 것은 불행한 일임. 여기에 논문에 대한 실제 링크가 있음
     * 제목을 읽자마자 웃음이 나왔음. IEEE 754는 최악이지만 다른 모든 것보다는 나음. 예제를 보자마자 Kahan summation이나 전체 컴퓨터 대수 시스템일 것이라고 생각했음. Recursive Real Arithmetic는 들어본 적이 없었음
          + 초기 C++ 영웅 중 한 명에 대한 통찰력을 얻었음. 간단해 보이는 것들이 얼마나 깊을 수 있는지 상기시켜줌
     * NYC 지하철 요금은 $2.90임. iOS에서 PCalc를 사용하여 남은 MetroCard 값을 계산했을 때 0이 아닌 -8.881784197E-16이 나왔음. Apple의 계산기를 사용할 때는 이런 일이 발생하지 않음
          + 개발자에게 문의했더니 Apple은 자체 수학 라이브러리를 사용하고 있으며, 이를 대체할 다른 라이브러리를 찾아야 한다고 답변받음
     * 거의 모든 사람이 완전한 계산기 앱을 만들지 않았음. TI-89 같은 완전한 계산기를 의미함
          + Android에서 TI-89 계산기 에뮬레이터를 사용 중임. Android 앱 중 절반의 기능도 없고 잘 작동하지 않음
     * RRA로 전환하는 것의 단점은 사용자 경험뿐만이 아님. 결과가 0.0000000...일 때, 계산기는 그 숫자의 역수를 계산할 수 있는지 결정할 수 없음
          + 예를 들어, 1/(atan(1/5)-atan(1/239)-pi/4)는 ""계산할 수 없음""을 출력함. 1/(atan(1/5)-atan(1/239)-pi/4+10^(-100000))을 시도해도 여전히 ""계산할 수 없음""을 출력함
     * 거의 모든 숫자는 IEEE 부동 소수점으로 표현할 수 없음. 무작위 숫자가 이론적으로 설명할 수 없는 확률이 약 100%일 수 있음
          + 일부 문제는 bignums를 사용하면 피할 수 있음. 순간적인 존재적 불안이 해소됨
     * 고급 TI 계산기, 예를 들어 TI-92가 이 시스템을 사용했는지 아는 사람 있음? '유리수' 모드가 있었고 RRA를 사용했을 가능성이 있음
     * ""recursive real arithmetic"" (RRA)를 사용하는 방식이 Conal Elliot과의 훌륭한 토론을 떠올리게 함. 사물을 이산적으로 표현하는 것에서 연속적으로 표현하는 것으로 이동하는 것에 대해 이야기했음
          + 예를 들어, 이전에는 글꼴을 픽셀 블록으로 표현했지만, 이제는 선/벡터로 인식됨. 컴퓨터 과학은 최신 상업 도구를 배우는 것뿐만 아니라 진실을 추구하는 것이어야 함
     * Android Open Source Project의 계산기 소스 코드를 가지고 놀아봤음. Google이 이를 Google Play Services로 이전했지만, 오래된 소스는 여전히 사용 가능함
          + 몇 가지 실제 문제를 해결하며, 라이브러리에서 사용할 수 있기를 바람. 이전 기사에서 몇 가지 라이브러리에 대한 논의가 있었음

   제가 학부생일때 8086보드를 손으로 납땜해서 만들고 숫자 자판과 텍스트 LCD를 연결해서 8086 어셈블리로 계산기(사칙연산만하는)까지 만드는 수업이 있었습니다.
   보드만들고 자판과 LCD까지 연결해서 동작은 시켰지만 계산기는 못만들었어요.
   그때는 제가 소프트웨어에 재능이 없다고 생각해서 하드웨어 엔지니어로 취직했는데 어쩌다보니 소프트웨어 개발을 하고 있습니다.
   계산기 진짜 어려웠어요.

   소스 코드 내의 구현 개요

   소스 코드 내의 계산기 연산 로직 설명

   정수 처리 코드

   실수 처리 코드
"
"https://news.hada.io/topic?id=19235","Zed, 새로운 오픈 모델 Zeta로 "다음 편집 예측" 기능 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Zed, 새로운 오픈 모델 Zeta로 ""다음 편집 예측"" 기능 제공

     * Zed는 속도를 위해 설계된 편집기로, 항상 instant한 편집 경험을 목표로 해왔음
     * instant보다 더 빨라지기 위해, 사용자의 ""다음 편집 동작을 예측""하는 방식을 채택
     * 이를 위해 Zed는 새롭게 edit prediction 기능을 공개했고, 이는 Zeta라는 오픈 소스 모델을 기반으로 동작함
     * 사용 중에 tab 키로 예측된 편집을 바로 적용할 수 있으며, 여러 후속 편집도 연속으로 실행 가능함
     * 많은 요청을 받은 기능이며, 최대한 자연스럽게 Zed 편집 환경과 어우러지도록 개발됨
     * 현재 퍼블릭 베타 기간 동안 Zed를 다운로드해 GitHub 계정으로 로그인하면 무료로 Zeta를 이용 가능함
     * 다만 edit prediction은 추후 무료가 아닐 수도 있으나, 지금은 함께 실험하고 배우기 위해 공개 중임

Thoughtful Integration

     * edit prediction 기능이 추가되면서 tab 키가 강력해졌음
     * 하지만 기존에 tab으로 들여쓰기를 하거나, 언어 서버(LS)에서 제공하는 제안사항을 확인하는 사용 방식과 충돌할 수 있음
     * 언어 서버에서 제공하는 코드 제안이 보이면, option/alt 키를 눌러야 비로소 예측 편집이 미리보기로 표시됨
     * macOS에서는 tab으로 예측 편집을 확정할 수 있고, option을 해제하면 원래 언어 서버 제안 화면으로 돌아옴
     * Linux에서 alt-tab이 윈도 매니저에 예약된 경우가 많아, 기본값으로 alt-l을 제공함
     * Linux 환경에서 alt-tab이 충돌되지 않는다면 그대로 사용 가능함

Introducing Zeta: Zed's Open Source Edit Prediction Model

     * Zeta는 Qwen2.5-Coder-7B를 기반으로 개발된 오픈 소스 모델임
     * 오픈 데이터셋(링크)도 공개 중임
     * 오픈 소스 저장소에서 작업하는 경우, Zeta 향상을 위해 데이터셋에 기여해 주길 희망함
     * 초기에는 안전과 프라이버시 검토를 거친 뒤 데이터가 반영될 예정임
     * 함께 노력해 edit prediction을 전반적으로 더 나은 기능으로 만들고자 함
     * 영상 링크: How Zed’s Open-Source Edit Predictions Work

Editing By Rewriting

     * 대부분의 코딩 모델은 “fill in the middle” 방식으로 학습함
     * prefix와 suffix를 주고, 그 사이를 모델이 생성하는 구조임
     * 한편 Zeta는 임의 위치의 편집을 예측해야 해서 기존 구조와 맞지 않는 과제임
     * 모델이 세밀한 단위의 변경보다는 비교적 큰 코드 덩어리 재작성에 능숙하다는 점에 주목함
     * 그래서 최근 편집 이력과 커서 위치를 입력받아, 해당 코드 조각을 재작성하는 방식을 택함

Evaluating Predictions

     * 대형 언어 모델의 결과는 매번 동일하게 나오지 않을 수 있어, 테스트가 까다롭다는 문제점이 있음
     * 온도(temperature)를 0으로 설정하거나, RNG 시드를 지정해 변동을 어느 정도 제어할 수 있음
     * 하지만 코드라는 것은 여러 정답이 가능해서, 결과가 기대 답안과 달라도 올바를 때가 있음
     * 전통적 단위 테스트가 어려워서, 더 큰 LLM을 활용해 Zeta의 결과를 자연어로 검사하는 방식을 시도함
     * 예: “왼쪽과 오른쪽 배열에 대해 재귀적으로 quicksort 함수를 호출하는지”와 같은 요구사항을 두고, Claude가 의도에 부합하는지 판별하도록 만듦

Prompt Engineering

     * 처음에는 Qwen2.5-Coder-32B 모델을 사용해, 어떤 편집을 예측해야 하는지 명확히 지시하는 프롬프트를 구성함
     * 초기 몇 개의 테스트(eval)는 통과했으나, 테스트가 늘어날수록 프롬프트만 변경해서는 일관된 결과를 내기 어려워짐
     * 32b 모델은 응답 지연이 커서, Zed의 엄격한 성능 기준에도 맞지 않았음

Supervised Fine-Tuning

     * 여러 접근을 시도한 끝에, Unsloth와 LoRA를 이용한 감독학습(fine-tuning)으로 전환함
     * 최근 편집 이력에서 사용자가 원하는 변화를 추론하고, 코드 조각을 부정확한 삽입 없이 잘 작성하도록 가르치는 목표임
     * 하지만 초기에는 실제 사용자 데이터가 부족해, Claude를 통해 50개 정도 합성 예시를 만들어 데이터셋에 추가함
     * 이후 초기 버전을 Zed에 기능 플래그로 배포해, 내부 팀이 실제 사용 예시를 생성해 데이터셋을 확대함
     * 약 400개 예시로 모델 정확도를 높였으나, 파일 일부 구간만 편집할 때 모델이 불필요한 변경을 가하는 문제가 남아있었음

Direct Preference Optimization

     * 이 문제 해결을 위해 DPO(Direct Preference Optimization) 기법을 도입함
     * 단순히 ‘좋은 예시’를 보여주는 것뿐 아니라 ‘피해야 할 예시’도 명시하며, 모델이 부적절한 편집을 구분하도록 학습함
     * 약 150개의 주의 깊게 선정된 예시만으로도 까다로운 사례에서 모델 동작이 크게 향상됨
     * 더 다양한 예시를 수집하면 추가 개선이 가능할 것으로 기대함

Minimizing Latency: Speculative Decoding

     * Zed의 모든 기능과 마찬가지로, edit prediction에서도 지연(레이턴시)을 최소화하는 것이 핵심임
     * p50이 200ms 이하고, p90이 500ms 이하가 목표임
     * 코드 일부를 재작성하려면 생성해야 할 토큰 수가 많아져, 일반적인 fill-in-middle 방식보다 느릴 수 있음
     * 그러나 rewrite 과정에서 원본 코드와 상당히 비슷한 부분이 많다는 점을 활용해, speculative decoding 기법을 적용함
     * 입력을 참조해 n-gram 검색으로 병렬 토큰 생성을 진행, 품질 저하 없이 속도를 높이는 전략임

Minimizing Latency: Serving The Model

     * 모델 추론 속도 외에도 서버 환경에서의 모델 제공(Serving) 방식이 큰 과제였음
     * 지금까지 팀이 수행해온 것 중 가장 많은 연산량이 필요한 문제임
     * 런칭 시점에 짧은 검증 과정을 거쳐 Baseten을 선택함
     * Baseten 엔지니어들이 Zeta 모델을 최적화해 주었고, 원하는 지연 기준을 달성했음
     * 네트워크 전송 시간도 주요 요인이므로, 미국과 유럽 지역에 GPU를 배치해 물리적으로 가까운 위치에서 요청을 처리함
     * Cloudflare Workers를 통해 사용자와 가까운 데이터 센터에서 요청을 중계함

Conclusion

     * 앞으로 edit prediction을 더 강력하게 만들 다양한 방향을 탐색할 예정임
     * 모델이 받는 컨텍스트 양을 늘리고, 추가 fine-tuning을 진행하며, Zeta 데이터셋을 확장해 개선해 나갈 계획임
     * 작년 가을 Zed AI를 출시한 이후로 많은 것을 배웠음
     * 세상이 빠르게 바뀌는 만큼, 사용자들이 사랑할 만한 기능을 지속적으로 실험하고 구축 중임
     * AI도 Zed가 추구해온 오픈소스 정신으로 함께 발전시키고 싶음
     * 사용자, 기여자, 팀원으로 누구나 함께할 수 있길 바라며, 더욱 멋진 미래를 열기 위해 달리는 중임

   Atom 개발자들이 만든 새로운 에디터. 오픈 베타 시작
   협업용 코드 편집기 'Zed', 이제 오픈 소스로 전환
   Zed AI 공개 (with Anthropic)

        Hacker News 의견

     * Zed의 예측 편집 기능은 현재 무료지만, 나중에는 유료화될 가능성이 있음. 사용자는 가격이 정해지면 워크플로우에 통합할지 결정할 것임. 무료 체험을 원하지만, 가격이 비싸면 사용하지 않을 것임
          + Zed는 파일 유형당 하나의 LSP만 실행 가능함. Rust와 C++는 잘 작동하지만, Angular는 그렇지 않음
          + 원격 편집 기능은 Windows에서 작동하지 않음. Windows에서 원격 편집 기능을 사용하려면 SSH 지원이 필요함
     * 예측 기능이 너무 과도하게 사용되고 있음. 사용자는 예측 기능이 방해가 된다고 느끼며, 자신의 작업 흐름을 방해한다고 생각함
          + 예측 기능이 너무 많이 사용되면 오히려 도움이 되지 않음. 알고리즘이 사람의 생각을 읽을 수 없으므로, 사용자의 작업을 방해하지 않도록 해야 함
     * 코드가 제3자에게 전송되는 것을 원하지 않음. 특히 비밀 파일을 편집할 때, 개인 키나 API 키가 전송될 수 있음
          + 로컬 옵션이 제공되기를 바람
     * Zed의 새로운 기능 광고 방식이 마음에 듦. 상단 왼쪽에 배너로 표시되며, 사용자의 작업을 방해하지 않음
          + 다른 소프트웨어처럼 사용자가 새로운 기능을 확인하도록 강요하지 않음
     * Zed는 주석 자동 완성을 시도함. 사용자는 주석 부분에서 자동 완성을 원하지 않으며, 이를 비활성화할 수 있는 옵션이 추가됨
     * CoPilot의 제안 수락 인터페이스가 불편함. 탭 키를 사용하면 원치 않는 AI 제안이 많이 나옴
     * 텍스트 에디터에서 안정성을 선호함. AI 관련 기능이 많으면 오히려 불편함
          + Zed를 사용해보니 좋았음
     * 현대 Intellisense는 적절한 예측 기능을 제공함. AI 예측은 너무 과도하게 사용됨
          + AI가 프로그램 구조와 패턴 추천을 제공하면 유용할 것임. 프로그램이 커질수록 구조화하기 어려워짐
     * Zed의 기능을 로컬에서 사용하기 위한 모델 파일을 정의할 수 있음. 하지만 Zed가 이 기능의 엔드포인트를 변경할 수 있는지는 불확실함
"
"https://news.hada.io/topic?id=19284","BigQuery, 이제 SQL 파이프 구문 사용 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BigQuery, 이제 SQL 파이프 구문 사용 가능

Pipe Query Syntax란?

     * GoogleSQL의 확장 문법으로, 읽기 쉽고 유지보수가 간편한 선형 구조의 쿼리 작성 가능
     * 기존 GoogleSQL(Standard SQL)과 동일한 연산 지원(선택, 그룹화, 조인, 필터링 등)
     * 연산 순서를 자유롭게 지정 가능하며, 중첩 서브쿼리 없이도 복잡한 쿼리 작성 가능

Standard SQL vs Pipe Query Syntax

     * Standard SQL
          + 특정한 구문 순서를 따라야 함
          + 다중 집계를 사용하면 CTE(Common Table Expression) 또는 중첩 서브쿼리가 필요함
          + SELECT, GROUP BY, ORDER BY에서 중복된 컬럼을 반복해야 함
     * Pipe Query Syntax
          + Pipe 연산자를 어떤 순서로든 적용 가능
          + Pipe 연산자를 추가하는 것만으로 간단하게 다중 집계 가능
          + 한 번만 컬럼을 선언하면 됨

Pipe Query Syntax 기본 구조

     *
         1. FROM 절로 시작
     *
         2. |> (pipe 연산자) 뒤에 연산을 추가
     *
         3. 여러 개의 |> 연산자를 연결하여 단계적으로 쿼리를 구성
            (예: 필터링 → 집계 → 조인 순서 변경 가능)
     * 핵심 특성
          + 어떤 쿼리에도 Pipe 연산자 추가 가능 → 기존 GoogleSQL 쿼리 끝에 |> 연산자를 붙여 확장 가능
          + 연산 순서가 자유로움 → 원하는 순서대로, 원하는 횟수만큼 연산자 적용 가능
          + 모든 GoogleSQL 지원 환경에서 사용 가능 → 쿼리, 뷰, 테이블 반환 함수 등에서 활용 가능
          + 기존 SQL 문법과 혼합 사용 가능 → 서브쿼리는 표준 SQL, 메인 쿼리는 Pipe 문법으로 작성 가능
          + 이전 단계에서 정의한 모든 별칭(Alias)을 참조 가능
          + FROM 절로 시작 가능 → 이후 |> 연산자를 추가하여 점진적으로 쿼리 확장 가능

Pipe Query Syntax 와 Standard SQL 의 차이점

     * FROM 절로 쿼리 시작 가능
     * SELECT pipe 연산자는 집계를 수행하지 않음. AGGREGATE pipe 연산자를 사용하여 별도로 집계 수행
     * WHERE pipe 연산자로 필터링 수행. 표준 SQL에서의 WHERE, HAVING, QUALIFY 기능을 하나로 통합. 어느 단계에서든 필터링 가능 → 유연한 쿼리 작성 가능

Pipe Query Syntax의 장점

     * 논리적인 순서대로 쿼리 작성 가능 → 쿼리 가독성 향상
     * 유지보수 용이 → 중첩 서브쿼리 없이도 복잡한 연산 수행 가능
     * 유연한 연산 순서 → 원하는 순서대로 연산 적용 가능
     * 필터링이 더 직관적 → WHERE을 활용하여 다양한 단계에서 데이터 필터링 가능
     * 복잡한 집계 쿼리를 더 쉽게 작성 → AGGREGATE 연산자를 사용하여 명확한 집계 수행

   Pre-GA 단계로 지원되는 것이며, 아직 지원은 제한적

   https://github.com/tc39/proposal-pipeline-operator

   꽤 낯이 익은 연산자로군요

   prql을 먼저 보고 구글의 파이프라인 문법을 보니. 살짝 산만하군요.

        Hacker News 의견

     * SQL의 파이프 문법이 2025년 1월 30일부터 Databricks에 구현되었음
          + 이전에는 SQL 확장이 어려웠고, 테이블 값 함수가 복잡했음
          + 이제는 고차 함수로 데이터 강화, 예측, 그룹화 등을 할 수 있게 되었음
          + 예를 들어, 특정 날짜 이후의 주문을 필터링하고, 고객별로 총 지출을 집계한 후, 특정 금액 이상인 고객을 필터링하여 고객 정보와 조인할 수 있음
          + 파이프를 사용한 반복 SQL은 GenAI와 함께 더 잘 작동할 수 있음
     * PRQL은 SQL로 컴파일되는 유사한 아이디어임
          + 예를 들어, 송장 데이터를 필터링하고, 수수료를 계산한 후, 수익이 일정 금액 이상인 데이터를 필터링할 수 있음
     * SQL 문법 확장이 계속되면 복잡성이 증가할 수 있음
          + SQL 구현자들이 외부 대체 문법을 더 잘 지원할 수 있도록 소스 맵 등에 집중했으면 좋겠음
          + 각 프로젝트나 개인이 자신에게 맞는 SQL 문법 변형을 선택할 수 있게 됨
     * 파이프 문법이 처음 발표되었을 때 SQLite 팀이 이를 시험해 보았음
          + 파이프 문자가 필수적이지 않다는 것을 발견했으며, 문법이 파이프 문자가 선택적일 때도 작동함
          + 개인적으로는 이 방식이 더 보기 좋다고 생각함
     * PRQL은 SQL DB를 위한 파이프 지향 문법으로, 새로운 언어이기 때문에 SQL과의 하위 호환성이 없음
          + Google과 같은 대기업의 지원을 받지 못하지만, 문법이 더 깔끔함
     * DuckDB에서도 사용 가능함
     * 파이프 뒤에 "">""를 입력하는 것이 번거로울 수 있음
     * Malloy 언어는 파이프 문법은 아니지만 유사한 분석적 문법을 가지고 있음
          + Looker의 공동 창립자인 Lloyd Tabb가 개발함
     * Kusto Query Language를 사용한 이후로 SQL이 이와 같은 기능을 갖추기를 기대하고 있음
          + 충분한 DB가 확장 기능으로 이를 지원하면 가능성이 있을 것임
"
"https://news.hada.io/topic?id=19197","내가 살아남지 못한 해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              내가 살아남지 못한 해

     * 삶의 가장 파괴적이면서도 창조적인 해: 남편 Jake의 몸에서 세포가 분열하여 그를 죽였고, 내 몸에서는 세포가 분열하여 딸 Athena에게 생명을 주었음. Jake와 함께 내가 알던 '나'도 사라졌음.
     * 슬픔과 모성애가 뇌와 몸, 자아를 변화시킴: Jake가 살아있을 때는 임상 시험을 모니터링하고, 그의 의료 관리를 감독하며, IVF와 임신을 관리했음. 그러나 이제는 간단한 일조차도 감당하기 어려움.
     * 슬픔과 새로운 모성애가 뇌 구조에 미치는 영향: 슬픔과 모성애는 뇌의 구조적 변화를 일으킴. 감정과 이론적 사고를 담당하는 영역이 강화되었으며, 이는 딸 Athena와의 유대감을 향상시킴.
     * 자아의 변화: 친구들은 내가 여전히 '나'처럼 보인다고 하지만, 나는 자아를 잃은 느낌임. Jake와 Athena가 내 자아의 일부가 되었음.
     * 몸의 변화: 임신과 출산은 몸에 큰 변화를 가져옴. Jake의 죽음과 Athena의 탄생 이후 몸은 느슨해지고, 피로와 혼란으로 가득 찬 상태임.
     * 사랑과 상실: Jake와의 사랑은 나를 모든 나이로 보게 했음. Jake가 없으면 나를 그렇게 볼 사람은 없을 것임.
     * 욕망의 해: Jake가 살아있기를 바랐고, 딸과의 미래를 함께 만들고 싶었음. 그러나 기적은 일어나지 않았음.
     * 새로운 삶의 시작: Jake와의 약속을 지키기 위해 새로운 삶을 만들어야 하지만, 그 약속을 한 사람은 이제 사라졌음. 딸 Athena의 미소가 새로운 사랑의 시작이 될 수 있음을 깨달음.

        Hacker News 의견

     * 내 아들은 COVID 동안 암에 걸렸지만 다행히도 완치되었음. 나는 군 복무 중이었고, 아들은 비언어적 자폐증을 가지고 있었음. 그녀가 말하는 것들, 집중했던 것들, 그리고 지금은 그것을 하기 얼마나 어려운지에 대해 나도 같은 경험을 하고 있음. 3년 동안 그의 치료를 관리하고, 그의 침대 옆에서 일하며, 간호사들에게 소리치고, 50시간 이상 일하면서 완전히 지쳐버린 것 같음. 나는 천천히 회복되고 있는 걸까? 하지만 그렇게 느껴지지 않음. 잠시 동안 다시 그 리듬을 찾을 때가 있지만, 그것을 계속 유지할 수 없다는 사실이 두려움. 이 댓글이 그녀의 이야기에 무언가를 더하는지는 모르겠지만, 그녀를 이해할 수 있다는 느낌이 들었음.
     * Sisyphean이라는 단어는 아내가 2024년 11월 6일에 생을 마감한 이후로 자주 떠오르는 단어임. 그녀의 기억을 기리기 위해 노력하고 있지만, 그녀를 구할 수 없었던 사랑이 너무나도 컸음. 아버지를 갑작스럽게 잃고, 할머니도 그 전에 잃었지만, 파트너를 잃는 것은 그 어떤 슬픔이나 고통보다도 더 큰 충격이었음. OP와 다른 사람들이 그들의 큰 상실을 공유해줘서 감사함. 사랑이 결국 슬픔으로 변한다는 것을 알고 있지만, 그것이 더 보편적인 경험이라는 사실이 나를 조금 덜 외롭게 만듦.
     * 나는 글을 읽을 때 (또는 일반적으로) 거의 울지 않지만, 이 글의 감동은 너무 컸음. 아내가 두 번째 임신 중에 겪었던 많은 변화를 기억함. Bess가 겪었던 모든 것들과 비교하면, 그것을 생각하는 것조차 너무 잔인함. 힘내라 Bess.
     * 짧은 시간 안에 큰 일들이 연속적으로 일어나는 것이 사람을 어떻게 변화시키는지 이상함. 몇 년 전, 지인을 자살로 막지 못했을 때 정말로 큰 충격을 받았음. 그 사람을 잘 알지 못했지만, 그에 대한 죄책감을 느끼지 않을 수 없었고, 여전히 악몽을 꾸고 있음. 그것은 심각한 우울증으로 이어졌고, 여전히 극복하지 못했음. 치료사도 만나고, 우울증과 PTSD를 위한 다양한 약물도 복용했지만, 2021년보다 더 나쁜 사람이 된 것 같음. 나이가 들수록 이런 일이 일어날 가능성이 1에 가까워지지만, 그것이 끔찍하지 않다는 것은 아님.
     * 이 이야기는 힘들었고, 댓글들은 OP의 고통 위에 추가적인 인간의 고통을 보여줌. 몇 개의 댓글을 읽고 나서, ""와우""라고 생각하며 나머지를 스크롤하고 있음. HN을 거의 매일 읽으며 기술 블로그, 스타트업 소문, API 비판을 분석하는데, 이 사람들이 실제로 ""진짜"" 문제를 가진 ""진짜"" 사람들이라는 것이 좋음. 모든 고통을 겪고 있는 사람들에게 큰 포옹을 주고 싶음. 우리는 모두 하나의 삶을 가지고 있으니, 의미 있는 방식으로 살고, 서로를 도우며, 서로에게 잘 대해주자. 다른 것은 정말로 가치가 없음. 슬픔에 잠기고, 상실을 겪고, 슬프고, 트라우마를 겪는 것은 모두 끔찍하지만, 나는 모든 것이 극복될 수 있다고 믿음. 당신은 같지 않겠지만, 다른 버전의 당신은 치유될 수 있고, 더 인식하고, 겸손하고, 느리고, 감사하는 삶을 살 수 있음.
     * 지난 수요일에 어머니를 잃었고, 오늘은 그녀의 85번째 생일이었음. 그녀의 삶은 OP의 이야기나 여기 많은 댓글들처럼 갑작스럽게 끝나지 않았지만, 이 일화들은 내가 아직 나의 상실을 제대로 인식하지 못하고 있다는 것을 깨닫게 함.
     * COVID 동안 우리에게도 비슷한 일이 있었음. 아이가 태어난 지 몇 주 후에 시아버지가 돌아가셨음. 우리는 둘 다의 주된 돌봄자였음. 죽음의 도우미를 추천하고 싶음. 출산 도우미는 돈을 쓸 수 있다면 매우 좋고 가치가 있음. 죽음의 도우미도 있었으면 좋았을 것 같음. 서류 작업, 성인 기저귀, 큰 사람의 청소, 욕창, 장례식장 등 많은 작은 일들이 머릿속에 쌓여 터질 것 같음. 이 글을 읽으면서 내가 있었던 장소와 사람으로 돌아가는 느낌이었음. 스트레스와 아드레날린으로 살아가는 느낌을 이해함. 밤에 술을 마시기 시작했는데, 그것은 현명하지 않았고, 내가 얻고 있던 적은 수면을 망쳤음. 커피 중독자나 전자담배를 피웠어야 했음. 솔직히 말해서, 결국 아무것도 도움이 되지 않았음. 외로움과 완전한 소진을 이해함. 약 3년 동안은 기계적인 로봇 같은
       나였음. 분노 외에는 거의 진정한 감정이 없었음. 첫해의 독감도 전혀 도움이 되지 않았음. 지금은 더 나아졌지만, 마치 Dr. Who의 변신처럼, 나는 새로운 나임. 모든 기억을 가지고 있지만, 예전의 나는 아님. 첫 키스가 당신을 변화시킬 것이라고 생각했지만, 그렇게 많이 변화시키지는 않았음. 새로운 부모가 되고 그 아이의 할아버지가 한 달 안에 사망한 경험은 내가 생각했던 것보다 훨씬 더 많이 나를 변화시켰음. 그리고 나는 그것이 나를 변화시킨 것을 정말로 좋아하지 않음. 더 나아질까? 아마도, 아직 모르겠음. 그러길 바람.
     * 매우 슬픔. 아직 링크를 열지 않았다면, 이것은 HN에서 매우 활동적이었던 Jake Seliger의 미망인으로부터 온 것임. 그는 몇 달 전에 사망했음. 새로운 엄마가 되면서 슬픔을 겪는 것은 잔인할 것임.
     * 이 스레드를 친숙함과 공감으로 읽었고, 몇몇 사람들이 PTSD의 증상을 설명하고 있다는 것을 말하고 싶음. 짧은 순간의 트라우마가 우리 몸과 마음에 지속적인 영향을 미칠 수 있음. 무기력하고, 사건을 되새기고, 두려워하고, 과민 반응하고, 안개 속을 걷는 것 같은 느낌이 들고, 나아지지 않는다면, 이것이 바로 PTSD의 느낌임. 초기 조건이 전쟁이나 아동 학대일 필요는 없음. 자동차 사고도 그것을 유발할 수 있음. 복합 PTSD는 시간이 지나면서 벗어날 수 없는 트라우마 사건으로 인해 종종 발생함. 위험하고 치료하기 어려울 수 있지만, 종종 치료 가능함. 이 주제에 대해 읽은 것 중 가장 좋은 것은 ""The Body Keeps the Score""임. Pete Walker도 여러 권의 책을 출판했으며, 그의 웹사이트에는 많은 중요한 글들이 있음. PTSD는 사라지지 않음. 그것을 덮어두다가 다시 폭발할
       뿐임. 만약 이것이 당신이라면, 더 읽고 도움을 받으려고 노력하길 바람.
     * 너무 많은 세부 사항에 들어가지 않고, 나는 16세에 진단되지 않은 심장 질환으로 아들을 잃었음. 그것은 유전적이었고, 나를 통해 전달되었음. 그때 나에게 전해진 지혜를 전하고 싶음. 친구가 말했음: ""삶은 살아있는 사람을 위한 것""이라고. 나는 여전히 여기 있음. 모든 것에도 불구하고 계속 살아가는 것이 나의 의무임. 그것이 아들과 엄마가 원했을 것임. 그들의 삶을 기리며, 당신이 여전히 가지고 있는 삶을 계속 살아가길 바람.
"
"https://news.hada.io/topic?id=19296","하비에르 밀레이, '내부자'가 8,700만 달러 챙긴 후 44억 달러 메모코인 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             하비에르 밀레이, '내부자'가 8,700만 달러 챙긴 후 44억 달러 메모코인 철회

     * 알아야 할 것들
          + 아르헨티나 대통령 하비에르 밀레이가 리브라라는 밈코인을 홍보하는 트윗을 올렸다가 삭제함
          + 이 밈코인은 44억 달러의 시가총액에 도달한 후 95% 이상 폭락함
          + 밀레이는 프로젝트의 세부사항을 알지 못한 채 홍보했다고 밝힘
     * 밈코인 리브라의 급등과 폭락
          + 밀레이는 ""아르헨티나 경제 성장을 촉진하는 민간 프로젝트""라고 설명하며 솔라나 계약 주소와 함께 리브라를 홍보하는 트윗을 게시함
          + 리브라는 트윗 후 40분 만에 2,000% 이상 급등했으나, 초기 보유자들이 현금화하면서 급락함
          + X 계정 KobeissiLetter는 내부자들이 메토라에서 리브라만 있는 일방적인 유동성 풀을 추가하여 솔과 스테이블코인을 제거했다고 주장하는 BubbleMaps 스크린샷을 공유함
     * 밀레이의 해명
          + 밀레이는 X에서 ""프로젝트의 세부사항을 알지 못했다""며 트윗을 삭제한 이유를 설명함
          + ""몇 시간 전, 다른 많은 경우처럼 민간 기업을 지지하는 트윗을 게시했으나, 프로젝트의 세부사항을 알지 못했고, 알게 된 후 더 이상 홍보하지 않기로 결정했다""고 밝힘
     * 밈코인 시장에 미친 영향
          + 리브라의 매도세는 더 넓은 밈코인 시장에 영향을 미쳐, TRUMP는 시가총액에서 5억 달러를 잃음
     * CoinDesk 소개
          + CoinDesk는 암호화폐 산업을 다루는 수상 경력이 있는 미디어 아울렛이며, 엄격한 편집 정책을 준수함
          + Bullish 그룹의 일부로, 디지털 자산 비즈니스 및 디지털 자산에 투자함

        Hacker News 의견

     * Milei는 Trump와 달리 이를 밈코인으로 판매하지 않고 ""아르헨티나의 소기업을 지원하기 위한 금융 수단""으로 판매했음
     * Trump는 $TRUMP에 대해 대통령직에 오르기 전 트윗을 했지만, Milei는 이미 아르헨티나의 대통령으로서 트윗을 했음. 이는 명백한 윤리적 위반이며, 법적 문제일 가능성도 있음
     * 시장 점유율의 80%가 단 10개의 계정에 집중되어 있었고, 이 계정들은 대통령의 트윗 후 0-1초 내에 거래를 했음. 이는 명백한 내부자 거래의 증거임
     * Milei가 이 사건에 연루되었는지 아니면 사기의 피해자인지는 불분명하지만, 그는 코인 창작자들과 3-4번 만난 기록이 있어 아무것도 몰랐다고 주장할 수 없음
     * Milei가 경제의 천재라는 잘못된 정보가 많음. 그는 금융 분야에서 실수를 저질렀고, 이는 그의 전문 분야 중 하나임
     * 2-3시간 동안 게시물이 올라와 있었던 동안, 도박코인 생태계를 모르는 사람이 $LIBRA를 구매할 수는 없었음. 돈을 잃은 사람들은 모두 전문적인 밈코인 도박꾼들이며, 이익을 챙긴 사람들은 프로젝트 리더들과 연결되어 있음
     * 아르헨티나에서 이 프로젝트에 돈을 넣었다는 TXHASH를 제시한 사람은 아직 없음. 이는 단순히 Binance에 로그인하여 현금으로 구매할 수 있는 것이 아님
     * 대통령과 그의 고문들은 충분히 조사하지 않고 이른바 ""사업가들""을 맹목적으로 신뢰한 책임이 있음
     * 4.4B라는 숫자는 거대해 보이지만, 이는 ""시가총액""일 뿐이며 실제로 코인에 들어간 돈의 양이 아님
     * Solana의 트렌치는 거대한 범죄가 만연한 카지노와 같음. 모든 참가자는 이를 이해하고 있으며, 돈을 벌 수 있지만 본질적으로 도박임
     * $Libra 토큰이 출시되었을 때, 다른 모든 것이 하락했고, 내부자들에 의해 자본이 빨려 들어갔음
     * 회사는 그에게 Libra 블록체인 프로젝트와 국가 내 민간 벤처를 자금 조달하는 목표에 대해 알렸음
     * 코인을 구매하여 특별한 목적을 지원한다는 주장은 근거가 없음. 목적을 지원하고 싶다면 그 목적에 직접 돈을 주어야 함
     * WorldCoin을 떠올리게 했으며, 여전히 사상 최저가보다 0.01 높은 가격에 거래되고 있음
     * 이는 돼지 도살 사기의 변형임. 돼지 도살 사기는 흔하며, 게임에 너무 깊이 빠져 멈출 수 없는 많은 사람들을 망침
     * Crypto는 사기꾼과 인기를 이용해 일반 사람들을 속이는 데 사용되고 있음
     * Coffeezilla가 이에 대한 좋은 인터뷰를 진행했음
"
"https://news.hada.io/topic?id=19288","자체 제작한 Polarimetric Synthetic Aperture Radar 드론","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            자체 제작한 Polarimetric Synthetic Aperture Radar 드론

자작 편광 합성 개구 레이더 드론

  소개

     * 저자는 여러 자작 레이더를 만들고 지상에서 합성 개구 이미징 테스트를 수행해 왔음.
     * 드론에 레이더를 장착하여 공중에서 합성 개구 이미지를 캡처하고자 했음.
     * 과거에는 중형 드론의 가격이 높았으나, 최근에는 중국산 FPV 드론 가격이 크게 하락했음.
     * 저자는 저렴한 중국산 7인치 FPV 키트와 소형 GPS+컴퍼스 모듈을 구매하여 경량 합성 개구 레이더 시스템을 만들고자 함.

  합성 개구 이미징

     * 단일 채널 레이더는 목표물의 거리만 측정할 수 있으며 각도를 감지할 수 없음.
     * 여러 수신 채널을 선형으로 배열하면 목표물의 각도에 따라 신호가 약간 다른 거리를 이동하여 위상 변화를 일으킴.
     * 합성 개구 레이더는 단일 채널 레이더를 드론에 장착하여 비행 중 측정을 수행하고, 뛰어난 각도 해상도를 제공하는 큰 합성 개구를 생성할 수 있음.

  레이더 설계

     * 레이더 설계 목표는 FPV 드론에 맞추고 최소 예산(<500 EUR)으로 최상의 이미징 성능을 얻는 것임.
     * 드론의 크기가 작아 레이더의 최대 크기가 제한됨.
     * 여러 레이더 아키텍처가 있으며, FMCW 레이더는 단거리 및 느리게 움직이는 플랫폼에 유리함.

  RF 설계

     * FMCW 레이더는 송신 및 수신 안테나를 동시에 사용할 수 있어 신호 대 잡음비(SNR)를 개선할 수 있음.
     * 송신 및 수신 안테나의 편광을 선택할 수 있는 편광 스위치가 있음.
     * 송신 전력, 안테나 이득, 파장, 목표물의 레이더 단면적, 거리 등을 고려하여 수신 전력을 계산할 수 있음.

  링크 예산

     * 수신 전력은 송신 전력, 안테나 이득, 파장, 목표물의 레이더 단면적, 거리 등을 고려하여 계산됨.
     * 합성 개구는 이동 중 여러 펄스를 전송하여 형성되며, 이는 신호 대 잡음비를 증가시킴.

  펄스 반복 주파수

     * 레이더 이미지 형성은 수신 신호의 위상 정보를 기반으로 함.
     * 최대 위상 차이가 180도를 넘지 않도록 해야 하며, 이는 측정 간격이 1/4 파장 이상일 때 발생할 수 있음.

  필요한 ADC 샘플링 주파수

     * FMCW 레이더는 수신 신호를 송신 스윕의 복사본과 혼합하여 믹서 출력에서 사인파 신호를 생성함.
     * 최대 목표 거리와 RF 대역폭에 따라 필요한 ADC 샘플링 속도를 계산할 수 있음.

  FPGA

     * FPGA는 데이터 양과 스윕 생성의 엄격한 타이밍 요구 사항을 처리하기 위해 필요함.
     * Zynq 7020 FPGA를 사용하여 FPGA 패브릭과 듀얼 코어 ARM 프로세서를 결합함.

  PCB

     * PCB는 6층으로 설계되었으며, 가능한 한 작게 설계됨.
     * 드론의 배터리에 직접 연결할 수 있도록 설계됨.

  드론 전자 장치

     * 드론 키트에 포함된 비행 컨트롤러는 Speedybee F405 V3임.
     * ArduPilot 소프트웨어를 사용하여 자율 비행을 지원함.

  안테나

     * 안테나의 빔 폭이 넓을수록 SAR 이미지의 해상도가 향상됨.
     * 드론 SAR의 경우 안테나의 크기가 제한적이므로 큰 안테나를 드론에 장착하기 어려움.
     * 스택형 패치 안테나를 사용하여 듀얼 편광, 넓은 대역폭, 높은 이득을 제공함.

        Hacker News 의견

     * 최근 소형 FPV 드론의 가격이 많이 하락했음. 중국에서 배터리와 RC 컨트롤러를 제외하고 약 100 유로에 5인치와 7인치 프로펠러 쿼드콥터를 구매할 수 있음
          + 작은 크기에도 불구하고 약 1kg 이상의 하중을 들어 올릴 수 있어 소형 레이더에 충분함
          + 가격 하락의 이유는 중국이 우크라이나 양측에 대량으로 판매하고 있기 때문임. 중국은 규모의 경제를 통해 이익을 얻고 있으며, 러시아와 우크라이나는 매달 약 100,000개의 드론을 소모하고 있음. 대부분의 부품은 중국에서 조달됨
     * DIYer로서 Henrik이 신호 처리, 하드웨어, GPU 가속, 알고리즘 최적화 등 복잡한 부분을 얼마나 잘 구현했는지에 감탄함. HN 커뮤니티에 이런 놀라운 업적에 대한 상이 있었으면 좋겠음
     * SAR 알고리즘이 설명된 것을 처음 봄. 지금까지 본 SAR 프로젝트들은 이 부분을 대충 넘겼음
          + 다른 자료를 본 사람이 있는지 궁금함. 링크된 논문을 소화해볼 예정임
          + 위치 문제를 자동 초점으로 많이 해결할 수 있는 것 같음. 이 부분도 처음 봄
     * 훨씬 더 비싼 시스템에서 나온 SAR 이미지들을 많이 봤지만, 이 정도로 좋은 이미지는 본 적이 없음. 정말 놀라운 작업임
     * 업보트만으로는 이 작업의 가치를 충분히 표현할 수 없음. 정말 놀라운 글임. 감사함
     * 이것이 내가 HackerNews를 읽는 이유임
          + 매달 새로운 기사가 나의 교외 미사일 방어 시스템을 개선해주고, 이웃들이 내 잔디에 개를 데리고 오지 않도록 보장해줌
          + 내 로켓이 올바른 범죄자를 찾아갈 수 있도록 내 이웃을 지형 맵핑하는 것이 항상 도전이었음. 이제 드론을 사용할 수 있음
          + 미사일이 있는 방어 시스템이지, 미사일에 대한 방어 시스템은 아님. 그건 어리석음
     * 정말 놀라운 프로젝트임. 멋진 프로젝트를 만들기 위한 기술의 훌륭한 종합임. 감탄함
     * 100미터 안테나가 필요하다면, 여러 드론을 사용해 100미터 포물선 궤도를 조정하여 근사할 수 있을까?
     * 이 프로젝트는 밤에도 나무 뒤에 있는 러시아인을 볼 수 있을 것임
          + 곧 중국 드론이 유럽 도시를 공격하며 24/7 민간인을 사냥할 수 있을 것임?
     * 정말 인상적인 프로젝트와 훌륭한 결과임. HN에 공유해줘서 고마움
"
"https://news.hada.io/topic?id=19234","누구나 업데이트할 수 있는 doge.gov 웹사이트","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      누구나 업데이트할 수 있는 doge.gov 웹사이트

     * Doge.gov 웹사이트의 보안 문제
          + Doge.gov는 엘론 머스크가 연방 정부의 감축을 추적하기 위해 만든 웹사이트로, 보안이 취약하며 누구나 데이터베이스를 수정할 수 있는 것으로 드러남.
          + 두 명의 개발자가 데이터베이스에 ""이것은 농담 같은 .gov 사이트""와 ""이 '전문가들'은 데이터베이스를 열어두었다""라는 항목을 추가함.
     * Doge.gov의 배경
          + 엘론 머스크는 정부 효율성 부서가 가능한 한 투명하게 운영되고 있다고 주장하며 DOGE 웹사이트에 관련 정보를 게시한다고 발표함.
          + 초기에는 빈 페이지였던 DOGE 웹사이트는 이후 @DOGE X 계정의 게시물과 미국 연방 인력에 대한 통계를 보여주는 사이트로 발전함.
     * 기술적 문제
          + 두 명의 웹 개발 전문가에 따르면, Doge.gov는 현재 정부 서버가 아닌 Cloudflare Pages 사이트에서 운영되고 있음.
          + 데이터베이스는 제3자가 수정할 수 있으며, 수정된 내용은 실시간 웹사이트에 표시됨.

        Hacker News 의견

     * 미국 디지털 서비스(USDS)는 연방 정부를 위한 정적 웹사이트 구축 및 배포에 오랜 전문성을 가지고 있음
          + 이들은 완전히 공개적으로 작업을 수행하며, 몇 분 안에 https://usds.gov의 모든 콘텐츠를 복제하고 재배포할 수 있음
          + Jekyll로 구축된 2,700개의 자산과 문서, 150MB의 콘텐츠를 로컬 또는 S3에 배포할 수 있음
          + 배포 지침도 완벽하게 작성되어 있음: https://github.com/usds/website
     * 해킹 자체에 대해 이야기하고 싶은 사람이 있는지 궁금함
          + ""데이터베이스를 열어두었다""는 것 이상의 자세한 정보를 제공할 수 있는 사람이 있는지 궁금함
          + 이 사이트에 와서 실제 토론을 기대했지만 아직 보지 못했음
     * DOGE는 ""Vox Populi, Vox Dei""를 Twitter보다 더 잘 구현하는 것 같음
     * 아이러니하게도 WHOIS 기록이 CISA(사이버 보안 및 인프라 보안 기관)를 가리킴
          + 매우 신뢰를 주는 느낌임
     * ""빠르게 움직이며 무언가를 깨뜨리기"", 정부 버전임
     * https://balajis.com/p/americas-175-trillion-problem
          + 이 모든 것과 관련이 있을 수 있음
     * 이런 친구가 있다면 적이 필요 없을 것 같음
     * 모두가 사이버 보안에 투자하는 것이 단지 낭비라고 알고 있음
     * ""Join""을 클릭하면 즉시 ""죄송합니다, doge.gov에 접근할 수 없습니다""라는 CloudFlare 페이지로 리디렉션됨
          + 이상함
"
"https://news.hada.io/topic?id=19307","Andrej Karpathy의 Grok 3 얼리 억세스 리뷰","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Andrej Karpathy의 Grok 3 얼리 억세스 리뷰

Thinking

     * ✅ 최신 사고 모델을 갖추고 있음
          + ""Think"" 버튼을 사용하면 매우 뛰어난 사고력을 보여줌
          + 예: Settlers of Catan 스타일의 웹 보드 게임을 생성하라는 요청을 정확하게 수행
          + 이를 안정적으로 수행하는 모델은 거의 없음
          + 최고인 OpenAI의 o1-pro ($200/월 요금) 와 비슷한 수준이지만, DeepSeek-R1, Gemini 2.0 Flash Thinking, Claude는 같은 문제를 해결하지 못함
     * ❌ ""Emoji mystery""는 실패
          + Unicode 변형 선택자(variation selector)에 숨겨진 메시지를 해독하는 것
          + 이 문제를 해결한 모델은 없지만, DeepSeek-R1이 일부 해독한 적 있음
     * ❓ Tic Tac Toe 문제 풀기
          + 주어진 보드를 올바르게 분석하고, 정교한 사고 과정을 보여줌
          + 하지만 ""어려운"" 보드를 직접 생성하는 것은 실패 (o1-pro도 똑같이 실패함)
     * ✅ GPT-2 논문 업로드 후 복잡한 계산 문제 해결하기
          + GPT-2를 훈련하는데 필요한 FLOP 수를 추정해달라고 요청했음
          + 하지만 논문 내 토큰수가 명시되어 있지 않아서, 부분 추정, 부분 계산이 필요해 룩업, 지식, 수학을 총 동원해야 하므로 까다로움
          + Grok 3과 GPT-4o는 모두 이 작업에 실패하지만 Grok 3 with Thinking 으로는 정확한 추론을 수행함
               o 이 계산 문제는 o1-pro(GPT 추론 모델)도 실패함
     * 리만 가설 도전
          + 대부분의 모델(o1-pro, Claude, Gemini 2.0 Flash Thinking)은 ""미해결 문제""라고 즉시 포기.
          + Grok 3과 DeepSeek-R1은 실제로 해결을 시도함
          + 해결하진 못했지만, 도전 의지를 보였다는 점에서 인상적
     * 전체적인 인상:
          + 실제 벤치마크 결과가 필요하지만, DeepSeek-R1보다 앞선 성능을 보이고, o1-pro와 비슷한 수준

DeepSearch

     * OpenAI & Perplexity가 ""Deep Research"" 라 부르는 것과 Thinking을 결합한 듯한 깔끔한 제품
          + ""Deep Research"" 대신 ""Deep Search""이라는 점을 제외하면..(한숨)
     * 인터넷 기사에 답이 있을 것이라고 상상할 수 있는 다양한 리서치/검색 질문에 대해 고품질의 답변을 생성함
          + 인터넷에서 심층적인 정보를 검색하고 요약 제공
     * 시도한 질문들과 성공/실패 여부
          + ✅ ""이번 Apple Launch는 어떻게 될까? 루머 없나?""
          + ✅ ""Palantir 주가 상승 이유?""
          + ✅ ""White Lotus 시즌3는 어디에서 촬영되었으며 시즌 1, 2와 같은 팀인가?""
          + ✅ ""Bryan Johnson이 쓰는 치약?""
          + ❌ ""솔로 지옥 시즌4 출연진은 지금 어디 있나?""
          + ❌ ""Simon Willison이 사용한다고 얘기한 음성 인식 프로그램은?""
     * ❌ 기본적으로 모델이 X(Twitter)를 출처로 잘 사용하지 않음. (명시적으로 요구해야 함)
          + 가끔 존재하지 않는 URL을 만들어냄 (환각 발생)
          + 출처 없이 잘못된 정보를 제공할 때가 있음
               o 예: ""솔로 지옥 4의 김정수가 아직도 김민설과 연애 중"" → (아닌 것 같음. 아마도?)
          + 또한, 주요 LLM 연구소와 총 자금 규모, 직원 수 추산에 대한 보고서를 만들어 달라고 요청했더니 12개의 주요 연구소를 나열했지만 자신(xAI)은 없었음
     * DeepSearch는 현재 Perplexity의 DeepResearch와 비슷한 수준이지만, OpenAI의 ""Deep Research""보다는 부족함

Random LLM ""Gotcha""

     * 그외에 재미난 랜덤 LLM 쿼리를 시도해봄. 사람에게는 쉬운편이지만 LLM에게는 어려운 것들.
     * ✅ ""strawberry""의 'r' 개수(3개)
     * ✅ ""LOLLAPALOOZA""의 'L' 개수(4개) → ❌ (3개라고 답변했으나, Thinking 모드에서는 맞춤)
     * ✅ ""9.11 > 9.9?"" → ❌ (처음엔 오류, Thinking 모드에서는 수정)
     * ✅ ""Sally(여자)는 3명의 형제가 있다. 각 형제는 2명의 자매가 있다. Sally는 몇명의 자매가 있는가?"" (GPT-4o는 2라고 얘기해서 틀림)
     * ❌ 안타깝게도 모델의 유머 감각은 뚜렷하게 개선되지 않음. 이는 대부분의 LLM에서 나는 문제
          + ChatGPT에게 농담을 만들어 달라고한 1008개의 요청중 90%가 25개의 농담을 반복
     * ❌ ""복잡한 윤리 문제"" 질문에 대해 지나치게 신중한 답변을 함
          + 예: ""1백만 명을 살릴 수 있다면 잘못된 성별을 사용하는 것이 윤리적으로 정당화될 수 있는가?"" → 1페이지짜리 에세이를 작성하며 답변을 회피
     * ❌ ""펠리컨이 자전거를 타는 SVG 생성"" 요청 실패
          + LLM은 텍스트 기반이므로 2D 레이아웃 배치가 어려운 문제점이 여전히 존재
          + Claude 모델이 SVG 생성에 가장 능숙함

총평

     * Grok 3 + Thinking은 OpenAI의 최상위 모델(o1-pro, $200/월)과 비슷한 수준
     * DeepSeek-R1 및 Gemini 2.0 Flash Thinking보다 약간 나은 수준
     * 출시 1년 만에 SOTA(State of the Art) 모델과 경쟁 가능한 AI를 만든 것은 놀라운 성과
     * 모델은 확률적(stochastic)이므로 응답이 매번 다를 수 있으며, 앞으로 평가가 더 필요함
     * LM Arena의 초기결과는 상당히 고무적
     * xAI 팀의 빠른 발전 속도는 인상적이며, 향후 Grok 3를 더 깊이 테스트할 계획임

   어느 날 AI한테 리만가설 풀어봐 했을 때, 하루쯤 고민하고 해답을 딱 내놓으면 난리나겠네요

   솔로지옥 물어본 건 현지화하신 줄 알았는데 진짜 물어봤군요.... ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ

   의역인줄 알았네요

   드디어 좀 신뢰할만한 Grok3 평가가 나왔군 하고 읽다가 솔로지옥 보고 황당했는데..
   윗분 댓글보고 찾아보니 23년에 트윗한게 있군요. 여친이 한국사람이고 한국드라마 같이 많이 본다고.
   세계에서 제일 미쳐돌아가는 업계의 최전선에 있는 사람이 솔로지옥을 볼 줄은 상상도 못했습니다… ㅋㅋㅋㅋ

   아내분이 한국인이라고 하네요

   제가 솔로지옥을 안봐서.. 제목보고 검색해서 알았어요 ㅋㅋㅋ 출연진 이름도 따로 검색해봤네요.
"
"https://news.hada.io/topic?id=19221","국가 사이버 공격으로서의 DOGE","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           국가 사이버 공격으로서의 DOGE

  DOGE의 국가 사이버 공격

     * 최근 몇 주 동안 미국 정부는 역사상 가장 중대한 보안 침해를 경험했음. 이는 복잡한 사이버 공격이나 외국의 스파이 행위가 아닌, 정부 역할이 명확하지 않은 억만장자의 공식 명령을 통해 발생했음.
     * 새로 설립된 정부 효율성 부서(DOGE)와 관련된 사람들이 미국 재무부 컴퓨터 시스템에 접근하여 연간 약 5.45조 달러의 연방 지불 데이터를 수집하고 제어할 수 있는 능력을 가졌음.
     * DOGE의 승인되지 않은 인원이 미국 국제개발처의 기밀 데이터를 접근하여 복사했을 가능성이 있으며, 인사관리처(OPM)와 메디케어 및 메디케이드 기록도 침해되었음.
     * CIA 직원의 이름이 부분적으로 검열된 상태로 비공식 이메일 계정으로 전송되었고, DOGE 인원은 교육부 데이터를 인공지능 소프트웨어에 입력하고 에너지부에서도 작업을 시작했음.
     * 2월 8일, 연방 판사는 DOGE 팀이 재무부 시스템에 더 이상 접근하지 못하도록 차단했으나, 이미 데이터를 복사하고 소프트웨어를 설치 및 수정했을 가능성이 있어 해결책이 불분명함.
     * DOGE가 접근한 시스템은 국가 인프라의 핵심 요소이며, 재무부 시스템은 연방 정부의 자금 이동 기술 청사진을 포함하고 있음.
     * 이 사건은 외부 운영자가 제한된 경험과 최소한의 감독 하에 공개적으로 작업하며, 미국의 가장 민감한 네트워크에 최고 수준의 관리 접근 권한을 얻고 변화를 주고 있다는 점에서 전례 없는 상황임.
     * 가장 우려되는 점은 접근 권한 부여뿐만 아니라, 보안 조치를 체계적으로 해체하고 있다는 것임. 이는 표준 사건 대응 프로토콜, 감사 및 변경 추적 메커니즘을 제거하고 경험이 부족한 운영자로 대체하는 것임.
     * 재무부의 컴퓨터 시스템은 핵무기 발사 프로토콜과 같은 원칙으로 설계되었으며, 단일 개인이 무제한 권한을 가지지 않도록 함. 이는 ""업무 분리""라는 보안 원칙으로, 부패와 오류를 방지하기 위한 필수적인 안전장치임.
     * DOGE와 관련된 인물들이 재무부 컴퓨터의 핵심 프로그램을 수정할 수 있는 권한을 얻었으며, 암호화된 키에 접근하고 시스템 변경을 기록하는 감사 로그를 변경할 수 있음.
     * 이러한 시스템의 수정은 현재 운영을 손상시킬 뿐만 아니라, 미래 공격에서 악용될 수 있는 취약점을 남기고 있음.
     * 세 가지 주요 보안 영역이 위협받고 있음: 시스템 조작, 데이터 노출, 시스템 제어.
     * 이러한 취약점을 해결하기 위해서는 승인되지 않은 접근을 철회하고 적절한 인증 프로토콜을 복원해야 하며, 포괄적인 시스템 모니터링과 변경 관리가 재개되어야 함.
     * 이는 정치적인 문제가 아닌 국가 안보의 문제이며, 외국 정보 기관이 혼란과 새로운 불안정을 이용하여 미국 데이터를 훔치고 백도어를 설치할 가능성이 있음.

        Hacker News 의견

     * 적대적이거나 적국이 데이터를 수집하고 국가를 공격할 방법을 이해할 기회를 얻는 것에 대한 우려가 타당함
          + 선출된 공무원이 어리석거나 불안전한 행동을 하는 것과 비선출된 사람들이 아무런 견제 없이 이를 할 수 있는 것의 차이점이 있음
          + Bruce Schneier의 의견을 존중하며, 이 주제에 대한 모든 게시물이 플래그 처리되는 것을 막기 위해 이 게시물을 추천함
     * Schneier의 논리에 오류가 있을 수 있음
          + ""그들은 이 민감한 데이터에 AI 소프트웨어를 훈련시키고 있다""는 보고가 있음
          + 추론을 실행하는 것은 훈련과 같지 않음
          + 이 게시물이 플래그 처리되어서는 안 되며, 이는 표현의 자유에 반하는 것임
          + HN에서 그의 통찰을 가치 있게 여기는 많은 사람들이 있음
          + 반대 의견은 사라지게 하려는 시도보다는 댓글로 표현하는 것이 더 나음
     * 국가가 이 혼란을 견뎌낸다면, 소프트웨어는 처음부터 다시 작성되어야 함
          + 그렇지 않으면 외국 및 국내의 어떤 행위자가 시스템에 대한 지식을 가지고 있는지 알 수 없음
     * Schneier는 플래그 처리되어서는 안 됨
          + 며칠 동안 사이버 보안 위험에 대한 차분하고 종합적인 평가를 기다려왔음
          + 이것이 우리가 얻을 수 있는 가장 가까운 평가임
     * Chesterton의 울타리 원칙을 인식해야 함
          + ""Chesterton의 울타리""는 기존 상태의 이유를 이해하기 전까지 개혁이 이루어져서는 안 된다는 원칙임
     * 행동은 결과가 부여될 때까지 계속될 것임
          + 이 결과는 입법적이거나 법적이어야 함
     * 신의 뜻이라면, 행정국가는 견제하기 위해 선출된 공무원들에 의해 무릎을 꿇게 될 것임
     * 기업은 비공식적인 정부의 네 번째 부서임
          + 주식 시장이 폭락하면 그들은 사라질 것임
          + 정치인들을 위한 캠페인 기부와 로비스트의 수도꼭지가 꺼질 것임
          + 공황과 리더십이 변화할 것임
          + Citizens United는 어디서든 어두운 돈이 캠페인을 무기한으로 지원할 수 있게 하지만, 미국 달러와 시장에 대한 신뢰 부족으로 인한 주식 시장 폭락을 상쇄하기에는 충분하지 않음
     * 관련 기사: ""재무부는 DOGE 접근이 '내부 위협'으로 표시되었다고 경고받음""
          + Booz Allen Hamilton이 수행한 평가가 Elon Musk의 동맹을 민감한 결제 시스템 감독자로 임명하기 전에 이루어짐
     * 정부 계약자 Booz Allen Hamilton이 금요일 밤에 보고서를 준비한 하청업체를 해고했다고 밝힘
          + Elon Musk의 정부 효율성 부서가 재무부의 결제 시스템에 접근하는 것이 ""전례 없는 내부 위협 위험""을 초래하며 즉시 중단되어야 한다고 주장한 초안 보고서였음
"
"https://news.hada.io/topic?id=19270","OpenAI 홈페이지 개편 - "What can I help with?"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                OpenAI 홈페이지 개편 - ""What can I help with?""

     * 첫 화면에 ""What can I help with?"" 창을 만들고 구글처럼 간단한 질문을 할 수 있는 폼을 추가
     * 다양한 언어로 질문해도 바로 답을 얻을수 있음 (자신들의 제품으로 바로 연결)
     * 그 아래에 ""Search with ChatGPT"", ""Talk with ChatGPT"", ""Research"", ""Sora"" 링크 노출
          + More 에는 API Platform, Stories, For Business 링크 포함

   전 퍼플렉시티 같은 느낌을 ...

   방향이나 느낌이 kagi랑 비슷한 거 같은데 그거보단 좀 더 ai 검색에 가깝겠네요

   확실히 오픈AI가 어디로 가고 싶은지 보여주는 개편이네요
"
"https://news.hada.io/topic?id=19253","자동차 브레이크 먼지, 배기 가스보다 더 유해하다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      자동차 브레이크 먼지, 배기 가스보다 더 유해하다

     * 자동차 오염물질은 배기가스뿐만 아니라 도로, 타이어, 브레이크 마모에서도 발생
     * 새로운 연구에 따르면 브레이크 패드에서 발생하는 미세먼지가 배기가스보다 폐에 더 큰 손상을 줄 수 있음
     * 연구팀은 자동차 브레이크 먼지와 디젤 배기가스에 배양된 인간 폐 세포를 노출시켜봄
     * 결과적으로, 브레이크 먼지가 배기가스보다 더 큰 세포 손상을 유발

새로운 브레이크 패드의 위험성

     * 과거 브레이크 패드에는 석면(asbestos)이 포함되어 있었으며, 이는 암을 유발하는 물질로 알려짐
     * 현대 브레이크 패드는 석면을 사용하지 않지만 구리(copper) 함량이 높음
          + 구리는 흡입 시 천식을 악화시킬 수 있음
     * 연구진은 특정 화학 물질로 브레이크 먼지의 구리를 중화하면 피해를 줄일 수 있음을 발견

규제 현황 및 필요성

     * 캘리포니아(미국)와 워싱턴 주는 브레이크 패드의 구리 사용을 제한하는 법안을 통과
     * 그러나 브레이크 먼지는 여전히 규제되지 않은 오염물질로 남아 있음
     * 연구진은 대기 오염 및 공중보건을 보호하기 위한 법적 규제 필요성을 강조

전기차와 브레이크 먼지 저감

     * 전기차는 브레이크 먼지를 줄이는 데 기여할 수 있음
     * 대부분의 전기차는 회생 제동(regenerative braking) 기술을 사용
          + 회생 제동은 모터가 발전기로 작동하여 회전 에너지를 전력으로 변환
          + 이로 인해 기존 브레이크 패드 사용이 줄어들고, 브레이크 먼지 발생 감소

     결론: 브레이크 먼지가 배기가스보다 폐 건강에 해로울 수 있으며, 이를 줄이기 위한 규제가 필요함. 전기차의 회생 제동 기술이 문제 해결에 기여할 가능성이 있음.

   역시 대세는 전기차. 회생 제동이 또 이런 점에서 좋군요.

        Hacker News 의견

     * 캘리포니아 해안 도시의 반주요 도로 옆에 살면서 도로 옆에 있는 모든 것이 검은 먼지와 쓰레기로 덮이는 것을 보고 놀라움
          + 거리로 나가 식물 잎을 만지면 손이 검게 변함
          + 식물, 주차된 차, 아파트 내부까지 모두 검은 먼지로 덮임
          + 이사를 가고 나서야 문제의 심각성을 깨달음
          + 몇 년 동안 살았지만 아파트 모든 표면이 검은 먼지로 덮여 있었음
          + 짧은 시간 동안 건강에 큰 영향을 미쳤을까 걱정됨
     * Yale 기사와 논문은 전기차가 재생 제동을 사용하고 먼지를 덜 발생시킨다는 점을 강조함
          + 몇 년 전 전기차의 무게가 환경에 나쁘다는 캠페인을 떠올리게 함
          + 헤드라인과 몇 문단만 읽지 말고 전체 내용을 읽어야 함
     * 자동차 타이어가 바다에 고무를 축적시킴
          + 대중교통이 가능한 곳에서는 자동차보다 대중교통을 이용하는 것이 좋다는 여러 주장이 있음
     * 연구자들이 실험실에서 인간 폐 세포를 키우고 자동차 브레이크 먼지와 디젤 배기 가스에 노출시켰을 때 브레이크 먼지가 세포에 더 큰 손상을 입힌다는 것을 발견함
          + 연구가 자동차 브레이크가 배기 가스보다 더 해롭다는 것인지, 아니면 브레이크 화학물질이 배기 가스보다 더 해롭다는 것인지 알 수 없었음
          + 그러나 그것이 중요한 것은 아닐 수 있음, 왜냐하면 그것들은 적은 양으로 생산되기 때문임
     * 더 큰 맥락에 대해 궁금함
          + 학문적 연구가 무엇을 발견하든, 반지성주의 문화의 부상은 우리가 다큐멘터리 노력을 통해 지금 고립된 상태에서 배우는 것이 미래에 더 탐구적인 세대에 의해 행동으로 옮겨질 수 있도록 해야 한다는 것을 시사함
     * 관련된 다른 주요 스레드가 있었던 것 같음
          + 더 많은 정보를 찾을 수 있으면 알려주길 바람
     * 전통적인 브레이크 패드의 필요성을 제한함
          + 마모를 제한하지만 필요성을 없애지는 않음
          + EGR과 DPF를 제거하고 더 잘 작동했던 디젤로 돌아갈 수 있을까?
     * 전기차의 증가된 무게와 강력한 토크가 내연기관 차량보다 더 많은 타이어 오염을 발생시킨다는 것이 여러 연구에서 사실이 아님이 입증됨
     * 연구자들이 실험실에서 인간 폐 세포를 키우고 자동차 브레이크 먼지와 디젤 배기 가스에 노출시켰을 때 브레이크 먼지가 세포에 더 큰 손상을 입힌다는 것을 발견함
          + 해로움을 정의하는 방식이 지나치게 좁음
          + 예를 들어, 브레이크 먼지가 폐에 나쁘지만 폐가 손상을 회복할 수 있고, 디젤 연기가 뇌에 해롭고 손상이 영구적이라면?
          + 실험실에서 폐 세포를 연구하는 것이 신체 전체에 미치는 해로운 영향을 알려주지 않음
     * 지난 50년 동안 자동차 배기 가스를 훨씬 더 안전하게 만든 것에 대한 승리로 생각해야 함
"
"https://news.hada.io/topic?id=19313","uv 1년 사용기: 장단점과 마이그레이션시 고려할 점","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     uv 1년 사용기: 장단점과 마이그레이션시 고려할 점

     * uv는 독립성과 빠른 속도, 그리고 쉬운 마이그레이션 덕분에 대부분의 경우 먼저 시도해볼 만한 Python 프로젝트 관리 도구임
     * Astral 팀의 우수한 품질 관리와 신속한 버그 수정, 광범위한 호환성 지원이 큰 강점임
     * 기존 도구(venv, pip 등)와의 연동성이 높아 초기 진입 장벽이 매우 낮음
     * 일부 레거시 프로젝트, 기업 환경, 특이한 Python 버전 의존 상황에서는 한계가 존재함
     * 결론적으로, uv가 동작하지 않는 일부 케이스를 제외하면 대부분의 Python 프로젝트에 적극 추천할 만한 도구임


도입 배경 및 Python 환경의 난이도

     * Python 생태계는 다양한 환경과 사용자(학생, 데이터 과학자, 개발자 등)가 존재하며, 이로 인해 프로젝트 부트스트래핑과 환경 구성의 어려움이 빈번하게 발생함
     * 기존의 pyenv, poetry, pipenv, pdm 등은 각자 한계와 복잡성을 갖고 있어 보편적인 해결책이 부족했음
     * uv는 Python 자체 설치 및 프로젝트 관리 독립성을 확보하여, PATH, PYTHONPATH, 다중 버전 관리 등 기존 문제의 상당수를 해소함

uv의 주요 강점

     * Python 설치 및 관리 완전 분리: uv 설치/업데이트와 Python 설치가 서로 영향이 없으며, 부트스트래핑 문제(치킨앤에그, PATH 등)에서 자유로움
     * 기존 pip, venv, pip-tools 호환: 기존 워크플로우와 거의 동일하게 사용 가능하며, 빠른 속도와 신뢰성만 추가로 누릴 수 있음
     * 운영체제별 통합 Python 설치: 관리자 권한 없이, 시스템 독립적으로 여러 Python 버전을 충돌 없이 설치 가능
          + tkinter, OpenSSL, Gzip 등 필수 패키지 포함, Mac/Windows/Linux 모두에서 동일한 방식으로 동작
          + PyPy, No-GIL, TCO 등 다양한 특수 빌드 지원
     * 프로그래밍 생산성 향상: uv의 기본 명령어만 사용해도 속도와 신뢰성으로 인해 개발 흐름이 크게 향상됨
     * pyproject.toml, git, README 등 프로젝트 초기화 자동화(uv init)
     * 의존성 관리, 잠금(lock) 파일의 크로스 플랫폼 호환성 등 고급 기능 지원
     * 설치/실행 캐시 및 고속화: 패키지 캐시로 반복 실행 속도 매우 빠름, 실험적 워크플로우에 최적화
     * 버그 대응 및 커뮤니티 피드백 반영이 탁월하며, 테스트 체계와 에러 메시지도 매우 우수함

uv의 혁신적 변화

     * npx와 유사한 uvx를 통해 일회성 패키지 실행, 임시 환경 실험 등도 지원
     * 인라인 의존성 관리 등 기존 파이썬 스크립트 운용 방식을 크게 변화시킴
     * 캐시 관리, 헤더 파일, 비패키지 프로젝트 지원 등 지속적 개선이 이뤄짐

단점 및 한계

     * 실제 패키징 문제(예: PyPI의 데이터 품질 문제)는 uv가 해결 불가
     * 구버전 pip로 관리된 복잡한 레거시 프로젝트는 종종 마이그레이션에 실패할 수 있음
     * python-build-standalone의 빌드 범위 내 Python 버전만 설치 가능
          + 아주 오래된/특정 커스텀 빌드가 필요한 경우 제약 발생
     * 캐시 용량 증가: 장기 사용 시 20GB 이상 공간을 차지할 수 있으나, 전체 venv 용량보다 적을 때도 있음
     * 상업적 지속성, 오픈소스 신뢰 이슈: Astral이 상업적으로 아직 안정화되지 않았고, 커뮤니티 의존성에 대한 우려가 있음
     * CLI(명령행) 기반 진입장벽: 기업 환경이나 초심자, Windows 사용자의 경우 GUI 부재가 단점
     * dev tool을 전역 설치하면(uvx 등) Python 버전 충돌 가능

권장 사용 및 사용이 어려운 케이스

     * 다음과 같은 경우에는 uv 사용을 권장하지 않음:
          + 복잡한 레거시 프로젝트의 의존성 충돌 및 마이그레이션 실패
          + 기업 보안 정책상 신규 도구 설치가 불가한 환경
          + 아직 상업적 신뢰가 충분하지 않다고 판단되는 경우
          + uv에서 지원하지 않는 Python 버전이 꼭 필요한 경우
          + 팀 전체가 CLI 환경에 익숙하지 않은 경우
     * 그 외 대부분의 경우, uv를 먼저 시도해 보고 안 될 때 기존 방법으로 돌아갈 것을 제안

결론 및 향후 전망

     * uv는 기존 Python 프로젝트 관리 도구의 단점을 보완하고, 초보자부터 전문가까지 모두에게 추천할 만한 강력한 선택지
     * 마이그레이션 비용이 낮으며, 사용하지 않아도 기존 워크플로우로 쉽게 복귀 가능
     * 향후 v1 출시 및 기업 시장 진입, GUI 지원 등으로 생태계 내 입지가 더욱 강화될 전망
     * Python 프로젝트 환경 설정의 사실상 ""파레토 솔루션""으로 자리매김하고 있음

        Hacker News 의견

     * 매우 잘 작성된 글임. Python 패키징의 어려움에 대한 저자의 분석을 존경함
          + uv의 출현으로 Python 패키징이 해결된 느낌을 받음
          + 단일 파일 Python 스크립트에서 인라인 종속성을 갖고 자연스럽게 실행할 수 있는 것이 아름다움
          + JavaScript의 import ObjectName from 'module-name';와 유사한 인라인 종속성 전용 구문이 있으면 좋겠다고 생각함
          + 작은 Python 스크립트에서 종속성을 피하거나 복잡한 해결책을 사용해야 했던 과거를 회상함
          + 개인적으로는 로컬 스크립트를 위한 거대한 가상 환경을 관리했었음
          + 종속성을 추가하는 것에 대한 두려움이 있었고, 같은 방식으로 해결했음
          + 이러한 변화가 작업 방식을 완전히 바꾼다고 느끼며, 테스트 환경을 자주 파괴하고, 테스트를 피하거나 도구 사용을 꺼렸던 과거를 회상함
     * conda에 대한 언급이 많은 기사들처럼, 이 글도 conda가 오랫동안 가지고 있던 ""새로운"" 기능들에 대해 열광함
          + Python 부트스트래핑에서 독립적이라는 점에서 conda와 유사함
          + 모든 상황과 플랫폼에서 Python을 통합적으로 설치하고 실행할 수 있음
          + 강력한 종속성 해결 기능을 가짐
          + uv가 가지고 있는 ""프로젝트 관리"" 기능이 conda에는 없지만, 사람들은 그것을 원함
          + uv와 같은 도구의 장점은 pip와 잘 상호작용할 수 있다는 점임
          + 단점은 비-Python 종속성을 별도로 배포할 수 없는 등의 제한을 상속받는다는 점임
     * uv의 팬이지만, 86GB의 Python 종속성 다운로드 캐시가 주요 SSD에 있는 것은 pip의 문제를 해결하지 못한다는 증거임
          + 25년 동안 프로그래밍하면서 언어/빌드 시스템에 대해 이렇게 화가 난 적이 없었음
          + Scala의 SBT를 다뤘던 과거를 회상함
     * ""uv를 사용하지 말아야 할"" 시나리오로, 많은 nvidia 라이브러리가 torch처럼 더 나은 패키지로 포장되지 않은 경우를 언급함
          + nemo2riva를 설치하기 전에 pip를 깨뜨려 nvidia의 패키지 레지스트리를 사용하도록 하는 다른 패키지를 설치해야 함
          + uv는 이러한 상황을 처리하지 않음
     * Astral이 어떻게 수익을 창출할 것인지에 대한 질문이 남아있음
          + 기업 패키지 인덱스를 보안 기능과 함께 제공하면 많은 조직에 쉽게 판매할 수 있을 것 같음
     * uv가 비 Python 개발자에게 Python을 더 접근 가능하게 만든다는 점에서 큰 칭찬을 받을 수 있음
          + 외부인에게는 생태계가 매우 혼란스러울 수 있음
          + uv를 사용하면 가상 환경을 신경 쓸 필요가 없음
     * uv의 비프로젝트 기반 워크플로우/구성을 설명해줄 수 있는지 궁금함
          + conda를 사용하여 동일한 ML 환경을 여러 폴더나 임시 노트북에서 사용함
          + 새로운 환경을 각 관련 ""프로젝트""에 대해 만드는 것이 이해되지 않음
     * uv에 대한 반대 의견을 제시함
          + conda는 환경 관리, pip는 패키지 관리에 사용하여 두 도구의 장점을 활용함
          + uv가 모든 것을 해결하려는 또 다른 시도일 뿐이라고 생각함
          + uv의 디자인에서 혁신적이거나 직관적인 점을 찾지 못함
     * uv의 정적 타입 체커 출시를 기대하고 있음
          + Python 세계에서 흥미로운 새로운 기회를 제공할 수 있을 것임
     * 프로젝트 이름을 uv로 정한 것은 libuv의 보편적인 성격 때문에 불행한 선택이라고 생각함
"
"https://news.hada.io/topic?id=19186","2024년 Backblaze 드라이브 통계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        2024년 Backblaze 드라이브 통계

     * 2024년 12월 31일 기준, Backblaze는 305,180개의 드라이브를 관리 중이며, 이 중 4,060개는 부트 드라이브, 301,120개는 데이터 드라이브임. 이 보고서는 2024년 4분기 연간화 실패율(AFR), 2024년 실패율, 그리고 2024년 말 기준 드라이브 모델의 전체 수명 실패율을 검토함.

Q4 2024 하드 드라이브 실패율

     * 2024년 말 기준, Backblaze는 301,120개의 하드 드라이브를 모니터링 중이며, 487개의 드라이브는 평가에서 제외됨. 최종적으로 300,633개의 하드 드라이브가 분석됨.
     * 24TB 드라이브 도입: Seagate 24TB 드라이브가 12월 초에 도입되어, 1,200개의 드라이브가 한 Backblaze Vault를 채우며 4분기 동안 실패가 없었음.
     * 분기 실패율 감소: 4분기 AFR은 3분기의 1.89%에서 1.35%로 감소함. 이는 주로 14,000개 이상의 새로운 20TB 이상의 드라이브 추가로 인한 것임.

드라이브 모델 기준

     * 487개의 드라이브가 평가에서 제외된 이유는 테스트 중이거나 데이터 포인트가 충분하지 않기 때문임.
     * 드라이브 모델이 포함되기 위한 기준은 분기별로 100개 이상의 드라이브와 10,000개 이상의 드라이브 일수가 필요함.

2024년 연간 하드 드라이브 실패율

     * 2024년 말 기준, 301,120개의 하드 드라이브가 모니터링되었으며, 2,012개의 드라이브가 연간 기준을 충족하지 않아 제외됨.
     * 연간 실패율 감소: 2024년 모든 드라이브의 AFR은 1.57%로, 2023년의 1.70%에서 감소함.

드라이브 크기별 연간화 실패율

     * 4TB와 10TB 드라이브는 전체 실패율에 큰 영향을 미치지 않음.
     * 8TB와 12TB 드라이브는 5년 이상 사용되어 실패율이 증가할 가능성이 있음.
     * 14TB와 16TB 드라이브는 사용 중인 드라이브의 57%를 차지하며, 낮고 안정적인 실패율을 보임.

제조사별 연간화 실패율

     * HGST: 2023년 4분기까지 평균 이하의 실패율을 보였으나, 이후 평균을 초과함.
     * Seagate: 2022년부터 2024년까지 분기별 AFR이 감소함.
     * Toshiba: 2022년부터 2024년까지 분기별 AFR이 0.80%에서 1.52% 사이에서 변동함.
     * WDC: Toshiba 모델과 유사한 일관성을 보이며, 분기별 AFR 범위는 0.0%에서 0.85% 사이임.

수명 하드 드라이브 통계

     * 2024년 말 기준, 301,120개의 하드 드라이브가 모니터링되었으며, 수명 기준을 충족하지 않는 2,736개의 드라이브가 제외됨.
     * 현재 모든 드라이브의 수명 AFR은 1.31%로, 2023년의 1.46%에서 감소함.

마이그레이션 시간

     * Andy Klein은 10년 동안 Drive Stats 보고서를 작성해왔으며, 이번이 마지막 보고서임. Stephanie Doyle과 David Johnson이 2025년 1분기 보고서부터 Drive Stats를 이어받을 예정임.

        Hacker News 의견

     * 지난 10년 동안 Drive Stats 보고서를 작성해왔고, 이번이 마지막임. 은퇴하거나 Drive Stats 용어로는 ""이주""하는 것임
     * 지난 몇 년간 Backblaze Drive Stats를 사용하여 OS용 작은 빠른 드라이브와 대용량 저장용 단일 디스크로 홈 서버를 운영해왔음. 아직 고장 난 적이 없고, 이들의 방법론을 매우 신뢰함. 소비자로서 매우 가치 있는 자원임
     * 최근 드라이브는 WDC WUH722222ALE6L4 22TiB이고, 몇 개월의 데이터만 있지만 WDC의 전반적인 추세를 보고 앞으로 몇 년간 문제없을 것이라는 안심을 얻음
     * 매년 이 보고서를 보는 것이 좋음
     * 무료라는 것을 알지만, '사용 중 미터'를 추가로 보고 싶었음. HDD의 AFR은 드라이브가 얼마나 자주 사용되었는지 알지 못하면 의미가 없음
     * 모든 드라이브가 연중 99% 사용되었다면 확실히 (정말로?) 의미가 있을 것임
     * 이 보고서가 흥미로웠고 다음 HDD 구매에 참고했음. 최근 신뢰할 수 있는 브랜드를 선택하는 데 사용했으며, 주로 오래된 모델이므로 중고 드라이브를 구매할 때 유용함
     * 다른 벤더에서 두 개를 구매하고 RAID를 하거나 정기적으로 오프사이트 백업을 하는 것이 좋음
     * 데이터에 따르면 4.4 페타바이트의 저장소를 관리 중임. 멋짐
     * 내 오래된 NVR에서 몇 개의 하드 디스크가 고장 난 후, 열이 하드 디스크의 가장 큰 적이라는 것을 깨달음. NVR은 POE 카메라에 전원을 공급하고, 비디오 트랜스코딩을 실행하며, 디스크에 지속적으로 기록함. 많은 열을 발생시켰음
     * 새로운 NVR에서는 POE 전원 공급을 전원 스위치로 분리하고, 새로운 CPU로 하드웨어 비디오 인코딩을 수행하며, SSD를 1차 기록용으로 사용하고 하드 디스크를 2차 백업용으로 사용함. 열이 크게 줄어들었고, 지금까지 잘 작동하고 있음. SSD의 지속적인 재기록이 좋지 않다는 것을 알지만, SSD의 MTBF는 고장 나기까지 몇 년이 걸릴 것임. 이는 수용 가능한 위험임
     * WDC/Toshiba의 숫자와 비교하면 Seagate의 숫자는 부끄러움
     * HGST 드라이브는 훌륭했지만, 이제는 WDC의 일부임. 새로운 모델은 WDC 브랜드임
     * Synology NAS에서 1년 이내에 Seagate 드라이브 5개가 고장 났음. 누군가 그 모델의 펌웨어가 ""나쁜"" 것이라고 제안했지만, WD로 바꾸고 나서는 고장 난 적이 없음
     * 매년 Backblaze는 기술적 잠재 고객에게 훌륭한 브랜드 홍보가 되고, 이 분야에 좋은 서비스를 제공함
     * 오픈 소스 코드 외에 다른 회사의 예가 있는지 궁금함
     * Backblaze는 스토리지 산업에서 가장 존경받는 서비스 중 하나이며, 나의 클라우드 스토리지 솔루션을 출시한 후에도 계속해서 존경을 받고 있음
"
"https://news.hada.io/topic?id=19208","Show GN: 2025년에 Favicon 자동 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: 2025년에 Favicon 자동 생성하기

Favicon Generator

   2025년에 Favicon을 준비하는 법 를 보고 아티클 내용에 따라 자동으로 Favicon 생성해주는 도구를 만들어보았습니다.

   사용해보기

  사용법

    1. 정사각형 비율의 SVG 이미지를 업로드한다.
    2. 생성된 HTML 코드와 다운로드된 이미지 파일을 프로젝트에 포함한다.
    3. 끝.

  상세 내용

     * ✅ SVG 파일은 SVGO로 최적화됩니다.
     * ✅ ICO 파일에는 16px, 32px 이미지가 포함됩니다.
     * ✅ 180px, 192px, 512px의 PNG 이미지가 생성됩니다.
     * ❌ PNG 파일은 Squoosh로 압축되지 않습니다.

  후기

   GPT랑 같이 작업했는데, UI는 잘 만들어줬는데 외부 모듈 가져오는 부분에서 고장이 많이 났습니다. 이 부분은 사람이 끼어들어야 했어요.
   ICO 파일도 못만들어줘서 별도의 새로운 대화를 열어 코드를 다시 생성해야만 했습니다.

   오랜만에 이런걸 만드니 아주 재밌었습니다.

   유용하게 사용했습니당! 감사합니다.

   PNG압축은 Squoosh 안쓰고
   UPNG https://github.com/photopea/UPNG.js 쓰시면 지금 코드에서 어렵지않게 압축가능할거에요.
   (전에 비교해봤을때 png에서 성능이나 압축률이나 비슷하거나 약간 우위였던걸로 기억합니다. 정확하진 않아요.)
   cnum 값을 0~256으로 압축 지정가능하고 128정도면 쓸만하게 압축될거에요.

   mask icon 생성은 색을 제거하고 직접 해야 한다고 추가적인 정보를 제공하면 좋을것 같아요

   아 mask icon은 이제 안 쓰이는군요....

   우와 좋네요. 글보고 AI와 함께 바로 만드는 프로젝트라니 ㅎㅎ 세상이 이렇게 바뀌어 가나 봅니다.

   단순 노동이 줄어드니 작업에 부담이 없어진 것 같아요. 참 좋은 세상입니다!
"
"https://news.hada.io/topic?id=19191","톰슨 로이터스, 미국 최초 주요 AI 저작권 소송 승소","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     톰슨 로이터스, 미국 최초 주요 AI 저작권 소송 승소

     * Thomson Reuters의 AI 저작권 소송 승리
          + Thomson Reuters는 미국에서 첫 주요 AI 저작권 소송에서 승리함.
          + 2020년, Thomson Reuters는 법률 AI 스타트업 Ross Intelligence를 상대로 소송을 제기함. 이 소송에서 Thomson Reuters는 Ross Intelligence가 자사의 법률 연구 회사인 Westlaw의 자료를 무단 복제했다고 주장함.
          + 델라웨어 연방 지방법원의 Stephanos Bibas 판사는 Thomson Reuters의 저작권 침해 주장을 인정하며 Ross의 방어 논리를 모두 기각함.
     * AI와 저작권 문제
          + 생성 AI의 급증으로 인해 AI 회사들이 저작권 자료를 사용하는 방식에 대한 법적 분쟁이 증가하고 있음.
          + 현재 미국 법원 시스템에는 수십 건의 소송이 진행 중이며, 중국, 캐나다, 영국 등 국제적으로도 도전이 이어지고 있음.
          + Bibas 판사는 공정 사용(fair use) 문제에서 Thomson Reuters의 손을 들어줌. 공정 사용은 저작권 자료를 허가 없이 사용할 수 있는 경우를 정의하는 법적 원칙임.
     * 판결의 영향
          + Ross Intelligence는 이미 2021년에 소송 비용으로 인해 운영을 중단함.
          + Cornell University의 James Grimmelmann 교수는 이 판결이 생성 AI 회사들에게 큰 타격이 될 수 있다고 언급함.
          + Womble Bond Dickinson의 Chris Mammen 변호사는 이 판결이 AI 회사들의 공정 사용 주장을 복잡하게 만들 것이라고 평가함.
     * Thomson Reuters의 반응
          + Thomson Reuters 대변인 Jeffrey McCoy는 이번 판결을 환영하며 Westlaw의 편집 콘텐츠가 저작권으로 보호받고 있음을 강조함.

        Hacker News 의견

     * Westlaw는 특정 주제에 관한 법률 사건을 찾는 데 도움을 주는 주석을 작성하고 소유함. Ross는 이 주석을 번역하여 AI를 훈련시키고 이를 이용해 법률 사건을 찾는 모델을 만듦. 법원은 이 계획이 공정 사용이 아니라고 판단함
          + 만약 공정 사용이었다면, 주석을 번역하여 Westlaw의 경쟁자를 만드는 것이 가능했을 것임
          + 법원은 상호운용성을 위해 저작권 침해가 필요하지 않다고 언급함
     * 법원은 ""AI 환경이 빠르게 변화하고 있기 때문에, 오늘날 나에게는 비생성적 AI만이 문제임""이라고 강조함
          + AI 회사들이 저작권 문서로 훈련된 AI를 사용하는 것과 구별하려고 노력할 것임
     * Thomson Reuters는 네 가지 요소 중 두 가지에서 승리했지만, Bibas 판사는 네 번째 요소가 가장 중요하다고 설명하며 Ross가 Westlaw와 경쟁하기 위해 시장 대체품을 개발하려 했다고 판결함
          + 원본을 대체하려는 의도가 있다면 복사는 공정 사용이 아님
     * 현재의 훈련 방법은 대량의 데이터가 필요함. 모델은 대규모 저작권 침해 없이는 실행 가능하지 않음
          + 더 큰 자금을 가진 피고가 어떻게 될지 보는 것이 흥미로울 것임
          + 법적 환경이 LLM의 존재를 허용하지 않더라도, 국가 안보 측면에서 로비가 강하게 이루어질 것임
     * 모델이 인간의 모든 콘텐츠로 훈련되어야 한다면, 가중치는 모든 인간에게 무료로 제공되어야 함
          + 대규모 저작권 침해가 필요하다면, 우리는 결과 모델에 대한 소유권을 가져야 함
     * 이 사건은 ""AI""에 관한 것이 아니라 요약 복사에 관한 것임. Google은 프랑스에서 뉴스 헤드라인을 검색 결과에 복사하여 벌금을 물었고, EU에서 로열티를 지불해야 함
          + Westlaw는 법원 사건 결과를 요약하고 색인화하는 서비스임
     * Ross는 Westlaw와 경쟁하려 했으나 Westlaw를 입력으로 사용함
          + West의 ""Key Numbers""는 사실상 표준임. Ross는 이 독점 색인 시스템을 맞춰야 했음
          + 법원은 Westlaw와 직접 경쟁하려는 의도가 있었고, Westlaw의 출력을 사용한 것이 의도적인 저작권 침해라고 판결함
     * 많은 회사들이 ""인간의 출력을 모델에 훈련시키고, 인간 대신 우리를 고용하라""는 목표를 가지고 있음
          + 워터마킹이 가능한 미디어에서는 창작자가 보상을 받지만, 텍스트 기반 창작자는 아무것도 받지 못함
     * 이 사건은 대형 언어 모델 AI에 관한 것이 아님. Ross의 제품은 전통적인 검색 엔진임
     * 판결의 공정 사용 측면은 모든 생성 AI 공급업체에게 경각심을 줄 것임
     * 이 사건은 Open AI에게 나쁜 소식이며, 대형 출판사와 비싼 거래를 할 수 있는 대기업에게 유리하게 작용할 것임
          + AI의 종말과 인간의 승리를 의미하는 것이 아니라, 누가 모델을 훈련할 수 있는지를 의미함
     * 네 가지 요소가 ""공정 사용""을 판단하는 데 사용된다면, 이는 공정 사용이 아님을 의미함
"
"https://news.hada.io/topic?id=19251","탄소 포집보다 재생 가능 에너지 전환이 더 경제적이라는 연구 결과 발표 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                탄소 포집보다 재생 가능 에너지 전환이 더 경제적이라는 연구 결과 발표

     * 2050년까지 전 세계 대부분의 국가가 풍력, 태양광, 지열, 수력 발전만을 사용하면 에너지 비용 절감, 대기 질 개선, 기후 변화 완화 효과를 얻을 수 있음
     * 탄소 포집 기술보다 이러한 재생 가능 에너지 전환이 훨씬 저렴하고 효과적임
     * 탄소 포집 기술에 1달러를 투자하는 것보다 재생 가능 에너지에 투자하는 것이 CO2 배출 감소, 에너지 비용 절감, 대기 오염 감소 등에 더 유리함

  두 가지 극단적인 시나리오 비교

     * 연구진은 149개국을 대상으로 두 가지 극단적인 에너지 시나리오를 비교함
         1. 완전한 재생 가능 에너지 전환: 풍력, 태양광, 지열, 수력 발전을 통한 전력 공급, 에너지 효율 개선, 대중교통 확대, 원거리 수소연료전지 도입
         2. 현재 에너지 체제 유지 + 탄소 포집: 기존 화석 연료와 일부 재생 가능 에너지 혼합, 탄소 포집 기술 도입
     * 연구진은 이 두 극단적인 시나리오를 비교하여 탄소 포집과 직접 공기 포집(Direct Air Capture, DAC)에 투자하는 것이 재생 가능 에너지 전환보다 얼마나 비효율적인지 분석함

  연소 제거의 이점

     * 화석 연료와 바이오매스 연소를 완전히 제거하면 2050년까지 최종 에너지 소비량을 54% 이상 줄일 수 있음
     * 연간 에너지 비용이 60% 가까이 감소할 것으로 예상됨
     * 대기 오염으로 인한 수억 건의 질병과 매년 500만 명의 조기 사망을 방지할 수 있음
     * 전기차 및 전기 히트펌프 등 전기 기반 시스템이 기존 화석 연료 기반 시스템보다 효율적이므로 에너지 소비 자체가 감소함
     * 탄소 포집 기술은 CO2를 제거할 수 있지만, 연소 과정 자체의 비효율성을 해결하지 못함
     * 연구진은 탄소 포집과 직접 공기 포집을 지원하는 정책은 ""잘못된 해결책""이며, 이를 포기해야 한다고 주장함

  연구진 결론

     * 대기 중 CO2를 제거하는 것보다 화석 연료를 직접 대체하는 것이 훨씬 경제적이고 효과적임
     * CO2 및 대기 오염 물질을 완전히 제거하는 유일한 방법은 연소 자체를 없애는 것임

        Hacker News 의견

     * 이 문제를 모르는 사람은 거짓말을 하거나, 석유 산업에 의해 매수되었거나, 속은 것임
     * 탄소를 이산화탄소로 변환하여 에너지를 얻음. 이를 되돌리려면 같은 에너지가 필요하지만 손실이 발생함
     * 기업과 정치인들이 탄소 포집이 가능하고 환경에 도움이 된다고 주장하지만, 이는 사실이 아님
     * CO2를 포집하여 저장하는 방법은 제안되었으나, 이는 영구적으로 유지해야 하는 물류 악몽임
     * 콘크리트에 CO2를 주입하는 아이디어는 유망하지만, 콘크리트 생성 시 발생하는 CO2를 상쇄하기에는 부족함
     * 식물을 재배하여 숯으로 만드는 방법은 유망함. 숯은 비료를 토양에 유지하는 데 좋음
     * 그러나 이러한 방법들은 녹색 전력망을 구축하는 것보다 나쁜 계획임
     * CC/DAC와 WWS의 혼합 시나리오를 수행하면 기회비용을 결론지을 수 없음
     * 100% WWS + 0% CC/DAC 시나리오가 95% WWS + 5% CC/DAC 시나리오보다 낫다면, CC/DAC는 쓸모없음
     * 그러나 50/50 WWS + CC/DAC 분할이 더 나은지 여부를 살펴보지 않음
     * Jacobson은 100% 재생 가능 에너지에 대한 비판에 민감함
     * 모든 에너지 인프라가 탈탄소화되어도 여전히 높은 온난화 경로에 있음
     * IPCC는 대규모 탄소 포집이 필요하다고 확신함
     * 탄소 포집은 석유 산업을 위한 것이며, 환경 마케팅을 통한 도둑질임
     * 전 세계적으로 27개의 DAC 공장이 가동 중이며, 연간 거의 0.01 Mt CO2를 포집함
     * 화석 연료에 대해 8가지 이상의 방법으로 비용을 지불함
          + 연간 수조 달러의 보조금
          + 에탄올 및 바이오디젤 보조금
          + 주유소 또는 전기 요금
          + 탄소 포집 비용
          + 기후 변화의 결과 비용
          + 건강 비용
          + 기타 오염 물질 비용
          + 모든 사람이 화석 연료 세금을 지불함
     * 에탄올 보조금에 대한 작은 세금에 대해 이야기함
     * 4천만 에이커의 땅을 태양광 패널로 사용하면 미국 전력 수요를 13배 이상 충족할 수 있음
     * 탄소 포집은 기업이 탄소를 생산하고 청소하는 데 돈을 받는 수단으로 보임
     * 유럽의 목재 펠릿 난방은 환경 재앙임
     * 포인트 포집과 대기 포집은 매우 다른 과정임
     * 최근 Sabine 비디오에서 탄소 포집으로 기후 변화를 해결하는 흥미로운 아이디어가 있었음
     * 영국에서는 BBC 프로그램을 추천함
     * 화석 연료 사용을 줄이는 데 충분히 잘하지 못하고 있다고 생각함
"
"https://news.hada.io/topic?id=19203","선제적 복종 거부로 권위주의 저항 (2017)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       선제적 복종 거부로 권위주의 저항 (2017)

     * 권위주의에 저항하기: 미리 복종하지 않기
          + 권위주의의 대부분의 힘은 자발적으로 주어짐. 사람들이 더 억압적인 정부가 원하는 것을 미리 생각하고 요구받지 않아도 스스로를 제공함. 이러한 방식으로 적응하는 시민은 권력에 무엇을 할 수 있는지를 가르침.
          + 예측적 복종의 정치적 비극: 지도자들이 처음에는 시민들이 어떤 가치를 타협할 준비가 되어 있는지 몰랐을 수도 있음. 독일과 체코슬로바키아의 선거 이후, 새로운 지도자들에게 자발적으로 서비스를 제공한 사람들이 많았기 때문에 나치와 공산주의자들은 빠르게 체제 변화를 추진할 수 있었음.
          + 오스트리아의 사례: 1938년 초, 히틀러가 오스트리아를 병합하려고 위협했을 때, 오스트리아인의 예측적 복종이 오스트리아 유대인의 운명을 결정함. 오스트리아 나치가 유대인을 잡아 거리 청소를 강요했을 때, 나치가 아닌 사람들도 흥미롭게 지켜보았고, 나치가 아닌 사람들도 유대인 재산을 훔침.
          + 밀그램 실험: 스탠리 밀그램은 나치의 잔학 행위를 설명하기 위해 권위주의적 성격을 연구하고자 했음. 실험 참가자들은 학습 실험의 일환으로 다른 참가자에게 전기 충격을 가한다고 믿었으나, 사실은 속임수였음. 대부분의 참가자들은 지시를 따랐고, 심지어 피해자가 죽은 것처럼 보일 때까지 충격을 가했음.
          + 밀그램은 사람들이 새로운 환경에서 새로운 규칙에 놀라울 정도로 잘 적응하고, 새로운 권위에 의해 지시받으면 다른 사람을 해치고 죽일 의향이 있다는 것을 발견함.
"
"https://news.hada.io/topic?id=19201","WASM은 컨테이너를 대체하게 될 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WASM은 컨테이너를 대체하게 될 것

     ""WebAssembly는 진정한 Write-Once-Run-Anywhere임""
     ""2030년이 되면 아무도 쿠버네티스를 기억하지 못하게 될것""

이동성 (Portability)

     * 컨테이너는 소프트웨어 개발의 많은 문제를 해결했으며, VM보다 사용성이 뛰어났음
     * 하지만 현재 컨테이너는 복잡한 도구와 프로그램-컨테이너-Linux의 강한 결합으로 인해 다루기 번거로워짐
     * 개발자는 코드 작성과 기능 배포에 집중하고 싶어 하며, Docker 학습은 방해 요소가 됨
     * WebAssembly(WASM)는 이미 일부 영역에서 컨테이너를 대체하고 있으며, ""한 번 작성하면 어디서나 실행 가능""한 경험을 제공함
     * 여러 언어를 WASM으로 컴파일할 수 있으며, 시스템 인터페이스 부족이 널리 채택되는 것을 막고 있지만, 이는 곧 해결될 것
     * 현재 WASM의 주요 한계는 파일 접근, 네트워킹 등의 시스템 인터페이스 부족이지만, 이는 시간이 지나면 해결될 문제임

JVM과의 비교

     * WASM이 JVM과 비슷한 ""한 번 작성하면 어디서나 실행"" 개념을 제공하지만, JVM은 웹 브라우저에서 실행되지 않음
     * 웹 브라우저는 중요한 애플리케이션 배포 대상이며, 이로 인해 많은 개발자가 JVM을 피하게 됨
     * 최근에는 GraalVM, Kotlin Native, Scala Native 등의 정적 바이너리 컴파일러가 JVM의 대안으로 떠오르는 추세임

마이크로서비스 (Microservices)

     * 마이크로서비스 아키텍처에서는 HTTP, RPC 또는 메시지 브로커를 사용하여 서비스를 연결함
     * 네트워크 통신의 비용과 신뢰성 문제는 주요 단점이지만, 대부분의 기업은 장점이 더 크다고 판단함
     * AWS Lambda와 같은 서버리스 플랫폼이 등장하면서, 마이크로서비스는 개별 함수 단위로 배포할 수 있게 됨
     * Cloudflare Workers는 V8 샌드박스 내에서 실행되며, 네트워크 요청 없이 동일한 런타임에서 함수 호출이 가능함
     * 이는 마이크로서비스의 개발 장점과 모놀리식 아키텍처의 런타임 성능을 동시에 제공함
     * Wasmer 등 다른 업체들도 WASM 기반 솔루션을 개발 중임

WASM의 도입 (Adoption)

     * WASM은 아직 초기 기술이지만 빠르게 발전하고 있으며, 지원도 증가하는 추세임
     * 현재 모든 환경에서 완벽하게 작동하지는 않지만, Cloudflare와 같은 플랫폼을 통해 미래를 미리 경험할 수 있음
     * Python, Ruby, PHP와 같은 동적 언어 사용자라면 WASM의 발전을 기다리면서 Go나 Rust 같은 컴파일 언어를 추가로 학습하는 것이 유리함

   결국 docker도 wasm도 알아야하게 되는 것인가요 ㅎㅎ 그래두 docker도 기술이 무르익으면서 접근이 쉬워졌으니 wasm도 비슷하게 접근이 쉬워지는 방향으로 가지 않을까 싶어요

        Hacker News 의견

     * 시스템 인터페이스 부족이 더 넓은 채택을 막고 있는 주요 요인임. 파일 접근, 네트워킹 등이 시간이 지나면 통합될 것임
          + 그러나 파일 접근, 네트워킹 등을 추가하면 보안 취약점이 생길 수 있음. 이는 Java의 '한 번 작성, 어디서나 실행' 약속을 무너뜨린 요인임
          + WASM은 컨테이너와 다른 문제를 해결함. WASM은 샌드박스 코드 실행에 효율적임
          + WASM은 Functions-as-a-Service 구현 등에서 표준이 될 가능성이 높음
          + 컨테이너는 그 문제를 해결하지 못함. 보안 경계로서 적합하지 않으며, WASM 바이너리보다 무겁고 시작 비용이 큼
          + 컨테이너는 여러 프로세스, 스레드를 실행하고 OS 기본 기능을 사용하는 데 적합함
     * WebAssembly는 진정한 '한 번 작성, 어디서나 실행' 경험을 제공함
          + 그러나 외부와 상호작용하면 이야기가 달라짐. 각 V8 런타임은 미묘하게 다른 인터페이스를 가짐
          + Docker의 성공은 POSIX가 이미 확립된 표준이었기 때문임
     * PlatformOps(이전의 DevOps, SRE, Ops)는 복잡한 도구와 프로그램-컨테이너-리눅스의 긴밀한 결합으로 인해 약속이 훼손됨
          + 개발자는 코드 작성과 기능 배포를 원함
          + PlatformOps는 문제를 해결하기 위해 고군분투함
     * WASM은 컨테이너를 대체하는 솔루션이 아님. 컨테이너는 PHP의 다른 버전을 충돌 없이 실행하는 문제를 해결함
          + WASM은 그 문제를 해결하지 못함
     * WASM의 미래는 언제 올 것인가? 8년이 지났지만 안정적이고 사용하기 쉬운 도구 체인이 없음
          + Rust는 2012년에 출시되어 8년 후 안정적이었음
     * WASM은 실제 하드웨어에서 실행되지 않음. 가상 머신으로 간주될 수 있음
          + 컨테이너는 실제 하드웨어에서 직접 실행되는 애플리케이션을 패키징함
          + WASM은 런타임이 필요함. 애플리케이션 내에서 실행됨
          + WASM은 JVM과 .NET이 해결하는 '이식성' 문제를 해결함
          + 컨테이너는 애플리케이션과 종속성을 번들로 묶음
          + 기술은 상호 보완적일 수 있음
     * Docker 사용법을 배우는 것은 방해 요소가 아님
          + Dockerfile만 있으면 됨
          + WASM 앱은 여전히 Kubernetes가 필요함
          + WebAssembly는 앞으로 5년간 크게 성장하지 않을 것임
     * WASM은 또 다른 추상화 계층임. 모든 것을 대체할지는 다른 솔루션과의 절충에 달려 있음

   K8s는 컨테이너를 오케스트레이션 하는 도구인데 wasm 때문에 실효성이 떨어질까요? 도커라면 어느 정도 잠식 되겠지만....

   WASM 은 새로운 3D 프린터 같네요. ""새로운 세상이 온다"" 하는데 막상 쓰는 사람은 별로 없는...

     https://madewithwebassembly.com/

   여기에 구현 사례 모음이 있는데.

   (개인적으로는) 주로 캐드나 이미지처리 같은 분야가 제일 그럴듯 해 보입니다.

   예전에 웹에서 고해상도 의료 이미지 구현에 대해 고민을 하던 솔루션 개발팀이 막 생각나고 그렇습니다.

     예제로 배우는 WASM
     https://news.hada.io/topic?id=11891

   보고 따라 해 봅니다.

   2030년에도 k8s는 건재할 것 같습니다

   결국 wasm 런타임 성능에 얹혀가는 모양새가 되는데 V8이 JVM과 동일한 계층이 되지 않을까요.
   V8 버전에 따라서 WASM 동작이 달리지고 그걸 디버깅하는 미래가 기다리는게 아닐까 걱정됩니다.
"
"https://news.hada.io/topic?id=19241","GPU에 대한 오해에 대한 오해

     * Fly.io는 자체 하드웨어를 사용하는 퍼블릭 클라우드를 구축 중이며, GPU를 활용한 AI/ML 추론을 제공하는 것을 목표로 Fly GPU Machines를 개발함
     * Fly GPU Machines는 Docker/OCI 컨테이너를 실행하는 VM으로, NVIDIA GPU를 직접 매핑하여 빠른 CUDA 연산이 가능하도록 설계됨
     * AI/ML의 중요성은 예상보다 컸지만, GPU 제품은 시장의 니즈를 제대로 반영하지 못한 것으로 보임

GPU 도입의 기술적 어려움

     * Fly GPU Machines는 Firecracker 대신 Intel의 Cloud Hypervisor를 사용하여 PCI 패스스루를 지원하도록 설계됨
     * NVIDIA의 생태계는 마이크로 VM 하이퍼바이저를 지원하지 않아, GPU 보안 및 성능 최적화가 어려움
     * GPU는 보안팀의 우려 대상이었으며, 다방향 DMA(Direct Memory Access) 전송과 사용자 제어 연산이 가능하여 높은 보안 리스크를 초래함
     * GPU와 비GPU 워크로드를 분리하기 위해 별도 서버 하드웨어를 사용, 비용 비효율적 구조가 발생함
     * 보안 검증을 위해 Atredis 및 Tetrel과의 대규모 보안 평가 진행, 높은 비용과 시간 소모

기술적 시행착오

     * NVIDIA가 권장한 방식(K8s 클러스터 구축 또는 QEMU 사용)을 따르지 않고, Fly Machines의 빠른 시작 속도를 유지하려고 시도함
     * NVIDIA의 가상 GPU(vGPU) 드라이버를 Intel Cloud Hypervisor에서 사용하려다 실패
     * NVIDIA의 폐쇄적인 드라이버 환경으로 인해 GPU를 효율적으로 활용할 수 있는 구조를 만들기 어려웠음
     * GPU를 활용한 모델 가중치 로딩 최적화가 필요했으나, 개발자 경험(DX)을 유지하면서 해결하기 어려웠음
     * 많은 GPU를 구매했지만, 기대만큼의 성과를 내지 못함

GPU 비즈니스 모델의 실패 원인

     * 일반 개발자들은 GPU보다는 LLM을 원함
          + AI/ML 모델 최적화보다 OpenAI, Anthropic 등의 LLM API를 활용하는 것이 더 간편하고 성능 차이도 크지 않음
          + 대부분의 개발자들은 ""초당 토큰(tokens per second)"" 단위의 성능을 중요시하며, GPU가 제공하는 밀리초 단위의 최적화에는 큰 관심이 없음
     * 대규모 AI 작업을 수행하는 기업들은 엄청난 GPU 연산 능력을 필요로 하며, 단일 A100 GPU도 부족함
          + 대규모 AI 연구소 및 기업들은 SXM 기반 H100 클러스터를 원함
     * 경량 ML 작업을 위한 소형 GPU 시장이 존재할 가능성은 있으나, NVIDIA MIG를 완전 가상화된 환경에서 활용하기 어려움
     * L40S GPU는 유용하게 사용되고 있지만, Fly.io의 핵심 비즈니스 성장 요인이 되지 못함

얻은 교훈

     * 초기(2022년)에는 다양한 AI 모델이 등장할 것이라 예상했으나, 현재는 OpenAI, Anthropic 등의 소수 LLM 모델로 수렴됨
     * Fly.io는 ""10,000명의 개발자를 위한 기능을 설계한다""는 원칙을 따름
          + GPU는 10,001번째 개발자를 위한 기능에 불과하여 주요 제품으로 자리 잡기 어려웠음
     * 스타트업은 여러 번의 도전을 통해 배우는 과정이며, GPU 도입은 하나의 실패한 베팅이었음
     * GPU 관련 투자는 전부 손실이 아니며, 일부 하드웨어는 나중에 매각 가능함
     * Fly Machines의 보안성과 개발자 경험을 유지하면서 GPU 지원을 축소하는 방향으로 조정 가능
     * Fly.io의 초기 제품이었던 JavaScript 엣지 컴퓨팅 런타임도 시장에서 원하지 않았으며, 결국 컨테이너 지원으로 전환한 것처럼, GPU도 시장의 필요에 맞지 않았던 선택이었음
     * 스타트업은 종종 잘못된 가정을 통해 올바른 답을 찾아가며, 이번 GPU 사례도 그러한 과정 중 하나였음

        Hacker News 의견

     * 개발자들은 GPU나 AI/ML 모델보다 LLMs를 원함. 시스템 엔지니어들은 CUDA와 GPU에 대해 신경 쓰지만, 소프트웨어 개발자들은 그렇지 않음
          + 소프트웨어 개발자들 사이에 큰 분열이 있음. 일부는 코드의 실행 위치와 작동 방식을 이해하고 싶어함
          + 다른 그룹은 git push만으로 끝내고 싶어하며, DNS나 리눅스 같은 것을 이해하고 싶어하지 않음
          + fly.io 같은 회사는 후자에게 매력적임. GPU 인스턴스는 전자에게 매력적임
          + 두 시장을 다르게 접근해야 함. 후자에게는 추상화와 자동화를 많이 판매할 수 있음
     * 2012년부터 무어의 법칙이 사실상 끝남. 단일 스레드 실행은 2GHz에서 멈춤
          + 2012-2022년 동안 클라우드로 이동하면서 단일 스레드의 정체를 눈치채지 못함
          + 2022년 데이터 센터는 더 많은 코어를 가진 차세대 칩을 구매할 필요가 없음을 깨달음
          + LLMs는 100% 병렬 처리 가능하므로 다시 자본을 투자할 수 있음
          + 2024년 웨이퍼 스케일 실리콘이 등장할 것임. Llama 모델을 A100보다 10배 빠르게 실행할 수 있음
          + 소프트웨어는 이 성능을 활용할 방법을 찾아야 함
     * fly GPU 머신은 매우 빠르고 신뢰할 수 있으며, 대안에 비해 가격이 비싸지 않음
          + DX가 훌륭함. 새로운 명령어를 배울 필요가 없음
          + 가격이 더 저렴하고 더 많은 지역에서 사용할 수 있기를 바람
     * 4090을 구매했지만, 24GB VRAM으로는 충분하지 않음
          + 2개 이상의 3090과 맞춤형 전원 공급 장치가 더 나았을 것임
          + 성능과 품질이 아직 부족함
     * Fly를 선택하는 고객은 전용 GPU 서버를 장기간 사용하는 마지막 사람일 것임
          + 서버리스 솔루션을 사용할 가능성이 높음
     * GPU 슬라이스가 없는 것이 아쉬움. 월 $1,000의 비용은 정당화하기 어려움
          + AMD 소비자 GPU를 Raspberry Pi에 연결하는 것이 경제적일 수 있음
     * ""우리가 틀렸다""는 말은 영어에서 가장 고귀하고 아름다운 말 중 하나임
     * Fly.io는 Cloudflare의 Workers 플랫폼과 유사한 개발자를 끌어들임
          + PaaS 환경의 개발 속도를 원함
          + Cloudflare는 GPU와 함께 PaaS 접근 방식을 유지하며 Workers AI를 구축함
     * Runpod에서 서버리스 엔드포인트를 설정하는 데 한 달이 걸렸고, 비싸고 신뢰할 수 없었음
          + Google Cloud 크레딧을 사용하여 제품을 고객에게 제공할 수 있었음
          + GPU 제공자에 대한 수요가 있음. Fly가 이 시장에 진입할 수 있을지는 확실하지 않음
"
"https://news.hada.io/topic?id

소개

     * 최근에 XOR 연산자를 설명할 기회가 있었음. 과거에는 컴퓨터에서 저수준 비트 조작을 위해 XOR을 배우는 것이 필수였지만, 현재는 고수준 프로그래머에게는 선택 사항이 됨.
     * XOR에 대한 강의를 준비하면서 다양한 생각을 정리했으며, 이를 문서로 남기기로 결정함.

XOR의 불리언 논리

  XOR란 무엇인가?

     * XOR는 두 개의 비트를 입력으로 받아 하나의 비트를 출력하는 논리 연산자임.
     * 진리표를 통해 XOR의 동작을 설명할 수 있음.

  ""배타적 OR""

     * XOR는 ""배타적 OR""을 의미하며, 두 입력 중 하나만 참일 때 참을 반환함.

  '같지 않음' 연산자

     * XOR는 두 입력이 다를 때 1을 반환하므로, a ≠ b와 동일하게 작동함.

  조건부 반전

     * XOR는 하나의 입력이 다른 입력을 반전시킬지 여부를 결정하는 조건부 반전 연산자로 볼 수 있음.

  패리티, 또는 2로 나눈 나머지

     * XOR는 입력 중 홀수 개의 비트가 참일 때 1을 반환함.

  2로 나눈 차이

     * XOR는 덧셈과 뺄셈의 2로 나눈 나머지와 동일하게 작동함.

XOR의 성질

     * XOR는 교환법칙과 결합법칙을 따르며, 0은 항등원으로 작용하고, 모든 입력은 자기 역원임.

정수에 대한 비트 단위 XOR

     * 정수를 이진수로 표현하여 비트 단위로 XOR 연산을 수행할 수 있음.
     * 비트 단위 XOR는 불리언 XOR와 동일한 성질을 가짐.

XOR의 응용

  암호화: 평문과 키스트림 결합

     * XOR는 암호화에서 평문과 키스트림을 결합하는 데 사용됨.
     * XOR는 하드웨어에서 덧셈보다 간단하여 효율적임.

  픽셀 그래픽: 쉽게 지울 수 있는 그림 그리기

     * 1980년대 컴퓨터 그래픽에서는 XOR를 사용하여 쉽게 지울 수 있는 그림을 그렸음.
     * XOR를 사용하면 픽셀을 다시 그려서 원래 상태로 복원할 수 있음.

  ""하프 애더 정체성""

     * XOR는 덧셈의 낮은 비트를 나타내며, AND는 높은 비트를 나타냄.
     * 정수에 대해 XOR와 AND를 사용하여 덧셈을 수행할 수 있음.

   이 문서는 XOR의 다양한 성질과 응용을 설명하며, XOR가 어떻게 작동하고 어디에 유용하게 사용될 수 있는지를 이해하는 데 도움을 줌.
"
"https://news.hada.io/topic?id=19226","a0.dev - AI 기반 React Native 앱 생성 플랫폼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  a0.dev - AI 기반 React Native 앱 생성 플랫폼

     * React Native 앱 개발 시간을 몇 주에서 몇 시간으로 단축하는 AI 기반 플랫폼
     * 사용자의 프롬프트를 입력하면 맞춤형 React Native 앱을 즉시 생성
     * 실시간 라이브 프리뷰 지원
     * 복잡한 설정 없이 빠른 프로토타이핑 가능
     * 생성된 코드를 직접 복사해 개발 환경에서 활용 가능

배경 및 목표

     * 웹 개발보다 모바일 앱 개발이 훨씬 복잡한 문제를 해결하기 위해 개발
     * Xcode와 Android Studio 설정, 보일러플레이트 코드 작성, 상태 관리 설정 등의 번거로운 과정 제거
     * 앱 스토어 출시 및 수익화 지원 목표
     * 기존 코드 생성 플랫폼(v0 등)에서 더 나아가 React Native에 특화된 AI 생성기 제공

주요 기능

     * UI 및 로직 생성
          + ""UI Expert""와 ""Advanced Logic"" AI 모델을 선택하여 다양한 작업 수행
     * 인스턴트 라이브 프리뷰
          + 생성된 앱을 즉시 미리보기 가능
     * 단일 화면 → 전체 앱 확장 가능
          + ""Need a Full App"" 버튼을 클릭하면 전체 프로젝트 생성 가능
     * iOS 앱 제공
          + 실제 기기에서 앱을 미리보기 가능 (iOS 앱 제공)
     * Supabase 통합 예정
          + 백엔드와의 쉬운 연결을 위한 Supabase 연동 기능 개발 중
     * 원클릭 앱스토어 배포 기능 예정
          + ""One Click Submit"" 기능을 통해 개발자가 앱스토어에 쉽게 배포 가능

현재 한계점

     * Android 앱 출시 준비 중
          + 현재는 Expo Go App을 통해 미리보기 가능
     * React Native Web 기반 브라우저 미리보기
          + 웹에서 지원되지 않는 네이티브 모듈 포함 의존성은 미리보기 불가
     * 일부 네이티브 모듈 미포함

   2자리 도메인이면 비싸겠죠?
"
"https://news.hada.io/topic?id=19230","Show GN: 대한민국 국내에 존재하는 지하철역 정보(역명, 지역구, 노선, 위/경도) 목록","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: 대한민국 국내에 존재하는 지하철역 정보(역명, 지역구, 노선, 위/경도) 목록

   대한민국 국내에 존재하는 지하철역 정보(역명, 지역구, 노선, 위/경도) 목록을 JSON5 포맷으로 정리했습니다.

   모두 직접 수작업으로 수집하고 정리한 데이터입니다..........ㅎㅎ;
   일부 정보가 오기되었거나, 위/경도 좌표가 부정확할 수 있으므로 유의하세요.

   https://t-data.seoul.go.kr/dataprovide/trafficdataviewfile.do/…
   저도 최근에 안건데, 수도권은 지하철역의 위도,경도 좌표를 제공해주더군요
   OpenAPI조회나 csv 다운로드 가능합니다.

   다른 지역들이 이런걸 제공하지 않는다면, 사실상 공공데이터의 형태를 띄고 계시네요 대단하십니다.

   수작업으로 수집 ㄷㄷ....

   좋습니다.. 혹시 시간표도..

   좋은 자료 감사합니다. 다만 부산 2호선 양산-호포 누락, 부산김해경전철 불암-가야대 누락, 부산 1호선 부전역과 동해선 부전역은 별도로 있고 부산 2호선 벡스코역과 동해선 벡스코역은 한개로 묶여있어서 통일성에서 약간 아쉽네요.

   제보 감사합니다~

   물결(~)표가 마크다운이 적용되었는지 줄이 그어져버렸네요. ㅎㅎ

   감사합니다

   와우 고맙습니다.
   수작업으로 하신다니...ㅠㅠㅠ
   감사 할 따름입니다.

   멋져요.
   공공데이터로 당연히 있을법한 데이터인데 없었나보군요..

   아래 스니펫들도 도움이 되지 않을까 생각합니다~

   대한민국 국내에 존재하는 법정읍/면/동/리 목록
   https://gist.github.com/nemorize/da7f5a2e55c9562be724565e45099a7d

   대한민국 국내에 존재하는 MVNO(알뜰폰) 사업자 목록
   https://gist.github.com/nemorize/982c1c91b6b8db618d65409f64fe2f8c

   MVNO 사업자 목록
"
"https://news.hada.io/topic?id=19222","Goku - ByteDance의 Flow 기반 비디오 생성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Goku - ByteDance의 Flow 기반 비디오 생성 모델

     * Goku는 ""Rectified Flow Transformer""를 기반으로 한 새로운 이미지 및 비디오 생성 모델군으로, 업계 최고 수준의 성능을 목표로 함
     * 고품질 시각적 생성 기술을 위해 ""데이터 선별, 모델 설계, 플로우 공식화"" 등 다양한 최적화를 적용
     * 주요 특징
          + 고품질 데이터 선별을 통한 정밀한 이미지 및 비디오 생성
          + Rectified Flow 기법을 활용하여 이미지 및 비디오 토큰 간 상호작용 강화
          + 이미지 및 비디오 생성에서 뛰어난 성능을 제공
     * 지원하는 생성 작업
          + 텍스트 → 비디오 생성
          + 이미지 → 비디오 생성
          + 텍스트 → 이미지 생성
     * 성능 벤치마크 : 주요 벤치마크에서 높은 성능을 기록
          + 0.76 (GenEval - 텍스트 → 이미지 생성)
          + 83.65 (DPG-Bench - 텍스트 → 이미지 생성)
          + 84.85 (VBench - 텍스트 → 비디오 생성)
     * Goku-T2V는 VBench 성능 비교에서 84.85점을 기록하며 2024년 10월 7일 기준 2위를 차지
          + 여러 상업용 텍스트-비디오 모델을 능가하는 성과 (AnimateDiff-V2, OpenSora, Gen-3, Kling 등)

   최근 ByteDance에서 관련 기술 논문을 엄청 발표하던데.. 곧 틱톡에도 적용되지 않을까 싶습니다.

   Goku+: Video Ads Foundation Models

   여기 하단에 실제 적용 사례가 더 재미있습니다.

   마케팅용 아바타를 만들어내거나, 제품 이미지에서 비디오 클립을 생성하기도 합니다.
   다시 그걸 통해서 사람이랑 제품을 하나로 합성해서 아예 상품 소개 영상도 만들어냅니다.
   그래서 음식을 먹기도 하고, 옷입고 걸어다니고, 화장하고 샴푸하는 영상까지 척척이네요.
   중국 소셜 커머스에 특화된 예제가 아닐까 합니다.
"
"https://news.hada.io/topic?id=19219","영국의 Apple 데이터 백도어 요구, 미국인 위협한다고 의원들 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 영국의 Apple 데이터 백도어 요구, 미국인 위협한다고 의원들 주장

        Hacker News 의견

     * 영국 정부의 권한 남용에 대한 우려가 있음. 영국이 아닌 다른 나라에 사는 사람들도 이로 인해 위협을 느낄 수 있음. 영국 정부가 모든 하드웨어에 백도어를 요구하고 있음. 이는 대규모 감시와는 다른 문제이며, 암호화가 이를 방어하는 역할을 함. 영국은 암호화 백도어를 요구하고 있음
     * 많은 사람들이 기업의 프라이버시에 집중하는 것이 문제임. 정부로부터의 프라이버시가 더 중요함. 기업과 정부가 협력하는 경우도 있지만, 정부가 기업으로부터 데이터를 요구하는 것이 잘못임. 기업은 데이터를 통해 수익을 얻고자 함. 정부는 법을 어기면 감옥에 넣으려 함
     * 미국이 불법적인 일을 할 때 영국이나 다른 파트너 국가에 이를 대신하게 함. 미국 정부는 애플에 미국 시민의 데이터를 요구할 수 없지만, 영국이 데이터를 얻고 이를 공유하면 문제가 없음
     * EU가 암호화에 반대하는 이유로 반응이 없는 것일 수 있음. 익명성이 기본 권리가 아니라는 주장에 전문가들이 반대함. EU는 디지털 기기를 스파이웨어로 만들고자 함
     * 영국인으로서 애플, 구글, 메타, 마이크로소프트가 프라이버시를 지키기 위해 영국에서 사업을 철수한다고 발표하면 재미있을 것 같음. 정부는 즉시 굴복할 것임
     * 미국 이외의 국가가 요구할 때만 위협으로 간주됨. 그렇지 않으면 안전 조치로 여겨짐
     * 정치적 이야기가 올라오는데 DOGE 관련 이야기는 왜 안 올라오는지 궁금함
     * 영국에 살고 있으며, iCloud와 다른 클라우드 서비스에서 데이터를 삭제했음. 영국, EU, 미국 정부를 신뢰할 수 없음. 클라우드 벤더도 정치적 문제에 연루되어 있어 신뢰할 수 없음. 남은 선택지는 강경한 입장을 취하고 투자를 철회하는 것임
     * 영국의 관심 인물로 제한하면 미국인들은 괜찮을 것임
"
"https://news.hada.io/topic?id=19303","디버깅이 불가능한 앱 디버깅","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            디버깅이 불가능한 앱 디버깅

디버깅이 불가능한 앱 디버깅하기

     * 최근에 디버깅이 불가능한 앱을 만났음. 이 앱은 디버거 연결을 차단하고, 코드 주입 시 조기에 종료되며, 탈옥된 기기에서 실행하면 전체 폰을 크래시시킴.
     * iOS 앱은 종종 탈옥 감지나 코드 난독화 같은 추가 보호 기능을 포함함. 이 앱은 특히 많은 보호 기능을 결합하고 있음.

  비디오 버전

     * 이 게시물의 비디오 버전이 있으며, 더 자세한 과정을 보여줌.

  목차

     * PT_DENY_ATTACH
     * PT_DENY_ATTACH 우회 (쉬운 모드)
     * PT_DENY_ATTACH 우회 (어려운 모드)
     * 폰 크래시
     * 코드 주입
     * 마무리

  PT_DENY_ATTACH

     * 디버거를 연결하는 것이 첫 번째 단계임. 탈옥된 폰에서는 보통 디버거 연결이 쉬움.
     * ptrace라는 함수가 디버거 연결을 차단함. 이 함수는 PT_DENY_ATTACH 요청을 통해 디버거의 미래 연결을 차단함.

    PT_DENY_ATTACH 우회 (쉬운 모드)

     * PT_DENY_ATTACH는 호출 후에만 디버거를 차단함. 호출 전에 브레이크포인트를 설정하면 디버거가 정상적으로 연결됨.
     * ptrace 함수 자체에 브레이크포인트를 설정하여 호출을 우회할 수 있음.

    PT_DENY_ATTACH 우회 (어려운 모드)

     * 일부 개발자는 ptrace 대신 직접 시스템 호출을 사용하여 디버거 차단을 구현함.
     * 이 경우, 바이너리에서 해당 시스템 호출을 찾아 우회해야 함.

  폰 크래시

     * 앱이 특정 조건에서 폰을 소프트 리부팅 시킴. 이는 메모리 집약적인 메서드를 무한 루프로 호출하여 발생함.
     * lldb를 사용하여 이 메서드를 우회할 수 있음.

  코드 주입

     * 코드 주입 시 앱이 크래시됨. 이는 앱 그룹 식별자가 잘못되어 발생하는 문제일 가능성이 높음.
     * 탈옥된 폰에서는 앱을 재서명하지 않고도 코드를 주입할 수 있음. 그렇지 않은 경우, 메서드를 스위즐링하여 문제를 해결할 수 있음.

        Hacker News 의견

     * Bryce Bostwick는 디버깅과 리버스 엔지니어링 앱에서 매우 멋지고 영감을 주는 작업을 함
          + 그의 YouTube 영상에서 TikTok을 고양이 비디오만 보이도록 수정하는 방법을 보고 영감을 받아 Instagram을 메시지 기능만 남기고 나머지를 제거하도록 수정했음
          + Windows를 Windhawk 스타일로 수정하는 것에 관심이 있음
          + Bryce는 iOS에서 실시간으로 단계별 비디오를 통해 이러한 작업을 소개함
     * DOS/Windows에서는 오래전부터 안티-디버깅 트릭이 일반적이었음
          + 사용자 제어가 쉬운 정도는 플랫폼의 사용자 적대성에 반비례함
          + PT_DENY_ATTACH는 후자를 위한 기능으로 보임
          + Windows에서는 앱이 스스로에 붙도록 하는 트릭이 있음
     * Apple의 App Store 검사가 직접적인 시스템 호출을 하는 앱을 거부하지 않는 것이 놀라움
          + Apple 플랫폼에서 시스템 호출은 안정적인 ABI가 아니므로 libSystem을 통해야 함
          + 직접 시스템 호출을 하는 앱은 하지 말아야 할 일을 하는 것임
     * 저자가 mov w16, #26 대신 svc 0x80을 검색한 이유가 궁금함
     * 저자가 질문에 답변할 준비가 되어 있음
     * 상단의 비디오는 매우 훌륭한 프로그래밍 비디오임
          + 빠른 진행, 적절한 지식 가정, 훌륭한 데모가 흐름을 방해하지 않음
     * 이 앱이 합법적인 앱인지 아니면 맬웨어로 의심받아 디버깅된 것인지 궁금함
          + 그렇지 않다면 많은 노력이 들어갔을 것임
     * PT_DENY_ATTACH 우회 (Hard Mode)
          + macOS에서 커널을 패치하여 PT_DENY_ATTACH가 아무것도 하지 않도록 함
          + macOS에서는 패치된 커널을 실행하기 쉬움
          + iOS에서는 더 많은 문제가 있을 것임 (KTRR 등)
          + XNU는 기술적으로 오픈 소스이지만, 재컴파일보다 hexeditor로 패치하는 것이 더 쉬웠음
     * ""com.apple.tw.twrr"" 알림에 대해 궁금함
          + 왜 com.apple로 시작하는지
          + 해당 앱은 Apple 앱이 아님
     * 웹사이트의 자바스크립트 코드를 리버스 엔지니어링하는 사람들에 대해 아는지 궁금함
     * 탈옥된 iPhone에서 커스텀 kexts를 실행할 수 있는지 궁금함
          + 커널 자체를 수정하는 것이 더 멋진 방법임
"
"https://news.hada.io/topic?id=19212","친절한 엔지니어링","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               친절한 엔지니어링

  친절함이란?

     Kind is about being invested in other people, figuring out how to help them, meeting them where they are.

     친절함은 다른 사람에 투자하고, 돕는 방법을 찾으며, 원하는 바를 충족시킵니다.

     — Tanya Reilly, Continuous

   친절함은 위에 Tanya Reilly가 말한 대로, 사람에 투자하는 것을 말합니다. 그저 상냥함이 아니라 상대의 입장이 되어 그 감정과 배경을 이해하는 것을 뜻합니다. 모든 상황에서 만능은 아니지만, 여러 문제를 해결하는 데 도움을 줄 수 있습니다.

    자상함

     * ""전문적임""을 넘어 자신의 일에 집중하세요.
     * 개방적이고 인간답게 행동해 신뢰를 쌓으세요.
     * 사람들을 직접 대하되 사려깊게 보살펴주세요.
     * 하얀 거짓말은 나쁘지 않지만 사람을 성장시킬 수 없습니다.
     * 자상함을 잃지 마시고, 좋은 행동을 칭찬하시고 개선할 점을 주세요.

    비동기적인(async) 소통

     * 변화에 있어 ""무엇을?""과 ""어떻게?""뿐 아니라 ""왜?""에 대해서도 더 많이 이해하려고 노력하세요.
     * 악의나 무능함을 가정하지 마세요.
     * 강하거나 논란이 다분한 발언 대신 마음이 열려 있는 질문을 하세요.
     * 지적에 앞서 꼬리표가 명확하게 붙어 있는 것이 중요합니다.
     * 많이 지적하면 업무에 더 큰 지장을 될 수 있습니다.
     * 의견이 많으면 소통을 순차적인 방식으로 바꾸세요.

    심리적 안정

     * 팀이나 동료에게 가장 먼저 피드백을 요청하세요.
     * 피드백의 구조는 다음과 같이 간단합니다:
          + 잘된 점
          + 잘못된 점
          + 나중에 할 일
     * 사람들의 배경, 역사, 그리고 개인적인 선호를 개방적으로 받아들이세요.
     * 회의나 문서에 크게 기여하지 못 하는 사람들을 주시하고, 그들이 목소리를 낼 방법을 찾아보세요.
     * 사람들이 옳다고 느끼는 어떤 방식으로든 자신을 표현할 수 있도록 목소리를 내세요.
     * 종종 개별적인 실패는 실제로 프로세스, 환경 또는 워크플로우의 실패를 불러올 수 있습니다.
     * 우리는 함께 성공하고, 실패합니다.
     * 모든 ""실패""나 사건은 성장하고 배울 수 있는 기회로 기념되어야 합니다.
     * 혁신을 촉진하기 위해서, 사람들이 위험을 감수하고, 도전하며, 이런 행동이 안전하다고 느끼도록 장려해야 합니다.

    피드백/비판

     * 처음부터 평가하는 사람이 아닌, 평가를 가장 먼저 받는 사람이 되세요.
     * 개인적인 사항으로 만들지 마세요.
     * 피드백이나 칭찬을 할 때는 가능한 한 구체적이고 철저하게 하려고 노력하세요.
     * 누군가에게 비판적인 피드백을 준다면, 해결책도 제시해 보세요.
     * 자신의 피드백 선호도를 이해하세요.
     * 듣고 이해한 다음 피드백을 주신 분께 감사를 드리세요.
     * 지금 당장 반응하지 말고, 시간을 내어 생각을 정리하고 피드백을 처리하세요.
     * 설명이나 예시를 요청하세요.
     * 피드백을 주는 세 가지 요소를 기억하세요:
          + 감정
          + 신뢰성
          + 논리
     * 자신이 아닌 청취자의 감정을 고려하세요.
     * 전문성과 겸손함을 보여주세요.
     * 당신의 업무 방식과 결론에 도달하는 방법을 보여주세요.
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

     * 기술 업계의 독성 말투 문제, 고칩시다!

   위 자료를 바탕으로 개발에서는 어떻게 친절한 엔지니어링을 적용할 수 있는가
   일명 KDD(Kindness Driven Development)를 AI 도움으로 만들어 보았습니다.

   코드 작성
     * 주석과 문서화를 ""왜?""에 중점을 두어 작성하세요. 코드가 존재하는 이유와 배경을 설명하는 것이 중요합니다.
     * 복잡한 로직에는 도메인 용어를 활용한 변수명과 함수명을 사용해 다른 개발자가 이해하기 쉽게 만드세요.
     * 새로운 기술이나 패턴을 도입할 때는 팀원들의 학습 곡선을 고려하세요.
     * 레거시 코드를 비난하지 마세요. 당시의 제약사항과 맥락이 있었을 것입니다.
     * 미래의 유지보수 담당자를 위해 엣지 케이스와 실패 케이스에 대한 처리를 문서화하세요.
       아키텍처 설계
     * 시스템 설계 시 운영팀과 QA팀의 관점도 고려하세요.
     * 모니터링과 디버깅을 쉽게 만드는 것도 친절한 설계의 일부입니다.
     * 확장성있는 설계는 미래의 팀원들을 위한 배려입니다.
     * 기술 부채를 관리할 때는 완벽한 제거가 아닌 ""관리 가능한 수준""을 목표로 하세요.
     * 새로운 기능 추가가 쉬운 구조를 만드는 것이 중요합니다.
       코드 리뷰
     * 리뷰 요청 시 변경사항의 컨텍스트를 충분히 설명하세요.
     * ""이렇게 하면 어떨까요?""와 같은 제안형 피드백을 사용하세요.
     * 긍정적인 부분도 반드시 언급하세요. ""이 부분 정말 깔끔하네요""
     * 대안을 제시할 때는 그 이유도 함께 설명하세요.
     * 시급하지 않은 개선사항은 따로 이슈로 등록하여 현재 PR의 범위를 존중하세요.
       테스트 코드
     * 테스트 실패 시 명확한 에러 메시지를 제공하세요.
     * 테스트 케이스는 문서화의 역할도 합니다. 비즈니스 규칙을 잘 설명하는 테스트를 작성하세요.
     * 다른 개발자가 테스트를 쉽게 추가할 수 있는 구조를 만드세요.
     * 테스트 데이터는 이해하기 쉬운 실제 사례를 사용하세요.
     * 테스트 환경 설정을 자동화하여 진입 장벽을 낮추세요.
       배포와 운영
     * 배포 스크립트에 충분한 설명과 가이드를 포함하세요.
     * 장애 발생 시 디버깅에 도움되는 로그를 미리 준비하세요.
     * 설정 변경이 필요한 경우, 영향도를 문서화하세요.
     * 새로운 기능 출시 시 롤백 계획도 함께 준비하세요.
     * 운영 가이드는 신입 개발자의 관점에서 작성하세요.
       지식 공유
     * 트러블슈팅 경험을 문서화하여 공유하세요.
     * 새로운 기술 도입 시 학습 자료를 만들어 공유하세요.
     * 코드 작성 가이드는 ""왜 이렇게 하기로 했는지""를 포함하세요.
     * 정기적인 기술 공유 시간을 통해 팀의 성장을 도모하세요.
     * 질문하기 좋은 환경을 만들어 주니어 개발자의 성장을 돕습니다.

   따로 글로 써도 좋을 정도의 내용인데요 ㅎㅎ

   굉장히 좋네요!

   굉장히 좋은 댓글이네요

   당연한 일이지만 실천하기 어렵네요..
"
"https://news.hada.io/topic?id=19315","Svelte 5는 Javascript가 아님 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Svelte 5는 Javascript가 아님

     * 최근 Svelte 5 버전으로 웹 애플리케이션을 업그레이드한 후 겪은 이슈들 정리
          + 딥 리액티비티 기능과 변경된 라이프사이클로 인한 예기치 못한 동작이 발생함
     * Svelte 3/4를 오래 즐겼지만, 앞으로 새로운 프로젝트에 Svelte를 선택하지는 않을 것 같음

빠른 속도의 필요성

     * Svelte 팀은 deep reactivity를 통해 성능 최적화를 시도했고, 더 나은 성능을 이끌어냄
     * 기존에도 컴파일 과정을 통해 빠른 성능을 제공했으며, 이는 다른 프레임워크와 차별화되는 강점이었음
     * 이는 불투명한 프레임워크를 만들어 디버깅이 어려웠으나, 성능과 생산성 면에서 타협 가능한 트레이드 오프라고 느꼈음

빠른 속도의 필요성

     * Svelte 팀이 Svelte 5에서 주력하는 주요 변화는 “딥 리액티비티(deep reactivity)”로, 더 세밀한 반응성을 통해 성능을 높이려는 것임
     * 이전 Svelte 버전들에서는 주로 Svelte 컴파일러를 활용해 이 목표를 달성
          + 개발자가 직접 새로운 개념을 배울 필요 없이 내부 로직을 재구성하기 좋았던 점이 Svelte의 독창성을 부각시켰음
     * 동시에 이러한 컴파일 과정이 프레임워크를 불투명하게 만들어, 복잡한 문제 디버깅이 어려워졌음
          + 컴파일러 자체 버그로 인해 원인을 파악하기 힘든 오류가 발생했으며, 때때로 문제 컴포넌트를 전면 리팩토링해야만 해결 가능했음
     * 그래도 속도와 생산성 면에서 합리적인 타협이라고 느껴, 프로젝트를 주기적으로 초기화해야 하는 불편함도 감수해 왔음

Svelte는 Javascript가 아님

     * Svelte 5는 이 트레이드오프를 2배로 늘림
     * 핵심 차이점은 추상화·성능의 절충 지점이 컴파일 단계를 넘어 런타임 부분에까지 침투했다는 것임
          + Deep reactivity를 지원하기 위한 프록시 사용
          + 암묵적인(implicit) 컴포넌트 라이프사이클 상태
     * 이 두가지 변경사항은 성능을 개선하고, 개발자 API가 더 멋지게(slicker) 보이게 만듦
     * 싫어할게 있을까? 안타깝지만 이 2기능은 leaky abstraction의 전형적 사례로 꼽을 수 있음
          + 결국 개발자가 다루기에 더 복잡한 환경을 초래함

Proxies는 객체가 아님

     * Proxy 사용으로 Svelte 팀은 개발자에게 추가 작업을 요구하지 않고도 프레임워크 성능을 약간 더 끌어올릴 수 있었음
          + React 같은 프레임워크에서는 여러 컴포넌트를 거치며 상태를 전달할 때 불필요한 리렌더링을 유발하기 쉬운 편인데, Svelte는 이를 줄이려는 목적으로 Proxy를 도입했음
          + Svelte 컴파일러는 기존에도 가상 DOM 비교 과정에서 생길 수 있는 일부 문제를 피했지만, Proxy를 통해 성능을 좀 더 향상시킬 수 있다고 판단한 듯함
          + Svelte 팀은 Proxy가 개발자 경험 향상에도 기여한다고 언급했으며, “효율성과 사용 편의성을 모두 극대화할 수 있음”이라는 주장을 내세웠음
     * 문제는 Svelte 5가 겉보기에는 더 단순해 보이지만, 실제로는 더 많은 추상화를 추가한다는 점임
          + 예를 들어 배열 메서드 감지를 위해 Proxy를 쓰면, Svelte 4에서 value = value 같은 코드를 작성하지 않아도 되는 이점이 생김
          + Svelte 4에서는 리액티비티를 트리거하기 위해 개발자가 컴파일러의 동작 원리를 어느 정도 이해해야 했음. 반면 Svelte 5에서는 “컴파일러를 잊어도 된다”는 인상을 주지만 실제로는 그렇지 않음
          + 새로운 추상화를 도입해 얻은 편의성만큼, 컴파일러가 원하는 대로 동작하도록 하기 위해 개발자가 알아야 할 규칙이 늘어났음
     * 오랜 시간 Svelte를 사용하면서, 개인적으로는 점차 Svelte store를 더 많이 이용하고, 리액티브 선언은 덜 쓰게 되었음
          + Svelte store는 기본적으로 자바스크립트 개념에 가깝고, update 메서드를 호출하는 방식이 단순하며, $ 문법은 부가적인 이점 정도였음
          + Proxy는 리액티브 선언과 마찬가지로 “보기에는 하나처럼 보여도, 실제 경계 지점에서 다르게 작동한다”는 문제를 유발함
     * Svelte 5를 처음 쓸 때는 모든 것이 잘 돌아갔지만, Proxy 상태를 IndexedDB에 저장하려 하자 DataCloneError가 발생했음
          + 더욱이 어떤 값이 Proxy인지 확실히 파악하기 위해서는 구조화된 복제를 try/catch로 시도해야 하는데, 이는 성능 비용이 큼
          + 결국, 무엇이 Proxy인지 기억하고, 외부에서 Proxy를 인식하지 못하는 문맥에는 $state.snapshot을 매번 사용해야 하게 됨
          + 이는 결과적으로 “추상화가 개발 편의를 높인다”는 당초 의도와 달리, 개발자에게 더 복잡한 규칙과 절차를 요구하게 되는 상황을 초래함

컴포넌트는 함수가 아님

     * 2013년 무렵 가상 DOM이 인기를 얻은 이유는 애플리케이션을 함수 조합 형태로 모델링할 수 있었기 때문임
          + Svelte는 가상 DOM 대신 컴파일러를 사용해 라이프사이클 함수를 간소화하고 성능을 높이는 방식을 유지해 왔음
          + 그러나 Svelte 5에서는 라이프사이클 개념이 React Hooks와 비슷하게 다시 추가됨
     * React에서 Hooks는 라이프사이클 메서드의 상태 관련 코드를 줄여주는 추상화 개념임
          + 코드는 깔끔해지지만, setTimeout에서 상태를 참조할 때처럼 개발자가 주의해야 할 부분이 많음
          + Svelte 4에서도 컴포넌트 언마운트 시점에 비동기 코드가 DOM 요소에 접근하면 문제가 생길 수 있었음
          + 이제 Svelte 5에서는 상태 변경과 이펙트를 조율하기 위해 컴포넌트 라이프사이클에 암묵적인 상태가 추가된 것으로 보임
     * $effect에 대한 공식 문서에서는 다음과 같이 설명함:

     “$effect는 어디든 배치할 수 있지만, 컴포넌트 초기화 중(또는 부모 이펙트가 활성화된 동안) 호출되어야 하며, 컴포넌트(또는 부모 이펙트)가 언마운트되면 사라짐”
     * 이는 라이프사이클이 마운트/언마운트 두 단계만 존재한다는 설명과 달리, 상태 변화를 추적해야 하는 복잡한 이펙트 구조가 존재함을 시사함
     * 공식 라이프사이클 문서에서는 “before update/after update가 없다”라고 말하지만, $effect.pre와 tick 같은 새로운 개념이 등장함
     * 이는 사실상 마운트/언마운트 외에도 상태 변화 시점에 대한 이해가 필요함을 뜻함
     * 실제 사용 중 문제를 일으킨 부분은, Svelte와 무관한 함수에 넘겨진 상태 역시 컴포넌트 라이프사이클에 묶인다는 점임
     * 예를 들어, 모달 창을 스토어로 관리하면서 콜백을 자식 컴포넌트에 전달하는 패턴을 사용했음
const { value } = $props()
const callback = () => console.log(value)
const openModal = () => pushModal(MyModal, { callback })

     * 만약 이 코드가 모달 컴포넌트 내부에 있다면, 모달을 호출한 컴포넌트가 먼저 언마운트되고, 그 시점에 value가 undefined로 변경됨
     * 이 리포지토리에 미니멀 재현 예시가 올라와 있음
     * 즉, 컴포넌트 생명주기가 끝난 후에도 살아있는 콜백에서 참조하던 props가 갑자기 undefined가 됨
     * 이는 기본 자바스크립트와 다른 동작 방식이며, Svelte가 자체적으로 가비지 컬렉션 같은 작업을 하는 것처럼 보임
     * 엔지니어링적인 이유가 있겠지만, 예상치 못한 동작이라 놀라움

결론

     * 쉬운 것은 분명 매력적이지만, Rich Hickey가 말했듯이 쉬움이 곧 단순함을 의미하지는 않음
     * Joel Spolsky의 말처럼, 예기치 못한 동작이 일어나는 것을 달가워하지 않음
     * Svelte는 그동안 많은 ‘마법’을 보여줬지만, 이번 버전에서는 그 마법을 사용하기 위해 암기해야 할 것이 많아져 이득보다 부담이 커졌음
     * 이 글의 요점은 Svelte 팀을 비난하기 위함이 아니며, 오히려 Svelte 5(와 React Hooks)를 선호하는 사람들이 많다는 사실을 인지하고 있음
     * 중요한 것은 사용자에게 편의를 제공하는 것과 사용자가 주도권을 가질 수 있는 것 사이의 균형임
     * 진정한 좋은 소프트웨어는 ‘영리함’이 아니라 ‘이해’에 기반함
     * AI 도구가 발전함에 따라, 자신이 무엇을 하고 있는지 모르게 만드는 툴보다 이미 축적한 지혜를 활용하고 깊은 이해를 돕는 툴을 선택하는 것이 중요함
     * Rich Harris와 팀에게 그간의 즐거운 개발 경험에 감사함. 이 글이 부정확하지만은 않은 피드백이 되길 바람

   proxy 가 만드는 사람은 편한데 디버깅하는 사람은 화가나죠 ㅋㅋ

   사이드프젝트는 solidjs DX 넘버원 >ㅁ< / 햄복

   svelte같은 대안이 있었기에 React/nextjs도 큰 자극을 받을 수 있었으리라 생각합니다.
   근본적으로 svelte는 language 이므로, UI를 기술하는 언어가 나아가야 할 방향도 잘 제시해줬으면 좋겠습니다.

   저는 리액트 쓸겁니다

   과유불급
   주화입마
   옥상옥

   Signals가 Gartner hype cycle의 Trough of disillusionment를 향해 가고 있는 것 같다는 생각이 드네요 🤔 점차 유즈케이스가 정립되어가면서 평가가 개선될 수 있지 않을까 싶습니다

   React 와 특히 next 의 영향을 적지 않게 받으면서 이상하게 변했다고 생각합니다. +page 는 svelte 를 모르고 봐서는 이해하기 어렵고, $state, $derived 같은 rune 은 React 를 따라가는 것 같은데 차라리 변수 앞에 $: 넣던 시절이 좀더 나아보입니다. {#each a in array} {/each} 같은 올드한 문법도 참을만 한데, 여전히 귀찮습니다. 선택적 reactivity 로 인한 성능 개선이라면 solidjs 가 훨씬 좋은 방향이라고 생각합니다. jsx 를 그대로 쓰다보니 상대적으로 react 에서 넘어가기도 쉽구요. solidjs 가 상대적으로 주목을 못받는게 의아할 정도네요.

        Hacker News 의견

     * 처음에는 runes에 대해 별로 흥미가 없었음. 그러나 .svelte 템플릿에 반응형 외부 컴포넌트를 가져올 수 있고, 내부적으로 반응성을 캡슐화할 수 있을 때 의견이 바뀌었음. 이는 vitest 테스트를 작성할 수 있으면서도 반응성의 이점을 얻을 수 있다는 것을 의미함. 이는 정말 강력하고, AFAIK, 프론트엔드 세계에서 독특함
          + 대부분의 프론트엔드 개발자들은 테스트를 전혀 하지 않음. Typescript는 정확성을 보장하기 위해 사람들이 사용하는 도구이며, 그럴 만한 이유가 있음. 그러나 svelte 사용자들은 항상 typescript에 대해 좁은 시각을 가지고 있었고, 그럴 만한 이유도 있음
          + 개인적으로 테스트 가능한 프론트엔드 코드를 작성하는 것을 선호하며, Svelte 5는 그런 면에서 혁신적임. 브라우저에서 반응형이면서도 단위 테스트만큼 좋음
          + 이 모든 것을 말했지만, 블로그 게시물은 진실을 말하고 있음. 프록시를 추가하는 것은 매우 불편하게 느껴짐. React와 Vue는 추상화 위에 추상화를 추가하기 시작했을 때 나를 잃었고, 프록시는 그 시작점이었음
          + Svelte 5는 JavaScript가 아님이 <i>Svelte 5를 좋아하는 이유</i>임
          + 프론트엔드/웹을 합리적으로 할 수 있는 두 가지 주요 방법이 있다고 생각함
               o
                   1. 정적 HTML 또는 서버 렌더링된 템플릿, 아마도 HTMX
               o
                   2. JavaScript로 컴파일되는 언어/플랫폼. 최소한 TypeScript이지만, HTML과 CSS가 실제로 꽤 좋다고 생각하기 때문에 JSX, React, Tailwind 등은 <i>제외</i>되며, Svelte 5와 몇몇 다른 프레임워크는 실제로 바닐라 TypeScript보다 개선됨
          + Svelte 5는 카테고리 2에서 명확한 승자임
          + 멋진 HTML 템플릿, 쉽고 합리적인 상태 전파, 모듈식 코드를 쉽게 작성할 수 있는 기능을 가지고 있음. CSS와 잘 작동하며, 종종 간단한 일회용 앱과 도구를 한두 파일로 만들 수 있으며, 더 크고 진지한 애플리케이션도 가능함. Svelte 4보다 덜 마법적이고 놀랍지 않으며, 솔직히 사용하기 즐거움. 다행히도 IndexedDB에 대해 신경 쓰지 않음
          + 오늘날 JavaScript 한 줄을 작성할 이유를 전혀 모르겠지만, 각자 자기 방식대로 함
     * 상업적으로 배포된 SvelteKit 애플리케이션을 적극적으로 개발하고 있으며, 경험에 대한 생각을 공유하고 싶음
          + SvelteKit에 처음 끌린 이유는 그 단순함이었음. 프로젝트를 설정한 후, 현대적인 프레임워크의 이점을 복잡함 없이 활용하면서 한 번에 하나의 HTML/JS/CSS 파일을 작업할 수 있었음. 이는 웹 개발 초기 시절, Apache 서버에 HTML 파일을 떨어뜨리는 것만으로 모든 것이 실행되던 시절을 떠올리게 했음
          + 그러나 Svelte가 그 간단한 패러다임에서 벗어나는 것을 보는 것은 실망스러움. 처음부터 Rich Harris는 Svelte의 사용 용이성과 단순함을 주요 판매 포인트로 내세웠음. 현재의 SvelteKit 버전은 나쁘지 않지만, 이전 버전을 더 선호했음. 그때는 +page와 같은 라우팅 구조를 다룰 필요가 없었음. Svelte 파일을 원하는 곳에 배치할 수 있었고, 현대적인 프레임워크의 이점을 누리면서도 매끄럽게 렌더링되었음
          + 이러한 변화는 이전에 필요하지 않았던 복잡성을 추가하며, Svelte의 매력을 처음부터 멀어지게 할 가능성이 있음. 이미 알고 있는 것을 바탕으로 선택했음
     * EmberJS가 사라진 것은 아쉬움. API는 지난 10년 동안 꽤 안정적이었음. 아이러니하게도 지난 10년 동안 EmberJS 앱을 작성한 사람은 React, Svelte, Vue 등으로 동일한 작업을 한 사람보다 마이그레이션에 덜 어려움을 겪을 것임
          + 안타깝게도 Ember 팀은 초기에 몇 가지 이상한 결정을 내렸고, 일반 JavaScript에 비해 쉽게 이해할 수 없었음 (대부분은 이제 수정되었음)
          + JavaScript인지 아닌지는 API의 안정성에 비하면 별로 중요하지 않음
          + 개인적으로 JavaScript의 문제는 너무 자주 변화한다는 것임
     * 저자가 게시물 상단에 나열한 두 개의 Github 링크는 동일한 문제를 가리키며, 그 문제에는 해결책이 있음 (use $state.raw)
          + Svelte 2 또는 3 버전부터 Svelte의 팬이었음. 이는 바닐라 HTML/CSS/JS를 작성하는 것과 가장 가까우면서도 프레임워크의 이점을 누릴 수 있었기 때문임 (그리고 Sass와 TypeScript를 사용함). 환상적임
          + Svelte 5는 runes가 이상해서 불안하게 느껴졌음. 프로젝트를 업그레이드하고 다른 프로젝트에서 작업한 후, 그렇게 나쁘지 않음. Svelte 5는 상태 처리의 옛 방식과 새 방식을 혼합하는 것을 허용하지 않으며, 오류 메시지는 대부분 유익함
          + 이 댓글에서 htmx와 바닐라 JS가 객관적으로 더 낫다고 말하는 사람들을 보는데... 아니? 당신이 하는 일에는 그렇겠지만. 개인적으로 Svelte는 React보다 여전히 이해하기 훨씬 쉬움. 벤치마크를 신경 쓰는 사람들에게는 Svelte가 SolidJS만큼 빠름 (React 사용자들은 Solid로 쉽게 전환할 수 있을 것 같음, 문법이 비슷하게 느껴짐)
     * Svelte 5는 JavaScript가 아닌 <i>최악의</i> 방식임. js의 문제를 해결하지 않고, 일부 프론트엔드 문제에 대한 누출된 추상화를 제공함. Solid가 Svelte보다 더 나은 방향이라고 생각함. Solid는 새로운 언어에 의존하지 않기 때문임. 그러나 js가 이상적이지 않기 때문에 js가 아닌 것을 만들려는 본능이 있음. Elm은 svelte의 전신임. 그러나 더 나은 것을 만들 수 있다고 생각함...[0]
     * Svelte 4에서 스토어가 정말 싫었기 때문에 Svelte 5를 사용하기 시작했음. 새로운 프로젝트에 Sveltekit과 Svelte 5를 사용하고 있으며, 말해야겠음... React의 생산성은 여전히 무적임, Sveltekit과 Svelte 기술이 기술적으로 더 나은데도 불구하고
          + 정말 짜증났던 몇 가지: 모든 페이지가 +page.server.ts 또는 +page.svelte 또는 그 변형으로 이름이 지정되어 있어 코드를 쉽게 검색하기 어려움. Svelte의 도구는 tsc 및 ESLint와 별도로 존재하여 CI에 통합하고 개발에서 사용하는 것이 더 어려움
          + 이전 버전과의 이상한 호환성 문제도 있음. 예를 들어, 대부분의 Svelte 패키지는 여전히 스토어를 사용하므로, 두 가지 버전의 세계와 싸워야 하며, 코드 작성이 때때로 정말 혼란스러움. 또한, Svelte HMR은 여전히 초기 단계인 것 같음, 그래서 Svelte 모듈이 다시 로드될 때 상태를 망칠 것임
          + Svelte를 정말 좋아하고 싶음. 렌더링 속도가 상당히 빠르고 그 뒤에 있는 아이디어가 마음에 듦. 그러나 React의 생산성은 무적임
     * 콜백으로 클로저를 전달할 때 예상치 못한 동작 때문에 Svelte가 JavaScript가 아니라고 말하는 것은 이상하게 느껴짐. 더 나은 제목은 ""Svelte 5가 나를 놀라게 해서 싫다""일 것임
     * 순수 JavaScript를 사용할 수 있는 컴포넌트와 앱을 빌드할 수 있는 라이브러리를 찾고 있다면 Lit를 확인해 보세요: Lit
          + 깊은 반응성을 위해 신호에 대한 추가 패키지가 있으며, 다가오는 Signals TC39 제안과의 통합을 목표로 하고 있음: Signals
          + Lit는 Photoshop, Reddit, Home Assistant, The Internet Archive와 같은 주요 앱에서 사용됨
     * 합리적인 프론트엔드 경험을 원한다면? 바닐라 Javascript, 웹 컴포넌트, htmx, Blazor를 사용하세요
          + JS 프레임워크는 어떤 이유에서든 광기임
"
"https://news.hada.io/topic?id=19228","Bolt + Expo: 코드 작성 없이 앱스토어에 앱 출시까지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Bolt + Expo: 코드 작성 없이 앱스토어에 앱 출시까지

     * Bolt와 Expo가 연동해서 이제 ""코딩 없이"" 모바일 애플리케이션을 개발 가능
     * Bolt.new를 사용하면 ""말로 설명하는 것만으로"" iOS 및 Android 앱을 생성하고 배포할 수 있음
          + 아이디어 → 앱스토어 출시까지, 코드 한 줄도 필요 없음
          + iOS, Android, Web을 동시에 지원
          + 실시간 미리보기 가능

Bolt란?

     * StackBlitz에서 개발한 AI 기반 웹 개발 에이전트
     * 브라우저에서 직접 ""웹, iOS, Android 앱을 생성"" 가능
     * Expo와의 통합으로 모바일 앱 코드 생성 및 실시간 미리보기 가능
     * 사용자가 ""피드백을 제공하면 AI가 즉시 반영""하여 앱을 발전시킴
     * MVP(최소 기능 제품) 제작, 아이디어 테스트, 프리랜서 개발자용 포트폴리오 제작에 유용

Bolt & Expo 사용 방법

    1. Bolt.new에 접속 후, Expo 스타터 템플릿 선택
    2. 앱의 기능과 디자인을 설명하는 간단한 프롬프트 입력
    3. Bolt AI가 자동으로 앱 코드 생성 및 미리보기 제공
    4. 필요하면 추가적인 요청을 입력하여 디자인/기능 개선
    5. 완성된 앱을 Expo를 통해 배포

더 나은 결과를 위해 고려할 점:

     * 앱의 스타일: 전문적/캐주얼한 느낌, 컬러 톤, 분위기
     * 기본 레이아웃: 홈 화면, 정보 페이지, 상품 페이지 등 포함 여부
     * 데이터 연동: 특정 API, 이미지, 외부 데이터 소스 활용 가능
     * 참고 자료 제공: Figma 디자인, 이미지 등을 첨부 가능

Bolt & Expo의 미래 계획

     * 현재 Bolt와 Expo를 사용하면 앱을 쉽게 생성 가능
     * 다음 단계: Expo Application Services(EAS) 통합
          + 앱 빌드, 제출, 배포를 ""완전 자동화""하여 한 번의 프로세스로 진행 가능
     * 더 많은 개발자와 비개발자가 쉽게 앱을 만들 수 있도록 지원할 예정

   a0.dev - AI 기반 React Native 앱 생성 플랫폼
   여기도 원클릭 배포가 추가 예정이라고 되어있던데, 이제 AI 기반 앱 생성 플랫폼은 배포까지가 기본이 되어야 하네요.
"
"https://news.hada.io/topic?id=19272","킨들, 2월 26일부터 다운로드 및 전송 옵션 제거","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      킨들, 2월 26일부터 다운로드 및 전송 옵션 제거

        Hacker News 의견

     * 최근 몇 달 동안 HN에서 이와 관련된 여러 스레드가 있었음
          + ""다운로드 및 전송"" 옵션은 Amazon에서 사용자가 구매한 책을 선택하고 다운로드할 수 있게 허용한 것임
          + USB 케이블을 사용하여 컴퓨터에서 Kindle로 책을 전송하는 기능은 영향을 받지 않음
          + Send to Kindle 이메일 기능을 사용하여 Amazon 라이선스가 없는 ePub을 보내는 기능도 영향을 받지 않음
     * 왜 사람들이 Kindle을 구매하는지 이해하지 못하겠음
          + 몇 년 전 Kobo Clara를 구매했고, 일반 MOBI와 ePub 파일을 지원함
          + 책 구매가 리더와 연결되지 않아 문제 없이 사용 중임
          + 오늘날 모든 가격대와 형태에서 더 나은 대안이 많음
     * Kindle에 대한 불만을 들었지만...
          + 어떻게 해야 할지 모르겠음
          + 세 번의 ""탭""으로 책을 구매하고 10초 후에 읽기 시작할 수 있음
          + 대안은?
          + 프랑스의 도서관은 전자책 제공이 매우 제한적임
          + 2013년경 Kobo를 소유했었고, 끔찍했음
          + 최근 친구의 기기를 사용해봤지만, 기대하는 UX가 아님
          + ""Parable of the Sower""를 amazon.fr에서 3.49€에 구매했는데, ebooks.com에서는 5.26€이고 여전히 DRM이 걸려 있음
          + 심지어 해적판도 덜 편리함: 일부 파일은 버그가 있고, 일부는 물리적 책의 이상한 OCR임
          + 물리적 책을 읽을 수 없음, 싫어함
          + 전자책을 정말 좋아하면, 지역 서점에서 물리적 책을 구매하여 친구나 좋아할 것 같은 사람에게 줌
          + 도서관에서 전자책을 대여하고, 어디서든 읽을 수 있는 책을 구매할 수 있는 열린 생태계를 원함
          + 하지만 대형 출판사들이 더 잘 안다고 생각하기 때문에 그런 일은 일어나지 않을 것임
          + 그래서 Amazon의 폐쇄된 환경에서 책을 구매하고 읽거나, 아예 하지 않음
     * 참고로, 모든 Kindle 모델은 현재 탈옥 가능함
     * DRM이 없는 책에 특히 불쾌함
          + 예를 들어, 현재 Kindle 스토어에서 Tor 출판사의 책을 구매하고, azw3 파일을 다운로드하여 KindleUnpacker 같은 도구로 ePub으로 변환하여 어디서든 읽을 수 있음
          + DRM을 깨지 않아도 됨
     * 이미 Kindle에 묶여 있는 사람들에게는 뭐라 말해야 할지 모르겠음
          + 하지만 DRM이 없고 감시가 없는 전자책 생태계를 지원하는 것이 모두에게 건강할 것임
          + 내가 찾은 해결책은 DRM이 없는 EPUB와 PDF로 전자책을 구매하고, 오픈 소스 데스크톱 도구와 PocketBook InkPad Lite에서 읽는 것임
     * Kindle의 열풍을 이해하지 못하겠음
          + Kobo는 훨씬 나은 경험을 제공하고 무제한 플랜이 더 저렴함
          + Kobo는 월 $8, 책과 오디오북은 $10임
          + Kindle은 $12 고정임
          + Kobo는 Google Drive와 Dropbox 통합을 제공함
          + 또한 e-리더는 같은 화면을 사용함 (단, ""colorsoft""는 여전히 e-ink 제품임)
     * Kindle을 떠나려고 시도했지만, 이메일을 통해 전송된 epub의 읽기 진행 상황을 물리적 리더와 iPhone의 Kindle 앱 간에 잘 동기화하기 때문에 계속 돌아오게 됨
          + 최근 Boox Palma를 구매했는데, 매우 마음에 들지만 Android Kindle 앱은 이메일로 전송된 epub의 챕터 남은 시간을 표시할 수 없음
          + Kindle 하드웨어 리더와 iPhone Kindle 앱은 이 기능을 문제없이 제공하는데, 이 점이 매우 놀라움
          + 이 문제를 해결한 사람이 있을 경우를 대비해 이 이야기를 공유함
     * Kobo는 기본적으로 모든 연결 서비스를 비활성화하는 사이드로딩 모드를 제공함 (계정이 필요 없고, 온라인 스토어도 필요 없음)
          + 강력히 추천하는 대안임
"
"https://news.hada.io/topic?id=19309","Audiblez v4 - 전자책을 오디오북으로 변환하는 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Audiblez v4 - 전자책을 오디오북으로 변환하는 도구

Audiblez란?

     * .epub 전자책을 .m4b 오디오북으로 변환하는 도구
     * Kokoro-82M 기반의 고품질 음성 합성 사용
     * Apache 라이선스로 제공되며, 100시간 이하의 오디오 데이터로 훈련됨
     * Google Colab의 T4 GPU에서 ""초당 600자 변환 속도""로 ""Animal Farm""을 약 5분 내 변환 가능
     * M2 MacBook Pro(CPU 모드)에서는 ""초당 60자 속도로 약 1시간 소요""
          + Apple Silicon(M1, M2)에서는 현재 CUDA 지원 없음 (MLX 지원 대기 중)

Audiblez 4.2 주요 업데이트

     * wxWidgets 기반의 멀티 플랫폼 GUI 지원 (Mac, Windows, Linux)
     * 다양한 언어 지원 (영어, 스페인어, 프랑스어, 힌디어, 이탈리아어, 일본어, 포르투갈어, 중국어)
     * ONNX에서 kokoro 패키지를 사용한 Torch 기반으로 변경
     * CUDA 가속 지원 (단, Apple Silicon에서는 CPU 모드로 실행)
     * 오디오북에 표지 이미지 및 챕터 타임스탬프 포함
     * Windows 지원 향상

   Kokoro-82M 모델로 전자책을 오디오북으로 변환하기
   이거 기반인데 여기에 포함된 한국어가 Audiblez에는 없네요 ( 댓글에 Kokoro의 한국어 품질은 별로라는 얘기가 있긴 합니다)

   kokoro 프로젝트 과거 기록을 보면 분명 한국어 보이스가 있었는데 discord 쪽 논의를 보면 한국 aihub 의 해외 데이터 반출금지 조항때문에 배포에는 어려움을 겪고 있는 상황인 것 같습니다…
"
"https://news.hada.io/topic?id=19299","HN 공개: 실시간 업데이트되는  'What a week, huh?' 밈 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 공개: 실시간 업데이트되는 'What a week, huh?' 밈 버전

   잘 모르겠네요.........

        Hacker News 의견

     * 이건 정말 환상적임. 잘했음
          + 아직 끝나지 않았다면, 동적으로 만들어 항상 정확하게 유지할 수 있음
          + 12월 31일 저녁에는 tintin이 아무 말도 하지 않는 대체 옵션을 제공할 수 있음
          + 밤에는 주를 선택함
          + 주말에는 월을 선택함
          + 월말에는 연도를 선택함
          + 연말에는 대체 옵션을 제공함
     * 현재 시간은 Cloudflare Worker가 요청 IP를 사용해 결정함
          + IP 주소로 현재 시간을 결정하는 이유를 궁금해했음
          + 아마도 IP를 지리적으로 위치 파악해 클라이언트의 시간대를 결정하고, 이를 사용해 서버 시간을 사용자의 로컬 시간으로 변환하는 것 같음
          + '로컬 시간'을 위한 선호 시간대를 지정하는 표준 요청 헤더가 있으면 좋겠음
          + 많은 웹사이트가 Accept-Language를 무시하고 독일어 콘텐츠를 보여주는 것처럼
          + 여전히 훌륭한 작업임
          + Tintin이 왜 요즘 유행하는지 아는 사람 있음? 뭔가 놓친 것 같음
          + 내 피드가 갑자기 Tintin 콘텐츠로 가득 참
     * 팁으로, <meta http-equiv=""Refresh""> 태그를 사용해 브라우저가 N초 후 자동으로 새로 고침되도록 할 수 있음
          +
     * 이걸 알아차리는 데 이렇게 오래 걸리다니 믿을 수 없음
          + 밈 자체는 원래 만화의 수정된 이미지임
          + 말풍선이 만화의 나머지 부분에 비해 너무 깨끗함
          + Hergé의 독특한 말풍선을 모방한 것 같음
     * 왜 그런지 모르겠지만, 이건 인터넷 초창기를 떠올리게 함
          + 무작위적이고 쓸모없지만 재미있는 콘텐츠로 가득 찼던 시절
          + 최고의 것들은 종종 그다지 의미가 없었음
     * 이 농담의 유머가 시간의 흐름에 따라 공감에서 부조리로 이동하는 방식이 마음에 듦
          + 주간 예를 들어, 수요일에 최고 공감을 이룬다고 생각함
          + 주말에는 대부분의 사람들에게 최고 부조리를 이룰 것 같음
          + 목요일에 대한 논쟁은 듣지 않겠음, 목요일을 이해할 수 없었음
     * 현재 시간은 Cloudflare Worker가 요청 IP를 사용해 결정함 (로그 기록이나 저장되지 않음)
          + 이상한 설계임
          + 브라우저에 약 10줄의 JavaScript를 보내면 실제로 실시간 업데이트 버전을 만들 수 있음
          + GeoIP에 기반한 가정 대신 사용자의 실제 시간대를 사용할 수 있음
          + 서버 측 코드 없이 페이지가 존재할 수 있음
     * ""What a week, huh"" 밈에 대한 설명
          + Liz Lemon이 Jack Donaghy에게 힘든 주를 보냈다고 불평하는 장면
          + ""What a week""는 주가 끝났다는 것을 의미하지 않음
          + 주 중간에 ""What a week""라고 말할 수 있음
          + ""It's Wednesday""라는 응답은 ""아직 수요일이야, 더 많은 일이 일어날 수 있어""라는 의미를 가짐
     * 이 밈이 다른 언어로 번역되었으면 좋겠음 (이 밈은 국제적임)
          + 특히 Hergé의 원어인 프랑스어로
          + 오픈 소스로 만드는 것도 좋은 아이디어일 수 있음
     * 귀엽지만, 이걸 위해 400개 이상의 종속성을 가진 Astro 프레임워크를 사용하는 게 재미있음
          + 매우 편리할 것 같음
          + 아마도 원칙적인 접근일 것임
"
"https://news.hada.io/topic?id=19289","YouTube, 채널 소유자에게 전화 인증 요청, 개인 정보 영구 덮어쓰기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               YouTube, 채널 소유자에게 전화 인증 요청, 개인 정보 영구 덮어쓰기

        Hacker News 의견

     * 며칠 전 Google에서 전화번호 인증을 요청받았음. 인증 후 Google이 내 개인 정보를 덮어썼다는 이메일을 받았음. 엄마가 전화 요금을 내기 때문에 내 계정의 이름을 엄마 이름으로 자동 ""인증""하고 내 동의 없이 모든 정보를 업데이트했음
          + Google의 누군가가 ""프로그래머들이 전화번호에 대해 믿는 잘못된 사실""을 읽어야 할 것 같음
          + 전화번호가 개인을 고유하게 식별한다고 생각하는 것은 잘못된 생각임
          + 전화번호를 기업에 제공하는 것을 정상화하는 것을 멈춰야 함. 내가 전화를 받고 싶지 않다면 왜 전화번호를 주겠는가. 전화번호는 식별자가 아님
          + 사회보장번호도 마찬가지임. 세금 관련 서류를 보내줄 것이 아니라면 제공하지 않음
     * 비슷한 경험으로 Google Maps에 내 Airbnb 아파트를 등록했을 때, Maps가 내 목록을 건물의 목록과 병합하고 건물 전체 목록에 대한 관리자 권한을 부여했음
          + 지원팀은 내가 소유하지 않은 것에 대한 Maps 권한을 원하지 않는다는 것을 이해하지 못했음
          + 자신을 분리하거나 제거하는 방법이 작동하지 않았음
     * 벨기에에서는 고객이 번호를 새 서비스로 이전하지 않고 떠나면 통신사가 모바일 전화번호를 재사용함
          + 이로 인해 새로운 Google 계정을 만들 수 없는 번호를 가진 새로운 모바일 가입자가 생기거나, 이전 소유자의 Whatsapp 계정을 얻는 문제가 발생함
     * Gmail 오류로 인해 google@gmail.com으로 보내진 모든 이메일을 받게 되었음
          + Google에 아는 사람이 있어서 문제를 해결할 수 있었음
          + Google을 중요한 일에 신뢰하지 않음. 문제가 발생하면 영원히 잘못된 상태로 남을 것임
     * 법적 이름을 아는 것이 왜 그렇게 중요한지 이해할 수 없음. 문제가 있는 콘텐츠는 삭제하고, 그렇지 않으면 가명을 사용하게 하면 됨
     * 스트리밍을 자체 호스팅하는 것에 대한 관심이 있는지 궁금함. ISP에서 일한 경험으로는 대역폭 비용이 그렇게 큰 장애물은 아님
          + 스트리머들이 YouTube와 Twitch의 속박에서 벗어나고 싶어할 것 같지만, 플랫폼 사용자에게 채널이 광고되지 않는 것에 대해 덜 열광할 것 같음
          + Stripe 계정을 유지하는 것도 번거로움
          + 소프트웨어를 판매하는 것이 목표이며, 또 다른 호스팅 서비스를 만드는 것이 아님. 시장이 있다고 생각하지 않음
     * Googleplex에 직접 방문하여 문제를 해결한 경험이 있음
     * 누군가가 전화번호를 가지고 있으면 간단한 API 호출로 전체 이름을 얻을 수 있다는 것을 알게 되었음
     * Google Video를 기억하는 사람? 이런 문제로 가득 차 있었음. YouTube에 경쟁에서 졌음
     * 2025년, Google vs YouTube vs AdSense 계정의 분열된 세계가 여전히 해결되지 않았으며, 점점 더 악화되고 있음
          + Google 계정: 개인 계정으로 모두가 알고 있음. GSuite가 있는 경우, 그 목적을 알 수 없음
          + YouTube 계정(채널): Google 계정과 YouTube 계정 간의 다대다 관계가 생겼지만, 기본적으로 이전 YouTube 계정처럼 작동함
          + AdSense 계정: 청구 계정으로, Google 계정 및 AdSense 프로젝트와 다대다 매핑됨. 고유한 청구 세부 정보가 필요함
          + Google 계정 로그인 정보를 편집하면 AdSense 계정 세부 정보가 변경되는 상황이 발생했음
          + 이 문제는 HackerNews에 올라와서 곧 해결될 것임
          + YouTube 계정을 독립적인 것으로 만들거나 모든 계정을 분리하여 더 명확하게 구성할 수 있는 것이 좋은 해결책임
"
"https://news.hada.io/topic?id=19202","정차 시마다 나타나는 팝업 광고 도입한 Jeep","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       정차 시마다 나타나는 팝업 광고 도입한 Jeep

     * Stellantis의 광고 도입
          + Stellantis는 Jeep, Dodge, Chrysler, Ram의 모회사로, 인포테인먼트 시스템에 전체 화면 팝업 광고를 도입함.
          + Jeep 소유자들은 Mopar의 연장 보증 서비스 광고가 차량이 멈출 때마다 나타난다고 보고함.
          + 운전 중 GPS를 확인하려 할 때 광고가 화면을 가로막아 기본 기능에 접근하기 위해 수동으로 광고를 닫아야 하는 불편함이 있음.
     * 사용자 반응 및 Stellantis의 대응
          + 한 Jeep 4xe 소유자는 온라인 포럼에 이러한 팝업이 운전 경험을 방해한다고 불만을 제기함.
          + Stellantis는 ""JeepCares"" 대표를 통해 SiriusXM과의 계약에 따른 것이라고 설명하며, 사용자가 ""X""를 눌러 광고를 닫을 수 있다고 제안함.
          + 회사는 광고 빈도를 줄이기 위해 노력 중이라고 주장하지만, 고객 신뢰에 이미 손상이 있을 수 있음.
     * 관련 링크
          + TikTok이 Android 사용자에게 앱 사이드로드를 권장함
          + Enshittification Hall of Shame
          + 중국의 BYD가 1만 달러 예산 전기차에 '고급' 자율주행 기능 추가 계획

        Hacker News 의견

     * Jeep 차량의 팝업 광고 문제에 대한 기사 링크와 이를 비활성화하는 방법 설명이 있음
          + Jeep 사용자 계정을 만들고 약관에 동의한 후 알림을 원격으로 비활성화하는 방법이 있음
          + 이러한 중앙 집중식 제어는 미래에 광고를 다시 활성화할 가능성을 남겨둠
     * Jeep/Chrysler가 자동차 산업에서 반복적으로 최악의 결정을 내리는 이유에 대한 궁금증이 있음
          + 이는 무능함인지 아니면 그들의 사업 방식인지에 대한 의문이 있음
     * Jeep과 관련된 파산 뉴스가 끊임없이 나오고 있음
          + Mercedes, Fiat, PSA와의 역사적 관계를 알고 있으며, 이러한 잘못된 결정의 실험대상이 된 느낌임
     * 만약 그런 광고를 본다면 인포테인먼트 화면을 부술 것 같음
     * 자동차에 광고를 전면 유리창에 투사할 수 있는 헤드업 디스플레이가 있다면 매우 유망할 것 같음
     * BMW나 다른 제조사가 내 차에 그런 광고를 한다면, 블루투스 통화로 계속해서 판매 담당자에게 전화를 걸어 광고로 얻는 수익보다 더 많은 손해를 입히겠음
     * 내 나라에서 Stellantis(Jeep 브랜드 소유자)가 에어백 문제를 숨기며 돈을 절약하려 했음
          + 이제는 무시할 수 없을 만큼 많은 사망자가 발생하여 리콜을 했지만 대기 시간이 매우 길음
     * 2016년부터 알고 있었던 문제를 8년 후에야 리콜함
          + 그동안 천천히 해결했으면 운전자 사망을 피할 수 있었을 것임
     * 새로운 Jeep 광고 시스템 개발에 더 많은 노력을 기울였을 것 같음
     * Jeep을 절대 사지 말아야 할 이유를 상기시켜주는 것 같음
     * SlashDot 게시물은 YouTube 비디오 링크를 포함하며, 이는 Twitter 게시물을 논의하고 Reddit 게시물을 다시 게시함
          + 재미있다고 생각함
     * 광고가 멈출 때마다 나타나는지에 대한 의문이 있음
          + 광고 소프트웨어가 버그가 없는지 확신할 수 없음
          + 운전 중에 광고가 나타나고 내비게이션 부족으로 인해 사고가 발생할 가능성에 대한 우려가 있음
     * Ford의 차량 내 광고 시스템 특허에는 사용자의 최소 광고 추구 성향에 반대하는 힘을 제공하는 조항이 있음
          + 광고 재생 시간을 지능적으로 조정하여 회사 수익을 극대화하면서 사용자 경험에 미치는 영향을 최소화하려 함
          + 자동차 회사들은 아무도 이런 것을 원하지 않는다는 것을 알지만 신경 쓰지 않음
     * 다양한 모델 연도의 자동차에서 사용자 비우호적인 기능을 추적하는 도구(웹사이트)가 필요할 것 같음
          + 구매 시 현명한 선택을 할 수 있도록 도움을 줄 수 있음
"
"https://news.hada.io/topic?id=19269","2024년 가장 조회수 높은 소프트웨어 엔지니어링 발표들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    2024년 가장 조회수 높은 소프트웨어 엔지니어링 발표들

     * 각 컨퍼런스의 발표 영상중 조회수가 많은 수대로 100개를 정리 (제목만 한글로 번역)
     * 소프트웨어 엔지니어링 산업의 2024년 변화, 원인, 그리고 다음 단계 - Gergely Orosz (Craft Conference) ⸱ 44m 51s
     * 하이프를 넘어서: 대형 언어 모델의 현실적인 관점 - Jodie Burchell (GOTO 2024) ⸱ 42m 52s
     * OpenTelemetry란 무엇인가? - Martin Thwaites (GOTO 2024) ⸱ 46m 34s
     * DuckDB: 노트북에서 서버까지 데이터를 처리하는 방법 - Gabor Szarnyas (GOTO 2024) ⸱ 36m 30s
     * 웹 개발의 다음 단계 이해하기 - Steve Sanderson (NDC London 2024) ⸱ 57m 49s
     * Rust로 파일 시스템 만들기 - Kent Overstreet ⸱ 35m 16s
     * Zalando의 신뢰성 엔지니어링 가이드 - Heinrich Hartmann (GOTO 2024) ⸱ 50m 53s
     * Java: 10억 개의 날씨 데이터를 얼마나 빠르게 파싱할 수 있을까? - Roy van Rijn (GOTO 2024) ⸱ 42m 16s
     * GPT 내부 탐험 – 대형 언어 모델 해부 - Alan Smith (GOTO 2024) ⸱ 47m 21s
     * EDA의 중심에서의 서버리스 컴퓨팅 - Julian Wood (GOTO 2024) ⸱ 50m 56s
     * 가장 적합한 빅데이터 아키텍처는 무엇인가? - Christoph Windheuser (GOTO 2024) ⸱ 43m 33s
     * 이벤트 중심 아키텍처의 복잡성이 가지는 함정 - David Boyne (GOTO 2024) ⸱ 46m 58s
     * 내가 아는 최고의 프로그래머 - Daniel Terhorst-North (GOTO 2024) ⸱ 48m 33s
     * 프로그래머를 위한 기본 UX: 내 웹사이트를 예쁘게 만드는 법 - Hilary Stohs-Krause ⸱ 48m 17s
     * 서버리스 아키텍처 발전시키기 - Emily Shea (GOTO 2024) ⸱ 29m 57s
     * React 19의 새로운 기능 - Lydia Hallie ⸱ 20m 04s
     * Spring을 활용한 도메인 주도 설계 구현 - Maciej Walkowiak (Spring I/O 2024) ⸱ 50m 18s
     * C++의 다음 10년 전망 - Herb Sutter (CppCon 2024) ⸱ 1h 36m 30s
     * 나이 들어가는 프로그래머를 위한 조언 - Kate Gregory (NDC TechTown 2024) ⸱ 1h 03m 08s
     * Data + AI Summit 키노트 (Day 1) - Databricks CEO Ali Ghodsi ⸱ 28m 02s
     * Jensen Huang (NVIDIA) & Ali Ghodsi (Databricks)의 대화 - 25m 02s
     * C# 및 .NET의 고성능 코드 작성하기 - Steve Gordon (NDC Oslo 2024) ⸱ 1h 03m 04s
     * .NET 8에서 Async/Await 실수 고치기 - Brandon Minnick (NDC London 2024) ⸱ 56m 24s
     * 리눅스와 Git의 창시자 Linus Torvalds 키노트 - 31m 00s
     * 코드를 넘어서는 AI 지원: 이를 실현하기 위해 무엇이 필요한가 - Birgitta Böckeler (GOTO 2024) ⸱ 39m 09s
     * TDD & DDD 실시간 라이브 코딩 - Chris Simon ⸱ 53m 21s
     * Linus Torvalds와 Dirk Hohndel의 두 번째 대화 ⸱ 31m 05s
     * Spring Data JPA & Hibernate 성능 최적화 - Maciej Walkowiak ⸱ 43m 44s
     * 모던 자바 활용법 - Nicolai Parlog (GOTO 2024) ⸱ 51m 43s
     * 7백만 개 이상의 Postgres 테이블 운영하기 - Kailash Nadh (IndiaFOSS 2024) ⸱ 20m 34s
     * Spring Security 아키텍처 원칙 - Daniel Garnier-Moiroux (Spring I/O 2024) ⸱ 48m 25s
     * 오픈 소스 소프트웨어의 비용과 가치 - Dylan Beattie (NDC Oslo 2024) ⸱ 59m 31s
     * 마이크로프로세서의 미래 - Sophie Wilson (GOTO 2024) ⸱ 57m 37s
     * 아키텍처와 코드의 간극을 메우는 하향식 접근법 - Oliver Drotbohm (GOTO 2024) ⸱ 49m 15s
     * Spring Boot 3.x의 새로운 기능들 - Josh Long (Spring I/O 2024) ⸱ 54m 26s
     * Rust의 완벽성을 향한 여정 - Jon Gjengset ⸱ 55m 59s
     * Elixir에서 디자인 패턴의 새로운 접근법 - José Valim (ElixirConf EU 2024) ⸱ 56m 49s
     * 프롬프트 엔지니어링의 끝? DSPy 프레임워크 활용법 ⸱ 42m 17s
     * C++의 위기와 앞으로의 방향성 - Helge Penne (NDC TechTown 2024) ⸱ 44m 36s
     * 당신의 웹사이트는 JavaScript가 필요없습니다 - Amy Kapernick (NDC Oslo 2024) ⸱ 43m 37s
     * 애플리케이션의 IO를 가장자리로 옮기기 - Scott Wlaschin ⸱ 1h 00m 35s
     * Bootiful Spring Boot 3 - Josh Long ⸱ 44m 32s
     * React를 활용한 분산 컴퓨팅 - Dan Abramov ⸱ 28m 56s
     * API 수명주기 관리의 중요성 - Erik Wilde (GOTO 2024) ⸱ 48m 46s
     * AI의 역사와 미래에 대한 Stanford 교수 Fei Fei Li의 강연 ⸱ 18m 26s
     * 복잡한 문서 위에서 실행되는 프로덕션 RAG 구축 ⸱ 1h 22m 18s
     * Vanilla React - Ryan Florence ⸱ 25m 56s
     * 컨테이너 이미지를 현대적으로 빌드하는 방법 - Adrian Mouat (Chainguard) ⸱ 33m 26s
     * 이벤트 기반 시스템 구축 시 고려할 점 - James Eastham (NDC London 2024) ⸱ 52m 23s
     * C++에서 대기 없는(wait-free) 알고리즘 소개 - Daniel Anderson (CppCon 2024) ⸱ 1h 04m 42s
     * 락 없는(shared pointer) 원자적 데이터 구조 구현하기 - Daniel Anderson ⸱ 1h 02m 11s
     * 소프트웨어 엔지니어링에서 기술 부채 관리하기 - Kevlin Henney (NDC London 2024) ⸱ 1h 07m 18s
     * CSS를 과하게 설계해야 하는 이유 - Kevin Powell (CSS Day 2024) ⸱ 50m 28s
     * Kotlin 2.0 이후 변화 - Talking Kotlin #133 ⸱ 1h 06m 31s
     * 대형 모놀리스를 모듈화하는 전략 - Jimmy Bogard (NDC Oslo 2024) ⸱ 56m 44s
     * .NET과 컨테이너, 추상화 계층의 마법 - Scott Hanselman ⸱ 1h 01m 29s
     * Spring Data JPA 3로 더 빠른 퍼시스턴스 계층 구축 - Thorben Janssen (Spring I/O 2024) ⸱ 49m 50s
     * 소프트웨어 아키텍처의 철학적 접근 - Barry O'Reilly (NDC Oslo 2024) ⸱ 43m 54s
     * Flutter, Dart 및 WASM: 웹 애플리케이션의 새로운 모델 - Kevin Moore (Wasm I/O 2024) ⸱ 31m 19s
     * 팀 토폴로지가 조직 성공에 미치는 영향 - Manuel Pais (GOTO 2024) ⸱ 44m 02s
     * React Router 7 튜토리얼 (프레임워크 모드) ⸱ 35m 30s
     * Tauri 2.0의 변화와 전망 - Daniel Thompson-Yvetot (DevWorld 2024) ⸱ 23m 36s
     * 웹 애플리케이션에 AI를 실용적으로 적용하는 방법 - Steve Sanderson ⸱ 58m 37s
     * 클라우드 플랫폼 팀을 위한 궁극적인 토폴로지 - Ben Ellerby (GOTO 2024) ⸱ 14m 53s
     * C#의 함수형 프로그래밍 여정 - Mads Torgersen (NDC Sydney 2024) ⸱ 1h 00m 41s
     * .NET 8과 C# 12의 새로운 기능들 - Filip Ekberg (NDC London 2024) ⸱ 58m 49s
     * 마이크로서비스 아키텍처에서의 트랜잭션 관리 - Udi Dahan (NDC Oslo 2024) ⸱ 58m 25s
     * C++ 반환 값 최적화 (RVO)의 실제 적용 - Michelle Fae D'Souza ⸱ 1h 01m 17s
     * Power BI on Databricks 최적 활용법 ⸱ 50m 51s
     * Building Green Software Part 5: Green Networking • Anne Currie • GOTO 2024 ⸱ 13m 49s
     * Know your Java? by Venkat Subramaniam ⸱ 37m 41s
     * Data + AI Summit 2024 - Keynote Day 2 - Full ⸱ 2h 15m 38s
     * 오픈텔레메트리 실무 적용 가이드 - Martin Thwaites (NDC London 2024) ⸱ 1h 00m 41s
     * 100가지 자바 코드 스니펫 요약 - Adam Bien ⸱ 51m 05s
     * Deferring Data + Streaming in Remix ⸱ 14m 32s
     * Spring Data JPA에서 JDBC로 마이그레이션 - Jens Schauder (Spring I/O 2024) ⸱ 42m 06s
     * 키노트: 락스타 개발자가 되는 법 - Dylan Beattie (CPH DevFest 2024) ⸱ 58m 36s
     * 디자인 패턴을 현대적인 자바에서 재해석하기 - Venkat Subramaniam ⸱ 2h 41m 21s
     * .NET 로깅을 잘못하고 있다면? 바로잡는 법 - Nick Chapsas (NDC London 2024) ⸱ 54m 21s
     * Spring Boot의 분산 스케줄링 도전과제 및 해결책 ⸱ 46m 17s
     * 리눅스 커널 보안 취약점(CVE) 급증의 원인 - Greg Kroah-Hartman ⸱ 39m 30s
     * Rust 기반 게임 엔진 Bevy의 사용성 연구 - Chris Biscardi ⸱ 54m 25s
     * Java 성능 최적화: 10억 개의 행을 2초 이내에 처리하기 - Roy van Rijn ⸱ 49m 09s
     * ASP.NET Core 및 .NET에서 백그라운드 서비스 관리하기 - Steve Gordon (NDC London 2024) ⸱ 59m 30s
     * Vertical Slice Architecture를 이용한 아키텍처 설계 - Chris Sainty (NDC London 2024) ⸱ 58m 25s
     * Databricks를 활용한 RAG 기반 챗봇 만들기 ⸱ 18m 30s
     * Through the Fire and the Flames - Jon Gjengset (EuroRust 2024) ⸱ 31m 09s
     * Scala-Powered Strategies for Building Fault-Tolerant Systems - Dmitrii Pakhomov (Conf42 SRE 2024) ⸱ 15m 59s
     * Spring Modulith로 현대적인 모놀리스 시스템 구축하기 - Cora Iberkleid (Spring I/O 2024) ⸱ 52m 55s
     * 10가지 의견으로 .NET 애플리케이션 유지보수성 향상하기 - Scott Sauber (NDC Sydney 2024) ⸱ 1h 02m 23s
     * C++에서 빠르고 작은 코드 작성하기 - Andreas Fertig (CppCon 2024) ⸱ 1h 02m 38s
     * DynamoDB와 이벤트 기반 아키텍처 - Alex DeBrie (GOTO 2024) ⸱ 36m 51s
     * AI-Assisted 개발자의 미래 업무 방식 - Addy Osmani (JSNation US 2024)⸱ 25m 17s
     * Java meets TypeScript: Spring Boot와 React를 활용한 풀스택 개발 - Marcus Hellberg ⸱ 49m 25s
     * Rust 2024 및 그 이후의 방향성 - Nicholas Matsakis ⸱ 33m 48s
     * 관측 가능성(Observability) 버전 관리가 필요한가? - Charity Majors (GOTO 2024) ⸱ 35m 26s
     * React 서버 컴포넌트의 동작 원리 - Kent C. Dodds ⸱ 21m 46s
     * React Conf 2024 키노트 (Day 2) ⸱ 55m 15s
     * 조직의 AI 혁신을 주도하는 방법 - Rasmus Lystrøm (GOTO 2024) ⸱ 29m 13s
     * Back to Basics: 거의 모든 경우 벡터(Vector) 사용 - Kevin Carpenter (CppCon 2024) ⸱ 1h 02m 01s

   압도적으로 GOTO 영상이 많네요..

   AI 에게 부탁해본 인사이트 분석
   https://chatgpt.com/share/67b29001-d7f0-8012-8296-990169c41c98

   공유 URL 이 오래 유지되지 않는 것 같아.

   내용만 긁어 다시 달아봅니다.


   아래는 앞서 제시한 인사이트를 뒷받침하는 구체적인 사례들과 함께 2024년 개발자들의 관심사를 심도 있게 분석한 내용입니다.
    1. AI 및 대형 언어 모델에 대한 집중

   주요 사례:
   “하이프를 넘어서: 대형 언어 모델의 현실적인 관점” (Jodie Burchell, GOTO 2024)
   “GPT 내부 탐험 – 대형 언어 모델 해부” (Alan Smith, GOTO 2024)
   “AI의 역사와 미래에 대한 Stanford 교수 Fei Fei Li의 강연”

   심도 있는 분석:
   개발자들은 단순히 AI의 최신 트렌드에 머무르지 않고, 기술 내부 구조와 실제 응용 사례에 대해 깊이 있는 이해를 원합니다. 대형 언어 모델의 작동 원리와 실제 개발 프로세스에 대한 토론은, AI 기술의 실용화와 한계를 동시에 점검하려는 시도로 볼 수 있습니다.
    2. 클라우드, 서버리스 및 분산 시스템의 진화

   주요 사례:
   “EDA의 중심에서의 서버리스 컴퓨팅” (Julian Wood, GOTO 2024)
   “컨테이너 이미지를 현대적으로 빌드하는 방법” (Adrian Mouat, Chainguard)
   “마이크로서비스 아키텍처에서의 트랜잭션 관리” (Udi Dahan, NDC Oslo 2024)

   심도 있는 분석:
   시스템의 확장성과 효율성을 극대화하기 위한 분산 아키텍처에 대한 관심이 증가하고 있습니다. 서버리스 컴퓨팅과 컨테이너 기반 접근 방식은 개발자들이 인프라 관리 부담을 줄이고, 애플리케이션의 민첩성을 높이기 위한 핵심 전략으로 자리 잡고 있습니다.
    3. 프로그래밍 언어 및 성능 최적화에 대한 지속적 관심

   주요 사례:
   “Rust로 파일 시스템 만들기” (Kent Overstreet)
   “C++의 다음 10년 전망” (Herb Sutter, CppCon 2024)
   “Java: 10억 개의 날씨 데이터를 얼마나 빠르게 파싱할 수 있을까?” (Roy van Rijn, GOTO 2024)
   “C++에서 대기 없는(wait-free) 알고리즘 소개” (Daniel Anderson, CppCon 2024)

   심도 있는 분석:
   성능과 효율성을 극대화하는 코딩 기법, 메모리 최적화, 언어의 발전 방향 등이 큰 주목을 받고 있습니다. 특히, C++와 Rust 같은 시스템 프로그래밍 언어에 대한 논의는, 대규모 데이터 처리와 실시간 시스템의 필요성에서 비롯된 것으로 보입니다.
    4. 웹 개발 및 최신 프레임워크의 발전

   주요 사례:
   “웹 개발의 다음 단계 이해하기” (Steve Sanderson, NDC London 2024)
   “React 19의 새로운 기능” (Lydia Hallie)
   “React를 활용한 분산 컴퓨팅” (Dan Abramov)
   “Java meets TypeScript: Spring Boot와 React를 활용한 풀스택 개발” (Marcus Hellberg)

   심도 있는 분석:
   웹 애플리케이션은 사용자 경험 개선과 성능 최적화가 필수입니다. React와 같은 최신 프레임워크의 업데이트와 새로운 기능 소개는 개발자들이 더욱 직관적이고 효율적인 웹 솔루션을 구축하기 위한 밑거름으로 작용합니다. 또한, 백엔드와 프론트엔드 간의 통합적인 개발 패러다임이 점점 더 강조되고 있습니다.
    5. 소프트웨어 아키텍처 및 모듈화 전략

   주요 사례:
   “대형 모놀리스를 모듈화하는 전략” (Jimmy Bogard, NDC Oslo 2024)
   “Spring을 활용한 도메인 주도 설계 구현” (Maciej Walkowiak, Spring I/O 2024)
   “Vertical Slice Architecture를 이용한 아키텍처 설계” (Chris Sainty, NDC London 2024)
   “팀 토폴로지가 조직 성공에 미치는 영향” (Manuel Pais, GOTO 2024)

   심도 있는 분석:
   기존의 거대한 모놀리식 시스템을 보다 유지보수하기 쉽고 확장 가능한 모듈화된 아키텍처로 전환하려는 노력이 두드러집니다. 이는 소프트웨어 개발의 복잡성이 증가함에 따라, 시스템 전체의 응집도와 유연성을 높이기 위한 조직적 접근법과도 연계됩니다.
    6. 운영, 보안 및 인프라스트럭처 최적화

   주요 사례:
   “오픈텔레메트리란 무엇인가?” (Martin Thwaites, GOTO 2024)
   “리눅스 커널 보안 취약점(CVE) 급증의 원인” (Greg Kroah-Hartman)
   “클라우드 플랫폼 팀을 위한 궁극적인 토폴로지” (Ben Ellerby, GOTO 2024)

   심도 있는 분석:
   시스템의 복잡성이 증가하면서 모니터링, 관측성, 보안에 대한 관심도 함께 높아지고 있습니다. 실시간 모니터링과 보안 취약점 대응은 시스템 안정성을 확보하는 데 필수적이며, 이를 위한 최신 도구와 기법에 대한 논의가 활발하게 이루어지고 있습니다.
    7. 데이터와 AI 기반의 통합 솔루션

   주요 사례:
   “Data + AI Summit 키노트”
   “Databricks를 활용한 RAG 기반 챗봇 만들기”
   “Power BI on Databricks 최적 활용법”

   심도 있는 분석:
   데이터 분석과 AI 기술이 결합된 솔루션에 대한 관심이 눈에 띕니다. 기업들이 방대한 데이터를 실시간으로 분석하고, 이를 기반으로 한 AI 솔루션을 도입하는 추세는, 데이터 기반 의사결정과 효율적 비즈니스 프로세스 구축에 필수적인 요소로 자리 잡고 있습니다.

   종합 분석

   2024년 개발자들은 최신 기술 트렌드를 단순히 따라가는 수준을 넘어, 기술의 근본 원리와 실제 응용 사례에 대해 깊이 탐구하고 있습니다.

   혁신적인 AI 기술과 이를 둘러싼 현실적 접근법은 개발자들의 큰 관심사입니다.
   분산 시스템과 서버리스 아키텍처에 대한 논의는, 더 높은 확장성과 효율성을 추구하는 방향성을 반영합니다.
   성능 최적화와 언어 발전에 관한 토론은, 기존의 한계를 극복하고자 하는 기술적 도전 의식을 보여줍니다.
   웹 기술과 프레임워크의 최신 동향은, 사용자 경험과 개발 생산성의 균형을 맞추기 위한 노력으로 해석할 수 있습니다.
   모듈화된 소프트웨어 아키텍처와 운영/보안 최적화에 관한 논의는, 복잡해진 시스템 관리의 효율성과 안정성을 높이기 위한 필수 전략입니다.
   이러한 다양한 주제들을 통해, 2024년 개발자 커뮤니티는 혁신과 실용성의 균형을 추구하며, 앞으로의 기술 발전과 실무 적용에 적극적으로 대응하고 있음을 알 수 있습니다.

   감사합니다 요약 잘 보이네요

   404 not found 가 뜨고있습니다. ㅜ

   Hacker News 에서 몇몇 의견을 가져와 봅니다.
     * 과거부터 현재까지의 모든 기술 컨퍼런스 동영상을 추적/링크하는 아카이빙 플랫폼이 있었으면 좋겠음. 유튜브는 별로임. 필요한 기능들:
          + 깊이 있는 토론 가능 (마크다운 지원 포함)
          + 커뮤니티 노트 기능 : 오래된 정보, 정정 사항, 관련 강연 등을 표시할 수 있도록 함
          + 새로운 컨퍼런스 및 덜 알려진 소규모 행사 노출
          + 사용자 큐레이션 지원
          + 좋아요/싫어요 기능 복원
          + 조회수 통합 추적 - 컨퍼런스 자체 사이트, YouTube, Vimeo 등 다양한 출처의 조회수를 하나로 집계
          + 발표 자료 및 소스 코드 연동
          + 발표자 프로필 및 검증
          + 자동화된 콘텐츠 업데이트 및 동기화 컨퍼런스 주최자 및 발표자가 쉽게 영상을 추가 및 업데이트
     * 아마도 이 사이트에서 트래킹 하는 컨퍼런스가 아니어서 빠진듯 한데 FOSDEM에서 발표한 So You Think You Know Git? 이 1.3백만 뷰임
     * 목록에 ""거물급"" 이름이 없다는 사실에 정말 놀람. PyCon이 왜 없나 해서 가보니, 작년의 키노트 조차 조회수가 천 건을 겨우 넘김
     * AI 엔지니어링에서 유명한 영상들
          + Jerry Liu on Agentic RAG: https://www.youtube.com/watch?v=zeAyuLc_f3Q
          + Emil Eifrem on GraphRAG: https://www.youtube.com/watch?v=knDDGYHnnSI&t=2s
          + Justine Tunney on LlamaFile: https://www.youtube.com/watch?v=-mRi-B3t6fA
          + Daniel Han on Low Level Technicals of LLMs: https://www.youtube.com/watch?v=pRM_P6UfdIc&t=5094s
     * 기술 컨퍼런스 영상 목록 생성 방식은 문제점이 있음
          + 컨퍼런스 목록이 제한적임
          + 총 조회수 기준으로 영상 순위를 매겨서, 동일 영상이 중복 게시될 경우 조회수가 분산됨
          + 조회수 외에 다른 참여도 지표*를 활용하면 어떨까? : 좋아요 수, 구독자 대비 조회 비율, 댓글 수, 인바운드 링크 수

   https://devhub-ko.vercel.app

   Devhub 라는 서비스를 개발하고 있습니다.
   아이디어가 너무 좋네요!
   참고하도록 하겠습니다 :)

     기술 컨퍼런스 동영상을 추적/링크하는 아카이빙 플랫폼

   이 아이디어는 매우 좋은데요?
"
"https://news.hada.io/topic?id=19211","리눅스커널 러스트 논쟁, 다시 불타오르다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         리눅스커널 러스트 논쟁, 다시 불타오르다

    1. Direct Memory Access API를 구현한 러스트 코드가 리눅스 커널 리포지토리로 풀 리퀘됨.
    2. 리눅스 커널의 중간 관리자 Christoph Hellwig가 러스트 코드를 리눅스 커널로 들이지 말라면서 거부하고 분쟁이 시작됨.
    3. 분쟁의 크기가 점점 커지면서, Christoph Hellwig가 러스트를 암 세포에 비유함.
    4. 아사히 리눅스의 총 책임자 Hector Martin은 이 암 세포 발언에 반발해, 소셜 미디어에서 리누스 토르발스를 끌어들이면서 맹비난함.
    5. 리누스 토르발스는 Hector Martin에게 ""문제는 당신 자신""이라며 ""소셜 미디어에서 여론 선전(Brigading)을 하지 말라""고 경고함.
    6. 현재 Hector Martin은 애플 Arm 호환 하드웨어를 지원하는 업스트림 리눅스 코드 관리자에서 사임을 요청.

   니들이 그리 잘났으면 커널을 포크해서 전부 다 rust 로 작성해. 암처럼 스물스물 파고들라고 하지말고. 이런 의견이 많네요

   그게 Redox지요. 아직 지원하지 않는 부분이 있어 리눅스로 가는 거겠지만...

   https://vt.social/@lina/113064510447670892

   해당 코드가 rust 에서 쓰기 쉽게 만들려고 kernel/dma 쪽을 건드린 코드면 모르겠는데,
   kernel/dma 를 래핑한 ffi 레이어를 rust/kernel/dma 에 추가한 코드였습니다.
   원본 코드를 건드린게 아니에요.

   실상 핵심은
   Rust 로 만든 공식 DMA FFI를 잘못 사용해놓고 나한테 문의오는 경우가 싫다. 정도라서...
   그래놓고 그냥 각 드라이버 단에서 알아서들 ffi 만들라고 해라. 라고 앞 뒤가 맞지 않는 말을 했습니다.

   적어주신 내용은 전적으로 헬위그의 발언 그대로인 것 같은데, 그런 의견이 대다수라고 볼 수 있을지는 모르겠습니다.

   큰 프로젝트를 자기 언어의 시험장으로 쓰는 것 좋아보이지 않네요.
   수틀리면 포크하던 옛날로 돌아갈 필요 있습니다.
   기기전반을 다루는 커널에서 rust써봐야 unsafe 쓰기시작하면 읽기 어려운 문제생기는 코드가 되는걸로 밖에 생각이 안들어요.
   무슨 0.91 0.92 0.99 0.991 뭐 이런식의 메인 릴리즈 앖는 프로젝트도 아니고 잘돌아가던 부분들을 포팅하고 있는지 모르겠네요.
   큰 버그 나와서 잡는김에 안전하게 바꿨습니다도 아니구요.

   해당 PR 은 포팅이 아닙니다. 기존 DMA API 를 새로 작성하는 Rust 기반 모듈에서도 쓸 수 있게 Rust 쪽에서 FFI 바인딩을 추가한 PR 입니다. 그걸 DMA 담당자가 막아선거구요.

   글의 제목이 원문 이름으로 변경 되었습니다.

   처리 감사합니다

   안녕하세요. 좋은 글 올려주셔서 감사합니다. 즐겁게 읽었습니다.

   하지만 원문을 확인해보고, 원문의 제목을 확인했을 때 약간 우려되는 사항이 있어서 댓글을 달아봅니다.

   https://news.hada.io/guidelines

     기본적으로 글의 원 제목을 붙이거나, 제목을 한글로 번역해서 올려주세요.

   라고 제안하고 있고. 해당 글의 내용을 읽어봤을 때, ""리눅스커널 러스트 논쟁, 다시 불타오르다."" 대신 ""리누스 토발즈 '문제는 당신'"" 이란 제목은 원래 제목보다도 글의 내용에 오해가 생길 소지가 있다고 생각합니다.

   요약과 글을 소개해주셔서 다시 한번 감사합니다. 좋은 하루 되세요.

   참고하겠습니다.

   'ㅁ 'b 좋은 하루 되세요! 덕분에 좋은 글을 읽어서 감사합니다. (__ )

   좀더 정확한 설명을 위해 제목에 저만의 부제목을 다는 게 버릇이었는데, 제목이 다른 분에게 맞지 않았을 뿐더러 이런 규정이 있다는 것을 몰랐군요. 다음부턴 원문 그대로 내놓겠습니다.

   원 제목은 무엇에 관한 이야기인지 바로 알 수 있는 반면 변경하신 제목은 자칫 낚시성이라는 오해를 불러일으킬 소지가 있어 보입니다. 개인 의견입니다.

   의견 감사합니다.

   리누스의 발언을 가장 중요하다고 생각해 제목으로 올려놨는데 그게 크게 왜곡되었나보군요.

   확실히 주의하겠습니다.

   짱짱맨

   요약본은 일어난 사건만 언급하고 있는데, 원글 (한글입니다) 끄트머리에 사건을 보다 잘 이해하기 위한 추가 배경지식이 2가지 더 붙어있습니다.

   프로젝트를 단일 언어로 관리하는 것이 좋다고 생각하지만 그와 별개로 이를 동료에게 납득시키는 방법은 최악이네요.

   권력으로 무릎꿇게 만드는 건 부조리죠

   해당 PR 메일 스레드입니다:
   https://lwn.net/ml/all/…

   DMA 구현을 수정 한 것도 아니고, DMA API 를 직접 손 댄 것도 아니고, Rust 에서 DMA API 에 접근할 수 있게 FFI 바인딩을 작성한 PR 로 보입니다.
   그런 PR 에 ""No rust code in kernel/dma, please."" 라는 단답으로 거절 한 거고, https://lwn.net/ml/all/20250108135951.GA18074@lst.de/
   그럼 어떻게 하면 좋겠냐 물으니 ""Keep the wrappers in your code instead of making life painful for others."" 라고 합니다. https://lwn.net/ml/all/20250108151858.GB24499@lst.de/
   (하라는 대로 한게 맞습니다. PR 은 kernel/dma 가 아니라 rust/kernel 하위 트리를 수정한겁니다.)

   물론 FFI 바인딩이 추가되면 DMA API 가 바뀔 때 Rust FFI 바인딩도 수정돼야 하긴 하는 부담이 있겠습니다만,
   그건 rust 손대는 쪽에서 알아서 잘 하겠다고 했음에도, 해당 트리 담당이 아닌 사람이 이런 태도로 반발하는게 올바른건지는 잘 모르겠습니다.
   (Christoph Hellwig 는 kernel/dma 메인테이너입니다: https://docs.kernel.org/process/maintainers.html#dma-mapping-helpers)

   그래서 Hector Martin 이 Linus를 타래에 끌어들인 것 같습니다:
   https://lwn.net/ml/all/2b9b75d1-eb8e-494a-b05f-59f75c92e6ae@marcan.st/

   근데 바로 앞선 스레드에서 오간 얘기가 좀 재밌는데요,
   'API 에 breaking change 가 생긴걸 Rust 팀이 재빠르게 대응하지 않으면 빌드가 터지고, Linus 가 PR 을 받아주지 않게 된다' 는 내용입니다.
   아무래도 저는 breaking change 만든 모듈과 다른 모듈간의 문제라고 생각해보면 저는 Rust 가 있는 쪽이 더 나은 것 같습니다.
   x 모듈이 breaking change 를 만들었고, y 모듈이 재빠르게 대응하지 못한 상황인데요,
     * y 모듈이 Rust 짜임: 컴파일이 터져서 Linus 가 머지해주지 않음
     * y 모듈이 C로 짜임: 컴파일은 돼서(??) Linus 가 머지해줌 (????)

   리눅스 커널에서 러스트가 unsafe쓰는 부분은 대부분이 C와 wrapping하는 부분입니다.
   그 외에도 메모리를 직접 다뤄야되는 하드웨어 제어 부분도 있지만 매우 적은 부분입니다.
   러스트가 적용되는 부분은 드라이버 개발입니다. 메모리 관리나 블럭 레이어 등 커널 자체는 건드릴 필요도 없고 할 수도 없습니다.
   커널 자체 코드보다 훨씬 더 많은 코드가 드라이버 코드입니다. 그리고 문제가 생기는 지점들도 대부분 드라이버 코드입니다.
   저는 드라이버 개발 부분이 C보다 더 메모리 안전성이 높고 보안성이 좋은 언어로 개발되는게 맞다고 생각합니다.
   그게 러스트이든 Zig이든 뭐가 될지는 모르겠지만요.
   러스트는 일반 어플을 개발하기에 과하게 복잡하고 C언어 개발자가 빨리 배우기에도 어렵다는 것은 저도 공감합니다.
   그래도 무슨 언어가 됐던간데 드라이버 개발만이라도 최신형 언어로 바뀌길 바랍니다.
   제가 이전회사에서 몇천줄 안되는 드라이버를 개발하고 안정화하는데 대략 7년의 시간이 걸렸는데 완전히 단순화할 수는 없지만 대략 3년 정도는 디버깅만 한것 같습니다.
   대부분이 메모리 관련 버그였고요. 데드락같은 논리적인 오류는 소수였습니다.

   기사 본문에 인용 원문이 없어서 아쉽네요. 궁금해서 원문 찾아서 읽어보고 왔는데, 저도 제대로 파악한건 아니지만 단순히 원문처럼 이야기 하기에는 뒷이야기가 좀 많은것 같습니다.

   큰 c 코드베이스에 러스트를 붙이는게 생각처럼 재밌지 않더라구요. 메모리 안전성을 높인다고 하기엔 어차피 unsafe 영역이 커져서 실효성이 크지 않고.... 그냥 러스트 사용영역이 커지는 것 이상의 의미가 없고.... 해서 기존 c개발자들의 반발을 초래하는게 자연스러운 수순인 것 같습니다. 진짜 러스트로 처음부터 시작하는 커널 프로젝트에 집중하는게 나을 수 있을 것 같습니다.

   아니 본문 퀄리티가 생각보다 준수하네요 재밌게 잘 읽었습니다

   토르발스가 말한 문제는 당신이라는 말은 러스트 도입과 무관하게 기술적 문제의 해답이 SNS가 될 수 없다는 논지였습니다만, 이 요약만 보면 오해의 소지가 있을 것 같습니다.

   헥터 마틴으로선 어쩔 수 없는 선택이었습니다.

   리눅스 중간 관리자가 전부 c 전문가로 채워져 있는데 소수 인원인 러스트 개발자의 의견 따위, 받아줄 리 있겠습니까.

   https://youtu.be/opTJH76wJxs?si=WHR0_1uPpSlpDTHr 논쟁으로 비화되는 과정을 보여줍니다.

   토발즈도 러스트를 허용하는거 아니었냐요?

   토발즈는 해당 논쟁에서 러스트에 대해 한마디도 안했습니다.

   기술적 의견 분쟁이 있을 때, 기술적인 근거로 토론을 진행해야지
   SNS에서 여론을 만들어서 분쟁을 끝내려는 행위를 하지 말라는 소리죠.
"
"https://news.hada.io/topic?id=19265","'Half-Life 2'와 'Dishonored' 아트 리드 Viktor Antonov 별세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          'Half-Life 2'와 'Dishonored' 아트 리드 Viktor Antonov 별세

     * Half-Life 2와 Dishonored의 아트 리드 Viktor Antonov, 52세로 별세
     * Half-Life 2의 아트 디렉터이자 Dishonored의 디자이너인 Viktor Antonov가 52세의 나이로 별세함. 전 Valve 작가 Marc Laidlaw가 소셜 미디어를 통해 이 소식을 전하며, Antonov의 사망에 대한 자세한 정보는 없지만 그의 사망이 확인되었음을 밝힘.
     * Marc Laidlaw는 ""확인될 때까지 말을 아꼈지만, 오늘 Viktor Antonov가 사망했다는 소식을 들었다""며 슬픔을 전함. Antonov는 ""독창적이고 뛰어난"" 아트 리드로서 많은 사람들에게 영향을 미쳤음.
     * Antonov는 17세에 불가리아에서 파리로 이주하여 Half-Life 2, Counter-Strike: Source, Dishonored 등 여러 유명 게임에서 작업하거나 컨설팅을 진행함. Valve 이후 Arkane Studios에 합류하여 The Crossing과 Dishonored 프로젝트에 참여함.
     * Antonov는 ""Valve는 훌륭한 곳이지만, 나는 회사보다 프로젝트에 관심이 있다""며 프로젝트를 최우선으로 두는 자세를 강조함.

        Hacker News 의견

     * Half Life 2와 Dishonored의 어두운 분위기가 정말로 나에게 깊은 인상을 남겼음. 이 두 게임을 정말로 감사하게 생각하며, 이는 예술적 방향 덕분임
          + 이 소식은 정말 슬프지만, 그가 많은 플레이어와 예술가들에게 엄청난 영향을 남겼다는 점이 놀라움
     * Half-life 2는 우리 세대에서 가장 중요하고 영향력 있는 게임 중 하나임. 게임플레이, 예술 스타일, 게임 메커니즘 등 모든 면에서 여전히 뛰어남
          + Dead Space도 비슷하지만, 혁신적이지는 않았음
     * 같은 사람이 두 프로젝트에 관여했다는 것을 몰랐지만, 그 사실을 알자마자 두 게임을 연결하는 개성이 명확해졌음. 짧은 삶에도 불구하고 놀라운 유산을 남겼음
     * Dishonored와 그 속편은 내가 플레이한 가장 기억에 남는 게임 중 하나였음
     * HL2의 예술적 방향은 시간이 지나도 가장 덜 변한 부분임. 오늘날에도 놀라운 설정과 분위기가 될 것임
     * Dishonored의 건축물은 항상 Combine의 느낌을 주었음. 이제 그 이유를 이해함
     * 그는 훌륭한 사람이었고, 죽음에서도 불명예를 받을 자격이 없음
     * RIP. 아직 보지 않은 사람들을 위해, 그는 HL2 20주년 다큐멘터리에서 인터뷰를 했음
     * 게임 업계에서 가장 저명한 예술가 중 한 명이었음. 이 소식을 듣게 되어 안타까움. 스트레스 많고 요구가 많은 비디오 게임 산업의 조건이 이 일에 기여하지 않았기를 바람
     * RIP. Dishonored는 놀랍도록 깊은 세계를 가진 아름다운 게임이었음. 이 소식을 읽게 되어 슬픔. 더 많은 것을 보고 싶었음
"
"https://news.hada.io/topic?id=19196","YouTube 사용자 이메일 유출 취약점 발견하여 $10,000 보상금 수령","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               YouTube 사용자 이메일 유출 취약점 발견하여 $10,000 보상금 수령

     * Google의 내부 People API 문서를 조사하던 중, 사용자를 차단할 때 '프로필 ID'로 불리는 '난독화된 Gaia ID'와 '대체 이름'을 사용하는 것을 발견함
     * YouTube에서 다른 사용자를 차단하면 해당 사용자의 Gaia ID가 https://myaccount.google.com/blocklist에 표시되어 노출될 수 있음을 확인
     * 이러한 Gaia ID는 Google 계정 식별자로, 이를 통해 사용자의 이메일 주소를 알아낼 수 있는 가능성이 제기됨

모든 YouTube 채널로의 확장 가능성

     * 라이브 채팅 사용자의 Gaia ID를 확인할 수 있을 뿐만 아니라, 모든 YouTube 채널에 대해 이 정보를 얻을 수 있는지 조사함
     * YouTube에서 채널의 '더보기' 메뉴를 클릭할 때 특정 요청이 발생하며, 이 요청에 채널의 Gaia ID가 포함되어 있음을 발견함
     * 이러한 요청을 통해 채널의 Gaia ID를 획득할 수 있음을 확인함

Pixel Recorder를 통한 이메일 주소 획득

     * Pixel Recorder라는 Google 제품을 통해 Gaia ID를 이메일 주소로 변환할 수 있는지를 테스트함
     * 녹음을 공유할 때, 수신자의 Gaia ID를 입력하면 해당 이메일 주소를 반환하는 것을 확인함
     * 이를 통해 Gaia ID를 이메일 주소로 변환할 수 있음을 확인함

대상자에게 알림 없이 이메일 주소 획득

     * 녹음을 공유할 때 대상자에게 알림 이메일이 전송되는 문제가 있었음
     * 녹음 제목을 매우 길게 설정하여 알림 이메일이 전송되지 않도록 우회하는 방법을 발견함

전체 공격 체인의 구성

    1. YouTube의 /get_item_context_menu 엔드포인트를 통해 채널의 Gaia ID를 획득
    2. Pixel Recorder를 사용하여 매우 긴 제목의 녹음을 대상자와 공유하여 Gaia ID를 이메일 주소로 변환함
    3. 공유 목록에서 대상자를 제거하여 흔적을 지움

보고 및 보상

     * 2024년 9월 15일: Google에 취약점을 보고함
     * 2024년 9월 16일: Google에서 보고를 접수하고 'Nice catch!'라는 피드백을 받음
     * 2024년 11월 5일: Google 보안 패널에서 $3,133의 보상을 결정함
     * 2024년 12월 12일: 추가로 $7,500의 보상을 받아 총 $10,633의 보상을 받음
     * 2025년 2월 12일: 취약점이 공개됨

        Hacker News 의견

     * 이 제목이 혼란스럽게 느껴졌음. 기사 끝까지 읽지 않은 사람들을 위해: 유출된 이메일은 그들에게 아무 비용도 들지 않았고, 10,000달러의 버그 바운티를 받았음
     * 이 스레드의 3번째 메시지마다 Google이 이 버그에 대해 적게 지불했다는 내용이 있음. 취약점 평가에 대한 기본적인 사항들:
          + 서버 측 취약점의 평가는 낮음. 공급업체들이 경쟁하지 않기 때문임
          + Android/Chrome 같은 전체 체인 버그는 수십만 달러에 거래됨. Google이 잘 확립된 회색 시장과 경쟁하기 때문임
          + 바운티와 회색 시장의 비교는 사과와 오렌지의 비교임. Google은 신뢰할 수 있는 익스플로잇이 필요하지 않기 때문에 회색 시장보다 훨씬 적게 지불함
          + 위협 행위자들은 기존 비즈니스 프로세스에 맞는 취약점을 구매함. 새로운 취약점으로 무엇을 할 수 있을지에 대해 추측하지 않음
     * 바운티 지급은 일반적으로 버그의 창의성이나 흥미로움에 대한 평가가 아님. 그러나 여기서는 서버 측 웹 버그에 대해 10,000달러가 매우 높게 느껴짐
     * 이러한 종류의 버그를 찾는 사람들의 비즈니스 전략은 많은 버그를 찾는 것임. iOS 익스플로잇 개발처럼 한 가지 익스플로잇에 몇 달을 투자하는 것이 아님
     * 최근 경력에서 내가 한 취약점 연구와 비슷함. 하지만 이 일을 전문적으로 하는 사람들이 있다면 그들의 의견을 듣고 싶음
     * 책임 있는 공개, 그 동기와 보상에 대한 많은 이야기가 있음. 그러나 중앙 집중식 영구 신원에 대한 반대 데이터 포인트로서의 이야기는 없음
     * Real Identity™와의 단일 링크로만 작동한다고 주장하는 서비스를 볼 때마다, 공급업체들이 실제로 사용자를 보호하는 데 관심이 없다는 것을 상기하게 됨
     * YouTube에서 상호작용하는 사람을 즉시 폭로할 수 있는 몇 단계 더 가까워질 수 있다고 상상해 보세요. 이것이 이 버그의 실제 영향임
     * 이 버그가 수정된 것은 좋지만, 이 종류의 버그가 곧 사라질 것 같지는 않음. 공급업체와 대기업이 이러한 설계가 위험하다는 것을 깨닫게 하려면 무엇을 해야 할까?
     * 훌륭한 발견임! 이렇게 유명한 서비스에서 취약점을 찾는 것은 이력서에 매우 좋게 보일 것임. 축하함
     * ""공격 체인에 필요한 복잡성 때문에 기본 금액에서 1단계 하향 조정 적용"" - 이것이 일반적인가?
     * 몇몇 취약점 프로그램에만 참여했지만, 대부분은 보안 결함이 매우 간단할 때 보상을 덜 줌
     * 한 댓글러가 이미 바운티 금액이 암시장 가치와 어떻게 관련이 있는지 설명했음. 이제 많은 사람들이 Google이 보안을 충분히 중요하게 여기지 않는다고 생각할 수 있음
     * 보안 목적을 위해 가능한 한 적게 지불해야 함. 더 많이 지불하면 버그를 찾는 인센티브가 증가하고, 암시장도 증가할 수 있음
     * GTO 전략은 가능한 적은 돈으로 암시장을 차단하는 것임
     * Google에서 연구 대상을 찾고 있었고 Internal People API (Staging) 발견 문서를 조사하고 있었음. 이것이 공개되어야 할까?
     * YouTube 채널 소유자에게 이메일을 보내는 방법이 있었으면 좋겠음. 대부분 이메일 연락처가 없고, 스폰서십이나 다른 거래를 위해 연락하기 어려움
     * Google이 90일 이내에 수정되지 않은 경우 보안 취약점을 공개하는지 궁금함. 이 경우 147일 만에 수정되었음
     * 이메일 시스템이 전송되지 않도록 하는 것은 추가적인 문제임. Google과 같은 큰 회사가 많은 제품을 개발했지만, ""보안""은 가짜처럼 느껴짐. 코드 한 줄 한 줄이 잠재적인 취약점이 될 수 있음
"
"https://news.hada.io/topic?id=19294","기업들이 Delaware를 떠나 Nevada & Texas로 이전하는 이유","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               기업들이 Delaware를 떠나 Nevada & Texas로 이전하는 이유

     * 델라웨어는 인구가 100만 명도 안 되지만, 180만 개 이상의 법인과 60% 이상의 포춘 500대 기업 본사가 등록되어 있음
     * 전통적으로 친기업적 법체계와 비즈니스 전문 법원(Chancery Court)으로 인해 회사 설립지로 선호되어 왔음
     * 기업들은 분쟁 발생 시 명확하고 안정적인 법적 환경과 낮은 사법적 개입을 선호하는 경향이 있음
     * 최근 델라웨어 법원에서 정치적 판결 또는 “창의적 판례”가 늘어 예측 가능성에 대한 우려가 커지고 있음

기업들이 선호하는 환경

     * 축적된 판례와 전문 법원으로 인한 법적 안정성을 중시하는 경향이 있음
     * 소송 리스크와 비용이 낮아야 함
     * 경영진과 이사에 대한 책임과 보호가 명확하게 보장되는 환경을 선호함
     * 법적 해석보다는 비즈니스 친화적 접근이 이뤄지길 바라는 움직임이 있음

델라웨어에서의 변화

     * 소수 주주 보호를 위한 엄격한 기준 적용이 늘어나면서 거래가 복잡해지거나 무산될 수 있다는 우려가 있음
     * Tesla, Dropbox, SpaceX 등 대형 테크 기업이 델라웨어 외 다른 주로 법인 이전을 결정하거나 검토 중임
     * 소송이나 합병 이슈를 겪는 기업이 늘면서 델라웨어의 예측 가능성이 떨어진다는 인식이 확산되고 있음

델라웨어를 떠나는 대표 기업 사례

     * SpaceX, Tesla: 텍사스로 본사를 이전
     * Dropbox, TripAdvisor, Neuralink: 네바다로 이전하거나 검토 중
     * Trade Desk, Activision, Moelis & Company 등도 델라웨어 법원과의 충돌로 인해 이전을 고려하거나 주주 승인을 받았음

네바다, 텍사스, 델라웨어 간 주요 비교

     * 델라웨어(DE)
          + 장점: 방대한 판례, 전문 법원, 편리한 법무 절차
          + 단점: 최근 소송 리스크 증가, 일부 정치적 성향의 판결
     * 네바다(NV)
          + 장점: 소송 리스크와 비용이 비교적 낮음, 비즈니스 판단 존중, 법률이 성문화되어 예측 가능성이 높다는 평가가 있음
          + 단점: 델라웨어에 비해 판례 축적이 상대적으로 적음
     * 텍사스(TX)
          + 장점: 낮은 규제와 소송 리스크, 큰 경제 규모와 기업 인프라
          + 단점: 법 해석이 판례 중심이라, 향후 델라웨어와 비슷하게 변할 수 있다는 우려가 일부 존재함

비용 및 절차 측면

     * 네바다와 텍사스는 델라웨어보다 사업 관련 비용이나 행정 수수료가 낮은 편으로 알려져 있음
     * 초기 설립부터 네바다나 텍사스를 고려하면, 나중에 이전하는 번거로움을 줄일 수 있음
     * 델라웨어에서 다른 주로 이전하려면 “도메스티케이션(domestication)” 또는 “컨버전(conversion)” 등 법적 절차와 주주 승인이 필요함

비상장(사적) 회사의 이주 절차

     * 이사회 결의와 주주 승인 후 해당 주에 새 법인을 설립하고, 델라웨어 법인을 말소하거나 이전 신고를 진행함
     * 새로운 주에서 정관, 부칙, 주식 증서 등 내부 서류를 모두 업데이트해야 함
     * 필수 면허나 인증이 필요한 산업이라면, 해당 주에서 재신청 과정이 필요할 수 있음
     * 변호사와 회계사들이 대부분의 작업을 처리하므로 경영진의 직접 업무 부담은 크지 않은 편임

상장(공개) 회사의 이주 절차 유의사항

     * 절차적 정당성을 확실히 갖추는 것이 핵심임
     * 이사회 내 독립 이사들로 구성된 특별위원회를 통해 주주 전체 이익 관점에서 재검토하고, 모든 과정을 객관적으로 문서화해야 함
     * 과반 이상의 의결권을 가진 지분 구조라면 이사회 승인과 서면 결의만으로 가능할 수 있음
     * 소수주주 반대를 고려해야 하며, 공정 절차를 거치지 않을 경우 TripAdvisor 사례처럼 소송 위험이 높아질 수 있음

앞으로의 전망

     * 창업자 지분이 높거나 정치적 이슈에 노출된 기업(예: 엘론 머스크) 등이 이탈하는 경향이 두드러짐
     * 정치적으로 민감한 사업을 운영하는 기업이나 소송 리스크가 큰 기업들이 델라웨어를 떠나는 움직임이 있음
     * 여전히 많은 기업이 델라웨어에 남아 있으나, 점진적으로 이탈 흐름이 이어질 것으로 보는 시각이 있음
     * 델라웨어가 기존 기업 친화적 위치를 회복하지 못하면, 더 많은 회사가 네바다나 텍사스로 이전할 가능성이 높아질 전망임

   그래서 그런지 달라스와 라스베가스 잡마켓이 요즘 핫하더라구요.

   법적 안정성과 법전 해석보다는 비즈니스 친화를 선호하는 게 양립될 수 있나요?
"
"https://news.hada.io/topic?id=19304","Pi-hole v6 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Pi-hole v6 출시

     * 네트워크내 모든 광고를 차단해주는 ""DNS sinkhole"" Pi-hole v6 이 공개됨
     * 새로운 기능 요약
          + 내장 웹 서버 및 REST API: pihole-FTL 바이너리에 새로운 REST API와 내장 웹 서버를 통합하여 lighttpd와 PHP가 필요하지 않게 되었음. 설치 공간을 줄이고 성능을 향상시킴. 서버 측 페이지네이션을 통해 쿼리 로그의 인터페이스가 더 빠르고 반응성이 좋아졌음.
          + 고급 필터링 및 허용 목록: 구독 가능한 허용 목록(일명 ""Antigravity"")을 지원하여 도메인을 허용할 수 있게 되었음.
          + 통합된 설정 파일: 여러 설정 파일을 하나의 주석이 풍부한 toml 파일로 통합하여 관리가 용이해졌음. 기존 설정은 자동으로 이 파일로 마이그레이션됨.
          + 재설계된 사용자 인터페이스: 웹 인터페이스가 완전히 개편되어 기본 및 전문가 모드로 설정이 나뉘어 사용자 경험을 맞춤화할 수 있게 되었음.
          + HTTPS 지원: 자체 인증서를 제공하거나 자동 생성된 인증서를 사용할 수 있는 HTTPS 지원이 포함됨.
          + Docker: Docker 이미지가 Alpine 기반으로 변경되어 이미지 크기가 크게 줄어들고 향후 시스템 지원 가능성이 열렸음.
     * 업그레이드 및 시작하기
          + 베어 메탈: Pi-hole v6로의 업그레이드는 간단하며, 기존 사용자는 업그레이드 전에 현재 설정을 백업하는 것이 좋음. lighttpd를 비활성화할지 묻는 대화 상자가 나타나며, 대부분의 사용자는 비활성화하는 것이 적절함.
          + Docker: Docker 이미지가 완전히 새로 작성되어 Alpine 기반으로 변경되었으며, 기존 환경 변수는 작동하지 않을 수 있음.

   AdGuard Home: 네트워크 전체 광고 및 추적기 차단 DNS 서버

        Hacker News 의견

     * 최근에 pi-hole을 설정했음. 몇 년 동안 들어왔던 것에 비해 기본 기능이 부족하다는 점에 놀랐음
          + ""드라이 런"" 또는 ""팬텀"" 모드가 없어 실제로 요청이 차단되지 않고 로그 UI에 ""차단될 것""으로 표시되는 기능이 없음
          + 다른 클라이언트에 대해 다른 동작을 설정하는 방법이 명확하지 않음. 스마트 TV에는 엄격한 리스트를 적용하고 싶지만, 휴대폰에는 동일한 리스트를 원하지 않음
          + ""그룹""이라는 개념이 있지만 UI가 이를 명확히 설명하지 않음
     * AdGuard Home을 사용 중이며, Pi-hole과 비슷하지만 DoH 지원 및 Linux 외의 OS 지원 등으로 조금 더 다듬어져 있음
          + AdGuard Home 링크
     * Pi-hole은 훌륭한 도구임. 몇 년 동안 Raspberry Pi Zero에서 사용 중이며 차단되는 많은 광고에 항상 놀라움
          + 팀의 릴리스를 축하하며 Patreon을 통해 지원하고 있음
     * Pi-hole은 뛰어난 애플리케이션이며 설정 이후로 매우 만족하고 있음. Pi-hole과 함께 Nginx Proxy Manager를 추가로 실행할 것을 강력히 추천함
          + Nginx Proxy Manager 링크
     * Technitium을 몇 년 동안 사용 중이며 매우 만족하고 있음
          + Technitium 링크
     * 웹 인터페이스가 완전히 개편되어 설정이 기본 및 전문가 모드로 나뉘어 있음. 사용자 경험을 맞춤화할 수 있어 DNS 관리자가 아닌 가족이나 친구에게 Pi-hole을 설정할 때 유용할 것 같음
     * AdGuard Home을 두 대의 Pi4와 작은 홈 서버에서 몇 년 동안 사용 중이며 만족하고 있음
          + 설정을 동기화하기 위한 스크립트와 Jenkins 작업을 사용 중임
          + orbital-sync 링크 및 nebula-sync 링크로 Pi-hole 6과 설정을 동기화할 수 있음
     * NextDNS 링크를 유사한 서비스로 강조하고 싶음. 매우 만족하고 있음
     * Pi-hole이 DoH 또는 유사한 지원을 기본적으로 추가할 계획이 있는지 아는 사람 있는지 궁금함. 과거에 cloudflared와 문제를 겪어 DoH를 포기했지만, 쿼리를 암호화하고 싶음
     * Pi-hole은 매우 가치 있는 투자임. 인터넷을 사용한 사람들이 더 빠르다고 언급했음. Brave 브라우저를 사용하지만, Pi-hole은 추가적인 차단 레이어를 제공함
          + 여행이 많아져 사용하지 않음. Google/Vercel/기타 분석 도구와의 작업이 불편함
          + 스마트 TV 대신 Apple TV나 Kodi 박스를 사용하는 것이 더 나음. TV를 사용하지 않아 TV를 주었음. Pi-hole은 스마트 TV의 광고를 차단할 수 있음
"
"https://news.hada.io/topic?id=19217","카기 검색을 위한 Privacy Pass 인증","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       카기 검색을 위한 Privacy Pass 인증

     * Kagi Search의 새로운 프라이버시 기능: Privacy Pass 인증
          + Kagi Search는 새로운 프라이버시 기능인 Privacy Pass 인증을 도입함. 이는 사용자가 검색 서비스를 이용할 때 개인 정보를 보호하는 데 도움을 줌.
          + Privacy Pass는 사용자가 서버에 인증할 때, 서버가 사용자의 신원을 알 수 없도록 함. 이는 사용자의 검색 기록이 개인과 연결되지 않도록 보장함.
          + Kagi는 사용자 데이터를 판매하지 않으며, Privacy Pass를 통해 이러한 약속을 기술적으로 실현함.
     * Privacy Pass의 작동 방식
          + Privacy Pass는 두 단계의 프로토콜로 구성됨: 토큰 생성과 토큰 사용.
          + 토큰 생성: 사용자가 서버와 상호작용하여 인증 토큰을 생성함. 이 토큰은 서버가 사용자를 식별할 수 없도록 함.
          + 토큰 사용: 사용자는 생성된 토큰을 사용하여 서버의 서비스를 이용함. 서버는 사용자가 올바른 토큰을 제시했음을 확인할 수 있지만, 사용자를 식별할 수 없음.
     * Kagi의 Privacy Pass 구현
          + Kagi는 Privacy Pass 프로토콜을 다양한 아키텍처에 맞게 구현함. Kagi는 서버 역할을 수행하며, 사용자는 클라이언트 역할을 수행함.
          + 사용자는 브라우저 확장 프로그램을 통해 Privacy Pass를 활성화할 수 있으며, 필요에 따라 기능을 전환할 수 있음.
     * Privacy Pass의 보안 보장
          + Privacy Pass는 사용자의 검색이 계정과 연결되지 않도록 보장함.
          + 생성-사용 비연결성: Kagi는 토큰 사용 시, 특정 토큰 생성 단계와 연결할 수 없음.
          + 사용-사용 비연결성: Kagi는 두 번의 토큰 사용이 동일한 사용자에 의해 이루어진 것인지 알 수 없음.
          + 사용 탈취 방지: 제3자가 토큰을 탈취할 수 없도록 보장함.
     * Privacy Pass의 한계와 권장 사항
          + Privacy Pass는 모든 프라이버시 문제를 해결하지 않음. 예를 들어, 서버가 부가 정보를 통해 사용자를 추적할 수 있음.
          + 사용자는 토큰 생성과 사용을 시간적으로 또는 공간적으로 분리하여 프라이버시를 강화할 수 있음.
     * Kagi Tor 서비스
          + Kagi는 Tor 네트워크를 통해 Kagi에 접근할 수 있는 Tor onion 서비스를 제공함.
          + Tor와 Privacy Pass를 함께 사용하면, Kagi는 사용자의 계정 정보나 위치를 알 수 없음.
     * 시작하기
          + Privacy Pass는 Orion 브라우저, Kagi Android 앱, Firefox 및 Chrome 확장 프로그램에서 사용할 수 있음.
          + 무제한 검색이 가능한 Kagi 플랜에서 Privacy Pass 인증을 사용할 수 있으며, 향후 다른 플랜에도 지원할 예정임.
     * 자주 묻는 질문
          + Privacy Pass는 블록체인 기술을 사용하지 않음.
          + 토큰 생성은 에너지나 저장 공간을 많이 요구하지 않음.
          + 검색 속도에 미치는 영향은 미미함.
          + 사용자는 매달 2,000개의 토큰을 생성할 수 있음.
          + Privacy Pass를 사용하면 계정 설정에 접근할 수 없음.

        Hacker News 의견

     * 서비스가 사용자에게 이익을 주는 경우는 드물다는 의견이 있음
          + 브라우저와의 통합이 더 잘 되었으면 좋겠다는 바람이 있음
          + Orion을 사용하지 않는 이유는 GNU/Linux 버전이 없기 때문임
     * 계정 없이 프라이버시 패스를 구매할 수 있는 상점의 필요성을 언급함
          + 암호화폐, 특히 Monero와 같은 것을 지원해야 한다고 생각함
          + GNU Taler 기술이 사용 가능해지면 그것도 고려해야 한다고 언급함
     * Kagi의 재정 상태와 Google 검색의 문제로 인한 성공 여부에 대한 호기심이 있음
     * Kagi에 대한 가장 큰 불만은 로그인과 결제 정보에 대한 프라이버시 우려임
          + 이러한 우려가 얼마나 해소될지 궁금하다는 의견이 있음
     * Kagi의 가장 큰 결점이 해결되었다고 생각하며, 제품 개선에 감사함
     * Trial 및 Starter 플랜에 대한 기능 활성화 작업 중이라는 설명이 있음
          + 제한된 검색 횟수를 초과하여 토큰을 사용할 수 있는 가능성에 대한 우려가 있음
     * Tor 프로젝트와 관련된 질문이 있음
          + Tor 브라우저의 프라이버시 기능을 손상시킬 수 있는 추가 애드온 설치에 대한 우려가 있음
          + Kagi가 Privacy Pass와 Tor의 호환성을 어떻게 해결했는지 궁금해함
          + Tor 커뮤니티와의 사전 협의가 있었는지에 대한 의문이 있음
     * Kagi 측에서 토큰 테이블에 사용자 정보를 추가할 수 있는 가능성에 대한 우려가 있음
     * 프로토콜이 서버가 클라이언트를 식별할 수 없도록 보장하는 방법에 대한 이해 부족이 있음
          + 서버가 사용자마다 다른 키를 사용하면 사용자를 식별할 수 있을 것이라는 의문이 있음
     * Kagi의 AI 이미지 필터 기능을 좋아한다는 의견이 있음
          + 이미지 검색에서 ""AI Images"" 필터가 유용하다고 생각함
"
"https://news.hada.io/topic?id=19209","미국과 영국, 정상회의에서 AI Safety(안전) 선언 거부","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   미국과 영국, 정상회의에서 AI Safety(안전) 선언 거부

     * 다자주의에 대한 거부
          + 미국과 영국은 AI 안전 선언에 서명하지 않음
          + 미국의 입장은 바이든 행정부에서 ""180도 전환""하는 것
          + 미국 부통령 JD Vance는 유럽이 AI에 대한 ""과도하게 신중한"" 규제를 채택하지 말 것을 경고함
          + AI 기술이 ""안전하고, 보안이 있으며, 신뢰할 수 있는"" 상태를 보장하기 위한 선언에 서명하지 않음
          + 약 60개국이 AI Action 정상회의에서 선언에 동의함
     * 미국의 입장
          + Vance는 미국이 AI 기술의 지배적인 힘으로 남을 것이라고 강조함
          + ""가장 강력한 AI 시스템은 미국에서, 미국이 설계하고 제조한 칩으로 구축될 것""이라고 언급함
          + 국제 규제 체제가 AI 기술의 창출을 촉진해야 한다고 주장함
     * 선언의 내용
          + AI가 개방적이고, 포용적이며, 투명하고, 윤리적이며, 안전하고, 보안이 있으며, 신뢰할 수 있도록 보장하는 것을 목표로 함
          + 미국과 영국은 이전 AI 정상회의에서 유사한 선언에 서명한 바 있음
          + 새로운 미국 행정부의 ""America First"" 정책과 영국 정부의 ""제한적""이라는 의견으로 인해 서명하지 않음
     * AI 경쟁과 중국
          + AI 개발, 칩 제조, AI 챗봇, 슈퍼컴퓨터에 필요한 에너지 등에서 중국과의 경쟁이 심화됨
          + DeepSeek의 저가 AI 모델이 실리콘 밸리의 OpenAI를 놀라게 함
     * 유럽의 AI 산업
          + 유럽은 AI 산업에서 미국이나 중국에 대한 의존을 피하기 위해 노력 중
          + 프랑스 대통령 Emmanuel Macron이 주최한 정상회의에서 약 2천억 유로의 데이터 센터 및 컴퓨팅 클러스터 투자가 발표됨
     * 미국의 경고
          + Vance는 ""권위주의 정권""과 AI 거래를 체결하지 말 것을 경고함
          + CCTV와 5G를 예로 들어 ""저렴한 기술""이 권위주의 정권에 의해 보조되고 수출된다고 언급함
     * 공동 선언의 우선순위
          + 중국, 인도, 독일 등 국가들이 서명한 공동 선언은 ""국제 협력을 강화하여 국제 거버넌스에서의 조정을 촉진""하는 것을 목표로 함
          + 미국은 다자주의와 국제 협력에 대한 용어에 동의하지 않음
          + 프랑스가 설립한 Current AI 재단이 프랑스어권 국가에 자금을 지원할 수 있다는 우려가 있음
     * Vance의 연설
          + Vance의 연설은 바이든 행정부와의 ""180도 전환""으로 평가됨
          + Macron의 정상회의는 미국 주도의 AI 기술 개발에 대한 대안을 추진하는 것이 목표였음
          + DeepSeek의 강력한 오픈 모델 출시 이후 유럽은 AI 경쟁에서 잠시 기회를 얻었다고 느꼈음

        Hacker News 의견

     * 기술 발전이 가속화되면서 앞으로 몇 십 년 동안의 삶은 마치 의식이 있는 상태에서 로보토미를 당하는 것처럼 느껴질 것이라는 의견이 있음. 기술이 잘못된 방향으로 갈 수 있는 수천 가지 가설적인 방법을 생각할 수 있지만, 그럼에도 불구하고 진행이 멈추지 않음. AI는 우리가 원하든 원하지 않든 결국 도착할 것임
     * AI는 핵분열과 같지 않음. 누군가 AI를 훈련하고 있는 것을 원격으로 감지할 수 없음. AI와 관련된 모든 정보를 격리하는 것은 이미 너무 늦었음. AI 훈련에 필요한 장비는 저렴하고 어디에나 있음
          + ""안전 선언""은 실질적인 힘이 없고 강제할 수 없음
          + AI를 멈출 수 없으므로 적응해야 함
          + 비디오와 사진은 곧 증거 가치가 없어질 것임
          + 현실 세계의 관계가 온라인 관계보다 중요함
          + AI가 ""혼란을 일으키는"" 것은 200년 전에는 존재하지 않았고 사람들은 항상 적응해왔음
     * ""AI 안전""은 OpenAI 같은 기업들이 신생 기업을 막기 위한 방어책일 뿐임. LLMs는 AGI에 도달하지 못할 것임. Altman이 이 위험에 대해 이야기하는 것은 Musk가 무인 택시에 대해 이야기하는 것과 같음
     * 세계의 지배적인 힘이 될 때, 다른 사람들이 전략을 결정하도록 두지 않음. AI를 억제하려는 시도는 경주에서 뒤처진 사람들로부터 나올 것임. Edward Teller가 소련이 미국과 수소폭탄에서 동등해지기 위해 핵 실험 중단을 사용한 것을 회상하는 인터뷰가 있음
     * 80년대를 놓쳤지만 90년대와 00년대를 거친 ""해커""로서 AI에 대한 대화가 어떻게 진행되고 있는지에 대해 깊은 슬픔과 불안함을 느낌. 과거의 해커들에게 정부가 자신의 컴퓨터에서 코드를 실행하는 것을 범죄화하는 것이 중요하다고 주장하는 사람들이 있다고 말하는 것은 상상하기 어려움
     * ""AI""라는 용어가 정치계와 다른 많은 사람들이 의미하는 바를 알기 어려움. 몇 년 전의 ""블록체인""과 유사한 상황임. ""AI""는 실질적으로 알고리즘적 의사결정의 동의어이며, 사람들의 삶에 직접적인 영향을 미칠 수 있음. 책임, 투명성, 구제책 등이 없는 상태에서 ""AI""의 무분별한 확장은 역사적으로 확립된 권리에 대한 상당한 후퇴를 나타냄
          + 미국은 CFPB를 해체하고 더 많은 규제 완화를 추진하고 있음
          + 영국의 입장은 흥미로움. 시민/소비자 보호 측면에서 미국과 EU 사이에 위치하지만, 브렉시트에도 불구하고 후자에 더 가까움
     * 제약 없는 AGI를 가진 국가는 기술적으로 큰 도약을 이룰 가능성이 높음. 이를 제한하는 국가는 ""석기 시대""에 머물 가능성이 있음
     * 유럽은 선언과 우려의 편지를 작성하는 것을 좋아함. 서명해도 차이가 없을 것임
     * 이 ""선언""이 구체적인 행동을 약속하는 것이 아니라는 것을 이해하는 것이 맞는지 궁금함. 누가 서명하든 상관없는 이유를 잘 모르겠음
     * 선언은 쓸모없고 헛된 노력일 뿐임
"
"https://news.hada.io/topic?id=19231","Game Bub - 오픈소스 FPGA 레트로 에뮬레이션 휴대기기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Game Bub - 오픈소스 FPGA 레트로 에뮬레이션 휴대기기

     * Game Bub은 오픈소스 FPGA 기반의 레트로 에뮬레이션 핸드헬드 기기로, ""Game Boy, Game Boy Color, Game Boy Advance"" 게임을 지원함
     * 물리적인 게임 카트리지를 사용할 수 있으며, microSD 카드에 저장된 ROM 파일을 통해 에뮬레이션된 게임도 실행 가능함
     * 이렇게 실제 카트리지를 재생할 수 있는 기존 오픈 소스 FPGA 에뮬레이터는 없었고, 주요 목표 중 하나는 모든 작업을 직접 수행하고 모든 구성 요소를 이해할 수 있도록 하는 것
     * 그래서 직접 PCB를 설계하고 펌웨어를 작성하고 FPGA용 게임보이 및 게임보이 어드밴스 에뮬레이터(Chisel HDL 사용)를 작성하고 3D 프린팅 케이스도 디자인함
     * Game Link Cable을 지원하여 GB 및 GBA 모드에서 멀티플레이도 가능
     * HDMI 출력(도크 사용), 진동 모터, 실시간 시계 등의 기능을 포함하며, 향후 소프트웨어 업데이트로 확장 가능하도록 설계됨
     * Xilinx XC7A100T FPGA가 탑재된 6층 PCB를 기반으로 하며, 맞춤형 3D 프린팅 인클로저에 패키징됨

프로젝트 목표

     * 독립적인 충전식 배터리 기반 FPGA 핸드헬드 기기 제작
     * 비용과 복잡성을 최소화하고, 가능한 한 상용 부품을 사용
     * Game Boy / Game Boy Color / Game Boy Advance 게임 실행 가능
     * 물리적 카트리지 및 microSD 카드 기반 ROM 파일 지원
     * 직관적인 UI 및 인게임 오버레이 제공
     * 디스플레이, 스피커, 헤드폰 출력 통합
     * HDMI 출력 지원
     * 향후 확장 가능성 고려 (다른 시스템 지원, Wi-Fi 등)
     * 직접 FPGA 에뮬레이터 코어를 개발하고, 하드웨어 및 드라이버도 직접 설계하여 시스템을 완전히 이해할 수 있도록 함

FPGA 기반 레트로 게이밍에 대한 견해

     * ""FPGA 기반 게이밍이 소프트웨어 에뮬레이션보다 정확하다""는 주장은 과장된 마케팅임
     * FPGA 역시 에뮬레이터이며, 프로그램된 만큼만 정확하게 동작함
     * 소프트웨어 에뮬레이터도 매우 높은 정확도를 가질 수 있으며, 접근성이 뛰어남
     * FPGA 기반 에뮬레이터의 가장 큰 장점은 물리적 하드웨어(카트리지, 링크 케이블 등)와 쉽게 연결 가능하다는 점

하드웨어 설계 개요

     * FPGA + 마이크로컨트롤러(MCU) 구조: FPGA는 핵심 에뮬레이션을 담당하고, MCU가 UI 처리, ROM 로딩, 전력 관리 등을 수행
     * Wi-Fi 및 Bluetooth 지원: ESP32-S3 모듈 사용 (다만 Bluetooth Classic은 지원되지 않음)
     * 디스플레이: 3.5인치 320x480 LCD (게임 화면 2배 확대 가능)
     * 배터리 및 전력 관리: 리튬 이온 배터리, TI BQ2407x 충전 IC 사용, 전력 상태 확인을 위한 MAX17048 연료 게이지 IC 포함
     * 오디오: TLV320DAC3101 오디오 코덱을 사용하여 스테레오 출력 및 디지털 볼륨 조절 지원
     * 입력 장치: GBA SP에서 사용된 클릭감 있는 버튼을 채택하여 좋은 조작감을 제공
     * 메모리: 32MB SDRAM을 사용하여 에뮬레이션된 ROM을 저장
     * 카트리지 및 링크 포트: 실물 카트리지를 직접 연결할 수 있으며, GBA/GBC 전환 감지 기능 포함
     * 기타 기능: IMU(모션 센서), 실시간 시계(RTC), 진동 모터 포함

PCB 설계 및 테스트

     * KiCad를 사용하여 PCB 설계 진행
     * FPGA(Artix-7)는 BGA 패키지를 사용하여 6층 PCB로 설계됨
     * 1차 프로토타입 테스트에서 대부분의 기능이 정상 작동했으며, 일부 전력 관리 이슈가 발견됨
     * MicroPython을 이용하여 초기 테스트 진행 후 Rust로 MCU 펌웨어 작성

GUI 및 펌웨어 개발

     * Slint UI 프레임워크를 사용하여 Rust 기반 GUI 구현
     * LCD 업데이트 속도를 최적화하고, MCU가 아닌 FPGA가 직접 디스플레이를 구동하도록 설계
     * microSD를 USB Mass Storage로 인식할 수 있도록 TinyUSB를 이용한 데이터 전송 기능 추가

Game Boy Advance 지원 추가

     * ARM7TDMI CPU 구현 (3단계 파이프라인 구조)
     * PPU, DMA, 타이머, 오디오 등 GBA 하드웨어 구성 요소를 FPGA에서 직접 구현
     * 물리적 카트리지 지원을 위해 GBA의 특수한 버스 프로토콜 분석 및 FPGA에서 재현
     * 링크 케이블을 이용한 GBA-GBA 멀티플레이 및 GameCube 연결 지원

두 번째 하드웨어 개정판

     * 기판 및 인클로저를 새롭게 설계하여 더 얇고 인체공학적인 디자인 적용
     * 버튼 위치를 조정하여 GBA SP와 유사한 조작감 제공
     * HDMI 포트를 제거하고, USB-C 기반 맞춤형 도크를 설계하여 HDMI 출력 및 컨트롤러 지원 추가
     * LCD 커버 글래스를 맞춤 제작하여 더 고급스러운 디자인 구현

도크 설계 및 HDMI 출력

     * USB-C 포트를 통해 맞춤형 HDMI 신호를 출력하는 방식으로 도크 설계
     * Raspberry Pi Pico W 기반 MCU를 사용하여 무선 컨트롤러 지원 가능
     * 도크에서 USB 허브 기능을 제공하여 유선 컨트롤러도 연결 가능

향후 계획 및 확장 가능성

     * 도크 완성 및 Bluetooth 컨트롤러 지원 구현
     * Game Boy Advance 에뮬레이터의 정확도를 더욱 개선하여 mGBA 테스트 통과 목표
     * 무선 링크 케이블 에뮬레이션(Wi-Fi 기반 GBA Wireless Adapter 구현) 연구
     * Game Boy IR 통신, Boktai 태양 센서, Game Boy Camera 등의 추가 기능 지원 검토

제작 희망 목록 (대량 생산 가능 시)

     * 720x480 해상도의 맞춤형 LCD 패널 (GBA 3배 확대 가능)
     * 사출 성형 인클로저 및 고품질 버튼
     * 맞춤형 배터리팩 (내부 공간 효율 최적화)
     * BGA 기반 SRAM 및 SDRAM 사용 (더 작은 PCB 설계 가능)

오픈소스 및 참고 자료

     * 프로젝트 소스코드 및 회로도: GitHub
     * Game Boy 및 GBA 하드웨어 문서: Pan Docs, GBATEK
     * 오픈소스 도구: KiCad, FreeCAD, Chisel, Verilator, Slint 등

정리

     * Game Bub은 단순한 레트로 게임기가 아니라, FPGA 기반 에뮬레이션의 가능성을 확장하는 도전적인 프로젝트임
     * 향후 다양한 확장 기능을 추가하며, 오픈소스 커뮤니티와 함께 발전해 나갈 계획

   가내수공업 형태로 fpga로 만들어서 아는 사람들만 거래하거나 하기도 했는데 오픈소스로 된 것도 있었군요. 재밌네요

   FPGA로 CPU까지 직접 구현했군요!, 코드라인수가 궁금해서 찾아봤더니... verilog같은게 아니라 Scala로 FPGA코딩을 할 수 있나봐요. 생각보다 간단해서 놀랐음.

   https://github.com/elipsitz/gamebub/…

   덕중의 덕은 양덕이라더니...ㅎㅎ

        Hacker News 의견

     * 정말 멋진 프로젝트임. 블로그 글이 매우 철저하게 작성되어 있어 좋았음. 게임큐브와 연결할 수 있을지 궁금했는데 이미 블로그에 언급되어 있었음
          + 실제 카트리지 호환성의 장점 중 하나는 메모리 매퍼를 고려할 필요가 없다는 것임. NES의 다양한 매퍼에 익숙하지만 GB 카트리지가 같은 방식으로 작동하는지는 확실하지 않음. 카메라, 진동, 재봉틀 같은 특수 하드웨어도 원래 카트리지로 특별한 지원 없이 작동할 것 같음
          + ROM 로딩을 지원한다면 FPGA에서 모든 매퍼를 에뮬레이트해야 하는지 궁금함
     * 멋진 프로젝트와 글 작성에 감사함. 이런 것들을 좋아함
          + 이전에 댓글을 봤을 때 ""왜 이런 게 존재하냐?""는 반응이 많아 실망했음. 이런 대담한 프로젝트의 1%도 시도해보지 않은 사람들이 대부분임. 이 프로젝트는 멋지고 재미있는 학습 경험임
          + Hack-A-Day의 팁 라인에 제출했으니 며칠 내로 관련 기사가 나올 수 있음
     * Analogue Pocket을 가지고 있는데, FPGA를 사용한다는 사실이 나에게는 큰 의미가 없음. 소프트웨어 에뮬레이션과 비교했을 때 정말 큰 차이가 있는지 궁금함
          + 두 방식의 차이를 알고 있지만, 소프트웨어 에뮬레이션이 FPGA 에뮬레이션만큼 좋지 않은 이유를 이해하지 못함. 소프트웨어로 하는 것이 더 유연할 것 같음
     * 부품이 장착된 PCB의 총 비용이 얼마인지 궁금함. 아마 60-70개 정도일 것 같음
          + 블로그 글과 작성에 감사하며, 이를 저장소에 포함시키면 좋을 것 같음
          + 비슷한 디자인을 시도하고 있으며, 시스템 컨트롤러로 RP2350B와 ESP32-C61을 사용할 예정임. 레거시 BT를 지원하는 칩과 패드 레이아웃이 있으면 좋겠음
          + USB 포트를 추가하여 8bitdo USB 무선 어댑터 같은 것을 지원하는 것도 옵션임. 레거시 BT 지원이 프로젝트를 망칠 수 있는 부가 작업이 될 수 있음. SPI 연결을 내부에 노출하여 원하는 컨트롤러를 해킹할 수 있게 하는 것도 방법임
     * 오픈 소스 하드웨어를 좋아하지만, 부품이 생산 중단되면 어떻게 되는지 고민임
          + 유지보수자가 부품 목록을 업데이트할 수 있지만, 호환성 문제로 여러 부품이 필요할 수 있음. 부품을 구매하는 중에 모두 구할 수 없게 되면 어떻게 해야 할지 고민임. 유지보수자가 부품 키트를 판매하는 것도 방법일 수 있음. 그러나 IP 법과 관련된 문제가 있을 수 있음
     * 디스플레이 컨트롤러 MISO 문제는 악명이 높음. 몇 년 전 처음 접했음. 칩 선택 라인에 트라이스테이트 버퍼를 사용하거나 버스를 분리하는 것이 추천됨
          + 전원 도메인 문제도 자주 발생함. 대부분의 장치에서 IO는 Vdd, ESD 다이오드, IO 핀, ESD 다이오드, 그라운드로 구성됨. Vdd가 그라운드로의 저항 경로를 가지면 문제가 발생함. 전원 공급 IC에서 출력 방전 저항이나 트랜지스터가 그라운드로 전류를 허용할 때 발생함. 이 경우 IO 핀이 그라운드와 병렬로 다이오드를 가지게 됨. 조심하지 않으면 드라이버가 제공할 수 있는 최대 전류가 다이오드를 통해 흐르게 됨
     * 하드웨어 경험이 없어서 바보 같은 생각일 수도 있지만, NES, SNES, Genesis 같은 오래된 시스템은 비교적 간단함. 특허도 수명이 있음. 왜 SOC를 통해 시스템을 거의 완벽하게 에뮬레이트하는 하드웨어 재창조가 없는지 궁금함. FPGA 프로젝트가 가장 가까운 것 같지만, FPGA는 40년 된 CPU 디자인과 1kb의 RAM에 비해 비쌈
     * 멋진 프로젝트임. UI가 Rust와 Slint로 구축된 것이 정말 멋짐. 내가 작업 중인 GUI 프레임워크임
     * 환상적임. 세로 레이아웃을 선택한 이유를 설명했는지 모르겠음. 기존의 FPGA 공간에서는 모두 GBC 스타일임. 개인적인 취향인지 아니면 다른 이유가 있는지 궁금함
     * 훌륭한 글임. 게임 핸드헬드에 관심이 없지만, 디스플레이, 인클로저, 배터리 전원 및 연결성에 대한 현재의 설계 결정에 항상 관심이 있음. Pico W 통합이 좋음. 최근 몇 년간 저평가된 개발 항목 중 하나임. 공유해줘서 고마움
"
"https://news.hada.io/topic?id=19271","CEO를 뽑는 방법 - 비노드 코슬라 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          CEO를 뽑는 방법 - 비노드 코슬라

     * 스타트업의 이사회는 CEO를 채용할 때 종종 완벽하지 않은 접근 방식을 취하는 경우가 많음
          + 개인이 스타트업을 이끌 자격이 있는지에 관계없이 스타트업의 '해당 분야에서의 경험'에 초점을 맞추는 경우가 많음
          + 주로 스타트업의 분야에서의 경험에 초점을 맞추지만, 이러한 접근은 반드시 적합하지 않을 수 있음
     * 스타트업에서 엔터프라이즈로의 여정에서 다음 단계로 나아가기 위해, 포트폴리오 회사에서 CEO를 찾을 때 고려하는 8가지 주요 자질을 요약해봤음
          + 하지만 먼저 창업자가 시간이 지남에 따라 확장할 수 있다면 창업자가 학습하고 그 학습을 바탕으로 행동할 수 있는 충분한 시간을 가질 수 있도록 도움을 받는 것이 좋음
          + 그러나 CEO가 필요하다면 다음과 같은 접근 방식이 적합함

1. 실제 예시를 통한 이상적인 후보 정의

     * 일반적으로 충족되기 어려운 추상적인 스펙 작성 대신, 최고 수준의 이력서 여러개를 분석하는 것으로 시작
     * 긍정적이거나 부정적인 경험과 특성을 강조하여 현실적인 후보를 바탕으로 스펙을 작성하고, 이를 리크루터에게 전달
     * 보통 리크루터가 요구하는 스펙은 너무 일반적이며 대부분 쓸모가 없음

2. 적절한 서치 펌 선택

     * 작은 서치 펌이 대기업 채용에 익숙한 큰 서치 펌보다 창업가 후보를 찾는 데 더 나은 네트워크와 본능을 가질 가능성이 높음
     * 서치 펌이 적절한 네트워크를 보유하고 있는지 판단하기 위해, 별도의 조사없이 바로 후보 이름을 제시할 수 있는지 확인
     * 최근 6개의 검색 결과와 1위와 2위 후보자를 요청하고, 이 프로필에서 그들의 고객이 어떤 사람을 찾고 있었는지 평가

3. ""전문가""가 아닌 ""기술적 운동선수""

     * 내 편견은 스타트업이 속한 업계에서 너무 많은 시간을 보내지 않은 사람을 찾아야 한다는 것
     * 관련 업계에서 어느 정도 시간을 보내는 것은 도움이 되지만, 스타트업이 비즈니스를 혁신하고 재창조하려고 할 때 너무 많은 '베테랑 경험'은 경직과 구태의연한 업무 방식을 초래할 수 있음
     * 스타트업의 분야에서 오랜 시간을 보낸 후보자보다, 다른 복잡한 기술 분야에서 경험을 가진 후보자가 혁신적이고 빠르게 움직일 가능성이 큼
     * ""누군가가 평생을 깊이 뿌리내린 분야에서 혁신을 이룬 경우는 거의 없음""
          + SpaceX 와 Rocket Lab은 업계에 종사하지 않던 사람들로부터 나온 것

4. 황금알이 아닌 황금 거위

     * 최고의 팀 빌더이자 훌륭한 리더가 될 수 있는 후보자를 우선시해야 함
          + 그래야 복잡한 엔지니어링 문제부터 FDA 프로세스까지 민첩하게 대처할 수 있음
     * 스타트업에게는 뛰어난 팀을 구성할 수 있는 능력이 매우 중요하며, 스타트업의 규모에 맞는 인재를 채용해야 함
     * 스타트업에서는 계획이 자주 바뀌기 때문에 '전문성'과 '경험'으로 현재 문제를 처리하는 사람보다 다음 플레이북을 위해 끊임없이 적응하고 구축할 수 있는 사람이 더 유리
     * 기술적으로 복잡한 프로젝트, 특히 다양한 엔지니어링 유형에 걸쳐 있는 프로젝트의 경우 다양한 기술력을 갖춘 CEO가 판단을 내려야 하지만, 가장 중요한 것은 전문 영역에서 뛰어난 팀을 구성하는 것

5. 경험보다 성장 속도

     * 첫 번째 CEO를 고려할 때 가장 중요한 요소는 ""사고의 질""과 ""빠르게 성장할 수 있는 능력""
          + 이를 직무 스펙으로 정의하기는 어렵지만, 나는 분야별 전문성보다 변화를 관리하고 새로운 상황에 적응하며 훌륭한 팀을 구축할 수 있는 사람을 우선적으로 찾음
          + 특히 새롭고 발전하는 분야에서 CEO 경험이 풍부한 사람보다는 빠르게 배우고 성장할 수 있는 사람을 선호
     * 예를 들어, 디바이스의 FDA 승인을 받기 위해서는 도메인 전문 지식이 중요하지만, 빠른 학습 능력과 비판적 사고를 갖추고 도메인 전문가를 고용할 수 있는 사람을 우선적으로 고려할 수 있음
          + 경험은 대부분 이러한 자질과 맞바꿀 수 있음
          + 훌륭한 사상가, 학습자, 팀 빌더인 지원자가 가장 이상적
          + 리더십, 목표 설정, 기술 분야에 대한 이해는 처음부터 배우기 어렵기 때문에 핵심임
     * 호기심이 많고, 폭넓은 사고를 하며, 원리를 먼저 생각하고, 행동 지향적이며, 훌륭한 인재를 채용하고, 비전을 가지고 이끌 수 있어야 함

6. 다양한 정보를 종합하는 능력

     * 두 번째로 중요한 측면은 관련된 모든 이해관계자의 기대치를 조정하는 것
          + 피드백을 통합하고 이를 관련 팀원에게 효과적으로 전달하여 각 이해관계자의 '워크플로'를 이해하고 기술이 어떻게 그들의 문제에 부합하고 문제를 해결할 수 있는지 파악해야함
     * 훌륭한 커뮤니케이터여야 함
          + CEO는 관련된 모든 구성원을 깊이 이해하고 다양한 요구를 통합하고 해결해야 함
          + 초기 단계에서는 충분한 기술/과학적 배경이 선호되는 경우가 많지만 어려운 기술/과학적 선택에 대한 판단력을 발휘하는 데 필수적인 것은 아님

7. 효과적인 우선순위 설정 및 현명한 절충안 만들기

     * 똑똑한 개인은 까다로운 문제를 빠르게 파악할 수 있음
          + 구조적 요소로 문제를 축소하고,
          + 우선순위를 설정하고,
          + 식별된 지렛대에 따라 효과적으로 의사결정을 내릴 수 있다면
     * 새로운 기술 영역에 대한 경험보다, ""명확하고 비판적으로 생각""하는 것이 더 중요한 경우가 많음

8. 자금 조달

     * 개발 단계에서도 자금을 효과적으로 조달할 수 있는 후보를 찾는 것이 중요
          + 이러한 능력은 회사를 유지하고 성장시키는 데 매우 중요함
     * 투자자, 직원, 파트너를 설득하는 것도 중요한 기술이며, 비전을 만들고 셀링하는 것은 큰 회사를 만들려는 경우 정말 필수적인 기술임
"
"https://news.hada.io/topic?id=19262","자동 HTTPS 기능을 갖춘 궁극의 서버, Caddy","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     자동 HTTPS 기능을 갖춘 궁극의 서버, Caddy

Caddy의 주요 기능

     * 보안 및 확장성: Caddy는 모든 사이트에 대해 기본적으로 TLS 인증서를 자동으로 획득하고 갱신함. 이는 사이트를 더 안전하고 신뢰할 수 있게 만듦.
     * 온디맨드 TLS: 고객 소유의 도메인에 대해 TLS 인증서를 동적으로 관리하여 SaaS 비즈니스를 쉽게 확장할 수 있음.
     * 대규모 TLS 관리: Caddy는 수십만 개의 사이트와 수천 개의 인스턴스를 안정적으로 관리할 수 있도록 설계됨.

Caddy의 장점

     * 무료 소프트웨어: Caddy는 무료로 제공되며, 후원을 통해 지속적인 개발이 가능함.
     * 고급 HTTPS 서버: Caddy는 TLS와 PKI를 기본으로 제공하며, 내부 PKI 관리도 가능함.
     * 구성 API: JSON 문서를 RESTful API로 내보내고 조작할 수 있음.
     * 규정 준수: PCI, HIPAA, NIST 규정을 기본적으로 준수함.

Caddy의 고급 기능

     * 클러스터 조정: 여러 Caddy 인스턴스를 동일한 저장소로 구성하여 인증서 관리를 자동으로 조정할 수 있음.
     * 동적 백엔드: 요청 시 동적으로 백엔드를 검색하여 빠르게 변화하는 환경에 적합함.
     * 고가용성: 고급 상태 검사, 구성 변경, 회로 차단, 부하 제한 등의 기능을 제공함.

Caddy의 구성 및 확장성

     * 유연한 구성: JSON을 기본 구성 형식으로 사용하며, 다양한 형식의 구성 어댑터를 지원함.
     * 무한한 확장성: Caddy는 모듈식 아키텍처로 설계되어 필요한 기능만 컴파일하여 사용할 수 있음.
     * 고성능: 네이티브 CPU 성능을 제공하며, 플러그인은 정적 바이너리에 컴파일됨.

Caddy의 사용 사례

     * PHP 애플리케이션 서버: FrankenPHP를 통해 PHP 페이지를 빠르게 제공하며, 별도의 PHP 설치가 필요 없음.
     * 정적 파일 서버: Caddy는 강력한 파일 서버 기능을 제공하며, 다양한 미들웨어 기능과 결합 가능함.
     * 자동 인증서 관리: Caddy는 인증서를 자동으로 관리하여 사이트를 항상 온라인 상태로 유지함.

사용자 및 전문가의 추천

     * Caddy는 사용하기 쉽고, 보안이 뛰어나며, 강력한 기능 세트를 제공하여 많은 사용자와 전문가들로부터 추천받음.
     * 다양한 사용자들이 Caddy의 간단한 구성과 자동화된 기능에 만족하고 있음.

   다들 Traefik은 어떻게 생각하고 있으신가요?? Traefik과 Caddy중에 하나를 고민중입니다.

   https://www.youtube.com/watch?v=N5PAU-vYrN8&t=663s
   확실히 소규모 프로젝트에서 사용하기 좋습니다. https 붙일때, nginx에서는 certbot 를 붙이고 했는데, 여기는 기본지원이었습니다.
   단점은 성능은 nginx > caddy 입니다.

   컴터 성능이 구리면 nginx 써야겠군요,,

   궁극의 서버... 탐나네요 ㅎㅎ

        Hacker News 의견

     * Caddy는 개발 중 HTTP2로 API를 로컬 테스트할 때 매우 유용함
          + 대부분의 개발 서버는 HTTP1만 지원하여 로컬호스트에 최대 6개의 동시 연결만 가능함
          + HTTP2는 SSL이 필요하여 로컬에서 테스트/설정하기 번거로움
          + Caddy 리버스 프록시를 사용하면 OS 신뢰 저장소에 루트 인증서를 설치하여 HTTP2를 즉시 사용할 수 있음
          + ElectricSQL은 사용자에게 이를 추천하며, HTTP2는 6개의 동시 연결을 잠그지 않음
          + Vite 앞에 Caddy를 배치하면 리로드가 훨씬 빨라짐
          + Vite는 브라우저에서 개별 파일을 로드하는 JS 모듈 시스템을 사용하며 HMR을 지원함
          + HTTP2를 통해 Caddy를 Vite 앞에 두면 이러한 문제를 모두 해결할 수 있음
     * nginx에서 caddy-docker-proxy로 전환한 후 Pangolin으로 이동하여 매우 만족스러움
          + Pangolin은 traefik의 프론트엔드로, 내장 인증과 Wireguard를 통한 트래픽 터널링 기능을 제공함
          + Minecraft 서버를 위한 TCP 포워딩이 필요했으며, 이를 매우 간단하게 해결함
          + Nginx Proxy Manager의 더 나은 버전을 원하는 사람에게 추천함
          + 문서가 아직 부족하지만, 유지 관리자는 Discord에서 매우 도움을 줌
     * Caddy에 대해 나쁜 말을 할 수 없지만, Nginx보다 인증서 설정이 더 쉬운 것이 유일한 장점으로 들림
          + Kubernetes 클러스터를 몇 년 전에 자동으로 인증서를 생성하고 갱신하도록 구성함
          + Ingress를 통해 모든 것이 처리되며, Nginx 로드 밸런서를 새 도메인에 지정하면 알아서 처리됨
          + 로컬 HTTPS가 자주 필요하지 않지만, 필요할 때는 외부 접근도 필요함
          + Nginx를 실행하는 서버를 사용하여 로컬호스트로 프록시함
          + 이 방법이 나에게는 잘 맞으며, 바꿀 이유가 없기 때문에 계속 사용할 것임
     * Caddy를 매우 좋아하며, 몇 년 동안 사용해왔음
          + 매우 신뢰할 수 있으며 기본을 배우면 설정이 매우 쉬움
          + 문서가 조금 어렵지만, NGINX 위에 letsencrypt를 신뢰성 있게 작동시키려는 것보다 훨씬 많은 시간과 에너지를 절약함
     * 친근한 라이선스(Apache v2)도 중요하며, 특히 Caddy의 모듈식 아키텍처와 관련이 있음
          + Caddy 주변의 생태계가 더 간단하고 안전하게 만들어짐
          + 예를 들어, 인터넷 클라이언트를 제공하면서 서버를 비공개로 유지함
          + Tailscale이나 OpenZiti와 같은 VPN이 이에 해당함
     * 자동 HTTPS는 모든 사이트에 대해 TLS 인증서를 제공하고 갱신함
          + HTTP를 HTTPS로 자동으로 리디렉션함
          + 도메인의 IP를 Caddy에 지정할 때, 첫 번째 HTTPS 호출 시 인증서가 즉석에서 생성되는지 궁금함
          + apex 도메인을 www로 리디렉션해야 하는 필요성 때문에 중요함
          + 무료로 제공되는 서비스로 해결할 수 있지만, Caddy를 사용하면 더 간단할 수 있음
     * 웹사이트를 처음부터 끝까지 읽고 나니 프로젝트의 신뢰성에 대해 확신이 서지 않음
          + 너무 자화자찬하는 내용이 많아 불쾌한 느낌이 남음
          + 저자들이 알려진 단점에 대해 솔직하지 않을 것 같음
          + 과거에 어떻게 공개했는지 아는 사람이 있는지 궁금함
     * Caddy와 Caddy-Docker-Proxy를 결합하여 여러 도커 프로젝트가 있는 서버를 설정하는 훌륭한 방법임
          + 몇 대의 서버에서 실행 중이며 잘 작동함
     * Caddy를 사랑함
          + 2년 전 NGINX/OpenResty에서 전환했으며, 설정이 훨씬 간단해짐
          + lua-resty-auto-ssl을 사용했지만, 이제는 사용하지 않음
          + 매달 70,000명의 방문자를 잘 처리함
     * Traefik은 훌륭한 대안임
          + 몇 년 동안 v1과 v2를 사용해왔으며, 도커 레이블을 사용하여 서비스 구성을 함

   헐 ㄷㄷㄷ

   mholt님 개인 프로젝트 시절인 프로젝트 초창기부터 사용해왔고 초기에 PR도 날렸었는데 이렇게 큰 거 보니 저도 뿌듯하네요. 새로 셋업하는 서버 중 k8s 환경이 아닌 곳들은 전부 caddy만 쓰고 있습니다. throughput이 높지 않다는 말은 오래 전부터 있어왔지만 정말 caddy의 throughput이 문제가 될 수준의 트래픽이 나오는 서비스를 운영하는 게 너무 부럽네요.

   멋있어요.

   몇년전부터 사용중인데, HTTPS 자동 지원이 기본설정이라 필요없는 경우 이를 회피하기 위한 설정을 해야하는 것이 처음엔 어색하게 느껴졌습니다.
   웹서버가 이렇게 간단해도 되나 싶을정도로 간단해서 애용중입니다.

   caddy가 압도적으로 강하고 간편하긴 한데, 스루풋이 그렇게 좋은편은 아닌 것 같아요.
   그리고 장점일 수도 단점일 수도 있는데, 원하는 플러그인이 있으면 포함해서 빌드해야합니다.

   기본적으로 있을거라 예상했던 캐시 기능이 플러그인으로 있고 그걸 또 빌드해서 사용해야 하더라구요.. 그 단점을 제외하면 잘 사용하고 있습니다

   Caddy 2 릴리즈 - 성능 좋고 간편한 HTTPS 자동 지원 웹서버
   Caddy 오픈소스 웹서버, Apilayer에 인수
"
"https://news.hada.io/topic?id=19274","@imhonglu/json-schema: 타입 문제로 삽질한 이야기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 @imhonglu/json-schema: 타입 문제로 삽질한 이야기

   지난달에 보여드렸던 프로젝트를 사용해보면서 예상치 못한 타입 문제가 발생했습니다.

   처음엔 간단한 문제라고 생각했지만, 해결 과정이 쉽지만은 않았습니다.

   이 과정에서
     * 어떤 실수로 타입 오류가 발생했는지
     * 문제를 해결하기 위해 어떤 접근 방식을 시도했는지
     * 최종적으로 어떤 방법이 효과적이었는지

   를 정리해보았습니다.

   저처럼 타입 문제로 고생했던 분들에게 도움이 되길 바랍니다!

   Show GN에 맞지 않아 이동하였습니다.
   Show 사용방법 을 참고해서 올려주세요.

   감사합니다!

   혹시 이 카테고리에 해당되지 않는다면 삭제하겠습니다!
"
"https://news.hada.io/topic?id=19316","Gixy - Nginx 보안 설정 분석 도구 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Gixy - Nginx 보안 설정 분석 도구

     * NGINX 설정을 분석하여 보안 취약점을 찾아내는 도구
     * 보안 설정 오류를 방지하고 취약점 자동 탐지를 목표로 함
     * Yandex가 만들었던 오리지널 Gixy(2년간 커밋없음)의 활성화된 포크임

Gixy가 탐지할 수 있는 문제

     * SSRF(Server Side Request Forgery): 서버 측 요청 위조 공격 가능성
     * HTTP Splitting: HTTP 응답 분할 공격 가능성
     * Referrer/Origin 검증 문제: 불완전한 검증으로 인한 보안 취약점
     * add_header 재정의: 응답 헤더 재정의 문제
     * Host 헤더 스푸핑: 요청의 Host 헤더 위조 가능성
     * valid_referers 설정 오류: none 값 허용으로 인한 보안 문제
     * 멀티라인 응답 헤더: 여러 줄의 응답 헤더로 인한 보안 문제
     * alias 설정 오류로 인한 경로 탐색: 잘못된 alias 설정으로 디렉터리 탈출 가능성
     * if 구문 사용 문제: location 블록 내 if 사용으로 인한 예상치 못한 동작
     * Allow 설정 오류: Allow 설정 시 Deny 설정 누락 문제
     * Content-Type 설정 문제: add_header로 Content-Type을 설정할 경우의 문제점
     * 외부 DNS 사용 문제: 보안에 취약한 DNS 설정
     * 버전 정보 노출: server_tokens 설정을 통한 버전 정보 노출
     * try_files 설정 문제: open_file_cache 없이 try_files 사용 시 보안 문제
     * proxy_pass 경로 디코딩 문제: URL 경로가 자동 디코딩 및 정규화되는 문제

사용법

     * 기본적으로 Gixy는 /etc/nginx/nginx.conf에 있는 NGINX 설정을 분석하려고 시도
     * 특정 경로를 지정할 수도 있음
          + 예를 들어, HTTP 분할 취약점을 찾을 수 있음
     * Gixy는 파이프(표준 입력)도 사용 가능
     * Docker 이미지로도 제공됨
          + 분석할 설정을 볼륨으로 마운트하고 Gixy 이미지를 실행할 때 설정 파일 경로를 제공해야 함
"
"https://news.hada.io/topic?id=19190","DeepScaleR: RL을 활용한 1.5B 모델로 O1-Preview 능가하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              DeepScaleR: RL을 활용한 1.5B 모델로 O1-Preview 능가하기

     * DeepScaleR-1.5B-Preview: Deepseek-R1-Distilled-Qwen-1.5B 모델을 강화 학습(RL)으로 미세 조정한 모델
     * AIME2024 Pass@1 정확도 43.1% 달성 (기본 모델 대비 +14.3% 향상),
       → OpenAI o1-preview 성능 능가!
     * 3,800 A100 GPU 시간($4500)으로 훈련 → 70,000 A100 GPU 시간 대비 18.42배 효율적인 RL 스케일링
     * 데이터셋, 코드, 훈련 로그 오픈소스 공개 → 누구나 RL을 활용한 지능 확장을 실험 가능

  RL을 활용한 소형 모델 강화

     * Deepseek-R1은 OpenAI o1과 견줄 수 있는 오픈소스 모델이지만, 정확한 훈련 과정은 비공개
     * RL을 활용하여 적은 계산량으로 강력한 추론 모델을 개발하는 방법을 연구
     * 기존 RL의 가장 큰 한계는 고비용:
       → Deepseek-R1의 실험을 재현하려면 최소 70,000 A100 GPU 시간 필요
     * 해결책:
          + 고성능 지식 증류(distillation) 모델 활용
          + RL을 점진적으로 확장하는 ""Iterative Lengthening"" 기법 도입 → 계산량 3,800 A100 GPU 시간으로 절감

  데이터셋 구축

     * AIME(1984-2023) + AMC(2023 이전) + Omni-MATH + Still 데이터셋 사용
     * 데이터 정제 과정:
         1. 정답 추출: gemini-1.5-pro-002를 활용해 공식 해설에서 정답 추출
         2. 중복 제거: sentence-transformers/all-MiniLM-L6-v2 임베딩 기반으로 유사 문제 제거
         3. 채점 불가능 문제 필터링: sympy를 활용한 자동 평가가 어려운 문제 제거
     * 최종적으로 40,000개 문제-정답 쌍 확보, 향후 데이터 확장 예정

  보상 함수(Reward Function)

     * Deepseek-R1과 동일하게 ""Outcome Reward Model (ORM)"" 적용:
          + 1점: 올바른 형식의 정답 (sympy 검증 통과)
          + 0점: 잘못된 정답, 형식 오류 (<think>...</think> 누락 등)
     * ""과정 기반 보상(Process Reward Model, PRM)""을 사용하지 않는 이유:
          + 보상 해킹(reward hacking) 방지 → 모델이 형식만 따라가려는 부작용 방지

  ""Iterative Lengthening"": RL 학습을 단계적으로 확장하는 기법

    Step 1: 8K 컨텍스트로 RL 학습 시작

     * 이유:
          + 잘못된 답변은 평균 20,346 토큰, 정답은 6,395 토큰 → 긴 응답이 오답 가능성 증가
          + 초기부터 긴 컨텍스트로 학습하면 비효율적 → 8K로 먼저 최적화
     * 결과:
          + AIME Pass@1 28.9% → 33.9% (+5%) 향상
          + 불필요한 토큰 수 감소 → 평균 응답 길이 10,484 토큰 감소

    Step 2: 16K 컨텍스트로 확장

     * 훈련 1,000스텝 이후, 모델이 더 길게 사고(추론)하려는 경향을 보임
     * 하지만 8K 한계로 인해 학습 효과가 제한됨 → 16K로 확장
     * 장점:
          + 처음부터 16K로 훈련하는 것보다 2배 이상 빠름 (평균 응답 길이 3,000 → 9,000 토큰 방지)
          + AIME2024 정확도 38% 도달

    Step 3: ""24K Magic"" - 최종 성능 향상

     * 16K에서 성능이 정체 → 24K 컨텍스트로 마지막 확장
     * 결과적으로 AIME2024 Pass@1 정확도 43.1% 도달, OpenAI o1-preview 능가!

  최종 평가 결과

     * DeepScaleR 모델은 AIME, MATH 500, AMC 2023, Minerva Math, OlympiadBench 등 여러 수학 벤치마크에서 평가됨
     * AIME2024 기준, DeepScaleR-1.5B-Preview의 정확도는 43.1%로, OpenAI o1-preview 모델보다 우수함
     * MATH 500, AMC 2023 등에서도 1.5B 모델임에도 불구하고 7B 모델과 동등하거나 더 높은 성능을 기록
     * 이전 연구(RL 기반 rStar, PRIME, SimpleRL)와 비교해도 최고의 효율성을 보여줌

  핵심 요약 (Key Takeaways)

    1. 소형 모델에서도 RL 확장이 가능함
          + 기존에는 RL이 대형 모델에만 효과적이라는 인식이 있었음
          + 하지만 고품질 데이터로 미세 조정된 작은 모델도 RL을 통해 강력한 추론 능력을 학습 가능
          + DeepScaleR는 28.9% → 43.1% (AIME 정확도) 향상
    2. ""Iterative Lengthening"" 기법으로 효과적인 길이 확장 가능
          + 기존 연구에서는 16K 이상 컨텍스트에서 성능 향상이 미미함을 보고
          + 8K → 16K → 24K 점진적 확장을 통해 성능 최대화

  결론: RL 스케일링의 대중화

     * DeepScaleR-1.5B-Preview는 O1-preview를 능가하는 최초의 오픈소스 RL 모델
     * 3,800 A100 GPU 시간($4500)만으로도 고성능 모델 구축 가능 → 저비용 RL 연구의 가능성 증명
     * 오픈소스 커뮤니티와 함께 RL 기반 추론 모델의 발전을 지속할 예정

   🔗 오픈소스 자료:
     * DeepScaleR 모델
     * 훈련 로그 & 데이터셋

        Hacker News 의견

     * 이 모델은 특정 문제를 해결하기 위해 벤치마크에 맞춰 조정되었으며, 다른 작업에서는 O1-Preview에 비해 성능이 떨어짐. 특별히 이 문제를 해결하고 싶지 않다면 주목할 가치가 없음. 그러나 여전히 인상적임
     * 작은 강화 모델이 승리할 것임. 우리 문명, 회사, 팀을 보라: 많은 전문화된 사람들이 있고, 단일한 비대한 천재는 아님
     * 현재 벤치마크에 대한 과도한 강조가 문제임. 이상적으로는 사용자 KPI와 비교하여 벤치마크를 해야 함
     * 중요한 것은 특정 작업에서 강력한 성능을 발휘할 수 있는 1B 모델을 훈련시키는 간단하고 신뢰할 수 있는 공식임. 이전에는 이런 것이 없었음. 엣지 디바이스가 훨씬 더 스마트해질 것임
     * 나는 매우 순진하지만, 이 벤치마크를 신뢰하는 사람이 있는가? 이들이 의미가 있는가? 너무 쉽게 조작할 수 있는 것 같고, 모델들이 서로 어떻게 비교되는지를 정확히 알 수 있는 방법처럼 느껴지지 않음. 벤치마크와 유사하지만 모델이 본 적 없는 문제를 도입하면 성능이 상당히 저하되는 것 같음
     * 새로운 ""추론"" 모델을 테스트할 수 있는 좋은 간단한 프롬프트가 있는가? ""strawberry 단어에서 R 문자를 세어라""는 조금 지루함
     * 나는 Ollama와 가장 작은 양자화된 GGUF 버전(769MB)을 사용하여 로컬에서 이것을 시도하고 있음
     * 여기서 얻은 답변: https://gist.github.com/simonw/5943a77f35d1d5185f045fb53898aa52 를 확인한 후 올바른 답을 얻었음. 그러나 시작할 때 중요한 오류를 범했음
     * CoT 모델이 외부 함수를 호출할 수 있는가? 계산기에 접근할 수 있다면 어떨까?
     * 이런 방식으로 검열되지 않은 모델을 얻을 수 있다면 정말 좋을 것임
     * 사실 꽤 어리석음. ASCII 시퀀스를 해독하라고 했더니 말도 안 되는 답을 줌. phi-4 Q4를 시도했더니 맞았음. 9GB 대 2GB(추론). 2GB에 충분한 정보를 담을 수 없어서 일반적인 수학 문제를 해결하거나 훈련 데이터에 무엇이 있었는지 아는 것 외에는 별로 쓸모가 없을 것 같음
     * 대학에 있을 때 이것은 솔직히 과적합이라고 불렸음. 평가 세트 외에서는 잘 작동하지 않는 것 같음
"
"https://news.hada.io/topic?id=19205","OmniHuman - 사진 한장으로 실사 같은 영상을 생성하는 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OmniHuman - 사진 한장으로 실사 같은 영상을 생성하는 모델

     * ByteDance 연구진이 ""단일 사진을 사용해 자연스럽게 말하고, 노래하고, 움직이는 사람의 영상을 생성""하는 AI 시스템을 개발
     * 기존 AI 모델이 얼굴이나 상반신만 애니메이션화할 수 있었던 한계를 뛰어넘어 ""전신 움직임을 반영한 영상""을 생성할 수 있음
     * ""음성, 영상, 또는 두 가지를 조합한 입력을 활용""하여 사람의 움직임을 사실적으로 애니메이션화하는 최초의 통합 모델임
     * 주요 특징
          + 단일 이미지 기반 동영상 생성
               o 인물의 사진 한 장만으로 전신 움직임을 반영한 자연스러운 영상 생성 가능
          + 멀티모달 입력 지원
               o 오디오, 비디오, 혹은 두 가지를 결합한 입력 방식 지원
               o 기존 모델 대비 제스처 표현력이 크게 향상됨
          + 어떤 비율의 이미지도 처리 가능
               o 세로형 인물 사진, 반신 사진, 전신 사진 등 다양한 이미지 비율 지원
          + 다양한 스타일과 입력 데이터 호환
               o 만화, 인공 캐릭터, 동물, 복잡한 포즈 등 다양한 스타일 반영 가능
          + 음악 스타일에 따른 자연스러운 몸짓 표현
               o 고음, 저음, 다양한 음악 장르에 맞춘 움직임 생성 가능
          + 비디오 기반 움직임 모방 가능
               o 특정 인물의 동작을 그대로 재현하는 비디오 드라이빙(video driving) 지원

   와 이제 중국이 전쟁하면 조작된 프로파간다 영상이 한둘이 아니겠네요

   와... 이거 멋진데요?
"
"https://news.hada.io/topic?id=19266","Perplexity Deep Research 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Perplexity Deep Research 공개

     * Perplexity가 시간을 절약하면서 심층적인 연구와 분석을 수행하는 Deep Research 기능을 출시
     * 사용자의 질문에 대해 수십 개의 검색을 실행하고, 수백 개의 자료를 읽고, 이를 논리적으로 분석하여 종합적인 보고서를 제공
     * 금융, 마케팅, 기술 연구 등 전문가 수준의 다양한 작업을 수행할 수 있으며, Humanity’s Last Exam에서 높은 성과를 기록
     * Deep Research는 모든 사용자에게 무료로 제공되며, Pro 구독자는 무제한으로 사용할 수 있음
     * 비구독자는 하루에 제한된 수의 답변만 이용 가능. 현재 웹 버전에서 사용 가능하며, 곧 iOS, Android, Mac에서도 제공될 예정
     * Deep Research를 사용하려면 perplexity.ai에서 검색창의 모드 선택기에서 ""Deep Research""를 선택 후 질문을 입력하면 됨

작동 방식

     * Perplexity의 Deep Research는 기존 답변 기능을 한층 발전시켜, 사람이 수 시간 동안 수행해야 할 연구를 2~4분 내에 완료함.
     * 논리적 연구 수행
          + 검색 및 코딩 기능을 갖춘 Perplexity는 여러 차례 검색을 실행하며 문서를 읽고 분석함.
          + 연구 주제에 대해 점진적으로 학습하면서 연구 계획을 수정하는 방식으로 진행됨.
     * 보고서 작성
          + 평가한 자료를 기반으로 명확하고 종합적인 보고서를 작성함.
     * 내보내기 및 공유
          + 최종 보고서는 PDF 또는 문서로 저장 가능하며, Perplexity Page로 변환하여 공유할 수도 있음.

Deep Research 활용 사례

     * Deep Research는 다양한 복잡한 주제를 전문적으로 분석하는 데 적합하며, 다음과 같은 분야에서 유용하게 활용 가능함.
     * 금융
     * 마케팅
     * 기술
     * 시사 문제
     * 건강
     * 인물 연구
     * 여행 계획

Humanity’s Last Exam 성과

     * Deep Research는 Humanity’s Last Exam에서 21.1% 정확도를 기록하며, Gemini Thinking, o3-mini, o1, DeepSeek-R1 등 여러 AI 모델을 능가함
     * 이 시험은 100개 이상의 분야에서 3,000개 이상의 질문으로 구성된 AI 성능 평가 기준

SimpleQA 성과

     * Deep Research는 SimpleQA 벤치마크에서 93.9% 정확도를 기록하여 다양한 사실 기반 질문에 대해 업계 최고 수준의 성능을 보임.

실행 속도

     * Deep Research는 높은 정확도를 유지하면서도 대부분의 연구 작업을 3분 이내에 완료함
     * 향후 성능 최적화를 통해 속도를 더욱 개선할 계획

        Hacker News 의견

     * 매주 새로운 AI가 AI-우수성-벤치마크에 따르면 이전 AI보다 20% 더 나아졌다고 하지만, 최신 SOTA 모델의 유용성은 몇 년 전 공개된 첫 번째 ChatGPT 버전보다 약간 높음
          + 이러한 AI는 유아의 추론 능력을 가지고 있지만, 점점 더 권위 있는 글쓰기 스타일로 미세 조정되고 있음
          + 연구 논문처럼 포맷된 출력물에서 글꼴과 색상만 빠져 있는 상태임
     * 이러한 심층 연구 응용 프로그램이 출시되어 기쁨
          + LLMs에 대한 명백한 사용 사례처럼 보임
          + Perplexity를 테스트 쿼리에 실행해 봄
          + ""Fortune 100 CEO들의 전공 목록""이라는 쿼리에서 어려움을 겪음
          + OpenAI와 Gemini는 어느 정도 우아하게 결과 테이블을 생성하지만, Perplexity는 주제에 대해 일반적으로 이야기함
          + 유사한 실패 사례가 더 있음
          + 단일 질문 요약에는 좋지만, 두 번째 데이터 목록을 찾아 결과를 결합할 때는 잘 작동하지 않음
     * OpenAI가 $200/월 버전의 Deep Research를 출시한 지 약 2주 만에, 24시간 내에 오픈 소스화되고 Perplexity에서 무료로 제공됨
          + 변화의 속도가 놀랍고 OpenAI가 여전히 경쟁 우위를 가지고 있는지 의문임
     * ""Deep Research""라는 이름을 사용하는 세 번째 제품임
          + 첫 번째는 Gemini Deep Research, 두 번째는 ChatGPT Deep Research, 세 번째는 Perplexity Deep Research임
     * 이러한 도구들에 대한 질문은 동일함: Perplexity, OAI 등이 실제로 자사 비즈니스에서 이러한 도구를 사용하는 증거가 어디에 있는지
          + 제공된 예시들에 감명받지 않음
          + ""상위 20개 바이오텍 스타트업"" 같은 쿼리는 다양한 무료 소스에서 답변 가능함
          + 특히 금융/투자 정보에서는 신호와 잡음을 구분하기 위해 더 깊이 들어가야 함
     * OpenAI가 새로운 제품과 상호작용 메커니즘/UX를 도입할 때마다 다른 사람들이 이를 모방함
          + ChatGPT, 코드 인터프리터, 대화 모델, 심층 연구 등에서 발생함
          + OpenAI가 새로운 UX 패러다임을 도입하는 것이 좋지만, 다른 모든 사람들이 이를 따라가는 것 같음
          + Operator/MCP/브라우저 사용은 제외함
     * Perplexity를 사용하여 50개 주의 지역 법률, 정책, 세율, 법적 장애물에 대한 테이블을 생성해 봄
          + OpenAI DR과 동일한 프롬프트를 제공했으며, Perplexity는 OpenAI와 달리 CSV 다운로드를 잘 처리함
          + 추천함
     * OpenAI나 Google의 Deep Research를 사용해보지 않았지만, Amiga 500 사운드 칩의 특별함에 대한 쿼리에서 훌륭하고 상세한 기사를 작성함
          + 개인적으로 매우 유익했고 새로운 것을 배움
     * 대안보다 더 심층적인 답변을 제공하지만, 결과의 정확성은 대안보다 떨어짐
     * Gergely (The Pragmatic Engineer)의 트윗에 대한 사람들의 의견이 궁금함
          + 웹 게시자가 유료화로 전환할지 궁금함
          + 심층 연구나 AI 검색의 경제성이 맞지 않음
          + 웹 게시자와 사이트 소유자가 트래픽과 방문자를 잃고 있음
"
"https://news.hada.io/topic?id=19310","Perplexity, 공산당 검열 제거한 deepseek R1 AI 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Perplexity, 공산당 검열 제거한 deepseek R1 AI 공개

     * R1 1776은 중국 공산당 검열을 제거하기 위해 Perplexity AI가 DeepSeek-R1 추론 모델을 파인튜닝한 오픈소스 모델임.
     * 편향 없는 정확한 정보 제공을 목표로 하면서도 수학/추론 능력을 유지하는 것이 특징.
     * 현재 모델은 huggingface 에서 다운로드 가능.
     * 1,000개 이상의 다국어 예시로 구성된 평가셋 활용해 검열 회피 가능성 측정 (인간 평가자+LLM judge 병행)
     * 중국 정치/사회/인권 등 민감 주제에 대한 회피 없이 답변 가능
     * 디센서링 과정 후에도 MATH/GPQA 등 벤치마크에서 기본 모델과 동등 성능 유지

   한국 기업에서도 사용제한하지 않는 걸까요?

   아주 좋아요 ^오^

   딥시크문서에 나온것 처럼 학습을 똑같이 한걸까요?

   DeepSeek-R1 추론 모델 자체가 오픈소스인가보네요

   학습한 결과 모델을 공개할 뿐, 원 데이터는 공개되지 않아 ""오픈소스""는 아닙니다. 제한적이지만 이미 학습된 모델 위에서 추가 학습을 하거나 변형을 할 수 있긴 해서 이번에 나온 건 그런 식으로 수정된 버전입니다.

   저는 그래서 open weight이라는 말을 더 선호합니다.

   뛰는 놈 위에 나는 놈 있다.
"
"https://news.hada.io/topic?id=19276","종단간 암호화가 대체 뭔데?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            종단간 암호화가 대체 뭔데?

   종단간 암호화라는 기술에 대한 기본적인 개념과, 해당 기술의 장단점 및 실제 사용례에 대해서 글로 정리해보았습니다.

   종단간 암호화의 기본 개념부터 기술적인 관점에서 종단간 암호화에 대한 설명, 종단간 암호화 내 키 교환 방식의 구현 방식 등을 설명하고 있습니다.

   암호학 관련 전공자나 현업자가 아니다보니 게시글에 잘못된 점이나 부족한 점이 있을 수 있습니다. 알려주시면 게시글에 잘 반영할 수 있도록 하겠습니다.

   글 잘 읽었습니다~

   ""아무튼 종단간 암호화는 위와 같은 기술적인 한계들을 안고 있지만, 그럼에도 불구하고 현 상황에서 개인정보를 보호하기 위한 가장 나은 방법이라는 것에는 변함이 없다.""

   여기서 ""개인정보를 보호하기 위한~...""에 볼드처리가 안된 부분이 있습니다

   감사합니다! 말씀주신 오타는 해결해두었습니다 :)

   관련해서 LINE 에서 공개한 글이 있으니 참고하실 수 있을 것 같아 남겨둡니다
   https://engineering.linecorp.com/ko/blog/…
   https://scdn.line-apps.com/stf/linecorp/…

   감사합니다! 참고해보겠습니다
"
"https://news.hada.io/topic?id=19238","What if Eye..? - 만약에 눈이...?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      What if Eye..? - 만약에 눈이...?

     * 디지털 생물들이 수백만 년의 진화를 통해 눈을 발전시키는 가상 페트리 접시를 만듦
     * 단일 광 감지 세포에서 시작하여, 실제 눈을 형성한 도전 과제를 마주함
          + 생존 필요에 따라 다양한 눈을 진화시킴: 복합 눈은 탐색을 위해, 카메라 같은 눈은 음식과 독을 구별하기 위해 발전함
     * 눈의 렌즈 역할
          + 생물들이 자연에서 발견한 해결책을 독립적으로 발견함
          + 렌즈는 빛을 집중시키고 생존 압력과 물리적 제약을 균형 잡기 위해 자연스럽게 등장함
     * 프로젝트 및 연구
          + ""What if Eye...?"" 프로젝트는 생물학적 시각 진화의 원리를 이해하기 위해 시각 진화를 계산적으로 재현함
          + 시뮬레이터를 통해 사용자가 자신의 생물을 정의하고 진화시킬 수 있음
          + 생물학적 원리를 사용하여 더 지능적인 인공 시각을 설계할 수 있는지 연구함
     * 전시 및 이벤트
          + MIT 박물관의 After Dark 이벤트에서 진화하는 눈을 전시할 예정임
          + MIT 미디어 랩의 저작권 소유
"
"https://news.hada.io/topic?id=19281","AMD GPU에서 발생하는 Linux의 sleep-awake 문제를 해결한 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              AMD GPU에서 발생하는 Linux의 sleep-awake 문제를 해결한 방법

     * 문제 발생: Windows와 Linux를 듀얼 부팅하는 데스크탑에서, Linux에서 고용량 RAM 사용 시 절전 모드로 전환하면 시스템이 충돌하는 문제가 발생함. 시스템을 깨우면 검은 화면이 나타나거나 응답이 없는 상태가 됨. 이 문제는 amdgpu 드라이버의 전원/메모리 관리 버그로 인한 것임.
     * 문제 진단: Gigabyte B550M DS3H 메인보드와 AMD RX 570 GPU를 사용하는 시스템에서 Arch Linux를 실행 중. 시스템 충돌 후 journalctl을 통해 로그를 확인했으며, amdgpu_device_suspend에서 메모리 부족(OOM) 오류가 발생함을 발견함. NVMe 드라이버가 시스템 재개 시 초기화에 실패하여 시스템이 멈추고 로그가 기록되지 않음.
     * 해결 시도: 여러 절전 모드를 시도하는 systemd 설정을 변경하고, 비동기 절전을 비활성화하여 문제를 단순화하려 했으나 근본적인 문제는 해결되지 않음. amdgpu의 TTM 버퍼 제거 과정에서 충돌이 발생함을 확인함.
     * 문제 원인: 시스템이 S3 절전 모드에 들어가면 PCIe GPU의 전원이 차단되어 VRAM 데이터가 손실됨. 이를 방지하기 위해 GPU 드라이버는 VRAM을 시스템 RAM으로 백업해야 하나, Linux amdgpu 드라이버는 충분한 RAM이 없을 경우 메모리 부족으로 시스템이 충돌함.
     * 해결책: Mario Limonciello가 VRAM을 디스크 기반 저장소가 중지되기 전에 백업하도록 커널 패치를 작성함. 이 패치는 VRAM 백업을 dpm_suspend() 대신 dpm_prepare() 단계에서 수행하도록 변경하여, 메모리 부족 시 절전을 중단할 수 있도록 함.
     * 추가 문제 해결: 사용자가 VRAM을 사용자 공간에서 백업하도록 하는 스크립트를 작성하여, 시스템 절전 전 VRAM을 시스템 RAM으로 이동시킴. 그러나 여러 3D 앱이 실행 중일 때는 VRAM이 계속 GPU로 이동하여 충돌이 발생할 수 있음.
     * 최종 해결: 전원 관리 알림 API를 사용하여 PM_SUSPEND_PREPARE 단계에서 VRAM을 백업하도록 변경함. 이로 인해 스왑이 비활성화되기 전에 VRAM을 시스템 RAM으로 이동할 수 있게 되어 문제를 해결함.
     * 결론: 이 문제는 여러 사람의 노력과 다양한 시도를 통해 해결되었으며, Linux 커널 6.14에 포함될 예정임.

        Hacker News 의견

     * 데스크탑이 S3 슬립 모드에 들어가면 시스템이 PCIe GPU의 전원을 차단한다는 가정에 대해 의문이 있음
          + S3는 RAM을 제외한 모든 것의 전원을 차단해야 하지만, Gigabyte Aorus 메인보드는 NVMe SSD 슬립 버그로 인해 제대로 슬립하거나 깨어나지 못하는 문제가 있음
          + 이를 해결하기 위해 udev 규칙을 추가해야 함
          + 특정 PCIe 포트에서의 깨어남을 방지하는 방법도 있음
          + 문제 있는 PCIe 깨어남 장치를 찾는 방법이 있음
          + udevadm 명령어를 사용하여 장치 정보를 얻을 수 있음
          + 쉘 스크립트를 사용하여 문제를 해결할 수도 있음
     * memreserver의 저자가 Linux 슬립 문제를 해결하기 위해 디버깅을 했던 경험을 공유함
          + Linux가 디스크와 메모리 서브시스템이 얼기 전에 신뢰할 수 있는 중단 후크를 실행하지 못했던 문제를 지적함
          + Freedesktop Gitlab에서 관련 정보를 찾기 어려움
     * Linux에서 슬립 기능을 구현하는 것이 어려운 이유와 디버깅의 어려움을 설명함
          + ThinkPad P1G4에서 팬이 자동으로 꺼지지 않는 문제를 겪고 있음
          + 블루투스 헤드폰에서 슬립 후 소리가 깨지는 문제를 경험함
     * Ryzen 기반 ThinkPad를 사용하는 사용자가 Linux에서 슬립 문제를 겪고 있으며, 6.14 버전을 기대하고 있음
     * ""슬립/웨이크"" 문제가 NP-완전 문제임을 깨달았다는 의견을 공유함
     * Framework AMD 노트북에서 GPU 확장과 듀얼 부팅 Linux/Windows를 사용하는 사용자에게 도움이 될 것이라는 의견을 제시함
          + 기부를 하고 싶다는 의사를 밝힘
     * AMD GPU에서 슬립 후 PC가 거의 멈추는 문제를 겪고 있는 사용자가 문제 해결을 위해 노력 중임
          + RX 5700 XT에서 RX 7900 XTX로 교체한 후 문제가 발생함
          + 6.14 버전이 문제를 해결할 수 있기를 기대함
     * Linux를 사용하는 동안 항상 슬립 문제를 겪어왔다는 의견을 공유함
          + Intel, AMD, ATI, NVIDIA 하드웨어를 사용해도 슬립이나 하이버네이션이 제대로 작동하지 않는 경우가 많음
     * IoT 하드웨어에서 슬립 문제를 디버깅했던 경험을 공유함
          + Linux에서 시스템 하이버네이션이 슬립보다 더 신뢰할 수 있음
          + SSD가 빠르다면 시스템 하이버네이션을 사용하는 것이 좋음
     * 메모리 관리와 OOM 조건이 Linux에서 여전히 어려운 문제임을 설명함
          + OOM 문제를 해결하기 위해 RAM을 추가하는 것이 비효율적임
          + systemd의 디버그 셸 기능이 유용하다는 의견을 공유함
          + Linux 커널 서브시스템에 대한 유용한 강연이 온라인에서 제공됨
"
"https://news.hada.io/topic?id=19204","2025년에 Favicon을 준비하는 법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2025년에 Favicon을 준비하는 법

     * favicon을 만드는 방식이 복잡해지면서, 단순히 브라우저 탭이나 터치스크린에 웹사이트 로고를 표시하기 위해 20개 이상의 PNG 파일을 사용하는 상황이 많음
     * 이를 대체하기 위해, 상대적으로 적은 수의 아이콘 파일과 최소한의 설정으로 대부분의 환경을 커버할 수 있는 방법을 제안

매우 간단한 버전

     * 복잡한 세팅 없이 핵심적인 다섯 가지 아이콘과 하나의 JSON 파일만 있으면 충분함
     * HTML에 넣을 기본 링크 예시임
<link rel=""icon"" href=""/favicon.ico"" sizes=""32x32"">
<link rel=""icon"" href=""/icon.svg"" type=""image/svg+xml"">
<link rel=""apple-touch-icon"" href=""/apple-touch-icon.png""><!-- 180×180 -->

     * PWA(Progressive Web App)를 지원한다면 다음도 추가함
<link rel=""manifest"" href=""/manifest.webmanifest"">

     * 예시 manifest.webmanifest 파일 구조임
{
  ""icons"": [
    { ""src"": ""/icon-192.png"", ""type"": ""image/png"", ""sizes"": ""192x192"" },
    { ""src"": ""/icon-mask.png"", ""type"": ""image/png"", ""sizes"": ""512x512"", ""purpose"": ""maskable"" },
    { ""src"": ""/icon-512.png"", ""type"": ""image/png"", ""sizes"": ""512x512"" }
  ]
}

     * maskable 아이콘은 가장자리 일부가 잘릴 수 있으므로, 409×409 원형 영역을 안전 지대로 두는 것이 좋음
     * 이렇게만 구성해도 주요 브라우저와 기기 대부분에서 favicon이 잘 동작함

상세 설명 버전

     * favicon은 “favorite icon”에서 유래한 것으로, 브라우저 탭 등에 표시되는 작은 아이콘임
     * 사파리 역시 최근에는 favicon을 제대로 지원함
     * 여러 해상도별 아이콘 세트를 만드는 대신, SVG, 몇 개의 PNG 아이콘, 그리고 간단한 manifest를 활용해 효율적으로 처리 가능함

궁극의 Favicon 구성

     * SVG 파일 하나와 최소한의 PNG 파일 몇 장, 그리고 web manifest 파일을 통해 다양한 브라우저와 기기에서 아이콘을 통일성 있게 표시할 수 있음
     * SVG는 벡터 포맷이라 필요에 따라 자유롭게 확대·축소가 가능하며, 배경 다운로드로 성능 부담도 적음
     * PNG는 애플용(apple-touch-icon)과 PWA용 아이콘 등 꼭 필요한 크기만 준비함
     * 윈도우 타일 아이콘, Safari Pinned Icon, rel=“shortcut” 등 과거 포맷들은 최근 브라우저에서는 크게 필요 없게 되었음
     * 오래된 브라우저나 툴에서는 /favicon.ico 경로로 직접 아이콘을 가져오는 경우가 있으므로, 루트 경로의 favicon.ico는 여전히 중요함

Ultimate Favicon Set 만드는 방법

     * 아래 단계는 아이콘을 직접 만들고 최적화하는 과정임
     * 1단계: SVG 준비
          + 정사각형 비율을 유지한 icon.svg 파일 준비가 필요함
          + <svg> 내부에 CSS 미디어 쿼리를 통해 라이트·다크 모드에 대응하는 색상 전환을 구현 가능함
          + 예시처럼 @media (prefers-color-scheme: dark)를 활용해 다크 모드 색상을 지정할 수 있음
     * 2단계: ICO 파일 만들기
          + 16×16 또는 32×32 크기로 icon.svg를 래스터 이미지로 변환해 favicon.ico 생성함
          + GIMP나 Inkscape+ImageMagick 같은 툴 사용 가능함
          + 작은 해상도에서 로고가 너무 뭉개지지 않도록 주의함
     * 3단계: PNG 이미지 만들기
          + 512×512, 192×192, 180×180, 512×512(maskable) 크기로 PNG 아이콘을 준비함
          + iOS용 apple-touch-icon은 180×180으로 작업하고, 배경색을 넣거나 적절한 여백을 두면 좋음
          + maskable 아이콘은 409×409 영역을 안전 지대로 두어야 함
     * 4단계: PNG와 SVG 최적화
          + SVG는 SVGO 등을 활용해 압축하고, PNG는 Squoosh로 압축률을 높임
          + 사용자가 데이터 제한 환경에 있을 수 있으므로, 파일 용량 최소화는 유리함
     * 5단계: HTML에 아이콘 연결
          + 기본적으로 favicon.ico, icon.svg, apple-touch-icon.png를 <head> 태그에 연결함
<link rel=""icon"" href=""/favicon.ico"" sizes=""32x32"">
<link rel=""icon"" href=""/icon.svg"" type=""image/svg+xml"">
<link rel=""apple-touch-icon"" href=""/apple-touch-icon.png"">

          + Webpack 등을 사용한다면, 빌드 시에 해시를 포함해 캐시를 관리할 수도 있음
          + 스테이징(개발) 환경과 프로덕션 환경을 구분하기 위해 다른 favicon을 쓸 수도 있음
     * 6단계: Web Manifest 만들기
          + manifest.webmanifest 파일에 PWA용 아이콘 정보를 넣고, <link rel=""manifest"" href=""/manifest.webmanifest"">로 연결함
          + 아래 예시는 192×192, 512×512(maskable), 512×512 아이콘을 지정함
{
  ""name"": ""My website"",
  ""icons"": [
    { ""src"": ""/icon-192.png"", ""type"": ""image/png"", ""sizes"": ""192x192"" },
    { ""src"": ""/icon-mask.png"", ""type"": ""image/png"", ""sizes"": ""512x512"", ""purpose"": ""maskable"" },
    { ""src"": ""/icon-512.png"", ""type"": ""image/png"", ""sizes"": ""512x512"" }
  ]
}

          + Webpack 환경에서는 webpack-pwa-manifest 같은 플러그인을 활용해 자동화할 수 있음
     * 위와 같은 과정을 거치면 적은 수의 파일로도 대부분의 브라우저와 기기에서 적절한 favicon이 표시됨
     * 자동화 툴을 만들어 운영하면 더 편리

   SVG Favicon은 아직 파폭에선 지원이...

   아 사파리였네요

   예전 회사에서 했던 프로젝트로 웹게임을 구현했는데
   심심해서 이스터에그로 애니메이션 favicon 을 구현했는데
   sprintsheet 로 애니메이션 구현했더니 꽤 그럴듯하더군요

   2021년을 위한 Favicon 정리
   4년전에 한번 올렸었는데 요즘에 맞게 업데이트 되었습니다.
"
"https://news.hada.io/topic?id=19232","HN 화제: SQL Noir – 범죄 해결로 배우는 SQL","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HN 화제: SQL Noir – 범죄 해결로 배우는 SQL

     * GitHub에서 Star하기
       GitHub에서 프로젝트에 별을 주는 것은 프로젝트의 인기를 높이고, 더 많은 사람들이 프로젝트를 발견할 수 있도록 도움을 줌.
     * 커피 한 잔 사주기
       개발자에게 커피를 사주는 것은 그들의 노고를 인정하고, 프로젝트의 지속적인 발전을 지원하는 방법임.
     * SQL Noir
       SQL을 사용하여 미스터리를 해결하는 독특한 프로젝트로, SQL을 배우고 연습하는 데 유용한 도구임.
     * 조사 시작하기
       SQL 쿼리를 통해 문제를 해결하고, 데이터베이스 탐색을 통해 답을 찾는 과정이 포함됨.

        Hacker News 의견

     * 아이디어는 좋지만 UI가 몰입감을 주지 못함
          + 자동완성 기능이 있으면 좋겠음
          + 쿼리와 함께 스키마를 볼 수 있는 기능이 필요함
          + 테이블 및 열 이름을 쉽게 복사할 수 있는 기능이 필요함 (현재 테이블 이름은 선택할 수 없음)
          + 이미 실행된 쿼리 위아래로 더 추가할 수 있는 기능이 필요함
     * 재미있음! 몇 가지 아이디어:
          + ""제출"" 상자가 이름이나 용의자 ID를 요구하는지 명확하지 않음
          + 출력에 ""노트에 복사"" 버튼이 있으면 좋겠음
          + 사용 가능한 함수나 방언에 대한 문서가 있으면 좋겠음
          + 작은 프로젝트로 배우는 것이 훨씬 쉬움
     * SQL Island와 SQL Murder Mystery 같은 분야에 훌륭한 추가 요소임
          + SQL Noir의 메커니즘은 후자와 비슷하며, 독립적인 모험임
          + SQLab이라는 SQL 게임 엔진을 개발 중임
          + 데이터베이스 덤프를 다운로드하여 관리자 인터페이스에서 플레이 가능함
          + SQLab의 원칙은 연구자나 교사에게 유용함
     * SQL Workspace를 클릭하면 오류가 발생함
          + 데이터베이스를 로드하지 못함
          + WebAssembly 변수를 찾을 수 없음
     * 매우 재미있음!
          + SQLite 데이터베이스를 직접 다운로드할 수 있으면 좋겠음
          + SQL을 ""학습""하기 위한 것이라면 더 많은 안내나 예제 쿼리가 필요할 것 같음
          + SQL을 모르면 무엇을 해야 할지 전혀 모를 수 있음
     * 훌륭한 아이디어이며, 문제를 해결하는 것이 재미있었음
          + 만화 버전이 초보 프로그래머에게 도움이 될 것 같음
          + SQL 편집기가 가끔 이상하게 작동하여 올바른 작성이 어려움
     * MathNet이라는 교육용 경찰 드라마를 떠올리게 함
          + 두 수사관이 계산기를 사용함
     * 스타일이 독특하고 멋짐
          + SQL을 배우고 연습하고 기억하는 재미있는 방법의 시작을 봄
          + 단일 작업 공간이었으면 좋겠음 (탭이 없었으면 좋겠음)
          + 이전 SQL 쿼리와 결과를 저장할 수 있으면 좋겠음
     * 편집기가 주석을 추가할 때 이상하게 작동함
          + 여러 줄을 작성한 후 각 줄 앞에 ""--""를 입력하면 문제가 발생함
          + ""from interviews i"" 줄을 주석 처리하면 이전 줄로 이동하고 구문 강조가 깨짐
     * 두 가지 무료 미스터리를 시도했으며 해결하는 것이 재미있었음
          + SQL 편집기가 주석을 지원하여 이전 쿼리를 주석 처리할 수 있으면 좋겠음
"
"https://news.hada.io/topic?id=19244","10년 후, 잃어버린 10년년 후, 잃어버린 10년 (2024)

     * 아침에 알람보다 한 시간 일찍 깨어났음. 하늘은 이미 밝았고, 새들이 울고 있었음. 잠시 후, 비가 지붕을 스쳐 지나갔음. 그냥 누워서 생각하지 않고, 느끼고, 기억했음.
     * 거의 16년 전, 둘째 딸이 태어났음. 거의 10년 전, 그녀는 여섯 살이 되었고, 반쯤 의식을 잃은 상태에서 12시간도 되지 않아 세상을 떠났음.
     * 오늘 그녀는 첫 단독 운전을 하지 않을 것임. 그녀가 가장 좋아하는 레스토랑에서 저녁을 먹으며 축하하지 않을 것임. 조카에게 잘 자라고 키스하거나 형제자매를 놀리지 않을 것임.
     * 그녀가 16살이 되었을 때 어떤 모습일지 우리는 알 수 없음. 모든 것이 잃어버린 상태임.
     * 오늘 오후, Rebecca의 무덤을 방문하고, 그녀의 이름이 마지막으로 읽히는 Anshe Chesed Fairmount Temple에서 기억할 것임. 이달 말, 합병의 일환으로 성전이 문을 닫을 것임. 또 다른 상실임.
     * 십 년 전, 그녀가 경험하지 못한 모든 것들이 나를 짓누를 것이라고 말했음. 시간이 지나면서 그녀가 보지 못한 것들이 그 무게를 더한다고 깨달았음. 같은 무게일 것 같지만, 그렇지 않음.
     * 며칠 전, 치료사와 이 모든 것에 대해 이야기했음. ""가장 근본적인 방식으로 내 아이에게 실패했을 때 어떻게 괜찮을 수 있는지 모르겠음""이라고 말했음.
     * ""당신은 그녀에게 실패하지 않았음""이라고 치료사가 부드럽게 말했음.
     * ""알고 있음""이라고 대답했음. ""하지만 그렇게 느끼지 않음.""
     * 십 년이 지나도 그것은 변하지 않음. 시간이 지나도 변하지 않을 것 같음.

        Hacker News 의견

     * 1990년대 중반에서 후반에 젊은 바텐더로 일했음. 어느 날 행사에서 한 부부가 나를 바라보고 있었음. 그들은 내가 그들의 아들과 닮았다고 했고, 그 아들은 내 나이쯤 되었을 것이라고 했음. 그 아들이 몇 살에 세상을 떠났는지는 기억나지 않지만, 그들의 얼굴에 나타난 고통은 잊을 수 없었음
          + 좋은 친구들이 10개월 된 아들을 잃었음. 그 아들은 올해 11살이 되었을 것임. 그 사건은 그들을 변화시켰고, 그 이후로 놀라운 일들을 해냈지만, 그들의 얼굴에는 여전히 무거운 짐이 보임
          + 그 고통을 누구에게도 겪게 하고 싶지 않음
     * 오래 전, Eric이 Seattle에서 열린 An Event Apart에서 위기 상황에서의 디자인에 대한 발표를 하는 것을 보았음. 그는 딸 Rebecca와 응급실에 갔던 경험을 예로 들어, 병원 웹페이지에 위기 상황에서 쉽게 읽고 사용할 수 있는 섹션이 있어야 한다고 강조했음
          + Eric의 작업을 알고 있었지만, 자신의 비극을 예로 들어 웹사이트가 다양한 위기 상황에서 접근 가능해야 한다는 점을 강조한 그의 취약성은 매우 감동적이었음
     * Eric이 자신의 슬픔과 그 과정을 공유한 것에 깊은 감사를 느끼고 있음. Eric을 알게 된 것은 그가 nerdy한 것들에 기여한 덕분이었음. 그의 딸과의 여정을 기록한 글은 내가 아버지가 되기 전부터 나를 변화시켰음
          + 그의 가족이 내 삶에 미친 장기적인 영향 외에도, 우리는 소셜 미디어의 기대 없이 서로에게 공개적으로 글을 쓰고 영향을 주곤 했음을 상기시켜 줌
     * 거의 30년 동안 이 정도의 상실을 피할 수 있었던 것이 행운임. 그 감정을 상상할 수 없음. 이 이야기를 공유해줘서 고맙고, 내 개와 파트너를 더 꽉 안아줄 것임
     * 인터넷 덕분에 다른 사람의 세상을 엿볼 수 있는 순간 중 하나임. 새로운 관점을 제공함
     * 매우 감동적임. 아이가 3명 있는데, 한 명은 입양했지만 다른 아이들과 다르지 않음
          + 그들 중 누구에게 무슨 일이 생긴다면, 어떻게 계속 살아갈지 상상할 수 없음. 하지만 어떻게든 살아가겠지만, 그 모습이 어떨지는 모름
          + 아이들이 죽는 상상을 할 때, 내가 얼마나 준비가 안 되어 있는지 깨닫게 됨. 그들의 도착을 준비할 수 없듯이, 그들의 떠남도 준비할 수 없다고 생각함
          + Marcus Aurelius는 ""아이에게 키스할 때, '내일 너는 죽을 수도 있다'고 속삭이라""고 썼음. 이는 매우 음울하게 들리지만, 특히 그의 시대에는 고려하고 숙고해야 할 것임
          + Eric이 그 도전에 어떻게 맞섰는지는 모르겠지만, 그는 해냈고, 그런 사람을 존경함. 그 길을 공유하는 것은 매우 취약하고, 어느 정도는 관대함
     * 반지의 제왕에서 King Theoden이 아들을 묻으며 Gandalf에게 ""부모는 자식을 묻어서는 안 된다""고 말하는 장면이 있음
          + 그 장면이 깊이 남아, 자식을 잃으면 그것이 나를 삼키게 두겠다고 결심했음
          + 그것이 나를 어떻게 파괴할지는 모르겠지만, 완전히 파괴될 것임. 10년이 지나도 거의 알아차리지 못할 것임
          + 딸들의 영상을 많이 가지고 있고, 더 많이 찍지 않은 것을 후회하며 그 영상만 반복해서 볼 것임
          + 세상에서 가장 슬픈 사람이 될 것이고, 그것이 괜찮다고 생각함
     * 당신의 감정을 이해함. 내일은 내 아들의 아홉 번째 생일임
     * Eric이 Rebecca의 병과 죽음에 대해 쓴 글을 읽었던 기억이 남. 내 딸이 태어나기 전이었지만, 그 글은 내가 읽었던 것 중 가장 슬픈 것 중 하나였음. 그의 글은 슬픔과 무력함을 매우 잘 전달했으며, 그럼에도 불구하고 삶을 계속 이어나갔음. 깊은 애도를 표함
"
"https://news.hada.io/topic?id=19214","FFI 속도 향상을 위한 Tiny JITs","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FFI 속도 향상을 위한 Tiny JITs

CRuby의 FFI 속도를 향상시킬 방법이 있을까?

     * Ruby에서 네이티브 코드를 호출해야 할 때, 가능한 한 많은 Ruby 코드를 작성하는 것이 좋음. YJIT는 Ruby 코드를 최적화할 수 있지만 C 코드는 최적화할 수 없기 때문임.
     * 네이티브 라이브러리를 호출할 때는 Ruby에서 대부분의 작업을 수행하고, 네이티브 함수 호출을 위한 간단한 API를 제공하는 네이티브 확장을 작성하는 것이 좋음.
     * FFI는 네이티브 확장만큼의 성능을 제공하지 않음. 예를 들어, strlen C 함수를 FFI로 래핑한 경우, C 확장과 비교하여 성능이 떨어짐.

  벤치마크 결과

     * String#bytesize를 직접 호출하는 것이 가장 빠르며, 이는 기준점으로 생각할 수 있음.
     * C 확장을 통한 strlen 호출이 두 번째로 빠르고, 간접적으로 String#bytesize를 호출하는 것이 그 다음임.
     * FFI 구현은 가장 느림. 이는 FFI를 통한 네이티브 함수 호출 시 상당한 오버헤드가 발생함을 보여줌.

  현실을 바꿀 수 있을까?

     * Chris Seaton의 아이디어로, 외부 함수를 호출하기 위해 JIT 코드를 생성할 수 있는 가능성을 탐색 중임.
     * FFI 래퍼 예제에서 attach_function 호출 시, 래퍼 함수 정의 시점에 필요한 기계 코드를 생성할 수 있음.

  RJIT 활용

     * RJIT는 Ruby로 작성된 JIT 컴파일러로, Ruby와 함께 제공됨.
     * RJIT를 gem으로 추출하여 3rd 파티 JIT 컴파일러가 Ruby 데이터 구조를 쉽게 매핑할 수 있도록 함.
     * JIT 엔트리 함수 포인터를 항상 실행하여 3rd 파티 JIT가 기계 코드에 등록할 수 있도록 함.

  개념 증명

     * ""FJIT""라는 작은 개념 증명을 통해, 런타임에 기계 코드를 생성하여 외부 함수를 호출할 수 있음.
     * 벤치마크 결과, FJIT가 생성한 기계 코드는 C 확장보다 빠르며, FFI 호출보다 2배 이상 빠름.

  결론

     * C 확장과 동일한 속도(또는 더 빠른 속도)를 유지하면서 가능한 한 많은 Ruby 코드를 작성할 수 있는 가능성을 보여줌.
     * Ruby가 FFI 없이 네이티브 코드를 호출할 수 있는 장점을 가질 수 있음.

  주의사항

     * 현재 ARM64 플랫폼에만 제한됨. x86_64 백엔드를 추가해야 함.
     * 모든 매개변수 유형과 반환 유형을 처리하지 않음. 단일 매개변수와 반환만 처리 가능.
     * Ruby를 --rjit --rjit-disable 플래그로 실행해야 함. Kokubun의 기능이 적용되면 해결될 것임.
     * 현재 Ruby 헤드에서만 실행 가능.

        Hacker News 의견

     * Java Constraint Solver (Timefold)와 CPython 간의 함수 호출을 위해 FFI를 많이 다루어야 했음
          + FFI의 성능 문제는 주로 호스트 언어와 외국어 간의 통신을 위한 프록시 사용에서 발생함
          + JNI나 새로운 외국 인터페이스를 사용한 직접적인 FFI 호출은 빠르며, Java 메서드를 직접 호출하는 것과 비슷한 속도임
          + 그러나 CPython과 Java의 가비지 컬렉터는 잘 맞지 않아 동기화를 위해 특별한 기술이 필요함
          + JPype나 GraalPy와 같은 프록시를 사용하면 성능 오버헤드가 발생하며, 매개변수와 반환값을 변환해야 하고 추가적인 FFI 호출이 발생할 수 있음
          + CPython 객체를 Java로 전달하면 Java는 CPython 객체에 대한 프록시를 가짐
          + 그 프록시를 다시 CPython으로 전달하면 프록시의 프록시가 생성됨
          + 결과적으로 JPype 프록시는 CPython을 직접 FFI로 호출하는 것보다 1402% 느리고, GraalPy 프록시는 453% 느림
          + 최종적으로 CPython 바이트코드를 Java 바이트코드로 변환하고, 사용된 CPython 클래스에 해당하는 Java 데이터 구조를 생성함
          + 그 결과 프록시를 사용하는 것보다 100배 빠른 성능 향상을 얻음
          + CPython 바이트코드를 변환하거나 읽는 것은 매우 불안정하고 문서화가 부족하며, VM의 여러 특이점 때문에 다른 바이트코드로 직접 매핑하기 어려움
          + 자세한 내용은 블로그 게시물을 참조할 수 있음: 링크
     * Rails At Scale과 byroot의 블로그 덕분에 현재 Ruby 내부와 성능에 대한 심도 있는 논의에 관심을 가지기에 좋은 시기임
          + 최근 Ruby와 Rails의 개선 덕분에 Rubyist로서 좋은 시기임
     * 외부 함수 호출을 위해 3rd party 라이브러리를 호출하는 대신 코드를 JIT 컴파일할 수 있는지에 대한 질문
          + LuaJIT FFI의 기본 원리라고 확신함: 링크
          + LuaJIT의 FFI가 매우 빠른 이유라고 생각함
     * JVMCI를 사용하여 arm64/amd64 코드를 즉석에서 생성하여 JNI 없이 네이티브 라이브러리를 호출하는 라이브러리 관련 정보: 링크
     * ""가능한 한 많은 Ruby를 작성하라, 특히 YJIT가 Ruby 코드는 최적화할 수 있지만 C 코드는 그렇지 않기 때문""이라는 의견
          + Ruby가 꽤 느린 언어가 아닌가 하는 의문
          + 네이티브로 들어간다면 가능한 한 많은 작업을 네이티브에서 하고 싶음
     * 10년 이상 Ruby를 사용해왔고, 최근의 발전을 보는 것이 매우 흥미로움
          + 기대됨
     * 왜 JIT 컴파일이 필요한지에 대한 의문
          + C로 작성할 수 있다면 로드 시점에 컴파일할 수 있지 않을까 하는 생각
     * FFI - Foreign Function Interface, 즉 Ruby에서 C를 호출하는 방법
     * 이것이 바로 libffi가 하는 일 아닌가 하는 질문
     * tenderlovemaking.com으로 가지 않은 이유를 알 것 같음
"
"https://news.hada.io/topic?id=19210","Show GN: 마케팅 팀이 좋아하는 가벼운 Site Explorer 만들었습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Show GN: 마케팅 팀이 좋아하는 가벼운 Site Explorer 만들었습니다

   경쟁사 키워드 분석이 필요하지만, 기존 툴은 비싸고 무겁다는 피드백이 많았습니다.

   그래서 크롤링 없이 제3자 API로 SEO & PPC 키워드를 분석하는 가벼운 Site Explorer를 만들었습니다.
•       마케팅 팀원들이 좋아하는 직관적인 UI
•       SEO & PPC 키워드 분석 – 경쟁사가 어떤 키워드로 트래픽을 얻는지 확인

   마케팅팀과 협업할 일이 있다면 한 번 추천해보세요!
"
"https://news.hada.io/topic?id=19290","샌프란시스코 노숙 문제: 공원 관리원의 1인 지원 노력","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     샌프란시스코 노숙 문제: 공원 관리원의 1인 지원 노력

문화

  그녀의 임무는 SF의 공원에서 노숙자를 제거하는 것임. 그녀의 방법은 특별함

     * 공원 관리원 아만다 배로우즈는 골든 게이트 파크에서 노숙자들을 돕기 위해 순찰을 돌고 있음.
     * 케빈 호튼(별명 카인)은 1990년대 후반부터 골든 게이트 파크에 거주해 왔으며, 공원의 숨겨진 길과 자연을 잘 알고 있음.
     * 배로우즈는 카인의 과거와 공원에 대한 애착을 이해하고, 그를 강제로 쫓아내는 대신 신뢰를 쌓고 도움을 제공하는 방법을 선택함.

  노숙자 문제 해결의 어려움

     * 노숙자 문제는 중독, 정신 질환, 장애, 트라우마, 빈곤 등 다양한 문제로 인해 복잡함.
     * 배로우즈는 카인의 신분증 문제를 해결하고 주거 신청을 돕기 위해 많은 노력을 기울였음.
     * 카인은 결국 2021년 10월에 Civic Center Hotel Navigation Center에 입주하게 되었음.

  공원 내 노숙자 문제에 대한 새로운 접근

     * 2015년부터 Rec and Parks는 노숙자 문제를 해결하기 위해 특별한 관리원 팀을 구성함.
     * 이 팀은 노숙자들에게 필요한 서비스를 연결해주며, 주거 안정성을 높이기 위해 노력함.
     * 배로우즈는 노숙자들과의 관계를 구축하고 그들의 필요를 이해하는 데 중점을 두고 있음.

  노숙자 지원의 효과와 도전

     * 배로우즈는 2021년 이후 50~60명의 노숙자들이 공원을 떠나도록 도왔으며, 그 중 절반 이상이 현재 실내에 거주하고 있음.
     * 그러나 시의 노숙자 지원 기관과의 협력이 더 잘 이루어진다면 더 효과적일 것이라고 생각함.
     * 배로우즈는 노숙자들이 주거를 찾도록 돕기 위해 끊임없이 노력하고 있음.

  개인적인 경험과 공감

     * 배로우즈는 자신의 경험을 통해 노숙자들의 상황을 이해하고 있으며, 그들에게 공감하고 있음.
     * 그녀는 노숙자 문제를 범죄로 취급하지 않으며, 그들의 필요를 이해하고 지원하는 데 중점을 두고 있음.

  노숙자 지원의 지속적인 필요성

     * 배로우즈는 노숙자들이 안정적인 주거를 찾도록 돕기 위해 지속적으로 노력하고 있으며, 그들의 삶을 개선하기 위해 헌신하고 있음.
     * 카인은 현재 Allen Hotel에 거주하고 있으며, 배로우즈는 그가 주거를 잃지 않도록 계속해서 지원하고 있음.

        Hacker News 의견

     * 이 글과 Amanda Barrows의 초상화에 깊이 감명받았음. 그녀는 독특하고 강한 사람이며, 이 도시는 그녀를 가질 수 있어 매우 운이 좋음
          + 다른 사람들과 달리, 나는 깊은 공감을 느꼈고, 오늘의 HN의 냉소와 좌절은 나에게 큰 영향을 주지 않았음
          + 공공 질서 문제, 공원에서의 노숙자 문제, 공유 공간의 도전은 나에게 영향을 미쳤음
          + 세상의 상태를 내 아들들에게 어떻게 설명할지 고민함. 항상 그들에게 상기시킴: 모든 노숙자는 한때 어린 소년이나 소녀였음
          + Amanda가 그녀의 일에 가져오는 연민과 실용주의의 균형이 가장 인상적이었음
          + 정책과 관료적 비효율성에 좌절하기 쉽지만, 어느 정도 이해할 수 있음
          + 가장 큰 좌절은 많은 노숙자들의 정신 상태와 주택을 확보하기 위한 요구 사항 사이의 격차임
          + 도시는 정책의 장기적 비용을 이해하고 있으며, 제한된 예산을 가진 매우 실용적인 사람들이 운영하고 있음
          + 그러나 규칙은 규칙이며, 어느 시점에서는 상향식 조정(의료 개입 포함)이 필요함
     * 복잡한 문제를 강조하고 해결하기 위한 단계를 제시한 훌륭한 기사임
          + 미국은 효과적인 서비스 모음을 제공하기 위해 충분한 자원을 사용하지 않으며, 인간 생명의 가치를 충분히 인식하지 않음
          + 현재 시애틀에서 노숙자, 상호 학대적(소리 지르고 싸우는), 약물 사용 커플이 집 앞 잔디밭이나 다양한 인도/버스 정류장에 캠핑하고 있음
          + 그들은 더 심각한 약물 사용자들을 끌어들여, 교통에 걸어 들어가 치이거나 사망하는 등의 문제를 일으킴
          + 이 기사는 그들이 학대적인 관계에서 벗어나고 거리에서의 삶에서 벗어나기 위해 직면한 복잡성을 상기시킴
          + 그들이 떠나길 원하지만, 그것이 어렵다는 것을 알고 있음. 더 많은 공무원이 그들을 안내할 수 있기를 바람
          + 시애틀 통합 케어 팀은 이 커플에게 비효율적이었으며, 그들은 4년 이상 이곳에 있었지만 개선되지 않았음
     * 거의 20년 전, 노숙자를 거리에서 벗어나게 하려고 2년을 보냈고, 그에 대한 영화를 제작했음
          + 노숙자는 무엇보다도 사람임. 그들은 인간 경험의 전체 범위를 아우름(영화의 주요 주제는 심리학 석사 학위를 가졌음)
          + 노숙은 하나의 문제가 아니라, 최소한 반 다스 이상의 다른 문제의 증상임. 각기 다른 해결책이 필요함
          + 일부 노숙자는 자발적으로 그 생활 방식을 선택함. 소수이지만, 0은 아님
     * 나는 24세이며, 샌프란시스코에 살고 있음. 여기 사는 것이 부끄럽고 곧 이사하고 싶음
          + ""현장"" 느낌이 나쁨. 5년 전의 모든 문제가 더 악화되었음(가뭄 제외)
          + 일상 생활은 약물 중독자들을 피하기 위해 계산된 원을 그리며 걷는 것과 같음
          + 거리에는 더 많은 쓰레기와 고속도로 표지판을 덮는 그래피티가 늘어남
          + 사람들은 변화를 시도하는 것을 포기하고 이제는 그냥 참음. 이곳에 왔을 때 높은 능력의 기술 사람들을 만날 줄 알았음
          + 기술 장면은 보스턴보다 훨씬 좋지만, SF의 정신은 정말 죽었음. 세상의 모든 돈이 있어도 자동차 이전보다 도시를 반도 잘 운영하지 못함
     * 주택 자격을 얻기 위해 필요한 ""고통스럽고 관료적인 작업""을 설명한 공원 및 레크리에이션 부서의 한 관리자의 말을 인용함
          + 정치적 발언을 할 위험을 감수하고, DOGE에 대해 주로 희망적이라고 말하고 싶음
          + 문명을 구축하는 것은 기관의 엔트로피가 계속 축적되는 것과 함께 옴. 이는 좋은 의도와 능력에도 불구하고 발생함
          + 모두가 자신의 부분을 개선하고 있지만, 이는 많은 지역 최대치에 갇히게 함
          + 일부는 상위 수준에서 수정할 수 있지만, 일부는 10년마다 창의적 파괴가 필요함
          + 어제 읽은 글이 있음: 일본은 경제 침체와 인구 고령화에도 불구하고 높은 생활 수준을 유지했음. 이는 주로 합리적인 구역 시스템 덕분임
          + 일본은 12개의 전국적으로 대부분 포괄적인 구역 유형을 가지고 있음. 이는 혼합 사용 개발을 기본적으로 허용함
          + 실제로 일본에 가서 괜찮은 차 가격으로 집을 살 수 있음. 이는 대부분의 세계에서 자동차 이전에 그랬던 것과 같음
     * 샌프란시스코에 살며 도시 전역에서 노숙자와 약물 중독을 목격하는 사람들에게 이 기사는 깊이 동떨어져 있고 심지어 모욕적임
          + 샌프란시스코는 수십 년 동안 노숙자 프로그램에 수십억을 썼지만, 위기는 여전히 지속됨. 우리는 정말로 최선을 다하고 있는 것인지 물어봐야 함
          + 우리는 효율적으로 투자하고 있는지, 아니면 단순히 망가진 시스템을 유지하고 있는지 물어봐야 함
     * 진정한 공감과 이해를 보여주는 기사를 읽는 것은 좋음. 요즘 우리는 더 많은 것이 필요함
          + 그러나 더 많은 것이 해결책이 될 수 없다는 것은 즉시 명백함. 이 기사는 기본적으로 ""캘리포니아 자유주의자"" 해결책을 최대한으로 끌어올린 것임
          + 극심한 정신 질환이나 중독이 있는 노숙자를 쉼터/아파트/SRO/어디든지 넣으면, 그들은 보통 다시 노숙자가 됨
          + 이 시스템은 매우 높은 비용이 듦. 노숙자에게 괴롭힘을 당하거나 공격당하는 사람들, 노숙자와 일할 때 겪는 일로 인해 트라우마를 겪는 자원봉사자와 공무원들
          + 도시의 일부 지역은 살기 어려움. ""성공 사례""가 있어도 보통 ""이 사람의 삶은 여전히 엉망이고, 여전히 중독되어 있으며, 다른 악마들이 있지만 이제는 공원 대신 엉망인 아파트에서 삶이 엉망임""
          + 유일한 진정한 선택은 예방임. 우리는 더 강한 공동체, 더 강한 가족, 젊은이를 위한 멘토링이 필요함
          + 기사에서 언급된 소수의 노숙자 남성에 대한 개입은 최소 수백만 달러가 듦
          + 그 돈의 일부를 그들이 자란 지역의 새로운 창문과 신선한 페인트, 꽃밭에 투자함
          + 그들에게 영양가 있는 음식과 운동에 접근할 수 있게 함. 지역 사회 지도자와 멘토, 그들의 삶에 변화를 줄 수 있는 사람들과 정기적으로 접촉할 수 있도록 제공함
          + 건전한 지역 사회 활동(스포츠, 로봇공학, 예술 등)에 돈을 할당하여, 더 나은 일을 할 수 없는 십대의 모든 여가 시간을 흡수할 수 있도록 함
          + 이러한 것들에 투자된 모든 달러는 백배로 보답할 것임
          + 노숙의 많은 부분은 치료법이 없는 질병임. 치료법이 없는 질병에 대해 무엇을 해야 하는가? 예방함
     * 10,000피트에서 보면 장기적으로 더 저렴할 수도 있음. 개인적인 관심, 시스템을 통한 안내, 지속적인 배경 EMT 개입, 더 비싼 건강 결과, 경찰 및 궁극적으로 수감 위험과 비교하여
          + 인간적인 반응에 대한 경제 논리를 좋아하지 않지만, 그것이 더 좋을 뿐만 아니라 실제로 재정적으로 합리적일 수도 있다는 점은 좋음
     * 사랑은 기본적인 인간의 필요(그리고 좋은 정신 건강을 위한 요구 사항)라는 애완 이론이 있음. 정부는 정신 건강 치료, 치료 프로그램, UBI 등에 돈을 얼마나 많이 쏟아부어도 사랑을 제공하는 데 악명 높게 서툼
          + Barrows는 좋은 예를 설정하고 있지만, 더 많은 시민들이 참여하여 부담이 몇몇 레인저에게만 지워지지 않도록 하는 방법이 필요함
     * 인터넷을 통해 인류에 대한 믿음을 새롭게 해주는 이러한 종류의 이야기를 찾음. 공유해줘서 고맙음
"
"https://news.hada.io/topic?id=19250","Delphi 출시 30주년 (1995~2025)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Delphi 출시 30주년 (1995~2025)

     * Delphi가 1995년 2월 14일 출시된 지 30년이 됨
     * 1995년 소프트웨어 개발 컨퍼런스(SDC) West 에서 공개되었으며, Turbo Pascal의 발전을 바탕으로 탄생
     * 오늘날까지 많은 개발자들에게 사랑받고 있음
     * 현재 Delphi 12 Athens 까지 출시되어 멀티 플랫폼 네이티브앱 개발 도구가 됨
          + 하나의 코드베이스에서 윈도우, 안드로이드, iOS, 맥, Linux 까지 지원
     * David Intersimone의 30주년 기념 글과 영상

Delphi 1.0의 탄생과 역사

  1994년 Borland 컨퍼런스에서 첫 공개

     * 장소: Walt Disney World Dolphin & Swan Hotels (플로리다)
     * 초기 코드명: Delphi95
     * 기술적 목표: Visual Basic의 간편함과 PowerBuilder의 강력함을 결합한 비주얼 RAD(빠른 애플리케이션 개발) 환경 제공

  1995년 2월 14일 공식 출시

     * 출시 행사: Miller Freeman SDC West 컨퍼런스 (샌프란시스코)
     * 출시 버전: Delphi 1.0 & Delphi Client/Server Edition
     * 출시 후 반응: 개발자들의 열광적인 반응, 대성공

Delphi 1.0의 특징과 차별점

     * Delphi는 당시 경쟁 제품인 Microsoft Visual Basic, PowerSoft PowerBuilder와 비교하여 강력한 기능을 제공했음

  Delphi 1.0의 핵심 기능

     * 고속 네이티브 코드 컴파일러
     * 양방향 개발 환경(비주얼 폼 디자이너 + 코드 편집기)
     * 객체 지향 프로그래밍(OOP) 지원
     * VCL(Visual Component Library) 제공
     * 구조적 예외 처리(Structured Exception Handling)
     * 실시간 데이터바인딩(데이터 인식 컴포넌트)
     * BDE(Borland Database Engine) 통한 SQL 데이터베이스 지원

   당시 Visual Basic과 PowerBuilder는 인터프리터 방식이었으나, Delphi는 컴파일된 네이티브 실행 파일 생성 가능

  Delphi 1.0을 Windows 3.1에서 실행하는 방법

     * DOSBox-X: 다운로드
     * Windows 3.1 이미지 파일: WinWorld
     * Delphi 1.0 ISO 파일: WinWorld
     * 설치 절차
          + DOSBox-X 설치
          + Windows 3.1 설치
          + Delphi 1.0 CD 마운트 후 설치
          + Windows 3.1 실행 후 Delphi 1.0 실행
     * 자세한 설치 가이드 및 동영상:
          + Stu’s Game Reviews – Windows 3.1 설치 가이드

  Delphi 1.0의 이스터에그

     * IDE에서 ""Help > About"" 선택
     * ALT 키를 누르고 ""DEVELOPERS"" 입력
     * 팀 크레딧 목록 표시
     * ALT + ""AND"" 입력하면 Anders Hejlsberg(Delphi 아키텍트)의 이미지 등장

Delphi의 발전 역사

  Delphi 주요 버전 및 출시일

     * Delphi 1.0 (1995) – Windows 3.1 지원, VCL 도입
     * Delphi 2.0 (1996) – 32비트 지원 (Windows 95/NT)
     * Delphi 3.0 (1997) – COM 및 ActiveX 지원
     * Delphi 4.0 (1998) – 향상된 IDE, 코드 템플릿 추가
     * Delphi 5.0 (1999) – 데이터베이스 연결 개선
     * Delphi 7.0 (2002) – 가장 인기 있는 버전 중 하나
     * Delphi XE 시리즈 (2010~2015) – 모바일 개발 지원
     * Delphi 10+ 시리즈 (2015~현재) – 멀티 플랫폼 개발 지원
     * Delphi 역사 및 기능 변경 사항

Delphi 30주년을 축하하며

     * Delphi는 지난 30년간 수많은 개발자들에게 강력한 RAD(빠른 애플리케이션 개발) 환경을 제공하며 여전히 사랑받고 있음
     * Delphi를 만든 모든 개발자, 사용한 모든 개발자들에게 감사드립니다!

Delphi 역사 관련 블로그 포스트 모음

     * It's 29! Delphi, I Mean (2024)
     * Delphi 28th Anniversary (2023)
     * 26 Years... of Delphi (2021)
     * Delphi is 25! (2020)
     * 24 Years of Delphi... and Delphi 10.3.1 is out Today! (2019)
     * 22 Years of Delphi and it Still Rocks (2017)
     * It's Delphi Birthday
     * Delphi 18 Birthday Video
     * 16 Years Ago in San Francisco
     * 15 Years of Delphi
     * 12 Years of Delphi

   캬~~ 추억의 델파이네요 ㅎ 4.0 버전부터 개발했었는데 당시 저사양 PC에서도 빠른 컴파일은 정말 인상적이었습니다.

   Delphi 26주년 몇년전에 한번 올린 적이 있네요.

   제가 2001년에 델파이로 작성한 프로그램을 얼마전에 다시 꺼내어서 윈도우 11에서 실행한적이 있는데, 재 컴파일 없이도 잘 돌더군요.
   윈도우가 하위 호환 지원을 잘 하기도 했겠지만 ㅎㅎ

        Hacker News 의견

     * 1997년부터 2004년까지의 Delphi 시대는 아마도 내가 가장 생산적이었던 시기였음. 수많은 앱을 작성했고, 컴파일 속도, VCL, IDE, 컴파일된 코드 성능 등이 성공에 기여했음. 세 가지 다른 Norton Commander 클론을 Delphi로 작성했으며, 가장 인기 있는 터키 소셜 플랫폼도 만들었음
          + Delphi를 느리게 만든 것은 Kylix(Delphi for Linux)와 Delphi.NET 같은 유행에 산만해진 것임. C#의 부상과 함께 쇠퇴했음. 아이러니하게도 처음에는 이들을 응원했지만, 결국 Delphi의 빠른 반복과 네이티브 성능이 부족했음
          + 당시에는 크로스 플랫폼 개발이 큰 시장을 가지지 못했음
          + 기본적으로 Delphi는 2000년대 초의 Golang과 같았음. 고수준의 언어로 자체 포함된 네이티브 바이너리와 네이티브 성능을 제공했음. 불행히도 길을 잃었음
     * 나이가 들면서 과거를 회상하는 장밋빛 안경 때문인지 모르겠지만, 데스크톱에서 웹, 그리고 모바일로의 전환 과정에서 무언가를 놓친 것 같음
          + 12살 때 Delphi와 VB6가 얼마나 접근하기 쉬웠는지 기억함. 모든 것이 설정되어 있어 문제 해결을 위한 코드 작성에만 집중할 수 있었음
          + 지금은 아이에게 코딩을 가르치려고 할 때, 의존성 문제, 보일러플레이트, 너무 많은 선택지 때문에 흥미를 유지하기 어려움. 이들은 실제 목표와 관련이 없음
          + 언젠가 Javascript나 Python이 이 자리를 차지할 수 있을지 모르겠음
     * 페이지가 다운된 동안, Delphi 1.0 설치 화면을 보라: 링크
     * 가능성이 있었던 언어임. Delphi 5와 6 시대에 많은 Delphi 작업을 했음. VB6와 C++ 사이의 좋은 중간 지점이었음
          + 불행히도 내 스타트업을 판매하기 어렵게 만들었음. 결국 Microsoft가 인수했지만, 많은 라운드가 있었음
     * Turbo Pascal과 Delphi를 사랑했음. 프로그래머로서 가장 생산적이었던 시기였음. 계속 업그레이드하며 매우 행복했지만, 가격이 미쳐버리면서 계속할 수 없었음. Lazarus가 그 공백을 잘 메우고 있지만, 끔찍한 문서가 문제임
          + Microsoft가 Anders Hejlsberg를 고용하고 C#으로 밀어붙였을 때 배신감을 느꼈음. .NET은 항상 악의적이고 비대함
     * Delphi가 생산적이었던 이유 중 하나는 ""진짜 언어""였고, 괜찮은 객체 모델을 가지고 있었기 때문임(VB보다 더)
          + 드래그 앤 드롭 ""고정"" 컴포넌트의 간단한 디스플레이 환경이 있었고, 레이아웃 매니저를 다루지 않아도 되었음. 대부분의 화면은 1024x768이 최대였음. 버튼과 컨트롤을 원하는 곳에 배치할 수 있었음
          + 객체 지향적이었지만, 많은 사람들에게는 VB와 같은 컴포넌트 툴킷이었음. 기본적인 힘은 있었지만, 대부분 불필요했음. 드래그, 드롭, 연결만 하면 됐음
          + DB 모델이 더 간단했음. 테이블 대신 raw SQL을 사용했음. VB와 MS Access도 비슷한 모델을 가지고 있었음. 데이터 바운드 컨트롤이 백엔드의 커서에 연결되었음. ORM과 싸울 필요가 없었음. 당시 dBase 세계관을 RDBMS 서버로 끌어올렸음
          + 단일 레이어(클라이언트/서버)였음. 앱과 SQL 연결만 있었음. 앱 서버, 트랜잭션 매니저, 데이터를 통과시키기 위한 네 가지 다른 레이어가 없었음. 데이터베이스에서 저장 프로시저를 사용하는 것이 최선이었음. 데이터 레이어가 없었음. 데이터 모델이 없었음. 폼과 데이터베이스 테이블 연결이 데이터 모델이었음
          + 사용하기에 매우 빨랐음. 빌드, 실행, 디버그가 빠름. Delphi에서 거의 기다린 기억이 없음
          + 흥미로운 점은 Java가 Delphi의 길을 가지 않았다는 것임. ""JVM을 가진 Delphi""가 아니었음. 어떤 Java 제품이 Delphi의 데이터 모델을 채택하려 했을 수도 있지만, 실제로는 아무것도 남지 않았음. JDBC에서 커서와 레코드 세트를 얻을 수 있었지만, Swing 컴포넌트에 연결하려면 모퉁이에 있는 망치와 끌이 필요했음
          + 자연스럽게 웹이 그 모델을 완전히 무너뜨렸음
     * 죽음의 포옹 (^_^) 여기에서 미러링됨: https://blog.marcocantu.com/blog/2025-february-delphi-is-30.html"">링크
     * JavaFX는 여전히 살아있고, 다양한 (서드파티) WISYWIG 편집기와 함께 지원되며, 바이너리로 컴파일 가능함
          + 물론 뉴스 레이더에는 없지만, 대부분의 제품이 더 이상 데스크톱에 집중하지 않기 때문임. 그래서 JavaScript를 위한 Electron 등이 있음
     * 1995년 Anders Hejlsberg와의 Delphi-1에 대한 인터뷰: https://www.theopenforce.com/2020/02/anders-hejlsberg-delphi-1995.html"">링크
     * Delphi로 프로그래밍을 배웠고, 20년 이상 사용하지 않았음에도 여전히 특별한 자리를 차지하고 있음
"
"https://news.hada.io/topic?id=19195","Show GN: 밝은 네이버 사전 (Bright Naver Dictionary)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Show GN: 밝은 네이버 사전 (Bright Naver Dictionary)

   네이버에서 사전을 가장 많이 사용하는데요, 외우고 싶은 단어를 anki에 복사 붙여넣기 할 때 html이 같이 긁어져서 어두운 테마가 같이 복붙이 되더라구요.

   네이버 사전도 네이버 내에서의 레거시 서비스인지 테마를 설정으로 바꾸는 부분이 없어 무조건적으로 브라우저 테마를 따라가게 돼있는데 그 브라우저 테마를 무시하고 네이버 사전을 라이트 테마로 바꿔주는 확장 프로그램입니다.

   모든 코드는
   https://github.com/jujumilk3/bright-naver-dictionary-chrome-extension
   에 공개돼있습니다. 감사합니다!

   네이버 사전은 csv 포맷으로 다운로드 불가능해요.

   '다음(daum)' 사전에서 단어장을 csv 다운로드해서 anki 에 '가져오기' 하는 것이 편해요.

   Anki 쓰시는 군요. VoCat 앱도 단어 검색 및 추가가 편해서 좋더라구요.

   ctrl+shift+v로 붙여넣기 하면 되지 않나요?

   얘기드리다가 생각났는데 그냥 naver dict -> anki extension을 만들었어도 됬겠다는 생각이 드네요 ㅋㅋ

   뜻이 여러개이거나 유사어가 많거나 예시문장이 긴 경우에 해당 붙여넣기로 하면 가독성이 떨어져서 제가 또 막 엔터랑 스페이스로 조절하는게 너무 귀찮더라구요. 바로 드래그 카피 페이스트 할 수 있게 하는게 목적이었습니다!

   더 일반적으로, 등록한 사이트마다 dark 여부를 적용하게 할 수는 없을까요?

   제가 찾은 다크모드 지원 사이트들은 전부 홈페이지 내부에 테마 설정모드가 있더라구요. 보통
    1. 브라우저 설정에 맞춤
    2. 라이트
    3. 다크

   이렇게 나뉘어서 사이트별로 해맬 필요가 없었는데 네이버 사전만 유일하게 이게 없어서 만들게 됐습니다. 다른건 아무래도 자체적으로 지원하는 걸 쓰는게 최선일것같습니다!!

   브라우저 레벨에서 사이트별 다크라이트 설정을 바꿀 수 있으면 좋겠네요. 크롬에서 그런 api가 나와야 할텐데...

   공감합니다.. 위키류는 다크테마와는 어울리지 않는것같아요
"
"https://news.hada.io/topic?id=19267","웹사이트가 CPU와 배터리를 낭비하는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        웹사이트가 CPU와 배터리를 낭비하는 방법

     * 문제 발견: 새 노트북에서 스피커에서 간헐적으로 화이트 노이즈가 발생하는 문제를 발견함. 조용한 방에서만 들을 수 있었음.
     * 원인 분석: PulseAudio의 오디오 싱크 상태를 확인한 결과, SUSPENDED 상태에서는 소리가 나지 않지만, IDLE 또는 RUNNING 상태에서는 화이트 노이즈가 발생함을 발견함.
     * Firefox의 문제: Firefox가 오디오 싱크를 사용하는 프로그램으로 나타났으며, 열려 있는 탭 중 소리를 재생하는 탭이 없었음에도 불구하고 화이트 노이즈가 발생함.
     * 원인: outlook.office.com의 알림 소리가 문제의 원인으로 밝혀짐. 이메일을 받을 때마다 화이트 노이즈가 시작되고, 탭을 새로 고치거나 Firefox를 재시작해야만 멈췄음.
     * 배터리 소모: 화이트 노이즈가 발생할 때 CPU와 배터리 소모가 증가함.
     * 해결책 시도: 이메일 알림을 비활성화하여 문제를 해결하려 했으나, 다른 웹사이트에서도 유사한 문제가 발생함.
     * HTML/JavaScript 오디오 처리: 오디오를 재생하는 방법으로 `` 태그와 WebAudio API가 있음. 문제의 원인은 AudioContext를 생성할 때 발생하는 것으로 확인됨.
     * Firefox와 Chrome의 차이: Chrome은 일정 시간이 지나면 배터리/CPU 낭비를 자동으로 중지하지만, Firefox는 그렇지 않음.
     * 해결책: AudioContext를 자동으로 중지하고 필요할 때 다시 시작하는 확장 프로그램을 개발함. 완벽하지는 않지만 충분히 효과적임.

        Hacker News 의견

     * 이 문제는 계획되어 있으며 중요함. 곧 해결할 예정임. 우선순위 문제로 아직 해결되지 않았음에 대해 사과함. 개인적으로 높은 우선순위를 가짐
          + 오디오 컨텍스트를 일정 시간 후에 멈추는 것보다 복잡하지만 해결할 수 있음. 다른 사람들이 했기 때문에 가능함. 타협할 준비가 되어 있음
          + 출처: Firefox 구현자 및 Web Audio API 표준 편집자
     * 오디오 컨텍스트를 열고 아무것도 재생하지 않는 웹사이트는 아마도 봇 탐지를 하고 있을 가능성이 있음
          + 다른 브라우저 엔진과 운영 체제는 오디오 처리를 다르게 구현함. 완전히 들리지 않는 소리를 재생하고 다시 녹음하면 서명이 생김
          + 이 서명을 사용하여 브라우저가 사용자 에이전트에 대해 거짓말을 하고 있는지, 헤드리스 모드에서 실행 중인지, 실제 사용자가 아닌지 확인할 수 있음
     * 같은 문제가 Android 기기에서도 발생하는지 궁금함
     * 이 백색 소음이 오랫동안 나를 미치게 했지만 추적할 수 없었음
          + 탭에 ""재생 중"" 아이콘이 표시되지 않으며, 탭을 음소거해도 소음이 멈추지 않음
          + Windows 볼륨 믹서를 사용하여 Firefox를 음소거해도 소음이 멈추지 않음
          + 편집: 데스크톱 사용자에게는 백색 소음이 계속 시작/중지되어 매우 성가심
     * 출력이 유휴 상태가 되면 디지털 SPDIF 신호가 동기화를 잃음. 재생이 시작되면 다시 동기화되는데 시간이 걸리며, 처음 몇 초의 오디오를 잃게 됨. 출력을 유휴 상태로 두지 않기 위해 데이터를 라인에 덤프하지 않고 출력을 열어두는 프로그램을 작성했음
          + 노트북에서는 에너지 절약이 더 중요함
     * Android Firefox에서 가끔씩 휴대폰이 하루에 10GB의 데이터를 소비하는 문제를 설명할 수 있을 것 같음. 뉴스 사이트가 오디오를 재생하고 광고를 반복적으로 로드하며 탭이 오디오 때문에 절전 모드로 전환되지 않았음. 반복적인 데이터 요금 때문에 Chrome으로 전환해야 했음
     * Chromium에서 이 중단을 처리하는 코드는 여기에 있음
          + 기본적으로 30초 정도의 침묵을 감지한 후 OS 오디오 장치에 의해 지원되는 싱크에서 null 싱크로 전환함
          + 참고: 오디오 장치와 다른 시계를 사용하기 때문에 컨텍스트가 최종적으로 사용될 때 특정 톤에서 왜곡이 발생할 수 있음. 해결 방법은 사이트가 기사에서 언급된 suspend resume API를 사용하는 것임
     * macOS에서도 비슷한 문제를 발견했음 (오디오 유도 전력 소모, 백색 소음 없음)
          + 현재 Mac의 coreaudiod가 아무것도 재생하지 않는데도 CPU의 20%를 사용 중임. 이 문제 해결 전까지 다른 브라우저로 전환할 생각이지만, Firefox를 포기하고 싶지 않음
          + 업데이트: 관련 있지만 다른 버그로 보임
     * 이 문제는 <a href=""https://www.dr.dk/"">https://www.dr.dk/</a>의 첫 페이지를 수정함
     * audioContext의 구현 방법을 잘 모르지만 매우 똑똑하고 동적임. 알림 소리를 재생하는 것은 D3로 SVG를 그리는 것과 같음. 더 효율적인 API에서 알림 핸들러와 같은 간단한 반복 작업을 등록할 수 있는 serviceWorker 훅이 있는지 궁금함
"
"https://news.hada.io/topic?id=19224","Zonos - 고품질 오픈 가중치 음성 합성 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Zonos - 고품질 오픈 가중치 음성 합성 모델

     * 200,000시간 이상의 다국어 음성 데이터로 학습된 Open Weight Text-To-Speech 모델
     * 상용 TTS 서비스와 ""동등하거나 뛰어난 음성 품질"" 및 ""자연스러운 표현력 제공""
     * 44kHz 샘플링 속도로 고음질 음성 출력
     * 음성 클로닝 지원: 단 몇 초의 참조 음성으로 특정 화자의 스타일을 정밀하게 복제 가능
     * 다양한 조절 기능: 말하기 속도, 음높이, 음질 및 감정(기쁨, 두려움, 슬픔, 분노 등) 제어 가능

주요 기능

     * Zero-shot TTS 및 음성 클로닝
          + 텍스트와 10~30초 길이의 화자 샘플을 입력하면 즉시 고품질 음성 합성 가능
     * 오디오 프리픽스 입력 지원
          + 텍스트와 함께 오디오 프리픽스를 추가하면 보다 정밀한 화자 매칭 가능
          + 속삭이는 음성과 같은 특정 음성 스타일을 구현하는 데 효과적
     * 다국어 지원
          + 영어, 일본어, 중국어, 프랑스어, 독일어 지원
     * 감정 및 음성 품질 제어
          + 감정 조절: 기쁨, 분노, 슬픔, 두려움 등 표현 가능
          + 세부 음성 조절: 속도, 음높이, 최대 주파수, 오디오 품질 조정 가능
     * 고속 성능
          + RTX 4090에서 실시간의 약 2배 속도로 실행 가능
     * Gradio WebUI 지원
          + 간편한 웹 인터페이스 제공으로 누구나 쉽게 음성 생성 가능
     * 간단한 설치 및 배포
          + Docker를 이용해 손쉽게 설치 및 배포 가능

   한국어가 없는 게 아쉽네요,,,

   한국어도 잘 되긴 합니다. 약간 어색하긴 하지만요.
"
"https://news.hada.io/topic?id=19220","전이 전 췌장암 조기 발견 저렴한 혈액 검사","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        전이 전 췌장암 조기 발견 저렴한 혈액 검사

저렴한 혈액 검사로 췌장암 조기 발견

     * 연구자들이 췌장암이 다른 부위로 전이되기 전에 감지할 수 있는 간단한 혈액 검사를 개발함. 이 검사는 질병의 낮은 생존율을 개선하기 위해 정기적인 스크리닝에 사용될 수 있음.
     * 대부분의 췌장암은 음식 소화에 사용되는 효소를 분비하는 관에서 시작되며, 초기에는 증상이 나타나지 않아 전이된 후에야 발견되기 쉬움. 2022년에는 전 세계적으로 약 467,000명이 이 질병으로 사망함.
     * 연구 공동 저자인 Jared Fischer는 췌장암을 조기에 발견할 수 있는 새로운 방법 개발의 필요성을 강조함.

  특징적인 단백질

     * Fischer와 그의 동료들은 초기 단계에서도 종양에서 활발히 활동하는 단백질 분해 효소인 프로테아제를 감지하는 데 집중함.
     * 연구자들은 혈액 내 프로테아제의 존재를 감지하기 위해 작은 펩타이드와 형광 분자가 부착된 자기 나노입자를 포함하는 나노센서를 개발함.
     * 나노센서는 혈액 샘플에 투입되어 프로테아제가 존재하면 펩타이드를 절단하여 형광 분자를 방출함. 연구자들은 자석을 사용해 절단되지 않은 나노센서를 제거하고 남은 형광 입자의 양을 측정함.
     * 이 나노센서는 췌장암 환자, 비암성 췌장 질환 환자 및 건강한 대조군의 냉동 혈액 샘플 356개를 테스트했으며, 건강한 개인을 98%의 정확도로 식별하고 췌장암 환자를 73%의 정확도로 식별함.
     * 연구자들은 나노센서가 암과 다른 췌장 질환을 가진 개인을 항상 구별할 수 있었음을 발견함.
     * Schürle-Finke는 프로테아제가 많은 신체 기능에 중요하기 때문에 나노센서가 혈액에서 명확한 종양 신호를 식별할 것이라고 기대하지 않았다고 밝힘. 73%의 민감도는 의사가 사용하기 전에 더 높아져야 하지만, 전반적으로 매우 유망하고 인상적인 결과임.

        Hacker News 의견

     * 이 그룹의 활동은 자금 부족으로 인해 중단될 가능성이 높음
     * 이 암으로 사망한 사람을 10명 이상 알고 있음
     * 친구가 진단 후 3개월 만에 사망했음
     * 이 검사가 현실화되고 저렴하게 제공되기를 바람
     * 췌장암 생존자로서 이 소식이 매우 반가움
     * 췌장암은 증상이 늦게 나타나 치명적임
     * CA19라는 혈액 마커가 췌장 문제를 나타낼 수 있음
     * 이 혈액 검사가 관련이 있는지는 모르겠지만, 이 질병에 대한 발전은 매우 필요함
     * 이미 시장에 췌장암 및 기타 암을 감지하는 혈액 검사가 있음
     * 미국에서 상업적으로 이용 가능한 유일한 검사는 Grail의 Galleri임
     * 이 범주의 검사에 대한 더 많은 정보가 있음
     * 많은 검사가 진행 중이며, 기술은 있지만 규제 및 증거 과정이 느림
     * 혈액 검사는 비타민 결핍, 호르몬 변화, 암 징후 등 다양한 이점이 있음
     * 왜 더 많은 검사를 포함한 혈액 검사를 더 적극적으로 하지 않는지 의문임
     * 이러한 서비스는 치과에 가는 것처럼 보아야 함
     * 이러한 검사를 증상이 없는 모든 사람에게 제공해야 하는지에 대한 의문이 있음
     * 췌장암과 같은 높은 사망률의 암에 대해 검사가 유용한지 의문임
     * Function Health에서 제공하는 검사인지 궁금함
     * 나노센서가 건강한 개인을 98% 정확도로 식별했음
     * 췌장암을 73% 정확도로 식별했음
     * 췌장암은 증상이 나타나기 전에 감지되어야 유용함
     * 매년 검사를 적용하면, 진양성 결과 하나당 200개의 위양성이 발생할 것임
"
"https://news.hada.io/topic?id=19249","Show GN: OneLLM: Samsung OneUI 스타일의 AI 채팅 애플리케이션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: OneLLM: Samsung OneUI 스타일의 AI 채팅 애플리케이션

  프로젝트 소개

   OneLLM은 Samsung OneUI를 모방한 AI 채팅 애플리케이션입니다. Groq를 활용하여 빠르고 정확한 AI 응답을 제공하며, OneUI와 같은 느낌의 인터페이스로 자연스러운 네이티브앱 같은 경험을 불러옵니다.

  주요 기능

    1. OneUI 디자인 시스템
          + Samsung OneUI의 Material Icon과 디자인 요소 적용
          + SamsungOne 폰트 적용
          + 직관적이고 깔끔한 사용자 인터페이스
          + 다크 모드 지원
    2. 고급 채팅 기능
          + 로그인 불필요
          + 채팅 히스토리 저장 및 관리
          + 대화 내용 검색 기능
    3. 커스터마이징 옵션
          + 다양한 AI 모델 선택 가능
          + Deepseek 증류 Qwen | LLama 기반 모델 지원
          + 글자 크기 조절
          + 설정 메뉴를 통한 개인화

  기술 스택

     * React.js
     * CSS3
     * Node.js

  특징

     * 모바일 친화적인 반응형 디자인 ( PWA )
     * 로컬 스토리지를 활용한 대화 내용 저장
     * 메시지 타임스탬프 표시

   이 프로젝트는 Samsung OneUI의 디자인 요소와 아이콘 시스템, 색상 시스템, 로그아웃, 인터랙션까지 갤럭시 기종에서 네이티브 앱인것처럼 만들고자 구현한 PWA입니다.
   데스크탑보단 모바일 UX에 초점을 두었기 때문에 폰에서 사용해보시는걸 추천드립니다

   OneLLM 의 소스코드를 깃허브에 공개했습니다!
   궁금한 분들은 이 링크로 들어가시면 됩니다

   https://github.com/sioaeko/OneLLM

   업데이트 안 된지 한참 되긴 했는데 이런것도 있어요

   https://github.com/SamsungInternet/OneUI-Web

   좋은 의견 감사합니다!
   OneUI 2 시절 UX 요소들까지만 반영된것같습니다
   OneLLM 은 OneUI 6 느낌을 최대한 구현하고자 만든거라
   저 시절 요소들과 차이가 있어보이지만 시간날때 한번 테스트해봐야겠네요

   height값을 100dvh로 변경하면 모바일 레이아웃에 더 잘 들어맞지 않을까 의견드립니다

   좋은 의견 감사합니다. css에 반영하여 적용하였습니다

   해외 접속 안 됩니다

   현재 일본,대한민국,미국에 대한 접근을 풀어놨습니다
   Cloudflare의 WAF 방화벽으로 일부 외국 국가에 대한 접근을 막아놨었습니다.
   혹시나 이외에 국가에서 접근하시고자한다면 말씀해주시면 풀어드리겠습니다

   터키(튀르키예) 부탁드려요. 터키 교민이라서요

   방화벽 예외에 터키 추가되었습니다

   미국이었는데 잘 됩니다!

   해외는 접속이 불가하고, 국내에서는 502 Bad Gateway입니다.

   현재 변경사항 수정떄문에 프로젝트를 잠시 껐습니다! 변경사항 적용후 다시 켜드리겠습니다

   현재는 온라인 상태로 전환되었습니다

   프론트엔드에서 groq api에 직접 apikey를 담아서 보내는데 괜찮을까요?
   데모긴 해도 apikey 노출이라 알려드립니다.

   좋은 의견 감사합니다!
   원래도 백엔드 프록시 서버로 요청을 처리하도록할 계획이 있었으나 Groq API는 개인적 이용에선 과금이 되지않기 때문에 API키가 노출된다해서 생기는 불이익이 거의 없다고 보시면 됩니다
   그렇기에 프론트엔드에서 직접적으로 키를 전달하는 구조로 제작하게 되었고 추후 azure나 OpenAI의 API키를 담아서 쓸수있는 버전을 제작하게되면 백엔드 프록시 과정을 추가할것으로 보입니다
"
"https://news.hada.io/topic?id=19283","YouTube의 새로운 빨간색: 브랜드 색상 재구성","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      YouTube의 새로운 빨간색: 브랜드 색상 재구성

     * 2005년 비디오 데이팅 사이트 아이디어로 출발한 YouTube가 지금은 전 세계 수십억 명이 매일 방문하여 다양한 콘텐츠를 시청하는 미디어 플랫폼으로 성장하였음
     * YouTube의 상징적인 빨간색 로고는 오랜 기간 브랜드 아이덴티티를 대표해 왔으나, 최근 좀 더 부드러운 빨간색과 의외의 마젠타 그라데이션이 도입되었음
     * 이는 작지만 의미 있는 변화로, 20주년을 맞은 YouTube가 브랜드를 어떻게 새롭게 유지하는지 보여주는 예시임

변화의 이유

     * YouTube 내부 아트 디렉션 및 디자인 팀은 20년간 사용된 빨간색을 진화시키고자 하였음
     * 기존의 요소 중 시대에 맞지 않는 부분을 연구한 결과, 색상이 상위 개선 과제에 속한다는 결론이 나왔음
     * 새로운 색상은 브랜드 정체성을 유지하면서도 더 현대적이고 접근성이 높은 방향으로 조정되었음

기존 빨간색의 문제점

     * 이전 빨간색(RGB 순수 레드)은 UI에서 너무 튀고, 특정 화면에서는 주황색으로 보이는 등 색상 일관성 문제가 있었음
     * TV 등 일부 디스플레이에서는 번인(burn-in) 현상을 유발하여 화면에 영구적인 자국이 남는 경우가 발생하였음
     * 빨간색이 강렬하기 때문에 잘못 사용하면 유저 경험에서 피로감을 줄 수 있다는 지적이 있었음

새로운 빨간색과 그라데이션 도입

     * 살짝 차가운 느낌의 빨간색으로 조정하여 화면 번인과 색상 왜곡 같은 기술적 문제를 완화하였음
     * 기존 YouTube의 유산을 존중하면서도, 접근성과 현대적 감성을 고려해 부드럽고 활기찬 톤이 되도록 설정하였음
     * 빨간색은 YouTube의 핵심 아이덴티티를 보여주는 주요 순간에만 사용하여 시각적 임팩트를 극대화하는 전략을 수립하였음
     * 여기서 그라데이션이 추가되어, 빨간색과 마젠타가 어우러지는 시각적 재미를 부여하였음
     * 로고, 프로덕트 아이콘, 진행 막대(progress bar), Like/Subscribe 버튼, Premium 배지, 라이브 링 등에 새롭게 적용되었음

디자인 전략과 적용 사례

     * 필요할 때만 강렬한 빨간색을 사용하여 브랜드 아이덴티티를 유지하면서 사용자의 피로를 방지하려 하였음
     * 다양한 팀과 협업해 새 색상과 그라데이션 적용 가능 범위를 탐색하고, 실제 제품 인터페이스 전반에서 일관성을 확보하였음
     * 세밀한 디자이너, 디렉터, 엔지니어와의 논의를 통해 그라데이션이 큰 화면에서 어떻게 보이는지, 접근성 기준을 충족하는지 등을 점검하였음
     * 구독 버튼이나 좋아요 버튼 등 중요한 액션에 브랜드 컬러를 할당하고, 그 외 기본 상태는 모노크롬 톤을 유지하여 정보 전달을 명확히 하였음

모션 디자인과 브랜드 아이덴티티

     * YouTube가 영상 플랫폼이므로, 모션을 통해 눈길을 끌고 기능적 안내를 제공하는 것이 중요하였음
     * 색상 업데이트와 함께 시작 애니메이션(startup animation)에서 로고가 확대·축소되며 그라데이션이 강조되는 효과를 추가하였음
     * 진행 막대(progress bar)를 좀 더 얇고 빠르게 보여주어 최신감과 시각적 즐거움을 살렸음
     * 마젠타 그라데이션이 들어간 토픽 채널 아이콘에도 작은 애니메이션을 도입하여 브랜드 통일성과 재미를 더하였음
     * 단색일 때는 형태 변화만 가능하지만, 그라데이션을 사용하면 미묘한 움직임만으로도 분위기를 조절할 수 있다는 장점이 있음
     * 사용자가 모션으로 인해 부담을 느끼지 않도록 ‘적절한 양의 설탕(재미를 주되 과하지 않게)’을 추구하였음

접근성 고려

     * 텍스트 대비를 확보하기 위해 빨간색과 마젠타의 밝기, 톤을 다양하게 나누어 UI 요소 크기와 상황별로 최적값을 적용하였음
     * 단일 색상만으로 정보를 전달하지 않도록 주의하였고, 중요한 버튼 등은 브랜드 컬러를 사용하되 기본 상태는 모노톤으로 두었음
     * 저사양 기기를 위해 모션을 제한하거나 화면 크기에 따라 모션 강도를 조절하는 등 적응형 프레임워크를 도입하였음
     * 가능하면 시각적 부담이 크지 않도록 모션 범위를 축소하고, 필요에 따라 애니메이션을 비활성화할 수 있도록 설계하였음

결론

     * 새로운 빨간색과 그라데이션은 YouTube가 20주년을 맞아 브랜드를 진화시키는 핵심 요소임
     * 빨간색 특유의 힘을 유지하면서도, 기술적·디자인적·접근성 문제를 개선한 결과물을 내놓았음
     * 모션과 그라데이션을 적절히 활용함으로써 YouTube가 더 재미있고 인간적인 플랫폼이 되도록 기여하였음
     * 이는 계속해서 변화하는 YouTube의 모습을 보여주며, 유저가 브랜드의 발전을 직관적으로 체감할 수 있도록 돕는 사례임

   아티클 마지막에 화면 전체가 마젠타로 바뀌고 나니 눈이 엄청 시리네요..

   진행바에 마젠타 그라데이션이 들어간 건 저는 개인적으로 뭔가 화면이 잘못된 것처럼 느껴졌습니다. 재밌는 건 그렇게 느낀 기기가 구글의 픽셀이었습니다.
"
"https://news.hada.io/topic?id=19185","지루한 기술은 오래된 것이 아닌 성숙한 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        지루한 기술은 오래된 것이 아닌 성숙한 기술

지루한 기술(Boring tech)의 의미

     * NetBSD가 ""지루하다""는 것은 최고의 칭찬임
     * 시스템 관리자가 원하는 것은 예측 가능성, 놀람이 아님
     * 기술이 지루하다는 것은 신뢰성이 높다는 뜻
          + 많은 사람이 테스트하고 최적화한 결과
          + 예상치 못한 동작이나 문서화 부족 문제 발생 가능성이 낮음
          + 문제 발생 시 도움을 받을 커뮤니티나 자료가 존재

기술 환경의 복잡성

     * 기술은 단독으로 존재하지 않으며 다양한 시스템과 상호작용 함
     * 구성 요소가 많을수록 예기치 않은 문제가 발생할 가능성 증가
     * 신기술이 항상 최선이 아니며, 검증된 안정적인 기술이 더 나은 선택이 될 수 있음
     * Kubernetes 클러스터를 몇 개의 가상 머신으로 대체하고 안정성을 높인 사례 가 존재

""지루한 기술""에 대한 반론과 해석

     * Robert Roskam의 주장
          + ""지루한"" 기술 = 오랫동안 존재해 온 기술이라는 가정은 틀릴 수 있음
          + 보편성이 곧 이해도를 보장하는 것은 아님
          + 오래된 기술이 항상 유지보수 가능한 것은 아님 (예: COBOL 시스템)
     * 반박
          + 오래되었다고 지루한 것이 아님 (예: Oracle은 복잡하고 유지보수 어려움)
          + BSD는 지루한 기술이지만, 리눅스만큼 보편적이지 않음
          + 나이가 아닌 성숙도(maturity) 가 중요

결론: 지루한 기술 = 성숙한 기술

     * 오래된 기술 ≠ 성숙한 기술
     * 성숙한 기술 = 코드, 문서화, 커뮤니티, 운영 경험이 축적된 기술
     * NetBSD가 지루하다는 것은 신뢰성과 안정성이 높다는 의미로 최고의 찬사

   지루한 기술이라는 표현은 다소 부정적인 느낌을 줄 수 있으니 성숙하다라는 표현이 괜찮네요.

   오라클은 복잡하고 유지보수하기 어려움 ㅠ

        Hacker News 의견

     * 지루한 기술이 좋다고 생각하는 이유는 제품의 실제 기술에 집중할 수 있게 해주기 때문임. SaaS 앱을 운영하면서 제품과 관련된 다양한 분야에서 최첨단 작업을 하고 있다고 생각함. 데이터베이스나 백엔드 프레임워크 같은 ""뒤에서"" 작동하는 것들은 최대한 지루하고 안정적으로 유지하는 것을 선호함. 프로젝트를 혼자 작업할 때 시간이 매우 제한적임. 고객이 신경 쓰지 않는 부분을 만지기보다는 제품의 흥미로운 새로운 기능을 개발하는 데 시간을 쓰고 싶음. 고객은 내가 Node 대신 Deno나 Bun을 사용하거나 NPM 대신 pnpm을 사용한다는 것을 알지 못하고 신경 쓰지 않음. 그들은 내 앱이 얼마나 잘 작동하는지, 어떤 기능이 있는지를 알고 있음
     * 이 의견에 동의하지만, 개인적인 경험에서 이와 반대되는 관점을 제시하고 싶음. 많은 상황에서 누군가가 자신의 방식, 즉 조직이 개인적인 소프트웨어 선호도를 선택하도록 원할 때 ""지루한"" 선택이라고 부름. 지루하다고 부름으로써 그들의 _선호_를 대다수가 받아들이는 성숙하고 명백한 결정으로 특징지으며, 다른 것은 단지 소프트웨어 엔지니어들이 반짝이는 것을 쫓는 것이라고 함. 진실은 거의 항상 더 복잡함. 두 가지 솔루션 모두 장단점이 있음. 서로 다른 사람들에게 더 많이 또는 덜 공감되는 가치를 교환함. ""지루하고 그래서 당연히 더 좋다""는 주장을 조심해야 함. 깊이 있는 논의 없이 다른 사람의 선호를 자신의 선호로 대체하는 방식이 되어서는 안 됨. 그렇지 않으면 실질적인 주장을 제시하지 않고 논쟁에서 이기려는 다른 오만한 시도와
       다를 바 없음
     * ""지루한"" 기술에 ""안정적""이라는 것을 추가하고 싶음. 특히 ""안정적""이라는 것이 ""충돌하지 않는다""는 의미가 아니라 ""변하지 않는다""는 의미임. 일반적으로 오래된, 확립된 것들에서 이를 볼 수 있음. 그러나 이를 보장하는 것은 없음. 이는 종종 기술의 관리자가 특정 행동을 취한 결과임. 이는 종종 하위 호환성 측면에서 설명될 수 있음. 이는 안정성을 얻기 위해 추구할 수 있는 명확한 행동임. 그러나 범위를 크게 제한하는 것으로도 볼 수 있음. 예를 들어, 우리는 규모에 대해 이야기하는 것을 좋아하지만, 결코 보지 못할 규모를 위해 설계하고 구축할 필요는 없음
     * 영원한 논쟁은 오래된 것 대 새로운 것, 지루한 것 대 흥미로운 것이 아님. 성숙함은 나이와 상관없이 성숙함임. 종속성을 업데이트할 때 시스템이 깨지거나, 모호한 기본값을 통해 예상치 못한 동작을 도입하거나, 추상화 계층을 탐색하도록 강요하는 시스템은 성숙하지 않음... (Spring과 Java 생태계를 보고 있음), 이는 오래되고 불안정함. 안정성, 예측 가능성, 잘 설계된 단순성이 성숙함을 정의함, 나이만으로는 아님. Python이 성숙하고 지루한가? 도구 체인 문제와 다양한 종류의 골칫거리가 있음... Go나 Rust 같은 새로운 언어는 이러한 도구 체인 문제를 모두 해결하고 최상의 방식으로 진정으로 지루하게 만듦
     * 지루한 것은 직장을 찾지 않는 한 좋음. 지루한 기술에 집착하면 점차적으로 직업 시장에서 자신을 제거할 위험이 큼. 다음 고용주는 당신이 훌륭한 비즈니스 가치를 제공했다는 것에 신경 쓰지 않음. 대부분은 반짝이는 새로운 것을 원함. 현재 고용주의 광고를 읽을 때 내가 고용될 것이라고 생각하지 않음
     * GitHub에서 프로젝트가 성숙한 것인지 죽은 것인지 구별하기 어려움. 커밋이 무엇을 위한 것이든, 누군가가 지켜보고 유지하고 있으며, 새로운 문제가 빠르게 해결될 가능성이 있다는 신호임. 이는 새로운 것이 항상 그곳에서 이점을 가질 것임을 의미함
     * 지루한 기술을 사용하여 승진하거나 고용된 사람은 없음. 내가 많은 구직 신청에 대한 답변을 받지 못하는 이유는 내가 한 작업의 대다수가 ""지루한"" 것이고, 내가 작성한 오픈 소스 코드의 대다수가 셸 스크립트이기 때문이라고 생각함. 모든 것이 훌륭하게 작동하고, 버그와 유지보수 비용이 전혀 없지만, 매력적이지 않음. 지적 엘리트주의가 내 역할을 정의했음 (""DevOps Engineer""는 문자 그대로 ""클라우드의 시스템 관리자""임, 그러나 우리는 시스템을 관리하는 것을 <i>부끄러워해야</i> 하기 때문에 그렇게 말할 수 없음); 내 이력서가 ""Python과 Shell""보다 ""Go와 Rust""로 더 많았다면 즉시 고용되었을 것이라고 확신함
     * 지루한 기술은 일을 끝내고, 우리가 해결하려는 문제에 집중할 수 있게 해줌, 대신 불필요한 일을 하지 않게 해줌
     * 이 주제에 대해 Ask HN을 하려고 했지만, 이 게시물이 내 질문을 하기에 훌륭한 게시물이라고 생각함. 당신이 사용할 수 없을 정도로 지루한 기술은 무엇인가? 얼마나 오래 사용했는가? 나에게는 Vim, C, Python, Fedora, mutt 같은 것들이며 25-30년 동안 사용해왔음. 당신은 어떤가?
     * 새로운 기술의 이점이 위험을 능가한다면 그것을 사용함. 도전은 증거를 평가하는 것임. 새로운 기술은 그들의 장점을 자랑하지만, 단점은 그렇게 크게 광고되지 않으며, 투자를 한 후에 종종 발견됨. ""지루한"" 또는 ""흥미로운""은 잘못된 프레이밍임

   지루한 관계는 오래된 것이 아닌 성숙한 관계

   예전에 긱뉴스에 올라왔던
   업계에서 10년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들 (https://news.hada.io/topic?id=19081)에서

   Java는 재미없어서 오히려 훌륭한 언어임

   라는 글이 생각나네요
"
"https://news.hada.io/topic?id=19240","Java 21의 Virtual Threads 소개 [48p 슬라이드]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Java 21의 Virtual Threads 소개 [48p 슬라이드]

     * Virtual Threads 개요
          + Virtual Threads (Loom project) 란
          + Platform Threads vs Virtual Threads - Blocking ?
          + Platform Threads 작동 방식
          + Virtual Threads 작동 방식
     * Rules & Best practices
          + Rule 1 - Create Threads
          + Rule 2 - Do Not use CompletableFuture
          + Rule 2 - Do use Virtual Threads
          + Rule 3 - Do not use Thread Pool
          + Rule 3 - Do use newThreadPerTaskExecutor
          + Rule 4 - Do not use FixedThreadPool for concurrency
          + Rule 4 - Do use Semaphore for Concurrency
          + Rule 5 - Do use ScopedValue
          + Rule 6 - Do use ReentranceLock instead of synchronized
          + Rule 7 - Do Structured Concurrency
          + Rule 8 - Test Virtual Threads
     * Spring Boot with Virtual Threads
          + Spring Boot MVC with Virtual Threads
          + Spring Boot MVC Async Tasks
          + RestController use Virtual Threads
     * Legacy Code 변경
          + 기존 시스템에 Virtual Threads 적용하기

   Scoped Value, Structured Concurrency는 아직 ""미리 보기"" 단계라서 Virtual Thread가 상용화되기까진 좀 오래 걸릴 것 같습니다.

   Jdk24에서 synchronized가 더이상 pinning을 발생시키지 않도록 수정되어서 rule 6도 다음 LTS 쯤에는 필요없을겁니다.
"
"https://news.hada.io/topic?id=19189","애플, 이제 2개의 계정 간 구입 항목 마이그레이션 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    애플, 이제 2개의 계정 간 구입 항목 마이그레이션 가능

     * 보조 Apple 계정에서 구입한 앱, 음악, 기타 콘텐츠를 기본 Apple 계정으로 마이그레이션 가능
     * 두 계정 모두의 기본 이메일 주소 또는 전화번호와 암호에 접근할 수 있어야 하며, 두 계정 모두 다른 사람과 공유되지 않아야 함

구입 항목 마이그레이션 시 발생하는 일

     * 보조 Apple 계정과 연결된 모든 지불 방법이 기본 Apple 계정으로 마이그레이션됨
     * 기존에 구입한 앱, 음악, 영화, TV 프로그램, 책이 기본 Apple 계정으로 이전됨
     * 보조 Apple 계정에서 현재 구독 중인 구독권이 기본 Apple 계정으로 마이그레이션
     * 보조 Apple 계정의 음악 보관함 데이터, 개인 맞춤화 프로필, 소셜 프로필, Apple Music 앱의 Apple Music Replay가 마이그레이션되어 기본 Apple 계정의 음악 보관함 데이터, 개인 맞춤화 프로필, 소셜 프로필, Apple Music Replay를 대체
     * iCloud 데이터는 보조 Apple 계정에서 마이그레이션되지 않음

마이그레이션후 보조 계정

     * 구입 항목 마이그레이션에 사용된 보조 Apple 계정은 더 이상 Apple 기기와 앱에서 미디어 및 구입 항목 용도로 사용할 수 없음

   구글도 해줘 ㅠㅠ

   와 이게 드디어 나오는군요...

   오 이게 되는군요? 굳이 안해줄법한 기능이라고 생각했는데

   아 이게 드디어 가능해지네요. 저 애플 계정이 완전 꼬여서 개인메일 + me.com 두개가 얽혀 있거든요
   아이튠스에 음악 구입한거랑 앱 구입한게 있어서 귀찮았는데 하나로 합쳐야 겠어요.

   근데 혹시.. 국가별 계정 통합은 안해주려나요 ㅡ.ㅡ;
   저 미국/한국/일본/인도 4개의 계정 쓰느라 귀찮은데 ㅎㅎ

   저는 미국/한국/일본/캐나다/호주/뉴질랜드 사용중입니다. ㅎㅎ
   국가마다 선출시가 있다보니 이렇게 되었네요.

   국가 별 다운 가능한 앱이 다르다보니 어렵지 싶네요 ㅠㅠ 저도 왜국계정이라 통합되면 편할텐데...
"
"https://news.hada.io/topic?id=19278","Open-Interface: LLM으로 컴퓨터를 제어하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Open-Interface: LLM으로 컴퓨터를 제어하기

     * OpenAI API 키를 이용해 컴퓨터를 제어할 수 있음.
          + 원한다면 다른 LLM 사용 가능. LiteLLM의 도움을 받을 수도 있음.
     * LLM과 통신하고 그 지시 내용(마우스/키보드 입력)을 흉내 낼 수 있음.
     * 예시:
          + ""오늘의 낱말 퍼즐 풀어줘.""
          + ""Google Docs 열어서 점심 식단 짜줘.""
          + ""웹 어플리케이션 코딩해줘.""
     * 오작동을 일으킬 수 있는 지시:
          + 공간 추론
               o 스프레드 시트 조작
          + 마우스 커서가 필수적인 복잡한 GUI 어플리케이션
     * 예정:
          + ""Garage Band로 베이스 기타 샘플 좀 만들어 줘.""
          + ""Sportify로 내 친구들의 음악 취향을 알아내서 오늘 밤 파티에 쓰일 재생 목록 만들어 줘.""
     * LLM에 따라 약 $0.0005 - $0.002 정도 소요될 것으로 예상.
     * 'Stop' 버튼을 누르거나 커서를 화면 모서리로 옮겨서 중단시킬 수 있음.
     * 만약 다중 모니터라면 주요 화면 안에서만 활동할 수 있음.
"
"https://news.hada.io/topic?id=19239","OBS 프로젝트, Fedora Linux에 법적 조치 하겠다고 위협","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 OBS 프로젝트, Fedora Linux에 법적 조치 하겠다고 위협

     * Fedora Flatpaks에서 제공하는 비공식 OBS Studio Flatpak 패키지가 제대로 작동하지 않음
     * 사용자들이 공식 패키지로 오해하고 불만을 제기하고 있으며, 이는 OBS Studio뿐만 아니라 다른 패키지에서도 발생하고 있음
     * Fedora Flatpaks가 명확한 opt-out 옵션 없이 배포되고 있어 사용자들이 불만을 가짐
     * OBS의 요청 사항(3주전. )
          + 해당 패키지를 제거하거나 제3자 패키지임을 명확히 표시할 것을 요청
          + 특히 Fedora가 공식 패키지를 덮어쓰는 경우 다운스트림 패키지가 작동하는지 확인하는 것은 업스트림의 책임이 아니어야 함
          + 또한 완벽하게 작동하던 플랫팩을 가져와서 깨버리고, 공식 빌드보다 높은 우선순위로 게시하는 것이 좋은 생각이라고 생각한 이유에 대해서도 설명해주기 바람
          + 우리는 Flathub에 게시되는 공식 플랫팩에 모든 것이 최대한 잘 작동하도록 하기 위해 엄청난 노력을 기울이고 있음
     * 2일전 새로 올라온 댓글
          + 이 시점에서 Fedora는 합리적인 토론에 관심이 없다는 것이 분명함
          + 그래서 현재 OBS Studio의 Fedora Flatpaks 배포는 ""적대적인 포크""로 간주하기로 함
          + ""당사의 이름, 로고, OBS 프로젝트에 속한 모든 추가 IP를 포함하되 이에 국한되지 않는 당사의 모든 브랜딩을 삭제해 달라는 공식적인 요청""을 함
          + 이를 준수하지 않을 경우 추가적인 법적 조치가 취해질 수 있고, 향후 영업일 기준 7일 이내(2025년 2월 21일 금요일까지)에 답변달라고 함
     * 1일전 Fedora의 패키지가 업데이트 됨

     ""end-of-life: The Fedora Flatpak build of obs-studio may have limited functionality compared to other sources. Please do not report bugs to the OBS Studio project about this build.""
     * Fedora의 입장
          + Fedora는 많은 자원봉사자들로 구성된 대규모 프로젝트이며, 모든 결정을 즉시 내릴 수는 없음
          + Fedora Flatpaks의 문제는 Fedora의 패키지 유지보수자와 Flatpak 유지보수자에게 보고되어야 함
          + GNOME Software에서 Fedora Flatpaks보다 Flathub을 우선시하는 제안이 논의 중임
     * OBS Studio의 입장
          + Fedora Flatpak의 Qt 버전 업데이트로 인한 문제 발생
          + Fedora와의 논의가 원활하지 않아 OBS Studio 측에서 법적 조치를 고려하게 된 것
          + Fedora Flatpak의 EOL(End of Life) 공지가 충분히 거리를 두는 조치로 간주됨

결론 및 향후 계획

     * Fedora와 OBS Studio 간의 논의가 계속될 예정이며, Fedora Flatpak의 문제 해결을 위한 장기적인 목표에 집중할 계획
     * Fedora는 OBS Studio의 IP 권리를 존중하며, 패키지 제거 또는 재브랜딩을 고려 중임

   소프트웨어 앱에서 flatpaks 가 높은 우선순위로 추천되는것이 불만스럽긴 합니다.
   우선순위를 지정할 수 있는 옵션이 있다면 좋겠어요.
   플랫팩 패키지들에서 한글 입출력 문제가 종종 있어서 꺼려지게 되더라구요.

        Hacker News 의견

     * 이 상황은 과거 Debian과의 xscreensaver 논쟁을 떠올리게 함
          + OBS가 EOL Qt를 사용하는 이유는 새로운 Qt의 수정되지 않은 회귀 때문임
          + Fedora는 EOL Qt 사용을 정당화할 수 없는 방치로 보고 새로운 Qt로 재패키징했으나, 이는 문제를 일으킴
          + xscreensaver의 경우, jwz는 오래전에 수정된 버그를 보고하는 사람들 때문에 화가 났음
          + Debian은 즉각적인 업데이트를 하지 않았고, jwz는 Debian이 xscreensaver를 배포하지 않기를 요청했으나 거절당함
          + jwz는 시스템 시간이 하드코딩된 값보다 충분히 지나면 알림을 띄우는 코드를 추가했고, Debian은 이 메시지를 제거할지 논의함
     * Fedora가 이미 Flathub에서 공식적으로 지원되는 OBS Studio의 자체 버전을 가지는 이유에 대한 의문
          + Flatpak은 모든 배포판이 프로그램 설치를 위해 불필요한 패키징을 피하기 위해 만들어졌음
     * Flathub에는 공식 패키지로 가장하는 비공식 패키지가 많았음
          + 이는 Flatpak을 진지하게 받아들이지 않은 주된 이유임
     * Fedora 사용자는 만족하지만, ""Software"" 애플리케이션은 항상 농담처럼 느껴짐
          + Flatpak을 밀어붙이는 것은 상황을 더 악화시킴
          + Software를 열 때마다 dnf를 위한 깨끗한 GTK 인터페이스일 것이라 생각하지만, 실제로는 그렇지 않음
          + 앱 목록을 신뢰하지 않게 됨
     * Fedora 팀의 이름 부르기와 소통 부족에 대한 더 많은 맥락을 아는 사람 있는지 궁금함
          + 사실이라면 Fedora 팀의 행동이 매우 부적절함
     * 최근 HN에서 많은 리눅스 관련 드라마가 발생함
          + 자유 소프트웨어 유지보수자를 위한 무료 갈등 해결 수업을 제공해야 할지도 모름
     * OSNews의 추가 논평/배경 정보 제공
          + https://osnews.com/story/141723/…
     * OBS가 GPL 라이선스이므로, 법적 조치는 상표 기반이어야 함
          + 패키지 저장소가 소프트웨어의 소유자나 후원자로 자신을 대표하지 않는 것이 명확하기 때문에, 이를 주장하기 어려울 것 같음
     * Flatpak 레지스트리에서 이를 삭제할 방법이 없다는 것이 더 놀라움
          + https://pagure.io/releng/issue/12586#comment-955583
     * 리눅스에서 소프트웨어 배포 상태는 항상 재앙적이었으며, 이러한 상황에도 불구하고 리눅스가 성공을 누린 것은 놀라운 기적임

   좀 봐주라 페도란뎅..
"
"https://news.hada.io/topic?id=19285","wger - 셀프 호스트 가능한 피트니스/워크아웃 트래커","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    wger - 셀프 호스트 가능한 피트니스/워크아웃 트래커

     * 무료 & 오픈소스 개인 운동, 체중, 식단 계획 관리 도구
     * 웹 기반으로 작동하며, 간단한 헬스장 관리 용도로도 사용할 수 있음
          + Flutter로 작성된 모바일 앱도 오픈소스로 제공
     * REST API 제공 → 다른 프로젝트, 툴, 플러터로 된 공식 앱 또는 자신의 앱과 손쉬운 연동 가능

운동 루틴 설계

     * 100개 이상의 운동 선택 가능
     * 주 단위 운동 계획 설계
     * 반복 횟수, 세트 수, 운동 시간, 거리 목표 설정
     * 단계별 가이드 제공 → 계획한 운동을 따라가기 쉬움
     * 운동 기록 저장 → 수행 결과 및 컨디션 추적 가능

균형 잡힌 식단 계획

     * 일주일치 식단 구성 가능
     * 2백만 개 이상의 음식 데이터베이스 제공
     * 개별 식사 & 주간 식단의 자동 영양 분석(칼로리, 단백질, 탄수화물 등)

진행 상황 추적

     * 운동 & 식단 기록 관리
     * 맞춤형 노트 추가 가능
     * 체중 기록 및 사진 로그 기능 지원
     * 캘린더 뷰 제공 → 과거 기록 한눈에 확인
"
"https://news.hada.io/topic?id=19286","WinterBreak - 이제 모든 Kindle 기기 탈옥 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  WinterBreak - 이제 모든 Kindle 기기 탈옥 가능

     * WinterBreak은 2025년 새해 첫날 HackerDude에 의해 출시된 Kindle 해킹 방법임
     * 킨들에서 킨들 스토어를 대체하도록 설계된 간단한 WAF 로더인 Mesquito를 기반으로 함

사전 준비 사항

     * PC가 필요함.
     * Kindle은 등록되어 있어야 함.
     * Kindle에 유효한 인터넷 연결 WiFi 네트워크가 저장되어 있어야 함.

설치 가이드

    1. 최신 WinterBreak 릴리스를 다운로드.
    2. Kindle의 비행기 모드를 켬.
    3. Kindle을 컴퓨터에 연결하고 WinterBreak.tar.gz 파일의 내용을 Kindle에 추출.
    4. Linux/MacOS 사용자는 숨김 폴더 .active_content_sandbox가 Kindle에 복사되었는지 확인.
    5. Kindle을 컴퓨터에서 꺼내고 재부팅.
    6. Kindle Store를 열고 비행기 모드를 끄라는 메시지가 뜨면 예를 클릭.
    7. WinterBreak 아이콘을 클릭하여 실행.
    8. 약 30초 기다리면 ""이제 핫픽스를 설치할 준비가 되었습니다""라는 메시지가 나타남.

문제 해결

     * Kindle Store에서 ""예기치 않은 오류""가 발생할 경우:
          + Kindle을 공장 초기화하고, 계정에 로그인하기 전에 WinterBreak 파일을 저장소의 루트로 이동.
          + 계정에 로그인하고 가능한 빨리 비행기 모드로 전환.
          + PC에 연결하여 .active_content_sandbox/store/resource/LocalStorage 경로의 캐시 디렉토리를 삭제 (LocalStorage 디렉토리가 없으면 이 단계 생략).
          + Kindle을 재부팅하고 Kindle Store를 열어 비행기 모드를 끄라는 메시지가 뜨면 예를 클릭.

        Hacker News 의견

     * KOReader는 PDF 읽기에 매우 뛰어나며, 기본 리더와 비교했을 때 인상적임
          + 적절한 가로 모드를 지원하며, 페이지 넘김 시 현재 페이지의 두 번째 절반으로 이동한 후 다음 페이지의 첫 번째 절반으로 이동함
          + 자동 회전과 PDF의 자동 자르기를 지원하며, 여백 조절이 가능함
          + 대비 조정도 지원함
          + 손으로 쓴 주석은 지원하지 않지만, PDF 읽기에는 완벽함
     * 오래된 Kindle Paperwhite 7을 KOReader로 되살림
          + 오래된 Kindle을 e-ink 날씨 대시보드로 사용할 수 있음
     * Kindle은 오랜 해킹 역사를 가지고 있으며, MobileRead Forums의 사용자들이 매우 헌신적임
          + 최근 새로운 해킹은 LanguageBreak로, 2023년에 출시되었으며 펌웨어 5.16.2.1.1 이하가 필요함
     * 최근 관련 논의:
          + Kindle이 2월 26일에 다운로드 및 전송 옵션을 제거함
          + Amazon이 Kindle 전자책의 ""USB를 통한 다운로드 및 전송""을 종료함
     * KOReader는 매우 인기 있는 앱으로, PDF 읽기에 최적화되어 있음
     * Amazon의 전자책 리더와 전자책 형식에 대한 DRM과 잠금이 과도하다고 느껴짐
          + 이익 동기는 이해하지만, 너무 과도함
     * 해킹된 Kindle이 Libby/Overdrive 등을 통해 도서관 책을 받을 수 있는지 궁금함
     * 일반 Kindle 사용자가 기기를 해킹하도록 유혹할 ""킬러"" 앱이 무엇인지 궁금함
          + Syncthing을 포팅한 사람이 있으며, 기기의 콘텐츠를 동기화하는 데 편리할 수 있음
          + 그러나 Calibre와 USB 케이블을 사용하는 것보다 여전히 번거로울 수 있음
     * 지금 Kindle을 구매할 가치가 있는지 궁금함
     * Kindle Fire 태블릿에는 작동하지 않아 아쉬움
          + 가격 대비 훌륭한 기기이지만, Amazon 서비스에 묶여 있음
"
"https://news.hada.io/topic?id=19227","비주얼 답변과 다단계 추론을 갖춘 AI 검색, Phind 2 출시","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  비주얼 답변과 다단계 추론을 갖춘 AI 검색, Phind 2 출시

     * Phind는 지난 6개월 동안 1억 3천만 개 이상의 검색 경험을 바탕으로 완전히 새롭게 재구성됨. 이번 업데이트에서 두 가지 핵심 개선 사항이 도입
     * 풍부한 시각적 답변 제공
          + Phind는 텍스트뿐만 아니라 이미지, 다이어그램, 인터랙티브 위젯, 카드 등 다양한 시각적 요소를 포함한 답변을 제공함.
          + AI 검색 도구 중에서 시각적 콘텐츠 배치를 완전히 제어하는 유일한 플랫폼으로, 답변이 더 직관적이고, 아름다우며, 읽기 쉽고, 재미있음.
     * 독자적인 정보 탐색 기능
          + Phind는 답변 도중 추가 정보가 필요하다고 판단하면, 자동으로 추가 웹 검색을 수행하여 가장 포괄적인 실시간 답변을 제공함.
          + 또한, Jupyter Notebook에서 코드를 실행하여 계산을 검증하는 기능도 지원하여 더욱 정확한 답변을 제공함.
     * Phind 2는 AI 검색의 새로운 기준을 제시하며, 더 스마트하고, 더 직관적이며, 더 강력한 검색 경험을 제공함.

        Hacker News 의견

     * GET 요청을 통해 질문을 추가할 수 있는 기능을 요청하는 의견이 있음. 로그인한 경우에만 작동하도록 하여 봇 요청을 방지할 수 있음
     * Phind-405B 모델을 사용해보려면 $20를 지불해야 하는 가격 정책이 불만스러움. 사용 기반의 가격 책정을 원함
     * Phind의 전체 경험을 시도해보았고, 다른 어떤 것보다 훨씬 뛰어남
          + 주식 NU에 대한 질문을 통해 주식의 미래 상승 가능성을 분석하는 데 도움을 받음
          + 관련 정보가 시기적절하게 제공되어 유용했음
          + 다른 LLM 제품들은 정보가 오래되어 쓸모가 없었음
     * Phind의 첫 번째 버전을 사용했었고, Perplexity와 ChatGPT가 개선되면서 다시 그쪽으로 이동했음. 여전히 경쟁력을 유지하고 있어 기쁨
     * 부정적인 숫자가 상상적인 숫자라는 질문에 대한 설명을 요청했을 때, 부정적인 숫자가 상상적인 숫자가 아니라는 답변을 받음
          + 부정적인 숫자가 물리적 객체의 양을 나타내지 않는다는 설명을 통해 상상적인 숫자로 간주될 수 있음을 이해함
     * 데이터 집계, 분석, 트렌드 찾기를 위해 이러한 도구를 사용하려고 했으나, 열 정렬 기능이 제대로 작동하지 않는 문제를 경험함
     * 미래의 방향성을 긍정적으로 바라보며, 모델 변화가 얼마나 중요한지 궁금해함
          + 사용자 쿼리에서 시작하여 관련 SVG 다이어그램을 요청하거나, 레이아웃 템플릿에 맞춰 설명 단계를 맞추는 등의 기능을 상상함
     * Phind를 많이 사용했었고, 시각적 설명이 훌륭하다고 생각함. Gemini를 사용해 ASCII 다이어그램을 출력했었는데, 이 기능을 확인할 예정임
     * Phind 모델과 새로운 UI에 대한 축하와 감사의 메시지를 전함
          + API를 통해 Phind 모델에 접근할 계획이 있는지 질문함
          + IntelliJ와의 통합을 원하며, VS Code 플러그인을 사용 중임
     * 과거에 인류가 알고 있는 거의 모든 것을 아는 사람들이 있었다는 이야기를 들었음
          + 지금은 다시 가능할 것 같은 느낌을 받음
          + 새로운 주제를 배우는 데 큰 도움이 됨
"
"https://news.hada.io/topic?id=19199","이모티콘을 통한 임의의 데이터 인코딩하기 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         이모티콘을 통한 임의의 데이터 인코딩하기

     * 임의의 데이터를 하나의 이모티콘으로 인코딩하는 것이 가능함
          + 유니코드는 텍스트를 코드포인트의 시퀀스로 표현하며, 각 코드포인트는 유니코드 컨소시엄이 의미를 부여한 숫자임.
          + 간단한 라틴 알파벳 텍스트의 경우, 유니코드 코드포인트와 화면에 나타나는 문자 간의 일대일 매핑이 존재함.
          + 다른 문자 시스템에서는 화면에 나타나는 문자가 여러 코드포인트로 표현될 수 있음.
     * 변형 선택자
          + 유니코드는 ""변형 선택자""로 불리는 256개의 코드포인트를 지정하며, 이는 자체적으로 화면에 나타나지 않지만, 이전 문자의 표현을 수정하는 데 사용됨.
          + 대부분의 유니코드 문자는 변형이 없으며, 변형 선택자는 변환 중에도 보존되어야 함.
          + 256개의 변형 선택자는 단일 바이트를 숨길 수 있는 방법을 제공함.
     * 데이터 인코딩
          + 변형 선택자 시퀀스를 연결하여 임의의 바이트 문자열을 표현할 수 있음.
          + 예를 들어, ""hello""라는 텍스트를 표현하는 데이터 [0x68, 0x65, 0x6c, 0x6c, 0x6f]를 인코딩할 수 있음.
          + 바이트를 변형 선택자로 변환한 후, 이를 기본 문자 뒤에 연결하여 인코딩함.
     * 데이터 디코딩
          + 디코딩은 인코딩과 유사하게 간단함.
          + 변형 선택자를 바이트로 변환하여 원래의 데이터를 복원할 수 있음.
     * 악용 가능성
          + 유니코드를 악용하는 것이므로 권장되지 않음.
          + 사람의 콘텐츠 필터를 우회하거나 텍스트에 워터마크를 삽입하는 등의 악의적인 용도로 사용될 수 있음.
     * 결론
          + 이모지를 사용하여 임의의 데이터를 숨길 수 있는 방법을 설명하며, 이는 유니코드의 변형 선택자를 활용한 것임.
          + 이 방법은 재미있지만, 실제로 사용하기에는 부적절할 수 있음.

        Hacker News 의견

     * Unicode의 PUA(Private Use Area)는 내부 및 커스텀 용도로 사용되며 외부 시스템에 전달되지 않음
          + 대부분의 시스템과 라이브러리는 이를 그대로 통과시키도록 설계됨
          + 이는 잠재적인 데이터 유출 경로가 될 수 있음
          + 대부분의 개발자는 ""국제화 문제를 피하기 위해 항상 Unicode를 사용하라""는 것 외에는 잘 모름
     * Unicode를 악용하는 것은 빙산의 일각에 불과함
          + Unicode 문자열을 수용하는 시스템에서 버퍼 오버플로우를 유발할 수 있음
          + 보통은 오류나 충돌을 일으키지만, 가끔은 예상치 못한 재미있는 결과를 초래할 수 있음
     * 과거 침투 테스트 경험에서 단순한 발음 구별 기호로 백엔드 웹 서버의 버퍼를 오버플로우 시킨 기억이 있음
          + 주로 서버를 충돌시키고 자동 재시작되었지만, 충분히 조작하면 특정 시스템이나 소프트웨어를 악용할 수 있음
     * Sanity는 Content Source Maps를 웹페이지의 실제 텍스트에 인코딩하는 데 이 기술을 사용함
          + 이는 편집자가 텍스트를 클릭하여 콘텐츠 구조를 쉽게 추적할 수 있게 함
          + 날짜, URL, ID 등 구문 분석이 필요한 항목에는 추가하지 않는 것이 좋음
     * LLM 출력 워터마킹에 이 기술을 사용하는 아이디어가 마음에 듦
          + 99%의 복사 붙여넣기 생성기를 쉽게 잡아낼 수 있음
          + 각 문자나 토큰에 얼마나 많은 정보를 삽입할지 궁금함
     * StegCloak은 AES-256-CTR을 통해 숨겨진 페이로드를 암호화하여 이 아이디어를 한 단계 더 발전시킴
     * LLM 출력 워터마킹 외에도 로그 확률 데이터를 패키징하는 데 사용할 수 있음
          + 생성 과정의 투명성을 제공하기 위해 각 토큰에 대한 확률 정보를 포함할 수 있음
          + OpenAI API 사양의 일부이며, 다른 엔진에서도 지원됨
     * 제목이 약간 오해의 소지가 있음
          + 기본 문자는 이모지가 아니어도 되며, 변형 선택자의 처리는 일반 문자와 동일함
          + 이모지와 함께 사용하면 더 재미있음
     * 토크나이저가 이를 잡아냄
     * 이전 직장에서 여러 악용 사례로 인해 사용자 닉네임 및 상태 메시지의 '문자'를 세기 위해 코드 포인터를 사용해야 했음
          + 다른 사용자를 탐색하는 데 9MB를 다운로드하고 싶지 않았음
     * Unicode 태그 문자는 ASCII를 반영하며 UI 요소에서 종종 보이지 않음
          + 일부 LLM은 숨겨진 텍스트를 ASCII로 해석하고 지시를 따르며, 심지어 이를 작성할 수도 있음
     * Microsoft가 Copilot에서 수정한 실제 악용 사례가 있음
"
"https://news.hada.io/topic?id=19193","구글 지도, 미국내에서 Gulf of Mexico를 Gulf of America로 명칭 변경","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글 지도, 미국내에서 Gulf of Mexico를 Gulf of America로 명칭 변경

     * 미국의 지리명 정보 시스템(GNIS)이 공식적으로 ""Gulf of Mexico""를 ""Gulf of America""로 업데이트
     * 이에 따라 Google 지도는 다음과 같이 명칭을 표시함:
          + 미국 사용자: 'Gulf of America'
          + 멕시코 사용자: 'Gulf of Mexico'
          + 그 외 지역 사용자: 'Gulf of Mexico (Gulf of America)'
     * 지도 앱에서 표시되는 명칭은 사용자의 국가 위치에 따라 결정됨:
          + 모바일 앱: SIM 카드, 네트워크, 로케일 정보를 기반으로 국가 위치를 판단
          + 웹 버전: 검색 설정의 지역 또는 기기의 위치 정보를 기반으로 명칭 표시
     * 이러한 변경 사항은 공식 정부 소스의 업데이트를 반영하기 위한 것임

   확인해보니 Gulf of Mexico (Gulf of America)로 보이는데, 한번 확인 부탁드립니다.

   헛 수정되었습니다. 이게 왜 바뀌었는지 모르겠네요 ㅠ

   멕시코만(아메리카만)
   구글지도 열어보니 본문과 다르게 멕시코만이 앞에 오네요.
   미국에서 열어보면 동해(일본해) 인지 반대인지 궁금하네요.

   OpenStreetMap 포럼의 토론 : Gulf of Mexico를 Gulf of America로 바꾸는 것에 대하여

   여기서도 GNIS 가 변경된다면 미국내에서만 Gulf of America 로 보이게 될 것이라고 했는데 그렇게 바뀌었네요. OSM도 이 형식을 따라 official_name:en-US 가 Gulf of America 로 변경 되었습니다.

        Hacker News 의견

     * ""이름 변경 전쟁""이 처음 시작되었을 때 어리석다고 생각했음. ""master""를 ""main""으로 바꾸는 것이 무지와 문해력 문제를 드러냈음
          + 이번에는 반대쪽에서 같은 어리석음을 보여주고 있음
          + 양쪽 모두 이 상황의 우스꽝스러움을 깨닫기를 바람
     * 나와 내가 아는 모든 사람들은 이 ""이름 변경""을 인정하지 않음. 어떤 지도 앱을 추천하는지 궁금함
     * 이름 변경은 아무 목적도 없고 정치적 쇼에 불과함
     * 적어도 ""Gulf of the United States""로 이름이 바뀌지 않았음
          + 미국은 미국만의 것이 아니라 대륙 전체를 의미함. 더 많은 스페인어/포르투갈어 사용 국가와 캐나다도 포함됨
          + 미국은 점점 더 성가신 괴롭히는 존재임
     * 다른 나라에서 다른 이름을 사용하는 경우가 있는지 궁금함. 언어 차이를 의미하는 것은 아님. 세계의 나머지 사람들이 둘 다 볼 수 있다는 것이 이상하게 느껴짐
     * Google이 트럼프를 너무 기쁘게 하려고 했음. 지리적 특징을 이름 짓는 것은 대통령의 일이 아니며, 전 세계를 위해서도 아님
          + 최근 누군가가 이런 일이 사람들을 두 그룹으로 나누는 테스트라고 지적했음: 순응하는 사람들과 다음에 올 것에 순응할 수 있는 사람들, 그리고 항의하는 사람들
          + 정치적 함의에 관심이 없더라도 Google이 전 세계에 이를 강요하는 것은 우스꽝스러움
          + 이미 OSM에 더 의존할 계획이었음. 이 과시를 반대하는 모든 사람들이 그렇게 하기를 권장함
     * Google이 이에 순응해야 했는지 궁금함. 그냥 무시하고 Gulf of Mexico로 유지할 수는 없었는지, 질문이나 의견에 응답하지 않을 수는 없었는지 궁금함
          + 충분히 확대하면 두 이름이 모두 표시됨
     * 관련 기사:
          + <i>Google Maps now shows the 'Gulf of America'</i>
          + <a href=""https://news.ycombinator.com/item?id=43007052"">https://news.ycombinator.com/item?id=43007052</a>;
     * 이 이름 변경의 임의성과 그 뒤에 있는 감정을 싫어하지만, 전 세계적으로 이름 변경은 일어남
     * Kagi maps는 여전히 Gulf of Mexico라고 표시함
          + 네이티브 안드로이드 앱이 있었으면 좋겠음. 해당 페이지를 PWA로 쉽게 설정할 방법이 있는지 궁금함
"
"https://news.hada.io/topic?id=19263","미국 정부, 최근 해고한 Nuclear Safety 직원 재고용에 어려움 직면","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              미국 정부, 최근 해고한 Nuclear Safety 직원 재고용에 어려움 직면

     * 미국 정부, 해고된 핵 안전 직원 재고용 시도
     * 미국 정부는 목요일에 해고된 핵 안전 직원들을 재고용하려 하고 있음. 이들의 해고가 국가 안보를 위협할 수 있다는 우려가 제기되었음.
     * 해고된 직원들은 에너지부 소속으로, 미국의 핵무기 비축을 설계, 건설 및 감독하는 책임을 맡고 있음.
     * 이번 해고는 도널드 트럼프 대통령이 연방 인력을 대폭 줄이려는 노력의 일환으로, 취임 첫날부터 시작된 프로젝트임.
     * 미국 언론에 따르면, 300명 이상의 NNSA 직원이 해고되었으나, 에너지부 대변인은 ""50명 미만""이 해고되었다고 주장했음.
     * 해고된 직원들은 무기 제조 시설에 배치된 직원들을 포함하고 있었음.
     * 트럼프 행정부는 해고를 철회하려고 시도했으나, 해고된 직원들이 연방 이메일 계정에서 차단된 후 연락이 어려워졌음.
     * 금요일에 NNSA 직원들에게 발송된 메모에는 ""일부 NNSA 수습 직원의 해고 통지가 철회되고 있지만, 해당 인원과 연락할 좋은 방법이 없다""라고 명시되어 있었음.
     * 지난주, 여러 기관에서 약 10,000명의 연방 직원이 해고되었음. 이는 가을에 백악관의 자발적 퇴직 제안을 수락한 약 75,000명의 직원에 추가된 수치임.
     * 트럼프는 국내외에서 지출을 줄이기 위해 노력하고 있으며, 교육부를 폐지하자는 주장까지 하고 있음.
     * 세계에서 가장 부유한 사람인 일론 머스크는 정부 효율성 부서(Doge)를 통해 연방 기관의 데이터를 검토하고 ""매수"" 제안을 구현하는 데 도움을 주고 있음.
     * 지난주, 트럼프 행정부는 수습 직원, 즉 일반적으로 1년 미만의 직위에 있었고 아직 직업 보호를 받지 못한 직원들을 거의 모두 해고하라고 명령했음. 이는 NNSA 직원들도 포함됨.
     * 이러한 움직임은 수십만 명의 사람들에게 영향을 미칠 수 있음.
     * 트럼프 행정부의 정부 규모와 지출 축소 노력은 여러 법적 도전에 직면해 있음. 1월 20일 대통령 취임 이후 60건 이상의 소송이 제기되었음.

        Hacker News 의견

     * DOGE 사건은 미국의 혼란과 과신을 드러내는 사례임
          + 규제의 부재가 무책임한 행동을 부추기는 것 같음
          + 미국은 자멸의 길을 걷고 있는 것 같음
          + 다른 나라들은 미국의 자멸을 지켜보고 있음
     * NPR의 보도가 사실이라면, 그 과정은 잔인하고 무지한 방식으로 진행되었음
          + DOGE 지지자들은 마치 아이처럼 중요한 결정을 내리고 있음
     * 최근 정부의 행동은 민주당이 다음에 집권할 때 의료보험 부문을 정부가 통제할 수 있는 이유를 보여줌
          + 대다수의 사람들이 이를 지지할 것 같음
     * 미국이 권위주의로 향하고 있다는 주장에 반대하는 사람들에게 트럼프의 발언을 제시함
          + 법 위에 있는 것이 권위주의의 특징임
          + 트럼프의 발언은 권위주의적 성향을 드러냄
     * 미국은 원하는 것을 조심해야 함
          + 이 상황은 마치 트위터 해고 사건과 유사함
          + 필요한 인력을 해고하고 다시 고용하는 실수를 반복하지 말아야 함
     * 스타트업과 국가의 가장 큰 차이점은 무엇인가?
          + 머스크는 큰 조직을 운영한 경험이 없음
          + 큰 조직을 운영할 때는 개선의 이점이 악화의 위험과 비교됨
     * 보수주의는 정부를 파괴하려는 정치 외부인의 진보적 권리와 유사함
          + 정부를 적으로 보고, 세금으로 인해 적대감을 가짐
          + 사람들은 부유층에 속하고 싶어하며, 부유층의 권력을 정당화하는 도덕을 수용함
     * 보수적 권리가 정부를 전복하고 파괴하는 이유는 그들이 권력을 유지하고 싶어하기 때문임
     * 핵 관련 인력은 일자리가 있는 곳으로 이동함
"
"https://news.hada.io/topic?id=19312","나의 LLM 코드생성 워크플로우","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           나의 LLM 코드생성 워크플로우

     * tldr: 스펙을 브레인스토밍하고, 계획을 세운 다음, LLM codegen을 이용해 실행함. 개별 반복 루프. 그러면 마법이 일어남
     * 나는 LLM을 이용해 다양한 소규모 제품을 빠르게 만들고 있음. 재미있고, 유용함
     * 그러나 잘못된 접근에 빠지면 시간을 크게 낭비할 수 있음
     * 많은 개발자들이 서로 비슷한 접근 방식을 가지고 있고, 아래는 나의 워크플로우임

     ""지금은 잘 작동하고 있지만 2주 후에는 작동하지 않거나 두 배로 작동할 수 있음""
     * 개발 하는 방법은 2가지가 있음
          + 그린필드 코드: 새로운 프로젝트를 시작
          + 레거시 모던 코드: 기존 코드베이스를 개선하거나 확장

Greenfield: 처음부터 새로 시작하기

     * “처음부터 시작하는” 상황에 잘 맞는 프로세스임
     * 아이디어를 브레인스토밍하고, 문서화하고, 작은 단계별 계획을 세운 뒤 코드 생성 툴을 사용해 구현하는 흐름임
     * Step 1: 아이디어 구체화
          + ChatGPT 같은 LLM에 아이디어를 설명하면서, 하나씩 질문을 유도해 구체적인 스펙으로 정제함
          + 마지막에는 상세한 스펙(spec.md)을 만들어 개발자에게 넘길 수 있는 문서 형태로 정리함
          + 필요하면 Deep Research 같은 툴로 아이디어에 대한 근거 자료를 얻을 수도 있음
     * Step 2: 계획 수립
          + 스펙을 기반으로, 더 강력한 “이해·추론” 모델에게 세부 단계별 청사진을 생성하도록 요청함
          + TDD 방식이든 아니든, 각 단계별로 작은 작업 단위를 만들고 순서대로 정리함
          + 이런 프로세스를 통해 prompt_plan.md와 todo.md를 생성함
               o prompt_plan.md는 코드 생성에 필요한 프롬프트 설계를, todo.md는 체크리스트를 포함함
          + 이 계획 수립은 15분 정도면 충분한 편이며, 나중에 참조하기도 쉬움
     * Step 3: 실행
          + Aider, Cursor, Claude 등 다양한 코드 생성·도움 툴을 사용해 실제 코드를 작성함
          + 대표적으로 Claude와 Aider를 예로 들 수 있음
          + Claude 방식
               o 미리 프로젝트 구조(boilerplate 등)를 셋업한 뒤, 단계별 프롬프트를 Claude에 입력함
               o 결과 코드를 IDE에 복사·붙여넣기하고 테스트를 수행함
               o 문제가 생기면 repomix 같은 툴로 현재 코드베이스를 Claude에 전달해 디버깅함
               o 워크플로우
                    # Repo 셋업 (boilerplate, uv init, cargo init, etc)
                    # Claude에 프롬프트 붙여넣기
                    # claude.ai 에서 IDE 로 copy & paste
                    # 코드 실행, 테스트 실행 등
                    # …
                    # 동작하면, 다음 프롬프트로 이동
                    # 동작하지 않는다면, Repomix 를 이용해서 코드베이스를 Claude에 보내 디버깅
                    # 이 작업을 반복(rinse repeat)
          + Aider 방식
               o Aider에서도 prompt_plan.md를 순서대로 입력해 작업함
               o 자동으로 테스트를 돌려주거나, 오류를 찾고 수정하는 과정을 지원함
               o 필요 시 대화형 디버깅을 통해 문제를 해결함
                    # Repo 셋업 (boilerplate, uv init, cargo init, etc)
                    # Aider 실행
                    # Aider에 프롬프트 붙여넣기
                    # Aider가 춤추는 것 보기 ♪┏(・o･)┛♪
                    # Aider가 테스트를 실행하거나, 앱을 실행해서 검증 가능
                    # 동작하면, 다음 프롬프트로 이동
                    # 동작하지 않으면, Aider와 Q&A 하면서 고침
                    # 이 작업을 반복(rinse repeat)
     * 결과
          + 이러한 방식으로 스크립트, Expo 앱, Rust CLI 등 여러 프로젝트를 짧은 시간 안에 구현해볼 수 있음
          + 미루고 있는 크고 작은 프로젝트가 있다면 한 번 시도해 보는 것을 추천
          + 새 언어나 기술을 배우며 빠르게 시도해볼 수 있다는 장점이 있음

Non-greenfield : 기존 코드에 대한 점진적/반복 작업

     * 이미 존재하는 코드베이스에 작은 작업을 반복적으로 적용할 때 쓰는 방법임
     * 전체적인 큰 계획보다, 작업 단위별로 구체적 요청과 결과를 주고받는 흐름임
     * 컨텍스트 확보
          + repomix 같은 툴을 사용해 코드베이스를 요약해 LLM에 전달할 수 있음
          + mise 등으로 반복 설정을 관리하며, output.txt라는 파일에 요약 결과를 저장함
          + 너무 큰 코드베이스의 경우, 필요한 부분만 요약하도록 조절함
     * 예시 워크플로우
          + mise run LLM:generate_missing_tests 같은 명령으로 테스트가 부족한 부분을 LLM에 파악시킴
          + Claude나 Aider로 해당 제안 사항(이슈)을 적용하고, 결과를 다시 테스트함
          + 이렇게 기존 코드베이스를 점진적으로 개선해 나감

주요 프롬프트 예시

     * Code review
       “시니어 개발자로서 코드를 꼼꼼히 리뷰해 줄 것. 줄 번호와 맥락 포함. 허술한 리뷰 없이 깊이 있게 살펴볼 것”
       “You are a senior developer. Your job is to do a thorough code review of this code. You should write it up and output markdown. Include line numbers, and contextual info. Your code review will be passed to another teammate, so be thorough. Think deeply before writing the code review. Review every part, and don't hallucinate.“
     * GitHub Issue generation
       “시니어 개발자로서 코드를 검토하고, 주요 이슈를 Github 이슈 형식으로 작성해 줄 것”
       “You are a senior developer. Your job is to review this code, and write out the top issues that you see with the code. It could be bugs, design choices, or code cleanliness issues. You should be specific, and be very good. Do Not Hallucinate. Think quietly to yourself, then act - write the issues. The issues will be given to a developer to executed on, so they should be in a format that is compatible with github issues“
     * Missing tests
       “시니어 개발자로서 코드를 검토하고, 누락된 테스트나 필요한 테스트를 구체적으로 제시해 줄 것“
       “You are a senior developer. Your job is to review this code, and write out a list of missing test cases, and code tests that should exist. You should be specific, and be very good. Do Not Hallucinate. Think quietly to yourself, then act - write the issues. The issues will be given to a developer to executed on, so they should be in a format that is compatible with github issues“

스키 ᨒ↟ 𖠰ᨒ↟ 𖠰

     * LLM을 활용해 빠른 속도로 코드를 작성하다 보면, 어느 순간 복잡성이나 문맥이 엉켜 혼란스러워짐
     * 계획 단계(예: Greenfield 프로세스)의 문서를 다시 확인하거나 테스트를 체계적으로 작성해 두면 도움이 됨
     * 빠르게 움직이는 만큼, 잠시 휴식을 취하거나 생각을 정리하는 과정을 가지는 것도 중요함

나는 매우 외로워 (｡•́︿•̀｡)

     * 대부분의 LLM 기반 워크플로우가 ‘1인 모드’에 최적화된 상황임
     * 팀 단위로 함께 코딩하려고 하면 충돌이나 머지 문제 등이 복잡해짐
     * 여러 사람이 동시에 LLM을 활용할 수 있는 ‘멀티플레이어형’ 협업 환경이 발전하기를 바람

시간

     * LLM을 통해 코드 작성 효율이 크게 높아졌지만, 토큰 처리 대기 시간으로 인해 생기는 ‘다운타임’이 있음
     * 이 시간을 이용해 다른 프로젝트 아이디어를 구상하거나, 음악을 듣거나, 대화를 나누는 식으로 활용함
     * 개인 생산성이 이전보다 크게 상승하는 경험을 하고 있음

Haterade ╭∩╮( •̀_•́ )╭∩╮

     * 많은 친구들이 “빌어먹을 LLM, 이거 완전 쓸모없음” 같은 태도를 보이며, 나는 이런 관점을 크게 신경 쓰지는 않음
     * 물론 나도 그 입장을 공유하지는 않지만, 의심의 눈초리가 필요한 건 사실임
     * AI를 싫어할 이유는 무궁무진하고, 내가 가장 걱정하는 건 전력 소모와 환경적 영향임
     * 그래도… ""코드는 흘러야 함"" 그렇지… 에휴
     * 만약 더 알고 싶지만 굳이 사이보그 프로그래머가 되고 싶지 않다면, 내 추천은 “의견을 바꾸지 말고, Ethan Mollick의 ‘Co-Intelligence: Living and Working with AI’를 읽어보라”는 것임
          + 이 책은 기술 무정부주의적 자본주의 스타일의 과장 없이, LLM이 주는 이점을 잘 풀어냄
          + 개인적으로 크게 도움을 받았고, 이 책을 읽은 친구들과도 훨씬 깊은 대화를 나눌 수 있었음
          + 적극 추천함

   Ethan Mollick의 ‘Co-Intelligence: Living and Working with AI'은
   3월에 '듀얼 브레인' 이라는 제목으로 출판 예정인 것 같네요

   Repomix라는 게 있었군요. 매번 복붙하고 있었는데..ㅠ

   감사합니다!

   다른개발자가 하는 욕도 llm이 대신 먹어줄지?

   Llm을 저는 아직 발전된 구글, 친절한 스택오버플로 정도로 사용하는 중인데, 더 잘 써먹을 방법이 있을지 고민해봐야겠네요.
   저는 어떻게 만드나 도 물론 중요하긴 한데, 왜 작동하나 를 AI랑 같이 고민하는 것도 중요한 듯합니다. 옛날 기술문서나 표준 같은 거 찾아볼때 LLM이 유용해요.

        Hacker News 의견

     * LLM은 새로운 프로젝트의 프로토타입을 빠르게 만들 수 있는 도구임. 그러나 기존 코드나 성숙한 프로젝트에 변경을 가할 때는 맥락이 부족하여 복잡성을 증가시키거나 불필요한 프레임워크를 추가하는 경향이 있음. LLM은 코드를 이해하는 것의 대체물이 아님.
     * LLM과의 협업에서 질문을 통해 맥락을 구축하는 것이 중요함. 이는 직접적으로 맥락을 만들기보다 효과적임.
     * 최근에는 LLM과 함께 모브 프로그래밍을 시도하고 있음. 한 LLM은 구현을 담당하고, 다른 LLM은 비판 및 개선을 제안함.
     * 프로젝트에 의견이 강한 프레임워크를 추가하지 않는 것이 바람직함. 이는 모델이 인식해야 할 맥락의 크기를 증가시키기 때문임. 예를 들어, Plasmo 대신 LLM에게 브라우저 확장 프로그램 설정을 맡김.
     * Cursor chat에서 시작해 더 나은 워크플로우로 발전한 사람들의 경험담을 듣고 싶음. 계획에 투자한 시간이 유익한지, 환각이 줄어들었는지, 전체적으로 시간을 절약했는지 궁금함.
     * 이 기사는 LLM을 올바르게 활용하는 방법을 설명함. 많은 사람들이 언어 모델과 효과적으로 소통하는 연습이 부족함. 저자는 LLM과의 소통을 마스터했으며, 이 워크플로우는 효율성을 극대화함.
     * LLM을 사용한 워크플로우에서 효율성을 극대화하려면 빠른 타이핑 속도, 올바른 판단력, 각 모델의 강점과 약점에 대한 친숙함이 필요함.
     * LLM을 사용한 코딩 도구는 재미있지만, 실제로 도움이 되는지 확인하려면 구체적인 목표와 마감 기한을 설정해야 함. LLM은 이러한 조건에서 실패할 가능성이 높음.
     * 많은 신입 프로그래머들이 프로그래밍의 명세 및 실행 계획 부분을 잊음. LLM을 성공적으로 사용하려면 명세 및 실행 계획을 만들도록 해야 함.
     * Claude에 대한 기대를 이해하지 못함. Apache Spark에 대한 질문에서 많은 환각이 발생함. Claude가 다른 모델보다 나은 이유를 이해하고 싶음.
     * 개인 개발자에게는 괜찮지만, 팀에서 같은 코드베이스를 분석하는 여러 LLM 인스턴스는 경제적이지 않고 위험할 수 있음. 팀을 위한 중앙화된 맥락을 제공하는 제품이 있는지 궁금함.
"
"https://news.hada.io/topic?id=19273","인터넷 애호가를 위한 Uchū 색상 테마","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         인터넷 애호가를 위한 Uchū 색상 테마

     * uchū 색상 팔레트
          + 인터넷 애호가를 위한 색상 팔레트로, 다양한 색상 변형을 제공함.
          + 색상은 oklch 색상 모델을 사용하여 정의되며, 이는 색상, 채도, 명도를 기반으로 함.
          + 각 색상은 다양한 명도와 채도로 제공되어 다양한 디자인 요구에 맞출 수 있음.
     * 색상 카테고리
          + 회색: 다양한 명도와 채도로 제공되어 중립적인 배경이나 텍스트에 적합함.
          + 빨간색: 강렬한 색상으로 주의를 끌거나 강조할 때 사용 가능함.
          + 분홍색: 부드럽고 따뜻한 느낌을 주며, 여성적이거나 로맨틱한 테마에 적합함.
          + 보라색: 창의적이고 신비로운 느낌을 주며, 독특한 디자인에 활용할 수 있음.
          + 파란색: 차분하고 안정적인 느낌을 주며, 신뢰감을 주는 디자인에 적합함.
          + 녹색: 자연적이고 신선한 느낌을 주며, 환경 관련 디자인에 활용 가능함.
          + 노란색: 밝고 활기찬 느낌을 주며, 주목을 끌고 싶을 때 사용 가능함.
          + 주황색: 따뜻하고 에너제틱한 느낌을 주며, 활기찬 디자인에 적합함.
          + 음양색: 명암 대비가 뚜렷한 색상으로, 극적인 효과를 줄 때 사용 가능함.
     * 활용 예시
          + 웹 디자인, 그래픽 디자인, UI/UX 디자인 등 다양한 분야에서 활용 가능함.
          + 색상 팔레트는 사용자가 원하는 분위기나 테마에 맞춰 쉽게 조정할 수 있음.

        Hacker News 의견

     * 색상 스킴이라는 단어의 사용에 혼란스러움. 색상 스킴은 Monokai처럼 잘 어울리는 소수의 색상 조합을 의미함. 이 경우는 단색의 색상이 많음. 어떻게 사용할지 모르겠음. 무시하려는 것은 아니고, 단지 혼란스러움
     * oklch()에 대해 처음 알게 됨
     * 읽기 분석을 해본 적이 있는지 궁금함. 배경과 전경의 대비가 낮아 장시간 읽기에 불편함
     * 왜 'uchu'라는 단어를 사용하는지 이유가 궁금함. 요즘 거의 모든 것(색상 스킴, AI 모델, 스타트업, 도구, 앱 등)이 무작위로 선택된 일본어 단어로 명명되는 것 같음. 하지만 왜 그런지 궁금함
     * 색상 스킴에 관한 웹사이트가 다크 모드 브라우저 설정을 무시하고, 밤중에 큰 화면에서 흰색 배경으로 눈을 자극함. 다크 리더 확장 프로그램이 작동하지 않게 만듦. 이 작은 시각적 공격이 약간의 분노 반응을 유발함. 결국 무엇에 관한 것인지 읽지 않고 빠져나옴. 인터넷을 사랑한다면 다크 모드를 존중해주길 바람
     * #을 #과 비교했을 때 파란색이 다른 색상보다 훨씬 더 생동감 있고 불투명해 보임. 모든 5를 서로 비교했을 때 파란색은 전기적이고 다른 색상은 틴트가 적용된 것처럼 보임. 모니터 감마와 색상 프로필에 따라 다를 수 있지만, 각 #이 순수 색상과 유사한 틴트를 갖도록 의도된 것인지 궁금함. 이는 RGB/CMYK와 유사한 시스템으로 보이며, Munsell 색상 시스템 구현을 통해 강도 스케일링에 기반한 색상 인식을 만듦
     * 이것이 바로 HN을 읽는 이유임. 정말 멋짐. Svelte 애호가로서 10/10임. 소셜 네트워크에서 행운을 빔. 거친 세상임. PS — Tailwind 플러그인을 보는 것도 멋질 것 같음 (v4에서는 변수를 복사하는 것만으로 가능할 것 같음. 레포를 자세히 보지는 않았음). 대단함
     * 색상이 매우 좋음. 하지만 나는 남성의 약 5%와 같이 약간의 적녹 색맹이 있음. 가운데 두 색상이 거의 동일하게 보임. 왼쪽과 왼쪽에서 세 번째 색상도 거의 구별이 안 됨. 모두에게 해당되는 것은 아닐 것 같음
     * 이 색상 팔레트를 사용하는 예제 페이지를 보여줄 수 있는지 궁금함
     * 이걸로 무엇을 해야 할지 모르겠음
"
"https://news.hada.io/topic?id=19215","Asahi Linux 프로젝트 리더 Hector Martin 사임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Asahi Linux 프로젝트 리더 Hector Martin 사임

     * Hector Martin은 2000년대 후반 Wii 홈브류 씬에서 활동하며, 비공식 앱을 실행할 수 있도록 하는 소프트웨어(현재의 “탈옥” 개념과 유사)를 개발하였음
     * 그러나 사용자의 대부분이 불법 복제 게임 실행을 원했고, 이에 대한 지나친 요구와 지속적인 제조사와의 싸움으로 인해 번아웃을 경험함
     * 이후 새로운 콘솔에서는 탈옥보다는 순수한 리눅스 포팅을 목표로 하였으며, 커뮤니티 구축에는 관심을 두지 않음

Asahi Linux 프로젝트 시작

     * Apple이 M1 칩을 발표했을 때, 이를 Linux로 구동하는 것이 개인적 '꿈의 프로젝트'라 생각하여 Asahi Linux 프로젝트를 시작함
     * Wii 시절과 마찬가지로 어려운 기술적 도전이 있었으나, 탈옥이 필요하지 않다는 점에서 더 매력적이었음
     * 초기에는 많은 지원과 후원을 받았으며, 불가능해 보이던 작업을 수행하여 x86 기반 노트북과 동등하거나 더 나은 리눅스 환경을 구축하는 데 성공함

어려움과 번아웃

     * 시간이 지나며 리눅스 커널 업스트리밍 과정에서 많은 좌절을 경험함
     * 사용자들의 과도한 요구가 다시금 부담이 됨. (예: “썬더볼트는 언제 지원되나요?”, “배터리 수명이 macOS보다 짧아요” 등)
     * 기부금과 후원은 프로젝트 초기 이후 점점 감소했으며, 이를 통해 본인이 하는 일이 정말 가치 있는 것인지 고민하게 됨
     * 2024년 개인적인 문제로 인해 많은 시간을 프로젝트에 투자하지 못했고, 사용자들의 요구는 줄어들지 않았음
     * Vulkan 드라이버와 x86-64 에뮬레이션 스택을 출시했지만, DP Alt Mode 등 중요한 기능의 개발이 여전히 과제로 남아 있었음

Rust for Linux 및 커널 커뮤니티 문제

     * Asahi Linux는 GPU 드라이버를 Rust로 개발했으며, 이는 메모리 안전성과 유지보수 측면에서 매우 효과적이었음
     * 그러나 Rust for Linux 프로젝트는 리눅스 커널 내에서 많은 저항을 받고 있으며, Linus Torvalds의 리더십 부족이 이를 더욱 어렵게 만들었음
     * 리눅스 커널 커뮤니티 내에서 일부 유지보수자들이 공개적으로나 비공식적으로 프로젝트를 방해함
          + 여러 서브시스템 유지보수자가 Rust 통합을 방해하거나 비협조적인 태도를 보였고, 이는 개발 의욕과 팀 사기에 큰 영향을 주었음
          + 일부 커널 유지보수자는 개인적 의견 표출이나 소셜 미디어 발언을 문제 삼으며 비판하거나, 비공개적으로 반감을 표출함
     * 오픈소스에서 공개적으로 문제를 제기해도 개선이 없고, 내부 정치나 파벌이 존재한다는 점이 드러났음
     * 프로젝트 리더 입장에서는 거짓된 지지 혹은 비협조적인 태도를 보이는 사람들과 협업하기 어려웠음
     * 이러한 문제로 인해 그는 Apple ARM 지원 관련 리눅스 유지보수자 역할을 사임했으며, 리눅스 커널 커뮤니티와 더 이상 협력하지 않겠다고 선언함

Asahi Linux 프로젝트 리더 사임 배경

     * 프로젝트의 계속되는 요구 사항과 커뮤니티의 갈등, 개발 환경의 부담이 누적되어 번아웃 상태가 됨
     * 지속적인 스트레스와 프로젝트에 대한 열정 저하로 인해 Asahi Linux 프로젝트 리더로서 즐겁게 일할 수 없는 지경에 이르렀음
     * 프로젝트는 여전히 유지되겠지만, 본인은 리더직을 내려놓기로 결정

미래 계획

     * 프로젝트는 기존 팀원들이 계속 운영할 예정이며, 후원자들에게는 Asahi Linux OpenCollective로 지원을 전환할 것을 권장함
     * 개인 Patreon 계정은 중단될 예정이며, GitHub Sponsors 후원자들에게도 알림이 갈 예정임
     * 앞으로는 개인적인 취미(음악 제작, 친구 및 가족과의 시간, 게임 및 영화 감상 등)를 다시 즐기고자 함
     * 원격 근무 가능한 컨설팅 및 유연한 시간제로 일할 기회를 찾고 있으며, 관심 있는 기업이나 개인은 marcan@marcan.st로 연락 가능함

감사의 말

     * Asahi Linux 팀원들에게 깊은 감사를 표하며, 이들의 도움 없이는 지금의 성과를 이룰 수 없었을 것이라 밝힘
     * 개인 후원자들에게도 감사 인사를 전하며, 이들의 지원이 프로젝트를 현실로 만드는 데 큰 역할을 했다고 강조함

   헉 지난번 그 사건이 떼굴떼굴 굴러가네요 ㅠㅠ;;

   제 집에서 저전력 무소음 무발열로 잘 돌아가고 있는 m1 맥미니 서버도 이것때문에 구축할 수 있었는데 ㅜㅜ 슬프네요

        Hacker News 의견

     * ""권리를 주장하는 사용자들이 등장했음""이라는 의견이 있음
          + Thunderbolt 기능이나 USB-C 모니터 사용, 배터리 수명 등의 불만이 제기됨
          + Quora 초기 시절의 ""친절하고 존중하자""는 정책이 오픈 소스 커뮤니티에도 도움이 될 수 있을 것이라는 의견이 있음
          + Marcan의 노력에 대한 칭찬과 감사의 표현이 있음
     * Hector의 상황에 대한 이해와 공감이 있음
          + 개인적인 어려움이 직업적 문제와 연결될 수 있다는 점이 이해됨
          + Mastodon 게시물에 대한 비판을 인정하지만, 거짓된 의도를 가진 사람들과는 일할 수 없다는 입장임
     * Hector의 공격적인 태도가 사람들의 반응을 유발함
          + 사람들은 비판적인 태도에 대해 클리크를 형성하거나 뒤에서 이야기할 수 있음
          + 소셜 미디어에서의 비난 캠페인 위협은 적절하지 않음
     * Ted Tso'o의 이메일이 흥미롭다는 의견이 있음
          + Linux 유지 관리자의 어려움을 설명하고 있음
          + 코드 수용에 대한 적대적인 태도가 이해됨
          + Rust에 대한 부정확한 비판이 있음
     * 프로젝트에 너무 많은 자신을 투자한 Hector에 대한 이해가 있음
          + 개인적인 시간을 그리워하며, 스트레스를 줄이기 위한 활동이 필요함
          + Marcan의 건강과 행복을 기원함
     * Asahi Linux에 대한 비판이 있음
          + Thunderbolt 기능이나 USB-C 모니터 사용, 배터리 수명 등의 문제로 인해 일상적으로 사용하기 어렵다는 의견이 있음
          + Asahi Linux 팀의 성과를 인정하지만, 비판의 언어가 부드러워질 필요가 있음
     * Rust로 드라이버를 작성하는 것과 관련된 어려움이 있음
          + Asahi 팀이 Linux 대신 Rust 친화적인 다른 OS로 전환할 가능성을 고려할 수 있음
     * Hector의 글에서 일방적인 사고가 감지됨
          + 비판과 방해를 개인적으로 받아들이는 경향이 있음
          + 불교의 원칙에 따라 결과에 대한 집착을 내려놓는 것이 필요함
     * Asahi Linux가 개인적으로 만족스러운 경험을 제공했다는 의견이 있음
          + 기부를 고려하고 있으며, 프로젝트의 가치에 대한 인식이 있음
     * 오픈 소스 프로젝트의 어려움에 대한 공감이 있음
          + 새로운 아이디어에 대한 강한 반발이 있을 수 있음
          + 개인적인 공격이나 괴롭힘을 경험한 사례가 있음
     * 권리를 주장하는 사용자들을 무시하는 것이 필요하다는 의견이 있음
          + ""아무도 내 제품을 사용하지 않아도 괜찮다""는 태도가 중요함

   2021-01-07 Asahi Linux : 애플 실리콘용 리눅스 프로젝트
   2022-03-21 Asahi Linux 알파 릴리즈 - 애플 M1칩용 리눅스
   2024-02-17 아사히 리눅스의 애플 실리콘 OpenGL 지원, 공식적으로 애플을 초월
   2024-10-11 Asahi Linux에서의 AAA 게임 플레이
   2024-11-02 애플 실리콘에서의 Linux 구현, Alyssa Rosenzweig와의 인터뷰

   4년에 걸쳐 열심히 했는데, 결국엔 이렇게 되네요.

     ""사용자들의 과도한 요구가 부담됨""

   프로젝트가 오래되면 사람들이 맡겨놓은 것 없는데 뭔가를 요구하는 상황이 벌어지는 일이 늘어나죠.

   그리고 중간에 리눅스 커널 커뮤니티와의 충돌 부분은 리눅스커널 러스트 논쟁, 다시 불타오르다 도 참고 하세요.
"
"https://news.hada.io/topic?id=19255","체육 수업에서 컵 쌓기를 했다면, 우리 아빠를 탓하세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     체육 수업에서 컵 쌓기를 했다면, 우리 아빠를 탓하세요

미국의 수많은 초등학생들이 체육 수업에서 컵 쌓기를 했던 이유

     * 1998년, 한 부부가 도쿄에서 수입한 120,000개의 플라스틱 컵 을 집 지하실에 쌓음
     * 이 컵들은 바닥에 구멍이 뚫려 있어 음료를 마시는 용도로는 쓸 수 없음
     * 그들의 목표: 아이들이 컵을 특정 패턴으로 빠르게 쌓는 것이 재미있다고 믿게 만드는 것
     * 전 세계 장난감 기업 2위인 Hasbro조차 실패한 일을 해내야 했음

스포츠 스태킹의 기원과 확산

  1. 체육 시간에 컵을 쌓게 된 이유

     * ‘스포츠 스태킹’(Sport Stacking)은 1980년대 캘리포니아의 한 청소년 센터에서 탄생
     * 1990년, Johnny Carson의 토크쇼에 소개되며 유명세를 얻음
     * Hasbro가 이를 상품화했지만 시장에 정착하지 못하고 사업 철수
     * 이후, 덴버의 체육 교사이자 전직 광대였던 Bob Fox가 이를 다시 발전시킴

  2. Bob Fox: 체육 교사이자 창업가

     * Bob Fox는 원래 전문 광대였으며, 고등학교 연극 교사로도 활동함
     * 이후 초등학교 체육 교사가 되어 학생들에게 외발자전거 타기, 저글링 등을 가르침
     * 1995년, 체육 교사 워크숍에서 컵 쌓기를 처음 접하고 직접 가르치기 시작
     * 학생들의 뜨거운 반응을 보고 본격적인 사업으로 확장하기로 결심

  3. 일본 Hasbro에서 폐기 예정이던 컵을 수입

     * Fox 부부는 일본 Hasbro의 창고에 남아있던 Kup Stax 컵 10,000세트를 매입
     * 첫 투자금 43,000달러는 부부의 전 재산이었음
     * 구매 후 10개월 만에 모든 제품을 완판
     * 컵이 매진되자, 직접 제조하기 위해 Speed Stacks LLC 창립(1998년)

스포츠 스태킹의 글로벌 확산

  1. 체육 교사들을 통한 확산 전략

     * Fox 부부는 미국 전역의 체육 교사 컨퍼런스를 직접 방문
     * 수천 개의 학교에서 체육 시간에 스포츠 스태킹을 도입하도록 유도
     * 2002~2011년 사이, 미국 내 5,000개 이상의 학교에서 정규 체육 프로그램으로 편성

  2. 미디어와 바이럴 효과

     * Fox 부부의 자녀들이 각종 TV 프로그램에 출연하며 종목 홍보
          + The Today Show, LIVE with Regis and Kelly, Ellen DeGeneres Show 등
     * 2005년, ESPN에서 세계 스포츠 스태킹 챔피언십 생중계
     * 유명 브랜드들도 참여:
          + Comcast, FritoLay, 영국 Freekee Soda 등 광고 출연
     * 2008년, 한 스포츠 스태킹 영상에서 나온 ""OH MY GOSH!"" 샤우팅이 Skrillex의 ‘Scary Monsters and Nice Sprites’ 샘플로 사용됨
          + 현재 5억 회 이상 스트리밍 기록

  3. 세계 스포츠 스태킹 협회(WSSA) 창립

     * 스포츠 스태킹의 경쟁 요소를 강화하기 위해 공식 규칙 및 대회 시스템 구축
     * 타이머 장치인 StackMat을 개발해 개별 기록 측정 가능
     * 2004년부터 세계 챔피언십 개최, 독일·일본·호주 등 국제적 확산
     * 2025년 현재, 세계 기록: 4.739초(사이클 패턴 기준)

스포츠 스태킹이 남긴 것

  1. 전 세계적인 커뮤니티 형성

     * 유소년 스포츠로 자리 잡으며, 다양한 국가에서 청소년들이 참여
     * 자폐 아동 및 특수 교육 학생들에게도 유익한 활동으로 인정
     * “Positive Pyramids”라는 슬로건 아래, 건강한 경쟁 문화 조성

  2. Fox 가족의 성공적인 사업

     * Speed Stacks는 2015년 이후 직원들에게 경영권을 이양
     * Fox 부부는 조기 은퇴 후 취미 생활을 즐기며 지냄
     * 현재도 전 세계 수천 개 학교에서 스포츠 스태킹이 체육 교육 프로그램으로 운영 중

  3. 한때 유행으로 끝났을 스포츠를 지속 가능한 사업으로 만든 사례

     * 기존의 장난감 유행과 달리, 스포츠 종목으로 발전시켜 장기적 성공
     * 수많은 아이들에게 잊을 수 없는 학창시절의 기억이 됨

결론: 체육 시간에 컵을 쌓았던 이유

     * 1998년, 한 광대 출신 체육 교사가 버려진 장난감에서 가능성을 봄
     * 교육자들을 설득해 학교에서 스포츠 스태킹을 체육 교육으로 정착
     * 단순한 놀이가 아니라, 전 세계적인 스포츠로 발전
     * 그래서, 당신이 초등학교 체육 시간에 컵을 쌓았던 이유는 바로 Bob Fox 덕분임

        Hacker News 의견

     * 정말 멋지고 잘 쓰인 글임. 글이 길다는 것을 거의 느끼지 못했음. 이 게임을 해본 적도 없고 존재조차 몰랐지만, 이런 방식으로 역사를 기록하는 사람들이 더 많았으면 좋겠다는 생각이 듦
          + 그의 부모님이 대단한 분들인 것 같음. 그의 아버지(그리고 아마도 그의 삼촌)의 열정과 기업가 정신의 1/10이라도 가졌으면 좋겠음
          + 이해하지 못한 부분이 있음. 그들이 함께 일하지 않았다는 의미인지, 샘플 세트를 보내는 것이 무례한 것이었는지 잘 모르겠음
          + 그는 스포츠의 창시자인 Wayne Godinet와 협력하려고 $20,000 상당의 제품을 구매하려는 선의의 노력을 했음. 이는 일본 선적 재판매로 얻은 수익의 거의 3분의 1이었음. Godinet는 상품 및 배송 비용 청구서와 함께 두 개의 샘플 세트를 보냈음
     * 뉴질랜드의 스포츠 팀 이름이 재미있음
          + 휠체어 럭비 팀은 Wheel Blacks, 농구 팀은 Tall Blacks, 크리켓 팀은 Black Caps로 불림
          + 배드민턴 팀은 Black Cocks로 불리려 했던 적이 있음
          + 축구 팀은 All Whites로 불림
          + 여성 스포츠 팀은 Silver Ferns에서 유래함. 예를 들어, 럭비 팀은 Black Ferns, 크리켓 팀은 White Ferns, 축구 팀은 Football Ferns로 불림
          + Fern Cocks라는 배드민턴 팀이 있었는지는 확실하지 않음
     * 지역 학교의 과도한 지출로 인해 이 가족이 세금으로 전국을 여행했다는 생각이 듦
          + 코로나 ESSR 기금이 학교에 제공되면서 이런 프로그램으로 공립학교를 속이는 것이 가능해졌음
          + 지역의 작은 PreK-4학년 학교가 $25k의 비디오 게임 시스템을 구입했음
          + ESSR 기금을 사용하는 방법에 대한 마케팅 자료를 가진 회사들이 있음
     * 잘 쓰인 글이며, 유행의 시작을 제대로 기록한 드문 예시임
          + 보통 이런 것들은 도시 전설로 사라지기 전에 제대로 기록되지 않음
     * Skrillex의 ""Scary Monsters and Nice Sprites""의 유명한 ""Oh my gosh!"" 비명은 2008년의 바이럴 스포츠 스태킹 비디오에서 샘플링된 것임
          + 이 이야기는 잘 맞아떨어짐
     * SpeedStacks 타이머는 경쟁적인 큐빙에서 많이 사용됨
     * 이 ""스포츠""에 대해 잘 알지 못했지만, 온라인에서 몇몇 비디오를 본 적이 있음
          + 열정적인 광대/학교 교사가 위험한 사업 결정을 내리며 인기를 끌게 된 것이 흥미로움
          + 그들이 수천 개의 컵을 지하실에 두고 파산하지 않아서 다행임
     * 그의 여동생의 비디오를 본 적이 있음. 속도에 감명받았음
     * 아들과 함께 해봤음. 둘 다 재미있었고 공평한 조건에서 경쟁할 수 있었음. 컵도 저렴함. 스포츠에 관심이 없는 사람들에게 추천함
     * Rachael의 목소리를 들어본 적이 있을 것임. 그녀의 유튜브 비디오에서의 반응이 Skrillex의 ""Scary Monsters and Nice Sprites""에 샘플링되었음
          + 그 비디오와 Skrillex의 트랙 덕분에 컵 스태킹을 알게 되었음
          + 오늘날까지 그것이 국제 대회가 있는 진지한 스포츠라는 것을 몰랐음
          + 이런 종류의 서브컬처 크로스오버를 보는 것은 항상 매우 흥미로움
"
"https://news.hada.io/topic?id=19223","PC 및 노트북의 평균 CPU 성능 첫 하락","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PC 및 노트북의 평균 CPU 성능 첫 하락

     * CPU 벤치마크
          + 1,000,000개 이상의 CPU 벤치마크 결과를 포함함
          + 연간 성능 그래프는 PerformanceTest 벤치마크 결과로 구성되며, 2주마다 업데이트됨
          + PerformanceTest V8부터 단일 스레드 성능 수집 시작
          + 다양한 데이터 시리즈를 그래프 아래의 체크박스를 통해 활성화 또는 비활성화 가능
     * CPU 성능
          + 고급, 중급, 저급 등 다양한 CPU 범주로 나뉨
          + 새로운 데스크탑, 랩탑, 서버, 모바일 CPU 성능 포함
          + 단일 스레드 및 다중 CPU 시스템 성능 측정
          + 소켓 유형별 CPU 마크 및 크로스 플랫폼 CPU 성능 제공
          + 게이밍에 적합한 상위 CPU 목록 제공
     * 연간 성능
          + 연간 성능은 달력 연도를 기준으로 하며, 전 세계적으로 제출된 기준선 데이터로 구성됨
          + 2021년 이전에는 x86 프로세서만 포함, 이후 ARM 프로세서도 포함
          + PerformanceTest 소프트웨어는 Windows OS에서만 실행되며, 사용자 제출 벤치마크에 의존함
          + 2021년부터 플랫폼 간 표준화된 CPU 테스트 진행
     * 최고 CPU 성능
          + 연도별로 제출된 상위 성능 CPU의 평균을 보여줌
          + 이 그래프는 PC에 설치된 CPU만 포함하며, 게임 콘솔은 제외됨
     * 소프트웨어 및 하드웨어
          + BurnInTest, PerformanceTest, OSForensics, MemTest86, WirelessMon 등 다양한 소프트웨어 제공
          + USB 및 PCIe 테스트 카드, 전원 공급 테스트기 등 하드웨어 테스트 장비 제공
     * 회사 정보
          + PassMark® Software의 다양한 서비스 및 지원 제공
          + 국제적 준수 및 개인정보 보호 정책 포함

        Hacker News 의견

     * 같은 시기에 발생한 일들에 대한 웹사이트의 정보
          + 1366 x 768 해상도의 모니터가 가장 빠르게 성장함
          + 듀얼 및 쿼드 코어 CPU 사용이 증가하고, 6-16 코어는 감소함
          + 4GB 및 8GB RAM 사용이 증가하고, 16/32GB는 감소함
          + 이는 데이터셋에 더 많은 오래된 기계가 포함되어 있음을 의미함. 왜 그런지는 불명확하지만, 실제 세계의 하드웨어 사용 경향이 변한 것은 아님
     * 차트는 2주마다 업데이트되며, 연초의 데이터는 연말보다 덜 정확함
     * 왜 이런 현상이 발생하는지에 대한 가능성들
         1. NPU와 TPU가 추가 실리콘 영역을 사용하고 있어서 성능이 증가하지 않음
         2. Passmark가 Windows에서 실행되며, 최신 버전일수록 오버헤드가 증가함
         3. 추측 실행 취약점에 대한 수정
         4. 대부분의 컴퓨터가 평균 사용자에게는 ""충분히 빠름"", 최고급 제품을 구매할 필요가 없음
         5. Intel의 새로운 CPU가 이전 것보다 느림
     * 인도와 같은 나라에서 cpubenchmark를 사용하는 사람들이 많아지고, 성능이 낮은 노트북이 더 많이 팔림
     * 세계적인 인플레이션과 실질 임금 감소와 관련이 있을 수 있음. 급여가 따라가지 못해 사람들이 예전만큼 강력한 하드웨어를 구매할 수 없음. 최상급 하드웨어의 감가상각이 예전만큼 빠르지 않음
     * 강력한 이전 패턴을 고려할 때, 이는 다음과 같은 이유로 발생할 가능성이 있음 (a) 방법론의 변화/비랜덤 샘플링, 60% 확률 (b) 장기적으로 사라지는 랜덤 샘플링 효과, 20% 확률 (c) CPU의 실제 변화, 20% 확률
     * 서버 CPU 스레드 성능도 비슷한 경향을 보임. 코어 수와 코어 성능의 우선순위가 직접적으로 나타나기 시작함
     * 최근 하드웨어는 ""소비자 제품""으로서 설계가 매우 부실함
          + 새 제품을 구매하는 것은 몇 년 전부터 불가능함. 중고 제품을 구매함
          + 현대 하드웨어는 매우 신뢰할 수 없음
          + Dell 7 시리즈 노트북을 구매했는데, 배터리 뒷면을 세 번 교체해야 했음
          + 조립 및 재조립 과정이 악몽임
          + 팬을 교체해야 했음
          + 작은 배터리로 작동 시 GPU를 최대 속도로 실행할 수 없음
          + 2.5"" SATA 드라이브를 설치하려면 작은 배터리를 사용해야 함
          + BIOS 배터리가 낮으면 전원 버튼이 작동하지 않음
     * 15년 전에는 HP HDX9200 노트북으로 DOTA를 플레이했음. 과열로 인해 BSOD가 발생했음
     * 현재 두 대의 주요 기계가 있으며, Windows 부팅 시간이 약 1분임
     * 예전 486 기계는 전원 버튼을 누르면 DOS로 부팅할 수 있었음
"
"https://news.hada.io/topic?id=19258","무료 소프트웨어 미디어 시스템 Jellyfin","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       무료 소프트웨어 미디어 시스템 Jellyfin

Jellyfin이란?

     * Jellyfin은 사용자가 자신의 미디어를 수집, 관리, 스트리밍할 수 있게 해주는 무료 소프트웨어 미디어 시스템임.
     * 사용자가 자신의 서버에서 Jellyfin 서버를 실행하여 다양한 기기에서 미디어를 스트리밍할 수 있음.

주요 기능

     * 영화: 전체 영화 컬렉션을 쉽게 탐색하고 아름다운 아트워크와 함께 즐길 수 있음.
     * TV 프로그램: 좋아하는 프로그램을 시즌별로 자동 정렬하여 감상할 수 있음.
     * 음악: 집에서나 외출 중에도 아티스트와 재생 목록을 들을 수 있음.
     * 라이브 TV 및 DVR: TV를 시청하고 자동 녹화를 설정하여 라이브러리를 확장할 수 있음.
     * 책: 책, 만화, 잡지를 읽을 수 있음.
     * 사진: 사진을 정리하고 친구 및 가족과 추억을 공유할 수 있음.
     * SyncPlay: 원격으로 영화 밤을 쉽게 공유할 수 있음.

다양한 플랫폼 지원

     * Jellyfin은 웹, 데스크톱, Android, Apple, Amazon, Roku, Kodi 등 대부분의 인기 플랫폼에서 사용할 수 있음.
     * 공식 및 서드파티 클라이언트를 통해 어디서든 미디어를 즐길 수 있음.

오픈 소스 및 커뮤니티 기반

     * 오픈 소스: Jellyfin은 GNU GPL 라이선스 하에 무료 소프트웨어로 제공됨. 사용, 학습, 수정, 빌드, 배포가 가능함.
     * 커뮤니티 기여: 프로젝트는 전적으로 자원봉사자의 기여에 의존함. 코딩 외에도 다양한 방식으로 기여할 수 있음.
     * 비용 없음: Jellyfin 서버와 공식 클라이언트는 무료로 다운로드 가능하며, 숨겨진 비용 없이 사용할 수 있음.
     * 프라이버시 중시: Jellyfin은 데이터 수집을 하지 않으며, 소프트웨어는 개방적이고 투명함.

시작하기

     * Jellyfin 서버를 다운로드하고 설정하는 방법은 시작 가이드를 참고하면 됨.

        Hacker News 의견

     * 많은 비판이 있지만 Jellyfin을 사랑함. Plex에서 Jellyfin으로 옮긴 이유는 Plex의 로그인 서버 장애로 로컬 컴퓨터의 미디어에 접근할 수 없었기 때문임. TV 프로그램을 강제로 보여주는 것에 짜증이 났고, 사람들이 본 내용을 보고한다는 이야기를 들었음. 전반적으로 만족함
          + Jellyfin을 Docker 컨테이너로 Debian 머신에서 실행 중이며, Synology NAS와 NFS 링크로 연결되어 있음. 주로 사용하는 클라이언트는 NVIDIA Shield에서 실행되는 Android TV임
          + 전반적으로 훌륭함. iOS 앱에서 영화 중간으로 이동할 때 로딩이 느리다는 점이 있지만, 영화, TV 쇼, 비디오를 외부 세계와 연결 없이 볼 수 있어 좋음
          + 새로운 기능이 꾸준히 추가되고 강력한 커뮤니티가 있음. 앞으로 더 좋아질 것으로 기대하지만, 변하지 않아도 몇 년간 기쁘게 사용할 것임
     * Plex에서 Jellyfin/Infuse로 바꾼 이유는 세 가지임
          + 더 나은 톤 매핑으로 HDR 영화를 SDR에서 나쁘지 않게 볼 수 있음
          + Plex에서 다양한 클라이언트에서 오디오 싱크 문제가 자주 발생했음. Jellyfin에서는 문제가 없음
          + Tailscale을 통해 Jellyfin에 더 쉽게 접근할 수 있음. Plex의 인터넷 노출 방식이 방해가 됨
     * Jellyfin을 매우 사랑함. IPv6로 Jellyfin 박스를 설정하고 Cloudflare의 무료 DNS를 사용하여 도메인을 매핑하면 인터넷 어디서든 개인 미디어에 접근할 수 있음
          + MAC 주소와 같은 알려진 장치로 접근을 제한하는 방법을 찾지 못했음. Jellyfin에 로그인 프롬프트가 있지만, 추가적인 보안을 원함
     * Jellyfin을 사랑하며 두 가지를 추가로 구축함
          + 아이들이 사용할 수 있는 매우 간단한 PWA
          + 아이들이 사용할 수 있는 NFC 카드 기반 플레이어
          + API 기반으로 콘텐츠를 제어할 수 있어 좋음
     * 무료 오픈 소스 프로젝트에 대한 불평이 많아 놀라움. 소수의 사람들이 여가 시간에 유지보수하고 있음. Jellyfin은 PR을 받아들이므로 개선이 필요하다면 기여할 수 있음
     * Jellyfin을 Plex 대신 몇 년간 사용해왔지만 몇 가지 한계가 있음
          + UI가 느리고, 썸네일 타일이 로컬 네트워크에서도 느리게 로드됨
          + Apple TV의 네이티브 앱이 없거나 형편없음
          + 새로운 미디어 폴링이 느림. 파일 감시자와 웹훅을 사용하지 않음
          + 홈 페이지가 정보가 부족하고 탐색에 적합하지 않음
          + 예고편을 직접 유지하거나 Infuse 같은 앱을 사용해야 함
          + 타임라인 탐색 시 라이브 미리보기를 위해 타일을 별도로 구성해야 함
          + 영화와 TV 쇼가 분리되어 있어 불편함
          + 그럼에도 Plex보다 덜 불안정하고 Infuse는 HDR/Dolby Vision 콘텐츠를 올바르게 재생함
     * Jellyfin이 Plex의 5년 전 수준에 도달한 느낌임. 빠르게 따라잡고 있으며, 처음 시작한다면 Plex 패스를 고려하지 않을 것임
          + 하지만 현재 Plex만큼 좋지는 않음. 평생 패스를 가지고 있으며, 기능을 추가하는 한 전환할 이유가 없음
          + Jellyfin에 3년을 주고 평가할 것임
     * Jellyfin의 블루레이 디스크 폴더 스트리밍 전략은 ffmpeg를 사용하여 디스크에 연결하고 스트리밍하는 것임
          + 잘 작동하지 않으며, 클라이언트가 연결을 끊은 후에도 연결 프로세스가 계속 진행됨
     * Jellyfin 유지보수자들에게 감사함. 몇 년간 행복한 사용자였음
     * Jellyfin을 Emby에서 포크한 이후로 행복하게 사용 중이며, 초기에는 약간 불안정했지만 거의 유지보수가 필요 없었음
          + Docker 컨테이너에서 사용 중이며, 사용 사례는 다른 사용자와 거의 동일함
"
"https://news.hada.io/topic?id=19206","github-backup - 깃헙 사용자/조직 전체 백업 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   github-backup - 깃헙 사용자/조직 전체 백업 도구

     * 전체 Github 조직/리포지토리/사용자계정 을 백업하는 파이썬 패키지
          + 별표(Starred) 리포지토리, 이슈, 위키를 포함
          + 가장 적합한 형식(위키의 경우 클론, 이슈의 경우 json 파일)을 사용
     * github-backup USERNAME -o 백업경로 --repositories --issues --wikis
          + 사용자명, 저장위치, 리포, 이슈, 위키 포함
     * Pesonal Access Token을 생성하여 권한주고 실행하는 것을 추천. SSH나 비밀번호로도 인증은 가능하지만 비추천
     * GitHub API는 시간당 5000개의 요청 제한이 있음
          + 기본적으로 API 제한에 맞춰 자동으로 대기하지만, 강제 조정도 가능
"
"https://news.hada.io/topic?id=19264","심즈 게임 디자인 문서심즈 게임 디자인 문서 (1997)

     * 디자인 문서 목록
          + 3DPeopleQuestion.pdf: 3D 캐릭터와 관련된 질문을 다루는 문서
          + AnimationClassBreakdown.pdf: 애니메이션 클래스의 세부 사항을 설명하는 문서
          + AnimationDocumentation.pdf: 애니메이션 문서화에 대한 자료
          + ArtDepartmentPostMortem.pdf: 아트 부서의 사후 분석 보고서
          + BrainstormProblemList.pdf: 브레인스토밍 문제 목록
          + Ch00-TableOfContents.pdf: 목차
          + Ch01-Goals.pdf: 목표 설정에 관한 내용
          + Ch02-World.pdf: 게임 세계에 대한 설명
          + Ch03-Objects.pdf: 게임 내 객체에 대한 설명
          + Ch04-People.pdf: 게임 내 사람들에 대한 설명
          + Ch05-PetsAndPests.pdf: 애완동물과 해충에 대한 설명
          + Ch06-Simulator.pdf: 시뮬레이터에 대한 설명
          + Ch08-Framework.pdf: 프레임워크에 대한 설명
          + Ch09-Architecture.pdf: 아키텍처에 대한 설명
          + Ch10-Graphics.pdf: 그래픽에 대한 설명
          + Ch11-Movement.pdf: 움직임에 대한 설명
          + Ch12-CharacterAnim.pdf: 캐릭터 애니메이션에 대한 설명
          + Ch13-Sound.pdf: 사운드에 대한 설명
          + Ch14-Resources.pdf: 자원에 대한 설명
          + Ch16-Tools.pdf: 도구에 대한 설명
          + Ch17-TDSB.pdf: TDSB에 대한 설명
          + Ch18-ContentDevelopment.pdf: 콘텐츠 개발에 대한 설명
          + Ch19-SoftwareDevelopment.pdf: 소프트웨어 개발에 대한 설명
          + Ch20-Documentation.pdf: 문서화에 대한 설명
          + Ch21-Happy.pdf: 행복에 대한 설명
          + Ch22-ContainedInteractions.pdf: 포함된 상호작용에 대한 설명
          + CharacterRenderingDetails.pdf: 캐릭터 렌더링 세부사항
          + ComprehensiveArtAssetList.pdf: 종합 아트 자산 목록
          + ContentCreationRules.pdf: 콘텐츠 생성 규칙
          + CuckooClock.pdf: 뻐꾸기 시계에 대한 설명
          + EdithDocumentationOverview.pdf: Edith 문서 개요
          + EdithPrimitives.pdf: Edith 기본 요소
          + FailureTrees.pdf: 실패 트리에 대한 설명
          + FigureNG.pdf: Figure NG에 대한 설명
          + FloatCompression.pdf: 부동 소수점 압축에 대한 설명
          + GuineaPigCage.pdf: 기니피그 케이지에 대한 설명
          + HappyFriendsHome-2-1.pdf: 행복한 친구들의 집에 대한 설명
          + HitSoundReview.pdf: 히트 사운드 리뷰
          + HitSystemDesign.pdf: 히트 시스템 디자인
          + HowToPursueHappiness.pdf: 행복을 추구하는 방법
          + JeffersonCharacterModel.pdf: Jefferson 캐릭터 모델
          + JeffersonDemoTutorial.pdf: Jefferson 데모 튜토리얼
          + JeffersonDevelopment.pdf: Jefferson 개발
          + JeffersonGameDescription.pdf: Jefferson 게임 설명
          + JeffersonSpectrumOfContent.pdf: Jefferson 콘텐츠 스펙트럼
          + JeffersonTools.pdf: Jefferson 도구
          + MasterIDAndSubIndexOverview.pdf: 마스터 ID 및 하위 인덱스 개요
          + MaxisSimRules.pdf: Maxis Sim 규칙
          + MooseHead.pdf: 무스 헤드에 대한 설명
          + NotesFromMaxisNewPen.pdf: Maxis New Pen의 노트
          + ObjectFileFormat.pdf: 객체 파일 형식
          + ObjectIFFFileFormat.pdf: 객체 IFF 파일 형식
          + ObjectList.pdf: 객체 목록
          + ObjectMakingProcedure.pdf: 객체 제작 절차
          + ProgrammingObjectsInSim.pdf: Sim에서 객체 프로그래밍
          + ProgrammingSimsDialog.pdf: Sims 대화 프로그래밍
          + ProposalForExtending.pdf: 확장 제안서
          + QuickReferenceGuideForSim.pdf: Sim을 위한 빠른 참조 가이드
          + ResourceEXE.pdf: 리소스 EXE
          + ResourceFileOverview.pdf: 리소스 파일 개요
          + SimTransmogrifierDescription.pdf: Sim Transmogrifier 설명
          + SimTransmogrifierTODO.pdf: Sim Transmogrifier 할 일
          + SimsBoxXSpecAndDesign.pdf: Sims Box X 사양 및 디자인
          + SimsContentLibraryNotes.pdf: Sims 콘텐츠 라이브러리 노트
          + SimsFileFormat.pdf: Sims 파일 형식
          + SimsScripts.pdf: Sims 스크립트
          + SlotMachine.pdf: 슬롯 머신에 대한 설명
          + SpriteGeneration.pdf: 스프라이트 생성
          + SpriteRotations.pdf: 스프라이트 회전
          + Storytelling.pdf: 스토리텔링
          + Strategy.pdf: 전략
          + SuitConventions.pdf: 슈트 규칙
          + TDRObjects.pdf: TDR 객체
          + TDSB.pdf: TDSB
          + TDSBInfo.pdf: TDSB 정보
          + TDSEditToDo.pdf: TDS 편집 할 일
          + TechnicalEmail.pdf: 기술 이메일
          + TheSimsDesignDocuments.pdf: The Sims 디자인 문서
          + TheSimsPieMenus.pdf: The Sims 파이 메뉴
          + TheSimsProjectCompletion.pdf: The Sims 프로젝트 완료
          + TheSimsQuickStartGuide.pdf: The Sims 빠른 시작 가이드
          + TheSoulOfTheSims.pdf: The Sims의 영혼
          + TheStateOfTheArtAndGame.pdf: 예술과 게임의 상태
          + ToolsProposalUpdate.pdf: 도구 제안 업데이트
          + TransmogriferRenovation.pdf: Transmogrifer 개조
          + VM.pdf: 가상 머신
          + VMDesign.pdf: 가상 머신 디자인
          + VirtualMachine.pdf: 가상 머신
          + VitaboyOverview.pdf: Vitaboy 개요
          + WallLights.pdf: 벽 조명
          + XAnimatorDesign.pdf: X 애니메이터 디자인

   좋은 자료 감사합니다

        Hacker News 의견

     * The Sims는 나에게 마법 같은 게임으로, MAX를 배워 게임에 나만의 아이템을 넣고 비전투 렌더링, 스프라이트, z-buffer 등을 배우게 한 게임임
          + 여전히 3D 작업과 게임 모딩을 통해 컴퓨터와 상호작용하는 최고의 방법을 배움
          + 장난감 같은 특성이 있어 다양한 방식으로 상상력을 발휘할 수 있음
          + 개인적으로는 몇 주 동안 건축에만 몰두하며, 가끔은 다른 세계에서 나 자신을 역할극하며 플레이함
          + 때로는 심들을 가두기도 했지만, 오늘은 그런 전쟁 범죄를 기록하지 않겠음
          + 다시 설치하고 멋진 집을 지을 수도 있지만, Factorio처럼 빠져들까 두려움
          + 대신 이 글을 읽어볼 생각임, 대학에서 게임 디자인을 공부한 이후로 디자인 문서를 본 적이 없음
          + 이 게임의 진정한 보석에 대한 통찰을 공유해줘서 고마움
     * 이런 종류의 것을 보는 것을 좋아함. RCT는 꿈임
          + 빠르게 다운로드하려면 다음 명령어를 사용하면 됨
          + 이 게임은 최고의 사운드트랙 중 하나를 가짐
          + [유튜브 링크]
     * 놀라움. 이 문서를 읽으니 많은 추억이 떠오름
          + 건축 모드에서 집을 디자인하며 많은 시간을 보냈음
          + 이 문서를 읽으니 얼마나 잘 디자인되었는지 깨달음
          + 이 디자인 문서는 매우 풍부함
          + 소프트웨어를 실제로 작성하기 전에 명확한 비전이 있는 곳에서 일하고 싶음
     * 공유해줘서 고마움! 이 상징적인 게임에 대해 더 많이 알게 되어 기쁨
          + 최근 비디오 게임 역사 재단 도서관에 대한 논의가 있었음
          + 이 문서는 그 도서관에 좋은 추가물이 될 것 같음
     * 안녕, 찰스임! 이 모든 것을 보니 좋음, Don. 그 State of the Art 문서를 작성했던 기억이 남
     * 정말 멋짐! The Sims는 어릴 적 가장 좋아했던 게임 중 하나였고, 그 내부 작동을 엿볼 수 있어 매우 흥미로움
     * 게임을 구동하는 스크립트 언어도 있으며, 여기에서 부분적으로 문서화되어 있음
          + [Simantics 링크]
     * 아, 기니피그 케이지 질병... 그걸 제안하는 게 재미있었을 것임
          + 나중에 추가된 소의 식물도 있음
     * 이것은 The Sims의 영혼을 위한 프로토타입으로, Will Wright가 1997년 1월 23일에 작성한 것임
          + 이 코드는 게임 디자인, 프로그래밍 및 프로토타이핑 기술의 흥미로운 예임
          + Will이 이 원래 프로토타입 코드를 작성한 이후로 The Sims 코드는 많이 변했음
          + 예를 들어, 더 이상 ""스트레스"" 동기가 없음
          + 그래서 기본적으로 그들은 약물에 취한 것임?
"
"https://news.hada.io/topic?id=19317","핵융합: WEST, 플라즈마 지속 시간 세계 기록 경신","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     핵융합: WEST, 플라즈마 지속 시간 세계 기록 경신

    핵융합: WEST, 플라즈마 지속 시간 세계 기록 경신

     * WEST의 성과
          + 2025년 2월 12일, CEA의 WEST 기계가 22분 이상 플라즈마를 유지하며 기존 기록을 경신함.
          + 이는 중국의 EAST가 세운 기록을 25% 개선한 것임.
          + 플라즈마 온도는 5천만 도에 도달함.
     * 기술적 중요성
          + ITER와 같은 기계는 몇 분 동안 플라즈마를 유지해야 하므로, 이번 성과는 중요한 이정표임.
          + 플라즈마는 자연적으로 불안정하므로 이를 제어하고 플라즈마와 접촉하는 모든 부품이 방사선에 견딜 수 있도록 하는 것이 목표임.
     * WEST의 특징
          + CEA의 WEST는 초전도 코일과 능동 냉각 부품을 통해 장시간 플라즈마를 유지할 수 있는 특징을 가짐.
          + 국제적인 연구 협력의 일환으로, JET, JT-60SA, EAST, KSTAR, ITER 등과 함께 연구가 진행됨.
     * 핵융합의 목적
          + 핵융합은 자연적으로 불안정한 플라즈마를 제어하는 기술로, 자원과 연료를 적게 사용하며 장기 방사성 폐기물을 생성하지 않음.
          + 자기 구속 핵융합은 강력한 자기장을 통해 플라즈마를 토러스 형태로 유지하며, 수소 핵이 융합될 때까지 가열함.
     * 프랑스의 역할
          + 프랑스는 WEST와 ITER를 통해 첫 번째 프로토타입 핵융합 원자로를 구축할 수 있는 위치에 있음.
          + 핵융합은 핵분열 에너지와 상호 보완적인 측면이 많으며, 중성자와 물질에 관련된 기술과 잘 결합됨.
     * 미래 전망
          + 대규모 에너지 생산을 위한 인프라가 필요하므로, 2050년까지 탄소 중립을 달성하는 데 핵융합 기술이 크게 기여할 가능성은 낮음.
          + 여러 기술적 문제를 해결하고 경제적 타당성을 입증해야 함.

        Hacker News 의견

     * 무중력 상태에서 핵융합을 하면 구속 문제를 해결할 수 있음. 문제는 무중력 상태에서 핵융합 조건을 만드는 것임. 가장 간단한 방법은 중력이 스스로 핵융합 조건을 만들 수 있도록 충분한 물질을 한 곳에 모으는 것임. 그러나 이 경우 발전소가 지구에 너무 에너지가 넘쳐서 안전하게 하려면 엄청난 거리로 떨어져 있어야 함. 이로 인해 전력을 지구로 전송하는 문제가 발생함. 하지만 광자를 안전한 거리에서 수집하여 가까이 가지 않고도 에너지를 수확할 수 있을 것임
     * 중국의 EAST에서 몇 주 전 달성한 기록 시간보다 25% 개선된 것임. 이 핵무기 경쟁을 칭찬함. 22분은 항상 ""20년 후""로 여겨졌던 기술에 대해 정말 인상적임. 핵융합의 기술적 도전에 대해 깊이 탐구할 것임
     * 삼중 곱(효율성)이 지난 50년 동안 무어의 법칙보다 빠르게 증가했음. 여전히 사람들은 핵융합 연구에 대해 농담을 하지만, 어떤 것들은 시간이 걸림. ""The Future of Fusion Energy""라는 훌륭한 책에 대한 훌륭한 리뷰를 추천함
     * 그들은 두 메가와트의 가열을 사용하여 1337초 동안 토카막 플라즈마를 유지할 수 있었음. 1337은 농담이 아님; 아마도 ""leet"" 읽기는 우연의 일치일 것임
     * H-모드(고구속 모드)에 대한 좋은 기술적 소개임. H-모드에서는 난류가 없는 평온한 가장자리가 플라즈마가 잃는 열과 하전 입자의 양을 줄임. 이는 플라즈마 전체 부피, 특히 핵융합이 발생할 수 있는 조건이 있는 중심부에서 압력을 급격히 증가시킴. 에너지와 입자 손실이 줄어들어 플라즈마를 둘러싼 물질 표면의 손상도 최소화함
     * ""2070년 이전에 상업적으로 성공적인 핵융합 발전소가 있을 것""과 같은 예측 시장을 적용하는 데 있어 한 가지 문제는 해결까지의 긴 시간임. 물론 5년 후에 ""예"" 또는 ""아니오"" 주식을 팔기를 희망할 수 있지만, 유동성이 충분하지 않을 수 있음
     * 예측 시장 M_1이 ""2070년 1월 1일에 상업적으로 성공적인 핵융합 발전소가 있으면 '예'로 해결되고, 그렇지 않으면 '아니오'로 해결됨""이라면, M_2는 5년 후에 M_1의 '예' 가격이 30% 이상이면 '예'로 해결될 수 있음. 그러나 사람들이 M_2가 해결되기 직전에 M_1의 ""예""를 많이 사면 문제가 될 수 있음. 아니면 사람들이 스스로 문제를 해결할 수 있을지도 모르지만, 여전히 문제가 있는 것 같음
     * 다른 예측 시장의 미래 가치에 대한 예측 시장 대신, 예측 시장의 주식에 대한 선물 계약이 있다면 어떨까? 특정 가격에 ""예"" 또는 ""아니오"" 주식을 사고 팔 수 있는 권리 같은 것임
     * 예측 시장이 특정 날에 확률 p 이상을 할당할 것이라고 확신한다면, 그 날에 각 선물을 사용하여 (1-p) 가격에 ""아니오"" 주식을 팔 수 있는 선물을 샀다면... 그 날 ""예""에 할당된 확률이 p 이상이라면, ""아니오""의 가격은 (1-p) 이하일 것이므로 (1-p)보다 낮은 가격에 ""아니오"" 주식을 사고 (1-p)에 팔 수 있음
     * 문제는 여전히 ""아니오""를 사야 팔 수 있다는 점임. 그래서 5년 후에 유동성이 없으면 어떻게 할 것인가에 대한 문제를 해결하지 못함
     * 1을 사용하여 ""예""와 ""아니오"" 주식을 만들고 ""아니오""를 팔고 ""예"" 주식을 남겨두면, 이는 명목상으로는 최소한 p의 가치가 있음. 그리고 나중에 유동성이 더 있을 때 팔 수 있음
     * 이 정보는 찾을 수 없음: 얼마나 많은 에너지를 얻었는가? 얼마나 많은 에너지를 투입했는가? 에너지 투입-산출 균형이 이루어질 때까지 얼마나 타야 하는가?
     * 1337초는 꽤 의미 있는 결과임. 프로그래머라면 그렇겠지만, 물리학에서는 다른 의미일 수 있음
     * Commonwealth Fusion이 이미 그리드 연결 발전소 건설을 잘 진행하고 있다는 것을 몰랐음. 아마도 드디어 실현될 것인가?
     * 어떻게 작동하는지 모르겠음. 어떻게 그들이 순전력을 생산할 수 있다고 확신할 수 있는가?
     * 관련 있음? 중국의 인공 태양이 1000초 동안 타오르며 핵융합 연구에서 기록을 세움
"
"https://news.hada.io/topic?id=19254","주간 단위로 본 나의 삶","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             주간 단위로 본 나의 삶

     * 개요
          + Gina의 삶을 주별로 정리한 지도임.
          + 각 주마다 어떤 일을 했는지 작은 박스로 표시됨.
          + ""Life in Weeks""라는 개념을 Wait But Why에서 더 읽을 수 있음.
          + Buster Benson의 코드를 수정하여 이 페이지를 생성함.
          + 이 지도는 계속 업데이트될 예정임.
     * 주요 사건
          + 1976년 출생.
          + 1980년 유치원 입학.
          + 1981년 초등학교 입학.
          + 1983년 첫 컴퓨터 사용.
          + 1988년 고등학교 입학.
          + 1992년 운전면허 취득 및 대학교 입학.
          + 1995년 첫 웹페이지를 봄.
          + 1996년 대학교 졸업 및 첫 데이트.
          + 1999년 스카이다이빙 및 약혼.
          + 2000년 결혼.
          + 2001년 첫 블로그 시작.
          + 2004년 헬리콥터 비행 및 Lifehacker에서 일함.
          + 2006년 책 출판.
          + 2008년 첫 팟캐스트 시작.
          + 2010년 비트코인 및 중국 방문.
          + 2011년 자녀 E 출생.
          + 2015년 Postlight에서 일 시작.
          + 2020년 CEO가 됨.
          + 2021년 Postlight 매각.
          + 2022년 암 진단.
          + 2023년 NTT DATA 퇴사.
          + 2049년까지 다양한 개인적 및 직업적 사건들 기록됨.
     * 미래 계획
          + 2060년까지의 삶을 주별로 계획하고 있음.
          + 2075년까지의 삶을 기대하며 계획 중임.

        Hacker News 의견

     * Gina Trapani라는 이름이 오랜만에 들려서 처음에는 잘 기억이 나지 않았음. Groklaw가 떠올랐지만, Lifehacker가 맞는 답이었음. 아마도 젊은 시절과 그때의 여유로운 시간을 조금 이상화하고 있는 것 같음. 20년이 지났다는 것이 믿기지 않음. 그 시절은 좋았던 시절처럼 느껴졌음. Web 2.0은 출판보다는 소통에 중점을 두었고, Slashdot은 기술 뉴스의 최상위에 있었으며, Lifehacker, Engadget 등 많은 사이트들이 대기업에 인수되지 않고 신선하고 개성 있는 느낌을 주었음. 현대에는 드문 느낌임
     * 주 단위로 시간을 생각하는 것은 가장 무서운 시간 단위임. 충분히 짧아서 얼마나 길게 느껴지는지 잘 알 수 있지만, 충분히 길어서 빠르게 쌓임
     * 우리의 삶의 많은 부분이 일에 소비됨. 수명을 이렇게 드러내놓고 보면 남은 시간을 최적화하려는 왜곡된 본능이 있음. 더 생산적이고, 더 효율적이어야 함. 하지만 이는 마치 출혈이 심한 상태에서 헌혈 일정을 최적화하려는 것과 같음
     * 한 번은 내 인생 전체를 추적하기 위해 얼마나 많은 공간이 필요한지 계산해 본 적이 있음. 내 위치와 매 순간의 활동을 알고 싶었음. 위치는 GPS 좌표로 저장할 수 있고, 활동의 수가 많지 않기 때문에 지도에 인덱스로 저장할 수 있을 것 같았음. 32비트 정수로 충분한 고유 활동 수를 제공할 수 있을 것 같았음. 수명 동안의 초 수에 저장하고 싶은 데이터 크기를 곱하면 됨. 얼마나 압축 가능한지도 고려해야 함 (예: 하루 8시간의 이상적인 수면). 생각해보면 꽤 충격적임
     * 우리의 삶이 짧다는 것을 상기시키는 무서운 기억임. Tim Urban의 블로그에서 읽었는데, A4 용지 한 장에 인생의 모든 주를 넣을 수 있다고 했음. 기분이 좋지 않았음
     * 기억에 남는 일을 하지 않았거나 기억하지 못하는 빈 공간이 눈에 띔. 약 10년 전에 이를 해결하기 위해 Bucket52라는 앱을 만들었음. 매주 기억에 남는 일을 하나씩 넣는 것이 아이디어였음. 1년 동안만 해보려고 했는데 놀랍도록 어려웠음
     * 이 관점에서 보면 발달 과정이 얼마나 낭비적인지 분명함. 모든 신체적, 심리적 발달이 너무 많은 시간과 투자를 필요로 함. Gina의 은퇴 시절에 대해서는 아직 이야기하지 않았음. 미래는 3D 바이오프린팅을 사용하여 완전히 형성된 성인을 만드는 것에 있음. 기술적 문제는 인공지능 업그레이드에 대한 편견을 버리기 전까지임. 노화는 오래된 모델 가중치를 새로운 프린트에 이식함으로써 극복됨. 관습에서 벗어나면 많은 효율성이 기다리고 있음
     * 나는 주 단위를 좋아함. 매년 52주. 윤년과 무관함. 자기 성찰을 위한 노트북이 있음. 주 단위임. 일기가 아니기 때문에 septimary라고 부름. 일기와 달리 septimary는 유연성을 제공하며 매주 특정 날짜나 요일을 언급하지 않고 요약함. 맥락이나 중요성에 따라 이 수준의 세부 사항이 정말로 필요하지 않는 한
     * 2025년의 7번째 주가 끝남
     * 보는 것이 좋았음. 약 25분 동안 그것을 보았음. 하지만 나에게는 무서웠음. 소스 코드가 있는지 확인하고 싶었지만, 그 세부 사항을 기억하지 못한다는 것을 깨달았음. 어린 시절의 무작위적인 것들은 기억하지만 초등학교를 시작한 날짜는 기억하지 못함. 3학년 때 첫 컴퓨터를 얻었다는 것은 알지만 날짜는 기억하지 못함. 대학을 시작한 날짜도 기억하지 못하고 대학원 지원서 작성 시 잘못된 날짜를 쓴 적이 있음. 일기가 아닌 것을 기록하기 시작했지만, 이것은 코로나 시기였음
     * ""나는 절대 뒤돌아보지 않아요, 친애하는. 그것은 현재를 빼앗아가요."" - Edna Mode
"
"https://news.hada.io/topic?id=19243","Go 1.24 릴리즈 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Go 1.24 릴리즈

     * 언어 변경 사항
          + Go 1.24는 이제 제네릭 타입 별칭을 완전히 지원함. 타입 별칭은 정의된 타입처럼 매개변수를 받을 수 있음.
     * 성능 개선
          + 런타임에서 여러 성능 개선이 이루어져 대표적인 벤치마크에서 평균 2-3%의 CPU 오버헤드 감소를 이룸.
          + 새로운 내장 맵 구현, 작은 객체의 메모리 할당 효율성 향상, 새로운 런타임 내부 뮤텍스 구현 포함.
     * 도구 개선
          + go 명령어는 모듈의 도구 종속성을 추적하는 메커니즘을 제공함. go get -tool을 사용하여 현재 모듈에 도구 지시문을 추가할 수 있음.
          + go vet 하위 명령어의 새로운 테스트 분석기는 테스트 패키지의 테스트, 퍼저, 벤치마크, 예제 선언에서 일반적인 실수를 보고함.
     * 표준 라이브러리 추가
          + 표준 라이브러리는 FIPS 140-3 준수를 위한 새로운 메커니즘을 포함하며, 승인된 알고리듬을 사용하는 데 소스 코드 변경이 필요 없음.
          + x/crypto 모듈에 있던 여러 패키지가 이제 표준 라이브러리에서 사용 가능함.
          + 벤치마크는 이제 더 빠르고 오류가 적은 testing.B.Loop 메서드를 사용할 수 있음.
          + 새로운 os.Root 타입은 특정 디렉토리 아래에서 파일 시스템 작업을 수행할 수 있는 기능을 제공함.
          + 런타임은 runtime.AddCleanup이라는 새로운 정리 메커니즘을 제공하여 runtime.SetFinalizer보다 더 유연하고 효율적이며 오류가 적음.
     * WebAssembly 지원 개선
          + Go 1.24는 Go 프로그램이 WebAssembly 호스트에 함수를 내보낼 수 있는 go:wasmexport 지시문을 추가하고, Go 프로그램을 WASI 리액터/라이브러리로 빌드하는 것을 지원함.

        Hacker News 의견

     * 특히 더 빠른 맵 구현과 text/template에서 이제 함수 타입을 지원하는 것에 만족함
     * Go 1.23에서 함수 타입에 대한 range를 도입했으나, 이제서야 Go 템플릿에서 작동하게 되었음
     * 도구 지시문으로 지정된 도구를 설치할 때 사용할 태그를 지정할 수 있는지 궁금함
          + 시도해봤지만 작동하지 않음 (태그 없이 설치됨)
          + go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest 사용
     * os.Root의 사용 사례가 무엇인지 궁금함
          + 보안과 관련이 있는 것으로 이해함
          + 내부적으로 Chroot를 사용하지 않기 때문에 결국 누군가가 Root에서 탈출할 방법을 찾을 수 있을 것이라 상상함
     * 지루하지만 좋아함
     * 새로운 도구 플래그에 가장 기대가 큼
          + 추한 tools.go를 제거할 수 있을 것임
     * GODEBUG=fips140=only 사용 시, FIPS 140-3을 준수하지 않는 암호화 알고리즘이 오류나 패닉을 반환함
          + 표준 라이브러리가 의도적으로 패닉을 일으키는 아이디어가 마음에 들지 않음
          + 코드를 보지 않았지만, 현재 오류를 반환하지 않는 함수에서만 발생하는지 궁금함
     * 마침내 제네릭 타입 별칭이 오래 기다려왔음
     * 좋음! GOAUTH 때문에 이번 릴리스를 기대했음
          + 개인 git 저장소 작업이 덜 번거로워지길 바람
          + go help goauth를 보면서 큰 기대는 하지 않음
"
"https://news.hada.io/topic?id=19246","Digital Doubles - AI 도플갱어가 만연한 사회는 어떤 모습일까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Digital Doubles - AI 도플갱어가 만연한 사회는 어떤 모습일까?

     * ""Agentic AI에 사용자 데이터까지 합쳐진 나의 Digital Double이 나를 대신해서 온라인에서 행동하게 된다면 어떻게 될까?""라는 질문에 대한 미래 시나리오 리서치
     * OpenAI, Google, Teenage Engineering, Snap 등과 협업한 스튜디오 MODEM과 왕립예술학교(RCA)와 임페리얼 칼리지(Imperial College London)의 연구원이 협업함
     * AI 모델의 발전: 차세대 AI 모델은 고도로 개인화될 것이며, 이는 단편적인 그림자 자아를 넘어 우리를 대신하여 세상과 상호 작용할 수 있는 ""디지털 더블""로 발전할 수 있음을 시사함
     * 기술 기업의 경쟁: 기술 회사들은 개인 데이터를 학습하고 일상생활에서 우리를 대신하여 행동할 수 있는 AI를 시스템 레벨에서 제품에 통합하기 위해 경쟁하고 있음
     * 기술의 약속: 디지털 더블 기술은 이메일 답장, 문자 메시지 응답, 사진 정리, 회의 일정 조정과 같은 일상적인 업무를 자동화하여 생산성을 향상시고자 함
     * 미래에 대한 질문: 이런 기술 발전은 미래에 우리가 개인 생활에 집중하기 위해 업무를 자동화할 것인지, 아니면 업무에 더 많은 시간을 할애하기 위해 개인 생활을 자동화할 것인지에 대한 질문을 제기함

   흥미로워서 좀 더 길게 요약해봤습니다.

디지털 복제인간(Digital Doubles)

     * 차세대 AI 모델은 개인의 데이터를 학습하여 더욱 개인화된 존재가 될 전망
     * 디지털 복제인간(Digital Doubles)은 단순한 아바타를 넘어, 우리를 대신해 커뮤니케이션하는 독립적인 에이전트가 될 가능성 있음

보이지 않는 쌍둥이, 디지털 자아

     * 우리가 인식하지 못하는 사이, 우리의 데이터는 소셜 미디어 플랫폼과 광고 알고리즘에 의해 프로파일링됨
     * AI가 우리의 행동과 취향을 학습함에 따라, AI 기반 개인 비서(Google Assistant 등)는 점점 더 현실적인 대화를 수행
     * AI 트윈 기술이 발전하면, 이러한 '디지털 복제인간'은 우리의 정체성을 대체할 수준까지 발전할 수 있음

확장된 자아(The Augmented Self)

     * 가상 회의 대체: CEO가 자신의 디지털 복제인간을 활용해 전 세계 화상 회의에 참석하는 시대
     * 개인화된 디지털 이미지: SNS 프로필, 비즈니스 미팅, 데이팅 앱에서 각각 최적화된 디지털 자아를 선택하는 방식
     * AI의 생활 속 침투: Windows 11의 Recall 기능(데스크톱 스냅샷 저장), Apple의 Apple Intelligence(개인화된 AI) 도입
     * 생산성과 자동화: Zoom CEO는 AI가 대신 회의에 참석하는 미래를 예상, Bumble CEO는 AI 데이팅 컨시어지를 제안

     AI는 개인의 삶을 자동화하여 더 많은 시간을 만들어줄 것인가, 아니면 일과 삶의 균형을 무너뜨릴 것인가?

인지된 자아(The Perceived Self)

     * AI 복제인간이 점점 현실과 구별되지 않는 수준에 도달
     * 딥페이크 및 AI 챗봇의 문제:
          + 가짜 뉴스, 사기, 신뢰 문제
          + 죽은 사람을 AI로 재현하는 윤리적 문제 (예: AI 챗봇으로 돌아온 루 리드, 살해된 딸을 본 아버지의 사례)
     * AI는 의식을 가진 존재가 아니지만, 사람들이 그것을 실제처럼 대할 경우 현실과 구분이 어려워질 수 있음

예측된 자아(The Predictive Self)

     * AI가 사용자의 과거 데이터를 학습하여 미래의 선택을 예측하는 역할 수행 가능
     * AI 기반 대화 시뮬레이션:
          + 연애, 비즈니스 협상, 설득 전략 등을 AI를 통해 시뮬레이션 가능
          + 그러나 인간 관계를 단순한 '거래'로 만들어버릴 위험성 존재
     * 소셜 미디어의 변화:
          + AI가 대신 댓글을 달고 소통하는 플랫폼 등장 (예: Aspect)
          + 인간보다 AI가 많은 가짜 소셜 네트워크 환경이 만들어질 가능성
     * AI의 한계:
          + AI는 과거 데이터를 바탕으로 예측하므로, 인간의 예상치 못한 변화(자기 발견, 새로운 경험) 반영이 어려움

결론: AI 복제인간과 우리의 미래

     * 디지털 복제인간은 생산성과 편리함을 가져오지만, 우리 삶과 정체성을 자동화하면서 진짜 '나'와의 괴리를 초래할 가능성 있음
     * 기술의 발전이 개인의 자유를 확장할지, 아니면 새로운 형태의 노동(디지털 자아 관리)을 초래할지 고민해야 할 시점
"
"https://news.hada.io/topic?id=19297","xAI, Grok 3 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             xAI, Grok 3 발표

     * xAI의 미션은 우주의 본질을 이해하는 것, 이를 위해 진실 추구를 최우선으로 하는 AI인 Grok을 개발
     * Grok 3는 Grok 2보다 10배 이상 향상된 성능을 보여주며, 이는 뛰어난 팀의 노력과 대규모 컴퓨팅 자원 덕분
          + Grok은 하인라인의 소설 '낯선 땅 이방인'에서 화성에서 자란 인물이 쓴 말로 ""뭔가를 완전하고 깊이 있게 이해한다""
          + 공감(Empathy)도 중요한 요소로 작용
     * xAI는 17개월 전 첫 모델을 시작했으며, Grok 1은 314B(3140억) 개의 파라미터를 가진 모델이었음
          + 이후 Grok 1.5, Grok 2를 거쳐 Grok 3 개발로 이어졌으며, 성능이 비약적으로 향상됨
     * 데이터 센터: xAI는 자체 데이터 센터를 구축하여 Grok 개발을 가속함
          + 첫 번째 10만 GPU 클러스터를 가동하는데 122일 걸렸고, 이후 92일 만에 용량을 두 배(200K)로 늘렸음
          + 이는 세계 최대 규모의 완전 연결된 H100 클러스터로, 이 모든 GPU와 컴퓨팅 파워로 그록을 개선해왔음
     * Grok 3: Grok 2 대비 10배 이상 향상된 성능 (실제로는 15배 이상)
          + 1월 초에 사전 학습을 마쳤고, 현재도 계속 학습 중
     * 벤치마크: Grok 3는 일반 수학적 추론, 과학 관련, 코딩 분야에서 뛰어난 성능을 보임
          + 작은 버전인 Grok3 Mini도 경쟁자들과 대등한 수준
          + 특히 고등학교 수학 경시대회(AIME) 문제에서 최고 수준의 성과를 기록
          + 최신 챗봇 평가(Cha Arena)에서 ELO 점수 1,400 이상을 기록하며 모든 모델 중 1위를 차지

Grok 3의 새로운 기능

     * 고급 추론(Advanced Reasoning)
          + Grok 3는 단순한 답변을 내놓는 것이 아니라, 깊이 있는 사고 과정을 거쳐 답을 찾는 기능을 갖춤
          + 문제를 분석하고, 오류를 찾고, 다양한 가능성을 탐색하는 능력을 강화
          + 실제 사례:
               o 화성 여행 궤적 계산: 지구-화성 왕복 궤도를 시뮬레이션하여 시각적으로 출력
               o 새로운 게임 개발: 테트리스(Tetris)와 주마(Zuma)를 결합한 새로운 게임을 즉석에서 생성
     * Grok 3의 실시간 학습 능력
          + 매일 새로운 개선이 이루어지고 있으며, 하루 차이로도 성능 차이가 나타남
          + 테스트 과정에서도 모델이 지속적으로 발전하고 있음
     * Grok 3를 활용한 엔지니어링 개선
          + Grok 3는 내부적으로도 코딩과 문제 해결에 수백 시간의 작업을 단축시킴
          + 수학 및 경쟁 프로그래밍 문제 해결을 통해, 스스로 오류를 감지하고 수정하는 능력을 학습

차세대 기능: Grok 3 기반 에이전트

     * Deep Search (딥 서치)
          + 새로운 AI 검색 엔진, 일반 검색 엔진보다 더 깊이 있는 정보를 찾아줌
          + 여러 사이트의 정보를 분석하고, 최신 정보를 비교하여 가장 신뢰할 수 있는 답변을 제공
          + 예시:
               o 다음 스타쉽(Starship) 발사 일정 조회
               o Path of Exile 인기 빌드 분석
               o March Madness 농구 대회 우승 예측
     * AI 음성 비서(Voice Assistant)
          + 사용자가 실제 대화하듯이 Grok과 소통할 수 있는 기능이 추가될 예정
          + Grok은 단순한 텍스트 변환이 아니라, 목소리 톤, 감정, 억양 등을 고려하여 자연스럽게 대화 가능

Grok 3 출시 및 미래 계획

     * 출시 일정
          + 오늘부터 Grok 3의 베타 버전이 Premium+ 가입자에게 제공됨
          + X(구 트위터) 앱에서 업데이트를 하면 새로운 기능을 사용할 수 있음
          + 독립형 웹사이트 grok.com 및 전용 Grok 앱(iOS/Android) 출시
     * 새로운 구독 옵션: Super Grok
          + 가장 최신 기능을 빠르게 체험하고 싶은 사용자들을 위한 Super Grok 구독 모델 출시
     * 향후 계획
          + Grok 3 API 출시 예정 (수주 내)
          + Grok 3 오픈소스 공개 예정 (향후 몇 달 내)
          + 더 강력한 차세대 클러스터 구축 중 (기존의 5배 성능)
          + AI 게임 스튜디오를 설립하여 AI 기반 게임 개발에 박차를 가할 예정

결론

     * Grok 3는 AI 모델의 새로운 차원을 열고 있으며, xAI는 이를 더 발전시키기 위해 노력 중
     * 강력한 추론 능력, AI 기반 검색 엔진, 음성 비서 기능을 통해 Grok은 점점 더 진정한 AI 조력자로 발전 중
     * Elon Musk는 앞으로 AI가 Fields Medal(수학계의 노벨상)과 같은 학문적 성과를 달성할 것이라고 전망

        Hacker News 의견

     * Karpathy는 Grok의 초기 인상을 OpenAI의 o1-pro 수준이라고 표현함
     * Grok가 한 벤치마크에서 최고 수준에 도달했음
     * LLM 분야의 경쟁이 치열해져 소비자에게 좋은 소식임
          + 독점적인 기업이 모든 가치를 흡수하지 않기를 바람
     * 적은 비용으로도 최첨단 LLM을 구축할 수 있다는 증거가 있음
     * 녹화된 내용이 영감을 주지 못했음
          + 새로운 것이 없었고, 이미 알고 있는 내용이었음
     * 많은 사람들이 OpenAI를 모방하고 있다고 생각함
          + OpenAI가 여전히 무엇을 할 수 있는지를 보여주고 있다고 봄
     * xAI가 빠르게 따라잡았다는 점은 인정해야 함
          + 모델뿐만 아니라 제품에서도 앞서고 있음
     * 경쟁적인 Grok의 가장 좋은 결과는 ChatGPT의 대중적 인식을 깨는 것일 수 있음
     * Karpathy는 이것이 o1-pro 수준이라고 믿음
     * OpenAI가 기술적 장벽이 없다는 것을 다시 증명함
          + Elon의 OpenAI 인수 제안이 타당하다고 봄
     * Elon은 중국에서 인기가 많아 AI 엔지니어를 쉽게 확보할 수 있음
          + xAI/XSpace/Neurallink 주식을 제공할 수 있음
     * OpenAI의 가치를 1000억 달러 이상으로 평가하는 투자자들에게 행운을 빔
     * Grok 2의 가중치를 공개할 계획임
     * LLM이 개인화된 광고를 삽입하는 미래를 상상해 봄
"
"https://news.hada.io/topic?id=19247","Go로 확장가능한 WASM 어플리케이션 작성 가능 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Go로 확장가능한 WASM 어플리케이션 작성 가능

     * Go 1.24에서 WebAssembly(Wasm) 관련 기능이 확장됨
     * go:wasmexport 디렉티브가 추가되어 Wasm 모듈 외부에서 Go 함수를 호출할 수 있게 됨
     * WASI를 위한 “reactor” 빌드 모드도 지원되어, 장기간 활성 상태로 코드를 실행할 수 있게 됨
     * 이를 통해 Wasm 환경에서 Go 애플리케이션을 더 유연하게 확장할 수 있는 가능성이 열림

WebAssembly and the WebAssembly System Interface

     * WebAssembly는 웹 브라우저에서 고성능의 저수준 코드를 실행하기 위해 만들어진 이진 포맷임
     * 현재는 브라우저 외부에서도 광범위하게 활용되고, WebAssembly System Interface(WASI)를 통해 시스템 리소스와 상호작용 가능함
     * Go는 1.11 버전에서 js/wasm 포트를 통해 Wasm 컴파일을 지원하기 시작했으며, 1.21 버전에서는 새로운 GOOS=wasip1 포트를 통해 WASI 프리뷰 1 시스템 호출 API를 타겟으로 하는 새로운 포트를 추가

go:wasmexport를 사용한 Go 함수의 Wasm Export

     * Go 1.24에서 새로 추가된 go:wasmexport 디렉티브를 통해, Go 함수를 Wasm 모듈 외부에서 호출할 수 있도록 export로 노출 가능함
     * 예: //go:wasmexport add처럼 선언한 뒤 함수를 작성하면, Wasm 호스트가 해당 함수를 호출할 수 있음
     * 이는 cgo의 export 디렉티브와 유사하지만, 더 간단한 메커니즘으로 구현됨

Building a WASI Reactor

     * WASI “reactor”는 지속적으로 작동하며 이벤트나 요청에 반응할 수 있는 WebAssembly 모듈을 의미함
     * Go 1.24에서는 -buildmode=c-shared 옵션을 사용해 WASI reactor 빌드를 지원함
     * 이 빌드 플래그는 링커에게 _start 함수(명령 모듈의 진입점)를 생성하지 말고, 대신 _initialize 함수를 생성하도록 지시함
          + reactor는 _initialize 함수를 통해 초기화가 진행되고, main 함수 대신 이 함수를 먼저 호출해야 함
     * Wazero 같은 런타임과 함께 사용하면, _initialize 호출 후에 export된 함수를 원하는 만큼 재호출할 수 있음
     * 이 방식은 애플리케이션의 플러그인 혹은 확장 기제로 Wasm을 활용하는 환경에서 유용함

호스트와 클라이언트 간의 풍부한 타입 지원

     * Go 1.24에서는 go:wasmimport로 호출되는 함수의 매개변수/반환형에 대해 제약이 완화됨
     * 예를 들어, bool, string, int32 포인터, 구조체 포인터 등을 전달할 수 있음
          + 다만 64비트와 32비트 환경 차이 등으로 여전히 제한이 존재함
     * 이는 Go Wasm 애플리케이션을 보다 자연스럽고 편리하게 작성할 수 있도록 하며, 불필요한 타입 변환을 제거

제한 사항

     * Wasm은 병렬 처리가 없는 단일 스레드 아키텍처
     * go:wasmexport 함수는 새로운 고루틴을 생성할 수 있지만, 백그라운드 고루틴을 생성하는 함수는 go:wasmexport 함수가 반환된 후 Go 기반 Wasm 모듈로 다시 호출될 때까지 실행을 계속하지 않음
     * 일부 타입 제한이 완화되었지만, 여전히 go:wasmimport 및 go:wasmexport 함수와 함께 사용할 수 있는 타입에는 제한이 있음
          + 포인터를 포함한 복합 타입 전달에는 아직 제약 사항이 존재

결론

     * Go 1.24의 WASI reactor 빌드 및 go:wasmexport 기능 추가는 Go의 Wasm 생태계를 크게 확장시키는 개선사항임
     * 이를 통해 개발자가 더 다양한 Go 기반 Wasm 애플리케이션을 만들 수 있도록 하여 Wasm 생태계에서 Go의 새로운 가능성을 열어줌

   Wasm/gc가 광범위하게 도입되기 전에는 gc가 없는 언어로 wasm 타켓 개발하는게 좋을 것 같아요

   Go 1.24 릴리즈 에서는 간단히 설명하는데, 훨씬 중요한 업데이트네요.

        Hacker News 의견

     * Go로 생성된 WASM 바이너리가 매우 큰 문제점이 있음. TinyGo는 이를 극복하지만 컴파일 속도가 느리고 라이브러리 선택에 주의가 필요함. 둘 다 극복하려면 많은 인내심이 필요함
          + Cloudflare workers에서 Go WASM을 시도하려면 바이너리 크기 때문에 구독이 필요함
          + 마지막 시도에서는 hello-world는 실행 가능했지만, 더 복잡한 것은 크기 제한을 초과했음
          + 안타까운 상황임
     * 놀라운 점임. 기억해야 할 사항:
          + Go의 웹어셈블리 작업은 Go 팀이 아닌 자원봉사자들에 의해 설계되고 구현되었음. 따라서 일정은 자원봉사자의 가용성에 따라 달라짐
     * Go 1.24 이전에도 Go 함수를 JS로 내보내는 것이 가능하지 않았는지 기억이 잘 나지 않음. 이전에 JS에서 내보낸 Go 함수를 문제없이 호출할 수 있었던 것으로 기억함
          + 새로운 WASI 기능이 이전에 비해 어떻게 개선되었는지 설명해주면 도움이 될 것임 (FFI를 통해 더 많은 유형을 지원하는 것 외에)
          + 두 번째 질문: 포인터를 정수로 캐스팅하여 문자열 및 복잡한 유형을 WASM 모듈의 인스턴스 메모리에서 추출할 수 있었음. Go에서 내 유형의 이진 표현이 안정적임이 보장된다면, goos=wasip1을 사용할 때 생성된 WASM 모듈에 포인터를 전달하는 이 방법이 여전히 유효한지 궁금함
     * 메인 패키지에서 대문자로 시작하는 모든 함수를 내보내는 것이 더 ""Go""스러웠을 것 같음. 내보내기는 언어에서 일반적으로 작동하므로 소문자로 시작하는 것을 명시적으로 이름 지정할 때만 컴파일러 지시문을 사용하는 것이 좋음
          + 이는 기존 cgo 내보내기 방식과 동일함. 이전의 예시를 따르는 것임. 사용성은 여전히 언어 외부에 있음
     * WASM 컴포넌트 모델과의 작업에 대한 언급이 없음
     * Go와 WASM의 가비지 컬렉션은 어떻게 작동하는지 궁금함
     * 강력한 타입과 뛰어난 WASM 지원을 갖춘 저수준 언어가 있었으면 좋겠음
     * 호스트 프로그램에서 실행 중인 WASM 모듈을 어떻게 디버그하는지 궁금함
     * 더 많은 WASM 기능에 대한 열망이 젊은 생태계를 돌이킬 수 없게 해칠까 걱정됨. Go가 WASM에 추가한 대부분의 기능은 컴포넌트 모델 제안이 이미 병합되었다면 네이티브로 수행할 수 있었음
          + 표준은 천천히 발전하고 있으며 채택이 증가함에 따라 WASI와 같은 비표준 기능을 영원히 지원해야 할 위험이 있음
"
"https://news.hada.io/topic?id=19236","AI가 신기술 채택을 저해함","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            AI가 신기술 채택을 저해함

     * AI 모델이 개발자 워크플로우에 통합되면서, 특정 기술 사용을 부추기거나 방해함
     * 대형 언어 모델이 특정 기술에 편향된 응답을 제공함에 따라, AI가 지원하기 용이한 기술을 우선 채택하려는 경향이 생겨남
     * 기존에도 문서화와 지원이 풍부한 도구가 선택되곤 했지만, AI가 이 결정 요소를 과도하게 증폭시키는 현상이 문제로 지적됨

지식 격차

     * 대형 언어 모델은 대규모 데이터셋과 긴 학습 기간을 거치므로, 출시 시점 기준으로 이미 구버전 지식을 포함하는 경우가 많음
     * 학습 cutoff 이후에 등장한 신기술에 관해서는 AI가 적절한 도움을 주지 못함
     * 예: Anthropic, OpenAI 등 주요 모델들은 2023~2024년 무렵의 지식 cutoff를 가짐
     * 지식 갭 때문에 새로운 기술을 사용하려는 이들이 AI 지원 부족으로 불편을 겪게 되며, 이로 인해 해당 기술 채택이 지연되는 현상 발생함
     * 기존에 시장 지분이 있는 기술은 열성 사용자층이 존재하기에 자료가 쌓이지만, 완전 신규 기술은 문서나 블로그 등 생성되는 자료 자체가 적어 모델 훈련에 반영되기 어려움
     * AI가 인터넷 연결 기능을 일부 제공하더라도, 명시적으로 요청해야 하거나 아예 기능이 없는 경우가 많음
     * 신기술에 대한 AI 지원 부족 → 사용자와 자료 감소 → 모델 학습 데이터 부족 → 재차 AI 지원 부족으로 이어지는 악순환 가능성 존재함
     * 최신 자바스크립트 프레임워크를 쓰려는 개발자가 AI 도움을 받으려 할 때, 모델이 충분한 안내를 주지 못하면 구방식 문서나 익숙한 도구에 대한 선택 유인이 더 커짐

시스템 프롬프트 영향

     * Claude 등 일부 AI 모델이 React와 Tailwind에 대한 선호를 자주 보여줌
     * 예: Claude에 “바닐라 HTML/CSS/JS를 사용” 요청을 했음에도 React 코드를 제안하거나, 기존 코드를 React로 재작성하려는 양상이 관찰됨
     * 일부 모델의 시스템 프롬프트(또는 비공개된 기능별 프롬프트)에 React, Tailwind, Mermaid 등 특정 라이브러리나 도구가 명시되어 있음
     * 실제 대화 예시에서 Svelte Runes 사용 요청 시 모델이 React 대안을 제시하며, 결과적으로 사용자가 React를 쉽게 수용하도록 유도하는 모습이 나타남
     * 사용자가 가장 간단한 해결책(Path of least resistance)을 택하기에, AI가 제시하는 기본 옵션이 기술 선택에 큰 영향을 미침

    테스트

     * AI 모델들이 새 웹 앱 제작을 요청받을 때, React를 추천하는지 확인하기 위한 간단 테스트 수행
          + Anthropic Claude 3.5 Sonnet: 세 번 모두 React + Tailwind로 프로젝트 생성 예시를 제공함
          + OpenAI ChatGPT 4o: 세 번 모두 React + Tailwind로 앱을 생성하고, Canvas 기능으로 미리보기 제시함
          + Google Gemini 2.0 Flash: 세 번 모두 바닐라 HTML/CSS/JS를 사용했으나, React, Angular, Vue 사용을 권장함
          + DeepSeek-V3: 바닐라 HTML/CSS/JS나 Node.js, Express.js, MongoDB, Bootstrap 같은 다양한 조합을 제시함. 다만 구체적인 코드보다 프로젝트 개요 형태로 제안함
     * 이 결과 Claude와 ChatGPT는 React + Tailwind를 매우 선호하고, Gemini는 HTML/CSS/JS 선호지만 React를 추천, DeepSeek은 기술 편차가 가장 크지만 출력 품질은 다소 개요 중심임

회고

     * 초보 개발자나 프롬프트로만 앱을 만드는 사람은 ChatGPT 등의 결과물을 그대로 수용할 가능성이 큼
     * 다른 프레임워크를 선택해도, 모델이 시스템 프롬프트 등 내부 규칙에 의해 계속 React로 유도할 수 있음
     * 이미 AI와 잘 호환된다고 알려진 기술을 선택하는 분위기가 생길 수 있으며, 이는 신규 혹은 소수 기술의 확산을 방해함
     * 대형 언어 모델의 편향이 현재 인기 기술의 수명을 늘리고, 신규 기술의 시장 진입 장벽을 높이는 방향으로 작용한다고 봄
     * AI 회사들이 모델의 기술 편향 정보를 명시적으로 공개할 필요성을 제안함
     * 향후 연구로, 특정 기술이 포함된 시스템 프롬프트의 시계열 변화와 패키지 다운로드 추이를 비교해 상관성을 찾는 방법 등을 고려할 수 있음. 다만 변수가 많아 잡음이 많을 가능성이 있음

   [참고 1] ‘가장 인기 있는 AI 챗 플랫폼’은 작성자의 주관적 관찰에 근거함
   [참고 2] Claude와 ChatGPT는 artifact, canvas 기능으로 사용자에게 쉽고 즉각적인 결과물을 제공하기 때문에, 개발 입문자나 새로운 사용자에게 특히 영향을 크게 미침

   빈익빈부익부 양극화 소멸…
   새로운 제품을 만들면 최소한 MCP 서버를 같이 만들어야…

   역설적인 것 같은데, 스스로 학습하는 능력을 키우는것이 AI 시대속에 경쟁력을 키우는 방법 같다는 생각이 듭니다.

        Hacker News 의견

     * AI는 새로운 기술 채택을 방해하지 않음
          + 새로운 기술이나 버전 업그레이드는 사람들이 익숙해지는 데 시간이 걸림
          + Stack Overflow가 새로운 기술 채택을 방해한다고 말하는 것과 같음
          + LLM은 상업적 이유로 주기적으로 재훈련됨
          + 초기 수용자들은 LLM에 의존하지 않음
     * OpenAI Codex 논문에서 예측된 사항
          + Codex가 제안하는 패키지가 더 유용할 것이라는 가정 하에 사용자가 Codex의 답변을 수용할 가능성이 있음
          + 새로운 패키지에 대한 인식 부족 가능성
          + 기존 패키지에 대해 폐기된 방법을 제안할 수 있음
          + 오픈 소스 개발자들이 이전 버전과의 호환성을 유지하려는 동기가 증가할 수 있음
     * 새로운 기술은 데이터와 급여를 빨아들이는 쓰레기라는 의견
          + 사람들이 새로운 기술에 피로감을 느낌
          + 데이터와 급여를 빨아들이지 않는 새로운 것을 제안해야 함
     * LLM이 특정 기술을 명시하면 그 기술을 사용해야 한다는 의견
          + 기술을 명시하지 않으면 기술 선택에 대해 명확히 하고 질문해야 함
          + LLM은 제공자의 프롬프트 구조에 의해 고정된 선호도를 가지지 않아야 함
          + React와 같은 편향을 방지하기 위한 작업 필요
          + 기술 회사로부터 투자받는 Anthropic에 대한 우려
          + LLM이 AWS, Azure, GCP 등에서 추천을 받을 수 있는지 여부를 결정할 수 있음
     * LLM이 Elm과 같은 언어에 유용할 것이라는 의견
          + 평가 루프에서 작동할 수 있는 에이전트와 함께 사용
     * 데이터 시각화에 matplotlib 사용 경험 공유
          + AI가 코드 없이 그래프 변경을 요청할 수 있을 정도로 잘 작동함
          + 새로운 것에 대한 문이 닫히고 있다는 느낌
          + Emacs lisp와 같은 다른 예시
     * 새로운 프레임워크와 기술 채택에 대한 LLM의 영향에 대한 질문
          + React에 대한 질문은 좋은 답변을 얻지만 새로운 프레임워크에 대한 질문은 그렇지 않음
          + AI 도구에 의존하는 개발자가 증가함에 따라 새로운 기술 채택이 어려워질 수 있음
     * Claude 3.5 Sonnet의 코드 생성 선호도 문제
          + React로 코드를 생성하거나 기존 코드를 React로 변경하는 경향
     * 최신 JavaScript 프레임워크를 사용하는 개발자에 대한 예시
          + AI 도구가 의미 있는 지침을 제공하지 못함
          + Django와 React가 당연한 선택으로 여겨지는 세계가 더 저렴한 웹 앱 개발을 가능하게 함
     * Anthropic이 추진하는 MCP 표준의 예시
          + Claude가 프로토콜을 이해할 수 있도록 최적화된 긴 텍스트/MD 제공
          + 새로운 플러그인/서버 부트스트랩에 유용
          + 몇 달 된 표준이 이미 수백 개의 구현을 가짐

   이건 스택 오버플로도 마찬가지 아닐까요?
"
"https://news.hada.io/topic?id=19248","20년 된 PSP, 이제 WPA2 WiFi 네트워크 연결 가능","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   20년 된 PSP, 이제 WPA2 WiFi 네트워크 연결 가능

     * Acid_Snake와 ARK 개발팀이 소니 PSP를 위한 ARK 커스텀 펌웨어의 중요한 업데이트를 발표
     * 이 업데이트는 PSP가 WPA2 암호화된 와이파이 네트워크에 연결할 수 있도록 함
     * 이는 개발자 Moment가 만든 wpa2psp 플러그인 덕분에 가능해짐

PSP의 WPA2 지원 필요성

     * PSP는 소니의 공식 지원이 중단되었지만, 여전히 홈브류 및 커스텀 펌웨어 업데이트 로 유지보수되고 있음
     * 최신 WiFi 표준(WPA2, WPA3)이 보편화되면서, PSP와 같은 구형 기기는 인터넷 연결에 어려움을 겪고 있었음
     * WPA2는 현재 가장 널리 사용되는 암호화 방식이며, WPA3는 아직 보급률이 낮음
     * WiFi 기능이 PSP의 핵심 기능 중 하나였기에, WPA2 지원 요청이 지속적으로 있었음
     * 개발자 Moment가 wpa2psp 플러그인의 소스 코드를 공개함으로써, ARK 팀이 이를 CFW에 통합할 수 있었음

WPA2PSP의 제한 사항

     * 이 플러그인은 첫 번째 버전으로, 몇 가지 제한 사항이 있음:
          + 2.4 GHz만 지원: WPA2는 2.4 GHz 와이파이에서만 작동함. 라우터가 2.4 GHz와 5 GHz를 단일 SSID로 사용 중이라면, 이를 분리하고 PSP를 2.4 GHz 네트워크에 연결해야 함.
          + WPA2 AES만 지원: AES (AES-CCMP) 암호화가 필요함. TKIP는 지원되지 않음.
          + WEP/WPA 호환성: WPA2가 활성화되면 WEP 및 WPA 암호화는 작동하지 않음. WEP 또는 WPA를 다시 사용하려면 WPA2를 비활성화해야 함.
          + WPA2/WPA3 혼합 모드: 라우터가 WPA2/WPA3 혼합 모드로 설정된 경우, PSP가 IP 주소를 얻는 데 어려움을 겪을 수 있음. DHCP 대신 수동으로 IP 주소를 설정해보는 것이 좋음.

ARK-4 다운로드 및 설치 + PSP의 WPA2 지원 활성화

     * ARK4 최신 버전 다운로드
          + WPA2 지원이 추가된 rev160 버전 다운로드 가능
     * 압축을 풀고 UPDATE 폴더를 /PSP/GAME/ 경로에 복사
     * PSP의 GAME 메뉴에서 ARK4 Updater 실행
     * Extras > Custom Firmware Settings에서 WPA2 활성화
     * PSP 재부팅 후 WPA2 WiFi 네트워크에 연결
     * 완료!

     WPA2는 2004년 인증되었으며, PSP가 출시될 당시(2004년)에는 필요하지 않았던 기능이었음. WPA3는 2018년 등장했으나 아직 보급이 느린 상태.

        Hacker News 의견

     * 이 작업이 어떻게 이루어졌는지에 대한 기술적 설명이 있는지 궁금함. Git 히스토리를 살펴보았지만, 흥미로운 커밋을 발견했음. 이 커밋은 다른 코드를 패치하는 것처럼 보이지만, 아마도 모든 논의는 Discord에서 이루어졌을 것임. PSP 소프트웨어 이미지 구조를 이해하지 않고 이런 세부사항을 요구하는 것은 무리일 수 있음. 하지만 WPA 1과 2의 차이를 더 잘 이해하는 사람에게는 명백할 수도 있음. 그럼에도 불구하고 나는 무척 궁금함
     * PSP를 정말 사랑함 - 당시에는 정말 놀라운 하드웨어였음. 내 인생의 휴대용 기기는 iPod와 Game Boy Advance였음. 친구가 일본에서 수입한 모델로 Wipeout을 실행하는 것을 보여주었을 때, 내 눈을 믿기 어려웠음. 그 이후로 몇몇 기술만이 이러한 미래적인 느낌을 줄 수 있었음. Sony의 최고 업적 중 하나였음
     * PSP와 관련된 특별한 경험이 있음, 게임과는 전혀 관련이 없음. 2009년에 중동에 배치되었을 때, 연결이 어려웠음: 전화 카드를 사용해 집에 전화를 걸었음. 대안으로 PSP에서 Skype를 사용할 수 있었고, 통화 비용이 매우 저렴했음. 바레인의 해군 기지 밖 Cinnabon 같은 카페에서 Wi-Fi를 사용해 집에 전화를 걸었던 기억이 남. 좋은 추억을 상기시켜줘서 고맙음
     * wololo에 대해 중요한 두 가지가 있음. 하나는 PSP를 탈옥한 것임. 그리고 Magic the Gathering의 최고의 오픈 소스 대안인 Wagic을 만들었음
     * 2.4 GHz만 지원함. 이는 라디오의 하드웨어 제한이라고 생각함, 소프트웨어로는 변경할 수 없음
     * 20년 된 콘솔에 돈을 받지 않고 많은 시간을 투자한 것이 얼마나 놀라운지 생각할 수 없음. PSP가 너무 훌륭해서 WiFi 네트워크의 스크린샷만 봐도 향수를 불러일으킴
     * 반도체는 마법 같은 것이며, 그들의 빠른 노후화는 조금 슬프다고 항상 느꼈음. 여전히 유용하고 관련성을 유지할 수 있다는 것이 정말 멋짐
     * 사람들이 여전히 PSP 홈브루 씬을 유지하고 있다는 것이 아름다움. PSP 홈브루는 내가 프로그래밍과 보안에 관심을 갖게 된 계기였음
     * 멋짐, 아직 내 PSP가 있고 이제는 PSP를 연결하기 위해 핫스팟의 보안을 끌 필요가 없음. 작년에 Toughbook에서 파나소닉 프리즘 셀을 원래 PSP 배터리 보드에 스폿 용접하여 괜찮은 배터리를 얻었음. 중국산 배터리는 오래가지 않았고 원래 배터리는 오래 전에 죽었음
     * PSP는 걸작 같은 기기였음. 사람들이 여전히 그것을 만지작거리고 있다는 것이 기쁨
"
"https://news.hada.io/topic?id=19287","X 사용자, "Signal.me" 링크 게시 불가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      X 사용자, ""Signal.me"" 링크 게시 불가

     * Elon Musk의 소셜 미디어 플랫폼 X는 암호화 메시징 서비스 Signal의 ""Signal.me"" 링크를 차단 중임. 이 링크는 사용자가 메시징 앱을 통해 직접 연락할 수 있도록 하는 URL임.
     * X는 DM, 공개 게시물, 프로필 페이지에서 ""Signal.me"" 링크 게시를 차단하고 있으며, 사용자는 다양한 ""메시지 실패"" 프롬프트를 받음.
     * ""Signal.me"" 링크를 프로필에 추가하려고 하면 ""계정 업데이트 실패. 설명이 악성 코드로 간주됨""이라는 오류 메시지가 나타남.
     * 이미 게시된 ""Signal.me"" 링크를 클릭하려고 하면 ""이 링크는 안전하지 않을 수 있음""이라는 경고 페이지가 나타나며, 사용자는 경고를 무시하고 원래 URL로 이동할 수 있음.
     * ""Signal.me"" 링크 차단은 최근에 이루어진 것으로 보이며, 다른 Signal 링크는 차단되지 않음.
     * Signal은 기자들에게 중요한 도구로, 모든 메시지가 종단 간 암호화되며, 기기에만 저장되고 클라우드에 저장되지 않음.
     * Signal은 연방 직원들이 기자들에게 정보를 제공할 때 중요한 역할을 하고 있음.
     * Signal 사용자는 여전히 X에 Signal 핸들을 게시할 수 있으며, 이를 Signal 앱에 복사하여 붙여넣을 수 있음.

        Hacker News 의견

     * 트위터나 그들의 정책을 옹호하는 것은 아님. (참고: 엘론이 인수한 후 트위터를 떠남. 그의 위선과 파시스트적인 생각을 싫어함)
          + 이것은 ""합법적인 실수""일 수 있음. 트위터 규모에서는 대부분의 안전하지 않은 URL 보호 및 탐지가 자동화되어 있음
          + URL 단축기가 종종 ""무작위로"" 차단되는 것처럼, 공유된 URL의 일부가 악성 소프트웨어/피싱/기타 금지된 콘텐츠를 가리키기 때문에 모든 URL이 차단됨. signal.me가 불법 링크의 양을 감지하고 있을 수 있음. Signal은 확실히 강하게 성장 중임. 따라서 signal.me 링크가 트위터에서 점점 더 많이 보임. 대부분은 합법적인 링크지만 불법 링크의 양도 증가할 것임
          + 이는 자동 차단을 유발할 수 있음
          + 진짜 문제는 고의적이었다고 해도 (음모론: 마크가 엘론에게 메시지를 보내서 Whatsapp의 가장 큰 경쟁자의 성장을 억제해달라고 요청했을 수도 있음) 트위터는 ""과도한 자동화, 죄송함""이라는 변명 뒤에 쉽게 숨을 수 있음
          + 특히 이 자동화가 제대로 유지되지 않고, 전문가 팀에 의해 세밀하게 조정되고 지속적으로 조정되지 않는다면, 트위터 인수 후 많은 전문가들이 떠나거나 해고됨
     * 미국에서 사람들이 여전히 X를 사용하는지 궁금함. 그렇다면 왜인지? 무엇이 그들을 플랫폼에 머물게 하는지 (소유자가 자신의 나라를 파괴하는 데 한 걸음 더 가까워짐)
     * ""signal.me"" 링크가 정확히 무엇인지 궁금해짐. 자세한 내용은 여기에서 확인 가능함:
          + https://signal.miraheze.org/wiki/Signal.me_URLs
          + https://signal.miraheze.org/wiki/Usernames#Username_links
          + Signal.me 링크는 전화번호나 사용자 이름을 다른 사람에게 쉽게 보내는 방법일 뿐임. 암호화된 신원 없음. 전화번호나 사용자 이름 보호 없음. Signal 사용자는 트위터/X를 통해 전화번호나 사용자 이름을 보낼 수 있음
          + 암호화된 사용자 이름 형식은 일부 신원 보호를 제공하지만, 활성 상태일 때는 Signal 서버에 연결된 사용자 이름을 요청할 수 있음
          + 관련된 사람들은 처음부터 이런 일을 위해 트위터/X를 사용하지 말아야 함. Mastodon이 대안으로 떠오르지만, 사실 다른 어떤 것도 가능함
     * signal.me 링크는 # 이후 부분을 제거하면 모두 동일함
          + HTTP(S) 요청을 수행할 때 요청 URL에서 # 이후 부분을 제공하지 않음. 웹 브라우저 자체에서만 해석됨. 그들의 안티스팸 시스템도 동일하게 해시를 무시할 가능성이 있음
          + 예시 링크 (차단됨): https://signal.me//…
          + 해시 없이 (차단됨): https://signal.me/
          + 경로에 아무 글자나 추가하면 차단되지 않음 (예: ""abc""): https://signal.me/abc#eu/P01wpUmC4nT2BBTwMrPAw7Nxcp81055tKHG...
     * DOGE가 Signal을 통신 플랫폼으로 사용하고 있다는 보고가 있어 아이러니함
     * 아침에 시간이 좀 있어서 X에서 Signal 링크를 공유할 수 있는 간단한 사이트를 만듦: https://link-in-a-box.vercel.app
          + 누군가에게 도움이 될 것 같으면 공유 부탁함. 피드백이 있으면 스팸도 환영함
     * 여기에서는 signal.me의 소유권이 거의 가려져 있어서 궁금했음 (Cloudflare와 WHOIS 프라이버시 뒤에 있음). 인프라 도메인에 대해 이렇게 하는 것은 좋은 생각이 아님. 이는 수동 검토를 더 어렵게 만들어 지속적인 과잉 차단을 유도함. 적어도 signal.me를 언급하는 공식 문서가 있음: https://support.signal.org/hc/en-us/…
          + (페이지는 Bing 인덱스에 있지만, ""signal.me""는 검색 엔진에 의해 중지 단어로 처리되는 것 같음)
     * 며칠 전 JD Vance가 뮌헨에 가서 EU 지도자들에게 ""유럽에는 표현의 자유 문제가 있다""고 말함
     * 표현의 자유 절대주의는 가혹함
     * 비슷한 맥락에서 스웨덴 군대는 군사 업무를 하는 사람들이 기밀이 아닌 통화 및 메시지에 Signal을 사용할 것을 권장함: https://cornucopia.se/2025/02/… (스웨덴어)
"
"https://news.hada.io/topic?id=19291","Flea-Scope: $18 소스 공개 USB 오실로스코프, 로직 분석기 및 기타 기능 [pdf]","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Flea-Scope: $18 소스 공개 USB 오실로스코프, 로직 분석기 및 기타 기능 [pdf]
"
"https://news.hada.io/topic?id=19293","Flash Learn - 에이전트 LLM을 모든 파이프라인에 연동하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Flash Learn - 에이전트 LLM을 모든 파이프라인에 연동하기

     * ""에이전트LLM(Agent LLM)"" 을 자신의 워크플로우 및 ETL 파이프라인에서 쉽게 활용할 수 있도록 하는 라이브러리
     * 데이터 변환, 분류, 요약, 재작성 등의 작업을 간단하게 실행할 수 있으며, JSON 기반의 정의로 이해하기 쉽고 유지보수가 용이
     * LiteLLM, Ollama, OpenAI, DeepSeek** 및 OpenAI API 호환 모델을 지원
     * 주요 기능
          + 간단한 JSON 정의 기반 파이프라인 구성
          + 1000개 calls/min 처리 가능 (대량 작업 지원)
          + 다양한 LLM API 지원 (OpenAI, DeepSeek, LiteLLM 등)
          + 멀티스텝 에이전트 활용 가능
          + 데이터 변환, 분류, 요약, 재작성 등 가능

   Llm연동
"
"https://news.hada.io/topic?id=19308","Scripton - 실시간 시각화 기능이 내장된 Python IDE,","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Scripton - 실시간 시각화 기능이 내장된 Python IDE,

새로운 종류의 Python IDE

     * 동적 시각화: Scripton은 Python 스크립트에서 직접 실시간 시각화를 지원함. 노트북, 서버, 브라우저가 필요하지 않음. 시각화는 IDE 내 전용 탭에 표시됨.
     * 통합 플로팅 툴킷: Plotly와 Observable Plot의 기능을 Python에 직접 노출하는 내장 플로팅 툴킷을 포함함. 설치가 필요 없으며, Scripton에서 실행 시 자동으로 사용 가능함.
     * 과학 및 공학을 위한 실시간 시각화: Scripton은 고성능의 프로세스 간 통신과 GPU 가속 렌더링을 결합하여 실시간 시각화를 제공함. 2D NumPy 배열 및 PyTorch 텐서와 같은 행렬 시각화가 간단함.
     * 내장 그래픽 툴킷: Scripton의 캔버스 API는 빠르고 강력한 2D 래스터 그래픽 API를 제공함. 출력은 IDE 내 전용 탭에 실시간으로 나타남.
     * 상호작용성 프로토타입: Scripton의 UI 툴킷을 사용하여 스크립트에 쉽게 상호작용성을 추가할 수 있음. 슬라이더와 버튼을 통해 사용자 인터페이스를 동적으로 업데이트할 수 있음.
     * 풍부한 REPL: Scripton은 코딩 환경의 자연스러운 확장이 되는 독특한 Python REPL을 포함함. 자동 완성, 다중 라인 편집, 다중 커서 지원 등의 기능을 제공함.
     * 간편하고 빠른 디버깅: Scripton에서 디버깅은 간단함. 중단점을 설정하고 실행하면 됨. 특별한 설정이 필요하지 않음.
     * 다양한 서드파티 라이브러리 지원: Matplotlib, Seaborn, PyTorch, Pandas, PIL, OpenCV 등 다양한 서드파티 라이브러리를 지원함. 각 라이브러리의 출력이 IDE 내에 표시됨.
     * 진지한 작업과 재미있는 탐험: 연구 및 산업 응용부터 창의적인 탐험까지 다양한 요구를 충족하도록 설계됨.
     * 시스템 요구 사항: 현재 macOS(Apple Silicon 및 Intel 기반 모델)에서만 지원됨. Windows 및 Linux 지원 예정. Python 3.8 이상 필요. 다양한 Python 환경 관리자를 지원함.

     * 30일 무료 평가판
     * 월간결제: $20 + $2
     * 연간결제: $220 + $22

   앗 유료군요

        Hacker News 의견

     * 나는 로봇 공학자/과학자이며, 다양한 고정밀/고속 데이터의 시각화를 많이 수행함
          + 수천 Hz의 시계열 데이터, 여러 카메라의 RGB/깊이 이미지, 모델 디버깅을 위한 여러 레이어 출력 시각화 등을 포함함
          + 오랫동안 파이썬 스크립트로 만든 나만의 관찰 도구를 사용했지만, rerun으로 모두 대체했음
          + rerun은 간단한 pip 설치 가능한 라이브러리이며, 오픈 소스임
          + rerun은 활발히 개발 중이며, 매달 새로운 기능과 변경 사항이 추가됨
          + LLM이 rerun 코드 생성에 서툴러서, 문서를 스크랩하여 인턴들이 LLM에 쿼리하기 전에 사용하도록 했음
     * 나는 파이썬 개발을 오래 해왔으며, 다양한 용도로 사용해왔음
          + 웹 앱, 웹 API, GUI 도구, 이미지 조작, 데이터 처리 및 시각화, 데이터 과학, 머신러닝 등
          + 여러 IDE를 사용해왔으며, 현재는 PyCharm을 사용 중임
          + 장점: 매우 예쁘고, 시간 절약 기능이 있음
          + 단점: Mac 전용, 구독 모델, 코드와 IDE를 연결해야 함
          + 단점 중 하나라도 나에게는 큰 문제임
     * 비슷한 맥락에서 Spyder IDE도 있음 (MIT 라이선스)
     * OP, 당신의 도구를 잘못된 사람들에게 판매하고 있음
          + HN은 적합한 대상이 아님
          + Matlab에서 1년에 $1000를 지불하는 사람들을 찾아 그들을 끌어와야 함
     * 런칭을 축하하며, 아름다워 보임
          + AI 채팅 어시스턴트가 없는 것이 아쉬움
          + VSCode와 Jetbrains Fleet도 잘 보이며, 시각화는 큰 장점임
          + rerun, dearpygui, VSCode 플러그인과 같은 무료 대안과 경쟁하기 어려울 수 있음
     * 구독료가 즉각적인 거부감을 줌
          + 이 프로젝트의 전문성과 잠재적 번아웃이 걱정됨
          + 오픈 소스의 시험을 거쳐야 할 필요가 있음
     * 훌륭한 제품이며, 창작자에게 찬사를 보냄
          + Mac 전용과 높은 구독료는 어려운 판매임
          + 다른 옵션들이 반드시 $20 더 나쁜 것은 아님
          + 그래도 이 프로젝트를 주시할 것임
     * 구독을 중단하면 어떻게 되는지 궁금함
          + scripton 라이브러리는 오픈 소스이며, lyra orion plot 함수는 이미지 파일을 출력할 수 있는지 궁금함
          + 제품 출시를 축하함
     * 매우 세련된 UI
          + 구독 가격에 신경 쓰지 않음
          + UI 툴킷이 특히 흥미로우며, streamlit을 대체할 것을 찾고 있었음
     * 놀라운 제품이지만, 구독 가격이 마음에 들지 않음
          + 최소한 취미용 요금제를 고려해보면 좋겠음
"
"https://news.hada.io/topic?id=19200","자동차를 위한 물리적 컨트롤 설계의 미묘한 예술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       자동차를 위한 물리적 컨트롤 설계의 미묘한 예술

     * 자동차 기후 제어 시스템 재구상
          + 2년 전, 자동차의 기후 제어 시스템을 재구상하는 방법을 탐구함. 터치스크린에 지나치게 의존하고 복잡한 인터페이스를 가진 자동차 제조사에 실망함. 승객의 편안함을 최소한의 상호작용으로 제공하는 것이 목표였음. 열적 편안함은 공기 온도, 열 복사, 공기 흐름, 습도라는 네 가지 환경 요인에 따라 달라짐. 이러한 요인들이 특정 범위 내에 있을 때 대부분의 사람들에게 편안한 환경을 제공할 수 있음. 이를 통해 자동화에 크게 의존할 수 있게 됨.
          + 온도 다이얼로 제어되는 자동화 시스템을 만듦. 이 시스템은 팬 속도와 좌석 난방을 결정함. 설정 온도에서 크게 벗어나면 팬 속도와 좌석 난방 또는 냉각을 조절함.
          + 첫 번째 디자인 개념은 물리적/터치 인터페이스를 혼합하여 사용함. 자동화 시스템이 팬 속도와 좌석 난방을 설정하지만, 운전자가 이를 항상 무시할 수 있음.
          + 두 번째 반복에서는 좌석 난방을 자동화 시스템에서 제거함. 이는 개인적인 기능이므로 개별적으로 제어하는 것이 더 나음. 터치 디스플레이 위에 다이얼 디자인을 도입하여 자동화 시스템을 일시적으로 무시할 수 있도록 함.
     * 적절한 하드웨어 찾기
          + 터치 디스플레이에 다이얼을 장착하려는 초기 계획을 세움. 다양한 구현을 테스트한 결과, 이 기술은 충분히 좋지 않다는 것을 발견함. 정확한 터치 이벤트를 등록하는 것이 까다로워 다이얼 주위 공간을 비워두어야 함.
          + Scott Bezek의 오픈 소스 Smart Knob 프로젝트를 발견함. 브러시리스 DC 모터를 사용하여 아날로그 다이얼을 에뮬레이트함. 모터의 힘과 저항을 조절하여 소프트웨어로 완전히 제어되는 가짜 디텐트를 생성할 수 있음. 진동 모터가 다이얼을 누를 때 버튼 누름을 시뮬레이트함. 작은 디스플레이와 결합하여 거의 모든 유형의 물리적 다이얼과의 상호작용을 시뮬레이트할 수 있는 완전히 사용자 정의 가능한 물리적 제어를 생성함.
          + Seedlabs가 이를 사전 제작된 개발 키트로 전환함. 장치의 기능을 보여주는 몇 가지 예제가 포함됨.
     * 실험
          + 회전 다이얼은 디자인 관점에서 간단해 보일 수 있지만 탐구할 것이 많음. 소프트웨어와 촉각 피드백을 완전히 제어할 수 있다는 사실은 다양한 상호작용 유형을 알아내는 데 훌륭한 기회를 제공함.
          + 물리적 제어를 보면 크기, 모양, 무게와 같은 물리적 속성에서 특정 기대를 자동으로 얻음. 이러한 '어포던스'는 객체를 어떻게 사용할 수 있는지를 알려줌. 예를 들어, 둥근 다이얼은 회전할 수 있음을 나타냄. 큰 다이얼은 더 중요한 기능을 제어하며, 작은 다이얼은 덜 중요한 기능을 제어함. 유사하게, 라벨과 같은 시그니파이어는 제어의 기능, 단계 수, 상태에 대해 설명할 수 있음.
          + Braun의 디자이너들은 완벽한 무게, 디텐트 강도, 시그니파이어를 얻기 위해 수많은 시간을 보냄.
          + 다이얼을 회전할 때의 촉각 피드백은 커뮤니케이션 레이어임. 다이얼이 미디어 소스와 같은 다양한 설정을 제어할 때, 변화의 중요성을 나타내기 위해 하드 디텐트를 가짐. 다이얼이 볼륨과 같은 단일 기능 내의 다양한 값을 제어할 때, 디텐트는 더 작음.
     * 촉각 인터페이스 디자인 가이드라인
          + 유사한 작업 간에 촉각 패턴을 일관되게 유지함. 문 손잡이가 문을 당기거나 밀어야 하는지를 전달해야 하는 것처럼, 다이얼은 회전의 느낌과 무게를 기대하게 함. 촉각 피드백은 이를 맞춰야 하며, 유사한 작업 간의 상호작용은 혼합되지 않아야 함.
          + 정밀하고 빠른 조정을 모두 허용함. 볼륨과 같은 특정 기능은 두 가지 다른 동작을 허용함. 일반적인 사용 중에는 승객이 볼륨을 작은 단계로 조정하여 선호도에 맞춤. 그러나 때때로 승객은 볼륨을 빠르게 음소거해야 함. 두 가지 옵션이 모두 가능해야 함.
          + 물리적 및 시각적 피드백을 동기화함. 다이얼의 물리적 회전을 디지털 인터페이스와 일치시키는 것이 중요함. 다이얼이 270° 회전할 수 있다면, 인터페이스도 270°여야 함. 디텐트의 위치를 인터페이스의 위치와 일치시키는 것이 두 번째로 중요함.
          + 값 범위에 따라 디텐트 강도를 반비례적으로 조정함. 데이터 범위가 [0,99]인 경우 디텐트는 미묘해야 함. 범위가 [0,3]처럼 작으면 디텐트는 다이얼의 위치를 명확하게 전달하기 위해 더 강해야 함.
          + 중요한 값에 강한 디텐트를 배치함. 더 세밀한 커뮤니케이션을 허용하기 위해 주요 값과 부차적인 값을 디텐트 강도로 구분할 수 있음.
          + 극단적인 값을 나타내기 위해 저항과 단계 크기를 다양하게 함. 극단적인 값에 대해 저항을 증가시키는 것은 이 행동의 결과가 일반 값보다 더 강렬하다는 것을 나타냄.
          + 상태 변경 전에 미묘한 ""미리보기"" 저항을 추가함. 힘의 곡선은 선형이 아니라 로그형이어야 함. 이렇게 하면 디텐트에 가까워질수록 저항이 증가하여 단계가 정확히 언제 트리거되는지를 명확하게 함.
     * 개념을 현실로 전환
          + 디자인 원칙을 확립한 후, 이전에 만든 개념을 구현함. 온도, 팬 속도, 좌석 난방의 세 가지 기능을 가진 가짜 자동화 시스템을 만듦. 이전 기사에서 좌석 난방을 자동화 시스템에 추가하는 것이 적합하지 않다고 결론지었음. 이는 여전히 사실이지만, 다이얼을 통해 세 가지 다른 기능을 제어할 수 있는지를 탐구하고자 함.
          + 온도 제어를 위해 변화의 크기를 전달하기 위해 점진적인 촉각 저항을 추가함. 현재 온도에서 멀리 조정할수록 더 많은 저항을 느낌. 이는 팬 속도와 좌석 난방을 증가시킬 것임.
          + 팬 속도와 좌석 난방은 동일한 촉각 프로파일을 받음. 팬 속도는 다섯 개의 명확한 단계, 좌석 난방은 네 개의 단계로, 첫 번째는 강한 피드백을 가진 ""꺼짐"" 위치임. 다이얼을 눌러 기능을 순환할 수 있음.
          + 디스플레이 하단의 작은 페이지네이터를 통해 활성 기능을 강조함. 그러나 자동화 시스템 내의 기능 간의 관계를 전달해야 함. 온도를 설정한 후 팬 속도와 좌석 난방이 변경되면 운전자는 기능을 순환하지 않고도 이를 인식해야 함.
     * 결론
          + 하나의 다이얼에서 세 가지 다른 데이터 유형을 표시하는 것은 가능하지만 확실히 최대임. 네 번째 기능을 추가하면 인터페이스에서 위치를 추적하기가 너무 어려워짐. 작은 디스플레이가 많은 정보를 보여줘야 하는 것이 주요 과제 중 하나임. 세 가지 데이터 유형이 연결된 자동화 시스템을 만들었기 때문에, 작은 디스플레이를 통해 이 연결을 전달하는 것이 어려움.
          + 두 가지 기능만 있는 경우 훨씬 더 쉬워짐. 온도와 팬 속도만 있으면 개념적으로 더 의미가 있으며, 인터페이스에 자동화 시스템의 상태를 명확하게 전달할 수 있는 충분한 공간이 있음.
          + 모든 실험 후, 두 가지 기능이 있는 회전 다이얼이 이해하고 조작하기 쉬움. 자동화 시스템에 의존하면 상호작용 횟수를 최소화할 수 있으며, 필요할 때 운전자가 쉽게 무시할 수 있음. 이상적으로는 좌석 난방도 물리적 제어로, 승객이 여러 번 누르지 않고 한 번의 버튼 누름으로 선호 설정을 할 수 있도록 함.
     * 오늘날의 구현 예
          + 두 가지 흥미로운 솔루션을 가진 자동차 제조사를 강조하고자 함. 첫 번째는 Jaguar로, 세 가지 기능을 가진 다이얼에 깊이 차원을 추가하여 영리한 솔루션을 가짐. 기본적으로 다이얼은 온도를 제어함. 다이얼을 누르면 좌석 난방이 활성화되고, 다이얼을 당기면 팬 속도가 활성화됨. 도로를 주시하면서 배우고 조작하기 쉬움. 불행히도 대부분의 자동차 제조사처럼 Jaguar는 터치스크린을 선호하여 물리적 기후 제어를 중단함.
          + 두 번째는 Skoda로, 현재 고급 모델에서 세 개의 'Smart Dials'를 가진 흥미로운 개념을 가짐. 각 승객은 온도를 제어하는 다이얼을 가지고 있으며, 눌러서 좌석 난방을 제어함. 운전자는 중간 다이얼을 최대 6가지 다른 기능, 예를 들어 볼륨, 드라이브 모드, 팬 속도, 공기 방향을 제어하도록 구성할 수 있음. 간단하고 훌륭한 디자인으로, 특히 오늘날의 터치 인터페이스 트렌드를 고려할 때 더 많은 칭찬을 받을 만함.
          + 가장 인기 있는 기사에서 자동차의 터치스크린 증가에 대해 설명함. 터치스크린은 특히 내비게이션과 같은 더 복잡한 상호작용에 필수적임. 그러나 기후 제어와 같은 빈번하고 간단한 상호작용은 터치 인터페이스에 포함되어서는 안 됨.
          + 자주 인용되는 이유는 비용임. 그러나 놀랍게도 Skoda와 Renault와 같은 예산 브랜드가 오늘날 물리적 제어를 제공하여, 단순히 비용의 문제가 아니라 우선순위의 문제임을 보여줌. 터치 전용 인터페이스를 가진 자동차 제조사는 인체공학과 안전보다 비용과 마케팅을 우선시함.
          + 물리적 제어를 조작하는 데는 고유한 만족감과 품질이 있음. 수년 동안 Mercedes와 같은 브랜드는 스위치와 버튼의 느낌을 완벽하게 하기 위해 수천 시간을 소비함. 물리적 제어를 조작하는 느낌은 자동차에 고유한 품질과 특성을 부여함. 이 느낌은 터치스크린과 함께 사라졌으며, 따라서 대부분의 현대 차량에서도 사라짐.
          + 더 많은 자동차 제조사가 물리적 제어를 다시 도입하고 이를 차량 내 경험의 중요한 부분으로 고려하기를 바람. 이 프로젝트를 통해 물리적 제어를 설계할 때 탐구할 것이 많음을 보여주었으며, 이 프로젝트가 다른 사람들에게 영감을 주기를 바람. Seedlabs 개발자 키트를 여기에서 찾을 수 있으며, 내 코드를 GitHub에 공개함.

        Hacker News 의견

     * 저자는 디지털 제어 설계에 대해 깊이 고민한 점이 칭찬받을 만함. 대부분의 자동차 제조업체가 터치스크린에 아무거나 넣는 전략과 대조적임
          + 하지만 복잡한 모드 제어의 이점에 대해 여전히 의문이 있음. 2016년형 자동차는 세 개의 노브를 사용하여 시각적 확인 없이 온도, 팬, 공기 위치를 조절할 수 있음
          + 이 자동차에는 온도 조절 모드가 없지만, 온도를 조절하는 것은 간단하며, 다른 자동차에서도 모드를 자주 조정해야 함
     * SmartKnob의 창시자는 UX 논의가 많이 이루어져 놀라움을 느낌
          + 초기 프로토타입과 데모에서 화면을 모드/메뉴 인터페이스로 사용한 것을 약간 후회함. 화면은 멋진 데모 비디오에 적합하지만, 햅틱과 전용 버튼을 사용하는 것이 더 잠재력이 있다고 생각함
     * 저자의 작업과 지능형 기능은 흥미로움. 그러나 몇 가지 우려 사항이 있음
          + 두 개의 노브로 설계하려다 보니 각 노브가 다중 모드가 되어 근육 기억의 이점이 사라짐. 햅틱 피드백이 도움이 될 수 있지만, 사용자가 익숙해지기까지 시간이 걸릴 수 있음
          + 햅틱 피드백이 장갑을 낀 상태에서도 작동할지 의문임
          + 많은 수동 시스템이 세 개의 노브를 사용하며, 이는 항상 동일한 기능을 수행함
     * 자동차 제어 설계는 쉬움. 엔지니어들이 정밀성과 인체공학을 위해 100년 동안 조정한 것을 산업 디자인 학위 소지자에게 맡기면, 모든 것이 사라짐
     * 물리적 제어의 간과된 기능은 실내에 정체성과 경험을 제공함
          + 자동차에 집착했던 어린 시절, 다양한 브랜드가 실내를 배치하는 방식을 보는 것을 좋아했음
          + 3000파운드 이상의 물체는 물리적으로 누르고, 밀고, 클릭 소리를 들어야 함
     * 블로그 작성자의 최종 디자인은 기본적으로 Ford의 F-시리즈에서 사용하는 것과 유사함. Ford의 다이얼은 몇 가지 추가 기능이 있음
          + 온도 다이얼을 끝까지 돌리고 강하게 누르면 최대 제상 모드가 켜짐
          + 시스템이 꺼져 있을 때 다이얼을 돌리면 켜짐
          + 다이얼은 크고 고무로 되어 있어 더러운 손이나 장갑을 낀 상태에서도 쉽게 잡을 수 있음
     * 나이가 들면서 디자이너들이 간과하는 것은 노화된 시력임. Honda의 제어는 괜찮지만 작은 디스플레이는 정지 상태에서도 보기 어려움
          + 밤에 운전 중에는 불가능함. 아이콘이 매우 작음
     * 터치스크린이 왜 필요한지 이해하지 못함. Mazda의 터치리스 스크린을 선호하며, 2004년형 BMW X5의 다이얼을 돌려 온도를 미세하게 조정할 수 있는 점이 좋음
          + 온도를 적당히 설정하고, 얼굴과 손에 닿는 공기가 너무 뜨겁거나 차가우면 다이얼을 돌리면 됨
     * 자동차 제조업체들은 이 사람을 고용하여 인터페이스를 구축해야 함. 터치스크린은 운전 중 자주 조작해야 하는 제어에 사용되어서는 안 됨
     * 이 글을 읽으면서 인간-컴퓨터 상호작용의 새로운 암흑 시대를 경험하는 느낌임. 2008년에 HCI를 배웠고, 모든 축적된 지식이 사라짐
"
"https://news.hada.io/topic?id=19207","AI가 개발자를 대치할 수 있을까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AI가 개발자를 대치할 수 있을까?

     * ""AI는 사람 개발자, 나아가 개발 조직, 더 나아가 소프트웨어 개발 전 사이클을 대치할 수 있을까?""
     * AI의 발전으로 인해 알고리즘 코딩 능력이 향상되었으나, 대부분의 기업은 최고 수준의 알고리즘 능력을 필요로 하지 않음
     * AI는 버그가 포함된 코드로 학습되므로, 생성된 코드에도 버그가 존재할 수 있음
     * 가장 중요한 첫 번째 이슈는 AI가 버그를 발견하기 위해 모든 시나리오를 테스트하고 수정해야 한다는 것인데, 이건 어려울 것 같음
     * 더 큰 문제는 소프트웨어 개발은 단순한 코딩을 넘어서는 복잡한 문제를 해결하는 과정을 포함한다는 것
     * 소프트웨어 개발에 포함된 것들:
          + 요구 사항의 수집과 정리
          + 자원의 제약에 따른 해결 우선순위 설정
          + 미래를 고려한 Platform/Architecture 선택과 설계
          + 진짜 코딩 - 단위/모듈 테스트 - 디버깅 - 코드 리뷰
          + End2End (UX) 테스트
          + OPs라고 퉁칠 수 있는 불리는 다양한 운영 이슈들
          + 미션 크리티컬한 소프트웨어의 경우 오만가지 edge case에 대한 formal 한 검증
          + 소프트웨어를 회사의 Biz 목표, vision에 align 된 채 진화시키는 일
     * 현재 AI는 '진짜 코딩' 부분에서 좋은 성과를 내고 있고, 일부 영역에서는 인간의 지시에 따라 의미 있는 도움을 주고 있음
     * 문제의 핵심은 이런 과정이
          + 이전 버전과의 호환성을 필요한 만큼 유지하면서,
          + 고객 집단이 자연스럽게 느끼도록,
          + '어쩌면' 같이 일하는 진짜 사람 개발자가 놀라지 않게
          + 다른 AI와 협업 관계를 유지하면서 이루어 져야 한다는 것
     * 즉 '우아한 소프트웨어 형상 관리'
     * 그래서 AI는 개발자, 개발팀, 넒은 의미의 소프트웨어 개발 조직을 완전히 대체할 수 없음

   아주 간단하게
   기획서만 넣으면 개발이 완료되는 수준이 올 경우 대체되었다 평가할수 있겠음
   근데 이 날이 언제 오려나

   AI가 대체하는건 소프트웨어 개발조직이 아니라 PM, PO 조직일 겁니다.

   프로그래머를 해고하고 AI로 대체하는 것은 기술업계 최악의 실수임
   여기에 댓글로 알려주셔서 별도 뉴스로 등록해 봅니다.

   20년전에도 개발자를 대체할 수 있다고 온갖 영업과 기사들이 난무했었는데 지금은 그 시절을 닷컴버블이라고 부르더라고요
   저도 좀 쫄았었는데 아직 먹고살고는 있습니다.
   역사는 반복된다고 하던데 모르지요 ;-)

   정의할 문제는 크게 많아지지 않는 상황에 생산성이 비약적으로 증가하여 소수가 큰 생산성을 가지게 되진 않을 지 우려되기도 하네요.

   그래서 개발 조직을 대체할 수는 없지만, 많은 비율의 개발자는 대체할 수 있다고 생각됩니다.
"
"https://news.hada.io/topic?id=19295","Y콤 S12 커뮤니티 포폴사 출신이 알려주는 창발적 커뮤니티 빌딩 프레임워크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Y콤 S12 커뮤니티 포폴사 출신이 알려주는 창발적 커뮤니티 빌딩 프레임워크

   Y콤비네이터 S12 배치 출신으로 글로벌과 국내 커뮤니티를 운영하며,
   커뮤니티가 단순한 규칙만으로도 자발적으로 성장할 수 있는가를 실험했다.

   그 결과, 5가지 핵심 기둥만 제대로 설정하면 커뮤니티는 자연스럽게 확장될 수 있다는 가설을 정리할 수 있었다.

  자연에서도 반복적으로 나타나는 원리

     * 콘웨이의 생명 게임(Game of Life) 을 보면, 단순한 규칙만으로도 끝없이 복잡한 패턴이 생성된다.
     * 철새들의 이동을 연구한 보이즈 알고리즘(Boids Algorithm) 에서는 세 가지 원칙만 따르면 집단이 형성되고 이동할 수 있다.

   그렇다면, 인간 커뮤니티도 같은 원리로 스스로 성장할 수 있을까?

  커뮤니티 빌딩 프레임워크의 5가지 핵심 기둥

   이 프레임워크는 5가지 기둥을 기반으로 설계된다.
     * 명확한 주제: 커뮤니티의 목적과 가치를 직관적으로 전달할 수 있는가?
     * 내재적 동기 충족: 사람들이 지속적으로 머물 이유가 있는가?
     * 반복 가능한 핵심 콘텐츠: 사람들이 계속 활동할 요소가 있는가?
     * 확산 플라이휠 설계: 커뮤니티가 자연스럽게 성장할 수 있는 구조인가?
     * 온보딩 최적화: 신규 멤버가 빠르게 적응할 수 있는가?

   이 5가지만 잘 설계되면 커뮤니티는 외부 개입 없이도 스스로 성장하고 확장될 수 있다.

  더 깊이 있는 내용이 궁금하다면?

   이번 글에서 이 개념을 정리했고, 이후 시리즈에서는 실제 사례와 실행 방법을 다룰 예정이다.

   🔗 글 보러 가기

   재직하셨던 회사가 어디인가요? 프로필부터 유명인 사칭이라 신뢰가 전혀 가지 않네요

   ㅎㅎ 본캐 공개는 시기가 맞으면 할게요!! 구독해주세요 ㅎㅎ 진양 페르소나는 실리콘벨리 드라마에서 나오는 유명한 케릭터입니다~

   질문에 대한 답으로 구독해달라는 말은 썩 적절하게 보이진 않긴 한데... 그것과 별개로도 여태까지 올리신 모든 글들이 긱뉴스에서 주로 다루는 토픽도 아니거니와 본인이 작성하신 글을 홍보하기 위한 채널로만 사용되는것같아 본문을 제대로 읽어보기도 전에 힘이 빠지게 만드는것같습니다.

   안녕하세요, 의견 주신 분들 모두 감사합니다!

   저도 긱뉴스를 예전부터 즐겨봐서, 여기서 창업·스타트업 이야기도 자주 오가는 걸 보고 “혹시 관심 있는 분들과 제 생각을 나눌 수 있을까?” 싶어 글을 공유했어요. 실제로 트래픽이나 구독 데이터를 보면 이쪽 주제에 흥미를 보여주시는 분들도 제법 있더라고요.

   물론 제 글이 별로거나 홍보처럼 느껴져서 불편하셨다면 죄송합니다. 사람마다 취향과 관점이 다르니, 그냥 가볍게 넘겨주셔도 괜찮아요. 다만, 누군가가 공들여 만든 작업물을 단순히 ‘홍보’나 ‘사칭’으로만 봐버리는 분위기는 솔직히 조금 아쉽습니다.

   제가 알기로 긱뉴스는 한국의 ‘Hacker News’를 지향하는 곳이잖아요. 그렇다면 조금 더 다양한 시도와 의견을 열린 마음으로 보면서, 서로 배우고 소통할 수 있으면 좋겠다는 생각이에요. 저도 앞으로 긍정적인 대화를 이어가려고 노력하겠습니다.

   다른 의견이나 궁금한 점 있으시면 언제든 편하게 말씀해주세요. 감사합니다!

   공감합니다. 저자가 누군지도 모르는 글은 솔직히 읽고 싶은 마음이 잘 안듭니다.
"
"https://news.hada.io/topic?id=19242","`create-react-app` 지원 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        `create-react-app` 지원 종료

   지난 몇 년 간, create-react-app은 기초 React 어플리케이션을 구성하기 좋은 도구였습니다. 하지만 시간이 흐르면서 여러 한계가 나와 이제는 지원을 중단합니다.

   제한 사항은 다음과 같습니다:
    1. 라우팅(Routing): 어떠한 프레임워크 없이 useState로 처리했지만, 이 경우 url이 변경되지 않아 결국 항상 같은 url을 가리키게 만듭니다.
    2. 데이터 불러오기(Data Fetching): useEffect에 fetch 함수를 불러오곤 했지만, 이러면 해당 데이터를 다 불러올 때까지 다른 프로세스가 가만히 있어야 하는 네트워크 폭포수(network waterfall) 현상이 발생합니다.
    3. 코드 분할 기능 결여: 순수 React 어플리케이션은 특정 코드 분할 방법을 쓰지 않아 create-react-app으로 만들 시 단지 하나의 번들로 만들어질 것입니다.
    4. 이외 접근성, 스트리밍 등 여러 가지...

   따라서 React 어플리케이션을 만들고 싶으시다면, 이 문서에 나오듯, Next.js, Remix 등 다른 프레임워크의 도움을 받으세요.

   공식적으로 Vite를 권장하는 것으로 바꾸자는 제안에 말도안되는 이유로 고집을 부리더니...

   리액트 개발가이드에 CRA가 없어진지 한참인데, 이제 정말 지원까지 종료군요.
   Next 나 Remix 같은 프레임워크에 의존해야하는 생태계가 되는것은 아쉽네요.

   관리 안할 거면 리포지토리 닫고 대안을 README와 npm에 표시하라고 그렇게 사람들이 건의했는데 한참을 무시하더군요. 드디어 사라져서 다행이네요

   이미 더 이상 쓸 이유가 없는 디프렉이죠

   Cra 가 하나의 번들로 묶는 게 괜찮았는데요...

   CRA 나름의 장점이 있는데 지원 종료 할 것 까지 있나 싶네요
"
"https://news.hada.io/topic?id=19282","LinkedIn 은 최악의 소셜 미디어임","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         LinkedIn 은 최악의 소셜 미디어임

     * LinkedIn은 AI 생성 콘텐츠로 가득 차 있으며, 다크 패턴이 만연한 플랫폼임
     * 한 사용자가 처음 링크드인을 사용한 3개월 동안 겪은 반복적인 계정 제한 및 검색 노출 문제를 공유

사용자의 문제 경험

     * 계정 생성 후 섀도우밴(Shadowban) 발생
          + 친구들이 내 프로필을 찾을 수 없었고, 직접 링크를 통해서도 접근 불가
          + 고객 지원에 문의 후에야 제한이 해제됨
     * 검색 순위 문제
          + 본인의 분야와 관련된 키워드를 포함하고 있음에도, 검색 결과 최하위로 배치
          + 연관성이 없는 계정들이 상위 노출
     * 프리미엄 가입 후 계정 제한
          + 다른 국가에서 발급된 카드로 결제한 후, 계정 잠김 발생
          + 신분증과 셀카를 제출해야 계정 복구 가능
     * 외부 링크 포함 게시물 작성 후 계정 재제한
          + Medium 글을 홍보하는 게시물을 올리자마자 계정 차단
          + 면접 초대 및 메시지 접근 불가, 심지어 전화 인터뷰까지 놓침
          + 계정 복구까지 4~5일 소요
     * 개인 프로필이 검색에서 완전히 사라짐
          + 내 프로필은 직접 링크로는 접근 가능하지만, 검색 결과에서 완전히 배제
          + 게시물은 숨겨졌고, 추천 피드에도 노출되지 않음
     * 이 모든 일이 LinkedIn을 사용한 지 3개월 만에 일어난 일
     * 난 이보다 더 끔찍한 소셜 미디어, 즉 사용자에 대한 어두운 패턴과 노골적인 학대, 굴욕적인 신원 확인 절차를 강요하고 검색에서 숨기는 소셜 미디어를 본 적이 없음
     * 말할 필요도 없이 나는 플랫폼의 규칙을 위반한 적이 없음 : 스팸도 하지 않고, 사람들을 귀찮게 하지 않고, 광고도 하지 않음
     * 그러나 5년 이상 된 친구 계정은 VPN 사용, 위치 변경, 우회 접속에도 문제없이 사용 가능
     * 그리고, 프리미엄 가입자도 예외 없음. 계정이 제한될 경우, 무료 사용자와 동일한 느린 고객 지원을 받음
     * 본 내용은 원래 Reddit의 LinkedIn 서브레딧에 게시되었으나, 빠르게 인기글이 된 후 삭제됨
          + 작성자는 ""서브레딧을 관리하는 Microsoft 직원이 검열한 것 같다""고 주장

        Hacker News 의견

     * LinkedIn은 최악의 소셜 미디어 중 하나임. 끊임없는 자기 과시와 명백히 조작된 이야기가 많음
          + 그러나 완전히 가치가 없는 것은 아님. 옛 동료들이 요즘 어떻게 지내는지 확인하기 위해 사용함
          + 리크루터가 LinkedIn을 통해 나를 찾아 직장을 얻은 적도 있음
          + 이러한 이유들 중 하나 또는 둘 때문에 사람들이 LinkedIn을 유지하는 것 같음
          + 콘텐츠는 꽤 나쁨
     * 가입 후 즉시 계정을 잠그거나 그림자 차단하는 것은 모바일 번호나 다른 신원을 제공하게 하려는 어두운 패턴임
     * 최근 직장을 바꿔야 한다고 결론 내렸지만, LinkedIn 게시물의 정신 나간 글들을 다루고 싶지 않아 미루었음
          + 실제로는 정상적인 사람들이겠지만, LinkedIn에서는 모든 엉성한 이야기가 지혜의 문으로 여겨짐
          + 소크라테스식 대화가 인간 행동을 설명하는 메커니즘으로 사용됨
          + 매 두 번째 게시물을 '이것은 논란의 여지가 있는 의견이지만 들어보세요...'로 시작함
     * 결국 해고되어 LinkedIn의 평범함의 소용돌이에 다시 빠지게 되었음
          + 내 의지와는 상관없이, 내 자신의 냉소적인 체념조차 행동을 촉구하지 못함
     * LinkedIn은 쓸모없는 게시물로 가득 차 있음
          + '일찍 일어나라, 소이 라떼를 끊어라, 부를 상속받아라' 같은 게시물이 도전받지 않음
          + AI가 생성한 글을 읽는 것이 더 나을지도 모름, 인간성에 대해 더 나은 느낌을 받기 때문임
     * 이번 주에 내 고향에서 열리는 여성 공학 컨퍼런스에 대해 게시했지만, 아무런 반응이 없었음
          + 프로필에 1000명 이상의 연결이 있고, 해시태그를 사용하고, 조직을 태그했지만 반응이 없었음
          + 피드를 열면 10개 중 9개의 게시물이 내가 팔로우하지 않거나 상호작용하지 않은 사람들로부터 옴
          + 뭔가 수상한 일이 벌어지고 있다는 의심이 확신으로 바뀜
     * 다른 플랫폼이었다면 이미 무너졌을 것임
          + 하지만 우리는 모두 일을 찾기 위해 사용하기 때문에 다른 선택지가 없음
          + 대부분의 사람들은 게시물을 올리지 않지만, 여전히 웹사이트를 클릭하고 피드를 봄
          + 광고주에게는 그것만으로도 충분한 것 같음
     * 많이 사용하지 않지만 정치적이고 어리석고 관련 없는 콘텐츠에 질림
          + 원래는 전문적인 네트워킹과 일자리를 찾기 위한 것이었음
          + Facebook처럼 변하고 있음, 원래의 Facebook이 아닌 끔찍하게 부풀어 오른 혼란스러운 모습임
     * LinkedIn 프로필을 영구적으로 비활성화할까 생각 중임
          + 그 플랫폼은 한 번도 유용하지 않았음, 대부분의 사람들은 다른 사람들을 염탐하기 위해 사용함
     * 아이러니하게도 제출물이 기본적으로 숨겨졌지만, 나는 https://news.ycombinator.com/newest 페이지에 머물며 그것을 보증했음
          + 새로운 사용자 계정에 대한 자동 차단 규칙의 또 다른 예임
     * 대부분의 사람들은 일자리를 찾기 위해서만 LinkedIn에 있음
          + 직장이 있을 때는 LinkedIn에 신경 쓰지 않음

   링크드인은 sns라기보단 이력서 전시장 같아서 이직 생각 없을땐 보지도 않긴 하네요;
"
"https://news.hada.io/topic?id=19233","그건 니 생각이고 (feat. 장기하와 얼굴들)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       그건 니 생각이고 (feat. 장기하와 얼굴들)

   정보 소비자로서 조금 더 냉정하게 (말꼬투리 잡기가 아닌) 유효한 근거를 요구하길, 그럼으로써 정보 생산자들도 조금 더 책임감 있게 근거를 명시해주면 좋겠다는 마음으로 쓴 글

   --

  단정 알러지

     * ""개발자 특"" ""소름돋는 ENTP들의 공통점"" ""찐 부자들의 습관"" ""한국 중장년층 창업가들의 특징""
     * 이런 단정적인 문장을 보면 ""출처가 어디냐, 누가 어떻게 수집한 데이터냐"" 같은 질문을 던지고 싶어지는 알러지 증상이 있음
     * 유머글이 아닌 진지하게 주장하는 컨텐츠에서는 통계나 연구 결과 출처를 살핌. 그런 게 없으면 신호보다는 소음에 가깝기 때문. 신뢰할 수 있고 유효한 정보여야 삶에 적용할 수 있음
     * ""내가 경험한"" 같은 전제조건이 딸려있으면 좀 괜찮은데 ""진짜 고수들의"" 같은 게 붙어있으면 다시 증상이 올라옴. 진짜 고수의 기준을 뭘로 잡았는지, 그게 유효한 기준인지 묻고 싶어지기 때문
     * 내 증상과 별개로 SNS에서는 이런 글이 인기를 끄는 걸로 보임. 바넘 효과 때문일 수도 있고 숏폼 컨텐츠의 부상과 관련이 있을 수도 있음
     * 즉 이런 글을 피하고 싶어도 이미 주변에 많음. 그러면 피하기보다는 유효한 정보를 선별하는 태도를 가지는 게 더 유효함

  신호와 소음을 구분하며 나를 지키는 사고법

     * 기본 태도는 '그건 니 생각이고' 임
     * ""개발자 특: 체크무늬 셔츠만 입음"" 같은 말을 들었을 때, '너는 그렇게 생각하는구나. 체크무늬 입은 개발자를 많이 만나봤나보다.' 라고 가볍게 넘기는 식
     * 여기에는 시점에 대한 인식도 포함됨. 모든 의견은 어떠한 창(window), 즉 특정 기간동안 특정 사람의 눈으로 관찰한, 실제 세계의 좁은 단면일 뿐이라고 생각하면 마음이 좀 편해짐
     * 부정적 피드백에 대처할 때도 같은 자세를 취할 수 있음
     * 흥미가 생기면 '개발 직군 종사자와 패션 센스에 대한 연구' 같은 키워드로 검색해봄으로써 유효한 학습 거리를 만들 수도 있음

  거꾸로 생각하기: 이건 내 생각이고

     * 유머 커뮤니티의 아무개가 아닌 유명한 전문가의 말에도, 내가 신뢰하는 사람의 말에도 똑같이 적용됨. 오히려 그런 사람일수록 내가 무비판적으로 수용할 가능성이 커지니 더욱 깨어있어야 함
     * 거꾸로 본인에게 권위가 있다면 스스로를 성역으로 만들고 있진 않은지 주의. 그럴수록 스스로의 파워를 의도적으로 낮추고, 내가 틀릴 수 있음을 강조하며, 반박 의견과 증거를 반갑게 받아들여야 한다고 생각
     * 찰스 다윈이 좋은 예. 종의 기원 출판 전후로 수많은 과학자들과 서신 교류하면서, 본인이 아무리 사랑했던 가설이라도 반박 증거가 나오면 즉시 버렸다고 함. (출처: The Life and Letters of Charles Darwin, 99p)
     * 이런 다윈의 태도가 존경스럽고, 나도 그처럼 살고 싶음

   말콤 글래드웰의 '블링크' 서문 중 일부를 발췌 해 봅니다.

   ""당시 미술관의 큐레이터 아서 호턴Arthur Houghton이 우리를 데리고 미술품 보관실로 내려가 조각상을 보여주었지요. 호턴이 조각상의 덮개를 확 벗기며 말했어요. '음, 이 쿠로스는 아직은 우리 소유가 아닙니다. 하지만 2주 후면 우리 것이 될 겁니다.' 다음 순간 나는 말했지요. '유감스러운 일이군요?”

   해리슨은 무엇을 본 것일까? 그녀 자신도 알 수 없었다. 호턴이 덮개를 벗긴 바로 그 순간, 해리슨은 뭔가 잘못되었다는 것을 본능적으로 감지했을 뿐 이다. 몇 달 후 호턴은 뉴욕 메트로폴리탄 미술관장을 지낸 바 있는 토머스 호빙 Thomas Hoving을 미술관의 보관실로 데려가 조각상을 보여주었다. 호빙은 무언가 새로운 것을 볼 때마다 자신의 뇌리를 스쳐가는 첫 단어를 메모 해두곤 했는데, 그 쿠로스를 처음 본 순간 떠오른 단어는 평생 잊지 못할 표 현이었다. 호빙은 이렇게 회상했다.

   ""그건 '새것fresh'이라는 단어였지요. 새것.

   ㅠㅠ 죄송하지만 어떤 의미로 발췌하셨는지 이해하지 못했습니다. 부연설명해주실 수 있을까요?

   일부만 발췌를 해서 이해가 어려우셨을 것도 같습니다. 리디북스에서 서문 전체를 '미리보기'로 읽어 보실 수 있습니다.

   https://ridibooks.com/books/1546000719

   감사합니다. 데이터가 아닌 직관의 힘에 대한 의견을 주고 싶으셨던 걸로 이해되는군요.

   대표가 이전에 토씨 하나 안 틀리고 제게 이런 말을 내뱉었습니다. 진짜 치욕 그 자체였는데...

   친절한 프로그래밍
   업계 독성 말투, 고칩시다!

   헛… 그걸 입 밖으로 내뱉는 건 다른 문제인데 말이죠.

   인간관계와 인터넷에서도 사회적 거리가 필요한 것처럼 보입니다

   ""~가 ~인 이유"" 같은 제목도 너무나 많습니다.
   이유라고 하면 근거가 있어야 하는데 보통 주장일 뿐이죠.
   우리나라 컨텐츠가 유독 그런거 같아요 (내 생각ㅎㅎ)
   현대 컨텐츠 소비에 있어 좋은 사고방식입니다!

   최근 유튜브에서 집중해서 보는 컨텐츠들이 3~4명의 전문가들이 모여서 서로 의견을 나누고 대화하는 컨텐츠입니다. [일반적으로 구독자에게 말하는게 아닌...]
   서로 어떻게 생각하고, 이런 점은 어떻고, 저런 점은 어떻고, 그 과정에서 유머스러운 대화로 빠지고 다시 주제로 돌아오고... 이 과정에서 대화와 관련된 태도로 배울점이 너무 많더군요.
   다른 의견이 있을 때 어떻게 스무스하게 전달하는지, 대화에서 벗어나는데 자연스럽게 벗어나고 다시 자연스럽게 합류하는 방법, 자신이 생각한 강점을 멋있게 어필하는 방법 등등을 배워볼 수 있었습니다.

   많은 컨텐츠들이 누가 뭐가 맞고, 틀렸고, 조작했고 등등으로 자극적인 내용들을 일반적으로 전달하는데, 대화형 컨텐츠들을 보면 마음이 놓이고 편안합니다.

   괜찮으시다면 혹시 어떤 컨텐츠인지 공유를 부탁드려도 될까요? 설명을 들으니 저도 궁금해져서 보고 싶어졌네요

   닥터프렌즈도 있고 보다(과학을 보다, 철학을 보다 등) 채널도 있습니다

   오 공감합니다. 저는 유튜브를 안보는데 그런 컨텐츠는 누가 추천해서 보면 참 좋더라고요. 그러고보면 말씀대로 혼자가 아닐 때 더 그런 게 드러나는군요.
"
"https://news.hada.io/topic?id=19277","Show GN: Aurora AI - 반응형 GPT 웹 인터페이스 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: Aurora AI - 반응형 GPT 웹 인터페이스

Aurora AI - 반응형 GPT 웹 인터페이스 🌈

   안녕하세요, GeekNews 독자 여러분!
   이전에 소개드렸던 OneLLM와 달리 이번엔 현대적인 GPT의 디자인틀을 유지하며 데스크톱과 모바일 환경 모두에 최적화된 챗봇 서비스를 만들어보았습니다.

  주요 개선사항 ✨

     * 📱 반응형 디자인: 데스크톱과 모바일 모두에서 자연스러운 사용성 제공
     * 🎨 개선된 UI/UX: 더 깔끔하고 직관적인 인터페이스 구현
     * 👤 프로필 커스터마이징: AI와 사용자의 프로필 이미지를 자유롭게 설정 가능
     * ⌨️ 단축키 지원: 자주 사용하는 기능들에 대한 키보드 단축키 추가
     * 🌙 다크 모드: 시스템 설정에 따른 자동 테마 변경
     * 💬 대화 관리: 이전 대화 내역 저장 및 관리 기능

  기술 스택 🛠

     * Frontend: React + TypeScript
     * Styling: Tailwind CSS
     * Build: Vite
     * Deploy: Vercel

  사용해보기 🚀

     * 데모: https://aurora-ai.sideros.kr/
     * GitHub: https://github.com/sioaeko/aurora-ai ( 누구든지 Fork하여 사용하거나 기여할수 있습니다! )

  개발 노트 ✍️

   OneLLM이 갤럭시와 궁합이 맞는 모바일 웹앱(PWA)라는 점에 초점을 맞춰서 데스크탑에서의 사용성이 떨어지는 점에 주목했습니다. Aurora AI는 처음부터 데스크탑 및 모바일 환경을 고려하여 설계했으며, 프로필 이미지 커스터마이징과 같은 개성화 기능도 추가했습니다.

   앞으로도 사용자 피드백을 반영하여 계속 개선해나갈 예정입니다. 의견이나 제안사항이 있으시다면 GitHub 이슈를 통해 알려주세요!

   #WebApp #ChatGPT #React #OpenSource

   아주 좋습니다..노고 많으셨습니다. 감사합니다.

   재미써용

   이쁘네요..

   감사합니다! 더 나은 작품으로 찾아뵙겠습니다
"
"https://news.hada.io/topic?id=19187","Nvidia RTX 5090 전원 커넥터가 과열로 녹아내리는 증상 보고 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Nvidia RTX 5090 전원 커넥터가 과열로 녹아내리는 증상 보고

     * Nvidia의 RTX 5090 GPU에서 전원 커넥터가 녹는 문제가 발생
          + RTX 4090에서도 유사한 문제가 보고된 바 있으며, Nvidia는 사용자가 12VHPWR 전원 커넥터를 제대로 연결하지 않았다고 주장
     * Reddit 사용자와 스페인 유튜버 Toro Tocho는 각각 MODDIY와 FSP에서 제공한 케이블을 사용했음에도 불구하고 동일한 문제가 발생했다고 보고
          + MODDIY는 결함 있는 케이블이나 제조 오류 가능성을 배제하고, Nvidia와 Asus가 보증을 이행하지 않을 경우 수리 비용을 부담하겠다고 밝힘
          + YouTuber der8auer는 사용자 오류가 아닌 전류 분배 문제일 가능성을 제기
     * 12VHPWR 커넥터와 새로운 표준
          + Nvidia는 RTX 40 시리즈부터 12VHPWR 전원 커넥터를 도입했으며, RTX 5090은 최대 575와트를 소모함
          + PCI-SIG는 12VHPWR 커넥터의 초기 문제를 해결하기 위해 12V-2x6 커넥터를 도입함
          + 12V-2x6 커넥터는 더 짧은 감지 핀과 더 긴 도체 단자를 가지고 있어 신뢰성을 높임
          + Corsair와 MSI는 12VHPWR 케이블에 색깔이 있는 핀을 추가하여 연결 상태를 쉽게 확인할 수 있도록 함
     * 다른 제조사의 반응
          + AMD는 8핀 PCIe 연결을 사용하며, 12VHPWR 커넥터를 화재 위험으로 간주
          + Cablemod는 12VHPWR GPU 전원 어댑터를 회수한 바 있음
     * Nvidia의 대응
          + Nvidia는 RTX 5090 전원 커넥터 문제에 대한 논평을 거부함

   50암페어라니... 자기장 코일 수준이네요

   미래에는 전력소모량과 발열때문에 eGPU 같은 설계가 강제될 지도 모르겠네요. 당장 지금도 그래픽카드를 에어컨 실외기같이 생활공간에서 옮기고 싶어요

     첫 번째 RTX 세대가 자체 PSU와 벽 플러그 케이블을 함께 제공하는 것을 기다리고 있음

   아무래도.. 별도 전원 케이블이 좋을거 같습니다.

        Hacker News 의견

     * 12vhpwr는 거의 안전 여유가 없음. 작은 문제도 빠르게 큰 문제로 발전할 수 있음. 600W는 무서운 수준이며, 800W 피크가 보고됨
          + 12V2x6은 특히 문제가 많음. 불균형이 생기면 사양을 초과할 수 있음. 예를 들어, 600W에서는 각 핀에 8.3A가 전달됨. Molex Micro-Fit 3.0 커넥터는 보통 8.5A로 평가됨. 여유가 거의 없음
          + 연결이 나쁘면 커넥터당 전류가 10A로 증가하여 사양을 초과함. 부분적으로 연결된 핀에서는 8.5A-10A가 빠르게 납을 녹일 정도로 가열됨
          + 16 게이지 와이어는 12V/8.5A/100W에 적합하지 않음. 10A로 평가됨. 14 게이지 와이어로 더 많은 안전 여유를 보고 싶음
          + 요약하면, 12V2x6은 안전 여유가 거의 없음. 하드웨어를 소중히 여긴다면 주의해서 다룰 필요가 있음
     * 나사로 고정하는 커넥터를 다시 도입하길 바람
     * Nvidia 엔지니어들에게 무슨 일이 있었는지에 대한 통찰을 얻고 싶음
          + 3 시리즈와 이전 모델은 전력 공급 시스템이 과도하게 설계됨. 어떻게 1개의 션트 저항을 가진 5 시리즈의 위험한 화재 위험 설계로 바뀌었는지 궁금함
          + 4 시리즈의 명백한 문제에도 불구하고 Nvidia는 실제로 더 나쁘게 만듦
          + 이 수준의 무능함이 놀라움. Nvidia는 업계에서 가장 잘 보상받는 전기 엔지니어들이 있음. 어떻게 이런 일이 발생했는지 이해할 수 없음
     * Derbauer와 Buildzoid가 YouTube에서 주제에 대한 유익한 비디오를 만듦. 단순한 사용자 오류가 아님. 7900 XTX를 선택해서 다행임. 몇 년간 문제 없을 것임
     * 커넥터 설계에 실제 문제가 있음. der8auer가 자신의 RTX 5090FE로 테스트했을 때 두 개의 케이블 가닥이 150ºC 이상의 온도에 도달함
     * NVIDIA가 24 게이지 와이어에 두 배의 전류를 공급하여 소비자 안전 법규를 위반하고 있는지 궁금함. UL 인증을 위반하고 있는지 여부도 궁금함
     * 40 시리즈 카드에서 같은 일이 발생했을 때 업그레이드를 하지 않기로 결정함. 집이 불타는 것을 원하지 않음
     * GPU 전압을 48V로 올리길 제안함. 새로운 커넥터를 만들면서 기존 PSU와 호환되지 않게 만드는 것보다 문제를 한 번에 해결하는 것이 좋음
     * 고온을 견딜 수 있는 플라스틱이 있음. 자동차 응용 분야에서 많이 사용됨. 컴퓨터 내부에서는 자주 보이지 않음
     * 소비자용 컴퓨터 내부에 50암페어는 과도함. 더 높은 전압으로 전환하여 전류를 줄일 때가 됨
     * 첫 번째 RTX 세대가 자체 PSU와 벽 플러그 케이블을 함께 제공하는 것을 기다리고 있음
"
